[00:04] *** frost joined
[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:12] *** frost left
[00:19] *** bigdata left
[00:55] *** p6steve_ joined
[00:57] *** p6steve left
[01:09] *** kaiepi joined
[01:48] *** kaiepi left
[02:27] *** swaggboi left
[02:27] *** euandreh left
[02:40] *** swaggboi joined
[03:18] *** euandreh joined
[03:52] *** samcv left
[03:53] *** Guest35 left
[03:53] *** samcv joined
[04:53] *** linkable6 left
[04:53] *** greppable6 left
[04:53] *** reportable6 left
[04:53] *** notable6 left
[04:53] *** committable6 left
[04:53] *** tellable6 left
[04:53] *** releasable6 left
[04:53] *** bloatable6 left
[04:53] *** coverable6 left
[04:53] *** nativecallable6 left
[04:53] *** benchable6 left
[04:53] *** evalable6 left
[04:53] *** unicodable6 left
[04:53] *** quotable6 left
[04:53] *** bisectable6 left
[04:53] *** sourceable6 left
[04:53] *** shareable6 left
[04:53] *** statisfiable6 left
[04:54] *** statisfiable6 joined
[04:54] *** greppable6 joined
[04:54] *** evalable6 joined
[04:54] *** unicodable6 joined
[04:54] *** reportable6 joined
[04:54] *** nativecallable6 joined
[04:55] *** sourceable6 joined
[04:55] *** committable6 joined
[04:55] *** releasable6 joined
[04:55] *** shareable6 joined
[04:55] *** notable6 joined
[04:55] *** coverable6 joined
[04:55] *** quotable6 joined
[04:56] *** linkable6 joined
[04:56] *** bisectable6 joined
[04:56] *** tellable6 joined
[04:56] *** bloatable6 joined
[04:56] *** benchable6 joined
[05:09] *** z4kz joined
[05:17] *** z4kz left
[05:56] *** Sgeo left
[06:07] *** Sankalp left
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:38] *** jjido joined
[06:49] *** Sankalp joined
[07:01] *** abraxxa joined
[07:03] *** Sankalp left
[07:06] *** Sankalp joined
[07:07] *** abraxxa left
[07:08] *** abraxxa joined
[07:39] *** jjido left
[07:53] *** kaiepi joined
[08:05] *** dakkar joined
[08:19] *** kaiepi left
[08:22] *** kaiepi joined
[08:23] *** jmcgnh left
[08:26] *** kaiepi left
[08:28] *** kaiepi joined
[08:31] *** jmcgnh joined
[08:46] *** donpdonp|z left
[08:46] *** donpdonp|z_ joined
[08:49] *** sivoais left
[08:50] *** sivoais joined
[08:53] *** Sankalp left
[08:54] *** Sankalp joined
[09:08] *** frost joined
[09:22] *** discord-raku-bot left
[09:22] *** discord-raku-bot joined
[10:10] *** jaguart joined
[10:56] *** sena_kun left
[10:58] *** sena_kun joined
[11:13] *** p6steve_ left
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:15] *** frost left
[12:20] *** frost joined
[12:59] *** bigdata joined
[13:01] *** jaguart left
[13:10] *** Guest35 joined
[13:29] *** jaguart joined
[13:42] *** hankache joined
[13:50] *** hankache left
[13:50] *** hankache_ joined
[13:51] *** hankache_ left
[13:53] *** TempIRCLogger left
[13:54] *** bigdata left
[13:55] *** lizmat left
[14:15] *** Sgeo joined
[14:15] *** bigdata joined
[14:17] *** kaiepi left
[14:18] *** kaiepi joined
[14:19] *** hankache joined
[14:20] *** frost left
[14:39] *** kaiepi left
[14:46] *** londoed__ joined
[14:50] *** londoed_ left
[15:02] *** hankache left
[15:02] *** hankache_ joined
[15:03] *** hankache_ left
[15:48] *** kaiepi joined
[15:57] *** abraxxa left
[16:00] *** unclechu left
[16:01] *** kaiepi left
[16:03] *** kaiepi joined
[16:12] *** bigdata left
[16:30] *** dakkar left
[16:30] *** guifa joined
[16:33] *** RakuIRCLogger left
[16:33] *** Geth left
[16:33] *** RakuIRCLogger joined
[16:34] *** Geth joined
[16:36] *** TempIRCLogger joined
[16:36] *** lizmat joined
[16:40] *** bigdata joined
[16:40] *** TempIRCLogger left
[16:40] *** TempIRCLogger joined
[16:47] *** hankache joined
[16:51] *** bigdata left
[16:58] <hankache> m: say "Hello #raku"
[16:59] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Hello #raku‚ê§¬ª
[16:59] <tellable6> 2020-06-01T18:36:00Z #raku-dev <tyil> .tell hankache maybe you can help here https://stackoverflow.com/questions/62137280/warnings-while-building-rakudo-in-windows
[17:13] *** euandreh left
[17:19] *** euandreh joined
[17:24] <El_Che> hankache: it's been a while :)
[17:28] <hankache> El_Che indeed it has!
[17:29] <hankache> I hope all is well :)
[17:38] <El_Che> :)
[17:52] *** Sankalp left
[18:02] *** Sankalp joined
[18:02] *** Manifest0 joined
[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[18:26] *** hankache left
[19:02] *** juanfra__ joined
[19:15] *** n1to joined
[19:19] *** n1to left
[19:20] *** n1to joined
[19:23] *** jjido joined
[19:28] *** discord-raku-bot left
[19:29] *** discord-raku-bot joined
[19:30] *** guifa left
[19:39] *** discord-raku-bot left
[19:39] *** discord-raku-bot joined
[20:39] *** reportable6 left
[20:39] *** sourceable6 left
[20:39] *** benchable6 left
[20:39] *** notable6 left
[20:39] *** unicodable6 left
[20:39] *** evalable6 left
[20:39] *** tellable6 left
[20:39] *** quotable6 left
[20:39] *** linkable6 left
[20:39] *** nativecallable6 left
[20:39] *** bloatable6 left
[20:39] *** bisectable6 left
[20:39] *** greppable6 left
[20:39] *** coverable6 left
[20:39] *** statisfiable6 left
[20:39] *** committable6 left
[20:39] *** releasable6 left
[20:39] *** shareable6 left
[20:40] *** tellable6 joined
[20:40] *** bisectable6 joined
[20:40] *** releasable6 joined
[20:40] *** committable6 joined
[20:40] *** greppable6 joined
[20:40] *** evalable6 joined
[20:40] *** statisfiable6 joined
[20:41] *** nativecallable6 joined
[20:41] *** benchable6 joined
[20:41] *** coverable6 joined
[20:41] *** shareable6 joined
[20:41] *** notable6 joined
[20:41] *** linkable6 joined
[20:42] *** reportable6 joined
[20:42] *** sourceable6 joined
[20:42] *** unicodable6 joined
[20:42] *** quotable6 joined
[20:42] *** bloatable6 joined
[21:01] *** sena_kun left
[21:02] *** sena_kun joined
[21:10] *** jaguart left
[21:19] *** grondilu joined
[21:23] <grondilu> Hi.  Is there such a thing as a mutator method?  One that would define the semantics for `$instance.rw-attribute = $some-value` ?
[21:32] <grondilu> I guess I can write a `set-attribute` method.
[21:35] <Voldenet> grondilu: this could be applicable https://docs.raku.org/type/Proxy
[21:37] <Voldenet> I've checked, it's not working as I expected
[21:38] *** jjido left
[21:41] *** jjido joined
[21:41] *** z4kz joined
[21:44] <grondilu> Voldenet: that might be what I need, though.  What do you mean it's not working?  Is it broken or something?
[21:46] <grondilu> m: my $x; my $p = Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { $x = $y }; $p = 5; say $p;
[21:46] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§5‚ê§  in method <anon> at <tmp> line 1‚ê§¬ª
[21:46] <grondilu> m: my $x = 2; my $p = Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { $x = $y }; $p = 5; say $p;
[21:46] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´5‚ê§¬ª
[21:47] <grondilu> ü§î 
[21:48] <grondilu> meh, I can write a set method until I figure out this.
[21:50] <grondilu> still...
[21:50] <grondilu> m: my $x = 2; my $p = Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { note "using STORE!"; $x = $y }; $p = 5; say $p;
[21:50] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´5‚ê§¬ª
[21:50] <grondilu> m: my $x = 2; my $p = Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { $x = $y }; $p = 5; say $p ~~ Proxy;
[21:50] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´False‚ê§¬ª
[21:56] <japhb> Bind the Proxy to $p, I think
[21:57] <japhb> Otherwise you're sticking a Proxy inside a Scalar, and the Scalar's assignment semantics win.
[21:58] <japhb> m: my $x = 2; my $p := Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { $x = $y }; $p = 5; say $p ~~ Proxy;
[21:58] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´False‚ê§¬ª
[21:58] <japhb> m: my $x = 2; my $p := Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { $x = $y }; $p = 5; say $p
[21:58] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´10‚ê§¬ª
[21:58] <japhb> m: my $x = 2; my $p := Proxy.new: FETCH => method { 2*$x }, STORE => method ($y) { $x = $y }; $p = 5; say $p.VAR ~~ Proxy
[21:58] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´True‚ê§¬ª
[21:59] <japhb> grondilu: ^^
[21:59] <grondilu> japhb: noted, thanks
[22:00] * grondilu goes to sleep
[22:00] *** grondilu left
[22:09] *** z4kz left
[22:16] <Voldenet> grondilu: by `not working as expected` I meant storing Proxy in an attribute, it's possible to use it if you can accept that accessing the setter always allocates the proxy
[22:16] <tellable6> Voldenet, I'll pass your message to grondilu
[22:24] *** n1to left
[22:38] *** juanfra__ left
[22:38] *** juanfra__ joined
[23:09] *** guifa joined
[23:19] *** z4kz joined
[23:34] *** grondilu joined
[23:34] * grondilu is back, couldn't sleep.
[23:34] <tellable6> 2022-05-05T22:16:09Z #raku <Voldenet> grondilu: by `not working as expected` I meant storing Proxy in an attribute, it's possible to use it if you can accept that accessing the setter always allocates the proxy
[23:36] <grondilu> or maybe inherit from Proxy and make the whole class the Proxy?  That's what I just tried and failed:
[23:36] <grondilu> m: my $p := class :: is Proxy { multi method new { samewith: FETCH => method { pi }, STORE => method ($v) { } } }.new; say $p
[23:36] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Cannot find method 'is_dispatcher' on object of type BOOTCode‚ê§at <tmp>:1‚ê§¬ª
[23:39] <Voldenet> I'm unsure if it's valid to store a proxy somehow
[23:40] <grondilu> m: my %h; say %h<foo> := Proxy.new: FETCH => method { pi }, STORE => method ($v) { }
[23:40] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´3.141592653589793‚ê§¬ª
[23:40] <Voldenet> Binding operator is crucial, not sure if you can bind to an attribute of an instance
[23:41] <Voldenet> m: class X { has $.p := Proxy.new(FETCH => { 42 }, STORE => method ($n) { say "storing " ~ $n }); }
[23:41] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Cannot use := to initialize an attribute‚ê§at <tmp>:1‚ê§------>  => method ($n) { say "storing " ~ $n })‚èè; }‚ê§¬ª
[23:42] <grondilu> well that is a very explicit error message
[23:42] <Voldenet> m: class y { method p is rw { Proxy.new(FETCH => { 42 }, STORE => method ($n) { say "storing " ~ $n }); } }; say y.new.p = 45
[23:42] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´storing 45‚ê§42‚ê§¬ª
[23:43] <grondilu> nice
[23:43] <Voldenet> it sounds like it would allocate a lot
[23:43] <Voldenet> and also
[23:43] <Voldenet> m: class y { method p is rw { Proxy.new(FETCH => { say "fetch"; 42 }, STORE => method ($n) { say "storing " ~ $n }); } }; say y.new.p = 45
[23:43] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´storing 45‚ê§fetch‚ê§fetch‚ê§fetch‚ê§fetch‚ê§fetch‚ê§42‚ê§¬ª
[23:44] <Voldenet> I didn't benchmark this, but java style getters/setters (explicit methods) sound faster
[23:44] <grondilu> why the many calls to FETCH? 
[23:45] <Voldenet> ‚Ä¶absolutely no idea
[23:49] <grondilu> I could also use FALLBACK with rw trait, I suppose
[23:50] <grondilu> m: class { method FALLBACK($str, $value) is rw { say "$value" } }.new.foo("bar")
[23:50] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´bar‚ê§¬ª
[23:50] <grondilu> with that I can do anything I want.
[23:51] *** Altai-man joined
[23:52] <Voldenet> I like FALLBACK, but I'm expecting serious drawbacks when trying to tool it anyhow
[23:53] <grondilu> m: class X { has $.x; method FALLBACK($str, $value) is rw { Proxy.new: FETCH => method { $!x }, STORE => method ($v) { say "storing!"; $!x = $v } }; my X $x .= new: x => pi; $x.x = 3;
[23:53] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------>  } }; my X $x .= new: x => pi; $x.x = 3;‚èè<EOL>‚ê§¬ª
[23:53] <grondilu> m: class X { has $.x; method FALLBACK($str, $value) is rw { Proxy.new: FETCH => method { $!x }, STORE => method ($v) { say "storing!"; $!x = $v } } }; my X $x .= new: x => pi; $x.x = 3;
[23:53] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Cannot modify an immutable Num (3.141592653589793)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[23:54] *** sena_kun left
[23:54] <grondilu> wth am I doing?
[23:54] <Voldenet> you're trying to modify constant pi ;)
[23:54] <Voldenet> I'm glad you couldn't
[23:55] <grondilu> If I use fallback I don't need a proxy anymore, but I have to process the arg and check it's an attribute name.
[23:55] <Voldenet> m: class X { has $.x is rw; method FALLBACK($str, $value) is rw { Proxy.new: FETCH => method { $!x }, STORE => method ($v) { say "storing!"; $!x = $v } } }; my X $x .= new: x => pi; $x.x = 4; say $x.x
[23:55] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´4‚ê§¬ª
[23:56] <Voldenet> m: class X { has $.x is rw; method FALLBACK($str, $value) is rw { Proxy.new: FETCH => method { $!x }, STORE => method ($v) { say "storing!"; $!x = $v } } }; my X $x .= new: x => pi; $x.x = 4; say $x.x; say now - BEGIN { now }
[23:56] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´4‚ê§0.01807157‚ê§¬ª
[23:56] <grondilu> the proxy wasn't called
[23:57] <grondilu> FALLBACK can't be triggered since there is a candidate
[23:57] <grondilu> but that's actually what I want for my project
[23:58] <grondilu> I want to emulate attributes through a hash that contains names of pseudo-attributes
[23:59] <grondilu> so FALLBACK will be triggered.
[23:59] <grondilu> It might be perfect.
