[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[00:13] *** HvszrStykp left
[00:45] *** ProperN[out] joined
[00:45] *** ProperNoun left
[00:54] *** kaskal- joined
[00:55] *** timo left
[00:55] *** kaskal left
[00:55] *** timo joined
[01:28] <Geth> ¦ ecosystem/main: 71a14e3001 | (Nick Logan)++ (committed using GitHub Web editor) | META.list
[01:28] <Geth> ¦ ecosystem/main: More rename Perl6->Raku and master->main
[01:28] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/71a14e3001
[01:55] *** linkable6 left
[01:55] *** evalable6 left
[01:58] *** evalable6 joined
[01:58] *** linkable6 joined
[02:04] *** vrurg_ joined
[02:04] *** vrurg left
[02:35] *** frost joined
[03:03] *** vasko joined
[03:03] *** vasko left
[03:03] *** vasko joined
[03:14] *** HvszrStykp joined
[04:14] *** greppable6 left
[04:14] *** shareable6 left
[04:14] *** sourceable6 left
[04:14] *** unicodable6 left
[04:14] *** squashable6 left
[04:14] *** bisectable6 left
[04:14] *** releasable6 left
[04:14] *** committable6 left
[04:14] *** notable6 left
[04:14] *** bloatable6 left
[04:14] *** statisfiable6 left
[04:14] *** benchable6 left
[04:14] *** evalable6 left
[04:14] *** linkable6 left
[04:14] *** coverable6 left
[04:14] *** nativecallable6 left
[04:14] *** quotable6 left
[04:14] *** tellable6 left
[04:14] *** reportable6 left
[04:15] *** quotable6 joined
[04:15] *** greppable6 joined
[04:15] *** evalable6 joined
[04:15] *** tellable6 joined
[04:15] *** releasable6 joined
[04:15] *** benchable6 joined
[04:15] *** bloatable6 joined
[04:15] *** committable6 joined
[04:16] *** bisectable6 joined
[04:16] *** shareable6 joined
[04:16] *** linkable6 joined
[04:16] *** statisfiable6 joined
[04:16] *** unicodable6 joined
[04:17] *** nativecallable6 joined
[04:17] *** squashable6 joined
[04:17] *** sourceable6 joined
[04:17] *** notable6 joined
[04:18] *** coverable6 joined
[04:18] *** reportable6 joined
[05:18] *** linkable6 left
[05:18] *** evalable6 left
[05:18] *** linkable6 joined
[05:18] *** evalable6 joined
[05:31] *** bigdata joined
[05:31] *** bigdata left
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:27] *** abraxxa joined
[06:32] *** abraxxa left
[06:32] *** abraxxa joined
[06:35] *** Nemokosch joined
[06:36] *** Nemokosch left
[06:47] *** TieUpYourCamel left
[06:47] *** simcop2387 left
[06:47] *** samcv left
[06:47] *** archenoth left
[06:47] *** kybr left
[06:47] *** a3r0 left
[06:47] *** gfldex left
[06:47] *** jmcgnh left
[06:47] *** swaggboi left
[06:47] *** nine left
[06:47] *** tailgate left
[06:47] *** El_Che left
[06:47] *** avar left
[06:47] *** leah2 left
[06:47] *** hexology- left
[06:47] *** peder left
[06:47] *** bartolin_ left
[06:47] *** tinita left
[06:47] *** jercos_ left
[06:47] *** cnx left
[06:47] *** ecocode___ left
[06:47] *** alethkit left
[06:47] *** patrickb left
[06:47] *** GreaseMonkey left
[06:47] *** sftp left
[06:47] *** mykhal left
[06:47] *** BinGOs left
[06:47] *** Grrrr left
[06:47] *** camelia left
[06:47] *** leont left
[06:47] *** skaji left
[06:47] *** gordonfish left
[06:47] *** KotH left
[06:47] *** nicole left
[06:47] *** thowe_ left
[06:47] *** zostay left
[06:47] *** aqua2 left
[06:47] *** mtj left
[06:47] *** Altreus left
[06:47] *** rjbs left
[06:47] *** kawaii_ left
[06:47] *** charsbar left
[06:47] *** leedo_ left
[06:47] *** jcallen left
[06:47] *** Ekho left
[06:48] *** Nemokosch joined
[06:50] *** TieUpYourCamel joined
[06:50] *** simcop2387 joined
[06:50] *** samcv joined
[06:50] *** archenoth joined
[06:50] *** kybr joined
[06:50] *** leah2 joined
[06:50] *** El_Che joined
[06:50] *** avar joined
[06:50] *** tailgate joined
[06:50] *** nine joined
[06:50] *** swaggboi joined
[06:50] *** jmcgnh joined
[06:50] *** gfldex joined
[06:50] *** a3r0 joined
[06:50] *** Matthew|m left
[06:51] *** crystalfrost[m] left
[06:52] *** MitarashiDango[m left
[06:52] *** tadzik left
[06:53] *** AlexDaniel left
[06:54] *** CIAvash left
[06:56] *** TieUpYourCamel left
[06:56] *** simcop2387 left
[06:56] *** samcv left
[06:56] *** archenoth left
[06:56] *** kybr left
[06:56] *** a3r0 left
[06:56] *** gfldex left
[06:56] *** jmcgnh left
[06:56] *** swaggboi left
[06:56] *** nine left
[06:56] *** tailgate left
[06:56] *** El_Che left
[06:56] *** avar left
[06:56] *** leah2 left
[06:56] *** epony left
[06:58] *** Ekho joined
[06:58] *** jcallen joined
[06:58] *** leedo_ joined
[06:58] *** charsbar joined
[06:58] *** kawaii_ joined
[06:58] *** rjbs joined
[06:58] *** Altreus joined
[06:58] *** mtj joined
[06:58] *** aqua2 joined
[06:58] *** zostay joined
[06:58] *** thowe_ joined
[06:58] *** nicole joined
[06:58] *** KotH joined
[06:58] *** gordonfish joined
[06:58] *** skaji joined
[06:58] *** leont joined
[06:58] *** camelia joined
[06:58] *** BinGOs joined
[06:58] *** mykhal joined
[06:58] *** sftp joined
[06:58] *** Grrrr joined
[06:58] *** GreaseMonkey joined
[06:58] *** patrickb joined
[06:58] *** alethkit joined
[06:58] *** cnx joined
[06:58] *** ecocode___ joined
[06:58] *** jercos_ joined
[06:58] *** tinita joined
[06:58] *** bartolin_ joined
[06:58] *** peder joined
[06:58] *** hexology- joined
[06:58] *** TieUpYourCamel joined
[06:58] *** simcop2387 joined
[06:58] *** samcv joined
[06:58] *** archenoth joined
[06:58] *** kybr joined
[06:58] *** leah2 joined
[06:58] *** El_Che joined
[06:58] *** avar joined
[06:58] *** tailgate joined
[06:58] *** nine joined
[06:58] *** swaggboi joined
[06:58] *** jmcgnh joined
[06:58] *** gfldex joined
[06:58] *** a3r0 joined
[07:01] *** jtza8 joined
[07:13] *** AlexDaniel joined
[07:14] *** Sgeo left
[07:16] *** epony joined
[07:25] *** MitarashiDango[m joined
[07:26] *** CIAvash joined
[07:32] *** jaguart left
[07:44] *** crystalfrost[m] joined
[07:58] *** sena_kun joined
[08:28] *** tadzik joined
[09:28] *** greppable6 left
[09:28] *** statisfiable6 left
[09:28] *** coverable6 left
[09:28] *** committable6 left
[09:28] *** tellable6 left
[09:28] *** bisectable6 left
[09:28] *** notable6 left
[09:28] *** shareable6 left
[09:28] *** sourceable6 left
[09:28] *** reportable6 left
[09:28] *** quotable6 left
[09:28] *** unicodable6 left
[09:28] *** evalable6 left
[09:28] *** squashable6 left
[09:28] *** releasable6 left
[09:28] *** benchable6 left
[09:28] *** nativecallable6 left
[09:28] *** bloatable6 left
[09:28] *** linkable6 left
[09:29] *** committable6 joined
[09:29] *** quotable6 joined
[09:29] *** statisfiable6 joined
[09:29] *** coverable6 joined
[09:29] *** releasable6 joined
[09:29] *** sourceable6 joined
[09:30] *** evalable6 joined
[09:30] *** unicodable6 joined
[09:30] *** bisectable6 joined
[09:30] *** linkable6 joined
[09:30] *** greppable6 joined
[09:31] *** benchable6 joined
[09:31] *** squashable6 joined
[09:31] *** shareable6 joined
[09:31] *** bloatable6 joined
[09:31] *** tellable6 joined
[09:31] *** notable6 joined
[09:31] *** reportable6 joined
[09:32] *** nativecallable6 joined
[09:34] *** sena_kun left
[09:36] *** sena_kun joined
[09:36] *** sena_kun left
[09:56] *** axmed left
[09:59] *** xinming left
[10:08] *** xinming joined
[10:09] *** Nemokosch left
[10:21] *** Matthew|m joined
[10:25] * lizmat forgot to clickbait this yesterday: https://rakudoweekly.blog/2022/09/05/2022-36-coming-in-at-50/
[10:28] *** sena_kun joined
[10:29] *** reol joined
[10:40] *** bigdata joined
[11:01] *** razetime joined
[11:02] *** bigdata left
[11:28] *** jaguart joined
[11:28] *** jaguart left
[11:39] *** grondilu joined
[11:39] <grondilu> Hi all
[11:41] <grondilu> I stumbled upon a case where a 'partially dimensioned view of array from fixed-sized array' would be very convenient.
[11:41] <grondilu> it's NYI AFAIU
[11:41] <grondilu> mentioned in https://github.com/Raku/old-issue-tracker/issues/6075
[11:41] <grondilu> is it in the works?
[11:42] <grondilu> FYI I was looking at implementing SHA-3
[11:43] <grondilu> where the state is a three-dimensional array
[11:45] <grondilu> https://csrc.nist.gov/publications/detail/fips/202/final for details
[11:47] <grondilu> I'm not even sure it's even in the test suite rn, though.
[11:48] <grondilu> most relevant file I see seems to be https://github.com/Raku/roast/blob/master/S32-array/multislice-6e.t and I don't see any test of partially dimensiond views
[11:49] <lizmat> grondilu: could very well be that there are no tests  :-(
[11:51] <grondilu> oh wait there are whatevers sent as indices in this file
[11:59] <grondilu> no fixed-size, though
[12:00] <lizmat> as always...  PRs welcome  :-)
[12:05] <grondilu> ah my bad the relevant dir might be S09-multidim
[12:06] *** reportable6 left
[12:07] <grondilu> maybe S09-multidim/indexing.t
[12:09] *** reportable6 joined
[12:18] <grondilu> I don't often request pulls, and this one does not offer much, but it's a start : https://github.com/Raku/roast/pull/821
[12:43] *** razetime left
[12:46] *** pjs_ is now known as pejayes
[12:54] *** razetime joined
[12:56] *** vrurg_ is now known as vrurg
[13:02] <lizmat> weekly: https://deprogrammaticaipsum.com/alan-perlis-and-the-evolution-of-programming-languages/
[13:02] <notable6> lizmat, Noted! (weekly)
[13:07] *** frost left
[13:08] *** grondilu left
[13:23] *** jgaz joined
[13:29] *** frost joined
[13:39] *** jtza8 left
[13:41] *** reol left
[13:42] <leont> That is a great article, though I think they miscategorized Raku
[13:46] <Voldenet> "miscategorized"?
[13:50] <Voldenet> I agree that raku is more or less improvement over perl
[13:56] <vrurg> Voldenet: more or less? ;)
[13:56] <leont> I think it's in the third category
[13:57] <Voldenet> I'm not sure about scale, but it's non-revolutionary I think
[13:57] <Voldenet> (none of languages in "useful" category fit the description though)
[13:59] <vrurg> Voldenet: sometimes it is not particular features that make the revolution but how they're put together. I consider Raku to be of this kind.
[14:01] <Voldenet> It certainly is more opinionated and less "there's more than one way to do it"
[14:02] <Voldenet> so people just do async stuff without comparing POE and AnyEvent
[14:05] <vrurg> Are you sure you miss nothing? There is not only async, but there is concurrent. But then there are other paradigms we use sometimes not even noticing we do it. It is all just naturally bind together making one focus more on their task and less on implemenmtation.
[14:06] <Voldenet> async is just an example, but yeah, the "batteries included" mindset is quite revolutionary
[14:07] <Voldenet> since in perl every single useful thing is closed behind cpan module
[14:11] <lizmat> and worse: in most cases hidden behind XS
[14:11] <lizmat> within that module
[14:12] *** ChanServ sets mode: -o lizmat
[14:21] *** Nemokosch joined
[14:28] <leont> It's not about how much batteries, it's about which batteries, IMO
[14:28] <leont> You want to include the actually generic things (like an async framework), but necessarily the common things. If only because common changes a lot more over time than generics do.
[14:41] <Altreus> +not?
[14:42] <Voldenet> for a second I was wondering where "not" was missing and realized that I read it without a typo…
[14:44] <Altreus> heh, this AI has CRC
[14:44] <Voldenet> People have freedom to not use standard library though, the only risk of including too much is breaking backward compatibility later
[15:10] *** axmed joined
[15:11] *** axmed left
[15:21] *** razetime left
[15:28] <leont> Yeah, "but not necessarily"
[15:29] *** razetime joined
[15:30] <leont> See also: the life of CGI.pm
[15:31] *** MoC joined
[15:32] <Altreus> Counterpoint: DateTime.pm
[15:35] <tonyo> use warnings;
[15:39] <El_Che> hi
[15:39] *** frost left
[15:40] <Altreus> does that work every time?
[15:40] <Altreus> use warnings;
[15:42] <tonyo> it's a thing in perl, there was a large, heated discussion about making those the defaults at some point but i think no progress was made (there is use warnings; and use strict;) 
[15:43] <Altreus> that's what perl7 is for
[15:44] <Altreus> in theory
[15:45] <tonyo> kind of out of the loop on perl goings on since sawyer left and perl7 was announced (was writing in go mainly and now main job is python)
[15:49] <ugexe> put ssl in the score you cowards!!
[15:49] <ugexe> core^
[15:50] <Altreus> I think there was a problem doing that
[15:50] <ugexe> yeah i imagine there are tons of problems with doing that 
[15:52] <Altreus> does raku have it?
[15:55] <ugexe> no. having ssl+useragent and a tar library in the core like Go would make fetching modules better in e.g. zef
[15:55] <Altreus> Presumably similar challenges are faced?
[15:56] <Altreus> My stolen opinions about Go suggest that they have done that despite the problems, rather than having solved them
[15:57] *** abraxxa left
[15:59] <tonyo> that's kind of go's schtick, i think
[16:05] <leont> Altreus: yes, DateTime a good example of important and generic
[16:05] <leont> (though it would have been nice if Datetime.timezone actually returned a timezone)
[16:19] <Altreus> leont: yeah, but over time the interface to Perl5's DateTime got under people's skin and so we now have several preferable ones on CPAN
[16:20] <Altreus> so it was more of an example of something that is currently included but that might deteriorate
[16:20] <Altreus> Seems less likely than CGI.pm though :D
[16:26] <Geth> ¦ doc: d56e6f5d09 | (Mathias Reitinger)++ (committed using GitHub Web editor) | doc/Language/concurrency.pod6
[16:26] <Geth> ¦ doc: Update concurrency.pod6 (#4106)
[16:26] <Geth> ¦ doc: 
[16:26] <Geth> ¦ doc: Move the "only one whenever block will be executed at any time" part before the example: it's easy to miss at the bottom but represents a big caveat.
[16:26] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d56e6f5d09
[16:26] <linkable6> Link: https://docs.raku.org/language/concurrency
[16:27] *** linkable6 left
[16:27] <leont> I didn't see this one coming:
[16:27] <leont> m: enum Foo <A B>; say True ~~ B
[16:27] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «True␤»
[16:28] *** linkable6 joined
[16:29] <leont> (they're both 1)
[16:43] <Kaiepi> leont, enums smartmatch on WHICH apparently (??)
[16:48] <Kaiepi> ohhh
[16:48] <Kaiepi> &[===] is a little more than that, but a smartmatch delegates to that
[16:48] <Kaiepi> on an enum
[16:50] <leont> === will check type too, AFAIK
[17:04] *** sena_kun left
[17:34] *** reol joined
[17:37] <Geth> ¦ ecosystem/main: c2587a1a15 | (Nick Logan)++ (committed using GitHub Web editor) | META.list
[17:37] <Geth> ¦ ecosystem/main: More renaming
[17:37] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/c2587a1a15
[17:38] <Geth> ¦ ecosystem/main: More renaming
[17:38] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/c2587a1a15
[17:45] *** razetime left
[17:53] *** sena_kun joined
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:11] <reol> m: sub why(uint64:D $x) { say $x; }; why(0xE5AF9BFD1EAF5AF4);
[18:11] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «16550618667053701876␤»
[18:11] <reol> m: sub why2(uint64:D $x) { say "x=", $x; }; why2(0xE5AF9BFD1EAF5AF4);
[18:11] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «x=-1896125406655849740␤»
[18:11] <reol> Can anyone tell me why the second result is negative?
[18:21] <japhb> A native int/uint/num can't be undefined, so :D doesn't do anything there -- but yeah, looks like you found a bug.
[18:24] <reol> ok ty. is there a way to explicitely cast an integer to uint64? uint64($x) results in 'Impossible coercion from 'Int' into 'uint64': no acceptable coercion method found'
[18:25] <japhb> reol: my uint64 $y = $x;
[18:27] <reol> that is what I did actually. Is there an anonymous way too?
[18:37] <japhb> Not so much anonymous, but I will often do it to force optimization in the middle of a larger expression, as in: https://github.com/japhb/Terminal-Widgets/blob/main/lib/Terminal/Widgets/Utils.rakumod#L9
[18:38] <japhb> (In that particular case I *also* did a multi to allow either objects or natives to be passed in, with the latter skipping the first coercion.)
[18:39] *** MoC left
[18:39] *** MoC_ joined
[18:39] *** MoC_ is now known as MoC
[18:42] <reol> didn't know that you can allocate symbol names within expression. I could fix a couple of problems by using explicit casts, ty.
[18:47] <tonyo> does that work in this case?
[18:47] <tonyo> m: sub why2(uint64 $x) { say "x=", $x; }; why2(my uint64 $x = 0xE5AF9BFD1EAF5AF4);
[18:47] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «x=-1896125406655849740␤»
[18:48] <reol> you have to cast when passing the args to say
[18:49] <tonyo> i mean the inlining that japhb posted
[18:49] <reol> m: sub why2(uint64 $x) { my uint64 $y = $x; say "x=", $y; }; why2(0xE5AF9BFD1EAF5AF4);
[18:49] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «x=16550618667053701876␤»
[18:49] <tonyo> ah
[18:49] <reol> no the inline version fails too
[18:49] <tonyo> changing that signature to UInt also just works
[18:49] <reol> m: sub why2(uint64 $x) { say "x=", my uint64 $y = $x; }; why2(0xE5AF9BFD1EAF5AF4);
[18:49] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «x=-1896125406655849740␤»
[18:49] <tonyo> (not to say uint64 shouldn't)
[18:50] <reol> Uint fails too
[18:50] <tonyo> m: sub why2(UInt $x) { printf "\%x\n", $x; }; why2(0xE5AF9BFD1EAF5AF4 );
[18:50] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «e5af9bfd1eaf5af4␤»
[18:50] <tonyo> that seems to work for me
[18:52] <reol> maybe I just tried uint. I don't know anymore
[18:55] <reol> another strange problem is the following
[18:55] <reol> m: class foo { has $.x; method new(uint $x) { self.bless(:$x); } }; foo.new(1);
[18:55] <camelia> rakudo-moar 7342d9dc2: ( no output )
[18:55] <reol> class foo { has $.x; multi method new(uint $x) { self.bless(:$x); } }; foo.new(1);
[18:55] <reol> m: class foo { has $.x; multi method new(uint $x) { self.bless(:$x); } }; foo.new(1);
[18:55] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «Default constructor for 'foo' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»
[18:56] <reol> however without the type constraint it works.
[18:56] <reol> m: class foo { has $.x; multi method new($x) { self.bless(:$x); } }; foo.new(1);
[18:56] <camelia> rakudo-moar 7342d9dc2: ( no output )
[18:59] *** n1to joined
[19:14] *** perlbot left
[19:15] *** simcop2387 left
[19:15] *** simcop2387 joined
[19:16] *** sena_kun left
[19:17] *** perlbot joined
[19:19] *** sena_kun joined
[19:27] *** Nemokosch left
[19:57] *** MoC_ joined
[19:57] *** MoC left
[19:57] *** MoC_ is now known as MoC
[19:58] *** discord-raku-bot joined
[20:06] *** hexology- is now known as hexology
[20:36] *** epony left
[20:40] *** epony joined
[20:54] *** MoC left
[21:11] *** jgaz left
[22:01] <reol> Is there a way to use (anon) unix domain sockets in Raku? The IO::Socket API doesn't seem to support it
[22:05] *** bigdata joined
[22:07] *** n1to left
[22:17] *** vasko left
[22:25] *** sena_kun left
[22:51] *** Sgeo joined
[23:36] *** bigdata left
