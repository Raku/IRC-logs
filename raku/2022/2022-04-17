[00:07] *** reportable6 left
[00:08] *** clarjon1 left
[00:09] *** reportable6 joined
[00:14] *** rbt left
[00:14] *** rbt joined
[00:27] *** Guest35 left
[00:32] *** lichtkind left
[00:41] *** londoed_ left
[00:41] *** londoed left
[00:42] *** londoed_ joined
[00:42] *** londoed joined
[00:53] *** rir left
[00:59] *** rbt left
[00:59] *** rbt joined
[01:04] *** rbt left
[01:06] *** guifa joined
[01:27] <SmokeMachine> u: element of

[01:27] <unicodable6> SmokeMachine, U+2208 ELEMENT OF [Sm] (‚àà)

[01:27] <unicodable6> SmokeMachine, U+2209 NOT AN ELEMENT OF [Sm] (‚àâ)

[01:27] <unicodable6> SmokeMachine, 13 characters in total (‚àà‚àâ‚àä‚ã≤‚ã≥‚ã¥‚ãµ‚ã∂‚ã∑‚ã∏‚ãπ‚üí‚´ô): https://gist.github.com/1c28a0131096aa0b8e90710dd3c5bcc7

[01:28] *** melezhik joined
[01:29] <melezhik> .

[01:29] <tellable6> 2022-04-16T23:06:08Z #raku <SmokeMachine> melezhik it seems it's not being able to connect to PG...

[01:29] <tellable6> 2022-04-16T23:10:17Z #raku <SmokeMachine> melezhik sorry, it seems I misunderstood the message: `stderr: initdb: warning: enabling "trust" authentication for local connections`

[01:29] <tellable6> 2022-04-16T23:11:26Z #raku <SmokeMachine> melezhik I'm not finding what the error is on this log: http://sparrowhub.io:2222/report/132\

[01:29] <tellable6> 2022-04-16T23:12:35Z #raku <SmokeMachine> melezhik the truth is I can't see it running the tests...

[01:30] *** melezhik left
[01:30] *** melezhik joined
[01:32] <melezhik> .tell @SmokeMachine to see test report you need to open "report" tab

[01:32] <tellable6> melezhik, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Tellable

[01:32] *** leedo left
[01:33] *** melezhik left
[01:33] *** melezhik joined
[01:34] <melezhik> .tel SmokeMachine ¬†to see test report you need to open "report" tab

[01:38] <melezhik> Uploaded file: https://uploads.kiwiirc.com/files/8e9ec06e227045e6b63849beafb48b27/Screen%20Shot%202022-04-16%20at%208.37.32%20PM.png

[01:38] <melezhik> ^^ SmokeMachine

[01:40] <melezhik> also init section creates all required red db user with password as well as test database

[01:40] <melezhik> stderr: ++ sudo -u postgres psql -c 'create user testuser with password '\''testpass'\'''

[01:40] <melezhik> ¬†sudo -u postgres sh -l -c 'createdb redtest'

[01:40] <melezhik> sudo -u postgres psql -c 'grant all privileges on database redtest to testuser;'

[01:40] <melezhik> RED_DATABASE=Pg host=localhost port=5432 user=testuser password=testpass dbname=redtest

[01:46] <melezhik> I also increase timeout to 1000 sec per build hopefully it will solve the problem of timeout for long running builds ...

[01:57] *** melezhik left
[02:04] *** frost joined
[02:16] *** hhcryfqnut joined
[02:18] <hhcryfqnut> this was tripping me up```

[02:18] <hhcryfqnut> [0,1] == [1,1]

[02:18] <hhcryfqnut> ```

[02:18] <hhcryfqnut> before i realized it was comparing the lengths (i see that i need to use `eqv`)

[02:19] <hhcryfqnut> also, as someone who has never done perl, i find the `@` sigil very tricky. (i think i'm getting the hang of it tho)

[02:24] <moon-child> fwiw @ works differently than in perl

[02:26] <hhcryfqnut> ah. i'm less alone then. lol

[02:26] <hhcryfqnut> are these the same `(1,1).Array eqv [1,1].Array`¬†¬† `(1,1) ~~ [1,1]`

[02:44] *** melezhik joined
[02:48] *** leedo joined
[02:48] *** melezhik left
[03:24] *** melezhik joined
[03:24] <melezhik> .

[03:30] *** melezhik left
[03:35] *** rbt joined
[03:40] <guifa> (1,1).Array becomes [1,1]

[03:40] <tellable6> 2020-08-04T08:17:00Z #raku-dev <JJMerelo> .tell guifa can you upload your artlcle to the WP site as a draft? Let me schedule it when it's more convenient.

[03:40] <tellable6> 2020-08-06T08:20:00Z #raku-dev <JJMerelo> .tell guifa2 OK, great, thanks. That date is probably OK, I'll check.

[03:40] <guifa> ummmmm

[03:40] <guifa> tellable6 you are drunk

[03:45] <AlexDaniel> A little bit!

[03:46] <AlexDaniel> It was down for some time, I had some restoring to do

[03:46] <AlexDaniel> For some messages it doesn't know if it delivered them or not, sorry

[03:46] <guifa> haha it's fine, that was just a bit hilarious

[03:47] <AlexDaniel> :) I just made double sure that it delivers what it promised to deliver, in this case I guess I was too pessimistic

[03:51] <guifa> I mean, I don't know.  It might not have delivered that ever

[03:52] <guifa> I don't hop on raku-dev often, so if it used to go per channel, it might not have had the chance

[04:22] *** hhcryfqnut left
[04:35] *** zacts joined
[04:47] *** xinming left
[04:49] *** xinming joined
[05:06] *** zacts left
[05:40] *** rbt left
[05:40] *** rbt joined
[05:46] *** frost left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:56] *** rbt left
[06:56] *** rbt joined
[07:06] *** clarjon1 joined
[07:18] *** guifa left
[07:32] *** jjido joined
[07:46] *** rbt left
[07:46] *** rbt joined
[07:51] *** rbt left
[07:51] *** rbt joined
[08:15] *** lichtkind joined
[08:26] *** grondilu joined
[08:29] <grondilu> m: class { has $.foo; multi method new($foo) { LEAVE say $.foo; self.bless: :$foo } }.new: "bar"

[08:29] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Cannot look up attributes in a <anon|1> type object. Did you forget a '.new'?‚ê§  in method foo at <tmp> line 1‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:29] <grondilu> ü§î

[08:30] <grondilu> should't the blessed instance be accessible in the LEAVE phaser?

[08:33] <grondilu> nevermind I think I should use a BUILD submethod

[08:37] <lizmat> grondilu: nowadays I would almost always recommend using TWEAK

[08:38] <lizmat> problem with your code is that "self" inside "new" is still a type object, and $.foo is just short for "self.foo"

[08:47] * grondilu looked at the doc for TWEAK

[08:47] <grondilu> yeah it looks more like what I need

[09:22] *** rbt left
[09:22] *** rbt joined
[09:52] *** rbt left
[09:52] *** rbt joined
[10:23] *** zacts joined
[10:30] *** Sgeo left
[10:58] *** zacts left
[11:00] *** djerius left
[11:25] *** discord-raku-bot left
[11:25] *** discord-raku-bot joined
[11:31] *** xinming left
[11:32] *** xinming joined
[11:33] *** ProperN[out] joined
[11:34] *** ProperNoun left
[11:36] *** jjido left
[11:51] *** sena_kun left
[11:53] *** sena_kun joined
[11:59] *** euandreh joined
[12:02] *** euandreh_ left
[12:04] *** euandreh left
[12:07] *** rbt left
[12:07] *** rbt joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:34] *** frost joined
[12:53] *** rbt left
[12:53] *** rbt joined
[13:08] *** razetime joined
[13:55] *** razetime left
[14:08] *** rjbs left
[14:09] *** zacts joined
[14:10] *** rjbs joined
[14:23] *** rbt left
[14:23] *** rbt joined
[14:34] *** zacts left
[14:42] *** melezhik joined
[14:46] *** melezhik left
[14:53] *** rbt left
[14:53] *** rbt joined
[15:06] *** [Coke] left
[15:10] *** [Coke] joined
[15:21] *** zacts joined
[15:44] *** [Coke] left
[15:44] *** frost left
[15:44] *** [Coke] joined
[15:52] *** zacts left
[16:52] *** evalable6 left
[16:52] *** linkable6 left
[16:53] *** linkable6 joined
[16:54] *** evalable6 joined
[17:07] <Tirifto> m: /<( [ Q[\] . || <-["]> ] * )>/

[17:07] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in metachar:sym<[ ]>; couldn't find final ']' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> /<( [ Q[\] . || <-["]> ] * )>‚èè/‚ê§    expecting any of:‚ê§ ‚Ä¶¬ª

[17:08] <Tirifto> m: raku -e '/<( [ Q[\\] . || <-["]> ] * )>/'

[17:08] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> raku -e‚èè '/<( [ Q[\\] . || <-["]> ] * )>/'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§‚Ä¶¬ª

[17:08] <Tirifto> m: /<( [ Q[\\] . || <-["]> ] * )>/

[17:08] <camelia> rakudo-moar 530e17848: ( no output )

[17:10] <Tirifto> ^ Is this a bug in Raku, or did I miss something? According to the documentation, Q quoting notation does not allow for backslash escapes, but it seems like backslash escapes are used anyway, since the first expression above throws an error, but the third one (where the backslash is escaped in ‚ÄòQ[\\]‚Äô) compiles just fine. (The second expression was a bad copy.)

[17:14] *** rbt left
[17:14] *** rbt joined
[17:17] <Geth> ¬¶ doc: 30206e44bb | (JJ Merelo)++ | xt/check-signatures.t

[17:17] <Geth> ¬¶ doc: Minor doc changes #3871

[17:17] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/30206e44bb

[17:18] *** linkable6 left
[17:20] *** linkable6 joined
[17:31] <Geth> ¬¶ doc: 15ec823039 | (JJ Merelo)++ | xt/check-signatures.t

[17:31] <Geth> ¬¶ doc: Prints the error to make it a bit more informative #3871

[17:31] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/15ec823039

[17:31] *** linkable6 left
[17:32] *** linkable6 joined
[17:36] *** grondilu left
[17:44] *** [Coke]_ joined
[17:44] *** [Coke] left
[18:00] *** jjido joined
[18:07] *** reportable6 left
[18:09] *** sena_kun left
[18:09] *** reportable6 joined
[18:10] *** sena_kun joined
[18:44] *** rbt left
[18:44] *** rbt joined
[18:54] *** rbt left
[18:54] *** rbt joined
[19:00] <gfldex> Tirifto: You are just matching for Q followed by a backslash.

[19:02] <Tirifto> gfldex, Q doesn‚Äôt work as a quoting construct inside regexes? :o

[19:02] <gfldex> indeed

[19:03] <Tirifto> Ahh, I see.

[19:03] <Tirifto> Thank you!

[19:37] *** sena_kun left
[19:39] *** sena_kun joined
[19:54] *** Sgeo joined
[20:10] *** Oshawott joined
[20:14] *** archenoth left
[20:20] *** p6steve joined
[20:21] <Tirifto> If I‚Äôm writing a parser for a document language, are there best practices to naming the module?

[20:26] <Tirifto> I see that there is a namespace for some languages that some modules/parsers use as their parent (XML::Parser::Tiny, XML::Actions, JSON::Fast, JSON::Tiny, JSON::Pretty), while others use it directly (XML, TOML), while others don‚Äôt use it at all (LibXML, YAMLish). This leaves me wondering what pattern should I follow if I would like to write and publish some modules and make them convenient for everyone.

[20:34] <gfldex> It's clear that XML and JSON need parsing. So if the default action is parsing, there is no need to point out your module is a parser.

[20:43] <p6steve> I would say that there are several (competing) conventions: (i) wrapping a perl5 cpan module or native C lib ?? LibXML is a wrapper of libxml, (ii) closely related modules may share a lib file tree conceptually (I am not sure that this is how they are installed anymore - but orginally in perl5 then you knew that XML::Actions would be in folder something like site/lib/XML, (iii) if you set out to write or 

[20:43] <tellable6> 2020-08-07T08:37:00Z #raku-dev <JJMerelo> .tell p6steve you ready to upload your article, or you want me to upload it for you?

[20:43] <tellable6> hey p6steve, you have a message: https://gist.github.com/382ec639cdfd2d866d61af7c6d881186

[20:43] <p6steve> somehow define a "world" of interacting modules (like Cro) then it may not be obvious the best way to define and reuse code in a class structure - but as you work out the design this will become clear (for you) and you can then name the higher levels accordingly 

[20:49] <Tirifto> Thank you. I guess I may as well just use the language name then, and see if that works alright in practice. :-)

[20:53] *** monkey_ joined
[21:26] *** lichtkind_ joined
[21:28] *** lichtkind left
[21:35] *** rbt left
[21:35] *** rbt joined
[21:40] *** rbt left
[21:40] *** rbt joined
[22:01] *** juanfra__ joined
[22:10] *** mexen left
[22:17] *** lichtkind_ left
[22:18] *** londoed left
[22:18] *** londoed_ left
[22:28] <japhb> Tirifto: If you're writing a parser *only*, and not a serializer, then having Parser in the name is reasonable.  If you're doing both directions, then the main name shouldn't include it, but it's reasonable to have submodules that do (e.g. DocLang containing DocLang::Parser and DocLang::Writer).

[22:29] <japhb> I tend to use ::Tiny if the *implementation* is minimalist, ::Simple if the *API* is minimalist

[22:31] <japhb> I personally feel that data codecs should be well optimized anyway, so I generally prefer ::Simple over ::Fast if I think both names might apply; as far as the caller is concerned, ::Simple is an API design decision, but ::Fast is baseline.  ::Tiny usually means that either the implementation is the smallest thing that could reasonably work at all, or that it's designed to favor small, easy-to-read code over 

[22:31] <japhb> any other factor.

[22:32] <japhb> JSON::Tiny, for instance, is a showcase for how much of a difference Grammars can make in terms of implementation clarity.

[23:18] *** linkable6 left
[23:18] *** evalable6 left
[23:19] *** evalable6 joined
[23:21] *** linkable6 joined
[23:25] *** rbt left
[23:25] *** rbt joined
[23:30] *** jjido left
[23:36] *** rbt left
[23:49] *** monkey_ left
[23:56] *** rbt joined
