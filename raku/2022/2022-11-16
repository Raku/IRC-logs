[00:02] <[Coke]> https://github.com/Raku/doc/issues/2637 - are PERL6_TEST_TIMES and PERL6_TEST_DIE_ON_FAIL specced? I see they are *used* in roast, but not actually specced, it looks like.

[00:02] <Geth> ¦ doc: coke self-assigned Too many :skip-tests https://github.com/Raku/doc/issues/2738

[00:05] *** deoac joined
[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:16] *** Kaipei is now known as Kaiepi

[00:17] <[Coke]> m: my ($x, $y) = 42, 42.1; say $x =~= $y :tolerance(.1);

[00:17] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤You can't adverb &infix:<=~=>␤at <tmp>:1␤------> = 42, 42.1; say $x =~= $y :tolerance(.1)⏏;␤»

[00:18] <[Coke]> ^^ the docs say this should work and is a bug and point to an RT that isn't duplicated in github

[00:20] <[Coke]> ok, it's not specced. removing it.

[00:22] <gfldex> =~= wasn't even part of the Synopses.

[00:35] *** masukomi left
[00:41] <Geth> ¦ doc/master: 7 commits pushed by Coke++

[00:41] <Geth> ¦ doc/master: 33ee2dd7b8 | Run more tests

[00:41] <Geth> ¦ doc/master: f400c5ddab | Run more tests

[00:41] <Geth> ¦ doc/master: f9ffd7e9c0 | update skip reason

[00:41] <Geth> ¦ doc/master: 4cf9880bcf | Remove old speculation about :tolerance

[00:41] <Geth> ¦ doc/master: 823e2d91f7 | clarify skip-tests

[00:41] <Geth> ¦ doc/master: 52eeea9c36 | declare :lang

[00:41] <Geth> ¦ doc/master: 17229945bc | run more tests

[00:41] <Geth> ¦ doc/master: review: https://github.com/Raku/doc/compare/a7451ce0cfc0...17229945bcd2

[00:47] <Geth> ¦ doc: coke assigned to Altai-man Issue Create a deployable version of the doc infrastructure https://github.com/Raku/doc/issues/2756

[01:19] <Geth> ¦ doc: 127a7016a6 | Coke++ | doc/Language/compilation.pod6

[01:19] <Geth> ¦ doc: remove Perl reference, slight cleanup

[01:19] <Geth> ¦ doc: 

[01:19] <linkable6> Link: https://docs.raku.org/language/compilation

[01:19] <Geth> ¦ doc: minimum to close #3388

[01:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/127a7016a6

[01:20] *** linkable6 left
[01:22] *** linkable6 joined
[01:29] *** frost joined
[01:31] <Geth> ¦ doc: coke self-assigned Documentation of Supply.split|comb https://github.com/Raku/doc/issues/3162

[01:40] <[Coke]> .tell nemokosch https://github.com/Raku/doc/issues/711 might be of interest to you

[01:40] <tellable6> [Coke], I'll pass your message to Nemokosch

[02:04] <[Coke]> .tell sena_kun assigned some tickets to you in raku/doc because I think they'll go away post-new-site

[02:04] <tellable6> [Coke], I'll pass your message to sena_kun

[02:19] <Geth> ¦ doc: e2e6e179b5 | Coke++ | 262 files

[02:19] <Geth> ¦ doc: Remove all vim lines

[02:19] <Geth> ¦ doc: 

[02:19] <Geth> ¦ doc: Add xt/ test to stop them from recurring

[02:19] <Geth> ¦ doc: 

[02:19] <Geth> ¦ doc: Closes #3058

[02:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e2e6e179b5

[02:20] *** linkable6 left
[02:20] <tonyo> rip

[02:20] *** linkable6 joined
[02:23] <[Coke]> That was a long time coming.

[02:23] * [Coke] wonders if there any MTGA players here other than the one he already knows about.

[02:24] <tonyo> chances are good

[02:24] <[Coke]> ... "if so, ping me."

[02:24] <[Coke]> friend me on arena. :)

[02:37] *** frost left
[03:02] *** epony left
[03:03] *** epony joined
[03:23] *** razetime joined
[03:41] *** derpydoo left
[03:48] *** deoac left
[03:58] *** Kaiepi left
[04:00] *** Sauvin left
[04:06] *** Sauvin joined
[04:29] *** bigdata joined
[04:43] <perryprog> noooo vim lines?! :(

[04:43] <perryprog> I'm all for emacs, but I sometimes check things in vim! (And I think my evil mode checks vim lines? Maybe? I dunno to be honest.)

[05:29] *** linkable6 left
[05:29] *** evalable6 left
[05:30] *** linkable6 joined
[05:30] *** evalable6 joined
[06:06] *** reportable6 left
[06:07] *** reportable6 joined
[06:55] *** Kaiepi joined
[06:59] *** Guest61 left
[07:19] *** mykhal left
[07:25] *** Sgeo left
[07:29] *** abraxxa joined
[07:35] *** sortiz joined
[07:36] *** abraxxa left
[07:36] *** abraxxa joined
[07:52] *** mykhal joined
[08:09] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/glossary#iffy

[08:09] <discord-raku-bot> <Nemokosch> > made via the use keyword

[08:09] <discord-raku-bot> <Nemokosch> ???

[08:10] *** Nemokosch joined
[08:12] <Nemokosch> m: say 'TEST'

[08:12] <camelia> rakudo-moar 17062c32f: OUTPUT: «TEST␤»

[08:12] <tellable6> 2022-11-15T10:21:48Z #raku <SmokeMachine> Nemokosch: if it's a bug, it's an old one...

[08:12] <tellable6> 2022-11-15T10:22:12Z #raku <lizmat> Nemokosch: please don't pass judgement too easily  :-)

[08:12] <tellable6> 2022-11-15T10:24:00Z #raku <lizmat> Nemokosch: you'd be surprised how much of the interwebs is held together by horrible anomalies

[08:12] <tellable6> 2022-11-15T12:02:19Z #raku <guifa> Nemokosch: yes.  a syntax designed exclusively for binary stuff (so it'll match against blobs, rather than strings)

[08:12] <tellable6> 2022-11-16T01:40:23Z #raku <[Coke]> nemokosch https://github.com/Raku/doc/issues/711 might be of interest to you

[08:12] <Nemokosch> to be expected lol

[08:14] <Nemokosch> .title http://dpk.io/yoleaux

[08:14] <dpk> moin

[08:14] <Nemokosch> hi :DD 

[08:14] * dpk fails to find the context

[08:15] <dpk> yoleaux hasn’t been here for years and years

[08:15] <Nemokosch> long story utterly short: is the yoleaux bot no more?

[08:16] <dpk> yeah, i took it down in like 2019 or something

[08:16] <dpk> and AlexDaniel created a clone of the most commonly used (here) functionality, .tell, and imported the database into tellable6

[08:17] <dpk> if it’s still mentioned in any documentation for this channel it should definitely be removed

[08:17] <Nemokosch> gotcha

[08:17] *** mykhal left
[08:17] <Nemokosch> thank you

[08:22] *** razetime left
[08:28] *** Kaiepi left
[08:40] *** mykhal joined
[08:43] *** razetime joined
[09:10] *** sena_kun joined
[09:19] *** dakkar joined
[09:24] *** jjido joined
[09:28] *** Nemokosch left
[10:18] <sortiz> m: class C { method ACCEPTS(\t) { (t %% 2 ?? "acepted" !! "notAccepted") but role :: { method Bool() { self }} } }; say $_ ~~ C.new for 1..3 # SmokeMachine 

[10:18] <camelia> rakudo-moar 17062c32f: OUTPUT: «notAccepted␤acepted␤notAccepted␤»

[10:18] <tellable6> 2022-11-11T21:17:30Z #raku-dev <vrurg> sortiz I don't expect to be available for that task soon. You could pick it up if you want.

[10:20] <SmokeMachine> sortiz: thanks! Makes sense

[10:20] *** jjido left
[10:22] <sortiz> I think that forced "boolification" is against the original intention in S03

[10:25] <sortiz> But imposed by a) the current definition of infix:<~~> in Mu and b) The current prohibition of add more multis outside core

[10:30] *** Kaiepi joined
[10:33] *** frost joined
[10:34] *** razetime left
[11:00] *** razetime joined
[11:00] <discord-raku-bot> <Nemokosch> sortiz re .= one thing is sure: somebody could have saved us a lot of confusion if the specs either covered tests for more corner cases or were phrased in a clearer way

[11:05] <sortiz> Nemokosch: Yes, I agree completely.

[11:05] <tellable6> sortiz, I'll pass your message to Nemokosch

[11:06] *** frost left
[11:07] <Voldenet> I wonder if…

[11:07] <Voldenet> m: my \uc2 = *.uc; "whatever" .&uc2

[11:07] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed postfix call (only basic method calls that exclusively use a dot can be detached)␤at <tmp>:1␤------> my \uc2 = *.uc; "whatever" .⏏&uc2␤»

[11:07] <Voldenet> Yeah, still incorrect.

[11:09] *** frost joined
[11:20] <discord-raku-bot> <Nemokosch> 😂 Voldenet: I wonder if I opened an issue for the extreme version of that, I have written it down...

[11:20] *** sena_kun left
[11:20] *** Nemokosch joined
[11:20] <Nemokosch> .

[11:20] <tellable6> 2022-11-16T11:05:04Z #raku <sortiz> Nemokosch: Yes, I agree completely.

[11:21] *** sena_kun joined
[11:21] <discord-raku-bot> <Nemokosch> seems like I didn't

[11:22] <Nemokosch> even the "old design docs" linked by nine were kinda foggy about `.=`, I'd say they were only mentioned as a reminder for Perl 5 folks but...

[11:22] <Nemokosch> Vvoldenet: here goes the airplane

[11:22] <Nemokosch> m: 'asd'  .comb.&dd

[11:22] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 'asd'  .comb.⏏&dd␤»

[11:23] <Nemokosch> yes... the spaces in front of .comb made .&dd detached, lol

[11:24] <Nemokosch> I think this is wrong whether or not whitespace is allowed in front of .&

[11:24] <Nemokosch> that whitespace is not in front of .&

[11:26] <sortiz> m: 'asd'\   .comb.&dd # ;-)

[11:26] <camelia> rakudo-moar 17062c32f: OUTPUT: «("a", "s", "d").Seq␤»

[11:28] *** jjido joined
[11:28] <Nemokosch> you'd almost think once that

[11:29] <Nemokosch>  m: 'asd'  .comb

[11:29] <camelia> rakudo-moar 17062c32f: ( no output )

[11:29] <Nemokosch> works, you'd be good to chain on it

[11:34] *** Nemokosch left
[11:35] <discord-raku-bot> <Nemokosch> not only can two wrong result into a right but apparently two rights can also result into a wrong 😛

[11:44] <sortiz> m: ('asd' .comb).&dd # Works too, have you thought about the reason for these apparently absurd restrictions?

[11:44] <camelia> rakudo-moar 17062c32f: OUTPUT: «("a", "s", "d").Seq␤»

[11:56] <discord-raku-bot> <Nemokosch> Depends on what we mean by "reason". If we mean language syntax reason, I don't think there is one. If we mean actual parsing reason, I suppose the whitespace split is reflected in the syntax tree, despite "not mattering", and therefore `.comb.&dd` ends up as an unexpected monolith

[12:00] <discord-raku-bot> <Nemokosch> I haven't checked but I suppose in your last demo, a <paren>'.&'<sub name> kind of rule triggers, while in my demo, a <term>(\s+)<method-call> kind of rule triggers, and the ".&dd" part breaks the expectation of the "right handside"

[12:02] <discord-raku-bot> <Nemokosch> I'm thinking if there can ever be a legitimate reason for parens to influence evaluation around an expression that should be evaluated first... it's hard to even phrase this criterion accurately

[12:03] <discord-raku-bot> <Nemokosch> probably the parens could disambiguate in some situation (mind you, here that's not the case, there is no ambiguity on a language level)

[12:07] *** reportable6 left
[12:07] *** Nemokosch joined
[12:09] * Nemokosch wonders whether he has heard of development that makes it possible to emit syntax trees from Raku source code

[12:09] <sortiz> Think in "foo <op> bar" where foo and bar can e arbitrary expressions. Is <op> an infix, postfix of foo or prefix of bar?

[12:09] <Nemokosch> :)

[12:09] *** reportable6 joined
[12:10] <Nemokosch> sorry, let me cut this short. Do you think `'asd' .comb.&dd` is ambiguous or not?

[12:11] <Nemokosch> there was the decision to allow whitespace in front of method calls, that's a given

[12:15] *** Nemokosch left
[12:16] <sortiz> No, but the "one-pass" parser can't "see" more than one token at a time.

[12:18] <tbrowder> i need graphicsmagick installed to test a new module on deck. does anyone have a test.yml file that can do that for windows or macos?

[12:21] <discord-raku-bot> <Nemokosch> First, I think that "no" should settle it. Second, I can't see how ".&dd" should have any effect on this, once "'asd'  .comb" is okay, and this goes even more so for a "one-pass parser". How can ".&dd" retrospectively mess up the already valid and supposedly separate parts "'asd'   .comb" parse to?

[12:25] <discord-raku-bot> <Nemokosch> The expectation regarding the parsing is really easy to express and it's not obvious where it diverges from what actually happens: the resulting syntax tree of `'asd'  .comb.&dd` should contain the resulting syntax tree of `'asd'   .comb`

[12:44] *** frost left
[12:44] <sortiz> Let's take a step back: What syntax tree builds a simple `.++`

[12:51] *** jjido left
[12:51] <discord-raku-bot> <Nemokosch> You know... what really irks me is that I feel that you don't say anything, but you achieve that with the most words possible. This makes me less willing to engage in a sort of "parsing workshop". If you can pinpoint the particular problem with `'asd'  .comb.&dd` (given the premises that `'asd'   .comb` and `foo.&dd` both work) and either a possible fix or a reasoning why it cannot be fixed, please do that first.

[12:55] <discord-raku-bot> <Nemokosch> That way I would know we are going to the right direction. Especially since the "unfixing" of S///, I'm wary of lengthy technical presentations when they aren't concerned with the very issue targeted

[12:57] <Voldenet> > 'asd'\   .comb.&dd

[12:57] <Voldenet> that's some amazing code, ngl

[12:57] <Voldenet> i wouldn't even consider this syntax legal

[12:59] <discord-raku-bot> <Nemokosch> "become a gansta - use Raku today!" 🙂

[13:00] <Voldenet> Eh, those criminal scoundrels violating laws of common sense

[13:03] <discord-raku-bot> <Nemokosch> This reminds me: I have been semi-seriously thinking if I could contribute to the advent calendar with an article... but I think I could really only write about some "bad news", more so than Leon's presentation at the conference. And I definitely don't think the advent calendar is a place for "bad news".

[13:06] <discord-raku-bot> <Nemokosch> Also, by saying this I'm not implying that there aren't "good news", I just don't think I'm the right person to write about them, for example because I don't know enough about them. 🤷‍♂️

[13:23] *** razetime left
[13:32] *** derpydoo joined
[13:37] *** razetime joined
[13:46] <discord-raku-bot> <Anton Antonov> <@297037173541175296> You can title your article "Bad Santa" or the "The Raku sock of coal".

[13:46] <discord-raku-bot> <Nemokosch> xD

[13:54] *** sortiz left
[14:09] *** bigdata left
[14:10] <Voldenet> Actually, bugs and shortcomings of the language are useful kinds of article

[14:12] <Voldenet> if you throw in some useful related things it could even work for advent calendar

[14:21] *** frost joined
[14:23] <discord-raku-bot> <Nemokosch> 1. I still don't think it goes well with the perceived concept of these advent calendars 2. the problem often is that there is no consensus or resolution on the way

[14:28] <discord-raku-bot> <Anton Antonov> <@297037173541175296> I think if you make it lighthearted, clever, and "offensive" it will accepted and / or read by many.

[14:29] <discord-raku-bot> <Anton Antonov> I would suggest to write that article regardless. Then think about "adventizing" it.

[14:31] <[Coke]> our advent calendar has always been a loose collection of articles, rather than a coherent story leading up to the last article, and I'm OK with that. (This I think underscores the size of the community - I'm happy to see that number of articles, regardless of continuity)

[14:31] <discord-raku-bot> <Nemokosch> Mind you, it's not like I have a concrete article in mind and it's only a matter of writing it down and publish it

[14:32] <discord-raku-bot> <Nemokosch> Much more like "hmm, what do we have here..." and I could only think of "issues" in the broader sense.

[14:34] <discord-raku-bot> <Anton Antonov> <@297037173541175296> You list a typical reason to start writing -- to make sense of what are the message(s) to you want share.

[14:34] <discord-raku-bot> <Anton Antonov> <@297037173541175296> You list a typical reason to start writing -- to make sense of what are the message(s) to you want to share.

[15:01] *** xinming left
[15:02] *** xinming joined
[15:03] *** deoac joined
[15:04] *** razetime left
[15:08] <[Coke]> might end up with something you can post yourself outside of the advent blog.

[15:13] *** razetime joined
[15:23] *** frost left
[15:30] *** Sgeo joined
[15:48] *** Xliff joined
[15:50] <Xliff> \o

[15:50] <tellable6> 2022-11-14T15:00:10Z #raku-dev <nine> Xliff: do you even know that mmapping precomp files takes any noticable time?

[15:51] <Xliff> Is there any easy way to get the attribute object by referencing the attribute?

[15:52] <Xliff> Lexicals have .VAR. Wondering if there was something like that for attributes.

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: f522acf17a | (Daniel Sockwell)++ (committed using GitHub Web editor) | papers/Raku_Code_of_Conduct.md

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: Explicitly list newly created digital spaces

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: 

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: This adds three newly created Raku digital spaces (dev.to, YouTube, &

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: Mastodon) to the explicit list of covered spaces.  This change is 

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: non-substantive: these spaces were already covered by the "any other

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: digital spaces Raku may establish" clause.  But it's good to be explicit.

[16:13] <Geth> ¦ Raku-Steering-Council/Add-new-spaces: review: https://github.com/Raku/Raku-Steering-Council/commit/f522acf17a

[16:16] <Geth> ¦ Raku-Steering-Council/main: f522acf17a | (Daniel Sockwell)++ (committed using GitHub Web editor) | papers/Raku_Code_of_Conduct.md

[16:16] <Geth> ¦ Raku-Steering-Council/main: Explicitly list newly created digital spaces

[16:16] <Geth> ¦ Raku-Steering-Council/main: 

[16:16] <Geth> ¦ Raku-Steering-Council/main: This adds three newly created Raku digital spaces (dev.to, YouTube, &

[16:16] <Geth> ¦ Raku-Steering-Council/main: Mastodon) to the explicit list of covered spaces.  This change is 

[16:16] <Geth> ¦ Raku-Steering-Council/main: non-substantive: these spaces were already covered by the "any other

[16:16] <Geth> ¦ Raku-Steering-Council/main: digital spaces Raku may establish" clause.  But it's good to be explicit.

[16:16] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/f522acf17a

[16:16] <Geth> ¦ Raku-Steering-Council/main: d24ebfca36 | (Daniel Sockwell)++ (committed using GitHub Web editor) | papers/Raku_Code_of_Conduct.md

[16:16] <Geth> ¦ Raku-Steering-Council/main: Merge pull request #54 from Raku/Add-new-spaces

[16:16] <Geth> ¦ Raku-Steering-Council/main: 

[16:16] <Geth> ¦ Raku-Steering-Council/main: Explicitly list newly created digital spaces

[16:16] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/d24ebfca36

[16:48] *** linkable6 left
[16:48] *** evalable6 left
[16:50] *** evalable6 joined
[16:51] *** linkable6 joined
[17:36] *** dakkar left
[17:59] <El_Che> the CoC thread went nuclear pretty fast, good I don't read github issues real time

[17:59] *** abraxxa left
[18:04] <discord-raku-bot> <Nemokosch> Well, you might have an idea what it was like "real time" when it came up on the irc...

[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[18:09] <Voldenet> imo it's pointless to comment on any codes and rules, because whatever it is, the ruling group will always enforce their own beliefs

[18:11] <discord-raku-bot> <Nemokosch> Well that's also a fair approach

[18:11] <El_Che> I am not commenting on the issue itself, but how fast it was derailed

[18:13] <El_Che> (mind you, I do have a background in history and I find it fascinating, nevertheless... :)

[18:13] <discord-raku-bot> <Anton Antonov> @EL_Che Duly noted.

[18:15] <El_Che> also note, that I am not blaiming or contradiction anyone on the extended discussion, just looking it Vulcan-wise from afar

[18:15] <El_Che> *contradicting

[18:17] <discord-raku-bot> <Nemokosch> I think it was a lot like the related IRC discussion but proportionally more content and slower messages (it's kinda like a forum, after all)

[18:17] <discord-raku-bot> <Anton Antonov> I am curious what that discussion is now... I will read some during my break...

[18:18] <El_Che> https://github.com/Raku/Raku-Steering-Council/issues/48

[18:18] *** razetime left
[18:25] *** TieUpYourCamel left
[18:33] <discord-raku-bot> <Nemokosch> I didn't want to be reminded of that...

[18:35] *** jjido joined
[18:36] <El_Che> Nemokosch: I didn't pay attention who participated

[18:36] <tellable6> El_Che, I'll pass your message to Nemokosch

[18:37] <discord-raku-bot> <Nemokosch> Well, I opened that issue so... you might say I participated

[18:39] *** Guest56 joined
[18:41] <[Coke]> anyone have feedback on https://github.com/coke/raku-zef-deps/issues/8? Does that JSON format look useful?

[18:42] <[Coke]> ... I will add sample output, oops

[18:46] *** El_Che left
[18:47] *** El_Che joined
[18:48] *** euandreh2 joined
[18:48] *** euandreh left
[18:48] *** euandreh2 is now known as euandreh

[18:49] <discord-raku-bot> <Nemokosch> I'm still not quite sure how these ecosystem tracer modules relate to each other. There is something `ecosystem` does, something zef can do by itself, and now there is also this module. Also, I suppose raku.land also models these relations some way

[18:49] *** euandreh left
[18:58] <ugexe> my @command = <<$*EXECUTABLE -Ilib bin/zef-deps --json>>;

[18:58] <ugexe> thats not a good test

[18:59] <ugexe> instead test e.g. App::Zef-Deps::MAIN-handler(..., :json)

[19:00] <discord-raku-bot> <Anton Antonov> @ugexe Good to know!

[19:01] <ugexe> one should almost never use `run` in a test though, especially if it requires passing the dependencies path (i.e. -Ilib)

[19:01] <ugexe> since you dont know if a) the user is running from the parent of lib b) if the user wants to test against the installed version instead of whats in lib/ (i.e. test if what was just installed also passes tests)

[19:04] <discord-raku-bot> <Anton Antonov> @Coke I tried to verify your implementation using  `zef install https://github.com/coke/raku-zef-deps.git`  after I installed the previous version of zef-deps and I did not get the result in JSON format.

[19:06] <discord-raku-bot> <Anton Antonov> @Coke Installing with `zef install https://github.com/coke/raku-zef-deps.git`  on a different computer, which did not have zef-deps and using, say, `zef-deps --json ML::Clustering` produced JSON output.

[19:17] *** Guest56 left
[19:17] <[Coke]> as noted on the ticket, haven't released it yet

[19:17] <[Coke]> ah, installing from git should work. weird

[19:18] <[Coke]> zef normally does this in the context of installing

[19:18] <[Coke]> this is using zef guts do to this one bit

[19:19] <[Coke]> ugexe... good point. it's close enough

[19:23] *** euandreh joined
[19:35] <[Coke]> ... ugh. it means I also need to conver from say'ing output as I go (or else trap STDOUT)

[19:35] <[Coke]> I did move all the arg handling into the lib, though, so this should be easy.

[19:42] *** TieUpYourCamel joined
[19:47] *** leont left
[19:51] *** jgaz joined
[19:52] *** leont joined
[20:07] <Xliff> Is there any easy way to get the attribute object by referencing the attribute?

[20:07] <Xliff> Lexicals have .VAR. Wondering if there was something like that for attributes.

[20:19] <discord-raku-bot> <Anton Antonov> @Coke Can you make also "an internal" function for the dependencies found by "zef-deps". (Which I think you kind of did with `MAIN-handler`.) My way to test the JSON output is to make dependencies prefix- or suffix trees. Maybe, also, UML diagrams.

[20:41] <[Coke]> something to be called from the libs? I would be OK renaming the exported subs, I guess.

[20:42] <[Coke]> for that to make sense, they really need to return the output instead of printing it to stdout.

[20:42] <[Coke]> can you open an issue for that?

[20:44] <[Coke]> (Anton)

[20:47] *** sena_kun left
[20:48] *** sena_kun joined
[20:48] <tonyo> m: class A { has $!x; }; dd A.^attributes #Xliff

[20:48] <camelia> rakudo-moar 17062c32f: OUTPUT: «(Attribute.new,)␤»

[20:49] <tonyo> m: class A { has $!x; }; say A.^attributes #Xliff

[20:49] <camelia> rakudo-moar 17062c32f: OUTPUT: «(Mu $!x)␤»

[20:49] <tonyo> .seen guifa

[20:49] <tellable6> tonyo, I saw guifa 2022-11-15T12:30:01Z in #raku: <guifa> okay time for $day-job 

[20:58] <discord-raku-bot> <Anton Antonov> @Coke Yes, I will do that after work.

[21:05] *** nicole left
[21:07] *** nicole joined
[21:26] <[Coke]> thanks

[21:27] *** epony left
[22:00] *** jgaz left
[22:08] <discord-raku-bot> <Nemokosch> *clickbaits* https://github.com/Raku/problem-solving/issues/351

[22:09] <discord-raku-bot> <Nemokosch> it would be nice to get people care a little bit 🥺

[22:13] <Xliff> tonyo: Ah, yeah. Thanks for that. Knew about .^attributes. Was hoping to use something directly attached to the attribute itself in case it got passed around.

[22:13] <Xliff> Something like: "my $attr := $!b" and still pull $!b's attribute from $attr via an accessor method.

[22:14] <Xliff> Kinda like .VAR for lexicals.

[22:15] <Xliff> m: class A { has $!x; method a { my $c := $!x; b($c) }; method b  ($v) { $v.VAR.name.say }; }; A.new.a;

[22:15] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    b used at line 1␤␤»

[22:15] <Xliff> m: class A { has $!x; method a { my $c := $!x; self.b($c) }; method b  ($v) { $v.VAR.name.say }; }; A.new.a;

[22:15] <camelia> rakudo-moar 17062c32f: OUTPUT: «Nil␤»

[22:15] <Xliff> m: class A { has $!x; method a { my $c := $!x; self.b($c) }; method b  (\v) { v.VAR.name.say }; }; A.new.a;

[22:15] <camelia> rakudo-moar 17062c32f: OUTPUT: «$!x␤»

[22:16] <Xliff> See, now I would have to do an O(N) lookup against .^attributes for $!x. 8-)

[22:44] *** sena_kun left
[23:05] *** habere-et-disper joined
[23:06] *** stoned75 joined
[23:07] *** stoned75 left
[23:31] <tonyo> why not just:

[23:31] <tonyo> m: class A { has $!x; has $!y; }; A.^attributes.map(*.name).say;

[23:31] <camelia> rakudo-moar 17062c32f: OUTPUT: «($!x $!y)␤»

[23:32] <tonyo> what are you trying to get at eventually?

[23:32] <tonyo> or do with the information without once going through the list of attributes?

[23:52] *** justache is now known as justGrit

