[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[01:00] <ugexe> it does make sense to put zef on fez for update purposes. i've been waiting on 1) unbitrotting all my distribuions [done] 2) creating github releases of all my distributions [done] 3) creating a script to release fez dists from my github releases
[01:08] *** linkable6 left
[01:08] *** evalable6 left
[01:10] *** linkable6 joined
[01:10] *** evalable6 joined
[01:40] *** MasterDuke joined
[02:00] *** vrurg joined
[02:04] *** vrurg left
[02:34] *** jmcgnh left
[02:56] *** jmcgnh joined
[03:05] *** xinming joined
[04:01] *** vrurg joined
[04:06] *** vrurg left
[04:25] *** vrurg joined
[05:11] *** vrurg left
[05:11] *** vrurg joined
[05:12] *** vrurg left
[05:12] *** vrurg joined
[05:17] *** vrurg left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:31] *** nebuchadnezzar left
[06:35] <discord-raku-bot> <Nemokosch> Oh right, I wanted to ask about self-upgrade
[06:48] *** Sgeo left
[06:57] *** abraxxa joined
[07:00] *** abraxxa left
[07:00] *** abraxxa joined
[07:05] *** abraxxa left
[07:06] *** abraxxa joined
[07:08] *** jjido joined
[07:17] *** MoC joined
[07:37] *** abraxxa left
[07:39] *** lichtkind_ joined
[07:55] *** abraxxa joined
[08:07] *** jjido left
[08:18] *** nebuchadnezzar joined
[08:26] *** sena_kun joined
[08:37] *** jmcgnh left
[08:46] *** jmcgnh joined
[09:00] *** Nemokosch joined
[09:02] *** Nemokosch left
[09:23] *** m_athias left
[09:23] *** nine left
[09:23] *** camelia left
[09:23] *** nine joined
[09:23] *** m_athias joined
[09:29] *** camelia joined
[09:40] *** Nemokosch joined
[09:52] *** MoC left
[10:01] *** jjido joined
[10:08] *** jjido left
[10:09] *** Altai-man joined
[10:28] <Xliff> \o
[10:28] <tellable6> 2022-09-18T09:44:54Z #raku-dev <lizmat> Xliff did you re-run the configuration ?
[10:28] <Xliff> Is there a way to tell an exception that it is not fatal?
[10:29] <Xliff> lizmat: Yes. I reran the configuration. It's still taking over 70 seconds to compile CORE.c
[10:29] <lizmat> .resume
[10:30] *** frost joined
[10:30] <lizmat> m: CATCH { .resume }; say "before"; die; say "afterlife"
[10:30] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´before‚ê§afterlife‚ê§¬ª
[10:31] <Xliff> lizmat: How about in the exceptions declaration?
[10:32] <lizmat> aren't you talking about a warning then, aka a subclass of CX::Warn ?
[10:33] <Xliff> Hmmm... quite possibly. Would that  subclass look similar to a subclassed expression? Is there documentation on that?
[10:36] <Xliff> s/expression/exception/ - Please forgive me, I have not been caf'd yet.
[10:38] <lizmat> hmmm..... looks like that part of Raku is ....  underdeveloped
[10:39] <Xliff> :(
[10:39] <lizmat> looks like nqp::setextype(, nqp::const::CONTROL_WARN) is actually creating a CX::Warn under the hood somehow
[10:40] <lizmat> :q
[10:40] <Xliff> :)
[10:41] <Xliff> m: class OOB is CX::Warn { method message { "Out of Bounds!" }; }; my $a; sub setA ($na) { OOB.new.throw unless $a < 5 }; setA(5); setA(10)
[10:41] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§  in sub setA at <tmp> line 1‚ê§Use of uninitialized value of type Any in numeric context‚ê§  in sub setA at <tmp> line 1‚ê§¬ª
[10:41] <Xliff> m: class OOB is CX::Warn { method message { "Out of Bounds!" }; }; my $a; sub setA ($na) { OOB.new.throw unless $n < 5 }; setA(5); setA(10)
[10:41] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$n' is not declared.  Perhaps you forgot a 'sub' if this was‚ê§intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> ; sub setA ($na) { OOB.new.throw unless ‚èè$n < 5 }; setA(5); se‚Ä¶¬ª
[10:42] <Xliff> m: class OOB is CX::Warn { method message { "Out of Bounds!" }; }; my $a; sub setA ($na) { OOB.new.throw unless $na < 5 }; setA(5); setA(10)
[10:42] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´control exception without handler‚ê§  in sub setA at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[10:42] <lizmat> yeah, that one
[10:42] <Xliff> :/
[10:42] <Xliff> Yeah, I remember this one, now. I always have to CATCH and use $*ERR.say in my GLib code.
[10:43] <lizmat> but in your example, what would be wrong about "warn "Out of Bounds" unless $a < 5" ?
[10:43] <Xliff> It's up to 780Kloc, now.
[10:44] <lizmat> wow
[10:44] <Xliff> lizmat: I was hoping to formalize the "Out of Bounds" condition. "warn" doesn't do that. A  CX::Warn would.
[10:44] <lizmat> well, it would help if "warn" didn't expect strings
[10:45] <Xliff> I would love it if Exception would have a .warn instead of .throw.
[10:45] <Xliff> Would that be a difficult thing to implement?
[10:46] <lizmat> don't actually think so, lemme see
[10:46] <Xliff> \o/
[10:46] <Xliff> lizmat++
[10:47] <elcaro> Asked on the Discord, but adding here for more eyeballs...
[10:47] <elcaro> m: say (class :: { has $!a = 'x'; method gist { $!a } }).new.WHAT;
[10:47] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´Cannot look up attributes in a <anon|1> type object. Did you forget a '.new'?‚ê§  in method gist at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[10:47] <elcaro> why doesn't .WHAT like when I refer to an attribute in my gist?
[10:49] <Kaiepi> idt it's WHAT as much as gist from say
[10:49] <Kaiepi> m: say (class :: { has $!a = 'x'; method gist { self.DEFINITE ?? $!a !! callsame } }).new.WHAT;
[10:49] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´(<anon|1>)‚ê§¬ª
[10:49] <Kaiepi> attributes may only exist on an instance
[10:49] <Kaiepi> or be referred to
[10:50] <discord-raku-bot> <Nemokosch> okay, so they cannot exist on type objects at all?
[10:51] <Kaiepi> nope. you need a method or lexically scoped something or other
[10:54] <discord-raku-bot> <Nemokosch> that's good to know actually üôÇ
[10:56] <discord-raku-bot> <Nemokosch> so I suppose gist should be defined in a way that it's prepared to handle type objects
[10:57] <Xliff> m: (class :: { has $!a = 'x'; method gist { $!a } }).new.gist.say
[10:57] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´x‚ê§¬ª
[10:57] <discord-raku-bot> <Nemokosch> iirc there is a way to put type smileys for "self"
[10:58] <Xliff> The problem here isn't the attribute, it's the fact it's an anonymous type.
[10:58] <Xliff> Therefore it has no name for WHAT to handle.
[10:59] <Kaiepi> gist exists on any object you'd encounter under ordinary circumstances, so this sould just take a `multi method gist(::?CLASS:D:) { $!a }`
[10:59] <Xliff> So .WHAT has a minor bug that needs to be addressed.
[10:59] <Xliff> m: (class :: { has $!a = 'x'; method gist { $!a } }).new.^name.say
[10:59] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´<anon|1>‚ê§¬ª
[10:59] <Xliff> m: (class :: { has $!a = 'x'; method gist { $!a } }).new.WHAT,say
[10:59] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´===SORRY!===‚ê§Argument to "say" seems to be malformed‚ê§at <tmp>:1‚ê§------> 'x'; method gist { $!a } }).new.WHAT,say‚èè<EOL>‚ê§Other potential difficulties:‚ê§    Unsupported use of bare "say".  In Raku please use: .say if you meant‚ê§ ‚Ä¶¬ª
[11:00] <discord-raku-bot> <Nemokosch> Xliff: elcaro also showed a code example with a named class
[11:00] <Xliff> Nemokosch: Didn't see that in IRC. Did I miss it?
[11:00] <Xliff> m: (class A { has $!a = 'x'; method gist { $!a } }).new.WHAT,say
[11:00] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´===SORRY!===‚ê§Argument to "say" seems to be malformed‚ê§at <tmp>:1‚ê§------> 'x'; method gist { $!a } }).new.WHAT,say‚èè<EOL>‚ê§Other potential difficulties:‚ê§    Unsupported use of bare "say".  In Raku please use: .say if you meant‚ê§ ‚Ä¶¬ª
[11:00] <lizmat> make sure the gist method is a multi:
[11:00] <lizmat> m: say (class :: { has $!a = "x"; multi method gist(::?CLASS:D:) { $!a } }).new.WHAT
[11:00] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´(<anon|1>)‚ê§¬ª
[11:00] <discord-raku-bot> <Nemokosch> Xliff: no, moment
[11:00] <lizmat> m: say (class :: { has $!a = "x"; multi method gist(::?CLASS:D:) { $!a } }).WHAT
[11:00] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´(<anon|1>)‚ê§¬ª
[11:01] <Kaiepi> .WHAT is very primitive and literal
[11:01] <Xliff> m: (class :: { has $!a = 'x'; multi method gist (::?CLASS:D: ) { $!a } }).new.WHAT,say
[11:01] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´===SORRY!===‚ê§Argument to "say" seems to be malformed‚ê§at <tmp>:1‚ê§------> t (::?CLASS:D: ) { $!a } }).new.WHAT,say‚èè<EOL>‚ê§Other potential difficulties:‚ê§    Unsupported use of bare "say".  In Raku please use: .say if you meant‚ê§ ‚Ä¶¬ª
[11:01] <Xliff> m: (class :: { has $!a = 'x'; multi method gist (::?CLASS:D: ) { $!a } }).new.WHAT.say
[11:01] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´(<anon|1>)‚ê§¬ª
[11:01] <Xliff> lizmat++
[11:02] <discord-raku-bot> <Nemokosch> https://gist.github.com/2colours/d874683fb07aabca81c6c4e8d0e021e7 there we go
[11:02] <Kaiepi> because WHAT's not even a method on anything in particular this can happen:
[11:02] <Xliff> Nemokosch - See workaround/fix from lizmat
[11:02] <Kaiepi> m: say (*.WHAT).DEFINED
[11:02] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´No such method 'DEFINED' for invocant of type 'Whatever'.  Did you mean‚ê§'defined'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[11:02] <Kaiepi> uhhh
[11:02] <Kaiepi> not what i was going for but ok
[11:02] <Kaiepi> m: say (*.WHAT).DEFINITE
[11:02] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´False‚ê§¬ª
[11:03] <Kaiepi> there we go
[11:03] <Kaiepi> if it thunked to WhateverCode:D that'd be different
[11:04] <discord-raku-bot> <Nemokosch> I think it's worth noting somewhere that type objects cannot have attributes. It makes sense if we think of them as kinda prototypes but still, good to have it written off somewhere.
[11:04] <Kaiepi> that'd belong somewhere on the objects page i think?
[11:04] <discord-raku-bot> <Nemokosch> the solutions you guys offered are really sensible
[11:05] <Nemokosch> oh I'm logged in here, the latency is smaller :D
[11:06] <Nemokosch> Kaiepi: I think this is the closest part: https://docs.raku.org/language/classtut#index-entry-type_object
[11:06] <Kaiepi> there's a less glossy page that says it's per-instance state https://docs.raku.org/language/objects#Attributes
[11:09] <Nemokosch> Hmm, again, I think it makes sense if we think about it but it's a bit obscure. Like it's not explicitly mentioned, you can just figure that type objects are not "instances" but more like one object representing the class as data.
[11:11] <Nemokosch> I think type objects themselves are a bit obscure, with relations to object instances and classes.
[11:12] <Nemokosch> Although this may not be a place for the docs per se. Maybe more something for guides and tutorials.
[11:23] *** jjido joined
[11:27] <lizmat> Xliff: https://github.com/rakudo/rakudo/pull/5065
[11:53] *** vrurg joined
[11:57] *** vrurg left
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:08] * [Coke] hates 2-space for indent in code, but somehow all his META6.json files across projects seem to be stuck at this level (presumably from the first one I copied ages ago)
[12:09] <lizmat> FWIW, if you use App::Mi6, it will normalize at 2 spaces as well
[12:12] <[Coke]> "ew"
[12:12] <[Coke]> so, never use that, got it, thanks. :)
[12:15] *** frost left
[12:16] <Nemokosch> Can that not be configured or turned off?
[12:18] <[Coke]> Looks like it's using Rakudo::Internals::JSON to emit the JSON, fwiw.
[12:20] <Nemokosch> Yes, I'm also looking at that https://github.com/skaji/mi6/blob/d96645bd6710be8f451b10b407a0faae4fa080b0/lib/App/Mi6/JSON.rakumod#L3
[12:21] <[Coke]> which itself is configurable, but would need a small patch to MI6 to use an env var or something to set it.
[12:21] <[Coke]> Easy peasy, which I will do if I ever start using mi6 (right now fez itself is fine.)
[12:22] <Nemokosch> Where can I find Rakudo::Internals::JSON?
[12:24] *** Nemokosch left
[12:49] <[Coke]> * :watch: [Sep-23] - Inna Bembenok's last day!
[12:50] <[Coke]> Oops
[12:50] <[Coke]> https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Internals/JSON.pm6
[13:11] *** jjido left
[13:21] <Xliff> lizmat++!
[13:21] <Xliff> lizmat: CORE.c compile time is still - Stage parse      :  70.822
[13:21] <Xliff> I don't know what the hell could be in my environment that would cause this.
[13:33] <tbrowder> hi, where is the use of "some-sub($some-arg, |c)" discussed in the docs? ah, yes, in "language|functions"; good reading ...
[13:34] *** xinming left
[13:46] *** abraxxa left
[13:48] *** lichtkind_ left
[14:13] <tbrowder> and also read "types|class Capture"...
[14:30] *** Tirifto left
[14:33] *** Tirifto joined
[14:44] *** [Coke]_ joined
[14:45] *** [Coke] left
[14:48] *** Sgeo joined
[14:58] *** xinming joined
[15:05] *** [Coke]_ is now known as [Coke]
[15:05] * [Coke] looks at https://www.reddit.com/r/rakulang/comments/xkhmgi/converting_perl_module_with_objective_c_extensions/ and wonders how that might work
[15:05] <[Coke]> summary: can we call objective-c using NativeCall
[15:11] *** MoC joined
[15:21] <lizmat> https://twitter.com/marcelpociot/status/1572690548074348549   # looks like eminently doable with RakuAST  
[15:32] <SmokeMachine> lizmat: Hi! Sorry for interrupting, but it seems rad --editor is struggling to find the columns on regex searches. https://usercontent.irccloud-cdn.com/file/hFXjGCWk/CleanShot%202022-09-23%20at%2016.29.48%402x.png
[15:32] <tellable6> 2022-09-15T22:15:38Z #raku <melezhik> SmokeMachine sparkyci moved to https://ci.sparrowhub.io , please update CI badges, you can find new link from "my repos" page - https://ci.sparrowhub.io/repos
[15:32] <lizmat> SmokeMachine: please make an issue  otherwise it might fall through the cracks  :-)
[15:33] <SmokeMachine> üëç
[15:38] <SmokeMachine> lizmat: https://github.com/lizmat/App-Rak/issues/13
[15:38] <lizmat> thanks!
[15:38] *** Altai-man left
[15:39] *** Altai-man joined
[15:39] *** MoC left
[15:39] *** MoC_ joined
[15:40] *** MoC_ is now known as MoC
[15:43] <[Coke]> 'zef install App::Rak' on windows explodes interestingly.
[15:44] <lizmat> ah?
[15:45] <[Coke]> https://gist.github.com/coke/b38b3494ebf8c853d3c4478f52e97afa
[15:46] <lizmat> is that just for App::Rak, or more general
[15:46] <[Coke]> updating zef, seeing if I can narrow it down.
[15:47] <lizmat> zef install hyperize e.g. ?   no deps and so on
[15:48] <[Coke]> might be the old "can't install from rea on windows" bug
[15:48] <[Coke]> updated zef. installed hyperize no problem.
[15:50] <Voldenet> i've just installed hyperize on ancient zef (v0.13.4) on windows
[15:50] *** bigdata joined
[15:53] <Voldenet> `zef install App::Rak` also worked, it's fairly surprising considering it's rakudo 2021.12
[15:54] <[Coke]> So the trick seems to be String::Utils. I can install the latest, but something seems to depend on String::Utils:ver<0.0.8> which does complain when I try to install it directly.
[15:55] <[Coke]> (see the last line of the gist, same error)
[15:56] <Voldenet> that makes sense, I've had string::utils already
[15:57] <[Coke]> All App::Rak deps pinned at specific versions instead of allowing newer?
[15:57] <[Coke]> looks like String::Utils already up to 0.0.12
[15:57] <[Coke]> (and I can install that version)
[15:57] <lizmat> yes, I *always* pin my dependencies completely
[15:58] <lizmat> so if there is an issue in the pinning, that should be caught by the Github Actions
[15:58] <lizmat> and it's still green afaics
[15:59] <[Coke]> ok. should I report a bug on App::Rak asking to update the S::U dep?
[15:59] <lizmat> yes, please
[15:59] <lizmat> I'm very close to releasing 0.97, which has a complete rewrite of all argument handling  (at 124 currently supported options, it was needed)
[16:01] <lizmat> and a load of other fixes...
[16:03] <[Coke]> https://github.com/lizmat/App-Rak/issues/14
[16:03] <lizmat> thanks!
[16:03] <[Coke]> Thanks.
[16:08] <[Coke]> I can 'zef look' that specific version, run the tests, it's OK. weird.
[16:08] <[Coke]> will add that note.
[16:08] <[Coke]> er... that was on a mac box in a different shell. right, zef look itself fails on windows.
[16:09] <lizmat> ok, maybe a new feature of the latest update  :-(
[16:09] <lizmat> ugexe ^^
[16:10] <[Coke]> it was failing on zef 0.13... still failing on 0.14
[16:10] <[Coke]> doubt it's strictly the "rea has problems on windows due to long paths" because it's the only thing failing here.
[16:10] <lizmat> could you run with --/rea ?
[16:11] <[Coke]> https://github.com/Raku/REA/issues/7
[16:11] <[Coke]> nope, same error
[16:13] <[Coke]> lizmat: let me know if you want, I can try to install from a git clone that has an updated dependency and whatever other new changes before you cut a release.
[16:13] <[Coke]> ... I can try that now with just that dep change if you like.
[16:14] <lizmat> [Coke]: normally, I'd say yes... but the changed between the released version and the one I'm about to release, are massive
[16:14] *** jetchisel left
[16:14] <[Coke]> ok
[16:14] <[Coke]> let me try this one small change locally then.
[16:14] <lizmat> so I'd rather release that and see if the problem persists than spend time now on figuring out what is now a 2 week old version :-)
[16:15] <[Coke]> github already at 0.0.10 of S::U...
[16:15] <ugexe> if you think it might be path length you can do `SET TMPDIR=C:\tmp` to shorten the length of the temp directory being used and see if it passes
[16:16] <ugexe> might have to create that directory oo
[16:16] <ugexe> too
[16:16] <ugexe> see https://github.com/ugexe/zef/blob/6a14c38304d81625321ffc3db9f29733a3826f84/.appveyor.yml#L9-L12
[16:16] <[Coke]> lizmat: I can install App::Rak out of github master
[16:17] <[Coke]> but rak --help generates a page of "use of uniti..."
[16:17] *** jetchisel joined
[16:17] <lizmat> [Coke]: hmmm... weird...
[16:22] *** [Coke]_ joined
[16:24] *** [Coke] left
[16:24] <[Coke]_> lizmat: let me know, happy to test master or run something specific.
[16:25] *** [Coke]_ is now known as [Coke]
[16:25] <[Coke]> raku -Ilib bin/rak -> "No such method 'Version' for invocat of type 'Any'"
[16:26] <lizmat> raku -I. bin/rak ?
[16:29] *** [Coke]_ joined
[16:29] <[Coke]_> same output whether I add --help, or --version, or test - warnings, no output
[16:30] <[Coke]_> (sorry, just bounced)
[16:30] <lizmat> raku -I. bin/rak ?
[16:30] <lizmat> in general, -Ilib is a P5ism
[16:31] *** [Coke] left
[16:31] <lizmat> you should in Raku really always use -I. in a repo
[16:31] <[Coke]_> is the lib automatically searched?
[16:32] <lizmat> nope, but if you do -Ilib, it doesn't see the META6.json, and that is needed for things like $?DISTRIBUTION and the like
[16:32] <[Coke]_> (and -Ilib works in all of my modules, weird)
[16:32] *** [Coke]_ is now known as [Coke]
[16:32] <[Coke]> raku -I. bin/rak avoids the error, but then all I have are unitialized warnings, and no output, whether I run --help, test, etc.
[16:32] <lizmat> none of your modules use $?DISTRIBUTION or %?RESOURCES
[16:33] <[Coke]> Sure
[16:33] <lizmat> I assume  :-)
[16:33] <[Coke]> Mine are all pretty simple, aye
[16:34] <[Coke]> verified -I. works, mental model updated.
[16:34] <[Coke]> (for my stuff, App::Rak still busted here.)
[16:38] <[Coke]> m: say +$*USER; #lizmat
[16:38] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§0‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[16:39] <[Coke]> Weird, I expected something here; that's giving the warning on windows, I think.
[16:39] <lizmat> m: say +$*USER
[16:39] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§0‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[16:39] <[Coke]> from path-utils setup
[16:40] <[Coke]> on my mac I get a number.
[16:40] <lizmat> m: say $*USER
[16:40] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´(Any)‚ê§¬ª
[16:40] <lizmat> interesting, that's a Rakudo bug
[16:40] <[Coke]> maybe because camelia's in some kind of box.
[16:41] <[Coke]> raku -e 'dd $*USER' on windows: Any
[16:41] <lizmat> meh:  once if !Rakudo::Internals.IS-WIN
[16:41] <[Coke]> want me to open a rakudo ticket?
[16:42] <lizmat> m: dd qx/LC_MESSAGES=POSIX id/
[16:42] <camelia> rakudo-moar 90709d533: OUTPUT: ¬´""‚ê§¬ª
[16:42] <lizmat> [Coke]: what does ^^ do on Win ?
[16:43] <[Coke]> lots of warnings and ""
[16:43] <[Coke]> however, "id" by itself is returning something in git bash
[16:43] <lizmat> ok, I guess I will need to add some the docs of --user and --group
[16:44] <lizmat> that it depends on $*USER and $*GROUP working in your Rakudo
[16:45] <[Coke]> Is there a workaround you can do to avoid all the warning output and have other features work?
[16:46] <[Coke]> I wouldn't expect to have to have a user id to grep through docs.
[16:46] <lizmat> I'll make sure that 0.97 will just meh out if $*USER or $*GROUP doesn't work
[16:47] <ugexe> -Ilib will work with $?DISTRIBUTION, but it will be generated unlike -I. which uses what your META6.json says
[16:47] <ugexe> so it might not behave the same as when its installed, hence always use -I.
[16:48] <[Coke]> tbrowder: can we close https://github.com/rakudo/rakudo/issues/5022 ?
[16:49] <[Coke]> lizmat: what does meh out mean? 
[16:49] <[Coke]> I saw meh in your code, so I'm guessing something specific.
[16:49] <lizmat> sub meh($string) { exit note $string }
[16:50] <[Coke]> ... ok, so that means we're broken on windows. I'll open a ticket for USER and GROUP on windows on rakudo/rakudo
[16:52] <[Coke]> https://github.com/rakudo/rakudo/issues/5066
[16:55] <[Coke]> Not sure it's reasonable to expect an ID number on windows.
[16:56] <[Coke]> (I see an id in "whoami" on CMD.exe, but it's more like a GUID)
[17:02] <lizmat> well, that's something I guess :-)
[17:02] <tonyo> tbrowder: https://deathbykeystroke.com/articles/20220914-building-a-cro-app-part-b.html
[17:03] <lizmat> tonyo: why didn't you weekly: that ?
[17:03] <tonyo> i just finished it
[17:03] <lizmat> ah... but the date seems wrong ?
[17:03] <tonyo> oh snap, way wrong
[17:04] <tonyo> oh - that's the date i started writing it
[17:05] <lizmat> so, will there be a new URL, or should I use that one ?
[17:05] <tonyo> going to fix it, one sec
[17:06] <tonyo> https://deathbykeystroke.com/articles/20220923-building-a-cro-app-part-b.html
[17:10] *** Altai-man left
[17:14] *** MoC left
[17:17] *** MoC joined
[17:26] *** japhb left
[17:29] *** melezhik joined
[17:29] <melezhik> o/
[17:29] <melezhik> weekly: https://www.reddit.com/r/rakulang/comments/xm3pj8/sparkyci_update/
[17:29] <notable6> melezhik, Noted! (weekly)
[17:30] *** melezhik left
[17:33] *** japhb joined
[17:45] *** simcop2387_ joined
[17:46] *** simcop2387 left
[17:47] *** simcop2387_ is now known as simcop2387
[17:59] *** [Coke]_ joined
[18:00] *** [Coke] left
[18:05] *** [Coke] joined
[18:05] *** ProperNoun joined
[18:06] *** ProperN[out] left
[18:06] *** reportable6 left
[18:07] *** [Coke]_ left
[18:07] *** reportable6 joined
[18:19] *** [Coke]_ joined
[18:22] *** [Coke] left
[18:24] *** [Coke]_ left
[18:24] *** [Coke] joined
[18:35] *** [Coke]_ joined
[18:38] *** [Coke] left
[18:40] *** [Coke] joined
[18:41] <Geth> ¬¶ raku.org: 1f9a216119 | (M√°rton Polg√°r)++ (committed using GitHub Web editor) | source/whatever/index.html
[18:41] <Geth> ¬¶ raku.org: Fixing broken/outdated links on the Whatever site. (#173)
[18:41] <Geth> ¬¶ raku.org: 
[18:41] <Geth> ¬¶ raku.org: Co-authored-by: Polg√°r M√°rton [email@hidden.address]
[18:41] <Geth> ¬¶ raku.org: Co-authored-by: Polg√°r M√°rton <ersterpleghthome@gmail.com>
[18:41] <Geth> ¬¶ raku.org: review: https://github.com/Raku/raku.org/commit/1f9a216119
[18:43] *** [Coke]_ left
[18:45] *** [Coke]_ joined
[18:48] *** [Coke] left
[19:02] <Geth> ¬¶ raku.org: 9748f84b85 | (M√°rton Polg√°r)++ (committed using GitHub Web editor) | source/community/index.html
[19:02] <Geth> ¬¶ raku.org: Removing unused mailing lists, actualizing year (#172)
[19:02] <Geth> ¬¶ raku.org: 
[19:02] <Geth> ¬¶ raku.org: Co-authored-by: Polg√°r M√°rton [email@hidden.address]
[19:02] <Geth> ¬¶ raku.org: Co-authored-by: Polg√°r M√°rton <ersterpleghthome@gmail.com>
[19:02] <Geth> ¬¶ raku.org: review: https://github.com/Raku/raku.org/commit/9748f84b85
[19:03] *** [Coke]_ is now known as [Coke]
[19:10] <discord-raku-bot> <Nemokosch> huhu ü•≥
[19:36] *** [Coke]_ joined
[19:37] *** [Coke] left
[19:38] *** MoC left
[19:43] *** [Coke] joined
[19:44] *** Nemokosch joined
[19:45] *** [Coke]_ left
[20:08] *** tidux joined
[20:08] <tidux> Why is Rakudo on MacOS such a giant piece of shit?
[20:09] <tidux> I opened a bug against homebrew for rakudo-star not having a working zef or readline.  The homebrew maintainers said it was an upstream issue, but I can't find it in the documentation or install instructions.
[20:12] <El_Che> rakudo is not rakudo-star
[20:14] <discord-raku-bot> <Nemokosch> In fact, many of Rakudo devs use MacOS so it shouldn't be bad at all
[20:14] <tidux> so then why is rakudo-star still the recommended installation package?
[20:14] <El_Che> when on macos I get rakudo (not star)  with homebrew and get zef using the 3 simple commands on https://github.com/ugexe/zef
[20:15] <El_Che> https://rakudo.org/downloads
[20:15] <El_Che> it looks to me they recommend plain rakudo
[20:17] <tidux> ok, so it's the homebrew maintainers that are wrong
[20:17] <tidux> that seems plausible
[20:17] <El_Che> no, they offer both
[20:17] <El_Che> rakudo and rakudo-star
[20:17] <tidux> El_Che: "that's something that's in rakudo-star" https://github.com/Homebrew/homebrew-core/issues/102441
[20:18] <El_Che> they are right zef is not part of rakudo
[20:18] *** nebuchadnezzar left
[20:18] <tidux> ^ I was told this directly by a maintainer
[20:18] <El_Che> they are technically correct. I include zef in my rakudo package
[20:18] <El_Che> (but I only support Linux atm)
[20:19] <El_Che> but I agree it should be distributed with the compiler
[20:22] <tidux> ok, looks like my best bet is to just use rakubrew then
[20:22] <tidux> thanks
[20:22] <El_Che> I find the rakudo formula + the git checkout pretty easy
[20:22] <discord-raku-bot> <Nemokosch> definitely
[20:23] <El_Che> works for me, but macos is not my main platform
[20:23] <discord-raku-bot> <Nemokosch> rakubrew is very comfy on POSIX systems
[20:23] <discord-raku-bot> <Nemokosch> it may work on Windows as well but that's always a mess
[20:25] <tidux> thankfully I own exactly zero Windows systems
[20:27] *** MARTIMM joined
[20:29] *** MARTIMM left
[20:30] <tidux> oh hey this is an actual Raku bug
[20:30] <tidux> Apple changed where the Xcode command line tools install
[21:06] <El_Che> mm
[21:14] *** [Coke] left
[21:18] *** [Coke] joined
[21:22] *** sena_kun left
[22:15] *** Nemokosch left
[22:15] *** Nemokosch joined
[22:28] *** Nemokosch left
[22:44] *** Guest4 joined
[22:45] *** Guest4 left
[22:51] <discord-raku-bot> <p6steve> i think macOS is walking away from unix style dev ... they have certainly broken raku for me a few times - I have switched to docker on ubuntu on vftools (on macOS)
[22:52] *** [Coke] left
[22:55] *** [Coke] joined
[22:56] <discord-raku-bot> <p6steve> https://medium.com/carvago-development/my-docker-on-macos-part-1-setup-ubuntu-virtual-machine-both-intel-and-apple-silicon-cpu-5d886af0ebba
[23:00] *** [Coke] left
[23:00] *** [Coke] joined
