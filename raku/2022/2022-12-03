[00:00] *** reportable6 left
[00:01] *** Wanderer_ joined
[00:02] *** reportable6 joined
[00:03] *** Wanderer_ is now known as wanderer

[00:12] *** Kaiepi left
[00:20] *** lichtkind left
[00:34] *** epony left
[00:39] *** sgrs left
[00:45] *** derpydoo left
[01:22] *** epony joined
[02:10] *** razetime joined
[02:43] *** razetime left
[03:43] *** notable6 left
[03:43] *** linkable6 left
[03:43] *** unicodable6 left
[03:43] *** quotable6 left
[03:43] *** committable6 left
[03:43] *** shareable6 left
[03:43] *** bisectable6 left
[03:43] *** statisfiable6 left
[03:43] *** bloatable6 left
[03:43] *** benchable6 left
[03:43] *** coverable6 left
[03:43] *** tellable6 left
[03:43] *** nativecallable6 left
[03:43] *** sourceable6 left
[03:43] *** evalable6 left
[03:43] *** squashable6 left
[03:43] *** reportable6 left
[03:43] *** greppable6 left
[03:43] *** releasable6 left
[03:43] *** bisectable6 joined
[03:44] *** notable6 joined
[03:44] *** coverable6 joined
[03:44] *** bloatable6 joined
[03:44] *** nativecallable6 joined
[03:44] *** committable6 joined
[03:44] *** benchable6 joined
[03:45] *** quotable6 joined
[03:45] *** squashable6 joined
[03:45] *** sourceable6 joined
[03:45] *** reportable6 joined
[03:45] *** evalable6 joined
[03:45] *** releasable6 joined
[03:45] *** linkable6 joined
[03:46] *** tellable6 joined
[03:46] *** shareable6 joined
[03:46] *** greppable6 joined
[03:46] *** statisfiable6 joined
[03:46] *** unicodable6 joined
[03:59] *** Kaiepi joined
[04:06] *** ProperNoun joined
[04:59] *** xinming left
[05:59] *** linkable6 left
[05:59] *** evalable6 left
[06:00] *** reportable6 left
[06:00] *** evalable6 joined
[06:01] *** reportable6 joined
[06:01] *** linkable6 joined
[07:01] *** evalable6 left
[07:01] *** linkable6 left
[07:01] *** unicodable6 left
[07:01] *** nativecallable6 left
[07:01] *** quotable6 left
[07:01] *** sourceable6 left
[07:01] *** squashable6 left
[07:01] *** shareable6 left
[07:01] *** tellable6 left
[07:01] *** coverable6 left
[07:01] *** reportable6 left
[07:01] *** greppable6 left
[07:01] *** committable6 left
[07:01] *** benchable6 left
[07:01] *** bloatable6 left
[07:01] *** statisfiable6 left
[07:01] *** releasable6 left
[07:01] *** notable6 left
[07:02] *** sourceable6 joined
[07:02] *** committable6 joined
[07:02] *** nativecallable6 joined
[07:02] *** shareable6 joined
[07:02] *** evalable6 joined
[07:02] *** coverable6 joined
[07:02] *** reportable6 joined
[07:02] *** bloatable6 joined
[07:02] *** greppable6 joined
[07:03] *** linkable6 joined
[07:03] *** releasable6 joined
[07:03] *** statisfiable6 joined
[07:03] *** squashable6 joined
[07:03] *** quotable6 joined
[07:03] *** unicodable6 joined
[07:04] *** tellable6 joined
[07:04] *** benchable6 joined
[07:04] *** notable6 joined
[07:41] *** xinming joined
[07:44] *** deoac left
[07:59] *** holyghost left
[08:05] *** razetime joined
[08:19] *** ToddAndMargo joined
[08:34] <ToddAndMargo> Raku (Perl6) question NativeCall question:

[08:34] <ToddAndMargo> I have little ending 8 bytes in a CArray representing a memory address.  How do I create a Pointer out it?

[09:04] <ToddAndMargo> This is frustrating as the array is 8 bytes and the pointer is also 8 bytes and the position of the bytes is the same in both.  AAAHHH!!!!!

[09:19] *** linkable6 left
[09:19] *** evalable6 left
[09:20] *** evalable6 joined
[09:20] *** linkable6 joined
[09:40] *** derpydoo joined
[10:13] *** sena_kun joined
[10:31] *** sgrs joined
[10:41] *** razetime left
[10:43] *** human-blip joined
[10:43] *** xinming left
[10:48] *** razetime joined
[10:48] *** xinming joined
[11:09] *** Sgeo left
[11:09] *** sgrs left
[11:20] *** Kaiepi left
[11:46] *** human-blip left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:06] *** mscha joined
[12:08] <mscha> m: my @a =<a b c d e f g>; say @a/2; # :-)

[12:08] <camelia> rakudo-moar a9d9c1363: OUTPUT: «3.5␤»

[12:08] <mscha> m: my @a = <a b c d e f g>; say @a div 2; # :-(

[12:08] <camelia> rakudo-moar a9d9c1363: OUTPUT: «Cannot resolve caller infix:<div>(Array:D, Int:D); none of these signatures matches:␤    (Int:D $a, Int:D $b --> Int:D)␤    (int $a, int $b --> int)␤    (uint $a, uint $b --> uint)␤  in block <unit> at <tmp> line 1␤␤»

[12:14] <mscha> m: my @a = <a b c d e f>; say @a.head(@a/2); # :-)

[12:14] <camelia> rakudo-moar a9d9c1363: OUTPUT: «(a b c)␤»

[12:14] <mscha> m: my @a = <a b c d e f>; say @a.tail(@a/2); # :-(

[12:14] <camelia> rakudo-moar a9d9c1363: OUTPUT: «Type check failed in binding to parameter '$toskip'; expected Int but got Rat (3.0)␤  in block <unit> at <tmp> line 1␤␤»

[12:14] <mscha> m: my @a = <a b c d e f>; say @a.tail(+@a div 2); # :-/

[12:14] <camelia> rakudo-moar a9d9c1363: OUTPUT: «(d e f)␤»

[12:14] *** lichtkind joined
[12:18] <discord-raku-bot> <Nemokosch> what's the matter with the last one?

[12:19] <mscha> Last one works fine, but is longer, less elegant.  If `head` works fine with a `Rat`, why doesn't `tail`?

[12:24] <sarna> why is this error so weird?

[12:24] <sarna> m: sub foo { True }; foo or die "not true"

[12:24] <camelia> rakudo-moar a9d9c1363: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    or used at line 1␤␤»

[12:24] <sarna> ah I can fix it with unless

[12:25] <discord-raku-bot> <Nemokosch> yeah perhaps you shouldn't use "or die" pattern anyway

[12:25] <discord-raku-bot> <Nemokosch> but foo() or die would have worked probably

[12:26] <discord-raku-bot> <Nemokosch> by the way: https://github.com/Raku/problem-solving/issues/326

[12:26] <discord-raku-bot> <Nemokosch> I opened this issue months ago so yeah...

[12:27] <discord-raku-bot> <Nemokosch> if you could leave a comment, that would be really nice

[12:48] <discord-raku-bot> <Nemokosch> watching Vadim's presentation from last year as a kind of training

[12:53] <sarna> can raku strings hold arbitrary bytes or do they need to be valid utf-8?

[12:53] <sarna> or well, some other format..

[12:58] <[Coke]> Strings need to be valid unicode, yes

[12:59] <[Coke]> If you need binary data, use Blob

[13:02] <[Coke]> Huh. Seems like we should refer to this on the Str class in the docs. https://docs.raku.org/language/unicode has some of it

[13:04] <discord-raku-bot> <Nemokosch> you can do encode/decode business to get other formats into strings

[13:08] <[Coke]> and there is encoding 'utf-c8' described on that unicode page to avoid converting the bytes. the strings have a normalization form that means some unicode doesn't *literally* round trip (example shown on that page)

[13:14] *** linkable6 left
[13:14] *** evalable6 left
[13:16] *** evalable6 joined
[13:17] *** linkable6 joined
[13:25] <discord-raku-bot> <Nemokosch> so apparently all Raku blocks are very much like IIFE's

[13:33] *** derpydoo left
[13:48] *** Kaiepi joined
[13:50] *** gfldex_ is now known as gfldex

[14:47] *** epony left
[15:01] <discord-raku-bot> <Anton Antonov> Strings encoding and decoding is reliable source of headaches in my ZMQ based connections.

[15:21] *** sena_kun left
[15:23] *** sena_kun joined
[15:48] *** mscha left
[15:52] <discord-raku-bot> <Nemokosch> https://youtu.be/NYBc3tQEIh4?list=PL_OYHwbArcGgqbwXzxLBDMlaa0hr9A4c0&t=10151

[15:52] <discord-raku-bot> <Nemokosch> "Array and Hash are containers, too"

[15:53] <discord-raku-bot> <Nemokosch> It's a problem that not even core devs can apparently say the same thing about what a container is

[15:55] *** deoac joined
[15:56] <discord-raku-bot> <Nemokosch> lizmat, 2022.11.12 - "an Array is not a container.  it is an object with containers (...) an array can be within a container, sure, but it is *not* a container"

[16:35] *** razetime left
[17:03] *** Guest33 joined
[17:20] *** squashable6 left
[17:21] <sarna> thanks!

[17:22] <sarna> I'm trying to use a library from perl via Inline::Perl5, and it's returning strings.. to me, these should be blobs. any way of converting these before they get decoded in raku?

[17:22] <sarna> (it's inflate/deflate from Compress::Zlib)

[17:23] *** squashable6 joined
[17:38] <thowe> Advent Calendar!  Yas!  drinking coffee and thinking of all the cool stuff I could do if I knew Raku better.

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:06] *** derpydoo joined
[18:15] *** coleman left
[18:16] *** sena_kun left
[18:18] *** sena_kun joined
[18:21] *** Guest33 left
[18:21] *** coleman joined
[18:53] *** Kaiepi left
[18:54] *** Kaiepi joined
[19:54] *** greppable6 left
[19:54] *** bisectable6 left
[19:54] *** shareable6 left
[19:55] *** statisfiable6_ joined
[19:56] *** benchable6_ joined
[19:56] *** evalable6 left
[19:56] *** linkable6 left
[19:56] *** squashable6 left
[19:56] *** unicodable6 left
[19:56] *** quotable6 left
[19:56] *** reportable6 left
[19:56] *** committable6 left
[19:56] *** tellable6 left
[19:56] *** statisfiable6 left
[19:56] *** notable6 left
[19:56] *** coverable6 left
[19:56] *** nativecallable6 left
[19:56] *** sourceable6 left
[19:56] *** releasable6 left
[19:56] *** benchable6 left
[19:56] *** shareable6_ joined
[19:56] *** bisectable6_ joined
[19:56] *** notable6 joined
[19:56] *** unicodable6 joined
[19:56] *** reportable6 joined
[19:56] *** quotable6 joined
[19:56] *** sourceable6 joined
[19:56] *** committable6 joined
[19:56] *** releasable6 joined
[19:56] *** squashable6 joined
[19:56] *** linkable6 joined
[19:57] *** nativecallable6 joined
[19:57] *** tellable6 joined
[19:57] *** greppable6 joined
[19:57] *** evalable6 joined
[19:57] *** coverable6 joined
[19:59] *** Sgeo joined
[20:59] *** linkable6 left
[20:59] *** evalable6 left
[21:00] *** evalable6 joined
[21:01] *** linkable6 joined
[21:12] *** Sauvin left
[21:15] *** Sauvin joined
[21:27] *** Bocaneri joined
[21:28] *** Bocaneri is now known as Guest6927

[21:29] *** Sauvin left
[21:29] *** Guest6927 is now known as Sauvin

[21:40] *** mscha joined
[21:40] *** mscha left
[22:40] *** linkable6 left
[22:40] *** evalable6 left
[22:40] *** linkable6 joined
[22:40] *** evalable6 joined
[23:08] *** epony joined
[23:43] *** Bocaneri joined
[23:43] *** Sauvin left
[23:43] *** Bocaneri is now known as Sauvin

