[00:01] *** unicodable6 left
[00:01] *** reportable6 left
[00:01] *** coverable6 left
[00:01] *** benchable6 left
[00:01] *** bloatable6 left
[00:01] *** greppable6 left
[00:01] *** linkable6 left
[00:01] *** notable6 left
[00:01] *** tellable6 left
[00:01] *** nativecallable6 left
[00:01] *** bisectable6 left
[00:01] *** evalable6 left
[00:01] *** quotable6 left
[00:01] *** committable6 left
[00:01] *** releasable6 left
[00:01] *** shareable6 left
[00:01] *** statisfiable6 left
[00:01] *** sourceable6 left
[00:01] *** notable6 joined
[00:01] *** committable6 joined
[00:02] *** benchable6 joined
[00:02] *** quotable6 joined
[00:02] *** shareable6 joined
[00:02] *** sourceable6 joined
[00:02] *** statisfiable6 joined
[00:02] *** coverable6 joined
[00:03] *** greppable6 joined
[00:03] *** releasable6 joined
[00:03] *** bisectable6 joined
[00:03] *** bloatable6 joined
[00:03] *** reportable6 joined
[00:03] *** tellable6 joined
[00:04] *** nativecallable6 joined
[00:04] *** unicodable6 joined
[00:04] *** linkable6 joined
[00:04] *** evalable6 joined
[01:04] *** linkable6 left
[01:04] *** evalable6 left
[01:05] *** evalable6 joined
[01:07] *** linkable6 joined
[01:42] <Geth> ¬¶ doc: 1983eb9425 | Coke++ | xt/01-raku-version.t

[01:42] <Geth> ¬¶ doc: Track latest release

[01:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1983eb9425

[01:42] <Geth> ¬¶ doc: 7a7b51222c | Coke++ | writing-docs/INDEXING.md

[01:42] <Geth> ¬¶ doc: Remove currently unused category

[01:42] <Geth> ¬¶ doc: 

[01:42] <Geth> ¬¶ doc: (passes xt/)

[01:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/7a7b51222c

[01:48] *** rir joined
[02:00] *** Garbanzo joined
[02:26] *** Garbanzo left
[02:27] *** frost joined
[02:27] *** rir left
[03:14] *** simcop2387 joined
[03:16] *** perlbot joined
[04:01] *** perlbot left
[04:02] *** simcop2387 left
[04:12] *** simcop2387 joined
[04:13] *** perlbot joined
[04:14] *** Sgeo_ joined
[04:14] *** Kaipei joined
[04:14] *** Garbanzo joined
[04:14] *** donpdonp|z_ joined
[04:15] *** [Coke]_ joined
[04:16] *** [Coke] left
[04:16] *** vrurg left
[04:17] *** Kaiepi left
[04:17] *** Sgeo left
[04:17] *** tejr left
[04:17] *** donpdonp- left
[04:18] *** tejr joined
[04:19] *** vrurg joined
[04:40] *** djerius left
[04:44] *** djerius joined
[05:00] *** Sankalp- joined
[05:01] *** Sankalp left
[05:01] *** Sankalp- is now known as Sankalp

[05:18] *** Kaipei left
[05:55] *** Garbanzo left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:19] *** mexen joined
[06:31] *** Sgeo_ left
[07:06] *** dakkar joined
[07:08] *** frost left
[07:44] <discord-raku-bot> <Zephyr#8815> is there a regex/raku rule to test if given string is an acceptable raku identifier or not?

[07:44] <discord-raku-bot> <Zephyr#8815> not sure what unicode ranges it uses

[07:46] <discord-raku-bot> <Nemokosch#9980> The language is parsed with Raku grammars so quite surely

[07:46] <discord-raku-bot> <Zephyr#8815> could I have a link to the parser to find that part myself?

[07:47] <discord-raku-bot> <Nemokosch#9980> If only I knew where it was...

[07:48] <discord-raku-bot> <Nemokosch#9980> Maybe this?

[07:48] <discord-raku-bot> <Nemokosch#9980> https://github.com/Raku/nqp/blob/master/src/HLL/Grammar.nqp

[07:50] <discord-raku-bot> <Nemokosch#9980> NQP is a subset of Raku, for all intents and purposes

[07:52] <discord-raku-bot> <Zephyr#8815> is that it

[07:56] <discord-raku-bot> <Zephyr#8815> oh, think I found it https://github.com/Raku/nqp/blob/master/src/NQP/Grammar.nqp#L45=

[07:56] <discord-raku-bot> <Zephyr#8815> thanks for the repo <@297037173541175296>

[08:00] *** ecocode left
[08:04] *** ecocode joined
[08:16] *** Kaipei joined
[08:17] *** discord-raku-bot left
[08:17] *** discord-raku-bot joined
[08:37] <nine> Actually Raku's grammar is https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp

[08:37] <nine> With the RakuAST version at https://github.com/rakudo/rakudo/blob/rakuast/src/Raku/Grammar.nqp

[08:50] <discord-raku-bot> <Nemokosch#9980> interesting, it's the same but phrased differently

[08:53] *** discord-raku-bot left
[08:53] *** discord-raku-bot joined
[09:09] *** waffulus joined
[09:12] <waffulus> I am a complete noob to raku i tested some regex from the offical site but i keep getting weird outputed characters and I don't know why

[09:13] <waffulus> [0] > 'raku' ~~ /rak./;       # matches the whole string

[09:13] <waffulus> ‚à©‚ïú√≥raku‚à©‚ïú√∫

[09:13] <discord-raku-bot> <Zephyr#8815> m:  'raku' ~~ /rak./

[09:14] <discord-raku-bot> <Nemokosch#9980> ~~it's not a weird character, it's a perfectly valid √≥~~

[09:14] <waffulus> so its supposed to so that?

[09:14] <dutchie> something's broken with your unicode handling; raku is trying to print the Match object with japanese-style ÔΩ¢quotesÔΩ£

[09:14] <waffulus> I ran into a problem while trying to set up Readline: Cannot locate native library 'readline.dll': error 0x7e

[09:14] <waffulus> Falling back to Linenoise (if present)

[09:14] <waffulus> maybe that is something to do with it

[09:15] <waffulus> or maybe it is the font i'm using source code pro and have tried ohter fonts

[09:15] <discord-raku-bot> <Zephyr#8815> is the bot down

[09:15] <dutchie> m: 'ÔΩ¢'.encode.decode('latin-1') # something like this

[09:15] <camelia> rakudo-moar d253dc79e: ( no output )

[09:15] <dutchie> m: 'ÔΩ¢'.encode.decode('latin-1').say # something like this

[09:15] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´√Ø¬Ω¬¢‚ê§¬ª

[09:16] <dutchie> (substitute latin-1 for your local system encoding to perhaps replicate)

[09:16] <discord-raku-bot> <Nemokosch#9980> definitely character encoding issue in some way

[09:17] <discord-raku-bot> <Nemokosch#9980> I don't know if it's supposed to work here but it usually doesn't

[09:17] <waffulus> dutchie i get a ?

[09:23] <dutchie> you should make sure your terminal (or console or whatever) is expecting utf-8 output

[09:23] <waffulus> i can type unicode and get the output as is

[09:24] <waffulus> when i use powershell it outputs the uncode as is

[09:24] <waffulus> when i use perl it complains of malformed utf

[09:24] <waffulus> in an infinite loop

[09:28] <discord-raku-bot> <Nemokosch#9980> windows be like

[09:29] <waffulus> well maybe but python seems to work

[09:29] <waffulus> maybe i should reinstall it

[09:39] <waffulus> k no longer using something called rakudo-moar loaded up the repl no luck

[09:44] <discord-raku-bot> <Nemokosch#9980> how did you install the Raku environment, by the way

[09:45] <waffulus> well i just installed it using the msi downloaded from rakudo.org

[09:46] <discord-raku-bot> <Nemokosch#9980> msvc... well idk, doesn't explain

[09:46] <discord-raku-bot> <Nemokosch#9980> but https://rakubrew.org/?platform=win rules üòõ

[09:47] <waffulus> k i¬† wil will try that version, ty

[09:48] <discord-raku-bot> <Nemokosch#9980> doesn't sound related but who knows

[09:48] <discord-raku-bot> <Nemokosch#9980> "good practices"

[09:53] *** lichtkind joined
[09:59] <waffulus> sorry can't installed the rakubrew one complaining about shims and shell hooks

[10:03] *** Altai-man joined
[10:03] <waffulus> sorry the rakubrew installation just seems to add even more problems on top of what i already had

[10:08] *** thundergnat joined
[10:08] <thundergnat> m: say $_ ~~ /^<ident>$/ for <raku ok1 42nope>; #¬† <-- (is there a regex/raku rule to test if given string is an acceptable raku identifier or not?)

[10:08] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´ÔΩ¢rakuÔΩ£‚ê§ ident => ÔΩ¢rakuÔΩ£‚ê§ÔΩ¢ok1ÔΩ£‚ê§ ident => ÔΩ¢ok1ÔΩ£‚ê§Nil‚ê§¬ª

[10:09] *** thundergnat left
[10:38] <discord-raku-bot> <Nemokosch#9980> you did see the difinition though, no?

[10:38] <discord-raku-bot> <Nemokosch#9980> oh right

[10:38] <discord-raku-bot> <Nemokosch#9980> anyway, the definition is <ident> [[ \-' ] <ident>]*

[10:38] <discord-raku-bot> <Nemokosch#9980> iirc

[10:38] <discord-raku-bot> <Nemokosch#9980> discord ate the backslash

[10:38] <discord-raku-bot> <Nemokosch#9980> but the _three_ characters inside should be: \ - '

[11:01] *** waffulus left
[11:01] <discord-raku-bot> <Nemokosch#9980> meh

[11:01] <discord-raku-bot> <Nemokosch#9980> more accurately:

[11:01] <discord-raku-bot> <Nemokosch#9980> token apostrophe {

[11:01] <discord-raku-bot> <Nemokosch#9980>         <[ ' \- ]>

[11:01] <discord-raku-bot> <Nemokosch#9980>     }

[11:01] <discord-raku-bot> <Nemokosch#9980>     token identifier {

[11:01] <discord-raku-bot> <Nemokosch#9980>         <.ident> [ <.apostrophe> <.ident> ]*

[11:01] <discord-raku-bot> <Nemokosch#9980>     }

[11:04] <moritz> so to answer the question, `identifier` parses an identifier, `ident` just a subset of identifiers

[11:05] <discord-raku-bot> <Nemokosch#9980> by the way, it seems to me discord cut the backslash again

[11:07] *** Nemokosch joined
[11:07] <discord-raku-bot> <Nemokosch#9980> not sure if it shows up inside the apostrophe definition?

[11:09] <moritz> yes, the dash is backslash-quoted

[11:09] <discord-raku-bot> <Nemokosch#9980> test: [\-']

[11:09] <Nemokosch> okay it does work

[11:10] <Nemokosch> so is it quoting in the Raku regex as well?

[11:10] <Nemokosch> or escaping

[11:10] *** Nemokosch left
[11:13] <moritz> it#s escaping, because the - in a character class usually is a range

[11:14] <moritz> wait no, that was perl 5 semantics

[11:17] <discord-raku-bot> <Nemokosch#9980> anyway, you are right, it is escaping

[11:53] *** abraxxa joined
[11:59] *** abraxxa left
[12:00] *** abraxxa joined
[12:02] *** codesections73 left
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[13:07] *** evalable6 left
[13:07] *** linkable6 left
[13:09] *** linkable6 joined
[13:11] *** evalable6 joined
[13:56] *** Altai-man left
[13:56] *** sena_kun_ joined
[13:59] *** abraxxa left
[14:14] *** morte_ joined
[14:18] *** timo left
[14:21] *** morte_ left
[14:23] *** [Coke]_ is now known as [Coke]

[14:35] *** Sgeo joined
[14:39] *** timo joined
[14:41] *** Garbanzo joined
[15:25] *** morte_ joined
[15:31] *** avuserow left
[15:32] *** avuserow joined
[15:35] *** dakkar left
[15:39] *** ecocode left
[15:40] *** ecocode joined
[15:41] *** Sankalp left
[16:11] *** Sankalp joined
[17:05] *** fingolfin joined
[17:12] <fingolfin> Hello community. I see in docs (https://docs.raku.org/language/glossary#Stub), that "Stubs define name and signature". But this code doesn't throw error. Why? Is it a bug?

[17:12] <fingolfin> role A {

[17:12] <fingolfin> ¬†¬† ¬†method M(Str $x) { ‚Ä¶ }

[17:12] <fingolfin> }

[17:12] <fingolfin> class B does A {

[17:12] <fingolfin> ¬†¬† ¬†method M(Int $x) { 0 }

[17:12] <fingolfin> }

[17:13] *** mexen left
[17:36] *** sena_kun_ left
[17:56] <[Coke]> m: role A { method M(Str $x) { ... } }; class B does A { method M(Int $x) { 0 } };

[17:56] <camelia> rakudo-moar d253dc79e: ( no output )

[17:56] <[Coke]> m: role A { method M(Str $x) { ... } }; class B does A { method M(Int $x) { 0 } }; B.new.M(3);

[17:57] <camelia> rakudo-moar d253dc79e: ( no output )

[17:57] <[Coke]> in the latter case, you're invoking B's copy of the method. it doesn't need to touch A's version.

[17:57] <[Coke]> m: role A { method M(Str $x) { ... } }; class B does A { method M(Int $x) { 0 } }; A.new.M(3);

[17:57] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´Method 'M' must be implemented by A because it is required by roles: A.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:58] <[Coke]> but if you pun the role (create an anonymous class out of it), and try to invoke the method, then the fact that it's a stub is noticed.

[17:58] <[Coke]> m: role A { method M(Str $x) { ... } }; class C does A { }; C.new.M(3);

[17:58] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Method 'M' must be implemented by C because it is required by roles: A.‚ê§at <tmp>:1‚ê§¬ª

[17:58] <[Coke]> ^^ or if you don't override it.

[17:58] <[Coke]> m: role A { method M(Str $x) { ... } }; class C does A { }; C.new.M("3"); #better

[17:58] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Method 'M' must be implemented by C because it is required by roles: A.‚ê§at <tmp>:1‚ê§¬ª

[17:59] <[Coke]> I think the fact that you changed the first parameter type doesn't matter unless you try to invoke it:

[17:59] <[Coke]> m: role A { method M(Str $x) { ... } }; class B does A { method M(Int $x) { 0 } }; B.new.M("three");

[17:59] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´Type check failed in binding to parameter '$x'; expected Int but got Str ("three")‚ê§  in method M at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:00] <[Coke]> need a multi for that to work.

[18:00] <[Coke]> Not sure I answer the question you were after.

[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:13] <fingolfin> Thank you Coke, I have read your answers carefully. It turns out that if the methods have the same name, but different signatures, is it still the same method? It's a little confusing... It turns out that "method M(Int$x) { 0 }" in my example implements the method "method M(Str $x)", but does it "incorrectly". Why wouldn't raku track down this

[18:13] <fingolfin> error at the compilation stage?

[18:13] <fingolfin> I am asking this question because in another situation, if the method is not implemented at all, raku reports it at the compilation stage:

[18:14] <fingolfin> m: role A { method M(Str $x) { ... } }; class B does A {¬† };

[18:14] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Method 'M' must be implemented by B because it is required by roles: A.‚ê§at <tmp>:1‚ê§¬ª

[18:14] <[Coke]> m: role A { multi method M(Str $x) { ... } }; class B does A { multi method M(Int $x) { 0 } }; B.new.M("three");

[18:14] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Multi method 'M' with signature :(B: Str $x, *%_) must be implemented by B because it is required by a role‚ê§at <tmp>:1‚ê§¬ª

[18:15] <[Coke]> m: role A { multi method M(Str $x) { ... } }; class B does A { multi method M(Int $x) { 0 } };

[18:15] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Multi method 'M' with signature :(B: Str $x, *%_) must be implemented by B because it is required by a role‚ê§at <tmp>:1‚ê§¬ª

[18:15] <[Coke]> (there you go. the multi forces the compile time alert)

[18:22] <fingolfin> Thanks, it's getting clearer. But why is there no error without "multi"? Is this behavior correct?

[18:22] <fingolfin> It seems to me that if a class implements a method with a different signature, then this is essentially a different method. But maybe I don't understand something...

[18:22] *** fingolfin left
[18:25] *** sena_kun left
[18:26] <[Coke]> that would be my take; they're considered different methods unless you specify multi, which indicates that anything with the same name counts.

[18:26] *** sena_kun joined
[18:27] <[Coke]> but then, because of the stub, the compiler realizes that NOTHING is implementing that specific version of the multi.

[18:51] *** vasko left
[18:56] *** fingolfin joined
[19:31] *** fingolfin left
[20:31] *** unicodable6 left
[20:31] *** reportable6 left
[20:31] *** benchable6 left
[20:31] *** releasable6 left
[20:31] *** linkable6 left
[20:31] *** bisectable6 left
[20:31] *** nativecallable6 left
[20:31] *** notable6 left
[20:31] *** quotable6 left
[20:31] *** evalable6 left
[20:31] *** coverable6 left
[20:31] *** statisfiable6 left
[20:31] *** bloatable6 left
[20:31] *** committable6 left
[20:31] *** greppable6 left
[20:31] *** sourceable6 left
[20:31] *** shareable6 left
[20:31] *** tellable6 left
[20:32] *** notable6 joined
[20:32] *** benchable6 joined
[20:32] *** sourceable6 joined
[20:32] *** bloatable6 joined
[20:32] *** quotable6 joined
[20:32] *** bisectable6 joined
[20:33] *** unicodable6 joined
[20:33] *** committable6 joined
[20:33] *** reportable6 joined
[20:33] *** releasable6 joined
[20:33] *** shareable6 joined
[20:33] *** greppable6 joined
[20:33] *** linkable6 joined
[20:34] *** nativecallable6 joined
[20:34] *** evalable6 joined
[20:34] *** tellable6 joined
[20:34] *** statisfiable6 joined
[20:34] *** coverable6 joined
[21:34] *** linkable6 left
[21:34] *** notable6 left
[21:34] *** coverable6 left
[21:34] *** greppable6 left
[21:34] *** benchable6 left
[21:34] *** unicodable6 left
[21:34] *** bloatable6 left
[21:34] *** sourceable6 left
[21:34] *** statisfiable6 left
[21:34] *** releasable6 left
[21:34] *** bisectable6 left
[21:34] *** reportable6 left
[21:34] *** nativecallable6 left
[21:34] *** shareable6 left
[21:34] *** quotable6 left
[21:34] *** committable6 left
[21:34] *** tellable6 left
[21:34] *** evalable6 left
[21:34] *** bisectable6 joined
[21:35] *** shareable6 joined
[21:35] *** tellable6 joined
[21:35] *** reportable6 joined
[21:35] *** evalable6 joined
[21:36] *** benchable6 joined
[21:36] *** greppable6 joined
[21:36] *** sourceable6 joined
[21:36] *** notable6 joined
[21:36] *** coverable6 joined
[21:36] *** unicodable6 joined
[21:36] *** statisfiable6 joined
[21:36] *** committable6 joined
[21:36] *** bloatable6 joined
[21:37] *** quotable6 joined
[21:37] *** linkable6 joined
[21:37] *** nativecallable6 joined
[21:37] *** releasable6 joined
[22:29] *** discord-raku-bot left
[22:30] *** discord-raku-bot joined
[22:51] <tonyo> .

[23:08] *** discord-raku-bot left
[23:08] *** gfldex left
[23:36] *** discord-raku-bot joined
[23:40] *** gfldex joined
[23:48] *** morte_ left
