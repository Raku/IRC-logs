[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:16] *** Nemokosch left
[00:39] *** derpydoo joined
[00:42] *** sjn joined
[00:47] *** sortiz joined
[01:14] *** deoac joined
[01:15] *** Kaipei left
[01:20] *** razetime joined
[01:26] *** deoac left
[02:17] *** sortiz left
[02:52] *** derpydoo left
[03:41] *** Kaipei joined
[03:58] *** razetime left
[04:58] *** tellable6 left
[04:58] *** nativecallable6 left
[04:58] *** squashable6 left
[04:58] *** quotable6 left
[04:58] *** evalable6 left
[04:58] *** benchable6 left
[04:58] *** notable6 left
[04:58] *** committable6 left
[04:58] *** reportable6 left
[04:58] *** unicodable6 left
[04:58] *** sourceable6 left
[04:58] *** linkable6 left
[04:58] *** coverable6 left
[04:58] *** releasable6 left
[04:58] *** statisfiable6 left
[04:58] *** greppable6 left
[04:58] *** bloatable6 left
[04:58] *** shareable6 left
[04:58] *** bisectable6 left
[04:58] *** committable6 joined
[04:58] *** evalable6 joined
[04:58] *** notable6 joined
[04:58] *** benchable6 joined
[04:59] *** greppable6 joined
[04:59] *** shareable6 joined
[04:59] *** releasable6 joined
[05:00] *** bloatable6 joined
[05:00] *** coverable6 joined
[05:00] *** sourceable6 joined
[05:00] *** statisfiable6 joined
[05:00] *** linkable6 joined
[05:00] *** nativecallable6 joined
[05:00] *** unicodable6 joined
[05:00] *** bisectable6 joined
[05:00] *** quotable6 joined
[05:00] *** squashable6 joined
[05:00] *** tellable6 joined
[05:01] *** reportable6 joined
[05:52] *** epony left
[06:02] *** silug left
[06:02] *** silug joined
[06:07] *** reportable6 left
[06:07] *** reportable6 joined
[06:28] *** squashable6 left
[06:29] *** squashable6 joined
[07:01] *** epony joined
[07:04] *** epony left
[07:04] *** lucerne joined
[07:05] *** epony joined
[07:17] *** epony left
[07:18] *** epony joined
[07:27] *** lucerne left
[07:27] *** abraxxa joined
[07:28] *** Sgeo left
[07:33] *** abraxxa left
[07:34] *** abraxxa joined
[07:35] *** abraxxa left
[07:36] *** abraxxa joined
[07:37] *** abraxxa joined
[07:41] *** lucerne joined
[07:45] *** lucerne left
[07:52] *** lucerne joined
[07:58] *** razetime joined
[07:58] *** sortiz joined
[07:59] *** jjido joined
[08:19] *** sena_kun joined
[08:24] *** lichtkind_ joined
[08:50] *** abraxxa left
[08:52] *** abraxxa-home joined
[09:00] *** Nemokosch joined
[09:01] <Nemokosch> m: say 'herro'.match(/err/) ~~ Match.new
[09:01] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢｣␤»
[09:01] <Nemokosch> I should start every day by posting it, like some "did you know" parody
[09:04] <Nemokosch> my "top 3 design mistakes in Raku" goes like, in chronological order: 1. negation with junctions 2. Failure is Nil 3. smartmatch on Matches
[09:06] <Nemokosch> 1. I think we can eventually win this case - "we" because I think eventually this can be voted. I haven't given up on making a petition with thorough description of the situation
[09:06] <Nemokosch> 2. meh, it's not everyday enough. I'm still raising eyebrows over it but it's probably not worth it for anyone
[09:11] <Nemokosch> 3. well well... I have no words for this. For me, this is in another league. We live with the consequences (some good consequences as well) but since this isn't even documented, I simply don't consider this to be Raku, and never will.
[09:15] <Nemokosch> once I know how to fix this, I will fix it myself if nobody else would
[09:23] <Nemokosch> this is my "ceterum censeo"
[09:28] *** jjido left
[10:05] *** abraxxa-home left
[10:18] *** thundergnat joined
[10:18] <thundergnat> m: say 'herro'.match(/err/) ~~ Match
[10:18] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «True␤»
[10:20] <thundergnat> I'm not sure I see what the issue is. You are seeing if one specific Match instance is a "member" of another Match instance.
[10:20] <sortiz> @Nemokosch, the common idiomatic form of Regex application is precisely using smartmatch:
[10:20] <sortiz> m: say 'herro' ~~ /err/
[10:20] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢err｣␤»
[10:21] <Nemokosch> thundergnat: Match.new is not a type object
[10:21] <thundergnat> Correct
[10:21] <Nemokosch> sortiz: this works for the wrong reason
[10:21] <thundergnat> It's an instance
[10:22] <Nemokosch> the design mistake is that Match:D ~~ Match:D is essentially an `or`
[10:22] <thundergnat> Sort of like Auto.Thunderbird is not a member of Auto.Continental. Auto.Thunderbird is a member of Auto.
[10:23] <Nemokosch> if we are not okay with [1, 2] ~~ [3, 4] returning [3,4], why would be okay with this?
[10:23] <Nemokosch> it's exactly that behavior for Match instances
[10:23] <thundergnat> m: say [1, 2] ~~ [3, 4]
[10:23] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «False␤»
[10:24] <Nemokosch> it's a hack to specifically support m// on the right handside of a smartmatch
[10:24] <thundergnat> I'm not following your argument.
[10:24] <Nemokosch> well, then go back and read it again please
[10:25] <thundergnat> Not saying your wrong, just I'm not seeing the issue.
[10:25] <thundergnat> *you're
[10:25] <Nemokosch> okay, one more try...
[10:26] <Nemokosch> m: my $match-a = 'foobar'.match(/oo); my $match-b = 'terror'.match(/error/); say $match-a ~~ $match-b;
[10:26] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> my $match-a = 'foobar'.match(/oo⏏); my $match-b = 'terror'.match(/error/)␤    expecting any of:␤        argument list…»
[10:26] <Nemokosch> oops syntax error
[10:26] <Nemokosch> m: my $match-a = 'foobar'.match(/oo/); my $match-b = 'terror'.match(/error/); say $match-a ~~ $match-b;
[10:26] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢error｣␤»
[10:26] <Nemokosch> and THIS is a nonsense
[10:28] <Nemokosch> Match.ACCEPTS simply returns the instance. This goes against anything smartmatch is, only to hack around 'string' ~~ m/pattern/
[10:29] <sortiz> What would you expect smartmatch to do with Match at RHS?
[10:30] <Nemokosch> if the LHS is also a match then eqvivalence check surely
[10:30] *** sena_kun left
[10:30] <thundergnat> Specifically, what would you expect your above example to return?
[10:31] <Nemokosch> False
[10:32] <Nemokosch> m: say 'foo' ~~ 'bar'.match(/a/)
[10:32] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢a｣␤»
[10:32] <Nemokosch> similarly, this is clearly a `False`
[10:34] <Nemokosch> This behavior of Match is 1. unspecced 2. undocumented 3. only exists to support m// on the RHS of a smartmatch
[10:35] <Nemokosch> not even to support //, only m//
[10:35] <thundergnat> Ok, I can kind of see your point, but a match object isn't a string, or even a list of strings.
[10:35] *** Kaipei left
[10:36] <Nemokosch> I can't see what that has to do with anything here.
[10:37] <Nemokosch> Mind you, the important thing is the current behavior, not what I propose instead.
[10:37] <Nemokosch> I could propose anything, it would probably better than the current `or` semantics
[10:38] <sortiz> m: say ('foobar' ~~ /oo/) cmp ('terror' ~~ error) # Something like this?
[10:38] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    error used at line 1␤␤»
[10:38] <sortiz> m: say ('foobar' ~~ /oo/) cmp ('terror' ~~ /error/) # Something like this?
[10:38] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «More␤»
[10:39] <Nemokosch> I need to check how cmp is implemented on Match objects
[10:39] <Nemokosch> but yes, that's the core idea
[10:40] <Nemokosch> https://docs.raku.org/type/Match#infix_eqv
[10:40] <Nemokosch> eqv is implemented on Match, Match:D ~~ Match:D could simply be the same as Match:D eqv Match:D
[10:41] <Nemokosch> that doesn't make the string ~~ match case less hacky per se, though
[10:42] <thundergnat> Well, the current behavior, while perhaps not awesome, doesn't really bother me; mostly due to it being 1. unspecced 2. undocumented. I can't ever remember ever wanting to smartmatch against a Match object so haven't run into the issue. Just because it doesn't bother me doesn't mean it shouldn't be improved though.
[10:44] <Nemokosch> I understand you. These examples might bite somebody once in, say, a decade; not too often for sure
[10:44] <Nemokosch> It's rather the underlying principle that the concrete use-case ("string" ~~ m/pattern/) gets to beat the general concept (smartmatching semantics)
[10:45] <Nemokosch> That somebody ever thought "in order to support this paradigm, let's hack smartmatching itself"
[10:46] <Nemokosch> this is a very bad Perl(5) habit
[10:46] <sortiz> Yes, and that is the real problem.
[10:46] <lizmat> well, sometimes Raku's roots show
[10:48] <lizmat> personally I always use the "foo".match(/regex/) syntax rather than "foo" ~~ /regex/
[10:49] <Nemokosch> what happened with S///, while it might be unintended, shows that somehow it's possible to support 'string' ~~ regex:operators// on the syntax level(?) instead of hacking return types of ACCEPTS
[10:50] <Nemokosch> I think the underlying problem really is that what I called "regex operators" aren't clear about what they are
[10:50] <Nemokosch> I used to think they are plain syntax
[10:51] <Nemokosch> now the behavior is kinda inbetween
[10:52] <Nemokosch> and the intention was that they are plain values (functions executed with over-the-top precedence)
[10:52] <sortiz> What happened with S/// is a bug in a recent optimization, that should be fixed. But, yes, it is possible to allow other ACCEPTS cases.
[10:53] *** abraxxa-home joined
[10:53] <Nemokosch> well I still think it's rather an unintended feature than a bug :)
[10:54] <Nemokosch> the specification could be completed in a direction that values it as a feature
[10:56] <sortiz> I'm empathetic with your need of a simple "topicalizer" but not a the cost of an "optional" ACCEPTS for Str :)
[10:57] <Nemokosch> What does "optional" mean here?
[10:58] <sortiz> That the bug is that, with S///, ACCEPTS is NOT called
[10:58] <Nemokosch> By the way, I can see another resolution, with a breaking change: simply let's say that 'string' ~~ m/pattern/ is invalid
[10:58] <Nemokosch> because in that example, smartmatch is indeed a simple "topicalizer", and this introduced the Match hack
[10:59] *** abraxxa-home left
[11:00] <Nemokosch> sortiz: by the way, in my mind, the cost isn't the "optional ACCEPTS for Str"
[11:00] <Nemokosch> you could say the cost is far greater than that
[11:00] <Nemokosch> it's that "regex operators" are consistently seen as syntax, and hence syntax special-cased with smartmatching
[11:01] <Nemokosch> no ACCEPTS whatsoever because no data in the first place
[11:01] <Nemokosch> so basically deliberately doing what the optimization did under the hood
[11:04] <Nemokosch> This is the "PR friendly but core dev unfriendly" approach
[11:04] <Nemokosch> no breaking changes, slight adjustment of documentation, more syntax to take care of
[11:04] <Nemokosch> the "core dev friendly but PR unfriendly" approach would be the other thing I said
[11:05] <Nemokosch> "sorry but 'string' ~~ m/pattern/ is a bad idea; m// is not meant for smartmatching just like S/// and TR///"
[11:06] <Nemokosch> no code added, what's more: weird Match smartmatching removed
[11:06] <Nemokosch> however it's obviously a breaking change
[11:06] <sortiz> That ship has already sailed
[11:06] <lizmat> breaking changes could be implemented at a language level
[11:06] *** thundergnat left
[11:07] <Nemokosch> I don't think this is on the "ship has sailed" level; it's too bad to be accepted
[11:07] <Nemokosch> you may say "Failure is Nil" is "the ship has sailed" level but this is even worse
[11:08] <Nemokosch> also, "Failure is Nil" is carefully documented while this is treated as an implementation detail to this very daY
[11:08] *** sena_kun joined
[11:11] <sortiz> In the "Failure is Nil" I can't see the need of a new Type only for some theoretical formality. 
[11:12] <Nemokosch> It was more than "theoretical formality" - Failure broke the semantics of Nil explicitly - but anyway
[11:13] <Nemokosch> if that's a "risky decision", the Match smartmatching is, well, still a hack
[11:16] <Nemokosch> lizmat: re 'string' ~~ /regex/
[11:17] <Nemokosch> I think that wouldn't be affected either way, only m//
[11:17] <lizmat> agree
[11:17] <Nemokosch> m: my $foo = /lol/; say 'trololo' ~~ $foo;
[11:17] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢lol｣␤»
[11:17] <Nemokosch> I suppose it's a plain string ~~ regex smartmatch
[11:18] <lizmat> m: my $foo = /lol/; say $foo.ACCEPTS('trololo')
[11:18] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢lol｣␤»
[11:18] <lizmat> which would be an ACCEPTS not returning a Bool still
[11:19] <Nemokosch> yes but I think it's conceptually well thought-out
[11:19] <Nemokosch> works with given-when in a sensible manner
[11:19] <lizmat> m: my $foo = /lol/; say $foo.ACCEPTS('trodofoo')
[11:19] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «Nil␤»
[11:20] <lizmat> not returning False in that context would also make sense, no ?
[11:20] <Nemokosch> yes, I think so
[11:21] <Nemokosch> and additionally gives something that makes sense outside of boolean context, with regards to string-against-regex
[11:22] <Nemokosch> by the way
[11:23] <Nemokosch> there is some tricky special-casing with smartmatching, isn't it? I mean affecting the topic variable
[11:24] <Nemokosch> that's why the "regex operators" can read the LHS as topic, despite ~~ having lower precedence
[11:25] *** nine left
[11:25] <Nemokosch> which is quite surprising if you just try to parse the syntax
[11:25] *** m_athias left
[11:25] *** nine joined
[11:25] *** m_athias joined
[11:28] <sortiz> Yes, the "topicalization/localization" is inserted by the compiler.
[11:31] <Nemokosch> I wouldn't be surprised if ~~ was full of undiscovered monsters
[11:31] <Nemokosch> I already found something I cannot understand
[11:31] <Nemokosch> m: 'trololo' ~~ 'lmao' ~~ (say 'Hey there!')
[11:31] <camelia> rakudo-moar fa2f35e4e: ( no output )
[11:32] <Nemokosch> it looks like the say should run first but it doesn't run at all
[11:33] <Nemokosch> okay... same with `eqv`. What am I missing?
[11:34] <Nemokosch> perhaps some common sense but still
[11:35] <Nemokosch> are operands always evaluated lazily?
[11:38] <discord-raku-bot> <Anton Antonov> <@755062053282119803> Can we discuss the bug you see here?
[11:40] <Nemokosch> tbrowder: the id may not be telling; Anton asked you
[11:42] <sortiz> A chain of ~~ is terminated at the first False.
[11:42] <discord-raku-bot> <Anton Antonov> <@297037173541175296> Thanks! I guess I have to log in to IRC...
[11:42] <discord-raku-bot> <Nemokosch> I feel you 😄
[11:45] <Nemokosch> sortiz: oh okay thanks
[11:46] *** antononcube joined
[11:46] <antononcube> tbrowder Can we discuss the bug you see in Markdown::Grammar here?
[11:48] <Nemokosch> m: 'trololo' ~~ 'trololo' ~~ (say m/lol/)
[11:48] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤Nil␤  in block <unit> at <tmp> line 1␤»
[11:49] <Nemokosch> this is also interesting. Not realistic, I know, but I wonder what happened
[11:49] <Nemokosch> I expected $_ to be something at least
[11:59] *** lichtkind_ left
[12:01] <sortiz> m: say 'trololo' ~~ /lol/ ~~ /o/
[12:01] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢o｣␤»
[12:02] <sortiz> m: 'trololo' ~~ /lol/ ~~ $_.say
[12:02] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢lol｣␤»
[12:02] <sortiz> The chain is for Regexes.
[12:05] *** simcop2387_ joined
[12:05] *** simcop2387 left
[12:06] *** perlbot left
[12:06] *** simcop2387_ left
[12:07] *** simcop2387 joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:11] *** perlbot joined
[12:17] <tbrowder> antononcube: yes. did you see my addition to the issue this morning?
[12:18] <antononcube> tbrowder Yes -- thank you! I responded : https://github.com/antononcube/Raku-Markdown-Grammar/issues/3#issuecomment-1303300381
[12:20] *** Kaipei joined
[12:20] <tbrowder> that is strange. are you sure the fix got into your last release?
[12:21] <tbrowder> with zef i uninstalled all versions and then installed the latest
[12:22] *** irc_user joined
[12:22] <antononcube> Oh! Sorry -- it is not in zef / raku.land yet. My responses are with the code in the repository.
[12:23] <tbrowder> ah! ok, that explains it. i
[12:23] <antononcube> I have to finish another "fix" and I will upload to raku.land. I hope that will happen within one hour.
[12:24] <tbrowder> i'll wait for the release,  and i do think the EVAL test would be useful (don't forget about the MONKEY* pragma
[12:26] <tbrowder> and don't rush for me, not in a great hurry--just glad i'm not going crazy yet!
[12:26] <tbrowder> thanks, bye
[12:29] <antononcube> tbrowder Ok, sounds good. :)
[12:29] <lizmat> weekly: https://dev.to/lizmat/dont-fear-the-grepper-6-4i
[12:29] <notable6> lizmat, Noted! (weekly)
[12:31] <Nemokosch> sortiz: that's exactly what I mean by "undiscovered monsters" :)
[12:32] <sortiz> Please remember that the documentation is a voluntary effort. :)
[12:32] <antononcube> lizmat Another gripper article !? I liked the fact that those articles were exactly 5.
[12:33] <lizmat> hehe...  well, 6 still has a special meaning to Camelia  :-)
[12:34] <lizmat> it's still on one of her wings  :-)
[12:34] <antononcube> While studying mathematics we were told the maxim: "It is better to solve one problem in five different ways, than solve five different problems in the same way."
[12:35] <lizmat> so who proved that 6 different ways weren't better ?  :-)
[12:35] <lizmat> at least that's the product of 2 primes!
[12:37] <antononcube> It is a perfect number : the sum of its devisors make it.
[12:39] <Nemokosch> sortiz: fair point about the documentation but please also keep in mind that documentation can't change a bug into a feature
[12:40] <lizmat> .oO(I thought that was the definition of a documented bug?)
[12:40] <Nemokosch> I tend to refer to esoteric languages; "esoteric" doesn't mean "undocumented", yet we want to avoid that group
[12:41] <Nemokosch> lizmat: only in the joke :D
[12:42] *** lichtkind joined
[12:45] *** derpydoo joined
[12:55] *** habere-et-disper joined
[12:57] <Nemokosch> I'm still thinking what to think about the immediate topicalization with ~~
[12:58] <Nemokosch> I wouldn't say it's a bug but it does seem like the kind of peculiarity that works against the decoupling of the Raku language and Rakudo in particular
[12:59] *** razetime left
[12:59] <tbrowder> .tell tonyo: if you plan to close those pending fixes in CSV::Parser, i will abandon my simple csv parser.
[12:59] <tellable6> tbrowder, I'll pass your message to tonyo
[13:00] *** habere-et-disper left
[13:00] <lizmat> afk&
[13:00] <Nemokosch> tbrowder: CSV-AutoClass?
[13:03] <sortiz> $_ is magical, all "topicalizers" are especially handled. Remember that, by default, every scope has its own $_
[13:05] <Nemokosch> Yes but perhaps violating the apparent syntax is a different thing
[13:06] <Nemokosch> it's not that ~~ sets the topic variable, it's that it sets before its precedence
[13:06] <Nemokosch> Now that you brought $_ scoping up, I have a bonus issue for you: https://github.com/rakudo/rakudo/issues/5004
[13:11] <sortiz> It is set around its LHS evaluation. And yes, in Raku any "operator" can change the context of its "operands" evaluation.
[13:13] <Nemokosch> oh you may be right, moment...
[13:13] <Nemokosch> my test was probably bad
[13:14] <Nemokosch> okay, my fault, it's set at a sensible moment
[13:14] <Nemokosch> confer
[13:14] <Nemokosch> m: 'asd' ~ '123' ~~ (say m/d1/)
[13:14] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢d1｣␤»
[13:14] <Nemokosch> that is, executed after the LHS is ready
[13:15] <sortiz> Think of 'foo ~~ bar' as 'infix:<~~>($_ = foo, bar)' but with $_ "localized"
[13:15] <Nemokosch> one could say, it's the first step of executing ~~
[13:16] <Nemokosch> and the operands are lazy
[13:16] <Nemokosch> that's also an important thing
[13:16] <sortiz> As I said in your "issue"... 
[13:17] <Nemokosch> you did say "localized" but we didn't talk about operands being lazy at all
[13:19] <Nemokosch> (also you didn't check the current behavior yourself; I still feel something was missing from your side as well, regarding the communication)
[13:23] <sortiz> Why "lazy"? All "operands" must be evaluated before the "operator", so when the RHS is evaluated the topicalizer is ready.
[13:24] *** jjido joined
[13:27] <Nemokosch> if operands were evaluated before the operator, an m// would disregard the LHS and use the original $_
[13:28] *** discord-raku-bot left
[13:28] *** discord-raku-bot joined
[13:29] <Nemokosch> m: 'asd' ~ '123' ~~ (say m/d1/)
[13:29] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «｢d1｣␤»
[13:29] <Nemokosch> this was the final proof that's not the case
[13:32] <sortiz> m: 'asd' ~ ('123' ~~ (say m/d1/)) # Precedence?
[13:32] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «WARNINGS for <tmp>:␤Nil␤Useless use of "~" in expression "'asd' ~ ('123' ~~ (say m/d1/))" in sink context (line 1)␤»
[13:32] *** Sauvin left
[13:35] *** Sauvin joined
[13:44] <antononcube> How quotes are specified in Pod6? Something like "= para Quote" or, say, "=begin quote" ... "=end" ?
[13:48] *** Sgeo joined
[13:52] <sortiz> m: say 1 + 2 ~~ 6 - $_ # Can be expected, no?
[13:52] <camelia> rakudo-moar fa2f35e4e: OUTPUT: «True␤»
[13:55] *** jjido left
[13:59] *** antononcube left
[14:07] *** derpydoo left
[14:13] <Nemokosch> that order of evaluation is infix?
[14:17] <Nemokosch> Actually, I think the issue is exactly that it cannot be expected, not that it's absurd or anything
[14:18] <Nemokosch> it's an "outsmart-match"
[14:20] *** derpydoo joined
[14:24] *** discord-raku-bot left
[14:24] *** discord-raku-bot joined
[14:24] *** rir joined
[14:27] *** Nemokosch left
[14:27] *** Nemokosch joined
[14:28] <rir> How can a unprinted comment be added to a .pod6  file in Raku/doc?
[14:30] *** razetime joined
[14:36] <Nemokosch> so you mean it doesn't generate any output?
[15:03] <rir> @razetime, yes.
[15:03] <razetime> is that a respose to the ⍺⍵ question?
[15:04] <rir> @razetime, Sorry, that was misdirected.
[15:04] <razetime> ah, ok.
[15:04] <rir> Nemokosch> Yes.
[15:06] <Nemokosch> https://docs.raku.org/language/pod#Pod6_comments
[15:06] <Nemokosch> did this not work?
[15:07] <rir> Nemokosch> Thanks, I'll get rtfming.
[15:09] <Nemokosch> not a big POD6 expert myself :D
[15:18] <Nemokosch> bisectable6: my @test = 1..*; try dd @test; $!.message.say;
[15:18] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight
[15:19] <bisectable6> Nemokosch, Output on all releases: https://gist.github.com/8f8c79094f8124f1787b8079b3715647
[15:19] <bisectable6> Nemokosch, More than 4 changes to bisect, please try a narrower range like old=2021.03 new=HEAD
[15:19] <Geth> ¦ advent: pheix++ created pull request #96: Update authors.md
[15:19] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/96
[15:21] <Nemokosch> bisectable6: old=2020.12 new=HEAD my @test = 1..*; try dd @test; $!.message.say;
[15:21] <bisectable6> Nemokosch, Bisecting by output (old=2020.12 new=c704d97) because on both starting points the exit code is 0
[15:22] <bisectable6> Nemokosch, (2021-04-01) https://github.com/rakudo/rakudo/commit/71960b162d244cc077654f5abb3fd3aecc4e9c8c
[15:22] <bisectable6> Nemokosch, bisect log: https://gist.github.com/43a064dc48b9f5a765eb1820795fb9a0
[15:24] *** Nemokosch left
[15:38] <[Coke]> git question: any idea why 'git pull --prune' would keep reporting the same branches deleted every time (and also the same new branches created), Shouldn't I be able to run this twice and basically get a silent run the second time? (yes, I'm on windows)
[15:42] <[Coke]> ah. might be due to things like branches with /Feature/branch1 vs. /feature/branch2 (part of the "path" is different-cased, even though there are no branches specifically that differ only by case. Ugh.)
[15:53] <Geth> ¦ advent: 044e316318 | Kostas++ (committed using GitHub Web editor) | raku-advent-2022/authors.md
[15:53] <Geth> ¦ advent: Update authors.md (#96)
[15:53] <Geth> ¦ advent: 
[15:53] <Geth> ¦ advent: 1. pheix: Trove testing suite — yet another TAP harness
[15:53] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/044e316318
[16:02] *** razetime left
[16:02] *** razetime joined
[16:05] <[Coke]> if I have "/this/that/other" and %foo{bar}, is there an easy way to make %foo{bar}{this}{that}{other} ?
[16:06] <[Coke]> I can get to <this that other> easily, but not sure how to then approach the nested hash.
[16:06] <[Coke]> er, I mean %foo<bar><this><that><other>, of course.
[16:13] <discord-raku-bot> <Nemokosch> v6.e has ||
[16:15] *** Nemokosch joined
[16:16] <Nemokosch> m: use v6.e.PREVIEW; my \bar = "lol"; my %foo; %foo<bar>{||<this that other>} = "demo"; dd %foo;
[16:16] <camelia> rakudo-moar c704d9779: OUTPUT: «Hash %foo = {:bar(${:this(${:that(${:other("demo")})})})}␤»
[16:16] <Nemokosch> [Coke] ^ what about this?
[16:22] *** Nemokosch left
[16:22] *** derpydoo left
[16:24] *** abraxxa-home joined
[16:28] *** abraxxa-home left
[16:30] *** abraxxa-home joined
[16:36] *** abraxxa-home left
[16:37] *** abraxxa-home joined
[16:44] *** abraxxa-home left
[16:45] *** derpydoo joined
[16:46] *** abraxxa-home joined
[17:11] *** sortiz left
[17:12] *** razetime left
[17:31] *** Kaipei left
[18:06] *** reportable6 left
[18:09] *** reportable6 joined
[18:12] *** sena_kun left
[18:19] *** habere-et-disper joined
[18:35] <tbrowder> Nemokosch: no, it’s unpublished, and probably not needed (CSV::Parser::Simple)
[18:35] <tellable6> tbrowder, I'll pass your message to Nemokosch
[18:38] *** bigdata joined
[18:46] *** jjido joined
[18:46] *** sena_kun joined
[18:56] *** derpydoo left
[19:01] *** jjido left
[19:02] *** Kaipei joined
[19:17] *** derpydoo joined
[19:42] *** bigdata left
[19:44] *** linkable6 left
[19:45] *** linkable6 joined
[20:05] *** peder left
[20:08] *** peder joined
[20:23] <rir> m: my %h; %h<bar> = [=>] <a b c>;
[20:23] <camelia> rakudo-moar 2037ffbac: ( no output )
[20:24] <rir> m: my %h; %h<bar> = [=>] <a b c>; %h.say;
[20:24] <camelia> rakudo-moar 2037ffbac: OUTPUT: «{bar => a => b => c}␤»
[20:24] <rir> coke ^
[20:44] *** Kaipei left
[20:44] *** japhb left
[20:44] *** japhb joined
[20:45] <guifa_> tonyo ugexe is there a size limit for fez?  
[20:46] <guifa_> i uploaded a new one and fez gave me a success message, but it dosn't pul up on raku.land (but I also didn't get an error message)
[20:50] <[Coke]> Nemokosch++ rir++
[21:08] <discord-raku-bot> <Nemokosch> rir wow, that's also an interesting solution
[21:12] *** rir left
[21:18] *** rir joined
[21:26] *** discord-raku-bot left
[21:27] *** discord-raku-bot joined
[21:31] *** discord-raku-bot left
[21:31] *** discord-raku-bot joined
[21:39] *** Kaipei joined
[21:40] *** abraxxa-home left
[21:41] *** sjn left
[22:01] *** sortiz joined
[22:04] *** derpydoo left
[22:11] <sortiz> m: my %foo; reduce -> $h, $k { $h{$k} = {}; $h{$h.keys[0]} }, %foo, |<bar this that other>; say %foo; # [Coke]
[22:11] <camelia> rakudo-moar 2037ffbac: OUTPUT: «{bar => {this => {that => {other => {}}}}}␤»
[22:19] *** sjn joined
[22:45] *** jjido joined
[22:48] *** sena_kun left
[23:01] <gfldex> I had a look at Erlang today. Wouldn't be surprised when they sue us. :->
[23:02] *** habere-et-disper left
[23:04] <discord-raku-bot> <Nemokosch> I don't think Erlang was very similar but it seemed like a decent language
