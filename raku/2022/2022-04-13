[00:00] *** rbt joined
[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[01:08] *** reportable6 left
[01:08] *** statisfiable6 left
[01:08] *** committable6 left
[01:08] *** sourceable6 left
[01:08] *** linkable6 left
[01:08] *** benchable6 left
[01:08] *** quotable6 left
[01:08] *** bloatable6 left
[01:08] *** nativecallable6 left
[01:08] *** bisectable6 left
[01:08] *** unicodable6 left
[01:08] *** evalable6 left
[01:08] *** releasable6 left
[01:08] *** greppable6 left
[01:08] *** notable6 left
[01:08] *** shareable6 left
[01:08] *** coverable6 left
[01:08] *** evalable6 joined
[01:09] *** reportable6 joined
[01:09] *** coverable6 joined
[01:09] *** shareable6 joined
[01:10] *** bisectable6 joined
[01:10] *** bloatable6 joined
[01:10] *** benchable6 joined
[01:10] *** nativecallable6 joined
[01:10] *** committable6 joined
[01:10] *** greppable6 joined
[01:10] *** linkable6 joined
[01:11] *** quotable6 joined
[01:11] *** sourceable6 joined
[01:11] *** notable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** releasable6 joined
[01:11] *** unicodable6 joined
[01:49] <tbrowder> hi, i just started a new module repo on github: YahooFinance. it has no code yet, but the README descibes its intent. please add issues for features you might use.
[01:50] <tbrowder> sorry, the module name is "YahooFunds"
[02:02] *** m_athias left
[02:02] *** m_athias joined
[02:06] *** rbt left
[02:06] *** rbt joined
[02:10] *** Sgeo left
[02:15] *** Sgeo joined
[02:19] *** frost joined
[02:45] <drakonis> seems alright
[02:48] *** jason joined
[02:48] <jason> hello
[02:48] <jason> anyone here ?
[02:51] <drakonis> hi?
[02:53] <jason> I'm here to learn about Raku
[02:53] <drakonis> there's guides for that
[02:53] <jason> I have a presentation to do about it next week
[02:53] <jason> can you refer me to ?
[02:54] <drakonis> https://raku.org/resources/
[02:54] <drakonis> start here
[02:54] <drakonis> https://docs.raku.org/language.html then there's this, i guess?
[02:54] <jason> thank you very much
[02:54] <jason> I'm gonna try to start now
[02:55] <jason> thanks <3
[03:18] *** euandreh left
[03:19] *** euandreh joined
[03:30] *** Guest35 left
[03:36] *** rbt left
[03:36] *** rbt joined
[03:46] *** rbt left
[03:46] *** rbt joined
[04:12] *** rbt left
[04:12] *** rbt joined
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: 34d11ff626 | dependabot[bot]++ (committed using GitHub Web editor) | package-lock.json
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: Bump minimist from 1.2.5 to 1.2.6
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: 
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: Bumps [minimist](https://github.com/substack/minimist) from 1.2.5 to 1.2.6.
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: - [Release notes](https://github.com/substack/minimist/releases)
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: - [Commits](https://github.com/substack/minimist/compare/1.2.5...1.2.6)
[04:14] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: 
[04:15] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: ---
[04:15] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: <…commit message has 6 more lines…>
[04:15] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/minimist-1.2.6: review: https://github.com/Raku/setup-raku/commit/34d11ff626
[04:15] <Geth> ¦ setup-raku: dependabot[bot]++ created pull request #21: Bump minimist from 1.2.5 to 1.2.6
[04:15] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/pull/21
[04:17] *** rbt left
[04:17] *** rbt joined
[04:22] *** rbt left
[04:22] *** rbt joined
[04:33] *** rbt left
[04:42] <Geth> ¦ setup-raku: 34d11ff626 | dependabot[bot]++ (committed using GitHub Web editor) | package-lock.json
[04:42] <Geth> ¦ setup-raku: Bump minimist from 1.2.5 to 1.2.6
[04:42] <Geth> ¦ setup-raku: 
[04:42] <Geth> ¦ setup-raku: ---
[04:42] <Geth> ¦ setup-raku: Bumps [minimist](https://github.com/substack/minimist) from 1.2.5 to 1.2.6.
[04:42] <Geth> ¦ setup-raku: - [Release notes](https://github.com/substack/minimist/releases)
[04:42] <Geth> ¦ setup-raku: - [Commits](https://github.com/substack/minimist/compare/1.2.5...1.2.6)
[04:42] <Geth> ¦ setup-raku: 
[04:43] <Geth> ¦ setup-raku: ---
[04:43] <Geth> ¦ setup-raku: <…commit message has 6 more lines…>
[04:43] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/34d11ff626
[04:43] <Geth> ¦ setup-raku: 5e67ccf1b8 | (Shoichi Kaji)++ (committed using GitHub Web editor) | package-lock.json
[04:43] <Geth> ¦ setup-raku: Merge pull request #21 from Raku/dependabot/npm_and_yarn/minimist-1.2.6
[04:43] <Geth> ¦ setup-raku: 
[04:43] <Geth> ¦ setup-raku: Bump minimist from 1.2.5 to 1.2.6
[04:43] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/5e67ccf1b8
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: d901934774 | dependabot[bot]++ (committed using GitHub Web editor) | package-lock.json
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: Bump ansi-regex from 3.0.0 to 3.0.1
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: 
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: Bumps [ansi-regex](https://github.com/chalk/ansi-regex) from 3.0.0 to 3.0.1.
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: - [Release notes](https://github.com/chalk/ansi-regex/releases)
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: - [Commits](https://github.com/chalk/ansi-regex/compare/v3.0.0...v3.0.1)
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: 
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: ---
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: <…commit message has 6 more lines…>
[04:43] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/ansi-regex-3.0.1: review: https://github.com/Raku/setup-raku/commit/d901934774
[04:43] <Geth> ¦ setup-raku: dependabot[bot]++ created pull request #22: Bump ansi-regex from 3.0.0 to 3.0.1
[04:43] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/pull/22
[04:46] *** xinming left
[04:48] *** xinming joined
[04:59] *** lichtkind_ joined
[05:01] <Geth> ¦ setup-raku: d901934774 | dependabot[bot]++ (committed using GitHub Web editor) | package-lock.json
[05:01] <Geth> ¦ setup-raku: Bump ansi-regex from 3.0.0 to 3.0.1
[05:01] <Geth> ¦ setup-raku: 
[05:01] <Geth> ¦ setup-raku: Bumps [ansi-regex](https://github.com/chalk/ansi-regex) from 3.0.0 to 3.0.1.
[05:01] <Geth> ¦ setup-raku: - [Release notes](https://github.com/chalk/ansi-regex/releases)
[05:01] <Geth> ¦ setup-raku: - [Commits](https://github.com/chalk/ansi-regex/compare/v3.0.0...v3.0.1)
[05:01] <Geth> ¦ setup-raku: 
[05:01] <Geth> ¦ setup-raku: ---
[05:01] <Geth> ¦ setup-raku: <…commit message has 6 more lines…>
[05:01] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/d901934774
[05:01] <Geth> ¦ setup-raku: a8b636c9f2 | (Shoichi Kaji)++ (committed using GitHub Web editor) | package-lock.json
[05:01] <Geth> ¦ setup-raku: Merge pull request #22 from Raku/dependabot/npm_and_yarn/ansi-regex-3.0.1
[05:01] <Geth> ¦ setup-raku: 
[05:01] <Geth> ¦ setup-raku: Bump ansi-regex from 3.0.0 to 3.0.1
[05:01] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/a8b636c9f2
[05:16] *** Util left
[05:16] *** Util joined
[05:34] *** zacts joined
[05:34] *** zacts left
[05:48] *** rbt joined
[06:00] *** Sgeo left
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:43] *** mexen joined
[06:54] *** moon-child left
[06:54] *** moon-child joined
[07:13] *** dakkar joined
[07:40] *** jason left
[08:40] *** notable6 left
[08:40] *** greppable6 left
[08:40] *** sourceable6 left
[08:40] *** bloatable6 left
[08:40] *** committable6 left
[08:40] *** coverable6 left
[08:40] *** shareable6 left
[08:40] *** unicodable6 left
[08:40] *** benchable6 left
[08:40] *** evalable6 left
[08:40] *** reportable6 left
[08:40] *** nativecallable6 left
[08:40] *** quotable6 left
[08:40] *** releasable6 left
[08:40] *** statisfiable6 left
[08:40] *** linkable6 left
[08:40] *** bisectable6 left
[08:40] *** notable6 joined
[08:40] *** unicodable6 joined
[08:41] *** benchable6 joined
[08:41] *** committable6 joined
[08:41] *** linkable6 joined
[08:41] *** bloatable6 joined
[08:42] *** quotable6 joined
[08:42] *** shareable6 joined
[08:42] *** bisectable6 joined
[08:42] *** releasable6 joined
[08:42] *** greppable6 joined
[08:42] *** statisfiable6 joined
[08:42] *** reportable6 joined
[08:43] *** coverable6 joined
[08:43] *** nativecallable6 joined
[08:43] *** _________ left
[08:43] *** sourceable6 joined
[08:43] *** rbt left
[08:44] *** evalable6 joined
[08:54] *** rbt joined
[09:19] *** sena_kun left
[09:20] *** sena_kun joined
[09:35] *** Manifest0 left
[09:40] *** frost left
[09:41] *** Manifest0 joined
[09:42] *** fluca1978 left
[09:45] *** frost joined
[09:56] <patrickb> o/
[09:56] <patrickb> m: my $a = "AsDf"; $a .= lc.uc; say $a;
[09:56] <camelia> rakudo-moar 530e17848: OUTPUT: «asdf␤»
[09:58] <patrickb> I'm WATed by the `=` in `.=` having higher precedence than `.`. I.e. `$a .= foo.bar` is not equivalent to `$a = $a.foo.bar`.
[09:58] <patrickb> I found no test for this in roast.
[10:00] <patrickb> Is there consensus that this is intended bahavior? (Then I'm inclined to add a respective test to roast.) Or could this classify as a bug?
[10:00] <lizmat> m: my $a = "AsDf"; say $a .= lc.uc; say $a;
[10:00] <camelia> rakudo-moar 530e17848: OUTPUT: «ASDF␤asdf␤»
[10:01] <lizmat> perhaps moritz has an idea about the thoughts behind this
[10:01] *** sena_kun left
[10:01] <lizmat> patrickb: I seem to recall there's an (old) issue for this already though
[10:02] <patrickb> If I understand the current behavior correctly, it's equivalent to `($a = $a.lc).uc`
[10:02] *** fitchett joined
[10:02] *** sena_kun joined
[10:14] *** rbt left
[10:14] *** rbt joined
[10:21] <gfldex> patrickb: how would you this to behave? https://gist.github.com/gfldex/fa28c25db4bb8d639f8f358deb7215ae
[10:23] <discord-raku-bot> <Nemokosch#9980> this is the same with more whitespace...
[10:23] <gfldex> aye
[10:23] <gfldex> But it looks different to me. Rakudo doesn't care how it looks ofc.
[10:23] <lizmat> actually, there is a semantic difference
[10:24] <patrickb> gfldex: From my feeling I'd still expect it to behave the same as `$a = $a.lc.uc`.
[10:24] <patrickb> My feelings are OK with being wrong. :-)
[10:24] <lizmat> m: no worries; say ^10.elems
[10:24] <camelia> rakudo-moar 530e17848: OUTPUT: «^1␤»
[10:24] <lizmat> m: no worries; say ^10. elems
[10:24] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Decimal point must be followed by digit␤at <tmp>:1␤------> no worries; say ^10.⏏ elems␤»
[10:24] <lizmat> m: no worries; say ^10 .elems
[10:24] <camelia> rakudo-moar 530e17848: OUTPUT: «10␤»
[10:25] <discord-raku-bot> <Nemokosch#9980> you could do this with any operator lmao
[10:25] <discord-raku-bot> <Nemokosch#9980> my $blah = 1
[10:25] <discord-raku-bot> <Nemokosch#9980>      + 2;
[10:25] <lizmat> but the whitespace .method has a lowed precedence than the no-whitespace.method
[10:25] *** wingfold joined
[10:25] <lizmat> *lower
[10:26] <patrickb> m: my $a = 0; $a += 1 + 1; $a
[10:26] <camelia> rakudo-moar 530e17848: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤»
[10:26] <patrickb> m: my $a = 0; $a += 1 + 1; say $a
[10:26] <camelia> rakudo-moar 530e17848: OUTPUT: «2␤»
[10:26] <patrickb> m: my $a = 0; ($a += 1) + 1; say $a
[10:26] <camelia> rakudo-moar 530e17848: OUTPUT: «WARNINGS for <tmp>:␤1␤Useless use of "+" in expression "($a += 1) + 1" in sink context (line 1)␤»
[10:27] <patrickb> m: my $a = 0; so ($a += 1) + 1; say $a
[10:27] <camelia> rakudo-moar 530e17848: OUTPUT: «WARNINGS for <tmp>:␤1␤Useless use of "so " in expression "so ($a += 1) +" in sink context (line 1)␤»
[10:27] <patrickb> m: my $a = 0; say ($a += 1) + 1; say $a
[10:27] <camelia> rakudo-moar 530e17848: OUTPUT: «2␤1␤»
[10:27] <discord-raku-bot> <Nemokosch#9980> this is a serious enough inconsistency (I hope)
[10:29] <discord-raku-bot> <Nemokosch#9980> although I thought the same at least 3 times so far and I failed to even get it acknowledged that the behavior is undesirable...
[10:29] <patrickb> Neither searching for "precedence" nor "assignment" surfaced any related bugs in rakudo/rakudo and Raku/old-issue-tracker.
[10:29] <patrickb> Should I rakudobug?
[10:30] <gfldex> Please do. It it is desired, it's an ENODOC (maybe in the traps section).
[10:32] <discord-raku-bot> <Nemokosch#9980> the thing is, it often feels like the traps section is a result of someone being in love with some bad decision from 8 years ago...
[10:33] <discord-raku-bot> <Nemokosch#9980> anyway, good luck to @patrickb
[10:36] *** zacts joined
[10:43] <Voldenet> m: my $a = "AsDf"; $a .= uc.say;
[10:43] <camelia> rakudo-moar 530e17848: OUTPUT: «ASDF␤»
[10:43] <Voldenet> I wonder if someone uses this syntax
[10:44] <discord-raku-bot> <Nemokosch#9980> both precedences would give the same result
[10:44] <Voldenet> actually, $a could be True or 'ASDF'
[10:44] *** Altai-man joined
[10:47] <Voldenet> m: my $a = "asdf"; $a .= subst('a', 'b') .= subst('d', 'e'); say $a
[10:47] <camelia> rakudo-moar 530e17848: OUTPUT: «bsef␤»
[10:49] <Voldenet> m: my $a = 0; $a += 1 += 1; say $a
[10:49] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot modify an immutable Int (1)␤  in block <unit> at <tmp> line 1␤␤»
[10:49] <discord-raku-bot> <Nemokosch#9980> I don't know then why I remembered that say does return the string
[10:50] <patrickb> Rakudobuged: https://github.com/rakudo/rakudo/issues/4863
[10:50] <discord-raku-bot> <Nemokosch#9980> anyway, if you wish the lower precedence, you could still use `andthen`
[10:51] <Voldenet> in non-golf code I generally try to avoid syntax that is not obvious
[10:51] <discord-raku-bot> <Nemokosch#9980> I almost never wish `andthen` to have lower precedence than the assignment but that makes sense at least
[10:51] <discord-raku-bot> <Nemokosch#9980> "obvious" depends on what you know though
[10:52] <discord-raku-bot> <Nemokosch#9980> like I'd say it's obvious what (@a, @b) = (@b, @a) should do
[10:52] <discord-raku-bot> <Nemokosch#9980> and it does something devilish instead
[10:53] <Voldenet> In this case obvious is the one that is in wide use
[10:53] <discord-raku-bot> <Nemokosch#9980> it would be obvious - if it worked
[10:53] <discord-raku-bot> <Nemokosch#9980> the reason to avoid it isn't that it's "not obvious" but that it does something you'd never want
[10:56] <discord-raku-bot> <Nemokosch#9980> then I don't really see the point
[10:56] <Voldenet> Okay, I must agree, the syntax `$a .= something.say` is terribly obscure
[10:56] <Voldenet> and I doubt anyone sane would try using it
[10:57] <Voldenet> It's obvious what `my Something $a .= new.with-a.with-b(2)` can be expected to do
[10:58] <discord-raku-bot> <Nemokosch#9980> I for one would expect it to be `$a = ($a.something.say)`
[10:58] <discord-raku-bot> <Nemokosch#9980> and if it works, I would even assume it to be because of the return value of say
[10:58] <discord-raku-bot> <Nemokosch#9980> which would be apparently a wrong assumption
[10:59] <patrickb> Different topic: I have an environment where this fails `zef install "Inline::Perl5:ver<0.59>:auth<cpan:NINE>"` but this succeeds `zef install "Inline::Perl5:ver<0.59>:auth<github:niner>"`. And in a second environment of mine the opposite is true.
[11:00] <patrickb> Which of the two is correct? (Inline::Perl5 is currently provided on CPAN, but lists github:niner in it's META6.json)
[11:07] <Voldenet> the one that works
[11:08] <gfldex> patrickb: we don't really have a spec for META6.json. So it doesn't make sense but is not wrong.
[11:09] *** rbt left
[11:14] <Voldenet> btw, 
[11:14] <Voldenet> cpan1.json doesn't seem to have `Inline::Perl5:ver<0.59>:auth<cpan:NINE>`
[11:16] <patrickb> Voldenet: Both work and fail depending on which rakudo environment I use.
[11:20] <Voldenet> Hmm, which cpan mirror is used by `zef update`?
[11:25] *** rbt joined
[11:26] <lizmat> Voldenet: that's in zef's configuration
[11:27] <lizmat> generally ~/.config/zef/config.json
[11:35] *** rbt left
[11:35] *** rbt joined
[11:36] <Voldenet> So I see that in https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json it's pretty rare for cpan authors to use `auth<cpan:…>`
[11:46] <Voldenet> `auth` doesn't seem to contain anything useful at all
[11:52] <lizmat> well... I guess it *is* now really time for me to write that blog post about the future of the Raku ecosystems
[11:58] *** zacts left
[12:06] *** frost left
[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[12:29] <El_Che> ecosystems
[12:29] <El_Che> mmm :)
[13:10] *** evalable6 left
[13:10] *** linkable6 left
[13:12] *** frost joined
[13:12] *** linkable6 joined
[13:13] *** evalable6 joined
[13:20] *** rbt left
[13:21] *** rbt joined
[13:26] *** rbt left
[13:26] *** rbt joined
[13:28] *** zacts joined
[13:31] *** Guest35 joined
[13:35] *** jjido joined
[13:45] *** melezhik joined
[13:45] *** dogbert17 left
[13:45] <melezhik> .
[13:51] *** melezhik left
[13:57] <[Coke]> bash: .: filename argument required
[14:02] *** frost left
[14:02] *** dogbert17 joined
[14:03] *** Sgeo joined
[14:04] *** melezhik joined
[14:06] *** melezhik left
[14:31] *** rbt left
[14:55] *** dogbert11 joined
[14:57] *** dogbert17 left
[15:00] *** guifa left
[15:06] *** guifa joined
[15:11] *** _________ joined
[15:28] *** MasterDuke left
[15:41] *** rbt joined
[15:51] *** rbt left
[15:52] *** fitchett left
[16:03] *** dakkar left
[16:05] <[Coke]> wonder if we support https://boingboing.net/2022/04/13/the-mystery-of-%e2%8d%bc-a-unicode-character-of-unknown-purpose.html
[16:06] <[Coke]> m: say "\c[RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW]" # of course we do
[16:06] <camelia> rakudo-moar 530e17848: OUTPUT: «⍼␤»
[16:06] <[Coke]> weekly https://boingboing.net/2022/04/13/the-mystery-of-%e2%8d%bc-a-unicode-character-of-unknown-purpose.html with a note that of course we support even this weirdo character.
[16:07] <[Coke]> weekly:  https://boingboing.net/2022/04/13/the-mystery-of-%e2%8d%bc-a-unicode-character-of-unknown-purpose.html with a note that of course we support even this weirdo character.
[16:07] <notable6> [Coke], Noted! (weekly)
[16:09] *** zacts left
[16:12] *** rbt joined
[16:22] *** jjido left
[16:37] *** rbt left
[16:40] *** jjido joined
[16:41] *** Xliff joined
[16:42] <japhb> That was weird and interesting, thanks [Coke] 
[16:42] <Xliff> Is it possible to do regex recursion without a grammar?
[16:47] <Util> Xliff: This says yes: https://docs.raku.org/language/regexes#Recursive_Regexes
[16:48] <El_Che> but your eyes say no?
[16:48] <El_Che> also: the hips don't lie
[16:48] <japhb> m: my regex foo { '(' ~ ')' [ <~~> | a+ ] }; say '(((aaa)))' ~~ /<foo>/
[16:48] <camelia> rakudo-moar 530e17848: OUTPUT: «｢(((aaa)))｣␤ foo => ｢(((aaa)))｣␤»
[16:49] <japhb> Interesting, the recursion doesn't become extra match levels
[16:57] <Xliff> Util++
[16:58] *** jjido left
[16:58] *** razetime joined
[17:00] *** jjido joined
[17:07] *** djerius left
[17:09] *** djerius joined
[17:12] *** razetime left
[17:13] *** mexen left
[17:18] *** Altai-man left
[17:30] <guifa> m: my regex foo { '(' ~ ')' [ $<b>=<~~> | a+ ] }; say '(((aaa)))' ~~ /<foo>/
[17:30] <camelia> rakudo-moar 530e17848: OUTPUT: «｢(((aaa)))｣␤ foo => ｢(((aaa)))｣␤  b => ｢((aaa))｣␤   b => ｢(aaa)｣␤»
[17:30] <guifa> m: my regex foo { '(' ~ ')' [ $<foo>=<~~> | a+ ] }; say '(((aaa)))' ~~ /<foo>/
[17:30] <camelia> rakudo-moar 530e17848: OUTPUT: «｢(((aaa)))｣␤ foo => ｢(((aaa)))｣␤  foo => ｢((aaa))｣␤   foo => ｢(aaa)｣␤»
[17:31] <guifa> japhb: ^^  I mean, easily enough solved :-) 
[17:51] *** dogbert17 joined
[17:53] *** dogbert11 left
[18:02] <japhb> guifa: Oh sure, I just was a bit surprised it does not form a capture layer by *default*.
[18:06] *** discord-raku-bot left
[18:06] *** discord-raku-bot joined
[18:08] *** reportable6 left
[18:11] *** reportable6 joined
[18:13] *** rbt joined
[18:17] *** wingfold left
[18:21] *** sena_kun left
[18:23] *** sena_kun joined
[18:24] *** sena_kun left
[18:26] *** sena_kun joined
[18:27] *** dogbert11 joined
[18:28] *** dogbert17 left
[18:39] *** ugexe joined
[18:39] <ugexe> hello! does anyone work in a production environment where it is not considered bad form to commit to master?
[18:40] <ugexe> i'm curious if the places i've worked have been particularly strict, or if thats a normal thing
[18:44] <jast> seems pretty normal to me
[18:44] <jast> at my work place, all changes go through code review
[18:45] <ugexe> right, that is what i would expect
[18:45] <jast> we do merge PRs directly to master after review, but that's not the normal case, it's really only for emergency fixes after a release
[18:45] <jast> most PRs go to development or hotfix (which we release about once per week)
[18:46] <jast> in any case the master branch is marked as "protected" so only the owner can push directly to it. I have production access everywhere but I'd still need a review to get something onto master.
[18:47] <ugexe> what do you do with broken commits that are fixed in later commits? do you merge the broken commits into master or do they generally get squashed away before that?
[18:47] <lizmat> jast: how many people do reviews ?
[18:48] <jast> so many questions at once :)
[18:48] *** MasterDuke joined
[18:48] <jast> we don't have a super formalized process really
[18:49] <jast> pretty much all developers do reviews on a regular basis, how many reviews we do on a single PR depends on its complexity (or the potential fallout)
[18:49] <jast> reviews will tend to go to the person most familiar with that part of the code base (PR's author excluded)
[18:50] <jast> as for how fixes are handled... to start off with, when a PR gets merged, most of the time it will be squashed, except for really complex changes. I'm not entirely on board with this approach but I don't mind it *that* much, and it definitely beats merging a mess of commits made with poor hygiene
[18:51] <jast> if a problem is caught before that happens, it'll just end up squashed together
[18:51] <jast> otherwise it depends on how far along the release and QA gauntlet we are
[18:52] <ugexe> thanks for the explanation, that pretty much aligns with my experiences as well fwiw
[18:52] <jast> if we haven't frozen the development branch yet, a simple follow-up PR to development. if we *have* frozen development (which we do by merging it over to hotfix) and we have a consensus that the change is not too risky, a PR for hotfix is made.
[18:53] *** rbt left
[18:53] *** rbt joined
[18:53] <lizmat> jast: "pretty much all developers do reviews"  how many ?
[18:54] <japhb> ugexe: I've worked at at least one place where the PR-equivalent had to be squashed to merge, because you weren't allowed to have any commits on the mainline that would fail CI or otherwise result in broken builds.
[18:56] <SmokeMachine> m: say (my $a = “aBcD”) .= lc .= uc; say $a
[18:56] <camelia> rakudo-moar 530e17848: OUTPUT: «ABCD␤ABCD␤»
[18:56] <ugexe> how many might not be relevant when the PRs are handled by the "the person most familiar with that part of the code base" handles it
[18:57] <jast> lizmat: counting the people who don't do full time dev work, 10 right now (plus reviews for translations and such which happen independently of code reviews but use the same review process)
[18:57] <lizmat> so maybe 5 FTE?
[18:58] <jast> 7... with an almost even split between frontend and backend
[18:58] <jast> hm, I must have miscounted when I said 10
[18:58] <jast> 12 actually
[18:59] <jast> 12 actually
[19:00] <lizmat> I wish we had 7 FTE working on Rakudo
[19:00] <ugexe> I've put it out there I am willing to review all CUR related PRs
[19:01] <jast> unfortunately my work has no overlap whatsoever with Rakudo
[19:02] <jast> nor my private stuff tbh, I don't really have anything planned where Rakudo would be a good fit, which is really sad
[19:02] <jast> or, shall we say, Raku
[19:03] *** rbt left
[19:05] <lizmat> ugexe: invitation accepted
[19:05] <ugexe> thanks!
[19:06] <lizmat> I assume you meant anything in CompUnit::xxx namespaces, right ?
[19:06] <ugexe> Yes, or Distribution
[19:06] <lizmat> ack
[19:15] *** dogbert17 joined
[19:18] *** dogbert11 left
[19:23] *** ajr joined
[19:32] *** dogbert17 left
[19:37] *** n1to joined
[19:47] *** jjido left
[19:51] *** dogbert17 joined
[20:05] *** dogbert11 joined
[20:05] *** dogbert17 left
[20:16] *** dogbert11 left
[20:24] *** dogbert11 joined
[20:27] *** dogbert17 joined
[20:27] *** dogbert11 left
[20:27] *** ajr left
[20:47] *** sena_kun left
[20:48] *** sena_kun joined
[20:56] *** dogbert11 joined
[20:56] *** dogbert17 left
[20:56] *** londoed joined
[20:59] *** jjido joined
[21:19] *** ajr joined
[21:24] *** Xliff left
[21:25] *** ajr left
[21:26] *** lichtkind__ joined
[21:29] *** rbt joined
[21:29] *** lichtkind_ left
[21:34] *** rbt left
[21:34] *** rbt joined
[21:41] *** melezhik joined
[21:41] <melezhik> hi SmokeMachine! SparkyCI for Red+PgSQL fails - http://sparrowhub.io:2222/report/119
[21:42] <melezhik> I guess because of this - `Type check failed in binding to parameter '$!port'; expected Int but got Str ("5432")`
[21:43] <melezhik> which is obvious as port is passed as a part of env variable - `RED_DATABASE=Pg host=localhost port=5432 user=testuser password=testpass dbname=redtest`
[21:45] <melezhik> I am building for my branch - https://github.com/melezhik/Red/blob/master/.sparkyci.yaml
[21:45] <melezhik> you can pickup `.sparkyci.yaml` from there and test from your repo
[21:46] <melezhik> you just need to login into SparkyCI and push "sync repos" button and then add Red to your repos
[21:46] <melezhik> and not to forget to add `.sparkyci.yaml` to the root of your GH repo before
[21:47] *** yodabyte0 joined
[21:47] *** djerius left
[21:49] *** djerius joined
[21:49] <spacekookie> Oh I just realised that Raku doesn't have a json parser in its stdlib :( I was gonna write a small CI script in it but I don't really want to have to install stuff via zef in CI
[21:50] <spacekookie> I guess maybe I could pick a different format that's easier to hack a gramar together for
[21:53] *** melezhik left
[21:54] *** ajr joined
[21:55] <japhb> spacekookie: A JSON parser grammar is really easy in Raku; see https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm
[21:56] <japhb> There *is* a JSON parser in the core, but it's considered "Rakudo internal".  You can reach it, if you need to, but mostly it exists for internal use.  It's a fork of JSON::Fast, IIRC.
[21:57] <japhb> Gripping hand though is I'm not sure how you're going to avoid doing zef installs in CI -- nearly every module you test will have dependencies that need to be installed first anyway.
[21:58] <spacekookie> hmmm
[21:58] *** ajr left
[22:00] *** Manifest0 left
[22:02] *** simcop2387 left
[22:02] *** ajr joined
[22:02] *** perlbot left
[22:02] *** n1to left
[22:04] *** Manifest0 joined
[22:06] <spacekookie> that gramar is making the emacs syntax highlighter very sad lol
[22:08] <moon-child> perhaps rakudo star should be revived
[22:10] *** simcop2387 joined
[22:11] *** perlbot joined
[22:15] *** jjido left
[22:30] *** Manifest0 left
[22:55] *** guifa left
[22:59] *** rbt left
[22:59] *** rbt joined
[23:05] *** rbt left
[23:05] *** rbt joined
[23:10] *** rbt left
[23:10] *** rbt joined
[23:20] *** lichtkind__ left
[23:27] *** yodabyte0 left
