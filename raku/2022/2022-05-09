[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[01:06] *** qorg11 left
[01:09] *** qorg11 joined
[01:20] *** frost joined
[01:38] *** [Coke] left
[01:41] *** [Coke] joined
[02:11] *** Guest35 left
[03:11] *** linkable6 left
[03:11] *** unicodable6 left
[03:11] *** committable6 left
[03:11] *** statisfiable6 left
[03:11] *** bisectable6 left
[03:11] *** evalable6 left
[03:11] *** coverable6 left
[03:11] *** quotable6 left
[03:11] *** shareable6 left
[03:11] *** reportable6 left
[03:11] *** notable6 left
[03:11] *** tellable6 left
[03:11] *** benchable6 left
[03:11] *** bloatable6 left
[03:11] *** greppable6 left
[03:11] *** sourceable6 left
[03:11] *** releasable6 left
[03:11] *** nativecallable6 left
[03:11] *** bloatable6 joined
[03:12] *** statisfiable6 joined
[03:12] *** releasable6 joined
[03:12] *** nativecallable6 joined
[03:12] *** benchable6 joined
[03:12] *** greppable6 joined
[03:12] *** linkable6 joined
[03:12] *** sourceable6 joined
[03:12] *** bisectable6 joined
[03:12] *** notable6 joined
[03:12] *** reportable6 joined
[03:13] *** quotable6 joined
[03:13] *** committable6 joined
[03:13] *** shareable6 joined
[03:14] *** unicodable6 joined
[03:14] *** evalable6 joined
[03:14] *** coverable6 joined
[03:14] *** tellable6 joined
[03:36] *** Sankalp left
[03:36] *** Sankalp joined
[04:06] *** ProperNoun joined
[04:06] *** z4kz83 joined
[04:07] *** z4kz83 left
[04:07] *** ProperN[out] left
[05:04] *** jcallen left
[05:04] *** leont left
[05:04] *** skaji left
[05:04] *** ugexe left
[05:04] *** eof left
[05:04] *** skaji joined
[05:04] *** jcallen joined
[05:04] *** summerisle joined
[05:04] *** leont joined
[05:04] *** ugexe joined
[05:11] *** tellable6 left
[05:11] *** coverable6 left
[05:11] *** shareable6 left
[05:11] *** notable6 left
[05:11] *** sourceable6 left
[05:11] *** bisectable6 left
[05:11] *** linkable6 left
[05:11] *** benchable6 left
[05:11] *** statisfiable6 left
[05:11] *** bloatable6 left
[05:11] *** dg left
[05:11] *** simcop2387 left
[05:11] *** jrjsmrtn_ left
[05:11] *** vrurg left
[05:11] *** gabiruh left
[05:11] *** dg joined
[05:11] *** gabiruh joined
[05:11] *** simcop2387 joined
[05:12] *** vrurg joined
[05:13] *** jrjsmrtn joined
[05:15] *** statisfiable6 joined
[05:15] *** sourceable6 joined
[05:15] *** linkable6 joined
[05:15] *** bloatable6 joined
[05:15] *** benchable6 joined
[05:15] *** coverable6 joined
[05:15] *** notable6 joined
[05:15] *** bisectable6 joined
[05:15] *** tellable6 joined
[05:15] *** shareable6 joined
[06:06] *** reportable6 left
[06:06] *** reportable6 joined
[06:43] *** mexen joined
[06:44] *** jjido joined
[07:04] *** Sgeo left
[07:05] *** abraxxa joined
[07:09] *** abraxxa left
[07:10] *** abraxxa joined
[07:49] *** dakkar joined
[08:04] *** TempIRCLogger left
[08:06] *** TempIRCLogger joined
[08:36] *** jjido left
[08:43] *** lichtkind joined
[08:44] *** jjido joined
[09:15] *** lichtkind_ joined
[09:18] *** lichtkind left
[09:59] <discord-raku-bot> <Nemokosch#9980> https://gist.github.com/2colours/795bc060884a2a562f020fef1ac43bf5

[09:59] <discord-raku-bot> <Nemokosch#9980> what happened here?

[10:00] <discord-raku-bot> <Nemokosch#9980> works when `andthen` starts on the same line

[10:01] <discord-raku-bot> <Nemokosch#9980> reminds me of ASI in Javascript...

[10:10] <CIAvash> Nemokosch: https://docs.raku.org/language/syntax#Implied_separator_rule_(for_statements_ending_in_blocks)

[10:10] <tellable6> CIAvash, I'll pass your message to Nemokosch

[10:14] <discord-raku-bot> <Nemokosch#9980> oh crap, this is really ASI üò¨

[10:15] <Voldenet> ASI is not that bad, enforces specific formatting discipline

[10:18] *** evalable6 left
[10:18] *** linkable6 left
[10:19] *** linkable6 joined
[10:19] *** evalable6 joined
[10:21] <discord-raku-bot> <Nemokosch#9980> wouldn't use the word "discipline" here

[10:21] <discord-raku-bot> <Nemokosch#9980> it's rather just a certain style, a not necessarily good one

[10:23] <Voldenet> Sure, good and bad are relative to moral standpoint after all ( Ôæü‚Äø Ôæü) 

[10:25] <discord-raku-bot> <Nemokosch#9980> I mean, discipline implies a certain carefulness, as if it were superior and not just a certain choice you are stuck with for technical reasons

[10:25] <discord-raku-bot> <Nemokosch#9980> and for colon method calls, this feels like the final nail in the coffin

[10:28] <Voldenet> Just my opinion, but I find colon method calls messy

[10:28] <discord-raku-bot> <Nemokosch#9980> this `andthen` was already a bit hackish attempt to make use of them but hell, not at the cost of adding much more line noise than just using parens

[10:29] <CIAvash> You have some options, but you may not like them

[10:29] <CIAvash> <1 3 5>.map: {

[10:29] <CIAvash>     $_**$_

[10:29] <CIAvash> } andthen .say;

[10:29] <CIAvash> <1 3 5>

[10:29] <CIAvash> ==> map({$_**$_})

[10:29] <CIAvash> ==> say();

[10:30] <discord-raku-bot> <Nemokosch#9980> I never managed to understand this long arrow to be honest

[10:30] <Voldenet> long arrow is actually quite cool syntax

[10:30] <CIAvash> "feed operator"

[10:32] *** Altai-man joined
[10:32] <discord-raku-bot> <Nemokosch#9980> Sometimes it did seem clean and concise but I just didn't grasp how it works

[10:33] <Voldenet> m: sub accept-long-arrow(&code, $x) { $x.&code }; ^10 ==> accept-long-arrow { .map(* * 2) } ==> say()

[10:33] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(0 2 4 6 8 10 12 14 16 18)‚ê§¬ª

[10:35] <Voldenet> sequencer operators precedence is low, which is pretty nice

[10:38] <discord-raku-bot> <Nemokosch#9980> what is this $x &code black magic xD

[10:39] <CIAvash> https://docs.raku.org/language/operators#index-entry-methodop_.&

[10:40] <discord-raku-bot> <Nemokosch#9980> this one I know

[10:48] <lizmat> m: sub double($text) { say $text x 2 }; "foobar".&double

[10:48] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´foobarfoobar‚ê§¬ª

[10:51] <Voldenet> in fact, feed operator lets you skip a lot of () and {}

[10:51] <Voldenet> m: sub accept-long-arrow(&code, $x) { code($x) }; ^10 ==> accept-long-arrow *.map: * * 2 ==> accept-long-arrow *.say

[10:51] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(0 2 4 6 8 10 12 14 16 18)‚ê§¬ª

[10:52] <discord-raku-bot> <Nemokosch#9980> why does this work?

[10:53] <Voldenet> basically, WhateverCode can be invoked

[10:53] <Voldenet> m: (* * 2)(2).say

[10:53] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´4‚ê§¬ª

[10:55] <Voldenet> non-fancy way of writing this would be:

[10:55] <Voldenet> m: sub accept-long-arrow(&code, $x) { code($x) }; ^10 ==> accept-long-arrow({.map({ $_ * 2 }) }) ==> accept-long-arrow({.say})

[10:55] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(0 2 4 6 8 10 12 14 16 18)‚ê§¬ª

[10:58] <Voldenet> and feed operator just passes everything on the left as last parameter of the given function

[11:07] <discord-raku-bot> <Nemokosch#9980> > and feed operator just passes everything on the left as last parameter of the given function

[11:07] <discord-raku-bot> <Nemokosch#9980> hmmm üòÆ

[11:07] <Voldenet> (ofc, the code above is pointlessly verbose, you could write this in a lot shorter way)

[11:08] <Voldenet> m: ^10 ==> map * * 2 ==> say()

[11:08] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´(0 2 4 6 8 10 12 14 16 18)‚ê§¬ª

[11:10] *** jjido left
[11:24] *** wingfold joined
[11:36] *** jjido joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:22] *** jjido left
[12:47] *** jjido joined
[13:12] <[Coke]> tmux a

[13:12] <Voldenet> sessions should be nested with care, unset $TMUX to force

[13:12] <[Coke]> thtop

[13:21] *** Altai-man left
[13:22] *** Altai-man joined
[13:30] *** [Coke] left
[13:33] *** jjido left
[13:36] *** [Coke] joined
[13:48] *** Sgeo joined
[14:16] *** discord-raku-bot left
[14:17] *** discord-raku-bot joined
[14:47] *** Kaipei left
[15:01] *** Kaipei joined
[15:13] *** frost left
[15:46] <discord-raku-bot> <Nemokosch#9980> > ^10 ==> map * * 2 ==> say()

[15:46] <discord-raku-bot> <Nemokosch#9980> exactly the kind of stuff that makes me so confused

[15:47] *** abraxxa left
[16:17] *** Guest35 joined
[16:34] <discord-raku-bot> <Nemokosch#9980> is this arrow really just a way to invert the call chain?

[16:34] <discord-raku-bot> <Nemokosch#9980> what I mean is that it doesn't seem to do anything special with a list, it doesn't iterate over it or anything

[16:37] <Voldenet> nope

[16:40] *** dakkar left
[16:42] <Voldenet> ‚Ä¶well it also has this funky behavior

[16:43] <discord-raku-bot> <Nemokosch#9980> üëÄ

[16:43] <Voldenet> m: my $foo = class { method append(|x) { say x }; }.new; ^10 ==> $foo ==> say()

[16:43] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´\((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))‚ê§(0 1 2 3 4 5 6 7 8 9)‚ê§¬ª

[16:43] <Voldenet> Why? Absolutely no idea

[16:50] <[Coke]> Which part of that exactly is funky?

[16:51] <discord-raku-bot> <Nemokosch#9980> is there a straightforward way to call methods rather than bare functions?

[16:52] <[Coke]> m: ^10 ==> map({ .say })

[16:52] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[16:53] <[Coke]> https://docs.raku.org/routine/==%3E

[16:53] *** discord-raku-bot left
[16:53] *** discord-raku-bot joined
[16:58] *** Kaipei left
[16:59] *** Kaipei joined
[17:01] <discord-raku-bot> <Nemokosch#9980> map is a bare function in this example, no?

[17:03] *** morte_ joined
[17:06] *** mexen left
[17:09] *** Altai-man left
[17:18] <Voldenet> [Coke]: the part where .append can be called, it's‚Ä¶ weird

[17:18] <Voldenet> m: ^10 ==> 42

[17:18] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Only routine calls or variables that can '.push' may appear on either side of feed operators.‚ê§at <tmp>:1‚ê§------> ^10 ==> ‚èè542‚ê§¬ª

[17:18] <Voldenet> m: ^10 ==> class { method push(|x) { say x }; }.new

[17:18] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Only routine calls or variables that can '.push' may appear on either side of feed operators.‚ê§at <tmp>:1‚ê§------> ==> class { method push(|x) { say x }; }‚èè.new‚ê§¬ª

[17:23] *** [Coke] left
[17:23] *** [Coke]_ joined
[17:24] <[Coke]_> I assume the append is called because that's how you add a bunch of data to the end of an array, and you've given it something that isn't callable in the pipeline

[17:24] <[Coke]_> m: my @a; ^10 ==> @a; say @a.elems

[17:24] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´10‚ê§¬ª

[17:24] <[Coke]_> and the "42" earlier doesn't let you invoke it *or* save data in it.

[17:24] *** [Coke]_ is now known as [Coke]

[17:25] <[Coke]> nemokosch, yes map is a bare function. no you can't call methods in a chain directly. if you want to use methods.. use them directly.

[17:26] <Voldenet> m: ^10 ==> class { method append(|x) { say x }; }.new

[17:26] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Only routine calls or variables that can '.push' may appear on either side of feed operators.‚ê§at <tmp>:1‚ê§------> > class { method append(|x) { say x }; }‚èè.new‚ê§¬ª

[17:26] <Voldenet> my $foo = class { method push(|x) { say x }; }.new; my @a; ^10 ==> $foo

[17:26] <Voldenet> m: my $foo = class { method push(|x) { say x }; }.new; my @a; ^10 ==> $foo

[17:26] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Cannot resolve caller append(<anon|1>:D: List:D); none of these signatures matches:‚ê§    (Any:U \SELF: |values)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:26] <Voldenet> m: my $foo = class { method append(|x) { say x }; }.new; my @a; ^10 ==> $foo

[17:26] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´\((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))‚ê§¬ª

[17:28] <[Coke]> the SORRY is at compile time there.

[17:28] <[Coke]> you're trying to pass something that has to be figured out at runtime, I think.

[17:29] <Voldenet> Yes, but .push is not actually needed or used

[17:31] <[Coke]> Assuming that's a change that was made in the implementation and not in the error message.

[17:32] <[Coke]> (append lets you append a bunch, push is one at a time)

[17:33] <[Coke]> Looks like it's hardcoded to *use* append, so even if you define a push, it doesn't fall back to it.

[17:33] <[Coke]> seems bug worthy.

[17:33] <[Coke]> seems bug worthy.

[17:34] <discord-raku-bot> <Nemokosch#9980> [\,] $seq andthen .toggle: !*.repeated andthen .last

[17:34] <discord-raku-bot> <Nemokosch#9980> looks good enough I think

[17:34] <discord-raku-bot> <Nemokosch#9980> by the way

[17:34] <discord-raku-bot> <Nemokosch#9980> I've shown this ASI-looking example https://gist.github.com/2colours/795bc060884a2a562f020fef1ac43bf5

[17:34] <Voldenet> it's a minor bug either way, it was meant to be used with arrays I suppose

[17:36] <discord-raku-bot> <Nemokosch#9980> it is indeed mentioned ("implied separator rule")

[17:36] <discord-raku-bot> <Nemokosch#9980> but what is the rationale behind?

[17:36] <discord-raku-bot> <Nemokosch#9980> `*.grep: {}` is a method call syntactically, it doesn't contain the block on the top level

[17:48] *** morte_ left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:22] *** sena_kun left
[18:28] *** sena_kun joined
[18:33] *** sena_kun left
[18:33] *** morte_ joined
[18:33] *** Kaipei is now known as Kaiepi

[18:34] *** sena_kun joined
[18:35] <CIAvash> FWIW design docs say this: "If the operand on the sharp end of a feed is not a call to a variadic operation, it must be something else that can be interpreted as a list receiver, or a scalar expression that can be evaluated to produce an object that does the KitchenSink role, such as an IO object. Such an object provides .clear and .push methods that will be called as appropriate to send data. (Note that an IO object used as a sink will force eager

[18:35] <CIAvash> evaluation on its pipeline, so the next statement is guaranteed not to run till the file is closed. In contrast, an Array object used as a sink turns into a lazy array.)" https://design.raku.org/S06.html#Feed_operators

[18:42] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/05/09/2022-19-docublast/

[19:00] <discord-raku-bot> <Nemokosch#9980> oh nice

[19:01] <discord-raku-bot> <Nemokosch#9980> so <( and )> basically manipulate $0? Am I following?

[19:02] <lizmat> no, they limit the match

[19:02] *** n1to joined
[19:02] <lizmat> in that example, there is no $0

[19:02] <lizmat> m: say "foobarbaz" ~~ / foo <( \w+ )> baz /; say $0

[19:02] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢barÔΩ£‚ê§Nil‚ê§¬ª

[19:03] <discord-raku-bot> <Nemokosch#9980> hmmm

[19:03] <discord-raku-bot> <Nemokosch#9980> I guess I'm mixing it up with Python regexes... what _would_ $0 denote actually?

[19:04] <lizmat> m: say "foobarbaz" ~~ / foo ( \w+ ) baz /; say $0

[19:04] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢foobarbazÔΩ£‚ê§ 0 => ÔΩ¢barÔΩ£‚ê§ÔΩ¢barÔΩ£‚ê§¬ª

[19:04] <lizmat> using positional captures creates more information, that you may not need

[19:05] <discord-raku-bot> <Nemokosch#9980> in my mind, it was the whole matching string

[19:05] <lizmat> m: "foobarbaz" ~~ / foo ( \w+ ) baz /; say $/; say $0

[19:05] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢foobarbazÔΩ£‚ê§ 0 => ÔΩ¢barÔΩ£‚ê§ÔΩ¢barÔΩ£‚ê§¬ª

[19:05] <lizmat> also, you don't need to use both, you can use either

[19:05] <lizmat> m: say "foobarbaz" ~~ / foo <( \w+ baz /

[19:05] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢barbazÔΩ£‚ê§¬ª

[19:06] <lizmat> m: say "foobarbaz" ~~ / foo \w+ )> baz /

[19:06] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´ÔΩ¢foobarÔΩ£‚ê§¬ª

[19:06] <lizmat> it's like \K in Perl, but on steroids and both ways ?

[19:09] <discord-raku-bot> <Nemokosch#9980> I still tend to forget the regex; the interface is highly different compared to the Python module

[19:09] <discord-raku-bot> <Nemokosch#9980> seems like even $0, $1, $2 stuff is some kind of match object, not a raw string

[19:14] <lizmat> indeed...  $0 is just short for $/[0]

[19:14] <lizmat> and $<foo> is just short for $/<foo>

[19:15] <lizmat> a match creates a Match object, that may consist of more sub-Match objects

[19:19] <discord-raku-bot> <Nemokosch#9980> okay, I will eventually remember, thanks üòÑ

[19:20] <discord-raku-bot> <Nemokosch#9980> On a different note: overall it's pretty sad how the whole Perl community is divided deep down

[19:23] <lizmat> I don't know, I don't consider myself part of the Perl community anymore

[19:23] <lizmat> so I'm not keeping up-to-date on developments there

[19:26] *** sena_kun left
[19:27] *** sena_kun joined
[19:28] <discord-raku-bot> <Nemokosch#9980> I mean yes, probably the biggest split is between current Perl and well, what was thought to become current Perl...

[19:31] *** morte_ left
[19:31] <lizmat> I tried for the longest time to make that happen... alas, I gave up

[19:31] <discord-raku-bot> <Nemokosch#9980> Anyway, I just don't get the mourning attitude I come across on forums... indeed, it's not 2000 anymore but there isn't much point in wondering how we could pretend it were

[19:31] <lizmat> in hindsight, I think I didn't give up early enough

[19:32] <discord-raku-bot> <Nemokosch#9980> oof

[19:33] <lizmat> I hadn't realized that the active/vocal members of the Perl community had already driven away most of the more liberal people

[19:33] <lizmat> so those who remained behind were hard-core anti what is now Raku

[19:34] <lizmat> and those who remained behind, would blame all of the issues on what is now Raku

[19:34] <lizmat> and now many of the issues that started the whole (what is now) Raku effort, still remain in Perl

[19:35] <lizmat> and cannot be fixed without breaking compatibility

[19:35] <lizmat> and that's basically the only thing that Perl has going for it in this day and age

[19:35] <El_Che> lizmat: https://www.youtube.com/watch?v=L0MK7qz13bU

[19:36] <discord-raku-bot> <Nemokosch#9980> ü§£

[19:36] <lizmat> yeah, got the hint.... I'll be afk and cool down  &

[19:36] <El_Che> lizmat: you because we care :)

[19:36] <El_Che> just

[19:37] <discord-raku-bot> <Nemokosch#9980> I was barely alive in the late 90's early 2000's so it's not like I could give some proper analysis

[19:37] <lizmat> before I go, some things to ponder from those days

[19:38] <discord-raku-bot> <Nemokosch#9980> but I think what happened was mostly a shift in emphasis

[19:38] <discord-raku-bot> <Nemokosch#9980> perhaps people accepted that shell would suck, no matter what xD

[19:38] <lizmat> in the early 2000's I was working on a search engine, and as a sample, I was indexing the p5p archive

[19:38] <lizmat> and I was wondering why some days took so much longer than other days to index

[19:38] <lizmat> turns out, those days had 600+ messages on the mailing list / day

[19:39] <lizmat> that's almost one message every 2 minutes, continuously

[19:40] <lizmat> and they were a lot of not so friendly happy messages  :-(

[19:40] <lizmat> afk&

[19:50] *** notna joined
[19:54] *** coleman joined
[19:54] <discord-raku-bot> <Nemokosch#9980> I don't know and maybe I don't even wanna know. I think I've expressed my own principle already. I just happen to think that 1. Perl is really good for certain things and 2. leaving people space and freedom to develop their own style and own cleverness is inspiring

[19:55] <discord-raku-bot> <Nemokosch#9980> I don't regret starting Raku and I think the world would be a bit emptier place without it

[19:55] *** coleman left
[19:55] *** coleman joined
[19:56] <discord-raku-bot> <Nemokosch#9980> but in the end, it's "just" a programming language, not a manifesto or something

[20:03] *** notna left
[20:11] *** eseyman left
[20:13] <discord-raku-bot> <at#0754> > but in the end, it's "just" a programming language, not a manifesto or something

[20:13] <discord-raku-bot> <at#0754> raku feels more like a manifesto in the intentional way the community is built & the thought put into it

[20:13] <discord-raku-bot> <at#0754> Ofun and all that

[20:37] <ecocode___> hi,  I'm pretty old and my eyes prefer reading stuff on e-ink device instead of web-browser.  By any chance, is the raku guide and/or the raku documentation available in epub format ?

[20:40] <discord-raku-bot> <at#0754> Pod can render Markdown that you can throw at pandoc to get epub, you should be able to do that with the docs https://docs.raku.org/language/pod#Markdown

[20:40] <[Coke]> the epub version has been broken for some time.

[20:41] <ecocode___> how come ?

[20:41] <[Coke]> well, single file version. not strictly speaking an epub format.

[20:41] <[Coke]> ecocode___: bitrot. there's an open ticket, needs to be addressed.

[20:42] <ecocode___> ok thx

[20:42] *** eseyman joined
[20:44] <[Coke]> https://github.com/Raku/doc/issues/3041 https://github.com/Raku/doc/issues/1981 (I'm sure there are others)

[20:46] <[Coke]> Please follow those tickets; hopefully once the build is unblocked, we can start addressing these issues again.

[20:56] <ecocode___> https://raw.githubusercontent.com/hankache/rakuguide/master/perl6intro.adoc ... what format is that ?

[20:58] <euandreh> ecocode___: looking at the extension, asciidoc

[20:59] <El_Che> ecocode___: lo! Long time no see

[21:04] <discord-raku-bot> <Nemokosch#9980> mhm, this is exactly why I got into debate

[21:06] <ecocode___> El_Che: hello !

[21:11] <ecocode___> I figured to get the raku guide in epub :) (```asciidoctor``` and ```pandoc```)

[21:42] *** linkable6 left
[21:42] *** evalable6 left
[21:43] *** evalable6 joined
[21:43] *** linkable6 joined
[21:46] <ecocode___> Not really readable though...

[21:46] <ecocode___> Guess I will have to read the web

[21:50] <discord-raku-bot> <at#0754> ecocode___: pandoc can read Asciidoc directly, maybe skipping `asciidoctor` could help layout-wise?

[21:51] *** lichtkind_ left
[21:53] *** n1to left
[21:57] <ecocode___> Hah?  It did not like it on my system 

[21:58] <discord-raku-bot> <at#0754> ecocode___: https://pandoc.org/demos.html example 28, looks like it needs some special syntax

[21:58] <ecocode___> Therefore I used asciidoctor to convert to docbook to feed pandoc

[22:00] <ecocode___> I'll check again tomorrow 

[22:00] <discord-raku-bot> <at#0754> pandoc -s perl6intro.adoc -t asciidoc -o out.epub, no?

[22:01] <ecocode___> Such a potty Merello book (raku recipes) isn't sold in Epub, but pdf only

[22:01] <ecocode___> *pitty

[22:01] <ecocode___> I'd love to read that one

[22:01] <El_Che> that sounds like an insult

[22:01] <El_Che> potty Merello

[22:02] <El_Che> msg him and ask

[22:02] <ecocode___> Ouch

[22:02] <ecocode___> Maybe I'll just buy the printed book

[22:03] <ecocode___> El_Che: you use raku in production?

[22:05] *** pierrot left
[22:06] *** pierrot joined
[23:06] *** bloatable6 left
[23:06] *** quotable6 left
[23:06] *** reportable6 left
[23:06] *** linkable6 left
[23:06] *** statisfiable6 left
[23:06] *** releasable6 left
[23:06] *** evalable6 left
[23:06] *** nativecallable6 left
[23:06] *** bisectable6 left
[23:06] *** coverable6 left
[23:06] *** greppable6 left
[23:06] *** committable6 left
[23:06] *** tellable6 left
[23:06] *** benchable6 left
[23:06] *** shareable6 left
[23:06] *** sourceable6 left
[23:06] *** notable6 left
[23:06] *** unicodable6 left
[23:06] *** shareable6 joined
[23:06] *** sourceable6 joined
[23:06] *** bloatable6 joined
[23:07] *** releasable6 joined
[23:07] *** tellable6 joined
[23:07] *** greppable6 joined
[23:07] *** committable6 joined
[23:07] *** benchable6 joined
[23:07] *** nativecallable6 joined
[23:08] *** evalable6 joined
[23:08] *** quotable6 joined
[23:08] *** coverable6 joined
[23:08] *** statisfiable6 joined
[23:08] *** linkable6 joined
[23:08] *** unicodable6 joined
[23:08] *** bisectable6 joined
[23:09] *** reportable6 joined
[23:09] *** notable6 joined
[23:15] *** wingfold left
