[00:05] *** kueppo joined
[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[00:17] *** lichtkind left
[00:18] *** kueppo left
[00:56] *** Sankalp left
[00:56] *** Sankalp- joined
[00:56] *** Sankalp- is now known as Sankalp

[01:42] *** frost joined
[02:11] *** Kaiepi left
[03:11] *** nativecallable6 left
[03:11] *** evalable6 left
[03:11] *** coverable6 left
[03:11] *** benchable6 left
[03:11] *** bisectable6 left
[03:11] *** quotable6 left
[03:11] *** notable6 left
[03:11] *** statisfiable6 left
[03:11] *** sourceable6 left
[03:11] *** tellable6 left
[03:11] *** shareable6 left
[03:11] *** bloatable6 left
[03:11] *** greppable6 left
[03:11] *** reportable6 left
[03:11] *** linkable6 left
[03:11] *** committable6 left
[03:11] *** releasable6 left
[03:11] *** unicodable6 left
[03:11] *** unicodable6 joined
[03:12] *** coverable6 joined
[03:12] *** tellable6 joined
[03:12] *** evalable6 joined
[03:12] *** committable6 joined
[03:12] *** linkable6 joined
[03:13] *** shareable6 joined
[03:13] *** reportable6 joined
[03:13] *** statisfiable6 joined
[03:13] *** benchable6 joined
[03:13] *** quotable6 joined
[03:13] *** releasable6 joined
[03:13] *** nativecallable6 joined
[03:13] *** bloatable6 joined
[03:14] *** sourceable6 joined
[03:14] *** notable6 joined
[03:14] *** greppable6 joined
[03:14] *** bisectable6 joined
[04:14] *** unicodable6 left
[04:14] *** linkable6 left
[04:14] *** committable6 left
[04:14] *** evalable6 left
[04:14] *** bloatable6 left
[04:14] *** greppable6 left
[04:14] *** quotable6 left
[04:14] *** benchable6 left
[04:14] *** statisfiable6 left
[04:14] *** sourceable6 left
[04:14] *** coverable6 left
[04:14] *** tellable6 left
[04:14] *** releasable6 left
[04:14] *** reportable6 left
[04:14] *** bisectable6 left
[04:14] *** nativecallable6 left
[04:14] *** shareable6 left
[04:14] *** notable6 left
[04:15] *** linkable6 joined
[04:15] *** bloatable6 joined
[04:15] *** benchable6 joined
[04:15] *** shareable6 joined
[04:16] *** nativecallable6 joined
[04:16] *** bisectable6 joined
[04:16] *** statisfiable6 joined
[04:16] *** sourceable6 joined
[04:16] *** reportable6 joined
[04:16] *** unicodable6 joined
[04:16] *** quotable6 joined
[04:17] *** coverable6 joined
[04:17] *** committable6 joined
[04:17] *** tellable6 joined
[04:17] *** notable6 joined
[04:17] *** greppable6 joined
[04:17] *** releasable6 joined
[04:17] *** evalable6 joined
[04:23] *** Kaiepi joined
[04:28] *** Kaiepi left
[05:28] *** nativecallable6 left
[05:28] *** releasable6 left
[05:28] *** greppable6 left
[05:28] *** reportable6 left
[05:28] *** bisectable6 left
[05:28] *** statisfiable6 left
[05:28] *** sourceable6 left
[05:28] *** unicodable6 left
[05:28] *** benchable6 left
[05:28] *** notable6 left
[05:28] *** coverable6 left
[05:28] *** shareable6 left
[05:28] *** linkable6 left
[05:28] *** committable6 left
[05:28] *** bloatable6 left
[05:28] *** quotable6 left
[05:28] *** evalable6 left
[05:28] *** tellable6 left
[05:28] *** bloatable6 joined
[05:29] *** statisfiable6 joined
[05:29] *** evalable6 joined
[05:29] *** greppable6 joined
[05:29] *** notable6 joined
[05:29] *** tellable6 joined
[05:29] *** nativecallable6 joined
[05:30] *** reportable6 joined
[05:30] *** sourceable6 joined
[05:30] *** benchable6 joined
[05:30] *** committable6 joined
[05:30] *** quotable6 joined
[05:30] *** bisectable6 joined
[05:30] *** linkable6 joined
[05:31] *** releasable6 joined
[05:31] *** unicodable6 joined
[05:31] *** shareable6 joined
[05:31] *** coverable6 joined
[05:48] *** Guest42 joined
[05:50] *** Guest42 left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[07:09] *** evalable6 left
[07:09] *** linkable6 left
[07:09] *** linkable6 joined
[07:10] *** evalable6 joined
[07:16] *** Sgeo left
[08:08] *** Colere left
[08:09] *** Colere joined
[08:10] *** djerius_ left
[08:11] *** djerius joined
[08:43] *** frost left
[09:16] *** timo1 is now known as timo

[09:40] *** Kaiepi joined
[09:56] *** lichtkind joined
[09:57] *** mexen left
[10:23] *** frost joined
[10:45] *** xinming left
[10:47] *** xinming joined
[11:09] *** xinming left
[11:10] *** xinming joined
[11:58] *** discord-raku-bot left
[11:59] *** discord-raku-bot joined
[12:03] *** discord-raku-bot left
[12:03] *** discord-raku-bot joined
[12:06] *** reportable6 left
[12:09] *** reportable6 joined
[12:51] <sienet_ja_LSD[m]> how to fix You may need to configure one of the following backends, or install its underlying software - [psunzip]

[12:51] <sienet_ja_LSD[m]> alias psunzip='unzip' doesn't work

[12:53] *** morte_ joined
[12:55] *** lichtkind left
[12:56] *** lichtkind joined
[12:57] *** frost left
[13:06] *** lichtkind left
[13:11] <Voldenet> sienet_ja_LSD[m]: psunzip is using powershell to unzip files

[13:11] *** frost joined
[13:12] <sienet_ja_LSD[m]> aye but this is linux

[13:12] <Voldenet> aye, it's only relevant if $*DISTRO.is-win

[13:13] <Voldenet> so, the question is why isn't `unzip` suggested here

[13:13] <sienet_ja_LSD[m]> where is it required if I were to look up module sources?

[13:14] <Voldenet> that defines unzip: https://github.com/ugexe/zef/blob/0e202f2/resources/config.json#L139

[13:14] <sienet_ja_LSD[m]> I'm grepping and cannot find psunzip

[13:14] <Voldenet> you should be able to also see psunzip here

[13:14] <sienet_ja_LSD[m]> zef has been able to install all other modules just fine, but now it's suddenly wanting me to use powershell

[13:16] <Voldenet> No, that message basically says

[13:16] <Voldenet> that nothing installed can extract given file

[13:16] <Voldenet> and reports that the only disabled backend is psunzip

[13:17] <sienet_ja_LSD[m]> yes but which line in module sources is wanting to use it and not regular zip?

[13:17] <Voldenet> the error is confusing

[13:20] <sienet_ja_LSD[m]> I did edit the config.json but it has no effect, my zef is built with rakubrew

[13:25] <Voldenet> https://github.com/ugexe/zef/blob/602c54/lib/Zef/Extract.rakumod#L113

[13:25] <Voldenet> so… apparently timeout is possible

[13:26] *** jgaz joined
[13:27] <Voldenet> You should increase logging verbosity level of EXTRACT stage for better error

[13:31] <sienet_ja_LSD[m]> nope, still same, fetching, extracting, Enabled extracting backends [git path tar p5tar unzip] don't understand <extracteddir>

[13:32] <Voldenet> `extracteddir` sounds like a weird path to extract

[13:33] <sienet_ja_LSD[m]> home/user/.zef/tmp/1655472145.15680.8563.048844792329/raku-Twitter

[13:33] <sienet_ja_LSD[m]> to be precise

[13:38] <Voldenet> eh, I've tried using that package and it worked, guess that rules out broken package

[13:39] <Voldenet> well, it installed, not exactly worked

[13:39] <Voldenet> `Could not find Twitter::API in:`

[13:39] <sienet_ja_LSD[m]> hmm ok

[13:40] *** frost left
[13:42] <Voldenet> > zef install –force –debug Twitter

[13:42] <Voldenet> > [Twitter] Extracting with plugin: Zef::Service::Shell::tar+{<anon|1>}

[13:44] <sienet_ja_LSD[m]> aye the package itself works 

[13:48] <Voldenet> I'm betting that the file wasn't fetched right and tar fails for some reason

[14:00] *** Guest3 joined
[14:04] <Guest3> Hello, world! I'm trying to use mqueue libc function through NativeCall. I have the following code: http://ix.io/40m7

[14:04] <Guest3> It calls mq_getattr to put a message queue's attributes into the specified struct: `int mq_getattr(mqd_t mqdes, struct mq_attr *attr);`

[14:04] <Guest3> I open a message queue, get its file descriptior, pass it to mq_getattr along with a `my Attributes $attributes` (Attributes is a `class Attributes is repr('CStruct')` with the proper fields)

[14:04] <Guest3> But $attributes doesn't get changed. What am I doing wrong?

[14:10] *** morte_ left
[14:11] <Voldenet> you don't allocate attributes

[14:11] *** xinming left
[14:12] <Voldenet> mq_open returns -1 because you provide no attributes as well

[14:14] <Voldenet> (nevermind, attr can be null)

[14:17] <Voldenet> Guest3: try this http://ix.io/40md

[14:18] *** xinming joined
[14:19] *** perlbot left
[14:21] <Guest3> Voldenet: Thanks, that works! Why aren't there any warnings/errors reporteD?

[14:22] *** simcop2387 left
[14:22] *** perlbot joined
[14:24] *** simcop2387 joined
[14:33] *** gcd left
[14:38] <Voldenet> Guest3: because that's how C works – you allocate the object and pass the pointer (also you don't need "Attributes is rw")

[14:42] *** Sgeo joined
[14:43] <Voldenet> I think mq_getattr not returning -1 on attr being null is weird

[14:45] <Guest3> Voldenet: the man page states that they use the defaults when attr is NULL

[14:47] <Voldenet> for mq_open, yes, but mq_getattr… ¯\_(ツ)_/¯ 

[14:47] <Voldenet> you may be interested in higher level wrapper, btw https://raku.land/cpan:JSTOWE/MQ::Posix

[15:42] *** linkable6 left
[15:42] *** evalable6 left
[15:44] *** linkable6 joined
[15:45] *** evalable6 joined
[16:09] *** jgaz left
[16:30] *** Guest3 left
[16:37] <Geth> ¦ Documentable/search-categories-streamlined: 1fe7cd1cbd | Altai-man++ | 3 files

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: Streamline search categories processing

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: 

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - For Index, just follow the simple "Take first meta as category"

[16:37] <Geth> ¦ Documentable/search-categories-streamlined:   or report an error heuristic

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - For Primary, allow to overload header processor with something custom

[16:37] <Geth> ¦ Documentable/search-categories-streamlined:   ($*HEADING-TO-ANCHOR-TRANSFORMER-ACTIONS)

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - Streamline Search generation: prefer primary pages over secondary ones,

[16:37] <Geth> ¦ Documentable/search-categories-streamlined:   detect duplicate search anchors, be better at calculating categories

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: review: https://github.com/Raku/Documentable/commit/1fe7cd1cbd

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: b3c851fb08 | Altai-man++ | 5 files

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: Update tests to match new implementation

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: review: https://github.com/Raku/Documentable/commit/b3c851fb08

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: 628020621e | Altai-man++ | 6 files

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: Refine treating of ref categories

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: 

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - Revert a number of surplus changes

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - Tweak logic of URLs for references (@JJ++)

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - Add more coverage

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - Make the code a bit more robust against broken syntax references

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: - Factor out, cleanup some code

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: 

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: This is a tradeoff between changing numerous things and changing

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: the bare minimum to make things work according to the new spec.

[16:37] <Geth> ¦ Documentable/search-categories-streamlined: review: https://github.com/Raku/Documentable/commit/628020621e

[16:53] <[Coke]> sena_kun++

[16:54] <sena_kun> took a whole day, but yay, progress. I guess next goes live updating and smaller tweaks

[17:06] *** sena_kun left
[17:07] *** sena_kun joined
[17:49] *** sena_kun left
[17:52] *** sena_kun joined
[17:55] *** kostas joined
[17:56] *** kostas left
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:31] *** morte_ joined
[18:37] *** morte_ left
[18:44] <SmokeMachine> .tell kawaii it seems mint (https://github.com/shuppet/raku-mint) is breaking with the last Red's version (https://github.com/FCO/Red/runs/6898580191?check_suite_focus=true#step:6:40). I just want to know if I have break it. Sorry for interrupting. 

[18:44] <tellable6> SmokeMachine, I'll pass your message to kawaii

[19:37] *** tellable6 left
[19:37] *** linkable6 left
[19:37] *** evalable6 left
[19:37] *** evalable6 joined
[19:37] *** tellable6 joined
[19:38] *** linkable6 joined
[19:50] *** lichtkind joined
[20:38] *** Guest3 joined
[20:40] <Guest3> I'm just tinkering with Raku, trying to see if I can change the compilation errors' message. I thought I could augment X::Comp's .gist method, but it throws X::Syntax::Augment::Illegal: Cannot augment X::Comp because it is closed. Why? What does it mean to be closed?

[21:07] *** donpdonp- is now known as donpdonp

[21:33] *** donpdonp is now known as donpdonp_

[21:33] *** donpdonp_ is now known as donpdonp|z

[21:54] *** Guest3 left
[21:55] *** Guest3 joined
[22:00] <[Coke]> closed is used only in that error message, but if you dig through the rakudo source, you can see that the exception that has that message is throw if the metadata about that object disallows augmenting... X::Comp is a role, not a class, and you can't augment it.

[22:00] <[Coke]> m: dd so X::Comp.HOW.archetypes.augmentable

[22:00] <camelia> rakudo-moar d253dc79e: OUTPUT: «Bool::False␤»

[22:00] <[Coke]> m: dd so Int.HOW.archetypes.augmentable

[22:00] <camelia> rakudo-moar d253dc79e: OUTPUT: «Bool::True␤»

[22:01] <[Coke]> while it doesn't mention closed, https://docs.raku.org/syntax/augment does mention "existing classes and grammars"

[22:02] <Guest3> Why can't we augment roles?

[22:02] <[Coke]> m: dd X::Comp.HOW; dd X::Comp.HOW.archtetypes;

[22:02] <camelia> rakudo-moar d253dc79e: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW.new␤No such method 'archtetypes' for invocant of type␤'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at <tmp> line 1␤␤»

[22:02] <[Coke]> The unhelpful answer is that it was designed that way. Not sure why.

[22:02] <Guest3> I understand that the code doesn't allow so; but from a practical point of view, why was it done thatway?

[22:02] <[Coke]> m: dd X::Comp.HOW; dd X::Comp.HOW.archetypes;

[22:02] <camelia> rakudo-moar d253dc79e: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW.new␤(Perl6::Metamodel::Archetypes without .raku or .perl method)␤»

[22:03] <[Coke]> m: dd X::Comp.HOW; dd X::Comp.HOW.archetypes.raku;

[22:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW.new␤No such method 'raku' for invocant of type␤'Perl6::Metamodel::Archetypes'␤  in block <unit> at <tmp> line 1␤␤»

[22:03] <[Coke]> (that's getting into guts, there, not surprising)

[22:03] <Guest3> m: say X::Comp.HOW.archetypes.^methods

[22:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «(nominal nominalizable inheritable inheritalizable composable composalizable generic parametric coercive definite augmentable CREATE bless BUILDALL new defined ACCEPTS NOT-ACCEPTS isa)␤»

[22:05] <Guest3> Roles not being augmentable means that if I want to change the compilation errors' message I gotta augment dozens of classes...

[22:37] *** lichtkind left
[22:54] <Guest3> Actually, it looks like I can't augment methods that aren't multi methods initially. That means that some errors like X::Syntax::Confused that only have a single `method message` can't be replaced...

[22:59] *** Guest3 left
[23:21] <[Coke]> m: dd <Class Coercion ConcreteRole CurriedRole Definite Enum Generic Grammar Module Native NativeRef Package ParametricRoleGroup ParametricRole Subset>.map({::Metamodel::($_ ~ "HOW")}).grep({$_.new.archetypes.augmentable})

[23:21] <camelia> rakudo-moar d253dc79e: OUTPUT: «(Perl6::Metamodel::ClassHOW, Perl6::Metamodel::EnumHOW, Perl6::Metamodel::GrammarHOW).Seq␤»

[23:22] <[Coke]> (sorry was actually working on that for a bit. :)

[23:59] *** evalable6 left
[23:59] *** linkable6 left
