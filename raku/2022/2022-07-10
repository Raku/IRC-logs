[00:06] *** reportable6 left
[00:06] *** reportable6 joined
[01:06] *** sourceable6 left
[01:06] *** bloatable6 left
[01:06] *** unicodable6 left
[01:06] *** evalable6 left
[01:06] *** nativecallable6 left
[01:06] *** quotable6 left
[01:06] *** bisectable6 left
[01:06] *** statisfiable6 left
[01:06] *** shareable6 left
[01:06] *** reportable6 left
[01:06] *** linkable6 left
[01:06] *** committable6 left
[01:06] *** tellable6 left
[01:06] *** notable6 left
[01:06] *** greppable6 left
[01:06] *** coverable6 left
[01:06] *** benchable6 left
[01:06] *** releasable6 left
[01:07] *** committable6 joined
[01:07] *** tellable6 joined
[01:07] *** notable6 joined
[01:07] *** evalable6 joined
[01:07] *** nativecallable6 joined
[01:08] *** statisfiable6 joined
[01:08] *** coverable6 joined
[01:08] *** quotable6 joined
[01:08] *** bisectable6 joined
[01:08] *** releasable6 joined
[01:08] *** greppable6 joined
[01:09] *** benchable6 joined
[01:09] *** reportable6 joined
[01:09] *** sourceable6 joined
[01:09] *** bloatable6 joined
[01:09] *** unicodable6 joined
[01:09] *** shareable6 joined
[01:09] *** linkable6 joined
[01:33] *** jaguart left
[02:33] *** linkable6 left
[02:33] *** tellable6 left
[02:33] *** coverable6 left
[02:33] *** notable6 left
[02:33] *** shareable6 left
[02:33] *** statisfiable6 left
[02:33] *** nativecallable6 left
[02:33] *** bisectable6 left
[02:33] *** reportable6 left
[02:33] *** quotable6 left
[02:33] *** unicodable6 left
[02:33] *** evalable6 left
[02:33] *** greppable6 left
[02:33] *** releasable6 left
[02:33] *** committable6 left
[02:33] *** bloatable6 left
[02:33] *** benchable6 left
[02:33] *** sourceable6 left
[02:33] *** shareable6 joined
[02:34] *** bloatable6 joined
[02:34] *** nativecallable6 joined
[02:34] *** tellable6 joined
[02:34] *** releasable6 joined
[02:34] *** statisfiable6 joined
[02:34] *** greppable6 joined
[02:34] *** unicodable6 joined
[02:35] *** linkable6 joined
[02:35] *** coverable6 joined
[02:35] *** reportable6 joined
[02:35] *** quotable6 joined
[02:35] *** notable6 joined
[02:36] *** bisectable6 joined
[02:36] *** committable6 joined
[02:36] *** benchable6 joined
[02:36] *** evalable6 joined
[02:36] *** sourceable6 joined
[02:38] *** simcop2387 left
[02:39] *** perlbot left
[02:50] *** simcop2387 joined
[02:52] *** perlbot joined
[03:16] *** swaggboi left
[03:17] *** swaggboi joined
[03:21] *** Sankalp left
[03:25] *** Sankalp joined
[04:25] *** tellable6 left
[04:25] *** nativecallable6 left
[04:25] *** bloatable6 left
[04:25] *** releasable6 left
[04:25] *** shareable6 left
[04:25] *** unicodable6 left
[04:25] *** quotable6 left
[04:25] *** coverable6 left
[04:25] *** reportable6 left
[04:25] *** bisectable6 left
[04:25] *** statisfiable6 left
[04:25] *** notable6 left
[04:25] *** linkable6 left
[04:25] *** committable6 left
[04:25] *** greppable6 left
[04:25] *** benchable6 left
[04:25] *** sourceable6 left
[04:25] *** evalable6 left
[04:26] *** notable6 joined
[04:26] *** statisfiable6 joined
[04:26] *** bloatable6 joined
[04:26] *** shareable6 joined
[04:26] *** bisectable6 joined
[04:26] *** linkable6 joined
[04:26] *** coverable6 joined
[04:26] *** tellable6 joined
[04:26] *** quotable6 joined
[04:27] *** evalable6 joined
[04:27] *** committable6 joined
[04:27] *** greppable6 joined
[04:27] *** sourceable6 joined
[04:27] *** reportable6 joined
[04:27] *** nativecallable6 joined
[04:28] *** benchable6 joined
[04:28] *** releasable6 joined
[04:28] *** unicodable6 joined
[04:29] *** razetime joined
[05:29] *** benchable6 left
[05:29] *** committable6 left
[05:29] *** notable6 left
[05:29] *** nativecallable6 left
[05:29] *** sourceable6 left
[05:29] *** coverable6 left
[05:29] *** statisfiable6 left
[05:29] *** reportable6 left
[05:29] *** bisectable6 left
[05:29] *** shareable6 left
[05:29] *** greppable6 left
[05:29] *** unicodable6 left
[05:29] *** tellable6 left
[05:29] *** quotable6 left
[05:29] *** releasable6 left
[05:29] *** bloatable6 left
[05:29] *** evalable6 left
[05:29] *** linkable6 left
[05:29] *** quotable6 joined
[05:29] *** sourceable6 joined
[05:29] *** evalable6 joined
[05:29] *** releasable6 joined
[05:30] *** committable6 joined
[05:30] *** statisfiable6 joined
[05:30] *** nativecallable6 joined
[05:30] *** benchable6 joined
[05:30] *** reportable6 joined
[05:30] *** coverable6 joined
[05:31] *** bisectable6 joined
[05:31] *** greppable6 joined
[05:31] *** bloatable6 joined
[05:31] *** tellable6 joined
[05:32] *** shareable6 joined
[05:32] *** notable6 joined
[05:32] *** linkable6 joined
[05:32] *** unicodable6 joined
[05:57] *** wcs left
[06:06] *** reportable6 left
[06:08] *** reportable6 joined
[06:14] *** razetime left
[06:27] *** jaguart joined
[06:28] *** stanrifkin joined
[07:19] *** stanrifkin left
[08:02] *** lockywolf left
[08:16] <guifa> tonyo: I'm writing an ECMA regex slang 

[08:16] *** Guest15 joined
[08:17] <guifa> I know life would be easier to just wait for RakuAST to finish but … I'm impatient (and also figure learning a bit more about the internals isn't ever a bad thing)

[08:17] <Guest15> Hi folks How can I compile Raku script to executable binary file? thanks :3

[08:19] *** Guest15 left
[08:33] *** lockywolf joined
[09:00] *** andrea[m] left
[09:07] *** Colere left
[09:08] *** Colere joined
[09:10] *** Furor joined
[09:13] *** Colere left
[09:23] *** Sgeo left
[09:38] *** abraxxa-home joined
[10:11] *** p6steve left
[10:43] *** sena_kun joined
[11:24] *** fitchett joined
[11:28] *** fitchett left
[11:28] *** Furor is now known as Colere

[12:03] *** swaggboi left
[12:04] *** swaggboi joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:27] *** wcs joined
[12:53] *** sena_kun left
[13:27] <Xliff> Is there a module out there that will handle OAuth2 negotiation? If so is it compatible with Google's services?

[13:29] *** frost left
[13:30] *** sena_kun joined
[14:09] <Geth> ¦ problem-solving: lizmat assigned to rba Issue modules.raku.org should be deprecated https://github.com/Raku/problem-solving/issues/330

[14:13] *** jaguart left
[14:57] <discord-raku-bot> <stevied> anyone experienced with NativeCall out there who might be able to offer some insight on this? https://www.reddit.com/r/rakulang/comments/vvpikh/looking_for_guidance_on_getting_nativecall/

[15:13] *** linkable6 left
[15:13] *** evalable6 left
[15:15] *** linkable6 joined
[15:16] *** evalable6 joined
[16:04] *** swaggboi left
[16:21] *** swaggboi joined
[16:26] *** guifa left
[16:39] <Voldenet> stevied: I'm not sure if you can directly have function pointers as fields, but you can make c shared lib to set enter_block, leave_block etc.

[16:39] <tellable6> Voldenet, I'll pass your message to stevied

[16:57] <discord-raku-bot> <stevied> I see it

[16:58] <discord-raku-bot> <stevied> voldernet, before I can tackle that problem, I can's seem to get the correct arguments to md_parse() function passed correctly

[17:22] *** sena_kun left
[17:23] *** sena_kun joined
[17:47] <Voldenet> because you need to assign callbacks to fields in the struct

[17:47] <Voldenet> otherwise, you'd get segfault

[17:52] <Voldenet> though I'm not entirely sure if you can store such callbacks in a field safely or would it be garbage collected

[17:53] *** swaggboi left
[17:54] *** swaggboi joined
[17:55] <discord-raku-bot> <stevied> the docs had something about using a CPointer which seemed to allow you to do callbacks. I tried doing that but didn't get anywhere: https://docs.raku.org/language/nativecall#Basic_use_of_pointers

[17:55] <discord-raku-bot> <stevied> i don't know what I'm doing, though

[18:07] *** reportable6 left
[18:07] *** jaguart joined
[18:08] *** reportable6 joined
[18:20] <Geth> ¦ problem-solving/deprecating-modules: 2b5b22636a | (Elizabeth Mattijsen)++ | solutions/meta/deprecating-modules-website.md

[18:20] <Geth> ¦ problem-solving/deprecating-modules: Add solution for #330

[18:20] <Geth> ¦ problem-solving/deprecating-modules: review: https://github.com/Raku/problem-solving/commit/2b5b22636a

[18:20] <Geth> ¦ problem-solving: lizmat++ created pull request #331: Add solution for #330

[18:20] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/331

[18:26] <Voldenet> CPointer doesn't hold any data, you can't* use it in this case

[18:27] <Voldenet> *you can, but it would mean making C wrapper with all related methods and alloc/free

[18:53] <[Coke]> weird, on mac os x, and since ... a few days ago, my 'raku' has vanished and rakubrew is now complaining it's from an unsigned dev.

[18:57] <discord-raku-bot> <stevied> so voldenet, are you are basically saying it's not really possible to use NativeCall with the md4c library?

[19:02] <[Coke]> ... and open a new shell and I'm fine? weird

[19:03] <discord-raku-bot> <Quibono> Are folks familiar with supercompilation or should I explain what that is? My raku project is about it

[19:03] <Voldenet> if you managed to cast subroutine into Pointer then it's possible to use without a wrapper

[19:04] <lizmat> Quibono: please elaborate  :-)

[19:06] *** xinming left
[19:07] <discord-raku-bot> <Quibono> So basically it’s close to program synthesis, where you feed the SC a program and say “I want one that does the same thing, but more X” whether X is faster, energy efficient, what have you. It’s usually used as like a final step to eek out a tiny bit of extra perf for compiling stuff

[19:07] <discord-raku-bot> <Quibono> I want to see if I can use it to generate compiler passes

[19:07] <discord-raku-bot> <Quibono> So the only thing in the compiler that wouldn’t be automated is the IR gen and the supercompiler

[19:08] *** xinming joined
[19:09] *** sena_kun left
[19:11] *** sena_kun joined
[19:11] <lizmat> sounds cool

[19:11] <lizmat> you might want to check that out with the compiler wizards on #moarvm

[19:13] <discord-raku-bot> <Quibono> Yeah, I’d also love to figure out what you’d need to make raku compile to native code heh.

[19:14] *** melezhik joined
[19:15] <lizmat> Quibono:  MoarVM comes with a JIT for Intel processors...   

[19:15] <melezhik> Hi jjatria , thanks for https://github.com/melezhik/Sparrow6/pull/5 , out of curiosity - are you using sparrow?

[19:15] <lizmat> sadly not for ARM

[19:16] <jjatria> Hi melezhik! I was looking at it thinking about automatic builds for my PublicSuffix dist

[19:16] <jjatria> So, not using it yet, but thinking that maybe I can

[19:16] <melezhik> ok, I see

[19:16] <melezhik> let me know if you need any help with it

[19:17] <jjatria> Is the docker image currently the best way to set up a local instance?

[19:17] <discord-raku-bot> <Quibono> Lizmat: as an arm user yes that is sad, but understandable.

[19:17] <melezhik> if you need to manage VM, ssh hosts you might also be interested in sparrowdo - which is a subtotal based on Sparrow, specifically designed for that task

[19:18] <jjatria> That "local instance" is thinking about Sparky, actually

[19:19] <melezhik> or if you need asynchronous multiple hosts configuration, with logic distributed across many hosts you may be interested in sparrowdo with Sparky

[19:19] <melezhik> what's your case in 2 words?

[19:20] <melezhik> so,  you need to configure localhost, right?

[19:20] <jjatria> In two words!? Damn, tall ask :D 

[19:20] <jjatria> "Automatic releases"?

[19:21] <jjatria> I have a dist to query Mozilla's public suffix list, but that list gets updated several times a week, and I know I'll forget to update it, so I was thinking about having something that would check for new versions, and release when needed

[19:24] <jjatria> And I don't know if I want to have my fez credentials on the cloud :P 

[19:24] <jjatria> Some sort of limited fez token would be neat

[19:25] <lizmat> tonyo ^^

[19:26] <lizmat> jjatria: I guess you could set up a fez org, like we have done for raku-community-modules ?

[19:34] <melezhik> jjatria so you need a periodic task to check if the list has new updates, and then do _some_ actions if an update happens, right?

[19:43] <melezhik> we are talking about this one - https://gitlab.com/jjatria/publicsuffix ?

[19:44] <melezhik> oh, looks like you embed this data into your distro - https://gitlab.com/jjatria/publicsuffix/-/blob/main/resources/public_suffix_list.dat , right?

[19:45] <melezhik> let me think a bit about this and come up with some suggestion with how Sparrow/Sparky and friends could be useful here

[20:03] *** Xliff left
[20:10] *** melezhik left
[20:10] <nine> stevied: it's not surprising you're getting segfaults. That library expects function pointers for those callbacks, but you just gave it NULL. When the library tries to call one of these functions, it dereferences a NULL pointers

[20:10] <tellable6> nine, I'll pass your message to stevied

[20:11] <nine> Anyone: feel free to post that on the reddit thread

[20:24] *** Sgeo joined
[20:24] *** p6steve joined
[20:36] *** jaguart left
[20:43] <jjatria> lizmat: we do have an org for raku.land, so we could move it to that one, or to some other one

[20:43] <jjatria> melezhik: yup, that's the one. Also here: https://raku.land/zef:jjatria/PublicSuffix now that it lives 🎉 

[20:43] <tellable6> jjatria, I'll pass your message to melezhik

[21:01] *** sena_kun left
[21:02] *** sena_kun joined
[21:04] *** sena_kun left
[21:05] *** sena_kun joined
[21:08] *** abraxxa-home left
[21:13] *** swaggboi left
[21:14] *** swaggboi joined
[21:39] *** sena_kun left
[22:05] *** melezhik joined
[22:06] <melezhik> jjatria you can deploy sparky server and create a time scheduler project so that it pulls data from https://mozilla.org/MPL/2.0/ and in case any updates - update and create new distro release

[22:06] <tellable6> 2022-07-10T20:43:57Z #raku <jjatria> melezhik: yup, that's the one. Also here: https://raku.land/zef:jjatria/PublicSuffix now that it lives 🎉 

[22:13] *** melezhik left
[22:47] *** moritz left
[22:59] *** moritz joined
[23:22] *** melezhik joined
[23:22] <melezhik> .

[23:55] *** melezhik left
