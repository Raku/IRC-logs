[00:07] *** reportable6 left
[00:49] *** hasrthur joined
[00:52] *** jjido left
[00:54] *** hasrthur left
[01:09] *** reportable6 joined
[01:14] *** eseyman left
[01:15] *** dextercd left
[02:15] *** unicodable6 left
[02:15] *** benchable6 left
[02:15] *** committable6 left
[02:15] *** releasable6 left
[02:15] *** greppable6 left
[02:15] *** reportable6 left
[02:15] *** sourceable6 left
[02:15] *** coverable6 left
[02:15] *** evalable6 left
[02:15] *** nativecallable6 left
[02:15] *** bloatable6 left
[02:15] *** bisectable6 left
[02:15] *** quotable6 left
[02:15] *** tellable6 left
[02:15] *** statisfiable6 left
[02:15] *** notable6 left
[02:15] *** squashable6 left
[02:15] *** shareable6 left
[02:16] *** tellable6 joined
[02:16] *** unicodable6 joined
[02:16] *** benchable6 joined
[02:17] *** reportable6 joined
[02:18] *** squashable6 joined
[02:18] *** statisfiable6 joined
[02:18] *** bisectable6 joined
[02:18] *** releasable6 joined
[02:21] *** clarjon1 left
[03:09] *** simcop2387 left
[03:09] *** perlbot left
[03:15] *** simcop2387 joined
[03:16] *** perlbot joined
[03:16] *** sourceable6 joined
[03:17] *** greppable6 joined
[03:17] *** bloatable6 joined
[03:18] *** notable6 joined
[04:15] *** evalable6 joined
[04:16] *** shareable6 joined
[04:18] *** coverable6 joined
[04:41] *** ProperNoun left
[04:41] *** ProperNoun joined
[05:16] *** nativecallable6 joined
[06:08] *** reportable6 left
[06:11] *** reportable6 joined
[06:18] *** committable6 joined
[06:35] *** linkable6 joined
[06:44] *** xinming joined
[07:06] *** squashable6 left
[07:09] *** squashable6 joined
[07:16] *** quotable6 joined
[07:31] *** epony joined
[07:40] *** seednode99 left
[07:41] *** seednode99 joined
[08:15] <Maxdamantus> Does it seem strange that this 243 KiB UTF-8 string requires more than 16 GiB of memory?

[08:15] <Maxdamantus> $ jq -n -j 'range(0, 50000) | [., 768] | implode' | raku -e 'slurp;'

[08:15] <Maxdamantus> Killed

[08:17] *** squashable6 left
[08:19] *** squashable6 joined
[08:20] *** squashable6 left
[08:22] <Maxdamantus> eval: my @a; for 0..50000 { @a.push($_, 0x301); }; @a.chrs;

[08:22] <evalable6> Maxdamantus, rakudo-moar fb909efce: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[08:28] <MasterDuke> committable6: releases my @a; for 0..50000 { @a.push($_, 0x301); }; @a.chrs;

[08:38] <committable6> MasterDuke, https://gist.github.com/2fde89e2dc1b1367bb6914e05054f85e

[08:53] *** lichtkind joined
[09:29] *** jjido joined
[09:31] *** squashable6 joined
[10:00] *** Sgeo left
[10:02] *** jjido left
[10:51] *** hasrthur joined
[10:55] *** hasrthur left
[10:58] *** Guest35 joined
[11:00] *** Guest35 left
[11:34] *** jjido joined
[12:07] *** reportable6 left
[12:10] *** xinming left
[12:19] <Voldenet> it doesn't seem strange, printing it out to the terminal is also painfully slow

[12:22] <Voldenet> btw, jq uses ; as args separator, not ,

[12:23] <Voldenet> so `jq -n -j 'range(0; 50000) | [., 768] | implode' | raku -e 'slurp;'`

[12:49] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/01/16/fooled-by-complexety/

[12:50] <lizmat> s/complexety/complexity/ ?

[13:03] *** xinming joined
[13:18] <gfldex> fixed, thanks

[13:19] <Voldenet> last time i checked things like `sub infix:<notnilor>` really slowed down the script

[13:24] <Voldenet> > sub notnilor(\maybenil, \alternative) { … }; .&needle.&notnilor(Empty)

[13:24] <Voldenet> this would be a lot faster to initialize, because grammar doesn't change

[13:24] <moon-child> isn't notnilor just //?

[13:25] <Voldenet> not exactly

[13:26] <Voldenet> m: say Any =:= Nil

[13:26] <camelia> rakudo-moar fb909efce: OUTPUT: «False␤»

[13:27] <moon-child> ah, sure

[13:27] <moon-child> but I don't think that matters in this particular case

[13:29] <Voldenet> you can check that it does have very different performance characteristics

[13:30] <Voldenet> in fact, having it as operator is a lot faster

[13:31] <Voldenet> nevermind, I read numbers wrong

[13:36] *** monkey_ joined
[13:46] *** xinming left
[13:48] *** xinming joined
[13:53] <gfldex> In a module precomp takes care of that and our grammar engine is not optimised at all.

[13:55] <Geth> ¦ doc: tbrowder self-assigned Create a tutorial on practical exception handling https://github.com/Raku/doc/issues/4016

[14:01] *** jjido left
[14:08] *** reportable6 joined
[14:39] *** nebuchad` left
[14:51] *** ProperNoun left
[14:52] *** monkey_ left
[15:11] <discord-raku-bot> <Anton Antonov#7232> I assume there are at least a few packages/modules that generate Raku module/package folder structure and some of the files. Any links or recommendations? (I found "Ddt" and some related ones...)

[15:17] *** xinming left
[15:19] *** xinming joined
[15:53] *** jjido joined
[16:11] *** monkey_ joined
[16:30] <tbrowder> discord-raku-bot: are you looking to build new module? if so, see module App::Mi6

[16:31] <tbrowder> highly recommended (with the --zef option)

[16:31] <tbrowder> it's favored by lizmat

[16:32] * lizmat is just lazy :-)

[16:32] <tbrowder> no, energy conserving for more productivity!

[16:35] <tbrowder> it's primarily for use with github. yr mileage may vary with other git servers

[16:50] <discord-raku-bot> <Anton Antonov#7232> <@755062053282119803> Thanks!

[16:53] <discord-raku-bot> <Anton Antonov#7232> <@755062053282119803> "are you looking to build new module?" -- I want create quickly "disposable" modules that are in fact "data packages". Here by "data package" I mean a Raku module that (1) has certain data in the "resources" folder, (2) has functions for data retrieval and metadata descriptions in the "lib" folder, and (3) likely to have tests for certain invariants that are satisfied by the data.

[17:03] <lizmat> a simple module exposing %?RESOURCES should do the trick ?

[17:10] *** monkey_ left
[17:10] *** clarjon1 joined
[17:11] <discord-raku-bot> <Anton Antonov#7232> @lizmat Yes, I think so. Basically, I am making a conversational agent for data acquisition. After the user has selected the dataset I want the system to generate a data package that makes the use of that dataset convenient. In Raku this means have (most likely) a CSV file in "resources" folder and a module function that reads that CSV file.

[17:11] <discord-raku-bot> <Anton Antonov#7232> I think I am repeating myself, but I hope it is more clear I am trying to do...

[17:12] <lizmat> are you going to generate that CSV file ?

[17:19] <lizmat> Anton Antonov: if that is the case, then maybe it makes more sense to generate Raku source-code, and have that pre-compiled

[17:20] <lizmat> it makes developing and installing such a module a bit of a pain, but it will make startup so much faster  :-)

[17:20] <discord-raku-bot> <Anton Antonov#7232> @lizmat The dataset it is retrieved with the package `Data::ExampleDatasets`. And yes, pre-compilation would make sense, at least for small dataset.

[17:20] <lizmat> see  https://raku.land/zef:lizmat/uniname-words for this approach

[17:22] <discord-raku-bot> <Anton Antonov#7232> The process I after is demonstrated / outlined here: https://www.youtube.com/watch?v=eJ7355AJSP4#t=885 .

[17:22] <discord-raku-bot> <Anton Antonov#7232> BTW, that is what I am working for my FOSDEM22 Raku presentation...

[17:24] <discord-raku-bot> <Anton Antonov#7232> Basically, I am preprogramming the Mathematica-and-Raku conversational agent I presented last year the Wolfram Technology Conference into a "completely Raku" conversational agent.

[17:31] *** hasrthur joined
[17:33] <discord-raku-bot> <Anton Antonov#7232> @lizmat I definitely have to use BEGIN in my other conversational-agent-related packages. Thanks for providing an example!

[17:33] <lizmat> you're welcome  :-)

[17:38] *** ProperNoun joined
[17:46] *** Kaiepi left
[17:53] <discord-raku-bot> <Anton Antonov#7232> @lizmat This article of yours is both concise and  instructive: https://opensource.com/article/18/10/how-phasers-work-perl-6

[18:01] *** Kaiepi joined
[18:04] *** xinming left
[18:07] *** reportable6 left
[18:36] <lizmat> Anton Antonov: thank you

[18:56] <tbrowder> i just added a practical example of using CATCH at Raku/doc issue #4016. i would appreciate any comments on it

[19:05] <moon-child> tbrowder: it feels a bit contrived to die inline and catch right away.  I wasn't initially sure what or where the error handling was

[19:05] <moon-child> what about something like this? http://ix.io/3Mui/perl6

[19:07] *** evalable6 left
[19:07] *** linkable6 left
[19:09] *** evalable6 joined
[19:10] <tbrowder> moon-child: much better example for sure. my immediate goal was to use the right forms and syntax to fit my real problem. but i think yours is the way to go for the docs (and it looks like an easier drop-in, too). thanks!

[19:10] <moon-child> :)

[19:10] *** linkable6 joined
[19:12] <Voldenet> tbrowder: i'd ditch nested for

[19:13] <tbrowder> why?

[19:14] <tbrowder> that's a common idiom for us simple coders

[19:14] *** eseyman joined
[19:15] *** discord-raku-bot left
[19:15] *** discord-raku-bot joined
[19:16] <Voldenet> it makes reading, writing and debugging code harder

[19:17] <Voldenet> I've changed it a little bit: http://ix.io/3Mun/perl6

[19:17] <Voldenet> in real life processing a sheet is long and difficult

[19:18] <lizmat> one note: there's currently a bug in the return value of a scope, if CATCH is the last element of a scope

[19:18] <lizmat> since it doesn't matter where it is located in a scope, I always suggest to put the CATCH block at the start

[19:18] <Voldenet> that makes sense

[19:19] <Voldenet> and it may help people get rid of the assumption that it's like try/catch

[19:19] <tbrowder> Voldenet: ok, i think i see what you mean, and it is more like my actual use.

[19:20] <japhb> Just had failure installing Cairo module on Rakudo HEAD.  Currently building again from scratch to see if it's flaky or hard fail.

[19:20] *** discord-raku-bot left
[19:20] *** discord-raku-bot joined
[19:20] <moon-child> Voldenet: actually processing a sheet involves a graph traversal.  I think a nested for-loop is fine in this case, since the interesting computation will happen on cells (rather than rows) anyway

[19:21] <Voldenet> + sheet is 2d grid of cells

[19:21] *** Kaiepi left
[19:21] <moon-child> (or--depends how clever you are.  If I were making a spreadsheet, I would make its representation columnar and semi-sparse)

[19:22] *** Kaiepi joined
[19:24] <Voldenet> if I were making a spreadsheet I'd write rdbms and then ditch the project before even getting into spreadsheet part ;)

[19:24] <Voldenet> all important problems were solved before spreadsheets anyway

[19:24] <moon-child> yes

[19:24] <moon-child> spreadsheets are dumb

[19:25] <moon-child> still a better operational model than unix™

[19:26] <tbrowder> i'm not trying to solve the world's probs at the top level, just mine,one at a

[19:27] <moon-child> tbrowder: see, that's your mistake

[19:27] <tbrowder> time and hope it helps another

[19:27] <moon-child> you're likely to actually _get_ somewhere with that sort of strategy

[19:27] *** Sgeo joined
[19:27] <Voldenet> True, to write perfect spreadsheets, you first need to solve world poverty problem

[19:27] <moon-child> and what's the point of getting places and doing things??

[19:28] <Voldenet> seriously though, especially when things are targeted to beginners - smaller function better

[19:29] <tbrowder> no srgument here, but this problem is to hide unnecessary stuff from the use

[19:30] <tbrowder> but use good practice while doing it if i can

[19:30] <Voldenet> and good CATCHes are good in locating errors as well, encapsulating them in subroutines makes the whole experience smoother later on

[19:31] <tbrowder> thanks for the useful comments. i'll improve the example and ask for review again.

[19:41] <discord-raku-bot> <Anton Antonov#7232> @moon-child "[...] If I were making a spreadsheet, I would make its representation columnar and semi-sparse"  -- Interesting statement. Can you expand on it?

[19:52] *** discord-raku-bot left
[19:52] *** discord-raku-bot joined
[19:56] *** discord-raku-bot left
[19:57] *** discord-raku-bot joined
[19:57] <tbrowder> note the Perl reader allows for that, but I turn missing or empty cells into '' for convenience

[19:59] <tbrowder> at least i plan that for my initial handling. i have to deal with some weird formats from inexperience spreadsheet creators

[20:00] <tbrowder> *inexperienced

[20:00] <tbrowder> with weird cell values sometimes.

[20:00] <tbrowder> or invalid values

[20:01] <moon-child> @Anton Antonov not sure what more there is to say.  Columnar means cells which are immediately above or below one another are stored contiguously.  Semi-sparse means we make an attempt not to store empty cells

[20:04] <tbrowder> anyway, i rearranged Voldenet's example per lizmat's comments, made a few other tweaks, and will update the issue example momentarily...

[20:11] <discord-raku-bot> <Anton Antonov#7232> @moon-child So, you would use the so called long format? (Which corresponds to a certain sparse array scheme.)

[20:12] <moon-child> yes.  Column stores rock

[20:13] <discord-raku-bot> <Anton Antonov#7232> @moon-child Do you consider having heterogenous value types in a column?

[20:13] <tbrowder> ok, so updated. notice i was able to eliminate the "next" statements, possibly due to moving the CATCH blocks per lizmat.

[20:13] <moon-child> sure.  That would just be a part of the sparse representation

[20:13] <moon-child> 'run of n packed integers; run of m spaces; a string; run of p floats'

[20:15] <tbrowder> yes, the original Excel xlsx files use such a format, and Perl's Spreadsheet::Read preserves it, but I don't

[20:16] <moon-child> yeah

[20:16] <moon-child> as I said, I wouldn't make a spreadsheet; but if I _were_ to do so...

[20:17] <tbrowder> anyhoo, interested parties please review doc issue #4016

[20:18] <Voldenet> looks good

[20:18] *** discord-raku-bot left
[20:18] *** discord-raku-bot joined
[20:18] <Voldenet> I'm not sure whether `say "" ~ .Str` or `say "", .Str` is better

[20:19] <moon-child> why do you need more than say .Str?

[20:19] <Voldenet> that's an excelent question - have you ever debugged a program where the error is just

[20:19] <Voldenet> "Invalid argument"? :D

[20:19] <Voldenet> without a stack trace, no less

[20:20] <tbrowder> ah, you folks are now point out good hints that would go toward make a good Raku post or a docs chunk  ;-D

[20:21] <tbrowder> *pointing *making

[20:21] <moon-child> Voldenet: oh, you mean like say "..." ~ .Str

[20:21] <Voldenet> Ah, right

[20:21] <tbrowder> gotta get back to real world

[20:21] <tbrowder> bye

[20:22] *** gfldex left
[20:22] <moon-child> not literally an empty string :P

[20:22] <moon-child> tbrowder: cya

[20:22] *** gfldex joined
[20:22] <tbrowder> thanks all, cya2

[20:22] <discord-raku-bot> <Hydrazer#4827> ~ looks cooler

[20:22] <moon-child> for me , is less mental overhead

[20:23] *** discord-raku-bot left
[20:23] *** discord-raku-bot joined
[20:24] <Voldenet> I use ~ more because it works in the context where you need to just pass the string

[20:24] <moon-child> yeah.  ~ is more general, , is more specific

[20:24] <moon-child> more specific methods require less context to parse

[20:31] <Voldenet> well I've checked and it more or less doesn't matter

[20:32] <Voldenet> https://github.com/rakudo/rakudo/blob/21a711/src/core.c/io_operators.pm6#L97

[20:39] *** hasrthur left
[21:10] *** reportable6 joined
[21:15] *** jjido left
[21:19] *** discord-raku-bot left
[21:19] *** discord-raku-bot joined
[21:22] *** gfldex left
[21:22] *** gfldex joined
[21:41] *** Kaiepi left
[21:42] <[Coke]> (columnar data) wonder if we support parquet

[21:42] *** Kaiepi joined
[21:46] *** sena_kun left
[21:46] *** sena_kun joined
[21:50] *** Xliff joined
[22:08] *** Sgeo_ joined
[22:11] *** Sgeo left
[22:13] *** discord-raku-bot left
[22:13] *** discord-raku-bot joined
[22:17] *** discord-raku-bot left
[22:18] *** discord-raku-bot joined
[22:29] *** jjido joined
[22:40] *** hasrthur joined
[22:49] *** hasrthur left
[22:54] *** jjido left
[23:21] *** lichtkind left
[23:52] *** Manifest0 left
