[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[00:12] *** vrurg left
[00:13] *** vrurg joined
[00:32] *** wcs joined
[00:40] *** frost joined
[01:15] *** cbk joined
[01:53] *** Kaiepi left
[01:54] *** cbk left
[02:13] *** cbk joined
[02:47] *** wcs left
[02:53] *** wcs joined
[03:10] *** swaggboi left
[03:21] *** swaggboi joined
[03:40] *** Kaiepi joined
[04:27] *** Guest83 joined
[04:29] *** cbk left
[04:30] *** cbk joined
[04:31] *** Guest83 left
[04:31] *** cbk_ joined
[04:32] *** cbk__ joined
[04:35] *** cbk left
[04:35] *** cbk_ left
[04:37] *** cbk__ left
[04:37] *** cbk joined
[04:59] *** cbk left
[05:37] *** wcs left
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:18] *** Kaiepi left
[06:34] *** Sgeo left
[06:54] *** abraxxa joined
[07:01] *** abraxxa left
[07:02] *** abraxxa joined
[07:50] *** dakkar joined
[08:05] <El_Che> I am not enough of a C programmer to appreciate make, but if your language's project need it, you are doing somethiung wrong :) https://twitter.com/jjmerelo/status/1541505956986724352
[08:06] <El_Che> I have a few colleagues that used make to build go programs (a one liner), guess who put flames into that :)
[08:14] <guifa> trying to convert ECMA Regex to Raku regex is more complex than it seems at first
[08:48] <discord-raku-bot> <Nemokosch> Does it seem simple?
[08:48] <guifa> Yeah, you'd think it'd be
[08:48] <guifa> but the most complicated one so far has been on the surface devilishly simple
[08:49] <guifa> how would you convert ECMA /(a(b))(c)/ to Raku?
[08:50] *** linkable6 left
[08:50] *** evalable6 left
[08:52] *** linkable6 joined
[08:52] *** evalable6 joined
[08:54] <guifa> In ECMA, $0 = 'abc', $1 = 'ab', $2 = 'b', $3 = 'c'.  In Raku, $0 = 'ab', $0[0] = 'b', $1 = 'c', 
[08:57] <nine> Just linearize the Match objects into a list using depth first search
[09:00] <guifa> nine: yeah, I thought about that, but ultimately went the lazy route, and keep an @*positional and %*named index on hand, and at the end of the regex, apply a role that overrides the AT-POS and AT-KEY methods üôÉ
[09:15] <guifa> ECMA /(?<a>a)(b)/ becomes
[09:15] <guifa> ` /:my (@*POSITIONAL,%*NAMED);{@*POSITIONAL.push: $/}$<a>=(a{%*NAMED<a> = $/})(b{@*POSITIONAL.push: $/}){$/ does anon role ECMA-Match {method AT-POS($pos){@*POSITIONAL[$pos]};method AT-KEY($key){%*NAMED{$key}}}}/ `
[09:16] <guifa> admittedly, hideous, but since no end user will ever see it, meh :-)
[09:21] *** melezhik joined
[09:21] <melezhik> 0/
[09:22] <El_Che> big head today?
[09:23] <melezhik> Yeah, I don't how to do the small one )))
[09:23] <melezhik> Don't know
[09:23] <melezhik> Not an irc geek he-he )))
[09:23] <El_Che> o/
[09:24] <El_Che> ~o|~
[09:24] <El_Che> help, I can' t swim
[09:24] <melezhik> Need to copy paste )))
[09:24] <melezhik> What's up
[09:24] <El_Che> no "o" in a cyrillic keyboard? 
[09:25] <melezhik> o/
[09:25] <melezhik> Is it better?
[09:25] <melezhik> ... it is )))
[09:25] <melezhik> Should have done lower case )))
[09:26] <melezhik> What's actually up? Slowly preparing sparkyci + alpine packages for Raku modules integration
[09:29] <melezhik> I have an idea that people would need fast installation of their modules system wide using alpine apk
[09:31] <discord-raku-bot> <Nemokosch> Is the order of captures different?
[09:32] <guifa> Nemokosch: Yeah.  EMCA does flat ordering, and Raku nests
[09:32] <tellable6> guifa, I'll pass your message to Nemokosch
[09:34] *** melezhik left
[09:35] *** melezhik joined
[09:35] <melezhik> .
[09:37] *** melezhik left
[09:37] *** sena_kun joined
[09:41] *** melezhik joined
[09:41] *** melezhik left
[09:42] *** melezhik joined
[09:43] *** melezhik left
[09:46] *** melezhik joined
[09:47] *** melezhik left
[09:47] <discord-raku-bot> <Nemokosch> Huh
[09:51] *** sena_kun left
[09:52] *** sena_kun joined
[09:55] *** frost left
[10:01] <guifa> Just lots of little gotchas ‚Äî¬†like . in ECMA is equivalent to <-[\n]> in Raku
[10:03] *** melezhik joined
[10:05] <melezhik> So, I am testing a water with potential application of sparkyci for other languages , I raised a question on HN, a feedback would be appreciated - https://news.ycombinator.com/item?id=31998812
[10:07] *** melezhik left
[10:08] *** melezhik joined
[10:08] <melezhik> .
[10:11] *** melezhik left
[10:14] *** melezhik joined
[10:17] <Geth> ¬¶ ecosystem: f5f1764b87 | (Elizabeth Mattijsen)++ | META.list
[10:17] <Geth> ¬¶ ecosystem: Fix URL of the Digest module (again)
[10:17] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/f5f1764b87
[10:17] *** frost joined
[10:19] *** melezhik left
[10:27] *** dogbert17 joined
[10:58] *** jaguart joined
[11:18] *** frost left
[11:26] *** frost joined
[12:07] *** reportable6 left
[12:10] *** reportable6 joined
[12:15] *** sena_kun left
[12:18] *** sena_kun joined
[12:20] *** frost left
[12:47] *** nine left
[12:47] *** m_athias left
[12:47] *** nine joined
[12:48] *** m_athias joined
[12:49] <abraxxa> Util: thank you for https://www.youtube.com/watch?v=rSP_GgcHQ0Q ! I'm no fan of YouTube comments which might not reach you.
[13:02] <Geth> ¬¶ ecosystem: b5e6be17f9 | (Elizabeth Mattijsen)++ | META.list
[13:02] <Geth> ¬¶ ecosystem: Physics::Measure lives in the zef ecosystem now
[13:02] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/b5e6be17f9
[13:18] *** morte_ joined
[13:23] *** sena_kun left
[13:24] *** sena_kun joined
[13:26] *** wcs joined
[13:31] <guifa> well that's surprisingly Englis-like
[13:31] <guifa> `state @ = eager gather take self and find-matches-in self, :type<positional>;`
[14:26] *** linkable6 left
[14:26] *** evalable6 left
[14:26] *** evalable6 joined
[14:27] *** linkable6 joined
[14:38] <abraxxa> Raku remembers the type initially defined for a scalar variable, e.g. my Int $speed = 125; how can I display this type enforcement?
[14:39] <abraxxa> does the raku repl have some sort of autocomplete? double-tab or ? doesn't do anything
[14:45] <guifa> m: my Int $speed; say $speed.WHAT
[14:45] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´(Int)‚ê§¬ª
[15:02] *** Sgeo joined
[15:12] <[Coke]> that's not exactly right:
[15:12] <[Coke]> m: my Numeric $a; $a = 3; dd $a.WHAT; dd $a.VAR.WHAT
[15:12] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´Int‚ê§Scalar‚ê§¬ª
[15:12] <[Coke]> (note that "Numeric" as the restriction isn't there.)
[15:12] <[Coke]> m: my Numeric $a; dd $a.WHAT; $a = 3; dd $a.WHAT; dd $a.VAR.WHAT
[15:12] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´Numeric‚ê§Int‚ê§Scalar‚ê§¬ª
[15:12] <[Coke]> er, not there post-assignment.
[15:17] <[Coke]> m: my Numeric $a; dd $a.WHAT; $a = 3; dd $a.WHAT; dd $a.VAR.WHAT; dd $a
[15:17] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´Numeric‚ê§Int‚ê§Scalar‚ê§Int $a = 3‚ê§¬ª
[15:17] <[Coke]> (and dd only has the current type, not the type restriction also)
[15:33] *** sena_kun left
[15:34] <guifa> [Coke] eh yeah, you're right.  I typed without thinking
[15:34] <guifa> in other news, for making slangs, I just wrote a script to automagically namespace (and denamespace) a grammar 
[15:35] <guifa> ECMA regexen here we come
[15:38] <[Coke]> you can get it back by assigning Nil, checking the variable's type (Then Numeric), but that isn't helpful
[15:38] <[Coke]> m: my Numeric $a; dd $a.WHAT; $a = 3; dd $a.WHAT; $a = Nil; dd $a;
[15:38] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´Numeric‚ê§Int‚ê§Numeric $a = Numeric‚ê§¬ª
[15:38] <nine> m: my Numeric $a; $a = 3; dd $a.VAR.of
[15:38] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´Numeric‚ê§¬ª
[15:38] <[Coke]> OF!
[15:38] <[Coke]> Thank you, nine!
[15:38] <nine> Turns out, implementing a compiler frontend teaches you a _lot_ about a language
[15:39] <[Coke]> https://docs.raku.org/type/Scalar#method_of
[15:39] <[Coke]> :)\
[15:39] <[Coke]> er, :)
[15:39] <nine> I guess reading the docs would do the same :D
[15:39] <nine> Arguably writing a compiler is more fun though ;)
[15:55] <abraxxa> where is .of documented? I was looking the type tree up to https://docs.raku.org/type/Mu as I thought it must be defined there so every type has the method but can't find it
[15:55] <abraxxa> also I was expecting the methodname to be all uppercase like WHAT
[15:56] <abraxxa> [Coke]: ah, didn't grasp that your message was about my question, thanks
[15:56] <abraxxa> so not all types have a type restriction I can check using .of?
[15:58] <abraxxa> Array has .of but defined directly and not subclassed from somewhere upwards the class hierarchy
[15:58] <abraxxa> same for Hash
[16:00] <abraxxa> Rat is missing of!
[16:02] <abraxxa> ah, of is a method of Scalar which isn't a base class of Str, Int, ... but the thing the VAR method returns?!
[16:03] <abraxxa> which isn't documented ;-(
[16:03] <dutchie> abraxxa: see https://docs.raku.org/language/containers
[16:03] *** sena_kun joined
[16:04] <abraxxa> or at least it's documented here https://docs.raku.org/language/mop#VAR but not in the type docs which is always the place I look at when I want to know what methods a type has
[16:05] <abraxxa> doesn't the container have the type constraint which dictates what it can hold?
[16:06] <dutchie> exactly, that's the Scalar that .VAR accesses
[16:07] <abraxxa> so for example a variable my $a = 'foo'; is of type Scalar, holds a, no idea what it's called, of type Str?
[16:07] <abraxxa> no, because then I would be able to call .of on the container object
[16:08] <abraxxa> container -> Scalar -> Str?
[16:08] <abraxxa> so three objects for a single var?
[16:08] <dutchie> the container is the Scalar (by default with a constraint of Any), holding the Str
[16:08] <dutchie> m: my $a = 'foo'; say $a.VAR.of; say $a.WHAT
[16:08] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´(Mu)‚ê§(Str)‚ê§¬ª
[16:09] <dutchie> oh, apparently Mu, not Any
[16:09] <abraxxa> so why would I need to call .VAR on the Scalar to call one of its methods?
[16:10] <dutchie> because normally the Scalar hides itself
[16:10] <abraxxa> so $a is the Scalar which decontainerizes to the Str it holds for all method calls and if you want to get at the Scalar itself you'd need .VAR to get at it?
[16:10] <dutchie> exactly
[16:10] <abraxxa> Oh man!
[16:10] <abraxxa> every time I look at Raku I get turned down by the type system!
[16:10] <abraxxa> and I managed to grap and digest Typescript in just months
[16:12] <abraxxa> can you improve the docs so they contain EVERY method a type has?
[16:35] *** mexen joined
[16:37] *** abraxxa left
[16:41] *** morte_ left
[16:43] <tonyo> .
[16:57] <nine> abraxxa: as far as I can tell thats already the case
[16:57] <tellable6> nine, I'll pass your message to abraxxa
[17:01] *** dakkar left
[17:03] *** eseyman joined
[17:15] *** jaguart left
[17:16] <[Coke]> Sorry, which method was missing from where?
[17:23] <[Coke]> Note that VAR isn't technically a method
[17:31] *** jaguart joined
[17:37] * [Coke] points to https://docs.raku.org/language/typesystem#Reserved_method_names
[17:42] <[Coke]> TIL about "is hidden"
[17:43] <[Coke]> m: class A is hidden { method m {say "eek"} }; class B is A { method m { nextsame }}; B.new.m
[17:43] <camelia> rakudo-moar 6dc2f92c9: ( no output )
[18:06] *** reportable6 left
[18:09] *** reportable6 joined
[18:59] *** swaggboi left
[19:06] *** xinming joined
[19:07] *** xinming left
[19:09] *** xinming joined
[19:15] *** swaggboi joined
[19:16] *** swaggboi joined
[19:32] <jjatria> Ok, so this should let me implement SameSite: https://gitlab.com/jjatria/publicsuffix
[20:16] *** evalable6 left
[20:16] *** linkable6 left
[20:17] *** evalable6 joined
[20:18] *** linkable6 joined
[20:24] *** morte_ joined
[20:49] *** swaggboi left
[20:49] *** Xliff joined
[20:54] <Xliff> m: my %hash; role HashDefault[\T] { method AT-KEY (\k) { callwith(k) // T }; }; class C { }; %hash does HashDefault[C]; %hash<a> = 1; %hash<a>.say; %hash<b>.say; %hash.^name.say
[20:54] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´1‚ê§(C)‚ê§Hash+{HashDefault[C]}‚ê§¬ª
[20:54] <tellable6> 2022-07-05T14:39:57Z #raku <dakkar> Xliff: https://github.com/LLFourn/p6-CompUnit-Util#re-exporting may help make your life easier
[20:54] <Xliff> .tell dakkar Thanks
[20:54] <tellable6> Xliff, I'll pass your message to dakkar
[20:55] <Xliff> Hash with a default value. Anybody see any obvious holes?
[21:00] <japhb> m: my %hash is default(42); say %hash<foo>  # Xliff
[21:00] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´42‚ê§¬ª
[21:07] *** swaggboi joined
[21:35] *** clarjon1 joined
[21:51] *** Sgeo_ joined
[21:54] *** Sgeo left
[21:57] *** morte_ left
[21:58] *** sena_kun left
[22:25] <Voldenet> Xliff: there is one obvious hole
[22:25] <Voldenet> m: my %hash; role HashDefault[\T] { method AT-KEY (\k) { callwith(k) // T }; }; class C { }; %hash does HashDefault[C]; %hash<a> = Nil; %hash<a>.say; %hash<b>.say; %hash.^name.say
[22:25] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´(C)‚ê§(C)‚ê§Hash+{HashDefault[C]}‚ê§¬ª
[22:35] <Voldenet> m: my %hash; role HashDefault[\T] { method AT-KEY ($k, |) { self.EXISTS-KEY($k) ?? nextsame() !! T }; }; class C { }; %hash does HashDefault[C]; %hash<a> = Nil; %hash<a>.say; %hash<b>.say; %hash.^name.say
[22:35] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´(Any)‚ê§(C)‚ê§Hash+{HashDefault[C]}‚ê§¬ª
[22:35] <Voldenet> double lookup
[22:35] <Voldenet> but :p is also supported which is nice
[22:36] <Voldenet> m: my %hash; role HashDefault[\T] { method AT-KEY ($k, |) { self.EXISTS-KEY($k) ?? nextsame() !! T }; }; class C { }; %hash does HashDefault[C]; %hash<a> = Nil; %hash<a b>.say; %hash<a b>:p.say; %hash.^name.say
[22:36] <camelia> rakudo-moar 6dc2f92c9: OUTPUT: ¬´((Any) (C))‚ê§(a => (Any))‚ê§Hash+{HashDefault[C]}‚ê§¬ª
[22:37] <Voldenet> nevermind, :p works either way ‚îê(¬¥ÔΩû`Ôºõ)‚îå 
[22:40] *** Xliff_ joined
[23:11] *** jaguart left
[23:49] *** swaggboi left
