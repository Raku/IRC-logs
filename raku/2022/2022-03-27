[00:08] *** reportable6 left
[00:29] *** ggoebel joined
[00:44] <japhb> If you have two classes, say Foo::Bar and Foo::Quux, declared in two separate compunits, and Foo::Bar does `use Foo::Quux;` ... is there a way for Foo::Quux to do the equivalent of `trusts Foo::Bar;` without causing a use loop or erroring due to undefined stub?

[01:25] *** hesh307 left
[01:33] *** rustacean joined
[01:33] *** rustacean left
[01:33] *** razetime joined
[02:10] *** reportable6 joined
[02:26] *** razetime left
[02:26] *** razetime joined
[02:34] *** dustinm` left
[02:40] *** dustinm` joined
[03:02] <SmokeMachine> japhb: maybe stubbing Foo::Bar with `class Foo::Bar {‚Ä¶}`?

[03:06] <japhb> SmokeMachine: Didn't work.  That's the one that causes the error about stubbing Foo::Bar but not defining it in that compunit.  :-/

[03:57] *** linkable6 left
[03:57] *** evalable6 left
[03:59] *** linkable6 joined
[03:59] *** evalable6 joined
[07:00] *** Geth joined
[07:12] *** TempIRCLogger joined
[07:13] *** xinming left
[07:16] *** xinming joined
[07:17] *** TempIRCLogger left
[07:17] *** TempIRCLogger joined
[07:57] *** [Coke] left
[08:05] *** leah2 joined
[08:21] *** leah2 left
[08:38] *** leah2 joined
[08:46] *** [Coke] joined
[08:56] *** statisfiable6 joined
[09:43] *** Sgeo left
[09:53] *** linkable6 joined
[10:16] *** rustacean joined
[10:16] *** razetime left
[10:39] *** abraxxa-home joined
[11:04] *** djerius left
[11:04] *** djerius joined
[11:06] *** djerius left
[11:06] *** TempIRCLogger left
[11:06] *** djerius joined
[11:10] *** djerius left
[11:10] *** djerius joined
[11:40] *** hankache joined
[11:59] *** hankache left
[12:00] *** hankache joined
[12:08] *** reportable6 left
[12:10] *** reportable6 joined
[12:17] *** hankache left
[12:23] *** ProperN[out] joined
[12:24] *** rustacean is now known as razetime

[12:25] *** razetime left
[12:25] *** razetime joined
[12:25] *** ProperNoun left
[12:30] *** hankache joined
[12:32] *** hankache left
[12:49] *** razetime left
[12:53] *** hankache joined
[12:58] *** hankache left
[12:59] *** linkable6 left
[13:02] *** linkable6 joined
[13:05] *** razetime joined
[14:00] *** [Coke]_ joined
[14:02] *** [Coke] left
[14:03] *** ggoebel left
[14:07] *** hankache joined
[14:12] *** abraxxa-home left
[14:15] *** discord-raku-bot left
[14:15] *** discord-raku-bot joined
[14:22] *** hankache left
[14:36] *** Tirifto left
[14:58] *** lichtkind joined
[15:37] *** discord-raku-bot left
[15:37] *** discord-raku-bot joined
[15:41] <AlexDaniel> alright, so, as I'm trying to fix tellable I somehow decided that it'd be a good idea to update rakudo and everything to their latest version

[15:41] <AlexDaniel> versions rather

[15:42] <AlexDaniel> now I can't get anything to work ü§î rakudo itself installed just fine with rakubrew, so did zef (again with rakubrew using build-zef command)

[15:43] <AlexDaniel> Now I'm getting: Enabled fetching backends [git path curl wget] don't understand git://github.com/samcv/IRC-TextColor.git

[15:43] <AlexDaniel> You may need to configure one of the following backends, or install its underlying software - [pswebrequest]

[15:43] <ugexe> does git:// still work?

[15:44] <AlexDaniel> which is like hmmmm‚Ä¶ what exactly do I have set up wrong? I just tried to add the key with `ssh-add` maybe that's gonna help

[15:44] <ugexe> git config --global url.https://.insteadOf git://

[15:44] <ugexe> that would fix the protocol deprecation thing probabl

[15:44] <AlexDaniel> just to be clear, I'm trying to install dependencies of whateverable.

[15:46] <ugexe> did you try it again? sometimes the check for file extension (how it determines if it understands a url) intermitently fails for whatever reason

[15:46] <ugexe> even when that check is as simple as $url.ends-with(".tar.gz")

[15:46] <AlexDaniel> yeah, I'm trying it in a loop pretty much

[15:47] <AlexDaniel> there's another type of errors which is ‚ÄúCould not find JSON::Fast‚Äù, ‚ÄúCould not find URI‚Äù, ‚ÄúCould not find File::Directory::Tree‚Äù

[15:48] <AlexDaniel> I kinda assume that's because some modules use something that they don't specify in their dependencies

[15:51] <AlexDaniel> here's the full log of my attempts: https://gist.github.com/AlexDaniel/ed7b2e4ca349377370f5ed1652d1ee4d

[15:53] <gfldex> japhb: Please don't tell anyone that I told you: https://gist.github.com/eb28b4d6f21acbd62296d9ae699f9a68

[15:53] *** xinming left
[15:53] <AlexDaniel> I don't know what depends on CBOR::Simple but sure as hell it wasn't installed as a dependency for anything

[15:54] <gfldex> The .^compose is superstition tho.

[15:55] *** hankache joined
[15:56] <AlexDaniel> OK all good, after running zef install in a loop and then installing CBOR::Simple things seem to run now. Well, kinda: `No such method 'IO' for invocant of type 'Any'.  Did you mean 'so'?`, but that's in whateverable code, so should be easy to debug

[15:57] <AlexDaniel> 6c: say Any.IO

[15:58] <committable6> AlexDaniel, https://gist.github.com/52ce5d66bf169bddefbda14de8102dc8

[15:58] <AlexDaniel> in fact seems to be my own fault :)

[16:00] *** hankache left
[16:04] <ugexe> ===> Install [FAIL] for Whateverable:ver<1.0.11>: ===SORRY!=== Error while compiling /Users/ugexe/repos/zef/site#sources/FFCE30B7629EBB9BF4F889999F97C35CAC8EA91C (Whateverable)

[16:04] <ugexe> Redeclaration of symbol 'Message'.

[16:04] <ugexe> at /Users/ugexe/repos/zef/site#sources/FFCE30B7629EBB9BF4F889999F97C35CAC8EA91C (Whateverable):36

[16:04] <ugexe> ------> constant Message = IRC::Client::Message‚èè;

[16:04] <ugexe> thats what i got

[16:04] <ugexe> on moar-blead anyway

[16:04] <AlexDaniel> and it runs!! IT RUNS!! üéâü§ü

[16:05] <AlexDaniel> almost

[16:05] <japhb> gfldex: Oooh, interesting, thank you.

[16:07] *** n1to joined
[16:07] <AlexDaniel> ugexe: oh, hm. Maybe if you're installing whateverable as a module, then yes. I'm just trying to install the deps

[16:08] <AlexDaniel> and it runs now, the only issue currently is that IRC::Client doesn't seem to connect ü§î

[16:11] *** AlexDanielIRC joined
[16:13] <AlexDaniel> it connects! Wheeeeeeeeee!

[16:15] *** ggoebel joined
[16:28] *** zacts joined
[16:28] <tbrowder> hi, rakuuns [sic]   \o/

[16:29] <tbrowder> i'm developing a raku class factory (sort of)

[16:30] *** ggoebel left
[16:30] *** ggoebel joined
[16:31] <tbrowder> which requires a series of auto-generated modules and progs that each depends on its predecessor being unchanged since the last time it was used.

[16:33] <tbrowder> i can do some xtra labor and create shasums for each and store them somewhere, but is there a more elegant and rakuish way to do that?

[16:35] <tbrowder> codesections is working on some kind of persistent raku thing but i don't think it has been released yet.

[16:37] *** Tirifto joined
[16:40] <tbrowder> i first design a text template to describe the class. then i use that with a raku program to generate the class definition module. then i use the same program to create a separate module that defines subs using the class, and so on.

[16:43] <tbrowder> my use case is for rapid prototyping and trial of a multi-user db system while we  zero in on the final design. during the trial a website will always be able to use the db even while it is changing.

[16:49] <tbrowder> i guess i could define a json object to keep the pertinent shasums by filename and use JSON::Fast in the using programs--that should work fine. thanks for letting me ruminate

[17:02] *** zacts left
[17:05] *** [Coke]_ is now known as [Coke]

[17:06] *** abraxxa-home joined
[17:15] *** sena_kun left
[17:16] *** razetime left
[17:16] *** sena_kun joined
[17:42] *** zacts joined
[17:59] *** Sgeo joined
[18:07] *** reportable6 left
[18:37] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/03/27/trust-issues/

[18:45] *** sena_kun left
[18:46] *** sena_kun joined
[18:53] *** zacts left
[19:24] *** lizmat_ joined
[19:25] *** lizmat left
[19:26] *** TempIRCLogger joined
[19:41] *** lizmat_ left
[19:42] *** lizmat joined
[19:53] *** hankache joined
[19:53] *** hankache left
[20:00] <Geth> ¬¶ doc/search-categories-update: 17 commits pushed by Altai-man++

[20:00] <Geth> ¬¶ doc/search-categories-update: review: https://github.com/Raku/doc/compare/89b1394375fd^...2daef6353f6d

[20:02] *** abraxxa-home left
[20:20] *** jcallen_ is now known as jcallen

[20:21] *** jcallen left
[20:21] *** jcallen joined
[20:23] <El_Che> (rakudo-pkg has been updates, last week release escaped from my radar, my apologies)

[20:29] *** jjido joined
[20:39] *** discord-raku-bot left
[20:40] *** discord-raku-bot joined
[20:42] *** p6steve joined
[20:44] <Geth> ¬¶ Documentable/search-categories-streamlined: 63e93320da | Altai-man++ | META6.json

[20:44] <Geth> ¬¶ Documentable/search-categories-streamlined: Update dependency version

[20:44] <Geth> ¬¶ Documentable/search-categories-streamlined: review: https://github.com/Raku/Documentable/commit/63e93320da

[20:45] *** discord-raku-bot left
[20:45] *** discord-raku-bot joined
[20:47] <[Coke]> altai-man: some xtest failures on that branch: https://gist.github.com/coke/358bffab0b88cfdb81e665ea613dcbfa

[20:47] <[Coke]> (in raku/doc)

[20:47] *** melezhik joined
[20:48] <melezhik> how can I set timeout setting for mysql in DBIIsh?

[20:48] <melezhik> I gave this error on and off - ‚ö† sparky DBDish::mysql: Error: The client was disconnected by the server because of inactivity. See wait_timeout and interactive_timeout for configuring this behavior. (1)

[20:48] <melezhik> gave -> have

[20:48] <Geth> ¬¶ Documentable/search-categories-streamlined: 49a2dd8451 | Altai-man++ | META6.json

[20:48] <Geth> ¬¶ Documentable/search-categories-streamlined: Update dependency name

[20:48] <Geth> ¬¶ Documentable/search-categories-streamlined: review: https://github.com/Raku/Documentable/commit/49a2dd8451

[20:49] *** linkable6 left
[20:49] *** sena_kun left
[20:51] *** sena_kun joined
[21:06] *** melezhik left
[21:31] *** not-n1to joined
[21:31] *** not-n1to left
[21:36] *** n1to left
[22:06] *** AlexDanielIRC left
[22:15] *** guifa joined
[22:21] <guifa> given a situation like class A {¬†class B {¬†has $!parent is built }; method new {¬†self.bless: ‚Ä¶‚Ä¶‚Ä¶¬†} }¬†

[22:21] <guifa> err and "also is B"

[22:22] <guifa> is there a way I can easily make "$!parent" equal to the instantiated A ?

[22:25] <ugexe> i dunno if its relevant but classes aren't lexically scoped

[22:25] <drakonis> guifa: i saw that you were working on binary grammars, are you still waiting for rakuast to continue?

[22:25] <ugexe> B is available outside of class A

[22:29] <guifa> ugexe: yeah, that's not too much of an issue in this case.  The full golf seemed more nonsensical though ( class A {¬†has $!a; method new {¬†self.bless: ‚Ä¶‚Ä¶¬†}¬†}¬†such that $!a is equal to its associated object 

[22:35] <guifa> I guess I could maybe do it via a TWEAK, but that looks kinda ugly

[22:35] <guifa> gotta have B trust A, make a private setter method and ten do self!B::private-setter(self)

[22:38] <guifa> drakonis: actually, I can mostly get it finished up now and have it fairly usable I think (at least within grammars, as it's much easier for me to add methods than install lexical subs right now).  

[22:38] <drakonis> ah, cool.

[22:40] <guifa> Right now I'm just aiming to get Intl::CLDR cleaned up, it's just ... a lot.  Once that's done I'll swing back to Binex.  When summer comes around, $day-job won't be as much in my way and I can have a bit more time to work on it

[22:41] <drakonis> oh, that's a neat project.

[22:52] *** AlexDanielIRC joined
[23:26] *** TempIRCLogger left
[23:37] *** AlexDanielIRC left
[23:52] *** jjido left
[23:55] *** [Coke] left
[23:55] *** Manifest0 left
[23:56] *** lichtkind left
