[00:07] *** reportable6 left
[00:10] *** lucerne0 joined
[00:11] *** lucerne left
[00:11] *** lucerne0 is now known as lucerne
[00:11] *** goblin left
[00:12] *** tellable6 joined
[00:14] *** goblin joined
[00:27] *** dogbert11 joined
[00:27] *** dogbert17 left
[00:27] *** samcv left
[00:27] *** lucerne left
[00:28] *** samcv_ joined
[00:28] *** lucerne joined
[00:48] * guifa almost had a freakout when running zef started causing all sorts of crazy errors (like not being able to call MAIN)
[00:48] * guifa then realized he had left RAKUDO_RAKUAST set to 1 in that terminal
[01:02] <[Coke]> heh
[01:12] *** xinming left
[01:13] *** xinming joined
[02:09] *** reportable6 joined
[03:09] *** linkable6 left
[03:09] *** evalable6 left
[03:10] *** evalable6 joined
[04:10] *** benchable6 left
[04:10] *** notable6 left
[04:10] *** coverable6 left
[04:10] *** unicodable6 left
[04:10] *** bloatable6 left
[04:10] *** greppable6 left
[04:10] *** releasable6 left
[04:10] *** statisfiable6 left
[04:10] *** bisectable6 left
[04:10] *** committable6 left
[04:10] *** squashable6 left
[04:10] *** sourceable6 left
[04:10] *** shareable6 left
[04:10] *** reportable6 left
[04:10] *** tellable6 left
[04:10] *** evalable6 left
[04:10] *** nativecallable6 left
[04:10] *** quotable6 left
[04:11] *** notable6 joined
[04:11] *** benchable6 joined
[04:11] *** shareable6 joined
[04:11] *** reportable6 joined
[04:11] *** unicodable6 joined
[04:11] *** greppable6 joined
[04:12] *** coverable6 joined
[04:12] *** tellable6 joined
[04:12] *** sourceable6 joined
[04:12] *** committable6 joined
[04:12] *** bloatable6 joined
[05:12] *** squashable6 joined
[05:13] *** quotable6 joined
[06:07] *** reportable6 left
[06:09] *** mexen joined
[06:11] *** releasable6 joined
[06:12] *** linkable6 joined
[06:29] *** squashable6 left
[06:30] *** squashable6 joined
[07:07] *** reportable6 joined
[07:11] *** nativecallable6 joined
[07:13] *** evalable6 joined
[07:21] *** jjido joined
[07:25] *** jjido left
[07:55] *** abraxxa joined
[08:01] *** abraxxa left
[08:02] *** abraxxa joined
[08:05] *** jjido joined
[08:10] *** Sgeo left
[08:49] *** jjido left
[08:58] *** avar left
[08:59] *** avar joined
[09:01] *** dakkar joined
[09:09] *** jjido joined
[09:12] *** bisectable6 joined
[09:44] *** jjido left
[09:48] *** lgtaube left
[10:01] *** xkr47 left
[10:02] *** jjido joined
[10:03] *** lgtaube joined
[10:12] *** xkr47 joined
[10:26] *** jjido left
[10:31] *** jjido joined
[10:35] *** jjido left
[11:35] *** linkable6 left
[11:35] *** evalable6 left
[11:37] *** linkable6 joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:10] *** statisfiable6 joined
[12:15] *** jjido joined
[12:30] *** jjido left
[12:38] *** evalable6 joined
[12:56] *** lgtaube left
[13:06] *** xinming left
[13:06] *** xinming joined
[13:13] *** lgtaube joined
[13:31] *** abraxxa-home joined
[13:45] *** jjido joined
[14:20] *** morte_ joined
[14:30] <discord-raku-bot> <Nemokosch#9980> hi guys
[14:30] <discord-raku-bot> <Nemokosch#9980> https://theweeklychallenge.org/blog/perl-weekly-challenge-152/#TASK1 do you know something about how to interpret this task?
[14:31] <discord-raku-bot> <Nemokosch#9980> because the example seems like "just take the smallest element from each line"
[14:31] <discord-raku-bot> <Nemokosch#9980> but why would you call that a "path"?
[14:34] *** discord-raku-bot left
[14:34] *** discord-raku-bot joined
[14:35] <MasterDuke> i would have interpreted that to mean you can only go to one of the children of your current position, but that's not what the example shows...
[14:50] <lizmat> weekly: https://updown.io/api
[14:50] <notable6> lizmat, Noted! (weekly)
[14:53] *** jjido left
[15:17] *** gugod left
[15:21] *** Sgeo joined
[15:21] *** mtj left
[15:26] *** gugod joined
[15:30] <discord-raku-bot> <Nemokosch#9980> why?
[15:38] <guifa> that's weird, surely he made a mistake with it
[16:18] *** abraxxa left
[16:19] *** suman joined
[16:19] <suman> What does se v6.*; mean
[16:19] <suman> Asterisk?
[16:19] *** abraxxa-home left
[16:20] <suman> use v6.*
[16:20] <lizmat> it basically means: give me the highest possible version
[16:20] <lizmat> currently, that'd be equivalent to v6.e.PREVIEW
[16:21] <suman> got it thank you
[16:28] *** suman left
[16:33] *** xinming left
[16:35] *** xinming joined
[16:51] *** rir joined
[16:58] <tonyo> ^ that's why fez doesn't allow `*` vers
[17:08] *** rir left
[17:28] *** guifa left
[17:29] *** dakkar left
[17:38] *** xinming left
[17:39] *** xinming joined
[17:59] <Geth> ¦ ecosystem: f07e0ad790 | (Elizabeth Mattijsen)++ | META.list
[17:59] <Geth> ¦ ecosystem: Freeze the Form module to the current commit
[17:59] <Geth> ¦ ecosystem: 
[17:59] <Geth> ¦ ecosystem: While we're moving it to the zef ecosystem
[17:59] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/f07e0ad790
[18:04] *** jjido joined
[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:25] *** jjido left
[18:26] *** jjido left
[18:28] <[Coke]> would it break anything to allow 'raku -e say 3/4' to work without wrapping the raku code in quotes?
[18:28] <[Coke]> and/or can we get a switch that prints the value of the last statement executed, like 'raku -x 3/4'
[18:30] <lizmat> [Coke]: how would you pass command-line parameters if you don't quote ?
[18:30] <[Coke]> (the former would need to .join the ARGS with ' ', of course
[18:31] <[Coke]> lizmat: raku -other -args -e has to go last or maybe:
[18:31] <[Coke]> so maybe another -- for that type, with the expectation that you couldn't use args. 
[18:32] <lizmat> [Coke]: I can see the advantage of not having to quote  :-)
[18:32] <[Coke]> but "break anything", yes, that's a thing. ok. :)
[18:43] *** jjido joined
[18:55] *** linkable6 left
[18:58] *** linkable6 joined
[18:58] *** guifa joined
[19:01] <[Coke]> lizmat: looks #4697 resulted in a revert which means it can be closed?
[19:03] <lizmat> closed  :-)
[19:09] <ugexe> the quotes are there for shells
[19:09] <ugexe> otherwise what interpolates e.g. $FOO
[19:10] <lizmat> also a good point  :-)
[19:12] *** slowtyper joined
[19:12] <moon-child> raku -e say \$foo
[19:12] <moon-child> raku -e say '$foo'
[19:12] *** slowtype- left
[19:12] <moon-child> or even
[19:12] <moon-child> raku -e say '$'foo
[19:13] <moon-child> and curly quotes are ignored by the shell, so you can use them to quote raku-side
[19:13] <moon-child> raku -e say “'$'foo”
[19:13] <moon-child> is any of these clearer than  raku -e 'say $foo'  or  raku -e 'say "$foo"'?  Probably not but ...
[19:14] <ugexe> dont forget to handle % different on windows
[19:17] *** slowtype- joined
[19:17] *** slowtyper left
[19:17] <Geth> ¦ ecosystem: 9cd26cb324 | (Elizabeth Mattijsen)++ | META.list
[19:17] <Geth> ¦ ecosystem: Freeze the Form module to the current commit
[19:17] <Geth> ¦ ecosystem: 
[19:17] <Geth> ¦ ecosystem: While we're moving it to the zef ecosystem
[19:17] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/9cd26cb324
[19:19] *** [Coke] left
[19:20] *** slowtyper joined
[19:22] *** slowtype- left
[19:24] *** [Coke] joined
[19:31] *** slowtype- joined
[19:31] *** lgtaube left
[19:32] *** slowtyper left
[19:32] *** lgtaube joined
[19:32] *** squashable6 left
[19:33] *** squashable6 joined
[20:36] *** evalable6 left
[20:36] *** linkable6 left
[21:09] *** mexen left
[21:12] *** discord-raku-bot left
[21:13] *** discord-raku-bot joined
[21:17] *** discord-raku-bot left
[21:17] *** discord-raku-bot joined
[21:33] *** tbrowder left
[21:33] *** leont left
[21:33] *** mjgardner left
[21:33] *** leont joined
[21:33] *** mjgardner joined
[21:33] *** tbrowder joined
[21:51] *** jjido left
[22:29] <[Coke]> I really hate finding out someone is no longer with $dayjob by getting an exchange bounce. :|
[22:36] *** evalable6 joined
[23:00] <qorg11> Is it possible to output moarvm bytecode so rakudo don't have to compile everytime?
[23:00] <qorg11> So a CGI application doesn't take a lot to load
[23:01] <[Coke]> modules are precompiled.
[23:01] <[Coke]> so if you put your stuff in a Helper module and 'use Helper' all that will only be compiled once.
[23:01] <[Coke]> (also don't do CGI. :)
[23:01] <qorg11> What's wrong with CGI?
[23:02] <[Coke]> eh. it's an older tech stack, but it checks out.
[23:02] <qorg11> It ain't broke you know
[23:02] <[Coke]> so, no worries if it's solving your problem - but there are newer things to use if you like.
[23:05] <qorg11> Well, what i really want is to speed up rakudo's init
[23:09] <qorg11> And i guess what takes some time is the compilation to MoarVM bytecode
[23:10] <qorg11> So i want to output MoarVM bytecode
[23:10] <lizmat> qorg11: what you want, is to have a look at cro.services
[23:10] <lizmat> putting your code in a module and 'use'ing that *is* the equivalent of loading bytecode
[23:11] <lizmat> it works best if you set it up as a module  and actually install the module
[23:15] *** Guest10 joined
[23:22] *** morte_ left
[23:23] <japhb> qorg11: The problem with basic CGI is that you have to (fork, exec, init, run, clean up) for every request.  Other stacks allow you to remove most of those (on a per-request basis, at least).
[23:26] <japhb> qorg11: Also note that since MAIN can be exported (like any other sub), you can have the entirety of your program in the module that you load, and literally the entire main program can be "use ActualImplementation;" and everything else including MAIN can be in the ActualImplementation module (if you're using #! lines, just add one at the top of the script, making it two lines).
[23:26] <japhb> I do this for basically any app I write where I care about startup time.
[23:28] <moon-child> exec is not too bad, if you are perl or c
[23:28] <moon-child> only if you are raku
[23:28] <moon-child> :)
[23:30] <moon-child> but yeah, startup time even without loading any non-core code is like 200ms I think, definitely prefer not cgi
[23:34] *** Guest10 left
