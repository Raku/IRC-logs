[00:08] *** reportable6 left
[00:25] *** frost joined
[00:37] *** frost left
[00:49] *** Kaiepi joined
[00:50] *** frost joined
[00:54] *** Kaiepi left
[01:04] *** linkable6 left
[01:08] *** reportable6 joined
[01:18] *** frost left
[01:42] *** euandreh left
[02:04] *** frost joined
[02:29] *** frost left
[02:37] *** frost joined
[02:50] *** frost left
[02:54] *** frost joined
[03:24] *** frost left
[03:41] *** Kaiepi joined
[04:29] *** shinto joined
[04:40] *** razetime joined
[05:06] *** linkable6 joined
[05:26] *** shinto left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:40] *** tejr left
[06:40] *** tejr joined
[06:46] *** mexen joined
[06:54] *** Flwyd left
[07:14] *** razetime left
[07:36] *** frost joined
[07:37] *** seednode99 left
[07:38] *** seednode99 joined
[07:46] *** razetime joined
[08:02] *** frost left
[08:02] <El_Che> https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/ 

[08:03] <El_Che> raku does not have a culture of pinning  versions nor it's something suggested by the docs. Maybe something to think about

[08:09] *** Kaiepi left
[08:09] *** [Coke] left
[08:09] *** japhb left
[08:09] *** sena_kun left
[08:09] *** MasterDuke left
[08:09] *** jmcgnh left
[08:12] *** TempIRCLogger left
[08:14] *** TempIRCLogger__ left
[08:18] *** Manifest0 left
[08:25] *** Sgeo left
[08:29] *** jmcgnh joined
[08:33] *** jjido joined
[08:44] *** dakkar joined
[08:45] *** abraxxa joined
[08:47] *** abraxxa left
[08:49] *** abraxxa joined
[08:49] <gfldex> He published under MIT and complains that nobody is sharing back …

[08:53] *** frost joined
[08:55] *** abraxxa left
[08:56] *** abraxxa joined
[08:58] *** tejr left
[08:58] *** tejr joined
[09:09] <discord-raku-bot> <Nemokosch#9980> xD

[09:10] <discord-raku-bot> <Nemokosch#9980> I mean, this tells a lot about the people as well

[09:10] <discord-raku-bot> <Nemokosch#9980> "I don't have to share back? Okay, then I won't."

[09:11] <gfldex> Sharing back takes time. So one could argue it being a good thing, as it indicates open source is not used by slackers. :->

[09:23] <lizmat> El_Che: I try to give the good example: all of my modules are version pinned in their dependencies, as far as is possible

[09:34] *** jjido left
[09:42] <El_Che> lizmat: yes, yours. Someone new to raku, wont do that is it's not something that's explicitly encouraged

[09:46] *** mexen left
[09:47] <lizmat> true, but at the moment it's also a hassle, we need to make that easier

[09:47] *** mexen joined
[09:48] <lizmat> like, if in the META a dependency is declared on Foo:ver<42>:auth<zef:bar>, any statement "use Foo" of a module in that distribution should automatically use *that* version, and nothing else

[09:48] <lizmat> currently you have to keep track, and I know from experience, that is tricky

[09:48] <lizmat> same for scripts BTW

[09:49] *** frost left
[09:51] * lizmat starts on a Weekly covering two weeks

[09:51] <lizmat> .oO( what was I thinking skipping a week? )

[09:56] *** abraxxa left
[10:00] *** abraxxa joined
[10:03] *** jjido joined
[10:20] *** jjido left
[10:40] *** jjido joined
[10:48] *** holyghost joined
[11:00] *** frost joined
[11:12] *** jjido left
[11:25] *** frost left
[11:30] <tbrowder> hi, i am now motivated to version pin all my deps. and the incident referenced above seems like a good reason for the raku community to push module authors to the Zef repo

[11:31] <Skarsnik> well, like CPAN/PAUSE x)

[11:31] <tbrowder> ?

[11:32] <tbrowder> zef could be modified to report such

[11:32] <tbrowder> blin also?

[11:33] <Skarsnik> I mean with the CPAN, you have to upload a version of your module to/on PAUSE, so there is not really unversionned stuff

[11:36] <tbrowder> hm, i thought the pinning issue was also in the modules deps where the using author should specify the exact version to be used

[11:37] <Skarsnik> Should be only in the Meta, kinda annoying to have to update your code just to update a deps 

[11:39] <tbrowder> yep, i agree, my dumb thought was do it in each using rakumod

[11:41] *** Altai-man joined
[11:41] <tbrowder> but i keep seeing some discussion here about is the Meta dep accepted as authoritative for zef--i'm probably confusing it with something else

[11:43] *** Altai-man left
[11:47] <moon-child> I should also hope that, culturally, the raku community is less prone to such stunts

[11:48] <moon-child> js seems to get them about once or twice every year, which is really not that much.  And they are huge

[11:55] *** Altai-man joined
[12:08] *** reportable6 left
[12:09] *** reportable6 joined
[12:37] <El_Che> having to declare versions in de .rakulib files and in META6.json is LTA

[12:37] <El_Che> and error-prone

[12:39] <lizmat> indeed...  and I know from experience

[12:55] *** jjido joined
[12:59] *** Xliff left
[13:01] *** euandreh joined
[13:20] *** holyghost left
[13:20] *** holyghost joined
[13:38] *** monkey_ joined
[13:39] *** monkey_ left
[13:44] <tbrowder> that's where zef could help

[13:44] <tbrowder> and blin?

[13:45] <tbrowder> ref desired std file extensions, etc.

[13:46] <tbrowder> will the "t" directory in a module dir become "rakutest"

[13:56] <El_Che> I don't know if zef should do it or put part in the functionality in code

[13:56] <El_Che> e.g. what go does when they fixed they module workflow problem (which sucked before):

[13:56] <El_Che> go mod tidy && go mod vendor

[13:57] <El_Che> they just use the name in the code file, and the go mod tool writes a go.mod file with the versions

[13:58] <El_Che> (granted raku's module plugging system is richer, but just to illustrate the principle)

[13:59] <El_Che> (they fixed the different version of the same module dependency problem by seeing each import path as unique, eg "import github.com/nxadm/mylib and "import github.com/nxadm/mylib/v2", with v2 just being a directory

[14:09] *** jjido left
[14:30] <tbrowder> ok, i've been checking zef issues and i think i missed something recently: does test::META actually check for dependencies now? i stopped using it some time ago, but i'll check it now...

[14:36] <tbrowder> hm, i don't see that it does, so where should module version checks be made!

[14:36] <tbrowder> .*?

[14:38] <tbrowder> my use of App::Mi6 i think is what made me stop using Test::META since it checks for errors, too.

[14:42] <tbrowder> i think i understand ugexe's position bettter now. maybe i'm coming late to the dance, but the whole issue sounds like a problem solving one for rsc...i'll see what's there now...

[14:46] <tbrowder> arg! i see lots of issues, and one or more related to versioning.

[14:47] <El_Che> tbrowder: that's what I mean with "in code": I meant "in core" typo

[14:49] <tbrowder> got it. is there an active effort on that on a branch you know of?

[14:50] <El_Che> I think the idea is rather new

[14:50] <El_Che> "new"

[14:54] *** Sgeo joined
[14:57] <tbrowder> thnx. i find it difficult to zero in on actual discussion on doco of accepted problem solutions when i do visit raku/problem-solving--layout makes my head hurt...156 open issues doesn't help...

[15:00] <tbrowder> maybe issue creators should advertise more, ask for votes, maybe rsc should highlight some for active discusion on #raku or #raku-dev, or maybe i'm rip van winkle!!

[15:02] <El_Che> not everyone is as passionate about the same issue (e.g. some people don't care about pinning)

[15:02] <El_Che> and even less people can implement it

[15:12] <sjn> Didn't we have some Perl 6 (as it was then) hack days some years ago? Maybe worth reviving those again. :-)

[15:13] <sjn> "Raku hacking weekend", via some video conferencing (Jitsi?) where one person starts out giving an example of how to solve a specific class of problems, then others can pick up similar issues and get a little support underways until they're confident...

[15:15] * sjn wouldn't mind participating in something like that (speaking with both my .pm and my local hackerspace hats on)

[15:15] *** Altai-man left
[15:23] <guifa> lizmat: so technically, today's issue is of "Raku Fortnightly (not Fornitely #`[getoffourlawn])" ?

[15:24] *** silug joined
[15:26] *** razetime left
[15:29] * El_Che reflects on how sjn is a born organizer :)

[15:29] <lizmat> ideally, I would like to see in-person hackathons 

[15:29] <lizmat> but given the current situation, I guess an online hackathon would also be helpful

[15:30] <El_Che> the bus factor becomes the covid factor

[15:31] <lizmat> inverted, I'd hope?   we want R to be as low as possible  :-)

[15:35] *** stevied joined
[15:51] <tbrowder> any core hackers gonna be at houston in june?

[15:52] <sjn> El_Che: I'm a born suggester of tasks for others. :-P

[15:52] <lizmat> tbrowder: I will not

[15:52] <sjn> Houston is far away :-|

[15:53] <sjn> (not that I'm a core hacker in any way :-D)

[15:53] <tbrowder> yes, i know, sorry to miss seeing you again ☹️

[15:55] <El_Che> sjn: you're the Raku-whisperer

[15:58] *** eseyman left
[16:26] *** lichtkind joined
[16:26] *** jjido joined
[16:33] *** Guest26 joined
[16:34] *** eseyman joined
[16:46] *** jjido left
[17:36] *** dakkar left
[17:39] *** holyghost left
[17:43] *** abraxxa left
[17:49] <tonyo> sjn: a lot of module/tooling advances came during PTS, i don't think any of us on that side of raku would complain about another hand in the pot

[18:08] *** reportable6 left
[18:09] *** reportable6 joined
[18:10] *** jjido joined
[18:12] *** jjido left
[18:46] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/01/10/2022-01-02-perching/

[19:12] *** linkable6 left
[19:12] *** evalable6 left
[19:14] <discord-raku-bot> <Skarsnik#7370> There was the squashzton on WE for while

[19:31] <MasterDuke> lizmat: i'd rather an in-pub hackathon, in-person i suspect it's too dark to read

[19:31] <MasterDuke> lizmat++ for the weekly

[19:32] <lizmat> could be in a pub. could be  *nudge nudge*

[19:38] <discord-raku-bot> <Nemokosch#9980> what does "perching" mean?

[19:42] <MasterDuke> in english? sort of like crouching/sitting/standing on top of something. birds perch on branches. a perch is a place/thing to do that on. so in this context it is a reference to the request for a "python perch", i.e., a place to put python-related raku blog posts

[19:47] <El_Che> I wouldn't mind seeing old friends again

[19:47] <El_Che> most ofyou I saw at the yapce in... amsterdam

[19:53] *** dextercd joined
[20:03] <lizmat> yeah  :-(  too long ago

[20:08] <El_Che> yeah, the time we saw each other at flanders pm were also nice

[20:08] <El_Che> we need to make a mental note for after covid

[20:13] *** linkable6 joined
[20:13] *** evalable6 joined
[20:42] *** Guest26 left
[20:58] <Skarsnik> hm, how could I express Raku identifier token (look super complex in STD), I mean accepting Foo-Bar?

[21:05] <Skarsnik> m: grammar Foo {token TOP {<more-ident>+<ident>*}; token more-ident {<ident>+"-"?}}; say Foo.parse("foo-bar"); say Foo.parse("foo-");

[21:05] <camelia> rakudo-moar a90369e10: OUTPUT: «｢foo-bar｣␤ more-ident => ｢foo-｣␤  ident => ｢foo｣␤ more-ident => ｢bar｣␤  ident => ｢bar｣␤｢foo-｣␤ more-ident => ｢foo-｣␤  ident => ｢foo｣␤»

[21:06] <Skarsnik> sadly this match foo- x)

[21:12] *** seednode99 left
[21:13] *** seednode99 joined
[21:16] *** Guest1244 joined
[21:19] <tonyo> What're you trying to accomplish skarsnik?

[21:21] <Skarsnik> I am doing a weird slang and I want to accept foo-bar as symbols name for sub

[21:21] <ugexe> <more-ident> matches 'foo-', and <ident>* matches something 0 or more times, so yeah

[21:22] <tonyo> Why not just ident ** 1 % '-'

[21:22] <tonyo> And be more explicit than ident as ugexe points out

[21:26] *** seednode99 left
[21:27] *** seednode99 joined
[21:29] <ugexe> i would probably just hard code sensible values

[21:29] <ugexe> x-1 isnt a value ident afterall

[21:30] <ugexe> valid^

[21:30] <tonyo> grammar Foo { token TOP { ^ <id> $ }; token id { (<[a..z0..9]>+) ** 1..2 % "-" }; }; say Foo.parse("id")??"yes"!!"no"; say Foo.parse("id1-id2")??"yes"!!"no"; say Foo.parse("id1-")??"yes"!!"no";

[21:30] <evalable6> tonyo, rakudo-moar a90369e10: OUTPUT: «yes␤yes␤no␤»

[21:30] <Skarsnik> 1 does not match ident thou

[21:30] <tonyo> no but "hello-world" is a valid ident

[21:31] <ugexe> ah it doesn't, i thought it would

[21:31] <Skarsnik> ident is alpha + _ I think?

[21:32] <Skarsnik> wait, maybe digit are also included

[21:32] *** qorg11 left
[21:32] <tonyo> oh, then:

[21:32] <tonyo> m: grammar Foo { token TOP { ^ <id> $ }; token id { <ident> ** 1..2 % "-" }; }; say Foo.parse("id")??"yes"!!"no"; say Foo.parse("id1-id2")??"yes"!!"no"; say Foo.parse("id1-")??"yes"!!"no";

[21:32] <camelia> rakudo-moar a90369e10: OUTPUT: «yes␤yes␤no␤»

[21:32] <tonyo> that will work then ^

[21:33] *** seednode99 left
[21:33] <Skarsnik> <ident>	Basic identifier (no support for C<'> or C<->). Same as C« <.alpha> \w* »

[21:33] *** qorg11 joined
[21:34] *** seednode99 joined
[21:34] *** seednode99 left
[21:34] <Skarsnik> ** Range % is neat ^^

[21:35] <Skarsnik> Thanks anyways ^^

[21:35] *** seednode99 joined
[21:39] <Skarsnik> Could be nice if we could tell comma "This class is an action for this grammar, plz complete me method name" x)

[21:58] *** Guest1244 left
[22:09] <Skarsnik> debugging grammar is really not fun :(

[22:16] *** lichtkind left
[22:16] *** lichtkind joined
[22:29] <Skarsnik> I think I am in grey teritory, chain grammar by inheriting them xD

[22:33] *** jjido joined
[22:47] <Skarsnik> Ok, having <ws> mean 2 things in the 2 grammars is not great xD

[22:56] *** jjido left
[23:00] <tonyo> Skarsnik: with grammars it's really hard to depend on something further up

[23:00] <tonyo> if you're writing a slang it's better to be explicit

[23:02] <ugexe> https://github.com/ugexe/Perl6-Grammar--HTTP/blob/210371b64dafcca7b4eecf450489d9a992388f27/lib/Grammar/HTTP.pm6#L14-L36

[23:05] <Skarsnik> I have a grammar that parse snes asm instruction (and a class that 'assemble' them), Now I am doing a slang to generate Raku subs that returns me bytecode. So I reuse the Asm grammar in the slang. But I defined ws as \h* in the ASM grammar (more easier to work by explicit line)

[23:18] *** tbrowder_ joined
[23:24] <guifa> Actually, doing roles for adding tokens is pretty standard practice AFAIK

[23:27] *** stevied left
[23:35] <Skarsnik> I think what is mainly missing in Grammar is a good way to express error. Not sure what could be done, maybe having access to more context? like I am an identifier token and it fails to parse for a certain parent I could error? or even knowing what fail in your token could help x)

[23:35] *** lichtkind left
[23:38] <Skarsnik> like token affection { <identifier> '=' <value> ERROR<!value> { die "Missing value for affection" }} (well you could add it in the action class I guess for this)

