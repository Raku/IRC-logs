[00:07] *** reportable6 left
[00:08] *** reportable6 joined
[00:26] *** rbt left
[00:26] *** rbt joined
[00:38] *** jadedctrl left
[00:42] *** rbt left
[00:42] *** rbt joined
[01:07] *** melezhik joined
[01:08] *** melezhik left
[02:08] *** reportable6 left
[02:08] *** linkable6 left
[02:08] *** greppable6 left
[02:08] *** coverable6 left
[02:08] *** tellable6 left
[02:08] *** evalable6 left
[02:08] *** unicodable6 left
[02:08] *** bisectable6 left
[02:08] *** shareable6 left
[02:08] *** notable6 left
[02:08] *** bloatable6 left
[02:08] *** committable6 left
[02:08] *** statisfiable6 left
[02:08] *** quotable6 left
[02:08] *** nativecallable6 left
[02:08] *** benchable6 left
[02:08] *** sourceable6 left
[02:08] *** releasable6 left
[02:08] *** benchable6 joined
[02:08] *** bisectable6 joined
[02:09] *** greppable6 joined
[02:09] *** committable6 joined
[02:09] *** evalable6 joined
[02:09] *** unicodable6 joined
[02:09] *** releasable6 joined
[02:10] *** notable6 joined
[02:10] *** quotable6 joined
[02:10] *** reportable6 joined
[02:10] *** tellable6 joined
[02:10] *** linkable6 joined
[02:10] *** nativecallable6 joined
[02:10] *** sourceable6 joined
[02:10] *** bloatable6 joined
[02:10] *** statisfiable6 joined
[02:11] *** shareable6 joined
[02:11] *** coverable6 joined
[02:14] *** frost joined
[02:37] *** monkey_ joined
[03:24] *** frost left
[03:25] *** frost joined
[03:31] *** frost left
[03:33] *** monkey_ left
[04:33] *** committable6 left
[04:33] *** nativecallable6 left
[04:33] *** releasable6 left
[04:33] *** evalable6 left
[04:33] *** quotable6 left
[04:33] *** benchable6 left
[04:33] *** bloatable6 left
[04:33] *** coverable6 left
[04:33] *** statisfiable6 left
[04:33] *** greppable6 left
[04:33] *** notable6 left
[04:33] *** sourceable6 left
[04:33] *** shareable6 left
[04:33] *** linkable6 left
[04:33] *** unicodable6 left
[04:33] *** tellable6 left
[04:33] *** bisectable6 left
[04:33] *** reportable6 left
[04:33] *** evalable6 joined
[04:33] *** reportable6 joined
[04:33] *** linkable6 joined
[04:33] *** shareable6 joined
[04:34] *** notable6 joined
[04:34] *** sourceable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** releasable6 joined
[04:34] *** bisectable6 joined
[04:34] *** bloatable6 joined
[04:35] *** coverable6 joined
[04:35] *** committable6 joined
[04:35] *** unicodable6 joined
[04:35] *** tellable6 joined
[04:35] *** benchable6 joined
[04:35] *** quotable6 joined
[04:35] *** greppable6 joined
[04:36] *** nativecallable6 joined
[04:47] *** rbt left
[04:47] *** rbt joined
[04:51] *** zacts joined
[05:21] *** zacts left
[05:43] *** jjatria left
[05:43] *** Tirifto left
[05:43] *** tobs left
[05:43] *** sivoais left
[05:43] *** jast left
[05:43] *** dg left
[05:43] *** tailgate left
[05:43] *** dcx left
[05:43] *** jdv left
[05:43] *** qorg11 left
[05:43] *** jdv joined
[05:43] *** dg joined
[05:43] *** tobs joined
[05:43] *** sivoais joined
[05:44] *** jast joined
[05:44] *** jjatria joined
[05:44] *** tailgate joined
[05:44] *** dcx joined
[05:44] *** qorg11 joined
[05:46] *** Tirifto joined
[05:48] *** perryprog left
[05:48] *** elcaro left
[05:48] *** moritz left
[05:48] *** broquain1 left
[05:48] *** moritz joined
[05:48] *** elcaro joined
[05:48] *** broquaint joined
[05:49] *** perryprog joined
[05:57] *** rbt left
[05:57] *** rbt joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[07:08] *** evalable6 left
[07:08] *** linkable6 left
[07:08] *** rbt left
[07:10] *** linkable6 joined
[07:10] *** evalable6 joined
[07:38] *** rbt joined
[08:00] *** Sgeo left
[08:23] *** rbt left
[08:29] *** rbt joined
[08:56] *** frost joined
[09:04] *** frost left
[09:11] *** phil1 joined
[09:26] *** frost joined
[09:29] <frost> Is there a way to determine whether a string contains Unicode characters?

[09:30] *** renormalist joined
[09:31] <lizmat> say True

[09:31] <lizmat> aren't all characters Unicode ?

[09:34] *** dogbert17 left
[09:34] <frost> yeah, but how can I match non ASCII characters in a string?

[09:39] <moon-child> <-[\x00 .. \x127]> ?

[09:43] <moon-child> hmm, apparently this doesn't work; not sure why?

[09:43] <moon-child> oh no I'm stupid

[09:43] <moon-child> should be \x7f

[09:59] <lizmat> PSA: there will not be a Rakudo Weekly News this week on account of good weather during Easter

[10:01] *** dogbert17 joined
[10:17] *** phil1 left
[10:22] *** zacts joined
[10:26] <frost> moon-child: straight and useful, thanks

[10:45] <discord-raku-bot> <Nemokosch#9980> :DD

[10:55] *** linkable6 left
[10:56] *** linkable6 joined
[11:14] *** rbt left
[11:14] *** rbt joined
[11:22] *** zacts left
[11:34] *** phil1 joined
[11:38] *** Xliff joined
[11:38] <Xliff> \o

[11:38] <tellable6> 2022-01-06T19:31:00Z #raku-dev <lizmat> .tell Xliff I would put Debian on a 2021 MacMini  :-)

[11:38] <tellable6> 2021-01-15T10:38:00Z #moarvm <jnthn> .tell Xliff I assume you're talking about Cro::WebApp? In which case a) no, b) there's a #cro that's good for such questions :)

[11:38] <tellable6> 2021-04-29T13:35:00Z #moarvm <jnthn> .tell Xliff Can't see it happening before Q4 this year; even when most features are there, we'll want all the opts to be too, plus there'll be lots of little details to do (and bug compat with the current compiler frontend)

[11:39] <Xliff> m: sub a ( *@a ($a, $b, $c) ) { $b *= 2; @a.say }; a(1, 2, 3)

[11:39] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:39] <Xliff> Wouldn't it make more sense for decomp variables to be bound to the indicies, here?>

[11:40] <Xliff> Or is that against spec?

[11:40] <Xliff> m: sub a ( *@a ($a, $b is rw, $c) ) { $b *= 2; @a.say }; a(1, 2, 3)

[11:40] <camelia> rakudo-moar 530e17848: OUTPUT: «Parameter '$b' expects a writable container (variable) as an argument,␤but got '2' (Int) as a value without a container.␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:40] *** frost left
[11:40] <Xliff> m: sub a ( *@a ($a, $b is rw, $c) ) { $b *= 2; @a.say }; $b = 2; a(1, $b, 3)

[11:40] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$b' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> a, $b is rw, $c) ) { $b *= 2; @a.say }; ⏏$b = 2; a(1, $b, 3)␤»

[11:40] <Xliff> m: sub a ( *@a ($a, $b is rw, $c) ) { $b *= 2; @a.say }; my $b = 2; a(1, $b, 3)

[11:40] <camelia> rakudo-moar 530e17848: OUTPUT: «[1 4 3]␤»

[11:41] <Xliff> Is there a way to accomplish the above without a writeable container?

[11:41] <lizmat> don't think so?

[11:44] *** dogbert17 left
[11:50] <Xliff> lizmat: OK, so why are the decomp elements not bound?

[11:52] <lizmat> because you have 2 $b's in that example ?

[11:52] <Xliff> m: sub a ( *@a ($a, $b, $c) ) { $b *= 2; @a.say }; a(1, 2, 3)

[11:52] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:52] <Xliff> lizmat: ^^

[11:53] <lizmat> m: sub a ( *@a ($a, $b is rw, $c) ) { $b *= 2; @a.say }; a(1, 2, 3)

[11:53] <camelia> rakudo-moar 530e17848: OUTPUT: «Parameter '$b' expects a writable container (variable) as an argument,␤but got '2' (Int) as a value without a container.␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:53] <lizmat> m: sub a ( *@a ($a, $b is copy, $c) ) { $b *= 2; @a.say }; a(1, 2, 3)

[11:53] <camelia> rakudo-moar 530e17848: OUTPUT: «[1 2 3]␤»

[11:53] <lizmat> hmmmm

[11:53] <Xliff> Yah

[11:54] <lizmat> feels meh

[11:54] <Xliff> Hehehe

[11:55] *** wingfold joined
[11:59] *** rbt left
[12:07] *** reportable6 left
[12:07] *** reportable6 joined
[12:12] *** dogbert17 joined
[12:19] *** jjido joined
[12:21] *** melezhik joined
[12:21] <melezhik> .

[12:21] *** [Coke]_ is now known as [Coke]

[12:21] <melezhik> .

[12:22] <gfldex> A cunning individual solved PWC161 in JavaScript, Kotlin, Lua, Postscript, Python, Ruby and Rust.

[12:22] *** melezhik left
[12:23] <gfldex> I did read all those implementations and consider myself lucky. :->

[12:32] *** melezhik joined
[12:35] *** rbt joined
[12:37] *** melezhik left
[13:05] *** phil1 left
[13:16] *** morte_ joined
[13:30] *** rbt left
[13:30] *** rbt joined
[13:34] <CIAvash> frost: `$str.contains: /<-:Block('Basic Latin')>/`

[13:34] <tellable6> CIAvash, I'll pass your message to frost

[13:35] *** rbt left
[13:35] *** rbt joined
[14:06] <[Coke]> .seen sergot

[14:06] <tellable6> [Coke], I saw sergot 2021-07-20T15:59:00Z in #raku: <sergot> I mean, raku modules :)

[14:07] *** sena_kun left
[14:08] *** sena_kun joined
[14:11] *** rbt left
[14:17] *** phil1 joined
[14:18] *** Sgeo joined
[14:28] *** phil1 left
[14:41] <[Coke]> re-ask: do we have any HTTP request modules that let you pass in auth info?

[14:42] <[Coke]> HTTP::UserAgent and LWP::Simple don't document any auth parameters that I see

[14:43] <[Coke]> ah, it's just a documentation issue, found something in t/ that shows me.

[14:44] <[Coke]> oh, it's using URL based info, not attributes, looks like. OK.

[14:47] *** euandreh joined
[14:48] *** Guest35 joined
[14:52] <[Coke]> (looks like Cro::HTTP::Client is better for this)

[14:57] *** vodkra left
[15:03] *** rbt joined
[15:04] *** rbt left
[15:04] *** rbt joined
[15:04] *** rbt left
[15:04] *** rbt joined
[15:08] *** vodkra joined
[15:16] *** rbt left
[15:16] *** rbt joined
[15:19] <[Coke]> ... and that module is broken on windows (original bug opened 2018)

[15:19] <[Coke]> *sigh*

[15:24] *** monkey_ joined
[15:25] *** euandreh left
[15:30] <japhb> [Coke]: What's the bug link?

[15:30] <[Coke]> https://github.com/raku-community-modules/IO-Path-ChildSecure/issues/3

[15:32] <japhb> Oh I see -- Cro isn't working on Windows because the dependency IO-Path-ChildSecure is broken there.  I was going to say that I didn't expect there was much in Cro itself that should be broken, but I get the dependency issue.

[15:33] *** vodkra left
[15:34] <[Coke]> changing the broken test to use '..\\' on windows instead of "../x[308]" passes

[15:36] <japhb> [Coke]: Isn't that testing for insecurity of combining marks, given the difference between utf8 and utf8-c8?

[15:38] <[Coke]> yes; it assumes the path separator is /, though.

[15:38] <[Coke]> how do we get the correct IO::Spec instance at runtime? there is a method dir-sep which should be called 

[15:38] <[Coke]> but it looks like you need to know ahead of time if it's Unix or Win32

[15:39] <[Coke]> m: say IO::Path.dir-sep

[15:39] <camelia> rakudo-moar 530e17848: OUTPUT: «No such method 'dir-sep' for invocant of type 'IO::Path'␤  in block <unit> at <tmp> line 1␤␤»

[15:39] <[Coke]> m: say IO::Spec::Unix.dir-sep

[15:39] <camelia> rakudo-moar 530e17848: OUTPUT: «/␤»

[15:39] <japhb> m: say IO::Spec.dir-sep

[15:39] <camelia> rakudo-moar 530e17848: OUTPUT: «No such method 'dir-sep' for invocant of type 'IO::Spec'␤  in block <unit> at <tmp> line 1␤␤»

[15:39] <japhb> Hmmm

[15:39] *** monkey_ left
[15:39] <[Coke]> m: say IO::Path.SPEC.dir-sep

[15:39] <camelia> rakudo-moar 530e17848: OUTPUT: «Cannot look up attributes in a IO::Path type object. Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[15:40] <[Coke]> m: say IO::Path.new.SPEC.dir-sep

[15:40] <camelia> rakudo-moar 530e17848: OUTPUT: «Must specify a non-empty string as a path␤  in block <unit> at <tmp> line 1␤␤»

[15:40] <[Coke]> m: say IO::Path.new('.').SPEC.dir-sep

[15:40] <camelia> rakudo-moar 530e17848: OUTPUT: «/␤»

[15:40] <[Coke]> there we go.

[15:41] <japhb> Seems roundabout, but at least more reliable than introspecting $*KERNEL or so

[15:41] <japhb> Oh for heaven's sake

[15:41] <japhb> m: say $*SPEC.dir-sep

[15:41] <camelia> rakudo-moar 530e17848: OUTPUT: «/␤»

[15:41] <japhb> It's kept in a dynvar

[15:41] <[Coke]> ah, thanks.

[15:42] <[Coke]> japhb: added comment to ticket, thanks for the simpler version!

[15:42] <[Coke]> there, one bug from 2018 down.

[15:43] <[Coke]> I'm guessing that using '/' by itself usually "just works" but that by adding the combiner, it skirted the normal checks.

[15:43] <[Coke]> s/skirted/failed/

[15:55] <japhb> [Coke]: Yeah, wouldn't be surprised

[16:15] *** f-a joined
[16:15] <f-a> hello folks

[16:15] <f-a> when I try to run a raku program I get

[16:15] <f-a> f@mkiii:~/download/power-seeker$ ./power-seeker

[16:15] <f-a> Segmentation fault (core dumped)

[16:15] <f-a> is there anything I can do to help upstream diagnose this?

[16:16] <[Coke]> what version of rakudo are you using?

[16:16] <[Coke]> And what OS?

[16:16] <f-a> Implementing the Raku(tm) programming language v6.d.

[16:16] <f-a> Built on MoarVM version 2020.12.

[16:16] <[Coke]> japhb: next blocker: Aborting due to test failure: CBOR::Simple:ver<0.1.1>:auth<zef:japhb>

[16:16] <f-a> debian stable

[16:17] <[Coke]> 2020.12 is ancient, any segfaults there aren't going to be fixed.

[16:17] <[Coke]> latest release is 2022.03, I think; please update and see if the issue persists?

[16:20] <[Coke]> japhb: https://github.com/japhb/CBOR-Simple/issues/2

[16:21] <[Coke]> looks like one of the 127s is a 255

[16:21] <f-a> thanks [Coke] it worked

[16:21] <japhb> [Coke]: Bah, OK, will take a look

[16:26] <[Coke]> f-a: nice!

[16:29] <japhb> It's NaN.  Windows NaN is non-standard, in a way that is not a problem for the CPU, but makes a difference when you want bit-identical output.  I thought I handled that everywhere, but I bet I forgot the case of packed numeric arrays.

[16:32] <[Coke]> let me know if you need me to test something locally, happy to

[16:35] <japhb> [Coke]: OK, will do.  Multitasking a bit, but will get on this.

[16:39] *** f-a left
[16:52] <japhb> [Coke]: Can you do the test verbosely, using `zef -v test .`, and add that to the GH issue?

[16:53] *** zacts joined
[16:55] *** vodkra joined
[17:03] *** sena_kun left
[17:04] *** sena_kun joined
[17:10] *** morte_ left
[17:38] *** zacts left
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:11] *** rbt left
[18:11] *** rbt joined
[18:12] <japhb> [Coke]: Please try the branch I just pushed: https://github.com/japhb/CBOR-Simple/tree/packed-signed-nan-fix

[18:15] <[Coke]> japhb: just got back, will try in a bit

[18:20] *** wingfold left
[18:40] *** [Coke] left
[18:44] *** [Coke] joined
[18:54] *** lichtkind joined
[18:56] <[Coke]> weird. I'm timing out trying to hit github

[18:57] <japhb> That's goofy.

[19:01] <[Coke]> ah, this windows laptop really gets confused when the wifi drops out

[19:01] <[Coke]> had to forget and re-add

[19:02] *** rbt left
[19:02] *** rbt joined
[19:03] <[Coke]> tests pass on that branch

[19:05] <japhb> \o/

[19:05] <japhb> OK, will merge and release that one

[19:05] <[Coke]> (&@#$. OK, now getting failures on Log::Timeline

[19:16] *** zacts joined
[19:19] <japhb> [Coke]: CBOR::Simple 0.1.2 released with the fix

[19:19] <japhb> What's wrong with Log::Timeline?

[19:24] *** zacts left
[19:27] *** somebody joined
[19:28] <somebody> hi. can I use rakudo-j (jvm backend) with java GUI libs? maybe I can find some topics about it?

[19:29] <moon-child> yes

[19:30] <somebody> ok. I need write something like [10k lines of code and than $dial.show()] or something simpler? hadnt

[19:31] <moon-child> pretty straightforward.  I don't remember the details but I did a basic poc a while ago, seemed to work fine

[19:37] <somebody> I have working HelloFX on my Mac. how I should use JavaFX from Raku?

[19:41] <El_Che> somebody: your question does not make any sense

[19:42] *** somebody left
[19:42] *** rbt left
[19:42] *** rbt joined
[19:52] *** rbt left
[19:52] *** rbt joined
[19:53] <[Coke]> japhb: https://github.com/jnthn/p6-log-timeline/issues/13

[19:53] <[Coke]> are you trying to call java from rakudo-j?

[19:54] <[Coke]> .tell somebody https://stackoverflow.com/questions/27156329/how-do-i-invoke-a-java-method-from-perl6

[19:54] <tellable6> [Coke], I'll pass your message to somebody

[19:56] <japhb> [Coke]: Ooof, that one's going to be hard to diagnose without a Windows system.  :-(

[20:08] *** rbt left
[20:18] <Tirifto> m: say ‘👁’.ords».base(16); say ‘👁️’.ords».base(16);

[20:18] <camelia> rakudo-moar 530e17848: OUTPUT: «(1F441)␤(1F441 FE0F)␤»

[20:18] <Tirifto> m: say (‘👁’ ~~ /<[ \x[21] .. \x[10FFFF]]>+/); say (‘👁️’ ~~ /<[ \x[21] .. \x[10FFFF]]>+/);

[20:18] <camelia> rakudo-moar 530e17848: OUTPUT: «｢👁｣␤Nil␤»

[20:19] <[Coke]> japhb: I'm looking to golf it now.

[20:19] <Tirifto> Does anyone know why the explicitly emoji eye (second string) doesn’t match, when both signs used should be in the provided range?

[20:19] <japhb> Tirifto: I suspect it is because the emoji eye grapheme cluster internally gets a synthetic codepoint

[20:20] <Tirifto> japhb, something with an out-of-bounds codepoint value? `o`

[20:21] <drakonis> hmm, how do i iterate through a code block object to access each of the lines of code stored inside?

[20:21] <japhb> Tirifto: Yeah, when MoarVM needs to make a grapheme cluster into a single "character" it does it internally by assigning a negative codepoint, which is thus easy to distinguish from a "real" codepoint.

[20:22] <japhb> Tirifto: You might have more luck using a different canonicalization, like NFKD.

[20:24] <japhb> drakonis: The code block is opaque, and the lines inside have likely been optimized and rearranged.

[20:28] *** sena_kun left
[20:29] *** sena_kun joined
[20:29] <Tirifto> m: my $s = Uni.new(‘👁️’.ords); say ($_ ~~ /<[ \x[21] .. \x[10FFFF]]>+/) for $s.NFC, $s.NFD, $s.NFKC, $s.NFKD

[20:29] <camelia> rakudo-moar 530e17848: OUTPUT: «Nil␤Nil␤Nil␤Nil␤»

[20:30] <Tirifto> Either that doesn’t help or I’m using them wrong. :/

[20:30] <Xliff> lizmat: Any thoughts on the decomp issue from earlier?

[20:31] <drakonis> ah i see

[20:31] <drakonis> okay

[20:31] <Xliff> drakonis: The only way to do something like that is a ways off.

[20:32] <drakonis> rakuast still too far

[20:32] <Xliff> drakonis, exactly.

[20:34] <drakonis> it does make it harder to build the design i had in mind

[20:35] <drakonis> trying to make a composable automation system that takes closures

[20:36] <drakonis> take one and operate on its insides to send ssh commands

[20:37] <Tirifto> drakonis, I’m guessing a list of blocks wouldn’t do the trick?

[20:42] *** euandreh joined
[20:45] <drakonis> not really

[20:46] <drakonis> it needs a lot of ast manipulation

[20:47] <drakonis> a list of blocks isn't particularly ergonomic

[20:47] <japhb> m: say ‘👁️’.NFD.all ~~ (0x21 .. 0x10FFFF)  # Tirifto 

[20:47] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[20:47] <japhb> regexes work on Str, not on Uni.

[20:48] <Tirifto> Oh, I thought Uni would do its own thing there.

[20:49] <japhb> Tirifto: There have been discussions about allowing regex-like things to work on Uni and Blob directly, but that was NYI last time I checked

[20:50] <Tirifto> japhb, I see. So it seems my best bet would be comparing each individual codepoint to a range, rather than matching Raku’s Str against a Regex?

[20:50] <japhb> There are people who would really like to use a Grammar to take apart an IP datagram, but no such functionality currently exists

[20:50] <japhb> Tirifto: Well, what problem are you actually trying to solve?

[20:51] <japhb> If you're just wondering if a Str contains valid Unicode codepoints, the answer is yes -- because you can't make an invalid string.

[20:51] <japhb> (Well, without reaching down into the guts of the VM, or scribbling across the memory, I guess.)

[20:52] <japhb> Every operation you do on Str's automatically normalizes.

[20:53] <Tirifto> japhb, I’m trying to write a parser for KDL (document language akin to JSON or XML) in Raku, and the specification states which codepoints are allowed for certain parts of it. I’ve been attempting to write a grammar for it.

[20:54] <drakonis> anyways, the gist is that i'm using raku both to write and use the framework

[20:55] <Tirifto> I put an emoji including the eye into a test to see if it would match correctly (since by my understanding it ought to be valid)… and it wouldn’t. :-)

[20:57] <drakonis> the lack of ast macros is certainly a pain in my backside

[20:57] <drakonis> because i like the language

[20:58] <japhb> Tirifto: I understand if you're trying to make a *strict* parser ... but you can get started making a loose parser instead, and get that working before fighting the battle about codepoints.  You could also make a helper function that converts to NFD or so and call that at the appropriate places in your regex using <?{ ... }>

[20:59] <japhb> drakonis: Planned, and actually worked out fairly well by masak, just not ready yet because we want RakuAST first so we can make it Raku-official, rather than just Rakudo-internal.

[21:00] <drakonis> oh yes, i'm waiting for it already

[21:00] <Voldenet> when parsing anything, ignore the spec

[21:01] <drakonis> now for a different question, is there a health check on raku's community?

[21:01] <japhb> Huh?

[21:02] <drakonis> it always seems like it is one or two accidents from losing the folks that do the heavy lifting

[21:03] <Tirifto> japhb, I’m in the process of finding how far along I am now. Ignoring the tough details at first seems like a good idea, though, as does using <?{…}>. Thank you for the tips! :D

[21:03] <[Coke]> If you're concerned, folks on the RSC are a good resource to talk to.

[21:03] <[Coke]> (for drakonis)

[21:03] <japhb> Tirifto: Sure!  :-)

[21:04] <japhb> drakonis: Best we can do there is encourage folks to learn those heavy lifting tasks.  :-)

[21:04] <drakonis> ha, indeed.

[21:04] <Tirifto> Voldenet, implying it’s good to write only correct data and parse both correct and incorrect data if that works?

[21:05] <Voldenet> Well yes, accept everything in a predictable way (unless you're writing a validator)

[21:06] <[Coke]> I would recommend parsing incorrect data only if it's for diagnostics. "be liberal in what you accept" makes for challening maintenance.

[21:06] <japhb> Tirifto: Yeah, that's "Postel's Law".  It has been shown to be a problem if *all* parsers for a format are loose and also different -- HTML showed this.  But it's notable that HTML5 is *very* loose but just has a very well-defined junk recovery algorithm, because >90% of HTML on the web is broken.

[21:06] <[Coke]> *challenging

[21:06] <[Coke]> japhb++

[21:07] <drakonis> the community seems to be comprised mainly of folks that have been around since the very beginning

[21:07] <drakonis> but the only way to shift that is through writing useful libraries and projects

[21:07] <japhb> drakonis: Can confirm that is *not* true, but there are a few of us old hands still around.

[21:08] <drakonis> hm

[21:08] <drakonis> that's good to know then

[21:09] <drakonis> raku could probably use a big announcement post when rakuast lands

[21:09] <japhb> In many communities, you'll find that the people who do the heavy lifting and the "old hands" are heavily-overlapping sets, simply as a matter of having had enough time to learn the harder bits.

[21:09] <drakonis> drum up some excitement

[21:10] <japhb> Oh yeah, RakuAST is the single biggest blocker for the 6.e language release, which we can indeed celebrate.

[21:11] <Voldenet> I didn't mean being liberal and accepting any incorrect output, only being liberal if it means being able to make the parser easier to maintain – . is acceptable replacement for a-z character class ;)

[21:12] <Tirifto> Thank you, everyone, for your advice! I’ll be choosing a bit of looseness over complexity then, and save the latter for validating. :-)

[21:13] <japhb> Tirifto++

[21:14] <drakonis> it is always pleasant to see newcomers to the community

[21:14] <drakonis> even if i'm one myself

[21:16] <drakonis> that said, it'd make a fine replacement for something like julia

[21:16] <drakonis> minus scientific libraries i guess

[21:17] <Voldenet> (Oh, and there has been a lot of security problems because of looseness, but only when parser is expected to be strict - it's important to know whether parser can be used for validation)

[21:17] <Voldenet> (tons of url-related vulnerabilities were started by using loose parsers to validate urls in proxies)

[21:20] <Tirifto> (I guess that if I’m ever going to implement validation separately, it should be possible to make it an optional part of the parsing. `o`)

[21:31] <drakonis> a dumb question

[21:31] <drakonis> doesn't grammars also come with a feature to serialize it back to its original format?

[21:31] <drakonis> or is information related to the structure lost when the parsing is done?

[21:32] <drakonis> its an awful question

[21:39] <japhb> drakonis: A match object contains references to the original parsed string, along with position information that can tell you where each rule matched within that string.  So yes, you can serialize back to the original format trivially, because the original is still hanging around.

[21:39] <drakonis> beautiful.

[21:40] <drakonis> so you get the serializer for free

[21:40] <moon-child> not really

[21:40] <japhb> drakonis: And it runs in O(1) time!  ;-)

[21:40] <moon-child> you can't make an arbitrary syntax tree and synthesise strings from it without doing any work

[21:41] <moon-child> but yes, you can identify which sections of source a given match corresponds to

[21:41] <japhb> There is a different problem which is to create exemplars for a Grammar (various random strings that are known to successfully parse).  There was a module created for that a while back, but I doubt it's been kept up to date.

[21:42] <drakonis> quite a lot of power there

[21:42] *** evalable6 left
[21:42] *** linkable6 left
[21:43] *** linkable6 joined
[21:43] *** evalable6 joined
[21:44] <Voldenet> actually, there's two ways

[21:44] <Voldenet> .orig gives you original string and .Str serializes it

[21:44] <Voldenet> (.Str.WHERE has different address than .orig.WHERE, I'm not sure if it's just a copy)

[21:58] *** rbt joined
[22:02] <Xliff> Trifito: A bit of advanced processing with grammars would involve a loose match with a subsequent code block which you could use for more advanced tests.

[22:02] <Xliff> You might want to keep that in mind.

[22:05] *** monkey_ joined
[22:27] *** londoed joined
[22:27] *** londoed_ joined
[22:29] *** londoed_ left
[22:33] *** rbt left
[22:33] *** rbt joined
[22:42] *** jjido left
[22:45] *** melezhik joined
[22:45] <melezhik> .

[22:47] *** melezhik left
[22:57] *** monkey_ left
[23:03] *** rbt left
[23:03] *** rbt joined
[23:03] *** rbt left
[23:04] *** rbt joined
[23:14] *** rbt left
[23:14] *** rbt joined
[23:24] *** lichtkind left
[23:44] *** rbt left
[23:44] *** rbt joined
[23:50] *** monkey_ joined
[23:57] *** Xliff left
