[00:05] *** Skarsnik left
[00:06] *** Skarsnik joined
[00:07] *** reportable6 left
[00:46] *** lichtkind left
[00:49] *** [Coke]_ joined
[00:52] *** [Coke] left
[00:57] *** tellable6 joined
[00:58] *** nativecallable6 joined
[00:58] *** benchable6 joined
[00:59] *** evalable6 joined
[01:07] *** reportable6 joined
[01:15] *** Sgeo_ left
[01:16] *** Sgeo_ joined
[01:17] *** silug left
[01:17] *** silug joined
[01:18] *** discord-raku-bot left
[01:18] *** discord-raku-bot joined
[01:23] *** discord-raku-bot left
[01:23] *** discord-raku-bot joined
[01:35] *** epony joined
[01:56] *** shareable6 joined
[02:09] *** hasrthur joined
[02:14] *** hasrthur left
[02:14] *** discord-raku-bot left
[02:14] *** discord-raku-bot joined
[02:21] *** mahafyi left
[02:28] *** Xliff left
[02:29] *** Sgeo__ joined
[02:32] *** Sgeo_ left
[02:51] *** jrobi joined
[02:52] *** jrobi left
[03:01] *** frost joined
[03:03] *** frost left
[03:13] *** Garbanzo_ joined
[03:28] *** mahafyi joined
[03:56] *** statisfiable6 joined
[03:57] *** bloatable6 joined
[04:04] <elcaro> Hrm... Just got bit by the fact that `[R-] (...)` is not the same as `(...).reduce(* R- *)`
[04:04] <elcaro> using it in a reduction metaop process the list in reverse. can't seem to find this documented
[04:05] <elcaro> in fact, documentation on R seems hard to lookup in general. only found https://docs.raku.org/language/operators#Reversed_operators
[04:06] <elcaro> applies to produce/triangular redunction too...
[04:06] <elcaro> m: say ([\R~] <a b c>; <a b c>.produce(* R~ *));
[04:06] <camelia> rakudo-moar 382f2f108: OUTPUT: «((c cb cba) (a ba cba))␤»
[04:57] *** linkable6 left
[04:57] *** evalable6 left
[05:57] *** bloatable6 left
[05:57] *** releasable6 left
[05:57] *** notable6 left
[05:57] *** coverable6 left
[05:57] *** sourceable6 left
[05:57] *** benchable6 left
[05:57] *** committable6 left
[05:57] *** nativecallable6 left
[05:57] *** greppable6 left
[05:57] *** squashable6 left
[05:57] *** bisectable6 left
[05:57] *** reportable6 left
[05:57] *** tellable6 left
[05:57] *** statisfiable6 left
[05:57] *** shareable6 left
[05:57] *** quotable6 left
[05:57] *** unicodable6 left
[05:57] *** quotable6 joined
[05:58] *** bloatable6 joined
[05:58] *** reportable6 joined
[05:58] *** benchable6 joined
[05:58] *** tellable6 joined
[05:59] *** evalable6 joined
[05:59] *** committable6 joined
[05:59] *** bisectable6 joined
[05:59] *** squashable6 joined
[06:00] *** unicodable6 joined
[06:00] *** statisfiable6 joined
[06:07] *** reportable6 left
[06:16] *** andinus joined
[06:25] *** Ekho left
[06:28] *** Garbanzo_ left
[06:40] *** Ekho joined
[06:58] *** nativecallable6 joined
[06:59] *** linkable6 joined
[06:59] *** shareable6 joined
[06:59] *** notable6 joined
[06:59] *** releasable6 joined
[06:59] *** sourceable6 joined
[07:00] *** greppable6 joined
[07:20] *** abraxxa joined
[07:26] *** abraxxa left
[07:28] *** abraxxa joined
[07:33] *** abraxxa left
[07:34] *** abraxxa joined
[07:35] *** ychaouche joined
[07:45] *** squashable6 left
[07:53] *** lichtkind joined
[07:57] *** coverable6 joined
[08:08] *** reportable6 joined
[08:11] *** hasrthur joined
[08:11] *** Sgeo__ left
[08:12] *** japhb left
[08:15] *** hasrthur left
[08:34] *** japhb joined
[08:38] *** frost joined
[08:42] *** frost left
[08:47] *** squashable6 joined
[08:50] *** jjido joined
[08:58] *** hasrthur joined
[09:09] *** dakkar joined
[09:24] *** jjido left
[09:27] *** jjido joined
[09:50] <discord-raku-bot> <Nemokosch#9980> the part you linked:
[09:50] <discord-raku-bot> <Nemokosch#9980> _Any infix operator may be called with its two arguments reversed by prefixing with R. **Associativity of operands is reversed as well.**_
[09:51] <discord-raku-bot> <Nemokosch#9980> for me, this automatically implies that the `[R-] (...)` behavior was valid
[09:54] <SmokeMachine> patrickb: Please, when possible take a look at https://github.com/FCO/Red/issues/537
[10:00] *** mahafyi left
[10:02] *** lichtkind left
[10:04] <discord-raku-bot> <Nemokosch#9980> So yeah, the difference is that R- is right-associative while * R- * is left-associative by default, I guess
[10:06] <discord-raku-bot> <Nemokosch#9980> okay, this still doesn't explain:
[10:06] <discord-raku-bot> <Nemokosch#9980> mm: dd (1,4,5,10).reduce(&infix:<R->)
[10:06] <discord-raku-bot> <Nemokosch#9980> m: dd (1,4,5,10).reduce(&infix:<R->)
[10:06] <discord-raku-bot> <Nemokosch#9980> which is sadly still 8
[10:08] <discord-raku-bot> <Nemokosch#9980> _If &with is the code object of an operator, its inherent identity value and associativity is respected - in other words, (VAL1, VAL2, VAL3).reduce(&infix:<OP>) is the same as VAL1 OP VAL2 OP VAL3 even for operators which aren't left-associative:_
[10:08] <discord-raku-bot> <Nemokosch#9980> this is not true
[10:08] <discord-raku-bot> <Nemokosch#9980> ```perl
[10:08] <discord-raku-bot> <Nemokosch#9980> > (1,4,5,10).reduce(&infix:<R->)
[10:08] <discord-raku-bot> <Nemokosch#9980> 8
[10:08] <discord-raku-bot> <Nemokosch#9980> > 1 R- 4 R- 5 R- 10
[10:08] <discord-raku-bot> <Nemokosch#9980> 0
[10:08] <discord-raku-bot> <Nemokosch#9980> ```
[10:08] <discord-raku-bot> <Nemokosch#9980> Is this a bug?
[10:11] *** ugexe left
[10:12] *** jcallen left
[10:12] *** GreaseMonkey left
[10:12] *** mtj left
[10:12] <elcaro> I think the difference boils down to the .reduce or .produce methods process 2 args at a time, regardless of the associativity of the operator. The meta-reduction can consider the op before it processes the list, tho this means it  can handle infinite seq's
[10:12] *** jjido left
[10:12] <elcaro> m: say ([\R*] (1 .. Inf)).head(3);
[10:12] <camelia> rakudo-moar 382f2f108: OUTPUT: «WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:␤Cannot .elems a lazy list onto a List␤  in block <unit> at <tmp> line 1␤␤T…»
[10:13] *** greaser|q joined
[10:13] *** jcallen joined
[10:14] <discord-raku-bot> <Nemokosch#9980> I mean, take a look at the quote
[10:14] <discord-raku-bot> <Nemokosch#9980> it does suggest that the two "queries" should produce (or reduce, hahaha) the same result
[10:15] *** abraxxa left
[10:15] *** andinus` joined
[10:15] *** andinus left
[10:16] *** dakkar left
[10:16] <elcaro> I don't have time to dig into it now... but I assume this behaivior was chosen purposefully. Maybe it was chosen to mirror Haskell's `foldr` and `foldl`
[10:17] <discord-raku-bot> <Nemokosch#9980> _Whether reduce accumulates the elements starting from the left or from the right depends on the operator. In the functional programming world, this operation is generally called a fold. With a right-associative operator it is a right fold, otherwise (and usually) it is a left fold. In Raku, you can specify the associativity of an operator with the is assoc._
[10:18] *** dakkar joined
[10:18] <discord-raku-bot> <Nemokosch#9980> So yes, I don't know the exact definition either but trust me, this is worth reporting
[10:20] <discord-raku-bot> <Nemokosch#9980> The behavior explicitly contradicts the documentation so it's either wrong or the documentation needs extra explanation as to why the current description doesn't apply to this scenario
[10:21] <elcaro> bisectable6: say [R-] 1,3,5,10
[10:21] <bisectable6> elcaro, Will bisect the whole range automagically because no endpoints were provided, hang tight
[10:21] <bisectable6> elcaro, ¦6c (60 commits): «1␤»
[10:21] <bisectable6> elcaro, Nothing to bisect!
[10:22] *** jjido joined
[10:22] <elcaro> it's always been that way... so probably just needs doc update
[10:24] *** mtj joined
[10:25] *** ugexe joined
[10:29] <discord-raku-bot> <Nemokosch#9980> I mean, [R-] _is right_
[10:29] <discord-raku-bot> <Nemokosch#9980> see "Any infix operator may be called with its two arguments reversed by prefixing with R. Associativity of operands is reversed as well."
[10:30] *** abraxxa joined
[10:30] <discord-raku-bot> <Nemokosch#9980> (1,3,5,10).reduce(infix:<R->) is wrong
[10:31] <discord-raku-bot> <Nemokosch#9980> One could say it's wrong for the sole reason that it isn't the same as [R-] but anyway, that's the one that contradicts the docs
[10:32] *** jjido left
[10:36] <elcaro> The associativy is swapped, which is why the meta-reduction does what it does... but .reduce lazily processes 2 args at a time, so it can't possibly to a right-fold
[10:36] <elcaro> `(1,3,5,10).reduce(&infix:<R->)` essentially expands to `(((1 R- 3) R- 5) R- 10)`
[10:37] <discord-raku-bot> <Nemokosch#9980> Come on, I have quoted the docs several times by now
[10:37] <discord-raku-bot> <Nemokosch#9980> it explicitly states that the reduce method does take associativity into account, it expands without "parentheses" and it plays the role of foldl AND foldl, depending on the operator
[10:39] <discord-raku-bot> <Nemokosch#9980> this is a serious enough contradiction to ".reduce lazily processes 2 args at a time, so it can't possibly to a right-fold"
[10:39] <discord-raku-bot> <Nemokosch#9980> and indeed, why should/would List.reduce be lazy?
[10:39] <discord-raku-bot> <Nemokosch#9980> Supply.reduce okay but List.reduce doesn't have to and it has no particularly good reason to
[10:42] <elcaro> yeah, WRT laziness, it's more applicable to .produce
[10:42] <elcaro> but yes, I can see the docs, particularly the section you  copied starting with _Whether reduce accumulates the elements starting from the left or from_
[10:43] <elcaro> but it never shows examples of this working with .reduce method, only the meta-reduction
[10:46] *** mexen_ joined
[10:46] *** mexen left
[10:46] *** m_athias left
[10:46] *** Arathorn left
[10:46] *** charsbar left
[10:46] *** mexen_ is now known as mexen
[10:46] *** Juerd left
[10:47] *** synthmeat left
[10:47] *** m_athias joined
[10:48] <elcaro> bisectable6: say (1,3,5,10).reduce(&infix:<R->)
[10:48] <bisectable6> elcaro, Will bisect the whole range automagically because no endpoints were provided, hang tight
[10:48] *** Juerd joined
[10:49] *** Juerd joined
[10:49] <bisectable6> elcaro, ¦6c (60 commits): «7␤»
[10:49] <bisectable6> elcaro, Nothing to bisect!
[10:51] *** charsbar joined
[10:51] *** dakkar left
[10:51] *** dakkar joined
[10:51] <Voldenet> Can I somehow call methods on hashes to get its keys?
[10:52] <Voldenet> m: role X { method ACCEPTS($_) { $_.x ~~ $.x } }; class A is X { has $.x; }; say A.new(:5x) ~~ {:5x} but X
[10:52] <camelia> rakudo-moar b9ffbb973: OUTPUT: «No such method 'x' for invocant of type 'Hash+{X}'␤  in method ACCEPTS at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[10:52] <discord-raku-bot> <Nemokosch#9980> there is the keys method, right?
[10:52] <discord-raku-bot> <Nemokosch#9980> or what do you mean?
[10:53] <discord-raku-bot> <Nemokosch#9980> elcaro: anyway, I'd say let's not forget this phenomenon because 1. I can still imagine it's a bug 2. if it's no bug, it would be good to get an explanation and add it to the docs
[10:54] <Voldenet> to somehow do this `({:5x} but Magic).x`
[10:57] <discord-raku-bot> <elcaro#8265> I will first see if I can find any artifacts in the IRC logs, as well as any existing issues
[10:57] *** hasrthur left
[10:57] *** hasrthur joined
[10:59] *** Arathorn joined
[11:00] *** synthmeat joined
[11:02] <MasterDuke> m: role X { method FALLBACK(Hash:D: $key) { self{$key} } }; say ({:5x} but X).x   # Voldenet like this?
[11:02] <camelia> rakudo-moar b9ffbb973: OUTPUT: «5␤»
[11:03] <Voldenet> Yes, exactly! MasterDuke++
[11:04] <discord-raku-bot> <Nemokosch#9980> what is "but" actually?
[11:04] <Voldenet> operator creating value with mixin
[11:11] <elcaro> `but` mixes a role in at runtime (as opposed to `class Foo does Bar` which mixes the `Bar` role in at compiletime)
[11:15] *** mahafyi joined
[11:26] <leont> I'm dd()ing an array, but I'm getting a «Cannot .elems a lazy list onto a Array» error and I don't understand why
[11:27] <leont> It shouldn't be lazy AFAICT
[11:31] *** jjido joined
[11:33] <elcaro> leont: Array's can still house lazy Seq's. What's you're array look like
[11:33] <elcaro> m: my @a = (1..Inf); say 'no eagerness here'
[11:33] <camelia> rakudo-moar ffa09ff68: OUTPUT: «no eagerness here␤»
[11:33] *** unclechu left
[11:33] *** AlexDaniel left
[11:33] *** anight[m] left
[11:33] *** andrea[m] left
[11:33] *** CIAvash left
[11:33] *** Arathorn left
[11:35] <leont> I know they can, but I'm surprised this is
[11:36] *** hasrthur_ joined
[11:37] <leont> It's a Never mind. I accidentally used an X where I meant a Z, and then everything exploded
[11:37] *** hasrthur left
[11:41] *** CIAvash joined
[11:47] *** CIAvash left
[11:51] *** jjido left
[12:01] *** CIAvash joined
[12:02] *** hasrthur_ left
[12:02] *** CIAvash left
[12:06] *** reportable6 left
[12:08] *** CIAvash joined
[12:33] *** [Coke]_ is now known as [Coke]
[12:36] *** CIAvash left
[12:40] *** AlexDaniel joined
[12:40] *** Arathorn joined
[12:40] *** unclechu joined
[12:40] *** andrea[m] joined
[12:40] *** anight[m] joined
[13:07] *** Averna joined
[13:07] *** reportable6 joined
[13:16] *** jjido joined
[13:23] *** Darkcoal joined
[13:31] *** jgaz joined
[13:31] *** m6502 joined
[13:31] *** m6502 left
[13:31] *** jgaz left
[13:31] *** jgaz joined
[13:33] *** Darkcoal left
[13:35] *** Darkcoal joined
[13:43] *** jjido left
[13:45] *** lichtkind joined
[13:49] *** Darkcoal left
[13:51] *** Darkcoal joined
[13:53] *** jgaz left
[13:57] *** jjido joined
[14:14] *** mahafyi left
[14:21] *** mahafyi joined
[14:26] *** SqrtNegInf joined
[14:28] * lizmat clickbaits https://rakudoweekly.blog/2022/01/31/2022-05-foo-is-42/
[14:28] *** CIAvash joined
[14:54] *** jjido left
[15:33] *** Sgeo joined
[15:36] *** D5n9sMatrix joined
[15:43] *** linkable6 left
[15:45] *** qorg11 left
[15:46] *** linkable6 joined
[15:49] *** qorg11 joined
[15:50] *** linkable6 left
[15:52] *** linkable6 joined
[15:59] *** D5n9sMatrix left
[16:13] *** ychaouche left
[16:16] *** swaggboi left
[16:21] *** swaggboi joined
[16:49] *** jjido joined
[17:13] *** Averna left
[17:15] *** Sgeo_ joined
[17:19] *** Sgeo left
[17:41] <Geth> ¦ doc: b10615679b | (Suman Khanal)++ (committed using GitHub Web editor) | doc/Language/py-nutshell.pod6
[17:41] <Geth> ¦ doc: Update python to raku
[17:41] <Geth> ¦ doc: 
[17:41] <Geth> ¦ doc: As we know python 2 is no longer maintained https://www.python.org/doc/sunset-python-2/, its better to reflect examples 
[17:41] <Geth> ¦ doc: compatible with python 3 unless we mean python 2 explicitly. This patch makes python examples compatible with python 3.
[17:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/b10615679b
[17:41] <linkable6> Link: https://docs.raku.org/language/py-nutshell
[17:41] *** dakkar left
[17:53] *** abraxxa left
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:31] *** dextercd joined
[18:37] *** mahafyi left
[18:38] *** mahafyi joined
[18:39] *** jjido left
[18:42] *** jjido joined
[18:58] *** ajr joined
[19:20] <Geth> ¦ doc/circleci: 06b41720f4 | sumanstats++ | 2 files
[19:20] <Geth> ¦ doc/circleci: Remove .circleci folder
[19:20] <Geth> ¦ doc/circleci: 
[19:20] <Geth> ¦ doc/circleci: Seems like circleci link is dead. As the github action is good, there's no need to keep circleci. Remove.
[19:20] <Geth> ¦ doc/circleci: review: https://github.com/Raku/doc/commit/06b41720f4
[19:20] <Geth> ¦ doc/circleci: e7ab97e363 | sumanstats++ | README.md
[19:20] <Geth> ¦ doc/circleci: remove circleci from README
[19:20] <Geth> ¦ doc/circleci: review: https://github.com/Raku/doc/commit/e7ab97e363
[19:20] <Geth> ¦ doc/circleci: 949e2f2f0b | sumanstats++ | shippable.yml
[19:20] <Geth> ¦ doc/circleci: Remove shippable yml
[19:20] <Geth> ¦ doc/circleci: 
[19:20] <Geth> ¦ doc/circleci: Doesn't seem to be of use. Remove
[19:20] <Geth> ¦ doc/circleci: review: https://github.com/Raku/doc/commit/949e2f2f0b
[19:23] <Geth> ¦ doc: sumanstats++ created pull request #4024: Remove unnecessary files and links
[19:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4024
[19:33] *** clarjon_1 joined
[19:35] *** clarjon1 left
[19:36] *** ajr left
[19:42] <Geth> ¦ doc: 0eadc5a489 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/objects.pod6
[19:42] <Geth> ¦ doc: Document `handles(**)` (#4019)
[19:42] <Geth> ¦ doc: 
[19:42] <Geth> ¦ doc: Explains that you can pass a HyperWhatever to the `handles` method
[19:42] <Geth> ¦ doc: and describes how that's different from passing a Whatever.
[19:42] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0eadc5a489
[19:42] <linkable6> Link: https://docs.raku.org/language/objects
[19:42] *** linkable6 left
[19:43] *** greaser|q left
[19:43] *** greaser|q joined
[19:43] *** greaser|q is now known as GreaseMonkey
[19:54] *** ajr joined
[19:58] *** ajr left
[20:11] <discord-raku-bot> <Nemokosch#9980> lizmat: do you by any chance know something about the strange behavior of List.reduce with infix:<R-> ?
[20:11] <discord-raku-bot> <Nemokosch#9980> that is, not taking right-associativity into account (unlike [R-])
[20:11] <lizmat> nope
[20:15] <discord-raku-bot> <Nemokosch#9980> Perhaps it's issue-worthy then?
[20:22] <Geth> ¦ doc/circleci: fd77a5e37c | sumanstats++ | 2 files
[20:22] <Geth> ¦ doc/circleci: Revert "Remove .circleci folder"
[20:22] <Geth> ¦ doc/circleci: 
[20:22] <Geth> ¦ doc/circleci: This reverts commit 06b41720f41b002f1575b20ced338b3b73fbe1c6.
[20:22] <Geth> ¦ doc/circleci: CircleCI builds documentation. So keep it.
[20:22] <Geth> ¦ doc/circleci: review: https://github.com/Raku/doc/commit/fd77a5e37c
[20:22] <Geth> ¦ doc/circleci: 51d2f935f8 | sumanstats++ | README.md
[20:22] <Geth> ¦ doc/circleci: Revert "remove circleci from README"
[20:22] <Geth> ¦ doc/circleci: 
[20:22] <Geth> ¦ doc/circleci: This reverts commit e7ab97e36374c986f4bca913cb666ace9c0ba1de.
[20:22] <Geth> ¦ doc/circleci: review: https://github.com/Raku/doc/commit/51d2f935f8
[20:22] <lizmat> probably  :-)
[20:27] *** Sgeo joined
[20:30] *** Sgeo_ left
[20:40] *** ajr joined
[20:43] *** chronon left
[20:44] *** linkable6 joined
[20:57] *** Kaiepi left
[21:04] *** jjido left
[21:06] *** Darkcoal left
[21:09] *** Sgeo_ joined
[21:09] *** Sgeo left
[21:10] *** jjido joined
[21:28] <discord-raku-bot> <Nemokosch#9980> to which repository?
[21:29] *** Sgeo joined
[21:31] *** Sgeo_ left
[21:58] *** vrurg left
[21:58] *** vrurg joined
[22:03] *** Kaiepi joined
[22:12] *** jjido left
[22:31] *** dextercd left
[22:39] *** ajr left
[22:46] <SqrtNegInf> h
[22:46] *** SqrtNegInf left
[23:01] <[Coke]> i
[23:03] <MasterDuke> j
[23:03] *** ajr joined
[23:05] <japhb> I am now hearing https://www.youtube.com/watch?v=i0r8egBvWRM in my head
[23:09] *** ajr left
[23:16] <MasterDuke> heh, i'd never heard that one before
[23:20] *** djerius left
[23:21] *** djerius joined
[23:36] *** ajr joined
[23:41] *** ajr left
