[00:06] *** reportable6 left
[00:07] *** reportable6 joined
[00:18] *** discord-raku-bot left
[00:19] *** discord-raku-bot joined
[00:40] *** derpydoo left
[00:41] *** Kaipei left
[00:52] *** ToddAndMargo joined
[00:53] <ToddAndMargo> Any chanced in the future of you guys allowing me to declare more than one thing returned on the sub declaration?  Sort of like `sub FolderSize( Str $FolderPath --> Int, Str)  {`

[00:53] <ToddAndMargo> Maybe I just don't know how?

[01:10] *** rba left
[01:10] *** broquaint left
[01:10] *** tinita left
[01:10] *** hexology left
[01:10] *** dustinm` left
[01:10] *** rba joined
[01:11] *** hexology joined
[01:20] *** [Coke]__ joined
[01:20] *** [Coke] left
[01:26] *** dustinm` joined
[01:36] *** habere-et-disper joined
[01:46] *** Guest66 joined
[01:47] *** Guest66 left
[01:49] <vrurg> ToddAndMargo: look for subset in the docs

[01:50] *** perlbot left
[01:50] *** simcop2387 left
[01:52] *** derpydoo joined
[01:58] *** perlbot joined
[01:59] *** simcop2387 joined
[02:03] *** frost75 joined
[02:04] *** deoac joined
[02:14] <ToddAndMargo> I looked up subset.  Could not figure out what you meant.  I am returning an integer and a string

[02:25] *** silug left
[02:25] *** silug joined
[02:38] *** frost75 left
[02:44] *** habere-et-disper left
[02:47] *** bigdata joined
[02:47] *** bigdata left
[02:50] *** ToddAndMargo left
[03:05] *** derpydoo left
[03:16] *** deoac left
[04:16] *** reportable6 left
[04:16] *** committable6 left
[04:16] *** notable6 left
[04:16] *** benchable6 left
[04:16] *** bloatable6 left
[04:16] *** tellable6 left
[04:16] *** nativecallable6 left
[04:16] *** sourceable6 left
[04:16] *** linkable6 left
[04:16] *** shareable6 left
[04:16] *** greppable6 left
[04:16] *** coverable6 left
[04:16] *** quotable6 left
[04:16] *** releasable6 left
[04:16] *** evalable6 left
[04:16] *** bisectable6 left
[04:16] *** squashable6 left
[04:16] *** statisfiable6 left
[04:16] *** unicodable6 left
[04:17] *** shareable6 joined
[04:17] *** nativecallable6 joined
[04:17] *** reportable6 joined
[04:17] *** statisfiable6 joined
[04:17] *** notable6 joined
[04:17] *** quotable6 joined
[04:18] *** sourceable6 joined
[04:18] *** coverable6 joined
[04:18] *** greppable6 joined
[04:18] *** benchable6 joined
[04:18] *** tellable6 joined
[04:18] *** bisectable6 joined
[04:18] *** bloatable6 joined
[04:18] *** committable6 joined
[04:19] *** evalable6 joined
[04:19] *** releasable6 joined
[04:19] *** squashable6 joined
[04:19] *** linkable6 joined
[04:19] *** unicodable6 joined
[04:31] *** discord-raku-bot left
[04:35] *** HvszrStykp left
[05:11] *** discord-raku-bot joined
[05:15] *** discord-raku-bot left
[05:34] *** discord-raku-bot joined
[05:37] *** discord-raku-bot left
[05:40] *** discord-raku-bot joined
[05:46] *** Abhoerschutz left
[05:46] *** Abhoerschutz joined
[05:52] *** abraxxa joined
[05:56] *** abraxxa left
[05:56] *** abraxxa joined
[06:00] *** djerius left
[06:02] *** djerius joined
[06:06] *** reportable6 left
[06:07] *** reportable6 joined
[06:48] *** Sgeo left
[07:14] *** squashable6 left
[07:16] *** squashable6 joined
[07:16] *** labster joined
[07:18] <discord-raku-bot> <Nemokosch> So you are returning a tuple?

[07:45] *** sena_kun joined
[07:48] *** Kaipei joined
[07:49] *** lichtkind joined
[08:08] *** tinita joined
[08:15] *** dakkar joined
[08:24] *** sftp left
[08:25] *** sftp joined
[08:36] *** Manifest0 left
[08:43] *** haxxelotto left
[08:46] *** haxxelotto joined
[09:45] <discord-raku-bot> <Nemokosch> Is there a way to tell a regex (or a grammar) "match any _permutation_ of these terms?"

[09:46] *** evalable6 left
[09:46] *** linkable6 left
[09:47] *** linkable6 joined
[09:48] *** evalable6 joined
[10:30] <guifa> Nemokosch: if they can be in any order AND any number, [<a><b><c>]*

[10:30] <tellable6> guifa, I'll pass your message to Nemokosch

[10:30] <guifa> if must be exactly 1

[10:30] <guifa> m: my $r = /[$<a>=a|$<b>=b|$<c>=c]* <?{$/<a b c>».elems.all == 1}> /; say so 'abc' ~~  $r; say so 'bac' ~~ $r; say so 'ba' ~~ $r; say so 'abbc' ~~$r;

[10:30] <camelia> rakudo-moar 388924d67: OUTPUT: «True␤True␤False␤False␤»

[10:33] <discord-raku-bot> <Nemokosch> yeah rather the latter, thanks

[10:34] *** Kaipei left
[10:38] <guifa> if your token is nothing more than the permutations, you could probably say something like (untested) $/.kv.grep(*.value.elems == 1) == $/.keys and you wouldn't need to update for each element in the list

[10:38] * guifa is afk

[10:52] *** labster left
[10:56] *** Kaipei joined
[11:19] <Geth> ¦ advent: massa++ created pull request #95: Update authors.md

[11:19] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/95

[11:29] *** sena_kun left
[11:51] <Geth> ¦ advent: 0f7f156d28 | (Humberto Massa)++ (committed using GitHub Web editor) | raku-advent-2022/authors.md

[11:51] <Geth> ¦ advent: Update authors.md

[11:51] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/0f7f156d28

[11:51] <Geth> ¦ advent: 87ff772234 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | raku-advent-2022/authors.md

[11:51] <Geth> ¦ advent: Merge pull request #95 from massa/patch-2

[11:51] <Geth> ¦ advent: 

[11:51] <Geth> ¦ advent: Update authors.md

[11:51] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/87ff772234

[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:32] *** Kaipei left
[12:41] *** Kaiepi joined
[12:43] <SmokeMachine> m: my @elems = <a b c>.permutations.map: *.join; say "cab" ~~ /^ @elems $/

[12:43] <camelia> rakudo-moar 388924d67: OUTPUT: «｢cab｣␤»

[12:49] *** derpydoo joined
[12:50] <discord-raku-bot> <Nemokosch> this would explode pretty soon, right?

[13:34] *** Sgeo joined
[13:59] *** MasterDuke joined
[14:12] *** derpydoo left
[14:56] *** abraxxa left
[15:01] *** jgaz joined
[15:15] *** deoac joined
[15:21] *** HvszrStykp joined
[15:39] *** deoac left
[15:51] *** lichtkind left
[16:03] *** Kaiepi left
[16:07] *** lichtkind joined
[16:08] *** Kaiepi joined
[16:30] *** simcop2387 left
[16:30] *** perlbot left
[16:36] *** squashable6 left
[16:38] *** squashable6 joined
[16:39] *** donpdonp- joined
[16:39] *** ProperNoun left
[16:39] *** dakkar left
[16:39] *** tobs left
[16:40] *** andinus` joined
[16:40] *** justache joined
[16:40] *** El_Che left
[16:40] *** lucs left
[16:40] *** jjatria left
[16:40] *** ProperNoun joined
[16:40] *** Maximus joined
[16:40] *** Some-body_ joined
[16:40] *** gabiruh_ left
[16:40] *** eseyman left
[16:40] *** Geth left
[16:40] *** JRaspass left
[16:40] *** tobs joined
[16:40] *** gabiruh joined
[16:41] *** ilogger2 left
[16:41] *** donpdonp|z_ left
[16:41] *** andinus left
[16:41] *** sivoais left
[16:41] *** Zero_Dogg left
[16:41] *** DarthGandalf left
[16:41] *** Sevalecan left
[16:41] *** _________ left
[16:41] *** Scotteh left
[16:41] *** moritz left
[16:41] *** xkr47 left
[16:41] *** Maximus is now known as Sevalecan

[16:41] *** epony left
[16:41] *** mtj left
[16:41] *** Maylay left
[16:41] *** justHaunted left
[16:42] *** El_Che joined
[16:42] *** xkr47 joined
[16:42] *** eseyman joined
[16:42] *** moritz joined
[16:42] *** sivoais joined
[16:42] *** epony joined
[16:43] *** _________ joined
[16:43] *** Some-body_ is now known as DarthGandalf

[16:44] *** Maylay joined
[16:45] *** lucs joined
[16:46] *** Scotteh joined
[16:53] *** jjatria joined
[16:53] *** JRaspass joined
[16:53] *** mtj joined
[16:53] *** ilogger2 joined
[16:54] *** Zero_Dogg joined
[16:55] *** equinox joined
[16:56] *** equinox left
[16:56] *** equinox joined
[16:58] *** justache is now known as justHaunted

[17:12] *** simcop2387 joined
[17:13] *** perlbot joined
[17:29] *** DarthGandalf left
[17:30] *** DarthGandalf joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:16] *** equinox left
[18:20] *** MasterDuke left
[18:34] *** slu joined
[18:49] *** derpydoo joined
[19:15] *** Xliff joined
[19:15] <Xliff> \o

[19:16] <Xliff> Is there a way to use a Promise (or some other method) to implement a timeout on a method call?

[19:19] *** equinox joined
[19:24] <Xliff> m: my $colde = start { sleep 20; say "oops!" }; await Promise.in(2).then: { $code.break }; sleep 25;

[19:24] <camelia> rakudo-moar 388924d67: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$code' is not declared.  Did you mean any of these: '$colde',␤'Code'?␤at <tmp>:1␤------>  "oops!" }; await Promise.in(2).then: { ⏏$code.break }; sleep 25;␤»

[19:24] <Xliff> m: my $code = start { sleep 20; say "oops!" }; await Promise.in(2).then: { $code.break }; sleep 25;

[19:24] <camelia> rakudo-moar 388924d67: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Access denied to keep/break this Promise; already vowed␤      in block  at <tmp> line 1␤␤»

[19:25] <Xliff> m: my $code = start { sleep 20; say "oops!" }; my $v = $code.vow; await Promise.in(2).then: { $v.break }; sleep 25;

[19:25] <camelia> rakudo-moar 388924d67: OUTPUT: «Access denied to keep/break this Promise; already vowed␤  in block <unit> at <tmp> line 1␤␤»

[19:25] <Xliff> m: my $code = start { sleep 20; say "oops!" }; await Promise.in(2).then: { $code.break }; sleep 25;

[19:25] <camelia> rakudo-moar 388924d67: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Access denied to keep/break this Promise; already vowed␤      in block  at <tmp> line 1␤␤»

[19:25] <Xliff> ??? Since when?

[19:26] <Xliff> m: my $code = start { sleep 20; say "oops!" }; Promise.in(2).then: { $code.break }; sleep 25;

[19:26] <camelia> rakudo-moar 388924d67: OUTPUT: «(timeout)oops!␤»

[19:27] <Xliff> m: my $code = start { sleep 10; say "oops!" }; Promise.in(2).then: { $code.break; say "Broken"  }; sleep 15;

[19:27] <camelia> rakudo-moar 388924d67: OUTPUT: «oops!␤»

[19:27] <tonyo> Xliff: you can't break a start {} 

[19:28] <tonyo> it'll leave that promise/code running and open if you time out that way

[19:28] <Xliff> So how can I make the code block timeout.

[19:28] <tonyo> are you running some long process in a loop or waiting on an external system in your start block?

[19:28] <Xliff> Yep.

[19:28] <tonyo> if a loop you can get away with a semaphore

[19:28] <tonyo> if an external system then you need a different mechanism

[19:28] <Xliff> OK. What system would you recommend?

[19:29] <Xliff> Actually, I wonder if I am overthinking it.. .(probably)

[19:30] <tonyo> what are you doing, specifically?

[19:31] <Xliff> Trying to get a JSON response from a webservice/

[19:31] <tonyo> if you're doing a loop and the iterations are fairly short lived you can do:

[19:32] <tonyo> m: my @timeout = (Promise.in(1); start { for 1..100 { die "cancel" if @timeout[0].status ~~ PromiseStatus::Kept; sleep 1; }; say "complete"; "done"; }); await Promise.anyof(|@timeout); @timeout.map({ $_.status ~~ PromiseStatus::Planned && $_.vow.break("timeout") }); await Promise.allof(@timeout); dd @timeout.map({ try { $_.result } // $_.cause });

[19:32] <camelia> rakudo-moar 388924d67: OUTPUT: «(Bool::True, X::AdHoc.new(payload => "cancel")).Seq␤»

[19:32] <Xliff> So instead of NYI, I just use the timeout mechanism provided... LOL

[19:32] <tonyo> for a web request there should be some timeout mech

[19:32] <tonyo> haha yes

[19:32] <Xliff> er...

[19:32] <Xliff> s/NYI/NIH/

[19:39] * lizmat clickbaits https://rakudoweekly.blog/2022/10/24/2022-43-cro-apper/

[19:44] *** haxxelotto left
[19:45] *** haxxelotto joined
[19:58] *** Geth joined
[20:00] *** haxxelotto left
[20:11] *** jjido joined
[20:20] *** haxxelotto joined
[20:26] *** jjido left
[20:30] *** haxxelotto left
[20:50] *** epony left
[20:51] *** epony joined
[20:53] *** equinox left
[20:53] *** slu left
[21:18] *** squashable6 left
[21:19] *** squashable6 joined
[21:22] *** lichtkind left
[21:24] *** [Coke]__ left
[21:33] *** derpydoo left
[21:38] *** jgaz left
[22:18] *** johnjaye left
[22:20] *** johnjaye joined
[22:48] *** Guest95 joined
[22:50] *** Guest95 left
[22:54] *** epony left
[23:54] *** committable6 left
[23:54] *** bloatable6 left
[23:54] *** nativecallable6 left
[23:54] *** notable6 left
[23:54] *** quotable6 left
[23:54] *** shareable6 left
[23:54] *** evalable6 left
[23:54] *** bisectable6 left
[23:54] *** benchable6 left
[23:54] *** statisfiable6 left
[23:54] *** greppable6 left
[23:54] *** unicodable6 left
[23:54] *** squashable6 left
[23:54] *** reportable6 left
[23:54] *** tellable6 left
[23:54] *** sourceable6 left
[23:54] *** coverable6 left
[23:54] *** linkable6 left
[23:54] *** releasable6 left
[23:54] *** notable6 joined
[23:55] *** committable6 joined
[23:55] *** sourceable6 joined
[23:55] *** shareable6 joined
[23:55] *** squashable6 joined
[23:56] *** greppable6 joined
[23:56] *** evalable6 joined
[23:56] *** linkable6 joined
[23:56] *** releasable6 joined
[23:56] *** quotable6 joined
[23:56] *** bloatable6 joined
[23:56] *** benchable6 joined
[23:56] *** reportable6 joined
[23:57] *** bisectable6 joined
[23:57] *** coverable6 joined
[23:57] *** tellable6 joined
[23:57] *** nativecallable6 joined
[23:57] *** statisfiable6 joined
[23:57] *** unicodable6 joined
