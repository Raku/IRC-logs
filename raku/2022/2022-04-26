[00:06] *** discord-raku-bot left
[00:06] *** discord-raku-bot joined
[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[00:10] *** discord-raku-bot left
[00:11] *** discord-raku-bot joined
[00:17] *** Arathorn is now known as Matthew|m

[00:59] *** ajr left
[01:06] *** coleman joined
[01:41] *** frost joined
[02:32] *** zacts joined
[02:42] *** zacts is now known as z4kz

[03:18] *** Guest35 left
[03:31] *** [Coke] left
[03:31] *** coleman left
[03:34] *** [Coke] joined
[04:34] *** evalable6 left
[04:34] *** benchable6 left
[04:34] *** linkable6 left
[04:34] *** bloatable6 left
[04:34] *** unicodable6 left
[04:34] *** quotable6 left
[04:34] *** notable6 left
[04:34] *** greppable6 left
[04:34] *** statisfiable6 left
[04:34] *** sourceable6 left
[04:34] *** coverable6 left
[04:34] *** tellable6 left
[04:34] *** bisectable6 left
[04:34] *** nativecallable6 left
[04:34] *** releasable6 left
[04:34] *** shareable6 left
[04:34] *** committable6 left
[04:34] *** reportable6 left
[04:34] *** notable6 joined
[04:34] *** releasable6 joined
[04:34] *** linkable6 joined
[04:35] *** sourceable6 joined
[04:35] *** coverable6 joined
[04:35] *** statisfiable6 joined
[04:35] *** bisectable6 joined
[04:35] *** committable6 joined
[04:35] *** benchable6 joined
[04:35] *** quotable6 joined
[04:36] *** unicodable6 joined
[04:36] *** greppable6 joined
[04:37] *** tellable6 joined
[04:37] *** evalable6 joined
[04:37] *** reportable6 joined
[04:37] *** shareable6 joined
[04:37] *** bloatable6 joined
[04:37] *** nativecallable6 joined
[04:42] *** euandreh left
[04:44] *** euandreh joined
[04:52] *** jaguart joined
[04:59] *** z4kz left
[05:11] *** euandreh left
[05:13] *** euandreh joined
[05:39] *** Util left
[05:46] *** Util joined
[06:07] *** reportable6 left
[06:07] *** reportable6 joined
[06:15] *** vrurg joined
[06:17] *** vrurg_ left
[06:18] *** jjido joined
[06:46] *** abraxxa joined
[06:47] *** abraxxa left
[06:50] *** abraxxa joined
[06:55] *** abraxxa left
[06:56] *** abraxxa joined
[07:15] *** Sgeo left
[07:26] *** Sankalp left
[07:29] *** Sankalp joined
[07:53] *** MasterDuke joined
[07:59] *** dakkar joined
[08:10] *** lichtkind joined
[08:11] *** jjido left
[08:12] *** jjido joined
[08:13] *** mexen joined
[08:18] <discord-raku-bot> <Nemokosch#9980> m: say qq{ {1 + 2} }

[08:20] <discord-raku-bot> <Nemokosch#9980> anyway...

[08:20] <discord-raku-bot> <Nemokosch#9980> > >  say qq{ {1 + 2} }                                                           

[08:20] <discord-raku-bot> <Nemokosch#9980> >  {1 + 2} 

[08:20] <discord-raku-bot> <Nemokosch#9980> > >  say qq/ {1 + 2} /                                                           

[08:20] <discord-raku-bot> <Nemokosch#9980> >  3 

[08:20] <discord-raku-bot> <Nemokosch#9980> I'd still like to know if this is an issue, or not documented, or I failed to notice

[08:26] *** Nemokosch joined
[08:27] *** jjido left
[08:28] <Nemokosch> *just a little test*

[08:28] <discord-raku-bot> <Nemokosch#9980> funky

[08:28] *** Nemokosch left
[08:33] *** Util left
[08:39] *** Util joined
[08:46] *** grondilu joined
[08:52] *** grondilu left
[08:53] *** grondilu joined
[09:05] <El_Che> building rakudo-pkg for new release

[09:10] <lizmat> ++El_Che

[09:15] *** jjido joined
[09:25] *** Oshawott joined
[09:26] <El_Che> t/02-rakudo/18-pseudostash.t    flopper-de-flop

[09:29] *** archenoth left
[09:53] *** jjido left
[10:20] <El_Che> done

[10:27] *** Altai-man joined
[10:30] *** sena_kun left
[10:40] *** sena_kun joined
[10:43] *** Altai-man left
[11:17] *** lichtkind left
[11:17] *** lichtkind_ joined
[11:24] *** jjido joined
[11:26] <grondilu> bduggan, author of https://git.sr.ht/~bduggan/raku-protobuf, not around?

[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[12:16] <lizmat> I don't recall seeing bduggan here, fwiw

[12:16] * lizmat clickbaits https://rakudoweekly.blog/2022/04/25/2022-16-7-complainrelease/

[12:24] <grondilu> unrelated:

[12:24] <grondilu> m: proto foo($) {*}; multi foo(uint8 $) {}; multi foo(uint16 $) {}; foo my uint8 $

[12:24] <camelia> rakudo-moar 530e17848: OUTPUT: «Ambiguous call to 'foo(Int)'; these signatures all match:␤  (uint8 $)␤  (uint16 $)␤  in block <unit> at <tmp> line 1␤␤»

[12:24] <grondilu> can't a multidispatch work with natives?

[12:25] <grondilu> or am I missing something obvious?

[12:26] * grondilu is also suprised that foo is assumed to take a Int as parameter.

[12:26] <grondilu> m: proto foo($) {*}; multi foo(uint8 $) {}; multi foo(uint16 $) {}; multi foo(Str $) {}; foo my uint8 $

[12:26] <camelia> rakudo-moar 530e17848: OUTPUT: «Ambiguous call to 'foo(Int)'; these signatures all match:␤  (uint8 $)␤  (uint16 $)␤  in block <unit> at <tmp> line 1␤␤»

[12:27] <grondilu> m: proto foo($) {*}; multi foo(uint8 $) {}; multi foo(uint16 $) {}; multi foo(Str $) {}; foo "bar"

[12:27] <camelia> rakudo-moar 530e17848: ( no output )

[12:27] <lizmat> m: multi foo(uint8) { dd }; multi foo(uint16) { dd }; my uint8 $a = 42; foo $a

[12:27] <camelia> rakudo-moar 530e17848: OUTPUT: «Ambiguous call to 'foo(Int)'; these signatures all match:␤  (uint8 $)␤  (uint16 $)␤  in block <unit> at <tmp> line 1␤␤»

[12:28] <lizmat> hmm... *that* should work

[12:28] <lizmat> m: multi foo(int8) { dd }; multi foo(int16) { dd }; my int8 $a = 42; foo $a

[12:28] <camelia> rakudo-moar 530e17848: OUTPUT: «Ambiguous call to 'foo(Int)'; these signatures all match:␤  (int8 $)␤  (int16 $)␤  in block <unit> at <tmp> line 1␤␤»

[12:28] <lizmat> hmmm

[12:28] <lizmat> m: multi foo(Int) { dd }; multi foo(int16) { dd }; my int8 $a = 42; foo $a

[12:28] <camelia> rakudo-moar 530e17848: OUTPUT: «sub foo(int16)␤»

[12:29] <lizmat> ok, I guess it's either native or not, and no difference between the various native types

[12:29] <grondilu> is that specced?

[12:29] <lizmat> good question, wouldn't know

[12:30] <lizmat> but whether specced or not, that's all historical now

[12:30] <grondilu> I'm trying to write serialization routines, and I was planning to use multidispatch on natives.

[12:34] <nine> It distinguishes between native ints, uints, nums, strings and (non-native) objects

[12:34] <nine> Or rather non-native types

[12:37] <grondilu> m: say so my uint8 $ ~~ uint8

[12:37] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[12:37] <grondilu> m: say so my uint8 $ ~~ uint16

[12:37] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤»

[12:38] <grondilu> so I'm supposed to use manually check for the type?

[12:39] <grondilu> like `given $arg { when uint8 {...}; when uint16 {...}; ... }`  ?

[12:41] * grondilu notices that this doesn't work

[12:43] <grondilu> m: sub foo($x) { so $x ~~ uint8 }; say foo my uint8 $

[12:43] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤»

[12:43] <grondilu> m: sub foo($x) { so $x ~~ uint8 }; say foo my uint8 $ = 2

[12:43] <camelia> rakudo-moar 530e17848: OUTPUT: «False␤»

[12:44] <grondilu> :thinki

[12:45] <grondilu> 🤔 

[12:46] <grondilu> m: say my uint8 $ ~~ uint8

[12:46] <camelia> rakudo-moar 530e17848: OUTPUT: «True␤»

[12:47] <grondilu> m: sub foo($x) { $x.WHAT }; say foo my uint8 $

[12:47] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤»

[12:48] <grondilu> 🤨 

[12:49] <grondilu> that seems wrong tbh

[12:49] <grondilu> m: say *.WHAT(my uint $)

[12:49] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot give arguments to WHAT␤at <tmp>:1␤------> say *.WHAT(my uint $)⏏<EOL>␤»

[12:49] <grondilu> m: say (*.WHAT)(my uint $)

[12:49] <camelia> rakudo-moar 530e17848: OUTPUT: «Impossible coercion from 'Int' into 'Whatever': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[12:50] <grondilu> m: say {.WHAT}(my uint $)

[12:50] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤»

[12:50] <grondilu> m: say {.WHAT}(my uint $ = 1)

[12:50] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤»

[12:50] <MasterDuke> well, calling a method boxes it into an object (i.e., it loses its nativeness)

[12:50] <grondilu> ok

[12:51] <grondilu> m: say sub (uint $x) { $x.WHAT}(my uint $)

[12:51] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤»

[12:51] <grondilu> even if the sub was defined to take natives?

[12:52] <Xliff> m: sub a (Int $x) { my uint8 $xx := $x; $xx.WHAT.say }

[12:52] <camelia> rakudo-moar 530e17848: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot bind to natively typed variable '$xx'; use assignment instead␤at <tmp>:1␤------> sub a (Int $x) { my uint8 $xx := $x⏏; $xx.WHAT.say }␤»

[12:52] <Xliff> m: sub a (Int $x) { my uint8 $xx = $x; $xx.WHAT.say }

[12:52] <camelia> rakudo-moar 530e17848: ( no output )

[12:52] <grondilu> m: say (my uint $).WHAT

[12:52] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤»

[12:52] <Xliff> m: sub a (Int $x) { my uint8 $xx = $x; $xx.WHAT.say }; a(12)

[12:52] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤»

[12:52] <Xliff> m: sub a (Int $x) { my uint8 $xx = $x; $xx.WHAT.say; $xx.REPR.say  }; a(12)

[12:52] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤P6opaque␤»

[12:52] <grondilu> oh, .WHAT does not what I thought it would

[12:53] <Xliff> m: sub a (Int $x) { my uint8 $xx = $x; $xx.WHAT.say; $xx.^name.say  }; a(12)

[12:53] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤Int␤»

[12:53] <Xliff> Odd.

[12:53] <Xliff> m: use NativeCall; sub a (Int $x) { my uint8 $xx = $x; $xx.WHAT.say; $xx.REPR.say; $xx.^name.say  }; a(12)

[12:53] <camelia> rakudo-moar 530e17848: OUTPUT: «(Int)␤P6opaque␤Int␤»

[12:59] *** jjido left
[13:00] * grondilu sees https://docs.raku.org/language/numerics#Native_dispatch

[13:02] <grondilu> raku's doc is very good.  seemingly exhaustive, despite how big a language raku is.

[13:02] <grondilu> congrats

[13:13] <grondilu> unrelated:

[13:14] <grondilu> m: say ++$ * 256 + *, 1 xx 10

[13:14] <camelia> rakudo-moar 530e17848: OUTPUT: «WhateverCode.new(1 1 1 1 1 1 1 1 1 1)␤»

[13:14] <grondilu> m: say ++$ * 256 * * + *, 1 xx 10

[13:14] <camelia> rakudo-moar 530e17848: OUTPUT: «WhateverCode.new(1 1 1 1 1 1 1 1 1 1)␤»

[13:15] <grondilu> oh nevermind

[13:20] <grondilu> https://github.com/Raku/flymake-rakudo <-- cool stuff, anything similar for vim?

[13:24] <[Coke]> grondilu: thanks for saying that - it often feels that because it's so big, there are always gaps.

[13:27] <grondilu> frankly I used to prefer reading the synopses, but lately I switched to reading the official doc.  It has become better than the synopses now, I think.

[13:27] *** Guest35 joined
[13:29] <grondilu> this flymake module makes me feel like trying emacs with evil-mode again

[13:37] * grondilu does that

[13:37] *** discord-raku-bot left
[13:37] *** discord-raku-bot joined
[14:02] *** frost left
[14:13] *** coleman joined
[14:25] *** lichtkind_ left
[14:28] <gfldex> I'm reading S05-mass/* and already found 3 ENODOCs

[14:36] *** Sgeo joined
[14:44] <Geth> ¦ Documentable: coke assigned to antoniogamiz Issue Dependencies invalid https://github.com/Raku/Documentable/issues/162

[14:48] <grondilu> that flymode thing is telling me I made an error at my first `use` line.  Message is `X perl5#`

[14:52] * grondilu guesses it's about include paths or something

[20:51] *** Geth__ left
[20:51] *** Geth__ joined
[20:51] *** Geth left
[20:52] *** TempIRCLogger joined
[20:52] *** Geth__ left
[20:52] *** Geth joined
[20:52] *** lizmat left
[20:53] *** lizmat_ left
[20:53] *** lizmat joined
[20:56] *** Geth left
[20:56] *** Geth joined
[21:01] *** Geth left
[21:01] *** Geth joined
[21:04] *** melezhik joined
[21:05] <melezhik> I've switched SparkyCI the newest ( 2020.04 ) Rakudo version, if someone needs to test their modules against the latest version - feel free - http://sparrowhub.io:2222/report/239

[21:07] *** melezhik left
[21:09] *** jjido left
[21:19] *** jjido joined
[21:21] <Geth> ¦ doc: e9c0ad31e9 | Coke++ | xt/01-raku-version.t

[21:21] <Geth> ¦ doc: track 2022.04 rakudo release

[21:21] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e9c0ad31e9

[21:21] <Geth> ¦ doc: f22bdf16c1 | Coke++ | 2 files

[21:21] <Geth> ¦ doc: Make category case consistent

[21:21] <Geth> ¦ doc: 

[21:21] <Geth> ¦ doc: Upper lower

[21:21] <Geth> ¦ doc: 

[21:21] <Geth> ¦ doc: Closes #4063

[21:21] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f22bdf16c1

[21:21] <Geth> ¦ doc: 7fbf8842f2 | Coke++ | xt/search-categories.t

[21:21] <Geth> ¦ doc: add note

[21:21] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/7fbf8842f2

[21:22] *** linkable6 left
[21:24] *** linkable6 joined
[21:45] <Geth> ¦ doc: coke self-assigned No space after category comma in indices (and in general generated pages with leading whitespace) https://github.com/Raku/doc/issues/2884

[22:06] <Geth> ¦ doc: 131189118c | Coke++ | xt/search-categories.t

[22:06] <Geth> ¦ doc: Test for category comp. starting with ' '

[22:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/131189118c

[22:06] <Geth> ¦ doc: d3483f2c6e | Coke++ | 5 files

[22:06] <Geth> ¦ doc: Remove leading space from category component

[22:06] <Geth> ¦ doc: 

[22:06] <Geth> ¦ doc: Resolves #2884

[22:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d3483f2c6e

[22:06] *** linkable6 left
[22:07] *** n1to left
[22:07] *** linkable6 joined
[23:05] *** ajr joined
[23:11] *** thegargler joined
[23:11] <thegargler> hm

[23:39] *** ajr left
[23:47] *** jjido left
