[00:02] *** djerius joined
[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[00:30] *** dextercd left
[00:35] *** kjp left
[00:57] *** mexen left
[01:17] *** ProperNoun joined
[01:18] *** ProperN[out] left
[02:18] *** sourceable6 left
[02:18] *** bloatable6 left
[02:18] *** notable6 left
[02:18] *** bisectable6 left
[02:18] *** benchable6 left
[02:18] *** unicodable6 left
[02:18] *** greppable6 left
[02:18] *** squashable6 left
[02:18] *** linkable6 left
[02:18] *** statisfiable6 left
[02:18] *** quotable6 left
[02:18] *** shareable6 left
[02:18] *** tellable6 left
[02:18] *** evalable6 left
[02:18] *** coverable6 left
[02:18] *** nativecallable6 left
[02:18] *** releasable6 left
[02:18] *** reportable6 left
[02:18] *** committable6 left
[02:19] *** bisectable6 joined
[02:19] *** greppable6 joined
[02:19] *** quotable6 joined
[02:19] *** notable6 joined
[02:20] *** unicodable6 joined
[02:20] *** coverable6 joined
[02:20] *** shareable6 joined
[02:20] *** reportable6 joined
[03:19] *** bloatable6 joined
[03:19] *** evalable6 joined
[03:19] *** committable6 joined
[03:20] *** statisfiable6 joined
[03:21] *** linkable6 joined
[03:21] *** sourceable6 joined
[03:27] *** mcmillhj joined
[03:28] <mcmillhj> What is the proper way to have a class method accept an instance of the same class for some comparison operation? I tried like this but am getting an error:

[03:28] <mcmillhj> https://topaz.github.io/paste/#XQAAAQDuAAAAAAAAAAAxmwhIY/U9BjQoYKDaW4VWHtF2r0PQjA1FcAlSYHyIlEWSUQI3sIpIrwbcKP7jssLF4uNjkvO3Ix4W2gVSZAPjZxdpYygYVz67G3oZSsqoirU/SNe29J5Hni3sN6rlMBJt9tBAhgMD8aWaWY0jW50R4Jp0ENApj7QExr2UHmdVkAfP1PzG35dpUymAHt/zCoZSg2grbBoyi37f/+/2hVA=

[03:31] <mcmillhj> nvm .. I am being an idiot. This approach works fine I was just missing the proper sigil.

[04:08] *** kjp joined
[04:20] *** tellable6 joined
[04:20] *** nativecallable6 joined
[04:20] *** releasable6 joined
[04:20] *** benchable6 joined
[04:22] *** mcmillhj left
[05:22] *** evalable6 left
[05:22] *** committable6 left
[05:22] *** tellable6 left
[05:22] *** nativecallable6 left
[05:22] *** greppable6 left
[05:22] *** benchable6 left
[05:22] *** bisectable6 left
[05:22] *** statisfiable6 left
[05:22] *** releasable6 left
[05:22] *** notable6 left
[05:22] *** sourceable6 left
[05:22] *** linkable6 left
[05:22] *** reportable6 left
[05:22] *** bloatable6 left
[05:22] *** shareable6 left
[05:22] *** quotable6 left
[05:22] *** unicodable6 left
[05:22] *** coverable6 left
[05:23] *** coverable6 joined
[05:23] *** unicodable6 joined
[05:23] *** bisectable6 joined
[05:24] *** committable6 joined
[05:24] *** quotable6 joined
[05:24] *** sourceable6 joined
[05:25] *** benchable6 joined
[05:25] *** evalable6 joined
[05:25] *** linkable6 joined
[05:25] *** releasable6 joined
[06:00] <guifa> mcmillhj: you can also use ::?CLASS, which will always match your class (even if you change its name later).  Neat little trick

[06:24] *** tellable6 joined
[06:25] *** notable6 joined
[06:25] *** nativecallable6 joined
[06:26] *** mexen joined
[06:31] *** holyghost joined
[06:57] *** bartolin left
[06:59] *** bartolin joined
[07:21] *** squashable6 joined
[07:25] *** seednode left
[07:26] *** seednode joined
[07:52] *** jjido joined
[07:57] *** st33v joined
[08:23] *** statisfiable6 joined
[08:24] *** greppable6 joined
[08:25] *** bloatable6 joined
[08:28] *** Sgeo left
[08:50] <SmokeMachine> .tell mcmillhj it seems you’ve just missed the sigil… (https://glot.io/snippets/g5scg1bf5l)

[08:50] <tellable6> SmokeMachine, I'll pass your message to mcmillhj

[08:53] *** jjido left
[09:08] *** reportable6 joined
[09:23] *** lichtkind joined
[09:24] *** abraxxa joined
[09:25] *** shareable6 joined
[09:30] *** abraxxa left
[09:32] *** abraxxa joined
[09:35] <El_Che> .tell melezhik bintray sunsetted their repo infrastructure so I moved to cloudsmith with the added bonus it also has alpine repos

[09:35] <tellable6> El_Che, I'll pass your message to melezhik

[09:39] <El_Che> it may be an statistical coincidence but on the many builds I ran on arm64 while figuring things out, I didn't get flapper tests. It seems flapping may be an arm64 thing (jit?)

[10:27] *** frost left
[10:37] *** frost joined
[11:13] *** jercos left
[11:13] *** jercos joined
[11:35] *** sjn left
[12:03] <El_Che> dams, my first failed arm64 test :) t/02-rakudo/repl.t   

[12:04] *** reportable6 left
[12:04] *** linkable6 left
[12:05] *** linkable6 joined
[12:06] *** reportable6 joined
[12:41] *** linkable6 left
[13:05] *** sjn joined
[13:23] *** jjido joined
[13:29] *** getimiskon joined
[13:40] *** frost left
[13:40] *** lichtkind left
[13:41] *** lichtkind joined
[13:43] *** linkable6 joined
[13:44] *** Woodi_ is now known as Woodi

[13:44] *** linkable6 left
[13:45] *** linkable6 joined
[13:46] *** Geth left
[13:46] *** Geth joined
[13:50] *** st33v left
[13:51] *** sienet_ja_LSD[m] left
[13:57] *** Geth left
[13:57] *** Geth joined
[13:58] <lizmat> El_Che: looks like t/02-rakudo/repl.t  is a flapper, it just failed for me on HEAD on MacOS

[13:59] <lizmat> was the error:

[13:59] <lizmat>   Non-zero exit status: 255

[13:59] <lizmat>   Parse errors: Bad plan.  You planned 47 tests but ran 11.

[13:59] <lizmat> ?

[14:01] *** Geth left
[14:01] *** Geth joined
[14:04] <El_Che> yeah, I had that one as well

[14:05] *** Geth left
[14:05] *** Geth joined
[14:10] *** Geth left
[14:10] *** Geth joined
[14:10] *** sienet_ja_LSD[m] joined
[14:14] *** Geth left
[14:14] *** Geth joined
[14:34] *** Sgeo joined
[14:34] *** abraxxa left
[14:36] *** abraxxa joined
[14:48] *** jjido left
[15:08] *** Od1n1 is now known as Od1n

[15:16] *** MoC joined
[15:16] *** dextercd joined
[15:32] *** morte_ joined
[15:43] *** morte_ left
[16:04] *** morte_ joined
[16:09] <Tirifto> Hello! Would anyone happen to know what ‘return_value + exit_handler case NYI’ might mean? (I guess ‘NYI’ could be ‘Not Yet Implemented’, but then I’m not sure what exactly is lacking implementation.)

[16:09] <Tirifto> It’s an error message returned by Rakudo.

[16:11] <lizmat> Tirifto: that seems like a pretty exotic error message: how did you get it ?

[16:12] *** MoC left
[16:12] *** mcmillhj joined
[16:15] *** yosik joined
[16:17] <Tirifto> lizmat: I wrote a simple static site generator in Raku. There, I have a custom subroutine for reporting progress (it only says messages). The program used to work fine, until now I just slightly changed how the subroutine works and added a few calls to it, which gave me this error message. The change involves a dynamic variable and changing its value with ‘temp’.

[16:21] <lizmat> Tirifto: without a golf / gist of the program, there's not a lot one can say about that

[16:25] <Tirifto> lizmat: Sorry, what do you mean by ‘golf’ and ‘gist’? Raku has ‘gist’, but I guess you’re asking for the source code or some representation thereof? (I should be able to share in a bit.)

[16:26] <lizmat> in this context, "golf" refers to a piece of code that can be run to show the problem

[16:26] <lizmat> in this context, "gist" means a URL to a place on the Interwebs where that code can be seen / copied

[16:27] <lizmat> if you have a Github account, gist.github.com would be the easiest way to make a gist

[16:31] <Tirifto> lizmat: I see, thank you for the explanation! So far I have only been able to reproduce the error by running my program (or the tests thereof), but I’ll see if I can isolate it in shorter, single-file code. I don’t use GitHub, but I suppose any plaintext sharing service might work fine?

[16:33] <lizmat> yeah, as long as you can paste a URL here :-)

[16:42] <Tirifto> Aha! I overlooked a line in my code; now I know more precisely what causes the issue, but it still seems odd, so I’ll be pasting shortly. :-)

[16:45] <lizmat> oki!

[16:46] *** jjido joined
[16:47] <holyghost> Tirifto, maybe upload your code too

[16:47] <holyghost> nm

[16:49] <holyghost> s/nm/never mind me/

[16:53] *** cono joined
[16:54] *** linkable6 left
[16:54] <Geth> ¦ ecosystem: sdondley++ created pull request #601: rm Mac::Applications::List from p6c

[16:54] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/601

[16:54] *** linkable6 joined
[16:55] <Tirifto> lizmat: https://tirifto.xwx.moe/d/raku-bug-2022-01-04-temp.txt

[16:55] <Geth> ¦ ecosystem: b57386d26b | (Steve Dondley)++ (committed using GitHub Web editor) | META.list

[16:55] <Geth> ¦ ecosystem: rm Mac::Applications::List from p6c (#601)

[16:55] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/b57386d26b

[16:56] <cono> is there anyway to get `assuming` function for %h{SOMETHING} ?

[16:57] *** Geth left
[16:57] *** Geth joined
[16:58] <lizmat> Tirifto: OOC, which version of Rakudo are you using ?

[16:59] * lizmat cannot reproduce any issue with that gist

[16:59] <cono> I was expecting that %h{*} will generate to me similar thing to `* + 2`, whatevercode which I can use in reduce operator

[16:59] <Tirifto> lizmat: Welcome to Rakudo™ v2021.12. Implementing the Raku® Programming Language v6.d. Built on MoarVM version 2021.12.

[17:00] <lizmat> hmmm...

[17:01] <lizmat> Tirifto: are you trying to limit the scope of the change to $*dynamic ?

[17:02] <lizmat> if that is so, using 'my' would be better

[17:03] <Tirifto> Generally it seems that when I set a temp variable in a block and put a ‘when’ block in there, the ‘when’ block errs.

[17:04] <Tirifto> lizmat: That is my goal and using ‘my’ seems to work fine, thank you. :-)

[17:05] <lizmat> yeah. maybe we should make using temp on dynvars illegal

[17:05] <lizmat> dinner&

[17:05] <Tirifto> lizmat.have: $good-meal;

[17:07] *** jjido left
[17:09] <Tirifto> Well, now I know not to use ‘temp’ with dynamic variables, but I wonder why. What makes ‘my’ a better choice both technically and conceptually?

[17:09] <Tirifto> (If there’s a simple answer to that question. :P)

[17:11] <El_Che> doesn't dynamic variables break the scope?

[17:14] <cono> m: sub print-home { %*ENV<HOME>.say }; { temp %*ENV<HOME> = "/home/Tirifto"; print-home }; print-home

[17:14] <camelia> rakudo-moar 03065e296: OUTPUT: «/home/Tirifto␤/home/camelia␤»

[17:15] <cono> i was thinking that temp's only use case is - dynamic variables

[17:16] <cono> m: my %*ENV<HOME> = "/home/my"; %*ENV<HOME>.say

[17:16] <camelia> rakudo-moar 03065e296: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Shaped variable declarations not yet implemented. Sorry.␤at <tmp>:1␤------> my %*ENV<HOME>⏏ = "/home/my"; %*ENV<HOME>.say␤»

[17:22] <Tirifto> El_Che: My understanding is that whenever a function looks for the value of a dynamic variable, it should do so in the context of its call. So it does, or maybe rather uses a different one. `o`

[17:22] <El_Che> indeed the caller instead of the outer scope

[17:39] <lizmat> a dynamic variable is basically a lexical variable that is "visible" from its inner scopes

[17:41] <lizmat> m: sub a() { my $*A = 42; b }; sub b() { dd $*A }; a

[17:41] <camelia> rakudo-moar 03065e296: OUTPUT: «Int $*A = 42␤»

[17:41] <lizmat> m: sub a() { my $*A = 42; b }; sub b() { dd $*A }; b

[17:41] <camelia> rakudo-moar 03065e296: OUTPUT: «Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*A"), backtrace => Backtrace.new)␤»

[17:42] <lizmat> the "system" dynamic variables also have a fallback in PROCESS::, the outer outer lexical scope

[17:42] <lizmat> whenever you look up a dynamic variable, it checks the lexpads of all the frames in the callstack

[17:42] <lizmat> and picks the first one it finds

[17:43] <lizmat> it gets slightly more complicated with start blocks, but that's the idea

[17:58] <holyghost> &afk

[17:59] *** holyghost left
[18:07] *** reportable6 left
[18:17] <discord-raku-bot> <Nemokosch#9980> more like afk& aint it

[18:23] *** yosik left
[18:26] *** mcmillhj left
[18:53] *** eseyman left
[19:02] *** Tirifto left
[19:03] *** Tirifto joined
[19:05] *** eseyman joined
[19:13] *** Tirifto left
[19:14] *** Tirifto joined
[19:18] <El_Che> afk&&shutUp :)

[19:28] *** getimiskon left
[19:29] *** getimiskon joined
[19:36] *** seednode left
[19:37] *** seednode joined
[19:39] *** jjido joined
[19:46] *** morte_ left
[19:51] *** Manifest1 left
[19:53] *** morte_ joined
[20:08] *** Manifest0 joined
[20:10] *** reportable6 joined
[20:15] *** Manifest0 left
[20:19] *** Manifest0 joined
[20:27] *** abraxxa left
[20:35] *** [Coke] left
[20:39] *** [Coke] joined
[21:14] *** getimiskon left
[21:17] *** morte_ left
[21:34] * [Coke] hopes everyone's new year is going well so far

[21:58] <Geth> ¦ doc: sdondley++ created pull request #4008: update information about methods for distributing modules

[21:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4008

[22:04] *** mexen left
[22:13] *** sena_kun left
[22:15] *** sena_kun joined
[22:39] *** dextercd left
[23:30] *** jjido left
[23:41] *** lichtkind left
