[00:08] *** reportable6 left
[00:10] *** reportable6 joined
[00:33] *** linkable6 left
[00:35] *** linkable6 joined
[00:38] <Util> elcaro: thanks for looking. The .count == Inf gives me a bit more insight.
[00:40] <Util> BTW, my example of -> *@a on a Seq: http://rosettacode.org/wiki/Bell_numbers#via_Recurrence_relation_2
[00:40] * Util waves back at Coke
[01:28] *** Merfont left
[02:11] *** melezhik joined
[02:11] <melezhik> .
[02:11] <melezhik> hi folks!
[02:17] *** melezhik left
[02:18] *** simcop2387 left
[02:18] *** perlbot left
[02:23] *** simcop2387 joined
[02:25] *** perlbot joined
[02:43] *** razetime joined
[02:55] *** Garbanzo__ joined
[03:55] *** unicodable6 left
[03:55] *** squashable6 left
[03:55] *** nativecallable6 left
[03:55] *** committable6 left
[03:55] *** statisfiable6 left
[03:55] *** releasable6 left
[03:55] *** coverable6 left
[03:55] *** linkable6 left
[03:55] *** evalable6 left
[03:55] *** benchable6 left
[03:55] *** notable6 left
[03:55] *** reportable6 left
[03:55] *** quotable6 left
[03:55] *** greppable6 left
[03:55] *** sourceable6 left
[03:55] *** bloatable6 left
[03:55] *** shareable6 left
[03:55] *** tellable6 left
[03:55] *** bisectable6 left
[03:56] *** quotable6 joined
[03:56] *** releasable6 joined
[03:56] *** squashable6 joined
[03:56] *** unicodable6 joined
[03:56] *** linkable6 joined
[03:56] *** statisfiable6 joined
[03:57] *** sourceable6 joined
[03:57] *** benchable6 joined
[03:57] *** committable6 joined
[03:58] *** shareable6 joined
[03:58] *** tellable6 joined
[03:58] *** bisectable6 joined
[04:27] <guifa> meh, just when I think I figured out how to handle blocks in slangs, I'm stimied by a crashing optimize bug with RAKUDO_RAKUAST=1  =\ (and with it = 0, I can only obtain a QAST which won't integrate with my RAST code)
[04:27] * guifa waves at all
[04:56] *** greppable6 joined
[04:56] *** coverable6 joined
[04:56] *** notable6 joined
[05:07] <razetime> is this the correct place to ask beginner questions?
[05:29] <elcaro> razetime: yes it's fine
[05:30] <elcaro> razetime: yes it's fine
[05:30] <elcaro> StackOverflow is also good. the IRC channel gets quiet sometimes so you may not always get an immediate answer.
[05:44] <razetime> i see. I got my answer in #raku-beginner, thanks for the advice
[05:56] *** linkable6 left
[05:57] *** evalable6 joined
[05:57] *** nativecallable6 joined
[05:58] *** linkable6 joined
[06:19] *** Garbanzo__ left
[07:11] *** reportable6 joined
[07:35] *** mahafyi joined
[07:37] *** jjido joined
[07:41] *** abraxxa joined
[07:46] *** Darkcoal joined
[07:46] *** abraxxa left
[07:46] *** abraxxa joined
[07:48] <El_Che> I even didn't know that channel existed :)
[08:00] *** merpader1 is now known as merpaderp
[08:06] *** razetime left
[08:30] *** Sgeo left
[08:57] *** bloatable6 joined
[09:07] *** razetime joined
[09:26] *** jjido left
[09:48] *** mahafyi left
[09:56] *** abraxxa left
[09:57] *** abraxxa joined
[10:32] *** abraxxa left
[10:37] *** jjido joined
[10:39] *** younder joined
[10:40] <younder> https://github.com/Microsoft/language-server-protocol/
[10:40] <tellable6> 2022-01-24T23:49:07Z #raku <elcaro> younder Phasers are contructs than can "fire" (get triggered) outside of the standard flow control. The ALLCAPS are to make them stand out because of this
[10:40] <tellable6> 2022-01-24T23:50:06Z #raku <elcaro> younder eg. and INIT block at the bottom of your script doesn't happen last... or you could have a single CATCH block handle _all_ exceptions in a script.
[10:43] *** Merfont joined
[10:43] *** abraxxa-home joined
[10:43] <younder> Seems to me to get the most out of raku in editors like VS Code, Atom and Emacs you need to implement an interface to the LSP protocol. That allows things like intellisence, and errors marked in the text to work.
[11:23] *** jjido left
[11:24] *** Altai-man joined
[11:46] *** jjido joined
[11:55] *** MoC joined
[12:08] *** TheAthlete joined
[12:08] *** reportable6 left
[12:28] *** jjido left
[12:46] *** jjido joined
[12:46] <leont> Yeah, a good LSP implementation would be useful
[12:47] <leont> Having something that can quicky almost-parse raku would be useful to have first though
[12:48] <leont> Raku's dynamic nature makes this quite difficult, AFAICT
[12:48] <El_Che> are you stuck with "only perl can parse perl" scenario, here?
[12:49] <leont> Kind of
[12:49] <leont> But gor both, a mostly accurate parse is much easier
[12:49] <El_Che> s/you/we/
[12:53] *** sjn left
[12:54] *** younder left
[12:58] *** jjido left
[13:01] <El_Che> leont: I saw you release a threading module for perl. Nice!
[13:05] <leont> :-)
[13:09] *** Xliff_ joined
[13:09] <El_Che> +d
[13:09] <El_Che> otherwise is sound creepy real-time :)
[13:11] *** Xliff left
[13:12] *** swaggboi left
[13:13] *** swaggboi joined
[13:18] *** sjn joined
[13:58] *** discord-raku-bot left
[13:58] *** discord-raku-bot joined
[14:00] *** A26F64 joined
[14:11] *** jjido joined
[14:33] *** abraxxa-home left
[14:33] *** abraxxa-home joined
[14:45] *** jjido left
[14:53] *** razetime left
[15:10] *** whatnext joined
[15:12] <whatnext> Hello all :)  I have this error: `Missing serialize REPR function for REPR MVMContext (BOOTContext)` when trying to use `Cache::Memcached` - doesn't happen in development but annoyingly decides to appear in production. Can anyone shed any light?
[15:14] *** immediate joined
[15:31] *** abraxxa-home left
[15:36] *** immediate left
[15:41] *** jjido joined
[15:47] *** Sgeo joined
[15:52] <guifa> lizmat: is there a PARSE function equivalent to RakuAST::Node's DEPARSE?
[15:53] <guifa> (with RAKUDO_RAKUAST=1 I'm getting an error mixing in the language in a module, so I figured maybe I could just capture the string and doing a parse on it to get the tree in some way)
[16:02] <lizmat> guifa: that'd be Str.EVAL, and that's one of the things jnthn is working on
[16:03] <guifa> ah okay.  At first I figured I'd could just grab a reference to the language grammar and use RakuGrammar.parse( :actions(RakuActions) ) but then I remembered that'd get me the same QAST tree that is incompatible with my RAST tree haha
[16:03] <lizmat> yup
[16:04] <guifa> I think I can just leave that spot open in the grammar for now.  Should be a one line fix once the RAST branch is ready 
[16:05] <guifa> main thing right now is to convert all of my Binex nodes to produce RAST
[16:39] *** TheAthlete left
[16:49] *** sena_kun_ joined
[16:49] *** Altai-man left
[17:06] <leont> They're not really the same, are they? PARSE is just the first step of EVAL
[17:09] *** reportable6 joined
[17:14] <japhb> leont: The stages interleave, because BEGIN.
[17:14] <leont> True
[17:15] <lizmat> also: EVAL  :-)
[17:26] <leont> codesections: I'm very much looking forward to your presentation tomorrow, I rather enjoy that sort of philosophical content
[17:31] *** jjido left
[17:36] *** sena_kun_ left
[17:50] *** MoC left
[18:04] *** A26F64 left
[18:07] *** reportable6 left
[18:11] *** whatnext left
[18:20] *** jjido joined
[18:31] *** jjido left
[18:44] *** jjido joined
[18:47] *** Darkcoal left
[18:48] *** MoC joined
[18:49] *** Darkcoal joined
[19:03] *** dextercd joined
[19:05] *** jjido left
[19:10] *** reportable6 joined
[19:34] *** squashable6 left
[19:36] *** squashable6 joined
[19:48] *** abraxxa-home joined
[19:56] *** discord-raku-bot left
[19:56] *** discord-raku-bot joined
[20:10] *** MasterDuke left
[20:18] <patrickb> Will `done`s ripple through cascaded supply blocks? Or do the blocks have to do something like `LAST { done }`?
[20:33] *** Darkcoal left
[20:38] *** Darkcoal joined
[20:39] *** MasterDuke joined
[21:02] *** stoned75 joined
[21:03] *** Darkcoal left
[21:05] *** Darkcoal joined
[21:53] *** MoC left
[21:59] *** discord-raku-bot left
[21:59] *** discord-raku-bot joined
[22:05] *** epony left
[22:19] *** jjido joined
[22:40] *** Zgredu[m] joined
[22:55] *** Zgredu[m] left
[22:55] *** Darkcoal left
[23:18] *** epony joined
[23:30] *** abraxxa-home left
[23:33] *** jjido left
[23:43] *** Zgredu[m] joined
[23:46] <Zgredu[m]> I was planning to go through the CLRS book and learn an interesting language along the way. Is Raku a good choice for learning algorithms?
[23:58] <guifa> Zgredu[m] Raku is nice because it lends itself to the various programming paradigms.  I've not used that book, but looking at the topics in the book, I think it should be rather nice for them.  It really just depends on how close to the metal the book gets
