[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[01:09] *** greppable6 left
[01:09] *** shareable6 left
[01:09] *** coverable6 left
[01:09] *** evalable6 left
[01:09] *** linkable6 left
[01:09] *** tellable6 left
[01:09] *** committable6 left
[01:09] *** notable6 left
[01:09] *** unicodable6 left
[01:09] *** bloatable6 left
[01:09] *** releasable6 left
[01:09] *** sourceable6 left
[01:09] *** bisectable6 left
[01:09] *** quotable6 left
[01:09] *** benchable6 left
[01:09] *** nativecallable6 left
[01:09] *** statisfiable6 left
[01:09] *** reportable6 left
[01:09] *** releasable6 joined
[01:09] *** greppable6 joined
[01:09] *** sourceable6 joined
[01:10] *** coverable6 joined
[01:10] *** evalable6 joined
[01:10] *** unicodable6 joined
[01:10] *** quotable6 joined
[01:10] *** reportable6 joined
[01:10] *** statisfiable6 joined
[01:11] *** notable6 joined
[01:11] *** bloatable6 joined
[01:11] *** committable6 joined
[01:11] *** benchable6 joined
[01:11] *** nativecallable6 joined
[01:11] *** bisectable6 joined
[01:11] *** tellable6 joined
[01:12] *** linkable6 joined
[01:12] *** shareable6 joined
[01:40] *** saint- left
[02:09] *** euandreh left
[02:18] *** euandreh joined
[03:18] *** evalable6 left
[03:18] *** linkable6 left
[03:18] *** tellable6 left
[03:18] *** tellable6 joined
[03:18] *** linkable6 joined
[03:18] *** evalable6 joined
[03:21] *** Guest35 left
[04:21] *** reportable6 left
[04:21] *** notable6 left
[04:21] *** greppable6 left
[04:21] *** quotable6 left
[04:21] *** coverable6 left
[04:21] *** sourceable6 left
[04:21] *** bloatable6 left
[04:21] *** linkable6 left
[04:21] *** committable6 left
[04:21] *** benchable6 left
[04:21] *** statisfiable6 left
[04:21] *** bisectable6 left
[04:21] *** evalable6 left
[04:21] *** tellable6 left
[04:21] *** releasable6 left
[04:21] *** unicodable6 left
[04:21] *** shareable6 left
[04:21] *** nativecallable6 left
[04:21] *** quotable6 joined
[04:21] *** bloatable6 joined
[04:21] *** evalable6 joined
[04:21] *** statisfiable6 joined
[04:22] *** reportable6 joined
[04:22] *** shareable6 joined
[04:22] *** tellable6 joined
[04:22] *** unicodable6 joined
[04:22] *** nativecallable6 joined
[04:22] *** notable6 joined
[04:22] *** sourceable6 joined
[04:23] *** linkable6 joined
[04:23] *** benchable6 joined
[04:23] *** committable6 joined
[04:23] *** releasable6 joined
[04:23] *** bisectable6 joined
[04:24] *** coverable6 joined
[04:24] *** greppable6 joined
[05:24] *** greppable6 left
[05:24] *** linkable6 left
[05:24] *** nativecallable6 left
[05:24] *** releasable6 left
[05:24] *** coverable6 left
[05:24] *** statisfiable6 left
[05:24] *** evalable6 left
[05:24] *** notable6 left
[05:24] *** bisectable6 left
[05:24] *** tellable6 left
[05:24] *** bloatable6 left
[05:24] *** committable6 left
[05:24] *** quotable6 left
[05:24] *** unicodable6 left
[05:24] *** benchable6 left
[05:24] *** sourceable6 left
[05:24] *** reportable6 left
[05:24] *** shareable6 left
[05:24] *** greppable6 joined
[05:24] *** sourceable6 joined
[05:24] *** statisfiable6 joined
[05:24] *** notable6 joined
[05:24] *** unicodable6 joined
[05:25] *** nativecallable6 joined
[05:25] *** bloatable6 joined
[05:25] *** coverable6 joined
[05:25] *** shareable6 joined
[05:25] *** evalable6 joined
[05:26] *** committable6 joined
[05:26] *** bisectable6 joined
[05:26] *** reportable6 joined
[05:27] *** linkable6 joined
[05:27] *** benchable6 joined
[05:27] *** releasable6 joined
[05:27] *** quotable6 joined
[05:27] *** tellable6 joined
[05:38] *** Xliff left
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:17] *** abraxxa joined
[06:21] *** abraxxa left
[06:22] *** abraxxa joined
[06:47] *** clarjon1 joined
[06:58] *** Sgeo left
[07:13] *** dakkar joined
[07:14] *** kiti_nomad[m] left
[07:14] *** CIAvash left
[07:14] *** AlexDaniel left
[07:14] *** unclechu left
[07:14] *** coolshaurya left
[07:14] *** Matthew|m left
[07:14] *** crystalfrost[m] left
[07:14] *** MitarashiDango[m left
[07:19] *** CIAvash joined
[07:34] *** AlexDaniel joined
[07:34] *** Matthew|m joined
[07:34] *** unclechu joined
[07:34] *** crystalfrost[m] joined
[07:34] *** coolshaurya joined
[07:34] *** MitarashiDango[m joined
[07:34] *** kiti_nomad[m] joined
[07:42] <Geth> ¬¶ vim-raku: sjn++ created pull request #36: Ignore generated doc/tags

[07:42] <Geth> ¬¶ vim-raku: review: https://github.com/Raku/vim-raku/pull/36

[07:44] *** andinus left
[07:45] *** andinus joined
[08:28] *** jaguart joined
[08:57] *** grondilu joined
[09:06] <grondilu> m: class { has %.h handles <AT-KEY>; multi method foo($x where (%!h{$x}:exists)) { self{$x} } }.new(:h{ foo => "bar" }).foo("foo")

[09:06] <camelia> rakudo-moar 530e17848: ( no output )

[09:06] <grondilu> m: class { has %.h handles <AT-KEY>; multi method foo($x where (self{$x}:exists)) { self{$x} } }.new(:h{ foo => "bar" }).foo("foo")

[09:06] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Cannot resolve caller foo(<anon|1>.new(h => {:...: foo); none of these signatures matches:‚ê§    (<anon|1>: $x where { ... }, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:07] <grondilu> can't I use self in a signature?

[09:07] <grondilu> m: class { has $.m; multi method foo($x where $x %% self.m) {}}

[09:07] <camelia> rakudo-moar 530e17848: ( no output )

[09:08] <grondilu> m: class { has $.m; multi method foo($x where $x %% self.m) { $x / $!m }}.new(:m(3)).foo(12).say

[09:08] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´4‚ê§¬ª

[09:13] *** razetime joined
[09:41] *** sena_kun left
[09:42] *** sena_kun joined
[09:49] *** frost joined
[10:02] *** silug left
[10:02] *** silug joined
[10:38] *** Altai-man joined
[10:55] *** razetime left
[11:13] *** razetime joined
[11:55] *** jaguart left
[12:05] *** Sankalp joined
[12:06] <Voldenet> grondilu: you can use self as you wanted, but in :exists case you need EXISTS-KEY handled

[12:06] <Voldenet> m: class { has %.h handles <AT-KEY EXISTS-KEY>; multi method foo($x where (self{$x}:exists)) { self{$x} } }.new(:h{ foo => "bar" }).foo("foo")

[12:06] <camelia> rakudo-moar 530e17848: ( no output )

[12:06] <Voldenet> you may also want STORE handled

[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:25] *** jjido joined
[12:57] *** Xliff joined
[12:58] <Xliff> m: role FontWidget { }; multi sub trait_mod:<is> (Attribute \a, :$font!) { a does FontWidget }; class A { has $.aa }; trait_mod:<is>(A.^attributes[0], :font);

[12:58] <camelia> rakudo-moar 530e17848: ( no output )

[13:15] *** Sgeo joined
[13:26] *** jjido left
[13:32] *** timo left
[13:34] *** timo joined
[13:44] *** jaguart joined
[13:50] *** Guest35 joined
[14:10] <grondilu> Voldenet: noted, thanks

[14:13] *** frost left
[14:39] *** charsbar left
[14:39] *** charsbar joined
[14:51] *** jjido joined
[14:56] *** morte_ joined
[15:03] *** euandreh left
[15:20] *** z4kz joined
[15:22] *** abraxxa left
[15:35] *** z4kz left
[15:58] *** bigdata joined
[16:04] *** euandreh joined
[16:39] <Xliff> Um. rakubrew.org is busted.

[16:39] <Xliff> Please someone say it isn't so!

[16:40] *** dakkar left
[16:46] <Altai-man> Xliff, alas, 500 error.

[16:46] <Altai-man> patrickb, ping?

[16:47] *** grondilu left
[16:48] <[Coke]> console says crbug/1173575, which SO says might just be a connectivity error. (maybe a cloudflare issue?)

[17:05] *** razetime left
[17:16] *** Altai-man left
[17:26] *** bigdata left
[17:58] <discord-raku-bot> <Bscanüç∫#6614> Coke, I'm on the Discord side, so I cant see <#538420565980086273>docs. Quick question though: is there a JSON version of the docs? If so, I'd like to incorporate it into the Raku Navigator Language Server.

[18:01] *** bigdata joined
[18:04] *** jaguart left
[18:06] *** reportable6 left
[18:07] *** reportable6 joined
[18:11] <Xliff> Are there recent binary packages for Rakudo?

[18:11] <Xliff> If so, where can I get them? Ubuntu impish has 2020.12

[18:11] <Xliff> I need something much closer to 2022.04

[18:32] <lizmat> Xliff: El_Che's packages ?

[18:33] <lizmat> https://nxadm.github.io/rakudo-pkg/

[18:39] <Xliff> lizmat++ # Thanks!

[19:04] *** p6steve joined
[19:07] <p6steve> i'm thinking about Dan::Polars - raku polars <-> rust polars <-> arrow2 ... this implies getting raku <-> rust working ... is there any prior art I can "borrow"?

[19:09] <p6steve> [coda: does NativeCall use FFI? if so -- would this guide https://doc.rust-lang.org/nomicon/ffi.html hold for the rust side of things?]

[19:16] <p6steve> please ;-)

[19:28] <lizmat> nine ^^  ??

[19:40] *** grondilu joined
[19:41] <grondilu> m: role R[Hash $h] { has %.h = %$h }; say class :: does R[%(foo => "bar")] {}.new.h

[19:41] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´{foo => bar}‚ê§¬ª

[19:42] <grondilu> and yet:

[19:42] <grondilu> m: role R[Hash $h] { has %.h = %$h }; my $h = %(foo => "bar"); say class :: does R[$h] {}.new.h

[19:42] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§No appropriate parametric role variant available for 'R':‚ê§    Cannot resolve caller (<anon|1>, Any:U); none of these signatures matches:‚ê§        (::$?CLASS ::::?CLASS Mu, Hash $h)‚ê§at <tmp>:1‚ê§¬ª

[19:42] <grondilu> what is different in these two lines?

[19:45] <p6steve> apt-get install libperl-dev -y \

[19:45] <p6steve> &&  zef install Inline::Perl5  \

[19:45] <p6steve> &&  cpan App::cpanminus \

[19:45] <p6steve> &&  cpanm FFI::Platypus FFI::Platypus::Lang::Rust

[19:45] <grondilu> m: role R[Hash $h] { has %.h = %$h }; my $h = %(foo => "bar"); say class :: does R[$h.Hash] {}.new.h

[19:45] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´{}‚ê§¬ª

[19:46] <p6steve> ^^^ yikes - this worked(!) - thinking perl5 maybe adequate route to rust (comments / alternatives welcome please)

[19:46] <grondilu> is it too much to put a hash as a parameter for a role or something?

[19:47] <tonyo> can you rephrase that q p6steve ?

[19:47] <tellable6> 2022-05-02T13:10:00Z #raku-dev <carlmasak> tonyo the thing that would make me consider Haskell's package management a significant step up from Go's isn't some technicalities around go.mod, but how well it solves the "stable dependencies" problem.

[19:48] <tonyo> .tell carlmasak agreed (re:haskell's stability in dependencies)

[19:48] <tellable6> tonyo, I'll pass your message to carlmasak

[19:51] <Voldenet> m: role R[Hash $h] { has %.h = %$h }; my $h = %(foo => "bar"); say (class :: {}.new but R[$h]).h

[19:51] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´{foo => bar}‚ê§¬ª

[19:52] <Voldenet> role R[$h] { has $.h = $h }; my Hash $h = %(foo => "bar"); say class :: does R[BEGIN { say $h; $h }] {}.new.h

[19:52] <evalable6> Voldenet, rakudo-moar a84e16849: OUTPUT: ¬´(Hash)‚ê§(Hash)‚ê§¬ª

[19:53] <p6steve> tonyo: sure - I want to write a new raku module that implements raku Dan (https://github.com/p6steve/raku-Dan) in the fast Apache Arrow2 library - since Dan is a raku alternative to Pandas/Polars Series & DataFrames, I think that it would be less work to interface Dan to Polars (which is implemented in Rust)

[19:54] <grondilu> Voldenet: oh yeah, the parameter has to be defined at class composition time or something.  of course.

[19:54] <Voldenet> I suspect that's the case

[19:55] <p6steve> soooo - my question is "are there any examples of interfacing raku to rust - for example via FFI?" and "does the info at guide https://doc.rust-lang.org/nomicon/ffi.html fit that from the rust side?"

[19:57] *** sena_kun left
[19:58] <p6steve> appreciate any guidance

[19:59] *** sena_kun joined
[20:04] <nine> If that Rust library exposes a C interface, I can imagine that just working as is via NativeCall

[20:08] <p6steve> nine: tx! I suppose my base ignorance is that I do not know if NativeCall does FFI, or whether that matters?

[20:11] <nine> What do you mean with "FFI"?

[20:12] *** n1to joined
[20:15] <p6steve> nine: I mean this --> https://en.wikipedia.org/wiki/Foreign_function_interface

[20:16] <p6steve> nine: (but I wonder if this is just what raku does anyhow - and thus I am confused)

[20:17] <nine> That's why the question confuses me. Of course NativeCall is a foreign function interface. It is how you call native (i.e. non-Raku) functions from Raku

[20:19] <[Coke]> bscan: what would a json version of the docs look like?

[20:20] <[Coke]> Is there some object standard for that?

[20:21] <p6steve> haha - well the Platypus I shared above has a rust example like this:

[20:21] <p6steve>   1  #![crate_type = "dylib"]

[20:21] <p6steve>   2 

[20:21] <p6steve>   3  // compile with: rustc add.rs

[20:21] <p6steve>   4 

[20:21] <p6steve>   5  #[no_mangle]

[20:21] <p6steve>   6  pub extern "C" fn add(a:i32, b:i32) -> i32 {

[20:21] <p6steve>   7      a+b

[20:21] <p6steve>   8  }

[20:22] <p6steve> this makes 'libadd.so'

[20:23] <p6steve> so I will just go for that with NativeCall ... and see how I get on!

[20:26] <p6steve> I [almost] want to use P5 Platypus as a go-between ... but will resist the urge to go too fast and loose

[20:30] <p6steve> nine: vielen dank

[20:31] *** grondilu left
[20:32] *** melezhik joined
[20:33] *** melezhik left
[20:46] *** melezhik joined
[20:47] <melezhik> .

[20:47] *** melezhik left
[20:56] *** kaiepi joined
[21:07] *** kaiepi is now known as Kaiepi

[21:09] *** melezhik joined
[21:15] *** melezhik left
[21:21] *** corwin left
[21:22] *** corwin joined
[21:39] *** hankache joined
[21:41] <Xliff> p6steve: As long as your library is a valid .so, NativeCall will run it.

[21:42] <Xliff> So for that particular function it would be... "use NativeCall; sub add (int32, int32) returns int32 is native(add) { * }

[21:45] <Voldenet> I don't think you need (add) in that case

[21:45] *** n1to left
[21:56] *** melezhik joined
[21:57] <melezhik> I am thinking to create a badge for Sparky CI builds, any thought how can I do it using cro? should I use static files or generate SVG on the fly?

[21:59] *** melezhik left
[22:03] <p6steve> Xliff: Cannot resolve caller guess_library_name(Nil:U, Nil:U); none of these signatures matches: ... suppose I need to "use" libadd.so somehow?

[22:05] <p6steve> Xliff: Cannot locate native library 'libadd.so': libadd.so: cannot open shared object file: No such file or directory

[22:06] <p6steve> ^^ this with native('add')

[22:09] <p6steve> Xliff:   1 use NativeCall; sub add (int32, int32) returns int32 is native('add') { * }; say add(1, 2);

[22:09] <p6steve> Xliff: 3

[22:10] <p6steve> Xliff: (had to cp libadd.so /usr/lib)

[22:10] <p6steve> Xliff: cool - thanks!!

[22:11] *** hankache left
[22:35] *** jjido left
[22:42] <Voldenet> p6steve: you don't need to have libadd.so in /usr/lib - you can provide full path iirc

[22:43] <Voldenet> > The native trait accepts the library name, the full path, or a subroutine returning either of the two. When using the library name, the name is assumed to be prepended with lib and appended with .so (or just appended with .dll on Windows), and will be searched for in the paths in the LD_LIBRARY_PATH (PATH on Windows) environment variable.

[22:58] *** morte_ left
[23:11] *** Altai-man joined
[23:14] *** sena_kun left
[23:19] *** sena_kun joined
[23:21] *** Altai-man left
[23:37] *** Kaiepi left
