[00:08] *** reportable6 left
[00:08] *** reportable6 joined
[00:16] *** guifa_ joined
[00:17] *** guifa left
[00:56] *** discord-raku-bot left
[00:57] *** discord-raku-bot joined
[00:58] *** markmarkmark left
[01:58] *** greppable6 left
[01:58] *** benchable6 left
[01:58] *** linkable6 left
[01:58] *** bisectable6 left
[01:58] *** evalable6 left
[01:58] *** statisfiable6 left
[01:58] *** notable6 left
[01:58] *** bloatable6 left
[01:58] *** quotable6 left
[01:58] *** nativecallable6 left
[01:58] *** committable6 left
[01:58] *** reportable6 left
[01:58] *** unicodable6 left
[01:58] *** tellable6 left
[01:58] *** releasable6 left
[01:58] *** shareable6 left
[01:58] *** coverable6 left
[01:58] *** quotable6 joined
[01:58] *** bloatable6 joined
[01:59] *** evalable6 joined
[01:59] *** benchable6 joined
[01:59] *** coverable6 joined
[01:59] *** notable6 joined
[01:59] *** nativecallable6 joined
[01:59] *** unicodable6 joined
[01:59] *** committable6 joined
[01:59] *** reportable6 joined
[01:59] *** bisectable6 joined
[02:00] *** linkable6 joined
[02:00] *** tellable6 joined
[02:00] *** statisfiable6 joined
[02:00] *** greppable6 joined
[02:00] *** shareable6 joined
[02:01] *** releasable6 joined
[03:01] *** unicodable6 left
[03:01] *** shareable6 left
[03:01] *** notable6 left
[03:01] *** committable6 left
[03:01] *** linkable6 left
[03:01] *** releasable6 left
[03:01] *** greppable6 left
[03:01] *** statisfiable6 left
[03:01] *** quotable6 left
[03:01] *** sourceable6 left
[03:01] *** nativecallable6 left
[03:01] *** benchable6 left
[03:01] *** coverable6 left
[03:01] *** squashable6 left
[03:01] *** reportable6 left
[03:01] *** bloatable6 left
[03:01] *** evalable6 left
[03:01] *** tellable6 left
[03:01] *** bisectable6 left
[03:01] *** bisectable6 joined
[03:01] *** shareable6 joined
[03:02] *** notable6 joined
[03:02] *** reportable6 joined
[03:02] *** benchable6 joined
[03:02] *** unicodable6 joined
[03:02] *** linkable6 joined
[03:02] *** releasable6 joined
[03:03] *** committable6 joined
[03:03] *** evalable6 joined
[03:03] *** statisfiable6 joined
[03:03] *** nativecallable6 joined
[03:03] *** squashable6 joined
[03:04] *** quotable6 joined
[03:04] *** bloatable6 joined
[03:04] *** greppable6 joined
[03:04] *** sourceable6 joined
[03:04] *** tellable6 joined
[03:04] *** coverable6 joined
[03:16] *** bigdata joined
[04:00] *** epony left
[05:00] *** statisfiable6 left
[05:00] *** linkable6 left
[05:00] *** bisectable6 left
[05:00] *** unicodable6 left
[05:00] *** notable6 left
[05:00] *** bloatable6 left
[05:00] *** committable6 left
[05:00] *** shareable6 left
[05:00] *** reportable6 left
[05:00] *** evalable6 left
[05:00] *** greppable6 left
[05:00] *** releasable6 left
[05:00] *** coverable6 left
[05:00] *** tellable6 left
[05:00] *** squashable6 left
[05:00] *** quotable6 left
[05:00] *** nativecallable6 left
[05:00] *** benchable6 left
[05:00] *** sourceable6 left
[05:01] *** statisfiable6 joined
[05:01] *** releasable6 joined
[05:01] *** bisectable6 joined
[05:01] *** nativecallable6 joined
[05:01] *** quotable6 joined
[05:02] *** greppable6 joined
[05:02] *** squashable6 joined
[05:02] *** notable6 joined
[05:02] *** linkable6 joined
[05:02] *** shareable6 joined
[05:02] *** committable6 joined
[05:02] *** evalable6 joined
[05:03] *** unicodable6 joined
[05:03] *** reportable6 joined
[05:03] *** coverable6 joined
[05:03] *** benchable6 joined
[05:03] *** tellable6 joined
[05:03] *** sourceable6 joined
[05:03] *** bloatable6 joined
[06:03] *** committable6 left
[06:03] *** statisfiable6 left
[06:03] *** bloatable6 left
[06:03] *** tellable6 left
[06:03] *** quotable6 left
[06:03] *** benchable6 left
[06:03] *** sourceable6 left
[06:03] *** coverable6 left
[06:03] *** linkable6 left
[06:03] *** evalable6 left
[06:03] *** nativecallable6 left
[06:03] *** shareable6 left
[06:03] *** notable6 left
[06:03] *** bisectable6 left
[06:03] *** squashable6 left
[06:03] *** releasable6 left
[06:03] *** unicodable6 left
[06:03] *** greppable6 left
[06:03] *** reportable6 left
[06:04] *** quotable6 joined
[06:04] *** reportable6 joined
[06:04] *** greppable6 joined
[06:04] *** evalable6 joined
[06:04] *** shareable6 joined
[06:04] *** statisfiable6 joined
[06:05] *** notable6 joined
[06:05] *** unicodable6 joined
[06:05] *** bloatable6 joined
[06:05] *** linkable6 joined
[06:05] *** tellable6 joined
[06:05] *** benchable6 joined
[06:06] *** squashable6 joined
[06:06] *** nativecallable6 joined
[06:06] *** sourceable6 joined
[06:06] *** committable6 joined
[06:06] *** releasable6 joined
[06:06] *** coverable6 joined
[06:06] *** bisectable6 joined
[07:04] *** bigdata left
[08:04] *** evalable6 left
[08:04] *** linkable6 left
[08:04] *** linkable6 joined
[08:06] *** evalable6 joined
[08:51] *** Sgeo left
[09:51] *** nativecallable6 left
[09:51] *** benchable6 left
[09:51] *** linkable6 left
[09:51] *** evalable6 left
[09:51] *** statisfiable6 left
[09:51] *** notable6 left
[09:51] *** squashable6 left
[09:51] *** releasable6 left
[09:51] *** bisectable6 left
[09:51] *** tellable6 left
[09:51] *** committable6 left
[09:51] *** greppable6 left
[09:51] *** quotable6 left
[09:51] *** bloatable6 left
[09:51] *** unicodable6 left
[09:51] *** shareable6 left
[09:51] *** bisectable6 joined
[09:51] *** evalable6 joined
[09:51] *** bloatable6 joined
[09:52] *** tellable6 joined
[09:52] *** releasable6 joined
[09:52] *** benchable6 joined
[09:52] *** committable6 joined
[09:52] *** nativecallable6 joined
[09:52] *** shareable6 joined
[09:52] *** notable6 joined
[09:52] *** unicodable6 joined
[09:53] *** greppable6 joined
[09:53] *** statisfiable6 joined
[09:53] *** habere-et-disper joined
[09:53] *** quotable6 joined
[09:53] *** linkable6 joined
[09:54] *** squashable6 joined
[09:54] <habere-et-disper> Can one use with with a hash?

[09:54] <habere-et-disper> Something like:

[09:54] <habere-et-disper> m:¬† my %bar = <a 1>; say {a} with %bar

[09:54] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[09:57] <habere-et-disper> Okay I think I got it...

[09:57] <habere-et-disper> m: my %bar = <a 1>; say .<a> with %bar

[09:57] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´1‚ê§¬ª

[09:57] <discord-raku-bot> <Nemokosch> .<a> and it should be fine

[09:57] <discord-raku-bot> <Nemokosch> or .{'a'}

[09:57] <habere-et-disper> Thanks discord-raku-bot !

[09:59] <discord-raku-bot> <Nemokosch> üòÅ

[10:10] <habere-et-disper> I am enjoying the extra allowance of whitespace in raku, but I can't get it here:

[10:10] <habere-et-disper> and have to use

[10:10] <habere-et-disper> or am I missing some more magic?

[10:10] <habere-et-disper> Whoops:

[10:10] <habere-et-disper> `/ < :Separator > /` versus `/ <:Separator> /`

[10:17] <discord-raku-bot> <Nemokosch> what is the goal?

[10:20] <leont> Having a very weird dispatch related issue. But I guess you could say I'm stress testing it given it involves multi methods, conversion types and capture arguments.

[10:21] <discord-raku-bot> <Nemokosch> well, consider opening a rakudo issue if it's suspicious enough

[10:22] <discord-raku-bot> <Nemokosch> I remember samewith didn't work with caching, for example

[10:24] *** epony joined
[10:25] <lizmat> tonyo: rak 0.0.14 fell into a black hole it seems, 0.0.15 (only doc changes) uploaded and now visible

[10:25] <lizmat> tonyo: still wondering what happened to 0.0.14

[10:30] <discord-raku-bot> <Nemokosch> did you not get a mail?

[10:30] <discord-raku-bot> <Nemokosch> it may even end up in spam

[10:36] <lizmat> no mail, checked my spam

[10:37] <lizmat> in any case, the upload was successful and it said that it would get indexed: if there was something wrong with it, it would have said it at upload, no ?

[10:39] *** epony left
[10:44] *** sena_kun joined
[10:50] *** epony joined
[10:50] <discord-raku-bot> <Nemokosch> iirc I did get mails after supposedly succesful uploads

[10:50] <discord-raku-bot> <Nemokosch> and I only noticed it later that it didn't just fail randomly

[10:53] <tbrowder> howdy!

[10:55] <tbrowder> i'm trying to load a module with 'require' and test for sucess per the docs but not having any luck. i'm using the syntax shown in the docs:

[10:57] <tbrowder> my $m = 'Foo'; require ::($m); if $m ~~ Failure { die "$m not loaded" }

[10:59] <tbrowder> i don't bail there, but the module isn't loaded and my prog fails later when attempting to access it. hm, i'll try to test that at the require point. docs may need a little tweak...

[11:03] <habere-et-disper> @discord-raku-bot: Experimenting with readability. Not sure if it helps here.

[11:09] <discord-raku-bot> <Nahita> tbrowder: hi, if `require` fails to find the module, it will `fail` and since it's in sink context, the program will die at that point, no? Also `$m` is a defined String so it's not a Failure? Documentation shows `try` require'ing with lookup and then checking ::($m) ~~ Failure

[11:12] <leont> Nemokosch: I will open a ticket as soon as I narrowed it down. It's tricker than I thought

[11:13] <tellable6> leont, I'll pass your message to Nemokosch

[11:20] <habere-et-disper> Is there a recommended way to iterate within a method chain?

[11:22] <Voldenet> m: my $m = "Foo"; if (try require ::($m)) === Nil { die "$m not loaded" }

[11:22] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´Foo not loaded‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:30] <Voldenet> habere-et-disper: *iterate* meaning what, something like .map?

[11:33] <Voldenet> (^10).map({ $_ * 3 }).say

[11:33] <evalable6> Voldenet, rakudo-moar 5a6344fc6: OUTPUT: ¬´(0 3 6 9 12 15 18 21 24 27)‚ê§¬ª

[11:34] <Voldenet> alternatively

[11:34] <Voldenet> m: (^10).&{ gather { for $_ { take $_ * 3 } } }.say

[11:34] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´(0 3 6 9 12 15 18 21 24 27)‚ê§¬ª

[11:40] <Voldenet> there's even more ways to do that

[11:50] *** linkable6 left
[11:50] *** evalable6 left
[11:51] *** evalable6 joined
[11:52] *** linkable6 joined
[11:52] *** MoC joined
[11:58] <leont> I really need to write a solution for the enum issue I mention, because I just hit it for the third time this week

[11:58] <leont> *mentioned at the conference

[12:07] *** bigdata joined
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:35] <habere-et-disper> @Voldenet++ Map does a single pass. I'm looking to do multiple passes...

[12:35] <habere-et-disper> m: my %VOWELS = < A 1 E 2 I 3 O 4 U 5 >.pairup; say <AEIOU>.comb.map( *.subst( .key, .value ) with %VOWELS )

[12:35] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> .comb.map( *.subst( .key, .value ) with ‚èè%VOWELS )‚ê§¬ª

[12:36] <tbrowder>  nahita: thanks. the syntax (....) and "

[12:36] <tbrowder> die does what i need

[12:38] <tbrowder> (try require ::($m)) === Nil and die "FATAL: msg";

[12:39] <tbrowder> i don't grok it but it works. to me the whole try/CATCH blurb in the docs needs a rework. not many practical examples for my use.

[12:49] <tbrowder> i

[12:49] *** habere-et-disper left
[13:17] <Voldenet> >(try require ::($m)) === Nil and die "FATAL: msg";

[13:17] <Voldenet> this syntax is fancy and confusing way to write `if (try require ::($m)) === Nil { die "$m not loaded" }`

[13:26] *** otpv joined
[13:44] * lizmat just realized that the next App::Rak version will have 90+ options

[13:45] <CIAvash> `try require ::('Test'); die "FATAL: $_" with $!`?

[13:45] <CIAvash> s/'Test'/$m/

[13:45] <leont> Oh FFS. Apparently I can't pre-declare an enum, and taking it out of the class it's currently in means it will leak over the main namespace instead of just that class.

[14:02] *** habere-et-disper joined
[14:19] <leont> ¬´Circularity detected in multi sub types¬ª, that is a new error!

[14:26] *** habere-et-disper left
[14:30] *** xinming left
[14:31] *** xinming joined
[14:43] *** MoC left
[14:56] <tbrowder> Voldenet: thanks, yes, and that‚Äôs golfing code to me, but writing it that does look more natural.

[14:57] <tbrowder> but that‚Äôs part of the charm of Raku!

[15:05] *** otpv left
[15:33] *** bigdata left
[15:50] <Voldenet> uhm, in many langs you can use && for ifs, but in all of them it's an ugly hack

[15:56] <discord-raku-bot> <Nemokosch> Shell vibe

[15:56] <discord-raku-bot> <Nemokosch> `or die`

[16:33] *** evalable6 left
[16:33] *** linkable6 left
[16:34] *** linkable6 joined
[16:36] *** evalable6 joined
[16:48] *** eseyman left
[16:51] <ugexe> leont: could you do `{ my enum ...; class Foo { ... } } }`?

[16:52] <leont> My problem with the current behavior is that the values leak out. I do need the type to be out there.

[16:52] <leont> I can't get one behavior without the other

[16:54] <ugexe> it shouldnt leak out of that outer lexical scope in my example though

[16:55] <ugexe> m: { my enum XX <a b c>; class Foo { method bar { say a } } }; say a;

[16:55] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[16:55] <ugexe> m: { my enum XX <a b c>; class Foo { method bar { say a } } }; Foo.new.bar;

[16:55] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´a‚ê§¬ª

[16:56] <ugexe> although yeah even if that does what you want its still a workaround 

[16:57] <leont> I'm probably going to try to write a trait to make it not do that

[16:58] <leont> It's easy enough to sabotage the exporting of values, but in the original scope it's rather hardcoded at the moment

[16:58] <ugexe> yeah, and i guess my example doesn't get you the e.g. XX

[17:00] <CIAvash> leont: yeah I have problem with enums exporting values by default as well. Maybe I should open an issue for it. This is what I did in my module: https://codeberg.org/CIAvash/APISports-Football/src/commit/7b17664a794449e5f97cceb2ad3a01ae11883f64/lib/APISports/Football/Types.rakumod#L70-L78

[17:03] <leont> CIAvash: this seems to work for exports https://pastebin.com/JU1LyC4r

[17:08] <CIAvash> interesting

[17:10] <leont> Should maybe release that as a module, but was distracted by other projects

[17:32] *** Kaipei left
[17:39] *** Util_ is now known as Util

[17:43] *** eseyman joined
[17:43] *** Sgeo joined
[18:07] *** reportable6 left
[18:07] *** reportable6 joined
[18:17] *** Kaiepi joined
[18:39] *** mexen left
[19:06] *** habere-et-disper joined
[19:07] <habere-et-disper> I was expecting the following two to be equivalent:

[19:07] <habere-et-disper> m: say 1..10 X**2

[19:07] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´(1 4 9 16 25 36 49 64 81 100)‚ê§¬ª

[19:07] <habere-et-disper> m: say 1..10 X¬≤

[19:07] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´((1 2) (2 2) (3 2) (4 2) (5 2) (6 2) (7 2) (8 2) (9 2) (10 2))‚ê§¬ª

[19:07] <habere-et-disper> I am thinking wrong?

[19:43] *** xinming left
[19:44] *** xinming joined
[19:46] *** epony left
[19:51] *** swaggboi left
[19:55] <japhb> habere-et-disper: The first one is X'ing the infix **, the second is trying to X a postfix, with no second array.  So instead it sees the superscript 2 as the only element of the second array, not as the postfix operator.

[19:57] *** epony joined
[20:00] <habere-et-disper> @japhb++ I think clarity lies in seeing ** as infix and superscript 2 as postfix when cross requires(?) infix

[20:16] *** YULO joined
[20:24] <discord-raku-bot> <Nemokosch> so why did the second succeed exactly?

[20:33] <habere-et-disper> @discord-raku-bot: This one has caught me out before. I think implicitly there is a default list constructor (comma) implied. So...

[20:33] <habere-et-disper> m: say ( (1..10) X¬≤ ) eqv ( (1..10) X,¬≤ )

[20:33] <camelia> rakudo-moar 5a6344fc6: OUTPUT: ¬´True‚ê§¬ª

[20:41] <leont> ¬´Impossible coercion from 'Composer' into 'Composer': method COERCE returned an instance of Composer¬ª that is not a very helpful error (but the problem was PEBCAK of course)

[21:16] *** linkable6 left
[21:16] *** evalable6 left
[21:17] *** linkable6 joined
[21:17] *** evalable6 joined
[21:19] *** lucs_ is now known as lucs

[21:20] *** kaskal left
[21:27] *** swaggboi joined
[21:38] *** Sgeo left
[21:55] *** Sgeo joined
[22:22] *** sena_kun left
[23:09] *** otpv joined
[23:11] *** kaskal joined
[23:20] *** perlbot left
[23:20] *** simcop2387 left
[23:31] *** Sgeo left
[23:33] *** Guest2457 is now known as clarjon1

[23:37] *** euandreh left
[23:38] *** simcop2387 joined
[23:39] *** perlbot joined
[23:51] *** Sgeo joined
