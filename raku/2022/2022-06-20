[00:07] *** reportable6 left
[00:10] *** reportable6 joined
[00:12] <vrurg> SmokeMachine: nah, my mistake. M1 yet.

[00:44] *** thundergnat left
[01:44] *** nativecallable6 left
[01:44] *** notable6 left
[01:44] *** statisfiable6 left
[01:44] *** greppable6 left
[01:44] *** releasable6 left
[01:44] *** tellable6 left
[01:44] *** reportable6 left
[01:44] *** linkable6 left
[01:44] *** sourceable6 left
[01:44] *** benchable6 left
[01:44] *** bisectable6 left
[01:44] *** shareable6 left
[01:44] *** evalable6 left
[01:44] *** quotable6 left
[01:44] *** unicodable6 left
[01:44] *** committable6 left
[01:44] *** coverable6 left
[01:44] *** bloatable6 left
[01:44] *** notable6 joined
[01:44] *** evalable6 joined
[01:45] *** coverable6 joined
[01:45] *** tellable6 joined
[01:45] *** greppable6 joined
[01:45] *** statisfiable6 joined
[01:45] *** bisectable6 joined
[01:46] *** quotable6 joined
[01:46] *** reportable6 joined
[01:46] *** shareable6 joined
[01:46] *** bloatable6 joined
[01:46] *** nativecallable6 joined
[01:46] *** committable6 joined
[01:47] *** linkable6 joined
[01:47] *** releasable6 joined
[01:47] *** benchable6 joined
[01:47] *** unicodable6 joined
[01:47] *** sourceable6 joined
[01:50] *** lichtkind_ left
[02:50] *** bisectable6 left
[02:50] *** releasable6 left
[02:50] *** linkable6 left
[02:50] *** bloatable6 left
[02:50] *** evalable6 left
[02:50] *** unicodable6 left
[02:50] *** notable6 left
[02:50] *** benchable6 left
[02:50] *** nativecallable6 left
[02:50] *** tellable6 left
[02:50] *** quotable6 left
[02:50] *** sourceable6 left
[02:50] *** greppable6 left
[02:50] *** coverable6 left
[02:50] *** committable6 left
[02:50] *** statisfiable6 left
[02:50] *** shareable6 left
[02:50] *** reportable6 left
[02:51] *** unicodable6 joined
[02:51] *** sourceable6 joined
[02:51] *** tellable6 joined
[02:51] *** benchable6 joined
[02:52] *** coverable6 joined
[02:52] *** linkable6 joined
[02:52] *** statisfiable6 joined
[02:52] *** evalable6 joined
[02:52] *** releasable6 joined
[02:52] *** quotable6 joined
[02:52] *** bisectable6 joined
[02:52] *** shareable6 joined
[02:52] *** nativecallable6 joined
[02:53] *** reportable6 joined
[02:53] *** notable6 joined
[02:53] *** bloatable6 joined
[02:53] *** greppable6 joined
[02:53] *** committable6 joined
[03:02] *** frost joined
[03:14] *** frost left
[03:58] *** Furor is now known as Colere

[04:21] *** crystalfrost[m] left
[04:21] *** uzl[m] left
[04:21] *** pierrot left
[04:21] *** SmokeMachine left
[04:21] *** mtj left
[04:21] *** aqua1 left
[04:21] *** codesections left
[04:21] *** zostay left
[04:21] *** dpk left
[04:22] *** dpk joined
[04:22] *** aqua1 joined
[04:22] *** mtj joined
[04:22] *** zostay joined
[04:22] *** SmokeMachine joined
[04:22] *** codesections joined
[04:22] *** pierrot joined
[04:25] *** crystalfrost[m] joined
[04:27] *** phogg left
[04:27] *** Juerd left
[04:27] *** mjgardner left
[04:27] *** ecocode left
[04:27] *** ecocode joined
[04:27] *** mjgardner joined
[04:27] *** phogg joined
[04:27] *** phogg left
[04:27] *** phogg joined
[04:28] *** Juerd joined
[04:30] *** ilogger2 left
[04:30] *** gugod left
[04:30] *** MitarashiDango[m left
[04:30] *** Altreus left
[04:30] *** ecocode[m] left
[04:30] *** andrea[m]1234 left
[04:30] *** BinGOs left
[04:30] *** patterner____ left
[04:30] *** patterner____ joined
[04:30] *** bingos joined
[04:30] *** bingos left
[04:30] *** bingos joined
[04:30] *** ilogger2 joined
[04:31] *** Altreus joined
[04:31] *** uzl[m] joined
[04:32] *** gugod joined
[04:37] *** Sankalp left
[04:44] *** Sankalp joined
[04:46] *** andrea[m]1234 joined
[04:47] *** MitarashiDango[m joined
[04:49] *** ecocode[m] joined
[04:51] *** greaser|q joined
[04:51] *** Sankalp left
[04:52] *** rypervenche_ joined
[04:52] *** broquain1 joined
[04:52] *** facetious joined
[04:53] *** perlmaros left
[04:53] *** kybr left
[04:53] *** broquaint left
[04:53] *** jjatria left
[04:53] *** charsbar left
[04:53] *** rypervenche left
[04:53] *** tailgate left
[04:53] *** GreaseMonkey left
[04:54] *** jjatria joined
[04:55] *** perlmaros joined
[04:55] *** charsbar joined
[04:58] *** Sankalp joined
[05:02] *** kybr joined
[05:49] *** Garbanzo joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:10] *** Garbanzo left
[06:19] *** abraxxa joined
[06:23] *** abraxxa left
[06:24] *** abraxxa joined
[06:25] *** mexen joined
[06:29] *** abraxxa left
[06:30] *** abraxxa joined
[06:41] *** Sgeo left
[06:45] *** abraxxa left
[06:46] *** abraxxa joined
[06:46] *** abraxxa left
[06:46] *** abraxxa joined
[07:31] *** bingos is now known as BinGOs

[07:52] *** dakkar joined
[08:03] *** donpdonp|z left
[08:03] *** donpdonp|z_ joined
[08:20] *** frost joined
[08:24] *** frost left
[08:26] *** frost joined
[08:31] *** lichtkind_ joined
[08:46] *** ToddAndMargo joined
[08:49] <ToddAndMargo> Newbie bitwise buffer question:  what am I doing from with this bitwise OR?

[08:49] <ToddAndMargo> [6] > say (buf8.new(0x5D) +| buf8.new(0x00));

[08:49] <ToddAndMargo> 1

[08:49] <evalable6> ToddAndMargo, rakudo-moar d253dc79e: OUTPUT: «WARNINGS for /tmp/bpYSjCc3aL:␤1␤Useless use of ">" in expression "[6] > say (buf8.new(0x5D) +| buf8.new(0x00))" in sink context (line 1)␤»

[08:49] <ToddAndMargo> [6] > say (buf8.new(0x5D) +| buf8.new(0xFF));

[08:49] <ToddAndMargo> 1

[08:49] <evalable6> ToddAndMargo, rakudo-moar d253dc79e: OUTPUT: «WARNINGS for /tmp/DAqVjPotd6:␤1␤Useless use of ">" in expression "[6] > say (buf8.new(0x5D) +| buf8.new(0xFF))" in sink context (line 1)␤»

[08:49] <dakkar> why are you comparing a 1-element array to the result of `say`?

[08:49] <dakkar> in other words, why are you starting with `[6] > `?

[08:51] <dakkar> also, buf8 is a class, so the result of buf8.new is an object

[08:51] <dakkar> not a number

[08:51] <dakkar> bitwise ops don't make much sense for objects…

[08:54] <ToddAndMargo> I am trying to show examples of buffers and bitwise operations.  I am starting with OR.  Yo know what.  My bad.  REPL will show me the result.  No need for say.

[08:55] <dakkar> I'm pretty sure you can not do bitwise ops on bufs

[08:56] <ToddAndMargo> I do XOR and cells all the time

[08:56] <dakkar> interesting!

[08:57] <dakkar> can you show me some expressions that work? because I'm not seeing it

[08:59] <ToddAndMargo> [15] > my buf8 $i= buf8.new(0x5D, 0xAE);

[08:59] <ToddAndMargo> Buf[uint8]:0x<5D AE>

[08:59] <ToddAndMargo> [16] > my buf8 $j= buf8.new(0xAB, 0xCD);

[08:59] <ToddAndMargo> Buf[uint8]:0x<AB CD>

[08:59] <ToddAndMargo> [17] > $i[0] += $j[0];

[08:59] <ToddAndMargo> 8

[08:59] <ToddAndMargo> [18] > $i[1] += $j[1];

[08:59] <ToddAndMargo> 123

[08:59] <dakkar> aah, but you're not operating on the buf!

[09:00] <dakkar> you're operating on the elements of the buf

[09:00] <dakkar> which are numbers

[09:00] <ToddAndMargo> [19] > $i[0] +^ $j[0];

[09:00] <ToddAndMargo> 163

[09:00] <ToddAndMargo> [20] > $i[1] +^ $j[1];

[09:00] <ToddAndMargo> 182

[09:00] <dakkar> yes, those are elements (see the square-bracked subscript?)

[09:01] <ToddAndMargo> just the cells in the buffer.  I can't get away with it on the entire buffer as I can with an integer.  This manes sense, since a buffer is an array of bytes and anot a data structure like an integer

[09:02] <ToddAndMargo> Thank you .  I realize what I am doing wrong now.

[09:02] <SmokeMachine> m: say buf8.new(0x5D).head +| buf8.new(0xFF).head

[09:02] <camelia> rakudo-moar d253dc79e: OUTPUT: «255␤»

[09:03] <SmokeMachine> m: say buf8.new: buf8.new(0x5D).head +| buf8.new(0xFF).head

[09:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «Buf[uint8]:0x<FF>␤»

[09:07] <ToddAndMargo> this is what I wrote up on my Keeper document (,odt) on buffers:

[09:07] <ToddAndMargo> Bitwise Operations:

[09:07] <ToddAndMargo> Please note that a buffer is NOT a data structure other than an “array of (raw) bytes”. You can only do bit wise operations on a single cell at a time.

[09:07] <ToddAndMargo> > my buf8 $i= buf8.new(0x5D);

[09:07] <ToddAndMargo> > my buf8 $j= buf8.new(0xAB);

[09:07] <ToddAndMargo> Bitwise AND:

[09:07] <ToddAndMargo> > $i[1] +& $j[1];

[09:07] <ToddAndMargo> 0

[09:07] <ToddAndMargo> and so on and so forth

[09:25] *** ToddAndMargo left
[09:36] <lizmat> Note that you can iterator over Bufs:

[09:36] <lizmat> m: my $b = Buf.new(1,2,3); $_++ for $b[]; dd $b

[09:36] <camelia> rakudo-moar d253dc79e: OUTPUT: «Buf $b = Buf.new(2,3,4)␤»

[09:52] *** discord-raku-bot left
[09:52] *** discord-raku-bot joined
[09:53] <discord-raku-bot> <Nemokosch#9980> japhb: you are the author of Terminal::LineEditor, right?

[10:35] *** frost left
[10:51] *** lichtkind joined
[10:52] *** lichtkind_ left
[11:52] *** frost joined
[12:02] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/06/20/2022-25-we-will-raku/

[12:08] *** reportable6 left
[12:11] *** reportable6 joined
[12:33] *** frost left
[12:54] *** dogbert11 joined
[12:54] *** dogbert17 left
[13:23] *** Kaiepi left
[13:24] *** Kaiepi joined
[13:28] *** frost joined
[13:38] *** jgaz joined
[13:50] <frost> lizmat++, in the news, the code `say @a; say @b'` has an extra `'`

[14:01] *** lizmat left
[14:02] *** kueppo joined
[14:05] *** morte_ joined
[14:09] *** kueppo left
[14:14] *** Kaiepi left
[14:15] *** Kaiepi joined
[14:16] *** Kaiepi left
[14:17] *** Kaiepi joined
[14:21] *** saint- joined
[14:22] *** frost left
[14:29] <japhb> Yes, I am the author of Terminal::LineEditor.

[14:30] <japhb> (For some reason, irsii didn't highlight my nick when sent via the Discord relay.  Dunno why.)

[14:30] *** Kaipei joined
[14:34] *** Kaiepi left
[14:36] *** Kaiepi joined
[14:38] *** Kaipei left
[14:57] *** Kaiepi left
[14:59] *** Kaiepi joined
[15:04] *** Kaiepi left
[15:29] <uzl[m]> Will the in-person presentations be recorded?

[15:29] <uzl[m]> lizmat++

[15:31] <uzl[m]> I am liking these `Did You Know?`s haha. Quite informative!

[15:32] *** Sgeo joined
[15:33] <uzl[m]> weekly: https://lobste.rs/s/hpxa66/make_raku_programming_language_familiar

[15:33] <notable6> uzl[m], Noted! (weekly)

[15:51] <perryprog> Raku mentioned on the HN's as well:

[15:51] <perryprog> weekly: https://news.ycombinator.com/item?id=31797918

[15:51] <notable6> perryprog, Noted! (weekly)

[15:51] * perryprog just realized lizmat was the one who posted it

[15:53] *** Kaiepi joined
[15:56] <Voldenet> > :(@b, @a) := (@a, @b);

[16:03] <Voldenet> that's neat, but it doesn't compose well

[16:03] <Voldenet> m: my @a = <1 2 3>; my @b = <a b c>; :(@b, @a) := (@a, @b); say @a, @b

[16:03] <camelia> rakudo-moar d253dc79e: OUTPUT: «[a b c][1 2 3]␤»

[16:04] <Voldenet> m: my @a = <1 2 3>; my @b = <a b c>; if True { :(@b, @a) := (@a, @b); }; say @a, @b

[16:04] <camelia> rakudo-moar d253dc79e: OUTPUT: «Lexical with name '@b' does not exist in this frame␤  in block <unit> at <tmp> line 1␤␤»

[16:05] <Voldenet> m: my @a = <1 2 3>; my @b = <a b c>; if True { my @t := @b; @b := @a; @a := @t; }; say @a, @b

[16:05] <camelia> rakudo-moar d253dc79e: OUTPUT: «[a b c][1 2 3]␤»

[16:05] <Voldenet> "dumb code" works

[16:06] *** Kaiepi left
[16:13] <andinus> are there examples of Persistent session management with Cro on the web?

[16:13] <andinus> apart from the official docs: https://cro.services/docs/http-auth-and-sessions#Persistent_session_management

[16:24] <SmokeMachine> andinus: https://github.com/FCO/Cro-HTTP-Session-Red

[16:26] <andinus> thanks

[16:29] <SmokeMachine> (That can be very useful if you are using Red…

[16:29] <Voldenet> also https://github.com/croservices/cro-http-session-pg

[16:35] *** dakkar left
[16:58] *** mexen left
[17:02] *** jgaz left
[17:14] <vrurg> I wonder if it would be ok to transfer JSON::Unmarshal to community modules. It seems to be long abandoned. And tadzik is not around for nearly a year.

[17:19] *** saint- left
[17:22] *** lizmat joined
[17:24] <lizmat> frost: thanks for the headsup, fixed

[17:24] <tellable6> lizmat, I'll pass your message to frost

[17:28] <vrurg> lizmat: what do you think about JSON::Unmarshall?

[17:34] <SmokeMachine> vrurg: I don't think that's abandoned... recently we got the opt-in update to JSON::Marshal and JSON::Class

[17:34] <vrurg> SmokeMachine: Unmarshall is a separate module by tadzik.

[17:35] <SmokeMachine> oh, ok... sorry...

[17:35] <Voldenet> original author is on libera, so you can just ask ┐(´～`；)┌ 

[17:35] <vrurg> SmokeMachine: try to unmarshall class Foo is JSON::Class { has CustomClass:D %.cc; }

[17:36] <vrurg> Voldenet: we're on libera, ain't we? ;)

[17:36] <SmokeMachine> Custom class needs JSON::Class as well?

[17:36] <vrurg> SmokeMachine: Yes, but it doesn't matter. Perhaps Int:D or Str:D would do as well.

[17:37] <SmokeMachine> oh! :D is the problem...

[17:37] <SmokeMachine> ?

[17:37] <Voldenet> …I think so, all of my configs say "freenode" because I only changed server names and certs :P

[17:38] <vrurg> SmokeMachine: aha. The module doesn't care about nominalizables.

[17:38] <vrurg> Somehome coercion doesn't break it. It's a miracle. :)

[17:39] <SmokeMachine> (talking about marshalling... I really miss a was to serialise an object and the data includes the class name, to be possible to do something like: `$representation.deserialise` and that would create the object)

[17:39] <vrurg> *Somehow

[17:39] <vrurg> SmokeMachine: Implement! :D

[17:39] *** jgaz joined
[17:40] <lucs> Can I have a MAIN-like method in a module, that is, its args would be read from the command line and parsed in the same way MAIN does? ｢▸ raku -e 'use Foo; Foo.MAIN' -a=42｣

[17:42] <SmokeMachine> vrurg: I was implementing it... but Red drains all my free time...

[17:42] <vrurg> lucs: try looking into Rakudo sources, src/core.c/Main.pm6. Though be careful, it's undocumented.

[17:42] <vrurg> SmokeMachine: I know. That's where the smile comes from.

[17:43] <vrurg> SmokeMachine: BTW, I was very much missing oracle driver. But neither had time to implement it, nor to wait for implementation.

[17:45] *** morte_ left
[17:45] <SmokeMachine> vrurg: I still have to find some time to finish the MySQL driver: https://github.com/FCO/Red-Driver-MySQL

[17:46] <vrurg> You need more people. The project is growing beyond single-person maintainability. Wishful thinking, though.

[17:48] <SmokeMachine> vrurg: yes, more people helping would help a lot! That Squishathon with people was helping Red was great, for example...

[17:49] <lucs> vrurg: Thanks

[17:51] <SmokeMachine> And I really want to release the first stable version as soon as possible (https://github.com/FCO/Red/issues/470#issuecomment-786132637)

[17:52] <vrurg> SmokeMachine: crossing my fingers

[17:52] * vrurg is afk. Too much work too. :)

[17:57] *** sena_kun left
[17:58] *** morte_ joined
[18:00] *** sena_kun joined
[18:08] <japhb> lucs: MAIN can be exported as a multi from modules.  That's how many App::* modules work (including all of mine, both public and private).  I know that's not the same as a method, but you could also declare them `our` and access them through stashes instead, if that's your wont.

[18:09] *** reportable6 left
[18:10] *** reportable6 joined
[18:14] <lucs> japhb: Interesting. I'll look into that, thanks.

[18:17] *** Garbanzo joined
[18:30] <lucs> japhb: Um, would you happen to have a link to one of those public App::* modules?

[18:33] *** guifa joined
[18:34] <japhb> Give me a sec

[18:35] <japhb> https://github.com/Raku-MUGS/MUGS-UI-CLI/blob/main/lib/MUGS/App/CLI.rakumod#L360

[18:36] <japhb> Also shows partial override of USAGE generation

[18:36] * guifa is about to die

[18:37] <guifa> Moving went waaaay slower than expected this weekend, and now I've only got like 24 hours to finish writing my talks for P&RC and yeah.... no where close :-(

[18:37] *** Garbanzo left
[18:38] <lucs> japhb: Thanks a bunch.

[18:39] <japhb> Sure, no problem!  :-)

[18:40] <japhb> guifa: Ackpth!  Good luck!

[18:41] <guifa> japhb thanks.  I actually just realized my first talk isn't until Thursday so… yay.  but just means I'll be antisocial on Wednesday at the conference lol

[19:06] *** jgaz left
[19:11] <sena_kun> wow, the conference looks lively

[19:12] <sena_kun> guifa, good luck with the prep!

[19:15] *** morte_ left
[19:16] *** MasterDuke left
[19:19] <drakonis> oh, it starts tomorrow, right?

[19:45] *** discord-raku-bot left
[19:45] *** donpdonp- joined
[19:46] *** discord-raku-bot joined
[19:46] *** guifa left
[19:46] *** abraxxa left
[19:46] *** abraxxa joined
[19:47] *** donpdonp|z_ left
[19:49] *** morte_ joined
[19:56] *** guifa joined
[20:16] <guifa> drakonis yeah, tomorrow there's some of the typical preconference stuff (classes, etc) and Wednesday starts the talks

[20:16] * guifa came up with his advent day post for this year

[20:16] <guifa> making a regex for email

[20:17] <guifa> but like, actually following the RFC to the letter, with no false positives or negatives.  is actually possible in Raku

[20:19] *** japhb left
[20:47] *** japhb joined
[21:11] *** Garbanzo joined
[21:32] *** greaser|q left
[21:32] *** greaser|q joined
[21:32] *** greaser|q is now known as GreaseMonkey

[21:42] <perryprog> is that even possible

[21:43] <perryprog> with POSIX regex

[21:46] *** discord-raku-bot left
[21:57] *** Nemokosch joined
[21:58] <Nemokosch> Voldenet: no question that you can swap two variables the same way you could in C, no need for binding even :D

[21:58] <tellable6> 2022-06-15T14:17:06Z #raku <SmokeMachine> Nemokosch: I think it's possible: https://github.com/FCO/GccJit

[21:58] <Nemokosch> the thing is, it would work fine with $variables

[21:59] *** guifa left
[22:00] *** guifa joined
[22:05] *** morte_ left
[22:08] *** discord-raku-bot joined
[22:11] *** Nemokosch left
[22:24] *** abraxxa left
[22:29] *** discord-raku-bot left
[22:29] *** discord-raku-bot joined
[22:31] <discord-raku-bot> <Nemokosch#9980> m: dd $(1, 2; 5, 6)

[22:32] *** Nemokosch joined
[22:32] <Nemokosch> m: dd $(1, 2; 5, 6)

[22:32] <camelia> rakudo-moar d253dc79e: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 2 in sink context (lines 1, 1)␤Useless use of constant integer 1 in sink context (lines 1, 1)␤$(5, 6)␤»

[22:32] <Nemokosch> the question is: what happened here?

[22:33] <Nemokosch> m: dd (1, 2; 5, 6)

[22:33] <camelia> rakudo-moar d253dc79e: OUTPUT: «((1, 2), (5, 6))␤»

[22:33] <Nemokosch> where did (1, 2) go? 😅

[22:33] *** Nemokosch left
[22:39] <gfldex> Does a multi-dim scalar make sense? Where should it bind the 2nd dimension to?

[22:54] <discord-raku-bot> <Nemokosch#9980> it makes exactly as much sense as $((1, 2), (5, 6))

[22:54] <discord-raku-bot> <Nemokosch#9980> which does exist

[22:54] <discord-raku-bot> <Nemokosch#9980> also, trust me it's pretty useful when you do matrix algebra

[23:08] *** rir joined
[23:29] <discord-raku-bot> <Nemokosch#9980> the more I use Raku, the more I grow to realize @ was created to simply annoy coders

[23:34] <drakonis> if raku gets a new major version

[23:34] <drakonis> delete sigils

[23:34] <drakonis> alternatively, idk

[23:35] <discord-raku-bot> <Nemokosch#9980> if you have a multi-dimensional array

[23:35] <discord-raku-bot> <Nemokosch#9980> $a[0] will contain a proper list

[23:35] <discord-raku-bot> <Nemokosch#9980> but @a[0] will contain a scalar!

[23:35] <discord-raku-bot> <Nemokosch#9980> whyyyyy

[23:35] <discord-raku-bot> <Nemokosch#9980> with no particular hints why this should happen, and how to opt out

[23:37] <discord-raku-bot> <Nemokosch#9980> and you know what makes it so painful? that Z and X and stuff like this will always bring that implicit Scalarness

[23:37] <discord-raku-bot> <Nemokosch#9980> even though that's not even needed for them since they aren't recursive anyway

[23:37] <discord-raku-bot> <Nemokosch#9980> if I want the elements to be treated as scalars, I will say it!

[23:37] *** Nemokosch joined
[23:38] <Nemokosch> here, see...

[23:38] <Nemokosch> m: my @a = (1, 2; 3, 4); dd @a; dd @a[0];

[23:38] <camelia> rakudo-moar d253dc79e: OUTPUT: «Array @a = [(1, 2), (3, 4)]␤List @a = $(1, 2)␤»

[23:38] <Nemokosch> the Scalar appears out of nowhere, for hell's sake

[23:39] <Nemokosch> m: my $a = (1, 2; 3, 4); dd $a; dd $a[0];

[23:39] <camelia> rakudo-moar d253dc79e: OUTPUT: «List $a = $((1, 2), (3, 4))␤(1, 2)␤»

[23:40] <Nemokosch> but if I just take the multidimensional list itself as a scalar, magic: the elements will stay proper

[23:41] <Nemokosch> at this point I'm considering a style where I never use @variables and prefix my scalars if need be

[23:41] <Nemokosch> probably there won't be much need because

[23:42] <Nemokosch> m: my $a = (1, 2; 3, 4); dd $a[]; dd $a[0];

[23:42] <camelia> rakudo-moar d253dc79e: OUTPUT: «((1, 2), (3, 4))␤(1, 2)␤»

[23:43] <Nemokosch> What other reason would there be to use the @ sigil?

[23:44] *** Kaiepi joined
[23:49] <rir> @Nemokosch, I not really equipped to give you a clear full answer;  I have never used ';' as a separator in an array.

[23:51] <rir> But if you are looking for shaped arrays those are not yet supported.

[23:52] <rir> Beyond that I am not sure if you are lost or just unhappy with the actions or both.

[23:52] <Nemokosch> I just came across this while trying to compose a call that takes me closer to the Kronecker product

[23:53] <Nemokosch> Honestly, the situation is a bit awkward

[23:53] <drakonis> Nemokosch: at least raku doesnt have perl's contexts

[23:53] <drakonis> i hear it is a much bigger problem there

[23:54] <Nemokosch> I do find $(1, 2; 5, 6) bug-worthy. It's the least to expect it to work consistently, once it's promoted as a literal syntax for multi-dimensional arrays.

[23:54] <Nemokosch> However, it's a minor nuisance; one could live without this syntax, after all

[23:54] <Nemokosch> @variables never cease to disappoint, on the other hand

[23:55] <Nemokosch> And I suspect that's not really a bug or whatever

[23:55] <Nemokosch> It's just design that leaves me clueless who thought this abstraction was a good idea and why

[23:55] <rir> I don't have that math.  Instead of contexts Raku has containers.  I thought context was the key part of Perl that made it better than most scripting languages.

[23:56] <rir> Better meaning a little higher.

[23:56] <Nemokosch> Really, even in this case where it's clear as water that I do want a "positional", a (multi-dimensional) list in particular

[23:57] <Nemokosch> $ works way more predictable and flexible

[23:57] <rir> If you want to understand Raku re: this stuff, I can point you at some topical words.

[23:58] <Nemokosch> ... that $variables iterate as one single element? Is this the big problem @variables are meant to solve? This is already solved by zen-slicing, without the confusing semantics.

[23:58] <rir> Else there is little reason to not use $ary with @#ary.

[23:59] <rir> Oops, That should be your @$ary

[23:59] <Nemokosch> @variables have no "assignment" (yes, they have "list assignment" but that's simply not a variable assignment if you are coming from any imperative language)

[23:59] <Nemokosch> @variables don't work well with typing

