[00:03] *** deoac left
[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:09] <Xliff> tonyo: I was just hoping for a more direct method than" ::?CLASS.^attributes.grep( *.name eq $attribute-name )" is all. Thanks for the help.

[00:12] <Xliff> m: class A { has $!x; has $!y; }; A.^attribute_table.gist.say

[00:12] <camelia> rakudo-moar 17062c32f: OUTPUT: «{$!x => Mu $!x, $!y => Mu $!y}␤»

[00:12] <Xliff> :-O

[00:12] <Xliff> Well color me plaid!]

[00:13] *** habere-et-disper left
[00:21] <Xliff> m: role AttributeAccess {  method ATTRIBUTE { ::?CLASS.^attribute_table{ self.VAR.name }; };  multi sub trait_mod:<is> (Attribute \a, :$accessed) { a does AttributeAccess }; class A { has $!x; has $!y; method a { $!x.ATTRIBUTE.name.say }; }; A.new.a

[00:21] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot declare our-scoped class inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at <tmp>:1␤------> sed) { a does Attribute…»

[00:21] <Xliff> m: role AttributeAccess {  method ATTRIBUTE { self.package.^attribute_table{ self.VAR.name }; };  multi sub trait_mod:<is> (Attribute \a, :$accessed) { a does AttributeAccess }; class A { has $!x; has $!y; method a { $!x.ATTRIBUTE.name.say }; }; A.new.a

[00:21] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot declare our-scoped class inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at <tmp>:1␤------> sed) { a does Attribute…»

[00:22] <Xliff> m: role AttributeAccess {  method ATTRIBUTE { self  };  multi sub trait_mod:<is> (Attribute \a, :$accessed) { a does AttributeAccess }; class A { has $!x; has $!y; method a { $!x.ATTRIBUTE.name.say }; }; A.new.a

[00:22] <camelia> rakudo-moar 17062c32f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot declare our-scoped class inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at <tmp>:1␤------> sed) { a does Attribute…»

[00:23] <tonyo> Attr table, nice find

[00:26] <Xliff> Thanks! I think that will work.

[00:26] <Xliff> Thanks again for the help, tonyo++

[00:26] *** Kaiepi left
[00:27] <Xliff> In the end, this is what worked...

[00:27] <Xliff> m: class A { has $!x; has $!y; method a { self.^attribute_table{ $!x.VAR.name }.gist.say }; }; A.new.a

[00:27] <camelia> rakudo-moar 17062c32f: OUTPUT: «Mu $!x␤»

[00:28] <Xliff> tonyo: You mentioned a use case. Well, in some of my code, I have postdeclared comments on attributes that serve as annotations. Such things I can use at runtime.

[00:28] <Xliff> So direct access to the Attribute (not its value) is preferred. This solves that problem.

[00:28] <tonyo> Ahh v nice

[00:29] *** Kaiepi joined
[00:47] *** Guest56 joined
[01:43] *** derpydoo left
[01:44] *** Maylay left
[01:46] *** Maylay joined
[01:56] *** Kaiepi left
[01:58] *** Maylay left
[02:01] *** razetime joined
[02:03] *** jjido left
[02:04] *** frost joined
[02:18] *** Xliff left
[02:28] *** Maylay joined
[03:03] *** frost left
[03:05] *** frost joined
[03:12] *** squashable6 left
[03:13] *** squashable6 joined
[03:46] *** razetime left
[03:51] *** bigdata joined
[04:32] *** razetime joined
[04:35] *** Maylay left
[04:41] *** Maylay joined
[04:56] *** Xliff joined
[04:56] <Xliff> \o

[04:57] <Xliff> Is there a way to have a role enforce a class inheritance?

[05:11] *** bigdata left
[05:50] *** frost left
[05:59] *** Guest56 left
[06:02] *** razetime left
[06:03] *** razetime joined
[06:07] *** reportable6 left
[06:10] *** reportable6 joined
[06:12] *** razetime left
[06:12] *** razetime joined
[06:13] <moritz> a role can apply a class inheritance

[07:12] *** linkable6 left
[07:12] *** evalable6 left
[07:13] *** evalable6 joined
[07:15] *** linkable6 joined
[07:26] *** Kaiepi joined
[07:34] *** Kaiepi left
[07:39] *** razetime left
[07:39] *** razetime_ joined
[07:41] *** jjido joined
[07:45] *** razetime_ is now known as razetime

[07:45] *** razetime left
[07:45] *** razetime joined
[07:46] *** habere-et-disper joined
[07:48] *** Kaiepi joined
[07:53] *** Maylay left
[07:57] *** Maylay joined
[08:08] *** frost joined
[08:11] *** abraxxa joined
[08:15] *** abraxxa left
[08:16] *** abraxxa joined
[08:16] *** Maylay left
[08:18] *** razetime left
[08:19] *** frost left
[08:24] *** frost joined
[08:28] *** Maylay joined
[08:50] *** squashable6 left
[08:53] *** squashable6 joined
[08:56] *** jjido left
[09:03] *** Sgeo left
[09:12] *** kaskal left
[09:12] *** dakkar joined
[09:12] *** kaskal joined
[09:23] *** japhb left
[09:24] *** japhb joined
[09:31] *** japhb left
[09:31] *** codesections left
[09:36] *** japhb joined
[09:41] *** sena_kun joined
[10:13] *** Maylay left
[10:32] *** Maylay joined
[10:45] *** rcmlz joined
[10:45] *** rcmlz left
[10:54] *** frost left
[11:30] *** frost joined
[11:39] *** sena_kun left
[11:42] *** sena_kun joined
[11:48] *** habere-et-disper left
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:09] <Geth> ¦ ecosystem/main: 3d408a6d55 | L'Alabameñu++ (committed using GitHub Web editor) | META.list

[12:09] <Geth> ¦ ecosystem/main: Intl::CLDR is now on zef/fez

[12:09] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/3d408a6d55

[12:14] *** Maylay left
[12:17] *** Maylay joined
[12:19] *** frost left
[13:05] <tbrowder> hi, need some help about module organization for a class and a separate file for a r

[13:06] <tbrowder> *set of subroutines for use by it and other progs

[13:07] <tbrowder> call the class Bar in dir lib/Foo

[13:08] <tbrowder> call the file of subs lib/Foo/Subs.rakumod

[13:09] <tbrowder> i want to call a sub in Subs from class Foo::Bar

[13:13] <tbrowder> no reply yet, please, i need to check some more...i'm getting circular call errors but i haven't given just yet.

[13:22] *** mahafyi joined
[13:25] <ugexe> do you know what a circular reference is?

[13:26] <ugexe> if you have Foo.rakumod and Foo/Subs.rakumod and each one of those files uses the other file, its a circular reference

[13:27] <ugexe> because when you load Foo it then goes to load Foo::Subs, which then needs to load Foo which needs to load Foo::Subs, and so on

[13:28] <ugexe> it sounds like you need to move code in Foo::Subs (the code that depends on Foo in such a way you need a `use Foo` in Foo/Subs.rakumod) to a third module

[13:28] <ugexe> or put that logic inside of Foo::Subs in such a way that it doesnt need `use Foo`

[13:59] *** codesections joined
[14:38] *** ProperNoun left
[14:39] *** ProperNoun joined
[14:39] <[Coke]> if we don't have that in one of the tutorials on the doc site, someone please open a ticket for it.

[14:39] <[Coke]> (avoiding circular dependencies)

[14:40] <discord-raku-bot> <Anton Antonov> @Coke In case you did not get the message -- you have issues.

[14:44] <[Coke]> I didn't see that, no.

[14:49] *** mahafyi left
[14:51] <[Coke]> Thanks. this should a small lift, will try to get to it in the next few days

[15:02] *** codesections left
[15:04] *** codesections joined
[15:20] *** Sgeo joined
[15:27] <discord-raku-bot> <Anton Antonov> @Coke Sounds good.

[15:29] <El_Che> does [Coke] have issues? https://www.youtube.com/watch?v=SAxPLSvvbXY

[15:33] *** razetime joined
[15:43] <tbrowder> ugexe: yes, i got it fixed, thnx

[15:48] <discord-raku-bot> <Anton Antonov> @El_Che Thanks!

[15:49] <discord-raku-bot> <Anton Antonov> All the chapters of my PhD thesis start with epigraphs that are quotes from "The Offspring" songs.

[15:49] <nine> Anton Antonov:  that's epic :)

[15:50] <El_Che> Anton: as everyone's should!

[16:11] <discord-raku-bot> <Nemokosch> not sure if it's possible to forgive them for that awful Obladi Oblada parody... but anyway, that's not what I wanted to say

[16:11] <discord-raku-bot> <Nemokosch> do we have something like Text::Extract::Word in Perl, or is it up to the new generation?

[16:11] <discord-raku-bot> <Nemokosch> "the new generation" that hopefully won't need much of .doc files but unfortunately I do

[16:15] *** atweedie joined
[16:22] *** razetime left
[16:23] *** razetime joined
[16:51] *** codesections left
[16:51] *** codesections joined
[17:07] *** codesections left
[17:07] *** derpydoo joined
[17:08] *** codesections joined
[17:10] *** derpydoo left
[17:20] *** razetime left
[17:32] *** dakkar left
[17:44] *** codesections left
[17:45] *** codesections joined
[17:50] *** abraxxa left
[17:58] *** derpydoo joined
[18:02] *** mahafyi joined
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:25] *** Guest78 joined
[18:37] *** perlbot left
[18:40] *** perlbot joined
[18:43] *** sena_kun left
[18:43] *** jjido joined
[18:46] *** sena_kun joined
[19:46] *** linkable6 left
[19:46] *** nativecallable6 left
[19:46] *** quotable6 left
[19:46] *** squashable6 left
[19:46] *** notable6 left
[19:46] *** evalable6 left
[19:46] *** shareable6 left
[19:46] *** sourceable6 left
[19:46] *** releasable6 left
[19:46] *** bloatable6 left
[19:46] *** benchable6 left
[19:46] *** unicodable6 left
[19:46] *** bisectable6 left
[19:46] *** coverable6 left
[19:46] *** tellable6 left
[19:46] *** committable6 left
[19:46] *** statisfiable6 left
[19:46] *** greppable6 left
[19:46] *** reportable6 left
[19:46] *** unicodable6 joined
[19:46] *** greppable6 joined
[19:46] *** notable6 joined
[19:46] *** bloatable6 joined
[19:47] *** tellable6 joined
[19:47] *** releasable6 joined
[19:47] *** reportable6 joined
[19:47] *** shareable6 joined
[19:47] *** quotable6 joined
[19:47] *** squashable6 joined
[19:47] *** statisfiable6 joined
[19:48] *** sourceable6 joined
[19:48] *** nativecallable6 joined
[19:48] *** committable6 joined
[19:48] *** bisectable6 joined
[19:48] *** linkable6 joined
[19:48] *** coverable6 joined
[19:49] *** evalable6 joined
[19:49] *** benchable6 joined
[19:54] *** tirnanog joined
[20:06] *** codesections left
[20:08] *** codesections joined
[20:25] *** ToddAndMargo joined
[20:25] *** ToddAndMargo left
[20:25] *** ToddAndMargo joined
[20:31] <ToddAndMargo> I have created a class and  a variable of that class.  I have been using "push" to create an array of that variable.  Problem: all of the lines inside the array (about 20 of them)  are all the last line I pushed into the array,  Am I doing something wrong?   The offending line is 84: "push @Tasks, $TaskLine;"

[20:31] <ToddAndMargo> http://vpaste.net/iI8EM#uploads

[20:33] <lizmat> could you create a gist with line numbers ?

[20:34] <ToddAndMargo> Windows 11; raku -v

[20:34] <ToddAndMargo> Welcome to RakudoΓäó v2022.07.

[20:34] <ToddAndMargo> Implementing the Raku┬« Programming Language v6.d.

[20:34] <ToddAndMargo> Built on MoarVM version 2022.07.

[20:34] <lizmat> looks like you're only creating a single $TaskLine object

[20:35] <lizmat> and updating that in each iteration and pushing that

[20:35] <lizmat> instead of creating a new TaskLine object each iteration

[20:36] <ToddAndMargo> It is that last line repeated over and over

[20:37] <Xliff> ToddAndMargo, under "for $RtnStr.lines[ 3..*-1 ] -> $Line  {"

[20:37] <Xliff> You need a "$TaskLine = TaskLine.new"

[20:38] <Xliff> Rather ... "$TaskLine = TaskLineClass.new"

[20:39] <Xliff> You can turn the "my $TaskLine = TaskLineClass.new" above that into just "my $TaskLine"

[20:39] <ToddAndMargo> I though I was just reusing line 51 "my $TaskLine     = TaskLineClass.new;"

[20:39] <Xliff> Nope.

[20:39] <Xliff> Well... yes. You are.

[20:40] <Xliff> That's why you are getting the repeats.

[20:40] <Xliff> 'You are using the same object. Not a new one.

[20:40] <Xliff> So when you go to print the list in the next loop, they are all the same.

[20:40] <Xliff> It's pretty much as lizmat++ said.

[20:42] <ToddAndMargo> Fixed! Thank you!

[20:43] <ToddAndMargo>    for $RtnStr.lines[ 3..*-1 ] -> $Line  {

[20:43] <ToddAndMargo>       # print "$Line\n";

[20:43] <ToddAndMargo>       my $TaskLine = TaskLineClass.new;

[20:43] <ToddAndMargo>       $TaskLine.ImageName     = $Line.substr(  0..24 ).trim;

[20:43] <ToddAndMargo>       $TaskLine.PID           = $Line.substr( 26..33 ).trim.Int;

[20:43] <ToddAndMargo>       $TaskLine.SessionName   = $Line.substr( 35..50 ).trim;

[20:43] <ToddAndMargo>       $TaskLine.SessionNumber = $Line.substr( 52..62 ).trim.Int;

[20:43] <ToddAndMargo>       $TaskLine.MemUsage      = $Line.substr( 64..75 ).trim;

[20:43] <ToddAndMargo>       push @Tasks, $TaskLine;

[20:43] <Xliff> yw - And try to minimize posting code like that in IRC>

[20:43] <Xliff> I speak from experience! You get yelled at!

[20:44] <Xliff> Particularly if you bother camelia.

[20:44] * Xliff flees

[20:44] <ToddAndMargo> oops!

[20:44] <lizmat> also: if you want to ensure types and values, you'd probably be better of in a TWEAK method doing all of the cleanup

[20:44] <lizmat> *off

[20:50] <ToddAndMargo> Soon as I learned Raku's OOP, I dropped hashes.  OOP is just to powerful and easy to read

[20:50] <Xliff> ToddAndMargo: Yes. However hashes still have their place. ;)

[20:52] *** codesections left
[20:52] *** codesections joined
[20:54] <ToddAndMargo> One of the endearing things I find with Raku is that there are 1001 ways to do everything!

[20:59] *** ToddAndMargo left
[21:00] <Xliff> Is a once {} block guaranteed to run only once per execution?

[21:00] *** codesections left
[21:00] <Xliff> m: sub a { once { say "Boo!" }; say "You" }; a;a;a;a

[21:00] <camelia> rakudo-moar 17062c32f: OUTPUT: «Boo!␤You␤You␤You␤You␤»

[21:01] *** codesections joined
[21:01] <lizmat> once, like state, suffers from a race condition, but other than that: yes

[21:17] *** sena_kun left
[21:18] *** sena_kun joined
[21:26] *** Maylay left
[21:26] *** Maylay joined
[21:30] <Xliff> m: class A { method A { say "A"; }; method a { say "a" }; }; A.a; A.A

[21:30] <camelia> rakudo-moar 17062c32f: OUTPUT: «a␤A␤»

[21:30] <Xliff> Oh god bless Raku for case sensitive method names!

[21:32] *** Maylay left
[21:33] <lizmat> although, you could actually make method lookup case-insensitive if you really wanted  :-)

[21:33] <lizmat> by replacing the ^find_method method in the meta-class  :-)

[21:34] *** Maylay joined
[21:40] <Xliff> lizmat: Yes, I do realize that. I'm good. Thanks! ;)

[21:41] <lizmat> hehe

[21:41] <Xliff> Case sensitivity solves a significant design issue in my code.

[21:41] <Xliff> So I'm happy about it.

[21:42] *** ToddAndMargo joined
[21:42] <ToddAndMargo> Is tehere a sysem variable that will tell me "raku,exe"?  (rakuw,rakudi, etc.)

[21:42] <ToddAndMargo> rakudo

[21:43] <lizmat> m: say $*EXECUTABLE   # ToddAndMargo 

[21:43] <camelia> rakudo-moar 17062c32f: OUTPUT: «"/home/camelia/rakudo-m-inst-1/bin/rakudo-m".IO␤»

[21:45] <ToddAndMargo> >raku -e "say $*EXECUTABLE"

[21:45] <ToddAndMargo> "C:\Program Files\Rakudo\bin\raku.exe".IOaPerfect!  TH

[21:45] <ToddAndMargo> Thank yoU!

[21:49] <Geth> ¦ advent: 80bfebb402 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/artlicles/tbrowder

[21:49] <Geth> ¦ advent: Create tbrowder

[21:49] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/80bfebb402

[21:50] <lizmat> tbrowder++

[21:51] <Geth> ¦ advent: 729a7cd8a4 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/artlicles/tbrowder

[21:51] <Geth> ¦ advent: Delete raku-advent-2022/artlicles directory

[21:51] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/729a7cd8a4

[21:52] <Geth> ¦ advent: e312cf397a | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[21:52] <Geth> ¦ advent: Create tbrowder.md

[21:52] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/e312cf397a

[21:54] <Geth> ¦ advent: c29a13bae7 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[21:54] <Geth> ¦ advent: Update tbrowder.md

[21:54] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/c29a13bae7

[22:21] *** codesections left
[22:23] *** codesections joined
[22:23] *** codesections left
[22:24] *** codesections joined
[22:24] *** codesections left
[22:25] *** codesections joined
[22:28] *** codesections left
[22:28] *** codesections joined
[22:29] *** Xliff left
[22:29] *** jmcgnh left
[22:31] *** ToddAndMargo left
[22:48] *** bigfondue left
[23:03] *** sena_kun left
[23:08] *** epony joined
[23:10] *** jmcgnh joined
[23:11] <Geth> ¦ advent: 29f6698007 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[23:11] <Geth> ¦ advent: Update tbrowder.md

[23:11] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/29f6698007

[23:12] <Geth> ¦ advent: 5e5812e223 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/authors.md

[23:12] <Geth> ¦ advent: Update authors.md

[23:12] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/5e5812e223

[23:15] *** derpydoo left
[23:18] *** codesections left
[23:19] *** codesections joined
[23:22] <Geth> ¦ advent: 693eee6ed4 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[23:22] <Geth> ¦ advent: Update tbrowder.md

[23:22] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/693eee6ed4

[23:25] <Geth> ¦ advent: efe5c7d7b9 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[23:25] <Geth> ¦ advent: Update tbrowder.md

[23:25] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/efe5c7d7b9

[23:34] *** codesections left
[23:35] <Geth> ¦ advent: 01b97af6cc | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[23:35] <Geth> ¦ advent: Update tbrowder.md

[23:35] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/01b97af6cc

[23:35] *** codesections joined
[23:50] <Geth> ¦ advent: tbrowder++ created pull request #97: add draft article

[23:50] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/97

[23:51] <Geth> ¦ advent: 7c86520f0b | (Tom Browder)++ | raku-advent-2022/articles/tbrowder.md

[23:51] <Geth> ¦ advent: add draft article

[23:51] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/7c86520f0b

[23:51] <Geth> ¦ advent: e38b05938b | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2022/articles/tbrowder.md

[23:51] <Geth> ¦ advent: Merge pull request #97 from tbrowder/tbrowder

[23:51] <Geth> ¦ advent: 

[23:51] <Geth> ¦ advent: add draft article

[23:51] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/e38b05938b

[23:53] *** codesections left
[23:54] *** codesections joined
[23:54] *** codesections left
[23:55] *** codesections joined
[23:56] *** codesections left
[23:57] *** codesections joined
[23:57] *** codesections left
