[00:08] *** reportable6 left
[00:11] *** reportable6 joined
[01:11] *** notable6 left
[01:11] *** bisectable6 left
[01:11] *** quotable6 left
[01:11] *** reportable6 left
[01:11] *** benchable6 left
[01:11] *** tellable6 left
[01:11] *** nativecallable6 left
[01:11] *** linkable6 left
[01:11] *** committable6 left
[01:11] *** unicodable6 left
[01:11] *** sourceable6 left
[01:11] *** evalable6 left
[01:11] *** bloatable6 left
[01:11] *** releasable6 left
[01:11] *** coverable6 left
[01:11] *** greppable6 left
[01:11] *** statisfiable6 left
[01:11] *** shareable6 left
[01:11] *** linkable6 joined
[01:11] *** nativecallable6 joined
[01:11] *** evalable6 joined
[01:11] *** quotable6 joined
[01:11] *** bisectable6 joined
[01:12] *** greppable6 joined
[01:12] *** benchable6 joined
[01:12] *** statisfiable6 joined
[01:12] *** tellable6 joined
[01:12] *** notable6 joined
[01:12] *** committable6 joined
[01:13] *** sourceable6 joined
[01:13] *** shareable6 joined
[01:13] *** bloatable6 joined
[01:13] *** unicodable6 joined
[01:13] *** reportable6 joined
[01:13] *** coverable6 joined
[01:14] *** releasable6 joined
[01:20] *** p6steve left
[01:22] *** p6steve joined
[02:04] *** falsifian joined
[02:38] <falsifian> Is there a way to say a function's return type is Array[Int]? I tried sub f(--> Array[Int]) { return [5]; } but when I call f I see "Type check failed for return value; expected Array[Int] but got Array ([5])"

[03:04] *** linkable6 left
[03:04] *** evalable6 left
[03:05] *** evalable6 joined
[03:07] *** linkable6 joined
[03:14] *** [Coke] left
[03:18] <Juerd> falsifian: Array[Int] doesn't mean "any array that only has ints", but it is a type by itself. The [5] is not an Array[Int], but an Array.

[03:20] *** [Coke] joined
[03:20] <Juerd> falsifian: You could declare a variable of type Array[Int] and use that:  my Int @foo = 5; return @foo;

[03:22] <Juerd> falsifian: Or the same thing without a name: return my Int @ = 5;

[03:24] <falsifian> Juerd: Thanks. This distinction between Array and Array[something] is interesting. Is there somewhere I can read more about that? Is Array shorthand for Array[Mu], or something like that?

[03:24] <Juerd> This is the #1 issue I run into with Raku. Typed array are cumbersome to use, and not all that useful. I've suggested an addition to the language that dwims but it didn't get any traction (see https://old.reddit.com/r/rakulang/comments/tspr5a/a_much_more_dwimmy_where_all_type/)

[03:25] <Juerd> falsifian: Array[Mu] is not the same as Array. The type isn't a mere constraint for the values, it is part of the type of the array itself.

[03:25] <Juerd> \\\

[03:25] <Juerd> \\\AAAAAAAAAAAAAAAAAAAAAAAA

[03:25] <Juerd> \\Woops

[03:26] <Juerd> Sorry, almost dropped my laptop but caught it by the keyboard :)

[03:26] <falsifian> phew!

[03:26] <Juerd> Hm, I wonder how I typed A's like that. I had the right side where \ and enter are.

[03:27] <falsifian> Yeah, I see it's not just a constraint. Just trying to understand how to think about it. Like, are Array and Array[] different classes... but I think there are lower-hanging fruit in my journey into Raku-land.

[03:27] <Juerd> Anyway, I think Array[Mu] could maybe behave like Array in every way except not being compatible with it :D

[03:29] <Juerd> Every Array[something] is an Array (Array accepts Array[something], but it doesn't accept any Array except one of the exact same type. 

[03:30] <falsifian> Could I define my own class that behaves like that? I.e. has a generic form and a parameterized form?

[03:31] <falsifian> Or is this unrelated to classes?

[03:31] <Juerd> So you can pass an Array[Int] to f(@foo) but you can't pass an Array to f(Int @foo) except if it's Array[Int] specifically. And since array types are not inferred from values you have to actually have a variable

[03:32] <Juerd> Array is a class you can have such parameterization on your own classes

[03:32] <Juerd> Or maybe role? Hm

[03:36] <Juerd> afk  # bed

[03:36] <falsifian> thx for the tips; 'night

[03:38] <Juerd> https://github.com/rakudo/rakudo/blob/master/src/core.c/Array.pm6#L1453-L1463=

[03:38] <Juerd> Couldn't resist the urge to look it up

[03:40] <Juerd> It's a class (Array) that when parameterized mixes in a parameterized role (Array::Typed[::Tvalue])

[03:40] <Juerd> https://github.com/rakudo/rakudo/blob/master/src/core.c/Array/Typed.pm6

[03:40] <Juerd> Okay, I'm gone for real now :)

[03:40] <Juerd> Ciao

[03:40] <falsifian> 'night for real

[04:20] *** evalable6 left
[04:20] *** linkable6 left
[04:20] *** linkable6 joined
[04:23] *** evalable6 joined
[04:52] *** xinming left
[04:55] *** xinming joined
[05:05] *** xinming left
[05:18] *** xinming joined
[05:25] *** tejr joined
[05:25] *** tejr left
[05:25] *** tejr joined
[05:42] *** xinming left
[05:44] *** xinming joined
[06:03] *** xinming left
[06:03] *** xinming joined
[06:08] *** reportable6 left
[06:08] *** reportable6 joined
[07:08] *** reportable6 left
[07:08] *** benchable6 left
[07:08] *** quotable6 left
[07:08] *** shareable6 left
[07:08] *** releasable6 left
[07:08] *** notable6 left
[07:08] *** unicodable6 left
[07:08] *** sourceable6 left
[07:08] *** nativecallable6 left
[07:08] *** committable6 left
[07:08] *** tellable6 left
[07:08] *** bisectable6 left
[07:08] *** statisfiable6 left
[07:08] *** coverable6 left
[07:08] *** greppable6 left
[07:08] *** bloatable6 left
[07:09] *** benchable6 joined
[07:09] *** tellable6 joined
[07:09] *** committable6 joined
[07:09] *** unicodable6 joined
[07:09] *** sourceable6 joined
[07:09] *** reportable6 joined
[07:09] *** releasable6 joined
[07:09] *** bloatable6 joined
[07:10] *** quotable6 joined
[07:10] *** greppable6 joined
[07:11] *** coverable6 joined
[07:11] *** statisfiable6 joined
[07:11] *** shareable6 joined
[07:11] *** notable6 joined
[07:11] *** nativecallable6 joined
[07:12] *** bisectable6 joined
[08:12] *** evalable6 left
[08:12] *** linkable6 left
[08:12] *** linkable6 joined
[08:14] *** evalable6 joined
[08:38] *** Kaiepi left
[08:42] *** jjido joined
[09:03] *** Kaiepi joined
[09:06] <discord-raku-bot> <Nemokosch#9980> Array typing is quite hellish in Raku indeed

[09:10] *** Sgeo left
[09:13] *** eseyman left
[09:13] *** eseyman joined
[10:06] *** frost left
[10:15] *** jjido left
[10:22] *** jjido joined
[10:49] *** jjido left
[10:49] *** lizmat joined
[10:52] <nine> But how else could it work?

[11:12] <discord-raku-bot> <Nemokosch#9980> I'm not sure if this is an important question, for me at least

[11:12] <discord-raku-bot> <Nemokosch#9980> I'm not in the static typing cult

[11:12] <discord-raku-bot> <Nemokosch#9980> but if you really want an answer

[11:13] <discord-raku-bot> <Nemokosch#9980> 1. array literals should be able to match against specified types for sure

[11:13] <discord-raku-bot> <Nemokosch#9980> 2. @ and % sigils should support specified types, at least as syntax sugar for Array[T] and Hash[T]

[11:13] <discord-raku-bot> <Nemokosch#9980> these are two problems that people always bump into

[11:14] <discord-raku-bot> <Nemokosch#9980> and indeed, I find their expectation to be more valid than the given behavior

[11:14] <lizmat> but: @ does not mean Array, and % does not mean Hash

[11:14] <lizmat> @ means Positional, and % means Associative

[11:14] <lizmat> I think that *that* is the thing you need to grok in Raku

[11:16] <discord-raku-bot> <Nemokosch#9980> I know but it's not justification that the behavior is consistently wrong üòÑ

[11:17] <lizmat> m: my class A is Positional { }; sub foo(@a) { dd }; foo A

[11:17] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´sub foo(@a)‚ê§¬ª

[11:17] <discord-raku-bot> <Nemokosch#9980> I said it should _at least_ work for Arrays and Hashes

[11:17] <discord-raku-bot> <Nemokosch#9980> preferably it should work for all Positionals and all Associatives

[11:17] <discord-raku-bot> <Nemokosch#9980> but now that it consistently works for nothing, I don't feel that's a worthy type of consistency

[11:19] <nine> What do you mean by "does not work"?

[11:20] <discord-raku-bot> <Nemokosch#9980> Unrelated to typing and whateverz, if you asked me about the biggest problems with Raku, I would say 10 occasions out of 10 that it's the useless abstractions of @ and %

[11:20] *** Sankalp left
[11:20] <lizmat> m: sub foo(Array[Int]() $a) { dd $a }; foo (1,2,3)

[11:20] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Array[Int].new(1, 2, 3)‚ê§¬ª

[11:20] <discord-raku-bot> <Nemokosch#9980> that pretty much do harm than good and indeed, you regularly hear it from solid users that they almost always avoid them, or sigils altogether

[11:21] <lizmat> maybe you need to tell it to coerce ?  ^^

[11:21] <discord-raku-bot> <Nemokosch#9980> and give up on using @

[11:22] <discord-raku-bot> <Nemokosch#9980> nine: I don't remember the details but ^this was exactly what I was thinking of

[11:22] <lizmat> well, @ implies Positional

[11:22] *** Sankalp joined
[11:24] <discord-raku-bot> <Nemokosch#9980> that the conclusion of people much more knowledgeable than me was that you just gotta give up on @ if you want your typed array work on literals

[11:24] <discord-raku-bot> <Nemokosch#9980> and there are loads of things you need to give up on, once you decide to use @

[11:24] <discord-raku-bot> <Nemokosch#9980> most of them related to proper variable assignment

[11:24] <discord-raku-bot> <Nemokosch#9980> you cannot properly swap @-sigilled variables

[11:24] <discord-raku-bot> <Nemokosch#9980> you cannot assign value to them when they are topicalized

[11:25] <nine> Do you have some code examples for me? I really have a hard time understanding what the problems with typed arrays are

[11:25] <lizmat> m: sub foo(Array[Int]() $a) { my @b := $a; dd @b }; foo (1,2,3)   # perhaps we need some syntactic sugar for this ?

[11:25] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Array[Int].new(1, 2, 3)‚ê§¬ª

[11:26] <discord-raku-bot> <Nemokosch#9980> No I don't because I don't use them; I've just spent enough time here to notice that others do and god do they often

[11:26] <lizmat> m: sub foo(Array[Int]() $a) { my @b := $a; .say for @b }; foo (1,2,3)

[11:26] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[11:28] <discord-raku-bot> <Nemokosch#9980> anyway, as I said, my fundamental problems are with @ and % sigils and the abstractions for them, and as "the design phase of Raku is over", that cannot be helped I think

[11:28] <discord-raku-bot> <Nemokosch#9980> I remember Lizmat held a presentation about sigils last year, perhaps that's the best kind of help at this point

[11:29] <nine> m: my Int @a = 1, 2, 3; sub foo(@arr) { dd @arr }; foo(@a)

[11:29] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Array[Int @a = Array[Int].new(1, 2, 3)‚ê§¬ª

[11:30] <nine> I guess I just dont get it

[11:30] <gfldex> m: my @a of Int; dd @a; sub foo(@a of Int) { dd @a; }

[11:30] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Cannot resolve caller trait_mod:<of>(Parameter:D, Int:U); none of these signatures matches:‚ê§    (Mu:U $target, Mu:U $type)‚ê§    (Routine:D $target, Mu:U $type)‚ê§at <tmp>:1‚ê§¬ª

[11:31] <gfldex> ^^^ This may be part of the cause of cunfusion.

[11:32] <discord-raku-bot> <Nemokosch#9980> nine: you didn't have to pass a scalar to a function

[11:32] <discord-raku-bot> <Nemokosch#9980> sorry, not scalar

[11:32] <discord-raku-bot> <Nemokosch#9980> literal of course

[11:32] <discord-raku-bot> <Nemokosch#9980> and indeed - why should it behave differently from the array assignment itself?

[11:33] <discord-raku-bot> <Nemokosch#9980> the array assignment could take "the literal", which might not have been a literal idk the implementation

[11:33] <nine> m: sub foo(Int @arr) { dd @arr }; foo([1,2,3])

[11:33] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Type check failed in binding to parameter '@arr'; expected Positional[Int] but got Array ([1, 2, 3])‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:33] <nine> So we are solely talking about something like this ^^^?

[11:34] <discord-raku-bot> <Nemokosch#9980> but then we are back to my personal point that "list assignment" is one of the problems, moreover one of the biggest problems in Raku

[11:34] <discord-raku-bot> <Nemokosch#9980> yes

[11:35] <nine> I think that could be made to work in the Binder. But it would also have a high runtime cost (if used).

[11:36] <discord-raku-bot> <Nemokosch#9980> and then it would nice if hardcoded literals didn't have big runtime overhead

[11:37] <nine> That's possible for assignment, not for passing as argument

[11:38] <discord-raku-bot> <Nemokosch#9980> which makes you wonder about the design ^^

[11:38] <discord-raku-bot> <Nemokosch#9980> anyway, I have to go now, and as I said: I wouldn't say a thing if Raku had no typing whatsoever so I'm not knowledgeable in the problems of it either

[11:38] <discord-raku-bot> <Nemokosch#9980> If you want me to complain, just ask about @, %, list assignment, this stuff

[11:39] <discord-raku-bot> <Nemokosch#9980> oh yeah and != and ne not being proper first-class operators

[11:39] <discord-raku-bot> <Nemokosch#9980> but about that I think half of the people who ever came across it complained

[11:39] <nine> I don't want complaints. I want solutions. My very first question was literally "But how else could it work?"

[11:40] <discord-raku-bot> <Nemokosch#9980> Liz even proposed a change at some point

[11:40] <discord-raku-bot> <Nemokosch#9980> Then sometimes you have to accept that the design itself can be faulty

[11:41] <discord-raku-bot> <Nemokosch#9980> I can tell you how I personally, or people I've come across, expected it to work, and maybe the reasoning behind

[11:42] <discord-raku-bot> <Nemokosch#9980> if that's not feasible, frankly that is neither my/our problem, nor a relieving resolution

[11:42] <discord-raku-bot> <Nemokosch#9980> then really just the complaint remains, which is feedback like anything else

[11:42] <discord-raku-bot> <Nemokosch#9980> I try to give positive feedback quite regularly, too, so I think it's fair

[11:57] <gfldex> m: constant term:<@c> = Array[Int](); @c = 1,2,3; dd @c;

[11:57] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Cannot resolve caller STORE(Array[Int](Any):U: List:D); none of these signatures matches:‚ê§    (Array:D: Iterable:D \iterable, *%_ --> Array:D)‚ê§    (Array:D: QuantHash:D \qh, *%_ --> Array:D)‚ê§    (Array:D: Mu \item, *%_ --> Array:D)‚ê§  in block ‚Ä¶¬ª

[11:58] <gfldex> m: constant term:<@c> = my @ = Array[Int](); @c = 1,2,3; dd @c;

[11:58] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Array @ = [1, 2, 3]‚ê§¬ª

[11:59] <gfldex> Array[Int]() in a signature is kind of an ENODOC.

[12:02] *** xinming left
[12:04] *** xinming joined
[12:07] *** reportable6 left
[12:08] *** reportable6 joined
[12:14] *** eseyman left
[12:32] *** eseyman joined
[12:38] <lizmat> fwiw, I was surprised it appears to work | works

[13:10] *** eseyman left
[13:35] *** eseyman joined
[13:40] *** Oshawott joined
[13:43] *** archenoth left
[13:44] *** lizmat left
[14:44] *** sourceable6 left
[14:44] *** linkable6 left
[14:44] *** bloatable6 left
[14:44] *** releasable6 left
[14:44] *** evalable6 left
[14:44] *** nativecallable6 left
[14:44] *** bisectable6 left
[14:44] *** committable6 left
[14:44] *** coverable6 left
[14:44] *** unicodable6 left
[14:44] *** benchable6 left
[14:44] *** reportable6 left
[14:44] *** greppable6 left
[14:44] *** shareable6 left
[14:44] *** tellable6 left
[14:44] *** quotable6 left
[14:44] *** statisfiable6 left
[14:44] *** notable6 left
[14:45] *** tellable6 joined
[14:45] *** notable6 joined
[14:45] *** committable6 joined
[14:45] *** unicodable6 joined
[14:45] *** sourceable6 joined
[14:45] *** benchable6 joined
[14:45] *** bisectable6 joined
[14:46] *** bloatable6 joined
[14:46] *** coverable6 joined
[14:47] *** greppable6 joined
[14:47] *** linkable6 joined
[14:47] *** quotable6 joined
[14:47] *** releasable6 joined
[14:47] *** reportable6 joined
[14:47] *** nativecallable6 joined
[14:47] *** statisfiable6 joined
[14:47] *** evalable6 joined
[14:47] *** shareable6 joined
[15:37] *** Sankalp- joined
[15:37] *** Sankalp left
[15:37] *** Sankalp- is now known as Sankalp

[15:49] <tbrowder> m: constant \2pi = 2 * pi; say 2pi

[15:49] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> constant‚èè \2pi = 2 * pi; say 2pi‚ê§¬ª

[15:50] <tbrowder> m: constant Real \2pi = 2*pi; say 2pi

[15:50] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> constant Real‚èè \2pi = 2*pi; say 2pi‚ê§¬ª

[15:52] <tbrowder> any way to define a constant with a leading digit?

[16:00] <nine> m: say tau == 2 * pi

[16:00] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´True‚ê§¬ª

[16:00] * nine hides

[16:09] <tbrowder> m: constant _2pi = 2*pi; say  _2pi

[16:09] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´6.283185307179586‚ê§¬ª

[16:09] <tbrowder> that's good enough

[16:11] <tbrowder> at least for now. lizmat: any way to define a constant with a leading digit

[16:17] *** Oshawott left
[16:36] *** kueppo joined
[16:51] *** kueppo left
[17:00] <coleman> I'm going live on Twitch to try and deploy some raku code https://www.twitch.tv/keyvalue

[17:21] * sjn is on twitch now, listening/looking in

[17:21] <coleman> cool, thanks for the audio tip

[17:21] <coleman> i don't stream much

[17:51] *** linkable6 left
[17:51] *** evalable6 left
[17:51] *** evalable6 joined
[17:53] *** linkable6 joined
[18:07] *** reportable6 left
[18:10] *** reportable6 joined
[18:28] <coleman> done for now, sjn thanks for tuning in; And thanks to whoever helped me on reddit https://www.reddit.com/r/rakulang/comments/v19zyw/how_do_you_deploy_your_code_no_docker/

[18:29] <coleman> I didn't try 6pm this time, I just tarred everything up. I'll try 6pm another time. Gotta automate stuff more for now.

[18:40] *** melezhik joined
[18:40] <melezhik> coleman you can try out https://github.com/melezhik/sparrowdo as well if you need to automate VM provisioning

[18:41] <melezhik> or even Sparky for distributed setups - https://github.com/melezhik/sparky#job-api

[18:42] <coleman> melezhik: I was thinking about your project yea

[18:43] <coleman> Would you be willing to host a nightly build of the docs site?

[18:43] <coleman> I have added my own here https://buildkite.com/de-limited/docs-dot-raku-dot-org

[18:44] <coleman> I have a packer file that has the dependencies. They are fairly minimal. I was pleased at how minimal, actually.

[18:44] <coleman> there is nodejs involved, though :)

[18:44] <melezhik> I see ... what kind of help you need?

[18:45] <coleman> I will send you a DM

[18:45] <melezhik> sure

[18:46] <melezhik> I don't have a permanent connection with IRC - so you send me to email as well

[18:46] <coleman> oh that's better. Is that on your github? 

[18:46] <melezhik> yes

[18:46] <coleman> okay, I'll email you :)

[18:46] <melezhik> thanks

[18:48] *** melezhik left
[19:15] *** Sgeo joined
[19:17] *** lichtkind joined
[19:34] *** dmc00 left
[19:36] *** lizmat joined
[19:37] *** jjido joined
[19:39] <lizmat> tbrowder: I guess you could create a constant / variable with a leading digit.  But then you wouldn't be able to use it  :-)

[19:41] <tbrowder> gotcha ‚Ä¶ trying again

[19:42] <tbrowder> m: constant 2pi = ‚Äòfoo‚Äô; say 2pi

[19:42] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> constant‚èè 2pi = ‚Äòfoo‚Äô; say 2pi‚ê§¬ª

[19:43] <tbrowder> m: constant Str 2pi;

[19:43] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> constant Str‚èè 2pi;‚ê§¬ª

[19:43] <tbrowder> ok, i give up, thnx

[19:45] *** lizmat left
[20:02] <ugexe> identifier cant start with a number or have a number after a dash

[20:02] <ugexe> i.e. 2pi and pi-2 are both not valid

[20:03] <ugexe> m: class 2pi { }

[20:03] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse class definition‚ê§at <tmp>:1‚ê§------> class‚èè 2pi { }‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[20:45] *** evalable6 left
[20:45] *** linkable6 left
[20:45] *** evalable6 joined
[20:48] *** linkable6 joined
[21:20] *** Guest78 joined
[21:21] *** discord-raku-bot left
[21:22] *** discord-raku-bot joined
[21:29] <gfldex> m: constant term:<2pi> = 2 * œÄ;

[21:29] <camelia> rakudo-moar 77bc03047: ( no output )

[21:29] <gfldex> tbrowder: ^^^

[21:32] <tbrowder> m: constant term:<2pi> = 2*pi; say <2pi>; say 2pi

[21:32] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´2pi‚ê§6.283185307179586‚ê§¬ª

[21:33] <tbrowder> m: constant term:<2pi>=pi*2; say 2*2pi

[21:33] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´12.566370614359172‚ê§¬ª

[21:35] <tbrowder> gfldex: very VERY cool, thanks a heap‚Äîhow good is our sweet raku!!

[21:44] *** lichtkind left
[21:51] *** Guest78 left
[22:01] *** clarjon_1 left
[22:01] *** jrjsmrtn left
[22:15] <tbrowder> the above works, but i need it to work as input to a sub‚Ä¶

[22:18] <tbrowder> m: sub f($a) { say $a }; constant term<2pi> = 2*pi; f 2pi

[22:18] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> sub f($a) { say $a }; constant term‚èè<2pi> = 2*pi; f 2pi‚ê§¬ª

[22:18] <tbrowder> forgot colon

[22:20] <tbrowder> m: constant term:<2pi> = 2*pi; sub f($a) { say $a}; f 2pi; f(2pi)

[22:20] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´6.283185307179586‚ê§6.283185307179586‚ê§¬ª

[22:22] <tbrowder> ok, that seems to work..

[22:47] <tbrowder> but it doesn‚Äôt on my laptop :-(

[22:48] <tbrowder> is camelia bleeding edge raku?

[22:48] <tbrowder> m: say $*VERSION

[22:48] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Dynamic variable $*VERSION not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:48] <tbrowder> m: say $*VER

[22:48] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Dynamic variable $*VER not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:51] <tbrowder> m: say $*RAKU

[22:51] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´Raku (6.d)‚ê§¬ª

[22:52] <tbrowder> m: -v

[22:52] <camelia> rakudo-moar 77bc03047: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    v used at line 1‚ê§‚ê§¬ª

[23:01] *** linkable6 left
[23:01] *** evalable6 left
[23:03] *** linkable6 joined
[23:03] *** evalable6 joined
[23:11] *** jjido left
