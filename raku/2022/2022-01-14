[00:00] <elcaro> nvm... found a work around... bind the Proxy to `OUR::{'$varname'}`

[00:06] *** reportable6 left
[00:08] *** reportable6 joined
[01:08] *** benchable6 left
[01:08] *** linkable6 left
[01:08] *** notable6 left
[01:08] *** sourceable6 left
[01:08] *** squashable6 left
[01:08] *** greppable6 left
[01:08] *** reportable6 left
[01:08] *** quotable6 left
[01:08] *** nativecallable6 left
[01:08] *** statisfiable6 left
[01:08] *** unicodable6 left
[01:08] *** committable6 left
[01:08] *** coverable6 left
[01:08] *** bloatable6 left
[01:08] *** bisectable6 left
[01:08] *** evalable6 left
[01:08] *** tellable6 left
[01:08] *** releasable6 left
[01:08] *** shareable6 left
[01:08] *** sourceable6 joined
[01:08] *** quotable6 joined
[01:09] *** tellable6 joined
[01:09] *** squashable6 joined
[01:09] *** greppable6 joined
[01:09] *** unicodable6 joined
[01:10] *** notable6 joined
[01:11] *** statisfiable6 joined
[01:11] *** reportable6 joined
[01:11] *** bloatable6 joined
[01:11] *** bisectable6 joined
[01:13] *** rir_ joined
[01:15] *** rir_ left
[01:45] *** frost joined
[02:01] <elcaro> I can dynamically define a module sub like so `OUR::{"&$name"} := sub { ... }`, but can I define multi sub's?

[02:08] *** committable6 joined
[02:10] *** nativecallable6 joined
[02:10] *** coverable6 joined
[02:10] *** releasable6 joined
[02:36] *** frost left
[02:49] *** frost joined
[03:08] *** discord-raku-bot left
[03:08] *** discord-raku-bot joined
[03:10] *** benchable6 joined
[03:41] *** frost left
[04:09] *** frost joined
[04:11] *** shareable6 joined
[04:18] *** frost left
[04:42] *** mtj left
[04:43] *** mtj joined
[04:56] *** euandreh left
[05:56] *** greppable6 left
[05:56] *** coverable6 left
[05:56] *** notable6 left
[05:56] *** nativecallable6 left
[05:56] *** statisfiable6 left
[05:56] *** quotable6 left
[05:56] *** sourceable6 left
[05:56] *** bloatable6 left
[05:56] *** squashable6 left
[05:56] *** bisectable6 left
[05:56] *** reportable6 left
[05:56] *** tellable6 left
[05:56] *** unicodable6 left
[05:56] *** releasable6 left
[05:56] *** committable6 left
[05:56] *** benchable6 left
[05:56] *** shareable6 left
[05:57] *** shareable6 joined
[05:57] *** reportable6 joined
[05:57] *** bloatable6 joined
[05:57] *** coverable6 joined
[05:59] *** benchable6 joined
[05:59] *** nativecallable6 joined
[05:59] *** sourceable6 joined
[05:59] *** quotable6 joined
[06:07] *** reportable6 left
[06:09] *** reportable6 joined
[06:23] <samebchase> Hi, I need some assistance with Red. I've described the problem here: https://github.com/FCO/Red/issues/543

[06:24] <moon-child> SmokeMachine: 

[06:33] *** razetime joined
[06:33] *** razetime left
[06:57] *** committable6 joined
[06:58] *** squashable6 joined
[06:58] *** releasable6 joined
[06:59] *** greppable6 joined
[06:59] *** tellable6 joined
[07:09] *** linkable6 joined
[07:11] *** jjido joined
[07:33] *** razetime joined
[07:41] *** abraxxa joined
[07:41] *** abraxxa left
[07:42] *** abraxxa joined
[07:46] *** abraxxa left
[07:47] *** abraxxa joined
[07:58] *** statisfiable6 joined
[08:05] *** jjido left
[08:11] *** evalable6 joined
[08:11] *** jjido joined
[08:14] *** frost joined
[08:15] *** razetime left
[08:19] *** frost left
[08:19] *** moon-child left
[08:19] *** moon-child joined
[08:25] *** frost joined
[08:34] *** Sgeo_ left
[08:56] *** hasrthur joined
[08:59] *** bisectable6 joined
[09:34] *** lichtkind_ joined
[09:43] *** jjido left
[09:56] *** notable6 joined
[10:05] *** linkable6 left
[10:17] *** Oshawott joined
[10:17] *** razetime joined
[10:18] *** archenoth left
[10:58] *** linkable6 joined
[10:59] *** unicodable6 joined
[11:14] <tbrowder> wish i could help, but i have my own problems this morning  :-(

[11:15] * lizmat wishes tbrowder strength

[11:16] <tbrowder> thnx, i'm getting a weird error about Mu while iterating over an array.

[11:20] <tbrowder> the algo is like this: while @a.elems { say @a.tail.value // ''; @a.pop}

[11:21] <tbrowder> at some point i get this error which i will show in a minute (i forgot to note it)....

[11:22] <tbrowder> "No such method 'value' for invocant of type Mu"

[11:23] *** jjido joined
[11:24] <tbrowder> i think i need to put a test higher up...gotta run. but does anyone know if Larry or Damian will be in Houston?

[11:47] <lizmat> say @a.pop.value // "" while @a.elems

[11:47] <lizmat> pop returns the last value... so no need to do a .tail

[12:04] <tbrowder> ok, thnx

[12:07] *** reportable6 left
[12:10] *** razetime left
[12:10] *** reportable6 joined
[12:20] *** lichtkind__ joined
[12:21] *** Altai-man joined
[12:22] *** lichtkind_ left
[13:13] *** lichtkind__ left
[13:14] *** lichtkind joined
[13:47] *** abraxxa left
[14:03] *** Altai-man left
[14:07] *** ecocode left
[14:08] *** Altai-man joined
[14:12] *** ecocode joined
[14:52] *** frost left
[15:07] *** ecocode left
[15:12] *** ecocode joined
[15:22] *** frost joined
[15:36] *** Sgeo joined
[15:46] *** euandreh joined
[16:00] *** demostanis[m] left
[16:01] *** Kaipi left
[16:01] *** Kaipi joined
[16:22] *** frost left
[16:37] *** wingfold joined
[16:47] *** wingfold_ joined
[16:49] *** wingfold_ left
[16:50] *** wingfold left
[16:53] *** wingfold joined
[17:03] <samebchase> Hi, I have a Red model, in which a column is of the Json type, and can be null in some situations. When I fetch the rows, I get the "Use of uninitialized value element of type Any in string context." message printed on the console, seems to be coming from https://github.com/FCO/Red/blob/master/lib/Red/Type/Json.pm6#L5 where from-json is called on

[17:03] <samebchase> the Nil value.

[17:03] <samebchase> What can I do here, to prevent this from being printed. I'm trying various default values, but no luck so far.

[17:04] <lizmat> I have no idea, perhaps try the #red channel?

[17:05] <samebchase> wow, didn't know

[17:05] <samebchase> joining it

[17:07] *** Skarsnik left
[17:07] *** Skarsnik joined
[17:15] <tonyo> fez has had more than 40k downloads

[17:16] <lizmat> wow

[17:25] *** TempIRCLogger left
[17:25] *** TempIRCLogger joined
[17:25] <japhb> Nice!

[17:26] *** TempIRCLogger left
[17:26] *** TempIRCLogger joined
[17:26] *** TempIRCLogger left
[17:26] *** TempIRCLogger joined
[17:28] <patrickb> tonyo: Is that # of modules downloaded from the fez eco, or # of downloads of fez itself?

[17:29] <tonyo> from the fez eco

[17:29] <patrickb> k

[17:41] *** Altai-man left
[17:43] *** discord-raku-bot left
[17:43] *** discord-raku-bot joined
[17:45] *** djerius left
[17:47] *** djerius joined
[17:55] *** djerius left
[17:57] *** djerius joined
[18:05] *** jjido left
[18:06] *** wingfold left
[18:06] *** reportable6 left
[18:40] <patrickb> c: my %h = a => [1,2]; my @b = %h<a>; dd @b;

[18:40] <committable6> patrickb, ¦my: «Cannot find this revision (did you mean “nom”?)»

[18:40] <patrickb> m: my %h = a => [1,2]; my @b = %h<a>; dd @b;

[18:40] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [[1, 2],]␤»

[18:42] <patrickb> How is this mechanic called? (Arrays coming out of hashes need to be slipped to be iterated or assigned.)

[18:43] <patrickb> Is that documented? I've been unable to find any hint about this in the docs.

[18:47] <ugexe> its the same as my @a = $[1,2]; my @b = @a;

[18:49] <ugexe> dunno about the vernacular though

[18:50] <patrickb> m: my @a = 1, 2; my %h = a => @a; my @b = %h<a>; dd @b;

[18:50] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [[1, 2],]␤»

[18:53] <patrickb> I'm unsure which bit of information I need to remember to not be confused the next time I want to iterate a list I've pulled out of a Hash.

[18:55] <tonyo> i just think of it as `my @x = ` always surrounds its args with []..

[18:55] <tonyo> m: my @a = 1,2,3; dd @a;

[18:55] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @a = [1, 2, 3]␤»

[18:55] <patrickb> m: my @a = 1,2; my %h = :@a; say $_ for %h<a>;

[18:55] <camelia> rakudo-moar 7dc3add84: OUTPUT: «[1 2]␤»

[18:55] <patrickb> my @a = 1,2; say $_ for @a;

[18:55] <evalable6> patrickb, rakudo-moar 7dc3add84: OUTPUT: «1␤2␤»

[18:56] <lizmat> the list in the hash is itemized, and that's why it won't iterate

[18:56] <lizmat> m: my %h = a => [1,2]; my @b = %h<a><>; dd @b

[18:56] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [1, 2]␤»

[18:57] <lizmat> m: my %h = a => [1,2]; my @b = @%h<a>; dd @b

[18:57] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [Failure.new(exception => X::AdHoc.new(payload => "Type List does not support associative indexing."), backtrace => Backtrace.new)]␤»

[18:57] <lizmat> m: my %h = a => [1,2]; my @b = @(%h<a>); dd @b

[18:57] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [1, 2]␤»

[18:58] <patrickb> So the basic rule to remember is that I always have to put a "|" before a hash access if I want to get the list/array out the same as I put it in.

[18:58] <patrickb> Is that a good rule to remember? Or is the actual thing to be aware of something else?

[18:59] * patrickb tries to grasp the deeper concept.

[19:00] <ugexe> if you don't care about copying just using binding

[19:00] <ugexe> m: my %h = a => [1,2]; my @b := %h<a>; dd @b;

[19:00] <camelia> rakudo-moar 7dc3add84: OUTPUT: «[1, 2]␤»

[19:04] *** thundergnat joined
[19:05] <thundergnat> m: sub plural ($x, $n) { $x ~ ($n - 1 ?? 's' !! '') }; say "$_ { plural 'dog', $_ }" for ^3;

[19:05] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤0 dogs␤1 dog␤2 dogs␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<->' (line 1)␤»

[19:06] <thundergnat> ?? There's no dead code there.

[19:06] <thundergnat> bisectable: old=2021.10 new=HEAD sub plural ($x, $n) { $x ~ ($n - 1 ?? 's' !! '') }; say "$_ { plural 'dog', $_ }" for ^3;

[19:06] <bisectable6> thundergnat, Bisecting by output (old=2021.10 new=7dc3add) because on both starting points the exit code is 0

[19:06] <bisectable6> thundergnat, bisect log: https://gist.github.com/344e42bec8bed2259de7b78852b29973

[19:06] <bisectable6> thundergnat, (2021-12-16) https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1

[19:06] <ugexe> well it did qualify it with "potential"

[19:07] <patrickb> ugexe, tonyo, lizmat: Thanks for your explanations and examples. Let's see how long I'll remember this.

[19:07] <thundergnat> Hmm. I think that code needs a little more tweaking. 

[19:08] <lizmat> hmmm... I wonder if it would make sense to make a SlippyHash module, that would automatically turn any List into a Slip, and every hash into a Slip of Pairs

[19:08] <tonyo> thundergnat: it looks ilke that's being interpreted as `sub plural ($x, $n) { $x ~ ($n - (1 ?? 's' !! '')) }`

[19:08] <thundergnat> It now warns for anything that treats an integer like a boolean.

[19:08] <lizmat> thundergnat: how about $x ~ ('s' if $n != 1) 

[19:08] <tonyo> but it's working correctly ^

[19:09] *** reportable6 joined
[19:09] <thundergnat> m: say 3 % 1 ?? 'odd' !! 'even'

[19:09] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤even␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»

[19:09] <lizmat> mL sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m dog

[19:09] <thundergnat> That broke about 15 - 20 scripts I have out in the wild.

[19:09] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m dog

[19:09] <camelia> rakudo-moar 7dc3add84: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    dog used at line 1. Did you mean 'log'?␤␤»

[19:09] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m 'dog'

[19:09] <camelia> rakudo-moar 7dc3add84: OUTPUT: «dog␤»

[19:10] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m 'dog',2

[19:10] <camelia> rakudo-moar 7dc3add84: OUTPUT: «dogs␤»

[19:10] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m 'dog',0

[19:10] <camelia> rakudo-moar 7dc3add84: OUTPUT: «dogs␤»

[19:10] <thundergnat> The problem is with the bogus warning on ternaries.

[19:10] <thundergnat> m: say 3 % 1 ?? 'odd' !! 'even'

[19:10] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤even␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»

[19:11] <thundergnat> There is no dead code there. ^^

[19:11] <thundergnat> And that worked without warnings until https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1

[19:11] <lizmat> m: say # % 1

[19:11] <camelia> rakudo-moar 7dc3add84: OUTPUT: «===SORRY!===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> say⏏ # % 1␤Other potential difficulties:␤    Unsupported use of bare "say".  In Raku please use: .say if you meant␤    to call it as a method on $_, or …»

[19:11] <lizmat> m: say 3 % 1

[19:11] <camelia> rakudo-moar 7dc3add84: OUTPUT: «0␤»

[19:12] <thundergnat> Its the ternary

[19:12] <lizmat> thundergnat: please make an issue for it...  so that we can revert before 2022.01

[19:16] <Voldenet> m: my $rows = 2; my $columns = 5; my $vertical = True; say(10 % $vertical ?? $columns !! $rows)

[19:16] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤2␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»

[19:16] <Voldenet> there could be uses for this warning

[19:17] <Voldenet> m: say (3 % 1) ?? 'odd' !! 'even'

[19:17] <camelia> rakudo-moar 7dc3add84: OUTPUT: «even␤»

[19:20] <ugexe> code is either dead or its not

[19:21] <lizmat> .oO( only when you look at it :-)

[19:23] <Voldenet> well, the original case from the commit `"a = " ~ $a ?? "true" !! "false"` is certainly not containing any dead code

[19:26] <Voldenet> m: class Uh { }; multi infix:<~>(Str $a, Uh $b){  };my $a = Uh.new; say "a = " ~ $a  ?? "true" !! "false"

[19:26] <camelia> rakudo-moar 7dc3add84: OUTPUT: «false␤»

[19:28] <Voldenet> m: class Uh { }; multi infix:<~>(Str $a, Uh $b){  }; my $a = "ok"; say "a = " ~ $a  ?? "true" !! "false"

[19:28] <camelia> rakudo-moar 7dc3add84: OUTPUT: «true␤»

[19:28] <Voldenet> …i'm quite sure this fix doesn't work as expected

[19:34] <moon-child> m: my $a = "ok"; say "a = " ~ ($a ?? "true" !! "false")

[19:34] <camelia> rakudo-moar 7dc3add84: OUTPUT: «a = true␤»

[19:34] <moon-child> it parenthesizes as ("a = " ~ $a) ?? "true" !! "false"

[19:34] <moon-child> I think master has a warning for that

[19:34] *** tinita_ is now known as tinita

[19:35] <moon-child> oh, you know about that.  I need to read more than 1 line of scrollback

[19:35] <moon-child> sorry

[19:40] <thundergnat> m: say 3 %% 2 ?? 'even' !! 'odd'

[19:40] <camelia> rakudo-moar 7dc3add84: OUTPUT: «odd␤»

[19:40] <thundergnat> m: say 3 % 2 ?? 'odd' !! 'even'

[19:40] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤odd␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»

[19:41] <thundergnat> It only seems to warn about expressions that aren't explicitly a boolean

[19:42] <thundergnat> issue filed: https://github.com/rakudo/rakudo/issues/4719

[19:42] <MasterDuke> yes, that's what this conditional is trying to do https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1#diff-825a09f6993c1c5393a98e85d638a3e21cf40b650b44af0592519fdcaa296f32R1523

[19:43] <MasterDuke> if anyone has an idea for how to tighten it up i'm all ears

[19:45] <thundergnat> MasterDuke: I'm not against the warning in principle, but it kind of spoils some DWIMery I tend to lean on. See the Issue I filed for links to multiple script in the wild this affects. 

[19:47] <MasterDuke> well, it also exposes a *completely* unrelated bug, so it's at least likely to get reverted before the next release

[19:47] <MasterDuke> m: my $v = 3; my $sign = $v +> 31 ?? -1 !! 1; say $sign

[19:47] <camelia> rakudo-moar 7dc3add84: OUTPUT: «(signal SEGV)»

[19:48] <MasterDuke> happens in the optimizer in the code i added, but the fault lies somewhere else

[19:49] <Voldenet> m: my $a = 2.rand.Int; say "a = " ~ $a ?? "true" !! "false";

[19:49] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤true␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<~>' (line 1)␤»

[19:50] <Voldenet> i think it only makes sense to warn in case: Str ~ Str ?? … !! …

[19:51] <Voldenet> or even Str ~ … ?? … !! …

[19:52] <MasterDuke> it isn't a property of the operands, but the operator

[19:52] <MasterDuke> m: my $a = 2.pick; say 1 ~ $a ?? "odd" !! "even"

[19:52] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤odd␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<~>' (line 1)␤»

[19:53] <thundergnat> Voldenet: opinions differ. https://rosettacode.org/wiki/I_before_E_except_after_C#Raku  <-- This was written by TimToady more than 7 years ago and now warns 

[19:55] <MasterDuke> where's the warning (i thought it would be the last line, but it isn't)

[19:56] <Voldenet> If that's the property of the operator then ~ can always warn

[19:59] <thundergnat> MasterDuke: Argh. It is the last line, but the version I was looking at uses string concatenation rather than the comma separated list. So that one isn't in the wild. Red herring.

[20:07] *** thundergnat left
[20:22] *** discord-raku-bot left
[20:22] *** discord-raku-bot joined
[20:24] <discord-raku-bot> <Anton Antonov#7232> Is the #red channel I have reachable with Discord?

[20:28] <lizmat> gfldex might know

[20:32] <discord-raku-bot> <Anton Antonov#7232> @lizmat Thanks!

[21:11] *** xinming joined
[21:22] *** euandreh left
[21:42] *** hasrthur left
[22:00] *** notna joined
[22:03] *** Tirifto left
[22:10] *** euandreh joined
[22:21] *** jjido joined
[22:42] <Geth> ¦ doc: codesections++ created pull request #4015: Expand qq docs re esc sequences

[22:42] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4015

[22:43] *** Xliff left
[23:01] *** jjido left
[23:21] *** notna left
[23:38] *** djerius left
[23:39] *** djerius joined
[23:43] *** hasrthur joined
[23:49] *** hasrthur left
