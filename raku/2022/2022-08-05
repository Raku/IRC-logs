[00:03] *** Kaiepi left
[00:07] *** reportable6 left
[00:08] *** Sgeo joined
[00:09] *** reportable6 joined
[00:41] *** pamplemousse joined
[00:45] *** pamplemousse left
[00:51] <Xliff> Can I reset the current position in a regex?

[00:51] <Xliff> Or a grammar?

[01:23] <leont> What do you mean with reset?

[01:25] <Xliff> I want to set the regex current position back a few characters after a specific match

[01:27] <leont> I think the answer is yes, but I forgot the details

[01:31] <leont> I think it involves adding a method that returns a Match whose position is where you want to be, and then calling that as a rule

[01:31] <leont> But I probably got some detail wrong there

[01:32] <leont> Someone has written a blogpost about this, but I can't find it back

[01:37] <leont> It may have been https://www.codesections.com/blog/regex-deep-dive-and-trait/

[01:45] *** perlbot left
[01:46] *** simcop2387 left
[01:46] *** simcop2387 joined
[01:49] *** perlbot joined
[01:50] *** Xliff left
[02:09] *** frost joined
[02:51] *** Xliff joined
[02:57] *** Xliff left
[03:01] *** nort joined
[03:42] *** [Coke] left
[03:52] *** [Coke] joined
[04:16] *** samebchase joined
[05:16] *** unicodable6 left
[05:16] *** coverable6 left
[05:16] *** reportable6 left
[05:16] *** bisectable6 left
[05:16] *** sourceable6 left
[05:16] *** committable6 left
[05:16] *** notable6 left
[05:16] *** quotable6 left
[05:16] *** linkable6 left
[05:16] *** releasable6 left
[05:16] *** bloatable6 left
[05:16] *** statisfiable6 left
[05:16] *** greppable6 left
[05:16] *** tellable6 left
[05:16] *** nativecallable6 left
[05:16] *** evalable6 left
[05:16] *** squashable6 left
[05:16] *** shareable6 left
[05:16] *** benchable6 left
[05:17] *** coverable6 joined
[05:17] *** squashable6 joined
[05:17] *** bisectable6 joined
[05:17] *** unicodable6 joined
[05:17] *** shareable6 joined
[05:17] *** notable6 joined
[05:17] *** reportable6 joined
[05:18] *** evalable6 joined
[05:18] *** statisfiable6 joined
[05:18] *** tellable6 joined
[05:18] *** sourceable6 joined
[05:18] *** committable6 joined
[05:18] *** linkable6 joined
[05:18] *** quotable6 joined
[05:19] *** releasable6 joined
[05:19] *** benchable6 joined
[05:19] *** greppable6 joined
[05:19] *** nativecallable6 joined
[05:19] *** bloatable6 joined
[05:35] *** Kaiepi joined
[05:41] *** jmcgnh left
[05:52] *** jmcgnh joined
[06:07] *** deoac left
[06:08] *** reportable6 left
[06:10] *** Sgeo left
[06:11] *** reportable6 joined
[07:11] *** linkable6 left
[07:11] *** unicodable6 left
[07:11] *** evalable6 left
[07:11] *** coverable6 left
[07:11] *** nativecallable6 left
[07:11] *** bloatable6 left
[07:11] *** squashable6 left
[07:11] *** bisectable6 left
[07:11] *** committable6 left
[07:11] *** releasable6 left
[07:11] *** greppable6 left
[07:11] *** quotable6 left
[07:11] *** notable6 left
[07:11] *** statisfiable6 left
[07:11] *** tellable6 left
[07:11] *** sourceable6 left
[07:11] *** benchable6 left
[07:11] *** reportable6 left
[07:11] *** shareable6 left
[07:11] *** notable6 joined
[07:11] *** unicodable6 joined
[07:11] *** quotable6 joined
[07:11] *** committable6 joined
[07:11] *** statisfiable6 joined
[07:11] *** nativecallable6 joined
[07:11] *** benchable6 joined
[07:12] *** bisectable6 joined
[07:12] *** coverable6 joined
[07:12] *** greppable6 joined
[07:13] *** reportable6 joined
[07:13] *** linkable6 joined
[07:13] *** shareable6 joined
[07:13] *** sourceable6 joined
[07:13] *** tellable6 joined
[07:13] *** evalable6 joined
[07:13] *** releasable6 joined
[07:13] *** squashable6 joined
[07:14] *** bloatable6 joined
[07:49] <discord-raku-bot> <Nemokosch> Haven't seen codesections around for a while

[07:49] <discord-raku-bot> <Nemokosch> do you know anything about him?

[08:06] *** moon joined
[09:06] *** notable6 left
[09:06] *** statisfiable6 left
[09:06] *** committable6 left
[09:06] *** releasable6 left
[09:06] *** tellable6 left
[09:06] *** squashable6 left
[09:06] *** evalable6 left
[09:06] *** unicodable6 left
[09:06] *** linkable6 left
[09:06] *** greppable6 left
[09:06] *** coverable6 left
[09:06] *** sourceable6 left
[09:06] *** quotable6 left
[09:06] *** bisectable6 left
[09:06] *** nativecallable6 left
[09:06] *** benchable6 left
[09:06] *** shareable6 left
[09:06] *** bloatable6 left
[09:06] *** reportable6 left
[09:07] *** quotable6 joined
[09:07] *** benchable6 joined
[09:07] *** tellable6 joined
[09:07] *** releasable6 joined
[09:07] *** shareable6 joined
[09:07] *** statisfiable6 joined
[09:07] *** bisectable6 joined
[09:07] *** squashable6 joined
[09:07] *** sourceable6 joined
[09:08] *** committable6 joined
[09:08] *** unicodable6 joined
[09:08] *** evalable6 joined
[09:08] *** lichtkind joined
[09:08] *** coverable6 joined
[09:08] *** reportable6 joined
[09:08] *** notable6 joined
[09:09] *** linkable6 joined
[09:09] *** nativecallable6 joined
[09:09] *** bloatable6 joined
[09:09] *** greppable6 joined
[09:45] *** [Coke] left
[09:51] *** moon left
[10:30] *** [Coke] joined
[10:40] <lizmat> weekly: https://conf.raku.org/2022/schedule

[10:40] <notable6> lizmat, Noted! (weekly)

[10:47] <discord-raku-bot> <Nemokosch> ü•Å

[11:16] <leont> For some reason ¬´my sub signal(int32 $signal, long $func) is native { * }¬ª doesn't work on Windows. I'm pretty sure windows has a signal function even if it's only half functional.

[11:18] <leont> Do I have to use an explicit library for functions from the Universal C Runtime? That would be counter-intuitive.

[11:20] *** squashable6 left
[11:21] *** squashable6 joined
[11:33] <lizmat> leont: how does Perl handle signal on Windows ?

[11:38] <leont> Though the signal function. I've seen it used. I've seen it documented (https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/signal?view=msvc-170). I don't get what I'm doing wrong.

[11:43] *** squashable6 left
[11:45] *** squashable6 joined
[12:05] *** reportable6 left
[12:08] *** reportable6 joined
[12:26] *** Kaiepi left
[12:31] *** frost left
[12:45] *** andm joined
[12:52] *** Altai-man joined
[13:12] *** Altai-man left
[13:18] *** Altai-man joined
[13:31] <[Coke]> (Terminal spinners) so today I tried again, basically the same code, but with stdout bufferring disabled (which I had it disabled at some point in previous testing), and it seems to JFW.

[13:32] * [Coke] realizes that "WJF" is a friendly anagram of "JFW"

[13:41] *** Kaiepi joined
[13:55] *** andm left
[14:17] *** Guest4721 joined
[14:18] *** Guest4721 left
[14:23] *** lichtkind left
[14:56] * [Coke] ends up with a progress bar that he can define chunks of percentages for, and either mark each chunk as done, or set its size and add a count of elements towards that size. so now he has a setup chunk, the main processing chunk, and a finalize chunk, where the middle one has more fine grained control. whee.

[14:56] <[Coke]> the intermediate info being stored in a simple AoA, but all hidden behind the class so no one has to see me cheating.

[14:59] <discord-raku-bot> <Nemokosch> PR when?

[15:00] <[Coke]> Is that to me? I'm not going to submit this against Terminal::Spinners - right now it's a wrapper, though I could make it standalone - but also, I developed it on work time for a work project.

[15:05] <discord-raku-bot> <Nemokosch> I don't see how that should hold you back tbh

[15:13] *** Kaiepi left
[15:13] *** Kaiepi joined
[15:40] *** euandreh joined
[15:49] <[Coke]> Don't want to violate my employment contract.

[15:50] <[Coke]> For many folks, if you develop something on work time, without special arrangement, it's the intellectual property of the company. If you then release that software without consent or attribution, you can face legal consequences and/or job termination.

[15:50] <[Coke]> If this were a big thing, I'd have thought if I wanted it to be OSS before starting and clearing it with legal, or maybe specifically working on this small part off hours.

[15:50] <[Coke]> this is small enough that it's just not worth it.

[15:53] <[Coke]> (conversely: it's also small enough that: would my employer care? probably not. I don't care to find out the hard way)

[15:55] <discord-raku-bot> <Nemokosch> flexible working time be like

[15:56] <[Coke]> Yup, could probably argue it.

[16:33] *** mexen joined
[16:57] <[Coke]> I have a nested data structure. if one of the points is already a Hash, I can call .push: <some other hash> and it incorporates the hash key/values at the right spot. if the original hash doesn't exist yet and I .push, it autovivifies as an array instead. Is there a one liner to force the .push to autoviv a hash in that case, or do I need to (as I am now) explicitly viv the hash first?

[17:11] <gfldex> [Coke]: did you try a SemiList to be precise about them multi-dim-key? (If I got what you want to do.)

[17:14] *** MasterDuke left
[17:14] <Voldenet> m: my %h; %h<y>.push({a => 2, b => 3, c => 4}); say %h

[17:14] <camelia> rakudo-moar dc180bd95: OUTPUT: ¬´{y => [{a => 2, b => 3, c => 4}]}‚ê§¬ª

[17:15] <Voldenet> m: my %h; (%h<y> //= {}).push({a => 2, b => 3, c => 4}); say %h

[17:15] <camelia> rakudo-moar dc180bd95: OUTPUT: ¬´{y => {a => 2, b => 3, c => 4}}‚ê§¬ª

[17:15] <Voldenet> [Coke]: ^

[17:15] <discord-raku-bot> <Nahita> IIUC (probably not) `@arr[$pos] .= Hash.push: %g;` is my attempt. `@arr[$pos]` could become `%h{$key}`

[17:17] <Voldenet> .Hash wil generate new hash every time

[17:17] <Voldenet> ‚Ä¶I think

[17:18] <Voldenet> m: my @d; @d[0].Hash.push({a => 2, b => 3, c => 4}); say @d;

[17:18] <camelia> rakudo-moar dc180bd95: OUTPUT: ¬´[]‚ê§¬ª

[17:19] <Voldenet> m: my @d; (@d[0].=Hash).push({a => 2, b => 3, c => 4}); say @d;

[17:19] <camelia> rakudo-moar dc180bd95: OUTPUT: ¬´[{a => 2, b => 3, c => 4}]‚ê§¬ª

[17:19] <Voldenet> works

[17:20] <discord-raku-bot> <Nahita> for `%h`, i get `Hash|140736539238528` when `.WHICH`'ing itself and `.Hash` of it; that means no new hash or does it?

[17:22] <discord-raku-bot> <Nahita> ok, i tested with `=:=` to get True

[17:22] <Voldenet> .Hash only is simply coercing invocant to hash

[17:22] <Voldenet> s/only/

[17:22] <Voldenet> /

[17:24] <leont> Apparently, NativeCall doesn't check if symbols exist until you call them, this is making life more difficult than I had expected

[17:25] <[Coke]> I can't golf this, but I have a loop {}; if an array is empty, I last out of the loop. at the end of the array, I am setting the array to the remaining list of work. With debug output, I am seeing that I set the array to [], zero elements. repeat the loop. somehow this array now has a single Any, in it. wtf.

[17:27] <[Coke]> aha. Just had to explain it here to see the truth. all set. :P

[17:27] <[Coke]> (the truth: that loop {} was in a for loop; first time through worked fine, second time through had the weird data, not the first.)

[17:55] *** Altai-man left
[18:07] *** reportable6 left
[18:08] *** reportable6 joined
[18:27] <[Coke]>  MoarVM oops: MVM_str_hash_fetch_nocheck called with a hashtable pointer that turned stale

[18:28] <[Coke]> reran the program, no error

[18:44] *** TieUpYourCamel left
[18:57] *** TieUpYourCamel joined
[18:59] *** Kaipei joined
[19:02] *** Kaiepi left
[19:16] <lizmat> [Coke]: that indicates multi-thread access to a hash to me

[19:16] <lizmat> while (at least) one of them is making changes

[19:47] <jdv> thats mr clark territorry, no?

[19:49] <lizmat> yeah, Nicholas has done a lot of work in that area

[20:02] *** Xliff joined
[20:12] *** rypervenche left
[20:16] *** rypervenche joined
[20:17] *** simcop2387 left
[20:17] *** perlbot left
[20:19] *** simcop2387 joined
[20:21] *** perlbot joined
[20:36] *** irc_user joined
[20:54] *** Altai-man joined
[20:58] *** pamplemousse joined
[21:04] *** pamplemousse left
[21:24] *** Altai-man left
[21:31] *** Kaiepi joined
[21:33] *** Kaipei left
[21:49] *** perlbot left
[21:49] *** simcop2387 left
[22:06] *** simcop2387 joined
[22:07] *** perlbot joined
[22:30] *** nort left
[23:16] *** irc_user left
[23:24] *** squashable6 left
[23:26] *** squashable6 joined
