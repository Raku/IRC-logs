[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:07] *** willthechill left
[00:33] *** laidback_01 left
[00:41] *** guifa joined
[00:52] *** razetime joined
[01:52] *** reportable6 left
[01:53] *** reportable6 joined
[01:53] * guifa just realized that is semi joke idea of having an inline C block get compiled in the background and added with NativeCall was.... already done!
[01:53] <guifa> Just with Go instead
[01:56] <Voldenet> I did that already, it's not that much of a joke actually
[01:56] <Voldenet> simplifies writing wrappers with libs requiring structs
[01:58] <guifa> Voldenet: link?
[01:58] <Voldenet> the shortest example I have on hand http://ix.io/4Aoy
[01:58] * guifa is preparing a history of slangs
[01:58] <Voldenet> definitely not a slang though
[01:59] <guifa> Remind me of that link in a week or so
[01:59] <guifa> And I'll try to make it one haha
[01:59] <guifa> (would just need to write a C grammar et voilà)
[02:03] <tbrowder__> .ask lizmat is there a public way to search the weekly archives?
[02:03] <tellable6> tbrowder__, I'll pass your message to lizmat
[02:08] <Voldenet> reason why I didn't do slang is because C's grammar is impressively large and I simply needed to work on C code iteratively: https://www.quut.com/c/ANSI-C-grammar-l-2011.html
[02:12] *** Ekho left
[02:16] <guifa> Voldenet: yeah.  But if I could get the grammar to at least validate, I could hand the string en masse to the compiler
[02:17] <guifa> the catch is the preprocessing and Pragma handling I think
[02:19] *** Ekho joined
[02:22] <Voldenet> hmm, I think the slang would need to do two passes for that
[02:23] <Voldenet> with preprocessor grammar being separate from C grammar
[02:27] <Voldenet> expanding macros in a raku grammar definitely sounds like a fun adventure
[02:35] *** jgaz left
[02:40] *** jgaz joined
[02:40] *** teatwo left
[02:40] *** teatwo joined
[03:23] *** willthechill joined
[03:36] *** rf left
[03:46] <guifa> Voldenet the catch of course is how to preprocess when you're looking for a non-EOF terminal token
[03:47] <Voldenet> doesn't preprocessor stop when it finds EOF though
[03:48] <guifa> right, but if I do something like
[03:48] <guifa> c-sub foo { ... } 
[03:49] <guifa> my EOT is now actually }
[03:49] <guifa> err EOF
[03:52] <Voldenet> but you still need to expand macros, they could conditionally expand into } or not
[03:59] <Voldenet> some solution would be to simply get the longest parsable output of gcc -E by iterating from the end of the file
[03:59] <Voldenet> since most likely raku code will not be parsable by gcc…
[04:05] <Voldenet> practically I bet that `consume anything, devour literals and preprocessor directives, count {}s in real code` would cover all useful code
[04:06] *** razetime left
[05:04] *** guifa left
[05:07] *** willthechill left
[05:13] *** razetime joined
[05:21] *** willthechill joined
[05:40] *** siavash joined
[05:42] *** razetime left
[05:43] *** razetime joined
[05:53] *** ProperNoun left
[05:53] *** ProperNoun joined
[05:55] *** siavash left
[05:56] *** ProperNoun left
[05:57] *** ProperNoun joined
[05:57] *** siavash joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:24] *** siavash left
[06:26] *** siavash joined
[06:54] *** siavash left
[07:24] *** sena_kun joined
[07:34] *** jpn joined
[07:53] *** dakkar joined
[07:58] *** abraxxa joined
[08:18] *** jpn left
[08:26] *** razetime left
[08:28] *** abraxxa left
[08:39] *** Sgeo left
[08:42] *** jpn joined
[08:54] *** razetime joined
[08:57] *** abraxxa joined
[09:03] *** siavash joined
[09:03] *** siavash2 joined
[09:03] *** siavash2 left
[09:04] <lizmat> .
[09:04] <tellable6> 2023-07-12T02:03:12Z #raku <tbrowder__> lizmat is there a public way to search the weekly archives?
[09:06] *** siavash left
[09:07] *** siavash joined
[09:07] <lizmat> .tell tbrowder_  on google, include "rakudoweekly.blog" in your search, and it will effectively do that for you
[09:07] <tellable6> lizmat, I'll pass your message to tbrowder__
[09:23] *** sena_kun left
[10:06] *** sena_kun joined
[10:29] <Geth> ¦ docker: 7cae2b1fce | (Daniel Mita)++ | 5 files
[10:29] <Geth> ¦ docker: Bump to 2023.06
[10:29] <Geth> ¦ docker: review: https://github.com/Raku/docker/commit/7cae2b1fce
[10:29] <Geth> ¦ docker: 40594a6003 | Altai-man++ (committed using GitHub Web editor) | 5 files
[10:29] <Geth> ¦ docker: Merge pull request #55 from Raku/2023.06
[10:29] <Geth> ¦ docker: 
[10:29] <Geth> ¦ docker: Bump to 2023.06
[10:29] <Geth> ¦ docker: review: https://github.com/Raku/docker/commit/40594a6003
[10:54] *** euandreh joined
[10:58] *** euandreh left
[10:59] *** euandreh joined
[11:27] *** razetime left
[11:44] *** jpn left
[12:00] *** reportable6 left
[12:01] *** siavash left
[12:03] *** reportable6 joined
[12:15] *** tea3po joined
[12:17] *** teatime joined
[12:19] *** teatwo left
[12:20] *** tea3po left
[13:11] *** guifa joined
[13:15] <[Coke]> Do we have any concurrency examples that show running an external program, getting output and *also* the exitcode? Most of the samples I have at hand (and in the concurrency page in the docs) shows one or the other, but not both.
[13:15] <[Coke]> (that is, it's either a react block to deal with input and output, or a shell that checks the exitcode, but not both)
[13:16] *** teatwo joined
[13:18] <[Coke]> ah, https://docs.raku.org/type/Proc/Async does have a giant react block with an .exitcode, but could use better highlighting (and a bug fix on the output there).
[13:20] *** teatime left
[13:25] *** jpn joined
[13:44] <tbrowder__> japhb: i am adding issues to my pending pr to
[13:45] <tellable6> 2023-07-12T09:07:42Z #raku <lizmat> tbrowder_  on google, include "rakudoweekly.blog" in your search, and it will effectively do that for you
[13:46] *** euandreh left
[13:48] <tbrowder__> show my intended changes. what do you think about creating a separate module to create a test json input file? or make App::* a class and create  such in the TWEAK?
[13:49] <tbrowder__> lizmat: search worked great, thnx
[13:56] <tbrowder__> [Coke]: for us timid proc users, examples consistently showing how to get final results are really appreciated.
[13:56] *** euandreh joined
[14:17] *** melezhik joined
[14:17] <melezhik> .
[14:17] <melezhik> if there is way in raku to dynamically generate list of functions?
[14:18] <melezhik> say I have a @list and I want to integrate through it and generate a function named $I for every item in list
[14:19] <melezhik> where $I is an item in @list
[14:20] <melezhik> m: my @list = <a b c>; for @list  -> $item { our sub $item () {} }
[14:20] <camelia> rakudo-moar 794d89a4f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> = <a b c>; for @list  -> $item { our sub⏏ $item () {} }␤    expecting any of:␤        new name to be defined␤»
[14:21] <melezhik> m: my @list = <a b c>; for @list  -> $item { say $item  }
[14:21] <camelia> rakudo-moar 794d89a4f: OUTPUT: «a␤b␤c␤»
[14:21] <melezhik> m: my @list = <a b c>; for @list  -> $item { eval  "sub $item () \{ \}"  }
[14:21] <camelia> rakudo-moar 794d89a4f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    eval used at line 1. Did you mean 'EVAL', 'val'?␤␤»
[14:21] <melezhik> m: my @list = <a b c>; for @list  -> $item { EVAL  "sub $item () \{ \}"  }
[14:21] <camelia> rakudo-moar 794d89a4f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------>  -> $i…»
[14:22] <melezhik> m: use MONKEY-SEE-NO-EVAL; my @list = <a b c>; for @list  -> $item { EVAL  "sub $item () \{ \}"  }
[14:22] <camelia> rakudo-moar 794d89a4f: ( no output )
[14:22] <melezhik> m: use MONKEY-SEE-NO-EVAL; my @list = <a b c>; for @list  -> $item { EVAL  "sub $item () \{ \}"  }; a();
[14:22] <camelia> rakudo-moar 794d89a4f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»
[14:24] <melezhik> maybe better try my luck with closures
[14:24] *** melezhik left
[14:31] *** teatwo left
[14:31] *** teatwo joined
[14:41] *** jpn left
[14:46] *** RonaldR34g4m left
[14:50] *** jpn joined
[14:57] <[Coke]> m: { sub a() {} }; a()
[14:57] <camelia> rakudo-moar 794d89a4f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»
[14:57] <[Coke]> m: sub a() {}; a()
[14:57] <camelia> rakudo-moar 794d89a4f: ( no output )
[14:59] *** Sgeo joined
[15:00] *** rf joined
[15:01] *** euandreh left
[15:04] *** euandreh joined
[15:37] *** Vyrus joined
[15:42] <japhb> tbrowder__: Didn't realize you could PR *issues* on GitHub, that's kindof cool in an odd sort of way.
[15:43] <japhb> I'm totally fine with having a module that creates test files and data sets.  The reason I originally chose to use an externally-created JSON file is so that I used real-world data shapes and didn't accidentally design the data set to favor particular codecs.
[15:44] <japhb> But as long as we keep at least one (usefully large and complex) real world JSON data file, I'm happy to have generated ones as well that test particular facets of performance or fidelity or what have you.
[15:44] <japhb> tbrowder__: Did I answer all your questions?  :-)
[15:55] *** guifa left
[15:56] *** guifa joined
[16:00] *** guifa left
[16:03] <tbrowder__> weird, i can't find the issues now, but yes. anyhoo, one thing i really need from you in the README is a short intro on how a new raku person should set up and run the app. how to get the big json, file, etc. make it suitable for a person looking to move from python to raku.
[16:04] <tbrowder__> and not familiar with all the ecosystem bits
[16:07] *** euandreh left
[16:08] *** willthechill left
[16:08] *** guifa joined
[16:13] <tbrowder__> ahem, and to help me :-)
[16:20] <guifa> First talk down.  Now to finish writing the next one haha
[16:36] *** dakkar left
[16:40] *** deoac joined
[16:44] <japhb> tbrowder__: Ah, meaning, you'd like me to do that *first* it sounds like, since it's not obvious how to get set up properly.  OK, will put that on my list for today (which is kinda packed, so it will be a bit before I can do so).
[16:45] <tbrowder__> no rush, thnx
[16:45] <tbrowder__> this is just nice-to-have stuff for me
[16:46] <japhb> gotcha
[16:53] <discord-raku-bot> <antononcube> @guifa "(would just need to write a C grammar et voilà)" -- Probably not that hard -- or hard, but easier -- using ANTLR C grammars and DrForr's conversion packages.
[16:55] <discord-raku-bot> <antononcube> Or using (E)BNF grammars for C and my conversion packages. 🙂
[17:16] <guifa> The catch is that C has a multi phase compile process with macro expansions in some of those
[17:18] <guifa> Ack, some of the RakuAST stuff changed
[17:18] <discord-raku-bot> <antononcube> @guifa Yeah, and the so called "lexer hack."
[17:21] *** jpn left
[17:22] *** sena_kun left
[17:24] <discord-raku-bot> <nemokosch> the C preprocessor is banally simple compared to a usual PL parser though
[17:28] *** abraxxa left
[17:29] <discord-raku-bot> <antononcube> What is "PL parser" ?
[17:29] <guifa> programming language
[17:29] <discord-raku-bot> <antononcube> 🙂 Agh
[17:29] <guifa> nemokosch: yeah, there are single pass C compilers so it can be done, will just be complex
[17:30] <discord-raku-bot> <antononcube> There are existing efforts: https://raku.land/github:andydude/C::Parser
[17:31] <discord-raku-bot> <nemokosch> I took this mannerism from raiph
[17:34] *** jpn joined
[17:36] *** guifa left
[17:36] *** squashable6 left
[17:37] *** guifa joined
[17:39] *** squashable6 joined
[17:47] *** jpn left
[17:51] *** jpn joined
[17:53] <tbrowder__> i'm trying to use JSON::Fast to output sorted keys using ":sorted" keys. it works find for "text" keys, but my hash has "Numeric" keys. for such hashes, this works: "%myhash.keys.sort({.Numeric}". the README says to give a Callable but so far i've had no success. any help, pls?
[17:54] *** Vyrus left
[17:56] <tbrowder__> m: my %h = set <100  90  8>; say %h.keys.sort; say %h.keys.sort({.Numeric});
[17:56] <camelia> rakudo-moar 7b6c81c75: OUTPUT: «(100 8 90)␤(8 90 100)␤»
[17:58] <tbrowder__> i'm trying to get the same kind of results with JSON::Fast but haven't broken the code on the correct syntax yet.
[17:59] <tbrowder__> sorry, JSON::Fast uses ":sorted-keys" as named arg
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:00] *** jpn left
[18:04] *** jpn joined
[18:05] *** sena_kun joined
[18:12] *** jpn left
[18:26] *** jpn joined
[18:27] <discord-raku-bot> <nemokosch> does JSON even interpret numeric keys I wonder
[18:27] <japhb> Nope.  But CBOR does.
[18:28] <japhb> (ObCBORIsBetterComment)
[18:29] *** Vyrus joined
[18:30] <discord-raku-bot> <nemokosch> when I read binary, I always think: does this mean we re-enter byte-order hell?
[18:31] <discord-raku-bot> <nemokosch> actually I have a funny issue at work, they cast it as if it was simply a byte-order portability upgrade but the currently generated binary is clearly significantly different from the expected binary, the length is the same but the histogram of bytes is visibly completely different :\
[18:33] *** guifa left
[18:35] *** guifa joined
[18:37] <tbrowder__> m: my %h = set <"100" "90" "8">; say %h.keys.sort; say %h.keys.sort({.Numeric});
[18:37] <camelia> rakudo-moar 0d6418803: OUTPUT: «("100" "8" "90")␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏\"100\"' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»
[18:40] <tbrowder__> m: my %h = set <"100" "8" "90">; say %h.keys.IntStr.sort{.Numeric});
[18:40] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> "90">; say %h.keys.IntStr.sort{.Numeric}⏏);␤»
[18:42] <tbrowder__> m: my %h = set <"100" "8">; say %h.keys.IntStr.sort({.Numeric});
[18:42] <camelia> rakudo-moar 0d6418803: OUTPUT: «No such method 'IntStr' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»
[18:44] <tbrowder__> m: my $a = "100"; sat $a.IntStr
[18:44] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    sat used at line 1. Did you mean 'set', 'say'?␤␤»
[18:45] <[Coke]> .
[18:47] <tbrowder__> m: my %h = set <"100" "8">; say %h.keys.Int.sort({.Numeric});
[18:47] <camelia> rakudo-moar 0d6418803: OUTPUT: «(2)␤»
[18:47] <[Coke]> do you mean >>.IntStr ?
[18:47] <[Coke]> calling Int on a list == calling .elems
[18:48] <tbrowder__> wrong order...
[18:54] <tbrowder__> maybe needs a .map
[18:56] <[Coke]> sure, >>.foo is like .map(*.foo)
[19:00] <tbrowder__> ok, trying offline...
[19:07] <tbrowder__> never was very good at golf!
[19:10] *** thebb joined
[19:10] *** jpn left
[19:15] <xinming_> Is there any dynamic var builtin for a loop?
[19:15] <xinming_> Something like,  $?LOOP-COUNT etc..
[19:19] *** jpn joined
[19:21] *** guifa left
[19:29] <discord-raku-bot> <nemokosch> what would that do?
[19:42] *** guifa joined
[19:43] *** guifa left
[19:44] *** jpn left
[19:44] <[Coke]> m: my @a = 'a'..'q'; for @a.kv -> ($k,$v) { say $k, $v }
[19:44] <camelia> rakudo-moar 0d6418803: OUTPUT: «Cannot unpack or Capture `0`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block <unit> at …»
[19:45] <[Coke]> m: my @a = 'a'..'q'; for @a.kv -> $k,$v { say $k, $v }
[19:45] <camelia> rakudo-moar 0d6418803: OUTPUT: «0a␤1b␤2c␤3d␤4e␤5f␤6g␤7h␤8i␤9j␤10k␤11l␤12m␤13n␤14o␤15p␤16q␤»
[19:46] <[Coke]> that's not quite what you're asking
[19:47] <[Coke]> m: my @a = 'a'..'q'; for @a -> $v { FIRST state $k; say $k++, $v # this either
[19:47] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> RST state $k; say $k++, $v # this either⏏<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»
[19:47] <[Coke]> m: my @a = 'a'..'q'; for @a -> $v { FIRST state $k; say $k++, $v } # this either
[19:47] <camelia> rakudo-moar 0d6418803: OUTPUT: «0a␤1b␤2c␤3d␤4e␤5f␤6g␤7h␤8i␤9j␤10k␤11l␤12m␤13n␤14o␤15p␤16q␤»
[19:47] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t(@a); }; sub x (@array) { @array.raku.say; }; a(:t(&x))
[19:47] <camelia> rakudo-moar 0d6418803: OUTPUT: «Signature constraint check failed in binding to parameter '&t'; expected :(Array $) but got :(@array)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[19:47] <[Coke]> (the FIRST is useless there, nevermind)
[19:48] <xinming_> m: sub a (:&t:(Array)) { my \a = <a b>; t(\a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))
[19:48] <camelia> rakudo-moar 0d6418803: OUTPUT: «Signature constraint check failed in binding to parameter '&t'; expected :(Array $) but got :(@a)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[19:48] *** guifa joined
[19:49] <xinming_> in this case, How do we enforce Array type in sub-signatures please?
[19:49] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t(2a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))
[19:49] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> sub a (:&t:(Array)) { my @a = <a b>; t(2⏏a); }; sub x (@a) { @a.…»
[19:50] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t(@a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))
[19:50] <camelia> rakudo-moar 0d6418803: OUTPUT: «Signature constraint check failed in binding to parameter '&t'; expected :(Array $) but got :(@a)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[19:52] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t($ = @a); }; sub x (@a) { @a.raku.say; }; a(:t(&x));    # adding    $ = @a  in arg call also raises the error
[19:52] <camelia> rakudo-moar 0d6418803: OUTPUT: «Signature constraint check failed in binding to parameter '&t'; expected :(Array $) but got :(@a)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[20:01] <tbrowder__> ref sorting JSON::Fast, looking at the code, lizmat implemented the sorting, and it looks to me like it only p
[20:02] <tbrowder__> *permits the $^a cmp $^b style..
[20:20] <[Coke]> looking at the code, I'm not sure what's expecting a pair, but yah, I can't get it to work with just .Int either.
[20:21] <[Coke]> I'd write a sub that does what tou want and pass that so you don;'t need it all in the invocation of to-json
[20:21] *** jpn joined
[20:25] <[Coke]> m: sub inter($a, $b) {$a.key.Int cmp $b.key.Int}; my %a = (80=>1, 100=>2, 10=>30); use JSON::Fast; my $b = to-json(%a, :pretty, :sorted-keys(&inter)); say $
[20:25] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find JSON::Fast in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/sh…»
[20:26] <[Coke]> here, this generates { "10": 30, "80": 1, "100": 2 } but pretty
[20:27] *** jpn left
[21:10] *** guifa left
[21:14] <tbrowder__> hm, thnx, looks good,but not working for me yey
[21:15] <tbrowder__> *yet, still trying...
[21:20] <Voldenet> you can't sort keys in json
[21:20] <Voldenet> you can attempt, but almost no json parser makes guarantees of keys being sorted
[21:23] <Voldenet> m: my %a = (80=>1, 100=>2, 10=>30); use JSON::Fast; my $b = to-json(%a.List.sort(*.key <=> *.key).map(*.kv), :pretty); say $b
[21:23] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find JSON::Fast in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/sh…»
[21:23] <tbrowder__> erg, i have a mixed bag, mostly IntStrs, but a few Str only. trying to fancify my sub
[21:37] <tbrowder__> ok, got it working! thanks for the help, [Coke]!
[21:41] <tbrowder__> i seem to remember this dance now: my sub does elsif on ~~ Int or Str and then either uses cmp or <=> on the two same type keys or just orders them on my preference (all Str before all Int)
[21:43] <tbrowder__> Voldenet: ye of little faith, Raku rules!
[21:44] <Voldenet> it's not about raku strictly, but about json
[21:45] <Voldenet> either way, arrays are better way of expressing anything in json
[21:45] <Voldenet> arrays are usually faster to parse, accept more datatypes as 'keys'
[21:46] <Voldenet> must preserve sorting
[21:46] <Voldenet> that last property is the most useful, since you can have a discriminator field as first field in the array
[21:47] <Voldenet> so '{ "type": "SomeBoringDto", "field1": 1, "field2": 2 }' -> '["SomeBoringDto", "field1", 1, "field2", 2]'
[21:59] <tbrowder__> yes, i think i see, but, for my use case, the sorted hash is just what i want. it would help a bunch if you could put some good examples in the docs or the JSON::Fast module.
[22:00] <lizmat> PRs welcome :-)
[22:00] <tbrowder__> yepper!
[22:06] *** sena_kun left
[22:08] *** sena_kun left
[22:21] *** tea3po joined
[22:24] *** teatwo left
[22:39] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t(@a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))
[22:39] <camelia> rakudo-moar 0d6418803: OUTPUT: «Signature constraint check failed in binding to parameter '&t'; expected :(Array $) but got :(@a)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[22:39] <xinming_> m: sub t (Array $a) { $a.raku.say; }; my @a = <a b>; t(@a);
[22:39] <camelia> rakudo-moar 0d6418803: OUTPUT: «$["a", "b"]␤»
[22:40] <xinming_> Anyone here knows why the latter worked, But the :&t:(Array) version doesn't work as expected?
[22:40] <xinming_> How can I make the former example work
[22:43] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t(@a); }; sub x (Array \a) { a.raku.say; }; a(:t(&x))
[22:43] <camelia> rakudo-moar 0d6418803: OUTPUT: «["a", "b"]␤»
[22:43] <xinming_> I figured out a version which seem to work, But quite confusing
[22:44] <xinming_> m: sub a (:&t:(Array)) { my @a = <a b>; t(@a); }; sub x (Array $a) { $a.raku.say; }; a(:t(&x))
[22:44] <camelia> rakudo-moar 0d6418803: OUTPUT: «$["a", "b"]␤»
[22:51] <xinming_> m: sub a (:&t:(@x)) { my @a = <a b>; t(@a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))
[22:51] <camelia> rakudo-moar 0d6418803: OUTPUT: «["a", "b"]␤»
[22:52] <xinming_> Now, I'm quite confused by @x vs Array
[22:59] *** deoac left
[23:01] <discord-raku-bot> <nemokosch> well there might be a reason people don't like to talk about this stuff
[23:02] <discord-raku-bot> <nemokosch> I suspect if the community ever took the type system seriously, that would have led to the impression that @ really does more harm than good
[23:03] <discord-raku-bot> <nemokosch> needless to say, that's only my 2 cents, although I have a reason to think that
[23:03] *** teatwo joined
[23:04] <xinming_> I think I can understand the reason now,  Array $a  is not the same as @a
[23:05] <xinming_> Since Array in signature, It expects a scalar container around the Array, Where @a means the Array itself
[23:06] <xinming_> docs does mention that Array, List is the most difficult part to design, I believe so.
[23:07] *** tea3po left
[23:07] <Voldenet> @a means the array container around the
[23:07] <Voldenet> Array
[23:08] <Voldenet> m: my $s := []; my @a := $s; $s.push(42); dd @a
[23:08] <camelia> rakudo-moar 0d6418803: OUTPUT: «[42]␤»
[23:09] <discord-raku-bot> <nemokosch> it's debated whether that can be considered a container or not. From a certain point of view it is (it can supply assignment semantics via the STORE method), from another it isn't (it's VAR method reports the same value back, same for decontainerisation)
[23:09] <Voldenet> this is enormously confusing and source of errors, so I usually use scalars everywhere out of p5 habit
[23:10] <discord-raku-bot> <nemokosch> I tend to forget how it is for function parameters, iirc it's not quite like for variables - but one thing is sure
[23:11] <discord-raku-bot> <nemokosch> Scalar is an extra feature, a $variable is net more capable than a @variable
[23:12] <Voldenet> btw, this example has tons of problems: `sub a (:&t:(Array)) { my @a = <a b>; t(@a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))`
[23:13] <Voldenet> s/tons of/two/
[23:13] <xinming_> Voldenet: Well, It's just for testing purpose. But glad to hear the corrections
[23:13] <Voldenet> `<a b>` produces a List, and `x` consumes anything
[23:14] <xinming_> That's why I assign <a b> to @a
[23:14] <discord-raku-bot> <nemokosch> @a will be an Array containing two strings, I see no problem with that
[23:14] <xinming_> m: sub x (@a) { @a.raku.say };   x(1,2,3);
[23:14] <camelia> rakudo-moar 0d6418803: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling x(Int, Int, Int) will never work with declared signature (@a)␤at <tmp>:1␤------> sub x (@a) { @a.raku.say };   ⏏x(1,2,3);␤»
[23:15] <xinming_> m: sub x (@a) { @a.raku.say };   x((1,2,3),);
[23:15] <camelia> rakudo-moar 0d6418803: OUTPUT: «(1, 2, 3)␤»
[23:15] <Voldenet> makes sense
[23:15] <discord-raku-bot> <nemokosch> pretty sure assignment to @vars itself is subject to the "single argument rule"
[23:15] <xinming_> I know in these 2 days, My mind about Array/List in raku has refreshed. :-)
[23:15] <discord-raku-bot> <nemokosch> so no nesting happens, instead, the content of the List is unwrapped straight into the Array @a declared
[23:16] <Voldenet> m: sub a (:&t:(@)) { my @a = <a b>; t(@a); }; sub x (@a) { @a.raku.say; }; a(:t(&x))
[23:16] <camelia> rakudo-moar 0d6418803: OUTPUT: «["a", "b"]␤»
[23:17] <xinming_> I think, explaining @ is not same as Array in signature may be a headache for both explainer and new raku users.
[23:18] <Voldenet> simply using $ everywhere makes explaining and code simpler
[23:18] <discord-raku-bot> <nemokosch> I agree, honestly
[23:18] <Voldenet> m: sub a (:&t:(Array)) { my $a = <a b>.Array; t($a); }; sub x (Array $a) { $a.raku.say; }; a(:t(&x))
[23:18] <camelia> rakudo-moar 0d6418803: OUTPUT: «$["a", "b"]␤»
[23:18] <Voldenet> it's so obvious
[23:18] <discord-raku-bot> <nemokosch> especially if you are keen on typing
[23:19] <discord-raku-bot> <nemokosch> if you are keen on typing, I wouldn't even be trying with other sigils in your place, maybe the "unsigil" every now and then, that can be handy
[23:19] <xinming_> well it's perl, I like @ and %
[23:20] <discord-raku-bot> <nemokosch> from what I heard, they were even more evil in Perl so maybe you just like to suffer 😛
[23:20] <Voldenet> passing @ in perl was pure suffering
[23:20] <Voldenet> that's where you learn to use scalars everywhere
[23:21] <discord-raku-bot> <nemokosch> anyway, they are absolutely not like type info or interface annotation in Raku either
[23:21] <Voldenet> Well, it's understandable when you know that passing @ actually passes contents of the array and not the ref
[23:22] <discord-raku-bot> <nemokosch> in Raku, the sigils are like metadata about how much of a variable the symbol should be - that, aaaand a convenient mixture of default value and interface annotation...
[23:22] <Voldenet> …leads you to this madness
[23:23] <Voldenet> m: my $x = [1, 2]; for $x { .say }
[23:23] <camelia> rakudo-moar 0d6418803: OUTPUT: «[1 2]␤»
[23:25] *** gfldex_ joined
[23:26] <Voldenet> that's the most "perl5" thing in raku
[23:26] *** mst left
[23:26] *** Woodi_ joined
[23:26] <discord-raku-bot> <nemokosch> well well, I think that's a surprisingly apparent mistake... the concept of "you can assign a single value to this" and "it is an atomic value" got mixed up
[23:26] *** hexology- joined
[23:26] <discord-raku-bot> <nemokosch> I wonder if "itemization" is ever useful but even if it is, I wonder what urged somebody to mistake it for "scalarization", in the mutability sense
[23:26] *** mst joined
[23:27] * leont isn't sure they ever truly grokked itemization
[23:28] *** lizmat_ joined
[23:28] <japhb> m: my \x = [1, 2]; for x { .say }
[23:28] <camelia> rakudo-moar 0d6418803: OUTPUT: «1␤2␤»
[23:28] <japhb> If you want to avoid itemization, you need merely say so.  :-)
[23:29] <discord-raku-bot> <nemokosch> but that's the thing - the Scalar container does two things at once
[23:29] <discord-raku-bot> <nemokosch> you have to opt out from something that you thought merely provided mutability
[23:29] <Voldenet> mutability should be opt-in in the first place
[23:30] <discord-raku-bot> <nemokosch> and being able to downright store an Array or whatever into one thing can be useful
[23:30] <discord-raku-bot> <nemokosch> so you might have valid reasons to use $var to hold a complex data type
[23:31] <discord-raku-bot> <nemokosch> it's rather obscure that you need to do this "decontainerization dance" when you merely want to iterate on it
[23:31] <tbrowder__> Voldenet: interesting about the json array: is it faster that just reading a formatted flat file?
[23:32] <discord-raku-bot> <nemokosch> ... especially since most (but again, not all...) methods don't care about containerization at all, so it would be convenient to settle on for $x { ... } and $x.map({ ... }) reliably doing the same thing
[23:32] <tbrowder__> s/that/than;
[23:32] *** lizmat left
[23:32] *** goblin left
[23:32] *** samcv left
[23:32] *** hexology left
[23:32] *** Woodi left
[23:32] *** gfldex left
[23:33] <Voldenet> tbrowder__: probably no, because flat file can be optimized further
[23:33] *** samcv joined
[23:36] <Voldenet> json needs to use different code for unescaping strings and parsing floats and numbers, but integers can be simple numbers with separator
[23:38] <Voldenet> otoh writing .slurp-rest.split(",").map(*.Int) is probably going to be slower
[23:38] <Voldenet> since json deserializer can stream files in a wiser wayt
[23:38] <tbrowder__> ref flat file: yeah, that's kinda been my experience. but i think the json hash suits the data size i'm looking at. esp. for read, update, write.
[23:39] <tbrowder__> and search
[23:39] <Voldenet> if I needed read, update and write, I'd just use sqlite
[23:39] <Voldenet> it's orders of magnitude more flexible and faster
[23:40] <tbrowder__> i've thought about that (and used it in tnebut for me that will be a later optimization
[23:40] <Voldenet> (btw, that full string deserialization is a problem that happens in some json C deserializers that simply do strlen which is O(n) in C…)
[23:41] <tbrowder__> *used it in the past
[23:42] <Voldenet> in fact, if performance is important, then json is not the best format
[23:42] <japhb> Formats that have length-specified strings and arrays don't (naturally at least) suffer from that problem, so e.g. protobuf and CBOR don't face the O(n) skipping issue.
[23:42] <Voldenet> yeah, I was going to suggest protobuf which even has raku module
[23:42] <japhb> And avoiding escaping and unescaping is really nice too.
[23:44] <Voldenet> capnp and flatbuffers are going to be even faster, theoretically they can avoid deserializing and mmap into huge files
[23:44] <japhb> Oh, as a side note: automagic JSON and CBOR handling are already part of Cro.  So if you are using that, well, there you go.
[23:44] <tbrowder__> i'm looking at a need for a single-user data store, so i'm happy with the perf i've seen so far.
[23:45] <Voldenet> though the path I'd use is json -> sqlite
[23:45] <japhb> Makes sense
[23:45] <tbrowder__> ok, thnx
[23:45] <Voldenet> sqlite if full json parse/write takes too much time
[23:46] <japhb> ... or PostgreSQL if you want to do the same thing with some JSON- or JSONB-valued individual fields
[23:47] <japhb> But that's a much bigger sledgehammer.
[23:48] <Voldenet> I've used mysql/postgres in some projects and I regret maintenance costs
[23:48] <Voldenet> usually where I should've used flat file to begin with
[23:49] <japhb> MySQL I agree, having used that since Ye Olden Dayes.  PostgreSQL I've had less trouble with.
[23:49] <Voldenet> (not mysql, but mariadb now)
[23:49] <Voldenet> (still, not much difference in practice)
[23:49] <japhb> Nodnod
[23:52] *** El_Che left
[23:53] *** El_Che joined
