[00:11] *** bisectable6 joined
[00:13] *** quotable6 joined
[00:14] *** releasable6 joined
[00:14] *** statisfiable6 joined
[00:14] *** committable6 joined
[00:14] *** coverable6 joined
[00:14] *** shareable6 joined
[00:14] *** evalable6 joined
[00:15] *** greppable6 joined
[00:42] *** jaguart joined
[00:47] *** jaguart left
[01:16] *** sourceable6 joined
[01:26] <tbrowder__>  that checks, thanks. i think this will do what i need.

[02:07] *** reportable6 joined
[02:09] *** jpn left
[02:18] *** teatwo joined
[02:19] *** jaguart joined
[02:19] *** teatime left
[02:31] *** jaguart left
[03:06] *** jpn joined
[03:10] *** jpn left
[04:10] *** notable6 left
[04:10] *** linkable6 left
[04:10] *** shareable6 left
[04:10] *** reportable6 left
[04:10] *** evalable6 left
[04:10] *** nativecallable6 left
[04:10] *** unicodable6 left
[04:10] *** squashable6 left
[04:10] *** statisfiable6 left
[04:10] *** bisectable6 left
[04:10] *** quotable6 left
[04:10] *** benchable6 left
[04:10] *** greppable6 left
[04:10] *** sourceable6 left
[04:10] *** committable6 left
[04:10] *** coverable6 left
[04:10] *** releasable6 left
[04:11] *** greppable6 joined
[04:11] *** bisectable6 joined
[04:11] *** reportable6 joined
[04:12] *** sourceable6 joined
[04:12] *** committable6 joined
[04:12] *** squashable6 joined
[04:12] *** quotable6 joined
[04:13] *** statisfiable6 joined
[04:27] *** perlbot joined
[04:29] *** simcop2387 joined
[04:32] *** teatwo left
[04:32] *** teatwo joined
[05:13] *** unicodable6 joined
[05:15] *** benchable6 joined
[05:15] *** nativecallable6 joined
[05:15] *** shareable6 joined
[05:16] *** linkable6 joined
[05:26] *** tellable6 joined
[06:00] *** reportable6 left
[06:20] *** jpn joined
[06:30] *** bloatable6 joined
[06:34] *** jpn left
[06:41] *** TypoToni left
[06:43] *** jpn joined
[06:46] *** jpn left
[06:48] *** abraxxa joined
[07:03] *** reportable6 joined
[07:19] *** evalable6 joined
[07:21] *** notable6 joined
[07:21] *** coverable6 joined
[07:21] *** releasable6 joined
[07:52] *** sena_kun joined
[07:52] *** Sgeo left
[08:38] *** lizmat_ joined
[08:42] *** lizmat left
[09:13] *** Geth left
[09:13] *** lizmat joined
[09:14] *** RakuIRCLogger left
[09:15] <lizmat> .

[09:15] *** lizmat_ left
[09:15] *** Geth__ left
[09:15] *** Geth joined
[09:17] *** lizmat left
[09:19] *** lizmat joined
[10:19] *** evalable6 left
[10:19] *** sourceable6 left
[10:19] *** notable6 left
[10:19] *** coverable6 left
[10:19] *** statisfiable6 left
[10:19] *** benchable6 left
[10:19] *** committable6 left
[10:19] *** linkable6 left
[10:19] *** greppable6 left
[10:19] *** reportable6 left
[10:19] *** shareable6 left
[10:19] *** bisectable6 left
[10:19] *** bloatable6 left
[10:19] *** quotable6 left
[10:19] *** unicodable6 left
[10:19] *** tellable6 left
[10:19] *** nativecallable6 left
[10:19] *** squashable6 left
[10:19] *** releasable6 left
[10:19] *** reportable6 joined
[10:19] *** greppable6 joined
[10:19] *** coverable6 joined
[10:19] *** squashable6 joined
[10:19] *** benchable6 joined
[10:20] *** bisectable6 joined
[10:20] *** statisfiable6 joined
[10:21] *** committable6 joined
[10:21] *** notable6 joined
[10:21] *** evalable6 joined
[10:21] *** quotable6 joined
[10:21] *** shareable6 joined
[10:21] *** releasable6 joined
[10:21] *** bloatable6 joined
[10:21] *** nativecallable6 joined
[10:21] *** linkable6 joined
[10:22] *** unicodable6 joined
[10:22] *** tellable6 joined
[10:22] *** sourceable6 joined
[10:34] *** jpn joined
[11:34] *** committable6 left
[11:34] *** evalable6 left
[11:34] *** linkable6 left
[11:34] *** statisfiable6 left
[11:34] *** reportable6 left
[11:34] *** nativecallable6 left
[11:34] *** releasable6 left
[11:34] *** benchable6 left
[11:34] *** coverable6 left
[11:34] *** shareable6 left
[11:34] *** quotable6 left
[11:34] *** bisectable6 left
[11:34] *** tellable6 left
[11:34] *** squashable6 left
[11:34] *** sourceable6 left
[11:34] *** notable6 left
[11:34] *** bloatable6 left
[11:34] *** unicodable6 left
[11:34] *** greppable6 left
[11:34] *** coverable6 joined
[11:34] *** notable6 joined
[11:34] *** evalable6 joined
[11:34] *** releasable6 joined
[11:34] *** linkable6 joined
[11:35] *** tellable6 joined
[11:35] *** bloatable6 joined
[11:35] *** statisfiable6 joined
[11:35] *** unicodable6 joined
[11:35] *** greppable6 joined
[11:35] *** shareable6 joined
[11:35] *** squashable6 joined
[11:35] *** sourceable6 joined
[11:36] *** committable6 joined
[11:36] *** quotable6 joined
[11:36] *** bisectable6 joined
[11:36] *** benchable6 joined
[11:37] *** nativecallable6 joined
[11:37] *** reportable6 joined
[11:53] <patrickb> guifa: Can you do a release of DateTime::Timezones? Latest version in uninstallable without manually preinstalling its deps.

[11:58] *** zara joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:05] *** zara left
[13:05] *** evalable6 left
[13:05] *** linkable6 left
[13:05] *** evalable6 joined
[13:06] *** linkable6 joined
[13:32] *** CIAvash left
[13:32] *** uzl[m] left
[13:32] *** tadzik left
[13:32] *** Matthew|m left
[13:37] *** CIAvash joined
[13:46] *** xinming left
[13:47] *** xinming joined
[13:54] *** Matthew|m joined
[13:54] *** uzl[m] joined
[13:54] *** tadzik joined
[14:15] *** tea3po joined
[14:15] *** tea3po left
[14:16] *** tea3po joined
[14:18] *** teatwo left
[14:26] *** abraxxa left
[14:27] *** Sgeo joined
[15:27] *** evalable6 left
[15:29] *** evalable6 joined
[15:31] *** TypoToni joined
[15:33] <tonyo> .

[15:56] *** jpn left
[16:16] *** Oshawott left
[16:20] *** archenoth joined
[16:42] <tbrowder__> hi, i need help with hyper on a hash. the hash k

[16:44] <tbrowder__> *looks like this: %h = a => [1, 2, 3, 4], b=> [2, 3, 4, ];

[16:45] <tbrowder__> i need to multiply all values by the same value, say $a = 3

[16:46] <tbrowder__> i can do it on an array fine

[16:47] <tbrowder__> m: my @a = 1, 2; my @b = @a >>*>> 2

[16:47] <camelia> rakudo-moar d1ca18f17: ( no output )

[16:48] <tbrowder__> m: my @a = 1, 2; my @b = @a >>*>> 2; say @b.raku

[16:48] <camelia> rakudo-moar d1ca18f17: OUTPUT: «[2, 4]␤»

[16:49] <ugexe> m: my %h = a => [1, 2, 3, 4], b=> [2, 3, 4, ]; say %h>>.map({$_ * 2})

[16:49] <camelia> rakudo-moar d1ca18f17: OUTPUT: «{a => (2 4 6 8), b => (4 6 8)}␤»

[16:49] <ugexe> m: my %h = a => [1, 2, 3, 4], b=> [2, 3, 4, ]; say %h>>.map(* * 2)

[16:49] <camelia> rakudo-moar d1ca18f17: OUTPUT: «{a => (2 4 6 8), b => (4 6 8)}␤»

[16:49] <tbrowder__> ugexe: thank you!

[16:53] <tbrowder__> i guess i use the first form if the number of elements is not known?

[16:58] <tbrowder__> m: my $mul = 3; my %a = a=>[1,2], b=>[2,3,6], c=> [1,2]; say %a>>.map({$_ * $mul});

[16:58] <camelia> rakudo-moar d1ca18f17: OUTPUT: «{a => (3 6), b => (6 9 18), c => (3 6)}␤»

[16:58] <ugexe> both of the forms i posted are the same, one is just slightly shorter

[16:59] <tbrowder__> ok, thanks a lot!

[17:01] <[Coke]> the {$_} version is a code block with the default argument, the * version is a Whatercode that generates a Callable (I think) - end result is the same, I find that the * version is much prettier, but the {$_} lets you do some more complicated logic sometimes if you need it.

[17:01] <[Coke]> but it's personal preference.

[17:09] *** Geth left
[17:09] *** Geth joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:02] *** tellable6 left
[19:02] *** statisfiable6 left
[19:02] *** reportable6 left
[19:02] *** squashable6 left
[19:02] *** committable6 left
[19:02] *** notable6 left
[19:02] *** unicodable6 left
[19:02] *** quotable6 left
[19:02] *** sourceable6 left
[19:02] *** evalable6 left
[19:02] *** coverable6 left
[19:02] *** bloatable6 left
[19:02] *** shareable6 left
[19:03] *** unicodable6 joined
[19:03] *** coverable6 joined
[19:04] *** notable6 joined
[19:04] *** squashable6 joined
[19:04] *** reportable6 joined
[19:04] *** bloatable6 joined
[19:04] *** quotable6 joined
[19:04] *** evalable6 joined
[19:04] *** tellable6 joined
[19:05] *** committable6 joined
[19:05] *** statisfiable6 joined
[19:05] *** sourceable6 joined
[19:06] *** shareable6 joined
[19:11] <tbrowder__> [Coke] got it, thnx. can you give a short demo of a more complicated use?

[19:14] <tbrowder__> i guess it could probably be for something that varies the action depending on the value, such as making all values even...

[20:00] *** euandreh left
[20:10] <tonyo> tbrowder__: the most common `use {$_} over *` that i've experienced would be if you need the value more than once

[20:11] <tonyo> m: (1..5).map({$_ * $_}); (1..5).map(* * *); # doesn't work

[20:11] <camelia> rakudo-moar d1ca18f17: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[20:11] <tonyo> m: say (1..5).map({$_ * $_}); # works

[20:11] <camelia> rakudo-moar d1ca18f17: OUTPUT: «(1 4 9 16 25)␤»

[20:11] <tonyo> m: (1..5).map(* * *); # doesn't work

[20:11] <camelia> rakudo-moar d1ca18f17: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[20:23] <[Coke]> Yup, good example.

[20:24] <[Coke]> I would also feel comfortable making the {} version cover multiple lines, whereas I think that'd be awkward with the * version

[20:24] <[Coke]> (again, that's preference. I'd probably write an explicit sub and use that if it was *that* long.

[20:39] <discord-raku-bot> <Nemokosch> m: (1..6).map(* * *).say

[20:39] <discord-raku-bot> <Raku eval>  (2 12 30) 

[20:40] <discord-raku-bot> <Nemokosch> it "works", for { $^a * $^b }

[21:00] *** evalable6 left
[21:00] *** linkable6 left
[21:01] *** linkable6 joined
[21:03] *** evalable6 joined
[21:46] *** sena_kun left
[21:53] <tonyo> that example demonstrates how awkward it can be, also

[22:03] *** euandreh joined
[22:14] <Voldenet> .map(* * *) is rapidly collapsing into being useless, I'm hardly ever using non-unary form

[22:15] <Voldenet> it only works well for things like .sort

[22:16] <Voldenet> if `.map(*1 * *1)` or something similar existed, it would reduce the pain of referencing and reordering arguments

[22:22] *** Sgeo_ joined
[22:23] <lizmat> .map( -> $a, $b, $c { ... } )    ??

[22:25] *** Sgeo left
[22:26] <discord-raku-bot> <Nemokosch> m: 1, 1, * + * ... * andthen .[^10].say

[22:26] <discord-raku-bot> <Raku eval>  (1 1 2 3 5 8 13 21 34 55) 

[22:26] <discord-raku-bot> <Nemokosch> the classic

[22:29] <Voldenet> `.map({ $^a * $^a })` exists but those { } are so horrible to type in

[22:31] *** deoac joined
[22:32] <guifa> patrickb: that's weird, what's the dep that it doesn't like?

[22:34] <gfldex> Voldenet: You can define input shortcuts that type ({}) and move the cursor right to the right spot. I do that with „“, looks like this in my digraph file: '""'    =>  '„“D',

[22:34] <gfldex> That's a ^D in there.

[22:35] <Voldenet> I know, but input tools for editing source code are poor solution to the problem

[22:37] <Voldenet> especially when amount of ({ }) starts to obfuscate the problem

[22:40] *** Xliff joined
[22:40] <gfldex> I like to use @a».&{ $^a * $^b } .

[22:40] <Xliff> \o

[22:40] <tellable6> 2023-04-30T23:55:36Z #raku <tbrowder__> Xliff see cpan Astro::MoonPhase; that's the source (last update 2007), then manipulated it to my needs into a json format

[22:40] <Xliff> If I have this in Perl5: "use DBI::Log file => "~/querylog.sql";" -- How would I invoke this in Raku for Inline::Perl5?

[22:44] <Voldenet> perhaps `use DBI::Log:from<Perl5> file => "~/querylog.sql"` would work

[22:45] <Xliff> .tell tbrowder LOL! thanks for the pointer. I might use it. This comes after I had already written a NativeCall based module for Raku! Maybe you could help me with the release? Email: clifton.wood@gmail.com

[22:45] <tellable6> Xliff, I'll pass your message to tbrowder__

[22:45] <Xliff> What about "use DBI::Log trace => 1file => "~/querylog.sql";" 

[22:46] <Xliff> Actually...

[22:46] <Xliff> use DBI::Log trace => 1 file => "~/querylog.sql";

[22:47] <Xliff> Aaand... no dice -- Error while importing from 'DBI::Log': no such tag 'trace'

[22:47] <Voldenet> it appears to me that hashes should be made references automatically in the context of use as well

[22:47] <Voldenet> maybe this: use DBI::Log:from<Perl5> { :trace(1) :file("~/querylog.sql") }

[22:48] <Xliff> Odd... same deal

[22:49] <Voldenet> probably :trace gets attached to `use` instead of being used as hash

[22:49] <Xliff> This one didn't spawn errors, but that was a golf...

[22:49] <Xliff>  raku -e 'use Inline::Perl5; use DBI::Log:from<Perl5> qw<:trace, :file("a")>'

[22:49] <Xliff> I'll have to test that one in the app. Thanks.

[22:53] <Voldenet> you could also do `my $p5 = Inline::Perl5.new; $p5.use('DBI::Log', { whatever hash });`

[22:54] <Voldenet> I'm not sure if that would work

[23:00] <Xliff> The one that actually did...

[23:00] <Xliff> raku -e 'use Inline::Perl5; use DBI::Log:from<Perl5> <:trace, :file("a")>'

[23:01] <Xliff> Thanks for your help, Voldenet++

[23:07] <guifa> patrickb: I just did a `zef uninstall DateTime::Timezones` and `zef uninstall Timezones::ZoneInfo` and then `zef install DateTime::Timezones` and it worked without problem.  Can you send me the error message you're getting?

[23:40] *** linkable6 left
[23:40] *** evalable6 left
[23:40] *** linkable6 joined
[23:42] *** evalable6 joined
