[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:13] <Voldenet> pretty intriguing that <:trace, :file("a")> worked, since it's a tuple of strings

[01:01] *** evalable6 left
[01:01] *** linkable6 left
[01:01] *** evalable6 joined
[01:02] *** linkable6 joined
[01:03] *** xinming left
[01:05] *** xinming joined
[01:45] *** xinming left
[01:47] *** xinming joined
[02:13] *** avuserow left
[02:14] *** avuserow joined
[02:15] *** teatwo joined
[02:17] *** teatwo left
[02:18] *** teatwo joined
[02:19] *** tea3po left
[03:19] *** quotable6 left
[03:19] *** shareable6 left
[03:19] *** tellable6 left
[03:19] *** unicodable6 left
[03:19] *** statisfiable6 left
[03:19] *** committable6 left
[03:19] *** sourceable6 left
[03:19] *** evalable6 left
[03:19] *** linkable6 left
[03:19] *** bloatable6 left
[03:19] *** benchable6 left
[03:19] *** nativecallable6 left
[03:19] *** notable6 left
[03:19] *** greppable6 left
[03:19] *** bisectable6 left
[03:19] *** squashable6 left
[03:19] *** releasable6 left
[03:19] *** coverable6 left
[03:19] *** reportable6 left
[03:19] *** evalable6 joined
[03:19] *** bisectable6 joined
[03:19] *** bloatable6 joined
[03:19] *** benchable6 joined
[03:19] *** nativecallable6 joined
[03:19] *** linkable6 joined
[03:20] *** quotable6 joined
[03:20] *** coverable6 joined
[03:20] *** greppable6 joined
[03:20] *** reportable6 joined
[03:20] *** squashable6 joined
[03:20] *** statisfiable6 joined
[03:20] *** tellable6 joined
[03:20] *** sourceable6 joined
[03:21] *** committable6 joined
[03:21] *** notable6 joined
[03:21] *** shareable6 joined
[03:21] *** releasable6 joined
[03:21] *** unicodable6 joined
[04:02] *** TypoToni left
[05:02] *** bloatable6 left
[05:02] *** notable6 left
[05:02] *** benchable6 left
[05:02] *** unicodable6 left
[05:02] *** squashable6 left
[05:02] *** releasable6 left
[05:02] *** sourceable6 left
[05:02] *** quotable6 left
[05:02] *** committable6 left
[05:02] *** evalable6 left
[05:02] *** coverable6 left
[05:02] *** nativecallable6 left
[05:02] *** bisectable6 left
[05:02] *** reportable6 left
[05:02] *** greppable6 left
[05:02] *** shareable6 left
[05:02] *** statisfiable6 left
[05:02] *** linkable6 left
[05:02] *** tellable6 left
[05:03] *** sourceable6 joined
[05:03] *** releasable6 joined
[05:03] *** benchable6 joined
[05:03] *** notable6 joined
[05:03] *** committable6 joined
[05:03] *** nativecallable6 joined
[05:03] *** quotable6 joined
[05:03] *** bisectable6 joined
[05:04] *** reportable6 joined
[05:04] *** bloatable6 joined
[05:04] *** shareable6 joined
[05:04] *** linkable6 joined
[05:05] *** statisfiable6 joined
[05:05] *** tellable6 joined
[05:05] *** evalable6 joined
[05:05] *** coverable6 joined
[05:05] *** greppable6 joined
[05:05] *** unicodable6 joined
[05:05] *** squashable6 joined
[05:30] <patrickb> guifa: see https://github.com/ugexe/zef/issues/515

[05:42] <Xliff> sub a { ... }; sub b { say sub &a.name}; sub a  { b; }

[05:42] <Xliff> m: sub a { ... }; sub b { say sub &a.name}; sub a  { b; }

[05:42] <camelia> rakudo-moar d1ca18f17: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> sub a { ... }; sub b { say sub⏏ &a.name}; sub a  { b; }␤    expecting any of:␤        new name to be defined␤»

[05:42] <Xliff> m: sub a { ... }; sub b { say &a.name}; sub a  { b; }

[05:42] <camelia> rakudo-moar d1ca18f17: ( no output )

[05:42] <Xliff> m: sub a { ... }; sub b { say &a.name}; sub a  { say b; }

[05:42] <camelia> rakudo-moar d1ca18f17: ( no output )

[05:42] *** andinus left
[05:43] <Xliff> m: sub a { ... }; sub b { say &a.name }; sub a  { b; }

[05:43] <camelia> rakudo-moar d1ca18f17: ( no output )

[05:43] <Xliff> Is there a way I can get that to work with OUTER?

[05:43] <Xliff> m: sub a { ... }; sub b { say OUTER::<&?ROUTINE>.name }; sub a  { b; }

[05:43] <camelia> rakudo-moar d1ca18f17: ( no output )

[05:43] <Xliff> m: sub a { ... }; sub b { say OUTER::<&?ROUTINE>.name }; sub a  { b(); }

[05:43] <camelia> rakudo-moar d1ca18f17: ( no output )

[05:43] <Xliff> m: sub b { say OUTER::<&?ROUTINE>.name }; sub a  { b(); }

[05:43] <camelia> rakudo-moar d1ca18f17: ( no output )

[05:43] <Xliff> m: sub b { say OUTER::<&?ROUTINE>.name }; sub a {  b(); } a

[05:43] <camelia> rakudo-moar d1ca18f17: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> TER::<&?ROUTINE>.name }; sub a {  b(); }⏏ a␤    expecting any of:␤        infix␤        infix stopper␤     …»

[05:44] <Xliff> m: sub b { say OUTER::<&?ROUTINE>.name }; sub a {  b(); };  a

[05:44] <camelia> rakudo-moar d1ca18f17: OUTPUT: «Nil␤»

[05:44] <Xliff> m: sub a { ... }; sub b { say OUTER::<&?ROUTINE>.name }; sub a  { b(); }; a

[05:44] <camelia> rakudo-moar d1ca18f17: OUTPUT: «Nil␤»

[05:44] <Xliff> m: sub a { ... }; sub b { say &a.name }; sub a  { b; }; a

[05:44] <camelia> rakudo-moar d1ca18f17: OUTPUT: «a␤»

[05:45] <Xliff> Is there a way I can do the above without a predeclaration... like with OUTER and &?ROUTINE... but that doesn't seem to work... see above example.

[05:46] *** andinus joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:12] <Voldenet> but OUTER is an outer _scope_, not a caller

[06:13] <Voldenet> I wonder if CALLER would work

[06:13] <Voldenet> m: sub b { say CALLER::<&?ROUTINE>.name }; sub a {  b(); };  a

[06:13] <camelia> rakudo-moar d1ca18f17: OUTPUT: «Nil␤»

[06:14] <Voldenet> m: sub b { Backtrace.new.[*-2].subname.say }; sub a {  b(); };  a

[06:14] <camelia> rakudo-moar d1ca18f17: OUTPUT: «a␤»

[06:14] <Voldenet> Xliff: ^ the above works, but I doubt it's enormously useful

[06:15] <Voldenet> uh, backtrace goes backwards

[06:16] <Voldenet> m: sub b { Backtrace.new.[2].subname.say }; sub a {  b(); }; sub c { a }; a; c

[06:16] <camelia> rakudo-moar d1ca18f17: OUTPUT: «a␤a␤»

[06:34] <Voldenet> m: sub b { say $*ROUTINE.name }; sub a { my $*ROUTINE = &?ROUTINE;  b(); }; a

[06:34] <camelia> rakudo-moar d1ca18f17: OUTPUT: «a␤»

[06:34] <Voldenet> that would work as well

[06:42] *** frost joined
[07:04] *** Sgeo_ left
[07:16] *** goblin left
[07:16] *** goblin joined
[08:08] *** sena_kun joined
[08:29] *** jpn joined
[09:19] <guifa> patrickb: aaaah.  That *is* correct.  

[09:19] <guifa> 0.4.1 I screwed up the dependencies in META6

[09:20] <guifa> 0.4.2 fixes it

[09:27] *** sena_kun left
[09:40] *** eseyman left
[09:42] *** manu_ joined
[10:10] *** deoac left
[10:19] <tbrowder__> hi, ref arrays, hashes, and map. i got into trouble using help from ugexe and [Coke] to multiply some data structures. the help was perfect, for the situation i gave them.

[10:19] <tellable6> 2023-05-04T22:45:06Z #raku <Xliff> tbrowder LOL! thanks for the pointer. I might use it. This comes after I had already written a NativeCall based module for Raku! Maybe you could help me with the release? Email: clifton.wood@gmail.com

[10:22] <tbrowder__> later i found, to my chagrin, i had more complicated structures in the mix. so, i wound up having to manually unpacking them to see how to program updating them.

[10:25] <tbrowder__> is there any rakuis way to use introspection on an unknown mix of hash and array to unpack it? i think i can do it the "hard" way, but a golfish method would be cool.

[10:37] <moritz> if $thing ~~ Associative { do hashy things }; if $thing ~~ Positional { do array-y things }

[11:04] <patrickb> guifa: I don't think the META6 fix is in 0.4.2. I think it's unreleased.

[11:05] *** manu_ is now known as eseyman

[11:09] <patrickb> guifa: I revoke that statement and claim the opposite. The fix is included in 0.4.2.

[11:36] *** jpn left
[11:39] *** jpn joined
[12:00] *** reportable6 left
[12:01] *** TypoToni joined
[12:02] *** reportable6 joined
[12:02] *** GreaseMonkey left
[12:04] *** greaser|q joined
[12:15] <ugexe> remember folks: always `zef install .` in addition to running your tests for CI

[12:19] <ugexe> also could you change the source-url and support~>source so they point at wherever the code is living now?

[12:21] <ugexe> maybe that is where it lives, but what im seeing hasnt had any changes for months

[12:39] <[Coke]> ugexe: Ah, I never do zef install . if I'm uploading a new version with fez. Good advice.

[12:59] *** frost left
[13:34] *** nine left
[13:34] *** nine joined
[14:25] *** human_blip left
[14:26] *** human_blip joined
[14:55] <Xliff> .tell Voldenet Is it always *-2 for Backtrace?

[14:55] <tellable6> Xliff, I'll pass your message to Voldenet

[14:57] <Xliff> So... that's 1,000,000 lines of Raku I've written since 2018-06-18.

[14:57] <Xliff> Soon to be released, as soon as I can find the time to update CURI

[14:57] <Xliff> Special thanks to this channel for its support over that entire time.

[15:15] <andinus> 0/join #raku-infra

[15:17] <discord-raku-bot> <Nemokosch> kudos for Template::Nested::Fast

[15:20] * [Coke] tries to grok what a unicode "Presentation form" is other than "extra codepoints that shouldn't have been needed"

[15:20] <[Coke]> Xliff++

[15:20] <lizmat> [Coke]: isn't that another way to describe synthetic codepoints ?

[15:23] <[Coke]> m: (8942, 65049).map(*.chr.uniname)>>.say

[15:23] <camelia> rakudo-moar d1ca18f17: OUTPUT: «VERTICAL ELLIPSIS␤PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS␤»

[15:23] <Xliff> Thanks, [Coke]

[15:23] <[Coke]> m: (8942, 65049).map(*.chr)>>.say

[15:23] <camelia> rakudo-moar d1ca18f17: OUTPUT: «⋮␤︙␤»

[15:23] <lizmat> [Coke] TIL

[15:26] *** linkable6 left
[15:26] *** evalable6 left
[15:27] <[Coke]> I was just looking for the ⋮ so I could cut and paste it into an email, and then got sucked down this rabbit hole. :)

[15:27] *** evalable6 joined
[15:29] *** linkable6 joined
[15:35] *** Sgeo joined
[15:35] *** rf joined
[15:48] <tbrowder__> moritz: thanks!

[15:53] *** Xliff left
[16:10] *** shmup joined
[16:52] *** ab5tract joined
[17:47] *** sena_kun joined
[17:50] *** merp left
[17:51] *** merp joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:11] *** ab5tract left
[18:11] *** ab5tract joined
[18:24] *** ab5tract left
[18:33] *** ab5tract joined
[18:46] *** deoac joined
[19:08] *** ab5tract left
[19:16] *** ab5tract joined
[19:30] <tonyo> .

[19:31] <tonyo> [Coke]: it's right there ^

[19:31] <[Coke]> tonyo: *thwap*

[19:31] <[Coke]> I was sad it wasn't in there under "Hamburger"

[20:16] *** evalable6 left
[20:16] *** linkable6 left
[20:17] *** evalable6 joined
[20:18] *** linkable6 joined
[20:30] <tonyo> you didn't guess `presentation form for vertical horizontal ellipsis`?

[20:32] <tonyo> the hamburger is a bit wider, no?

[20:32] <tonyo> m: 2630.chr.uniname.say

[20:32] <camelia> rakudo-moar c10767e53: OUTPUT: «<reserved-0A46>␤»

[20:33] <tonyo> m: 2630.chr.say

[20:33] <camelia> rakudo-moar c10767e53: OUTPUT: «੆␤»

[20:34] <tonyo> m: 9776.chr.uniname.say

[20:34] <camelia> rakudo-moar c10767e53: OUTPUT: «TRIGRAM FOR HEAVEN␤»

[20:35] <tonyo> m: 9776.chr.say

[20:35] <camelia> rakudo-moar c10767e53: OUTPUT: «☰␤»

[20:56] <lucs> What's up with Match?: https://gist.github.com/lucs/0d659fe98c9b70bc0304006f005b0996

[20:57] <lucs> It fails that way only when run from the REPL.

[20:57] <[Coke]> isn't there a step required after augment to make the classes realize they've been augmented?

[20:57] <[Coke]> afk

[20:57] <lucs> Well, Int and Str appear not to need that.

[21:18] *** linkable6 left
[21:18] *** evalable6 left
[21:19] *** linkable6 joined
[21:21] *** evalable6 joined
[21:23] *** greaser|q left
[21:23] *** greaser|q joined
[21:23] *** greaser|q is now known as GreaseMonkey

[22:07] <tonyo> lucs: that looks a bit strange, are you sure that Baz is being loaded correctly?

[22:07] <discord-raku-bot> <lucs> Well, all the code is there. Not sure if anything else could be interfering.

[22:09] <tonyo> put Baz.rakumod in `/tmp/monkey/lib/`

[22:10] <tonyo> then run that

[22:10] <lucs> Sure, hang on...

[22:10] *** deoac left
[22:10] <tonyo> run it with `raku -I/tmp/monkey -MBaz`

[22:13] <lucs> Running from CWD /tmp/monkey, it can't find Baz, but

[22:13] <lucs> from the same CWD, `raku -I/tmp/monkey/lib -MBaz` runs correctly, but with the same Match error.

[22:14] <lucs> Oh wait, not quite the same error.

[22:15] <lucs> No, sorry, my mistake, exact same error.

[22:16] <tonyo> put a die in that file and see if it's really loading

[22:16] <tonyo> something is wonky, you shouldn't have to call Match.^compose

[22:16] <lucs> Er, it must be loading, else the 42.foo for example would fail, no?

[22:16] <tonyo> what version of raku?

[22:16] <lucs> 2023.02

[22:16] <tonyo> try adding a Match.^compose(Match) to baz

[22:17] <tonyo> hm, same version as what i'm testing with

[22:17] <lucs> It doesn't fail like mine for you?

[22:17] <lucs> (trying ^compose, just a minute)

[22:17] <tonyo> it doesn't

[22:19] <tonyo> https://gist.github.com/tonyooooooo/c1f6e57c10e45909b378d68241c12892

[22:21] <lucs> Er, that '^compose' line leads to: Too many positionals passed; expected 2 arguments but got 3

[22:22] <lucs> I trimmed my code to the same as yours, I stil get the error.

[22:23] <lucs> The one apparent difference I have Readline (or something, can't remember), because I don't get your "You may want..." message.

[22:23] <lucs> *difference is

[22:24] <lucs> One weird thing I noticed:

[22:25] <lucs> If the class is not augmented, `('a' ~~ /./).foo.say` simply complains with:

[22:25] <lucs> No such method 'foo' for invocant of type 'Match'

[22:25] *** Xliff joined
[22:26] <Xliff> \o

[22:26] <Xliff> What is the difference between .pick and .roll?

[22:26] <lucs> But with the augment, this is added to that message:

[22:26] <lucs> Found 'foo' on type 'Match'

[22:27] <lucs> Hi Xliff 

[22:27] <lucs> (in the middle of something here :-)

[22:28] <Xliff> lucs: No worries.

[22:29] <vrurg> Xliff: pick guarantees each element from the list to appear only once.

[22:29] <lucs> Hmm... Actually, it's going to be the end (temporarily) for me, gotta run, going to a conference.

[22:29] <lucs> tonyo: I'll be back later; if you have any ideas, please post, I'll read later.

[22:29] <vrurg> People, don't use augment. Just don't....

[22:29] <lucs> Thanks.

[22:29] <Xliff> vrurg: Why not?

[22:30] <vrurg> Because it is global.

[22:30] <Xliff> So?

[22:30] <vrurg> It is likely to create problems.

[22:30] <Xliff> So are most things in the language.

[22:30] <lucs> vrurg: Hmm... I'll have questions about that later then.

[22:31] <lucs> Buhbye for now!

[22:31] <vrurg> Xliff: not _that_ way.

[22:31] <Xliff> vrurg: I understand most of the issues with augment.

[22:31] * vrurg already cannot use Prettier::Table because there is an augment in its dependency.

[22:31] <Xliff> I just find it annoying that _I_ have found it useful with careful application. Yet everyone councels against its use.

[22:32] <Xliff> If this is true then why is it offered to begin with?

[22:32] <vrurg> Xliff: I consider it a mistake. It helps in the core, but that's the only where I would allow it.

[22:33] <vrurg> Better than augment we have mixins. 

[22:33] <Xliff> So you are saying it should be an implementation detail?

[22:33] <Xliff> And not a part of the public language?

[22:34] <vrurg> Kind of. But even more strict because implementation details is available for use.

[22:36] <vrurg> One exception to that, perhaps, is using it within same distribution on own classes. That would be controllable and safe mostly.

[22:37] <vrurg> But when Listicles is using it to extend List/Array functionality – I get a big "oops" with parameterized Arrays. Even though the problem is caused by a bug in the compiler or optimizer.

[22:38] * vrurg will be away for ~1hr.

[22:46] *** Vyrus left
[22:52] *** sena_kun left
[23:00] *** Vyrus joined
[23:46] *** bigdata joined
[23:47] <gfldex> To me augment breaks composebility between authors. And I know that I will not be the same author in 2 years time then today. It's a very powerful tool and as such can backfire in the most spectacular way.

[23:48] <gfldex> However, I like to know that I got the nuclear option, even if I don't want to need to use it.

[23:49] <gfldex> I did use it to great effect to learn about the guts of the language and I recomend anyone to play with augment for that reason.

[23:50] <gfldex> Playing with fire is fine, burning the house down is not. :)

