[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:04] <tonyo> hah, thanks.  `is factory` would be an interesting way to set defaults to things

[01:02] *** evalable6 left
[01:02] *** linkable6 left
[01:03] *** xinming left
[01:04] *** linkable6 joined
[01:04] *** evalable6 joined
[01:06] *** xinming joined
[01:23] *** rf left
[01:25] *** derpydoo joined
[02:11] *** DarthGandalf left
[02:12] *** DarthGandalf joined
[02:15] *** hideocho joined
[02:15] *** squashable6 left
[02:16] *** squashable6 joined
[02:17] *** teatime left
[02:18] *** teatime joined
[02:29] *** teatwo joined
[02:33] *** teatime left
[03:24] *** hideocho left
[04:22] *** phogg` joined
[04:22] *** phogg left
[04:38] *** bigdata joined
[04:44] *** zara joined
[05:10] *** zara left
[05:13] *** bigdata left
[05:54] *** Xliff joined
[05:55] <Xliff> Has anyone tried Google's Bard?

[05:55] <tellable6> 2023-05-22T00:45:18Z #raku <Voldenet> Xliff: you can easily trigger malformed utf-8 sequence by using `255` as first byte with no following bytes – it's fatal because such sequence is not valid utf8 and probably some different encoding

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:02] <Xliff> .tell Voldenet: Thanks. That might help me write a golf so I can determine how to properly detect and handle such occurrences.

[06:02] <tellable6> Xliff, I'll pass your message to Voldenet

[06:12] <Voldenet> Xliff: there was the later part, `Buf.new(255).decode("utf8-c8").say`

[06:12] <Voldenet> it's pretty sane way to handle invalid unicode variants

[06:13] <Xliff> https://gist.github.com/Xliff/4c39e2e85ab71da61b3aa427414ae82c

[06:14] <Xliff> m: Buf.new(255).decode("utf8-c8").say

[06:14] <camelia> rakudo-moar c33c5538b: OUTPUT: «􏿽xFF␤»

[06:14] <Xliff> Voldenet: Humm... no error.

[06:14] <Xliff> m: Buf.new(255).decode("utf8").say

[06:14] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤  in block <unit> at <tmp> line 1␤␤»

[06:14] <Xliff> There it is.

[06:15] <Voldenet> `Second, you can use the is-valid-utf8 method to check if a string is in a valid UTF-8 format.` :D

[06:15] <Voldenet> i really love things chatbots invent

[06:15] <Voldenet> "just use the non-existing-library, here's the snippet…"

[06:15] <Xliff> m: use warnings qw(warn-on-malformed-utf8); Buf.new(255).decode("utf8-c8").say; 42.say

[06:15] <camelia> rakudo-moar c33c5538b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routines:␤    qw used at line 1␤    warn-on-malformed-utf8 used at line 1␤␤»

[06:16] <Voldenet> obviously :D

[06:16] <Xliff> m: use warnings <warn-on-malformed-utf8>; Buf.new(255).decode("utf8-c8").say; 42.say

[06:16] <camelia> rakudo-moar c33c5538b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find warnings in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/shar…»

[06:16] <Xliff> Oh you are kidding me! A hallucination?

[06:16] <Xliff> m: use warnings 'warn-on-malformed-utf8'; Buf.new(255).decode("utf8").say; 42.say

[06:16] <camelia> rakudo-moar c33c5538b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find warnings in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/shar…»

[06:16] <Xliff> Must have confused "Raku" with "Perl"

[06:17] <Xliff> Wow!

[06:17] <Xliff> Will have to update my gist.

[06:17] <Voldenet> except `warn-on-malformed-utf8` doesn't exist anywhere

[06:17] *** gcd left
[06:18] <Xliff> m: { CATCH { default { when .contains('malformed') { .message.say; .resume }; }; }; }; Buf.new(255).decode("utf8").say

[06:18] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤  in block <unit> at <tmp> line 1␤␤»

[06:18] <Xliff> m: { CATCH { default { when .contains('Malformed') { .message.say; .resume }; }; }; }; Buf.new(255).decode("utf8").say; 42.say

[06:18] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤  in block <unit> at <tmp> line 1␤␤»

[06:18] <Xliff> m: { CATCH { default { when .message.contains('Malformed') { .message.say; .resume }; }; }; }; Buf.new(255).decode("utf8").say; 42.say

[06:18] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤  in block <unit> at <tmp> line 1␤␤»

[06:19] <Xliff> m: { CATCH { default { when .message.contains('Malformed') { .message.say; .resume }; }; }; Buf.new(255).decode("utf8").say; 42.say }

[06:19] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:19] <Xliff> WTF!?

[06:19] <Voldenet> it's not resumable

[06:19] <Xliff> Why not

[06:19] <Xliff> m: { CATCH { default { when .message.contains('Malformed') { .message.say; .resume }; }; }; Buf.new(255).decode("utf8").say; 42.say }; 42.say

[06:19] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:19] <Xliff> So there's no way I can prevent that from being fatal?

[06:19] <Voldenet> utf8 decoder won't decode invalid utf8

[06:19] <Voldenet> utf-c8 can

[06:20] <Xliff> But I have no control over how Cro chooses to print strings.

[06:20] <Xliff> And that's where that exception comes from.

[06:20] <Xliff> And I need my code to be _stable_ and you're telling me a malformed request can crash what I write at any time!?

[06:21] <Voldenet> hmm, it should crash only for one specific client, not the whole server

[06:21] <Xliff> No. Whole server.

[06:21] <Xliff> m: { CATCH { default { when .message.contains('Malformed') { .message.say; .resume }; };  Buf.new(255).decode("utf8").say; 42.say }; 42.say

[06:21] <camelia> rakudo-moar c33c5538b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 355).decode("utf8").say; 42.say }; 42.say⏏<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier lo…»

[06:21] <Xliff> m: { CATCH { default { when .message.contains('Malformed') { .message.say; }; };  }; Buf.new(255).decode("utf8").say; 42.say }; 42.say

[06:21] <camelia> rakudo-moar c33c5538b: OUTPUT: «Malformed UTF-8 at line 1 col 1␤42␤»

[06:21] <Xliff> OK. That at least solves that problem.

[06:22] <Voldenet> m:  { CATCH { default { .resume } }; Buf.new(255).decode("utf8").say; }

[06:22] <camelia> rakudo-moar c33c5538b: OUTPUT: «This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:22] <Xliff> So without .resume, it will terminate the block, but not the server.

[06:22] <Xliff> IF you make sure to surround the problematic code with curlies.

[06:23] <Xliff> So... none of that last bit was true? LOL!

[06:23] <Xliff> I will have to rewrite.

[06:25] <Voldenet> in C# you can do something like `app.Use((next) => async (ctx) => { try { await next(ctx); } catch { ctx.Response.Write("error"); } });`

[06:25] <Voldenet> maybe in cro it's possible to write middleware that'd handle known errors

[06:27] <Voldenet> and you can do that https://stackoverflow.com/questions/69386343/how-to-implement-a-global-exception-handling-in-raku-cro-application

[06:28] *** gcd joined
[06:28] <Xliff> I think I have something like that in the server code, but not in the sentinel code.

[06:29] <Xliff> sentinel code runs the server code but echos the output.

[06:29] <Xliff> So anything bad that comes from cro gets sent to the sentinel via react/whenever. 

[06:30] <Xliff> So I have something like the above CATCH in the react block now, where there is an extra scope surrounding the whenever blocks that emit what comes from the server.

[06:30] <Xliff> So I will have to test on that to see if it works. 

[06:54] *** jpn joined
[06:58] *** jpn left
[07:08] *** kjp left
[07:11] *** kjp joined
[07:18] *** Sauvin left
[07:21] *** sjn left
[07:21] *** Sauvin joined
[07:21] *** sjn joined
[07:21] *** merp left
[07:23] *** Bocaneri joined
[07:23] *** Bocaneri is now known as Guest4160

[07:25] *** Sauvin left
[07:27] *** merp joined
[07:28] *** abraxxa joined
[07:29] *** abraxxa1 joined
[07:33] *** abraxxa left
[07:37] *** Guest4160 left
[07:43] *** Sauvin joined
[07:52] *** nebuchadnezzar left
[08:00] *** dakkar joined
[08:09] *** sena_kun joined
[08:11] *** Sgeo left
[08:12] *** gcd left
[08:14] *** gcd joined
[08:47] *** abraxxa1 left
[09:28] *** jpn joined
[09:49] *** abraxxa joined
[09:54] <discord-raku-bot> <Nemokosch> m: 1 + 2 :add - 4

[09:54] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== MVMArray: Can't pop from an empty array 

[09:55] <discord-raku-bot> <Nemokosch> did I drill a hole in the parsing?

[09:56] <lizmat> looks like: the RakuAST grammar also fails, but differently: No such method 'add-colonpair' for invocant of type 'RakuAST::ApplyInfix'

[09:56] <lizmat> which actually describes the issue better :-)

[09:58] <lizmat> infixes are actually allowed to have nameds:

[09:58] <lizmat> m: sub infix:<foo>($a, $b, :$add) { dd $a, $b, $add }; 1 foo 2 :add

[09:58] <camelia> rakudo-moar 6b5171d67: OUTPUT: «1␤2␤Bool::True␤»

[09:59] <lizmat> so I guess this will sort itself out in RakUAST

[10:01] <discord-raku-bot> <Nemokosch> yes, that's kind of where I was going

[10:02] <discord-raku-bot> <Nemokosch> it works okay with parens until the subtraction

[10:49] *** linkable6 left
[10:49] *** evalable6 left
[10:52] *** linkable6 joined
[10:52] *** evalable6 joined
[11:02] *** patterner_____ left
[11:08] *** jpn left
[11:11] *** jpn joined
[11:11] *** derpydoo left
[11:27] *** jpn left
[11:42] *** jpn joined
[11:42] *** squashable6 left
[11:45] *** squashable6 joined
[11:49] *** jpn left
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:13] *** jpn joined
[12:22] * lizmat clickbaits https://rakudoweekly.blog/2023/05/22/2023-21-maxcinating/

[12:44] *** jpn left
[13:06] *** abraxxa1 joined
[13:06] *** abraxxa left
[14:02] *** abraxxa1 left
[14:11] *** abraxxa joined
[14:14] *** teatwo left
[14:15] *** teatwo joined
[14:17] *** jpn joined
[14:18] *** teatwo left
[14:18] *** teatwo joined
[14:26] *** abraxxa left
[15:07] *** Sgeo joined
[15:09] <tonyo> .

[15:17] *** razetime joined
[15:20] *** swaggboi left
[16:05] *** swaggboi joined
[16:22] *** linkable6 left
[16:23] *** linkable6 joined
[16:38] *** dakkar left
[17:21] *** razetime left
[17:29] *** archenoth joined
[17:29] *** archenoth is now known as arch

[17:41] *** jpn left
[18:00] <discord-raku-bot> <librasteve> hey / ... what is :add:?

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:03] <lizmat> :add is a named argument to &infix:<+> in the above example ?

[18:21] <Voldenet> m: sub infix:<foo>($a, $b, |c) { dd $a, $b, c }; (1 foo 2 :fun:stuff) foo 3 :this<is>

[18:21] <camelia> rakudo-moar 01e822248: OUTPUT: «1␤2␤\(:fun, :stuff)␤Nil␤3␤\(:this("is"))␤»

[18:28] *** atweedie left
[18:28] *** patrickb left
[18:28] *** clarkema left
[18:30] *** atweedie joined
[18:31] *** clarkema joined
[18:31] *** patrickb joined
[18:36] *** abraxxa-home joined
[19:17] *** clarkema1 left
[19:26] *** abraxxa-home left
[19:26] *** abraxxa-home joined
[19:36] *** jpn joined
[19:38] *** abraxxa-home left
[19:38] *** abraxxa-home joined
[19:41] *** jpn left
[19:59] <discord-raku-bot> <librasteve> m: sub infix:<+>($a, $b, |c) { $a - $b - c<add> }; say 1 + 2 :add<7>;

[19:59] <discord-raku-bot> <Raku eval>  -8 

[19:59] <discord-raku-bot> <librasteve> oooh

[19:59] *** abraxxa-home left
[20:01] *** abraxxa-home joined
[21:01] *** greppable6 left
[21:01] *** committable6 left
[21:01] *** evalable6 left
[21:01] *** nativecallable6 left
[21:01] *** unicodable6 left
[21:01] *** releasable6 left
[21:01] *** bloatable6 left
[21:01] *** linkable6 left
[21:01] *** notable6 left
[21:01] *** statisfiable6 left
[21:01] *** shareable6 left
[21:01] *** reportable6 left
[21:01] *** benchable6 left
[21:01] *** coverable6 left
[21:01] *** bisectable6 left
[21:01] *** sourceable6 left
[21:01] *** quotable6 left
[21:01] *** tellable6 left
[21:01] *** tellable6 joined
[21:01] *** nativecallable6 joined
[21:01] *** committable6 joined
[21:01] *** bloatable6 joined
[21:02] *** releasable6 joined
[21:02] *** evalable6 joined
[21:02] *** quotable6 joined
[21:02] *** bisectable6 joined
[21:03] *** reportable6 joined
[21:03] *** benchable6 joined
[21:03] *** sourceable6 joined
[21:03] *** greppable6 joined
[21:03] *** linkable6 joined
[21:03] *** statisfiable6 joined
[21:03] *** notable6 joined
[21:03] *** unicodable6 joined
[21:04] *** shareable6 joined
[21:04] *** coverable6 joined
[21:08] <discord-raku-bot> <librasteve> what is the best way to recast a Str or Int to an IntStr?

[21:09] <guifa> IntStr.new(Int,Str)

[21:10] *** vrurg left
[21:11] <discord-raku-bot> <librasteve> guifa: tx! but that is quite heavy ... is there an idioamtic way like '+' for .Numeric or '~' for .Stringy?

[21:12] <guifa> No, I don't think so.  IntStr was created for a pretty particular purpose (qw strings)

[21:12] <discord-raku-bot> <librasteve> or even a methodic way like .Allomorph?

[21:13] <discord-raku-bot> <librasteve> seems like it is easy to make one with eg <1> literal

[21:14] <guifa> sub prefix:<+̃>($x) { IntStr.new: $x.Numeric, $x.Str } 

[21:15] *** sena_kun left
[21:15] <discord-raku-bot> <librasteve> ^^ ++

[21:16] <guifa> oh wait

[21:16] <guifa> there's already a unicode character for it

[21:16] <guifa> ⨤ U+2A24 and ⨦ U+2A26

[21:17] <guifa> I actually use a the allomorph for DateTime::Timezones to return the name of the timezone AND its offset for .timezone

[21:17] *** vrurg joined
[21:19] <discord-raku-bot> <Nemokosch> allomorph of what types?

[21:19] <discord-raku-bot> <librasteve> yeah - I had a lightbulb moment when I realised that it is used to keep the original string and the parsed number together

[21:20] <guifa> string (name) and number (offset)

[21:28] *** vrurg left
[21:28] *** vrurg joined
[21:29] <discord-raku-bot> <librasteve> I would vote for this to be in core

[21:29] <discord-raku-bot> <librasteve> using .Stringy

[21:38] <guifa> we already haev Stringish, which is the equiavlent of Numeric but for strings

[21:50] <guifa> I think the ideal would be for IntStr to define some COERCE methods

[21:51] <lizmat> PRs welcome :-)

[21:52] <discord-raku-bot> <librasteve> https://docs.raku.org/type/Stringy

[21:52] <discord-raku-bot> <librasteve> yeah - that would probably be more sensible

[21:53] <guifa> err I guess it is Stringy oops I always forget which ones are -ive, -y, or -ish

[21:53] <discord-raku-bot> <librasteve> and +̃ would need to be a multi to cover all the allomorphs

[21:55] <discord-raku-bot> <librasteve> which could be a fiddle since you want to accept the Str form and you don't know what kind of Numeric that is

[21:56] <discord-raku-bot> <librasteve> only a top programmer could do such a thing

[21:57] <tonyo> haha

[22:03] *** squashable6 left
[22:05] *** squashable6 joined
[22:12] <discord-raku-bot> <Nemokosch> sounds like nightmare fuel

[22:17] *** abraxxa-home left
[22:17] *** abraxxa-home joined
[22:17] *** abraxxa-home left
[22:19] *** abraxxa-home joined
[22:30] <guifa> random q: could I potentially use Proc::Async to launch a script but have it stay alive after the launcher has exited?

[22:31] <ugexe> yes

[22:36] <guifa> what would be the command?  I've been thinking about trying to toy with the idea of having Intl::CLDR (which has an unfortunate init time even in the native ICU libraries) exist as a daemon of sorts to improve response times and then just exiting after some preset timeout period

[22:37] <guifa> (that's basically what all OSs do after all to save resources)

[22:41] <leont> That sounds like you want ⨤ to by a synonym for val()?

[22:44] <discord-raku-bot> <Nemokosch> val cannot take an Int, for sure

[22:47] *** abraxxa-home left
[22:47] <discord-raku-bot> <Nemokosch> I would be quite curious how one uses these allomorphs in a way that they seem like a decent tradeoff

[22:49] <guifa> The primary (and really only intended use) is for qw stuff so I can say @foo = <1 2 3 4 5> or <a b c d e> and not have to worry about whether I want string or int.  I don't think it was really anticipated that people would make them manually, but it worked well for me since DateTime by default returns an offset for both, well, .offset and .timezone, but in my rewrite, a string like 'Europe/Madrid' makes sense for timezone but doesn't

[22:49] <guifa>  break anything that uses it expecting an offset

[22:51] <ugexe> i mean you can run `raku -e 'start { shell q|echo $$ && sleep 30|; }; sleep 1'` and then see that pid still exists after the raku command stops

[22:57] <guifa> ah nice!

[22:57] <guifa> thanks.  now to figure out the best way to detect if such a process is currently ongoing (and launch if not) within the module context

[22:57] *** kaskal left
[22:58] *** kaskal- joined
[23:01] *** euandreh left
[23:03] <ugexe> in the process you spawn you can check for the parent pid, and if its zero assume its now a zombie process

[23:03] <ugexe> not sure about the other way around other than keeping track of the pid

[23:03] <ugexe> which even then it might get reused

[23:05] <ugexe> i guess you could have the daemon launch a child process that monitors its own parent pid, and if it changes to 0 to relaunch the parent process

[23:05] <leont> guifa: yeah, .timezone returning something that isn't a timezone is a PITA

[23:16] <discord-raku-bot> <Nemokosch> for operators, you don't need IntStr, a mere Int or Str will just work fine, "you don't have to worry" whether it's an int or a string

[23:17] <discord-raku-bot> <Nemokosch> and the cost is rather big, not only because now you start making random combinations in an n squared fashion but because of the trap I said a couple of days ago even more

[23:18] <discord-raku-bot> <Nemokosch> namely that you can have something that passes all Int type constraints, it acts like, say, 5 in all situations where it needs to be a number, and then it suddenly turns out not to be an element of a set that does contain 5 the integer

[23:21] <discord-raku-bot> <Nemokosch> it also challenges the concept of type conversions. If an IntStr value is an Int value, then one could expect the conversion to Int to be an identity, and if you do Int(<5>), that is indeed <5>

[23:21] <discord-raku-bot> <Nemokosch> however, if you do <5>.Int, that's suddenly 5

[23:30] <discord-raku-bot> <Nemokosch> all in all, it seems to me that one has a lot more to worry about if they need to be prepared to deal with values that seem the same but in fact aren't the same. Also it introduces a kind of diamond problem: if you coerce Str to Bool, that's an empty check - unless that Str happens to be an allomorph with a number, in which case all character sequences that describe the number 0 some way, can give an unexpected

[23:30] <discord-raku-bot> False.

[23:31] <discord-raku-bot> <Nemokosch> I would say this is definitely "something to worry about", especially if you just didn't expect a number to show up there at all. Eventually, you might end up writing .Int and .Str that you have sworn to avoid.

