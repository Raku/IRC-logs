[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:02] *** Xliff left
[00:04] *** jpn left
[00:14] *** Manifest0 left
[00:23] *** andydude joined
[00:31] *** squashable6 left
[00:31] *** squashable6 joined
[00:35] *** rf joined
[00:46] <rf> Evening folks

[00:55] *** andydude left
[00:58] *** andydude joined
[00:59] *** derpydoo joined
[01:03] *** xinming left
[01:05] *** xinming joined
[01:49] *** jpn joined
[01:54] *** jpn left
[02:17] *** teatwo joined
[02:20] *** tea3po left
[02:22] *** teatwo left
[02:22] *** teatwo joined
[02:43] *** jpn joined
[02:48] *** jpn left
[03:13] *** andydude left
[03:23] *** andinus joined
[03:25] *** rf left
[03:38] *** jpn joined
[03:41] *** andydude joined
[03:43] *** jpn left
[04:05] *** jpn joined
[05:05] *** coverable6 left
[05:05] *** unicodable6 left
[05:05] *** squashable6 left
[05:05] *** bisectable6 left
[05:05] *** notable6 left
[05:05] *** committable6 left
[05:05] *** evalable6 left
[05:05] *** reportable6 left
[05:05] *** sourceable6 left
[05:05] *** greppable6 left
[05:05] *** bloatable6 left
[05:05] *** nativecallable6 left
[05:05] *** benchable6 left
[05:05] *** statisfiable6 left
[05:05] *** shareable6 left
[05:05] *** linkable6 left
[05:05] *** tellable6 left
[05:05] *** releasable6 left
[05:05] *** quotable6 left
[05:05] *** coverable6 joined
[05:05] *** bloatable6 joined
[05:06] *** greppable6 joined
[05:06] *** notable6 joined
[05:06] *** quotable6 joined
[05:06] *** benchable6 joined
[05:07] *** shareable6 joined
[05:07] *** unicodable6 joined
[05:07] *** sourceable6 joined
[05:07] *** committable6 joined
[05:07] *** statisfiable6 joined
[05:07] *** nativecallable6 joined
[05:07] *** tellable6 joined
[05:07] *** reportable6 joined
[05:07] *** bisectable6 joined
[05:07] *** evalable6 joined
[05:08] *** squashable6 joined
[05:08] *** linkable6 joined
[05:08] *** releasable6 joined
[05:39] *** jpn left
[05:51] *** jpn joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:11] *** andinus left
[06:14] *** andinus joined
[06:18] *** andydude left
[06:35] *** andydude joined
[06:46] *** jpn left
[06:50] *** bigdata left
[07:44] *** derpydoo left
[07:45] *** andydude left
[07:55] *** sena_kun joined
[07:56] *** Manifest0 joined
[07:57] *** zara joined
[08:02] *** zara left
[08:06] *** dakkar joined
[08:10] *** Sgeo left
[08:24] *** jpn joined
[09:22] *** sena_kun left
[09:29] *** squashable6 left
[09:30] *** squashable6 joined
[09:50] *** euandreh left
[10:04] *** sena_kun joined
[10:30] *** Voldenet_ joined
[10:30] *** jpn left
[10:30] *** Voldenet left
[10:30] *** Voldenet_ is now known as Voldenet

[10:32] *** sena_kun left
[10:32] *** sena_kun joined
[10:38] *** eseyman left
[10:38] *** jpn joined
[10:39] *** manu__ joined
[10:40] *** manu__ is now known as eseyman

[11:04] *** dakkar left
[11:47] *** perlmaros left
[11:51] *** euandreh joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:05] <[Coke]> bug in REPL? if I "dd Nil", it outputs Nil twice.

[12:05] <[Coke]> normally if we emit output, you just get the output, not the result of the op

[12:06] <[Coke]> ah, it's OUT vs. ERR - should we be doing the same trick on following ERR so we can determine if output was made on either channel, not just OUT?

[12:08] <lizmat> the output on ERR could be a warning

[12:08] <lizmat> so then you still would want to see the actual value on STDOUT

[12:08] <lizmat> that's why OUT is checked only

[12:09] <[Coke]> ... OK, I figured there was a good reason it was setup this way

[12:10] *** euandreh left
[12:25] <leont> What is the computer science word for what subset does? I'm sure I've seen it come by at some point.

[12:26] <lizmat> refinement type ?

[12:26] <lizmat> type refinement ?

[12:30] <leont> Yeah, thank you

[12:34] <[Coke]> different REPL question - I occasionally miss the ability you had in tcl to type "ls" or "dir" in the REPL and have it auto-dispatch if it wasn't part of the language. 

[12:35] <[Coke]> ... actual question: anyone else ever want that feature? (not that it's too hard to type run('ls'))

[12:37] <Geth> ¦ App-Rakubrew/main: 26 commits pushed by (Nick Logan)++, (Patrick Böker)++, (David Hoekman)++, Jasmin++

[12:37] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/compare/2048c084c55d^...1583bb4cc58d

[12:39] <lizmat> [Coke] I think the tricky bit is finding out what isn't part of the language, and what is a compilation error caused by user misunderstanding

[12:48] <Geth> ¦ App-Rakubrew/main: 4 commits pushed by (Patrick Böker)++

[12:48] <Geth> ¦ App-Rakubrew/main: 301fd44f12 | Moar master -> main

[12:48] <Geth> ¦ App-Rakubrew/main: d9a9965140 | Change Rakubrew default branch to main

[12:48] <Geth> ¦ App-Rakubrew/main: b48d249e13 | Make do-release.sh executable

[12:48] <Geth> ¦ App-Rakubrew/main: 9c0d9842fb | Version 37

[12:48] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/compare/1583bb4cc58d...9c0d9842fb31

[12:50] *** perlmaros joined
[13:00] *** euandreh joined
[13:02] <Geth> ¦ App-Rakubrew/main: bef1570c54 | (Patrick Böker)++ | release-stuff/do-release.sh

[13:02] <Geth> ¦ App-Rakubrew/main: Small release script fixup

[13:02] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/bef1570c54

[13:05] *** euandreh left
[13:10] *** euandreh joined
[13:17] *** euandreh left
[13:20] *** euandreh joined
[13:30] *** andydude joined
[13:45] *** andydude left
[13:52] *** andydude joined
[14:21] *** teatwo left
[14:21] *** teatwo joined
[14:40] *** euandreh left
[15:20] *** euandreh joined
[15:22] *** Sgeo joined
[15:25] *** jpn left
[15:34] *** thowe joined
[15:37] *** Oshawott left
[15:49] <[Coke]> sure, in tcl that was easier because everything started with a command

[15:49] <[Coke]> maybe a new prefix operator just in repl that does a run

[15:49] <[Coke]> something like !!ls

[15:51] *** tea3po joined
[15:54] *** teatwo left
[16:54] *** sourceable6 left
[16:54] *** committable6 left
[16:54] *** unicodable6 left
[16:54] *** coverable6 left
[16:54] *** bloatable6 left
[16:54] *** linkable6 left
[16:54] *** greppable6 left
[16:54] *** quotable6 left
[16:54] *** statisfiable6 left
[16:54] *** benchable6 left
[16:54] *** tellable6 left
[16:54] *** squashable6 left
[16:54] *** bisectable6 left
[16:54] *** nativecallable6 left
[16:54] *** evalable6 left
[16:54] *** releasable6 left
[16:54] *** shareable6 left
[16:54] *** reportable6 left
[16:54] *** notable6 left
[16:55] *** greppable6 joined
[16:55] *** evalable6 joined
[16:55] *** nativecallable6 joined
[16:55] *** sourceable6 joined
[16:56] *** benchable6 joined
[16:56] *** notable6 joined
[16:56] *** bisectable6 joined
[16:56] *** shareable6 joined
[16:56] *** committable6 joined
[16:56] *** squashable6 joined
[16:56] *** tellable6 joined
[16:56] *** bloatable6 joined
[16:56] *** unicodable6 joined
[16:57] *** linkable6 joined
[16:57] *** statisfiable6 joined
[16:57] *** quotable6 joined
[16:57] *** releasable6 joined
[16:57] *** coverable6 joined
[16:57] *** reportable6 joined
[17:01] *** sena_kun left
[17:35] *** dogbert17 joined
[17:37] *** sena_kun joined
[17:58] <leont> What's the incantation for "please export everything this other module exports? I'm currently at «::EXPORT::functions = ::SQL::Abstract::EXPORT::functions» but that gives me an error

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:10] <lizmat> you have an EXPORT sub ?

[18:14] <leont> That doesn't take tags, does it?

[18:23] <lizmat> EXPORT sub can take named args

[18:43] *** rf joined
[18:43] <rf> Afternoon folks

[18:50] *** jpn joined
[18:55] *** jpn left
[18:56] <leont> lizmat: do you have a working example of that?

[19:26] *** rf left
[19:27] *** rf joined
[19:45] *** rf left
[19:46] *** rf joined
[20:53] *** squashable6 left
[20:53] *** squashable6 joined
[21:08] *** jpn joined
[21:12] *** euandreh left
[21:13] *** euandreh joined
[21:16] *** jpn left
[21:17] *** rf left
[21:22] <leont> «Too many positionals passed to 'select'; expected 2 arguments but got 2» go home Raku you're drunk

[21:22] *** rf joined
[21:24] <leont> Apparently, named arguments after a capture argument blows up like that

[21:26] <leont> m: sub function(|args, :$named) { ... }; function(1)

[21:26] <camelia> rakudo-moar 6f482ca00: OUTPUT: «Too many positionals passed to 'function'; expected 1 argument but got 1␤  in sub function at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:34] *** rf left
[21:36] *** jpn joined
[21:39] <discord-raku-bot> <Nemokosch> yes; did I not report that?

[21:41] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/issues/5102

[21:45] *** jpn left
[21:51] *** sena_kun left
[21:56] *** jpn joined
[21:57] *** andydude left
[22:01] *** jpn left
[22:05] *** andydude joined
[23:32] *** euandreh left
[23:41] <kybr> m: (1..4).List

[23:41] <camelia> rakudo-moar 6f482ca00: ( no output )

[23:42] <kybr> m: (1..4).List.say

[23:42] <camelia> rakudo-moar 6f482ca00: OUTPUT: «(1 2 3 4)␤»

[23:42] <kybr> m: (4..1).List.say

[23:42] <camelia> rakudo-moar 6f482ca00: OUTPUT: «()␤»

[23:42] <kybr> why?

[23:43] *** euandreh joined
[23:47] <kybr> i'm sure there's a good reason that (4..1).List does not become (1,2,3,4) but instead () but it is not coming to me.

[23:47] <kybr> err (4,3,2,1)

