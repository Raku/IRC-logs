[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:24] *** tg57 joined
[00:24] *** tg57 left
[00:36] <pingu> how come constant does not need my or our

[00:37] <Voldenet> if it's a constant, scope doesn't matter

[00:38] <pingu> hmm

[00:38] <pingu> I'm not sure about that

[00:39] <pingu> in C theres also static const locals and static const globals

[00:39] <pingu> as well as global const and local consts

[00:40] <pingu> then again C is terrifying sometimes so maybe I shouldnt care

[00:40] <rf> Well, in Raku constant means constant

[00:40] <pingu> thats fair enough I guess

[00:41] <pingu> yeah in C sometimes constants are modifiable

[00:41] <pingu> but thats really a hardware thing not a C thing

[00:41] <rf> In C everything is modifiable if you try hard enough.

[00:41] <pingu> on some hardware it will modify, on others it will not

[00:41] <pingu> something to do with the .bss section in memory

[00:42] <Voldenet> Well basically, in C there's `static const` and that's it

[00:43] <Voldenet> you can put it in any scope you want, but iirc initialization is roughly the same

[00:43] <Voldenet> the difference is that the symbol is not easily accessible outside of the scope if you use local one

[00:43] <Voldenet> the same story happens in raku

[00:46] <Voldenet> m: sub some-function { constant X = 3; say X }; constant X = 4; say X; some-function

[00:46] <camelia> rakudo-moar b81103d99: OUTPUT: «4␤3␤»

[00:48] <discord-raku-bot> <Nemokosch> by the way, I'm actually not sure if the Raku constant is "actually constant" or you can in fact bind some container to it

[00:48] <Voldenet> oh, and there is "my" and "our" you can use

[00:48] <Voldenet> m: module Foo { my constant Bar = 4; }; say Foo::Bar

[00:48] <camelia> rakudo-moar b81103d99: OUTPUT: «Could not find symbol '&Bar' in 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[00:48] <Voldenet> m: module Foo { our constant Bar = 4; }; say Foo::Bar

[00:48] <camelia> rakudo-moar b81103d99: OUTPUT: «4␤»

[00:49] <Voldenet> m: module Foo { constant Bar = 4; }; say Foo::Bar

[00:49] <camelia> rakudo-moar b81103d99: OUTPUT: «4␤»

[00:49] <discord-raku-bot> <Nemokosch> okay so it's our-scoped by default

[00:50] <discord-raku-bot> <Nemokosch> m: constant funky = $ = 12; say funky; funky = 15; say funky;

[00:50] <discord-raku-bot> <Raku eval>  12 15  

[00:50] <discord-raku-bot> <Nemokosch> yeah, very "constant" indeed 😂

[00:50] <discord-raku-bot> <Nemokosch> I think it's just a BEGIN-timed term

[00:50] <Voldenet> I do wonder what happens if you do that in the actual module

[00:51] <Voldenet> which has precompiled constants built-in

[00:51] <Voldenet> I'm betting it becomes constant

[00:51] <discord-raku-bot> <Nemokosch> that's a very good question... something must happen, right? xD

[00:52] <pingu> so what if you didnt want another program reading a constant

[00:52] <discord-raku-bot> <Nemokosch> but the same stands for anything BEGIN-timed, in one way or another

[00:52] <pingu> :-)

[00:52] <pingu> it dont have to try and modify it

[00:53] <pingu> im pretty sure C or ASM could modify raku constants anyhow

[00:54] <pingu> C can redefine what even keywords are if you use a macro with inline assembler

[00:55] <pingu> #define return __ASM ( /*code here */ )

[00:57] <Voldenet> I've tested and constants inside modules are pretty constant, but not entirely

[00:57] <Voldenet> m: const foo = class { has $.y is rw = 12 }.new; say foo.y; foo.y = 15; say foo.y;

[00:57] <camelia> rakudo-moar b81103d99: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> const foo =⏏ class { has $.y is rw = 12 }.new; say f␤»

[00:57] <Voldenet> m: constant foo = class { has $.y is rw = 12 }.new; say foo.y; foo.y = 15; say foo.y;

[00:57] <camelia> rakudo-moar b81103d99: OUTPUT: «12␤15␤»

[00:58] <discord-raku-bot> <Nemokosch> what's the difference?

[00:58] <discord-raku-bot> <Nemokosch> ohh "const"

[00:59] <Voldenet> it's hard to swim out of the C

[00:59] <discord-raku-bot> <Nemokosch> tbh I tried raku -I. -Mdemo -e 'funky = 15; say funky' with a demo.rakumod file and nothing changed

[00:59] <El_Che> The C gives, the C takes

[00:59] <discord-raku-bot> <Nemokosch> where would the precompilation kick in, is that still not enough?

[01:00] <Voldenet> nope, because constants can't be rebound

[01:01] <Voldenet> the underlying data can be mutated though

[01:03] *** ispyhumanfly joined
[01:04] *** xinming left
[01:05] <discord-raku-bot> <Nemokosch> okay but that's not binding, it's assignment, so that wouldn't contradict per se

[01:05] <discord-raku-bot> <Nemokosch> only the initialization is a binding

[01:06] *** xinming joined
[01:18] *** thundergnat_ left
[01:19] *** ispyhumanfly left
[01:25] *** epony left
[01:29] *** ispyhumanfly joined
[01:33] <rf> How can I cube root a number easily?

[01:35] <Voldenet> say 2197 ** (1/3)

[01:35] <Voldenet> m: say 2197 ** (1/3)

[01:35] <camelia> rakudo-moar b81103d99: OUTPUT: «12.999999999999998␤»

[01:35] <evalable6> Voldenet, rakudo-moar d52342eb0: OUTPUT: «12.999999999999998␤»

[01:36] <discord-raku-bot> <:(**@rest, *%rest)> floating point be like

[01:37] <rf> Ah, not sure how I forgot about that lol

[01:38] <Voldenet> there's also roots subroutine but its output… may not be what you expect

[01:38] <Voldenet> m: say roots(2197, 3)

[01:38] <camelia> rakudo-moar b81103d99: OUTPUT: «(12.999999999999998+0i -6.4999999999999964+11.258330249197702i -6.500000000000004-11.258330249197698i)␤»

[01:38] <Voldenet> technically correct

[01:38] <rf> That's what I reached for first.

[01:38] <discord-raku-bot> <Nemokosch> based version

[01:38] <Voldenet> the output's too complex for most people

[01:38] *** tg57 joined
[01:41] <discord-raku-bot> <Nemokosch> better too complex than too real 😎

[01:44] <Voldenet> everything's complex if you can imagine

[01:53] <pingu> oh my GOD making a parser is so hard!!!

[01:54] <discord-raku-bot> <:(**@rest, *%rest)> parser of what?

[01:58] *** tg57 left
[01:58] <Voldenet> grammars make it a bit easier but they need some getting used to

[02:00] *** Bocaneri joined
[02:01] *** Bocaneri is now known as Guest7808

[02:02] *** Sauvin is now known as Guest6400

[02:02] *** Guest6400 left
[02:02] *** Guest7808 is now known as sauvin

[02:02] *** sauvin is now known as Sauvin

[02:03] *** raschip joined
[02:06] <guifa> My recommendation with grammars: start with the smallest elements, and prefer tokens to anything else.  Also, be very careful not to allow empty matches with anything that repeats, all ensure you match at least one thing

[02:08] *** rf left
[02:08] <guifa> so for a number parse, make <decimal-digit> and <sign> first, then make <integral-part> and <fractional-part>, then combine it all as <sign>? <integral-part> [ '.' <fractional-part> ]?  or something akin to that

[02:08] <guifa> I find if you go the other way, you're more like to run into problems 

[02:26] *** cfa left
[02:49] *** rf joined
[03:00] <[Coke]> < discord-raku-bot> <:(**@rest, *%rest)> - is that really someone's nick or is the bridge failing?

[03:04] <discord-raku-bot> <Nemokosch> it is, don't worry

[03:10] *** razetime joined
[03:25] *** ispyhumanfly left
[03:27] *** raschip left
[03:33] <rf> I understand double slurpy, but i'm struggling to see why i'd ever use it

[03:36] <discord-raku-bot> <jaguart> doesn't it flatten more?

[03:40] <rf> m: sub f(*@a) { @a.raku.say; }; sub g(**@a) { @a.raku.say; }; f(1,2,3,4,[5,6]); g(1,2,3,4,[5,6]);

[03:40] <camelia> rakudo-moar b81103d99: OUTPUT: «[1, 2, 3, 4, 5, 6]␤[1, 2, 3, 4, [5, 6]]␤»

[03:41] <rf> I guess if I want to preserve the listyness of an argument

[03:51] *** ispyhumanfly joined
[03:55] *** ispyhumanfly left
[04:02] *** pingu left
[04:02] *** razetime left
[04:06] *** rf left
[04:10] *** ispyhumanfly joined
[04:15] *** ispyhumanfly left
[04:24] <discord-raku-bot> <:(**@rest, *%rest)> no flattening

[04:33] <discord-raku-bot> <jaguart> ah - so double-star flattens less

[04:34] <discord-raku-bot> <jaguart> reminds me of the pawns of null-a

[04:35] <discord-raku-bot> <jaguart> hey mr el gatito  cat - are you also known as 'little bobby tables?'

[04:36] <discord-raku-bot> <:(**@rest, *%rest)> maybe just because im not familiar with it? no language ive learned has this kind of flattening varargs and i just  don't see how flattening is of any use

[04:36] <discord-raku-bot> <:(**@rest, *%rest)> what?

[04:41] <discord-raku-bot> <jaguart> you know - little bobby tables - his surname is ' or 1==1; drop table customer;

[04:42] <Voldenet> related https://xkcd.com/327/

[04:44] <discord-raku-bot> <jaguart> flattening is useful when you want to generalise and destructure perhaps in a mixed coder environment when you don't control other modules

[04:45] <discord-raku-bot> <:(**@rest, *%rest)> could just slip it?

[04:50] <discord-raku-bot> <jaguart> yeah - but you might want the destructure to happen in your Signature - esp if you have a where validation on it.

[04:51] *** razetime joined
[04:53] <discord-raku-bot> <jaguart> in any case, the ** variant does not flatten as much - the more common *  does

[04:53] <discord-raku-bot> <jaguart> so you would use that if you were feeling Listy

[05:08] *** razetime left
[05:23] *** ispyhumanfly joined
[05:34] *** ispyhumanfly left
[05:46] *** ispyhumanfly joined
[05:51] *** ispyhumanfly left
[05:54] *** razetime joined
[05:54] *** razetime left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:21] *** ispyhumanfly joined
[06:28] *** ispyhumanfly left
[06:34] <tonyo> .

[06:55] *** abraxxa joined
[07:01] *** abraxxa left
[07:02] *** abraxxa joined
[07:39] *** ispyhumanfly joined
[07:41] *** Sgeo left
[07:48] *** ispyhumanfly left
[08:06] *** snonux_ left
[08:06] *** snonux left
[08:44] <patrickb> Xliff: Have you seen https://github.com/rakudo/rakudo/blob/main/docs/module_management.md ?

[08:44] <tellable6> patrickb, I'll pass your message to Xliff

[08:52] *** sena_kun joined
[08:59] <jjatria> I found a typo on on https://conf.raku.org. The header says "Tickeets"

[09:10] *** ispyhumanfly joined
[09:14] *** ispyhumanfly left
[09:17] *** jpn joined
[09:19] *** dakkar joined
[09:46] *** Nemokosch joined
[09:48] <Nemokosch> .tell rf I had this thought that your modern CMake-based native module building workflow could be used to modernize the module for termios, what do you think?

[09:48] <tellable6> Nemokosch, I'll pass your message to rf

[09:48] *** Nemokosch left
[09:55] *** Manifest0 joined
[10:21] *** ispyhumanfly joined
[10:25] *** ispyhumanfly left
[10:31] *** sena_kun left
[10:37] *** dakkar left
[10:48] * lizmat clickbaits https://rakudoweekly.blog/2023/01/31/2023-05-rb-awarded/

[10:55] <discord-raku-bot> <Nemokosch> today I tried to build Rakudo for SPARC

[10:55] <discord-raku-bot> <Nemokosch> welp, no go

[11:11] *** sena_kun joined
[11:11] *** jpn left
[11:14] *** jpn joined
[11:17] *** dakkar joined
[11:28] <discord-raku-bot> <Nemokosch> am I understanding right that https://raku.land/github:moznion/HTML::Escape is https://raku.land/zef:lizmat/HTML::Entity::Fast but less comprehensive?

[11:31] <lizmat> could well be

[11:40] *** ispyhumanfly joined
[11:48] *** ispyhumanfly left
[11:49] <discord-raku-bot> <:(**@rest, *%rest)> why

[11:49] <discord-raku-bot> <:(**@rest, *%rest)> anyways is there raku for 32bit?

[11:59] <discord-raku-bot> <Nemokosch> Perhaps not

[11:59] <discord-raku-bot> <Nemokosch> because I needed to work on a SPARC machine? lol

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:25] <discord-raku-bot> <:(**@rest, *%rest)> SPARC machines are pretty much dead now? or am I dead wrong

[12:25] <discord-raku-bot> <Nemokosch> I think you're pretty much right

[12:27] <discord-raku-bot> <:(**@rest, *%rest)> imagine having to work on a sparc 😭

[12:27] <discord-raku-bot> <Nemokosch> however, this is a machine used for supervising some NY metro lines

[12:27] <discord-raku-bot> <Nemokosch> horribly expensive of course

[12:28] <discord-raku-bot> <Nemokosch> we need it for testing

[12:28] <discord-raku-bot> <Nemokosch> there are some companies that don't want to switch to Linux, some of them not even to x64

[12:29] <discord-raku-bot> <Nemokosch> the thing is, even virtualizing these machines is a pain

[12:29] <discord-raku-bot> <:(**@rest, *%rest)> hmm can’t you work with existing tools that support sparc

[12:30] <discord-raku-bot> <Nemokosch> maybe I could if I knew what I needed. I really only wanted to do some search and replace on all files in a folder

[12:30] <discord-raku-bot> <Nemokosch> I hoped to get away without bizarre escaping of sed-like tools

[12:30] <discord-raku-bot> <Nemokosch> but eventually I settled for that

[12:30] <discord-raku-bot> <:(**@rest, *%rest)> perl ig

[12:30] <discord-raku-bot> <Nemokosch> I googled all around

[12:31] <discord-raku-bot> <Nemokosch> Perl also only has s/// for substitutions from all I can tell

[12:31] <discord-raku-bot> <Nemokosch> and unlike Raku, it doesn't seem to allow embedded strings

[12:31] <nine> Rakudo does support 32 bit architectures: https://build.opensuse.org/project/show/devel:languages:perl6

[12:32] <discord-raku-bot> <Nemokosch> is that the i586 one?

[12:33] *** ispyhumanfly joined
[12:33] <nine> yes

[12:34] <nine> I'm also building for other architectures here: https://build.opensuse.org/project/show/home:niner9:rakudo-git

[12:34] <nine> I've even done MIPS locally in qemu, but boy was that slow

[12:36] *** Xliff joined
[12:37] *** ispyhumanfly left
[12:38] <Xliff> Does anyone know if there is anything in Raku that can run and monitor an external program and restart it if it segfaults?

[12:38] <tellable6> 2023-02-01T08:44:59Z #raku <patrickb> Xliff: Have you seen https://github.com/rakudo/rakudo/blob/main/docs/module_management.md ?

[12:40] <discord-raku-bot> <Nemokosch> where is MIPS used?

[12:42] <Xliff> patrickb: No. Thanks for the link!

[12:45] <discord-raku-bot> <Anton Antonov> What is "the best" package for date time specifications parsing? Is it "DateTime::Parse" or something else?

[12:45] *** lizmat_ joined
[12:45] *** Geth left
[12:46] <discord-raku-bot> <:(**@rest, *%rest)> playstation 1

[12:47] <discord-raku-bot> <Nemokosch> @Anton Antonov DateTime::Parse is simple and straightforward - if only there was somebody to merge the PR's... 😦

[12:47] *** RakuIRCLogger left
[12:47] <discord-raku-bot> <Nemokosch> I also created a format that I needed for a task

[12:47] <discord-raku-bot> <Nemokosch> the "whatever the ls command can give you" format

[12:48] *** lizmat left
[12:48] <discord-raku-bot> <Anton Antonov> Yeah, ok. But "DateTime::Parse" does not provide separate grammar for parsing, so, I cannot use it as is. (And yes the PRs seem to add useful functionalities.)

[12:49] *** MasterDuke left
[12:50] <discord-raku-bot> <Nemokosch> oh you mean grammar that doesn't downright invoke the actions?

[12:51] <discord-raku-bot> <Anton Antonov> No -- I want separate grammar and actions classes. (One of the reasons I made "Markdown::Grammar", BTW.)

[12:53] *** ab5tract joined
[12:53] <discord-raku-bot> <Nemokosch> hm, I think there are only less suitable alternatives to DateTime::Parse for that

[12:54] <discord-raku-bot> <:(**@rest, *%rest)> aren’t grammars and actions already separate in raku

[12:54] <discord-raku-bot> <Nemokosch> yes but the module itself couples them

[12:55] <discord-raku-bot> <Anton Antonov> Ok, thanks. It looks like I have to refactor "DateTime::Parse" for my needs.

[12:55] <discord-raku-bot> <Anton Antonov> See here : https://github.com/sergot/datetime-parse/blob/master/lib/DateTime/Parse.rakumod

[13:09] *** ispyhumanfly joined
[13:21] *** Xliff left
[13:31] *** Tirifto left
[13:32] *** Tirifto joined
[14:13] *** rf joined
[14:24] *** Geth joined
[14:24] *** lizmat_ left
[14:24] *** lizmat joined
[14:27] *** lichtkind_ joined
[14:28] *** Geth left
[14:28] *** Geth joined
[14:31] *** lichtkind left
[14:37] *** vrurg left
[14:38] *** vrurg joined
[14:58] *** tg57 joined
[15:39] *** pingu joined
[15:44] *** Sgeo joined
[15:51] *** ab5tract left
[15:52] *** ab5tract joined
[15:52] <ab5tract> However, I'm still lost :D

[16:09] <[Coke]> (bobby tables) - someone should add Raku to https://bobby-tables.com/

[16:34] <tonyo> delphi, blast from the past here

[16:43] <[Coke]> mmm. I added the coldfusion entry, so glad I don't have to worry about that anymore.

[16:46] *** cfa joined
[16:47] <cfa> o/

[16:58] *** haxxelotto joined
[17:05] *** haxxelotto left
[17:24] *** tg57 left
[17:34] *** jmcgnh left
[17:34] *** Xliff joined
[17:39] *** jmcgnh joined
[17:39] *** tg57 joined
[17:40] *** dakkar left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:06] *** sena_kun left
[18:19] *** pingu left
[18:28] *** tg57 left
[18:33] <discord-raku-bot> <Nemokosch> well I doubt Delphi deserves the bad rap, it's just not all technologies get bought by the most visionary companies

[18:34] <rf> Can you make a raw socket in Raku? Something like: Socket.open(Socket::PF_INET, Socket::SOCK_RAW, Socket::IPPROTO_RAW) in Ruby?

[18:34] <tellable6> 2023-02-01T09:48:16Z #raku <Nemokosch> rf I had this thought that your modern CMake-based native module building workflow could be used to modernize the module for termios, what do you think?

[18:34] <rf> Hmm, I haven't seen the codebase for termios Nemokosch, i'll look into it.

[18:35] <discord-raku-bot> <Nemokosch> the idea is motivated by the relative abundance of dependents

[18:36] <rf> Yeah I don't see why it couldn't

[18:36] <discord-raku-bot> <Nemokosch> for the sockets, I'tm fairly clueless, I only know that leont keeps saying that the Unix domain sockets are missing

[18:36] <rf> I'm looking to bind a socket to recieve ethernet frames, I want to get as close to the metal without writing a driver

[18:37] <rf> If possible.

[18:37] <leont> Yeah, our IO is fairly high level, both async and sync. That becomes a problem whenever you want to do something that Cro doesn't need.

[18:38] <rf> I wonder how much of a hassle unix sockets would be, is it Moar holding it back?

[18:39] <leont> Yeah, it needs Moar support.

[18:39] <leont> I don't even think it's difficult per se, it's just that it requires understanding more MoarVM details than I know

[18:40] <rf> Maybe I can look into writing that, will probably take me to the end of the year lol. I know Rakudo fairly well, but Moar is a whole other beast

[18:42] <discord-raku-bot> <Nemokosch> Kaiepi also talked about working on networking but got distracted in the depths of it

[18:46] <tonyo> moar team is very receptive to adding features ime

[18:46] <jdv> moar features

[18:51] <tonyo> moar success

[18:52] *** jpn left
[18:53] *** sena_kun joined
[18:55] *** NemokoschKiwi joined
[18:55] <rf> moar moar moar

[18:55] *** NemokoschKiwi left
[18:55] <discord-raku-bot> <Nemokosch> with a rebel yell

[18:56] <tonyo> fwiw nqp may have what you need rf 

[18:56] <tonyo> https://github.com/Raku/nqp/blob/c8a811a00881327ce6a2ca5d8fd472e62ab90934/src/vm/js/const_map.nqp#L97

[18:58] <tonyo> https://github.com/Raku/nqp/blob/0724fd6ab14ce38b877fcef2cf9c26b3a47208bc/docs/ops.markdown#asynclisten

[19:01] <discord-raku-bot> <Nemokosch> is this not UDP though?

[19:01] * [Coke] finally remembers to set shiftwidth on vim on his work machine after 4 years.

[19:02] *** jpn joined
[19:13] <rf> udp is fine, as long as I can get the ethernet frame

[19:34] <cfa> if i want to allocate a string (char**) to supply as an out parameter in FFI, is NativeHelpers::CBuffer my best option?

[19:37] <cfa> or to frame that differently, what is the recommended approach?

[19:39] *** snonux joined
[19:40] *** snonux_ joined
[19:48] <rf> cfa: https://github.com/rakudo/rakudo/blob/main/t/04-nativecall/05-arrays.c#L33

[19:48] <rf> There is an example, if you go to 05-arrays.t

[19:48] *** snonux_ left
[19:49] <rf> https://github.com/rakudo/rakudo/blob/main/t/04-nativecall/05-arrays.t#L36

[19:49] *** snonux left
[19:53] <tonyo> if it's a pointer to an array then cpointer might be a better option

[19:53] <tonyo> until you get down to the data

[19:54] <rf> Yeah I think when in doubt CPointer works for most stuff

[19:54] *** tg57 joined
[19:54] <cfa> sure, but i'm still not clear on what the best approach here is

[19:55] <rf> What data are you passing?

[19:55] <cfa> to clarify, i'm (i) allocating space in raku, (ii) calling an ffi function that takes a char**, to which it writes string data, (iii) reading this data from raku and (ideally) treating it as a Str

[19:56] <rf> I see, I would use a CPointer

[19:56] <rf> I don't know if there is really a "best practice" when it comes to this.

[19:57] <cfa> allocated how?

[19:57] *** raschip joined
[19:58] <tonyo> is the char** allocated in C or in raku?

[19:59] <cfa> raku

[19:59] <tonyo> i can write an example but about to get into a meeting for two hours

[19:59] <tonyo> i'd reckon you pass a ptr to the carray to the FFI func

[19:59] <tonyo> but can't test atm

[19:59] * cfa nods

[20:00] <rf> I can try here: sub ManipulatePointer(Pointer is rw) returns something is native ...

[20:00] <rf> That's how I would pull in my native function (sorry I have a meeting right away too, just spit balling)

[20:00] <cfa> sure, i'm following

[20:01] <rf> then just my Pointer $ptr .= new; ManipulatePointer($ptr);

[20:01] <rf> is rw is important on the param

[20:01] <cfa> but what's that pointer pointing to? i need to allocate $x bytes for storage

[20:02] <cfa> and yes, the signature makes sense but it's not clear what the caller needs to do in terms of allocation

[20:02] <discord-raku-bot> <Nemokosch> is returns the same here as --> or it must be preferred?

[20:02] <cfa> do i just need CArray[byte].allocate($x) ?

[20:03] <rf> you have to use is returns for nativecall iirc

[20:03] <rf> Worth a shot

[20:03] <cfa> hmm

[20:03] <rf> Anything stopping you from allocating the memory in your C code?

[20:04] <cfa> i'm using a library that expects an allocated out string

[20:04] <rf> Pass a raku pointer, malloc, do your stuff, then spit back the pointer

[20:04] <cfa> if i were to write a wrapper, sure

[20:04] <cfa> i'd rather just use the library as is

[20:04] <cfa> this works fine with CBuffer fwiw

[20:05] *** jpn left
[20:05] <rf> I'll play around with this after work

[20:06] *** abraxxa left
[20:06] <rf> Speaking of which, prod just went down (:

[20:06] <cfa> okay this works

[20:14] <cfa> i have my native signature taking a CArray[byte] $buf, the caller allocates my $buf = CArray[byte].allocate($x); i can read out a string with $buf.list.chrs

[20:16] <cfa> nice and simple -- thanks!

[20:18] <cfa> somewhat tangential, this just cropped up:

[20:18] <cfa> m: my $buf = CArray[byte].allocate(8); say $buf

[20:18] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    CArray used at line 1. Did you mean 'array', 'Array'?␤␤»

[20:18] <cfa> m: use NativeCall; my $buf = CArray[byte].allocate(8); say $buf

[20:18] <camelia> rakudo-moar 015aacf2f: OUTPUT: «NativeCall::Types::CArray[byte].new␤»

[20:18] <cfa> but

[20:19] <cfa> m: use NativeCall; my CArray[byte] $buf .= allocate(8); say $buf

[20:19] <camelia> rakudo-moar 015aacf2f: OUTPUT: «This type (Scalar) does not support positional operations␤  in method allocate at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/A0A96FBF793726A548EDC85C30C96DFD8D2A177F (NativeCall::Types) line 154␤  in block <unit> at <tmp> line 1␤␤»

[20:19] <cfa> which surprised me

[20:19] <rf> m: use NativeCall; my CArray[byte] @buf .= allocate(8); say $buf

[20:19] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$buf' is not declared.  Did you mean any of these: '@buf',␤'Buf'?␤at <tmp>:1␤------> y CArray[byte] @buf .= allocate(8); say ⏏$buf␤»

[20:19] <cfa> i expected these to be equivalent -- what am i missing?

[20:19] <rf> m: use NativeCall; my CArray[byte] @buf .= allocate(8); say @buf

[20:19] <camelia> rakudo-moar 015aacf2f: OUTPUT: «No such method 'allocate' for invocant of type␤'Array[NativeCall::Types::CArray[byte]]'␤  in block <unit> at <tmp> line 1␤␤»

[20:19] <rf> Look at the type signature, that explains it :)

[20:20] <rf> Oh wait i'm drunk

[20:20] <cfa> heh

[20:20] <rf> Huh weird that CArray is not positional

[20:20] <rf> I thought that was the benefit over CPointer

[20:21] <cfa> oh hang on

[20:22] <cfa> ah, never mind -- confusion persists

[20:22] <rf> m: use NativeCall; my CArray[byte] $buf = CArray[byte].allocate(8); say $buf

[20:22] <camelia> rakudo-moar 015aacf2f: OUTPUT: «NativeCall::Types::CArray[byte].new␤»

[20:23] <rf> Madness

[20:23] <cfa> that's what i just tested, yes

[20:23] <cfa> i can't see why .= allocate(8) shouldn't work

[20:23] <rf> m: use NativeCall; my CArray[byte] $buf .= allocate(5000); say $buf

[20:23] <camelia> rakudo-moar 015aacf2f: OUTPUT: «This type (Scalar) does not support positional operations␤  in method allocate at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/A0A96FBF793726A548EDC85C30C96DFD8D2A177F (NativeCall::Types) line 154␤  in block <unit> at <tmp> line 1␤␤»

[20:24] <rf> was wondering how many bytes camelia would let me allocate

[20:24] <cfa> the error seems to indicate that it's the positional (rather than named?) argument to allocate that's the problem

[20:24] <cfa> which also seems misleading

[20:26] <rf> m: use NativeCall; my CArray[byte] $buffer; say $buffer;

[20:26] <camelia> rakudo-moar 015aacf2f: OUTPUT: «(CArray[byte])␤»

[20:26] <rf> m: use NativeCall; my CArray[byte] $buffer; $buffer .= allocate(8); say $buffer;

[20:26] <camelia> rakudo-moar 015aacf2f: OUTPUT: «This type (Scalar) does not support positional operations␤  in method allocate at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/A0A96FBF793726A548EDC85C30C96DFD8D2A177F (NativeCall::Types) line 154␤  in block <unit> at <tmp> line 1␤␤»

[20:27] <cfa> line 154 is the bindpos_u line here:

[20:27] <cfa>     multi method allocate(::?CLASS:U \type: Int:D $elems) {

[20:27] <cfa>         my $arr := nqp::create(type);

[20:27] <cfa>         nqp::bindpos_u($arr, $elems - 1, 0);

[20:27] <cfa>         $arr;

[20:27] <cfa>     }

[20:28] <rf> Ahh this is not a submethod

[20:28] <rf> Would that do it?

[20:29] <cfa> i was under the impression that  my T $t .= foo(...)  was equivalent to  my T $t = T.foo(...)

[20:30] <cfa> which is clearly not the case from the above test(s)

[20:30] <cfa> namely,

[20:30] <cfa> m: use NativeCall; my CArray[byte] $buf  = CArray[byte].allocate(8); say $buf

[20:30] <cfa> m: use NativeCall; my CArray[byte] $buf .= allocate(8); say $buf

[20:30] <camelia> rakudo-moar 015aacf2f: OUTPUT: «NativeCall::Types::CArray[byte].new␤»

[20:30] <camelia> rakudo-moar 015aacf2f: OUTPUT: «This type (Scalar) does not support positional operations␤  in method allocate at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/A0A96FBF793726A548EDC85C30C96DFD8D2A177F (NativeCall::Types) line 154␤  in block <unit> at <tmp> line 1␤␤»

[20:31] <cfa> i'm speaking purely as a user, not somebody who understands raku(do) internals

[20:31] <rf> m: class T { method make { T.new; }; submethod makeSub { T.new;}; }; my T $n .= make; say $n;

[20:31] <camelia> rakudo-moar 015aacf2f: OUTPUT: «T.new␤»

[20:31] <rf> m: class T { method make { T.new; }; submethod makeSub { T.new;}; }; my T $n .= makeSub; say $n;

[20:31] <camelia> rakudo-moar 015aacf2f: OUTPUT: «T.new␤»

[20:31] <rf> Okay, yeah there must be a special rule here.

[20:31] <discord-raku-bot> <Nemokosch> could be a bug at any time tbh

[20:32] <rf> my: Pointer p .= new;

[20:32] <cfa> m: my Date $d  = Date.today; say $d;

[20:32] <cfa> m: my Date $d .= today; say $d;

[20:32] <rf> m: my Pointer $p .= new;

[20:32] <camelia> rakudo-moar 015aacf2f: OUTPUT: «2023-02-01␤»

[20:32] <camelia> rakudo-moar 015aacf2f: OUTPUT: «2023-02-01␤»

[20:32] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!===␤Type 'Pointer' is not declared␤at <tmp>:1␤------> my Pointer⏏ $p .= new;␤Malformed my␤at <tmp>:1␤------> my⏏ Pointer $p .= new;␤␤»

[20:32] <rf> m: use NativeCall; my Pointer $p .= new; say $p;

[20:32] <camelia> rakudo-moar 015aacf2f: OUTPUT: «NativeCall::Types::Pointer<NULL>␤»

[20:32] <cfa> i'd expect comparable behaviour to those date examples

[20:33] <rf> Maybe the type signature throws it off

[20:33] <cfa> Nemokosch yeah, hence my raising it -- either i'm unaware of some corner case (in which case the error is LTA) or perhaps there's a bug?

[20:33] <rf> Generic CArray

[20:33] <rf> m: CArray $arr .= allocate(8); say $arr;

[20:33] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$arr' is not declared.  Perhaps you forgot a 'sub' if this␤was intended to be part of a signature?␤at <tmp>:1␤------> CArray ⏏$arr .= allocate(8); say $arr;␤»

[20:33] <rf> m: my CArray $arr .= allocate(8); say $arr;

[20:33] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!===␤Type 'CArray' is not declared.  Did you mean any of these: 'array',␤'Array'?␤at <tmp>:1␤------> my CArray⏏ $arr .= allocate(8); say $arr;␤Malformed my␤at <tmp>:1␤------> my⏏ CArray $arr .= allocate(8);…»

[20:33] <cfa> heh

[20:33] <rf> m: use NativeCall; my CArray $arr .= allocate(8); say $arr;

[20:33] <camelia> rakudo-moar 015aacf2f: OUTPUT: «No such method 'allocate' for invocant of type␤'NativeCall::Types::CArray'␤  in block <unit> at <tmp> line 1␤␤»

[20:34] *** snonux joined
[20:35] <rf> m: use NativeCall; my CArray @arr .= allocate(8); say $arr;

[20:35] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$arr' is not declared.  Did you mean '@arr'?␤at <tmp>:1␤------> all; my CArray @arr .= allocate(8); say ⏏$arr;␤»

[20:35] <rf> m: use NativeCall; my CArray @arr .= allocate(8); say @arr;

[20:35] <camelia> rakudo-moar 015aacf2f: OUTPUT: «No such method 'allocate' for invocant of type␤'Array[NativeCall::Types::CArray]'␤  in block <unit> at <tmp> line 1␤␤»

[20:35] *** snonux_ joined
[20:35] <rf> Yeah I got no idea lol

[20:35] <rf> This is a lizmat or moritz thing I think :D

[20:35] <cfa> no worries, thanks for looking into it (and talking through the ffi stuff)

[20:36] <rf> Yeah most of my FFI experience is with C++, trying my best :D

[20:40] <discord-raku-bot> <Nemokosch> have you seen moritz around lately?

[20:40] <rf> .seen moritz

[20:40] <tellable6> rf, I saw moritz 2023-01-22T15:14:09Z in #raku: <moritz> that's because Lists can contain references, so they aren't good value types

[20:40] <discord-raku-bot> <Nemokosch> > No such method 'allocate' for invocant of type␤'Array[NativeCall::Types::CArray] btw this is still clear and understandable - you declared an array of CArray

[20:41] <rf> Yeah I realised that. I thought CArray would be positional for some reason.

[20:41] <discord-raku-bot> <Nemokosch> m: use NativeCall; my @arr is CArray .= allocate(8); say @arr;

[20:41] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'allocate' for invocant of type 'NativeCall::Types::CArray'   in block <unit> at main.raku line 1   

[20:42] <rf> m: use NativeCall; my @arr is CArray[byte] .= allocate(8); say @arr;

[20:42] <camelia> rakudo-moar 015aacf2f: OUTPUT: «Cannot resolve caller allocate(NativeCall::Types::CArray[byte]:D: Int:D); none of these signatures matches:␤    (NativeCall::Types::CArray[byte]:U \type: int $elems, *%_)␤    (NativeCall::Types::CArray[byte]:U \type: Int:D $elems, *%_)␤  in bloc…»

[20:42] <rf> Aha there is the real error

[20:42] <rf> m: use NativeCall; my @arr is CArray[byte] .= allocate(byte, 8); say @arr;

[20:42] <camelia> rakudo-moar 015aacf2f: OUTPUT: «Cannot resolve caller allocate(NativeCall::Types::CArray[byte]:D: byte:U, Int:D); none of these signatures matches:␤    (NativeCall::Types::CArray[byte]:U \type: int $elems, *%_)␤    (NativeCall::Types::CArray[byte]:U \type: Int:D $elems, *%_)␤ …»

[20:42] <discord-raku-bot> <Nemokosch> why does it start off as :D ...

[20:43] <rf> m: use NativeCall; my CArray[Byte] $arr .= allocate(byte, 8); say $arr;

[20:43] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    Byte used at line 1. Did you mean 'byte'?␤␤»

[20:43] <rf> m: use NativeCall; my CArray[byte] $arr .= allocate(byte, 8); say $arr;

[20:43] <camelia> rakudo-moar 015aacf2f: OUTPUT: «Cannot resolve caller allocate(NativeCall::Types::CArray[byte]:U: byte:U, Int:D); none of these signatures matches:␤    (NativeCall::Types::CArray[byte]:U \type: int $elems, *%_)␤    (NativeCall::Types::CArray[byte]:U \type: Int:D $elems, *%_)␤ …»

[20:43] <discord-raku-bot> <Nemokosch> m: use NativeCall; my @arr is CArray[byte] = CArray[byte].allocate(byte, 8); say @arr;

[20:43] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller allocate(NativeCall::Types::CArray[byte]:U: byte:U, Int:D); none of these signatures matches:     (NativeCall::Types::CArray[byte]:U \type: int $elems, *%_)     (NativeCall::Types::CArray[byte]:U \type: Int:D $elems, *%_)   in block <unit> at main.raku line 1   

[20:44] <rf> m: use NativeCall; my @arr is CArray[byte] = CArray[byte].allocate(8); say @arr;

[20:44] <camelia> rakudo-moar 015aacf2f: OUTPUT: «Cannot modify an immutable NativeCall::Types::CArray[byte] (NativeCall::Types::C...)␤  in block <unit> at <tmp> line 1␤␤»

[20:44] <discord-raku-bot> <Nemokosch> so much hassle..

[20:45] <cfa> hmm?

[20:45] <rf> m: use NativeCall; my $arr is CArray[byte] .= allocate(8); say $arr;

[20:45] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤is trait on $-sigil variable not yet implemented. Sorry.␤Did you mean: my NativeCall::Types::CArray[byte] $arr?␤at <tmp>:1␤------> use NativeCall; my $arr is CArray[byte]⏏ .= allocate(8); …»

[20:46] <rf> Could be that the native call stuff plays by its own set of rules.

[20:46] <discord-raku-bot> <Nemokosch> m: use NativeCall; say CArray[byte].allocate(8);

[20:46] <discord-raku-bot> <Raku eval>  NativeCall::Types::CArray[byte].new  

[20:47] <discord-raku-bot> <Nemokosch> m: use NativeCall; my @arr := CArray[byte].allocate(8); say @arr;

[20:47] <discord-raku-bot> <Raku eval>  NativeCall::Types::CArray[byte].new  

[20:47] <discord-raku-bot> <Nemokosch> heh

[20:47] <discord-raku-bot> <Nemokosch> "no bindings", except when only bindings work properly...

[20:48] *** raschip left
[20:50] <discord-raku-bot> <Nemokosch> is CArray even mutable by Raku terms? could be that it doesn't create containers at all

[20:51] <rf> That would make sense

[20:52] <discord-raku-bot> <Nemokosch> m: use NativeCall; my @arr := CArray[byte].allocate(8); say @arr[2].VAR.WHAT

[20:52] <discord-raku-bot> <Raku eval>  (UIntPosRef)  

[20:52] <discord-raku-bot> <Nemokosch> so yeah I'd think this handles mutation weirdly, if at all

[20:54] *** jpn joined
[21:03] *** Bocaneri joined
[21:03] *** Bocaneri is now known as Guest857

[21:05] *** Sauvin left
[21:12] *** jpn left
[21:19] *** jpn joined
[21:43] *** pingu joined
[22:27] <tonyo> cfa: you get the char** figured?

[22:27] *** Guest857 is now known as Sauvin

[22:30] *** snonux left
[22:30] <rf> Yeah, CArray did it.

[22:30] *** snonux_ left
[22:30] <rf> But we found some weird semantics tonyo

[22:31] <rf> m: my CArray[byte] $buff .= allocate(8);

[22:31] <camelia> rakudo-moar 015aacf2f: OUTPUT: «===SORRY!===␤Type 'CArray' is not declared.  Did you mean any of these: 'Array',␤'array'?␤at <tmp>:1␤------> my CArray⏏[byte] $buff .= allocate(8);␤Malformed my␤at <tmp>:1␤------> my⏏ CArray[byte] $buff .= allocate…»

[22:31] <rf> m: use NativeCall; my CArray[byte] $buff .= allocate(8);

[22:31] <camelia> rakudo-moar 015aacf2f: OUTPUT: «This type (Scalar) does not support positional operations␤  in method allocate at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/A0A96FBF793726A548EDC85C30C96DFD8D2A177F (NativeCall::Types) line 154␤  in block <unit> at <tmp> line 1␤␤»

[22:40] *** jpn left
[22:44] *** ab5tract left
[22:45] <tonyo> isn't char** technically a pointer to a pointer of some contiguous "bytes"?

[22:46] <tonyo> this repo may have some info in it, too https://github.com/salortiz/NativeHelpers-Blob

[22:51] *** NemokoschKiwi joined
[22:51] *** NemokoschKiwi left
[22:51] *** NemokoschKiwi joined
[22:54] *** tg57 left
[23:19] <NemokoschKiwi> .seen avuserow

[23:19] <tellable6> NemokoschKiwi, I saw avuserow 2022-12-09T02:09:33Z in #raku: <avuserow> otherwise I would look for a PPA, or use rakubrew

[23:24] *** sena_kun left
[23:25] *** NemokoschKiwi left
[23:30] *** lichtkind_ left
[23:53] <cfa> tonyo: if you have suggestion for a better approach please let me know; having a buffer for contiguous bytes works fine in the case of this library

[23:59] *** spacekookie left
