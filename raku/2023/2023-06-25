[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:27] *** skyesoss joined
[01:01] *** MasterDuke joined
[01:04] *** xinming left
[01:05] *** xinming joined
[01:50] <skyesoss> What's the best way to move ~/.raku somewhere else? I couldn't find any documentation surrounding it, but is RAKUDO_PREFIX something to look to change, because it's messing up my include paths
[02:05] *** linkable6 left
[02:05] *** evalable6 left
[02:06] *** evalable6 left
[02:06] *** linkable6 left
[02:06] *** linkable6 joined
[02:06] *** evalable6 joined
[02:06] *** xinming left
[02:08] *** xinming joined
[02:24] *** tea3po joined
[02:27] *** teatwo left
[02:35] *** swaggboi left
[02:58] *** swaggboi joined
[03:59] *** sourceable6 left
[03:59] *** notable6 left
[03:59] *** committable6 left
[03:59] *** linkable6 left
[03:59] *** benchable6 left
[03:59] *** bisectable6 left
[03:59] *** evalable6 left
[03:59] *** tellable6 left
[03:59] *** quotable6 left
[03:59] *** tellable6 joined
[03:59] *** evalable6 joined
[04:00] *** benchable6 joined
[04:00] *** sourceable6 joined
[04:00] *** quotable6 joined
[04:01] *** linkable6 joined
[04:01] *** committable6 joined
[04:02] *** bisectable6 joined
[04:02] *** notable6 joined
[04:05] *** xinming left
[04:07] *** xinming joined
[04:41] *** rf left
[05:41] *** committable6 left
[05:41] *** sourceable6 left
[05:41] *** bloatable6 left
[05:41] *** reportable6 left
[05:41] *** greppable6 left
[05:41] *** unicodable6 left
[05:41] *** tellable6 left
[05:41] *** squashable6 left
[05:41] *** nativecallable6 left
[05:41] *** releasable6 left
[05:41] *** shareable6 left
[05:41] *** coverable6 left
[05:41] *** coverable6 joined
[05:41] *** squashable6 joined
[05:41] *** reportable6 joined
[05:41] *** nativecallable6 joined
[05:41] *** releasable6 joined
[05:42] *** bloatable6 joined
[05:42] *** sourceable6 joined
[05:42] *** greppable6 joined
[05:42] *** unicodable6 joined
[05:43] *** committable6 joined
[05:43] *** tellable6 joined
[05:44] *** shareable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:26] *** xinming left
[06:28] *** xinming joined
[07:02] *** codesections1 joined
[07:03] *** codesections left
[07:03] *** codesections1 is now known as codesections
[07:59] *** rjbs left
[07:59] *** rjbs joined
[08:40] *** sena_kun joined
[09:31] *** Xliff joined
[09:43] <lizmat> weekly: https://felix-knorr.net/posts/2023-06-24-raku-is-awesome.html
[09:43] <notable6> lizmat, Noted! (weekly)
[09:49] <lizmat> also on Hacker News: https://news.ycombinator.com/item?id=36465989
[10:14] *** Sgeo left
[11:02] <Voldenet> > (1, 2, 3).map(* + 1)
[11:03] <Voldenet> it's pretty amazing how most language complicate lambdas
[11:04] <Voldenet> especially when most lambdas are simply one-arg ones
[11:07] <leont> Seems I lost the slides for my 2021 presentation ("Raku syntax I miss in other languages"). I really ought to make it a blog series.
[11:07] <lizmat> leont: you should!   and do a RCS one  :-)
[11:07] <leont> RCS?
[11:14] *** linkable6 left
[11:14] *** evalable6 left
[11:15] *** linkable6 left
[11:15] *** evalable6 left
[11:15] *** evalable6 joined
[11:16] *** linkable6 joined
[11:17] *** RonaldR34g4m left
[11:17] *** RonaldR34g4m joined
[11:17] <lizmat> Raku Core Summit ?
[11:44] <timo> https://social.coop/@jsbarretto/110598797097154054 i feel like raku is the perfect language to prototype these two suggestions
[11:44] <lizmat> the deparsing part for Dutch is already done  :-)
[11:45] <timo> indeed, i saw that, though i haven't tried it yet or seen any example?
[11:47] *** sena_kun left
[11:47] <timo> m: use nqp; augment class ClassHOW { method gender() { nqp::sha1(self.name).substr(2) } }; say Str.^gender; say List.g
[11:47] <camelia> rakudo-moar e66bcd670: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤augment not allowed without 'use MONKEY-TYPING'␤at <tmp>:1␤------> use nqp; augment class ClassHOW⏏ { method gender() { nqp::sha1(self.name␤    expecting any of:␤        generic role␤»
[11:47] <timo> m: use nqp; use MONKEY-TYPING; augment class ClassHOW { method gender() { nqp::sha1(self.name).substr(2) } }; say Str.^gender; say List.^gender; say Hash.^gender
[11:47] <camelia> rakudo-moar e66bcd670: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤You tried to augment class ClassHOW, but it does not exist␤at <tmp>:1␤------> se MONKEY-TYPING; augment class ClassHOW⏏ { method gender() { nqp::sha1(self.name␤    expecting any of:␤   …»
[11:47] <lizmat> m: use v6.*; use RakuAST::Deparse::L10N::NL; say Q|say "Hoi allemaal" if 42|.AST.DEPARSE
[11:47] <camelia> rakudo-moar e66bcd670: OUTPUT: «say("Hoi allemaal") if 42␤␤»
[11:48] <lizmat> m: use v6.*; use RakuAST::Deparse::L10N::NL; say Q|say "Hoi allemaal" if 42|.AST.DEPARSE(RakuAST::Deparse::L10N::N)
[11:48] <timo> m: use nqp; use MONKEY-TYPING; augment class Perl6::Metamodel::ClassHOW { method gender() { nqp::sha1(self.name).substr(2) } }; say Str.^gender; say List.^gender; say Hash.^gender
[11:48] <camelia> rakudo-moar e66bcd670: OUTPUT: «Could not find symbol '&N' in 'RakuAST::Deparse::L10N'␤  in block <unit> at <tmp> line 1␤␤»
[11:48] <camelia> rakudo-moar e66bcd670: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤You tried to augment class Perl6::Metamodel::ClassHOW, but it does not exist␤at <tmp>:1␤------> augment class Perl6::Metamodel::ClassHOW⏏ { method gender() { nqp::sha1(self.name␤    expec…»
[11:48] <lizmat> m: use v6.*; use RakuAST::Deparse::L10N::NL; say Q|say "Hoi allemaal" if 42|.AST.DEPARSE(RakuAST::Deparse::L10N::NL)
[11:48] <camelia> rakudo-moar e66bcd670: OUTPUT: «zeg("Hoi allemaal") als 42␤␤»
[11:48] <lizmat> timo ^^ an example
[11:48] <timo> can we also de-deparse like that? :D
[11:50] <lizmat> timo: not yet, but that's the plan
[11:50] <timo> amazing
[11:50] <leont> Oh right! Yeah I hadn't gotten around to writing that either.
[11:51] <lizmat> thanks to the power of RakuAST  :-)
[11:51] <timo> ok, i tried to constant CH = Str.HOW and augment CH, but that tells me CH is closed, and i wonder if that means i'm not doing it right because otherwise it would have said ClassAHOW
[11:51] <timo> ClassHOW is closed*
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: f6c2e1f0d6 | dependabot[bot]++ (committed using GitHub Web editor) | 2 files
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: Bump semver from 7.3.7 to 7.5.2
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: 
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: Bumps [semver](https://github.com/npm/node-semver) from 7.3.7 to 7.5.2.
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: - [Release notes](https://github.com/npm/node-semver/releases)
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: - [Changelog](https://github.com/npm/node-semver/blob/main/CHANGELOG.md)
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: - [Commits](https://github.com/npm/node-semver/compare/v7.3.7...v7.5.2)
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: 
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: <…commit message has 7 more lines…>
[11:53] <Geth> ¦ setup-raku/dependabot/npm_and_yarn/semver-7.5.2: review: https://github.com/Raku/setup-raku/commit/f6c2e1f0d6
[11:53] <timo> m: use v6.*; use RakuAST::Deparse::L10N::NL; say Q|my $foo; our $bar; class A { has $.hello }|.AST.DEPARSE
[11:53] <camelia> rakudo-moar e66bcd670: OUTPUT: «my $foo;␤our $bar;␤class A {␤    has $.hello␤}␤␤»
[11:58] <lizmat> m: use v6.*; use RakuAST::Deparse::L10N::NL; say Q|my $foo; our $bar; class A { has $.hello }|.AST.DEPARSE(RakuAST::Deparse::L10N::NL)
[11:58] <camelia> rakudo-moar e66bcd670: OUTPUT: «mijn $foo;␤onze $bar;␤klasse A {␤    heeft $.hello␤}␤␤»
[11:59] <leont> The Dutch squicks me
[12:00] <lizmat> afk&
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[13:00] *** evalable6 left
[13:00] *** benchable6 left
[13:00] *** shareable6 left
[13:00] *** statisfiable6 left
[13:00] *** coverable6 left
[13:00] *** unicodable6 left
[13:00] *** bloatable6 left
[13:00] *** sourceable6 left
[13:00] *** linkable6 left
[13:00] *** notable6 left
[13:00] *** committable6 left
[13:00] *** quotable6 left
[13:00] *** squashable6 left
[13:00] *** greppable6 left
[13:00] *** reportable6 left
[13:00] *** bisectable6 left
[13:00] *** nativecallable6 left
[13:00] *** releasable6 left
[13:00] *** tellable6 left
[13:01] *** unicodable6 joined
[13:01] *** quotable6 joined
[13:01] *** nativecallable6 joined
[13:01] *** bisectable6 joined
[13:01] *** coverable6 joined
[13:01] *** greppable6 joined
[13:02] *** benchable6 joined
[13:02] *** committable6 joined
[13:02] *** evalable6 joined
[13:02] *** tellable6 joined
[13:02] *** sourceable6 joined
[13:02] *** notable6 joined
[13:02] *** squashable6 joined
[13:02] *** statisfiable6 joined
[13:03] *** bloatable6 joined
[13:03] *** releasable6 joined
[13:03] *** shareable6 joined
[13:03] *** reportable6 joined
[13:03] *** linkable6 joined
[13:34] <Xliff> use v6.*; use RakuAST::Deparse::L10N::ES; say Q|my $foo; our $bar; class A { has $.hello }|.AST.DEPARSE(RakuAST::Deparse::L10N::ES)
[13:34] <Xliff> m: use v6.*; use RakuAST::Deparse::L10N::ES; say Q|my $foo; our $bar; class A { has $.hello }|.AST.DEPARSE(RakuAST::Deparse::L10N::ES)
[13:34] <camelia> rakudo-moar e66bcd670: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find RakuAST::Deparse::L10N::ES in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/ra…»
[13:34] <Xliff> m: use v6.*; use RakuAST::Deparse::L10N::JP; say Q|my $foo; our $bar; class A { has $.hello }|.AST.DEPARSE(RakuAST::Deparse::L10N::JP)
[13:34] <camelia> rakudo-moar e66bcd670: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find RakuAST::Deparse::L10N::JP in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/ra…»
[13:34] <Xliff> m: use v6.*; use RakuAST::Deparse::L10N::DE; say Q|my $foo; our $bar; class A { has $.hello }|.AST.DEPARSE(RakuAST::Deparse::L10N::DE)
[13:34] <camelia> rakudo-moar e66bcd670: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find RakuAST::Deparse::L10N::DE in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/ra…»
[13:40] * Xliff consideres use cases... and his eyes go wide.... 
[13:40] <Xliff> Coooool!
[14:06] <Geth> ¦ setup-raku: f6c2e1f0d6 | dependabot[bot]++ (committed using GitHub Web editor) | 2 files
[14:06] <Geth> ¦ setup-raku: Bump semver from 7.3.7 to 7.5.2
[14:06] <Geth> ¦ setup-raku: 
[14:06] <Geth> ¦ setup-raku: Bumps [semver](https://github.com/npm/node-semver) from 7.3.7 to 7.5.2.
[14:06] <Geth> ¦ setup-raku: - [Release notes](https://github.com/npm/node-semver/releases)
[14:06] <Geth> ¦ setup-raku: - [Changelog](https://github.com/npm/node-semver/blob/main/CHANGELOG.md)
[14:06] <Geth> ¦ setup-raku: - [Commits](https://github.com/npm/node-semver/compare/v7.3.7...v7.5.2)
[14:06] <Geth> ¦ setup-raku: 
[14:06] <Geth> ¦ setup-raku: <…commit message has 7 more lines…>
[14:06] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/f6c2e1f0d6
[14:06] <Geth> ¦ setup-raku: ecf28d5c4e | (Shoichi Kaji)++ (committed using GitHub Web editor) | 2 files
[14:06] <Geth> ¦ setup-raku: Merge pull request #28 from Raku/dependabot/npm_and_yarn/semver-7.5.2
[14:06] <Geth> ¦ setup-raku: 
[14:06] <Geth> ¦ setup-raku: Bump semver from 7.3.7 to 7.5.2
[14:06] <Geth> ¦ setup-raku: review: https://github.com/Raku/setup-raku/commit/ecf28d5c4e
[14:16] *** linkable6 left
[14:16] *** evalable6 left
[14:17] *** evalable6 joined
[14:19] *** linkable6 joined
[14:28] <elcaro> Has someone a blog/gist on migrating my modules from legacy ecosystem & CPAN to zef
[14:29] <elcaro> I figure at the very least, a version  bump & author update, and push to zef.
[14:29] <elcaro> legacy ecosystem I probably just delete it from that big flat file
[14:30] <elcaro> CPAN I'm not so sure... Can I even delete from CPAN? I guess I should log into PAUSE and check, but if anyone has a min-guide that would help
[14:30] <elcaro> (or am I basically on the right track with the above statements)
[14:31] *** tea3po left
[14:31] *** tea3po joined
[14:33] *** teatwo joined
[14:36] *** tea3po left
[15:15] <timo> Xliff: what use cases can you think of? i'm not entirely sure
[15:22] <leont> elcaro: you can delete files from CPAN, though I have no idea how the indexer handles it
[15:36] *** linkable6 left
[15:36] *** evalable6 left
[15:38] *** evalable6 joined
[15:39] *** linkable6 joined
[16:00] *** rf joined
[16:07] *** RakuIRCLogger left
[16:07] *** lizmat left
[16:07] *** Geth left
[16:08] <rf> Morning folks
[16:09] *** lizmat joined
[16:53] <timo> there's also i think a website that keeps deleted stuff from cpan
[16:56] <sjn> set your mirror to https://backpan.perl.org to download packages that have been removed from cpan
[17:05] *** xinming left
[17:07] *** xinming joined
[17:17] <ingy> anyone know if this work got done for raku? https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku
[17:27] *** sena_kun joined
[17:34] <discord-raku-bot> <nemokosch> soon™️ for years
[17:34] <discord-raku-bot> <nemokosch> ceterum censeo, it's a nonsense that YAML doesn't support mixing anchored arrays in another array
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:10] *** lizmat left
[18:11] *** lizmat joined
[18:12] *** Geth joined
[18:33] *** rf left
[18:49] *** rf joined
[19:21] *** ab5tract joined
[19:21] *** Sgeo joined
[19:24] <Xliff> timo: I18N Raku?
[20:01] *** ab5tract left
[20:21] <Voldenet> I've seen some programming languages with i18n and it was the most horrifying stuff I've ever seen
[20:23] <Voldenet> it seems like a good idea to not use english everywhere, but then you end up using single syscall/module/some moving part that only uses english for its debug output, exceptions and other messages
[20:40] <timo> excel has i18n for formulas
[20:41] <timo> https://support.content.office.net/en-us/media/c945ab14-3546-408e-aead-a92a7e287f35.png
[20:42] <timo> https://support.microsoft.com/en-us/office/excel-functions-translator-f262d0c0-991c-485b-89b6-32cc8d326889
[20:56] <guifa> so for i18n, one thing we COULD do (and I had kinda working) is i18lize the error messages
[20:57] <guifa> the catch is it requires wrapping .message on every X:: on INIT which is, well, slow (I don't think it was working on BEGIN when I last looked at it)
[21:01] *** evalable6 left
[21:01] *** linkable6 left
[21:02] *** evalable6 joined
[21:03] *** linkable6 joined
[21:36] <[Coke]> if we are doing internationalization right, we should have a lookup table for all the error messages, and not have english be special.
[21:42] <Voldenet> formulas in excel create very annoying problem that is solved by "functions translator" addin
[21:42] <Voldenet> this is not particularily useful, because excel itself isn't that user friendly to begin with
[21:44] <Voldenet> it's from the same the same line of reasoning that translates error messages
[21:46] <Voldenet> You _help_ your users by letting them use _their_ language
[21:47] <lizmat> I think the most important thing is being able to deparse a program in language X in language Y
[21:47] <lizmat> so that people using different languages can help each other fixing problems
[21:48] <Voldenet> sure why not, as long as it's a programming language
[21:53] *** derpydoo left
[21:54] <Voldenet> imo english variable, class, method names and comments are bigger problems than keywords in any actual code
[21:56] <Voldenet> I'm not going to hate deparsing too hard, but translated exceptions are pure evil
[22:00] <Voldenet> Most error messages are always going to be irrelevant (no matter the language) for end users, but when the developer gets an error message that uses enduser's language, they actually may not understand what it says
[22:04] <Voldenet> on top of it, translated messages are really, really difficult to find
[22:06] <lizmat> if all error messages are typed, then translating should be a smot (simple matter of translation)
[22:06] <lizmat> so maybe we should first try to get rid of ad-hoc error messages in core :-)
[22:07] <lizmat> I think though that multi language support would be befitting a 100 year programming language
[22:07] <Voldenet> I'd just argue to make translations opt-in choice
[22:07] <[Coke]> elminating ad hoc messages is great on its own.
[22:09] <lizmat> Voldenet: they would always be opt-in: in the DEPARSE examples, you need to specify a role to get translations
[22:09] <Voldenet> of course, but for exceptions, I'm scared of C# way of doing it
[22:11] <lizmat> on that thought, /me goes to sleep&
[22:13] <[Coke]> ~~
[22:16] *** squashable6 left
[22:19] *** squashable6 joined
[22:20] <discord-raku-bot> <nemokosch> C# putting people to bed lol
[22:21] <Voldenet> implementing nqp in C# would let you see `未将对象引用设置到对象的实例` as error message when using zh-Hans locale
[22:22] <Voldenet> that doesn't invite good night's sleep
[22:32] <Tirifto> I think multilingual programming would be great to have, but perhaps tricky to get right. I’ve seen Citrine do it, but from what I know, the implementation of the localisation was pretty naïve.
[22:36] *** sena_kun left
[22:38] <Tirifto> I don’t think translating whole programs is a particularly efficient way to go, but you’d definitely want the interface to be translatable. So any names that get exported from a package (variables, subs, methods). Because otherwise a module written in Chinese would be practically unusable by modules written in Hebrew, for example.
[22:39] <Voldenet> in the meanwhile, all programmers will simply switch to english :)
[22:39] <Voldenet> if you don't get a single thing right that is
[22:42] <Tirifto> And then languages have the problem of not mapping one-to-one. A word can be translated in different ways, just as multiple words can have the same translation in a different language. Which can cause problems in translating code, i.e. if you rely on polymorphism that only works because the names of two different methods happen to agree in your language, but might not in others.
[22:43] <Tirifto> Voldenet, all programmers already use English, so the only way to go is up. :P
[22:46] *** derpydoo joined
[23:08] <Voldenet> but of course, some programmers use the funny math symbols mostly, but eventually there's tons of english there
[23:40] <guifa> [Coke]: that I think could be done.  I don't think the error messages themselves are per se Raku standard.
[23:41] <guifa> lizmat: you know I'm VERY in favor of getting rid of adhoc messages.  I think it's good not just for i18n, but also for allowing errors to be filtered better
[23:41] <guifa> (e.g. some messages make a message based on a priviate attribute, or generate a message that combines three or four data points but aren't easily extreactable)
[23:42] <leont> Yeah, less ad-hoc exceptions would be great
[23:45] <guifa> given
[23:46] *** evalable6 left
[23:46] *** linkable6 left
[23:46] <guifa> class A { method x { … } }; class B is A { method x { … } }; 
[23:46] *** linkable6 joined
[23:46] <guifa> is there anyway I can wrap A.x() that would ALSO manage to catch calls to B.x() ?  (I'm assuming no)
[23:47] *** evalable6 joined
[23:51] <guifa> if that's the case, if we did an overhaul of X classes, if we had X.message pass along to a X.MAKE-MESSAGE that was in turn set for each class, then a localization module could easily wrap X.message() and handle stuff without the overhead of hundreds of wraps
[23:53] <guifa> Also re parse/deparse.  AppleScript (RIP) apparently had an experimental French and German dialect going which actually could work okay because scripts actually compiled to a weird bytecode that preserved to a large degree certain structures of the input.
[23:54] <guifa> (not that I'm suggesting we do that.  I think error messages is as far as we should go.  MAYBE figuring out a way to fenangle .WHY or something but that's better on individual compiles I think)
[23:57] *** RonaldR34g4m left
[23:57] *** Vyrus joined
