[00:29] <tbrowder__> ugexe: thanks, i'll look again. i need to prettify the article anyway

[00:30] <tbrowder__> lizmat: mKing

[00:30] <tbrowder__> **

[00:34] <tbrowder__> lizmat: making great progress on hugely improving CSV-Autoclass 'cause i'm using it installed locally for another project. no promises, but i may be able to push out another advent article later.

[02:19] *** MasterDuke joined
[02:48] *** hulk joined
[02:48] *** kylese left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:28] *** edr left
[03:30] *** kylese left
[03:34] *** kylese joined
[06:28] *** CIAvash joined
[07:13] *** melezhik joined
[07:13] <melezhik> o/

[07:14] <melezhik> say I use some module - "use Foo;"  how can I get a list of exported functions names ?

[07:15] <melezhik> as well as class names inside a module's unit name space?

[07:16] <melezhik> m: unit module Foo; our sub foo () {say 1} is export; foo()

[07:16] <camelia> rakudo-moar 73470580c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> unit module Foo; our sub foo () {say 1}⏏ is export; foo()␤    expecting any of:␤        infix␤        infix s…»

[07:16] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; foo()

[07:16] <camelia> rakudo-moar 73470580c: OUTPUT: «1␤»

[07:17] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; say @EXPORT;

[07:17] <camelia> rakudo-moar 73470580c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@EXPORT' is not declared.  Did you mean 'EXPORT'?␤at <tmp>:1␤------>  our sub foo () is export {say 1} ; say ⏏@EXPORT;␤»

[07:17] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; say EXPORT;

[07:17] <camelia> rakudo-moar 73470580c: OUTPUT: «(EXPORT)␤»

[07:20] <melezhik> found here - https://docs.raku.org/language/modules#Modules

[07:21] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; say Foo::.keys;

[07:21] <camelia> rakudo-moar 73470580c: OUTPUT: «(EXPORT &foo)␤»

[07:22] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; say Foo::DEFAULT::.keys;

[07:22] <camelia> rakudo-moar 73470580c: OUTPUT: «Could not find symbol '&DEFAULT' in 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[07:22] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; say Foo::Export::DEFAULT::.keys;

[07:22] <camelia> rakudo-moar 73470580c: OUTPUT: «Could not find symbol '&DEFAULT' in 'Foo::Export'␤  in block <unit> at <tmp> line 1␤␤»

[07:22] <melezhik> m: unit module Foo; our sub foo () is export {say 1} ; say Foo::EXPORT::DEFAULT::.keys;

[07:22] <camelia> rakudo-moar 73470580c: OUTPUT: «(&foo)␤»

[07:23] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say $f.signature };

[07:23] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:23] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say $f().signature };

[07:23] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:24] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say &$f().signature };

[07:24] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:27] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say &::($f).signature };

[07:27] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:28] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say &::($f.^name).signature };

[07:28] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:29] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say $f.Str };

[07:29] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:29] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $f () { say $f };

[07:29] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:50] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $i () { my &f = Foo::EXPORT::DEFAULT::{$I}; say &f.name; say &f.signature;  };

[07:50] <camelia> rakudo-moar 73470580c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$I' is not declared.  Did you mean '$i'?␤at <tmp>:1␤------>  $i () { my &f = Foo::EXPORT::DEFAULT::{⏏$I}; say &f.name; say &f.signature;  };␤»

[07:50] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1} ; for Foo::EXPORT::DEFAULT::.keys -> $i () { my &f = Foo::EXPORT::DEFAULT::{$i}; say &f.name; say &f.signature;  };

[07:50] <camelia> rakudo-moar 73470580c: OUTPUT: «Cannot unpack or Capture `&foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block  at <tm…»

[07:51] <melezhik> m: unit module Foo; our sub foo (Int $s) is export {say 1000} ;  for Foo::EXPORT::DEFAULT::.keys -> $i {  my &f = Foo::EXPORT::DEFAULT::{$i};  say &f.name; say &f.signature; }

[07:51] <camelia> rakudo-moar 73470580c: OUTPUT: «foo␤(Int $s)␤»

[07:52] <melezhik> works now ))

[07:53] *** CIAvash left
[08:04] *** melezhik left
[08:19] *** gdown left
[09:00] *** lichtkind_ joined
[09:04] *** jpn joined
[09:10] *** melezhik joined
[09:11] *** jpn left
[09:11] <melezhik> how can I iterate though all symbols provide by module export (exported functions) when requiring  module (not loading it) ?

[09:12] <melezhik> https://docs.raku.org/language/modules#require example only shows how to reference to a specific symbol (function name), but I would like to iterate through all of them

[09:20] <melezhik> looks like this - 'require Foo;  say Foo::.keys'

[09:35] *** sena_kun joined
[09:42] *** melezhik left
[09:47] *** jpn joined
[10:06] *** clarkema1 left
[10:26] *** jpn left
[10:34] *** jpn joined
[11:45] *** Sgeo left
[12:28] *** jpn left
[12:45] *** perlbot left
[12:45] *** simcop2387 left
[12:55] *** jpn joined
[12:57] *** simcop2387 joined
[12:58] *** perlbot joined
[13:16] *** jpn left
[13:42] *** jpn joined
[14:00] *** MasterDuke left
[14:04] *** jpn left
[14:20] *** jpn joined
[14:54] *** djuber` joined
[14:54] *** djuber` left
[15:40] *** mcmillhj joined
[15:55] *** kylese left
[15:57] *** kylese joined
[15:58] *** clarkema1 joined
[16:18] *** john joined
[16:18] *** john is now known as Guest8461

[16:47] *** mcmillhj left
[17:01] *** Guest8461 left
[17:14] *** lichtkind__ joined
[17:17] *** lichtkind_ left
[17:18] *** gfldex joined
[17:21] *** jpn left
[17:25] *** jpn joined
[17:37] *** simcop2387 left
[17:37] *** perlbot left
[17:48] *** simcop2387 joined
[17:49] *** perlbot joined
[17:50] *** perlbot left
[17:50] *** simcop2387 left
[18:00] *** simcop2387 joined
[18:02] *** perlbot joined
[18:07] *** simcop2387 left
[18:07] *** perlbot left
[18:29] *** simcop2387 joined
[18:31] *** perlbot joined
[18:34] *** simcop2387 left
[18:34] *** perlbot left
[18:48] *** simcop2387 joined
[18:48] *** simcop2387 left
[18:58] *** simcop2387 joined
[18:59] *** perlbot joined
[19:00] *** perlbot left
[19:00] *** simcop2387 left
[19:50] <Xliff> \o

[19:50] <Xliff> Who is running raku.lang?

[19:51] *** Sgeo joined
[19:53] *** simcop2387 joined
[19:55] *** perlbot joined
[19:59] <lizmat> Xliff: you mean raku.land?

[19:59] <lizmat> https://raku-advent.blog/2023/12/02/an-update-on-raku-land/

[19:59] <Xliff> Yes, who is running it.

[19:59] *** Xliff_ left
[20:06] *** jpn left
[20:12] <Xliff> I need help setting up my local copyh of raku.land -- has anyone done it before? I have the docker container running, but there is no site.

[20:21] *** jpn joined
[20:23] *** perlbot left
[20:23] *** simcop2387 left
[20:29] *** jpn left
[20:47] *** simcop2387 joined
[20:48] *** perlbot joined
[20:49] <discord-raku-bot> <librasteve> what port mapping in docker run cmd?

[21:18] *** jpn joined
[21:23] *** jpn left
[21:51] *** eseyman left
[22:13] *** manu_ joined
[22:13] *** manu_ is now known as eseyman

[23:01] <lizmat> Xliff: you might get more direct help on #raku-land

[23:07] <clarkema1> I decided to have a play around with testing Readline on openbsd, just for fun. On a fresh installation of 7.4, I had to patch zef's tar detection routine to get it to work, but am now encoutering the following: https://gist.github.com/clarkema/ec15c0fbca7701d54ea6ef6ab47d3b7a

[23:07] <clarkema1> I'm at a bit of a loss as to why it would be failing to recognise, or (alternatively) incorrectly creating the 'dist' directory just on openbsd

[23:08] <clarkema1> I've tried getting it to use gnu tar for the extraction just in case that was making a difference, but that doesn't seem to have helped -- any ideas welcome!

[23:13] *** sena_kun left
[23:13] *** sena_kun joined
[23:14] *** sena_kun left
[23:16] *** antim0d3s joined
[23:17] *** sdfgsdfg left
[23:20] <clarkema1> ah, never mind -- it _is_ a gnu vs bsd tar issue. I'll keep digging

[23:27] *** jpn joined
[23:32] <ugexe> what did you need to update re tar detection?

[23:32] *** jpn left
[23:34] <clarkema1> ugexe: I'll do a PR once I've run down the second issue, but in short https://github.com/ugexe/zef/blob/main/lib/Zef/Service/Shell/tar.rakumod#L93

[23:34] <clarkema1> just running bare 'tar' on openbsd doesn't output any of the magic words

[23:34] <clarkema1> obsd-test$ tar

[23:34] <clarkema1> tar: Failed open to read on /dev/rst0: Permission denied

[23:35] <clarkema1> So I changed to BEGIN my @needles = <archive file specify /dev/rst0:>;

[23:35] <ugexe> I dont remember how I came up with that detection on openbsd 🤔

[23:36] <clarkema1> Tested on 7.4, and I've checked the bare tar output on an old 6.8 machine and it's the same

[23:38] <clarkema1> bare tar on FreeBSD gives this: `tar: Must specify one of -c, -r, -t, -u, -x`, so maybe it used to look similar on openbsd, but if so it was at least prior to 6.8

[23:38] <ugexe> i probably just asked chatgpt to pretend to be an openbsd command prompt or something

[23:38] <clarkema1> lol

[23:40] <ugexe> i guess there is no way to get a more... complete?... help output?

[23:41] <clarkema1> it doesn't appear so, other than by making it barf to generate a usage message

[23:42] <clarkema1> https://gist.github.com/clarkema/7ead2ff13e62eb6618f9c58388432466

[23:42] <clarkema1> of course, an openbsd installation that doesn't have /bin/tar is pretty damn broken, so its presence could be assumed

[23:47] <clarkema1> The second issue is a missing 'z' flag further down the file, which gnu tar is cool with but not bsd tar

[23:47] <clarkema1> just testing now

[23:49] <ugexe> i'm not sure it is bsdtar, because macos and windows both come with bsdtar and work

[23:49] <clarkema1> ah, well maybe it's just openbsd /bin/tar being special then. I have no idea when they all forked off each other

[23:52] <clarkema1> how do you feel about the detection change, before I do a PR? Would you prefer some other test?

[23:55] <ugexe> I'm fine with making the detection work, i'm just not sure the best way to do it. Adding a check for `/dev/rst0:` probably doesn't work if /dev/rst0 actually exists. adding a random flag can potentially break in a future version of tar. Ideally there would be some parameter/flags that could be used to get either a 0 exit code or deterministic output. I'd accept a PR regardless as long as some

[23:55] <ugexe> consideration is given to those concerns before submitting though

[23:56] <clarkema1> Fair point. Sadly I don'th have a tape drive lying around

[23:57] <clarkema1> One option could be to ship the world's smallest tar file and try to extract it

[23:57] <ugexe> ah, is /dev/rst0 always gonna be a tape drive?

[23:57] <clarkema1> yeah

[23:57] <ugexe> ah, then maybe it is fair to check for that then. if someone has a tape drive i suppose they can file a bug report and then we'll figure out a better option

[23:59] <clarkema1> tar -cf - exits silently and succesfully

