[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:05] *** TieUpYourCamel joined
[00:17] *** timo left
[00:18] *** timo joined
[00:27] *** timo left
[00:28] *** timo joined
[01:03] *** xinming left
[01:06] *** xinming joined
[01:12] *** jpn joined
[01:17] *** jpn left
[01:20] *** MasterDuke joined
[02:16] *** Xliff left
[02:20] *** teatwo joined
[02:22] *** teatime left
[02:49] *** teatwo left
[02:49] *** teatwo joined
[03:00] *** jpn joined
[03:05] *** jpn left
[03:15] *** tea3po joined
[03:18] *** teatwo left
[03:21] <SmokeMachine> coleman: My NATS client (https://github.com/FCO/nats) has a few tests now, I still do nothing with the data received by servers INFO command and do not pass anything on CONNECT, and many other non implemented features... do you have any suggestion on what should be the next step?
[04:18] *** evalable6 left
[04:18] *** linkable6 left
[04:19] *** linkable6 joined
[04:19] *** evalable6 joined
[04:36] *** kybr left
[04:36] *** kybr joined
[04:48] *** jpn joined
[04:53] *** jpn left
[05:43] *** jpn joined
[05:48] *** jpn left
[05:57] *** emakei joined
[05:57] *** emakei left
[06:00] *** lizmat left
[06:00] *** vrurg left
[06:00] *** rypervenche left
[06:00] *** gfldex left
[06:00] *** gabiruh left
[06:00] *** Altreus left
[06:00] *** lucs left
[06:00] *** moritz left
[06:00] *** bdju left
[06:00] *** rjbs left
[06:00] *** zups left
[06:00] *** esh left
[06:00] *** amenonsen left
[06:00] *** pierrot left
[06:00] *** Sevalecan left
[06:00] *** JRaspass left
[06:00] *** lucs joined
[06:00] *** moritz joined
[06:00] *** reportable6 left
[06:00] *** gfldex joined
[06:00] *** rypervenche joined
[06:00] *** esh joined
[06:00] *** amenonsen joined
[06:00] *** zups joined
[06:00] *** rjbs joined
[06:00] *** JRaspass joined
[06:01] *** vrurg joined
[06:01] *** lizmat joined
[06:01] *** rypervenche left
[06:01] *** rypervenche joined
[06:01] *** reportable6 joined
[06:02] *** gabiruh joined
[06:02] *** pierrot joined
[06:02] *** Sevalecan joined
[06:03] *** Altreus joined
[06:06] *** bdju joined
[06:49] *** zara joined
[06:59] *** zara left
[07:24] *** squashable6 left
[07:26] *** squashable6 joined
[07:32] *** jpn joined
[07:37] *** jpn left
[08:21] *** RonaldR34g4m left
[08:21] *** RonaldR34g4m joined
[08:57] *** jpn joined
[09:57] *** quotable6 left
[09:57] *** reportable6 left
[09:57] *** squashable6 left
[09:57] *** bloatable6 left
[09:57] *** bisectable6 left
[09:57] *** linkable6 left
[09:57] *** greppable6 left
[09:57] *** statisfiable6 left
[09:57] *** unicodable6 left
[09:57] *** tellable6 left
[09:57] *** evalable6 left
[09:57] *** sourceable6 left
[09:57] *** releasable6 left
[09:57] *** shareable6 left
[09:57] *** benchable6 left
[09:57] *** notable6 left
[09:57] *** nativecallable6 left
[09:57] *** coverable6 left
[09:57] *** committable6 left
[09:57] *** committable6 joined
[09:57] *** squashable6 joined
[09:57] *** notable6 joined
[09:57] *** statisfiable6 joined
[09:58] *** linkable6 joined
[09:58] *** bloatable6 joined
[09:58] *** unicodable6 joined
[09:58] *** releasable6 joined
[09:58] *** nativecallable6 joined
[09:58] *** coverable6 joined
[09:59] *** evalable6 joined
[09:59] *** benchable6 joined
[09:59] *** greppable6 joined
[09:59] *** shareable6 joined
[09:59] *** tellable6 joined
[09:59] *** bisectable6 joined
[09:59] *** reportable6 joined
[09:59] *** sourceable6 joined
[10:00] *** quotable6 joined
[10:01] *** Archenoth joined
[10:02] *** arch left
[10:29] *** Sgeo left
[11:02] *** derpydoo joined
[11:37] *** linkable6 left
[11:39] *** linkable6 joined
[11:43] *** derpydoo left
[12:00] *** reportable6 left
[12:02] *** codesections1 joined
[12:02] *** reportable6 joined
[12:03] *** codesections left
[12:03] *** codesections1 is now known as codesections
[12:08] *** codesections1 joined
[12:10] *** codesections left
[12:10] *** codesections1 is now known as codesections
[12:12] *** codesections1 joined
[12:14] *** codesections left
[12:15] *** codesections joined
[12:17] *** codesections1 left
[12:33] *** codesections1 joined
[12:34] *** codesections left
[12:34] *** codesections1 is now known as codesections
[12:57] *** codesections1 joined
[12:59] *** codesections left
[12:59] *** codesections1 is now known as codesections
[13:23] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/05/29/2023-22-rakuast-rolling/
[13:59] *** linkable6 left
[13:59] *** evalable6 left
[13:59] *** linkable6 joined
[14:01] *** evalable6 joined
[14:13] *** BinGOs left
[14:13] *** perlbot_ joined
[14:13] *** bingos joined
[14:14] *** perlbot left
[14:14] *** perlbot_ joined
[14:14] *** perlbot_ is now known as perlbot
[14:19] *** tea3po left
[14:19] *** tea3po joined
[14:20] *** tea3po left
[14:20] *** Xliff joined
[14:20] <Xliff> \o
[14:20] *** tea3po joined
[14:21] *** tea3po left
[14:22] *** tea3po joined
[14:36] *** codesections1 joined
[14:38] *** codesections left
[14:38] *** codesections1 is now known as codesections
[15:10] *** Archenoth is now known as 011AAH1DS
[15:10] *** 011AAH1DS is now known as arch
[15:28] <uzl[m]> lizmat++
[15:32] <uzl[m]> I ~~didn't~~ don't know much about the differences between sigilless and sigilled variables so I created this gist highlighting their differences.  Let me know if I'm lying somewhere or completely misunderstanding things haha
[15:32] <uzl[m]> https://gist.github.com/uzluisf/b3539dbf95ad6b1e158313f4646e6c05
[15:34] <lizmat> uzl[m]: I wouldn't call [1, 2] a container
[15:36] <uzl[m]> m: my \a := [1, 2]; say a; a = [3, 4]; say a;
[15:36] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´[1 2]‚ê§[3 4]‚ê§¬ª
[15:36] <uzl[m]> What allows for storing new values into a sigilless once it's been bound to here?
[15:37] <lizmat> with sigilless "variables" you create a term to which an object is bound
[15:38] *** bingos is now known as BinGOs
[15:38] <lizmat> m: my \a = [1,2]; dd a
[15:38] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´[1, 2]‚ê§¬ª
[15:38] <lizmat> m: my \a = [1,2]; dd a; a := 42
[15:38] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Cannot bind to 'a' because it is a term and terms cannot be rebound‚ê§at <tmp>:1‚ê§------> my \a = [1,2]; dd a; a := 42‚èè<EOL>‚ê§¬ª
[15:38] <lizmat> m: my \a = [1,2]; dd a; a.push(666); dd a
[15:38] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´[1, 2]‚ê§[1, 2, 666]‚ê§¬ª
[15:38] <lizmat> the object that it is bound to, can be mutable, in case of an Array
[15:39] <lizmat> m: my \a = (1,2); dd a; a.push(666)
[15:39] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´(1, 2)‚ê§Cannot call 'push' on an immutable 'List'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[15:39] <lizmat> but if it is not mutable, you cannot change the contents of that object
[15:39] <lizmat> m: my \a = my $; a = 42; say a
[15:39] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´42‚ê§¬ª
[15:40] <uzl[m]> So the object is mutable but it's not a container, right? I think this makes sense but trying to wrap my head around it 
[15:40] <lizmat> now, if you bind a container to a sigilless variable, it becomes assignable, because containers *are* assignable
[15:40] <lizmat> well, the thing you need to realize is that sigilless variables are just objects
[15:40] <uzl[m]> What would that look like? Something like my \a := $;?
[15:41] <lizmat> if the object in question can be mutated, it is mutable
[15:41] <lizmat> my \a = $    would bind the nameless state variable
[15:41] <uzl[m]> Right, that makes sense ü§î
[15:42] <uzl[m]> Tangentially related, where does Raku borrow the concept of containers from (in this context)?
[15:42] <lizmat> the simplest way to bind a container is the '= my $' trick
[15:43] <lizmat> good question: it was one of the hardest things I have needed to grok when starting with Raku, coming from Perl
[15:44] <uzl[m]> m: my \s = my $ = 1; say s; s++;  say s;
[15:44] <camelia> rakudo-moar 6325d10f4: OUTPUT: ¬´1‚ê§2‚ê§¬ª
[15:44] <uzl[m]> Cool, back in Python land haha
[15:44] <lizmat> yup  -)
[15:45] <uzl[m]> Yeah I haven't tried that many languages but I have never found the concept of containers in the ones I've tinkered with so it's kind of interesting 
[15:47] <uzl[m]> Thanks Liz! Happy Memorial Day everyone!
[15:47] <uzl[m]> I'm back to reading Liz's Rakudo Weekly! 
[16:38] *** linkable6 left
[16:38] *** evalable6 left
[16:38] *** linkable6 joined
[16:41] *** evalable6 joined
[16:57] *** jpn left
[17:07] *** jpn joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:14] *** bigdata joined
[18:32] *** codesections1 joined
[18:35] *** codesections left
[18:35] *** codesections1 is now known as codesections
[18:40] *** jpn left
[19:00] <tbrowder__> m: my \a = [1,2]; a.push: 3; dd a
[19:00] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´[1, 2, 3]‚ê§¬ª
[19:01] <tbrowder__> my a is an array. wasn't yours a list?
[19:02] <tbrowder__> sorry, i missed the first exmpl, back to sleep, bozo
[19:14] *** jpn joined
[19:17] *** Sgeo joined
[19:20] *** jpn left
[19:34] *** jpn joined
[20:02] *** rcy joined
[20:13] *** jpn left
[20:27] <lucs> Can I obtain the value (if any) of the "-I" command line option from inside my program?
[20:42] <tbrowder__> m: constant %h = [ a => 1 ]; say %h.WHAT
[20:42] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´(Map)‚ê§¬ª
[20:53] *** derpydoo joined
[21:12] <Xliff> lucs: https://stackoverflow.com/questions/35352971/dynamic-variable-inc-not-found
[21:17] *** jpn joined
[21:18] <Xliff> lucs: That boils down to the following -- $*REPO.repo-chain.grep( * ~~ CompUnit::Repository::FileSystem ).gist.say
[21:21] <Xliff> If you want the entire list of include directories, use: $*REPO.repo-chain.map( ~* ).grep( *.starts-with("/") ).gist.say
[21:34] <lucs> Xliff: Nice, thanks.
[21:39] *** jpn left
[22:07] <Xliff> lucs: yw
[22:19] <lizmat> lucs: there's also an undocumented way:
[22:19] <lizmat> m: say Rakudo::Internals.INCLUDE
[22:19] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´()‚ê§¬ª
[22:19] <lizmat> m: use lib 'lib'; say Rakudo::Internals.INCLUDE
[22:19] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´()‚ê§¬ª
[22:19] <lizmat> it's definitely just what is on -I
[22:20] *** bigdata left
[22:21] *** jpn joined
[22:21] <ugexe> -I is not restricted to file system repos 
[22:22] <ugexe> and you shouldn‚Äôt feel the repo chain objects using starts-with expecting paths eithe reslly
[22:24] <ugexe> Just $*REPO.repo-chain is sufficient 
[22:25] <ugexe> why you shouldn‚Äôt follow rhose
[22:25] <Xliff> ugexe: Actually, those are stringified CompUnit::Repository objects.
[22:25] <ugexe> grep examples is that /foo and file#/foo are the same 
[22:26] *** jpn left
[22:26] <Xliff> Which will resolve to a path or the name of  the class. Hence the .starts-with for things like AbsolutePath, Perl5 and such.
[22:26] <ugexe> I just showed why that is a bad assumption 
[22:26] <Xliff> m:  $*REPO.repo-chain.map( ~* )
[22:26] <camelia> rakudo-moar 65dc1204f: ( no output )
[22:26] <Xliff> m:  $*REPO.repo-chain.map( ~* ).say
[22:26] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´(/home/camelia/.raku /home/camelia/rakudo-m-inst-1/share/perl6/site /home/camelia/rakudo-m-inst-1/share/perl6/vendor /home/camelia/rakudo-m-inst-1/share/perl6/core CompUnit::Repository::AbsolutePath<2461569001312> CompUnit::Repository::NQP<24615940821‚Ä¶¬ª
[22:26] <ugexe> file#/foo is the same as /foo 
[22:27] <ugexe> Your example just shows what some possible values are. You shouldn‚Äôt assume those are the only values it could be
[22:27] <Xliff> I'm noit.
[22:27] <ugexe> sirry for the typos, my phone is not playing nice 
[22:27] <Xliff> However in the lack of documentation, this is the best I could get in the time allowed.
[22:28] <Xliff> No worries. I'm on my keyboard and I get them more than I'd like.
[22:29] <Xliff> I was actually hoping the stringified objects would contain the "file#" or "inst#" designation.
[22:29] <Xliff> Which CompUnit::Repository method handles that piece of information?
[22:29] <ugexe> Ah I see what you are saying, yeah I was wrong about how I thought they would stringify there 
[22:31] <ugexe> I think what is expected of people is to map the repo chain to repo-spec or spec-path or some such method I can‚Äôt grep for right now 
[22:35] <ugexe> maybe it‚Äôs .id on the repo
[22:36] <Xliff> m:  $*REPO.repo-chain.map( .id ).say
[22:36] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´No such method 'id' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:36] <Xliff> m:  $*REPO.repo-chain.map( *.id ).say
[22:36] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´(C76BB82FC7ACA3EB05223CDEDFE6A2A07C8298BD 9DEE4D5C0BAEF261BC738E4CD37D299285F14758 4673D8D2419A42AF180D631AE8A132D0EA08987B B36589A247B3ED3CF56CB3E15D65D79D282CBB49 ap NQP Perl5)‚ê§¬ª
[22:36] <Xliff> m:  $*REPO.repo-chain.head.^methods.map( *.name ).say
[22:36] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´(TWEAK writeable-path can-install name upgrade-repository install uninstall files candidates resolve need resource id short-id loaded distribution installed precomp-store precomp-repository load repo-chain new source-file WHICH Str gist raku next-repo‚Ä¶¬ª
[22:37] <Xliff> m:  $*REPO.repo-chain.map( *.name ).say
[22:37] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´No such method 'name' for invocant of type‚ê§'CompUnit::Repository::AbsolutePath'.  Did you mean any of these: 'are',‚ê§'none', 'note', 'take'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:37] <Xliff> m:  $*REPO.repo-chain.map( *.name ).say
[22:37] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´No such method 'name' for invocant of type‚ê§'CompUnit::Repository::AbsolutePath'.  Did you mean any of these: 'are',‚ê§'none', 'note', 'take'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:37] <Xliff> m:  $*REPO.repo-chain.map( *.?name ).say
[22:37] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´(home site vendor core Nil Nil Nil)‚ê§¬ª
[22:37] <ugexe> Oh it is path-spec 
[22:37] <Xliff> m:  $*REPO.repo-chain.map( *.?path-spec ).say
[22:37] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´(inst#/home/camelia/.raku inst#/home/camelia/rakudo-m-inst-1/share/perl6/site inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-1/share/perl6/core ap# nqp# perl5#)‚ê§¬ª
[22:38] <Xliff> Ahh... was hoping to just get the inst or file designation, but that works. Thanks.
[22:39] *** daxim left
[22:39] <ugexe> I think short-id would be just the prefix part 
[22:40] <uzl[m]> .seen codesections1 
[22:40] <tellable6> uzl[m], I saw codesections1 2022-03-29T20:41:00Z in #raku: <codesections> I don't have a release date for epee yet, sorry ‚òπ
[22:40] <uzl[m]> .tell codesections1 If your RA article (https://raku-advent.blog/2022/12/20/sigils/), there's this incomplete sentence: 
[22:40] <uzl[m]> "Or we could group them with curly brackets, which creates a."
[22:40] <tellable6> uzl[m], I'll pass your message to codesections
[22:43] <Xliff> ugexe: That it is! I almost missed that one. Thanks!
[22:44] <Xliff> m: $*REPO.repo-chain.map( ~* ).grep( *.short-id eq 'file' ) # -I list
[22:44] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´No such method 'short-id' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:44] <Xliff> m: $*REPO.repo-chain.grep( *.short-id eq 'file' ) # -I list
[22:44] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´No such method 'short-id' for invocant of type‚ê§'CompUnit::Repository::AbsolutePath'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:44] <Xliff> m: $*REPO.repo-chain.grep( *.?short-id eq 'file' ) # -I list
[22:44] <camelia> rakudo-moar 65dc1204f: OUTPUT: ¬´Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[22:45] <Xliff> m: $*REPO.repo-chain.grep({ ( .?short-id // '' ) eq 'file' }) # -I list
[22:45] <camelia> rakudo-moar 65dc1204f: ( no output )
[22:45] <ugexe> Welol, you can pass inst# repos or any repo to -I
[22:45] <Xliff> Wheee....
[22:45] <Xliff> I thought -I was only filesystem
[22:45] <ugexe> nope
[22:45] <Xliff> How would you pass #inst?
[22:45] <Xliff> Or inst#?
[22:46] <ugexe> inst#/path/to/repo typically 
[22:46] <ugexe> quoted 
[22:46] <Xliff> Oh. That simple. LOL
[22:47] <ugexe> if it‚Äôs a named repo (one of the defaults) then inst#site works 
[22:47] <Xliff> OK, thanks.
[22:47] <Xliff> Is any of this documented anywhere?
[22:49] <ugexe> No clue 
[22:49] <Xliff> OK. 
[22:49] <Xliff> I'll see if I can turn this conversation into something usable in my copious amounts of spare time. 
[22:49] <Xliff> Speaking of which... I think p6-EDS is screaming my name....
[22:50] * Xliff is off on more Adventures of the Quixotic Coder
[22:53] *** daxim joined
[23:15] *** daxim left
[23:37] *** daxim joined
