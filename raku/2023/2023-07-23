[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:47] *** kst joined
[01:04] *** squashable6 left
[01:05] *** squashable6 joined
[01:27] *** guifa joined
[01:58] *** razetime joined
[02:42] *** Voldenet_ joined
[02:42] *** Voldenet left
[02:42] *** Voldenet_ is now known as Voldenet
[03:33] *** razetime left
[03:42] *** Voldenet_ joined
[03:44] *** Voldenet left
[03:44] *** Voldenet_ is now known as Voldenet
[04:20] *** mark22k left
[04:22] *** mark22k joined
[04:31] *** razetime joined
[04:42] *** tea3po left
[04:42] *** tea3po joined
[04:45] *** tea3po left
[04:46] *** tea3po joined
[04:46] *** jpn joined
[05:37] *** jpn left
[05:44] *** jpn joined
[05:47] *** siavash joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:16] *** jpn left
[06:20] *** guifa left
[06:35] *** sena_kun joined
[07:16] *** jpn joined
[07:21] *** jpn left
[07:32] *** synthmeat left
[07:34] *** synthmeat joined
[07:36] *** Sgeo left
[07:38] *** gabiruh left
[07:40] *** gabiruh joined
[07:54] *** eroux left
[07:55] *** jpn joined
[07:58] *** razetime left
[07:59] *** eroux joined
[07:59] *** jpn left
[08:08] *** razetime joined
[08:09] *** RakuIRCLogger left
[08:09] *** RakuIRCLogger joined
[08:10] *** Geth left
[08:10] *** Geth joined
[08:13] *** RakuIRCLogger left
[08:13] *** RakuIRCLogger joined
[08:14] *** jpn joined
[08:19] *** jpn left
[09:12] *** jpn joined
[09:13] <lizmat> .tell tbrowder__ it's set up
[09:13] <tellable6> lizmat, I'll pass your message to tbrowder__
[09:18] *** jpn left
[09:49] *** jpn joined
[10:25] *** jpn left
[10:33] *** jpn joined
[10:53] *** andinus joined
[10:57] *** jpn left
[11:03] <tbrowder__> .tell lizmat thank you! i'll pass it on
[11:03] <tellable6> tbrowder__, I'll pass your message to lizmat
[11:57] *** linkable6 left
[11:57] *** evalable6 left
[11:58] *** evalable6 joined
[11:58] *** linkable6 joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:07] <SmokeMachine> antononcube: I found an old advent calendar post (writer by me) that shows that was that way once ago (https://perl6advent.wordpress.com/2016/12/22/day-22-generative-testing/) and for some reason I have changed that…
[12:18] *** razetime left
[12:30] *** sivoais left
[12:59] *** siavash left
[13:01] *** sivoais joined
[13:40] *** xinming_ left
[13:42] *** xinming_ joined
[13:53] *** jpn joined
[13:58] *** jpn left
[14:11] <tbrowder__> SmokeMachine: cool, i'll check it out
[14:11] <tellable6> 2023-07-23T09:13:44Z #raku <lizmat> tbrowder__ it's set up
[14:20] *** arco joined
[14:20] <arco> whats the point of raku(perl 6)?
[14:21] <arco> well im kinda new to perl. having 2 languages that do almost the same thing seems confusing to me.
[14:21] <lizmat> well, historically, Perl 6 was intended to be the next version of the Perl language
[14:22] <arco> so why is its botched?
[14:22] <lizmat> realistically, the Perl community decided it was not going to be the next version, so it made sense to rename the Perl 6 effort
[14:22] <lizmat> what is botched?
[14:22] <arco> never mind
[14:23] <tonyo> ,
[14:23] <tonyo> SmokeMachine: i don't want fuzz, i think an LLM comparison to it would be interesting for a talk
[14:28] <discord-raku-bot> <antononcube> Dully noted.
[14:34] <arco> when to use raku over perl?
[14:35] <lizmat> generally: use Raku, unless you have compelling reasons to use Perl
[14:36] <lizmat> but then I'm biased
[14:36] <arco> raku doesnt have cpan
[14:36] <lizmat> it does have https://raku.land
[14:37] <discord-raku-bot> <antononcube> @arco  There are several factors to consider when deciding whether to use Raku (formerly known as Perl 6) over Perl:  1. Language features: Raku offers a more modern and expressive syntax compared to Perl. It includes features like built-in support for object-oriented programming, functional programming, concurrency, and grammars for parsing.  2. Community and ecosystem: Perl has a much larger and more mature
[14:37] <discord-raku-bot> community and ecosystem compared to Raku. It has a vast number of modules and libraries available, making it easier to find solutions to common problems. Raku, being a relatively newer language, has a smaller community and a smaller ecosystem of modules, which may make it a less ideal choice for certain projects.  3. Legacy codebase: If you have an existing Perl codebase, it may be more practical to stick with Perl rather than
[14:37] <discord-raku-bot> migrating to Raku. Perl and Raku are distinct languages, and migrating code from Perl to Raku can require significant effort and changes.  4. Performance: Raku generally has a reputation for being slower than Perl, especially for certain tasks. If performance is a critical factor for your project, Perl might be a better choice.  5. Personal preference: Ultimately, the choice between Raku and Perl may also depend on personal
[14:37] <discord-raku-bot> preferences and familiarity with the languages. If you are already proficient in Perl and comfortable with its syntax and features, there may not be a strong motivation to switch to Raku unless you specifically require the additional features it offers.
[14:38] <discord-raku-bot> <antononcube> @arco The answer above is by OpenAI / ChatGPT.
[14:38] <lizmat> arco: also, if you install https://raku.land/cpan:NINE/Inline::Perl5  you have 99.99% of CPAN on your fingertips
[14:39] <arco> alright
[14:39] <arco> will go with it
[14:39] <discord-raku-bot> <antononcube> Hmmm... I should generate another "templated" document with 12-steps of replacing Perl with Raku.
[14:51] *** arco left
[15:27] *** heartburn left
[15:40] *** jpn joined
[15:45] *** jpn left
[15:50] *** heartburn joined
[15:52] *** ben_ joined
[15:57] *** Xliff joined
[15:58] <Xliff> m: my $d = DateTime.new( year => 2023, month => 6, day => 25 ); $d.say
[15:58] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «2023-06-25T00:00:00Z␤»
[15:58] <Xliff> m: my $d = DateTime.new( year => 2023, month => 6, day => 25 ); my $e = DateTime.new( year => 2023, month => 8, day => 25 ); $e.say
[15:58] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «2023-08-25T00:00:00Z␤»
[15:59] <Xliff> m: my $d = DateTime.new( year => 2023, month => 6, day => 25 ); my $e = DateTime.new( year => 2023, month => 8, day => 25 ); say $d..$e
[15:59] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «DateTime.new(2023,6,25,0,0,0)..DateTime.new(2023,8,25,0,0,0)␤»
[15:59] <Xliff> m: my $d = DateTime.new( year => 2023, month => 6, day => 25 ); my $e = DateTime.new( year => 2023, month => 8, day => 25 ); say ($d..$e).Array
[15:59] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «Range cannot be iterated over because its starting point␤'DateTime.new(2023,6,25,0,0,0)' does not have a '.succ' method␤  in block <unit> at <tmp> line 1␤␤»
[15:59] <Xliff> WTF?
[15:59] <Xliff> I thought you could iterated between DateTime endpoints using Range.
[16:00] <Xliff> m: role DateTimeSucc { method succ { self.later( :1day ) }; }; my $d = DateTime.new( year => 2023, month => 6, day => 25 ) but DateTimeSucc; my $e = DateTime.new( year => 2023, month => 8, day => 25 ); say ($d..$e).Array
[16:00] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «No such method 'succ' for invocant of type 'DateTime'.  Did you mean␤any of these: 'sum', 'utc'?␤  in block <unit> at <tmp> line 1␤␤»
[16:01] <Xliff> m: role DateTimeSucc { method succ { self.later( :1day ) }; }; my $d = DateTime.new( year => 2023, month => 6, day => 25 ) but DateTimeSucc; my $e = DateTime.new( year => 2023, month => 8, day => 25 ) but DateTimeSucc; say ($d..$e).Array
[16:01] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «[2023-06-25T00:00:00Z 2023-06-26T00:00:00Z 2023-06-27T00:00:00Z 2023-06-28T00:00:00Z 2023-06-29T00:00:00Z 2023-06-30T00:00:00Z 2023-07-01T00:00:00Z 2023-07-02T00:00:00Z 2023-07-03T00:00:00Z 2023-07-04T00:00:00Z 2023-07-05T00:00:00Z 2023-07-06T00:00:00…»
[16:01] <lizmat> Xliff: I seem to recall having made a module for that at some time
[16:01] <Xliff> m: role DateTimeSucc { method succ { self.later( :1day ) }; }; my $d = DateTime.new( year => 2023, month => 6, day => 25 ) but DateTimeSucc; my $e = DateTime.new( year => 2023, month => 8, day => 25 ) but DateTimeSucc; my @a = $d..$e; @a.elems.say
[16:01] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «62␤»
[16:01] <lizmat> Xliff: https://raku.land/zef:lizmat/Interval
[16:01] <Xliff> lizmat: Thanks. Will check it out.
[16:02] <Xliff> m: role DateTimeSucc { method succ { self.later( :1day ) }; }; my $d = DateTime.new( year => 2023, month => 6, day => 25 ) but DateTimeSucc; my $e = DateTime.new( year => 2023, month => 8, day => 25 ) but DateTimeSucc; my @a = $d..$e; @a.map( *.day ).gist.say
[16:02] <camelia> rakudo-moar 60a96bb6e: OUTPUT: «(25 26 27 28 29 30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)␤»
[16:02] <Xliff> Well THAT went pair-shaped.
[16:04] <lizmat> cherry-shaped?
[16:09] <Xliff> lizmat; Methinks bitrot has seeped into Interval.
[16:09] <Xliff> P6opaque: no such attribute '$!second' on type Interval in a Interval when trying to bind a value
[16:09] <lizmat> Xliff: interesting, /me checks
[16:10] <lizmat> Xliff: tests are ok for me... how did you make it bomp lioke that ?
[16:10] <lizmat> *like
[16:10] <Xliff> This triggers error: 'use Interval :refine; my $s = DateTime.now; $s = $s.earlier( day => $s.day.pred ); $s = $s.truncated-to("week").earlier( :1day );'
[16:10] <Xliff> This is on a fairly freshly squeezed raku.
[16:10] * lizmat checks again
[16:11] <Xliff> v2023.06-119-g60a96bb6e0
[16:17] <lizmat> hmm  looks like a thinko of about 2.5 years ago: e6c0b5e919
[16:18] <lizmat> running tests on a fix
[16:18] <Xliff> Ouch!
[16:19] <lizmat> it only affects sub-classes of DateTime doing .truncated-to
[16:21] <Xliff> Kinda need that one...
[16:21] <lizmat> yeah, fix forthcoming
[16:24] <Xliff> Huh... can't find that revision hash "e6c0b5e919"
[16:24] <lizmat> in rakudo?
[16:24] <Xliff> Oh! I thought you meant Interval. LOL!
[16:24] <lizmat> nope, Interval is ok
[16:25] <lizmat> it's a core issue
[16:25] <Xliff> O I C. I will leave you to it, then.
[16:25] <lizmat> running tests with the final version of the fix now
[16:32] <lizmat> Xliff: https://github.com/rakudo/rakudo/commit/b58bf6db30  :-)
[16:41] *** teatwo joined
[16:44] *** tea3po left
[17:08] <Xliff> Thanks, lizmat!
[17:44] *** linkable6 left
[17:44] *** evalable6 left
[17:44] *** evalable6 joined
[17:45] *** linkable6 joined
[18:00] *** reportable6 left
[18:00] <thebb> Installed 23 core modules in 9.732086748 seconds!
[18:01] <thebb> new laptop, breaking records
[18:02] *** reportable6 joined
[18:30] *** notna joined
[18:34] *** notna left
[18:35] *** notna joined
[18:36] *** jpn joined
[18:40] <[Coke]> META6:ver<0.0.29>:auth<zef:jonathanstowe>:api<1.0> failing to install on HEAD
[18:41] <[Coke]> module hasnt been updated for a year
[18:44] <[Coke]> bisecting...
[18:44] <lizmat> I think that's a known issue, currently under investigation
[18:47] *** jpn left
[18:49] <lizmat> vrurg knows more I think
[19:15] * [Coke] should script this. or use whateverable somehow
[19:18] *** notna left
[19:27] <vrurg> [Coke]: It's been discussed here: https://github.com/raku-community-modules/JSON-Unmarshal/issues/7, and here: https://github.com/raku-community-modules/JSON-Unmarshal/commit/61627a693f3e21db1c9c81bdf30af6256a7a92cf
[19:33] <[Coke]> vrurg, thanks
[20:00] *** codesections joined
[20:10] *** jpn joined
[20:24] *** jpn left
[20:27] *** jpn joined
[20:46] *** jpn left
[21:26] *** bigdata joined
[21:42] *** jpn joined
[21:47] *** jpn left
[22:28] *** sena_kun left
[22:39] *** Sgeo joined
[23:39] *** reportable6 left
[23:39] *** squashable6 left
[23:39] *** tellable6 left
[23:39] *** greppable6 left
[23:39] *** bloatable6 left
[23:39] *** bisectable6 left
[23:39] *** sourceable6 left
[23:39] *** statisfiable6 left
[23:39] *** nativecallable6 left
[23:39] *** notable6 left
[23:39] *** quotable6 left
[23:39] *** linkable6 left
[23:39] *** coverable6 left
[23:39] *** benchable6 left
[23:39] *** shareable6 left
[23:39] *** unicodable6 left
[23:39] *** committable6 left
[23:39] *** releasable6 left
[23:39] *** evalable6 left
[23:39] *** sourceable6 joined
[23:39] *** bloatable6 joined
[23:39] *** greppable6 joined
[23:39] *** shareable6 joined
[23:39] *** unicodable6 joined
[23:40] *** coverable6 joined
[23:40] *** squashable6 joined
[23:40] *** benchable6 joined
[23:40] *** tellable6 joined
[23:40] *** committable6 joined
[23:41] *** evalable6 joined
[23:41] *** linkable6 joined
[23:41] *** notable6 joined
[23:41] *** bisectable6 joined
[23:41] *** nativecallable6 joined
[23:41] *** reportable6 joined
[23:42] *** quotable6 joined
[23:42] *** releasable6 joined
[23:42] *** statisfiable6 joined
[23:46] *** bigdata left
