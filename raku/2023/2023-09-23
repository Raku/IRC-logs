[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:05] <ugexe> because its set as a my class variable, so its already been set before runtime
[00:05] <ugexe> https://github.com/rakudo/rakudo/blob/89755eb02fdc3065fe9b47c29576d2a1315c6396/src/core.c/CompUnit/Repository/Installation.rakumod#L12
[00:06] <ugexe> looks like it is a regression from https://github.com/rakudo/rakudo/commit/0639e1bcdce08944b5b1cf1a8dd3cb25cb559e4e
[00:12] <hythm> Thanks
[00:12] <hythm> so this is a genuine bug? if so I can create an issue
[00:38] <ugexe> i kinda think so. i would at least expect it to work with `BEGIN %*ENV<RAKUDO_LOG_PRECOMP> = 1; ...`
[00:39] *** hythm left
[00:40] <ugexe> i guess it could also be argued its not a bug. so i dunno
[00:44] <ugexe> m: BEGIN %*ENV<RAKUDO_MODULE_DEBUG> = 1; use Test;
[00:44] <camelia> rakudo-moar 89755eb02: OUTPUT: « 1 RMD: Attempting 'Test' as a pragma␤ 1 RMD:   'Test' is not a valid pragma␤ 1 RMD: Attempting to load 'Test'␤ 1 RMD:   Late loading 'Test'␤ 1 RMD: try-load source at ./rakudo-m-inst-2/share/perl6/core/sources/7446BEA8D62DB1C72975C92A521818D4…»
[00:44] <ugexe> that works though, which is why i lean towards it might be a bug
[00:45] <ugexe> although maybe that isn't a good example
[00:45] <ugexe> because it might really be
[00:45] <ugexe> m: use Test; BEGIN %*ENV<RAKUDO_MODULE_DEBUG> = 1;
[00:45] <camelia> rakudo-moar 89755eb02: ( no output )
[00:46] <ugexe> even though i set it at BEGIN time, the `use Test` also happens then and immediately before
[00:47] <ugexe> and in the case of RAKUDO_LOG_PRECOMP, when else should it check the ENV variable but compile time? and if it happens at compile time, its gonna be sequenced before the first character of user code e.g. %*ENV<...> = ...
[00:51] <ugexe> i suppose from a purely technical standpoint it is not a bug
[01:00] *** hythm joined
[01:00] <hythm> I see. Thanks for the detailed explanation.
[01:06] *** codesections left
[01:09] *** Manifest0 left
[01:54] *** wayland joined
[02:03] *** edr left
[03:03] *** linkable6 left
[03:03] *** evalable6 left
[03:04] *** evalable6 joined
[03:04] *** linkable6 joined
[04:04] *** benchable6 left
[04:04] *** squashable6 left
[04:04] *** unicodable6 left
[04:04] *** tellable6 left
[04:04] *** notable6 left
[04:04] *** reportable6 left
[04:04] *** evalable6 left
[04:04] *** committable6 left
[04:04] *** linkable6 left
[04:04] *** statisfiable6 left
[04:04] *** bloatable6 left
[04:04] *** releasable6 left
[04:04] *** reportable6 joined
[04:04] *** unicodable6 joined
[04:05] *** committable6 joined
[04:05] *** statisfiable6 joined
[04:05] *** releasable6 joined
[04:05] *** tellable6 joined
[04:05] *** squashable6 joined
[04:05] *** linkable6 joined
[04:06] *** benchable6 joined
[04:06] *** evalable6 joined
[04:07] *** notable6 joined
[04:07] *** bloatable6 joined
[04:23] *** hythm left
[04:46] *** raiph left
[05:24] *** jgaz left
[05:41] *** derpydoo joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:07] *** siavash joined
[06:26] *** xinming left
[06:28] *** xinming joined
[06:55] *** MoC joined
[07:23] *** kjp left
[07:27] *** kjp joined
[07:30] *** deoac left
[07:44] *** squashable6 left
[07:46] *** squashable6 joined
[07:56] *** siavash left
[08:51] *** eseyman left
[09:01] *** manu_ joined
[09:02] *** manu_ is now known as eseyman
[09:59] *** Manifest0 joined
[10:07] *** Sgeo left
[10:30] *** derpydoo left
[10:41] *** wayland left
[10:42] *** wayland joined
[10:49] *** MoC left
[11:29] *** lichtkind joined
[11:36] *** teatwo joined
[11:37] *** tea3po joined
[11:39] *** teatime left
[11:40] *** teatwo left
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:12] *** codesections joined
[12:40] *** simcop2387 left
[12:40] *** perlbot left
[12:42] *** perlbot joined
[12:43] *** simcop2387 joined
[12:43] *** wayland76 joined
[12:43] *** wayland left
[12:52] <tbrowder__> hi, i'm runnng into a prob building a new module. it has a script meant for the root user to execute, but a reqular user should be able to run other parts of it. the problem is the script uses routines from a lib/ module and i get permission problems with lib/.precomp.
[12:53] <tbrowder__> for a regular user.
[12:53] <lizmat> no precompilation ?
[12:54] <tbrowder__> there is an existing lib/.precomp created by root, and the a normal user gets access denied when trying to use the script
[12:55] *** codesections left
[12:55] *** thelio joined
[12:55] <tbrowder__> i haven't yet tried manually setting permissions, but i've never seen this behavior before.
[12:56] <tbrowder__> perhaps i should have ensured the precomp was created by the reg user, but a more general solution would be nice to have
[12:58] <tbrowder__> i'm not sure that is possible without an explict root incantation
[12:59] <tbrowder__> chmod 777
[13:00] <tbrowder__> lib
[13:03] <tbrowder__> but using correct syntax
[13:26] *** guessed joined
[13:28] <guessed> hi how can i catch this situation
[13:28] <guessed> m: put Whatever + 1; CATCH { default { .^name.put } }
[13:28] <camelia> rakudo-moar 75c615c4c: OUTPUT: «Use of uninitialized value of type Whatever in numeric context␤1␤  in block <unit> at <tmp> line 1␤»
[13:29] <guessed> with CATCH or with // or with orelse is there a way?
[13:30] <guessed> it is outputting 0 + 1 = 1, i like to detect the inappropriateness and output something different for example
[13:39] <lizmat> m: put Whatever + 1; CONTROL { default { .^name.put } }
[13:39] <camelia> rakudo-moar 75c615c4c: OUTPUT: «CX::Warn␤»
[13:39] <lizmat> warnings are CONTROL exceptions, so you need a CONTROL block instead of a CATCH block
[13:43] <tbrowder__> note the perms prob is only in the dev repo, i don't there should be a prob with zef installation and use
[13:44] *** thelio left
[13:45] <lizmat> could you post a --ll-exception gist of the failure?
[13:45] <lizmat> I mean, it should try to write to the first writeable dir
[13:48] <ugexe> if you're getting errors from a lib/.precomp then it sounds like you aren't installing the module
[13:49] <ugexe> in which case the location of that lib/ folder is probably the only relevant thing
[13:50] <ugexe> in your case it sounds like you are doing something that causes it to want to re-precompile
[13:50] <ugexe> for instance, changing the repo chain
[13:52] <ugexe> so i suppose you should tell us A) the full path of the module and how you are adding it to raku (i.e. -I mylib/lib, RAKULIB=mylib/lib, etc) B) how you are invoking raku to use the script as root (like `raku -Ilib bin/myscript.raku) C) how you are invoking raku to use the script as non-root
[14:00] <ugexe> i just did `sudo raku -Ilib bin/zef search HTTP`, and then `raku -Ilib bin/zef search HTTP` and it worked. so from what i can tell it should work fine
[14:02] <ugexe> although in that case my regular user already has access to lib/, i.e. lib/ is not under /root/
[14:06] <ugexe> hmm, if i do `sudo mkdir foo` then `raku -Ifoo -Ilib bin/zef search HTTP` it gives a bunch of problem messages
[14:06] <ugexe> https://gist.github.com/ugexe/d9dce407dd9b7c4366103433f891782f
[14:07] <ugexe> seems related to https://github.com/rakudo/rakudo/blob/75c615c4c67eb1c029caf386770ed6c2927e8c93/src/core.c/CompUnit/DependencySpecification.rakumod#L49-L50
[14:09] <guessed> Lizmat thanks how i can integrate that to conditionally assign value to variable like `my $var = do { Whatever + 1; CONTROL { default { -2 } } }`
[14:10] <guessed> for this to be -2 but this gives Any right now
[14:13] <lizmat> m: my $var is default(-2)
[14:13] <camelia> rakudo-moar 75c615c4c: ( no output )
[14:14] <lizmat> not sure what you actually want to achieve
[14:15] <ugexe> strangely in my gist the error occurs with version-matcher and auth-matcher, but never api-matcher
[14:15] *** raiph joined
[14:38] <guessed> i wanted to initalize a variable from either `f()` or `g()`. First i call `&f` and it can give that Warning. If it does, i then call &g and initialize $var with it. `is-default(g())` didn't quite work i guess its compile time or something. i now do `my $var = do { f(); CONTROL { default { } } } // g();`
[14:38] <guessed> so thanks and my other qeuestion is why
[14:38] <guessed> m: sub f { $^a, $^b }; f(5, 6)
[14:38] <camelia> rakudo-moar 75c615c4c: ( no output )
[14:38] <guessed> works but
[14:38] <guessed> m: sub f { $^a, $^b }; f.(5 xx 2)
[14:38] <camelia> rakudo-moar 75c615c4c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling f() will never work with declared signature ($a, $b)␤at <tmp>:1␤------> sub f { $^a, $^b }; ⏏f.(5 xx 2)␤»
[14:38] <guessed> does not
[14:39] <guessed> m: sub f { $^a, $^b }; f.(5, 6)
[14:39] <camelia> rakudo-moar 75c615c4c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling f() will never work with declared signature ($a, $b)␤at <tmp>:1␤------> sub f { $^a, $^b }; ⏏f.(5, 6)␤»
[14:39] <guessed> &f.(5, 6) works though
[14:39] <guessed> is this expected (you can ignore 5 xx 2 one it was a mistake copying)
[14:40] <lizmat> f(5.6) // g(7,8)
[14:40] <lizmat> ??
[14:41] <guessed> but it doesnt fail so it doesnt go to second part
[14:41] <lizmat> my $a = f(5,6) // g(7,8)
[14:41] <guessed> Whatever + 100 warns and gives back 100
[14:41] <lizmat> so is the warning the problem, or the value ?
[14:42] <guessed> warning
[14:42] <guessed> so i now do `my $var = do { f(); CONTROL { default { } } } // g();` after your CONTROL input
[14:42] <guessed> warning and the value are both problems
[14:43] <guessed> if &f warns, suppress the warning, ignore what it returns, and assign whatever g() gives instead
[14:43] <lizmat> https://docs.raku.org/language/statement-prefixes#quietly
[14:44] <guessed> quielty suppresses but doesnt ignore the value returned
[14:44] <guessed> and so g() isn't called
[14:44] <gfldex> m: quietly do our $work;¶
[14:44] <camelia> rakudo-moar 75c615c4c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> quietly do our $work;⏏¶␤    expecting any of:␤        prefix␤        term␤»
[14:45] <gfldex> m: quietly do { our $work };
[14:45] <camelia> rakudo-moar 75c615c4c: ( no output )
[14:46] <guessed> im happy with ``my $var = do { f(); CONTROL { default { } } } // g();` not sure if it gets shorter but i don't know of course
[14:47] <guessed> my other question is:
[14:47] <guessed> m: sub f { $^a, $^b }; f.(5, 6)
[14:47] <camelia> rakudo-moar 75c615c4c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling f() will never work with declared signature ($a, $b)␤at <tmp>:1␤------> sub f { $^a, $^b }; ⏏f.(5, 6)␤»
[14:47] <guessed> this is erroring, is it expected
[14:47] <guessed> it doesnt error if &f.(5, 6) is used
[15:04] *** jgaz joined
[15:19] <lizmat> sorry, was afk for a bit
[15:20] <lizmat> so you only want call g() if there is a warning ?
[15:22] <guessed> yes
[15:23] <gfldex> Is there actually a case where the `.()`-form is required?
[15:23] <guessed> sigilless vars?
[15:23] <lizmat> no, I was wondering why you were using &f.(5.6) instead of just f(5,6)
[15:23] <guessed> i wasnt using &f.(5, 6) or f(5, 6)
[15:23] <guessed> i was using f.(5, 6)
[15:24] <lizmat> "it doesnt error if &f.(5, 6) is used"
[15:24] <lizmat> OOC, why f.(5,6) ?
[15:24] <gfldex> m: sub f { sub g { say 'g' } }; f.();
[15:24] <camelia> rakudo-moar 75c615c4c: OUTPUT: «g␤»
[15:25] <gfldex> That is the only case I can thing of.
[15:25] <guessed> m: my \f = { $^a, $^b}; f(3, 4)
[15:25] <camelia> rakudo-moar 75c615c4c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '&f' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> my \f = { $^a, $^b}; ⏏f(3, 4)␤»
[15:25] <guessed> m: my \f = { $^a, $^b}; f.(3, 4).put
[15:25] <camelia> rakudo-moar 75c615c4c: OUTPUT: «3 4␤»
[15:25] <gfldex> And if I see that in a production code-base, I will run away screeming. :->
[15:26] <guessed> for the record my f() and g(), and f.(5, 6) were separate questions
[15:26] <lizmat> m: my &f = { $^a, $^b}; f(3, 4).put
[15:26] <camelia> rakudo-moar 75c615c4c: OUTPUT: «3 4␤»
[15:27] <lizmat> guessed: still wondering whether your "only if warning" isn't a symptom you're trying to counter, rather than an underlying issue
[15:27] <lizmat> if the underlying issue is undefinedness, then maybe another approach would be better
[15:45] <discord-raku-bot> <nemokosch> gfldex made a really good case here, that was really hard to read
[15:46] <discord-raku-bot> <nemokosch> f.(5,6) for some &f is basically f()(5, 6)
[15:46] <discord-raku-bot> <nemokosch> this is so confusing I'm not sure it should even be allowed
[15:47] <guessed> i see now, i didnt understand when gfldex wrote it
[15:47] <guessed> from documentation it says useful for method calls
[15:48] <discord-raku-bot> <nemokosch> I don't know, I can't say clearly what seems so irregular about this
[15:48] <guessed> lizmat: im passed a code object. i call it with `Whatever` first. It can give a warning if the code does arithmetic. If it does, i call it with an integer.
[15:48] <discord-raku-bot> <nemokosch> it's the intersection of two contradictory abstractions
[15:49] <guessed> sometimes it really expects Whatever, so it doesnt give a warning
[15:50] <guessed> btw how do I understand it was warning versus failing versus dying?
[15:50] *** squashable6 left
[15:50] <discord-raku-bot> <nemokosch> well, the code continued to run and gave no trace
[15:52] <discord-raku-bot> <nemokosch> a Failure is basically an Exception masquerading as a value, it will only explode when you start to treat it like a value
[15:52] *** squashable6 joined
[15:52] <discord-raku-bot> <nemokosch> so in this sense that's not a third option
[15:53] <discord-raku-bot> <nemokosch> related thought: don't ever test for emptiness using .elems
[15:54] <discord-raku-bot> <nemokosch> (unfortunately, the core didn't follow this principle early enough)
[15:54] <discord-raku-bot> <nemokosch> m: say 'So empty I can't even believe it!' if (^Inf).elems
[15:54] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> say 'So empty I can'⏏t even believe it!' if (^Inf).elems     expecting any of:         infix         infix stopper         postfix         statement end         statement modifier         statement modifier loop 
[15:54] <discord-raku-bot> <nemokosch> oops the apostrophe
[15:55] <discord-raku-bot> <nemokosch> m: say 'So empty I can't even believe it!' if (^Inf).elems
[15:55] <discord-raku-bot> <Raku eval>  
[15:55] <discord-raku-bot> <nemokosch> negations are a hard topic...
[15:55] *** derpydoo joined
[15:55] <discord-raku-bot> <nemokosch> the condition was actually for the case when there are elements
[15:55] <discord-raku-bot> <nemokosch> m: say 'So empty I can't even believe it!' unless (^Inf).elems
[15:55] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> say 'So empty I can'⏏t even believe it!' unless (^Inf).elems     expecting any of:         infix         infix stopper         postfix         statement end         statement modifier         statement modifier loop 
[15:56] <discord-raku-bot> <nemokosch> okay I'm gonna unalive myself 💀
[15:57] <discord-raku-bot> <nemokosch> m: sub is-empty($x) { $x.elems }; if is-empty(^Inf) { say 'This is so empty I can't even believe it.'; }
[15:57] <discord-raku-bot> <Raku eval>  
[15:57] <discord-raku-bot> <nemokosch> okay, whatever, today I can't think straight
[15:58] <discord-raku-bot> <nemokosch> the point is that you would expect something like this to be not empty but if you use a check for the number of elements, the check will be False, as if it had truly 0 elements
[15:58] <discord-raku-bot> <nemokosch> m: (^Inf).elems
[15:58] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot .elems a lazy list onto a Range   in block <unit> at main.raku line 1  
[15:58] <discord-raku-bot> <nemokosch> this is the reason
[15:59] <lizmat> and how did this apply to guessed problem?
[15:59] <discord-raku-bot> <nemokosch> this does not apply to the problem, this applies to fail vs die vs warn
[16:00] <lizmat> ack
[16:00] <discord-raku-bot> <nemokosch> .elems produces a Failure that can turn into a False value and do nothing "exceptional"
[16:00] <discord-raku-bot> <nemokosch> but in other situations, like the last snippet, it can escalate into an Exception
[16:01] <discord-raku-bot> <nemokosch> this is why I said it wasn't really a third option
[16:01] <lizmat> my $var; CATCH { when CX::Warn { $var = g(7,8) } }; $var = f(5,6)
[16:08] <lizmat> oops, CONTROL of course  :-)
[16:17] <lizmat> afk&
[16:32] *** jpn joined
[17:13] *** jpn left
[17:14] *** jpn joined
[17:20] *** deoac joined
[17:34] *** codesections joined
[18:05] *** MoC joined
[18:58] *** MoC left
[19:00] *** codesections left
[19:02] *** Sgeo joined
[19:09] *** hythm joined
[19:18] *** raiph left
[19:30] *** deoac left
[19:31] *** jpn left
[19:33] *** jpn joined
[19:34] *** jpn joined
[19:50] *** jpn left
[19:56] *** jpn joined
[20:08] <tbrowder__> i thought i was clear but the perm problem was during module dev in a local repo, not while zef installing it. i just corrected perms on my local lib dir and all was fine. it just surprised me, but it shouldn't have. i was slinging sudo around like crazy.
[20:10] <tbrowder__> ugexe: what do you think about making "--serial" the default zef install and upgrade commands?
[20:11] <tbrowder__> *default option for install and upgrade commands?
[20:34] *** jpn left
[20:52] *** guessed left
[20:53] *** hythm left
[21:15] *** ProperNoun left
[21:16] *** ab5tract left
[21:17] *** ab5tract joined
[21:26] *** codesections joined
[21:28] *** codesections left
[21:30] *** codesections joined
[21:58] *** kdon joined
[22:22] *** codesections left
[22:30] *** codesections joined
[22:39] *** jpn joined
[22:43] *** kdon left
[22:57] *** kdon joined
[23:05] <ugexe> I dunno, I like how the non serial behavior often shows problems that should be fixed like incorrectly declared depends 
[23:05] <ugexe> I think I’d be more open to some sort of mechanism that can tell if it needs to rebuild and run tests for subsequent commands 
[23:07] *** jpn left
[23:09] <ugexe> Which I mention because the only argument for wanting to use serial is to speed up installing dependency chains that aren’t declared fully/properly 
[23:09] *** jpn joined
[23:11] <ugexe> It also means you can’t do certain tasks in parallel in the future like install two different distributions at the same time 
[23:26] *** lichtkind left
[23:29] *** Camaleon joined
[23:30] *** AlexDaniel joined
[23:30] <AlexDaniel> e: say 42
[23:30] <evalable6> AlexDaniel, rakudo-moar 4b69dd51e: OUTPUT: «42␤»
[23:30] <tellable6> 2023-03-07T02:40:12Z #raku <jdv> AlexDaniel ok
[23:30] <tellable6> 2023-05-21T15:55:41Z #raku-dev <jdv> AlexDaniel who can fix missing builds on whateverable.6lang.org?
[23:30] <tellable6> 2023-05-22T21:27:12Z #raku-dev <jdv> AlexDaniel around?  whateverable builds are not happy.
[23:30] <AlexDaniel> hello
[23:31] <AlexDaniel> okay, last one is… wait when's that
[23:31] <AlexDaniel> May 10th but part of 2023.09 release? What am I looking at exactly :o
[23:36] *** tea3po left
[23:36] *** tea3po joined
[23:40] *** Camaleon left
[23:46] *** jpn left
[23:47] *** Vyrus left
[23:47] *** Vyrus joined
[23:48] *** jpn joined
[23:54] *** teatwo joined
[23:57] *** tea3po left
