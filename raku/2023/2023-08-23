[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:46] *** kjp left
[00:49] *** kjp joined
[01:08] *** Voldenet left
[01:17] *** deoac joined
[01:28] *** razetime joined
[01:31] *** bigdata joined
[01:51] *** MasterDuke joined
[01:52] *** Voldenet joined
[02:31] *** bigdata left
[03:31] *** evalable6 left
[03:31] *** linkable6 left
[03:31] *** evalable6 joined
[03:33] *** linkable6 joined
[03:40] *** jmcantrell left
[04:03] *** deoac left
[04:16] *** razetime left
[05:02] *** razetime joined
[05:16] *** abraxxa joined
[05:23] *** siavash joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:36] *** xelxebar_ joined
[06:37] *** jdv_ joined
[06:38] *** silug8 joined
[06:38] *** Woodi_ joined
[06:38] *** peder_ joined
[06:38] *** pat_js joined
[06:38] *** kaol_ joined
[06:39] *** gugod_ joined
[06:39] *** silug left
[06:39] *** gugod left
[06:39] *** Woodi left
[06:39] *** xelxebar left
[06:39] *** peder left
[06:39] *** ingy left
[06:39] *** pejayes left
[06:39] *** jdv left
[06:39] *** kaol left
[06:39] *** silug8 is now known as silug

[06:39] *** peder_ is now known as peder

[06:43] *** amano joined
[06:43] <amano> How do I poll a queue without removing an item from it?

[06:44] <amano> Channel doesn't allow me to know whether it is queued at all.

[06:44] <amano> I want to push something onto a queue only if it is empty.

[06:48] <amano> Or, I want a queue that drops new items if it is not empty already.

[06:50] *** ingy joined
[06:57] <amano> Is it safe to share an Array among multiple react blocks?

[07:03] *** jpn joined
[07:06] <amano> I want a bounded queue.

[07:10] <siavash> `poll` method returns `Nil` if there is no item in the channel, so `send` an item in an `else` block?

[07:15] <siavash> https://docs.raku.org/language/concurrency#Safety_concerns

[07:19] *** razetime left
[07:19] <amano> siavash: I don't understand what you propose.

[07:21] *** xelxebar_ is now known as xelxebar

[07:42] <siavash> `if $channel.poll -> $item { ... } else { # queue is empty, so do what you wanted to do }`

[07:46] *** Woodi_ is now known as Woodi

[07:49] *** Sgeo left
[07:57] <discord-raku-bot> <librasteve> https://stackoverflow.com/questions/43782864/is-it-safe-to-share-an-array-between-threads

[07:57] <discord-raku-bot> <librasteve> ^^^ jnthn's answer here is pretty definitive

[07:57] <discord-raku-bot> <librasteve> short version: No

[08:04] <amano> siavash: I would like $channel.peek. And, I would also like a bounded queue that has a limited size.

[08:10] *** discord-raku-bot left
[08:10] *** dakkar joined
[08:10] *** discord-raku-bot joined
[08:20] *** tea3po joined
[08:23] *** teatwo left
[08:36] *** sena_kun joined
[08:40] <amano> A function that sends a new item to a bounded queue can either wait or drop the new item.

[08:41] <amano> If the bounded queue is full.

[08:41] <amano> A bounded queue can be of size 5.

[08:41] <amano> or 1.

[08:42] <amano> https://hackage.haskell.org/package/stm-2.5.1.0/docs/Control-Concurrent-STM-TBQueue.html

[08:43] <amano> https://hackage.haskell.org/package/brick-1.9/docs/Brick-BChan.html

[09:14] *** jpn left
[09:20] *** abraxxa left
[09:34] *** kaol_ is now known as kaol

[09:36] *** abraxxa joined
[09:45] <discord-raku-bot> <nemokosch> https://www.reddit.com/r/rakulang/comments/15y82fq/the_raku_conference_2023_date/

[09:49] *** jpn joined
[09:56] <discord-raku-bot> <nemokosch> amano: https://raku.land/cpan:JNTHN/Concurrent::Queue maybe this is of interest

[09:56] *** Voldenet left
[09:57] <discord-raku-bot> <librasteve> .oO

[09:59] <discord-raku-bot> <librasteve> might be a relatively straightforward mini project to fork this and add some bounds...

[10:03] *** Voldenet joined
[10:32] <amano> What is the best IPC mechanism in raku apart from a stream unix socket created by IO::Socket::Async.listen-path?

[10:32] *** Voldenet left
[10:32] *** siavash left
[10:49] *** Voldenet joined
[11:18] *** jpn left
[11:29] <amano> It seems Supply.throttle may do what I want for implementing bounded queues.

[11:34] *** ProperNoun left
[11:35] *** ProperNoun joined
[11:41] <discord-raku-bot> <nemokosch> CIAvash is desperately underrated

[11:43] <amano> Are Raku Supplies concurrent or parallel?

[11:45] <discord-raku-bot> <nemokosch> I would assume it depends on the scheduler for starters

[11:46] <discord-raku-bot> <nemokosch> https://docs.raku.org/language/concurrency#Schedulers does this help somewhat?

[11:52] <ugexe> concurrent

[11:53] <ugexe> or rather Supply is used for concurrency control

[11:57] <amano> Can Supply.throttle be used for bounded queue?

[11:58] <amano> Perhaps, I should just get rid of the unix socket while the raku script is processing a message.

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[13:03] *** bisectable6 left
[13:03] *** shareable6 left
[13:03] *** greppable6 left
[13:03] *** reportable6 left
[13:03] *** releasable6 left
[13:03] *** squashable6 left
[13:03] *** coverable6 left
[13:03] *** benchable6 left
[13:03] *** notable6 left
[13:03] *** linkable6 left
[13:03] *** tellable6 left
[13:03] *** quotable6 left
[13:03] *** evalable6 left
[13:03] *** unicodable6 left
[13:03] *** bloatable6 left
[13:03] *** sourceable6 left
[13:03] *** committable6 left
[13:03] *** nativecallable6 left
[13:03] *** greppable6 joined
[13:03] *** tellable6 joined
[13:03] *** shareable6 joined
[13:03] *** quotable6 joined
[13:04] *** reportable6 joined
[13:04] *** benchable6 joined
[13:04] *** unicodable6 joined
[13:04] *** coverable6 joined
[13:04] *** bloatable6 joined
[13:04] *** squashable6 joined
[13:04] *** evalable6 joined
[13:04] *** nativecallable6 joined
[13:05] *** releasable6 joined
[13:05] *** notable6 joined
[13:05] *** bisectable6 joined
[13:05] *** committable6 joined
[13:05] *** sourceable6 joined
[13:05] *** linkable6 joined
[13:06] <amano> I just tested Supply.throttle. It does what I want...

[13:52] *** amano left
[14:18] <discord-raku-bot> <antononcube> @nemokosch Thanks for mentioning CIAvash! I am not sure how that relates to the concurrency discussion  -- his "Curry" module? -- but the "PatternMatching", https://raku.land/zef:CIAvash/PatternMatching, should be very useful for working with LLMs.

[14:20] <discord-raku-bot> <antononcube> (It seems that "PatternMatching" can be combined very well with "Text::SubParsers".)

[14:48] *** ab5tract joined
[15:02] *** Voldenet left
[15:28] *** [Coke] joined
[15:51] *** xinming left
[15:58] *** eseyman left
[15:59] *** manu_ joined
[16:02] *** manu_ is now known as eseyman

[16:08] *** xinming joined
[16:11] *** abraxxa left
[16:43] *** jdv_ is now known as jdv

[17:00] *** dakkar left
[17:23] <discord-raku-bot> <holmdunc> I wonder why the üòÑ constraint isn't the default in Raku. It seems like most of the time when type annotating function parameters, object instances are what a programmer is thinking about?

[17:28] <discord-raku-bot> <librasteve> that's a great question - I personally think that it is useful for a coder to signal "there is no sensible value for this variable yet" rather than be required to load a default (some, any default) of the required type

[17:29] <discord-raku-bot> <librasteve> (dons hard hat in anticipation of the "raku does not have variables, just containers and value" commentary)

[17:30] <discord-raku-bot> <nemokosch> well, there is a "default value" this way as well, except one that might cause trouble if you try to fetch it

[17:30] <discord-raku-bot> <librasteve> with :D and :U smileys in eg multi signatures, you can then go a little deeper when you need to make that distinction

[17:31] <discord-raku-bot> <librasteve> m: my Int $x; dd $x;

[17:31] <discord-raku-bot> <Raku eval>  Int $x = Int 

[17:32] <discord-raku-bot> <librasteve> m: my Int $x; dd $x.WHAT;

[17:32] <discord-raku-bot> <Raku eval>  Int 

[17:33] <discord-raku-bot> <librasteve> yeah - well I think it is nice that the default value for a typed container is the type object since that carries the type around everywhere whether you loaded an actual value yet

[17:35] *** rf joined
[17:44] *** jpn joined
[17:47] <discord-raku-bot> <librasteve> (or not)

[17:49] *** jmcantrell joined
[17:50] <discord-raku-bot> <librasteve> and I think that this way a signature can check the type of the value and does not care if the argument is initially contained in a typed or untyped container

[17:51] <discord-raku-bot> <librasteve> m: sub fn( Int $y ) {say $y}; my $x; fn($x);

[17:51] <discord-raku-bot> <Raku eval>  Exit code: 1 Type check failed in binding to parameter '$y'; expected Int but got Any (Any)   in sub fn at main.raku line 1   in block <unit> at main.raku line 1  

[17:51] <discord-raku-bot> <librasteve> m: sub fn( Int $y ) {say $y}; my Int $x; fn($x);

[17:52] <discord-raku-bot> <Raku eval>  (Int) 

[17:52] <discord-raku-bot> <librasteve> m: sub fn( Int $y ) {say $y}; my $x=Int; fn($x);

[17:52] <discord-raku-bot> <Raku eval>  (Int) 

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:11] *** abraxxa-home joined
[18:22] *** jpn left
[18:24] *** abraxxa-home left
[18:25] *** jpn joined
[18:38] *** rf left
[18:44] *** abraxxa-home joined
[19:11] *** jpn left
[19:26] *** m_athias left
[19:26] *** nine left
[19:26] *** nine joined
[19:26] *** m_athias joined
[19:48] *** sena_kun left
[19:48] *** sena_kun joined
[19:49] *** deoac joined
[19:57] *** abraxxa-home left
[20:08] *** Guest22 joined
[20:08] *** Guest22 left
[20:14] *** Guest46 joined
[20:14] *** Guest46 left
[20:17] *** teatwo joined
[20:18] *** teatwo left
[20:19] *** teatwo joined
[20:20] <gfldex> m: my Int:D $i = 42; $i = Nil;

[20:20] <camelia> rakudo-moar c509e758b: OUTPUT: ¬´Type check failed in assignment to $i; expected Int:D but got Int (Int) (perhaps Nil was assigned to a :D which had no default?)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:20] *** tea3po left
[20:20] <gfldex> @librasteve Does this ^^^ help to crack that nut?

[20:21] <gfldex> Also Raku used to be called Perl¬†6 and we love our `//`s.

[20:25] <discord-raku-bot> <librasteve> m: my Int:D $i = is-default(42); $i = Nil;

[20:25] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Undeclared routine:     is-default used at line 1  

[20:25] <discord-raku-bot> <librasteve> m: my Int:D $i = is default(42); $i = Nil;

[20:25] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Undeclared routines:     default used at line 1     is used at line 1  

[20:25] <gfldex> Tm: my Int:D $i is default(42); $i = Nil;

[20:26] <gfldex> m: my Int:D $i is default(42); $i = Nil;

[20:26] <camelia> rakudo-moar c509e758b: ( no output )

[20:26] <discord-raku-bot> <librasteve> ^^ that

[20:30] <gfldex> Complexity is the arch-enemy of all programmers. Types can lower complexity but they don't have to. Hence the need for gradual tying. Often &infix:<//> is less hassle then enforcing DEFINITEness.

[20:30] <gfldex> m: class undefinedness { method defined { False } }; my $u = undefinedness.new; sub s(Any:D $) { say ‚Äûhuh‚ÄΩ‚Äú } say defined($u); s($u);

[20:30] <camelia> rakudo-moar c509e758b: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> dness.new; sub s(Any:D $) { say ‚Äûhuh‚ÄΩ‚Äú }‚èè say defined($u); s($u);‚ê§    expecting any of:‚ê§        infix‚ê§ ‚Ä¶¬ª

[20:30] <gfldex> m: class undefinedness { method defined { False } }; my $u = undefinedness.new; sub s(Any:D $) { say ‚Äûhuh‚ÄΩ‚Äú }; say defined($u); s($u);

[20:30] <camelia> rakudo-moar c509e758b: OUTPUT: ¬´False‚ê§huh‚ÄΩ‚ê§¬ª

[20:31] *** ProperNoun left
[20:31] <gfldex> The :D type smiley does *not* ask for definedness.

[20:36] *** ProperNoun joined
[20:37] <discord-raku-bot> <librasteve> (i) I am sure that you are right (trust-wise), (ii) I am sure that you are right (philosophically), (iii) BUT as a "meat and potatoes coder" guy I still cling to the idea of a variable to which a value may be assigned - please humour me/us

[20:38] <discord-raku-bot> <librasteve> (when I get a tuit I plan to link back up to what I think your saying on my blog)

[20:39] <discord-raku-bot> <librasteve> meantime - I get that there is .defined (object-wise test that is easy to override) and .DEFINITE (class-wise test that is hard wired)

[20:41] <gfldex> Actually, DEFINITE goes deeper then a class. It exists even before Rakudo learns about classes.

[20:44] <discord-raku-bot> <librasteve> being out here in "rakuland" ( as opposed to "NQPland"), please can you point me to the most pithy docs (docs or synapses or blogs is fine)

[20:45] <gfldex> This is not documented. You have to read the source of MoarVM, nqp and Rakudo to understand what is really going on.

[20:47] <discord-raku-bot> <librasteve> ok - I see ... that's cool & many thanks!!!

[20:48] <gfldex> If you like to, we can have a little voice chat on Discord. Same handle then here.

[20:51] *** hythm76 joined
[20:51] *** hythm left
[20:52] <discord-raku-bot> <nemokosch> the funny thing is that even if you type out .DEFINITE, it's not an actual method call...

[20:57] <discord-raku-bot> <librasteve> thanks - I need a couple of days on $day-job will ping when I can

[21:11] *** jpn joined
[21:19] *** jpn left
[21:20] *** jpn joined
[21:37] *** Voldenet joined
[21:37] *** jpn left
[21:46] *** amano joined
[21:47] <amano> yo

[21:47] *** amano left
[21:58] *** deoac left
[22:15] *** Sgeo joined
[22:36] *** sena_kun left
[22:49] *** rf joined
[23:49] *** linkable6 left
[23:49] *** evalable6 left
[23:51] *** evalable6 joined
[23:52] *** linkable6 joined
