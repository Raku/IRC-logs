[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:05] *** jpn joined
[00:07] *** deoac joined
[00:10] *** jpn left
[00:34] *** NemokoschKiwi left
[00:48] *** jpn joined
[00:49] *** rakuuser left
[00:53] *** jpn left
[00:58] *** AlexDaniel left
[01:03] *** xinming left
[01:06] *** xinming joined
[01:41] *** jpn joined
[01:42] <rf> Does anyone know if DBIish does transactions

[01:43] <rf> I just want to run a huge SQL script with DBIish

[01:45] *** systems joined
[01:46] <tonyo> https://github.com/raku-community-modules/DBIish/blob/d87acd98db7a63ab7113a76dca864c8b00342397/t/20-mysql.rakutest#L1742

[01:46] <tonyo> postgres and oracle both work too

[01:46] *** jpn left
[01:52] <Geth> ¬¶ doc: cfa self-assigned Document trap: `use lib` with a huge directory is super slow https://github.com/Raku/doc/issues/2199

[02:12] *** Guest5682 joined
[02:12] *** deoac left
[02:12] *** Guest5682 is now known as tg57

[02:29] *** tg57 left
[02:33] *** rf left
[02:45] *** jgaz left
[02:56] *** snonux left
[02:57] *** snonux joined
[02:57] *** samebchase2 joined
[02:58] *** samebchase left
[02:58] *** samebchase2 is now known as samebchase

[03:09] *** tg57 joined
[03:09] *** tg57 left
[03:11] <Geth> ¬¶ doc: coke self-assigned Change document extension from .pod6 to .rakudoc https://github.com/Raku/doc/issues/3785

[03:29] *** jpn joined
[03:34] *** jpn left
[03:55] *** systems left
[03:58] *** razetime joined
[04:18] *** razetime left
[04:33] <Geth> ¬¶ doc/main: 7a54ae3f3f | (Will Coleda)++ | 5 files

[04:33] <Geth> ¬¶ doc/main: remove unused utils

[04:33] <Geth> ¬¶ doc/main: 

[04:33] <Geth> ¬¶ doc/main: add comments to remaining items so we know what they're for.

[04:34] <Geth> ¬¶ doc/main: 

[04:34] <Geth> ¬¶ doc/main: Closes #3906

[04:34] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/7a54ae3f3f

[04:36] <Geth> ¬¶ doc: coke assigned to codesections Issue util/list-missing-methods failure https://github.com/Raku/doc/issues/4223

[04:38] <Geth> ¬¶ doc: coke unassigned from taboege Issue Checklist for 2019.03 https://github.com/Raku/doc/issues/2673

[04:38] <Geth> ¬¶ doc/main: a6f46aeffc | (Daniel Green)++ | CREDITS

[04:38] <Geth> ¬¶ doc/main: Add myself to the credits

[04:38] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/a6f46aeffc

[05:10] *** razetime joined
[05:18] *** jpn joined
[05:21] *** oodani left
[05:22] *** oodani joined
[05:22] *** jpn left
[05:32] *** melezhik joined
[05:41] *** melezhik left
[05:43] *** melezhik joined
[06:00] *** reportable6 left
[06:00] *** melezhik left
[06:01] *** reportable6 joined
[06:31] *** razetime left
[06:49] *** squashable6 left
[06:52] *** squashable6 joined
[07:01] *** jpn joined
[07:05] *** jpn left
[07:32] <SmokeMachine> rf: yes, DBIish does transactions

[07:33] <tellable6> SmokeMachine, I'll pass your message to rf

[07:50] *** abraxxa joined
[07:50] *** silug left
[07:51] *** silug joined
[07:55] *** abraxxa left
[07:55] *** abraxxa joined
[08:12] *** Sgeo left
[08:15] *** abraxxa left
[08:19] *** abraxxa joined
[08:23] *** abraxxa left
[08:23] *** abraxxa joined
[08:49] *** jpn joined
[08:54] *** jpn left
[09:01] *** jpn joined
[09:10] *** sena_kun joined
[09:16] *** sftp left
[09:16] *** sftp_ joined
[09:16] *** sftp_ is now known as sftp

[09:50] *** sena_kun left
[10:03] *** razetime joined
[10:14] *** sena_kun joined
[10:18] *** sena_kun left
[10:19] <tadzik> I've stumbled upon this https://mastodon.social/@alexkalopsia/109947169695818290 and I wonder how to reproduce it in Raku ‚Äì it feels like it should give you nice numbers like that easily, but I can't get it right

[10:19] <tellable6> 2020-03-25T22:48:00Z #raku-dev <patrickb> tadzik: Rakubrew is (slowly) getting to the point of working reliably. What's your stance wrt rakudobrew? Should it officially be deprecated?

[10:20] <tadzik> wow, I've been missing some messages

[10:20] <tadzik> m: say 1/998.001 # sad

[10:20] <camelia> rakudo-moar e9f438f5a: OUTPUT: ¬´0.001002‚ê§¬ª

[10:23] <lizmat> m: printf("%.300f",(1 / 998.001).FatRat)

[10:23] <camelia> rakudo-moar e9f438f5a: OUTPUT: ¬´0.001002003004005006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000‚Ä¶¬ª

[10:23] <tadzik> FatRat! That's it, thanks :)

[10:23] <lizmat> nah, it isn't ?

[10:24] <tadzik> hum, indeed

[10:24] <discord-raku-bot> <Nemokosch> the conversion should happen earlier, right?

[10:24] <discord-raku-bot> <Nemokosch> this is a situation where an adverb might be nice

[10:25] <lizmat> the size of the printf format should be enough

[10:25] <discord-raku-bot> <Nemokosch> isn't (1 / 998.001) evaluated too early for that?

[10:26] <tadzik> m: printf("%.300f",1 / 998.001.FatRat) # doesn't help

[10:26] <camelia> rakudo-moar e9f438f5a: OUTPUT: ¬´0.001002003004005006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000‚Ä¶¬ª

[10:28] <discord-raku-bot> <Nemokosch> oh okay, the precision isn't lost here, it's just not displayed well...

[10:28] <tadzik> it seems to me like it does get lost

[10:29] <tadzik> m: printf("%.30f", (1 / 998.001.FatRat) * 100000)

[10:29] <camelia> rakudo-moar e9f438f5a: OUTPUT: ¬´100.200300400500600000000000000000¬ª

[10:29] <discord-raku-bot> <Nemokosch> m: (1 / 998.001).FatRat * 100000 andthen .raku.say

[10:29] <discord-raku-bot> <Raku eval>  FatRat.new(100000000, 998001) 

[10:30] <discord-raku-bot> <Nemokosch> seems accurate

[10:46] <lizmat> PR to introduce Rat.Str(:digits) coming up

[10:47] *** razetime left
[10:55] *** sena_kun joined
[10:56] <lizmat> https://github.com/rakudo/rakudo/pull/5223

[11:00] <lizmat> tadzik ^^

[11:38] *** rakuuser joined
[11:53] *** codesections left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:11] *** thundergnat joined
[12:13] <thundergnat> Rat.Str(:digits) Huh. That's pretty much what my Rat::Precise module does. https://github.com/thundergnat/Rat-Precise Which, oddly enough isn't showing up on raku.land :-(

[12:13] <thundergnat> It also has a :z flag to preserve trailing zeros, if desired

[12:14] *** thundergnat left
[12:15] <lizmat> TIL

[12:19] <discord-raku-bot> <Nemokosch> it doesn't hurt to have something like this in the core, though, does it

[12:19] <lizmat> nope

[12:25] <discord-raku-bot> <el gatito (** advocate)> m:perl dd &say.WHAT 

[12:25] <discord-raku-bot> <Raku eval>  Sub 

[12:25] <discord-raku-bot> <el gatito (** advocate)> a Sub containing native code?

[12:25] <discord-raku-bot> <el gatito (** advocate)> m:perl dd &say 

[12:25] <discord-raku-bot> <Raku eval>  Sub say = proto sub say (|) {*} 

[12:26] <lizmat> why the perl there ?

[12:26] <discord-raku-bot> <Nemokosch> it gives highlighting (and there is no Raku highlighting on Discord)

[12:26] <lizmat> ah, ok

[12:27] <lizmat> but yeah, "say" is an ordinary multi sub

[12:29] <discord-raku-bot> <el gatito (** advocate)> so a sub can contain both moarvm code and native code

[12:30] <lizmat> what makes you think that?

[12:30] <lizmat> a sub is just a Block with a name and a "return" target

[12:31] *** jpn left
[12:32] <lizmat> a Block is a scope with a signature and a list of statements

[12:32] <lizmat> that ultimately results in bytecode to be executed by whatever backend is in use

[12:32] <lizmat> if you run on MoarVM, then it will be moarvm bytecode

[12:33] <lizmat> on JVM, it will be JVM bytecode

[12:33] <discord-raku-bot> <Nemokosch> does multiple dispatch work on sheer Blocks?

[12:33] <lizmat> nope, dispatch is a Sub / Method thikng

[12:33] <lizmat> *thing

[12:33] <discord-raku-bot> <Nemokosch> üëç

[12:35] <discord-raku-bot> <el gatito (** advocate)> - is native - i thought say is in native code because i assume builtins are written in C and compiled to native code

[12:35] <discord-raku-bot> <el gatito (** advocate)> it is not

[12:36] <Geth> ¬¶ doc: tbrowder++ created pull request #4224: Correct the intended zero-width index entries

[12:36] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4224

[12:36] <lizmat> nope: *NONE* of the core is written in C

[12:36] <lizmat> it is *all* Raku bytecode

[12:36] <lizmat> afk for a bit&

[12:38] <discord-raku-bot> <el gatito (** advocate)> really is raku fast enough that writing the core in raku is no longer a liability

[12:40] <discord-raku-bot> <Nemokosch> The truth is, a significant t of the core has been rewritten in NQP

[12:41] <discord-raku-bot> <Nemokosch> .s/t/part/

[12:43] <discord-raku-bot> <Nemokosch> NQP is pretty darn fast and completely interoperable with "vanilla" Raku

[12:43] *** rakuuser left
[12:43] *** jdv left
[12:44] *** jdv joined
[12:46] <ugexe> fwiw there is always a cost of having something in the core

[12:46] *** Woodi_ joined
[12:46] <ugexe> if that implementation ends up being wrong in some way that isn't immediately apparent you end up with a php like language where a bunch of the built in functions have "safe" or legit alternatives

[12:48] *** xkr47_ joined
[12:50] <ugexe> also writing the core in something other than raku could been seen as a liability since rakudo can optimize raku, and in the future probably enough so as to be faster than e.g. nqp

[12:51] <discord-raku-bot> <Nemokosch> PHP has also come a long way since the five üôÇ

[12:51] <ugexe> that being said we're obviously not there yet, but porting between nqp <-> raku isn't *that* hard

[12:52] <ugexe> sure, and they still has to have stuff like sql safe or whatever

[12:53] <ugexe> bug compatibility is a real thing

[12:55] <ugexe> to pick on .Str(:digits) for a moment: one might argue it should be a count of *all* digits, one might argue it should only be digits after the decimal

[12:55] <ugexe> its called digits afterall

[12:56] *** silug left
[12:56] *** xinming left
[12:56] *** epony left
[12:56] *** linkable6 left
[12:56] *** samcv left
[12:56] *** perlbot left
[12:56] *** Scotteh left
[12:56] *** nativecallable6 left
[12:56] *** tellable6 left
[12:56] *** benchable6 left
[12:56] *** sourceable6 left
[12:56] *** bloatable6 left
[12:56] *** unicodable6 left
[12:56] *** statisfiable6 left
[12:56] *** tinita left
[12:56] *** energizer left
[12:56] *** bartolin_ left
[12:56] *** tobs left
[12:56] *** japhb left
[12:56] *** jjatria left
[12:56] *** sivoais left
[12:56] *** corwin left
[12:56] *** ecocode_ left
[12:56] *** xkr47 left
[12:56] *** polettix_ left
[12:56] *** destroycomputers left
[12:56] *** Ulti_ left
[12:56] *** Woodi left
[12:56] *** nicole left
[12:56] *** nebuchadnezzar left
[12:56] *** gordonfish left
[12:56] *** hexology left
[12:56] *** xkr47_ is now known as xkr47

[12:56] *** hexology joined
[12:56] <ugexe> eventually someone will want the other variant, yet the original name that implies both will only apply to one while the other has some name detached from other variants argument/parameter/whatever

[12:56] *** energizer joined
[12:57] <ugexe> at least from a naming perspective one solution is to not hummanize things that may not really need it

[12:57] <ugexe> huffmanize^

[12:57] *** jpn joined
[12:57] <ugexe> .Str(:trailing-digits) for instance

[12:59] <ugexe> I don't really have any strong feels on .Str(:digits) fwiw, i'm just using it as an exmaple because it just came up

[13:01] *** epony joined
[13:01] *** silug joined
[13:01] *** xinming joined
[13:01] *** linkable6 joined
[13:01] *** samcv joined
[13:01] *** perlbot joined
[13:01] *** Scotteh joined
[13:01] *** nativecallable6 joined
[13:01] *** tellable6 joined
[13:01] *** benchable6 joined
[13:01] *** sourceable6 joined
[13:01] *** bloatable6 joined
[13:01] *** unicodable6 joined
[13:01] *** statisfiable6 joined
[13:01] *** tinita joined
[13:01] *** bartolin_ joined
[13:01] *** tobs joined
[13:01] *** japhb joined
[13:01] *** jjatria joined
[13:01] *** sivoais joined
[13:01] *** corwin joined
[13:01] *** ecocode_ joined
[13:01] *** polettix_ joined
[13:01] *** destroycomputers joined
[13:01] *** Ulti_ joined
[13:01] *** nicole joined
[13:01] *** nebuchadnezzar joined
[13:01] *** gordonfish joined
[13:04] *** epony left
[13:04] *** perlbot left
[13:05] *** epony joined
[13:07] *** jpn left
[13:07] <ugexe> but like in regex ‚ë† is a digit so theoretically things like FatRat.new(‚ë†).Str(...) should be considered (my guess is this already just works because raku is good like that, but it should still have been considered)

[13:08] *** perlbot joined
[13:09] <ugexe> then again i typically paralyze myself when considering all this stuff :P

[13:14] <lizmat> well, thundergnat showed Rat::Precise, and I think that would make an excellent addition to the core

[13:14] <discord-raku-bot> <Nemokosch> again there are very different attitudes to this stuff, bug compatibility and all

[13:15] <discord-raku-bot> <Nemokosch> I tend to agree that even something that is arguably a bugfix could in theory mess something up somewhere else, and if it hasn't been specified either way, it's just as much a breaking change as it is a fix

[13:15] <ugexe> i mean people also say zef would make a good addition to the core, which i would also disagree with

[13:17] <lizmat> I can see that: you want to be able to update zef without needing to update the core

[13:17] <ugexe> well, we need the raku programs that we leave behind e.g. previous workplaces to keep working hopefully without anyone having to fix it and get a bad impression. if it wasn't for that i'd mostly be all for not considering bug-compatibility at all

[13:18] <ugexe> well the not just that, but like zef is also things like invoking curl/wget/tar etc in a OS dependant way

[13:19] <lizmat> ack

[13:20] *** jpn joined
[13:20] *** epony left
[13:25] *** euandreh left
[13:29] *** jpn left
[13:30] *** nebuchad` joined
[13:31] *** nebuchadnezzar left
[13:32] *** jpn joined
[13:53] *** epony joined
[14:12] <Geth> ¬¶ doc: coke unassigned from Scimon Issue Proc::Async Example needs to be modified to run on Windows 10 https://github.com/Raku/doc/issues/1453

[14:12] <Geth> ¬¶ doc: coke self-assigned Proc::Async Example needs to be modified to run on Windows 10 https://github.com/Raku/doc/issues/1453

[14:18] <Geth> ¬¶ doc: coke assigned to tbrowder Issue update humorous subtitle https://github.com/Raku/doc/issues/4202

[14:20] <discord-raku-bot> <el gatito (** advocate)> rakudo -> nqp -> C thats 2 levels of abstraction

[14:21] <Geth> ¬¶ doc: coke self-assigned Differentiate clearly "version" and "release" https://github.com/Raku/doc/issues/3843

[14:21] <discord-raku-bot> <el gatito (** advocate)> is that only possible with JITing rakudo hasn't come to that level yet

[14:43] *** Altai-man joined
[14:44] *** sena_kun left
[14:47] *** jgaz joined
[15:26] *** rf joined
[15:38] *** Sgeo joined
[15:45] <Geth> ¬¶ rakudoc: pheix++ created pull request #23: Migrate to Pod::Utils

[15:45] <Geth> ¬¶ rakudoc: review: https://github.com/Raku/rakudoc/pull/23

[15:52] *** epony left
[15:53] *** epony joined
[16:23] *** razetime joined
[16:44] *** abraxxa left
[16:51] *** euandreh joined
[16:54] <tonyo> m: use Rat::Precise;

[16:54] <camelia> rakudo-moar 376eb9180: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Could not find Rat::Precise in:‚ê§    /home/camelia/.raku‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/‚Ä¶¬ª

[17:07] *** simcop2387 left
[17:07] *** perlbot left
[17:09] *** simcop2387 joined
[17:10] *** perlbot joined
[17:17] *** razetime left
[17:23] <Geth> ¬¶ doc/finanalyst-patch-1: 1da99fc750 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/community.pod6

[17:23] <Geth> ¬¶ doc/finanalyst-patch-1: Update community.pod6

[17:23] <Geth> ¬¶ doc/finanalyst-patch-1: 

[17:23] <Geth> ¬¶ doc/finanalyst-patch-1: Remove reference to perl.meetup.com as it no longer exists

[17:23] <Geth> ¬¶ doc/finanalyst-patch-1: review: https://github.com/Raku/doc/commit/1da99fc750

[17:24] <Geth> ¬¶ doc: finanalyst++ created pull request #4226: Update community.pod6

[17:24] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4226

[17:29] <Geth> ¬¶ doc/main: ade0e7f024 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/community.pod6

[17:29] <Geth> ¬¶ doc/main: Update community.pod6 (#4226)

[17:29] <Geth> ¬¶ doc/main: 

[17:29] <Geth> ¬¶ doc/main: Remove reference to perl.meetup.com as it no longer exists

[17:29] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/ade0e7f024

[17:34] <Geth> ¬¶ doc/finanalyst-patch-3: ec9a23baad | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[17:34] <Geth> ¬¶ doc/finanalyst-patch-3: Update faq.pod6

[17:34] <Geth> ¬¶ doc/finanalyst-patch-3: 

[17:34] <Geth> ¬¶ doc/finanalyst-patch-3: edit the zef url so that it is recognised by modules.raku.org

[17:34] <Geth> ¬¶ doc/finanalyst-patch-3: remove reference to p6doc, which is not being found there,

[17:34] <Geth> ¬¶ doc/finanalyst-patch-3: review: https://github.com/Raku/doc/commit/ec9a23baad

[17:41] *** QhpAptyj9hj0RQwM joined
[17:42] <Geth> ¬¶ doc/finanalyst-patch-1: 2147d8e975 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[17:42] <Geth> ¬¶ doc/finanalyst-patch-1: Update modules.pod6

[17:42] <Geth> ¬¶ doc/finanalyst-patch-1: 

[17:42] <Geth> ¬¶ doc/finanalyst-patch-1: The example changed. So make the link work.

[17:42] <Geth> ¬¶ doc/finanalyst-patch-1: review: https://github.com/Raku/doc/commit/2147d8e975

[17:43] <Geth> ¬¶ doc: finanalyst++ created pull request #4228: Update modules.pod6

[17:43] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4228

[17:44] <Geth> ¬¶ doc/finanalyst-patch-4: a80750c26d | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/modules-extra.pod6

[17:44] <Geth> ¬¶ doc/finanalyst-patch-4: Update modules-extra.pod6

[17:44] <Geth> ¬¶ doc/finanalyst-patch-4: review: https://github.com/Raku/doc/commit/a80750c26d

[17:45] <Geth> ¬¶ doc: finanalyst++ created pull request #4229: Update modules-extra.pod6

[17:45] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4229

[17:54] <Geth> ¬¶ doc/finanalyst-patch-5: f5b68eb63f | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/DateTime.pod6

[17:54] <Geth> ¬¶ doc/finanalyst-patch-5: Update DateTime.pod6

[17:54] <Geth> ¬¶ doc/finanalyst-patch-5: review: https://github.com/Raku/doc/commit/f5b68eb63f

[17:55] <Geth> ¬¶ doc: finanalyst++ created pull request #4230: Update DateTime.pod6

[17:55] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4230

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:10] *** TieUpYourCamel left
[18:10] *** Altai-man left
[18:29] <Geth> ¬¶ doc/main: a575049cda | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[18:29] <Geth> ¬¶ doc/main: Update modules.pod6 (#4228)

[18:29] <Geth> ¬¶ doc/main: 

[18:29] <Geth> ¬¶ doc/main: The example changed. So make the link work.

[18:29] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/a575049cda

[18:34] <Geth> ¬¶ doc: cfa++ created pull request #4231: Document potential performance penalties for filesystem repos (#2199)

[18:34] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4231

[18:35] *** linkable6 left
[18:38] *** linkable6 joined
[18:40] <Geth> ¬¶ doc/main: 160b0cfd87 | cfa++ (committed using GitHub Web editor) | 2 files

[18:40] <Geth> ¬¶ doc/main: Document potential performance penalties for filesystem repos (#4231)

[18:40] <Geth> ¬¶ doc/main: 

[18:41] <Geth> ¬¶ doc/main: Closes #2199.

[18:41] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/160b0cfd87

[19:02] *** dustinm`_ left
[19:08] *** linkable6 left
[19:10] *** linkable6 joined
[19:17] *** sena_kun joined
[19:18] *** archenoth joined
[19:21] *** Oshawott left
[19:23] *** dustinm` joined
[19:34] <Geth> ¬¶ doc: cfa++ created pull request #4232: Clarify the role of META6.json in filesystem repos

[19:34] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4232

[19:39] *** jpn left
[19:44] <Geth> ¬¶ doc/main: 60c752d207 | cfa++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[19:44] <Geth> ¬¶ doc/main: Clarify the role of META6.json in filesystem repos (#4232)

[19:44] <Geth> ¬¶ doc/main: 

[19:44] <Geth> ¬¶ doc/main: Relates to #2199 and comments on #4231.

[19:44] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/60c752d207

[19:51] *** jpn joined
[20:01] *** jpn left
[20:09] *** jpn joined
[20:36] *** amenonsen left
[20:36] *** jpn left
[20:40] *** lichtkind joined
[20:50] *** jpn joined
[20:54] *** jgaz left
[21:05] *** sftp left
[21:06] *** sftp joined
[21:07] *** jpn left
[21:23] *** vrurg left
[21:24] *** vrurg joined
[21:45] *** Xliff joined
[21:46] <Xliff> \o

[21:46] <Xliff> m: "test".IO.spurt("TestTestTest"); given "test".IO.open(:rw) { .seek(0, SeekFromBeginning); .spurt("BLEAH!"); .close; "test".IO.slurp.say }

[21:46] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´Failed to open file /home/camelia/test: Is a directory‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:46] <Xliff> m: "/tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw) { .seek(0, SeekFromBeginning); .spurt("BLEAH!"); .close; "/tmp/test".IO.slurp.say }

[21:46] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´BLEAH!stTest‚ê§¬ª

[21:46] <Xliff> ^^ Isn't that a bug?

[21:47] <Xliff> If not, how can I correct it so the output doesn't contain the results of the previous .spurt?

[21:50] <Xliff> m: "use NativeCall; sub ftruncate(int32, uint64) is native(*); /tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw) { .seek(0, SeekFromBeginning); .spurt("BLEAH!"); .ftruncate(.native-descriptor, 6);  close; "/tmp/test".IO.slurp.say }

[21:50] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Calling close() will never work with signature of the proto ($, *%)‚ê§at <tmp>:1‚ê§------> "); .ftruncate(.native-descriptor, 6);  ‚èèclose; "/tmp/test".IO.slurp.say }‚ê§¬ª

[21:50] <Xliff> m: "use NativeCall; sub ftruncate(int32, uint64) is native(*); /tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw) { .seek(0, SeekFromBeginning); .spurt("BLEAH!"); ftruncate(.native-descriptor, 6);  close; "/tmp/test".IO.slurp.say }

[21:50] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    ftruncate used at line 1. Did you mean 'truncate'?‚ê§‚ê§¬ª

[21:53] <rf> I'm not sure what would be the bug here

[21:53] <tellable6> 2023-03-01T07:33:01Z #raku <SmokeMachine> rf: yes, DBIish does transactions

[21:53] <ugexe> open with :truncate?

[21:53] <Xliff> m: "/tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw) { .seek(0, SeekFromBeginning); .spurt("BLEAH!"); .close; "/tmp/test".IO.slurp.say }

[21:53] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´BLEAH!stTest‚ê§¬ª

[21:54] <Xliff> ugexe: I don't want to clear the contents of the file before I can read them.

[21:54] <Xliff> I also would rather not have to open the file twice.

[21:55] <rf> I think this is just a side-effect of buffered IO

[21:55] <rf> But I could be wrong

[21:55] <Xliff> Right. so the big question is how can I truncate the extra "stTest"

[21:55] <rf> You want that to be removed?

[21:55] <Xliff> Yep.

[21:56] <Xliff> File should end at "!"

[21:57] <Xliff> m: "/tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw) { my $c = .slurp; .seek(0, SeekFromBeginning); .spurt("BLEAH!"); .close; "/tmp/test".IO.slurp.say; $c.say };

[21:57] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´BLEAH!stTest‚ê§TestTestTest‚ê§¬ª

[21:57] *** jpn joined
[21:57] <Xliff> m: "/tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw, :truncate) { my $c = .slurp; .seek(0, SeekFromBeginning); .spurt("BLEAH!"); .close; "/tmp/test".IO.slurp.say; $c.say };

[21:57] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´BLEAH!‚ê§‚ê§¬ª

[21:57] <rf> m: "test".IO.spurt("TestTestTest"); say "test".IO.slurp; "test".IO.spurt("BLEAH!"); say "test".IO.slurp;

[21:57] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´Failed to open file /home/camelia/test: Is a directory‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:57] <Xliff> Note that opening with :truncate leaves the last "TestTestTest" empty. That is not what I want.

[21:58] <rf> m: "/tmp/test".IO.spurt("TestTestTest"); say "/tmp/test".IO.slurp; "/tmp/test".IO.spurt("BLEAH!"); say "/tmp/test".IO.slurp;

[21:58] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´TestTestTest‚ê§BLEAH!‚ê§¬ª

[21:58] <rf> I think there's a way just to clobber the file

[21:58] <rf> with spurt

[21:58] <ugexe> spurt has some other options that open() does, maybe it makes sense for it to have :truncate

[21:59] <rf> m: "/tmp/test".IO.spurt("TestTestTest"); say "/tmp/test".IO.slurp; spurt "/tmp/test", "BLEAH!"; say "/tmp/test".IO.slurp;

[21:59] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´TestTestTest‚ê§BLEAH!‚ê§¬ª

[22:00] *** ToddAndMargo joined
[22:01] <Xliff> rf: *sigh* --- Did I mention that the opened file must be locked? Which is why I do not want to perform several file ops. 

[22:01] <Xliff> Sorry if I didn't.

[22:01] * Xliff headdesks

[22:01] <Xliff> ugexe: No, :truncate erases the contents of the file. I need to read that out before the .spurt.

[22:02] <Xliff> IO::Handle.spurt only has :close

[22:03] <ugexe> you would call spurt after you read it obviously

[22:03] <ugexe> and i suggested adding a :truncate option to spurt, not that exists

[22:03] <ugexe> not that it exists^

[22:04] <rf> Maybe using a filehandle is the right approach here

[22:05] <ugexe> yeah it has to be a file handle if you want to do multiple actions on it

[22:05] <ugexe> without reopening it that is

[22:06] <Xliff> Yeah, but there is no .truncate for IO::Handle.

[22:07] <Xliff> No joy using spurt(:truncate)

[22:07] <ugexe> i know, again, i'm *suggesting* it might make sense to have it -- "maybe it makes sense for it to have :truncate"

[22:08] <Xliff> Oh. Yes. Definitely!

[22:08] <Xliff> This... WORKS!

[22:08] <Xliff> m: use NativeCall; sub ftruncate (int32, uint64) is native {*}; "/tmp/test".IO.spurt("TestTestTest"); given "/tmp/test".IO.open(:rw) { .seek(0, SeekFromBeginning); .spurt("BLEAH"); ftruncate(.native-descriptor, 5); .close; }; "/tmp/test".IO.slurp.say

[22:08] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´BLEAH‚ê§¬ª

[22:29] <rf> In Template6 how can I access a map within a map?

[22:36] *** jpn left
[22:49] <discord-raku-bot> <Nemokosch> Could you give an example?

[22:52] *** amenonsen joined
[22:53] <rf> Template6.new.process('my-template', foo => { bar => 'baz' });

[22:53] <rf> How would I access bar in the template

[22:58] <discord-raku-bot> <Nemokosch> hold up...

[22:58] *** archenoth left
[23:00] *** kjp left
[23:04] *** kjp joined
[23:05] <discord-raku-bot> <Nemokosch> you know, I mangled with that module a couple of months ago, but I keep forgetting...

[23:12] <discord-raku-bot> <Nemokosch> have you tried foo<bar>, by the way?

[23:13] <ugexe> normally in template toolkit (dunno about template6) you would just call .key-name

[23:13] <ugexe> i.e. foo.bar

[23:14] *** sena_kun left
[23:16] <discord-raku-bot> <Nemokosch> my first (well, at least third first, lol) impression is that the vast majority of behavior really just comes from EVAL

[23:17] <discord-raku-bot> <Nemokosch> so I'd try the most naive way

[23:20] <discord-raku-bot> <Nemokosch> of course it would be better to rewrite it with proper RakuAST code generation but for the time being, I might rewrite the generated pieces of code to heredoc strings at least, it's really convoluted here and there

[23:33] *** jpn joined
[23:33] *** derpydoo joined
[23:34] *** amenonsen left
[23:35] <rf> I tried foo<bar> but I get an error

[23:36] <Geth> ¬¶ doc/main: 68ea242952 | (Will Coleda)++ | 2 files

[23:36] <Geth> ¬¶ doc/main: run duplicate check on more files.

[23:36] <Geth> ¬¶ doc/main: 

[23:36] <Geth> ¬¶ doc/main: ... fix the bug that prompted this

[23:36] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/68ea242952

[23:36] <Geth> ¬¶ doc/main: 0f59e32295 | (Will Coleda)++ | 2 files

[23:36] <Geth> ¬¶ doc/main: pass 'make xtest'

[23:36] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/0f59e32295

[23:38] *** jpn left
[23:38] <discord-raku-bot> <Nemokosch> what is the error, if I may

[23:39] <rf>     [% if meta<description> %] this is the call

[23:39] <coleman> I'm trying to find a compact equivalent of `awk '/foo/ {print $1}'`

[23:39] <coleman> Here's a pastebin https://envs.sh/5y

[23:40] <coleman> I'm doing this wrong. Lmk if you can help :)

[23:40] <rf> @Nemokosch Undeclared routine: meta used at line 15

[23:41] <ugexe> maybe it would parse meta.<description> better 

[23:42] <ugexe> if you can call any existing method you could use AT-KEY

[23:42] <rf> coleman: Try /catalog.+\s/

[23:42] <ugexe> i.e. meta.AT-KEY("description")

[23:44] <discord-raku-bot> <Nemokosch> m: say '.' ~~ / \w /

[23:44] <discord-raku-bot> <Raku eval>  Nil 

[23:44] <discord-raku-bot> <Nemokosch> hmmm

[23:45] <discord-raku-bot> <Nemokosch> anyway, seems like meta<description> went to the generated code verbatim

[23:46] <rf> coleman: This worked for me /<('catalog'\w+)>/;

[23:46] <coleman> oof

[23:46] <discord-raku-bot> <Nemokosch> or at least this is how I can reproduce the behavior by reading the logic

[23:47] <discord-raku-bot> <Nemokosch> for the catalog stuff - if the whole thing is one string, you could just ignore the original logic, break up the whole thing into words and grep on that, no?

[23:48] <coleman> rf: thank you very much :)

[23:48] <discord-raku-bot> <Nemokosch> that wouldn't be an equivalent for sure but it would get the job done

[23:48] <cfa> wouldn't the actual equvalent be .lines on the slurp, then grepping for a pattern?

[23:49] <cfa> m: "catalog-6987bf74cc-xhfnq    2/2     Running   0             136m\n controlensemble-0           3/3     Running   2 (27h ago)   28h\n dashboard-dff795cdc-cg5jg   2/2     Running   0             134m\n edge-7894f45d6b-2kzdt       1/1     Running   0             28h\n greymatter-datastore-0      2/2     Running   0             136m\n".lines.grep(/catalog/).say

[23:49] <camelia> rakudo-moar b721f0a04: OUTPUT: ¬´(catalog-6987bf74cc-xhfnq    2/2     Running   0             136m)‚ê§¬ª

[23:51] <coleman> lines would be closer to awk, which defaults to splitting on lines...

[23:52] <rf> Hmm, Nemo it seems like it wants meta to be a sub rather than a map

[23:52] <coleman> i'll report back if i find something succinct

[23:53] *** derpydoo left
[23:53] <discord-raku-bot> <Nemokosch> rf: yes, that's not surprising on one hand... on the other hand, I'm afraid %meta<description> won't magically fix that

[23:54] <discord-raku-bot> <Nemokosch> because the generated functions have their own "stash"

[23:54] <cfa> i guess /^^.*catalog.*?$$/

[23:54] <cfa> might do the job too

[23:54] <cfa> match a line with catalog in it

[23:55] <cfa> for all matches you'd need m:g/^^.*catalog.*?$$/

[23:57] <rf> I guess I may need to do some hacking on Template6

