[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:40] *** derpydoo joined
[00:58] *** teatime left
[00:59] *** teatime joined
[01:30] *** nine left
[01:30] *** m_athias left
[01:30] *** nine joined
[01:30] *** m_athias joined
[02:17] *** teatwo joined
[02:20] *** teatime left
[02:29] *** derpydoo left
[02:30] *** derpydoo joined
[02:40] <kybr> do we have -Werror ? my program is throwing a warning and i cant catch it

[02:54] <MasterDuke> try `use fatal`

[02:55] <MasterDuke> or try catching with `CONTROL { ... }` instead of `CATCH { ... }`

[03:19] <lucs> Let's say I'm printing out the elements of an array holding arbitrary values.

[03:19] <lucs> If an element is undefined, how would you suggest I represent it: 'Nil', 'Any', 'undef', something else?

[03:30] *** evalable6 left
[03:30] *** linkable6 left
[03:31] *** linkable6 joined
[03:31] *** evalable6 joined
[03:48] *** xinming joined
[04:48] *** squashable6 left
[04:48] *** bisectable6 left
[04:48] *** statisfiable6 left
[04:48] *** notable6 left
[04:48] *** releasable6 left
[04:48] *** sourceable6 left
[04:48] *** evalable6 left
[04:48] *** bloatable6 left
[04:48] *** committable6 left
[04:48] *** quotable6 left
[04:48] *** reportable6 left
[04:48] *** nativecallable6 left
[04:48] *** shareable6 left
[04:48] *** benchable6 left
[04:48] *** tellable6 left
[04:48] *** unicodable6 left
[04:48] *** coverable6 left
[04:48] *** linkable6 left
[04:48] *** greppable6 left
[04:48] *** reportable6 joined
[04:48] *** unicodable6 joined
[04:49] *** squashable6 joined
[04:49] *** quotable6 joined
[04:49] *** nativecallable6 joined
[04:49] *** tellable6 joined
[04:49] *** coverable6 joined
[04:49] *** benchable6 joined
[04:49] *** shareable6 joined
[04:49] *** evalable6 joined
[04:50] *** bloatable6 joined
[04:50] *** sourceable6 joined
[04:50] *** statisfiable6 joined
[04:50] *** greppable6 joined
[04:50] *** bisectable6 joined
[04:50] *** releasable6 joined
[04:50] *** committable6 joined
[04:51] *** linkable6 joined
[04:51] *** notable6 joined
[04:56] *** deoac left
[05:12] *** Xliff joined
[05:13] <Xliff> m: my $c = 0; start { $c++ }; $*SCHEDULER.cue( every => 2, -> *@a { $c.say }); sleep 10

[05:13] <camelia> rakudo-moar b6fb937da: OUTPUT: «1␤1␤1␤1␤1␤»

[05:49] *** Xliff left
[05:58] *** jpn joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:35] *** ProperNoun left
[06:59] *** kjp left
[07:00] *** jpn left
[07:00] *** tadzik left
[07:00] *** Matthew|m left
[07:00] *** CIAvash left
[07:00] *** uzl[m] left
[07:02] *** kjp joined
[07:09] *** abraxxa joined
[07:09] *** japhb left
[07:52] *** japhb joined
[07:53] *** Sgeo left
[07:57] *** sena_kun joined
[07:57] *** japhb left
[08:03] *** abraxxa left
[08:16] *** derpydoo left
[08:35] *** jpn joined
[08:41] *** CIAvash joined
[08:43] *** japhb joined
[08:47] *** japhb left
[08:50] *** abraxxa joined
[09:10] *** Xliff joined
[09:11] <Xliff> \o

[09:11] <Xliff> I know this might be the wrong channel, but could someone explain what this means: "dataLabels?: CommonDataLabelBoxTheme &"

[09:11] <Xliff> When used in this context: https://github.com/nhn/tui.chart/blob/main/docs/en/chart-pie.md

[09:11] <Xliff> I'm trying to write Raku wrappers for it.

[09:23] *** bdju left
[09:26] *** abraxxa left
[09:31] *** bdju joined
[10:03] <guifa_> My guess is it's a very odd choice for an OR equivalent

[10:03] <discord-raku-bot> <holmdunc> its type is a new type that's the merger of the named type CommonDataLabelBoxTheme and the anonymous/structural type that follows the ampersand. It can also have the value undefined thanks to the question mark

[10:31] *** evalable6 left
[10:31] *** linkable6 left
[10:32] *** evalable6 joined
[10:33] *** linkable6 joined
[11:15] *** codesections joined
[11:45] *** codesections left
[11:47] <Voldenet> Xliff: it's an optional field of intersection type obviously

[11:47] *** Matthew|m joined
[11:47] *** tadzik joined
[11:47] *** uzl[m] joined
[11:51] <Voldenet> in raku it would be: class CommonDataLabelBoxTheme { has Bool $.useSeriesColor; … }; class DataLabels is CommonDataLabelBoxTheme { has CommonDataLabelBoxTheme $.pieSeriesName; … };

[11:52] <Voldenet> and `has DataLabels $.dataLabels`

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:08] *** squashable6 left
[12:08] *** squashable6 joined
[12:30] *** japhb joined
[12:42] *** japhb left
[12:59] *** [Coke]_ joined
[13:01] *** [Coke] left
[13:02] *** [Coke]_ is now known as [Coke]

[13:03] *** euandreh joined
[13:43] *** japhb joined
[14:06] <Xliff> `Voldenet: Thanks. That's what I ended up going with. S

[14:07] <Voldenet> btw, funny that type intersection has all the fields, but type union has only intersection of fields… :D

[14:12] <Xliff> Yes, and the syntax is horrible!

[14:12] *** Sgeo joined
[14:14] *** euandreh left
[14:16] *** euandreh joined
[14:17] *** tea3po joined
[14:18] *** tea3po left
[14:18] *** tea3po joined
[14:20] *** tea3po left
[14:20] *** tea3po joined
[14:20] *** teatwo left
[14:36] *** TieUpYourCamel left
[14:38] *** peder left
[14:57] *** TieUpYourCamel joined
[15:02] *** peder joined
[15:05] *** xinming left
[15:07] *** xinming joined
[15:50] *** rf joined
[16:21] *** deoac joined
[16:33] <Voldenet> m: my $x = 42; given $x { when Int { say "nope" }; default { say "obviously" }}

[16:33] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «nope␤»

[16:33] <Voldenet> m: my $x = 42; given $x -> $y { when Int { say "nope" }; default { say "obviously" }}

[16:33] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «obviously␤»

[16:34] <Voldenet> I'm left with puzzled face

[16:36] <Voldenet> m: my $x = 42; given my $y = $x { when Int { say "nope" }; default { say "obviously" }}

[16:36] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «nope␤»

[16:38] <discord-raku-bot> <Nemokosch> m: my $x = 42; given $x { .&dd }; given $x -> $y { .&dd }; given my $y = $x { .&dd }

[16:38] <discord-raku-bot> <Raku eval>  Int $x = 42 Any $_ = Any Int $y = 42 

[16:39] <discord-raku-bot> <Nemokosch> it's not that surprising tbh, if you think that the block of given is indeed a Raku block

[16:39] <discord-raku-bot> <Nemokosch> if you specify the parameter to be $y, why would it be passed as $_?

[16:40] <Voldenet> Well yes, obviously :)

[16:49] *** TieUpYourCamel left
[16:55] *** deoac left
[17:08] <discord-raku-bot> <RaycatWhoDat> Does anything prevent MoarVM from being ported to WASM?

[17:09] <discord-raku-bot> <RaycatWhoDat> I would imagine it would be pretty slow

[17:29] <[Coke]> I would imagine rather than porting moarvm, you might want a WASM backend to NQP

[17:33] <[Coke]> Someone asked recently about maybe a nativecall-esque interface to wasm in moarvm also

[17:33] <patrickb> In general the performance of software written in C and compiled to WASM is not as bad as one might think. It's an approach multiple 3D game engines (unity, unreal) have taken. They perform acceptably fast.

[17:41] <tonyo> interesting

[17:54] *** daxim left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:08] *** daxim joined
[18:51] *** drudge joined
[18:53] <drudge> Hello all! Have a quick question on phasers, as mine aren't doing what I expect. Do `repeat while` statements support the LAST phaser? I can't find precedent for my issue

[18:53] <drudge> it appears my LAST block is executing in tandem with FIRST when inside a `repeat while` block combination

[18:54] <drudge> https://hastebin.com/share/ivepiromoy.perl I'm simply printing every three numbers in a range and adding "+" x 10

[18:55] <drudge> I should've read the sticky first, this is likely more appropriate for #raku-beginner

[18:55] <drudge> I'm on Rakudo v2023.04

[19:00] <Voldenet> m: my $iter = 12;repeat {FIRST say "+" x 10;FIRST {say "$iter"};say "{$iter += 3}";LAST say "+" x 10;} while $iter < 75;

[19:00] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «++++++++++␤12␤15␤18␤21␤24␤27␤30␤33␤36␤39␤42␤45␤48␤51␤54␤57␤60␤63␤66␤69␤72␤75␤++++++++++␤»

[19:00] <Voldenet> …works for me?

[19:01] <Voldenet> if your output isn't the same, then it sounds like some kind of bug

[19:03] <Voldenet> m: sub foo { my $iter = 12;repeat {FIRST say "+" x 10;FIRST {say "$iter"};say "{$iter += 3}";LAST say "+" x 10;} while $iter < 75; }; foo

[19:03] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «++++++++++␤++++++++++␤12␤15␤18␤21␤24␤27␤30␤33␤36␤39␤42␤45␤48␤51␤54␤57␤60␤63␤66␤69␤72␤75␤»

[19:05] <Voldenet> m: sub foo { my $i = 1; repeat { say $i; LAST say "end"; } while $i++ < 5 ; }; foo

[19:05] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «end␤No such method '!capture_phasers' for invocant of type 'Code'␤  in block <unit> at <tmp> line 1␤␤»

[19:07] <Voldenet> sub foo { while False { LAST say "foo" } }; foo

[19:07] <evalable6> Voldenet, rakudo-moar 4b69dd51e: OUTPUT: «foo␤»

[19:07] <Voldenet> sub foo { repeat { LAST say "foo" } while False }; foo

[19:08] <Voldenet> m: sub foo { repeat { LAST say "foo" } while False }; foo

[19:08] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «foo␤No such method '!capture_phasers' for invocant of type 'Code'␤  in block <unit> at <tmp> line 1␤␤»

[19:13] <[Coke]> I have pressed the button to change master to main on MoarVM/MoarVM

[19:13] <drudge> when i write it one liner like you provided it works e.g. my $iter = 12;repeat {FIRST say "+" x 10;FIRST {say "$iter"};say "{$iter += 3}";LAST say "+" x 10;} while $iter < 75;

[19:13] <[Coke]> might need to update rakubrew

[19:14] <drudge> I'm using `rakudo-pkg` on Ubuntu

[19:16] <drudge> ok, when I take it out of the MAIN subroutine it works

[19:16] <drudge> literally just deleted sub MAIN () {}

[19:16] <drudge> I'm calling it via `raku path/to/file`

[19:17] <drudge> weird, I'll assume this is a bug rather than me not knowing what I'm doing this time :P

[19:21] <drudge> thank you much for your help

[19:38] <[Coke]> try wrapping it just a {} instead of a sub MAIN() { } - I suspect the phasers are triggering when in either block vs. no block?

[19:40] <drudge> wrapping in {} works

[19:40] <drudge> adding main again breaks it

[19:45] <[Coke]> can you gist it?

[19:46] <[Coke]> want to see if it fails the same way here.

[19:49] <drudge> m: sub MAIN () {my $iter = 12;repeat {FIRST say "+" x 10;FIRST {say "$iter"};say "{$iter += 3}";LAST say "+" x 10;} while $iter < 75;}

[19:49] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «++++++++++␤++++++++++␤12␤15␤18␤21␤24␤27␤30␤33␤36␤39␤42␤45␤48␤51␤54␤57␤60␤63␤66␤69␤72␤75␤»

[19:50] <drudge> hopefully that's what you mean by gist it

[19:50] <drudge> {my $iter = 12;repeat {FIRST say "+" x 10;FIRST {say "$iter"};say "{$iter += 3}";LAST say "+" x 10;} while $iter < 75;}

[19:50] <evalable6> drudge, rakudo-moar 4b69dd51e: OUTPUT: «++++++++++␤12␤15␤18␤21␤24␤27␤30␤33␤36␤39␤42␤45␤48␤51␤54␤57␤60␤63␤66␤69␤72␤75␤++++++++++␤»

[19:51] *** linkable6 left
[19:51] *** evalable6 left
[19:53] *** linkable6 joined
[19:54] *** evalable6 joined
[20:04] <gfldex> drudge: this is where gists go: https://gist.github.com/

[20:05] <gfldex> there are CLI tool too ofc

[20:22] <Voldenet> m: sub foo { for 1 { repeat { LAST say "foo" } while False } }; foo

[20:22] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «foo␤»

[20:23] <Voldenet> the workaround is fairly easy, but ugly

[20:38] <tonyo> m: state $i = 0; repeat { $i++; say $i; LAST { say "last"; }; } while $i < 12;

[20:38] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤last␤»

[20:46] *** ismustachio left
[20:53] <leont> What's the right JSON implementation to use nowadays? JSON::Fast?

[20:53] <discord-raku-bot> <Nemokosch> yes, pretty much

[20:53] <discord-raku-bot> <Nemokosch> most maintained at least

[21:01] *** ismustachio joined
[21:05] *** drudge left
[21:35] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2023/05/10/coercing-coercion/

[21:35] <gfldex> also, my head hurts a little :)

[21:37] <tonyo> gfldex: is the COERCE what you ended up with for the .T ?

[21:37] <gfldex> aye

[21:37] <tonyo> pretty cool

[21:40] *** ProperNoun joined
[22:02] *** sena_kun left
[23:02] *** bisectable6 left
[23:02] *** tellable6 left
[23:02] *** linkable6 left
[23:02] *** bloatable6 left
[23:02] *** unicodable6 left
[23:02] *** quotable6 left
[23:02] *** reportable6 left
[23:02] *** greppable6 left
[23:02] *** sourceable6 left
[23:02] *** squashable6 left
[23:02] *** releasable6 left
[23:02] *** notable6 left
[23:02] *** evalable6 left
[23:02] *** statisfiable6 left
[23:02] *** committable6 left
[23:02] *** nativecallable6 left
[23:02] *** coverable6 left
[23:02] *** shareable6 left
[23:02] *** benchable6 left
[23:03] *** committable6 joined
[23:03] *** releasable6 joined
[23:03] *** bloatable6 joined
[23:03] *** statisfiable6 joined
[23:03] *** quotable6 joined
[23:03] *** squashable6 joined
[23:04] *** unicodable6 joined
[23:04] *** sourceable6 joined
[23:04] *** bisectable6 joined
[23:04] *** evalable6 joined
[23:04] *** notable6 joined
[23:04] *** coverable6 joined
[23:04] *** nativecallable6 joined
[23:05] *** reportable6 joined
[23:05] *** benchable6 joined
[23:05] *** linkable6 joined
[23:05] *** tellable6 joined
[23:05] *** greppable6 joined
[23:05] *** shareable6 joined
[23:11] *** theklesk joined
[23:12] *** theklesk left
[23:14] *** euandreh left
