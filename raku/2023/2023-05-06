[00:00] *** reportable6 left
[00:00] *** bigdata left
[00:01] *** bigdata joined
[00:01] *** reportable6 joined
[00:06] *** bigdata left
[00:46] <avuserow> what file does raku.land use for the main documentation source of a module? can it display documentation from other files in a module?
[00:50] *** squashable6 left
[00:51] *** squashable6 joined
[00:59] <avuserow> looks like it might just be the README.md
[01:00] <avuserow> I want to have some non-trivial documentation in another file but unsure whether I should use Pod6 or markdown, and how to output it so it can be actually viewed somewhere.
[01:01] <avuserow> maybe pod6 in a separate file, then add a conversion step to .md into a docs directory, then you could use both rakudoc and view the generated .md file in github.
[01:22] *** jpn left
[01:25] <Xliff> Is this right? "multi sub infix:<d> ($a where * > 1, $b) is tighter( &infix:<*> ) { " -- I'm getting errors.
[02:14] *** teatwo left
[02:15] *** teatwo joined
[03:15] *** reportable6 left
[03:15] *** notable6 left
[03:15] *** benchable6 left
[03:15] *** unicodable6 left
[03:15] *** committable6 left
[03:15] *** linkable6 left
[03:15] *** squashable6 left
[03:15] *** quotable6 left
[03:15] *** evalable6 left
[03:15] *** bloatable6 left
[03:15] *** nativecallable6 left
[03:15] *** sourceable6 left
[03:15] *** coverable6 left
[03:15] *** releasable6 left
[03:15] *** tellable6 left
[03:15] *** shareable6 left
[03:15] *** bisectable6 left
[03:15] *** squashable6 joined
[03:15] *** sourceable6 joined
[03:15] *** bisectable6 joined
[03:15] *** committable6 joined
[03:16] *** reportable6 joined
[03:16] *** evalable6 joined
[03:16] *** bloatable6 joined
[03:16] *** unicodable6 joined
[03:16] *** tellable6 joined
[03:16] *** coverable6 joined
[03:16] *** notable6 joined
[03:17] *** benchable6 joined
[03:17] *** releasable6 joined
[03:17] *** quotable6 joined
[03:17] *** shareable6 joined
[03:17] *** linkable6 joined
[03:18] *** nativecallable6 joined
[03:22] *** zara joined
[03:23] *** zara left
[03:39] *** rf left
[03:56] <Voldenet> Xliff: Uh, it's 2, not *-2 (0 - Backtrace.new, 1 - current sub, 2 - parent sub) - it can sometimes show empty string for nameless sub, so consider `Backtrace.new.grep(*.subname)[2].subname` instead
[03:56] <tellable6> 2023-05-05T14:55:40Z #raku <Xliff> Voldenet Is it always *-2 for Backtrace?
[03:59] *** zara joined
[03:59] *** zara left
[04:05] <Xliff> Voldenet++: Thanks
[04:06] <Xliff> m: sub c { Backtrace.new grep( *.subname )[2].subname),.say; sub b { c() }; sub a { b() }; a()
[04:06] <camelia> rakudo-moar c10767e53: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> sub c { Backtrace.new⏏ grep( *.subname )[2].subname),.say; sub␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»
[04:06] <Xliff> m: sub c { Backtrace.new grep( *.subname )[2].subname,.say }; sub b { c() }; sub a { b() }; a()
[04:06] <camelia> rakudo-moar c10767e53: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> sub c { Backtrace.new⏏ grep( *.subname )[2].subname,.say }; su␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»
[04:06] <Xliff> m: sub c { Backtrace.new.grep( *.subname )[2].subname,.say }; sub b { c() }; sub a { b() }; a()
[04:06] <camelia> rakudo-moar c10767e53: OUTPUT: «(Any)␤»
[04:07] <Xliff> m: sub c { Backtrace.new.[2].subname,.say }; sub b { c() }; sub a { b() }; a()
[04:07] <camelia> rakudo-moar c10767e53: OUTPUT: «(Any)␤»
[04:07] <Xliff> m: sub c { .say for Backtrace.new.map({ .subname // 'NO SUB NAME' }  }; sub b { c() }; sub a { b() }; a()
[04:07] <camelia> rakudo-moar c10767e53: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> .new.map({ .subname // 'NO SUB NAME' }  ⏏}; sub b { c() }; sub a…»
[04:07] <Xliff> m: sub c { .say for Backtrace.new.map({ .subname // 'NO SUB NAME' } ) }; sub b { c() }; sub a { b() }; a()
[04:07] <camelia> rakudo-moar c10767e53: OUTPUT: «new␤c␤b␤a␤<unit>␤»
[04:09] <Xliff> Voldenet: Works a treat... thanks!
[04:21] <Xliff> Why is Proc::Async telling me my Cro::HTTP::Server script is finished right  after it starts listening?
[04:21] <Xliff> Is it because react/whenever blocks are non-reentrant?
[04:22] <Xliff> .... Ooor... because I refactored the event loop out of the service runner... 
[04:31] <Xliff> Hmmm...when will raku ever do the ‽ sigil?
[04:32] <Xliff> It will happen...... one day!
[04:42] <avuserow> Is it possible to make `new` a multi method, but avoid calling `Mu.new`?
[04:43] <avuserow> m: class Foo {multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; say Foo.new(1, 2); say Foo.new(:a<1>, :b<2>) # this last one should fail
[04:43] <camelia> rakudo-moar c10767e53: OUTPUT: «Also okay␤True␤Foo.new␤»
[04:45] <avuserow> I guess I can declare `new` as a submethod. Then any subclasses would need to explicitly call `Foo.new`, which is maybe okay?
[04:45] *** frost joined
[05:45] *** unicodable6 left
[05:45] *** reportable6 left
[05:45] *** benchable6 left
[05:45] *** sourceable6 left
[05:45] *** coverable6 left
[05:45] *** committable6 left
[05:45] *** quotable6 left
[05:45] *** nativecallable6 left
[05:45] *** bloatable6 left
[05:45] *** notable6 left
[05:45] *** linkable6 left
[05:45] *** evalable6 left
[05:45] *** releasable6 left
[05:45] *** bisectable6 left
[05:45] *** tellable6 left
[05:45] *** shareable6 left
[05:45] *** statisfiable6 left
[05:45] *** squashable6 left
[05:46] *** nativecallable6 joined
[05:46] *** statisfiable6 joined
[05:46] *** shareable6 joined
[05:46] *** coverable6 joined
[05:47] *** notable6 joined
[05:47] *** tellable6 joined
[05:47] *** benchable6 joined
[05:47] *** quotable6 joined
[05:47] *** reportable6 joined
[05:47] *** bloatable6 joined
[05:47] *** committable6 joined
[05:47] *** bisectable6 joined
[05:48] *** squashable6 joined
[05:48] *** unicodable6 joined
[05:48] *** evalable6 joined
[05:48] *** linkable6 joined
[05:48] *** sourceable6 joined
[05:48] *** releasable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:28] *** jpn joined
[07:28] *** bisectable6 left
[07:28] *** greppable6 left
[07:28] *** linkable6 left
[07:28] *** squashable6 left
[07:28] *** reportable6 left
[07:28] *** coverable6 left
[07:28] *** releasable6 left
[07:28] *** committable6 left
[07:28] *** tellable6 left
[07:28] *** unicodable6 left
[07:28] *** notable6 left
[07:28] *** benchable6 left
[07:28] *** bloatable6 left
[07:28] *** evalable6 left
[07:28] *** nativecallable6 left
[07:28] *** statisfiable6 left
[07:28] *** sourceable6 left
[07:28] *** shareable6 left
[07:28] *** quotable6 left
[07:28] *** nativecallable6 joined
[07:28] *** evalable6 joined
[07:29] *** notable6 joined
[07:29] *** reportable6 joined
[07:29] *** tellable6 joined
[07:29] *** bloatable6 joined
[07:29] *** committable6 joined
[07:30] *** greppable6 joined
[07:30] *** linkable6 joined
[07:30] *** shareable6 joined
[07:30] *** unicodable6 joined
[07:30] *** quotable6 joined
[07:30] *** benchable6 joined
[07:31] *** statisfiable6 joined
[07:31] *** releasable6 joined
[07:31] *** coverable6 joined
[07:31] *** bisectable6 joined
[07:31] *** sourceable6 joined
[07:31] *** squashable6 joined
[07:50] *** TypoToni left
[08:24] *** sena_kun joined
[08:25] <Xliff> avuserow: You have to proto new in the class, like so:
[08:25] <Xliff> m: class Foo { proto method new (|) { (* }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; say Foo.new(1, 2); say Foo.new(:a<1>, :b<2>) # this last one should fai
[08:25] <camelia> rakudo-moar c10767e53: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> class Foo { proto method new (|) { (* ⏏}; multi metho…»
[08:26] <Xliff> m: class Foo { proto method new (|) { * }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; say Foo.new(1, 2); say Foo.new(:a<1>, :b<2>) # this last one should fai
[08:26] <camelia> rakudo-moar c10767e53: OUTPUT: «Also okay␤Cannot resolve caller new(Foo:U: :a(IntStr), :b(IntStr)); none of these signatures matches:␤    (Foo: $a, *%_)␤    (Foo: $a, $b, *%_)␤  in block <unit> at <tmp> line 1␤␤True␤»
[08:26] <Xliff> avuserow ^^
[08:26] <Xliff> m: class Foo { proto method new (|) { * }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; say Foo.new(1, 2); say TRY Foo.new(:a<1>, :b<2>) # this last one should fai
[08:26] <camelia> rakudo-moar c10767e53: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    TRY used at line 1␤␤»
[08:26] <Xliff> m: class Foo { proto method new (|) { * }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; say Foo.new(1, 2); say try Foo.new(:a<1>, :b<2>) # this last one should fai
[08:26] <camelia> rakudo-moar c10767e53: OUTPUT: «Also okay␤True␤Nil␤»
[08:27] <Xliff> m: class Foo { proto method new (|) { * }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; Foo.new(1, 2); try Foo.new(:a<1>, :b<2>) # this last one should fai
[08:27] <camelia> rakudo-moar c10767e53: OUTPUT: «Also okay␤»
[08:28] <Xliff> m: class Foo { proto method new (|) { * }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; Foo.new(1, 2); { CATCH { default { say "Failure caught!" }; }; Foo.new(:a<1>, :b<2>) # this last one should fail }
[08:28] <camelia> rakudo-moar c10767e53: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 31>, :b<2>) # this last one should fail }⏏<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier lo…»
[08:29] <Xliff> m: class Foo { proto method new (|) { * }; multi method new($a) {say "okay"}; multi method new($a, $b) {say "Also okay";}}; Foo.new(1, 2); { CATCH { default { say "Failure caught!" }; }; Foo.new(:a<1>, :b<2>) } # this last one should fail
[08:29] <camelia> rakudo-moar c10767e53: OUTPUT: «Also okay␤Failure caught!␤»
[08:29] <Xliff> avuserow ^^ 
[08:30] *** Xliff left
[08:41] *** frost left
[08:44] *** Sgeo left
[08:54] *** lonewolf-dev joined
[08:54] <lonewolf-dev> should i skip learning perl and use raku with per5 modules?
[08:57] *** jpn left
[09:02] *** MoC joined
[09:03] *** MoC left
[09:05] <lizmat> lonewolf-dev: ask that question here, and you'll get a: Yes
[09:06] <lonewolf-dev> @lizmat i'm not going to mis out on anything by learning raku over perl?
[09:06] <lonewolf-dev> and using perl5 modules from cpan?
[09:07] <lonewolf-dev> in raku with inline::perl
[09:07] <lonewolf-dev> is raku superior to perl?
[09:08] <lonewolf-dev> I'm learning perl but i'm starting to doubt my decision since it looks like raku has all the features of perl + much more.
[09:10] <discord-raku-bot> <Nemokosch> I'd say depends on what your priorities are. I had a similar reasoning roughly two years ago - I for one knew that basically all I'm gonna do "seriously" is shell-like scripting so I don't need many modules and performance is barely a concern
[09:12] <discord-raku-bot> <Nemokosch> maybe there are more literal one-liners for text processing in Perl but frankly, once you reach two lines/statements, oldschool Perl is barely better than those nasty POSIX Shell dialects while Raku is a real programming language
[09:17] <lonewolf-dev> Is raku the only language that can leverage modules from other languages like python/ruby/perl?
[09:18] <lizmat> good question
[09:18] <discord-raku-bot> <Nemokosch> do not read too much into that, though
[09:19] <lizmat> using python in raku still has a number of raw edges, afaik
[09:20] <lonewolf-dev> how smooth is using inline::perl?
[09:20] <lonewolf-dev> raku should be perl6 right?
[09:20] <lizmat> Inline::Perl5 allows you to use / subclass any module on CPAN that isn't using source-filters
[09:20] <lizmat> which is 99.9%
[09:21] <lonewolf-dev> so using perl5 modules should be easy right?
[09:21] *** discord-raku-bot left
[09:21] *** discord-raku-bot joined
[09:22] <lizmat> yes, install Inline::Perl5 and DBI from CPAN
[09:22] <lizmat> and you'd do:  "use DBI:from<Perl5>"
[09:22] <lizmat> and you'd be set
[09:23] <lonewolf-dev> So as a complete beginner to perl. i should learn raku instead?
[09:23] <lonewolf-dev> I was looking for a language for my personal linux system admin and to replace bash shell scripting.
[09:24] <discord-raku-bot> <Nemokosch> please do that, you really can't make a wrong choice, use anything over Shell
[09:24] <lonewolf-dev> And maybe a larger project in the future involving web scraping with www::mechanise from cpan
[09:24] <lonewolf-dev> But i got confused with the hole perl6 vs perl5 fiasco.
[09:25] <discord-raku-bot> <Nemokosch> to be honest, I would like to see more good references for using Inline::Perl. I haven't used it myself but what I saw on Reddit wasn't convincing at all.
[09:31] <discord-raku-bot> <Nemokosch> For perl5 and perl6, I suppose everybody has a version of the story, even people who weren't around, like myself
[09:33] <lizmat> to me, just mentioning Perl 6 is akin to deadnaming
[09:34] <discord-raku-bot> <Nemokosch> much to my horror, there are people who still condemn the move to Python3 from Python2
[09:35] <discord-raku-bot> <Nemokosch> There is not much overstatement in saying that the current Perl community was conditioned to have that crippling obsession for backwards compatibility, even for admittedly horrible code
[09:39] <lonewolf-dev> so i'm not going to miss out on anything by learning raku over perl?
[09:41] <discord-raku-bot> <Nemokosch> the only thing where Perl beats Raku - not to overlook that - is sheer performance. Yes yes, in before, there might be situations where Raku is faster and simple parallelism and all but yes, on fat average, Perl is considerably faster to this day.
[09:43] <discord-raku-bot> <Nemokosch> A couple of months ago I met a friend from back in the university days and he talked about some bulky, 10k lines legacy tool they were using for something. He said it was a "Pascal script". Then the conversation went on and I mentioned Perl for some reason and then he said "oh, maybe that script was written in Perl actually 🤔 "
[09:45] <discord-raku-bot> <Nemokosch> so yeah, for the "new folks", it's just "some really old language, what was its name again" - and as someone who loves Free Pascal at least, it kind of hurts me to think of it like that 😅
[10:03] <lonewolf-dev> shoulnd raku be faster than perl because its a vm based language?
[10:11] <discord-raku-bot> <Nemokosch> I don't know if it "should" but most of the time it isn't
[10:12] <lizmat> some workloads can be faster than Perl atm
[10:12] <lizmat> but using regular expressions in Raku will make things slower
[10:13] <lizmat> that's because regular expressions in Raku aren't implemented as a state machine (like it is in Perl)
[10:13] <lizmat> but as code, giving you *much* more flexibility and options, but at a price
[10:16] *** n1to joined
[10:19] *** not-n1to joined
[10:22] *** n1to left
[10:22] <lonewolf-dev> when to use raku when to use perl?
[10:27] <lizmat> there's only one answer to that: yes
[10:31] <lizmat> sorry, but that's the kind of question that needs more information to be able to answer genuinely
[10:36] *** ab5tract left
[10:45] *** lonewolf-dev left
[10:51] *** japhb left
[10:51] *** japhb joined
[11:24] *** zara joined
[11:25] *** jpn joined
[11:38] *** zara left
[11:48] *** jpn left
[11:54] *** jpn joined
[12:00] *** reportable6 left
[12:00] *** jpn left
[12:02] *** reportable6 joined
[12:26] <tbrowder__> tonyo: did i see correctly your recent update to fez can delete a module from the active archive?
[12:27] <lizmat> only if it was uploaded <24 hours ago, afaik
[12:29] <tbrowder__> ah, ok. it would be nice to somehow remove old, bad ones and put them away from easy access
[12:50] <lizmat> but who's to judge what is old and bad?
[12:55] <ugexe> i imagine one day we'll be able to implement something like that, but it'd be based on heuristics (i.e. how many non-ci system/ip downloaded it for instance) as well as some sort of consensus algorithm / system for manual overrides that don't have to involve the site owner
[12:55] <Voldenet> >Perl beats Raku - not to overlook that - is sheer performance
[12:56] <Voldenet> Perl5 is relatively fast compared to a lot of languages
[13:02] *** linkable6 left
[13:02] *** evalable6 left
[13:02] *** evalable6 joined
[13:03] *** jpn joined
[13:04] *** linkable6 joined
[13:12] *** jpn left
[13:50] *** rf joined
[14:16] *** teatime joined
[14:18] *** teatwo left
[15:07] *** TypoToni joined
[15:43] <discord-raku-bot> <Nemokosch> just imagine if it even was a well-designed language in addition...
[15:43] <discord-raku-bot> <Nemokosch> not just a half-grown-up shell
[15:46] *** heartburn left
[15:52] <lucs> Problem 'augment'ing Match class, with more details: https://gist.github.com/lucs/0d659fe98c9b70bc0304006f005b0996
[15:53] *** heartburn joined
[15:58] <lucs> vrurg: I'm not sure I understand the reasons for your reluctance to using 'augment'.
[15:58] <lucs> Can you elaborate or point me to some already written stuff on this?
[16:05] *** Petr joined
[16:06] <Petr> Hello. Can I install Raku on Haiku os ?
[16:06] <tellable6> 2021-10-11T19:56:00Z #raku <melezhik> .tell Petr:  Hi! Good to see you here. I am Russian as well 
[16:06] <tellable6> 2021-10-11T20:55:00Z #raku <japhb> Petr: You could always use it via Inline::Perl5 ...
[16:08] <Petr> I can't find Daly for Haiku
[16:09] <Petr> Raku
[16:11] <lizmat> if it haz a C compiler, you probably could?
[16:18] *** Petr left
[16:20] *** MoC joined
[16:20] *** MoC left
[16:26] *** jpn joined
[16:30] *** jpn left
[17:17] *** TypoToni left
[17:22] *** perryprog left
[17:22] *** perryprog joined
[17:22] *** Scotteh left
[17:26] *** jpn joined
[17:31] *** Scotteh joined
[17:44] *** jpn left
[18:00] *** reportable6 left
[18:01] <discord-raku-bot> <librasteve> sorry
[18:01] *** reportable6 joined
[18:15] *** Sgeo joined
[18:28] *** Vyrus left
[18:28] *** Vyrus joined
[19:28] *** sourceable6 left
[19:28] *** quotable6 left
[19:28] *** squashable6 left
[19:28] *** greppable6 left
[19:28] *** coverable6 left
[19:28] *** tellable6 left
[19:28] *** evalable6 left
[19:28] *** notable6 left
[19:28] *** nativecallable6 left
[19:28] *** committable6 left
[19:28] *** bloatable6 left
[19:28] *** bisectable6 left
[19:28] *** shareable6 left
[19:28] *** benchable6 left
[19:28] *** statisfiable6 left
[19:28] *** reportable6 left
[19:28] *** linkable6 left
[19:28] *** releasable6 left
[19:28] *** unicodable6 left
[19:29] *** nativecallable6 joined
[19:29] *** sourceable6 joined
[19:29] *** bloatable6 joined
[19:29] *** committable6 joined
[19:29] *** benchable6 joined
[19:29] *** statisfiable6 joined
[19:29] *** releasable6 joined
[19:29] *** evalable6 joined
[19:30] *** squashable6 joined
[19:30] *** coverable6 joined
[19:30] *** linkable6 joined
[19:30] *** reportable6 joined
[19:30] *** tellable6 joined
[19:30] *** bisectable6 joined
[19:30] *** shareable6 joined
[19:31] *** unicodable6 joined
[19:31] *** quotable6 joined
[19:31] *** greppable6 joined
[19:31] *** notable6 joined
[20:06] *** n1to__ joined
[20:06] *** not-n1to left
[21:06] *** linkable6 left
[21:06] *** nativecallable6 left
[21:06] *** unicodable6 left
[21:06] *** coverable6 left
[21:06] *** reportable6 left
[21:06] *** quotable6 left
[21:06] *** releasable6 left
[21:06] *** committable6 left
[21:06] *** statisfiable6 left
[21:06] *** evalable6 left
[21:08] *** statisfiable6 joined
[21:08] *** reportable6 joined
[21:08] *** unicodable6 joined
[21:08] *** quotable6 joined
[21:08] *** nativecallable6 joined
[21:08] *** evalable6 joined
[21:09] *** committable6 joined
[21:09] *** releasable6 joined
[21:09] *** coverable6 joined
[21:09] *** linkable6 joined
[21:13] *** jpn joined
[21:18] *** jpn left
[21:42] *** sena_kun left
[21:54] *** jpn joined
[22:34] <gfldex> m: Match.HOW.say;
[22:34] <camelia> rakudo-moar 242f30982: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»
[22:36] <gfldex> m: Match.^mro.say;
[22:36] <camelia> rakudo-moar 242f30982: OUTPUT: «((Match) (Capture) (Cool) (Any) (Mu))␤»
[22:54] *** evalable6 left
[22:54] *** linkable6 left
[22:55] *** evalable6 joined
[22:57] *** linkable6 joined
[23:04] *** jpn left
[23:07] *** euandreh left
[23:07] *** perlmaros joined
[23:07] *** mst joined
[23:07] *** a3r0 joined
[23:07] *** elcaro joined
[23:07] *** tib_ joined
[23:07] *** donpdonp|z_ joined
[23:07] *** kjp joined
[23:08] *** thowe joined
[23:08] *** dustinm` joined
[23:09] *** justache joined
[23:09] *** justache left
[23:09] *** xelxebar joined
[23:09] *** gordonfish joined
[23:09] *** lizmat joined
[23:09] *** euandreh joined
[23:09] *** cm joined
[23:12] *** Woodi joined
[23:12] *** _________ joined
[23:13] *** bdju joined
[23:13] *** justache joined
[23:19] *** jmcgnh joined
[23:20] <gfldex> lucs: Please try `Match.HOW.compose(Match);` after augmenting Match.
