[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:09] *** jpn joined
[00:13] *** jpn left
[01:13] *** linkable6 left
[01:13] *** squashable6 left
[01:13] *** sourceable6 left
[01:13] *** benchable6 left
[01:13] *** coverable6 left
[01:13] *** bisectable6 left
[01:13] *** nativecallable6 left
[01:13] *** quotable6 left
[01:13] *** releasable6 left
[01:13] *** notable6 left
[01:13] *** greppable6 left
[01:14] *** greppable6 joined
[01:14] *** squashable6 joined
[01:14] *** linkable6 joined
[01:14] *** notable6 joined
[01:15] *** benchable6 joined
[01:15] *** releasable6 joined
[01:15] *** coverable6 joined
[01:15] *** sourceable6 joined
[01:15] *** bisectable6 joined
[01:16] *** quotable6 joined
[01:16] *** nativecallable6 joined
[01:51] *** jpn joined
[01:56] *** jpn left
[02:20] *** teatwo joined
[02:23] *** tea3po left
[02:24] *** jdv_ is now known as jdv

[03:24] *** linkable6 left
[03:24] *** evalable6 left
[03:25] *** linkable6 joined
[03:27] *** evalable6 joined
[03:39] *** jpn joined
[03:44] *** jpn left
[04:31] *** squashable6 left
[04:33] *** squashable6 joined
[05:02] *** jpn joined
[05:07] *** jpn left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:27] *** jpn joined
[06:32] *** jpn left
[06:50] *** codesections left
[06:53] *** jpn joined
[06:54] *** codesections joined
[07:05] *** jpn left
[07:16] *** codesections left
[07:16] *** codesections1 joined
[07:18] *** codesections1 is now known as codesections

[07:27] *** abraxxa joined
[07:33] *** Xliff left
[07:36] *** codesections1 joined
[07:37] *** codesections left
[07:37] *** codesections1 is now known as codesections

[07:39] *** abraxxa left
[07:48] *** dakkar joined
[08:10] *** Sgeo left
[08:51] *** abraxxa joined
[09:19] *** jpn joined
[09:39] *** jast left
[09:39] *** jast joined
[10:37] *** jpn left
[10:39] *** derpydoo left
[10:40] *** zara joined
[11:03] *** ab5tract joined
[11:22] *** codesections left
[11:34] *** jpn joined
[11:42] *** jpn left
[12:00] *** reportable6 left
[12:01] *** abraxxa left
[12:01] *** reportable6 joined
[12:07] <lizmat> heh, Raku on HackerNews frontpage: https://news.ycombinator.com

[12:08] <lizmat> https://news.ycombinator.com/item?id=36118913

[12:10] *** jpn joined
[12:15] *** jpn left
[12:19] *** human_blip left
[12:26] *** abraxxa joined
[12:44] *** jpn joined
[12:58] * lizmat clickbaits https://rakudoweekly.blog/2023/05/29/2023-22-rakuast-rolling/

[13:17] *** m_athias left
[13:17] *** m_athias joined
[14:13] *** Sgeo joined
[14:20] *** tea3po joined
[14:22] *** abraxxa left
[14:23] *** teatwo left
[15:23] *** evalable6 left
[15:23] *** linkable6 left
[15:24] *** evalable6 joined
[15:26] *** linkable6 joined
[15:27] *** xinming left
[15:29] *** xinming joined
[15:43] *** zara left
[15:54] *** gfldex left
[16:02] *** jpn left
[16:26] *** sena_kun joined
[16:35] *** dakkar left
[17:15] <Tirifto> While using Inline::Perl5, has anyone had to pass a variable to a function, for a value to be stored inside it? It seems like a Perl function wants me to do that, but the value I’m trying to pass is effectively read-only.

[17:25] *** xinming left
[17:26] *** xinming joined
[17:37] *** gfldex joined
[17:49] <Tirifto> (At least passing a scalar has Raku tell me it’s read only, and making it into a capture first doesn’t seem to do the trick…)

[17:55] <[Coke]> add "is copy" ?

[17:55] <[Coke]> or "is rw"

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:07] <Tirifto> [Coke], wouldn’t I have to do that in the function/signature declaration? The function comes from Perl 5, though.

[18:10] <[Coke]> oops, yes

[18:14] <[Coke]> how do you call this from p5?

[18:23] <Tirifto> I am trying to use the Curses library. <https://metacpan.org/pod/Curses> I import it with ‘use Curses:from<Perl5>;’, then I call ‘initscr;’ to create a window, and then I want to call ‘getyx’ to get the coordinates at which the window starts.

[18:24] <Tirifto> Apparently ‘getyx’ should take three arguments: the window, a variable into which the y-coordinate will go, and a variable into which the x-coordinate will go.

[18:25] <Tirifto> I get the window by calling ‘stdscr()’ (which gets imported), and then I’m not sure how to pass the two variables next to that.

[18:28] <Tirifto> If I create them with ‘my ($y, $x)’ first, none of these approaches seem to work: 1: ‘getyx(stdscr(), $y, $x);’, 2: ‘getyx(\(stdscr(), $y, $x))’, 3: ‘my $arg = \($x, $y); getyx(stdscr(), |$arg);’, 4: ‘my $arg = \($x, $y); getyx(stdscr(), $arg);’

[18:30] <Tirifto> Well, approach 4 doesn’t throw and error, but I also leaves the variables $x and $y empty.

[18:30] <Tirifto> Sorry if this is a bit too specific and/or convoluted. x)

[19:06] <[Coke]> nine: any thoughts on this?

[19:13] *** sena_kun left
[19:34] <nine> According to the README it should be getyx(stdscr(), \($y), \($x))

[19:35] <nine> But I fear that won't do either, as that function doesn't seem to require references. The C code seems to modify those SVs in place.

[19:38] <nine> This may require a perl wrapper for functions that do such dirty tricks.

[19:47] *** jpn joined
[19:52] <Tirifto> nine, so I could do something like write a Perl function which takes a reference and then dereferences it before passing the variables to the actual function I wanted to call, right? :o

[19:53] <nine> I'd just create a sub getyx_res { my ($scr) = @_; my ($y, $x); getyx($std, $y, $x); return ($y, $x) }

[19:57] *** jpn left
[20:04] <tonyo> should that be scr rather than std?

[20:22] *** codesections joined
[20:24] *** coleman left
[20:27] <nine> ah, yes

[20:28] *** coleman joined
[20:45] *** coleman_ joined
[20:46] <lizmat> the final installment of RakuAST for Early Adopters: https://dev.to/lizmat/shaking-the-rakuast-tree-307

[20:49] *** coleman_ left
[21:05] *** user___ left
[21:06] *** dogbert11 joined
[21:06] *** Archenoth joined
[21:07] *** jargan joined
[21:08] *** tobs` joined
[21:08] *** kaskal joined
[21:08] *** jrjsmrtn_ joined
[21:09] *** simcop2387_ joined
[21:09] *** phogg` joined
[21:11] *** peder_ joined
[21:11] *** phogg` left
[21:11] *** phogg` joined
[21:11] *** phogg left
[21:11] *** phogg` is now known as phogg

[21:11] *** El_Che_ joined
[21:11] *** ismustachio_ joined
[21:11] *** kjp_ joined
[21:12] *** Maylay_ joined
[21:12] *** Tirifto_ joined
[21:16] *** jast left
[21:16] *** Tirifto left
[21:16] *** jrjsmrtn left
[21:16] *** kaskal- left
[21:16] *** kjp left
[21:16] *** peder left
[21:16] *** tobs left
[21:16] *** Maylay left
[21:16] *** dogbert17 left
[21:16] *** El_Che left
[21:16] *** simcop2387 left
[21:16] *** ismustachio left
[21:16] *** tobs` is now known as tobs

[21:16] *** peder_ is now known as peder

[21:16] *** simcop2387_ is now known as simcop2387

[21:16] *** Archenoth is now known as arch

[21:36] <tbrowder__> where/when is the raku core conf? remote access available?

[22:15] *** jpn joined
[22:20] *** jpn left
[22:32] <elcaro> Tirifto_: maybe a loaded question, but any reason stopping you from using NCurses lib (https://raku.land/github:azawawi/NCurses)?

[22:45] <kawaii> I keep getting told that `No such method 'basename' for invocant of type 'Str'` - but I've double checked this about 4 times now and I'm almost certain that `.IO` is being used correctly here to convert the strings to an `IO::Path` object, no? https://www.irccloud.com/pastebin/GhfQRC0E/

[23:03] <elcaro> Yeah, it looks correct. Maybe check what `$file.^name` says, and whats in `$file.^methods`. 

[23:05] <elcaro> maybe don't shadow `$file` on that inner loop ?

[23:06] <elcaro> You declare `my $file`, then later... `for $archive.files -> $file`

[23:16] <kawaii> ah yeah the shadowing is not ideal, but you pointed me in the right place, `.dirname` is returning a Str :^)

[23:16] <kawaii> thanks elcaro 

[23:17] <elcaro> oh, I didn't even see that `.basename` :)

[23:17] <elcaro> was just looking at the first one

[23:18] <elcaro> maybe you want `.parent` (which returns an IO) instead of `.dirname`

[23:20] *** evalable6 left
[23:20] *** linkable6 left
[23:21] *** evalable6 joined
[23:22] *** linkable6 joined
