[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:26] *** derpydoo joined
[00:59] *** Aozen left
[01:02] *** Aozen joined
[01:04] *** xinming left
[01:06] *** xinming joined
[01:10] *** GreaseMonkey left
[01:10] *** greaser|q joined
[01:12] *** tonyo left
[01:12] *** tonyo joined
[01:19] *** greaser|q left
[01:19] *** greaser|q joined
[01:19] *** greaser|q is now known as GreaseMonkey

[01:29] *** razetime joined
[01:39] <lucs> Given ‚åäclass Foo { method foo { "SNOO" }; method diehow { self.foo ~ $.foo } }‚åâ, how should I think about the difference between ‚åäself.foo‚åâ and ‚åä$.foo‚åâ?

[01:40] *** Aozen left
[02:09] *** teatime left
[02:09] *** teatime joined
[02:10] *** oodani left
[02:11] *** oodani joined
[02:33] <guifa_> self requires an instantiated value

[02:34] <guifa_> basically, self is guaranteed to be a non-type object

[02:36] *** deoac joined
[02:38] <perryprog> For April Fools we should've said calling .WHAT on a string will now be an alias for .uc

[02:47] <guifa_> err actually it doesn't require an instantiated value.  

[02:47] <guifa_> nm

[02:48] <lucs> Yeah, I just built this, I don't quite (at all actually understand the difference:

[02:49] <lucs> Yeah, I just built this, I don't quite (at all actually) understand the difference:

[02:49] <lucs> https://gist.github.com/lucs/259e6aad61651abcb192ae95625c044d

[02:51] <guifa_> there's no difference in the calls themselves there

[02:52] <guifa_> method foo {¬†‚Ä¶¬†}¬†is really internally the equivalent of sub foo (::CLASS:_ \self:) {¬†‚Ä¶¬†}

[02:53] <guifa_> when you call a method, the first argument is always set to the invocant

[02:54] <guifa_> in your Foo, it's an instance of Foo.  In your Niy, it's the type object

[02:54] <lucs> Are self.foo and $.foo always interchangeable\

[02:54] <lucs> ?

[02:54] <lucs> (in the same context)

[02:55] <lucs> Because hey, I'm lazy, I'll use $.foo all the time if I can ;)

[02:55] <guifa_> per the docs: `$.a will be equivalent to self.a.item or $(self.a)`

[02:56] <lucs> I saw that, but they're talking about attributes I think, not necessarily methods.

[02:57] <guifa_> same logic applies

[02:57] <guifa_> m: class Foo { method a {¬†1,2,3 }; method b {¬†.say for self.a }; method c {¬†.say for $.a } }; Foo.b; Foo.c;

[02:57] <camelia> rakudo-moar d3b58a348: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§(1 2 3)‚ê§¬ª

[02:59] <lucs> Aha, I see.

[03:00] <lucs> (with my eyes, that is -- I'll need to think a bit more :-) )

[03:10] *** rakuuser left
[03:17] *** ProperNoun joined
[03:19] <lucs> guifa_: Okay, got it.

[03:19] <lucs> Thanks for the explanation and the excellent example.

[04:17] *** evalable6 left
[04:17] *** linkable6 left
[04:18] *** linkable6 joined
[04:19] *** ProperNoun left
[04:19] *** evalable6 joined
[04:21] *** ProperNoun joined
[04:35] *** derpydoo left
[04:38] *** derpydoo joined
[05:35] *** ProperNoun left
[05:40] <discord-raku-bot> <pelevesque> So $.a is like self.a.item or $(self.a), but not like self.a  The $ creates a kind of or literally a container?  I get it with attributes, but for methods, does $.myMethod have advantages over self.myMethod?

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:05] *** razetime left
[06:41] *** lucs left
[06:42] *** lucs joined
[06:43] *** razetime joined
[07:04] *** Sgeo left
[07:18] *** merp left
[07:34] *** razetime left
[07:36] <discord-raku-bot> <Nemokosch> For what it's worth, $.a and self.a are always method calls

[07:38] <discord-raku-bot> <Nemokosch> There is no public access to attributes

[07:41] <discord-raku-bot> <Nemokosch> In the Rakudo sources, you can see that $.a is really just "gimme the result of the method call to a, in a container"

[07:42] <discord-raku-bot> <Nemokosch> You could use @.a and you'd get the same result, with .list called on it

[07:43] <discord-raku-bot> <Nemokosch> Or %.a and then .hash is applied

[07:45] <discord-raku-bot> <Nemokosch> Even you do has $.foo, that sets up a (private) attribute $!foo and a (public) method foo that returns $!foo

[07:45] <discord-raku-bot> <Nemokosch> S /Even/Every time

[07:48] <discord-raku-bot> <Nemokosch> This is why you can do is rw stuff at a declaration like that: it is used for generating the method üòâ

[07:54] *** jpn joined
[07:56] *** an3223_ joined
[07:57] *** BabyLoveWoodrose joined
[07:57] *** dakkar joined
[07:58] *** Vyrus left
[08:09] *** jpn left
[08:11] *** jpn joined
[09:11] *** nativecallable6 left
[09:11] *** committable6 left
[09:11] *** sourceable6 left
[09:11] *** greppable6 left
[09:11] *** bisectable6 left
[09:11] *** squashable6 left
[09:11] *** benchable6 left
[09:11] *** releasable6 left
[09:12] *** benchable6 joined
[09:12] *** sourceable6 joined
[09:13] *** greppable6 joined
[09:13] *** nativecallable6 joined
[09:13] *** squashable6 joined
[09:13] *** committable6 joined
[09:14] *** releasable6 joined
[09:14] *** bisectable6 joined
[09:26] *** derpydoo left
[10:18] <Geth> ¬¶ ecosystem/main: 4134c9ac88 | (Elizabeth Mattijsen)++ | META.list

[10:18] <Geth> ¬¶ ecosystem/main: Remove Lingua::EN::Syllable

[10:18] <Geth> ¬¶ ecosystem/main: 

[10:18] <Geth> ¬¶ ecosystem/main: It now lives in the fez ecosystem

[10:18] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/4134c9ac88

[10:26] *** linkable6 left
[10:26] *** evalable6 left
[10:28] *** linkable6 joined
[10:29] *** evalable6 joined
[10:41] *** abhinav left
[10:42] *** abhinav joined
[11:18] *** derpydoo joined
[11:20] *** Sauvin left
[11:20] *** Bocaneri joined
[11:21] *** Bocaneri is now known as Guest407

[11:23] *** rumgzy joined
[11:26] *** Guest407 left
[11:28] *** jpn left
[11:39] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/04/03/2023-14-fulldist/

[11:44] *** Xliff joined
[11:44] <Xliff> \o

[11:44] <Xliff> m: say "'Hello World'" ~~ / \" (.*?) \" | \' (.*?) \' /;

[11:44] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´ÔΩ¢'Hello World'ÔΩ£‚ê§ 0 => ÔΩ¢Hello WorldÔΩ£‚ê§¬ª

[11:45] <Xliff> m: my token in-quote   { \" (.*?) \" | \' (.*?) \' }; say "'Hello World'" ~~ / <in-quote> /;

[11:45] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´Nil‚ê§¬ª

[11:45] <Xliff> Why first but not second?

[11:46] <Xliff> m: my token inQuote   { \" (.*?) \" | \' (.*?) \' }; say "'Hello World'" ~~ / <inQuote> /;

[11:46] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´Nil‚ê§¬ª

[11:53] <discord-raku-bot> <Nemokosch> tokens don't backtrack

[11:53] <discord-raku-bot> <Nemokosch> m: my regex in-quote { " (.?) " | ' (.?) ' }; say "'Hello World'" ~~ / <in-quote> /;

[11:53] <discord-raku-bot> <Raku eval>  ÔΩ¢'Hello World'ÔΩ£  in-quote => ÔΩ¢'Hello World'ÔΩ£   0 => ÔΩ¢Hello WorldÔΩ£ 

[11:55] <discord-raku-bot> <Nemokosch> I guess it doubled down on '' when it matched the first apostrophe

[12:00] *** reportable6 left
[12:00] <Xliff> Nemokosch++: Thanks!

[12:01] *** reportable6 joined
[12:01] <discord-raku-bot> <Nemokosch> Mind you, I'd also like to know what "doesn't backtrack" means in practice

[12:02] <discord-raku-bot> <Nemokosch> buuut it definitely makes the difference here üòÖ

[12:10] *** an3223_ left
[12:23] <discord-raku-bot> <Nemokosch> you know, something is odd about this. I'm using similar "grammars" (composed regexes, at least) all the time, with token

[12:28] <discord-raku-bot> <Nemokosch> m: my token inQuote   {  \' (.*?) \' }; say "'Hello World'" ~~ / <inQuote> /

[12:28] <discord-raku-bot> <Raku eval>  Nil 

[12:28] <discord-raku-bot> <Nemokosch> so this doesn't match

[12:28] <discord-raku-bot> <Nemokosch> m: my token inQuote   {  \' <(.*?)> \' }; say "'Hello World'" ~~ / <inQuote> /

[12:28] <discord-raku-bot> <Raku eval>  ÔΩ¢'Hello World'ÔΩ£  inQuote => ÔΩ¢Hello WorldÔΩ£ 

[12:28] <discord-raku-bot> <Nemokosch> but this matches???

[12:29] <discord-raku-bot> <Nemokosch> m: my token inQuote   {  \' .*? \' }; say "'Hello World'" ~~ / <inQuote> /

[12:29] <discord-raku-bot> <Raku eval>  ÔΩ¢'Hello World'ÔΩ£  inQuote => ÔΩ¢'Hello World'ÔΩ£ 

[12:29] <discord-raku-bot> <Nemokosch> and this also does...

[12:35] *** jpn joined
[12:40] *** jpn left
[12:42] <Xliff> Nemo: Matches, but looks like it doesn't capture.

[12:43] <Xliff> No $0

[12:43] <Xliff> 669

[12:43] <Xliff> Oops.

[12:43] <discord-raku-bot> <Nemokosch> well, you can still get the whole content from $/

[12:44] <discord-raku-bot> <Nemokosch> but it would be interesting to know why the capture group suddenly ruins the matching

[12:47] <discord-raku-bot> <Nemokosch> anyway, I wrote this down at least, whether it's a bug or a feature

[12:52] *** lizmat left
[12:52] *** lizmat joined
[13:09] <Geth> ¬¶ Raku-Steering-Council/main: 194563ac65 | (Salve J. Nilsen)++ (committed using GitHub Web editor) | minutes/nis2-cra-intro.pdf

[13:09] <Geth> ¬¶ Raku-Steering-Council/main: Add slides for NIS2/CRA intro presentation

[13:09] <Geth> ¬¶ Raku-Steering-Council/main: 

[13:09] <Geth> ¬¶ Raku-Steering-Council/main: - PDF slides for Salve's presentation on NIS2/CRA and community ramifications.

[13:09] <Geth> ¬¶ Raku-Steering-Council/main: - Feel free to reach out to Salve with questions.

[13:09] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/194563ac65

[13:10] <Geth> ¬¶ Raku-Steering-Council/main: 33a56b3161 | (Salve J. Nilsen)++ (committed using GitHub Web editor) | minutes/20230401.md

[13:10] <Geth> ¬¶ Raku-Steering-Council/main: Add link to Salve's NIS2/CRA presentation PDF

[13:10] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/33a56b3161

[13:15] *** an3223_ joined
[13:43] *** jpn joined
[13:56] *** an3223_ left
[13:57] *** an3223_ joined
[13:57] *** jgaz joined
[14:10] *** teatwo joined
[14:10] *** Sgeo joined
[14:13] *** teatwo left
[14:14] *** teatwo joined
[14:14] *** teatime left
[15:02] <Voldenet> maybe it would be nice if readme.org was supported in raku.land https://raku.land/zef:andinus/Template::Nest::Fast

[15:14] *** linkable6 left
[15:14] *** evalable6 left
[15:15] *** evalable6 joined
[15:16] *** linkable6 joined
[15:16] <[Coke]> Do we have some kind of org processor in the ecosystem

[15:16] <[Coke]> ?

[15:17] *** ProperNoun joined
[15:19] *** ProperNoun left
[15:21] *** ProperNoun joined
[15:25] *** discord-raku-bot left
[15:28] *** ProperNoun left
[15:29] *** ProperNoun joined
[15:29] <[Coke]> Voldenet: https://gitlab.com/raku-land/raku-land/-/issues/37

[15:37] <Voldenet> so there is an issue, but there's no orgmode parser

[15:44] <[Coke]> looks like they were going to just shell out to emacs.

[15:44] *** Guest51 joined
[15:46] *** deoac left
[15:54] *** Xliff_ joined
[15:57] *** Xliff left
[15:58] *** nebuchadnezzar joined
[15:59] *** rumgzy is now known as Sauvin

[15:59] *** ProperNoun left
[16:00] *** ProperNoun joined
[16:08] <lucs> Reading the docs for type_captures (https://docs.raku.org/routine/type_captures.html), in the ‚åäsub a(::T ::U $x) ‚ãØ‚åâ example, what is the point of the ::U?

[16:13] *** jpn left
[16:27] *** _Xliff joined
[16:29] *** jpn joined
[16:29] *** _Xliff left
[16:30] *** Xliff_ left
[16:37] *** dakkar left
[16:48] *** buffet left
[16:50] *** buffet joined
[16:56] <Voldenet> m: sub a(::ANY ::THING $x) { (ANY, THING, $x).say }; say a(1)

[16:56] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´((Int) (Int) 1)‚ê§True‚ê§¬ª

[16:56] <Voldenet> m: sub a(::ANY ::THING ::YOU ::WANT $x) { (ANY, THING, YOU, WANT, $x).say }; say a(1)

[16:56] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´((Int) (Int) (Int) (Int) 1)‚ê§True‚ê§¬ª

[16:57] <Voldenet> I know what it does, but I don't know what's the point though

[16:59] <Voldenet> m: sub a(::first $x, first ::second $y, second $z) { (first, second, $x, $y, $z).say }; say a(1, 2, 3)

[16:59] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´((Int) (Int) 1 2 3)‚ê§True‚ê§¬ª

[16:59] <Voldenet> maybe something like that makes sense

[17:01] <Voldenet> m: sub a(::first $x, first ::second $y, second $z) { (first, second, $x, $y, $z).say }; a(Any, 2, 3)

[17:01] <camelia> rakudo-moar c921a0eca: OUTPUT: ¬´((Any) (Int) (Any) 2 3)‚ê§¬ª

[17:02] <Voldenet> Maybe it starts making a bit more sense now

[17:06] *** xinming left
[17:08] *** xinming joined
[17:15] <japhb> Copying over from #raku-dev, since I realized some of the Mac folk may not be in that channel:

[17:15] <japhb> If anyone here is using a Mac, I would super-appreciate some screenshots of Mac terminal(s) running `terminal-quick-test` from https://github.com/japhb/Terminal-Tests (`zef install Terminal::Tests`)

[17:15] <japhb> I'm trying to get a rough idea of how terminal Unicode handling is working cross-platform.

[17:15] <japhb> So far I have gnome-terminal, gnome-terminal + GNU Screen, xterm with various configurations, and Windows Terminal under Windows 10 (though that one's slightly out of date; I've added to the test pattern since then).

[17:15] <japhb> FWIW, Windows Terminal under Windows 10 without enabling UTF-8 support is ... an interesting mess.  Actually pretty decent with UTF-8 turned on properly (why in the world would this be off by default?!?)

[17:29] *** jpn left
[17:48] <lucs> Voldenet: Your last example, although somewhat contrived, appears legit,

[17:48] <lucs> but what I don't get is, given (::T ::U $x) for example, how can ::T and ::U ever be different, and if they can't, what's the point of the ::U?

[17:51] *** jpn joined
[17:53] *** sena_kun joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:06] <[Coke]> japhb: dumped a bunch of sends to raku-dev

[18:11] <japhb> Saw them, thank you!

[18:18] *** jpn left
[18:42] *** jpn joined
[18:46] <lucs> (repeating from earlier:) Reading the docs for type_captures (https://docs.raku.org/routine/type_captures.html), in the ‚åäsub a(::T ::U $x) ‚ãØ‚åâ example, what is the point of the ::U?

[18:47] <lucs> In the spirit of Cunningham's law, I believe I will edit the docs to remove the ::U in that example.

[18:48] *** gcd joined
[18:53] <lizmat> lucs++

[19:00] *** jpn left
[19:16] *** jpn joined
[19:22] *** jpn left
[20:08] *** jpn joined
[20:17] *** an3223_ left
[20:24] <coleman> japhb: If you haven't already, you might make a Reddit post about this

[20:24] <coleman> (to solicit testing from Mac users)

[20:28] <japhb> Oh right, I have a Reddit account, I totally forgot about that.

[20:31] <japhb> 0.0.4's README now has the screenshots provided by [Coke]++ and lizmat++

[20:50] *** jpn left
[21:02] *** jgaz left
[21:06] <japhb> coleman: Took your advice: https://www.reddit.com/r/rakulang/comments/12axud9/need_screenshots_of_terminal_test_patterns/

[21:07] *** tobs left
[21:07] <japhb> Awww, Reddit doesn't do :emoji: codes?

[21:18] *** tobs joined
[21:33] *** an3223_ joined
[21:39] <[Coke]> japhb: you might want to add the test version in the outputs.

[21:58] <japhb> Well gee, that would be intelligent, wouldn't it?  ;-)

[21:59] *** nort joined
[21:59] * japhb thinks about where he wants to fit that in for screenshot-friendliness

[22:04] *** sena_kun left
[22:13] *** an3223_ left
[22:45] *** derpydoo left
[23:25] *** Sgeo_ joined
[23:27] *** Sgeo left
[23:44] *** Guest51 left
