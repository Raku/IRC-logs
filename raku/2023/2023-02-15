[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:06] *** Manifest0 left
[00:16] <discord-raku-bot> <el gatito (** advocate)> m: perl my @a = 0..*; say @a 

[00:16] <discord-raku-bot> <Raku eval>  [...]  

[00:16] <discord-raku-bot> <el gatito (** advocate)> lazy arrays are a thing

[00:18] <leont> When using Getopt::Long, if you do something like ¬´sub MAIN(DateTime :$date is options(&datetime-interpret)) { ... }¬ª that will DWIM :-)

[00:19] <discord-raku-bot> <el gatito (** advocate)> i smh can't wrap my head around that

[00:46] <discord-raku-bot> <Nemokosch> what is &datetime-interpret?

[00:46] <discord-raku-bot> <Nemokosch> what is options in the first place

[01:03] *** xinming left
[01:05] *** xinming joined
[01:10] <guifa_> options I think is something that will modify the $date argument, and &datetime-interpret from DateTime::Grammar parses the date

[01:13] *** kybr left
[01:16] *** perlmaros left
[01:16] *** perlmaros joined
[01:23] <discord-raku-bot> <Anton Antonov> @Nemokosch  1. The function datetime-parse is a "synonym" of DateTime::Grammar.parse. The function datetime-interpret is DateTime::Grammar.parse with actions -- by default those are Raku-actions. (I.e.  DateTime objects are generated.) 2. I use the word "options" as a short cut for "named arguments". (That is my Mathematica background showing up...)

[01:26] *** kybr joined
[01:27] <discord-raku-bot> <Anton Antonov> @Nemokosch Hmm... I am not sure how leont uses options. "Options" is also a concept used in describing signatures of CLI scripts.

[01:31] <discord-raku-bot> <Nemokosch> yeah that name just gives me no clue what its purpose is..

[01:31] <discord-raku-bot> <Anton Antonov> Which name?

[01:32] <leont> The option (I typod an extra s) trait in Getopt::Long sets up how named CLI options are turned into named arguments, it can be used if you want something other than the default

[01:35] <discord-raku-bot> <Nemokosch> oh this is pretty useful

[01:36] <discord-raku-bot> <Nemokosch> funnily enough, Getopt::Long even fixes some issues with the default CLI, like enum lookup

[01:36] <leont> Yeah, enum lookup in the default parser is really broken

[01:36] *** frost joined
[01:36] <leont> Try typing something like ¬´zef install True¬ª and see what happens‚Ä¶

[01:37] <discord-raku-bot> <Nemokosch> ü§£

[01:37] <discord-raku-bot> <Nemokosch> https://www.youtube.com/watch?v=AR8D2yqgQ1U

[01:40] <discord-raku-bot> <Anton Antonov> @leont Would you use sequences of date specs in a CLI script? For example: (1) new-temporal-data --dates=yesterday,today , (2) new-temporal-data --dates=2022-02-12,2023-01-12, (3) new-temporal-data --dates=monday,wednesday,thursday.

[01:49] <[Coke]> jdv: fixed it on HEAD, I think

[01:51] <[Coke]> huh. I have a local script that works on 2022.07 but emits no output on 2022.12

[01:51] <[Coke]> er, on HEAD

[01:55] <discord-raku-bot> <Nemokosch> tbh there were regressions in 2022.12 alread

[01:55] <discord-raku-bot> <Nemokosch> y

[01:55] <[Coke]> I'll see if I can golf it

[02:02] <guifa_> sweet I just got percent and permille formats added to Intl::Format::Numbers

[02:03] <discord-raku-bot> <Anton Antonov> @guifa Pictures or never happened!

[02:05] <guifa_> say format-number .987654, :type<percent>; # 98.7654%

[02:05] <guifa_> say format-number .987654, :type<permille>; # 987.654‚Ä∞

[02:05] <guifa_> I'll be uploading it shortly

[02:06] <guifa_> next step is scientific

[02:06] <discord-raku-bot> <Anton Antonov> Cool!

[02:09] *** ispyhuma1fly left
[02:15] <discord-raku-bot> <Nemokosch> Tbh Raku could really be more known outside of, well, us, given the amount of work that is going into it (mainly thinking of Rakudo), basically on a daily basis

[02:15] <discord-raku-bot> <Nemokosch> Have you heard of Self? Historically an interesting language, basically all dead

[02:15] <discord-raku-bot> <Nemokosch> and that's just one random (extreme) example

[02:16] <discord-raku-bot> <el gatito (** advocate)> it is even more underrated than smalltalk

[02:16] <discord-raku-bot> <Nemokosch> Self is at least prototypal while Smalltalk is just your usual class-based OO language without power

[02:18] <discord-raku-bot> <Nemokosch> My point is also that Raku could be seen as an interesting experiment as well, if we decide to ignore the real-world motives

[02:19] <discord-raku-bot> <Nemokosch> say you want to learn about language design, parsers, compilation, etc.

[02:20] <discord-raku-bot> <Nemokosch> and all this in a fairly coherent context, in the footsteps of gifted people

[02:20] <discord-raku-bot> <el gatito (** advocate)> smalltalk is radical compared to other oo langs like java and c#

[02:22] <discord-raku-bot> <Nemokosch> sure but I didn't buy into the vision

[02:22] <leont> Self may be dead, but Javascript's semantics are highly based on it. It lives on in a way

[02:22] <discord-raku-bot> <Nemokosch> and the language is not that powerful unless you are really into this "all interaction happens via message passing" stuff

[02:25] <discord-raku-bot> <Nemokosch> for Raku, well, I could imagine "The language with ambitions" or something similar as a motto

[02:26] <discord-raku-bot> <Nemokosch> the only language I can quickly think of that has this crippling feature mania must be C++

[02:26] <leont> The main problem with C++ is that it doesn't have the syntax to support all those features, so everything ends up cramped

[02:26] <discord-raku-bot> <el gatito (** advocate)> scala?

[02:26] <discord-raku-bot> <Nemokosch> I basically only know the name

[02:27] <discord-raku-bot> <el gatito (** advocate)> "the language with ambitions and weak typing (in 2015 even)"

[02:27] <discord-raku-bot> <Nemokosch> leont: if C++ doesn't have the syntax for it, some of its meta-languages will! xD

[02:28] <discord-raku-bot> <Nemokosch> and it has quite a couple of meta-languages

[02:29] <discord-raku-bot> <Nemokosch> C preprocessor, templates, constexpr stuff...

[02:30] *** Xliff joined
[02:30] <discord-raku-bot> <el gatito (** advocate)> raku be becoming the next C++

[02:30] <discord-raku-bot> <Nemokosch> to be honest, Typescript was mentioned... that can also be a scary language

[02:31] <discord-raku-bot> <Nemokosch> exactly because it's kept from turning into a proper preprocessor sort of language, while it also has no runtime

[02:32] *** ispyhumanfly joined
[02:32] <discord-raku-bot> <Nemokosch> so basically you can do all the crazy shit you could do with C++ templates and a bit more - however, you need to write essays for it

[02:33] <discord-raku-bot> <Nemokosch> basically Typescript allows literal values to be types

[02:34] <discord-raku-bot> <Nemokosch> and on this basis, you can start hacking the type system as compile-time values - as long as you turn the obtained values into types again üòÑ

[02:36] *** ispyhumanfly left
[02:36] <discord-raku-bot> <Nemokosch> weak typing... I think Raku has a reasonable system, no need to jump up to the bandwagon

[02:37] <discord-raku-bot> <Nemokosch> ngl I even feel safer when I know what my values are treated as (as opposed to what they really are)

[02:38] <guifa_> Anton: I just got it to respect language tag numbering systems too!

[02:39] <guifa_> format-number 0.987654, :language<en-u-nu-limb>, :type<permille>; #¬†·•è·•é·•ç.·•å·•ã·•ä‚Ä∞

[02:40] * guifa_ doesn't expect anyone to actually use that, but it's technically part of the standard (probably more for, e.g., Arabic script users to give preference to Eastern or Western style numerals)

[02:41] *** rf joined
[02:42] <discord-raku-bot> <Anton Antonov> @guifa Looks interesting. I have to say, I have not heard that before. (Should know about it for my numeric word forms parsers.)

[02:44] <guifa_> the language codes can give quite a bit of information.  When I get back to date formatting, the language code can even encode that!

[02:44] <guifa_> for instance, the language coed on my system is 

[02:44] <guifa_> en-US-u-ca-gregory-fw-sun-ms-ussystem

[02:45] <guifa_> (gregorian calendar, first day of the week is Sunday, and measurements prefer US customary)

[02:47] <rf> .tell tonyo I found an interesting bug in Fez, submitted an issue

[02:47] <tellable6> rf, I'll pass your message to tonyo

[02:50] *** ispyhumanfly joined
[02:58] <discord-raku-bot> <Anton Antonov> @guifa Is that language information accessible in Raku? Using your packages?

[03:02] <guifa_> yes.  Take a look at Intl::LanguageTag

[03:02] <guifa_> there's a whole international ecosystem

[03:02] *** squashable6 left
[03:03] <guifa_> Intl::CLDR is the gigantic compendium of information

[03:03] <guifa_> and right now I'm slowly rewriting all of the Intl::Format::* modules

[03:03] *** ispyhumanfly left
[03:03] *** rf left
[03:04] *** squashable6 joined
[03:07] * guifa_ is afk

[03:08] *** razetime joined
[03:14] *** ispyhumanfly joined
[03:39] <discord-raku-bot> <Anton Antonov> @guifa Thank you! Will do.

[03:53] *** razetime left
[04:02] *** pingu joined
[04:12] *** freeside left
[04:21] *** vrurg_ joined
[04:21] *** vrurg left
[04:26] *** derpydoo left
[04:26] *** freeside joined
[04:38] *** razetime joined
[05:11] *** [Coke] left
[05:19] *** [Coke] joined
[05:36] *** jmcgnh left
[05:47] *** jmcgnh joined
[05:55] *** freeside left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:53] *** Xliff_ joined
[06:55] *** Xliff left
[07:11] *** Sgeo_ left
[07:54] *** freeside joined
[08:04] *** razetime left
[08:16] *** razetime joined
[08:25] *** freeside left
[08:49] *** razetime left
[08:53] *** jmcgnh left
[09:00] *** jmcgnh joined
[09:03] *** Manifest0 joined
[09:07] *** jpn joined
[09:10] *** dakkar joined
[09:42] *** freeside joined
[09:45] *** pingu left
[09:45] *** sena_kun joined
[09:50] <Geth> ¬¶ ecosystem/main: 8cafd30d90 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[09:50] <Geth> ¬¶ ecosystem/main: Remove Sustenance (#614)

[09:50] <Geth> ¬¶ ecosystem/main: 

[09:50] <Geth> ¬¶ ecosystem/main: Because it is providing almost daily updates without ever increasing

[09:50] <Geth> ¬¶ ecosystem/main: the version number, causing false positives in updates and etc.

[09:50] <Geth> ¬¶ ecosystem/main: 

[09:50] <Geth> ¬¶ ecosystem/main: The REA contains an older version of Sustenance, so people will still

[09:50] <Geth> ¬¶ ecosystem/main: be able to install it.

[09:50] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/8cafd30d90

[10:09] *** ab5tract joined
[10:27] *** sena_kun left
[10:43] *** Oshawott joined
[10:44] *** archenoth left
[11:01] *** peder left
[11:01] *** freeside left
[11:02] *** peder joined
[11:03] *** frost left
[11:12] *** sena_kun joined
[11:15] *** jpn left
[11:16] *** frost joined
[11:16] *** ab5tract left
[11:29] *** ab5tract joined
[11:42] *** ab5tract left
[11:53] *** ab5tract joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:05] *** TieUpYourCamel joined
[12:07] *** thundergnat joined
[12:09] <thundergnat> >[Coke]: "What sort of Unicode properties would folks want 'uni -v <char>' to report out on?" It may be useful to also include the "long name" of the Unicode property. I know them pretty well now, but when I first started I constantly needed to look up what the abbreviations stood for.

[12:09] <tellable6> 2023-02-14T14:30:30Z #raku <[Coke]> thundergnat - Yup, that's very close to what I need.

[12:09] <thundergnat> m: https://gist.github.com/thundergnat/da95afab6b5656b895bc6f6e4854c8a7

[12:09] <camelia> rakudo-moar 0040f8131: OUTPUT: ¬´(Lu Ll Ll Ll Po Pi So Zs Po Pd Pe No)‚ê§((Letter, uppercase) (Letter, lowercase) (Letter, lowercase) (Letter, lowercase) (Punctuation, other) (Punctuation, initial quote) (Symbol, other) (Separator, space) (Punctuation, other) (Punctuation, dash) (Pun‚Ä¶¬ª

[12:10] *** thundergnat left
[12:13] *** frost left
[13:13] *** linkable6 left
[13:13] *** evalable6 left
[13:14] *** linkable6 joined
[13:15] *** evalable6 joined
[13:22] *** merpaderp left
[13:24] <tbrowder> ref CucumisSextus: should it not be renamed and made a group project? my initial thought on the subject was to make the Cucumber ppl aware of Raku interest in participating

[13:25] <lizmat> all for making it a group projecty

[13:28] *** saint- left
[13:37] <discord-raku-bot> <Anton Antonov> @tbrowder I think there should be a more general project named, say, ‚ÄúTest::Workflows‚Äù or ‚ÄúDSL::English::TestWorkflows‚Äù that facilitates the creation and utilization of natural language test specifications. Then the functionalities of ‚ÄúCucumisSextus‚Äù can be ‚Äújust‚Äù actions under the ‚ÄúGherkin‚Äù sub-namespace. (With further concrete language localizations, like, Raku, Ruby, Java, etc.)

[13:58] *** jpn joined
[14:09] *** QhpAptyj9hj0RQwM joined
[14:18] *** merp joined
[14:33] *** jgaz joined
[14:52] <tonyo> ingy: didn't you have a project in the same vein ^?

[14:52] <tellable6> 2023-02-15T02:47:52Z #raku <rf> tonyo I found an interesting bug in Fez, submitted an issue

[14:53] <tonyo> .tell rf let's keep the bugs uninteresting and easy to fix 

[14:53] <tellable6> tonyo, I'll pass your message to rf

[14:53] <tonyo> .tell rf also, i will take a look shortly (currently vacationing and bike packing until end of feb)

[14:53] <tellable6> tonyo, I'll pass your message to rf

[14:55] <[Coke]> Not a fan of the name of the cucumber projectin light of the big rename.

[14:59] <discord-raku-bot> <Nemokosch> what does that even mean?

[14:59] <discord-raku-bot> <Anton Antonov> @Coke Duly noted.

[15:00] <[Coke]> Looks like it's maybe a latin reference to Cucumber6 - which made more sense when we were Perl 6. Now it's just esoteric.

[15:01] <[Coke]> It's already a raku project, we can just call it Cucumber

[15:02] <discord-raku-bot> <Anton Antonov> @Coke Sounds good. I still consider having a module "Gherkin" that is used in combination with a module "Cucumber".

[15:04] <discord-raku-bot> <Nemokosch> well makes sense

[15:04] <discord-raku-bot> <Nemokosch> there is this love-hate situation with the number 6 at the moment

[15:09] <discord-raku-bot> <Anton Antonov> LOL

[15:14] *** Xliff_ left
[15:15] *** razetime joined
[15:31] *** freeside joined
[15:36] *** freeside left
[15:40] <[Coke]> .tell thundergnat - I've been printing [Lu], e.g. in the output of 'uni -s A' - I can print out the expanded text you provide there with 'uni -v A'

[15:40] <tellable6> [Coke], I'll pass your message to thundergnat

[15:41] <[Coke]> IWBNI if I could get raku to give me that info instead of managing my own table, but that's easy enough to include.

[15:43] *** freeside joined
[15:44] *** Sgeo joined
[15:47] <sjn> who's taking care of vim-raku these days?

[15:47] <sjn> zostay? ^

[15:47] *** freeside left
[15:50] <sjn> hm. I might have write access.... 

[15:54] <tonyo> sjn: updates coming?

[15:54] *** rf joined
[15:55] <rf> tonyo: Does fez bundle the .git directory when uploading?

[15:55] <tellable6> 2023-02-14T13:25:56Z #raku <tonyo> rf: are you parsing in C ?

[15:55] <tellable6> 2023-02-15T14:53:12Z #raku <tonyo> rf let's keep the bugs uninteresting and easy to fix 

[15:55] <tellable6> 2023-02-15T14:53:56Z #raku <tonyo> rf also, i will take a look shortly (currently vacationing and bike packing until end of feb)

[15:55] <tonyo> .tell rf the test fixes you mentioned are up

[15:55] <tellable6> tonyo, I'll pass your message to rf

[15:55] *** QhpAptyj9hj0RQwM left
[15:55] <tonyo> it shouldn't but it might

[15:56] <rf> Hmm. I need to source a submodule in my project, maybe I'll just have to do some wonky stuff

[15:57] <tonyo> do you mean include it in the dist?

[15:57] <rf> Yeah

[15:57] <tonyo> can probably do that with a command

[15:58] <tonyo> is it in your gitignore or anything?

[15:58] <rf> Yeah I'm gonna see if I can force CMake to do it

[16:03] <tonyo> rf: it's possible to provide your own tar.gz to the fez upload with the `--file` flag

[16:05] <jdv> [Coke]: thanks!

[16:06] <rf> tonyo: I found a really nice naive way to do it, no worries :D

[16:09] <tonyo> just cloning them into the repo?

[16:21] <zostay> I'm acting as project manager on vim-raku, but I don't do much raku anymore and I am probably not doing a very good job. If someone wants to take it over, I'd be willing to pass control of it over.

[16:21] *** freeside joined
[16:22] <patrickb> zostay: Addopting into community-modules might be a good fit.

[16:26] *** freeside left
[16:46] *** xinming left
[16:48] *** xinming joined
[16:48] <rf> tonyo: Basically.

[16:48] <rf> It's only one sub-module and CMake supports it so w/e

[16:52] *** freeside joined
[16:56] *** freeside left
[16:59] *** freeside joined
[16:59] *** xinming left
[17:00] *** xinming joined
[17:03] *** freeside left
[17:06] *** freeside joined
[17:10] *** freeside left
[17:15] *** freeside joined
[17:20] *** freeside left
[17:25] *** razetime left
[17:37] *** freeside joined
[17:37] *** dakkar left
[17:43] *** freeside left
[17:48] <sjn> tonyo: I've just mulled about applying some of the pull-requests, that's all

[18:00] *** reportable6 left
[18:01] *** freeside joined
[18:01] *** reportable6 joined
[18:02] *** sena_kun left
[18:05] *** freeside left
[18:16] *** ab5tract left
[18:30] *** ab5tract joined
[18:37] *** sena_kun joined
[18:38] *** derpydoo joined
[18:50] *** freeside joined
[18:57] *** freeside left
[19:18] *** MoC joined
[19:26] *** jpn left
[19:30] *** ab5tract left
[19:30] *** jpn joined
[19:35] *** jpn left
[19:35] <discord-raku-bot> <Nahita> if I have a .rakumod file for common use, what can I do so that use Module; from anywhere uses it

[19:36] <discord-raku-bot> <Nahita> tried moving the file to some places where it reports it couldn't find it, it still didn't find it

[19:38] <tonyo> you can add `RAKULIB=<path to directory containing lib/Module.rakumod>` or, better, turn it into a full dist and install it to the system with `zef install .`

[19:41] <discord-raku-bot> <Nahita> thanks why didn't moving the file to one of the places it reports it couldn't find it in work

[19:42] <discord-raku-bot> <Nahita> and the minimum it takes to make it a "full dist" is an accompanying META6.json file?

[19:43] <[Coke]> I think it's RAKULIB=<path to directory containing Module.rakumod>

[19:43] <[Coke]> that is, you don't get a free 'lib' in their.

[19:43] <[Coke]> gah. "in there"

[19:43] <discord-raku-bot> <Nahita> what would "zef install ." do that i can do manually

[19:48] <[Coke]> If you don't want to use zef, then it's not worth duplicating what it's doing, and I'd recommend picking a common install path and then always using RAKULIB or -I on the command line

[19:50] <[Coke]> if you can show an example of what didn't work, that'd be helpful. (the command line, a directory listing of the path in question...)

[19:50] <discord-raku-bot> <Anton Antonov> Ha! I never asked myself (and others) that question!

[19:51] <[Coke]> sorry, not "common install" path since it's not really installing at that point, but just a common folder.

[19:51] <discord-raku-bot> <Nahita> re: If you don't want to use zef, then it's not worth duplicating what it's doing i was trying to understand what it was doing

[19:52] <rf> zef does a lot, what specifically?

[19:52] <discord-raku-bot> <Nahita> re: example of what didn't work i have a single Module.rakumod file, then i do use Module in an arbitrary place. then it reports it couldn't find it, and says where it looked or something, then i move this file to one of those places, use again, it doesn't work still

[19:53] *** ab5tract joined
[19:53] <discord-raku-bot> <Nahita> i do this in Perl, it reports where it looked (@INC), then i move one of such places, it works. i do this in Python, i put it in a place in sys.path, it works.

[19:54] <[Coke]> Yes, that should work in raku as well, I do it at $dayjob all the time.

[19:54] <[Coke]> If you can provide a gist showing what you're running, and a directory listing, that will help us figure out why it's not working for you

[19:56] <[Coke]> if you're trying to just move it into one of the system folders, that isn't going to work.

[19:57] <[Coke]> if you have a "raku -I/home/coke/modules -e 'use myModule'", and a /home/coke/modules/myModules.rakumod, that should work.

[19:57] <[Coke]> "isn't going to" -> "probably isn't going go"

[19:58] <discord-raku-bot> <Nahita> yes that's what i am doing, moving into those system folders; why doesn't it work, was one of my questions

[19:59] <discord-raku-bot> <Anton Antonov> @Coke Does your $day-job involve Raku explicitly, or you are sneaking it in?

[19:59] <discord-raku-bot> <Nemokosch> I also thought it would work but it doesn't

[20:00] <[Coke]> more the latter; I use it where I can, make sure legal team's on board, etc.

[20:00] <[Coke]> I believe there's a compunit registry that is updated when zef does the install

[20:00] <discord-raku-bot> <Nemokosch> Actually, the content of named folders is some absolute obfuscated mess, lol

[20:00] *** freeside joined
[20:00] <[Coke]> so even though you've put a file out there, the index doesn't have it

[20:00] <discord-raku-bot> <Anton Antonov> @Coke Good to know!

[20:01] <[Coke]> and what nemokosch said - if you had installed anything with zef, you'd see that (I think) it's not a direct correlation of pre-installed file names to the installed area.

[20:03] <discord-raku-bot> <Nemokosch> I mean it's okay that zef doesn't do something obvious - but the obvious thing could work regardless.

[20:03] <discord-raku-bot> <Nemokosch> In fact, it does work if you do it the other way around, i.e add your path to the lookup

[20:04] *** freeside left
[20:05] *** xinming left
[20:06] <tonyo> nahita: moving it to those sites is probably skipping precomp

[20:06] <tellable6> tonyo, I'll pass your message to Nahita

[20:09] *** xinming joined
[20:14] <discord-raku-bot> <Nemokosch> I'd like to think that I've gotten pretty good at explaining how a whole string of Raku behaviors make sense in some way but the situation around modules seems to be a bottomless pit

[20:23] <discord-raku-bot> <Nahita> thanks tonyo and [Coke]

[20:24] <tonyo> there's a lot of intricacy in making all of the precomp/modules work together so that when you `use Something` it just kind of works

[20:26] <discord-raku-bot> <Nemokosch> there's just always more work than time and actual motivation but this field might need the most help

[20:31] *** ispyhumanfly left
[20:32] *** ispyhumanfly joined
[20:34] <tonyo> in which way?

[20:36] *** ispyhumanfly left
[20:38] *** codesections joined
[20:38] *** ispyhumanfly joined
[20:38] <ugexe> just copying the files somewhere and linking RAKULIB (i.e. not installing) means the repository chain works different (since its highest version from first repo - installable repos contain multiple modules but non-installed modules use a single distribution per repo). it also means it might not work the same on e.g. case sensitive file system vs case insensitive file system. it also means things like

[20:38] <ugexe> unicode in the names might not work on various systems

[20:38] *** swaggboi left
[20:39] *** freeside joined
[20:39] <ugexe> its inherently complex. make easy things easy and hard things possible doesn't imply making hard things easy

[20:41] <ugexe> https://github.com/ugexe/Raku-CompUnit--Repository--Lib -- heres an approximate implementation of something closer to perl where you could just copy the files over, so its not like the possibility hasn't been considered

[20:42] *** ispyhumanfly left
[20:43] *** freeside left
[20:43] *** ispyhumanfly joined
[20:47] <ugexe> https://docs.raku.org/language/compilation#Why_change?

[20:49] *** ispyhumanfly left
[20:50] *** ispyhumanfly joined
[20:53] *** pingu joined
[20:54] <discord-raku-bot> <Nemokosch> where does creating something that represents a module and a compunit (i.e a .rakumod file with one sole module in it), and making it available to Raku scripts, fall on the easy-hard scale?

[20:56] *** ispyhumanfly left
[20:57] *** ispyhumanfly joined
[20:57] <tonyo> more difficult than the way that is phrased makes it sound

[20:59] <ugexe> $ raku -e 'require "{$*CWD}/lib/Zef/Utils/FileSystem.rakumod" qw<&list-paths>; say list-paths($*CWD).head'

[20:59] <ugexe> "/Users/nlogan/repos/zef/META6.json".IO

[20:59] <discord-raku-bot> <Nemokosch> and the fact that it's banally simply achieved in the languages in the comparison

[20:59] <ugexe> $ raku -Ilib -e 'use Zef::Utils::FileSystem; say list-paths($*CWD).head'

[20:59] <ugexe> "/Users/nlogan/repos/zef/META6.json".IO

[20:59] <ugexe> so what exactly is difficult about those?

[21:00] <discord-raku-bot> <Nemokosch> knowing the path to the file

[21:00] <ugexe> and what languages solve all the issues listed in the Why change? link

[21:01] *** swaggboi joined
[21:01] <ugexe> how is knowing the path to the file an issue? you have to know where you want to copy it to begin with

[21:02] <tonyo> this is ignoring how awful other ecosystems are and package managers.. it's very easy in go to add a module but it's not easy to do this.  python? same headache but different

[21:02] <ugexe> if you know a language where you can copy an arbitrary file to an arbitrary location and import it using some name i'd be interested to know about it

[21:02] <ugexe> but afaik you would need to know at least one location (probably a library directory)

[21:03] *** ispyhumanfly left
[21:03] <ugexe> and you have to know the name

[21:03] <ugexe> so, as in my second example, you combine the library path (which must be known) and the name (which must be known) and you know the location

[21:04] <discord-raku-bot> <Nemokosch> the funny thing was rather that you are given paths at every failed module lookup - but that paths don't seem to mean a thing in practice, they aren't looked up in the sense a RAKULIB entry is

[21:04] *** ispyhumanfly joined
[21:04] <ugexe> RAKULIB=site

[21:04] <ugexe> what do you think that does?

[21:04] <ugexe> RAKULIB doesn't imply the repository type

[21:05] <ugexe> you seem to want the lowest common denominator of behavior

[21:05] *** freeside joined
[21:05] <ugexe> at the expense of everything else that has been listed

[21:05] <discord-raku-bot> <Nemokosch> well, one clear behavior wouldn't hurt

[21:06] <ugexe> how would you know?

[21:06] <discord-raku-bot> <Nemokosch> exactly

[21:06] <discord-raku-bot> <Nemokosch> definitely not by using it

[21:07] <ugexe> i mean how would you actually know. you personally

[21:07] <ugexe> you claim it wouldn't hurt

[21:07] <ugexe> but you also claim to be naive to most of it

[21:10] <discord-raku-bot> <Nemokosch> If there is something I claim, is that the current situation is a mixture of highly incompatible behaviors, and one might conclude that sticking to one - even at the expense of "easy things easy", in some arbitrary interpretation - would do, well, more harm than good, most probably

[21:10] <discord-raku-bot> <Nemokosch> more good than harm*, lol

[21:10] <discord-raku-bot> <Nemokosch> the Freudian slip...

[21:11] <tonyo> no one said anything about making `use Something` an easy task

[21:12] <discord-raku-bot> <Nemokosch> well, an arbitrary subset of it (use lib and then use) is made seem simple

[21:13] <ugexe> I mean I can claim the moon is made of green cheese, and i'd be wrong

[21:13] <ugexe> "I dont know about this subsystem, but I can confidently say it would be better if it accommodated my mental model"

[21:14] *** freeside left
[21:14] <ugexe> the world is flat is pretty simple too

[21:14] <discord-raku-bot> <Nemokosch> No. I can confidently say that from the user point of view, it stacks surprise on top of surprise, by the rules it gives away about itself via the interface

[21:15] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2023/02/15/yes-but-dont/

[21:16] <ugexe> Well I guess its a shame you weren't around to design everything

[21:17] <discord-raku-bot> <Nemokosch> Or at least to witness if it was a definite design paradigm to do everything differently from established practices /s

[21:17] <ugexe> I mean we need language designers with confidence

[21:17] <ugexe> and yet you haven't address all the stuff it solves

[21:17] <ugexe> a common theme i've noticed

[21:17] *** freeside joined
[21:18] <ugexe> its like you can't comprehend that there are problems you aren't facing

[21:18] <discord-raku-bot> <Nemokosch> I'm literally saying that the whole "use lib" hack could go for all I care

[21:18] <discord-raku-bot> <Nemokosch> that doesn't account for the problems "it solves", does it

[21:18] *** jpn joined
[21:19] <ugexe> I'm so confused at what you think established practices are now that I'm not sure what you actually believe

[21:20] <discord-raku-bot> <Nemokosch> perhaps because you are mashing two things together in your head

[21:21] <ugexe> I don't think so

[21:21] <discord-raku-bot> <Nemokosch> yes, and you could claim the moon is made of green cheese

[21:22] *** freeside left
[21:22] <ugexe> ok, the SME is the confused one here not you

[21:23] <tonyo> nemo, i think you're missing the point ugexe is making.  making an arbitrary just dump files into a folder that can be `use Something` from anywhere is not as easy as it sounds.  there's other things not considered like how would `supercedes` work in that context?

[21:23] *** jpn left
[21:24] <discord-raku-bot> <Nemokosch> That's a fair point actually

[21:24] <discord-raku-bot> <Nemokosch> Does supercedes actually work?

[21:24] <ugexe> i mean i posted an entire repo of code that, if copied into rakudo, would do exactly what you presumably keep talking about

[21:27] <ugexe> you've just asserted that i'm confused

[21:31] <discord-raku-bot> <Nemokosch> by the way, how many times does something need to happen to become a "common theme"?

[21:32] <phogg> Five percent of the time.

[21:33] <ugexe> do i need a license to use the term common theme from you?

[21:34] <tonyo> this issue does come up a lot

[21:35] <tonyo> usually stemming from not knowing how a module is actually loading or the complexity involved with dependency resolution etc that _needs_ to happen in order for things to just work

[21:38] <tonyo> and by a lot i mean more than 5%

[21:44] <discord-raku-bot> <Nemokosch> On one hand, it doesn't hurt knowing what somebody's words mean, on the other hand, I wanted to see if I can use this phrase for the mindset I've seen with library-related design

[21:48] <tonyo> it's a common theme with an underlying problem, if you wanted to tackle documenting more explicitly the complexities so it can just be linked to; no one would complain

[21:48] <discord-raku-bot> <Nemokosch> Personally I don't find this module resolution situation "issue worthy", it's just unfortunate that the same tools set up an expectation with the -I flag and use lib and all, and then it gets ripped apart

[21:49] <tonyo> there's no issue with using the -I flag globally if you don't mind writing `raku -I$HOME/dev/my-own-module-store/lib ...` every time you want to run something and then shoving everything in `$HOME/dev/my-own-module-store/lib/....`

[21:50] <discord-raku-bot> <Nemokosch> However, coming across this shortly after the dependency resolution situation, which I'm again either completely misunderstanding or it really is grotesque... well, that starts to set up a "common theme"

[21:51] <discord-raku-bot> <Nemokosch> I'd hope that if the former is the case, I could have understood it a long time ago, had I gotten any sort of guidance but bantering

[21:54] <tonyo> not sure that's helpful

[21:56] <tonyo> dependency resolution is very difficult and a well written about subject.  most ecosystems do it in a very dumb way, raku doesn't.  grab "XYZ", "XYZ" needs "ABC", "GHI", grab "ABC", "GHI", repeat and 20 minutes later you find out that there's no module to resolve or the version conflicts between two modules and the process fails

[21:57] <tonyo> raku allows you to put 1.0.0 of ABC for XYZ and version 0.1.0 for something else 30 modules down in the resolver

[21:57] <tonyo> and then raku internals also need to figure that out, it's really not cut and dry

[21:57] <rf> Yeah I find that the Raku dependecy resolving is top tier

[21:59] <tonyo> the same is true of the other side of that, package managers have a lot of issues around it.  even ones that have been around for a long time (apt?)

[22:00] <tonyo> haskell has the best i've seen but it's so pedantic as to be annoyingly useless

[22:01] <moritz> if it's useless, it can't be the best, no? :-)

[22:01] <discord-raku-bot> <Nemokosch> Tonyo: yes, this makes sense, and it's clearly a good thing

[22:03] <discord-raku-bot> <Nemokosch> What I cannot wrap my head around, though, is that units of dependecies are modules, even though they cannot even provide all the metadata needed to pin them; not at module resolution time at least

[22:03] <discord-raku-bot> <Nemokosch> Because that metadata comes on a per-dist basis

[22:03] <discord-raku-bot> <Nemokosch> *dependency resolution time, sorry

[22:05] <gfldex> moritz: uless it's art.

[22:10] <tonyo> moritz: technically correct is the best kind : )

[22:11] <tonyo> they can, they just don't yet and there is a PR that ugexe and (i forget who) are reviewing

[22:14] <discord-raku-bot> <Nemokosch> That's definitely a resolution (of the issue, that is) if modules learn to "stand for themselves"

[22:14] <discord-raku-bot> <Nemokosch> That would also mean that they can have their own version within a dist, though, wouldn't it?

[22:18] *** squashable6 left
[22:18] * [Coke] hurls https://github.com/coke/raku-uni#-v-verbose-single-character

[22:19] *** MoC left
[22:20] *** squashable6 joined
[22:23] *** freeside joined
[22:29] *** freeside left
[22:35] <discord-raku-bot> <Nemokosch> meaning, v2023.02 seems good to go?

[22:46] *** jpn joined
[22:46] <[Coke]> .tell thundergnat https://github.com/coke/raku-uni#-v-verbose-single-character

[22:46] <tellable6> [Coke], I'll pass your message to thundergnat

[22:46] <[Coke]> (includes the expanded items he mentioned)

[22:51] *** derpydoo left
[22:56] *** thundergnat joined
[22:56] <thundergnat> [Coke] üëç

[22:57] <tellable6> 2023-02-15T15:40:56Z #raku <[Coke]> thundergnat - I've been printing [Lu], e.g. in the output of 'uni -s A' - I can print out the expanded text you provide there with 'uni -v A'

[22:57] <tellable6> 2023-02-15T22:46:37Z #raku <[Coke]> thundergnat https://github.com/coke/raku-uni#-v-verbose-single-character

[22:57] <[Coke]> uploaded a new version of "uni" that avoids the test failure on recent raku and adds -v

[22:58] <thundergnat> While you are editing things, may want to change the repository description Perl 6 -> Raku.

[23:00] <[Coke]> thundergnat: done, thanks

[23:01] <[Coke]> fez++

[23:23] <guifa_> weekly: https://arstechnica.com/information-technology/2023/02/451-malicious-packages-available-in-pypi-contained-crypto-stealing-malware/?comments=1&comments-page=1  <-- speaking of modules ha

[23:23] <notable6> guifa_, Noted! (weekly)

[23:33] *** codesections left
[23:43] *** thundergnat left
[23:47] *** freeside joined
[23:51] *** freeside left
[23:53] <tbrowder> my 2 cents but if ppl would just create modules for personal use as if they would be published (and use App::Mi6 to create them), then use zef to install them locally, a lot of the "problems" using modules would disappear.

[23:56] <tbrowder> ugexe and tonyo and others have put in immense energy, talent, and time to give us a great module system that just "works" if you play by the rules.

