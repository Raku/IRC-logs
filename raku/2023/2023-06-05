[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:12] <[Coke]> xliff: missing closing ) near arbitrary list ?

[00:12] <tellable6> [Coke], I'll pass your message to Xliff

[00:35] *** euandreh left
[00:37] *** euandreh joined
[01:03] *** xinming left
[01:05] *** xinming joined
[01:45] *** xinming left
[01:47] *** xinming joined
[02:11] *** guifa joined
[02:11] <guifa> o/

[02:11] <tellable6> 2023-06-04T13:39:10Z #raku-dev <finanalyst> guifa codesections suggested I contact you about internationalisations. 

[02:12] <guifa> .tell finanalyst yeah, I'm actually currently doing a ground-up rewrite of my port of Fluent which will make stuff crazy easy to do

[02:12] <tellable6> guifa, I'll pass your message to finanalyst

[02:40] *** teatwo joined
[02:44] *** tea3po left
[02:53] <tonyo> uzl[m]: merged, ty++

[03:12] *** teatwo left
[03:13] *** teatwo joined
[04:11] <Voldenet> SmokeMachine: Yes, visit instead of multiple match methods should work, I'm not a fan of find-nodes because it always produces whole collection and I think that Seq returned from `gather visit({ … })` is going to be more flexible

[04:13] *** evalable6 left
[04:13] *** linkable6 left
[04:14] *** evalable6 joined
[04:15] *** linkable6 joined
[05:15] *** tellable6 left
[05:15] *** reportable6 left
[05:15] *** quotable6 left
[05:15] *** benchable6 left
[05:15] *** nativecallable6 left
[05:15] *** bisectable6 left
[05:15] *** coverable6 left
[05:15] *** releasable6 left
[05:15] *** committable6 left
[05:15] *** bloatable6 left
[05:15] *** unicodable6 left
[05:15] *** notable6 left
[05:15] *** greppable6 left
[05:15] *** squashable6 left
[05:15] *** sourceable6 left
[05:15] *** linkable6 left
[05:15] *** shareable6 left
[05:15] *** statisfiable6 left
[05:15] *** evalable6 left
[05:15] <leont> Good *

[05:15] *** squashable6 joined
[05:16] *** statisfiable6 joined
[05:16] *** quotable6 joined
[05:16] *** committable6 joined
[05:16] *** coverable6 joined
[05:16] *** benchable6 joined
[05:16] *** reportable6 joined
[05:16] *** releasable6 joined
[05:16] *** tellable6 joined
[05:16] *** bloatable6 joined
[05:16] *** bisectable6 joined
[05:17] *** sourceable6 joined
[05:17] *** notable6 joined
[05:17] *** linkable6 joined
[05:17] *** nativecallable6 joined
[05:17] *** shareable6 joined
[05:18] *** evalable6 joined
[05:18] *** unicodable6 joined
[05:18] *** greppable6 joined
[05:19] *** derpydoo left
[05:39] *** derpydoo joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:26] *** xinming left
[06:28] *** xinming joined
[07:20] *** abraxxa joined
[07:21] *** jpn joined
[07:24] *** arch left
[07:25] *** arch joined
[07:26] *** jpn left
[07:40] *** sena_kun joined
[07:48] *** Sgeo left
[07:52] *** dakkar joined
[08:06] *** japhb joined
[08:06] *** codesections joined
[08:11] <discord-raku-bot> <librasteve> weekly: https://rakujourney.wordpress.com/2023/06/05/cascading-accessors/

[08:16] <gfldex> librasteve Things that don't got names have a hard time to leak.

[08:16] <gfldex> m: $++ for .?the-win;

[08:16] <camelia> rakudo-moar b76e2bc04: ( no output )

[08:17] <gfldex> Why .[$++] works is a nice rabbit hole tho. :->

[08:39] *** jpn joined
[08:41] <discord-raku-bot> <Nemokosch> what does it mean for it to "work"?

[08:47] *** jargan is now known as jast

[09:04] *** jpn left
[09:05] *** jpn joined
[09:13] <leont> tonyo: I would really like to add fez to repology, but that requires it to expose an API to give me all modules, their versions and a URL to download them (https://repology.org/docs/requirements). Could you add such a target to the fez server?

[09:15] <leont> Current index.json gives all versions instead of latest, that's a bit unfortunate for their purposes I believe

[09:18] <Geth> ¦ planet.raku.org: 7b81fd13da | (Elizabeth Mattijsen)++ | perlanetrc

[09:18] <Geth> ¦ planet.raku.org: Follow rename of Steve Roe's website

[09:18] <Geth> ¦ planet.raku.org: review: https://github.com/Raku/planet.raku.org/commit/7b81fd13da

[09:23] *** buffet left
[09:24] <leont> I guess I'd also need a way to fetch the META6.json for any package.

[09:25] *** buffet joined
[09:43] <discord-raku-bot> <librasteve> gfldx: thanks for the feedback ... sadly I do not know what you mean

[09:44] <discord-raku-bot> <librasteve> i am a bear of small brain

[09:57] *** lichtkind joined
[09:57] <SmokeMachine> Voldenet: Yes, I plan on using visit-children for that, but anyway I'll need a few multi match()es for comparing things that are not nodes, RakuAST::IntLiteral's value, for example, right?

[10:16] *** zara joined
[10:23] *** zara left
[10:28] *** derpydoo left
[10:31] *** zara joined
[10:59] <lizmat> PSA: there will not be a Rakudo Weekly today

[11:00] *** dakkar left
[11:05] *** xinming left
[11:07] *** xinming joined
[11:11] <Voldenet> I hate accidentally pulling master instead of main, creating a build out of it just to realise that it's 6 months old (`Д´)ﾉ︵ ┻━┻ 

[11:31] *** codesections left
[11:32] <Voldenet> SmokeMachine: true, but complexity can be reduced to handling significantly fewer cases, since things like ArgList get visited

[11:33] <SmokeMachine> Voldenet: yes! Sure! I was doing that way mostly for trying if that would work…

[11:34] <SmokeMachine> Voldenet: thank you for the advice! :)

[11:35] <Voldenet> btw, matching on RakuAST::Literal is enough, the subtypes exist only for qast

[11:39] <SmokeMachine> Voldenet: good to know! Thanks!

[11:44] *** xinming left
[11:47] *** xinming joined
[11:48] <lizmat> yeah, and you even don't have to separate values on creation anymore

[11:48] <lizmat> RakuAST::Literal.new(42) would create an IntLiteral, and R::Literal.new("foo") would create a StrLiteral

[11:49] <lizmat> SmokeMachine Voldenet ^^

[11:49] <lizmat> m: use v6.*; say RakuAST.Literal.new(42)

[11:49] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «No such method 'Literal' for invocant of type 'RakuAST'␤  in block <unit> at <tmp> line 1␤␤»

[11:50] <SmokeMachine> lizmat: Also good to know! Thanks!

[11:50] <lizmat> m: use v6.*; say RakuAST::Literal.new(42)

[11:50] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «RakuAST::IntLiteral.new(42)␤»

[11:50] <SmokeMachine> lizmat: have you seen my plan for my next suggestion for rak?

[11:51] <lizmat> yes, I have: please make an issue for that in App::Rak so it doesn't fall through the cracks

[11:52] <SmokeMachine> lizmat: I'm planing on doing the real suggestion once my PoC is more robust and I'm sure what I want is possible...

[11:53] <lizmat> ++SmokeMachine 

[12:00] *** reportable6 left
[12:01] <Voldenet> m: use v6.*; say "42".ast

[12:01] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «No such method 'ast' for invocant of type 'Str'.  Did you mean 'AST'?␤  in block <unit> at <tmp> line 1␤␤»

[12:01] <Voldenet> m: use v6.*; say "42".AST

[12:01] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::IntLiteral.new(42)␤  )␤)␤»

[12:02] *** reportable6 joined
[12:03] <SmokeMachine> Voldenet, lizmat: so, for now, the nodes I can think of (I don't know many nodes) would be RakuAST::Literal and for operators (RakuAST::Infix, RakuAST::Prefix, RakuAST::Postfix, etc).. is there a way to handle all the ops in a unified way (as RakuAST::Literal does for all literals)?

[12:04] <SmokeMachine> m: "1 + 2 - 3 * 4 / 5".AST.say

[12:04] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::ApplyInfix.new(␤      left  => RakuAST::ApplyInfix.new(␤        left  => RakuAST::IntLiteral.new(1),␤        infix => RakuAST::Infix.new("+"),␤   …»

[12:06] <SmokeMachine> m: "[+] !(1 + 2)[1..2] ".AST.grep({ .^name.ends-with: "fix" }).say

[12:06] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «===SORRY!===␤No such method 'IMPL-CURRIED' for invocant of type␤'RakuAST::Postcircumfix::ArrayIndex'.  Did you mean 'IMPL-CURRIES'?␤»

[12:08] *** ProperNoun joined
[12:16] <SmokeMachine> m: "[+] !(1 + 2)".AST.map(*.^name).grep({ .ends-with("fix") && !/Apply/}).say

[12:16] <camelia> rakudo-moar 1ab2e3e73: OUTPUT: «(RakuAST::Infix RakuAST::Prefix RakuAST::Infix)␤»

[12:16] *** dakkar joined
[12:19] *** jpn left
[12:26] *** jpn joined
[12:27] *** dakkar left
[12:30] *** jpn left
[12:37] *** squashable6 left
[12:39] *** squashable6 joined
[12:49] <leont> m: use Test; fails-like { fail "HERE" }, X::AdHoc;

[12:49] <camelia> rakudo-moar 9702d82d1: OUTPUT: «# Subtest: did we fails-like X::AdHoc?␤    1..2␤    not ok 1 - expected code to fail but it threw X::AdHoc instead␤    # Failed test 'expected code to fail but it threw X::AdHoc instead'␤    # at SETTING::src/core.c/Mu.pm6 line 1112␤    ok 2…»

[12:49] <leont> That looks very very wrong to me

[12:53] <leont> (and it's used in three dozen spec test files, so it really should be working correctly)

[12:55] *** codesections joined
[13:00] *** jpn joined
[13:05] *** jpn left
[13:11] *** ProperN[out] joined
[13:13] *** ProperNoun left
[13:26] <leont> (of course, it turns out I completely misunderstood fail)

[13:39] *** jpn joined
[14:13] *** codesections left
[14:15] *** jpn left
[14:17] *** jpn joined
[14:21] *** tea3po joined
[14:24] *** teatwo left
[14:34] *** euandreh left
[14:34] *** euandreh joined
[14:35] *** tea3po left
[14:36] *** tea3po joined
[14:39] *** tea3po left
[14:39] *** tea3po joined
[14:40] *** tea3po left
[14:40] *** tea3po joined
[14:41] *** Sgeo joined
[14:47] <tbrowder__> hi, i'm trying to use raku code to write a couple of functions described in 'Introduction to Algorithms', third edition, where the authors use a python-like pseudo code to describe them. one thing they use is a set of 1-indexed arrays which i am trying to emulate by unshifting a -1 for each, but i have a bug and am still still debugging.

[14:47] <tbrowder__> however, isn't there a clever way to create such an array in raku?

[14:49] <tbrowder__> i guess i could fake with a class...

[14:50] <tbrowder__> *fake it

[14:51] <tbrowder__> that should work, but not very elegant

[14:53] <tbrowder__> anyone having trouble with google chrome? seems to stall--maybe too much AI

[14:53] <tbrowder__> firefox much better

[14:54] *** abraxxa left
[14:56] *** abraxxa joined
[15:06] *** codesections joined
[15:29] *** vrurg_ joined
[15:32] *** vrurg left
[15:46] *** xinming left
[15:48] *** xinming joined
[15:51] <discord-raku-bot> <librasteve> tbrowder: hi ... can you share the text of the python/pseudo code maybe in a gist and we can take a look?

[16:11] <tonyo> leont: you should be able to get that from the index of 360.zef.pm 

[16:15] *** abraxxa left
[16:34] *** japhb left
[16:39] *** zara left
[16:41] *** dakkar joined
[16:42] *** codesections left
[16:46] *** xinming left
[16:48] *** xinming joined
[17:10] *** dakkar left
[17:26] *** xinming left
[17:28] *** xinming joined
[17:52] *** sena_kun left
[17:53] *** gugod left
[17:55] *** sena_kun joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:03] *** gugod joined
[18:10] *** jpn left
[18:29] <tbrowder__> librasteve: thanks. i think i'll wait a bit till i try some more to check for errors. also, i want to look at augmenting a class or just creating one.

[18:46] *** TieUpYourCamel left
[19:02] *** jpn joined
[19:07] <discord-raku-bot> <librasteve> yeah sure, no problem

[19:13] *** jpn left
[19:14] *** jpn joined
[19:17] *** lichtkind_ joined
[19:19] *** lichtkind left
[20:07] *** jpn left
[20:12] *** RandalSchwartz joined
[20:12] *** RandalSchwartz left
[20:13] *** RandalSchwartz joined
[20:13] *** RandalSchwartz left
[20:26] *** vrurg_ is now known as vrurg

[20:45] *** kst left
[20:46] *** kst joined
[20:52] *** jpn joined
[21:05] *** jpn left
[21:27] <uzl[m]> .tell tonyo I think you forgot to merge it haha. And sure, np!

[21:27] <tellable6> uzl[m], I'll pass your message to tonyo

[21:29] *** v_m_v joined
[21:36] <discord-raku-bot> <Anton Antonov> I have an idea for a "brilliant" new package that allows parsers to be constructed in a Functional Programming (FP) manner. Basically, using parser combinators and transformers. What would be a good name for it? I am aware of similar Perl package named "Parser::Combinators" and Haskell package "Parsec". I prefer to call that new package "FunctionalParsers", but may be there is some suitable namespace to use as a

[21:36] <discord-raku-bot> prefix.

[21:43] <moritz> Parser::Functional?

[21:43] *** v_m_v left
[21:43] <moritz> lots of Parser:: things on metacpan

[21:45] *** lichtkind_ left
[21:54] <discord-raku-bot> <Anton Antonov> Hmm... I only checked raku.land.

[22:09] *** sena_kun left
[22:35] *** euandreh left
[22:35] *** euandreh joined
[22:43] *** euandreh left
[22:43] *** euandreh joined
[22:45] *** deoac left
[22:50] *** lizmat left
[23:01] *** jpn joined
[23:05] *** jpn left
[23:10] *** lizmat joined
[23:15] *** euandreh left
[23:15] *** euandreh joined
