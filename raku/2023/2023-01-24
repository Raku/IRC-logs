[00:00] *** reportable6 left
[00:00] <cfa> https://github.com/rakudo/rakudo/issues/5165

[00:01] <cfa> can probably be retitled and clarified by someone more knowledgeable than me

[00:03] *** reportable6 joined
[00:16] <jaguart> docs show using `submethod BUILD ( :$!x ) { }` to automagically populate private $!x -> is there a variant that binds? Or do I have to `submethod TWEAK (:$x ) { $!x := $x }`

[00:18] *** lichtkind left
[00:21] <discord-raku-bot> <Nemokosch> this is what I'd call a "vrurg question" 🙊

[00:23] <vrurg> jaguart: `has $.foo is build(:bind)` should do it.

[00:23] *** jgaz left
[00:30] <discord-raku-bot> <jaguart> nice - that works if I have no BUILD submethod, but not if I do have a BUILD

[00:31] <jaguart> so no need at all BUILD on a private attribue - :))

[00:52] <jaguart> m:  -> {}.Str.say

[00:52] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «Block object coerced to string (please use .gist or .raku to do that)␤␤  in block <unit> at <tmp> line 1␤»

[00:53] <jaguart> is there any way to test if something can .Str ?

[00:53] <jaguart> m:say -> {}.^can('Str')

[00:53] <evalable6> jaguart, rakudo-moar d52342eb0: OUTPUT: «(Str Str)␤»

[00:54] <jaguart> I mean can .Str without emitting warnings on STDERR :)

[00:58] *** Homer_Simpson left
[00:58] <discord-raku-bot> <Nemokosch> this worked though, no?

[01:01] <discord-raku-bot> <Nemokosch> there is also .?Str, as in "do if you can, return Nil otherwise"

[01:02] <rf> m: say (do if "".Str { 'yes' } else { 'no' });

[01:02] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «no␤»

[01:02] <rf> m: say (do if "".^can("Str") { 'yes' } else { 'no' });

[01:02] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «yes␤»

[01:02] <rf> Forgot the .^can like a dingus

[01:08] <vrurg> jaguart: moreover, avoid using BUILD whatsoever unless you KNOW what you're doing.

[01:13] <jaguart> I can do that!

[01:14] <rf> Is there any way to do introspection on an variable name?

[01:15] <rf> Something like: my $hi = "abc"; $hi.^var-name -> "hi";

[01:15] <jaguart> m: my $a = 4; say $a.VAR.name

[01:15] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «$a␤»

[01:16] <rf> Oh sweet, thanks!

[01:17] <rf> I had the goofy idea to write a CSS library in Raku and use the variable name as class if you don't specify

[01:17] <jaguart> not so good for subs/methods though as their internal .VAR.name may not match their name in the caller

[01:23] <jaguart> in: class Foo { has $.bar = 42 } -> is there any introspection that tells me the Attribute's default value? i.e. the 42?

[01:35] <discord-raku-bot> <Nemokosch> it doesn't make things easier that this is not a "default value" in the same sense has Int $.bar would have the default value of (Int)

[01:38] <discord-raku-bot> <Nemokosch> I think has $.bar = 42 is actually like my $bar = 42 - 42 has no special relevance

[01:39] <discord-raku-bot> <Nemokosch> has $.bar is default(42) would be different

[01:46] <rf> Here's a trick to find the default value :^)

[01:47] <rf> m: class Foo { has $.bar = 42 }; Foo.new.bar.say;

[01:47] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «42␤»

[01:53] <discord-raku-bot> <Nemokosch> 🧠

[01:58] *** linkable6 left
[01:58] *** evalable6 left
[01:59] *** linkable6 joined
[02:01] *** evalable6 joined
[02:02] <jaguart> m: class C { has $.x is rw = 42 }; my $a = C.new; $a.x.say; $a.x = Nil; $a.x.say; my $b = C.new; $b.x.say

[02:02] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «42␤(Any)␤42␤»

[02:02] <jaguart> so it acts as a constructor default

[02:02] <jaguart> the is default(42) is used whrn an Attr is assigned Nil

[02:03] <jaguart> m: class C { has $.x is rw is default(42) }; my $a = C.new; $a.x.say; $a.x = Nil; $a.x.say; my $b = C.new; $b.x.say

[02:03] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «42␤42␤42␤»

[02:17] <rf> It's not a constructor default, it's a fallback

[02:17] <rf> I believe

[02:19] <rf> m: class C { has $.x; method new(:$x = 123) { $!x = $x; } }; say C.new.x; say C.new(x => 3); 

[02:19] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «Cannot look up attributes in a C type object. Did you forget a '.new'?␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:20] <rf> Maybe new has to be BUILD

[02:24] <jaguart> Seems to act as the initial value for the attr when the object is instantiated

[02:24] <jaguart> I would expect if you provided defaults in methods like TWEAK et al that they would apply after this

[02:25] <rf> Makes sense.

[02:27] <jaguart> m: class C { has $.x is rw = 42; submethod TWEAK ( :$x = 123 ) { say $!x; $!x = $x;  } }; C.new.x.say

[02:27] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «42␤123␤»

[02:28] *** razetime joined
[02:34] <jaguart> this works

[02:34] <jaguart> m: class C { method new ( Mu \x ) { say x } };C.new( <b> )

[02:34] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «b␤»

[02:34] <jaguart> m: class C { method new ( Mu \x ) { say x } };C.new( :a<b> )

[02:34] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:34] <jaguart> why does passing a pair in not?

[02:35] <tonyo> it's trying to match a named param

[02:35] <jaguart> new has an ary of 1?

[02:36] <tonyo> it expected two arguments and got one, expected (CLASS, Mu) but got (CLASS, :a) 

[02:37] <jaguart> oh - so ignoring the pair as if it were an optional named arg

[02:37] <tonyo> m: class C {method new (Mu \x=1, *%_) { say x; say %_; } };C.new(:a<b>);

[02:37] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «1␤{a => b}␤»

[02:37] <tonyo> yea

[02:38] <jaguart> how do I get pairs to be accepted? ie a sig that says no-named args?

[02:38] *** ProperNoun joined
[02:39] <tonyo> kind of depends on your use case, are you trying to get a list of pairs?

[02:40] <jaguart> no - just one arg, even if its a pair

[02:42] <tonyo> m: sub a (\x) { dd x; }; a(:hello<world>.Pair)

[02:42] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «:hello("world")␤»

[02:42] <tonyo> or you can do this but it's more difficult to grok imo

[02:42] <tonyo> m: sub a (\x) { dd x; }; a((:hello<world>))

[02:42] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «:hello("world")␤»

[02:43] <tonyo> or, with the class:

[02:43] <tonyo> m: class C {method new (Mu \x) { say x; } };C.new((:a<b>));

[02:43] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «a => b␤»

[02:43] <jaguart> can I not do it on the Signature side? rather than the caller side?

[02:47] <tonyo> this is super ugly and i'm sure there's a better way

[02:47] <tonyo> m: multi sub a(*%x where {.keys == 1}) { a(Pair.new(%x.keys[0], %x{%x.keys[0]})); }; multi sub a(Pair:D \x) { dd x; }; a(:a<b>);

[02:47] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «:a("b")␤»

[02:48] <jaguart> nice - I can do a multi with Pair:D - that works

[02:48] *** dogbert17 left
[02:49] <jaguart> I thought I heard somewhere about ( $x, *% () ) forcing *% to be empty - but cant get that working

[02:52] <jaguart> oops - multi seems to give me a problem because my class is a transparent factory :(

[03:08] *** dogbert17 joined
[03:13] <rf> So how does a method know the difference between a pair and a named arg, does it take in the argument then see if there is a corresponding named arg?

[03:14] <jaguart> meh: had to `multi method new ( Mu \x = Nil, *%opt ) {` and then code if x == Nil and %opt.elems ==1

[03:29] <jaguart> I think that unless you use the extra `()` or Pair.new('x',1) as a caller you can't.

[03:30] <jaguart> It seems that the Capture side of the question is pair-greedy - all the unadorned pairs end up in named.

[03:31] <jaguart> m: Pair.new("hey","ho").Str.raku.say

[03:31] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «"hey\tho"␤»

[03:31] <jaguart> unexpected use of tab?

[03:40] *** razetime left
[03:42] <ugexe> thats just how Pairs were made to stringify apparently

[03:44] <ugexe> it originated with https://github.com/rakudo/rakudo/commit/434bab604591ada845571e658b2b3673fa4a84f3#diff-e472c7e29afeae06a39ad14fe52794bdfee69e78eddacf366e4ee6563661d1b6R12

[03:45] <ugexe> m: my %a = a => 1, b => 2; say %a.Str.raku

[03:45] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «"a\t1\nb\t2"␤»

[03:46] <ugexe> as such i wouldn't call it unexpected

[03:46] <jaguart> oh that makes sense... I was thinking one-pair, but a hash looks better when it's keys are tabbed

[03:49] *** jpn joined
[03:55] *** jpn left
[03:58] *** rf left
[04:09] *** jpn joined
[04:23] *** razetime joined
[04:26] *** razetime left
[04:38] *** jpn left
[04:49] *** jpn joined
[04:59] *** cfa left
[04:59] *** jmcgnh joined
[05:59] *** nativecallable6 left
[05:59] *** releasable6 left
[05:59] *** quotable6 left
[05:59] *** greppable6 left
[05:59] *** linkable6 left
[05:59] *** notable6 left
[05:59] *** unicodable6 left
[05:59] *** squashable6 left
[05:59] *** bloatable6 left
[05:59] *** reportable6 left
[05:59] *** coverable6 left
[05:59] *** shareable6 left
[05:59] *** committable6 left
[05:59] *** tellable6 left
[05:59] *** benchable6 left
[05:59] *** bisectable6 left
[05:59] *** evalable6 left
[05:59] *** sourceable6 left
[05:59] *** statisfiable6 left
[06:00] *** jaguart left
[06:00] *** benchable6 joined
[06:00] *** committable6 joined
[06:00] *** sourceable6 joined
[06:00] *** bisectable6 joined
[06:00] *** coverable6 joined
[06:00] *** linkable6 joined
[06:00] *** evalable6 joined
[06:00] *** releasable6 joined
[06:00] *** jaguart joined
[06:01] *** greppable6 joined
[06:01] *** squashable6 joined
[06:01] *** reportable6 joined
[06:01] *** statisfiable6 joined
[06:01] *** quotable6 joined
[06:01] *** shareable6 joined
[06:02] *** unicodable6 joined
[06:02] *** bloatable6 joined
[06:02] *** notable6 joined
[06:02] *** nativecallable6 joined
[06:02] *** tellable6 joined
[06:09] <jaguart> umm: I inspected a sub and got: `methods   : [Capture of returns]` - and spent 10 minutes debugging before discovering that this is not a sentence, but indeed a list of methods on Sub - doh! I thought it was talking to me.

[06:23] *** jmcgnh left
[06:41] *** jmcgnh joined
[07:41] *** bisectable6 left
[07:41] *** squashable6 left
[07:41] *** greppable6 left
[07:41] *** reportable6 left
[07:41] *** bloatable6 left
[07:41] *** sourceable6 left
[07:41] *** tellable6 left
[07:41] *** committable6 left
[07:41] *** releasable6 left
[07:41] *** evalable6 left
[07:41] *** shareable6 left
[07:41] *** nativecallable6 left
[07:41] *** quotable6 left
[07:41] *** notable6 left
[07:41] *** unicodable6 left
[07:41] *** coverable6 left
[07:41] *** linkable6 left
[07:41] *** statisfiable6 left
[07:41] *** greppable6 joined
[07:42] *** evalable6 joined
[07:42] *** tellable6 joined
[07:42] *** shareable6 joined
[07:42] *** linkable6 joined
[07:42] *** squashable6 joined
[07:43] *** statisfiable6 joined
[07:43] *** releasable6 joined
[07:43] *** quotable6 joined
[07:43] *** reportable6 joined
[07:43] *** nativecallable6 joined
[07:44] *** notable6 joined
[07:44] *** committable6 joined
[07:44] *** bisectable6 joined
[07:44] *** bloatable6 joined
[07:44] *** sourceable6 joined
[07:44] *** unicodable6 joined
[07:44] *** coverable6 joined
[07:47] *** jjatria left
[07:49] *** Scotteh left
[07:50] *** Scotteh joined
[08:00] *** jjatria joined
[08:08] *** jpn left
[08:19] *** abraxxa joined
[08:30] *** Sgeo_ joined
[08:32] *** Sgeo left
[09:09] *** dakkar joined
[09:13] *** Geth left
[09:13] *** Geth joined
[09:26] *** lichtkind joined
[10:00] *** Sgeo_ left
[11:00] *** linkable6 left
[11:00] *** evalable6 left
[11:01] *** linkable6 joined
[11:03] *** evalable6 joined
[11:36] *** razetime joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:15] *** jpn joined
[12:45] *** synthmeat left
[12:51] *** synthmeat joined
[13:12] *** dogbert11 joined
[13:12] *** Bocaneri joined
[13:13] *** Bocaneri is now known as Guest4358

[13:14] *** coleman_ joined
[13:14] *** perlbot_ joined
[13:14] *** kawaii__ joined
[13:14] *** pjlsergeant__ joined
[13:15] *** simcop2387_ joined
[13:15] *** jcallen_ joined
[13:17] *** polettix_ joined
[13:17] *** xinming__ joined
[13:17] *** dustinm`_ joined
[13:17] *** shmup_ joined
[13:17] *** xkr47_ joined
[13:18] *** perlbot_ left
[13:18] *** ecocode_ joined
[13:20] *** synthmeat1 joined
[13:20] *** synthmeat left
[13:20] *** benchable6 left
[13:20] *** dogbert17 left
[13:20] *** corwin left
[13:20] *** pjlsergeant_ left
[13:20] *** discord-raku-bot left
[13:20] *** xkr47 left
[13:20] *** xinming_ left
[13:20] *** TieUpYourCamel left
[13:20] *** shmup left
[13:20] *** simcop2387 left
[13:20] *** perlbot left
[13:20] *** jcallen left
[13:20] *** ecocode left
[13:20] *** Sauvin left
[13:20] *** dustinm` left
[13:20] *** kawaii_ left
[13:20] *** coleman left
[13:20] *** polettix left
[13:20] *** charsbar left
[13:20] *** coleman_ is now known as coleman

[13:20] *** simcop2387_ is now known as simcop2387

[13:20] *** david_ joined
[13:20] *** kawaii__ is now known as kawaii_

[13:20] *** xkr47_ is now known as xkr47

[13:20] *** charsbar joined
[13:21] *** corwin joined
[13:21] *** perlbot joined
[13:32] *** razetime left
[13:38] *** jgaz joined
[13:51] *** epony left
[13:54] *** lichtkind left
[13:56] *** rf joined
[13:57] *** lichtkind joined
[13:59] *** benchable6 joined
[14:10] *** lichtkind left
[14:16] *** lichtkind joined
[14:35] *** epony joined
[14:38] *** spacekookie left
[14:38] *** spacekookie joined
[14:41] *** razetime joined
[15:22] *** Tirifto left
[15:30] *** Guest4358 is now known as Sauvin

[15:33] *** abraxxa left
[15:34] *** Tirifto joined
[15:40] *** jpn left
[16:02] *** Geth left
[16:02] *** Geth joined
[16:08] *** zep20230124 joined
[16:08] <zep20230124> test

[16:10] <Abhoerschutz> zep20230124: Test succeeded.

[16:13] *** discord-raku-bot joined
[16:13] <discord-raku-bot> <Zephyr> test2

[16:13] <discord-raku-bot> <Zephyr> test from the other side

[16:13] <zep20230124> alright, that succeeded too

[16:13] <lizmat> succeeded 

[16:13] <lizmat> yup

[16:14] <zep20230124> for some reason the server seemed to have automatically kicked the bridge a bit ago, I'll look into what's causing it

[16:19] *** jpn joined
[16:25] *** stevied_test left
[16:28] *** discord-raku-bot left
[16:28] *** discord-raku-bot joined
[16:29] <zep20230124> should be fixed

[16:30] *** zep20230124 left
[16:30] <tbrowder> jaguart: thnx, now i have it mostly working as i expected. but when, as root, i try to uninstall a module i get an error. i’ll have to give more details later, but i’ve seen it before.

[16:32] *** jmcgnh left
[16:33] *** Tirifto left
[16:35] *** Sgeo joined
[16:36] *** Tirifto joined
[16:49] *** stevied_test joined
[16:52] *** jmcgnh joined
[16:59] *** jpn left
[17:19] * lizmat clickbaits  https://rakudoweekly.blog/2023/01/23/2023-04-thank-you-jj/

[17:22] *** [Coke] joined
[17:23] <[Coke]> tellable6: back

[17:23] <tellable6> [Coke], I haven't seen back around, did you mean kkkk?

[17:23] <[Coke]> ... ww. :)

[17:31] <[Coke]> my windows install is now complaining on 'zef install App::Cal' "Cannot create a Zef::Distribution from non-existant path"

[17:35] *** dakkar left
[17:37] <[Coke]> where the path is to a .tar.gz\META6.json

[17:37] <[Coke]> and the .tar.gz is an empty folder.

[17:38] <ugexe> how long is that path?

[17:39] <[Coke]> ugh. removed ~/.zef - now it's complaining that it can't fetch https://360.zef.pm/

[17:40] <[Coke]> doing a full reinstall of rakudo/zef.

[17:40] <[Coke]> (from 2022.07)

[17:41] <ugexe> those are certainly strange. appveyor shows that zef can install .tar.gz files here -- https://github.com/ugexe/zef/blob/main/.appveyor.yml#L76 and shows it can recover from deleting the data in ~/.zef here -- https://github.com/ugexe/zef/blob/9779091b7997468257ce3037f8bc0e9c65d1f974/.appveyor.yml#L91-L92

[17:42] <[Coke]> could be a result of me trying to update to 2022.12, backing out, reinstalling .07 earlier... thought I had wiped the install, but doing again, just to be safe.

[17:52] <[Coke]> wiped install directory, rebuilt/reinstalled raku; installed zef from updated git clone. run "zef install App::Cal" - searching for missing dependencies, extracting aborted, all mirrors updated, cannot create a zef installation from non-existent path (presumably because the extracts aborted)

[17:52] <[Coke]> how can I get more details on the aborted extracts?

[17:54] <[Coke]> (it had 3 extracts that were reported as aborted)

[17:55] <[Coke]> zef install Data::Dump (one of the deps) installs fine

[17:58] <[Coke]> data::dump is one of the ones that complained that the extract aborted when trying to install App::Cal

[17:58] <ugexe> atm i don't think there is a good way. you could edit these two lines to show the output from the command, and rerun zef via `raku -I. bin/zef install App::Cal` -- https://github.com/ugexe/zef/blob/9779091b7997468257ce3037f8bc0e9c65d1f974/lib/Zef/Service/Shell/tar.rakumod#L97-L98

[17:59] *** razetime left
[18:00] *** reportable6 left
[18:01] <[Coke]> Trying to do Text::Tabs, one of the deps. if I run with --verbose it says that fetching and extraction ran ok, but still errors on "cannot create zef::distribution" and if I look at the path, there is again an empty .tar.gz folder with no META6.json (this after again removing ~/.zef)

[18:02] *** reportable6 joined
[18:03] <ugexe> what is the full output with --verbose

[18:04] <[Coke]> if I remove the :bin in the stderr and add "say $_", I see "tar: ..\<...>.tar.gz: cannot open: no such file or directory, error is not recoverable"

[18:05] <ugexe> i wonder if there is a difference in the tar files that work vs dont

[18:06] <[Coke]> have there been any changes to zef recently that would impact how path names are created or interpreted? 

[18:06] <[Coke]> I think Data::Dump complained once and then worked when run directly

[18:07] <ugexe> no

[18:08] <[Coke]> https://gist.github.com/coke/e578a8e6da5c1c28e4a902b6fc2b27fd

[18:09] <[Coke]> that includes verbose and the diagnostic tar output

[18:10] <[Coke]> I am running in git bash on windows, fwiw. (and until recently have had no issues with zef installs)

[18:11] <[Coke]> ~/.zef/tmp has a bunch of <hex>.tar.gz and corresponding <hex>.tar.gz.lock entries.

[18:12] <[Coke]> didn't check byte for byte, but the "no such file or directory" does seem to have a directory listing there.

[18:13] <[Coke]> 38fc... has a dist folder underneath which has a META6.json

[18:13] <[Coke]> cd

[18:13] <[Coke]> ]

[18:14] <[Coke]> (oops)

[18:14] <ugexe> https://github.com/ugexe/zef/blob/9779091b7997468257ce3037f8bc0e9c65d1f974/lib/Zef/Utils/FileSystem.rakumod#L162-L167 -- replace the body of that function with just `code();` if you want to rule out the lockfile stuff

[18:14] <[Coke]> ... OOF - if I go to a cmd prompt and run zef from there it works.

[18:15] <[Coke]> I've been running raku & zef under git bash for ages, no idea if something changed on my machine recently to break that.

[18:15] <[Coke]> but if works at the command prompt, I can deal with that for now.

[18:15] <ugexe> is `tar --version` different in between those two shells you are using?

[18:16] <ugexe> maybe one is using a type of `tar` that needs some adjustment

[18:17] <[Coke]> cmd has bsdtar 3.5.2, git bash has gnu tar 1.34

[18:17] <[Coke]> so, quite possible. But I haven't upgraded git bash... in a year, maybe?

[18:17] <ugexe> zef supports both afaik (macos uses bsdtar, and linux usually gnu tar), so maybe something windows specific

[18:17] <[Coke]> weird. Thanks for helping me track it down.

[18:21] <[Coke]> (even with things working in CMD, still had to do File::Directory::Tree with --/rea)

[18:28] *** jpn joined
[18:33] *** jpn left
[18:35] <rf> I'm having some issues converting a list of lists to a map, does anyone see anything wrong with this? @my-list>>.map({ Map.new(name => @_[0], author => @_[1], href => @_[2], rating => @_[3]) }) where @my-list = [['abc', 'abc', 'abc', 'abc]];

[18:35] <rf> List of lists to a list of maps

[18:42] <lizmat> m: dd Map.new( foo => 42 )'

[18:42] <camelia> rakudo-moar 91ebaa013: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> dd Map.new( foo => 42 )⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement…»

[18:42] <lizmat> m: dd Map.new( foo => 42 )

[18:42] <camelia> rakudo-moar 91ebaa013: OUTPUT: «Map.new␤»

[18:42] <lizmat> m: dd Map.new( (foo => 42) )

[18:42] <camelia> rakudo-moar 91ebaa013: OUTPUT: «Map.new((:foo(42)))␤»

[18:42] <lizmat> rf ^^

[18:43] <rf> Ah, the parens bite me once again, thanks Liz!

[18:43] <lizmat> Map.new would just silently eat the named variable, you need to provide them as a list of Pairs

[18:43] <lizmat> it's bitten me plenty as well  :-(

[18:44] <rf> I will gladly take this over the junk I've dealt with in other language, Raku rocks nonetheless 

[18:45] <discord-raku-bot> <p6steve> m: say 'ok from discord';

[18:48] <discord-raku-bot> <p6steve> m: (foo => 42).Map

[18:48] <rf> m: say 'okay from IRC';

[18:48] <camelia> rakudo-moar 91ebaa013: OUTPUT: «okay from IRC␤»

[18:48] <discord-raku-bot> <p6steve> m: (foo => 42).Map.say

[18:49] <discord-raku-bot> <p6steve> ^ just wondering if this a bit nicer

[18:50] <discord-raku-bot> <p6steve> lol - just wondered if m: works from this side of the bridge

[18:51] *** abraxxa-home joined
[18:52] <discord-raku-bot> <p6steve> m: %(foo=>42).say

[18:52] <rf> Is there a way I can construct a without using Map.new and without binding it to a container with the %sigil?

[18:53] <rf> Construct a map*

[18:53] <rf> something like `(:hello("world"), :eggs("yum")) is Map`

[18:54] <discord-raku-bot> <p6steve> m: (:hello("world"), :eggs("yum")).Map.WHAT

[18:54] <rf> m: (:hello("world"), :eggs("yum")).Map.WHAT

[18:54] <camelia> rakudo-moar 03b2cf356: ( no output )

[18:54] <rf> m: (:hello("world"), :eggs("yum")).Map.WHAT.say

[18:54] <camelia> rakudo-moar 03b2cf356: OUTPUT: «(Map)␤»

[18:54] <rf> Aha! Thank you!

[18:55] <discord-raku-bot> <p6steve> Personally I try to use Array and Hash over List and Map ... there is better support for literals and they sit better with the sigils

[18:56] <tonyo> Map.new( (<pairs) ) also does it

[18:56] <discord-raku-bot> <p6steve> m: %(:hello("world"), :eggs("yum")).WHAT.say

[18:56] *** NemokoschKiwi joined
[18:56] <tonyo> m: say Map.new((:a<A>,:b<B>))

[18:56] <camelia> rakudo-moar 03b2cf356: OUTPUT: «Map.new((a => A, b => B))␤»

[18:56] <tonyo> m: %(:hello("world"), :eggs("yum")).WHAT.say

[18:56] <camelia> rakudo-moar 03b2cf356: OUTPUT: «(Hash)␤»

[19:00] *** NemokoschKiwi left
[19:01] <discord-raku-bot> <p6steve> m: %(:hello<world>, :eggs<yum>).WHAT.say

[19:01] <discord-raku-bot> <p6steve> m: %(:hello<world>, :eggs<yum>)<eggs>.say

[19:12] <rf> p6steve: I'd prefer for it to be immutable in my case, but I understand what you mean.

[19:12] <tellable6> rf, I'll pass your message to p6steve

[19:18] <discord-raku-bot> <Nemokosch> Also apparently neither Map nor List are parametrizable

[19:21] <discord-raku-bot> <p6steve> rf - fair enough, with raku you have the choice. For me, I would be thinking Map is not really immutable and since raku is more about clarity than speed then Hash is a bit more natural

[19:22] <discord-raku-bot> <Nemokosch> indeed it's not really immutable. I hope one day codesections will just show up with the persistent data type implementation...

[19:27] <discord-raku-bot> <p6steve> ValueMap+ (now), true Immutable++ (when it comes) ... in the spirit of raku can do it all ...

[19:30] <discord-raku-bot> <p6steve> ... but a Hash can do everything a Map can and more, so (for me)  for smallish programs that need "meat & potatoes" coding why strip back?

[19:31] <discord-raku-bot> <Nemokosch> m: %(Map.new(:2foo)).WHAT.say # is this a Map?

[19:31] <discord-raku-bot> <Nemokosch> oh right

[19:31] <discord-raku-bot> <Nemokosch> food for thought? 😛

[19:35] <discord-raku-bot> <p6steve> tata

[19:43] <discord-raku-bot> <Nemokosch> what do you mean?

[19:51] <tonyo> m: %(Map.new(:2foo)).WHAT.say # is this a Map?

[19:51] <camelia> rakudo-moar 03b2cf356: OUTPUT: «(Map)␤»

[19:56] *** ab5tract joined
[20:31] *** ab5tract left
[20:33] *** [Coke] left
[20:45] <Geth> ¦ ecosystem: 2colours++ created pull request #612: Time::Duration moved to fez

[20:45] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/612

[21:08] *** rf left
[21:11] *** [Coke] joined
[21:13] *** rf joined
[21:14] *** [Coke]_ joined
[21:16] *** [Coke] left
[21:30] *** [Coke]_ is now known as [Coke]

[21:30] <[Coke]> .

[21:37] *** abraxxa-home left
[21:57] *** jpn joined
[22:02] *** rf left
[22:18] *** guifa_ left
[22:25] *** deoac joined
[22:32] <jaguart> tbrowder: I've given up on zef-as-root for the moment, install fails with odd permission issues, uninstall/reinstall rakudo and now running in user-mode. Doesn't bode well for production commissioning. TBH I'm not sure if its zef, the 2022.12 build (see windows issues on github), or quality issues with dists. It's on my to-do

[22:36] *** jpn left
[22:39] <discord-raku-bot> <Nemokosch> 2022.12 was kind of a jump into deep water, wouldn't be surprised if some weirdness sneaked in during the many changes

[22:50] <discord-raku-bot> <jaguart> I'm hoping next release will fix windows workflow tests on github - otherwise that will become a mental toothache

[22:57] <discord-raku-bot> <Nemokosch> I wouldn't keep my hopes high in your place... is it even an analyzed bug or just "used to work before, doesn't work now apparently"?

[22:59] <jaguart> I hoped ugexe would be the one to raise an issue - they seemed to have more of an idea when we --ll-exception'd it

[23:02] <discord-raku-bot> <Nemokosch> ugexe probably indeed know more about it than we would but yes, it's kind of a niche

[23:05] <ugexe> jaguart: do you have a windows vm?

[23:13] *** cokebot9000 joined
[23:13] <cokebot9000> test

[23:14] *** cokebot9000 left
[23:14] <ugexe> https://github.com/rakudo/rakudo/commit/cc7193d0a6d95bd580a4b2783795d082a56d8e6d and https://github.com/rakudo/rakudo/commit/9360c65044ced8a682bf7c23939e92455f664079 are the only two things in the 2022.12 release that look related to precomp stuff, so if you (or someone else) had such a VM they could try reverting those commits to see if it improves anything. that would give a better idea of what to

[23:14] <ugexe> poke (although those commits are otherwise doing the right thing and we shouldn't expect to revert them to solve this)

[23:18] <tonyo> what exactly is the issue?

[23:18] <tonyo> or, what is the goal that is raising the issue

[23:19] <ugexe> my personal issue is i cant get github actions to finish the CI tests that appveyor finishes

[23:20] <ugexe> it seems to be related to precompilation files in one way or another

[23:49] *** jmcgnh left
[23:49] *** lichtkind left
