[00:00] *** CosmicTortoise left
[00:00] *** reportable6 left
[00:01] <ugexe> to me that points at either github actions resource allocation, or the Raku/setup-raku action itself. although im more inclined to think its the former

[00:02] <ugexe> but note that appveyor test does that TMPDIR shortening trick i showed before

[00:03] *** reportable6 joined
[00:03] <jaguart> when the install fails - is there anything more that zef can determine?

[00:03] <jaguart> e.g. the exception message?

[00:05] <ugexe> with --debug it should be showing any such messages. the only additional info that can be gotten is by running with --ll-exception. but to do that you have to use like `raku --ll-exception -e "use Zef::CLI" install TAP --debug` since its a raku flag not a zef flag

[00:06] <jaguart> ok - will try CompUnit first...

[00:09] <jaguart> this being my first workflow [blush] - is there a way to string multiple run: lines into one name: ?

[00:11] <ugexe> https://github.com/ugexe/zef/blob/f706e8b675ad320c68b02e29b63fb1a299710b9d/.github/workflows/tests.yml#L83-L88

[00:11] <Xliff>  m: my $m = "Module::One, this is Module::Two" ~~ / (\w+) + % ';;' /; $m.gist.say

[00:11] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´ÔΩ¢ModuleÔΩ£‚ê§ 0 => ÔΩ¢ModuleÔΩ£‚ê§¬ª

[00:12] <Xliff>  m: my $m = "Module::One, this is Module::Two" ~~ / (\w+)+ % ';;' /; $m.gist.say

[00:12] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´ÔΩ¢ModuleÔΩ£‚ê§ 0 => ÔΩ¢ModuleÔΩ£‚ê§¬ª

[00:12] <Xliff>  m: my $m = "Module::One, this is Module::Two" ~~ / (\w+)+ % '::' /; $m.gist.say

[00:12] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´ÔΩ¢Module::OneÔΩ£‚ê§ 0 => ÔΩ¢ModuleÔΩ£‚ê§ 0 => ÔΩ¢OneÔΩ£‚ê§¬ª

[00:12] <Xliff>  m: my $m = "Module::One, this is Module::Two" ~~ m:g/ (\w+)+ % '::' /; $m.gist.say

[00:12] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´(ÔΩ¢Module::OneÔΩ£‚ê§ 0 => ÔΩ¢ModuleÔΩ£‚ê§ 0 => ÔΩ¢OneÔΩ£ ÔΩ¢thisÔΩ£‚ê§ 0 => ÔΩ¢thisÔΩ£ ÔΩ¢isÔΩ£‚ê§ 0 => ÔΩ¢isÔΩ£ ÔΩ¢Module::TwoÔΩ£‚ê§ 0 => ÔΩ¢ModuleÔΩ£‚ê§ 0 => ÔΩ¢TwoÔΩ£)‚ê§¬ª

[00:12] <Xliff> OK, why is this matching 'this' and 'is'?

[00:16] <discord-raku-bot> <Nemokosch> I think you have a thinko here. a word is indeed a sequence of alphanumeric characters, repeated at least once

[00:16] <discord-raku-bot> <Nemokosch> "this" has the inner + as 4 and the outer + as 1

[00:16] <discord-raku-bot> <Nemokosch> "is" has the inner + as 2 and the outer + as 1

[00:17] <discord-raku-bot> <Nemokosch> perhaps you wanted ** 2..*, instead of +

[00:19] *** discord-raku-bot left
[00:20] *** discord-raku-bot joined
[00:21] <Xliff>  m: my token word { \w+ }; my $m = "Module::One, this is Module::Two" ~~ m:g/ <word>+ % '::' /; $m.gist.say

[00:21] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´(ÔΩ¢Module::OneÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ word => ÔΩ¢OneÔΩ£ ÔΩ¢thisÔΩ£‚ê§ word => ÔΩ¢thisÔΩ£ ÔΩ¢isÔΩ£‚ê§ word => ÔΩ¢isÔΩ£ ÔΩ¢Module::TwoÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ word => ÔΩ¢TwoÔΩ£)‚ê§¬ª

[00:21] <Xliff>  m: my token word { \w ** 2..*  }; my $m = "Module::One, this is Module::Two" ~~ m:g/ <word>+ % '::' /; $m.gist.say

[00:21] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´(ÔΩ¢Module::OneÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ word => ÔΩ¢OneÔΩ£ ÔΩ¢thisÔΩ£‚ê§ word => ÔΩ¢thisÔΩ£ ÔΩ¢isÔΩ£‚ê§ word => ÔΩ¢isÔΩ£ ÔΩ¢Module::TwoÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ word => ÔΩ¢TwoÔΩ£)‚ê§¬ª

[00:22] <Xliff> Nemokosch: Did I do it wrong?

[00:22] <Xliff>  m: my token dc { '::' }; my token word { \w ** 2..*  }; my $m = "Module::One, this is Module::Two" ~~ m:g/ <word>+ % <dc> /; $m.gist.say

[00:22] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´(ÔΩ¢Module::OneÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ dc => ÔΩ¢::ÔΩ£‚ê§ word => ÔΩ¢OneÔΩ£ ÔΩ¢thisÔΩ£‚ê§ word => ÔΩ¢thisÔΩ£ ÔΩ¢isÔΩ£‚ê§ word => ÔΩ¢isÔΩ£ ÔΩ¢Module::TwoÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ dc => ÔΩ¢::ÔΩ£‚ê§ word => ÔΩ¢TwoÔΩ£)‚ê§¬ª

[00:22] <discord-raku-bot> <Nemokosch> the other + should be replaced. This one would protect against one-letter words

[00:23] <Xliff>  m: my token dc { '::' }; my token word { \w+  }; my $m = "Module::One, this is Module::Two" ~~ m:g/ <word>  ** 2..*  % <dc> /; $m.gist.say

[00:23] <camelia> rakudo-moar 5f7ff013d: OUTPUT: ¬´(ÔΩ¢Module::OneÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ dc => ÔΩ¢::ÔΩ£‚ê§ word => ÔΩ¢OneÔΩ£ ÔΩ¢Module::TwoÔΩ£‚ê§ word => ÔΩ¢ModuleÔΩ£‚ê§ dc => ÔΩ¢::ÔΩ£‚ê§ word => ÔΩ¢TwoÔΩ£)‚ê§¬ª

[00:23] <Xliff> \o/

[00:23] <Xliff> Thanks

[00:23] <discord-raku-bot> <Nemokosch> üç¨

[00:43] <ugexe> jaguart: fresh update at https://github.com/ugexe/zef/issues/491#issuecomment-1370365933

[00:43] <ugexe> looks like its a raku issue since it works for previous raku versions

[00:45] *** vrurg left
[00:45] *** vrurg joined
[00:48] <leont> Can you reproduce the issue with Protocol::Postgress (also a fairly large module with many types, maybe that's the problem). 

[00:49] <jaguart> ugexe: ssue since it works for previous raku versions

[00:49] <jaguart> sorry - that was a buffer

[00:49] <jaguart> https://github.com/jaguart/Grok/actions/runs/3834180255/jobs/6526330105

[00:50] <jaguart> wondering about: from SETTING::src/core.c/Lock.pm6:30  (C:\hostedtoolcache\windows\rakudo\2022.12-01\x86_64\bin\..\share\perl6\runtime/CORE.c.setting.moarvm:protect)

[00:54] <discord-raku-bot> <Nemokosch> skaji is very reliable at showing up, unless it's for mi6 üò¶

[00:57] <jaguart> actually - https://github.com/rakudo/rakudo/blob/main/src/core.c/CompUnit/Repository/Installation.pm6

[00:57] <jaguart> line 230 is tha lock call...

[00:57] <jaguart> the code-block ends at line 244

[00:58] <jaguart> can't see the ending ')' - but I dont grok NQP yet

[00:59] <leont> I think it's on line 368, but it's weirdly indented

[00:59] <jaguart> yeah - my bad

[01:00] <discord-raku-bot> <Nemokosch> for what it's worth, I also don't actually think TAP itself is the big problem of zef installations

[01:01] <ugexe> looks like its dying during precomp at https://github.com/rakudo/rakudo/blob/5f7ff013deb8fcab3e3599a50e2a77444dd0582b/src/core.c/CompUnit/PrecompilationRepository.pm6#L461

[01:03] *** Homer_Simpson joined
[01:03] <ugexe> fwiw you would have gotten that error message from zef using --ll-exception, but surprinsgly there isnt a top level error message there that *should* normally show up without --ll-exception

[01:12] <jaguart> good to pin it down :) bbs

[01:27] *** melezhik joined
[01:34] <ugexe> so it seems to be related to 2022.12, however note earlier my appveyor run which builds against rakudo master passed

[01:36] <ugexe> so either the issue is fixed sometime between 2022.12 and now, or (more likely) the github action has less resources available compared to the appveyor vm (perhaps less threads or difference in locking behavior) that cause precompilation failure

[01:38] *** Nemokosch left
[01:40] <Homer_Simpson> can I use raku without OOP

[01:41] <Homer_Simpson> (yes I mean "without any oop at all")

[01:45] *** melezhik left
[01:47] <rjbs> But what do you mean by that?

[01:48] <rjbs> The numeric value 5 is an object.

[01:54] *** Guest47 joined
[01:56] *** epony left
[02:08] <guifa_> As rjbs notes, everything is an object.  When you do 1 + 2, you're actually calling &infix:<+>(1,2), it's just syntactic sugar on objects (although I guess the argument could be made OO code is just syntactic sugar for procedural so lol).  

[02:09] <guifa_> s/procedural/imperative|functional|etc

[02:09] <guifa_> The idea behind Raku is to let you feel free to use the style that you're most comfortable with

[02:21] *** razetime joined
[02:40] *** Kaiepi left
[03:20] *** epony joined
[03:23] *** ab5tract joined
[03:27] *** xinming left
[03:28] *** xinming joined
[04:04] *** ab5tract left
[04:04] *** ab5tract joined
[04:10] *** derpydoo left
[04:14] <ab5tract> okay, one more question for the day.. is there an easy way to redirect $*ERR to /dev/null?

[04:33] <ab5tract> use case: Audio::PortAudio dumps a lot of text to STDERR. It would be nice to be able to silence this at the library or application level

[04:34] <ab5tract> It's not the library's fault -- it is the underlying C functions that do all of the messy debugging

[04:39] *** epony left
[04:41] <kjp> Try something like "my $*ERR = '/dev/null'.IO.open" 

[04:47] *** ab5tract left
[04:56] *** ab5tract joined
[04:56] *** epony joined
[04:57] *** ab5tract left
[04:57] *** ab5tract joined
[05:09] <CIAvash> ab5tract: maybe https://raku.land/zef:lizmat/silently can be used? depending on the code

[05:16] <ab5tract> CIAvash: that's exactly what I was looking for. unfortunately my suspicion was correct and this doesn't trap the noise from the underlying C library

[05:17] <jaguart> CIAvash: Test::Output grabs STDERR - maybe look at it's code?

[05:18] <CIAvash> ab5tract:  oh! maybe open an issue or ping lizmat if something can be done about it

[05:20] <ab5tract> jaguart, CIAvash: thanks for the advice. right now I should go to bed but I'll definitely look into this

[05:21] <CIAvash> np. good night!

[05:21] *** ab5tract left
[05:22] *** ab5tract joined
[05:22] <ab5tract> I have a feeling that it is a bit hopeless, though. Not sure why someone would decide it is appropriate to spew non-error debug info all over STDERR from a shared library

[05:22] <ab5tract> I've tried  `./configure --disable-debug-logging` of the underlying package and that didn't do anything eithe

[05:45] *** ab5tract left
[05:46] *** ab5tract joined
[05:53] <japhb> ab5tract: If you're really desperate, you can get the underlying file descriptor from $*ERR and reopen it elsewhere I suppose.  (Haven't tried it myself, but I have used .native-descriptor when talking to C libs)

[05:53] *** ab5tract left
[05:54] <japhb> Actually, also Xliff might have faced (and dealt with) this already, because GTK loves to spew errors out the wazoo.

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:14] <Xliff> Unfortunately, I have not had the opportunity to deal with $*ERR.

[06:29] <tonyo> .tell ab5tract something like this works `raku -e '$*ERR.say: "test"' 2>/dev/null` to redirect 

[06:29] <tellable6> tonyo, I'll pass your message to ab5tract

[06:38] <tonyo> or, programmatically

[06:38] <tellable6> 2023-01-01T18:48:12Z #raku <melezhik> tonyo I've created an enhancement ticket for fez - https://github.com/tony-o/raku-fez/issues/75

[06:38] <tonyo> m: our $*ERR := '/dev/null'.IO.open(:mode<wo>); $*ERR.say: "test"; # ab5tract

[06:38] <camelia> rakudo-moar 5f7ff013d: ( no output )

[06:54] <Xliff> Muhahahahahaha!

[06:54] <Xliff> https://gist.github.com/Xliff/43827ef39f5d46c1553b91f3e3b745e4

[06:54] <Xliff> The fact that there are colors is enough for me!@

[06:54] <Xliff> Not even one day of work.

[07:01] *** evalable6 left
[07:02] *** evalable6 joined
[07:14] *** avuserow left
[07:14] *** avuserow joined
[08:07] *** Sgeo left
[08:10] *** jaguart left
[08:10] *** jaguart joined
[08:45] *** Nemokosch joined
[08:45] *** Nemokosch left
[08:49] *** Kaiepi joined
[09:03] *** sena_kun joined
[09:27] *** jpn joined
[09:55] *** mahafyi joined
[10:27] *** tejr left
[10:50] *** tejr joined
[11:11] *** mahafyi left
[11:13] *** Homer_Simpson left
[11:23] <guifa_> Xliff: oh man, just imagine when you can compile to RakuAST ‚Ä¶¬†the level of detail that code editor is going to get suddenly lol

[11:36] <tbrowder> hi, all. question: can i create a role to encapsulate all the machinery to add Iterable and Associative attributes to a class?

[11:38] <discord-raku-bot> <Nemokosch> role AllMachinery does Iterable does Associative {} # wouldn't this work?

[11:41] <tbrowder> i suppose so, thanks. my problem is i start thinking in the lower-level parts before the "does" and "is" parts.

[11:41] <tbrowder> gotta get over that

[11:42] <discord-raku-bot> <Nemokosch> understandable üòÑ

[11:44] <tbrowder> clever retort, Saturday Night Live standin?

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:26] <lizmat> tbrowder: I doubt that Nemokosch knows what an icon SNL is in the US  :-)

[12:26] * lizmat is more a Laugh-In fan  :-)

[12:57] *** Zephyr[m] joined
[13:04] *** Zephyr[m] left
[13:14] <tbrowder> you are right

[13:16] <tbrowder> Nemokosh: i meant, as a compliment, you are a very humorous person!

[13:16] <tbrowder> yea, Rowan & Martin as i recall

[13:17] <tbrowder> also loved "That Was the Week that Was"

[13:35] *** xinming left
[13:36] *** xinming joined
[13:41] *** Kaiepi left
[13:44] *** derpydoo joined
[13:51] <Xliff> guifa: Yep. Although I will settle for figuring out why my <argument> rule doesn't work.

[14:14] <Xliff> I'm getting this error in a place where I shouldn't be: "lang-call cannot invoke object of type 'VMNull' belonging to no language"

[14:14] *** Kaiepi joined
[14:15] <Xliff> The offending line being "multi sub apply-color-tag (Str $n, Match $m where { $m && $m.elems == 0 }) {"

[14:23] <tbrowder> another question for something i should know: i know you can't use "use lib" in a module being precompiled. but i can define RAKULIB and name an added desired lib path. so, given a script defining env<RAKULIB>="./lib", do modules in "./lib" inherit that path also?

[14:25] *** Guest47 left
[14:34] <tbrowder> ok, looks like the answer is NO if i do it inside the script even within a BEGIN block.

[14:35] <tbrowder> but the answer is YES if i export it in my shell before i call the script.

[14:37] <tbrowder> so the question still is: is there a way to export RAKULIB within a script so it affects all the pieces being called from that script?

[14:42] <nine> tbrowder: that really sounds like the wrong problem to solve

[14:43] <tbrowder> yes, i know, but i got myself in a box with ad hoc design and am trying to put a tmp bandage on it

[14:45] <tbrowder> raku duct tape, that is

[14:49] *** jgaz joined
[14:49] <tbrowder> i guess i could throw everything from multiple modules into one giant Toolbox.rakumod and export stuff needed externally.

[14:49] *** simcop2387 left
[14:49] *** perlbot left
[14:50] <tbrowder> this is not for public consumption, at least in its present form

[14:51] <tbrowder> oh well, new year, new trials ;-D

[14:51] *** simcop2387 joined
[14:53] *** perlbot joined
[14:59] *** derpydoo left
[15:08] *** ab5tract joined
[15:12] *** ab5tract left
[15:13] *** ab5tract joined
[15:33] <ab5tract> okay, it looks like I might be able to get the behavior I want using `freopen` . But how do I setup NativeCall for a stdlib C function?

[15:33] <tellable6> 2023-01-04T06:29:10Z #raku <tonyo> ab5tract something like this works `raku -e '$*ERR.say: "test"' 2>/dev/null` to redirect 

[15:33] *** CodeTortoise joined
[15:34] <ab5tract> tonyo: indeed, redirecting from the shell is working fine for me. not an ideal situation though

[15:34] *** ab5tract left
[15:35] *** ab5tract joined
[15:42] *** razetime left
[15:43] *** Sgeo joined
[15:53] *** ProperNoun left
[15:55] *** ProperNoun joined
[16:11] *** xinming left
[16:11] *** xinming joined
[16:22] <tonyo> ab5tract: i posted another, programmatic, option right below that

[16:22] <tonyo> m: our $*ERR := '/dev/null'.IO.open(:mode<wo>); $*ERR.say: "test"; # ab5tract

[16:22] <camelia> rakudo-moar 2006fcff2: ( no output )

[16:58] <ab5tract> tonyo: thanks for pointing that out. It does work perfectly well for Raku code. Unfortunately my issue is with the stderr handle at the C level. I think my solution would look something like this: https://stackoverflow.com/questions/24778998/how-to-disable-or-re-route-alsa-lib-logging

[17:02] <tonyo> ahhh , you can do the same in C as i did with IO.open(:mode<wo>) - fopen("/dev/null", O_WRONLY)

[17:02] <tonyo> ah, that'd work too ^

[17:05] <ab5tract> tonyo:  I suspect I will need to write some custom C code for it though, right? Unless there is a way to resolve `stderr` to it's file pointer from NativeCall?

[17:07] <tonyo> i'm not entirely sure what you're trying to do, there's usually a macro or you can use fileno(...) 

[17:07] <tonyo> https://www.gnu.org/software/libc/manual/html_node/Descriptors-and-Streams.html

[17:09] <leont> You can use Nativecall and use dup2 to redirect it?

[17:11] <tonyo> (usually a macro in C)

[17:11] <ab5tract> tonyo: my preferred approach would be to try and load `freopen` into NativeCall so I don't have to ship a custom C file that does the thingy

[17:11] *** linkable6 left
[17:11] *** evalable6 left
[17:12] *** linkable6 joined
[17:13] <ab5tract> leont: yeah that does look like another option. same situation though of not being sure how to get at STDERR_FILENO from NativeCall

[17:13] *** evalable6 joined
[17:13] <leont> STDERR_FILENO = 2

[17:13] <ab5tract> unless that's a static enum in the C standard?

[17:13] <ab5tract> okay, I had a thought that might be the case :)

[17:13] <tonyo> ab5tract: that does look like a good option then (wasn't sure if you were consuming a lib in C already or not)

[17:14] <ab5tract> I'm trying to patch this into Audio::PortAudio, which does bind to portaudio but otherwise doesn't ship any C code of its own

[17:15] *** bdju left
[17:15] <ab5tract> leont: okay, (hopefully) final question on this then. what does the `is native` trait take as an argument when you are pulling in standard C functions? `is native('c')` ?

[17:16] <leont> Just say ¬´is native¬ª without an argument

[17:16] <ab5tract> beautiful

[17:16] <leont> Example: https://github.com/Leont/sigpipe/blob/master/lib/sigpipe.rakumod#L4

[17:18] <leont> Also, the descriptor can be retrieved from a handle with the native-descriptor method

[17:18] <leont> m: say $*ERR.native-descriptor

[17:18] <camelia> rakudo-moar 30cf5c791: OUTPUT: ¬´2‚ê§¬ª

[17:19] *** jpn left
[17:19] *** bdju joined
[17:27] *** jpn joined
[17:27] *** sena_kun left
[17:28] *** sena_kun joined
[17:32] <ab5tract> it works! \o/ thanks leont, tonyo, and everyone else who chimed in :D

[17:32] <ab5tract> now I just need to guard it so that it only runs this code on Linux

[17:33] *** jpn left
[17:33] *** xinming left
[17:35] *** xinming joined
[17:56] <leont> You can even do it in such a way that your raku code can still print to $*ERR but your libary can't print to STDERR

[18:00] *** reportable6 left
[18:01] *** perlbot left
[18:01] *** simcop2387 left
[18:02] *** reportable6 joined
[18:04] *** simcop2387 joined
[18:06] *** perlbot joined
[18:20] *** jpn joined
[18:20] *** [Coke] joined
[18:31] *** jpn left
[18:51] *** discord-raku-bot left
[18:52] *** discord-raku-bot joined
[19:29] *** xinming left
[19:36] *** jpn joined
[19:58] *** jpn left
[20:09] *** jpn joined
[20:23] *** jpn left
[20:24] *** Kaipei joined
[20:28] *** Kaiepi left
[20:37] *** hythm joined
[20:37] *** jpn joined
[20:49] *** NemokoschKiwi joined
[20:49] <NemokoschKiwi> leont: https://gist.github.com/2colours/f241c399857b3eb73db97d510bf72b6a do you have an idea why this could happen?

[21:02] <[Coke]> that URL gives me a github 500 error

[21:03] <NemokoschKiwi> hm, I don't think it should have but what about now? now it should be as public as it gets

[21:04] <leont> That doesn't make sense to me

[21:04] <leont> It's a multi method, but the other method has a very different input parameter

[21:05] <NemokoschKiwi> well it literally says that the same candidate appears twice... but it left me clueless why

[21:05] <discord-raku-bot> <Nemokosch> is the bridge üîº or üîΩ

[21:05] <discord-raku-bot> <Nemokosch> üëè

[21:06] *** NemokoschKiwi left
[21:06] <leont> As a sidenote, I'm not sure if having execute take a slurpy was a god design decision, and am wondering if I should do a breaking change before the module gets popular

[21:07] *** jpn left
[21:10] <leont> I can reproduce the issue with ¬´Protocol::Postgres::Type::Default.encode-to-text("")¬ª

[21:11] <leont> And now that I think of it, I have seen this issue before, https://github.com/rakudo/rakudo/issues/5056

[21:14] <discord-raku-bot> <Nemokosch> üò¨

[21:15] <[Coke]> (500 error finally gone)

[21:15] <leont> multi-dispatch en conversion types still have a ton of issues

[21:15] <leont> Which apparently only I ever run into, because I'm reckless enough to use both

[21:17] <discord-raku-bot> <Nemokosch> to be honest, multiple dispatch is legitimately under-designed

[21:18] <discord-raku-bot> <Nemokosch> the semantics changed somewhere on the way but the conceptual process itself is still not clear

[21:21] *** jpn joined
[21:22] <leont> True. I've been bitten by multi-dispatch issues more often than any other class of issues

[21:23] <discord-raku-bot> <Nemokosch> By the way: do you maybe have a golf idea for the issue you linked that does NOT contain use of the coercion protocol?

[21:23] <discord-raku-bot> <Nemokosch> At the moment, I don't even feel the exact scope of the issue

[21:24] <discord-raku-bot> <Nemokosch> And also it would be good to see a bisect with a piece of code that might work on loads of versions

[21:29] *** Nemokosch joined
[21:29] <Nemokosch> bisectable6: multi foo(Int:D $n) { say "my int is $n"; }; multi foo(Str(Any:D) $s) { say "i obtained str $s"; };  foo 5

[21:29] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[21:30] <Nemokosch> maybe this can work

[21:30] <bisectable6> Nemokosch, Output on all releases: https://gist.github.com/b7a1e99d58fb816a514935eb69a2408c

[21:30] <bisectable6> Nemokosch, Bisecting by output (old=2020.08.2 new=2020.09) because on both starting points the exit code is 1

[21:30] <bisectable6> Nemokosch, bisect log: https://gist.github.com/a4b68a5ac86383971fd7e7d40b5edaf0

[21:30] <bisectable6> Nemokosch, (2020-08-20) https://github.com/rakudo/rakudo/commit/999680e657d3fe70abba2e33fcc7b770d88e5b81

[21:30] <bisectable6> Nemokosch, Bisecting by output (old=2018.09 new=2018.10) because on both starting points the exit code is 1

[21:31] <bisectable6> Nemokosch, bisect log: https://gist.github.com/d7fa6767631de7f9734ce93983d87bfc

[21:31] <bisectable6> Nemokosch, (2018-10-23) https://github.com/rakudo/rakudo/commit/0243275defec300098202e25bea7412f041ccacb

[21:31] <bisectable6> Nemokosch, Bisecting by output (old=2017.12 new=2018.01) because on both starting points the exit code is 1

[21:31] <bisectable6> Nemokosch, bisect log: https://gist.github.com/2f2ea2b7b2f2a976ee8934dc6a205ec8

[21:31] <bisectable6> Nemokosch, (2017-12-23) https://github.com/rakudo/rakudo/commit/6d65cf4ff9e941e2c644945dd1be32cd47249a05

[21:31] <bisectable6> Nemokosch, Output on all releases and bisected commits: https://gist.github.com/6b758a9be733399501d2c96a5cf01742

[21:31] <leont> The solution is simple: just get rid of the type smiley. It was needed in an earlier version of the code but not in the current

[21:32] <Nemokosch> sounds good :P

[21:33] <Xliff> Can someone help: https://gist.github.com/Xliff/43827ef39f5d46c1553b91f3e3b745e4

[21:33] <Nemokosch> actually I'm acting on someone else's behalf with this postgres business, it came up on discord

[21:34] <Xliff> There should be a golfed routine without GTK involvement at the bottom. Would really be a big help at this point. Thanks!

[21:35] <Nemokosch> Xliff: the lesson I learned with grammars lately is: always bet on name conflicts

[21:36] <Nemokosch> so without looking deep into it, I would advice you to just change "key" and "value" to names built-in stuff surely doesn't use and retry

[21:36] <Nemokosch> if that doesn't help, a major (and fairly bizarre) source of problems is eliminated at least

[21:44] <Nemokosch> ah no, probably not the issue here. I thought it was inside a grammar

[21:45] *** jpn left
[21:51] *** jgaz left
[21:55] *** Nemokosch1 joined
[21:57] <Xliff> Nemokosch, thanks for the thought, but these are token names. 

[21:58] <Xliff> Your point is well taken. I may change them just on principal.

[21:58] <Xliff> However I think it's the fact that they would be simple Match objects (no positional or associative items)... and I can't seem to get them processed without invoking a VMNull error for some reason.

[21:59] *** Nemokosch left
[22:02] <Nemokosch1> I got no error, by the way

[22:03] <Nemokosch1> it's just I don't know what to see

[22:04] *** Nemokosch1 is now known as Nemokosch

[22:28] *** Homer_Simpson joined
[22:31] <Xliff>  Nemokosch What kind of error. Can you post your output as a comment in the gist?

[22:38] <Nemokosch> it's there :)

[22:44] *** jjido joined
[22:48] *** CodeTortoise left
[23:24] <ab5tract> Is jonathan stowe around?

[23:24] <ab5tract> Or anyone from Raku-Noise-Gang?

[23:26] *** sena_kun left
[23:30] <Nemokosch> Jonathan Stowe is great

[23:34] <ab5tract> he is indeed. Does he use a handle in #raku?

[23:35] <Nemokosch> I'm not sure actually

[23:35] <Nemokosch> so... Calling Bool(int32) does not seem to work anymore, you say? This can even be an unwanted regression. The error seems too ugly.

[23:36] <ab5tract> It could be a regression caused by the new coercion protocol, maybe?

[23:36] <Nemokosch> let's find out

[23:36] <ab5tract> But I would argue using `so` is the nicer version anyway

[23:36] <Nemokosch> fair enough but maybe there is something to fix here

[23:37] <Nemokosch> bisectable6: say Bool(my int32 $ = 32)

[23:37] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[23:37] <Nemokosch> it's easy to overuse this bot :)

[23:37] <ab5tract> then again, I've always enjoyed `so`

[23:37] <bisectable6> Nemokosch, Output on all releases: https://gist.github.com/35812bd5b195568a459299892220912b

[23:37] <bisectable6> Nemokosch, Bisecting by output (old=2021.09 new=2021.10) because on both starting points the exit code is 1

[23:37] <ab5tract> Nemokosch: TIL of it's existence

[23:38] <Nemokosch> trust me, a couple of simple things can really boost your feel for Raku development

[23:38] <Nemokosch> this bot is one of the simple magic tricks

[23:39] <ab5tract> From the output, it looks like this never worked?

[23:39] <Nemokosch> yes... however, almost certainly because I chose a bad golf

[23:40] <Nemokosch> m: my int32 $foo = 32; say Bool($foo);

[23:40] <camelia> rakudo-moar 0562c8949: OUTPUT: ¬´True‚ê§¬ª

[23:40] <Nemokosch> and this does work even now...

[23:40] <Nemokosch> makes you wonder

[23:40] <ab5tract> it does indeed

[23:40] <bisectable6> Nemokosch, bisect log: https://gist.github.com/372bd2b6cb6c12e26020946efb031c48

[23:40] <bisectable6> Nemokosch, Bisecting by output (old=2020.11 new=2020.12) because on both starting points the exit code is 1

[23:41] <ab5tract> m: say Bool(my int32 $foo = 32)

[23:41] <camelia> rakudo-moar 0562c8949: OUTPUT: ¬´Impossible coercion from 'Int' into 'Bool': value is of unacceptable type BOOTInt‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:41] <ab5tract> now that's a headscratcher!

[23:41] <bisectable6> Nemokosch, bisect log: https://gist.github.com/309b29a52f413ea4323f7892c3b3ec4a

[23:41] <bisectable6> Nemokosch, (2020-12-08) https://github.com/rakudo/rakudo/commit/79d2aeab83f15de485a5e41a9c576a0f7bdc46f6

[23:41] <bisectable6> Nemokosch, Bisecting by output (old=2019.03.1 new=2019.07.1) because on both starting points the exit code is 1

[23:41] <bisectable6> Nemokosch, bisect log: https://gist.github.com/e3dfa83ebf344d7e5d5c3013be310f7c

[23:41] <bisectable6> Nemokosch, (2019-07-17) https://github.com/rakudo/rakudo/commit/f76ba52d14f7e0bd50297e23b96006ae06829d23

[23:42] <bisectable6> Nemokosch, Output on all releases and bisected commits: https://gist.github.com/4b55b49c5908e57ce23ddaeb5fa863f4

[23:42] <ab5tract> the golf you chose is actually good because it mirrors what the Audio::PortAudio code is doing

[23:42] <Nemokosch> finally...

[23:43] <ab5tract> maybe something going on at the spesh level?

[23:44] <Nemokosch> how does one turn spesh off, again?

[23:45] <Nemokosch> by the way...

[23:45] <Nemokosch> m: sub nati(-->int32) { 32 }; say nati().WHAT;

[23:45] <camelia> rakudo-moar 0562c8949: OUTPUT: ¬´(Int)‚ê§¬ª

[23:45] <Nemokosch> a bit bizarre isn't it

[23:45] <Nemokosch> I'm very tempted to run a bisect on this as well xD

[23:46] <ab5tract> MVM_SPESH_DISABLE=1

[23:46] <Nemokosch> thank you

[23:47] <ab5tract> m: sub nati(-->int32) { 32 }; say Bool(nati())

[23:47] <camelia> rakudo-moar 0562c8949: OUTPUT: ¬´Impossible coercion from 'Int' into 'Bool': value is of unacceptable type BOOTInt‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:47] <Nemokosch> but an "Int Int" does work, lol

[23:47] <Nemokosch> bisectable6: sub nati(-->int32) { 32 }; say nati().WHAT;

[23:47] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[23:47] <Nemokosch> had to...

[23:48] <Nemokosch> I hope somebody isn't paying fortunes to Amazon because of this

[23:48] <bisectable6> Nemokosch, ¬¶6c (66 commits): ¬´(Int)‚ê§¬ª

[23:48] <bisectable6> Nemokosch, Nothing to bisect!

[23:48] <Nemokosch> so it literally always did this

[23:50] <Nemokosch> perhaps native types don't even have this sort of metadata

[23:51] <Nemokosch> aha https://docs.raku.org/language/numerics#Auto-boxing well this part is clear then

[23:53] <ab5tract> I guess the autoboxing doesn't totally work when it is in a Capture or something?

[23:53] <ab5tract> m: sub nati(-->int) { 32 }; say Bool(nati())

[23:53] <camelia> rakudo-moar 0562c8949: OUTPUT: ¬´Impossible coercion from 'Int' into 'Bool': value is of unacceptable type BOOTInt‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:54] <Nemokosch> the funny thing is that .Bool would work

[23:54] <ab5tract> right?

[23:54] <ab5tract> m: sub nati(-->int) { 32 }; say nati().Bool

[23:54] <camelia> rakudo-moar 0562c8949: OUTPUT: ¬´True‚ê§¬ª

[23:54] <Nemokosch> tbh I don't know what sort of *syntax* Bool(...) even is here

[23:54] <ab5tract> now that's just offensive :)

[23:54] <Nemokosch> it doesn't seem to be a regular sub, not as &Bool at least

[23:55] <lizmat> in the case of use as an invocant, it *must* be HLLized, because natives are really just pieces of memory really

[23:55] <lizmat> and you can only call methods on objects

[23:56] <ab5tract> right, makes sense.

[23:56] <Nemokosch> however, it seems that the "int32" you get as return value is... somewhat boxed?

[23:56] <ab5tract> okay, I've got to sign off for now... thanks for digging into this oddity with me Nemokosch :0

[23:57] <Nemokosch> that's always fun :) byez

[23:57] <ab5tract> Nemokosch: I guess the call to `.WHAT` does the boxing

[23:57] <Nemokosch> Remember what it said: can't coerce *Int* to Bool blablabla

[23:58] <ab5tract> oh, right...

[23:58] <Nemokosch> there was no WHAT in that snippet

[23:58] <ab5tract> yeah, it said it couldn't coerce Int to Bool for type BOOTInt

[23:58] <Nemokosch> and it did work when we had a plain int32 variable and Bool'd that

[23:59] <Nemokosch> what disturbs me is that it apparently worked at some point and doesn't work now

[23:59] <Nemokosch> how did it work? what changed?

[23:59] <ab5tract> I'll check back later to see if the mystery has progressed

