[00:03] *** jpn_ left
[00:04] *** jpn joined
[00:42] *** sdomi joined
[01:46] *** jpn left
[01:47] *** jpn joined
[01:47] *** jpn left
[01:55] *** MasterDuke left
[02:23] *** MasterDuke joined
[03:11] *** derpydoo left
[03:13] *** jpn joined
[03:33] *** discoD left
[03:35] *** ProperNoun joined
[03:40] *** ProperNoun left
[03:53] *** jpn left
[03:54] *** jpn joined
[05:43] *** chmod222 left
[05:45] *** chmod222 joined
[06:50] *** abraxxa joined
[07:13] *** jpn left
[07:14] *** lichtkind_ joined
[07:20] *** jpn joined
[07:40] *** jpn left
[07:40] *** eseyman left
[07:41] *** eseyman joined
[07:45] *** jpn joined
[08:02] <ab5tract_> codesections: Another approach to tickets that are fixed in RakuAST is to leave them open until the release actually happens. This way users that encounter the same behavior in the base compiler will be less likely to accidentally open a duplicate ticket.

[08:06] *** xinming left
[08:08] *** xinming joined
[08:11] *** dakkar joined
[08:52] *** Sgeo left
[09:33] <lizmat> fwiw, that's how I envisioned the use of the "fixed in RakuAST" label

[09:39] <discord-raku-bot> <nemokosch> same ^^

[09:50] <discord-raku-bot> <codesections> O.o it didn't occur to me that users would be likely to limit their search to open issues! But yeah, that makes sense

[09:50] <lizmat> that's the default setting fwiw

[10:01] *** teatime left
[10:14] <ab5tract_> Nemokosch: I think your confusion over the fixed-ness of 5239 is because it was working for `* ~~ $_` and a few other cases.

[10:15] <ab5tract_> The fix for getting it working universally was actually a 5 minute change :)

[10:15] <ab5tract_> probably less time, actually

[10:21] <discord-raku-bot> <nemokosch> What I can remember is that you could get false negatives if you didn't set the topic at all

[10:22] <discord-raku-bot> <nemokosch> oh... * ~~ $_ is whatevercode

[10:22] <ab5tract_> right, which we determined was working a week or so ago

[10:23] <discord-raku-bot> <nemokosch> right, this works in RakuAST and not in the old frontend

[10:23] <discord-raku-bot> <nemokosch> (* ~~ $_)(10) will get you True and previously it said False

[10:23] <ab5tract_> and now I've got the behavior in 5239 fixed too

[10:23] <discord-raku-bot> <nemokosch> oh really? what was it?

[10:24] <ab5tract_> pushing now, one sec

[10:24] <ab5tract_> lizmat: another ticket that can get "Fixed in RakuAST" attached -- https://github.com/rakudo/rakudo/issues/5396#issuecomment-1758068696

[10:25] <lizmat> done

[10:27] <ab5tract_> nemokosch: https://github.com/rakudo/rakudo/pull/5411

[10:27] <ab5tract_> it looks like a classic thinko

[10:28] <discord-raku-bot> <nemokosch> I think the idea with "Fixed in RakuAST" was mainly three things: 1. to show that there is progress on the issue 2. to show developers that it's not the end of the world to not fix it in the old system if it seems complicated 3. to give some "regression tests" to RakuAST when it's ready

[10:34] <discord-raku-bot> <nemokosch> I'm trying to comprehend this code - well, it's not easy

[10:35] <ab5tract_> oh :(

[10:38] <ab5tract_> basically when the compiler calls that `IMPL-COMPILE-QAST` hook on a `RakuAST::Infix` node, by default we give it the QAST to call the `:infix<<$!operator>>` of that node

[10:39] <ab5tract_> the behavior of that operator is defined elsewhere, on the other side of the compiler (ie, base behavior)

[10:40] *** abraxxa left
[10:41] <ab5tract_> we already had a guard that says "if not a RakuAST::Var, instead compile my specialized QAST via IMPL-SMARTMATCH-QAST" 

[10:41] <ab5tract_> which is why `12 ~~ { $_ == 12}` works as expected even without this patch

[10:41] <discord-raku-bot> <nemokosch> I don't quite remember but there were operators that really turned into QAST-level method calls, rather than calling a subroutine

[10:41] <ab5tract_> and may have contributed to the confusion that this was already fixed

[10:45] <discord-raku-bot> <nemokosch> > Handle cases of s/// or m// separately. For a non-negating smartmatch this case could've been reduced to plain topic localization except that we must ensure a False returned when there is no match.

[10:45] <discord-raku-bot> <nemokosch> this is great news in its way

[10:45] <ab5tract_> yes, any operator can override some `IMPL-*` hooks and provide a different QAST tree to the backend. which is actually what my code does: generate the QAST to temporarize the topic variable and call accepts on the RHS

[10:46] <discord-raku-bot> <nemokosch> I'd really like these "smartmatches" to be completely different from the usual ACCEPTS way

[10:47] <ab5tract_> you could probably replace it with the QAST to just call equality on it

[10:47] <discord-raku-bot> <nemokosch> because they served as the reason matches couldn't be meaningfully smartmatched

[10:48] <discord-raku-bot> <nemokosch> smartmatch of matches had to always, unconditionally return the right handside

[10:48] <discord-raku-bot> <nemokosch> in order to make these two special cases work

[10:55] <ab5tract_> Re: the equality thing I was thinking of how my patch special cases `<foo> ~~ $_`, which should probably  almost always be true. But actually I believe we want to keep the `ACCEPTS` behavior here because someone may have overridden that method to do something exceptional.

[10:57] <ab5tract_> nemokosch: is there already a ticket for the match smartmatch misbehavior? 

[10:58] <discord-raku-bot> <nemokosch> I don't think so. It was more or less the natural consequence of "welcoming" m// and s/// to the smartmatches, I talked a lot about how I don't like it but it would have been weird to call it a "bug"

[11:04] *** Geth left
[11:04] *** Geth joined
[11:06] <discord-raku-bot> <nemokosch> m: say 1 ~~ 'almafa'.match(/a./)

[11:06] <evalable6> nemokosch, rakudo-moar 0c5f5ddb2: OUTPUT: ¬´ÔΩ¢alÔΩ£‚ê§¬ª

[11:06] <discord-raku-bot> <Raku eval>  ÔΩ¢alÔΩ£ 

[11:06] <discord-raku-bot> <nemokosch> this is "the ticket" üòÑ

[11:07] <discord-raku-bot> <nemokosch> I think actually an array of matches is also special cased, for a similar reason

[11:09] <discord-raku-bot> <nemokosch> here is an example of an internal "magic" method being called: https://user-images.githubusercontent.com/37218286/265266502-4d68b07f-9b97-46cb-9439-e329aae9b823.png

[11:09] <discord-raku-bot> <nemokosch> dispatch:<var>

[11:10] *** lichtkind_ left
[11:48] <ab5tract_> I've never really run into this in the wild

[11:48] <ab5tract_> I wonder if things could be cleaned up a bit there though, without hurting anything

[12:17] *** derpydoo joined
[12:50] *** TieUpYourCamel left
[13:00] *** jpn left
[13:02] *** TieUpYourCamel joined
[13:35] *** abraxxa joined
[13:46] *** jpn joined
[14:17] *** abraxxa left
[14:22] *** ProperNoun joined
[14:28] *** jpn left
[14:32] *** jmcgnh left
[14:43] *** jpn joined
[14:49] *** jmcgnh joined
[14:55] *** discoD joined
[14:58] *** discoD left
[14:58] *** discoD joined
[15:13] *** Sgeo joined
[15:25] *** swaggboi left
[15:29] *** swaggboi joined
[16:17] *** discord-raku-bot left
[16:17] *** unicodable6 left
[16:17] *** discord-raku-bot joined
[16:18] *** coverable6 left
[16:19] *** sourceable6__ joined
[16:19] *** lucerne left
[16:19] *** sourceable6 left
[16:19] *** benchable6 left
[16:19] *** notable6 left
[16:19] *** benchable6__ joined
[16:19] *** wheaties left
[16:19] *** notable6__ joined
[16:20] *** unicodable6 joined
[16:20] *** dutchie left
[16:20] *** Ekho left
[16:20] *** dutchie joined
[16:21] *** coverable6 joined
[16:21] *** lucerne joined
[16:21] *** nebuchad` left
[16:24] *** unicodable6 left
[16:24] *** unicodable6 joined
[16:34] *** Ekho joined
[16:40] *** dakkar left
[17:28] *** jpn left
[17:34] <tonyo> .

[17:35] <jdv> ,

[17:35] <El_Che> ;

[17:35] <El_Che> I win!

[18:54] *** Geth left
[18:54] *** Geth joined
[19:28] *** Geth left
[19:28] *** Geth joined
[19:30] *** tellable6 left
[19:30] *** tellable6 joined
[19:49] *** chmod222 left
[20:32] *** jpn joined
[21:52] *** chmod222 joined
[22:31] *** derpydoo left
[22:31] *** jpn left
[23:18] *** buildable6 left
[23:19] *** discoD left
[23:21] *** buildable6 joined
[23:32] *** coleman left
[23:33] *** coleman joined
