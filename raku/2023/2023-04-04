[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:07] <uzl[m]> > <@uzluisf:matrix.org> Howdy everyone, long time no see :)!... (full message at <https://libera.ems.host/_matrix/media/v3/download/libera.chat/23b222b0a0a1b7fc14e0806f3d24a1176e57d555>)
[01:00] *** linkable6 left
[01:00] *** evalable6 left
[01:01] *** evalable6 joined
[01:02] *** linkable6 joined
[01:21] <guifa_> wait so it's really a ::U and not :U?
[01:22] * guifa_ tries it
[01:22] <guifa_> wow
[02:02] *** evalable6 left
[02:02] *** linkable6 left
[02:02] *** linkable6 joined
[02:03] *** evalable6 joined
[02:11] *** tea3po joined
[02:15] *** teatwo left
[02:27] *** MasterDuke joined
[02:27] <tonyo> .tell melehzik please give the fez issue you were having with busybox another try with v51
[02:27] <tellable6> tonyo, I haven't seen melehzik around, did you mean melezhik?
[02:27] <tonyo> yes
[02:28] <tonyo> .tell melezhik please give the fez issue you were having with busybox another try with v51
[02:28] <tellable6> tonyo, I'll pass your message to melezhik
[03:05] *** xinming left
[03:07] *** xinming joined
[03:15] *** derpydoo joined
[04:04] *** razetime joined
[04:30] *** euandreh left
[05:14] *** derpydoo left
[05:15] *** razetime left
[05:16] *** razetime joined
[05:16] *** epony joined
[05:55] *** razetime left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:13] *** razetime joined
[07:13] *** coverable6 left
[07:13] *** reportable6 left
[07:13] *** committable6 left
[07:13] *** sourceable6 left
[07:13] *** squashable6 left
[07:13] *** releasable6 left
[07:13] *** shareable6 left
[07:13] *** bloatable6 left
[07:13] *** statisfiable6 left
[07:13] *** notable6 left
[07:13] *** tellable6 left
[07:13] *** benchable6 left
[07:13] *** unicodable6 left
[07:13] *** quotable6 left
[07:13] *** benchable6 joined
[07:13] *** coverable6 joined
[07:14] *** notable6 joined
[07:14] *** unicodable6 joined
[07:14] *** sourceable6 joined
[07:14] *** statisfiable6 joined
[07:14] *** quotable6 joined
[07:15] *** reportable6 joined
[07:15] *** tellable6 joined
[07:15] *** releasable6 joined
[07:15] *** bloatable6 joined
[07:15] *** squashable6 joined
[07:15] *** shareable6 joined
[07:16] *** committable6 joined
[07:18] *** abhinav left
[07:31] *** abhinav joined
[07:46] *** Sgeo_ left
[07:57] *** razetime left
[08:06] *** nine left
[08:06] *** m_athias left
[08:06] *** nine joined
[08:06] *** m_athias joined
[08:13] *** razetime joined
[08:14] *** dakkar joined
[08:22] *** sena_kun joined
[08:28] *** derpydoo joined
[08:33] *** grondilu joined
[08:33] <grondilu> m: put ^3 .map: {$*=-1}
[08:33] <camelia> rakudo-moar e6e287619: OUTPUT: «-1 -1 -1␤»
[08:35] <grondilu> weird, that is not what I get on my machine
[08:35] <grondilu> wait
[08:35] <grondilu> m: say ^3 .map: {$*=-1}
[08:35] <camelia> rakudo-moar e6e287619: OUTPUT: «(-1 1 -1)␤»
[08:36] <grondilu> m: say (^3 .map: {$*=-1}).gist
[08:36] <camelia> rakudo-moar e6e287619: OUTPUT: «(-1 1 -1)␤»
[08:36] <grondilu> m: say (^3 .map: {$*=-1}).Str
[08:36] <camelia> rakudo-moar e6e287619: OUTPUT: «-1 -1 -1␤»
[08:37] <grondilu> m: say (^3 .map: {$*=-1})[1]
[08:37] <camelia> rakudo-moar e6e287619: OUTPUT: «1␤»
[08:38] <grondilu> m: say (^3 .map: {$*=-1}).Str.words[1]
[08:38] <camelia> rakudo-moar e6e287619: OUTPUT: «-1␤»
[08:38] <grondilu> looks like a bug tbh
[08:39] <grondilu> let's try with a simpler state var
[08:39] <grondilu> m: say (^3 .map: {$++})[1]
[08:39] <camelia> rakudo-moar e6e287619: OUTPUT: «1␤»
[08:39] <grondilu> m: say (^3 .map: {$++}).Str.words[1]
[08:39] <camelia> rakudo-moar e6e287619: OUTPUT: «1␤»
[08:39] <grondilu> m: say ^3 .map: {$++}
[08:39] <camelia> rakudo-moar e6e287619: OUTPUT: «(0 1 2)␤»
[08:39] <grondilu> m: put ^3 .map: {$++}
[08:39] <camelia> rakudo-moar e6e287619: OUTPUT: «0 1 2␤»
[08:39] <grondilu> that is fine
[08:45] *** euandreh joined
[09:27] *** jpn joined
[10:17] *** grondilu left
[10:19] *** razetime left
[10:19] *** jpn left
[10:22] *** jpn joined
[10:24] *** xinming left
[10:26] *** xinming joined
[10:28] *** jpn left
[11:20] *** jpn joined
[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:20] *** derpydoo left
[13:01] *** Nemokosch joined
[13:04] <Nemokosch> grondilu: I suspect this has something to do with which operations copy and which do not
[13:04] <tellable6> Nemokosch, I'll pass your message to grondilu
[13:05] <Nemokosch> m: say (^3 .map: {++$}).Str.words[1] # I'd expect this to behave like the *= version
[13:05] <camelia> rakudo-moar 88e479f88: OUTPUT: «2␤»
[13:05] <Nemokosch> welp, maybe I was wrong
[13:07] <Nemokosch> m: my \state = 'hmm'; say state
[13:07] <camelia> rakudo-moar 88e479f88: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed state␤at <tmp>:1␤------> my \state = 'hmm'; say state⏏<EOL>␤»
[13:08] <Nemokosch> this might be an issue
[13:08] <lizmat> it's more a case of DIHWIDT
[13:09] <lizmat> m: my \my = 42; say my
[13:09] <camelia> rakudo-moar 88e479f88: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> my \my = 42; say my⏏<EOL>␤»
[13:09] <Nemokosch> is there any non-metamodel way to access a variable like that?
[13:10] <Nemokosch> if not, perhaps it could be banned from declaration
[13:10] <lizmat> m: 'my \my = 42; say MY::<my>
[13:10] <camelia> rakudo-moar 88e479f88: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 'my \my = 42; say MY::<my>⏏<EOL>␤    expecting any of:␤    …»
[13:10] <lizmat> m: my \my = 42; say MY::<my>
[13:10] <camelia> rakudo-moar 88e479f88: OUTPUT: «42␤»
[13:10] <Nemokosch> fair enough
[13:10] <Nemokosch> frankly I just coincidentally named it \state, not considering that it's a collision
[13:12] <Nemokosch> hm, maybe I wasn't that far off with my hypothesis
[13:12] <lizmat> I guess we should make it impossible to name a lexical "my", "our" or "state"
[13:13] <Nemokosch> m: my \stateful = $; (stateful++ =:= stateful, ++stateful =:= stateful, (stateful *= -1) =:= stateful).say
[13:13] <camelia> rakudo-moar 88e479f88: OUTPUT: «(False False True)␤»
[13:14] <Nemokosch> so I think this is the reason the ++ version(s) worked but not the $*=-1 version
[13:15] <Nemokosch> $++ and ++$ created 3 independent values that can be observed individually
[13:15] <Nemokosch> $*=-1 just pushed references to the same variable, as it undergoes mutation
[13:16] <Nemokosch> I'm more surprised, for one, that ++$ did copy
[13:19] *** Nemokosch left
[13:33] *** jgaz joined
[14:10] *** teatwo joined
[14:13] *** tea3po left
[14:16] *** TieUpYourCamel left
[14:30] <[Coke]> japhb: with your terminal work, do you have a way that I can have a footer (with, say, a progress bar) but emit output that scrolls by above it? (I think it's called a viewport in some contexts)
[14:30] <[Coke]> I'm using Terminal::Spinners, but then any output causes the spinner to scroll off the screen, then get redrawn on the next step
[14:55] *** epony left
[15:01] *** epony joined
[15:09] <tonyo> [Coke]: what're you writing with spinners?
[15:12] *** Sgeo joined
[15:12] * lizmat clickbaits https://rakudoweekly.blog/2023/04/03/2023-14-fulldist/
[15:32] <[Coke]> tonyo: digging through a few million lines of code in a few hundred git repos, put up a progress bar so I know it's working.
[15:32] <[Coke]> (and then added progress bars to everything, even the noiser ones)
[15:33] <[Coke]> (... and then the next person to run the scripts did them in Comma, which does NOT really work with the codes that spinner's use, wonder if I should open a bug report on that.)
[15:42] <[Coke]> ls
[15:43] <lizmat> fg
[15:50] <lucs> Doing a .resume in an exception handler appears to be pretty noisy: stdout sees "(HANDLED) …"
[15:50] <lucs> Any way to avoid that message?
[15:50] <lizmat> lucs: code?
[15:51] <lucs> I'll golf something down, sure.
[15:51] <lizmat> m: CATCH { .resume }; say "here"; die; say "still here"
[15:51] <camelia> rakudo-moar bd084fc3e: OUTPUT: «here␤still here␤»
[15:51] <lizmat> seems pretty silent to me
[15:52] *** jpn left
[15:53] <lucs> Sure is :) Not sure why mine is noisy -- trying to build...
[15:58] <lucs> m: try { CATCH { default { .resume; }; }; put +"asdf" }
[15:58] <camelia> rakudo-moar bd084fc3e: OUTPUT: «(HANDLED) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏asdf' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»
[15:59] <lucs> I'm betting it's because it's something I don't understand about how the handling occurs :)
[16:00] <lizmat> m: CATCH { default { .resume; }; }; put +"asdf"
[16:00] <camelia> rakudo-moar bd084fc3e: OUTPUT: «This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[16:01] <lizmat> that is the root of the problem
[16:01] <lizmat> lucs: are you interested into *why* something failed, or do you just want to ignore the problem ?
[16:01] <lucs> I was right: I don't understand :) -- but I'll think it over.
[16:02] <lizmat> you're mixing try and CATCH, which is a code smell
[16:02] <lucs> Oh, I'm just trying to figure out how all this exception handling works.
[16:02] <lizmat> m: try put +"asdf"    # silent
[16:02] <camelia> rakudo-moar bd084fc3e: ( no output )
[16:02] <lizmat> m: CATCH { dd $_ }; put +"asdf"  # looking at the type of error
[16:02] <camelia> rakudo-moar bd084fc3e: OUTPUT: «X::Str::Numeric.new(source => "asdf", pos => 0, reason => "base-10 number must begin with valid digits or '.'")␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏asdf' (indicated by ⏏)␤  in block <un…»
[16:03] <lizmat> you usually either use CATCH, if you want to know why something went wrong
[16:03] <lizmat> or just try (WITHOUT CATCH) if you just want to make sure the program won't die
[16:03] <ugexe> i use CATCH inside try when I want it scoped tighter
[16:04] <ugexe> thats probably the only good reason to do it though
[16:04] <lizmat> right, and then you know what you're doing and understand the exact semantics of try and CATCH in Raku
[16:05] <lizmat> for people trying to figure it out, learning to just use try *or* use CATCH in generally a good advice
[16:07] <ugexe> maybe. i think bare CATCH can be surprising to new people unless they already know that the entire scope (including code above and below) are now essentially wrapped in a try block
[16:07] <tonyo> m: CATCH { when X::Str::Numeric { say 'Numeric' }; default { say 'default'; }; }; put +'asdf';
[16:07] <camelia> rakudo-moar bd084fc3e: OUTPUT: «Numeric␤»
[16:08] <tonyo> m: dd try { put +'asdf'; CATCH { 1; }; };
[16:08] <camelia> rakudo-moar bd084fc3e: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏asdf' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»
[16:08] <tonyo> m: dd try { put +'asdf'; CATCH { default { .resume; }; 1; }; };
[16:08] <camelia> rakudo-moar bd084fc3e: OUTPUT: «(HANDLED) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏asdf' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Nil␤»
[16:09] <tonyo> m: CATCH { when X::Str::Numeric { say 'Numeric' }; default { say 'default'; }; }; put +'asdf'; # lucs - if you want to handle typed errors differently 
[16:09] <camelia> rakudo-moar bd084fc3e: OUTPUT: «Numeric␤»
[16:09] <lucs> https://gist.github.com/lucs/31159810c43a0c18e5265d38b10f9120
[16:16] <lucs> Is my example far-fetched? Seems kinda legit to me.
[16:16] <ugexe> you understand what is happening right?
[16:16] <ugexe> as lizmat pointed out that exception isn't resumable
[16:16] <lizmat> except that X::Str::Numeric isn't resumable
[16:17] <lucs> Hmm... Is it just X::Str::Numeric (and others) that isn't resumable?
[16:18] <lucs> And how could I tell, or how could I make my own exceptions resumable or not?
[16:19] <lucs> By the way, in my example, it appears that the .resume is working, no?
[16:20] <lizmat> no, the resume throws, and is caught by the try
[16:21] <lucs> It appears that it's the divide by 0 that throws the second time, no?
[16:22] <ugexe> i don't think the `try` applies to inside the CATCH block
[16:24] <ugexe> if it did then it'd probably be best to never use CATCH inside a try block, and instead put it inside bare blocks
[16:24] <lucs> ugexe: Seems it does: see updated gist: https://gist.github.com/lucs/31159810c43a0c18e5265d38b10f9120
[16:25] <tonyo> m: CATCH { X::Str::Numeric { try .resume; }; default { 'default'.say; }; }; put +'asdf'; say 'hi';
[16:25] <camelia> rakudo-moar bd084fc3e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> CATCH { X::Str::Numeric⏏ { try .resume; }; default { 'default'.s␤    expectin…»
[16:25] <lucs> ugexe: (Unless I'm misunderstanding what you're saying.)
[16:25] <ugexe> lucs: I agree with "It appears that it's the divide by 0 that throws the second time, no?" 
[16:27] <ugexe> but i also don't have a firm grasp of what is happening either lol, im just speaking out loud
[16:27] <lucs> The way I see/understand it, the way it's handling all this is quite correct, it's just the "(HANDLING)…" that I'd like not to have.
[16:28] <lucs> Er, "(HANDLED)…".
[16:28] <ugexe> like I expect that `when X::Str::Numeric { die 666 }`  would die, despite the fact it is inside a try block
[16:28] <lucs> Oh, let me try that...
[16:30] <lucs> Yep, it does:  "666␤  in block…", that's it.
[16:31] <lucs> Maybe if there was a try block inside the X::Str::Numeric handler, it would… do something different.
[16:32] <lucs> Anyway, not sure about that (HANDLED), but there it is.
[16:35] *** dakkar left
[16:37] <ugexe> https://github.com/MoarVM/MoarVM/blob/1e5b83d5c62c4afb362b566c3e0509a25ef695ff/src/core/exceptions.c#L815-L820
[16:37] <ugexe> thats where the exception comes from
[16:38] <ugexe> if you wrap your code in a subroutine it behaves different
[16:38] <ugexe> i wonder if .resume inside the mainline can behave strangely
[16:40] <lucs> This is a bit (a lot) over my head.
[16:40] <lucs> I believe I'll apply the KISS principle in my code :)
[16:43] <ugexe> actually i dont think it acts different, I just messed up my test code
[16:44] <ugexe> I was trying to see what makes an exception resumable though
[16:45] <lucs> Oh, by different, I just meant I don't know exactly offhand what would happen, given the different embedded blocks.
[16:47] * lucs goes for lunch
[17:05] *** Sauvin left
[17:06] *** Sauvin joined
[17:08] *** Bocaneri joined
[17:09] *** Bocaneri is now known as Guest9137
[17:11] *** Sauvin left
[17:49] <japhb> [Coke]: If you're asking whether I have widgets in my full-terminal TUI that handle scrolling output, then yeah, that was one of the earliest widgets I did.  Probably needs some updates to bring in line with most recent widget core improvements, actually.
[17:50] <japhb> If you mean, do I have something now that produces the effect you're talking about *in a normal CLI*, then kinda, sorta, a hack ... but not something immediately usable (or installable) by others.
[17:59] <[Coke]> Would be great if we had a viewport module - I could definitely use it for these work one offs. If you want to collaborate on something, I can start with your WIP.
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:28] <japhb> [Coke]: Ah interesting, lemme think about what I can pull out.  
[18:35] *** grondilu joined
[18:36] <japhb> [Coke]: Does your use case require proper handling of embedded control codes?  If so, is it just stuff like ANSI coloring, or do you need to literally spawn a TUI child that thinks it has a slightly smaller viewport?
[18:43] *** grondilu left
[18:56] *** Guest9137 is now known as Sauvin
[19:56] *** linkable6 left
[19:56] *** evalable6 left
[19:59] *** evalable6 joined
[19:59] *** linkable6 joined
[20:10] *** jgaz left
[20:16] *** Geth__ joined
[20:16] *** lizmat_ joined
[20:16] *** RakuIRCLogger left
[20:17] *** RakuIRCLogger joined
[20:18] *** Geth left
[20:18] *** lizmat left
[20:18] *** lizmat_ left
[20:19] *** lizmat joined
[20:25] <[Coke]> The part outside the viewport (the footer) needs enough to show the progress bar, but the port itself is just raw text. (like, the output of a 100 git commands, or something)
[20:29] *** discord-raku-bot joined
[20:34] <tonyo> [Coke]: you could just fire up vim and keep setting the status bar
[20:35] <tonyo> (haha)
[20:41] <japhb> [Coke]: Are they 100 *parallel* git commands, or *serialized*?
[20:44] <japhb> [Coke]: And is the Raku program controlling the launching of those commands, or just reading logs therefrom (where the actual commands are spawned by some other external process)?
[20:57] <japhb> Dammit [Coke], you successfully nerd sniped me.  Now my brain has completely task switched to this problem.
[21:05] *** TieUpYourCamel joined
[21:33] *** heartburn left
[21:40] *** heartburn joined
[22:17] *** lizmat left
[22:18] *** lizmat joined
[22:19] <lucs> Welp, after hours of golfing, I found out... something.
[22:19] <lucs> m: class Foo { class Lbel::Excep is Exception { } }; Foo::Lbel::Excep.new.throw;
[22:19] <camelia> rakudo-moar f380b87ba: OUTPUT: «Died with Foo::Lbel::Excep␤  in block <unit> at <tmp> line 1␤␤»
[22:19] <lucs> m: class Foo { class Label::Excep is Exception { } }; Foo::Label::Excep.new.throw;
[22:19] <camelia> rakudo-moar f380b87ba: OUTPUT: «Could not find symbol '&Excep' in 'Foo::Label'␤  in block <unit> at <tmp> line 1␤␤»
[22:20] <lizmat> yeah, fully qualified names are *NOT* relative
[22:21] <lucs> Looks like half-and-half.
[22:21] *** lizmat left
[22:21] *** RakuIRCLogger joined
[22:21] <[Coke]> japhb: MUAHAHAHA
[22:22] *** lizmat joined
[22:22] <lucs> The first one works as expected, but the second one fails, because of the name "Label" which is a built-in class (any such name makes it fail in the same way.)
[22:22] <lizmat> ah... interesting
[22:22] <[Coke]> japhb: the commands run in parallel. I can save the output and emit it after each chunk, though.
[22:22] <[Coke]> japhb: raku has a list of repos, and then races the list, cloning or updating the repos.
[22:23] <lucs> I was naming my exception classes X::Whatever and running into this problem.
[22:23] <lucs> Took me a while to figure out what was going.
[22:23] <[Coke]> output as we go, spinner updated after each git command
[22:23] <lucs> Well actually, I still don't know what's going on, but at least I now know what to avoid :)
[22:26] <lucs> I hit the problem with exceptions, but maybe that's irrelevant.
[22:26] <lucs> I'll need to golf some more...
[22:28] *** abhinav left
[22:32] <lucs> Yep, it's more general:
[22:33] <lucs> m: class Foo { class Lbel::Jub { } }; Foo::Lbel::Jub.new;
[22:33] <camelia> rakudo-moar f380b87ba: ( no output )
[22:33] <lucs> m: class Baz { class Label::Jub { } }; Baz::Label::Jub.new;
[22:33] <camelia> rakudo-moar f380b87ba: OUTPUT: «Could not find symbol '&Jub' in 'Baz::Label'␤  in block <unit> at <tmp> line 1␤␤»
[22:35] <lucs> Current lesson: don't name my classes using elements of names of built-in classes.
[22:35] <lucs> lizmat: Does this deserve opening an issue, and if so, not sure how to title it...
[22:41] <lucs> Hmm... Maybe it's not just built-in classes, but any class names that are already declared (or something).
[22:44] <lucs> Yep:
[22:44] <lucs> m: class Foo { }; class Baz { class Foo::Jub { } }; Baz::Foo::Jub.new;
[22:44] <camelia> rakudo-moar f380b87ba: OUTPUT: «Could not find symbol '&Jub' in 'Baz::Foo'␤  in block <unit> at <tmp> line 1␤␤»
[22:45] <lucs> So scope resolutiion is... interesting.
[23:08] *** bigdata joined
[23:09] <tonyo> that looks like a bug
[23:09] <tonyo> m: class Foo { }; class Baz { our class Foo::Jub { } }; Foo::.keys.say;
[23:09] <camelia> rakudo-moar f380b87ba: OUTPUT: «(Jub)␤»
[23:11] <lucs> m: class Foo { }; class Baz { our class Foo::Jub { } }; Baz::.keys.say;
[23:11] <camelia> rakudo-moar f380b87ba: OUTPUT: «()␤»
[23:11] <lucs> m: class Foo { }; class Baz { class Foo::Jub { } }; Baz::.keys.say;
[23:11] <camelia> rakudo-moar f380b87ba: OUTPUT: «()␤»
