[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:01] *** statisfiable6 left
[01:01] *** unicodable6 left
[01:01] *** committable6 left
[01:01] *** coverable6 left
[01:01] *** releasable6 left
[01:01] *** reportable6 left
[01:02] *** releasable6 joined
[01:02] *** statisfiable6 joined
[01:02] *** committable6 joined
[01:02] *** reportable6 joined
[01:02] *** unicodable6 joined
[01:03] *** coverable6 joined
[01:04] *** xinming left
[01:06] *** xinming joined
[01:19] *** deoac joined
[02:15] *** teatwo joined
[02:19] *** teatime left
[03:00] <Voldenet> ><Nemokosch> just imagine if it even was a well-designed language in addition…

[03:00] <Voldenet> I believe that perl5 is fast precisely because it was created with specific tasks in mind

[03:04] <Voldenet> in comparison languages like python, ruby or raku are too general to optimize for those specific tasks (and specific-task optimizations will end up as pure C)

[03:19] *** evalable6 left
[03:19] *** linkable6 left
[03:19] *** evalable6 joined
[03:19] *** linkable6 joined
[03:58] *** rf left
[03:59] *** gabiruh left
[04:03] *** gabiruh joined
[04:55] *** deoac left
[05:01] *** derpydoo joined
[05:01] <avuserow> tonight I released (yet another) module for making SQL called SQL::Builder - and wrote a small blogpost on why: https://dev.to/avuserow/sqlbuilder-making-the-complex-sql-query-manageable-in-raku-4mgn

[05:12] <Voldenet> avuserow: that's cool, does it support some sort of `$sql.from('songs', 's').where("s.name = sandstorm")`?`

[05:12] <Voldenet> using aliases is fairly important

[05:14] <Voldenet> also, `["a", "=", 1]` for predicates is fairly awkward, you could accept something like `*.a == 1` by creating infix ops for basic operators and executing that WhateverCode using some operator that'd capture this state

[05:14] <avuserow> yes, `from` can take a Pair to determine the alias: `$sql.from(:s<songs>).where(["s.name", "=", "sandstorm"])`

[05:15] <Voldenet> iirc Red does something like that

[05:17] <avuserow> The most likely path forward is to have a lightweight Table/Column type, then have methods/operators on the column

[05:17] <Voldenet> yeah, something like that

[05:18] <Voldenet> I'd mention something about CTEs but I don't think I've ever seen a query builder supporting it

[05:19] <Voldenet> On mssql some queries can have their performance altered through the use of CTEs

[05:19] <avuserow> though RakuAST may open other options. If I can know that I'm within a where clause, then I can possibly rewrite things into the three-tuple versions at compile time

[05:20] <Voldenet> Possibly macros would add some cool features without that much pain

[05:20] <avuserow> then I don't need to make a ton of runtime things, and it could look even more like SQL

[05:20] <Voldenet> currently evaluating contents of WhateverCode is a thorny path

[05:21] <Voldenet> in fact, the only lib I've seen handling CTEs is linq2db for csharp (https://linq2db.github.io/articles/sql/CTE.html)

[05:22] <avuserow> I don't have a particular use for CTEs but I don't think they'd be that hard to support

[05:23] <Voldenet> Well, the only really important use is recursive CTEs

[05:23] <avuserow> since the SelectBuilder object exists, you could have something like... `my $q = $sql.with($with-def, $inner-q).from(...).select(...)`

[05:24] <avuserow> it would be kind of syntactically like the subquery support with FROM/JOIN clauses

[05:24] <Voldenet> Mssql likes to build parallel queries when you use that, which allocate tons of memory

[05:25] <Voldenet> with CTE you could (not sure about current versions, so I'm using past tense) tell it to not do that

[05:25] <avuserow> linq was a very very vague inspiration, mostly with `from` being the constructor for SelectBuilder

[05:25] <avuserow> that's kind of interesting

[05:27] <avuserow> I actually haven't used this with anything but postgres and sqlite. There's definitely some postgres bias in the syntax, especially casting. I may add some compatibility options there

[05:28] <avuserow> is mssql generally available to test out and use?

[05:28] <Voldenet> development edition is free as long as you're not using it in prod

[05:29] <Voldenet> which contains all the features

[05:32] <Voldenet> erm, developer edition

[05:33] <avuserow> okay, good to know

[05:34] <avuserow> I'm going to call it a night. thanks for reading!

[05:36] <Voldenet> np, thanks for good library to use :)

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:44] *** jpn joined
[06:51] *** jpn left
[06:56] <discord-raku-bot> <Nemokosch> Voldenet: I doubt Perl5 is fast because of the magic variables, the concept of different "contexts" that can mess up the return value you are trying to use, the lack of proper function signatures (weee, got added in 5.36 or something) and so on

[06:56] *** jpn joined
[06:58] <Voldenet> wantarray is definitely the killer performance feature

[06:58] <Voldenet> :>

[06:59] <Voldenet> But honestly, I don't mean the language design at all, just what was the end goal

[07:00] <Voldenet> If you start with things to do and ignore things like syntax, you end up working only on performance while skipping crucial things

[07:02] <Voldenet> I know because I've built a few for-specific-purpose "languages" that were hideous to use outside of very specific task, but fast and easy for one thing

[07:04] <Voldenet> ("languages" because they used json/tsv for commands)

[07:05] <discord-raku-bot> <Nemokosch> well endless bikeshedding about mundane things like syntax does no good either, that's for sure

[07:06] <Voldenet> that's how you end up without multiline lambdas (python) or no signatures (perl)

[07:06] <Voldenet> or generics (golang for a long while)

[07:06] <discord-raku-bot> <Nemokosch> From what I know, the lack of multiline lambdas was a very deliberate choice in Python

[07:07] <Voldenet> because "it would increase complexity of parsing"

[07:07] <discord-raku-bot> <Nemokosch> not only that

[07:07] <discord-raku-bot> <Nemokosch> On the other hand, I don't think there is any reason to protect the lack of function signatures in Perl

[07:07] <Voldenet> you could say that no signatures for a long while was a deliberate choice for perl, because it would significantly increase complexity… ;)

[07:08] <discord-raku-bot> <Nemokosch> yeah yeah, it's so complex that even C had them from the beginning and without explicit variable definition since like 1990

[07:10] <Voldenet> it used to have some amazing syntax `int foo(bar, baz) char* bar; int baz; { … }`

[07:10] <Voldenet> iirc

[07:10] <discord-raku-bot> <Nemokosch> yep, that's what I was referring to as "explicit variable definition"

[07:12] <Voldenet> still, working on performance instead of the language isn't bad tradeoff

[07:12] <discord-raku-bot> <Nemokosch> as long as it doesn't lead to decisions (or lack of decisions) like this, it's not

[07:12] <Voldenet> perl has Keyword::Declare now, so it's fairly easy to add missing features

[07:14] <discord-raku-bot> <Nemokosch> At the end of the day, I don't think you can revert trends just by the virtue of making good design decisions so there's also that

[07:14] *** jpn left
[07:15] <discord-raku-bot> <Nemokosch> However, that's not to say that the broader Perl community shouldn't think about what they keep getting constantly wrong, that even JS and PHP managed to fix themselves over time

[07:15] <Voldenet> *cough*

[07:16] <discord-raku-bot> <Nemokosch> PHP basically started off as "Perl, the bad parts"

[07:16] <discord-raku-bot> <Nemokosch> and now it's a hundred times better language

[07:17] <Voldenet> "was it strparse, parsestr, str_parse, or parse_str"

[07:18] <Voldenet> imo php keeps thinking about performance more than syntax

[07:18] <discord-raku-bot> <Nemokosch> which should REALLY make everyone think who obsesses over eternal backwards compatibility

[07:19] <discord-raku-bot> <Nemokosch> they managed to improve the language significantly, DESPITE not even focusing on that

[07:19] <Voldenet> I do love seeing C++20 codebase with some ancient C++ headers ;)

[07:20] <discord-raku-bot> <Nemokosch> you meant to say C headers 😼

[07:21] <Voldenet> "good C headers (k&r style)" won't compile in C++ fortunately

[07:21] <Voldenet> :P

[07:21] <discord-raku-bot> <Nemokosch> well they don't have to compile 😛

[07:21] *** sena_kun joined
[07:21] <Voldenet> tbh. there's healthy balance between language features and performance and I consider perl to not strike that balance well, but it explains why it's fast :P

[07:23] <Voldenet> otoh you could argue that raku doesn't in the other direction, but while improving performance is measurable, improving syntax isn't

[07:23] <discord-raku-bot> <Nemokosch> For Python - I do think that lack of fully blown lambdas was mostly a "social" decision, just like Guido forced reduce out of the core language

[07:23] <Voldenet> so it's better to have better syntax first

[07:24] <discord-raku-bot> <Nemokosch> Python is most definitely not a "design by committee" language. Whatever GvR set his mind on, had to be that way; in return it has always had a consistent vision

[07:45] *** sena_kun left
[08:00] *** xkr47 left
[08:00] *** jpn joined
[08:05] *** jpn left
[08:09] *** jpn joined
[08:14] *** xkr47 joined
[08:15] *** jpn left
[08:17] *** MoC joined
[08:37] *** lizmat left
[08:38] *** lizmat joined
[09:08] *** jpn joined
[09:13] *** jpn left
[09:56] *** jpn joined
[10:02] *** jpn left
[10:09] *** Sgeo left
[10:33] *** kurahaupo joined
[10:35] *** kurahaupo left
[10:36] *** kurahaupo joined
[10:49] *** frost joined
[10:58] *** kurahaupo left
[10:58] *** kurahaupo joined
[10:59] *** sftp left
[11:02] *** sftp joined
[11:26] *** kurahaupo left
[11:26] *** kurahaupo joined
[11:47] *** MoC left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:17] *** MoC joined
[12:35] *** sena_kun joined
[13:14] <discord-raku-bot> <Anton Antonov> Which produced a deceptively simplistic programming language.

[13:14] *** derpydoo left
[13:36] <discord-raku-bot> <Nemokosch> "A new BASIC", as some would say

[14:14] *** linkable6 left
[14:14] *** evalable6 left
[14:14] *** teatwo left
[14:15] *** evalable6 joined
[14:15] *** teatwo joined
[14:16] *** linkable6 joined
[14:20] <discord-raku-bot> <Anton Antonov> My attitude is kind of reflected here: https://resources.wolframcloud.com/PacletRepository/resources/AntonAntonov/FunctionalParsers/

[14:42] *** jpn joined
[14:51] <lucs> gfldex: No luck when adding 'compose', but here are a few more interesting (I think) observations: https://gist.github.com/lucs/4d5fe5e3c6fbd08387d10166da677df1

[14:52] <gfldex> It is a well known fact that the REPL mostly works. Raku is less dynamic as it looks at first.

[14:58] *** MoC left
[15:01] <lucs> By "mostly works", do you mean "sometimes fails"?

[15:01] <gfldex> yes

[15:01] <lucs> Fair enough :)

[15:04] <lucs> Do you have an opinion on how safe or should-avoid using 'augment' is?

[15:04] *** derpydoo joined
[15:08] <moritz> you should avoid augment

[15:09] <lucs> Yeah, a few people have mentioned that, but I'm not clear on when it can be thought of a legitimate thing to do.

[15:10] <lucs> *thought of as

[15:11] *** jpn left
[15:11] <gfldex> That the REPL doesn't always work is a bug that very difficult to stomp out.

[15:12] <lucs> In my case, it's no big deal, because I was using the REPL just to try out stuff as I develop my module, but the 'augment' on Match is kind of important (avoidable, but would be nice).

[15:15] <gfldex> In retrospective `use MONEY-*;` was the wrong term. `use YOU-WILL-BREAK-ASSUMPTIONS;` would have been better.

[15:16] <lucs> :-)

[15:17] <gfldex> But then, the word assumptions contains the word ass. And we don't want to be that either. It's the old dilemma of balancing freedom with predictability.

[15:27] <timo> i have heard "when you assume you make an ass out of u and me"

[15:43] <discord-raku-bot> <Anton Antonov> "When you presume, you make a press out of u and me." -- Does not work that well, but it is something ChatGPT can come up with.

[15:44] <discord-raku-bot> <Anton Antonov> @avuserow I am experimenting with "SQL::Builder" -- you might be hearing from me. 🙂

[15:53] <discord-raku-bot> <avuserow> Sounds good. Looks like you found a rough edge already, sorry about that. I'll take a look soon

[16:00] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2023/05/07/halve-an-algorithm/

[16:00] <gfldex> m: say $*lizmat++ for Empty;

[16:00] <camelia> rakudo-moar b317b4dd0: ( no output )

[16:01] <gfldex> This line of code is a trueism, because lizmat invented Empty but got very little praise for it. More prais for lizmat, please. tyvm

[16:07] <Voldenet> using LAST in map is scary

[16:10] *** derpydoo left
[16:11] <Voldenet> but since map is described as gather - Empty is guaranteed to work, next will also work

[16:13] <discord-raku-bot> <Anton Antonov> @Voldenet Good to know.

[16:14] <gfldex> Voldenet: In the old days, `for` just called `.map`, `do for` still does. That's why LAST must work in `.map`. 

[16:15] <Voldenet> iirc for loop will be converted to map as well

[16:15] <Voldenet> m: (for ^3 { $_ * 42 }).say

[16:15] <camelia> rakudo-moar b317b4dd0: OUTPUT: «(0 42 84)␤»

[16:16] <gfldex> Not anymore, I believe lizmat added that optimisation.

[16:16] <Voldenet> Oh, it behaves like map, but is not actually map

[16:17] <gfldex> And I don't like it. If `for` would always call `.map` we would not need custom iterators for simple iteration. Providing `method grep` and  `method map` would do.

[16:17] <Voldenet> funny that most developers would use .map where they intended to use >>.

[16:19] <gfldex> ». was meant to autothread but then we got hyper/race. It would be tricky to set degree and batch-size otherwise.

[16:20] <gfldex> And I don't think loop phasers would work in `».&{ your-code-here() }`.

[16:21] <discord-raku-bot> <Nemokosch> don't forget that >>. has deepmap semantics anyway

[16:23] <Voldenet> well LAST is scary and also not impleemented

[16:23] <Voldenet> fully

[16:23] <Voldenet> m: (^42).hyper.map({ LAST { say ":(" } })

[16:23] <camelia> rakudo-moar b317b4dd0: OUTPUT: «Phasers in hyper/race not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[16:23] <Voldenet> Empty and next are implemented though

[16:25] <Voldenet> I wouldn't use phasers outside pure for loops either way, it simply doesn't look right

[16:26] <discord-raku-bot> <Nemokosch> there is problematically much non-structured behavior

[16:27] <discord-raku-bot> <Nemokosch> have we talked about next actually skipping through the stack, looking for a loop to step?

[16:28] <Voldenet> I do wonder how is `next` implemented in context of hypermap

[16:28] <gfldex> Empty in map is not in Roast (or I can't find the spot). But it really is emergent behaviour, because how binding to a positional container works. And Empty is specced quite a lot.

[16:28] <gfldex> I believe it does not work.

[16:29] <gfldex> At least the last time I checked no control exceptions worked in a HyperSeq. In react blocks most of the bugs are fixed tho.

[16:30] <Voldenet> m: (^40000).hyper(:10batch :10degree).map({ next unless $_ > 39980; $_ }).say

[16:30] <camelia> rakudo-moar b317b4dd0: OUTPUT: «(39981 39982 39983 39984 39985 39986 39987 39988 39989 39990 39991 39992 39993 39994 39995 39996 39997 39998 39999)␤»

[16:30] <Voldenet> but it does seem to work

[16:30] <discord-raku-bot> <Nemokosch> of course documentation and specification could have improved; documentation has improved a lot, it has a quasi workflow. Specification doesn't.

[16:31] <discord-raku-bot> <Nemokosch> sometimes I wonder how I picked up this language; ngl I think most people wouldn't have that amount of time and freedom

[16:32] <discord-raku-bot> <Nemokosch> however, I believe that Empty in particular can be deduced solely from the documentation

[16:33] <Voldenet> one could reason that Empty works differently than next

[16:34] <Voldenet> next "skips" the element during the loop

[16:34] *** jpn joined
[16:34] <Voldenet> Empty gets emplaced into the resulting data structure which flattens it

[16:35] <discord-raku-bot> <Nemokosch> yep, that's quite sure

[16:36] <discord-raku-bot> <Nemokosch> btw I think the use of Empty in map even appeared in the Rakudo weeklies, as an alternate implementation to grep

[16:36] <gfldex> next acutally stops execution of the block, while Empty works its magic after the fact.

[16:37] <Voldenet> In practice Empty seems faster

[16:38] <discord-raku-bot> <Nemokosch> what really strikes me without syntax highlighting is that [before] .item is confusing

[16:38] <discord-raku-bot> <Nemokosch> in theory, I did know about &infix:<before> but not enough to think that while reading the code

[16:38] <gfldex> Aye, control exceptions are still pretty slow. One reason for RakuAST.

[16:41] <Voldenet> either way, Empty seems like something what _should_ be returned from map conceptually

[16:44] <gfldex> ofc it does. Empty is the Slip of ().

[16:44] <gfldex> And a Slip is just a value, unless it is bound to a positional container.

[16:46] <Voldenet> fortunately redo doesn't work in map

[16:47] <Voldenet> actually maybe it does, but there's no way to return a value

[16:48] <gfldex> Indeed, for doesn't want to be gather/take .

[16:49] <Voldenet> m: (^10).map({ redo if (state @x).push($_).elems < 2; |@x }).say

[16:49] <camelia> rakudo-moar b317b4dd0: OUTPUT: «(0 0 0 0 1 0 0 1 2 0 0 1 2 3 0 0 1 2 3 4 0 0 1 2 3 4 5 0 0 1 2 3 4 5 6 0 0 1 2 3 4 5 6 7 0 0 1 2 3 4 5 6 7 8 0 0 1 2 3 4 5 6 7 8 9)␤»

[16:49] <Voldenet> this example makes my head hurt

[16:50] <Voldenet> I don't know any sane use case for this

[16:50] <gfldex> Hold my beer! :D

[16:50] <gfldex> No wait, you where asking for "sane". :->

[16:51] <Voldenet> when drunk coding, you may consider more things sane, so take your beer back ;)

[16:52] *** rf joined
[17:05] *** Altai-man joined
[17:07] *** lizmat_ joined
[17:09] *** vrurg left
[17:10] <discord-raku-bot> <Nemokosch> how did you come up with this though

[17:10] <discord-raku-bot> <Nemokosch> there are more serious problems with this than redo, to be honest xD

[17:10] *** vrurg joined
[17:14] *** sena_kun left
[17:14] *** kurahaupo left
[17:14] *** lizmat left
[17:38] *** jpn left
[17:48] *** abraxxa-home joined
[17:49] *** jpn joined
[17:53] *** abraxxa-home left
[17:57] *** abraxxa-home joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:18] *** deoac joined
[18:35] *** jpn left
[18:50] *** jpn joined
[18:52] *** lizmat_ left
[18:52] *** lizmat joined
[19:14] *** xinming left
[19:39] *** jpn left
[19:39] *** jpn joined
[19:44] *** Sgeo joined
[20:07] *** euandreh left
[20:13] *** derpydoo joined
[21:09] *** sftp left
[21:10] *** euandreh joined
[21:22] *** abraxxa-home left
[21:28] <[Coke]> m: dd 1..10; Range.new(:from(1), :to(10);

[21:28] <camelia> rakudo-moar b317b4dd0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> dd 1..10; Range.new(:from(1), :to(10);⏏<EOL>␤    expecting an…»

[21:28] <[Coke]> m: dd 1..10; Range.new(:from(1), :to(10));

[21:28] <camelia> rakudo-moar b317b4dd0: OUTPUT: «1..10␤Cannot resolve caller new(Range:U: :to(Int), :from(Int)); none of these signatures matches:␤    (Range: Range $min, \max, :$excludes-min, :$excludes-max, *%_)␤    (Range: \min, Range $max, :$excludes-min, :$excludes-max, *%_)␤    (Range:…»

[21:29] <[Coke]> m: dd 1..10; Range.new(1, *);

[21:29] <camelia> rakudo-moar b317b4dd0: OUTPUT: «1..10␤»

[21:29] <[Coke]> ok, that explains https://github.com/Raku/doc/issues/4301

[21:29] <[Coke]> someone used :from :to but it's positional

[21:31] <discord-raku-bot> <Anton Antonov> @avuserow I am trying to include "SQL::Builder" as a target in my data wrangling DSL. Here is an example:

[21:31] <discord-raku-bot> <Anton Antonov> https://cdn.discordapp.com/attachments/633753286209699870/1104883286712520744/DSL-translation-to-SQL-Builder.png

[21:33] <discord-raku-bot> <Anton Antonov> @avuserow I have implemented the where  statements generation to be in accordance to "SQL::Builder" (documentation) yet. But where statements are also handled. (Currently Raku code is placed.)

[21:33] *** Altai-man left
[21:34] <discord-raku-bot> <avuserow> That's awesome

[21:35] <discord-raku-bot> <Anton Antonov> @avuserow Now, I might have a bunch of implementation requests : distinct , count, semi-join, anti-join, long- and wide form transformations, etc.

[21:36] <discord-raku-bot> <Anton Antonov> @avuserow Should make issues at GitHub? Or you prefer to be emailed a list? Other ways?

[21:37] <discord-raku-bot> <avuserow> GitHub Issues are great, preferably with some example output

[21:37] <discord-raku-bot> <Anton Antonov> @avuserow BTW, you can try the code generation yourself here: https://antononcube.shinyapps.io/DSL-evaluations/ .

[21:39] <discord-raku-bot> <Anton Antonov> I understand you mean SQL code. But would you "accept" Raku code too  / instead?

[21:40] <discord-raku-bot> <avuserow> DISTINCT is on my list already. I've been treating COUNT as a function (via Fn.new('COUNT', 'column')), but maybe there's something else in mind?

[21:40] <discord-raku-bot> <avuserow> PRs are welcome too 👍

[21:41] <discord-raku-bot> <Anton Antonov> Agh, you are asking me to do the work.... 🙂

[21:41] <discord-raku-bot> <avuserow> oh, I would accept Raku examples too

[21:42] <discord-raku-bot> <avuserow> I have not heard of semi-joins or anti-joins, and I'm a very example driven learner, so that's the easiest way for me to wrap my head around the request

[21:42] <discord-raku-bot> <Anton Antonov> If there is an existing "count feature" I will implemented the code generation for it. It seems I can easily include it in the constructed pipeline.

[21:44] <discord-raku-bot> <Anton Antonov> You can see Raku examples here : https://github.com/antononcube/Raku-Data-Reshapers/blob/main/t/08-join-across.rakutest

[21:45] <discord-raku-bot> <avuserow> I currently write count as: $sql.from("table").select(Fn.new("COUNT", "artists")) => SELECT COUNT(artists) FROM table . TBD whether this deserves a better syntax, since this is 0.0.1 and syntax is easier to add than remove

[21:47] <discord-raku-bot> <Anton Antonov> That is probably good enough. I have to experiment with it.

[21:48] *** n1to__ left
[21:49] <discord-raku-bot> <Anton Antonov> @avuserow So, you run the generated SQL code in Raku sessions, or you also use separate SQL sessions?

[21:53] <discord-raku-bot> <avuserow> I run it in Raku. I have a Cro webapp that uses this to make the SQL for e.g. search queries

[21:54] <discord-raku-bot> <Anton Antonov> I see. I use both Cro webapp (the service linked above) and a CLI script that copies the generated code in the clipboard.

[21:56] <discord-raku-bot> <avuserow> I have an experimental wrapper class for my main project that adds methods like .one, .all to actually run the queries. I'll eventually release that.

[21:58] <discord-raku-bot> <Anton Antonov> BTW, currently I "only" construct the Raku code for "SQL::Builder"  (in "DSL::English::DataQueryWorkflows") -- I am not executing it order to get the SQL code itself. (I plan to do that later today.) I might suggest that your builder know how to deal with wrong arguments.

[21:59] <discord-raku-bot> <Anton Antonov> @avuserow  For example, this DSL spec:  DSL MODULE DataQuery; DSL TARGET Raku::SQL::Builder; load data "songs";  join with ratings by song-id;  filter by title is like "Am"; sort by title;  generates the Raku code:  $sql.from('songs').join(:inner, ratings, :on(["song-id"])).where(title ~~ "Am").order-by("title") 

[22:02] <discord-raku-bot> <Anton Antonov> @avuserow Idially, where  can just dump the given argument, e.g. select * from songs join ... where <<title ~~ "Am">> order by title. Or something like that...

[22:05] <discord-raku-bot> <avuserow> Hm. Maybe. I have a lot of thoughts on the where clause syntax. I need to write a blog article (or two) about it at some point

[22:08] <discord-raku-bot> <avuserow> it seems like you would get what you want if you emitted .where(["title", "~~", "Am"]) . It's kind of like an abstract syntax tree way of writing SQL

[22:09] <discord-raku-bot> <avuserow> but there's still some exploration and refinement to do. That's v0.0.1 for you 🙂

[22:48] *** linkable6 left
[22:48] *** evalable6 left
[22:50] *** linkable6 joined
[22:50] *** evalable6 joined
[23:43] *** jpn left
