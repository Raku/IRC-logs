[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:04] *** RonaldR34g4m joined
[00:04] *** Vyrus left
[00:09] *** MasterDuke left
[00:34] *** MasterDuke joined
[00:36] *** MasterDuke79 joined
[00:38] *** MasterDuke left
[00:43] <falsifian> deoac: https://docs.raku.org/type/Int.html ; search for "brackets"

[00:44] <falsifian> I think that sentence should say "square brackets" or just "brackets" instead of "angle brackets"

[00:48] <falsifian> Well that was easy. Just clicked the "edit" button on the docs page and https://github.com/Raku/doc/pull/4297

[00:49] *** deoac left
[00:52] *** jpn joined
[00:57] *** jpn left
[01:04] *** xinming left
[01:06] *** xinming joined
[01:11] <discord-raku-bot> <Nemokosch> all three bracket types are possible

[01:13] <discord-raku-bot> <Nemokosch> also, it doesn't seem like it's quite the same as .join.Int.base

[01:13] <discord-raku-bot> <Nemokosch> m: dd :10[1,22,3]; dd [1,22,3].join.Int.base(10)

[01:13] <discord-raku-bot> <Raku eval>  323 "1223" 

[01:57] *** Xliff joined
[01:57] <Xliff> m: use NativeCall; my $a = CArray[Pointer].allocate(1); $a.say

[01:57] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «NativeCall::Types::CArray[NativeCall::Types::Pointer].new␤»

[01:57] <tellable6> 2023-04-26T19:29:24Z #raku-dev <vrurg> Xliff you seem to be the one behind parallel pre-compiling. Can you tell if there is a way to limit the maximum number of rakudo processes involved?

[01:57] <Xliff> m: use NativeCall; my $a = CArray[Str].allocate(1); $a.say

[01:57] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «chars requires a concrete string, but got null␤  in method allocate at /home/camelia/rakudo-m-inst-2/share/perl6/core/sources/5702F1B98AFF04C12BC993882BF8EB20423C1146 (NativeCall::Types) line 219␤  in block <unit> at <tmp> line 1␤␤»

[01:58] <Xliff> Given that the later is the same as the former... is this a bug?

[01:58] <Xliff> .tell vrurg I was the one behind the initial implementation, but the one that made it into main is nine's.

[01:58] <tellable6> Xliff, I'll pass your message to vrurg

[01:59] <Xliff> .tell vrurg To my knowledge, the only way to limit the number of jobs is logic left at the application level.

[01:59] <tellable6> Xliff, I'll pass your message to vrurg

[02:01] <Xliff> .tell vrurg See my parallel compilation runner, here - https://github.com/Xliff/p6-GtkPlus/blob/master/scripts/dependency-build.pl6#L124

[02:01] <tellable6> Xliff, I'll pass your message to vrurg

[02:13] *** teatwo left
[02:13] *** teatwo joined
[02:15] *** RonaldR34g4m left
[02:16] *** Vyrus joined
[02:18] <Xliff> Well, here's the workaround for now...

[02:18] <Xliff> m: use NativeCall; my $a = CArray[Pointer].allocate(1); $a = nativecast(CArray[Str], $a); $a.say

[02:18] <camelia> rakudo-moar 1f010bd8a: OUTPUT: «NativeCall::Types::CArray[Str].new␤»

[02:22] *** jpn joined
[02:27] *** jpn left
[03:27] *** greppable6 left
[03:27] *** notable6 left
[03:27] *** committable6 left
[03:27] *** benchable6 left
[03:27] *** shareable6 left
[03:27] *** evalable6 left
[03:27] *** releasable6 left
[03:27] *** coverable6 left
[03:27] *** reportable6 left
[03:27] *** nativecallable6 left
[03:27] *** squashable6 left
[03:27] *** statisfiable6 left
[03:27] *** bloatable6 left
[03:27] *** unicodable6 left
[03:27] *** quotable6 left
[03:27] *** linkable6 left
[03:27] *** sourceable6 left
[03:27] *** tellable6 left
[03:27] *** bisectable6 left
[03:27] *** bloatable6 joined
[03:28] *** quotable6 joined
[03:28] *** notable6 joined
[03:28] *** benchable6 joined
[03:28] *** linkable6 joined
[03:28] *** greppable6 joined
[03:28] *** releasable6 joined
[03:28] *** statisfiable6 joined
[03:28] *** squashable6 joined
[03:28] *** committable6 joined
[03:28] *** evalable6 joined
[03:28] *** tellable6 joined
[03:29] *** nativecallable6 joined
[03:29] *** shareable6 joined
[03:29] *** coverable6 joined
[03:30] *** bisectable6 joined
[03:30] *** reportable6 joined
[03:30] *** unicodable6 joined
[03:30] *** sourceable6 joined
[03:36] *** rf left
[04:10] *** jpn joined
[04:15] *** jpn left
[04:49] *** Xliff left
[05:06] *** tea3po joined
[05:07] *** teatwo left
[05:27] *** jpn joined
[05:32] *** jpn left
[05:46] *** euandreh1 joined
[05:48] *** euandreh left
[05:48] *** cm left
[05:48] *** euandreh1 is now known as euandreh

[05:50] *** cm joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:26] *** grondilu joined
[06:27] <grondilu> yet another reason I hate version management: https://github.com/grondilu/libdigest-raku/issues/37

[06:30] <grondilu> oh it seems this user has been spamming on this topic: https://github.com/perl6/perl6-pod-to-bigpage/issues/37

[06:53] *** Manifest0 joined
[06:55] *** jpn joined
[07:00] *** jpn left
[07:24] *** squashable6 left
[07:25] *** grondilu left
[07:27] *** squashable6 joined
[07:29] *** jpn joined
[07:37] *** jpn left
[07:51] *** dakkar joined
[08:00] *** Sgeo left
[08:11] <Voldenet> git tag -a 1.0 commit

[08:12] <Voldenet> it's a bit annoying that not always tags are fetched with repo, but overall it's a nice feature

[08:26] *** sena_kun joined
[08:36] <patrickb> Voldenet: AFAIK tags *are* fetched by default. But they aren't pushed by default. They need to be pushed explicitly, just like branches.

[08:43] <Voldenet> I don't remember details where I had to include tags explicitly, but I bet it was something related to submodules

[08:50] *** zara joined
[08:51] *** zara left
[09:18] *** zara joined
[09:25] *** abraxxa joined
[09:30] *** zara left
[09:53] *** jpn joined
[10:53] *** reportable6 left
[10:53] *** unicodable6 left
[10:53] *** sourceable6 left
[10:53] *** statisfiable6 left
[10:53] *** squashable6 left
[10:53] *** greppable6 left
[10:53] *** bloatable6 left
[10:53] *** committable6 left
[10:53] *** evalable6 left
[10:53] *** coverable6 left
[10:53] *** notable6 left
[10:53] *** releasable6 left
[10:53] *** quotable6 left
[10:53] *** tellable6 left
[10:53] *** bisectable6 left
[10:53] *** benchable6 left
[10:53] *** linkable6 left
[10:53] *** bloatable6 joined
[10:53] *** quotable6 joined
[10:53] *** bisectable6 joined
[10:53] *** coverable6 joined
[10:53] *** committable6 joined
[10:54] *** linkable6 joined
[10:54] *** statisfiable6 joined
[10:55] *** evalable6 joined
[10:55] *** unicodable6 joined
[10:55] *** releasable6 joined
[10:55] *** notable6 joined
[10:55] *** reportable6 joined
[10:55] *** sourceable6 joined
[10:56] *** benchable6 joined
[10:56] *** greppable6 joined
[10:56] *** squashable6 joined
[10:56] *** tellable6 joined
[11:25] *** ProperNoun left
[11:58] *** jpn left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:12] *** ProperNoun joined
[12:37] *** jpn joined
[12:42] *** jpn left
[12:45] *** jgaz joined
[12:51] *** jpn joined
[13:37] *** rf joined
[14:06] *** m6502 joined
[14:06] *** jgaz left
[14:14] *** teatwo joined
[14:16] *** teatwo left
[14:16] *** teatwo joined
[14:17] *** tea3po left
[14:25] *** Sgeo joined
[15:23] *** jpn left
[15:26] *** aru_ joined
[15:27] <aru_> Hi, is there a way to make zef install all dependencies listed in meta6.json? Let's say I take someone else's sources and want to start hacking on it

[15:29] <discord-raku-bot> <Nemokosch> > zef install . --deps-only

[15:31] <aru_> oh, right for some reason I had the idea the thing to install had to be a package name

[15:32] <aru_> awesome, thank you

[15:32] *** jpn joined
[15:33] <tonyo> .

[15:38] *** nine left
[15:38] *** nine joined
[15:56] *** jpn left
[16:06] *** abraxxa left
[16:15] *** theesm left
[16:17] *** emanuellee joined
[16:18] *** emanuellee left
[16:32] *** dakkar left
[16:35] *** lonewolf-dev joined
[16:35] <lonewolf-dev> hi. Is raku a interpeted language? Or is it compiled? Or is it just-in-time compiled like how julia and javascript work?

[16:41] <El_Che>  /msg lizmat https://github.com/nxadm/rakudo-pkg/actions/runs/4822278930 wordt gebuild atm, hopelijk geen showstoppers

[16:41] <El_Che> oops

[16:41] <lizmat> gotcha

[16:42] <El_Che> everyone: https://github.com/nxadm/rakudo-pkg/actions/runs/4822278930 is being build atm, hopefully no showstoppers

[16:42] <El_Che> (nothing secret there :) )

[16:42] * El_Che returns to assembling ikea stuff and cursing in Swedish

[16:42] <lizmat> lonewolf-dev define compiled?

[16:43] <lizmat> El_Che: Føck!

[16:43] *** xinming left
[16:43] <lizmat> lonewolf-dev: Raku compiles to bytecode that can optionally be stored, and then run again

[16:43] <lonewolf-dev> It runs on MOARVM/java virtual machine. Confusing.

[16:43] *** abraxxa-home joined
[16:43] <lonewolf-dev> oke. thanks for info.

[16:43] <lizmat> it either runs on MoarVM *or* JVM

[16:43] <El_Che> their engineers are taking the piss: a little screw machine the released is called Fixa

[16:45] <lonewolf-dev> I'm learning perl at the moment. Is perl still worth learning? How much different is perl and raku?

[16:46] <lonewolf-dev> Perl 7 is set to be released this year...

[16:46] <lonewolf-dev> No more "use strict"; Use warnings;

[16:46] <lonewolf-dev> meme

[16:47] <El_Che> lonewolf-dev: I have never regretted my perl knowledge

[16:48] *** abraxxa-home left
[16:48] <lonewolf-dev> Is perl regex (PCRE) the same as raku regex?

[16:48] <El_Che> no

[16:48] <El_Che> raku's take is nicer and clearer, more powerful. Perl's, on the other hand, is universal

[16:49] *** abraxxa-home joined
[16:49] <lonewolf-dev> Can we just not agree on a standard. Its confusing having to relearn multiple regex implementations.

[16:50] <lonewolf-dev> How fast is raku compared to other similar new languages like go-lang and rust? Sorry for bombarting you with questions...

[16:51] <lonewolf-dev> Will companys adopt it in the future?

[16:54] <lizmat> raku is slower than go-lang and rust

[16:54] <lizmat> yes

[16:55] <El_Che> the languages you mentioned are pretty much the fastest around besides C/C++

[16:55] <lonewolf-dev> so would be similar in speed to something like a jvm language like java - kotlin?

[16:56] <lonewolf-dev> without bloated classes that java has.

[16:56] <El_Che> more akin to perl/ruby/python at the moment, but with the potention of the jvm like speed

[16:56] <El_Che> (the jvm is very fast, just memory hungry)

[16:56] <El_Che> *potential

[16:57] <lonewolf-dev> okey. thanks.

[16:57] <El_Che> (being a VM-based language)

[16:57] <El_Che> it has better concurrency than perl/python/ruby 

[16:57] <El_Che> so if you're in that use case, it may be a good candidate for your application

[16:57] <lonewolf-dev> raku is not Globar interpeter locked.

[16:57] <lonewolf-dev> *global

[16:58] <lonewolf-dev> GIL

[16:58] <El_Che> nor is perl

[16:58] <lonewolf-dev> Is perl not GIL locked?

[16:58] <lonewolf-dev> i tought it was?

[16:58] <lonewolf-dev> python and ruby is..

[16:58] <lonewolf-dev> gil locked.

[16:58] <El_Che> the problem with perl is that threads are heavy, and the concurrency syntax cumbersom

[16:58] <lizmat> Raku has no GIL

[16:59] <El_Che> perl neither iirc

[16:59] <lizmat> perl threads are basically a simulated fork() for Windows

[16:59] <El_Che> one interpreter per thread, pretty much iirc

[16:59] <El_Che> hence: heavy

[16:59] <lonewolf-dev> Im using arch linux.

[16:59] <lonewolf-dev> not windows

[17:00] <lonewolf-dev> So is that a problem on linux machines?

[17:00] <lonewolf-dev> like ubuntu/arch?

[17:00] <El_Che> in perl, you pretty much fork for do concurrent stuff

[17:00] <El_Che> there are threads, but they are not fun

[17:01] <El_Che> but people on #perl (althoiough I am there too), can give you more informed insights

[17:01] <El_Che> (and lizmat being somewhat of a threading expert :) )

[17:01] <lonewolf-dev> one thread spawn one extra intepreter? is that correct?

[17:02] <lizmat> yes, in a way it's the worst of both worlds

[17:02] <lizmat> at least fork() will give you shared memory at the OS levek

[17:02] <lizmat> *level

[17:03] <El_Che> you loose copy on write with threads iirc

[17:04] *** abraxxa-home left
[17:05] <lizmat> yes, because each interpreter *copies* all of its variables / bytecode / etc

[17:25] *** lonewolfdev joined
[17:25] *** lonewolfdev left
[17:25] *** lonewolf-dev left
[17:26] *** lonewolf-dev joined
[17:37] *** lonewolf-dev left
[17:40] <aru_> I'm having a little trouble inspecting things in the repl. Let's say I have Encoding::Decoder::Builtin obtain by calling Encoding::Registry.find('utf-8').decoder() , how do I find out what methods it has available?

[17:45] <aru_> from some example I know I can do $decoder.add-bytes(...), but I can't seem to find any docs around where add-bytes comes from

[17:49] <discord-raku-bot> <Nemokosch> you can ask the metamodel about things like this - for example, here you can call .^methods on your class/object

[17:49] <lizmat> $decoder.^methods.map(*.name)

[17:52] <aru_> oh, neat

[18:00] *** reportable6 left
[18:02] <aru_> I was probably looking for something like pry in ruby, but this will do

[18:02] *** reportable6 joined
[18:05] <lizmat> aru_: there is a "repl" sub that you can call anywhere in your code

[18:06] <lizmat> sub a($a) { repl }; a 42'

[18:06] <lizmat> Type 'exit' to leave

[18:06] <lizmat> [0] > say $a

[18:06] <lizmat> 42

[18:17] *** m6502 left
[18:18] *** Oshawott left
[18:18] *** archenoth joined
[19:18] *** tellable6 left
[19:18] *** notable6 left
[19:18] *** reportable6 left
[19:18] *** quotable6 left
[19:18] *** linkable6 left
[19:18] *** committable6 left
[19:18] *** bisectable6 left
[19:18] *** releasable6 left
[19:18] *** sourceable6 left
[19:18] *** unicodable6 left
[19:18] *** greppable6 left
[19:18] *** bloatable6 left
[19:18] *** squashable6 left
[19:18] *** coverable6 left
[19:18] *** shareable6 left
[19:18] *** benchable6 left
[19:18] *** evalable6 left
[19:18] *** statisfiable6 left
[19:18] *** nativecallable6 left
[19:19] *** statisfiable6 joined
[19:19] *** unicodable6 joined
[19:19] *** notable6 joined
[19:19] *** quotable6 joined
[19:19] *** evalable6 joined
[19:19] *** linkable6 joined
[19:19] *** coverable6 joined
[19:20] *** bloatable6 joined
[19:20] *** benchable6 joined
[19:20] *** bisectable6 joined
[19:20] *** releasable6 joined
[19:21] *** tellable6 joined
[19:21] *** nativecallable6 joined
[19:21] *** shareable6 joined
[19:21] *** sourceable6 joined
[19:21] *** reportable6 joined
[19:21] *** squashable6 joined
[19:21] *** committable6 joined
[19:22] *** greppable6 joined
[19:28] <discord-raku-bot> <p6steve> 0/

[19:29] <discord-raku-bot> <p6steve> i'm wondering if there's a way to connect a Supply on one physical / virtual machine to a Supply on another - maybe a module?

[19:44] <Voldenet> > react whenever IO::Socket::Async.listen(0, 8080) -> $c { whenever $c.Supply { .say }}

[19:44] <Voldenet> > react whenever IO::Socket::Async.connect(<127.0.0.1>, 8080) -> $c { whenever Supply.interval(1) { $c.write("something".encode) }}

[19:45] <Voldenet> so… there is a way

[19:51] <Voldenet> i think theres modules for mqtt and zmq if you need something powerful, but I've never needed anything above tcp

[19:54] <El_Che> profilers.t is failing a lot

[20:12] <discord-raku-bot> <p6steve> voldenet: that's really cool - thanks!

[20:22] *** linkable6 left
[20:22] *** evalable6 left
[20:24] *** evalable6 joined
[20:25] *** linkable6 joined
[20:39] <discord-raku-bot> <p6steve> i hereby nominate default "standard" ports for raku as 3461 (Supply) and 3463 (Channel) since they appear to be unoccupied ... https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers  ... maybe helpful if we all use the same

[20:49] *** squashable6 left
[20:49] *** squashable6 joined
[20:59] *** rf left
[21:15] *** sena_kun left
[22:15] *** evalable6 left
[22:15] *** linkable6 left
[22:15] *** shareable6 left
[22:15] *** reportable6 left
[22:15] *** releasable6 left
[22:15] *** squashable6 left
[22:15] *** statisfiable6 left
[22:15] *** coverable6 left
[22:15] *** nativecallable6 left
[22:15] *** benchable6 left
[22:15] *** quotable6 left
[22:15] *** tellable6 left
[22:15] *** sourceable6 left
[22:15] *** bisectable6 left
[22:15] *** unicodable6 left
[22:15] *** committable6 left
[22:15] *** notable6 left
[22:15] *** bloatable6 left
[22:15] *** greppable6 left
[22:16] *** tellable6 joined
[22:16] *** notable6 joined
[22:16] *** bloatable6 joined
[22:16] *** shareable6 joined
[22:16] *** coverable6 joined
[22:16] *** reportable6 joined
[22:16] *** linkable6 joined
[22:16] *** evalable6 joined
[22:16] *** statisfiable6 joined
[22:17] *** unicodable6 joined
[22:17] *** bisectable6 joined
[22:17] *** squashable6 joined
[22:17] *** sourceable6 joined
[22:17] *** greppable6 joined
[22:17] *** releasable6 joined
[22:17] *** quotable6 joined
[22:18] *** nativecallable6 joined
[22:18] *** benchable6 joined
[22:18] *** committable6 joined
[22:59] *** Manifest0 left
[23:21] *** archenoth left
[23:30] *** codesections left
[23:34] *** archenoth joined
[23:43] *** codesections joined
[23:49] *** codesections left
