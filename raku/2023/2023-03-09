[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:04] *** codesections joined
[00:11] <Geth> ¦ doc/type-links: f1b9f67bc6 | (Will Coleda)++ | xt/rakudoc-types.rakutest

[00:11] <Geth> ¦ doc/type-links: ignore X<> markers.

[00:11] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/f1b9f67bc6

[00:13] *** deoac left
[00:21] *** vrurg_ joined
[00:21] *** vrurg left
[00:23] *** vrurg_ is now known as vrurg

[00:27] <Geth> ¦ doc/type-links: fbe58443c6 | (Will Coleda)++ | xt/rakudoc-types.rakutest

[00:27] <Geth> ¦ doc/type-links: Only report exact case matches.

[00:27] <Geth> ¦ doc/type-links: 

[00:27] <Geth> ¦ doc/type-links: Be sneaky and work even on case-insensitive file systems.

[00:27] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/fbe58443c6

[00:45] *** bigdata joined
[00:46] *** Manifest0 left
[00:58] *** kjp left
[01:03] *** kjp joined
[01:04] *** xinming left
[01:06] *** xinming joined
[01:10] <tonyo> rf: i'm likely going to regenerate a lot to make anything that's a boolean be a junction with the right value/type

[01:10] <tonyo> rf: the escaping is in there and it *should* just work as is but just some updates

[01:14] *** derpydoo joined
[01:18] *** derpydoo left
[01:20] <rf> tonyo++

[01:20] <rf> Just tested it out and it's amazing

[01:26] <tonyo> yea it's way easier/better than i thought it'd be

[01:27] <rf> Might actually use this in prod

[01:29] *** derpydoo joined
[01:31] <Voldenet> https://github.com/tony-o/ryml/blob/b216c9d451bfc43e6a51855e4bc476c27100f731/lib/Ryml.rakumod#L16

[01:32] <Voldenet> this lacks escaping " as &quot; ' as &#39; and & as &amp;

[01:32] <tonyo> i'll give it proper escaping shortly

[01:32] <tonyo> working on making these bools better rendered

[01:48] *** nort joined
[02:05] *** razetime joined
[02:08] <Geth> ¦ doc: cfa++ created pull request #4262: Remove formatting codes from various examples

[02:08] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4262

[02:20] <tonyo> proper escaping and better bool renders ^^

[02:20] <tonyo> just in

[02:23] <Geth> ¦ doc: cfa self-assigned Leaky, nested tags in the $*REPO section https://github.com/Raku/doc/issues/4261

[02:28] <Geth> ¦ doc/main: 8898dc5c8e | cfa++ | doc/Language/compilation.rakudoc

[02:28] <Geth> ¦ doc/main: Fix C<B<...>> markup/formatting error

[02:28] <Geth> ¦ doc/main: 

[02:28] <Geth> ¦ doc/main: Closes #4261.

[02:28] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/8898dc5c8e

[03:00] <rf> .tell dakkar thanks for pointing out the missing 2's in my splits, I found a few bugs that got squashed with that change

[03:00] <tellable6> rf, I'll pass your message to dakkar

[03:05] *** evalable6 left
[03:05] *** evalable6 joined
[03:26] *** codesections left
[03:32] *** ProperNoun left
[03:38] *** swaggboi left
[03:52] *** lucs joined
[03:53] *** Guest35 left
[03:55] *** swaggboi joined
[04:00] *** rf left
[04:08] *** archenoth joined
[04:10] *** Oshawott left
[04:17] *** razetime left
[04:20] *** Aedil_ is now known as Aedil

[04:35] *** razetime joined
[05:23] *** razetime left
[05:57] *** bigdata left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:41] *** bigdata joined
[06:47] *** teatwo joined
[06:49] *** razetime joined
[06:50] *** tea3po left
[06:51] *** teatwo left
[06:51] *** teatwo joined
[06:59] *** perlbot left
[07:01] *** simcop2387 left
[07:58] *** Sgeo left
[08:01] *** perlbot joined
[08:01] *** simcop2387 joined
[08:07] *** razetime left
[08:20] *** razetime joined
[09:06] *** Manifest0 joined
[09:08] *** dakkar joined
[09:21] *** abraxxa joined
[09:53] *** abraxxa left
[09:54] *** abraxxa joined
[10:27] *** Geth left
[10:27] *** Geth joined
[10:46] *** razetime left
[11:16] <Geth> ¦ doc/main: 7f9b27debd | (Elizabeth Mattijsen)++ | doc/Type/IterationBuffer.rakudoc

[11:16] <Geth> ¦ doc/main: Tweak IterationBuffer documentation a bit

[11:16] <Geth> ¦ doc/main: 

[11:16] <Geth> ¦ doc/main: After having written tests, I noticed some properties were missing

[11:16] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/7f9b27debd

[11:32] <Geth> ¦ doc/main: d0ac898f51 | (Elizabeth Mattijsen)++ | doc/Type/List.rakudoc

[11:32] <Geth> ¦ doc/main: Document sub rotor

[11:32] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/d0ac898f51

[11:35] <Geth> ¦ doc/main: 261e2a1830 | (Elizabeth Mattijsen)++ | doc/Type/IterationBuffer.rakudoc

[11:35] <Geth> ¦ doc/main: Date some IterationBuffer features

[11:35] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/261e2a1830

[11:46] *** evalable6 left
[11:46] *** linkable6 left
[11:47] *** evalable6 joined
[11:47] <Geth> ¦ doc/main: e3ec1efeda | (Elizabeth Mattijsen)++ | doc/Type/Telemetry.rakudoc

[11:47] <Geth> ¦ doc/main: Document safe-snapper module

[11:47] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e3ec1efeda

[11:49] *** linkable6 joined
[11:52] *** Some-body_ joined
[11:54] *** DarthGandalf left
[11:55] *** Some-body_ is now known as DarthGandalf

[11:55] <Geth> ¦ doc/main: 71391b1cb3 | (Elizabeth Mattijsen)++ | doc/Type/Cool.rakudoc

[11:55] <Geth> ¦ doc/main: Document Cool.uniparse

[11:55] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/71391b1cb3

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:06] <Geth> ¦ doc/main: 16258ab187 | (Elizabeth Mattijsen)++ | doc/Language/traits.rakudoc

[12:06] <Geth> ¦ doc/main: Document class|role is implementation-detail

[12:06] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/16258ab187

[12:07] <Geth> ¦ doc/main: ceb58f25d7 | (Elizabeth Mattijsen)++ | doc/Type/QuantHash.rakudoc

[12:07] <Geth> ¦ doc/main: Document QuantHash.Map

[12:07] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/ceb58f25d7

[12:10] *** Geth left
[12:10] *** Geth joined
[12:19] <Geth> ¦ doc/main: bfa8305a05 | (Elizabeth Mattijsen)++ | 2 files

[12:19] <Geth> ¦ doc/main: Document Any|Seq.slice

[12:19] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/bfa8305a05

[12:33] *** jpn left
[12:39] <Geth> ¦ doc/main: df826546dc | (Elizabeth Mattijsen)++ | doc/Language/create-cli.rakudoc

[12:39] <Geth> ¦ doc/main: Document %*SUB-MAIN-OPTS<coerce-allomorphs-to>

[12:39] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/df826546dc

[12:50] <Geth> ¦ doc/main: 6ca70da1f6 | (Elizabeth Mattijsen)++ | 2 files

[12:50] <Geth> ¦ doc/main: Document spurt without data

[12:50] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/6ca70da1f6

[12:50] *** codesections joined
[12:52] *** jpn joined
[13:01] <Geth> ¦ doc/main: 4aea97f4e1 | (Elizabeth Mattijsen)++ | doc/Language/setbagmix.rakudoc

[13:01] <Geth> ¦ doc/main: Date the (==) operator

[13:01] <Geth> ¦ doc/main: 

[13:01] <Geth> ¦ doc/main: Also mention https://raku.land/zef:lizmat/Set::Equality as an alternative

[13:01] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/4aea97f4e1

[13:21] *** jpn left
[13:21] *** rf joined
[13:21] <rf> Morning folks

[13:45] *** derpydoo left
[13:46] *** codesections left
[13:48] *** jpn joined
[13:56] *** jpn left
[14:00] *** jpn joined
[14:00] *** derpydoo joined
[14:08] *** Some-body_ joined
[14:10] *** DarthGandalf left
[14:11] *** Some-body_ is now known as DarthGandalf

[14:37] *** codesections joined
[14:40] *** bigdata left
[15:08] *** Xliff joined
[15:11] <Xliff> \o

[15:12] <Xliff> Can someone tell me why A.^can('BUILD').head.file comes out as "src/Perl6/World.nqp" but $?FILE comes out as "A.pm6"?

[15:12] <Xliff> This is in a BEGIN block.

[15:30] <rf> m: A.^can('BUILD').head.file.say

[15:30] <camelia> rakudo-moar e177bc2e3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    A used at line 1␤␤»

[15:30] *** Sgeo joined
[15:32] <Xliff> rf: Not going to work via camelia. Has to be file-based.

[15:50] <[Coke]> I tried that with a random item I had - no output; I assume the module also needs a BUILD?

[15:51] <[Coke]> ah, there it is

[15:52] <[Coke]> Xliff: on my machine (old mac mini), I see them both as fully qualified.

[15:52] <[Coke]> (also running 2022.07)

[15:54] <[Coke]> same on latest m2 mac running 2023.02

[15:55] <[Coke]> (if I put the two output lines in a BEGIN block, the one with "can" generates Nil instead)

[15:58] *** derpydoo left
[16:00] <[Coke]> folks, off topic: wanted to rant about living in a future where my washer bricks itself doing a recall-based firware update over the air and I need a tech to come out and flash it.

[16:00] <[Coke]> ... while there's a load of wet clothes in it, no less.

[16:12] <discord-raku-bot> <el gatito (** advocate)> does raku irc has an off topic channel

[16:16] <lizmat> I think #raku is the closes that comes to it, atm

[16:16] <lizmat> an off-topic channel is easily made though

[16:16] <tonyo> [Coke]: haha..i just put a wedgewood stove in the house for a very similar reason

[16:19] <dakkar> Xliff: interesting! given `class A { submethod BUILD { } }`, `BEGIN { A.^can('BUILD')».file».say }` prints the nqp file, but the same code outside of `BEGIN` (i.e. later) prints the source file

[16:19] <tellable6> 2023-03-09T03:00:47Z #raku <rf> dakkar thanks for pointing out the missing 2's in my splits, I found a few bugs that got squashed with that change

[16:20] <dakkar> rf: glad to help!

[16:21] <dakkar> Xliff: CHECK also prints the nqp file, INIT prints the right source

[16:21] *** razetime joined
[16:21] <dakkar> Xliff: I suspect some MOPpery at INIT time

[16:23] <tonyo> rf: does humming bird have session management?

[16:23] <dakkar> (I would expect all the meta-class stuff to happen before the end of CHECK, so it can be saved in the precompiled form… but I'm probably missing something)

[16:23] <tonyo> s/anagement/iddleware

[16:29] *** Tirifto left
[16:30] *** Tirifto joined
[16:39] <rf> tonyo: Not at the moment

[16:39] <rf> I've written a few middlewares for services that implement it though

[16:39] <rf> It is in my backlog though

[16:41] <rf> I'm planning to model it after: https://github.com/aantron/dream/tree/master/example/b-session#files this frameworks session system

[16:41] <rf> Where it's just a middleware you register globally

[16:42] <discord-raku-bot> <Anton Antonov> Has anyone tried "Humming-Bird" on macOS? Specifically the example(s) here: https://dev.to/rawleyfowler/writing-micro-services-with-raku-and-humming-bird-59k4

[16:42] <rf> All of my testing is on Linux @Anton, but I have a MacOS pipeline for CI so it *should* work.

[16:43] <rf> Are you running into an issue?

[16:47] <discord-raku-bot> <Anton Antonov> @rf Sure -- I run into issues anytime I try to install almost anything depending on "native call."  For the linked example above, the issues come from installing "DBIish" .

[16:48] <rf> Hmm, I am not sure I will be of too much assistance for MacOS, what is it complaining about?

[16:55] <rf> Odds are you need to install a DB library

[16:57] <ugexe> fwiw in your CI pipeline you probably use --/test when installing dependencies, which might be the source of their failures

[16:57] <discord-raku-bot> <Anton Antonov> @rf Yeah, that might be the case. I am not experimenting with it further.

[16:58] <rf> DBIish isn't a dep of my project, I used it in my blog post with my project

[16:58] <discord-raku-bot> <Anton Antonov> right

[16:58] <rf> You could realistically pull in any DB library, that is the magic so-to-say

[17:03] <discord-raku-bot> <Anton Antonov> hmmm... ok

[17:07] <tonyo> rf: that'd be easy to implement

[17:09] <rf> tonyo: Yeah, I am about to make a PR with a fairly naive implementation of global middleware

[17:10] <rf> Then I'll look into adding more middleware options in Humming-Bird::Middleware

[17:11] *** razetime left
[17:22] <Geth> ¦ doc/main: f6a037fed0 | cfa++ | doc/Type/List.rakudoc

[17:22] <Geth> ¦ doc/main: use v6.e.PREVIEW for rotor examples

[17:22] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/f6a037fed0

[17:30] *** dakkar left
[17:51] *** lichtkind left
[17:57] *** abraxxa left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:12] *** rf_ joined
[18:13] *** rf left
[18:49] *** tea3po joined
[18:53] *** teatwo left
[18:59] *** jpn left
[19:06] <Geth> ¦ doc/main: 23dca2842e | cfa++ (committed using GitHub Web editor) | 11 files

[19:06] <Geth> ¦ doc/main: Remove formatting codes from various examples (#4262)

[19:06] <Geth> ¦ doc/main: 

[19:06] <Geth> ¦ doc/main: These don't currently render correctly on the doc website and in some cases

[19:06] <Geth> ¦ doc/main: make example source more difficult to read and maintain.  Output presentation

[19:06] <Geth> ¦ doc/main: has also been tidied.

[19:06] <Geth> ¦ doc/main: 

[19:07] <Geth> ¦ doc/main: (If these codes are permitted in future, consider reverting this commit.)

[19:07] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/23dca2842e

[19:10] <tonyo> does the middleware just take a func?

[19:12] <rf_> tonyo: yes

[19:13] <rf_> Also idk why im rf_ now.

[19:13] *** rf_ left
[19:13] *** rf joined
[19:14] <discord-raku-bot> <Nemokosch> for some reason it was occupied, idk

[19:14] <discord-raku-bot> <Nemokosch> you can set the nick though

[19:14] <rf> tonyo: Actually everything in Humming-Bird is just functions. Then they all compose together to make the endpoints on the routing tree

[19:14] <rf> Now I am rf not rf_ :)

[19:17] <tonyo> oh, so i could potentially write the middleware

[19:17] <tonyo> (doesn't need to be in a specific repo)

[19:19] <rf> Yup

[19:20] <rf> Anyone can write any middleware as long as it types Request -> Response -> Callback : (Request -> Response -> Callback) -> Response 

[19:20] <rf> Callback is a recursive type

[19:21] <rf> So you can short circuit early be returning a Response in your middleware, or simply call &next()

[19:21] <rf> which will continue down the function chain

[19:22] <tonyo> but is there any TCO

[19:22] <tonyo> also, rad

[19:22] <rf> Yes

[19:23] <rf> We compose to a single function

[19:23] <rf> As crazy as that sounds

[19:23] <rf> At runtime of course.

[19:24] <rf> Then there's also "advice" that type Response --> Response which run at the end of the stack, and "error" which handles any exceptions thrown during the route stack execution

[19:24] <rf> Those are all composed in as well

[19:24] <rf> Hence "composable framework"

[19:27] *** jpn joined
[19:37] *** jpn left
[20:03] *** vrurg_ joined
[20:03] *** vrurg left
[20:07] *** jpn joined
[20:12] *** jpn left
[20:27] *** jpn joined
[20:34] *** jpn left
[20:52] *** jpn joined
[20:59] *** jpn left
[21:37] *** jpn joined
[21:53] *** jpn left
[22:15] *** jpn joined
[22:20] *** jpn left
[22:29] *** jpn joined
[22:36] *** jpn left
[22:40] *** jpn joined
[22:46] *** jpn left
[22:50] *** codesections left
[23:08] *** vrurg joined
[23:11] *** vrurg_ left
[23:14] *** codesections joined
[23:17] *** jpn joined
[23:24] <rf> .

[23:27] *** jpn left
[23:37] <Voldenet> rf: the full-middleware approach to routing has performance problems and massive stacks

[23:37] <Voldenet> I've used it and at the end it was faster to just have gigantic map with (path, request -> response)

[23:41] <rf> That's basically what it compiles to

[23:41] <Voldenet> ah, nice

[23:41] <rf> A trie of sorts that maps to a function request -> response

[23:42] *** ProperNoun joined
[23:42] <Voldenet> it's also useful to consider per-route middleware settings

[23:42] <rf> The middleware, route handler, error handlers, and advice are sort of "compiled" into one function

[23:43] <Voldenet> for example, you add global "auth" middleware for everything, but options for authentication are taken from the route defined later

[23:44] <Voldenet> it introduces extremely tangled structure unfortunately

[23:47] <rf> The chain knows nothing about the next, or previous members, just that there is a next member or not

[23:47] *** lizmat left
[23:48] *** lizmat joined
[23:48] <Voldenet> I know, that's why it would introduce complexity, since middleware for picking the route would need to set chosen route in $request

[23:48] <Voldenet> and actual route dispatching would be done by other middleware

[23:49] *** Xliff left
[23:49] <rf> No, they also don't know about which route they're on.

[23:50] <rf> If you don't want middleware on a route, don't. Or use a router

[23:50] <rf> There are a few mechanisms to segregate middelwares from routes you don't want them on

[23:51] *** japhb left
[23:52] <rf> I guess you could discover your current route with request.path, but I don't think it would be necessary for what you're asking

[23:53] <Voldenet> I've seen a lot of overhead in multiple middlewares doing that in the past

[23:55] <Voldenet> but I don't know what's the good architecture for that, it's either hard to compose or slow

[23:59] *** japhb joined
