[00:00] *** reportable6 left
[00:01] <coleman> run("kubectl", "get", "pods", "-n", "greymatter", :out).out.split(/ \s /).grep(/ catalog /).first
[00:01] *** reportable6 joined
[00:01] <coleman> split everything into a Seq of fields (whitespace delimited), then grep that, then take the first
[00:05] <rf> Nemokosch, I fixed it by doing [% set description = meta.description %] then checking the set var
[00:06] <rf> There is an open issue for it https://github.com/raku-community-modules/Template6/issues/4
[00:07] <discord-raku-bot> <Nemokosch> clever
[00:08] <discord-raku-bot> <Nemokosch> anyway, for now, I'm going to just refactor the strings and hope that helps better understand the data flow
[00:08] <cfa> coleman: but i thought you wanted to print the matching line
[00:08] <cfa> awk-style
[00:08] <rf> Nemokosch, thanks
[00:09] <cfa> oh, {print $1}, derp
[00:09] <cfa> sorry
[00:09] *** lichtkind left
[00:27] *** jpn joined
[00:29] <coleman> shorter:
[00:29] <coleman> run(<kubectl get pods -n greymatter>, :out).out.slurp.match(/catalog <[ - \w \d ]>+ /).first
[00:29] <coleman> I forgot that custom character classes are like <[ ]>
[00:30] <coleman> https://docs.raku.org/language/regexes.html#Enumerated_character_classes_and_ranges
[00:38] <coleman> s/first/:first/
[00:40] <Geth> ¦ doc: cfa self-assigned Spin off signature literals https://github.com/Raku/doc/issues/2686
[00:49] <discord-raku-bot> <Nemokosch> rf: are there any claims that indexing would be 1-based? (to be honest: are there any mentions of retrieving data by indexing?)
[00:50] <discord-raku-bot> <Nemokosch> https://github.com/raku-community-modules/Template6/blob/b34ff44f9abc3f2b877b203365acde834819897b/lib/Template6/Stash.rakumod#L17 seems buggy to me
[00:55] <rf> Nemo I don't see anything like that
[00:55] <rf> That does look a little suspect
[00:58] <discord-raku-bot> <Nemokosch> by the way, that module kind of implies that you can store arrays and then look them up with the dot
[00:59] <discord-raku-bot> <Nemokosch> well, under certain circumstances, at least, not necessarily in a control statement
[00:59] <discord-raku-bot> <Nemokosch> but in a get statement, most probably you could
[01:03] *** Maylay left
[01:10] *** Maylay joined
[01:13] *** TieUpYourCamel joined
[01:29] *** QhpAptyj9hj0RQwM left
[01:42] *** rf left
[01:43] *** rf joined
[01:45] <Geth> ¦ doc/main: a0cb9fce9a | (Will Coleda)++ | util/clean-spell
[01:45] <Geth> ¦ doc/main: close IO we're not using
[01:45] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/a0cb9fce9a
[01:45] <Geth> ¦ doc/main: 8c04561348 | (Will Coleda)++ | xt/pws/words.pws
[01:45] <Geth> ¦ doc/main: Track latest aspell install
[01:45] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/8c04561348
[01:45] <Geth> ¦ doc/main: 59ffd079ed | (Will Coleda)++ | 2 files
[01:45] <Geth> ¦ doc/main: remove unneeded entries
[01:45] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/59ffd079ed
[01:56] <Geth> ¦ doc: cfa++ created pull request #4233: Extract a signature literals language page, update links (#2686)
[01:56] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4233
[01:57] *** linkable6 left
[01:57] *** NemokoschKiwi joined
[01:58] *** NemokoschKiwi left
[01:58] <discord-raku-bot> <Nemokosch> rf: FYI https://github.com/raku-community-modules/Template6/commit/fc720cf23b
[01:58] *** linkable6 joined
[02:02] <rf> @Nemo I wonder if Postitional and Associative might be better
[02:02] <rf> For the smart match
[02:03] <discord-raku-bot> <Nemokosch> yes, I was thinking about it but then it started bothering me that somebody could overload AT-KEY and AT-POS without implementing any interface and I backed off from this path xD
[02:04] <discord-raku-bot> <Nemokosch> going from Hash and Array to Map and List was urgent, though, it's easy to end up with a nested structure that has those types somewhere on the way
[02:04] <discord-raku-bot> <Nemokosch> I tripped myself up way too hard with that in the test...
[02:06] <discord-raku-bot> <Nemokosch> by the way, feel free to make modifications to this module, a commit bit to this organisation is basically for free
[02:11] *** derpydoo joined
[02:23] <xinming> m: sub a { "a".say; }; my &a-old = &a; &a.wrap({ "b".say }); a-old;
[02:23] <camelia> rakudo-moar b721f0a04: OUTPUT: «b␤»
[02:24] <xinming> In this case, Is there a way to keep the old routine's reference ?
[02:26] <MasterDuke> m: sub a { "a".say; }; my &a-old = &a.clone; &a.wrap({ "b".say }); a-old;
[02:26] <camelia> rakudo-moar b721f0a04: OUTPUT: «a␤»
[02:27] <xinming> Got it, thanks
[02:28] <MasterDuke> np. not 100% sure how well that would work for methods, but something to experiment with at least
[02:30] <rf> That should work with methods I think
[02:35] *** razetime joined
[02:52] *** derpydoo left
[03:45] *** razetime left
[03:59] *** ToddAndMargo left
[04:10] *** rf left
[04:41] *** razetime joined
[04:44] *** archenoth joined
[04:45] *** amenonsen joined
[04:54] *** cfa left
[05:15] *** jpn left
[05:25] *** razetime left
[05:41] *** razetime joined
[05:42] *** jpn joined
[05:49] *** jpn left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:18] *** jpn joined
[06:26] *** jpn left
[06:30] *** derpydoo joined
[06:40] *** jpn joined
[06:45] *** jpn left
[07:15] *** jpn joined
[07:18] *** nort joined
[07:20] *** jpn left
[07:34] *** jpn joined
[07:40] *** jpn left
[07:40] *** abraxxa joined
[07:41] *** epony left
[07:46] <xinming> MasterDuke: Is it possible to not clone, But still reference the internal code entry
[07:47] <xinming> &code.clone  achieves what I wanted, But still curious wether we can still access the entry to original code start for the same function.
[07:47] <xinming> So .wrap modify the ref to the new one, Where we still be able to call the old function with manual saved code reference
[07:50] *** abraxxa left
[07:53] *** abraxxa joined
[07:56] *** jpn joined
[08:00] *** jpn left
[08:05] *** razetime left
[08:08] *** Sgeo left
[08:30] *** abraxxa left
[08:31] *** razetime joined
[08:32] *** epony joined
[08:50] *** lichtkind joined
[09:11] *** Oshawott joined
[09:12] *** archenoth left
[09:19] *** sena_kun joined
[09:22] *** razetime1 joined
[09:23] *** razetime left
[09:23] *** razetime1 is now known as razetime
[09:41] *** razetime1 joined
[09:42] *** razetime left
[09:42] *** razetime1 is now known as razetime
[10:13] *** sena_kun left
[10:19] *** jpn joined
[10:35] *** razetime left
[10:57] <guifa_> xinming you won't be able to AFAIK without unwrapping.  Inside of the wrapper, you can reference it, but not outside.
[11:00] *** epony left
[11:06] *** rakuuser joined
[11:12] *** sena_kun joined
[11:14] *** epony joined
[11:42] *** ab5tract joined
[11:45] *** kylese joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:07] *** nebuchad` is now known as nebuchadnezzar
[12:12] *** Maylay left
[12:12] *** derpydoo left
[12:16] *** Maylay joined
[12:59] *** sena_kun left
[13:28] *** rakuuser left
[13:34] *** Maylay left
[13:40] *** Maylay joined
[13:44] *** sena_kun joined
[14:30] *** epony left
[14:49] <tonyo> m: sub a {'a'.say;}; &a.wrap(-> { 'b'.say; callwith; }); a;
[14:49] <camelia> rakudo-moar b721f0a04: OUTPUT: «b␤a␤»
[14:50] <tonyo> xinming: like that ^
[14:51] <tonyo> or you can use binding:
[14:51] <tonyo> m: sub a {"a".say;}; my &oa := a; a.wrap({"b".say;}); oa();
[14:51] <camelia> rakudo-moar 66f7afed1: OUTPUT: «a␤Type check failed in binding; expected Callable but got Bool (Bool::True)␤  in block <unit> at <tmp> line 1␤␤»
[14:52] <tonyo> m: sub a {"a".say;}; my &oa := &a; a.wrap({"b".say;}); oa();
[14:52] <camelia> rakudo-moar 66f7afed1: OUTPUT: «a␤No such method 'wrap' for invocant of type 'Bool'.  Did you mean any of␤these: 'Map', 'Rat', 'WHAT', 'grep', 'map'?␤  in block <unit> at <tmp> line 1␤␤»
[14:52] <tonyo> ah
[14:54] *** cfa joined
[14:54] *** squashable6 left
[14:57] *** squashable6 joined
[14:57] <tonyo> rf: are you in need of a templating system?  should i resurrect my old templater (it generated raku code that could be used on the fly or generated and used statically)
[14:57] <tellable6> tonyo, I'll pass your message to rf
[14:57] *** rf joined
[14:58] <rf> Is there any way for a Channel to act as a pub sub? I want to broadcast each message to every react block listening for it
[14:58] <tellable6> 2023-03-02T14:57:13Z #raku <tonyo> rf: are you in need of a templating system?  should i resurrect my old templater (it generated raku code that could be used on the fly or generated and used statically)
[14:58] <tonyo> rf: iirc you want a supplier
[14:58] <rf> tonyo: Yeah actually I'm working to bit a good few thousand lines of Raku into production. I'm using Template6 right now but I think it still needs a lot of work.
[14:58] <tonyo> assuming you want a fan out
[14:59] <rf> Yeah fanout is what I want
[14:59] <rf> I'll give it a try thanks
[14:59] <tonyo> i'll write an example, one sec
[14:59] <tonyo> and i'll look at what's good on my template code and whether it can be released or not (so many tools i just write shoddily to get something done and never polish/release)
[15:00] <rf> Haha, yeah I get that lol. Humming-Bird is my first library I've tried to polish in years
[15:00] <tonyo> +=5k all the people responsible for the new docs
[15:02] <tonyo> m: my Supplier $sr .=new; $sr.Supply.tap(-> $v {"1: $v".say;}); $sr.Supply.tap(-> $v {"2: $v".say;}); Supply.from-list(0..5).tap(-> $x { $sr.emit($x); }, done => { $sr.done }); # rf
[15:02] <camelia> rakudo-moar 66f7afed1: OUTPUT: «1: 0␤2: 0␤1: 1␤2: 1␤1: 2␤2: 2␤1: 3␤2: 3␤1: 4␤2: 4␤1: 5␤2: 5␤»
[15:03] <rf> Sweet that is perfect.
[15:03] <tonyo> humming bird looks interesting
[15:03] <tonyo> is this lighter weight than cro?
[15:04] <rf> Its ~400 LOC for the core code, and performs about as well.
[15:04] <tonyo> also, are you looking to embed the templating system into HB ?
[15:04] <rf> No, HB is mostly focused just on core web functionality, its up to the user to pull in template engines etc
[15:04] <tonyo> there's also these: https://raku.land/zef:tony-o/Event::Emitter::Inter-Process  and https://raku.land/zef:tony-o/Event::Emitter
[15:05] <rf> I'm writing a pretty concurrent web-application in HB mostly for reference and to show it works well :), also using it as an excuse to teach a friend Raku
[15:06] <rf> That's where supplier comes in
[15:13] *** lichtkind left
[15:17] <Geth> ¦ doc/lizmat-Date-daycount: cf182e3f31 | (Elizabeth Mattijsen)++ | doc/Type/Date.pod6
[15:17] <Geth> ¦ doc/lizmat-Date-daycount: Document Date.daycount|Int|Numeric
[15:17] <Geth> ¦ doc/lizmat-Date-daycount: review: https://github.com/Raku/doc/commit/cf182e3f31
[15:18] <Geth> ¦ doc: lizmat++ created pull request #4234: Document Date.daycount|Int|Numeric
[15:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4234
[15:20] <cfa> bisectable6: Date.today.daycount.say
[15:20] <bisectable6> cfa, Will bisect the whole range automagically because no endpoints were provided, hang tight
[15:20] <bisectable6> cfa, ¦6c (67 commits): «60005␤»
[15:20] <bisectable6> cfa, Nothing to bisect!
[15:22] <cfa> lizmat: ^
[15:22] <Geth> ¦ doc/main: bf7a78beee | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | doc/Type/Date.pod6
[15:22] <Geth> ¦ doc/main: Document Date.daycount|Int|Numeric (#4234)
[15:22] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/bf7a78beee
[15:22] <lizmat> yeah, so probably from day one
[15:22] * cfa nods
[15:25] <Geth> ¦ doc/main: 6ef34fc5f7 | (Elizabeth Mattijsen)++ | doc/Type/Date.pod6
[15:25] <Geth> ¦ doc/main: Also document Date.Real
[15:25] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/6ef34fc5f7
[15:26] *** Sgeo joined
[15:29] <tonyo> https://docs.raku.org/syntax/heredocs%20:to
[15:33] <Geth> ¦ doc/main: fbba32dabc | (Elizabeth Mattijsen)++ | doc/Type/DateTime.pod6
[15:33] <Geth> ¦ doc/main: Document DateTime.Real
[15:33] <discord-raku-bot> <Nemokosch> https://github.com/Raku/doc-website/issues/181
[15:33] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/fbba32dabc
[15:33] <Geth> ¦ doc/main: 0d25f95ea8 | (Elizabeth Mattijsen)++ | doc/Type/Date.pod6
[15:33] <Geth> ¦ doc/main: Add missing invocant markers in Date.methods
[15:33] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/0d25f95ea8
[15:43] <Geth> ¦ doc/main: 63083c66a3 | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6
[15:43] <Geth> ¦ doc/main: Document Any.classify|categorize(*)
[15:43] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/63083c66a3
[15:44] *** QhpAptyj9hj0RQwM joined
[15:57] <Geth> ¦ doc/main: 1b370f7d29 | (Will Coleda)++ | xt/check-signatures.rakutest
[15:57] <Geth> ¦ doc/main: Add test-files note
[15:57] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/1b370f7d29
[15:58] <rf> Is there a method to wipe a Hash?
[16:01] <lizmat> %h = ()
[16:04] <lizmat> afk&
[16:16] <rf> Is there any way to flush a supply?
[16:17] <ugexe> what does that mean?
[16:18] <ugexe> in the context of a supply
[16:18] <rf> I have a channel, after a while the channels contents can become "stale", I want to empty the channels supply
[16:19] <rf> I'd prefer for the consuming code not to have to check the "freshness" of the supplied values
[16:21] <tonyo> do you mean in the way real time stuff becomes stale?  eg no point in braking once the back of the semi has disabled the car?
[16:22] <ugexe> what about Supply.stable(...)
[16:22] <rf> Basically I have an infinite data stream being fed into a channel in chunks, consumers will consume as much as possible, but I don't expect to be able to have infinite consumers so some data becomes old (as in time) and thus can't be consumed anymore
[16:23] <rf> Upon noticing a single piece of stale data I can within a small margin of error assume that the rest of the channel is stale, so I should clear it and wait for more data.
[16:24] <ugexe> Seems like you could just close the originally supply and create a new one
[16:24] <ugexe> original
[16:25] <rf> It isn't super practical, but I think it might perform a lot better than the Database IO stuff its doing rn.
[16:25] <rf> Can I reassign a channels supply?
[16:25] <ugexe> not sure
[16:25] <ugexe> my guess is each time .Supply is called it would return a new supply
[16:26] <rf> Maybe I can just reassign the channel itself
[16:31] *** razetime joined
[16:38] *** Maylay left
[16:42] *** rypervenche left
[16:42] *** Maylay joined
[16:45] *** lichtkind joined
[16:52] <tonyo> i would guess you can just close and reopen the supply
[16:52] *** QhpAptyj9hj0RQwM left
[16:53] <tonyo> rf: i'll add the template stuff to git so you can take a look at it
[16:56] <tonyo> https://github.com/tony-o/raku-protone - you'll have to look at the tests for usage
[16:57] <Geth> ¦ docker: d6873e88a8 | (Daniel Mita)++ (committed using GitHub Web editor) | 5 files
[16:57] <Geth> ¦ docker: Bump to 2023.02 (#53)
[16:57] <Geth> ¦ docker: review: https://github.com/Raku/docker/commit/d6873e88a8
[17:02] *** jpn left
[17:02] <discord-raku-bot> <Nemokosch> I wouldn't mind pushing Template6 up to a useful level
[17:03] <discord-raku-bot> <Nemokosch> (also, I have a pending PR for fez - somebody just commented on it that it would solve their issue as well)
[17:05] <tonyo> ughh template toolkit
[17:05] <rf> tonyo: thanks!
[17:06] <rf> Tbh I don't care who or what, I think we need a really nice templating dist lol
[17:06] <rf> Looking at yours right now tonyo
[17:06] <tonyo> i have a fix i need to push one sec
[17:08] <tonyo> that was pushed from an older version
[17:15] *** Sauvin left
[17:22] <discord-raku-bot> <Nemokosch> Well my story is as simple as to get a proper solution for the raku.org site, lol
[17:22] <discord-raku-bot> <Nemokosch> mowyw is a bit niche...
[17:35] <tonyo> rf: just pushed up the more recent version
[17:35] <tonyo> t/02 shows it using native funcs as well as registered funcs
[17:35] <tonyo> so you can do hello {{name.&flip}} (the & is necessary to show it's a native func)
[17:41] <rf> Sweet, this looks really good
[17:42] *** razetime left
[17:43] *** jgaz joined
[17:46] <tonyo> there's likely bugs
[17:46] <rf> I'll play around with it
[17:48] <tonyo> nemokosch: are you 2colours?
[17:48] <tellable6> tonyo, I'll pass your message to Nemokosch
[17:50] <discord-raku-bot> <Nemokosch> Yep
[17:51] <tonyo> pr is available in v42
[17:56] <rf> Holy crap, this actually worked.
[17:56] <rf> Infinite data processing at my fingertips
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:06] *** perlbot left
[18:06] *** simcop2387 left
[18:06] <rf> @Nemokosch, I am very interested in your maintenance of Template6 mainly because I have a lot of code that uses it already :D
[18:09] <Geth> ¦ doc/main: 360bee5538 | (Will Coleda)++ | README.md
[18:09] <Geth> ¦ doc/main: clarify spec version
[18:09] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/360bee5538
[18:14] <tonyo> what actually worked?
[18:15] *** simcop2387 joined
[18:17] *** perlbot joined
[18:18] <rf> My super distributed system lol
[18:18] <rf> 8 threads with the event loop with really good throughput lol
[18:23] <discord-raku-bot> <Nemokosch> I mostly chose it because it's the most similar to mowyw, and also it's highly inspired by a well-documented Perl templating system - TT2
[18:24] <discord-raku-bot> <Nemokosch> so like, if anything doesn't work, at least I can get an idea what it's supposed to do xD
[18:28] <cfa> tonyo: what's wrong with template toolkit?
[18:28] *** Sauvin joined
[18:32] <Geth> ¦ doc/main: 5cb3d5a385 | (Will Coleda)++ | 13 files
[18:32] <Geth> ¦ doc/main: Improve skip reporting
[18:32] <Geth> ¦ doc/main: 
[18:32] <Geth> ¦ doc/main: Make it more clear why the test was skipped.
[18:32] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/5cb3d5a385
[18:39] <tonyo> cfa: it's slow. it goes away from the language that's using it (it's its own mini language) and this makes extensibility difficult.  ziprecruiter uses it so i used it for four years as a result.  maybe it's better now but it was very easy to find edge cases in when i was using it
[18:41] <tonyo> for instance..http://template-toolkit.org/docs/modules/Template/Plugin.html  <- writing this much code to extend the templating system seems outrageous to me
[18:43] <tonyo> conversely, twitter wrote an engine that compiled to code and you could execute.. the templating system i linked rf to also does this albeit more naively
[18:43] <rf> I think DSL's make way more sense for templating
[18:44] <tonyo> a DSL is fine, adding to TT's is a pita
[18:44] <rf> When I wrote OCaml professionally, we used https://github.com/ocsigen/tyxml and it was wonderful
[18:45] <rf> Its nice to have type checking in templates lol
[18:45] <tonyo> rf: that looks great
[18:45] *** QhpAptyj9hj0RQwM joined
[18:45] <rf> Yeah its really good, I think there's a Haskell style one too
[18:45] <tonyo> i miss jade templating
[18:46] <rf> I was thinkin about how hard it would be to write a Handlebars engine for Raku
[18:48] <tonyo> pretty easy i'd reckon
[18:48] <tonyo> there exists one already too iirc
[18:48] <rf> There's one for mustache
[18:48] <rf> I just find it wayyyyyy too slow
[18:51] <discord-raku-bot> <Nemokosch> kostas worked on it some time
[18:51] <discord-raku-bot> <Nemokosch> but not sure his modifications were ever taken over
[18:51] <tonyo> ahhh
[18:52] <rf> 18ms to render this page https://rawley.xyz/bookshelf
[18:52] <rf> Seems wayyy to long
[18:53] <discord-raku-bot> <Nemokosch> tbh templating is a good example of the circular nature of development
[18:54] <cfa> ka is a wheel
[18:54] <discord-raku-bot> <Nemokosch> you probably start off with plain code. Then you realize that most of your code is actually just plain string
[18:55] <discord-raku-bot> <Nemokosch> You want to keep it simple, just covering your most urgent demands, telling yourself "I'm not going to use it everywhere"
[18:56] <discord-raku-bot> <Nemokosch> Then you want to solve more and more within the templating framework itself, and eventually you end up pondering why you're doing this convoluted garbage in the first place when you could just solve it in code 😂
[18:57] <rf> Yeah lol, that does tend to happen
[18:57] <discord-raku-bot> <Nemokosch> the doc website uses a very code-ish system created by finanalyst, he calls it RakuClosures or something like that
[18:58] <discord-raku-bot> <Nemokosch> it's basically a bunch of callbacks and shared data
[18:58] *** jpn joined
[18:59] <discord-raku-bot> <Nemokosch> ... so now I'm proposing that maybe it could be combined with HTML::Tag where it's appropriate. After all, that's not a templating system, just a tool for creating HTML nodes and generating string from them
[18:59] <discord-raku-bot> <Nemokosch> better than counting opening tags and closing tags I'd say
[19:00] <rf> tonyo: If you like FP you might like Humming-Bird it's literally one giant function composition :D
[19:02] *** jpn left
[19:13] *** rakuuser joined
[19:28] *** gridbugsmasher42 joined
[19:39] *** gridbugsmasher42 left
[19:57] *** abraxxa-home joined
[20:06] *** abraxxa-home left
[20:10] *** abraxxa-home joined
[20:12] *** kylese left
[20:37] <Geth> ¦ doc/main: 5957cecfc9 | (Will Coleda)++ | xt/link-checker.rakutest
[20:37] <Geth> ¦ doc/main: Add first pass at internal link checker
[20:37] <Geth> ¦ doc/main: 
[20:37] <Geth> ¦ doc/main: * Only check primary sources or secondary pages known to exist.
[20:37] <Geth> ¦ doc/main: * complain about .html links - the site shouldn't need them, and POD certainly doesn't
[20:37] <Geth> ¦ doc/main: * Assume website path capitalization is correct for now.
[20:37] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/5957cecfc9
[20:38] *** jmcgnh left
[20:46] <Geth> ¦ doc: coke assigned to lizmat Issue Telemetry::Instrument::AdHoc docs missing https://github.com/Raku/doc/issues/4235
[20:48] <Geth> ¦ doc/main: a3c02f31a4 | (Will Coleda)++ | doc/Type/Telemetry.pod6
[20:48] <Geth> ¦ doc/main: remove link to non-existant content
[20:48] <Geth> ¦ doc/main: 
[20:48] <Geth> ¦ doc/main: part of #4235, ok to revert when target page exists.
[20:48] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/a3c02f31a4
[20:48] <Geth> ¦ doc/main: c2770d6d36 | (Will Coleda)++ | 5 files
[20:48] <Geth> ¦ doc/main: Fix broken links discovered by xt/link-checker.rakutest
[20:48] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/c2770d6d36
[20:51] *** rakuuser left
[20:59] *** jmcgnh joined
[21:09] *** El_Che left
[21:10] *** El_Che joined
[21:11] *** QhpAptyj9hj0RQwM left
[21:13] *** jmcgnh left
[21:15] <Geth> ¦ doc: tbrowder++ created pull request #4236: Change humorous text to technical exposition
[21:15] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4236
[21:21] <Geth> ¦ doc/main: 10014cb4a9 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/tables.pod6
[21:21] <Geth> ¦ doc/main: Change humorous text to technical exposition (#4236)
[21:21] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/10014cb4a9
[21:39] <rf> Is there a variable that stores the machines operating system?
[21:39] <rf> Like $*OS or something
[21:40] *** jmcgnh joined
[21:41] <rf> Ah, $*DISTRO, neat
[21:49] <rf> @Nemokosch, got a new Template6 bug, for some reason [% if foo %] [% foo %] [% end %] is always showing foo, even when I don't pass it to process
[21:49] <tonyo> that seems less than ideal
[21:55] <rf> Yeah, it definetley is not great, it's weird because it seems to happen only when the value isn't present rather than when its truthy/fasly
[21:56] <discord-raku-bot> <Nemokosch> not even an error?
[21:56] <rf> No, it just shows up.
[21:56] *** jpn joined
[21:57] <rf> Yeah lol, setting my arg to Nil causes it to disappear
[21:57] <rf> But I don't want to pass the arg
[21:57] <rf> If I don't pass it it shows up
[21:58] <rf> Hmm, could it be because the variable is hidden behind an INCLUDE
[21:58] <rf> Or does template6 combine the include before evaluating arguments?
[21:59] <discord-raku-bot> <Nemokosch> oh I think I get why it doesn't throw
[22:00] *** epony joined
[22:00] <discord-raku-bot> <Nemokosch> the code is like if $stash.get('foo') { ... }
[22:00] <discord-raku-bot> <Nemokosch> that's perfectly legit
[22:00] <discord-raku-bot> <Nemokosch> and the default behavior for get is...
[22:00] <rf> Hmm, I think if the stash doesn't have it, it should be falsy
[22:01] <discord-raku-bot> <Nemokosch> > # If nothing was found, and we're not in strict mode, we return the original query.
[22:01] <rf> Oh, should I be in strict?
[22:01] <discord-raku-bot> <Nemokosch> I don't quite get the relevance of this non-strict mode that it's even the default
[22:01] <rf> I think that should be refactored, but I am using a hack until then lol     %args<toast> = Nil without %args<toast>;
[22:01] <discord-raku-bot> <Nemokosch> but it seems like an easy fix to make the generated code $stash.get('foo', :strict)
[22:01] *** jgaz left
[22:02] <discord-raku-bot> <Nemokosch> why would somebody want `if the string I give you is truthy' as a default
[22:03] <rf> I mean like if I do [% if foo %] and I did not pass foo, I expect it to evaluate to false
[22:03] <rf> and not show what is within that
[22:03] <discord-raku-bot> <Nemokosch> so far, it worked like, if foo gets interpreted as a bare string xD
[22:04] <discord-raku-bot> <Nemokosch> but like not a single clue why anybody would have wanted that behavior
[22:06] <rf> Yeah that is not very nice.
[22:07] <discord-raku-bot> <Nemokosch> I think it should rather be the opposite - only fall back to a bare string interpretation under special circumstances - if at all
[22:08] <tonyo> ohh, rf  - protone was changed so that whatever you wrote in `{{...}}` made it's way into the resulting sub as just raw raku code
[22:11] <rf> Hmm how does protone handle if statements? Would it just be {{ if foo { }} {{ } }} ? for ending
[22:11] <tonyo> so you could end up doing stuff like `my $ctx = Protone::Context; $ctx.compile('tmpl', :code('{{ for %ctx<a> -> $b { do-something($b); } }}'); sub handle() { sub do-something($a) { say $a; }; $ctx.run('tmpl', :a((1,2,3,4))); # --> 1234`
[22:11] <discord-raku-bot> <Nemokosch> my WSL keeps dying for whatever godforsaken reason now
[22:11] <tonyo> i have a newer version i'll upload in a bit
[22:12] <rf> @Nemokosch, I would only fallback if its surrounded by single quotes or something
[22:14] <discord-raku-bot> <Nemokosch> yeah well I wouldn't even call that situation a fallback but it's closer to the right thing than the current state
[22:24] *** sena_kun left
[22:32] *** jpn left
[22:38] <discord-raku-bot> <Nemokosch> I'm finally in..
[22:44] *** gcd left
[22:45] <discord-raku-bot> <Nemokosch> rf: hotfix coming soon for the if anomaly; will need a more elaborate solution in the long run
[22:46] <rf> Sounds good, thanks!
[22:47] *** gcd joined
[23:01] *** lizmat_ joined
[23:02] *** Geth left
[23:04] *** lizmat left
[23:07] *** Sauvin left
[23:07] *** lichtkind left
[23:09] *** Sauvin joined
[23:26] *** lizmat_ left
[23:26] *** lizmat joined
[23:36] <xinming>  m: sub a {"a".say;}; my &oa := &a; a.wrap({"b".say;}); oa();
[23:36] <camelia> rakudo-moar 66f7afed1: OUTPUT: «a␤No such method 'wrap' for invocant of type 'Bool'.  Did you mean any of␤these: 'Map', 'Rat', 'WHAT', 'grep', 'map'?␤  in block <unit> at <tmp> line 1␤␤»
[23:36] <xinming>  m: sub a {"a".say;}; my &oa := &a; &a.wrap({"b".say;}); oa(); a();
[23:36] <camelia> rakudo-moar 66f7afed1: OUTPUT: «b␤b␤»
[23:37] <xinming> tonyo: It doesn't seem to be able to do what I meant.
[23:37] <xinming> &oa ref to the wrapped &a.
[23:38] <xinming> What I mean is outside the sub, we keep the &a ref somewhere before wrap, after wrap, a calls the wrapped version, But we may still need a way to call the unwrapped version somewhere.
[23:50] *** abraxxa-home left
[23:51] <cfa> xinming: https://irclogs.raku.org/raku/2023-03-02.html#02:26
[23:51] <cfa> m: sub a { "a".say; }; my &a-old = &a.clone; &a.wrap({ "b".say }); a-old;
[23:51] <camelia> rakudo-moar 66f7afed1: OUTPUT: «a␤»
[23:51] <cfa> m: sub a { "a".say; }; my &a-old = &a.clone; &a.wrap({ "b".say }); a-old; a;
[23:51] <camelia> rakudo-moar 66f7afed1: OUTPUT: «a␤b␤»
[23:51] <xinming> cfa: I mean without use the .clone method. ;-)
