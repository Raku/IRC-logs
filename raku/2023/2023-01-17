[00:00] *** reportable6 left
[00:00] *** loken left
[00:02] *** reportable6 joined
[00:32] <discord-raku-bot> <Nemokosch> what's the rationale behind only looking up the modules provided by the META6.json file when one appears in a folder? This seems like an unfeature that ruins any testing if the distro (and consequently the test) has dependencies

[00:34] <discord-raku-bot> <Nemokosch> the advice Rakudo gives (add the module to the provides section) is really harmful, even

[00:46] <discord-raku-bot> <ispyhumanfly> NPM packages are similar, right? Perhaps the rationale is related to the fact that META6.json is for the "packaging" of your files, and, their needs to be a proper manifest of its deps.

[00:46] <discord-raku-bot> <jaguart> I agree - the META6 supplanting -Ilib is really unexpected

[00:46] <discord-raku-bot> <ispyhumanfly> I dunno üôÇ

[00:47] <discord-raku-bot> <Nemokosch> Let me get this straight... this is a problem whenever you want to include your own, declared dependencies in your tests.

[00:48] <discord-raku-bot> <Nemokosch> The irony is that dependencies are not even distributions (which I would say would generally make more sense) but modules, plain and simple.

[00:48] <discord-raku-bot> <Nemokosch> Which means that they could really be allowed straight from the same META6 file.

[00:51] <discord-raku-bot> <ispyhumanfly> I see what you're saying... you're talking about the modules that are part of your own distribution, not just the deps.

[00:51] <discord-raku-bot> <ispyhumanfly> It would be pretty cool if it just autodetected those like a good boy. üôÇ

[00:52] <discord-raku-bot> <Nemokosch> Maybe jaguart is saying that - I'm really just saying that you might REALLY want to use modules you depend on anyway, in your tests

[00:53] <discord-raku-bot> <Nemokosch> Sure, probably one could just build some wrapper that encapsulates the depended-upon functionality only for tests - but honestly, to do this for the sake of a bad decision sounds a little awkward

[01:02] *** linkable6 left
[01:02] *** evalable6 left
[01:03] *** evalable6 joined
[01:03] *** xinming left
[01:04] *** xinming_ left
[01:04] *** linkable6 joined
[01:05] *** xinming joined
[01:06] *** xinming_ joined
[01:14] *** lichtkind__ joined
[01:15] <[Coke]> Can you restate what your issue is? It sounds like you have dependencies for testing, but I'm unclear what's wrong with the mechanism to declare them in the META6.json file

[01:21] <discord-raku-bot> <Nemokosch> How do you declare them in the META6.json file in a way that Rakudo acknowledges for module lookup?

[01:21] *** razetime joined
[01:23] *** lichtkind__ left
[01:30] *** Manifest0 left
[01:54] *** Bocaneri joined
[01:55] *** Bocaneri is now known as Guest9402

[01:56] *** Sauvin left
[02:05] *** Guest9402 is now known as Sauvin

[02:07] *** jpn joined
[02:12] *** jpn left
[02:24] <discord-raku-bot> <Nemokosch> well... this is the issue. That I don't even know a way to do that. If you want to do testing on a distribution, you are suddenly limited to the modules of the "provides" section in META6.json.

[02:42] *** rf left
[02:46] <ugexe> Don‚Äôt declare modules used only in your tests in meta6

[02:47] <ugexe> Put that stuff in t/lib, problem solved 

[02:47] <ugexe> use lib t/lib in the tests 

[02:48] <discord-raku-bot> <Nemokosch> could be that I fail to communicate properly but one thing is sure: something is seriously off with the whole communication

[02:48] <discord-raku-bot> <Nemokosch> let's take the concrete example then. Digest and Digest::HMAC again

[02:49] <discord-raku-bot> <Nemokosch> Digest::HMAC depends on Digest and it uses Digest in tests as well - except that it cannot

[02:50] <discord-raku-bot> <Nemokosch> it doesn't seem appropriate to just take the source of Digest and put it somewhere (anywhere) inside Digest::HMAC

[02:52] <ugexe> If it depends on it I don‚Äôt see why that wouldn‚Äôt work. I‚Äôd it doesn‚Äôt then something else is wrong with it

[02:52] <ugexe> im on my phone and can‚Äôt really dig in

[02:54] <ugexe> Meta6 supplanting lib is a security feature

[02:55] <ugexe> its bizarre to me one could think ltherwise

[02:55] <ugexe> there are commits somewhere (or prs) that explain all this somewhere 

[02:57] <discord-raku-bot> <Nemokosch> the error message about META6 surely doesn't happen figuring out what goes wrong

[02:58] <discord-raku-bot> <Nemokosch> something else... is there a sufficiently large number of people caught by zef install --depends not actually installing the dependencies if the module itself is installed, for this to be changed?

[03:00] <discord-raku-bot> <Nemokosch> if the module installation was rock solid, perhaps I wouldn't bring this up - actually, perhaps nobody would bring this up

[03:00] <discord-raku-bot> <Nemokosch> but it's not. it's quite common, without any deliberate pushing of the system, that you end up in a situation where for some reason a module is installed while some dependencies are not

[03:09] <discord-raku-bot> <Nemokosch> by the way: caught the problem here: Digest (the distribution) itself doesn't provide Digest (the module/namespace) anymore

[03:42] *** evalable6 left
[03:42] *** linkable6 left
[03:43] *** linkable6 joined
[03:45] *** evalable6 joined
[03:55] *** razetime1 joined
[03:57] *** razetime left
[03:57] *** razetime1 is now known as razetime

[04:01] <jaguart> weird inconsistency with CompUnits - if I have a CompUnit with a versioned module and two classes, I get three entries in GLOBALish - so far so good

[04:02] <jaguart> the ordering is random - if the Module is listed first, it will have its version information available. If one of the classes is listed in GLOBALish first, the Module is missing it's version and auth

[04:29] *** ispyhumanfly left
[04:31] <jaguart> actually it's a bit more subtle then that - Module loses its ver/auth if preceeded by a Package inferred from a class (e.g. package Bar from class Bar::Bob)

[04:54] *** discord-raku-bot left
[04:54] *** discord-raku-bot joined
[05:05] *** PolarBearXL joined
[05:07] *** Xliff left
[05:25] *** ispyhumanfly joined
[05:30] *** Sgeo_ joined
[05:30] *** Sgeo left
[05:43] *** ispyhumanfly left
[05:54] *** discord-raku-bot left
[05:55] *** discord-raku-bot joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:11] *** ispyhumanfly joined
[06:25] *** jpn joined
[06:45] *** dustinm` left
[06:50] *** dustinm` joined
[06:54] *** discord-raku-bot left
[06:55] *** discord-raku-bot joined
[07:55] *** discord-raku-bot left
[07:55] *** discord-raku-bot joined
[08:12] *** jpn left
[08:29] *** jjido joined
[08:34] *** Sgeo_ left
[08:36] *** jpn joined
[08:42] *** jpn left
[08:51] *** jjido left
[08:55] *** discord-raku-bot left
[08:55] *** discord-raku-bot joined
[09:01] *** abraxxa joined
[09:02] *** abraxxa left
[09:03] *** abraxxa joined
[09:05] *** sena_kun joined
[09:10] *** dakkar joined
[09:55] *** discord-raku-bot left
[09:55] *** discord-raku-bot joined
[10:13] *** jjido joined
[10:29] *** jpn joined
[10:39] *** jjido left
[10:46] *** jpn left
[10:50] *** jpn joined
[10:55] *** discord-raku-bot left
[10:55] *** jpn left
[10:55] *** discord-raku-bot joined
[11:04] *** jpn joined
[11:11] *** razetime left
[11:16] *** Manifest0 joined
[11:17] *** razetime joined
[11:20] *** razetime left
[11:30] *** razetime joined
[11:31] *** razetime left
[11:46] *** PolarBearXL left
[11:47] *** jjido joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:55] *** discord-raku-bot left
[12:56] *** discord-raku-bot joined
[13:09] *** ispyhumanfly left
[13:11] *** Xliff joined
[13:14] *** jjido left
[13:52] *** rf joined
[13:53] *** razetime joined
[13:55] *** discord-raku-bot left
[13:56] *** discord-raku-bot joined
[14:02] <ugexe> Well, the error about META6.json possibly missing wasn't something I was really on board with

[14:02] <ugexe> and yeah its wrong much of the time

[14:04] <ugexe> https://github.com/rakudo/rakudo/pull/3792#issuecomment-657565566

[14:04] <ugexe> here is a comment where i explain what is wrong with that

[14:06] <lizmat> m: say "Foo" ~~ / o :my $foo; o /   # so what *is* allowed between : and ; in a regex?

[14:06] <camelia> rakudo-moar c8a480fd8: OUTPUT: ¬´ÔΩ¢ooÔΩ£‚ê§¬ª

[14:06] <lizmat> m: use Test; say "Foo" ~~ / o :pass("foo"); o /   # so what *is* allowed between : and ; in a regex?

[14:06] <camelia> rakudo-moar c8a480fd8: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unrecognized regex modifier :pass‚ê§at <tmp>:1‚ê§------> use Test; say "Foo" ~~ / o :‚èèpass("foo"); o /   # so what *is* allowe‚ê§¬ª

[14:07] <lizmat> so it's apparently only my ?

[14:08] <lizmat> oddly enough, if you put anything else in there with RakuAST, it will work fine

[14:08] <lizmat> the deparse just won't parse again  :-(

[14:25] <discord-raku-bot> <Nemokosch> To be fair, the situation is still very peculiar

[14:25] <discord-raku-bot> <Nemokosch> there is still this schizophrenia about modules and distributions

[14:26] <discord-raku-bot> <Nemokosch> so if you depend on "Digest", you might get a version of the distribution that doesn't even contain this module

[14:26] <discord-raku-bot> <Nemokosch> which is the worst of both worlds

[14:27] <discord-raku-bot> <Nemokosch> tbh regardless what we think about dependencies, modules and distributions, I assume we can all agree about one thing:

[14:27] <discord-raku-bot> <Nemokosch> it was never a good idea to mix the names of modules and distributions

[14:28] <leont> Mix?

[14:28] <discord-raku-bot> <Nemokosch> Mix

[14:32] <ugexe> you wouldn't depend on "Digest" and not "Digest:ver<...>:api<...>:auth<...>" in a production environment where you pin dependencies

[14:32] <ugexe> s/and not/and instead/

[14:33] <ugexe> there seems to be this disconnect where people don't want to pin their dependencies but they want all the benefits

[14:33] <discord-raku-bot> <Nemokosch> that's neither an excuse, nor even a proper solution for all the intermixing of distributions and modules

[14:35] <discord-raku-bot> <Nemokosch> tbh it's borderline annoying that this chaos can always be just strawmanned into pinning versions and auth - simply because hard dependencies work, no matter what resolution system there could be

[14:36] <ugexe> i mean whats really annoying is when someone comes up with concrete assertions about various design decisions and tradeoffs after days of thought on it, as if there is no merit to the original designs. and i don't just mean about distributions

[14:37] <discord-raku-bot> <Nemokosch> like yeah, and if you bundle your code with the dependencies zipped, it will always just work /s

[14:37] <ugexe> its hard to want to go into details about some of the things you ask because you come off as insisting you are correct and invalidate the thought that likely went into the original design

[14:38] <lizmat> ugexe: agree

[14:38] <discord-raku-bot> <Nemokosch> I mean it's hard to ignore the factual problems with mixing distributions and modules

[14:38] <ugexe> i think if you were to try to come up with why it actually is the way it is, and what things are good about that, you might answer some of your own questions and be able to make a better argument for doing things the way you think

[14:38] <discord-raku-bot> <Nemokosch> and it also doesn't help that these are habitually just ignored

[14:40] <discord-raku-bot> <Nemokosch> I mean, just try to relate for a second. I'm bringing up factual problems and you are basically saying "well, just think hard enough and you will realize why it has to be like this". These are just not on par.

[14:40] <ugexe> lets be real: you have a pattern of doing this

[14:41] <lizmat> ugexe agree

[14:41] <discord-raku-bot> <Nemokosch> That doesn't make it a bad thing

[14:41] <ugexe> so yes i expect *you* to think hard enough about it

[14:41] <discord-raku-bot> <Nemokosch> Also, there is a pattern of dodging issues.

[14:41] <lizmat> and there's a pattern of sealioning developing

[14:41] <ugexe> i have a github sponsors, and if you pay me i'll handle any issue you want

[14:42] <discord-raku-bot> <Nemokosch> Or blaming them on whoever. Not even necessarily me; just whoever in general. The author, the user, whoever.

[14:42] <discord-raku-bot> <Nemokosch> lizmat: this is not sealioning whatsoever

[14:42] <lizmat> you buy a car: you put in diesel instead of gasoline.  The car doesn't work very long

[14:42] <lizmat> is it a design issue of the car ?

[14:43] <discord-raku-bot> <Nemokosch> this is a bad analogy

[14:43] <discord-raku-bot> <Nemokosch> there is a car that takes diesel AND gasoline on an arbitrary basis

[14:43] <lizmat> not the car you bought

[14:44] <discord-raku-bot> <Nemokosch> well then we aren't talking about "the car I bought" because this car does work on an arbitrary basis, as illustrated again...

[14:45] <discord-raku-bot> <Nemokosch> "Digest" resolves to a distribution that doesn't contain the "Digest" module

[14:45] <discord-raku-bot> <Nemokosch> this, after being told that dependencies are modules

[14:45] <discord-raku-bot> <Nemokosch> this goes way beyond whether I like that dependencies are modules or not

[14:46] <discord-raku-bot> <Nemokosch> (btw I think diesel and gasoline are the same thing so it's hard to roll with the analogy)

[14:46] <ugexe> if you have a solution to fix that without breaking anything i'm all ears

[14:47] <discord-raku-bot> <Nemokosch> So we can acknowledge that this is a problem that demands a solution?

[14:47] <ugexe> uh that isn't what i said

[14:48] <ugexe> i'm telling you i'd entertain your solution if it doesn't break anything

[14:48] <discord-raku-bot> <Nemokosch> but that does imply that there is an issue to solve, so I ask you to be explicit about it

[14:48] <ugexe> no it implies you have an issue

[14:48] <discord-raku-bot> <Nemokosch> it's hard to solve issues if they aren't even acknowledged to be issues

[14:49] <ugexe> i'm not saying it is or isn't an issue, i'm saying that doesn't really matter for what my comment meant

[14:49] <discord-raku-bot> <Nemokosch> so you think it's perfectly fine the way it is?

[14:49] <ugexe> as i literally just typed into irc moments ago: i am open to alternative solutions that don't break anything

[14:50] <ugexe> thats how tradeoffs work

[14:50] <ugexe> but you seem to think there is an absolute perfect answer to everything

[14:50] <discord-raku-bot> <Nemokosch> there is a very specific behavior. Can you just say if that behavior is okay or not?

[14:50] <ugexe> so, you show me a better solution that doesn't break anything. that will give me something to reevaluate those tradeoffs for myself

[14:51] <ugexe> i asked first

[14:52] <discord-raku-bot> <Nemokosch> that's an excellent way to dig an issue 2 miles under the ground

[14:52] <ugexe> yes you are great at that it seems

[14:52] <discord-raku-bot> <Nemokosch> is this a "no u" attempt, lol

[14:53] <discord-raku-bot> <Nemokosch> be sure that once I reach there, I will raise a suggestion about the solution, like I pretty much always do when I have access to it

[14:54] <discord-raku-bot> <Nemokosch> the problem really isn't the attitude you are showing towards me; I have accepted this role by now. The real problem is that most of you guys have no real connection to users and people who try to get something done with this language.

[14:55] <discord-raku-bot> <Nemokosch> These, let's say, ecosystem issues, aren't even problems I am facing, I just try to get some progress done on behalf of people who don't have infinite resources to invest into this one language.

[14:55] <ugexe> you only show how little you know. i've spend multiple thousands of dollars on this language, countless hours writing zef for the sole purpose of having something i could confidently use in a production environment so I could try to get raku used in large companies

[14:56] <ugexe> and that is just me

[14:56] *** linkable6 left
[14:56] *** evalable6 left
[14:56] <ugexe> the problem seems to be that you think "user error" can't exist

[14:56] *** linkable6 joined
[14:57] <discord-raku-bot> <Nemokosch> I mean, good on you but that definitely shouldn't be used to downright neglect all the actual problems that a user faces.

[14:57] *** evalable6 joined
[14:57] <discord-raku-bot> <Nemokosch> After all, this is not meant to be a theme park of a couple of people.

[14:57] <ugexe> you think all problems are ignored. that shows a level naivety

[14:59] <discord-raku-bot> <Nemokosch> I don't think that - but I do think that those people who have the most immediate possibility to change things, or give pointers at the very least, have way too little interest in the actual users.

[14:59] <ugexe> the people with the most immediate possibility to change things are people with a lot of free money. who are these people, and can you put them into contact with me?

[15:02] <discord-raku-bot> <Nemokosch> also, in my opinion, to acknowledge an issue as something "we will have to live with for an indefinite amount of time", is still a much better perspective than either not caring, or some sort of counter-sealioning so that the pinpointable topic gets lost

[15:03] <ugexe> you want us to care about a solution that doesn't yet exist

[15:03] <ugexe> and i don't mean the code doesn't exist, i mean a solution at all

[15:03] <ugexe> one that doesn't break stuff

[15:03] <discord-raku-bot> <Nemokosch> I want you to care about a *problem*

[15:04] <discord-raku-bot> <Nemokosch> "care about", as in acknowledge it at least

[15:04] *** Sgeo joined
[15:04] <lizmat> well, yes, It is unfortunate that the Digest distribution does not include a Digest module

[15:05] <discord-raku-bot> <stevied> what is the supposed problem, exactly? "mixing" of modules and distributions? What exactly does that mean?

[15:05] <ugexe> i do, but communicating/arguing with you takes soo many brain cycles by itself that makes me think you haven't put enough thought into it to be worth it

[15:05] <ugexe> im telling you what you can do to get me to "care" in the way you want

[15:05] <lizmat> but that does not have to be a problem if people would indicate :auth in their use statements  or install instructions

[15:06] <lizmat> so: now the problem is acknowledged

[15:06] <lizmat> maybe a note should be added to the documentation about this: PRs are welcome

[15:07] <discord-raku-bot> <Nemokosch> auth and ver didn't help here - they _could have_ if one pointed the exact version

[15:07] <lizmat> well, I'm a firm believer in pinning your dependencies

[15:07] <lizmat> it's one of the USPs of Raku over other programming languages

[15:08] <lizmat> if you do not do that, then you're just perpetuating bad habits from the past

[15:08] <discord-raku-bot> <Nemokosch> lizmat: I know that and... I hate to say that but that's also a reason your modules tend to break when another module of yours gets updated

[15:08] <lizmat> well, if they do, I'd like to know about it

[15:08] <lizmat> because that shouldn't happen *because* they are pinned

[15:09] <lizmat> if nobody tells me about that, then I can't fix it

[15:09] <discord-raku-bot> <Nemokosch> here's one: https://github.com/lizmat/Rakudo-CORE-META/issues/2

[15:11] <discord-raku-bot> <Nemokosch> yes, you are right; perhaps it's not the version pinning per se but there is this tendency with this approach that all modules need to be updated once one is updated, and when that happens, all kinds of funky errors start happening at installation

[15:11] <lizmat> % zef install Rakudo::CORE::META  

[15:11] <lizmat> ===> Searching for: Rakudo::CORE::META

[15:11] <lizmat> ===> Testing: Rakudo::CORE::META:ver<0.0.9>:auth<zef:lizmat>

[15:11] <lizmat> ===> Testing [OK] for Rakudo::CORE::META:ver<0.0.9>:auth<zef:lizmat>

[15:11] <lizmat> ===> Installing: Rakudo::CORE::META:ver<0.0.9>:auth<zef:lizmat>

[15:14] <discord-raku-bot> <Nemokosch> well, that's also a way to solve issues, I suppose üôÇ

[15:14] <lizmat> sorry, I have limited time in which I want to do a lot of things

[15:15] <lizmat> if an issue is basically "it doesn't work"

[15:15] <lizmat> and then when I try, it does, then I cannot draw another conclusion that either the problem has been solved

[15:15] <lizmat> or the problem was caused by something I don't have control over

[15:16] <lizmat> I'm *NOT* going to be spending time trying to figure out whatever the people meant when they made an issue

[15:16] <lizmat> I'd rather spend that time on other, well described issues

[15:17] <lizmat> or work on new developments like RakuAST

[15:17] <lizmat> or work on rak or the irc logs

[15:17] <lizmat> or write blog posts on top of the weekly I already do every week

[15:18] <discord-raku-bot> <Nemokosch> I also have a PR for rak for that matter. Although the thing with rak for me is that I usually use it *while working* and therefore I often just don't follow up an issue if I can find a way around.

[15:20] <discord-raku-bot> <Nemokosch> for Ecosystem: I wanted to get something done regarding the "citation index" and similarly to your way of thinking, when I saw it didn't work, I shifted towards something else

[15:24] <discord-raku-bot> <Nemokosch> now that it turned out that it can be installed, after all, fyi: https://github.com/lizmat/Ecosystem/issues/3

[15:26] *** Nemokosch joined
[15:29] *** Sgeo left
[15:43] *** Sgeo joined
[15:52] *** Xliff left
[15:56] <[Coke]> HEAD from a few days ago on my windows box just segfaulted.

[15:57] <[Coke]> (downgrading to 2022.12)

[16:02] *** Averna left
[16:34] *** abraxxa left
[16:38] <ugexe> 2022.12 is regressed on windows as well from what i understand

[16:38] * lizmat clickbaits https://rakudoweekly.blog/2023/01/16/2023-03-advent-radux/

[16:38] <ugexe> skaji shows it in https://github.com/ugexe/zef/issues/491

[16:39] <ugexe> i looked at the changes in between rakudo releases but nothing stuck out unfortunately

[16:41] <ugexe> a nice thing about having an intel macbook was i could run x86 windows VMs

[16:58] *** melezhik joined
[16:58] <discord-raku-bot> <p6steve> you "can" run Docker Desktop (with Rosetta) for that .... just dog slow

[16:59] *** jpn left
[17:00] <tonyo> .tell ispyhumanfly can you add a key value to `$HOME/.fez-config.json`: `"bundlers": ["Fez::Util::Tar"]` and give it another shot?

[17:01] <tellable6> tonyo, I'll pass your message to ispyhumanfly

[17:03] <discord-raku-bot> <p6steve> or my solution (what I wrote) is to go zef install CLI::AWS::EC2-Simple and then raws-ec2 --nsu launch and raws-ec2 connect

[17:05] <discord-raku-bot> <p6steve> (you will need to configure your favourite Windows AMI in the yaml)

[17:12] *** SqrtNegInf joined
[17:17] <SmokeMachine> bisect: say "bla".encode.subbuf: ^10

[17:17] <bisectable6> SmokeMachine, Will bisect the whole range automagically because no endpoints were provided, hang tight

[17:18] <SqrtNegInf> Just opened an issue regarding a segfault involving grep, GH5160.  Observed on macos/linux, probably occurs on Windows too.  Possibly related?

[17:18] <bisectable6> SmokeMachine, Output on all releases: https://gist.github.com/4c673d7093a027c2af7956432c46ca7f

[17:18] <bisectable6> SmokeMachine, Bisecting by output (old=2018.09 new=2018.10) because on both starting points the exit code is 0

[17:19] <bisectable6> SmokeMachine, bisect log: https://gist.github.com/924560cc25b8aaabb10b17daa18e4bb2

[17:19] <bisectable6> SmokeMachine, (2018-09-29) https://github.com/rakudo/rakudo/commit/cc2fcc9af271f8c8768501a3d0ec48612996e5ec

[17:19] <bisectable6> SmokeMachine, Bisecting by output (old=2018.06 new=2018.08) because on both starting points the exit code is 0

[17:19] <SmokeMachine> I'm testing an old code (from 2017), and it seems this behaviour ‚òùÔ∏è has changed... is that expected?

[17:19] <bisectable6> SmokeMachine, bisect log: https://gist.github.com/4f758539ad0cc0431ce19215c595a421

[17:19] <bisectable6> SmokeMachine, (2018-08-04) https://github.com/rakudo/rakudo/commit/4e56ce954ee1c2a424fd3ee164a7ce931337274a

[17:19] <bisectable6> SmokeMachine, ‚ö† New output detected, please review the results manually

[17:19] <bisectable6> SmokeMachine, Output on all releases and bisected commits: https://gist.github.com/c713f1d9ac8cf038e9fb0c9063103b6a

[17:20] <SmokeMachine> it used to add zeros to complete the number of elements I've asked for...

[17:22] <SmokeMachine> I think the original behaviour was more useful...

[17:23] <SqrtNegInf> Actual link to the issue: https://github.com/rakudo/rakudo/issues/5160

[17:24] <melezhik> El_Che - I ended up moving ci.sparrowhub.io to a new hosting (hetzner) - it is much cheaper and now sparrow ci now has even more powerful VM, let's see how build times increase  ))) , but I keep your idea with oracle in mind, eventually I will probably move some of the infra component to free oracle hosting, I am just not ready to tackle with

[17:24] <melezhik> oracle hardware at the moment ... now I will pay 24.70 euro a month for 4 VCPU / 16 GB RAM vs $53 I paid for 4 CPU / 8 GB in digital ocean, not bad ...

[17:24] <tellable6> 2023-01-16T20:55:22Z #raku <rf> melezhik You can look at vultr too

[17:26] <melezhik> rf - thanks - already decided to move to hetzer - thanks

[17:28] <Geth> ¬¶ rakubrew.org: masukomi++ created pull request #18: added fish shell path instructions

[17:28] <Geth> ¬¶ rakubrew.org: review: https://github.com/Raku/rakubrew.org/pull/18

[17:35] *** razetime left
[17:49] *** dakkar left
[17:52] <ugexe> SmokeMachine: that sounds useful for like .raku, but for .gist?

[17:53] <SmokeMachine> ugexe: sorry, what do you mean?

[17:54] <ugexe> adding 0s that aren't otherwise needed doesn't sound useful for .gist (the method you linked) which is just a human readable representation

[17:54] <SmokeMachine> ugexe: the Buf generated does not have thew zeros...

[17:54] <ugexe> https://github.com/rakudo/rakudo/commit/cc2fcc9af271f8c8768501a3d0ec48612996e5ec

[17:55] <ugexe> i'm not even sure how the linked commit has anything to do with 0s

[17:55] <SmokeMachine> ugexe: that was not only not printing the zeros... the Blob itself does not have that

[17:55] <SmokeMachine> me neither...

[17:56] <ugexe> ah the second commit looks like it could be related though

[17:56] <SmokeMachine> m: say "bla".encode.subbuf(^10).elems # IMHO it should print 10...

[17:56] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´3‚ê§¬ª

[17:56] <ugexe> https://github.com/rakudo/rakudo/commit/4e56ce954ee1c2a424fd3ee164a7ce931337274a

[17:57] <SmokeMachine> ugexe: now that's more like it! :)

[17:57] <SmokeMachine> but should it add the zeros or not?

[17:59] <SmokeMachine> m: my $a = "bla".encode.subbuf(^10); say Blob.new: |$a, 0 xx (10 - $a.elems) # I'm having to do something like this to fix my code

[17:59] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´Blob:0x<62 6C 61 00 00 00 00 00 00 00>‚ê§¬ª

[18:00] *** reportable6 left
[18:00] <SmokeMachine> and I'm ok with that... I just think that shouldn't be that "hard"...

[18:02] *** reportable6 joined
[18:05] <ugexe> kind of like .subbuf needs a way to also use https://docs.raku.org/type/Blob#method_allocate

[18:07] <SmokeMachine> I have tried "bla".encode.allocate: 10; helping it would allocate and then copy... but it doesn't... :(

[18:07] <SmokeMachine> m: "bla".encode.allocate: 10

[18:07] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´Cannot resolve caller allocate(utf8:D: Int:D); none of these signatures matches:‚ê§    (Blob:U: Int:D $elements, *%_)‚ê§    (Blob:U: Int:D $elements, Int:D \value, *%_)‚ê§    (Blob:U: Int:D $elements, Mu:D $got, *%_)‚ê§    (Blob:U: Int:D $elements, in‚Ä¶¬ª

[18:10] *** Sauvin left
[18:10] *** Sauvin joined
[18:11] <ugexe> m: say "bla".encode.subbuf(^10).Buf.reallocate(10)

[18:11] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´Buf:0x<62 6C 61 00 00 00 00 00 00 00>‚ê§¬ª

[18:12] <SmokeMachine> ugexe: that's good!

[18:13] <SmokeMachine> m: say "bla".encode.Buf.reallocate(10)

[18:13] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´Buf:0x<62 6C 61 00 00 00 00 00 00 00>‚ê§¬ª

[18:13] <SmokeMachine> any reason for Blob not have a .realocate too?

[18:13] <ugexe> Blob is not mutable

[18:14] <SmokeMachine> .reallocate

[18:14] <ugexe> changing the size is a mutating operation

[18:14] <SmokeMachine> but, couldn't it create a new Blob with that data and that size?

[18:15] <ugexe> yes it could try to do the right thing by emulating mutating operations on a non-mutating data structure, but that also makes thing not easy to reason about

[18:16] <ugexe> why not have Blob.push/pop etc do that?

[18:16] <SmokeMachine> that may be only for me (and my bad english), but when I read reallocate, I intend to guess that's creating a new structure...

[18:17] *** melezhik_ joined
[18:17] <ugexe> so what then would be the difference between "allocate" and "reallocate"

[18:19] <ugexe> allocate:"Returns a newly created Blob object", reallocate: "Change the number of elements of the Buf, returning the changed Buf."

[18:19] <SmokeMachine> allocate allocate the memory and works only for :D, reallocate works only for :D and allocates the memory copping the data

[18:19] <SmokeMachine> copying

[18:20] <SmokeMachine> I don't know, but in my mind that sound to me like C's malloc and realloc...

[18:21] <ugexe> "realloc() is a function of C library for adding more memory size to already allocated memory blocks"

[18:21] *** melezhik_ left
[18:23] <SmokeMachine> but if it has no enough continuous memory and you are trying to make it bigger it will allocate the memory on a different place (at least that's how I remember it... but I could be wrong...)

[18:23] <SmokeMachine> and copy the content

[18:24] *** notna joined
[18:26] <ugexe> my C is rusty but i would think it would only be copying if it needed a bigger e.g. continuious memory block or something, and if it didnt it would just expand the memory to the new size

[18:28] <SmokeMachine> yes, that's my understanding also...

[18:48] *** melezhik left
[18:51] <[Coke]> rolling back my windows box to 2022.07 ... will try to track down the windows issue this week

[19:02] <rf> SmokeMachine: I think it reallocates a new buffer of a different size, bufs are a fixed size in Raku

[19:41] *** Sauvin left
[19:42] *** notna left
[19:43] *** Sauvin joined
[19:43] *** jjido joined
[19:43] <[Coke]> would it make sense to consider making --/rea the default for zef?

[19:49] <ugexe> once enough of all modules are in fez, yeah

[19:51] <ugexe> but for now rea is the source of the p6c and cpan distributions

[19:54] *** discord-raku-bot left
[19:54] *** discord-raku-bot joined
[19:54] <[Coke]> Ugh, ok, not the default: but I have to use --/rea to install File::Directory::Tree on windows, but then have to allow rea to install the rest of these deps.

[19:57] <ugexe> why? path length issues?

[19:58] *** abhinav joined
[19:58] *** abhinav left
[19:58] <ugexe> even then... i dont understand why --/rea would help

[19:59] <ugexe> that module is *only* on rea

[20:00] <ugexe> --/rea --p6c would find it, but thats an extra flag

[20:04] *** vrurg joined
[20:04] *** vrurg_ left
[20:09] *** Sauvin left
[20:10] *** Sauvin joined
[20:11] <[Coke]> I don't know why, but it works.

[20:12] <[Coke]> ... OK, it's not necessarily a recent change causing my issues today; reinstalled 2022.07 - getting a segfault in a raku script

[20:30] *** jgaz joined
[20:33] *** Sauvin left
[20:39] *** Sauvin joined
[20:40] *** Sauvin left
[20:40] *** Sauvin joined
[20:40] *** jpn joined
[20:48] *** jpn left
[20:48] *** jpn joined
[20:59] * leont would switch everything over to fez the moment it connects with my keychain manager

[21:04] *** jpn left
[21:13] <ugexe> i too am lazy. i've been waiting till i make a tool to upload to fez from my github releases

[21:14] <ugexe> all my repos use circle-ci though, and with that security issue its probably time i do another round of updates on my repos. maybe i'll do it then

[21:26] *** dogbert17 joined
[21:48] <tonyo> i've been speccing out making fez crawl known repos for vX.Y.Z tags to _try_ to automate releases.. the problem is when that tag changes (eg, delete/retagged) and when the tag isn't indexable (eg bad meta)

[21:49] <tonyo> that might get delayed more, still trying to decide whether fez should move ahead with becoming a full on dist management tool or remain just an indexing tool

[21:50] <SmokeMachine> unlink "bla"; my $f = "bla".IO.open: :a, :bin; for ^33 { my $a = .Str.encode; $f.write: Blob.new: |$a, 0 xx (256 - $a.elems) }; my $r = "bla".IO.open: :r, :bin; $r.seek: 1 * 256, SeekFromBeginning; say $r.read(256)

[21:50] <SmokeMachine> m: unlink "bla"; my $f = "bla".IO.open: :a, :bin; for ^33 { my $a = .Str.encode; $f.write: Blob.new: |$a, 0 xx (256 - $a.elems) }; my $r = "bla".IO.open: :r, :bin; $r.seek: 1 * 256, SeekFromBeginning; say $r.read(256)

[21:50] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´Buf[uint8]:0x<>‚ê§¬ª

[21:50] <SmokeMachine> m: unlink "bla"; my $f = "bla".IO.open: :a, :bin; for ^34 { my $a = .Str.encode; $f.write: Blob.new: |$a, 0 xx (256 - $a.elems) }; my $r = "bla".IO.open: :r, :bin; $r.seek: 1 * 256, SeekFromBeginning; say $r.read(256)

[21:50] <camelia> rakudo-moar 127fb0897: OUTPUT: ¬´Buf[uint8]:0x<31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ‚Ä¶¬ª

[21:50] <tonyo> that might turn into fez peeling a bit of functionality back and the API being documented so that other tooling can integrated

[21:50] <SmokeMachine> that seems very wrong ^^

[21:51] <SmokeMachine> am I doing something wrong? if I write it 34 times it works, but if I do that 33 times or less it doesn't work...

[21:51] <SmokeMachine> it seems to me a very odd bug...

[21:58] <gfldex> [Coke]: I don't think the Long Now Foundation will aprove of `<year>=[ \d ** 4 ]`. :->

[22:04] <SmokeMachine> why when the file is small it reads nothing from it but it reads ok when the file is bigger?

[22:05] <gfldex> SmokeMachine: what is the size of the buffer in bytes?

[22:05] <gfldex> also, see: https://docs.raku.org/type/IO::Handle#method_flush

[22:06] <SmokeMachine> hum! flush! that would make sense!

[22:07] <SmokeMachine> yes, that was it... a missing flush... Thank you!

[22:09] * gfldex barely manages to supress an inappropriate joke about the mens rest room

[22:14] *** Nemokosch left
[22:28] *** jgaz left
[22:38] *** jjido left
[22:41] *** sena_kun left
[22:45] <tonyo> in a way, very appropriate

[22:55] *** loken joined
[22:56] *** epony left
[22:58] *** discord-raku-bot left
[22:58] *** discord-raku-bot joined
[23:02] *** loken left
[23:03] *** loken joined
[23:17] *** loken left
[23:36] *** heartburn joined
[23:41] <tonyo> CIAvash: i put a logger in the meta updater if you send another request and i'm afk please lmk and if it's not too big an ask to pm me what you're trying to update to (and which auth you're updating if not ciavash)

