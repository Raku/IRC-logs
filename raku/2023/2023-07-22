[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:08] *** vrurg left
[00:13] *** vrurg joined
[00:16] *** ProperN[out] joined
[00:17] *** ProperNoun left
[00:17] *** vrurg left
[00:19] *** vrurg joined
[00:29] *** vrurg_ joined
[00:32] *** vrurg left
[00:33] *** jpn left
[01:07] *** jpn joined
[01:12] *** jpn left
[01:39] *** jpn joined
[01:44] *** jpn left
[02:10] *** jpn joined
[02:10] *** rf joined
[02:15] *** jpn left
[02:22] *** guifa left
[02:42] *** jpn joined
[02:47] *** jpn left
[03:37] *** jpn joined
[03:41] *** jpn left
[03:54] *** rf left
[04:31] *** jpn joined
[04:35] *** razetime joined
[04:36] *** rf joined
[04:36] *** jpn left
[04:41] *** teatwo joined
[04:41] *** razetime left
[04:44] *** tea3po left
[04:53] *** jpn joined
[04:57] *** jpn left
[05:05] *** rf left
[05:08] *** razetime joined
[05:22] *** siavash joined
[05:43] *** squashable6 left
[05:44] *** squashable6 joined
[05:50] *** tejr left
[05:54] *** jpn joined
[05:56] *** tejr joined
[05:59] *** jpn left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:06] *** vrurg joined
[06:09] *** vrurg_ left
[07:09] *** coverable6 left
[07:09] *** committable6 left
[07:09] *** tellable6 left
[07:09] *** benchable6 left
[07:09] *** notable6 left
[07:09] *** bisectable6 left
[07:09] *** reportable6 left
[07:09] *** statisfiable6 left
[07:09] *** quotable6 left
[07:09] *** sourceable6 left
[07:09] *** shareable6 left
[07:09] *** unicodable6 left
[07:09] *** bloatable6 left
[07:09] *** greppable6 left
[07:09] *** releasable6 left
[07:09] *** nativecallable6 left
[07:09] *** squashable6 left
[07:09] *** linkable6 left
[07:09] *** evalable6 left
[07:09] *** unicodable6 joined
[07:09] *** coverable6 joined
[07:09] *** greppable6 joined
[07:09] *** benchable6 joined
[07:10] *** statisfiable6 joined
[07:10] *** linkable6 joined
[07:10] *** notable6 joined
[07:10] *** nativecallable6 joined
[07:10] *** committable6 joined
[07:10] *** bloatable6 joined
[07:10] *** quotable6 joined
[07:10] *** reportable6 joined
[07:10] *** sourceable6 joined
[07:10] *** releasable6 joined
[07:11] *** shareable6 joined
[07:11] *** squashable6 joined
[07:11] *** bisectable6 joined
[07:12] *** evalable6 joined
[07:12] *** tellable6 joined
[07:15] *** jpn joined
[07:20] *** jpn left
[07:30] *** siavash left
[07:35] *** siavash joined
[07:43] *** jpn joined
[07:50] *** sena_kun joined
[08:02] *** kotrcka joined
[09:02] *** greppable6 left
[09:02] *** statisfiable6 left
[09:02] *** evalable6 left
[09:02] *** sourceable6 left
[09:02] *** committable6 left
[09:02] *** coverable6 left
[09:02] *** benchable6 left
[09:02] *** shareable6 left
[09:02] *** nativecallable6 left
[09:02] *** linkable6 left
[09:02] *** bloatable6 left
[09:02] *** bisectable6 left
[09:02] *** notable6 left
[09:02] *** reportable6 left
[09:02] *** tellable6 left
[09:02] *** unicodable6 left
[09:02] *** quotable6 left
[09:02] *** releasable6 left
[09:02] *** squashable6 left
[09:03] *** releasable6 joined
[09:03] *** committable6 joined
[09:03] *** unicodable6 joined
[09:03] *** linkable6 joined
[09:03] *** squashable6 joined
[09:03] *** bisectable6 joined
[09:03] *** reportable6 joined
[09:04] *** sourceable6 joined
[09:04] *** quotable6 joined
[09:04] *** notable6 joined
[09:04] *** tellable6 joined
[09:04] *** bloatable6 joined
[09:04] *** evalable6 joined
[09:05] *** benchable6 joined
[09:05] *** statisfiable6 joined
[09:05] *** nativecallable6 joined
[09:05] *** greppable6 joined
[09:05] *** coverable6 joined
[09:05] *** shareable6 joined
[09:18] *** jpn left
[10:18] *** committable6 left
[10:18] *** quotable6 left
[10:18] *** evalable6 left
[10:18] *** unicodable6 left
[10:18] *** linkable6 left
[10:18] *** bisectable6 left
[10:18] *** coverable6 left
[10:18] *** nativecallable6 left
[10:18] *** tellable6 left
[10:18] *** statisfiable6 left
[10:18] *** notable6 left
[10:18] *** shareable6 left
[10:18] *** bloatable6 left
[10:18] *** sourceable6 left
[10:18] *** greppable6 left
[10:18] *** squashable6 left
[10:18] *** benchable6 left
[10:18] *** releasable6 left
[10:18] *** reportable6 left
[10:19] *** shareable6 joined
[10:19] *** tellable6 joined
[10:19] *** nativecallable6 joined
[10:20] *** bisectable6 joined
[10:20] *** committable6 joined
[10:20] *** benchable6 joined
[10:20] *** statisfiable6 joined
[10:20] *** coverable6 joined
[10:20] *** reportable6 joined
[10:21] *** notable6 joined
[10:21] *** linkable6 joined
[10:21] *** squashable6 joined
[10:21] *** releasable6 joined
[10:21] *** sourceable6 joined
[10:21] *** evalable6 joined
[10:21] *** quotable6 joined
[10:21] *** bloatable6 joined
[10:22] *** unicodable6 joined
[10:22] *** greppable6 joined
[10:56] *** Sgeo left
[11:05] *** jpn joined
[11:10] *** jpn left
[11:12] <tbrowder__> how can we get tadzik's File::Find module repo transferred to the community repo? he is willing, just need the instructions

[11:13] *** jpn joined
[11:22] *** siavash left
[11:22] <lizmat> tbrowder__ left some instructions in a privmsg to tadzik 

[11:26] *** aryan joined
[11:26] <aryan> i

[11:26] <aryan> hi

[11:27] <lizmat> aryan o/

[11:29] *** razetime left
[11:36] *** aryan left
[11:53] *** jpn left
[11:56] <tbrowder__> thnx

[11:58] *** jpn joined
[12:00] *** reportable6 left
[12:01] <tbrowder__> so, a testing question: a module has a bin file that takes another bin file as input and creates another bin file as output. using the Test module, how can i assure that works (not correctness of the output, just that it exists and is named as expected.  a flow something like this:  myprog myinfile => myoutfile.

[12:02] *** reportable6 joined
[12:03] <tbrowder__> i've tried using Proc::Easier and lives-ok but output seems to hide somewhere

[12:07] <moritz_> uhm, what is your question? how to check if a file exists?

[12:07] <tbrowder__> i've looked at jmerelo's test module but don't see it quite fits the bill. hm, a blinking light of an idea appeared...it should work. like test helpers in roast. bye

[12:09] <moritz_> not everything that's done in a test needs to be done by a test module, you can write normal code and just check its result, y'know :-)

[12:13] *** jpn left
[12:32] <tbrowder__> moritz, yes, essentially i just did that, i was  trying to test a bin file. i changed to testing the generating subs, that worked.

[12:33] <tbrowder__> but your way is better, thnx

[12:35] <tbrowder__> but, how would you do that testing with github workflows?

[12:36] <tbrowder__> for my brain muscle memory, using the subs might be easier

[12:37] *** jpn joined
[12:54] <ugexe> create a CI test that runs the various commands of your bin script: `bin/my-prog thing1`, `bin/my-prog thing2`. and if you put all the business logic inside of modules and just have the bin script invoke those, you can test your business logic by testing your module

[12:55] <ugexe> for example https://github.com/ugexe/zef/blob/710034fe3537826548d7f5c8983b3fb2db1e17de/.appveyor.yml#L29-L39

[13:07] <xinming_> releasable6: status

[13:07] <releasable6> xinming_, Next release will happen when it's ready. There are no known blockers. 0 out of 64 commits logged (⚠ 167 warnings)

[13:07] <releasable6> xinming_, Details: https://gist.github.com/939ece1e5407c1595000d768d26794c5

[13:12] *** jpn left
[13:14] *** jpn joined
[13:23] *** jpn left
[13:25] <tbrowder_> ugexe: thanks

[13:32] *** jpn joined
[13:38] *** askmeaboutloom joined
[13:42] *** sena_kun left
[13:44] *** sena_kun joined
[14:01] *** jpn left
[14:52] *** bdju left
[15:52] *** quotable6 left
[15:52] *** bisectable6 left
[15:52] *** squashable6 left
[15:52] *** coverable6 left
[15:52] *** shareable6 left
[15:52] *** releasable6 left
[15:52] *** nativecallable6 left
[15:52] *** benchable6 left
[15:52] *** tellable6 left
[15:52] *** committable6 left
[15:52] *** statisfiable6 left
[15:52] *** greppable6 left
[15:52] *** notable6 left
[15:52] *** reportable6 left
[15:52] *** unicodable6 left
[15:52] *** linkable6 left
[15:52] *** bloatable6 left
[15:52] *** evalable6 left
[15:52] *** sourceable6 left
[15:52] *** notable6 joined
[15:52] *** bloatable6 joined
[15:52] *** statisfiable6 joined
[15:52] *** unicodable6 joined
[15:52] *** nativecallable6 joined
[15:53] *** evalable6 joined
[15:53] *** tellable6 joined
[15:53] *** reportable6 joined
[15:53] *** sourceable6 joined
[15:53] *** greppable6 joined
[15:53] *** coverable6 joined
[15:53] *** quotable6 joined
[15:53] *** squashable6 joined
[15:54] *** linkable6 joined
[15:54] *** bisectable6 joined
[15:54] *** releasable6 joined
[15:54] *** shareable6 joined
[15:54] *** benchable6 joined
[15:55] *** committable6 joined
[16:42] *** teatwo left
[16:42] *** teatwo joined
[16:43] *** tea3po joined
[16:44] <gfldex> m: say Any."WHAT"();

[16:44] <camelia> rakudo-moar a9e83a93a: OUTPUT: «No such method 'WHAT' for invocant of type 'Any'.  Did you mean any of␤these: 'WHAT', 'WHO', 'WHY', 'flat'?␤  in block <unit> at <tmp> line 1␤␤»

[16:44] <gfldex> :->

[16:46] <lizmat> m: say Any.^find_method("WHAT") 

[16:46] <camelia> rakudo-moar a9e83a93a: OUTPUT: «(Mu)␤»

[16:47] *** teatwo left
[16:47] <lizmat> m: say Any.^find_method("Int") 

[16:47] <camelia> rakudo-moar a9e83a93a: OUTPUT: «Int␤»

[16:47] <lizmat> m: dd Any.^find_method("Int") 

[16:47] <camelia> rakudo-moar a9e83a93a: OUTPUT: «Method Int = proto method Int (Mu: |) {*}␤»

[16:47] <lizmat> m: dd Any.^find_method("WHAT") 

[16:47] <camelia> rakudo-moar a9e83a93a: OUTPUT: «Mu␤»

[16:48] <lizmat> that's macros for you  :-)

[16:52] *** kotrcka left
[17:15] <gfldex> What I find surprising is that Rakudo suggests `'WHAT', ...`. How does it know about a method that isn't there?

[17:18] <lizmat> he, good question

[17:19] <lizmat> m: say Any.^methods.map(*.name).sort   # it's not in here

[17:19] <camelia> rakudo-moar a9e83a93a: OUTPUT: «(ACCEPTS ASSIGN-KEY ASSIGN-POS AT-KEY AT-POS Array BIND-KEY BIND-POS Bag BagHash DELETE-KEY DELETE-POS EXISTS-KEY EXISTS-POS FLATTENABLE_HASH FLATTENABLE_LIST Hash List Map Mix MixHash Seq Set SetHash Slip Supply ZEN-KEY all antipairs any append are b…»

[17:19] <[Coke]> I assume a special case in the suggest logic?

[17:19] <[Coke]> (though a quick search didn't find it)

[17:20] <gfldex> Would Rakudo tell us it it would become self-aware? :D

[17:54] *** bdju joined
[17:55] <MasterDuke> https://github.com/rakudo/rakudo/blob/main/src/core.c/Exception.pm6#L285-L288  # [Coke], gfldex fyi

[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:03] <lizmat> I guess we need a check that the suggestion doesn't match the unfound method :-)

[18:06] *** sena_kun left
[18:07] *** sena_kun joined
[18:40] <discord-raku-bot> <antononcube> @lizmat I just upvoted your criticism of "kebabtize".  🙂

[18:51] <discord-raku-bot> <librasteve> I put this line in my Dockerfile RUN zef install https://github.com/librasteve/raku-physics-measure.git --verbose

[18:51] <discord-raku-bot> <librasteve> and then run a standard GHA like the workflows here https://github.com/librasteve/raku-Physics-Measure/tree/main

[18:52] <discord-raku-bot> <librasteve> even better if you have a module with  Build.pm then the zef install will run build and test

[18:54] <discord-raku-bot> <librasteve> (there are likely a lot better ways from others on this chat!)

[19:06] <tbrowder__> lizmat: The Rakudo Star manager is interested in a #raku-star channel. is that possible?

[19:07] *** evalable6 left
[19:07] *** linkable6 left
[19:07] *** [Coke] left
[19:08] *** evalable6 joined
[19:09] *** linkable6 joined
[19:11] *** [Coke] joined
[19:17] *** Sgeo joined
[20:17] *** shareable6 left
[20:17] *** notable6 left
[20:17] *** squashable6 left
[20:17] *** greppable6 left
[20:17] *** committable6 left
[20:17] *** evalable6 left
[20:17] *** releasable6 left
[20:17] *** unicodable6 left
[20:17] *** reportable6 left
[20:17] *** nativecallable6 left
[20:17] *** bloatable6 left
[20:17] *** linkable6 left
[20:17] *** benchable6 left
[20:17] *** quotable6 left
[20:17] *** statisfiable6 left
[20:17] *** coverable6 left
[20:17] *** bisectable6 left
[20:17] *** sourceable6 left
[20:17] *** tellable6 left
[20:17] *** nativecallable6 joined
[20:17] *** committable6 joined
[20:17] *** coverable6 joined
[20:17] *** bloatable6 joined
[20:17] *** statisfiable6 joined
[20:18] *** releasable6 joined
[20:18] *** bisectable6 joined
[20:18] *** shareable6 joined
[20:18] *** sourceable6 joined
[20:18] *** greppable6 joined
[20:19] *** evalable6 joined
[20:19] *** reportable6 joined
[20:19] *** notable6 joined
[20:19] *** squashable6 joined
[20:19] *** quotable6 joined
[20:19] *** tellable6 joined
[20:20] *** unicodable6 joined
[20:20] *** benchable6 joined
[20:20] *** linkable6 joined
[21:20] *** evalable6 left
[21:20] *** greppable6 left
[21:20] *** quotable6 left
[21:20] *** reportable6 left
[21:20] *** squashable6 left
[21:20] *** coverable6 left
[21:20] *** linkable6 left
[21:20] *** tellable6 left
[21:20] *** nativecallable6 left
[21:20] *** statisfiable6 left
[21:20] *** notable6 left
[21:20] *** shareable6 left
[21:20] *** unicodable6 left
[21:20] *** sourceable6 left
[21:20] *** bisectable6 left
[21:20] *** committable6 left
[21:20] *** bloatable6 left
[21:20] *** benchable6 left
[21:20] *** releasable6 left
[21:20] *** quotable6 joined
[21:20] *** reportable6 joined
[21:21] *** statisfiable6 joined
[21:21] *** unicodable6 joined
[21:21] *** sourceable6 joined
[21:21] *** greppable6 joined
[21:21] *** tellable6 joined
[21:21] *** benchable6 joined
[21:21] *** linkable6 joined
[21:21] *** coverable6 joined
[21:21] *** notable6 joined
[21:22] *** bloatable6 joined
[21:22] *** bisectable6 joined
[21:22] *** squashable6 joined
[21:22] *** evalable6 joined
[21:22] *** releasable6 joined
[21:23] *** nativecallable6 joined
[21:23] *** committable6 joined
[21:23] *** shareable6 joined
[21:32] *** sena_kun left
[22:10] <lizmat> tbrowder__ Most definitely... will set it up tomorrow

[22:32] *** linkable6 left
[22:32] *** evalable6 left
[22:33] *** evalable6 joined
[22:34] *** linkable6 joined
[23:10] <SmokeMachine> tonyo: https://github.com/FCO/Test-Fuzz

[23:14] <discord-raku-bot> <antononcube> @SmokeMachine So, nothing stops us to generate Fuzz-tests with LLMs then. (In Raku.)

[23:16] <discord-raku-bot> <antononcube> I currently experimenting generating Gherkin tests with LLMs. I will try "Test:Fuzz" soon.

[23:16] <SmokeMachine> Yes, I don’t think anything does… but I still need to improve the generator API for test::fuzz…

[23:18] <SmokeMachine> If I remember it well, it needs a class method to generate objects from that class… but it would be much better to just need to implement a multi sub “test-sames-generator” to do that

[23:21] *** kjp left
[23:24] *** kjp joined
[23:28] <tbrowder__> lizmat: thanks

[23:32] <discord-raku-bot> <antononcube> @SmokeMachine Ok, good to keep in mind.

