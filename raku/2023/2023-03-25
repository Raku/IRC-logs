[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:05] <Voldenet> Using rakumod files out of zef modules is not very fun
[00:08] <discord-raku-bot> <Nemokosch> I mean, there is just no directory = package correspondence in Raku, right?
[00:09] <discord-raku-bot> <Nemokosch> no matter if we declare something to be "the root folder" or not
[00:09] <Voldenet> Well, since you can define whatever structure you want…
[00:09] <discord-raku-bot> <Nemokosch> not only can you but from what I know, you have to
[00:11] <discord-raku-bot> <Nemokosch> Is Foo/Bar.rakumod any closer into being a Foo::Bar module than really-funny-filename.xyz?
[00:14] <guifa_> inasmuch as `use lib …` would interpret Foo/Bar.rakumod  in that lib folder as Foo::Bar
[00:15] <discord-raku-bot> <Nemokosch> well, would it?
[00:15] <discord-raku-bot> <Nemokosch> because the -I flag didn't, as illustrated by grondilu
[00:18] <Voldenet> Foo/Bar would need `use ../Foo` or some similar weirdness
[00:18] <Voldenet> in fact, unless you define root dir explicitly, no matter what convention you use, you end up with nonsense and ambiguities all over the place
[00:19] <Voldenet> Like should `use Foo` in `Foo/Bar` use `./Foo.rakumod` or `../Foo.rakumod` when invoked from the parent and both files exist?
[00:20] <discord-raku-bot> <Nemokosch> what does the "files" key do in META6?
[00:22] <guifa_> Nemokosh: I just checked it
[00:23] <guifa_> `use lib …` treats directories as namespaces
[00:24] <guifa_> use lib `foo`; use A; use A::B; use bar::A::X; would load out foo/A.rakumod; foo/A/B.rakumod; foo/bar/A/X.rakumod
[00:24] <Voldenet> What if A did `use B` without explicitly saying `use lib` though?
[00:25] <Voldenet> or B did use X
[00:26] <Voldenet> it could simply use `current .rakumod directory` as reference, or folder defined in `use lib` above
[00:26] *** nort left
[00:28] <guifa_> I believe it uses the folder defined in use lib, because that's what you would use even in modules
[00:29] <discord-raku-bot> <Nemokosch> use lib sets up a FileSystem compunit repository, no?
[00:29] <Voldenet> you can't use `use lib` in modules though
[00:29] <Voldenet> `'use lib' cannot be pre-compiled and thus cannot be used in a module`
[00:30] <guifa_> My point is why would the naming convention suddenly differ?
[00:30] <guifa_> Unless the module itself uses `use lib …`, I would expect Raku to search for any referenced module name from the root directory given in use lib
[00:31] <guifa_> so if lib/A/B/C/D.rakumod says `use E`, I would expect it to load lib/E.rakumod
[00:31] <guifa_> does it in fact load lib/A/B/C/D/E.rakumod ? 
[00:34] <Voldenet> It does load… both
[00:34] <Voldenet> if there is lib/A/B/C/D/E.rakumod, it gets loaded first
[00:35] <Voldenet> But then when you have E.rakumod in deep structure, how do you load lib/E.rakumod
[00:37] <discord-raku-bot> <Nemokosch> > 'use lib' cannot be pre-compiled and thus cannot be used in a module This sounds stupid. Precompilation is meant to be a feature, not a curse.
[00:37] <discord-raku-bot> <Nemokosch> no precompilation exists
[00:38] <guifa_> Well, there would be the bug to me.  Only allow the full name — I don't think I've ever seen the use E to refer to the next deeper one 
[00:39] <guifa_> although perhaps one would need `use GLOBAL::E`
[00:40] <guifa_> based on my quick read of S10, but currently reading S11 which deals more directly with modules
[00:44] <Voldenet> imo in case where both E.rakumod and **/E.rakumod can be loaded, compiler should start complaining
[00:44] <Voldenet> it's okay for it to work in such a way, but ambiguities here shouldn't be allowed
[00:45] <guifa_> (I'm actually now not convinced that S10/S11 say that — I think they're looking for current installed symbols.  I think it just doesn't handle it, as the `use lib`statement isn't covered anywhere
[00:47] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/e5e5acb4181e752333f8699c195f8e7821c0408f/src/core.c/CompUnit/Repository/FileSystem.pm6#L318
[00:47] <discord-raku-bot> <Nemokosch> this seems interesting for me at least. The construction of the provides section for distributions without any META6
[00:50] <discord-raku-bot> <Nemokosch> 1. replace slashes to :: 2. reduce multiple consecutive colons to a length of 2 3. remove the first part of the hierarchy 4. remove anything starting from a dot (? not terribly descriptive)
[00:53] <Voldenet> So apparently what gets loaded is tied to how DIR-RECURSE works
[00:53] <Voldenet> I'm not sure how do I feel about that…
[00:57] <Voldenet> before creating `Foo/Foo.rakumod` > {Bar => {rakumod => Foo/Bar.rakumod}, Foo => {rakumod => Foo.rakumod}}
[00:57] <Voldenet> after creating `Foo/Foo.rakumod` > {Bar => {rakumod => Foo/Bar.rakumod}, Foo => {rakumod => Foo/Foo.rakumod}}
[00:58] <discord-raku-bot> <Nemokosch> from the directory that contains Foo/ ?
[01:00] <Voldenet> Yes
[01:00] <Voldenet> I'm under the impression that this all depends in what order you get files
[01:00] <Voldenet> and I'm sort of expecting this to be dictated by filesystem…
[01:01] <Voldenet> so, you can write fusefs to change behaviour of modules loading
[01:01] <Voldenet> Can you feel the horror yet? :D
[01:01] <discord-raku-bot> <Nemokosch> Perhaps it would be better if this didn't work at all
[01:02] <Voldenet> Some sanity check `if module exists then die` in the line you've pasted probably
[01:03] <Voldenet> there's none of problems if the hash above has no ambiguities
[01:04] *** xinming left
[01:05] *** xinming joined
[01:09] <discord-raku-bot> <Nemokosch> you know, the funny thing is
[01:09] <discord-raku-bot> <Nemokosch> I took grondilu's sample
[01:09] <discord-raku-bot> <Nemokosch> raku -I. -e 'say $*REPO.distribution.dist.meta;'
[01:09] <discord-raku-bot> <Nemokosch> this yields something sane
[01:09] <discord-raku-bot> <Nemokosch> {api => *, auth => , files => {}, name => /tmp/grondilu-test, provides => {Foo => grondilu-test/Foo.rakumod, Foo::Bar => grondilu-test/Foo/Bar.rakumod}, resources => (), ver => *}
[01:09] <discord-raku-bot> <Nemokosch> makes sense, right?
[01:10] <discord-raku-bot> <Nemokosch> when I edit the code to run to actually use Foo::Bar
[01:10] <discord-raku-bot> <Nemokosch> raku -I. -e 'say $*REPO.distribution.dist.meta; use Foo::Bar;'
[01:10] <discord-raku-bot> <Nemokosch> the whole thing explodes and I get loads of stuff from /tmp
[01:12] <discord-raku-bot> <Nemokosch> which coincidentally ruins the correspondence between the supposed file and the namespace
[01:14] <discord-raku-bot> <Nemokosch> it explodes the same way if I use use lib instead of the I flag
[01:17] <discord-raku-bot> <Nemokosch> apparently the "use lib" inside Foo::Bar did something funny that retroactively overwrote the repository
[01:18] <Voldenet> I'm betting that the source of this is that it's not explicitly defined anywhere in tests
[01:18] <Voldenet> so the behaviour doesn't even have to be the same everywhere
[01:19] <tonyo> -I. and -Ilib do different things
[01:20] <discord-raku-bot> <Nemokosch> that's good to know
[01:21] <discord-raku-bot> <Nemokosch> but it would be even better if they didn't, probably...
[01:21] <Voldenet> otoh, now I'm pretty convinced that `use lib` is evil
[01:21] <discord-raku-bot> <Nemokosch> by the way, I again think that I found why grondilu's snippet was indeed wrong
[01:21] <Voldenet> because it usees Foo::Bar instead of Bar?
[01:21] <discord-raku-bot> <Nemokosch> and it demonstrates my former point from a couple of days ago, that implicit namespace declarations are evil
[01:22] <discord-raku-bot> <Nemokosch> > method talk { use Foo; Foo::talk; }
[01:22] <discord-raku-bot> <Nemokosch> this is the problem
[01:22] <discord-raku-bot> <Nemokosch> that Foo is a different Foo
[01:25] <Voldenet> in fact, `unit class Foo::Bar` doesn't seem like something that should be in Bar file
[01:26] <discord-raku-bot> <Nemokosch> by the way, there is no amount of no precompilation that would keep you from the infamous .precomp folder to show up
[01:26] <Voldenet> it should be `unit class Bar; …` and then users of this class should see it as Foo::Bar _if_ loaded in the context of subdirectory
[01:26] <discord-raku-bot> <Nemokosch> I don't know, Rakudo is full of that structure
[01:26] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/main/src/core.c/IO/Path/Parts.pm6
[01:27] <discord-raku-bot> <Nemokosch> I think the mere notion of unit class Foo::Bar is damned, though
[01:27] <discord-raku-bot> <Nemokosch> it can automagically create a namespace Foo for you
[01:27] <Voldenet> but it barely serves any point – C# had that problem for a long time, where random namespaces were in random locations
[01:28] <Voldenet> It was fixed by tools that help you change namespaces when you move the file…
[01:28] <discord-raku-bot> <Nemokosch> I mean, this is worse than the Java-ish "package foo.bar.baz" thing
[01:28] <Voldenet> So, what was the point of even having namespace if it's supposed to mirror the folder structure
[01:29] <discord-raku-bot> <Nemokosch> a namespace was born, from thin air
[01:29] <Voldenet> I'm not saying that having one file with multiple namespaces is bad
[01:29] <Voldenet> or that Foo.rakumod can't declare Foo::Bar and 5 other classes
[01:30] <Voldenet> but it should be implicit that when namespace is missing, it gets materialized out of thin air
[01:30] <discord-raku-bot> <Nemokosch> and now you are damned to have an implicit name conflict with any other symbol (namespace in particular) called Foo
[01:30] <Voldenet> and it should mirror the folder structure
[01:31] <discord-raku-bot> <Nemokosch> It's not even obvious whether Foo::Bar would be attached to an existing namespace or a new one
[01:31] <Voldenet> m: role A { has $.x }; role B { has $.x; }; class C does A does B { }
[01:31] <camelia> rakudo-moar e5e5acb41: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Attribute '$!x' conflicts in role '<anon>' composition: declared in both 'B' and 'A'␤at <tmp>:1␤»
[01:31] <Voldenet> This is what should happen.
[01:31] <discord-raku-bot> <Nemokosch> a new one - that shadows the old one by usual scoping rules
[01:33] <Voldenet> when given `Foo::*`, it should be treated as a namespace, everything under the Foo/ directory must be here
[01:34] <Voldenet> in cases of conflicts (e.g. Foo.rakumod having `Foo::Bar` and Foo/Bar.rakumod having `Bar`) errors should stop you
[01:34] <discord-raku-bot> <Nemokosch> back to the snippet... it should be suspicious that the same error shows up without any use Foo
[01:35] <discord-raku-bot> <Nemokosch> so yes... use Foo must appear before unit class Foo::Bar
[01:35] <discord-raku-bot> <Nemokosch> or else you just use the dummy Foo
[01:36] <discord-raku-bot> <Nemokosch> I mean... it's very good for my ego that something actually causes problems only days after I bring up how damned this whole concept of implicit namespace declarations is
[01:37] <discord-raku-bot> <Nemokosch> but would it not be better if somebody took this caveat seriously at least 10 years ago?
[01:38] <Voldenet> probably
[01:38] <Voldenet> but I'm betting it was implemented and it worked
[01:38] <discord-raku-bot> <Nemokosch> yes, it "worked" :painharold:
[01:39] <discord-raku-bot> <Nemokosch> I think it was Nick who brought up Chesterton's fence a while ago. How ironic.
[01:40] <discord-raku-bot> <Nemokosch> Almost every time Raku tries to do something unlike any of the mainstream languages - maybe except for Perl that it was meant to fix, not reproduce - it turns out the other languages had a reason to not do it
[01:44] <Voldenet> dynamic namespaces are difficult, especially if you don't compile whole code
[01:44] <Voldenet> for instance, nodejs just doesn't do namespaces, you simply load the js file and assign its exports to something
[01:48] <discord-raku-bot> <Nemokosch> There is no shame in that, I think
[01:48] <Voldenet> but it's ridiculously hard to precompile and cache things
[01:49] <discord-raku-bot> <Nemokosch> I'm pretty sure the result shouldn't be this system, anyway
[01:49] <Voldenet> by design you're bound to never beat anything compiled
[01:50] <discord-raku-bot> <Nemokosch> well, you know that much of Node is just plain old C++
[01:50] <discord-raku-bot> <Nemokosch> how do imports work in C#, though? I don't remember.
[01:51] <Voldenet> you reference dll files
[01:51] <discord-raku-bot> <Nemokosch> how are dll files tied to namespaces?
[01:52] <Voldenet> compiler turns Foo.Bar.Baz into `this is the "foo.dll" or "foo.bar.dll"`
[01:53] <discord-raku-bot> <Nemokosch> hahaha
[01:53] <Voldenet> so, it's all resolved during linking
[01:53] <discord-raku-bot> <Nemokosch> so is one namespace turned into one dll?
[01:53] <Voldenet> depends on how you declare projects
[01:54] <Voldenet> you can have one project with multiple namespaces
[01:54] <Voldenet> if there's conflicts (two dlls define the same namespace) you end up with errors
[01:54] <Voldenet> that compiler can't decide
[01:55] <Voldenet> in practice people try to follow the convention of package name following the namespace exported by it
[01:55] <discord-raku-bot> <Nemokosch> hm, wait, so are these .NET dll's for kind of static linking as well?
[01:56] <Voldenet> assemblies just define referenced assembly names which are resolved by runtime on first use
[01:56] <discord-raku-bot> <Nemokosch> usually when I think of dll's, I don't think of the compiler doing anything about the linking
[01:56] <Voldenet> technically you could do static linking with them though
[01:57] <discord-raku-bot> <Nemokosch> okay, I don't say it right - it just happened today...
[01:58] <discord-raku-bot> <Nemokosch> so apparently when you build a binary, you can define, at least in this godforsaken CC compiler, where the dynamic libraries should be searched first
[01:58] <discord-raku-bot> <Nemokosch> it's so much fun to build Pro*C...
[01:59] <Voldenet> existing conventions in dotnet world used to cause pain, since there was 'global assembly cache' that had all the assemblies
[01:59] <Voldenet> and saying `use assembly entityframework version 6`, since every version of entity framework was described as `6.0.0` could give you version 6 or 6.2 :)
[02:00] <discord-raku-bot> <Nemokosch> 🤣
[02:00] <Voldenet> in which case your app could suddenly throw missing method exception when compiling il code
[02:01] <Voldenet> (since every direct call needs to be turned into actually loaded address)
[02:01] <discord-raku-bot> <Nemokosch> so what's the relevance of packages in C#?
[02:01] <Voldenet> Well, dotnet have decided to stop using global assembly cache… ;)
[02:02] <discord-raku-bot> <Nemokosch> Are packages like distributions in Raku terminology?
[02:02] <Voldenet> Sort of
[02:02] <Voldenet> Now you simply load things from `bin/` which define assembly names, so `bin/EntityFramework.dll` becomes `entity framework version 6`
[02:03] <Voldenet> and when assembly `my business logic version 1.0` loads `entity framework v6`, the runtime tries to fetch loaded one in current assembly load context
[02:04] <Voldenet> if there's package A and B that both use the same assembly name+version with different metadata being loaded, it's possible to load them into separate assembly load context
[02:05] <Voldenet> which causes other problem, `common interface dll` suddenly exports `common interface dll from runtime A.IInterface` and `common interface dll runtime B.IInterface` which are not compatible with each other
[02:05] <Voldenet> even though they are defined by the same file
[02:05] *** linkable6 left
[02:05] *** evalable6 left
[02:07] <Voldenet> there's ways to fix that by passing common assembly load context, but it's not very elegant at the moment…
[02:07] *** linkable6 joined
[02:07] <Voldenet> however, if you use the same assembly versions everywhere within your application, it doesn't feel bad
[02:07] <Voldenet> since you don't even have to know assembly load contexts in the first place
[02:08] <discord-raku-bot> <Nemokosch> yeah it sounds more like a "hard things possible" thing
[02:08] *** evalable6 joined
[02:09] <Voldenet> it's even weirder when you throw in native .dll/.so libs to the mix
[02:10] <Voldenet> "hard things possible", "easy things easy" really is current state of dll loading in .net though
[02:12] <Voldenet> it used to be "easy things easy… otherwise simply set registry key HKEY_LOCAL_MACHINE\Software\Microsoft\Fusion\LogPath and pray that nobody uses global assembly cache"
[02:13] *** jpn joined
[02:17] *** coleman left
[02:22] *** coleman joined
[02:24] *** razetime joined
[03:20] *** lizmat_ joined
[03:23] *** lizmat left
[03:33] *** gcd left
[03:36] *** razetime left
[03:51] *** theesm left
[03:51] *** derpydoo left
[03:52] *** derpydoo joined
[03:52] *** razetime joined
[03:53] *** theesm joined
[03:54] *** razetime left
[04:34] *** donpdonp- left
[05:15] *** jpn left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:14] *** tejr left
[06:21] *** grondilu joined
[06:21] <grondilu> Hi all
[06:21] <tellable6> 2023-03-24T16:10:43Z #raku <tonyo> grondilu: what's the meta look like in that ?
[06:21] <tellable6> 2023-03-24T23:49:16Z #raku <Voldenet> grondilu: the problem with .rakumod-only modules is that there is no `project root`, so your module could be either Tmp::Foo::Bar or Foo::Bar or Bar depending on the root directory used, which causes ambiguities
[06:23] <grondilu> 😕
[06:23] <grondilu> ngl it's the first time I read about such thing as a "project root".
[06:24] *** nort joined
[06:24] <Voldenet> when you start the file from some directory, missing `META.json` get constructed
[06:25] <Voldenet> ofc, things would work if you did this http://ix.io/4rLE
[06:25] <Voldenet> since Bar in directory Foo becomes Foo::Bar
[06:25] <Voldenet> details https://github.com/rakudo/rakudo/blob/e5e5acb4181e752333f8699c195f8e7821c0408f/src/core.c/CompUnit/Repository/FileSystem.pm6#L318
[06:27] <Voldenet> see > raku -I. -e 'say $*REPO.distribution;'
[06:29] <grondilu> Well, my Foo/Bar example was an attempt to replicate an error I got from a project where there was indeed a META6.json
[06:32] <Voldenet> in that case `unit class Foo::Bar;` creates Foo that is empty, so when you `use Foo` later it's, well, empty
[06:36] <grondilu> that is just weird.  It seems to me I've been using that kind of modules hierarchy for years and I think it's the first time it creates issues.
[06:41] <grondilu> any way, it's ok to name 'Bar' a module located in 'Foo/', instead of naming it 'Foo::Bar', then?  The names don't have to reflect the directory structures?
[06:46] <grondilu> I think I'd rather write 'use Foo;' just before 'unit class Foo::Bar;', as suggested above
[06:47] <grondilu> I mean often 'Bar' is actually a qualifier for 'Foo', so it doesn't make much sense on its own.  Like say 'JSON::Tiny'
[06:50] *** tea3po joined
[06:53] *** teatwo left
[07:00] *** razetime joined
[07:05] *** razetime left
[07:10] *** tejr joined
[07:40] *** Ergo444 joined
[07:41] <Ergo444> hi
[07:46] *** lizmat_ left
[07:46] *** lizmat joined
[08:08] *** lizmat left
[08:11] *** lizmat joined
[08:11] *** lizmat left
[08:16] *** abraxxa joined
[08:17] *** Sgeo left
[08:19] *** Ergo444 left
[08:19] *** razetime joined
[08:22] *** abraxxa left
[08:26] *** sena_kun joined
[08:45] *** razetime left
[08:58] *** lizmat joined
[09:06] *** sena_kun left
[09:08] *** sena_kun joined
[09:19] *** lizmat left
[09:28] *** derpydoo left
[09:31] *** jpn joined
[09:42] *** QhpAptyj9hj0RQwM joined
[09:45] <grondilu> how do I get out of a react block?  `last` does not seem to cut it.
[09:48] *** frost joined
[09:48] *** QhpAptyj9hj0RQwM left
[09:48] *** jpn left
[09:54] *** frost left
[09:56] *** jpn joined
[10:01] *** jpn left
[10:30] <discord-raku-bot> <Nemokosch> grondilu: it's called done
[10:36] *** frost joined
[10:37] *** frost left
[10:38] *** QhpAptyj9hj0RQwM joined
[10:39] *** frost joined
[10:44] *** frost left
[10:48] *** ab5tract joined
[10:49] *** QhpAptyj9hj0RQwM left
[11:04] <tbrowder__> grondilu: i have gotten myself in trouble with building modules on the fly during experimentation. i recommend starting a new module project with App::Mii6 (for extra credit, drive it with Mi:
[11:06] <tbrowder__> Mi6::Helped). that gives you a solid root directory, META6.json, and you're off to a solid project usable throughout our community's structure
[11:06] <tbrowder__> *Mi6::Helper
[11:06] <tbrowder__> *App::Mi6
[11:09] *** euandreh joined
[11:09] <discord-raku-bot> <Nemokosch> not sure if that would have helped with this case
[11:10] <discord-raku-bot> <Nemokosch> anyway, grondilu has a rare talent to hit problematic aspects of code composition in Raku
[11:11] <discord-raku-bot> <Nemokosch> Not gonna lie, I'm thankful for this one. It has been 2 or 3 days ago when I pointed out that implicitly creating namespaces for something like Foo::Bar::Baz is a can of worms - and here you go.
[11:15] <discord-raku-bot> <Nemokosch> It's not even healthy to think about it too much... Somebody managed to invent namespaces with the same problems namespaces were meant to solve. It just makes one mad.
[11:45] <grondilu> tbrowder__: tbh I hate module management.  I will look up this App::Mii6 thing, but frankly that sounds like yet another layer of complexity.
[12:00] *** reportable6 left
[12:00] *** derpydoo joined
[12:02] *** reportable6 joined
[12:04] <tbrowder__> well, if you want others to use your work, you have to meet expected standards, yes? and it makes your like easier, too!
[12:05] <tbrowder__> try it, you'll like it :-D
[12:05] <tbrowder__> *life
[12:06] <tbrowder__> anyone use app "termius" on iPad?
[12:41] *** jpn joined
[13:01] *** jpn left
[13:29] *** jpn joined
[13:37] *** jpn left
[13:50] *** jgaz joined
[13:52] *** QhpAptyj9hj0RQwM joined
[14:08] *** jpn joined
[14:26] *** Guest37 joined
[14:33] *** rf joined
[14:45] *** QhpAptyj9hj0RQwM left
[14:49] *** Guest37 left
[14:50] *** QhpAptyj9hj0RQwM joined
[15:02] *** rf left
[15:16] <grondilu> ok I'm going to throw a pie in the sky about module management.
[15:16] <grondilu> I wish it was simpler.  Like waaaaay simpler.
[15:17] <grondilu> I wish it basically consisted in including the source code, and just that.
[15:18] <grondilu> like if you need a Foo module, then you include a "content-based" address of the Foo module.
[15:18] <grondilu> like an IPFS CID or something.
[15:18] <grondilu> and that would literally be all.
[15:20] <grondilu> I honestly fail to see why we need anything else.
[15:22] <discord-raku-bot> <Nemokosch> Precompilation? Being able to distribute your individual work in an isolated manner?
[15:23] <discord-raku-bot> <Nemokosch> No, frankly I don't think it's about the complexity in itself. It's about unnecessary voluntaristic approach to many things in this topic.
[15:23] <grondilu> Precompilation?  You could put a KID to your compiled module if you really want to.  Or your import statement could be in a BEGIN phaser or something.
[15:23] <grondilu> s/KID/CID/
[15:26] <grondilu> regarding compilation, after all binary code is just an other programming language.  So in a way it's a slang, isn't it?
[15:27] <discord-raku-bot> <Nemokosch> This is an interesting take
[15:28] <grondilu> this is something I thought about recently when thinking about chat-GPT's ability to translate code from one language to another.  It occurred to me that if it can do that, it could also do compilation since binary code is just an other language.
[15:31] <discord-raku-bot> <Nemokosch> Idk if it's effective or even sane to represent binary code encoded as text
[15:31] *** QhpAptyj9hj0RQwM left
[15:32] <grondilu> Nemokosh: I don't think a programming language has to be encoded as text to be considered a programming language.
[15:33] <grondilu> Besides, wasm has a textual representation so it's not like it's an absurd concept. 
[15:33] <grondilu> also good old assembler is pretty close to binary code.
[15:35] <discord-raku-bot> <Anton Antonov> 🙈🙊🙉
[15:36] <discord-raku-bot> <Anton Antonov> Can be used to do neural programming.
[15:37] <discord-raku-bot> <Nemokosch> I didn't talk about what is considered a programming language, although you are right: binary code probably isn't a programming language by definition
[15:38] <grondilu> I said the contrary, that it is a pl
[15:38] <discord-raku-bot> <Nemokosch> You were right in your misinterpretation 😛
[15:39] <discord-raku-bot> <Nemokosch> There is indeed a reason to object to binary code being a pl
[15:40] <discord-raku-bot> <Nemokosch> The other thing is: native binary code is as unportable as it gets
[15:40] <grondilu> well I guess there has to be a difference otherwise "free and open source code" doesn't mean anything.
[15:41] <grondilu> well...
[15:41] <grondilu> there is emulation now, though.
[15:41] <grondilu> and it's usage is growing.
[15:42] <grondilu> so one could argue that a vm now can be used to run any machine code.
[15:42] <grondilu> in a way what it means for some code to be "portable" may become subjective.
[15:43] <grondilu> though I admit I may be reaching here.
[15:44] <discord-raku-bot> <Nemokosch> emulation is costly
[15:45] <grondilu> still, it's all the rage these days
[15:45] <discord-raku-bot> <Nemokosch> I don't have that impression at all tbh
[15:46] <discord-raku-bot> <Nemokosch> I don't see any convincing level of ARM/x86 interoperability, for example
[15:46] <discord-raku-bot> <Anton Antonov> @Nemokosch and @grondilu ChatGPT is "all the rage these days."
[15:47] <grondilu> I mean, isn't MoarVM a VM?
[15:47] <discord-raku-bot> <Nemokosch> MoarVM is a runtime of its own bytecode, not an emulator
[15:48] <discord-raku-bot> <Nemokosch> probably you can carry MoarVM bytecode around, as long as you are using the same version on both ends
[15:50] *** rf joined
[15:51] <grondilu> btw what do you guys think about chat-GPT?  Without going too deep into the long term implications, on the short term I'm looking forward to it being able to translate from one pl to an other.  And, as I was discussing, possibly even compile to binary codes such as wasm.
[15:52] <grondilu> It would be quite mind-boggling too if it could de-compile efficiently.  Imagine the impact on proprietary software lol
[15:53] <grondilu> Also wouldn't it be awesome if it could just create a raku compiler out of the specs?
[15:54] <discord-raku-bot> <Anton Antonov> @grondilu "[...] being able to translate from one pl to an other." -- I doubt that will work for non-trivial code, if prior -- and recent -- Microsoft at code generation and completion functionalities are taken into account.
[15:55] <discord-raku-bot> <Anton Antonov> Granted, I am biased : more or less that is what I am trying to do with my DSLs, so I might claim the competition is underperforming.
[15:56] <grondilu> It can already generate code without having trained specifically to do that.  There is no way it won't be able to learn to do it well once it is trained specifically for that with self reinforcment learning.
[15:57] <grondilu> IMHO
[15:57] <discord-raku-bot> <Anton Antonov> @grondilu I think some of your statements indicate too much belief in the generative machine learning algorithms. 🙂
[15:59] <discord-raku-bot> <Anton Antonov> Right, this is what other AI believers think. But, Google hit sparsity problems just with search n-grams, so I think that sparsity problem is going to show up much stronger in programming code generation / completion.
[15:59] <grondilu> well, I play chess and I was impressed by Deepmind's AlphaZero.  If I understand correctly, Deepmind used reinforcement learning with self-play, which is very different from how language models are trained.  I think both methods will merge eventually ande the result will blow our minds.
[16:01] <ugexe> chatgpt is great at telling you stuff that is wrong but sounds right
[16:01] <ugexe> i can tell chatgpt it is wrong about something, it will agree, and then in a later response it will reiterate the wrong thing i correct it on
[16:01] <ugexe> chatgpt is great for inventing stories, but even asking it to describe what an e.g. sql statement does it gets things terribly wrong too often
[16:02] <ugexe> and unless you already knew the answer, you aren't going to know its lying or wrong
[16:03] <discord-raku-bot> <Anton Antonov> @ugexe Yeah, I used the following command openai-playground does google guava have shortest path algorithm implementation
[16:04] *** jpn left
[16:04] <discord-raku-bot> <Anton Antonov> And got the very assertive and wrong answer :  > Yes, Google Guava includes an implementation of Dijkstra's shortest path algorithm in its graph library. The algorithm can be accessed through the "ShortestPath' class in the 'com.google.common.graph' package. The 'ShortestPath' class provides methods for computing the shortest path between two nodes in a graph, as well as fin ding the distance between those
[16:04] <discord-raku-bot> nodes.
[16:04] *** jpn joined
[16:05] <grondilu> it is not trained to produce a correct output, only a plausible one.  But once it is trained to produce correct code, which is possible if the code is verifiable somehow, like with a test suite, then it should perform as well as any human IMHO
[16:06] <ugexe> its not hard to produce plausible but incorrect code
[16:06] <discord-raku-bot> <Anton Antonov> @grondilu " I think both methods will merge eventually ande the result will blow our minds." -- And am very pessimistic about that. 🙂
[16:06] <grondilu> ugexe: I disagree.  It is actally pretty hard, that's why good language models took so much time to show up.
[16:06] *** jgaz left
[16:07] <ugexe> i dunno i peer review code like every day and it almost always looks plausible and almost always has something wrong with it
[16:08] <discord-raku-bot> <Anton Antonov> Also, Chess and Go are easy for Machine Learning -- rules are clearly defined. There is no ambiguity or incomplete information problems.
[16:09] *** jpn left
[16:09] <ugexe> i actually kind of dread the potential future of having to peer-review jr developers code they are c&ping from an AI helper
[16:09] <discord-raku-bot> <Anton Antonov> Since you, grodilu and ugexe, are here discussing this -- can you help me naming a Raku module that combines the ML modules in Raku?
[16:09] <grondilu> well, rules for programming languages are pretty well defined too, aren't they?  You provide an input, and you expect a precise output.  That's why raku can be defined from a test suite, after all.
[16:09] <ugexe> naturally i'll get AI to also do the code review for me
[16:10] <discord-raku-bot> <Anton Antonov> I considered "Acme::AI::Fusion" and "Acme::AI::MushUp" .
[16:10] <grondilu> Antonov:  what is Acme?
[16:11] <discord-raku-bot> <Anton Antonov> " well, rules for programming languages are pretty well defined too, aren't they?" -- maybe, but not the problems solved with programming languages.
[16:11] <ugexe> Anton: in perl such meta packages i think are called Task::*
[16:11] <discord-raku-bot> <Anton Antonov> "Acme" is the name of the company that provides intgeresting devices in the Road Runner cartoons.
[16:12] <discord-raku-bot> <Anton Antonov> Take a look here: https://raku.land/?q=acme , for better idea of the Raku culture about the "Acme::*" modules.
[16:14] <grondilu> Antonov: I think you misunderstood me.  In my mind, at least in the short term, the problems would still be solved by humans.  I'm considering Language translation and/or compilation.  That does not require problem solving skills apart from precisely language translation/compilation.
[16:15] <discord-raku-bot> <Nemokosch> ugexe told me that a sort had a sample from the song Woodhenge by Jethro Tull
[16:16] <discord-raku-bot> <Nemokosch> the problem is, I know that song, I'm a huge Mike Oldfield fan, after all...
[16:16] <ugexe> the only sort i promote is sleep sort
[16:17] <discord-raku-bot> <Anton Antonov> @ugexe Let me be a more concrete here. We have Raku packages for: utilizing OpenAI, utilizing DeepL, utilizing W|A, generating insults, translating natural language DSLs into programming code, and vice versa. We want to facilitate typical workflows with all that "wealth of AI things." For example, round-trip translations, or different code generations from different languages, or defining chains of fallback
[16:17] <discord-raku-bot> mechanisms between the AI-contractions.
[16:20] <discord-raku-bot> <Anton Antonov> I am not sure how "meta" those use case scenarios are. I think that any kind of initial take on those is going to be opinionnated. Hence, I am proposing (the more timidly prefixed) "Acme::AI::*".
[16:20] <ugexe> yeah i'm not sure... sounds like a framework, and those generally have branding type names it seems like
[16:23] <discord-raku-bot> <Anton Antonov> @ugexe Right. Well, I can always design a conversational agent and named it accodingly. (E.g. "DSL::English::AIFusionWorkflows".)
[16:24] <discord-raku-bot> <Anton Antonov> @grondilu I see. Yes, that kind of incremental text build-up -- via ML algorithms -- was used few decades ago to create poems (in English) with great success.
[16:25] <ugexe> chatgpt suggests the following: PolyglotAI, AI Compose, CodeCraftAI, AI Fallback
[16:26] <discord-raku-bot> <Anton Antonov> LOL! Cool!
[16:27] <discord-raku-bot> <Anton Antonov> Which text did you use as a prompt?
[16:28] <discord-raku-bot> <Anton Antonov> Also, did you use Raku to access ChatGPT?
[16:29] *** jgaz joined
[16:33] <discord-raku-bot> <Anton Antonov> Here are my results:
[16:33] <discord-raku-bot> <Anton Antonov> https://cdn.discordapp.com/attachments/633753286209699870/1089225455019769956/OpenAI-naming-Acme-AI-MushUp.png
[16:36] <ugexe> I pasted one of your explainations in and told it to name a raku module accordingly 
[16:36] <ugexe> I just used their UI
[16:37] <discord-raku-bot> <lucs> Here's something interesting, you may have heard about it: https://arstechnica.com/information-technology/2023/02/man-beats-machine-at-go-in-human-victory-over-ai/
[16:38] <discord-raku-bot> <Anton Antonov> @lucs Thanks!
[16:39] <discord-raku-bot> <Anton Antonov> @ugexe I used my explanation, but I had to add "How to name such framework?" in order to get name suggestions. (As shown in the screenshot above.)
[16:40] <discord-raku-bot> <Anton Antonov> Also -- I am shamelessly self-promoting here -- I used the CLI of "WWW::OpenAI".
[16:41] *** jpn joined
[16:44] <discord-raku-bot> <lucs> And here's Chomsky's take on such systems: https://portside.org/2023-03-08/noam-chomsky-false-promise-chatgpt
[16:50] <grondilu> lucs: that man beats machine article is interesting, though I know about a period during which chess grand masters could still beat or draw against machines with a particular style of play.  That time is long gone now.
[16:54] <lucs> That's because chess is easy ;-)
[16:57] <grondilu> well, I love this game but I can easily believe that Go is much more difficult.
[17:01] *** ab5tract left
[17:03] *** Ergo444 joined
[17:03] <Ergo444> hi
[17:03] <Ergo444> I use fez
[17:04] <Ergo444> I get this
[17:04] <Ergo444> D:\m\p6\template-nest-xs>fez upload
[17:04] <Ergo444> =<< ERROR: Failed to write 46 bytes to filehandle: Bad file descriptor
[17:05] <Ergo444> what could be the problem?
[17:06] <ugexe> probably that you're using windows
[17:06] <ugexe> does fez work on windows yet?
[17:06] <Ergo444> it worked yesterday
[17:07] <Ergo444> though I updated rakudo today
[17:12] <Ergo444> How can I upload the module then?
[17:40] *** Ergo444 left
[17:43] *** nort left
[17:45] *** grondilu left
[17:49] <discord-raku-bot> <Nemokosch> Is there no verbose mode for it?
[17:54] *** RakuIRCLogger joined
[17:58] *** RakuIRCLogger left
[17:59] *** RakuIRCLogger joined
[17:59] *** jpn left
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:03] *** lizmat joined
[18:07] <lizmat> PSA: IRC logging and the irclogs.raku.org should be operational again now
[18:16] *** jpn joined
[18:50] *** teatwo joined
[18:54] *** tea3po left
[18:57] *** rf left
[19:08] *** rf joined
[19:39] *** Sgeo joined
[19:40] *** teatwo left
[19:40] *** teatime joined
[20:05] *** euandreh left
[20:06] *** jpn left
[20:13] *** jgaz left
[20:19] *** derpydoo left
[20:34] *** rf_ joined
[20:36] *** QhpAptyj9hj0RQwM joined
[20:37] *** rf left
[20:41] *** QhpAptyj9hj0RQwM left
[20:47] *** QhpAptyj9hj0RQwM joined
[20:47] *** QhpAptyj9hj0RQwM left
[20:55] <discord-raku-bot> <p6steve> yes - works on my iphone, having a few teething issues on ipad ... probably due to very old model
[21:29] *** sena_kun left
[21:52] *** sena_kun joined
[22:19] *** sena_kun left
[22:26] *** rf_ left
[22:28] *** rf_ joined
[22:34] *** Nemokosch joined
[22:34] *** Nemokosch left
[22:34] *** Nemokosch joined
[22:34] <Nemokosch> m: $_ = 12; say 14 ~~ $_ * 1;
[22:34] <camelia> rakudo-moar e5e5acb41: OUTPUT: «True␤»
[22:34] <tellable6> 2023-03-14T12:19:05Z #raku <Xliff> Nemokosch: I know not. That's why I'm asking. :)
[22:34] <tellable6> 2023-03-15T00:16:36Z #raku <tonyo> nemokosch: python has for else
[22:34] <tellable6> 2023-03-16T09:23:02Z #raku <SmokeMachine> Nemokosch: Yes, I think so! :) and I think Raku already has almost everything we would need in a shell.
[22:34] <tellable6> 2023-03-17T15:03:22Z #raku <Woodi> Nemokosch: only one ? crazy :)
[22:34] <tellable6> 2023-03-19T12:47:18Z #raku <XliffMac> Nemokosch: How so? I use the shorthand +@
[22:34] <tellable6> 2023-03-19T20:11:40Z #raku-dev <SmokeMachine> Nemokosch: but .&{} is not equivalent to .do({}). .do returns the original value, so, 42.do: { $!next = $_ + 1 }; would return 42 and store 43 on $!next…
[22:34] <tellable6> 2023-03-20T16:42:18Z #raku <Voldenet> Nemokosch: well yes, golang is awfully simple and non-abstract, it's nice for doing things
[22:34] <tellable6> 2023-03-22T09:49:56Z #raku <exp> Nemokosch: can you show an example? I'm not aware of anything like that, but boy I haven't heard Coffeescript in a while!
[22:35] <Nemokosch> oh gosh
[22:35] <Nemokosch> xD
[22:36] <Nemokosch> so yeah... I think that snippet actually DOES make sense. It follows the principles of smartmatching. Both regarding implementation (14 is being bound to the $_ of the RHS), and in its higher-level reading (14 can definitely be taken as a value defined by the x * 1 formula)
[22:37] <Nemokosch> m: $_ = 12; say 14 ~~ $_;
[22:37] <camelia> rakudo-moar e5e5acb41: OUTPUT: «False␤»
[22:37] <Nemokosch> This, on the other hand, is not okay.
[22:39] <Nemokosch> Somebody, probably in the spirit of "do what I mean", created a corner case with no theoretical foundation, something you absolutely cannot anticipate.
[22:41] <Nemokosch> As I hope this is simply a benevolent mistake living outside of the language design, I'm going to open a Rakudo issue for this.
[22:41] *** Nemokosch left
[22:58] <gfldex> m: $_ = 12; say 14 ~~ * * *;
[22:58] <camelia> rakudo-moar e5e5acb41: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»
[23:04] <gfldex> m: say &(* * *).^can('ACCEPTS')[0].&{.file, .line};
[23:04] <camelia> rakudo-moar e5e5acb41: OUTPUT: «(SETTING::src/core.c/Mu.pm6 19)␤»
[23:14] <discord-raku-bot> <Nemokosch> actually, even 14 ~~ ($_) works
[23:20] <discord-raku-bot> <Nemokosch> now I'm especially not sure if this isn't just a mere bug...
[23:41] *** linkable6 left
[23:41] *** evalable6 left
[23:42] *** linkable6 joined
[23:42] *** evalable6 joined
