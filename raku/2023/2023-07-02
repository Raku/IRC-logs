[00:00] *** eseyman joined
[00:00] *** sjn joined
[00:00] *** tbrowder__ joined
[00:00] *** timo joined
[00:00] *** reportable6 left
[00:00] *** leah2 joined
[00:00] *** ugexe joined
[00:00] *** Tirifto joined
[00:01] *** reportable6 joined
[00:02] *** dg joined
[00:02] *** laidback_01 joined
[00:02] *** cm joined
[00:03] *** leah2 left
[00:03] *** jgaz joined
[00:03] *** leah2 joined
[00:04] *** ingy joined
[00:05] *** guifa joined
[00:05] *** a3r0 joined
[00:27] *** jgaz left
[00:29] *** jgaz joined
[00:36] *** deoac left
[00:39] *** jpn left
[00:55] *** MasterDuke joined
[01:26] *** teatime joined
[01:27] *** teatwo left
[01:58] *** derpydoo joined
[02:26] *** teatwo joined
[02:29] *** teatwo left
[02:29] *** teatwo joined
[02:29] *** teatime left
[03:06] *** jpn joined
[03:13] *** jpn left
[04:13] *** nativecallable6 left
[04:13] *** evalable6 left
[04:13] *** sourceable6 left
[04:13] *** statisfiable6 left
[04:13] *** benchable6 left
[04:13] *** coverable6 left
[04:13] *** notable6 left
[04:13] *** squashable6 left
[04:13] *** bloatable6 left
[04:13] *** quotable6 left
[04:13] *** greppable6 left
[04:13] *** committable6 left
[04:13] *** releasable6 left
[04:13] *** unicodable6 left
[04:13] *** linkable6 left
[04:13] *** bisectable6 left
[04:13] *** reportable6 left
[04:13] *** tellable6 left
[04:13] *** shareable6 left
[04:14] *** evalable6 joined
[04:14] *** shareable6 joined
[04:14] *** notable6 joined
[04:14] *** tellable6 joined
[04:14] *** sourceable6 joined
[04:14] *** coverable6 joined
[04:14] *** unicodable6 joined
[04:15] *** statisfiable6 joined
[04:15] *** committable6 joined
[04:15] *** bisectable6 joined
[04:15] *** quotable6 joined
[04:15] *** linkable6 joined
[04:15] *** reportable6 joined
[04:15] *** greppable6 joined
[04:15] *** nativecallable6 joined
[04:15] *** bloatable6 joined
[04:15] *** benchable6 joined
[04:16] *** releasable6 joined
[04:16] *** squashable6 joined
[04:33] *** nebuchadnezzar left
[04:33] *** nebuchadnezzar joined
[05:07] *** jpn joined
[05:18] *** jpn left
[05:34] *** jpn joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:28] *** dogbert11 joined
[06:29] *** dogbert17 left
[06:32] *** jpn left
[06:34] *** jpn joined
[06:49] *** andinus joined
[06:50] *** jpn left
[07:17] *** dogbert11 left
[07:18] *** jpn joined
[07:25] *** dogbert11 joined
[07:26] *** jpn left
[07:27] *** abc50 joined
[07:53] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2023/07/02/saying-them-apart/

[08:02] *** jpn joined
[08:08] *** jpn left
[08:29] <Voldenet> >at tmp/2021-03-08.raku

[08:30] <Voldenet> it made me check the date twice

[08:37] <gfldex> lolibloggedagain: https://gfldex.wordpress.com/2023/07/02/i-take-issue-with-enshittification/

[08:37] <gfldex> Voldenet: that file is around for quite some time indeed. I don't like to use a REPL because those refuse to keep good records.

[08:48] *** abc50 left
[08:49] *** sena_kun joined
[09:38] <Voldenet> I hate repl too, prefer files, but I use dates with meaningful names instead

[09:39] <Voldenet> like `ttt.p6`, `x.raku` and so on

[09:39] <Voldenet> s/I use dates/I use files/

[09:49] *** linkable6 left
[09:49] *** evalable6 left
[09:49] *** linkable6 joined
[09:51] *** evalable6 joined
[10:47] *** derpydoo left
[10:53] *** Sgeo left
[10:54] *** Vyrus joined
[10:54] *** RonaldR34g4m left
[11:04] *** jpn joined
[11:11] *** jpn left
[11:21] *** phogg left
[11:21] *** phogg joined
[11:31] *** leedo left
[11:31] *** leedo joined
[11:32] *** jcallen left
[11:33] *** jcallen joined
[11:33] *** lucs left
[11:34] *** lucs joined
[11:50] <discord-raku-bot> <nemokosch> files are inconvenient tbh

[11:54] <Voldenet> depends on how you use them

[11:55] <Voldenet> i usually just do inotifywatch/run in loop and edit in separate window

[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:05] *** ab5tract joined
[12:50] <tbrowder__> fyi i finally found a module test error while using "mi6 test". a binary file had not been "cmod ++". i never saw a clue to that while it was covered up by a bash script. i may try changing test "run 'exe'" to "run 'raku exe'" and see what happens.

[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:05] *** evalable6 joined
[13:07] *** linkable6 joined
[13:58] *** sena_kun left
[14:00] *** sena_kun joined
[14:05] *** bigdata joined
[14:07] *** bigdata left
[14:24] <timo> gfldex: that $_ in add-index-entry is a little wild :D

[14:25] <timo> m: sub test() { INIT { $_ = 123; say "inited" }; END { say "DU at end is $_" }; say "inc DU from $_ to {++$_}"; }; test() for ^10;

[14:25] <camelia> rakudo-moar c7e6e5af8: OUTPUT: «inited␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 t…»

[14:25] <timo> m: sub test() { INIT { $_ = 123; say "inited" }; END { say "DU at end is $_" }; say "inc DU from $_ to {++$_}"; }; test() for ^4;

[14:25] <camelia> rakudo-moar c7e6e5af8: OUTPUT: «inited␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤DU at end is 124␤»

[14:26] <timo> is this safe to rely upon?

[14:27] *** teatwo left
[14:27] *** teatwo joined
[14:27] <timo> m: sub test() { INIT { $_ = 123; say "inited" }; END { say "DU at end is $_" }; say "inc DU from $_ to $(++$_)"; }; test() for ^4;

[14:27] <camelia> rakudo-moar c7e6e5af8: OUTPUT: «inited␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤inc DU from 123 to 124␤DU at end is 124␤»

[14:31] *** zapwai joined
[14:32] *** teatwo left
[14:32] *** teatwo joined
[14:33] *** teatwo left
[14:34] *** teatwo joined
[14:34] <tbrowder__> duh, the missing file cmd was "chmod +x" to make it executable. i usually do that first thing when creating such a file, but muscle memory failed me, again.

[14:50] <tbrowder__> so this works in the lives-ok {} test without an exectable file: "run 'raku', 'script'"

[14:53] <tbrowder__> but, if the script is to be installed, then it probably won't execute. i'll add a test to check executables for the x bit. no idea how to do that for Windows.

[14:59] <tbrowder__> better yet, in the test file, chmod +x each just before running its first run test

[15:03] *** dogbert11 left
[15:09] *** euandreh joined
[15:14] *** euandreh left
[15:20] <guifa> timo: that feels right.  But assuming that you have a $_ outside the INIT and END blocks (it would feel off if it weren't that way since $_ I think would only be in the higher scope if it were so referenced, but I could be wrong on that)

[15:25] <ugexe> you probably shouldn't modify other files inside tests

[15:26] <ugexe> that is relying on the test to ensure a valid state of your distribution

[15:27] <ugexe> that sentence is a bit ambiguous. rather, that is relying on the test to act as a sort of code-generation stage

[15:27] <ugexe> checking for the +x bit in the test is the correct thing to do

[15:49] *** euandreh joined
[15:56] *** zapwai left
[16:16] *** SmokeMachine left
[16:16] *** SmokeMachine joined
[16:24] *** raiph joined
[16:27] <gfldex> timo: I wasn't even sure that works. Raku++

[16:36] <timo> gfldex: is there some issue to track regarding how you're saying that hyper and Proc::Async don't work well together?

[16:37] <timo> afkbbl

[16:47] *** euandreh left
[16:51] <gfldex> timo: with a :degree highter 8 I get deadlocks.

[16:55] *** rf left
[16:55] *** euandreh joined
[16:55] <timo> does it get better if you increase the raku max threads env var?

[16:56] <timo> i wonder what causes that

[17:06] <timo> perf stat ~/raku/install/bin/rakudo -e '(^5000).hyper(:degree(32), :batch(4)).map({ my $p = run :in, :out, :!chomp, <xxd>; $p.in.put($_ xx 1000); $p.in.close; $p.out.slurp(:close) });'

[17:06] <timo> this seems to lock up here as well

[17:11] *** zapwai joined
[17:25] *** ab5tract left
[17:51] *** bisectable6 left
[17:53] *** bisectable6 joined
[18:00] *** reportable6 left
[18:00] *** bisectable6 left
[18:01] *** reportable6 joined
[18:02] *** bisectable6 joined
[18:16] <timo> gfldex: i rewrote it to use Proc::Async and it no longer hangs

[18:17] <Geth> ¦ problem-solving: finanalyst assigned to coke Issue POD6 to RakuDoc revision process https://github.com/Raku/problem-solving/issues/375

[18:19] <timo> perf stat ~/raku/install/bin/rakudo -e 'use v6.e.PREVIEW; (^5000).hyper(:degree(32), :batch(4)).map({ my $p = Proc::Async.new("xxd", :w); my $out; $p.stdout.tap({ $out ~= $_ }); my $prom = $p.start; await $p.say($_ xx 100);  $p.close-stdin; await $prom; $out });'

[18:20] <timo> unfortunately for such simple cases it's a bit verbose. much verboser than the "run :out, :in" variant

[18:24] <timo> :on-write(-> $blob { cur-promise .= then({ await $!proc.write($blob) }); }) # this is where the backtrace says the thread hangs, it goes straight into a sub await that first does my $*RAKUDO-AWAIT-BLOCKING := True; $*AWAITER.await($p)

[18:25] <timo> that's from core.c/Proc.pm6 in line 33

[18:44] *** lichtkind joined
[18:51] *** Xliff joined
[18:59] *** Sgeo joined
[19:10] *** euandreh left
[19:13] *** bisectable6 left
[19:15] *** bisectable6 joined
[20:05] *** jpn joined
[20:10] *** jpn left
[20:25] *** zapwai left
[21:15] *** mark22k left
[21:17] *** mark22k joined
[21:23] *** vrurg left
[21:23] *** derpydoo joined
[21:35] *** jpn joined
[21:39] *** sena_kun left
[21:39] *** jpn left
[21:56] *** derpydoo left
[21:56] *** vrurg joined
[22:17] *** bisectable6 left
[22:19] *** lichtkind left
[22:20] *** bisectable6 joined
[22:52] *** raiph left
[22:53] <tbrowder__> ugexe: good points, will do, thanks

[23:52] *** linkable6 left
[23:52] *** evalable6 left
[23:52] *** evalable6 joined
[23:55] *** linkable6 joined
