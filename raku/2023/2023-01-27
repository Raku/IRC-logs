[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:08] *** melezhik left
[00:35] <[Coke]> rf: I am guessing it's agressively cached at the moment.
[00:35] <rf> Yeah most likely, it's all good. I am about to make this typegraph look so good :D
[00:56] <rf> [Coke]: Can you take a look at the PR and see if it looks good? I can also make it use the colors for the light theme as well.
[01:04] *** xinming__ left
[01:06] *** ispyhumanfly joined
[01:06] *** xinming__ joined
[01:16] *** ispyhumanfly left
[01:29] *** sargassosea33 joined
[01:33] *** sargassosea33 left
[02:04] *** razetime joined
[02:14] *** ispyhumanfly joined
[02:17] *** jgaz left
[02:23] *** ispyhumanfly left
[02:30] *** nine left
[02:30] *** m_athias left
[02:30] *** ispyhumanfly joined
[02:30] *** nine joined
[02:31] *** m_athias joined
[02:35] *** ispyhumanfly left
[02:36] <tonyo> rf: zef is stricly on the install side, fez is on the distribute side.  so, maybe fez can eventually provide hints to zef via META or some configuration file.  that's a long time out if ever.  fez started as a means to get dists into an ecosystem with strict auth checking.  that ecosystem started as a means of mirroring tags from the META listing on github (the original ecosystem that panda was built
[02:36] <tonyo> for).  
[02:36] <tonyo> CPAN came along and then we lost the very manual process of looking at author's metas in the META list (by the end that didn't happen much) when new people submitted PRs.  i think the next iteration of fez takes over more than packaging and uploading.. doing more than a cursory once over of the META file, adding dependencies (lock files?), handling distribution to different ecosystems or an interface
[02:37] <tonyo> to do so,  no more shelling out tar/pax/git commands for bundling, probably some level of automation (thinking of yarn in this regard, just `fez <some command>` being made available via META/config settings), automated static docs, and probably more things along those lines
[02:39] <tonyo> ziprecruiter uses perl in production, i wrote all of the raley's POS log ETL to SAP HANA in perl5 too
[02:40] <tonyo> and then some of their statistics scripts are all written in p5
[02:56] *** ispyhumanfly joined
[03:10] *** ispyhumanfly left
[03:21] <rf> tonyo: Do you work for ziprecruiter still?
[03:21] *** rf left
[03:22] *** heartburn left
[03:23] *** heartburn joined
[03:24] *** ispyhumanfly joined
[03:28] *** Kernspin joined
[03:28] *** ispyhumanfly left
[03:35] <tonyo> i don't
[03:35] <tonyo> i work for a place called tatari in python mainly.  before that i worked for a failed startup and godaddy before that
[03:36] <tonyo> (in go for the startup and then on a perl to python conversion and C for godaddy)
[03:37] <tonyo> before that statistics and data modelling, and before that on the fixed wing fast bois (military jets)
[04:23] *** kybr left
[04:23] *** kybr joined
[04:49] *** jmcgnh left
[04:50] *** jmcgnh joined
[05:04] *** Homer_Simpson left
[05:18] *** ispyhumanfly joined
[05:26] *** ispyhumanfly left
[05:40] *** ispyhumanfly joined
[05:44] *** ispyhumanfly left
[05:46] *** cfa left
[05:52] *** codesections left
[05:56] *** ispyhumanfly joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:01] *** ispyhumanfly left
[07:01] *** linkable6 left
[07:01] *** evalable6 left
[07:02] *** linkable6 joined
[07:04] *** evalable6 joined
[07:06] *** ispyhumanfly joined
[07:13] *** ispyhumanfly left
[07:32] *** codesections joined
[07:38] *** heartburn left
[07:38] *** epony joined
[07:45] *** ispyhumanfly joined
[07:46] *** heartburn joined
[07:49] *** ispyhumanfly left
[08:00] *** hackyhacker joined
[08:04] *** ircuser left
[08:18] *** razetime left
[08:29] *** sarna left
[08:35] *** razetime joined
[08:59] *** sarna joined
[09:12] *** dakkar joined
[09:16] *** ispyhumanfly joined
[09:20] *** ispyhumanfly left
[09:49] *** codesections left
[09:52] *** abraxxa joined
[09:54] *** ab5tract joined
[09:56] *** abraxxa left
[09:57] *** abraxxa joined
[10:01] *** sena_kun joined
[10:15] *** linkable6 left
[10:15] *** jpn joined
[10:16] *** Geth left
[10:16] *** Geth joined
[10:17] *** linkable6 joined
[10:24] *** sena_kun left
[10:29] *** codesections joined
[10:39] *** MoC joined
[10:46] *** ispyhumanfly joined
[10:46] *** hackyhacker left
[10:53] *** lichtkind joined
[10:56] *** linkable6 left
[10:58] *** linkable6 joined
[10:59] *** ispyhumanfly left
[11:18] *** ispyhumanfly joined
[11:23] *** ispyhumanfly left
[11:24] <abraxxa> Just saw 'Perl 6' listed at https://msgpack.org
[11:24] <abraxxa> and no Raku
[11:32] <discord-raku-bot> <Nemokosch> first, it would be good to see if Data::MessagePack works reasonably well
[11:33] <discord-raku-bot> <Nemokosch> first, it would be good to see if Data::MessagePack works reasonably well
[11:33] <discord-raku-bot> <Nemokosch> because if it doesn't, maybe it's for the better that Raku "doesn't show up" üòÖ
[11:35] *** ispyhumanfly joined
[11:35] <discord-raku-bot> <Nemokosch> the author seems barely available and the module installation is broken - should there be an unbroken raku-community-modules version?
[11:36] <discord-raku-bot> <Nemokosch> (I don't really want to adopt it personally because I have no clues about msgpack)
[11:36] <discord-raku-bot> <Nemokosch> (but I'm willing to knock the issues and PR's down, given enough context)
[11:39] *** ispyhumanfly left
[11:46] *** abraxxa left
[11:52] *** ispyhumanfly joined
[11:57] *** ispyhumanfly left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:19] *** sena_kun joined
[12:25] *** phogg left
[12:25] *** ab5tract left
[12:37] *** nine left
[12:37] *** m_athias left
[12:37] *** nine joined
[12:37] *** m_athias joined
[13:08] *** ispyhumanfly joined
[13:09] *** MoC left
[13:09] *** MoC joined
[13:11] *** Kernspin left
[13:11] *** Kernspin joined
[13:17] *** jpn left
[13:18] *** MoC left
[13:23] *** rf joined
[13:24] <rf> Morning folks
[13:25] *** razetime left
[13:30] <rf> My Raku service with Humming-Bird is outperforming my natively compiled OCaml service what the heck
[13:32] *** ab5tract joined
[13:33] <El_Che> really?
[13:33] <El_Che> impressive
[13:36] <rf> Yeah this isn't really under heavy load though, maybe i'll have to do some simulations
[13:38] <El_Che> nevertheless
[13:38] <El_Che> it's a good place to start
[13:39] <sena_kun> m: say 4321;
[13:39] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´4321‚ê§¬ª
[13:39] <sena_kun> can camelia withstand sigsegvs?
[13:40] <rf> Buterflies are pretty resilient
[13:40] <sena_kun> m: say "AND JOIN $_" for 1...1000;
[13:40] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´AND JOIN 1‚ê§AND JOIN 2‚ê§AND JOIN 3‚ê§AND JOIN 4‚ê§AND JOIN 5‚ê§AND JOIN 6‚ê§AND JOIN 7‚ê§AND JOIN 8‚ê§AND JOIN 9‚ê§AND JOIN 10‚ê§AND JOIN 11‚ê§AND JOIN 12‚ê§AND JOIN 13‚ê§AND JOIN 14‚ê§AND JOIN 15‚ê§AND JOIN 16‚ê§AND JOIN 17‚ê§AND JOIN 18‚ê§AND JOIN‚Ä¶¬ª
[13:40] <sena_kun> m: say "AND JOIN $_" for 1...1000;
[13:40] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´AND JOIN 1‚ê§AND JOIN 2‚ê§AND JOIN 3‚ê§AND JOIN 4‚ê§AND JOIN 5‚ê§AND JOIN 6‚ê§AND JOIN 7‚ê§AND JOIN 8‚ê§AND JOIN 9‚ê§AND JOIN 10‚ê§AND JOIN 11‚ê§AND JOIN 12‚ê§AND JOIN 13‚ê§AND JOIN 14‚ê§AND JOIN 15‚ê§AND JOIN 16‚ê§AND JOIN 17‚ê§AND JOIN 18‚ê§AND JOIN‚Ä¶¬ª
[13:40] <sena_kun> m: say "AND JOIN $_" for 1...1000;
[13:40] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´AND JOIN 1‚ê§AND JOIN 2‚ê§AND JOIN 3‚ê§AND JOIN 4‚ê§AND JOIN 5‚ê§AND JOIN 6‚ê§AND JOIN 7‚ê§AND JOIN 8‚ê§AND JOIN 9‚ê§AND JOIN 10‚ê§AND JOIN 11‚ê§AND JOIN 12‚ê§AND JOIN 13‚ê§AND JOIN 14‚ê§AND JOIN 15‚ê§AND JOIN 16‚ê§AND JOIN 17‚ê§AND JOIN 18‚ê§AND JOIN‚Ä¶¬ª
[13:40] <sena_kun> hmm
[13:40] <sena_kun> guess I need to try a more fresh rakudo
[13:44] <rf> Did this sigsegv your machine?
[13:44] *** NemokoschKiwi joined
[13:44] <sena_kun> yes, but I had an older rakudo, like 2021 something, so will try with a fresh one
[13:45] *** NemokoschKiwi left
[13:46] <discord-raku-bot> <Nemokosch> El_Che: do you know/have something about Nix packages for Rakudo?
[13:47] <discord-raku-bot> <Nemokosch> glot.io is apparently pulling language compilers/runtimes from Nix
[13:48] <rf> Wondering how we feel about this for typegraphs on new doc site https://github.com/Raku/doc-website/pull/34
[13:49] <discord-raku-bot> <Nemokosch> yeah just put it to the raku-doc channel as well
[13:50] <discord-raku-bot> <Nemokosch> tbh the font is not my favorite but it's already better than it was, regarding the colors
[13:50] <sena_kun> rf, I like it
[13:51] <discord-raku-bot> <Nemokosch> it's not healthy if I just nag you into changing everything to my taste, lol
[13:58] <sena_kun> yes, on 2022.12 the code is stable and also executes noticeably faster. :)
[14:00] *** jpn joined
[14:00] <rf> I wonder how much the postfix for notation costs in terms of performance
[14:05] *** jpn left
[14:13] <sena_kun> ?
[14:13] <sena_kun> it should behave exactly the same as plain for ... I hope
[14:14] <sena_kun> what
[14:15] <sena_kun> why is it like 10 times slower?
[14:15] <sena_kun> shouldn't it be a sugar?
[14:16] <sena_kun> oh no, lol
[14:16] <sena_kun> typed 1_500_00 instead of 1_500_000 in the prefix form, so it indeed was 10 times faster. XD
[14:17] <sena_kun> I believe it's a sugar, or it has to be if it's not, so the performance would be the same
[14:22] <discord-raku-bot> <Nemokosch> oh didn't notice the look at first
[14:23] <discord-raku-bot> <Nemokosch> tbh this looks like World/Actions stuff, RakuAST should probably bring a better way, my 2 cents
[14:23] <discord-raku-bot> <Nemokosch> "better" as in more transparent
[14:24] <rf> sena_kun: Lol yeah I was hoping it would be identical
[14:30] <discord-raku-bot> <Nemokosch> is there something like .^can but for roles rather than classes?
[14:31] <discord-raku-bot> <Nemokosch> is there something like .^can but for roles rather than classes?
[14:32] <sena_kun> remind me if can is about calling a method or?
[14:33] <sena_kun> aha, I see
[14:35] <sena_kun> the best you can do is maybe grep on `^methods`
[14:37] <sena_kun> if you want multis, refer to the multis table
[14:37] <discord-raku-bot> <Nemokosch> this is for pulling the candidate that would be invoked
[14:37] <discord-raku-bot> <Nemokosch> maybe I should just pun the role in that case?
[14:38] <discord-raku-bot> <Nemokosch> maybe I should just pun the role in that case?
[14:38] <sena_kun> that's one option, yes
[14:39] <sena_kun> punning roles is heavy though, so it depends on the use-case you have
[14:42] <discord-raku-bot> <Nemokosch> it's simply for inspection. I'm using CoreHackers::Sourcery and it broke down when the first argument of a method lookup was Positional itself
[14:42] <sena_kun> then I'd pun
[14:47] <discord-raku-bot> <Nemokosch> you know, I'm still a bit worried about this. Positional.isa(Cool) may be different from Positional.new.isa(Cool), in it?
[14:47] <discord-raku-bot> <Nemokosch> Actually I'm not certain how the former works under the hood
[14:52] <ugexe> m: role Foo { proto method bar(|) {*}; multi method bar($a) { }; multi method bar(:$a) { }; }; say Foo.new.^find_method("bar").candidates
[14:52] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´(bar bar)‚ê§¬ª
[14:56] <discord-raku-bot> <Nemokosch> m: role Foo { proto method bar(|) {*}; multi method bar($a) { }; multi method bar(:$a) { }; }; say Foo.bar(1)
[14:56] <discord-raku-bot> <Nemokosch> does it run like an instance would? It did give Nil
[14:57] <discord-raku-bot> <Nemokosch> There is some difference between roles and classes but maybe role type instances are like class type instances would?
[15:02] *** jpn joined
[15:05] *** sena_kun left
[15:23] *** jgaz joined
[15:31] *** cfa joined
[15:41] *** sena_kun joined
[15:52] <cfa> üëã
[15:53] <lizmat> there is no such thing as an instantiated role
[15:54] <lizmat> what happens is that if you try to instantiate a role, an anonymous class is created in which the role is consumed, and *that* is instantiated
[15:54] <lizmat> this process is referred to as "role punning"
[15:55] <discord-raku-bot> <Nemokosch> what happens if I don't try to instantiate it, just use it like a type object?
[15:55] <lizmat> m: role A { }; dd A.^name
[15:55] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´"A"‚ê§¬ª
[15:55] <lizmat> m: role A { }; dd A.HOW.^name
[15:55] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´"Perl6::Metamodel::ParametricRoleGroupHOW"‚ê§¬ª
[15:55] <lizmat> you get a rold
[15:56] <lizmat> *role  :-)
[15:56] <discord-raku-bot> <Nemokosch> for context: I'm trying to compare Positional ~~ Cool and Positional.isa(Cool)
[15:56] <lizmat> roles are objects like everything in Raku
[15:56] <discord-raku-bot> <Nemokosch> the former returns True but the False value of the latter seems more suitable
[15:59] <Voldenet> `Positional ~~ Cool` is weird but
[15:59] <Voldenet> m: say (role :: {}) ~~ Cool
[15:59] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´True‚ê§¬ª
[15:59] <Voldenet> apparently all roles are pretty cool
[16:00] <cfa> üï∂Ô∏è
[16:01] <lizmat> this feels like some implementation detail seeping out
[16:06] *** abraxxa joined
[16:08] <discord-raku-bot> <Nemokosch> yes to all of the messages üòÑ
[16:09] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/commit/0035ddb46de48be17492c4a11be3d4070b30077f
[16:09] <discord-raku-bot> <Nemokosch> probably this makes them Cool - they "pretend to be Cool"
[16:10] <Voldenet> according to https://docs.raku.org/routine/ACCEPTS#(Mu)_method_ACCEPTS this should probably return False
[16:11] <Voldenet> since roles are (Mu)
[16:12] <Voldenet> m: sub use-cool($c) { $c ~~ Cool ?? $c.abs !! -1 }; for (role :: {}, role :: {}.new, "", 42) { CATCH { default { ";/".say } }; $_.&use-cool.say }
[16:12] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´;/‚ê§-1‚ê§0‚ê§42‚ê§¬ª
[16:12] *** abraxxa left
[16:13] *** abraxxa joined
[16:18] <discord-raku-bot> <Nemokosch> I was thinking if smartmatching should rather use .^isa
[16:18] <discord-raku-bot> <Nemokosch> on types, that is
[16:20] <tonyo> where can i read about rakuast?
[16:21] <tonyo> regarding progress
[16:22] *** razetime joined
[16:23] *** abraxxa left
[16:25] <lizmat> closest thing is the #raku-dev channel and the weekly atm
[16:29] <tonyo> ty lizmat 
[16:31] <Voldenet> the above makes me wonder whether there exists something like "Type" type
[16:33] <discord-raku-bot> <Nemokosch> maybe in the metamodel?
[16:35] <tonyo> Voldenet: in what sense?
[16:37] <Voldenet> so that `sub use-type($t) { $t ~~ Type }; use-type(Any) eqv True; use-type("whatever") eqv False`
[16:38] <Voldenet> and `my Any $x; use-type($x) eqv True`, because $x has Type assigned to in by default
[16:38] <Voldenet> s/to in/to it/
[16:39] <Voldenet> m: sub use-type($t) { $t ~~ Any:U }; say use-type(Any) eqv True; say use-type("whatever") eqv False
[16:39] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´True‚ê§True‚ê§¬ª
[16:40] <Voldenet> This makes sense as long as everyone uses :D on every type
[16:41] *** Xliff left
[16:42] <tonyo> m: "whatever".^mro.say
[16:42] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´((Str) (Cool) (Any) (Mu))‚ê§¬ª
[16:48] *** jpn left
[16:49] <Voldenet> Still, it would be nice to have something that would significate difference between `my $x; use-type($x)` and `use-type(Any)`
[16:49] <discord-raku-bot> <Nemokosch> What is the difference?
[16:50] *** jpn joined
[16:50] <Voldenet> Currently none, but in the first case I've "forgotten" to assign a value, in the latter the type was passed :)
[16:55] *** jpn left
[16:57] *** jpn joined
[17:02] *** jpn left
[17:03] <discord-raku-bot> <Nemokosch> don't we end up with the usual "type objects as missing values" trauma, then?
[17:03] <discord-raku-bot> <Nemokosch> I don't necessarily like that but IF we do accept that, the rest follows, no?
[17:12] <Voldenet> not necessarily: Any ~~ Any:T, Any ~~ Any:U, (my $x) !~~ Any:T, (my $x) ~~ Any:U
[17:13] <tonyo> i don't mind it too much considering sub sigs can spec :D or :U
[17:13] *** Bocaneri joined
[17:13] <tonyo> m: sub say-x(Int:D $x) { dd $x; };  say-x(50);  say-x(Int);
[17:13] <camelia> rakudo-moar c87544fad: OUTPUT: ¬´50‚ê§Parameter '$x' of routine 'say-x' must be an object instance of type‚ê§'Int', not a type object of type 'Int'.  Did you forget a '.new'?‚ê§  in sub say-x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[17:13] *** Bocaneri is now known as Guest5836
[17:14] <discord-raku-bot> <Nemokosch> oh this turned completely unreadable on discord...
[17:14] <Voldenet> right, `Any ~~ Any:T, Any ~~ Any:U, (my $x) !~~ Any:T, (my $x) ~~ Any:U`
[17:14] <discord-raku-bot> <Nemokosch> thank you
[17:14] <discord-raku-bot> <Nemokosch> I'm not happy that there is both :T and :U, it's a permanent source of confusion in my opinion
[17:15] <Voldenet> in any case, proper type parameter could be treated a bit differently than the default value
[17:15] <discord-raku-bot> <Nemokosch> sometimes these two are distinguished on the level of syntax
[17:16] *** Sauvin left
[17:28] *** phogg joined
[17:31] *** dakkar left
[17:33] *** Guest5836 is now known as Sauvin
[17:34] *** jpn joined
[17:37] *** MoC joined
[17:39] *** razetime left
[17:39] *** phogg left
[17:39] *** phogg joined
[17:47] *** jpn_ joined
[17:48] *** jpn left
[17:49] <tonyo> rf: in what capacity are you interested in enhancing fez
[17:54] *** jpn_ left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:17] *** jpn joined
[18:46] <rf> tonyo: I'd like zef to validate META6.json files, and also provide better error messages when you run `zef test`
[18:48] <discord-raku-bot> <Nemokosch> zef is not the same as fez, though
[18:49] <discord-raku-bot> <Nemokosch> tonyo is the author of fez
[18:52] <ugexe> why should zef validate META6.json files instead of an authoring tool?
[18:52] <ugexe> in other words: why would an ecosystem allow distributions with invalid meta data?
[18:53] <ugexe> it only needs to be validated by authoring related actions, so authoring tools would be more appropriate for that
[18:55] <ugexe> authoring tools also have the advantage of not needing to be dependency free
[18:59] *** jpn left
[19:00] <ugexe> as for error messages... there isn't really anything zef can add to your test output. you can run `zef test . --debug` to get the full output, but I'm not sure what information it could add
[19:00] <ugexe> otherwise the tests themselves need to be more helpful
[19:02] <ugexe> there is also Test::META or some such that you can add to your own tests to validate your meta data, although again im not sure how fair it is to make all users who download your distribution to validate that file
[19:03] <ugexe> i'd have a xt/validate-meta.rakutest that just has like `use Test::META; test-meta-or-whatever()` and invoke via `raku xt/validate-meta-rakutest` (in xt/ so regular users don't end up running it for no reason)
[19:06] <discord-raku-bot> <p6steve> ugexe: thanks for you steer on Distribution::Builder:: ... I will look at these docs too ... does it make sense for me to make a simple Distribution::Builder::Rust  or Distribution::Builder::Cargo (?) for cargo build
[19:12] <ugexe> i'm not sure... thats a bit different because, unlike with the CMake one which keeps its file within the distribution (I think at least), installing with cargo will install files in other places such that uninstalling a module that used e.g. Distribution::Builder::Cargo wouldn't remove those files when uninstalled
[19:14] *** jpn joined
[19:15] <ugexe> so it could make sense, although i'm skeptical 
[19:16] <ugexe> rf: as far as META6 validation goes i made a prototype web service that validates via OpenAPI spec (such that other programs could consume that spec and validate with the same rules) - https://github.com/ugexe/Raku-App--OpenAPI--META6Validator
[19:16] <ugexe> although note it just validates a few basic things, its just a PoC
[19:17] <ugexe> but i kind of like that idea because then the spec file can be maintained by the community, and anything with an OpenAPI library could validate it against the same rules as everyone else
[19:18] <ugexe> on the other hand i dont know if OpenAPI is capable of expressing some of our more complex situations in an elegant way
[19:19] <rf> Yeah sorry I got confused with zef and fez
[19:23] <lizmat> zef is for download, fez is for upload  :-)
[19:27] *** jpn left
[19:28] <discord-raku-bot> <Nemokosch> for fez, it sounds desirable to check the META6; I'd hope that would even improve the standardisation of the META6 file
[19:30] <discord-raku-bot> <p6steve> well I am less knowledgeable about Rust/Cargo than about Raku/zef ;-), but I think that the story is that cargo build will download and place the dependencies/crates in my dan/src/Cargo.toml into somewhere like <user directory>/.cargo/registry. otherwise, the lib.so will go into dan/target/debug/ ... so would it be feasible, reasonable to have Distribution::Builder::Cargo warn that it will install 3rd party cargo
[19:30] <discord-raku-bot> crates (with a y/N?) and then only rm rf dan on uninstall maybe?
[19:30] *** jpn joined
[19:33] <rf> .tell melezhik I added some native stuff to Distribution::Builder::Cmake if you want to test it with SparrowCI
[19:33] <tellable6> rf, I'll pass your message to melezhik
[19:54] <rf> Is there an easy way to reduce over a binary operation?
[19:54] <rf> Like @list.reduce(&+);
[19:54] <rf> Obviously I could use sum in that example
[19:55] <lizmat> not sure why that wouldn't work, they're infixes like any other ?
[19:55] <discord-raku-bot> <p6steve> m: my @a=(1,2,3); [+] @a; .say;
[19:56] <discord-raku-bot> <p6steve> m: say (1..4).reduce(&infix:<+>);
[19:56] <discord-raku-bot> <p6steve> m: say [+] 1, 2, 3;
[19:58] <rf> m: ([o] [-> $a { $a + 1 }, -> $a { $a + 1 }])(2).say;
[19:58] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´4‚ê§¬ª
[19:58] <rf> Very nice
[20:01] <discord-raku-bot> <Nemokosch> how did this work...
[20:01] <rf> Monoids
[20:03] <rf> If you have n functions that take the same type they return you can compose them all such that make a new function
[20:03] <rf> hence [o]
[20:06] *** MoC left
[20:11] <discord-raku-bot> <p6steve> m: (o)(2).say;
[20:11] <discord-raku-bot> <p6steve> omg
[20:11] <lizmat> m: (o)(2).say
[20:11] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    o used at line 1‚ê§‚ê§¬ª
[20:11] <lizmat> m: [o](2).say
[20:11] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´Cannot resolve caller infix:<o>(Int:D); none of these signatures matches:‚ê§    ()‚ê§    (&f)‚ê§    (&f, &g --> Block:D)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[20:13] <tonyo> m: [+] [1,2,3,4]
[20:13] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of [+] in sink context‚ê§    at <tmp>:1‚ê§    ------> <BOL>‚èè[+] [1,2,3,4]‚ê§¬ª
[20:13] <tonyo> m: say [+] [1,2,3,4]
[20:13] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´10‚ê§¬ª
[20:13] <discord-raku-bot> <p6steve> m: (o)(2).say;
[20:13] <tonyo> m: (o)(2).say
[20:13] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    o used at line 1‚ê§‚ê§¬ª
[20:15] <rf> m: ({ $^a + 100 } o { $^a + 12 })(10);
[20:15] <camelia> rakudo-moar 6846bc1b6: ( no output )
[20:15] <rf> m: ({ $^a + 100 } o { $^a + 12 })(10).say;
[20:15] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´122‚ê§¬ª
[20:17] *** Kernspin left
[20:17] <rf> m: ({ ({ $_ + 100})($^a) + 12 })(10).say
[20:17] <camelia> rakudo-moar 6846bc1b6: OUTPUT: ¬´122‚ê§¬ª
[20:17] <rf> Equivalents
[20:21] *** Kernspin joined
[20:22] <discord-raku-bot> <p6steve> hehe
[20:28] <discord-raku-bot> <Nemokosch> oh gotcha
[20:28] <discord-raku-bot> <Nemokosch> lol
[20:29] *** Kernspin left
[20:29] *** Kernspin joined
[20:40] *** jpn left
[21:00] <discord-raku-bot> <p6steve> m: ({ ({ $^a + 100})($^a) + 12 })(10).say
[21:01] <discord-raku-bot> <p6steve> (just reminding self that $^a is block specific)
[21:13] *** melezhik joined
[21:13] <melezhik> .
[21:13] <tellable6> 2023-01-27T19:33:26Z #raku <rf> melezhik I added some native stuff to Distribution::Builder::Cmake if you want to test it with SparrowCI
[21:14] <melezhik> tell rf: thanks , I rerun example build the same issue
[21:15] <melezhik> rf: ^^
[21:16] <rf> Hmm, can you link build?
[21:19] <melezhik> https://ci.sparrowhub.io/report/2784
[21:19] <melezhik> I am not sure though if this uses the latest version of the module
[21:20] <melezhik> > Installing: Distribution::Builder::Cmake:ver<0.0.4>:auth<zef:rawleyfowler>
[21:20] <melezhik> This is what is says
[21:20] <melezhik> Looks like this is the latest
[21:21] <melezhik> And I merge you commits for example repo as well
[21:27] <tonyo> wrote a little markdown docs generator for inline comments starting with #`(<|{|(|...)md 
[21:35] <rf> melezhik: Hmm I am wondering the C compiler on this image
[21:37] *** melezhik left
[21:45] *** melezhik joined
[21:48] <melezhik> rf: https://packages.debian.org/sid/build-essential
[21:49] <melezhik> If this is not enough which cli command tells the compiler version ?
[21:49] <rf> go which cc
[21:49] <melezhik> This is  Debian
[21:49] <rf> "which cc"
[21:49] <melezhik> Ok
[21:49] <melezhik> Will do
[21:50] *** jpn joined
[21:51] <melezhik> Actually also added gcc --version
[21:52] <melezhik> Will see
[21:54] *** melezhik left
[21:55] *** jgaz left
[21:55] *** jpn left
[21:57] *** melezhik joined
[21:57] <melezhik> rf: https://ci.sparrowhub.io/report/2786
[21:59] <rf> Can you try adding clang to build install
[21:59] <rf> Instead of GCC
[21:59] *** melezhik_ joined
[21:59] *** melezhik left
[21:59] <melezhik_> What should I do ? I mean install another dep package or what ?
[22:00] <melezhik_> apt-get install clang ?
[22:01] <rf> Yes
[22:01] *** jpn joined
[22:02] *** jpn left
[22:04] *** melezhik_ left
[22:06] *** jpn joined
[22:11] *** jpn left
[22:11] *** jpn joined
[22:12] *** jpn left
[22:15] <rf> Hmm I wonder, melezhik: your server might be running arm?
[22:21] *** jpn joined
[22:42] *** cfa left
[22:44] *** ab5tract left
[22:48] *** ab5tract joined
[22:54] *** squashable6 left
[22:57] *** squashable6 joined
[23:07] *** melezhik joined
[23:07] <melezhik> rf - now clang is installed, but I am not sure it's used in build process - https://ci.sparrowhub.io/report/2789
[23:09] *** sena_kun left
[23:10] <rf> melezhik: What architecture is your server?
[23:10] <melezhik> this is debian docker runs on hetzner VM
[23:11] <melezhik> let me get the info
[23:11] <melezhik> uname -a
[23:11] <melezhik> Linux sparrow01 5.10.0-19-amd64 #1 SMP Debian 5.10.149-2 (2022-10-21) x86_64 GNU/Linux
[23:12] <rf> Hmm not sure then
[23:12] <rf> It builds fine on all 3 of my machines
[23:15] <melezhik> yeah, I don't see in a build log that clang is picked
[23:15] <melezhik> maybe I don't need to install build-essential?
[23:15] <melezhik> just clang?
[23:16] <melezhik> and ... which rakudo version you test against?
[23:20] <ugexe> https://github.com/rakudo/rakudo/blob/f2031ec22499355ff08d19b32564a2f42cdd9602/lib/NativeCall.rakumod#L236-L256
[23:20] <ugexe> thats where your error is happening fwiw
[23:20] *** ab5tract left
[23:20] <ugexe> i dunno what to make of it, but maybe someone else will
[23:21] <discord-raku-bot> <Nemokosch> my take on Data::MessagePack https://github.com/pierre-vigier/Perl6-Data-MessagePack/issues/19
[23:24] *** melezhik left
[23:26] <rf> Hmm seems it only uses GCC
[23:27] <rf> .tell melezhik It only seems to support G++, so that is fine. I am using latest Rakudo.
[23:27] <tellable6> rf, I'll pass your message to melezhik
