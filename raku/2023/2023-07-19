[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:48] *** kotrcka left
[01:08] *** razetime joined
[01:17] <tonyo> it's not about saving keystrokes but about solving the problem, regex is meant to match patterns and it should put those functions before all else..the regex /foobar/ or /dead horse/ is just as easily read as /'foobar'/ or /'dead horse'/ and cleaner 
[01:33] *** deoac left
[01:48] *** kjp_ left
[01:53] *** kjp joined
[02:52] *** Aedil left
[02:54] *** Aedil joined
[02:57] *** Aedil left
[02:57] *** Aedil joined
[02:59] *** Aedil left
[02:59] *** Aedil_ joined
[03:59] *** linkable6 left
[03:59] *** evalable6 left
[04:00] *** evalable6 joined
[04:02] *** linkable6 joined
[04:14] *** slu left
[04:14] *** razetime left
[04:15] *** slu joined
[04:19] *** Aedil_ is now known as Aedil
[04:26] *** squashable6 left
[04:27] *** squashable6 joined
[05:05] *** razetime joined
[05:20] *** jpn joined
[05:26] *** jpn left
[05:40] *** sacomo left
[05:41] *** siavash joined
[05:48] *** sacomo joined
[05:53] *** sacomo left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** squashable6 left
[07:02] *** bloatable6 left
[07:02] *** committable6 left
[07:02] *** greppable6 left
[07:02] *** shareable6 left
[07:02] *** tellable6 left
[07:02] *** sourceable6 left
[07:02] *** coverable6 left
[07:02] *** reportable6 left
[07:02] *** benchable6 left
[07:02] *** quotable6 left
[07:02] *** nativecallable6 left
[07:02] *** statisfiable6 left
[07:02] *** notable6 left
[07:02] *** linkable6 left
[07:02] *** evalable6 left
[07:02] *** bisectable6 left
[07:02] *** releasable6 left
[07:02] *** unicodable6 left
[07:03] *** greppable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** quotable6 joined
[07:03] *** linkable6 joined
[07:03] *** statisfiable6 joined
[07:03] *** benchable6 joined
[07:03] *** bisectable6 joined
[07:03] *** unicodable6 joined
[07:04] *** sourceable6 joined
[07:04] *** squashable6 joined
[07:04] *** shareable6 joined
[07:04] *** releasable6 joined
[07:04] *** bloatable6 joined
[07:04] *** notable6 joined
[07:04] *** committable6 joined
[07:04] *** reportable6 joined
[07:05] *** coverable6 joined
[07:05] *** evalable6 joined
[07:05] *** tellable6 joined
[07:09] *** jpn joined
[07:43] <discord-raku-bot> <librasteve> m: my $s = 'dead horse'; say $s ~~ /horse/
[07:43] <discord-raku-bot> <Raku eval>  ÔΩ¢horseÔΩ£ 
[07:43] <discord-raku-bot> <librasteve> m: my $s = 'dead horse'; say $s ~~ /d horse/
[07:43] <discord-raku-bot> <Raku eval>  Nil  Potential difficulties:     Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)     at /home/glot/main.raku:1     ------> my $s = 'dead horse'; say $s ~~ /d‚èè horse/ 
[07:43] <discord-raku-bot> <librasteve> m: my $s = 'dead horse'; say $s ~~ m:s/d horse/
[07:43] <discord-raku-bot> <Raku eval>  ÔΩ¢d horseÔΩ£ 
[07:43] <discord-raku-bot> <librasteve> m: my $s = 'dead horse'; say $s ~~ /'d horse'/
[07:43] <discord-raku-bot> <Raku eval>  ÔΩ¢d horseÔΩ£ 
[07:46] <discord-raku-bot> <librasteve> ^^ just right imo
[07:52] *** jpn left
[07:53] <discord-raku-bot> <nemokosch> well what can I do about it
[07:54] <discord-raku-bot> <nemokosch> I heavily disagree that it's cleaner or as easily read
[07:54] *** jpn joined
[07:55] *** sena_kun joined
[07:55] <discord-raku-bot> <nemokosch> it's not cleaner because it mixes instructions and literals
[07:56] <discord-raku-bot> <nemokosch> and if that doesn't make it harder to read already, significant whitespace also means that you cannot format it
[07:58] <discord-raku-bot> <nemokosch> I think these are fairly concrete arguments, on the other hand I only see this vague notion that it somehow stands in the way of solving the problem - how?
[08:00] *** jpn left
[08:01] *** jpn joined
[08:02] <discord-raku-bot> <nemokosch> (also, /'some literal'/ really doesn't even require a regex)
[08:09] *** dakkar joined
[08:44] *** Sgeo left
[08:50] *** razetime left
[09:10] *** razetime joined
[09:14] *** sena_kun left
[09:24] *** jpn left
[09:25] *** jpn left
[09:29] *** jpn joined
[10:29] *** quotable6 left
[10:29] *** nativecallable6 left
[10:29] *** bloatable6 left
[10:29] *** unicodable6 left
[10:29] *** greppable6 left
[10:29] *** releasable6 left
[10:29] *** shareable6 left
[10:29] *** squashable6 left
[10:29] *** benchable6 left
[10:29] *** linkable6 left
[10:29] *** notable6 left
[10:29] *** bisectable6 left
[10:29] *** reportable6 left
[10:29] *** tellable6 left
[10:29] *** statisfiable6 left
[10:29] *** coverable6 left
[10:29] *** evalable6 left
[10:29] *** sourceable6 left
[10:29] *** committable6 left
[10:30] *** quotable6 joined
[10:30] *** greppable6 joined
[10:30] *** sourceable6 joined
[10:30] *** linkable6 joined
[10:30] *** bloatable6 joined
[10:30] *** tellable6 joined
[10:30] *** notable6 joined
[10:31] *** unicodable6 joined
[10:31] *** committable6 joined
[10:31] *** releasable6 joined
[10:31] *** evalable6 joined
[10:31] *** nativecallable6 joined
[10:31] *** coverable6 joined
[10:32] *** shareable6 joined
[10:32] *** bisectable6 joined
[10:32] *** squashable6 joined
[10:32] *** benchable6 joined
[10:32] *** statisfiable6 joined
[10:32] *** reportable6 joined
[10:35] <tbrowder__> late to the dance, but if i were looking for "dead horse" i  would use ~~ /dead \h* horse/
[10:37] <tbrowder__> m: say "dead horse" ~~ /dead \h* horse/
[10:37] <camelia> rakudo-moar 9f8668109: OUTPUT: ¬´ÔΩ¢dead horseÔΩ£‚ê§¬ª
[10:53] *** nine left
[10:53] *** nine joined
[11:13] <tonyo> they're concrete arguments if you think only you can be correct, for sure
[11:14] <tonyo> and i didn't say anything stands in the way of a problem so that's quite a few miles or kms out of context
[11:25] *** sivoais left
[11:56] *** sivoais joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:03] *** jpn left
[12:16] *** jpn joined
[12:22] *** jpn left
[12:27] *** siavash left
[12:28] *** jpn joined
[12:35] *** sivoais left
[12:40] *** jpn left
[12:41] *** jpn joined
[12:47] *** sivoais joined
[13:29] <discord-raku-bot> <antononcube> I have a design or naming question. Given that "LLM" stands for "Large Language Model", which of these package / module names you find more / most "telling" for a package with the mission statement "Raku package for functions and function objects to access, interact, and utilize LLMs" :  0) LLM  1) LLM::Functions 2) LLM::Functors 3) LLM::Framework 4) LLM::Interlocutors
[13:30] *** raku_guest joined
[13:33] <discord-raku-bot> <nemokosch> Well you didn't say anything in particular
[13:34] <discord-raku-bot> <nemokosch> I assumed "it's about solving the problem" and "regex (...) should put those functions before all else" meant to communicate some argument
[13:35] <discord-raku-bot> <nemokosch> Maybe that was presumptuous on my side but I'd say in an argument that's actually the good faith attitude
[13:38] <discord-raku-bot> <nemokosch> Anyway, it's tiresome that some ad-hominem red herring gets thrown in, as if there wasn't an objectively measurable difference.
[13:40] *** xinming_ left
[13:42] *** xinming_ joined
[13:52] <tonyo> agreed, having to deny saying things i didn't say gets tiresome
[13:52] <tonyo> if you have a framework the 3, otherwise 0 is what i'd look at 
[13:57] <discord-raku-bot> <nemokosch> then I guess we can agree that it's all about solving problems and tools that don't solve the problems are worthless
[13:58] <discord-raku-bot> <nemokosch> one got to know why I prefer quoted literals and not really why you prefer unquoted literals, that's all what happened
[13:59] <discord-raku-bot> <nemokosch> I really can't see what's the need for looking for hooks to cling something personal there
[13:59] *** razetime left
[14:00] <tonyo> it was asserted that it's possibly uncontended that people prefer raku regex to PCRE.  i stated i prefer PCRE syntax for the most part because i don't like quoted literals in the regex. not sure we're arguing about what my preferences are.
[14:00] <tonyo> or why it's even really a discussion, as uninteresting as it is
[14:04] <lizmat> and uninteresting it is....   
[14:10] *** razetime joined
[14:12] <discord-raku-bot> <nemokosch> well, then you basically reassured my point. I gave a reason that might convince someone that Raku regexes are better - you said that you prefer otherwise, because.
[14:12] <discord-raku-bot> <nemokosch> why would that make arguments that people can just evaluate and consider, invalid
[14:15] <discord-raku-bot> <nemokosch> anyway, we could have spared this if you just downright said "I fancy it more and that's that" ü§∑‚Äç‚ôÇÔ∏è
[14:17] <lizmat> *sigh*
[14:18] *** raku_guest left
[14:24] <Voldenet> I prefer pcre syntax only because I've been using it for two decades and tons of languages adopted very similar syntax
[14:25] *** jpn left
[14:33] *** jpn joined
[14:33] <discord-raku-bot> <nemokosch> at the end of the day, to be able to use whichever one syntax and transform it into as many variations as possible, is a win either way
[14:34] <[Coke]> anything other than coding stopping us from adding a :pcre to support the syntax? (as opposed to linking to a library)
[14:36] <discord-raku-bot> <nemokosch> imo the fact that the Raku syntax kind of stands out can even be a benefit for initial learning (less "which one was it" moments about the minuscule details) but once you only use one for some time, it doesn't matter as much anymore I guess
[14:38] *** jpn left
[14:38] <[Coke]> in the future, could we have a PCRE syntax RE compiled with rakuast and then rendered as a raku RE? (or vice versa)
[14:56] *** merp left
[14:58] *** deoac joined
[15:05] <tonyo> [Coke]: it'd be easy enough to hook up a PCRE library and grammar it
[15:05] <tonyo> s/grammar/slang
[15:06] <tonyo> or should it be: s/'grammar'/slang
[15:24] *** jpn joined
[15:29] <tonyo> isn't there a :P5 in the regex?
[15:30] *** jpn left
[15:30] <tonyo> m: say so 'hello world' ~~ m:P5{o w}
[15:30] <camelia> rakudo-moar 9f8668109: OUTPUT: ¬´True‚ê§¬ª
[15:33] *** merp joined
[15:40] <SmokeMachine> m: use v6.e.PREVIEW; say ‚Äú42.is-prime‚Äù.AST
[15:40] <camelia> rakudo-moar 9f8668109: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::ApplyPostfix.new(‚ê§      operand => RakuAST::IntLiteral.new(42),‚ê§      postfix => RakuAST::Call::Method.new(‚ê§        name => RakuAST::Name.from-ident‚Ä¶¬ª
[15:41] <SmokeMachine> m: use v6.e.PREVIEW; say ‚Äú42.^name‚Äù.AST
[15:41] <camelia> rakudo-moar 9f8668109: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::ApplyPostfix.new(‚ê§      operand => RakuAST::IntLiteral.new(42),‚ê§      postfix => RakuAST::Call::MetaMethod.new(‚ê§        name => "name"‚ê§      )‚ê§ ‚Ä¶¬ª
[15:51] *** Sgeo joined
[15:57] *** deoac left
[16:01] *** jpn joined
[16:10] *** jpn left
[16:10] *** m_athias left
[16:10] *** nine left
[16:10] *** nine joined
[16:11] *** m_athias joined
[16:31] *** jpn joined
[16:35] *** dakkar left
[16:44] <Voldenet> well, on top of :P5 there's inline perl
[16:45] <Voldenet> m: EVAL q!print ('hello world' =~ m{o w}!, :lang<Perl5>
[16:45] <camelia> rakudo-moar 5fc5c32eb: OUTPUT: ¬´Could not find Inline::Perl5 in:‚ê§    /home/camelia/.raku‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/core‚ê§    CompUnit::Repository::Abs‚Ä¶¬ª
[16:45] *** jpn left
[16:46] <lizmat> Well, I guess that could be one approach: :P5 to call into Inline::Perl5 somehow
[16:46] <lizmat> advantage would be that the P5 regex would always be compatible with the Perl version that is being used :-)
[16:47] <lizmat> another approach could be to drop support for :P5 altogether :-)
[16:48] <lizmat> and make a more general "pluggable" regex approach
[16:48] <Voldenet> I think having the syntax for :P5 is better than using perl interpreter, but considering the maintenance cost pluggable regex (with Inline::Perl5) sounds better
[16:50] <Voldenet> it makes more sense on nqp-js, where js regexes are better fit
[16:52] *** jpn joined
[16:53] *** razetime left
[17:16] *** vrurg left
[17:16] *** vrurg joined
[17:22] *** vrurg left
[17:24] <discord-raku-bot> <nemokosch> also, should the "P5 regex" just be a different syntax for the same behavior or different behavior altogether?
[17:24] <discord-raku-bot> <nemokosch> I mean capture groups for example - do they nest and turn into arrays for quantifiers?
[17:27] <tonyo> m: say 'abcdefghijk' ~~ m:P5{(.(.))};
[17:27] <camelia> rakudo-moar 5fc5c32eb: OUTPUT: ¬´ÔΩ¢abÔΩ£‚ê§ 0 => ÔΩ¢abÔΩ£‚ê§ 1 => ÔΩ¢bÔΩ£‚ê§¬ª
[17:27] <tonyo> looks like they do
[17:27] <discord-raku-bot> <nemokosch> hm, fair enough
[17:28] <discord-raku-bot> <nemokosch> actually, what I don't know is how it works in Perl üòÖ
[17:46] *** sena_kun joined
[17:47] <tonyo> you'd get ['ab', 'a', 'cd', 'd', 'ef', 'f', ...]
[17:49] <tonyo> m: say 'abcdefghijk' ~~ m:P5:g{(.(.))};
[17:49] <camelia> rakudo-moar 5fc5c32eb: OUTPUT: ¬´(ÔΩ¢abÔΩ£‚ê§ 0 => ÔΩ¢abÔΩ£‚ê§ 1 => ÔΩ¢bÔΩ£ ÔΩ¢cdÔΩ£‚ê§ 0 => ÔΩ¢cdÔΩ£‚ê§ 1 => ÔΩ¢dÔΩ£ ÔΩ¢efÔΩ£‚ê§ 0 => ÔΩ¢efÔΩ£‚ê§ 1 => ÔΩ¢fÔΩ£ ÔΩ¢ghÔΩ£‚ê§ 0 => ÔΩ¢ghÔΩ£‚ê§ 1 => ÔΩ¢hÔΩ£ ÔΩ¢ijÔΩ£‚ê§ 0 => ÔΩ¢ijÔΩ£‚ê§ 1 => ÔΩ¢jÔΩ£)‚ê§¬ª
[17:50] <tonyo> contextually in p5 you could use a while over the regex to the data in the same format as raku's return, so it's not entirely unfamiliar
[17:51] *** vrurg joined
[17:58] *** ScotDog joined
[17:58] <ScotDog> Hello Everyone!
[18:00] *** reportable6 left
[18:01] <ScotDog> Is anyone there?
[18:02] *** reportable6 joined
[18:04] <ScotDog> What is Raku? I have never heard of it. I am interested!
[18:04] <discord-raku-bot> <librasteve> o/
[18:04] <discord-raku-bot> <librasteve> raku is the new name for perl6
[18:05] <discord-raku-bot> <librasteve> raku.org has some intro info
[18:06] <ScotDog> Oh that is pretty cool
[18:06] <discord-raku-bot> <librasteve> certainly is!
[18:09] <discord-raku-bot> <librasteve> also the rakudo weekly news is worth a read - https://rakudoweekly.blog (have to say that or @lizmat will kill me)
[18:11] <ScotDog> Thank you librasteve! I will check that out
[18:19] *** ScotDog left
[18:27] *** vrurg left
[18:37] *** vrurg joined
[18:47] *** deoac joined
[18:54] *** jpn left
[18:57] *** jpn joined
[18:57] *** xinming_ left
[18:59] *** xinming_ joined
[19:10] *** jpn left
[19:11] *** jpn joined
[19:17] *** jpn left
[19:23] *** jpn joined
[19:56] <gfldex> m: spurt("/tmp/\xFEFF.txt", ‚Äòoi‚ÄΩ‚Äô); slurp("/tmp/\xFEFF.txt").say;
[19:56] <camelia> rakudo-moar 5fc5c32eb: OUTPUT: ¬´oi‚ÄΩ‚ê§¬ª
[19:56] <gfldex> m: shell('ls -la /tmp').say;
[19:56] <camelia> rakudo-moar 5fc5c32eb: OUTPUT: ¬´total 4876‚ê§drwxrwxrwt 1 root    root  56306 Jul 19 21:56 .‚ê§drwxr-xr-x 1 root    root    136 Nov 17  2018 ..‚ê§drwxrwxrwt 1 root    root      0 May 26  2015 .ICE-unix‚ê§drwxrwxrwt 1 root    root      0 May 26  2015 .Test-unix‚ê§drwxrwxrwt 1 root   ‚Ä¶¬ª
[19:57] <gfldex> m: shell('ls -la /tmp/*.txt').say;
[19:57] <camelia> rakudo-moar 5fc5c32eb: OUTPUT: ¬´-rw-r--r-- 1 camelia users 5 Jul 19 21:56 /tmp/Ôªø.txt‚ê§Proc.new(in => IO::Pipe, out => IO::Pipe, err => IO::Pipe, exitcode => 0, signal => 0, pid => 11654, command => ("ls -la /tmp/*.txt",))‚ê§¬ª
[19:57] <gfldex> I better stop now, before I break something. :->
[20:00] <gfldex> :D Windows explorer RMB/Properties doesn't work on that filename.
[20:01] <gfldex> No wait, it does! But it takes over a minute to open the dialog.
[20:08] *** jpn left
[20:12] *** jpn joined
[20:19] *** jpn left
[20:19] *** jpn joined
[20:35] *** jpn left
[20:39] *** jpn joined
[20:48] *** sena_kun left
[21:07] *** jpn left
[21:08] <jdv> is there a ctags impl for raku anyone know about?
[21:08] *** jpn joined
[21:11] <[Coke]> https://blogs.perl.org/users/dmitri/2015/08/ctags-now-supports-perl-6.html
[21:12] <[Coke]> https://github.com/universal-ctags/ctags/blob/caeb22af48ccce601b0c7b8cc7e5027dee457dac/parsers/perl6.c#L28
[21:13] <jdv> i just noticed that
[21:13] <jdv> is also maps weird extensions to "perl6"
[21:13] *** jpn left
[21:16] <[Coke]> just old.
[21:16] <jdv> yeah...
[21:21] *** jpn joined
[21:29] *** deoac left
[21:38] *** jpn left
[21:39] <[Coke]> https://github.com/universal-ctags/ctags/issues/377
[21:39] <[Coke]> https://github.com/universal-ctags/ctags/issues/3776
[21:59] *** deoac joined
[22:20] <[Coke]> jdv: https://github.com/universal-ctags/ctags/pull/3777
[22:20] <[Coke]> Seemed easy enough to take a stab at it, though I'm not sure it's complete.
[22:57] <jdv> oh neat
[22:57] *** deoac left
[23:34] *** jpn joined
[23:39] *** jpn left
