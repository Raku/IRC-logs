[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:03] *** simcop2387 joined
[00:05] *** perlbot joined
[00:17] *** jpn joined
[00:30] *** jpn left
[00:35] *** jpn joined
[00:40] *** jpn left
[00:47] *** jpn joined
[00:47] <rf> Hmm, what's the most supported template engine for Raku right now? (I can't use Mustache sadly)

[00:51] <discord-raku-bot> <Nemokosch> Well, the Template Toolkit kind of system (Template6 it is called iirc) needs further care, I can say that first-hand

[00:51] <discord-raku-bot> <Nemokosch> (although I wouldn't mind a "customer" because I want to change the raku.org templating system to that :D)

[00:51] <rf> I would really like to use Handlebars or something like erb

[00:52] <rf> Hmm there is a Mojo template port maybe I'll check that out

[00:54] <discord-raku-bot> <Nemokosch> be warned that any tadzik module in 2023 is the polar opposite of supported. If it works - excellent. If it doesn't, well, then you're screwed, or at least invited to shamelessly adopt it

[00:55] <discord-raku-bot> <Nemokosch> Template6 works now, as far as I'm concerned. It just can't do nearly as many things as I'd wish...

[00:56] <discord-raku-bot> <Nemokosch> there is also RakuClosures or how Richard named it - that one is really like, "let's run functions where the symbols are registered", perhaps you know already

[01:01] *** jgaz joined
[01:03] *** xinming left
[01:06] *** xinming joined
[01:06] <rf> Looks like Template::Classic does some nice stuff

[01:15] *** jgaz left
[01:24] <rf> Wow signature type is weird....

[01:35] <shmup> i found this that is 3 years old but still may prove relevant, rf. has a summary of benchmarks at the bottom too https://gist.github.com/pheix/2632f286368e2aafd1c8629d07b3f4b6

[01:36] <rf> Hah, I was just reading this

[01:37] <rf> I think I settled on Template6.

[01:39] <discord-raku-bot> <Anton Antonov> Any suggestions for "more mature" alternatives of "HTML::Escape"? (@Nemokosch suggested "HTML::Entity::Fast", but that was producing certain mis-alignments in the HTML code.)

[01:50] *** squashable6 left
[01:50] *** jpn left
[01:51] *** razetime joined
[01:51] *** squashable6 joined
[01:53] *** jpn joined
[01:58] *** jpn left
[01:59] <rf> So is CALL-ME inherently exported?

[02:02] *** jpn joined
[02:06] <discord-raku-bot> <Anton Antonov> Well, I removed the dependency on "HTML::Escape" from  "Markdown::Grammar"  -- I will upload the new version in the next few hours.

[02:06] *** jpn left
[02:19] *** jpn joined
[02:30] *** jpn left
[02:32] <rf> m: my %foo; %foo<bar>.push: 123; %foo.say;

[02:32] <camelia> rakudo-moar 70a162057: OUTPUT: «{bar => [123]}␤»

[02:45] *** Maylay joined
[02:51] <guifa> dang I could have sworn that we had actually implemented different rounding modes in core

[02:51] <guifa> seems like it got left in the air

[03:01] *** discord-raku-bot left
[03:01] *** discord-raku-bot joined
[03:01] *** jgaz joined
[03:01] *** Oshawott joined
[03:02] *** jgaz left
[03:04] *** archenoth left
[03:08] <leont> A templating system could benefit greatly (performance-wise) from a RakuAST based implementation

[03:14] *** jpn joined
[03:20] *** jpn left
[03:27] *** razetime left
[03:39] <rf> Hmm, I wonder how much work it would be to make a DSL similar to Clojure's Hiccup or OCaml's TyXML

[03:52] <Voldenet> that doesn't sound complicated

[03:52] <Voldenet> m: sub el(*%attrs, *@children) { %attrs, @children }; sub div(|c) { el :element<div>, |c }; sub a(|c) { el :element<a>, |c }; say a :href("x"), [div []]

[03:52] <camelia> rakudo-moar 70a162057: OUTPUT: «({element => a, href => x} [{element => div} []])␤»

[03:52] <Voldenet> why would one make a DSL with it

[03:52] *** razetime joined
[03:53] *** xinming left
[03:53] *** xinming joined
[03:56] <Voldenet> using methods is probably better for type checking too

[03:58] <rf> I think there is something very nice and elegant about html dsl's plus I think it would be faster than templating engines

[03:59] <rf> You can also do some typing and try to ensure valid HTML

[04:01] <Voldenet> but templates' language can be considered a dsl as well,  and they can be compiled in to the same form at some point

[04:02] <Voldenet> though proper dsl are going to be faster to parse by design, I guess

[04:02] <rf> Yeah, and they don't rely on ugly conditional logic

[04:03] <rf> You can write your logic in Raku which is always nice.

[04:08] *** jpn joined
[04:09] <rf> Goodnight folks

[04:09] *** rf left
[04:13] *** freeside joined
[04:14] *** mykhal left
[04:18] *** jpn left
[04:19] *** razetime left
[04:32] *** codesections left
[04:58] *** razetime joined
[05:03] *** jpn joined
[05:09] *** jpn left
[05:53] *** razetime left
[05:53] *** razetime1 joined
[05:56] *** razetime1 is now known as razetime

[05:57] *** jpn joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:02] *** jpn left
[06:03] *** razetime left
[06:12] *** razetime joined
[06:18] *** razetime1 joined
[06:18] *** razetime left
[06:18] *** razetime1 is now known as razetime

[06:20] *** jpn joined
[06:31] *** jpn left
[06:37] *** simcop2387 left
[06:38] *** perlbot left
[06:43] *** jpn joined
[06:51] *** jpn left
[07:01] *** jpn joined
[07:11] *** jpn left
[07:43] <discord-raku-bot> <Nemokosch> Re RakuAST and templating - sprintf itself is such a thing in 6.e iirc

[07:46] *** jpn joined
[07:51] *** jpn left
[08:03] *** frost joined
[08:05] *** frost left
[08:06] *** razetime left
[08:08] *** Sgeo left
[08:17] *** perlbot joined
[08:21] *** simcop2387 joined
[08:21] *** razetime joined
[08:32] *** squashable6 left
[08:32] *** squashable6 joined
[08:47] *** perlbot left
[08:47] *** simcop2387 left
[09:05] *** dakkar joined
[09:31] *** sena_kun joined
[09:44] *** xinming left
[09:46] *** xinming joined
[10:20] *** jpn joined
[10:28] *** jpn left
[10:52] *** jpn joined
[10:54] *** pingu joined
[11:08] *** SmokeMac` joined
[11:10] *** ab5tract joined
[11:13] *** razetime left
[11:13] *** SmokeMac` is now known as SmokeMachine_erc

[11:19] *** SmokeMac` joined
[11:23] *** SmokeMac` is now known as SmokeMachineERC

[11:29] *** SmokeMachineERC left
[11:29] *** SmokeMachine_erc left
[11:30] *** SmokeMachineERB joined
[11:30] *** SmokeMachineERB left
[11:31] *** SmokeMachineERC joined
[11:59] *** perlbot joined
[11:59] *** simcop2387 joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:51] *** ab5tract left
[12:55] *** jpn left
[13:07] *** perlbot left
[13:07] *** simcop2387 left
[13:08] *** simcop2387 joined
[13:10] *** perlbot joined
[13:18] *** theesm joined
[13:18] *** jpn joined
[13:23] *** jpn left
[13:24] *** rf joined
[13:25] <rf> Good morning folks

[13:36] <SmokeMachineERC>  Morning!

[13:37] *** jpn joined
[13:49] *** QhpAptyj9hj0RQwM joined
[13:50] *** QhpAptyj9hj0RQwM left
[13:50] *** jpn left
[13:54] *** jgaz joined
[14:05] *** SmokeMachineERC left
[14:05] *** hythm joined
[14:15] *** rf left
[14:18] *** jpn joined
[14:19] *** rf joined
[14:26] *** TieUpYourCamel left
[15:08] *** razetime joined
[15:08] *** hythm left
[15:11] *** hythm joined
[15:15] *** ab5tract joined
[15:22] <discord-raku-bot> <Nemokosch> I have an interesting case where the same private distro (with a CLI) works with recent Rakudo versions but with 2022.02 it just gives the usage back without any particular remarks

[15:23] <discord-raku-bot> <Nemokosch> I'm using Getopt::Long for what it's worth

[15:24] *** simcop2387 left
[15:24] *** perlbot left
[15:25] <rf> Not sure what you mean Nemo'

[15:25] <shmup> little nemo

[15:26] <discord-raku-bot> <Nemokosch> that the CLI fails with a one year old Rakudo without really giving any hints why

[15:26] <rf> Which CLI

[15:26] <discord-raku-bot> <Nemokosch> the CLI of the particular tool I've built for work

[15:27] <rf> Hmm, that is odd, is it just 2022.02 or does older work lol?

[15:28] <discord-raku-bot> <Nemokosch> I didn't try - the only reason I'm bringing up this particular version is that the guy who took over said "hm, it doesn't work on the test server"

[15:28] <discord-raku-bot> <Nemokosch> and that one had this version so I quickly set it up for myself and indeed it doesn't

[15:28] <rf> Any way to upgrade version on server without big pain?

[15:29] <discord-raku-bot> <Nemokosch> I hope so

[15:29] <discord-raku-bot> <Nemokosch> truth be told, I wrote that script in a quite bleeding-edge way, so the sole fact that it might fail with fairly new versions even, wouldn't be surprising

[15:29] <discord-raku-bot> <Nemokosch> the bothersome thing is the way the error happens - the CLI just gives the usage back, without giving any hints what might have failed

[15:30] <rf> Maybe it is due for refactoring then.

[15:34] <discord-raku-bot> <Nemokosch> sadly it's quite intrinsic for the whole CLI parsing that it gives you no idea what went wrong...

[15:37] *** ab5tract left
[15:45] <[Coke]> using Text::CSV, trying to switch from using a hardcoded relative path to a relative path constructed with $*PROGRAM.parent....child... and it's just hanging. weird. I can read in the file manually and emit the first line, but csv() just hangs.

[15:57] * [Coke] finds https://github.com/Tux/CSV/issues/21

[15:58] <shmup> Well, this is still here. Guess will have to fix it.

[15:59] <shmup> quoting, and reassiging the quote to [Coke] :P

[16:00] <El_Che> shmup: feature request had tab support for nick completion for the discord nicks :)

[16:01] <shmup> it works! they just have to appear in your history first

[16:01] <shmup> that's just standard irssi stuff afaik haha

[16:01] <shmup> i can tab complete Nemokosch for example

[16:01] <shmup> El_Che: tell me more though, like, any annoyances, and i will def chew on it. lmk what you're experiencing rn with tab completion :P

[16:03] <El_Che> mmm

[16:03] <El_Che> now it works

[16:03] <El_Che> N+tab gives Nemokosch 

[16:03] <El_Che> weird

[16:03] <shmup> hmmm, lmk if it's weird again heh

[16:04] <[Coke]> that doesn't work here, fwiw.

[16:04] <[Coke]> "nemo<tab>" gives me nothing on irssi

[16:04] <shmup> https://github.com/shmup/irssi-scripts/blob/main/raku-discord-bot-renamer.pl

[16:04] <shmup> it will if you use that and give it a bit of time for Nemokosch to say something again :P

[16:04] <El_Che> my machine was rebooted by the hoster

[16:04] <El_Che> so a new irssi session

[16:04] <shmup> word

[16:05] <El_Che> that's the only difference between testing when you posted and now

[16:08] *** razetime left
[16:11] <discord-raku-bot> <shmup> test

[16:12] <shmup> just pushed a lil change but it isn't important to point out hehe

[16:16] <ugexe> [Coke]: I don't think it understand IO::Path values

[16:16] <ugexe> when you passed a hard coded relative path, was it a string or IO::Path?

[16:17] <ugexe> when it encounters an :$in argument type it doesn't have a case for (like IO::Path) it just waits for input on $*IN -- https://github.com/Tux/CSV/blob/fc7a1e3d48c37ccd6b4f09dd1e44945a135e2f83/lib/Text/CSV.pm#L1753-L1755

[16:17] <ugexe> i imagine https://github.com/Tux/CSV/blob/fc7a1e3d48c37ccd6b4f09dd1e44945a135e2f83/lib/Text/CSV.pm#L1661-L1663 could be changed to `when Str|IO::Path`

[16:22] <[Coke]> Strings worked. I had issues with just ~$dir-obj, but $dir-obj.relative works OK

[16:22] <ugexe> .relative returns a string

[16:22] <[Coke]> Yes.

[16:22] <ugexe> although so would ~$dir-obj

[16:23] <ugexe> hmm

[16:23] <[Coke]> those strings are different on windows in git bash

[16:23] <[Coke]> one has mixed /'s and \'s, but .relative is uniform.

[16:23] <ugexe> you mentioned earlier using $*PROGRAM.child.whatever which likely was returning IO::Path

[16:23] <[Coke]> Yes.

[16:24] <ugexe> odd, i don't think the slashes should matter 

[16:24] <[Coke]> I'm fixing up a bunch of $dayjob stuff that really needed you to run everything from folder <x>, which doesn't work great in general.

[16:24] <[Coke]> (and I don't want to make this stuff installable, which would also fix that issue)

[16:25] <ugexe> the only difference was the mixed slashes vs uniform slashes?

[16:26] <ugexe> like in what worked and what didnt work

[16:26] <[Coke]> yup

[16:27] <[Coke]> (I only tried it with git bash, didn't also try cmd)

[16:33] <ugexe> ah, that'd be interesting to try. i'm not sure how exactly things would work in git bash

[16:33] <ugexe> why use git bash though instead of just bash?

[16:33] <[Coke]> ... because I'm on windows?

[16:33] <ugexe> doesn't windows come with bash now?

[16:33] <ugexe> i.e. wsl

[16:33] <[Coke]> and I got git bash for "free" when I installed the git tools.

[16:33] <[Coke]> Sure, probably, but I'm not using WSL.

[16:34] <[Coke]> I tend to use git bash for misc. scripting (usually with raku), powershell for snippets I absolutely must have working for other non-developer users, and the VS cmd prompt just for building & debugging raku

[16:35] *** simcop2387 joined
[16:37] *** perlbot joined
[16:38] <ugexe> what is `say $*VM.osname` under git bash?

[16:40] <ugexe> or `say $*SPEC`

[16:42] <[Coke]> Win32

[16:43] <[Coke]> mswin32

[16:44] <[Coke]> er, spec is first in that list. same results on git bash and CMD (it's the same raku, built in CMD using VS command line tools)

[16:46] <ugexe> i wonder if git bash needs the same treatment as https://github.com/rakudo/rakudo/blob/main/src/core.c/IO/Spec/Cygwin.pm6 where it basically does s{\\}{/}g all over the place

[16:49] *** simcop2387 left
[16:50] *** perlbot left
[16:51] <[Coke]> Maybe, but that shouldn't impact that given/when in Text::CSV

[16:51] <[Coke]> if I have time, I'll see if I can run a local version of CSV that I can step through and see why it's confused.

[17:00] *** jpn left
[17:02] *** Sgeo joined
[17:04] *** pingu left
[17:12] <[Coke]> I got a github email for a release on moarvm 2023.02 , but not nqp or raku

[17:12] <[Coke]> do

[17:21] <[Coke]> now if only these scripts I were running didn't take 30+ minutes!

[17:23] <shmup> that's fuel for attention deficits

[17:24] *** simcop2387 joined
[17:25] *** perlbot joined
[17:26] *** hythm left
[17:28] *** cfa joined
[17:29] <cfa> o/

[17:29] <[Coke]> any way to get the diff of two IO Paths? I have "foo\bar\baz\frob" and "foo\bar" and want to get "baz\frob"

[17:29] <[Coke]> I can do it the hard way but am wondering if there's a method I missed.

[17:30] *** dakkar left
[17:31] <cfa> looks like i can't build Inline::Perl5 with 2023.02 

[17:31] <jdv> is cfa cfedde?

[17:31] <cfa> no?

[17:31] <jdv> bulit during release testing:|

[17:31] <cfa> hmm

[17:33] <cfa> anyone else having trouble building with 2023.02?

[17:33] <cfa> if not i'll dig in further here

[17:34] <jdv> is the only change the rakudo version?

[17:34] <cfa> yeah i just switched with rakubrew and tried to reinstall

[17:34] <cfa> it's installed with 2022.12

[17:34] <shmup> is rakubrew a fairly defacto/standard technique all y'all working on rakudo are using?

[17:35] <discord-raku-bot> <Nemokosch> I don't know if it is standard but I can vouch for it

[17:35] <cfa> i'm not working on rakudo but i find it convenient to track releases yeah

[17:35] <cfa> and quickly install zef atop a new installation

[17:35] <cfa> shmup: i'm using that irssi script of yours btw

[17:35] <cfa> it's working great here

[17:35] <jdv> i dont use it cause its been wonky in the past

[17:35] <discord-raku-bot> <Nemokosch> and especially if you need to check against multiple versions quickly

[17:36] <shmup> cfa cool bc i def was terrible and pushed up something that wont work, glad you arent caught up cfa :)

[17:36] <jdv> but i imagine it *should* work:)

[17:36] <cfa> i guess it'd be nice if tellable6 were smart enough to recognise directed speech to a discord user

[17:36] <cfa> shmup: hmm?

[17:36] <shmup> nothing, keep using the older, working version :P

[17:37] <shmup> i will fix this thing that clearly broke something for me. i tried refactoring and goofed 

[17:37] <cfa> i only just loaded whatever was in the most recent commit

[17:37] <shmup> like, how long ago?

[17:37] <cfa> when i connected

[17:37] <shmup> oh ok

[17:37] <cfa> is something about to catch fire?

[17:38] <[Coke]> I use rakubrew.

[17:38] <[Coke]> works great, even if you want to include a raku you built from scratch on the side.

[17:38] <cfa> or if you just want to build HEAD quickly

[17:38] <shmup> nah cfa ur good heh. nothing will catch fire!

[17:39] <shmup> just got my main branch to the working one. i'll be goofing now in another branch :P 

[17:39] <jdv> [Coke]: can you do I::P5 on the last release?

[17:39] <cfa> shmup: okay (just let me know if/when i should unload, pull, reload)

[17:39] <cfa> fwiw i've never used irssi scripts before

[17:39] <cfa> but this seemed very handy

[17:40] <shmup> haha. word. i like to put scripts in .irssi/scripts and symlink the script to .irssi/scripts/autorun, which may be convenient for you

[17:40] <shmup> or just put it in autorun :P tomato tomato

[17:41] <jdv> ive been using irssi for 15y i think and ive not delved into scripting

[17:42] <cfa> shmup: thanks for the info.  i just loaded this manually per the isntructions on https://scripts.irssi.org/

[17:42] <cfa> which of course i had to look up

[17:42] * jdv is lazy, as a good perl/raku peep might be

[17:43] <cfa> :)

[17:43] <cfa> i'll update to 2023.02 on my work box and try installing Inline::Perl5 there

[17:44] <cfa> er, i suppose i should install it there under 2022.12 first

[17:46] <cfa> but first... to build perl with -Duseshrplib 

[17:46] <cfa> it's turtles all the way down

[17:47] <discord-raku-bot> <shmup> 🐢 🐢 🐢  i need to test but stay relevant

[17:50] <[Coke]> jdv: I don't use I:P5

[17:50] <[Coke]> so I could try but it would not be trivial.

[17:51] <cfa> i'm testing on a different box here, so hopefully not necessary

[17:51] <cfa> just waiting on perl 5.36 to build

[17:51] <jdv> ok

[17:51] <shmup> i was wondering, since there is work w/r/t perl and cosmopolitan libc, if anyone has even _thought_ about raku. i'd be curious anyway

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:11] <cfa> okay, Inline::Perl5 builds cleanly with 2022.12 on that box; now to try 2023.02

[18:14] <cfa> installed

[18:15] <cfa> so it looks like my issue is limited to macos (the work box is debian)

[18:15] <jdv> if you can golf the issue, assuming its real, nine might be able to help

[18:16] <cfa> yeah

[18:16] <cfa> is anyone else here on mac at the moment?  if so, anyone able to see whether they can install on 2023.02?

[18:16] <jdv> i only have debian myself

[18:21] <cfa> it seems to be Distribution::Builder::MakeFromJSON that's failing

[18:25] <rf> jdv: I installed it on a M2 Mac about 15 mins ago

[18:26] <rf> cfa: ^

[18:26] <cfa> hmm

[18:26] <cfa> i5 with ventura here

[18:27] <rf> Hmm, I can't seem to build it on my M1 using 2023

[18:27] <rf> Very odd.

[18:30] <cfa> building with -v shows the following logged command just before failure (but nothing else)

[18:30] <cfa> [Inline::Perl5] Command: …/rakudo -MMONKEY-SEE-NO-EVAL -e exit((require ::(q|Distribution::Builder::MakeFromJSON|)).new(:meta(EVAL($*IN.slurp(:close)))).build(q|…/.zef/Inline%3A%3APerl5%3Aver%3C0.60%3E%3Aauth%3Ccpan%3ANINE%3E.tar.gz/Inline-Perl5-0.60|)??0!!1)

[18:30] <cfa> i replaced the tmp path (and path to rakudo) with … there

[18:31] <rf> It's that time again folks, I'm looking for some code review on a new Humming-Bird feature. Don't be scared to leave comments, questions, etc! https://github.com/rawleyfowler/Humming-Bird/pull/35

[18:32] <rf> cfa: Definetley make an issue on it. I think Nine will help

[18:42] <cfa> sg

[18:42] <cfa> i should probably try installing afresh in 2022.12 first

[18:44] <ugexe> is the perl you build with useshrplib visible to Inline::Perl5?

[18:44] <ugexe> i.e. Inline::Perl5 isn't seeing like your system perl is it?

[18:45] <ugexe> you could also try running that command, but pipe the META6.json to stdin of it

[18:53] <cfa> ugexe: will try in a sec

[18:53] <cfa> and yes, my perl is from perlbrew, built with -Duseshrplib 

[18:53] <cfa> i'm using Inline::Perl5 in 2022.12

[18:53] <cfa> i think the install fails much earlier if you haven't built a shared lib

[18:56] *** sena_kun left
[19:00] <cfa> hmm, stdin is being EVAL'd and passed to Distribution::Builder::MakeFromJSON's constructor

[19:01] <ugexe> yeah, a hash

[19:01] <cfa> so i'll need to dump out a hash from the json first, no?

[19:01] <ugexe> honestly im not sure lol

[19:02] <ugexe> https://github.com/ugexe/zef/blob/5345b9183928184aea9cd9cf6d26a057039d5df9/lib/Zef/Service/Shell/DistributionBuilder.rakumod#L108

[19:04] <cfa> okay, piping in the hash worked

[19:05] <cfa> and yeah, exited with 1

[19:05] <cfa> let me try constructing from a repl

[19:05] <ugexe> what happens if you cd to the inline::perl5 directory somewhere under ~/.zef/store and run `make`

[19:06] <ugexe> i think `zef look Inline::Perl5` will take you to the correct dir (note it'll put you into a new shell though)

[19:06] <cfa> yeah make succeeds but the install step fails

[19:06] <cfa> i tried that earlier

[19:07] <cfa> Distribution::Builder::MakeFromJSON.new(meta => 'META6.json'.IO.slurp.&from-json.hash).build(q|⋯/Inline%3A%3APerl5%3Aver%3C0.60%3E%3Aauth%3Ccpan%3ANINE%3E.tar.gz/Inline-Perl5-0.60|).so

[19:07] <cfa> that's True

[19:08] <cfa> as for make install,

[19:08] <cfa> Cannot assign to an immutable value

[19:08] <cfa>   in sub install at configure.pl6 line 50

[19:08] <cfa>   in sub MAIN at configure.pl6 line 7

[19:08] <cfa>   in block <unit> at configure.pl6 line 2

[19:09] * cfa scratches his head

[19:09] <cfa> can't spend much longer on this now

[19:11] *** jpn joined
[19:11] <ugexe> im not sure if MakeFromJSON runs make install fwiw

[19:15] <cfa> the install error seems to be from this:

[19:15] <cfa>     $dist.meta<files> = (

[19:15] <cfa>         |$dist.meta<files>.grep(* ne $p5helper.Str),

[19:15] <cfa>         {'resources/libraries/p5helper' => $p5helper},

[19:15] <cfa>     );

[19:15] *** jpn left
[19:17] <cfa> 🤷

[19:21] *** sena_kun joined
[20:21] *** benchable6 left
[20:21] *** squashable6 left
[20:21] *** linkable6 left
[20:21] *** reportable6 left
[20:21] *** releasable6 left
[20:21] *** tellable6 left
[20:21] *** committable6 left
[20:21] *** quotable6 left
[20:21] *** unicodable6 left
[20:21] *** statisfiable6 left
[20:21] *** shareable6 left
[20:21] *** notable6 left
[20:21] *** sourceable6 left
[20:21] *** notable6 joined
[20:22] *** unicodable6 joined
[20:22] *** sourceable6 joined
[20:22] *** quotable6 joined
[20:22] *** benchable6 joined
[20:22] *** committable6 joined
[20:22] *** shareable6 joined
[20:22] *** reportable6 joined
[20:23] *** squashable6 joined
[20:23] *** tellable6 joined
[20:23] *** statisfiable6 joined
[20:23] *** releasable6 joined
[20:23] *** linkable6 joined
[20:35] *** codesections joined
[20:41] <ugexe> is there an error message?

[20:43] <ugexe> oh you showed the error message earlier

[20:44] <ugexe> er, well zef doesn't run configure.pl6

[20:44] <ugexe> so it might even be two different errors

[20:47] <ugexe> my $d = Distribution::Path.new($*CWD); say $d.meta<files> = (1 => 1,);

[20:47] <ugexe> need to bisect that

[20:48] <ugexe> bisectable6: my $d = Distribution::Path.new($*CWD); say $d.meta<files> = (1 => 1,);

[20:48] <bisectable6> ugexe, Will bisect the whole range automagically because no endpoints were provided, hang tight

[20:48] <bisectable6> ugexe, Output on all releases: https://gist.github.com/b9a43e753661e3df8fb8e08558cd231a

[20:48] <bisectable6> ugexe, Bisecting by exit code (old=2022.03 new=2022.04). Old exit code: 0

[20:49] <bisectable6> ugexe, bisect log: https://gist.github.com/bd315141cd5da37c9a68988ce996cd4d

[20:49] <bisectable6> ugexe, (2022-03-24) https://github.com/rakudo/rakudo/commit/f66b598132f8d771050f3715ad7dfd6de49f5be1

[20:49] <bisectable6> ugexe, Bisecting by exit code (old=2016.06 new=2016.07.1). Old exit code: 1

[20:49] <bisectable6> ugexe, bisect log: https://gist.github.com/a6e3182869f2bc86825bb529360b5e91

[20:49] <bisectable6> ugexe, (2016-06-29) https://github.com/rakudo/rakudo/commit/4c8dc4663b914a6f2a0a651fd3eacfcd8b9cd5ca

[20:49] <ugexe> looks like https://github.com/rakudo/rakudo/commit/f66b598132f8d771050f3715ad7dfd6de49f5be1 regressed it

[20:49] <bisectable6> ugexe, ⚠ New output detected, please review the results manually

[20:49] <bisectable6> ugexe, Output on all releases and bisected commits: https://gist.github.com/2b2d26821e11c886f5e6a1afc5a53111

[20:51] <ugexe> https://github.com/rakudo/rakudo/commit/f66b598132f8d771050f3715ad7dfd6de49f5be1#diff-eebced9f7773684667dfa2c7daee63122e619683501c00cc0eed5f0e91519407R18 specifically 

[20:59] <shmup> what's going on when you use bisect like. it's performing a git bisect and at each iteration, it's running your supplied snippet of code against raku?

[21:01] <[Coke]> prebuilt rakus, yes.

[21:02] <jdv> maybe google "git bisect" and/or "github raku bisectable"

[21:17] <[Coke]> https://rakudo.org/news has a non-link for the latest release (2022.12 seems fine)

[21:19] <rf> tonyo: Does Slang::SQL work with Postgres?

[21:20] <shmup> googling "git bisect" would not help with my question heh. thanks [Coke] 

[21:35] *** evalable6 left
[21:35] *** linkable6 left
[21:36] *** linkable6 joined
[21:37] *** evalable6 joined
[22:08] *** codesections left
[22:09] <cfa> ugexe: thanks

[22:11] <cfa> though i'm not sure what the next steps are

[22:12] <cfa> (or why i'm encountering failure on mac but not linux)

[22:20] <rf> How can i tell zef to just pull depends

[22:20] <cfa> pull them, or install them?

[22:20] <rf> I just want to install depends but not the module

[22:21] <cfa> $ zef install --deps-only .

[22:21] <rf> I should read haha yeah --deps-only

[22:23] <cfa> okay, i fudged the installation for now: checking the before/after for $dist.meta<files> -- it turns out that $dist.meta<files> was {resources/libraries/p5helper => resources/libraries/libp5helper.dylib}, and we were attempting to set it to {resources/libraries/p5helper => "resources/libraries/libp5helper.dylib".IO}

[22:24] <cfa> so i commented out that assignment and reran make install

[22:26] <cfa> (er, pretend that wasn't so repetitively phrased)

[22:31] *** jpn joined
[22:36] *** jpn left
[22:47] <rf> Hmm i'm failing to build OpenSSL on the rakudo-star docker container

[22:47] *** perlbot left
[22:47] *** simcop2387 left
[22:48] <rf> zef install OpenSSL results in a test failure

[22:55] <cfa> what's the failure?

[22:56] <rf> Not sure, doing some troubleshooting

[22:56] <rf> Its failing on a specific test

[23:22] <Geth> ¦ doc/Unicode_V15: b1e4d99509 | thundergnat++ (committed using GitHub Web editor) | doc/Language/unicode.pod6

[23:22] <Geth> ¦ doc/Unicode_V15: Change supported Unicode version

[23:22] <Geth> ¦ doc/Unicode_V15: 

[23:22] <Geth> ¦ doc/Unicode_V15: It's kind-of dependent on the VM it's running on though.

[23:22] <Geth> ¦ doc/Unicode_V15: review: https://github.com/Raku/doc/commit/b1e4d99509

[23:23] <Geth> ¦ doc: thundergnat++ created pull request #4210: Change supported Unicode version

[23:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4210

[23:32] <guifa> is there any way to divide a number and get the quotient + remainder? 

[23:34] *** simcop2387 joined
[23:34] <discord-raku-bot> <Nemokosch> well, polymod in some sense

[23:37] <guifa> yeah, that's just a bit inefficient

[23:37] *** perlbot joined
[23:37] <guifa> I've had a few subs I've written lately where I need to do a division and then use both numbers

[23:38] <guifa> AIUI, this can be optimized sometimes because to calculate one you generally already have the other at the ready

[23:43] <cfa> what the

[23:43] <cfa> m: say 42.base("camel")

[23:43] <rf> Got OpenSSL to build, just needed to install the shared library, weird the test failed and the META6 requirement didn't catch it.

[23:44] <camelia> rakudo-moar 70a162057: OUTPUT: «🐫🐪🐫🐪🐫🐪␤»

[23:44] <guifa> cfa: it's just a little easter egg

[23:44] <cfa> m: say 21.base("beer")

[23:44] <camelia> rakudo-moar 70a162057: OUTPUT: «🍻🍺🍻🍺🍻␤»

[23:44] <cfa> guifa: yeah, i encountered the definition first

[23:45] <cfa> 'eggify' amused me

[23:45] <perryprog> WHOA WHOA WHOA

[23:45] <perryprog> we can't have easter eggs in our Serious Programming Language

[23:45] <perryprog> this better be removed asap

[23:45] <cfa> criminally, though, there's no 🥚 multi

[23:47] <cfa> clearly we need

[23:47] <cfa> m: use MONKEY-TYPING; augment class Int { multi method base(Int:D: "egg" --> Str:D) { self!eggify: "🥚🥚" } }; say 42.base("egg")

[23:47] <camelia> rakudo-moar 70a162057: OUTPUT: «🥚🥚🥚🥚🥚🥚␤»

[23:48] <perryprog> next thing you know we'll have an HTTP library that has HTTP code 418 as some "teapot" response

[23:48] <perryprog> Ridiculous

[23:51] <cfa> hee

[23:54] <perryprog> wow not even part of the spec https://github.com/Raku/roast/blob/master/S32-num/base.t

[23:54] <guifa> It's a Rakudo easter egg, not a Raku easter egg

[23:55] <guifa> Since "beer" and "camel" aren't valid bases, it doesn't hurt anyone

[23:55] <cfa> the comment was in jest

[23:55] <perryprog> I never jest (it was indeed jest)

[23:56] <perryprog> In fact, I was about to go even further and poke lizmat who added it in https://github.com/rakudo/rakudo/commit/672c5d4 but then I looked at the comments on the commit and got sad :(

[23:57] <perryprog> see also: https://save418.com

