[00:00] <cfa> like, someone else my want to use MyMod 'widget' isntead?

[00:00] *** reportable6 left
[00:00] <cfa> (to alias &foo as &widget)

[00:01] <lucs> Exactly.

[00:01] <cfa> urgh, typos, sorry;  someone else may want to  use MyMod 'widget'  instead?

[00:01] <lucs> Yep.

[00:02] *** reportable6 joined
[00:02] <ugexe> so just make a sub EXPORT that exports everything regardless of whatever is on the right side of `use Foo :bar`

[00:02] <lucs> You know, ultimately, rf's solution could be fine, but I'm really curious about how to do this inside the module itself.

[00:02] <cfa> i think that's almost the example here: https://docs.raku.org/language/modules#EXPORT

[00:02] <cfa> look for $short_name => MyModule::Class

[00:02] <lucs> ugexe: I tried a bunch of stuff with EXPORT, but I wasn't able to make it work.

[00:03] <lucs> cfa: Yeah, I saw all that.

[00:03] <cfa> you want to just map whatever's passed in to the sub

[00:04] <lucs> Looks easy, right? Welp, I wasn't able to come up with the right expression.

[00:18] <lucs> In that $short_name example, I think I'd want something like ÔΩ¢Map.new: do "&$short_name" => ??? if $short_nameÔΩ£, but is it indeed ÔΩ¢&$short_nameÔΩ£ and what goes at ÔΩ¢???ÔΩ£?

[00:22] <cfa> with the caveat that i have no idea what i'm doing: 

[00:22] <cfa> https://gist.github.com/cfa/13c5088670b6a185e114f3b237ebca9f

[00:22] *** derpydoo left
[00:23] <cfa> (i used `our` in this example so that i could easily reference A's &foo from within EXPORT)

[00:24] <cfa> i'm sure someone who's used EXPORT before can provide better guidance; i was just riffing on that example 

[00:24] <lucs> I didn't think of 'our'.

[00:25] <lucs> But this, copied from my failing experiments, fails:

[00:25] <lucs> Map.new: do         "&$new-subname"   => &MyMod::subname if $new-subname;

[00:25] <lucs> (same as yours, eh)

[00:25] <cfa> yeah but subname will just be lexically scoped by default

[00:26] <cfa> i.e. it's effectively `my sub subname`

[00:26] <cfa> so EXPORT can't see it

[00:26] <lucs> Won't the EXPORT take care of that?

[00:26] <lucs> Maybe I'm not following...

[00:26] <cfa> EXPORT isn't in the same scope

[00:26] <lucs> Right.

[00:31] <cfa> from the docs: it looks like EXPORT is part of the compunit rather than the package/module, so we can't place it inside the module definition (and hence the module's scope).

[00:33] <lucs> Correct.

[00:33] <lucs> Um, I'm going to eat now, and resimplify my gist again.

[00:34] <lucs> (there is also a potential "multi" problem)

[00:34] <lucs> TTYL

[00:34] <cfa> cheers

[00:36] *** Manifest0 left
[00:49] <cfa> hmm

[00:49] <cfa> regarding this,

[00:49] <cfa> m: module A { sub foo is export { ... } }; module B { sub foo is export { ... } }

[00:49] <camelia> rakudo-moar 760e21c18: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§A symbol '&foo' has already been exported‚ê§at <tmp>:1‚ê§¬ª

[00:49] <cfa> i might have answered my own question, though the behaviour still seems surprising

[00:50] <cfa> i.e. if the exporter relates to the compunit rather than the module itself, then this makes sense

[00:50] <cfa> (as does this differing from the .rakumod case)

[00:51] <cfa> anyway, &

[00:58] <rf> I successfully made cinnamon buns

[01:36] *** evalable6 left
[01:36] *** linkable6 left
[01:37] *** linkable6 joined
[01:39] *** evalable6 joined
[01:50] *** derpydoo joined
[02:09] <discord-raku-bot> <Anton Antonov> @rf Using Raku?

[02:10] <rf> I wish. No, sadly just in real life.

[02:10] <lucs> Is this legit?:  $condition ?? (use A) !! (use B)

[02:11] <lucs> 'use' is compile-time, iiuc, so I'm wondering.

[02:11] <discord-raku-bot> <Anton Antonov> @rf If you proclaimed that earlier I might have used cinnamon buns making example in my Gherkin grammar post...

[02:12] <discord-raku-bot> <el gatito (** advocate)> compile time conditions hmm

[02:12] <rf> Lol. That would have been excellent

[02:13] <lucs> Well, the $condition would be evaluated at runtime, eh.

[02:15] <rf> You're much better off using require vs use in that scenario.

[02:15] <lucs> Oh, maybe 'require'.

[02:15] <rf> ^

[02:15] <lucs> Yeah, just thought of that :)

[02:19] <discord-raku-bot> <el gatito (** advocate)>  @if $?VERSION ~~ v2.d+   foo @else   bar  @endif

[02:19] <discord-raku-bot> <Anton Antonov> @rf The "Highlander" movie example is the same as the one in cucumber.io . Food preparation would be also good.

[02:20] *** cfa left
[02:22] *** frost joined
[02:32] <discord-raku-bot> <Nemokosch> the BEGIN phaser runs at compile time, though

[02:32] <discord-raku-bot> <Nemokosch> so who knows...

[02:46] *** razetime joined
[03:16] <discord-raku-bot> <lucs> Okay, can't make it simpler. Hope I'm clear in what I'm trying to do (previously explained): https://gist.github.com/lucs/5335c195d3642ef3d7206248606c21d8

[03:21] *** coleman left
[03:21] *** coleman joined
[03:35] *** razetime left
[03:58] *** razetime joined
[03:59] *** codesections joined
[04:17] *** rf left
[04:31] *** codesections left
[04:31] *** codesections joined
[04:37] *** razetime left
[04:47] *** razetime joined
[04:52] *** codesections left
[04:52] *** codesections joined
[05:21] *** codesections left
[05:23] *** codesections joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:10] <discord-raku-bot> <Nahita> @lucs only slight change is needed. problem is, A::orig is not really accessing the &orig residing inside the class A because subroutines are "my"-scoped, i.e., lexical by default. So to attach that symbol to the class, you can "our"-declare it instead. In multis, it wants an our-declared proto, so      our proto sub orig(|) is export {*}     multi orig (Int $n) { $n * 2 }     multi orig (Str $s) { $s ~ $s } inside the

[06:10] <discord-raku-bot> class A should do it

[06:10] *** bbrtj left
[06:56] *** pingu joined
[06:57] *** razetime left
[07:02] *** jpn joined
[07:04] *** razetime joined
[07:07] *** jpn left
[07:19] *** frost left
[07:29] *** razetime left
[07:30] *** razetime joined
[07:41] *** abraxxa-home joined
[07:44] *** razetime left
[07:45] *** sena_kun joined
[07:53] *** razetime joined
[07:55] <discord-raku-bot> <el gatito (** advocate)> will raku have implicit interfaces (static duck typing)?

[07:56] *** p6steve left
[08:08] *** frost joined
[08:24] *** frost left
[08:28] <moritz> I don't think so, that doesn't fit with the dynamic vibe of raku

[08:30] *** jpn joined
[08:35] <discord-raku-bot> <el gatito (** advocate)> moritz: then why have gradual typing in the first place ü§î

[08:35] *** jpn left
[08:39] <moritz> so that you don't have to specify types when you don't want to care about them, but you *can* specify types if you want, and get benefit from them

[08:40] *** Sgeo left
[08:42] *** grondilu joined
[08:42] <grondilu> Hi all (today I'm trying Emacs's IRC client)

[08:42] <tellable6> 2023-02-18T21:26:37Z #raku <tbrowder> grondilu the raku/perl6 emacs mode does have the capability to show an index of raku classes, subs, and variables

[08:43] * moritz waves to grondilu 

[08:43] <discord-raku-bot> <el gatito (** advocate)> m:perl role R {   sub a() { ... } }  class C {   sub a() { say ‚Äòhello‚Äô } }  say C ~~ R; 

[08:43] <discord-raku-bot> <Raku eval>  False 

[08:45] <discord-raku-bot> <el gatito (** advocate)> roles can‚Äôt be checked for implicit satisfaction

[08:45] <grondilu> that seems sensible to me

[08:46] <discord-raku-bot> <el gatito (** advocate)> i want structural typing

[08:47] <discord-raku-bot> <el gatito (** advocate)> roles is not a viable way to do that

[08:49] <grondilu> subsets then?

[08:49] *** freeside left
[08:49] * grondilu thinks raku's subsets are pretty neat

[08:50] *** dakkar joined
[08:55] <moritz> subsets are neat, but they don't provide any benefits at compile time

[08:57] <discord-raku-bot> <el gatito (** advocate)> how can i do this with subsets then protocol Pet {   sub cry();   sub pet();   sub feed(Food $); } 

[08:58] <moritz> subset Pet of Any where { .^has_method('cry') and .^has_method('pet') }

[09:00] <moritz> not ideal

[09:00] <discord-raku-bot> <el gatito (** advocate)> it doesn‚Äôt have any constraints on the signature

[09:00] *** jpn joined
[09:01] <discord-raku-bot> <el gatito (** advocate)> grondilu: how would you do that then

[09:05] *** jpn left
[09:05] <grondilu> Apart from something like what moritz showed above, I don't know.

[09:06] <discord-raku-bot> <el gatito (** advocate)> see

[09:08] *** Manifest0 joined
[09:14] <moritz> there's not really structurual typing in raku, it's mostly nominal

[09:16] <discord-raku-bot> <Nemokosch> Which is a bit strange, given that you can create a class that respects indexing, without making it Positional

[09:24] <discord-raku-bot> <el gatito (** advocate)> raku allows dynamic duck typing but not static duck typing smh

[09:25] <El_Che> static duck typing?

[09:25] <discord-raku-bot> <el gatito (** advocate)> structural typing

[09:25] <El_Che> millions of static language programmers cried in error! A unbalance in the force!

[09:26] *** jpn joined
[09:41] <discord-raku-bot> <Nemokosch> by the way, static duck typing is present in traditional C++ templatess

[09:41] <discord-raku-bot> <Nemokosch> I remember the uni teacher even said "it's the only reasonable form of duck typing"

[09:43] *** ab5tract joined
[09:55] *** pingu left
[09:59] *** ab5tract left
[10:05] *** freeside joined
[10:11] <discord-raku-bot> <el gatito (** advocate)> c++ - the language that tries to do everythin

[10:30] *** sena_kun left
[10:38] *** jpn left
[10:53] *** freeside left
[11:06] *** sena_kun joined
[11:14] *** grondilu left
[11:26] *** razetime left
[11:39] *** jpn joined
[11:39] *** TieUpYourCamel joined
[11:41] *** razetime joined
[11:57] *** razetime left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:03] <Geth> ¬¶ ecosystem/main: 774f4da9cf | (Elizabeth Mattijsen)++ | META.list

[12:03] <Geth> ¬¶ ecosystem/main: Remove Intl::Format::Number, it now lives in zef ecosystem

[12:03] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/774f4da9cf

[12:04] *** codesections left
[12:18] *** Xliff joined
[12:24] <Geth> ¬¶ doc/finanalyst-patch-1: f03b281df7 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/101-basics.pod6

[12:24] <Geth> ¬¶ doc/finanalyst-patch-1: remove TM char for consistency

[12:24] <Geth> ¬¶ doc/finanalyst-patch-1: 

[12:24] <Geth> ¬¶ doc/finanalyst-patch-1: This addresses issue #119 in doc-website, was in Raku/doc

[12:24] <Geth> ¬¶ doc/finanalyst-patch-1: Either all references to Raku should have tm or none. My preference is for none as it is obvious

[12:24] <Geth> ¬¶ doc/finanalyst-patch-1: review: https://github.com/Raku/doc/commit/f03b281df7

[12:24] <Geth> ¬¶ doc: finanalyst++ created pull request #4205: remove TM char for consistency

[12:24] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4205

[12:32] <[Coke]> .ask codesections can we get feedback on https://github.com/Raku/doc-website/issues/119 

[12:32] <tellable6> [Coke], I'll pass your message to codesections

[12:37] <[Coke]> what do folks think of something like "use rakudo *>2022.07;"

[12:37] <[Coke]> (Trying to think of a syntax in the docs to say this was introduced in some compiler version, and then wondering if we could use the same syntax in the actual compiler)

[12:39] *** Xliff left
[12:40] <lizmat> that syntax could actually be made into a module

[12:40] <[Coke]> right!

[12:40] <lizmat> and possibly added to the core

[12:40] <[Coke]> then I can make it *your* problem, and just document it. :)

[12:40] <lizmat> but better in ecosystem, as then older versions of Rakudo would also be able to use it

[12:40] <[Coke]> as all things should be? ;)

[12:41] *** gcd joined
[12:41] <lizmat> I just wonder about what the name of the distribution should be

[12:41] <lizmat> "rakudo" feels..   ambiguous ?

[12:42] <lizmat> Rakudo::VersionMatcher ?

[12:42] <[Coke]> something from <use rakudo compiler version requirement>

[12:42] <[Coke]> That seems reasonable.

[12:43] <[Coke]> then we can document "use this module" somewhere in the docs, and add these lines wherever we have a known version requirement. (We already have the version specification one.)

[12:46] *** derpydoo left
[12:46] <lizmat> actually, make it a real version object, so "use rakudo * > v2022.07"

[12:46] <lizmat> to allow for better version semantics

[12:47] <lizmat> this would also allow:  "use rakudo v2022.07+"

[12:47] <[Coke]> Yes, please.

[12:47] <lizmat> I'll whip up the module after finishing today's Weekly

[12:48] <[Coke]> ... Crap. Ok, I'll get this incorporated into the docs for the next milestone (end of March).

[12:48] <[Coke]> (sooner if possible)

[12:50] <[Coke]> https://github.com/Raku/doc/issues/302 was the original ticket where we were discussing what this might look like.

[12:53] <discord-raku-bot> <Nemokosch> what would that module do exactly?

[12:53] <discord-raku-bot> <Nemokosch> Iirc there is a module that dies if you don't fulfill some version constraint, courtersy of Zoffix

[12:54] *** hythm joined
[12:56] <[Coke]> that's it, die if your compiler version didn't match.

[12:56] <[Coke]> Sure, if it's already out there, maybe we can save lizmat a few minutes here.

[12:57] <discord-raku-bot> <Nemokosch> https://github.com/raku-community-modules/RakudoPrereq

[12:58] <discord-raku-bot> <Nemokosch> it doesn't seem like a lot of work; if you decide on a different interface, this could probably even be archived, with some pointers to the new thing

[12:58] <[Coke]> looks like the syntax there is a little different (and only lets you set a minimum version, not a where clause), but seems good enough.

[12:59] <[Coke]> added that to the ticket, thanks.

[13:05] <lizmat> fwiw, I think if you want to match the documentation with the use statement, a new module may make sense after all

[13:05] <hythm> .tell Nemokosch: wrt to grammar question I posted a few days ago, looks like I needed to do two things to solve the issue, first needed to use `|` semantics (as you suggested), instead of `proto` which seems uses `||` semantics. second needed to use `regex` instead of `token`, looks like regex backtracks to find best match. updated the gist with

[13:05] <hythm> the changes https://gist.github.com/hythm7/128bc02c19036ba0f39fc0f9b827f892

[13:05] <tellable6> hythm, I'll pass your message to Nemokosch

[13:06] <discord-raku-bot> <lucs> Aha! Yes, that appears to work fine. Thanks for the code and for the explanation!

[13:14] *** jpn left
[13:15] <[Coke]> lizmat: I agree. we can always point to the prior art and include the info about why a new one in the readme.

[13:17] <discord-raku-bot> <Nemokosch> oh yes, regex backtracks, I did know that part but I didn't know that would have the right consequence here

[13:33] <moritz> I generally recommend to avoid backtracking over regex boundaries in a grammar, things can get very confusing very quickly

[13:36] <hythm> If no backtracking over regex, what would be the alternative

[13:42] *** jpn_ joined
[13:42] <moritz> I have no idea what you're parsing, but generally you can chose your tokens/regexes in a way that once you have parsed something as a token, you commit to that

[13:43] <moritz> (at least when parsing computer code/languages; might be different for natural language)

[13:47] <discord-raku-bot> <Nemokosch> well a lot of the issue boils down to the grammar definition, that's for sure

[13:49] <hythm> I', trying to parse a command line options by grammar. lets say I have an option that is both can be specified as boolean or as having value. lets say an option  named "deps", when grammar sees "deps", actions method will make `deps => True`. when grammar sees "deps test", action method will make `deps => 'test'. so far so good, but if there is

[13:49] <hythm> exisiting another option named "test", therre will be an issu

[13:49] <hythm> e how to parse it, should be paresd as two options "deps" and "test", ot one option "deps => test"

[13:51] <moritz> and if the input string is "--deps --verbose", then --verbose will be parsed as a separate option?

[13:52] <moritz> token option-with-optional-argument { '--deps' \s  <argument-that-does-not-look-like-option>? }

[13:53] <moritz> token argument-that-does-not-look-like-option { <!before '--'> \S+ }

[13:54] <hythm> Thanks will try these and see how it goes.

[13:54] <hythm> re: "and if the input string is "--deps --verbose", then --verbose will be parsed as a separate option?"¬† ¬†yes.

[13:56] <moritz> token option-with-optional-argument { '--deps' [ \s+  <argument-that-does-not-look-like-option> ]? } # likely better, the separating space should also be optional

[14:02] <hythm> regarding the optional space, I'm thinking to make use of it in an edge case when the user really want "deps test" to be parsed as `deps => "test"`, instead of parsed as two options"deps" and "test". so the user can remove the optional space "depstest"

[14:03] <hythm> anyway I'll try the above and see how it goes, thanks

[14:05] *** jpn_ left
[14:10] *** razetime joined
[14:10] <hythm> if I'm not prefixing options with `--` (meaning "verbose" instead of "--verbose", how token argument-that-does-not-look-like-option will look like

[14:14] <moritz> well, you have to have *something* to distinguish options from their arguments

[14:14] <moritz> even if it's a hard-coded list of possible option names

[14:15] <moritz> if you don't, neither the grammar nor a human has a good chance to parse it correctly

[14:46] <discord-raku-bot> <el gatito (** advocate)> oh no üò¢  ===> Searching for: fez ===> Updating fez mirror: https://360.zef.pm/ !!!> Failed to update fez mirror: https://360.zef.pm/ ===> Updating rea mirror: https://raw.githubusercontent.com/Raku/REA/main/META.json !!!> Failed to update rea mirror: https://raw.githubusercontent.com/Raku/REA/main/META.json No candidates found matching identity: fez 

[14:48] *** jpn joined
[14:53] *** rf joined
[14:55] <rf> Good morning folks.

[15:04] <discord-raku-bot> <Anton Antonov> @rf Did you eat all buns yet?

[15:05] <rf> No, but i'm ashamed to say I ate 6 out of the 14 I made haha

[15:05] <discord-raku-bot> <lucs> Solved: Renaming an exported sub: https://gist.github.com/lucs/cc60e0b0f6a34df09b5bf7bf704da061

[15:06] <discord-raku-bot> <Anton Antonov> @rf Well, it is a good idea to eat you own food -- helps aligning the food preparation process.

[15:06] <discord-raku-bot> <Anton Antonov> @rf So, what is the verdict? You did good?

[15:06] <discord-raku-bot> <el gatito (** advocate)> can someone add my module to p6c https://github.com/dangduomg/Super

[15:06] <rf> Yeah I like them, by far my best attempt yet!

[15:07] <rf> @el gatito you should upload to zef

[15:08] <discord-raku-bot> <Anton Antonov> @rf Ok, not to be too obnoxious here, but how many attempts did you do?

[15:08] <discord-raku-bot> <el gatito (** advocate)> i can't install fez

[15:08] <rf> Lol. I've been trying to make them for about 2 months, maybe 3 tries total I am not a very good baker :D

[15:09] <rf> Why not @el gatito?

[15:09] <discord-raku-bot> <Anton Antonov> @rf Cool. (Persistence is the key.)

[15:09] <discord-raku-bot> <Nemokosch> it would be better to fix that installation because p6c is not usable in the long run

[15:09] <rf> ^^

[15:09] <discord-raku-bot> <Nemokosch> is there a reason you put the subs inside a class?

[15:09] <discord-raku-bot> <el gatito (** advocate)> rf:  C:\Users\jack9>zef install fez ===> Searching for: fez ===> Updating fez mirror: https://360.zef.pm/ !!!> Failed to update fez mirror: https://360.zef.pm/ ===> Updating rea mirror: https://raw.githubusercontent.com/Raku/REA/main/META.json !!!> Failed to update rea mirror: https://raw.githubusercontent.com/Raku/REA/main/META.json No candidates found matching identity: fez 

[15:10] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/02/20/2023-08-gherkining/

[15:10] <rf> lizmat++

[15:11] <discord-raku-bot> <lucs> Nemokosch: I'm not quite sure. The idea is to make them available when the user does "use A".

[15:11] <discord-raku-bot> <Nemokosch> to be fair...

[15:11] <discord-raku-bot> <Nemokosch>  ===> Searching for: fez ===> Updating fez mirror: https://360.zef.pm/ ===> Updated fez mirror: https://360.zef.pm/ The following distributions will be upgraded: fez:ver<40>:auth<zef:tony-o>:api<0> ===> Updating: fez:ver<40>:auth<zef:tony-o>:api<0> Segmentation fault 

[15:11] <rf> Lol.

[15:12] <discord-raku-bot> <Nemokosch> An unexpected old friend...

[15:12] <rf> el gatito: What version of rakudo?

[15:12] <discord-raku-bot> <Nemokosch> (installed for the second time though)

[15:13] <discord-raku-bot> <el gatito (** advocate)>  C:\Users\jack9>raku -v Welcome to RakudoŒì√§√≥ v2022.12. Implementing the Raku‚î¨¬´ Programming Language v6.d. Built on MoarVM version 2022.12.  C:\Users\jack9>zef --version v0.14.5 

[15:13] <discord-raku-bot> <Nemokosch> looks like Windows

[15:13] <discord-raku-bot> <el gatito (** advocate)> my terminal doesn't support unicode lmao

[15:13] <discord-raku-bot> <Nemokosch> @lucs frankly I keep mixing up what name signifies what but I'm assuming it didn't work without

[15:14] <discord-raku-bot> <Nemokosch> a class is a package probably

[15:14] <rf> @el gatito maybe clone and build from master

[15:15] <discord-raku-bot> <el gatito (** advocate)> https://tenor.com/view/crying-emoji-dies-gif-21956120

[15:15] <discord-raku-bot> <Anton Antonov> @lizmat The link to "Intl::Format::Number" is not working; it should be https://raku.land/zef:guifa/Intl::Format::Number . (And thank you very much for posting!)

[15:15] <rf> git clone https://github.com/tony-o/raku-fez.git && cd raku-fez && zef install . --force-install

[15:15] <rf> el gatito ^

[15:16] <rf> Adjust that to be windows compatible lol. Sorry I am not sure how windows works at all for command line

[15:16] <rf> I think powershell is posix compliant so maybe use that

[15:17] <discord-raku-bot> <Nemokosch> zef can still install from a github link iirc

[15:17] <lizmat> Anton Antonov  thanks for the headsup, fixed: the link was to the version I just removed from the ecosystem  :0)

[15:17] <discord-raku-bot> <Nemokosch> zef install https://github.com/tony-o/raku-fez.git

[15:17] <rf> Oh yeah forgot about that. zef install --force-install -v https://github.com/tony-o/raku-fez.git

[15:17] <rf> I find I need force-install if the build has failed sometimes

[15:18] <discord-raku-bot> <Nemokosch> hmmm

[15:18] <discord-raku-bot> <Nemokosch> not sure if that's intended or not

[15:18] <discord-raku-bot> <el gatito (** advocate)> also why raku has 3 ecosystems üò≠

[15:18] <rf> Don't ask why.

[15:18] <discord-raku-bot> <Nemokosch> historical reasons - nowadays, only "the zef ecosystem" should be relevant

[15:18] <rf> Yeah, only use zef.

[15:18] <discord-raku-bot> <Nemokosch> the other two were experimental attempts, so to speak

[15:21] <discord-raku-bot> <el gatito (** advocate)>  Unable to find a suitable handler for web (tried Fez::Util::Curl, Fez::Util::Wget) 

[15:22] <discord-raku-bot> <el gatito (** advocate)> failed

[15:23] <discord-raku-bot> <lucs> Nemokosch: Interestingly, the only apparent difference when having the proto and the multis outside the class (no class necessary then) and changing the 'Map.new' line from ÔΩ¢‚Ä¶ => &A::orig ‚Ä¶ÔΩ£ to ÔΩ¢‚Ä¶ => &orig ‚Ä¶ÔΩ£ is that when doing ÔΩ¢use A 'mine';ÔΩ£, the 'orig' sub remains visible instead of being undeclared (I have no idea why -- I'm semi-cargo-culting all this).

[15:25] <discord-raku-bot> <Nemokosch> that's probably because it is our-scoped

[15:25] <discord-raku-bot> <Nemokosch> what if you take your former code and check if you can see A::orig?

[15:26] <discord-raku-bot> <Nemokosch> (iirc classes are our-scoped themselves)

[15:26] <discord-raku-bot> <el gatito (** advocate)> full text: https://gist.github.com/dangduomg/7c4f8f9b1f83bde8b577869f5e8c69ca

[15:26] <discord-raku-bot> <el gatito (** advocate)> in conclusion: can't install fez on windows üò≠

[15:27] <discord-raku-bot> <lucs> Nemokosch: Not sure which former code you mean -- I've done so many variations, eh. What you're thinking about is not mentioned in my latest gist?

[15:27] <discord-raku-bot> <Nemokosch> well you are doing a great service by at least figuring that out and illustrating the demand

[15:27] <lizmat> [Coke]: considering Rakudo::Version as the name of the module

[15:28] <lizmat> allowing for "use rakudo v2022.01+"

[15:28] <discord-raku-bot> <Nemokosch> the one you said about that "it worked"

[15:29] <rf> el gatito: You need curl installed

[15:29] <discord-raku-bot> <el gatito (** advocate)> rn only way is to download the module yourself and zef install it

[15:29] <rf> https://curl.se/windows/

[15:29] <[Coke]> lizmat: sounds good to me.

[15:30] <discord-raku-bot> <lucs> Nemokosch: Sorry, I'm really not sure which one you mean -- the code would need to be spelled out.

[15:33] <discord-raku-bot> <Nemokosch> the code you made the "difference" to

[15:33] <discord-raku-bot> <Nemokosch> and the "difference" was that orig became visible

[15:34] <discord-raku-bot> <Nemokosch> now I'm hypothesizing that A::origin became invisible, in return - something that we earlier haven't paid attention

[15:36] *** cfa joined
[15:38] *** jpn_ joined
[15:41] <discord-raku-bot> <el gatito (** advocate)> rf: ok, where do i place the directory for curl for zef to recognize

[15:41] *** jpn left
[15:43] <discord-raku-bot> <lucs> Nemokosch: When the A class wraps the "our proto" and the multis and the 'Map.new' has ÔΩ¢"&$new-name" => &A::origÔΩ£, then having ÔΩ¢use A 'mine'ÔΩ£ makes 'orig() undeclared, but 'A::orig()' is visible.

[15:46] <discord-raku-bot> <Nemokosch> then gotcha - there is the one extra sub

[15:48] <discord-raku-bot> <lucs> The 'our' at work, eh. But for my use case, this is okay, since it's the plain 'orig()' that I want to hide. If the user does 'A::orig()', well they know exactly what they're getting.

[15:51] <discord-raku-bot> <el gatito (** advocate)> rf:

[15:53] <discord-raku-bot> <el gatito (** advocate)> oh just add curl to PATH

[15:53] <discord-raku-bot> <el gatito (** advocate)> found that out by reading the code lol

[15:54] *** Sgeo joined
[15:55] <cfa> lucs: if you don't want the our, how about https://gist.github.com/cfa/4efb1fa5eb2f98ae472c3211ccc6abaf ?

[15:56] <discord-raku-bot> <lucs> cfa: Not that I don't want it per se, but that's an interesting idea, I'll play with it.

[15:58] *** freeside joined
[15:58] <lucs> freeside: Hallo!

[15:59] <rf> el gatito: Did it end up working?

[16:01] *** jpn joined
[16:02] *** freeside left
[16:03] *** jpn_ left
[16:04] <discord-raku-bot> <el gatito (** advocate)> i also have to install tar

[16:04] <discord-raku-bot> <el gatito (** advocate)> it worked now

[16:04] <discord-raku-bot> <el gatito (** advocate)> poggers

[16:05] <rf> Nice.

[16:13] *** freeside joined
[16:14] <discord-raku-bot> <el gatito (** advocate)> what C:\Users\jack9\Documents\raku\Super>fez upload =<< ERROR: Failed to write 67 bytes to filehandle: Bad file descriptor 

[16:18] *** freeside left
[16:19] <discord-raku-bot> <el gatito (** advocate)> bruh

[16:19] <ugexe> Modern versions of windows 10 and 11 come with both curl and tar 

[16:20] <ugexe> shouldn‚Äôt need to update PATH when using them either 

[16:20] <cfa> as part of wsl, or just normal binaries?

[16:20] <ugexe> normal binaries 

[16:20] <cfa> (i haven't used windows since, hmm, 7?)

[16:20] <cfa> and then, only very briefly

[16:21] <ugexe> Windows 7 is no longer supported so I suspect there won‚Äôt be much more catering to it 

[16:22] <cfa> oh, i just meant that my knowledge of the platform is fairly dated

[16:22] <cfa> the last windows i used "properly" was probably 2000

[16:23] <cfa> that's *cough cough* years old at this point

[16:23] * cfa sighs

[16:23] <ugexe> https://pureinfotech.com/tar-curl-windows-10/

[16:25] <rf> el gatito are you on windows 7?

[16:26] <ugexe> Depending on a specific version of rakudo (or even rakudo in general) should be discouraged in distributed modules 

[16:26] <discord-raku-bot> <el gatito (** advocate)> i use older versions of windows 10 (because my computer is 10 years old and screams at higher versions)

[16:26] <rf> Maybe its time to use linux :^)

[16:26] <ugexe> otherwise in the future we end up with ecosystems for each raku compiler 

[16:27] <discord-raku-bot> <el gatito (** advocate)> rf: need spare flash drives for that lmao

[16:28] <ugexe> I would suggest updating windows 10 to something more modern. Not necessarily 11, but at least the latest patches / service packs 

[16:28] <discord-raku-bot> <el gatito (** advocate)> does anyone know this error

[16:28] <rf> I can almost gurantee that is something to do with windows version

[16:29] *** pingu joined
[16:30] <ugexe> Windows 10 build 17063 and later

[16:30] <discord-raku-bot> <el gatito (** advocate)> in case you are curious i use build 10240 lmao the og windows 10

[16:31] *** ab5tract joined
[16:43] <rf> Virtual machine?

[16:43] <rf> If you aren't willing to update windows, or install linux VM is probably your only option

[16:47] <[Coke]> ugexe++

[16:47] <discord-raku-bot> <el gatito (** advocate)> windows 10 version 1803 should be good enough imo

[16:50] <discord-raku-bot> <el gatito (** advocate)> it contains build 17063

[16:51] <discord-raku-bot> <el gatito (** advocate)> cygwin?

[16:51] <rf> WSL

[16:51] <[Coke]> I have a build version higher than that here (still on windows 10), been mostly ok.

[16:51] <[Coke]> (using neither cygwin nor wsl)

[16:52] *** abraxxa-home left
[16:56] *** freeside joined
[16:59] <lizmat> [Coke]: https://raku.land/zef:lizmat/Rakudo::Version

[17:04] *** freeside left
[17:06] <discord-raku-bot> <Nemokosch> yes, one shouldn't depend on Rakudo versions, yet it's probably an invisible bomb for a long time

[17:06] <discord-raku-bot> <Nemokosch> with modules that downright use NQP

[17:06] <[Coke]> lizmat: thank you. I may provide a PR that addresses ugexe's concern about balkanizing the ecosystem.

[17:13] *** QhpAptyj9hj0RQwM joined
[17:26] *** freeside joined
[17:28] *** perlbot left
[17:29] *** simcop2387 left
[17:30] *** freeside left
[17:31] *** simcop2387 joined
[17:33] *** perlbot joined
[17:35] <[Coke]> (just a note in the README)

[17:36] *** razetime left
[17:39] *** dakkar left
[17:40] *** jpn_ joined
[17:42] *** jpn left
[17:47] *** jpn_ left
[17:48] *** freeside joined
[17:52] *** freeside left
[17:54] <ugexe> We don‚Äôt try to make it easier to e.g. use nqp

[17:59] <discord-raku-bot> <Nemokosch> How to put it. The guidance to not use nqp just to gain performance, is indeed out there. But then there is also JSON::Fast which must be among the most used Raku dists out there - all NQP. And truth be told, I'm also relying a lot on stuff like HTML::Entity::Fast, simply because the performance benefit couldn't be overlooked...

[18:00] *** reportable6 left
[18:00] <ugexe> truth be told it shouldnt be written in nqp

[18:01] <ugexe> or rather it should be written in nqp and in the core

[18:01] <ugexe> (which it is, so rather it should be a public feature)

[18:03] *** reportable6 joined
[18:03] <ugexe> if we want to bless a single compiler into existence and base our future outlook on a single compiler then i'll change my stance though

[18:05] <discord-raku-bot> <Nemokosch> Fair enough. It seems that these days, it's worth considering. Currently, it doesn't seem legitimate to create another Raku compiler - neither technically, nor specification-wise (it's not worked out well to actually make that possible), nor ecosystem-wise (a lot of stuff would just downright break)

[18:06] <discord-raku-bot> <Nemokosch> Also, the development of the language itself is driven by what can be achieved with Rakudo

[18:06] <ugexe> technically there actually is a public interface to JSON parsing through CUR, you just have to use it in a way it wasn't intended

[18:07] <cfa> specification-wise, isn't it the case that any compiler that passes the test suite is spec-compliant?

[18:07] <ugexe> there was a time that zef ran on parrot, moarvm, and jvm (and maybe even niecza)

[18:07] <ugexe> so the dream technically was alive at one point

[18:08] <cfa> i

[18:08] <cfa> (also, i'm not sure what "doesn't seem legitimate" means)

[18:08] <cfa> infeasible, perhaps?

[18:09] <discord-raku-bot> <Nemokosch> cfa: what I mean is that a lot of what we usually just consider "the language", is actually not specified - I guess because that would put a lot of burden to a possible other implementation, pressure onto it to be like Rakudo

[18:09] <discord-raku-bot> <Nemokosch> a massive example is the metamodel

[18:09] <cfa> yeah, good point

[18:09] <cfa> i remember controversy at documenting some of the *HOW stuff on the doc site

[18:10] <discord-raku-bot> <lucs> Which Discord channel would be appropriate to suggest an IRC-bridge improvement?

[18:10] <discord-raku-bot> <Nemokosch> #meta probably

[18:10] <discord-raku-bot> <lucs> Okay, I'll go there.

[18:10] <discord-raku-bot> <Nemokosch> back to metamodel business - ... but to give up on actually using the metamodel to any extent, seems like a huge cost

[18:11] *** sena_kun left
[18:11] <discord-raku-bot> <Nemokosch> a lot of things that you could do easily, "by writing Raku code", would suddenly become unavailable

[18:12] <discord-raku-bot> <Nemokosch> another itch that I keep getting back to is the versioning. Right now, there is no precedent of handling bigger changes - although it seems at least mainstream to think that some breaking changes would be beneficial at the right time and in the right form

[18:13] <cfa> i mean, there's a difference between leveraging implementation-specific details and calling an established api

[18:13] *** freeside joined
[18:13] <discord-raku-bot> <Nemokosch> then we can say that there is no "established api" at the moment, and I don't know what cost it would take and who would be willing to work it out

[18:14] <ugexe> using features that were just implemented are usually a bad idea anyway. they need to be baked into a few releases so e.g. apt-get users using a rakudo thats only like a year old don't have a terrible experience

[18:15] <ugexe> in a distribution other people will use at least

[18:15] <ugexe> for programs that aren't distributed knock yourself out

[18:16] <discord-raku-bot> <Nemokosch> That's also a point

[18:17] <discord-raku-bot> <Nemokosch> At the same time, it's good to feel that there is continuous development in the most literal sense of the word, and perhaps find ways to show it, too.

[18:18] *** freeside left
[18:18] <ugexe> i'm trying to think of a feature that a program like zef would be better off using immediately

[18:18] <cfa> hmm, how do distributions like debian treat rakudo versioning?

[18:18] <cfa> and are dated bugfix releases still made?

[18:18] <cfa> like would there be a 2022.12.3?

[18:18] <ugexe> i imagine i'd probably just implement that feature in zef until that feature is in a few rakudo releases

[18:18] <discord-raku-bot> <Nemokosch> I guess that's again the cost of "CoreHackers" pretending to be users, like myself. For me, a 2 years old Rakudo compiler is unusable, not even because of missing features but mainly because of all the bugs that I'm aware of and would step on.

[18:19] <ugexe> the p6c ecosystem gets generated by a pretty old rakudo

[18:20] <discord-raku-bot> <Nemokosch> When I need to get something used by others for company, I'd tell them to get rakubrew by running like 2 commands in the command line, and come straight to the "bleeding edge"

[18:20] <ugexe> for a regular user i dont think old rakudos are that much of a show stopper other than when they try to use modules that don't work on old versions

[18:20] <cfa> or when they run into a bug that was that was fixed in a later release

[18:20] *** jpn joined
[18:21] <ugexe> i mean bugs still get introduced in new versions as well

[18:21] <cfa> sure -- but that might be a 'show stopper' scenario

[18:21] <ugexe> but what i mean is i almost never hit rakudo bugs when i'm writing programs

[18:21] <discord-raku-bot> <Nemokosch> yes, fair enough - and this is where the bias kicks in. If you know the old bugs, you are probably much more sensitive to that

[18:21] <ugexe> only when im writing modules or doing core development

[18:21] <cfa> i've run into quite a few

[18:21] <discord-raku-bot> <Nemokosch> because you might remember them being fixed

[18:22] <discord-raku-bot> <Nemokosch> or how much you were bothered by them

[18:22] <discord-raku-bot> <Rog> Yes, I would definitely like some consistency and some way to handle moderation across the ‚Äúdivide‚Äù so to speak

[18:22] <cfa> i suppose the sensible response hereis a good test suite, plus rakubrew to test against a reasonable set of older versions

[18:23] <discord-raku-bot> <Nemokosch> For Roast, I think it's just not what it claims to be. It's a semi-decent test suite for Rakudo, as things stand

[18:23] <cfa> why semi-decent, and what's missing?

[18:24] <discord-raku-bot> <Nemokosch> Remember the bug with lists of custom-key hashes?

[18:24] <cfa> you mean the hash bug i reported?

[18:24] <discord-raku-bot> <Nemokosch> yep

[18:24] <cfa> yeah

[18:25] <discord-raku-bot> <Nemokosch> That's just one handy example but bugs like that happen quite often. That was a regression that nobody noticed for seven years

[18:25] <discord-raku-bot> <Nemokosch> I added like two tests for it but one can quickly think of cases that still aren't covered

[18:26] <cfa> sounds like a great initiative

[18:27] <discord-raku-bot> <Nemokosch> well I'm planning to return to the whole "storing (and storing into) different Maps" topic, just didn't want to jump into it right now

[18:27] <rf> The only bug in Rakudo I ever hit is the `our %map is Map;` bug

[18:27] <cfa> i meant spending time adding tests if you can think of cases that aren't covered already

[18:27] <cfa> perhaps not as glamorous as other core development but surely very important

[18:28] <discord-raku-bot> <Nemokosch> so yes - I'd say that's the easier part. To make Roast a decent Rakudo test suite üòõ

[18:29] <cfa> oh huh, https://github.com/rakudo/rakudo/issues/2753 is still causing a panic

[18:29] *** QhpAptyj9hj0RQwM left
[18:30] <cfa> Nemokosch: saying it's not 'decent' strikes me as dismissive but sure, being able to catch regressions early is always good

[18:30] <tellable6> cfa, I'll pass your message to Nemokosch

[18:30] <discord-raku-bot> <Nemokosch> What word would you fancy to express the idea that it's not as good as it should be?

[18:31] <cfa> to make a more comprehensive suite, i guess?

[18:31] <discord-raku-bot> <Nemokosch> Okay, so - to make Roast an actually comprehensive Rakudo test suite seems to be the easier part.

[18:32] <discord-raku-bot> <Rog> lizmat - Discord owner here: as far as how I want to handle moderation concerns in the future, I have two goals

[18:32] <discord-raku-bot> <Nemokosch> To make it a generic language specification that provides one a usable interface and followable, consistent features tied to language versions, regardless of the internals of a compiler - that would be much harder.

[18:33] <discord-raku-bot> <Rog> 1. Shutting down the bridge entirely should no longer be (or need to be) our first course of action, and it sounds like we are moving toward that which is good

[18:34] <discord-raku-bot> <Rog> 2. We need some channel of communication between moderators on either side and some standards on how to handle situations where there is inappropriate behavior spotted by someone who has no power on the ‚Äúother side‚Äù

[18:35] <lizmat> agree on 1 and 2

[18:35] <discord-raku-bot> <Rog> On our end we essentially have a team of two, one of whom is me, and I have quite a bit going on atm

[18:36] <discord-raku-bot> <Rog> Zephyr is doing an excellent job thankfully but maybe we need one more person in my time zone for coverage. idk, will figure that out later

[18:38] <discord-raku-bot> <Rog> As for this situation in particular, I have only had time to glance through the relevant discussion, but my impression is that everybody has the same ultimate goal of making Raku a success, but the desire to be argumentative if creating division where there need not be any

[18:38] *** freeside joined
[18:38] <discord-raku-bot> <Rog> s/if/is/

[18:38] <lizmat> Rog indeed

[18:39] <lizmat> indeed : some of the users describe interactions as ranging from "everything is a fight" to "toxic"  :-(

[18:40] <discord-raku-bot> <Rog> My expectation here is that we drop the negative tone and always assume the best of other people rather than jumping to snark or attacks

[18:40] <lizmat> whereas there's never a mention of malicious intent to harm Raku

[18:40] <discord-raku-bot> <Nemokosch> by the way: Daniel Sockwell texted me yesterday and hopefully you received my mail, too

[18:40] <discord-raku-bot> <Nemokosch> seemed like the intention was to have a discussion in the upcoming days

[18:41] <lizmat> Rog I hope so

[18:41] <lizmat> Nemokosch  indeed

[18:45] <discord-raku-bot> <Rog> I will try to stay more active over the coming weeks and get a bead on how things feel

[18:46] <discord-raku-bot> <Nemokosch> Just sticking to the tighter events of the last couple of days, that consists of multiple topics, ranging from my personal contribution to the relations within the active part of the community and better targeting the right messages to the right audience overall

[18:47] *** freeside left
[18:48] <lizmat> Rog thanks!

[18:49] *** freeside joined
[18:50] *** swaggboi joined
[18:51] <cfa> uh, sorry if i prompted that

[18:53] *** freeside left
[18:59] <discord-raku-bot> <Nemokosch> I don't think so; it's just these things kinda look different on Discord.

[18:59] <discord-raku-bot> <Nemokosch> I don't think replies are attached in any shape or form

[19:02] *** jpn left
[19:02] *** sena_kun joined
[19:09] *** pingu left
[19:11] *** derpydoo joined
[19:25] *** jpn joined
[19:34] *** freeside joined
[19:39] *** freeside left
[20:29] <[Coke]> on windows, I have $dir = "C:\...", and can do `dd dir $dir.IO` and get a subfolder. if I add that subfolder to the path, I can get True on .IO.e, .IO.d, but if I dd dir $dir.IO, I get an error reading the dirhandle.

[20:31] <gfldex> [Coke]: is .resolve or .absolute changing the behaviour?

[20:32] *** jpn left
[20:34] <[Coke]> gfldex: just tested: nope.

[20:34] *** freeside joined
[20:35] <[Coke]> before invoking dir and failing, the path name is 258 chars.

[20:36] <gfldex> [Coke]: there used to be filemon from sysinternals that would should the error as reported by the win32 API. Sadly, I can't remember to what they renamed that tool.

[20:37] <gfldex> the limit is 260 characters. Unclear if that is really characters or bytes.

[20:37] <[Coke]> I'm guessing this is related to the long filename issue (but the file in that directory *exists*, and I can cd there in git bash and look at it.)

[20:37] <gfldex> ohh, the volume is not included

[20:37] <gfldex> so you are beyond the limit

[20:37] <gfldex> see: https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation

[20:39] *** freeside left
[20:40] <[Coke]> ok, so if I update the registry this might work.

[20:40] <gfldex> Frankly, if you got the problem, you are very likely heading for another cliff.

[20:41] <gfldex> Have you considered to use a proper OS? :->

[20:45] *** jpn joined
[20:46] <gfldex> [Coke]: I believe the proper way of dealing with this is to avoid absolut paths.

[20:48] <ugexe> Thing is, libuv uses UNC paths which isn‚Äôt beholden to that rule

[20:48] <ugexe> so I dunno why it this length issue occurs in the first place 

[20:48] <[Coke]> my path explicitly has a C:\ in it, if that matters.

[20:49] <[Coke]> (well, this test file. the original was relative, I think)

[20:49] <[Coke]> I updated the registry, rebooted, the error is still occuring.

[20:50] <[Coke]> the page you linked says we also have to update the "application manifest", but I don't think we have one of those for rakudo. :|\

[20:51] <ugexe> https://github.com/libuv/libuv/issues/2331 For example 

[20:51] <ugexe> I wonder if we use a non libuv file op somewhere 

[20:56] <[Coke]> Looks like MVM_dir_open is not using libuv on windows?

[20:57] <ugexe> Nice, can you link it? I‚Äôm on my phone 

[20:57] <[Coke]> https://github.com/MoarVM/MoarVM/blob/master/src/io/dirops.c#L217

[20:58] <[Coke]> in fact, it looks like non windows is just calling "opendir", not anything in libuv.

[20:59] <[Coke]> looks like nine wrote most of that in 2019.

[21:04] <ugexe> yeah I think replacing that with whatever the libuv variant is might solve the path length issue

[21:05] *** jpn left
[21:06] *** cfa left
[21:08] *** swaggboi left
[21:13] <ugexe> hmm maybe thats not it either though. `raku -e "my $path = q|a| x 400; say $path.IO.open(:create)"` fails with no such file

[21:13] <ugexe> if i s/400/40/ it works

[21:19] <ugexe> https://github.com/MoarVM/MoarVM/blob/34bae78d45c5723d7b5d72d18f4016578f1aecbe/src/io/dirops.c#L71 this function looks like it might need to remove the MAX_PATH check and just always run the logic

[21:20] <ugexe> i wish i had an easy way to get a stack trace on windows... or how even :P

[21:20] <ugexe> knew how^

[21:27] <ugexe> [Coke]: do you get the same error with that one liner i posted? and have you done the supposed enabling of long paths in the windows registry or whatever?

[21:28] <ugexe> my vmware trial ends in 3 days :(

[21:36] <[Coke]> ugexe: your oneliner: No such file or directory

[21:36] <[Coke]> (works with 40)

[21:36] <[Coke]> I did update the registry and rebooted

[21:37] <[Coke]> I can probably setup an azure VM and get folks access, but I don't recall what version of windows you can get with that.

[21:39] <[Coke]> MAX_PATH is also checked in mkdir

[21:43] <ugexe> same with MVM_dir_cwd

[21:44] <[Coke]> I'll try a build that just removes that check and see if it explodes.

[21:44] <[Coke]> (and put the registry back and see how it explodes there.)

[21:45] <ugexe> thing is the one-liner i posted shouldnt use mkdir

[21:45] <ugexe> it just creates a file in the current directory

[21:45] <ugexe> so while reading a directory might be the cause, creating one would seem unlikely (at least in the case of the one liner)

[21:46] <ugexe> the good news is updating moarvm to use new libuv uv_ ops is pretty easy and one can basically just look at a PR for any of the existing ops

[21:46] <ugexe> usually just writing a small wrapper around the function

[21:47] <ugexe> they also don't need a windows machine to do it

[21:53] <[Coke]> OK. that's probably better than trying to half-rip out MAX_PATH.

[22:02] <[Coke]> ugexe: added https://github.com/MoarVM/MoarVM/issues/1743

[22:08] *** evalable6 left
[22:08] *** linkable6 left
[22:08] *** evalable6 joined
[22:11] *** linkable6 joined
[22:14] *** ab5tract left
[22:29] *** QhpAptyj9hj0RQwM joined
[22:30] *** NemokoschKiwi joined
[22:34] *** QhpAptyj9hj0RQwM left
[22:43] <ugexe> so my golf is a bit misguided in a way

[22:44] *** sena_kun left
[22:44] <ugexe> `raku -e 'my $path = q|a| x 255; say $path.IO.mkdir'` # works, even though im inside a directory thats like 30 characters long already

[22:44] <ugexe> `raku -e 'my $path = q|a| x 256; say $path.IO.mkdir'` # mkdir error 123

[22:44] <ugexe> i mention this because even with long path names enabled, each directory part / file name is limited to 255

[22:45] <ugexe> thing is  while the precomp errors on windows suggest path length issues, they aren't creating single path parts that are that long

[22:46] <ugexe> the above examples i ran with long path support enabeld in windows registry

[22:48] <ugexe> something like a rakudo-gdb-m dump would be pretty valuable

[22:56] <ugexe> it seems like when i try to create a file it takes the entire path length into consideration, not each path part individually

[22:59] *** NemokoschKiwi left
[23:07] *** swaggboi joined
[23:35] *** freeside joined
[23:39] *** freeside left
[23:40] *** jgaz joined
