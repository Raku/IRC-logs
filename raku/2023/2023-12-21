[00:02] *** jpn left
[00:04] *** discord-raku-bot left
[00:05] *** discord-raku-bot joined
[00:13] *** Sgeo joined
[00:29] *** Summer left
[00:30] *** Summer joined
[00:35] *** dbonnafo2 joined
[00:39] *** dbonnafo2 left
[01:00] *** Summer left
[01:00] *** Summer joined
[01:17] *** Manifest0 left
[01:31] *** Summer left
[01:31] *** Summer joined
[01:37] *** constxqt_ left
[01:44] <Xliff> \o
[01:44] <Xliff> Can someone tell me why my %?RESOURCES is empty? I have the entry in META6.json and files exist in resources/ -- am I missing anythinng
[01:55] *** constxqt_ joined
[02:01] *** Summer left
[02:02] *** Summer joined
[02:05] *** constxqt_ left
[02:06] <ugexe> Can you show your work? 
[02:11] *** MasterDuke joined
[02:11] <ugexe> I suspect you‚Äôre trying to call .keys on %?RESOURCES, but I don‚Äôt think you can do that. It‚Äôs not a hash despite the %, it‚Äôs just like a hash 
[02:14] <ugexe> You can do $?DISTRIBUTION.meta<resources> to list them 
[02:14] *** jpn joined
[02:17] *** constxqt_ joined
[02:19] *** jpn left
[02:23] *** constxqt_ left
[02:28] *** constxqt_ joined
[02:32] *** hulk joined
[02:32] *** Summer left
[02:32] *** Summer joined
[02:32] *** kylese left
[02:33] *** constxqt_ left
[02:36] *** dbonnafo joined
[02:40] *** dbonnafo left
[02:41] *** constxqt_ joined
[02:45] *** constxqt_ left
[02:56] *** constxqt_ joined
[03:03] *** Summer left
[03:03] *** Summer joined
[03:07] *** constxqt_ left
[03:08] *** jpn joined
[03:12] *** constxqt_ joined
[03:13] *** jpn left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:23] *** constxqt_ left
[03:25] *** constxqt_ joined
[03:33] *** constxqt_ left
[03:33] *** constxqt_ joined
[03:33] *** Summer left
[03:34] *** Summer joined
[03:41] *** constxqt_ left
[03:44] *** constxqt_ joined
[03:49] *** constxqt_ left
[03:59] *** constxqt_ joined
[04:04] *** Summer left
[04:04] *** Summer joined
[04:04] *** derpydoo left
[04:09] *** constxqt_ left
[04:26] *** constxqt_ joined
[04:34] *** constxqt_ left
[04:35] *** Summer left
[04:35] *** Summer joined
[04:37] *** dbonnafo2 joined
[04:41] *** dbonnafo2 left
[04:41] *** jpn joined
[04:46] *** jpn left
[05:05] *** Summer left
[05:06] *** Summer joined
[05:31] *** sdfgsdfg left
[05:32] *** sdfgsdfg joined
[05:36] *** Summer left
[05:36] *** Summer joined
[05:48] *** jpn joined
[05:53] *** jpn left
[06:07] *** Summer left
[06:07] *** Summer joined
[06:20] <discord-raku-bot> <.vushu> @melezhik it works now thank you ! https://ci.sparrowhub.io/report/3855 üôÇ
[06:20] <tellable6> 2023-12-20T20:07:50Z #raku <melezhik> vushu: SparrowCI build fails for raylib binding - https://ci.sparrowhub.io/report/3851
[06:31] *** jpn joined
[06:36] *** jpn left
[06:37] *** Summer left
[06:38] *** dbonnafo joined
[06:38] *** Summer joined
[06:42] *** dbonnafo left
[06:46] *** jpn joined
[06:53] *** jpn left
[07:00] *** jpn joined
[07:07] *** jpn left
[07:08] *** Summer left
[07:08] *** Summer joined
[07:10] <discord-raku-bot> <melezhik> Cool!
[07:10] <tellable6> 2023-12-08T16:35:28Z #raku <lizmat> melezhik: on further thought, you might want to try with something like: rak --per-line='*.lines.rotor(3 => -2)'
[07:10] <tellable6> 2023-12-08T16:40:31Z #raku <lizmat> melezhik: actually: rak --per-line='*.lines.rotor(3 => -2)>>.Str'
[07:41] *** jpn joined
[07:46] *** jpn left
[07:52] *** jpn joined
[07:57] *** jpn left
[09:00] *** dakkar joined
[09:35] *** epony left
[09:46] *** Sgeo left
[09:50] *** MasterDuke left
[09:53] *** abraxxa-home joined
[09:54] *** abraxxa-home left
[09:54] *** abraxxa-home joined
[09:56] *** abraxxa-home left
[09:56] *** Manifest0 joined
[10:18] *** sena_kun joined
[10:20] *** jpn joined
[10:38] *** dbonnafo joined
[10:40] *** atweedie left
[10:40] *** patrickb left
[10:40] *** clarkema left
[10:43] *** dbonnafo left
[10:43] *** jpn left
[10:43] *** atweedie joined
[10:44] *** patrickb joined
[10:44] *** clarkema joined
[10:55] *** epony joined
[11:17] *** Altai-man joined
[11:17] *** jpn joined
[11:18] *** patrickb left
[11:18] *** clarkema left
[11:18] *** atweedie left
[11:18] *** patrickb joined
[11:18] *** atweedie_ joined
[11:18] *** clarkema_ joined
[11:18] *** atweedie_ is now known as atweedie
[11:18] *** clarkema_ is now known as clarkema
[11:19] *** clarkema_ is now known as clarkema
[11:19] *** perlbot left
[11:19] *** simcop2387 left
[11:20] *** perlbot joined
[11:20] *** xinming left
[11:20] *** jdv left
[11:20] *** simcop2387 joined
[11:21] *** jdv joined
[11:21] *** sena_kun left
[11:21] *** xinming joined
[12:41] *** jpn left
[13:13] *** jpn joined
[13:18] *** jpn left
[13:29] *** derpydoo joined
[13:37] *** jpn joined
[13:42] *** jpn left
[14:01] *** jpn joined
[14:44] *** constxqt_ joined
[15:29] *** epony left
[15:30] *** jpn left
[15:31] *** epony joined
[15:40] *** jpn joined
[16:40] *** dbonnafo joined
[16:44] *** dbonnafo left
[16:52] *** jpn left
[16:53] *** melezhik joined
[16:53] <melezhik> o/
[16:54] <melezhik> SparrowCI how has got it's own logo (maybe not final version, but still better then nothing ... ) - https://ci.sparrowhub.io - check it out!
[16:55] <melezhik> only visible from browsers though due to some old css issue
[17:16] *** melezhik left
[17:30] *** dakkar left
[18:38] *** dbonnafo2 joined
[18:42] *** dbonnafo2 left
[19:18] *** jpn joined
[19:34] *** dbonnafo joined
[19:40] *** dbonnafo left
[20:38] *** gdown joined
[20:45] *** jpn left
[20:57] *** Summer left
[21:05] *** jpn joined
[21:11] *** Summer joined
[21:27] *** jpn left
[21:37] *** jpn joined
[21:40] <Geth> ¬¶ ecosystem/main: 95c71aa3bb | (Elizabeth Mattijsen)++ | META.list
[21:40] <Geth> ¬¶ ecosystem/main: Remove OO::Actors
[21:40] <Geth> ¬¶ ecosystem/main: 
[21:40] <Geth> ¬¶ ecosystem/main: It now lives in the zef ecosystem
[21:40] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/95c71aa3bb
[21:50] <gdown> It looks like when I tested lists as keys in hashes before, (see prev. discussion: https://irclogs.raku.org/raku/2023-12-18.html) I forgot to use an actual typed key, and just stringified it. In actuality, lists act like classes, in that different lists have a different WHICH, even if they have the same contents.
[21:50] <gdown> m: my $h := :{ 'piano' => 12, (1,2,3) => 42 }; dd $h; dd $h{$(1,2,3)}:exists
[21:50] <camelia> rakudo-moar 52aec48cd: OUTPUT: ¬´:{(1, 2, 3) => 42, :piano(12)}‚ê§Bool::False‚ê§¬ª
[21:52] <gdown> Interestingly, sets with the same contents appear that they /do/ have the same value for WHICH. Is this always true?
[21:52] <gdown> m: my $a = set(2,3); my $b = set(2,3); dd $a.WHICH, $b.WHICH
[21:52] <camelia> rakudo-moar 52aec48cd: OUTPUT: ¬´ValueObjAt.new("Set|8ED3E00FD894015F539EDEDB42909192284FF6EA")‚ê§ValueObjAt.new("Set|8ED3E00FD894015F539EDEDB42909192284FF6EA")‚ê§¬ª
[21:54] <gdown> So, sets are very easy to work with as keys, I guess
[22:37] <discord-raku-bot> <nemokosch> Good question if this is guaranteed
[22:42] <discord-raku-bot> <nemokosch> I don't see it stated in the docs, at least
[22:42] <discord-raku-bot> <nemokosch> it would make sense, though
[22:58] <discord-raku-bot> <nemokosch> I think the hash of a Set doesn't change in practice
[22:59] <discord-raku-bot> <nemokosch> however, Sets still aren't deeply immutable
[22:59] <discord-raku-bot> <nemokosch> m: my @array = 1, 2; my $set = Set.new(@a, 666); dd $set, $set.WHICH; @array.push: 4; dd $set, $set.WHICH
[22:59] <evalable6> nemokosch, rakudo-moar 52aec48cd: OUTPUT: ¬´(exit code 1) 4===SORRY!4=== Er‚Ä¶¬ª
[22:59] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '@a' is not declared at /home/glot/main.raku:1 ------> my @array = 1, 2; my $set = Set.new(‚èè@a, 666); dd $set, $set.WHICH; @array.pu 
[22:59] <evalable6> nemokosch, Full output: https://gist.github.com/7d18509523fb285c68264ac33efad2f1
[23:00] <discord-raku-bot> <nemokosch> m: my @array = 1, 2; my $set = Set.new(@array, 666); dd $set, $set.WHICH; @array.push: 4; dd $set, $set.WHICH
[23:00] <evalable6> nemokosch, rakudo-moar 52aec48cd: OUTPUT: ¬´Set $set = Set.new(666,[1, 2])‚ê§ValueObjAt.new("Set|67EECC7FAFFDED8FE3BB852BF6B3FF9ABDFA9598")‚ê§Set $set = Set.new(666,[1, 2, 4])‚ê§ValueObjAt.new("Set|67EECC7FAFFDED8FE3BB852BF6B3FF9ABDFA9598")‚ê§¬ª
[23:00] <discord-raku-bot> <Raku eval>  Set $set = Set.new([1, 2],666) ValueObjAt.new("Set|35A02A591B07452F5E764279B667F9E5B9D17FDE") Set $set = Set.new([1, 2, 4],666) ValueObjAt.new("Set|35A02A591B07452F5E764279B667F9E5B9D17FDE") 
[23:02] <discord-raku-bot> <nemokosch> I'd assume a hash that contains numbers is well-behaved but something that contains complex data is not
[23:02] <discord-raku-bot> <nemokosch> set*
[23:02] *** jpn left
[23:02] <gdown> Makes sense, seems like the WHICH for the set is calculated based on the WHICH of the array, which doesn't change
[23:03] <discord-raku-bot> <nemokosch> I'd assume a hash that contains numbers is well-behaved but something that contains complex data is not
[23:03] <discord-raku-bot> <nemokosch> set*
[23:03] *** jpn left
[23:03] *** RakuIRCLogger joined
[23:03] <gdown> Makes sense, seems like the WHICH for the set is calculated based on the WHICH of the array, which doesn't change
[23:03] *** RakuIRCLogger left
[23:03] *** Ekho left
[23:04] <discord-raku-bot> <nemokosch> which also means Set.new([1, 2],666)  === Set.new([1, 2],666) will be False
[23:04] <gdown> Yeah
[23:19] *** Ekho joined
[23:24] *** perlbot_ joined
[23:25] <jdv> El_Che: release happened
[23:25] *** bisectable6 left
[23:25] *** bisectable6 joined
[23:26] <gdown> nemokosch: Ah, sets are value objects, which is why they act like that. You can tell because calling WHICH returns a ValueObjAt instead of an ObjAt.
[23:26] *** Sevalecan left
[23:26] *** perlbot left
[23:26] *** Altai-man left
[23:26] *** perlbot_ is now known as perlbot
[23:26] *** Sevalecan joined
[23:29] <gdown> So, the correct way of using a class as a key would be to set all attributes to be immutable, and override WHICH to return a ValueObjAt: https://docs.raku.org/type/ValueObjAt
[23:29] *** Summer left
[23:30] *** Summer joined
[23:38] *** JRaspass left
[23:38] *** JRaspass joined
[23:58] *** Sgeo joined
