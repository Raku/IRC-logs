[00:00] *** reportable6 left
[00:02] *** jrjsmrtn_ left
[00:03] *** reportable6 joined
[00:17] *** jrjsmrtn joined
[00:23] *** askmeaboutloom joined
[00:24] *** jrjsmrtn left
[00:25] *** euandreh left
[00:28] *** euandreh joined
[00:40] *** jrjsmrtn joined
[00:48] *** euandreh left
[01:09] *** euandreh joined
[01:18] *** jpn joined
[01:24] *** jpn left
[02:19] <SmokeMachine> I‚Äôm playing with a new project for writing configuration with Raku and make it easy to do the changes needed live inside the code. This is just my first commit, but I like how it‚Äôs going‚Ä¶ https://fosstodon.org/@smokemachine/110687351925396075

[02:24] *** linkable6 left
[02:24] *** evalable6 left
[02:24] *** evalable6 joined
[02:25] <Voldenet> SmokeMachine: first of all and most importantly, why not use json, yaml or xml?

[02:25] <Voldenet> or toml

[02:27] *** linkable6 joined
[02:27] *** teatwo left
[02:28] *** teatwo joined
[02:33] *** askmeaboutloom left
[02:33] *** askmeaboutloom joined
[02:34] *** askmeaboutloom left
[02:34] *** tea3po joined
[02:35] <Voldenet> I get it that rakuconfig is actually raku code, and using attribute accessors uses FALLBACK ‚Äì it's neat, but

[02:35] <Voldenet> since it's code, someone might be debugging the config at some point

[02:36] <Voldenet> which sounds like a pain to maintain in the long run

[02:36] <discord-raku-bot> <antononcube> @Voldenet I was reaching similar conclusion(s) earlier today -- using JSON for "computational Markdown" plugin specifications (instead of Raku.)

[02:37] <Voldenet> I once did write config system that used javascript, it was pure hell for admins :/

[02:37] *** teatwo left
[02:37] <discord-raku-bot> <antononcube> Did the admins deserve it?

[02:37] <Voldenet> No, nobody deserves using js in configs

[02:38] <Voldenet> it's medieval-level torture

[02:38] <discord-raku-bot> <antononcube> Or you just did for the love of JavaScript?

[02:38] <discord-raku-bot> <antononcube> Ah, ok. üôÇ

[02:38] <Voldenet> I honestly thought it would be a good idea, but after having to maintain configurations of configurations

[02:38] <Voldenet> I scrapped it all

[02:39] <discord-raku-bot> <antononcube> It was JS-love, then.

[02:39] <Voldenet> but imagine, if you have one variable, you can simply define that variable and use it

[02:40] <Voldenet> instead of copying it twice‚Ä¶ :)

[02:41] <discord-raku-bot> <antononcube> There is a UNIX rule to have "smart data" and "dumb algorithms". So, I am not sure can say that using Raku -- or JavaScript -- for configurations is against that rule, or adheres to it.

[02:43] <discord-raku-bot> <antononcube> @Voldenet I think what you are saying is that using Raku in configuration files, would imply making unit tests for the configuration files themselves.

[02:43] <Voldenet> indeed

[02:44] <discord-raku-bot> <antononcube> @Voldenet Which, would mean the overall algorithm becomes too clever...

[02:45] <Voldenet> the overall algorithm shifts the weight of maintaining code to people who can't maintain the code

[02:45] <discord-raku-bot> <antononcube> Right!

[03:04] *** rf left
[03:15] *** guifa joined
[03:22] *** guifa left
[03:25] *** guifa joined
[03:53] *** guifa left
[03:57] *** guifa joined
[04:28] *** guifa left
[04:36] *** guifa joined
[04:38] *** guifa left
[05:38] *** benchable6 left
[05:38] *** squashable6 left
[05:38] *** reportable6 left
[05:38] *** notable6 left
[05:38] *** quotable6 left
[05:38] *** bloatable6 left
[05:38] *** coverable6 left
[05:38] *** greppable6 left
[05:38] *** committable6 left
[05:38] *** tellable6 left
[05:38] *** shareable6 left
[05:38] *** releasable6 left
[05:38] *** unicodable6 left
[05:38] *** linkable6 left
[05:38] *** sourceable6 left
[05:38] *** bisectable6 left
[05:38] *** evalable6 left
[05:38] *** statisfiable6 left
[05:38] *** nativecallable6 left
[05:38] *** notable6 joined
[05:38] *** nativecallable6 joined
[05:39] *** committable6 joined
[05:39] *** linkable6 joined
[05:39] *** evalable6 joined
[05:39] *** greppable6 joined
[05:39] *** unicodable6 joined
[05:39] *** bisectable6 joined
[05:40] *** benchable6 joined
[05:40] *** bloatable6 joined
[05:40] *** statisfiable6 joined
[05:40] *** tellable6 joined
[05:40] *** quotable6 joined
[05:40] *** reportable6 joined
[05:40] *** coverable6 joined
[05:40] *** releasable6 joined
[05:41] *** sourceable6 joined
[05:41] *** shareable6 joined
[05:41] *** squashable6 joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:03] *** nine left
[06:03] *** m_athias left
[06:03] *** nine joined
[06:03] *** m_athias joined
[06:06] *** willthechill left
[06:08] *** abraxxa joined
[06:18] *** euandreh left
[06:21] *** euandreh joined
[06:48] <SmokeMachine> Voldenet: I think that‚Äôs more flexible, it can be harder in some cases, but it‚Äôs more flexible. For example, I can‚Äôt see vim using json as config, or emacs, there are several window managers also using the same languages for its code and its configuration, as well ‚Äúpackage managers ‚Äú/‚Äúsystem managers‚Äù (nixos, guix). I started playing with this project because I‚Äôm planing writing a ‚Äúhome manager‚Äù to manage my 

[06:48] <SmokeMachine> modules locally installed, my project repositories on my home, my dot files, etc‚Ä¶ and I thought using Raku for its configuration would make it easier‚Ä¶

[07:21] *** evalable6 left
[07:24] *** evalable6 joined
[07:30] *** discord-raku-bot left
[07:30] *** discord-raku-bot joined
[07:35] *** Sgeo left
[07:48] *** sena_kun joined
[08:00] *** jpn joined
[08:04] *** jpn left
[08:10] *** squashable6 left
[08:13] *** squashable6 joined
[08:35] *** jpn joined
[09:33] <discord-raku-bot> <nemokosch> I don't think you can stop people from being stupid

[09:34] <discord-raku-bot> <nemokosch> and definitely not merely by offering them less choices

[09:35] *** linkable6 left
[09:35] *** evalable6 left
[09:35] <discord-raku-bot> <nemokosch> also, I think it should be just discouraging enough how bloated this "configuration format industry" is already

[09:36] *** linkable6 joined
[09:36] <discord-raku-bot> <nemokosch> in the case of YAML, you might even hear people encouraging the use of predefined functions to be executed within the configuration itself so it's already happening

[09:37] *** jpn left
[09:37] <El_Che> lo

[09:37] <El_Che> SmokeMachine: what's the scope? Something puppet like specific for raku projects?

[09:38] *** evalable6 joined
[09:40] <SmokeMachine> El_Che: more like nix‚Ä¶ storing different generations on dirs and create links on home for the files‚Ä¶

[09:41] <El_Che> no experience there

[09:42] <SmokeMachine> El_Che: it could be said that it‚Äôs like a functional puppet‚Ä¶ and you can do rollbacks‚Ä¶

[09:42] <El_Che> so the scope is not raku projects but the developer's environment?

[09:42] *** jpn joined
[09:44] <SmokeMachine> This would be the Raku project I would use this configuration module for‚Ä¶ (I would also use that on my tiled raku window manager if I write it someday‚Ä¶)

[09:44] <SmokeMachine> El_Che: ^^

[09:45] *** abraxxa left
[09:47] <SmokeMachine> El_Che: I may have misunderstood your question? The Configuration should be something generic that could be used on any Raku project. And My first project using it will, probably,  be this home dir manager which the scope is my environment and I suppose it could be useful for other developers...

[09:51] <MitarashiDango[m> I'm at the airport to head for the con, my flight is both delayed and overbooked üò≠

[10:06] *** razetime joined
[10:06] *** ecocode left
[10:06] <discord-raku-bot> <nemokosch> overbooking (or overselling, rather) is such a disgusting habit üíÄ

[10:08] *** ecocode joined
[10:20] <xinming_> m: (1..3 Z, "a".."c").raku.say;

[10:20] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´((1, "a"), (2, "b"), (3, "c")).Seq‚ê§¬ª

[10:21] <xinming_> In this example, It generates pairs, Is there a way to make Z meta operator generate  a list without pairs?

[10:21] <xinming_> we can do postprocessing afterwards, But that's now I wanted. :-)

[10:23] <dutchie> do you want that to give (1, "a", 2, "b", 3, "c") without the nesting?

[10:24] <xinming_> Yea

[10:24] <xinming_> Hmm, I don't mean the pairs, Z=> generates list of pairs,   Z,  generates lists in lists

[10:25] <xinming_> dutchie: I mean without further processing,  with Z meta-operator directly BTW.

[10:26] <discord-raku-bot> <nemokosch> I don't think that works. One could argue if it's a bug or not, let me look it up in my collection

[10:27] <xinming_> m: (1..3 Z, "a".."c").map(|*).raku.say;   # <-- This removes the nesting, But want to know if it's possible to do it with Z directly.

[10:27] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´(1, "a", 2, "b", 3, "c").Seq‚ê§¬ª

[10:27] <discord-raku-bot> <nemokosch> "Slips - X and Z disregards them" apparently that's all I wrote down

[10:31] <discord-raku-bot> <nemokosch> http://irclogs.raku.org/raku/2022-10-11.html#10:15

[10:32] <discord-raku-bot> <nemokosch> it's still the same: if you copy the output and evaluate it, suddenly you get a flat array

[10:34] <xinming_> my @test = <A B C> X[&slip] <a b c>; dd @test.Slip

[10:34] <evalable6> xinming_, rakudo-moar 4b69dd51e: OUTPUT: ¬´slip($(slip("A", "a")), $(slip("A", "b")), $(slip("A", "c")), $(slip("B", "a")), $(slip("B", "b")), $(slip("B", "c")), $(slip("C", "a")), $(slip("C", "b")), $(slip("C", "c")))‚ê§¬ª

[10:35] <xinming_> my @test = <A B C> X[&slip] <a b c>; @test.Slip

[10:35] <xinming_> m: my @test = <A B C> X[&slip] <a b c>; @test

[10:35] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of @test in sink context (line 1)‚ê§¬ª

[10:35] <xinming_> m: my @test = <A B C> X[&slip] <a b c>; @test.raku.say;

[10:35] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´[slip("A", "a"), slip("A", "b"), slip("A", "c"), slip("B", "a"), slip("B", "b"), slip("B", "c"), slip("C", "a"), slip("C", "b"), slip("C", "c")]‚ê§¬ª

[10:35] <xinming_> I now need to read the doc on X and Z again. :-(

[10:36] <discord-raku-bot> <nemokosch> they work with any infix

[10:37] <discord-raku-bot> <nemokosch> and you can fake any subroutine as infix with this [&sub] syntax

[10:38] <discord-raku-bot> <nemokosch> m: sub adder { $^left + $^right }; dd(15 [&adder] 17)

[10:38] <discord-raku-bot> <Raku eval>  32 

[10:42] <discord-raku-bot> <nemokosch> one might say that Z and X are just special-cased Z, and X, respectively

[10:44] <tbrowder__> .tell tonyo disregard, i think the window is only 2 hrs (but should be imho)

[10:44] <tellable6> tbrowder__, I'll pass your message to tonyo

[11:07] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/07/10/2023-28-composition/

[11:08] *** linkable6 left
[11:08] *** evalable6 left
[11:10] *** evalable6 joined
[11:11] *** linkable6 joined
[11:19] <El_Che> lizmat++

[11:46] *** jpn left
[11:56] <leont> I forgot to release so didn't make it into this weeks list of updated modules :-o

[11:56] <lizmat> you'll be in next week's  :-)

[12:00] *** reportable6 left
[12:00] <discord-raku-bot> <nemokosch> I still don't get this hate towards JS, to be frank, and especially not from Raku users

[12:01] <discord-raku-bot> <nemokosch> okay, it's not downright Ruby but other than Ruby I couldn't name a scripting language that has a more similar spirit to Raku than JS

[12:01] <lizmat> it reminds us too much of the early Perl days without 'use strict'

[12:02] <SmokeMachine> lizmat: but it even has `use strict`...

[12:02] <discord-raku-bot> <nemokosch> perhaps the only thing I can't cast into this frame is that it has no operator overloading

[12:03] *** reportable6 joined
[12:04] <discord-raku-bot> <nemokosch> but in general it's a language that lies on excessively ambitious abstractions, and lately it has been turning into a huge language to hide the guts of the language from you

[12:04] <discord-raku-bot> <nemokosch> this is very much like Raku, and very much unlike Python for that matter

[12:06] <leont> I don't hate Javascript at all, but I do hate the NPM ecosystem

[12:06] *** jpn joined
[12:06] <leont> The hypes go too fast, the modules are too small, none of it makes sense

[12:06] <discord-raku-bot> <nemokosch> ironically enough, JS is also a language that has more than one way to indicate the absence of a value

[12:06] <discord-raku-bot> <nemokosch> although I doubt it will ever catch up to Raku in that regard

[12:08] <discord-raku-bot> <nemokosch> leont: about NPM - the funny thing is that often even widely used modules suck hard

[12:08] <leont> That's true on any ecosystem, really

[12:08] <discord-raku-bot> <nemokosch> there is an infinite number of HTTP clients

[12:08] <discord-raku-bot> <nemokosch> I used axios for some time - well, exactly until I first checked the code

[12:10] *** jpn left
[12:10] <discord-raku-bot> <nemokosch> a friend of mine wanted to port socketio, either to Dart or just Deno, I don't remember

[12:10] <discord-raku-bot> <nemokosch> I do remember the horror, though

[12:13] <discord-raku-bot> <nemokosch> and I guess to some extent this is indeed the fault of dependants as well, like with Raku

[12:13] <discord-raku-bot> <nemokosch> how outdated and unmaintained modules still get picked as dependencies

[12:15] *** jgaz_ left
[12:17] *** jgaz joined
[12:18] *** guifa joined
[12:21] *** guifa left
[12:30] *** guifa joined
[12:52] *** melezhik joined
[12:52] <melezhik> 0/

[12:52] <tellable6> 2023-06-29T16:48:34Z #raku <tonyo> melezhik: i'll take a look

[12:52] <melezhik> I am designing some DSL to build configurations, I wonder if Raku allows nested named parameters? Here is some example code - https://gist.github.com/melezhik/d8493a9d5e76ecdbc4d262b8982a0166

[12:53] <melezhik> so, I Iove Raku's named parameters mechanism, but I wonder if it could be applied for nested arguments (like hash of hashes, etc)

[12:53] *** jpn joined
[12:55] <melezhik> the reason I don't want to use just Hashes is I want to have a control on every level , so that passing argument ends up in invoking method of specific class an any level

[12:55] <melezhik> maybe there more elegant and more idiomatic solution for that ...

[12:56] <leont> You can destructure hash arguments

[12:57] <melezhik> if you drop some examples please?

[12:57] <leont> m: sub foo(:%foo (:$bar, :$baz)) { dd $baz }; foo(foo => { :bar, :42baz })

[12:57] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´42‚ê§¬ª

[12:57] <melezhik> even better how this would like from client code )))

[12:58] <melezhik> like -> look like

[12:58] <melezhik> oh, I see

[12:59] <leont> m: sub foo(:%foo (:$bar, :$baz)) { dd $baz }; foo(:foo{ :bar, :42baz })

[12:59] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´42‚ê§¬ª

[12:59] <melezhik> m: sub foo(:%foo (:$bar, :$baz)) { dd $baz }; foo :foo( { :bar, :42baz }))

[12:59] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> { dd $baz }; foo :foo( { :bar, :42baz })‚èè)‚ê§¬ª

[12:59] *** razetime left
[12:59] <melezhik> m: sub foo(:%foo (:$bar, :$baz)) { dd $baz }; foo(:foo( { :bar, :42baz }))

[12:59] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´42‚ê§¬ª

[12:59] <melezhik> look good

[13:00] *** jpn left
[13:00] *** razetime joined
[13:00] <leont> In particular you can do interesting things with multi-methods with this

[13:00] <melezhik> you mean overloading ?

[13:00] <leont> Yeah

[13:00] <melezhik> yeah, more or less what I want - thanks!

[13:01] <melezhik> I wish they allowed me to use Raku for that, but that's another story )))

[13:02] *** guifa left
[13:02] <leont> You can select both on presence of arguments, and on their types.

[13:05] *** heartburn left
[13:06] *** heartburn joined
[13:13] *** melezhik left
[13:14] <discord-raku-bot> <antononcube> I like ‚Äúconfiguration format industry‚Äù! üôÇ

[13:16] <discord-raku-bot> <antononcube> Good luck! Safe travels!

[13:17] <discord-raku-bot> <antononcube> I am not sure is this a political statement or not‚Ä¶ üôÇ

[13:17] *** buffet left
[13:20] *** jpn joined
[13:25] <discord-raku-bot> <antononcube> The R package ecosystem is changed by RStudio a lot with exactly the same goal and means. (That annoys a lot of old school R programmers, because their knowledge of the very arcane ‚Äúold R‚Äù becomes obsolete, or at least not respected.)

[13:28] <discord-raku-bot> <nemokosch> what's the big deal with R anyway?

[13:30] <discord-raku-bot> <antononcube> LOL. None!!! It is just free and it is not Mathematica‚Ä¶ üôÇ

[13:34] <discord-raku-bot> <antononcube> But, although it is LISP based/inspired, R does not suffer the LISP curse (because it is too arcane.) Hence, there are plenty of online questions/examples/help for R-users, which, in turn, made it popular.

[13:36] <discord-raku-bot> <nemokosch> you mean it's too inconvenient to use on your own to have isolated hackers as the "community"? üòÜ

[13:37] <discord-raku-bot> <antononcube> More seriously four things about R are hard to beat: 1) package system, 2) great IDE support, 3) good integration with LaTeX and Markdown, 4) easy and ‚Äúquick‚Äù making of interactive interfaces.

[13:39] *** guifa joined
[13:39] <SmokeMachine> melezhik: I‚Äôm also playing with configurations: https://github.com/FCO/Configuration

[13:39] <tellable6> SmokeMachine, I'll pass your message to melezhik

[13:42] <discord-raku-bot> <antononcube> Yeah, something like that. R is a fairly inconsistent language, but its main, arcane workflows are clear or obvious to a subset of people. After using R for awhile, one can see the convenience or merit of those workflows. Pretty much like English, actually.

[13:43] <discord-raku-bot> <antononcube> It can be said that most R functionalities work most of the time ‚Äî because R was made ‚Äúfrom  statisticians for statisticians.‚Äù

[13:44] *** guifa left
[13:44] <discord-raku-bot> <nemokosch> üòÇ

[13:45] <discord-raku-bot> <antononcube> R has all features of a ‚Äúdesign by a committee.‚Äù Still, I would rather program in R than in Python‚Ä¶

[13:47] <discord-raku-bot> <antononcube> @nemokosch I might make another LLM generated document ‚Äî this time explaining why R sucks.

[13:48] <discord-raku-bot> <antononcube> That kind of text generation might be censured though.

[13:48] *** guifa joined
[13:49] <discord-raku-bot> <antononcube> For example, OpenAI moderated/prevented image- and text generations for ‚ÄúPython programmers are like babies.‚Äú

[13:50] <discord-raku-bot> <antononcube> BTW, yesterday I made a ‚Äú12 steps to quit Python (and replace it with Raku).‚Äù See: https://github.com/antononcube/RakuForPrediction-book/blob/main/Articles/LLM-generated/12-steps-guide-to-quit-Python-via-PaLM.md

[13:50] *** rf joined
[13:55] <discord-raku-bot> <antononcube> Hm‚Ä¶ this latest committed version does speak about Raku‚Ä¶ I recover the one that did. üôÇ

[13:57] <lizmat> m: dd (:foo{a => 42 })

[13:57] <camelia> rakudo-moar 6abb65342: OUTPUT: ¬´:foo({:a(42)})‚ê§¬ª

[14:09] *** guifa left
[14:09] *** willthechill joined
[14:11] <discord-raku-bot> <nemokosch> the other thing is, you know, this "Unix philosophy"

[14:11] <discord-raku-bot> <nemokosch> not even the composability; composability is nice indeed

[14:12] <discord-raku-bot> <nemokosch> but this "everything should do one thing and do that one thing well"... I don't know if it's just a deceptive motto or a viral mistake

[14:12] <discord-raku-bot> <nemokosch> tbh I hope this is not too controversial here of all places

[14:13] <discord-raku-bot> <nemokosch> the whole Perl philosophy is the exact opposite

[14:24] <[Coke]> Seems a controversial take to me.

[14:25] <jast> well I don't think the unix philosophy necessarily applies to everything

[14:26] <jast> if you apply it to the right things it makes a lot of sense

[14:27] <jast> for instance, /bin/cat not having syntax highlighting and pagination is a good thing IMO :)

[14:27] *** teatwo joined
[14:28] <discord-raku-bot> <nemokosch> cat is actually a great example of how the whole "one thing well" is just an excuse to give horrible names to useful utility programs üòõ

[14:29] <discord-raku-bot> <nemokosch> it's "for concatenation" but most of the time you don't care about that, just about pushing a file to stdout

[14:30] <discord-raku-bot> <nemokosch> and the other way around: there is "kill", "sort", "su", "yes" which can do vastly different things from what the name implies/describes

[14:30] <jast> naming is a different topic :-)

[14:30] *** tea3po left
[14:30] <discord-raku-bot> <nemokosch> but you do notice that "kill" or "su" aren't just bad names

[14:30] <jast> switch user? seems okay :>

[14:30] <discord-raku-bot> <nemokosch> they are overly specific names for generic operations with certain defaults

[14:31] <jast> and yes, I know that's not the original meaning

[14:34] <discord-raku-bot> <nemokosch> this "do one thing well" can make sense for a completely closed domain I guess

[14:34] <discord-raku-bot> <nemokosch> so, pretty much the opposite of Unix itself

[14:35] <jast> well, the idea of having a separate tool for each thing makes sense, right? even though the naming isn't so great

[14:35] *** buffet joined
[14:35] <jast> and obviously for a general purpose programming language you'd usually want to do more than "one thing", so the unix philosophy doesn't apply there in the first place

[14:35] <discord-raku-bot> <nemokosch> well, I think if these things are connected that it doesn't make a lot of sense

[14:37] <discord-raku-bot> <nemokosch> just take the not-so-uncommon situation in a Unix environment that you need to take a file with textual content and produce another file with textual content. If there is a built-in for what you want, you are going to use that, right?

[14:37] <discord-raku-bot> <nemokosch> If you can describe it in less than 20 keystrokes in sed, you are going to use sed

[14:37] <discord-raku-bot> <nemokosch> if you can describe it in less than 20 lines in awk, you are going to use awk

[14:38] <jast> sure

[14:38] <leont> Perl and Raku are about combining whipuptitude and manipulexity, so yes and no

[14:38] <discord-raku-bot> <nemokosch> you notice that you need to add some configurability or custom logic so you use up your shell scripts to build your awk script into it

[14:39] <jast> and well, text processing gets arbitrarily complex so realistically you couldn't do all of it with a purist unixy philosophy-y thing

[14:39] <discord-raku-bot> <nemokosch> then you might even notice that all of this sucks and wrap it all up in a standalone Python script, at that point it doesn't even matter a lot if you do or not...

[14:40] <jast> which is definitely superior over having a frankentool that has 1000 different command line switches for doing 1000 different text transformations

[14:40] <discord-raku-bot> <nemokosch> the point is, you will be converging towards a general-purpose language while touching several completely unrelated technologies that don't help you understand one the other

[14:41] <discord-raku-bot> <nemokosch> they compose via the piping mechanism that Unix provides but the knowledge itself doesn't scale or compose thanks to the "do one thing well" principle

[14:42] * [Coke] will probably return.

[14:42] *** [Coke] left
[14:42] <discord-raku-bot> <nemokosch> you might notice that you could have just used Perl all along and you'd be much better off

[14:43] *** Sgeo joined
[14:44] <discord-raku-bot> <antononcube> I have not heard / seen that before. üôÇ

[14:44] <jast> both sed and awk existed LONG before perl

[14:44] <jast> had perl existed at the time probably nobody would have bothered making them

[14:45] <jast> but at the time they filled a meaningful gap, and today they're still not useless

[14:46] <discord-raku-bot> <nemokosch> that's right but this doesn't explain the existence of people who "still use sed/awk and haven't used Perl since ages"

[14:46] <discord-raku-bot> <nemokosch> but I would say that's kind of besides the point, the case is more just an illustration of the illusoric nature of "do one thing well"

[14:46] <jast> well, I kind of get it because Perl has rather more warts than awk/sed and not everyone wants to learn a full language to do the more basic things

[14:47] <jast> I think all of these (awk, sed, Perl) fall outside of that

[14:47] <jast> awk and sed are compromises already

[14:48] <discord-raku-bot> <nemokosch> that's part of the point - it's questionable whether that "one thing" and the "one tool for it" ever existed...

[14:48] *** teatwo left
[14:48] <leont> awk started as a sed replacement the same way perl started as an awk replacement; replacements tend to be partial

[14:48] *** teatwo joined
[14:49] <jast> obviously "one thing" doesn't work for every task out there

[14:49] <jast> still it makes sense to keep things orthogonal where possible

[14:49] <jast> in the end it's called a philosophy and not "The Law" :)

[14:50] <discord-raku-bot> <nemokosch> but it could be just as much called a myth üòõ

[14:50] <jast> by that logic, most rules of thumbs are myths

[14:50] <discord-raku-bot> <nemokosch> I don't think that follows

[14:51] <discord-raku-bot> <nemokosch> this is simply something that doesn't even really have a good example case within the system that the philosophy refers in its name

[14:51] <jast> I just think your interpretation of the unix philosophy is a little too stringent for it to make any sense

[14:51] <jast> I don't interpret it quite as strictly and so it works for me

[14:52] <discord-raku-bot> <nemokosch> well, that's where the example should have helped I think

[14:52] <discord-raku-bot> <nemokosch> I said what I mean about the commands and tools

[14:55] <jast> I do think most of the core utils do this fairly consistently (if we disregard the various GNU extensions), though quite a few of the names could have been better

[14:56] <discord-raku-bot> <nemokosch> orthogonality is great but it doesn't contradict having a unified vision - the common Unix tools that survived often (regularly) don't even have the same convention with the arguments

[14:56] <discord-raku-bot> <nemokosch> and I'd say this is a very obvious risk of the "I'm just going to do my job well and don't care about the rest" mentality

[14:57] <jast> which seems to be a flaw in standardization rather than philosophy

[14:57] *** jpn left
[14:58] <jast> and, well, that's what happens in decentralized and uncoordinated development. tough luck.

[14:58] *** jpn joined
[14:58] <jast> in fact it happens even in centralized but uncoordinated development, see Microsoft's APIs and tools for inspiration

[15:00] <discord-raku-bot> <antononcube> By ChatGPT : "Perl and Raku are like the lovechild of a cooking show and a Rubik's Cube, all tangled up in a language full of whip-up skills and mind-bending complexity."

[15:00] <jast> that sounds like ChatGPT all right

[15:00] <jast> or random twitter user #432789643297432897, hard to distinguish

[15:01] <discord-raku-bot> <nemokosch> I'd rather say that by coordinated effort you can account for problems a mental framework might foster. You know, this is an engineering discipline, the impossible doesn't exist üòõ

[15:02] <jast> of course anything is *possible*... but even when people actually try it still often goes wrong

[15:02] <jast> if only because they can't agree on the correct indentation :)

[15:03] <discord-raku-bot> <nemokosch> well, that's at least somebody that people can equally understand ^^

[15:03] <jast> nothing ruins collaboration better than bikeshedding

[15:04] <discord-raku-bot> <antononcube> And cluster bombs.

[15:05] <discord-raku-bot> <nemokosch> I wonder if the IT produces people who are naturally talented at bikeshedding or it's just more visible (to me?) than in other fields

[15:05] <jast> antononcube: I don't have personal experience with that kind of collaboration, I'll take your word for it

[15:05] <jast> nah, bikeshedding happens everywhere. the origin of the term is nice evidence for that :)

[15:07] <discord-raku-bot> <nemokosch> What I do think is that there is a great share of overthinkers in the IT world

[15:07] <jast> for sure

[15:07] <jast> but the same is true outside of the IT world

[15:07] <discord-raku-bot> <antononcube> @jast You can also read the news. üôÇ

[15:07] <discord-raku-bot> <nemokosch> I meant disproportionally much

[15:08] <jast> ever look at business administration? :)

[15:08] <jast> which often seems to devolve into a bizarre mix of overthinking and underthinking

[15:09] <discord-raku-bot> <antononcube> Damn, my wife is a "business administrator". Now she studies to be a "network engineer."

[15:09] <discord-raku-bot> <nemokosch> is that the only other option? üòõ you don't need to win the grand prix immediately to be a decent competitor

[15:09] <jast> no, it's one example

[15:09] <discord-raku-bot> <nemokosch> actually it's often really just fun to read completely oppositional theories of how something works in the industry, or how it should work

[15:10] <discord-raku-bot> <nemokosch> by people who often have no financial motives in these theories whatsoever

[15:10] <discord-raku-bot> <nemokosch> it just reflects different ways of thinking, "out loud"

[15:11] <discord-raku-bot> <antononcube> ... using inferior languages and paradigms as background.

[15:12] <jast> to be fair, modelling complex real world things is prohibitively difficult

[15:12] <discord-raku-bot> <antononcube> @jast That is my bet against the AI hype.

[15:13] <jast> eh

[15:13] <discord-raku-bot> <antononcube> So, you might see soon Raku modules for doing logistics.

[15:13] <discord-raku-bot> <nemokosch> the "lisp curse" itself is an interesting concept, or how the Tcl/Sqlite squad is proud to their "cathedral style development" which was originally meant to be a negative term

[15:13] <jast> the main problem with AI at this point is that we don't know how to adaptively scale models

[15:13] <jast> LLMs are cool but haven't changed anything about this

[15:14] <discord-raku-bot> <antononcube> @jast Right -- you are saying that the main problem with AI is that it is no AI.

[15:14] <jast> it's AI but not "strong AI" (or generalized AI)

[15:15] <jast> and no matter how much people are getting excited about ChatGPT and such, nobody knows how to make that

[15:15] <jast> (though people read all kinds of things into what ChatGPT does)

[15:15] <discord-raku-bot> <antononcube> @jast LLMs have changed many perceptions of the people who (do/would) employ me.

[15:15] <jast> makes sense

[15:16] <jast> I majored in AI at university but it's not a field I really want to work in tbh

[15:16] *** razetime left
[15:17] <jast> currently my main thing is the fun playground on which scalability, concurrency and data integrity meet

[15:17] *** razetime joined
[15:17] <discord-raku-bot> <antononcube> I (mega-)majored in Mathematical Modeling and unfortunately I am "forced" to do Machine Learning and  Data Science.

[15:18] <jast> ScIeNcE :-)

[15:19] <jast> I learned a lot more useful things from the foundation courses about modeling and statistics and the quick intro to machine learning which did a good job at covering the limitations

[15:20] <discord-raku-bot> <antononcube> From that perspective, COVID-19 was very good for my carrier in scientific computing.

[15:21] <discord-raku-bot> <antononcube> Everybody understood the limitations of AI / ML / DS when it comes to these kind of problems.

[15:23] <jast> fortunately now we have ChatGPT which has zero limitations :-)

[15:24] <discord-raku-bot> <antononcube> @jast Interesting conjecture. I would say, that might be true only for "verbalizable world" (if at all.)

[15:25] <jast> did I forget the sarcasm tag? dear me

[15:25] <discord-raku-bot> <nemokosch> well it's a breakthrough for generating content "out of thin air"

[15:26] <discord-raku-bot> <nemokosch> and if it was kind enough to lie less often, it could be a really good "search engine"

[15:26] <discord-raku-bot> <antononcube> @jast I thought you might mean "with sarcasm", but decided to manifest Poe's law anyway.

[15:28] <discord-raku-bot> <antononcube> @nemokosch Well, my attitude is: LLMs hallucinations are interesting, sometimes useful.

[15:30] <jast> exactly

[15:32] <discord-raku-bot> <nemokosch> https://khalidelborai.github.io/posts/raku-nativecall a gift from the gods

[15:39] <discord-raku-bot> <antononcube> @jast BTW, I am writing an article titled "Harnessing LLM hallucinations into precise specifications." (Too wordy title, I might change it.) My big obstacle is making the decision should I write it using Raku or Mathematica (or both.)

[15:41] <discord-raku-bot> <antononcube> It is a very small gift. So far, at least...

[15:41] <discord-raku-bot> <nemokosch> beggars can't be choosers

[15:42] <jast> Rakumathica :-)

[15:43] <discord-raku-bot> <antononcube> @jast üôÇ Sure. Or "Rakuntica".

[15:44] *** jpn left
[15:45] <discord-raku-bot> <antononcube> This reminds me -- I have to upload / publish the Mathematica notebook with Raku generated grammar graphs.

[16:37] *** jpn joined
[16:44] *** jpn left
[16:46] *** jpn joined
[16:46] *** razetime left
[17:10] <xinming_> m: class A { method t () { $.end.raku.say; }; }; A.new.t;

[17:10] <camelia> rakudo-moar d45fb6e5d: OUTPUT: ¬´0‚ê§¬ª

[17:10] <xinming_> Where is the $.end attribute defined please?

[17:11] <xinming_> Got it, It's a rountine.

[17:12] <lizmat> xinming_: by default, a class is Any, and .end is defined on Any

[17:12] <lizmat> and since scalars can be considered 1-element lists, the highest index is 0

[17:18] *** willthechill left
[17:25] *** jpn left
[17:26] *** squashable6 left
[17:26] *** squashable6 joined
[17:36] *** jpn joined
[17:40] *** jpn left
[18:00] *** reportable6 left
[18:01] <tbrowder__> i'm interested in the SOD bindings. is SOD as usav

[18:02] <tbrowder__> usable as graphicksmagic for photo manipulation?

[18:03] *** reportable6 joined
[18:05] <tbrowder__> i tried to contact the author but the link in the weekly article didn't work

[18:08] <tbrowder__> ah, the link in bottom-left corner seems to work

[18:28] *** abraxxa-home joined
[18:33] *** abraxxa-home left
[18:34] *** jpn joined
[18:35] *** abraxxa-home joined
[18:39] *** jpn left
[19:13] *** jpn joined
[19:17] *** jpn left
[19:27] *** sena_kun left
[19:29] *** sena_kun joined
[19:31] *** deoac left
[19:31] *** deoac joined
[19:39] <discord-raku-bot> <antononcube> @EBNF-graphs with Raku Mathematica notebook : https://community.wolfram.com/groups/-/m/t/2955399

[19:52] *** jpn joined
[20:05] *** jpn left
[20:19] *** abraxxa-home left
[20:56] *** sena_kun left
[20:59] <Voldenet> SmokeMachine: Well, it's possible to generate code from json, so it's possible to write a rakuconfig that'd load its properties from json ‚Äì just make sure it's possible to use arrays for things like endpoints

[21:18] *** merp joined
[21:23] *** squashable6 left
[21:26] *** squashable6 joined
[21:41] <SmokeMachine> I just tried using cro with my Configuration module... it seems it's working well: https://usercontent.irccloud-cdn.com/file/OkmBEXCO/image.png

[21:44] <SmokeMachine> Voldenet: yes, it's possible, but that needs complex json, in that case it would be easier to just write code, no?

[21:53] <Voldenet> well, there's deserializers already, so routing config through the Configuration module would be silly

[21:55] <Voldenet> for people who actually know raku rakuconfig is more elegant anyway

[21:55] <Voldenet> but use cases are limited to those people, which makes it usable only in dev contexts

[22:00] <SmokeMachine> Voldenet: I'm thinking on cases for exactly where the users are developers (or hard users)

[22:02] *** jpn joined
[22:07] *** jpn left
[22:24] *** guifa joined
[22:31] *** vrurg_ left
[22:32] *** vrurg joined
[23:00] *** squashable6 left
[23:01] *** euandreh left
[23:01] *** Xliff joined
[23:01] <Xliff> How can I tell if a method is a proto method?

[23:01] *** euandreh joined
[23:02] *** squashable6 joined
[23:03] <Xliff> Wasn't there a method that handled this?

[23:21] <guifa> um, not sure.  but on a multi, it seems that the value of multi is falsey on the proto and true on the candidates

[23:23] <guifa> meh but that wouldn't necessary work because a single method would look identical

[23:29] <Xliff> So I am thinking it is .is_dispatch.

[23:29] <Xliff> So how can I add candidates to a proto?

[23:30] <guifa> I don't think you can after compilation.  At least not as of a month or few ago

[23:30] * guifa tried to do a global addition to multi sub &infix:<...> 

[23:33] *** japhb joined
[23:41] <Xliff> That's odd. You can use add_method, but not add candidates to a proto you just added?

[23:41] *** guifa left
[23:41] *** guifa joined
