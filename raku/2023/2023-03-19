[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:17] *** simcop2387 left
[00:18] *** simcop2387 joined
[00:53] *** gcd left
[00:53] *** Guest8096 is now known as Sauvin
[01:03] *** xinming left
[01:05] *** xinming joined
[01:06] *** gcd joined
[01:25] *** razetime left
[01:26] *** japhb left
[01:30] *** razetime joined
[01:31] *** japhb joined
[01:36] *** japhb left
[01:48] *** japhb joined
[02:28] *** Sgeo left
[02:46] *** ProperNoun joined
[02:55] *** theesm left
[03:02] *** Sgeo joined
[03:03] *** razetime left
[03:03] *** swaggboi left
[03:14] *** swaggboi joined
[03:47] *** razetime joined
[04:04] *** swaggboi left
[04:17] *** theesm joined
[04:25] *** swaggboi joined
[04:39] *** razetime left
[05:39] *** shareable6 left
[05:39] *** statisfiable6 left
[05:39] *** benchable6 left
[05:39] *** squashable6 left
[05:39] *** reportable6 left
[05:39] *** nativecallable6 left
[05:39] *** sourceable6 left
[05:39] *** unicodable6 left
[05:39] *** committable6 left
[05:39] *** tellable6 left
[05:39] *** bloatable6 left
[05:39] *** evalable6 left
[05:39] *** bisectable6 left
[05:39] *** greppable6 left
[05:39] *** quotable6 left
[05:39] *** releasable6 left
[05:39] *** coverable6 left
[05:39] *** notable6 left
[05:39] *** linkable6 left
[05:39] *** evalable6 joined
[05:39] *** initrd joined
[05:40] *** benchable6 joined
[05:40] *** tellable6 joined
[05:40] *** squashable6 joined
[05:40] *** shareable6 joined
[05:40] *** sourceable6 joined
[05:40] *** greppable6 joined
[05:40] *** committable6 joined
[05:41] *** bloatable6 joined
[05:41] *** quotable6 joined
[05:41] *** coverable6 joined
[05:41] *** unicodable6 joined
[05:41] *** reportable6 joined
[05:41] *** linkable6 joined
[05:42] *** statisfiable6 joined
[05:42] *** nativecallable6 joined
[05:42] *** releasable6 joined
[05:42] *** notable6 joined
[05:42] *** bisectable6 joined
[05:57] *** swaggboi left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:03] *** japhb left
[06:04] *** japhb joined
[06:10] *** swaggboi joined
[06:43] *** japhb left
[06:44] *** japhb left
[06:44] *** Sgeo left
[06:44] *** japhb joined
[06:49] *** teatwo joined
[06:51] *** Sgeo joined
[06:53] *** Sgeo left
[06:53] *** tea3po left
[06:55] *** Sgeo joined
[06:59] *** Sgeo left
[07:03] *** Sgeo joined
[07:19] *** jpn joined
[07:19] *** swaggboi left
[07:20] *** jpn left
[07:32] *** swaggboi joined
[07:39] *** jpn joined
[08:00] *** razetime joined
[08:10] *** jpn left
[08:18] *** razetime left
[08:48] *** razetime joined
[09:19] *** initrd left
[09:39] *** razetime left
[09:40] *** Sgeo left
[10:40] *** linkable6 left
[10:40] *** evalable6 left
[10:40] *** evalable6 joined
[10:43] *** linkable6 joined
[10:57] *** codesections left
[10:57] *** codesections joined
[11:04] *** Xliff joined
[11:04] <Xliff> \o
[11:05] <Xliff> Is there a way to get a list of loaded packages (ie 'use'-d) in Raku?
[11:14] *** jpn joined
[11:15] *** jpn joined
[11:17] <lizmat> I think each repo responsible for loading a module, keeps an internal list
[11:18] <lizmat> I think each repo responsible for loading a module, keeps an internal list
[11:18] <lizmat> that may or not be exposed, not sure
[11:22] *** jpn left
[11:33] *** jpn joined
[11:39] *** jpn left
[11:58] <Xliff> FWIW, I was able to shoehorn MY.WHO to do what I needed.
[12:00] *** reportable6 left
[12:01] <Xliff> lizmat: https://gist.github.com/Xliff/d846eb39d472bcbd703be2a02d7e4357
[12:03] *** reportable6 joined
[12:36] *** Guest10 joined
[12:37] *** Guest10 left
[12:37] *** Guest10 joined
[12:37] *** Guest10 is now known as XliffMac
[12:42] <XliffMac> Anyone know why I would be getting this error when installing Inline::Perl5 on a Mac Mini?
[12:43] <XliffMac> ld: warning: ignoring file /opt/homebrew/opt/perl/lib/perl5/5.36/darwin-thread-multi-2level/CORE/libperl.dylib, building for macOS-x86_64 but attempting to link with file built for macOS-arm64
[12:46] <discord-raku-bot> <Nemokosch> "announcement" to everybody: please do not use .elems for testing for an empty Positional, it's not sufficient
[12:46] <XliffMac>  Also getting this... Cannot assign to an immutable value
[12:46] <XliffMac>   in sub install at configure.pl6 line 50
[12:47] <discord-raku-bot> <Nemokosch> a Positional can be lazy or infinite even, you don't want these to fall back to empty implicitly
[12:47] <XliffMac> Nemokosch: How so? I use the shorthand +@
[12:47] <tellable6> XliffMac, I'll pass your message to Nemokosch
[12:47] <discord-raku-bot> <Nemokosch> well, there is your answer I think
[12:48] <XliffMac> Well, things seem to work. I'd like to know what your thoughts are in case things are quietly failing.
[12:48] <discord-raku-bot> <Nemokosch> if you want to know whether it is empty or not, always use the bool check, or at least make sure the data passed can never be a lazy structure
[12:48] <XliffMac> So you suggest @.so, instead?
[12:48] <discord-raku-bot> <Nemokosch> yes
[12:48] <XliffMac> Noted! Thanks!
[12:48] <discord-raku-bot> <Nemokosch> which a bare if implies in itself
[12:49] <discord-raku-bot> <Nemokosch> the bool check only tries to fetch one single value
[12:49] <XliffMac> Heh. What if that value is 0?
[12:49] <XliffMac> m: my @a = (0); @a.so.say
[12:49] <camelia> rakudo-moar 837a2eb87: OUTPUT: ¬´True‚ê§¬ª
[12:49] <discord-raku-bot> <Nemokosch> it doesn't care for the value, only its presence
[12:49] <XliffMac> Excellent!
[12:50] <XliffMac> m: my @a; @a.push: Nil; @a.so.say
[12:50] <camelia> rakudo-moar 837a2eb87: OUTPUT: ¬´True‚ê§¬ª
[12:50] <discord-raku-bot> <Nemokosch> m: my @foo = lazy 1, 2, 3; unless @foo.elems { say 'Yeah, it's empty.' }
[12:50] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> 2, 3; unless @foo.elems { say 'Yeah, it'‚èès empty.' }     expecting any of:         infix         infix stopper         postfix         statement end         statement modifier         statement modifier loop 
[12:50] <discord-raku-bot> <Nemokosch> m: my @foo = lazy (1, 2, 3); unless @foo.elems { say 'Yeah, it's empty.' }
[12:50] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> , 3); unless @foo.elems { say 'Yeah, it'‚èès empty.' }     expecting any of:         infix         infix stopper         postfix         statement end         statement modifier         statement modifier loop 
[12:50] <discord-raku-bot> <Nemokosch> why
[12:51] <XliffMac> Your contraction.
[12:51] <XliffMac> Use double quotes or q/qq
[12:51] <discord-raku-bot> <Nemokosch> oof you're right
[12:51] <discord-raku-bot> <Nemokosch> I looked at the wrong arrow...
[12:51] <discord-raku-bot> <Nemokosch> m: my @foo = lazy 1, 2, 3; unless @foo.elems { say '"eah, it's empty." }
[12:51] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> 2, 3; unless @foo.elems { say '"eah, it'‚èès empty." }     expecting any of:         infix         infix stopper         postfix         statement end         statement modifier         statement modifier loop 
[12:52] <XliffMac> m: mu @foo = lazy (1, 2, 3); unless @foo.elems { say q<<Yeah, it's empty>>}
[12:52] <camelia> rakudo-moar 18a5dab5e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '@foo' is not declared.  Perhaps you forgot a 'sub' if this‚ê§was intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> mu ‚èè@foo = lazy (1, 2, 3); unless @foo.elems‚ê§¬ª
[12:52] <discord-raku-bot> <Nemokosch> okay, this is a nonsense
[12:52] <discord-raku-bot> <Nemokosch> the bot itself sucks I guess
[12:52] <XliffMac> m: my @foo = lazy (1, 2, 3); unless @foo.elems { say q<<Yeah, it's empty>>}
[12:52] <camelia> rakudo-moar 18a5dab5e: OUTPUT: ¬´Yeah, it's empty‚ê§¬ª
[12:52] <XliffMac> Hmmm... does Mac have a working Compose infrastructure somewhere?
[12:52] <discord-raku-bot> <Nemokosch> dang, thank you
[12:53] <discord-raku-bot> <Nemokosch> anyways, this is what I wanted to bring up. .elems is a Failure, and if you use it in bool context, it will collapse into False
[12:56] <lizmat> if you're using an array in a conditional, you don't need to .so it, the conditional will do that for you
[12:57] <lizmat> m: my @foo = lazy (1, 2, 3); say "something there" if @foo
[12:57] <camelia> rakudo-moar 18a5dab5e: OUTPUT: ¬´something there‚ê§¬ª
[12:57] <lizmat> m: my @foo = lazy (1, 2, 3); say "something there" if @foo.elems # Failure spoiling things
[12:57] <camelia> rakudo-moar 18a5dab5e: ( no output )
[12:58] <discord-raku-bot> <Nemokosch> üëç
[13:26] *** XliffMac left
[13:40] <guifa> ugh I think my biggest frustration lately with Comma is that it doesn't keep code folder =/
[13:52] *** ab5tract joined
[13:52] *** ab5tract left
[13:59] *** Guest10 joined
[14:00] *** Guest10 left
[14:02] *** Guest10 joined
[14:02] *** Guest10 is now known as XliffMac
[14:08] *** razetime joined
[14:14] *** XliffMac left
[14:18] *** cacci joined
[14:31] *** merp left
[14:33] *** merp joined
[14:34] *** jacob_c left
[14:36] *** Guest10 joined
[14:58] *** jacob_c joined
[14:59] *** Xliff left
[15:03] *** Guest10 left
[15:05] *** Xliff joined
[15:06] <Xliff> How can I HLLize a BootStr?
[15:06] <tellable6> 2023-03-19T15:02:48Z #raku-dev <lizmat> Xliff: fwiw, I don't see anything in the change log that immediately jumps out as a possible reason
[15:06] <Xliff> I'm introspecting symbol tables, so I kinda expected this but was hoping for an easy solution.
[15:06] <lizmat> nqp::hllizefor($item,'Raku') ?
[15:07] <Xliff> Thanks!
[15:09] <Xliff> Error; "Could not find nqp::hllizefor, did you forget 'use nqp;' ?"
[15:09] <Xliff> And no... the "use nqp;" is there.
[15:12] <lizmat> nqp::hllize($item) ?
[15:12] <Xliff> That was my first attempt.
[15:12] <Xliff> Same error.
[15:13] <lizmat> nqp::hllize is used quite a lot in the core
[15:13] *** jacob_c left
[15:13] <lizmat> and nqp::hllizefor is used in dispatchers
[15:17] <Xliff> And still getting this... Cannot resolve caller print(Str:D: BOOTStr)
[15:18] <Xliff> So Stashes have BOOTStr objects which can get through to Raku.
[15:18] <Xliff> Especially if you use MY
[15:18] <Xliff> The funny thing is that I can print these just fine if I use .keys.gist
[15:19] <Xliff> Just not if I use say
[15:20] <lizmat> m: my int $a = 42; dd MY::<$a>   # seems like natives are also a bit iffy
[15:20] <camelia> rakudo-moar 83ed64e96: OUTPUT: ¬´Lexical with name '$a' has a different type in this frame‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[15:23] <Xliff> Ahh! The BootSTR was a type object! Adding a guard solved it.
[15:24] *** tejr left
[15:25] *** cfa joined
[15:26] <Xliff> Is there a way to get OUTER::MY?
[15:26] <Xliff> (I'm sure that's not it...)
[15:28] <Xliff> Coz MY.WHO.keys is giving me: 'CompUnit'
[15:29] <Xliff> And I was getting different results in my isolation tests.
[15:30] <lizmat> the OUTER is the MY of the outer scope
[15:30] <lizmat> m: my $a = 42; { say OUTER::<$a> }
[15:30] <camelia> rakudo-moar 83ed64e96: OUTPUT: ¬´42‚ê§¬ª
[15:30] *** tejr joined
[15:31] <Xliff> So is there a way to get the OUTER-most scope?
[15:31] <lizmat> m: my $a = 42; { { say OUTER::OUTER::<$a> } }
[15:31] <camelia> rakudo-moar 83ed64e96: OUTPUT: ¬´42‚ê§¬ª
[15:32] <lizmat> you mean the compunit?
[15:32] <Xliff> I am trying to get a list of loaded compunits from within a compunit. Is that possible?>
[15:32] <lizmat> keep going OUTER until you have one with the "!UNIT_MARKER" key init
[15:32] <lizmat> *in it
[15:34] <guifa> is there a QAD way to have two subs, one that's a Rakudo-specific (via nqp) and the other a future-proofed/compiler-agnostic vanilla Raku one?
[15:35] <Xliff> lizmat: How would that look like in a loop?
[15:36] <guifa> right now I'm doing multi with a BEGIN statement to produce a named arg flag.  Would be nice to do that within the proto, so I dont ned to do it at each call time, but then I also thought that a non-Rakudo compilter would probably bomb when it saw NQP statements
[15:37] <Xliff> Well... OUTER::OUTER::OUTER worked. I guess I'll have to hardcode that one for now!
[15:38] <lizmat> the exact syntax escapes me at the moment: vrurg probably whips that out of their sleeve just like that
[15:39] *** initrd joined
[15:55] *** cfa left
[16:12] <ugexe> isnt there something like OUTERS:: that already does that?
[16:13] <ugexe> i guess that doesn't help find the one with unit_marker though
[16:19] <lucs> I'd like to supply a sample program that will use a Foo::Bar module that I play to distribute.
[16:19] <lucs> Do people do this?
[16:20] <lucs> And if so, is there a "standard" name for such programs, "sample-foo-bar.raku" for example?
[16:20] <lucs> And would it appear in the META6.json under "provides": {"sample-foo-bar.raku": "bin/sample-foo-bar.raku"‚Ä¶}?
[16:21] <lucs> ("plan", not "play")
[16:23] <ugexe> well, listing bin files in provides doesn't do anything
[16:23] <ugexe> they should get listed in the meta6.json somewhere yeah, but putting them in provides isn't it
[16:23] <ugexe> and that somewhere has to be invented/designed or whatever by someone still
[16:25] <ugexe> i'd probably put them in something like bin/example/foo-bar.raku personally, but putting them in bin/ is also fine assuming they aren't named something that might shadow a non-sample program
[16:25] <ugexe> like naming a sample program 'grep' is obviously a bad idea
[16:28] <ugexe> you could also just put them into an examples/ directory that people run inside your repo. its unlikely people are going to care about the sample/example program being installed, and indeed they actually probably would prefer it not to be since they wouldn't be able to modify the source and play with it really (just run it)
[16:28] <ugexe> i mention that cause thats what i seem to have done with https://github.com/ugexe/Raku-Text--Table--Simple/tree/main/examples
[16:31] <lucs> Hmm... Yeah, ./examples/ in the repo is a good idea (and indeed probably sufficient).
[16:40] *** grondilu joined
[16:44] <lucs> I see that some programs get installed in for example <‚Ä¶/rakubrew/versions/moar-2023.02/share/perl6/site/bin>.
[16:44] <lucs> Looks like they had been present in a <./bin> dir. in the original repo.
[16:44] <lucs> But I'm not sure why/how they moved from the repo to the install (I checked a few repos, and they indeed don't appear in the META6.json file).
[16:47] <lucs> I suppose it's zef that's doing that -- I should reread its docs :)
[16:49] <ugexe> everything in bin/ gets installed. thats just cause how it always was
[16:49] <lucs> Oh, okay.
[16:49] <ugexe> see my earlier comment about how we should have something for listing them in meta6.json
[16:49] <lucs> Yep.
[16:49] <ugexe> there does need to be some distinction for including raku vs non-raku bin scripts for example
[16:50] <lucs> Oh, right. I just remembered that I tried installing a local module with a ./bin/foo.sh executable.
[16:50] <ugexe> like who knows if bin/zef is a raku script and can be precompiled or invoked the way we do with raku script wrappers, or if its a non-raku script which won't work once installed because of e.g. trying to invoke it as a perl module
[16:51] *** bigdata joined
[16:51] <lucs> The foo.sh got wrapped (you know that) and it just didn't work.
[16:51] <ugexe> yeah
[16:52] <lucs> On the other hand, it forced me to rething the script and to make it full Raku, which turned out to be a lot nice.
[16:52] <lucs> r
[16:54] <ugexe> yeah, right now the workaround would be to put the non-raku code in resources somewhere, and include a thing raku wrapper script to invoke that script from resources
[16:54] <ugexe> 'course that also means a wrapper module to get access to $*DISTRIBUTION / %?RESOURCES from the bin script itself
[16:56] <lucs> I'm thinking of building a module that would supply a number of sound files (*.wav or something) that would need to be found by the running module.
[16:56] <lucs> Can this be currently done?
[16:57] <lucs> (Not asking for the details right now, later maybe :)
[17:02] <guifa> yes
[17:02] <guifa> that would go into resources/
[17:02] <guifa> and then referenced via %?RESOURCES<name-of-file>
[17:02] <lucs> Aha, cool, thanks.
[17:03] <lucs> Hmm... Are name collisions something to beware of? (resources supplied by other modules...)
[17:10] <guifa> no, they're linked with your module
[17:10] <lucs> Ah, beautiful.
[17:11] *** razetime left
[17:26] <Xliff> If I wanted to get the days between two DateTime objects, what would be the best way to do it?
[17:30] <lizmat> Xliff: convert them to .Date and subtract ?
[17:30] <lizmat> or convert them to Instants and get a Duration / 86400 ?
[17:32] <guifa> define "days" first :-) 
[17:52] <Xliff> lizmat++, guifa++
[17:54] <Xliff> I used https://github.com/Xliff/raku-Duration-Units, instead... ;)
[17:54] *** simcop2387 left
[17:55] *** perlbot left
[17:55] *** Xliff left
[17:56] <lizmat> sadly lacking in documentation :-(
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:02] *** Sgeo joined
[18:03] *** simcop2387 joined
[18:07] <guifa> wait does augment work now?  I think that was NYI 
[18:08] *** simcop2387 left
[18:10] <guifa> actually I think I'm thinking supersede 
[18:11] *** simcop2387 joined
[18:11] <lizmat> yeah, supersede is a no go
[18:12] * guifa still dreams of the day of `supersede class DateTime {¬†‚Ä¶¬†}` mwahahahahahha
[18:14] <guifa> With new-disp, does augmenting still have as strong of a perf hit?  
[18:22] *** perlbot joined
[18:23] <lizmat> guifa: if you want something like that, we should look at lexical refinement
[18:23] <lizmat> aka, add a method to a standard class in a lexical scope
[18:24] * guifa wants it globally though haha
[18:24] <guifa> but you know my deal with DateTime ha
[18:26] *** jacob_c joined
[18:33] *** jacob_c left
[18:50] *** teatwo left
[18:50] *** teatwo joined
[19:08] *** Sgeo left
[19:23] *** tea3po joined
[19:25] *** jpn joined
[19:26] *** teatwo left
[19:28] *** codesections left
[19:28] *** grondilu left
[19:36] *** Sgeo joined
[19:46] *** guifa_ joined
[19:48] *** jpn left
[19:49] *** guifa left
[19:50] *** jpn joined
[20:13] *** jpn left
[20:51] <vrurg> .tell Xliff I haven't followed the full context of your question about OUTER, but what you probably need to iterate over out contexts is .WHO<OUTER>
[20:51] <tellable6> vrurg, I'll pass your message to Xliff
[20:52] *** jpn joined
[20:57] *** bigdata left
[21:04] *** jpn left
[21:37] *** Sauvin left
[21:39] *** rf joined
[21:40] <rf> Afternoon folks
[21:40] *** Sauvin joined
[21:56] <discord-raku-bot> <Nemokosch> Forenight
[22:06] *** jgaz joined
[22:29] <rf> lizmat: There will be a blog post by me tonight, was out and about all weekend now I have time :)
[22:36] *** jpn joined
[22:42] *** jpn left
[22:47] *** initrd left
[22:57] *** jgaz left
