[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:04] *** rf_ joined
[00:27] *** rf left
[00:27] *** rf_ left
[00:37] *** rf joined
[00:37] *** rf_ joined
[00:59] *** rf_ left
[01:04] *** xinming left
[01:06] *** xinming joined
[01:38] *** derpydoo joined
[01:46] *** jgaz left
[02:15] *** teatime left
[02:16] *** teatime joined
[02:20] *** teatime left
[02:21] *** teatime joined
[02:24] *** teatwo joined
[02:26] *** teatwo left
[02:26] *** teatwo joined
[02:26] *** rf left
[02:27] *** teatime left
[02:43] *** derpydoo left
[03:43] *** linkable6 left
[03:43] *** bloatable6 left
[03:43] *** squashable6 left
[03:43] *** nativecallable6 left
[03:43] *** evalable6 left
[03:43] *** greppable6 left
[03:43] *** releasable6 left
[03:43] *** reportable6 left
[03:43] *** tellable6 left
[03:43] *** coverable6 left
[03:43] *** unicodable6 left
[03:43] *** shareable6 left
[03:43] *** quotable6 left
[03:43] *** sourceable6 left
[03:43] *** statisfiable6 left
[03:43] *** notable6 left
[03:43] *** committable6 left
[03:43] *** reportable6 joined
[03:43] *** greppable6 joined
[03:44] *** notable6 joined
[03:44] *** quotable6 joined
[03:44] *** unicodable6 joined
[03:44] *** coverable6 joined
[03:44] *** statisfiable6 joined
[03:44] *** committable6 joined
[03:45] *** tellable6 joined
[03:45] *** squashable6 joined
[03:45] *** nativecallable6 joined
[03:45] *** bloatable6 joined
[03:45] *** evalable6 joined
[03:45] *** releasable6 joined
[03:46] *** sourceable6 joined
[03:46] *** shareable6 joined
[03:46] *** linkable6 joined
[04:01] *** zara joined
[04:23] *** zara left
[04:42] *** jpn joined
[04:46] *** jpn left
[05:40] *** jetchisel left
[05:42] *** jetchisel joined
[05:55] *** euandreh left
[05:55] *** euandreh joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:09] *** euandreh left
[07:09] *** bloatable6 left
[07:09] *** linkable6 left
[07:09] *** coverable6 left
[07:09] *** tellable6 left
[07:09] *** evalable6 left
[07:09] *** committable6 left
[07:09] *** statisfiable6 left
[07:09] *** sourceable6 left
[07:09] *** squashable6 left
[07:09] *** nativecallable6 left
[07:09] *** unicodable6 left
[07:09] *** reportable6 left
[07:09] *** greppable6 left
[07:09] *** shareable6 left
[07:09] *** notable6 left
[07:09] *** quotable6 left
[07:09] *** releasable6 left
[07:09] *** benchable6 left
[07:09] *** notable6 joined
[07:09] *** sourceable6 joined
[07:09] *** reportable6 joined
[07:09] *** committable6 joined
[07:10] *** statisfiable6 joined
[07:10] *** squashable6 joined
[07:10] *** evalable6 joined
[07:10] *** unicodable6 joined
[07:10] *** greppable6 joined
[07:10] *** nativecallable6 joined
[07:11] *** bloatable6 joined
[07:11] *** linkable6 joined
[07:11] *** tellable6 joined
[07:11] *** coverable6 joined
[07:11] *** releasable6 joined
[07:12] *** quotable6 joined
[07:12] *** shareable6 joined
[07:12] *** benchable6 joined
[07:21] *** kjp left
[07:24] *** kjp joined
[07:52] *** sena_kun joined
[07:57] *** Sgeo left
[08:02] *** Manifest0 joined
[08:08] *** dakkar joined
[08:17] *** abraxxa joined
[08:34] *** Vyrus left
[08:47] *** ab5tract left
[09:39] *** abraxxa left
[09:41] *** abraxxa joined
[10:05] *** xinming left
[10:07] *** xinming joined
[11:07] *** bloatable6 left
[11:07] *** quotable6 left
[11:07] *** greppable6 left
[11:07] *** unicodable6 left
[11:07] *** committable6 left
[11:07] *** notable6 left
[11:07] *** squashable6 left
[11:07] *** coverable6 left
[11:07] *** reportable6 left
[11:07] *** sourceable6 left
[11:07] *** statisfiable6 left
[11:07] *** nativecallable6 left
[11:07] *** benchable6 left
[11:07] *** tellable6 left
[11:07] *** releasable6 left
[11:07] *** evalable6 left
[11:07] *** shareable6 left
[11:07] *** linkable6 left
[11:07] *** bisectable6 left
[11:08] *** statisfiable6 joined
[11:09] *** reportable6 joined
[11:09] *** squashable6 joined
[11:09] *** bisectable6 joined
[11:09] *** quotable6 joined
[11:09] *** shareable6 joined
[11:09] *** Vyrus joined
[11:09] *** nativecallable6 joined
[11:09] *** coverable6 joined
[11:10] *** notable6 joined
[11:10] *** greppable6 joined
[11:10] *** linkable6 joined
[11:10] *** releasable6 joined
[11:10] *** tellable6 joined
[11:10] *** evalable6 joined
[11:10] *** unicodable6 joined
[11:10] *** sourceable6 joined
[11:10] *** committable6 joined
[11:10] *** bloatable6 joined
[11:11] *** benchable6 joined
[11:46] * lizmat clickbaits https://rakudoweekly.blog/2023/04/24/2023-17-releaseperiod/

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:14] *** TieUpYourCamel joined
[12:17] *** euandreh joined
[12:19] *** rypervenche left
[12:25] *** rypervenche joined
[12:39] *** euandreh left
[13:27] *** jgaz joined
[13:27] *** euandreh joined
[13:28] *** rf joined
[13:31] *** euandreh left
[13:32] *** euandreh joined
[13:41] *** eroux joined
[13:58] *** rf left
[13:59] *** rf joined
[14:01] <discord-raku-bot> <Anton Antonov> @lizmat Thanks.

[14:18] *** tea3po joined
[14:22] *** teatwo left
[14:23] *** jgaz left
[14:24] *** jgaz joined
[14:24] *** squashable6 left
[14:27] *** squashable6 joined
[14:29] *** Sgeo joined
[14:47] *** abraxxa left
[14:48] *** lucs left
[14:49] *** lucs joined
[15:00] *** jpn joined
[15:20] *** jpn left
[15:23] *** jpn joined
[15:42] *** Oshawott left
[15:43] *** Oshawott joined
[16:00] *** jpn left
[16:06] *** jpn joined
[16:23] *** synthmeat left
[16:26] *** Xliff joined
[16:30] *** synthmeat joined
[16:33] <Xliff> Hi. How can I turn a Callable into a function pointer so I can have C run my Raku routines via NativeCall?

[16:33] <Xliff> m: use NativeCall; sub a { 1 }; my $b = nativecast(Pointer, &a); say $b

[16:33] <camelia> rakudo-moar 6235256a5: OUTPUT: «Native call cast expected return type with CPointer, CStruct, CArray, or VMArray representation, but got a P6opaque (Sub)␤  in sub nativecast at /home/camelia/rakudo-m-inst-2/share/perl6/core/sources/DEC5BE9BC483C8510E136763F98614A8853D2A40 (NativeC…»

[16:33] <Xliff> That used to work.

[16:33] <Xliff> I think.

[16:35] *** dakkar left
[16:39] <Xliff> m: use NativeCall; sub set_func_pointer( \func, &sprint) { my $bug = buf8.allocate(20); my $len = &sprint($buf, '%lldf', func); Pointer.new( $buf.subbuf(^$len).decode.Int ); }; sub a { 1 }; say set_func_pointer(&a, &sprintf)

[16:39] <camelia> rakudo-moar 6235256a5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$buf' is not declared.  Did you mean any of these: 'Buf',␤'$bug'?␤at <tmp>:1␤------>  = buf8.allocate(20); my $len = &sprint(⏏$buf, '%lldf', func); Pointer.new( $buf.␤»

[16:39] <Xliff> m: use NativeCall; sub set_func_pointer( \func, &sprint) { my $buf = buf8.allocate(20); my $len = &sprint($buf, '%lldf', func); Pointer.new( $buf.subbuf(^$len).decode.Int ); }; sub a { 1 }; say set_func_pointer(&a, &sprintf)

[16:39] <camelia> rakudo-moar 6235256a5: OUTPUT: «Cannot resolve caller sprintf(Buf[uint8]:D, Str:D, Sub:D); none of these signatures matches:␤    (Str(Cool) $format, *@args)␤  in sub set_func_pointer at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <Xliff> I had some old code do to it but was hoping things had simplified since then.

[16:42] <Xliff> m: use NativeCall; sub set_func_pointer( \func, &sprint) { my $buf = buf8.allocate(20); my $len = &sprint($buf, '%lldf', func); Pointer.new( $buf.subbuf(^$len).decode.Int ); }; sub a { 1 }; sub sprintf-v (Blob, Str, &() ) returns int64 is native is symbol('sprintf'); say set_func_pointer(&a, &sprintf-v)

[16:42] <camelia> rakudo-moar 6235256a5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at <tmp>:1…»

[16:42] <Xliff> m: use NativeCall; sub set_func_pointer( \func, &sprint) { my $buf = buf8.allocate(20); my $len = &sprint($buf, '%lldf', func); Pointer.new( $buf.subbuf(^$len).decode.Int ); }; sub a { 1 }; sub sprintf-v(Blob, Str, &() ) returns int64 is native is symbol('sprintf'); say set_func_pointer(&a, &sprintf-v)

[16:42] <camelia> rakudo-moar 6235256a5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at <tmp>:1…»

[16:42] <Xliff> m: use NativeCall; sub set_func_pointer( \func, &sprint) { my $buf = buf8.allocate(20); my $len = &sprint($buf, '%lldf', func); Pointer.new( $buf.subbuf(^$len).decode.Int ); }; sub a { 1 }; sub sprintf-v(Blob, Str, & () ) returns int64 is native is symbol('sprintf'); say set_func_pointer(&a, &sprintf-v)

[16:42] <camelia> rakudo-moar 6235256a5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form. If you did not mean to declare a unit-scoped sub,␤perhaps you accidentally placed a semicolon after routi…»

[16:49] <Xliff> I have to do this:

[16:49] <Xliff> m: use NativeCall; sub sprintf-v(Blob, Str, & () ) returns int64 is native is symbol('sprintf') { * };  sub set_func_pointer( \func, &sprint) { my $buf = buf8.allocate(20); my $len = &sprint($buf, '%lld', func); $buf.say; my $b =$buf.subbuf(^$len).decode.Int; say $b;  Pointer.new($b) }; sub a { 1 }; say set_func_pointer(&a, &sprintf-v)

[16:49] <camelia> rakudo-moar 6235256a5: OUTPUT: «Buf[uint8]:0x<31 34 30 33 33 30 33 34 30 39 37 30 34 39 36 00 00 00 00 00>␤140330340970496␤NativeCall::Types::Pointer<0x7fa1341ff000>␤»

[16:49] *** synthmeat left
[16:49] <Xliff> Because Rakudo doesn't nativecast a Callable to a pointer...

[16:49] <Xliff> Is there a better way?

[16:50] *** synthmeat joined
[16:57] *** synthmeat left
[17:07] *** synthmeat joined
[17:22] *** jpn left
[17:29] <sjn> Heya; Is there a "latinize" method in Raku (e.g. one that will translate a Cyrillic Р to R)?

[17:29] <rf> I think you can change encoding of a string if that's what you're after

[17:36] <lizmat> sjn: not to my knowledge.  Would it be more than just a .trans ?

[17:59] *** bigdata joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:18] *** jpn joined
[18:23] *** jpn left
[18:27] *** abraxxa joined
[18:59] *** jpn joined
[19:28] *** jpn left
[19:58] *** rf left
[20:08] *** abraxxa left
[20:48] *** sena_kun left
[20:53] <Xliff> How can I check if a routine was marked with "is rw" trait?

[20:58] <Xliff> m: class A { method a is rw { 1 } }; .say for my $m = A.^lookup("a"); $m.^attributes[2].get_value($m).say

[20:58] <camelia> rakudo-moar 13e962849: OUTPUT: «a␤1␤»

[20:59] <Xliff> Gotta be a better way than that... :(

[21:11] <discord-raku-bot> <Nemokosch> there is an rw method on Methods

[21:48] *** linkable6 left
[21:48] *** evalable6 left
[21:50] *** evalable6 joined
[21:50] *** linkable6 joined
[22:03] <gfldex> m: class A { method m is rw { } }; A.^lookup('m').rw.say;

[22:03] <camelia> rakudo-moar 13e962849: OUTPUT: «True␤»

[22:03] <gfldex> Xliff: ^^^

[22:05] <gfldex> m: class A { multi method m is rw { } }; A.^can('m')».rw.say;

[22:05] <camelia> rakudo-moar 13e962849: OUTPUT: «(False)␤»

[22:05] <gfldex> No idea why that doesn't work for multies.

[22:12] <discord-raku-bot> <Nemokosch> the metadata probably needs to belong to the proto; multi dispatch candidates are kinda fakers

[22:23] <lizmat> m: class A { multi method m is rw { } }; A.^find_method("m").candidates.head.rw.say

[22:23] <camelia> rakudo-moar 13e962849: OUTPUT: «True␤»

[22:23] <lizmat> m: class A { multi method m { } }; A.^find_method("m").candidates.head.rw.say

[22:23] <camelia> rakudo-moar 13e962849: OUTPUT: «False␤»

[22:50] *** evalable6 left
[22:50] *** linkable6 left
[22:51] *** evalable6 joined
[22:52] *** linkable6 joined
[23:04] <Xliff> gfldex++ lizmat++

[23:06] *** Xliff left
[23:14] <uzl[m]> lizmat++ gfldex++

[23:22] *** Manifest0 left
[23:38] *** jgaz left
