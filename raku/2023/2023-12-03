[00:00] <clarkema1> how about that?

[00:01] *** lichtkind__ left
[00:02] <ugexe> that sounds like the best option so far

[00:05] <clarkema1> ok, i'll write both changes up tomorrow then. Gotta head off for now

[00:05] <clarkema1> thanks for the help

[02:35] *** constxqt_ left
[02:39] *** constxqt_ joined
[02:47] *** kylese left
[02:47] *** kylese joined
[02:48] *** constxqt_ left
[02:55] *** simcop2387 left
[02:55] *** perlbot left
[02:57] *** constxqt_ joined
[03:15] *** kylese left
[03:15] *** kylese joined
[03:15] *** constxqt_ left
[03:16] *** constxqt_ joined
[03:23] *** jpn joined
[03:26] *** constxqt_ left
[03:28] *** jpn left
[03:45] *** Sgeo left
[03:50] *** Sgeo joined
[03:53] *** cm left
[04:02] *** cm joined
[04:03] *** simcop2387 joined
[04:04] *** perlbot joined
[05:13] *** systems_ joined
[07:14] *** mark22k6 joined
[07:15] *** hexology left
[07:15] *** summerisle left
[07:15] *** hexology joined
[07:15] *** japhb left
[07:16] *** japhb joined
[07:16] *** mark22k left
[07:16] *** mark22k6 is now known as mark22k

[07:16] *** bd3i left
[07:16] *** summerisle joined
[07:16] *** bd3i joined
[07:35] *** melezhik joined
[07:36] <melezhik> m: unit module Foo;

[07:36] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[07:37] <melezhik> m: unit module Foo; sub foo is export () {}; say ::("UNIT::EXPORT::FOO::").keys

[07:37] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> unit module Foo; sub foo is export⏏ () {}; say ::("UNIT::EXPORT::FOO::").ke␤    expecting any of:␤        new name to be defined␤»

[07:38] <melezhik> [10:37:15] melezhik: m: unit module Foo; sub foo is export () {}; say ::("UNIT::EXPORT::FOO::").keys

[07:38] <melezhik> m: unit module Foo; sub foo is export () {}; say ::("UNIT::EXPORT::FOO::").keys

[07:38] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> unit module Foo; sub foo is export⏏ () {}; say ::("UNIT::EXPORT::FOO::").ke␤    expecting any of:␤        new name to be defined␤»

[07:38] *** melezhik left
[07:49] *** melezhik joined
[07:50] *** melezhik left
[07:56] *** melezhik joined
[07:57] <melezhik> m: unit module Foo; sub foo is export () { say 111 }; say ::("UNIT::EXPORT::FOO::").keys

[07:57] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> unit module Foo; sub foo is export⏏ () { say 111 }; say ::("UNIT::EXPORT::F␤    expecting any of:␤        new name to be defined␤»

[07:57] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; say ::("UNIT::EXPORT::FOO::").keys

[07:57] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «No such symbol 'UNIT::EXPORT::FOO::'␤  in block <unit> at <tmp> line 1␤␤»

[07:59] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; say ::("UNIT::EXPORT::Foo::").keys

[07:59] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «No such symbol 'UNIT::EXPORT::Foo::'␤  in block <unit> at <tmp> line 1␤␤»

[08:00] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; say ::("UNIT::EXPORT::").keys

[08:00] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «No such symbol 'UNIT::EXPORT::'␤  in block <unit> at <tmp> line 1␤␤»

[08:01] *** melezhik left
[08:12] *** systems_ left
[08:18] *** melezhik joined
[08:20] <melezhik> I try to do a dynamic lookup in tables of symbols and looks like ::("foo::bar::what::ever::EXPORT::DEFAULT::").keys construction does not work for me , any ideas ?

[08:21] <melezhik> In comparison direct lookup seems to work : foo::bar::what::ever::EXPORT::DEFAULT::.keys

[08:22] <melezhik> But in my case I would I need a dynamic lookup because module name is dynamic variable

[08:26] *** jpn joined
[08:29] <melezhik> Reading this - https://stackoverflow.com/questions/67040798/how-do-i-access-a-modules-symbol-table-dynamically-at-runtime-in-raku

[08:30] *** constxqt_ joined
[08:31] *** jpn left
[08:32] *** melezhik left
[09:39] *** abraxxa-home joined
[09:41] *** jpn joined
[09:45] *** abraxxa-home left
[09:46] *** jpn left
[09:47] *** abraxxa-home joined
[09:52] *** jpn joined
[10:13] *** lichtkind__ joined
[10:16] *** constxqt_ left
[10:19] *** jpn left
[10:21] *** jpn joined
[10:49] *** sena_kun joined
[10:52] *** jpn left
[10:55] *** jpn joined
[11:11] *** jpn left
[11:24] *** melezhik joined
[11:26] *** Sgeo left
[11:28] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT ").WHO.keys

[11:28] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «()␤»

[11:29] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.keys

[11:29] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «(&foo)␤»

[11:30] <melezhik> Here we are ))) this should be WHO, not ::: for dynamically loaded modules

[11:30] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT ").WHO.keys.head

[11:30] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «Nil␤»

[11:31] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys -> $f { say $f }

[11:31] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:31] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys -> $f { say "ok" }

[11:31] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:32] <discord-raku-bot> <nemokosch> m: unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT")::.keys

[11:32] <evalable6> nemokosch, rakudo-moar d2f8bb6fe: OUTPUT: «()␤»

[11:32] <discord-raku-bot> <Raku eval>  () 

[11:32] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys() -> $f { say "ok" }

[11:32] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:32] <discord-raku-bot> <nemokosch> m: unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.keys

[11:32] <evalable6> nemokosch, rakudo-moar d2f8bb6fe: OUTPUT: «(&foo)␤»

[11:32] <discord-raku-bot> <Raku eval>  (&foo) 

[11:33] <discord-raku-bot> <nemokosch> why is there a difference...

[11:33] <melezhik> Between what?

[11:33] <melezhik> :: and WHO ?

[11:37] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys() -> $f { say &::($f).signature }

[11:37] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:37] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys-> $f { say &::($f).signature }

[11:37] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of -> as postfix.  In Raku please use: either .  to␤call a method, or whitespace to delimit a pointy block.␤at <tmp>:1␤------> r ::("Foo::EXPORT::DEFAULT ").WHO.keys->⏏ $f …»

[11:37] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys -> $f { say &::($f).signature }

[11:37] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:38] <melezhik> <nemokosch> m: unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.keys.perl

[11:38] <melezhik> unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.keys

[11:38] <evalable6> melezhik, rakudo-moar d2f8bb6fe: OUTPUT: «(&foo)␤»

[11:39] <melezhik> unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.keys.perl

[11:39] <evalable6> melezhik, rakudo-moar d2f8bb6fe: OUTPUT: «("\&foo",).Seq␤»

[11:39] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT ").WHO.keys<> -> $f { say &::($f).signature }

[11:39] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:41] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; my @s = ::("Foo::EXPORT::DEFAULT ").WHO.keys; for @s -> $f { say $f }

[11:41] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[11:42] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; my @s = ::("Foo::EXPORT::DEFAULT ").WHO.keys; say @s.raku

[11:42] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «[]␤»

[11:42] <discord-raku-bot> <nemokosch> In vrurg's workshop from like 2 years ago, :: was promoted as sugar for .WHO

[11:42] <discord-raku-bot> <nemokosch> which it apparently isn't...

[11:43] <melezhik> Well stack overflow post says that :: does not work for dynamic look up , while WHO does

[11:43] <melezhik> In my case I need dynamic look up

[11:44] <melezhik> unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.raku

[11:44] <evalable6> melezhik, rakudo-moar d2f8bb6fe: OUTPUT: «{"\&foo" => sub foo { #`(Sub|3833481475584) ... }}␤»

[11:45] <melezhik> unit module Foo; sub foo () is export { say 1000 }; say ::("Foo::EXPORT::DEFAULT").WHO.head

[11:45] <evalable6> melezhik, rakudo-moar d2f8bb6fe: OUTPUT: «&foo => &foo␤»

[11:46] <melezhik> unit module Foo; sub foo () is export { say 1000 };  for  ::("Foo::EXPORT::DEFAULT").WHO -> $k, $v { say $k }

[11:46] <melezhik> m: unit module Foo; sub foo () is export { say 1000 };  for  ::("Foo::EXPORT::DEFAULT").WHO -> $k, $v { say $k }

[11:46] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:48] <melezhik> m: unit module Foo; sub foo () is export { say 1000 };  for  ::("Foo::EXPORT::DEFAULT").WHO -> $v { say $v }

[11:48] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «&foo => &foo␤»

[11:48] <melezhik> m: unit module Foo; sub foo () is export { say 1000 };  for  ::("Foo::EXPORT::DEFAULT").WHO -> $v { say $v.head }

[11:48] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «&foo => &foo␤»

[11:50] <melezhik> m: unit module Foo; sub foo () is export { say 1000 };  for  ::("Foo::EXPORT::DEFAULT").WHO -> $v { say &::($v.head).signature }

[11:50] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤  in block  at <tmp> line 1␤No such symbol ''␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:51] <melezhik> m: unit module Foo; sub foo () is export { say 1000 };  for  ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say &::($v).signature }

[11:51] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤()␤  in block  at <tmp> line 1␤»

[11:52] *** melezhik left
[11:53] *** melezhik joined
[11:55] *** jpn joined
[11:56] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO -> $o { say &::($o.key).signature }

[11:56] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «No such symbol ''␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:58] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.kv -> $k, $v { say &::($k).signature }

[11:58] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «No such symbol ''␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:58] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.kv -> $k, $v { say &::($v).signature }

[11:58] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤()␤  in block  at <tmp> line 1␤»

[11:58] <melezhik> m: unit module Foo; sub foo () is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.kv -> $k, $v { say $v.signature }

[11:58] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «()␤»

[11:59] <melezhik> m: unit module Foo; sub foo (Int $a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.kv -> $k, $v { say $v.signature }

[11:59] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «(Int $a)␤»

[12:00] <melezhik> This is what I wanted )))

[12:00] <melezhik> m: unit module Foo; sub foo (Int $a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.kv -> $k, $v { say $v.name; say $v.signature }

[12:00] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «foo␤(Int $a)␤»

[12:01] <melezhik> m: unit module Foo; sub foo (Int $a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say $v.name; say $v.signature }

[12:01] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «foo␤(Int $a)␤»

[12:02] <melezhik> Working code )))

[12:02] <melezhik> m: unit module Foo; sub foo (Int :$a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say $v.name; say $v.signature }

[12:02] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «foo␤(Int :$a)␤»

[12:04] <melezhik> m: unit module Foo; sub foo (:%a(:$b)) ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say $v.name; say $v.signature }

[12:04] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «===SORRY!===␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at <tmp>:1␤------> unit module Foo…»

[12:06] <melezhik> m: unit module Foo; sub foobar (Int :$a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say $v.name; say $v.signature }

[12:06] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «foobar␤(Int :$a)␤»

[12:07] <melezhik> m: unit module Foo; sub foo (Int :$a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say $v.name; say $v.signature; $v(10); };

[12:07] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «foo␤Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤(Int :$a)␤»

[12:08] <melezhik> m: unit module Foo; sub foo (Int :$a ) is export { say 1000 }; for ::("Foo::EXPORT::DEFAULT").WHO.values -> $v { say $v.name; say $v.signature; $v(:a<10>); };

[12:08] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «foo␤(Int :$a)␤1000␤»

[12:09] *** melezhik left
[12:09] *** melezhik joined
[12:14] *** melezhik left
[12:15] *** jpn left
[12:26] <discord-raku-bot> <nemokosch> > Well stack overflow post says that :: does not work for dynamic look up , while WHO does

[12:26] <discord-raku-bot> <nemokosch> then it really isn't sugar for the same thing

[12:28] *** jpn joined
[12:43] *** jpn left
[13:03] *** abraxxa-home left
[13:10] <SmokeMachine> lizmat: is it ok to use irclogs.raku to generate automated summaries of what’s happening on Raku channels?

[13:11] <SmokeMachine> lizmat: if that’s ok, is there any endpoint I could get only the conversation in plain text?

[13:14] <SmokeMachine> I’m playing with this currently (you need iPhone’s shortcut and ChatGPT app installed): https://www.icloud.com/shortcuts/126a1682243c48d9a3358dd30b17f173

[14:01] <vrurg> nemokosch: Who told you that WHO works for dynamic lookups? Have you compared AST for `Hash::` and `Hash.WHO`? I'd recommend you to try and see on your own.

[14:03] <vrurg> A standalone :: creates a PseudoStash, which is a hash as well as .WHO. Therefore their use is identical. Therefore in some contexts it's OK not to focus on the differences.

[14:10] *** constxqt_ joined
[14:50] <discord-raku-bot> <nemokosch> .WHO does work for dynamic lookups

[14:57] <lizmat> SmokeMachine: https://irclogs.raku.org/raku/2023-12-03.log would be today's raw log

[14:58] <lizmat> the format is basically /channel/YYYY-MM-DD.log

[15:03] <SmokeMachine> lizmat: thanks!

[15:05] *** melezhik joined
[15:06] <melezhik> hi @vrurg - it was me who said that, but I base my judgment on this - https://stackoverflow.com/questions/67040798/how-do-i-access-a-modules-symbol-table-dynamically-at-runtime-in-raku

[15:10] <melezhik> also: :: does not work with dynamic look ups

[15:10] <melezhik> while WHO does, you could take a look at my previous examples

[15:15] *** melezhik left
[15:26] <vrurg> .tell melezhik Actually, "dynamic lookup" in Raku means "resolve a $*VAR via the call stack", roughly. Using it in the sense of "at run-time" is rather misleading.

[15:26] <tellable6> vrurg, I'll pass your message to melezhik

[15:33] <mort> boxed variables in raku can be nil, right? How do I check an Int variable for nil?

[15:33] <mort> trying with `== Nil` or `=== Nil` just gives me use of uninitialized value warnings, even though the value is initialized to Nil

[15:34] <lizmat> mort: one seldom checks for Nil explicitely

[15:34] <lizmat> usually it's with .defined

[15:34] <mort> I need one behavior if the variable is set, and another behavior if it's not set; is `if $thing.defined` the right way to do that then

[15:34] <lizmat> m: my Int $a; with $a { say "it is $_" }

[15:34] <camelia> rakudo-moar d2f8bb6fe: ( no output )

[15:34] <lizmat> m: my Int $a = 42; with $a { say "it is $_" }

[15:34] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «it is 42␤»

[15:36] <mort> I'll use .defined, that seems to work

[15:38] *** jpn joined
[15:45] *** jpn left
[15:54] <lizmat> mort: fwiw, "with $a {" is basically:   if $a.defined && $a -> $_ {

[15:54] <mort> m: my Int $a; with $a { say "it is $_" } else { say "it is not defined" }

[15:54] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «it is not defined␤»

[15:54] <ab5tract> I was just typing the same

[15:54] <mort> so with-else is possible, interesting

[15:55] <lizmat> note there's also a "without"

[15:55] <discord-raku-bot> <Nahita> with $a corresponds to if $a.defined only right? doesn't impose && $a

[15:56] <ab5tract> m: with 0 -> $z { dd $z }

[15:56] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «0␤»

[15:57] <ab5tract> Nahita: indeed :)

[15:58] *** jpn joined
[16:03] <discord-raku-bot> <nemokosch> Well, it allows setting of a topic, like given

[16:11] *** melezhik joined
[16:11] <melezhik> .

[16:11] <tellable6> 2023-12-03T15:26:18Z #raku <vrurg> melezhik Actually, "dynamic lookup" in Raku means "resolve a $*VAR via the call stack", roughly. Using it in the sense of "at run-time" is rather misleading.

[16:12] <melezhik> tellable6: vrurg: that the term which is used in the official Rakudo documentation - https://docs.raku.org/language/modules#Exporting_and_selective_importing

[16:12] <tellable6> melezhik, I'll pass your message to vrurg

[16:14] <melezhik> tellable6: vrurg : "require" section actually in this link

[16:14] <tellable6> melezhik, I'll pass your message to vrurg

[16:15] *** melezhik left
[16:19] <vrurg> Something has to be done to the documentation terminology. 

[16:34] <ab5tract> nemokosh: do you consider rakudo/rakudo!5170 resolved?

[16:35] <ab5tract> dang, I messed up the linkable syntax

[16:35] <discord-raku-bot> <nemokosch> what is the current behavior?

[16:36] <ab5tract> R#5170

[16:36] <linkable6> R#5170 [open]: https://github.com/rakudo/rakudo/issues/5170 Feature: warn on assigning a Block to a Hash

[16:37] <ab5tract> m: my %h = { my $a; }

[16:37] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «Cannot use a Callable as the only argument to store in a Hash.  If the␤intent was to store the contents of a Hash, one should probably use the␤%( ) hash constructor instead of { }.  Causes of { } misinterpretation:␤- using ';' instead of ',' to …»

[16:37] <ab5tract> I just wanted to double check with you before I closed it

[16:39] <discord-raku-bot> <nemokosch> bisectable: my %h = { my $a; }

[16:39] <bisectable6> nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[16:40] <bisectable6> nemokosch, Output on all releases: https://gist.github.com/8cb63c2ba6cf66f826fea5edfd42d0ca

[16:40] <bisectable6> nemokosch, More than 3 changes to bisect, please try a narrower range like old=2023.05 new=HEAD

[16:40] <discord-raku-bot> <nemokosch> I think this is good to go

[16:49] <ab5tract> one more stale bug report closed 

[16:53] <SmokeMachine> Thanks! Now I’m doing it like this: https://www.icloud.com/shortcuts/87a4a19107474d4481e795b82ec7ccec

[16:56] <mort> does raku have something like python's `mystring in ("foo", "bar", "baz")` to check if the variable is "foo", "bar" or "baz"?

[16:57] <leont> `$mystring eq any("foo", "bar", "baz")`

[16:58] <mort> damn I actually tried to google for the any function but I couldn't find anything other than the Any type

[16:58] * leont really should finish their article on junctions, they're way more powerful than in is

[16:59] <leont> Mainly because they're not limited to equality

[17:01] <lizmat> also: $mystring (elem) ("foo", "bar", "baz")

[17:01] <discord-raku-bot> <nemokosch> yeah that's more similar

[17:29] *** kjp left
[17:44] *** melezhik joined
[17:46] <melezhik> tellable6: vrurg: sure, what the terminology is I meant that I need a symbolic table lookup for a module that is required in runtime rather then used in compile time

[17:46] <tellable6> melezhik, I'll pass your message to vrurg

[17:47] *** melezhik left
[17:49] *** melezhik joined
[17:51] *** melezhik left
[18:00] *** abraxxa-home joined
[18:27] *** lichtkind_ joined
[18:31] *** lichtkind__ left
[18:46] *** MasterDuke joined
[19:28] *** jpn left
[19:44] *** antim0d3s left
[19:45] *** sdfgsdfg joined
[19:51] *** simcop2387 left
[19:51] *** perlbot left
[19:56] *** perlbot joined
[19:57] *** simcop2387 joined
[20:16] *** frithnanth joined
[20:18] *** frithnanth left
[20:27] *** Sgeo joined
[20:46] *** kjp joined
[21:01] *** jpn joined
[21:06] *** jpn left
[21:36] *** jpn joined
[21:44] *** jpn left
[21:49] *** summerisle is now known as eof

[22:05] *** sena_kun left
[22:48] *** sdomi left
[22:49] *** sdomi joined
[23:02] *** abraxxa-home left
[23:45] *** jpn joined
[23:50] *** jpn left
