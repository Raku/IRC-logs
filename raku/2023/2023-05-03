[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[01:03] *** reportable6 left
[01:03] *** linkable6 left
[01:03] *** evalable6 left
[01:03] *** benchable6 left
[01:03] *** reportable6 joined
[01:03] *** evalable6 joined
[01:04] *** benchable6 joined
[01:04] *** linkable6 joined
[01:04] *** xinming left
[01:06] *** xinming joined
[01:17] <lucs> How can I fix this regex to match a non-digit printable character?: / <!digit> & <print> /

[01:18] <lucs> m: so 'x' ~~ / <!digit> & <print> /

[01:18] <camelia> rakudo-moar 2e3690bda: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so 'x' ~~" in sink context (line 1)␤»

[01:18] <lucs> m: say so 'x' ~~ / <!digit> & <print> /

[01:18] <camelia> rakudo-moar 2e3690bda: OUTPUT: «False␤»

[01:18] <lucs> m: say so 'x' ~~ / <!digit> /

[01:18] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤»

[01:18] <lucs> m: say so 'x' ~~ / <print> /

[01:18] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤»

[01:24] <guifa> <!digit> is a negative lookaround.  "They match, but they don't consume a character" per docs.  

[01:25] *** deoac joined
[01:25] <guifa> m: (m/ <!digit> <print> /).so.say for <x 3>

[01:25] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤False␤»

[01:25] <lucs> Oh, I see, neat.

[01:25] <lucs> Thanks.

[01:26] <guifa> (the opposite is a positive look around with <?digit>

[01:26] <guifa> m: (m/ <?digit> <print> /).so.say for <x 3>

[01:26] <camelia> rakudo-moar 2e3690bda: OUTPUT: «False␤True␤»

[01:26] <gugod>  <-digit> is probably what you want

[01:27] <lucs> Well, I don't want to match a space.

[01:28] <guifa> also

[01:28] <guifa> m: (m/ <+print -digit> /).so.say for <x 3>

[01:28] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤False␤»

[01:28] <guifa> the initial plus is important, because otherwise it gets interpreted as a method call

[01:29] <lucs> I think I'd better go reread the regexes doc page...

[01:30] <lucs> But yeah, all that solves my problem.

[01:32] <lucs> Oh, by the way, in the description of the <punct> 

[01:32] <lucs> character class, what does "(only Punct beyond ASCII)" mean?

[01:35] <Voldenet> m: say so "。" ~~ /<punct>/

[01:35] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤»

[01:36] <Voldenet> m: say so "。、！？「」『』" ~~ /^<punct>+$/

[01:36] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤»

[01:36] <Voldenet> utf-8 punctuation is also matched

[01:36] <Voldenet> welp, unicode

[01:37] <lucs> Okay, but why "only", shouldn't it be "also"?

[01:38] <lucs> m: say so ',' ~~ / <punct> /

[01:38] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤»

[01:40] <Voldenet> "Symbols" but only <:P> ones

[01:40] <Voldenet> so… <punct> means punctuation (including unicode punctuation)

[01:41] <lucs> I'm probably having trouble parsing the English there.

[01:42] <Voldenet> it appears fairly confusing for me also

[01:44] <guifa> yeah, I think it should just say "Including non-ASCII symbols" or something akin to that

[01:45] <gugod> m: (m/ <+punct> /).so.say for qw/ , . : " ' < > = /;

[01:45] <camelia> rakudo-moar 2e3690bda: OUTPUT: «True␤True␤True␤True␤True␤False␤False␤False␤»

[01:45] <lucs> Perhaps more precisely, Unicode points of the Pc, Pd, Pe, Pf, ... categories.

[01:50] <lucs> I'm really love the fact that for example Raku variable identifiers allow any characters from the L* Categories.

[01:50] <lucs> m: my $ǅoo = 21; say $ǅoo * 2

[01:50] <camelia> rakudo-moar 2e3690bda: OUTPUT: «42␤»

[01:51] <lucs> It opens up the possibility of sigil-like notational devices, to name variables that somehow go together in a similar way.

[01:53] <gugod> m: my $x = 41; my $xﾠ = 43; say ($xﾠ+ $x)/2;

[01:53] <camelia> rakudo-moar 2e3690bda: OUTPUT: «42␤»

[01:53] <gugod>  

[01:53] <gugod> or some amusements :)

[01:55] <guifa> m: my @v = 3,4,5,7,8; my $v̄ = .sum / .elems with @v; say "The mean is $v̄"

[01:55] <camelia> rakudo-moar 2e3690bda: OUTPUT: «The mean is 5.4␤»

[01:55] <lucs> I've successfully (in my code) for example used variables named like $ᵢfoo for variables representing an index into an array (instead of $foo-ndx or something like that).

[01:55] <lucs> guifa: Yep, same idea.

[01:57] <lucs> Unfortunately, the current Vim syntax highlighter for Raku doesn't recognize those L* as being allowed in variable names, and the coloring suffers.

[02:15] *** teatwo joined
[02:16] *** teatwo left
[02:16] *** teatwo joined
[02:17] *** teatwo left
[02:17] *** teatwo joined
[02:18] *** tea3po left
[02:52] <tonyo> .

[03:18] *** linkable6 left
[03:18] *** evalable6 left
[03:19] *** evalable6 joined
[03:21] *** linkable6 joined
[03:34] *** deoac left
[04:07] *** jmcgnh left
[04:08] *** clarkema1 left
[04:08] *** clarkema1 joined
[04:16] *** jmcgnh joined
[04:17] *** jpn joined
[04:18] *** TypoToni left
[04:22] *** jpn left
[05:29] *** Util left
[05:37] *** jpn joined
[05:39] *** jaguart joined
[05:41] *** Util joined
[05:42] *** jpn left
[05:44] *** jaguart left
[05:45] *** zara joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:03] *** zara left
[07:03] *** linkable6 left
[07:03] *** evalable6 left
[07:04] *** linkable6 joined
[07:05] *** evalable6 joined
[07:06] *** zara joined
[07:10] *** perlbot left
[07:10] *** sena_kun joined
[07:11] *** zara left
[07:11] *** simcop2387 left
[07:15] *** simcop2387 joined
[07:17] *** perlbot joined
[07:24] *** abraxxa joined
[07:48] *** Sgeo left
[08:34] *** jpn joined
[09:34] *** linkable6 left
[09:34] *** evalable6 left
[09:35] *** evalable6 joined
[09:35] *** linkable6 joined
[10:35] *** linkable6 left
[10:36] *** linkable6 joined
[11:07] <discord-raku-bot> <Anton Antonov> Is there a way to serialize grammar objects?  (So, they can be reused in different sessions.) I am/was thinking "CBOR::Simple" can be used...

[11:08] <discord-raku-bot> <Anton Antonov> Currently, I use grammar source code print-outs. (Via "Grammar::TokenProcessing".)

[11:09] <lizmat> Grammars are basically classes

[11:09] <lizmat> if grammars couldn't be serialized like classes , we wouldn't have a Raku based on a Raku grammar  :-)

[11:10] <lizmat> just put a grammar in a file as you would a class, and use it

[11:11] <discord-raku-bot> <Nemokosch> hm, how to put it

[11:12] <discord-raku-bot> <Nemokosch> a grammar is not like a usual class one would serialize because it doesn't revolve around data whatsoever

[11:12] <discord-raku-bot> <Nemokosch> the "data" of a grammar is all "hardcoded" into methods

[11:14] <discord-raku-bot> <Nemokosch> so "serializing" it, by usual terms, would mean basically a no-operation between using the very same "empty" (method-only/method-dominated) class twice

[11:16] <discord-raku-bot> <Nemokosch> fair enough, you can call the source code of the grammar the serialization of it - with the usual security concerns of sharing code as data, if that is okay for the use-case

[11:17] <lizmat> ah, ok, I guess I misunderstood the question

[11:18] <lizmat> you should be able to call .raku on an instantiated Grammar object

[11:18] <lizmat> it would basically give you a Match representation

[11:19] <lizmat> m: grammar A { token TOP { .* } }; dd A.parse("foo")

[11:19] <camelia> rakudo-moar 2e3690bda: OUTPUT: «Match.new(:orig("foo"), :from(0), :pos(3))␤»

[11:20] <discord-raku-bot> <Nemokosch> I'm also not sure about the question but so far the way I understood it was a similar representation to, say, a Backus-Naur Form

[11:22] <discord-raku-bot> <Anton Antonov> @lizmat "you should be able to call .raku on an instantiated Grammar object" -- I tried that on grammars I have generated and produced only the grammar (type) name.

[11:23] <discord-raku-bot> <Anton Antonov> Thanks for the interest lizmat and Nemokosch! My current solution is exemplified here : https://github.com/antononcube/Raku-Grammar-TokenProcessing/blob/main/examples/Grammar-source-code.raku

[11:24] <lizmat> m: say Q|grammar A { token TOP { .* } }|.AST.statements.head.expression.DEPARSE

[11:24] <camelia> rakudo-moar 2e3690bda: OUTPUT: «grammar A { token TOP { .* } }␤»

[11:24] <lizmat> Anton Antonov  ^ you want something like that ?

[11:25] <discord-raku-bot> <Anton Antonov> @lizmat Yes, I just tried your example. Trying it on "bigger" grammars now. 🙂

[11:28] *** zara joined
[11:29] *** zara left
[11:56] <tbrowder__> howdy, all

[11:58] <tbrowder__> i wonder why module builders can't be easier to use. i would love to be able to run a raku script during the build portion without a giant hassle,

[11:58] <tbrowder__> back later...

[12:00] *** reportable6 left
[12:03] *** reportable6 joined
[12:56] *** deoac joined
[13:04] *** jgaz left
[13:09] *** jgaz joined
[14:09] *** bisectable6 left
[14:11] *** bisectable6 joined
[14:15] *** tea3po joined
[14:16] *** tea3po left
[14:16] *** tea3po joined
[14:17] *** tea3po left
[14:17] *** tea3po joined
[14:18] *** teatwo left
[15:03] *** Sgeo joined
[15:17] *** TypoToni joined
[15:22] *** sarna joined
[15:50] <ugexe> tbrowder__: its pretty simple to run a raku script during the build phase

[15:50] <ugexe> what are you trying that isn't working as you expect?

[16:04] <kybr> zef can't install Cairo because it can't find the library because I am on a mac and it is in /opt/homebrew/lib and zef doesn't know that. how do I tell zef where to look for the library? 

[16:05] <ugexe> raku doesn't know that

[16:06] <tonyo> kybr: usan environment variable

[16:06] <tonyo> most likely setting DYLD_LIBRARY_PATH

[16:07] <tonyo> or LD_LIBRARY_PATH

[16:10] <ugexe> tbrowder__: something like https://gist.github.com/ugexe/d2bb004eea9c85e10d893952deffe46f should work

[16:12] <kybr> ugexe: i don't know how to use that

[16:13] <kybr> tonyo: no luck with DYLD_LIBRARY_PATH or DYLD_FALLBACK_LIBRARY_PATH

[16:13] <tonyo> try with LD_LIBRARY_PATH

[16:13] <tonyo> that's a more standard one

[16:14] <kybr> doesn't work. but thanks

[16:16] <kybr> a symlink worked

[16:22] *** linkable6 left
[16:22] *** evalable6 left
[16:23] *** linkable6 joined
[16:23] *** evalable6 joined
[16:24] *** abraxxa left
[16:52] *** jpn left
[16:55] *** jpn joined
[17:01] *** perlbot left
[17:01] *** simcop2387 left
[17:05] *** falsifian left
[17:05] *** andinus` left
[17:05] *** oodani left
[17:05] *** kaskal left
[17:06] <[Coke]> symlink is the way to go. I think we have a writeup in some module's bug report somewhere. :|

[17:06] <[Coke]> I had similar issues on my m2 laptop trying to get something working with Nativecall

[17:06] *** kaskal joined
[17:07] <tonyo> LD_LIBRARY_PATH is useful for testing things, it does work if set correctly

[17:07] <tonyo> symlink is much easier/more permanent

[17:10] *** goblin joined
[17:10] *** Matthew|m joined
[17:27] *** jpn left
[17:37] *** jpn joined
[17:57] *** jpn left
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:04] *** jpn joined
[18:18] *** kathe joined
[18:24] *** kathe left
[18:31] <patrickb> https://docs.raku.org/language/nativecall#MacOS_-_DYLD_LIBRARY_PATH_is_ignored

[18:37] *** TieUpYourCamel left
[18:44] *** jpn left
[18:49] *** jpn joined
[19:49] *** linkable6 left
[19:49] *** evalable6 left
[19:53] *** deoac left
[19:54] *** jpn left
[19:57] *** TieUpYourCamel joined
[20:23] *** jpn joined
[20:27] <tbrowder__> ugexe: that's great and helpful,  but it need to be in the docs instead of or following the current entry.

[20:28] <tbrowder__> if i get my current project working with it i'll take a shot at a doc PR.

[20:29] <tbrowder__> thnx!

[20:43] <ugexe> you could create a builder module to do it

[20:43] <ugexe> see Distribution::Builder::MakeFromJSON

[20:52] *** evalable6 joined
[21:03] *** sena_kun left
[21:03] <tbrowder__> er, i have trouble figuring out what's going on with that.

[21:05] <tbrowder__> I can create a Makefile to run raku scripts. Can that be transformed into such a builder?

[21:08] <tbrowder__> the immediate need i have is a way to search for certain font files on the host system, and copy them to a location known to the module after it is installed.

[21:11] <tonyo> i've used LD_LIBRARY_PATH to write libyaml

[21:11] <tonyo> bindings

[21:14] <tbrowder__> i would

[21:15] <tbrowder__> disregard finger fumble...

[21:35] <ugexe> i'm having trouble understanding what you are having trouble with. that sounds like it is just adding the appropriate `run ...` in the Build.rakumod file

[21:37] <ugexe> if you show me what you think should work i can comment further

[21:47] <tbrowder__> No, the Build.rakumod is pretty clear, it's the other one that's not so clear.

[21:49] <tbrowder__> regarding Build.pm, what is $dist-path on github/workflows? 

[21:50] <tbrowder__> er, Build.rakumod

[21:55] <tbrowder__> $dist-path i guess is '.' from the author's view

[21:58] *** linkable6 joined
[22:03] *** tea3po left
[22:09] *** teatime joined
[23:09] *** benchable6 left
[23:09] *** statisfiable6 left
[23:09] *** bisectable6 left
[23:09] *** sourceable6 left
[23:09] *** linkable6 left
[23:09] *** shareable6 left
[23:09] *** evalable6 left
[23:09] *** tellable6 left
[23:09] *** coverable6 left
[23:09] *** unicodable6 left
[23:09] *** committable6 left
[23:09] *** reportable6 left
[23:09] *** nativecallable6 left
[23:09] *** squashable6 left
[23:09] *** releasable6 left
[23:09] *** bloatable6 left
[23:09] *** greppable6 left
[23:09] *** notable6 left
[23:09] *** quotable6 left
[23:10] *** benchable6 joined
[23:11] *** unicodable6 joined
[23:11] *** squashable6 joined
[23:11] *** linkable6 joined
[23:12] *** notable6 joined
[23:12] *** nativecallable6 joined
[23:44] <ugexe> It’ll be the directory the META6.json resides in

