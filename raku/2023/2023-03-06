[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:02] *** euandreh left
[00:04] <Geth> ¦ doc/main: a4b1c308b8 | cfa++ | doc/Type/independent-routines.rakudoc

[00:04] <Geth> ¦ doc/main: Fix link markup.

[00:04] <Geth> ¦ doc/main: 

[00:04] <Geth> ¦ doc/main: Closes #4254.

[00:04] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/a4b1c308b8

[00:48] *** oodani left
[00:49] *** oodani joined
[01:01] *** jpn joined
[01:07] *** jpn left
[01:37] <Geth> ¦ doc/main: 50f82d30a8 | cfa++ | doc/Language/regexes.rakudoc

[01:37] <Geth> ¦ doc/main: Remove formatting codes from regexes table

[01:37] <Geth> ¦ doc/main: 

[01:37] <Geth> ¦ doc/main: These are currently unsupported (and therefore incorrectly rendered).

[01:37] <Geth> ¦ doc/main: 

[01:37] <Geth> ¦ doc/main: A grep of the doc tree suggests that no other `=table`s are currently

[01:37] <Geth> ¦ doc/main: using formatting codes.

[01:37] <Geth> ¦ doc/main: 

[01:37] <Geth> ¦ doc/main: Related issue: https://github.com/Raku/doc-website/issues/195.

[01:37] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/50f82d30a8

[02:07] *** evalable6 left
[02:07] *** linkable6 left
[02:07] *** evalable6 joined
[02:08] *** TieUpYourCamel left
[02:09] *** linkable6 joined
[02:12] <Geth> ¦ doc/type-links: 99f060a811 | (Will Coleda)++ | xt/rakudoc-types.rakutest

[02:12] <Geth> ¦ doc/type-links: Add test for Type link formatting.

[02:13] <Geth> ¦ doc/type-links: 

[02:13] <Geth> ¦ doc/type-links: Accepted formatting is, e.g.:

[02:13] <Geth> ¦ doc/type-links: 

[02:13] <Geth> ¦ doc/type-links: L<C<Int>|/type/Int>

[02:13] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/99f060a811

[02:20] <Geth> ¦ doc/type-links: f1e00509db | (Will Coleda)++ | xt/rakudoc-types.rakutest

[02:20] <Geth> ¦ doc/type-links: Find Foo::Bar types.

[02:20] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/f1e00509db

[02:30] <Geth> ¦ doc/type-links: bd4d0c3c47 | (Will Coleda)++ | xt/rakudoc-types.rakutest

[02:30] <Geth> ¦ doc/type-links: Remove stale comment

[02:30] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/bd4d0c3c47

[02:31] <Geth> ¦ doc: coke++ created pull request #4256: Type links

[02:31] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4256

[02:48] *** rf left
[02:50] *** jpn joined
[02:54] *** jpn left
[03:03] *** razetime joined
[03:07] *** rf joined
[03:09] <rf> What dist do people use for SHA256 hashing?

[03:14] *** rf left
[03:27] <tonyo> https://raku.land/cpan:BDUGGAN/Digest::SHA256::Native

[03:27] <tellable6> 2023-03-05T03:01:29Z #raku <rf> tonyo: There is a bug with Fez, I uploaded a dist about 20 minutes ago, and I had a typo in the changelog. I went to go remove and re-upload but it says its been 24 hours.

[03:30] <tonyo> rf: not sure how long it's been but give it another go after an hour+ to see if it's a bad cache

[03:30] <tellable6> tonyo, I'll pass your message to rf

[03:41] *** razetime left
[03:42] *** Sgeo left
[03:43] *** cfa left
[04:02] *** jpn joined
[04:08] *** jpn left
[04:14] *** razetime joined
[04:16] *** squashable6 left
[04:16] *** squashable6 joined
[04:17] *** Sgeo joined
[04:22] *** razetime left
[04:33] *** Xliff left
[04:39] *** razetime joined
[04:43] *** jpn joined
[04:53] <Geth> ¦ doc/type-links: a8963e1d62 | (Will Coleda)++ | 2 files

[04:53] <Geth> ¦ doc/type-links: clean up test descriptions

[04:53] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/a8963e1d62

[04:53] <Geth> ¦ doc/type-links: aa83d5088d | (Will Coleda)++ | xt/rakudoc-types.rakutest

[04:53] <Geth> ¦ doc/type-links: Support #tags on link urls

[04:53] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/aa83d5088d

[04:55] *** jpn left
[05:09] *** razetime left
[05:47] *** razetime joined
[05:53] *** razetime left
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:22] *** jpn joined
[06:28] *** jpn left
[06:46] *** teatwo joined
[06:49] *** teatwo left
[06:49] *** teatwo joined
[06:49] *** tea3po left
[07:49] *** linkable6 left
[07:49] *** tellable6 left
[07:49] *** greppable6 left
[07:49] *** releasable6 left
[07:49] *** squashable6 left
[07:49] *** evalable6 left
[07:49] *** benchable6 left
[07:49] *** sourceable6 left
[07:49] *** nativecallable6 left
[07:49] *** unicodable6 left
[07:49] *** bloatable6 left
[07:49] *** statisfiable6 left
[07:49] *** notable6 left
[07:49] *** reportable6 left
[07:49] *** shareable6 left
[07:49] *** quotable6 left
[07:49] *** committable6 left
[07:49] *** coverable6 left
[07:49] *** bisectable6 left
[07:50] *** bisectable6 joined
[07:50] *** evalable6 joined
[07:50] *** nativecallable6 joined
[07:50] *** squashable6 joined
[07:50] *** statisfiable6 joined
[07:50] *** committable6 joined
[07:51] *** unicodable6 joined
[07:51] *** quotable6 joined
[07:51] *** linkable6 joined
[07:51] *** notable6 joined
[07:51] *** benchable6 joined
[07:51] *** coverable6 joined
[07:51] *** releasable6 joined
[07:52] *** sourceable6 joined
[07:52] *** greppable6 joined
[07:52] *** reportable6 joined
[07:52] *** shareable6 joined
[07:52] *** bloatable6 joined
[07:53] *** tellable6 joined
[08:11] *** jpn joined
[08:16] *** jpn left
[08:43] *** Sgeo left
[08:53] *** abraxxa-home joined
[08:59] *** dakkar joined
[09:10] *** jpn joined
[09:39] *** jpn left
[09:51] *** jpn joined
[10:51] *** linkable6 left
[10:51] *** evalable6 left
[10:52] *** linkable6 joined
[10:53] *** evalable6 joined
[11:03] *** jpn left
[11:10] *** jpn joined
[11:25] *** jpn left
[11:26] *** jpn joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:21] *** merp joined
[12:28] <Geth> ¦ doc/type-links: 6eac901a4f | (Will Coleda)++ | xt/rakudoc-types.rakutest

[12:28] <Geth> ¦ doc/type-links: remove debug output

[12:28] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/6eac901a4f

[13:09] *** jpn left
[13:10] *** rf joined
[13:10] <rf> Morning folks

[13:10] <tellable6> 2023-03-06T03:30:08Z #raku <tonyo> rf: not sure how long it's been but give it another go after an hour+ to see if it's a bad cache

[13:11] *** jpn joined
[13:17] *** jpn left
[13:28] <rf> Is there any way for me to pattern match a Hash's structure

[13:30] <rf> m: my %my-map = foo => 'bar', baz => 'e'; given %my-map { { foo => 'bar', baz => 'e'  } { say 'works' }; default { say 'nope' } }

[13:30] <camelia> rakudo-moar 2183ec721: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------>  %my-map { { foo => 'bar', baz => 'e'  }⏏ { say 'works' }; default { say 'nope' …»

[13:30] <rf> m: my %my-map = foo => 'bar', baz => 'e'; given %my-map { when { foo => 'bar', baz => 'e' } { say 'works' }; default { say 'nope' } }

[13:30] <camelia> rakudo-moar 2183ec721: OUTPUT: «works␤»

[13:30] <rf> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map { when { foo => 'bar', baz => 'e' } { say 'works' }; default { say 'nope' } }

[13:30] <camelia> rakudo-moar 2183ec721: OUTPUT: «nope␤»

[13:30] <rf> Hmm, can I just match on keys?

[13:31] <rf> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map.keys { when ('foo', 'bar') { say 'works' }; default { say 'nope' } }

[13:31] <camelia> rakudo-moar 5d8ddaf5b: OUTPUT: «nope␤»

[13:31] <rf> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map.keys { when ('foo', 'baz') { say 'works' }; default { say 'nope' } }

[13:31] <camelia> rakudo-moar 5d8ddaf5b: OUTPUT: «nope␤»

[13:36] <rf> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map { when { foo => *, baz => * } { say 'works' }; default { say 'nope' } }

[13:36] <camelia> rakudo-moar 5d8ddaf5b: OUTPUT: «nope␤»

[13:36] <rf> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map { when { foo => Any, baz => Any } { say 'works' }; default { say 'nope' } }

[13:36] <camelia> rakudo-moar 5d8ddaf5b: OUTPUT: «nope␤»

[13:38] <discord-raku-bot> <Nemokosch> did sub-signature matching not work?

[13:39] <discord-raku-bot> <Nemokosch> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map { when :(:$foo, :$bar) { say 'works' }; default { say 'nope' } }

[13:39] <discord-raku-bot> <Raku eval>  nope 

[13:39] <discord-raku-bot> <Nemokosch> rip

[13:39] <discord-raku-bot> <Nemokosch> oh damn, foo and baz

[13:39] <discord-raku-bot> <Nemokosch> m: my %my-map = foo => 'bar', baz => 'abc'; given %my-map { when :(:$foo, :$baz) { say 'works' }; default { say 'nope' } }

[13:39] <discord-raku-bot> <Raku eval>  works 

[13:39] <discord-raku-bot> <Nemokosch> 🥳

[13:40] *** jpn joined
[13:40] <rf> Sweet.

[13:40] <rf> Thanks!

[13:54] *** jpn left
[14:00] *** jpn joined
[14:09] *** jpn left
[14:20] *** jgaz joined
[14:21] *** jpn joined
[14:50] *** jpn left
[15:06] *** Sgeo joined
[15:29] *** [Coke] joined
[15:30] <[Coke]> Looking for community feedback: Should the "official" doc link for a Foo::Bar type in core be /type/Foo/Bar or /type/Foo::Bar - both are supported on the website right now but we are going to make all the links in the source conform to one of those.

[15:31] <[Coke]> I have a preference for the former but understand users might prefer the latter.

[15:32] *** jgaz left
[15:38] *** kjp left
[15:38] *** kjp joined
[15:47] <dakkar> [Coke]: since the existence of class/role/subset `Foo::Bar` implies the existence of package `Foo`, the fully hierarchical `/type/Foo/Bar` looks fine; only problem: `/type/Foo` may not refer to an actual type

[15:47] <dakkar> so would that 404, or redirect to a description of package Foo?

[15:54] <discord-raku-bot> <Nemokosch> I already had a take: unlike Java and Python, it's a mere convention to organize namespaces like hierarchical folders. It's fine that Rakudo rolls with this but it is rather an implementation detail, not something to organize high-level content by

[15:58] <[Coke]> If there is anything at the top level package level, it'd show up. If not, a 404.

[15:58] <[Coke]> In some cases, there isn't anything in the package. Maybe we could force it to be a listing of all children folders.

[16:01] <[Coke]> dakkar's point here contrasts with nemokosch's - it does make sense to group content under Foo:: - namespaces imply grouping.

[16:01] *** jgaz joined
[16:01] *** cfa joined
[16:02] <dakkar> [Coke]: `/type/Foo` should describe *type* Foo

[16:02] <dakkar> if there's no type, it should either 404 or redirect to `/package/Foo` or `/class/Foo` or whatever

[16:02] <discord-raku-bot> <Nemokosch> consider that there is Proc and Proc::Async, IO and IO::Path and so on

[16:03] <dakkar> (or are we showing classes/roles under `/type/`? still, packages are definitely not types, right?)

[16:03] <discord-raku-bot> <Nemokosch> one could argue that this is the problem itself - to make Proc and Proc::Async objects of the same kind

[16:04] <discord-raku-bot> <Nemokosch> one can carry the analogy through by consistently translating :: to /, that's a fair point

[16:04] <dakkar> uh? both Proc and Proc::Async are classes

[16:05] <discord-raku-bot> <Nemokosch> exactly

[16:05] <dakkar> so they are "of the same kind"… I'm clearly failing to understand something

[16:05] <discord-raku-bot> <Nemokosch> they essentially do the same thing, thre is no hierarchy between them

[16:05] <dakkar> there's namespace containment

[16:06] <discord-raku-bot> <Nemokosch> yes, and that rather seems a source of confusion than anything useful

[16:06] <dakkar> mah, we've been fine with that in perl5 for decades

[16:06] <discord-raku-bot> <Nemokosch> in practice, they are classes that address the same problem, they are siblings, if anything

[16:06] <discord-raku-bot> <Nemokosch> No, not "fine" with that

[16:07] <discord-raku-bot> <Nemokosch> there is a reason why Perl5 had to go

[16:07] <dakkar> perl5 hasn't gone anywhere 😁

[16:07] <discord-raku-bot> <Nemokosch> unfortunately, but it should have, that was the whole point of Perl 6

[16:07] <dakkar> what problems has the "nested namespaces don't imply anything else" caused?

[16:08] <discord-raku-bot> <Nemokosch> how many problems should they cause? is confusion not enough?

[16:09] <dakkar> you are the first person I see to report confusion (in ~25 years), but of course my sample set is not necessarily representative

[16:09] <discord-raku-bot> <Nemokosch> but then again not everybody uses Perl

[16:09] <[Coke]> dakkar: there is no /class/Foo

[16:09] <discord-raku-bot> <Nemokosch> by the way, this is a good illustration of the schizophrenia this project has been suffering from

[16:10] <discord-raku-bot> <Nemokosch> too radical for Perl users, not radical enough to not carry the Perl baggage

[16:11] <dakkar> [Coke]: ok, I guess there's also no /package/Foo, we only document names that can be used as (nominal?) types

[16:11] <[Coke]> (should 404) - ok, that's the current setup.

[16:11] <dakkar> 404 is sensible enough

[16:11] <[Coke]> dakkar: correct. Something we can think about updating, but that's a different issue.

[16:12] <dakkar> `/type/Foo/Bar` would be wrong for perl5 (because the existence of `Foo::Bar` does not imply the existence of `Foo`), but it's fine for raku

[16:14] <discord-raku-bot> <Nemokosch> Foo is allowed to have nothing to do with Foo::Bar, though, and (for the better or maybe for the worse) the core uses this possibility, as illustrated

[16:14] <[Coke]> so we basically have one vote for each. (dakkar, Nemo*) - if anyone has a preference, please let us know in #raku-doc, where I now retreat to.

[16:14] *** [Coke] left
[16:20] *** jpn joined
[16:28] <tonyo> vote on what?

[16:29] <tonyo> oh, module path on the docs site?  i think the module name rather than treating it as a path is more consistent with how CURs work

[16:31] <discord-raku-bot> <Nemokosch> do all objects in Raku have .WHO available on them?

[16:31] <dakkar> Nemokosch: I believe so

[16:31] <tellable6> dakkar, I'll pass your message to Nemokosch

[16:33] <lizmat> although I think it's technically possible to create an object that has a HOW but not a WHO, I don't think we currently have any

[16:33] <lizmat> but I could well be wrong  :-)

[16:35] <Geth> ¦ doc/type-links: 96dbf7cd6f | (Will Coleda)++ | xt/rakudoc-types.rakutest

[16:35] <Geth> ¦ doc/type-links: Prefer colons in link URLs.

[16:35] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/96dbf7cd6f

[16:35] <discord-raku-bot> <Nemokosch> to me, that means, basically any symbol can act like a namespace?

[16:37] <lizmat> as long as its a valid identifier

[16:52] <discord-raku-bot> <Nemokosch> hm, okay

[16:53] <discord-raku-bot> <Nemokosch> so I mean what follows is that if you have some Foo::Bar, that doesn't really tell you anything about Foo in itself, only Foo.WHO (that it contains Bar as a key)

[16:54] <discord-raku-bot> <Nemokosch> so even if there is a hierarchy, that hierarchy is not between Foo and whatever Bar links to

[16:57] <Geth> ¦ doc/missing-c: 90102adbf0 | (Will Coleda)++ | xt/rakudoc-brackets.rakutest

[16:57] <Geth> ¦ doc/missing-c: Add test for <> (missing formatcode)

[16:57] <Geth> ¦ doc/missing-c: review: https://github.com/Raku/doc/commit/90102adbf0

[16:57] <dakkar> correct, it's namespace containment, not any "hierarchy" (which feels a vague term to me)

[16:58] <Geth> ¦ doc: coke++ created pull request #4257: Add test for <> (missing formatcode)

[16:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4257

[17:09] *** euandreh joined
[17:10] *** jgaz left
[17:21] <Geth> ¦ doc/type-links: 3a8c16c082 | (Will Coleda)++ | xt/rakudoc-types.rakutest

[17:21] <Geth> ¦ doc/type-links: Types should be C<> on their own page.

[17:21] <Geth> ¦ doc/type-links: review: https://github.com/Raku/doc/commit/3a8c16c082

[17:36] *** dakkar left
[17:47] <lizmat> PSA: the Rakudo Weekly News will be later today or tomorrow

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:05] <shmup> weeeee

[18:15] *** jpn left
[18:19] *** jpn joined
[18:26] *** jgaz joined
[18:28] <Geth> ¦ doc/main: cae02e1565 | cfa++ | doc/Language/regexes.rakudoc

[18:28] <Geth> ¦ doc/main: Fix table header

[18:28] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/cae02e1565

[18:48] *** tea3po joined
[18:51] *** teatwo left
[19:34] *** xelxebar_ joined
[19:36] *** shmup_ joined
[19:36] *** swagg_boi joined
[19:36] *** Aedil_ joined
[19:37] *** cfa_ joined
[19:37] *** xelxebar left
[19:37] *** shmup left
[19:37] *** tadzik left
[19:37] *** swaggboi left
[19:37] *** BarrOff left
[19:37] *** cfa left
[19:37] *** Aedil left
[19:38] *** cfa_ left
[19:49] *** tadzik joined
[19:50] *** jpn left
[19:53] *** BarrOff joined
[20:13] *** jpn joined
[20:19] *** jpn left
[20:20] *** jpn joined
[20:24] <lizmat> PSA: the Rakudo Weekly News will be tomorrow

[20:25] *** jpn left
[21:01] *** eseyman joined
[21:16] *** Manifest0 joined
[21:18] *** jpn joined
[21:22] <Geth> ¦ doc/missing-c: 5028c1227e | (Will Coleda)++ | xt/rakudoc-brackets.rakutest

[21:22] <Geth> ¦ doc/missing-c: Skip comments

[21:22] <Geth> ¦ doc/missing-c: 

[21:22] <Geth> ¦ doc/missing-c: Comments can have text like C<push> that looks correct,

[21:22] <Geth> ¦ doc/missing-c: but since it's all just text, this would otherwise

[21:22] <Geth> ¦ doc/missing-c: trigger a test failure.

[21:22] <Geth> ¦ doc/missing-c: review: https://github.com/Raku/doc/commit/5028c1227e

[21:22] <Geth> ¦ doc/missing-c: 454e06dfeb | (Will Coleda)++ | 17 files

[21:22] <Geth> ¦ doc/missing-c: Fixup some missing C<> in pod.

[21:22] <Geth> ¦ doc/missing-c: review: https://github.com/Raku/doc/commit/454e06dfeb

[21:23] *** jpn left
[21:37] <Geth> ¦ doc/missing-c: 96857487a2 | (Will Coleda)++ | xt/rakudoc-brackets.rakutest

[21:37] <Geth> ¦ doc/missing-c: whitelist infix:<> prefix:<>

[21:37] <Geth> ¦ doc/missing-c: review: https://github.com/Raku/doc/commit/96857487a2

[21:37] <Geth> ¦ doc/missing-c: 40d34ca852 | (Will Coleda)++ | 2 files

[21:37] <Geth> ¦ doc/missing-c: Fixup some missing C<> in pod.

[21:37] <Geth> ¦ doc/missing-c: review: https://github.com/Raku/doc/commit/40d34ca852

[21:44] *** jpn joined
[21:49] *** jpn left
[22:17] *** jpn joined
[22:26] *** abraxxa-home left
[22:27] *** jpn left
[22:28] *** jgaz left
[23:09] *** shmup_ is now known as shmup

[23:33] *** kjp left
