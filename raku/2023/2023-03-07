[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:35] *** kjp joined
[00:43] *** Manifest0 left
[01:04] *** xinming left
[01:06] *** xinming joined
[01:21] <rf> How's everyone doing today?

[01:21] <tea3po> I am well, ty for asking.  You?

[01:22] <rf> Good, just had an excellent dinner and some ice-cream :^)

[01:33] <discord-raku-bot> <Anton Antonov> @rf So, no more cinnamon rolls ?!

[01:34] <shmup> @

[01:34] <rf> @Anton, no I ate them all D:

[01:37] *** frost joined
[01:40] *** frost left
[01:42] <discord-raku-bot> <Anton Antonov> @rf Of course you cook some new ones, no ? Also, do you know how to make ice-cream?

[01:43] <rf> I know how to make ice-cream but it is too much work, I am a lazy programmer after all

[01:44] <rf> I think I am going to make cinnamon rolls a yearly thing, too many calories haha

[01:47] <discord-raku-bot> <Anton Antonov> @rf I see. At this point I completely delegate cooking. When was doing my PhD, I considered spreading butter on bread cooking...

[01:48] <rf> Lol, what field did you study? I sure hope it wasn't culinary arts ;D

[01:51] *** frost joined
[01:51] <discord-raku-bot> <Anton Antonov> @rf Good point. My PhD is/was in Large Scale Air-Pollution Simulations.

[01:53] <rf> Nice that is a very interesting topic to cover

[01:59] <discord-raku-bot> <Anton Antonov> @rf Complex systems can be very "entertaining" : https://github.com/antononcube/SystemModeling .

[02:00] *** frost left
[02:01] <rf> Mathematica is interesting haha, I have never used it for anything useful though

[02:06] <discord-raku-bot> <Anton Antonov> Until 2014 I used Mathematica for type of scientific and mathematical modeling and/or data analysis. The corresponding "productized" versions in C++. Then I started doing the data analysis with R. I still do mathematical optimization and modeling with Mathematica; the corresponding productized versions in R or Python.

[02:07] <rf> Cool, maybe productized versions in Raku one day

[02:09] <discord-raku-bot> <Anton Antonov> @rf I doubt it. üôÇ

[02:11] <rf> Nemokosch, Template6 is kind of borked too with for loops not having the variable, for example: [% for foo in something %] [% foo.value %] [% end %] If something isn't set it simply prints foo.value

[02:11] <rf> Anton ;(

[02:23] <discord-raku-bot> <Anton Antonov> @rf I am writing a blog post about it.

[02:23] <rf> We can always dream

[02:25] <discord-raku-bot> <Anton Antonov> @rf In color  or black-&-white ?

[02:26] <rf> I think Raku is a fairly colorful language, so let's do color

[02:26] <discord-raku-bot> <Nemokosch> hm, shouldn't that throw one level up, if something is not set in the first place?

[02:28] <rf> Not sure, but I have to do: [% if something %] [% for foo in something %] [% foo.value %] [% end %] [% end %]

[02:28] <rf> to get around it

[02:30] <discord-raku-bot> <Nemokosch> tbh I don't quite get why you would want to loop over something that doesn't even exist

[02:37] <rf> Well sometimes it will exist sometimes it wont I don't want to write a new template for both cirumstances lol

[02:39] <jdv> is Template6 worth it?  i havent looked.  but doesnt cro have some template thing or raku's interpolation is pretty awesome in the first place.

[02:39] <tellable6> 2023-02-27T15:13:10Z #raku-dev <AlexDaniel> jdv that you can fix yourself :)  https://github.com/Raku/whateverable/blob/f7f301303aed2d0dea57cc5b939eb2faf25ec598/xbin/Releasable.p6#L268

[02:39] <tellable6> 2023-02-27T15:21:39Z #raku-dev <AlexDaniel> jdv I patched releasable with the fix right on the server, but please correct it in the repo as well

[02:40] <jdv> .tell AlexDaniel ok

[02:40] <tellable6> jdv, I'll pass your message to AlexDaniel

[02:43] <rf> jdv, I think it's OK, I'm using it for a fairly large project but there are some rough edges

[02:44] <discord-raku-bot> <Nemokosch> idk it seems a bit weird to not know what exists on top level lol

[02:44] <discord-raku-bot> <Nemokosch> anyway

[02:44] <discord-raku-bot> <Nemokosch> m: for Nil -> $big-brain { say 'didgeridoo' }

[02:44] <discord-raku-bot> <Raku eval>  didgeridoo 

[02:44] <discord-raku-bot> <Nemokosch> KHM KHM

[02:45] <discord-raku-bot> <Nemokosch> the usual "strict workaround" won't do because even Nil can convert into a perfectly valid one-element array...

[02:46] <discord-raku-bot> <Nemokosch> m: for Empty -> $big-brain { say 'didgeridoo' }

[02:46] <discord-raku-bot> <Raku eval>  

[02:47] <discord-raku-bot> <Nemokosch> thank heavens

[02:48] <discord-raku-bot> <Nemokosch> I wonder if the "strict lookup" could just always return Empty

[02:51] <rf> That would work like a charm I think

[02:58] <rf> Gotta head off the for the night, cya folks

[02:58] *** rf left
[03:08] *** razetime joined
[04:08] *** evalable6 left
[04:08] *** linkable6 left
[04:08] *** notable6 left
[04:08] *** quotable6 left
[04:08] *** statisfiable6 left
[04:08] *** reportable6 left
[04:08] *** nativecallable6 left
[04:08] *** benchable6 left
[04:08] *** squashable6 left
[04:08] *** coverable6 left
[04:08] *** shareable6 left
[04:08] *** bisectable6 left
[04:08] *** sourceable6 left
[04:08] *** committable6 left
[04:08] *** bloatable6 left
[04:08] *** releasable6 left
[04:08] *** greppable6 left
[04:08] *** unicodable6 left
[04:08] *** tellable6 left
[04:08] *** benchable6 joined
[04:08] *** greppable6 joined
[04:08] *** squashable6 joined
[04:08] *** quotable6 joined
[04:08] *** linkable6 joined
[04:08] *** committable6 joined
[04:09] *** shareable6 joined
[04:09] *** coverable6 joined
[04:09] *** notable6 joined
[04:09] *** unicodable6 joined
[04:09] *** tellable6 joined
[04:09] *** bloatable6 joined
[04:09] *** sourceable6 joined
[04:10] *** releasable6 joined
[04:10] *** bisectable6 joined
[04:10] *** reportable6 joined
[04:10] *** nativecallable6 joined
[04:11] *** evalable6 joined
[04:11] *** statisfiable6 joined
[05:11] *** statisfiable6 left
[05:11] *** tellable6 left
[05:11] *** notable6 left
[05:11] *** evalable6 left
[05:11] *** linkable6 left
[05:11] *** bloatable6 left
[05:11] *** squashable6 left
[05:11] *** unicodable6 left
[05:11] *** reportable6 left
[05:11] *** bisectable6 left
[05:11] *** releasable6 left
[05:11] *** quotable6 left
[05:11] *** benchable6 left
[05:11] *** notable6 joined
[05:12] *** tellable6 joined
[05:12] *** linkable6 joined
[05:12] *** reportable6 joined
[05:12] *** bloatable6 joined
[05:12] *** statisfiable6 joined
[05:13] *** releasable6 joined
[05:13] *** bisectable6 joined
[05:13] *** benchable6 joined
[05:14] *** quotable6 joined
[05:14] *** evalable6 joined
[05:14] *** unicodable6 joined
[05:14] *** squashable6 joined
[05:18] *** razetime left
[05:31] *** razetime joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:16] *** razetime left
[06:47] *** teatwo joined
[06:50] *** tea3po left
[07:02] *** teatwo left
[07:03] *** teatwo joined
[07:06] *** xinming left
[07:31] *** razetime joined
[08:13] *** Sgeo left
[08:27] *** ProperN[out] left
[08:28] *** ProperNoun joined
[09:09] *** Manifest0 joined
[09:12] *** dakkar joined
[09:14] *** razetime left
[09:24] <discord-raku-bot> <Nemokosch> rf: I did the patch üòõ

[09:35] *** nort left
[10:35] *** unicodable6 left
[10:35] *** evalable6 left
[10:35] *** committable6 left
[10:35] *** linkable6 left
[10:35] *** sourceable6 left
[10:35] *** shareable6 left
[10:35] *** coverable6 left
[10:35] *** statisfiable6 left
[10:35] *** quotable6 left
[10:35] *** tellable6 left
[10:35] *** squashable6 left
[10:35] *** bisectable6 left
[10:35] *** benchable6 left
[10:35] *** releasable6 left
[10:35] *** notable6 left
[10:36] *** unicodable6 joined
[10:36] *** tellable6 joined
[10:36] *** releasable6 joined
[10:36] *** notable6 joined
[10:36] *** quotable6 joined
[10:36] *** shareable6 joined
[10:37] *** sourceable6 joined
[10:37] *** bisectable6 joined
[10:37] *** linkable6 joined
[10:37] *** squashable6 joined
[10:37] *** committable6 joined
[10:37] *** benchable6 joined
[10:37] *** coverable6 joined
[10:38] *** evalable6 joined
[10:38] *** statisfiable6 joined
[11:03] *** Johanna100 joined
[11:11] <Johanna100> I was trying to find a scripting language appropriate for my projects. I considered Guile but I find Scheme difficult to read and Guile doesn't build on MacOS without a hack (for some bizarre reason the build script depends on non-standard sed; the bug has been discussed in their mailing list but nobody thought MacOS was important enough to fix it,

[11:11] <Johanna100> and the barrier to entry for me to fix it myself is too high). Raku builds and tests without any problem whatsoever. Keep kicking butt guys

[11:20] *** thundergnat joined
[11:20] *** frost joined
[11:21] <lizmat> Johanna100: we try  :-)   and the girls also  :-)

[11:21] *** frost left
[11:23] <thundergnat> Glad it worked out for you. Raku still has a few rough edges here and there and the performance isn't where we would like it to be yet, but it is pretty usable for a large cross section of tasks.

[11:25] *** thundergnat left
[11:26] *** frost joined
[11:28] *** frost left
[11:29] <discord-raku-bot> <Nemokosch> seems like Guile is GNU software so maybe it's not surprising it comes with "non-standard sed" (I suppose gsed)

[11:54] *** grondilu joined
[12:00] *** reportable6 left
[12:01] <Geth> ¬¶ Raku-Steering-Council/main: 79cdc3a435 | (Elizabeth Mattijsen)++ | minutes/20230218.md

[12:01] <Geth> ¬¶ Raku-Steering-Council/main: Add minutes of 18 Feb 2023 meeting

[12:01] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/79cdc3a435

[12:01] <lizmat> seems this one fell through the cracks  :-(

[12:03] *** reportable6 joined
[12:05] <discord-raku-bot> <Nemokosch> will another weekly hit the net today?

[12:07] <lizmat> it's about to drop  :-)

[12:10] <lizmat> final proofreading as we speak :-)

[12:12] <discord-raku-bot> <Nemokosch> ü•Å ü•≥

[12:17] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/03/07/2023-10-toronto/

[12:25] *** exp joined
[12:27] <exp> I'm trying to write a small script using explicitly sized integers, ie `my uint8 $a;`, all operations on $a return `Cannot invoke object of type 'NQPMu'`. Am I doing something idiotic or did this previously work?

[12:28] <exp> 2023.02 apparently, freshly built

[12:30] <discord-raku-bot> <Nemokosch> you could give a snippet to bisectable6

[12:31] <lizmat> exp: could you gist an example?

[12:33] <exp> lizmat: literally `my uint8 $a; say $a`

[12:33] <exp> ooh actually, no

[12:33] <lizmat> % raku -e 'my uint8 $a; say $a'

[12:33] <lizmat> 0

[12:33] <exp> on one line it works

[12:33] <exp> on two lines it fails

[12:33] <exp> (the linebreak coming after the first ;)

[12:33] <exp> apologies for not noticing that

[12:34] <lizmat> still cannot reproduce.   can you make a gist ?

[12:35] <exp> is this sufficient? https://pastebin.mozilla.org/SXud5UhN

[12:35] <lizmat> ah, you're using the REPL

[12:35] <exp> yes i failed to mention that sorry

[12:36] <discord-raku-bot> <Nemokosch> then maybe it can be reproduced by some EVAL?

[12:36] <lizmat> the REPL has some known issues...  I guess this is one more  :-(

[12:37] <exp> wow ok, that's a real shame

[12:37] <lizmat> yeah... the problem is that each line in the REPL is a separate EVAL

[12:38] <lizmat> with their own scope, and there are some issues specifically related to natives that don't pass on from one EVAL to the next

[12:39] <exp> ah well, thank you for the fast answer lizmat 

[12:39] <lizmat> you could try running with the RakuAST grammar by prefixing: RAKUDO_RAKUAST=1

[12:40] <lizmat> so: $ RAKUDO_RAKUAST=1 raku

[12:40] <lizmat> at least the errors are a bit more understandable

[12:40] <exp> yeah, at little improvement at least, i just implemented it in C so no big deal, just very surprising

[12:41] <lizmat> I guess once we have RakuAST at a stage where the setting is also compiled with it, we will have an opportunity to fix the REPL in that respect

[12:42] <lizmat> so no solution before the next release of Rakudo, I'm afraid

[12:49] *** derpydoo left
[13:01] <Geth> ¬¶ doc/main: 1d11030921 | (Elizabeth Mattijsen)++ | doc/Type/DateTime.rakudoc

[13:01] <Geth> ¬¶ doc/main: Document DateTime.posix(:real)

[13:01] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/1d11030921

[13:02] *** derpydoo joined
[13:06] <discord-raku-bot> <Nemokosch> is it possible to turn a string into a character group for regex?

[13:06] <discord-raku-bot> <Nemokosch> if you know what I mean üëâ üëà

[13:07] <Geth> ¬¶ doc/main: b3e0c1d99f | (Elizabeth Mattijsen)++ | 2 files

[13:07] <Geth> ¬¶ doc/main: Document Exception|Cool.Failure coercer

[13:07] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/b3e0c1d99f

[13:09] <lizmat> you can with RakuAST

[13:10] <lizmat> m: say Q|$_ ~~ / <[abcd]> /|.AST

[13:10] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::ApplyInfix.new(‚ê§      left  => RakuAST::Var::Lexical.new("\$_"),‚ê§      infix => RakuAST::Infix.new("~~"),‚ê§      right => RakuAST::QuotedRegex.new(‚Ä¶¬ª

[13:10] <lizmat> replace the "elements" arguments with $string.comb.List

[13:12] <discord-raku-bot> <Nemokosch> what do I need to set to access it?

[13:13] <lizmat> you should copy the .AST output (well, as much as you need)

[13:13] <lizmat> do the change to the elements argument

[13:14] <lizmat> call .EVAL on the ast, and you'll a regex that you can use?   well, I think  :-)

[13:14] <lizmat> also: assuming you're on HEAD

[13:14] <lizmat> specify either "use v6.e.PREVIEW" or "use experimental :rakuast"

[13:15] <discord-raku-bot> <Nemokosch> I only get RakuAST::CompUnit.new üò¶

[13:15] <lizmat> gist ?

[13:15] <discord-raku-bot> <Nemokosch> > raku -e 'use experimental :rakuast; say Q|$_ ~~ / <[abcd]> /|.AST'

[13:16] <lizmat> then you're not on HEAD

[13:16] <lizmat> m: say Q|$_ ~~ / <[abcd]> /|.AST

[13:16] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::ApplyInfix.new(‚ê§      left  => RakuAST::Var::Lexical.new("\$_"),‚ê§      infix => RakuAST::Infix.new("~~"),‚ê§      right => RakuAST::QuotedRegex.new(‚Ä¶¬ª

[13:16] <lizmat> you should get something like that ^^

[13:17] <discord-raku-bot> <Nemokosch> pfff

[13:18] <discord-raku-bot> <Nemokosch> will the generated code run on 2023.02 at least?

[13:18] <lizmat> there's a good chance it would

[13:21] *** rf joined
[13:21] <discord-raku-bot> <Nemokosch> hm, okay, building HEAD

[13:21] <rf> Good morning folks

[13:26] <discord-raku-bot> <Nemokosch> hello

[13:34] <lizmat> Nemokosch  proof of concept: https://gist.github.com/lizmat/d1c090e8dcf618cdd2bea1b1263f38d7

[13:36] <discord-raku-bot> <Nemokosch> actually, I wanted to ask - what can you call EVAL on, and what can you expect to get back?

[13:37] *** seekr joined
[13:40] <rf> lizmat++ for the Weekly News :^)

[13:40] <lizmat> on HEAD, you can call EVAL on Cool and RakuAST::Node objects

[13:40] <lizmat> as a method

[13:41] <lizmat> as a sub you could already, but then you also need a "use MONKEY-SEE-NO-EVAL"

[13:56] <grondilu> so, what is RakuAST status?  Can we generate AST from arbitrary raku code now?

[13:56] <tellable6> 2023-03-04T12:14:32Z #raku <guifa_> grondilu: you can use the NFC, NFD, NFKC, NFKD ops

[13:56] <lizmat> grondilu: you can if you don't use features that haven't been implemented

[13:57] <grondilu> is it documented somewhere?

[13:57] <lizmat> m: the Str.AST method will do that for you

[13:57] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> the Str.AST‚èè method will do that for you‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§  ‚Ä¶¬ª

[13:57] <lizmat> no, that's being worked on as we speak  

[13:58] <grondilu> ü§î

[13:58] <grondilu> from a Str?

[13:58] <lizmat> there's a *lot* to document

[13:58] <lizmat> m: say Q|say "yes"|.AST

[13:58] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::Call::Name.new(‚ê§      name => RakuAST::Name.from-identifier("say"),‚ê§      args => RakuAST::ArgList.new(‚ê§        RakuAST::QuotedString.new(‚ê§       ‚Ä¶¬ª

[13:58] <grondilu> nice

[13:58] <lizmat> see also the gist I just posted 

[13:59] <lizmat> it creates a Regex object for you, that you can use in your code

[14:00] <discord-raku-bot> <Anton Antonov> @grondilu Some of the current efforts of guifa use RakuAST ‚Äî that code can be a learning point.

[14:00] <grondilu> what about the other way around?  Everything is done through the RakuAST package (I'm assuming it's a package)?

[14:01] <lizmat> there's a RakuAST package, but most classes inherit from RakuAST::Node

[14:01] <grondilu> m: print RakuAST

[14:01] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Use of RakuAST is experimental; please 'use experimental :rakuast'‚ê§at <tmp>:1‚ê§------> print ‚èèRakuAST‚ê§    expecting any of:‚ê§        argument list‚ê§        term‚ê§¬ª

[14:01] <grondilu> m: use experimental :rakuast; print RakuAST

[14:01] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´Use of uninitialized value of type RakuAST in string context.‚ê§Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[14:01] <grondilu> m: use experimental :rakuast; print RakuAST.raku

[14:01] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´RakuAST¬ª

[14:01] <grondilu> I see

[14:02] <lizmat> you will HEAD to get the full .raku support

[14:02] <lizmat> that didn't make it to the 2023.02 release

[14:02] <grondilu> well, I guess soon I will not have any more excuse not to try to implement google's protobuf.  Some time ago you guys told me it would be easier once rakuast is out.

[14:03] <lizmat> I'm not sure right now, lack of context, but probably yes

[14:03] <lizmat> and if you're on HEAD, there's a good chance you can already now

[14:04] <grondilu> once we get an AST, how do we turn it into executable code?

[14:04] <lizmat> but of course, this is really bleeding edge stuff  :-)

[14:04] <lizmat> EVAL it

[14:04] <grondilu> oh, ok

[14:04] <lizmat> either with $ast.EVAL or EVAL $ast

[14:04] <lizmat> see the gist I just posted

[14:05] <lizmat> re documentation: there are about 250 classes to document

[14:05] <lizmat> and probably more will still come

[14:05] <grondilu> I see.  Very cool.

[14:05] <lizmat> getting the .raku right for those classes was already.... interesting and a lot of work  :-)

[14:07] <grondilu> well .raku is not critical for anything is it?  I mean it's not like $ast.EVAL actually means $ast.raku.EVAL, is it?  That would defeat the purpose of an ast, right? 

[14:07] <grondilu> (lol hopefully what I just wrote does not too dumb/obvious)

[14:07] <grondilu> *sound

[14:07] <lizmat> not dumb at all

[14:08] <lizmat> there's two things: .raku on an AST will give you the RakuAST::Node calls needed to build that AST

[14:08] <discord-raku-bot> <Anton Antonov> @grondilu It doesn‚Äôt to me. (So, you are safish‚Ä¶)

[14:08] <lizmat> secondly: the .DEPARSE method will give you back the Raku code for the given AST

[14:09] <lizmat> m: say Q|say "hello world"|.AST.DEPARSE

[14:09] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´say("hello world")‚ê§‚ê§¬ª

[14:09] <grondilu> wow that seems ambitious.

[14:10] <grondilu> is it needed anyway?  I mean I don't quite see the use of turning an AST back into raku code.  It's a bit like decompiling, isn't it?

[14:10] <lizmat> well, the class responsible for deparsing is subclassable

[14:11] <lizmat> so in a way, it's like a "tidy" functionality

[14:11] <lizmat> m: say Q|if 42 { say "hello world" }|.AST.DEPARSE

[14:11] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´if 42 { say("hello world") }‚ê§‚ê§¬ª

[14:11] <lizmat> hmmm   I sorta expected a newline after the opening {  there 

[14:11] <lizmat> anyways  :-) 

[14:12] <rf> m: say Q|if 42 { say "hello world" }|.AST.EVAL

[14:12] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´hello world‚ê§True‚ê§¬ª

[14:13] <lizmat> rf: that's a bit roundabout way, but yeah, that works

[14:13] <rf> Yeah haha, just wondering if it was possible

[14:13] <lizmat> m: say Q|if 42 { say "hello world" }|.EVAL

[14:13] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´hello world‚ê§True‚ê§¬ª

[14:14] <grondilu> in any case I think it's very cool that rakudo can compile into a syntax tree.  It reminds me of the Wolfram Language.  It's very elegant and it may in the future help interoperability with other programming languages.

[14:14] <grondilu> IMHO

[14:14] <lizmat> possibly, yes

[14:14] <rf> So what happens, Raku Code -> Raku AST -> MoarVM Byte Code?

[14:14] <grondilu> that would be pretty cool.

[14:15] <lizmat> yeah, that's what normally happens

[14:15] <grondilu> but maybe Raku AST -> Lisp

[14:15] <lizmat> except that we now have a different way to create Raku AST

[14:15] <rf> New backends would be simpler to build for sure

[14:15] <lizmat> not just from Raku source

[14:15] <lizmat> rf: no, those would still just need to support nqp (mostly)

[14:16] <lizmat> it's all still built on nqp

[14:16] <rf> Ah I see

[14:16] <discord-raku-bot> <Nemokosch> still, NQP is easier to implement than the whole Raku language

[14:17] <lizmat> indeed it is  :-)

[14:17] <lizmat> which was the whole point of NQP to begin with

[14:21] <discord-raku-bot> <Nemokosch> so does this mean there won't be more QAST hackery in the frontend?

[14:22] <grondilu> üëÄ

[14:23] <discord-raku-bot> <Nemokosch> and surely not in the core, right? ü•∫

[14:25] <lizmat> all of the QAST hackery should happen inside RakuAST::Node classes

[14:25] <lizmat> now, I don't see a reason why one wouldn't be able to add a RakuAST::Node class in the module ecosystem

[14:25] <lizmat> in that case, QAST hacker there *would* be needed

[14:26] <lizmat> but the idea is that the core RakuAST::Node classes should allow you to do everything you want

[14:26] <grondilu> including macros, right?

[14:30] <lizmat> that'd be the idea, yes

[14:30] <lizmat> although the exact syntax and way to work that, is still undecided

[14:31] <lizmat> first we need to get spectest to run clean, *then* we need to be able to build the setting with RakuAST

[14:31] <lizmat> and then we can think about macros  :-)

[14:31] <discord-raku-bot> <Nemokosch> it would feel more relieving if QAST was completely abstracted out of RakuAST. After all, that's purely runtime-relevant code.

[14:31] <lizmat> we basically replace src/Perl6/Grammar|Actions|World by src/Raku/Grammar|actions

[14:32] <lizmat> in the old code, a lot of the QAST generation was done in World

[14:32] <lizmat> which was basically an organically grown mess that works

[14:32] <lizmat> the RakuAST classes should provide a clean interface for the logic

[14:33] <lizmat> and that includes generating QAST, at least for the foreseeable future

[14:34] <lizmat> the RakuAST classes *are* the way of abstracting out QAST out of the normal compilation process

[14:35] <lizmat> now, one could maybe think about skipping the QAST step in AST -> QAST -> MAST

[14:35] <discord-raku-bot> <Nemokosch> yes but at the same time it was promised that RakuAST would become standard Raku, and I still can't see any plans to merge "standard Raku" into Rakudo basically

[14:35] <discord-raku-bot> <Nemokosch> hence it would be good to have actually pure interfaces to it

[14:35] <lizmat> que?  the t/12rakuast/* tests are intended to become part of spectest

[14:36] <lizmat> once they have completely stabilized

[14:36] <lizmat> so the RakuAST classes *will* be standard classes in 6.e and higher

[14:37] <discord-raku-bot> <Nemokosch> then it's not fortunate that they come with a QAST baggage

[14:37] <discord-raku-bot> <Nemokosch> that was my point

[14:37] *** evalable6 left
[14:37] *** linkable6 left
[14:38] *** linkable6 joined
[14:38] <lizmat> Nemokosch as a *user* of RakuAST classes,. you don't have to deal with QAST at all, that's the point

[14:38] <discord-raku-bot> <Nemokosch> and as far as I can remember Jonathan Worthington's presentations, the plan appeared a bit different

[14:39] <lizmat> then I think you're misremembering...  but prove me wrong  :-)

[14:39] <discord-raku-bot> <Nemokosch> that is, the runtimes (compiler backends, in the broader sense) would consume RakuAST

[14:39] <discord-raku-bot> <Nemokosch> not that RakuAST itself would be the compiler backend

[14:39] <lizmat> well, eventually that *may* become possible

[14:39] *** evalable6 joined
[14:39] <lizmat> but that'd be akin to implementing Raku in Raku

[14:40] <lizmat> and yes, that *can* be done (with NQP as the example)

[14:44] <discord-raku-bot> <Nemokosch> a related thought: nobody seems to be that interested in keeping Raku abstract from Rakudo overall; I don't think it's coincidental that there haven't been attempts of basically any sort. I can elaborate on that in case but for now I'd just say: what if it's really unnecessary to (try to) maintain a separate standard from Rakudo?

[14:44] <discord-raku-bot> <Nemokosch> Or would that cause too many Perl flashbacks? üòÖ

[14:45] <moritz> the most reliable way to keep the two separated would be to have another implementation

[14:45] <Geth> ¬¶ doc/main: 92686de1bd | (Elizabeth Mattijsen)++ | 2 files

[14:45] <Geth> ¬¶ doc/main: Document ThreadPoolScheduler.new(:max_threads) a bit better

[14:45] <Geth> ¬¶ doc/main: 

[14:45] <Geth> ¬¶ doc/main: And the associated RAKUDO_MAX_THREADS environment variable.

[14:45] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/92686de1bd

[14:46] <lizmat> what is in roast, determines what is Raku

[14:46] <lizmat> RakuAST classes *will* become part of roast

[14:46] <lizmat> ergo RakuAST is Raku

[14:47] <discord-raku-bot> <Nemokosch> Yes but my point is exactly that the standard is not sufficient to actually reason about something that isn't Rakudo

[14:47] <discord-raku-bot> <Nemokosch> neither comprehensive enough (huge lack of pragmatism wrt metamodel stuff), nor clear enough on how it should be applied regarding versions

[14:51] <discord-raku-bot> <Nemokosch> I have heard this (informal?) term "full Raku implementation", as in supporting all possible versions of Raku. it's hard to figure out whether this is meant to be normative; one thing is sure, it's sort of obvious for Rakudo (by design) that it supports all versions of Raku - as long as Raku doesn't innovate too much

[14:52] <discord-raku-bot> <Nemokosch> this sort of "full implementation" also more or less defeats the purpose of versions

[14:57] <discord-raku-bot> <Nemokosch> of course it's astonishing for backwards compatibility if you just ship a runtime that covers all language versions but 1. it really holds back a lot, especially if your language was huge at the beginning 2. I'm afraid backwards compatibility will never be the major selling point of a language that notoriously broke backwards compatibility by its own existence and we know the rest...

[14:58] <lizmat> as far as I'm concerned, Raku will at least support 3 language versions at a time

[14:58] <lizmat> but at some point 6.c will *not* be supported anymore

[15:02] <Geth> ¬¶ doc/main: 438708cd09 | cfa++ | doc/Type/DateTime.rakudoc

[15:02] <Geth> ¬¶ doc/main: Fix signature typo

[15:02] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/438708cd09

[15:09] *** [Coke] joined
[15:09] <[Coke]> https://github.com/perlconference/tprc-2023-tor/wiki/Raku-BOF - please let me know if anyone is thinking about going.

[15:09] <[Coke]> I can drive and will go hang out even if I don't attend the conference proper.

[15:11] <Geth> ¬¶ doc/main: bd8282ece8 | cfa++ | doc/Type/ThreadPoolScheduler.rakudoc

[15:11] <Geth> ¬¶ doc/main: Add code preamble

[15:11] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/bd8282ece8

[15:14] <Geth> ¬¶ doc/main: 8fd5f52b1a | (Elizabeth Mattijsen)++ | doc/Type/ThreadPoolScheduler.rakudoc

[15:14] <Geth> ¬¶ doc/main: Change pseudocode into actual code

[15:14] <Geth> ¬¶ doc/main: 

[15:14] <Geth> ¬¶ doc/main: Now not needing the preamble

[15:14] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/8fd5f52b1a

[15:18] <Geth> ¬¶ doc: cfa++ created pull request #4259: Amend documented signatures for `Failure` methods

[15:18] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/4259

[15:23] <Geth> ¬¶ doc/main: ec0bc09b51 | cfa++ (committed using GitHub Web editor) | 2 files

[15:23] <Geth> ¬¶ doc/main: Amend documented signatures for Failure methods (#4259)

[15:23] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/ec0bc09b51

[15:24] <discord-raku-bot> <Anton Antonov> Is there a video recording of this presentation, "Grammatical (dis)agreement: Mixing grammars in Raku" ? https://tprc2022.sched.com/event/11neo

[15:25] <discord-raku-bot> <Anton Antonov> I could not find one within 5 min search

[15:26] <lizmat> guifa might know   :-)   I seem to recall that presentation never actually was given, but I hope to be wrong :-)

[15:26] <discord-raku-bot> <Anton Antonov> @lizmat Agh, thanks!

[15:27] <discord-raku-bot> <Anton Antonov> I am basically trying to decide should I go to Toronto's conference or not.

[15:27] <discord-raku-bot> <Anton Antonov> So, I am perusing schedules from previous years.

[15:30] <discord-raku-bot> <lucs> Is having my own local zef repo as simple (so to speak) as copying/editing/using its config file?

[15:30] <discord-raku-bot> <lucs> I'd like to try out stuff, pushing and pulling (with zef and fez) from that repo, and that repo only, without polluting the community shared ones.

[15:32] <Geth> ¬¶ doc/main: 57206323e1 | (Elizabeth Mattijsen)++ | doc/Type/IO/Path.rakudoc

[15:32] <Geth> ¬¶ doc/main: Document IO::Path.dir-with-entries

[15:32] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/57206323e1

[15:35] <lizmat> lucs: if you can use one of the standard storage methods (such as used for fez), it *should* be just a matter of configuration

[15:37] *** grondilu left
[15:39] *** razetime joined
[15:39] *** jgaz joined
[15:40] *** razetime left
[15:45] *** Sgeo joined
[15:47] <Geth> ¬¶ doc/main: ef66f20a7b | (Elizabeth Mattijsen)++ | doc/Programs/03-environment-variables.rakudoc

[15:47] <Geth> ¬¶ doc/main: Document support for INSIDE_EMACS environment variable

[15:47] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/ef66f20a7b

[15:49] <discord-raku-bot> <lucs> @lizmat: Where can I learn about those "standard storage methods"?

[15:50] <discord-raku-bot> <lucs> (about to look at fez documentation...)

[15:55] <lizmat> argh... it's been a while...  

[15:55] <lizmat> the default zef config file should be tell you which classes to look at

[15:57] <lizmat> now, where does that live again ...

[15:59] <tonyo> zef -h

[15:59] <tonyo> shows it at the bottom

[15:59] <tonyo> lucs: are you trying to host your own version of fez?

[16:01] <discord-raku-bot> <lucs> @tonyo Yes, and have zef read from there only (just for trying out stuff).

[16:01] <discord-raku-bot> <lucs> I mean, have zef and fez working hand in hand in that (those?) repo only.

[16:03] <tonyo> ah - if it's laid out similarly to fez then it should just be config on the zef side (i've already written the bits that fetch/build/install from that type of repo)..conversely on the fez side it's just a matter of setting up the right end points for it to hit and modifying the default url

[16:07] <discord-raku-bot> <lucs> @tonyo If I understand what you're saying, I need to have a properly tweaked zef config, and fez will use that? (I think I can tell zef which config file to use, but not sure how to make fez aware of it.)

[16:08] <tonyo> fez has it's own but the urls are all in the source, so on the fez side it requires code changes (they're configurable in the functions, just no way to set it globally or in the commands themselves)

[16:08] <tonyo> zef just needs a config file update

[16:10] <lizmat> see also: https://raku.land/zef:lizmat/Zef::Configuration

[16:10] <discord-raku-bot> <Nemokosch> I'm back. So anyway, to wrap it up, I don't think it's among the most important things for now to clarify the situation with Rakudo vs Raku, however eventually it needs to be addressed because the current situation is kind of a false sense of security

[16:11] <tonyo> in what way?

[16:13] *** derpydoo left
[16:14] <discord-raku-bot> <Nemokosch> It comes with the illusion that there could be other implementations when in reality it doesn't account for them

[16:14] <discord-raku-bot> <lucs> @tonyo: Okay, gotcha, thanks.

[16:14] <discord-raku-bot> <Nemokosch> roast, that is

[16:15] <discord-raku-bot> <lucs> @lizmat: Thanks for the link.

[16:16] *** Johanna100 left
[16:23] *** grondilu joined
[16:24] <grondilu> In the 5to6 perlfunc doc page, it is written that ioctl (a perlfunc) is NYI in raku.  https://docs.raku.org/language/5to6-perlfunc.html#ioctl  Is it still true and if so, is there a userspace solution to do it? 

[16:28] *** nommef joined
[16:29] *** derpydoo joined
[16:29] <lizmat> grondilu: perhaps any of the Terminal:: modules?  https://raku.land/?q=Terminal

[16:30] *** swagg_boi left
[16:30] *** nommef left
[16:31] <Geth> ¬¶ doc/main: 52c2ea05e7 | (Elizabeth Mattijsen)++ | doc/Type/List.rakudoc

[16:31] <Geth> ¬¶ doc/main: Document roundrobin( ..., :slip)

[16:31] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/52c2ea05e7

[16:35] <Geth> ¬¶ doc/main: 08b4ee46c5 | (Elizabeth Mattijsen)++ | doc/Type/Cool.rakudoc

[16:35] <Geth> ¬¶ doc/main: DOcument Cool.Order

[16:35] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/08b4ee46c5

[16:36] *** falsifian joined
[16:41] <Geth> ¬¶ doc/main: 33a6b17f1f | (Elizabeth Mattijsen)++ | doc/Language/variables.rakudoc

[16:41] <Geth> ¬¶ doc/main: Bring version statement more in line with others

[16:41] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/33a6b17f1f

[16:50] *** swaggboi joined
[16:55] <grondilu> well, I thought I could make a NativeCall binding real quick, but then I learn that apparently '...' in a parameter list is a thing in C.

[16:56] <grondilu> I had never seen that before.

[16:57] <grondilu> and I bet NativeCall can't deal with that.

[16:57] <dakkar> ah, the terrible varargs

[16:58] <dakkar> https://s.thenautilus.net/notes/999qqjv162 I wrote some vaguely-working code to deal with varargs

[16:58] <grondilu> oh apparently that's how printf works.  I should have guessed.

[16:59] <lizmat> yeah, varargs are a pain

[16:59] <lizmat> grondilu: what are you trying to achieve specifically ?

[16:59] <dakkar> btw, ioctl has a terrible interface for historical reasons (essentially, it became a dumping ground for random features that should have been separate syscalls)

[17:01] <grondilu> I want to get window size

[17:02] <Geth> ¬¶ doc/main: 9d53594e5f | (Elizabeth Mattijsen)++ | doc/Programs/03-environment-variables.rakudoc

[17:02] <Geth> ¬¶ doc/main: Document RAKUDO_OPT for now

[17:02] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/9d53594e5f

[17:02] <grondilu> with the TIOCGWINSZ command

[17:02] <grondilu> for a broader context, I'm interested in experimenting with the kitty graphics terminal protocol.

[17:03] <grondilu> In raku that is

[17:03] <dakkar> I suggest you do something like https://s.thenautilus.net/notes/999oh9hlyu

[17:03] <dakkar> a bunch of wrapper functions, each declaring their "own" `sub ioctl` with the right parameter types

[17:03] <lizmat> also: https://raku.land/zef:terminal-printers/Terminal::Print

[17:03] <lizmat> ?

[17:07] * grondilu install Terminal::Print

[17:07] <grondilu> (

[17:07] <grondilu> (s)

[17:08] <tonyo> grondilu: printf works that way

[17:08] <tonyo> oh, you found that already

[17:08] <dakkar> printf is the *simple* case of varargs ‚òπ

[17:08] <dakkar> ioctly is the hard one

[17:09] <dakkar> ooh, Terminal::Print "cheats", it runs `tput lines` + `tput cols`

[17:09] <dakkar> https://github.com/ab5tract/Terminal-Print/blob/07bbed48a7725055d450482d597b44b8cce3003a/lib/Terminal/Print/Commands.pm6#L104-L105

[17:09] <grondilu> oh yeah there is tput

[17:09] <grondilu> well I guess I can use that

[17:10] <Geth> ¬¶ doc/main: 3db8263a4e | cfa++ | doc/Type/List.rakudoc

[17:10] <Geth> ¬¶ doc/main: Normalise link (remove ".html")

[17:10] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/3db8263a4e

[17:12] <grondilu> the number of lines and columns might be enough, but the ioctl call also gives sizes in pixels.  Any way to get those too with tput?

[17:20] <ugexe> no tput on windows fwiw

[17:20] <tonyo> https://docs.raku.org/syntax/Coercion%20type

[17:21] * grondilu looks up tput man page, then the terminfo man page 

[17:21] <grondilu> no occurence of "pixel" in the terminfo man page.  They talk about dots, though.

[17:21] <dakkar> https://gist.github.com/dakkar/38703016cb05dcb40e6d80a8c5c5a525

[17:21] <dakkar> works on my machine

[17:23] <dakkar> correction: rows & cols are in the other order

[17:23] *** Johanna88 joined
[17:23] <dakkar> grondilu: try that? ‚òù

[17:24] <ugexe> nifty, does it work after resizing the window?

[17:24] <dakkar> yes

[17:24] <dakkar> in a real program, you'd hook on the WINCH signal and call the ioctl again, to keep your cached values up to date

[17:26] <grondilu> dakkar: weird, I get a 'no_fallback' unexpected argument error

[17:26] <dakkar> !

[17:26] <ugexe> mmhmm, thats what i used to do with https://github.com/ugexe/zef/blob/48ed6a2beda401aa22c6aa39e76a191dcbb09e7d/lib/Zef/Utils/SystemInfo.pm6 but that was with tput and mode... using that nativecall code would have been much nicer

[17:27] <grondilu> dakkar: apparently it was because I included your code in a module.  I don't get the error if I copy your code as is.

[17:27] <dakkar> grondilu: that may be some weird precomp issue‚Ä¶

[17:28] <dakkar> ugexe: keep in mind that the actual value of TIOCGWINSZ may well change between different machines!

[17:28] <dakkar> so the portability is pretty limited

[17:28] <ugexe> ah

[17:28] <grondilu> try it if you want to reproduci it : use module ioctl; # your code ...

[17:29] <grondilu> anyway very nice.  I love it when people write code for me :-)

[17:29] <grondilu> also thanks :)

[17:29] <dakkar> grondilu: if you call the module `ioctl`, there's some ambiguity with the `sub ioctl`

[17:30] <dakkar> change one of the names, and it works again

[17:30] <coleman> Nice newsletter this week <3

[17:30] <dakkar> (I have no clue why it gets confused / how it should work)

[17:30] <coleman> love the published minutes

[17:31] <grondilu> dakkar: I don't think there should be any ambiguity, should it?

[17:31] <grondilu> m: package foo { sub foo {} }; foo()

[17:31] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant value foo() in sink context (line 1)‚ê§¬ª

[17:31] <grondilu> m: package foo { sub foo {} }; dd foo()

[17:31] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´foo(Any)‚ê§¬ª

[17:31] *** vrurg left
[17:31] <dakkar> m: module foo { sub foo {}; dd foo() }

[17:31] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´foo(Any)‚ê§¬ª

[17:32] <dakkar> yep, typenames are preferred over sub names

[17:32] <grondilu> yeah that is more accurate

[17:32] <dakkar> m: module Foo { sub foo {}; dd foo() }

[17:32] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´Nil‚ê§¬ª

[17:32] <dakkar> m: module foo { sub foo {}; dd &foo() }

[17:32] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´Nil‚ê§¬ª

[17:32] *** vrurg joined
[17:32] <dakkar> there's always that option, of course

[17:33] <grondilu> normally you don't name modules in all low caps, but Ioctl looked very wrong.

[17:33] <dakkar> loctI

[17:33] <dakkar> locntI

[17:33] <dakkar> (dammit, typo in a joke‚Ä¶)

[17:35] <grondilu> this code ended up being much simpler than expected

[17:35] <dakkar> nativecall is pretty magical

[17:36] <dakkar> until you need a constant value from a C header file‚Ä¶

[17:36] <grondilu> wait you sure about uint16?

[17:36] <grondilu> not uint32?

[17:37] <dakkar> manpage says `unsigned short`

[17:37] <dakkar> (which, again, may be 16 bits, may be 32, may be 24‚Ä¶ good luck)

[17:37] <grondilu> hum

[17:37] <dakkar> the C ABI is terrible

[17:37] <dakkar> (mainly because it doesn't actually exist)

[17:37] <grondilu> it is unfortunate that we can't just say uint and let NativeCall figure out the best size.

[17:38] <grondilu> s/best/correct/

[17:39] <dakkar> because only the C compiler knows ‚òπ

[17:39] <dakkar> (memories of "perl XS modules must be compiled with the same C compiler you build perl itself with")

[17:42] <discord-raku-bot> <Nemokosch> XS looks worse than vanilla C by far tbh

[17:42] <dakkar> eh, it's a decent compromise for all the complexity it hides

[17:42] <discord-raku-bot> <Nemokosch> well, one can just use C I guess, lol

[17:42] *** jpn joined
[17:43] <discord-raku-bot> <Nemokosch> it seems so horrible that it's really hard to make it worthy

[17:43] <dakkar> not really, you need a lot of knowledge about perl internals to write a library that can work as a perl extension

[17:43] <ugexe> if you just use C you are quite limited in what you can do

[17:44] <discord-raku-bot> <Nemokosch> I mean, if I had to do that, I would definitely say, who cares about Perl, after all, the whole thing is simpler to keep in C

[17:44] * dakkar disconnects

[17:44] <ugexe> because often you don't want to write/rewrite your entire system in C and its easier/more efficient to just write the hot section in C

[17:45] <ugexe> if you're working on a perl code base you can't just say who cares about Perl afterall

[17:45] <discord-raku-bot> <Nemokosch> for that, NativeCall is actually pretty good, I'm absolutely bought that devs didn't want to repeat the XS precedent

[17:48] *** dakkar left
[17:51] *** derpydoo left
[17:57] *** derpydoo joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:07] <grondilu> lol just after I go back to reading about kitty's protocol, the next paragraph tells me about an ANSI escape code to get the number of cols and lines of the terminal.

[18:08] * grondilu wonders what that does on the irc bot

[18:08] <grondilu> m: print "\e[14t";

[18:08] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´¬ª

[18:08] <grondilu> lol, nothing

[18:13] *** jgaz left
[18:13] <rf> Because the bot isn't in a TTY I think

[18:19] <grondilu> yeah that would make sense

[18:23] <discord-raku-bot> <Nemokosch> the RakuAST regex generation worked ü•≥ lizmat thank you

[18:23] <discord-raku-bot> <Nemokosch> now it only needs a little finetuning to case insensitive

[18:28] <lizmat> m: say Q|/:i /|.AST

[18:28] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Expression.new(‚ê§    expression => RakuAST::QuotedRegex.new(‚ê§      match-immediately => False,‚ê§      body              => RakuAST::Regex::InternalModifier::IgnoreCase.new(‚ê§        negated => F‚Ä¶¬ª

[18:29] <lizmat> RakuAST::Regex::InternalModifier::IgnoreCase.new()

[18:31] <discord-raku-bot> <Nemokosch> RakuAST::Regex::InternalModifier::IgnoreCase.new

[18:31] <discord-raku-bot> <Nemokosch> oops right, lol

[18:32] <lizmat> that's what I like about the new RakuAST::Node.raku functionality

[18:34] <discord-raku-bot> <Nemokosch> very understandable üòã

[18:37] <lizmat> also a great help when writing RakuAST::Node tests

[18:38] *** jpn left
[18:41] <discord-raku-bot> <Nemokosch> okay this needs to be inside the top level regex node, not wrapping it

[18:41] <discord-raku-bot> <Nemokosch> it works now, cool

[18:42] *** Johanna88 left
[18:46] *** teatwo left
[18:46] *** teatwo joined
[18:50] *** tea3po joined
[18:53] *** teatwo left
[18:55] <Geth> ¬¶ doc/main: 1e8ea8a48a | (Elizabeth Mattijsen)++ | doc/Programs/03-environment-variables.rakudoc

[18:55] <Geth> ¬¶ doc/main: Document RAKUDO_PRECOMPILATION_PROGRESS

[18:55] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/1e8ea8a48a

[18:57] <Geth> ¬¶ doc/main: a327de2e7d | (Elizabeth Mattijsen)++ | doc/Type/DateTime.rakudoc

[18:57] <Geth> ¬¶ doc/main: Mark availability of DateTime.Numeric

[18:57] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/a327de2e7d

[18:58] <tonyo> m: $*SPEC = IO::Spec::Win32; '\\some-server/share'.IO.say;

[18:58] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´"\some-server/share".IO‚ê§¬ª

[18:58] <tonyo> m: $*SPEC = IO::Spec::Win32; '\\\\some-server/share'.IO.say;

[18:58] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´"\\some-server/share".IO‚ê§¬ª

[19:02] <Geth> ¬¶ doc/main: 03a7c1dd7a | (Elizabeth Mattijsen)++ | doc/Type/IO/Path.rakudoc

[19:02] <Geth> ¬¶ doc/main: Document IO::Path.add(<bar baz>)

[19:02] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/03a7c1dd7a

[19:07] *** grondilu left
[19:10] <Geth> ¬¶ doc: coke self-assigned xt test for missing C in C<> (and let's use a allow-list for doc text) https://github.com/Raku/doc/issues/2306

[19:12] <Geth> ¬¶ doc/main: e2eb0f28c5 | (Will Coleda)++ (committed using GitHub Web editor) | 20 files

[19:12] <Geth> ¬¶ doc/main: Add test for <> (missing formatcode) (#4257)

[19:12] <Geth> ¬¶ doc/main: 

[19:12] <Geth> ¬¶ doc/main: * Add test for <> (missing formatcode)

[19:12] <Geth> ¬¶ doc/main: * Fixup some missing C<> in pod.

[19:12] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/e2eb0f28c5

[19:12] *** jgaz joined
[19:13] <tonyo> m: $*SPEC = IO::Spec::Win32; my $x = '\\\\some-server/share'.IO; $x.add('walt').absolute.say;

[19:13] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´\\some-server\share\walt‚ê§¬ª

[19:16] <tonyo> m: $*SPEC = IO::Spec::Win32; my $x = '\\\\some-server/share'.IO; $x.add('walt').relative.say;

[19:16] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´\\some-server\share\walt‚ê§¬ª

[19:16] <tonyo> m: $*SPEC = IO::Spec::Win32; my $x = '\\\\some-server/share'.IO; $x.add('walt').say;

[19:16] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´"\\some-server/share\walt".IO‚ê§¬ª

[19:20] <Geth> ¬¶ doc/main: 9f10710a53 | (Elizabeth Mattijsen)++ | doc/Language/control.rakudoc

[19:20] <Geth> ¬¶ doc/main: Document next/last with a value in 6.e

[19:20] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/9f10710a53

[19:22] *** jpn joined
[19:28] <Geth> ¬¶ doc/main: 63ca40c6b0 | (Elizabeth Mattijsen)++ | doc/Type/List.rakudoc

[19:28] <Geth> ¬¶ doc/main: Document .pick(**)

[19:28] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/63ca40c6b0

[19:29] *** jpn left
[19:35] *** dgrigoro joined
[19:40] <lizmat> afk&

[19:41] <dgrigoro> Hello everyone! I am new to Raku. I'm reading https://docs.raku.org/language/containers.html and I'm trying to execute the following code snippet:

[19:41] <dgrigoro> my $a = 0;

[19:41] <dgrigoro> my $b = 0;

[19:41] <dgrigoro> $a := $b;

[19:41] <dgrigoro> The snippet fails when I type it interactively in the REPL, but succeeds when when I type it in a file and execute it.

[19:41] <dgrigoro> Why is that?

[19:43] *** jpn joined
[19:43] <gfldex> dgrigoro: Because Raku is not as dynamic as it might appear at first. The REPL got quite a few limitations.

[19:45] <dgrigoro> okay, so would you suggest that I avoid the REPL while I'm a beginner to avoid confusion?

[19:46] <gfldex> I use a text file and some simple binds in Vim and that works fine for me. The result (over the years) looks like this: https://gist.github.com/3bb53da68917dee0890444143f6a1245

[19:47] <gfldex> When I'm done playing, I comment out a section. That way I keep a simple record of my play sessions.

[19:47] <discord-raku-bot> <Nemokosch> I'd say one develops a feel for when the REPL won't cut it

[19:48] <discord-raku-bot> <Nemokosch> hopefully by the time you learn it, it won't be actually needed because the rework arrives

[19:48] <discord-raku-bot> <Nemokosch> with more clever logic than literal EVAL

[19:49] *** jpn left
[19:49] <discord-raku-bot> <Nemokosch> binding, operators and low-level stuff, these are probably the three notorious weaknesses

[19:49] <discord-raku-bot> <Nemokosch> by operators I mean custom-defined operators

[19:50] <dgrigoro> I see, thanks Nemokosch and gfldex. I just realized there's also a #raku-beginner channel, I'll post there in the future :)

[20:03] *** jpn joined
[20:08] *** jpn left
[20:20] <rf> I use REPL for simple things like testing equalities

[20:20] <rf> m: say [1,2,3,4] =~= [4,3,2,1]

[20:20] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§¬ª

[20:26] <Voldenet> dgrigoro: I never use repl and instead do `raku -e 'whatever code'`

[20:27] <Voldenet> it's nice because I can simply copy the history line into the file if it gets too long

[20:27] <Voldenet> (as long as it's one line, I don't bother)

[20:27] <discord-raku-bot> <Nemokosch> I never even knew about =~= and that it works like that for an array ü§Ø

[20:27] <rf> m: say [1,2,3,4] == [4,3,2,1]

[20:27] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§¬ª

[20:27] <rf> Also works :^)

[20:28] <rf> But for the wrong reasons I think?

[20:28] <rf> m: say [1,2,3,4] == [5,5]

[20:28] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´False‚ê§¬ª

[20:28] <rf> nvm

[20:28] <Voldenet> it's correct

[20:28] <Voldenet> == is set equality

[20:29] *** [Coke] left
[20:29] <Voldenet> m: say [1,2,3,4] eqv [4,3,2,1]

[20:29] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´False‚ê§¬ª

[20:31] <gfldex> m: say +[1,2,3,4] == +[4,3,2,1]

[20:31] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§¬ª

[20:31] <gfldex> == will always coerce

[20:33] <Voldenet> nevermind, == is not set equality

[20:33] <Voldenet> in this context

[20:34] <Voldenet> m: say [1,2,3,4] == [1, 1, 1, 1]

[20:34] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§¬ª

[20:34] <gfldex> m: say [1,2,3,4] ~~ [1, 1, 1, 1]

[20:34] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´False‚ê§¬ª

[20:35] <gfldex> m: say [1,2,3,4] ~~ [1,2,3,4];

[20:35] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§¬ª

[20:38] <Geth> ¬¶ doc/main: 094c08a618 | (Will Coleda)++ | doc/Programs/03-environment-variables.rakudoc

[20:38] <Geth> ¬¶ doc/main: typo,specify lang

[20:38] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/094c08a618

[20:38] <Geth> ¬¶ doc/main: 7904706d86 | (Will Coleda)++ | doc/Type/List.rakudoc

[20:38] <Geth> ¬¶ doc/main: fix signature.

[20:38] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/7904706d86

[20:38] <Geth> ¬¶ doc/main: dfb3dd27d2 | (Will Coleda)++ | xt/pws/words.pws

[20:38] <Geth> ¬¶ doc/main: new word

[20:38] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/dfb3dd27d2

[20:43] <discord-raku-bot> <Nemokosch> == is numeric equivality

[20:43] *** jpn joined
[20:49] *** NemokoschKiwi joined
[20:50] *** jpn left
[20:51] *** jpn joined
[20:52] *** NemokoschKiwi left
[20:54] <Geth> ¬¶ doc/main: 7258d52c0c | (Will Coleda)++ | 3 files

[20:54] <Geth> ¬¶ doc/main: Remove old util

[20:54] <Geth> ¬¶ doc/main: 

[20:54] <Geth> ¬¶ doc/main: Use xt/check-signatures.rakutest instead.

[20:54] <Geth> ¬¶ doc/main: 

[20:54] <Geth> ¬¶ doc/main: Closes #4223

[20:55] <Geth> ¬¶ doc/main: review: https://github.com/Raku/doc/commit/7258d52c0c

[20:55] <Geth> ¬¶ doc: coke unassigned from codesections Issue util/list-missing-methods failure https://github.com/Raku/doc/issues/4223

[20:55] <Geth> ¬¶ doc: coke self-assigned Check for indexing marks that try to index the page they're in https://github.com/Raku/doc/issues/4057

[21:03] *** jpn left
[21:13] *** TieUpYourCamel joined
[21:29] <Voldenet> m: say [1,2,3,4].Set == [1,2,3,4].Set;say [1,2,3,4].Set == [1,2,3,5].Set

[21:29] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[21:29] <Voldenet> ah

[21:29] <Voldenet> m: say [1,2,3,4].Set (==) [1,2,3,4].Set;say [1,2,3,4].Set (==) [1,2,3,5].Set

[21:29] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[21:29] <Voldenet> that was the one I was looking for

[21:30] <tonyo> rf: https://github.com/tony-o/raku-protone/tree/rf

[21:30] <discord-raku-bot> <Nemokosch> it might work without the explicit conversions as well

[21:31] <discord-raku-bot> <Nemokosch> m: say [1,2,3,4] (==) [1,2,4,3];say [1,2,3,4] (==) [1,2,3,5]

[21:31] <discord-raku-bot> <Raku eval>  True False 

[21:31] <Voldenet> of course

[21:32] <discord-raku-bot> <Nemokosch> what I like about this is that it is explicit - about the trust towards (==) that it serves a dedicated purpose (Setty comparison)

[21:33] <tonyo> rf: that is the version of protone that allows direct raku code in the template (it's unsafe for user input)

[21:34] <Voldenet> I don't usually use it, but maybe I should

[21:35] <discord-raku-bot> <Nemokosch> I'm kinda fixated on this, I mean that the dedicated operators should not be overloaded - at least not in a way that breaks the basic "it just does a coercion" semantics

[21:35] <Voldenet> m: say [1,2,3,4] ~~ [1,2,3,4].Set;

[21:35] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´True‚ê§¬ª

[21:36] <Voldenet> smartmatch should be the only "cool equality" op

[21:36] <discord-raku-bot> <Nemokosch> that's why I wanted coercions for Date and DateTime

[21:36] <discord-raku-bot> <Nemokosch> instead of overloading ==

[21:37] <discord-raku-bot> <Nemokosch> Voldenet: don't forget that smartmatch has a bit of a baggage

[21:37] <discord-raku-bot> <Nemokosch> Match ~~ Match is sacrificed for the "regex quote" operations (m//, s/// kind of stuff)

[21:38] <discord-raku-bot> <Nemokosch> that one I'd think can be fixed if the decision that takes there is made

[21:38] <Voldenet> Yes, it's sometimes not obvious what smartmatch might do, imo the Java Way of having .equals method is a nice convention

[21:38] <discord-raku-bot> <Nemokosch> however, Bool ~~ Bool, that one I don't think could be made equality-like

[21:39] <discord-raku-bot> <Nemokosch> that's because when tries to be useful in if-like scenarios as well

[21:40] <discord-raku-bot> <Nemokosch> so it must specially handle the "boolean context", i.e the smartmatch to Bool

[21:40] <Voldenet> in fact, having .EQUALS for precise coercions and type requirements in the future is not impossible

[21:40] <rf> tonyo: Sweet! I assume it doesn't do any escaping or anything right, just eval?

[21:40] <tonyo> yea

[21:40] <tonyo> there's only one shortcut

[21:40] <discord-raku-bot> <Nemokosch> I think the intended .EQUALS is the eqv operator

[21:42] <discord-raku-bot> <Nemokosch> it has some problems but actually one that I know comes straight from the reliance on smartmatching

[21:43] <Voldenet> Yes, but how do you define eqv for a class?

[21:43] <discord-raku-bot> <Nemokosch> with a multi?

[21:43] <tonyo> it coerces {{[a-Z]+}} -> $out =~ %ctx<...>

[21:43] <discord-raku-bot> <Nemokosch> what could stop you? üôÇ

[21:44] <Voldenet> Ah, right, I got stuck in java mode

[21:46] <discord-raku-bot> <Nemokosch> what might be a problem, though, is to access private fields

[21:47] <discord-raku-bot> <Nemokosch> I kind of have a feeling that this whole path hasn't been walked down on, yet

[21:47] *** derpydoo left
[21:49] <Voldenet> I like how COERCE works, that's why I assumed EQUALS would fit the picture similarily

[21:50] <discord-raku-bot> <Nemokosch> actually I'm thinking maybe there isn't even a contradiction

[21:50] <discord-raku-bot> <Nemokosch> there could be an EQUALS method that backs up eqv

[21:51] <Voldenet> that sounds sane

[21:53] <discord-raku-bot> <Nemokosch> hmm, actually...

[21:53] <discord-raku-bot> <Nemokosch> in Raku, private is literally instance private

[21:53] <discord-raku-bot> <Nemokosch> so a method might not even help tremendously much with making a comparison based on private data

[21:56] <discord-raku-bot> <Nemokosch> but this is the point where I'd really start thinking if what one wants is rather hashability for the class

[21:57] <discord-raku-bot> <Nemokosch> which is governed by WHICH, and grants you use of hashy types and ===

[21:59] *** jpn joined
[22:05] *** dgrigoro left
[22:09] *** xinming joined
[22:14] *** jgaz left
[22:16] <rf> Nemokosch: How do I clear the stash in Template6

[22:16] <tellable6> rf, I'll pass your message to Nemokosch

[22:21] <rf> Ah localise looks like what I'm after.

[22:27] <rf> @Nemokosch: Basically I want to clear the stash between renders, is this possible?

[22:37] <discord-raku-bot> <Nemokosch> I probably won't know

[22:38] <discord-raku-bot> <Nemokosch> but so far I don't know what you mean

[22:39] <rf> Right now if I do .process('template', foo => 'bar'); when I can .process('other-template'); foo is still bar, I want it to be cleared between calls

[22:39] *** jpn left
[22:43] <rf> Or it might be that if I do .process('template', foo => bar), then process the same template with just .process('template') foo is still bar

[22:47] <guifa> grondilu: in fact, I'm working on a code tidier that's based on RakuAST nodes.  It's still very basic now, but while core should only provide rudimentary node to string capabilities, moduels are a great place to do even more

[22:47] <tellable6> guifa, I'll pass your message to grondilu

[22:48] <guifa> lizmat & AntonAntonov I gave the talk indeed, not sure if they ended up posting the video of it ‚Äî¬†we had some recording issues IIRC.

[22:48] <lizmat> maybe there are some slide still ?

[22:48] <guifa> I still have the slides somewhere, and happy to send them out

[22:51] <guifa> I seem to recall I had one or two small errors on the slides.  Just opened them up and I'll try to find and fix

[22:52] <lizmat> Anton Antonov will be happy  :-)

[22:52] <discord-raku-bot> <Nemokosch> rf: the latter sounded saner at least - but is the former also true?

[22:52] <discord-raku-bot> <Nemokosch> because that clearly sounds like a bug

[22:53] <rf> I will test, I think it's just the former

[22:53] <lizmat> m: say Q|constant Int $foo = 42|.AST   # ah, at least it's consistent  :-)

[22:53] <camelia> rakudo-moar 4fa44f8d3: OUTPUT: ¬´===SORRY!=== Error while compiling ‚ê§Term definition requires an initializer‚ê§------> constant Int‚èè $foo = 42‚ê§¬ª

[22:53] <lizmat> I'll try to fix that in RakuAST tomorrow

[22:55] <rf> @Nemokosch: It's actually the latter. It happens on both of my templates

[22:59] <discord-raku-bot> <Nemokosch> okay but both of them only with their processed stash, right?

[22:59] <discord-raku-bot> <Nemokosch> not cross-contaminating

[23:02] <rf> No, they are cross contaminating

[23:02] <rf> I do .process('form', :%errors); and .process('show'); and show gets errors too

[23:02] <discord-raku-bot> <Nemokosch> argh

[23:19] <discord-raku-bot> <Nemokosch> seems like there is one context per service

[23:19] <discord-raku-bot> <Nemokosch> I mean easy to work around it (multiple instances for requests) but like I can't see why this would be a good idea in the first place...

[23:20] <discord-raku-bot> <Nemokosch> apparently it's intended... there is a reset option you can pass to the instance

[23:21] <discord-raku-bot> <Nemokosch> if I'm not wrong, it propagates from the main instance towards the right place

[23:21] <discord-raku-bot> <Nemokosch> setting :reset should cause all .process calls start from an empty state

[23:26] <discord-raku-bot> <Nemokosch> something is weird here, though

[23:26] <discord-raku-bot> <Nemokosch> supposedly it calls reset on the context

[23:26] <discord-raku-bot> <Nemokosch> I can't see such method

[23:28] <discord-raku-bot> <Nemokosch> haha yeah, this is missing!

[23:35] <rf> Hmm, that is fairly inconvenient

[23:38] <rf> Do you think you could add a flag such that each call to process will cause a new context to be born

[23:39] *** linkable6 left
[23:39] *** evalable6 left
[23:39] *** evalable6 joined
[23:42] <discord-raku-bot> <Nemokosch> I mean, the flag is there, it just calls a non-existent method üòÑ

[23:42] *** linkable6 joined
[23:43] <discord-raku-bot> <Nemokosch> what about, for now, reset will simply clear the stash?

[23:48] *** deoac joined
