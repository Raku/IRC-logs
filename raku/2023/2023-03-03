[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:02] <discord-raku-bot> <Nemokosch> well, if wrap mutates, it mutates...

[01:01] *** evalable6 left
[01:02] *** evalable6 joined
[01:03] *** xinming left
[01:05] *** xinming joined
[02:05] *** jpn joined
[02:10] *** jpn left
[02:19] *** deoac joined
[02:34] <rf> What is the point of wrap

[02:35] <rf> You can achieve the same as wrap with a closure if you want to preserve the original

[02:51] *** razetime joined
[03:04] *** cfa left
[03:33] *** deoac left
[03:50] *** derpydoo joined
[04:30] <tonyo> you could probably commit this heinous crime

[04:30] <tonyo> m: sub a {"a".say;}; &a.wrap(sub { "b".say; callsame; }); &a.HOW.method_table(1)<WRAPPERS>.(&a)[*-1].() #xinming

[04:30] <camelia> rakudo-moar 66f7afed1: OUTPUT: «a␤»

[04:36] *** razetime left
[04:55] *** bigdata joined
[05:34] *** razetime joined
[05:36] *** bigdata left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:30] *** razetime left
[06:32] *** xinming left
[06:32] *** xinming joined
[06:32] *** razetime joined
[06:55] *** derpydoo left
[06:55] *** gcd left
[06:55] *** Maylay left
[06:55] *** Sgeo left
[06:55] *** rf left
[06:55] *** squashable6 left
[06:56] *** derpydoo joined
[06:56] *** gcd joined
[06:56] *** Maylay joined
[06:56] *** Sgeo joined
[06:56] *** rf joined
[06:56] *** squashable6 joined
[06:56] *** tib joined
[06:56] *** committable6 joined
[06:56] *** quotable6 joined
[06:56] *** coverable6 joined
[06:56] *** shareable6 joined
[06:56] *** bisectable6 joined
[06:56] *** peder joined
[06:56] *** Ekho joined
[06:56] *** sjn joined
[06:56] *** gabiruh_ joined
[06:56] *** perryprog joined
[06:56] *** synthmeat joined
[06:58] *** kaskal joined
[07:04] *** Sgeo left
[07:05] *** Sgeo joined
[07:21] *** Sauvin left
[07:32] *** Sauvin joined
[07:35] *** Bocaneri joined
[07:35] *** Bocaneri is now known as Guest9469

[07:36] *** Sauvin is now known as Guest5002

[07:36] *** Guest5002 left
[07:37] *** Guest9469 is now known as Sauvin

[07:38] *** abraxxa joined
[07:39] *** derpydoo left
[07:47] *** abraxxa left
[08:04] *** jpn joined
[08:06] *** Sgeo left
[08:07] *** razetime left
[08:10] *** jpn left
[08:27] *** razetime joined
[08:45] *** sena_kun joined
[08:45] *** ab5tract left
[08:46] *** ab5tract joined
[08:50] *** destroycomputers left
[08:50] *** destroycomputers joined
[08:54] *** kylese joined
[09:00] *** bigtestaccount[m left
[09:25] *** rf left
[09:26] *** rf joined
[09:52] *** jpn joined
[10:43] *** razetime left
[10:58] *** Geth joined
[10:59] <Geth> ¦ doc/main: bd6c4c8538 | (Tom Browder)++ (committed by Will Coleda) | util/create-brackets-table.raku

[10:59] <Geth> ¦ doc/main: Modify the 'Brackets' table generator to always read the data source file

[10:59] <Geth> ¦ doc/main: 

[10:59] <Geth> ¦ doc/main: The following changes have been made:

[10:59] <Geth> ¦ doc/main: 

[10:59] <Geth> ¦ doc/main: + removed hard-wired file paths

[10:59] <Geth> ¦ doc/main: + ensured the output table has no trailing spaces

[10:59] <Geth> ¦ doc/main: + eliminated the 'Reorder' and 'original' options

[10:59] <Geth> ¦ doc/main: <…commit message has 9 more lines…>

[10:59] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/bd6c4c8538

[10:59] <Geth> ¦ doc/main: cf466799ec | (Tom Browder)++ (committed by Will Coleda) | 2 files

[11:00] <Geth> ¦ doc/main: ensure module is available, use local NQP source if available

[11:00] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/cf466799ec

[11:00] <Geth> ¦ doc/main: cd8914361a | (Tom Browder)++ (committed by Will Coleda) | util/create-brackets-table.raku

[11:00] <Geth> ¦ doc/main: add another possibility for location of NQP

[11:00] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/cd8914361a

[11:01] <Geth> ¦ doc/main: e099f8252f | (Will Coleda)++ | doc/Type/Complex.pod6

[11:01] <Geth> ¦ doc/main: Add Complex.sign for v6.e

[11:01] <Geth> ¦ doc/main: 

[11:01] <Geth> ¦ doc/main: Closes #4199

[11:01] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e099f8252f

[11:02] <Geth> ¦ doc/main: e099f8252f | (Will Coleda)++ | doc/Type/Complex.pod6

[11:02] <Geth> ¦ doc/main: Add Complex.sign for v6.e

[11:02] <Geth> ¦ doc/main: 

[11:02] <Geth> ¦ doc/main: Closes #4199

[11:02] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e099f8252f

[11:02] <Geth> ¦ doc/main: 58d64f0d6d | (Elizabeth Mattijsen)++ | doc/Type/Complex.pod6

[11:02] <Geth> ¦ doc/main: Add documentation for Complex.sign

[11:02] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/58d64f0d6d

[11:03] *** ab5tract left
[11:03] *** ab5tract joined
[11:04] <Geth> ¦ doc/main: 90025302b1 | (Elizabeth Mattijsen)++ | doc/Type/Unicode.pod6

[11:04] <Geth> ¦ doc/main: Document new Unicode class

[11:04] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/90025302b1

[11:04] <Geth> ¦ doc/main: 966a99d473 | (Elizabeth Mattijsen)++ | doc/Language/variables.pod6

[11:04] <Geth> ¦ doc/main: Document $*EXIT and $*EXCEPTION

[11:04] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/966a99d473

[11:05] *** xinming left
[11:07] *** xinming joined
[11:12] *** ab5tract left
[11:13] *** ab5tract joined
[11:15] <Geth> ¦ doc/finanalyst-patch-1: 89e8bc4be8 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/DateTime.pod6

[11:15] <Geth> ¦ doc/finanalyst-patch-1: Update DateTime.pod6

[11:15] <Geth> ¦ doc/finanalyst-patch-1: 

[11:16] <Geth> ¦ doc/finanalyst-patch-1: typo in href

[11:16] <Geth> ¦ doc/finanalyst-patch-1: review: https://github.com/Raku/doc/commit/89e8bc4be8

[11:16] <Geth> ¦ doc: finanalyst++ created pull request #4237: Update DateTime.pod6

[11:16] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4237

[11:18] <Geth> ¦ doc/finanalyst-patch-5: 6a2d8091e6 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/modules-extra.pod6

[11:18] <Geth> ¦ doc/finanalyst-patch-5: Update modules-extra.pod6

[11:18] <Geth> ¦ doc/finanalyst-patch-5: 

[11:18] <Geth> ¦ doc/finanalyst-patch-5: Rename p6doc to rakudoc

[11:18] <Geth> ¦ doc/finanalyst-patch-5: review: https://github.com/Raku/doc/commit/6a2d8091e6

[11:18] <Geth> ¦ doc: finanalyst++ created pull request #4238: Update modules-extra.pod6

[11:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4238

[11:20] <Geth> ¦ doc/main: 50c7b8a533 | (Elizabeth Mattijsen)++ | doc/Type/RakuAST.pod6

[11:20] <Geth> ¦ doc/main: Add RakuAST package stub

[11:20] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/50c7b8a533

[11:23] <Geth> ¦ doc/finanalyst-patch-3: 7af34eea6d | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[11:23] <Geth> ¦ doc/finanalyst-patch-3: Update faq.pod6

[11:23] <Geth> ¦ doc/finanalyst-patch-3: 

[11:23] <Geth> ¦ doc/finanalyst-patch-3: change malformed links and change to rakudoc

[11:23] <Geth> ¦ doc/finanalyst-patch-3: review: https://github.com/Raku/doc/commit/7af34eea6d

[11:24] <Geth> ¦ doc: finanalyst++ created pull request #4239: Update faq.pod6

[11:24] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4239

[11:27] *** ab5tract left
[11:27] *** ab5tract joined
[11:38] *** ab5tract left
[11:39] *** ab5tract joined
[11:41] <Geth> ¦ doc/main: e41bf648fb | (Elizabeth Mattijsen)++ | doc/Language/experimental.pod6

[11:41] <Geth> ¦ doc/main: Document "use experimental :rakuast"

[11:41] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e41bf648fb

[11:45] *** ab5tract left
[11:50] *** thundergnat joined
[11:51] <thundergnat> m: say $*TOLERANCE

[11:51] <camelia> rakudo-moar 66f7afed1: OUTPUT: «1e-15␤»

[11:52] <thundergnat> m: say 0.000000000000000000000101 ≅ 0

[11:52] <camelia> rakudo-moar 66f7afed1: OUTPUT: «True␤»

[11:53] *** thundergnat left
[11:58] *** rf left
[11:58] *** rf joined
[11:59] <discord-raku-bot> <Nemokosch> m: say 0.000000000000000000000101 > $*TOLERANCE

[11:59] <discord-raku-bot> <Raku eval>  False 

[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:06] *** rf left
[12:06] *** rf joined
[12:10] <Geth> ¦ doc/main: 952c044cca | (Elizabeth Mattijsen)++ | doc/Language/create-cli.pod6

[12:10] <Geth> ¦ doc/main: Document %SUB-MAIN-OPTS<allow-no|numeric-suffix-as-value>

[12:10] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/952c044cca

[12:16] <lizmat> bisectable6: use nqp; say nqp::time

[12:16] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:17] <lizmat> meh.... that won't work  :-(

[12:17] <bisectable6> lizmat, Output on all releases: https://gist.github.com/f85d18d2a1a6b615709fd57d8286f5ff

[12:17] <bisectable6> lizmat, More than 4 changes to bisect, please try a narrower range like old=2023.02 new=HEAD

[12:19] <Geth> ¦ doc/main: fbb97b6ffb | (Elizabeth Mattijsen)++ | doc/Language/terms.pod6

[12:19] <Geth> ¦ doc/main: Document nano term

[12:19] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/fbb97b6ffb

[12:37] <Geth> ¦ doc/main: c1871a78a6 | (Elizabeth Mattijsen)++ | doc/Type/IO/Path.pod6

[12:37] <Geth> ¦ doc/main: Document IO::Path.created

[12:38] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/c1871a78a6

[12:38] <Geth> ¦ doc/main: bc3d233986 | (Elizabeth Mattijsen)++ | doc/Type/Dateish.pod6

[12:38] <Geth> ¦ doc/main: Document Dateish.days-in-year

[12:38] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/bc3d233986

[12:49] <Geth> ¦ doc/main: 93fd8d182d | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6

[12:49] <Geth> ¦ doc/main: Elaborate on Any.are

[12:49] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/93fd8d182d

[13:01] *** QhpAptyj9hj0RQwM joined
[13:14] *** jpn left
[13:45] *** QhpAptyj9hj0RQwM left
[13:54] <rf> Morning folks

[13:56] *** jpn joined
[14:08] *** jpn left
[14:10] *** lichtkind joined
[14:11] *** jpn joined
[14:59] *** cfa joined
[15:02] *** jgaz joined
[15:04] *** nort left
[15:08] *** tonyo left
[15:09] *** tonyo joined
[15:23] *** eseyman left
[15:27] <rf> tonyo: I am really liking protone, I will definetley be using it in the future

[15:28] <tonyo> rf: thanks, i forgot to find/upload the _thing_ i had for it to allow looping, etc

[15:28] <rf> Let me know when it goes in :^)

[15:29] <tonyo> maybe i'll other-userify it tonight

[15:29] <tonyo> (write some documentation, etc)

[15:30] <rf> tonyo++

[15:31] <Geth> ¦ doc/main: e6fcf63e92 | cfa++ | doc/Language/variables.pod6

[15:31] <Geth> ¦ doc/main: Fix typo

[15:31] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e6fcf63e92

[15:31] <Geth> ¦ doc/main: e670a5bc84 | cfa++ | xt/pws/words.pws

[15:31] <Geth> ¦ doc/main: Add 'nano' and 'rakuast' to the dictionary.

[15:31] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e670a5bc84

[15:36] <rf> shmup: Thanks for that irssi script for the discord bot lol

[15:37] <shmup> lol np, it aint perfect yet but it's still better

[15:38] <rf> Yeah I don't have a lot of screen real-estate so sometimes it would wrap now it looks good

[15:39] *** Guest10 joined
[15:44] <cfa> shmup++

[15:44] <cfa> i still haven't updated to the latest but it's been super handy here too

[15:45] <cfa> now if we can get tellable6 to not queue up messages for users talking with a discord prefix...

[15:52] <shmup> rf i came across your github ln. you're impressive. only 3 years professionaly? what are you, some kinda turbonerd? rf++ 

[15:53] *** Sgeo joined
[15:53] <shmup> u goin places, boy

[15:53] <rf> Thanks, it's probably because I've sat at a computer for 8 hours a day the last 9 years lol.

[15:54] <rf> I also have good teachers to thank for making me practice a lot

[15:55] <rf> Only been programming for about 3 years though

[15:56] <shmup> keep crushin' it. love that you landed on "raku, ocaml, c++, perl" out of all the options.

[15:57] <rf> I'm a big fan of languages that work well with how I think, mostly functional + imperative

[15:57] <rf> I am not a big fan of OOP as a few people in here already know :^)

[15:59] <shmup> let me add 2 books to your bookshelf, unless you've already read. blindsight and three body problem.

[15:59] <shmup> peter watts and cixin liu

[15:59] <rf> Thanks, I i'll add it to my backlog :)

[16:01] *** Guest1 joined
[16:01] <Geth> ¦ doc/main: 442a6cb764 | cfa++ | xt/headings.rakutest

[16:01] <Geth> ¦ doc/main: Add RakuAST and package checks to xt/headings.rakutest

[16:01] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/442a6cb764

[16:08] <Geth> ¦ doc/main: 43dbbbcd25 | cfa++ | doc/Type/Unicode.pod6

[16:08] <Geth> ¦ doc/main: Fix link typo

[16:08] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/43dbbbcd25

[16:09] <rf> shmup: Local place has three body problem for 5$ I may read that one sooner than I thought

[16:09] <shmup> dare you

[16:09] <shmup> that's a really good deal :)

[16:10] <rf> Lol, I'm just about to finish my current books

[16:10] *** Guest1 is now known as Sussysham

[16:11] *** Guest10 left
[16:14] <Geth> ¦ doc/main: 874de5de52 | cfa++ | xt/link-checker.rakutest

[16:14] <Geth> ¦ doc/main: Remove trailing whitespace from xt/link-checker.rakutest

[16:14] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/874de5de52

[16:18] *** derpydoo joined
[16:18] <rf> If anyone is interested, the next major iteration of Humming-Bird is trying to improve performance (even though its pretty darn good), I'll pretty much take an PR that passes all of the tests and makes things faster :)

[16:19] <rf> Looking mostly for small, isolated performance changes.

[16:25] *** nine left
[16:25] *** nine joined
[16:38] <Voldenet> rf: I mentioned this before, but this will really hog performance https://github.com/rawleyfowler/Humming-Bird/blob/main/lib/Humming-Bird/HTTPServer.rakumod#L17

[16:38] <Voldenet> it will steal one thread from thread pool for sleeping

[16:39] <Voldenet> wait a moment, it will

[16:39] <Voldenet> spawn a thread :O

[16:39] <Voldenet> so… it adds 100kb overhead per request

[16:40] <rf> Hmm, how can I do this concurrently without a sleep though.

[16:40] <Voldenet> await Promise.in(1);

[16:41] <rf> That will live in the event loop ahhh, I see

[16:41] <rf> Good catch, you can PR if you'd like or I can throw it in

[16:42] <rf> Make sure all the tests pass and such, prove6 -I. it/ t/

[16:42] <Voldenet> in fact, `now - $_<last-active>` is something horrible to do

[16:43] <Voldenet> I remember writing websockets server over a decade ago and this was the hot code in perf tests

[16:43] <discord-raku-bot> <Nemokosch> why though

[16:43] <Voldenet> it was replaced with storing cpu tick in the connection

[16:43] <Voldenet> It turns out that fetching time does a lot of things to accomodate for drift and so on

[16:44] <Voldenet> on windows, at least

[16:44] <Voldenet> on the other hand, cpu ticks are easy to work with and monotonic

[16:44] <rf> Can you get ticks in Raku?

[16:45] <Geth> ¦ doc/main: ce3d70d95d | (Elizabeth Mattijsen)++ | 2 files

[16:45] <Geth> ¦ doc/main: Document the 6.e features of Seq.skip

[16:45] <Geth> ¦ doc/main: 

[16:45] <Geth> ¦ doc/main: - move some of the Any.skip doc to Seq.skip

[16:45] <Geth> ¦ doc/main: - correct output of existing examples (spaces instead of commas)

[16:45] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/ce3d70d95d

[16:46] <discord-raku-bot> <Nemokosch> >websockets server over a decade ago

[16:46] <discord-raku-bot> <Nemokosch> sounds kinda sus

[16:46] <lizmat> rf: the closest thing is in 6.e  the nano term (or the nano module on older Rakudos https://raku.land/zef:lizmat/nano)

[16:46] <rf> Websockets have been around for a long time Nemo

[16:46] <discord-raku-bot> <Nemokosch> the protocol itself is like 12 years old

[16:47] <Voldenet> Yes, I had to implement it from scratch in ancient C#

[16:47] <Voldenet> and it was pain

[16:47] <rf> Humming-Bird doesn't support web-sockets atm, just HTTP

[16:48] <Voldenet> It was cutting-edge technology at the time, but way better than http long polling

[16:48] *** swaggboi left
[16:48] <rf> Thanks for the tip on the Promise.in vs sleep, just bumped my performance in another application by almost 15%

[16:49] <Voldenet> wow

[16:49] <Voldenet> I sort of expected that, but still

[16:50] <discord-raku-bot> <Nemokosch> that's good to know

[16:52] <rf> That app uses sleep more aggresively though

[16:52] <rf> So probably wont be 15% for humming-bird

[16:53] <rf> Also lizmat++ thanks for that library

[16:53] <Voldenet> In fact, I looked at the code carefully and maybe the !timeout doesn't even have to start its own thread

[16:54] <Voldenet> in http servers you want to use all cores on handling requests after all

[16:54] <Voldenet> and it solves that pesky data race

[16:54] <Voldenet> > @!connections = @!connections.grep({ !$_<closed>.defined });

[16:55] <Voldenet> > @!connections.push: %connection-map;

[16:55] <Voldenet> those lines can use random timings

[16:55] <Voldenet> and if grep returns new instance, that push might get overwritten

[16:56] <Voldenet> and the access to connections itself isn't locked

[16:56] <Voldenet> So, if you just use `whenever Supply.interval(1) { … remove dead connections }`

[16:56] <Voldenet> you might notice slight delay in handling some connections

[16:57] <Voldenet> but at least no concurrency bugs

[17:01] *** razetime joined
[17:01] <rf> Yeah I think connections push needs a lock

[17:01] <Voldenet> in which case you don't really use that thread

[17:02] <Voldenet> hm, you do for non-new connections

[17:02] <rf> Hmm, do I need a lock with non-thread asynchronous code, start blocks

[17:02] <rf> Not sure how the task scheduler works in Raku

[17:03] <Voldenet> `react whenever … { }` is supposed to use single thread

[17:03] <rf> Holy crap, that is ridicuously fast

[17:03] <rf> like almost 10x

[17:03] <rf> Let me run my benchmarks

[17:04] <rf> And that's with a lock on the push still

[17:05] <Geth> ¦ doc/main: 185749469f | cfa++ | xt/link-checker.rakutest

[17:05] <Geth> ¦ doc/main: Fix xt/link-checker.rakutest: s/fail/flunk/

[17:05] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/185749469f

[17:05] <Voldenet> tbh. single thread is really fast

[17:05] <rf> On avg case it is saving 35ms, on edge cases closer to 120ms

[17:06] <rf> CPU time is down a lot too

[17:07] <Voldenet> I'm wondering what if everything was in one loop instead of starting threads

[17:08] <lizmat> note that "start" is not necessarily starting threads

[17:09] <rf> Yeah, its adding a Task right?

[17:09] <lizmat> it is basically adding jobs to a queue

[17:09] <lizmat> and if there are not enough threads, the scheduler will start new threads

[17:10] <rf> Gonna hit it with 500k requests in 2 minutes and see what happens, before we dropped about 2/3

[17:11] *** razetime left
[17:15] <Voldenet> I'm used to saying `$*SCHEDULER.cue` instead of start, but I'm not sure if there's any point to it now

[17:16] <lizmat> Voldenet: .cue doesn't give you a Promise, it gives you a Cancellation object

[17:17] <lizmat> so less overhead with .cue, but also no assurance the code completed ?

[17:17] <Voldenet> indeed

[17:17] <Voldenet> so if I need fire-and-forget sort of job, I use cue

[17:18] <lizmat> sounds about right :-)

[17:18] <rf> lizmat: Do you know if you need a lock when just using `start`? No actual threads with Thread.new.

[17:18] <tonyo> for shared variables?

[17:19] <rf> Yeah

[17:20] <rf> my %foo; start { await Promise.in(2); %foo<bar> = 123; }; start { await Promise.in(1); say (%foo<bar> ?? 'foo' !! 'bar') }

[17:20] <rf> Idk but imagine they mutate some how

[17:20] *** derpydoo left
[17:20] <tonyo> Lock

[17:22] <rf> Hmm, not sure why though. I guess the scheduler could run multiple threads?

[17:22] <Voldenet> yes

[17:22] <tonyo> m: my $a = 0; my Lock $l.=new; my $p = start { $l.protect(-> { sleep 3; $a = 3; }); }; $l.protect({ $a = 5; }); await $p; dd $a

[17:22] <camelia> rakudo-moar 66f7afed1: OUTPUT: «Int $a = 3␤»

[17:22] <Voldenet> but consider this: my %foo; react { whenever Promise.in(2) { %foo<bar> = 123; }; whenever Promise.in(1) { say (%foo<bar> ?? 'foo' !! 'bar') }};

[17:23] <Voldenet> effectively, since the lock would be in place, the code is not that different

[17:23] <Voldenet> but faster since you don't need memory barrier

[17:23] <tonyo> m: $*SCHEDULER.max_threads

[17:23] <camelia> rakudo-moar 66f7afed1: ( no output )

[17:23] <Geth> ¦ doc: cfa++ created pull request #4240: link-checker: Check for the existence of directories as well as pod6 files

[17:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4240

[17:23] <tonyo> m: $*SCHEDULER.max_threads.say

[17:23] <camelia> rakudo-moar 66f7afed1: OUTPUT: «64␤»

[17:23] <tonyo> you can also use those as pools and create different schedulers, `start` just uses that one in $*SCHEDULER by default

[17:24] <rf> Oh neat!

[17:24] <tonyo> m: say $*SCHEDULER.WHAT

[17:24] <camelia> rakudo-moar 66f7afed1: OUTPUT: «(ThreadPoolScheduler)␤»

[17:24] <Geth> ¦ doc/main: 0b21b1dbe2 | cfa++ | 3 files

[17:24] <Geth> ¦ doc/main: Remove .html from links failing xt/link-checker.rakutest

[17:24] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/0b21b1dbe2

[17:24] <rf> The async stuff for Raku is super mature it feels like, even though I haven't seen it used a ton

[17:25] <lizmat> Raku was built with async stuff in mind from the start  :-)

[17:25] <tonyo> you need to be cognizant of how many threads you've started versus the capacity of the TPS

[17:25] <tonyo> otherwise it'll hang the TPS

[17:25] <tonyo> or, it did ~6 years ago

[17:27] <Voldenet> oh, you could also solve any concurrency problems without locking using the node-js way

[17:27] <Voldenet> my %foo; my $*SCHEDULER = CurrentThreadScheduler.new; start { await Promise.in(2); %foo<bar> = 123; }; start { await Promise.in(1); say (%foo<bar> ?? "foo" !! "bar") };

[17:27] <evalable6> Voldenet, rakudo-moar 66f7afed1: OUTPUT: «foo␤»

[17:27] <Voldenet> ;)

[17:28] <Voldenet> what an unexpected output, isn't it?

[17:29] <Geth> ¦ doc/main: d0492c509e | cfa++ (committed by Will Coleda) | xt/link-checker.rakutest

[17:29] <Geth> ¦ doc/main: xt/link-checker.rakutest: check for the existence of a dir as well as .pod6 file

[17:29] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/d0492c509e

[17:29] <rf> Is that because you are using a CurrentThreadScheduler?

[17:29] <rf> Vs pool

[17:29] <Voldenet> yes, and the `await` simply blocks in that case :/

[17:30] <rf> Hmm I would expect a current thread scheduler to schedule around a block like that

[17:30] *** SqrtNegInf joined
[17:30] <lizmat> note that the CurrentThreadScheduler is pretty braindead

[17:30] <lizmat> as it will just "do" any start block and wait for it to return

[17:32] <tonyo> feels like maybe you need to wear a business formal to use that

[17:32] <tonyo> s/ a //

[17:32] <SqrtNegInf> m: say 1.0000000000000001

[17:32] <camelia> rakudo-moar 66f7afed1: OUTPUT: «2␤»

[17:33] <Voldenet> …what

[17:33] <Geth> ¦ doc/main: 409389831b | (Will Coleda)++ | doc/Language/faq.pod6

[17:33] <Geth> ¦ doc/main: Update rakudoc link

[17:33] <Geth> ¦ doc/main: 

[17:33] <Geth> ¦ doc/main: Courtesy finanalyst++

[17:33] <Geth> ¦ doc/main: 

[17:33] <Geth> ¦ doc/main: Update zef link to direct link

[17:33] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/409389831b

[17:34] <Geth> ¦ doc/main: 362b54e69d | (Richard Hainsworth)++ (committed by Will Coleda) | doc/Language/modules-extra.pod6

[17:34] <Geth> ¦ doc/main: Update modules-extra.pod6

[17:34] <Geth> ¦ doc/main: 

[17:34] <Geth> ¦ doc/main: Rename p6doc to rakudoc

[17:34] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/362b54e69d

[17:34] <lizmat> SqrtNegInf: % raku -e 'say 1.0000000000000001'

[17:34] <lizmat> 1.0000000000000001

[17:34] <Geth> ¦ doc/main: 00526c6bca | (Richard Hainsworth)++ (committed by Will Coleda) | doc/Type/DateTime.pod6

[17:34] <Geth> ¦ doc/main: Update DateTime.pod6

[17:34] <Geth> ¦ doc/main: 

[17:34] <Geth> ¦ doc/main: typo in href

[17:34] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/00526c6bca

[17:34] <rf> m: say 1.0000000000000001

[17:34] <camelia> rakudo-moar 66f7afed1: OUTPUT: «2␤»

[17:34] <rf> Differing versions?

[17:35] <lizmat> nope, different architecture most like: on M1

[17:35] <Geth> ¦ doc/main: 257d4d343d | (Tom Browder)++ (committed by Will Coleda) | doc/Language/objects.pod6

[17:35] <Geth> ¦ doc/main: Correct the intended zero-width index entries

[17:35] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/257d4d343d

[17:35] <Geth> ¦ doc/main: 3c8cca2ffb | (Tom Browder)++ (committed by Will Coleda) | doc/Language/objects.pod6

[17:35] <Geth> ¦ doc/main: remove TODO which is no longer needed

[17:35] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/3c8cca2ffb

[17:35] <tonyo> on the m2 it prints out the right number

[17:36] <rf> M1 is correct too

[17:37] <rf> Until you get 4 more 0's

[17:37] <rf> then it becomes 0.099

[17:37] <Voldenet> say 1.0000000000000001

[17:37] <evalable6> Voldenet, rakudo-moar 66f7afed1: OUTPUT: «2␤»

[17:37] * lizmat builds HEAD on an Intel mac

[17:40] <Geth> ¦ doc/main: 0841a64070 | (Will Coleda)++ | 2 files

[17:40] <Geth> ¦ doc/main: word used outside of code

[17:40] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/0841a64070

[17:40] <Geth> ¦ doc/main: 9f3014c5f6 | (Will Coleda)++ | doc/Type/Seq.pod6

[17:40] <Geth> ¦ doc/main: fix typo

[17:40] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/9f3014c5f6

[17:40] <Geth> ¦ doc/main: 6970032b4f | (Will Coleda)++ | doc/Type/Seq.pod6

[17:40] <Geth> ¦ doc/main: whitespace

[17:40] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/6970032b4f

[17:41] <lizmat> $ raku -e 'say 1.0000000000000001'

[17:41] <lizmat> 2

[17:41] <lizmat> confirmed on Intel

[17:41] <lizmat> m: say 1.0000000000000001.FatRat

[17:41] <camelia> rakudo-moar 66f7afed1: OUTPUT: «1.0000000000000001␤»

[17:42] <rf> say is coercing to Int? or something?

[17:42] <lizmat> I bet it's the floating point noise check in Rational.Str

[17:42] <discord-raku-bot> <Nemokosch> This is a regression, right?

[17:43] <lizmat> it probably is indeed

[17:43] <rf> Voldenet: Can do 1500 req/sec right now with those changes

[17:44] <rf> Up from around 580

[17:44] <SqrtNegInf> Yes, definitely.  See: https://rosettacode.org/wiki/Approximate_equality#Raku

[17:45] <lizmat> SqrtNegInf: confirmed it was my last commit that causes this

[17:46] <Voldenet> rf: pretty good start I say

[17:48] <rf> CPU time is very low which is nice, and memory is down by a fair margin

[17:49] <discord-raku-bot> <lucs> When installing for example moar-2023.02 with rakubrew, what's the recommended way to make all the previously zef-installed modules available in that version?

[17:50] <discord-raku-bot> <lucs> (I was still using moar-2021.06, eh)

[17:50] <rf> I just reinstall them

[17:51] <cfa> perlbrew has clone-modules which would be great in rakubrew

[17:52] <cfa> (i also re-install fairly manually)

[17:52] <tonyo> m: say 1.0000000000000001 == 2

[17:52] <camelia> rakudo-moar 66f7afed1: OUTPUT: «False␤»

[17:52] <ugexe> some people have parsed `zef list --installed` and fed it to zef install

[17:52] <tonyo> m: say 1.0000000000000001

[17:52] <camelia> rakudo-moar 66f7afed1: OUTPUT: «2␤»

[17:52] <cfa> ugexe: yeah that's what i do

[17:52] <ugexe> can't just clone the modules though, the precomp parts of them are different

[17:52] <cfa> but with a bit of curation

[17:52] <ugexe> for different raku versions

[17:53] <Voldenet> `zef install –/test` is the way

[17:53] <Voldenet> *cough*

[17:55] <discord-raku-bot> <lucs> ugexe: Oh right, that was my real problem: which modules are already installed (I can parse that).

[17:55] <cfa> ugexe: fwiw clone-modules doesn't actually copy, it re-installs via cpan

[17:57] <discord-raku-bot> <Nemokosch> That would also be good tbh

[18:00] *** reportable6 left
[18:01] *** Sussysham left
[18:03] *** reportable6 joined
[18:16] *** ab5tract joined
[18:17] *** SqrtNegInf left
[18:18] *** ab5tract left
[18:21] *** cm left
[18:23] *** ab5tract joined
[18:27] *** cm joined
[18:46] <tonyo> vrurg: ping

[18:54] *** jpn left
[19:00] *** jpn joined
[19:19] <energizer> do i remember right that raku offers a bunch of fancy circumfix operators like ⦃ x ⦄ etc?

[19:20] <gfldex> you certainly define your own

[19:20] <energizer> where can i find examples of that? or docs on which ones are available?

[19:22] <gfldex> energizer: see: https://gfldex.wordpress.com/2020/07/24/mimicing-quotes/

[19:23] <energizer> that's postcircumfix tho right? as in xs[i]

[19:23] <gfldex> To add real quote constructs you will have to write a slang.

[19:24] <energizer> that means macros?

[19:25] <gfldex> Slangs "subclass" the Raku grammar, so they are not really macros.

[19:25] <gfldex> you can find examples at https://raku.land/?q=slang

[19:27] <gfldex> I wouldn't be surprised if RakuAST enables a simple macro to add new quote constucts.

[19:29] <vrurg> tonyo: will be available later. Saw your reply, my bad – overlooked the option.

[20:00] *** linkable6 left
[20:00] *** evalable6 left
[20:00] *** evalable6 joined
[20:02] *** linkable6 joined
[20:08] *** kylese left
[20:47] *** jpn left
[20:54] *** Sgeo left
[21:00] *** Sgeo joined
[21:28] *** swaggboi joined
[21:29] *** jpn joined
[21:35] *** rakuuser joined
[21:36] <guifa_> gfldex: RakuAST won't enable that per se.  That's still in the grammar part of the AST

[21:36] <guifa_> That said, it will be EASIER with RakuAST, because you will be able to just dump a RAST node in your actions method

[21:49] <guifa_> (right now, you have to make sure to insert a correct QAST value and those are tricky to get right.  The RAST nodes are more intuitive IMO)

[22:01] <Geth> ¦ doc/main: 5170cac8b0 | (Will Coleda)++ | doc/Type/Complex.pod6

[22:01] <Geth> ¦ doc/main: Combine two versions of .sign we had

[22:01] <Geth> ¦ doc/main: 

[22:01] <Geth> ¦ doc/main: lizmat++

[22:01] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/5170cac8b0

[22:02] <Geth> ¦ doc: coke self-assigned is deprecated section missing https://github.com/Raku/doc/issues/4225

[22:05] *** gcd left
[22:08] <Geth> ¦ doc/main: 94c345e387 | (Will Coleda)++ | doc/Type/Routine.pod6

[22:08] <Geth> ¦ doc/main: Remove copypasta.

[22:08] <Geth> ¦ doc/main: 

[22:08] <Geth> ¦ doc/main: Closes #4225

[22:08] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/94c345e387

[22:08] <Geth> ¦ doc/main: 24ca95d449 | (Will Coleda)++ | .gitignore

[22:08] <Geth> ¦ doc/main: Ignore temporary file

[22:08] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/24ca95d449

[22:08] *** sena_kun left
[22:15] <tonyo> vrurg: the more i read through how gitignore actually uses the globs in .gitignore the more i'm tempted to stuff .gitignore support. the way it works seems insane to me

[22:20] <vrurg> tonyo: not sure I get this locution right. You want it or it's to insane to implement it?

[22:21] <vrurg> Anyway, I'm not always sure I have done the file right until `git status` matches my expectations. 

[22:21] *** jgaz left
[22:26] <Geth> ¦ doc/main: 65c42e0f17 | (Will Coleda)++ | util/new-type.raku

[22:26] <Geth> ¦ doc/main: no more vim lines, please

[22:26] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/65c42e0f17

[22:26] <Geth> ¦ doc/main: 4118f0c239 | (Will Coleda)++ | 5 files

[22:26] <Geth> ¦ doc/main: Cleanup more perl6 references.

[22:26] <Geth> ¦ doc/main: 

[22:26] <Geth> ¦ doc/main: Closes #3105

[22:26] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/4118f0c239

[22:53] <rf> Voldenet: So we're about twice as fast in terms of req/sec compared to Ruby's Sinatra so I will call this a win!

[22:55] <discord-raku-bot> <Nemokosch> fatality

[22:56] <xinming> tonyo: thanks, It looks a bit terrible, But TIMTODO. :-)

[22:59] *** derpydoo joined
[23:04] *** jpn left
[23:05] <tonyo> vrurg: i may roll it into the project config file and use proper typeglobbing (which i'm realizing .gitignore isn't) and make a separate gitignore matcher

[23:06] <tonyo> vrurg: .gitignore is typeglobs but with a lot of special cases and cascading

[23:08] <vrurg> tonyo: The only thing which bothers me is duplication of functionality. Other than that, this is where something is better than nothing. :)

[23:23] <tonyo> yea that bugs me too

[23:41] <rf> tonyo: I may do a little hacking on fez to add reading for global gitignores if you think its worth it. I find myself uploading files I don't mean to even though they're defined in my gitignore global

[23:45] <tonyo> i think we'll end up wanting it and the proper globber that's in there now

[23:58] *** lichtkind left
