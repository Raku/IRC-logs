[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[01:01] *** benchable6 left
[01:01] *** tellable6 left
[01:01] *** statisfiable6 left
[01:01] *** greppable6 left
[01:01] *** nativecallable6 left
[01:01] *** evalable6 left
[01:01] *** linkable6 left
[01:01] *** shareable6 left
[01:01] *** notable6 left
[01:01] *** sourceable6 left
[01:01] *** committable6 left
[01:01] *** squashable6 left
[01:01] *** reportable6 left
[01:01] *** quotable6 left
[01:02] *** greppable6 joined
[01:02] *** tellable6 joined
[01:02] *** nativecallable6 joined
[01:02] *** notable6 joined
[01:03] *** reportable6 joined
[01:03] *** quotable6 joined
[01:03] *** committable6 joined
[01:03] *** evalable6 joined
[01:04] *** shareable6 joined
[01:04] *** sourceable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** linkable6 joined
[01:04] *** benchable6 joined
[01:04] *** squashable6 joined
[01:40] <Util> Xliff: https://raku.land/zef:finanalyst/GTK::Simple . 48 stars on Raku.Land.
[01:41] <Util> I tried the first example on MacOS, after running `brew install gtk-3`,
[01:41] <Util> but still had to invoke it with `DYLD_LIBRARY_PATH=/opt/homebrew/lib raku gui_sample_01.raku`.
[01:41] <Util> For most of my work, HTML+CSS+JS frontend with Perl|Raku backend does fine.
[01:41] *** jpn joined
[01:45] *** coleman left
[01:47] *** coleman joined
[01:59] *** jpn left
[02:26] *** tea3po left
[02:27] *** tea3po joined
[02:28] *** teatwo joined
[02:31] *** tea3po left
[02:37] *** jpn joined
[02:41] *** jpn left
[02:46] *** xinming_ left
[02:48] *** xinming_ joined
[02:54] <Xliff> Util: https://github.com/Xliff/p6-GtkPlus
[02:54] <Xliff> And mine won't be much easier.
[02:54] <Xliff> I started in 2018 and I've ported most of GNOME's libraries to Raku
[02:54] <Xliff> 1,000,000 lines and counting.
[02:57] <Xliff> Here's the spreadsheet I use to track all of my projects: https://github.com/Xliff/p6-GLib/raw/main/doc/Perl6%20Projects%20Line%20Counts.ods
[02:58] <Xliff> My stuff was developed on Ubuntu, so getting it to work for MacOSX would take a slight bit of work. For one thing, I would need to know the locations and names of: libglib, libgio, libgobject, libgdk, libpango, libcairo and libgtk3+
[02:59] <Xliff> Actually, if you have timo's excellent cairo-p6, you can drop libcairo from that list.
[03:00] <Xliff> My stuff remains unreleased due to some issues I am having with packaging. Mainly that my stuff is SO. FRICKING. LARGE.
[03:20] *** rf joined
[03:31] *** jpn joined
[03:36] *** jpn left
[04:36] *** shareable6 left
[04:36] *** committable6 left
[04:36] *** squashable6 left
[04:36] *** benchable6 left
[04:36] *** sourceable6 left
[04:36] *** unicodable6 left
[04:36] *** bloatable6 left
[04:36] *** statisfiable6 left
[04:36] *** bisectable6 left
[04:36] *** greppable6 left
[04:36] *** releasable6 left
[04:36] *** notable6 left
[04:36] *** coverable6 left
[04:36] *** evalable6 left
[04:36] *** nativecallable6 left
[04:36] *** reportable6 left
[04:36] *** quotable6 left
[04:36] *** linkable6 left
[04:36] *** tellable6 left
[04:36] *** unicodable6 joined
[04:37] *** evalable6 joined
[04:37] *** squashable6 joined
[04:37] *** releasable6 joined
[04:37] *** committable6 joined
[04:37] *** statisfiable6 joined
[04:37] *** notable6 joined
[04:37] *** greppable6 joined
[04:38] *** benchable6 joined
[04:38] *** sourceable6 joined
[04:38] *** nativecallable6 joined
[04:38] *** reportable6 joined
[04:38] *** tellable6 joined
[04:38] *** shareable6 joined
[04:38] *** linkable6 joined
[04:39] *** coverable6 joined
[04:39] *** bloatable6 joined
[04:39] *** quotable6 joined
[04:39] *** bisectable6 joined
[04:55] *** rf left
[04:55] *** rf joined
[05:02] *** rf left
[05:02] *** jpn joined
[05:07] *** jpn left
[05:44] *** Xliff left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:50] *** jpn joined
[06:55] *** jpn left
[07:55] *** greppable6 left
[07:55] *** nativecallable6 left
[07:55] *** quotable6 left
[07:55] *** reportable6 left
[07:55] *** linkable6 left
[07:55] *** coverable6 left
[07:55] *** bisectable6 left
[07:55] *** sourceable6 left
[07:55] *** releasable6 left
[07:55] *** evalable6 left
[07:55] *** bloatable6 left
[07:55] *** statisfiable6 left
[07:55] *** shareable6 left
[07:56] *** sourceable6 joined
[07:56] *** nativecallable6 joined
[07:56] *** greppable6 joined
[07:56] *** quotable6 joined
[07:57] *** linkable6 joined
[07:57] *** evalable6 joined
[07:57] *** reportable6 joined
[07:57] *** coverable6 joined
[07:57] *** bloatable6 joined
[07:58] *** statisfiable6 joined
[07:58] *** shareable6 joined
[07:58] *** releasable6 joined
[07:58] *** bisectable6 joined
[08:12] *** jpn joined
[08:16] *** sena_kun joined
[08:35] *** jpn left
[09:35] *** benchable6 left
[09:35] *** reportable6 left
[09:35] *** tellable6 left
[09:35] *** unicodable6 left
[09:35] *** committable6 left
[09:35] *** squashable6 left
[09:35] *** notable6 left
[09:35] *** bisectable6 left
[09:35] *** sourceable6 left
[09:35] *** evalable6 left
[09:35] *** shareable6 left
[09:35] *** statisfiable6 left
[09:35] *** greppable6 left
[09:35] *** linkable6 left
[09:35] *** nativecallable6 left
[09:35] *** bloatable6 left
[09:35] *** quotable6 left
[09:35] *** releasable6 left
[09:35] *** coverable6 left
[09:36] *** tellable6 joined
[09:36] *** coverable6 joined
[09:36] *** shareable6 joined
[09:36] *** evalable6 joined
[09:36] *** bisectable6 joined
[09:36] *** notable6 joined
[09:36] *** statisfiable6 joined
[09:37] *** quotable6 joined
[09:37] *** greppable6 joined
[09:37] *** benchable6 joined
[09:37] *** reportable6 joined
[09:37] *** squashable6 joined
[09:38] *** releasable6 joined
[09:38] *** unicodable6 joined
[09:38] *** linkable6 joined
[09:38] *** bloatable6 joined
[09:38] *** sourceable6 joined
[09:38] *** committable6 joined
[09:39] *** nativecallable6 joined
[09:41] <xinming_> gfldex: Thanks, use  :$a  instead of  :$!a   gives me the idea of the acceptable version for me.
[09:43] *** Sgeo left
[09:47] *** sena_kun left
[10:01] <xinming_> What is the best way to subclass an Array, Just before the array creation, We check the value of the array.
[10:02] <xinming_> Let's say,   (('1d', ...), ('4h', ...), ('2h', ...))      For this list of list, I need to ensure that each element's first element is larger than the later ones.
[10:03] <lizmat> what do you want to do if the values do not match ?
[10:04] <xinming_> What I do now is something like,   class MyArray is Array { submethod new (*@values) { 'check values here';  return Array.new(|@values) };
[10:04] <xinming_> lizmat: I actually wish to make it a type.
[10:05] <xinming_> I wrote the code already, But want it to look more natural in raku way.
[10:07] <lizmat> m: subset A of List where { [>] @_ }; dd (3,2,1) ~~ A
[10:07] <camelia> rakudo-moar 5f03e704b: OUTPUT: «Bool::True␤»
[10:07] <lizmat> xinming_  ^^ something like that ?
[10:08] <lizmat> m: subset A of List where { [>] @_ }; dd (3,2,2) ~~ A
[10:08] <camelia> rakudo-moar 5f03e704b: OUTPUT: «Bool::False␤»
[10:09] <xinming_> m: subset A of List where { [>] @_ }; my A @a = (3, 2, 1); @a.raku.say;
[10:09] <camelia> rakudo-moar 5f03e704b: OUTPUT: «Type check failed for an element of @a; expected A but got Int (3)␤  in block <unit> at <tmp> line 1␤␤»
[10:09] <xinming_> m: subset A of List where { [>] @_ }; my @a is A = (3, 2, 1); @a.raku.say;
[10:09] <camelia> rakudo-moar 5f03e704b: OUTPUT: «You cannot create an instance of this type (A)␤  in block <unit> at <tmp> line 1␤␤»
[10:09] <xinming_> lizmat: We can't enfore the subset on an @array container. :-)
[10:10] <xinming_> I'm not trying my version yet, What I wish to do is something like,   my @a is A = (...);     This way, We can have @a automatically validated
[10:10] <lizmat> subset A of List where { [>] @_ }; my A @a = $(3,2,2)
[10:11] <lizmat> m: subset A of List where { [>] @_ }; my A @a = $(3,2,2)
[10:11] <camelia> rakudo-moar 5f03e704b: OUTPUT: «Type check failed for an element of @a; expected A but got List ((3, 2, 2))␤  in block <unit> at <tmp> line 1␤␤»
[10:11] <lizmat> m: subset A of List where { [>] @_ }; my A @a = $(3,2,1)
[10:11] <camelia> rakudo-moar 5f03e704b: ( no output )
[10:11] <lizmat> m: subset A of List where { [>] @_ }; my A @a = $(3,2,1); dd @a
[10:11] <camelia> rakudo-moar 5f03e704b: OUTPUT: «Array[A @a = Array[A].new($(3, 2, 1))␤»
[10:11] <lizmat> looks ok to me?
[10:12] <xinming_> lizmat: It's now become array of array.
[10:12] <lizmat> no, it's an Array of lists ?
[10:12] <xinming_> @a itself should be (3,2,1)
[10:12] <xinming_> :-)
[10:12] <lizmat> ah
[10:12] <xinming_> Yes, it's array of lists, But it's each array in the list's first element will be checked.
[10:14] <xinming_> Actually, My sollution is trying to subclass Array, to make it a real type.
[10:14] <xinming_> in docs, IIRC subset is just a constraint, Not a real type
[10:15] <lizmat> m: subset A of List where { [>] @_ }; class B is Array { method STORE(A $list) { nextsame } }; my @a is B = 3,2,2
[10:15] <camelia> rakudo-moar 5f03e704b: OUTPUT: «Constraint type check failed in binding to parameter '$list'; expected A but got List ((3, 2, 2))␤  in method STORE at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[10:15] <lizmat> m: subset A of List where { [>] @_ }; class B is Array { method STORE(A $list) { nextsame } }; my @a is B = 3,2,1
[10:15] <camelia> rakudo-moar 5f03e704b: ( no output )
[10:15] <xinming_> m: subset A of List where { [>] @_ }; class B is Array { method STORE(A $list) { nextsame } }; my @a is B = 3,2,1; @a;
[10:15] <camelia> rakudo-moar 5f03e704b: OUTPUT: «WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»
[10:15] <lizmat> m: subset A of List where { [>] @_ }; class B is Array { method STORE(A $list) { nextsame } }; my @a is B = 3,2,1; dd @a
[10:15] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[3, 2, 1]␤»
[10:16] <lizmat> if you want @a to be immutable:
[10:16] <xinming_> Thanks, will check docs about the STORE method.
[10:16] <lizmat> m: subset A of List where { [>] @_ }; class B is List { method STORE(A $list) { nextsame } }; my @a is B = 3,2,1; dd @a
[10:16] <camelia> rakudo-moar 5f03e704b: OUTPUT: «(3, 2, 1)␤»
[10:17] <xinming_> thanks, actually, STORE method name is what I'm looking for. :-)
[10:17] <lizmat> there you go!
[10:24] <discord-raku-bot> <nemokosch> sadly, the typing of literals is not very clever
[10:31] *** jpn joined
[10:36] *** jpn left
[10:40] <xinming_> It's been a while not seeing lwall, How is he recently? Anyone knows? :-)
[10:44] <lizmat> not really, I think...
[10:44] <lizmat> I also think: no news is good news
[10:45] <xinming_> Ok, thanks.
[10:46] <xinming_> the `Defaults on compound attribute types not yet implemented. Sorry`    The subclass List can not be used on class attributes.
[10:46] <xinming_> can not be used in attributes defaults.
[10:47] <xinming_> We'll have to use TWEAK method, But it's good enough
[10:53] <xinming_> I think I found a bug in class attribute with customized Array declration, Will narrow it down.
[11:02] <xinming_> lizmat: subset A of List where { ... };   <-- in this case, Is it possible to do something like,    subset A of (Array|List)  where { ... } ?
[11:02] <lizmat> Array isa List, so List will cover both
[11:02] <lizmat> m: say Array ~~ List
[11:02] <camelia> rakudo-moar 5f03e704b: OUTPUT: «True␤»
[11:15] <xinming_> lizmat: So, I think this is a bug then.   https://termbin.com/idfc
[11:16] <xinming_> When we change the Array to  List, the code is running fine,
[11:17] <xinming_> tested with    Welcome to Rakudo™ v2023.06. 
[11:21] <xinming_> And we can also replace 'Array' to something like 'Positional' in subset declaration, But the @_ in the subset code block will cause @_ to be flatten
[11:22] <lizmat> the problem is in your code
[11:22] *** saint- left
[11:22] <lizmat> subset A of Array expects an Array
[11:22] <lizmat> but in @!t = #test data, you're feeding it a List
[11:23] <lizmat> if you do the #test data with [ ], then it works
[11:23] <lizmat> morale: make the subset of List, I'd say
[11:28] <xinming_> Ok, It's quite subtle for () vs [] in this case.
[11:28] <xinming_> will think more on this
[11:29] <xinming_> But I still don't get the idea, why with list, in subset, It'll flatten the array.
[11:32] <xinming_> m: subset A of List where { @_.raku.say; True }; class B is Array { method STORE (A $v) { $v.raku.say; nextsame } }; my @a is B = ((1,), (2,), (3,))
[11:32] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[1, 2, 3]␤$((1,), (2,), (3,))␤»
[11:35] <xinming_> m: sub a (*@_) { @_.raku.say; }; my @t = ((1,), (2,), (3,)); @t.raku.say; a(|@t);
[11:35] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[(1,), (2,), (3,)]␤[(1,), (2,), (3,)]␤»
[11:36] <xinming_> just now checked signature for the where block, it's also   (*@_) 
[11:37] <lizmat> m: dd { @a }.signature
[11:37] <camelia> rakudo-moar 5f03e704b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> dd { ⏏@a }.signature␤»
[11:37] <lizmat> m: dd { @_ }.signature
[11:37] <camelia> rakudo-moar 5f03e704b: OUTPUT: «:(*@_)␤»
[11:37] <lizmat> @_ is like a special case of $^a, aka placeholder
[11:38] <xinming_> lizmat: So in where block, array should be flattened with List?
[11:39] <lizmat> I guess you want to make a specific signature in the where block, like -> @_ { }
[11:39] <lizmat> that would not be slurpy
[11:40] <xinming_> actually, I want to know why in this case, the where will flatten all things in the list.
[11:40] <xinming_> tried with another level, It's still being flatten in where block in subset
[11:42] <lizmat> m: subset A of List where -> @_ { @_.raku.say; True }; class B is Array { method STORE (A $v) { $v.raku.say; nextsame } }; my @a is B = ((1,), (2,), (3,))
[11:42] <camelia> rakudo-moar 5f03e704b: OUTPUT: «((1,), (2,), (3,))␤$((1,), (2,), (3,))␤»
[11:42] <lizmat> note the -> @_  { ... } in the where
[11:42] <xinming_> m: subset A of List where { @_.raku.say; True }; class B is Array { method STORE (A $v) { $v.raku.say; nextsame } }; my @a is B = ((1,(1,(1,),), (2,(2,(2,)))), (3,(3,(3,))))
[11:42] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[1, 1, 1, 2, 2, 2, 3, 3, 3]␤$((1, (1, (1,)), (2, (2, (2,)))), (3, (3, (3,))))␤»
[11:43] <lizmat> xinming_ : not { @_ } but: -> @_ {  }
[11:43] <xinming_> lizmat: Yea, I know, I just get quite confused in slurp arg this time
[11:43] <lizmat> m: subset A of List where -> @_ { @_.raku.say; True }; class B is Array { method STORE (A $v) { $v.raku.say; nextsame } }; my @a is B = ((1,(1,(1,),), (2,(2,(2,)))), (3,(3,(3,))))
[11:43] <camelia> rakudo-moar 5f03e704b: OUTPUT: «((1, (1, (1,)), (2, (2, (2,)))), (3, (3, (3,))))␤$((1, (1, (1,)), (2, (2, (2,)))), (3, (3, (3,))))␤»
[11:44] <xinming_> what operator do we use for slurpy arg in this case?
[11:44] <xinming_> I mean behave like where
[11:44] <lizmat> the where just takes a Callable
[11:44] <lizmat> where doesn't do anything special
[11:45] <lizmat> it takes a callable, calls it with the arguments it gets, and accepts if the Callable returns True
[11:46] <xinming_> for now, it's unstandable.
[11:47] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), (3,(3,(3,)))); $t(a);
[11:47] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[1, 1, 1, 2, 2, 2, 3, 3, 3]␤»
[11:48] <lizmat> m: my $t = -> @_ { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), (3,(3,(3,)))); $t(a);
[11:48] <camelia> rakudo-moar 5f03e704b: OUTPUT: «((1, (1, (1,)), (2, (2, (2,)))), (3, (3, (3,))))␤»
[11:48] <xinming_> Now, I successfully repeat it, Still need to re-think on what I know
[11:48] <xinming_> thanks for your time.
[11:48] <lizmat> m: dd ({ @_ }).signatiure
[11:48] <camelia> rakudo-moar 5f03e704b: OUTPUT: «No such method 'signatiure' for invocant of type 'Block'.  Did you mean␤'signature'?␤  in block <unit> at <tmp> line 1␤␤»
[11:48] <lizmat> m: dd ({ @_ }).signature
[11:48] <camelia> rakudo-moar 5f03e704b: OUTPUT: «:(*@_)␤»
[11:48] <lizmat> m: dd (-> @_ { @_ }).signature
[11:48] <camelia> rakudo-moar 5f03e704b: OUTPUT: «:(@_)␤»
[11:48] <lizmat> see the difference?
[11:49] <lizmat> see the difference?
[11:49] <lizmat> and you're welcome  :-)
[11:50] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), $(3,(3,(3,)))); $t(a);
[11:50] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[1, 1, 1, 2, 2, 2, (3, (3, (3,)))]␤»
[11:51] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), [3,(3,(3,))]); $t(a);
[11:51] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[1, 1, 1, 2, 2, 2, 3, (3, (3,))]␤»
[11:52] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), $[3,(3,(3,))]); $t(a);
[11:52] <camelia> rakudo-moar 5f03e704b: OUTPUT: «[1, 1, 1, 2, 2, 2, [3, (3, (3,))]]␤»
[11:52] <lizmat> that's because the array stores the list in a container, making them itemized
[11:53] <lizmat> m: my @a = (1,2),(3,4); dd $_ for @a
[11:53] <camelia> rakudo-moar 5f03e704b: OUTPUT: «List @a = $(1, 2)␤List @a = $(3, 4)␤»
[11:53] <xinming_> lizmat: yea, I'm still thinking on this.  () $() $[] are now totally different, For quite a while, I think $() is the same as $[], and $() is just a force scaller to ()
[11:54] <lizmat> ?
[11:54] <xinming_> I read docs several times on List
[11:54] <xinming_> Now I know there are differences between  ()  $()   $[]
[11:55] <lizmat> good!
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:20] *** jpn joined
[12:24] *** jpn left
[12:32] *** jpn joined
[13:32] *** linkable6 left
[13:32] *** evalable6 left
[13:32] *** evalable6 joined
[13:33] *** linkable6 joined
[13:58] *** jpn left
[14:02] <tbrowder__> g'day. i just tried the raku REPL on a host and was suggested to use Readline or Linenoise. i opted for Readline since it was suggested first and it failed testing. then i installed Linenoise successfully. i vaguely remembered going through the same provess before.
[14:02] <tbrowder__> is seems to me the repl msg ought to suggest Linenoise before Readline.
[14:05] <tbrowder__> or fix the late Jeff's Readline
[14:07] <tbrowder__> i think a bug report should be made, which i will gladly do
[14:13] <lizmat> please do
[14:29] *** tea3po joined
[14:32] *** teatwo left
[14:37] *** euandreh left
[14:38] <discord-raku-bot> <antononcube> @lizmat Thanks for mentioning StrDistance -- I did not know about it.
[14:39] <discord-raku-bot> <antononcube> @lizmat (That was more than a week ago -- you mentioned it and went "AFK.")
[14:40] <lizmat> yeah, I do go afk every now and then :-)
[14:40] *** euandreh joined
[14:41] *** tea3po left
[14:41] *** tea3po joined
[14:49] <discord-raku-bot> <antononcube> @lizmat Ok. That habit might be a suitable preparation to start AFvi ("away from vi.")
[14:50] <lizmat> :-)
[14:55] <discord-raku-bot> <antononcube> @lizmat Actually, I just generated a few 12 step lists how to quit vi addiction. It is entertaining, enough... 🙂 Unfortunately the generated lists of  quiting Perl5 do not include Raku. (So far...)
[14:58] <lizmat> I'd rather see Raku on the "quitting Python" list  :-)
[14:58] <discord-raku-bot> <antononcube> Where is the default or conventional place to put documentation in Raku packages/modules -- "./doc" or "./docs" ?
[14:59] <[Coke]> I don't think we have a default/recommended place at the moment.
[14:59] <discord-raku-bot> <antononcube> @Coke thanks!
[14:59] <[Coke]> let's say "doc" because that' what raku/doc uses.
[15:00] <lizmat> fwiw, if a module of mine has a separate .rakudoc file, I put it in the /doc dir
[15:00] <discord-raku-bot> <antononcube> @lizmat Thanks -- good to know!
[15:20] *** jpn joined
[15:24] <discord-raku-bot> <antononcube> @lizmat Any examples repositories / modules with that? ("Acme::Text::UpsideDown" and "App::Rak" do not have it.)
[15:24] <discord-raku-bot> <antononcube> I tried a few other modules too...
[15:24] *** jpn left
[15:25] <lizmat> App::Rak dist has a doc dir ?
[15:25] <lizmat> with an App-Rak.rakudoc file in it?
[15:27] <discord-raku-bot> <antononcube> @lizmat Yes. Sorry, I might have clicked on the "wrong" "App::Rak", you have several at raku.land. (Meaning, it is your fault...)
[15:28] <lizmat> there's an App::Rak::Complete and there's a rak
[15:28] <lizmat> did I miss one?
[15:29] <discord-raku-bot> <antononcube> Well, "App::Raku::Log" might also count for misguided clicking...
[15:30] <lizmat> I guess...  
[15:31] <discord-raku-bot> <antononcube> @lizmat Yes, I see only two app-raks : "App::Rak" and "App::Rak::Complete".
[15:31] <lizmat> the ::Complete one will install all of the optional dependencies
[15:38] <discord-raku-bot> <antononcube> Ok. I am currently processing the "App::Rak" documentation with LLMs...
[15:38] <lizmat> oh dear
[15:39] <discord-raku-bot> <antononcube> @lizmat LOL! Thanks for the encouragement!
[15:42] <discord-raku-bot> <antononcube> As for Python->Raku 12 step program, here is one : https://i.imgur.com/L8CIhCk.png
[15:43] <lizmat> :-)    s/pro ject/project/ I guess ?
[15:45] <discord-raku-bot> <antononcube> @lizmat Good observation! That shows how tokens are used to generate the text.
[15:46] <discord-raku-bot> <antononcube> This might be also of interest: https://i.imgur.com/y7SsVGa.png
[15:59] *** rf joined
[16:02] <discord-raku-bot> <antononcube> Also -- for the record -- here are the generated "no more vi" 12 steps: https://i.imgur.com/7dH5716.png
[16:30] <tbrowder__> most of my modulez
[16:31] <tbrowder__> modules have  a /docs directory an App::Mi6 generates Markdown docs from that. /docs are pure Rakupod, no ambient code.
[16:33] <lizmat> tbrowder__: but that's because you instructed App::Mi6 to look in the "docs" rather than the "doc" directory, no ?
[16:34] <tbrowder__> if you aren't yet using App::Mi6, my Mi6::Helper eases the pain for a new module. if nothing else, you can create a new, template module that will help you convert an old module.
[16:37] <tbrowder__> now, yes. but i think i'm the one who suggested the capability. i used to use a Makefile to convert to other desired Markdown files.
[16:37] <tbrowder__> i'm happy to make helper change to docs if it becomes recommended practice.
[16:38] <tbrowder__> to *doc if so
[16:40] <lizmat> maybe this should be discussed on  #raku-doc   :-)
[16:43] <tbrowder__> antononcube: love the link on leaving python, thnx!
[16:45] <discord-raku-bot> <antononcube> @tbrowder Well, lizmat requested it… 🙂
[16:45] <tbrowder__> btw, rakudo.org has rakudo/docs
[16:46] <lizmat> yeah, and then there's https://docs.raku.org
[16:47] <tbrowder__> as does raku/nqp/docs
[16:47] <tbrowder__> those are why i started using docs
[16:47] <tbrowder__> in my modules
[16:48] <lizmat> yet: https://github.com/raku/doc
[16:49] <tbrowder__> is the 12-step gonna be in the "docs?" oughtta be
[16:49] <lizmat> hehe... PRs welcome
[16:51] <tbrowder__> but the raku/doc i think was thought of originally as a single document or project (that used to bother me, but i got over it)
[16:59] *** evalable6 left
[16:59] *** linkable6 left
[17:00] *** evalable6 joined
[17:01] *** linkable6 joined
[17:15] *** Ekho left
[17:15] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), $(3,(3,(3,)))); $t(a);
[17:15] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «[1, 1, 1, 2, 2, 2, (3, (3, (3,)))]␤»
[17:16] *** jpn joined
[17:16] <xinming_> hmm, Restart the example.
[17:16] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), [3,(3,(3,))]); $t(a);
[17:16] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «[1, 1, 1, 2, 2, 2, 3, (3, (3,))]␤»
[17:16] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), $[3,(3,(3,))]); $t(a);
[17:16] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «[1, 1, 1, 2, 2, 2, [3, (3, (3,))]]␤»
[17:17] <xinming_> lizmat: the array will be flatten once in example 1, right?
[17:18] <lizmat> it won't flatten, as it has been itemized?
[17:20] <xinming_> m: my $t = { @_.raku.say; }; my \a = ((1,(1,(1,),), (2,(2,(2,)))), [3,(3,(3,))]); $t(a);
[17:20] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «[1, 1, 1, 2, 2, 2, 3, (3, (3,))]␤»
[17:20] *** euandreh left
[17:20] <xinming_> I mean this one, I'm still a bit confused, Why will the [] be flatten
[17:21] *** jpn left
[17:21] <lizmat> because it's a slurpy @ will flatten anything Array / List like, unless it has been itemized
[17:22] <lizmat> and in an array, lists are automatically itemized, because they're in a container
[17:32] <tbrowder__> lizmat: ref the 12-step article by antononcube, where on the raku.org should it be put? would it be better in or accompanied by an article about why Raku should be preferred over Python?
[17:32] *** jpn joined
[17:33] <lizmat> tbrowder__: actually, I think the humour of the list will quickly backfire when placed in an "official" location
[17:33] <xinming_> lizmat: So, List in List, doesn't have any scalar container around them, right
[17:33] <tbrowder__> probably
[17:34] <lizmat> xinming_: well, you *can* create a List with containers in it, but that would require "hard" work
[17:34] <lizmat> m: dd (1,2,my $ = 3,4)
[17:34] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «(1, 2, 3, 4)␤»
[17:34] <lizmat> m: dd (1,2,(my $ = 3),4)
[17:34] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «(1, 2, 3, 4)␤»
[17:34] <lizmat> m: dd (1,2,(my $ = 3),4)[2] = 42
[17:34] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «Int $ = 42␤»
[17:34] <tbrowder__> but a good, technical article on benefits of Raku over Python would be very good to have imho.
[17:35] <xinming_> ((1,), (2,))     <--- (1,)  (2,)  doesn't have scalar container, that's why they'll be flatten, But in array, there is scalar container around each element, That's why they'll be kept from flatten
[17:35] <lizmat> agree
[17:35] <lizmat> xinming_: indeed, but also you *can* create Arrays that have elements without containers
[17:35] <xinming_> this is what I understand
[17:36] <lizmat> m: my @a = 1,2,3;   @a[1] := 42;  
[17:36] <camelia> rakudo-moar 88b22e2cb: ( no output )
[17:36] <lizmat> m: my @a = 1,2,3;   @a[1] := 42;  @a[1] = 666
[17:36] <camelia> rakudo-moar 88b22e2cb: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»
[17:36] <lizmat> xinming_ 
[17:36] <xinming_> lizmat: Ok, got it, I just trying to understand the  $()  $[]  [] differences.
[17:36] <lizmat> so it's really about the actual situation, rather than saying Array does this and List does that
[17:38] *** jpn left
[17:40] *** sena_kun joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:06] *** jpn joined
[18:06] *** samebchase6 joined
[18:07] *** samebchase left
[18:07] *** samebchase6 is now known as samebchase
[18:29] *** jpn left
[18:41] *** jpn joined
[18:46] *** Chris41 joined
[18:47] <Chris41> Hello :)
[18:50] *** Chris41 left
[18:57] *** Sgeo joined
[19:00] <tbrowder__> Chris41: howdy!
[19:00] <tellable6> tbrowder__, I'll pass your message to Chris41
[19:11] *** ab5tract joined
[19:51] *** jpn left
[20:51] *** evalable6 left
[20:51] *** linkable6 left
[20:51] *** coverable6 left
[20:51] *** reportable6 left
[20:51] *** notable6 left
[20:51] *** shareable6 left
[20:51] *** bloatable6 left
[20:51] *** sourceable6 left
[20:51] *** bisectable6 left
[20:51] *** nativecallable6 left
[20:51] *** unicodable6 left
[20:51] *** releasable6 left
[20:51] *** statisfiable6 left
[20:51] *** benchable6 left
[20:51] *** squashable6 left
[20:52] *** coverable6 joined
[20:52] *** evalable6 joined
[20:52] *** squashable6 joined
[20:52] *** nativecallable6 joined
[20:52] *** shareable6 joined
[20:53] *** statisfiable6 joined
[20:53] *** releasable6 joined
[20:53] *** reportable6 joined
[20:53] *** linkable6 joined
[20:53] *** benchable6 joined
[20:53] *** sourceable6 joined
[20:54] *** notable6 joined
[20:54] *** unicodable6 joined
[20:54] *** bisectable6 joined
[20:54] *** bloatable6 joined
[20:56] *** deoac joined
[21:14] *** Vyrus left
[21:31] *** Vyrus joined
[21:51] *** shmup left
[22:21] *** Xliff joined
[22:21] <Xliff> \o
[22:44] *** ab5tract left
[22:48] *** jpn joined
[22:56] *** jpn left
[23:51] *** squashable6 left
[23:53] *** squashable6 joined
