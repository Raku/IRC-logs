[00:09] *** gfldex_ is now known as gfldex

[00:14] *** jpn joined
[00:18] *** lichtkind__ left
[00:19] *** jpn left
[00:45] *** jpn joined
[00:50] *** jpn left
[01:05] *** habere-et-disper left
[02:16] *** jpn joined
[02:21] *** jpn left
[02:45] *** hulk joined
[02:46] *** kylese left
[02:47] *** jpn joined
[02:51] *** jpn left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:45] *** jpn joined
[03:50] *** jpn left
[05:19] *** jpn joined
[05:24] *** jpn left
[05:51] *** hobbs joined
[05:52] *** ajsth joined
[05:52] *** ajsth left
[05:53] <hobbs> is there a nice way to ask whether two ranges have any overlap? Basically I want ($x (&) $y).elems != 0 only without the heavy cost of coercing large ranges into sets for (&).

[05:55] <hobbs> I can do like ($x.min ~~ $y or ($x.max-1) ~~ $y or $y.min ~~ $x or ($y.max-1) ~~ $y)  (both ranges are excludes-max) and that's efficient, but the opposite of elegant.

[06:14] *** jpn joined
[06:19] *** jpn left
[06:39] *** lesihctej left
[06:41] *** Sgeo left
[06:45] *** jpn joined
[06:49] *** japhb left
[06:49] *** japhb joined
[06:51] *** jpn left
[07:01] *** Sgeo joined
[07:28] *** melezhik joined
[07:29] *** jpn joined
[07:33] *** melezhik left
[07:40] *** jpn left
[07:46] *** jpn joined
[07:52] *** jpn left
[08:04] *** jpn joined
[08:16] *** jpn left
[08:22] *** abraxxa joined
[08:22] *** jpn joined
[08:35] *** jpn left
[08:53] <hobbs> ended up with: multi sub infix:<(&)>(Range:D $a, Range:D $b) { max($a.min, $b.min) ..^ min($a.max, $b.max) }. A version that handled excludes-min/excludes-max fully would be a little more verbose but I don't need it :)

[09:01] *** dakkar joined
[09:07] *** Sgeo left
[09:19] <discord-raku-bot> <nemokosch> Is it deliberate that the output type is Seq?

[09:26] *** sena_kun joined
[09:37] <mort> can you not break out of a while loop in raku

[09:39] <mort> wait apparently it's called last?

[09:44] <discord-raku-bot> <nemokosch> it is

[09:57] *** lichtkind__ joined
[10:00] *** merp left
[10:05] *** merp joined
[10:45] *** jetchisel joined
[11:18] *** jpn joined
[11:49] <Geth> ¦ advent/main: 75e6ce5c4f | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | raku-advent-2023/authors.md

[11:49] <Geth> ¦ advent/main: Schedule Kay Rhodes' post for the 6th

[11:49] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/75e6ce5c4f

[11:51] *** lichtkind_ joined
[11:54] *** lichtkind__ left
[12:01] *** jpn left
[12:03] *** jpn joined
[12:17] *** xinming left
[12:19] *** xinming joined
[12:29] *** abraxxa1 joined
[12:32] *** abraxxa left
[12:43] *** jpn left
[12:47] *** abraxxa joined
[12:48] *** abraxxa1 left
[13:02] *** jpn joined
[13:04] *** abraxxa left
[13:07] *** abraxxa joined
[14:19] *** Dominika joined
[14:19] *** sdomi left
[14:27] *** andinus left
[14:29] *** andinus joined
[14:37] *** abraxxa left
[14:41] *** abraxxa joined
[14:46] *** jpn left
[14:49] *** mcmillhj joined
[14:55] *** jgaz joined
[14:56] *** jpn joined
[15:26] *** teatime left
[15:33] * lizmat clickbaits https://rakudoweekly.blog/2023/12/04/2023-49-venting-this-ad/

[15:47] *** hobbs left
[16:54] *** abraxxa left
[17:00] *** jpn left
[17:00] *** djuber left
[18:13] <tbrowder_> ugexe: sorry I didn't reply to yr last comment to me ref shell, i got buried in Christmas TODOs. with RakudoBin  i will take your advice but add it as a another and better way to do it

[18:19] *** dakkar left
[19:30] *** abraxxa-home joined
[19:39] *** mscha joined
[19:39] <mscha> m: say so 1..0;

[19:39] <camelia> rakudo-moar 8dca71e89: OUTPUT: «True␤»

[19:40] <mscha> Shouldn't an empty range be False?

[19:51] <lizmat> https://github.com/rakudo/rakudo/issues/5222

[19:53] <lizmat> but the code I added there seems to have been remove again?

[19:53] <lizmat> bisectable6: old=2023.04 say so 1..0;

[19:53] <bisectable6> lizmat, On both starting points (old=2023.04 new=8dca71e) the exit code is 0 and the output is identical as well

[19:53] <bisectable6> lizmat, Output on both points: «True␤»

[19:54] <lizmat> bisectable6: old=2023.03 new-2023.04 say so 1..0;

[19:54] <bisectable6> lizmat, Cannot find revision “2023.03” (did you mean “2023.10”?)

[19:54] <lizmat> bisectable6: old=2023.02 new-2023.04 say so 1..0;

[19:54] <bisectable6> lizmat, On both starting points (old=2023.02 new=8dca71e) the exit code is 1 and the output is identical as well

[19:54] <bisectable6> lizmat, https://gist.github.com/b681be0bd678f7f57f6c8ec9a539548a

[19:56] <lizmat> aaah...now I's remember

[19:56] <lizmat> m: use v6.r; say so 1..0;

[19:56] <camelia> rakudo-moar 8dca71e89: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No compiler available for Raku v6.r␤at <tmp>:1␤------> use v6.r⏏; say so 1..0;␤»

[19:56] <lizmat> m: use v6.e; say so 1..0;

[19:56] <camelia> rakudo-moar 8dca71e89: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Raku v6.e requires PREVIEW modifier␤at <tmp>:1␤------> use v6.e⏏; say so 1..0;␤»

[19:56] <lizmat> m: use v6.*; say so 1..0;

[19:56] <camelia> rakudo-moar 8dca71e89: OUTPUT: «False␤»

[19:57] <mscha> Ah, thanks!

[19:57] <lizmat> moved in f31a6d56dcb39ae

[19:57] <linkable6> (2023-04-17) https://github.com/rakudo/rakudo/commit/f31a6d56dc Move the fix to Range.Bool to 6.e

[20:09] *** melezhik joined
[20:09] <melezhik> o/

[20:10] *** abraxxa-home left
[20:11] <melezhik> lizmat: does allow search in raku code ? I am interested in finding function calls from code examples , like foo(... params ... params ) ; where params chunk could be multi line

[20:12] *** abraxxa-home joined
[20:12] <melezhik> The end is of course is denoted by semi comma

[20:16] <mscha> m: use v6.e.PREVIEW; say so 1..0;

[20:16] <camelia> rakudo-moar 8dca71e89: OUTPUT: «False␤»

[20:17] *** melezhik left
[20:17] <mscha> m: use v6.e.PREVIEW; say "Huh?" if 1..0;

[20:17] <camelia> rakudo-moar 8dca71e89: OUTPUT: «Huh?␤»

[20:17] <mscha> m: use v6.e.PREVIEW; say "Huh?" if so 1..0;

[20:17] <camelia> rakudo-moar 8dca71e89: ( no output )

[20:17] <mscha> Doesn't "if" force boolean context?

[20:19] <discord-raku-bot> <nemokosch> ummm.... uh

[20:19] <discord-raku-bot> <nemokosch> in general, how did it ever become true in practice

[20:29] <discord-raku-bot> <nemokosch> trying to analyze the situation

[20:32] <discord-raku-bot> <nemokosch> m: use v6.e.PREVIEW; if 1..0 { say "HUH?" };

[20:32] <evalable6> nemokosch, rakudo-moar 8dca71e89: OUTPUT: «HUH?␤»

[20:32] <discord-raku-bot> <Raku eval>  HUH? 

[20:32] <discord-raku-bot> <nemokosch> this escalated quickly

[20:32] <mscha> Just guessing, but perhaps the implicit Boolean conversion of `if 1..0` uses the default 6.d version instead of the 6.e version?

[20:33] <discord-raku-bot> <nemokosch> this is what I'm thinking, too

[20:34] <discord-raku-bot> <nemokosch> the implicit conversion has no traces in QAST so I suppose it's the runtime that somehow makes the call

[20:38] <discord-raku-bot> <nemokosch> m: use v6.e.PREVIEW; use nqp; nqp::if(False, say "HUH?")

[20:38] <evalable6> nemokosch, rakudo-moar 8dca71e89: OUTPUT: «»

[20:38] <discord-raku-bot> <Raku eval>  

[20:38] <discord-raku-bot> <nemokosch> I'm not exactly sure how this works but it does work...

[20:38] <discord-raku-bot> <nemokosch> m: use v6.e.PREVIEW; use nqp; nqp::if('', say "HUH?")

[20:38] <discord-raku-bot> <Raku eval>  

[20:38] <evalable6> nemokosch, rakudo-moar 8dca71e89: OUTPUT: «»

[20:39] <discord-raku-bot> <nemokosch> m: use v6.e.PREVIEW; use nqp; nqp::if(1..0, say "HUH?")

[20:39] <discord-raku-bot> <Raku eval>  HUH? 

[20:39] <evalable6> nemokosch, rakudo-moar 8dca71e89: OUTPUT: «HUH?␤»

[20:39] <discord-raku-bot> <nemokosch> and dang, it escapes

[20:49] *** mcmillhj left
[20:54] <discord-raku-bot> <nemokosch> m: use v6.e.PREVIEW; use nqp; nqp::say(nqp::istrue(1..0))

[20:54] <evalable6> nemokosch, rakudo-moar 8dca71e89: OUTPUT: «1␤»

[20:54] <discord-raku-bot> <Raku eval>  1 

[20:54] <discord-raku-bot> <nemokosch> sad

[20:58] *** abraxxa-home left
[21:00] <discord-raku-bot> <nemokosch> this doesn't seem to be a trivial issue, I don't even know where to open it

[22:26] *** jpn joined
[22:40] *** jgaz left
[22:48] <mort> if I have a num32 (aka a 32-bit float), can I view its bytes?

[22:49] <mort> if I need to serialize it as a binary format

[22:52] *** jpn left
[22:55] <mort> ah, Buf has write-num32

[23:09] *** jpn joined
[23:10] *** sena_kun left
[23:11] *** mscha left
[23:15] *** jpn left
[23:43] *** gfldex left
[23:43] *** gfldex joined
[23:48] *** Sgeo joined
[23:48] *** lichtkind_ left
