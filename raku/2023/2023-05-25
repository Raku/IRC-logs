[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[00:47] *** jpn joined
[00:51] *** jpn left
[00:54] *** andydude joined
[01:00] *** Guest88 left
[01:04] *** xinming left
[01:06] *** xinming joined
[01:15] *** ProperNoun left
[01:49] *** derpydoo left
[02:06] <vrurg> ugexe: The problem is that as long as I remember, $*DISTRIBUTION is precompiled anyway. Isn't it?

[02:19] *** teatwo joined
[02:22] *** tea3po left
[02:35] *** jpn joined
[02:40] *** jpn left
[02:41] <ugexe> I dunno if all the meta information is precompiled though

[02:41] <ugexe> it might be only the version, api, auth, and name keys are precompiled

[02:41] *** andydude left
[02:41] <ugexe> so if you called .meta<anything else> it would have to read the META6.json file

[02:45] *** derpydoo joined
[02:50] *** xinming left
[02:56] *** andydude joined
[03:03] *** xinming joined
[04:03] *** unicodable6 left
[04:03] *** squashable6 left
[04:03] *** linkable6 left
[04:03] *** shareable6 left
[04:03] *** releasable6 left
[04:03] *** bloatable6 left
[04:03] *** evalable6 left
[04:03] *** tellable6 left
[04:03] *** quotable6 left
[04:03] *** statisfiable6 left
[04:03] *** benchable6 left
[04:03] *** nativecallable6 left
[04:03] *** coverable6 left
[04:03] *** committable6 left
[04:03] *** reportable6 left
[04:03] *** greppable6 left
[04:03] *** bisectable6 left
[04:03] *** notable6 left
[04:03] *** sourceable6 left
[04:04] *** benchable6 joined
[04:04] *** tellable6 joined
[04:04] *** linkable6 joined
[04:04] *** greppable6 joined
[04:04] *** squashable6 joined
[04:04] *** unicodable6 joined
[04:05] *** evalable6 joined
[04:05] *** reportable6 joined
[04:05] *** releasable6 joined
[04:05] *** bloatable6 joined
[04:05] *** notable6 joined
[04:05] *** coverable6 joined
[04:06] *** sourceable6 joined
[04:06] *** quotable6 joined
[04:06] *** statisfiable6 joined
[04:06] *** committable6 joined
[04:06] *** bisectable6 joined
[04:06] *** shareable6 joined
[04:06] *** nativecallable6 joined
[04:23] *** jpn joined
[04:28] *** jpn left
[05:05] *** andydude left
[05:19] *** Sauvin left
[05:47] *** Sauvin joined
[05:49] *** swaggboi left
[05:56] *** jpn joined
[06:00] *** reportable6 left
[06:01] *** jpn left
[06:01] *** reportable6 joined
[06:01] *** emakei joined
[06:02] *** swaggboi joined
[06:23] *** deoac left
[06:28] *** jpn joined
[06:31] *** abraxxa joined
[06:35] *** jpn left
[06:57] *** jpn joined
[07:04] *** squashable6 left
[07:05] *** squashable6 joined
[07:11] *** jpn left
[07:38] *** derpydoo left
[07:56] *** Sgeo left
[08:05] *** dakkar joined
[08:25] *** phogg left
[08:45] *** jpn joined
[08:59] *** sena_kun joined
[09:06] *** derpydoo joined
[09:14] <elcaro> dealing with a C function that returns a char*. Returning Str is nice, but why can't I return a Buf

[09:15] <elcaro> I want the bytes. Sure I can  return CArray[int8], but I don't know the size, which means I have to walk the CArray myself until I hit a Null

[09:15] <elcaro> Seems NativeCall already does this under the hood, and then decodes  to return a Str... Could  it not also do the same just without the decode

[09:22] <elcaro> FWIW, with Python ctypes, one can specify restype as c_char_p, which returns a `bytes` object

[09:28] *** phogg joined
[09:28] <moritz> m: say 42

[09:28] <camelia> rakudo-moar d52342eb0: OUTPUT: «42␤»

[09:29] <moritz> camelia build is unstuck, thanks lizmat++ for poking me

[09:31] <lizmat> 	m: say (1..*).sort[^10]

[09:31] <camelia> rakudo-moar d52342eb0: OUTPUT: «Cannot sort a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[09:31] <lizmat> moritz: that should work on HEAD, so I think camelia is still behind  :-(

[09:32] <lizmat> commit d52342eb0 is the 2022.12 release ?

[09:32] <moritz> that's the newest commit on the master branch

[09:33] <moritz> do we have a new main branch name?

[09:33] *** linkable6 left
[09:33] <lizmat> but we're on main nowadays ?

[09:33] <moritz> can somebody please delete "master" then?

[09:33] *** linkable6 joined
[09:33] <moritz> it's confusing to have the old branch still lying around

[09:34] <lizmat> I'll bring it up on the RCS

[09:35] <lizmat> moritz: and sorry, I thought you'd gotten the memo  :-(

[09:42] <moritz> maybe I had, my memory is somewhat leaky these days

[09:45] <moritz> m: say 1

[09:45] <camelia> rakudo-moar : OUTPUT: «1␤»

[09:45] <lizmat> hmmm no commit sha?

[09:46] <moritz> m: say 1

[09:46] <camelia> rakudo-moar 149dd8801: OUTPUT: «1␤»

[09:47] <lizmat> whee!

[09:47] <lizmat> 	m: say (1..*).sort[^10]

[09:47] <camelia> rakudo-moar 149dd8801: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤»

[09:47] <lizmat> ^^ this works because .sort knows it's getting a sorted listr already

[09:47] <moritz> rakudo can now sort infinite lists, how cool is that :-)

[09:48] <lizmat> well, only sorted infinite lists  :-)

[10:02] *** phogg left
[10:02] *** phogg joined
[10:04] <andinus> m: say (10, -10, |1..*).sort[^10]

[10:04] <camelia> rakudo-moar 149dd8801: OUTPUT: «Potential difficulties:␤    To apply a Slip flattener to a range, parenthesize the whole range.␤    (Or parenthesize the whole endpoint expression, if you meant that.)␤    at <tmp>:1␤    ------> say (10, -10, ⏏|1..*).sort[^10]␤(-10 …»

[10:04] <andinus> m: say (10, -10, |(1..*)).sort[^10]

[10:04] <camelia> rakudo-moar 149dd8801: OUTPUT: «Cannot .sort a lazy list onto a List␤  in block <unit> at <tmp> line 1␤␤»

[10:04] <andinus> m: say (1..*).sort[^10]

[10:04] <camelia> rakudo-moar 149dd8801: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤»

[10:05] <lizmat> (10, -10, |(1..*)) does not produce an iterator that "is-monotonically-increasing"

[10:05] <andinus> i see, makes sense

[10:05] <lizmat> hence the error

[10:10] *** emakei left
[10:11] *** emakei joined
[10:31] *** jpn left
[10:35] *** jpn joined
[11:10] *** derpydoo left
[11:35] *** sftp left
[11:59] *** RonaldR34g4m joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:01] *** Vyrus left
[12:16] *** abraxxa left
[12:40] *** dakkar left
[13:05] *** ProperNoun joined
[13:06] *** ProperNoun left
[13:07] *** ProperNoun joined
[13:14] <andinus> how are changed, modified methods on IO different?

[13:16] <andinus> from what i see modified seems to be only for files, changed for directory as well. 

[13:21] <ugexe> mtime vs ctime

[13:22] <vrurg> ugexe: Didn't see your reply yesterday. BTW, there is no such thing in userlangd as $*DISTRIBUTION. And $?DISTRIBUTION is precompiled. .meta is exactly what's used because I need to iterate over it.

[13:50] <andinus> my bad, docs differentiate them 

[14:07] *** avuserow left
[14:18] *** tea3po joined
[14:22] *** teatwo left
[14:26] *** emakei left
[14:50] *** Sgeo joined
[15:50] *** greppable6 left
[15:50] *** quotable6 left
[15:50] *** benchable6 left
[15:50] *** reportable6 left
[15:50] *** committable6 left
[15:50] *** squashable6 left
[15:50] *** shareable6 left
[15:50] *** bisectable6 left
[15:50] *** bloatable6 left
[15:50] *** nativecallable6 left
[15:50] *** linkable6 left
[15:50] *** sourceable6 left
[15:50] *** evalable6 left
[15:50] *** releasable6 left
[15:50] *** tellable6 left
[15:50] *** notable6 left
[15:50] *** unicodable6 left
[15:50] *** statisfiable6 left
[15:50] *** coverable6 left
[15:50] *** linkable6 joined
[15:50] *** tellable6 joined
[15:51] *** nativecallable6 joined
[15:51] *** squashable6 joined
[15:51] *** releasable6 joined
[15:51] *** statisfiable6 joined
[15:51] *** sourceable6 joined
[15:51] *** committable6 joined
[15:51] *** benchable6 joined
[15:52] *** bloatable6 joined
[15:52] *** quotable6 joined
[15:52] *** coverable6 joined
[15:52] *** evalable6 joined
[15:53] *** greppable6 joined
[15:53] *** bisectable6 joined
[15:53] *** reportable6 joined
[15:53] *** unicodable6 joined
[15:53] *** notable6 joined
[15:53] *** shareable6 joined
[16:01] <leont> m: role A { COMPOSE { say "Now" } }; class B does A { }

[16:01] <camelia> rakudo-moar 592d11d37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not instantiate role 'A':␤lang-call cannot invoke object of type 'VMNull' belonging to no language␤at <tmp>:1␤»

[16:05] <lizmat> yeah, the COMPOSE hook was in the legacy grammar.  It is currently not in the Raku grammar, afaik

[16:06] <lizmat> ===SORRY!=== Error while compiling 

[16:06] <lizmat> Undeclared routine:

[16:06] <lizmat>     COMPOSE used at line -1

[16:23] <leont> It would be cool to have it, but in the mean time it should probably give a better error message

[16:24] <lizmat> so what do you think about the ^^ error message ?

[16:27] <ugexe> you can just omit it

[16:27] <ugexe> m: role A { say 42 }; say 1; say 1 does A; say 1 does A;

[16:27] <camelia> rakudo-moar 592d11d37: OUTPUT: «1␤42␤1␤42␤1␤»

[16:28] <ugexe> m: role A { say 42 }; say 1; say 2 does A; say 3 does A;

[16:28] <camelia> rakudo-moar 592d11d37: OUTPUT: «1␤42␤2␤3␤»

[16:29] <ugexe> hmm, i dont think that is what i expected lol

[16:29] <ugexe> disregard, i dunno what im talking about apparently

[16:30] <lizmat> the mainline of the role is run the first time it is added to the Int class

[16:30] <lizmat> the second time, it uses the cached subtype of Int

[16:30] <ugexe> 42 is printed twice in the first example, and only once in the second

[16:31] <lizmat> hmmm

[16:32] <lizmat> maybe because 1 is one of the pre-existing Int objects?

[16:32] <ugexe> technically i meant to use `but` instead of `does` for those examples, but that is besides the point that i would expect them both to be the same

[16:32] <lizmat> so it doesn't get cached with "1"

[16:53] *** linkable6 left
[16:53] *** evalable6 left
[16:56] *** evalable6 joined
[16:56] *** linkable6 joined
[17:40] *** euandreh left
[17:42] *** jpn left
[17:57] <uzl[m]> m: my \b := 1; b := 2;

[17:57] <camelia> rakudo-moar 592d11d37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot bind to 'b' because it is a term and terms cannot be rebound␤at <tmp>:1␤------> my \b := 1; b := 2⏏;␤»

[17:57] <tellable6> 2023-05-21T00:41:21Z #raku <tbrowder__> uzl[m] Briggs isn't interested. He doesn't mind following his TOC but interested parties would have to deal with his publisher.

[17:57] <tellable6> hey uzl[m], you have a message: https://gist.github.com/a34631917cabbaa71f5bde5bc94a91ee

[17:59] <uzl[m]> .tell tbrowder__ Thanks for the heads up! What's the repo mentioned? 

[17:59] <tellable6> uzl[m], I'll pass your message to tbrowder__

[17:59] <uzl[m]> m: my \b := 1; b := 2;

[17:59] <camelia> rakudo-moar 592d11d37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot bind to 'b' because it is a term and terms cannot be rebound␤at <tmp>:1␤------> my \b := 1; b := 2⏏;␤»

[17:59] <uzl[m]> m: my $a := 1; $a := 2;

[17:59] <camelia> rakudo-moar 592d11d37: ( no output )

[18:00] *** reportable6 left
[18:02] <uzl[m]> Semantically, what's the key difference between sigilless variables and sigilled variables? All this time my understanding was that 1) sigilled variables have a container and sigilless ones don't have one. 

[18:02] <uzl[m]> 2) Binding to a sigilled variable basically bypassed the container, and you basically ended up with a sigilless variable that happens to have a sigil.

[18:02] *** reportable6 joined
[18:03] <uzl[m]> However the fact you can rebind a sigilled variable but not a sigilless one means that bound sigilless variables and sigilled variables aren't the same thing

[18:04] <uzl[m]> * repo mentioned there?

[18:46] *** squashable6 left
[18:47] *** squashable6 joined
[18:58] <moritz> uzl[m]: the main difference is that you can *assign* to a sigiled variable, and that it forces some context

[18:59] <moritz> you cannot assign to a sigilless variable, but binding to one doesn't enforce a context

[18:59] <moritz> for $a, $b -> $x {} # always two iterations

[18:59] <moritz> for @a, @b -> $x { } # @a.elems + @b.elems iterations

[19:01] <moritz> for sigilless -> $x { } # depends on what's in sigilless how many iterations

[19:36] *** jpn joined
[20:08] *** jpn left
[20:14] *** avuserow joined
[20:33] *** jpn joined
[20:38] *** jpn left
[21:02] *** sena_kun left
[21:27] *** jpn joined
[21:29] *** coleman_ joined
[21:31] *** tib__ joined
[21:37] *** guifa left
[21:37] *** heartburn left
[21:37] *** coleman left
[21:37] *** tib_ left
[21:37] *** a3r0 left
[21:37] *** perryprog left
[21:37] *** sarna left
[21:37] *** coleman_ is now known as coleman

[21:37] *** tib__ is now known as tib_

[21:38] *** a3r0 joined
[21:41] *** sarna joined
[22:04] *** guifa joined
[22:04] *** heartburn joined
[22:04] *** perryprog joined
[22:05] *** heartburn left
[22:05] *** heartburn joined
[22:11] *** jpn left
[22:20] <lizmat> m: my @a = 1,2,3; for @a, @a { dd $_ }    # moritz that be 2 iterations, after the GLR

[22:20] <camelia> rakudo-moar 592d11d37: OUTPUT: «Array @a = [1, 2, 3]␤Array @a = [1, 2, 3]␤»

[22:21] <lizmat> singla argument rule: only flatten an iterable if it's the only argument

[23:11] *** linkable6 left
[23:11] *** evalable6 left
[23:12] *** evalable6 joined
[23:12] *** linkable6 joined
[23:14] *** jpn joined
[23:19] *** jpn left
[23:48] *** jpn joined
[23:52] *** jpn left
