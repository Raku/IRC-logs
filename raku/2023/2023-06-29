[00:00] *** xinming joined
[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:01] <tonyo> .

[00:09] *** codesections left
[00:09] <Voldenet> lizmat: huh, that's news to me, stagestats show parsing time for every execution of scripts

[00:13] <Voldenet> I mean simply scripts file, nothing module-related

[00:14] *** MasterDuke joined
[00:16] <Voldenet> something like `echo 'sub postfix:<a>{};' > f ; raku f`

[00:39] <jdv> MitarashiDango[m: no, i'd guess a screw up on my part

[00:41] <jdv> wait, no

[00:42] <jdv> https://rakudo.org/dl/rakudo/rakudo-2023.05.tar.gz.checksums.txt and https://rakudo.org/dl/rakudo/rakudo-2023.06.tar.gz.checksums.txt look "the same" to me.  what do you mean?

[00:42] <jdv> MitarashiDango[m: ^

[00:44] <jdv> lizmat: thanks

[00:49] <MitarashiDango[m> jdv: Sorry I meant rakudo-moar

[00:49] <MitarashiDango[m> https://rakudo.org/dl/rakudo/rakudo-moar-2023.06-01-linux-x86_64-gcc.tar.gz.checksums.txt

[00:49] <MitarashiDango[m> https://rakudo.org/dl/rakudo/rakudo-moar-2023.04-01-linux-x86_64-gcc.tar.gz.checksums.txt

[00:49] <MitarashiDango[m> The previous ones don't have a directory

[01:14] *** linkable6 left
[01:14] *** evalable6 left
[01:15] *** linkable6 joined
[01:16] *** evalable6 joined
[01:26] <jdv> iirc that's patrickb's stuff

[01:26] <jdv> patrickb: ^

[01:27] <jdv> MitarashiDango[m: ^

[01:28] <jdv> i'm just the "rakudo and moarvm release manager" - my only end products are the src releasees, patrickb and MasterDuke and maybe others take it further/other/etc

[01:48] *** Matthew|m left
[02:06] *** xinming left
[02:08] *** xinming joined
[02:25] *** teatime left
[02:26] *** teatime joined
[02:40] *** tobs left
[02:40] *** ecocode left
[02:40] *** jetchisel left
[02:40] *** patrickb left
[02:40] *** atweedie left
[02:40] *** eseyman left
[02:40] *** kst left
[02:46] *** tobs joined
[02:46] *** ecocode joined
[02:46] *** jetchisel joined
[02:46] *** patrickb joined
[02:46] *** atweedie joined
[02:46] *** eseyman joined
[02:46] *** kst joined
[02:47] *** teatwo joined
[02:51] *** teatime left
[03:10] *** jpn joined
[03:15] *** jpn left
[03:46] *** rf left
[04:46] *** linkable6 left
[04:46] *** evalable6 left
[04:47] *** evalable6 joined
[04:48] *** linkable6 joined
[05:04] *** xinming left
[05:06] *** xinming joined
[05:10] *** MasterDuke left
[05:26] <patrickb> MitarashiDango[m, jdv: That directory in the checksums file is a mistake on my part. I'll fix this. I'll find time probably in ~8 hours.

[05:27] *** Matthew|m joined
[05:27] <patrickb> Thanks for the report!

[05:45] *** jpn joined
[05:50] *** jpn left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:36] *** jpn joined
[06:41] *** jpn left
[07:35] *** jpn joined
[07:40] *** jpn left
[07:46] *** sena_kun joined
[07:58] *** Sgeo left
[08:03] *** xinming_ joined
[08:05] *** xinming left
[08:07] *** dakkar joined
[08:10] *** abraxxa joined
[08:26] *** sena_kun left
[08:34] *** TieUpYourCamel left
[08:46] *** TieUpYourCamel joined
[08:53] *** notable6 left
[08:53] *** statisfiable6 left
[08:53] *** bisectable6 left
[08:53] *** heartburn left
[08:54] *** GreaseMonkey left
[08:54] <jjatria> [Coke]: I'm back now. I'll go through the issues you've reported recently and try to get a fix for them, although that will most likely be over the weekend. Thanks for the reports!

[08:55] *** rypervenche left
[08:55] *** greaser|q joined
[08:56] *** heartburn joined
[08:57] *** rypervenche joined
[08:58] <lizmat> jjatria: good to hear you're ok and back!

[09:01] *** tailgate left
[09:01] *** tailgate joined
[09:04] *** dutchie left
[09:08] *** dutchie joined
[09:20] *** jpn joined
[09:24] *** jpn left
[09:38] <jjatria> Thanks :)

[09:42] *** greaser|q left
[09:42] *** greaser|q joined
[09:43] *** greaser|q is now known as GreaseMonkey

[09:44] *** euandreh left
[09:45] *** euandreh joined
[09:46] *** euandreh left
[09:47] *** notable6 joined
[09:49] *** statisfiable6 joined
[09:49] *** bisectable6 joined
[10:13] *** jpn joined
[10:25] *** xkr47 left
[10:35] *** xkr47 joined
[10:51] *** jpn left
[11:00] *** jpn joined
[11:05] *** jpn left
[11:49] *** melezhik joined
[11:50] <melezhik> .tell tonyo Hi! I have created a couple issues for fez

[11:50] <tellable6> melezhik, I'll pass your message to tonyo

[11:50] <melezhik> --unattended does not work for me

[11:53] *** RonaldR34g4m joined
[11:54] *** Vyrus left
[11:55] *** melezhik left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:01] *** mjgardner left
[12:01] *** mjgardner joined
[12:27] *** jgaz left
[12:28] *** jpn joined
[12:32] *** jgaz joined
[12:33] *** jpn left
[12:34] <discord-raku-bot> <Anton Antonov> Has anyone experimented with grammar visualization or mapping?

[12:34] <discord-raku-bot> <Anton Antonov> Well, using Raku, of course! üôÇ

[12:36] *** tbrowder_ left
[12:36] *** tbrowder_ joined
[12:38] *** jgaz left
[12:38] *** jgaz joined
[12:46] *** xinming_ left
[12:48] *** xinming_ joined
[13:00] *** dakkar left
[13:00] *** dakkar joined
[13:49] *** finanalyst joined
[13:50] * [Coke] waves at jjatria

[13:50] <[Coke]> grammar::tracer, was it?

[13:51] <[Coke]> was a nice command line tool for stepping through how the match was progressing.

[14:08] *** abraxxa left
[14:21] *** finanalyst left
[14:25] *** tea3po joined
[14:28] *** teatwo left
[14:37] *** Sgeo joined
[14:39] <discord-raku-bot> <Anton Antonov> @Coke Yeah, after I posted my question, it occurred to me that I have seen "Grammar::Tracer" and Comma's "live grammars". I used "Grammar::Tracer" ‚âà an year. ago.

[14:41] <discord-raku-bot> <Anton Antonov> I was thinking more about graph representations of grammars. Something like this : https://wiki.c2.com/?BnfToDot . I am not sure how useful it is. Seems neat for small grammars.

[14:57] <tbrowder__> Voldenet: lizmat <librasteve>: thanks, all, i'm going as lazy as i can!

[14:58] <tbrowder__> and i'm pretty lazy!

[14:58] *** rf joined
[15:16] *** jpn joined
[15:29] <jdv> patrickb: cool, thanks!

[15:30] *** jpn left
[15:33] *** charsbar left
[15:33] *** charsbar joined
[15:51] *** bigdata joined
[16:06] *** xinming_ left
[16:08] *** xinming_ joined
[16:35] *** dakkar left
[16:48] <tonyo> anton antonov: i have something like that for dependency graphs that could be adapted to grammars

[16:48] <tellable6> 2023-06-29T11:50:23Z #raku <melezhik> tonyo Hi! I have created a couple issues for fez

[16:48] <tonyo> melezhik: i'll take a look

[16:48] <tellable6> tonyo, I'll pass your message to melezhik

[17:16] *** Anant joined
[17:26] *** jpn joined
[17:31] *** jpn left
[17:57] *** tea3po left
[17:57] *** tea3po joined
[17:57] *** melezhik joined
[18:00] *** reportable6 left
[18:00] *** melezhik left
[18:02] *** reportable6 joined
[18:26] *** sena_kun joined
[18:31] <Tirifto> Since work on v6.e is apparently underway, are any Unicode additions being planned or considered? :o I recall reading this page at one point, but it has not changed in a while: https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII

[18:32] <lizmat> Tirifto: hasn't been touched in almost 4 years

[18:34] *** bigdata left
[18:36] <lizmat> Updated so that at least the name is ok

[18:36] <Tirifto> A lot from that page reads like a brainstorm, but some symbols, like ‚Äò‚åÅ‚Äô, ‚Äò‚üÖ‚üÜ‚Äô, or ‚Äò‚àë‚Äô, seem to fit the outlined requirements very well. Do they need more discussion/evaluation, or is it just that someone has to make a pull request implementing them (possibly leading to further discussion there), and no one‚Äôs done that so far?

[18:37] <lizmat> fwiw I think it fell through the cracks of the turmoil with the name change

[18:37] <lizmat> *I* had completely forgotten about it

[18:40] <Tirifto> I probably remembered since the use of Unicode symbols might be my favourite thing about Raku. x)

[18:46] <Tirifto> So if I‚Äôd like to see these in Raku, would sending a patch be a good way to start? :o

[18:47] <discord-raku-bot> <Anton Antonov> @tonyo Very interesting! Is your visualization "targeting" GraphViz / DOT?

[18:47] *** Anant left
[18:47] <Tirifto> Or should some discussion precede each of these first?

[18:50] <lizmat> I'm looking at them now, and preparing new PRs for the Raku Grammar (aka RakuAST)

[18:55] *** bigdata joined
[18:59] <lizmat> https://github.com/rakudo/rakudo/pull/5301

[19:14] <Tirifto> lizmat, that‚Äôs wonderful; thanks a whole lot! :D

[19:15] <lizmat> It's only a PR

[19:18] <Tirifto> Aren‚Äôt seeds as wonderful as the flowers they sprout? :-)

[19:19] <lizmat> the ‚áí is a bit more involved

[19:26] <lizmat> https://github.com/rakudo/rakudo/pull/5302

[19:30] *** bigdata left
[19:35] <lizmat> Tirifto: that'll be all I think, although I'm thinking about how to work out 1‚Öê 

[19:36] <lizmat> and seeing the difference between ‚Öê an 

[19:36] <lizmat> and ‚Åπ

[19:36] <lizmat> afk&

[19:50] <Tirifto> Ahh, I hadn‚Äôt noticed the fractions were already supported.

[19:52] *** bigdata joined
[19:52] *** bigdata left
[19:54] <Tirifto> There‚Äôs also a fraction slash, which in writing should be used in conjunction with superscript and subscript numbers, I think. [citation needed] So you get ¬π‚ÅÑ‚ÇÇ, ‚Å∂‚ÅÑ‚Çá, ¬π¬π‚ÅÑ‚ÇÇ‚ÇÉ, and so on. Raku doesn‚Äôt seem to support those, though, and the ASCII page only mentions it as a possible operator.

[19:56] *** gregzakh joined
[19:58] <Tirifto> lizmat, what do you think of ‚åÅ for the smartmatch operator?

[20:01] *** gregzakh left
[20:02] *** gregzakh joined
[20:02] *** gregzakh left
[20:19] <discord-raku-bot> <Anton Antonov> Hard to discern.

[20:31] *** jpn joined
[20:35] *** jpn left
[20:48] <[Coke]> -1 on the lightning

[20:48] <patrickb> MitarashiDango[m, jdv: I believe to have fixed the problem with the directory in the checksums file.

[21:06] <Tirifto> Alternative smartmatch idea: U+219D RIGHTWARDS WAVE ARROW ‚Üù

[21:07] *** jpn joined
[21:10] <Tirifto> Retains the shape of the tilde, looks easily discernible from the concatenation operator on my screen, and shows a direction, which might be nice as smartmatch is not commutative. What do you think? :o

[21:17] <MitarashiDango[m> patrickb: All good, thanks!

[21:17] *** bigdata joined
[21:18] *** bigdata left
[21:38] *** jpn left
[21:40] <discord-raku-bot> <Anton Antonov> @Tirifto So, we can use two waves?  ‚Üù‚Üù

[21:43] <Tirifto> @Anton Antonov, wouldn‚Äôt a single one suffice? :o

[21:45] <lizmat> I think we should be very careful with adding unicode ops that could also be added in module space

[21:46] <lizmat> m: constant &infix:<‚Üù> = &infix:<~~>; say "foo" ‚Üù / o /

[21:46] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´ÔΩ¢oÔΩ£‚ê§¬ª

[21:48] <lizmat> also: almost there:

[21:48] <lizmat> m: say ¬π/‚ÇÇ

[21:48] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´0.5‚ê§¬ª

[21:48] <lizmat> m: say ¬π¬π/‚ÇÇ

[21:48] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´0.5‚ê§¬ª

[21:48] <lizmat> guess that needs a little work

[21:48] <discord-raku-bot> <Anton Antonov> @Tirifto "wouldn‚Äôt a single one suffice? :o" -- I don't know. Some people do prefer using "%%" instead of "%" when defining list-of-things regexes. (By analogy, same with "‚Üù" ...)

[21:48] <lizmat> m: say ¬π

[21:48] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´1‚ê§¬ª

[21:49] <lizmat> m: say ¬π¬π

[21:49] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´1‚ê§¬ª

[21:51] <Voldenet> having unicode inside files is a code smell

[21:51] <discord-raku-bot> <Anton Antonov> @lizmat Is this expected to work: ‚àö¬π¬π/‚ÇÇ ?

[21:52] <lizmat> not at the moment

[21:52] <discord-raku-bot> <Anton Antonov> üò≠

[21:53] <lizmat> m: sub prefix:<‚àö>($a) { sqrt $a }; say ‚àö16

[21:53] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´4‚ê§¬ª

[21:53] <Voldenet> m: sub prefix:<‚àö>($a) { sqrt $a }; say ‚àö11/2

[21:53] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´1.6583123951777‚ê§¬ª

[21:53] <Voldenet> that's close enough ;)

[21:54] <Tirifto> @Anton Antonov, oh, you meant a double variant in addition to the single one? Then I suppose so, but I‚Äôm not sure what it might be used for. :o

[21:55] <discord-raku-bot> <Anton Antonov> Well, we have to define also ''‚àõ" and "‚àú"...

[21:56] <Voldenet> m: say sqrt 11/2

[21:56] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´2.345207879911715‚ê§¬ª

[21:56] <Voldenet> ngl, sqrt is more readable and works

[21:57] <Tirifto> lizmat, how does one identify operators likely to be used in module space? Isn‚Äôt that mostly unpredictable? I can see symbols with established meaning used because they have an established meaning, and symbols without it used because they don‚Äôt (so they can work for whatever).

[21:57] <Voldenet> re ‚àõ, it'd be difficult to explain difference between ‚àö and that

[21:58] <discord-raku-bot> <Anton Antonov> @Voldenet Agreed. (But I am spoiled from using Mathematica too much...)

[21:58] <lizmat> anything that's an prefix, infix, postfix, postcircumfix and even circumfix, can be added

[21:58] <lizmat> ->  =>  <-> are more syntaxy things

[22:00] <Voldenet> (sqrt returns one number, roots(*, 3) returns complex numbers)

[22:02] <discord-raku-bot> <Anton Antonov> @Voldenet Thanks! (I was wondering does something like roots  exist in Raku...)

[22:03] <Voldenet> It does and in fact it has quite confusing relation to sqrt

[22:03] <Voldenet> m: say sqrt(9), roots(9, 2)

[22:03] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´3(3+0i -3+3.6739403974420594e-16i)‚ê§¬ª

[22:03] <discord-raku-bot> <Anton Antonov> @Voldenet üôÇ You start to sound like @nemokosch ...

[22:04] <Voldenet>  :D

[22:05] <Voldenet> I remember answering that question about roots here, so it's not that synthetical problem though

[22:06] <discord-raku-bot> <Anton Antonov> @Voldenet It is good to know. When I get back to my Mathematica-to-Raku translator I will use roots.

[22:06] <discord-raku-bot> <Anton Antonov> How does Raku finds suggestions for misspellings during compile / run time? Is "Text::Diff::Sift4" used?

[22:07] <lizmat> I think StrDistance is used

[22:07] <discord-raku-bot> <nemokosch> 3+0i and -3+3.6739403974420594e-16i sum to 0, right?

[22:07] <discord-raku-bot> <nemokosch> lol

[22:07] <lizmat> https://docs.raku.org/type/StrDistance

[22:08] <lizmat> sleep&

[22:08] <Tirifto> good-night&

[22:08] *** sena_kun left
[22:09] <Voldenet> no, they sum to 0+3.6739403974420594e-16i

[22:09] <Voldenet> the answer as misleading as technically correct

[22:50] <discord-raku-bot> <Anton Antonov> Where the dead links of docs.raku.org are supposed to be reported?

[22:51] <Voldenet> perhaps https://github.com/Raku/doc

[22:51] <discord-raku-bot> <Anton Antonov> dead link here in https://docs.raku.org/type/StrDistance.html -- "string transformation",  https://docs.raku.org/syntax/tr$SOLIDUS$SOLIDUS$SOLIDUS

[22:52] <discord-raku-bot> <Anton Antonov> @Voldenet -- Yeah, sure.

[22:52] <Voldenet> btw, on the topic of roots, maybe tau constant could be used here: https://github.com/rakudo/rakudo/blob/main/src/core.c/Complex.pm6#L141

[22:55] <discord-raku-bot> <Anton Antonov> ü§î

[22:55] <Voldenet> in fact maybe doing division before sum would increase precision

[22:55] <Voldenet> not by much

[22:59] <discord-raku-bot> <nemokosch> why are there still $SOLIDUS URL's...

[23:00] <discord-raku-bot> <nemokosch> anyway, I think it's bizarre that the positive root is accurate while the negative root which should really be the positive root times -1, is inaccurate

[23:01] <discord-raku-bot> <nemokosch> it would actually make more logical sense if both had some representational error

[23:02] *** jpn joined
[23:03] <Voldenet> m: say (^2).map({ Complex.new(3 * cos($_ * tau), 3 * sin($_ * tau)) })

[23:03] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´(3+0i 3-7.347880794884119e-16i)‚ê§¬ª

[23:04] <Voldenet> when you know that one of them is `0 * tau ` and second is `1 * tau`, it becomes more obvious that first root will be the most accurate

[23:05] <Voldenet> eh, it should be .5 * tau

[23:05] <Voldenet> m: say (^2).map({ Complex.new(3 * cos($_ * tau), 3 * sin($_ / $_ * tau)) })

[23:05] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´(3+NaN\i 3-7.347880794884119e-16i)‚ê§¬ª

[23:06] <Voldenet> m: say (^2).map({ Complex.new(3 * cos($_ / 2 * tau), 3 * sin($_ / 2 * tau)) })

[23:06] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´(3+0i -3+3.6739403974420594e-16i)‚ê§¬ª

[23:08] *** rf left
[23:39] <Voldenet> ‚Ä¶I do wonder if using some identities would yield higher precision in this case

[23:39] <Voldenet> m: sub cos_ab($k, $a, $b) { "$k * cos($a) * cos($b) - $k * sin($a) * sin($b)" }; sub sin_ab($k, $a, $b) { "$k * sin($a) * cos($b) + $k * cos($a) * sin($b)" }; my $v = <$mag $angle/$n $_/$n*tau>; say "Complex.new({cos_ab(|$v)} , {sin_ab(|$v)})"

[23:39] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´Complex.new($mag * cos($angle/$n) * cos($_/$n*tau) - $mag * sin($angle/$n) * sin($_/$n*tau) , $mag * sin($angle/$n) * cos($_/$n*tau) + $mag * cos($angle/$n) * sin($_/$n*tau))‚ê§¬ª

[23:39] <Voldenet> m: my ($mag, $angle) = 3.Complex.polar; my Int $n = 2; Complex.new($mag * cos($angle/$n) * cos($_/$n*tau) - $mag * sin($angle/$n) * sin($_/$n*tau) , $mag * sin($angle/$n) * cos($_/$n*tau) + $mag * cos($angle/$n) * sin($_/$n*tau))

[23:39] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of uninitialized value of type Any in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of uninitialized value of type Any in numeric context‚Ä¶¬ª

[23:40] <Voldenet> m: my ($mag, $angle) = 3.Complex.polar; my Int $n = 2; say (^$n).map({ Complex.new($mag * cos($angle/$n) * cos($_/$n*tau) - $mag * sin($angle/$n) * sin($_/$n*tau) , $mag * sin($angle/$n) * cos($_/$n*tau) + $mag * cos($angle/$n) * sin($_/$n*tau)) });

[23:40] <camelia> rakudo-moar 2e53c8723: OUTPUT: ¬´(3+0i -3+3.6739403974420594e-16i)‚ê§¬ª

[23:44] <Voldenet> maybe the output is exactly the same, but at least it's difficult to maintain and slow

