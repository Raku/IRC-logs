[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:36] *** _________ left
[00:37] <Voldenet> m:  Buf.new(255).decode.say

[00:37] <camelia> rakudo-moar 34c3e7a8b: OUTPUT: ¬´Malformed UTF-8 at line 1 col 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:43] *** _________ joined
[00:45] <Voldenet> Xliff: you can easily trigger malformed utf-8 sequence by using `255` as first byte with no following bytes ‚Äì it's fatal because such sequence is not valid utf8 and probably some different encoding

[00:45] <tellable6> Voldenet, I'll pass your message to Xliff

[00:48] *** Sgeo_ joined
[00:50] <Voldenet> m:  Buf.new(255).decode("utf8-c8").say

[00:50] <camelia> rakudo-moar 34c3e7a8b: OUTPUT: ¬´ÙèøΩxFF‚ê§¬ª

[00:50] <Voldenet> ^ it's also possible to say "yeah but it's valid utf8, trust me" and get some silly bytes out of it

[00:51] *** Sgeo left
[01:41] *** derpydoo joined
[01:45] *** jpn joined
[01:49] *** jpn left
[01:59] <guifa> leont: wait for my TPRC talk? :-)

[02:00] <guifa> um Xliff: example?  I think I understand but not 100% sure

[02:17] *** andydude joined
[03:30] *** jpn joined
[03:34] *** jpn left
[04:19] *** ab5tract joined
[04:25] *** rf left
[04:42] *** ab5tract left
[04:51] *** zara joined
[05:04] *** ab5tract joined
[05:06] *** zara left
[05:15] *** swaggboi left
[05:16] *** fk96 joined
[05:22] *** ab5tract left
[05:23] *** fk96 left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:16] *** _________ left
[06:16] *** _________ joined
[06:20] *** squashable6 left
[06:20] *** squashable6 joined
[06:52] *** squashable6 left
[06:53] *** squashable6 joined
[06:54] *** andydude left
[07:09] *** jpn joined
[07:12] *** dakkar joined
[07:15] *** jpn left
[07:18] *** silug left
[07:20] *** silug joined
[07:25] *** andydude joined
[07:35] *** sena_kun joined
[07:44] *** Manifest0 joined
[07:57] *** zara joined
[08:11] *** Sgeo_ left
[08:19] *** zara left
[08:41] *** jpn joined
[09:28] *** andydude left
[09:30] *** sena_kun left
[10:31] *** derpydoo left
[11:31] *** evalable6 left
[11:31] *** linkable6 left
[11:31] *** sourceable6 left
[11:31] *** benchable6 left
[11:31] *** releasable6 left
[11:31] *** squashable6 left
[11:31] *** bisectable6 left
[11:31] *** quotable6 left
[11:31] *** committable6 left
[11:31] *** tellable6 left
[11:31] *** notable6 left
[11:31] *** unicodable6 left
[11:31] *** nativecallable6 left
[11:31] *** shareable6 left
[11:31] *** coverable6 left
[11:31] *** greppable6 left
[11:31] *** nativecallable6 joined
[11:31] *** unicodable6 joined
[11:31] *** benchable6 joined
[11:32] *** linkable6 joined
[11:32] *** shareable6 joined
[11:32] *** releasable6 joined
[11:32] *** sourceable6 joined
[11:33] *** greppable6 joined
[11:33] *** squashable6 joined
[11:33] *** evalable6 joined
[11:33] *** tellable6 joined
[11:33] *** committable6 joined
[11:33] *** bisectable6 joined
[11:34] *** coverable6 joined
[11:34] *** quotable6 joined
[11:34] *** notable6 joined
[11:44] *** grondilu joined
[11:44] <grondilu> Hi all

[11:44] <grondilu> I have a sorted list of words.  I would like to compress them with a bash brace expansion syntax

[11:45] <grondilu> I suspect it'd be easy to do in raku, but I'm too lazy to try it hard

[11:45] <grondilu> maybe one of you want to suggest a solution

[11:46] <grondilu> the bash brace expansion syntax is what turns a{b,c,d} int ab ac ad

[11:47] <grondilu> so I'd like to turn say <abc abd ef eg> into "ab{c,d} e{f,g}"

[11:49] <grondilu> braces can be nested btw

[11:50] <grondilu> maybe I need a Trie

[11:53] *** discord-raku-bot left
[11:54] *** discord-raku-bot joined
[11:55] * grondilu installs the 'Trie' module

[12:00] *** reportable6 left
[12:02] <discord-raku-bot> <Anton Antonov> @grondilu I have been planning for some time to experiment which trie implementation is the fastest (over what data.)

[12:03] *** reportable6 joined
[12:04] <grondilu> Well, I can say the Trie module is not great.  It only makes single character keys, for a start.  And only ascii.

[12:05] <discord-raku-bot> <Anton Antonov> @grondilu  ‚é°I'd like to turn say <abc abd ef eg> into "ab{c,d} e{f,g}‚é¶ -- Speaking for "ML::TriesWithFrequencies" only : there is visualization routine/method and XML, WL, and JSON representation methods that can be adapted for this.

[12:05] <Voldenet> grondilu: String::Utils has this

[12:05] <Voldenet> say root <abcd abce abde>;

[12:05] <Voldenet> "ab"

[12:06] <grondilu> ^that seems useful

[12:07] <discord-raku-bot> <Anton Antonov> @grondilu  "It only makes single character keys,[..]" -- Well, "ML::TriesWithFrequencies" has shrinking function. (A fundamental operation for tries I would say. It is literally in the name.)

[12:07] <grondilu> what does ML stand for here?

[12:07] <Voldenet> some tries module would be more complete solution, since `root` pretty much only finds roots

[12:08] <discord-raku-bot> <Anton Antonov> @grondilu ML == Machine Learning, (Please, do catch up with the current trends...)

[12:09] <grondilu> noted

[12:09] <discord-raku-bot> <Anton Antonov> @grondilu The third visualized trie here shows shrinking: https://raku.land/zef:antononcube/ML::TriesWithFrequencies

[12:11] <discord-raku-bot> <Anton Antonov> @grondilu  "ML" is also, sort of, a warning -- I see that module as data mining or ML tool, not so much as "just a data  structure" tool.

[12:13] <grondilu> that API is kind of confusing.  Why a 'trie-say' function instead of defining a gist method?

[12:15] <discord-raku-bot> <Anton Antonov> @grondilu trie-say  is for consistency with the other trie packages I made. And, of course, there is gist method.

[12:15] <grondilu> ok

[12:16] <grondilu> so I bet there is a recursive way to create the string I want from a shrinked trie.

[12:18] <discord-raku-bot> <Anton Antonov> @grondilu Yes, there is an universal traversal function. But you can probably just use the keys of the Hash-representation.

[12:18] <discord-raku-bot> <Anton Antonov> @grondilu For example,  trie-create-by-split(<abc abd ef eg>).shrink.form;

[12:20] <discord-raku-bot> <Anton Antonov> @grondilu The line above is a visualization warm up only.

[12:20] <grondilu> TRIEVALUE fields are the frequencies, right?

[12:21] <discord-raku-bot> <Anton Antonov> @grondilu This closer to what you want: say trie-create-by-split(<abc abd ef eg>).shrink.words;

[12:22] <discord-raku-bot> <Anton Antonov> @grondilu Returns  ((ab d) (ab c) (e f) (e g)) .

[12:22] <discord-raku-bot> <Anton Antonov> @grondilu Yes, "TRIEVALUE'" is for frequencies and probabilities.

[12:27] <Voldenet> btw, a lot of complexity in JSON/XML of that lib could be reduced by using iterators

[12:27] <discord-raku-bot> <Anton Antonov> @Voldenet Interesting! (But I am not sure what you mean... üôÇ )

[12:28] <Voldenet> m: sub visit-leafs($tree) { gather for $tree.kv -> $k, $v { if $v ~~ Rat { ($k, $v).take }; if $v ~~ Hash { ($k ~ $_[0], $_[1]).take for visit-leafs($v) } } }; say visit-leafs({ a => .5, b => { c => .3, d => .2 }})

[12:28] <camelia> rakudo-moar 826eca3f8: OUTPUT: ¬´((bc 0.3) (bd 0.2) (a 0.5))‚ê§¬ª

[12:28] <Voldenet> took a while to write it in irc prompt

[12:28] <Voldenet> `sub visit-leafs($tree) { gather for $tree.kv -> $k, $v { if $v ~~ Rat { ($k, $v).take }; if $v ~~ Hash { ($k ~ $_[0], $_[1]).take for visit-leafs($v) } } }; say visit-leafs({ a => .5, b => { c => .3, d => .2 }})`

[12:28] <Voldenet> for discord readability

[12:29] <Voldenet> ofc, that `($k, $v)` could become a class with properties like .depth

[12:30] <Voldenet> it mostly abstracts away the recursion

[12:32] <discord-raku-bot> <Anton Antonov> Ok, I will experiment with that code.

[12:48] *** peder left
[12:51] <discord-raku-bot> <Nemokosch> I brought a fun issue for today, not sure if I have this recorded anywhere

[12:53] <discord-raku-bot> <Anton Antonov> @Nemokosch Where?

[12:54] <discord-raku-bot> <Anton Antonov> @Voldenet "it mostly abstracts away the recursion" -- So, with that code, I should expect faster conversions to JSON or XML with smaller memory imprint? (I do occasionally produce large tries that have to be represented in JSON.)

[12:57] <Voldenet> I'm not sure about faster, but it would not hold in memory anything but path taken

[12:57] *** kybr left
[12:58] *** kybr joined
[13:00] <Voldenet> theoretically it could be faster for large tries

[13:01] <Voldenet> i'm not sure how JSON::Fast handles iterators tho

[13:05] <discord-raku-bot> <Anton Antonov> @Voldenet Ok, good to know. I tried your code above -- it seems "bureaucratic" enough. Its full inclusion in the Trieish class, though, does not produce more concise code.

[13:07] <Voldenet> it isn't that it will make the whole codebase shorter

[13:07] <Voldenet> just that it will make both serialization and traversal shorter, but longer if you combine them\

[13:07] <Voldenet> but traversal could be then presented as separate method

[13:08] <Voldenet> using visitor pattern here would be even more bureaucratic :D

[13:13] <discord-raku-bot> <Anton Antonov> @Voldenet 1) Your It is instructive. 2) And, yes, there is trie traversal class in "ML::TriesWithFrequencies", I will consider using that idea there.

[13:17] *** TieUpYourCamel joined
[13:20] *** peder joined
[13:27] <Voldenet> I see that TrieTraverse is enormously similar

[13:32] <discord-raku-bot> <Nemokosch> @Anton Antonov so here is the story

[13:32] <discord-raku-bot> <Nemokosch> You have a set of integers, let's say

[13:33] <discord-raku-bot> <Nemokosch> you want to check values against that set - values that you receive as command-line arguments

[13:33] <discord-raku-bot> <Nemokosch> you notice that you never find the value in the set, even if you are certain that it exists

[13:49] <discord-raku-bot> <Nemokosch> it turns out that the input you get is not an integer - but it is an integer at the same time, from a different perspective. let me explain

[13:50] <discord-raku-bot> <Nemokosch> What you get passed to MAIN is an allomorph, something that can have different type aspects. I have a vague idea why somebody thought this was a good idea but wouldn't dare to say for sure.

[13:51] <discord-raku-bot> <Nemokosch> so here you have, say, an IntStr with 5, rather than an Int with 5 so it hashes differently

[13:52] <discord-raku-bot> <Nemokosch> the real problem is that you can declare your variables as Int $foo as much as you want, it won't help because IntStr satisfies that type constraint

[13:53] <discord-raku-bot> <Nemokosch> and from this perspective, it's funny that you can do $foo.Int explicitly and that is going to help

[13:53] <discord-raku-bot> <Nemokosch> if $foo ~~ Int, it seems reasonable to expect that $foo.Int is an identity

[13:54] <discord-raku-bot> <Nemokosch> however - fortunately, in this case - that's not necessarily true, as demonstrated

[13:58] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/05/22/2023-21-maxcinating/

[14:05] <discord-raku-bot> <Nemokosch> is The Wibble is basically The Onion but for nerds?

[14:07] <Voldenet> I get it that raku is mindblowingly difficult, but what are the downsides? :>

[14:08] <lizmat> I'm not sure... first time I heard about it

[14:08] *** silug6 joined
[14:10] *** silug left
[14:10] *** silug6 is now known as silug

[14:11] <discord-raku-bot> <Anton Antonov> @Voldenet Mostly: 1) Newcomers do not see -- or get rewarded -- of their knowledge of other "standard" languages.  2) Newcomers do not think of feel that their knowledge of Raku is going to transfer to other programming languages. 3) The average age of the Raku practitioners is 56.

[14:11] <tonyo> not sure that's entirely accurate

[14:11] <tonyo> m: multi MAIN(Int() $d = "5") { say $d ~~ IntStr; say $d ~~ Int; };

[14:11] <camelia> rakudo-moar 826eca3f8: OUTPUT: ¬´False‚ê§True‚ê§¬ª

[14:13] <discord-raku-bot> <Anton Antonov> @Voldenet At this point I have a extensive list of why not to use Raku. (And similar lists for Python, R, and WL.)

[14:13] <discord-raku-bot> <Nemokosch> "5" is not IntStr though

[14:13] <tonyo> looks like an Int okay

[14:13] <discord-raku-bot> <Nemokosch> <5> would be

[14:13] <Voldenet> m: multi MAIN(Int() $d = <5>) { say $d ~~ IntStr; say $d ~~ Int; };

[14:13] <camelia> rakudo-moar 826eca3f8: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[14:13] <Voldenet> valid point

[14:13] *** swaggboi joined
[14:14] <tonyo> anton would love to see the list for python too

[14:15] <Voldenet> I would enumerate my list of reasons to dislike python, but I can't fit it in one line

[14:15] <discord-raku-bot> <Anton Antonov> @tonyo Dully noted. üôÇ Here is a warm-up: https://pythonforprediction.wordpress.com/2022/09/18/breakdown-of-python-people-and-projects/

[14:18] <Voldenet> @Anton Antonov: it's pretty funny that people see language's complexity as a downside while it obviously means that language has tons of built-in features

[14:19] <tonyo> i'm not a big fan of python, just curious what most people's gripes are with different languages

[14:19] <tonyo> they all have warts, some more than others

[14:20] <discord-raku-bot> <Anton Antonov> @Voldenet Yeah. At this point, a primary reason for me to learn a new programming language is to change my way of thinking (about programming.) Raku has been good about that in the last 4-5 years since I started using it.

[14:21] <Voldenet> ironically, I dislike python mostly because it's simple

[14:21] <discord-raku-bot> <Nemokosch> Voldenet: I think there can be several reasons - the language might be not only harder to learn but also implement or just read and reason about

[14:21] <discord-raku-bot> <Nemokosch> ... or to get right with the design

[14:23] <discord-raku-bot> <Nemokosch> if you need 50% complexity overhead for, say, 20% efficiency gain, it's almost surely not worth it. Of course these are arbitrary numbers, it's more about the principle.

[14:24] <discord-raku-bot> <Anton Antonov> @Voldenet Ahh... I thought Python is simple and stupid, and that those its biggest selling points. I writing (and documenting) a bunch of Python packages I say now that Python is "deceptively simplistic."

[14:24] <discord-raku-bot> <Nemokosch> and for Python, I frankly can't recall the sort of "simplicity" that forces you to write boilerplate. Of course, if you need a glue language for quick data processing or prototyping, it's not remotely close to Raku

[14:24] <discord-raku-bot> <Nemokosch> but for anything more stationary, I don't think the difference would be big, or even be "in the right direction"

[14:24] <Voldenet> the only feature I like in python is coroutines

[14:24] *** Sgeo joined
[14:25] <Voldenet> beating java in this game is difficult

[14:26] <tonyo> maybe, elsewhere it isn't difficult

[14:27] <tonyo> learning haskell changed a lot of the way i think about programming

[14:28] <discord-raku-bot> <Nemokosch> is "coroutines" a fancy name for async/await stuff?

[14:30] <Voldenet> Sort of - async/await is hiding the complexity

[14:30] <Voldenet> coroutines are underlying concept

[14:33] <discord-raku-bot> <Anton Antonov> @tonyo Every Haskell programmer I met while working at Wolfram Research was way too smug about functional programming with Haskell. (And they were all from Western Europe, BTW.)

[14:35] <discord-raku-bot> <Nemokosch> I don't know about that but async-await is quite okay in the Node world

[14:40] <Voldenet> it's amazing how in js every respected library like jquery/underscore used to ship their own promises implementation, because there was no builtin

[14:41] <Voldenet> despite widespread adoption

[14:44] <Voldenet> I'm not sure if underscore did ship with one

[14:50] <tonyo> anton yea a lot of them are, i never got into it professionally but the way things fit together is a huge paradigm shift

[14:53] <discord-raku-bot> <Anton Antonov> @tonyo Interestingly, I got (somewhat) familiar with Haskell in order to write functional parsers libraries in other languages. Also, reading articles by Wadler on monadic programming.

[14:54] <tonyo> fwiw we got into it at ziprecruiter (a perl shop), and mjd was helping us navigate some of the ideas so it was more of a fun thing.  i ended up writing a web crawler and json parser in it

[14:54] <tonyo> ah nice, i was listening to a lot of bartosz

[14:55] <tonyo> i find myself getting frustrated by the type hinting in python as a result of that + writing in go for a while (which also has a terrible type system)

[14:57] <discord-raku-bot> <Anton Antonov> @tonyo So, did you learn/used Raku while working at crossrecruiter?

[14:58] <tonyo> i got into raku as a result of being ostricized from nodejs (for criticising the callback pattern before it blew up), before that i was contributing to node core and writing C for time sensitive data parsing/analysis

[15:01] *** rf joined
[15:01] <rf> Morning folks

[15:13] *** grondilu left
[15:18] <discord-raku-bot> <Nemokosch> isn't underscore called lodash?

[15:18] <discord-raku-bot> <Nemokosch> the library, at least

[15:24] <tonyo> wUnderbar would've been a cool name too

[15:29] <sjn> hey, quick question; what's the schedule for the next language spec release? Docs website mentions 6.c being the current one, the executable says 6.d, and I'm not sure if 6.e is a work in progress...

[15:32] <discord-raku-bot> <Anton Antonov> @tonyo So, not cross-recruiting related, but blaspheming (or crucifixion) related.

[15:32] <discord-raku-bot> <Anton Antonov> I think, Raku should have a certain crucifixion routine.

[15:32] <tonyo> deletes improperly typed code?

[15:32] <tonyo> use Zealousness;

[15:38] <discord-raku-bot> <Anton Antonov> @tonyo Sounds good. üôÇ

[16:06] *** JsExplorerNeil joined
[16:35] *** dakkar left
[17:08] *** jpn left
[17:40] *** JsExplorerNeil left
[17:45] *** sena_kun joined
[17:52] *** squashable6 left
[17:54] *** squashable6 joined
[18:00] *** reportable6 left
[18:01] <discord-raku-bot> <librasteve> I suspect that IntStr is the result of the chain (i) perl is untyped and can freely mix Int and Str, (ii) we want that flexibility in raku so that eg. '1' can be entered on the command line and later consumed as either a Str or an Int, (iii) but we don't want to lose this flexibility when we layer in some types

[18:02] *** reportable6 joined
[18:12] <lizmat> librasteve yup

[18:16] <discord-raku-bot> <librasteve> well I thought I'd check out the design docs (reading docs is not my usual first base ;-) ) https://design.raku.org/S02.html#Allomorphic_value_semantics

[18:17] <lizmat> and since about a year or so, all allomorphs can be typechecked with the Allomorph class

[18:17] <lizmat> m: dd <42>.^mro

[18:17] <camelia> rakudo-moar 826eca3f8: OUTPUT: ¬´(IntStr, Allomorph, Str, Int, Cool, Any, Mu)‚ê§¬ª

[18:19] <discord-raku-bot> <librasteve> two aspects I had not fully understood (i) <1 1/2 6.02e23 1+2i string> (or any list of words) is a really cool tool and (ii) one purpose is to retain the original text number definition in the case of over/underflow

[18:19] <discord-raku-bot> <librasteve> m: <1 1/2 6.02e23 1+2i string>.map(*.^name).say

[18:19] <discord-raku-bot> <Raku eval>  (IntStr RatStr NumStr ComplexStr Str) 

[18:20] <discord-raku-bot> <librasteve> m: <1 1/2 6.02e23 1+2i string>.are.say

[18:20] <discord-raku-bot> <Raku eval>  (Str) 

[18:21] <discord-raku-bot> <librasteve> m: <1 1/2 6.02e23 1+2i>.are.say

[18:21] <discord-raku-bot> <Raku eval>  (Allomorph) 

[18:55] <leont> Does anyone know an example of a module exporting the tags of another module?

[18:58] <lizmat> perhaps P5builtins can be of inspiration?

[19:02] <leont> That doesn't do tags, only positional arguments.

[19:02] <leont> I don't really understand why these are two entirely different systems

[19:02] <leont> It's genuinely confusing

[19:03] <ugexe> leont: maybe https://github.com/LLFourn/p6-CompUnit-Util#re-exporting ?

[19:03] <lizmat> well, aren't the nameds in EXPORT just a way to specify an EXPORT::MODULE::namespace ?

[19:07] <leont> lizmat: I'm not sure that parses

[19:18] <leont> Apparently, ¬´package EXPORT::foo {}; %(EXPORT::foo::) = Other::Package::EXPORT::functions::¬ª seems to do the trick

[19:29] *** jpn joined
[19:30] <rf> tonyo: Are you working on multiple backends for HB?

[19:31] <tonyo> not at the moment

[19:31] <rf> Kk, just wondering :)

[19:31] <tonyo> it will probably be a another few weeks to months, kind of backed up

[19:31] <rf> Yeah no worries

[19:32] <rf> I have an idea for a backend but i'll wait till your done, pretty backed up here too

[19:38] <tonyo> if you get to it first it wouldn't hurt my feelings, i'm not champing at the bit for it yet

[19:38] <tonyo> looks fairly straight forward though

[19:39] <discord-raku-bot> <Anton Antonov> @rf Try to hurt the feelings of @tonyo with comments about Haskell. (I tried earlier, with no indication I succeeded.)

[19:50] <tonyo> i only have one feeling hidden below a layer of abstraction

[19:54] <discord-raku-bot> <Anton Antonov> I think fairies (e.g. Tinker Bell) are like that ‚Äî they can ‚Äúhold‚Äù only one feeling.

[19:58] <discord-raku-bot> <Nemokosch> For IntStr type of things: to a large extent, the strong operators (+, ~ sort of stuff) can provide that without introducing a new type so I suspect the whole thing was in order to emulate "weak typing" with methods

[19:59] <tonyo> doesn't it enable those through that type?

[19:59] <tonyo> m: ay "A".Str + "B".Str

[19:59] <camelia> rakudo-moar c33c5538b: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    ay used at line 1‚ê§‚ê§¬ª

[20:01] <rf> I like Haskell

[20:03] <tonyo> m: say "A".Str + "B".Str

[20:03] <camelia> rakudo-moar c33c5538b: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèA' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:09] *** dvergin joined
[20:09] <discord-raku-bot> <Nemokosch> I mean if you have an IntStr, you have something that has the methods of an int and the methods of a string

[20:10] *** dvergin left
[20:13] *** jpn left
[20:20] <discord-raku-bot> <Anton Antonov> @rf Yeah, but your way of liking Haskell might be radically different of the way @tonyo likes or hates Haskell. (I am not sure what tonyo's one feeling is on / about.)

[20:21] <tonyo> i usually use it for deciding which snack i'm going to eat last

[20:24] <rf> I use it to feel like I have a slight grasp on category theory (I don't)

[20:25] <rf> Also tonyo, did you find out why siege was dying?

[20:25] <rf> Against HB

[20:37] *** teatime joined
[21:00] *** jpn joined
[21:04] *** jpn left
[21:07] *** teatime left
[21:08] *** teatime joined
[21:35] *** swaggboi left
[21:37] *** bluekai joined
[21:40] *** bluekai left
[21:47] *** swaggboi joined
[21:49] <gfldex> tonyo: I like Message.defaults in Mailgun and think I can turn that into a trait.

[21:50] <tonyo> gfldex++

[22:01] <guifa> Nemokosch: I don't think it was so much weak typing with methods, as weak typing for when you do a quoted string list (akin to perl's @foo = qw(a 13 b c 93) ) so that they always pass the string test when passing to subs

[22:02] <tellable6> guifa, I'll pass your message to Nemokosch

[22:04] <discord-raku-bot> <Nemokosch> the side effects of that are quite a high price to pay, though. If that's the intention, it would be much lower cost to simply use a coercing type annotation

[22:12] *** sena_kun left
[23:05] <tonyo> gfldex: are you using that mailgun module already?

[23:12] *** linkable6 left
[23:12] *** evalable6 left
[23:14] *** evalable6 joined
[23:14] *** linkable6 joined
[23:56] <gfldex> tonyo: no, just reading the sources to find nice things. :)

