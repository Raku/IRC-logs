[00:01] *** reportable6 left
[00:04] *** reportable6 joined
[00:15] *** lichtkind left
[00:24] *** jpn joined
[00:30] *** jpn left
[01:16] *** guifa joined
[01:33] * guifa has started work on the XML module
[01:33] <guifa> step one: translate from ancient Raku to modern Raku syntax
[01:33] <guifa> lol
[01:36] <guifa>   method reparent (::(q<XML::Element>) $parent)  <--- like really?
[01:45] *** freeside left
[01:46] <pingu> anyone know how I can just do print($T[$TN] ,$TN, "\n"); instead of doing $T[0..2] https://pastebin.com/U8B3QS75
[01:51] *** Manifest0 left
[01:51] *** freeside joined
[01:52] <guifa> my $T = ('a','b','c'); say "{.head} {.tail}" for @$T Z ^($T);
[01:52] <evalable6> guifa, rakudo-moar e45436ef0: OUTPUT: ¬´a 0‚ê§b 1‚ê§c 2‚ê§¬ª
[01:53] <guifa> Or actually maybe I don't entirely get what you're trying to do 
[01:53] <discord-raku-bot> <Nemokosch> guifa++
[01:54] <guifa> Nemokosch: that re my answer for pingu or for the XML module?
[01:54] <tellable6> guifa, I'll pass your message to Nemokosch
[01:54] <pingu> yeah I meant by actually using my function
[01:55] <pingu> it should print: a 0\nb 1\nc 2\n
[01:56] <guifa> fun($T[$TN], $TN) would let you do print($t, " ", $tn, "\n")
[01:56] <guifa> but FYI you can simply `print($t, " ", $tn, "\n")` to `say "$t $tn"`
[01:57] <guifa> say does print, but with a newline, and variables in double-quoted strings are interpolated
[01:59] <discord-raku-bot> <Nemokosch> is that not C-like enough? üòÑ
[02:00] <pingu> well if I make it fun($t[$tn] , $tn) I get : Variable '$tn' is not declared.
[02:00] <discord-raku-bot> <Nemokosch> guifa: I meant the XML module
[02:00] <discord-raku-bot> <Nemokosch> I did some very basic maintenance on it but I definitely don't mind if it can be taken off the todo list üôÇ
[02:01] <pingu> just doin prin $t $tn is printing a b c 0\na b c 1\na b c 2\n
[02:01] <guifa> no, I didn't mean make the signature fun($t[$tn], $tn), I mean when you call it in the loop
[02:02] <pingu> ok 2 mins
[02:03] <pingu> this works now but my main code isnt working right
[02:03] <pingu> the pastebin was just a test
[02:03] <guifa> (it might help here if you use very different variable names to avoid confusion here, e.g.    sub fun($a, $b) {¬†‚Ä¶¬†}; my $x = ‚Ä¶; loop (my $y = 0‚Ä¶) {¬†fun $x[$y], $y } 
[02:03] <discord-raku-bot> <Nemokosch> not gonna lie, most of the time, I'm clueless what you are doing... and I'd like to think this doesn't often happen to me in the chat
[02:04] <pingu> im learning raku by doing stuff and by also asking here
[02:04] <pingu> since thats the only way to learn raku it seems
[02:04] <guifa> Nemokosch: the XML module was clearly designed waaaaaaaaaaay back (it was very likely one of the very first modules ever written for Raku)
[02:04] <tellable6> guifa, I'll pass your message to Nemokosch
[02:04] <pingu> but I dont ask for entire piles of code cause thats cheating
[02:05] <guifa> I posted a comment on one of the github issues, but there's a lot of reasons it's slow but I think I can speed it up at least a little bit
[02:05] <pingu> I do try stuff to try and fix my errors , and thatvincludes thinking a lot
[02:05] <pingu> so yeah I dont just jump on irc for every error I get lol
[02:06] <discord-raku-bot> <Nemokosch> pingu: I'm not saying you should. But sometimes it's really hard to figure out what your code is even supposed to do. There isn't a high level description of what you want to get, the variable names aren't descriptive and the whole thing is unlike any Raku you would see in any kind of tutorial
[02:07] <discord-raku-bot> <Nemokosch> it reminds me of my journey in Hungarian-learning communities, when somebody would just randomly permutate the words and ask if the word order is alright
[02:07] <pingu> they are not descriptive yes, this was just a small side program so I could try and figure out how to get the main program working
[02:07] <pingu> the main program has descriptive naming
[02:07] <discord-raku-bot> <Nemokosch> (no joke, that was a fairly common learning method of people apparently, and a hell to deal with)
[02:07] <pingu> hmm
[02:08] <discord-raku-bot> <Nemokosch> well, you could still say what you are trying to achieve. It doesn't have to mean that you get a whole different piece of code back
[02:11] <pingu> well, im doing as I have been ever since I joined this irc channel practically,
[02:11] <pingu> im trying to tokenize a file format called LDRAW
[02:11] <pingu> do processing on the created tokens and then write them back to file 
[02:12] *** jpn joined
[02:12] <pingu> some tokens will be taken from keyboard input , most will be taken from the file
[02:13] <discord-raku-bot> <Nemokosch> do you maybe have an example file you'd want to parse?
[02:13] <pingu> sure
[02:13] <discord-raku-bot> <Nemokosch> guifa: Timothy Totten legacy... tbh Template6 isn't even that bad, as much as I can tell. It's just hacky.
[02:14] <pingu> but the thing is I dont want people to give me code to do the whole thing cause I wont understand it, I  wont be able to therefore edit it and I wont learn anything
[02:14] <discord-raku-bot> <Nemokosch> I think the fundamental API problem is that this eager builder pattern or how to call it
[02:14] <discord-raku-bot> <Nemokosch> creating a new instance for every single operation basically
[02:15] * pingu 1 0 0 0 0 1 0 0 0 1 0 0 0 3024.dat
[02:15] <discord-raku-bot> <Nemokosch> I'd expect serious wins solely by returning the same instance mutated
[02:15] <pingu> 1 0 0 8 0 1 0 0 0 1 0 0 0 3024.dat
[02:15] <pingu> thats it, 2 lines
[02:15] <pingu> its the most basic lego assembly I can think of. 2 stacked 1x1 plates
[02:16] <discord-raku-bot> <Nemokosch> is the 3024.dat weirdness also a part?
[02:17] *** jpn left
[02:18] <pingu> here is my github: https://github.com/Kris-Baker/LEGOscript/tree/main/%5Craku%5C  it works so far but if I remove the literals and replace them with ($format[$token] , $token) it seems to print one param then 2 then 3 then 4 all the way to the end
[02:19] <pingu> yeah 3024 is the part ID for a 1x1 plate
[02:21] <pingu> ill compare my test file to the real project and see if the test file is different
[02:21] <pingu> cause the test works fine
[02:22] <discord-raku-bot> <Nemokosch> are we talking about the parser file?
[02:24] <pingu> yeah 
[02:25] <pingu> https://pastebin.com/vFLmKSd1 https://pastebin.com/ysKKDQnV ok it seems to basically be identical to testing.raku
[02:25] <discord-raku-bot> <Nemokosch> which literals do you want to replace?
[02:25] <pingu> the github one is the one that prints it weird
[02:26] <discord-raku-bot> <Nemokosch> inside the ValidTokenChk?
[02:27] <pingu> for now I just want to print the data back as it is but do the validations
[02:27] <pingu> but yes it will eventually print the data back differently potentially
[02:28] <discord-raku-bot> <Nemokosch> > $format[$token] = sprintf($spec[$token], $line[$token]); ^ is this the line causing the problems?
[02:28] <pingu> perhaps
[02:28] <pingu> with the code I pastebinned I get this crazy output:
[02:29] <pingu> https://pastebin.com/JsVRtLYb
[02:30] <pingu> with the github version It seems to do like a segway printing token 0 then token 0  and token 1 then token 0 and token 1 and token 2 etc
[02:30] <discord-raku-bot> <Nemokosch> $format[$format] seems to be wrong
[02:31] <pingu> so 1 then 1 0 then 1 0 0  then 1 0 0 0 then 1 0 0 0 0  then 1 0 0 0 0 1 etc
[02:32] <pingu> oops typo
[02:32] <pingu> should be $token[$format]
[02:32] <discord-raku-bot> <Nemokosch> and the second argument should be $token, too
[02:32] <pingu> shooopt $format[$token]
[02:32] <discord-raku-bot> <Nemokosch> no, it should be $format[$token]
[02:32] <pingu> yeah
[02:33] <discord-raku-bot> <Nemokosch> see, that's why good variable names are crucial
[02:34] <pingu> ok now I get https://pastebin.com/WKPUU2sc
[02:34] <pingu> so I tried using a range but then here I was given code that didnt need a range
[02:35] <pingu> and testing.raku worked then
[02:35] <pingu> here is testing.raku https://pastebin.com/4bWi2DYF
[02:37] <discord-raku-bot> <Nemokosch> just think about it - the input token will always be a string
[02:37] <discord-raku-bot> <Nemokosch> sprintf emits strings
[02:39] <pingu> I thought it emitted whatever the format specifiers were?
[02:40] <discord-raku-bot> <Nemokosch> no, I think you have it backwards
[02:40] <discord-raku-bot> <Nemokosch> it takes an integer and prints it into a string, takes a float and prints it out to a string etc
[02:40] <pingu> oh ok
[02:41] <pingu> thats actually not so bad then cause I dont need to stringify everything
[02:42] <discord-raku-bot> <Nemokosch> but then you probably can't rely on the type check because everything is just a string
[02:43] <discord-raku-bot> <Nemokosch> or better said: you should tune the type checks a bit
[02:43] <pingu> the reason i did was because raku was printing 1 as 1.0 if I did %1.1f but if the source was 1.0 and I made it %d it would print 1
[02:43] <pingu> i.e why I made everything a string
[02:43] <discord-raku-bot> <Nemokosch> instead of $input ~~ Int, you'd rather use $input ~~ Int(), meaning, "is it an Int if coercion is allowed?*
[02:44] <discord-raku-bot> <Nemokosch> instead of $input ~~ Int, you'd rather use $input ~~ Int(), meaning, "is it an Int if coercion is allowed?*
[02:44] <pingu> ok
[02:45] <pingu> you mean Str  becomes Str() ?
[02:46] <discord-raku-bot> <Nemokosch> all of your input is Str now
[02:46] <discord-raku-bot> <Nemokosch> so checking for that is a bit pointless
[02:47] <discord-raku-bot> <Nemokosch> it's almost like you could add it to the function signature: Str $tok
[02:47] <discord-raku-bot> <Nemokosch> because either way it's gonna get invoked with strings
[02:48] <pingu> but if I dont make the inputs strings I get the problem I was talking about before 
[02:48] <pingu> so I'd  have to try and fix that somehow
[02:49] <pingu> I couldnt find a way to inherit the precision from the input value rather than from the format specifier when googling
[02:49] *** jgaz left
[02:50] <discord-raku-bot> <Nemokosch> I mean, fine, make them all strings
[02:50] <pingu> I dont want to add pointless padded 0's but I also dont want to hardcode a format specifier in case its too short
[02:50] <discord-raku-bot> <Nemokosch> especially since that's the fundamental datatype coming from a text file
[02:50] <pingu> yeah
[02:50] <discord-raku-bot> <Nemokosch> BUT checking for them inside that check function is pointless
[02:51] <discord-raku-bot> <Nemokosch> BECAUSE at that point they are already strings
[02:51] <pingu> ok yeah
[02:51] <discord-raku-bot> <Nemokosch> the thing to check is whether the string can be interpreted as a Num, Int, etc.
[02:51] *** freeside left
[02:51] <discord-raku-bot> <Nemokosch> and for that, you can use smartmatch with Num(), Int() etc
[02:51] <pingu> I did that because I thought that the file somehow might not end up being read as strins
[02:51] <pingu> strings*
[02:52] <pingu> idk if raku can do that
[02:52] <pingu> read a file without stringifying it
[02:52] <pingu> might be more efficiant 
[02:53] <pingu> also writing ' ' back to the ldraw output file is invalid ldraw
[02:53] <pingu> so '3024.dat' wont work
[02:53] <discord-raku-bot> <Nemokosch> it can read binary files yes - but if the context is meaningful as text anyway, you probably lose more than you win
[02:53] <pingu> 3024.dat will
[02:54] <pingu> yeah this is hard
[02:54] <pingu> and I tried to do it IN C!!!!!!!!!!!!!! for many years
[02:54] <pingu> that was like even harder
[02:55] <discord-raku-bot> <Nemokosch> how old are you, if I may?
[02:55] <pingu> 31
[02:56] <discord-raku-bot> <Nemokosch> I'd say that's almost young in this community. But I hope this year will finally be the breakthrough with this ldraw parsing üòõ
[02:57] <pingu> me too :) I will say that raku is the language that I picked up the fastest and ive tried just about all of them
[02:58] <pingu> if you check outside of the /raku/ folder on my github you'll see C code, but my friend wrote that and thats obvioustly nowhere near the entire project
[03:00] <pingu> he is too busy most of the time and besides, he aint been on irc since mid dec last year
[03:00] <pingu> I think he took part in the brazil protests and went to jail
[03:00] <discord-raku-bot> <Nemokosch> oof
[03:01] <discord-raku-bot> <Nemokosch> anyway, I think it's about time I go to sleep
[03:01] <pingu> same, later
[03:01] <discord-raku-bot> <Nemokosch> üëã
[03:05] *** freeside joined
[03:07] <discord-raku-bot> <el gatito (** advocate)> i found a way to truncate with scale x - x % scale
[03:08] <guifa> Any ideas what the "No test source roots in the project" error is in Comma?  I'd think it'd just use the t/ folder, but it seems not
[03:10] *** freeside left
[03:23] *** freeside joined
[04:10] <guifa> got it figured out
[04:23] *** linkable6 left
[04:23] *** evalable6 left
[04:24] *** evalable6 joined
[04:25] *** linkable6 joined
[04:26] *** freeside left
[04:26] *** epony left
[04:30] *** freeside joined
[05:30] *** quotable6 left
[05:30] *** reportable6 left
[05:30] *** bloatable6 left
[05:30] *** coverable6 left
[05:30] *** evalable6 left
[05:30] *** releasable6 left
[05:30] *** shareable6 left
[05:30] *** squashable6 left
[05:30] *** tellable6 left
[05:30] *** unicodable6 left
[05:30] *** sourceable6 left
[05:30] *** linkable6 left
[05:30] *** committable6 left
[05:31] *** sourceable6 joined
[05:31] *** committable6 joined
[05:31] *** releasable6 joined
[05:31] *** unicodable6 joined
[05:31] *** quotable6 joined
[05:31] *** squashable6 joined
[05:32] *** bloatable6 joined
[05:32] *** coverable6 joined
[05:32] *** linkable6 joined
[05:32] *** evalable6 joined
[05:32] *** tellable6 joined
[05:33] *** reportable6 joined
[05:33] *** shareable6 joined
[05:46] *** freeside left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:02] *** pingu left
[06:23] <guifa> Well, that's a start for the XML module.  I mainly only touched on parsing, and I reduced CLDR parse for Z-languages from 133 to 125 seconds.
[07:02] *** linkable6 left
[07:02] *** evalable6 left
[07:03] *** linkable6 joined
[07:06] *** evalable6 joined
[07:17] *** ProperNoun joined
[07:21] *** cm left
[07:22] *** ProperNoun left
[07:22] *** cm joined
[07:23] *** ProperNoun joined
[08:10] *** plantanran joined
[08:15] *** plantanran left
[08:28] *** plantanran joined
[08:43] *** plantanran left
[08:48] *** jpn joined
[08:53] *** jpn left
[08:57] *** snonux joined
[09:05] *** sivoais left
[09:05] *** snonux left
[09:24] *** jpn joined
[09:30] *** jpn left
[09:55] *** sivoais joined
[09:57] *** sena_kun joined
[10:08] *** snonux joined
[10:18] *** jpn joined
[10:25] *** snonux left
[10:25] *** snonux joined
[10:28] *** snonux left
[10:34] *** Sgeo left
[10:41] *** sena_kun left
[10:44] <discord-raku-bot> <Nemokosch> guifa: please make sure whenever you get to a solid state, push to the repo, even if you don't immediately make a release to the ecosystem
[10:44] *** sena_kun joined
[10:46] *** jpn left
[10:55] *** snonux joined
[10:58] *** snonux left
[10:58] *** jpn joined
[10:58] *** rantanplan joined
[11:03] *** jpn left
[11:16] *** rantanplan left
[11:19] *** rantanplan joined
[11:20] *** rantanplan left
[11:22] *** snonux joined
[11:41] *** ab5tract joined
[11:45] *** lichtkind joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:05] *** Manifest0 joined
[13:01] <guifa> Nemokosch: I don't have write access for it, but I'll start a fork and up it there
[13:01] <tellable6> guifa, I'll pass your message to Nemokosch
[13:03] <discord-raku-bot> <Nemokosch> Oh really? üò¶
[13:04] <discord-raku-bot> <Nemokosch> lizmat: could you give guifa a commit bit to the community modules?
[13:04] <guifa> I mean I'm sure someone can give it to me eventually
[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:05] <guifa> but either way, I'm doing a LOT of changes.  I'm going TRY to maintain 100% backwards compatibility, but if adjusting a less-common feature means massive gains on a common feature (like, say, opening)... I'll do it 
[13:06] <guifa> so a fork seems best for now
[13:06] * guifa is confused.  isn't a fat comma supposed to be always interpretted as a named argument and only Pair.new() is supposed to go as a positional?
[13:07] *** linkable6 joined
[13:08] <lizmat> guifa what's your Github nick again?
[13:08] <guifa> alabamenhu 
[13:08] *** evalable6 joined
[13:08] <lizmat> invite sent
[13:08] * guifa curses whoever stole `guifa` there, and then double curses github for not allowing alabame√±u as a valid username (it was 2019, unicode was the rule already lol)
[13:13] <guifa> So interestingly, even though I knocked out a TON of what should have been slow regex in the XML grammar file, the load time itself for XML docs doesn't seem to have changed at all.  Massive wins though in readability, but def need to figure out where slow down.  JSON::Tiny is only about 2-4x slow as JSON::Fast, but XML is probably still about 20-40x slower
[13:22] <discord-raku-bot> <Nemokosch> What is the counterexample for pair passing as named argument?
[13:22] <guifa> I think you have to do |(Pair.new)
[13:23] <guifa> https://github.com/alabamenhu/XML/blob/speedy/lib/XML/Grammar.rakumod <-- can compare between speedy (mine) and main (old) branches, oen of these is much simpler than the other
[13:32] <guifa> huh, profiling also shows that the grammar run is the slowest part too.  well dang.
[13:43] *** perlbot left
[13:44] *** simcop2387 left
[13:58] *** simcop2387 joined
[14:05] *** perlbot joined
[14:14] *** jpn joined
[14:21] *** jpn left
[14:22] *** jpn joined
[14:27] *** jpn left
[14:44] *** freeside joined
[15:02] <guifa> Got a minor speed up by assuming (wrongly, of course) that the closing tag is the same as the opening tag.  But <3% speed up.  :-(
[15:07] <discord-raku-bot> <Nemokosch> Well, what can I say...
[15:08] <discord-raku-bot> <Nemokosch> Disappointed, not surprised
[15:08] <lizmat> about jnthn's answer ?
[15:09] <lizmat> "it probably needs a language design level solution rather than it merely wanting an optimizer bug fix"
[15:11] <discord-raku-bot> <Nemokosch> I haven't seen that. What really needs a "language design level solution", though, is the grammar processing
[15:11] <discord-raku-bot> <Nemokosch> It's a blocker of way too many things
[15:13] <discord-raku-bot> <Nemokosch> I doubt I could add anything about the "optimizer bug fix". For me it's a straightforward demand:  dispatch should never depend on the function body in HLL territory and that's that.
[15:14] <discord-raku-bot> <Nemokosch> Whatever that takes, is the right thing to do
[15:35] <rf> Good morning folks
[15:38] <discord-raku-bot> <Nemokosch> Hello
[15:39] <discord-raku-bot> <Nemokosch> Come to think of it - do yall sometimes check the content available about Raku? I mean, content coming from the "outer world"
[15:41] <rf> define "outside world"
[15:44] *** linkable6 left
[15:44] *** evalable6 left
[15:45] *** evalable6 joined
[15:45] *** linkable6 joined
[15:47] <snonux> where the pizza comes from
[15:47] <discord-raku-bot> <Nemokosch> Outside of the active members of the community
[15:47] <discord-raku-bot> <Nemokosch> I don't think it's hard to imagine
[15:48] <discord-raku-bot> <Nemokosch> But if you have doubts, give me examples and I'm gonna say if it's "outer world" or not
[15:48] <discord-raku-bot> <Nemokosch> üòâ
[15:49] <rf> Some guy on medium
[15:49] <rf> Lol
[15:51] <ugexe> i dunno about "content", but I've worked at plenty of places that knew I was the "Perl6/Raku" person and were at least curious if i would pursue using it, or inquire what it could be useful for
[15:51] <discord-raku-bot> <Nemokosch> well, if by "some guy" you mean not a contributor or frequent talker on conferences, then yes, that's outer world
[15:53] <discord-raku-bot> <Nemokosch> ugexe: I think that also fits the context I'm bringing it up
[15:53] <discord-raku-bot> <Nemokosch> like, getting sort of outsider feedback
[15:53] <rf> A very prolific developer at my job likes to talk about Raku with me :)
[15:54] <rf> But I'm not sure he has intentions to use it
[15:54] <ugexe> theres a camelia plushie sitting somewhere on a desk at netflix
[15:55] <rf> Nice.
[15:56] <discord-raku-bot> <Nemokosch> it's good to know what a potential user would think, or what they even know about Raku
[15:57] <discord-raku-bot> <Nemokosch> in the case of Mr Wƒôgrzanowski, that was kind of disappointing, lol
[15:57] <discord-raku-bot> <Nemokosch> I still really feel like making a kind of rant about that
[15:57] <discord-raku-bot> <Nemokosch> Like at least don't boast with your ignorance...
[15:58] <rf> The guy I talk with about Raku likes Perl 5 a lot, I tried to sell him on Raku with functional stuff and he though it was interesting.
[15:59] <rf> I got a friend into Raku recently, he really likes the hyper operator :)
[16:00] <discord-raku-bot> <Nemokosch> I also like that üòÇ it just needs a certain approach
[16:00] <discord-raku-bot> <Nemokosch> tbh I hope I can kind of rework that one day
[16:01] <discord-raku-bot> <Nemokosch> it feels the "is nodal" trait should belong to the subroutines but rather the individual parameters of it
[16:01] <discord-raku-bot> <Nemokosch> should NOT belong
[16:01] <discord-raku-bot> <Nemokosch> /me casually missing the important words
[16:06] *** jmcgnh left
[16:11] *** rf left
[16:18] *** jmcgnh joined
[16:20] *** cfa joined
[16:38] <guifa> I think I can probably shave off another 5-25%, but I wonder if we should also get a streaming version of XML in native Raku. As I'm reading into it, folks with large XML files apparently benefit quite a bit from those
[16:41] <lizmat> yeah, streaming would be great  :-)
[16:41] *** freeside left
[16:43] *** freeside joined
[16:47] *** freeside left
[16:49] *** freeside joined
[16:51] <guifa> also realizing that fixing the accented > issue in XML is going to be tougher than I expected
[16:51] <guifa> in JSON::Tiny, the only place you can really have that happen in a valid document is inside of a quoted string
[16:52] <guifa> so the grammar does `token str { (:ignoremark \") ‚Ä¶‚Ä¶‚Ä¶ \" }` and then handles it neatly inside of `method str ($/)`
[16:54] *** freeside left
[16:54] <guifa> but with XML, the accented > can come from the parent's opening tag or the previous sibling's close tag
[16:55] *** freeside joined
[16:58] *** Bocaneri joined
[16:58] *** Bocaneri is now known as Guest419
[16:58] <discord-raku-bot> <Nemokosch> what does "streaming" mean here?
[17:00] <guifa> It basically means it scans the file on demand rather than preprocessing the whole thing
[17:00] *** Sauvin left
[17:01] *** Guest419 is now known as SenFache
[17:01] <guifa> extremely small memory footprint, with a trade off on other operations: sequential operations are faster, but random access is slower because it has to reprocess as it goes
[17:03] <discord-raku-bot> <Nemokosch> so basically it isn't parsed as one thing
[17:03] <guifa> exactly
[17:04] <guifa> so instant load
[17:04] <discord-raku-bot> <Nemokosch> what if somebody, say, wants to iterate over the whole content of the XML?
[17:05] <guifa> sequential iteration is fairly smooth
[17:06] <guifa> random access might have you reparsing large chunks several times over
[17:06] <guifa> so it's a trade off ‚Äî¬†not an all around winner
[17:06] *** gfldex left
[17:06] *** gfldex joined
[17:06] <discord-raku-bot> <Nemokosch> what accounts for the big win with sequential iteration?
[17:07] <guifa> you don't have to read the whole file in memory, and it doesn't really parse any more than a whole parse would have
[17:08] <guifa> so imagine if we wanted to make a parser to read a list of numbers
[17:08] <discord-raku-bot> <Nemokosch> okay, indeed, that's a win with memory
[17:09] <guifa> the file is "1 2 3 4 5 6 7 8"
[17:09] <discord-raku-bot> <Nemokosch> but will it be a significant win with CPU time?
[17:09] <guifa> for loading, yes
[17:09] <guifa> because it doesn't need to do the initial parse
[17:10] <discord-raku-bot> <Nemokosch> "the initial parse" :cameliathink:
[17:10] <guifa> ha I Mean it doesn't need to parse the whole file
[17:10] <discord-raku-bot> <Nemokosch> not at once but ultimately it would basically do that, no?
[17:10] <guifa> if and only if you're going to read the whole file
[17:11] <discord-raku-bot> <Nemokosch> yes, that was my premise
[17:11] <guifa> I don't know which one would win speed wise, but they'd be in the same order of magnitude I'd think
[17:12] <guifa> full initial parse might be faster all else equal, but it's gonna need to create a crapton of objects 
[17:12] <guifa> and that in and of itself can take time
[17:13] *** Geth left
[17:14] *** Geth joined
[17:14] <ugexe> its like a lazy list
[17:15] <guifa> ^^ that's probably the better explanation, ty ugexe
[17:15] <ugexe> (1..10).map({ sleep $_ }). accessing the first element lazily is fast, accessing the first element eagarly is slow
[17:15] <ugexe> but if you wanted to actually access all elements the eager version would be faster (although this isn't a good example for showcasing that)
[17:17] <discord-raku-bot> <Nemokosch> üòÑ
[17:18] <discord-raku-bot> <Nemokosch> yes, I get the general advantage of lazy interfaces, with or without caching (from what I can remember, Entity Framework laziness didn't cache so it basically needed to be turned off if you were reusing the results)
[17:19] <discord-raku-bot> <Nemokosch> I was just thinking, the overall resource demand is too high, eagerness aside
[17:19] <ugexe> the other thing is you can start using the values that are streamed to you while its still parsing the rest
[17:19] <discord-raku-bot> <Nemokosch> like it's not fine that grammars cannot be used for anything remotely large
[17:19] <ugexe> even if you start { eagarly-parse-xml(...) } you'd still have to wait for it to parse everything to use a single value
[17:19] *** ab5tract left
[17:20] <ugexe> streaming you can start using the earlier values while another thread is still parsing the rest
[17:20] <discord-raku-bot> <Nemokosch> makes sense
[17:21] <discord-raku-bot> <Nemokosch> and it's definitely way better than entering nirvana state and not doing anything to leverage the situation
[17:21] <discord-raku-bot> <Nemokosch> but yes, I'm gonna still say, whether we can help that or not, grammars being very costly is a blocker
[17:22] <discord-raku-bot> <Nemokosch> correct me if I'm wrong but the whole one-pass parsing of Raku is very much influenced by grammars simply being slow
[17:22] *** jpn joined
[17:23] <ugexe> i would be surprised if grammars being slow was even comprehendable at the time one-pass parsing was decided
[17:24] <discord-raku-bot> <Nemokosch> that sounds surprising because several syntax anomalies are direct results of one-pass parsing
[17:24] <discord-raku-bot> <Nemokosch> not sure why anyone would have chosen that - apart from performance
[17:24] * lizmat is looking forward to Nemokosch coming up with a better grammar engine
[17:25] <lizmat> and that's half serious
[17:25] <ugexe> "One-pass parsing is fundamental to knowing exactly which language you are dealing with at any moment, which in turn is fundamental to allowing unambiguous language mutation in any desired direction. "
[17:26] <discord-raku-bot> <Nemokosch> tbh the price seems quite high
[17:27] <discord-raku-bot> <Nemokosch> even if you are only using one sublanguage, you are gonna get weird syntactic ambiguities with awkward resolutions (add whitespace here, there, everywhere)
[17:27] *** jpn left
[17:27] <ugexe> "(Generic languages are allowed, but only if intended; accidentally generic languages lead to loss of linguistic identity and integrity. This is the hard lesson of Perl 5's source filters and other multi-pass parsing mistakes.)"
[17:29] <discord-raku-bot> <Nemokosch> another thing to mention here is that these polemics are usually so cryptic that it's impossible to argue for or against them :v
[17:30] <discord-raku-bot> <Nemokosch> same thing happened for "interface consistency" a couple of days ago - the argument was either too vague or easy to dismantle once you grasped what it was trying to say
[17:30] <ugexe> you are about 20 years too late for that
[17:30] <ugexe> this stuff was designed by people with the entire language in mind, before the language existed at all
[17:30] <discord-raku-bot> <Nemokosch> but you know, let's be honest for a second
[17:30] <ugexe> people with a lifetime of experience to decide which tradeoffs to choose in relation to the rest of the language design as a whole
[17:31] <discord-raku-bot> <Nemokosch> they could very easily be wrong about the language they have never seen implemented or used, or never even had to use themselves
[17:31] <ugexe> its easy to say "oh we could improve this one thing by just doing it the way i envision it", but that would be short sighted
[17:31] <ugexe> i wonder how many large systems you've worked on 
[17:32] <ugexe> i wonder how many large systems you've worked on 
[17:32] <ugexe> systems that are larger than most single people can contain in their head
[17:32] <discord-raku-bot> <Nemokosch> not sure if that is really related to the discussion
[17:33] <discord-raku-bot> <Nemokosch> also, I don't think there is anything wrong about acknowledging that a transaction might have been wrong, regardless whether it's possible to undo it. If we can acknowledge that it was wrong, we can at least compensate for it
[17:33] <ugexe> if you want to state something like "this could have been designed better" then yes, it kind of is
[17:33] <discord-raku-bot> <Nemokosch> I don't see how, to be honest
[17:34] <ugexe> then i don't see how you can see so much wrong with designs
[17:34] <ugexe> like 5 minutes ago you were learning about the benefits of streaming data
[17:34] <discord-raku-bot> <Nemokosch> by literally being forced into having to deal with the consequences of tradeoffs
[17:34] <ugexe> yes, in isolation
[17:35] <discord-raku-bot> <Nemokosch> but then I don't get how you could confidently say that the tradeoff must have been the right one
[17:36] <ugexe> well, one person wrote up hundreds of design docs having a cohesive understanding of the entire system
[17:36] <discord-raku-bot> <Nemokosch> that happen to be really hard to read for simple linguistic reasons, yes
[17:36] <ugexe> you are having a hard time doing some task because of a small subset of the system
[17:37] <ugexe> out of those two options why should I think you  have a better understanding?
[17:37] <discord-raku-bot> <Nemokosch> honestly, I don't know what point you are trying to make
[17:37] <discord-raku-bot> <Nemokosch> or what presumptions you even roll by
[17:37] <ugexe> i'm not saying you aren't right, but you can't expect us to take your opinion as seriously as say larrys
[17:38] <discord-raku-bot> <Nemokosch> And I'm also not saying that I'm the designer of Perl 6
[17:39] <discord-raku-bot> <Nemokosch> What I am kind of implying is that it is possible that lack of proper communication has been a problem from early days of the design of the language. Not with me, because I was somewhere in the kindergarten
[17:39] <lizmat> yet you question all of the decisions that have been made over a period of ~15 years by many bight people
[17:39] <ugexe> i don't think you are familiar with how the design process went then
[17:39] <lizmat> *bright
[17:39] <discord-raku-bot> <Nemokosch> how would you know if I question "all of the decisions"?
[17:39] <discord-raku-bot> <Nemokosch> let's not go overboard
[17:40] <lizmat> we can all be discussing things here back and forth, but if you have a problem with a decision, either:
[17:40] <lizmat> 1. make a problem-solving issue for it
[17:40] <lizmat> 2. come up with a fix
[17:40] <discord-raku-bot> <Nemokosch> nobody is forcing you to "discuss it"
[17:41] <discord-raku-bot> <Nemokosch> just mentioning it is not "discussion", a discussion takes multiple participants
[17:41] <lizmat> fair point: I will thus recuse myself from any discussion here about this subject
[17:41] <discord-raku-bot> <Nemokosch> if I'm wrong, you are free to point out where
[17:41] <discord-raku-bot> <Nemokosch> (I'm not an oracle writing hundreds of pages that unfortunately nobody can read by now, after all)
[17:42] <ugexe> it gets hard to go through the "if im wrong prove me wrong" when you have to do it often
[17:43] <discord-raku-bot> <Nemokosch> you know, I felt the same thing reading the apocalypse containing "interface consistency" or what it was called
[17:43] <ugexe> most of what you said would be fine if said differently. but you seem to come off as speaking with an authority over the subject (or even comp sci in general) I don't think you have yet
[17:43] <discord-raku-bot> <Nemokosch> well then please divide the content with my tone
[17:44] <ugexe> like your questions or comments don't come off ass curious, they come off as complaining usually
[17:44] <discord-raku-bot> <Nemokosch> Well, there is both. Is something comes up in a distressing context (like one-pass parsing ambiguities here), I think it's only fair that it sounds more like "complaining"...
[17:45] <lizmat> "distressing"  is what you make it
[17:46] <discord-raku-bot> <Nemokosch> Also, I have to say I feel some kind of neglect to, you know, actual user experience (not just mine obviously), like that's also something to take into account, not just design from way before implementing the language
[17:46] <discord-raku-bot> <Nemokosch> I'm not saying that users design the language or anything like that but the possibility of harmonisation should exist at least in theory
[17:47] <discord-raku-bot> <Nemokosch> Rather than the reflex of bouncing stuff back to 20 years ago
[17:47] *** abraxxa-home joined
[17:48] <discord-raku-bot> <Nemokosch> I think we can at least agree that the whole state of things is not like it would have been imagined 20 years ago
[17:48] <ugexe> if you don't get why understanding why things are the way they are is important then i'm not sure we need to continue this conversation
[17:48] <lizmat> that makes it clear to me that you've never worked on any project of any size
[17:49] <lizmat> it *never* comes out like you imagined it
[17:49] <lizmat> *NEVER*
[17:49] <discord-raku-bot> <Nemokosch> I just mean that there is no reason to act as if all judgements were correct
[17:49] <lizmat> and I can state that with 46+ years of programming 
[17:49] <lizmat> nobody is saying all judgements are correct
[17:50] <ugexe> There exists in such a case a certain institution or law; let us say, for the sake of simplicity, a fence or gate erected across a road. The more modern type of reformer goes gaily up to it and says, ‚ÄúI don‚Äôt see the use of this; let us clear it away.‚Äù To which the more intelligent type of reformer will do well to answer: ‚ÄúIf you don‚Äôt see the use of it, I certainly won‚Äôt let you clear it
[17:50] <ugexe> away. Go away and think. Then, when you can come back and tell me that you do see the use of it, I may allow you to destroy it.‚Äù
[17:50] <discord-raku-bot> <Nemokosch> ugexe: do you think you "understand why things are the way they are"?
[17:50] <discord-raku-bot> <Nemokosch> as a binary choice
[17:50] <ugexe> this isn't about me
[17:51] <ugexe> if you want to deflect i can go back to what i was doing
[17:51] <discord-raku-bot> <Nemokosch> then substitute yourself for literally anyone around the project
[17:51] <discord-raku-bot> <Nemokosch> do you think such a person exists?
[17:51] <lizmat> dinner&
[17:51] <ugexe> you are exactly what chesterton's fence is talking about
[17:51] <discord-raku-bot> <Nemokosch> "this isn't about me"
[17:51] *** lizmat left
[17:52] <ugexe> its about your challenging the existing design decisions with little regard for why they are like that to begin with
[17:52] <ugexe> https://fs.blog/chestertons-fence/
[17:53] <discord-raku-bot> <Nemokosch> This doesn't have to be about me.
[17:53] <ugexe> you are the one that is distressed, no?
[17:54] <ugexe> "As simple as Chesterton‚Äôs Fence is as a principle, it teaches us an important lesson. Many of the problems we face in life occur when we intervene with systems without an awareness of what the consequences could be."
[17:54] <discord-raku-bot> <Nemokosch> It's about the phenomenon that you aren't allowed to even mention perceivable user-level problems because you need some extra legitimacy that you can only earn by a journey you yourself might not want to subject yourself to
[17:54] <discord-raku-bot> <Nemokosch> What good comes out of it?
[17:54] <ugexe> maybe you should just read the damn blog post and see what bad comes out of what you are suggesting
[17:55] <discord-raku-bot> <Nemokosch> what am I suggesting?
[17:55] <ugexe> regardless, this is going nowhere
[17:55] <discord-raku-bot> <Nemokosch> that people shouldn't be redirected into a sinkhole if they "complain" about something?
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:01] <discord-raku-bot> <Nemokosch> This is not even a technical or logistical problem, it is a social problem of perceiving a complaint as something intrinsically bad
[18:09] <ugexe> do you want to be around people who complain all the time?
[18:10] <ugexe> south park made an episode where Stan wakes up one day realizing everything is (rightfully) shit and complaining about it constantly. along the way his friend no longer want to be around him
[18:11] <ugexe> in other words: complaining is ok. but something about the way you go about it doesn't come off in a flattering way
[18:11] *** Sgeo joined
[18:17] *** jpn joined
[18:22] *** lizmat joined
[18:24] *** jpn left
[18:27] <bartolin> I don't think I can add much to the earlier discussion, but I've enjoyed the blog post about Chesterton's fence. Didn't know about that. So thanks, ugexe++ :)
[18:32] <lizmat> indeed, ugexe++
[18:33] <shmup> lizmat, 46 years is an achievement. that rules
[18:34] <lizmat> no, it doesn't
[18:34] <lizmat> I still make stupid mistakes  :-)   and misjudge situations, and am grumpy every now and then  :-)
[18:35] *** cfa left
[18:35] <shmup> oh no a human!!!
[18:36] <guifa> ssssssshhhhhh
[18:36] <guifa> liz isn't human, she's a butterfly 
[18:37] <El_Che> another reason for the grumpy butterfly award
[18:39] <discord-raku-bot> <Nemokosch> I don't think "people who complain all the time" are all that real, to be honest. I only know people who complain sometimes, and that's quite okay imo
[18:39] <shmup> :grumpy-butterfly:
[18:40] <shmup> testing a word out: grumpyfly
[18:40] <discord-raku-bot> <Nemokosch> I don't know if this has its own name but it's probably an umpteenth iteration of survivor bias
[18:40] <discord-raku-bot> <Nemokosch> and as such, it's not that far from this Chesterton fence thingy
[18:41] <shmup> read the room. whatd you have for breakfast
[18:42] <discord-raku-bot> <Nemokosch> actually, I try to remind myself to point out things that "just work" every now and then, to give representation to that voice as well
[18:44] <discord-raku-bot> <Nemokosch> by the way, that's part of the reason I asked if yous check out "outer world" feedback from the language sometimes - it's not only about the negatives really
[18:46] *** lizmat left
[18:49] <shmup> lol https://hillarymilesart.wordpress.com/portfolio/grumpy-butterflies/
[18:51] <shmup> anyone familiar with any MUDs people have hacked on w/ raku? i know about taostation which is spiritually there, but no MUD
[18:52] <discord-raku-bot> <Nemokosch> what is MUD?
[18:52] <bartolin> by the way, Nemokosch, from reading the backlogs here I don't perceive you as "always complaining". Sometimes discussions get heated, but that's not the whole picture. (Personally, I try to stay away from those heated discussions, because that impacts the -Ofun part ...)
[18:53] <bartolin> MUD -- Multi User Dungeon, I'd guess: my constant $?UNICODE-VERSION = %(
[18:53] <bartolin>     # Supported Unicode version per Java (major) version.
[18:53] <bartolin>     # (cmp. https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/Character.html)
[18:53] <bartolin>      '8' =>  '6.2',
[18:53] <bartolin>      '9' =>  '8.0',
[18:53] <bartolin>     '10' =>  '8.0',
[18:53] <bartolin>     '11' => '10.0',
[18:53] <bartolin>     '12' => '11.0',
[18:53] *** Geth left
[18:53] <bartolin>     '13' => '12.1',
[18:53] <bartolin>     '14' => '12.1',
[18:53] <bartolin>     '15' => '13.0',
[18:53] *** Geth joined
[18:53] <bartolin>     '16' => '13.0',
[18:53] <bartolin>     '17' => '13.0',
[18:53] <shmup> multi-user dungeons, Nemokosch. text based games played over telnet or with a MUD client (the irssi user might also prefer tintin++ for muds). the original MMOs, these were
[18:53] <bartolin>     '18' => '13.0',
[18:53] <bartolin>     '19' => '14.0',
[18:53] <bartolin> Oops, sorry :(
[18:54] <shmup> their height was the 90s, they survive today though 
[18:54] <discord-raku-bot> <Nemokosch> üòÆ
[18:55] <discord-raku-bot> <Nemokosch> I don't mean to cause "unfun" to anyone on purpose, although my (maybe controversial?) take is: the concept of -Ofun is not sufficient to hold a project with a goal together. The only way it could work is if fun itself is the purpose.
[18:57] <discord-raku-bot> <Nemokosch> (for me, the fun comes from the purpose, rather than being the purpose itself)
[18:58] *** Geth left
[18:58] *** Geth joined
[19:03] *** jpn joined
[19:10] *** epony joined
[19:12] *** rf joined
[19:13] *** Bocaneri joined
[19:13] *** Bocaneri is now known as Guest8231
[19:14] *** rf left
[19:15] *** rf joined
[19:15] *** SenFache left
[19:17] *** jpn left
[19:50] *** ProperNoun left
[19:54] <discord-raku-bot> <Anton Antonov> What Raku packages can I use to ingest data in HTML pages? The "data" refer to is placed in tables (that loosely follow HTML's table specs and the fields can have different stylings, etc.) I consider using "HTML::Parser::XML", but maybe there is something implemented already.
[19:55] <discord-raku-bot> <Anton Antonov> To clarify -- "HTML::Parser::XML" is a generic parser/converter that might help programming a data extractor.
[20:13] *** ab5tract joined
[20:15] *** abraxxa-home left
[20:31] *** lizmat joined
[20:32] <lizmat> have you considered lynx --dump ?
[20:37] <discord-raku-bot> <Anton Antonov> @lizmat Hmm... No, I have not. I have to check it out.
[20:38] <lizmat> it's a bit like using a hammer, but it may just produce what you need :-)
[20:41] *** Geth left
[20:41] *** Geth joined
[20:54] <tonyo> html parser xml is an old module
[20:54] <tonyo> it does try to correct poorly formed html, though, which may be helpful
[20:55] *** ab5tract left
[21:00] *** ab5tract joined
[21:02] <shmup> is it fair to say that if i see a vim modeline i see liz :P 
[21:03] *** Guest8231 is now known as SenFache
[21:07] <lizmat> could well be, since I use vim  :-)
[21:22] <discord-raku-bot> <Anton Antonov> @tonnyo Thanks! Good to know...
[21:26] <shmup> because i'm merely curious about a perspective lizmat, what's the convenience for you? working from systems without your vim configurations?
[21:27] <lizmat> I have a minimal vim config and a lot of muscle memory
[21:28] <shmup> sorry i wasn't clear at all, i meant the appeal to use the modeline versus some minimal vim configuration. i too adore vim
[21:29] <shmup> probably a modeline is part of your muscle memory haha
[21:29] <lizmat> well... at some point people added vim modelines to the core, and I just made sure they're consistent
[21:31] <discord-raku-bot> <Anton Antonov> @tonyo What would be a good alternative of "HTML::Parser::XML"? Looking at raku.land search results for "HTML" none seems more relevant.
[21:32] <discord-raku-bot> <Anton Antonov> Hmm... it looks like "DOM::Tiny" is a competitor of "HMTL::Parser::XML".
[21:41] <shmup> not liking the API? Tiny looks nice though, good tests
[21:42] *** thundergnat joined
[21:44] <thundergnat> Anton Antonov: It can be fiddly to set up but I have had success using https://raku.land/github:Skarsnik/Gumbo
[21:44] <thundergnat> See https://rosettacode.org/wiki/Mersenne_primes#Raku or https://rosettacode.org/wiki/Rosetta_Code/Tasks_without_examples#Raku
[21:49] *** sena_kun left
[21:50] *** sena_kun joined
[21:56] *** thundergnat left
[21:57] <discord-raku-bot> <Anton Antonov> @thundergnat Ok, good to know. And yes it does seem "fiddly to set up." (I made my first attempt.)
[22:06] <guifa> is there any way to do
[22:06] <guifa> m: sub foo {¬†return Empty, 'b' }; my ($a, $b) = foo;  say $b; 
[22:06] <camelia> rakudo-moar 33c2b283c: OUTPUT: ¬´(Any)‚ê§¬ª
[22:06] <guifa> such that $b is set to 'b' and $a is actually set to the empty Sliip?
[22:08] <discord-raku-bot> <Nemokosch> not sure if slips respect itemization ü§î
[22:08] <discord-raku-bot> <Nemokosch> (X and Z don't respect slips, btw)
[22:09] <guifa> I mean I get the issue is I'm definitely trying to abuse the point of slips haha
[22:09] <discord-raku-bot> <Nemokosch> oh it's on my list...
[22:09] <discord-raku-bot> <Nemokosch> https://github.com/2colours/Raku-ideas/blob/main/Issues.md point no. 4
[22:10] <discord-raku-bot> <Nemokosch> I can be wrong about it but there's at least a reason why I wrote it there üòõ
[22:13] <tonyo> the html parser xml should still work, i just haven't looked at it in a long time
[22:24] *** sena_kun left
[22:42] *** deoac joined
[22:45] *** melezhik joined
[22:46] <melezhik> o/
[22:47] <melezhik> SparrowCI now supports builds for branches if someone is interested
[22:47] <rf> Thanks for this melezhik, I am going to use this soon for Humming-Bird
[22:47] <melezhik> rf: ++
[22:48] <melezhik> Workflow is not very intuitive and require some steps , eventually I will improve , but for enough it is ok
[22:49] <melezhik> enough -> now
[22:49] *** melezhik left
[22:52] *** melezhik joined
[22:53] <rf> I am going to start a big feature for Humming-Bird next week, hopefully this will make it easier
[22:53] <rf> To keep branches tested
[22:54] <ab5tract> Nemokosch: "they unwrap even if they are in Scalar containers - is this desirable?" 
[22:54] <tellable6> ab5tract, I'll pass your message to Nemokosch
[22:54] <ab5tract> what does this mean?
[22:56] *** melezhik left
[23:01] <discord-raku-bot> <Nemokosch> m: (1, 2, $(slip 4, 5, 6), 42, $(slip 444, 53)).say
[23:01] <discord-raku-bot> <Raku eval>  (1 2 4 5 6 42 444 53)  
[23:01] <discord-raku-bot> <Nemokosch> this
[23:33] <tonyo> melezhik: can you disable tar in your config for fez and try bundling again? i can't repro the issue you're seeing
[23:33] <tellable6> tonyo, I'll pass your message to melezhik
[23:48] *** melezhik joined
[23:48] <melezhik> .
[23:48] <tellable6> 2023-02-05T23:33:23Z #raku <tonyo> melezhik: can you disable tar in your config for fez and try bundling again? i can't repro the issue you're seeing
[23:52] *** melezhik left
