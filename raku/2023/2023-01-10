[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:05] <japhb> stevied: https://github.com/Raku/REA ?

[00:06] <japhb> (And why do you want to *fork* them all?)

[00:09] *** Guest22 joined
[00:10] *** Guest22 left
[00:30] *** samcv left
[00:30] *** samcv joined
[00:55] <discord-raku-bot> <stevied> ok, cool. I can probably extract the github urls from this fairly easily

[00:55] <discord-raku-bot> <Nemokosch> is cloning them not enough? ðŸ˜…

[00:56] <discord-raku-bot> <stevied> I was thinking about updating the legacy filename extensions on the modules that need it.

[00:56] <discord-raku-bot> <stevied> and that got me to wondering if there might be an easy way to do that.

[00:57] <discord-raku-bot> <stevied> comma ide has a way to easily update the legacy filename extensions

[00:58] <discord-raku-bot> <stevied> but then it would be a pain to open each module individually in comma. so I'm wondering if a script might already exist for the the job.

[01:01] <discord-raku-bot> <Nemokosch> I absolutely love this idea, lol. Even opened an issue concerning this ambivalent status quo

[01:02] <discord-raku-bot> <stevied> ambivalent status quo? what do you mean? that people don't seem motivated to update the file extensions?

[01:04] <discord-raku-bot> <Nemokosch> that's a fair way to put it

[01:04] <discord-raku-bot> <Nemokosch> And I think this is really a marketing/management kind of choice

[01:05] <discord-raku-bot> <stevied> I just did a pull request for one module: https://github.com/jonathanstowe/XDG-BaseDirectory/pulls

[01:05] <discord-raku-bot> <Nemokosch> The extension could be .foobar for all I care

[01:05] <discord-raku-bot> <Nemokosch> or .deadperl - okay, maybe not, marketing/management again

[01:05] <discord-raku-bot> <stevied> not very hard to do with comma but would be very tedious to do them all with comma

[01:06] <discord-raku-bot> <Nemokosch> my point is that I don't mind the old extensions - but if we do the change, let's be serious about it

[01:06] <discord-raku-bot> <Nemokosch> it has been like 3 years

[01:06] <guifa> I basically update stuff as I come across it in my modules

[01:06] <guifa> like if I push an update to Old::Module today and it's still using .pm6 I make a change

[01:06] <discord-raku-bot> <stevied> it's a tedious job to do by hand. I gotta imagine someone wrote a script for it. maybe it's just a matter of publicizing it

[01:07] *** Kaiepi joined
[01:08] <discord-raku-bot> <Nemokosch> guifa: let me ask you about the ecosystem/module/distribution "polemy"

[01:09] <discord-raku-bot> <Nemokosch> it only occured to me in the last couple of days that the unit of dependencies is a module and not a distribution

[01:09] <discord-raku-bot> <Nemokosch> I can't say it sounds like a good idea to me still but that's besides the point...

[01:09] <discord-raku-bot> <Nemokosch> how do you go about naming your... well, distributions?

[01:10] <discord-raku-bot> <Nemokosch> the point being that ultimately the name of the distribution is more or less a fun fact, compared to the provides section in the META6 file

[01:12] <guifa> I just name it the same as what the primary module would be (e.g. what I'd expect 90+% of people to want to interface with)

[01:13] <guifa> In one case (Intl::LanguageTag) that actually literally just parrots out symbols from Intl::LanguageTag::BCP47 which is just one of several (but it's the most logical default for numerous reasons), but power users can import stuff with longer package names as needed

[01:14] <discord-raku-bot> <Nemokosch> Oh, that's interesting from a technical point of view as well

[01:16] <discord-raku-bot> <Nemokosch> https://github.com/alabamenhu/LanguageTag/blob/master/lib/Intl/LanguageTag.rakumod gotcha

[01:19] *** jpn joined
[01:19] <discord-raku-bot> <Nemokosch> back to "the topic" - my worry is that I'm not the only one who has treated distribution names as the unit of dependency, and now that I know they are, I feel somewhat cheated by the gazillion of distributions that have module name-looking names

[01:21] *** bigdata joined
[01:24] <discord-raku-bot> <stevied> just stumbled on this list: https://github.com/Raku/ecosystem/blob/main/META.list

[01:24] *** jpn left
[01:25] <discord-raku-bot> <Nemokosch> not to say that I'm the best person to hold you a history lesson but you might want one ðŸ˜„

[01:25] <discord-raku-bot> <Nemokosch> Raku/ecosystem IS basically the so-called p6c ecosystem. It is being turned off, by the way.

[01:26] <discord-raku-bot> <Nemokosch> You can see many commits like "moving XY to zef", "lives on zef now" and the likes

[01:33] *** bigdata left
[02:24] <guifa> Although I guess to be fair it's fairly similar with other languages.  The difference being Raku doesn't need the use foo::bar::* syntax or whatever, because you can use foo::bar and the module author will mostly likely have it do whatever makes most sense

[02:33] *** linkable6 left
[02:33] *** evalable6 left
[02:34] *** linkable6 joined
[02:36] *** evalable6 joined
[02:46] * leont doesn't making Â«use Foo::barÂ» make sense typically means stuffing absolutely everything in one file

[02:46] <leont> s/doesn't/& like how/

[03:07] *** jpn joined
[03:13] *** jpn left
[03:21] *** rf left
[04:03] *** jpn joined
[04:09] *** jpn left
[04:12] *** ToddAndMargo left
[04:13] <jaguart> though I see distributions where there is nothing in that file except a place-holder class, e.g. https://github.com/tony-o/raku-fez/blob/master/lib/Fez.rakumod

[04:15] *** vrurg_ joined
[04:15] *** vrurg left
[04:26] *** jpn joined
[04:30] *** alfonsox joined
[04:35] <SmokeMachine> Red, for example, if you use it, you will probably just need to `use Red` and it will import a lot of things from many different filesâ€¦ (https://github.com/FCO/Red/blob/master/lib/Red.pm6)

[04:39] <discord-raku-bot> <stevied> I got my META.json file here: https://github.com/sdondley/Proc-Easier/blob/main/META6.json

[04:40] <discord-raku-bot> <stevied> and then I'm looking at https://github.com/Raku/REA but the url to my github repo is nowhere to be found in any file. some modules have "source" urls in the json and some don't.

[04:41] <discord-raku-bot> <stevied> so how can I reliably extract the url to the module's source code?

[04:55] <discord-raku-bot> <stevied> I notice some modules use "source" in META6.json and some use "source-url"

[04:55] <discord-raku-bot> <stevied> seems like the modules that use "source" have the urls to github repo in tact

[04:56] <discord-raku-bot> <stevied> i guess only way is to pull the META6.json file out of the tar.gz in the archive file?

[04:56] <discord-raku-bot> <stevied> i guess only way is to get the url is to pull the META6.json file out of the tar.gz in the archive file and check it?

[05:27] *** jpn left
[05:56] *** jpn joined
[06:00] *** reportable6 left
[06:01] *** jpn left
[06:02] *** reportable6 joined
[06:31] *** Kaiepi left
[06:51] *** jpn joined
[06:57] *** jpn left
[07:01] <jaguart> stevies: isnt this available in https://360.zef.pm for zef modules? an array of JSON that contains source-urls

[07:01] <jaguart> stevied: isnt this available in https://360.zef.pm for zef modules? an array of JSON that contains source-urls

[07:03] <jaguart> source-url looks more common there - might be a tooling change

[07:09] *** razetime joined
[07:33] *** abraxxa joined
[07:37] *** abraxxa left
[07:38] *** abraxxa joined
[07:45] *** jpn joined
[07:50] *** razetime left
[07:54] *** jpn left
[08:01] *** razetime joined
[08:02] *** jjido joined
[08:08] *** Sgeo left
[08:20] *** jpn joined
[08:25] *** jpn left
[08:33] *** jjido left
[08:36] *** buffet left
[08:38] *** buffet joined
[08:41] *** sena_kun joined
[08:58] *** alfonsox left
[09:03] *** jjido joined
[09:05] *** jjido left
[09:12] *** dakkar joined
[09:24] *** buffet left
[09:25] *** buffet joined
[09:27] <discord-raku-bot> <Nemokosch> to my knowledge, distributions absolutely don't have to expose any modules, and even if they do, those modules don't have to have anything in common with the distribution name

[09:30] <discord-raku-bot> <Nemokosch> guifa: it's not about `use`. The quintessential difference is that most "package managers" in programming languages don't make you depend on namespaces.

[09:30] *** justReddy is now known as justache

[09:35] <discord-raku-bot> <Nemokosch> I can imagine there are dependency management systems that simply don't draw a difference between a namespace/module and an entry uploaded to the ecosystem (what Raku calls distribution). But Raku does and still picks a *distribution* to install based on a *namespace* it provides...

[09:38] <dakkar> (nitpick: Raku doesn't install anything; rakudo doesn't install anything; zef install things)

[09:38] <tellable6> 2022-07-06T20:54:41Z #raku <Xliff> dakkar Thanks

[09:38] <dakkar> (ok ok, the CompUnit::something does most of the installing, but zef definitely does the looking up)

[09:40] <discord-raku-bot> <Nemokosch> Well, one could counter-nitpick: https://github.com/Raku/old-design-docs/blob/master/S22-package-format.pod#recommendation-manager

[09:41] <discord-raku-bot> <Nemokosch> tbh I'm not sure if it was fortunate to spec this behavior of all things, rather than let it to the tooling that develops over time

[09:41] <dakkar> wellâ€¦ the authority/version/api keys are used at `use` time too, so it had to be in the language spec

[09:42] <dakkar> (I was only nit-picking on the "install" verb)

[09:42] <discord-raku-bot> <Nemokosch> I think tying `use` and dependency management is the bad path to walk down upon itself

[09:43] <discord-raku-bot> <Nemokosch> `use` has no knowledge of code out there, it works on compilation units

[09:43] <dakkar> the aim of that design was to be able to have multiple versions of the same package/module/thing installed at the same time, and being able to "use" the one you really want

[09:43] <dakkar> so if I release MagicThing:api<1> and you `use MagicThing:api<1>` in your code,

[09:44] <dakkar> then I release MagicThing:api<2> and some of your other dependencies use _that_, your code still works

[09:44] <dakkar> (this scenario currently breaks perl5, and that's why several CPAN distributions bake the api version in their name)

[09:44] <discord-raku-bot> <Nemokosch> dakkar: this way of phrasing itself carries a misconception. You *don't* release the same conceptual unit that one can use.

[09:45] <dakkar> ?

[09:45] <discord-raku-bot> <Nemokosch> You release a distribution and one uses a module

[09:45] <discord-raku-bot> <Nemokosch> Conceptually there is no way to "release a module"

[09:45] <dakkar> ok, sure; how does that affect what I said?

[09:46] <discord-raku-bot> <Nemokosch> well, makes it kinda meaningless

[09:47] <dakkar> I release a distribution that contains modulesâ€¦ each module carries authority/version/api metadata (inherited from its distribution at install time, maybe?)

[09:47] <dakkar> then you can select a module via its name and that metadata, when `use`ing it

[09:47] <discord-raku-bot> <Nemokosch> the problem itself is to use these two actions in the same sentence. One doesn't "release a new version of a module". META6 doesn't even correspond to a module but a distribution. All that metadata exists on a distribution level.

[09:48] <dakkar> ok, sure

[09:49] <discord-raku-bot> <Nemokosch> I'm not even sure if modules can define their own version, auth, api in a way that doesn't need you to install the distribution in order to get them for that one module specifically

[09:49] <dakkar> that's why I wrote Â«each module carries authority/version/api metadata (inherited from its distribution at install time, maybe?)Â»

[09:49] <dakkar> the compunit repository definitely has access to that info

[09:50] <discord-raku-bot> <Nemokosch> the compunit repository kicks in after you installed the distribution, no?

[09:50] <dakkar> yes

[09:51] <dakkar> I was trying to explain why S22 specifies the behhaviour of authority/version/api 

[09:51] <discord-raku-bot> <Nemokosch> anyway, you see where I'm going, right? Is it even possible to specify auth, version, api *for a module*, in a way that matters for dependency management?

[09:52] <dakkar> I don't think so, no

[09:52] <discord-raku-bot> <Nemokosch> because my most obvious point against this whole design in the first place is that you need to specifically know the distribution anyway, it's not possible to abstract it away, by the very design

[09:53] <dakkar> uh?

[09:54] <discord-raku-bot> <Nemokosch> the distribution provides the metadata used for fully specifying the module to retrieve

[09:55] <dakkar> sure, but I only care about that metadataâ€¦ if the author splits a distribution in two, without changing the module names / authority / api, and the new distributions have versions >= the old distribution's version, I don't really need to care at `use` time

[09:55] <dakkar> once installed, we can really pretend the metadata is attached to the module

[09:56] <discord-raku-bot> <Nemokosch> IF the author does something very specific

[09:57] <discord-raku-bot> <Nemokosch> but why would the author 1. split the distribution in two 2. if they do - manage the metadata with an implicit connection inherited?

[09:57] <discord-raku-bot> <Nemokosch> that's a very delicate situation

[09:57] <dakkar> updating the `api` number is also something the author must remember to do

[09:57] <dakkar> we always depend on authors being careful

[09:58] <dakkar> with perl5/cpan, we do attach the version to the module

[09:58] <discord-raku-bot> <Nemokosch> the author can be careful by simply not trying to split distributions afterwards

[09:59] <dakkar> with the result that a ton of distributions have modules with different version numbers

[09:59] <discord-raku-bot> <Nemokosch> because the author knows that a distribution is an undivisible unit by META6

[09:59] <dakkar> which is *very confusing*

[09:59] <discord-raku-bot> <Nemokosch> I don't know what you are talking about. A distribution CANNOT have modules with different version numbers, we have just clarified that.

[09:59] <dakkar> re: split, sure, that was an example I came up with to show that, at `use` time, you don't really need to care about where a module came from, you only need to specify what you (the user) care about

[10:00] <dakkar> re: different version numbers, I said "in perl5/cpanâ€¦"

[10:00] <discord-raku-bot> <Nemokosch> okay, that's 3 lines above for me

[10:03] <discord-raku-bot> <Nemokosch> dakkar: I agree for `use`. Tbh `use` can't even work differently, without coming up from something fundamentally different from scratch. My whole point is that dependency management has no meaningful reason to "dumb down" to the level of `use`.

[10:03] <dakkar> I clearly arrived in the middle of a longer discussion, and lack enough contextâ€¦

[10:04] <discord-raku-bot> <Nemokosch> For cpan: I think this is a really good point why this whole "share distributions, look up modules" approach is something to be fixed about Perl5

[10:06] <discord-raku-bot> <Nemokosch> dakkar: well, I felt I needed to clarify that `use X` shouldn't matter for dependency management because e.g you have different metadata to make decisions upon. And this does seem to be recurring in the "longer discussion"...

[10:12] <discord-raku-bot> <Nemokosch> My stance/role in the "longer discussion" is there are two choices. I think the right choice - and to my judgement, the simpler choice, even - would be to ditch the design and consistently migrate to distributions as dependencies; maybe offering a fallback to the "historical spec" but that should be a secondary thing at best.

[10:12] <discord-raku-bot> <Nemokosch> But there is also the choice to consistently and eagerly applying the practices required for the supposed design.

[10:13] <discord-raku-bot> <Nemokosch> I named 3 examples in my Raku scratchpad: https://github.com/2colours/Raku-ideas/blob/main/Biggest%20wishes.md

[10:13] <jaguart> I think Modules can have their own version independant of the distribution Meta6

[10:14] <jaguart> you can ask $module.^ver to see the module version

[10:15] <discord-raku-bot> <Nemokosch> jaguart: modules exist on code level so that's fairly certain

[10:15] <discord-raku-bot> <Nemokosch> the thing is, that won't help you at dependency resolution time...

[10:15] <jaguart> and it can be different from the distribution meta version

[10:15] <discord-raku-bot> <Nemokosch> it's not transparent enough for that.

[10:15] <jaguart> I can check further, but the compiled things are all keyed by their version too

[10:17] <discord-raku-bot> <Nemokosch> I don't know if the spec has a say about what an ecosystem consists of, or how recommendations are made

[10:17] <jaguart> even a single compunit can contain multiple modules - each with their own auth/version/api

[10:17] <discord-raku-bot> <Nemokosch> one thing is quite sure: at the moment, it's the META6 files that can provide data for dependency management, and pretty much only them.

[10:18] <discord-raku-bot> <Nemokosch> Actually, you are making really good points for what I'm saying

[10:18] <jaguart> for install or execution?

[10:18] <discord-raku-bot> <Nemokosch> installation

[10:20] <discord-raku-bot> <Nemokosch> You are perfectly demonstrating why `use` wouldn't act like the dependency resolution and installation

[10:20] <jaguart> isn't that just a broad-stroke installation thing - if you wanted zef to act like apt you would have to do the dependency at the lowest level

[10:20] <discord-raku-bot> <Nemokosch> I'm not sure what this means

[10:21] <jaguart> I dont know how modules get their auth/ver/api if it's not specified - maybe as dakkar said it's backfilled from the meta

[10:22] <jaguart> It is annoying though how a meta6 in the cwd screws with module loading

[10:23] <dakkar> see https://docs.raku.org/type/CompUnit::Repository::Installation#method_install and https://docs.raku.org/type/Distribution

[10:23] <discord-raku-bot> <Nemokosch> I mean, anyway. When you install a... distribution, even if you theoretically mark the modules as the dependencies, the lookup can only happen based on the META6 file, and that doesn't specify individual auth-api-version for modules

[10:23] *** jpn joined
[10:35] <jaguart> I'm currently working on grokking compunits from disk - I'm working in a folder with a META6.json - I see that even though compunits are loaded from other distributions, the current (unrelated) distribution is attached to the compunit. Probably explains some of the oddities when you work in a folder with a meta6.json

[10:36] <jaguart> I will dig tomorrow - it's 21:36 in Melb.

[10:36] <discord-raku-bot> <Nemokosch> ðŸ¥±

[10:39] *** jpn left
[10:39] <jaguart> this gist as an example: https://gist.github.com/jaguart/199e14bf31825547514c41042282d03c

[10:42] *** jpn joined
[10:53] <discord-raku-bot> <Nemokosch> how do you use it?

[10:56] *** Kaiepi joined
[11:11] *** jpn left
[11:26] *** jjido joined
[11:27] *** jjido left
[11:30] *** alfonsox joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:05] *** jpn joined
[12:10] *** jpn left
[12:16] *** jpn joined
[12:29] * lizmat clickbaits https://rakudoweekly.blog/2023/01/09/2023-02-microfeatures/

[12:38] *** discord-raku-bot left
[12:38] *** discord-raku-bot joined
[12:41] *** jpn left
[12:47] *** andreoss` left
[12:48] *** andreoss` joined
[12:56] *** discord-raku-bot left
[12:56] *** discord-raku-bot joined
[13:00] *** jpn joined
[13:05] *** jpn left
[13:06] *** razetime left
[13:15] *** dakkar left
[13:16] *** dakkar joined
[13:16] *** dakkar left
[13:16] *** jpn joined
[13:17] *** dakkar joined
[13:17] *** dakkar left
[13:35] *** MoC joined
[13:44] <discord-raku-bot> <Skarsnik> I am trying to build rakudo 2016.1 and I get a Can't locate build/setup.pm in @INC error. Someone remember what module do I need? x)

[13:44] *** lichtkind joined
[13:44] <lizmat> wow

[13:45] <lizmat> setup.pm ?

[13:45] *** jpn left
[13:46] <discord-raku-bot> <Nemokosch> there's a reason rakubrew can't build 2016.1, and iirc it's blamed on Perl indeed

[13:46] <discord-raku-bot> <Skarsnik> Well, it was working in 2016 x)

[13:47] <discord-raku-bot> <Nemokosch> https://github.com/Raku/App-Rakubrew/issues/45

[13:48] <patrickb> it's the back compat breaking "remove . from inc" change Perl went through. I don't think there is a sensible way to fix this.

[13:49] <patrickb> Ah, Nemokosch already dug out an issue.

[13:49] <discord-raku-bot> <Skarsnik> I could add . to PERL5LIB?

[13:55] <discord-raku-bot> <Skarsnik> Where the hell is the setup.pm anyways ^^

[13:58] *** jpn joined
[14:00] *** razetime joined
[14:06] *** jpn left
[14:09] <discord-raku-bot> <Skarsnik> Ok, here we go, compiling all rakudo from 2016.1 x)

[14:10] <lizmat> Skarsnik could you document how you did that?

[14:10] <lizmat> also note that some commits are unbuildable

[14:10] <lizmat> I've made a few over the years :-(

[14:11] <discord-raku-bot> <Skarsnik> I only take tagged release

[14:11] <discord-raku-bot> <Skarsnik> I don't have PetaBytes of storage sadly x)

[14:12] <discord-raku-bot> <Skarsnik> I should have multithread the thing, since rakudo build does not take much core

[14:12] <lizmat> it should take 1 core and a bit though

[14:14] *** dakkar joined
[14:14] <nine> You are mixing design and implementation. What's currently implemented is the installation process taking version, auth, etc. from the distribution only. But the design doesn't prescribe that. We can extend the system to take the versions from the comp units themselves if the need arises.

[14:15] <lizmat> nine: wrong channel?

[14:15] <nine> No, just a bit late to the discussion

[14:15] <lizmat> ah ok

[14:15] <discord-raku-bot> <Skarsnik> I think there was a 'simple' way to split a loop into multithrad/process ?

[14:16] <discord-raku-bot> <Skarsnik> The script that does the dl/build is a raku script

[14:16] <lizmat> .race(:1batch)

[14:17] *** xinming_ joined
[14:19] <discord-raku-bot> <Nemokosch> nine: I don't know if it prescribes it or not but it's much more important that what it does describe drifted in this very direction for obvious reasons. There is an archive for obtaining the sources and a META6 file corresponding to the *distribution*.

[14:19] *** jpn joined
[14:20] <discord-raku-bot> <Nemokosch> Yes, probably it could be done right even with the handicap this approach itself gives. Will it ever happen? With the attitude that even denies the problem, surely not.

[14:21] <discord-raku-bot> <Skarsnik> I replace 'for @rakudo-version ->  $rakudo {' with  for '@rakudo-version.race(6) -> $rakudo {' ?

[14:22] *** Kaiepi left
[14:22] *** Kaiepi joined
[14:25] <discord-raku-bot> <Skarsnik> I am not sure if this is safe anyways, I use the shell function to execute command ~~

[14:27] <discord-raku-bot> <Nemokosch> does race take a positional argument?

[14:30] <discord-raku-bot> <Skarsnik> Oh right, it's a named one

[14:40] <discord-raku-bot> <Nemokosch> I think shell is blocking but I wouldn't bet my life how that works on multiple threads

[14:41] <discord-raku-bot> <Nemokosch> there is the cool thing Proc::Async which is more sophisticated

[14:50] *** jgaz joined
[14:56] <discord-raku-bot> <Skarsnik> anyways, the code of this is <https://gist.github.com/Skarsnik/e6835801c015640cedb8f2b84d5c3980> I am too lazy to bother with proc::async x)

[15:24] <discord-raku-bot> <Nemokosch> did the exporting work? if it did, it probably won't go away afterwards anyway

[15:27] <discord-raku-bot> <Skarsnik> yes, but need to update it for each rakudo

[15:29] <discord-raku-bot> <Skarsnik> 2016 done, halfway through 2017

[15:37] <discord-raku-bot> <Nemokosch> oh right, the variable changes

[15:50] *** linkable6 left
[15:50] *** evalable6 left
[15:50] *** linkable6 joined
[15:52] *** evalable6 joined
[15:55] *** Sgeo joined
[15:58] *** MoC left
[16:04] <discord-raku-bot> <Nemokosch> I came across an interesting error while piping raku -e's one after the other: trying to write a long line resulted in an error for MoarVM

[16:04] <discord-raku-bot> <Nemokosch> again, when would this happen if not while work ðŸ˜…

[16:12] <discord-raku-bot> <Nemokosch> piping raku over raku may also play a role

[16:22] *** jpn left
[16:26] *** jpn joined
[16:41] <discord-raku-bot> <Skarsnik> 2018.05 failed, hm

[16:43] <discord-raku-bot> <Skarsnik> linking 3rdparty/libuv/libuv.a

[16:43] <discord-raku-bot> <Skarsnik> linking libmoar.so

[16:43] <discord-raku-bot> <Skarsnik> /usr/bin/ldÂ : src/6model/serialization.o:(.bss+0x0)Â : dÃ©finitions multiples de Â«Â cmp_tcÂ Â»; src/6model/reprs/MVMHash.o:(.bss+0x0)Â : dÃ©fini pour la premiÃ¨re fois ici

[16:43] <discord-raku-bot> <Skarsnik> collect2: error: ld returned 1 exit status

[16:46] <discord-raku-bot> <Skarsnik> same error on 06

[16:56] <discord-raku-bot> <Nemokosch> such French

[16:57] *** alfonsox left
[17:00] *** jpn left
[17:14] *** razetime left
[17:21] *** grondilu joined
[17:21] <grondilu> m: use NativeCall; # testing if I can show NativeCall code here

[17:21] <camelia> rakudo-moar c4080f953: ( no output )

[17:22] <grondilu> m: use NativeCall; my @a := CArray[num32].new; @a[$_] = rand for ^10; print nativesizeof(@a)

[17:22] <camelia> rakudo-moar c4080f953: OUTPUT: Â«8Â»

[17:22] <grondilu> why 8?

[17:23] <grondilu> m: use NativeCall; my $a = CArray[num32].new; $a[$_] = rand for ^10; print nativesizeof($a)

[17:23] <camelia> rakudo-moar c4080f953: OUTPUT: Â«8Â»

[17:23] <grondilu> m: use NativeCall; my $a = CArray[num32].allocate(10); $a[$_] = rand for ^10; print nativesizeof($a)

[17:23] <camelia> rakudo-moar c4080f953: OUTPUT: Â«8Â»

[17:24] <grondilu> ðŸ¤·

[17:24] <grondilu> m: use NativeCall; my $a = CArray[num64].allocate(10); $a[$_] = rand for ^10; print nativesizeof($a)

[17:24] <camelia> rakudo-moar c4080f953: OUTPUT: Â«8Â»

[17:24] <grondilu> ðŸ˜•

[17:37] *** dakkar left
[17:45] <discord-raku-bot> <Nemokosch> is this what you also see for yourself?

[17:51] <discord-raku-bot> <Skarsnik> nativesizeof give only the size of the 'container' I think

[17:58] <discord-raku-bot> <Skarsnik> since you always need to know the size of an array in C.

[17:59] <discord-raku-bot> <Skarsnik> 2018-2019 refuse to build too ><

[17:59] <discord-raku-bot> <Skarsnik> 2022.12 was fine

[18:00] *** reportable6 left
[18:00] <discord-raku-bot> <Nemokosch> do they contain corresponding NQP and Moar versions as well?

[18:00] *** reportable6 joined
[18:01] <discord-raku-bot> <Skarsnik> I build from release tarball

[18:02] <discord-raku-bot> <Nemokosch> yes, I mean do they contain this stuff?

[18:07] *** abraxxa left
[18:09] *** thowe left
[18:10] *** thowe joined
[18:11] <discord-raku-bot> <Skarsnik> no, it's always get by git I think

[18:24] <discord-raku-bot> <Nemokosch> I wouldn't be surprised if there were "misbumps" or something of that sort

[18:27] <lizmat> yeah, that's happened as well  :-(

[18:27] <lizmat> but not with release versions afaik

[18:30] *** lichtkind left
[18:38] <discord-raku-bot> <Skarsnik> yes

[18:39] <discord-raku-bot> <Skarsnik> especially on like a whole year

[18:39] <lizmat> ooh  wow  

[18:39] *** jgaz left
[18:41] <discord-raku-bot> <Skarsnik> 2019.07.1

[18:41] <discord-raku-bot> <Skarsnik> Can't locate NQP/Config.pm in @INC (you may need to install the NQP::Config module) (@INC contains: /mnt/hgfs/Perl6/benchmark/rakudo-2019.07.1/tools/lib /mnt/hgfs/Perl6/benchmark/rakudo-2019.07.1/3rdparty/nqp-configure/lib /mnt/hgfs/Perl6/benchmark/rakudo-2016.01.1/nqp/MoarVM/ /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.32.1 /usr/local/share/perl/5.32.1 /usr/lib/x86_64-linux-gnu/perl5/5.32 /usr/share/perl5 /u

[18:42] <ugexe> are you building using e.g. rakubrew?

[18:43] <discord-raku-bot> <Skarsnik> No, I build from release tarball

[18:46] <discord-raku-bot> <Skarsnik> Not sure why it the configure.pl keep failing now

[18:55] *** jgaz joined
[18:57] <ugexe> 2019.07 is around when rakudo was updated to use https://github.com/Raku/nqp-configure I think

[19:02] *** ab5tract joined
[19:06] *** bigdata joined
[19:18] <discord-raku-bot> <Skarsnik> 2020.06 has the same issue

[19:19] <discord-raku-bot> <Skarsnik> I skipp 2018-2020 so far

[19:19] <ugexe> i imagine it has to do with git submodules

[19:20] <tonyo> .

[19:20] <discord-raku-bot> <Skarsnik> I just run perl Configure.pl --gen-moar --gen-nqp --backends=moar

[19:20] <ugexe> but you are using tarballs

[19:21] <ugexe> if you were cloning the git repo and switching to that tag it might work due to submodules

[19:21] <discord-raku-bot> <Skarsnik> Yeah, but usally release tar ball work

[19:21] *** ab5tract left
[19:22] <tonyo> if you have moar or nqp in the environment already you can omit those two flags

[19:22] <discord-raku-bot> <Skarsnik> it worked throu 2016-2017

[19:22] <discord-raku-bot> <Skarsnik> No, because I want to build with then

[19:23] <tonyo> is there a .gitmodules in the release tar?

[19:24] <discord-raku-bot> <Skarsnik> skarsnik@debianraku:/mnt/hgfs/Perl6/benchmark/rakudo-2022.03$ cat .gitmodules 

[19:24] <discord-raku-bot> <Skarsnik> [submodule "3rdparty/nqp-configure"]

[19:24] <discord-raku-bot> <Skarsnik>     path = 3rdparty/nqp-configure

[19:24] <discord-raku-bot> <Skarsnik>     url = https://github.com/Raku/nqp-configure.git

[19:25] *** ab5tract joined
[19:25] <tonyo> is the 3rdparty/nqp-configure directory empty in the release tar?

[19:25] <tonyo> or nonexistent 

[19:26] *** El_Che left
[19:26] <discord-raku-bot> <Skarsnik> Why should it matter? the configure script is supposed fetch everything. I always built using release x)

[19:27] *** El_Che joined
[19:29] *** Kaiepi left
[19:31] *** grondilu left
[19:34] *** lichtkind joined
[19:43] *** jgaz left
[19:49] *** ab5tract left
[19:57] <ugexe> that doesn't really answer their question

[20:06] <discord-raku-bot> <Skarsnik> but yes it's emtpy

[20:09] *** Kaiepi joined
[20:12] *** jgaz joined
[20:14] <discord-raku-bot> <Skarsnik> (sorry for delay between reply x))

[20:24] *** bigdata left
[20:29] *** jpn joined
[20:33] *** ab5tract joined
[20:40] <ugexe> well, thats why it cant find NQP::Configure, and why the script can't even compile (and hence doesn't matter if its actually needed or not)

[20:43] *** ab5tract left
[21:00] *** Maylay left
[21:01] *** Maylay joined
[21:01] <discord-raku-bot> <Skarsnik> Yes, but is the configure script supposed to do the correct git stuff to have all the component?

[21:01] *** jpn left
[21:02] <ugexe> the configure script cant compile

[21:02] <ugexe> its missing NQP::Configure

[21:02] <ugexe> which is a submodule of the rakudo repo

[21:03] <ugexe> the configure script can't do anything until it can compile

[21:03] <ugexe> should nqp-configure/ be missing from the release tarball? I dunno, probably not. but that sure seems why it isn't working for you

[21:03] *** bigdata joined
[21:06] <discord-raku-bot> <Skarsnik> Ho I think I found why maybe, the script download tagged source I think and not release

[21:10] *** ab5tract joined
[21:19] *** ab5tract left
[21:23] *** ProperNoun left
[21:27] <discord-raku-bot> <Skarsnik> ok, all 2018 compile fine now, sorry for the dumb mistae x)

[21:51] *** jpn joined
[21:51] *** jaguart left
[21:56] *** bigdata left
[22:11] *** jgaz left
[22:11] *** jaguart joined
[22:21] *** Xliff joined
[22:53] *** jpn left
[22:58] *** sena_kun left
[23:19] *** lichtkind left
[23:38] *** lichtkind joined
[23:49] *** jpn joined
[23:55] *** jpn left
