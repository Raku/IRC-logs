[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:14] *** Manifest0 left
[00:18] *** ProperNoun left
[01:04] *** jpn joined
[01:09] *** jpn left
[02:06] *** derpydoo joined
[02:23] *** pony joined
[03:23] *** squashable6 left
[03:23] *** sourceable6 left
[03:23] *** nativecallable6 left
[03:23] *** statisfiable6 left
[03:23] *** notable6 left
[03:23] *** greppable6 left
[03:23] *** shareable6 left
[03:23] *** committable6 left
[03:23] *** reportable6 left
[03:23] *** evalable6 left
[03:23] *** quotable6 left
[03:23] *** unicodable6 left
[03:23] *** bloatable6 left
[03:23] *** coverable6 left
[03:23] *** benchable6 left
[03:23] *** tellable6 left
[03:23] *** linkable6 left
[03:23] *** releasable6 left
[03:23] *** bisectable6 left
[03:23] *** tellable6 joined
[03:23] *** benchable6 joined
[03:23] *** greppable6 joined
[03:23] *** shareable6 joined
[03:23] *** sourceable6 joined
[03:23] *** nativecallable6 joined
[03:24] *** coverable6 joined
[03:24] *** releasable6 joined
[03:24] *** notable6 joined
[03:24] *** evalable6 joined
[03:24] *** reportable6 joined
[03:24] *** linkable6 joined
[03:25] *** statisfiable6 joined
[03:25] *** committable6 joined
[03:25] *** quotable6 joined
[03:25] *** bloatable6 joined
[03:25] *** unicodable6 joined
[03:25] *** bisectable6 joined
[03:25] *** squashable6 joined
[04:25] *** coverable6 left
[04:25] *** bloatable6 left
[04:25] *** shareable6 left
[04:25] *** notable6 left
[04:25] *** unicodable6 left
[04:25] *** quotable6 left
[04:25] *** sourceable6 left
[04:25] *** benchable6 left
[04:25] *** bisectable6 left
[04:25] *** releasable6 left
[04:25] *** tellable6 left
[04:25] *** squashable6 left
[04:25] *** evalable6 left
[04:25] *** greppable6 left
[04:25] *** nativecallable6 left
[04:25] *** statisfiable6 left
[04:25] *** committable6 left
[04:25] *** reportable6 left
[04:25] *** linkable6 left
[04:25] *** coverable6 joined
[04:26] *** statisfiable6 joined
[04:26] *** evalable6 joined
[04:26] *** shareable6 joined
[04:26] *** greppable6 joined
[04:27] *** quotable6 joined
[04:27] *** bloatable6 joined
[04:27] *** benchable6 joined
[04:27] *** notable6 joined
[04:27] *** reportable6 joined
[04:27] *** releasable6 joined
[04:27] *** sourceable6 joined
[04:27] *** committable6 joined
[04:27] *** bisectable6 joined
[04:28] *** linkable6 joined
[04:28] *** unicodable6 joined
[04:28] *** tellable6 joined
[04:28] *** nativecallable6 joined
[04:28] *** squashable6 joined
[05:25] *** kst left
[05:26] *** kst joined
[05:45] *** abraxxa joined
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[07:02] *** nativecallable6 left
[07:02] *** releasable6 left
[07:02] *** committable6 left
[07:02] *** greppable6 left
[07:02] *** sourceable6 left
[07:02] *** bisectable6 left
[07:02] *** tellable6 left
[07:02] *** coverable6 left
[07:02] *** benchable6 left
[07:02] *** statisfiable6 left
[07:02] *** quotable6 left
[07:02] *** linkable6 left
[07:02] *** bloatable6 left
[07:02] *** evalable6 left
[07:02] *** squashable6 left
[07:02] *** unicodable6 left
[07:02] *** notable6 left
[07:02] *** reportable6 left
[07:02] *** shareable6 left
[07:02] *** committable6 joined
[07:02] *** sourceable6 joined
[07:03] *** releasable6 joined
[07:03] *** nativecallable6 joined
[07:03] *** tellable6 joined
[07:03] *** coverable6 joined
[07:03] *** benchable6 joined
[07:03] *** bloatable6 joined
[07:03] *** shareable6 joined
[07:04] *** reportable6 joined
[07:04] *** squashable6 joined
[07:04] *** quotable6 joined
[07:04] *** greppable6 joined
[07:04] *** unicodable6 joined
[07:04] *** notable6 joined
[07:04] *** bisectable6 joined
[07:04] *** evalable6 joined
[07:04] *** linkable6 joined
[07:04] *** statisfiable6 joined
[07:36] *** MoC joined
[07:37] *** Sgeo left
[07:44] *** MoC left
[07:47] *** kst left
[07:57] *** dakkar joined
[07:57] *** jpn joined
[08:18] *** derpydoo left
[08:23] *** teatwo joined
[08:23] *** teatwo left
[08:24] *** teatwo joined
[08:25] *** teatime left
[08:46] <discord-raku-bot> <grondilu> Hi all.  Can the gcc builtin be accessed via NativeCall?  https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html  I tried and failed.

[08:47] <discord-raku-bot> <grondilu> I tried the very naive :  use NativeCall;  sub __builtin_clz(uint8 $ --> int8) is native {*} 

[08:48] <discord-raku-bot> <grondilu> and got :    ===SORRY!=== Error while compiling    Cannot locate symbol '__builtin_clz' in native library ''   at line  

[08:49] <dakkar> those don't really exist

[08:50] <dakkar> they are added (almost certainly as `static`, i.e. not visible to the linker) by the compiler to objects (programs, libraries) that need them

[08:52] <discord-raku-bot> <grondilu> I see.  So I suppose if I really want to use them I need to write a wrapper library?

[08:53] <dakkar> ah, yes ¬´GCC built-in functions are always expanded inline and thus do not have corresponding entry points and their address cannot be obtained¬ª

[08:53] <dakkar> not even `static`, inlined directly

[08:55] <dakkar> tbf, I'd first ask why you want to access them

[08:55] <dakkar> they're either equivalent to libc functions, or very special

[08:56] <dakkar> (you may have a very good reason, but it's still useful to know it)

[08:56] *** wafflus joined
[08:57] <discord-raku-bot> <grondilu> I'd like to implement https://www.rosettacode.org/wiki/Posit_numbers but make it as fast as possible.

[08:58] <dakkar> you know where to find an assembler üòú

[08:59] <wafflus> is it a bug if I tell a function to return a int and it returns a Nil and does not crash

[09:00] <wafflus> if i return a string it does crash

[09:00] <dakkar> grondilu: also notice that the GCC builtins you were looking at, may change with any gcc release, they're pretty much "internal use only"

[09:00] <dakkar> wafflus: `int` or `Int`?

[09:00] <wafflus> Int

[09:01] <wafflus> i mean i could tell it to return a Str and it will still work but the signature would be a lie

[09:01] <dakkar> Int is an object type, Nil is a valid value for it

[09:01] <dakkar> although‚Ä¶

[09:01] <wafflus> well that seems silly

[09:02] <dakkar> there's‚Ä¶ a bunch of reasons, some good

[09:03] <dakkar> m: Nil ~~ Int

[09:03] <camelia> rakudo-moar b70ca769f: ( no output )

[09:03] <wafflus> ok i guess i shouldnt question larry

[09:03] <wafflus> :D

[09:03] <dakkar> m: say Nil ~~ Int

[09:03] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´False‚ê§¬ª

[09:03] <dakkar> m: sub foo(-->Int) { return Nil }; say foo()

[09:03] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´Nil‚ê§¬ª

[09:03] <discord-raku-bot> <grondilu> chatGPT just told me there is no "count leading zero" in libc, but it gave me the equivalent code with bitshift ops.  I guess I can write it in raku and it should not be much slower.

[09:03] <dakkar> that's the surprising bit, I guess?

[09:03] <wafflus> yes

[09:04] <wafflus> i mean i would kind of expect it to behave the same as when i return a string

[09:04] <wafflus> when it was expecting a Int

[09:04] <dakkar> grondilu: ‚ë† never trust LLMs / Markov chains ‚ë° that page you linked already said that ‚ë¢ "correct" should win over "fast" any day

[09:05] <wafflus> also it be cool if it could detect the error when i was creating it as well

[09:05] <dakkar> lizmat: do you happen to know/remember why returning a Nil is allowed even if it doesn't match the return type? I think there's reasons, but I can't remember

[09:06] <dakkar> wafflus: sorry, you lost me there; when you were creating what?

[09:07] <lizmat> dakkar: initially, Failures were also always allowed to be returned

[09:07] <lizmat> when Nil got introduced, it was Nil that is always allowed to be returned

[09:07] <lizmat> m: sub a(--> Int:D) { Nil }; dd a

[09:07] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´Nil‚ê§¬ª

[09:07] <wafflus> if you write a function that is obviously incorrect i think raku should not create the function and say the types are incorrect like returning a Str when it should be an Int. instead it just compiles and crashes at run time

[09:07] <lizmat> dakkar: at that time, Failure became a subclass of Nil

[09:07] <wafflus> some of my terminology may be slightly incorrect

[09:08] <lizmat> m: dd Failure.^mro

[09:08] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´(Failure, Nil, Cool, Any, Mu)‚ê§¬ª

[09:08] <lizmat> and this Failures are also always allowed to be returned

[09:08] <lizmat> *thus

[09:08] <dakkar> aha! thank you

[09:09] <dakkar> wafflus: in the general case, what you are asking for is impossible; in many specific cases, it could be implemented (like, the compiler could do a lot of static analysis / data flow / &c and determine that the function could not possibly ever work, and tell you)

[09:10] <dakkar> just, nobody got around to it yet

[09:10] <wafflus> i've seen something simlar done in F# but much more complicated

[09:10] <lizmat> dakkar: which implies, if you want a class to be always returnable, make it a subclass of Nil:

[09:10] <lizmat> m: class A is Nil { method raku() { "foo" } }; sub a(--> Int:D) { A }; dd a

[09:10] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´foo‚ê§¬ª

[09:11] <dakkar> lizmat: that's the kind of cheating we like in the Perl family, but that we never want to see in Real Code‚Ñ¢ üòÅ

[09:11] <dakkar> btw, is there any way to mark a function as "no, I'll never return a Failure/Nil"?

[09:12] <lizmat> create a subset with a constraint that will die if given a Nil ?

[09:12] <lizmat> and then --> thatconstraint ?

[09:12] <dakkar> m: sub foo(-->Int:D) { return Nil }; say foo()

[09:12] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´Nil‚ê§¬ª

[09:13] <dakkar> ehrm

[09:15] <dakkar> also, I asked my question badly‚Ä¶ what I really meant is: would it make sense to have a way to tell _the compiler_ that we intend this function to never return a Failure/Nil, so that future implementations may exploit that fact?

[09:15] <lizmat> meh, that idea doesn't fly, as the constraint check is simply bypassed for Nil apparently

[09:15] <discord-raku-bot> <grondilu> If I want the two-complement of an unsigned int, can I just negate it?   say -my uint8 $ = 1

[09:16] <dakkar> grondilu: I feel you're confusing values and representations

[09:16] <discord-raku-bot> <grondilu> that is likely

[09:16] <lizmat> dakkar: that makes sense

[09:17] <dakkar> grondilu: if you want the complement of a *string of bits*, you operate on the bits; if you want the negative value of a number, you negate it‚Ä¶

[09:18] <discord-raku-bot> <grondilu> what about my uint8 $ = -my int8 $ = my uint8 $ = 1  ?

[09:18] <dakkar> grondilu: if you want to see the representation of a number as a string of bits‚Ä¶ you have to dig in the innards of whatever implementation you're using (and sometimes this digging ends below the asm level)

[09:18] <wafflus> i tried to do a !Nil no luck

[09:18] <dakkar> wafflus: yes, that's what we've just noticed, you can always return Nil from a function (unless it returns a native, non-boxed type, but those are a different beast)

[09:18] <dakkar> m: sub foo(-->int) { return Nil }; say foo()

[09:18] <camelia> rakudo-moar b70ca769f: OUTPUT: ¬´Cannot unbox a type object (Nil) to int.‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:19] <discord-raku-bot> <grondilu> dakkar: that can't possibly be that complicated, can it?

[09:19] <lizmat> heh... that feels like a bug

[09:19] <dakkar> lizmat: the unbox, or that you can return Nil from a sub marked `-->Int:D`?

[09:19] <lizmat> the unbox

[09:20] <dakkar> grondilu: depends! if you want a twos-complement representation, you "just" write your own representation code; if you want to see how the language+runtime+computer actually represents things‚Ä¶ that may be very complicated

[09:21] <dakkar> lizmat: `int` can't represent an undefined value, so (apart from maybe a LTA error message), the behaviour feels correct to me

[09:23] * wafflus thinks it silly to have two things with the same name (int or int) to confuse people

[09:24] <dakkar> wafflus: the naming is sub-optimal, yes; the fact that we have both is actually pretty important

[09:25] <dakkar> values of type `Int` are objects: they have methods, you can subclass them, apply traits, &c&c

[09:25] <dakkar> values of type `int` are raw numbers: you can only do some arithmetic with them, but they take less space in memory and are a bit faster

[09:26] <wafflus> k cool

[09:27] <dakkar> (other languages have the same distinction, often with the same sub-optimal naming, e.g. Java https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html )

[09:27] <wafflus> int also initilizes a value

[09:27] <wafflus> and makes it defined

[09:27] <wafflus> ¬†ofc but we learn form our mistakes hopefully

[09:27] <dakkar> more or less. more precisely: values of type `int` cannot be undefined, and have a default value of `0`

[09:29] <wafflus> maybe the shold have called it a qint¬† for a quick int :)

[09:33] *** abraxxa left
[09:48] *** abraxxa joined
[09:58] <discord-raku-bot> <nemokosch> I opened an issue for "Failure is Nil" once upon

[09:58] <discord-raku-bot> <nemokosch> it wasn't well received tbh

[09:58] <discord-raku-bot> <nemokosch> > that's the kind of cheating we like in the Perl family, but that we never want to see in Real Code‚Ñ¢ üòÅ that's very much on point...

[09:59] <discord-raku-bot> <nemokosch> int is basically a VM-level integer, practically the same thing as C's int

[10:26] *** guifa joined
[10:30] <guifa> o/

[10:35] *** jpn left
[10:42] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/09/18/2023-38-new-search/

[10:44] <discord-raku-bot> <nemokosch> lizmat++ spreading the word about the new search is the best thing we can do for UX at the moment

[10:52] *** guifa left
[11:02] <wafflus> a suggestion for the manual when you search sometime it comes up with multiple version of the same keyword. it would be nice if you could tell the difference between the two before you click on the page

[11:03] <wafflus> for example search for do and you will get two do's

[11:05] <discord-raku-bot> <nemokosch> have you seen https://new-raku.finanalyst.org/ ?

[11:05] <wafflus> nope

[11:06] <wafflus> looks interesting and better

[11:06] <wafflus> however

[11:07] <wafflus> not sure when i search for do i think it maybe should list the do first

[11:07] <wafflus> and not about docs

[11:07] <wafflus> but those at the bottom

[11:07] <wafflus> put

[11:09] <lizmat> please report your findings at https://github.com/Raku/doc-website/issues/new/choose   :-)

[11:10] <discord-raku-bot> <nemokosch> yeah fair enough

[11:12] <wafflus> lizmat is that an issue or a complaint though?

[11:13] <lizmat> it's a comment?   

[11:13] <lizmat> at this point, any comment / suggestion / complaint / issue is welcome to get more feedback

[11:13] * wafflus does not have a github account atm

[11:14] <lizmat> ah...  hmmm....

[11:14] <lizmat> is it a problem for you to get one ?

[11:15] <wafflus> i can get one i just don't like using my real emails

[11:16] <wafflus> or i had one and i forgot the email

[11:17] <wafflus> i guess thats strange these days

[11:17] <wafflus> that one of the reason i use IRC

[11:19] <discord-raku-bot> <nemokosch> not many reasons remain for using IRC these days, that's for sure...

[11:19] <discord-raku-bot> <nemokosch> even XMPP is kinda retro and it's rocket science compared to IRC

[11:20] <wafflus> i'm also kind of private and maybe paranoid about it

[11:22] <discord-raku-bot> <nemokosch> Okay, now a bit of English

[11:22] <wafflus> plus alot of these online forms are a little mod heavy

[11:22] <discord-raku-bot> <nemokosch> because I'm not sure if English is at fault or the user in this case...

[11:22] <discord-raku-bot> <nemokosch> so what does it mean if I say

[11:22] <discord-raku-bot> <nemokosch> "any of these numbers is greater than 5"

[11:23] *** ProperNoun joined
[11:23] <discord-raku-bot> <nemokosch> to me this would mean all of them

[11:24] <wafflus> to me it would be any or all

[11:24] <discord-raku-bot> <nemokosch> okay but what does it mean with "any",

[11:24] <discord-raku-bot> <nemokosch> ?

[11:25] <wafflus> i guess

[11:25] <wafflus> what if

[11:25] <wafflus> you go throught each person and you ask if any of them want to reaise there hand from the perspective of each person they would all be any

[11:25] <wafflus> if that makes sense

[11:26] <discord-raku-bot> <nemokosch> I get that

[11:26] <wafflus> but maybe your is more correct english wize

[11:26] *** guifa joined
[11:26] <wafflus> you are more correct

[11:26] <discord-raku-bot> <nemokosch> that would mean "is there a person P for which P wants to raise their hand"

[11:27] <discord-raku-bot> <nemokosch> but I feel that there is a difference of meaning with a statement

[11:27] *** guifa left
[11:27] <discord-raku-bot> <nemokosch> "is any of these numbers greater than 5" clearly means "is there a number X among these numbers for which X > 5"

[11:28] <El_Che> wafflus: use rotating burner emails?

[11:28] <discord-raku-bot> <nemokosch> it seems to me that the statement doesn't have the same meaning

[11:28] <wafflus> El_Che ok

[11:29] <wafflus> :person A to group b would anyone like to eat dinner

[11:29] *** guifa joined
[11:29] <wafflus> all could raise there hands or 1 or some

[11:30] <wafflus> or none ofc

[11:30] <discord-raku-bot> <nemokosch> "any" seems too fragile

[11:30] <discord-raku-bot> <nemokosch> "any of you can drive a car"

[11:31] <discord-raku-bot> <nemokosch> this quite clearly means "all of you"

[11:31] <discord-raku-bot> <nemokosch> "any of you are adults" - now, this just sounds stupid I think

[11:32] <wafflus> i agree with that last one lol

[11:32] <wafflus> you are probally right we need a better word

[11:33] <discord-raku-bot> <nemokosch> or take this one

[11:33] <discord-raku-bot> <nemokosch> "not anyone can do that"

[11:33] <discord-raku-bot> <nemokosch> this doesn't mean downright "nobody can do that"

[11:34] <discord-raku-bot> <nemokosch> much rather just "not all people can do that"

[11:38] <wafflus> it is kind of confusing for noobs like myself

[11:50] *** tea3po joined
[11:53] *** teatwo left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:04] <discord-raku-bot> <nemokosch> as we have come this far, I don't think we can do much about it but I think it's worth thinking about and be aware of

[12:05] <discord-raku-bot> <nemokosch> if we are using terms like "true" and "false", we are clearly thinking in statements, not questions

[12:05] <discord-raku-bot> <nemokosch> it's not terribly useful to use a word like "any" as a term, then, which has its "true meaning" in questions

[12:07] *** Vyrus left
[12:11] *** Vyrus joined
[12:23] *** Manifest0 joined
[12:40] *** wafflus left
[12:59] *** jpn joined
[13:14] *** derpydoo joined
[13:31] *** jpn left
[13:35] *** jpn joined
[13:36] <guifa> "any of you X" is the same as "all X, but has a connotation

[13:36] <guifa> err

[13:37] *** [Coke] joined
[13:37] <tea3po> I mean there's lots of this stuff in english that you run into in logic, around words like "any" and "only"

[13:37] <[Coke]> nemokosch: I did not end up getting time to work on zef-deps, still in my queue though

[13:37] <guifa> "any of X" is the same as "all X" but has a potentiality connotation (hence it's often used with might/would/could)

[13:38] <discord-raku-bot> <nemokosch> I think on a meta level "any" is like "the listener will fill this word in"

[13:39] <discord-raku-bot> <nemokosch> so when it appears in a question, it's like "can you fill it in so that we want to make it a true statement?"

[13:39] <discord-raku-bot> <nemokosch> but when it appears in a statement (often a speculative statement), it expresses a great load of confidence

[13:40] <discord-raku-bot> <nemokosch> "no matter how you fill it in, the statement will still be true"

[14:20] *** thundergnat joined
[14:25] <thundergnat> While I don't disagree that in English, "any" can have a murky meaning in a statement, in Raku, "any" means "at least one". Try substituting "at least one" into all of the above sentences and they're much less ambiguous. The problem is that English doesn't really have a better (short) word for "at least one".... and I,for one, would much rather

[14:25] <thundergnat> type any(..) than at-least-one(...).

[14:26] <thundergnat> Maybe some other language has a better word for the concept that could be appropriated. Can't readily think of one but I am not multi-lingual.

[14:27] *** thundergnat left
[14:27] *** perlbot left
[14:27] *** perlbot joined
[14:30] <tbrowder__> hi, i just released File::Copy and i would appreciate any feedback.

[14:32] <discord-raku-bot> <nemokosch> I think "some" itself is much better than "any", for what it's worth

[14:32] <discord-raku-bot> <nemokosch> moreover, "any" led to the temptation to special-case negation for Junctions, which I think nobody actually likes

[14:34] <discord-raku-bot> <nemokosch> any(a, b) != c turning into none(a, b) == c for the lolz

[14:35] <discord-raku-bot> <nemokosch> tbrowder: https://github.com/raku-community-modules/File-Find/pull/43 if you feel up to it

[14:37] <discord-raku-bot> <nemokosch> I see we got yet another HTML escaper as well...

[14:38] <discord-raku-bot> <nemokosch> is it mi6 that generates these "perl": "6.*" versions?

[14:42] *** simcop2387 left
[14:42] *** simcop2387 joined
[15:08] <tbrowder__> could be.

[15:09] <tbrowder__> have we agreed what it should be?

[15:10] *** moritz left
[15:16] *** moritz joined
[15:17] *** jpn left
[15:24] *** moritz left
[15:25] *** jpn joined
[15:33] *** jpn left
[15:45] <tbrowder__> nemokosch: ‚Äúfeel up to it‚Äù you mean ‚Äúmerge‚Äù or fix something on the PR?

[15:45] *** abraxxa left
[15:54] *** moritz joined
[15:57] <discord-raku-bot> <nemokosch> well, I see that somebody added a couple of comments...

[15:57] <discord-raku-bot> <nemokosch> that may have been me but anyway üòõ

[15:59] *** moritz left
[16:14] *** moritz joined
[16:22] *** moritz left
[16:52] *** dakkar left
[16:55] <tbrowder__> i‚Äôll see if i can fix the badges for one thing

[17:20] <[Coke]> released 0.9.8 of zef-deps which tracks the latest change in zef not to be explicit about a version

[17:20] <[Coke]> (in the case of nativecall & test)

[17:20] *** nil9 joined
[17:23] *** nil9 left
[17:23] *** nil9 joined
[17:24] *** nil9 left
[17:24] *** nil9 joined
[17:38] *** derpydoo left
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:03] *** n1to joined
[18:04] *** n1to left
[18:25] <tonyo> ?

[18:26] <[Coke]> it used to say nativecall:ver<6.c+> or similar, now it just says Nativecall

[18:26] <tonyo> ahh, less to do about how zef resolves :from<native>

[18:26] <[Coke]> you can see the test output changes (and dependency changes) here: https://github.com/coke/raku-zef-deps/commit/e47a19d6ec18ed4ed0c68d27fe326a42941ca5a9

[18:28] *** jpn joined
[18:32] *** nil9 left
[18:46] *** xinming left
[18:48] *** xinming joined
[18:50] *** nil9 joined
[19:13] <tbrowder__> nemokosch: what is ye

[19:13] <tbrowder__> *yr github handle?

[19:13] <tbrowder__> or "ye" for olde

[19:14] <tbrowder__> *oldish english

[19:15] <discord-raku-bot> <nemokosch> Just look at the PR ^^

[19:19] <tonyo> it means they when "they" are the subject, most generally

[19:21] *** nil9 left
[19:24] *** jpn left
[19:25] <tea3po> y is a substitute for letter thorn which is a ligature of t and h

[19:25] <tea3po> https://en.wikipedia.org/wiki/English_articles#Ye_form

[19:39] *** jpn joined
[19:43] *** tejr left
[19:46] *** xinming left
[19:48] *** xinming joined
[19:49] *** tejr joined
[19:59] *** jpn left
[20:17] *** lizmat_ joined
[20:20] *** lizmat left
[20:22] *** teatwo joined
[20:23] *** teatwo left
[20:24] *** teatwo joined
[20:26] *** tea3po left
[20:27] *** teatwo left
[20:28] *** teatwo joined
[20:33] <discord-raku-bot> <nemokosch> Coke: is there something like zef-deps but for reverse dependencies?

[20:34] <discord-raku-bot> <nemokosch> took some time until I realized that it's what I actually need now; basically I want to check the impact of a certain distribution

[20:36] *** teatwo left
[20:36] *** teatwo joined
[20:45] *** xinming left
[20:47] *** xinming joined
[20:51] *** jmcgnh left
[20:56] *** jmcgnh joined
[21:25] *** xinming left
[21:27] *** rba left
[21:27] *** rba joined
[21:27] *** xinming joined
[21:46] *** xinming left
[21:48] *** xinming joined
[22:12] *** Sgeo joined
[22:21] *** Maylay left
[22:21] *** Maylay joined
[22:59] *** lizmat_ left
[22:59] *** lizmat joined
[23:15] *** teatwo left
[23:17] *** teatime joined
[23:18] *** tobs left
[23:35] *** tobs joined
[23:48] *** nick55 joined
[23:48] *** moritz joined
[23:49] *** nick55 left
