[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:13] *** jpn left
[01:13] *** bloatable6 left
[01:13] *** releasable6 left
[01:13] *** sourceable6 left
[01:13] *** greppable6 left
[01:13] *** quotable6 left
[01:13] *** unicodable6 left
[01:13] *** notable6 left
[01:13] *** coverable6 left
[01:13] *** squashable6 left
[01:13] *** bisectable6 left
[01:13] *** committable6 left
[01:13] *** evalable6 left
[01:13] *** reportable6 left
[01:13] *** benchable6 left
[01:13] *** linkable6 left
[01:13] *** tellable6 left
[01:13] *** statisfiable6 left
[01:13] *** nativecallable6 left
[01:13] *** shareable6 left
[01:14] *** nativecallable6 joined
[01:14] *** tellable6 joined
[01:14] *** benchable6 joined
[01:14] *** notable6 joined
[01:14] *** sourceable6 joined
[01:14] *** statisfiable6 joined
[01:14] *** releasable6 joined
[01:14] *** bisectable6 joined
[01:15] *** linkable6 joined
[01:15] *** quotable6 joined
[01:15] *** shareable6 joined
[01:15] *** coverable6 joined
[01:15] *** committable6 joined
[01:15] *** greppable6 joined
[01:15] *** squashable6 joined
[01:16] *** evalable6 joined
[01:16] *** unicodable6 joined
[01:16] *** reportable6 joined
[01:16] *** bloatable6 joined
[01:46] *** xinming left
[01:48] *** xinming joined
[01:55] <rf> tonyo: I've having some troubles installing Fez on a SUSE server, it seems like it wants "libz" which I assume is zlib, which I have, what can I do?
[02:04] <japhb> rf: I've been getting that lately too.  Just do `zef install fez --exclude=libz`
[02:04] <japhb> (This really shouldn't be necessary, but I find it so for several modules.)
[02:07] <rf> Weird
[02:07] <rf> Seems to work excluding "libz" but I don't think that's intended
[02:08] <Xliff_> How can I determine if a lexical variable is writeable?
[02:09] <Xliff_> m: my $a; $a.VAR.^methods.map( *.name ).say
[02:09] <camelia> rakudo-moar 12f681bbc: OUTPUT: «(<anon> <anon> new name of default dynamic WHICH BUILDALL)␤»
[02:09] <Xliff_> m: my $a; $a.VAR.^name.say
[02:09] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Scalar␤»
[02:09] <rf> @lizmat I may be the first person in the world to use Raku to smoke meats
[02:11] <rf> Got a contract offer to build a smart meat-thermometer for a large company, I would most likely write the scripted side in Raku :)
[02:11] <Xliff_> rf++ # Nice! Send me a demo unit? I can give you data!
[02:11] <rf> Haha, I'll follow up in the coming weeks if they want to go ahead with it
[02:13] <Xliff_> m: sub a ($a) { $a.^name.say }; a
[02:13] <camelia> rakudo-moar 12f681bbc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling a() will never work with declared signature ($a)␤at <tmp>:1␤------> sub a ($a) { $a.^name.say }; ⏏a␤»
[02:13] <Xliff_> m: sub a ($a) { $a.^name.say }; a(1)
[02:13] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Int␤»
[02:13] <Xliff_> m: sub a ($a is copy) { $a.^name.say }; a(1)
[02:13] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Int␤»
[02:13] <rf> Are you trying to see if a variable is constant?
[02:13] <Xliff_> No. I'm trying to see if the symbol itself can be written to.
[02:15] <Xliff_> m: sub a ($a is copy) { CATCH { default { .name.say }; $a.^name.say; b() }; sub b { OUTER::<$a> = 42 }; 
[02:15] <camelia> rakudo-moar 12f681bbc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> .say; b() }; sub b { OUTER::<$a> = 42 };⏏<EOL>␤»
[02:15] <Xliff_> m: sub a ($a is copy) { CATCH { default { .name.say }; }; $a.^name.say; b() }; sub b { OUTER::<$a> = 42 }; 
[02:15] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:15] <Xliff_> m: sub a ($a is copy) { CATCH { default { .name.say }; }; $a.^name.say; b() $a.say}; sub b { OUTER::<$a> = 42 }; 
[02:15] <camelia> rakudo-moar 12f681bbc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> ault { .name.say }; }; $a.^name.say; b()⏏ $a.say}; sub b { OUTER::<$a> = 42 };␤    expecting any of:␤        infix␤        infix stopper␤      …»
[02:15] <Xliff_> m: sub a ($a is copy) { CATCH { default { .name.say }; }; $a.^name.say; b(); $a.say}; sub b { OUTER::<$a> = 42 }; 
[02:15] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:16] <Xliff_> m: sub a ($a is copy) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .name.say }; }; OUTER::<$a> = 42 }; 
[02:16] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:16] <Xliff_> WTF?
[02:16] <Xliff_> m: sub a ($a is copy) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .^name.say }; }; OUTER::<$a> = 42 }; 
[02:16] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:17] <Xliff_> m: sub a ($a is copy) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .^name.say }; }; OUTER::<$a> = 42; say "boop!" }; 
[02:17] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:17] <rf> m: sub a ($a is copy) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .^name.say }; }; OUTER::<$a> = 42; say "boop!" }; b();
[02:17] <camelia> rakudo-moar 12f681bbc: OUTPUT: «X::Assignment::RO␤»
[02:17] <Xliff_> Thanks. I guess that will have to do.
[02:18] <Xliff_> m: sub a ($a is copy) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .^name.say }; }; OUTER::<$a> = 42; say "boop!" }; a()
[02:18] <camelia> rakudo-moar 12f681bbc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling a() will never work with declared signature ($a is copy)␤at <tmp>:1␤------>  }; }; OUTER::<$a> = 42; say "boop!" }; ⏏a()␤»
[02:18] <Xliff_> m: sub a ($a is copy) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .^name.say }; }; OUTER::<$a> = 42; say "boop!" }; a(1)
[02:18] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Int␤X::Assignment::RO␤1␤»
[02:19] <Xliff_> m: sub a ($a is rw) { $a.^name.say; b(); $a.say}; sub b { CATCH { default { .^name.say }; }; OUTER::<$a> = 42; say "boop!" }; a(1)
[02:19] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Parameter '$a' expects a writable container (variable) as an argument,␤but got '1' (Int) as a value without a container.␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[02:20] <rf> Can't pass 1 to rw
[02:20] <rf> Or any constant for that matter
[02:20] <Xliff_> I know, but "$a is copy" should make $a a lexical container
[02:20] <rf> I thought it merely copied the container to $a
[02:20] <Xliff_> So OUTER::<$a> should be writeable.
[02:21] <Xliff_> Otherwise this shouldn't work...,
[02:21] <Xliff_> m: sub a ($a is copy) { $a.^name.say; $a = 2; $a.say }; a(1)
[02:21] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Int␤2␤»
[02:21] <rf> m: my $s = 1; sub a ($a is copy) { $a := 3 }; a(5); say $s;
[02:21] <camelia> rakudo-moar 12f681bbc: OUTPUT: «1␤»
[02:22] *** skyesoss joined
[02:22] <rf> m: my $s = 1; sub a ($a is copy) { $a := 3 }; a($s); say $s;
[02:22] <camelia> rakudo-moar 12f681bbc: OUTPUT: «1␤»
[02:23] <rf> m: sub f ($a) { $a := 5 }; f(10);
[02:23] <camelia> rakudo-moar 12f681bbc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot bind to '$a' because it was bound in a signature and variables␤bound in signatures cannot be rebound unless they were declared with the␤'is rw' or 'is copy' traits␤at <tmp>:1␤------> su…»
[02:23] <rf> :)
[02:24] <Xliff_> m: sub f ($a is copy) { $a := 5 }; f(10);
[02:24] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:24] <Xliff_> m: sub f ($a is copy) { $a = 5 }; f(10);
[02:24] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:24] <Xliff_> m: sub b { OUTER::<$a> = 42 }; sub f ($a is copy) { $a = 5; b() }; f(10);
[02:24] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Cannot modify an immutable Nil value␤  in sub b at <tmp> line 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[02:24] <Xliff_> m: sub b { OUTER::<$a>.say }; sub f ($a is copy) { $a = 5; b() }; f(10);
[02:24] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Nil␤»
[02:25] <rf> Is OUTER RakuAST stuff?
[02:25] <Xliff_> m: sub b { OUTER::.keys }; sub f ($a is copy) { $a = 5; b() }; f(10);
[02:25] <camelia> rakudo-moar 12f681bbc: ( no output )
[02:25] <Xliff_> m: sub b { OUTER::.keys.say }; sub f ($a is copy) { $a = 5; b() }; f(10);
[02:25] <camelia> rakudo-moar 12f681bbc: OUTPUT: «($_ $?PACKAGE $! $¢ EXPORT $=pod &b $=finish &f $/ GLOBALish !UNIT_MARKER ::?PACKAGE)␤»
[02:25] <Xliff_> m: sub b { CALLER::.keys.say }; sub f ($a is copy) { $a = 5; b() }; f(10);
[02:25] <camelia> rakudo-moar 12f681bbc: OUTPUT: «($¢ $/ $a $!)␤»
[02:25] <Xliff_> AHAHAHAHA!
[02:25] <Xliff_> m: sub b { CALLER::<$a> = 42 }; sub f ($a is copy) { $a = 5; b() }; f(10);
[02:25] <camelia> rakudo-moar 12f681bbc: OUTPUT: «Cannot access '$a' through CALLER, because it is not declared as dynamic␤  in sub b at <tmp> line 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[02:25] <Xliff_> :S
[02:26] *** tea3po joined
[02:29] *** teatwo left
[02:30] *** tea3po left
[02:31] *** tea3po joined
[02:31] *** Xliff_ left
[03:31] *** reportable6 left
[03:31] *** benchable6 left
[03:31] *** nativecallable6 left
[03:31] *** quotable6 left
[03:31] *** committable6 left
[03:31] *** evalable6 left
[03:31] *** unicodable6 left
[03:31] *** notable6 left
[03:31] *** statisfiable6 left
[03:31] *** releasable6 left
[03:31] *** shareable6 left
[03:31] *** bisectable6 left
[03:31] *** tellable6 left
[03:31] *** squashable6 left
[03:31] *** coverable6 left
[03:31] *** sourceable6 left
[03:31] *** greppable6 left
[03:31] *** bloatable6 left
[03:31] *** linkable6 left
[03:31] *** benchable6 joined
[03:31] *** nativecallable6 joined
[03:31] *** tellable6 joined
[03:31] *** squashable6 joined
[03:32] *** quotable6 joined
[03:32] *** evalable6 joined
[03:32] *** committable6 joined
[03:32] *** greppable6 joined
[03:32] *** sourceable6 joined
[03:32] *** notable6 joined
[03:33] *** statisfiable6 joined
[03:33] *** unicodable6 joined
[03:33] *** releasable6 joined
[03:33] *** bisectable6 joined
[03:33] *** bloatable6 joined
[03:34] *** shareable6 joined
[03:34] *** reportable6 joined
[03:34] *** coverable6 joined
[03:34] *** linkable6 joined
[03:45] *** xinming left
[03:47] *** xinming joined
[04:47] *** shareable6 left
[04:47] *** sourceable6 left
[04:47] *** squashable6 left
[04:47] *** nativecallable6 left
[04:47] *** statisfiable6 left
[04:47] *** coverable6 left
[04:47] *** bisectable6 left
[04:47] *** tellable6 left
[04:47] *** notable6 left
[04:47] *** greppable6 left
[04:47] *** evalable6 left
[04:47] *** committable6 left
[04:47] *** quotable6 left
[04:47] *** benchable6 left
[04:47] *** bisectable6 joined
[04:47] *** nativecallable6 joined
[04:47] *** shareable6 joined
[04:47] *** coverable6 joined
[04:48] *** greppable6 joined
[04:48] *** sourceable6 joined
[04:48] *** evalable6 joined
[04:48] *** committable6 joined
[04:48] *** statisfiable6 joined
[04:48] *** quotable6 joined
[04:49] *** benchable6 joined
[04:49] *** notable6 joined
[04:49] *** squashable6 joined
[04:50] *** tellable6 joined
[05:45] *** xinming left
[05:47] *** xinming joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:02] *** RonaldR34g4m joined
[06:03] *** Vyrus left
[06:18] *** skyesoss left
[06:40] *** zapwai left
[07:24] *** derpydoo left
[07:48] *** sena_kun joined
[08:00] *** skyesoss joined
[08:20] *** jpn joined
[08:49] *** jpn left
[08:51] *** jpn joined
[08:58] <lizmat> .tell Xliff I understand what the .ast and .set-ast would do, but I seem to be missing how that would only make that "only available at BEGIN and CHECK"
[08:58] <tellable6> lizmat, I'll pass your message to Xliff_
[09:05] *** xinming left
[09:07] *** xinming joined
[09:13] *** jpn left
[09:14] *** jpn joined
[09:42] *** euandreh joined
[10:09] *** tadzik left
[10:09] *** tadzik joined
[10:10] *** jpn left
[10:13] *** Sgeo left
[11:03] *** Xliff joined
[11:03] <Xliff> .
[11:03] <tellable6> 2023-06-24T08:58:08Z #raku <lizmat> Xliff I understand what the .ast and .set-ast would do, but I seem to be missing how that would only make that "only available at BEGIN and CHECK"
[11:04] <Xliff> lizmat: .ast and .set-ast are compile-time available items. Objects would not have them earlier. 
[11:05] <Xliff> lizmat: .ast and .set-ast are compile-time available items. Objects would not have them earlier. 
[11:05] <Xliff> Does that make sense?
[11:46] *** Voldenet left
[11:47] *** Voldenet joined
[11:54] *** peder joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[13:02] *** reportable6 left
[13:02] *** committable6 left
[13:02] *** evalable6 left
[13:02] *** squashable6 left
[13:02] *** squashable6 joined
[13:04] *** committable6 joined
[13:04] *** reportable6 joined
[13:05] *** evalable6 joined
[13:38] *** uzl[m] left
[13:38] *** uzl[m] joined
[13:49] *** euandreh1 joined
[13:50] *** euandreh left
[13:50] *** euandreh1 is now known as euandreh
[13:53] <leont> m: dd (False xor False), (True xor True)
[13:53] <camelia> rakudo-moar 17ffa7ee8: OUTPUT: «Bool::False␤Nil␤»
[13:54] <leont> Why is True xor True Nil? That looks like a bug to me, or am I missing something
[13:57] <discord-raku-bot> <nemokosch> m: say(True ^^ True)
[13:57] <discord-raku-bot> <Raku eval>  Nil 
[13:58] <discord-raku-bot> <nemokosch> oh right... this operator has funny semantics
[13:59] <discord-raku-bot> <nemokosch> https://docs.raku.org/language/operators#infix_^^
[14:04] <Xliff> Anyone here familiar with the Raku parser?
[14:07] <discord-raku-bot> <nemokosch> probably not familiar enough but you know
[14:08] <discord-raku-bot> <nemokosch> "don't ask to ask - just ask"
[14:15] <Xliff> Yeah, well I'm wondering when the objects are created at compile time so that they can be accessed at BEGIN time
[14:20] *** jgaz left
[14:22] <Xliff> m: $a = 1; CHECK { $*CU.gist.say }
[14:22] <camelia> rakudo-moar 17ffa7ee8: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL>⏏$a = 1; CHECK { $*CU.gist.say }␤»
[14:23] <Xliff> m: my $a = 1; CHECK { $*CU.gist.say }
[14:23] <camelia> rakudo-moar 17ffa7ee8: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤An exception X::Dynamic::NotFound occurred while evaluating a CHECK: Dynamic variable $*CU not found␤at <tmp>:1␤Exception details:␤  Dynamic variable $*CU not found␤    in block  at <tmp> line 1…»
[14:23] <Xliff> m: use experimental :rakuast; my $a = 1; CHECK { $*CU.gist.say }
[14:23] <camelia> rakudo-moar 17ffa7ee8: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤An exception X::Dynamic::NotFound occurred while evaluating a CHECK: Dynamic variable $*CU not found␤at <tmp>:1␤Exception details:␤  Dynamic variable $*CU not found␤    in block  at <tmp> line 1…»
[14:23] <Xliff> Rut Roh!
[14:25] *** teatwo joined
[14:28] *** tea3po left
[15:11] <rf> Morning folks
[15:20] <Xliff> 'morning rf!
[15:32] *** jgaz joined
[15:33] *** jgaz left
[15:34] *** jgaz joined
[15:45] *** xinming left
[15:45] *** zapwai joined
[15:47] *** xinming joined
[15:55] <discord-raku-bot> <Anton Antonov> @rf You should like my "monadic parsers" efforts. Have you used parser combinators (in any language) ?
[16:24] <rf> Yes In Haskell and OCaml
[16:25] <rf> Mostly for toys though I've never used them practically
[16:28] <discord-raku-bot> <Anton Antonov> @rf Good to know. I should/will make a "very practical" example.
[16:29] <rf> Haha in Raku? :P
[16:37] *** zapwai left
[16:48] <discord-raku-bot> <Anton Antonov> @rf Yes in Raku. See "FunctionalParsers" : https://raku.land/zef:antononcube/FunctionalParsers
[16:49] *** CIAvash left
[16:49] *** CIAvash joined
[16:59] <rf> ◁ I like the choice in Symbols Anton
[17:07] *** codesections joined
[17:16] <discord-raku-bot> <Anton Antonov> @rf Thanks! I was still have not figured out which one is the best set of operators.
[17:45] *** bdju left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:35] *** bdju joined
[19:50] *** Sgeo joined
[20:24] *** sena_kun left
[21:03] *** rf left
[21:47] *** rf joined
[21:50] *** skyesoss left
[22:14] *** rf left
[22:14] *** rf joined
[22:57] *** Xliff left
[23:42] *** derpydoo joined
