[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:33] *** epony left
[00:39] *** QhpAptyj9hj0RQwM joined
[00:48] <discord-raku-bot> <Nemokosch> Do you know modules that can parse strings into Date/DateTime based on a format defined with initial letters? Like 'Mmm dd hh:mm' and this could eat 'Apr 04 12:32' for example

[01:21] *** epony joined
[01:27] *** AlexDaniel left
[01:37] *** QhpAptyj9hj0RQwM left
[02:16] <leont> DateTime::Format's strptime?

[02:16] <leont> Nope, that's Not Yet Implemented

[02:17] <leont> NativeCall strptime and then convert that posix time into a DateTime?

[02:23] *** razetime joined
[02:48] *** razetime left
[03:05] <Xliff> Aw. I missed AlexDaniel.

[03:05] <Xliff> Miss ya, dude!

[03:06] <Xliff> m: sub a ( --> uint32) { True }; a().^name.say

[03:06] <camelia> rakudo-moar 2279a0aed: OUTPUT: «Int␤»

[03:06] <Xliff> m: sub a ( --> uint32) { True }; a().say

[03:06] <camelia> rakudo-moar 2279a0aed: OUTPUT: «1␤»

[03:30] *** razetime joined
[03:32] *** Homer_Simpson left
[04:18] *** Guest89 left
[04:19] *** Guest89 joined
[05:15] *** squashable6 left
[05:17] *** squashable6 joined
[05:18] *** opoku joined
[05:26] <opoku> hello, I'm attempting to install rakudoc locally using `zef install rakudoc` and its failing. This is on an M1 macOS 13.1. Output from zef is here: https://gist.github.com/opoku/bc83c717158939a80f9ee19f78f52672 . I'd appreciate any help I can get.

[05:32] *** Guest89 left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:19] *** opoku left
[06:29] *** oodani left
[06:29] *** jpn joined
[06:32] *** oodani joined
[06:47] *** WickedTortoise joined
[06:50] *** CodeTortoise left
[06:52] *** WickedTortoise left
[07:30] *** Sgeo left
[07:37] *** jpn left
[08:37] *** greppable6 left
[08:37] *** unicodable6 left
[08:37] *** notable6 left
[08:37] *** nativecallable6 left
[08:37] *** linkable6 left
[08:37] *** evalable6 left
[08:37] *** coverable6 left
[08:37] *** squashable6 left
[08:37] *** statisfiable6 left
[08:37] *** tellable6 left
[08:37] *** releasable6 left
[08:37] *** bloatable6 left
[08:37] *** quotable6 left
[08:37] *** sourceable6 left
[08:37] *** shareable6 left
[08:37] *** reportable6 left
[08:37] *** committable6 left
[08:37] *** bisectable6 left
[08:37] *** benchable6 left
[08:37] *** coverable6 joined
[08:37] *** notable6 joined
[08:38] *** unicodable6 joined
[08:38] *** jjido joined
[08:38] *** evalable6 joined
[08:38] *** sourceable6 joined
[08:39] *** nativecallable6 joined
[08:39] *** committable6 joined
[08:39] *** shareable6 joined
[08:39] *** benchable6 joined
[08:40] *** releasable6 joined
[08:40] *** bisectable6 joined
[08:40] *** quotable6 joined
[08:40] *** equinox joined
[08:40] *** linkable6 joined
[08:40] *** bloatable6 joined
[08:40] *** greppable6 joined
[08:40] *** reportable6 joined
[08:40] *** statisfiable6 joined
[08:40] *** tellable6 joined
[08:40] *** squashable6 joined
[08:52] *** jjido left
[08:58] *** sena_kun joined
[09:18] <discord-raku-bot> <Nemokosch> leont: thank you, it's good to know that there is C stuff out there already

[09:21] *** ProperNoun left
[09:22] *** ProperNoun joined
[09:41] *** jpn joined
[09:47] <jaguart> raku --doc=HTML Grok.rak --> Undeclared routine: gen-closure-template used at lines 240 241 242...

[09:47] <jaguart> raku --doc=Markdown Grok.raku -> works fine...

[09:48] <discord-raku-bot> <Nemokosch> Is this finanalyst's business

[09:49] <discord-raku-bot> <Nemokosch> Btw was the Grok.rak "typo" intended in the example?

[09:53] <jaguart> yes sirry

[09:53] <jaguart> :{

[09:57] *** equinox left
[09:58] <jaguart> Hmmm Pod::Load fails too - it is a unit module... does Pod::Load not grok that?

[10:16] *** sena_kun left
[10:55] *** sena_kun joined
[10:56] <discord-raku-bot> <Nemokosch> oh Pod::Load is JJ stuff

[10:56] <discord-raku-bot> <Nemokosch> Pod::To::HTML might be broken these days

[10:57] <discord-raku-bot> <Nemokosch> I'd look for some complementary finanalyst stuff, he's been dealing a lot with stuff like that

[11:04] *** QhpAptyj9hj0RQwM joined
[11:04] *** QhpAptyj9hj0RQwM left
[11:10] *** jpn left
[11:15] *** jpn joined
[11:24] *** razetime left
[11:36] *** equinox joined
[11:52] *** epony left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:38] *** Altai-man joined
[12:42] *** sena_kun left
[12:49] *** equinox left
[13:19] *** Altai-man left
[13:20] *** equinox joined
[13:56] *** jpn left
[14:01] *** jpn joined
[14:09] *** razetime joined
[14:12] *** jgaz joined
[14:29] *** Kaipei left
[14:31] *** razetime left
[14:43] *** jjido joined
[14:52] *** jjido left
[15:04] *** WickedTortoise joined
[15:10] *** Sgeo joined
[15:10] *** jgaz left
[15:32] *** razetime joined
[15:42] *** razetime left
[15:47] *** WickedTortoise left
[15:52] *** Kaipei joined
[16:23] *** epony joined
[16:42] *** razetime joined
[17:04] *** ab5tract joined
[17:19] *** equinox left
[17:35] *** melezhik joined
[17:36] *** razetime left
[17:38] <melezhik> .tell @jns I've create an alpine pipeline to test AudioPortaudio - let me know if you're interested ? but I guess this should be pretty much distro independent  build ?

[17:38] <tellable6> melezhik, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Tellable

[17:39] <melezhik> .tell jns: -  I've create an alpine pipeline to test AudioPortaudio - let me know if you're interested ? but I guess this should be pretty much distro independent  build ?

[17:39] <tellable6> melezhik, I haven't seen jns around, did you mean sjn?

[17:40] <melezhik> .seen jns

[17:40] <tellable6> melezhik, I haven't seen jns around, did you mean sjn?

[17:40] <lizmat> Jonathan doesn't really hang out here much

[17:40] <lizmat> .seen rabidgravy

[17:40] <tellable6> lizmat, I saw rabidgravy 2017-12-17T01:40:19Z in #perl6: <RabidGravy> that's https://perl6advent.wordpress.com/2017/12/17/something-about-messaging-but-i-couldnt-think-of-a-snappier-title/ if you want to get in early

[17:41] <melezhik> thanks lizmat I never know ))) will try fosstodon ...

[17:47] *** jjido joined
[17:56] *** melezhik left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:08] *** kaskal left
[18:09] *** kaskal joined
[18:16] *** kaskal left
[18:17] *** kaskal joined
[18:23] *** jpn left
[18:25] *** jpn joined
[18:35] *** sena_kun joined
[18:48] *** jpn left
[19:07] *** jjido left
[20:04] *** sena_kun left
[20:04] *** sena_kun joined
[20:04] *** sena_kun left
[20:05] *** sena_kun joined
[20:34] *** ab5tract left
[20:34] *** ab5tract joined
[20:42] *** jpn joined
[20:49] *** jpn left
[20:59] *** epony left
[20:59] *** jgaz joined
[21:00] *** epony joined
[21:20] *** jpn joined
[22:07] *** jgaz left
[22:12] *** Sauvin left
[22:17] *** Sauvin joined
[22:18] *** sena_kun left
[22:21] *** sena_kun joined
[22:32] *** jgaz joined
[22:46] *** jjido joined
[23:02] <jaguart> is MONKEY-SEE-NO-EVAL no longer required? 

[23:02] <ab5tract> jaguart: example?

[23:02] <jaguart> m: 'say <a>'.EVAL

[23:02] <camelia> rakudo-moar dcff39f62: OUTPUT: «a␤»

[23:03] <ab5tract> m: my $a = "a"; "say $a".EVAL

[23:03] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Undeclared routine:␤    a used at line 1␤␤»

[23:03] <ab5tract> hmm, that's interesting

[23:03] <ab5tract> m: my $a = "a"; "say '$a'".EVAL

[23:03] <camelia> rakudo-moar dcff39f62: OUTPUT: «a␤»

[23:03] <ab5tract> jaguart: looks like you are correct

[23:04] <ab5tract> there was a fuzzy line of what constituted an "EVAL-which-no-monkey-can-see" and what could be eval'd

[23:04] <jaguart> I mourn the end of the MONKEYs

[23:04] <ab5tract> (fuzzy to me)

[23:05] <ab5tract> I'm not sure that it was intended, though I remember debate about whether the MONKEYs were the right wording for the things

[23:06] <jaguart> yeah I saw that - I like, kwerky 

[23:10] <ab5tract> m: my $a = say; "$a <a>".EVAL;

[23:10] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»

[23:10] <ab5tract> m: my $a = say; "$a 'a'".EVAL;

[23:10] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»

[23:10] <ab5tract> m: my $a = say; "'a'.$a".EVAL;

[23:10] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»

[23:10] <ab5tract> ugh, sorry!

[23:11] <ab5tract> m: my $a = "say"; "'a'.$a".EVAL;

[23:11] <camelia> rakudo-moar dcff39f62: OUTPUT: «a␤»

[23:11] <ab5tract> okay, yeah, the MONKEY is definitely not guarding the EVAL anymore

[23:13] <discord-raku-bot> <Nemokosch> I don't know if this is intended tbh

[23:13] <discord-raku-bot> <Nemokosch> not anywhere a hint of sunsetting the monkey pragmas

[23:13] <ab5tract> yeah, that's what I'm thinking..

[23:13] <ab5tract> there should be a test somewhere for this though, right? how did it slip past a release?

[23:16] *** Nemokosch joined
[23:16] <Nemokosch> bisectable6: my $a = "say"; "'a'.$a".EVAL;

[23:16] <bisectable6> Nemokosch, Will bisect the whole range automagically because no endpoints were provided, hang tight

[23:16] <tellable6> 2023-01-05T02:51:29Z #raku <Xliff> Nemokosch: That output looks right. Now I am wondering why the message "Applying key..." or "Applying value" are not showing up.

[23:16] <tellable6> 2023-01-05T13:45:03Z #raku <leont> Nemokosch: Just released a new Protocol::Postgres

[23:16] <tellable6> hey Nemokosch, you have a message: https://gist.github.com/f0961e97c68a94af8570b1672b6512f6

[23:17] <bisectable6> Nemokosch, ¦6c (66 commits): «a␤»

[23:17] <bisectable6> Nemokosch, Nothing to bisect!

[23:17] <discord-raku-bot> <Nemokosch> weeelll

[23:17] <ab5tract> so are we just on the weird side of the fuzzy line?

[23:18] <discord-raku-bot> <Nemokosch> or the bot itself uses the pragma under the hood

[23:18] *** Nemokosch left
[23:21] <ab5tract> works locally as well.

[23:23] <discord-raku-bot> <Nemokosch> as a standalone script?

[23:23] <jaguart> what are the differences between: use v6; use v6+; use v6.d+ - and which should I be using in my classes and modules?

[23:23] <ab5tract> I think I see what is going wrong here..

[23:23] <jaguart> the EVAL has gone quiet a while ago... 

[23:24] <ab5tract> m: my $a = "say"; '<a>.$a'.EVAL;

[23:24] <camelia> rakudo-moar dcff39f62: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:24] <ab5tract> m: my $a = "say"; '\'a\'.$a'.EVAL;

[23:24] <camelia> rakudo-moar dcff39f62: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at EVAL_0 line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:25] <ab5tract> jaguart: the example from the EVAL docs still fails locally: https://docs.raku.org/routine/EVAL

[23:25] <discord-raku-bot> <Nemokosch> jaguart: vrurg's presentation covered that as well, a little bit. That doesn't mean I remember completely...

[23:25] <discord-raku-bot> <Nemokosch> and I definitely haven't seen the latter two

[23:26] <ab5tract> m: my $a = "say"; my $this = 50; my $call-this = '$a $this'; EVAL $call-this

[23:26] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> $call-t…»

[23:26] <ab5tract> m: my $a = "say"; my $this = 50; my $call-this = "$a $this"; EVAL $call-this

[23:26] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> $call-t…»

[23:27] <ab5tract> the fuzzy line :)

[23:28] <ab5tract> m: my $a = "say"; my $this = 50; my $call-this = "$a $this"; EVAL "$a $this"

[23:28] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> $call-t…»

[23:28] <ab5tract> m: my $a = "say"; my $this = 50; my $call-this = "$a $this"; EVAL "$a 50"

[23:28] <camelia> rakudo-moar dcff39f62: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> my $cal…»

[23:28] <ab5tract> m: my $a = "say"; my $this = 50; my $call-this = "$a $this"; "$a 50".EVAL

[23:28] <camelia> rakudo-moar dcff39f62: OUTPUT: «50␤»

[23:28] <ab5tract> okay that is ridiculous

[23:29] <ab5tract> m: my $a = "say"; my $this = 50; my $call-this = "$a $this"; $call-this.EVAL

[23:29] <camelia> rakudo-moar dcff39f62: OUTPUT: «50␤»

[23:29] <discord-raku-bot> <Nemokosch> indeed

[23:30] <ab5tract> moments like this make me feel like Raku is too big a language to ever have all the parts working as exepected at the same time

[23:30] <ab5tract> which is a mega-bummer of a feeling

[23:30] <discord-raku-bot> <Nemokosch> you got a point, too

[23:31] <discord-raku-bot> <Nemokosch> although I would be a bit more optimistic looking forward

[23:31] <ab5tract> I try to be, too

[23:31] *** jpn left
[23:31] <tonyo> php, javascript, etc all had growing pangs like that too

[23:31] <jaguart> ah - so it's deliberate that calling the method on a string is quiet

[23:31] <ab5tract> I've been a fan and a user for a long, long time at this point

[23:32] <ab5tract> jaguart: nope, it seems to be related to EVAL as a routine versus EVAL as a method

[23:32] <jaguart> makes sense - I adopted that pattern seeing it in raku.land modules

[23:32] <ab5tract> erm, sorry, I misread what you wrote

[23:32] <discord-raku-bot> <Nemokosch> I would say, we don't even know if it is intended or not xD

[23:33] <ab5tract> lizmat: IIRC, you were the implementor of MONKEY-SEE-NO-EVAL

[23:33] <lizmat> I was?

[23:33] <lizmat> could well be...  

[23:33] <ab5tract> :)

[23:33] <discord-raku-bot> <Nemokosch> but this seems big enough to check out issues

[23:33] <jaguart> so the routine emits but the method call doesn't -> its a suBtle thing -> https://www.youtube.com/watch?v=xxxWwdeGz1Q

[23:33] <ab5tract> it was a long while back at this point

[23:34] <lizmat> it's just setting a flag somewhere

[23:34] <ab5tract> it's weird that it doesn't trap on the method version, though

[23:34] *** bpalmer left
[23:35] <ab5tract> it's weird, but maybe it was intentional?

[23:35] <jaguart> I'm sure it was - I've seen it used in short modules

[23:36] <jaguart> like lizmat's 'from' module - which is hard to find on raku.land

[23:36] <jaguart> because raku.land search doesn't like...

[23:36] <jaguart> from

[23:36] <lizmat> ab5tract: that's because the method version is late bound

[23:37] <ab5tract> jaguart: I would argue that if it was intentional, it would have been duly noted as an alternative to using MONKEY-SEE-NO-EVAL

[23:37] <ab5tract> "just use the method"

[23:37] <lizmat> that's what I do usually  :-)

[23:37] <discord-raku-bot> <Nemokosch> also, it more or less defeats the purpose of the pragma itself

[23:37] <ab5tract> lizmat: so, an unintended consequence

[23:38] <discord-raku-bot> <Nemokosch> who would remember that it is even supposed to complain if an idiomatic, literal equivalent doesn't

[23:38] <ab5tract> Nemokosch: that too

[23:38] <tellable6> ab5tract, I'll pass your message to Nemokosch

[23:38] <lizmat> well...  I'm not 100% sure anymomre it's unintended 

[23:38] <discord-raku-bot> <Nemokosch> couldn't find it among Rakudo issues

[23:39] <jaguart> I agree with lizmat - now I KnowHOW I will no do EVAL

[23:39] <discord-raku-bot> <Nemokosch> https://github.com/Raku/old-issue-tracker/issues/5468

[23:40] <jaguart> oh - if you fix that then a number of things will start to emit warnings!

[23:41] <ab5tract> jaguart: compilation errors even

[23:41] * lizmat goes to bed&

[23:41] <ab5tract> I've just posted a comment asking for a bit of input from core devs on this. Presumably it might not be fixable without some special casing in the compiler

[23:42] <ab5tract> lizmat: slaap lekker!

[23:42] <discord-raku-bot> <Nemokosch> yep... this seems to be something that can only be fixed (if it's something to fix which I would argue it is) gradually

[23:43] <discord-raku-bot> <Nemokosch> not something you would just quickly slap onto the main branch

[23:44] <jaguart> lizmat is now going to count fluffy white MONKEYS until sleep comes...

[23:46] <tonyo> one reasonable part of that is `EVAL ...` is subject to precedence errors and `obj.EVAL` is slightly more specific

[23:46] <discord-raku-bot> <Nemokosch> 😅

[23:47] <tonyo> which sounds like a reason made up after knowing the problem, and it is

[23:47] <ab5tract> :)

[23:56] <jaguart> I love back-propagation logic :)

