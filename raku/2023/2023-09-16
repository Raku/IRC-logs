[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:18] *** wayland joined
[00:43] *** wayland is now known as wayland76

[01:43] *** linkable6 left
[01:43] *** greppable6 left
[01:43] *** sourceable6 left
[01:43] *** committable6 left
[01:43] *** bloatable6 left
[01:43] *** tellable6 left
[01:43] *** squashable6 left
[01:43] *** shareable6 left
[01:43] *** bisectable6 left
[01:43] *** benchable6 left
[01:43] *** evalable6 left
[01:43] *** unicodable6 left
[01:43] *** quotable6 left
[01:43] *** coverable6 left
[01:43] *** statisfiable6 left
[01:43] *** notable6 left
[01:43] *** reportable6 left
[01:43] *** nativecallable6 left
[01:43] *** releasable6 left
[01:43] *** greppable6 joined
[01:43] *** tellable6 joined
[01:43] *** linkable6 joined
[01:43] *** evalable6 joined
[01:44] *** coverable6 joined
[01:44] *** squashable6 joined
[01:44] *** statisfiable6 joined
[01:44] *** quotable6 joined
[01:44] *** sourceable6 joined
[01:44] *** releasable6 joined
[01:44] *** reportable6 joined
[01:45] *** nativecallable6 joined
[01:45] *** committable6 joined
[01:45] *** shareable6 joined
[01:45] *** bloatable6 joined
[01:45] *** benchable6 joined
[01:45] *** notable6 joined
[01:46] *** unicodable6 joined
[01:46] *** bisectable6 joined
[02:10] *** wayland76 left
[02:12] *** wayland76 joined
[02:54] *** modula left
[03:56] *** bloatable6 left
[03:56] *** tellable6 left
[03:56] *** evalable6 left
[03:56] *** sourceable6 left
[03:56] *** reportable6 left
[03:56] *** coverable6 left
[03:56] *** quotable6 left
[03:56] *** nativecallable6 left
[03:56] *** committable6 left
[03:56] *** benchable6 left
[03:56] *** releasable6 left
[03:56] *** linkable6 left
[03:56] *** notable6 left
[03:56] *** greppable6 left
[03:56] *** bisectable6 left
[03:56] *** unicodable6 left
[03:56] *** squashable6 left
[03:56] *** statisfiable6 left
[03:56] *** shareable6 left
[03:57] *** bloatable6 joined
[03:57] *** coverable6 joined
[03:57] *** reportable6 joined
[03:57] *** evalable6 joined
[03:57] *** benchable6 joined
[03:58] *** committable6 joined
[03:58] *** linkable6 joined
[03:58] *** bisectable6 joined
[03:58] *** notable6 joined
[03:58] *** shareable6 joined
[03:58] *** unicodable6 joined
[03:59] *** quotable6 joined
[03:59] *** tellable6 joined
[03:59] *** nativecallable6 joined
[03:59] *** sourceable6 joined
[03:59] *** greppable6 joined
[03:59] *** statisfiable6 joined
[03:59] *** squashable6 joined
[03:59] *** releasable6 joined
[05:45] *** melezhik joined
[05:46] <melezhik> @ugexe - available from rakudo.org ?

[05:48] <melezhik> Don't see anything here for arm - https://rakudo.org/downloads/rakudo

[05:50] *** melezhik left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:18] <discord-raku-bot> <nemokosch> What about rakubrew?

[06:41] *** jpn joined
[06:48] *** melezhik joined
[06:49] <melezhik> Nemokosch: nope according this error - https://ci.sparrowhub.io/report/3622

[06:50] <discord-raku-bot> <nemokosch> Tough luck. Well, rakudo-pkg? That's the last option known to me

[06:50] <melezhik> I guess rakubrew relies on distros from rakudo.org which does not provide builds for ARM

[06:51] <melezhik> rakudo-pkg does not work either , at least afik

[06:52] *** dg left
[06:52] <melezhik> This is why I have to bake it myself into SparrowCI workers , e.g - https://github.com/melezhik/SparrowCI/blob/c5b4916767b58f73ab7982b8159646756f3042a2/Dockerfiles/sparrow.alpine.arm#L21

[06:53] <melezhik> Like I said in the post - "So, meanwhile, one can test against a default (compiled from source) Rakudo version which is 2023.08"

[06:54] <melezhik> So, at least SparrowCI users have this version to test against )

[06:55] <melezhik> When arm builds are available I will be happy to support them in SparrowCI

[06:55] <melezhik> I mean arm Rakudo builds from official Rakudo.org repo

[06:58] *** dg joined
[06:58] *** melezhik left
[07:04] *** tejr left
[07:10] *** tejr joined
[07:13] *** tejr left
[07:14] *** melezhik joined
[07:15] *** tejr joined
[07:19] *** melezhik left
[07:22] <wayland76> Hi!  I'd like to create a Supply that will be a file, then have various things tap the Supply, then actually trigger the opening of the file.  I tried https://gist.github.com/wayland/a677bb7e3ab3a1a19d40aa076648be69 and it prints out some raku objects between t1 and t2.  What I wanted wazsz for it to print out the contents of the file before (or after) t3.  

[07:22] <wayland76> Anyone have any thoughts?  

[07:23] <wayland76> Or is the only way to do it to create a Supply on a Supplier, have things tap that, then open the file and feed it to the Supplier.emit function?  

[08:06] *** jpn left
[08:22] *** teatwo joined
[08:22] *** jpn joined
[08:25] *** tea3po left
[08:27] *** jpn left
[08:39] *** jpn joined
[08:57] *** jpn left
[08:57] *** jpn joined
[09:02] *** jpn left
[09:08] *** jpn joined
[09:11] *** cm left
[09:12] *** cm joined
[09:15] *** jpn left
[09:34] <ab5tract> I didn't realize you could call .Supply on a file. It would make sense for it to "trigger" on open, but it doesn't seem to be implemented that way

[09:36] <ab5tract> I think the solution is as you described though.

[09:50] *** cm left
[09:50] *** cm joined
[10:07] *** abraxxa-home joined
[10:51] *** abraxxa-home left
[10:51] *** abraxxa-home joined
[11:05] *** jpn joined
[11:12] *** jpn left
[11:12] *** Sgeo left
[11:45] *** abraxxa-home left
[11:59] *** jpn joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:04] *** jpn left
[12:12] *** jpn joined
[12:18] *** jpn left
[13:11] *** wayland joined
[13:12] *** wayland76 left
[13:14] *** squashable6 left
[13:15] *** squashable6 joined
[14:15] *** coverable6 left
[14:15] *** greppable6 left
[14:15] *** committable6 left
[14:15] *** statisfiable6 left
[14:15] *** quotable6 left
[14:15] *** nativecallable6 left
[14:15] *** tellable6 left
[14:15] *** benchable6 left
[14:15] *** notable6 left
[14:15] *** bisectable6 left
[14:15] *** shareable6 left
[14:15] *** sourceable6 left
[14:15] *** evalable6 left
[14:15] *** bloatable6 left
[14:15] *** squashable6 left
[14:15] *** unicodable6 left
[14:15] *** linkable6 left
[14:15] *** reportable6 left
[14:15] *** releasable6 left
[14:16] *** sourceable6 joined
[14:16] *** committable6 joined
[14:16] *** evalable6 joined
[14:16] *** squashable6 joined
[14:16] *** releasable6 joined
[14:16] *** reportable6 joined
[14:17] *** tellable6 joined
[14:17] *** quotable6 joined
[14:17] *** benchable6 joined
[14:17] *** bisectable6 joined
[14:17] *** linkable6 joined
[14:17] *** shareable6 joined
[14:18] *** greppable6 joined
[14:18] *** unicodable6 joined
[14:18] *** notable6 joined
[14:18] *** nativecallable6 joined
[14:18] *** statisfiable6 joined
[14:18] *** bloatable6 joined
[14:18] *** coverable6 joined
[15:00] *** GreaseMonkey left
[15:00] *** greaser|q joined
[15:44] *** jpn joined
[15:46] *** xinming left
[15:49] *** xinming joined
[15:50] *** jpn left
[16:28] *** ab5tract left
[16:42] *** jgaz left
[16:57] <coleman> More list surprises (to me)

[16:57] <coleman> m: my @x = ("three"); <<one two>>.append(@x);

[16:57] <camelia> rakudo-moar 6d3904d01: OUTPUT: «Cannot call 'append' on an immutable 'List'␤  in block <unit> at <tmp> line 1␤␤»

[16:58] <coleman> m: my @x = ("three"); my @y = <<one two>>; @y.append(@x);

[16:58] <camelia> rakudo-moar 6d3904d01: ( no output )

[16:59] <coleman> I guess I'm just expecting the << >> construct to be an expression that yields the same thing in both positions.

[16:59] <coleman> However, I am still unclear on how all the coercions work, and what's immutable.

[17:00] <lizmat> m: my @x = ("three"); my @y = <<one two>>; dd @y; @y.append(@x); dd @y

[17:00] <camelia> rakudo-moar 6d3904d01: OUTPUT: «Array @y = ["one", "two"]␤Array @y = ["one", "two", "three"]␤»

[17:01] <lizmat> append and push have different semantics

[17:01] <lizmat> m: my @x = ("three"); my @y = <<one two>>; dd @y; @y.push(@x); dd @y

[17:01] <camelia> rakudo-moar 6d3904d01: OUTPUT: «Array @y = ["one", "two"]␤Array @y = ["one", "two", ["three"]]␤»

[17:01] <lizmat> is that what you're being bitten by ?

[17:03] <coleman> I want to use append a lot, because I am concatenating command line flags from lists of strings.

[17:04] <coleman> And assigning to an intermediate @y, like you show here, always works

[17:04] <coleman> but I often try to type something like this:

[17:05] <coleman> <<base command>>.append(@flags);

[17:05] <coleman> and <<base command>> is immutable

[17:07] <coleman> usually it's in a sub like: sub wrap-some-command(@flags) { @x = <some command>.append(@flags) }

[17:07] <lizmat> (@x = <some command>).append(@flags)

[17:07] <lizmat> should work then

[17:08] <lizmat> but I guess the case for allowing List.append returning another List, is interesting...

[17:18] *** squashable6 left
[17:20] *** squashable6 joined
[17:21] *** jpn joined
[17:44] *** coleman left
[17:45] *** coleman joined
[17:50] <discord-raku-bot> <nemokosch> yeah well, Lists and append don't work well

[17:50] <discord-raku-bot> <nemokosch> I don't think that creating List.append with different semantics would be a good idea, either

[17:54] <lizmat> what different semantics?

[17:55] <lizmat> <a b c>.append(<d e f>)    would return  <a b c d e f>

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:05] <discord-raku-bot> <nemokosch> instead of mutation?

[18:11] *** jpn left
[18:11] <lizmat> yes

[18:12] <lizmat> I think in functional programming its pretty normal to have an operation on an immutable structure return another immutable structure

[18:12] <lizmat> *it's

[18:13] <discord-raku-bot> <nemokosch> I don't think it's a good idea to create an umbrella interface that sometimes mutates and sometimes doesn't mutate

[18:13] <discord-raku-bot> <nemokosch> in that case, all the mutation should rather go

[18:25] <gfldex> lizmat: IMHO .append ist just find and so is &infix:<~>. `flat(<a b c>, @b)` is not to my liking. Maybe it is time to add &infix:<|,> to CORE and give it some proper optimisations treatment.

[18:25] <lizmat> aka   <a b c> |, <d e f>   would give <a b c d e f> ?

[18:25] <gfldex> In subscripts Raku is explicit by using SemiList to indicate LoL. Anywhere else, we don't do that.

[18:25] <gfldex> aye

[18:26] <lizmat> hmmmm

[18:27] <lizmat> please make an issue for it in problem-solving, so the idea won't fall through the cracks

[18:27] <gfldex> will do

[18:35] *** andinus left
[18:48] <coleman> Thank you all for taking the time to interpret my vague complaints about lists over the past couple of days

[18:56] *** jpn joined
[19:01] <discord-raku-bot> <nemokosch> I ended up defining &infix:<|,> a couple of times for myself, too

[19:15] *** stanrifkin joined
[19:46] *** jpn left
[19:49] *** derpydoo joined
[20:22] *** tea3po joined
[20:25] *** teatwo left
[20:31] *** jpn joined
[20:54] *** jpn left
[20:54] *** Sgeo joined
[21:54] *** coverable6 left
[21:54] *** squashable6 left
[21:54] *** greppable6 left
[21:54] *** statisfiable6 left
[21:54] *** unicodable6 left
[21:54] *** tellable6 left
[21:54] *** releasable6 left
[21:54] *** bloatable6 left
[21:54] *** committable6 left
[21:54] *** benchable6 left
[21:54] *** linkable6 left
[21:54] *** evalable6 left
[21:54] *** shareable6 left
[21:54] *** quotable6 left
[21:54] *** nativecallable6 left
[21:54] *** sourceable6 left
[21:54] *** notable6 left
[21:54] *** bisectable6 left
[21:54] *** reportable6 left
[21:55] *** evalable6 joined
[21:55] *** greppable6 joined
[21:55] *** tellable6 joined
[21:55] *** shareable6 joined
[21:56] *** squashable6 joined
[21:56] *** bloatable6 joined
[21:56] *** reportable6 joined
[21:56] *** sourceable6 joined
[21:56] *** statisfiable6 joined
[21:56] *** unicodable6 joined
[21:57] *** notable6 joined
[21:57] *** releasable6 joined
[21:57] *** benchable6 joined
[21:57] *** coverable6 joined
[21:57] *** quotable6 joined
[21:57] *** linkable6 joined
[21:57] *** bisectable6 joined
[21:57] *** committable6 joined
[21:58] *** nativecallable6 joined
[22:58] *** unicodable6 left
[22:58] *** evalable6 left
[22:58] *** reportable6 left
[22:58] *** coverable6 left
[22:58] *** benchable6 left
[22:58] *** bloatable6 left
[22:58] *** statisfiable6 left
[22:58] *** releasable6 left
[22:58] *** nativecallable6 left
[22:58] *** squashable6 left
[22:58] *** committable6 left
[22:58] *** notable6 left
[22:58] *** linkable6 left
[22:58] *** tellable6 left
[22:58] *** sourceable6 left
[22:58] *** bisectable6 left
[22:58] *** quotable6 left
[22:58] *** greppable6 left
[22:58] *** unicodable6 joined
[22:58] *** evalable6 joined
[22:58] *** linkable6 joined
[22:58] *** reportable6 joined
[22:59] *** greppable6 joined
[22:59] *** committable6 joined
[22:59] *** nativecallable6 joined
[23:00] *** coverable6 joined
[23:00] *** notable6 joined
[23:00] *** releasable6 joined
[23:00] *** sourceable6 joined
[23:00] *** quotable6 joined
[23:00] *** bisectable6 joined
[23:00] *** statisfiable6 joined
[23:00] *** squashable6 joined
[23:01] *** benchable6 joined
[23:01] *** bloatable6 joined
[23:01] *** tellable6 joined
