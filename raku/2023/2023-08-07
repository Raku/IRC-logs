[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:37] *** razetime joined
[01:07] *** razetime left
[01:08] *** razetime joined
[01:58] *** kaskal left
[02:03] *** kaskal joined
[03:03] *** linkable6 left
[03:03] *** bloatable6 left
[03:03] *** squashable6 left
[03:03] *** tellable6 left
[03:03] *** nativecallable6 left
[03:03] *** notable6 left
[03:03] *** unicodable6 left
[03:03] *** quotable6 left
[03:03] *** evalable6 left
[03:03] *** coverable6 left
[03:03] *** greppable6 left
[03:03] *** benchable6 left
[03:03] *** sourceable6 left
[03:03] *** releasable6 left
[03:03] *** statisfiable6 left
[03:03] *** committable6 left
[03:03] *** bisectable6 left
[03:03] *** shareable6 left
[03:03] *** reportable6 left
[03:03] *** greppable6 joined
[03:03] *** statisfiable6 joined
[03:03] *** nativecallable6 joined
[03:03] *** unicodable6 joined
[03:04] *** benchable6 joined
[03:04] *** coverable6 joined
[03:04] *** releasable6 joined
[03:04] *** bisectable6 joined
[03:04] *** frost25 joined
[03:05] *** squashable6 joined
[03:05] *** sourceable6 joined
[03:05] *** bloatable6 joined
[03:05] *** shareable6 joined
[03:05] *** reportable6 joined
[03:05] *** quotable6 joined
[03:06] *** linkable6 joined
[03:06] *** frost25 left
[03:06] *** frost25 joined
[03:06] *** frost25 is now known as frost

[03:06] *** notable6 joined
[03:06] *** committable6 joined
[03:06] *** tellable6 joined
[03:06] *** evalable6 joined
[03:29] *** swaggboi left
[03:40] *** frost left
[04:40] *** committable6 left
[04:40] *** statisfiable6 left
[04:40] *** quotable6 left
[04:40] *** sourceable6 left
[04:40] *** bisectable6 left
[04:40] *** evalable6 left
[04:40] *** benchable6 left
[04:40] *** squashable6 left
[04:40] *** releasable6 left
[04:40] *** tellable6 left
[04:40] *** nativecallable6 left
[04:40] *** bloatable6 left
[04:40] *** greppable6 left
[04:40] *** reportable6 left
[04:40] *** notable6 left
[04:40] *** linkable6 left
[04:40] *** coverable6 left
[04:40] *** unicodable6 left
[04:40] *** shareable6 left
[04:41] *** reportable6 joined
[04:41] *** benchable6 joined
[04:41] *** committable6 joined
[04:41] *** evalable6 joined
[04:41] *** bisectable6 joined
[04:42] *** tellable6 joined
[04:42] *** sourceable6 joined
[04:42] *** bloatable6 joined
[04:42] *** squashable6 joined
[04:42] *** coverable6 joined
[04:42] *** statisfiable6 joined
[04:43] *** linkable6 joined
[04:43] *** releasable6 joined
[04:43] *** notable6 joined
[04:43] *** nativecallable6 joined
[04:43] *** unicodable6 joined
[04:43] *** shareable6 joined
[04:43] *** greppable6 joined
[04:43] *** quotable6 joined
[05:28] *** Xliff joined
[05:28] <Xliff> \o

[05:28] <Xliff> Hello night owls... here's a question for you:

[05:28] <Xliff> What's the best method to determine if the callable you are using is being run from a class?

[05:35] *** kst left
[05:40] *** jpn joined
[05:41] <moritz> what do you mean?

[05:42] <moritz> code shouldn't care where it's being called from, that hurts composability

[05:43] <xinming> nemokosch, Yea, with space, it'll work, So is |(<<blabla $bleble>>)   What I mean is, I think we should make  |<...>  work as expected as |<<...>> ,  So things can be consistent.

[05:43] <xinming> |<...>  work as expect, But |<<...>>  doesn't cause inconsistency, Which make me feel strange.

[05:53] *** siavash joined
[05:59] *** jpn left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:03] *** abraxxa joined
[06:16] *** sena_kun joined
[06:23] <Xliff> moritz: It does if your use case cares about where the code is being run.

[06:23] <Xliff> It has nothing to do with composability if the actions occur at runtime so I do not believe that is an issue.

[06:24] <Xliff> moritz: So if you have an answer to my issue, I would appreciate if you could share it. :)

[06:30] *** jpn joined
[06:39] <moritz> Xliff: I still haven't fully understood the question. Do you want to know if the caller is a class body, at compile time?

[06:40] <Xliff> No. If the caller is in a class body at RUN time.

[06:40] <moritz> but the class body isn't executed at run time

[06:41] <moritz> class X { foo() } # foo is called at compile time, no?

[06:52] *** sena_kun left
[07:09] <Xliff> No, but methods are.

[07:09] <Xliff> So I want to know if a method is being called by another method or a sub.

[07:10] <Xliff> So... so far I have this: callframe(0).code;

[07:10] <Xliff> And if its a sub, callframe(0).code.package === GLOBAL

[07:10] <Xliff> That's my progress in the time since I asked the question. And I think that's going to be it for me, tonight.

[07:10] <lizmat> m: class X { say "foo" }

[07:10] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «foo␤»

[07:11] <Xliff> \o lizmat!

[07:11] <lizmat> m: class X { say "foo" }; BEGIN "before"

[07:11] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «foo␤»

[07:11] <lizmat> m: class X { say "foo" }; BEGIN say "before"

[07:11] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «before␤foo␤»

[07:11] <lizmat> m: class X { say "foo" }; INIT say "before"

[07:11] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «before␤foo␤»

[07:11] <lizmat> the class body is run as part of the mainline, so *after* INIT

[07:11] <lizmat> moritz ^^

[07:12] <lizmat> m: say "running"; class X { say "foo" }; INIT say "before"

[07:12] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «before␤running␤foo␤»

[07:12] <Xliff> moritz: If you have anything further to add, just drop it with a "Xliff:" prefix or a .tell and I'll get it. Hopefully I'll write a blog post about what I am trying to do if I'm successful.

[07:14] <moritz> ok, it turns out my mental model of raku is quite of sync with reality

[07:18] <Geth> ¦ planet.raku.org: 39c6492600 | (Elizabeth Mattijsen)++ | perlanetrc

[07:18] <Geth> ¦ planet.raku.org: Hopefully finally fix feed of Anton and Steve

[07:18] <Geth> ¦ planet.raku.org: review: https://github.com/Raku/planet.raku.org/commit/39c6492600

[07:21] *** jpn left
[07:22] <Geth> ¦ planet.raku.org: d5fd3e7a1c | (Elizabeth Mattijsen)++ | perlanetrc

[07:22] <Geth> ¦ planet.raku.org: Perhaps wordpress URLs need a trailing slash?

[07:22] <Geth> ¦ planet.raku.org: review: https://github.com/Raku/planet.raku.org/commit/d5fd3e7a1c

[07:23] *** jpn joined
[07:48] *** siavash left
[07:49] *** siavash joined
[07:53] *** Sgeo left
[07:57] *** dakkar joined
[08:13] *** euandreh left
[08:14] *** teatwo joined
[08:17] *** euandreh joined
[08:18] *** teatime left
[08:22] <lizmat> ah, that was the trick

[08:23] *** razetime left
[08:42] *** razetime joined
[08:50] <discord-raku-bot> <nemokosch> xinming: a way to achieve consistency could be to ban |<...> as well, no joke

[08:51] <discord-raku-bot> <nemokosch> That would be easier to ban because it parses

[08:51] *** jpn left
[08:57] <discord-raku-bot> <nemokosch> RE: raku.org site - I replaced the "fetch blog posts" script with a Raku script, except for "xml_escape" which I'm not sure what it was about and maybe it's not even necessary

[08:58] <discord-raku-bot> <nemokosch> Previously I think the installation of dependencies was ad-hoc, this is definitely an infra question how the dependencies should be resolved

[08:59] <discord-raku-bot> <nemokosch> The whole thing could be turned into a distribution, of course

[09:00] <discord-raku-bot> <nemokosch> There is also a process.pl referenced that possibly doesn't even exist

[09:04] *** Tirifto left
[09:09] *** jpn joined
[09:12] *** Tirifto joined
[09:15] *** teatwo left
[09:16] *** teatime joined
[09:40] *** teatime left
[09:40] *** teatime joined
[09:54] *** razetime left
[10:54] *** reportable6 left
[10:54] *** bisectable6 left
[10:54] *** unicodable6 left
[10:54] *** tellable6 left
[10:54] *** linkable6 left
[10:54] *** committable6 left
[10:54] *** squashable6 left
[10:54] *** greppable6 left
[10:54] *** quotable6 left
[10:54] *** releasable6 left
[10:54] *** notable6 left
[10:54] *** benchable6 left
[10:54] *** sourceable6 left
[10:54] *** nativecallable6 left
[10:54] *** statisfiable6 left
[10:54] *** bloatable6 left
[10:54] *** shareable6 left
[10:54] *** evalable6 left
[10:54] *** coverable6 left
[10:54] *** evalable6 joined
[10:54] *** sourceable6 joined
[10:54] *** committable6 joined
[10:54] *** tellable6 joined
[10:55] *** shareable6 joined
[10:55] *** benchable6 joined
[10:55] *** bloatable6 joined
[10:55] *** coverable6 joined
[10:55] *** statisfiable6 joined
[10:56] *** reportable6 joined
[10:56] *** unicodable6 joined
[10:56] *** squashable6 joined
[10:56] *** notable6 joined
[10:56] *** quotable6 joined
[10:56] *** releasable6 joined
[10:56] *** nativecallable6 joined
[10:56] *** linkable6 joined
[10:56] *** greppable6 joined
[10:57] *** bisectable6 joined
[11:20] *** ab5tract left
[11:27] *** jpn left
[11:27] *** jpn joined
[11:43] *** andinus left
[11:45] *** andinus joined
[12:00] *** jpn left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:02] *** ab5tract joined
[12:14] *** euandreh left
[12:16] *** ab5tract left
[12:17] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/08/07/2023-32-rakudoc-gamma/

[12:26] *** euandreh joined
[12:26] <leont> lizmat++

[12:27] *** jpn joined
[12:39] *** jpn left
[13:14] *** merp left
[13:15] *** euandreh left
[13:15] *** merp joined
[13:16] *** euandreh joined
[13:28] *** jpn joined
[13:33] *** jpn left
[13:42] *** jpn joined
[14:06] *** siavash left
[15:22] *** vamc joined
[15:42] *** bigdata joined
[15:45] *** vamc left
[15:46] <discord-raku-bot> <vendethiel> lizmat++

[15:49] <discord-raku-bot> <librasteve> I have been fed

[15:52] <discord-raku-bot> <librasteve> tx xx 2!

[16:12] *** vamc joined
[16:19] *** vamc left
[16:33] *** abraxxa left
[16:44] *** dakkar left
[17:20] *** rf joined
[17:37] *** jpn left
[17:50] *** MoC joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:24] *** MoC left
[18:24] *** MoC joined
[18:47] *** abraxxa-home joined
[18:53] *** MoC left
[18:54] *** MoC joined
[18:55] <xinming> m: https://pastebin.com/fCA9kg21

[18:55] <camelia> rakudo-moar a4a2bbd24: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> https:⏏//pastebin.com/fCA9kg21␤    expecting any of:␤        colon pair␤»

[18:56] <xinming> https://pastebin.com/fCA9kg21      <-- Hi, is it possible to remove the extra $channel-job-notifier in this script please? The script is running fine, I'm using it ATM.

[18:57] <xinming> But the extra $channel-job-notifier doesn't give me the feeling of "perfect" sollution.

[18:58] <xinming> So asking here for better solutions.

[18:58] *** abraxxa-home left
[18:58] <xinming> It makes me unnatural, So I don't feel ok with the script, Even it is working fine for me.

[18:59] *** rf left
[19:00] *** abraxxa-home joined
[19:10] <xinming> hmm, Ignore me, I just dig from my old codes, and found  `my Semaphore $semaphore .= new(3)`

[19:20] *** abraxxa-home left
[19:22] *** swaggboi joined
[19:57] *** MoC left
[19:59] *** jpn joined
[20:04] *** jpn left
[20:13] *** jpn joined
[20:14] *** teatime left
[20:14] *** teatime joined
[20:17] *** rf joined
[20:21] *** jpn left
[20:24] *** swaggboi left
[20:27] *** ab5tract joined
[20:51] *** drakonis joined
[20:51] <drakonis> https://buttondown.email/hillelwayne/archive/raku-a-language-for-gremlins/

[20:51] <drakonis> i am not the author

[20:59] <rf> Where does this person get gremlins from? Besides that I think they liked Raku?

[21:01] <drakonis> https://en.wikipedia.org/wiki/Gremlin

[21:07] *** jpn joined
[21:11] <coleman> They are mischievous, magical critters

[21:12] *** rf left
[21:12] *** rf joined
[21:16] <discord-raku-bot> <nemokosch> Gremlins, as in the movie with the funny soundtrack?

[21:33] <discord-raku-bot> <nemokosch> > The documentation is really poor and the heavy reliance on symbols makes it hard to search for things oof

[21:34] <discord-raku-bot> <nemokosch> To be honest, I still think there are some mainstream languages that clearly have worse documentations: Typescript for sure and PHP can also be reasoned

[21:35] <discord-raku-bot> <nemokosch> and the Typescript documentation has the same problem as the Raku documentation, except like you don't even see the effort to define everything that exists in the language

[21:36] <discord-raku-bot> <nemokosch> On the other hand, if I think how much I learned from the documentation, compared to asking things on IRC, reading Github issues, experimenting with code and looking up Rakudo sources, weeell

[21:37] <discord-raku-bot> <nemokosch> especially since the search bar is, let's face it, downright broken

[21:38] <tonyo> the biggest lift i can see is if the docs linked to the implementation in the source, a lot of times i read the docs and then end up having to grep the source for the implementation so i can figure out exactly how to use it the function

[21:39] <tonyo> a tool like `go doc` would also be big (for me) but that audience is likely small

[21:42] <discord-raku-bot> <nemokosch> I don't like this whole "edging" with the implementation-neutrality, it's getting really tiresome

[21:43] <discord-raku-bot> <nemokosch> the whole language versioning is very much subject to "we are not going to change anything that might be depended on, only horizontally extend Rakudo" attitude

[21:44] <discord-raku-bot> <nemokosch> but I guess if this narrative survived to this day, let's wait until RakuAST at least

[21:46] <discord-raku-bot> <nemokosch> anyway, even if it's announced tomorrow that Rakudo is the specs from now on, mapping concepts to their Rakudo source would be either always incomplete or a tremendous effort when done serously

[22:06] *** guifa joined
[22:25] *** Xliff left
[22:40] <discord-raku-bot> <antononcube> I know how to get Gherkins with Raku.

[22:43] *** jpn left
[22:46] *** Sgeo joined
[23:19] *** kjp left
[23:22] *** kjp joined
[23:31] *** tankf33der joined
[23:38] <tonyo> what do you mean by edging with the implementation neutrality?

