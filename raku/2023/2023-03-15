[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:03] <vrurg> I don't think it'd be widely requested though. Most of the time success of a loop is so much context-dependent.

[00:03] <guifa> Yeah.  It's just a thing that apparently python does.  for { search } else { search failed because would have returned/ended } 

[00:04] <guifa> I actually just ran into one where for { do something } else { no iterables } would have been nice though 

[00:04] <discord-raku-bot> <Nemokosch> that's almost suspicious 😄

[00:06] <discord-raku-bot> <Nemokosch> the logic of it is quite ugly in itself, only doing something when something else ran successfully exactly zero times

[00:06] <guifa> instead I have a "if @foo { for @foo {…} } else { … }"

[00:07] <discord-raku-bot> <Nemokosch> are you sure it's necessary?

[00:08] <guifa> It makes the logic everywhere else much messier

[00:11] <discord-raku-bot> <Nemokosch> this is a bit vague but I strongly suspect an XY problem somewhere. It really seems like an arbitrary distinction

[00:11] <discord-raku-bot> <Nemokosch> mind you, the XY problem can be a language design problem - cue "why isn't there a unified way to reset a variable"

[00:12] <discord-raku-bot> <Nemokosch> one of the "cardinal sins" of Nil

[00:16] <guifa> It's a sub that processes a list of items.  If it's empty, it needs to do something different.  I'm trying to keep code as readable as possible.  Ultimately, it means that the sub process-items needs to do an empty check.  But because of where the sub is called, the logic gets very messy very fast putting the if / then further upstream

[00:16] <guifa> right now I just do sub foo { return alternative unless @foo; for @foo { … } } 

[00:16] <tonyo> nemokosch: python has for else

[00:16] <tellable6> tonyo, I'll pass your message to Nemokosch

[00:16] <guifa> tonyo yeah, but it works differently

[00:17] <tonyo> in what way

[00:17] <tonyo> https://gist.github.com/tonyooooooo/07db207a03506a322b1406df6ec961a1

[00:18] <guifa> tonyo: the else is run if the loop exits without a break 

[00:19] <tonyo> i see the distinction

[00:19] <tonyo> (now)

[00:20] <discord-raku-bot> <Nemokosch> > If it's empty, it needs to do something different.

[00:21] <discord-raku-bot> <Nemokosch> it's tempting to ask why that is because that might be the actual problem

[00:22] <guifa> it's complicated to explain, but I can assure I've explored alternatives and they're messy

[00:24] <discord-raku-bot> <Nemokosch> since Anton already kind of made me out to be some Python fanboy, let me cite "the Zen of Python"

[00:24] <discord-raku-bot> <Nemokosch> "If the implementation is hard to explain, it's a bad idea."

[00:25] <guifa> I don't think for { … } else { … } is hard to explain

[00:25] <guifa> it's very simple

[00:25] <guifa> exceptionally simple

[00:25] <discord-raku-bot> <Nemokosch> but it shouldn't be necessary

[00:25] <guifa> I'd say the same about python's for/else since I've never encountered a need for it

[00:25] <guifa> lol

[00:25] <discord-raku-bot> <Nemokosch> it's about as ad-hoc as if there was a structure specifically for the one-element case

[00:26] <discord-raku-bot> <Nemokosch> but it's really not complicated to say what it solves - searches

[00:26] <discord-raku-bot> <Nemokosch> I didn't even need to explain because you figured it out on your own

[00:26] <guifa> No, I only knew that because the docs said soa

[00:27] <guifa> I would just do @foo.first( { … } ) for that

[00:27] <guifa> there are many reasons for me to leave / not leave early, and the else there seems to only solve one of them

[00:28] <discord-raku-bot> <Nemokosch> that's kind of avoiding the structure altogether

[00:28] <discord-raku-bot> <Nemokosch> yes, exactly about your for-else

[00:28] <discord-raku-bot> <Nemokosch> one arbitrary case

[00:30] <discord-raku-bot> <Nemokosch> to reiterate: @foo.first({ ... }) is not syntax, it's just a built-in. One could hack this empty case for-else into a map-alike, if it is so useful

[00:32] <discord-raku-bot> <Nemokosch> and again, if the "empty array case" is actually a "default/unset value case", then a solution would rather shadow the problem of default @values overlapping with legitimately empty arrays

[00:33] <guifa> I don't see a distinction there: if an array has no items, it shouldn't loop, and sometimes you want to handle something else entirely

[00:33] <guifa> https://blogs.perl.org/users/damian_conway/2019/09/itchscratch.html

[00:34] <guifa> https://twitter.com/ThePerlShop/status/1176118772274515968 first comment to the tweet mentions "this is a common use case" and I'd agree.  I come across it fairly often

[00:34] <guifa> I don't think I've ever come across the python use case

[00:35] <discord-raku-bot> <Nemokosch> > sometimes you want to handle something else entirely but... why would you?

[00:36] <discord-raku-bot> <Nemokosch> For the Python use case, it solves a well-articulated problem, it's not hidden in the nebulae of "sometimes"...

[00:36] <guifa> that should be "handle it in a different way entirely" 

[00:37] <guifa> We'll just have to agree to disagree.  I think the Python use case for breaking out is rare (as I've never encountered a need for it), and the case for handling zero-element lists differently to be quite common.  You find it the opposite.  We can't change each other's experiences.

[00:38] <discord-raku-bot> <Nemokosch> like really, I would like to see the "sometimes". I've already pointed out one reason the empty array needs to be handled specifically (because that's the default value of @variables) - and that is a bad reason to act upon. It's rather a problem of @variables overall.

[00:39] <discord-raku-bot> <Nemokosch> So I do see a difference here. One has a clear purpose that can be addressed and discussed; the other may or may not have better approaches - we don't know because it's all too vague

[00:39] <guifa> Again, we are just going to disagree on this, so it's better to move on.

[00:41] <discord-raku-bot> <Nemokosch> It would have been good to provide similar level of elaboration on both sides even in order to eventually disagree but so be it

[00:46] <discord-raku-bot> <Nemokosch> I actually would have been curious what makes a pattern that I can only see as a leaky abstraction, so common (if not my blind guess the default value), and unlike Python's for-else, it's not easy to even pose it as a question to ChatGPT or something, lol

[00:53] <tonyo> i use it in python every day..but it does come with a lot of questions usually

[00:56] <tonyo> i'd probably try to abuse that syntax to do stuff like `my @a = do for @some-input -> { $_ * $_ } else { qw<some sane default> };`

[01:01] *** derpydoo joined
[01:03] *** xinming left
[01:04] <discord-raku-bot> <Anton Antonov> @guifa Promises, promises— provide the recording of https://tprc2022.sched.com/event/11neo

[01:04] <guifa> I don't have the recording but can email you the slides!

[01:04] <guifa> msg me your email and I'll send along

[01:05] <discord-raku-bot> <Anton Antonov> @guifa … please

[01:05] <discord-raku-bot> <Anton Antonov> @guifa Ah, ok.

[01:05] <guifa> err, you're on the bridge, not sure if you can pm me

[01:05] *** xinming joined
[01:06] <discord-raku-bot> <Anton Antonov> @guifa I can find your email from GitHub?

[01:07] <guifa> you can use my softastur.org email and I can respond back to you -- it's mateu@

[01:17] <guifa> You've got mail

[01:19] <discord-raku-bot> <Anton Antonov> @guifa Got it!

[01:27] <guifa> feel free to ask me any questions

[01:27] <guifa> but hopefully it's mostly understandable as is

[01:49] <discord-raku-bot> <Anton Antonov> @guifa Ok, thanks -- will do!

[01:57] *** jmcgnh left
[02:07] *** elcaro joined
[02:08] *** jacob_c joined
[02:19] *** sivoais left
[02:28] <jacob_c> I'm trying to play around with SDL2::Raw but having issues when running the example programs given. It seems like some of the functions get exported to the program as expected, but some of them don't. For example, the program will recognize SDL_Init but complains that SDL_CreateRGBSurface is an undeclared name. But I can't see anything in the

[02:28] <jacob_c> Raw.pm6 code that would suggest why some functions work and others don't. Because of this, some programs run, like white-noise.p6, but others don't, like particles.p6.

[02:28] <jacob_c> Furthermore, if I just copy the Raw.pm6 code into a foo.pm6 in the same folder and tweak to the example program to something like "use lib '.'; use foo;" then everything works perfectly. (I installed the module using a simple "zef install SDL2::Raw".) It seems like something is acting up with the exporting of the function names. Any idea what the

[02:28] <jacob_c> issue could be?

[02:33] <jacob_c> Unfortunately, the only error message I get is a list of undeclared names. So I'm not even sure how to troubleshoot this.

[02:33] <jacob_c> ===SORRY!=== Error while compiling /home/jacob/temp/particles.raku

[02:33] <jacob_c> Undeclared names:

[02:33] <jacob_c>     SDL_CreateRGBSurface used at line 28

[02:33] <jacob_c>     SDL_FreeSurface used at line 30. Did you mean 'SDL_Surface'?

[02:33] <jacob_c>     SDL_GetWindowSurface used at line 26

[02:33] <jacob_c>     SDL_LockSurface used at line 46. Did you mean 'SDL_Surface'?

[02:33] <jacob_c>     SDL_MapRGBA used at line 48

[02:33] <jacob_c>     SDL_UnlockSurface used at line 84

[02:57] <jacob_c> And one more thing I noticed when inspecting via two separate REPL sessions.

[02:57] <jacob_c> [0] > use lib '.'

[02:57] <jacob_c> Nil

[02:57] <jacob_c> [1] > use foo

[02:57] <jacob_c> Nil

[02:57] <jacob_c> [2] > SDL2::Raw::EXPORT::DEFAULT::.keys.elems

[02:57] <jacob_c> 305

[02:57] <jacob_c> [0] > use SDL2::Raw

[02:57] <jacob_c> Nil

[02:57] <jacob_c> [1] > SDL2::Raw::EXPORT::DEFAULT::.keys.elems

[02:57] <jacob_c> 298

[02:57] <jacob_c> So it seems there are 7 items exactly that get exported via my foo technique, but not through the normal SDL2::Raw.

[02:58] <jacob_c> (Hopefully I'm not spamming by having paragraphs of text here. I'm new to IRC.)

[02:58] <perryprog> (Try to use a pastebin-like service if you can for pasting multi-line stuff)

[02:58] <jacob_c> Ah, that makes sense. Thanks!

[02:58] <MasterDuke> what version of rakudo do you have?

[02:59] <jacob_c> Just installed the latest via rakubrew.

[02:59] <jacob_c> > Currently running moar-2023.02

[03:04] <jacob_c> I could open an issue on GitHub for SDL2::Raw, but I wanted to make sure I wasn't doing something silly first.

[03:04] <MasterDuke> it's pretty late in europe, but you could trying pinging timo1 over in #raku-dev (the author of SDL2::Raw)

[03:07] <jacob_c> That sounds good. I'll let it sit here for a bit, and maybe politely ping him in a day or two if there are no answers here.

[03:08] <perryprog> That is unreasonably polite and patient

[03:08] <perryprog> And suspiciously respectful of open-source package maintainers 

[03:10] <jacob_c> lol Next time I promise to be more demanding ;)

[03:10] <perryprog> Good, good

[03:10] *** rf left
[03:19] *** razetime joined
[03:19] *** sivoais joined
[03:36] *** jmcgnh joined
[03:52] *** razetime left
[04:23] *** razetime joined
[04:38] *** jacob_c left
[04:44] *** discord-raku-bot left
[04:46] *** discord-raku-bot joined
[04:47] *** shmup left
[04:47] *** shmup joined
[05:29] *** razetime left
[05:30] *** Sauvin left
[05:30] *** Sauvin joined
[05:35] *** nort joined
[05:44] *** razetime joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:12] *** jpn joined
[06:17] *** jpn left
[06:26] *** derpydoo left
[06:32] *** abraxxa joined
[06:34] *** Sgeo left
[06:48] *** tea3po joined
[06:51] *** teatwo left
[07:00] *** jetchisel left
[07:02] *** jetchisel joined
[07:04] *** abraxxa left
[07:34] *** abraxxa joined
[07:37] *** Sussysham joined
[07:44] *** Sussysham60 joined
[07:44] *** Sussysham60 left
[07:47] *** Sussysham left
[08:00] <Voldenet> m: class Foo { method AT-POS($n) { $n }}.new; my @p is Foo; @p[42.54].say

[08:00] <camelia> rakudo-moar 23433abe0: OUTPUT: «42␤»

[08:01] <Voldenet> m: class Foo { method AT-KEY($n) { $n }}.new; my %p is Foo; %p{42.54}.say

[08:01] <camelia> rakudo-moar 23433abe0: OUTPUT: «42.54␤»

[08:01] <Voldenet> I guess that makes sense

[08:07] *** Sussysham joined
[08:47] *** Scotteh left
[08:47] *** Scotteh joined
[09:00] *** jpn joined
[09:10] *** dakkar joined
[09:28] *** abraxxa left
[09:32] *** abraxxa joined
[09:38] *** razetime left
[09:47] <guifa> Yeah, the bracket postcircumfix coerces args to Int before calling AT-POS

[09:47] <guifa> m: class Foo { method AT-POS($n) { $n }}.new; my @p is Foo; @p.AT-POS(42.54).say

[09:47] <camelia> rakudo-moar 23433abe0: OUTPUT: «42.54␤»

[09:47] <guifa> but if you call it directly, coercion doesn't happen

[10:38] *** linkable6 left
[10:38] *** evalable6 left
[10:40] *** evalable6 joined
[10:41] *** linkable6 joined
[10:52] *** derpydoo joined
[11:01] *** Sussysham left
[11:17] *** ab5tract joined
[11:43] *** TieUpYourCamel joined
[11:51] <Voldenet> it's very important to understand that Positional doesn't represent any linear order and that Associative is better at representing it

[11:51] *** jmcgnh left
[11:51] <Voldenet> it's not that intuitive

[11:51] <Voldenet> m: class Foo { method AT-POS($n) { $n }}.new; my @p is Foo; @p[-1].say

[11:51] <camelia> rakudo-moar fa384e232: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of a negative -1 subscript to index from the end.  In␤Raku please use: a function such as *-1.␤at <tmp>:1␤------> OS($n) { $n }}.new; my @p is Foo; @p[-1]⏏.say␤»

[11:51] <Voldenet> m: class Foo { method elems { 42}; method AT-POS($n) { $n }}.new; my @p is Foo; @p[*-1].say

[11:51] <camelia> rakudo-moar fa384e232: OUTPUT: «41␤»

[11:59] <exp> could you explain how Positional doesn't represent a linear order?

[12:00] <exp> do you mean because of the ability to do as you described

[12:00] *** reportable6 left
[12:00] *** teatime joined
[12:00] <exp> and, if such behaviours are to be taken as canonical, is there anything in Raku that represents anything? Given how mutable everything is

[12:00] *** reportable6 joined
[12:01] <lizmat> I think it basically boils down to: if something is Positional, you can only use integer values to index into it

[12:01] <lizmat> as opposed to just anything in the case of Asssociative

[12:01] *** tea3po left
[12:02] <lizmat> normally, negative integer values are not allowed, but you can provide your own AT-POS implementation that allows them

[12:02] <lizmat> in fact, you can even provide an AT-POS implementation that could handle anything

[12:03] <exp> indeed, but that seems rather oxymoronic, because you can effectively reimplement anything in Raku as far as I know

[12:03] <exp> so it doesn't seem reasonable to say "X doesn't do Y" if by default, X is intended to do Y :)

[12:03] <lizmat> for example. https://raku.land/zef:lizmat/Array::Sparse would map indices to hash keys

[12:03] <lizmat> true

[12:03] *** NemokoschKiwi joined
[12:09] *** grondilu joined
[12:09] <grondilu> m: class :: does Dateish { has $.data; }.new: data => "foo bar"

[12:09] <camelia> rakudo-moar fa384e232: OUTPUT: «Cannot call <anon|1>.new with these named parameters: data␤  in block <unit> at <tmp> line 1␤␤»

[12:10] *** perlbot left
[12:10] *** simcop2387 left
[12:10] <grondilu> I don't quite understand this error^

[12:10] <Voldenet> exp: it represents specific total ordering on non-negative integers and you can't reimplement that easily

[12:10] <exp> Voldenet: what's the difference between specific total ordering and linearisation?

[12:11] <Voldenet> m: sub postcircumfix:<[ ]>($container, $index) { … }; my @p; @p[-1].say

[12:11] <camelia> rakudo-moar fa384e232: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of a negative -1 subscript to index from the end.  In␤Raku please use: a function such as *-1.␤at <tmp>:1␤------> $container, $index) { … }; my @p; @p[-1]⏏.say␤»

[12:13] *** NemokoschKiwi left
[12:14] <Voldenet> exp: specific one will accept only UInt and will define expectation of knowing length

[12:14] <exp> ok but there's also Supplies aren't there for those without known length?

[12:15] <exp> I guess I'm confused by what behaviour you expect

[12:16] <Voldenet> I was expecting index to be passed without casting

[12:17] <Voldenet> it's practical to have infinite sets being positional, but things will break

[12:17] <Voldenet> m: my @x = 1..*; @x[*-1].say

[12:17] <camelia> rakudo-moar fa384e232: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[12:17] <Voldenet> but of course, this has to fail

[12:30] <discord-raku-bot> <Nemokosch> yes, this probably doesn't even make sense

[12:33] *** derpydoo left
[12:37] <Voldenet> m: class Foo { method AT-POS($n) { $n }}.new; my @p is Foo; @p[*..1].say

[12:37] <camelia> rakudo-moar fa384e232: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 10240 bytes␤»

[12:38] <Voldenet> Not as expected

[12:39] <Voldenet> since index must be valid UInt, * must be 0 here, doesn't it

[12:40] <discord-raku-bot> <Nemokosch> too magical, not magical enough

[12:40] <Voldenet> m: class Foo { method AT-POS($n) { say $n; $n }}.new; my @p is Foo; @p[*..1].say

[12:40] <camelia> rakudo-moar fa384e232: OUTPUT: «Cannot convert -Inf to Int␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in method AT-POS at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <Voldenet> w-what ಠ_ಠ 

[12:45] <Voldenet> OTOH Associative does exactly what I'd expect from Positional (*..1 will just keep calling AT-KEY for -Inf)

[12:49] <discord-raku-bot> <Nemokosch> what did you change exactly?

[12:49] <Voldenet> ` say $n; `

[12:50] <discord-raku-bot> <Nemokosch> pfff

[12:52] *** derpydoo joined
[13:17] *** jpn left
[13:21] *** grondilu left
[13:24] *** jacob_c joined
[13:42] *** jacob_c left
[13:52] *** xinming left
[13:54] *** xinming joined
[13:59] *** jmcgnh joined
[14:00] *** jpn joined
[14:05] *** jpn left
[14:10] *** jgaz joined
[14:18] <Geth> ¦ raku.org: oneineight++ created pull request #182: Replaced url of article on non-existent https://perl6.party …

[14:18] <Geth> ¦ raku.org: review: https://github.com/Raku/raku.org/pull/182

[14:26] <Geth> ¦ CCR/main: e14ce8fe2e | (Elizabeth Mattijsen)++ | 2 files

[14:26] <Geth> ¦ CCR/main: Update self-referential links

[14:26] <Geth> ¦ CCR/main: review: https://github.com/Raku/CCR/commit/e14ce8fe2e

[14:28] <Geth> ¦ CCR/main: cdaa5de6b9 | (Elizabeth Mattijsen)++ | Remaster/Zoffix Znet/Part-2-A-Date-With-The-Bug-Queue-or-Let-Me-Help-You-Help-Me-Help-You.md

[14:28] <Geth> ¦ CCR/main: Oops, there shouldn't be a / there

[14:28] <Geth> ¦ CCR/main: review: https://github.com/Raku/CCR/commit/cdaa5de6b9

[14:31] *** jpn joined
[14:32] *** Sgeo joined
[14:49] *** jgaz left
[14:51] *** jgaz joined
[14:56] *** avuserow left
[15:06] <[Coke]> TIL about Raku/CCR

[15:07] <coleman> Brother, the only CCR I know is Creedence

[15:07] <coleman> yeee haw

[15:12] *** spacekookie joined
[15:31] <tonyo> from fresno ca

[16:06] *** cfa joined
[16:10] <xinming> my $str = do with $str { s/abc//; s/bcd/; s/xyz/; $_ };       # <-- In this example, How do we make a $str a copy?

[16:10] <xinming> my $str = do with $str-orig { s/abc//; s/bcd/; s/xyz/; $_ };       # <-- In this example, How do we make a $str a copy?

[16:11] <xinming> hmm, Just figured out something liek,    my $str = do with (my $ = $str-orig) { ... };

[16:15] <discord-raku-bot> <Nemokosch> m: my $str = do with $str-orig -> $ is copy { s/abc//; s/bcd/; s/xyz/; $ }; dd $str; dd $str-orig; # I wonder

[16:15] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '$str-orig' is not declared at /home/glot/main.raku:1 ------> my $str = do with ⏏$str-orig -> $_ is copy { s/abc//; s/bcd 

[16:16] <discord-raku-bot> <Nemokosch> oh bruh

[16:16] <discord-raku-bot> <Nemokosch> m: my $str-orig = 'abcdefghxyz'; my $str = do with $str-orig -> $ is copy { s/abc//; s/bcd/; s/xyz/; $ }; dd $str; dd $str-orig; # I wonder

[16:16] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unsupported use of /x.  In Raku please use: normal default whitespace. at /home/glot/main.raku:1 ------> orig -> $ is copy { s/abc//; s/bcd/; s/x⏏yz/; $ }; dd $str; dd $str-orig; # I won 

[16:17] <discord-raku-bot> <Nemokosch> come on, these error messages are not relevant anymore...

[16:17] <dakkar> or, you know, my $str = $str-orig.subst(/abc/,'').subst(/bcd/.'').subst(/xyz/,'')

[16:18] <dakkar> (notice that the code xinming wrote won't compile because `s/foo/` is not valid syntax, it's missing the replacement bit)

[16:18] <Voldenet> or `my $str = do with $str { S/abc//; s/bcd/; s/xyz/; $_ };`

[16:19] <Voldenet> m: my $str = do with ($_ = "xyzabcd") { s/abc//; s/bcd//; s/xyz//; $_ };

[16:19] <camelia> rakudo-moar cd2188699: ( no output )

[16:20] <discord-raku-bot> <Nemokosch> oh there were actual syntax errors

[16:20] <discord-raku-bot> <Nemokosch> m: my $str-orig = 'abcdefghxyz'; my $str = do with $str-orig -> $ is copy { s/abc//; s/bcd//; s/xyz//; $ }; dd $str; dd $str-orig;

[16:20] <discord-raku-bot> <Raku eval>  Str $str = "defgh" Str $str-orig = "abcdefghxyz" 

[16:21] <discord-raku-bot> <Nemokosch> finally 👏

[16:46] *** simcop2387 joined
[16:47] *** perlbot joined
[16:48] *** rf joined
[16:49] <rf> Morning folks

[16:53] <Voldenet> morning but it's 6PM here

[16:59] <dutchie> but http://www.total-knowledge.com/~ilya/mips/ugt.html

[17:04] <discord-raku-bot> <Nemokosch> it's not in effect everywhere

[17:04] *** ab5tract left
[17:05] *** ab5tract joined
[17:05] *** simcop2387 left
[17:06] <rf> @Voldenet it's about 10 AM here

[17:06] *** simcop2387 joined
[17:07] <Voldenet> I like UGT, it expresses the freedom of the internet

[17:09] <cfa> m: say "good {now.DateTime.hour < 12 ?? 'morning' !! 'afternoon'}"

[17:09] <camelia> rakudo-moar cd2188699: OUTPUT: «good afternoon␤»

[17:10] <cfa> i guess technically 12:00:00 isn't after noon but hey

[17:11] <rf> m: say "{ True ?? 'Good Morning' : 'Good Afternoon' }"

[17:11] <camelia> rakudo-moar cd2188699: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Please use !! rather than :␤at <tmp>:1␤------> say "{ True ?? 'Good Morning' :⏏ 'Good Afternoon' }"␤    expecting any of:␤        colon pair␤»

[17:11] <rf> m: say "{ True ?? 'Good Morning' !! 'Good Afternoon' }"

[17:11] <camelia> rakudo-moar cd2188699: OUTPUT: «Good Morning␤»

[17:11] <rf> :^)

[17:11] <cfa> hee hee

[17:11] <exp> no i think you're right cfa 

[17:12] <exp> it ticks over at precisely the stroke of 12

[17:13] <cfa> m: say "$_, i said $_!" given 'good day'

[17:13] <camelia> rakudo-moar cd2188699: OUTPUT: «good day, i said good day!␤»

[17:13] <tonyo> cfa: only for an instance

[17:13] <tonyo> instant*

[17:24] *** Sauvin left
[17:25] <cfa> m: say /"12:00:00"/ ?? 'lunchtime' !! .split(':')[0] < 12 ?? 'morning' !! 'afternoon' given now.DateTime.hh-mm-ss

[17:25] <camelia> rakudo-moar cd2188699: OUTPUT: «afternoon␤»

[17:32] *** Sauvin joined
[17:36] *** abraxxa left
[17:40] *** dakkar left
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:11] *** jmcgnh left
[18:16] <[Coke]> m: say 65/416

[18:16] <camelia> rakudo-moar cd2188699: OUTPUT: «0.15625␤»

[18:28] *** nommef joined
[18:30] <nommef> hello, possibly a stupid question, but why `[1, 2, 3].first(* < 0 && * > 0)` returns 1 and not Nil?

[18:30] *** jmcgnh joined
[18:35] <[Coke]> m: say [1,2,3].first({$_ <0 && $_ > 0});

[18:35] <camelia> rakudo-moar cd2188699: OUTPUT: «Nil␤»

[18:35] *** abraxxa-home joined
[18:36] *** abraxxa-home left
[18:36] <[Coke]> m: say [1,2,3].first(* > 0 && * < 0);

[18:36] <camelia> rakudo-moar cd2188699: OUTPUT: «Nil␤»

[18:37] <[Coke]> m: say [1,2,3].first(* < 0 && * > 0);

[18:37] <camelia> rakudo-moar cd2188699: OUTPUT: «1␤»

[18:37] <discord-raku-bot> <Nemokosch> * and * refer to two different positional parameters

[18:37] <[Coke]> to be clear, I don't know the answer, but that fact that the first two give a different answer is probably a huge clue.

[18:38] *** abraxxa-home joined
[18:38] <discord-raku-bot> <Nemokosch> every occasion of * appearing in a "whatever-curried" expression is a new positional parameter

[18:38] <rf> m: say [1,2,3].first(* > 0 and * < 0);

[18:38] <camelia> rakudo-moar cd2188699: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say [1,2,3].first(* > 0⏏ and * < 0);␤    expecting any of:␤…»

[18:38] <rf> Is it actually called whatever curried?

[18:38] <rf> Because I don't think that is currying

[18:39] <discord-raku-bot> <Nemokosch> yes

[18:39] <cfa> this doesn't seem to be the case here

[18:39] <cfa> m: (1).first(* == 0 && * == 2 && * == 3).say

[18:39] <camelia> rakudo-moar cd2188699: OUTPUT: «Nil␤»

[18:39] <cfa> m: (1).first(* == 0 && * == 2 && * == 1).say

[18:39] <camelia> rakudo-moar cd2188699: OUTPUT: «1␤»

[18:40] <cfa> that's not taking three arguments

[18:40] <cfa> m: (1).first(* == 1 && * == 2 && * == 3).say

[18:40] <camelia> rakudo-moar cd2188699: OUTPUT: «Nil␤»

[18:40] <discord-raku-bot> <Nemokosch> could be that it's a && hack?

[18:40] <rf> I think so

[18:40] <discord-raku-bot> <Nemokosch> iirc it's a bit funny with whatever-currying

[18:41] <rf> Whenever I see && I get suspicious

[18:41] <discord-raku-bot> <Nemokosch> but anyway the general rule is that all appearances of the asterisk introduce a new positional parameter

[18:41] <cfa> m: (* == 1 && * == 2 && * == 3)(1).say

[18:41] <camelia> rakudo-moar cd2188699: OUTPUT: «False␤»

[18:41] <discord-raku-bot> <Nemokosch> which is definitely not what the intention was here

[18:41] <cfa> m: (* == 3 && * == 2 && * == 1)(1).say

[18:41] <camelia> rakudo-moar cd2188699: OUTPUT: «True␤»

[18:41] <nommef> ._.

[18:42] <cfa> single argument expected, behaviour seems plain buggy to me

[18:42] <rf> m: (* == 3 && * == 2 && * == 1).Signature.say

[18:42] <camelia> rakudo-moar cd2188699: OUTPUT: «No such method 'Signature' for invocant of type 'WhateverCode'.  Did␤you mean 'signature'?␤  in block <unit> at <tmp> line 1␤␤»

[18:42] <discord-raku-bot> <Nemokosch> truth be told, whatever-currying is not meant to be used for anything remotely complex

[18:43] <cfa> m: (* == False && * == 1)(1).say

[18:43] <camelia> rakudo-moar cd2188699: OUTPUT: «True␤»

[18:43] <cfa> clearer,

[18:43] <cfa> m: m: (* != 0 && * == 1)(1).say

[18:43] <camelia> rakudo-moar cd2188699: OUTPUT: «True␤»

[18:43] <cfa> damnit, typo

[18:43] <cfa> m: m: (* == 0 && * == 1)(1).say

[18:43] <camelia> rakudo-moar cd2188699: OUTPUT: «True␤»

[18:44] <discord-raku-bot> <Nemokosch> m: * == 0 && * == 1 andthen .(0|1).say

[18:44] <discord-raku-bot> <Raku eval>  any(False, True) 

[18:45] <discord-raku-bot> <Nemokosch> && doesn't whatever-curry at all

[18:45] <rf> m: { say * }(1);

[18:45] <camelia> rakudo-moar cd2188699: OUTPUT: «*␤»

[18:45] <cfa> m: (* == 3 && * == 2 && * == 1).signature.arity.say # for rf

[18:45] <camelia> rakudo-moar cd2188699: OUTPUT: «1␤»

[18:46] <lizmat> re CCR: I would love to see someone make a really nice website for the Remaster dir  :-)

[18:47] <nommef> I had something like this: `@users.first(*<name> eq $name && *<pass> eq $pass)` and was very surprised it was only comparing passwords. I could log in with any invalid username and any valid password :D

[18:47] *** teatime left
[18:48] <cfa> i frankly find whatever stars confusing and unpredictable 

[18:48] *** teatime joined
[18:48] <cfa> they're okay in very small code fragments but... yeah

[18:48] <discord-raku-bot> <Nemokosch> re learning about CCR today - I called it... there is more content than people tend to assume, spreading awareness might give not only a moral boost but like better results at things

[18:49] <nommef> yeah, they do seem a bit strange. lessen learnt - only use them in very simple ways

[18:49] <discord-raku-bot> <Nemokosch> nommef: for now, the important thing is still that * doesn't reference the same parameter over and over but a new one every time

[18:49] <cfa> also, nommef, your question wasn't stupid at all

[18:49] *** grondilu joined
[18:49] *** grondilu left
[18:50] <discord-raku-bot> <Nemokosch> and that && doesn't whatever-curry, well... in mid term, I'd like to call that a bug rather than a feature

[18:50] <nommef> so, I hit a combo :D

[18:51] <cfa> Nemokosch, can you explain this behaviour?

[18:51] *** teatime left
[18:51] *** teatwo joined
[18:51] <discord-raku-bot> <Nemokosch> like anyway, what sense does it make to parse * eq 'a' && * eq 'b' as (* eq 'a') && (* eq 'b'), two distinct code objects? can any code object be false at all?

[18:52] <discord-raku-bot> <Nemokosch> cfa: it's probably beyond my knowledge but it comes up every now and then that && and || are kind of special because of the short-circuiting

[18:53] <discord-raku-bot> <Nemokosch> there is some kind of compiler-level intervention

[18:53] <discord-raku-bot> <Nemokosch> so that the arguments don't evaluate beforehand

[18:54] <cfa> but the above behaviour resembles || rather than && short circuiting

[18:54] <cfa> m: m: (* == 0 && * == 1)(1).say

[18:54] <camelia> rakudo-moar cd2188699: OUTPUT: «True␤»

[18:54] <cfa> this should short circuit and not even test == 1

[18:55] <cfa> perhaps i misunderstood your point though

[18:55] <discord-raku-bot> <Nemokosch> && returns the second argument if the first one is truthy, right?

[18:55] <lizmat> yes

[18:55] <discord-raku-bot> <Nemokosch> the first argument is a code object

[18:55] <lizmat> m: say 0 && 42

[18:55] <camelia> rakudo-moar cd2188699: OUTPUT: «0␤»

[18:55] <lizmat> m: say 1 && 42

[18:55] <camelia> rakudo-moar cd2188699: OUTPUT: «42␤»

[18:56] <discord-raku-bot> <Nemokosch> m: * == 0 andthen .so.say

[18:56] <discord-raku-bot> <Raku eval>  True 

[18:56] <cfa> aha

[18:56] <discord-raku-bot> <Nemokosch> it is True, and I suspect that it is always true, no matter what the exact expression was that constructed the WhateverCode

[18:57] <discord-raku-bot> <Nemokosch> meaning && will give you the right side and || the left side

[18:57] <cfa> so everything but the final branch is effectively optimised away here?

[18:57] <cfa> and then our argument is handed to that whatevercode instance?

[18:58] *** perlbot left
[18:59] *** simcop2387 left
[19:00] *** jpn left
[19:00] <discord-raku-bot> <Nemokosch> hm, I don't think it's "optimized away", it's rather a parser thing maybe? it's hard for me to tell without actually knowing how && is put in its place

[19:01] <rf> Could be that && is making it infer that * is the same argument throughout

[19:01] <discord-raku-bot> <Nemokosch> the way I understand it is that these operators take code "raw" when they are parsed

[19:01] <rf> m: (* + *).signature.arity.say

[19:01] <camelia> rakudo-moar cd2188699: ( no output )

[19:02] <discord-raku-bot> <Nemokosch> m: (* + *) andthen .signature.arity.say

[19:02] <discord-raku-bot> <Raku eval>  2 

[19:02] <discord-raku-bot> <Nemokosch> you know, my understanding is that && does something similar to andthen

[19:03] <discord-raku-bot> <Nemokosch> it operates on pieces on code rather than values

[19:03] *** jpn joined
[19:03] *** simcop2387 joined
[19:03] *** perlbot joined
[19:03] <cfa> yeah i guess (from a user perspective) this is confusing for two reasons

[19:03] <discord-raku-bot> <Nemokosch> "take the left hand-side, evaluate it in boolean context - if it yields True, take the right hand-side, evaluate that as well and return it"

[19:03] <cfa> one is that (* + *) has an arity of 2, while (* == 0 && * == 1) has an arity of 1

[19:04] <cfa> the other is the && behaviour with code objects, which is invisible and surprising behaviour

[19:04] <cfa> so that it's non-obvious 

[19:04] <cfa> or rather, it's not obvious that this is an example of say 1 && 42

[19:05] <discord-raku-bot> <Nemokosch> I'd like to try one example with snitch, hmm

[19:06] <nommef> thank you all for explanation. it was not very apparent to me (still pretty green in raku)

[19:06] *** NemokoschKiwi joined
[19:07] <nommef> i am getting similar vibes like from `[1, 2, 1, 2].map(parseInt)` evaluating to `[ 1, NaN, 1, 2 ]` in JS :D

[19:07] <NemokoschKiwi> m: use v6.*; (*.snitch.not || *.succ.snitch)(1)

[19:07] <camelia> rakudo-moar cd2188699: OUTPUT: «1␤»

[19:08] <NemokoschKiwi> if `(*.snitch.not || *.succ.snitch)` was one expression, the second half should have evaluated, right?

[19:08] *** jpn left
[19:08] <NemokoschKiwi> m: use v6.*; (*.snitch.not.snitch || *.succ.snitch)(1)

[19:08] <camelia> rakudo-moar cd2188699: OUTPUT: «1␤False␤»

[19:08] <NemokoschKiwi> sure thing because the first half evaluates to False when you pass 1 to it

[19:09] *** jgaz left
[19:10] <NemokoschKiwi> m: use v6.*; (*.snitch.not.snitch && *.succ.snitch)(1)

[19:10] <camelia> rakudo-moar cd2188699: OUTPUT: «2␤»

[19:11] <NemokoschKiwi> the second half ran, without any considerations to the first half

[19:12] <cfa> at the very least, this seems worth documenting as a trap

[19:12] <cfa> if this is all WAI, a warning would be good 

[19:14] <NemokoschKiwi> I can also recall something from Liz that this is really a parser-level intervention, and calling &infix:<&&> just wouldn't short-circuit at all

[19:14] <lizmat> indeed it won't   the shirt-circuiting ops are really "macros" at the grammar level

[19:15] <lizmat> the sub versions only exist so you can use them in meta-ops

[19:15] <lizmat> but currently do *not* short-cicruit

[19:15] <lizmat> *circuit

[19:15] *** jgaz joined
[19:17] <NemokoschKiwi> do you think short-circuiting over WhateverCode could be avoided with the RakuAST frontend easier?

[19:17] *** jpn joined
[19:19] *** NemokoschKiwi left
[19:22] *** jpn left
[19:33] *** cfa left
[19:40] *** nommef left
[19:46] *** abraxxa-home left
[19:57] *** perlbot left
[19:57] *** simcop2387 left
[20:09] *** simcop2387 joined
[20:09] *** perlbot joined
[20:19] *** perlbot left
[20:19] *** simcop2387 left
[20:19] *** jpn joined
[20:27] *** jpn left
[20:28] *** perlbot joined
[20:30] *** simcop2387 joined
[20:42] *** jpn joined
[20:44] *** ab5tract left
[20:48] *** Guest74 joined
[20:48] *** Guest74 left
[21:00] *** jpn left
[21:34] *** jmcgnh left
[21:41] *** jmcgnh joined
[21:49] *** jpn joined
[21:53] *** jpn left
[21:56] *** simcop2387 left
[21:56] *** simcop2387 joined
[22:01] *** raiph joined
[22:12] *** simcop2387 left
[22:12] *** simcop2387 joined
[22:16] *** simcop2387 left
[22:19] *** simcop2387 joined
[22:22] *** simcop2387 left
[22:22] *** simcop2387 joined
[22:27] *** simcop2387 left
[22:29] *** simcop2387 joined
[22:34] *** perlbot left
[22:34] *** perlbot joined
[22:45] *** jpn joined
[22:50] *** jpn left
[22:56] *** perlbot left
[22:56] *** perlbot joined
[23:09] *** simcop2387 left
[23:09] *** simcop2387 joined
[23:09] *** jgaz left
[23:16] *** simcop2387 left
[23:16] *** simcop2387 joined
[23:34] *** raiph left
