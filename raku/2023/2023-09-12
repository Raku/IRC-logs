[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:33] <guifa> whoa

[00:33] <guifa> TIL

[00:34] <guifa> my @a = 1,2,3; push(@a: 4); say @a

[00:34] <evalable6> guifa, rakudo-moar 4b69dd51e: OUTPUT: «[1 2 3 4]␤»

[00:34] <guifa> I always thought it HAD to be parentheses-less

[00:37] *** statisfiable6 joined
[00:38] *** swaggboi joined
[00:58] *** gcd left
[00:58] *** gcd joined
[01:27] *** jpn joined
[01:32] *** jpn left
[01:46] *** benchable6 joined
[01:46] *** releasable6 joined
[01:49] <tonyo> what is the push(@a: 4) compiling to, i'd've figured a comma there

[01:50] <tonyo> my @a = 1,2,3; push(@a, 4); dd @a;

[01:50] <evalable6> tonyo, rakudo-moar 4b69dd51e: OUTPUT: «Array @a = [1, 2, 3, 4]␤»

[01:51] *** sourceable6 joined
[01:52] <tonyo> guifa: isn't the `@a.push: ...` syntax just sugar for `push(@a, ...)` like in perl's `$a = T->new; $a->xxx` is just sugar for `$a = T::new(T); T::xxx($a);`

[01:52] <tonyo> or whatever it is, i haven't had a perl job for six years now

[01:53] *** coverable6 joined
[01:53] *** committable6 joined
[01:54] <guifa> There's a sub push(@,$) but then Array defines a method push($)

[01:54] <guifa> push(@a,4) calls the sub

[01:54] <guifa> push(@a: 4) calls the method

[01:55] <guifa> IIRC the sub just ends up calling the method anyways, but that doesn't have to be the case (even if it normally is)

[01:56] <tonyo> interesting

[01:56] <guifa> the idea is if I make a class

[01:57] <guifa> class Foo { method parrot($x) { say $x } }; my $f = Foo.new; $f.parrot('oo'); parrot $f: 'proc'

[01:57] <evalable6> guifa, rakudo-moar 4b69dd51e: OUTPUT: «oo␤proc␤»

[01:57] <guifa> I don't need to write the sub version manually 

[02:07] <tonyo> wonder where that came from

[02:07] <tonyo> looks fp-ish

[02:07] <tonyo> in spite of the source obviously being oo

[02:08] <guifa> I always figured it was designed to make stuff very procedural

[02:08] *** teatwo left
[02:10] <guifa> but I guess both functional and procedurals tend to be more verb first, and OO more object first

[02:11] <guifa> fwiw this is in reference to https://github.com/Raku/problem-solving/issues/384

[02:27] <tonyo> interesting, i'd echo codesection's comment

[02:32] *** teatime joined
[02:56] <tonyo> my Promise $p .=new; keep $p: 42; await $p; say $p.result

[02:56] <evalable6> tonyo, rakudo-moar 4b69dd51e: OUTPUT: «42␤»

[03:04] *** linkable6 joined
[03:15] *** jpn joined
[03:20] *** jpn left
[04:20] *** statisfiable6 left
[04:20] *** benchable6 left
[04:20] *** bloatable6 left
[04:20] *** squashable6 left
[04:20] *** bisectable6 left
[04:20] *** quotable6 left
[04:20] *** reportable6 left
[04:20] *** evalable6 left
[04:20] *** linkable6 left
[04:20] *** committable6 left
[04:20] *** coverable6 left
[04:20] *** sourceable6 left
[04:20] *** releasable6 left
[04:20] *** tellable6 left
[04:20] *** unicodable6 left
[04:20] *** nativecallable6 left
[04:20] *** greppable6 left
[04:20] *** notable6 left
[04:20] *** shareable6 left
[04:21] *** sourceable6 joined
[04:21] *** notable6 joined
[04:22] *** benchable6 joined
[04:22] *** statisfiable6 joined
[04:22] *** reportable6 joined
[04:22] *** shareable6 joined
[04:23] *** unicodable6 joined
[04:23] *** quotable6 joined
[04:45] *** pjlsergeant__ left
[04:45] *** pjlsergeant__ joined
[05:02] *** pjlsergeant__ left
[05:02] *** quotable6 left
[05:02] *** unicodable6 left
[05:02] *** shareable6 left
[05:02] *** reportable6 left
[05:02] *** statisfiable6 left
[05:02] *** benchable6 left
[05:02] *** notable6 left
[05:02] *** sourceable6 left
[05:02] *** teatime left
[05:02] *** swaggboi left
[05:02] *** avuserow left
[05:02] *** nine left
[05:02] *** tinita left
[05:02] *** xelxebar left
[05:02] *** avar left
[05:02] *** ab5tract left
[05:02] *** summerisle left
[05:02] *** perlmaros left
[05:02] *** defaultxr left
[05:02] *** DarthGandalf left
[05:02] *** m_athias left
[05:02] *** z4kz left
[05:02] *** Sgeo left
[05:02] *** dg left
[05:02] *** tjr left
[05:02] *** ProperNoun left
[05:02] *** Geth left
[05:02] *** donpdonp|z_ left
[05:02] *** jetchisel left
[05:02] *** gcd left
[05:02] *** buffet left
[05:02] *** bartolin left
[05:02] *** thebb left
[05:02] *** xkr47 left
[05:02] *** corwin left
[05:02] *** ugexe left
[05:02] *** vrurg left
[05:02] *** rjbs left
[05:02] *** tobs left
[05:02] *** jrjsmrtn left
[05:02] *** kaskal left
[05:02] *** xinming left
[05:02] *** dutchie left
[05:02] *** sivoais left
[05:02] *** lizmat left
[05:02] *** tbrowder_ left
[05:02] *** dogbert17 left
[05:02] *** bdju left
[05:02] *** justache left
[05:02] *** oodani left
[05:02] *** samcv left
[05:02] *** gugod left
[05:02] *** peder left
[05:02] *** mark22k left
[05:02] *** spacekookie left
[05:02] *** rypervenche left
[05:02] *** charsbar left
[05:02] *** cm left
[05:02] *** eseyman left
[05:02] *** sftp left
[05:02] *** kybr left
[05:02] *** renormalist left
[05:02] *** jmcgnh left
[05:02] *** amenonsen left
[05:02] *** kaol left
[05:02] *** gabiruh left
[05:02] *** tadzik left
[05:03] *** MasterDuke joined
[05:03] *** camelia joined
[05:03] *** hexology joined
[05:03] *** sjn joined
[05:03] *** pat_js joined
[05:03] *** merp joined
[05:03] *** _________ joined
[05:03] *** guifa joined
[05:03] *** El_Che joined
[05:03] *** RakuIRCLogger joined
[05:03] *** lucerne joined
[05:03] *** gfldex joined
[05:03] *** bd3i joined
[05:03] *** andinus joined
[05:03] *** mjgardner joined
[05:03] *** SmokeMachine joined
[05:03] *** jast joined
[05:03] *** polettix joined
[05:03] *** patrickb joined
[05:03] *** clarkema joined
[05:03] *** atweedie joined
[05:03] *** snonux joined
[05:03] *** jdv joined
[05:03] *** phogg joined
[05:03] *** esh joined
[05:03] *** ecocode joined
[05:03] *** coleman joined
[05:03] *** kawaii joined
[05:03] *** jcallen joined
[05:03] *** leedo joined
[05:03] *** nebuchad` joined
[05:03] *** timo joined
[05:03] *** discord-raku-bot joined
[05:03] *** human-blip joined
[05:03] *** japhb joined
[05:03] *** synthmeat joined
[05:03] *** JRaspass joined
[05:03] *** pierrot_ joined
[05:03] *** gordonfish joined
[05:03] *** zostay joined
[05:03] *** Scotteh joined
[05:03] *** leont joined
[05:03] *** dpk joined
[05:03] *** rba joined
[05:03] *** BinGOs joined
[05:03] *** tib joined
[05:03] *** tbrowder__ joined
[05:03] *** a3r0 joined
[05:04] *** RakuIRCLogger left
[05:04] *** jpn joined
[05:09] *** jpn left
[05:20] *** cliniclown joined
[05:21] *** cliniclown left
[05:23] *** nil joined
[05:24] *** bloatable6 joined
[05:26] *** squashable6 joined
[05:27] *** bisectable6 joined
[05:27] *** greppable6 joined
[05:28] *** releasable6 joined
[05:28] *** coverable6 joined
[05:28] *** linkable6 joined
[05:29] *** committable6 joined
[06:00] *** reportable6 left
[06:27] *** nil left
[06:35] *** z4kz left
[06:52] *** jpn joined
[06:57] *** jpn left
[07:31] *** jpn joined
[07:37] *** Sgeo left
[07:37] *** jpn left
[07:47] *** nativecallable6 joined
[08:07] *** tellable6 joined
[08:09] *** abraxxa joined
[08:10] *** dakkar joined
[08:19] *** simcop2387 left
[08:19] *** perlbot left
[08:19] *** xkr47 left
[08:21] *** teatwo joined
[08:23] *** perlbot joined
[08:24] *** teatime left
[08:25] *** simcop2387 joined
[08:52] *** jpn joined
[09:11] *** Geth left
[09:11] *** Geth joined
[09:35] *** Manifest0 joined
[09:35] *** Manifest0 left
[09:39] *** jpn left
[09:45] *** Manifest0 joined
[09:50] *** jpn joined
[09:54] *** reportable6 joined
[10:04] *** Manifest0 left
[10:35] *** jpn left
[10:35] *** Manifest0 joined
[10:39] *** evalable6 joined
[11:25] *** jpn joined
[11:27] *** HobGoblin left
[11:27] *** goblin joined
[11:35] *** jpn left
[11:58] *** oodani left
[11:59] *** oodani joined
[12:00] *** reportable6 left
[12:05] *** oodani left
[12:20] *** oodani joined
[12:50] *** xkr47 joined
[13:07] <xinming> when we do .split, Is there a way to split on the first occurence of the space for the regex?

[13:09] <lizmat> m: say "foo:bar:baz".split(":",2) ?

[13:09] <camelia> rakudo-moar 3a91b4956: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> say "foo:bar:baz".split(":",2)⏏ ?␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement m…»

[13:09] <lizmat> m: say "foo:bar:baz".split(":",2)

[13:09] <camelia> rakudo-moar 3a91b4956: OUTPUT: «(foo bar:baz)␤»

[13:10] *** lizmat_ joined
[13:11] <xinming> lizmat: SO the 2 here means  $limit, right?

[13:11] <lizmat_> yes, it indicates the maximum number of parts you want

[13:12] <xinming> I do checked the doc, I used  .split(/<space>/, :limit(1))  Doesn't work, I thought it is used to specify times to match.

[13:12] <xinming> got it, thanks.

[13:13] *** lizmat left
[13:14] <lizmat_> hmmm..  maybe limit *should* become a named argument

[13:14] *** jpn joined
[13:15] <lizmat_> and actually: limit is a bad name in that context, just like "length" is

[13:20] *** lizmat_ left
[13:20] *** lizmat joined
[13:21] *** jpn left
[13:22] * lizmat clickbaits https://rakudoweekly.blog/2023/09/11/2023-37-issuing/

[13:30] <discord-raku-bot> <nemokosch> in what regard is it a bad name?

[13:31] <lizmat> because it is not clear whether you're specifying the number of splits, or the number of produced parts

[13:44] <discord-raku-bot> <nemokosch> fair enough

[13:47] *** jpn joined
[13:49] *** destroycomputers left
[13:49] <discord-raku-bot> <nemokosch> fun times. I reorganized the "atom highlighter" so that one can maintain it without all the Coffeescript legacy. We have asked a move for VS Code from some ages old plist-format highlighter in a Perl package that nobody ever touches anymore

[13:50] <discord-raku-bot> <nemokosch> and after months of idling over it, dude just grabs two screenshots with the supposed highlighters with VSC on some snippet from wikipedia, says that there are some problems with the "Atom" version and rejects it

[13:50] *** destroycomputers joined
[13:51] <discord-raku-bot> <nemokosch> ironically enough, the supposed "Atom highlighting" was highly different from the highlighting on Github

[14:00] *** nicole left
[14:00] *** nicole joined
[14:44] *** jgaz joined
[15:20] <tonyo> 'a:b:c'.split(':', :into(2))  would be nice

[15:26] <ugexe> :into is already used to mean something else for 'classify'

[15:42] <lizmat> I was more thinking :parts(2)

[15:44] <dakkar> m: dd('a:b:c'.split(':',2))

[15:44] <camelia> rakudo-moar 3a91b4956: OUTPUT: «("a", "b:c").Seq␤»

[15:44] *** evalable6 left
[15:44] *** linkable6 left
[15:46] *** evalable6 joined
[15:46] *** xinming left
[15:48] *** xinming joined
[15:53] <ugexe> i don't like parts either, because it really means 'max-parts'. in that sense limit makes more sense

[15:54] <lizmat>  :max-parts(2) would work for me

[15:56] *** jpn left
[15:58] <ugexe> in node, typescript, java, and julia its called limit, in c# its called count, in python its called max-split

[15:59] <lizmat> max-split has the same semantics, as in number of max number of parts produced?

[15:59] <discord-raku-bot> <antononcube> Does :max-parts(2) mean the first two elements of a split? If yes, is it a good idea to have :first(2) and :tail(3) ?

[15:59] <ugexe> er, maxsplit rather

[15:59] <ugexe> then again in python i guess thats just a positional parameter named maxsplit

[16:00] <ugexe> i have ignored positional implementations

[16:00] <discord-raku-bot> <nemokosch> What's wrong about it being a positional?

[16:01] <lizmat> because it's an optional argument, and the other optionals are named arguments

[16:02] <discord-raku-bot> <antononcube> @nemokosch I was going to suggest it, but that is what Mathematica does. (So, I restrained myself.)

[16:02] <ugexe> max-splits reads better than max-split

[16:03] <discord-raku-bot> <nemokosch> Depending of the scope of "the other optionals", that is, there are clearly optional positional parameters in the core

[16:03] <lizmat> so max-splits => 1 would give you 2 parts ?

[16:03] <discord-raku-bot> <antononcube> But since people bring Python examples (Python!!?), here is the Mathematica page for StringSplit : https://reference.wolfram.com/language/ref/StringSplit.html

[16:04] <ugexe> it would give you 1 or 2 parts

[16:04] <lizmat> looks like Mathematica takes the current positional approach

[16:05] <lizmat> maybe we just need to clarify the documentation, as the internal name of the argument shouldn't matter

[16:05] <discord-raku-bot> <antononcube> @lizmat Yeah, that is why I am not suggesting it. 🙂

[16:06] <discord-raku-bot> <antononcube> In Python positional arguments have names; in Mathematica they do not.

[16:06] <MasterDuke> i'd vote for max-parts over max-split(s) if it's a user-visible name

[16:06] <discord-raku-bot> <antononcube> I thinking options like ":first", ":tail", or ":upto" are better.

[16:07] <discord-raku-bot> <antononcube> Actually, ":upto" is shorter and as descriptive as ":max-splits".

[16:08] <lizmat> disagree

[16:08] <discord-raku-bot> <antononcube> Ok, or ":up-to". 🙂

[16:09] <discord-raku-bot> <antononcube> @lizmat I do not feel strongly about my suggestions. I am way too biased from/by Mathematica.

[16:09] <lizmat> upto could be considered some kine of marker upto splits should be done

[16:10] <tonyo> max-parts is nice

[16:13] <discord-raku-bot> <antononcube> @lizmat Cool!

[16:14] <discord-raku-bot> <antononcube> And a good example of my bias: https://reference.wolfram.com/language/ref/UpTo.html

[16:15] <tonyo> upto sounds like it might truncate results,  eg 'ab:c:d'.split(':', :upto(2)) -> 'ab', 'c'

[16:16] <ugexe> max-elems is kind of nice in that it implies $splitted.elems <= $max-elems

[16:17] <ugexe> although it would have the same problem as sounding like it might truncate results

[16:19] <tonyo> max-splits seems to be the only one without the implication

[16:37] *** dakkar left
[16:48] *** abraxxa left
[17:26] *** linkable6 joined
[17:56] *** ab5tract left
[18:01] *** reportable6 joined
[18:51] *** notna joined
[19:01] *** notna left
[19:34] *** Sgeo joined
[19:58] <discord-raku-bot> <nemokosch> however, that one does change the current semantics, not just the name

[20:16] *** deoac joined
[20:20] *** teatwo left
[20:21] *** teatwo joined
[20:27] *** swaggboi left
[20:32] *** deoac left
[21:13] *** swaggboi joined
[22:13] *** committable6 left
[22:13] *** bloatable6 left
[22:13] *** greppable6 left
[22:13] *** coverable6 left
[22:13] *** squashable6 left
[22:13] *** bisectable6 left
[22:13] *** releasable6 left
[22:13] *** sourceable6 left
[22:13] *** unicodable6 left
[22:13] *** statisfiable6 left
[22:13] *** shareable6 left
[22:13] *** reportable6 left
[22:13] *** coverable6 joined
[22:13] *** squashable6 joined
[22:13] *** sourceable6 joined
[22:13] *** shareable6 joined
[22:14] *** greppable6 joined
[22:14] *** bloatable6 joined
[22:14] *** unicodable6 joined
[22:14] *** bisectable6 joined
[22:15] *** releasable6 joined
[22:15] *** committable6 joined
[22:15] *** statisfiable6 joined
[22:16] *** reportable6 joined
[23:16] *** linkable6 left
[23:16] *** evalable6 left
[23:16] *** linkable6 joined
[23:18] *** evalable6 joined
[23:47] *** Manifest0 left
