[00:00] *** reportable6 left
[00:01] <discord-raku-bot> <Nemokosch> rf: soon there will be a patch with basic stash resetting, please try it

[00:03] *** reportable6 joined
[00:13] <discord-raku-bot> <Nemokosch> aaand there it is

[00:14] <discord-raku-bot> <Nemokosch> I'm gonna go now, anything further will have to wait until tomorrow

[00:17] <rf> Thanks

[00:19] <tonyo> rf: can you link me the template system you used before, can't seem to find the link for it

[00:19] <tonyo> (the fp one)

[00:20] <rf> The OCaml one?

[00:20] <rf> https://github.com/ocsigen/tyxml

[00:20] <rf> About as good as a template DSL gets IMO

[00:23] <rf> tonyo: Did protones README get clobbered?

[00:24] <rf> Looking at git history I don't see it, maybe I'm dreaming lol

[00:25] <tonyo> ahh, i think this'd be pretty easy to implement in raku

[00:25] <tonyo> forgot it was xml/html 

[00:31] <rf> I mean once you have an XML templating system HTML is only a step away

[00:31] <tonyo> rf: am i groking this correctly?  `a` is analogous to a fn ref?

[00:31] <tonyo> div ~a:[a_class ["content"]] [ # div being a function ref here?

[00:32] <tonyo> nvm, i'm in lisp mode

[00:32] <rf> div is a function ~a is a named arg

[00:32] <rf> a_class is a function too, being passed a list with "content"

[00:33] <tonyo> yea this would be pretty easy to generate

[00:33] <rf> Yeah you don't have to go crazy with validity too, tyxml is fairly simple the hard part for the team that did it was adding typing and formal verification to your HTML

[00:37] <rf> tonyo: Here's a larger example https://codeberg.org/boldcaml/librehouse.net/src/branch/main/lib/view/profile_edit.ml from a friends old project

[00:38] <tonyo> ~a being essentially a value given to the template render method?

[00:38] <rf> No ~a is your HTML attributes

[00:39] <tonyo> i don't think this even requires a grammar

[00:39] <rf> so div ~a:[ a_class "foo bar"] --> <div class="foo bar"></div>

[00:39] <tonyo> oh, it's just saying use the ~a type to get to class='foo bar' 

[00:40] <tonyo> is the spacing important or just convention?

[00:40] <rf> Which spacing sorry

[00:40] <tonyo> in the template you linked

[00:41] <rf> Convention

[00:41] <rf> If I were to write this div function in Raku its sig would be: sub div(Array[HTMLAttribute] :@a) { ... }

[00:42] <tonyo> to raku-ize it would change the look a little bit but pretty easy

[00:42] <rf> sub div(Array[HTMLAttribute] :@a, Array[HTMLNodes] @children) { ... }

[00:48] <Geth> ¦ doc/main: b2011f0bb6 | (Will Coleda)++ | doc/Language/about.rakudoc

[00:48] <Geth> ¦ doc/main: Simplify, shorten, update language/about

[00:48] <Geth> ¦ doc/main: 

[00:48] <Geth> ¦ doc/main: Closes #4258

[00:48] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/b2011f0bb6

[00:48] <Geth> ¦ doc: coke self-assigned No mention of NFG in the docs? https://github.com/Raku/doc/issues/3258

[00:50] <tonyo> rf: i think i could put this together after some extensive data scraping

[00:56] *** Manifest0 left
[00:58] <rf> tonyo: I'm waiting with utmost anticipation

[01:08] *** jpn joined
[01:13] <tonyo> heh, scraping an index of html5 tags and valid attributes

[01:13] *** jpn left
[01:15] <rf> That'll probably be the hardest part

[01:36] <tonyo> yea Web::Scraper didn't age well

[01:38] <Geth> ¦ doc/NFG: e8f56b1355 | (Will Coleda)++ | xt/headings.rakutest

[01:38] <Geth> ¦ doc/NFG: more exceptions

[01:38] <Geth> ¦ doc/NFG: review: https://github.com/Raku/doc/commit/e8f56b1355

[01:38] <Geth> ¦ doc/NFG: 95f08d07f0 | (Will Coleda)++ | util/test-modified.sh

[01:38] <Geth> ¦ doc/NFG: Test added files also

[01:38] <Geth> ¦ doc/NFG: review: https://github.com/Raku/doc/commit/95f08d07f0

[01:38] <Geth> ¦ doc/NFG: a14318c2be | (Will Coleda)++ | 6 files

[01:38] <Geth> ¦ doc/NFG: Add NFG entry.

[01:38] <Geth> ¦ doc/NFG: 

[01:38] <Geth> ¦ doc/NFG: WIP!  THESE COMMITS WILL BE SQUASHED

[01:38] <Geth> ¦ doc/NFG: review: https://github.com/Raku/doc/commit/a14318c2be

[02:13] *** evalable6 left
[02:13] *** linkable6 left
[02:14] *** linkable6 joined
[02:14] *** evalable6 joined
[02:39] *** human-blip joined
[02:40] *** human-blip left
[02:40] *** human-blip joined
[02:45] *** deoac left
[03:05] *** razetime joined
[03:07] *** rf left
[03:32] *** derpydoo joined
[04:05] *** swaggboi left
[04:06] *** razetime left
[04:12] *** swaggboi joined
[04:19] *** xelxebar_ is now known as xelxebar

[04:25] *** Woodi_ is now known as Woodi

[04:51] *** tea3po is now known as TEATIME

[05:29] *** razetime joined
[05:42] *** TEATIME is now known as teatime2

[05:42] *** teatime2 is now known as teatime

[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:10] *** derpydoo left
[06:47] *** teatwo joined
[06:50] *** teatime left
[07:50] *** coverable6 left
[07:50] *** linkable6 left
[07:50] *** reportable6 left
[07:50] *** unicodable6 left
[07:50] *** quotable6 left
[07:50] *** benchable6 left
[07:50] *** notable6 left
[07:50] *** evalable6 left
[07:50] *** committable6 left
[07:50] *** statisfiable6 left
[07:50] *** bisectable6 left
[07:50] *** squashable6 left
[07:50] *** tellable6 left
[07:50] *** sourceable6 left
[07:50] *** nativecallable6 left
[07:50] *** shareable6 left
[07:50] *** evalable6 joined
[07:50] *** reportable6 joined
[07:50] *** committable6 joined
[07:51] *** unicodable6 joined
[07:51] *** bisectable6 joined
[07:52] *** tellable6 joined
[07:52] *** shareable6 joined
[07:52] *** notable6 joined
[07:52] *** coverable6 joined
[07:52] *** quotable6 joined
[07:53] *** nativecallable6 joined
[07:53] *** squashable6 joined
[07:53] *** linkable6 joined
[07:53] *** benchable6 joined
[07:53] *** statisfiable6 joined
[07:53] *** sourceable6 joined
[08:07] *** jpn joined
[08:12] *** jpn left
[08:24] *** razetime left
[08:39] *** Sgeo left
[08:40] *** razetime joined
[08:53] *** Manifest0 joined
[08:57] *** dakkar joined
[09:00] *** jpn joined
[09:04] *** jpn left
[09:37] <Geth> ¦ doc/main: 2e9043c445 | (Elizabeth Mattijsen)++ | doc/Type/independent-routines.rakudoc

[09:37] <Geth> ¦ doc/main: Document done(value)

[09:37] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/2e9043c445

[09:39] *** jpn joined
[09:44] <Geth> ¦ doc/main: 15028a8811 | (Elizabeth Mattijsen)++ | 2 files

[09:44] <Geth> ¦ doc/main: Document Buf.Blob and Blob.Buf

[09:44] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/15028a8811

[09:50] *** ab5tract joined
[10:00] *** Nemokosch joined
[10:02] *** Nemokosch left
[10:04] *** razetime left
[11:04] *** linkable6 left
[11:04] *** evalable6 left
[11:05] *** evalable6 joined
[11:07] *** linkable6 joined
[11:15] *** yoreei joined
[11:27] *** abraxxa joined
[11:32] <guifa> AntonAntonov: having to head out for a trip but on Sunday remind me and I'll send you the slides

[11:32] *** guifa left
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[13:02] *** reportable6 left
[13:02] *** linkable6 left
[13:02] *** quotable6 left
[13:02] *** unicodable6 left
[13:02] *** bisectable6 left
[13:02] *** benchable6 left
[13:02] *** sourceable6 left
[13:02] *** coverable6 left
[13:02] *** squashable6 left
[13:02] *** committable6 left
[13:02] *** tellable6 left
[13:02] *** evalable6 left
[13:02] *** notable6 left
[13:02] *** shareable6 left
[13:02] *** releasable6 left
[13:02] *** nativecallable6 left
[13:02] *** statisfiable6 left
[13:02] *** unicodable6 joined
[13:03] *** bisectable6 joined
[13:03] *** sourceable6 joined
[13:03] *** shareable6 joined
[13:03] *** coverable6 joined
[13:03] *** quotable6 joined
[13:03] *** nativecallable6 joined
[13:04] *** tellable6 joined
[13:04] *** evalable6 joined
[13:04] *** benchable6 joined
[13:04] *** releasable6 joined
[13:05] *** statisfiable6 joined
[13:05] *** squashable6 joined
[13:05] *** linkable6 joined
[13:05] *** reportable6 joined
[13:05] *** committable6 joined
[13:05] *** notable6 joined
[13:20] <discord-raku-bot> <Anton Antonov> @guifa Thanks!

[13:27] <Geth> ¦ doc/main: 20f577e214 | (Elizabeth Mattijsen)++ | doc/Type/DateTime.rakudoc

[13:27] <Geth> ¦ doc/main: Add availability notice for DateTime.methods

[13:27] <Geth> ¦ doc/main: 

[13:27] <Geth> ¦ doc/main: Specifically day-fraction, modified-julian-date and julian-date

[13:27] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/20f577e214

[13:51] *** rf joined
[13:54] <rf> m: my @foo; given @foo[0] { default {say 123} };

[13:54] <camelia> rakudo-moar 500ad5f63: OUTPUT: «123␤»

[13:54] <rf> This hangs forever

[13:54] <rf> Is that intended?

[13:55] <rf> Also, good morning :^)

[13:55] <rf> wut

[13:57] <lizmat> doesn't hang forever for me either

[13:58] <rf> Huh, must have something broken in my code

[13:58] <Geth> ¦ doc/main: 02c89783b9 | (Elizabeth Mattijsen)++ | doc/Type/Enumeration.rakudoc

[13:59] <Geth> ¦ doc/main: Document that an enum class can be considered a Map

[13:59] <Geth> ¦ doc/main: 

[13:59] <Geth> ¦ doc/main: For the purpose of calling keys, values, kv, pairs, antipairs, invert

[13:59] <Geth> ¦ doc/main: methods.

[13:59] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/02c89783b9

[14:08] <Geth> ¦ doc/main: 5be763bf90 | (Elizabeth Mattijsen)++ | doc/Type/IO/Path.rakudoc

[14:08] <Geth> ¦ doc/main: Document IO::Path.user|group

[14:08] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/5be763bf90

[14:24] *** [Coke] joined
[14:26] <[Coke]> is there a way to get the Unicode 1 Name of a character?

[14:26] <tellable6> 2023-03-07T20:51:24Z #raku-dev <NemokoschKiwi> [Coke]: anyway, sorry, I didn't notice that there was a context in the first place. I thought you just said it as a generic paradigm.

[14:26] <[Coke]> e.g. want to be able to search and find "guillemet", which is in that field, not the main name.

[14:37] *** squashable6 left
[14:38] *** squashable6 joined
[14:48] *** yoreei left
[14:52] *** jpn left
[14:57] *** flash548 joined
[14:57] <Geth> ¦ doc/main: 4aebd168e6 | cfa++ | doc/Type/Enumeration.rakudoc

[14:57] <Geth> ¦ doc/main: Fix example typo

[14:57] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/4aebd168e6

[15:10] *** jpn joined
[15:12] *** flash548 left
[15:14] <Geth> ¦ doc: cfa self-assigned https://docs.raku.org/language/testing.html does-ok https://github.com/Raku/doc/issues/4253

[15:18] <tonyo> m: say Array.elems

[15:18] <camelia> rakudo-moar e8f419aef: OUTPUT: «1␤»

[15:18] <tonyo> m: say Array.Set

[15:18] <camelia> rakudo-moar e8f419aef: OUTPUT: «(timeout)»

[15:21] <Geth> ¦ doc/main: fcb96e15b2 | cfa++ | doc/Language/testing.rakudoc

[15:21] <Geth> ¦ doc/main: Remove unnecessary does-ok =item

[15:21] <Geth> ¦ doc/main: 

[15:21] <Geth> ¦ doc/main: A link to https://docs.raku.org/type/Test#sub_does-ok immediately

[15:21] <Geth> ¦ doc/main: follows, with a more detailed signature.  Index entry maintained.

[15:21] <Geth> ¦ doc/main: 

[15:21] <Geth> ¦ doc/main: Closes #4253.

[15:21] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/fcb96e15b2

[15:27] *** Sgeo joined
[15:41] *** razetime joined
[15:53] <rf> Ahh 2 hours of debugging just to have a sneaky little statement at the end of my sub being used as the return value :L

[15:58] <lizmat> tonyo: interesting, care to make an issue for it ?

[15:59] <tonyo> not at all

[15:59] <tonyo> both of those are bugs, yea?

[16:01] <lizmat> no, the first one is correct

[16:02] <lizmat> any scalar value can act as a single element list, and thus has 1 elemen

[16:02] <lizmat> t

[16:02] <rf> m: my @m is Array; say @m.Set

[16:02] <camelia> rakudo-moar e8f419aef: OUTPUT: «Set()␤»

[16:03] <lizmat> yea, calling .Set on the Array (or List) type object hangs

[16:03] <lizmat> it should produce a set with the Array type object in it

[16:04] <tonyo> ah

[16:04] <lizmat> [Coke] I don't think there's a guillemet named codepoint

[16:04] <lizmat> there are:

[16:04] <lizmat>    AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK «

[16:04] <lizmat>    BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK »

[16:05] <tonyo> updated the bug

[16:05] <lizmat> I assume that is what you were looking for?

[16:05] <rf> m: "foo@bar.ca".encode.decode.say;

[16:05] <camelia> rakudo-moar e8f419aef: OUTPUT: «foo@bar.ca␤»

[16:06] <lizmat> tonyo: updated the title  :-)

[16:06] <tonyo> danke

[16:06] <tonyo> or tak

[16:06] <tonyo> i don't know which dutch uses : )

[16:06] <lizmat> very formal: "dank u wel"

[16:06] <lizmat> less formal: "dank je"

[16:07] <lizmat> "danke" is actually German  :-)

[16:08] <tonyo> weirdos

[16:09] *** Sussysham joined
[16:09] <Voldenet> "tak" means "yes" in polish

[16:09] <Sussysham> Good evening guys

[16:09] <El_Che> it means branch in dutch

[16:09] <tonyo> apko is my favorite polish word

[16:09] <El_Che> that's how wars get started

[16:09] <discord-raku-bot> <Nemokosch> also means "so" in Polish

[16:09] <Sussysham> Namaskar is greating in hindi

[16:10] *** abraxxa left
[16:10] <lizmat> "tak" is also Danish and Swedish, I believe

[16:10] <discord-raku-bot> <Nemokosch> maintaining the tradition of "yes" being derived from what the situation is like

[16:10] <Voldenet> "no" means yes in polish as well

[16:10] <Voldenet> ;>

[16:10] <Sussysham> have anyone setup comma plugin with jetbrains ide

[16:10] <tonyo> i definitely used it in kobenhavn for thanks

[16:10] <lizmat> I believe nxadm has such a setup

[16:11] <discord-raku-bot> <Nemokosch> "no" doesn't mean yes in Polish, it's rather an interjection

[16:11] <Sussysham> i just wanted to say quickly know steps to setup

[16:12] <discord-raku-bot> <Nemokosch> interjections are hellish to get right in all languages tbh

[16:13] <Voldenet> It's very informal language, but it's more fun if you present it as "yes" ;)

[16:13] <rf> I found an interesting thing. For some reason @ is being encoded as \%40 somehow in Humming-Bird urlencoded requests

[16:13] *** abraxxa joined
[16:13] <discord-raku-bot> <Nemokosch> encodeURIComponent says that's right

[16:15] <dakkar> oh fun, hummingbird will also truncate header values https://github.com/rawleyfowler/Humming-Bird/blob/main/lib/Humming-Bird/HTTPServer.rakumod#L64

[16:15] <dakkar> (think of `foo: bar: baz`)

[16:16] *** Geth left
[16:16] *** Geth joined
[16:16] * dakkar better stop looking at that code

[16:17] <discord-raku-bot> <Nemokosch> isn't it better to know if there is an issue

[16:17] <dakkar> it is, but if *I* keep looking, I'll end up rewriting most of it

[16:18] <dakkar> I'm not the right person to provide *constructive* criticism, sometimes

[16:18] <Geth> ¦ doc/main: e93658ffd1 | (Elizabeth Mattijsen)++ | doc/Type/Cool.rakudoc

[16:18] <Geth> ¦ doc/main: Date availability of Cool.uniname

[16:18] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/e93658ffd1

[16:21] <tonyo> rf: i may have stumbled into something pretty cool:  body[ :charset<en/US>, h1[ :text-value<Hello there!> ], div[ p[..], p[..] ] ]

[16:21] <rf> tonyo: That is excellent

[16:21] <tonyo> testing it right now, precomp is taking forever

[16:21] *** Sussysham left
[16:21] <rf> dakkar: If I had enough time to tackle every problem I would have :^)

[16:22] *** Sussysham joined
[16:22] <rf> dakkar: That code also isn't for decoding headers, that's just for the pre-flight checks.

[16:23] <rf> ie, looking for content-length and transfer-encoding

[16:23] <dakkar> rf: eh! at a minimum, you probably want to `$string.split(': ',2)`

[16:23] <dakkar> (also, I'm not completely sure that the space after the colon is required by HTTP/1)

[16:24] <rf> NGiNX and httpd will re-write to use them

[16:24] <rf> Note: Humming-Bird is not meant to face the internet directly. Please use a reverse proxy such as httpd or NGiNX.

[16:24] <dakkar> ah, ok, that simplifies your life quite a bit! good idea

[16:24] <El_Che> caddy is a nice one to recommend

[16:25] <El_Che> (auto https through letsencrypt and trivial to setup)

[16:26] *** lichtkind joined
[16:26] <rf> dakkar: Yeah, mostly just focused on application layer stuff, I've written HTTP servers before but I find it's a waste to reinvent the wheel when most modern systems just use NGiNX or Apache as gateways anyways

[16:27] <El_Che> or specialized devices

[16:27] <dakkar> https://github.com/rawleyfowler/Humming-Bird/blob/main/lib/Humming-Bird/Core.rakumod#L153 another `split` that should have a limit

[16:28] <dakkar> (otherwise a body with a \r\n\r\n in it will get truncated)

[16:28] <rf> $body = @split_request[1] || $body;

[16:28] <dakkar> yes, by @split_request may have more than 2 elements

[16:28] <dakkar> s/by/but/

[16:29] <rf> Ah, good catch

[16:29] <dakkar> https://github.com/rawleyfowler/Humming-Bird/blob/main/lib/Humming-Bird/Core.rakumod#L157 same split here for the headers

[16:29] <dakkar> (much less important: Cookie uses encode/decode the "wrong" way around, with e.g. `encode` going from string to data structure)

[16:31] <dakkar> (I would call them `new-from-request-header-value` and `to-response-header-value`…)

[16:31] <dakkar> (but I'm infamous for my long method names)

[16:32] <rf> I prefer the idea of str -> object == encode, object -> str == decode 

[16:32] <El_Che> req and resp

[16:32] <El_Che> val

[16:32] <dakkar> rf: ehrm… most of the rest of the world doesn't

[16:32] <El_Che> every programmer will understand those abbrevations

[16:32] <Voldenet> rf: but it's the other way around in perl

[16:32] <dakkar> and in the Unicode spec, and in most RFCs…

[16:33] <dakkar> "encode" goes from internal representation to external representation, "decode" goes the other way

[16:33] *** Sussysham5 joined
[16:33] <dakkar> (then again, this is mostly an internal class, so meh)

[16:33] <Voldenet> tbh. I'd put headers/body parsing as state machine encapsulating the header and never allocate unnecessary strings out of it

[16:33] *** Sussysham18 joined
[16:34] <dakkar> Voldenet: we're still at the "make it correct" stage, the "make it fast" comes later 😜

[16:34] <Voldenet> But making it fast would then need rewrite

[16:34] <dakkar> and that's what good test coverage is for

[16:34] <Voldenet> it's probably easier to get it working fast before features are added

[16:34] *** Sussysham left
[16:34] <dakkar> (I'm not being completely serious, in case it weren't clear)

[16:34] *** Sussysham18 left
[16:35] <rf> I think the performance isn't particularly bad right now anyways

[16:35] *** Sussysham joined
[16:36] <rf> Could be cope haha but it's only been alive for 3 months

[16:36] <dakkar> my general progression is 1) correct 2) usable 3) fast

[16:36] <Voldenet> I think performance is crucial everywhere, making this one-time-use script faster will save you precious 20ms of your life

[16:36] <dakkar> (correct+usable tend to happen together while I write the tests)

[16:36] <Voldenet> for me it's 1) fast 2) quick 3) speedy

[16:37] <dakkar> Voldenet: ah, you're one of those who can give the wrong answer very quickly 😁

[16:37] <Voldenet> It's not wrong, it's

[16:37] <Voldenet> uh

[16:37] <Voldenet> approximate

[16:37] <dakkar> rotfl

[16:37] <dakkar> Seymour Cray would be proud

[16:37] <Voldenet> True (+- 1)

[16:38] *** Sussysham5 left
[16:38] <rf> I think the search for correctness can leave you wanting, especially if you're being correct just for the sake of it, but that might be a hot topic

[16:38] <rf> No practical software is 100% correct, and I have yet to find an outlier

[16:39] <discord-raku-bot> <Nemokosch> > "encode" goes from internal representation to external representation, "decode" goes the other way um... wait what

[16:39] <Voldenet> that's why I like that new convention of to-json and from-json

[16:39] <Voldenet> to-string and from-string

[16:39] <Voldenet> etc.

[16:39] <Voldenet> it's more verbose in what it does

[16:40] <tonyo> m: class AA { has $!tag; submethod BUILD(Str:D $!tag) {} }; AA.new("A") 

[16:40] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Default constructor for 'AA' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <discord-raku-bot> <Nemokosch> one can quickly develop a sense that Perl did everything backwards

[16:40] <dakkar> eh, see my ideas for the Cookie methods (remember that the `set-cookie` response header uses a different format than the `cookie` request header!)

[16:40] <dakkar> Nemokosh: uh?

[16:41] <dakkar> (sorry for the nick typo)

[16:42] <tonyo> m: class AA { has $!tag; submethod BUILD(Str:D $!tag) {} }; AA.new(:tag<a>) 

[16:42] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:42] <discord-raku-bot> <Nemokosch> namespaces, dependency management, loop control statements, versioning, and now the meaning of encoding and decoding as well?

[16:42] *** silug left
[16:42] *** silug8 joined
[16:42] <dakkar> Nemokosh: where did you ever find "encode" to mean "from external representation to internal"?

[16:42] *** Scotteh left
[16:43] *** razetime left
[16:43] *** Scotteh joined
[16:43] *** razetime joined
[16:43] <dakkar> (btw, Perl doesn't use either of those terms anywhere in the language, so I'm not sure what you're talking about)

[16:44] *** Sussysham left
[16:44] <discord-raku-bot> <Nemokosch> now, either we have different ideas about what "external" or "internal" mean, or there is encodeURIComponent I just used like 20 minutes ago

[16:44] <discord-raku-bot> <Nemokosch> the high-level representation being encoded into something an URI can contain

[16:44] <dakkar> encodeURIComponent goes from bytes to %things, right?

[16:45] <dakkar> the %thing is the external form (the one you send over the network)

[16:45] <Voldenet> encodeURIComponent goes from string to string

[16:45] <discord-raku-bot> <Nemokosch> no, it goes from high-level strings to them

[16:45] <Voldenet>  _obviously_

[16:45] <dakkar> the bytes are the (more) internal representation (the one your application cares about)

[16:45] <dakkar> so… I'm confused

[16:45] <discord-raku-bot> <Nemokosch> there are no bytes involved

[16:46] <dakkar> ok, now I fear I'm thinking of something completely different

[16:46] <Voldenet> the terminology doesn't involve casting but converting between codes

[16:46] <Voldenet> so, you encode things to url component format

[16:46] <Voldenet> s/url/uri/

[16:47] <dakkar> sure, but the %00 format only encodes values between 0 and 255

[16:47] <discord-raku-bot> <Nemokosch> like, wasn't it always like, you have data on one end, encode it, send it to the other, than decode it and get the high-level representation again?

[16:47] <discord-raku-bot> <Nemokosch> then*

[16:47] <dakkar> (you can't encode 💩 directly, you need to encode the character into a byte sequence, usually with utf-8)

[16:47] <dakkar> Nemokosh: yes

[16:48] <dakkar> "have data" → internal representation

[16:48] <dakkar> "send it" → external

[16:48] <dakkar> so we're saying the same thing

[16:48] <discord-raku-bot> <Nemokosch> so yes, you have the opposite perspective for internal and external

[16:49] <dakkar> I'm looking from my application's point of view

[16:49] <discord-raku-bot> <Nemokosch> that's why I rather said high-level (abstract, if you may) and low-level (concrete)

[16:49] <dakkar> the network (or the disk) is outside

[16:49] <rf> I see it as, if I have a Raku object that is my encoded state because it is unusable for external consumers

[16:49] * dakkar gives up ☺

[16:49] <rf> It's like encrypt vs decrypr

[16:49] <discord-raku-bot> <Nemokosch> the high-level version is not encoded

[16:50] <rf> I mean it's all semantics I don't think it's worth getting fired up about

[16:50] *** Sussysham joined
[16:50] <discord-raku-bot> <Nemokosch> in an ideal world, the encoded version wouldn't exist, so to speak

[16:51] <Voldenet> In an ideal world it still would, because encoded version can be compressed for example

[16:51] <dakkar> my Turing machine has a very long tape!

[16:51] <Voldenet> encoding and decoding are only transport-related

[16:51] <discord-raku-bot> <Nemokosch> depends on how ideal 😛

[16:51] <Voldenet> My ideal is better than yours

[16:52] <Voldenet> can't we both agree on that :>

[16:52] <discord-raku-bot> <Nemokosch> but do you have functors

[16:52] <Voldenet> right, in an ideal world sending data is just a pure function that alters the world into other state of the world

[16:53] <rf> No, it uses lenses :^)

[16:53] <discord-raku-bot> <Nemokosch> by the way, that's how it is in Raku as well. you encode a string into a buffer, and decode that buffer back to a string

[16:54] <rf> m: "foobar".encode.decode.say;

[16:54] <camelia> rakudo-moar af0c88cc2: OUTPUT: «foobar␤»

[16:54] <rf> m: "foobar".encode.say;

[16:54] <camelia> rakudo-moar af0c88cc2: OUTPUT: «utf8:0x<66 6F 6F 62 61 72>␤»

[16:54] <Voldenet> But a string is an internal representation in this case and bytes are used by the transport

[16:55] <discord-raku-bot> <Nemokosch> I find the word "internal" unhelpful here. Sure, internal in the sense that it cannot be ejected into a physical network.

[16:55] <discord-raku-bot> <Nemokosch> Still that's the high-level interface towards humans

[16:56] <discord-raku-bot> <Nemokosch> it's external towards the human reader, from which perspective whatever machinery the computers are doing is an "internal" detail

[16:56] <Voldenet> now I don't like this terminology too much, it's so unclear

[16:57] <Voldenet> it's too related to character encoding

[16:58] <discord-raku-bot> <Nemokosch> well, for me, the other one is too related to transportation

[16:59] <Voldenet> it's almost like .encode method shouldn't even be present on a Str to begin with

[16:59] <discord-raku-bot> <Nemokosch> why is it like that?

[16:59] <Voldenet> because it's the transport defining its method of encoding

[16:59] <discord-raku-bot> <Nemokosch> btw it's the same in Python actually

[17:00] <discord-raku-bot> <Nemokosch> as long as we say that saving a file to a disk is also a manner of transportation

[17:00] <Voldenet> in C# there's `Encoding.UTF8.GetBytes("string")` and `.GetString`

[17:00] <Voldenet> now that I think of it, it's obvious why

[17:03] <dakkar> perl5's `Encode` module works that way too

[17:04] <discord-raku-bot> <Nemokosch> the gordian knot

[17:04] <lizmat> hmmm looks like Github is having problem delivering wehbooks

[17:04] <lizmat> *webhooks

[17:05] <Geth> ¦ doc/main: fcb96e15b2 | cfa++ | doc/Language/testing.rakudoc

[17:05] <Geth> ¦ doc/main: Remove unnecessary does-ok =item

[17:05] <Geth> ¦ doc/main: 

[17:05] <Geth> ¦ doc/main: A link to https://docs.raku.org/type/Test#sub_does-ok immediately

[17:05] <Geth> ¦ doc/main: follows, with a more detailed signature.  Index entry maintained.

[17:05] <Geth> ¦ doc/main: 

[17:05] <Geth> ¦ doc/main: Closes #4253.

[17:05] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/fcb96e15b2

[17:05] *** Sussysham left
[17:10] <Geth> ¦ doc/main: ee6ecf6821 | (Elizabeth Mattijsen)++ | doc/Type/IterationBuffer.rakudoc

[17:10] <Geth> ¦ doc/main: Document IterationBuffer

[17:10] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/ee6ecf6821

[17:11] *** Sussysham joined
[17:26] *** razetime left
[17:29] <rf> Is there a way to convert the blobs from Digest sha256 to Str's without it exploding?

[17:31] <tonyo> if you want the hex, there's the hex funcs in the module

[17:31] <rf> That would be ideal

[17:31] <rf> thanks

[17:32] <tonyo> if you have the buf[uint8] you can do this too:

[17:32] <tonyo> m: my Buf[uint8] $b .=new(30..96); say $b>>.map(*.base(16)).join(" ")

[17:32] <camelia> rakudo-moar af0c88cc2: OUTPUT: «1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60␤»

[17:34] <tonyo> s/>>/

[17:34] *** dakkar left
[17:34] <tonyo> also works

[17:38] <[Coke]> lizmat: yes, I'm saying that AB was called like left guillemet in unicode 1, so it's probably in there as an alias.

[17:39] <[Coke]> more generally, want App:Uni to be able to search aliases.

[17:42] <Geth> ¦ doc/main: 8e50545cf6 | cfa++ | 3 files

[17:42] <Geth> ¦ doc/main: Spelling, spacing

[17:42] <Geth> ¦ doc/main: review: https://github.com/Raku/doc/commit/8e50545cf6

[17:44] <[Coke]> unicodable6: «

[17:44] <unicodable6> [Coke], U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK [Pi] («)

[17:45] <[Coke]> unicodable6: ︘

[17:45] <unicodable6> [Coke], U+FE18 PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET [Pe] (︘)

[17:46] <[Coke]> m: say ("︘".uniprop('nameAlias');

[17:46] <camelia> rakudo-moar af0c88cc2: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say ("︘".uniprop('nameAlias');⏏<EOL>␤»

[17:46] <[Coke]> m: say("︘".uniprop('nameAlias');

[17:46] <camelia> rakudo-moar af0c88cc2: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say("︘".uniprop('nameAlias');⏏<EOL>␤    expecting any of:…»

[17:46] <[Coke]> m: say "︘".uniprop('nameAlias');

[17:46] <camelia> rakudo-moar af0c88cc2: OUTPUT: «0␤»

[17:47] <[Coke]> ah well. that's the class alias (which I suspect they did on purpose to have a prod test for this. :P )

[17:47] <[Coke]> *classic

[17:48] <[Coke]> m: say "︘".uniprop('nName_Alias');

[17:48] <camelia> rakudo-moar af0c88cc2: OUTPUT: «0␤»

[17:48] <[Coke]> m: say "︘".uniprop('name_Alias');

[17:48] <camelia> rakudo-moar af0c88cc2: OUTPUT: «0␤»

[17:48] <[Coke]> OMG, the wide character is screwing up my display here somehow.

[17:49] <[Coke]> m: say "︘".uniprop('Name_Alias');

[17:49] <camelia> rakudo-moar af0c88cc2: OUTPUT: «0␤»

[17:49] <[Coke]> (ok, I think that's the canonical name for the property)

[17:53] <tonyo> rf: abusing circumfix makes this pretty trick

[17:54] <tonyo> div[ a[ "google" ]:href<https://google.com> ]:hidden -> <div hidden><a href="https://google.com">google</a></div>

[17:56] <falsifian> Would be nice if the attributes could go before the content. div:hidden[ ... ]

[17:56] <tonyo> i think they can

[17:57] <tonyo> ah, maybe not

[17:57] *** thundergnat joined
[17:57] <thundergnat> bisectable: say cross((0, 1), (1, 1), :with(&infix:<&&>));

[17:57] <bisectable6> thundergnat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[17:58] <bisectable6> thundergnat, Output on all releases: https://gist.github.com/6b13cad3ae0b591a32a902957613f8a8

[17:58] <bisectable6> thundergnat, Bisecting by output (old=2016.12 new=2017.01) because on both starting points the exit code is 0

[17:58] <bisectable6> thundergnat, bisect log: https://gist.github.com/06f489d8a74bb9b24abd6a112269237a

[17:58] <bisectable6> thundergnat, (2017-01-16) https://github.com/rakudo/rakudo/commit/8a3ff7b64b51a66e0e90437bbeb4793534a07026

[17:58] <bisectable6> thundergnat, ⚠ New output detected, please review the results manually

[17:58] <bisectable6> thundergnat, Output on all releases and bisected commits: https://gist.github.com/337ed12fb5fe27e99bcec80810527551

[17:59] <thundergnat> Wow. Old regression

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:02] <thundergnat> ^ lizmat one of your commits

[18:02] *** thundergnat left
[18:03] *** abraxxa left
[18:04] <discord-raku-bot> <lucs> @tonyo: Um, 'zef checkbuild' complains of not finding one of my *.rakumod in META6,json's "provides', which is on purpose, my understanding being that if it was, it may appear in for example raku.land listings. Should I just ignore the complaint and go ahead and upload?

[18:05] <tonyo> yea force it

[18:05] <discord-raku-bot> <lucs> OK

[18:05] <discord-raku-bot> <lucs> Oh, also, my module directory contains irrelevant-to-the-release files.

[18:06] <discord-raku-bot> <lucs> Will they just be ignored or should I clean them out of there?

[18:07] <discord-raku-bot> <lucs> @tonyo: Another way perhaps to phrase that: can I peek inside the tarball that would be uploaded before it actually does get uploaded?

[18:08] <tonyo> yea for sure you can look in sdist/

[18:08] *** jpn left
[18:08] <discord-raku-bot> <lucs> Ah, I see. Looking...

[18:09] <discord-raku-bot> <lucs> Hmm... A lot of precomp files in there.

[18:09] <discord-raku-bot> <lucs> Normal?

[18:09] *** jpn joined
[18:10] <discord-raku-bot> <lucs> @tonyo: (As well as files that don't belong to the release, I'll move them out.)

[18:17] *** Sussysham left
[18:25] <tonyo> it's normal as of now, if you're using the .gitignore i'd recommend using git archive and  then using `fez upload --file=<x>` - the .gitignore doesn't work like a strict globber so i need to rework it a bit

[18:26] <discord-raku-bot> <lucs> Which file is this "x"?

[18:27] <tonyo> wherever git archive output the tgz

[18:27] <discord-raku-bot> <lucs> Oh, I see.

[18:27] <discord-raku-bot> <lucs> By the way,

[18:27] <discord-raku-bot> <lucs> I cleaned out the precomp`s and stuff, but

[18:27] <discord-raku-bot> <lucs> I get error:

[18:28] <discord-raku-bot> <lucs> =<< Null regex not allowed

[18:28] <discord-raku-bot> <lucs> =<< ERROR: All bundlers exhausted, unable to make .tar.gz

[18:29] <discord-raku-bot> <lucs> (after plain "fez upload" -- am I missing that "file" argument?)

[18:31] <discord-raku-bot> <lucs> Oh, let me guess: fez upload --file=sdist/wUtEvEr.tar.gz ?

[18:33] <tonyo> yea

[18:34] <lucs> You know, this is not quite obvious from trying to understand the docs :(

[18:34] <tonyo> it's getting a facelift in the next version

[18:34] <discord-raku-bot> <Nemokosch> which docs, good sir?

[18:34] <tonyo> the fez docs are lacking

[18:36] <lucs> Well, it appears to have correctly uploaded.

[18:36] <discord-raku-bot> <Nemokosch> are you managing with fez all alone? I mean, there's kind of pressure on that, now that it is the preferred ecosystem

[18:36] <lucs> Thanks for helping me out @tonyo.

[18:52] <lucs> It appears in raku.land.

[18:52] <lucs> Yay!

[18:55] *** tea3po joined
[18:58] *** teatwo left
[19:06] <rf> tonyo that is nice

[19:06] *** a3r0 left
[19:07] *** a3r0 joined
[19:10] <rf> Is there a nice way to see if a string contains only ASCII characters?

[19:11] <rf> I'd prefer not to use Regex for this unfortunately

[19:11] <tonyo> rf: https://github.com/tony-o/ryml

[19:12] <rf> I'm gonna try to rewrite a part of my personal site with it tonight toyno

[19:12] <rf> tonyo**^

[19:12] <tonyo> there's still some tweaking left to do

[19:16] <[Coke]> m: my $str="something"; dd !so $str.NFC.grep(* > 128).elems

[19:16] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Bool::True␤»

[19:16] <[Coke]> something like that, maybe.

[19:17] <[Coke]> m: my $str="something"; dd !so $str.ords.grep(* > 128).elems ; # ords instead.

[19:17] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Bool::True␤»

[19:17] <[Coke]> m: my $str="something␤"; dd !so $str.ords.grep(* > 128).elems ; # ords instead.

[19:17] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Bool::True␤»

[19:17] <[Coke]> m: my $str="something␤"; dd !so $str.NFC.grep(* > 128).elems

[19:17] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Bool::True␤»

[19:18] <[Coke]> m: my $str="something␤"; dd $str.ords.grep(* > 128).elems eq 0

[19:18] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Bool::True␤»

[19:18] <[Coke]> m: my $str="something"; dd $str.ords.grep(* > 128).elems eq 0

[19:18] <camelia> rakudo-moar af0c88cc2: OUTPUT: «Bool::True␤»

[19:18] <[Coke]> Dammit. 

[19:18] <[Coke]> ok, giving up now.

[19:25] <rf> Lol [Coke] that was my first thought but it didn't work

[19:27] <rf> nvm NFC is working idk why my .ord was borked

[19:46] *** vrurg left
[20:11] *** vrurg joined
[20:14] <discord-raku-bot> <lucs> In raku.land, can the search box be used to find modules matching a given tag?

[20:25] <tonyo> rf: https://gist.github.com/tony-o/a614749299b5d2d82a1d77d69f571f75

[20:29] *** vrurg left
[20:32] *** vrurg joined
[20:41] <tonyo> that's what it looks like so far

[20:42] *** lucs left
[20:47] *** vrurg left
[20:48] *** vrurg joined
[20:49] *** euandreh left
[21:12] <rf> tonyo: That's awesome haha can't wait to try this out tonight

[21:13] <tonyo> trailing commas no longer necessary

[21:13] <tonyo> also bear in mind that the renderer doesn't escape values for attributes yet (or text data)

[21:13] <tonyo> but it's an easy fix in the `lib/Ryml.rakumod`

[21:14] <rf> It would be nice to have an optional escape

[21:15] <tonyo> it'll get it eventually

[21:15] <tonyo> still fiddling around with the xbin/gen 

[21:18] <tonyo> the way this is written would make it easy to make a server side rendering mechanism

[21:28] *** Guest35 joined
[21:33] <rf> Yeah that's how TyXML is used typically

[21:34] <tonyo> added escaping

[21:35] <rf> Am I able to do: my $partial = div[ 'foo' ]; my $html = html[ head[], body[ $partial ] ];

[21:39] *** code0zero joined
[21:42] <tonyo> yea

[21:42] <Guest35> Hi, everyone. Is Perl 5.10 still sufficient to build Rakudo Star as indicated by https://rakudo.org/star/source ?

[21:43] <Guest35> I am having trouble building it by way of brew

[21:44] <Guest35> Experimental "my" subs not enabled at /private/var/folders/6f/lpcqx0qs7fxgm_8f5c010x4r0000gn/T/tmp.mDFjlkgH/3rdparty/nqp-configure/lib/NQP/Config.pm line 1519.

[21:45] <[Coke]> I imagine no one has tested a perl that old in some time.

[21:46] <[Coke]> Someone did just submit a patch to claw back a slightly more recent perl than that, I think.

[21:47] *** code0zero left
[21:48] <Guest35> I see that now

[21:48] <Guest35> https://github.com/Raku/nqp-configure/commit/1b4ae93d39f6f5151da1b0d303becd26f7c318b7

[21:48] <Guest35> I think that will help my error

[21:49] <[Coke]> yup, that one.

[22:03] *** ab5tract left
[22:09] *** gcd left
[22:14] *** squashable6 left
[22:15] *** squashable6 joined
[22:35] <tonyo> rf: there's no mechanism in there verifying the softer side of complete vs partial docs

[22:35] <tonyo> the renderer is also kind of dumb, you could put a tr element under a `p` and it wouldn't really care

[22:36] <rf> That's good. I think partials are good

[22:41] <discord-raku-bot> <lucs> Okay, so my Test::Selector has successfully been installed by zef.

[22:42] <discord-raku-bot> <lucs> But when I run its supplied bin/tsel, I get a "Could not find Test::Selector::Main" error, which is part of the tarball that was uploaded.

[22:43] <discord-raku-bot> <lucs> Should that module, contrary to what I believed, have been listed in the META6's "provides" section?

[22:44] <discord-raku-bot> <lucs> Also, how does one debug these problems?

[22:44] <rf> Yes it needs to be listed in the META6

[22:45] <discord-raku-bot> <lucs> I'm pretty sure I read that what was listed in "provides" was for indexing purposes, in CPAN or raku.land for example.

[22:45] <discord-raku-bot> <lucs> Is that wrong?

[22:46] <discord-raku-bot> <lucs> I want Test::Selector to be listed, but don't try to install Test::Selector::Main, that kind of makes no sense.

[22:47] <rf> if you run zef install . --force-install on your project locally

[22:47] <rf> Do you get access to that module?

[23:03] <discord-raku-bot> <Nemokosch> it seems that there might be two or even three parallel topics here

[23:05] <discord-raku-bot> <lucs> @rf: Sorry, had to answer the door and discuss a few things with the neighbors.

[23:05] <discord-raku-bot> <lucs> I'll try a force-install now.

[23:08] <discord-raku-bot> <lucs> @rf No luck (same result as earlier): https://gist.github.com/lucs/9c89b6846313aff703ebaf31c4d26b53

[23:09] <discord-raku-bot> <lucs> The code is here: https://github.com/lucs/Test-Selector

[23:10] <discord-raku-bot> <Nemokosch> don't forget that use is not some linker stuff; it's resolved when you invoke the program

[23:12] <discord-raku-bot> <lucs> @Nemokosch Er, not sure what that comment implies I should be doing or trying.

[23:12] <discord-raku-bot> <Nemokosch> if Test::Selector::Main is not registered anywhere in the module registry, that's too bad

[23:12] <discord-raku-bot> <lucs> Oh, okay, but I'd expect zef to have taken care of that, no?

[23:12] <discord-raku-bot> <Nemokosch> that the script doesn't know more about available modules than any raku script

[23:13] <discord-raku-bot> <Nemokosch> at which point this is not zef level stuff anymore

[23:13] <discord-raku-bot> <lucs> Hmm... What should I do, or have done, differently?

[23:15] *** evalable6 left
[23:15] *** linkable6 left
[23:15] <discord-raku-bot> <Nemokosch> the simplest thing would be really to just expose that module so that it gets registered as a use-able module

[23:16] *** evalable6 joined
[23:16] <discord-raku-bot> <Nemokosch> use lib <location> also might help but I'm not sure how dynamic use is exactly

[23:16] *** linkable6 joined
[23:16] <discord-raku-bot> <Nemokosch> if it's too dynamic, that's not good because the location of the actually invoked script is unknown, I don't think use lib is a good idea in that case

[23:17] <discord-raku-bot> <lucs> 'use lib' would require me to give a path, I don't think that's the right approach.

[23:17] <discord-raku-bot> <Nemokosch> well yes

[23:18] <discord-raku-bot> <lucs> But maybe that META6 "provides" holds part of the answer.

[23:18] <discord-raku-bot> <Nemokosch> however, you do need to supply the module somehow

[23:19] <discord-raku-bot> <lucs> "use Test::Selector" works fine

[23:19] <discord-raku-bot> <Nemokosch> I think ultimately the question is: to what extent is a script you put under bin, just a random Raku script that you happen to install to a location

[23:19] <discord-raku-bot> <lucs> (from the REPL) for example.

[23:20] <discord-raku-bot> <lucs> But "use Test::Selector::Main" is not found.

[23:20] <discord-raku-bot> <Nemokosch> if there is no magic about that, then you need to let it know about the module you are trying to use, like you would be for any other script

[23:20] <discord-raku-bot> <lucs> Look, my understanding, which may be wrong, is that that is what zef is supposed to do.

[23:21] <discord-raku-bot> <lucs> Paging @ugexe 🙂

[23:23] *** euandreh joined
[23:23] <rf> lucs: It can't find it because you dont specify its location in META6

[23:23] <tellable6> rf, I'll pass your message to lucs

[23:24] <discord-raku-bot> <lucs> @rf: That makes sense.

[23:24] <discord-raku-bot> <lucs> So the "provides" would be more than just to allow indexing.

[23:25] <discord-raku-bot> <lucs> I'll add it to the META6, reupload, and hope it works.

[23:25] <discord-raku-bot> <Nemokosch> it's definitely more than "just" indexing but you are also kind of right that it's a public interface

[23:25] <rf> if you do "provides": { "Test::Selector:Foo": "lib/Test/Selector/Foo.rakumod" } you will be able to find "Test::Selector::Foo"

[23:26] <discord-raku-bot> <lucs> Yeah, sounds good.

[23:26] <discord-raku-bot> <lucs> Will try that.

[23:26] <discord-raku-bot> <lucs> Back in some minutes...

[23:31] *** NemokoschKiwi joined
[23:39] *** deoac joined
[23:40] *** NemokoschKiwi left
[23:51] <discord-raku-bot> <lucs> That fixed it.

[23:52] <discord-raku-bot> <lucs> Thanks all.

[23:52] <discord-raku-bot> <lucs> If I find that place where I read that misleading info about "provides"'s role, I'll report it.

[23:55] <[Coke]> ... hopefully it wasn't the docs site.

[23:55] <discord-raku-bot> <Nemokosch> the truth is, "provides" is kinda both - an interface towards what you want to install, and a map from module names to compunit locations

