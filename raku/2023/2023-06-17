[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:10] <guifa_> Tirifto: ha, indeed sometimes there's always an easier way around :-) (especially depending on what the information is that you're holding in the attributes)

[00:27] *** ingy left
[00:28] *** ingy joined
[00:40] *** deoac joined
[00:50] *** eseyman left
[00:50] *** manu_ joined
[00:51] *** manu_ is now known as eseyman

[01:29] *** deoac left
[01:34] *** aqua2 left
[02:23] *** teatwo joined
[02:26] *** tea3po left
[02:30] *** deoac joined
[02:31] *** derpydoo joined
[02:56] *** Xliff joined
[02:58] <Xliff> \\l

[02:58] <Xliff> Ack... \o, even!

[02:58] <Xliff> So is there a way to check a string for an invalid UTF8 sequence?

[02:59] <[Coke]> tonyo: trying to get it run locally (done!) so I can work on some bugs

[03:10] <avuserow> Xliff: assuming you have a Buf, you could try to decode it and check for errors?

[03:11] <avuserow> m: CATCH {when /Malformed/ {say "it's bad"}}; Buf.new(0xff, 0xff).decode

[03:11] <camelia> rakudo-moar c452fdbf0: OUTPUT: «it's bad␤»

[03:11] <avuserow> m: CATCH {when /Malformed/ {say "it's bad"}}; Buf.new("abc".ords).decode

[03:11] <camelia> rakudo-moar c452fdbf0: ( no output )

[03:14] <avuserow> looks like it's just an adhoc exception, otherwise you could match by type

[03:14] <[Coke]> jjatria: hi; running raku.land locally takes 30+ minutes to download everything and make the web service report it has anything. how do you recommend testing changes to the app?

[03:14] <[Coke]> (restarting and waiting 30m is not boss)

[03:14] <Xliff>  CATCH {when /Malformed/ {say "it's bad"}}; Buf.new(0xff, 0xff).decode; say "Still running..."

[03:14] <evalable6> Xliff, rakudo-moar 4b69dd51e: OUTPUT: «it's bad␤»

[03:15] <Xliff> ^^ Program must continue.

[03:16] <[Coke]> m: Buf.new(0xff, 0xff).decode

[03:16] <camelia> rakudo-moar c452fdbf0: OUTPUT: «Malformed UTF-8 at line 1 col 1␤  in block <unit> at <tmp> line 1␤␤»

[03:16] <Xliff>  CATCH {when /Malformed/ {say "it's bad"; .resume}}; Buf.new(0xff, 0xff).decode; say "Still running..."

[03:17] <Xliff> m: CATCH { when /Malformed/ {say "it's bad"; .resume}}; Buf.new(0xff, 0xff).decode; say "Still running..."

[03:17] <camelia> rakudo-moar c452fdbf0: OUTPUT: «it's bad␤This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:17] <Xliff> So why is that exception not resumable?

[03:17] <avuserow> m: sub is-valid-utf8(Buf $in) {CATCH {when /Malformed/ {return False;}}; $in.decode; return True}; say is-valid-utf8(Buf.new: 0xff, 0xff); say is-valid-utf8(Buf.new: "abc".ords)

[03:17] <camelia> rakudo-moar c452fdbf0: OUTPUT: «False␤True␤»

[03:17] <[Coke]> Xliff: you need a block

[03:17] <Xliff> m: { CATCH { when /Malformed/ {say "it's bad"; }}; Buf.new(0xff, 0xff).decode; } say "Still running..."

[03:17] <camelia> rakudo-moar c452fdbf0: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------>  bad"; }}; Buf.new(0xff, 0xff).decode; }⏏ say "Still running..."␤    expecting any of:␤        infix␤        …»

[03:18] <Xliff> m: { CATCH { when /Malformed/ {say "it's bad"; }}; Buf.new(0xff, 0xff).decode; }; say "Still running..."

[03:18] <camelia> rakudo-moar c452fdbf0: OUTPUT: «it's bad␤Still running...␤»

[03:18] <[Coke]> m: {CATCH { when /Malformed/ {say "it's bad"; .resume}}; Buf.new(0xff, 0xff).decode;}; say "Still Running..."

[03:18] <camelia> rakudo-moar c452fdbf0: OUTPUT: «it's bad␤This exception is not resumable␤  in block  at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:18] <Xliff> [Coke]++

[03:18] <[Coke]> m: {CATCH { when /Malformed/ {say "it's bad";}}; Buf.new(0xff, 0xff).decode;}; say "Still Running..."

[03:18] <camelia> rakudo-moar c452fdbf0: OUTPUT: «it's bad␤Still Running...␤»

[03:20] <[Coke]> me type slow

[03:20] <Xliff> :)

[03:20] <[Coke]> xliff++

[03:21] <Xliff> [Coke]: s'okay. Me type bad. 

[03:21] <Xliff> [Coke]: Oh, and hit 1,000,000 lines of Raku last month.

[03:21] <Xliff> Still working, though. Now dealing with the Evolution libs.

[03:22] <Xliff> One of these days I'll figure out a way to add what I need to zef so I can release!

[03:23] <Xliff> So how can I test the above CATCH with a react/whenever?

[03:24] <avuserow> did you see the subroutine version I posted above? it returns a boolean so you can do whatever at that point

[03:24] <Xliff> aveuserow: O I C. Let me try that, thanks!

[03:29] <avuserow> hmm, maybe that CATCH block ought to have a 'default' clause too, maybe return Nil or False or something

[03:30] <avuserow> can't think of any other exceptions but that doesn't mean it can't happen :)

[03:48] <Xliff> Heh! It will work fornow.

[03:56] *** linkable6 left
[03:56] *** evalable6 left
[03:58] *** linkable6 joined
[03:58] *** evalable6 joined
[04:54] *** avar left
[04:54] *** avar joined
[05:42] *** derpydoo left
[05:49] *** derpydoo joined
[05:55] *** deoac left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:25] *** jpn joined
[06:36] *** jpn left
[06:43] *** jpn joined
[07:02] *** perlmaros left
[07:02] *** perlmaros joined
[07:24] *** jpn left
[08:06] *** jpn joined
[08:10] *** jpn left
[08:29] *** euandreh joined
[09:05] *** DarthGandalf left
[09:35] *** Sgeo left
[09:52] *** euandreh left
[09:54] *** jpn joined
[09:58] *** jpn left
[10:12] *** kaol left
[10:13] *** kaol joined
[10:37] *** DarthGandalf joined
[11:37] *** evalable6 left
[11:37] *** linkable6 left
[11:38] *** linkable6 joined
[11:39] *** evalable6 joined
[11:49] *** GreaseMonkey left
[11:50] *** greaser|q joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:15] *** Xliff left
[12:33] *** zara joined
[12:56] *** kawaii left
[12:57] *** kawaii joined
[13:37] <tbrowder__> hi, looking for some advice using a Build.rakumod file and a build script.

[13:39] <tbrowder__> the build script is fairly lengthy but shouldn't be used by a user of the module. any recs on where to put it? i'm thinking in an ./xbin directory.

[13:40] <tbrowder__> then zef shouldn't  install it

[13:57] *** linkable6 left
[13:58] *** linkable6 joined
[14:05] *** zara left
[14:14] <ugexe> I’d probably put it under build/bin/ or something. But also it could all just go in the Build.pm file as well. Spawning that script isn’t going to be as simple as you might think because  e.g. one of its dependencies may not be installed yet (just fetched and included for when zef invokes the build.pm module)

[14:15] *** jpn joined
[14:22] *** teatwo left
[14:23] *** teatwo joined
[14:25] *** jpn left
[14:35] *** japhb left
[14:35] *** japhb joined
[14:44] <Tirifto> Is there a way to condition an argument in a function call with its definedness?

[14:47] <avuserow> m: sub foo ($f?) { dd $f }; my $a; foo($_ with $a); $a = 3; foo($_ with $a)

[14:47] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> foo ($f?) { dd $f }; my $a; foo($_ with ⏏$a); $a = 3; foo($_ wit…»

[14:47] <avuserow> m: sub foo($f?) { dd $f }; my $a; foo($_ with $a); $a = 3; foo($_ with $a)

[14:47] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------>  foo($f?) { dd $f }; my $a; foo($_ with ⏏$a); $a = 3; foo($_ wit…»

[14:48] *** deoac joined
[14:53] <Tirifto> avuserow, do extra brackets do the trick? :o

[14:53] <Tirifto> m: sub foo ($f?) { say $f }; my $a; foo(($_ with $a)); $a = 3; foo(($_ with $a));

[14:53] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «()␤3␤»

[14:54] <Tirifto> (Looks like it might, but I’m not 100% sure ‘()’ is Raku’s way of showing what I wanted to see. xP)

[15:00] <thowe> So, I have this thing that I wrote in Catalyst a while ago that has stood the test of time as being indispensable at work.  Then I rewrote it in Mojolicious.  But I am trying to learn Raku in fits and starts.  What's the best Mojolicious replacement in Raku this year?

[15:00] <lizmat> https://cro.services

[15:02] <thowe> I was afraid it is Cro ;)  Guess I really need to learn something now...

[15:02] <thowe> Cro looks like it doesn't suffer fools gladly.

[15:02] <lizmat> perhaps humming-bird instead ?

[15:04] *** Vyrus left
[15:04] <thowe> no no...  I need to knuckle under on the one that's gonna teach me Raku.  Mojo, similarly, made me much better at Perl (at one time anyway).

[15:04] <thowe> But I haven't heard of humming-bird, I should see what it is.

[15:05] <lizmat> https://raku.land/zef:rawleyfowler/Humming-Bird

[15:05] <Tirifto> avuserow, okay, putting the expression in brackets seems to work well! One caveat is that one has to flatten the expression if the argument is positional. Thanks for the pointer! :-)

[15:06] <thowe> Cro also appears to have some community behind it...  frameworks seem to come and go as hobby projects, and I like the stuff that manages to get some maturity.

[15:07] <thowe> my other question might be what's the Raku equiv of the Mojo Embedded Perl templating?

[15:09] <thowe> Also, Hi Lizmat!  We met in Orlando.  You were very helpful to me then; thank you.  Been a while.

[15:09] <lizmat> indeed, it's been a while

[15:09] <lizmat> sadly I won't be visiting the US in the foreseeable future, and Florida most definitely not

[15:12] <thowe> Yeah, sadly I understand.  I'm in Oregon, where most of us scratch our heads and wonder "what the actual fuck...", but we have our own messes.

[15:13] <lizmat> fwiw, Oregon is still on our list of "ok"  :-)

[15:14] <Tirifto> Rather silly question: is there sugar for lexifying dynamic variables? Basically, a way to do this: ‘my $a = $*a; my $code = { say $a }’, but without having to declare $a first, and instead referring to $*a more directly.

[15:16] <lizmat> my $code = { say $*a }

[15:16] <lizmat> ?

[15:18] <Tirifto> lizmat, that would ultimately search for $*a from wherever $code is called, which might not be where it was defined. Basically I have a block which gets a variable dynamically, but declares another block which should get that variable’s value from the enclosing block lexically.

[15:19] <lizmat> gotcha

[15:20] <lizmat> my $code = do given $*a -> $a { { say $a } }

[15:20] <lizmat> feels like an obfuscation

[15:20] <guifa_> Tirifto: that seems a bit odd

[15:21] <guifa_> for the $_ with $foo

[15:21] <lizmat> what if $foo is intentionally not defined ?

[15:22] <Tirifto> lizmat, yeah… ^ ^’ Well, declaring a new variable works for me. I was just wondering if there was perhaps any magical symbol to say ‘treat this variable as lexical here’. :-)

[15:22] <lizmat> understood: not that I know of

[15:22] <guifa_> then it should pass Empty which would result in effectively no elements passed ,right? 

[15:23] <lizmat> yeah, but $_ would not contain $foo

[15:23] <lizmat> m: .say for with Int

[15:23] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    with used at line 1␤␤»

[15:23] <lizmat> meh

[15:23] <guifa_> re the dynamic variable, perhaps OUTER:: ?

[15:24] <Tirifto> guifa_, re with, what about it seems odd? :o

[15:25] <guifa_> m: .say with Int

[15:25] <camelia> rakudo-moar e10e3aa0c: ( no output )

[15:25] <guifa_> I wouldn't expect the extra parentheses to be necessary, that's all

[15:26] <Tirifto> Ah, yeah.

[15:33] <Tirifto> m: my $*x; my $code = { say $*OUTER::x }; $code();

[15:33] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Dynamic variables cannot have package-like names (with '::'), so␤'$*OUTER::x' is not allowed.␤at <tmp>:1␤------> my $*x; my $code = { say $*OUTER::x⏏ }; $code();␤»

[15:33] <guifa_> I just tried this on an older version and the issue was OUTER was still being resolved in the context of the caller

[15:34] <guifa_> actually

[15:34] <guifa_> nm

[15:34] <guifa_> I had a typo

[15:34] *** Vyrus joined
[15:36] <guifa_> m: sub a { my $*x = 10; -> { say OUTER::<$*x> } }; sub b { my $*x = 20; a }; my $*x = 30; b()()

[15:36] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «10␤»

[15:37] <guifa_> but it still requires the $*x to be somewhere in the scope of a.  Not sure if you can do OUTER::CALLERS ha

[15:37] <guifa_> OOH

[15:37] <guifa_> you can 

[15:38] <guifa_> m: sub a { -> { say OUTER::CALLERS::<$*a> } }; sub b { my $*a = 20; a }; my $*a = 30; b()()

[15:38] <camelia> rakudo-moar e10e3aa0c: OUTPUT: «(Any)␤»

[15:38] <guifa_> um, well, you COULD haha

[15:38] <guifa_> https://tio.run/##K0gtyjH7/7@4NEkhUaH60AJdO4VqheLESgX/0BDXICsrZ0cfH9egYCsrGxWtRDuFWoVaawWQ4iSgstxKBaCggq2CkYE1UDdQBi5iDBRJ0tDU0Pz/HwA

[15:39] <guifa_> bisectable: sub a { -> { say OUTER::CALLERS::<$*a> } }; sub b { my $*a = 20; a }; my $*a = 30; b()()

[15:39] <bisectable6> guifa_, Will bisect the whole range automagically because no endpoints were provided, hang tight

[15:39] <bisectable6> guifa_, Output on all releases: https://gist.github.com/2817d8c33ae66a47b2c61e70b79d9f09

[15:39] <bisectable6> guifa_, Bisecting by output (old=2019.03.1 new=2019.07.1) because on both starting points the exit code is 0

[15:40] <bisectable6> guifa_, bisect log: https://gist.github.com/4ee23c9ad93b8b31ce2a4fb02eec5466

[15:40] <bisectable6> guifa_, (2019-04-08) https://github.com/rakudo/rakudo/commit/5598ddfc849dabe53ad233bb2b68146d4b96ed8a

[15:40] <bisectable6> guifa_, Bisecting by exit code (old=2016.07.1 new=2016.08.1). Old exit code: 1

[15:40] <bisectable6> guifa_, bisect log: https://gist.github.com/56391ebcd3f672eaaf40c6263bb85a9f

[15:40] <bisectable6> guifa_, (2016-08-19) https://github.com/rakudo/rakudo/commit/25e9fd76e85fabda20e263b6f87e27b0673f26e2

[15:40] <bisectable6> guifa_, Output on all releases and bisected commits: https://gist.github.com/3c97e56b8f34a6f11a37fb8852ee9d93

[15:41] <guifa_> hmm.  summer 2019 doesn't quite coincide with newdisp so I wonder what changed.  those commits bisectable found don't seem like they'd affect the packages

[15:42] <Tirifto> guifa_, awesome! Thank you! :D

[15:42] <guifa_> meh I'm not sure if it actually works or which one is supposed to be correct so don't rely on it

[15:43] <guifa_> TBH your solution of my $value-for-closure = $*dynamic-value reads very nicely to me (assuming descriptive names) 

[15:46] <Tirifto> Hmm… looks like it doesn’t work in my program after all. Not really sure why. x)

[15:47] * guifa_ is afk

[15:47] <Tirifto> But yeah, I would agree that ‘$name = $*name’ probably reads the best. :-)

[16:34] *** linkable6 left
[16:34] *** evalable6 left
[16:36] *** evalable6 joined
[16:37] *** linkable6 joined
[16:49] <tbrowder__> ugexe: i was planning to use a sub of that module if that would help the installation, otherwise no other raku modules need be refernced.

[16:51] <tbrowder__> *referenced

[17:04] *** jdv left
[17:04] *** jdv joined
[17:32] <ugexe> referencing your own modules inside a build script is already iffy

[17:32] <ugexe> because of the same dependency thing i mentioned before

[17:33] <ugexe> if the sub you want to reference doesn't have any external dependencies i guess its ok 

[17:34] <ugexe> if it does have external dependencies then you have to really know what you're doing and not make any assumptions about what might be installed and what might be getting provided by a non-installation repo

[17:35] <tbrowder__> ok, thnx

[17:56] *** jpn joined
[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:15] *** jpn left
[18:17] *** zara joined
[18:18] *** jpn joined
[18:20] *** zara is now known as holyghost

[18:26] *** synthmeat left
[18:26] <tbrowder__> ugexe: another question on the build process with a Build mod: if the modules itss it needs are in META6.json "build-depends" shouldn't that satisfy

[18:26] *** synthmeat joined
[18:27] <tbrowder__>  the script's needs?

[18:28] <ugexe> yes, they will be provided to Build.pm. The question is when you spawn your script externally will you also set up e.g. -I correctly to provide those build-depends that aren't installed but *are* available to Build.pm?

[18:30] <ugexe> Build.pm gets run something like `raku -I /path/to/dependency -I /path/to/your/distribution Build.rakumod`. /path/to/dependency hasn't been installed yet btu is available to Build.rakumod

[18:30] <ugexe> if you then do something like `shell ...` to something that needs /path/to/dependency then you need to explicitly handle that

[18:33] <ugexe> run $*EXECUTABLE, $*REPO.repo-chain.map({ "-I" ~ $_.path-spec }), build/my-raku-build-script.raku

[18:34] <ugexe> something like that would handle that scenario although its not ideal either

[18:36] *** Xliff joined
[18:40] *** jpn left
[18:48] *** squashable6 left
[18:49] *** squashable6 joined
[19:07] *** jgaz left
[19:11] *** somebody1807 joined
[19:13] *** Sgeo joined
[19:23] <somebody1807> Is anyone able to explain the difference between Lock and Lock::Async regarding return values within the protected code block, as shown in this example (https://gitlab.com/-/snippets/2557479)?

[19:24] <[Coke]> https://docs.raku.org/type/Lock

[19:24] <[Coke]> Any await performed while a Lock is held will behave in a blocking manner; the standard non-blocking behavior of await relies on the code following the `await` resuming on a different Thread from the pool, which is incompatible with the requirement that a Lock be unlocked by the same thread that locked it. See Lock::Async for an alternative mechanism that does not have this shortcoming. 

[19:24] <[Coke]> https://docs.raku.org/type/Lock/Async.html

[19:25] <[Coke]> Unlike Lock, which provides a traditional OS-backed mutual exclusion mechanism, Lock::Async works with the high-level concurrency features of Raku

[19:25] <[Coke]> (all text above cut and paste from the doc site

[19:26] <somebody1807> I understand the thead-blocking nature of Lock, and I understand Lock::Async uses raku constructs to avoid blocking threads, but I don't see by how that explains the return behaviour being different

[19:26] <[Coke]> ... should have read the snippet.

[19:27] <somebody1807> I am not trying to be obtuse, but perhaps I am not as intelligent as you, because I still don't understand

[19:27] <somebody1807> If it helps to explain my ignorance, I am self taught programmer

[19:28] <somebody1807> Did you see in my example how the return behaviour inside the protected code-block is different? Are you saying, in your understanding, this is expected behaviour?

[19:33] <somebody1807> I have read those doc pages multiple times now, and I have read multiple times the excerpts you copy and pasted, and I cannot see the answer for the difference in the behaviour of the very simple example I linked earlier.

[19:34] <somebody1807> The protect method for Lock::Async isn't even returning a Promise for me to attempt to use 'result' or one of the other Promise methods on. It just seems to me to be an oversight in the functionality parity between the two, or some severe fundamental lack of understanding on my part

[19:37] <[Coke]> somebody1807: *I* should have read the snippet before posting cut and pastes of the docs.

[19:37] <[Coke]> You're not being obtuse.

[19:37] *** jpn joined
[19:37] <tonyo> tbrowder__: i'm laid up with some health stuff and was thinking more on something you mentioned when i wrote that cro blog post - you still think that might be an interesting, maybe not a book, but something expanded out and a little longer?

[19:38] <[Coke]> I'm guessing it either an issue with return in the context of an async lock, or as you say, missing parity between the methods. I don't know, sorry. :(

[19:39] <somebody1807> I appreciate the help anyway. Is this (https://github.com/Raku/doc/issues) the correct place to raise an issue regarding the matter?

[19:40] <CIAvash> somebody1807: You're not creating any promises and you are not awaiting any promises

[19:41] <CIAvash> m: sub get2 () { my $lock = Lock::Async.new; my $x; await start $lock.protect({ $x = 'value'; }); $x }; say get2;

[19:41] <camelia> rakudo-moar 9a5fe3d6e: OUTPUT: «value␤»

[19:41] *** jpn left
[19:43] <somebody1807> Yes, I gathered as much. I was just speaking in the context of trying to understand an earlier reply to me from Coke. Regarding your proposed solution, I have come to that conclusion on my own, but in your opinion, would it not be beneficial for it to function in the same way as Lock.protect return behaviour?

[19:43] <ugexe> Lock::Async.protect doesn't have a return value

[19:43] <somebody1807> Shouldn't it though? Lock.protect does, as shown in my earlier example (https://gitlab.com/-/snippets/2557479).

[19:44] <ugexe> er n/m, i thought it was declaring --> Nil but it doesnt

[19:45] <somebody1807> In your opinion, is there any technical reason for the difference in behaviour, or is it likely just an oversight?

[19:46] <[Coke]> somebody1807: not sure if this is a doc issue or a rakudo issue.

[19:46] <[Coke]> would probably raise a rakudo issue (with a note that if it's intentional, let's update the docs to note it()

[19:46] <ugexe> i would imagine the protect is non-blocking

[19:47] <ugexe> so what is it supposed to return to you

[19:47] <somebody1807> To be fair, [Coke], the docs don't seem to make any mention of the return behavior of Lock shown in my example either. I read about it in a reddit post of lizmat

[19:47] <ugexe> i guess it could return a promise

[19:47] * ugexe checks if it is actually non blocking

[19:48] <somebody1807> The non-blocking nature of Lock::Async.protect is referring to thread-blocking. It still halts at that part of the script if the lock can't be acquired.

[19:48] <somebody1807> It just waits using 'await' to avoid tying up a thread

[19:48] <somebody1807> (From my understanding)

[19:49] <CIAvash> I don't think it makes sense to return a value, if I'm not mistaken, you are supposed to use them inside promises and I don't think you can return from inside promises. So you should be returning or collecting promises, I think

[19:50] <somebody1807> Sounds plausible

[19:50] <somebody1807> Seemingly is intentional then

[19:50] <somebody1807> Thanks for the help, all

[19:54] *** somebody1807 left
[19:54] <ugexe> I wonder if it should return an error or warning though

[19:54] <ugexe> m: sub foo { start { return 42 } }; foo(); sleep 1;

[19:54] <camelia> rakudo-moar 9a5fe3d6e: OUTPUT: «Unhandled exception in code scheduled on thread 4␤Attempt to return outside of immediately-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)␤  in block  at <tmp> line 1␤␤»

[20:01] <CIAvash> with await, it panics even

[20:01] <CIAvash> m: sub foo { await start { return 'value'; }; }; say foo

[20:01] <camelia> rakudo-moar 9a5fe3d6e: OUTPUT: «MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[20:12] <avuserow> Tirifto: glad you could make it work, and sorry that I had to run without saying anything more. B

[20:13] *** squashable6 left
[20:15] *** squashable6 joined
[20:36] *** _________ left
[20:37] *** _________ joined
[21:07] *** derpydoo left
[22:07] *** linkable6 left
[22:07] *** evalable6 left
[22:10] *** evalable6 joined
[22:10] *** linkable6 joined
[22:19] *** derpydoo joined
[22:24] *** derpydoo left
[23:06] *** holyghost left
[23:52] *** squashable6 left
[23:54] *** squashable6 joined
