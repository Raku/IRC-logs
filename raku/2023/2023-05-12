[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:03] *** TieUpYourCamel joined
[00:25] *** jpn joined
[00:30] *** jpn left
[01:19] *** jpn joined
[01:25] *** jpn left
[01:32] <guifa_> tbrowder you could always write a wrapper

[01:32] <guifa_> m: use Test; &is.wrap: anon sub is ($expected, $got) { nextwith $got, $expected }; is 'expected', 'got';

[01:33] <camelia> rakudo-moar cd6bc2093: OUTPUT: «not ok 1 - ␤# Failed test at SETTING::src/core.c/control.pm6 line 146␤# expected: 'expected'␤#      got: 'got'␤»

[01:51] *** Zymurgy is now known as Sauvin

[01:51] *** Sauvin left
[01:51] *** Sauvin joined
[01:52] *** derpydoo joined
[02:20] *** teatwo joined
[02:24] *** tea3po left
[03:07] <tonyo> rf: any way to just route _all_ errors in hummingbird through one handler rather than specifying the type or would i use advice and inspect the request for something?

[03:08] *** jpn joined
[03:13] *** jpn left
[03:35] *** teatwo left
[04:35] *** squashable6 left
[04:35] *** reportable6 left
[04:35] *** benchable6 left
[04:35] *** bisectable6 left
[04:35] *** sourceable6 left
[04:35] *** committable6 left
[04:35] *** statisfiable6 left
[04:35] *** releasable6 left
[04:35] *** tellable6 left
[04:35] *** greppable6 left
[04:35] *** nativecallable6 left
[04:35] *** squashable6 joined
[04:35] *** reportable6 joined
[04:36] *** statisfiable6 joined
[04:36] *** committable6 joined
[04:36] *** greppable6 joined
[04:36] *** nativecallable6 joined
[04:36] *** benchable6 joined
[04:37] *** releasable6 joined
[04:37] *** sourceable6 joined
[04:37] *** bisectable6 joined
[04:37] *** tellable6 joined
[04:56] *** jpn joined
[05:01] *** jpn left
[05:24] *** teatime joined
[05:58] *** derpydoo left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:14] *** leohoo_sdu[m] joined
[06:14] *** leohoo_sdu[m] left
[06:59] *** dustinm` left
[07:00] *** Sgeo left
[07:07] *** jpn joined
[07:11] *** dustinm` joined
[07:22] *** abraxxa joined
[07:29] *** sena_kun joined
[07:30] *** jpn left
[07:35] *** rf_ joined
[07:37] *** rf left
[07:43] *** rf joined
[07:43] *** Manifest0 joined
[07:45] *** rf_ left
[07:50] *** rf_ joined
[07:52] *** rf left
[07:54] *** rf joined
[07:55] *** rf_ left
[08:03] *** rf_ joined
[08:06] *** rf left
[08:15] *** rf joined
[08:16] *** rf_ left
[08:29] *** jpn joined
[08:34] *** rf_ joined
[08:35] *** rf left
[08:36] *** jpn left
[08:38] *** abraxxa left
[08:40] *** jpn joined
[08:49] *** rf joined
[08:51] *** rf_ left
[09:00] *** rf_ joined
[09:02] *** rf left
[09:18] *** rf_ left
[09:37] *** euandreh joined
[09:40] *** euandreh left
[09:42] *** euandreh joined
[09:56] <tbrowder__> guifa: thanks, but i'm too lazy fo that...

[10:01] <lizmat> tbrowder_: FWIW, you *don't* have to use Test in your tests

[10:02] <lizmat> as long as your test files produce TAP, you should be fine

[10:11] <guifa_> lizmat: what do you mean by "produce TAP" ?

[10:11] <lizmat> TAP output

[10:11] <lizmat> ok 1 - foo

[10:14] <guifa_> ah.  I was figuring it was the exit code that was used based on the END block

[10:29] <tbrowder__> hm, a good idea when all else fails!

[10:30] <lizmat> e.g. many of the files in t/01-sanity do not use Test

[10:31] <tbrowder__> but, basically, at the moment my failures are being caused by testing hash/list structures with is-deeply, so i need Test

[10:34] <tbrowder__> specifically the test that fails at the moment is from module Font::AFM where there is a structure hash .BBox keyed by character names, with values a 4-item list of numbers.

[10:36] <tbrowder__> the "got" part is taking that has and multiplying each number by the same constant value (scale factor) to produce a new, replacement list

[10:38] <tbrowder__> sorry, that is the "expected" entry

[10:39] <tbrowder__> the "got" part is the equivalent .BBox from my module

[10:41] <tbrowder__> i used a short cut from [Coke] and moritz to update the lists in one go by $newlist = $oldlist >>*>> $scalefactor

[10:42] *** linkable6 left
[10:42] *** evalable6 left
[10:42] <tbrowder__> the values work fine, but in one case i have a list and the other it's an array, and that causes  is-deeply to fail

[10:42] <tbrowder__> i haven't yet been able to zero in on a fix

[10:43] <tbrowder__> (the failure msg is long due to the size of the hash)

[10:43] *** evalable6 joined
[10:44] *** linkable6 joined
[10:44] <tbrowder__> i can pass the test by completely unpacking the structure and rebuilding, but using >>*>> would be so much better

[10:45] <tbrowder__> i't

[10:45] <lizmat> maybe coerce the expected or gotten to .List ?

[10:46] <lizmat> before giving it to is-deeply ?

[10:48] <tbrowder__> i tried that once with no success when applying it to the "got" part. ibut i may try again--that's where the confusion comes with Test got vs expected

[10:49] <tbrowder__> give me a few...

[11:12] <tbrowder__> i'm going back to my side of the test and see why it's an array. i used the >>*>> on that side, too. thnx for being a good sounding board

[11:15] <lizmat> yw  :-)

[11:18] <tbrowder__> ah, my side is using $newhash = $oldhash>>.map({$_ * $factor})

[11:19] <tbrowder__> that somehow produces an array. i'll fiddle with that...

[11:20] <lizmat> that'd be multiplying a Pair ?

[11:20] <lizmat> which feels....  suboptimal?

[11:20] <tbrowder__> ?

[11:22] <lizmat> m: my %h = :42a, :666b; say %h>>.map(&dd) # TIL that >>. on a hash produces values

[11:22] <camelia> rakudo-moar cd6bc2093: OUTPUT: «42␤{a => (Nil), b => (Nil)}␤666␤»

[11:23] <lizmat> or maybe re-learned  :-)

[11:26] <tbrowder__> m: my $h = 'a' => (1,2); say %h>>.map({$_ * 2})

[11:26] <camelia> rakudo-moar cd6bc2093: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '%h' is not declared.  Did you mean '$h'?␤at <tmp>:1␤------> my $h = 'a' => (1,2); say ⏏%h>>.map({$_ * 2})␤»

[11:27] <discord-raku-bot> <Nemokosch> I used that semi-regularly

[11:28] <tbrowder__> m: $h = a => 1,2; say $h>>.map({$_ * 2 })

[11:28] <camelia> rakudo-moar cd6bc2093: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$h' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL>⏏$h = a => 1,2; say $h>>.map({$_ * 2 })␤»

[11:28] <discord-raku-bot> <Nemokosch> for a long time I wondered, why something like deepmap exists in the first place, and there you go: it doesn't make a lot of sense for arrays but it makes great sense for deeply nested maps/hashes

[11:28] <discord-raku-bot> <Nemokosch> where it's not only common but pretty good design to put the actual values in the nodes

[11:29] <tbrowder__> m: my $h = a => 1,2; say $h>>.map({$_ * 2})

[11:29] <camelia> rakudo-moar cd6bc2093: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 2 in sink context (lines 1, 1)␤Cannot resolve caller new(Pair:D: ); none of these signatures matches:␤    (Pair: Str:D $key, Mu \value, *%_)␤    (Pair: Mu \key, Mu \value, *%_)␤    (Pair: M…»

[11:33] <tbrowder__> think i need parens

[11:34] <tbrowder__> m: $h=a=>(1,2); say $h>>.map({$_*2})

[11:34] <camelia> rakudo-moar cd6bc2093: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$h' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL>⏏$h=a=>(1,2); say $h>>.map({$_*2})␤»

[11:35] <tbrowder__> jeepers!

[11:35] <discord-raku-bot> <Nemokosch> anyway, no, not parens

[11:36] <discord-raku-bot> <Nemokosch> brackets around the RHS, or even better: %() around the RHS

[11:36] <tbrowder__> m: my $h=a=>(1,2); say $h>>.map({$_*2})

[11:36] <camelia> rakudo-moar cd6bc2093: OUTPUT: «Cannot resolve caller new(Pair:D: ); none of these signatures matches:␤    (Pair: Str:D $key, Mu \value, *%_)␤    (Pair: Mu \key, Mu \value, *%_)␤    (Pair: Mu :$key!, Mu :$value!, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:40] <tbrowder__> m: my $h=a=(1,2); say "{$h>>.map({$_*2})}"

[11:40] <camelia> rakudo-moar cd6bc2093: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[11:41] <discord-raku-bot> <Nemokosch> m: my $h = { a => (1, 2) }; say $h>>.map({$_ * 2})

[11:41] <discord-raku-bot> <Raku eval>  {a => (2 4)} 

[11:41] <tbrowder__> forgot > this time,

[11:42] <tbrowder__> thnx, but why Raku eval?

[11:43] <tbrowder__> gotta try my way...

[11:44] *** linkable6 left
[11:44] *** evalable6 left
[11:45] *** linkable6 joined
[11:47] *** evalable6 joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:03] <discord-raku-bot> <Nemokosch> because there is no camelia on discord

[12:15] *** squashable6 left
[12:16] *** squashable6 joined
[12:52] *** john212 joined
[12:56] *** john212 left
[12:57] <tbrowder__> m: my $h

[12:57] <camelia> rakudo-moar cd6bc2093: ( no output )

[12:59] <tbrowder__> ah, got it

[13:37] <tbrowder__> okey dokey, [Coke]'s advice was correct, i just confirmed old rule that copy/pasta may not be the answer. he said, regarding map, that the ({$_ * X}) was the most flexible, and i used it in this work.

[13:38] <tbrowder__> *however*, i failed to change that part to accurately model the actual structure. when i did, i get good results.

[13:41] <tbrowder__> for a hash of %h<key> = 1,2,3,4 i needed %h>>.map({$_ >>*>>})

[13:42] <tbrowder__> duh: >>*>> $f})

[13:56] *** linkable6 left
[13:56] *** evalable6 left
[13:57] *** linkable6 joined
[13:59] *** evalable6 joined
[14:01] *** rf joined
[14:16] *** teatime left
[14:17] *** teatime joined
[14:22] <leont> What's the right syntax to alias a type from another module to my own module?

[14:22] *** teatwo joined
[14:23] <leont> «my ::Foo = Other::Foo;» doesn't seem to DWIM

[14:23] *** teatwo left
[14:23] *** teatwo joined
[14:25] <rf> tonyo: You can use a stash + middleware

[14:25] <rf> Requests and Responses have stashes

[14:25] *** teatime left
[14:26] <[Coke]> leont: I don't have a place to test this, but: bind, instead?

[14:26] <[Coke]> := ?

[14:26] <leont> Nope, but apparently getting rid of the my did the trick.

[14:27] <leont> Or apparently it didn't, it just compiled

[14:28] *** teatwo left
[14:28] *** teatwo joined
[14:45] <leont> I'm entirely stuck on this? :-(

[14:58] *** Sgeo joined
[15:02] <tbrowder__>  my $t = $Foo::bar.foo

[15:04] *** swaggboi left
[15:04] <vrurg> Why a type capture would be needed if there is `my \Foo = Other::Foo;` ?

[15:18] *** swaggboi joined
[16:07] *** xinming left
[16:09] *** xinming joined
[16:58] *** merp left
[16:58] *** merp joined
[17:02] *** Sauvin left
[17:10] *** Sauvin joined
[17:43] <tonyo> rf: hummingbird seems to not parse query string correctly, whether i give it `?email=test@test.com` or `?email=test%40test.com`, in the .query('email') i get back `test`

[17:49] <tonyo> also kills the server by running siege with the default configuration against it

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:33] *** jpn left
[18:35] *** jpn joined
[18:46] *** notna joined
[18:51] *** jpn left
[18:53] *** jpn joined
[19:06] *** MasterDuke left
[19:10] *** jpn left
[19:11] *** jpn joined
[19:14] <rf> tonyo: Query params have been a real pain, would you mind filing an issue. I thought I fixed this.

[19:15] <rf> What's also odd is that it died with Siege, I've hit it with siege before and it seems to do okay

[19:18] <rf> Ahh @tonyo I see the bug, I'll fix it up right away!

[19:21] *** jpn left
[19:23] *** jpn joined
[19:25] *** MasterDuke joined
[19:32] *** notna left
[19:41] *** jpn left
[19:42] <rf> tonyo: https://github.com/rawleyfowler/Humming-Bird/pull/55 Just waiting on CI and it'll be released as 2.1.4

[19:47] *** jpn joined
[19:56] <rf> I must have been drunk when I wrote the query param decoding originally :X

[20:01] *** jpn left
[20:12] <tonyo> hahaha

[20:12] <tonyo> blesss

[20:13] <tonyo> rf: i've narrowed the error down to the `error(` function + using siege

[20:16] <tonyo> rf++ query is coming in nicely now

[20:17] <ugexe> https://github.com/rawleyfowler/Humming-Bird/blob/1c4c16c77e9114094493c6527238f2656f2d0fcd/lib/Humming-Bird/Core.rakumod#L588

[20:17] <ugexe> dunno if that function needs to be thread safe, but it isnt

[20:19] <ugexe> a wild guess is the reads and writes to that hash should be protected

[20:31] <tbrowder__> tonyo: is hummingbird usable with yr pdf https guide with all its bells and whistles?

[20:32] <rf> tonyo: Great! Let me know if you find other issues

[20:32] <rf> Humming bird is single threaded

[20:33] <tonyo> tbrowder__: let me double check

[20:33] <rf> To my knowledge lol, although i'm not entirely sure how raku does async stuff under the hood

[20:34] <tonyo> tbrowder__: it is, the Cro parts would change slightly and i'd probably use this for templating: https://raku.land/zef:tony-o/Ryml

[20:34] <rf> I use Ryml in production right now tonyo :)

[20:35] <rf> Internal stuff but still it's excellent!

[20:38] *** jpn joined
[20:39] <rf> Also ugexe that call should typically only be called when setting up the server, thought there may be a case for calling it if you wish to dynamically handle new exception types at run time

[21:27] *** cm left
[21:32] *** cm joined
[21:42] *** sena_kun left
[21:50] *** jpn left
[21:55] *** euandreh left
[21:57] *** rf left
[22:05] *** euandreh joined
[22:06] *** jpn joined
[22:47] <ugexe> delegate-route isn’t thread safe either

[22:47] <ugexe> I do get that normally that shouldn’t be a problem though 

[22:58] <ugexe> easy enough to fix too

[23:00] *** xinming left
[23:00] *** xinming joined
[23:00] <ugexe> there are modules like Concurrent::Trie, but I usually just writer a getter/setter function for each hash, a global lock for each getter/setter pair, and then using $!the-lock.protect: { use-the-hash-here } 

[23:23] *** jpn left
[23:25] *** xinming left
[23:26] *** jpn joined
[23:28] *** xinming joined
