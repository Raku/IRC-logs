[00:00] *** reportable6 left
[00:01] *** Henry151 left
[00:01] *** reportable6 joined
[00:09] *** Aozen joined
[00:10] *** Aozen left
[00:29] <[Coke]> Looks good on a quick read

[00:30] <[Coke]> Please consider converting to rakudoc and submitting a PR.

[01:10] *** evalable6 left
[01:10] *** linkable6 left
[01:11] *** evalable6 joined
[01:12] *** linkable6 joined
[01:58] *** razetime joined
[02:13] *** ToddAndMargo joined
[02:33] *** swaggboi joined
[03:12] *** swaggboi left
[03:19] *** ToddAndMargo left
[03:45] *** swaggboi joined
[04:45] *** squashable6 left
[04:45] *** linkable6 left
[04:45] *** nativecallable6 left
[04:45] *** notable6 left
[04:45] *** quotable6 left
[04:45] *** unicodable6 left
[04:45] *** reportable6 left
[04:45] *** bloatable6 left
[04:45] *** sourceable6 left
[04:45] *** greppable6 left
[04:45] *** bisectable6 left
[04:45] *** releasable6 left
[04:45] *** committable6 left
[04:45] *** statisfiable6 left
[04:45] *** benchable6 left
[04:45] *** evalable6 left
[04:45] *** tellable6 left
[04:45] *** coverable6 left
[04:45] *** shareable6 left
[04:45] *** statisfiable6 joined
[04:46] *** unicodable6 joined
[04:46] *** evalable6 joined
[04:46] *** linkable6 joined
[04:46] *** coverable6 joined
[04:46] *** committable6 joined
[04:46] *** squashable6 joined
[04:47] *** bisectable6 joined
[04:47] *** tellable6 joined
[04:47] *** shareable6 joined
[04:47] *** bloatable6 joined
[04:47] *** notable6 joined
[04:47] *** nativecallable6 joined
[04:47] *** reportable6 joined
[04:47] *** greppable6 joined
[04:47] *** benchable6 joined
[04:47] *** releasable6 joined
[04:48] *** quotable6 joined
[04:48] *** sourceable6 joined
[05:48] *** squashable6 left
[05:48] *** bisectable6 left
[05:48] *** linkable6 left
[05:48] *** bloatable6 left
[05:48] *** sourceable6 left
[05:48] *** releasable6 left
[05:48] *** quotable6 left
[05:48] *** evalable6 left
[05:48] *** greppable6 left
[05:48] *** benchable6 left
[05:48] *** unicodable6 left
[05:48] *** coverable6 left
[05:48] *** nativecallable6 left
[05:48] *** statisfiable6 left
[05:48] *** reportable6 left
[05:48] *** committable6 left
[05:48] *** notable6 left
[05:48] *** benchable6 joined
[05:49] *** reportable6 joined
[05:49] *** committable6 joined
[05:49] *** sourceable6 joined
[05:49] *** releasable6 joined
[05:50] *** bloatable6 joined
[05:50] *** squashable6 joined
[05:50] *** nativecallable6 joined
[05:50] *** statisfiable6 joined
[05:50] *** quotable6 joined
[05:50] *** notable6 joined
[05:50] *** unicodable6 joined
[05:51] *** greppable6 joined
[05:51] *** linkable6 joined
[05:51] *** bisectable6 joined
[05:51] *** evalable6 joined
[05:51] *** coverable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:03] *** derpydoo joined
[06:20] *** razetime left
[06:21] *** kjp left
[06:25] *** kjp joined
[06:38] *** jpn joined
[06:43] *** jpn left
[07:08] *** grondilu joined
[07:08] <grondilu> Hi all

[07:09] <grondilu> If I have a parametrized role A[::Type], can I access Type from an other parametrized role B[A]?

[07:10] <grondilu> I suppose I could make an accessor method in A or something.  method type { Type }

[07:11] <grondilu> But what I really want is do something like `has Type $.x;` inside B.

[07:11] <grondilu> `role B[A[::Type]]` is not valid syntax apparently.

[07:13] *** kjp left
[07:13] *** kjp joined
[07:14] *** ProperNoun left
[07:45] *** sena_kun joined
[07:53] <lizmat> grondilu: it's not possible to do role B inside the lexical scope of role A ?

[08:38] <grondilu> m: role A[::T] { role B[::T] { } }

[08:38] <camelia> rakudo-moar 9774de503: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot declare our-scoped role inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at <tmp>:1␤------> role A[::T] { role B[::T…»

[08:38] <grondilu> m: role A[::T] { role B[T] { } }

[08:38] <camelia> rakudo-moar 9774de503: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot declare our-scoped role inside of a role␤(the scope inside of a role is generic, so there is no unambiguous␤package to install the symbol in)␤at <tmp>:1␤------> role A[::T] { role B[T]…»

[08:38] <lizmat> meh

[08:39] <lizmat> m: role A[::T] { my role B[::T] { } }

[08:39] <camelia> rakudo-moar 9774de503: ( no output )

[08:39] <lizmat> but I guess that doesn't help you

[08:39] <grondilu> hum maybe it does

[08:40] <grondilu> though there will be no way to access B outside of A, so I'm not sure that will work.

[08:41] <grondilu> I'm not even sure both ::T refer to the same thing here in fact.

[08:42] <grondilu> m: role A[::T] { my class B { has T $.x } }

[08:42] <camelia> rakudo-moar 9774de503: ( no output )

[08:42] * grondilu is confused as he thought he had tried that

[08:42] <grondilu> oh well

[08:43] <grondilu> why can't we have our-scoped packages inside roles, exactly?

[08:44] <moritz> the role body runs each time it's applied, that's kinda not really compatible with our-scopes, afaict

[08:45] *** linkable6 left
[08:45] *** evalable6 left
[08:46] <lizmat> right.  The other day I found out that roles are actually codegenned into a subroutine with the signature of the role, and which returns the meta-object and the lexpad at the end

[08:47] <lizmat> this allows basic multi-dispatch to be used as the role selector  :-)

[08:48] *** linkable6 joined
[08:48] *** evalable6 joined
[08:48] <lizmat> twas a bit of an eye opener to me  :-)

[08:53] *** Sgeo left
[08:56] <grondilu> noted

[08:57] <grondilu> FWIW I was trying to improve upon https://rosettacode.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm

[08:57] <grondilu> I've never managed to have an elegant, yet generic way to implement that kind of structure.

[08:58] <grondilu> like I wanted to have something like `role EC[::Field] { has Field ($.a, $.b); }` but then I didn't see how to implement Point in a way that would be connected to EC.

[09:00] * grondilu often deplores how OOP is not quite appropriate to model common math structures.

[09:00] <grondilu> (or set theory for that matter)

[09:02] <grondilu> Like a group is a set, but OOP uses classes and instances, not sets.  So if I define a group as a class, an instance is not quite an element of the group.  It gets messy quick. 

[09:02] <lizmat> yup  :-(

[09:53] *** linkable6 left
[09:53] *** evalable6 left
[09:54] *** linkable6 joined
[09:54] *** evalable6 joined
[09:57] <exp> grondilu: if you could express these concepts analogous to mathematics then you'd have a 'compiling problem', does it compile forever or halt and produce a binary? :-p

[09:57] <exp> also if you know of any good resources for someone with frankly poor algebra skills to understand the maths behind EC i'd appreciate it

[09:57] <exp> i understand the concept of multiplying the point on the curve over the field to a reasonable degree

[09:57] <exp> but i don't understand 'HD-Wallets', a key derivation scheme using ECC

[09:59] <grondilu> what is it you don't understand?  I mean we all understand some things up to some degree.  Few understand fully.

[10:01] <exp> grondilu: i don't understand how the same derivation process can be carried out on private/public key and produce a new pair

[10:03] <exp> is this analogous to homomorphic encryption? i don't think so but it feels that way

[10:03] <grondilu> not really, but there is an homomorphism involved, if I'm not mistaken.

[10:04] <exp> i have designed an identity system for use online which is better than all existing systems i'm aware of

[10:04] <grondilu> basically the private and public keys have homomorphic operations on them. that's why you can derive the same key from each of them.

[10:04] <exp> but it relies on this process being rigorous

[10:04] <exp> ie that a third party can issue a derived pubkey for a client without holding the privkey and without revealing any sensitive information

[10:05] <grondilu> well yead that is the point in bip32

[10:05] <exp> right, and it makes some sense to me, but with the greatest respect to the crypto community

[10:05] <exp> assuming their take on cryptography is accurate is a potentially fatal mistake!

[10:05] <grondilu> have you looked at https://learnmeabitcoin.com/?  It's pretty good IMHO.

[10:06] <exp> i have, i'm confident i understand both the standard blockchain and lightning etc

[10:06] <exp> but it's the ECC concepts i can't find a gentle introduction to

[10:06] <exp> (my proposal is unrelated to blockchains fwiw)

[10:07] <grondilu> you just need to see an elliptic curve as an additive group parametrized by a Galois field.

[10:07] <exp> ah yes, a monad is an endofunctor

[10:07] <exp> :)

[10:08] <grondilu> well, I'm not familiar with that terminology (which I assume is from category theory)

[10:08] <exp> it's a meme

[10:08] <exp> it's how you badly explain haskell

[10:08] <exp> because anyone who asks for help is instantly blinded by category theory and told to go do an 8 year degree course

[10:08] <exp> i don't know what an additive group is, or a galois field

[10:09] <exp> and the wikipedia page for both will confuse me further as wikipedia's maths policy is: haha go do an 8 year degree course

[10:09] <grondilu> well you need to know at least these : groups, fields, rings and so on.

[10:09] <exp> right, but trying to investigate any of them is an exercise in frustration

[10:09] <grondilu> otherwise any serious documentation about EC will be obscure to you.

[10:09] <exp> people who already understand it, writing explanations only accessible to those who already understand it

[10:09] <exp> exactly

[10:10] <exp> i'm going to have to resort to paying someone to tutor me in this because the internet is so utterly awful for learning

[10:11] <grondilu> algebra is hard, but it all depends how deep into the rabbit hole you want to go.  I don't think you have to go very deep to understand cryptography, but you have to enter.

[10:12] <exp> i would love to go quite deep, but it's the gatekeeping i can't manage to pass

[10:12] <grondilu> So get a textbook about algebra or follow a course.

[10:12] <grondilu> I think there are pretty good free lessons on YouTube too.

[10:13] <exp> a textbook is a fine approach but of course they are £100+ each once you get to even reasonable levels

[10:13] <grondilu> It's not "gatekeeping", it's just that accurate vocabulary is necessary to discuss thinks with rigor, which is crucial in crypto.

[10:13] <exp> it's definitely gatekeeping, no other topic works like this

[10:14] <exp> (not that i am trying to insult you, you're not responsible lol)

[10:15] <exp> i picked up a book that promised to explain the concepts of a maths topic without getting into heavy maths

[10:15] <exp> there was a triple intergal on page 8

[10:15] <grondilu> well, integrals are part of analysis, not algebra.

[10:16] <grondilu> so there is no reason to get into them for crypto

[10:16] <exp> perhaps not, but the exact same applies i'm afraid

[10:17] <exp> the wikipedia page for Field for example becomes impossibly ambiguous at word 6

[10:17] <grondilu> Wikipedia is not great for math.

[10:18] <exp> yes their policy is literally 'as many facts as possible'

[10:18] <exp> making them readable or understandable isn't a part of that policy

[10:18] <exp> but yes, to get past the first sentence i must understand set theory

[10:19] <grondilu> A field is an invertible ring.  Simple  ;-)

[10:19] <exp> right, in most disciplines you could go look those terms up and have a chance of understanding

[10:19] <exp> in mathematics it's just opaque words all the way down

[10:20] <grondilu> Well, you need a textbook that define them all.

[10:20] <exp> well that's the definition of gatekeeping

[10:20] <exp> anyway i've said my part, i don't mean to bitch at you

[10:20] <exp> you're not responsible

[10:21] <exp> just frustrates me that the knowledge is there but only if you pay certain people and waste months of your life just trying to illuminate the corners left dark intentionally

[10:21] <exp> the difference between academic computer science and practical computer science is the same

[10:22] <grondilu> free resources do exist : https://mathworld.wolfram.com/Ring.html

[10:22] <exp> the academics can't even explain their concepts to the people doing it day to day, so we end up with 40 years of critical security issues

[10:22] <exp> at least it's not hyperphysics

[10:22] <exp> but how understandable do you think that is grondilu 

[10:22] <grondilu> that is just one example.  some textbooks can be downloaded for free too.

[10:22] <exp> they can, but how useful do you think a series of statements like that actually is?

[10:23] <exp> i don't understand what a set is, i don't understand what a binary operator is, so cool now i have a vague list of things i won't remember that relate to concepts that are all just explained in the same way

[10:24] <grondilu> exp:  there are a lot of definitions to know in math.  You have to learn them in order.  If you do, it all makes sense.  I was taught this at uni in the correct order but I understand that if you weren't all this can appear obscure.

[10:24] <exp> right, that's exactly how i feel

[10:25] <grondilu> basics are set theory and logical operators, IIRC.

[10:25] <exp> set theory is truly insane though

[10:25] <exp> 2 is S(1)

[10:25] <exp> 3 is S(S(1))

[10:25] <exp> years of this, just to understand the definition of something

[10:26] <grondilu> well, it makes sense though, don't you think?

[10:26] <exp> not to me

[10:27] <grondilu> I mean I like this notion of integers defined in terms of successors.

[10:27] <exp> i don't do well with being told "X is Y", "Y is Z", "Z is A" and so on

[10:27] <exp> i want to understand the mechanics, the architecture, the infrastructure

[10:27] <exp> not "it just *is*"

[10:28] <grondilu> well, in math the "infrastructure" is set theory.

[10:29] <grondilu> along with predicate logic.

[10:29] <exp> right, but set theory itself is a multi year topic

[10:29] <grondilu> nah

[10:29] <grondilu> a few months at most

[10:30] <exp> you don't see that as rather insane? it seems quite insane to me

[10:30] <exp> a few months of work to understand the infrastructure to understand how to add numbers together?

[10:30] <grondilu> I was taught just enough set theory to go on with further math.  It didn't require years.

[10:30] <exp> to me it doesn't feel like i am learning anything when i try and read up on this

[10:31] <grondilu> I'm even generous.   It could have been a few weeks, I don't quit recall.

[10:31] <exp> just getting a bunch of unrelated facts thrown at you

[10:31] <exp> learning something means i can do something new or achieve something i couldn't

[10:31] <grondilu> exp: you are learning the vocabulary that is required for what's coming next.  

[10:32] <exp> i feel that argument supports my argument more though

[10:32] <exp> months of work to learn the vocabulary?

[10:32] <exp> is this a science or a language?

[10:32] <exp> anyway i did say i'd shut up

[10:32] <exp> i do apologise for the mini rant

[10:32] <exp> i have a very busy job and a lot of personal things to attend to, and it frustrates me that maths is one of the only disciplines i simply can't learn

[10:32] <grondilu> I understand your complaint.  Let me find a relevant quote I have in mind right now.

[10:32] <exp> because i don't have weeks or months to learn the basics of set theory

[10:33] <exp> and i'm incredibly sceptical that this isn't just a form of cult (not in the religious / suicidal fashion)

[10:34] <grondilu> lately I bought an algebra textbook, and in the first line the author summarises your issue well:

[10:34] <grondilu> "This part introd uces the basic notions of algebra, and the main difficulty

[10:34] <grondilu> for the beginner is to absorb a reasonable vocabulary in a short time."

[10:34] <grondilu> it really is that : absorbing vocabulary.

[10:35] <exp> i think the depth is a different factor too

[10:35] <exp> like if i ask you what a pointer is

[10:35] <grondilu> it's a cognitive barrier of entry, that is for sure.  But it is necessary.

[10:35] <exp> it will take one or two levels of explanation before we get to the actual hardware

[10:35] <exp> well, i'm sceptical it's necessary too

[10:35] <exp> obviously mathematicians do very well

[10:35] <exp> but computer scientists have done extremely poorly

[10:36] <exp> the subset of languages that are remotely safe is tiny, and very few people write code in them

[10:36] <exp> everything academia has been trying to promote has failed because they can't make it understandable

[10:36] <exp> we end up with "a monad is a monoid etc etc"

[10:36] <grondilu> Mathematica is pretty good, though.

[10:37] <exp> the proprietary software?

[10:37] <grondilu> It's my favorite non FOSS program.

[10:37] <exp> understood

[10:38] <exp> from my perspective grondilu, the argument that the vocab is required is no different than teaching in latin and saying that's required too

[10:38] <exp> i do understand your point, and i appreciate there are differences between english/latin and set theory

[10:38] <grondilu> When you think about it, yes it's proprietary, but it's also conceptually simple and very well documented.  One could argue it's almost as if it's open source because there is no hiding how it works.

[10:38] <exp> but the fact that for every single topic i want to understand it only refers back to another topic explained in the same way is intensely frustrating

[10:38] <exp> and most people just give up

[10:38] <exp> imagine trying to learn french when every article was already in french

[10:39] <exp> and the only viable approach was to pay people to teach you the basics of french so you could understand the rest

[10:39] <grondilu> Well, the difference is that there is no alternative to math, when there are alternatives to latin.

[10:39] <exp> that's not true, the alternative to rigorous mathematics is ad-hoc calculation

[10:39] <exp> and that's the solution the vast majority of people use

[10:40] <exp> when i want to design an algorithm, i can't approach the level of a formal proof

[10:40] <grondilu> are you refering to so-called constructive mathematics?  

[10:40] <exp> so i bodge it so it seems right

[10:40] <exp> i'm not sure, because that's another vocabulary i'm missing :)

[10:40] <lizmat> also: S(S(1)) is just a notation for a mathematical concept, is it not?   And if so, then it's a "sort of latin", is it not ?

[10:40] <exp> lizmat: yes that is the point i'm making

[10:40] <exp> that it's like trying to learn french when the only authors write in french

[10:41] <lizmat> exp: that I disagree with

[10:41] <lizmat> it's like learning to cook in french, when you don't know french

[10:41] <exp> anyway i keep promising to shut up, i'll take some time to reply to any comments while i have a coffee

[10:41] <exp> lizmat: hahaha Oui :)

[10:42] <grondilu> well there are variations in the notations, but the concepts behind them are the same.  S(S(1)) is "the successor of the successor of 1"

[10:42] <lizmat> exp: and a croissant!

[10:42] <grondilu> unless you mean S as singleton, which is an other way to define integers IIRC

[10:42] <lizmat> grondilu: just like there is more than just latin  :-)

[10:42] <grondilu> point taken

[10:42] <exp> grondilu: is it "le" or "la" croissant?

[10:43] <grondilu> huh?

[10:43] <exp> the concept of gendered words doesn't exist in English

[10:43] <grondilu> oh

[10:45] <exp> when someone says "a ring is a set with binary operators" it is virtually impossible to visualise what that *actually* means

[10:45] <exp> because the vocabulary is introduced before the concepts

[10:45] <exp> because they only know how to explain the concepts in french

[10:45] <grondilu> well there is no semantics behind gendered words for non-animated objects.  They are linguistically useful as they differentiate words, especially when using pronouns.  There is no such usage in math.  I don't think so anyway.  Math concepts must have an actual meaning.

[10:47] <grondilu> exp: I disagree.  A ring has a meaning.  What I can understand is that it's hard to see it's *use*, but that is different.

[10:47] <grondilu> *use* or *purpose*.

[10:47] <exp> grondilu: there's meaning behind both types of statements

[10:47] <grondilu> but that purpose becomes clearer as you go on further.

[10:47] <exp> my point is that introducing the vocabulary before nailing down the concepts leads to this sort of gatekeeping / intractability

[10:48] <grondilu> it's basically as the saying goes "it all makes sense eventually"

[10:48] <exp> right, that's something i've been told a lot, and i hate with a passion

[10:48] <exp> i feel like everything i know and understand makes sense immediately, from the lowest possible level

[10:49] <grondilu> it's like when I learned quantum mechanics.  It's like suddenly I realized what linear algebra is good for.

[10:49] <exp> that is probably not true, but i certainly feel more confident in explaining it than anything to do with mathematics

[10:49] <exp> when i learned electronics, i did not spend 3 years being taught quantum theory

[10:49] <exp> even though that is the underlying reality

[10:50] <exp> imagine trying to understand what a resistor is but first you have to understand the many worlds interpretation lol

[10:50] <grondilu> Well for math, there's certainly a "trust us, it will make sense later" aspect to it.

[10:51] <exp> if i could summarise my argument in a sentence it would be: "Trust is, it will make sense" hasn't worked, has lead to billions in economic losses and is part of the reason almost nothing actually functions properly these days

[10:51] <exp> big claims :-p

[10:51] <exp> mostly directed at computer scientists than pure maths ;)

[10:52] <grondilu> there are certainly many people who try to vulgarize math with various degrees of success.  This approach is useful, but it never manages to teach math in a way that provides true proficiency.

[10:53] <exp> another analogy: imagine you wanted to know how a radiator worked, but first you were told you had to be able to write a navier stokes solver

[10:55] *** linkable6 left
[10:55] *** evalable6 left
[10:55] <grondilu> you don't have to know set theory to do all math.  But you do for some subjects, like crypto.  

[10:55] *** Vyrus left
[10:55] *** BabyLoveWoodrose joined
[10:55] <grondilu> there is no known way around it.

[10:56] *** linkable6 joined
[10:56] <exp> i don't have any argument against that, just that i feel it's the method of teaching that's the problem

[10:56] <exp> i do want to explore the concept i worked on to a much deeper level

[10:56] <exp> but i am just stuck, i can't afford years of study to publish a whitepaper

[10:56] <exp> and i don't know who to trust to pay to help

[10:56] *** BabyLoveWoodrose left
[10:57] <grondilu> you should have to pay, that is for sure.

[10:57] *** evalable6 joined
[10:57] <grondilu> Altough to be honest I don't know if I would be capable of learning math by myself, had I not been taught it at uni

[10:57] <exp> i was taught to basic calculus level then dropped out

[10:58] <exp> my biggest regret

[10:58] <exp> but i don't see why i should have to pay

[10:58] <grondilu> you should *NOT* have to pay, that is for sure.  <-- correction

[10:58] <exp> oh lol

[10:58] <exp> well i don't mind paying

[10:58] <exp> but there's no way to gauge if the person teaching you is a quack or accurate

[10:59] <grondilu> exp: there isn't, indeed.  In fact, I studied math mostly during two years.  Two different teachers.  The first one was awesome and it got me hooked.  The second one was terrible and it got me discouraged.

[11:00] <grondilu> s/it/he/

[11:01] <exp> perhaps i can just publish a bunch of rough descriptions with diagrams and rely on crowdsourced mathematics :D

[11:01] *** Vyrus joined
[11:01] <exp> the tldr is: if you can indeed derive pubkeys and privkeys separately, you can give a derived pubkey to a public organisation to attest on your behalf

[11:02] <exp> if you do that as part of regular account signup, then you have a network of attestations as to your identity

[11:03] <exp> if you get messaged by "exp" on any software, i can pass an arbitrary list of attestations, you can then contact that organisation and ask for a derived key which you then encrypt a message to me and supply the derivation path

[11:03] <exp> i reply with a similarly encrypted copy of the cleartext, proving our identities to each other

[11:04] <exp> this can be extended to prevent reusing passwords between accounts, and will mean any compromise bisects that identity into the compromised account and the legitimate accounts

[11:04] <exp> i need to put this on a sound theoretical footing

[11:04] <grondilu> yeah you need to put this in more details because it's hard to follow as you wrote it there

[11:05] <grondilu> what is it you want to achieve again?

[11:05] <exp> a privacy preserving system for online identity proof

[11:05] <grondilu> a decentralized one?

[11:05] <exp> it would better be described as federated i think

[11:06] <exp> for example, you can ask nickserv if i am actually 'exp'

[11:06] <grondilu> ever heard of DIDs?

[11:06] <exp> yes but i can't remember offhand the implementation

[11:07] <exp> oh this is a W3C thing, i was thinking of something Mozilla worked on

[11:07] <grondilu> well, reading the w3c spec is still on my TODO list, so I can't quite tell how it works.

[11:07] <exp> anyhow i've been talking about this since 2017 so i claim prior art :-p

[11:08] <exp> back to the example quickly, so i'm exp here, but am i exp on say the Perl IRC?

[11:09] <grondilu> I don't know, again I need to read the w3c DID spec one of these days.

[11:10] <grondilu> from what I know though, I think they're up to something good close to what you're looking for.

[11:10] <exp> so i could give you a pubkey here, you could encrypt something with that and send it to me on the Perl irc

[11:10] <exp> and if i can decrypt it, then it's me

[11:10] <exp> what if instead i gave you a 'root' pubkey, and a derivation path, same thing right?

[11:11] <grondilu> well that would be susceptible to a 3rd party attack.

[11:11] <exp> how so? we're assuming you've checked nickserv attests that i'm identified as the 'exp' account

[11:11] <grondilu> then you put your trust in the IRC server admins, no?

[11:12] <exp> yes absolutely

[11:12] <exp> but the concept is still roughly valid

[11:12] <grondilu> well, that defeats the purpose, doesn't it?

[11:12] <exp> you can get a root pubkey, do the same derivation, encrypt a message, send it to the potential identity

[11:12] <exp> right?

[11:12] <grondilu> I dunno.   Again, I need to read this spec.

[11:12] <exp> this isn't DID related

[11:13] <exp> this is me trying to quickly go over my proposal :p

[11:13] <grondilu> it's the same objective.

[11:13] <exp> i don't think it is exactly

[11:13] <grondilu> anyway, gotta go.

[11:13] <exp> no worries, thank you for the discussion

[11:13] <exp> sorry to bore this channel :)

[11:25] <lizmat> exp: no worries

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:27] *** abhinav left
[12:27] *** abhinav joined
[12:52] *** grondilu left
[13:52] *** evalable6 left
[13:52] *** bisectable6 left
[13:52] *** reportable6 left
[13:52] *** nativecallable6 left
[13:52] *** coverable6 left
[13:52] *** statisfiable6 left
[13:52] *** sourceable6 left
[13:52] *** squashable6 left
[13:52] *** releasable6 left
[13:52] *** committable6 left
[13:52] *** notable6 left
[13:52] *** shareable6 left
[13:52] *** bloatable6 left
[13:52] *** linkable6 left
[13:52] *** quotable6 left
[13:52] *** benchable6 left
[13:52] *** greppable6 left
[13:52] *** tellable6 left
[13:52] *** unicodable6 left
[13:52] *** committable6 joined
[13:52] *** squashable6 joined
[13:53] *** benchable6 joined
[13:53] *** unicodable6 joined
[13:53] *** greppable6 joined
[13:53] *** bloatable6 joined
[13:53] *** quotable6 joined
[13:53] *** coverable6 joined
[13:53] *** evalable6 joined
[13:53] *** bisectable6 joined
[13:54] *** statisfiable6 joined
[13:54] *** releasable6 joined
[13:54] *** nativecallable6 joined
[13:54] *** linkable6 joined
[13:54] *** shareable6 joined
[13:54] *** reportable6 joined
[13:54] *** sourceable6 joined
[13:55] *** tellable6 joined
[13:55] *** notable6 joined
[14:11] *** bigdata joined
[14:12] *** bigdata left
[14:13] *** Aozen joined
[14:28] *** abhinav left
[14:28] *** abhinav joined
[14:34] *** derpydoo left
[15:09] <Geth> ¦ Raku-Steering-Council/main: 52d92b871f | (Nick Logan)++ (committed using GitHub Web editor) | minutes/20230401.md

[15:09] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2023-04-01

[15:09] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/52d92b871f

[15:09] *** an3223_ left
[16:09] *** tellable6 left
[16:09] *** reportable6 left
[16:09] *** sourceable6 left
[16:09] *** unicodable6 left
[16:09] *** nativecallable6 left
[16:09] *** quotable6 left
[16:09] *** committable6 left
[16:09] *** shareable6 left
[16:09] *** squashable6 left
[16:09] *** bloatable6 left
[16:09] *** benchable6 left
[16:10] *** bloatable6 joined
[16:10] *** sourceable6 joined
[16:10] *** unicodable6 joined
[16:11] *** shareable6 joined
[16:11] *** tellable6 joined
[16:11] *** squashable6 joined
[16:11] *** reportable6 joined
[16:12] *** committable6 joined
[16:12] *** benchable6 joined
[16:12] *** quotable6 joined
[16:12] *** nativecallable6 joined
[16:33] *** teatime joined
[17:15] <Aozen> is raku stable can we build actual applications or software with it? ( i am a beginner so please bear that in mind)

[17:20] <lizmat> yes: note the list of companies at https://raku.org  (scroll down to the bottom) that use Raku in production

[17:29] <Aozen> oh cool ^^

[17:29] <Aozen> so i am planning to go all out on raku

[17:29] <Aozen> basically i wanted perl but then i learned about perl 5 and 6 and

[17:29] <Aozen> well i want to learn raku after hearing larry wall

[17:29] <perryprog> anyone wants anything after hearing larry wall

[17:29] <Aozen> and if i need to go back to perl 5 i will but i want to get good at one thing

[17:30] <Aozen> XDD oh perry that that is nice

[17:30] <Aozen> he really is very cool and i appreciate the thing he gave us

[17:30] <Aozen> i spent 2 years just deciding on a language and i ended up picking perl

[17:30] <Aozen> and brain damage from wiki and the list of all programming languages XD

[17:33] *** linkable6 left
[17:33] *** evalable6 left
[17:35] *** linkable6 joined
[17:35] *** evalable6 joined
[17:37] *** Guest66 joined
[17:39] <discord-raku-bot> <Anton Antonov> Is there any "standard"  way -- i.e. programmatically  -- of converting a grammar rule into a grammar regex? I can, of course, make some string manipulations (e.g. replacing the "correct" spaces with " \h* ", etc.) but there might an existing solution.

[17:40] <lizmat> in RakuAST that would be trivial

[17:40] *** Guest66 left
[17:41] <lizmat> as at the RakuAST level, the only difference between a rule and a regex, is really the name

[17:41] <lizmat> they're all RakuAST::RegexDeclaration objects

[17:43] <discord-raku-bot> <Anton Antonov> @lizmat Well, rule { [dark | milk]  kit kat} should be come regex { [dark | milk] \h+ kit \h+ kat}, so I would assume it is not just the name...

[17:43] <lizmat> but it is  :-)

[17:44] <discord-raku-bot> <Anton Antonov> @lizmat Great!  I will look into RakuAST::RegexDeclaration then.

[17:45] <lizmat> m: say Q|my rule foo { a b }|.AST.statements.head.expression

[17:45] <camelia> rakudo-moar 7bcf8d1bd: OUTPUT: «RakuAST::RuleDeclaration.new(␤  scope => "my",␤  name  => RakuAST::Name.from-identifier("foo"),␤  body  => RakuAST::Regex::Sequence.new(␤    RakuAST::Regex::WithWhitespace.new(␤      RakuAST::Regex::Literal.new("a")␤    ),␤    RakuAST::R…»

[17:45] <lizmat> m: no worries; say Q|my regex foo { a b }|.AST.statements.head.expression

[17:45] <camelia> rakudo-moar 7bcf8d1bd: OUTPUT: «Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace)␤    modifier (or, to suppress this warning, omit the space, or otherwise␤    change the spacing).␤    ------> my regex foo { a⏏ b }␤RakuA…»

[17:45] <lizmat> meh, please compare the AST of these two

[17:46] <lizmat> apart from the name of the class, they are the same

[17:51] <lizmat> I guess I could add a "transmogrify" method that would take the class you want, and clone everything else

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:18] *** linkable6 left
[18:18] *** linkable6 joined
[18:20] *** an3223_ joined
[18:27] *** an3223_ left
[18:33] *** an3223_ joined
[18:40] *** guifa_ joined
[18:42] *** an3223_ left
[18:43] *** guifa left
[18:54] *** an3223_ joined
[19:28] <discord-raku-bot> <Anton Antonov> @lizmat Thank you for your clarifications!

[19:29] <lizmat> you're welcome: I happened to be deep into that in the past weeks, delaying the application of significant whitespace until QAST time

[19:30] <lizmat> see https://github.com/rakudo/rakudo/commit/6ae35eb9584e3922 for the actual commit

[19:35] *** Sgeo joined
[19:54] *** squashable6 left
[19:55] *** squashable6 joined
[20:05] *** japhb left
[20:06] *** japhb joined
[20:07] *** an3223_ left
[20:08] *** an3223_ joined
[20:10] *** an3223 joined
[20:11] *** an3223_ left
[20:11] *** an3223 left
[20:11] *** an3223_ joined
[21:11] *** squashable6 left
[21:11] *** bloatable6 left
[21:11] *** tellable6 left
[21:11] *** quotable6 left
[21:11] *** unicodable6 left
[21:11] *** linkable6 left
[21:11] *** sourceable6 left
[21:11] *** shareable6 left
[21:11] *** releasable6 left
[21:11] *** notable6 left
[21:11] *** reportable6 left
[21:11] *** benchable6 left
[21:11] *** statisfiable6 left
[21:11] *** bisectable6 left
[21:11] *** nativecallable6 left
[21:11] *** committable6 left
[21:11] *** greppable6 left
[21:11] *** releasable6 joined
[21:11] *** committable6 joined
[21:11] *** quotable6 joined
[21:12] *** squashable6 joined
[21:12] *** nativecallable6 joined
[21:12] *** tellable6 joined
[21:12] *** unicodable6 joined
[21:13] *** shareable6 joined
[21:13] *** statisfiable6 joined
[21:13] *** benchable6 joined
[21:13] *** reportable6 joined
[21:13] *** linkable6 joined
[21:13] *** bloatable6 joined
[21:14] *** notable6 joined
[21:14] *** greppable6 joined
[21:14] *** bisectable6 joined
[21:14] *** sourceable6 joined
[21:45] *** sena_kun left
[22:27] <PipStuart> Greetings. Is there any decent way to write Raku code to use ncurses?

[22:28] <perryprog> There's https://github.com/azawawi/raku-ncurses

[22:28] <PipStuart> perryprog: Thanks!

[22:29] <perryprog> Yup!

[22:45] *** linkable6 left
[22:45] *** evalable6 left
[22:46] *** evalable6 joined
[22:48] *** linkable6 joined
[22:49] *** abhinav left
[22:49] *** abhinav joined
[23:07] *** an3223_ left
