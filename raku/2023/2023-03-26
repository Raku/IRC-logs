[00:00] *** reportable6 left
[00:00] *** reportable6 joined
[01:00] *** linkable6 left
[01:00] *** evalable6 left
[01:01] *** linkable6 joined
[01:01] *** evalable6 joined
[01:08] <tonyo> ergo444: did you reinstall fez or is it using precomp from the older version of rakudo?

[01:08] <tellable6> tonyo, I'll pass your message to Ergo444

[01:09] <ugexe> I doubt they’ll know the later part of that question 

[01:13] <ugexe> That being said the compiler id gets used in the precomp id I’m pretty sure so that shouldn’t be possible 

[01:22] *** rf_ left
[01:44] *** gcd joined
[01:55] *** rf joined
[02:13] <guifa_> hmm, seems to be an issue with nqp::while

[02:20] <guifa_> nm I got it.  I think something changed over the past week or two because old code even outside of RakuAST went weird

[02:43] <rf> Won 250$ at that hackathon for best technical solution lol, unfortunately wasn't able to use Raku, but I did use some Perl

[02:43] <perryprog> \o/

[02:43] <perryprog> you can send it to me, thanks

[02:50] *** rf left
[03:50] *** reportable6 left
[03:50] *** releasable6 left
[03:50] *** squashable6 left
[03:50] *** greppable6 left
[03:50] *** unicodable6 left
[03:50] *** committable6 left
[03:50] *** statisfiable6 left
[03:50] *** linkable6 left
[03:50] *** benchable6 left
[03:50] *** sourceable6 left
[03:50] *** tellable6 left
[03:50] *** nativecallable6 left
[03:50] *** coverable6 left
[03:50] *** bisectable6 left
[03:50] *** bloatable6 left
[03:50] *** quotable6 left
[03:50] *** evalable6 left
[03:50] *** notable6 left
[03:50] *** shareable6 left
[03:51] *** notable6 joined
[03:51] *** evalable6 joined
[03:51] *** coverable6 joined
[03:51] *** benchable6 joined
[03:51] *** shareable6 joined
[03:52] *** tellable6 joined
[03:52] *** statisfiable6 joined
[03:52] *** quotable6 joined
[03:52] *** linkable6 joined
[03:52] *** bloatable6 joined
[03:52] *** reportable6 joined
[03:52] *** greppable6 joined
[03:52] *** releasable6 joined
[03:52] *** sourceable6 joined
[03:53] *** nativecallable6 joined
[03:53] *** bisectable6 joined
[03:53] *** unicodable6 joined
[03:53] *** squashable6 joined
[03:53] *** committable6 joined
[04:53] *** quotable6 left
[04:53] *** squashable6 left
[04:53] *** statisfiable6 left
[04:53] *** sourceable6 left
[04:53] *** greppable6 left
[04:53] *** coverable6 left
[04:53] *** bloatable6 left
[04:53] *** nativecallable6 left
[04:53] *** benchable6 left
[04:53] *** tellable6 left
[04:53] *** committable6 left
[04:53] *** linkable6 left
[04:53] *** evalable6 left
[04:53] *** shareable6 left
[04:53] *** notable6 left
[04:53] *** releasable6 left
[04:54] *** statisfiable6 joined
[04:54] *** committable6 joined
[04:54] *** shareable6 joined
[04:54] *** squashable6 joined
[04:54] *** sourceable6 joined
[04:55] *** coverable6 joined
[04:55] *** greppable6 joined
[04:55] *** tellable6 joined
[04:55] *** notable6 joined
[04:55] *** quotable6 joined
[04:56] *** releasable6 joined
[04:56] *** bloatable6 joined
[04:56] *** linkable6 joined
[04:56] *** benchable6 joined
[04:56] *** nativecallable6 joined
[04:56] *** evalable6 joined
[05:56] *** squashable6 left
[05:56] *** benchable6 left
[05:56] *** bloatable6 left
[05:56] *** greppable6 left
[05:56] *** linkable6 left
[05:56] *** committable6 left
[05:56] *** coverable6 left
[05:56] *** evalable6 left
[05:56] *** reportable6 left
[05:56] *** unicodable6 left
[05:56] *** notable6 left
[05:56] *** nativecallable6 left
[05:56] *** shareable6 left
[05:56] *** statisfiable6 left
[05:56] *** quotable6 left
[05:56] *** releasable6 left
[05:56] *** sourceable6 left
[05:56] *** tellable6 left
[05:57] *** linkable6 joined
[05:57] *** statisfiable6 joined
[05:58] *** nativecallable6 joined
[05:58] *** releasable6 joined
[05:58] *** evalable6 joined
[05:58] *** shareable6 joined
[05:58] *** notable6 joined
[05:58] *** bloatable6 joined
[05:58] *** greppable6 joined
[05:58] *** benchable6 joined
[05:58] *** quotable6 joined
[05:58] *** sourceable6 joined
[05:59] *** reportable6 joined
[05:59] *** tellable6 joined
[05:59] *** committable6 joined
[05:59] *** unicodable6 joined
[05:59] *** coverable6 joined
[06:00] *** squashable6 joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:24] *** xinming left
[06:26] *** xinming joined
[06:50] *** teatwo joined
[06:53] *** teatime left
[07:53] *** nativecallable6 left
[07:53] *** coverable6 left
[07:53] *** evalable6 left
[07:53] *** committable6 left
[07:53] *** shareable6 left
[07:53] *** notable6 left
[07:53] *** greppable6 left
[07:53] *** quotable6 left
[07:53] *** releasable6 left
[07:53] *** squashable6 left
[07:53] *** bisectable6 left
[07:53] *** tellable6 left
[07:53] *** unicodable6 left
[07:53] *** bloatable6 left
[07:53] *** sourceable6 left
[07:53] *** linkable6 left
[07:53] *** statisfiable6 left
[07:53] *** benchable6 left
[07:53] *** reportable6 left
[07:53] *** reportable6 joined
[07:53] *** benchable6 joined
[07:53] *** coverable6 joined
[07:53] *** statisfiable6 joined
[07:54] *** notable6 joined
[07:54] *** linkable6 joined
[07:55] *** squashable6 joined
[07:55] *** nativecallable6 joined
[07:55] *** shareable6 joined
[07:55] *** bisectable6 joined
[07:55] *** committable6 joined
[07:55] *** tellable6 joined
[07:55] *** releasable6 joined
[07:55] *** quotable6 joined
[07:56] *** sourceable6 joined
[07:56] *** greppable6 joined
[07:56] *** unicodable6 joined
[07:56] *** evalable6 joined
[07:56] *** bloatable6 joined
[08:52] *** simcop2387 left
[08:52] *** perlbot left
[09:06] *** sena_kun joined
[09:07] *** oodani left
[09:08] *** oodani joined
[09:30] *** Sgeo left
[10:09] *** sarna left
[10:09] *** tejr left
[10:10] *** sarna joined
[10:32] *** derpydoo joined
[11:02] *** tejr joined
[11:10] *** sarna left
[11:11] *** sarna joined
[11:26] *** sarna left
[11:27] *** sarna joined
[11:30] *** sarna left
[11:31] *** sarna joined
[11:36] *** euandreh joined
[11:39] *** euandreh left
[11:40] *** euandreh joined
[11:47] *** sarna left
[11:48] *** sarna joined
[11:50] *** sarna left
[11:51] *** sarna joined
[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:26] *** euandreh left
[12:26] *** sarna left
[12:27] *** sarna joined
[12:27] *** euandreh joined
[12:42] <discord-raku-bot> <Anton Antonov> “[…] but I did use some Perl” — I think we should ban @rf from IRC for awhile. And/or ask him as a redemption to re-write his monad and humbugs in Perl or Python.

[12:44] <discord-raku-bot> <Anton Antonov> I personally, would be satisfied with a video of @rf manually writing — pen on paper — “Raku is better than Perl” 1000 times.

[12:45] <lizmat> :-)    but seriously?

[12:49] <discord-raku-bot> <Anton Antonov> Ok, i might have went overboard. (Especially, renaming “Hummingbird” as “humbug”.) But I think @rf should provide details about the hackathon and why Perl was the tool of choice.

[12:49] <discord-raku-bot> <Anton Antonov> … “went” == “gone”…

[13:27] *** linkable6 left
[13:27] *** evalable6 left
[13:28] <Voldenet> always pick right tool for the job, if your problem requires a lot of segfaults pick C and so on

[13:29] *** evalable6 joined
[13:29] *** linkable6 joined
[13:39] *** razetime joined
[14:39] *** linkable6 left
[14:39] *** evalable6 left
[14:40] *** evalable6 joined
[14:41] *** linkable6 joined
[14:47] <Aedil> 2/3

[14:52] *** sftp left
[14:54] *** sftp joined
[15:25] <perryprog> Voldenet, right! Like if it requires a lot of buffer overflows and other memory safety issues and avenues for security vulnerabilities, pick C.

[15:28] <discord-raku-bot> <Nemokosch> And if it requires action at a distance, pick Perl?

[15:28] <discord-raku-bot> <Nemokosch> Nah, even better: pick /bin/sh

[15:38] *** rf joined
[15:47] *** japhb left
[15:55] *** japhb joined
[16:11] <rf> Morning folks

[16:20] <tonyo> .tell rf i put ryml out into the world

[16:20] <tellable6> tonyo, I'll pass your message to rf

[16:20] <tonyo> no good docs or anything, just available via zef

[16:21] <rf> tonyo: :O

[16:21] <rf> Excited to play with it more, I haven't found really any bugs with your new fez

[16:22] <tonyo> excellent news

[16:25] <tonyo> do you have a `bundlers` key in your fez config by chance?

[16:27] *** jgaz joined
[16:37] *** razetime left
[16:37] *** razetime joined
[16:37] *** razetime left
[16:41] * [Coke] was surprised to turn on youtube today and have the home screen on the TV have an entire row of Anton Antonov.

[16:42] <[Coke]> So, Twitch VODs, MTGA, CollegeHumor/DropoutTV, and Anton.

[16:52] <tonyo> rf: i'll get around to more fez/module maintenance work sometime soon-ish..finally getting ready to launch an app and do all of the business-y happy horse that goes along with that

[17:01] *** xinming left
[17:01] <rf> tonyo: I know that feeling haha, I just joined a start-up part time

[17:02] *** xinming joined
[17:17] <guifa_> tonyo: I'm getting a 'null regex not allowed' message with fez upload today

[17:18] * guifa_ swears he must just do things in the weirdest way possible to catch so many bugs on fez hahha

[17:20] <rf> Are you on the dist branch or using the latest release @gufia_?

[17:20] <guifa_> latest release

[17:20] <guifa_> The error is with handling commented out lines in .gitignore

[17:21] <guifa_> I deleted those and it uploaded without problem

[17:29] <rf> Yeah there is some weirdness with the current release and the globber for .gitignore

[17:29] <rf> If you have time you should try the dist branch and see if it is still broken

[17:31] <guifa_> yeah, right now though it looks like there's a  server side issue — once I took away the commented lines, things appeared to upload okay, but the module's def not showing up

[17:32] <rf> Hmm, I think its mostly on fez' side but not sure @tonyo

[17:33] <guifa_> hrm this time it seemed to work

[17:35] <guifa_> oh nm, I think it was zef is having trouble finding it

[17:38] <guifa_> Looks like i need to make sure to do a zef update anytime i do a fez upload on a dependency if I up the min version on the main one

[17:39] <tonyo> guifa_: dist branch or main?

[17:40] <guifa_> tonyo: main one (e.g. when I had the error, did a zef install fez --force to make sure I was on the most up to date release)

[17:41] <guifa_> not sure if it's just from lines like `# comment` or from lines like `###############` (I think it's the latter, probably)

[17:48] <guifa_> https://raku.land/zef:guifa/Intl::Format::Number <-- finally got this updated

[17:49] <guifa_> Performance is back down to an order of a magnitude slower than .Str which is not bad, given it calls .Str 1-3 times depending on the number 

[17:51] <guifa_> But even better, there's an option to grab a RakuAST::Sub node, so you can incorporate it into other modules super easy

[18:00] *** reportable6 left
[18:01] *** reportable6 joined
[18:04] *** avuserow joined
[18:13] *** TieUpYourCamel joined
[18:15] <avuserow> hey folks. I'm finding myself writing methods where I want a parameter that is either of type Foo or undefined (usually Any). Is there a better way to get this behavior than making a subset type like `subset MaybeX where X | Any:U` ?

[18:16] *** derpydoo left
[18:17] <rf> X:U

[18:17] <rf> Or just X I think...

[18:17] <avuserow> my use case is to allow something like `method do-something(MaybeInt $a, MaybeBool $b) {...}` and then allow `self.do-something(10, Nil)` or `self.do-something(Nil, True)`. In reality both calls would be `self.do-something(%data<a>, %data<b>)`

[18:18] <tonyo> guifa_: is that in your gitignore?

[18:18] <avuserow> basically I want MaybeInt to be "integer or nil but definitely not string, list, other classes, etc"

[18:19] <rf> method bar(Foo $x) { given $x { when Foo:D { #not nil } when Foo:U { # Probably nil } } } avuserow

[18:19] <rf> Something like that I think

[18:20] <rf> https://docs.raku.org/language/haskell-to-p6#Haskell_to_Raku_-_nutshell the "Maybe" section on this page is where I got that from

[18:21] <avuserow> m: class Foo {method bar(Bool $x) {dd $x}}; Foo.new.bar(True); my $a; Foo.new.bar($a); Foo.new.bar(3) # second one fails and I want it to work, third one should fail

[18:21] <camelia> rakudo-moar d4792fdea: OUTPUT: «Bool::True␤Type check failed in binding to parameter '$x'; expected Bool but got Any (Any)␤  in method bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:21] <avuserow> unfortunately I have untyped Any here, since my input is ultimately from json :(

[18:21] <rf> I wouldnt even use types here personally

[18:23] <rf> Subset is probably your best bet

[18:26] <guifa_> tonyo: yes

[18:26] <guifa_> gitignore should ignore all lines beginning with # 

[18:31] <tonyo> it should be doing that already

[18:31] <tonyo> i'll take a look

[18:32] <tonyo> if you're game, would you mind switching to the dist branch?

[18:32] <tonyo> rf: i know ... i'm also working at a start up + have my own + trying to maintain fez

[18:33] <tonyo> and working out some stuff in zef to enable hosted or hostable private repos for orgs since it sounds like we're at the point where people are starting to use this more "in production" (not to start another debate as to what that means)

[18:43] <guifa_> tonyo: yeah.  I'll try to find a good place for a die so i'm not polluting the ecosystem lol

[18:45] <tonyo> good place for a die?

[18:47] <guifa_> "process-gitignore; apply-gitignore; die; do-upload"

[18:47] <guifa_> lol

[18:47] <tonyo> ahhhhh

[18:47] <tonyo> it should be easier in the dist branch, all of the globbing is moved to Fez::Bundle

[18:48] <tonyo> or, it's centralized there and the only enabled packager is Fez::Util::Pkg

[18:50] *** teatwo left
[18:50] *** teatwo joined
[18:50] <discord-raku-bot> <Anton Antonov> @Coke "was surprised to turn on youtube today and have the home screen on the TV have an entire row of Anton Antonov." -- Hmmm... a video or two would be not too unexpected, but entire row makes think there is something else at play...

[18:51] <discord-raku-bot> <Anton Antonov> @guifa_ "https://raku.land/zef:guifa/Intl::Format::Number <-- finally got this updated" -- On related note, I recently implemented parsing inf Azerbaijani numeric word forms.

[18:52] <guifa_> that reminds me I need to do RBNF and see if there's a way that I can somehow make it go in reverse (shoudl be mostly feasible)

[18:55] <discord-raku-bot> <Anton Antonov> @guifa_ You mean, from Raku source code of grammars generate corresponding BNF?

[18:56] <guifa_> Sort of.  So in CLDR they have a set of Rule Based Number Formatters.  But they're designed to go from an numeric value to a string.  But it should be possible to generate a Raku grammar that does that parses the reverse, and then produces numeric value.

[18:58] <guifa_> https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1RuleBasedNumberFormat.html#details 

[18:59] <discord-raku-bot> <Anton Antonov> I see -- yeah, seems useful.

[19:13] *** guifa joined
[19:16] *** Sgeo joined
[19:16] *** guifa_ left
[19:31] *** jpn joined
[19:51] *** initrd joined
[20:00] *** jpn left
[20:03] *** jpn joined
[20:06] *** tea3po joined
[20:10] *** teatwo left
[20:16] *** lichtkind joined
[20:30] *** jpn left
[20:36] <[Coke]> anton - Your channel was the row.

[20:39] <discord-raku-bot> <Anton Antonov> @Coke — ok. 🙂

[21:18] <rf> tonyo: Yeah I get it, startups are hard to keep up with cant imagine working in 2, I work for a enterprise and a startup on the side its fairly manageable

[21:25] *** raiph joined
[21:25] *** lichtkind left
[21:48] *** sena_kun left
[22:12] *** jgaz left
[22:18] *** uzl[m] joined
[22:27] *** initrd left
[23:16] *** rf left
[23:25] *** rf joined
[23:42] *** raiph left
[23:44] <discord-raku-bot> <Anton Antonov> @rf And not teaching Haskel as a second side?

[23:49] <rf> I teach new technologies to my enterprise job, which included Haskell a while ago :)

[23:59] <discord-raku-bot> <Anton Antonov> Corrupting the youth?!

[23:59] <rf> Absolutely!

