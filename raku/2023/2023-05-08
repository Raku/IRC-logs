[00:00] *** reportable6 left
[00:03] *** reportable6 joined
[00:55] <uzl[m]> m: loop (my $i = 0; $i < 10; $i++) { say $i; }; loop (my $i = 10; $i < 20; $i++) { say $i; }

[00:55] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$i'.‚ê§    at <tmp>:1‚ê§    ------>  $i < 10; $i++) { say $i; }; loop (my $i‚èè = 10; $i < 20; $i++) { say $i; }‚ê§0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚Ä¶¬ª

[00:56] <uzl[m]> > Redeclaration of symbol '$i'.

[00:56] <uzl[m]> Isn't the loop variable lexically-scoped to the loop's block?

[01:03] *** linkable6 left
[01:03] *** evalable6 left
[01:05] *** linkable6 joined
[01:06] *** evalable6 joined
[01:58] *** rf left
[02:16] *** tea3po joined
[02:18] *** teatwo left
[02:19] *** tea3po left
[02:19] *** tea3po joined
[03:19] *** coverable6 left
[03:19] *** evalable6 left
[03:19] *** reportable6 left
[03:19] *** linkable6 left
[03:19] *** statisfiable6 left
[03:19] *** committable6 left
[03:19] *** releasable6 left
[03:19] *** notable6 left
[03:19] *** greppable6 left
[03:19] *** tellable6 left
[03:19] *** sourceable6 left
[03:19] *** quotable6 left
[03:19] *** nativecallable6 left
[03:19] *** benchable6 left
[03:19] *** squashable6 left
[03:19] *** shareable6 left
[03:19] *** bisectable6 left
[03:19] *** bloatable6 left
[03:19] *** unicodable6 left
[03:20] *** shareable6 joined
[03:20] *** greppable6 joined
[03:21] *** linkable6 joined
[03:21] *** nativecallable6 joined
[03:21] *** evalable6 joined
[03:21] *** coverable6 joined
[03:21] *** benchable6 joined
[03:21] *** notable6 joined
[03:21] *** tellable6 joined
[03:21] *** reportable6 joined
[03:21] *** statisfiable6 joined
[03:21] *** committable6 joined
[03:22] *** quotable6 joined
[03:22] *** sourceable6 joined
[03:22] *** bisectable6 joined
[03:22] *** unicodable6 joined
[03:22] *** releasable6 joined
[03:22] *** bloatable6 joined
[03:22] *** squashable6 joined
[03:53] <Voldenet> m: loop (my $i = 0; $i < 10; $i++) {  }; say $i

[03:53] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´10‚ê§¬ª

[03:55] <Voldenet> > In case the initializer involves a variable declaration, the variable is declared as a lexical variable in the loop's outer or containing scope so that it can be used in code following the loop statement.

[04:22] *** linkable6 left
[04:22] *** evalable6 left
[04:23] *** linkable6 joined
[04:24] *** evalable6 joined
[04:55] *** deoac left
[05:01] <avuserow> Xliff: thanks for the tips about proto methods for subclassing `new`, I'm much happier with this code now

[05:01] <tellable6> avuserow, I'll pass your message to Xliff

[05:51] *** abraxxa joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:50] *** sftp joined
[07:03] *** frost left
[07:28] *** tea3po left
[07:30] *** teatime joined
[07:33] *** sena_kun joined
[07:48] *** Sgeo left
[08:36] *** jpn joined
[09:20] *** derpydoo left
[09:35] *** buffet left
[09:36] *** buffet joined
[10:36] *** quotable6 left
[10:36] *** releasable6 left
[10:36] *** bloatable6 left
[10:36] *** unicodable6 left
[10:36] *** statisfiable6 left
[10:36] *** committable6 left
[10:36] *** shareable6 left
[10:36] *** notable6 left
[10:36] *** tellable6 left
[10:36] *** coverable6 left
[10:36] *** bisectable6 left
[10:36] *** sourceable6 left
[10:36] *** nativecallable6 left
[10:36] *** squashable6 left
[10:36] *** reportable6 left
[10:36] *** benchable6 left
[10:36] *** linkable6 left
[10:36] *** evalable6 left
[10:36] *** greppable6 left
[10:36] *** bisectable6 joined
[10:37] *** unicodable6 joined
[10:37] *** benchable6 joined
[10:37] *** statisfiable6 joined
[10:37] *** sourceable6 joined
[10:37] *** greppable6 joined
[10:37] *** notable6 joined
[10:37] *** shareable6 joined
[10:38] *** reportable6 joined
[10:38] *** tellable6 joined
[10:38] *** releasable6 joined
[10:38] *** committable6 joined
[10:38] *** evalable6 joined
[10:38] *** coverable6 joined
[10:39] *** linkable6 joined
[10:39] *** quotable6 joined
[10:39] *** bloatable6 joined
[10:39] *** nativecallable6 joined
[10:39] *** squashable6 joined
[11:39] *** statisfiable6 left
[11:39] *** notable6 left
[11:39] *** benchable6 left
[11:39] *** unicodable6 left
[11:39] *** squashable6 left
[11:39] *** committable6 left
[11:39] *** evalable6 left
[11:39] *** sourceable6 left
[11:39] *** releasable6 left
[11:39] *** linkable6 left
[11:39] *** quotable6 left
[11:39] *** tellable6 left
[11:39] *** nativecallable6 left
[11:39] *** reportable6 left
[11:39] *** bloatable6 left
[11:39] *** shareable6 left
[11:39] *** bisectable6 left
[11:39] *** greppable6 left
[11:39] *** coverable6 left
[11:40] *** bisectable6 joined
[11:40] *** linkable6 joined
[11:40] *** reportable6 joined
[11:40] *** squashable6 joined
[11:40] *** benchable6 joined
[11:40] *** coverable6 joined
[11:41] *** bloatable6 joined
[11:41] *** sourceable6 joined
[11:41] *** notable6 joined
[11:41] *** releasable6 joined
[11:41] *** shareable6 joined
[11:42] *** nativecallable6 joined
[11:42] *** evalable6 joined
[11:42] *** greppable6 joined
[11:42] *** unicodable6 joined
[11:42] *** committable6 joined
[11:42] *** statisfiable6 joined
[11:42] *** quotable6 joined
[11:42] *** tellable6 joined
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:37] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/05/08/2023-19-pakku/

[13:00] *** linkable6 left
[13:00] *** evalable6 left
[13:01] *** linkable6 joined
[13:01] *** evalable6 joined
[13:39] *** rf joined
[13:40] <rf> Morning folks :)

[13:42] <lizmat> rf o/

[13:57] *** jgaz left
[14:16] *** teatime left
[14:16] *** teatime joined
[14:18] *** kjp left
[14:48] *** kurahaupo joined
[14:52] <ugexe> fwiw we've had recommendation managers before, i.e. for metacpan when jdv ran the raku version. but they aren't a great fit because they either have to query for one distribution at a time (very inefficient) or they return multi distributions but then aren't cooperative with other recommendation managers

[14:53] <ugexe> see: https://perl6advent.wordpress.com/2016/12/16/day-16-the-meta-spec-distribution-and-compunitrepository-explained-ish/#fn1

[15:10] *** kjp joined
[15:29] *** Sgeo joined
[15:49] *** guifa_ joined
[15:50] *** guifa left
[15:50] <ugexe> For the raku core summit I think I might try to add options for disabling (or explicitly setting) the repositories that get loaded by default. Then a `--install-to=/myapp/myapps-libs --contained` + `raku -I /myapp/myapps-libs bin/my-app` will give you application isolated module loading.

[15:51] <ugexe> Why does this matter? One example would be runtime loading of modules -- without the ability to disable the default repositories a plugin that is explicitly not installed in `/myapp/myapps-libs` could still be loaded through the `site` repo. This means other users can unknowingly affect the runtime behavior of other code.

[15:52] *** Xliff joined
[15:54] <ugexe> It kind of sucks that the Staging repository does not work with custom install locations, but imo custom install locations are more important in a production environment where you don't have application specific raku installations

[15:55] <ugexe> and unfortunately i have no idea how to make Staging work with custom install locations ü§∑

[15:57] *** hythm joined
[15:58] <ugexe> What I'm thinking is some sort of CompUnit::Repository::Mask like repo but included in the core, so one could do like RAKULIB="/myapp/myapps-lib,mask#foo"

[16:03] *** abraxxa left
[16:14] <hythm> "but they aren't a great fit because they either have to query for one distribution at a time (very inefficient)" Isn't this more efficient than downloading entire ecosystem META.json file (could be multiple ecosystems as well) everytime one needs to install a distribution. especially as these downloaded files grows larger with time

[16:14] <ugexe> you shouldnt be downloading it every time for one, and no not really

[16:14] <ugexe> it is true a different index format will likely be needed as the number of distributions grow

[16:15] <ugexe> but its still just downloading an index

[16:23] <ugexe> now that i think about it zef used to handle the p6c and cpan ecosystems via git if it was configured as such, so even updating the index did not require redownloading most of it. maybe fez should provide snapshots to a git repo

[16:28] <tonyo> what do you mean by provide snapshots?

[16:28] <tonyo> we had a dist query system built into the early versions of the ecosystem, i could look at resurrecting that.

[16:31] <tonyo> also happy to look at a more efficient way to pass off that meta

[16:31] *** jgaz joined
[16:33] <ugexe> i'm not really sure its a problem yet, but if https://360.zef.pm/index.json also had like https://360.zef.pm/index.git, then instead of fetching index.json when updating the index clients could `git pull` that repo

[16:34] <ugexe> a better index format than array of meta6 json hashes is a better thing to focus on imo though

[16:36] <ugexe> 99% of the time the index is searched i dont care about i.e. the meta6 description. something like that can be at the end of a file where it never even needs to get read in for most cases

[17:11] *** kurahaupo left
[17:11] *** kurahaupo joined
[17:12] <tonyo> what would be in that repo?

[17:13] <tonyo> or is that just to pull diffs of the json file?

[17:23] <lizmat> perhaps I should take https://raku.land/zef:lizmat/JSON::Fast::Hyper  and put that in Rakudo's from_json logic?

[17:24] <lizmat> it's usually N-1 x as fast (where N is the number of available cores)

[17:24] <ugexe> the problem is json isn't a good format for this

[17:26] <ugexe> for instance: JSON::Fast::Hyper still leaves "description" getting parsed for every line

[17:26] <tonyo> i also have the thing we worked on at PTS that just indexes a json file

[17:27] <tonyo> i could rewire that so that zef doesn't need to reparse the entire thing

[17:28] <ugexe> its true that clients could just implement their own index format locally, but i think it'd be better to have one that rakudo itself could parse and theoretically be used as a CURI that doesn't rely on sha1 file system lookups to be fast

[17:29] <tonyo> are you suggesting a binary format?

[17:29] <tonyo> or just _not json_?

[17:29] <ugexe> that'd be great but i dunno how that'd be done in a core friendly way

[17:31] <tonyo> something chunked like tar (where the block sizes are static) would make a slurp/split/distribute model easy enough

[17:32] <lizmat> I guess any format with \0 as a delimiter, and a \0\n at the end of each record, would do fine

[17:32] <lizmat> you could .lines.hyper that

[17:33] <ugexe> an overly naive example would be an ini file where there is a [namespaces] with lines like Foo::Bar=SomeDist:ver<1.0>\nFoo::Bar=SomeOtherDist:ver<1.0>, basically mapping provides namespaces to a distribution. for most queries of this index it will only ever need to parse that [namespaces] section, and not later sections that have the other, less often needed information mappings like description

[17:33] <tonyo> the problem with variable length records is that you still have a linear parsing time

[17:35] <tonyo> guess that's still better than what we have, i can work on something like that.

[17:36] <lizmat> https://metacpan.org/pod/Sereal perhaps too general, but maybe still a source of inspiration?

[17:36] <tonyo> ugexe: is just the dist str needed?

[17:38] <ugexe> well i think it'd probably be better to not use the dist str, but something easier to parse as well

[17:38] <ugexe> that was just a naive example

[17:39] <ugexe> but we want $namespace-that-can-be-queried mapped to any distributions that can contain it (although for duplicate $namespace-that-can-be-queried i'd probably just put them on their own line each pointing at a different distribution)

[17:39] <tonyo> i thought we needed the description for search

[17:40] <ugexe> well yes, you would use this mapping to lookup the description from another slower part of the index

[17:40] <tonyo> are you suggesting that the index reverses, in that we have one key for each provides per dist that maps the dists that provide it?

[17:41] <ugexe> i dunno, just that the index should be optimized for doing exact namespace lookups quickly while still being able to look up other information like description as needed

[17:42] <ugexe> when doing `zef install Foo` it only ever queries the index for exact namespaces

[17:42] <ugexe> yet we still had to parse description for Foo and every dependency

[17:44] <tonyo> gotcha, i'll think about the best way to do that and integrate it

[17:45] <ugexe> write a dependency-less pure raku sqlite driver!

[17:45] <tonyo> it requires tooling changes which gives me an excuse to redo a lot of the backend stuff for the eco

[17:45] <tonyo> that was going to be my other suggestion

[17:45] <tonyo> downloadable sqlite db seems like the easiest option

[17:46] <ugexe> well a pure raku sqlite driver could also exist and be used in the core

[17:46] <tonyo> agreed

[17:47] <ugexe> assuming a pure raku sqlite driver can be written at all :P

[17:47] <tonyo> it looks like it's mostly just c/++ bindings

[17:48] <tonyo> which i guess can be assumed when building raku

[17:49] <tonyo> not really part of the spec though and would require libsqlite to use raku

[17:54] <lizmat> I guess a pure Raku sqlite would talk the protocol, and not need NativeCall or a library

[17:59] *** human_blip left
[17:59] <[Coke]> in addition to a possible binary format, could be organized differently (non desc data first? desc data in a separate file?)

[18:00] *** human_blip joined
[18:00] *** reportable6 left
[18:00] <[Coke]> I like the git idea but that's another dep also

[18:03] *** reportable6 joined
[18:07] <Xliff> m: 'sub a ($a, $b, $c) { say &?ROUTINE.signature.list }; a(1, 2, "bye" )';

[18:07] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant string "sub a ($a, $b, $c) { say &?ROUTINE.signature.list }; a(1, 2, \"bye\" )" in sink context (line 1)‚ê§¬ª

[18:07] <tellable6> 2023-05-08T05:01:45Z #raku <avuserow> Xliff: thanks for the tips about proto methods for subclassing `new`, I'm much happier with this code now

[18:07] <Xliff> m: sub a ($a, $b, $c) { say &?ROUTINE.signature.list }; a(1, 2, "bye" )';

[18:07] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> OUTINE.signature.list }; a(1, 2, "bye" )‚èè';‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement‚Ä¶¬ª

[18:08] <Xliff> m: sub a ($a, $b, $c) { say &?ROUTINE.signature.list }; a(1, 2, "bye" );

[18:08] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´(($a, $b, $c))‚ê§¬ª

[18:08] <Xliff> How can I get the capture object of a sub? I want raku to print "1, 2, "bye" in sub a

[18:08] <Xliff> I should know this. Brain on strike

[18:19] <lizmat> sub a(|c) { }

[18:19] <lizmat> sub a(|c) { dd c }

[18:26] <lizmat> Xliff ^^

[19:03] *** linkable6 left
[19:03] *** evalable6 left
[19:04] *** evalable6 joined
[19:05] *** linkable6 joined
[19:57] *** jpn left
[20:17] *** Vyrus left
[20:17] *** RonaldR34g4m joined
[20:44] <uzl[m]> m: loop (my $i = 0; $i \< 10; $i++) { say $i; }; loop (my $i = 10; $i \< 20; $i++) { say $i; }

[20:44] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Malformed loop spec‚ê§at <tmp>:1‚ê§------> loop (my $i = 0; $i‚èè \< 10; $i++) { say $i; }; loop (my $i =‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[20:45] <Xliff> lizmat++: Thanks. Is there any way to do that with a block and WITHOUT a Capture?

[20:45] <Xliff> You can't get the args from a Signature, can you?

[20:45] <Xliff> Arg values, rather.

[20:46] <uzl[m]> m: loop (my $i = 0; $i < 10; $i++) { say $i; }; loop (my $i = 10; $i < 15; $i++) { say $i; }

[20:46] <camelia> rakudo-moar 7bbc2f991: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$i'.‚ê§    at <tmp>:1‚ê§    ------>  $i < 10; $i++) { say $i; }; loop (my $i‚èè = 10; $i < 15; $i++) { say $i; }‚ê§0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§¬ª

[20:46] <uzl[m]> > Redeclaration of symbol '$i'.

[20:46] <uzl[m]> Isn't the loop variable lexically-scoped to the loop's block?

[20:49] <[Coke]> someone just asked that earlier.

[20:49] <[Coke]> https://docs.raku.org/language/control#loop

[20:50] <discord-raku-bot> <Nemokosch> by your terms, no, it isn't

[20:50] <[Coke]> the answer is no, it's the outer block.

[20:50] <discord-raku-bot> <Nemokosch> by either terms, to be honest, it isn't

[20:50] <discord-raku-bot> <Nemokosch> arguably "the loop's block" would be the only block involved, i.e the one that contains say $i

[20:51] <[Coke]> "In case the initializer involves a variable declaration, the variable is declared as a lexical variable in the loop's outer or containing scope so that it can be used in code following the loop statement. "

[20:52] <discord-raku-bot> <Nemokosch> on the other hand, if you mean that the "loop's block" is the block that contains the loop, then yes, $i is declared in the loop's block - which happens to be the block of both loops, hence redeclaration üòõ

[20:57] *** jpn joined
[21:04] *** sena_kun left
[21:39] <lucs> Can I has different comment character? https://gist.github.com/lucs/9eecaec406960345c51f7558427a7388

[21:40] <lucs> If that's possible, I have something more interesting in mind that would use the technique.

[21:44] <[Coke]> lucs: depending on how the grammar is written, you can make a slang that extends the definition of comment.

[21:45] <lucs> Hmm... Do you know where I can read up on how to make a slang?

[21:46] <[Coke]> something like https://github.com/coke/raku-slang-date/blob/main/lib/Slang/Date.rakumod - I added a new type of literal, you can (probably) add a variant of comment.

[21:46] <lucs> Thanks, I'll check it out.

[21:47] <[Coke]> it's not direct; you need to figure how the bit of grammar to override, then the QAST to replace it with... and all that is  obsoleted by rakuast

[21:48] <lucs> Yeah, I kind of expected it not to be exactly trivial to implement :)

[21:49] <[Coke]> ah, nifty, token comment:sym<#>  - so you can probably add another sym in your mixin

[21:50] <[Coke]> afk

[21:52] <guifa_> Also

[21:52] <guifa_> look up the module basic test

[21:52] <guifa_> https://github.com/alabamenhu/BasicTest/tree/main

[21:53] <guifa_> What are you wanting to do exactly in your slang?

[21:53] *** jpn left
[21:54] <guifa_> (if you're aiming for anything more than that Date slang, my BASIC test, or the SQL::Inline module, I'd recommend waiting a bit longer because when RakuAST is fully finished slangs will be MUCH easier)

[21:55] <lucs> The idea would be to have a module like PrintDebug, exporting a sub like PRINT-DEBUG(), and it could be toggled on or off, and when off, the lines having those PRINT-DEBUG lines would be totally ignored, like comments.

[21:56] <lucs> It's easy to make the sub not do anything, but I'm not sure how I could make it not evaluate its arguments, even if it does nothing with them.

[21:56] <guifa_> hmm, I think you should be able to do that as is.  Just decide whether to install a noop or an actual sub call.  Sub calls are fairly simple

[21:58] <lucs> guifa_: You see what I mean about the arguments?

[21:59] <guifa_> yes, what I just said holds.  Because if you don't install the sub call, the arguments wouldn't be evaluated

[22:00] <lucs> Oh, interesting.

[22:00] <guifa_> the sub call has an argument list that holds things that would be evaluating arguments

[22:04] <guifa_> the only catch would be that if it's a sub, it's best to probably transform it into a `sinkn Nil` statement or something instead

[22:04] <guifa_> otherwise something might not compile quite right on the backend

[22:12] <lizmat> fwiw, I think the mechanism that handles DOC phasers could be useful for this

[22:12] <lizmat> too bad it doesn't work yet 100% on RakuAST

[22:53] *** evalable6 left
[22:53] *** linkable6 left
[22:54] *** linkable6 joined
[22:55] *** evalable6 joined
[23:55] *** hythm left
