[00:38] *** lichtkind__ left
[00:40] *** constxqt left
[00:45] *** constxqt joined
[00:53] *** constxqt left
[01:19] *** constxqt joined
[01:25] *** constxqt left
[01:39] *** constxqt joined
[01:48] *** constxqt left
[02:12] *** constxqt joined
[02:18] *** constxqt left
[02:23] <elcaro> The linux download on https://rakudo.org/downloads is halting at 16.2M (~82%)

[02:24] *** constxqt joined
[02:29] *** constxqt left
[02:37] *** constxqt joined
[02:47] <coleman> can you paste the exact link you're using elcaro

[02:47] *** constxqt left
[02:50] <coleman> i can't reproduce

[02:54] *** constxqt joined
[02:55] *** hulk joined
[02:57] *** kylese left
[03:08] *** constxqt left
[03:09] *** constxqt joined
[03:13] *** Voldenet_ joined
[03:13] *** constxqt left
[03:14] *** Voldenet left
[03:14] *** Voldenet_ is now known as Voldenet

[03:24] *** constxqt joined
[03:29] *** constxqt left
[03:30] *** hulk left
[03:34] *** kylese joined
[03:41] *** constxqt joined
[03:46] *** constxqt left
[03:57] *** constxqt joined
[04:01] *** constxqt left
[04:02] *** constxqt joined
[04:12] *** constxqt left
[04:13] *** Voldenet_ joined
[04:14] *** Voldenet left
[04:14] *** Voldenet_ is now known as Voldenet

[04:15] *** constxqt joined
[04:26] *** constxqt left
[04:53] *** constxqt joined
[04:59] *** constxqt left
[05:11] *** constxqt joined
[05:15] *** constxqt left
[05:29] *** constxqt joined
[05:40] *** constxqt left
[05:40] *** constxqt joined
[05:45] <elcaro> https://rakudo.org/dl/rakudo/rakudo-moar-2023.11-01-linux-x86_64-gcc.tar.gz

[05:48] <elcaro> wget from multiple linux boxes gets "Connection closed" after 16M. Also tried downloading via Firefox on Windows and it also fails

[05:48] *** avuserow joined
[05:50] *** constxqt left
[05:52] <avuserow> elcaro: works for me on two different ISPs. Though if I download via IPv6 it is slow (~500KB/s vs ~60MB/s on IPv4), so maybe try `wget -4 ...`?

[06:19] *** constxqt joined
[06:24] *** constxqt left
[06:36] *** constxqt joined
[06:41] *** constxqt left
[06:58] *** constxqt joined
[07:03] *** constxqt left
[07:11] *** dbonnafo left
[07:11] *** dbonnafo joined
[07:15] *** constxqt joined
[07:19] *** dbonnafo left
[07:19] *** dbonnafo joined
[07:25] *** constxqt left
[07:42] *** constxqt joined
[07:49] *** constxqt left
[08:06] *** constxqt joined
[08:16] *** constxqt left
[08:26] <Geth> ¦ advent/main: 7593e0e9e2 | (Nigel Hamilton)++ (committed using GitHub Web editor) | raku-advent-2023/authors.md

[08:26] <Geth> ¦ advent/main: Update authors.md

[08:26] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/7593e0e9e2

[08:38] *** constxqt joined
[08:43] *** dbonnafo left
[08:47] *** constxqt left
[08:49] *** dbonnafo joined
[08:51] *** lichtkind__ joined
[08:52] *** dbonnafo left
[08:54] *** jpn joined
[08:54] *** dbonnafo joined
[09:00] *** constxqt joined
[09:05] *** constxqt left
[09:08] *** jpn left
[09:29] *** constxqt joined
[09:34] *** constxqt left
[09:44] *** sena_kun joined
[09:58] *** japhb left
[10:02] *** constxqt joined
[10:07] *** constxqt left
[10:07] *** jpn joined
[10:16] *** jpn left
[10:20] *** constxqt joined
[10:25] *** constxqt left
[10:37] *** constxqt joined
[10:42] *** constxqt left
[10:53] *** sena_kun left
[11:00] *** constxqt joined
[11:02] *** jpn joined
[11:04] *** constxqt left
[11:09] *** jpn left
[11:35] *** constxqt joined
[11:35] *** Sgeo left
[11:38] <elcaro> avuserow: Already using IPv4. Doesn't even connect with IPv6. Dunno if it's related, but I've tried from 3 different boxes, different ISP's, but all in Australia

[11:40] *** constxqt left
[11:44] <elcaro> If it's any help, trying to download with curl also fails with the error: 'curl: (92) HTTP/2 stream 0 was not closed cleanly: INTERNAL_ERROR (err 2)'

[11:45] <kjp> wget also fails from here, also Australia

[11:47] <elcaro> Looking up that error, first SO result suggests it could be an issue with 'proxy_buffering' in nginx, or maybe Application Load Balance (ALB) on AWS.

[12:01] *** abraxxa-home joined
[12:09] *** constxqt joined
[12:14] *** constxqt left
[12:23] *** lichtkind_ joined
[12:26] *** lichtkind__ left
[12:32] *** abraxxa-home left
[12:33] *** abraxxa-home joined
[12:35] *** constxqt joined
[12:44] *** constxqt left
[12:50] *** constxqt joined
[12:59] *** japhb joined
[13:04] *** japhb left
[13:19] *** jpn joined
[13:24] *** jpn left
[14:10] *** japhb joined
[14:17] *** japhb left
[14:28] *** vrurg_ is now known as vrurg

[14:43] *** jpn joined
[14:50] *** sena_kun joined
[15:29] *** jpn left
[16:05] *** jpn joined
[16:10] *** jpn left
[16:50] *** jpn joined
[16:55] *** jpn left
[16:58] *** Sgeo joined
[17:10] <avuserow> More data points on (pre-)compilation speed: if I make an empty A.rakumod and a B.rakumod that imports A, and change A.rakumod (to force recompilation), `use B` takes ~500ms longer than `use A`. With RAKUDO_NO_PRECOMPILATION=1, then it's only a ~18ms difference. This is on 2023.11 on older hardware; on current hardware all the numbers are roughly half as much

[17:11] <avuserow> It seems like there is may be some potential optimization opportunities. I see that https://github.com/rakudo/rakudo/issues/4845 might be potentially related, but I'll file a new ticket and cross-reference.

[17:12] <ab5tract> avuserow++

[17:15] <avuserow> Once I get to actual code, the 500ms difference between the A and B scenarios seems to increase. In my actual application it's more like 1.5s added. I have a few refactoring opportunities that would reduce the amount of work that compilation has to do (depending on what changed), but not until this is improved

[17:32] *** jpn joined
[17:39] *** jpn left
[18:04] *** japhb joined
[18:19] *** japhb left
[18:19] *** japhb joined
[18:42] *** jpn joined
[18:43] *** japhb left
[18:47] *** jpn left
[18:48] *** japhb joined
[18:56] *** japhb left
[18:57] *** japhb joined
[18:59] *** jpn joined
[19:18] *** jpn left
[19:52] <avuserow> I think a cause of slowness in precomp might be process startup time since it uses additional rakudo processes to compile. `raku -e'{}'` is 40% of the additional time between A and B above, on both computers. Unfortunately the profiling options don't seem to matter for the inner processes (and I don't even know if it's something that can be profiled?)

[20:02] *** melezhik joined
[20:03] <melezhik> sparrowci build with PAKKU_VERBOSE=debug looks a bit weird for me - https://ci.sparrowhub.io/report/3824

[20:10] *** melezhik left
[21:48] *** sena_kun left
[21:49] *** sena_kun joined
[21:54] *** rakuteen joined
[21:56] *** rakuteen left
[22:23] *** AlexDaniel joined
[22:23] <AlexDaniel> I've never seen 3 almost identical PRs for the same module XD  https://github.com/Util/Perl6-Math-Quaternion/pulls

[22:24] <AlexDaniel> the same issue I mean

[22:24] <discord-raku-bot> <antononcube> weekly:https://rakuforprediction.wordpress.com/2023/11/25/ai-vision-via-raku/

[22:24] <notable6> antononcube, Noted! (weekly)

[22:56] *** sena_kun left
[23:01] <avuserow> I have a proof of concept of an environment variable that lets Raku use existing compiled sources but not generate new ones. This makes reloading the code much faster when changing one dependent module. It's 2x faster when changing and reloading my actual application code.

[23:02] <avuserow> My idea is that in dev mode, I would precompile everything, then start the service with NO_NEW_PRECOMP, then run precomp in the background for next time. This should improve timing of restarting the service for developers at the cost of doing redundant compilation work.

[23:25] *** AlexDaniel left
[23:29] <ugexe> In process precomp is a known missing and welcome feature fwiw 

