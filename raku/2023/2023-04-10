[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:10] *** codesections left
[00:10] *** codesections1 joined
[00:10] <tonyo> m: my Array[Int] $x .=new; $x.push(2); dd $x # Rog:

[00:10] <camelia> rakudo-moar e68322dbc: OUTPUT: «Array[Int $x = Array[Int].new(2)␤»

[00:10] *** Sauvin left
[00:10] *** Sauvin joined
[00:12] *** codesections1 is now known as codesections

[00:16] <discord-raku-bot> <pelevesque> Has anyone here used an AI to generate some Raku code?

[00:21] *** jgaz left
[00:47] <MasterDuke> a couple people have mentioned doing it. could search the irc logs to find out exactly who

[01:05] <guifa> Array[Int].new(……)

[01:17] *** teatime left
[01:17] *** teatime joined
[01:33] *** epony left
[01:34] *** Sauvin left
[01:46] *** epony joined
[02:10] *** teatime left
[02:10] *** teatime joined
[02:32] <tonyo> pelevesque: i tried to get gpt to write the deflate algorithm but not much luck with it

[03:02] <guifa> Sweet, all formatters are done but for the named timezone ones.  So close

[03:10] *** evalable6 left
[03:10] *** linkable6 left
[03:10] *** linkable6 joined
[03:11] *** evalable6 joined
[03:26] *** Bocaneri joined
[03:26] *** Bocaneri is now known as Guest1086

[03:26] *** Guest1086 is now known as Sauvin_Too

[03:46] *** Sauvin_Too is now known as Sauvin

[04:46] *** greppable6 left
[04:46] *** reportable6 left
[04:46] *** coverable6 left
[04:46] *** benchable6 left
[04:46] *** committable6 left
[04:46] *** releasable6 left
[04:46] *** sourceable6 left
[04:46] *** unicodable6 left
[04:46] *** statisfiable6 left
[04:46] *** linkable6 left
[04:46] *** tellable6 left
[04:46] *** bisectable6 left
[04:46] *** squashable6 left
[04:46] *** bloatable6 left
[04:46] *** notable6 left
[04:46] *** shareable6 left
[04:46] *** evalable6 left
[04:46] *** nativecallable6 left
[04:46] *** quotable6 left
[04:46] *** releasable6 joined
[04:46] *** bisectable6 joined
[04:46] *** unicodable6 joined
[04:46] *** shareable6 joined
[04:47] *** greppable6 joined
[04:47] *** squashable6 joined
[04:47] *** tellable6 joined
[04:47] *** bloatable6 joined
[04:48] *** sourceable6 joined
[04:48] *** notable6 joined
[04:48] *** benchable6 joined
[04:48] *** statisfiable6 joined
[04:48] *** coverable6 joined
[04:48] *** nativecallable6 joined
[04:49] *** committable6 joined
[04:49] *** evalable6 joined
[04:49] *** linkable6 joined
[04:49] *** quotable6 joined
[04:49] *** reportable6 joined
[05:18] *** holyghost joined
[05:18] *** holyghost left
[05:56] *** Sgeo_ joined
[06:00] *** Sgeo left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:12] *** holyghost joined
[06:14] *** eseyman_ left
[06:17] *** manu_ joined
[06:19] *** manu_ is now known as eseyman

[06:51] *** jpn joined
[07:08] *** Sgeo_ left
[07:12] *** jpn left
[07:19] *** jpn joined
[07:50] *** sena_kun joined
[07:51] <Voldenet> pelevesque: I've tried generating raku code and it notoriously failed in human-like way

[07:52] <Voldenet> for instance, I've seen this: `sub x(Iterable $iterable) { for $iterable -> $item { … }}`

[08:20] <Voldenet> also, I've failed to convince chatgpt what does 'lazy' mean, apparently:

[08:20] <Voldenet> > You are correct that @($input) does not work with lazy arrays. Instead, we can use elems($input) to get the number of elements in $input.

[08:26] *** jpn left
[08:26] *** holyghost left
[08:29] *** jpn joined
[08:40] *** jpn left
[08:41] *** jpn joined
[09:36] *** jpn left
[09:40] <Voldenet> otoh, openai requested an api for CArray: `my CArray[epoll_event] $events .= new; $events.elems = 10;` :>

[09:48] *** jpn joined
[10:11] *** ProperNoun left
[10:13] *** ProperNoun joined
[10:44] *** jpn left
[10:47] *** Censor joined
[11:28] <discord-raku-bot> <Anton Antonov> @Voldenet Which model of OpenAI are you using?

[11:47] *** linkable6 left
[11:47] *** evalable6 left
[11:49] *** linkable6 joined
[11:50] *** evalable6 joined
[11:52] <Voldenet> gpt-4

[12:00] *** reportable6 left
[12:02] *** reportable6 joined
[12:47] <discord-raku-bot> <Anton Antonov> @Voldenet Good to know. I have so far experimented only with GPT-3.5. See here : https://youtu.be/mI-oWLz5dYY  .

[12:56] <Voldenet> btw, it's nice what chatgpt is able to create when you ask it to use nativecall

[13:02] *** linkable6 left
[13:02] *** evalable6 left
[13:03] *** linkable6 joined
[13:03] *** evalable6 joined
[13:06] *** Censor left
[13:29] *** japhb left
[13:45] <discord-raku-bot> <Anton Antonov> I am more impressed ChatGPT-3.5 generates Raku grammars that work "out of box" : https://i.imgur.com/lydYleR.png

[14:10] *** teatwo joined
[14:12] *** teatwo left
[14:12] *** teatwo joined
[14:13] *** teatime left
[14:25] *** jpn joined
[14:30] *** jpn left
[14:31] <Voldenet> it can generate some grammars, but not always: https://pastebin.com/mnQV0Ydz

[14:45] <Voldenet> you can after some bouncing back and forth get useful result though https://pastebin.com/wdSYxYSh

[14:57] <discord-raku-bot> <Anton Antonov> Right -- I would say some iteration over / with the generated results is expected.

[15:03] *** Sgeo joined
[15:10] *** ProperNoun left
[15:10] *** ProperNoun joined
[15:20] *** jpn joined
[15:24] *** jpn left
[15:45] *** teatwo left
[15:45] *** jpn joined
[15:45] *** teatwo joined
[15:53] *** jgaz joined
[16:11] *** jpn left
[16:19] *** jpn joined
[16:24] *** jpn left
[17:10] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/04/10/2023-15-testing-patterns/

[17:16] *** bigdata joined
[17:38] *** euandreh left
[17:41] *** euandreh joined
[17:43] *** jpn joined
[17:47] <discord-raku-bot> <Rog> guifa: Array[Str].new, that makes sense. Although I'm still banging my head against the type system because my Positional[Str] %paths-to = @nodes Z=> Array[Str].new xx *; yields an error saying it wanted an Associative[Positional[Str]] but got a Hash. I guess the Hash itself doesn't carry type info?

[17:47] <discord-raku-bot> <Rog> Is there any way around that?

[17:48] *** jpn left
[17:51] <discord-raku-bot> <Rog> I might just get rid of the typing for now because I'm not even sure I'll settle on Str here, but I'm still curious

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:33] <discord-raku-bot> <Nemokosch> % implies associative

[18:34] <discord-raku-bot> <Nemokosch> Oh yeah gotcha xD you got the dimension right but the typing would still need an additional layer

[18:34] *** ecocode_ left
[18:34] *** bigdata left
[18:34] <discord-raku-bot> <Nemokosch> You'd still need to create it as Hash[Positional[Str]] or something...

[18:35] <discord-raku-bot> <Nemokosch> I think it's fair to say that there is no type deduction whatsoever

[18:36] *** ecocode joined
[18:40] <discord-raku-bot> <p6steve> m: my Positional[Str] %p = <a b c> Z=> Array[Str].new xx ;

[18:40] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Missing required term after infix at /home/glot/main.raku:1 ------> [Str] %p = <a b c> Z=> Array[Str].new xx⏏ ;     expecting any of:         prefix         term 

[18:40] <discord-raku-bot> <p6steve> m: my Positional[Str] %p = <a b c> Z=> Array[Str].new xx  *;

[18:40] <discord-raku-bot> <Raku eval>  

[18:41] <discord-raku-bot> <p6steve> works for me, but possibly I’m missing the point

[18:59] <discord-raku-bot> <Rog> Huh, maybe I’m on too old a version

[19:05] <discord-raku-bot> <Nemokosch> or too new, even

[19:05] <discord-raku-bot> <Nemokosch> this is 2022. 02 or something

[19:31] *** jpn joined
[19:34] <discord-raku-bot> <p6steve> i checked this on repl v2023.02

[19:36] *** jpn left
[19:46] *** epony left
[19:52] *** derpydoo joined
[19:53] *** epony joined
[20:13] *** jpn joined
[20:19] *** jpn left
[21:01] *** sena_kun left
[21:24] *** jgaz left
[21:44] *** derpydoo left
[22:00] *** jpn joined
[22:05] *** jpn left
[23:05] *** nativecallable6 left
[23:05] *** statisfiable6 left
[23:05] *** bisectable6 left
[23:05] *** notable6 left
[23:05] *** releasable6 left
[23:05] *** reportable6 left
[23:05] *** evalable6 left
[23:05] *** quotable6 left
[23:05] *** bloatable6 left
[23:05] *** unicodable6 left
[23:05] *** squashable6 left
[23:05] *** benchable6 left
[23:05] *** committable6 left
[23:05] *** coverable6 left
[23:05] *** linkable6 left
[23:05] *** sourceable6 left
[23:05] *** greppable6 left
[23:05] *** tellable6 left
[23:05] *** shareable6 left
[23:05] *** statisfiable6 joined
[23:06] *** committable6 joined
[23:06] *** sourceable6 joined
[23:06] *** quotable6 joined
[23:06] *** squashable6 joined
[23:06] *** coverable6 joined
[23:06] *** nativecallable6 joined
[23:06] *** bisectable6 joined
[23:07] *** benchable6 joined
[23:07] *** unicodable6 joined
[23:07] *** notable6 joined
[23:07] *** linkable6 joined
[23:07] *** shareable6 joined
[23:07] *** releasable6 joined
[23:07] *** reportable6 joined
[23:08] *** bloatable6 joined
[23:08] *** greppable6 joined
[23:08] *** tellable6 joined
[23:08] *** evalable6 joined
