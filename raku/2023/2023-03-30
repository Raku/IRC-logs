[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:06] *** merp left
[00:22] *** jgaz left
[00:26] *** japhb left
[00:27] *** japhb joined
[00:33] *** merp joined
[00:37] <discord-raku-bot> <pelevesque> @tonyo - I wish there was a test-depends emptied field in your fez generated META6.json.

[00:56] *** merp left
[01:08] *** merp joined
[01:19] <tonyo> can be added -

[01:37] *** merp left
[01:50] *** japhb left
[01:53] *** japhb joined
[01:59] *** merp joined
[02:57] *** squashable6 left
[02:59] *** squashable6 joined
[03:54] *** jetchisel left
[03:56] *** jetchisel joined
[04:56] *** bisectable6 left
[04:56] *** reportable6 left
[04:56] *** evalable6 left
[04:56] *** bloatable6 left
[04:56] *** linkable6 left
[04:56] *** shareable6 left
[04:56] *** releasable6 left
[04:56] *** sourceable6 left
[04:56] *** unicodable6 left
[04:56] *** quotable6 left
[04:56] *** nativecallable6 left
[04:56] *** tellable6 left
[04:56] *** benchable6 left
[04:56] *** squashable6 left
[04:56] *** coverable6 left
[04:56] *** committable6 left
[04:56] *** greppable6 left
[04:56] *** notable6 left
[04:56] *** statisfiable6 left
[04:56] *** benchable6 joined
[04:56] *** unicodable6 joined
[04:57] *** tellable6 joined
[04:57] *** quotable6 joined
[04:57] *** greppable6 joined
[04:58] *** reportable6 joined
[04:58] *** bloatable6 joined
[04:58] *** sourceable6 joined
[04:58] *** bisectable6 joined
[04:58] *** linkable6 joined
[04:58] *** shareable6 joined
[04:58] *** committable6 joined
[04:58] *** statisfiable6 joined
[04:58] *** evalable6 joined
[04:58] *** notable6 joined
[04:59] *** releasable6 joined
[04:59] *** coverable6 joined
[04:59] *** nativecallable6 joined
[04:59] *** squashable6 joined
[05:12] *** euandreh left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:26] *** derpydoo left
[06:50] *** tea3po joined
[06:54] *** teatwo left
[06:57] *** an3223 joined
[07:09] *** an3223 left
[07:14] *** jpn joined
[07:20] *** ProperNoun left
[07:26] *** jjido joined
[07:36] *** jpn left
[07:43] *** Sgeo left
[07:56] *** dakkar joined
[08:01] *** sena_kun joined
[08:15] *** jjido left
[08:55] *** jjido joined
[09:01] *** archenoth joined
[09:02] *** Oshawott left
[09:07] *** jjido left
[09:15] *** abraxxa joined
[09:24] *** jjido joined
[09:24] *** jpn joined
[09:54] *** jjido left
[09:55] *** an3223 joined
[10:05] *** abhinav left
[10:17] *** jjido joined
[10:31] *** jjido left
[10:46] *** TieUpYourCamel joined
[10:48] *** jjido joined
[10:50] *** bigdata left
[11:02] *** abhinav joined
[11:13] *** derpydoo joined
[11:15] <jjatria> I'm using IO::Socket::Async to write a UDP client/server pair, but I can't figure out how the server gets the host/port of the incoming connection to send a response. I can receive messages on the server, but not respond

[11:17] <jjatria> Does anybody know where I can get where to send a response to?

[11:20] *** euandreh joined
[11:24] *** euandreh left
[11:24] <lizmat> jjatria: I'm actually unsure whether UDP is supported at all on Moar

[11:24] <lizmat> perhaps time for a SO question

[11:25] *** euandreh joined
[11:26] *** an3223 left
[11:35] *** jpn left
[11:38] <jjatria> Sure, I can do that

[11:42] *** an3223 joined
[11:56] *** jjido left
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:02] *** an3223 left
[12:25] <discord-raku-bot> <霧嶋 董香> Hi, how to get all built-ins functions and keywords in raku ?

[12:38] *** jpn joined
[12:43] *** jjido joined
[13:14] *** knarkhov joined
[13:17] <[Coke]> is this for an editor/IDE - I think many cheat and keep a list. You could introspect the grammar and CORE:: (I think) to try to get a introspected list.

[13:17] *** jjido left
[13:20] <[Coke]> m: dd CORE::.keys[^5]

[13:20] <camelia> rakudo-moar b340c2b18: OUTPUT: «("\&prefix:<++⚛>", "\&chop", "UIntPosRef", "\&print", "\&all")␤»

[13:20] <[Coke]> m: dd CORE::.keys.sort[^5]

[13:20] <camelia> rakudo-moar b340c2b18: OUTPUT: «("!INIT_VALUES", "\$!", "\$/", "\$=pod", "\$?BITS")␤»

[13:20] <[Coke]> m: dd CORE::.keys.grep(*.starts-with("\&").sort[^5]

[13:20] <camelia> rakudo-moar b340c2b18: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> :.keys.grep(*.starts-with("\&").sort[^5]⏏<EOL>␤»

[13:22] <[Coke]> dd CORE::.keys.grep(*.contains("&c"))

[13:22] <evalable6> [Coke], rakudo-moar b340c2b18: OUTPUT: «("\&cross", "\&chop", "\&circumfix:<\{ }>", "\&…»

[13:22] <evalable6> [Coke], Full output: https://gist.github.com/821a380a4ab322cbdad884b8a44fa659

[13:22] <[Coke]> the &'s will be all the top level subs.

[13:24] <[Coke]> but you'd need to look at the grammar to get syntax like "for"

[13:26] *** derpydoo left
[13:26] <[Coke]> The grammar is complicated enough you're probably better off keeping the keyword list separate.

[13:41] <jjatria> lizmat: https://stackoverflow.com/questions/75889032

[13:41] *** jgaz joined
[13:46] *** an3223 joined
[13:59] <discord-raku-bot> <霧嶋 董香> @coke thank you!

[14:27] *** vrurg left
[14:38] *** m_athias left
[14:38] *** nine left
[14:40] *** vrurg joined
[14:43] *** camelia left
[14:48] *** Sgeo joined
[14:49] *** camelia joined
[15:08] *** camelia left
[15:14] *** camelia joined
[15:15] *** m_athias joined
[15:18] *** nine joined
[15:18] <tonyo> vrurg: taking a look at your question on the `rev` thing today.  did the globber work better?  the review command is a little difficult without an AST available to fez (it's just a dumb grepper)

[15:20] <vrurg> tonyo: the globber seems to be ok, except for the attempt to read from an excluded file.

[15:20] <tellable6> 2023-03-28T08:35:50Z #raku <Xliff> vrurg Ah! Thanks!

[15:20] <tonyo> okay cool

[15:20] <vrurg> As to the "dumb grepper", but module names are in the source. The dumbest one would've found them.

[15:21] <tonyo> the dumbest one would also add anything with two colons to something else

[15:21] <vrurg> :D

[15:23] <vrurg> Anyway, you have the repo and can test against it. And I consider the new features as a great move into the right direction. Though my tooling is already based around own-brewed makefile-based subsystem, where fez serves as an uploader only.

[15:25] *** jpn left
[15:25] <tonyo> no worries, testing is much appreciated - working on making fez see your repo a little more sanely

[15:26] <tonyo> also, i'm moving the 'production' key out of the META6.json and into a `.fez` file

[15:27] <vrurg> The way I assumed the key to be?

[15:28] <tonyo> i have it here: https://pastebin.com/6VJTzg96  which looks sane to me

[15:28] <tonyo> yea

[15:28] <tonyo> also in that .fez file you can disable warnings about those types by adding `ignore-provides: ["HelperMethod", ...]`

[15:30] <tonyo> i'll put up a PR so you have an example and then i'll fix the globber in that repo 

[15:31] <vrurg> I saw the ignore feature. Might be a bit too much in some cases, but I hope things change for better with RakuAST. One thing could be done already though. If you see a module declaration then you could try import it and iterate available symbols. Barely useful with 'my', but otherwise might work.

[15:32] *** jpn joined
[15:33] <tonyo> i thought about that but it was failing badly for modules that reach out to some service when `use`d 

[15:33] <tonyo> https://pastebin.com/aMweXXtL

[15:34] <vrurg> And possible internal integrity issues if the modules messes up with things in an surprising way. But that could be resolved by spawning a child process. And ignoring outcomes if it fails. Then it could just fallback to the current behavior.

[15:35] <vrurg> I need to go. Will be away for a while. 

[15:35] <vrurg> Like it where fez goes anyway.

[15:35] <vrurg> Thanks!

[15:36] <tonyo> thanks vrurg !

[15:53] *** abraxxa left
[16:01] *** jpn left
[16:06] *** jgaz left
[16:30] *** dakkar left
[16:33] <tonyo> fez v49 adds the test depends pelevesque, should fix #90 and make #92 more palatable vrurg 

[16:34] *** jgaz joined
[16:57] *** gcd joined
[17:16] *** gcd left
[17:23] *** derpydoo joined
[17:25] <tonyo> m: use Raku::Grammar

[17:25] <camelia> rakudo-moar b340c2b18: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find Raku::Grammar in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2…»

[17:27] <lizmat> m: use Raku::Grammar:from<nqp>

[17:27] <camelia> rakudo-moar b340c2b18: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find Raku::Grammar:from<nqp> in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakud…»

[17:27] <lizmat> m: use Raku::Grammar:from<NQP>

[17:27] <camelia> rakudo-moar b340c2b18: ( no output )

[17:27] <lizmat> tonyo ^^

[17:28] <lizmat> still WIP though

[17:30] <tonyo> danke

[17:30] <tonyo> trying to prepare for some stuff i'd like to add to fez or individual tooling eventually

[17:40] <tonyo> hmm, is there a method to just get the AST from a string?

[17:40] <tonyo> looking at that class in nqp it looks like it's evaluating compunits

[17:59] <discord-raku-bot> <pelevesque> @tonya -

[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:07] <lizmat> m: say Q|say "tonyo"|.AST

[18:07] <camelia> rakudo-moar b340c2b18: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::Call::Name.new(␤      name => RakuAST::Name.from-identifier("say"),␤      args => RakuAST::ArgList.new(␤        RakuAST::QuotedString.new(␤       …»

[18:07] <tonyo> whoa

[18:08] *** Oshawott joined
[18:08] <lizmat> what you hoped for and more?  :-)

[18:08] <tonyo> yea very sweet and easy

[18:11] *** archenoth left
[18:42] *** donpdonp- joined
[18:44] <tonyo> m: use experimental :rakuast; sub X {};  "sub X {}".AST;

[18:44] <camelia> rakudo-moar b340c2b18: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤===SORRY!=== Error while compiling ␤Missing block␤------> sub X ⏏<EOL>␤»

[18:44] <tonyo> m: use experimental :rakuast; sub ABCX {};  "sub ABCX {}".AST;

[18:44] <camelia> rakudo-moar b340c2b18: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤===SORRY!=== Error while compiling ␤Missing block␤------> sub ABCX ⏏<EOL>␤»

[18:54] *** teatwo joined
[18:58] *** tea3po left
[19:05] <[Coke]> tonyo: you want single quote.

[19:05] <tonyo> m: use experimental :rakuast; sub ABCX {};  'sub ABCX {}'.AST;

[19:05] <camelia> rakudo-moar b340c2b18: ( no output )

[19:05] <[Coke]> m: dd 'sub X {}'.AST

[19:05] <camelia> rakudo-moar b340c2b18: OUTPUT: «sub X { }␤»

[19:06] <tonyo> is the ast meant to also act as a linter?

[19:06] <[Coke]> otherwise you're interpolating a nil with that {}, I think.

[19:06] <tonyo> yea you're right, brain dead today

[19:06] <[Coke]> in that you get standard output, not original source input

[19:06] <tonyo> yea

[19:06] <[Coke]> but I think it's more "porcelain" than "linted", if that matters.

[19:07] <tonyo> ah, so not planned to also be a linter

[19:07] <[Coke]> interesting, at some point sub output empty parens, but that's no longer showing up here. 

[19:19] *** an3223 left
[19:24] *** user___ joined
[19:52] <tonyo> this makes writing a linter much easier than six years ago

[20:03] *** ProperNoun joined
[20:17] <discord-raku-bot> <Nemokosch> that was part of the reason I suppose

[20:22] *** nort joined
[20:52] * guifa needs to publish an update to Pretty::RAST

[20:52] <guifa> ultimately it could be used as a formatter and possibly a linter at some point

[21:00] <lizmat> m: say Q|sub    foo   ($a) { $a +      $a }|.AST.DEPARSE

[21:00] <camelia> rakudo-moar b340c2b18: OUTPUT: «sub foo (Any $a) { $a + $a }␤␤»

[21:01] <lizmat> tonyo: deparsing lints to an extent already

[21:16] *** derpydoo left
[21:38] *** squashable6 left
[21:39] *** sena_kun left
[21:41] *** squashable6 joined
[21:52] *** jgaz left
[22:02] *** eseyman left
[22:02] <discord-raku-bot> <Nemokosch> https://github.com/Raku/atom-language-perl6/pull/101

[22:03] <discord-raku-bot> <Nemokosch> with this PR, I hereby announce my intentions to take control over the highlighter repository 🤠

[22:03] *** manu_ joined
[22:04] *** manu_ is now known as eseyman

[22:15] <tonyo> m: say Q|say 1;|.AST.DEPARSE

[22:15] <camelia> rakudo-moar b340c2b18: OUTPUT: «say(1)␤␤»

[22:16] * guifa is going to try to find a way to get it so we can say something like pretty-print $rast-node :type<html>, :options(:foo);

[22:16] <guifa> and then get a perfect HTML-ready output

[22:16] <guifa> rather than rely on a 98% accurate syntax highlighter

[22:17] <lizmat> just for the record: the class doing the deparsing, is RakuAST::Deparse

[22:18] <lizmat> it can be subclassed, or you can write your own

[22:18] <lizmat> and you can specify the class for deparsing as an argument to .DEPARSE

[22:18] <lizmat> m: use v6.*; say Q|say 1;|.AST.DEPARSE(RakuAST::Deparse)

[22:18] <camelia> rakudo-moar b340c2b18: OUTPUT: «say(1)␤␤»

[22:20] <discord-raku-bot> <Nemokosch> an HTML generator is very welcome. This is not an either-or thing. There are editors using this highlighter, and in fact, Github itself uses it for highlighting Raku code. You aren't gonna replace that.

[22:26] *** knarkhov left
[22:28] <tonyo> HTML generator is available as Ryml

[22:30] <discord-raku-bot> <Nemokosch> like please, not this "I don't care because I will manage without/I know better" sort of mentality again

[22:32] <lizmat> Nemokosch you have my blessing re atom-language

[22:32] <lizmat> also, I've just renamed the repo....  :-)

[22:33] <lizmat> afk&

[22:44] <discord-raku-bot> <Nemokosch> I'd say eventually it cannot (or at least shouldn't) stay "atom" either; if there is any editor to be named, it would be TextMate since the files are using the TextMate format

[22:46] <guifa> Nemokosch: yeah, the advantage of a highlighter like the Atom one is it generally will work fairly well on something that's syntantically invalid

[22:46] <tellable6> guifa, I'll pass your message to Nemokosch

[22:46] <guifa> e.g. highlighting correctly up to somewhere around abouts the error

[22:47] <guifa> an HTML (or other outputter) from RAST will barf on a syntax error

[22:47] <guifa> (but nicely could potentially handle embedded languaages a bit better heh)

[22:51] <discord-raku-bot> <Nemokosch> I don't think there is a dichotomy here, it's fairly simple. You don't always get the freedom to generate custom HTML. I wonder how much you get that freedom from an average TextMate-compatible editor, and you definitely don't get that freedom from something essentially like a markdown highlighter in a much broader system.

[22:51] <discord-raku-bot> <Nemokosch> So while it's also true that I don't think we have anything better quality-wise, either way, there needs to be something that can just work with the existing "rigid" tools, even if it only covers 98% of cases.

[22:56] <guifa> yeah

[22:56] <guifa> we're in agreement :-)

[22:56] <guifa> like you said, it's not an either or -- good reason for both

[22:57] <guifa> in reality, I'm making the pretty-print to just give me colorization when printing out in-progress RAST code

[22:57] <guifa> but there's not too much difference between inserting an ANSI code and an HTML <span> of course

[22:58] <discord-raku-bot> <Nemokosch> the difference is in the (often declarative) interface these tools provide

[22:59] <discord-raku-bot> <Nemokosch> they might as well be dumb HTML generators under the hood if they don't let you make it smarter

[23:00] <discord-raku-bot> <Nemokosch> Anyways... In general, right now the question isn't if we can get that 98% up to a hundred, much more like, if we can get visible presence at all. There is still no highlighting for Discord and I had to accept that either one of us gets a highlighter into highlight.js or the time just won't magically come, ever. There are dozens of supported languages, including ones that I've never heard of and/or seem like a kind

[23:00] <discord-raku-bot> of joke.

[23:00] <discord-raku-bot> <Nemokosch> Languages that I'm absolutely sure are less known and used than Raku - however, the difference is made by the people who create the tooling.

[23:01] <discord-raku-bot> <Nemokosch> And this is when I feel "nostalgic" about Minecraft in around 2012, which had 5 English dialects, "Pirate language" and perhaps even cat language - but no Hungarian, for quite a lot of time

[23:04] <tonyo> are you a hungarian native speaker nemo?

[23:07] <discord-raku-bot> <Nemokosch> Yes

[23:26] *** evalable6 left
[23:26] *** linkable6 left
[23:27] *** linkable6 joined
[23:29] *** evalable6 joined
