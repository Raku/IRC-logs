[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:06] <Xliff_> Yeah, but would need nqp to get @!candidates.

[00:07] *** deoac left
[00:09] <discord-raku-bot> <roguerakudev> It seems like I keep running into issues with type parameterization and typed parameters... is there an alternative to sub foo(SomeType @args) that allows me to pass a Positional that isn't explicitly created to be Positional[SomeType] but is nonetheless made up only of that type?

[00:10] <discord-raku-bot> <roguerakudev> I kind of get why this is the way it is, because in general arrays can be heterogenous, but it's rather annoying that the compiler can't "just figure it out" when everything inside is a literal of a known type

[00:11] <Xliff_> roguerakudev: Try sub foo(@args where *.all ~~ SomeType) 

[00:12] <Xliff_> If you use that a lot, you might want to create a subtype.

[00:12] <Xliff_> our subset SomeTypeArray of Positional where *.all ~~ Sometype

[00:16] <discord-raku-bot> <roguerakudev> Hm, now I'm getting Constraint type check failed in binding to parameter '@logging-methods'; expected anonymous constraint to be met but got List ((Logging::Method.new...)

[00:16] <discord-raku-bot> <roguerakudev> Just going to go with my real type names now lol

[00:17] <discord-raku-bot> <roguerakudev> For reference this is with sub initialize-logging(@logging-methods where *.all ~~ Logging::Method) and the call looking like initialize-logging((Logging::Method.new(...),))

[00:25] <vrurg> Xliff_: why would you need it? Why &meth.candidates doesn't suite you?

[00:27] <vrurg> I don't even see why would you need them in first place. Once you register an alias with add_multi_method the rest would happen automatically.

[00:55] *** Sgeo left
[01:00] *** jetchisel left
[01:01] *** jetchisel joined
[01:05] *** Sgeo joined
[01:05] <discord-raku-bot> <roguerakudev> I think this may be a bug actually, because the same thing with a direct check is fine, e.g. (Str.new,).all ~~ Str returns True

[01:05] *** Sgeo left
[01:06] <discord-raku-bot> <roguerakudev> but then sub foo(@args where *.all ~~ Str) { say 'yep' } and foo((Str.new,)) fails with expected anonymous constraint to be met but got List (("",))

[01:07] <Xliff_> vrurg: Actually, I was able to make it work.

[01:09] *** razetime joined
[01:15] *** jetchisel left
[01:18] *** jetchisel joined
[01:20] <discord-raku-bot> <roguerakudev> Decided to create an issue for it. We'll see if I'm just doing something silly now :) https://github.com/rakudo/rakudo/issues/5313

[01:30] *** m_athias left
[01:30] *** nine_ left
[01:32] *** nine joined
[01:32] *** m_athias joined
[01:34] <vrurg> Xliff_: congrats!

[01:47] *** razetime left
[01:47] *** razetime_ joined
[02:10] <tbrowder__> SmokeMachine: i looked at today Red after a long time since its early days, and it looks like it may be almost ready to use in othrer modules. Voldenet and others are saying sqlite or another db would be best for fast access for individual data storage as the next natural move after using a hash. so i was looking for opinions on whether Red is ready for real use.

[02:10] <tbrowder__> *Red today

[02:11] *** sacomo joined
[02:11] <tbrowder__> not rushing, just looking

[02:12] <sacomo> hi all, is there a way to have all modules install to a custom (non default) path, and then always use that path when running raku?

[02:16] <Voldenet> I didn't use it but zef has install-to option

[02:17] <Voldenet> paired with ZEF_INSTALL_TO env var

[02:18] <sacomo> Voldenet, thanks. Do I use ZEF_INSTALL_TO=new/custom/path raku script.raku to use that new path when running scripts?

[02:20] <Voldenet> ZEF_INSTALL_TO only controls zef

[02:20] <Voldenet> RAKULIB path is used by raku to locate modules iirc

[02:22] <sacomo> I have been testing the --install-to option and RAKULIB, but raku doesn't seem to find the modules installed in the --install-to custom path....

[02:28] *** razetime_ left
[02:29] *** razetime joined
[02:37] *** razetime left
[02:38] *** razetime joined
[02:39] <Voldenet> sacomo: use the format described here https://github.com/ugexe/zef#custom-installation-locations

[02:44] *** razetime left
[02:46] *** razetime joined
[02:52] <sacomo> Voldenet: thanks

[03:17] <sacomo> Voldenet: the info you shared (custom-installation-locaitons) worked for me. thanks again.

[03:18] <Voldenet> I wish it was controlled by a single variable at some point

[03:18] <Voldenet> RAKUENV or something

[03:20] *** razetime left
[03:21] *** razetime joined
[03:32] *** razetime left
[03:32] <sacomo> yeah, that would be convenient

[03:32] *** razetime joined
[03:50] *** razetime left
[03:52] *** razetime joined
[04:08] *** rf left
[04:13] *** razetime left
[04:29] <Xliff_> .tell vrurg Have an issue with method add_multi_method: "Type check failed in binding to parameter '$obj'; expected Any but got C (C)" -- Why am I getting this when core has the same signature: "($obj, $name, $code-obj)"

[04:29] <tellable6> Xliff_, I'll pass your message to vrurg

[04:31] *** Xliff_ left
[04:31] *** Xliff left
[04:38] *** ProperNoun left
[04:52] *** razetime joined
[05:04] *** kst left
[05:20] *** Sgeo joined
[05:32] *** razetime left
[05:32] *** razetime joined
[05:45] *** Tirifto left
[05:47] *** Tirifto joined
[05:55] *** kst joined
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:43] *** kjp left
[06:45] *** kjp joined
[06:56] *** Geth__ joined
[06:56] *** lizmat_ joined
[06:57] *** RakuIRCLogger left
[06:57] *** Geth left
[06:58] *** lizmat left
[07:00] *** Geth__ left
[07:00] *** Geth joined
[07:04] *** Geth left
[07:05] *** Geth joined
[07:20] *** abraxxa joined
[07:25] *** Sgeo left
[07:32] *** sena_kun joined
[08:02] *** dakkar joined
[08:29] *** razetime left
[08:48] *** razetime joined
[09:02] <discord-raku-bot> <nemokosch> @roguerakudev my suspicion was correct, it seems

[09:03] <discord-raku-bot> <nemokosch> this is not an inherent constraint check problem, merely a whatevercode anomaly

[09:03] <discord-raku-bot> <nemokosch> if you write { .all ~~ Str } instead of *.all ~~ Str, it will work

[09:13] *** abraxxa left
[09:46] *** hellwolf joined
[10:46] *** bloatable6 left
[10:46] *** bisectable6 left
[10:46] *** reportable6 left
[10:46] *** greppable6 left
[10:46] *** shareable6 left
[10:46] *** benchable6 left
[10:46] *** evalable6 left
[10:46] *** tellable6 left
[10:46] *** sourceable6 left
[10:46] *** unicodable6 left
[10:46] *** releasable6 left
[10:46] *** coverable6 left
[10:46] *** statisfiable6 left
[10:47] *** bisectable6 joined
[10:47] *** statisfiable6 joined
[10:47] *** shareable6 joined
[10:47] *** unicodable6 joined
[10:47] *** reportable6 joined
[10:48] *** coverable6 joined
[10:48] *** bloatable6 joined
[10:48] *** releasable6 joined
[10:48] *** tellable6 joined
[10:48] *** evalable6 joined
[10:49] *** sourceable6 joined
[10:49] *** benchable6 joined
[10:49] *** greppable6 joined
[11:45] *** sivoais_ left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:09] *** sivoais joined
[12:10] <xinming_> tbrowder__: as a Red user, I can tell you, if you prevent cocurrent access to the db, Red works pretty fine when it works. and you may encouter some small bugs when you doing project, Red is usable. But IMO not production ready yet.

[12:11] <xinming_> Also, your projects may need tests to ensure everything work as expected.

[12:11] *** ProperNoun joined
[12:13] <xinming_> I personally still uses DBIish for small utilites, I will choose Red for long term projects, as I believe it'll finally be production ready

[12:22] *** razetime_ joined
[12:22] *** razetime left
[12:30] *** Xliff joined
[12:44] *** euandreh left
[12:46] *** euandreh joined
[12:50] *** razetime_ left
[13:25] <vrurg> .

[13:25] <tellable6> 2023-07-14T04:29:51Z #raku <Xliff_> vrurg Have an issue with method add_multi_method: "Type check failed in binding to parameter '$obj'; expected Any but got C (C)" -- Why am I getting this when core has the same signature: "($obj, $name, $code-obj)"

[13:26] <vrurg> Xliff: You get this because C isn't composed at the time and it passes no type matching yet. $obj has to be Mu to accept anything.

[13:26] *** raiph joined
[13:31] *** raiph left
[13:50] *** razetime joined
[13:51] *** razetime left
[14:03] <tbrowder__> xinming_: thanks

[14:23] <Xliff> vrurg: OK, then there is a further problem with signature matching because the "callsame" in your example no longer matches what's in the parent.

[14:23] <Xliff> So the callsame goes nowhere.

[14:24] <Xliff> I have examples that sort of confirm this. I will attach them to the issue.

[14:36] <vrurg> Xliff: callsame must re-dispatch to the upstream add_multi_method which is in the metamodel code.

[14:36] <Xliff> vrurg: Yes, but that has signature ($obj, $name, $code-obj)

[14:37] <Xliff> vrurg: Doesn't the lack of "(Mu $obj" have an effect on callsame?

[14:37] <Xliff> A bit busy for the next few hours so I will update the issue with my findings.

[14:44] <discord-raku-bot> <roguerakudev> Very strange… certainly counts as a “wat”

[14:45] <discord-raku-bot> <roguerakudev> Oh, I bet it has something to do with Mu vs Any

[14:45] <discord-raku-bot> <roguerakudev> Junctions inheriting straight from Mu so they don’t have Any-ish behavior

[14:46] <discord-raku-bot> <roguerakudev> At any rate I have a workaround now, so thanks

[14:46] <Xliff> rogueerakudev: Mind sharing?

[14:48] <discord-raku-bot> <roguerakudev> Referring to Nemokosch’s comment above, using a block for the type constraint issue I was having yesterday (eg where { .all ~~ Type })

[14:48] <Xliff> Ah.

[14:50] <discord-raku-bot> <roguerakudev> Discord has a reply feature, but obviously that doesn’t translate over the bridge :^)

[14:51] *** evalable6 left
[14:51] *** linkable6 left
[14:51] *** evalable6 joined
[14:53] *** linkable6 joined
[14:53] <discord-raku-bot> <roguerakudev> Oh never mind, in the linked issue it explains the issue is smartmatch doesn’t get sucked up into the whatevercode, which I’m sure has some@good reasoning behind it… but as suggested, a specific warning would be nice

[14:58] <discord-raku-bot> <nemokosch> well, as far as I understand, the reason has something to do with the "thunkiness" of the smartmatch operator

[14:59] <discord-raku-bot> <nemokosch> you know how && is short-circuiting? That makes it a pretty weird and impure operator

[14:59] <discord-raku-bot> <nemokosch> if you want to model it purely, you need to conclude that its right handside is in fact a piece of inline code

[15:01] <discord-raku-bot> <nemokosch> ~~ works on the same principle: it evaluates the left handside, then it evaluates the right handside as a piece of code, having $_ set to the LHS value, and ultimately it calls .ACCEPTS($_) on the obtained value

[15:03] <discord-raku-bot> <nemokosch> I would optimistically think that there is no inherent reason why ~~ and && couldn't whatever-curry; perhaps it was just too complex, due to this special meta-nature of these operators

[15:05] <discord-raku-bot> <nemokosch> Now, from RakuAST point of view, I don't think these calls will be anything special, and therefore I'd hope that they can be generated as the right thing

[15:14] *** Sgeo joined
[16:12] <discord-raku-bot> <roguerakudev> Yeah, I can’t think of a scenario off the top of my head where you’d actually want those not to curry

[16:13] <discord-raku-bot> <roguerakudev> So perhaps great things are ahead with RakuAST

[16:14] *** evalable6 left
[16:14] *** linkable6 left
[16:15] *** linkable6 joined
[16:17] *** evalable6 joined
[16:31] *** dakkar left
[16:39] <discord-raku-bot> <nemokosch> like of course these operators need special attention to be codegenned right - but I'd hope the extra complexity of paying attention to whatever-currying as well would be manageable

[16:52] *** lizmat_ left
[16:52] *** lizmat joined
[17:53] *** unicodable6 left
[17:53] *** quotable6 left
[17:53] *** shareable6 left
[17:53] *** squashable6 left
[17:53] *** evalable6 left
[17:53] *** nativecallable6 left
[17:53] *** statisfiable6 left
[17:53] *** bisectable6 left
[17:53] *** releasable6 left
[17:53] *** bloatable6 left
[17:53] *** sourceable6 left
[17:53] *** benchable6 left
[17:53] *** greppable6 left
[17:53] *** tellable6 left
[17:53] *** committable6 left
[17:53] *** notable6 left
[17:53] *** reportable6 left
[17:53] *** coverable6 left
[17:53] *** linkable6 left
[17:53] *** sourceable6 joined
[17:53] *** tellable6 joined
[17:54] *** releasable6 joined
[17:54] *** reportable6 joined
[17:54] *** bloatable6 joined
[17:54] *** nativecallable6 joined
[17:54] *** benchable6 joined
[17:55] *** linkable6 joined
[17:55] *** shareable6 joined
[17:55] *** statisfiable6 joined
[17:55] *** bisectable6 joined
[17:55] *** quotable6 joined
[17:55] *** notable6 joined
[17:55] *** evalable6 joined
[17:55] *** squashable6 joined
[17:55] *** committable6 joined
[17:55] *** greppable6 joined
[17:55] *** unicodable6 joined
[17:56] *** coverable6 joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[19:02] *** quotable6 left
[19:02] *** greppable6 left
[19:02] *** evalable6 left
[19:02] *** statisfiable6 left
[19:02] *** benchable6 left
[19:02] *** tellable6 left
[19:02] *** unicodable6 left
[19:02] *** coverable6 left
[19:02] *** releasable6 left
[19:02] *** bisectable6 left
[19:02] *** reportable6 left
[19:02] *** notable6 left
[19:02] *** squashable6 left
[19:02] *** committable6 left
[19:02] *** sourceable6 left
[19:02] *** linkable6 left
[19:02] *** bloatable6 left
[19:02] *** nativecallable6 left
[19:02] *** shareable6 left
[19:03] *** committable6 joined
[19:03] *** releasable6 joined
[19:03] *** bisectable6 joined
[19:03] *** statisfiable6 joined
[19:03] *** notable6 joined
[19:04] *** shareable6 joined
[19:04] *** quotable6 joined
[19:04] *** bloatable6 joined
[19:04] *** unicodable6 joined
[19:04] *** benchable6 joined
[19:04] *** greppable6 joined
[19:04] *** squashable6 joined
[19:05] *** coverable6 joined
[19:05] *** sourceable6 joined
[19:05] *** evalable6 joined
[19:05] *** tellable6 joined
[19:05] *** nativecallable6 joined
[19:05] *** linkable6 joined
[19:05] *** reportable6 joined
[19:33] *** rf joined
[19:52] *** andinus left
[20:24] <jdv> what is going on

[20:26] <jdv> m: $*RAKU.compiler.version

[20:26] <camelia> rakudo-moar 34a1a5da5: ( no output )

[20:26] <jdv> m: $*RAKU.compiler.version.say

[20:26] <camelia> rakudo-moar 34a1a5da5: OUTPUT: «v2023.06.98.g.34.a.1.a.5.da.5␤»

[20:52] *** linkable6 left
[20:52] *** evalable6 left
[20:53] *** evalable6 joined
[20:54] *** guifa joined
[20:54] * guifa is back from TPRC

[20:55] <guifa> I only had like 3-4 typos in each presentation this time haha

[20:55] *** linkable6 joined
[21:04] <guifa> Also, Sawyer X's talk should be obligatory viewing for everyone.  While he's talking about the Perl community in specific, much applies to our community as well

[21:05] <guifa> https://youtu.be/Q1H9yKf8BI0

[21:11] <gfldex> I feel obligated to watch that talk!

[21:40] <gfldex> guifa: Sadly, I have to repote that video to be rather boring to me. I work in customer service and I must presume that Sawyer X wouldn't last a week on the phone. You lot have no idea how lucky you are. I have "unpolite" pricks throwing abuse at me every single day and consider being able to deal with that as a rather important part of what it means to be an adult.

[21:55] *** linkable6 left
[21:55] *** evalable6 left
[21:56] *** linkable6 joined
[21:57] <discord-raku-bot> <nemokosch> this would be very well said if it didn't come from you of all people, lol

[21:58] *** evalable6 joined
[21:59] <discord-raku-bot> <nemokosch> anyways, I also watched that video and it did try to present an understanding point of view

[22:01] <discord-raku-bot> <nemokosch> you don't have to empathize with me or anything but at least hear me out when I say: you cannot push a sonda into a person to check how they feel, so you will always have to decide based on their reactions

[22:02] <discord-raku-bot> <nemokosch> the more somebody reacts to any sort of discomfort, the more protection they will induce, and vice versa

[22:03] <discord-raku-bot> <nemokosch> and if you actually train people to be very stressed about any sort of discomfort they might suffer, it's quite possible that they might even overreact

[22:08] <discord-raku-bot> <nemokosch> https://www.youtube.com/watch?v=umJ7XtJuFLY another "obligatory viewing" - honestly, I hoped it would be more about the solution; it turned out to be so depressing it could be me venting

[22:23] <guifa> demokosch: IIRC from that talk, it's just an initial bit of survey data and analysis, that's going to be part of a larger project

[22:24] <guifa> well, "initial bit" it's the completed survey with analysis, but the project had a limited scope as a piece of a larger project

[22:31] <discord-raku-bot> <nemokosch> That sounds interesting

[22:34] <discord-raku-bot> <nemokosch> Of course it only applies partially to Raku but I think the "loyalists" part is accurate

[22:35] <guifa> I would be wiling to bet that numbers for the two communities would be fairly similar.

[22:35] <guifa> also one thing to point out because there was some confusion during the talk that got clarified inQ&A

[22:36] <guifa> social norms == "my best friend told me perl sucked so I'm not gonna use it" or "Perl is badass 1337 hacker shit so I really want to learn it"

[22:36] <discord-raku-bot> <nemokosch> Oh right that wasn't clear at all lol

[22:38] <discord-raku-bot> <nemokosch> There is a pretty important difference: Perl has been shrinking in popularity for quite a long time by now, Raku isn't lucky enough on its own to afford that

[22:40] *** sena_kun left
[22:41] <discord-raku-bot> <nemokosch> For Perl, a solid conservation plan might do it, for Raku, the barrier of visible presence still needs to be broken in many regards

[22:50] <discord-raku-bot> <roguerakudev> let's be nice, now

[22:53] <leont> gfldex: haven't seen it yet so I may be making assumptions, but I think manners within a community are an entirely different thing from dealing with people from outside a community.

[22:57] <discord-raku-bot> <nemokosch> Let's just say that we have a history and I can't stand when somebody is openly hypocritical

[22:58] <discord-raku-bot> <nemokosch> It's not a right to get away with dishonesty and hypocrisy, damn it

[22:59] *** ab5tract joined
[23:02] *** deoac joined
[23:02] *** deoac left
[23:17] *** andydude joined
[23:36] <japhb> tbrowder__: App::SerializerPerf:ver<0.0.5> uploaded; are those README changes sufficient?

[23:57] <tbrowder__> thnx, checking now...

[23:59] *** ab5tract left
