[00:00] *** reportable6 left
[00:01] *** reportable6 joined
[00:39] *** euandreh left
[00:40] *** euandreh joined
[01:04] *** xinming left
[01:05] *** xinming joined
[01:13] <tbrowder__> read...as my grandkids would say, "awesome!"

[01:17] *** zara joined
[01:27] *** zara left
[01:36] *** jdv_ joined
[01:41] *** jpn joined
[01:42] *** camelia left
[01:42] *** jdv left
[01:42] *** user___ left
[01:42] *** dcx left
[01:46] *** jpn left
[01:48] *** camelia joined
[01:48] *** user___ joined
[01:48] *** dcx joined
[01:48] *** dcx left
[01:48] *** dcx joined
[02:06] *** derpydoo left
[02:17] *** derpydoo joined
[02:18] *** teatwo left
[02:18] *** teatwo joined
[02:31] *** derpydoo left
[02:46] *** Xliff_ left
[02:55] *** derpydoo joined
[02:55] *** tea3po joined
[02:58] *** teatwo left
[03:04] *** jrjsmrtn joined
[03:08] *** jrjsmrtn left
[03:10] *** jrjsmrtn joined
[03:10] *** codesections left
[03:10] *** jrjsmrtn left
[03:13] *** jrjsmrtn joined
[03:14] *** jrjsmrtn left
[03:15] *** jrjsmrtn joined
[03:16] *** jrjsmrtn left
[03:18] *** jrjsmrtn joined
[03:29] *** jpn joined
[03:34] *** jpn left
[03:53] *** codesections joined
[03:56] *** rf left
[04:56] *** nativecallable6 left
[04:56] *** linkable6 left
[04:56] *** statisfiable6 left
[04:56] *** shareable6 left
[04:56] *** bisectable6 left
[04:56] *** benchable6 left
[04:56] *** squashable6 left
[04:56] *** evalable6 left
[04:56] *** unicodable6 left
[04:56] *** bloatable6 left
[04:56] *** quotable6 left
[04:56] *** notable6 left
[04:56] *** reportable6 left
[04:56] *** greppable6 left
[04:56] *** releasable6 left
[04:56] *** tellable6 left
[04:56] *** committable6 left
[04:56] *** sourceable6 left
[04:56] *** coverable6 left
[04:57] *** bloatable6 joined
[04:57] *** bisectable6 joined
[04:57] *** greppable6 joined
[04:57] *** squashable6 joined
[04:57] *** shareable6 joined
[04:57] *** evalable6 joined
[04:58] *** tellable6 joined
[04:58] *** quotable6 joined
[04:58] *** benchable6 joined
[04:58] *** reportable6 joined
[04:58] *** unicodable6 joined
[04:58] *** coverable6 joined
[04:58] *** releasable6 joined
[04:58] *** sourceable6 joined
[04:59] *** committable6 joined
[04:59] *** notable6 joined
[04:59] *** statisfiable6 joined
[04:59] *** nativecallable6 joined
[04:59] *** linkable6 joined
[05:01] *** jpn joined
[05:08] *** jpn left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:17] *** jpn joined
[06:22] *** jpn left
[07:07] *** jpn joined
[07:15] *** jpn left
[07:38] <Geth> ¦ advent: a8b9c551f5 | (Tom Browder)++ | 2 files

[07:38] <Geth> ¦ advent: prep for the upcoming season

[07:38] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/a8b9c551f5

[07:38] <Geth> ¦ advent: 409f774036 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[07:38] <Geth> ¦ advent: Merge pull request #106 from tbrowder/raku-advent-2023

[07:38] <Geth> ¦ advent: 

[07:38] <Geth> ¦ advent: prep for the upcoming season

[07:38] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/409f774036

[08:08] *** jpn joined
[08:13] *** jpn left
[09:02] *** sena_kun joined
[09:27] *** Manifest0 joined
[09:44] *** Sgeo left
[10:38] *** whatnext joined
[10:38] <whatnext> hello raku community :D

[10:39] <whatnext> quick and very basic question - but something I have neglected to find an answer to and now have become irritated with my ugly workaround

[10:40] <whatnext> in perl5 I can do `my ($var1, $var2) = something_returning_an_array();`

[10:42] <whatnext> in raku I seem to end up writing `my @array = something_returning_an_arrray();` and then picking `$var1` and `$var2` out of `@array` because the same construction doesn't seem to work

[10:42] <whatnext> or does it?

[10:43] <whatnext> what should I be writing to immediately pick up the list elements after the sub call ?

[10:43] <whatnext> thanks for any help :)

[10:47] <lizmat> m: sub a() { [1,2,3] }; my ($a,$b) = a; say $a; say $b

[10:47] <camelia> rakudo-moar f2b69f53f: OUTPUT: «1␤2␤»

[10:47] <lizmat> whatnext: this just works ?  ^^

[10:49] <whatnext> hm... maybe I am returning the value from the sub in the wrong way

[10:51] <whatnext> so what is the difference if the return value is in parentheses `(` and `)` ?

[10:52] <lizmat> no difference, you can even leave off the parentheses

[10:52] <lizmat> m: sub a() { 1,2,3 }; my ($a,$b) = a; say $a; say $b

[10:52] <camelia> rakudo-moar f2b69f53f: OUTPUT: «1␤2␤»

[10:52] <lizmat> as the list builder is the comma, not the parentheses

[10:53] <lizmat> note, that the single argument rule applies here.   If you would return 2 lists, the first would wind up in $a, and the second  in $b

[10:53] <lizmat> m: sub a() { (1,2,3),(4,5,6) }; my ($a,$b) = a; say $a; say $b

[10:53] <camelia> rakudo-moar f2b69f53f: OUTPUT: «(1 2 3)␤(4 5 6)␤»

[10:55] <whatnext> hm that's strange... that is what I would expect based on the docs, and obviously it does work in your example

[10:57] <lizmat> maybe you think the something returns an array, but it doesn't?

[10:57] <whatnext> maybe my problem is indirectly resolved by changing the format

[10:58] <whatnext> well, the error is `Stringification of a Buf is not done with 'Stringy'.  The 'decode'

[10:58] <whatnext> method should be used to convert a Buf to a Str.`

[10:58] <whatnext> which admittedly doesn't look like anything related to arrays at all

[10:58] <lizmat> a Buf is not an array.  It does do the Positional role, but is *not* Iterable

[10:59] <lizmat> m: dd Buf ~~ Iterable

[10:59] <camelia> rakudo-moar f2b69f53f: OUTPUT: «Bool::False␤»

[11:00] <lizmat> hmmm... 

[11:01] <whatnext> yes... none of the variables are supposed to be Buf though - and if I construct it the second way I mentioned, I don't get an issue

[11:01] <whatnext> only the `my ($var1, $var2) = ...` construction seems to result in an issue

[11:02] <lizmat> without more clues I cannot tell you what the problem is: could you create a gist of your code somewhere?

[11:05] <whatnext> ok thanks v much for your help

[11:06] <whatnext> its a bit tricky to put in a gist because the relevant code spans several modules

[11:07] <whatnext> what I will need to do is try and reduce it down

[11:07] <whatnext> I will get back to you if/when I manage to do that :)

[11:07] <whatnext> thanks again

[11:08] <lizmat> you're welcome :-)

[11:10] *** codesections left
[11:27] *** derpydoo left
[12:00] *** reportable6 left
[12:00] *** reportable6 joined
[12:19] *** jpn joined
[12:24] *** jpn left
[12:26] *** derpydoo joined
[12:38] *** whatnext left
[12:44] *** xinming left
[12:45] *** xinming joined
[13:14] *** jpn joined
[13:21] *** jpn left
[13:36] *** euandreh left
[14:06] *** jpn joined
[14:17] *** euandreh joined
[14:19] *** tea3po left
[14:19] *** tea3po joined
[14:22] *** tea3po left
[14:22] *** tea3po joined
[14:29] *** tea3po left
[14:29] *** tea3po joined
[14:37] *** jpn left
[14:39] *** jpn joined
[14:45] *** jpn left
[14:53] *** jpn joined
[15:01] *** euandreh left
[15:13] *** euandreh joined
[15:15] *** euandreh left
[15:16] *** euandreh joined
[15:45] *** euandreh left
[15:56] *** derpydoo left
[16:26] *** jpn left
[17:16] *** jpn joined
[17:34] *** a3r0 left
[17:34] *** a3r0 joined
[17:34] *** jpn left
[17:45] *** jpn joined
[18:00] *** reportable6 left
[18:03] *** reportable6 joined
[18:38] *** jpn left
[18:44] * lizmat is on a roll: https://dev.to/lizmat/so-why-is-there-rakuast-in-the-first-place-5bga

[18:46] <SmokeMachine> I don't know if anyone here have ever used nats (http://nats.io) or would be interested in this, but I've been playing on writing a Raku client for it. It's very far to be done or good, but would someone like to take a look/critic/help? https://github.com/FCO/nats

[18:49] <SmokeMachine> I've tried to do an API based on Cro as an option to use supplies directly.

[18:50] <lizmat> question: so this is a sort of reversed memcached?

[18:56] <SmokeMachine> lizmat: no, its a "queue" system (like rabbitmq) that also has the option to store the messages (like kafka) and has a simple way to use request-response (so it can "replace" REST/HTTP) and because one subscribes to a subject, it can be used with out need of a service discovery... between other stuff..

[18:56] <SmokeMachine> lizmat: but it also have a key/value store on that, so yes, it can be a replace to memcache

[19:01] <SmokeMachine> so, for example: https://gist.github.com/FCO/a366eb93c0085909d2a2f30cb50558c2

[19:04] *** Sgeo joined
[19:05] <SmokeMachine> lizmat: https://docs.nats.io/nats-concepts/what-is-nats

[19:10] <SmokeMachine> lizmat: make sense?

[19:14] <lizmat> yes, feels a bit like CORBA: https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture

[19:14] <lizmat> afk&

[19:30] *** japhb left
[20:04] *** jpn joined
[20:08] *** jpn left
[20:34] *** ab5tract joined
[20:40] <Xliff> \o

[20:40] <Xliff> A bit off topic, but does anyone here know OpenGL?

[20:49] *** Manifest0 left
[21:38] <discord-raku-bot> <librasteve> i'm slightly adrift from micro services and go-micro and so on, but I gather that nats is a popular microservices comms framework and it looks as if your module does a very nice, clean mapping to the core raku view of 'react', 'whenever', 'supply' and so on

[21:41] <discord-raku-bot> <librasteve> i suppose that we should be keen to have a way to do the micro stack set out here https://blog.micro.mu/2016/04/11/micro-on-nats.html by asim aslan and so to do the stack chart here https://web.archive.org/web/20160323214006/https://github.com/micro/micro

[21:43] *** derpydoo joined
[21:43] <discord-raku-bot> <librasteve> so kudos to your module to make raku play (with Go?) and so on in this world - but I wonder how I can set up a raku microservice on eg AWS Lambda

[21:44] <avuserow> I think you can run docker containers on AWS lambda these days. That's probably the easiest way to get everything packaged.

[21:50] <discord-raku-bot> <librasteve> holy cow, I thought you had to load in Java or Python source

[21:53] <discord-raku-bot> <librasteve> so raku + AWS/lambda/dockerfile + nats would be quite a nice cookbook

[21:55] <SmokeMachine> librasteve: thank you. The links you sent didn’t open here… :(

[21:57] <SmokeMachine> AWS lambda accepts layers to your lambda where you could add Raku…

[21:58] <discord-raku-bot> <librasteve> https://github.com/micro/micro

[21:58] <SmokeMachine> https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html

[21:59] <discord-raku-bot> <librasteve> https://nats.io/blog/microonnats/

[22:00] <discord-raku-bot> <librasteve> is there a general raku layer?

[22:04] <discord-raku-bot> <librasteve> sorry must sleep

[22:07] *** derpydoo left
[22:13] *** Xliff left
[22:26] *** sena_kun left
[22:50] *** sena_kun joined
[22:50] <coleman> SmokeMachine: I'm a huge NATS fan

[22:52] <coleman> I have wanted a client for a while

[22:52] *** sena_kun left
[22:52] <coleman> I will take a look

[23:02] *** ab5tract left
[23:19] *** Tirifto left
[23:35] <SmokeMachine> coleman: I’ve never used that… just knew about that… but really liking what I’m seeing. My client is still in very early stages… most of features missing and no tests at all (yet)

[23:38] <SmokeMachine> coleman: but, please, take a look! And let me know if there is any suggestion/critic

[23:38] <uzl[m]> > you cannot assign to a sigilless variable, but binding to one doesn't enforce a context

[23:38] <uzl[m]> moritz Thanks but I'm still unclear why you can re-assign to a sigilless variable assigned an `Array`. Is it because an `Array` is basically a container?

[23:39] <uzl[m]> m: my \a = [1, 2]; say a; a = [3, 4]; say a;

[23:39] <camelia> rakudo-moar c2449ef60: OUTPUT: «[1 2]␤[3 4]␤»

[23:41] <gfldex> m: Array.^can('STORE')».raku.say;

[23:41] <camelia> rakudo-moar c2449ef60: OUTPUT: «(proto method STORE (Array:D: |) {*} proto method STORE (List:D: |) {*})␤»

[23:42] <gfldex> uzl[m]: looks like it ^^^

[23:46] <uzl[m]> Got it! Would it be fair to say you can re-assign to a sigilless variable as long as what you declare it with has a container? Case in point, an Array.

[23:46] <uzl[m]> This section (https://docs.raku.org/language/variables#Sigilless_variables) in the docs makes it seem as this shouldn't be possible but that's simply because an Int, which is used as an example, isn't a container:

[23:46] <uzl[m]> >Note that sigilless variable do not have associated containers. This means degrees and θ, above, actually directly represent Nums. To illustrate, try assigning to one after you've defined it:

[23:47] <uzl[m]> tbrowder__: Thanks for the link :)

[23:48] <gfldex> m: constant const = $; const.say; const = 42; const.say;

[23:48] <camelia> rakudo-moar c2449ef60: OUTPUT: «(Any)␤42␤»

[23:49] <gfldex> m: constant const = $; const := $;

[23:49] <camelia> rakudo-moar c2449ef60: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot bind to 'const' because it is a term and terms cannot be rebound␤at <tmp>:1␤------> constant const = $; const := $⏏;␤»

[23:49] <gfldex> The binding is constant, not the value that the symbol is bound to.

[23:53] <uzl[m]> Ahhh this makes sense! I tend to forget assignment in Raku is driven through containers thus it'd make sense why you can assign to a sigilless variable first assigned an Array. Now the binding is constant as you said

[23:53] <uzl[m]> I was like "why can I do a re-assignment but not a re-binding?" lol

[23:53] <uzl[m]> Thanks, this clears things up for me!

