[00:00] *** zups left
[00:00] *** gugod left
[00:00] *** peder left
[00:00] *** mark22k left
[00:00] *** spacekookie left
[00:00] *** rypervenche left
[00:00] *** charsbar left
[00:00] *** cm left
[00:00] *** eseyman left
[00:00] *** kybr left
[00:00] *** broquaint left
[00:00] *** renormalist left
[00:00] *** amenonsen left
[00:00] *** kaol left
[00:00] *** gabiruh left
[00:00] *** kaol joined
[00:00] *** renormalist joined
[00:00] *** gugod joined
[00:00] *** Manifest0 left
[00:00] *** reportable6 left
[00:00] *** kybr joined
[00:00] *** rypervenche joined
[00:00] *** peder joined
[00:00] *** rypervenche left
[00:00] *** rypervenche joined
[00:00] *** charsbar joined
[00:00] *** zups joined
[00:01] *** reportable6 joined
[00:02] *** gabiruh joined
[00:02] *** cm joined
[00:02] *** amenonsen joined
[00:02] *** mark22k joined
[00:03] *** Geth left
[00:03] *** Geth joined
[00:03] *** spacekookie joined
[00:05] *** broquaint joined
[00:05] *** eseyman joined
[00:19] *** sivoais left
[00:19] *** sivoais joined
[00:47] *** deoac joined
[01:04] *** jrjsmrtn left
[01:04] *** jrjsmrtn joined
[01:53] *** cm left
[02:01] *** deoac left
[02:09] *** cm joined
[02:17] *** cm left
[02:18] *** cm joined
[03:27] *** quotable6 left
[03:27] *** benchable6 left
[03:27] *** bloatable6 left
[03:27] *** shareable6 left
[03:27] *** evalable6 left
[03:27] *** bisectable6 left
[03:27] *** coverable6 left
[03:27] *** statisfiable6 left
[03:27] *** linkable6 left
[03:27] *** unicodable6 left
[03:27] *** committable6 left
[03:27] *** notable6 left
[03:27] *** reportable6 left
[03:27] *** nativecallable6 left
[03:27] *** sourceable6 left
[03:27] *** tellable6 left
[03:27] *** greppable6 left
[03:27] *** releasable6 left
[03:27] *** squashable6 left
[03:28] *** sourceable6 joined
[03:28] *** tellable6 joined
[03:28] *** reportable6 joined
[03:28] *** quotable6 joined
[03:28] *** benchable6 joined
[03:28] *** shareable6 joined
[03:28] *** unicodable6 joined
[03:29] *** committable6 joined
[03:29] *** coverable6 joined
[03:29] *** linkable6 joined
[03:29] *** greppable6 joined
[03:29] *** bisectable6 joined
[03:29] *** releasable6 joined
[03:29] *** statisfiable6 joined
[03:30] *** squashable6 joined
[03:30] *** evalable6 joined
[03:30] *** bloatable6 joined
[03:30] *** notable6 joined
[03:30] *** nativecallable6 joined
[04:15] *** Voldenet left
[04:15] *** Voldenet joined
[04:32] *** lucs left
[04:32] *** lucs joined
[04:36] *** elcaro left
[04:36] *** elcaro joined
[05:21] *** kjp joined
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:48] *** abraxxa joined
[07:11] *** Manifest0 joined
[07:16] *** Scotteh left
[07:16] *** Scotteh joined
[07:56] *** jpn joined
[08:05] *** jpn left
[08:08] *** ab5tract left
[08:10] *** ab5tract joined
[08:10] *** ab5tract left
[08:10] *** ab5tract joined
[08:21] *** teatwo left
[08:21] *** teatwo joined
[08:23] *** jpn joined
[08:23] *** teatwo left
[08:23] *** teatwo joined
[08:36] *** Sgeo left
[08:37] *** Sgeo joined
[08:58] *** teatwo left
[08:58] *** teatwo joined
[09:00] *** Sgeo left
[09:23] *** ab5tract left
[09:43] *** ab5tract joined
[10:17] *** abraxxa left
[10:41] *** nine left
[10:41] *** m_athias left
[10:41] *** camelia left
[10:59] *** m_athias joined
[11:04] *** nine joined
[11:16] *** ab5tract left
[11:16] *** ab5tract joined
[11:29] *** camelia joined
[11:52] *** gordonfish left
[11:53] *** gordonfish joined
[12:00] *** reportable6 left
[12:02] *** abraxxa-home joined
[12:03] *** reportable6 joined
[12:04] *** abraxxa-home left
[12:39] *** cm_ joined
[12:39] *** cm left
[12:39] *** cm_ is now known as cm

[13:58] *** nativecallable6 left
[13:58] *** coverable6 left
[13:58] *** statisfiable6 left
[13:58] *** reportable6 left
[13:58] *** unicodable6 left
[13:58] *** squashable6 left
[13:58] *** committable6 left
[13:58] *** tellable6 left
[13:58] *** bloatable6 left
[13:58] *** greppable6 left
[13:58] *** releasable6 left
[13:58] *** sourceable6 left
[13:58] *** evalable6 left
[13:58] *** notable6 left
[13:58] *** bisectable6 left
[13:58] *** shareable6 left
[13:58] *** quotable6 left
[13:58] *** linkable6 left
[13:58] *** benchable6 left
[13:59] *** bloatable6 joined
[13:59] *** bisectable6 joined
[13:59] *** coverable6 joined
[13:59] *** notable6 joined
[13:59] *** linkable6 joined
[13:59] *** reportable6 joined
[13:59] *** shareable6 joined
[13:59] *** releasable6 joined
[14:00] *** benchable6 joined
[14:00] *** committable6 joined
[14:00] *** sourceable6 joined
[14:00] *** squashable6 joined
[14:00] *** quotable6 joined
[14:01] *** nativecallable6 joined
[14:01] *** statisfiable6 joined
[14:01] *** unicodable6 joined
[14:01] *** greppable6 joined
[14:01] *** evalable6 joined
[14:01] *** tellable6 joined
[14:20] *** pierrot_ left
[14:21] *** pierrot joined
[14:33] *** synthmeat left
[14:34] *** synthmeat joined
[15:00] *** Sgeo joined
[15:24] <discord-raku-bot> <nemokosch> https://raku.land/github:masak/Alma having * as version is not nice

[15:37] <discord-raku-bot> <antononcube> üôÇ The corresponding GitHub repository has 217 open issues, (and 223 closed ones.)

[16:00] *** linkable6 left
[16:00] *** evalable6 left
[16:00] *** evalable6 joined
[16:02] *** linkable6 joined
[16:11] <discord-raku-bot> <nemokosch> Including several by M√§sak himself since he stopped doing anything substantial

[16:18] <lizmat> masak is behind the great firewall nowadays *and* busy with other stuff

[16:42] <discord-raku-bot> <nemokosch> regardless, a *-versioned distribution popping up in raku.land is probably an anomaly

[16:42] <discord-raku-bot> <nemokosch> sitting on top of "recent dists" simply because some textual modification

[16:48] <lizmat> I've created a PR with suggestion of publishing on zef

[16:49] <lizmat> we can also of course remove Alma from the ecosystem

[17:02] *** evalable6 left
[17:02] *** linkable6 left
[17:03] *** linkable6 joined
[17:05] *** evalable6 joined
[17:14] *** discord-raku-bot left
[17:14] *** discord-raku-bot joined
[17:18] * leont repeats his rant about versions versus version ranges

[17:18] <discord-raku-bot> <librasteve> looking again at Alma - seems like there are some familiar things from the recent AST work ‚Ä¶ and yet I do not recall seeing any info on macros in the recent AST material ‚Ä¶ did I miss anything?

[17:20] *** timo left
[17:21] *** timo joined
[17:23] <discord-raku-bot> <antononcube> @leont Please summarize your recent publishing of "SQL::Abstract" in Zef ecosystem. üôÇ

[17:24] <leont> antoncube: in what way do you mean that?

[17:25] <discord-raku-bot> <antononcube> @leont Agh, something you already did here: https://github.com/Leont/sql-abstract/blob/main/Changes

[17:26] <discord-raku-bot> <antononcube> I should start keeping "Changes" files in my packages...

[17:29] *** coleman left
[17:30] <lizmat> at the Raku Core Summit we agreed to look at what macros are going to do *after* the rest of RakuAST has materialized

[17:31] *** coleman joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:02] *** nebuchad` left
[18:03] *** nebuchad` joined
[18:04] <discord-raku-bot> <librasteve> lizmat: makes sense... I look forward to being able to instantiate objects via macros so that they can be precomped

[18:10] <coleman> m: sub foo(@*cmd) { say @*cmd }; foo(<123>);

[18:10] <camelia> rakudo-moar 42a92611b: OUTPUT: ¬´Type check failed in binding to parameter '@*cmd'; expected Positional but got IntStr (IntStr.new(123, "123"))‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:11] <coleman> m: sub foo(@*cmd) { say @*cmd }; foo(<123 456>);

[18:11] <camelia> rakudo-moar 42a92611b: OUTPUT: ¬´(123 456)‚ê§¬ª

[18:11] <coleman> I was expecting <123> to work

[18:11] <[Coke]> m: sub foo(@*cmd) { say @*cmd }; foo(|<123>)

[18:11] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´Type check failed in binding to parameter '@*cmd'; expected Positional but got IntStr (IntStr.new(123, "123"))‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:11] <coleman> m: sub foo(@*cmd) { say @*cmd }; foo(('123'));

[18:11] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Calling foo(Str) will never work with declared signature (@*cmd)‚ê§at <tmp>:1‚ê§------> sub foo(@*cmd) { say @*cmd }; ‚èèfoo(('123'));‚ê§¬ª

[18:12] <[Coke]> m: sub foo(@*cmd) { say @*cmd }; foo(<123>,)

[18:12] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´Type check failed in binding to parameter '@*cmd'; expected Positional but got IntStr (IntStr.new(123, "123"))‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:12] <discord-raku-bot> <nemokosch> <123> is an Allomorph, not a list

[18:12] <coleman> m: sub foo(@*cmd) { say @*cmd }; foo(@('123'));

[18:12] <discord-raku-bot> <nemokosch> that's not going to work

[18:12] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(123)‚ê§¬ª

[18:12] <[Coke]> Note the @* parameter, I am assuming that's why he thought it might.

[18:12] <[Coke]> (instead of a simple @)

[18:12] <coleman> m: sub foo(@*cmd) { say @*cmd }; my @x = <123>; foo(@x);

[18:13] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´[123]‚ê§¬ª

[18:13] <discord-raku-bot> <nemokosch> that gets consumed by the bridge

[18:13] <discord-raku-bot> <nemokosch> as markdown

[18:14] <[Coke]> m: <123>.WHAT.say

[18:14] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(IntStr)‚ê§¬ª

[18:14] <discord-raku-bot> <nemokosch> oh, it's *@, not @*

[18:14] <[Coke]> m: <123 2345>.WHAT.say

[18:14] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(List)‚ê§¬ª

[18:14] <discord-raku-bot> <nemokosch> @* is dynamic

[18:15] *** jpn left
[18:15] <discord-raku-bot> <nemokosch> (and you should really be using **@ because *@ auto-flattens the received arguments)

[18:16] <discord-raku-bot> <nemokosch> Coke: good that you are here, I have a wholesome issue for zef-deps

[18:16] <discord-raku-bot> <nemokosch> zef broke one of the tests

[18:16] <coleman> I am indeed mixing up *@ and @*; But the type of <123> was surprising

[18:17] <discord-raku-bot> <nemokosch> I would say it kinda makes sense, given the round parens

[18:17] <discord-raku-bot> <nemokosch> but then

[18:17] <discord-raku-bot> <nemokosch> m: <foo >.WHAT.say

[18:17] <discord-raku-bot> <nemokosch> why doesn't it run

[18:17] <discord-raku-bot> <Raku eval>  (Str) 

[18:18] <discord-raku-bot> <nemokosch> so yeah, not even the whitespace helps here

[18:19] <[Coke]> m: qqw{123}.WHAT.say'

[18:19] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> qqw{123}.WHAT.say‚èè'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§        stat‚Ä¶¬ª

[18:19] <[Coke]> m: qqw{123}.WHAT.say

[18:19] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(Str)‚ê§¬ª

[18:19] <[Coke]> m: qqw{123 234}.WHAT.say

[18:19] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(List)‚ê§¬ª

[18:20] <[Coke]> I believe it's just nice syntax for a q*w op.

[18:20] <coleman> it seems like only @( ) guarantees a "list literal"

[18:20] <discord-raku-bot> <nemokosch> [] kinda does, too, but that's also just a coercion call

[18:20] <discord-raku-bot> <nemokosch> so [[whatever]] and [whatever] are the same

[18:21] <gfldex> m: sub foo(@*cmd) { say @*cmd }; foo(@<123>)

[18:21] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(Nil)‚ê§¬ª

[18:21] <discord-raku-bot> <nemokosch> @( ) calls .list and [ ] calls .Array iirc

[18:21] <gfldex> m: sub foo(@*cmd) { say @*cmd }; foo(@(<123>))

[18:21] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(123)‚ê§¬ª

[18:21] <gfldex> Anon got me again!

[18:22] <discord-raku-bot> <nemokosch> sigils without the paren should be forbidden, change my mind üê∏

[18:23] <discord-raku-bot> <nemokosch> I don't think it would be even hard to implement that "ban"

[18:24] <discord-raku-bot> <nemokosch> just check why $[0, 1] works and remove the matching grammar rule

[18:25] <gfldex> <123> is a plural form for a singular thing. Instead of whining Raku will invode the single argument rule and convert to a singular form.

[18:26] <gfldex> m: %h = :1a, :2b; say %h<a>.WHAT;

[18:26] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '%h' is not declared.  Perhaps you forgot a 'sub' if this was‚ê§intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> <BOL>‚èè%h = :1a, :2b; say %h<a>.WHAT;‚ê§¬ª

[18:26] <gfldex> m: my %h = :1a, :2b; say %h<a>.WHAT;

[18:26] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(Int)‚ê§¬ª

[18:26] <gfldex> %h<a> does not return a plural form. I my eyes that makes sense.

[18:27] <gfldex> m: sub foo(@*cmd) { say @*cmd }; foo(123,);

[18:27] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Calling foo(Int) will never work with declared signature (@*cmd)‚ê§at <tmp>:1‚ê§------> sub foo(@*cmd) { say @*cmd }; ‚èèfoo(123,);‚ê§¬ª

[18:27] <gfldex> m: sub foo(@*cmd) { say @*cmd }; foo (123,);

[18:27] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´(123)‚ê§¬ª

[18:27] <gfldex> That's the one I don't like much.

[18:28] <[Coke]> gfldex: do you mean to be using @* and not *@ ?

[18:28] <[Coke]> we switched halfway through. :)

[18:29] <gfldex> Well, the need of *@ is kinda a consequence of the single argument rule for literals. And to make feed operators work.

[18:30] <discord-raku-bot> <nemokosch> opened the issue for zef-deps

[18:30] <[Coke]> nemokosch: thanks for the bug report, will drop a new version this weekend.

[18:31] <discord-raku-bot> <nemokosch> thank you

[18:38] <discord-raku-bot> <librasteve> dons hard hat

[18:38] <discord-raku-bot> <librasteve> m: say (123) ~~ Iterable

[18:39] <discord-raku-bot> <Raku eval>  False 

[18:39] <discord-raku-bot> <librasteve> m: say (123, 456) ~~ Iterable

[18:39] <discord-raku-bot> <Raku eval>  True 

[18:39] <discord-raku-bot> <librasteve> m: say <123> ~~ Iterable

[18:39] <discord-raku-bot> <Raku eval>  False 

[18:39] <discord-raku-bot> <librasteve> m: say <123 456> ~~ Iterable

[18:39] <discord-raku-bot> <Raku eval>  True 

[18:40] <discord-raku-bot> <librasteve> BUT, the angle brackets are also shorthand for Allomorph literal

[18:40] <discord-raku-bot> <librasteve> m: say <123>.WHAT

[18:40] <discord-raku-bot> <Raku eval>  (IntStr) 

[18:41] <gfldex> I strongly advice not to use `~~ Iterable`.

[18:41] <discord-raku-bot> <librasteve> AND, also shorthand for qqw

[18:41] <discord-raku-bot> <librasteve> m: dd <a b c>

[18:42] <discord-raku-bot> <Raku eval>  ("a", "b", "c") 

[18:42] <discord-raku-bot> <librasteve> gfldex: why's that then?

[18:42] <gfldex> There is lots of stuff that got a .iterable but does not do Iterable.

[18:43] <discord-raku-bot> <librasteve> so what's the best way to test for plurality?

[18:43] <discord-raku-bot> <nemokosch> or not even .iterable but .list

[18:44] <discord-raku-bot> <nemokosch> looking at you, Blobs and Bufs

[18:45] <gfldex> In doubt, don't test for plurality and call .map or .grep . And no, I don't like that answer either.

[18:45] <gfldex> Iterators where added quite late to the language and clash with some of the design.

[18:46] <gfldex> `for` used to forward to .map and still does when you `do for`.

[18:47] <discord-raku-bot> <librasteve> m: 1.map(*.say)

[18:47] <discord-raku-bot> <Raku eval>  1 

[18:48] <gfldex> Before lizmat added iterators, all you had to do for a custom type was to overload .map and .grep and iteration was covered.

[18:48] <gfldex> Any got .map .

[18:48] <discord-raku-bot> <librasteve> so I call map on a single item and get "True" ... how do I use that to test for plurality?

[18:49] <gfldex> Sadly, gather/take is quite slow and that makes iterators useful.

[18:50] <discord-raku-bot> <librasteve> m: my Buf $b .= new(^10); say $b ~~ Iterable;

[18:50] <discord-raku-bot> <Raku eval>  False 

[18:50] <gfldex> You can't really test for plurality. Nor should you need to care. That's what the one argument rule and slurpy arguments are for.

[18:50] <gfldex> m: Buf.^mro.say;

[18:50] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´No such method 'mro' for invocant of type‚ê§'Perl6::Metamodel::ParametricRoleGroupHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:50] <discord-raku-bot> <librasteve> so my Buf has a list method but is not iterable ... well that's fine by me

[18:50] <gfldex> m: Buf[8].^mro.say;

[18:50] <camelia> rakudo-moar 5d784a9c9: OUTPUT: ¬´No such method 'mro' for invocant of type‚ê§'Perl6::Metamodel::CurriedRoleHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:51] <discord-raku-bot> <librasteve> gfldex: I like that usually I don't have to care - but sometimes it may be that I want to care

[18:52] <discord-raku-bot> <librasteve> anyway - I'll put on my back burner for now

[18:52] <gfldex> I have the same urge. Raku is not the answer. At least not v6.d and v6.e .

[18:53] *** coleman left
[18:53] <discord-raku-bot> <librasteve> that's the f burner then

[18:55] *** coleman joined
[18:59] *** jpn joined
[19:05] *** jpn left
[19:20] <discord-raku-bot> <nemokosch> you can't not care when literally most of the essential data constructions may give you a sole instance or a list depending on the data they receive

[19:56] <discord-raku-bot> <librasteve> m: sub plural(\x) { my $c++ for |x; ($c-1).so } say plural <123>;

[19:56] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Strange text after block (missing semicolon or comma?) at /home/glot/main.raku:1 ------> plural(\x) { my $c++ for |x; ($c-1).so }‚èè say plural <123>;     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop 

[19:57] <discord-raku-bot> <librasteve> m: sub plural(\x) { my $c++ for |x; ($c-1).so }; say plural <123>;

[19:57] <discord-raku-bot> <Raku eval>  False 

[19:59] <gfldex> @librasteve .elems is not a bad idea until you hit 1..* :->

[20:00] <gfldex> But then, one could argue an infinite list to be just _one_ things.

[20:00] <gfldex> Plural is equally hard then singular, it seems.

[20:02] <discord-raku-bot> <librasteve> well, maybe need ot guard things like infinite ranges...

[20:03] <gfldex> You can't really do that, because of iterators. 

[20:05] <discord-raku-bot> <librasteve> sub plural(\x) {      return True with x[1];     my $c++ for |x; ($c-1).so  } 

[20:05] *** linkable6 left
[20:05] *** evalable6 left
[20:05] <gfldex> In Raku custom types can be infinite and lazy but wont tell you unless you try to iterate 'til the end.

[20:05] *** linkable6 joined
[20:06] <gfldex> And they don't have to implement AT-POS, either.

[20:06] *** evalable6 joined
[20:09] <discord-raku-bot> <nemokosch> .elems is usually not a good idea unless you really want to get an exact number

[20:10] <discord-raku-bot> <nemokosch> m: (1..*).elems.say

[20:10] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot .elems a lazy list onto a Range   in block <unit> at main.raku line 1  

[20:10] <discord-raku-bot> <nemokosch> bang

[20:10] <discord-raku-bot> <nemokosch> (the bogus error message has been fixed since)

[20:11] <discord-raku-bot> <librasteve> thought about .pull-one but then that is not idempotent

[20:13] <discord-raku-bot> <librasteve> so basically raku is lisp under the hood

[20:14] *** teatime joined
[20:14] *** teatwo left
[20:15] <gfldex> In Lisp, everything is a list. It does not have singular. Raku clearly does. However, it it not your concern to force conversion between singular and plural. You just tell the compiler what you want to do. And then the "strangly consistent"-thing happens.

[20:18] <discord-raku-bot> <nemokosch> this is not the "strangely consistent" part, this is the "do what I mean" part

[20:22] *** teatime left
[20:22] *** teatime joined
[20:23] *** teatwo joined
[20:24] *** jpn joined
[20:26] *** tea3po joined
[20:27] *** teatime left
[20:29] *** jpn left
[20:29] *** teatwo left
[20:29] *** tea3po left
[20:30] *** tea3po joined
[20:55] *** jpn joined
[20:59] <lizmat> gfldex: for foo { }   is basically   foo.iterator.sink-all   under the hood

[21:04] <lizmat> foo.map   is basically   foo.iterator.push-all(@result)

[21:04] <lizmat> it *is* the same mechanism under the hood, just different methods being called on the iterator

[21:07] *** NemokoschKiwi joined
[21:18] *** tea3po left
[21:19] *** tea3po joined
[21:26] *** NemokoschKiwi left
[21:38] *** deriamis joined
[21:41] *** melezhik joined
[21:41] <melezhik> o/

[21:41] <melezhik> Announcement for SparrowCI users - https://dev.to/melezhik/sparrowci-has-moved-to-a-free-hosting-and-here-are-consequences-110o

[21:41] <melezhik> weekly: https://dev.to/melezhik/sparrowci-has-moved-to-a-free-hosting-and-here-are-consequences-110o

[21:41] <notable6> melezhik, Noted! (weekly)

[21:46] *** jpn left
[21:50] *** melezhik left
[22:50] *** evalable6 left
[22:50] *** linkable6 left
[22:50] *** evalable6 joined
[22:50] *** defaultxr left
[22:50] *** modula joined
[22:52] *** linkable6 joined
[23:19] <ugexe> I‚Äôm pretty sure there are precompilation releases for arm

