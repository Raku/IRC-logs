[16:53] <lizmat> jdv thanks for the nudge

[16:53] <lizmat> well reconcile logs tomorrow

[16:53] <jdv> oh neat, thanks

[16:54] <lizmat> for the record: there's a log file for each day starting at midnight UTC

[16:54] <lizmat> only "completed" log files can be easily merged with IRC::Log modules

[16:58] *** Geth left
[16:58] *** Geth joined
[17:02] <discord-raku-bot> <nemokosch> No, the precedence shouldn't make a difference here, I don't think so

[17:03] <discord-raku-bot> <nemokosch> The precedence is normally higher - that's what it even means to have an expression on the right handside

[17:04] <discord-raku-bot> <nemokosch> A simple assignment already has higher precedence than &&

[17:11] <discord-raku-bot> <nemokosch> .s/assignment/equality check

[17:19] *** abraxxa left
[17:29] *** Geth left
[17:29] *** Geth joined
[18:16] <discord-raku-bot> <nemokosch> m: class T { method Bool { note; False}}; say T.so && T.so

[18:16] <evalable6> nemokosch, rakudo-moar 1e5de1231: OUTPUT: «Noted␤False␤»

[18:16] <discord-raku-bot> <Raku eval>  False  Noted 

[18:17] <discord-raku-bot> <nemokosch> this already shows that precedence shouldn't be an excuse...

[18:17] *** bartolin left
[18:18] <discord-raku-bot> <nemokosch> m: class T { method Bool { note; False}}; say ?T && ?T

[18:18] <evalable6> nemokosch, rakudo-moar 1e5de1231: OUTPUT: «Noted␤False␤Noted␤»

[18:18] <discord-raku-bot> <Raku eval>  False  Noted Noted 

[18:18] <discord-raku-bot> <nemokosch> um

[18:18] *** jpn left
[18:19] <discord-raku-bot> <nemokosch> Two bots is a bit too much

[18:19] <discord-raku-bot> <nemokosch> Anyway, this definitely seems to be a bug

[18:19] <discord-raku-bot> <nemokosch> m: class T { method Bool { note; False}}; say Bool(T) && Bool(T)

[18:19] <evalable6> nemokosch, rakudo-moar 1e5de1231: OUTPUT: «(Bool)␤»

[18:19] <discord-raku-bot> <Raku eval>  (Bool) 

[18:20] <discord-raku-bot> <nemokosch> this is even worse

[18:20] <discord-raku-bot> <nemokosch> m: class T { method Bool { note; False}}; say T.Bool && T.Bool

[18:20] <evalable6> nemokosch, rakudo-moar 1e5de1231: OUTPUT: «Noted␤False␤»

[18:20] <discord-raku-bot> <Raku eval>  False  Noted 

[18:22] *** bartolin joined
[18:25] <discord-raku-bot> <Nahita> > But that's not really about short-circuiting; it's about the precedence hmm, i don't think so because if you replace ?Ts with ?T.new for example, it notes once, i.e., shortcircuits as expected. ?T somehow gets evaluated eagerly

[18:25] <discord-raku-bot> <nemokosch> m: class T { method Bool { note; False}}; say Bool(T.new) && Bool(T.new)

[18:25] <evalable6> nemokosch, rakudo-moar 1e5de1231: OUTPUT: «Noted␤False␤»

[18:25] <discord-raku-bot> <Raku eval>  False  Noted 

[18:25] <discord-raku-bot> <nemokosch> less of a nonsense suddenly

[18:27] <discord-raku-bot> <codesections> @nemokosch @Nahita Yep, you're both right; the current behavior is a bug but it looks like it has already been fixed for RakuAST.

[18:27] <discord-raku-bot> <codesections> I opened (and immediately closed)  https://github.com/rakudo/rakudo/issues/5410 to reflect the bug

[18:28] <discord-raku-bot> <nemokosch> thunking is much better with RakuASTű

[18:28] <discord-raku-bot> <nemokosch> we could use the "fixed in RakuAST" for some other issues as well I think

[18:30] <discord-raku-bot> <nemokosch> iirc this is also fixed https://github.com/rakudo/rakudo/issues/5239

[18:32] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/issues/5119 this as well

[18:37] *** jpn joined
[19:17] *** itaipu joined
[19:18] *** jpn left
[19:27] *** teatwo left
[19:28] *** teatwo joined
[19:35] *** jpn joined
[19:41] *** jpn_ joined
[19:43] *** jpn left
[19:53] *** cleo left
[20:10] *** cleo joined
[20:17] <discord-raku-bot> <codesections> @nemokosch Yes for the second one (and now closed); no for the first, saddly

[20:19] <discord-raku-bot> <nemokosch> oh right

[20:19] <discord-raku-bot> <nemokosch> sadly, I tend to remember my thought patterns... the outcome much less often

[20:19] <discord-raku-bot> <nemokosch> perhaps this was the case where it "worked" as long as $_ hasn't been set to anything

[20:49] *** discoD joined
[20:54] *** discoD left
[20:54] *** discoD joined
[21:06] *** xinming left
[21:08] *** xinming joined
[22:01] *** leah2 left
[22:10] *** Sgeo joined
[22:14] *** Geth left
[22:14] *** Geth joined
[22:14] *** leah2 joined
[22:18] *** Geth left
[22:18] *** Geth joined
[22:22] *** lichtkind_ joined
[22:22] *** lichtkind__ left
[22:26] *** merp left
[23:17] *** lichtkind_ left
[23:33] *** merp joined
[23:41] *** teatime joined
[23:43] *** teatwo left
