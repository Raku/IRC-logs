[00:04] *** jgaz joined
[00:07] *** AlexDaniel left
[00:27] *** deoac left
[00:31] *** jpn left
[00:33] *** jpn joined
[00:56] *** jpn left
[01:00] <tbrowder__> .ask ugexe ^^^

[01:00] <tellable6> tbrowder__, I'll pass your message to ugexe

[01:02] *** jpn joined
[01:02] *** tellable6 left
[01:02] *** tellable6 joined
[01:07] *** tellable6 left
[01:07] *** tellable6 joined
[01:09] *** jpn left
[01:11] *** jpn joined
[01:45] *** jpn left
[01:47] *** jpn joined
[02:00] *** jpn left
[02:00] *** jpn joined
[02:22] *** jpn left
[02:29] *** jpn joined
[02:42] *** jpn left
[02:48] *** jpn joined
[02:55] <ugexe> Zef uses it for ‚Äîversion 

[02:55] <tellable6> 2023-10-02T01:00:18Z #raku <tbrowder__> ugexe ^^^

[02:55] <ugexe> so yeah

[02:56] <ugexe> You‚Äôre using -Ilib

[02:56] <ugexe> use -I.

[02:57] *** jpn left
[02:58] *** jpn joined
[03:03] *** jpn left
[03:04] *** jpn joined
[03:15] *** jpn left
[03:15] *** jpn joined
[03:24] *** jpn left
[03:25] *** jpn joined
[03:34] *** jpn left
[03:41] *** jpn joined
[03:53] *** jpn left
[03:54] *** jpn joined
[04:03] *** jpn left
[04:04] *** jpn joined
[04:28] *** jpn left
[05:28] *** committable6 left
[05:28] *** bisectable6 left
[05:30] *** bisectable6 joined
[05:31] *** committable6 joined
[06:48] *** abraxxa joined
[06:59] *** abraxxa1 joined
[06:59] *** abraxxa left
[07:33] *** sena_kun joined
[07:49] *** Sgeo left
[07:56] *** dakkar joined
[07:58] *** Manifest0 joined
[08:02] *** jgaz left
[08:10] *** jpn joined
[08:34] *** melezhik joined
[08:37] <melezhik> .tell AlexDaniel I successfully use ZNC to send messages from SparrowCI builds to raku-sparrow channel, the things is you have to run ZTC as a service, logging to ZTC UI, create a user that would connect to a required channel and you're all set, after that you can use your ZTC as proxy on localhost , see as an example -

[08:37] <tellable6> melezhik, I'll pass your message to AlexDaniel

[08:37] <melezhik> https://github.com/melezhik/SparrowCI/blob/main/irc/bot.raku#L38-L48

[08:39] <melezhik> "create a user that would connect to a required channel" with that being send this should be a real user that have an access to a raku channel

[08:44] <melezhik> also when you do a setup you'll will probably encounter this (if one uses a self signed ssl cert for ZTC ) ¬†- https://github.com/lizmat/IRC-Client/issues/68

[08:45] <melezhik> there is workaround in the isseu

[08:45] *** melezhik left
[09:30] *** sena_kun left
[10:50] <tbrowder__> ugexe: i'm trying to use it inside a sub in module and .WHAT tells me it is a Str, but the only value I can get from it is a '*'. i'm trying to get a useful example for the docs

[10:51] <tbrowder__> is it a raku bug? or is it not intended to be used internally?

[10:52] <tbrowder__> as .content can be used for introspection

[10:53] *** lichtkind joined
[11:15] <tbrowder__> i've tried installing the module with zef and using its installed introspection executable to show its version and still get the '*'

[11:16] <tbrowder__> so does Zef "cheat" and use .content?

[11:16] <tbrowder__> gotta look at roast...

[11:17] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/10/02/2023-40-less-than-4-weeks/

[11:33] <tbrowder__> is roast using main now?

[11:38] <tbrowder__> looks like still using master, cool

[11:43] <ugexe> I don‚Äôt know what you‚Äôre doing, but DISTRIBUTION does exactly what you want it to 

[11:43] <ugexe> that is how it is used in zef and other code in the wild 

[11:46] <ugexe> https://github.com/ugexe/zef/blob/bf99522872de414a415b4ae578f0767e123e42f2/lib/Zef/CLI.rakumod#L307

[11:48] <ugexe> If you‚Äôre seeing * for a version it almost certainly means you‚Äôre using -Ilib somewhere to point at the distribution 

[11:48] <ugexe> it doesn‚Äôt matter if it‚Äôs also installed if you‚Äôre also using -Ilib 

[11:49] <leont> Oh right, I should start writing slides for the conference

[11:49] <lizmat> leont: indeed!  :-)

[11:50] <tbrowder__> aha! i don't see any tests other than definedness on $?DISTRIBUTION

[11:50] <tbrowder__> looks like serendipty that .content works

[11:51] <tbrowder__> *serendipity

[11:51] <ugexe> It works, trust me 

[11:52] <ugexe> You‚Äôre using -Ilib somewhere. Find where and you‚Äôll know why your code isn‚Äôt working 

[11:54] <ugexe> I know youre using -Ilib because I have a mental model of how that code works, and there are only two scenarios it would give that version: youre explicitly putting that as the version or code is using -Ilib or use lib lib 

[11:55] *** ProperNoun joined
[11:57] <discord-raku-bot> <nemokosch> I should also start writing slides for the conference, to get a presentation at all üòÑ

[11:57] <discord-raku-bot> <nemokosch> the idea itself has been clear for a while but refactoring old Atom code turned out to be a great distraction...

[11:58] <discord-raku-bot> <nemokosch> Is anybody using Pulsar, by the way?

[12:04] <lizmat> nemokosch looks like you didn't submit a talk proposal yet.  Less than 14 days to do that.  And the program is already at 5+ hours...

[12:06] <discord-raku-bot> <nemokosch> I think that's by far the shortest it has been so that part shouldn't be a problem

[12:06] <discord-raku-bot> <nemokosch> anyway, if I do make it, I might as well record it and stuff, it definitely won't be in vain

[12:08] *** AlexDaniel joined
[12:10] <discord-raku-bot> <nemokosch> I was planning to only submit if (when) it's ready so there is nothing to lose

[12:18] <lizmat> nemokosch  understood

[12:26] <ugexe> tbrowder__: can show me your code and tell me how you're invoking it

[12:26] <ugexe> i can probably figure out your problem in a minute or two if i just see it

[12:26] *** [Coke] joined
[12:35] <tbrowder__> WILCO i'll put the toy module on github, that work for you?

[12:36] *** AlexDaniel left
[12:36] *** AlexDaniel joined
[12:39] *** jpn left
[12:40] *** jpn joined
[12:45] *** nalin joined
[12:49] <ugexe> tbrowder__: yeah

[12:52] *** nalin left
[13:29] <tbrowder__> ok, see github.com/tbrowder/MyFoo

[13:30] <tbrowder__> looks like i need to use some kind of proper cheat for the meta as you do in Zef

[13:30] <tbrowder__> gotta go for a while

[13:32] <tbrowder__> using .content is easiest as i use it in one of the subs

[13:32] <tbrowder__> (prior to looking at Zef)

[13:32] <tbrowder__> bye..l

[14:06] <tbrowder__> i can't use zef because it's for an example for the docs

[14:07] <tbrowder__> on how to use $?DISTRIBUTION.meta

[14:12] <ugexe> tbrowder__: https://github.com/tbrowder/MyFoo/blob/e74bd0143a45e5b156ca0d598e6334c0f3a283cb/bin/test-distribution#L5C17-L5C17

[14:12] <ugexe> like i said earlier: you are using -Ilib or use lib "lib"

[14:13] <ugexe> either change that to `use lib "."`, or (as I would suggest) invoke your code with -I. and remove the `use lib ...` entirely

[14:15] <ugexe> to be clear: bin/test-distribution has `use lib <./lib>;` in it

[14:37] <SmokeMachine> Hi everybody! I was thinking... is there a better way of doing something like this (I mean the patter matching) then needing to duplicate the signature and without using multi subs?

[14:37] <SmokeMachine> m: for [\(42, "bla"), \(13), \("ble")] { when :(Int, Str) { my :(Int $num, Str $str) := .Capture; say $num; say $str }; when :(Int) { my :(Int $i) := .Capture; say $i }; default { .say } }

[14:37] <camelia> rakudo-moar c81441671: OUTPUT: ¬´42‚ê§bla‚ê§13‚ê§\("ble")‚ê§¬ª

[14:41] <SmokeMachine> I also thought something like this, but it doesn't really work and that's too odd to have an empty block because everything is done on the test...

[14:41] <SmokeMachine> m: for [\(42, "bla"), \(13), \("ble")] { when -> (Int $num, Str $str) { say $num; say $str; True } {}; when -> (Int $i) { say $i; True } {}; default { .say } }

[14:41] <camelia> rakudo-moar c81441671: OUTPUT: ¬´42‚ê§Too few positionals passed to '<anon>'; expected 2 arguments but got 1 in sub-signature‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§bla‚ê§¬ª

[14:43] <discord-raku-bot> <nemokosch> and it didn't even work, hm

[14:47] <SmokeMachine> nemokosch: yes, it didn't...

[14:47] <tbrowder__> i guess using JSON::Fast is cheating, too  :-(

[14:47] <tbrowder__> erg...

[14:56] <SmokeMachine> I may do something like this, but the syntax doesn't feel right:

[14:56] <SmokeMachine> m: sub match(Capture $data, *@funcs where *.all ~~ Callable) { @funcs.first(-> &func { $data ~~ &func.signature }).(|$data) }; for [\(42, "bla"), \(13), \("ble")] { match .Capture, -> Int $num, Str $str { say $num; say $str }, -> Int $i { say $i; True }, -> |c { say c } }

[14:56] <camelia> rakudo-moar c81441671: OUTPUT: ¬´42‚ê§bla‚ê§13‚ê§\("ble")‚ê§¬ª

[14:57] <SmokeMachine> maybeI need a slang for that... :(

[15:07] <tbrowder__> no, just need correct syntax...

[15:10] <ugexe> tbrowder__: did you see my earlier message?

[15:10] <ugexe> you are using `use lib "lib"` like i said would be the issue

[15:10] <ugexe> just remove that

[15:11] <ugexe> ttps://github.com/tbrowder/MyFoo/blob/e74bd0143a45e5b156ca0d598e6334c0f3a283cb/bin/test-distribution#L5C17-L5C17

[15:11] <ugexe> delete that line

[15:12] <tbrowder__> ugexe: ok, thnks, back in a few hrs

[15:19] <SmokeMachine> now I'm thinking on something like this (if I'm able to remove the dyn var):

[15:19] <SmokeMachine> m: sub match(&func) { when &func.signature { func |$*_ } }; for [\(42, "bla"), \(13), \("ble")] { my $*_ = $_; match -> Int $num, Str $str { say $num; say $str }; match -> Int $i { say $i; True }; match -> |c { say c } }

[15:19] <camelia> rakudo-moar c81441671: OUTPUT: ¬´\(42, "bla")‚ê§\(13)‚ê§\("ble")‚ê§¬ª

[15:19] <SmokeMachine> any idea on how to remove that dynamic var?

[15:20] <SmokeMachine> that's not working... :(

[16:03] *** jpn left
[16:40] *** dakkar left
[16:46] <Voldenet> how hacky can it be?

[16:47] <Voldenet> nqp::getlexcaller(<$_>) could work

[16:48] *** coleman left
[16:49] <Voldenet> m: use nqp; sub match(&func) { $_ = nqp::getlexcaller(<$_>); when $_ ~~ &func.signature { func |$_ } }; for [\(42, "bla"), \(13), \("ble")] { match -> Int $num, Str $str { say $num; say $str }; match -> Int $i { say $i; True }; match -> |c { say c } }

[16:49] <camelia> rakudo-moar c81441671: OUTPUT: ¬´42‚ê§bla‚ê§\(42, "bla")‚ê§13‚ê§\(13)‚ê§\("ble")‚ê§¬ª

[16:49] <Voldenet> figures

[16:49] *** coleman joined
[16:50] *** coleman left
[16:50] *** coleman joined
[16:51] *** abraxxa1 left
[16:51] <Voldenet> I think there was some op for quitting that parent context as well

[16:55] *** swaggboi left
[16:57] <Voldenet> throwpayloadlexcaller with nqp::const::CONTROL_RETURN, but it doesn't quite work with scope

[16:58] *** swaggboi joined
[17:02] <Voldenet> how about this

[17:02] <Voldenet> m: use nqp; sub match(*@f) { $_ = nqp::getlexcaller(<$_>); for @f -> &func { when $_ ~~ &func.signature { return func |$_; }; } }; for [\(42, "bla"), \(13), \("ble")] { match -> Int $num, Str $str { say $num; say $str }, -> Int $i { say $i; True }, -> |c { say c } }

[17:02] <camelia> rakudo-moar c81441671: OUTPUT: ¬´42‚ê§bla‚ê§13‚ê§\("ble")‚ê§¬ª

[17:02] <Voldenet> SmokeMachine: ^ slightly specific syntax, but it is comfortable to use at least

[17:04] <SmokeMachine> Voldenet: thanks! That looks much better

[17:30] *** kathe joined
[17:30] <kathe> hi. :)

[17:31] <lizmat> kathe  o/

[17:32] <kathe> hey, lizmat! o/

[17:32] <kathe> glad to have found you. was looking to interact with you today. :)

[17:33] <kathe> i am exiting the electronic digital computing world.

[17:33] <lizmat> well, here I am...  

[17:33] <lizmat> I guess you mean exciting ?

[17:33] <kathe> no no, i really meant "exiting".

[17:33] <lizmat> ah?   how come ?

[17:34] <kathe> i saw interviews of "siddharth kara"; author of "cobalt red".

[17:34] <kathe> consequently, realized that our entire infrastructure is destructive towards mother earth.

[17:35] <kathe> production, operation, and the eventual disposal, all pollute, severely.

[17:35] <kathe> i have been conducting an experiment to see if i can survive with minimal finances.

[17:35] <kathe> in a way, it was successful.

[17:35] <lizmat> I see.   I understand that the next generation of Li-ion batteries will be without Cobalt btw

[17:36] <kathe> "cobalt red" is just the triggering point for me.

[17:36] <kathe> even before we had cobalt-based batteries, we were still "raping" mother earth.

[17:36] <lizmat> I see..   well I wish you well outside in the non-electronic, non-digital, non-computing world  :-)

[17:36] <kathe> thanks lizmat. :)

[17:37] <kathe> you were one of the kindest people out here, so i was looking forward to saying goodbye, to you especially.

[17:37] <lizmat> thank you for your kind words

[17:38] <kathe> there was one more person who would give virtual hugs to people who were annoyed and ranted against "raku".

[17:38] <kathe> i can't remember his/her/their handle.

[17:38] <kathe> hope they read my message too.

[17:39] <kathe> wish you all a productive life ahead. all have their own perspective. :)

[17:39] <lizmat> I'm sure they will, and if they happened to be offline now, they can always check https://irclogs.raku.org/raku/live.html

[17:39] <kathe> cool.

[17:39] <lizmat> kathe: take care, and have a happy life!

[17:40] <kathe> i miss mr. wall out here. wish him good health.

[17:40] <kathe> bye all.

[17:40] <kathe> and lizmat, you to have a happy life ahead.

[17:40] *** kathe left
[17:40] <El_Che> bye kathe, hopefully you'll find what you're looking for

[18:04] *** MasterDuke joined
[18:05] *** jpn joined
[18:07] *** sena_kun joined
[18:17] *** sena_kun left
[18:18] *** sena_kun joined
[18:25] <discord-raku-bot> <nemokosch> what does nqp::getlexcaller do? why is it in angular quotes?

[18:36] <tonyo> https://github.com/Raku/nqp/blob/main/docs/ops.markdown#getlexcaller

[18:38] *** Tirifto joined
[18:38] *** Tirifto_ left
[18:39] <tonyo> looks like it just iterates the environments until it finds the var or is undef

[18:44] <discord-raku-bot> <nemokosch> thanks

[18:46] <discord-raku-bot> <nemokosch> Then maybe it could be written as CALLER::<$_> as well?

[18:46] <discord-raku-bot> <nemokosch> without explicitly going to nqp

[18:46] <discord-raku-bot> <nemokosch> or CALLERS::<$_> if the traversal is desired (not sure here)

[19:14] *** jpn left
[19:25] *** jpn joined
[19:37] *** TieUpYourCamel left
[19:50] <discord-raku-bot> <nemokosch> m: sub match(&func) { $_ = CALLERS::<$_>; when &func.signature { func |$_ } }; for [(42, "bla"), (13), ("ble")] { match -> Int $num, Str $str { say $num; say $str }; match -> Int $i { say $i; True }; match -> |c { say c } }

[19:51] <discord-raku-bot> <Raku eval>  42 bla \(42, "bla") 

[19:51] <discord-raku-bot> <nemokosch> CALLER::<$_> didn't work, not allowed to access a dynamic variable

[19:51] *** TieUpYourCamel joined
[20:02] *** Altai-man joined
[20:04] *** sena_kun left
[20:39] *** NemokoschKiwi joined
[20:49] *** NemokoschKiwi left
[20:58] *** lichtkind_ joined
[21:00] *** lichtkind left
[21:00] *** lichtkind__ joined
[21:03] *** lichtkind_ left
[21:05] *** swaggboi left
[21:07] *** swaggboi joined
[21:28] *** tadzik left
[21:28] *** tadzik joined
[21:49] *** Altai-man left
[22:07] *** Guest93 joined
[22:08] *** jpn left
[22:10] *** Guest93 left
[22:20] *** ProperNoun left
[22:52] *** Sgeo joined
[23:07] <guifa> so CALLER::<$_> used to work, but that was changed at some point 

[23:07] <discord-raku-bot> <nemokosch> *non-dynamic variable, of course

[23:17] *** lichtkind__ left
[23:37] *** Manifest0 left
[23:52] *** guifa left
[23:53] *** guifa joined
