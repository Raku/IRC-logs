[00:00] *** sena_kun left
[00:03] *** dbonnafo joined
[00:08] *** dbonnafo left
[00:15] *** derpydoo left
[00:41] *** jpn joined
[00:46] *** jpn left
[00:55] *** AlexDaniel left
[01:00] *** HobGoblin joined
[01:00] *** bloatable6 left
[01:00] *** bloatable6 joined
[01:01] *** goblin left
[01:08] *** nebuchadnezzar left
[01:48] *** Dama joined
[01:54] *** Dama left
[02:05] *** jpn joined
[02:10] *** kylese left
[02:10] *** hulk joined
[02:12] *** jpn left
[02:33] *** jpn joined
[02:38] *** human-blip left
[02:39] *** jpn left
[02:39] *** human-blip joined
[02:42] *** andinus left
[02:43] *** andinus joined
[02:59] *** JRaspass left
[03:00] *** JRaspass joined
[03:16] *** jpn joined
[03:21] *** jpn left
[03:33] *** hythm joined
[03:41] *** eof left
[03:42] *** summerisle joined
[04:03] <hythm> calling `.d` on a symlink file that points to a directory returns True. is this correct behavior?

[04:04] <hythm> `raku -e 'say "symlink".IO.d'` # True

[04:05] *** dbonnafo joined
[04:05] *** avar left
[04:05] *** avar joined
[04:06] <MasterDuke> it matches perl. `perl -E 'say -d "symlink"'  # 1`

[04:09] <hythm> I ask because that cause logic like  `.rmdir if .d` to fail with `Failed to rmdir: not a directory`

[04:09] *** edr left
[04:09] *** dbonnafo left
[04:11] *** xelxebar left
[04:11] *** xelxebar joined
[04:18] *** jpn joined
[04:22] *** tinita left
[04:22] *** tinita joined
[04:22] *** jpn left
[04:57] *** hythm left
[05:12] *** CIAvash joined
[05:14] *** jdv left
[05:14] *** jdv joined
[05:19] *** jpn joined
[05:20] *** BinGOs left
[05:20] *** bingos joined
[05:23] *** jpn left
[05:42] *** dbonnafo joined
[05:49] *** esh left
[05:49] *** esh joined
[05:55] *** bd3i left
[05:55] *** bd3i joined
[05:59] *** gfldex left
[05:59] *** gfldex joined
[06:02] *** tea3po left
[06:07] *** dbonnafo left
[06:07] *** GreaseMonkey left
[06:07] *** dbonnafo joined
[06:07] *** greaser|q joined
[06:13] *** SmokeMachine left
[06:13] *** SmokeMachine joined
[06:19] *** CIAvash left
[06:20] *** jpn joined
[06:21] *** CIAvash joined
[06:22] *** CIAvash left
[06:24] *** jpn left
[06:25] *** perlmaros left
[06:25] *** perlmaros joined
[06:26] *** pat_js left
[06:27] *** pat_js joined
[06:42] *** jtza8 joined
[06:42] *** jtza8 left
[06:42] *** jtza8 joined
[08:18] *** lizmat_ left
[08:18] *** lizmat joined
[08:20] *** jpn left
[08:23] *** jpn joined
[08:30] *** abraxxa joined
[08:35] *** jpn left
[08:50] *** [dpk] joined
[08:51] <ab5tract> m: use NativeCall; my Pointer[int32] $p = Pointer[int32].new(42); dd $p  # how are you actually supposed to do this?

[08:51] <camelia> rakudo-moar f2c394120: OUTPUT: «Type check failed in assignment to $p; expected NativeCall::Types::Pointer[int32] but got NativeCall::Types::Pointer (NativeCall::Types::P...)␤  in block <unit> at <tmp> line 1␤␤»

[08:51] *** dpk left
[08:54] *** dakkar joined
[08:55] *** bingos is now known as BinGOs

[08:55] *** jpn joined
[08:59] *** samebchase left
[09:01] *** samebchase joined
[09:01] <discord-raku-bot> <nemokosch> > calling .d on a symlink file that points to a directory returns True. is this correct behavior?

[09:01] <discord-raku-bot> <nemokosch> I don't know if it is correct but I can definitely recall the topic

[09:02] <discord-raku-bot> <nemokosch> there might even be an issue for it, idk if you checked hythm

[09:06] *** jpn left
[09:17] *** Sgeo left
[09:26] <leont> Yes that is correct behavior.

[09:27] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/issues/5345

[09:30] *** camelia left
[09:30] *** sena_kun joined
[09:35] *** amenonsen left
[09:36] *** amenonsen joined
[10:10] *** abraxxa left
[10:13] *** El_Che left
[10:13] *** El_Che joined
[10:21] *** abraxxa joined
[10:29] *** mark22k left
[10:31] *** mark22k joined
[10:43] *** jpn joined
[10:52] *** sena_kun left
[10:52] *** sena_kun joined
[10:54] *** PotatoGim left
[10:54] *** jpn left
[10:55] *** PotatoGim joined
[11:02] *** [dpk] is now known as dpk

[11:06] *** renormalist left
[11:06] *** renormalist joined
[11:08] *** rba left
[11:08] *** rba joined
[11:23] *** lucerne left
[11:24] *** lucerne joined
[11:38] *** jpn joined
[11:43] *** jpn left
[11:53] *** leont left
[11:53] *** leont joined
[12:06] *** jpn joined
[12:10] *** jpn left
[12:23] *** melezhik joined
[12:23] <melezhik> .

[12:24] <melezhik> getting https://rakudo.org/dl/rakudo/rakudo-moar-2023.10-01-linux-x86_64-gcc.tar.gz is EXTREMELY slow for me - https://gist.github.com/melezhik/95eb50a6def5d9f4481b15f2487c2890

[12:24] <melezhik> cc andinus coleman

[12:26] *** melezhik left
[12:30] *** abraxxa1 joined
[12:32] *** abraxxa left
[12:45] *** jpn joined
[12:49] <Geth> ¦ ecosystem/SUPERSEDING: dc5d7934ea | (Elizabeth Mattijsen)++ | SUPERSEDING.list

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: First stab at providing superseds mapping

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: 

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: This contains all of my modules that lived on PAUSE at some point.

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: 

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: Each line is supposed to consist of two or more "words".  The first

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: word is the original module:auth<…> string, and the next words are

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: the module:auth<…> strings that superseded the previous module:auth<…>.

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: <…commit message has 5 more lines…>

[12:49] <Geth> ¦ ecosystem/SUPERSEDING: review: https://github.com/Raku/ecosystem/commit/dc5d7934ea

[12:50] *** jpn left
[12:50] <Geth> ¦ ecosystem: lizmat++ created pull request #628: Provide community maintained supersedes mapping

[12:50] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/628

[12:53] <Geth> ¦ ecosystem/main: dc5d7934ea | (Elizabeth Mattijsen)++ | SUPERSEDING.list

[12:53] <Geth> ¦ ecosystem/main: First stab at providing superseds mapping

[12:53] <Geth> ¦ ecosystem/main: 

[12:53] <Geth> ¦ ecosystem/main: This contains all of my modules that lived on PAUSE at some point.

[12:53] <Geth> ¦ ecosystem/main: 

[12:53] <Geth> ¦ ecosystem/main: Each line is supposed to consist of two or more "words".  The first

[12:53] <Geth> ¦ ecosystem/main: word is the original module:auth<…> string, and the next words are

[12:53] <Geth> ¦ ecosystem/main: the module:auth<…> strings that superseded the previous module:auth<…>.

[12:53] <Geth> ¦ ecosystem/main: <…commit message has 5 more lines…>

[12:53] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/dc5d7934ea

[12:53] <Geth> ¦ ecosystem/main: 7f1d82d271 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | SUPERSEDING.list

[12:53] <Geth> ¦ ecosystem/main: Merge pull request #628 from Raku/SUPERSEDING

[12:53] <Geth> ¦ ecosystem/main: 

[12:53] <Geth> ¦ ecosystem/main: Provide community maintained supersedes mapping

[12:53] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/7f1d82d271

[13:03] <ugexe> yeah im not a fan of that

[13:04] <lizmat> of the idea, or the quick merge ?

[13:04] <ugexe> it deserves a problem-solving at the very least

[13:04] <lizmat> well, that's why I made it a PR, so we could discuss it

[13:04] <lizmat> I'll revert and re-open the PR,, ok ?

[13:04] <ugexe> i think its better as a problem solving issue

[13:05] <lizmat> ok, I'll open that

[13:05] <ugexe> like there is a problem solving repo to get rid of the Foo:ver<xxx> parsing among other things

[13:06] <ugexe> but it also makes reasoning about what will get downloaded quite difficult

[13:06] <lizmat> https://github.com/Raku/problem-solving/issues/394 you mean?

[13:07] <ugexe> versions would be effectively pointless as one can use whatever they want as long as they add it to that list

[13:07] <ugexe> i'm just having a hard idea finding what it solves that using a single ecosystem and version/api/auth doesnt solve

[13:08] <lizmat> well, I would be against forcing to a single ecosystem

[13:08] <lizmat> it stifles progress

[13:09] <ugexe> its not forced

[13:09] <ugexe> but a single ecosystem is the secure way, and being secure by default is what every other ecosystem is moving towards

[13:09] <ugexe> i'd be interested to hear how it stifles progress as well

[13:11] <lizmat> if we wouldn't have allowed multiple ecosystems, PAUSE or zef ecosystems would have never existed

[13:12] <ugexe> you are confusing allowing multiple ecosystems to what is used as a default

[13:13] <lizmat> ah, you mean that the default setting for zef should be zef ecosystem only, and not look at the REA, CPAN or p6c ?

[13:14] <ugexe> it should be an ecosystem that applies policy to namespaces, and zef ecosystem is the only one of those that does that, so yes

[13:14] <lizmat> understood

[13:14] <ugexe> but no secure ecosystem can work cooroporatively with another unsecure ecosystem

[13:14] <lizmat> ack

[13:14] <ugexe> including trying to force how the resolution happens

[13:15] <ugexe> like mapping one auth to another

[13:15] <lizmat> with regards to keeping supersedes information: do I understand your problem of my ecosystem PR is the format, not the idea?

[13:16] <ugexe> there are problems with the idea as is as well

[13:16] <lizmat> ?

[13:16] <ugexe> notably but no secure ecosystem can work cooroporatively with another unsecure ecosystem

[13:17] <ugexe> or rather, a secure ecosystem working cooperatively with an unsecure ecosystem makes them both unsecure

[13:18] <lizmat> having the supersedes list community maintained makes it insecure ?

[13:19] <ugexe> does it mix and match between ecosystems?

[13:19] <lizmat> that's the idea ?

[13:19] <ugexe> like i wish you would take a little bit to think of what could be wrong with this, because in my eyes there are so many issues that it seems hard to believe any have been considered

[13:20] <ugexe> yes im saying that idea is insecure

[13:20] <ugexe> like if i pin something to a specific auth/ver/api i want those specific things

[13:22] *** jetchisel left
[13:22] *** jetchisel joined
[13:23] <ugexe> implementing supercedes in the core per s22 could be a step in that direction. it would require much more work to get going, but it is also a more appropriate way of handling this

[13:23] <lizmat> funny you should say that  :-)

[13:24] <lizmat> as I wrote most of that almost 10 years ago now  :-)

[13:25] <ugexe> yeah, i often laugh at how much smarter i used to be 10 years ago than i am today

[13:25] <discord-raku-bot> <nemokosch> 🙃

[13:26] <lizmat> the problem with the idea in S22 is that any author can put a "supersedes" in their META6.json

[13:26] <ugexe> yeah, but that is kind of the point

[13:27] <ugexe> you can put bad stuff in there sure, but a secure ecosystem wouldn't allow that

[13:27] <lizmat> that's why I like the idea of a community maintained listr

[13:27] <ugexe> community defined resolution order just does not seem like a good thin got me

[13:27] <lizmat> how would a secure ecosystem know not to allow a "supersedes" ?

[13:29] <ugexe> its really not difficult i dont think

[13:29] *** jpn joined
[13:29] <ugexe> if someone tries to supersedes a module/distribution that isn't theres, well, it should by default reject it. that is an oversimplification since you could have admin tools to eventually approve it or some such

[13:30] *** drakonis left
[13:31] <lizmat> how would it determine it is't theirs ?    

[13:31] *** drakonis joined
[13:31] <lizmat> who would watch the people doing the admin tools ?

[13:31] <ugexe> thats an exercise left to the reader, but there could very easily be ways

[13:32] <ugexe> as a naive example the zef ecosystem could see if the auth matches

[13:33] <lizmat> yeah, but that's not a common use case

[13:33] <lizmat> the common use case is modules moving from p6c / CPAN to zef

[13:33] <lizmat> how would it match that ?

[13:34] <ugexe> again, an exercise for the reader. thinking about it for 10 seconds i think "every rando dashboard can prove i own a given domain"

[13:34] <ugexe> so having a user upload something to their cpan for example to prove they own it

[13:35] <lizmat> that won't work for p6c

[13:35] <ugexe> that might just have to be too bad

[13:35] <lizmat> also: I don't want to upload anything to PAUSE anymore, like ever

[13:36] <Geth> ¦ ecosystem/SUPERSEDING: e846162797 | (Elizabeth Mattijsen)++ | SUPERSEDING.list

[13:36] <Geth> ¦ ecosystem/SUPERSEDING: It appears to be a bad idea

[13:36] <Geth> ¦ ecosystem/SUPERSEDING: review: https://github.com/Raku/ecosystem/commit/e846162797

[13:36] <tbrowder__> latest Tiobe shows Perl at 29 and no Raku in top 100

[13:36] <discord-raku-bot> <nemokosch> for what it's worth, supersedes within the zef ecosystem could (should) get pretty common

[13:36] <discord-raku-bot> <nemokosch> usually not for the same author though, that would defeat the purpose

[13:37] <ugexe> ok, but should we design supersedes around the fact you dont want to upload anything to pause anymore? like i agree it sucks but if we are targeting the common use case and not an individual use case then it would be fine

[13:37] <lizmat> well, that was the whole idea of "superseded-by"

[13:38] <lizmat> anyways, I think I'm going to recuse myself from this

[13:38] <tbrowder__> if i were emperor, raku.land would ignore all but zef archive

[13:38] <ugexe> but superseded-by would have required you upload it to cpan

[13:39] <lizmat> indeed   at one point I would have done that

[13:39] <ugexe> superseded-by is admittedly a bit strange in that regard though

[13:39] <lizmat> why?  it allows an author to indicate they've given up on a module (whether completely, or in a given ecosystem)

[13:40] <ugexe> like by the time you know you want it to be superseded-by something, it is probably already released an in an ecosystem

[13:40] <tbrowder__> at least ignore those outside zef by the "same" author

[13:40] *** jpn left
[13:41] <lizmat> tbrowder__: determining what is "the same author" is basically what's being discussed here

[13:41] <ugexe> actually i guess superseded-by still kind of makes sense like that... author would just release their final version that includes it

[13:41] <lizmat> that was the idea, yes

[13:42] <ugexe> right. i was thinking of it more like the SUPERCEDING list thing which would effectively inject supersedes into previous releases

[13:42] <discord-raku-bot> <nemokosch> sometimes it shouldn't even be "the same author" though

[13:44] <tbrowder__> jjatria and i are discussing same

[13:45] <Geth> ¦ ecosystem/main: 8c3c3bf82d | (Elizabeth Mattijsen)++ | SUPERSEDING.list

[13:45] <Geth> ¦ ecosystem/main: It appears to be a bad idea (now in the right branch)

[13:45] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/8c3c3bf82d

[13:46] *** jpn joined
[13:48] <ugexe> i also suppose if superceded-by was implementing in the core (in META6.json) that we are still small enough to do manual reviews of what would be theoretically rejected by a secure ecosystem

[13:48] <ugexe> i.e. we know lizmat actually owns those cpan distributions, so they could just be marked as allowed

[13:49] <ugexe> then again we can't upload a auth: cpan:foo to zef ecosystem in the first place, so maybe not

[13:51] <discord-raku-bot> <nemokosch> I tend to like this "depends in hash form" suggestion, too

[13:51] *** jpn left
[13:53] <ugexe> could make a good squash-a-thon or whatever (sending PRs changing depends to hash form)

[13:59] * lizmat returns to regularly scheduled hacking

[14:02] *** itaipu left
[14:03] *** itaipu joined
[14:06] *** leedo left
[14:06] *** leedo joined
[14:06] *** jtza8 left
[14:11] *** jpn joined
[14:16] * lizmat clickbaits https://rakudoweekly.blog/2023/11/13/2023-46-advent-approaching/

[14:25] *** abraxxa1 left
[14:28] *** jpn left
[14:32] *** jpn joined
[14:34] *** ilogger2 left
[14:34] *** ilogger2_ joined
[14:49] *** atweedie left
[14:49] *** atweedie joined
[14:56] *** jpn left
[15:06] *** clarkema left
[15:06] *** clarkema joined
[16:02] *** [Coke] left
[16:02] *** [Coke] joined
[16:12] *** abraxxa joined
[16:24] *** ugexe left
[16:24] *** ugexe joined
[16:31] *** AlexDaniel joined
[16:33] *** Woodi left
[16:33] *** Woodi joined
[16:37] *** constxqt joined
[16:42] *** AlexDaniel left
[16:54] *** grondilu joined
[16:54] *** grondilu left
[17:13] *** jpn joined
[17:19] *** jpn left
[17:20] *** jpn joined
[17:20] *** abraxxa left
[17:31] *** dakkar left
[17:32] *** mtj left
[17:32] *** mtj joined
[17:43] *** MasterDuke left
[17:43] *** kjp left
[17:43] *** abraxxa joined
[17:43] *** kjp joined
[17:51] *** guifa_ left
[17:52] *** guifa joined
[18:04] *** corwin left
[18:04] *** corwin joined
[18:29] *** jpn left
[18:33] *** jpn joined
[18:43] *** edr joined
[19:11] *** thebb left
[19:11] *** thebb joined
[19:13] *** snonux left
[19:13] *** snonux joined
[19:30] *** melezhik joined
[19:31] <melezhik> .tell tonyo I have an issue with publish distribution with zef over SparrowCI - https://github.com/tony-o/raku-fez/issues/117

[19:31] <tellable6> melezhik, I'll pass your message to tonyo

[19:32] *** sena_kun left
[19:36] *** melezhik left
[19:41] *** nine left
[19:42] *** nine joined
[20:05] <tonyo> melezhik: can you update fez and try again? it should tell you what the missing prompt is on the latest version https://github.com/tony-o/raku-fez/blob/master/lib/Fez/CLI.rakumod#L25

[20:05] <tellable6> tonyo, I'll pass your message to melezhik

[20:11] *** jpn left
[20:15] *** dg left
[20:16] *** dg joined
[20:19] *** dbonnafo_ joined
[20:21] *** dbonnafo left
[20:28] *** buffet left
[20:29] *** dbonnafo joined
[20:30] *** buffet joined
[20:30] *** dbonnafo_ left
[20:54] *** jpn joined
[21:06] *** jpn left
[21:11] *** jpn joined
[21:30] *** abraxxa left
[21:33] <ugexe> my guess is it has to be https://github.com/tony-o/raku-fez/blob/a4ea6fc43524bd4fe08c36e680bfe377ef457c32/lib/Fez/CLI.rakumod#L495

[21:35] <ugexe> afaict that line is the only code path for `fez upload` that has a prompt

[21:52] *** jpn left
[22:10] *** dogbert17 left
[22:10] *** charsbar left
[22:10] *** charsbar joined
[22:23] *** jpn joined
[22:27] *** jgaz left
[22:27] *** jgaz joined
[22:28] *** jpn left
[22:48] *** patrickb left
[22:49] *** patrickb joined
[22:57] *** jpn joined
[23:02] *** jpn left
[23:11] *** jpn joined
[23:16] *** jpn left
[23:29] *** jpn joined
[23:34] *** jpn left
[23:37] *** kjp left
[23:39] *** kjp joined
[23:46] *** Voldenet left
[23:47] *** Voldenet joined
