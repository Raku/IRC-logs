[00:00] *** Cabanossi left
[00:01] *** devmikey joined
[00:08] *** Cabanossi joined
[00:37] *** [particle] joined
[00:43] *** DarthGandalf left
[01:01] *** DarthGandalf joined
[01:06] *** konvertex left
[01:06] *** ToddAndmargo joined
[01:07] *** dataf3l joined
[01:07] *** dataf3l left
[01:08] <ToddAndmargo> hi all!  Is there a way so shorted  `if $x ea "a" || $x= "b" || $x eq "c"`?  Is there a way to say $x just once?

[01:08] <tobs> ToddAndmargo: assuming "ea" and "=" both should be "eq", it's called a Junction

[01:09] <tobs> if $x eq "a" | "b" | "c"

[01:09] <ToddAndmargo> ea was a booboo

[01:09] <tobs> where the | has lower precedence than the eq

[01:09] <tobs> cf. https://docs.raku.org/type/Junction

[01:10] *** soar joined
[01:10] <ToddAndmargo> Perfect!  Thank you!  `if $x eq "a" | "b" | "abc"  {say "yes"}else{say "no"};`

[01:26] *** picmyk joined
[01:33] <ToddAndmargo> I am getting greedy here.  Is there a way put put the `"a" | "b" | "abc" ` into an array?

[01:38] *** molaf left
[01:42] <timotimo> yes, you can use the "any" sub or the ".any" method on the array to construct the Junction you want

[01:43] <timotimo> m: my @choices = "a", "b", "abc"; for "a", "aa", "aaa", "b", "bb", "bbb", "aba", "abc" { say $_, " ", $_ eq @choices.any }

[01:43] <camelia> rakudo-moar 519a5726b: OUTPUT: «a any(True, False, False)␤aa any(False, False, False)␤aaa any(False, False, False)␤b any(False, True, False)␤bb any(False, False, False)␤bbb any(False, False, False)␤aba any(False, False, False)␤abc any(False, False, True…»

[01:43] <timotimo> ah

[01:43] <timotimo> printing the junction doesn't give you just the true/false

[01:43] <timotimo> so you want a "so" if you're not using an if/else

[01:43] <timotimo> m: my @choices = "a", "b", "abc"; for "a", "aa", "aaa", "b", "bb", "bbb", "aba", "abc" { say $_, " ", so $_ eq @choices.any }

[01:43] <camelia> rakudo-moar 519a5726b: OUTPUT: «a True␤aa False␤aaa False␤b True␤bb False␤bbb False␤aba False␤abc True␤»

[01:44] <ToddAndmargo> Hi Timo,  thank you.

[01:47] <ToddAndmargo> Okay, now I know I am pushing it.  Can anyone point me to an example of a GTK information pop up with a time out feature?  Or similar?

[01:50] *** molaf joined
[02:02] <ToddAndmargo> i will post it over on the mailing list

[02:02] <ToddAndmargo> Thank you for all the help!

[02:02] <ToddAndmargo> byebye

[02:03] *** ToddAndmargo left
[02:11] *** Benett is now known as pussy

[02:12] *** pussy is now known as Benett

[02:19] *** devmikey left
[02:39] *** mowcat left
[02:41] *** picmyk left
[02:44] *** Cabanossi left
[02:44] *** Cabanossi joined
[03:15] *** lucasb left
[03:47] *** KindOne left
[03:48] *** KindOne joined
[04:02] *** soar left
[04:08] *** cpan-raku left
[04:12] *** cpan-raku joined
[04:12] *** cpan-raku left
[04:12] *** cpan-raku joined
[04:13] *** soar joined
[04:17] *** molaf left
[04:29] *** bdju left
[04:29] *** bdju joined
[04:42] *** soar left
[04:53] *** raku-bridge left
[04:54] *** raku-bridge joined
[04:54] *** raku-bridge left
[04:54] *** raku-bridge joined
[04:54] *** raku-bridge1 joined
[04:54] *** raku-bridge1 left
[04:54] *** raku-bridge1 joined
[04:55] *** Geth_ joined
[04:55] *** cpan-raku_ joined
[04:55] *** cpan-raku_ left
[04:55] *** cpan-raku_ joined
[04:58] *** raku-bridge left
[04:58] *** raku-bridge1 is now known as raku-bridge

[05:00] *** maggotbrain left
[05:07] *** raku-bridge1 joined
[05:10] *** Geth left
[05:11] *** cpan-raku left
[05:12] *** raku-bridge1 left
[05:24] *** Geth joined
[05:28] *** cpan-raku joined
[05:28] *** cpan-raku left
[05:28] *** cpan-raku joined
[05:28] *** raku-bridge2 joined
[05:28] *** raku-bridge2 left
[05:28] *** raku-bridge2 joined
[05:33] *** raku-bridge2 left
[05:34] *** Doc_Holliwood joined
[05:34] *** cpan-raku left
[05:36] *** cpan-raku joined
[05:37] *** cpan-raku left
[05:37] *** cpan-raku joined
[05:37] *** raku-bridge3 joined
[05:37] *** raku-bridge3 left
[05:37] *** raku-bridge3 joined
[05:39] *** cpan-raku left
[05:39] *** raku-bridge3 left
[05:40] *** raku-bridge4 joined
[05:40] *** raku-bridge4 left
[05:40] *** raku-bridge4 joined
[05:43] *** cpan-raku joined
[05:43] *** cpan-raku left
[05:43] *** cpan-raku joined
[06:08] *** brtastic joined
[06:10] *** stoned75 joined
[06:37] *** brtastic left
[06:37] *** girafe left
[06:44] *** rindolf joined
[06:54] *** brtastic joined
[06:57] *** soursBot joined
[07:32] *** soar joined
[07:32] *** pecastro joined
[07:35] *** JJMerelo joined
[07:37] *** dakkar joined
[07:39] *** skids left
[07:44] *** aborazmeh joined
[07:44] *** aborazmeh left
[07:44] *** aborazmeh joined
[07:48] *** sena_kun joined
[08:09] *** Altai-man_ joined
[08:12] *** sena_kun left
[08:12] *** soursBot left
[08:21] *** soursBot joined
[08:36] *** andrzejku joined
[08:51] *** soar left
[09:01] *** JJMerelo left
[09:02] *** suman joined
[09:03] <suman> m:     my @vector = (1,2,3); say @vector.WHAT;    sub incrementMut(@vec) {return @vec.map: * + 1};  say incrementMut(@vector).WHAT; say @vector.WHAT;

[09:03] <camelia> rakudo-moar 519a5726b: OUTPUT: «(Array)␤(Seq)␤(Array)␤»

[09:03] <suman> I passed Array to a function but it returns Seq. 

[09:04] <suman> Is it expected?

[09:04] <suman> why changed the type?

[09:06] <suman> m:     my @vector = (1,2,3); say @vector.WHAT;    sub incrementMut(@vec) {return @vec.map: * + 1};  say incrementMut(@vector).WHAT; say @vector;say incrementMut(@vector) 

[09:06] <camelia> rakudo-moar 519a5726b: OUTPUT: «(Array)␤(Seq)␤[1 2 3]␤(2 3 4)␤»

[09:09] <timotimo> suman: the return value of the map method is a Se; map is lazy

[09:09] <MasterDuke> m:     my @vector = (1,2,3); say @vector.WHAT;    sub incrementMut(@vec) {return eager @vec.map: * + 1};  say incrementMut(@vector).WHAT; say @vector;say incrementMut(@vector) 

[09:09] <camelia> rakudo-moar 519a5726b: OUTPUT: «(Array)␤(List)␤[1 2 3]␤(2 3 4)␤»

[09:10] *** soursBot left
[09:11] <suman> m:     my @vector = (1,2,3); say @vector.WHAT;    sub incrementMut(@vec) {return (@vec.map: * + 1).Array};  say incrementMut(@vector).WHAT; say @vector;say incrementMut(@vector) 

[09:11] <camelia> rakudo-moar 519a5726b: OUTPUT: «(Array)␤(Array)␤[1 2 3]␤[2 3 4]␤»

[09:12] *** leont joined
[09:12] *** soursBot joined
[09:13] *** konvertex joined
[09:16] <MasterDuke> m:     my @vector = (1,2,3); say @vector.WHAT;    sub incrementMut(@vec) {return @ = @vec.map: * + 1};  say incrementMut(@vector).WHAT; say @vector;say incrementMut(@vector) 

[09:16] <camelia> rakudo-moar 8509621b4: OUTPUT: «(Array)␤(Array)␤[1 2 3]␤[2 3 4]␤»

[09:27] <suman> MasterDuke Is it possible to pass array as argument and mutate the array after function is applied? 

[09:27] <suman> m:     my @vector = (1,2,3);  sub incrementMut(@vec) {return @ = @vec.map: * + 1}; say incrementMut(& @vector); say @vector;

[09:27] <camelia> rakudo-moar 8509621b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3@ = @vec.map: * + 1}; say incrementMut(&7⏏5 @vector); say @vector;…»

[09:28] <suman> m:     my @vector = (1,2,3);  sub incrementMut(@vec) {return @ = @vec.map: * + 1}; say incrementMut(&@vector); say @vector;

[09:28] <camelia> rakudo-moar 8509621b4: OUTPUT: «[2 3 4]␤[1 2 3]␤»

[09:29] <suman> original array is not mutated

[09:30] <MasterDuke> m: my @vector = (1,2,3); say @vector.WHAT; sub incrementMut(@vec) {.++ for @vec}; incrementMut(@vector); say @vector;

[09:30] <camelia> rakudo-moar 8509621b4: OUTPUT: «(Array)␤[2 3 4]␤»

[09:35] *** suman left
[09:42] *** Sgeo left
[09:54] *** clem16 joined
[09:56] *** helit left
[09:57] *** webstrand left
[09:57] *** agentzh left
[09:57] *** zostay left
[09:57] <timotimo> g

[09:57] *** zostay joined
[09:57] *** agentzh joined
[09:57] *** agentzh left
[09:57] *** agentzh joined
[09:58] *** webstrand joined
[10:00] *** Black_Ribbon left
[10:10] *** sena_kun joined
[10:11] *** aborazmeh left
[10:12] *** Altai-man_ left
[10:25] *** girafe joined
[10:27] *** JJMerelo joined
[10:31] *** chloekek joined
[10:40] *** chloekek left
[10:41] *** Doc_Holliwood left
[10:46] *** lizmat left
[10:59] *** aborazmeh joined
[11:00] *** aborazmeh left
[11:00] *** aborazmeh joined
[11:02] *** lizmat joined
[11:06] *** bdju left
[11:06] *** bdju joined
[11:18] <raku-bridge> <tmtvl> That's odd, the perl-bridge bot is posting everything twice here in Discord.

[11:18] <raku-bridge4> <tmtvl> That's odd, the perl-bridge bot is posting everything twice here in Discord.

[11:21] <tadzik> looks like there's two bots, since they also posted your message twice on IRC

[11:23] <lizmat> raku-bridge and raku-bridge4 on this side

[11:23] <El_Che> ipv6 and ipv4?

[11:23] <El_Che> whois raku-bridge4

[11:26] <tadzik> probably a "I'll add 4 to my nick because the regular one is taken" bot instance

[11:37] *** alainbb joined
[11:38] *** alainbb left
[11:50] <Geth_> ¦ old-issue-tracker: lizmat assigned to jnthn Issue EVAL not working with custom circumfixes,terms, etc https://github.com/Raku/old-issue-tracker/issues/4797

[11:50] <SmokeMachine> (sorry, I just saw this message wasn't sent yesterday) lizmat: and trying to figure out what would be good a syntax to use them

[11:50] <lizmat> SmokeMachine: lost context there

[11:53] *** soursBot left
[11:53] *** leont left
[11:54] <SmokeMachine> lizmat: you asked me why I was playing with that assignment on immutable data structure's field returning a new structure. I'd answered that I was studying about functional data structures and that message that didn't go out (many different verb tenses here, sorry, probably everything is wrong)

[11:54] <lizmat> ah, ok, :-)

[11:55] <SmokeMachine> lizmat: do you think there is a good syntax for that?

[11:57] <lizmat> assignment with functional data structures feels like it has a paradigm impedance

[11:57] <lizmat> aka. it feels wrong :-)

[11:58] *** soursBot joined
[11:59] *** kensanata joined
[12:01] <SmokeMachine> but isn't it almost equivalent to `my $new-ids = $ids.some-field("new value")`

[12:05] <lizmat> almost, but maybe better: my $new-ids := $ids.some-field("new value")

[12:05] <lizmat> aka, not having mutable containers

[12:05] *** leont joined
[12:06] *** soursBot left
[12:09] <SmokeMachine> `($new-istash, $value) = $istash.pop` is also a syntax I was trying to find a better way

[12:09] *** Altai-man_ joined
[12:09] *** soursBot joined
[12:11] <lizmat> $new-stash := $stash.pop(my $value) ?

[12:11] *** sena_kun left
[12:12] <SmokeMachine> you mean `method pop($value is rw)`?

[12:12] <lizmat> yup ?

[12:13] *** cpan-raku left
[12:15] <SmokeMachine> maybe the opposite? `$ids.some-field(my $new-ids, "new value")` `my $value = $istash.pop(my $new-istash)` and all "mutating" methods would receive it?

[12:16] <lizmat> that'd be also a way  :-)

[12:16] <lizmat> brb&

[12:19] *** cpan-raku joined
[12:19] *** cpan-raku left
[12:19] *** cpan-raku joined
[12:21] *** cpan-raku_ left
[12:21] *** cpan-raku_ joined
[12:21] *** cpan-raku_ left
[12:21] *** cpan-raku_ joined
[12:31] *** raku-bridge2 joined
[12:31] *** raku-bridge2 left
[12:31] *** raku-bridge2 joined
[12:31] *** MasterDuke left
[12:31] *** raku-bridge5 joined
[12:31] *** raku-bridge5 left
[12:31] *** raku-bridge5 joined
[12:31] *** lizmat_ joined
[12:31] *** girafe2 joined
[12:32] *** dogbert11 joined
[12:32] *** Kaeipi joined
[12:33] *** abraxxa1 joined
[12:33] *** orinthe7 joined
[12:33] *** nebuchad` joined
[12:34] *** NODE left
[12:35] *** peri404 joined
[12:35] *** NODE joined
[12:36] *** aborazmeh_ joined
[12:36] *** aborazmeh_ left
[12:36] *** aborazmeh_ joined
[12:36] *** a3r0_ joined
[12:36] *** polettix1 joined
[12:36] *** robins joined
[12:36] *** polettixx left
[12:36] *** aluaces left
[12:36] *** veesh left
[12:36] *** lizmat left
[12:36] *** girafe left
[12:36] *** robinsmidsrod left
[12:36] *** spacebat1 left
[12:36] *** phogg left
[12:36] *** lnx left
[12:36] *** soursBot left
[12:36] *** raku-bridge4 left
[12:36] *** raku-bridge left
[12:36] *** Kaiepi left
[12:36] *** Maylay left
[12:36] *** nebuchadnezzar left
[12:36] *** lnx joined
[12:36] *** NODE left
[12:36] *** ptrcmd_ joined
[12:36] *** aborazmeh left
[12:36] *** leah2 left
[12:36] *** hacktor left
[12:36] *** Geth left
[12:36] *** abraxxa left
[12:36] *** sivoais left
[12:36] *** dogbert17 left
[12:36] *** a3r0 left
[12:36] *** krunen left
[12:36] *** ptrcmd left
[12:36] *** orinthe left
[12:36] *** Manifest0 left
[12:36] *** sivoais joined
[12:36] *** aborazmeh_ is now known as aborazmeh

[12:36] *** orinthe7 is now known as orinthe

[12:36] *** sivoais left
[12:36] *** sivoais joined
[12:37] *** raku-bridge2 is now known as raku-bridge

[12:37] *** Manifest0 joined
[12:37] *** krunen joined
[12:37] *** spacebat1 joined
[12:37] *** Maylay joined
[12:37] *** veesh joined
[12:38] *** NODE joined
[12:39] *** hacktor joined
[12:39] *** leah2_ joined
[12:40] *** phogg joined
[12:40] *** phogg left
[12:40] *** phogg joined
[12:41] *** ptrcmd_ is now known as ptrcmd

[12:42] *** sarna joined
[12:43] <sarna> hello, I want to copy a file and append something to the name. how would I go about it? I'm stuck at "file".IO.copy: "file.bak"

[12:43] <sarna> I'd like to do something like `.copy: * ~ ".bak"` if you know what I mean

[12:49] <moritz> sarna: sub copy-with-extension($name, $extension) { $name.IO.copy("$name.$extension) }

[12:49] *** lizmat_ is now known as lizmat

[12:49] <sarna> moritz: I have this as an one-liner now, I just repeat `@*ARGS[0]` twice. I think it's still lower overhead than creating a sub

[12:50] <sarna> I just thought there'd be some magical, more raku-ish way to do it

[12:52] <jnthn> .IO.copy("$_.bak") given @*ARGS[0]

[12:52] <moritz> of course, unpacking @*ARGS is not very elegant. A sub MAIN($fn) { ... } reduces that clutter

[12:53] <sarna> oh my, thanks jnthn!

[12:53] <sarna> also thanks moritz of course :D 

[12:54] <sarna> I'd use MAIN if it was something bigger, but it's literally 33 characters on one line now :)

[12:55] <sarna> raku is such a nice refresher after doing stuff in python for a while!

[12:56] *** leah2_ is now known as leah2

[12:57] *** soursBot joined
[13:09] *** nebuchad` is now known as nebuchadnezzar

[13:09] *** suman joined
[13:10] <suman> Can a ternary expression be applied to map function?

[13:10] <suman> Example:

[13:10] <suman> m: my @arr = [1, 2, 3, 5]; say @arr.map: * < 2 ?? 1 !! 2

[13:10] <camelia> rakudo-moar a0efef5ea: OUTPUT: «Cannot map a Array using '1'␤Did a * (Whatever) get absorbed by a list?␤  in block <unit> at <tmp> line 1␤␤»

[13:11] *** JJMerelo left
[13:11] <jnthn> m: my @arr = [1, 2, 3, 5]; say @arr.map: { $_ < 2 ?? 1 !! 2 }

[13:11] <camelia> rakudo-moar a0efef5ea: OUTPUT: «(1 2 2 2)␤»

[13:15] <cpan-raku> New module released to CPAN! Algorithm::AhoCorasick (0.0.12) by 03TITSUKI

[13:15] <cpan-raku_> New module released to CPAN! Algorithm::AhoCorasick (0.0.12) by 03TITSUKI

[13:16] <lizmat> suman: you can, but not with a WhateverCode

[13:16] <lizmat> tyil[m] looks like we have 2 cpan-raku bot instances

[13:22] *** rbt joined
[13:22] <suman> lizmat got the help from jnthn thank you 

[13:26] <sarna> can I somehow feed `Date.new` strings that are not ISO 8601?

[13:26] <sarna> I tried with formatter, but that's only for printing the date after creating it :/

[13:27] *** aborazmeh left
[13:35] *** suman left
[13:35] *** chloekek joined
[13:44] *** mowcat joined
[13:45] *** ivan` joined
[13:47] <moritz> no

[13:47] <moritz> you have to wrap it with your own parser

[13:48] *** MasterDuke joined
[13:53] <sarna> it's european dates, so I just did the ol split and reverse

[13:58] <lizmat> sarna: so "dd-mm-yyyy" ?

[13:58] <sarna> lizmat: yep! "dd.mm.yyyy", to be exact

[13:59] <sarna> `$date.split('.').reverse.join('-')`

[14:00] *** Doc_Holliwood joined
[14:01] <lizmat> m: dd Date.new(|"04.06.2020".split(".").reverse)   # faster by slipping

[14:01] <camelia> rakudo-moar a0efef5ea: OUTPUT: «Date.new(2020,6,4)␤»

[14:05] *** devmikey joined
[14:05] <sarna> oh wow, thanks!

[14:06] *** patrickb joined
[14:10] <[Coke]> any faster with single quotes instead of double? :)

[14:10] *** sena_kun joined
[14:11] *** rbt left
[14:11] <jnthn> Only at parse time, no difference at runtime :)

[14:11] *** rbt joined
[14:12] <[Coke]> I am old school and try to use non-interpolating quotes whenever possible, possibly due to a code review in like 1996 or so.

[14:12] *** Altai-man_ left
[14:14] <moritz> also, Perl Best Practice :D

[14:15] <sarna> non-interpolating ones are 'these', right?

[14:16] <lizmat> fwiw, in one-liners I usually try these things out and then I need to use "" rather than '' to prevent shell escaping issues

[14:17] <jnthn> Then on Windows it's the opposite way around...argh :)

[14:18] <jnthn> When I'm thinking, I do q/.../ or qq/.../ or similar instead of the quotes, but it ain't in the muscle memory yet.

[14:18] <sarna> oh damn

[14:18] <sarna> m: say so "foo".contains: ("O", "x").any, :i

[14:18] <camelia> rakudo-moar a0efef5ea: OUTPUT: «True␤»

[14:19] <sarna> is this.. good style? not-so-horrible style?

[14:19] <chloekek> ｢｣ and qq｢｣ for extra fancy fancy 🎀

[14:20] <lizmat> m: ay so "foo".contains: "O" | "x", :i

[14:20] <camelia> rakudo-moar a0efef5ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ay used at line 1␤␤»

[14:20] *** robins is now known as robinsmidsrod

[14:20] <lizmat> m: say so "foo".contains: "O" | "x", :i

[14:20] <camelia> rakudo-moar a0efef5ea: OUTPUT: «True␤»

[14:21] <lizmat> sarna: unless you have your alternates in an array or so

[14:21] <sarna> lizmat: no I make a literal for that. yours is more readable, thanks!

[14:22] *** sarna left
[14:26] *** soar joined
[14:28] *** molaf joined
[14:29] *** MasterDuke left
[14:31] *** molaf left
[14:33] *** soar left
[14:37] *** soursBot left
[14:40] *** m_athias left
[14:40] *** wamba joined
[14:43] *** m_athias joined
[14:50] <masak> ahoy, #raku

[14:50] <tadzik> ahoy! o

[14:50] <masak> I used to do '' strings as much as possible. now I do "" strings as much as possible :)

[14:50] <masak> what can I say. I contain multitudes.

[14:51] <masak> my pet reason for going with "" strings is that English text tends to contain apostrophes, which I then don't (<--see?) have to escape

[14:52] <masak> &

[14:52] <tadzik> you can also switch to “proper quotes” :P

[14:52] <tadzik> there's also a proper apostrophe in there somethere...

[14:52] <tadzik> ‘oh here’

[14:53] <tadzik> m: say 'isn’t it nice'

[14:53] <camelia> rakudo-moar 4ba70b7a4: OUTPUT: «isn’t it nice␤»

[14:53] <tadzik> that makes it “fun” for people reading your code later :P

[14:54] *** soursBot joined
[14:55] *** brtastic left
[14:56] *** Doc_Holliwood left
[14:57] <[Coke]> :)

[15:13] *** raku-bridge5 left
[15:13] *** cpan-raku left
[15:13] *** JJMerelo joined
[15:21] *** brtastic joined
[15:22] *** MasterDuke joined
[15:26] *** Dwarf joined
[15:27] <Dwarf> Hello! I'm watching paint dry aka watching Raku get compiled on ARM64, but was met with the following message: "JIT isn't supported on aarch64-linux-gnu-thread-multi yet." - It was my understanding that it did, in a way?

[15:28] *** kensanata left
[15:30] *** devmikey left
[15:32] <lizmat> Dwarf: no, JIT is not supported on ARM, but all of the other optimizations *are* afaik

[15:32] <lizmat> so, spesh, inlining, static opts

[15:33] <Dwarf> Ah I must've misunderstood then

[15:33] <Dwarf> That's a shame!

[15:33] <lizmat> it will become an even bigger shame for the future when Apple switches back to Arm

[15:33] *** sno left
[15:34] <[Coke]> was the blocker time (versus demand) or lack of hardware, or...

[15:36] *** _jrjsmrtn joined
[15:36] *** __jrjsmrtn__ left
[15:36] <lizmat> well, I don't know, brrt should know  :-)

[15:38] <[Coke]> I wonder if there's a problem solving or rakudo ticket for it.

[15:38] <[Coke]> in any case, I bet you'll start working on it when you get a new mac. :)

[15:41] <jnthn> I think it's mostly people with the correct combo of time and skills to do it

[15:42] <jnthn> (Or patience to learn a lot of stuff. :))

[15:43] <Dwarf> compiling src/jit/stub.o

[15:43] <Dwarf> Huh. I guess it still compiles jit stuff

[15:45] <lizmat> Dwarf: doubt it, since the JIT can only produce Intel opcodes

[15:47] <jnthn> I think stub.o is the "we don't have a JIT" thing

[15:47] <jnthn> Probably just a "do we have JIT" function returning false, or some such

[15:47] <Dwarf> That'd make a lot of sense, it was the only file mentioning JIT during the compile

[15:52] <[Coke]> yah, lots of return NULL; return 0;

[15:53] <jdv79> [Coke]: a CR in 96 huh?  that's a long time ago.

[15:54] <jdv79> was that perl 5.0?

[15:56] <[Coke]> nope, java, tcl.

[15:56] <[Coke]> I think the boss was also trying to roll out Modula-3

[15:57] <[Coke]> also lots of CORBA

[15:57] <jdv79> oof

[16:01] <jdv79> sounds like fun times

[16:06] *** skids joined
[16:07] *** mniip left
[16:09] *** Altai-man_ joined
[16:12] <[Coke]> I was also working at Enron at the time!

[16:12] *** sena_kun left
[16:13] <tbrowder> hi

[16:14] <rbt> Does anyone have opinions on how do() should work for DBIish?  Opinions requested.

[16:14] <rbt> https://github.com/raku-community-modules/DBIish/issues/185

[16:15] <tbrowder> is there any way (without a multi) to have a sub signature taking either an array, list, or string with a sigil of either $ or @?

[16:15] <tbrowder> any array or list input may have a @ or $ sigil but a str would have a $.

[16:18] <rbt> Slurping gets pretty close, with the side effect that you flatten bits.

[16:18] <tbrowder> and after the single param as above, regular named but non-mandatory params would need to be allowed 

[16:22] *** sno joined
[16:22] *** Dwarf left
[16:23] <rbt> tbrowder:  Does this do it? foo(\param, $param2)

[16:25] <tbrowder> maybe, i'll try that--i've never used such an arg name before (never thought i would have a use case)--this may do the trick--thanks!

[16:28] <tbrowder> before i try that, i need to be more specific. the caller may use @ or $ for an array. i'm trying to avoid a multi if i can

[16:29] *** xinming_ left
[16:30] *** JJMerelo left
[16:36] *** andrzejku left
[16:37] <tbrowder> rbt: i gave up and so far an easy multi has taken care of the problem, thanks, though.

[16:42] *** soursBot left
[16:47] *** soursBot joined
[16:51] <[Coke]> can I ask why you were trying to avoid a multi/

[16:51] <[Coke]> ?

[16:52] *** xinming_ joined
[16:59] *** chloekek left
[17:01] *** andrzejku joined
[17:04] <tbrowder> laziness...

[17:04] *** maggotbrain joined
[17:06] <tbrowder> actually i was trying to change two subs into one but i later decided that a correct solution is preferred at the moment.

[17:06] *** aluaces joined
[17:06] *** aluaces is now known as alberto

[17:07] *** alberto is now known as Guest4273

[17:11] *** chloekek joined
[17:15] *** ShimmerFairy left
[17:18] *** ShimmerFairy joined
[17:18] *** sno left
[17:19] *** OpenZen joined
[17:26] *** patrickb left
[17:30] *** andrzejku left
[17:31] *** brtastic left
[17:36] *** rbt left
[17:37] *** rbt joined
[17:41] *** flyingtiger joined
[17:48] *** chloekek left
[17:51] *** brtastic joined
[17:54] *** Dwarf joined
[17:54] <Dwarf> raku raku-diceroll/dice.p6  2.32s user 0.11s system 153% cpu 1.584 total

[17:55] <Dwarf> Well the compiling worked, not sure I'm happy about the speed gains though

[17:58] <timotimo> this is a hand-compiled moarvm on an arm system? compared to what?

[17:58] <Dwarf> The old 2019 version ubuntu ships

[17:58] <timotimo> OK

[17:59] <Dwarf> that's uh.... 2019.11-4

[17:59] <timotimo> is the dice.p6 code available on line?

[17:59] <Dwarf> Yep!

[18:00] *** mniip joined
[18:00] <Dwarf> It's my first thing written in raku though so... it could be better probably. https://bcome.nl/git/raku-diceroll.git/tree/dice.p6

[18:01] <timotimo> yeah, grammars aren't the fastest thing we have

[18:01] <Dwarf> I knew the risks I was taking 

[18:01] <timotimo> does it get much faster the second time it runs? how about timing raku -e '' to get a rough estimate of what "doing nothing" costs?

[18:01] <Dwarf> I'll give it a shot!

[18:02] <Dwarf> raku -e ''  0.71s user 0.07s system 118% cpu 0.658 total

[18:02] <timotimo> that's relatively slow, sadly

[18:02] <Dwarf> Question: disk speed potentially affects this right? 

[18:03] <timotimo> yeah, but if you have enough ram, linux would normally keep the files around for faster retrieval

[18:03] <timotimo> so the second time you run it should not have to pay for disk access

[18:03] <Dwarf> Though raku -e '' shouldn't suffer from disk read speeds I suppose

[18:04] <timotimo> i think disk wait times would show up mostly as "system" time, too

[18:05] <Dwarf> SD cards are the worst thing about modern ARM devices 

[18:08] *** Sgeo joined
[18:10] *** sena_kun joined
[18:11] *** xinming_ left
[18:12] *** xinming_ joined
[18:12] *** Altai-man_ left
[18:18] *** soursBot left
[18:20] *** soursBot joined
[18:28] *** flyingtiger left
[18:28] *** OpenZen left
[18:28] *** OpenZen joined
[18:30] *** soursBot left
[18:30] *** Doc_Holliwood joined
[18:30] <cpan-raku_> New module released to CPAN! Grammar::DiceRolls (0.2.0) by 03TYIL

[18:36] *** xinming_ left
[18:38] *** xinming_ joined
[18:38] *** kerframil joined
[18:38] *** melezhik joined
[18:41] *** hythm joined
[18:42] *** hythm_ joined
[18:42] *** hythm left
[18:42] *** hythm_ left
[18:46] *** lichtkind joined
[18:53] *** OpenZen left
[19:01] *** stoned75 left
[19:03] *** stoned75 joined
[19:11] *** rbt left
[19:11] *** rbt joined
[19:14] *** hacktor left
[19:17] *** sno joined
[19:18] *** OpenZen joined
[19:24] *** Black_Ribbon joined
[19:28] *** molaf joined
[19:39] *** squashable6 left
[19:40] *** squashable6 joined
[19:43] *** OpenZen left
[19:44] *** squashable6 left
[19:45] *** squashable6 joined
[19:51] *** OpenZen joined
[19:55] *** rindolf left
[20:07] *** OpenZen left
[20:09] *** Altai-man_ joined
[20:11] *** sena_kun left
[20:12] *** soursBot joined
[20:15] *** dakkar left
[20:21] *** OpenZen joined
[20:23] *** OpenZen left
[20:23] *** OpenZen joined
[20:32] *** soursBot_ joined
[20:32] *** soursBot left
[20:35] *** cpan-raku_ left
[20:37] *** cpan-raku joined
[20:37] *** cpan-raku left
[20:37] *** cpan-raku joined
[20:39] *** OpenZen left
[20:41] *** OpenZen joined
[20:42] *** soursBot_ left
[20:44] *** soursBot joined
[20:50] *** aborazmeh joined
[20:50] *** aborazmeh left
[20:50] *** aborazmeh joined
[20:56] *** brtastic left
[21:01] *** peri404 is now known as perigrin

[21:50] <Manifest0> My raku script just died with a SIGSEGV (Address boundary error), which generated a core dump (512MB). Is anybody interested in that? I also have the strace output....

[21:51] <MasterDuke> can you put it somewhere to download?

[21:52] <Manifest0> yeah sure. 

[21:53] <MasterDuke> btw, how did you get your raku? compiled it yourself?

[21:53] <Manifest0> let me find a place to upload the file

[21:53] <MasterDuke> i've used mozilla's service before

[21:53] <Manifest0> yes. Compiled my self. I used the PKGBUILD from aur

[21:54] <Manifest0> can you send me the link?

[21:54] *** soursBot left
[21:54] <MasterDuke> ah. can you easily repro it? because if so, then it'd be good to re-compile moarvm with debug symbols, it'll make the backtraces more useful

[21:54] <MasterDuke> send.firefox.com

[21:55] <Manifest0> yes, I can reproduce it with some easiness.

[21:56] <Manifest0> what are the flags to enable the debug symbols?

[21:56] <Manifest0> https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=rakudo-git

[21:59] <MasterDuke> it's the moarvm package you'll need to rebuild. add `--debug=3` to the `perl Configure.pl` call

[22:00] *** wamba left
[22:02] <Manifest0> unfortunately send.firefox.com only allows 1 download or 24h. https://send.firefox.com/download/17446092b79775e5/#-yQSxymjTomXpFgg7dL1kg

[22:02] <Manifest0> MasterDuke: I will do that tomorrow, if you don't mind. It's already late here. 

[22:02] <MasterDuke> np

[22:03] <Manifest0> thx

[22:09] *** melezhik left
[22:10] *** sena_kun joined
[22:11] *** xinming_ left
[22:11] *** xinming_ joined
[22:12] *** aborazmeh left
[22:12] *** Altai-man_ left
[22:18] *** oneeggeach joined
[22:19] *** oneeggeach left
[22:25] *** xinming_ left
[22:25] *** xinming_ joined
[22:35] *** peteretep left
[22:35] *** zostay left
[22:35] *** cooper left
[22:35] *** pnu__ left
[22:36] *** BuildTheRobots left
[22:36] *** mrsolo left
[22:36] *** Hotbees left
[22:36] *** ukine left
[22:36] *** spycrab0 left
[22:36] *** jhill left
[22:37] *** tbrowder left
[22:37] *** timeless left
[22:37] *** mithaldu_ left
[22:37] *** spycrab0 joined
[22:37] *** RaycatWhoDat joined
[22:37] *** Grinnz left
[22:37] *** NODE left
[22:38] *** ukine joined
[22:38] *** cooper joined
[22:38] *** SmokeMachine joined
[22:38] *** Grinnz joined
[22:38] *** BuildTheRobots joined
[22:38] *** timeless joined
[22:39] <RaycatWhoDat> what is happening.

[22:39] <RaycatWhoDat> So many people joining.

[22:39] *** PotatoGim joined
[22:39] *** NODE joined
[22:39] *** mithaldu_ joined
[22:39] *** peteretep joined
[22:39] *** tbrowder joined
[22:40] <Grinnz> irccloud hiccup

[22:40] *** zostay joined
[22:40] *** pnu__ joined
[22:40] *** mrsolo joined
[22:40] <RaycatWhoDat> ah

[22:41] *** NODE left
[22:41] *** skaji_ joined
[22:42] *** Hotbees joined
[22:42] *** NODE joined
[22:42] *** ChoppedBacon joined
[22:44] <RaycatWhoDat> So, in Raku documentation, when you see something like `Int:D`, what does that mean?

[22:46] <timotimo> it means the parameter is required to be an int, or derived from int, and also definite (not a type object)

[22:47] <RaycatWhoDat> Interesting.

[22:47] <RaycatWhoDat> Where could I read up on that?

[22:47] <timotimo> "type smiley"

[22:48] <RaycatWhoDat> Got it. Thanks again.

[22:49] <timotimo> no prob

[22:49] <timotimo> also when it looks like Int:D: with the extra : that's the invocant marker

[22:49] *** jhill joined
[22:50] <timotimo> where it means that the thing a method is called on is restricted to Int:D

[22:50] <timotimo> can also have a name in between

[22:50] <timotimo> or only a name without a type constraint

[22:51] <tobs> the invocant frowny

[22:51] <timotimo> well, either it's :U: which i guess is a very happy cry?

[22:51] <timotimo> or a :D: where it could be a crying scream

[22:52] *** isacl___ joined
[22:54] <RaycatWhoDat> Schrodinger's Smiley

[22:57] *** xinming_ left
[22:58] *** xinming_ joined
[23:01] <timotimo> that's probably :_:

[23:01] <timotimo> no i guess everybody knows that one

[23:04] *** OpenZen left
[23:26] *** sena_kun left
[23:32] *** pecastro left
[23:37] *** KindTwo joined
[23:37] *** OpenZen joined
[23:39] *** KindOne left
[23:42] *** KindOne joined
[23:43] *** KindTwo left
[23:48] *** devmikey joined
[23:51] *** KindTwo joined
[23:52] *** KindOne left
[23:55] *** KindTwo is now known as KindOne

