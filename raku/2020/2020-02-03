[00:01] <TreyHarris> Of course it makes more sense to write it like this, but it doesn't seem as magical to me

[00:01] <TreyHarris> m: say((^20).pick(20).sort: *.Str)

[00:01] <camelia> rakudo-moar 9e8adb659: OUTPUT: ¬´(0 1 10 11 12 13 14 15 16 17 18 19 2 3 4 5 6 7 8 9)‚ê§¬ª

[00:01] *** gabiruh left
[00:25] *** aborazmeh joined
[00:25] *** aborazmeh left
[00:25] *** aborazmeh joined
[00:28] *** Actualeyes left
[00:28] *** Actualeyes joined
[00:45] *** sena_kun left
[00:47] <discord6> <theangryepicbanana> why doesn't this work? https://repl.it/@theangryepicbanana/AwareInformalLevels

[00:47] <discord6> <theangryepicbanana> I'd really like to be able to have access to stubs across files in a module

[00:48] *** wamba left
[00:49] <discord6> <theangryepicbanana> I know that you can't have circular dependencies but I should be able to access stubs that I defined in the main module file in other files

[00:51] <discord6> <theangryepicbanana> if anyone has any ideas please ping me

[00:53] <leont> Yeah, I've run into something very similar before, I don't have a solution though

[00:54] <leont> It does stop me from splitting up a rather large module into separate files

[00:56] <discord6> <theangryepicbanana> yea

[00:56] <discord6> <theangryepicbanana> I'd rather not put them all in one file

[00:57] <discord6> <theangryepicbanana> I tried using EVAL but apparently local directories go out the window when using the module from zef

[00:57] <discord6> <theangryepicbanana> i.e my current solution https://github.com/ALANVF/Raku-LLVM/blob/master/lib/LLVM.pm6

[01:01] *** sena_kun joined
[01:23] *** gabiruh joined
[01:27] *** atweiden-air joined
[01:29] <atweiden-air> i'm trying to update rakudo to 2020.01 on homebrew for macos rn

[01:30] <atweiden-air> it's been months since i've gotten the moarvm tests to pass

[01:30] *** __jrjsmrtn__ joined
[01:31] <atweiden-air> wget https://rakudo.org/dl/nqp/nqp-2020.01.tar.gz

[01:31] <atweiden-air> tar xvzf nqp-2020.01.tar.gz

[01:31] <atweiden-air> cd nqp-2020.01/src/vm/moar/stage0

[01:31] <atweiden-air> moar nqp.moarvm -e 'for (0,1,2,3,4,5,6,7,8,9) { print($_) }'

[01:32] <atweiden-air> run it with moarvm-2020.01.1 and it keeps segfaulting. it has been segfaulting since last year

[01:32] <atweiden-air> the last release that worked was 2019.07

[01:34] <atweiden-air> am i committing an error here? https://github.com/atweiden/homebrew-core/commit/c08b4ca8c418eff23bac4bc2ae8e098360c9a9d7

[01:41] *** atweiden-air left
[01:51] *** aborazmeh left
[02:06] *** leont left
[02:13] *** juliusdeane joined
[02:14] <juliusdeane> Is there a way to tweak were zef looks for system libraries?

[02:26] *** molaf joined
[02:44] <guifa> TreyHarris: yeah, the difference is in the first one, you‚Äôre basically asking it to coerce everything to before doing cmp on the values, and on the second one, you‚Äôre telling it to use a custom compare function ‚Äî¬†in which you‚Äôre using the default cmp operator.  It goes to show how good multi design can make things very intuitive

[02:46] *** sena_kun left
[03:00] *** sena_kun joined
[03:13] *** Cabanoss- joined
[03:15] *** Cabanoss- is now known as Cabanossi

[03:19] *** tobs left
[03:23] *** tobs joined
[03:26] *** ensamvarg joined
[03:27] *** Actualeyes left
[03:27] *** Actualeyes joined
[03:40] *** molaf left
[03:44] *** juliusdeane left
[03:48] <cpan-raku> New module released to CPAN! Sys::HostAddr (0.1.2) by 03JMASLAK

[04:35] *** cpan-raku joined
[04:35] *** cpan-raku left
[04:35] *** cpan-raku joined
[04:35] <cpan-raku> New module released to CPAN! App::GTD (0.2.1) by 03TYIL

[04:46] *** sena_kun left
[05:00] *** sena_kun joined
[06:00] *** nativecallable6 joined
[06:00] *** notable6 joined
[06:00] *** greppable6 joined
[06:01] *** linkable6 joined
[06:01] *** releasable6 joined
[06:01] *** coverable6 joined
[06:01] *** benchable6 joined
[06:01] *** unicodable6 joined
[06:01] *** sourceable6 joined
[06:01] *** quotable6 joined
[06:02] *** statisfiable6 joined
[06:02] *** evalable6 joined
[06:02] *** bisectable6 joined
[06:02] *** reportable6 joined
[06:02] *** tellable6 joined
[06:02] *** squashable6 joined
[06:03] *** shareable6 joined
[06:03] *** bloatable6 joined
[06:03] *** committable6 joined
[06:12] *** Cabanossi left
[06:20] *** Doc_Holliwood joined
[06:37] *** wamba joined
[06:45] *** sena_kun left
[06:52] *** rindolf joined
[06:59] *** sena_kun joined
[07:31] *** domidumont joined
[07:31] *** abraxxa joined
[07:32] *** domidumont left
[07:32] *** abraxxa left
[07:32] *** abraxxa joined
[07:33] *** Doc_Holliwood left
[07:34] *** domidumont joined
[07:35] *** kensanata joined
[07:37] *** abraxxa left
[07:38] *** abraxxa joined
[07:49] *** AlexDaniel joined
[07:49] *** AlexDaniel left
[07:49] *** AlexDaniel joined
[08:28] *** zakharyas joined
[08:46] *** sena_kun left
[08:54] *** Doc_Holliwood joined
[09:01] *** sena_kun joined
[09:07] *** kensanata left
[09:08] *** wamba left
[09:14] *** dakkar joined
[09:25] *** hacktortu joined
[09:28] *** pecastro joined
[09:33] *** peba joined
[09:35] <peba> Hi, is it possible to skip the (re)parse stage on starting a raku/moarvm program ? My raku spends > 100 mSeconds even in onliners 

[09:36] <peba> Stage parse      :   0.133

[09:36] <peba> raku -version

[09:36] <peba> This is Rakudo version 2020.01 built on MoarVM version 2020.01.1

[09:36] <peba> implementing Perl 6.d.

[09:38] *** Doc_Holliwood left
[09:38] *** abraxxa left
[09:39] *** atweiden-air joined
[09:39] *** abraxxa joined
[09:39] *** abraxxa left
[09:41] <lizmat> see answer on https://stackoverflow.com/questions/60036312/does-raku-perl6-always-parse/60036558#60036558

[09:43] <lizmat> afk for a few hours&

[09:44] *** aluaces joined
[09:59] *** kensanata joined
[10:03] <peba> @lizmat: Wasting > 100 mS in the (re)parsing stage looks like a design error ? Why always (re)parse the same raku code ? Please have a look at other language designs.

[10:04] <peba> time raku --stagestats hello_world.pl

[10:04] <peba> Stage start      :   0.000

[10:04] <peba> Stage parse      :   0.133

[10:04] <peba> Stage syntaxcheck:   0.000

[10:04] <peba> Stage ast        :   0.000

[10:04] <peba> Stage optimize   :   0.002

[10:04] <peba> Stage mast       :   0.006

[10:04] <peba> Stage mbc        :   0.001

[10:04] <peba> Stage moar       :   0.000

[10:05] <tyil> peba: please don't spam in here, use a paste service instead

[10:05] <peba> ok

[10:05] <tyil> you can pipe output of commands through `nc tyil.nl 9999` if you need :)

[10:06] <tyil> I agree with your assesment, though, the startup time is quite slow compared to most other languages, but I know some very talented people are hard at work at improving things

[10:06] <tyil> I'm sadly not talented enough to shine in that department, but if you have the required skills I'm sure they're more than welcome to get you started

[10:09] <peba> @tyil maybe ther's a way to say skip parsing stage ?   

[10:09] <tyil> perhaps, I don't know much about the inner workings of the language :(

[10:09] *** kensanata left
[10:12] *** xinming left
[10:12] *** xinming joined
[10:13] <jnthn> peba: It's almost certainly the time taken to load the (pre-compiled) built-ins. It just shows up under the parse stage because it's the parser that first asks for the builtins.

[10:14] <jnthn> (The parse stage of the builtins is *much* longer than that.)

[10:16] *** Kaiepi joined
[10:16] <peba> @jnthn: thank you

[10:22] *** Doc_Holliwood joined
[10:34] *** atweiden-air left
[10:35] *** atweiden-air joined
[10:46] *** sena_kun left
[10:52] *** aborazmeh joined
[10:52] *** aborazmeh left
[10:52] *** aborazmeh joined
[11:01] *** sena_kun joined
[11:02] *** Doc_Holliwould joined
[11:06] *** Doc_Holliwood left
[11:06] *** hacktortu left
[11:14] *** peba left
[11:15] *** aborazmeh left
[11:20] *** Mithaldu` joined
[11:20] *** hacktortu joined
[11:35] *** atweiden-air left
[11:48] *** stoned75 joined
[12:01] <timotimo> we might want to put the link to the resources page a bit further to the top on docs.raku.org and/or switch Documentation and Resources around in raku.org's menu bar thingie

[12:03] *** wamba joined
[12:03] *** AlexDaniel left
[12:04] *** abraxxa joined
[12:07] *** Doc_Holliwould left
[12:13] *** wamba left
[12:19] *** aborazmeh joined
[12:19] *** aborazmeh left
[12:19] *** aborazmeh joined
[12:21] *** zakharyas left
[12:27] *** aborazmeh left
[12:29] *** sno left
[12:30] *** sno joined
[12:45] *** sena_kun left
[12:47] *** Tirifto joined
[12:58] *** lucasb joined
[13:01] <rba> Webhost (*.raku*.org/*.perl6.org) VM migration this evening (~20:00 Europe/Vienna TZ), expect up to 30 minutes downtime.

[13:01] <tellable6> 2020-02-01T17:11:12Z #raku-dev <patrickb> rba The same URL as above now contains a rakubrew-1.tgz with a new release. Can you put them on rakubrew.org?

[13:01] *** sena_kun joined
[13:02] <nine> tyil: it's got nothing at all to do with talent. It's all about investing the time to get acquainted with the code base. When I got started literally the only things I knew about compilers were from one of jnthn's talks: "compilers are all about trees" and "compilers are easy to test because the take input, process it and produce output"

[13:03] *** ensamvarg left
[13:06] *** liubianshi joined
[13:09] <liubianshi> :q

[13:09] <liubianshi> \q

[13:09] *** liubianshi left
[13:17] <Tirifto> Aha! To import modules from a custom path set at runtime, it looks like I can do ‚Äò%*ENV<PERL6LIB> = $path‚Äô, followed by ‚Äòrequire ::($plugin)‚Äô. I guess that‚Äôs the best way to do it available? :P

[13:19] *** Doc_Holliwould joined
[13:20] <nine> Tirifto: to do what exactly?

[13:34] *** mensvaga joined
[13:34] *** leont joined
[13:37] <dakkar> Tirifto: or maybe https://docs.raku.org/type/CompUnit::Repository::FileSystem

[13:41] *** kensanata joined
[13:57] *** Doc_Holliwould left
[14:06] *** zakharyas joined
[14:07] *** mahmudov joined
[14:08] <dakkar> actually I don't know how to use stuff loaded by a CompUnit::Repository

[14:15] *** wamba joined
[14:16] *** gugod joined
[14:23] *** fluca1978 joined
[14:24] <fluca1978> hi, I'm searching for an hint about the shortest way to rotate a matrix. For instance @a = [1,2], [a,b] I would like to obtain @b = [1,a], [2,b]. Any suggestion?

[14:27] *** foo333 joined
[14:32] <stoned75> m: my @m = [1,2],[3,4]; say [Z] @m;

[14:32] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´((1 3) (2 4))‚ê§¬ª

[14:36] <fluca1978> stoned75: thanks, I didn't remember Z!

[14:37] <stoned75> see book "using raku" challenge 67: https://andrewshitov.com/2019/10/13/using-raku-the-free-book/

[14:37] <stoned75> ;-)

[14:40] <Geth> ¬¶ doc/str-version: 0efcb72704 | (Stoned Elipot)++ | doc/Type/Str.pod6

[14:40] <Geth> ¬¶ doc/str-version: Document Str.Version

[14:40] <Geth> ¬¶ doc/str-version: review: https://github.com/Raku/doc/commit/0efcb72704

[14:42] *** AlexDaniel joined
[14:42] <Geth> ¬¶ doc: stoned++ created pull request #3197: Document Str.Version

[14:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3197

[14:42] *** AlexDaniel left
[14:42] *** AlexDaniel joined
[14:44] *** sena_kun left
[14:45] *** Doc_Holliwould joined
[14:51] <nine> dakkar: CompUnit::Repositorys load modules. The should be pretty straight forward to use :D

[14:52] <dakkar> that's what I thought ‚ò∫ but then I can't seem to get raku to see the symbols that those modules declare

[14:52] *** molaf joined
[14:52] *** kensanata left
[14:53] *** mahmudov left
[14:56] <nine> dakkar: it won't because the repository will load the module for you and return a CompUnit through which you can access it. The CompUnit's .handle e.g. contains the .globalish-package in which global symbols (e.g. declared packages) will reside.

[14:56] *** AlexDaniel left
[14:57] <nine> `use` statements handle that for you: https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L1505

[14:57] <dakkar> aha! now if only https://docs.raku.org/type/CompUnit mentioned any of that‚Ä¶

[14:58] *** fluca1978 left
[14:59] <nine> dakkar: it also contains an .export-package which contains exported symbols (i.e. `is export` stuff). Again `use` does it for you behind the scenes: https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L1090

[15:01] <dakkar> https://gist.github.com/dakkar/cd146eb3f4fa0a80e23e7a5eebce8b03

[15:01] *** sena_kun joined
[15:03] <dakkar> Tirifto: that gist contains a working example of "load a module from a particular directory" that could be sensible for plugins

[15:03] *** mahmudov joined
[15:04] <nine> dakkar: why not have plugins installed like all other modules and get the same benefits?

[15:05] <dakkar> I don't know, I was just playing around in the spirit of the question

[15:05] <dakkar> ¬´To import modules from a custom path set at runtime¬ª

[15:05] <nine> That's why I asked Tirifto what they were trying to achieve exactly. My guess is it was the wrong question in the first place

[15:17] <Tirifto> dakkar: Thank you; I should probably play around with that, in turn!

[15:18] <dakkar> Tirifto: but also think about what you really need, as nine says

[15:18] <dakkar> (nine knows things, I just pretend ‚ò∫)

[15:21] <Tirifto> nine: I have a script (for assembling simple websites) and would like to make it extensible to a degree. The idea is placing the extensions, which are Raku modules, into the website‚Äôs configuration directory, and have the script run the subroutines defined therein on its data.

[15:23] <Tirifto> (I don‚Äôt know if that‚Äôs a decent way to allow extensions generally, but it‚Äôs the simplest I came up with.)

[15:25] *** mowcat joined
[15:25] *** melezhik joined
[15:26] *** veesh_ joined
[15:26] *** Actualeyes left
[15:26] *** Actualeyes joined
[15:27] <nine> Tirifto: my guess is that at some point you will want to install the extensions properly and store some configuration into the website directory. Code has a tendency to grow and to become more complex. If you store it in the website directory, using it for another website means copying it. At some point you will resent the chaos

[15:29] *** veesh joined
[15:30] *** Doc_Holliwould left
[15:31] *** veesh_ left
[15:32] *** Doc_Holliwould joined
[15:34] <Tirifto> nine: That‚Äôs a good point. Fortunately the code should be easy to adapt for this, as the configuration for each extension is already separate, so it‚Äôs just the question of where the modules are loaded from. And I reckon it could look for them both in the website directory *and* the standard repository.

[15:40] *** dansolo42 joined
[15:40] <Tirifto> My main motivation for having them in the website‚Äôs directory is that it might potentially be more straightforward for simple programs that only concern the website than getting the operating system‚Äôs or Raku‚Äôs package management tools involved. But I‚Äôll mind that option as well; thank you for your insight!

[15:40] <nine> Tirifto: just load it as a module. %*ENV<RAKULIB> gives the user plenty of possibility to add additional locations.

[15:41] *** rindolf left
[15:43] <nine> You can use CompUnit::Repository::Installation.installed to find your plugins

[15:46] *** rindolf joined
[15:53] *** abraxxa left
[15:54] *** abraxxa joined
[15:58] *** hungrydonkey joined
[16:12] <holyghost> I inserted Gauss curve interal probabilities, in github.com/theholyghost2/p6-Game-Bayes, debugging and compiling later on

[16:13] <holyghost> s/interal/integral

[16:14] *** stoned75 left
[16:15] *** hungrydonkey left
[16:15] *** hungrydonkey joined
[16:15] *** stoned75 joined
[16:15] *** hungrydonkey left
[16:16] *** hungrydonkey joined
[16:23] <stoned75> lizmat: thanks for your comment! And, am I get things right when I say that Str.Version is a rakudo addition, not a Raku addition ?

[16:27] *** MilkmanDan joined
[16:32] *** molaf left
[16:33] <[Coke]> I didn't think Str.Version was rakudo specific.

[16:33] <[Coke]> (I also didn't see text related to that in the PR)

[16:36] <stoned75> lizmat added Str.Version to src/core.c/Str.pm6 does it mean it a raku 6.c feature ?

[16:36] *** MilkmanDan left
[16:37] *** MilkmanDan joined
[16:37] <lizmat> no, it is actually a 6.e feature

[16:37] <[Coke]> I don't think we're currently tracking 6.c vs. 6.d in the docs.

[16:37] <lizmat> with 6.d you can *not* be sure it is supported

[16:37] <[Coke]> we do have points in the docs where we say it's available starting in YYYY.MM release, though

[16:38] *** zakharyas left
[16:38] <[Coke]> while the release note is rakudo specific, the features themselves are usually not considered such.

[16:38] <[Coke]> (there are a small number of things that are Rakudo specific, like RAKUDO_ env vars, and 'dd')

[16:39] <stoned75> or so it is a raku feature from 6.e

[16:39] <stoned75> s/or/ok/

[16:39] *** zakharyas joined
[16:42] <[Coke]> it's available today. it won't be part of spec until 6.e

[16:45] <stoned75> ok. doc repo already have a couple of references to 6.e so I guess I could mention 6.e about Str.Version, alongside rakudo 2020.01

[16:45] *** zakharyas left
[16:47] *** sena_kun left
[17:00] *** sena_kun joined
[17:26] <stoned75> version mentions in doc repo are not consistent, a nice rototill would be needed :)

[17:27] <Geth> ¬¶ doc/str-version: 038fd29668 | (Stoned Elipot)++ | doc/Type/Str.pod6

[17:27] <Geth> ¬¶ doc/str-version: Add version information for Str.Version

[17:27] <Geth> ¬¶ doc/str-version: review: https://github.com/Raku/doc/commit/038fd29668

[17:32] *** foo333 left
[17:34] <Geth> ¬¶ doc: 0efcb72704 | (Stoned Elipot)++ | doc/Type/Str.pod6

[17:34] <linkable6> Link: https://docs.raku.org/type/Str

[17:34] <Geth> ¬¶ doc: Document Str.Version

[17:34] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/0efcb72704

[17:34] <Geth> ¬¶ doc: 038fd29668 | (Stoned Elipot)++ | doc/Type/Str.pod6

[17:34] <Geth> ¬¶ doc: Add version information for Str.Version

[17:34] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/038fd29668

[17:34] <Geth> ¬¶ doc: 3ce7d84454 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[17:34] <Geth> ¬¶ doc: Merge pull request #3197 from Raku/str-version

[17:34] <Geth> ¬¶ doc: 

[17:34] <Geth> ¬¶ doc: Document Str.Version

[17:34] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/3ce7d84454

[17:49] *** xinming left
[17:49] *** chloekek joined
[17:50] *** xinming joined
[17:57] *** dakkar left
[18:02] *** hungrydonkey left
[18:04] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/02/03/2020-05-releasalot/

[18:10] *** domidumont left
[18:16] <Doc_Holliwould> m: say so 8 %% 2

[18:16] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´True‚ê§¬ª

[18:16] <Doc_Holliwould> do you believe me when I say that says "False" on my build?

[18:17] <Doc_Holliwould> m: say so 8 % 2

[18:17] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´False‚ê§¬ª

[18:17] <Doc_Holliwould> acg

[18:18] <Doc_Holliwould> shell issue

[18:20] *** wildtrees joined
[18:22] *** benjif_ joined
[18:25] <Geth> ¬¶ doc: 56cb198c7f | Coke++ | doc/Type/Callable.pod6

[18:25] <linkable6> Link: https://docs.raku.org/type/Callable

[18:25] <Geth> ¬¶ doc: fix compilation

[18:25] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/56cb198c7f

[18:29] *** thundergnat joined
[18:30] <thundergnat> lizmat: Weekly squashathon January 8 should be February 8?

[18:31] <thundergnat> lizmat++ for the weekly 

[18:31] *** patrickb joined
[18:31] *** thundergnat left
[18:31] <Grinnz> lizmat: my post was actually about files already categorized as raku code now being labeled as Raku instead of Perl 6 - the new extensions aren't categorized yet (as commented)

[18:34] <Geth> ¬¶ doc: 8b65a4a7ed | Coke++ | 2 files

[18:34] <Geth> ¬¶ doc: emphasize that we mean the auth option to use

[18:34] <Geth> ¬¶ doc: 

[18:34] <Geth> ¬¶ doc: Closes #3164

[18:34] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/8b65a4a7ed

[18:34] <linkable6> DOC#3164 [closed]: https://github.com/Raku/doc/issues/3164 [RFE][docs] "auths" unclear.

[18:35] <stoned75> I am a bit surprised that Any.repeated/repeated() and Supply.repeated do not have a similar behaviour

[18:36] <stoned75> m: my @l = 1,2,3,3,4,3; say repeated(@l); say Supply.from-list(@l).repeated.list;

[18:36] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´(3 3)‚ê§(3)‚ê§¬ª

[18:37] <stoned75> am I missing something ?

[18:38] <Geth> ¬¶ doc: 857368655c | Coke++ | doc/Type/IO/Handle.pod6

[18:38] <linkable6> Link: https://docs.raku.org/type/IO::Handle

[18:38] <Geth> ¬¶ doc: Avoid run-on sentence

[18:38] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/857368655c

[18:45] *** xelxebar_ joined
[18:45] *** xelxebar left
[18:46] *** sena_kun left
[18:47] <Geth> ¬¶ doc: 21b3e04eb5 | Coke++ | 2 files

[18:47] <Geth> ¬¶ doc: learn new words

[18:47] <Geth> ¬¶ doc: 

[18:47] <Geth> ¬¶ doc: (sort and lowercase also)

[18:47] <Geth> ¬¶ doc: 

[18:47] <Geth> ¬¶ doc: Closes #3182

[18:47] <linkable6> DOC#3182 [closed]: https://github.com/Raku/doc/issues/3182 [bug] spell check failures

[18:47] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/21b3e04eb5

[18:56] <wildtrees> so i call $s.split('',:skip-empty) how do I get it's size? 

[18:56] *** aborazmeh joined
[18:56] *** aborazmeh left
[18:56] *** aborazmeh joined
[18:56] <wildtrees> where $s = "hello" or something 

[18:58] <stoned75> wildtrees: use .elems method ?

[19:01] *** sena_kun joined
[19:19] <wildtrees> stoned75, thanks that seems to work 

[19:19] <lizmat> thundergnat++  # fixed

[19:20] <lizmat> Grinnz++  # fixed

[19:21] <[Coke]> wildtrees: you can also get the length of the original string with .chars if that helps.

[19:22] <MasterDuke> atweiden-air: your example works for me in linux. don't know what's up

[19:22] *** molaf joined
[19:22] <tellable6> MasterDuke, I'll pass your message to atweiden-air

[19:23] <MasterDuke> lizmat: could you give it a try in macos?

[19:23] <lizmat> MasterDuke: not sure what you want me to try ?

[19:23] <MasterDuke> https://colabti.org/irclogger/irclogger_log/raku?date=2020-02-03#l25

[19:24] <lizmat> don't we need  libtommath ???

[19:25] <MasterDuke> i think that change is to use the moarvm supplied one, not the system one

[19:25] <lizmat> .tell atweiden-air why removing the --has-libtommath ?

[19:25] <tellable6> lizmat, I'll pass your message to atweiden-air

[19:26] <lizmat> ah,  hmmm...

[19:30] <lizmat> MasterDuke: last time I used homebrew, it set of a chain of nasty problems for me

[19:30] <lizmat> so I'm not too fond of it

[19:31] *** wamba left
[19:31] <MasterDuke> what about just cd'ing into that directory in your nqp checkout and running that command?

[19:31] <lizmat> eh, which command ?

[19:31] <MasterDuke> that's what i meant by worked for me

[19:31] *** heth joined
[19:32] <MasterDuke> cd nqp-2020.01/src/vm/moar/stage0; moar nqp.moarvm -e 'for (0,1,2,3,4,5,6,7,8,9) { print($_) }'

[19:33] <lizmat> Unhandled exception: Unsupported serialization format version 22 (current version is 21)

[19:33] <lizmat>    at <unknown>:1  (ModuleLoader.moarvm:<dependencies+deserialize>)

[19:33] <lizmat>  from <unknown>:1  (nqp.moarvm:<dependencies+deserialize>)

[19:33] <lizmat> wait, that may be not up to date yet  :-)

[19:34] <lizmat> nope, after a reconfig and make, still same error ?

[19:36] <MasterDuke> huh. maybe a difference because i have a separate moarvm checkout i use instead of having nqp gen it?

[19:37] <lizmat> no idea...  :-(

[19:37] <wildtrees> p6: "hello".split('',:skip-empty).say ; 

[19:37] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´(h e l l o)‚ê§¬ª

[19:38] <wildtrees> is that the way to get a list-like sequence of characters from a string in raku? 

[19:39] <lizmat> m: say "hello".comb   # faster and better optimised

[19:39] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´(h e l l o)‚ê§¬ª

[19:39] <lizmat> wildtrees ^^

[19:39] <wildtrees> ok thanks 

[19:40] <stoned75> lizmat: may I bother you about Supply.repeated ?

[19:40] <lizmat> you may :)

[19:40] <stoned75> I am a bit surprised that Any.repeated/repeated() and Supply.repeated do not have a similar behaviour

[19:41] <stoned75> m: my @l = 1,2,3,3,4,3; say repeated(@l); say Supply.from-list(@l).repeated.list;

[19:41] <camelia> rakudo-moar 931f5ae0c: OUTPUT: ¬´(3 3)‚ê§(3)‚ê§¬ª

[19:41] <wildtrees> is * a symbol or something? 

[19:41] <lizmat> install/bin/moar nqp.moarvm -e 'for (0,1,2,3,4,5,6,7,8,9) { print($_) }'    0123456789   # Masterduke

[19:41] <lizmat> stoned75: that looks like a bug

[19:42] <lizmat> hmmm

[19:42] *** domidumont joined
[19:42] <MasterDuke> huh. must be something weird with their system, not something i can debug here and now

[19:42] <stoned75> Any.repeated/repeated() consider anu repetition whereas Supply.repeated considers only successive repetition

[19:42] <stoned75> a lookup hash is used by Any.repeated/repeated()

[19:42] <lizmat> yeah, looks like I implemented squish semantics for Supply.repeated   :-)

[19:43] <lizmat> good catch, will fix right away

[19:43] <stoned75> cool! many thanks

[19:43] *** domidumont left
[19:47] *** aborazmeh left
[19:53] *** aluaces left
[19:53] *** aluaces joined
[19:55] *** aluaces left
[20:02] *** aluaces joined
[20:09] *** b2gills left
[20:09] *** b2gills joined
[20:11] *** m_athias joined
[20:14] *** maggotbrain left
[20:16] *** Black_Ribbon joined
[20:16] *** maggotbrain joined
[20:23] *** maggotbrain left
[20:23] *** uzl[m] joined
[20:23] *** xelxebar_ left
[20:24] *** xelxebar joined
[20:24] *** maggotbrain joined
[20:33] <chloekek> Ugh I accidentally forked something to raku-community-modules instead of to my own GH user.

[20:34] <lizmat> oh jee 

[20:34] <chloekek> I deleted the fork, no worries. :P

[20:36] *** kensanata joined
[20:39] *** wamba joined
[20:42] *** kensanata left
[20:45] *** sena_kun left
[20:45] *** wamba left
[20:46] *** wamba joined
[21:00] *** sena_kun joined
[21:03] *** uzl[m] left
[21:09] *** sftp joined
[21:16] *** sftp left
[21:21] *** rindolf left
[21:21] *** uzl[m] joined
[21:27] *** sftp joined
[21:28] *** zaergtfhj joined
[21:28] <zaergtfhj> HI

[21:29] <zaergtfhj> Is it true that Raku is not interpreted, it run on a virtual machine ?

[21:30] *** xelxebar left
[21:30] *** xelxebar joined
[21:31] <Grinnz> depending on your definition of interpreted, some have said the same about Perl

[21:31] <Grinnz> i choose to not look at it that technically, but in my usability

[21:33] <zaergtfhj> run on virtual machine, mean a program compile the whole program in bytecode, then interprete the bytecode 

[21:33] <MasterDuke> same with many of the common "interpreted" languages, e.g., python, ruby, php

[21:33] <tadzik> iirc that's true for everything except tcl

[21:33] <tadzik> or maybe not even that

[21:33] <MasterDuke> but yes, rakudo compiles raku down to a bytecode that's run by the Moar VM

[21:33] <Grinnz> raku has a more explicit separation of components though

[21:34] <zaergtfhj> Is there a program which read a script line by line

[21:35] <zaergtfhj> i mean an interpreter for Raku

[21:35] <Grinnz> lizmat: it doesn't seem changed...

[21:35] <zaergtfhj> ?

[21:36] <Grinnz> zaergtfhj: why?

[21:36] <zaergtfhj> Grinnz why what ?

[21:36] <Grinnz> most of these languages such a thing would either be impossible or needlessly inefficient

[21:37] <zaergtfhj> impossible ?

[21:37] <zaergtfhj> what is impossible ?

[21:37] *** wildtrees left
[21:38] <Grinnz> raku and scripts of these other languages are not executed strictly sequentially

[21:38] <Grinnz> so reading them sequentially and immediately executing that would not work correctly

[21:39] <zaergtfhj> for example :

[21:39] <zaergtfhj> #!/usr/bin/python3print("Hi !");bullshit

[21:39] <Grinnz> oh, you're just looking for a repl?

[21:39] <zaergtfhj> will still print "Hi!"

[21:39] <zaergtfhj> even if it does not understand the next line

[21:40] *** wildtrees joined
[21:40] <zaergtfhj> that's not possible, cause it is read lsequentially

[21:40] <zaergtfhj> by the interpreter

[21:40] <tadzik> it understands the next line, it crashes after it compiles it

[21:40] <tadzik> it's just a symbol lookup, and the symbol happens to not exist

[21:40] <tadzik> if you put the proper compilation error in there, it won't print anything

[21:41] <tadzik> try a " without an ending "

[21:41] <tadzik> echo "print('a')\n'" | python3 for instance

[21:43] <zaergtfhj> such script will not compiled

[21:43] <zaergtfhj> and not work with a VM

[21:44] *** patrickb left
[21:44] <zaergtfhj> So there is no interpreter for Raku ?

[21:46] <tadzik> nope

[21:46] <tadzik> like Grinnz says, it really doesn't make sense

[21:47] <zaergtfhj> Catastophic. Is someone planning to provide an interpreter ?

[21:47] <tadzik> ...why?

[21:47] <tadzik> what are you looking for? I don't think it's an interpreter for the sake of having an interpreter

[21:49] <zaergtfhj> You are right I will no longer searched for a VM.

[21:49] <zaergtfhj> an interpeter

[21:49] <zaergtfhj> srry

[21:50] <zaergtfhj> a VM is better

[21:50] <tadzik> well, an interpreter will really work for a very, very simplistic language ‚Äì that's why there really isn't one around anymore, for any language

[21:50] <tadzik> not for python, not for perl 5, and not for raku either :)

[21:51] <zaergtfhj> Catastrophic.

[21:52] <tadzik> why :)

[21:52] <tadzik> what's catastrophic about VMs?

[21:53] *** mahtob joined
[21:53] *** zaergtfhj left
[21:53] <leont> Shell is typically interpreted, but then again shell is "simple"

[21:54] *** mahtob left
[21:55] *** mahtob joined
[21:55] *** mahtob left
[21:56] *** mahtob joined
[21:57] *** mahmudov left
[21:57] *** mahtob left
[22:12] *** mahmudov joined
[22:30] *** wildtrees left
[22:31] *** wildtrees joined
[22:47] *** sena_kun left
[22:58] *** melezhik left
[22:59] *** chloekek left
[23:02] *** sena_kun joined
[23:19] *** pecastro left
[23:23] <TreyHarris> Is there a DRY way to define a type method? i.e., so you don't have to say B twice in `class B { method (B:U: ...) ... }`?

[23:24] *** wildtrees left
[23:26] *** wildtrees joined
[23:26] <discord6> <theangryepicbanana> you could always add some sort of custom is static attribute

[23:26] <discord6> <theangryepicbanana> not sure if signatures are mutable

[23:27] *** wildtrees left
[23:27] *** Doc_Holliwould left
[23:29] *** cpan-raku left
[23:29] <TreyHarris> theangryepicbanana: not trying to do this at runtime. I'm literally asking if in my B.rakumod I can avoid typing `B` literally throughout

[23:31] *** melezhik joined
[23:31] <discord6> <theangryepicbanana> oh

[23:31] <discord6> <theangryepicbanana> I don't think so

[23:31] *** cpan-raku joined
[23:31] *** cpan-raku left
[23:31] *** cpan-raku joined
[23:31] <cpan-raku> New module released to CPAN! Sparrowdo (0.1.3) by 03MELEZHIK

[23:32] <cpan-raku> New module released to CPAN! Sparrow6 (0.0.12) by 03MELEZHIK

[23:32] <discord6> <theangryepicbanana> there's always ::?CLASS:U: which works anywhere

[23:39] <discord6> <theangryepicbanana> also yay I finally fixed all of this by putting everything in one file https://github.com/ALANVF/Raku-LLVM/blob/master/lib/LLVM.pm6

[23:39] <discord6> <theangryepicbanana> was it a design choice or a technical limitation for not allowing .circular dependencies?

[23:46] *** hungrydonkey joined
[23:49] *** mahmudov left
[23:59] *** wamba left
