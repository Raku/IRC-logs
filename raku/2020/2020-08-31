[00:00] <guifa> well, actually, I’m not sure how the use Test makes it happen.  The monkey scoping stuff is supposed to be lexically scoped, at least as far as I knew

[00:01] *** DarthGandalf left
[00:03] *** aborazmeh joined
[00:03] *** aborazmeh left
[00:03] *** aborazmeh joined
[00:04] <guifa> oh. whoa

[00:05] <guifa> sub MONKEY-SEE-NO-EVAL() is export { 1 } is apparently all that’s needed

[00:20] *** DarthGandalf joined
[00:36] *** hungryd19 joined
[00:36] *** hungrydonkey left
[00:53] *** thundergnat joined
[00:55] <thundergnat> You really want to be disquieted?

[00:55] <thundergnat> m: my $a = 1; say EVAL("$a + 1"); # yay!

[00:55] <camelia> rakudo-moar fc75105fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma␤to override this error but only if you're VERY sure your data contains␤no injection attacks).␤at <tmp>:1␤------> 3my $a =…»

[00:55] <thundergnat> m: my $a = 1; say "$a + 1".EVAL; #boo

[00:55] <camelia> rakudo-moar fc75105fb: OUTPUT: «2␤»

[00:56] <thundergnat> m: my $e = &CORE::EVAL; my $a = 2; say &$e("$a + 1"); # boo-hoo

[00:56] <camelia> rakudo-moar fc75105fb: OUTPUT: «3␤»

[00:56] <codesections> Oh yikes and/or wow

[00:58] <codesections> So, I'd drafted a Rakudo issue re: the `use Test` behavior, but I guess I shouldn't open it but should instead open a docs issue to add warnings for the Test module?

[00:59] *** thundergnat left
[00:59] *** fooist joined
[01:05] <codesections> Or, actually, maybe I'll open it so there's a record/tracking issue.  Even if that behavior is *known*, it could still be buggy

[01:05] <codesections> (a known bug is still a bug, after all)

[01:08] *** _jrjsmrtn joined
[01:08] *** __jrjsmrtn__ left
[01:21] <Geth> ¦ doc: e72e190595 | Coke++ | xt/pws/code.pws

[01:21] <Geth> ¦ doc: add word

[01:21] <Geth> ¦ doc: 

[01:21] <Geth> ¦ doc: Originally reported by codesections++

[01:21] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e72e190595

[01:23] <[Coke]> codesections: did a full 'make xtest' which I only do very rarely today, and saw "falses".

[01:24] <[Coke]> guessing I was missing a git pull when I did my final aspell tests

[01:24] <codesections>  [Coke]++ well that's _one_ minor mystery solved :)

[01:40] *** Tirifto left
[02:00] *** molaf left
[02:10] *** gnufr33dom joined
[02:13] *** molaf joined
[02:21] *** Cabanossi left
[02:33] *** Cabanossi joined
[03:08] *** fooist left
[03:16] *** gnufr33dom left
[03:42] *** aborazmeh left
[04:04] *** fooist joined
[04:49] *** approaching236 joined
[05:25] *** approaching236 left
[05:35] *** kensanata joined
[05:36] *** wamba joined
[05:36] *** molaf left
[05:50] <raku-bridge> <interwebs> hi

[05:52] *** interwebs joined
[05:53] <interwebs> hello

[05:53] <raku-bridge> <interwebs> alright got in through irc haha

[06:00] *** interwebs60 joined
[06:01] *** interwebs60 left
[06:13] *** fooist left
[06:20] *** billN1VUX left
[06:20] *** rindolf joined
[06:56] *** wamba left
[06:57] *** ufobat joined
[06:58] *** JJMerelo joined
[07:13] *** wamba joined
[07:19] *** Sgeo left
[07:34] *** Cabanossi left
[07:50] *** kensanata left
[07:50] *** nebuchadnezzar left
[07:51] *** nebuchadnezzar joined
[07:52] *** MasterDuke left
[07:54] *** JJMerelo left
[07:55] *** nebuchadnezzar left
[07:57] *** nebuchadnezzar joined
[08:00] *** hungryd19 left
[08:00] *** Xliff left
[08:00] *** vrurg left
[08:00] *** Util left
[08:00] *** shadowpaste left
[08:00] *** bocaneri left
[08:00] *** Celelibi left
[08:00] *** gfldex left
[08:00] *** agentzh left
[08:00] *** stux|RC-only left
[08:02] *** fvox left
[08:02] *** wamba left
[08:05] *** hungryd19 joined
[08:05] *** Xliff joined
[08:05] *** vrurg joined
[08:05] *** Util joined
[08:05] *** shadowpaste joined
[08:05] *** bocaneri joined
[08:05] *** Celelibi joined
[08:05] *** gfldex joined
[08:05] *** agentzh joined
[08:05] *** stux|RC-only joined
[08:06] *** bocaneri left
[08:07] *** bocaneri joined
[08:07] *** fvox joined
[08:10] *** JJMerelo joined
[08:11] <JJMerelo> We are seven questions short of 1500 in StackOverflow https://stackoverflow.com/questions/tagged/raku Will we be able to reach 1500 before the end of August?

[08:41] *** MasterDuke joined
[08:54] *** ambs left
[08:55] *** ambs joined
[09:08] *** JJMerelo left
[09:08] *** zakame left
[09:09] *** zakame joined
[09:39] *** kensanata joined
[09:53] *** rindolf left
[10:04] *** rindolf joined
[10:05] *** pecastro joined
[10:18] *** sena_kun joined
[10:36] *** kensanata left
[10:40] *** TreyHarris left
[10:46] *** pecastro left
[10:54] *** pecastro joined
[10:59] *** finanalyst joined
[11:45] *** Altai-man joined
[11:48] *** sena_kun left
[12:04] *** Archenoth joined
[12:22] <tobs> What was the idea behind MONEY-SEE-NO-EVAL anyway? To protect naïve users from using it? (re: R#3896)

[12:22] <linkable6> R#3896 [open]: https://github.com/rakudo/rakudo/issues/3896 `Cool.EVAL` does not check for the MONKEY-SEE-NO-EVAL pragma

[12:24] <lizmat> tobs: from the doc: In case the MONKEY-SEE-NO-EVAL pragma is not activated, the compiler will complain with a EVAL is a very dangerous function!!! exception. And it is essentially right, since that will run arbitrary code with the same permissions as the program. You should take care of cleaning the code that is going to pass through EVAL if you activate the MONKEY-SEE-NO-EVAL pragma.

[12:24] <tobs> My 2¢ on that issue is that a pragma in my understanding should affect code lexically, and since Cool::EVAL is in another lexical scope, it is not subject to the (dynamic) caller's (in)active pragmata.

[12:26] *** AlexDaniel joined
[12:26] <tobs> But I have to wonder, given ugexe's example and the availability of the method form, whether the pragma doesn't set false expectations of safety and the ALLCAPS name is warning enough...

[12:26] *** AlexDaniel left
[12:26] *** AlexDaniel joined
[12:27] <tobs> (that seemed to kind of go away from the issue on a tangent, so I'm wary of posting it as a comment on GH)

[12:47] *** TreyHarris joined
[13:18] <codesections> tobs: the problem with the ALLCAPS name being warning enough is that Raku has trained users that ALLCAPS == MOP (WHAT, HOW, etc), not ALLCAPS == dangerous  

[13:18] <codesections> (I'm with you on the idea of false expectations of safety, though)

[13:29] *** rir joined
[13:30] <rir> p6: say DateTime.new( :year(1970)).Instant;

[13:30] <camelia> rakudo-moar 8fd029a30: OUTPUT: «Instant:10␤»

[13:31] <rir> ^ Why 10?  I have looked about but not found the reason?

[13:35] *** gnufr33dom joined
[13:43] <codesections> m: say DateTime.new( :year(1970)).Instant.to-posix

[13:43] <camelia> rakudo-moar 8fd029a30: OUTPUT: «(0 False)␤»

[13:44] <codesections> rir: I'm not an expert, but I think the answer is "no reason, really".  `Instant` doesn't represent any particular time; it's just a Raku-specific idea of an instant that supports some, but not all math operations

[13:45] <codesections> If you want the seconds in the Unix epoch, you can convert with `to-posix`, as shown above

[13:49] <codesections> Woo, just saw that my first Rakudo PR was merged!  (Admittedly, it added two words and had no effect besides causing a Rakudo to throw a slightly clearer error.  But still – baby steps!) 

[13:49] <lizmat> codesections++ :-)

[13:51] *** MasterDuke left
[13:55] *** aborazmeh joined
[13:55] *** aborazmeh left
[13:55] *** aborazmeh joined
[14:08] *** MasterDuke joined
[14:13] <Geth> ¦ doc: 2ed434182c | Coke++ | .gitignore

[14:13] <Geth> ¦ doc: Add cache dir created by Documentable

[14:13] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2ed434182c

[14:16] <codesections> [Coke]: So _that's_ why `git pull` made `make update-html` misbehave sometimes!

[14:17] *** Sgeo joined
[14:17] <[Coke]> maybe? I find it just sits there, but doesn't get in the way usually. just tired of seeing it in git status

[14:35] *** billN1VUX joined
[14:37] *** samebchase- left
[14:37] *** [ptc] left
[14:37] *** Bucciarati left
[14:37] *** Bucciarati joined
[14:37] *** [ptc] joined
[14:40] *** samebchase-4 joined
[14:41] *** samebchase-4 is now known as samebchase-

[14:46] <codesections> m: say $*RAKU.compiler.verbose-config.lines.grep(/Raku/).join("\n")

[14:46] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Raku::can-language-versions=6.c 6.c 6.d 6.d.PREVIEW 6.d.TEST 6.d.TESTDEPR 6.e 6.e.PREVIEW␤Raku::codename=␤Raku::implementation=Rakudo␤Raku::language-revisions=c        mods    ␤Raku::language-version=6.d␤Raku::prefix=/home/camelia/rakudo-m-inst-2␤Ra…»

[14:47] <codesections> does any of that info ^^^ let me identify the exact source code for the version of Rakudo I'm running?

[14:47] <codesections> I expected `source-digest` to be the hash for a git commit, but it doesn't seem to be

[14:47] <codesections> or is there a different way to match the code up to the version I'm using?

[14:48] <Altai-man> codesections, --version is not good enough?

[14:48] <codesections> That would be fine too

[14:48] <Altai-man> codesections, what's the use-case?

[14:48] <codesections> Is there a way to get from --version to the exact code for that version?

[14:48] <Altai-man> codesections, yeah.

[14:49] <Altai-man> If it is a non-git version (a release, like 2020.07), go to rakudo releases page and there is a tag with the same name. If it is git version, number after `ge` part is commit sha.

[14:50] <Altai-man> E.g. from "2020.08.2-35-g09e4f2333" you know the thing after `g` is sha, so https://github.com/rakudo/rakudo/commits/09e4f2333

[14:50] <Altai-man> Will be the exact sources, I believe.

[14:51] <Altai-man> And if you are using release, just go to https://github.com/rakudo/rakudo/tags and each tag has sources.

[14:51] <Altai-man> Is it what you wanted or did I misunderstand what you want? :)

[14:52] <codesections> Hmmm, that doesn't seem to *quite* work with the tagged release.  But maybe something is just miss-tagged?

[14:52] *** cpan-raku left
[14:52] *** cpan-raku joined
[14:52] *** cpan-raku left
[14:52] *** cpan-raku joined
[14:52] <codesections> Yes, that's exactly what I'm looking for – thanks!  Now I just need to see why it isn't working ...

[14:52] <Altai-man> codesections, please, specify some details.

[14:52] <Altai-man> codesections, 2020.08 "release" was badly screwed, sorry for that.

[14:53] <Altai-man> So you are supposed to use either 2020.08.1 or 2020.08.2 and it's normal.

[14:53] *** finanalyst left
[14:53] <codesections> I'm checking with the 2020.07 release.  `raku -v` shows '... version 2020.02 ...'; 

[14:54] <codesections> then, in the /rakudo dir, I run `git checkout tags/2020.07`

[14:55] <rir> Thanks codesections,  given how complex and political time is I find your answer unsatisfying:  surely reason was applied even it the choice was to punt; and that that would make your answer on the spot.

[14:55] <rir> p6: say DateTime.new( :year(1970)).Instant

[14:55] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Instant:10␤»

[14:55] <codesections> and then some of the lines reported by `.line` don't match the actual source code

[14:55] <rir> The Docs say an Instant `is not tied to or aware of any epoch`.  To me that implies that 0 is 10 seconds before the unix epoch is not something to rely upon from run to run.  Is that right?  Off-hand that seems to lack utility at best and to be trappy for casual scripters who might get caught 0.0116 % of the time.

[14:56] <Altai-man> codesections, sorry for the dumb question, but do you clean/rebuild after changing branches?

[14:57] <codesections> ... no?  I'm not trying to *use* the checked out version of Raku, I'm trying to check out the version of the source code that corresponds to an already-running Raku process.  Do I need to clean/rebuild to get the correct source code?

[14:58] <Altai-man> codesections, so you are not running raku executable from rakudo/, but from other place?

[14:58] <[Coke]> codesections: are you looking at rakudo source? or the corresponding nqp/moarvm code?

[14:59] *** gnufr33dom left
[15:00] *** aborazmeh left
[15:00] <codesections> Altai-man: right.  What I was doing was, in a raku program, running &SOME-CODE.file and &SOME-CODE.line, and then trying to go from that file/line number pair to the source code for whatever version of Rakudo is executing the script (given access to a git repo for Rakudo)

[15:00] <codesections> [Coke]: That's a good question.  Let me look into that

[15:01] <Altai-man> codesections, this is a pretty serious claim, I think, so someone with free time has to look into that trying to reproduce.

[15:01] <codesections> Well, thanks for the help!  At least now I know I'm on the right track :)

[15:05] <codesections> [Coke]: The rakudo source files.  The first mismatched line number I saw was in Range.pm6

[15:05] <[Coke]> you mentioned two different numbers above. are you sure you're looking at the right tag?

[15:06] <[Coke]> you mention 2020.02 and 2020.06

[15:06] <[Coke]> er, 07

[15:08] <codesections> oh, I see where I said '02'.  No, that was a typo.  It's been .06 

[15:08] <codesections> (except when I tested with a non-release version, which doesn't have the same issue)

[15:09] <codesections> but that uses a commit hash, not a tag

[15:12] <Altai-man> codesections, I wonder if this can be a bug in .line/.file implementation. Can you double check your data and create a rakudo ticket please with a simple case where the data is mismatched?

[15:13] <codesections> Altai-man: Will do

[15:13] <Altai-man> codesections++

[15:19] *** molaf joined
[15:28] *** telex left
[15:30] *** telex joined
[15:31] <codesections> Altai-man: Actually, no issue is needed; I figured out the problem: when a method is an automatically generated accessor method, `line` points to the class declaration (which isn't a bug, but is worth documenting -- I'll open an issue/PR for the `lines` docs).  I got confused because I was looking at a method that had changed, and thus didn't show up the way I expected.

[15:33] <Altai-man> codesections, oh yes, good catch! Thanks for investigating this. :)

[15:35] <Geth> ¦ doc: codesections self-assigned document behavior of `line` method for auto-generated accessor methods https://github.com/Raku/doc/issues/3606

[15:46] *** sena_kun joined
[15:46] *** fooist joined
[15:47] *** Altai-man left
[15:52] *** andrzejku joined
[15:53] *** MasterDuke left
[15:56] <Geth> ¦ doc: codesections++ created pull request #3607: Expand Code.line documentation

[15:56] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3607

[15:57] <guifa> So I tracked down a rakudo, eh, bug?(ish) last night.  Trick was that a gist method used cmp, which stringifies, and so failed on things that can’t be stringified.

[15:58] <guifa> I get why Nil doesn’t have a Str method (even gist sort of violates the idea of Nil begetting Nil for everything), but for Regex it seems of an issue

[15:58] *** aluaces left
[15:59] <guifa> If I had typed my $a = /a/; say “The regex $a matches a”, I think the DWIM expectation is to produce “The regex /a/ matches a” 

[16:01] <codesections> Having not run that code, I agree that's basically the output I would have expected

[16:01] <guifa> m: my $a = /a/; say “The regex $a matches a”

[16:01] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Regex object coerced to string (please use .gist or .raku to do that)␤The regex  matches a␤  in block <unit> at <tmp> line 1␤»

[16:02] <guifa> Instead, it stringifies to the empty string, and produces the warning

[16:02] <guifa> Now, in that case, it makes total sense but…

[16:02] <guifa> say /a/ cmp /b/

[16:02] <evalable6> guifa, rakudo-moar 09e4f2333: OUTPUT: «Regex object coerced to string (please use .gis…»

[16:02] <evalable6> guifa, Full output: https://gist.github.com/bb4a46899fee5e5674e0b01142daddb2

[16:02] <guifa> or more telling

[16:03] <guifa> say /this is a really long regex that will probably never match anything/ cmp ‘’

[16:03] <guifa> m: say /this is a really long regex that will probably never match anything/ cmp ‘’

[16:03] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at <tmp>:1␤    ------> 3say /this7⏏5 is a really lon…»

[16:04] <guifa> say /thisisareallylongregexwithoutspacestoavoidthatannoyingwarningandwillnevermatchanything/ cmp ‘’

[16:04] <guifa> m: say /thisisareallylongregexwithoutspacestoavoidthatannoyingwarningandwillnevermatchanything/ cmp ‘’

[16:04] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Regex object coerced to string (please use .gist or .raku to do that)␤Same␤  in block <unit> at <tmp> line 1␤»

[16:25] *** ufobat left
[16:34] *** approaching236 joined
[16:35] *** rir left
[17:04] *** domidumont joined
[17:39] *** zacts joined
[17:44] *** mowcat joined
[17:46] *** zakame left
[17:51] *** zakame joined
[17:56] *** fooist left
[18:13] *** natrys joined
[18:21] *** aluaces joined
[18:22] *** molaf left
[18:29] *** bocaneri left
[18:46] *** orinthe left
[18:46] *** orinthe joined
[19:05] *** kensanata joined
[19:10] *** finanalyst joined
[19:12] *** domidumont left
[19:17] <Geth> ¦ problem-solving: vrurg assigned to jnthn Issue Coercion reconsidered and unified https://github.com/Raku/problem-solving/issues/227

[19:21] *** nebuchadnezzar left
[19:22] *** nebuchadnezzar joined
[19:30] *** zacts left
[19:37] <Geth> ¦ doc: e539502c0e | (Daniel Sockwell)++ (committed by Juan Julián Merelo Guervós) | doc/Type/Code.pod6

[19:37] <Geth> ¦ doc: Expand Code.line documentation

[19:37] <Geth> ¦ doc: 

[19:37] <Geth> ¦ doc: Code.line's documentation previously just stated that it returns the

[19:37] <Geth> ¦ doc: line of the code object's declaration.  This is *usually* true, but

[19:37] <Geth> ¦ doc: isn't true for auto-generated code objects, which don't have a

[19:37] <Geth> ¦ doc: declaration.  This commit explains how the method works in that case.

[19:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e539502c0e

[19:37] <linkable6> Link: https://docs.raku.org/type/Code

[19:37] <Geth> ¦ doc: 4b94178870 | (Daniel Sockwell)++ (committed by Juan Julián Merelo Guervós) | doc/Type/Code.pod6

[19:37] <Geth> ¦ doc: Add example for Code.line with automatic accessor

[19:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/4b94178870

[19:40] *** cpan-raku left
[19:41] *** cpan-raku joined
[19:41] *** cpan-raku left
[19:41] *** cpan-raku joined
[19:42] *** molaf joined
[19:45] *** Altai-man joined
[19:48] *** sena_kun left
[20:09] <lizmat> Extra Edition of the Rakudo Weekly News: https://rakudoweekly.blog/2020/08/31/new-hash-implementation/

[20:12] <codesections>  «Reports so far indicate 10% to 15% improvements in core setting compilation, as well as in roast testing.» \o/

[20:15] <sjn> nice!

[20:26] *** kensanata left
[20:35] <[Coke]> nwc10++ lizmat++

[20:52] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/08/31/2020-35-election-candidacies/

[21:02] *** finanalyst left
[21:06] <sjn> lizmat: $rwn ~~ s/Rake/Raku/g

[21:09] *** rir joined
[21:11] *** finanalyst joined
[21:15] *** AlexDaniel left
[21:15] <timotimo> what the heck, whenever i click the link to the sparrowdo proposal thing, the tab immediately crashes

[21:16] <lizmat> que?

[21:16] * lizmat checks

[21:16] <lizmat> works for me :-(

[21:16] *** AlexDaniel joined
[21:16] <timotimo> huh, now i copypasted the url and paste&go in a new tab, now the browser UI is unresponsive

[21:16] <timotimo> even in other windows

[21:17] <lizmat> wow

[21:17] *** AlexDaniel left
[21:17] *** AlexDaniel joined
[21:17] <lizmat> so, does https://sparrowdo.wordpress.com/2020/08/28/raku-utils-proposal/ work for you?

[21:17] <timotimo> no

[21:17] <timotimo> maybe nothing works

[21:17] * lizmat uses Safari

[21:19] <timotimo> perhaps updating the system in the background was the cause of my issue

[21:19] <timotimo> now i can load the page

[21:20] *** AlexDaniel left
[21:22] <mendel> rir: i guess the Instant with the value 0 is in TAI (https://en.wikipedia.org/wiki/International_Atomic_Time), whereas DateTime.new(:year(1970)) is in UTC, and around that time UTC was 10s behind TAI - see https://en.wikipedia.org/wiki/Leap_second

[21:29] <lizmat> mendel: indeed, see https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Internals.pm6#L828  :-)

[21:35] <sjn> lizmat: there's a typo in today's weekly news :-)

[21:35] <sjn> s/Rake userbase/Raku userbase/g

[21:36] * sjn still has the perl regexes in his fingers :-P

[21:39] <rypervenche> I hadn't even thought to replace my "I made a typo" syntax with Raku regexes, haha.

[21:43] *** natrys left
[21:44] *** finanalyst left
[21:58] *** andrzejku left
[22:00] <lizmat> sjn++   # thanks, fixed!

[22:00] <unclechu> hey, is there something in raku to handle managed resourse? like auto close of an opened file?

[22:01] <lizmat> unclechu: there is no automatic destruction of objects on scope exit

[22:01] <lizmat> one way to fix this is to use a LEAVE phaser

[22:01] <lizmat> LEAVE .disconnect with $dbh;

[22:02] <unclechu> like if i’d do `with open 'file', :r { smth; .close }` but without a need of manually calling `close`?

[22:03] <lizmat> LEAVE .close with $handle

[22:03] <lizmat> ?

[22:03] <lizmat> or maybe the https://modules.raku.org/dist/FINALIZER module is something for you?

[22:03] <rypervenche> You could also use slurp, which would take care of the closing, no?

[22:03] <[Coke]> nice thing about LEAVE is that it covers exceptional cases too

[22:06] <lizmat> rypervenche: yes, indeed, "slurp" will take care of closing

[22:09] <unclechu> lizmat: i’m trying to do `LEAVE .close with 'file'.IO.open: :a { .get.say }` but it fails with `Unexpected block in infix position (missing statement control word before the expression?)`

[22:11] <unclechu> is it supposed to work with this kind of syntax?

[22:12] <lizmat> I'm not sure what you're trying to achieve here?

[22:12] <lizmat> say the first line of a given file, and make sure it gets closed ?

[22:13] <unclechu> lizmat: yes, more or less

[22:14] <unclechu> define the resource in the first line which will be automatically released after the block evaluation is done

[22:15] <lizmat> with "file".IO.open { say .get; .close }

[22:15] * lizmat just realized that IO::Path doesn't have a .get method

[22:16] <Altai-man> lizmat, but it shouldn't have one, no?

[22:16] <lizmat> why not?  it does have .slurp / .lines / .words ?

[22:16] <unclechu> lizmat: it doesn’t define everything i described in the first line

[22:16] <lizmat> if you're only interested in the first line ?

[22:17] <unclechu> i have to not forget to close it as well as i have to handle exceptions

[22:17] <Altai-man> lizmat, because there is a semantic difference between Path and Handle?

[22:17] <unclechu> lizmat: no, i’m aware of all of those, first line was just an example

[22:17] <unclechu> i need this for more complex scenarios

[22:17] <lizmat> with "file".IO.open { say .get; LEAVE .close }

[22:18] <lizmat> that would close the file whichever way you leave that scope, also with execution errors

[22:18] <unclechu> well, still not the first line, this is more or less what i want: `with 'file'.IO.open: :r { LEAVE { .close; 'closed'.say } .get.say; .get.say; }`

[22:19] <lizmat> Altai-man: well, for me it was a WAT just now  :-)

[22:19] <unclechu> but i’d really prefer this syntax: `LEAVE .close with stuff ...`

[22:19] <lizmat> I'd expected it to be there

[22:19] <Altai-man> unclechu, LEAVE just as other phasers can take blocks.

[22:19] *** aluaces left
[22:19] <lizmat> Altai-man: I think unclechu already got that :-)

[22:20] <unclechu> Altai-man: okay, i know, what does it change here?

[22:20] <Altai-man> Sorry, I'm sleepy, shouldn't have interrupted you...

[22:21] <lizmat> Altai-man: I know the feeling, no worries  :-)

[22:22] <unclechu> Altai-man: np

[22:23] <Altai-man> lizmat, if you ask me, a path is a path. It allows you not to worry about directory separators, get content and all that. A handle is a handle. It allows you to stream input/output. Slurp handies are handies, because you can say "Ok, give me everything at this path", I think, but if you start to treat paths like handles, it becomes somewhat weird.

[22:23] <Altai-man> Like, why even handles in the first place. Just throw more stuff into paths, god objects and all that.

[22:23] <unclechu> lizmat: you said “you’d expect it to be there”, expect what? or it isn’t related to my question?

[22:23] *** rindolf left
[22:24] <Altai-man> s/directory separators/path separators/

[22:24] <lizmat> unclechu: no, that was about my discussion with Altai-man, sorry for the confusion

[22:25] <lizmat> Altai-man: "file".IO.slurp is short for with "file".IO.open(:r) { .slurp; LEAVE .close }   right ?

[22:25] <lizmat> same for "lines" and "words"

[22:26] <lizmat> so why not for "get" ?

[22:28] <Altai-man> lizmat, I'd clarify. Do you found absence of getc, say, read for paths odd?

[22:29] <Altai-man> s/found/find/

[22:29] <Altai-man> Ok, just ignore me now, going afk, I guess.

[22:30] <lizmat> no

[22:30] <lizmat> say would be strange on IO::Path

[22:30] <Altai-man> Why?

[22:30] <lizmat> I could see usefulness on getc , read 

[22:30] <Altai-man> It's just a shortcut for `"file".IO.open(:a) { .say "hehe"; LEAVE .close }`

[22:30] <lizmat> because they would relieve you from having to worry about closing the handle

[22:31] <lizmat> the .say (as would a .write or a .put) are write actions, *that* I don't see happening on IO::Path

[22:31] <lizmat> but anything that's a read action, totally

[22:32] <lizmat> IO::Path.read could be handy for checking on magic file markers

[22:32] <lizmat> without having to worry about .close

[22:33] <Altai-man> lizmat, I don't think we should treat IO::Handle as some unwanted child just because someone can forget something possibly. If that is a real trouble, add a weak warning if DESTROY is called and handle was not closed. Or remove it completely, because it is too dangerous to be left alive.

[22:34] <Altai-man> Hmmmm.

[22:34] <Altai-man> OTOH, I can understand your concern.

[22:35] <Altai-man> Less bugs is better than more. What I see odd here is lifting the burden from one concept to something which is kind of not really related to that.

[22:35] <Altai-man> Paths are paths, abstractions over strings, with handy methods for extensions and all that. They should not bear weight of the world of some different classes.

[22:39] <lizmat> well, by that definition, we should probably deprecated IO::Path.lines and the like ?

[22:39] <Altai-man> E.g., say there is a class Divisor which divides numbers and it can cry when a division by zero is asked for. Instead of doing something where the problem applies, we can add method `safe-division` to Int, `42.safe-division(20)` and it kind of resolves the problem, except that now numbers know something they probably should not know.

[22:40] *** zakame left
[22:40] <lizmat> Altai-man: I totally understand your point

[22:41] <lizmat> it's just that with IO::Path having .lines / .words I sorta expected it also to have .get, and when thinking about also a .read

[22:41] <lizmat> that's all

[22:42] <Altai-man> lizmat, I appreciate the convenience it has, so it is rather hard to judge here (considering I am not a language designer and just a stranger who thinks aloud too much).

[22:42] <lizmat> Altai-man: but it's late here as well... so I'll sleep on it  :-)

[22:42] <lizmat> Altai-man: you're not a stranger, and you definitely do *not* think aloud too much

[22:43] <vrurg> Anyone to share the wisdom of adding a repo to Geth?

[22:43] <lizmat> if anything, too little!

[22:43] <Altai-man> lizmat, sure, have a nice rest, you deserve it!

[22:43] <lizmat> Altai-man: good night!

[22:43] <lizmat> (as do you!)

[22:44] <Altai-man> vrurg, https://github.com/Raku/geth ?

[22:44] <vrurg> lizmat: have a good rest!

[22:44] <Geth> ¦ problem-solving: landyacht assigned to samcv Issue Coercing a string with a Roman numeral throws an error https://github.com/Raku/problem-solving/issues/228

[22:45] <vrurg> Altai-man: added a webhook but lizmat reported it didn't work.

[22:46] *** roguelazer left
[22:47] *** roguelazer joined
[22:49] <Altai-man> vrurg, dunno, I'd check server logs?

[22:50] *** Guest21 joined
[22:52] <vrurg> Altai-man: I don't have access to Geth server. I never remember who does.

[22:54] *** Guest21 left
[22:54] <vrurg> Heh, github reported 'Internal Server Error!' from Geth side...

[22:55] *** Guest21 joined
[22:55] *** Guest21 left
[23:08] *** aborazmeh joined
[23:08] *** aborazmeh left
[23:08] *** aborazmeh joined
[23:10] *** fooist joined
[23:13] *** mowcat left
[23:17] *** Altai-man left
[23:22] <guifa> vrurg++

[23:23] <guifa> (for Coercion considerations)

[23:23] <guifa> also lizmat++ for weekly

[23:33] *** pecastro left
