[00:00] *** xelxebar joined
[00:04] *** pecastro left
[00:35] *** ensamvarg joined
[00:51] *** Altai-man_ joined
[00:53] *** sena_kun left
[00:55] *** markoong left
[01:12] *** aborazmeh joined
[01:12] *** aborazmeh left
[01:12] *** aborazmeh joined
[01:21] *** kst` left
[01:28] <jdv79> Segmentation fault (core dumped) :(

[01:29] <jdv79> that'll take a while to golf...

[01:30] <jdv79> oh - double free or corruption (!prev)\nborted (core dumped)

[01:30] <jdv79> more run

[01:30] <jdv79> *fun

[01:31] *** lichtkind left
[02:08] *** molaf left
[02:20] *** molaf joined
[02:22] *** ZzZombo left
[02:27] *** vike left
[02:31] *** vike joined
[02:38] *** epony left
[02:40] *** epony joined
[02:45] *** Kaiepi left
[02:46] *** Kaiepi joined
[02:52] *** sena_kun joined
[02:54] *** Altai-man_ left
[03:06] *** vike left
[03:07] *** leont left
[03:17] *** camelCaser joined
[03:18] *** ccamel left
[03:19] *** vike joined
[03:21] <xinming> How do we apply roles which is contained in var?

[03:22] <xinming> Something like,  my $role = ::("RoleName");  class T does $role { };

[03:25] <xinming> m: role T { method t { "t".say; } }; class C { method t { "c".say } }; C.^add_role(T); C.^compose; C.new.t;

[03:25] <camelia> rakudo-moar 8c995febd: OUTPUT: «c␤»

[03:25] <xinming> This doesn't return t

[04:03] <timotimo> m: role T { method t { "t".say; } }; my \C = Metamodel::ClassHOW.new_type("C"); C.^add_method(my method t { "c".say }); C.^add_role(T); C.^compose; C.new.t

[04:03] <camelia> rakudo-moar 8c995febd: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[04:03] <timotimo> m: role T { method t { "t".say; } }; my \C = Metamodel::ClassHOW.new_type(); C.^add_method(my method t { "c".say }); C.^add_role(T); C.^compose; C.new.t

[04:03] <camelia> rakudo-moar 8c995febd: OUTPUT: «Too few positionals passed; expected 4 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[04:03] <timotimo> m: role T { method t { "t".say; } }; my \C = Metamodel::ClassHOW.new_type("C"); C.^add_method("t", my method t { "c".say }); C.^add_role(T); C.^compose; C.new.t

[04:03] <camelia> rakudo-moar 8c995febd: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[04:03] <timotimo> m: role T { method t { "t".say; } }; my \C = Metamodel::ClassHOW.new_type(); C.^add_method("t", my method t { "c".say }); C.^add_role(T); C.^compose; C.new.t

[04:03] <camelia> rakudo-moar 8c995febd: OUTPUT: «c␤»

[04:04] <jdv79> timotimo: sup.  did you go to gpw or spw or whatever just happened?

[04:04] <timotimo> m: role T { method t { "t".say; } }; my \C = Metamodel::ClassHOW.new_type(); C.^add_method("t", my method t { "c".say }); C.^add_role(T); C.^compose; C.new.t; C.^methods.say

[04:04] <camelia> rakudo-moar 8c995febd: OUTPUT: «c␤(t)␤»

[04:04] <timotimo> no, i didn't attend

[04:04] <timotimo> i got sick on my own accord, lol

[04:04] <jdv79> corona?

[04:05] <timotimo> nah, regular flu, or maybe even just a cold

[04:06] <jdv79> super

[04:07] *** molaf left
[04:08] <timotimo> how's you, apart from the crashing you wrote about a couple hours back?

[04:11] *** aborazmeh left
[04:19] *** vike left
[04:25] *** vike joined
[04:30] *** camelCaser left
[04:32] *** camelCaser joined
[04:51] *** Altai-man_ joined
[04:54] *** sena_kun left
[05:16] *** wamba joined
[05:20] *** Doc_Holliwood joined
[06:13] *** ufobat left
[06:26] *** sno left
[06:52] *** sena_kun joined
[06:53] *** Altai-man_ left
[07:01] *** sno joined
[07:05] *** wamba left
[07:11] *** camelCaser left
[07:17] *** camelCaser joined
[07:28] *** aluaces left
[07:29] *** rindolf joined
[07:29] *** Doc_Holliwood left
[07:33] *** agentzh left
[07:35] *** agentzh joined
[07:35] *** agentzh left
[07:35] *** agentzh joined
[07:41] *** finanalyst_mobil joined
[07:45] *** finanalyst left
[07:51] *** camelCaser left
[07:52] *** camelCaser joined
[08:03] *** finanalyst_mobil left
[08:05] *** Kaiepi left
[08:06] *** Kaiepi joined
[08:07] *** Kaiepi left
[08:10] *** Kaiepi joined
[08:19] *** aluaces joined
[08:36] *** abraxxa joined
[08:41] *** Kaiepi left
[08:42] *** Kaiepi joined
[08:45] *** Kaiepi left
[08:48] *** abraxxa left
[08:50] *** Kaiepi joined
[08:51] *** abraxxa joined
[08:51] *** Altai-man_ joined
[08:52] *** ensamvarg left
[08:54] *** sena_kun left
[09:38] *** wamba joined
[09:46] *** pecastro joined
[09:54] <abraxxa> what's the preferred way to handle the warning 'Use of uninitialized value element of type Any in string context.' when you know that it's ok for a var to be undefined?

[09:57] *** kktt007 joined
[09:59] *** wamba left
[10:01] <jnthn> abraxxa: If it's just one element I tend to just `// ''` it; if it's an expression where there could be various I use `quietly`

[10:03] *** wamba joined
[10:06] *** finanalyst joined
[10:07] *** finanalyst left
[10:08] *** finanalyst joined
[10:37] <abraxxa> jnthn: thanks

[10:37] <abraxxa> didn't know quietly and the warning message doesn't show up in the docs, all should be added

[10:42] <jnthn> Please make docs issues if you have a moment to do so

[10:50] *** markoong joined
[10:52] *** sena_kun joined
[10:53] *** ensamvarg joined
[10:54] *** Altai-man_ left
[10:59] *** finanalyst_mobil joined
[11:02] *** molaf joined
[11:02] *** molaf left
[11:03] *** finanalyst left
[11:12] *** finanalyst_mobil left
[11:14] *** finanalyst joined
[11:14] *** lichtkind joined
[11:22] *** samebchase-2 is now known as samebchase-

[11:29] *** mowcat joined
[11:46] *** wamba left
[11:47] *** skyheights joined
[11:48] *** skyheights left
[11:51] *** wamba joined
[11:56] <Altreus> m: use JSON::Fast; my @arr = 1,2,3; (to-json @arr).say

[11:56] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find JSON::Fast in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/cameli…»

[11:56] <Altreus> m: use JSON::FastTiny; my @arr = 1,2,3; (to-json @arr).say

[11:56] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find JSON::FastTiny in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/ca…»

[11:56] <Altreus> oops

[11:56] <Altreus> m: use JSON::Tiny; my @arr = 1,2,3; (to-json @arr).say

[11:56] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find JSON::Tiny in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/cameli…»

[11:56] <Altreus> ok

[11:57] *** aborazmeh joined
[11:57] *** aborazmeh left
[11:57] *** aborazmeh joined
[11:58] *** mowcat left
[11:58] <Altreus> The asymmetry of a json round-trip is displeasing to me: https://gist.github.com/Altreus/6aa5a48ea3e42cad0225dda6469bee87

[11:58] *** chloekek joined
[11:59] <Altreus> But my question really is, how do I get this round-trip to actually be round?

[11:59] *** leont joined
[12:07] <lizmat> Altreus: the result of from-json is an item, even if it is an array

[12:07] <lizmat> if you know for sure that you'll get a top level array back from your JSON, you could bind

[12:08] <lizmat> my @arr2 := from-json $json;

[12:08] <lizmat> this would also be more performant  :-)

[12:09] *** markong joined
[12:09] <lizmat> m: my $a = [1,2,3]; my @b = $a; dd @b  # what happens

[12:09] <camelia> rakudo-moar 8c995febd: OUTPUT: «Array @b = [[1, 2, 3],]␤»

[12:09] <lizmat> m: my $a = [1,2,3]; my @b := $a; dd @b  # fix

[12:09] <camelia> rakudo-moar 8c995febd: OUTPUT: «Array element = [1, 2, 3]␤»

[12:13] *** markoong left
[12:24] *** pochi_ left
[12:32] <tbrowder> hi, all

[12:33] *** margeas joined
[12:34] *** markong left
[12:34] <tbrowder> i've been looking at numerics and discovering cool things using allomorphs. in the process i wonder if there is any interest in adding a number function to split a fractional number into its integer and fractions parts.

[12:35] <tbrowder> in some languages that funcion is called "modf" although i think another name would be better. we already have "truncate" for the integral.

[12:36] <tbrowder> use "frac*" for the fraction part (where

[12:37] <tbrowder> m: my $a=2.3; my $b = <<$a >>:

[12:37] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my $a=2.3; my $b = <<$a >>:7⏏5<EOL>␤    expecting any of:␤        colon pair␤»

[12:38] <tbrowder> m: my $a = 2.3;my $b=<<$a>>;say $b.split('.');

[12:38] <camelia> rakudo-moar 8c995febd: OUTPUT: «(2 3)␤»

[12:40] <chloekek> m: my $a = 2.3e100;my $b=<<$a>>;say $b.split('.');

[12:40] <camelia> rakudo-moar 8c995febd: OUTPUT: «(2 3e+100)␤»

[12:40] <tbrowder> my $a=2.3;my $b=<<$a>>;my $c=<<$b>>;say $c.split('.');

[12:41] <evalable6> tbrowder, rakudo-moar 358325401: OUTPUT: «(2 3)␤»

[12:42] <tbrowder> chloekek: o/

[12:42] <chloekek> p6: my $a = 2.3; say $a.Int, ($a - $a.Int)

[12:42] <camelia> rakudo-moar 8c995febd: OUTPUT: «20.3␤»

[12:42] <tbrowder> strange!

[12:42] <chloekek> Too difficult.

[12:43] <chloekek> p6: my $a = 2.3; say $a.Int; say ($a - $a.Int)

[12:43] <camelia> rakudo-moar 8c995febd: OUTPUT: «2␤0.3␤»

[12:43] *** pochi joined
[12:43] <chloekek> p6: my $a = -2.3; say $a.Int; say ($a - $a.Int)

[12:43] <camelia> rakudo-moar 8c995febd: OUTPUT: «-2␤-0.3␤»

[12:43] <chloekek> p6: my $a = -2.3; say $a.Int; say ($a - $a.Int).abs

[12:43] <camelia> rakudo-moar 8c995febd: OUTPUT: «-2␤0.3␤»

[12:43] <chloekek> p6: my $a = -2.3e100; say $a.Int; say ($a - $a.Int).abs

[12:43] <camelia> rakudo-moar 8c995febd: OUTPUT: «-22999999999999999005898270966467765433606524920610912546812266046322364299723189622637981323824726016␤0␤»

[12:47] <tbrowder> actually i would like to get the fractional part without the radic point so it would be an integer, hence the use of the allomorph to split on the period

[12:47] <tbrowder> *radix

[12:49] <tbrowder> m: <2.3>.split('.').unshift;

[12:49] <camelia> rakudo-moar 8c995febd: OUTPUT: «Cannot resolve caller unshift(Seq:D: ); none of these signatures match:␤    (Any:U \SELF: |values)␤  in block <unit> at <tmp> line 1␤␤»

[12:50] <tbrowder> pop?

[12:50] <tbrowder> m: <2.3>.split('.').pop

[12:50] <camelia> rakudo-moar 8c995febd: OUTPUT: «No such method 'pop' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[12:51] *** Altai-man_ joined
[12:52] <tbrowder> m: <2.3>.split('.')

[12:52] <camelia> rakudo-moar 8c995febd: ( no output )

[12:53] <tbrowder> m: <2.3>.split('.');

[12:53] <camelia> rakudo-moar 8c995febd: ( no output )

[12:53] <tbrowder> m: say <2.3>.split('.')

[12:53] <camelia> rakudo-moar 8c995febd: OUTPUT: «(2 3)␤»

[12:53] *** sena_kun left
[12:54] <chloekek> What if the number is a rational with an infinite number of decimal digits?

[12:54] <lizmat> 1/3 comes to mind  :-)

[12:55] <tbrowder> not sure, but i think the numerics page shows how to deal with that

[12:56] <tbrowder> m: say <1/3 >.split('.')

[12:56] <camelia> rakudo-moar 8c995febd: OUTPUT: «(1/3)␤»

[12:57] *** wamba left
[12:57] <tbrowder> m: say <4/3 >.split('.')

[12:57] <camelia> rakudo-moar 8c995febd: OUTPUT: «(4/3)␤»

[12:58] <tbrowder> m: say <4/3>.split('.')

[12:58] <camelia> rakudo-moar 8c995febd: OUTPUT: «(1 333333)␤»

[12:58] <tbrowder> \o/

[13:01] *** wamba joined
[13:03] <tbrowder> m: sub frac($n) {my $a=<<$n>>.split('.'); $a[1]}; say frac(1,4);

[13:03] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5===␤Cannot use variable $a in declaration to initialize itself␤at <tmp>:1␤------> 3sub frac($n) {my $a=<<$n>>.split('.'); $7⏏5a[1]}; say frac(1,4);␤    expecting any of:␤        term␤Other potential difficulties:␤   …»

[13:03] <tbrowder> stupid keyboard...

[13:04] <Altreus> lizmat: Alas! In fact I want to pass it to a constructor (I updated the gist) https://gist.github.com/Altreus/6aa5a48ea3e42cad0225dda6469bee87

[13:04] <Altreus> Can I do something to $item<arr> to make it behave?

[13:05] *** kktt007 left
[13:06] <lizmat> has $.arr ?

[13:07] <lizmat> m: class A { has $.a }; my $a = A.new( a => [1,2,3] ); dd $a.a

[13:07] <camelia> rakudo-moar 8c995febd: OUTPUT: «Array element = [1, 2, 3]␤»

[13:07] <Altreus> I feel like it's more correct to have the correct object structure and make the passed-in data work right

[13:07] <lizmat> m: class A { has @.a }; my $a = A.new( a => [1,2,3] ); dd $a.a

[13:07] <camelia> rakudo-moar 8c995febd: OUTPUT: «Array @!a = [1, 2, 3]␤»

[13:07] <Altreus> Than to amend the object structure just because the current source of data happens to be JSON

[13:07] <lizmat> m: class A { has @.a }; my $a = A.new( a => $[1,2,3] ); dd $a.a

[13:07] <camelia> rakudo-moar 8c995febd: OUTPUT: «Array @!a = [[1, 2, 3],]␤»

[13:07] <Altreus> oh is it just too many containers?

[13:08] <Altreus> no

[13:08] <Altreus> :)

[13:08] <lizmat> m: my @a = $[1,2,3]; dd @a

[13:08] <camelia> rakudo-moar 8c995febd: OUTPUT: «Array @a = [[1, 2, 3],]␤»

[13:08] <lizmat> that's the issue...  JSON returns everything as an item

[13:08] <tbrowder> m: sub frac($n) {my $a=<<$n>>.split('.'); $a[1]}; say frac(2.3);

[13:08] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5===␤Cannot use variable $a in declaration to initialize itself␤at <tmp>:1␤------> 3sub frac($n) {my $a=<<$n>>.split('.'); $7⏏5a[1]}; say frac(2.3);␤    expecting any of:␤        term␤Other potential difficulties:␤   …»

[13:09] <tbrowder> m: sub frac($n) {my $a=<<$n>>; my @b = $a.split('.'); $b[1]}; say frac(2.3);

[13:09] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared. Did you mean '@b'?␤at <tmp>:1␤------> 3) {my $a=<<$n>>; my @b = $a.split('.'); 7⏏5$b[1]}; say frac(2.3);␤»

[13:09] <Altreus> I cannot figure out how to replace it with not-an-item. This is at the edges of my raku knowledge :)

[13:09] <tbrowder> m: sub frac($n) {my $a=<<$n>>; my @b = $a.split('.'); @b[1]}; say frac(2.3);

[13:09] <camelia> rakudo-moar 8c995febd: OUTPUT: «3␤»

[13:10] <tbrowder> \o/

[13:11] <tbrowder> that's the routine i would like to see added to Raku (improved of course)

[13:11] *** lucasb joined
[13:11] <Altreus> in fact I can't figure out how to *create* a hash I can use as a constructor

[13:11] <Altreus> even if I don't use JSON

[13:12] <lizmat> you can easily

[13:14] <lizmat> m: class A { has @.a; method TWEAK() { @!a := @!a[0] } }; my %h = a => [1,2,3]; dd A.new(|%h)

[13:14] <camelia> rakudo-moar 8c995febd: OUTPUT: «A.new(a => [1, 2, 3])␤»

[13:14] *** Doc_Holliwood joined
[13:15] <Altreus> Which will break if someone does A.new(a => [1,2,3]) :/

[13:15] <Altreus> Whereas presumably with $.arr it will always work as expected...

[13:15] <lizmat> m: class A { has @.a; method BUILD(:@!a) { } }; my %h = a => [1,2,3]; dd A.new(|%h)

[13:15] <camelia> rakudo-moar 8c995febd: OUTPUT: «A.new(a => [1, 2, 3])␤»

[13:16] <lizmat> this will bind

[13:16] <xinming> timotimo: So, We can't apply role to already composed class. Is there other way to create a class is open? Something like   class C is open { ... };  and user needs to do C.^compose before init the object.

[13:16] <Altreus> Does it require me to list every property or will the rest be handled by default behaviour?

[13:17] <lizmat> m: class A { has @.a; method TWEAK(:@!a) { } }; my %h = a => [1,2,3]; dd A.new(|%h)

[13:17] <camelia> rakudo-moar 8c995febd: OUTPUT: «A.new(a => [1, 2, 3])␤»

[13:17] <lizmat> better to use TWEAK, it will take care of all of the other attributes for you

[13:17] <Altreus> splendid! :D

[13:17] <Altreus> I will try it!

[13:28] <Altreus> I am a fool and have been using IDs where I should be using objects

[13:39] *** ZzZombo joined
[13:42] *** xelxebar left
[13:45] *** xelxebar joined
[14:07] *** regreg joined
[14:15] *** aborazmeh left
[14:24] *** rindolf left
[14:36] *** lichtkind left
[14:41] *** Actualeyes joined
[14:42] *** wamba left
[14:51] <kawaii> Hi! I have a subroutine containing a react whenever loop, is there an easy way (using Promises or not) to make that loop last for a set period of time?

[14:52] *** sena_kun joined
[14:52] <jnthn> `whenever Promise.in($the-amount-of-time) { done }` ?

[14:52] <jnthn> If you want something inside of the react, anyway

[14:53] <jnthn> Well, and it's a react so that's all you could want, I guess :)

[14:54] *** Altai-man_ left
[14:54] <kawaii> doesn't `.in()` define the amount of time to wait before starting the promise (and in this case, the loop), not define how long it lasts for jnthn? 

[14:55] <Altreus> How long before *keeping* the promise

[14:56] *** finanalyst left
[14:56] <jnthn> kawaii: Promise.in returns a Promise that will be kept after that amount of time; the whenever block runs when the Promise is kept.

[14:56] *** wamba joined
[14:56] *** finanalyst joined
[14:56] <jnthn> And thus the `done` (which terminates the `react`) will run after that amount of time, which I think is what you want.

[14:57] <lizmat> kawaii: if you want to have the promise kept at a certain time, you can use Promise.at()

[15:00] *** rindolf joined
[15:13] *** reach_satori left
[15:13] *** reach_satori joined
[15:20] *** domidumont joined
[15:28] <kawaii> jnthn: can I substitute that `done` with a `return`?

[15:29] <kawaii> if I need to pass a value back to whatever called this routine 

[15:30] <jnthn> No

[15:30] <jnthn> You'll need to assign it to some variable and then return that

[15:31] <jnthn> (Reason: the `whenever` could be running on any thread, and `return` looks for the handler lexically to decide which thing to return from, but then needs it to be in dynamic scope also, which it won't be.)

[15:31] <Altreus> complex reason he didn't understand

[15:31] <Altreus> I'm not 100% sure I did

[15:32] <jnthn> It *may* be possible to do a bunch of magic to make it work, but it's certainly not trivial. :)

[15:32] <jnthn> So for now the answer is that no, you can't do that

[15:32] <jnthn> (Folks ask often enough that I sometimes think we should make it Just Work.)

[15:33] <chloekek> Allow an argument to done and return that from the react statement.

[15:33] <Altreus> if we have the «start react» paradigm going on here, can we cause the 60-second timeout to break that promise instead of keeping it? Is that just a die?

[15:34] <jnthn> Yes

[15:52] <Altreus> right thank :)

[15:58] *** wamba left
[16:05] *** wamba joined
[16:06] <rypervenche> So I thought about rewriting one of my scripts that uses Text::CSV to convert an array of hashes into a CSV file, which works very easily. Does anyone know how to create a CSV from an array of objects? I haven't been able to figure it out from the documentation.

[16:10] <Doc_Holliwood> m: (1,2,3,0,4,5,6,7,8).reduce( -> $a, $b { $a.print; $a + 1 == $b ?? $b !! 0 }).first( * == 0 )

[16:10] <camelia> rakudo-moar 8c995febd: OUTPUT: «12300000»

[16:10] <Doc_Holliwood> not lazy

[16:11] <Doc_Holliwood> can i have a lazy reduce?

[16:11] <Doc_Holliwood> m: (1,2,3,0,4,5,6,7,8).reduce( -> $a, $b { $a.print; $a + 1 == $b ?? $b !! last }).first( * == 0 )

[16:11] <camelia> rakudo-moar 8c995febd: OUTPUT: «123»

[16:11] <Doc_Holliwood> oooh

[16:11] <chloekek> m: (1,2,3,0,4,5,6,7,8).reduce( -> $a, $b { $a.print; $a + 1 == $b ?? $b !! last })

[16:11] <camelia> rakudo-moar 8c995febd: OUTPUT: «123»

[16:12] <Doc_Holliwood> ok

[16:15] *** wamba left
[16:15] *** wamba joined
[16:16] <Geth> ¦ doc: sztanyi++ created pull request #3256: correct output in comment

[16:16] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3256

[16:17] <Doc_Holliwood> what's the opposite of ===?

[16:18] <chloekek> p6: say 1 !=== 1

[16:18] <camelia> rakudo-moar 8c995febd: OUTPUT: «False␤»

[16:19] <leont> You can prepend a ! before any operator returning a Bool to negate it :-)

[16:19] <chloekek> You can put ! in front of most infix operator, e.g. ne is the same as !eq.

[16:20] <Doc_Holliwood> yeah, that much i know ;)

[16:20] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return }) === Nil ) }; say consecutive(1,2,3);

[16:20] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling consecutive(Int, Int, Int) will never work with declared signature (@n)␤at <tmp>:1␤------> 3^b ?? $^b !! return }) === Nil ) }; say 7⏏5consecutive(1,2,3);␤»

[16:20] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return }) === Nil ) }; say consecutive( (1,2,3) );

[16:20] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤»

[16:20] <chloekek> p6: .say for (0, 1) X!&& (0, 1)

[16:20] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return }) === Nil ) }; say consecutive( (1,2,3,5) );

[16:20] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤True␤True␤False␤»

[16:20] <camelia> rakudo-moar 8c995febd: OUTPUT: «Nil␤»

[16:21] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return }) === Nil ) }; say consecutive( (1,2,3,4) );

[16:21] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤»

[16:21] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return }) === Nil ) }; say consecutive( (1,2,0,3,4) );

[16:21] <camelia> rakudo-moar 8c995febd: OUTPUT: «Nil␤»

[16:21] <Doc_Holliwood> huh? why not False?

[16:22] <chloekek> return returns from the sub.

[16:23] <Doc_Holliwood> True, but why isn't it Any then?

[16:23] <chloekek> p6: sub f { return }; say f

[16:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «Nil␤»

[16:23] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return }); True ) }; say consecutive( (1,2,0,3,4) );

[16:23] <camelia> rakudo-moar 8c995febd: OUTPUT: «Nil␤»

[16:24] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! return 999 }); True ) }; say consecutive( (1,2,0,3,4) );

[16:24] <camelia> rakudo-moar 8c995febd: OUTPUT: «999␤»

[16:26] <Doc_Holliwood> m: my sub consecutive( @n ) { !( @n.reduce({ $^a + 1 == $^b ?? $^b !! last }) ?? True !! False ) }; say consecutive( (1,2,0,3,4) );

[16:26] <camelia> rakudo-moar 8c995febd: OUTPUT: «False␤»

[16:26] <Doc_Holliwood> m: my sub consecutive( @n ) { @n.reduce({ $^a + 1 == $^b ?? $^b !! last } ?? True !! False ) }; say consecutive( (1,2,0,3,4) );

[16:26] <camelia> rakudo-moar 8c995febd: OUTPUT: «Cannot resolve caller reduce(List:D: Bool:D); none of these signatures match:␤    (Any:U: &, *%_ --> Nil)␤    (Any:D: &with, *%_)␤  in sub consecutive at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:27] *** chloekek left
[16:27] <Doc_Holliwood> m: my sub consecutive( @n ) { @n.reduce({ $^a + 1 == $^b ?? $^b !! last }) ?? True !! False }; say consecutive( (1,2,0,3,4) );

[16:27] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤»

[16:28] <Geth> ¦ doc: uzluisf++ created pull request #3257: Add small section about delegation

[16:28] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3257

[16:29] *** molaf joined
[16:30] *** cpan-raku left
[16:30] *** cpan-raku joined
[16:30] *** cpan-raku left
[16:30] *** cpan-raku joined
[16:30] <sena_kun> bisectable6, my %intervals{Instant}; my $first-instant = now; %intervals{ $first-instant } = 1; sleep 1; my $second-instant = now; %intervals{ $second-instant } = 2; say ($first-instant, $second-instant) ~~ %intervals.keys.sort;

[16:30] <bisectable6> sena_kun, On both starting points (old=2015.12 new=3583254) the exit code is 0 and the output is identical as well

[16:30] <bisectable6> sena_kun, Output on both points: «True␤»

[16:31] <Geth> ¦ doc: 321f1fd6bc | sztanyi++ (committed using GitHub Web editor) | doc/Language/hashmap.pod6

[16:31] <Geth> ¦ doc: Update hashmap.pod6

[16:31] <Geth> ¦ doc: 

[16:31] <Geth> ¦ doc: say ($first-instant, $second-instant) ~~ %intervals.keys.sort;  # OUTPUT: «False␤»

[16:31] <Geth> ¦ doc: output should be True

[16:31] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/321f1fd6bc

[16:31] <Geth> ¦ doc: 2c24bc9663 | Altai-man++ (committed using GitHub Web editor) | doc/Language/hashmap.pod6

[16:31] <Geth> ¦ doc: Merge pull request #3256 from sztanyi/patch-1

[16:31] <linkable6> Link: https://docs.raku.org/language/hashmap

[16:31] <Geth> ¦ doc: 

[16:31] <Geth> ¦ doc: correct output in comment

[16:31] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2c24bc9663

[16:44] *** mowcat joined
[16:51] *** renormalist left
[16:51] *** renormalist joined
[16:51] *** Altai-man_ joined
[16:51] *** abraxxa left
[16:52] *** abraxxa joined
[16:52] *** sno left
[16:54] *** sena_kun left
[17:12] *** aborazmeh joined
[17:12] *** aborazmeh left
[17:12] *** aborazmeh joined
[17:27] *** patrickb joined
[17:50] *** wamba left
[17:51] *** finsternis left
[17:51] *** daxim left
[17:54] *** finsternis joined
[17:57] *** daxim joined
[17:59] *** japhb left
[18:08] *** aborazmeh left
[18:10] *** pecastro left
[18:14] *** wamba joined
[18:21] *** sauvin left
[18:35] *** sno joined
[18:43] *** sno left
[18:44] *** sno joined
[18:52] *** sena_kun joined
[18:52] *** sno left
[18:53] *** Altai-man_ left
[18:56] *** abraxxa left
[18:57] *** abraxxa joined
[18:58] *** japhb joined
[19:07] *** benlittle left
[19:07] <Geth> ¦ doc: db7481c0e8 | (Luis F. Uceta)++ | doc/Language/objects.pod6

[19:07] <Geth> ¦ doc: Add small section about delegation

[19:07] <Geth> ¦ doc: 

[19:07] <Geth> ¦ doc: refs: https://github.com/Raku/doc/issues/3255

[19:07] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/db7481c0e8

[19:07] <Geth> ¦ doc: f8da8ad549 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[19:07] <Geth> ¦ doc: Merge pull request #3257 from uzluisf/master

[19:07] <Geth> ¦ doc: 

[19:07] <linkable6> Link: https://docs.raku.org/language/objects

[19:07] <Geth> ¦ doc: Add small section about delegation

[19:07] <Geth> ¦ doc: Closes #3255

[19:07] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f8da8ad549

[19:07] <linkable6> DOC#3255 [closed]: https://github.com/Raku/doc/issues/3255 Small section about the handles trait

[19:48] *** aborazmeh joined
[19:48] *** aborazmeh left
[19:48] *** aborazmeh joined
[19:49] *** pecastro joined
[19:55] *** chloekek joined
[19:58] *** lichtkind joined
[19:58] *** wildtrees joined
[20:04] <rypervenche> I'm trying to figure out how to add "race" to one of my programs. I believe at the ".join" it goes back to a single file and is no longer multi-threaded. How can I get it do to the grep on each line of each file and then at the very end join them all together? https://gist.github.com/rypervenche/adc461ea3454b48be635d9a7e39e5818

[20:05] <chloekek> .oO(@xs».foo is a guillemap)

[20:06] <rypervenche> I was using that before instead of race, but I'm still having trouble how to keep everything multi-threaded from the middle on.

[20:08] *** wamba left
[20:08] *** wamba joined
[20:13] *** Kaiepi left
[20:14] *** Kaiepi joined
[20:18] *** wamba left
[20:21] *** domidumont left
[20:25] <jnthn> rypervenche: Instead of .join.lines, maybe .map(*.lines).flat ?

[20:26] <jnthn> Though I ain't sure if .flat is understood well by the parallelizer

[20:26] <rypervenche> Ahhh, flat.

[20:33] *** aborazmeh left
[20:36] *** MasterDuke joined
[20:39] *** stoned75 joined
[20:40] <rypervenche> jnthn: Looks to be about the same speed-wise (88sec on mine, 91sec on yours) and all running on one thread.

[20:43] *** xelxebar left
[20:43] *** aborazmeh joined
[20:43] *** aborazmeh left
[20:43] *** aborazmeh joined
[20:45] <Doc_Holliwood> oh hi jnthn

[20:45] <jnthn> rypervenche: How many files do you have?

[20:45] <jnthn> If < 64, set the degree also (.race(:1dgree) or some such)

[20:45] <jnthn> oops

[20:45] <jnthn> not degree, batch

[20:45] <jnthn> .race(:1batch)

[20:45] <jnthn> o/ Doc_Holliwood 

[20:46] <rypervenche> 37 files. I'll try adding :1batch as well

[20:46] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/03/09/2020-10-the-videos/

[20:46] * jnthn isn't thinking entirely clearly today, thanks either to the thraot infection or the things he's taking for the throat infection...

[20:46] *** xelxebar joined
[20:47] <Doc_Holliwood> somebody in the mood helping me golfing this down? : https://pastebin.com/Wyrvfxz3

[20:47] <lizmat> probably the latter... they're known to affect your driving capability

[20:49] <rypervenche> jnthn: Ahh, I hope you get better soon. I'll not bother you any further. Hopefully this is enough to get me on the right track. :)

[20:50] *** ensamvarg left
[20:51] <rypervenche> Ahh, there we go. I also needed a .race before my grep. That took it down to 48.9 seconds.

[20:51] *** Altai-man_ joined
[20:52] <El_Che> jnthn: I heard in lizmat+nine's Q&A that you could do your talk. I hope you're btter now.

[20:52] <El_Che> better

[20:53] <jnthn> El_Che: Thanks; seem to be doing the "it'll get worse before it gets better" bit at the moment.

[20:53] <El_Che> (and Nicholas Clark and Moritz?)

[20:53] *** sno joined
[20:54] *** sena_kun left
[20:54] <El_Che> jnthn: that's sucks, but luckily it will pass. /me in your mothers voice: "take care of yourself. Make sure to rest enough!"

[20:55] <Doc_Holliwood> lizmat: who was that charming short british guy who looks like young Montgomery Scott?

[20:55] <Doc_Holliwood> the one who talked about the performance work

[20:55] <El_Che> Nicholas Clark

[20:56] <Doc_Holliwood> I am completely ignorant of that name

[20:56] <El_Che> A p5p person

[20:56] <Grinnz> at this point, p5p could stand for "perl 5 people" :P

[20:57] <lizmat> El_Che: I think nwc10 has grown beyond that

[20:57] <El_Che> hehe

[20:57] <El_Che> lizmat: certainly if he's doing the qa with you :)

[20:57] <El_Che> I meant, Doc_Holliwood may know them from his perl5 work

[20:58] <El_Che> s/them/him/

[20:58] <lizmat> ah, true... Nick has been a pumpkin, so yes...

[20:58] <Doc_Holliwood> must have been in my C# period

[20:58] * Doc_Holliwood ducks

[20:59] <lizmat> .oO( you can always C# in hindsight )

[20:59] <Doc_Holliwood> lol

[21:08] <Doc_Holliwood> m: sub is-consecutive( @n ) { not @n.rotor(2 => -1).first( -> ($a, $b) { $a + 1 != $b }) }; say is-consecutive( (1,2,3) ); say is-consecutive( (1,0,3) );

[21:08] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤False␤»

[21:09] <Doc_Holliwood> this works but i feel like i am doing way too much work

[21:12] <jnthn> m: sub is-consecutive { all @a Z== @a.skip(1) }; say is-consecutive( (1,2,3) ); say is-consecutive( (1,0,3) );

[21:12] <camelia> rakudo-moar 8c995febd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3sub is-consecutive { all 7⏏5@a Z== @a.skip(1) }; say is-consecutive(␤»

[21:12] <jnthn> m: sub is-consecutive(@a) { all @a Z== @a.skip(1) }; say is-consecutive( (1,2,3) ); say is-consecutive( (1,0,3) );

[21:12] <camelia> rakudo-moar 8c995febd: OUTPUT: «all(False, False)␤all(False, False)␤»

[21:13] <jnthn> oh, duh :)

[21:13] <jnthn> m: sub is-consecutive(@a) { all @a.skip(1) Z== @a }; say is-consecutive( (1,2,3) ); say is-consecutive( (1,0,3) );

[21:13] <camelia> rakudo-moar 8c995febd: OUTPUT: «all(False, False)␤all(False, False)␤»

[21:14] <jnthn> Ah, and even if I got it right it'd be unreliable I guess.

[21:16] <jnthn> m: sub is-consecutive(*@a) { so all @a.map(* + 1) Z== @a.skip(1) }; say is-consecutive 1,2,3; say is-consecutive 1,3,4 # works, but I still wonder if there's an easier way...

[21:16] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤False␤»

[21:16] *** Black_Ribbon joined
[21:19] <Doc_Holliwood> m: sub infix:<++>($a, $b) { $a + 1 == $b ?? $b !! Inf }; sub is-consecutive( @n ) { ([++] @n) < Inf }; say is-consecutive( (1,2,3) ); say is-consecutive( (1,0,3) );

[21:19] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤False␤»

[21:20] *** foo222 joined
[21:24] <Doc_Holliwood> sub infix:<++>($a, $b) { $a + 1 == $b ?? ($b but True) !! (0 but False) }; sub is-consecutive( @n ) { so [++] @n }; say is-consecutive( (1,2,3) ); say is-consecutive( (-3,-2,-1) ); say is-consecutive( (-3,-2,-1, 0) ); say is-consecutive( (1,0,3) );

[21:24] <evalable6> Doc_Holliwood, rakudo-moar e49a85ec6: OUTPUT: «True␤True␤True␤False␤»

[21:26] <Doc_Holliwood> m: sub infix:<++>($a, $b) { $b but ($a + 1 == $b) }; sub is-consecutive( @n ) { so [++] @n }; 

[21:26] <camelia> rakudo-moar 8c995febd: ( no output )

[21:26] <Doc_Holliwood> there we go

[21:27] <Doc_Holliwood> doesn't short circuit but meh

[21:28] <jnthn> lizmat++ # weekly

[21:28] *** foo222 left
[21:28] <jnthn> Though I'll maybe not follow the leg-breaking advice :P

[21:29] <lizmat> https://en.wikipedia.org/wiki/Break_a_leg

[21:30] *** toddr joined
[21:30] <toddr> hey, what do Raku files uploaded to pause look like?

[21:30] <Doc_Holliwood> mixins are really slow

[21:30] <Doc_Holliwood> jeez

[21:31] <toddr> or: how can I tell if a file uploaded to PAUSE is perl or Raku?

[21:31] <lizmat> toddr: they live in a /Perl6 subdirectory

[21:31] <toddr> <3 thanks!

[21:33] <rypervenche> When you go to purchase a ticket for the Perl and Raku Conf, it says "Access to all events Monday through Wednesday". Shouldn't that say "Wednesday through Friday"?

[21:34] <toddr> it should. will fix.

[21:34] <rypervenche> Thanks ;)

[21:36] <toddr> rypervenche refresh pls.

[21:41] *** thundergnat joined
[21:41] <thundergnat> m: sub is-consecutive (*@a) { my $a = @a[0]; ^@a .map({return False if @a[$_] != $a++}); True }; say .&is-consecutive for (1,2,3), (1,2,4), (2,1,3);

[21:42] <camelia> rakudo-moar 8c995febd: OUTPUT: «True␤False␤False␤»

[21:42] <thundergnat> Doc_Holliwood: ^^^ short circuiting

[21:43] <rypervenche> toddr: Looks good.

[21:43] <toddr> thanks for the bug report.

[21:46] *** wamba joined
[21:47] <Doc_Holliwood> m: sub is-consecutive( @n ) { not (^@n.end).skip.first( -> $i { @n[ $i ] != @n[ $i - 1 ] + 1 }) }; 

[21:47] <camelia> rakudo-moar 8c995febd: ( no output )

[21:47] <Doc_Holliwood> i guess, I'll settle on this

[21:53] *** camelCaser left
[21:53] *** camelCaser joined
[22:04] *** aborazmeh left
[22:05] *** wildtrees left
[22:07] *** wildtrees joined
[22:19] *** stoned75 left
[22:29] <Geth> ¦ problem-solving/master: 4 commits pushed by (JJ Merelo)++, (Aleks-Daniel Jakimenko-Aleksejev)++

[22:29] <Geth> ¦ problem-solving/master: 4982b8254f | Adds proposal for solving #155

[22:29] <Geth> ¦ problem-solving/master: b4f1b6867a | Add interim hierarchical order for routine pages

[22:29] <Geth> ¦ problem-solving/master: a0ed4da650 |  might → will

[22:29] <Geth> ¦ problem-solving/master: 08df8b265b | Merge pull request #156 from Raku/front-matter-for-routines

[22:29] <Geth> ¦ problem-solving/master: review: https://github.com/Raku/problem-solving/compare/48d036cb428e...08df8b265b23

[22:32] <Geth> ¦ problem-solving: 7fd1fa4f44 | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[22:32] <Geth> ¦ problem-solving: Rakufy the README file

[22:32] <Geth> ¦ problem-solving: 

[22:32] <Geth> ¦ problem-solving: @tbrowder++, resolves #165.

[22:32] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/7fd1fa4f44

[22:33] *** wildtrees left
[22:34] *** wildtrees joined
[22:37] *** chloekek left
[22:52] *** sena_kun joined
[22:54] *** Altai-man_ left
[23:13] *** toddr left
[23:25] *** wamba left
[23:32] *** patrickb left
[23:39] *** pecastro left
[23:44] *** rindolf left
[23:56] *** __jrjsmrtn__ joined
[23:56] *** _jrjsmrtn left
