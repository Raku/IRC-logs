[00:35] *** stoned75 left
[00:37] *** leont left
[00:42] *** stoned75 joined
[00:49] <[Coke]> moritz++

[01:09] *** sjaveed joined
[01:10] *** molaf left
[01:13] *** sjaveed left
[01:14] *** aindilis left
[01:22] *** aindilis joined
[01:23] *** molaf joined
[01:40] <Geth> ¦ doc: 01db0bee46 | Coke++ | xt/pws/words.pws

[01:40] <Geth> ¦ doc: new word

[01:40] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/01db0bee46

[01:43] *** ezzieyguywuf left
[01:54] *** kst left
[02:06] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:12] *** parabolize joined
[02:25] *** camelCaser left
[02:25] *** camelCaser joined
[02:38] *** cpan-raku left
[02:39] *** sjaveed joined
[02:42] *** cpan-raku joined
[02:42] *** cpan-raku left
[02:42] *** cpan-raku joined
[02:44] *** ensamvarg3 joined
[03:00] *** aborazmeh joined
[03:00] *** aborazmeh left
[03:00] *** aborazmeh joined
[03:03] *** ensamvarg left
[03:32] *** jc1 joined
[03:33] *** jc1 left
[03:36] *** aborazmeh left
[03:39] *** ensamvarg joined
[03:39] *** Archenoth joined
[03:44] *** molaf left
[04:14] *** sjaveed left
[04:15] *** sjaveed joined
[04:20] *** sjaveed left
[04:39] *** stoned75 left
[04:42] *** sjaveed joined
[04:44] *** hungrydonkey left
[04:44] *** hungrydonkey joined
[04:45] *** hungryd62 joined
[04:45] *** hungrydonkey left
[04:45] *** stoned75 joined
[04:46] *** hungrydonkey joined
[04:46] *** hungryd62 left
[04:47] *** hungryd80 joined
[04:47] *** hungrydonkey left
[04:48] *** hungrydonkey joined
[04:48] *** hungryd80 left
[04:49] *** anquegi joined
[04:49] *** hungrydonkey left
[04:49] *** hungrydonkey joined
[04:51] *** sjaveed left
[04:55] *** hungrydonkey left
[04:55] *** hungrydonkey joined
[04:57] *** billN1VUX left
[05:06] *** hungrydonkey left
[05:07] *** aluaces joined
[05:09] <anquegi> p6: say 3;

[05:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: «3␤»

[05:26] *** sjaveed joined
[05:43] *** zacts joined
[05:51] *** skids left
[05:54] *** andrzejku joined
[05:57] *** ensamvarg left
[05:58] *** zacts left
[05:59] *** cpan-raku left
[06:04] *** cpan-raku joined
[06:04] *** cpan-raku left
[06:04] *** cpan-raku joined
[06:04] *** ensamvarg joined
[06:20] *** abraxxa joined
[06:24] *** abraxxa left
[06:25] *** abraxxa joined
[06:33] *** parabolize left
[06:33] *** sjaveed left
[06:34] *** Sgeo left
[06:51] *** aborazmeh joined
[06:51] *** aborazmeh left
[06:51] *** aborazmeh joined
[06:51] <Geth> ¦ doc: 74a3191b45 | (Stoned Elipot)++ | doc/Type/Array.pod6

[06:51] <Geth> ¦ doc: Fix references to routines

[06:51] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/74a3191b45

[06:51] <linkable6> Link: https://docs.raku.org/type/Array

[07:06] *** pecastro joined
[07:06] *** zacts joined
[07:09] *** Altai-man joined
[07:10] *** zacts left
[07:11] *** zacts joined
[07:23] *** xinming left
[07:25] *** aborazmeh left
[07:25] *** sena_kun joined
[07:26] *** Altai-man left
[07:40] *** rindolf joined
[07:40] *** dakkar joined
[07:45] *** sameer joined
[07:45] <sameer> Hi

[07:46] <sameer> Interested in learning more on waterbed

[07:56] <sjn> the waterbed theory of complexity?

[08:01] <sjn> *linguistic complexity

[08:02] <sjn> <- doesn't know of anything else waterbed-related in Raku

[08:03] *** maggotbrain left
[08:04] *** maggotbrain joined
[08:17] <moritz> it's not too complicated. The idea is that if things have a certain complexity, and you push down the complexity of the usage at one point, it goes up in another place, just like a waterbed

[08:20] <sjn> I'm not sure if I'd like learning on a waterbed. I'm worried I'd get seasick @_@

[08:34] *** stoned75 left
[08:36] *** stoned75 joined
[08:38] *** leont joined
[09:08] *** daxim left
[09:08] <sameer> Thanks 

[09:38] <Altreus> Never heard of that, but my first thought is, yes, but waterbeds aren't modular

[09:38] <Altreus> So it seems like a decent analogy but the upshot is that you should be making the high-up bits be somewhere else where you can't see it

[09:45] *** pnu__ left
[09:45] *** pnu__ joined
[09:45] *** dog_star left
[09:46] *** tobs left
[09:46] *** tobs joined
[09:46] *** dog_star joined
[10:23] *** rreq joined
[10:24] *** rreq left
[10:40] *** stoned75 left
[10:42] *** stoned75 joined
[10:53] <tbrowder> hi, raku people

[10:54] <tbrowder> i'm looking for user opinions on general handling of spreadsheet programs or apis

[10:56] <tbrowder> do you prefer ms excel style (col, row, 1-based indexing) or traditional mayr

[10:56] <MasterDuke> i'm of the opinion that generals shouldn't handle them. shouldn't that be an NCO's job?

[10:56] <tbrowder> matrix style row,col, 0-based?

[11:01] <tbrowder> i probably should ask, without knowing the author's product, which interface style would you expect?

[11:14] *** sameer left
[11:14] *** tejr left
[11:15] *** tejr joined
[11:24] *** Altai-man joined
[11:27] *** sena_kun left
[11:36] <tbrowder> .tell codesections you should consider submitting a pr for App::Mi6 to integrate tangle/weave into its operations

[11:36] <tellable6> tbrowder, I'll pass your message to codesections

[11:44] *** patrickb joined
[11:44] *** veesh left
[11:45] *** veesh joined
[12:05] *** finsternis left
[12:07] *** finsternis joined
[12:16] *** domidumont joined
[12:26] *** patrickb left
[12:30] *** patrickb joined
[12:42] *** mensvaga joined
[13:09] *** andrzejku left
[13:10] * [Coke] just used 'var' instead of 'my' for some reason. 

[13:13] <Geth> ¦ Raku-Steering-Council/main: 86bd991040 | Coke++ | scripts/tally.raku

[13:13] <Geth> ¦ Raku-Steering-Council/main: fix soft line breaks

[13:13] <Geth> ¦ Raku-Steering-Council/main: 

[13:13] <Geth> ¦ Raku-Steering-Council/main: shouldn't introduce whitespace.

[13:13] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/86bd991040

[13:20] <[Coke]> 35 ballots reporting (Average votes per ballot: 4.6)

[13:24] * sjn reminds people about that Raku discord server where it's possible to use audio chat with others. :-)  invite link -> https://discord.gg/hweVYX

[13:30] <tbrowder> MasterDuke: i'm just now seeing yr joke, good one...

[13:34] <jjatria> Hi! I recently found myself wanting something like the Timer they have in Go, and couldn't figure out how to use a Promise directly to do it and couldn't find anything to do it in the ecosystem

[13:34] <jjatria> This is more or less what I ended up using, and I was wondering if it made sense to push it to the ecosystem, since now I find myself wanting to use it in other projects:

[13:34] <jjatria>  https://gitlab.com/-/snippets/2010953

[13:35] <jjatria> I could also be overcomplicating things, and maybe there is a much simpler solution to this that means the module is not needed

[13:45] <dakkar> I'm not sure I understand what you're doing, but it feels like Supply.throttle can do at least some of it

[13:45] <dakkar> (the documentation is still a bit obscure to me, though)

[13:54] <jjatria> The bottom of that snippet has an example of basically what I wanted to achieve: there's a set of events that are coming in, and I wanted to batch them in groups of "these came in within X number of seconds of each other"

[13:54] <jjatria> I'll take a look at Supply.throttle. Thanks!

[13:58] <jjatria> Ah, yeah... it looks like that is used to specify a maximum number of messages to allow through the Supply in a certain amount of time. I don't actually care how many messages go through

[13:58] <jjatria> So I feel the use case is a little different

[14:01] *** Sgeo joined
[14:02] <Geth> ¦ Raku-Steering-Council/main: c6e248b93e | Coke++ | scripts/tally.raku

[14:02] <Geth> ¦ Raku-Steering-Council/main: don't be greedy

[14:02] <Geth> ¦ Raku-Steering-Council/main: 

[14:02] <Geth> ¦ Raku-Steering-Council/main: avoids issue where someone has a very long sig with code that contains

[14:02] <Geth> ¦ Raku-Steering-Council/main: a closing paren and a vote on the last line.

[14:02] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/c6e248b93e

[14:03] <[Coke]> 37 ballots reporting (Average votes per ballot: 4.6)

[14:03] <[Coke]> I swear every vote is making me commit a bug fix. :)

[14:05] <patrickb> ping rba

[14:13] <guifa> [Coke]: hopefully not mine!

[14:13] *** stoned75 left
[14:14] <guifa> But if it makes you feel better, that was bascally me last night getting Intl::X to finally compile into something usable.  So many exceptions had to get some special treatment to be compilable =/

[14:19] <moritz> unique snowflake exceptions :D

[14:28] *** molaf joined
[14:35] <rba> Patrickb: busy pong. 

[14:35] <[Coke]> guifa: I don't know which email is yours, so... maybe? :)

[14:36] <patrickb> rba: Can I persuade you to upload the last few releases of rakubrew to the website? (And if time permits also update the website itself?) People keep reporting the same already fixed errors again and again...

[14:37] <rba> patrickb: Sure. Sorry for the grande delay :-/

[14:38] <patrickb> v10 - v13 need to be uploaded

[14:45] *** skids joined
[14:51] *** parabolize joined
[14:54] *** MasterDuke left
[15:00] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/09/14/2020-37-fundamentally-raku/

[15:02] <codesections> lizmat++

[15:02] <tellable6> 2020-09-14T11:36:58Z #raku <tbrowder> codesections you should consider submitting a pr for App::Mi6 to integrate tangle/weave into its operations

[15:04] <codesections> tbrowder: Interesting.  What do you have in mind?  As I mentioned when I announced Pod::Weave, I don't plan to use it for all my code so I'm not sure I'd want it to be part of mi6's default `build` command.  Are you thinking it'd be a separate subcommand?  

[15:07] *** MasterDuke joined
[15:12] <moritz> lizmat++

[15:13] *** guifa` joined
[15:13] *** aindilis` joined
[15:14] *** xinming joined
[15:15] *** aindilis left
[15:20] <[Coke]> OT, but the peach tree in my yard is doing very well this year.

[15:21] <timotimo> cool!

[15:22] <[Coke]> (house came with 2 apple trees - dead, 3 cherry trees - 2 left, and one peach tree)

[15:23] <MasterDuke> we've been enjoying all the blackberry bushes between our house and the park/playground. unfortunately we completely missed when the plums were ripe

[15:24] <timotimo> blackberries, eh? that's the ones that will spread like gossip across the entire place?

[15:24] <MasterDuke> and only caught the tail end of the sour cherries, weren't enough to do anything with

[15:24] <MasterDuke> yep

[15:24] <timotimo> i once helped fight a blackberry infestation

[15:25] <timotimo> didn't get to do too much before the landlord decided their family needs the apartment more than we do

[15:25] <tbrowder> codesections: i'm not sure exactly how to integrate it except primarily for mi6 to build the readme by extracting from the main module using your tools.

[15:25] <moritz> through harvesting? :D

[15:25] <guifa`> timotimo: why fight it?  Turn it into cobbler, jam or wine :-)

[15:25] *** sena_kun joined
[15:26] <timotimo> nah, it was really almost exclusively the woody parts, none of the fruits

[15:26] <timotimo> berries*

[15:27] *** Altai-man left
[15:27] <tbrowder> hm, i guess it would have to extract the code, too, so the main input should be the .pod file, no?

[15:28] <lizmat> m: say sprintf(q/%*.*e/,20,7,pi)   # /me wonders how many people know you could do that with sprintf

[15:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «       3.1415927e+00␤»

[15:30] * guifa` 's eyes bleed

[15:31] *** cpan-raku left
[15:32] *** cpan-raku joined
[15:32] *** cpan-raku left
[15:32] *** cpan-raku joined
[15:32] * moritz certainly didn't know

[15:35] <timotimo> moritz: do i get a free copy of the fundamentals book to check out the cro section? or did i actually already proofread it months ago?

[15:36] <timotimo> i do believe i did in fact proofread someone writing a chapter or two about cro

[15:41] *** prostagma joined
[15:42] <prostagma> :-D

[15:42] *** stoned75 joined
[15:44] *** sjaveed joined
[15:46] <lizmat> afk for a few hours&

[15:48] *** prostagma left
[15:54] *** hungrydonkey joined
[16:10] <patrickb> rba: Here's the link to the files, so you don't have to look it up again: https://rooster.uber.space/patcloud/index.php/s/qmkreEJLQDZcjbf

[16:11] <rba> patrickb: thank you. Will update it tonight. 

[16:21] *** aindilis` left
[16:32] *** zacts_ joined
[16:32] *** aindilis joined
[16:32] *** zacts_ left
[16:32] *** dakkar left
[16:46] *** Archenoth left
[16:47] *** cpan-raku left
[16:49] *** TreyHarris left
[16:52] *** Archenoth joined
[17:07] *** sena_kun left
[17:12] *** billN1VUX joined
[17:18] *** domidumont left
[17:19] *** sena_kun joined
[17:20] *** zacts left
[17:21] *** tony-o joined
[17:31] *** vrurg left
[17:40] *** moony left
[17:41] *** moony joined
[17:49] <moritz> timotimo: I think you did; I can still try to get you a review copy

[17:56] *** billN1VUX left
[17:56] *** billN1VUX joined
[17:56] *** billN1VUX left
[17:57] *** ensamvarg3 left
[17:59] *** abraxxa left
[18:00] *** timlegge left
[18:01] <timotimo> i got a review copy on 07.31

[18:01] *** abraxxa joined
[18:02] <timotimo> oh that was 2017

[18:02] <Geth> ¦ doc/array-splice-desc: f44459a8d9 | (Stoned Elipot)++ | doc/Type/Array.pod6

[18:02] <Geth> ¦ doc/array-splice-desc: Tweak Array.splice description

[18:02] <Geth> ¦ doc/array-splice-desc: 

[18:02] <Geth> ¦ doc/array-splice-desc: - reduce repetition

[18:02] <Geth> ¦ doc/array-splice-desc: - add a missing self mention

[18:02] <Geth> ¦ doc/array-splice-desc: - remove an extraneous 'just'

[18:02] <Geth> ¦ doc/array-splice-desc: review: https://github.com/Raku/doc/commit/f44459a8d9

[18:02] <Geth> ¦ doc: stoned++ created pull request #3643: Tweak Array.splice description

[18:02] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3643

[18:03] <timotimo> but also 06.18 of 2020

[18:03] <timotimo> i got a copy of chapter 12

[18:10] *** abraxxa left
[18:12] *** abraxxa joined
[18:14] *** hungrydonkey left
[18:16] *** TreyHarris joined
[18:19] *** hungryd1 joined
[18:20] *** abraxxa left
[18:23] *** abraxxa joined
[18:26] *** bocaneri left
[18:31] *** stoned75 left
[18:31] *** stoned75 joined
[18:36] *** stoned75 left
[18:39] *** molaf left
[18:51] *** vrurg joined
[18:53] *** guifa` left
[18:53] <Geth> ¦ ake: c5020ee560 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META6.json

[18:53] <Geth> ¦ ake: Bump version

[18:53] <Geth> ¦ ake: 

[18:53] <Geth> ¦ ake: It is now called `ake`!

[18:53] <Geth> ¦ ake: review: https://github.com/Raku/ake/commit/c5020ee560

[18:55] *** poga joined
[18:57] *** vrurg left
[18:57] *** vrurg joined
[18:57] *** andrzejku joined
[19:10] *** vrurg left
[19:14] *** vrurg joined
[19:14] *** stoned75 joined
[19:19] *** stoned75 left
[19:24] *** Altai-man joined
[19:26] *** sena_kun left
[19:29] *** xelxebar left
[19:30] *** xelxebar joined
[19:31] *** stoned75 joined
[19:33] *** vgrato_ joined
[19:35] *** approaching236 left
[19:40] *** billN1VUX joined
[19:40] *** vrurg left
[20:00] *** hungryd1 left
[20:15] *** hungrydonkey joined
[20:22] *** rindolf left
[20:25] *** anquegi left
[20:30] *** molaf joined
[20:38] *** oneeggeach joined
[20:52] *** patrickb left
[20:58] *** Altai-man left
[21:00] *** andrzejku left
[21:04] *** hungrydonkey left
[21:06] *** oneeggeach left
[21:07] *** aluaces left
[21:09] * [Coke] finds a wikipedia page about raku rules. Coke doesn't recall this existing. checks history. Coke edited the page at some point

[21:09] *** sena_kun joined
[21:31] <Geth> ¦ Raku-Steering-Council/main: ff7378357e | Coke++ | scripts/tally.raku

[21:31] <Geth> ¦ Raku-Steering-Council/main: Don't try to process lines beginning with >

[21:31] <Geth> ¦ Raku-Steering-Council/main: 

[21:31] <Geth> ¦ Raku-Steering-Council/main: ... someone might reply to a ballot with a newly filled out ballot, e.g.

[21:31] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/ff7378357e

[21:35] <[Coke]> 38 ballots reporting (Average votes per ballot: 4.6) (again, ^^ had to submit a patch. :)

[21:47] *** aluaces joined
[21:50] *** sena_kun left
[21:52] *** vrurg joined
[21:57] *** vrurg left
[22:06] *** Xliff joined
[22:06] <Xliff> \o

[22:07] <Xliff> What is the best idiom to use when declaring a dynamic variable that might already exist?

[22:08] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn,say }; sub a () { my $*dyn = 1; d; }; 

[22:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»

[22:08] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn.say }; sub a () { my $*dyn = 1; d; }; 

[22:08] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:08] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn.say }; sub a () { my $*dyn = 1; d(); }; 

[22:08] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:09] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn.say }; sub a () { my $*dyn = 1; d(); $*dyn.say}; 

[22:09] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:10] <Xliff> ^^ Shouldn't that output '1 1'?

[22:10] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn.say }; sub a () { d(); my $*dyn = 1; d(); $*dyn.say}; 

[22:10] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:11] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn.say }; sub a () { d(); my $*dyn = 1; d(); $*dyn.say}; 

[22:11] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:12] <Xliff> Any reason for the '(no output)' when there definitely should be?

[22:13] <Xliff> m: sub d { my $*dyn = OUTER::<$*dyn> // 2; $*dyn.say }; sub a () { d(); my $*dyn = 1; d(); $*dyn.say }; a; 

[22:13] <camelia> rakudo-moar 85847d2f1: OUTPUT: «2␤2␤1␤»

[22:15] <Xliff> Derp

[22:15] <Xliff> OK, so it looks like the call to OUTER::<$*dyn> silently fails. What's the better way?

[22:26] *** rbt joined
[22:50] *** pecastro left
[22:51] *** daxim joined
[22:59] *** stoned75 left
[23:00] * sjn just read about guifa's error message translation project

[23:01] *** stoned75 joined
[23:03] <sjn> nice! one question though. would it be an idea to introduce some kind of numeric error code that one would always emit, no matter the locale the message is in? I'm thinking that this might make it easier to google error messages in order to figure out any related discussions on online forums or documentation...

[23:05] <guifa> sjn: that’s more or less how things work, rather than numeric, it’s the type of the exception

[23:06] <guifa> So for instance, X::Str::Numeric indicates that a string couldn’t be turned into a number

[23:07] *** john73 joined
[23:07] <sjn> hm right

[23:07] <guifa> lizmat: sorry for it not being in ecosystem.  I wanted to get the word out first — I’m very close to feeling it’s stable enough to put in the ecosystem (plus I kind of want one 100% translated language first ha)

[23:08] <sjn> I guess that's good enough :)

[23:09] <sjn> btw, why not I18n::X? :)

[23:09] <guifa> Personal preferences :-)

[23:09] <guifa> I hate the I18n abbreviation

[23:10] <lucs> M1 2o

[23:10] <guifa> So all the international work I’ve done goes into Intl ^_^

[23:10] <sjn> I'm not a huge fan either, but it's a very well known term that people will be looking for

[23:10] <guifa> Keywords in META6.json ;-)

[23:11] <sjn> google doesn't know META6.json.. :-(

[23:11] <sjn> also, the keywords are quite optional

[23:12] *** john73 left
[23:12] <guifa> True, but right now I control all of the Intl:: modules so ;-)

[23:12] <sjn> but sure... it's better than nothing.

[23:13] <sjn> well, give it a consideration. what's most advantageous for Raku? You probably know better than me to which extent "Intl" is a recognized term out there...

[23:14] <sjn> maybe there are some ways to find some data about this?

[23:15] <guifa> https://books.google.com/ngrams/graph?corpus=26&year_start=1800&year_end=2019&content=Intl%2C+i18n&smoothing=3&direct_url=t1%3B%2CIntl%3B%2Cc0%3B.t1%3B%2Ci18n%3B%2Cc0 :-)

[23:16] <guifa> FWIW, javascript also uses Intl for its namespace

[23:20] <sjn> mm

[23:21] <Xliff> What is the best idiom to use when declaring a dynamic variable that might already exist?

[23:23] <guifa> Xliff: what do you intend to have happen if it already exists vs if it doesn't

[23:24] <Xliff> I*f it already exists, use existing value...otherwise use a default.

[23:24] <guifa> ah okay

[23:24] <Xliff> guifa: Think recursion.

[23:24] <guifa> my $*foo = CALLERS::<$f*foo> // default;

[23:25] <guifa> - typos

[23:25] <Xliff> m: sub d { my $*dyn = CALLERS::<$*dyn> // 2; $*dyn.say }; sub a () { d(); my $*dyn = 1; d(); $*dyn.say }; a; 

[23:25] <camelia> rakudo-moar 85847d2f1: OUTPUT: «2␤1␤1␤»

[23:25] <Xliff> \o/

[23:25] <Xliff> guifa++

[23:27] <guifa> I had to do something similar a whiel back.  I needed to check at the start of a sub recursive stub if it had been set, but I wasn’t ready to declare it yet.  CALLERS:: came to the rescue

[23:29] <Xliff> m: sub d { say CALLERS::<$a>; my $*dyn = CALLERS::<$*dyn> // 2; $*dyn.say }; sub a () { my $a = 42; d(); my $*dyn = 1; d(); $*dyn.say }; a; 

[23:29] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(LoweredAwayLexical)␤2␤(LoweredAwayLexical)␤1␤1␤»

[23:31] <guifa> That probably explains the reason I was getting LoweredAwayLexical with something I did yesterday.

[23:31] <guifa> They must have changed $_ from dyn to lexical at some point

[23:32] <Xliff> So in the case of CALLERS, it's only there to refer to dynamic vars?

[23:32] <guifa> Correct

[23:32] <Xliff> Cool.

[23:38] <guifa> OUTERS:: will let you catch variables if you declare an identical name for lexical scopes

[23:39] <guifa> m: my $a = 1; { my $a = 2; say $a; say OUTER::<$a> } say $a

[23:39] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3; { my $a = 2; say $a; say OUTER::<$a> }7⏏5 say $a␤    expecting any of:␤        infix␤        infix stopper…»

[23:39] <guifa> err

[23:39] <guifa> m: my $a = 1; { my $a = 2; say $a; say OUTER::<$a> }; say $a

[23:39] <camelia> rakudo-moar 85847d2f1: OUTPUT: «2␤1␤1␤»

[23:50] <guifa> Xliff: also, if you’re worried up early callers poisoning the variable name, you can use CALLER instead of CALLERS to only accept a dynamic variable defined one caller up

[23:54] *** Black_Ribbon joined
[23:59] <Xliff> m: my $a = regexp { / (a) b? / }; say "ab" ~~ $a()

[23:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    regexp used at line 1␤␤»

[23:59] <Xliff> m: my $a = regex { / (a) b? / }; say "ab" ~~ $a()

[23:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter / (must be quoted to match literally)␤at <tmp>:1␤------> 3my $a = regex {7⏏5 / (a) b? / }; say "ab" ~~ $a()␤Unrecognized regex metacharacter   (must be quoted to match literally)␤at <…»

