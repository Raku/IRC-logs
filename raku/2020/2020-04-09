[00:26] *** notable6 left
[00:26] *** benchable6 left
[00:26] *** squashable6 left
[00:26] *** bloatable6 left
[00:26] *** releasable6 left
[00:26] *** linkable6 left
[00:26] *** sourceable6 left
[00:26] *** bisectable6 left
[00:26] *** nativecallable6 left
[00:26] *** greppable6 left
[00:26] *** statisfiable6 left
[00:26] *** unicodable6 left
[00:26] *** tellable6 left
[00:26] *** quotable6 left
[00:26] *** shareable6 left
[00:26] *** committable6 left
[00:26] *** evalable6 left
[00:26] *** reportable6 left
[00:26] *** quotable6 joined
[00:26] *** releasable6 joined
[00:26] *** greppable6 joined
[00:27] *** notable6 joined
[00:27] *** reportable6 joined
[00:27] *** linkable6 joined
[00:27] *** sourceable6 joined
[00:27] *** evalable6 joined
[00:28] *** shareable6 joined
[00:28] *** unicodable6 joined
[00:28] *** statisfiable6 joined
[00:28] *** bloatable6 joined
[00:28] *** squashable6 joined
[00:28] *** nativecallable6 joined
[00:28] *** committable6 joined
[00:28] *** bisectable6 joined
[00:28] *** coverable6 joined
[00:29] *** tellable6 joined
[00:29] *** benchable6 joined
[00:38] <cpan-raku> New module released to CPAN! Tomty (0.0.10) by 03MELEZHIK

[00:58] *** webstrand joined
[00:59] *** qiqi2 joined
[01:14] *** qiqi2 left
[01:25] *** Hexeratops joined
[01:43] *** molaf left
[01:55] *** molaf joined
[02:12] *** guifa2 left
[02:17] *** qiqi2 joined
[02:42] *** thowe joined
[02:52] <Geth_> ¦ problem-solving: Kaiepi assigned to jnthn Issue Attributes could use more support for reflection https://github.com/Raku/problem-solving/issues/174

[02:54] *** Hexeratops left
[03:13] *** Black_Ribbon left
[03:27] *** hungrydonkey joined
[03:47] *** k-man_ joined
[03:49] *** k-man left
[03:54] *** pilne left
[04:04] *** Kaiepi left
[04:09] *** hungrydonkey left
[04:13] *** qiqi2 left
[04:14] *** hungrydonkey joined
[04:20] <Demos[m]> how can I constrain the return type of a method stub in a role

[04:20] <Demos[m]> so that implementations must supply a method with the correct return type

[04:32] *** molaf left
[04:41] *** xinming_ left
[04:53] *** qiqi2 joined
[04:55] *** xinming joined
[05:13] *** qiqi2 left
[05:14] *** xinming left
[05:14] *** xinming joined
[05:16] *** qiqi2 joined
[05:17] *** hungrydonkey left
[05:18] *** hungrydonkey joined
[05:24] *** qiqi2 left
[05:25] *** MilkmanDan joined
[05:26] *** qiqi4 joined
[05:46] *** hungrydonkey left
[05:47] *** andrzejku joined
[06:03] <moritz> I don't think you can

[06:11] *** xinming left
[06:12] *** toddr left
[06:13] *** xinming joined
[06:35] *** kensanata joined
[06:45] *** Itaipu left
[06:45] *** thowe left
[07:03] *** [Sno] left
[07:05] *** rindolf joined
[07:09] *** xinming left
[07:09] *** xinming joined
[07:12] *** hungrydonkey joined
[07:12] *** Altai-man_ joined
[07:24] *** cpan-raku left
[07:24] *** [Sno] joined
[07:25] *** cpan-raku joined
[07:25] *** cpan-raku left
[07:25] *** cpan-raku joined
[07:28] *** rindolf left
[07:37] *** andrzejku left
[07:39] *** dakkar joined
[07:41] *** rindolf joined
[07:54] *** chloekek joined
[07:54] *** pecastro joined
[08:01] *** hungryd51 joined
[08:02] *** hungrydonkey left
[08:09] *** eseyman joined
[08:20] *** rbtca left
[08:21] *** rbtca joined
[08:29] *** qiqi4 left
[08:41] *** xinming left
[08:41] *** xinming joined
[08:45] *** qiqi4 joined
[08:50] *** tokomer joined
[08:50] *** dakkar left
[08:54] *** dakkar joined
[08:56] *** hungryd51 left
[09:00] *** hungrydonkey joined
[09:12] *** sena_kun joined
[09:14] *** Altai-man_ left
[09:32] *** andrzejku joined
[09:33] *** poohman joined
[09:33] <poohman> hello all

[09:34] *** andrzejku left
[09:34] *** andrzejku joined
[09:34] *** rindolf left
[09:34] <poohman> m: my $a="asassa";$a.grep(/\H/).Str

[09:34] <camelia> rakudo-moar 9e19c1a6d: ( no output )

[09:34] <poohman> m: my $a="asassa";dd $a.grep(/\H/).Str

[09:34] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «"asassa"␤»

[09:35] <poohman> does it make sense to use the filter as used in my example above

[09:36] <poohman> I just want to ensure the string $a is not empty before I try to split it etc

[09:36] <poohman> or is there a better way to do it

[09:38] <dakkar> `chars($a)` ?

[09:38] <AlexDaniel> m: my $a = "asassa"; if $a eq '' { say 'string is empty' } else { say 'string is not empty' }

[09:38] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «string is not empty␤»

[09:38] <AlexDaniel> m: my $a = ""; if $a eq '' { say 'string is empty' } else { say 'string is not empty' }

[09:38] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «string is empty␤»

[09:38] <dakkar> or that, even more explicit

[09:39] <poohman> Im trying to avoid the if statement

[09:39] <AlexDaniel> why?

[09:39] <dakkar> does `$a.grep(/\H/)` mean "take $a, pretend it's a 1-element list, and remove all elements that, considered as strings, don't contain a character that's not horizontal whitespace"?

[09:40] <poohman> just want to see how far I can get without ifs and for loops

[09:40] <poohman> dakkar: yes - I was going for something like that

[09:40] <dakkar> `$a.grep(*.chars)[0]`

[09:41] <dakkar> at least say what you mean ☺

[09:42] <dakkar> if a string only consisting of horizontal whitesparce is to be considered empty, then your initial expression is as good as any (although I'd still use `[0]` instead of `.Str` at the end)

[09:43] <dakkar> your expression would produce an empty string when given a '    '

[09:43] <dakkar> which may or may not be what you want

[09:43] <dakkar> maybe having a Nil would be clearer

[09:45] *** lichtkind joined
[09:45] <poohman> ok let me try these

[09:47] *** rindolf joined
[09:48] *** xelxebar left
[10:06] *** qiqi4 left
[10:18] *** lichtkind_ joined
[10:20] *** natrys joined
[10:21] *** lichtkind left
[10:29] *** pilne joined
[10:31] *** _jrjsmrtn joined
[10:32] *** __jrjsmrtn__ left
[10:35] *** andrzejku left
[10:37] *** andrzejku joined
[10:40] *** lizmat joined
[10:49] *** hungryd91 joined
[10:53] *** hungrydonkey left
[11:11] *** Altai-man_ joined
[11:12] *** xelxebar joined
[11:12] *** aborazmeh joined
[11:12] *** aborazmeh left
[11:12] *** aborazmeh joined
[11:14] *** sena_kun left
[11:33] *** xinming left
[11:35] *** xinming joined
[11:49] *** wamba joined
[12:12] *** squashable6 left
[12:14] *** squashable6 joined
[12:18] *** squashable6 left
[12:20] *** squashable6 joined
[12:23] *** rbtca left
[12:24] *** rbtca joined
[12:32] <poohman> hi, dont we have a filter method for the list class

[12:32] <poohman> ?

[12:33] <moritz> it's called grep

[12:33] <moritz> in good ol' UNIX tradition

[12:33] <poohman> but grep seems to need a matcher - can it also work on a bool returned by some function

[12:33] <poohman> ?

[12:34] <moritz> the matcher can be any function or code block, yes

[12:35] <moritz> m: sub larger-five ($x) { $x > 5 }; say (1..10).grep(&larger-five)

[12:35] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10)␤»

[12:35] <moritz> or simply say (1..10).grep({ $_ > 5 })

[12:35] <moritz> m: say (1..10).grep({ $_ > 5 })

[12:35] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10)␤»

[12:35] <moritz> m: say (1..10).grep(* > 5) # shorter way to write it

[12:35] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10)␤»

[12:36] <chloekek> Anything that works with ~~, including lambdas that returns Booleans.

[12:37] <moritz> I must say that smart-matching is pretty cool abstraction

[12:37] <moritz> m: say (1..10).grep(2..5) # non-code smart-matcher

[12:37] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(2 3 4 5)␤»

[12:38] <moritz> m: say (1..10, 'A' .. 'F').grep(Int) # non-code smart-matcher

[12:38] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «()␤»

[12:38] <moritz> m: say (1..10, 'A' .. 'F').flat.grep(Int) # non-code smart-matcher

[12:38] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤»

[12:38] *** andrzejku left
[12:38] <poohman> thanks 

[12:38] <poohman> let me play around

[12:38] <chloekek> p6: #`｢ And not to mention ｣ say <a b c d>.grep('a' | 'c')

[12:38] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:257  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:261  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/…»

[12:38] <chloekek> LMAO

[12:39] <moritz> m: say <a b c d>.grep('a' | 'c')

[12:39] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(a c)␤»

[12:39] <moritz> better

[12:42] <poohman> m: sub larger-five ($x) { so $x > 5 }; say (1..10).grep(&larger-five)

[12:42] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10)␤»

[12:42] <poohman> m: sub larger-five ($x) { so ($x > 5) }; say (1..10).grep(&larger-five)

[12:42] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10)␤»

[12:42] <chloekek> Why would you so the result of >?

[12:43] <poohman> I was just checking if it works at all

[12:43] <poohman> i have a function in my grep which returns a boolean

[12:43] <poohman> Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?

[12:44] <poohman> im trying to reproduce this with an example

[12:44] <moritz> this is to catch a common error

[12:44] <moritz> if you write

[12:45] <moritz> @list.grep($_ > 5)

[12:45] <moritz> and $_ has a numeric value outside the block, this calls @list.grep(True) or @list.grep(False)

[12:46] <chloekek> p6: say ('01',).grep(1)

[12:46] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(01)␤»

[12:46] <MasterDuke> you know, that's meant to catch a common error, but i think several people have had trouble understanding what the error message is trying to say. maybe it needs rewording

[12:47] <chloekek> p6: say ('01',).grep(<1>)

[12:47] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «()␤»

[12:47] <chloekek> So string equality takes precedence in case of IntStr.

[12:48] <poohman> m:0..20.grep($_>5)

[12:48] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) WARNINGS for /tmp/GjqJVYGGN8:␤Use…»

[12:48] <evalable6> poohman, Full output: https://gist.github.com/78f1061ce53ec336d95dbb2cd8035c3b

[12:48] <chloekek> Oh, no it depends on the LHS type.

[12:49] <poohman> m:0..20.grep({$_>5})

[12:49] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) WARNINGS for /tmp/JaILNDyhGG:␤Useless use of ".." in expression "0..20.grep({$_>5})" in sink context (line 1)␤Seq objects are not valid endpoints for Ranges␤  in block <unit> at /tmp/JaILNDyhGG line 1␤␤»

[12:50] <poohman> m:[0..20].grep({$_>5})

[12:50] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «»

[12:50] <poohman> m:say [0..20].grep({$_>5})

[12:50] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)␤»

[12:50] <poohman> m:say [0..20].grep($_>5)

[12:50] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) Use of uninitialized value of typ…»

[12:50] <evalable6> poohman, Full output: https://gist.github.com/765aa417acf3fabcf263e7eabf87da6e

[12:54] *** aborazmeh left
[12:57] *** andrzejku joined
[12:58] *** andrzejku left
[12:58] *** andrzejku joined
[13:12] *** sena_kun joined
[13:14] *** Altai-man_ left
[13:17] *** xelxebar left
[13:18] *** xelxebar joined
[13:18] *** tokomer left
[13:20] <poohman> m:  my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];my $d =["c;d;e"]; @c.grep({($_.split(";"))[0] eq ($d.split(";"))[0]}).map(*.say)

[13:20] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «c;d;e;f␤»

[13:21] <poohman> my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];my $d =["c;d;e"];sub check($d) {($_.split(";"))[0] eq ($d.split(";"))[0]}; @c.grep(&check($d)).map(*.say)

[13:22] <poohman> m:my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];my $d =["c;d;e"];sub check($d) {($_.split(";"))[0] eq ($d.split(";"))[0]}; @c.grep(&check($d)).map(*.say)

[13:22] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) Cannot resolve caller split(Any:U, Str:D); Routine does not have any candidates. Is only the proto defined?␤  in sub check at /tmp/Kb1619kny3 line 1␤  in block <unit> at /tmp/Kb1619kny3 line 1␤␤»

[13:23] <poohman> where am I going wrong here - I have simply copied the block and made a function called check

[13:24] <poohman> sorry if it is a bit illegible

[13:24] <MasterDuke> the `$_` in check() is undefined

[13:25] <poohman> ok moritz had used a $x

[13:25] <poohman> ok

[13:25] <poohman> m:my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];my $d =["c;d;e"];sub check($d) {($_.split(";"))[0] eq ($d.split(";"))[0]}; @c.grep(&check($d)).map(*.say)

[13:25] <evalable6> poohman, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) Cannot resolve caller split(Any:U, Str:D); Routine does not have any candidates. Is only the proto defined?␤  in sub check at /tmp/1IrXdPVCAz line 1␤  in block <unit> at /tmp/1IrXdPVCAz line 1␤␤»

[13:26] <poohman> sorry didnt mean to paste it again here

[13:26] *** aborazmeh joined
[13:26] *** aborazmeh left
[13:26] *** aborazmeh joined
[13:27] <poohman> so the first argument will be assumed automatically?

[13:28] <AlexDaniel> p6: #`｢ And not to mention ｣ say <a b c d>.grep('a' | 'c')

[13:28] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:257  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:261  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/…»

[13:28] <AlexDaniel> p6: #`｢ And not to mention ｣

[13:28] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:257  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:261  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/…»

[13:28] <AlexDaniel> e: #`｢ And not to mention ｣

[13:28] <poohman> m: sub larger-five ($x) { $x > 5 }; say (1..10).grep(&larger-five)

[13:28] <evalable6> AlexDaniel, rakudo-moar 9e19c1a6d: OUTPUT: «»

[13:28] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «(6 7 8 9 10)␤»

[13:28] <AlexDaniel> chloekek: that's weird isn't it?

[13:28] <MasterDuke> m: my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];our $d =["c;d;e"];sub check($c) {($c.split(";"))[0] eq ($d.split(";"))[0]}; @c.grep(&check).map(*.say)

[13:28] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «c;d;e;f␤»

[13:29] <AlexDaniel> e: run <perl6 --setting=RESTRICTED> ‘#`｢ And not to mention ｣’

[13:29] <evalable6> AlexDaniel, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[13:29] <evalable6> AlexDaniel, Full output: https://gist.github.com/d93f6ebbe4e59108a7cf87b0b42dcab1

[13:29] <AlexDaniel> e: run <perl6 --setting=RESTRICTED>, ‘#`｢ And not to mention ｣’

[13:29] <evalable6> AlexDaniel, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) Could not open #`｢ And not to m…»

[13:29] <evalable6> AlexDaniel, Full output: https://gist.github.com/14e499920be935004db314c82246a776

[13:29] <AlexDaniel> e: run <perl6 --setting=RESTRICTED -e>, ‘#`｢ And not to mention ｣’

[13:29] <evalable6> AlexDaniel, rakudo-moar 9e19c1a6d: OUTPUT: «(exit code 1) Don't know setting RESTRICTED␤   …»

[13:29] <evalable6> AlexDaniel, Full output: https://gist.github.com/014765a5483db312a0ed5d1a524024e8

[13:29] <AlexDaniel> 6c: run <perl6 --setting=RESTRICTED -e>, ‘#`｢ And not to mention ｣’

[13:29] <AlexDaniel> sorry for botspam x)

[13:29] <MasterDuke> that `$d` doesn't need to be `our`, it can be `my`

[13:29] <committable6> AlexDaniel, https://gist.github.com/e6ecfb2102e3df9d6b373305fd789c6b

[13:30] <AlexDaniel> bisect: run <perl6 --setting=RESTRICTED -e>, ‘#`｢ And not to mention ｣’

[13:30] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=9e19c1a). Old exit code: 0

[13:30] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/93b706af05d21c933b90fd02b65c3d9c

[13:30] <bisectable6> AlexDaniel, (2020-03-06) https://github.com/rakudo/rakudo/commit/9f4a0f1ca8e1d1be0db462d03b9e78bd03f6121f

[13:30] <poohman> m: my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];our $d =["c;d;e"];sub check($c,$e) {($c.split(";"))[0] eq ($e.split(";"))[0]}; @c.grep(&check($d)).map(*.say)

[13:30] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in sub check at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:30] <AlexDaniel> lizmat: you missed RESTRICTED setting, which I think still exists?

[13:31] <poohman> MasterDuke: what if I want to pass $d

[13:31] <poohman> ?

[13:31] <AlexDaniel> chloekek: can you file a bug report?

[13:31] <lizmat> AlexDaniel: in what sense ?

[13:32] <lizmat> re QX ? 

[13:32] <AlexDaniel> lizmat: or there's something else wrong, see output on all releases https://gist.github.com/e6ecfb2102e3df9d6b373305fd789c6b bisected (2020-03-06) https://github.com/rakudo/rakudo/commit/9f4a0f1ca8e1d1be0db462d03b9e78bd03f6121f

[13:32] <MasterDuke> m: my @c =["a;b;c;d","b;c;d;e","c;d;e;f"];our $d =["c;d;e"];sub check($c,$e) {($c.split(";"))[0] eq ($e.split(";"))[0]}; @c.grep(&check.assuming($d)).map(*.say)

[13:32] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «c;d;e;f␤»

[13:33] <poohman> assuming()?? - ok need to read up on that

[13:33] <lizmat> AlexDaniel: is there a ticket already?

[13:34] <AlexDaniel> lizmat: just asked chloekek to make one :) they discovered it

[13:34] <AlexDaniel> m: #`｢ hello ｣

[13:34] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «Don't know setting RESTRICTED␤   at gen/moar/ModuleLoader.nqp:257  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)␤ from gen/moar/ModuleLoader.nqp:261  (/home/camelia/rakudo-m-inst-1/share/perl6/lib/…»

[13:34] <poohman> thanks 

[13:41] <chloekek> What is RESTRICTED?

[13:42] *** poohman left
[13:43] <moritz> an attempt to forbid IO, so that people don't destroy camelia's environment through IRC commands :D

[13:43] <AlexDaniel> chloekek: it is also absolutely useless

[13:44] <AlexDaniel> and should be removed so that people don't use it x)

[13:46] <moritz> well, it prevents accidental damage

[13:48] <chloekek> p6: say SETTING::

[13:48] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «PseudoStash.new(($! => Nil, $/ => Nil, $=pod => [], $_ => (Any), $¢ => Nil, &REACT => &REACT, &REACT-ONE-WHENEVER => &REACT-ONE-WHENEVER, &await => &await, &infix:<≼> => &infix:<≼>, &infix:<≽> => &infix:<≽>, &infix:«(<+)» => &infix:«(<+)»…»

[13:49] <lizmat> hmmm... that's still showing implementation detail

[13:50] <chloekek> p6: run('perl6', '-e', '#`[ foo ]')

[13:50] <camelia> rakudo-moar 9e19c1a6d: ( no output )

[13:51] <AlexDaniel> p6: run('perl6', '-e', 'say 42')

[13:51] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «42␤»

[13:51] <AlexDaniel> moritz: do we even have restricted setting?

[13:51] <AlexDaniel> IIRC this was illegal previously

[13:52] <chloekek> p6: run('ping', '-c', '1', 'raku.org')

[13:52] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «PING raku.org (104.18.59.39) 56(84) bytes of data.␤64 bytes from 104.18.59.39 (104.18.59.39): icmp_seq=1 ttl=55 time=112 ms␤␤--- raku.org ping statistics ---␤1 packets transmitted, 1 received, 0% packet loss, time 0ms␤rtt min/avg/max/mdev = …»

[13:52] <chloekek> Probably want an actual sandbox lol.

[13:53] <AlexDaniel> chloekek: that's right. For whateverables I'm a bit more permissive because network access is something we need regularly for bisecting stuff, but yeah

[13:53] <AlexDaniel> 6c: run <perl6 --setting=RESTRICTED -e>, ‘run <echo hello>’

[13:53] <committable6> AlexDaniel, https://gist.github.com/cdfefb2c7f43fb477771649dbd6009e3

[13:54] <AlexDaniel> 6c: run <perl6 --setting=RESTRICTED -e>, ‘run <true>’

[13:55] <moritz> m: run('ping', '-c', '1', 'raku.org')

[13:55] <camelia> rakudo-moar 9e19c1a6d: OUTPUT: «PING raku.org (104.18.59.39) 56(84) bytes of data.␤64 bytes from 104.18.59.39 (104.18.59.39): icmp_seq=1 ttl=55 time=112 ms␤␤--- raku.org ping statistics ---␤1 packets transmitted, 1 received, 0% packet loss, time 0ms␤rtt min/avg/max/mdev = …»

[13:55] <moritz> AlexDaniel: seems like it's b0rked indeed

[13:55] <committable6> AlexDaniel, https://gist.github.com/ce721df02926a613d0d111c1fc2ab3a7

[13:55] <AlexDaniel> moritz: since 6.d release I think

[13:56] <AlexDaniel> I'm a bit confused as to why it exits unsuccessfuly?

[13:57] <AlexDaniel> but yeah RESTRICTED is broken since 2018.11

[13:57] <AlexDaniel> I did notice it at some point, maybe I even created a ticket…

[13:57] <AlexDaniel> lizmat: just nuke the whole restricted setting thing then x)

[14:04] *** hungrydonkey joined
[14:05] *** hungryd91 left
[14:06] <chloekek> Something like this is probably better done in the VM level.

[14:07] <chloekek> Maintaining a large list of high-level subroutines is more difficult than maintaining a small list of low-level instructions.

[14:08] <lizmat> especially since the RESTRICTED setting does not inhibit "use nqp"  and using nqp:: ops

[14:09] *** aborazmeh left
[14:16] <chloekek> Speaking of RESTRICTED, is there a safe way to extract POD from untrusted modules?

[14:16] <MasterDuke> nope. POD can run arbitrary code

[14:16] <chloekek> Ok then I’ll run it under firejail.

[14:18] *** mowcat joined
[14:20] <AlexDaniel> chloekek: not so much instructions but syscalls, yeah

[14:21] <AlexDaniel> chloekek: then you don't even need a vm and can just use seccomp

[14:21] <AlexDaniel> firejail does allow you to use seccomp whitelists, I think?

[14:22] <AlexDaniel> lizmat: it's not just nqp, it's *everything* else too. You can't make it secure without whitelisting

[14:22] <chloekek> I have no idea.

[14:22] *** poga left
[14:22] <AlexDaniel> lizmat: nativecall is another obvious way to work around it, but I'm pretty sure there are many other creative ways

[14:23] <chloekek> I want to rewrite CRAI, index much more data from META6.json, modules and resources, and make the web interface more featureful especially with rendered POD.

[14:23] *** poga joined
[14:23] <AlexDaniel> chloekek: what's crai?

[14:23] <timotimo> raku's cpan equivalent ithink?

[14:24] <chloekek> It’s an app I wrote that downloads Raku distributions and indexes their metadata, for each version (not just latest).

[14:24] <chloekek> It’s not a hosting or mirroring service, just displays information about packages hosted on CPAN and GitHub.

[14:24] <AlexDaniel> niiice

[14:24] <AlexDaniel> and it works with github modules too?

[14:24] <AlexDaniel> does it go through git history or something?

[14:25] * lizmat notes that AlexDaniel doesn't read the weekly  :-)

[14:25] <chloekek> Yes, it indexes each tag, or if no tags are present then it indexes whatever HEAD happens to be when it comes along.

[14:25] <lizmat> afk for a few hours&

[14:26] <chloekek> For example: https://crai.foldr.nl/search?q=Acme%3A%3A

[14:26] <chloekek> The code base is a mess and there are some things in the process that I want to do differently, and I’m more experienced with Raku now.

[14:26] <AlexDaniel> lizmat: ah, I see it now. In this case I read the first sentence, realized I have no idea what Nix is and skipped that paragraph altogether :D

[14:28] <chloekek> raku-nix is generated from the database that CRAI automatically maintans.

[14:28] <AlexDaniel> chloekek: so it's like https://modules.raku.org/ but potentially better?

[14:28] <AlexDaniel> I don't think I get it :)

[14:29] <chloekek> The main goal is to compute URLs + hashes for all versions’ tarballs.

[14:30] <AlexDaniel> right

[14:30] <chloekek> But then, might as well index META6.json and render POD and provide search, because that’s useful too.

[14:30] <AlexDaniel> chloekek: any reason not to archive the actual code?

[14:30] <chloekek> The code remains in the tarballs.

[14:30] <chloekek> The tarballs remain on the server.

[14:31] <AlexDaniel> ah

[14:31] <chloekek> So technically, it’s accessible. :)

[14:31] <AlexDaniel> that's freaking awesome

[14:31] <AlexDaniel> chloekek: are feature requests welcome? :) Can you somehow raise a warning if a module disappears?

[14:31] <chloekek> Sure make a GitHub issue.

[14:32] <AlexDaniel> like if the github repo is deleted, for example

[14:33] <chloekek> What’s fun is that if the GitHub repo gets deleted, you can still download the tarball from database.crai.foldr.nl, just haven’t make TLS work yet (although shouldn’t be needed since you have the hash)

[14:33] <AlexDaniel> chloekek: yes yes, but it's currently an issue that we notice repo deletions a bit too late and can't do much about them

[14:34] <chloekek> Computing a set difference between each run should not be difficult

[14:34] <chloekek> Actually, having “run” as a concept is quite useful I think. Each run has its own logs, and a list of archives it found. Those can then be compared with other runs over time.

[14:34] <AlexDaniel> having tarballs is awesome, but also knowing when something was deleted is somewhat critical too

[14:36] <chloekek> (SELECT meta_name FROM run_distributions WHERE run_id = ?1) EXCEPT (SELECT meta_name FROM run_distributions WHERE run_id = ?1 - 1)

[14:36] <chloekek> Being able to do that would be cool.

[14:37] <chloekek> This would find new distributions. Swap the operands to EXCEPT to find disappeared distributions.

[14:39] <AlexDaniel> chloekek: https://github.com/chloekek/crai/issues/17 if it makes sense

[14:40] <chloekek> Thanks!

[14:40] <AlexDaniel> chloekek++ looks very cool and promising, thanks!

[14:43] <chloekek> Something that irks me is that there are archives that have the same name and version.

[14:43] <AlexDaniel> weekly: chloekek++ kept working on CRAI. If you by any chance missed it in the previous weekly, take a look! https://crai.foldr.nl/

[14:43] <notable6> AlexDaniel, Noted! (weekly)

[14:43] <chloekek> They come from different commits on master, with no version bump between them.

[14:43] <chloekek> I guess the way to sort those would be by commit topology.

[14:44] <chloekek> But that would be really painful to implement.

[14:44] <chloekek> Sorting them by retrieval date would be a lot easier.

[14:46] <AlexDaniel> chloekek: you can also just show warnings for any weird thing you can automatically detect. I always loved how debian tracker lists a bunch of stuff that is wrong with the package

[14:48] <AlexDaniel> chloekek: like https://tracker.debian.org/pkg/rakudo

[14:48] <AlexDaniel> chloekek: the stuff under “action needed”

[14:49] <chloekek> Great idea!

[14:52] *** molaf joined
[14:53] <chloekek> brb

[14:53] *** chloekek left
[14:59] <timotimo> that's lintian? or debchecker or something?

[15:01] <AlexDaniel> timotimo: not sure, it's a combination of things maybe? IIRC it does complain when buildd fails, and I guess that's separate?

[15:01] <timotimo> quite possible

[15:07] *** lichtkind_ left
[15:08] *** lichtkind_ joined
[15:11] *** Altai-man_ joined
[15:14] *** sena_kun left
[15:18] *** Kaiepi joined
[15:27] *** poohman joined
[15:27] *** lichtkind_ left
[15:37] *** guifa left
[15:49] *** dakkar left
[15:49] *** dakkar joined
[16:04] *** molaf left
[16:05] *** rindolf left
[16:06] *** kensanata left
[16:11] *** rbtca left
[16:12] *** rbtca joined
[16:13] *** rindolf joined
[16:15] *** wamba left
[16:16] *** vike left
[16:21] *** chloekek joined
[16:24] *** molaf joined
[16:26] *** rbtca left
[16:27] *** rbtca joined
[16:27] *** poohman left
[16:29] *** poohman joined
[16:32] *** dakkar left
[16:56] *** xelxebar left
[16:56] *** xelxebar joined
[17:06] *** vike joined
[17:12] *** xelxebar left
[17:12] *** sena_kun joined
[17:13] *** guifa2 joined
[17:14] *** xelxebar joined
[17:14] *** Altai-man_ left
[17:15] *** andrzejku left
[17:22] *** poohman left
[17:48] <guifa2> lizmat: sorry to jump back to yesterday but would that BOOTHash vs Hash be a bug or me screwing up?  (basically, "should guifa file a bug report?")

[17:49] <chloekek> p6: say DateTime.distribution

[17:49] <camelia> rakudo-moar 604085fb2: OUTPUT: «No such method 'distribution' for invocant of type 'DateTime'␤  in block <unit> at <tmp> line 1␤␤»

[17:50] <chloekek> p6: say DateTime.^distribution

[17:50] <camelia> rakudo-moar 604085fb2: OUTPUT: «No such method 'distribution' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at <tmp> line 1␤␤»

[17:50] <chloekek> Is it possible to get the distribution of a module?

[18:06] *** hungrydonkey left
[18:10] *** Kaiepi left
[18:13] *** Kaiepi joined
[18:16] *** sauvin left
[18:18] <lizmat> guifa2: that's the thing: I don't see where it is actually trying to call "package_at_key" in the stacktrace

[18:18] <lizmat> chloekek: nine might know

[18:38] *** Black_Ribbon joined
[18:53] *** abraxxa left
[19:04] *** dwarring joined
[19:11] *** Altai-man_ joined
[19:14] *** sena_kun left
[19:24] *** mowcat left
[19:40] *** andrzejku joined
[19:49] *** lichtkind joined
[19:52] *** cooper left
[20:03] <cpan-raku> New module released to CPAN! Gnome::Gtk3 (0.27.4) by 03MARTIMM

[20:20] *** DarthGandalf is now known as Some-body

[20:20] *** Some-body is now known as DarthGandalf

[20:30] *** rbtca left
[20:30] *** rbtca joined
[20:40] *** sena_kun joined
[20:42] *** Altai-man_ left
[20:52] *** molaf left
[21:05] *** andrzejku left
[21:11] *** rbtca left
[21:12] *** rbtca joined
[21:23] *** chloekek left
[21:44] *** stoned75 joined
[21:44] <stoned75> hi

[21:44] <[Coke]> ho

[21:45] <stoned75> eh

[21:58] *** natrys left
[22:00] *** rindolf left
[22:15] *** lichtkind left
[22:15] *** toddr joined
[22:39] *** Altai-man_ joined
[22:42] *** sena_kun left
[23:01] <Geth_> ¦ doc: Kaiepi++ created pull request #3318: Document Metamodel::DefiniteHOW

[23:01] <Geth_> ¦ doc: review: https://github.com/Raku/doc/pull/3318

[23:02] *** pecastro left
[23:05] *** Kaiepi left
[23:09] *** Kaiepi joined
[23:48] *** k-man__ joined
[23:49] *** k-man_ left
[23:50] *** sacomo joined
