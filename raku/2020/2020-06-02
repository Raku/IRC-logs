[00:05] *** KindOne left
[00:09] *** cpan-raku left
[00:11] *** cpan-raku joined
[00:11] *** cpan-raku left
[00:11] *** cpan-raku joined
[00:30] *** KindOne joined
[00:37] *** lucasb left
[00:39] *** wamba left
[00:42] *** lichtkind_ left
[00:47] *** stoned75 left
[00:47] *** rbt left
[00:47] *** rbt joined
[00:49] *** stoned75 joined
[00:59] *** soar joined
[01:10] *** rypervenche left
[01:10] *** konvertex left
[01:13] *** rypervenche joined
[01:39] *** molaf left
[01:52] *** molaf joined
[01:55] <jdv79> melezhik: it seems likes its pretty deep - moarvm maybe

[01:55] *** Redfoxmoon left
[01:57] *** Redfoxmoon joined
[02:41] <jdv79> melezhik: nevermind.  its zef.  setting out-buffer on $*OUT and $*ERR fixes it.

[02:41] *** Cabanossi joined
[02:41] <jdv79> tell melezhik nevermind.  its zef.  setting out-buffer on $*OUT and $*ERR fixes it.

[02:41] *** maggotbrain left
[02:41] <jdv79> tell melezhik nevermind.  its zef.  setting out-buffer on $*OUT and $*ERR fixes it.

[02:42] <jdv79> .tell melezhik nevermind.  its zef.  setting out-buffer on $*OUT and $*ERR fixes it.

[02:42] <tellable6> jdv79, I'll pass your message to melezhik

[02:43] *** Cabanoss- left
[02:48] *** maggotbrain joined
[03:13] *** KindOne left
[03:13] *** KindOne joined
[03:17] *** tigerpaws left
[03:18] *** melezhik left
[03:19] *** KindTwo joined
[03:21] *** KindOne left
[03:24] *** KindTwo is now known as KindOne

[04:10] *** rbt left
[04:11] *** rbt joined
[04:14] *** soar left
[04:21] *** cgfbee left
[04:39] *** aborazmeh joined
[04:39] *** aborazmeh left
[04:39] *** aborazmeh joined
[05:19] *** hyperak left
[05:20] *** hyperak joined
[05:21] *** xinming_ left
[05:24] *** Util left
[05:25] *** PavelB joined
[05:25] *** xinming_ joined
[05:32] *** sauvin joined
[05:32] *** sauvin left
[05:37] *** zacts joined
[05:38] *** sauvin joined
[05:41] *** brtastic joined
[05:58] *** Util joined
[05:59] *** rindolf joined
[06:00] *** wamba joined
[06:22] *** soar joined
[06:25] *** soursBot joined
[06:31] *** brtastic left
[06:37] *** Redfoxmoon left
[06:37] *** Redfoxmoon joined
[06:41] *** molaf left
[06:42] *** wamba left
[06:48] *** JJMerelo joined
[06:55] *** andrzejku joined
[07:00] *** cpage_ joined
[07:03] *** cpage left
[07:03] *** cpage_ is now known as cpage

[07:05] *** aborazmeh left
[07:09] *** JJMerelo left
[07:13] *** brtastic joined
[07:22] *** kensanata joined
[07:29] *** dakkar joined
[07:30] *** TimToady_ left
[07:32] *** pecastro joined
[07:33] *** TimToady joined
[07:33] *** aborazmeh joined
[07:33] *** aborazmeh left
[07:33] *** aborazmeh joined
[07:35] *** PavelB left
[07:38] *** wamba joined
[07:43] *** soursBot left
[07:56] *** sena_kun joined
[08:00] *** zacts left
[08:02] <abraxxa> how can I prevent uninitialized warnings in raku?

[08:03] <abraxxa> my current case is a $var > 10 which might be not defined

[08:03] <abraxxa> $var.defined && $var > 10 is what I did coming from Perl 5

[08:03] <abraxxa> https://docs.raku.org/routine/defined is where my search lead to

[08:08] *** aborazmeh_ joined
[08:08] *** aborazmeh_ left
[08:08] *** aborazmeh_ joined
[08:09] *** aborazmeh left
[08:09] *** aborazmeh_ is now known as aborazmeh

[08:09] *** Altai-man_ joined
[08:10] *** rbt left
[08:11] *** rbt joined
[08:12] *** sena_kun left
[08:17] <ShimmerFairy> That should also work in Raku. You could also do something like    ($var // 0) > 10    if you want to treat $var as having a default value and you can't give it one for some reason.

[08:19] *** abraxxa left
[08:20] *** abraxxa joined
[08:21] *** abraxxa left
[08:22] *** sno left
[08:22] *** abraxxa joined
[08:24] *** abraxxa left
[08:24] *** abraxxa joined
[08:27] *** abraxxa left
[08:28] *** abraxxa joined
[08:29] *** sno joined
[08:33] <lizmat> abraxxa: if $var can be a native int, it would default to 0

[08:34] <lizmat> m: my int $a; say $a > 10

[08:34] <camelia> rakudo-moar 62adc88c6: OUTPUT: «False␤»

[08:34] <lizmat> m: my $a; say $a > 10

[08:34] <camelia> rakudo-moar 62adc88c6: OUTPUT: «Use of uninitialized value of type Any in numeric context␤False␤  in block <unit> at <tmp> line 1␤»

[08:34] <lizmat> alternately, you can use "is default" to give the variable a default value

[08:34] <lizmat> m: my $a is default(0); say $a > 10

[08:34] <camelia> rakudo-moar 62adc88c6: OUTPUT: «False␤»

[08:34] <lizmat> m: my $a is default(42); say $a > 10

[08:34] <camelia> rakudo-moar 62adc88c6: OUTPUT: «True␤»

[08:35] <abraxxa> $var has no type

[08:40] <lizmat> abraxxa: if you cannot influence the definition of $var, then either:

[08:41] <lizmat> ($a // 0) > 10

[08:41] <lizmat> or:

[08:41] <lizmat> if quietly $a > 0 { say "foo" }

[08:41] <abraxxa> lizmat: what's the difference between my $var = 0; and my $var is default(0);?

[08:41] <lizmat> the quietly will prevent the warning from being output

[08:42] <lizmat> a variable has a default state, by default that its Any

[08:43] *** xinming_ left
[08:43] <lizmat> so you could argue that if you say: "my $var" you're saying really "my $a is default(Any)"

[08:43] *** xinming_ joined
[08:44] <lizmat> m: my $a = 42; say $a; $a = Nil; say $a

[08:44] <camelia> rakudo-moar 62adc88c6: OUTPUT: «42␤(Any)␤»

[08:44] <lizmat> by assigning Nil to a variable, you revert it to its default value

[08:44] <abraxxa> and what is the difference?

[08:44] <abraxxa> in both cases it will get assigned '0'

[08:45] <lizmat> well, you could argue that effectively for scalars

[08:45] <lizmat> but for arrays:

[08:45] <lizmat> m: my @arr is default(42); say @arr[100000]

[08:45] <camelia> rakudo-moar 62adc88c6: OUTPUT: «42␤»

[08:46] <lizmat> you never assigned element 10000, but still it has the default value

[08:47] <lizmat> if you consider a variable to be a box that can contain a value

[08:47] <lizmat> the default value is what the box is worth if there isn't any value in it

[08:49] *** soar left
[08:49] *** Sgeo left
[08:51] * lizmat clickbaits https://rakudoweekly.blog/2020/06/01/2020-21-22-four-by-wenzel/

[08:51] <lizmat> and goes afk for a few hours&

[08:53] *** rbt left
[08:53] *** rbt joined
[08:54] *** sjm_uk left
[09:02] *** soursBot joined
[09:19] *** aborazmeh left
[09:22] *** xinming_ left
[09:22] *** vike1 left
[09:24] *** xinming_ joined
[09:25] *** aborazmeh joined
[09:25] *** aborazmeh left
[09:25] *** aborazmeh joined
[09:26] *** wamba left
[09:32] *** vike1 joined
[09:35] *** sno left
[09:37] *** konvertex joined
[09:49] *** xinming_ left
[09:51] *** xinming_ joined
[09:53] *** sno joined
[09:53] *** wamba joined
[09:58] *** soar joined
[10:07] *** soar left
[10:10] *** sena_kun joined
[10:12] *** Altai-man_ left
[10:13] *** mowcat joined
[10:14] *** Black_Ribbon left
[10:15] *** lichtkind joined
[10:32] *** Doc_Holliwood left
[10:38] *** aborazmeh left
[10:52] *** JJMerelo joined
[11:46] *** sarna joined
[11:49] *** soursBot left
[11:49] *** soursBot_ joined
[11:56] *** MasterDuke left
[12:00] *** cgfbee joined
[12:00] *** SpiceMan left
[12:00] *** stoned75 left
[12:01] *** syntaxman left
[12:01] *** lucs left
[12:01] *** syntaxman joined
[12:01] *** stoned75 joined
[12:01] *** SpiceMan joined
[12:01] *** lucs joined
[12:07] <moritz> lizmat++

[12:09] *** Altai-man_ joined
[12:12] *** sena_kun left
[12:13] *** soursBot_ left
[12:14] <JJMerelo> Something that has happened and I can't quite figure out.

[12:15] <JJMerelo> It's this thing with DBIish. It's got a library, NativeLibs, that was pegged at version 0.0.3.

[12:15] <JJMerelo> That same module, NativeLibs, was spun off as its own library and published to the ecosystem, bumping it up to version 0.0.7

[12:16] <JJMerelo> NativeLibs is NOT listed as a dependency of DBIish. It's just there, in the "provides" section.

[12:17] <JJMerelo> Now, the thing is apparently zef is fetching the external NativeLibs, testing it, and it fails https://github.com/JJ/perl6-recipes-apress/runs/727845681?check_suite_focus=true#step:6:128

[12:18] <JJMerelo> (BTW, that's a GitHub action that detects changes in the META6.json and builds a specific Docker container when that happens; the container is used in subsequent tests)

[12:19] <JJMerelo> So, is that even possible? Will zef check if there's a version of a module in the ecosystem whose version is higher than the one we've got locally and automatically add it to dependencies?

[12:21] *** ctilmes joined
[12:22] <ctilmes> It's not the version of NativeLibs.  It is the version of the distribution that provides NativeLibs.

[12:22] <tellable6> 2020-05-30T19:42:40Z #raku <holli__> ctilmes: ty

[12:22] <ctilmes> Two distributions provide it, one has version 0.0.7, one has version 0.5.19, so it gets the later one, DBIish

[12:23] <ctilmes> You can test the resolution with 'zef info NativeLibs' -- it will show you the one that will get chosen

[12:28] *** melezhik joined
[12:33] <JJMerelo> ctilmes thanks

[12:33] <JJMerelo> Now I'm trying to figure out which distribution needs that...

[12:33] <ctilmes> It's a weird situation -- I think it would be better if NativeLibs was removed from DBIish entirely

[12:36] <melezhik> jdv79 thanks, could you please share an example how to set out-buffer ? 

[12:36] <tellable6> 2020-06-02T02:42:02Z #raku <jdv79> melezhik nevermind.  its zef.  setting out-buffer on $*OUT and $*ERR fixes it.

[12:37] *** cpan-raku left
[12:37] *** MasterDuke joined
[12:38] <JJMerelo> ctilmes but it's newer than the one published, that's the thing.

[12:38] *** cpan-raku joined
[12:38] *** cpan-raku left
[12:38] *** cpan-raku joined
[12:39] <JJMerelo> I've found it's actually UUID which is a upstream dependency of several libraries the one that includes NativeLibs https://github.com/CurtTilmes/perl6-libuuid

[12:39] <JJMerelo> So it's not really a problem with it searching the library, it's a genuine problem with the published version I guess will have to be patched...

[12:39] *** wamba left
[12:39] *** wamba1 joined
[12:40] <ctilmes> I'll try to update LibUUID to use the separate one instead of the DBIish one

[12:40] *** girafe joined
[12:40] <ctilmes> In my more recent mods I've fully qualified the use NativeLibs

[12:42] <JJMerelo> ctilmes UUID is fine

[12:42] *** girafe2 left
[12:42] <JJMerelo> and NativeLibs also passes tests.

[12:42] <JJMerelo> I think that the problem is that it's testing with external tests using DBIish library

[12:42] <ctilmes> ok. thanks

[12:43] <JJMerelo> It probably makes sense to backport whatever has been changed in DBIish to the external library and eliminate it from DBIish

[12:43] <JJMerelo> Is that possible?

[12:44] <JJMerelo> I mean, is it possible that zef is testing some library with another, installed version of the library?

[12:44] <ctilmes> I don't know what differences they have

[12:44] *** soursBot joined
[12:48] *** JJMerelo left
[12:48] *** soar joined
[12:52] <melezhik> jdv79 do you mean I have to open STDOUT and STDERR and set .out-buffer within code block, like explained here -  https://docs.raku.org/routine/out-buffer

[12:52] <melezhik> ?

[12:59] *** mowcat left
[13:00] *** mowcat joined
[13:00] *** mowcat left
[13:01] *** mowcat joined
[13:01] *** mowcat left
[13:02] *** mowcat joined
[13:02] *** mowcat left
[13:03] *** mowcat joined
[13:09] <rbt> JJMerelo: I deleted the DBIish NativeLibs, installed the separate package, and Mysql, sqlite, and Pg tests all pass.

[13:09] <tellable6> rbt, I'll pass your message to JJMerelo

[13:09] <rbt> I don't have an Oracle system to try

[13:15] *** rindolf left
[13:21] *** kensanata left
[13:27] <jdv79> melezhik: i mean i basically added "($*OUT,$*ERR)>>.out-buffer(0);" to the zef script and that seemed to fix it

[13:27] *** soursBot left
[13:29] *** soursBot joined
[13:29] <jdv79> if that code snippet worked:)

[13:29] *** sour joined
[13:29] <jdv79> you get the idea - it seems to be buffering in the zef proc

[13:30] *** sour left
[13:36] *** ctilmes left
[13:49] *** mowcat left
[13:50] *** skids joined
[13:52] *** mowcat joined
[13:52] *** mowcat left
[13:53] *** mowcat joined
[13:54] *** mowcat left
[13:54] *** mowcat joined
[13:55] *** mowcat left
[13:55] *** mowcat joined
[13:59] *** mowcat left
[14:00] *** mowcat joined
[14:00] *** mowcat left
[14:01] <Geth> ¦ doc: uzluisf++ created pull request #3457: Revise 'Raku by example 101' page

[14:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3457

[14:02] *** stoned75 left
[14:03] *** stoned75 joined
[14:03] *** sarna left
[14:05] *** Demos[m] left
[14:10] *** sena_kun joined
[14:11] *** Altai-man_ left
[14:12] *** MasterDuke left
[14:17] <melezhik> jdv79, yeah. all external commands get called by Proc::Async, see https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner/Helpers/Common.pm6#L90

[14:17] <melezhik> so should I just insert `($*OUT,$*ERR)>>.out-buffer(0);` inside this method? does it work "globally" ?

[14:22] <jdv79> basically - maybe ($*OUT,$*ERR).map: {.out-buffer = 0} would actually work

[14:23] <jdv79> well, $*OUT and $*ERR are dynamic and declared "above/outside" the main scope so kinda "global"

[14:23] <melezhik> I will try and let's see if it fixes the issue of stdout buffering in RakuDist

[14:26] *** aborazmeh joined
[14:26] *** aborazmeh left
[14:26] *** aborazmeh joined
[14:29] <jdv79> maybe https://nopaste.linux-dev.org/?1318839 illustrates it well enough:)

[14:40] *** rindolf joined
[14:40] *** soursBot left
[14:44] *** soursBot joined
[14:57] *** lucasb joined
[14:59] *** JJMerelo joined
[15:00] <melezhik> jdv79  log https://rakudist.raku.org/sparky/report/debian/158 still appears "frozen" right after zef start

[15:01] <melezhik> so that commit looks like does not help - https://github.com/melezhik/Sparrow6/commit/021e2aa2a34dad1cbf064f0aa00c088a8ebbdffe

[15:01] <melezhik> your examples implies modification of zef itself, not the client code

[15:07] *** brtastic left
[15:10] *** aborazmeh left
[15:22] <jdv79> that's because zef is buffering - there is no way to fix it outside of zef

[15:22] <jdv79> zef itself has to be unbuffered

[15:23] <timotimo> well, there is "a" way, but it's not a sensible thing to do

[15:23] <jdv79> did you see my paste above ^.  I unbuffered in the actual zef file

[15:23] <jdv79> timotimo: pray tell

[15:23] <timotimo> attach a debugger to the zef process and manually force unbuffering on the file descriptors that way

[15:23] <jdv79> haha

[15:24] <jdv79> melezhik: yeah - do what timotimo says:)

[15:24] *** xinming_ left
[15:24] *** xinming_ joined
[15:24] <jdv79> i would reopen the ticket on zef and ask output unbuffering support or do it yourself in any of myriad of ways:  fork, munge,etc...

[15:25] <melezhik> jdv79 timotimo thanks guys. I'll try to patch zef script itself first, not that difficult in Sparrow 

[15:25] <timotimo> oh, there's a tool called, i think, fdinfo? it could be possible that using that can get to buffering issues more quickly, but i'm not actually sure how it's used; i think you want to exec it from the process that has the FDs?

[15:25] <timotimo> hm, no, that's not what it's called

[15:27] <jdv79> melezhik: thanks for bringing it up - at least i now know why some docker builds stall on zef commands for long stretches of time

[15:28] <melezhik> yeah, this ticket could be of interests too - https://github.com/ugexe/zef/issues/353 . though as you can see there is no confidence what cause a buffering, so I am investigating

[15:28] *** xinming_ left
[15:29] *** xelxebar left
[15:29] *** _dev_zero left
[15:29] <melezhik> after apply the patch jdv79 suggested I'd hopefully get more details

[15:30] *** xinming_ joined
[15:32] *** xelxebar joined
[15:34] *** _dev_zero joined
[15:36] <timotimo> i can not find that tool again :(

[15:38] *** brtastic joined
[15:41] *** MilkmanDan left
[15:42] *** MilkmanDan joined
[15:43] <timotimo> the tool is called "filan"

[15:47] *** aborazmeh joined
[15:47] *** aborazmeh left
[15:47] *** aborazmeh joined
[15:53] *** MasterDuke joined
[16:09] *** Altai-man_ joined
[16:11] *** sena_kun left
[16:32] *** Black_Ribbon joined
[16:38] *** aborazmeh left
[16:40] *** rindolf left
[16:45] *** wamba1 left
[16:51] *** MasterDuke left
[16:53] *** Doc_Holliwood joined
[16:54] <melezhik> jdv79 timotimo - here is my feedback on patch suggested by jdv79 - https://github.com/ugexe/zef/issues/353#issuecomment-637678552

[16:55] *** dakkar left
[16:56] <jdv79> melezhik: cool

[17:06] *** kensanata joined
[17:07] *** andrzejku left
[17:07] *** andrzejku joined
[17:21] <JJMerelo> raku.org is down...

[17:21] <tellable6> 2020-06-02T13:09:44Z #raku <rbt> JJMerelo: I deleted the DBIish NativeLibs, installed the separate package, and Mysql, sqlite, and Pg tests all pass.

[17:21] <JJMerelo> rbt thanks... In fact, it contains the same functionality...

[17:23] <JJMerelo> rba But I'm not sure it's the best, since there are implementation details that are somewhat different 

[17:23] *** wamba joined
[17:28] <melezhik> interesting, installing LibXML ( tests and dependencies are not included ) takes almost 3 minutes - https://rakudist.raku.org/sparky/report/debian/161

[17:28] *** aborazmeh joined
[17:28] *** aborazmeh left
[17:28] *** aborazmeh joined
[17:28] <melezhik> 17:16:35 06/02/2020 [bash: zef install CSS] ===> Installing: LibXML:ver<0.4.0>:auth<cpan:WARRINGD>

[17:30] <melezhik> I wonder what's happening here? is it not just coping files ? or maybe there is some compilation phase ?

[17:30] *** Sgeo joined
[17:31] <lizmat> JJMerelo: not down for me?

[17:32] <JJMerelo> lizmat I'll try again

[17:32] *** xinming_ left
[17:32] <melezhik> it's alive now

[17:32] <JJMerelo> right, back up. rba++

[17:32] <melezhik> appeared down few minutes ago

[17:32] <lizmat> I understand some maintenance was planned

[17:34] *** xinming_ joined
[17:37] *** wamba left
[17:37] *** wamba joined
[17:38] <cpan-raku> New module released to CPAN! Math::Libgsl::QuasiRandom (0.0.1) by 03FRITH

[17:39] *** wamba1 joined
[17:39] *** wamba left
[17:43] *** squashable6 left
[17:45] *** wamba1 left
[17:46] *** squashable6 joined
[17:46] *** wamba joined
[17:55] *** brtastic left
[17:56] *** soursBot left
[17:59] *** devmikey joined
[18:03] *** xinming_ left
[18:03] *** xinming_ joined
[18:04] *** melezhik left
[18:06] *** rbt left
[18:07] *** rbt joined
[18:08] *** melezhik joined
[18:10] *** sena_kun joined
[18:11] *** rbt left
[18:11] *** soursBot joined
[18:11] *** rbt joined
[18:12] *** Altai-man_ left
[18:12] *** chloekek_ joined
[18:22] *** sauvin left
[18:32] *** JJMerelo left
[18:34] *** molaf joined
[18:54] *** chloekek_ left
[18:57] *** BinGOs joined
[18:57] *** BinGOs left
[18:57] *** BinGOs joined
[18:58] *** KindTwo joined
[19:00] *** KindOne left
[19:01] *** Tirifto joined
[19:03] *** KindTwo is now known as KindOne

[19:03] *** devmikey left
[19:04] *** leah2 left
[19:11] *** AlexDaniel left
[19:18] *** leah2 joined
[19:29] *** KindTwo joined
[19:30] *** brtastic joined
[19:31] *** KindOne left
[19:34] *** KindTwo is now known as KindOne

[19:35] *** wamba left
[19:42] *** zacts joined
[19:42] *** zacts left
[19:43] *** mowcat joined
[19:45] *** hyperak left
[19:45] *** mowotter joined
[19:45] *** mowotter left
[19:45] *** hyperak joined
[19:47] *** melezhik left
[19:55] *** chloekek_ joined
[19:56] *** melezhik joined
[20:03] *** mowcat left
[20:04] *** mowcat joined
[20:05] *** mowcat left
[20:06] *** mowcat joined
[20:07] *** mowcat left
[20:08] *** mowcat joined
[20:09] *** Altai-man_ joined
[20:12] *** sena_kun left
[20:14] *** soursBot left
[20:24] *** aborazmeh left
[20:27] *** abraxxa left
[20:27] <melezhik> I started to promote Sparrow on reddit/devops and Raku as well - https://www.reddit.com/r/devops/comments/gv6f62/a_better_way_to_extend_your_make_scripts/fso5jd8?utm_source=share&utm_medium=web2x

[20:28] <melezhik> maybe one more guy would interested in the langauge

[20:28] <rba> JJMerelo et al: I'm sorry, yet I have missed to inform you all about todays planned maintenance. So kudos go to nine++ and his team, e.g. m_athias++. For those who like to check the service monitoring: https://stats.raku.org/

[20:29] *** abraxxa joined
[20:37] *** chloekek_ is now known as chloekek

[20:41] *** wamba joined
[20:41] <Geth> ¦ doc/link-bind-key: d277c89f67 | (Stoned Elipot)++ | doc/Language/containers.pod6

[20:41] <Geth> ¦ doc/link-bind-key: xref BIND-KEY method

[20:41] <Geth> ¦ doc/link-bind-key: review: https://github.com/Raku/doc/commit/d277c89f67

[20:41] <Geth> ¦ doc: stoned++ created pull request #3459: xref BIND-KEY method

[20:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3459

[20:45] *** webstrand joined
[20:45] *** aborazmeh joined
[20:45] *** aborazmeh left
[20:45] *** aborazmeh joined
[20:48] *** brtastic left
[20:54] *** Altai-man_ left
[20:55] *** devmikey joined
[21:00] *** softmoth joined
[21:02] *** rbt left
[21:03] *** rbt joined
[21:04] *** Nasrudin joined
[21:06] <Geth> ¦ doc: d277c89f67 | (Stoned Elipot)++ | doc/Language/containers.pod6

[21:06] <Geth> ¦ doc: xref BIND-KEY method

[21:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d277c89f67

[21:06] <Geth> ¦ doc: 5bdc659acd | (Will Coleda)++ (committed using GitHub Web editor) | doc/Language/containers.pod6

[21:06] <Geth> ¦ doc: Merge pull request #3459 from Raku/link-bind-key

[21:06] <Geth> ¦ doc: 

[21:06] <Geth> ¦ doc: xref BIND-KEY method

[21:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/5bdc659acd

[21:06] <linkable6> Link: https://docs.raku.org/language/containers

[21:16] *** aborazmeh left
[21:26] *** Tirifto left
[21:31] *** stoned75 left
[21:33] *** molaf left
[21:41] *** JuneMeow joined
[21:42] *** JuneMeow left
[21:53] *** AlexDaniel joined
[21:53] *** AlexDaniel left
[21:53] *** AlexDaniel joined
[21:53] *** MasterDuke joined
[21:59] *** MasterDuke left
[21:59] *** kensanata left
[22:12] <konvertex> Does anyone have a minute to explain why I need a slip here? Still don't get it. Works fine for summing, for example. 

[22:12] <konvertex> m: <3 5 -2>.combinations.max({[*] $_}).say

[22:12] <camelia> rakudo-moar f51fba287: OUTPUT: «(3 5 -2)␤»

[22:12] <konvertex> m: <3 5 -2>.combinations.max({[*] |$_}).say

[22:12] <camelia> rakudo-moar f51fba287: OUTPUT: «(3 5)␤»

[22:13] <konvertex> Is that some IntStr issue?

[22:13] <konvertex> m: <3 5 -2>.combinations.max({[+] $_}).say

[22:13] <camelia> rakudo-moar f51fba287: OUTPUT: «(3 5)␤»

[22:13] <konvertex> m: <3 5 -2>.combinations.max({[+] |$_}).say

[22:13] <camelia> rakudo-moar f51fba287: OUTPUT: «(3 5)␤»

[22:15] <chloekek> Because $_ is in a scalar container.

[22:15] <chloekek> m: <3 5 -2>.combinations.max({[+] @^a}).say

[22:15] <camelia> rakudo-moar f51fba287: OUTPUT: «(3 5)␤»

[22:16] <chloekek> m: <3 5 -2>.combinations.max({[*] @^a}).say

[22:16] <camelia> rakudo-moar f51fba287: OUTPUT: «(3 5)␤»

[22:17] <konvertex> Hm, but why is [+] behaving differently than [*] in this case?

[22:18] <chloekek> m: <3 5 -2>.combinations.max({say $_; [*] $_}).say

[22:18] <camelia> rakudo-moar f51fba287: OUTPUT: «(3)␤()␤(5)␤(3)␤(-2)␤(3)␤(3 5)␤(3)␤(3 -2)␤(3 5)␤(5 -2)␤(3 5)␤(3 5 -2)␤(3 5)␤(3 5 -2)␤»

[22:18] <chloekek> p6: say [+] $(1, 2, 3)

[22:18] *** MasterDuke joined
[22:18] <camelia> rakudo-moar f51fba287: OUTPUT: «6␤»

[22:18] <chloekek> p6: say [*] $(1, 2, 3)

[22:18] <camelia> rakudo-moar f51fba287: OUTPUT: «3␤»

[22:18] <chloekek> For some reason, [*] converts the list into a number, thereby taking its length.

[22:19] <chloekek> I don’t know why [+] differs in this behavior.

[22:20] <konvertex> Alright, thanks for the input, appreciated! Will dig some more in the docs.

[22:25] *** wamba left
[22:34] *** chloekek left
[22:35] *** pecastro left
[22:48] *** skids left
[22:59] *** Cabanossi left
[23:10] *** Cabanossi joined
[23:10] *** rbt left
[23:11] *** rbt joined
[23:33] *** leont left
[23:34] *** lucasb left
[23:36] *** kiwi_44 joined
[23:36] *** kiwi_44 left
