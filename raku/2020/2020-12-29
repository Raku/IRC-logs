[00:11] *** chloekek left
[00:12] *** notagoodidea left
[00:30] *** jmchael left
[00:34] *** pecastro left
[00:47] *** frost-lab joined
[00:49] *** melezhik joined
[00:49] <melezhik> vrurg finally I got your example working - http://rakudist.raku.org/sparky/report/RakuPlay-1/8889

[00:49] <melezhik> I had to change owner for a file with code to execute, as your code write to this file )))

[00:50] <melezhik> abit rare case ...

[00:50] <melezhik> I had to change owner for a file with code to execute, as your code write to this file )))

[00:51] <melezhik> .tell vrurg finally I got your example working - http://rakudist.raku.org/sparky/report/RakuPlay-1/8889

[00:51] <tellable6> melezhik, I'll pass your message to vrurg

[00:52] *** melezhik left
[01:13] *** lucasb left
[02:03] *** Doc_Holliwood left
[02:31] *** mowcat left
[02:39] *** leont left
[03:39] *** bisectable6 left
[03:39] *** tellable6 left
[03:39] *** sourceable6 left
[03:39] *** greppable6 left
[03:39] *** coverable6 left
[03:39] *** nativecallable6 left
[03:39] *** notable6 left
[03:39] *** statisfiable6 left
[03:39] *** quotable6 left
[03:39] *** linkable6 left
[03:39] *** bloatable6 left
[03:39] *** squashable6 left
[03:39] *** unicodable6 left
[03:39] *** releasable6 left
[03:39] *** evalable6 left
[03:39] *** benchable6 left
[03:39] *** shareable6 left
[03:39] *** committable6 left
[03:40] *** benchable6 joined
[03:40] *** linkable6 joined
[03:40] *** bisectable6 joined
[03:40] *** nativecallable6 joined
[03:40] *** shareable6 joined
[03:40] *** quotable6 joined
[03:40] *** evalable6 joined
[03:40] *** coverable6 joined
[03:41] *** sourceable6 joined
[03:41] *** notable6 joined
[03:41] *** statisfiable6 joined
[03:41] *** bloatable6 joined
[03:41] *** greppable6 joined
[03:41] *** tellable6 joined
[03:41] *** unicodable6 joined
[03:42] *** releasable6 joined
[03:42] *** squashable6 joined
[03:42] *** committable6 joined
[04:06] *** coldpress joined
[04:13] *** BenGoldberg joined
[04:25] *** BenGoldberg left
[04:25] *** Ben_Goldberg joined
[04:25] *** Ben_Goldberg is now known as BenGoldberg

[04:33] *** BenGoldberg left
[04:33] *** BenGoldberg joined
[05:01] *** Doc_Holliwood joined
[05:05] *** sno joined
[05:09] *** kent\n left
[05:26] *** thowe joined
[05:30] *** kent\n joined
[06:01] <thowe> If rakudobrew says it is up to date, am I good to go?  Or should I somehow de-install it and install rakubrew fresh?

[06:02] *** cpan-raku left
[06:02] *** cpan-raku joined
[06:02] *** cpan-raku left
[06:02] *** cpan-raku joined
[06:33] *** jmcgnh left
[06:38] *** jmcgnh joined
[07:05] *** brtastic joined
[07:08] *** parabolize left
[07:17] *** wamba joined
[07:19] *** Doc_Holliwood left
[07:32] *** Sgeo left
[07:38] *** patrickb joined
[07:45] *** sena_kun joined
[07:45] <patrickb> tbowe: rakudobrew still works, but its been renamed to rakubrew. All development happens under the new name. So if you want to be up to date, you need to update. (In short: Remove the rakudobrew hook, then install rakubrew as advertised. If you want to keep your installed versions, you can copy them over from ~/.rakudobrew/versions to ~/.rakubrew/versions. The ~/.rakudobrew folder is then unused and can be removed.)

[07:46] <patrickb> tbowe: Should you encounter any errors in the process, please do speak up / create an issue.

[07:47] <patrickb> Have to leave. o/

[07:47] *** patrickb left
[07:56] *** Altai-man joined
[07:58] *** jmerelo joined
[07:59] *** sena_kun left
[08:13] <Geth> ¬¶ doc: 1b7a16a365 | (JJ Merelo)++ | doc/Type/IO/Handle.pod6

[08:13] <Geth> ¬¶ doc: Adds indexing, and also makes small changes

[08:13] <Geth> ¬¶ doc: 

[08:13] <Geth> ¬¶ doc: Mainly after this question in SO https://stackoverflow.com/questions/65483750/how-do-you-do-file-locking-in-raku

[08:13] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1b7a16a365

[08:13] <linkable6> Link: https://docs.raku.org/type/IO::Handle

[08:17] <Geth> ¬¶ doc: 536ec1518d | alanrocker++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/syntax.pod6

[08:17] <Geth> ¬¶ doc: Update syntax.pod6

[08:17] <Geth> ¬¶ doc: 

[08:17] <Geth> ¬¶ doc: Clarify rules about whitespace and bounding characters of multi-line comments.

[08:17] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/536ec1518d

[08:17] <linkable6> Link: https://docs.raku.org/language/syntax

[08:21] *** BenGoldberg left
[08:22] <Geth> ¬¶ doc: 7f8b1f6fc5 | (JJ Merelo)++ | doc/Language/syntax.pod6

[08:22] <Geth> ¬¶ doc: Minor grammar adjustments and reflow

[08:22] <Geth> ¬¶ doc: 

[08:22] <Geth> ¬¶ doc: Also add indexing for Embedded comments.

[08:22] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/7f8b1f6fc5

[08:22] <linkable6> Link: https://docs.raku.org/language/syntax

[08:26] *** Doc_Holliwood joined
[08:52] *** wamba left
[08:53] *** domidumont joined
[09:06] *** Doc_Holliwood left
[09:08] *** sjm_uk joined
[09:13] *** wamba joined
[09:16] *** aluaces joined
[10:08] *** aluaces left
[10:09] *** Doc_Holliwood joined
[10:16] *** aluaces joined
[10:23] *** sjm_uk left
[10:34] *** aborazmeh joined
[10:34] *** aborazmeh left
[10:34] *** aborazmeh joined
[10:34] *** sjm_uk joined
[10:52] * lizmat clickbaits the last one of 2020: https://rakudoweekly.blog/2020/12/28/2020-52-rererevolution/

[11:03] *** aborazmeh left
[11:05] *** Doc_Holliwood left
[11:13] <Geth> ¬¶ old-issue-tracker: JJ self-assigned "Variadic" or "slurpy"? https://github.com/Raku/old-issue-tracker/issues/6451

[11:17] *** brtastic left
[11:21] *** tib joined
[11:36] *** frost-lab left
[11:38] <tib> Hello, 

[11:38] <tib> zef (and raku) can handle the installation of multiples version of a same module simultanously ?

[11:38] *** pecastro joined
[11:39] <tadzik> it should, yes

[11:40] <tib> ok :)

[11:42] <Geth> ¬¶ doc: b06f280118 | (JJ Merelo)++ | doc/Type/Signature.pod6

[11:42] <Geth> ¬¶ doc: Correcting heading and rephrasing

[11:42] <Geth> ¬¶ doc: 

[11:42] <Geth> ¬¶ doc: Refs #3755, Raku/old-issue-tracker#6451

[11:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/b06f280118

[11:42] <Geth> ¬¶ doc: ad7558e1df | (JJ Merelo)++ | 3 files

[11:42] <Geth> ¬¶ doc: Redirecting anchors and clarifying terms

[11:42] <Geth> ¬¶ doc: 

[11:42] <linkable6> Link: https://docs.raku.org/type/Signature

[11:42] <Geth> ¬¶ doc: Closes #3755, closes Raku/old-issue-tracker#6451

[11:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/ad7558e1df

[11:42] <linkable6> DOC#3755 [closed]: https://github.com/Raku/doc/issues/3755 [docs] "Variadic" includes "Slurpy", but it's not the same

[11:54] *** notagoodidea joined
[11:56] <notagoodidea> Can we set a where clause on a optional argument in the signature of a function?

[11:57] <timotimo>  yes, but you need to make sure it lets the default value through as well

[11:57] *** sena_kun joined
[11:58] <notagoodidea> So a default is mandatory :/

[11:59] *** Altai-man left
[12:12] *** jmerelo left
[12:12] <notagoodidea> m: "as foobar" ~~ /:i 'as'\s\w /

[12:12] <camelia> rakudo-moar 94d685d95: ( no output )

[12:12] <notagoodidea> m: say "as foobar" ~~ /:i 'as'\s\w /

[12:12] <camelia> rakudo-moar 94d685d95: OUTPUT: ¬´ÔΩ¢as fÔΩ£‚ê§¬ª

[12:12] <notagoodidea> m: say "as foobar" ~~ /:i 'as'\s\w+ /

[12:12] <camelia> rakudo-moar 94d685d95: OUTPUT: ¬´ÔΩ¢as foobarÔΩ£‚ê§¬ª

[12:33] *** sjm_uk left
[12:34] *** sjm_uk joined
[12:44] <notagoodidea> Does MAIN may accept optional positional argument with a guard clause and a default? It works without the where guard.

[12:46] <notagoodidea> ie : multi sub MAIN ('foo', Str $bar, Str $baz? where /:i 'as:'\w+ / = "lala") {*}

[12:47] *** leont joined
[12:54] <timotimo> here baz isn't a positional, and the default value lso doen't match the where clause

[12:57] *** grondilu left
[12:58] <notagoodidea> mmh, ok I can get that the default value must match the where clause but why bar is not positional? I had the impression that if it is not an option (:$foo), the parameters are positional.

[13:03] <notagoodidea> baz not bar sorry.

[13:05] <timotimo> d'oh

[13:05] <timotimo> seems like i'm too tired to understand words

[13:10] <notagoodidea> Better you tired than me misunderstanding everything I read last night :D

[13:11] <notagoodidea> But the where clause matching the default solved a part of my problem.

[13:23] *** chloekek joined
[13:30] *** bdju left
[13:43] <notagoodidea> When trying to add a slurpy array ( https://pastebin.com/8Sff5a5G ), it won't work without the optional parameters. 

[13:43] <notagoodidea> I am a bit lost for that as default are provided and with parameters it works as intended.

[13:44] <notagoodidea> cli.raku foo lala as:foo in:foo tag1 tag2 works but not when as:foo and/or in:foo are omitted.

[13:45] <timotimo> i think it can't differentiate between "the second positional was omitted and then the slurpy started" based on a where clause failing

[13:50] *** chloekek left
[14:02] *** notagoodidea left
[14:03] *** notagoodidea joined
[14:03] <notagoodidea> timotimo: Ok, I will stop fighting the argument parsing for now :D

[14:05] <timotimo> i think you may have already seen them, but there's more argument parsing libs in the ecosystem, some of them surely very powerful

[14:07] <notagoodidea> Yep, I have seen Getopt::Long and SuperMain (or sounding similar). It was more by curiosity to see how default one worked and its limits. I know that I could get what I want by multiplying multi for each case but it seemed too contrived.

[14:13] *** bdju joined
[14:14] *** Doc_Holliwood joined
[14:15] *** jmchael joined
[14:37] *** wamba left
[14:48] *** BenGoldberg joined
[14:49] *** Sgeo joined
[15:14] *** rindolf joined
[15:15] *** guifa2 joined
[15:15] <guifa2> o/

[15:17] *** aluaces left
[15:28] *** parabolize joined
[15:51] *** domidumont1 joined
[15:55] *** domidumont left
[15:56] *** Altai-man joined
[15:56] <tib> Can we specify "notest" for a specific module in a META6.json ?

[15:59] *** sena_kun left
[16:01] *** domidumont1 left
[16:06] *** BenGoldberg left
[16:08] <leont> Why would you want that?

[16:14] <tib> I want to add a github action on a repository but there is a module that have failing tests

[16:15] <tib> (not yours, you fixed it too fast :P)

[16:15] *** aluaces joined
[16:17] *** aluaces left
[16:17] <tib> I'm currently trying to go with a --force-test but I think it is a bit overkill since it will also ignore all other modules tests

[16:18] *** aluaces joined
[16:23] <leont> Ah, you mean a no-test on a dependency, not on the module itself

[16:26] *** BenGoldberg joined
[16:29] <tib> yes

[16:48] *** notagoodidea left
[16:59] *** monkey_ joined
[17:02] *** squashable6 left
[17:04] *** squashable6 joined
[17:24] <tony-o> why not do a step to install with --no-test prior to building your module

[17:30] <tony-o> .tell patrickb winpass branch was merged - i need a little more time to look at the user-config stuff

[17:31] <tellable6> tony-o, I'll pass your message to patrickb

[17:33] <tib> yup I have done "zef install . --force-test" finally

[17:34] <tony-o> why force the test if you know it's going to fail?

[17:35] <tib> --force-test seems installing anyway, not forcing test, I know it is weird

[17:38] *** guifa2 left
[17:38] <tib> tony-o since I catch you there :) my workaround is related to Data::Dump failure 

[17:39] *** guifa2 joined
[17:39] *** guifa2 left
[17:39] <tony-o> ah

[17:39] <tony-o> sorry, i have so many github alerts i miss them - i will take a look in about an hour

[17:40] <tib> reported here https://github.com/tony-o/perl6-data-dump/issues/36 and probably here also https://github.com/tony-o/perl6-data-dump/issues/35

[17:40] <tib> great, you don't have to be sorry ;)

[17:41] <tib> I have to go, thank you a lot üëç 

[17:49] *** tototwo joined
[17:54] *** tototwo left
[17:59] *** afresh1 left
[18:00] *** afresh1 joined
[18:19] *** patrickb joined
[18:27] *** sjm_uk left
[18:27] *** atroxaper joined
[18:36] *** sena_kun joined
[18:37] *** Altai-man left
[18:49] *** patrickb left
[18:49] *** brtastic joined
[18:51] *** atroxaper left
[18:53] *** guifa2 joined
[18:53] *** guifa2 left
[19:04] *** kst` joined
[19:08] *** kst left
[19:09] <moritz> m: say &1

[19:09] <camelia> rakudo-moar 94d685d95: OUTPUT: ¬´Nil‚ê§¬ª

[19:10] *** monkey_ left
[19:15] *** BenGoldberg left
[19:15] *** Ben_Goldberg joined
[19:15] *** Ben_Goldberg is now known as BenGoldberg

[19:29] *** bdju left
[19:29] *** bdju joined
[19:29] <tony-o> tib: need to massage d:d a little bit - gist changed the way it outputs

[19:37] *** wamba joined
[19:39] *** Kaiepi joined
[19:42] *** xelxebar left
[19:44] *** asymptotically left
[19:44] *** asymptotically joined
[19:45] *** tejr left
[19:47] *** melezhik joined
[19:48] <melezhik> Hi! Does `main` supports shell expansion? - https://github.com/melezhik/sparky/issues/7#issuecomment-752182896

[19:56] *** Altai-man joined
[19:57] *** tejr joined
[19:57] *** xelxebar joined
[19:59] *** sena_kun left
[19:59] *** melezhik left
[20:00] *** cog left
[20:10] *** stoned75 joined
[20:12] <Voldenet> I don't think it does

[20:15] *** wamba left
[20:16] *** schlaftier left
[20:17] *** schlaftier joined
[20:22] *** cpan-raku left
[20:32] *** cpan-raku joined
[20:32] *** cpan-raku left
[20:32] *** cpan-raku joined
[20:33] *** oneeggeach joined
[20:35] *** oneeggeach left
[20:37] *** guifa2 joined
[20:57] *** melezhik joined
[20:59] *** rindolf left
[21:00] *** littlebenlittle joined
[21:02] <littlebenlittle> Is there a way to access the line number of match in a grammar? For example `<bad-match> { die "bad match at $*line" }`

[21:04] <lizmat> hmmm...   grammars *are* code, so maybe you could do some introspection with callframe and then .file / .line on the Code object ?

[21:05] <littlebenlittle> I vaguely remember there being a somewhat canonical way to access it like $/.line, but maybe I dreamed it

[21:13] *** melezhik left
[21:15] <guifa2> littlebenlittle: maybe something like $/.prematch.split("\n").elems ?

[21:16] <guifa2> or actually even just $/prematch.lines.elems 

[21:17] <littlebenlittle> guifa2: That looks like a good way to get the info. Or .lines.elems

[21:19] *** notagoodidea joined
[21:24] *** guifa2 left
[21:25] *** guifa2 joined
[21:27] *** stoned75 left
[21:27] *** Toilie left
[21:27] *** Toilet joined
[21:28] *** spycrab0 left
[21:28] *** peteretep left
[21:28] *** spycrab0 joined
[21:31] *** peteretep joined
[21:32] *** notagoodidea left
[21:32] <MasterDuke> m: say "abc\n123\ndef" ~~ / \d+ { use nqp; nqp::getcomp("Raku").lineof($/.orig(), $/.from()).say; } / # littlebenlittle

[21:32] <camelia> rakudo-moar 94d685d95: OUTPUT: ¬´2‚ê§ÔΩ¢123ÔΩ£‚ê§¬ª

[21:37] *** notagoodidea joined
[21:40] <notagoodidea> I tried to replicate the yes-or-no-p function from Common Lisp and reached : https://pastebin.com/96RNDMS7 . I am looking to improve it (less repetition, better regex)

[21:44] <guifa2> notagoodidea: that reminds me, I finally have things ready to do that in a localized manner with my update to CLDR :D 

[21:45] <notagoodidea> CLDR? Adding localization to it is neat! How have you done that? 

[21:46] <guifa2> CLDR - Unicode's Common Language Data Repository.  One of the data points is a posix y/n.

[21:46] <MasterDuke> notagoodidea: well, trivial changes, but your final line could be just `so $answer ~~ /:i 'yes'|'y' /`

[21:47] <guifa2> use Intl::CLDR; say cldr<en>.posix.messages.nostr; say cldr<en>.posix.messages.yesstr; # no:n, yes:y

[21:48] <notagoodidea> MasterDuke: totally forgot about `so`  ! (And the small operators that coerce types in general tend sto evade my memory)

[21:48] <MasterDuke> and your regexes could be something like `/:i y[es]? | n[o]? /` and then `/:i y[es]?/`

[21:49] <guifa2> say cldr<ar>.posix.messages<nostr yesstr>; # (ŸÑÿß:ŸÑ ŸÜÿπŸÖ:ŸÜ)

[21:51] <MasterDuke> but you also aren't really constraining the rest of the contents of the answer, so the logic as written could be just `$answer.lc.contains('y' | 'n')`

[21:58] *** broquaint left
[22:01] *** Altai-man left
[22:01] *** broquaint joined
[22:02] <notagoodidea> MasterDuke: hum, to constraint it, it will be /:i ^(y[es]?|n[o]?)$ / ?

[22:03] <MasterDuke> yeah

[22:04] <MasterDuke> TIMTOWTDI of course, `$answer.lc eq 'yes' | 'y' | 'no' | 'n'`

[22:08] <guifa2> or even

[22:09] <guifa2> `$answer.lc eq any <yes y no n>

[22:22] <notagoodidea> If you want to import some functions from another files, you have to use .rakumod and declare it as a module or can you act as a butcher like in python with import?

[22:23] *** wamba joined
[22:24] *** Doc_Holliwood left
[22:26] *** brtastic left
[22:28] *** Ben_Goldberg joined
[22:28] *** BenGoldberg left
[22:29] *** Ben_Goldberg is now known as BenGoldberg

[22:29] <guifa2> I'm not familiar with python, but if you just want to drop in the symbols, you just don't declare your .rakumod as a module

[22:30] <guifa2> see: https://docs.raku.org/language/module-packages#What_happens_if_I_omit_module?

[22:34] <notagoodidea> thanks!

[23:10] <thundergnat> m: my $ans; repeat { $ans = prompt('Y[es] or N[o]') } until $ans ~~ /:i ^ y[es]? | n[o]? $/;

[23:10] <camelia> rakudo-moar eb1eabf6a: OUTPUT: ¬´Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es] or N[o]Y[es‚Ä¶¬ª

[23:11] <thundergnat> oops. should have thought about that

[23:16] <notagoodidea> H√©h√©, yes, I tried that when playing around with repeat and until :D

[23:23] *** Doc_Holliwood joined
[23:34] <thundergnat> It works fine locally, but camelia doesn't do a prompt()  

[23:34] <thundergnat> Well, fakes it actually

