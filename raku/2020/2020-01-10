[00:03] *** don joined
[00:03] *** don is now known as Guest75570

[00:04] <Guest75570> Hello World

[00:06] <Guest75570> p6: say 3;

[00:06] <camelia> rakudo-moar 97e7cdbd5: OUTPUT: «3␤»

[00:07] *** Guest75570 left
[00:12] *** patrickz joined
[00:16] *** patrickb left
[00:17] *** patrickz left
[00:49] *** Xliff left
[01:05] *** silug left
[01:52] *** Altai-man_ joined
[01:55] *** sena_kun left
[02:08] *** ufobat_ joined
[02:12] *** ufobat left
[02:44] *** wildtrees left
[02:48] *** jeffythedragonsl joined
[03:04] *** jeffythedragonsl left
[03:14] *** mahmudov left
[03:38] *** AlexDaniel joined
[03:38] *** AlexDaniel left
[03:38] *** AlexDaniel joined
[03:53] *** guifa2 left
[03:53] *** sena_kun joined
[03:54] *** Altai-man_ left
[03:57] *** guifa2 joined
[03:59] *** guifa2 left
[03:59] *** guifa2 joined
[04:00] *** liubianshi joined
[04:02] <liubianshi> p6: say 3;

[04:02] <camelia> rakudo-moar 97e7cdbd5: OUTPUT: «3␤»

[04:02] <liubianshi> p6: say "";

[04:02] <camelia> rakudo-moar 97e7cdbd5: OUTPUT: «␤»

[04:03] <Voldenet> p6: say "".uniname

[04:03] <camelia> rakudo-moar 97e7cdbd5: OUTPUT: «<private-use-E62B>␤»

[04:03] <Voldenet> huh

[04:05] *** liubianshi left
[04:06] *** guifa2 left
[04:12] *** liubianshi joined
[04:33] *** liubianshi left
[04:44] *** guifa_ joined
[04:45] *** guifa left
[04:45] *** guifa_ is now known as guifa

[05:27] *** Doc_Holliwould left
[05:27] *** Doc_Holliwood left
[05:41] *** abraxxa left
[05:42] *** abraxxa joined
[05:52] *** Altai-man_ joined
[05:55] *** sena_kun left
[06:09] *** jmerelo joined
[06:19] *** liubianshi joined
[06:20] <jmerelo> .tell tbrowder apparently raku-advent.blog is already working, but it redirects to the old address

[06:20] <tellable6> jmerelo, I'll pass your message to tbrowder

[06:21] *** sauvin joined
[06:22] *** sauvin left
[06:39] *** liubianshi left
[06:42] *** sauvin joined
[07:04] *** stoned75 left
[07:05] *** Xliff joined
[07:07] *** Altai-man_ left
[07:32] *** jmerelo left
[07:38] *** wamba joined
[07:53] <no-n> I installed vim-raku with Vundle and it does not seem to be doing any highlighting.

[07:54] <no-n> (for .raku files)

[07:55] <no-n> Not sure if it's doing anything at all, but it is installed.

[07:59] *** domidumont joined
[08:34] *** wamba left
[08:48] *** rindolf joined
[09:33] *** Doc_Holliwood joined
[09:33] *** Doc_Holliwould joined
[10:00] *** wamba joined
[10:14] *** kensanata joined
[10:17] *** wamba left
[10:35] *** wamba joined
[10:43] *** kensanata left
[10:50] *** patrickb joined
[11:01] *** mojca left
[11:03] *** mojca joined
[11:24] *** mojca left
[11:26] *** mojca joined
[11:29] *** Merfont left
[11:30] <AlexDaniel> no-n: maybe .raku extension is not supported yet?

[11:30] *** Merfont joined
[11:32] *** Merfont left
[11:37] <moritz> no-n: you can do things like try :set filetype=raku

[11:37] <moritz> :syntax on

[11:51] *** Doc_Holliwould left
[11:51] *** Doc_Holliwood left
[11:51] *** Doc_Holliwood joined
[11:51] *** Doc_Holliwould joined
[11:57] *** sena_kun joined
[12:22] *** wamba left
[12:58] *** phogg joined
[12:59] *** phogg left
[12:59] *** phogg joined
[13:14] *** wamba joined
[13:33] *** shred_alert joined
[13:39] *** Voldenet left
[13:43] *** Voldenet joined
[13:43] *** Voldenet left
[13:43] *** Voldenet joined
[13:53] *** Altai-man_ joined
[13:54] *** wamba left
[13:55] *** sena_kun left
[13:56] *** lucasb joined
[14:07] *** Doc_Holliwood left
[14:07] *** Doc_Holliwould left
[14:23] *** Tirifto joined
[14:23] *** Doc_Holliwould joined
[14:23] *** Doc_Holliwood joined
[14:24] *** patrickb left
[14:25] *** Guest78373 left
[14:37] *** kktt007 joined
[14:46] <Tirifto> lizmat: I think I get how your mixin example works now, but I’ll probably get a class for my use case, since I’m not sure that ‘:=’ being a compile time operator wouldn’t be a problem. And I also noticed something else in regard to the operator…

[14:46] <Tirifto> p6: class A {has $.msg is rw = “Meow!”};   role R {method msg () {callsame}};   my $a := A.new;   my $b := $a but R;   $b.msg.say;   $a.msg = “Woof!”;   $b.msg.say;

[14:46] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «Meow!␤Meow!␤»

[14:49] <jnthn> `but` works on a copy; try `does` instead

[14:51] <Tirifto> p6: class A {has $.msg is rw = “Meow!”};   role R {method msg () {callsame}};   my $a := A.new;   my $b does R := $a;   $b.msg.say;   $a.msg = “Woof!”;   $b.msg.say;

[14:51] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «Meow!␤Woof!␤»

[14:54] <Tirifto> jnthn: Does ‘my $b := $a but R;’ bind $b to a copy of $a which does R, basically?

[14:55] <jnthn> It's like `my $b := $a.clone does R;`

[14:56] <jnthn> It really changes the type of the object

[14:57] <Tirifto> Ah, I guess I got the wrong idea about precedence at first.

[14:58] <jnthn> Ah, yes; does and but bind tigheter than :=

[14:58] <Tirifto> (I was thinking $b would refer to $a and just get enriched with methods, but it makes sense that the ‘but’ would apply to $a and return something for $b to get bound to…)

[15:00] <Tirifto> Thank you jnthn!

[15:00] *** guifa2 joined
[15:01] *** holyghost joined
[15:25] *** Ulti joined
[15:33] <Ulti> so I just had a bit of a thought experiment on how one might think about Python context managers in Raku... and I suspect there is a hidden phaser GIVEN_ENTER and GIVEN_LEAVE on a class definition 

[15:34] <Ulti> thats sort of where one might hang it without essentially reimplementing given with some special method names similar to Python

[15:37] *** abraxxa left
[15:47] *** guifa2 left
[15:53] *** sena_kun joined
[15:55] <Xliff> m: my @a = flat('a'..'z', 'A'..'Z', 0..9, '_'); @a.roll(20).say

[15:55] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «(6 2 r 2 n A S 0 z q X I p U t W k h C 0)␤»

[15:55] <Xliff> m: my @a = flat('a'..'z', 'A'..'Z', 0..9, '_'); @a.roll(20).join.say

[15:55] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «r4tdOpEpHU6n2hH1loPs␤»

[15:55] <Xliff> m: my @a = flat('a'..'z', 'A'..'Z', 0..9, '_'); @a.roll(20).join.say

[15:55] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «5xrW_64rgd2x_XhlCZpy␤»

[15:55] <Xliff> m: my @a = flat('a'..'z', 'A'..'Z', 0..9, '_'); @a.roll(20).join.say

[15:55] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «uFMPs44384Gsg31Q_Jd2␤»

[15:55] <Xliff> m: my @a = flat('a'..'z', 'A'..'Z', 0..9, '_'); @a.roll(20).join.say

[15:55] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «6bRYAKhRC4tX2RAF6_aj␤»

[15:55] *** Altai-man_ left
[16:00] *** Guest78373 joined
[16:05] *** Tirifto left
[16:06] *** MasterDuke joined
[16:06] *** kktt007 left
[16:16] *** tadzik[m]1 joined
[16:16] *** mensvaga joined
[17:04] *** domidumont left
[17:24] *** cpan-raku left
[17:25] *** cpan-raku joined
[17:25] *** cpan-raku left
[17:25] *** cpan-raku joined
[17:36] *** domidumont joined
[17:46] *** mahmudov joined
[17:53] *** Altai-man_ joined
[17:55] *** sena_kun left
[18:20] *** rbt joined
[18:21] *** pedr0 joined
[18:29] <pedr0> Hi there, I am struggling in defining a simple grammar which given the token "one two three" for instance, parse the token and take the appropriate actions to print "1 2 3"

[18:29] <Altai-man_> pedr0, hi! Can you provide an example of your grammar so we could help to tweak it?

[18:30] <pedr0> https://pastebin.com/Cmjbx9SB

[18:30] *** lil joined
[18:30] <pedr0> I am used to Flex/Bisont/C but I must admit I am pretty new to perl

[18:30] <lil> hello

[18:30] <pedr0> so do not be surprised if it seems completely unreasoable

[18:31] <pedr0> how do I make the token "ONE" return the numerical value 1 and how do I make use of it >

[18:31] <pedr0> ?

[18:32] <Altai-man_> pedr0, 1)rules (tokens regexes as well) are different from tokens in flex/bison, in a way they are not literal, but regexes as well

[18:32] <Altai-man_> and thus you need to call them as well

[18:32] <Altai-man_> pedr0, to translate your tree into something else you want to use a thing called "actions"

[18:32] <Altai-man_> pedr0, have you read https://docs.perl6.org/language/grammar_tutorial ?

[18:33] <Altai-man_> lil, hi!

[18:33] <pedr0> wait I just realized I sent you the half backed example

[18:34] <pedr0> https://pastebin.com/caDkDJhw

[18:34] <pedr0> there should be actions there

[18:35] <Altai-man_> pedr0, I believe you are assuming flex/bison syntax, but it is very different from raku grammars. I'd recommend you to read the tutorial I linked.

[18:35] <pedr0> sorry about that - I had to strip off some bits from the original file

[18:37] <pedr0> https://docs.perl6.org/language/grammar_tutorial#Grammars_by_example_with_actions

[18:37] <pedr0> go at the bottom to that web page and you will find something similar to what I am trying to do, I am not a complete fool ! LoL

[18:38] <lil> When I tried to translate all the file extensions in the cro project to .raku, my files were no longer “located”. I changed the database file back to .pm6 and it became located again. Meta6 file changed. To repeat the error, you need to write cro run. Repository https://github.com/Lenin1917/rakunews

[18:38] <Altai-man_> pedr0, sure, the task is reasonable, I mean the syntax is wrong. Something that you want will be, let me see...

[18:38] <lil> can i fix this problem?

[18:39] <Altai-man_> lil, new extensions are not yet supported _everywhere_ and so there is a transition period taking action. it is not really recommended to jump into new extensions unless you 100% know what you're doing.

[18:40] <lil> ((

[18:40] <Altai-man_> lil, also, a working extension for raku module is rakumod, while .raku is for scripts.

[18:40] <Altai-man_> lil, so it is worth trying out if with rakumod you'll have more success. ;)

[18:41] <Altai-man_> lil, by the way, I don't see META6.json in your repo at all, which is... odd to see. kind of valid, but odd.

[18:42] <lil> yay!! it`s works!

[18:43] <pedr0> I think I am getting completely wrong the action

[18:43] <Altai-man_> m: grammar Number { token TOP { <scalar> }; token scalar { 'one' | 'two' } }; class Actions { method TOP($/) { make $<scalar>.made; }; method scalar($/) { with $/.Str { when 'one' { make 1 }; when 'two' { make 2 }; } } }; Number.parse('one', actions => Actions).say;

[18:43] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «｢one｣␤ scalar => ｢one｣␤»

[18:44] <Altai-man_> m: grammar Number { token TOP { <scalar> }; token scalar { 'one' | 'two' } }; class Actions { method TOP($/) { make $<scalar>.made; }; method scalar($/) { with $/.Str { when 'one' { make 1 }; when 'two' { make 2 }; } } }; Number.parse('one', actions => Actions).made.say;

[18:44] <camelia> rakudo-moar 73e98a6c8: OUTPUT: «1␤»

[18:44] <Altai-man_> pedr0, ^ this is a simplified solution for what you want to do

[18:44] <Altai-man_> lil, \o/

[18:44] <lil> altai-man_ thats why Meta6 in rakunews directory

[18:45] <pedr0> thanks A LOT - let me try to put my head there

[18:46] <Altai-man_> lil, oh, I am silly, sorry. was also thinking "and there are no service file nor .cro.yml, odd but ok" and somehow didn't notice there is a subdirectory just for this stuff. :)

[18:46] <Altai-man_> maybe because I usually put keep the website repo flat, but that's a matter of preference

[18:47] <Altai-man_> s/put//

[18:53] <pedr0> is it supposed to work if I "inline" the actions in the tokens' definition ?

[18:53] <pedr0> without having to define another class for actions

[18:54] <Altai-man_> pedr0, no, it isn't

[18:54] <Altai-man_> that's the difference that confused you, I guess

[18:54] <pedr0> Yeah, am I getting the tutorial completely wrong then ? The last part uses those stuff 

[18:55] <Altai-man_> grammars are used simply as a quck way to create parsers which produce parsing trees

[18:55] <Altai-man_> pedr0, where? In "Grammars by example with actions" section you linked to both grammar and an actions class are used

[18:55] <Altai-man_> nothing is inlined there

[18:56] <pedr0> the bottom of this link

[18:56] <pedr0> https://docs.perl6.org/language/grammar_tutorial#___top

[18:56] <pedr0> are those inlined actions ?

[18:58] <Altai-man_> pedr0, I see what you mean... indeed, it is possible, but so rare I didn't know about this after a couple of years of active raku usage. :S

[18:59] <Altai-man_> sorry for the confusion

[18:59] <Altai-man_> then something like this:

[19:00] *** lil left
[19:00] <Altai-man_> m: grammar Number { token TOP { <scalar> { make $<scalar>.made } }; token scalar { 'one' | 'two' { make $/.Str eq 'one' ?? 1 !! 2 } } }; class Actions { method TOP($/) { make $<scalar>.made; }; Number.parse('one').say;

[19:00] <camelia> rakudo-moar 272b658af: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3calar>.made; }; Number.parse('one').say;7⏏5<EOL>␤»

[19:00] <Altai-man_> m: grammar Number { token TOP { <scalar> { make $<scalar>.made } }; token scalar { 'one' | 'two' { make $/.Str eq 'one' ?? 1 !! 2 } } }; Number.parse('one').say;

[19:00] <camelia> rakudo-moar 272b658af: OUTPUT: «｢one｣␤ scalar => ｢one｣␤»

[19:00] <Altai-man_> m: grammar Number { token TOP { <scalar> { make $<scalar>.made } }; token scalar { 'one' | 'two' { make ($/.Str eq 'one' ?? 1 !! 2) } } }; Number.parse('one').say;

[19:00] <camelia> rakudo-moar 272b658af: OUTPUT: «｢one｣␤ scalar => ｢one｣␤»

[19:01] <Altai-man_> hmmm

[19:02] <pedr0> I am better off with a different class I reckon

[19:02] <pedr0> overall ... it is better coding I think, as it could be too concise otherwise

[19:03] <Altai-man_> yes, I'd suggest that. The thing is that it is much cleaner this way to separate the format and the translation.

[19:03] <Altai-man_> and if your grammar is not really tiny, it'll become big and hard to comprehend fast

[19:03] <pedr0> yeah

[19:03] <pedr0> I see

[19:04] <pedr0> Another thing if I can is

[19:04] <pedr0> let's suppose I have the production

[19:04] <pedr0> TOP -> SCALAR | SCALAR SCALAR

[19:04] <pedr0> how do I account for that in the action method ?

[19:04] <shred_alert> Isn't it just less work to learn how to use a parser generator, when grammars get really big?

[19:04] <pedr0> that's a parser generator I suppose

[19:05] <pedr0> do I need to check for the number of arguments "by hand" within the action's method ?

[19:05] <Altai-man_> m: grammar Number { token TOP { <scalar> { make $<scalar>.made } }; token scalar { [ 'one' | 'two' ] { make ($/.Str eq 'one' ?? 1 !! 2) } } }; Number.parse('two').made.say;

[19:05] <camelia> rakudo-moar 272b658af: OUTPUT: «2␤»

[19:05] <Altai-man_> m: grammar Number { token TOP { <scalar> { make $<scalar>.made } }; token scalar { [ 'one' | 'two' ] { make ($/.Str eq 'one' ?? 1 !! 2) } } }; Number.parse('one').made.say;

[19:05] <camelia> rakudo-moar 272b658af: OUTPUT: «1␤»

[19:05] <Altai-man_> made inlined actions work. \o/

[19:06] <Altai-man_> pedr0, the second branch won't be executed, since the first one always match it

[19:06] <Altai-man_> no?

[19:07] <pedr0> sorry, I owe you an apology - very silly example

[19:07] <Altai-man_> shred_alert, it depends on number of things

[19:07] <pedr0> SCALAR -> TOKEN0 | TOKENX TOKENY

[19:08] <pedr0> method SCALAR($/) { do I need to check the number of paramters to understand the production I've been called from ? }

[19:08] <Altai-man_> pedr0, ok, so in a method in actions for the rule you get the `$/` variable and you can access parts of this rule by either index ($/[0], $/[1] etc, or shortcuts $0, $1 etc) or a name if it is a named capture

[19:08] <Altai-man_> so you can check if the named capture is present and if yes, it's one branch, otherwise - another one

[19:09] <Altai-man_> like...

[19:10] <Altai-man_> m: my regex foo-or-bar { $<foo>='foo' | $<bar>='bar' }; my $match = 'foo' ~~ /<foo-or-bar>/; say $match

[19:10] *** rbt left
[19:10] <camelia> rakudo-moar 272b658af: OUTPUT: «｢foo｣␤ foo-or-bar => ｢foo｣␤  foo => ｢foo｣␤»

[19:10] *** rbt joined
[19:11] <Altai-man_> m: my regex foo-or-bar { $<foo>='foo' | $<bar>='bar' }; my $match = 'foo' ~~ /<foo-or-bar>/; with $match<foo> { say "Foo was matched!" } orwith $match<bar> { say "Bar was matched!" }

[19:11] <camelia> rakudo-moar 272b658af: ( no output )

[19:11] <Altai-man_> oops

[19:11] <shred_alert> "Token methods are faster than regex methods and ignore whitespace." Wouldn't it be a nice addition to say 'tokens don't backtrack'?

[19:12] <Altai-man_> m: my regex foo-or-bar { $<foo>='foo' | $<bar>='bar' }; my $match = 'foo' ~~ /<foo-or-bar>/; with $match<foo-or-bar><foo> { say "Foo was matched!" } orwith $match<foo-or-bar><bar> { say "Bar was matched!" }

[19:12] <camelia> rakudo-moar 272b658af: OUTPUT: «Foo was matched!␤»

[19:12] <Altai-man_> pedr0, ^

[19:12] <pedr0> I see

[19:12] <shred_alert> I feel like that would clear up a lot. Say tokens don't backtrack and are lazy regexes.

[19:13] <pedr0> great

[19:13] <pedr0> thanks a lot indeed

[19:13] <Altai-man_> shred_alert, "tokens do not backtrack" is mentioned clearly at https://docs.perl6.org/language/grammars#Named_Regexes

[19:15] <shred_alert> Oh. I was just talking about the grammar tutorial

[19:15] <shred_alert> :P

[19:15] <shred_alert> Sorry

[19:15] <shred_alert> Should have been more clear

[19:16] <Altai-man_> shred_alert, well, you can't mention all the info everywhere so that it'd be accessible everywhere, so a line should be drawn somewhere...

[19:16] <shred_alert> It's just one tiny line though. I feel it would really add to the tutorial.

[19:17] <shred_alert> And it's a pretty important detail.

[19:17] <Altai-man_> shred_alert, can't argue with that. do you want to write it up or file a ticket?

[19:17] <shred_alert> I can submit something on GitHub after dinner.

[19:18] <Altai-man_> ++shred_alert

[19:18] <Altai-man_> thanks!

[19:18] <shred_alert> No worries :)

[19:21] <shred_alert> How does "They don't backtrack. They give up after the first possible match." sound?

[19:23] <pedr0> last one ;)

[19:23] <pedr0> what if I want to return the value of an operation

[19:23] <pedr0> can I write 

[19:23] <pedr0> make $<ONE> * $<TWO>

[19:24] <pedr0> to return the product of two tokens

[19:24] <pedr0> I meant 

[19:24] <pedr0> make $<ONE>.made * $<TWO>.made

[19:24] <Altai-man_> pedr0, you can write that

[19:26] *** sauvin left
[19:38] *** domidumont left
[19:52] * guifa thinks he’s got the strongly typed Raku doc draft mostly done.

[19:52] <guifa> Any thoughts?  Am I missing anything or need any extra examples?  https://gist.github.com/alabamenhu/3877fa665012e24ce74495d1661f69f9

[19:54] *** sena_kun joined
[19:55] *** Altai-man_ left
[20:02] <lizmat> guifaL could you give a use case for a parameterizable Pair ?

[20:07] *** pedr0 left
[20:09] <guifa> lizmat: not off the top of my head.  In the example, I was thinking I could do something like

[20:09] <guifa> *%hash where .pairs.all ~~ Pair[Value,Key]

[20:12] <guifa> Aha!  I found one

[20:12] *** sarna left
[20:13] <guifa> Well, maybe

[20:14] <guifa> It seems the error oddly holds even for hash assignment

[20:15] <guifa> p6: my Associative[Str,Int] $foo = Hash[Str,Int].new(a => 1)

[20:15] <camelia> rakudo-moar 272b658af: OUTPUT: «Type check failed in assignment to $foo; expected Associative[Str,Int] but got Hash[Str,Int] ($(my Str %{Int}))␤  in block <unit> at <tmp> line 1␤␤»

[20:16] <guifa> but that’s not a problem for positional

[20:16] <guifa> p6: my Positional[Str] $foo = Array[Str].new("a","b")

[20:16] <camelia> rakudo-moar 272b658af: ( no output )

[20:16] <lizmat> guifa: the Associative role in core carries this comment:

[20:17] <lizmat> # These methods must be implemented by any object performing the Associative role.  The reason this is not actually activated, is that there are some  chicken-and-egg issues with building the core if we do.

[20:17] <lizmat> i think that's the reason Associative vs Hash doesn't work

[20:18] *** sarna joined
[20:19] <guifa> I can’t imagine people using that one too often, thankfully.  I tried to cover the most common use cases and gotchas (and I hope my slurpy section scared people away from using them haha)

[20:19] <guifa> Oh, this works, though, maybe I’ll mention it somewhere

[20:19] <guifa> p6: my Associative[Str,Int] $foo = Hash.new(a => 1) does Associative[Str,Int];  say $foo.WHAT

[20:19] <camelia> rakudo-moar 272b658af: OUTPUT: «(Hash+{Associative[Str,Int]})␤»

[20:20] <guifa> There’s no problem doubling it up, with Hash[Str,Int] does Associative[Str,Int], so it can type match both levels

[20:30] *** hacktor joined
[20:30] <Geth> ¦ doc: alexandrianlibrarian++ created pull request #3153: Add note that token methods don't backtrack and what that means.This …

[20:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3153

[20:32] *** mahmudov left
[20:32] <shred_alert> Oh cool

[20:32] <shred_alert> Git activity shows up here

[20:33] *** mahmudov joined
[20:34] *** mahmudov left
[20:36] *** mahmudov joined
[20:40] <lizmat> AlexDaniel: RT#128092 is NOT in the mapping gist, but RT redirects it to 5252  

[20:41] <lizmat> that ticket is referenced in Stringy

[20:48] <lizmat> same for 128318 redirecting to 4999 (which is 127168 in RT)

[20:51] <cpan-raku> New module released to CPAN! Gnome::GObject (0.15.9) by 03MARTIMM

[20:52] *** hacktor left
[20:55] <Geth> ¦ doc: facd93dcbb | alexandrianlibrarian++ | doc/Language/grammar_tutorial.pod6

[20:55] <Geth> ¦ doc: Add note that token methods don't backtrack and what that means.This should be helpful to newcomers.

[20:55] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/facd93dcbb

[20:55] <Geth> ¦ doc: f5b7405db7 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[20:55] <Geth> ¦ doc: Merge pull request #3153 from alexandrianlibrarian/master

[20:55] <Geth> ¦ doc: 

[20:55] <Geth> ¦ doc: Add note that token methods don't backtrack and what that means.This …

[20:55] <Geth> ¦ doc: Thanks!

[20:55] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f5b7405db7

[20:56] *** wamba joined
[20:59] <AlexDaniel> lizmat: I have a feeling that it's a merged ticket

[21:00] <lizmat> ahhh... ok, so you're saying the redirect is correct ?

[21:00] <AlexDaniel> lizmat: yeah, the redirect itself is correct: https://rt-archive.perl.org/perl6/Ticket/Display.html?id=127951

[21:00] *** mahmudov left
[21:01] <lizmat> ok, I'll take those in the second round: I'm going through the setting replacing all RT references to new URLs now

[21:01] <AlexDaniel> is there a need to do that?

[21:02] <lizmat> yes, because RT will not stay around indefinitely

[21:02] <AlexDaniel> hmm

[21:02] <lizmat> so those references need to be updated

[21:02] <AlexDaniel> but maybe delay it for a bit?

[21:02] <lizmat> why?

[21:02] <AlexDaniel> or… I don't know

[21:02] <AlexDaniel> thing is, some of these tickets will move

[21:02] <AlexDaniel> for example, some were already moved to raku/doc

[21:02] <cpan-raku> New module released to CPAN! Gnome::Gtk3::Glade (0.8.8.1) by 03MARTIMM

[21:02] <lizmat> well, I'm checking them all now

[21:02] <AlexDaniel> at least the open ones will

[21:03] <lizmat> so if I run into a moved ticket, i'll let you know

[21:03] <lizmat> in any case, RT wouldn't know about a moved ticket anyway, right?

[21:03] <AlexDaniel> it's not an issue, it'll be just one more redirect away

[21:03] <lizmat> does GH redirect moved tickets ?

[21:03] <AlexDaniel> RT will redirect to github and then github will redirect to another repo

[21:03] <lizmat> ok

[21:03] <AlexDaniel> let me find an example…

[21:04] <lizmat> and when RT goes down, we're stuck

[21:04] <lizmat> note the use of "when" gere

[21:04] <lizmat> *here

[21:04] <Grinnz> has anyone said RT will go down?

[21:04] <AlexDaniel> https://rt.perl.org/Ticket/Display.html?id=126459

[21:05] <Grinnz> my understanding was the read-only site would stay up indefinitely

[21:05] *** mahmudov joined
[21:05] <lizmat> Grinnz: no, but I think the chance of RT becoming unavailable is orders of magnitude larger than of GH going down

[21:05] <Grinnz> (I did just update references all over the perl source though)

[21:05] <lizmat> right, which makes sense

[21:06] <lizmat> Grinnz: and why did you do that ?

[21:06] <Grinnz> because new users won't understand what RT is

[21:06] <Grinnz> i updated links, haven't updated casual references yet but i plan on that too

[21:07] <lizmat> right,  :-)

[21:07] <Grinnz> no matter what i update though, links to RT for perl are permanently all over the internet, maybe that's less of a problem for raku

[21:08] <Grinnz> but personally, i'm relying on it being up forever :P

[21:09] <AlexDaniel> lizmat: I guess links to github tickets are better anyway because they're clickable :)

[21:09] <lizmat> indeed  :-)

[21:09] <Grinnz> yes, many integration benefits

[21:10] <AlexDaniel> Grinnz: it's not so much about the integration, we use full links generally

[21:10] <AlexDaniel> Grinnz: https://github.com/perl6/roast/blob/aa4994a7f6b3f6b450a9d231bebd5fba172439b0/MISC/bug-coverage-stress.t#L143

[21:10] <AlexDaniel> compare that to RT references above :)

[21:11] <Grinnz> as you might expect, it's completely inconsistent what is used in perl source ;)

[21:13] *** [Coke] left
[21:26] *** wamba left
[21:26] *** wamba joined
[21:28] <Geth> ¦ ecosystem/JJ-patch-7: 01e95542a1 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[21:28] <Geth> ¦ ecosystem/JJ-patch-7: Adds Array::Shaped::Console

[21:28] <Geth> ¦ ecosystem/JJ-patch-7: 

[21:28] <Geth> ¦ ecosystem/JJ-patch-7: A shaped-array console-rendering function.

[21:28] <Geth> ¦ ecosystem/JJ-patch-7: review: https://github.com/perl6/ecosystem/commit/01e95542a1

[21:28] *** polettixx joined
[21:28] <Geth> ¦ ecosystem: JJ++ created pull request #478: Adds Array::Shaped::Console

[21:28] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/478

[21:35] <Geth> ¦ ecosystem: 01e95542a1 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[21:35] <Geth> ¦ ecosystem: Adds Array::Shaped::Console

[21:35] <Geth> ¦ ecosystem: 

[21:35] <Geth> ¦ ecosystem: A shaped-array console-rendering function.

[21:35] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/01e95542a1

[21:35] <Geth> ¦ ecosystem: 0b1a10b5a4 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[21:35] <Geth> ¦ ecosystem: Merge pull request #478 from perl6/JJ-patch-7

[21:35] <Geth> ¦ ecosystem: 

[21:35] <Geth> ¦ ecosystem: Adds Array::Shaped::Console

[21:35] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0b1a10b5a4

[21:52] *** mensvaga left
[21:55] *** sena_kun left
[22:02] <unclechu> hey, do you know whether distros are going to replace or add a new package called "raku" instead of "perl6"?

[22:03] <unclechu> in nix package database "rakudo" still provides "perl6": https://nixos.org/nixos/packages.html?channel=nixos-19.09&query=raku

[22:03] <unclechu> the same for fedora the distro

[22:05] <Grinnz> the fedora packager is https://fedoraproject.org/wiki/User:Gerd, it would be up to them

[22:05] <Grinnz> or a new packager could help of course

[22:10] <shred_alert> Has the name changed in the rakudo source yet?

[22:16] *** kensanata joined
[22:17] <guifa> Yay!  just sent off my PerlCon proposal. 

[22:41] *** shred_alert left
[22:44] *** patrickb joined
[22:55] *** vrurg_ joined
[22:56] *** vrurg left
[23:04] *** kensanata left
[23:12] *** hacktor joined
[23:30] *** lucasb left
[23:31] *** hacktor left
