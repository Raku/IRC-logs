[00:00] <JustThisGuy> I'll come back tomorrow.

[00:00] *** JustThisGuy left
[00:49] *** mowcat joined
[01:01] *** modula2 joined
[01:01] *** defaultxr left
[01:01] *** modula2 is now known as defaultxr

[01:05] *** lucasb left
[01:05] *** leont left
[01:10] *** pecastro left
[01:29] *** Ben_Goldberg joined
[01:29] *** BenGoldberg left
[01:29] *** Ben_Goldberg is now known as BenGoldberg

[01:34] *** mowcat left
[01:45] *** RaycatWhoDat joined
[01:46] *** BenGoldberg left
[01:46] *** Ben_Goldberg joined
[01:46] *** Ben_Goldberg is now known as BenGoldberg

[01:46] <Xliff> RaycatWhoDat: If you want to write a language compiler that supports regular expressions or grammar like features, you COULD do that. It will be easier when RakuAST is released, however.

[01:47] <Xliff> The only other way to do it would be to build a string piecemeal and execute it with /<$mystring>/

[01:47] <Xliff> Which would then need a MONKEY-SEE-NO-EVAL

[01:48] *** wamba left
[01:51] *** Xliff left
[02:09] *** seanrobert joined
[02:10] *** finsternis joined
[02:32] *** nige left
[02:32] *** nige joined
[02:34] *** cpage_ joined
[02:36] *** cpage left
[02:36] *** cpage_ is now known as cpage

[02:37] *** nige left
[02:37] *** nige joined
[02:42] *** Ekho left
[02:43] *** Ekho joined
[02:43] *** seanrobert left
[02:53] *** xinming left
[02:54] *** xinming joined
[03:13] *** JJAtria[m] left
[03:13] *** CIAvash left
[03:13] *** hobbs left
[03:13] *** Grinnz left
[03:13] *** peteretep left
[03:13] *** kawaii left
[03:13] *** PotatoGim left
[03:15] *** sjm left
[03:16] *** sjm joined
[03:18] *** JJAtria[m] joined
[03:18] *** CIAvash joined
[03:18] *** hobbs joined
[03:18] *** Grinnz joined
[03:18] *** peteretep joined
[03:18] *** kawaii joined
[03:18] *** PotatoGim joined
[04:18] *** benchable6 left
[04:18] *** nativecallable6 left
[04:18] *** sourceable6 left
[04:18] *** evalable6 left
[04:18] *** coverable6 left
[04:18] *** linkable6 left
[04:18] *** tellable6 left
[04:18] *** shareable6 left
[04:18] *** unicodable6 left
[04:18] *** statisfiable6 left
[04:18] *** releasable6 left
[04:18] *** bloatable6 left
[04:18] *** greppable6 left
[04:18] *** committable6 left
[04:18] *** quotable6 left
[04:18] *** notable6 left
[04:18] *** squashable6 left
[04:18] *** bisectable6 left
[04:19] *** sourceable6 joined
[04:20] *** statisfiable6 joined
[04:20] *** releasable6 joined
[04:20] *** notable6 joined
[04:20] *** linkable6 joined
[04:20] *** unicodable6 joined
[04:20] *** bloatable6 joined
[04:20] *** evalable6 joined
[04:20] *** coverable6 joined
[04:20] *** benchable6 joined
[04:21] *** shareable6 joined
[04:21] *** quotable6 joined
[04:21] *** greppable6 joined
[04:21] *** committable6 joined
[04:21] *** tellable6 joined
[04:21] *** nativecallable6 joined
[04:21] *** squashable6 joined
[04:21] *** bisectable6 joined
[04:22] *** nige left
[04:22] *** nige joined
[04:27] *** nige left
[04:27] *** nige joined
[04:42] *** jmchael left
[05:00] *** frost-lab joined
[05:03] *** holli__ left
[05:09] *** seanrobert joined
[05:11] *** frost-lab left
[05:17] *** cpan-raku left
[05:19] *** cpan-raku joined
[05:19] *** cpan-raku left
[05:19] *** cpan-raku joined
[05:20] *** frost-lab joined
[05:31] *** BenGoldberg left
[05:31] *** Ben_Goldberg joined
[05:31] *** Ben_Goldberg is now known as BenGoldberg

[05:47] *** parabolize left
[05:58] *** dataangel left
[05:58] *** dataangel joined
[06:06] *** dataangel left
[06:14] *** Altai-man joined
[06:24] *** Ben_Goldberg joined
[06:24] *** BenGoldberg left
[06:24] *** Ben_Goldberg is now known as BenGoldberg

[06:37] *** nige left
[06:44] <notandinus> is there a search for raku doc?

[06:54] *** xinming left
[06:54] *** xinming joined
[07:04] *** seanrobert left
[07:12] *** BenGoldberg left
[07:51] *** jmerelo joined
[07:51] *** argent0 joined
[07:53] <coldpress> notandinus: the search bar at https://docs.raku.org/ is ok

[08:06] <argent0> Hi, why can't I map with Int as in @input.map(Int) where @input are the lines from a file?

[08:06] <argent0> my @input = List('input'.IO.lines); 

[08:07] <jmerelo> .tell melezhik why did you take your article back to draft? It's scheduled to be published in 36 hours.

[08:07] <tellable6> jmerelo, I'll pass your message to melezhik

[08:07] <jmerelo> argent0: You probably don't need to map to Int

[08:08] <tellable6> 2020-12-04T20:42:00Z #raku <JJAtria[m]> jmerelo: I've saved the post as a draft... I think. Let me know if you need me to do anything else!

[08:08] <jmerelo> .tell jjatria[m] checked it out, it's fine. I'll schedule it.

[08:08] <tellable6> jmerelo, I'll pass your message to JJAtria[m]

[08:08] <jmerelo> m: my @input = <2 3 4>; say @input.map: *+3

[08:08] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «(5 6 7)␤»

[08:08] <jmerelo> argent0: ^^^

[08:08] *** xinming left
[08:09] <argent0> ok, I see

[08:10] *** xinming joined
[08:12] <notandinus> coldpress:  oh i didnt see that because js was disabled

[08:13] <notandinus> yeah that is what i was looking for, thanks

[08:17] *** xinming left
[08:19] *** xinming joined
[08:20] *** Altai-man left
[08:29] *** patrickb joined
[08:29] *** ufobat__ joined
[08:36] <brass> argent0: @input.map(*.Int), or @input>>.Int

[08:39] *** Xliff joined
[08:40] *** holli__ joined
[08:49] *** xinming_ joined
[08:50] <argent0> brass, thanks for the  help

[08:53] *** xinming left
[09:21] <coldpress> Is an anon sub mainly used to define recursive anonymous functions?

[09:23] <argent0> coldpress: could also be used for things like List.first

[09:24] *** sjm_uk joined
[09:26] <coldpress> argent0: sorry, could you elaborate?

[09:27] <argent0> m: (1, 2, 3).first({ $_ == 2});

[09:27] <camelia> rakudo-moar 6c7044ec3: ( no output )

[09:27] <argent0> say (1, 2, 3).first({ $_ == 2});

[09:27] <evalable6> argent0, rakudo-moar 6c7044ec3: OUTPUT: «2␤»

[09:27] <argent0> coldpress: ^^^

[09:27] <argent0> of course you can write (1, 2, 3).first: * == 2;

[09:28] <argent0> I'm new to rakudo BTW (couple of hours)

[09:31] <coldpress> that's just a normal anonymous function, I'm specifically asking for `anon sub` (ctrl+F for it at https://learnxinyminutes.com/docs/raku/)

[09:31] <coldpress> don't worry, I'm new too

[09:33] *** wamba joined
[09:35] <moon-child> coldpress: you can use 'samewith' for anonymous recursive functions

[09:36] <coldpress> moon-child: thanks, there's so much to read, I missed that piece of documentation

[09:41] *** xinming_ left
[09:42] *** xinming_ joined
[09:42] *** nige joined
[09:46] *** xinming_ left
[09:47] *** nige left
[09:47] *** nige joined
[09:47] *** kensanata joined
[09:47] *** xinming_ joined
[09:48] <cpan-raku> New module released to CPAN! Module2Rpm (0.1) by 03WBIKER

[09:49] *** coldpress1 joined
[09:50] <coldpress1> m: (.+1 for $_) for (0..5)

[09:50] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3(.+7⏏051 for $_) for (0..5)␤»

[09:50] <coldpress1> m: ($_+1 for $_) for (0..5)

[09:50] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "+" in expression "$_+1" in sink context (line 1)␤»

[10:02] <coldpress1> sorry, was just wondering whether some operators distribute over nested arrays. So .comb does, but .chr does not

[10:02] <coldpress1> m: say do .comb for (('65','66'),('67','68'))

[10:02] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «((6 5   6 6) (6 7   6 8))␤»

[10:03] <coldpress1> also, + does not distribute

[10:03] <coldpress1> m: say do $_+1 for ((65,66),(67,68));

[10:03] <coldpress1> say do ($_+1 for $_) for ((65,66),(67,68))

[10:03] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «(3 3)␤»

[10:03] <evalable6> coldpress1, rakudo-moar 6c7044ec3: OUTPUT: «((66 67) (68 69))␤»

[10:04] *** BenGoldberg joined
[10:04] *** ufobat__ left
[10:08] *** xinming_ left
[10:10] *** xinming_ joined
[10:11] *** ufobat__ joined
[10:19] *** coldpress1 left
[10:22] *** aborazmeh joined
[10:22] *** aborazmeh left
[10:22] *** aborazmeh joined
[10:30] *** Altai-man joined
[10:36] *** sjm left
[10:38] *** BenGoldberg left
[10:42] *** sjm joined
[10:43] <argent0> my raku solution to AOC 2020's day 01. It's "slow" for the second part. https://github.com/argent0/adventOfCode2020/blob/main/raku/day01.raku

[10:47] <argent0> volatilebit's reddit's onliners work at a similar speed: say [*] @input.combinations(3).first: *.sum == 2020;

[10:51] *** pecastro joined
[10:51] <argent0> the issue is that I don't need all combinations. Is there a better way to write my funcion `tails`?

[11:01] <notandinus> what is a good resource for functional / object oriented programming? its too confusing, i'm mixing both 

[11:07] *** nige left
[11:07] *** nige joined
[11:10] <argent0> notandinus: maybe you could try a purely funcional programming language (like haskell) to get an intuitive idea of functional programming. Many languages mix both to certain extent (ex: Python)

[11:11] <argent0> I'm not sure about raku's OO

[11:11] <argent0> I'm 4 hours new

[11:12] *** nige left
[11:12] *** nige joined
[11:14] *** epony left
[11:18] *** sjm_uk left
[11:19] <argent0> Also can a `--> Pair` return type be constrained to be a pair of ints?

[11:27] *** Sgeo left
[11:32] *** nige left
[11:32] *** nige joined
[11:37] *** nige left
[11:37] *** nige joined
[11:38] <MasterDuke> argent0: you should be able to do something like `--> Pair[Int]`. but you'll have explicitly construct the returning pair as that type, a pair which just happens to have two Ints won't work

[11:40] <MasterDuke> for that you'd need to create a subset beforehand and use that. e.g., `subset PairOfInts of Pair where { .key ~~ Int and .value ~~ Int }; <...>; --> PairOfInts`

[11:45] *** ufobat__ left
[11:47] *** sjm left
[11:47] *** sjm joined
[11:51] *** rindolf joined
[11:52] <argent0> MasterDuke: thanks for the help

[11:52] *** nige left
[11:52] *** nige joined
[11:57] *** nige left
[11:57] *** nige joined
[11:57] *** perryprog left
[11:57] *** perryprog joined
[12:03] *** kensanata left
[12:18] <jmerelo> argent0: you can define a Subset of Array of length 2: https://docs.raku.org/type/Array https://docs.raku.org/language/typesystem#index-entry-subset-subset

[12:22] *** sjm left
[12:24] <ggoebel_> ..

[12:24] *** sjm joined
[12:26] *** BenGoldberg joined
[12:29] <ggoebel_> RaycatWhoDat: regarding haskell|raku and compilers/interpreters... Audrey Tang pushed the limitations of haskell while leading the pugs project to implement Perl6(Raku) in haskell. Some of the areas where contributions were made to haskell to support implementing perl6 were: compile-time gradual typing, PatternGuards,  Type Families, Quasi-Quoting, GADTs, Parsec Transformers, Dynamic-linkable binaries and Data Parallelism. You can 

[12:29] <ggoebel_> read about this and other things which go over my head in Audrey's post pugs 2010 write-up: https://pugs.blogs.com/pugs/2010/04/how-to-implement-perl-6-in-10.html

[12:31] *** grep0r joined
[12:31] *** grep0r left
[12:32] <jmerelo> ggoebel_: wow, amazing :-)

[12:37] <tbrowder> lizmat: i'm actively using Astro::Sunrise and have submitted a PR. I would like to enter some issues but can't find where.

[12:37] <tellable6> 2020-12-04T06:32:09Z #raku <jmerelo> tbrowder they're probably OK. Thanks!

[12:39] <tbrowder> Also I would like to work on it to make a usable README and turn it into an mi6 repo if there are no objections.

[12:41] *** sjm left
[12:41] *** sjm joined
[12:49] *** sjm_uk joined
[12:57] *** epony joined
[13:07] *** sena_kun joined
[13:09] *** Altai-man left
[13:14] *** argent0 left
[13:22] *** jmerelo left
[13:39] *** skyl4rk left
[13:49] *** sjm_uk left
[13:53] *** jmchael joined
[14:02] *** epony left
[14:06] *** hal99999 joined
[14:06] *** Black_Ribbon left
[14:08] *** frost-lab left
[14:10] *** kensanata joined
[14:19] *** aborazmeh left
[14:22] *** epony joined
[14:34] *** parabolize joined
[14:53] *** hal99999 left
[14:55] *** hal99999 joined
[15:04] *** Couraxe joined
[15:05] *** Couraxe left
[15:35] *** nige left
[15:35] *** nige joined
[15:37] *** nige left
[15:37] *** nige joined
[15:42] *** sjm_uk joined
[15:46] *** domidumont joined
[15:51] *** wamba left
[15:56] <codesections>  what am I getting wrong in the second line below? 

[15:56] <codesections> m: sub add($a, $b) { $a + $b }; dd my $add1 = -> { add($_, 1) } # This works

[15:56] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «Block $add1 = ->  { #`(Block|85502952) ... }␤»

[15:57] <codesections> m: sub add($a, $b) { $a + $b }; dd my $add1 = add(*, 1)  # This doesn't

[15:57] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in sub add at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:02] <Xliff> Will junctions auto parallelize for large tasks?

[16:03] <Xliff> m: my @a = (40 * rand).Int xx 20000; say 55 == @a.any;

[16:03] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «any(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, Fa…»

[16:03] <Xliff> m: my @a = (40 * rand).Int xx 20000; say so 55 == @a.any

[16:03] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «False␤»

[16:03] <Xliff> m: my @a = (40 * rand).Int xx 20000; say so 55 == @a.any

[16:03] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «False␤»

[16:03] <Xliff> m: my @a = (40 * rand).Int xx 20000; say so 20 == @a.any

[16:03] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «True␤»

[16:03] <Xliff> m: my @a = (40 * rand).Int xx 200000; say so 20 == @a.any

[16:03] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «True␤»

[16:04] <Xliff> m: my @a = (40 * rand).Int xx 200000; say so 20 == @a.any; say now - INIT now

[16:04] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «True␤2.12475912␤»

[16:04] <Xliff> m: my @a = (40 * rand).Int xx 2000000; say so 20 == @a.any; say now - INIT now

[16:04] <Xliff> Ouch

[16:04] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «True␤21.2083994␤»

[16:05] <[Coke]> I don't think they do; you can generate the AST to see if they do, I think.

[16:06] <codesections> Xliff: by "will" do you mean now or in The Future™?  My understanding is that much of the auto-parallel stuff is NYI but still planned

[16:06] <Xliff> m: my @a = (40 * rand).Int xx 2000000; say @a,hyper.grep(* = 20); say now - INIT now

[16:06] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required after keyword 'hyper'␤at <tmp>:1␤------> 3(40 * rand).Int xx 2000000; say @a,hyper7⏏5.grep(* = 20); say now - INIT now␤»

[16:06] <Xliff> m: my @a = (40 * rand).Int xx 2000000; say @a,hyper.grep(* = 20); say now - INIT now

[16:06] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required after keyword 'hyper'␤at <tmp>:1␤------> 3(40 * rand).Int xx 2000000; say @a,hyper7⏏5.grep(* = 20); say now - INIT now␤»

[16:06] <Xliff> m: my @a = (40 * rand).Int xx 2000000; say @a.hyper.grep(* = 20); say now - INIT now

[16:06] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «Cannot modify an immutable Whatever (*)␤  in block <unit> at <tmp> line 1␤␤»

[16:07] <Xliff> m: my @a = (40 * rand).Int xx 2000000; say @a.hyper.grep(* == 20); say now - INIT now

[16:07] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «(20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 2…»

[16:07] <Xliff> m: my @a = (40 * rand).Int xx 2000000; say @a.race.grep(* == 20).elems.say; say now - INIT now

[16:07] <camelia> rakudo-moar 6c7044ec3: OUTPUT: «50394␤True␤5.2824256␤»

[16:07] <Xliff> \o/

[16:14] <Xliff> does .hyper and race default to the number of cores?

[16:14] *** ufobat__ joined
[16:19] <[Coke]> I believe so. checking for docs link

[16:19] <Xliff> codesections: Thanks. I thought that might have been done by now.

[16:19] <[Coke]> hurm. hyper shows defaults to batch64/degree 4

[16:21] <[Coke]> I thought some work had been done to identify the # of cores available, perhaps not plugged in here yet

[16:21] <lizmat> code looks like: max(nqp::cpucores() - 1,1)

[16:22] *** ufobat__ left
[16:23] *** moray joined
[16:23] <codesections> did anyone have thoughts on the whatever-currying syntax question I asked about a few minutes ago, by the way?

[16:23] *** moray is now known as morayj

[16:23] <[Coke]> wonder if defaults for foo.race vs race foo are different.

[16:24] <lizmat> Xliff: Junctions currently do *not* parallellize anytihng

[16:25] <MasterDuke> codesections: i don't have a full explanation for why, but Whatevers can't be used like that

[16:26] <MasterDuke> timotimo or lizmat can probably explain better

[16:27] <lizmat> the docs say: "When * is used in term position, that is, as an operand, in combination with most operators, the compiler will transform the expression into a closure of type WhateverCode, which is actually a Block that can be used wherever Callables are accepted."

[16:28] <lizmat> codesections: the "add" sub is *not* an operator

[16:30] *** wamba joined
[16:30] *** BenGoldberg left
[16:31] <codesections> Oooh, I see.  I thought "in term position" was broader than "as an opperand"; now I get it.  Thanks, lizmat++ 

[16:31] <lizmat> I mean, you can make a "add" candidate that takes a Whatever, and then make that do what you intended

[16:32] <lizmat> but it doesn't happen automagically 

[16:32] *** BenGoldberg joined
[16:35] <codesections> I see; that makes sense (I was thinking of the "transforms the expression" as a literal syntax transform, the way a macro would.  Good to get my misunderstanding cleared up)

[16:37] *** nige left
[16:37] *** nige joined
[16:42] *** nige left
[16:42] *** nige joined
[16:57] *** Xliff left
[17:06] *** Altai-man joined
[17:09] *** sena_kun left
[17:18] *** leont joined
[17:33] *** aborazmeh joined
[17:33] *** aborazmeh left
[17:33] *** aborazmeh joined
[17:37] *** nige left
[17:37] *** nige joined
[17:42] *** nige left
[17:42] *** nige joined
[17:46] *** domidumont left
[17:49] *** jmcgnh left
[17:54] *** cpan-raku left
[17:57] *** cpan-raku joined
[17:57] *** cpan-raku left
[17:57] *** cpan-raku joined
[18:00] *** holli__ left
[18:00] *** jmcgnh joined
[18:13] *** holli__ joined
[18:40] <tbrowder>  l

[18:42] <tbrowder> .ask lizmat can you please fix the raku-community-modules/Astro-Sunrise repo so issues can be filed? i can't see a way to do it so far. but still looking.

[18:42] <tellable6> tbrowder, I'll pass your message to lizmat

[18:43] <lizmat> tbrowder: will look

[18:43] <lizmat> now

[18:45] <lizmat> should be open to issues now

[18:45] <tbrowder> i just found it.

[18:46] <tbrowder> ok, thnx. there's a pr when you get a chance to look. and i'm working on a new pr after that.

[18:51] *** morayj left
[18:51] *** sjm left
[18:55] *** hal99999 left
[19:01] *** hal99999 joined
[19:05] *** pmurias joined
[19:05] <pmurias> hi

[19:05] <tellable6> 2020-08-20T06:44:59Z #raku-dev <patrickb> pmurias If you find the time I'd value your insights on https://github.com/Raku/nqp/issues/656

[19:05] <tellable6> 2020-10-27T01:48:12Z #raku-dev <[Coke]> pmurias there are some js specific opcodes at https://gist.github.com/coke/f87ab505c6cb825db51afcb5cb6a8990 like "attrhintfor" that could use some docs.

[19:05] <tellable6> 2020-10-27T01:52:43Z #raku-dev <[Coke]> pmurias I mean like asyncreadbyte

[19:05] *** sjm joined
[19:05] <lizmat> pmurias o/

[19:06] <pmurias> how have things been going?

[19:09] <pmurias> personally I haven't really touched anything Perl/Raku related in quite a while :/

[19:11] *** JustThisGuy joined
[19:12] *** aborazmeh left
[19:17] <lizmat> pmurias: well, we're in the middle of the Advent posts

[19:17] <lizmat> and quite some exciting projects are going on at the moment

[19:19] <pmurias> ohh, what are the most exciting project?

[19:20] <lizmat> rakuast and newdisp are two very explicit projects

[19:20] <lizmat> there's a bunch of more implicit projects, like the new coercion protocol

[19:20] <lizmat> nine's work on in-process preo-compilation

[19:21] <lizmat> and nwc10's work on getting MoarVM more stable and closer to the metal as in "keep those L1 caches stuffed"  :-)

[19:22] <lizmat> and native shaped array access just became 60x as fast in the past week

[19:22] <lizmat> accessing native arrays about 40% faster

[19:22] <lizmat> I should say: native shaped 1dimensional arrays

[19:23] <lizmat> afk for a few hours&

[19:27] <MasterDuke> pmurias: i made the moarvm source code changes to switch from tommath to gmp (which is much faster) for our biginteger support. only need to figure out a build problem and it should be good to go

[19:28] <Geth> ¦ problem-solving: Altai-man assigned to JJ Issue Documentation search categories are not standartized https://github.com/Raku/problem-solving/issues/250

[19:30] *** pmurias left
[19:32] *** aluaces left
[19:41] *** ggoebel_ left
[19:50] *** argent0 joined
[20:12] <brass> Hey, can I get some help debugging my day 4 part 2 answer? There seems to be something small wrong but I can't figure out what it is

[20:14] <brass> It's probably a typo but it's driving me nuts https://0x0.st/ihom.raku

[20:15] <brass> Apparently my answer is too high 🤔

[20:16] <codesections> brass: I haven't looked at your code, but I can tell you that the "something small" that drove me nuts was not rejecting a field with *too many* digits.  Could that be it?

[20:17] *** Xliff joined
[20:17] <Xliff> What does it mean when code drops out with 'emit without supply or react', when I am not directly using a Supply?

[20:17] <rindolf> lizmat: hi, shavua tov, sup?

[20:17] *** Sgeo joined
[20:17] <Xliff> I *am* however using S*SCHEDULER.cue

[20:18] <Xliff> Also using .race

[20:18] <brass> codesections: I think my regexes are on point, but I can't figure it out... I might have to look at someone else's answer to get a clue :p 

[20:19] <Xliff> And like with most asyncronous code, it's happening intermittently and is resisting my attempts to debug it.

[20:19] <rindolf> lizmat: you probably know that i've been talking with wendy a lot on facebook

[20:21] *** jmcgnh left
[20:21] <codesections> brass: now I *have* looked at your code, and I stand by my earlier guess :D  looks like you have the same bug that drove me crazy for a bit

[20:22] <brass> Oh no haha

[20:22] <codesections> m: say '01234567899999' ~~ / \d ** 9 /;

[20:22] <camelia> rakudo-moar 6f7718cef: OUTPUT: «｢012345678｣␤»

[20:22] <brass> @.@

[20:23] <brass> I fixed it, thanks for your help :)

[20:24] <codesections> happy to :)

[20:26] *** guifa joined
[20:29] <Xliff> What day is this, guys?

[20:29] <codesections> 04 (yesterday)

[20:36] <JustThisGuy> Hi all! I have a couple of questions. I'm trying to do something like this:

[20:36] <JustThisGuy> say '"in quotes"' ~~ / '"' <-[ " ]> * '"'/;

[20:36] <JustThisGuy> From https://docs.raku.org/language/regexes "Enumerated character classes and ranges"

[20:36] <JustThisGuy> But, I want more that one type of quote. Something like this, but this doesn't work:

[20:36] <JustThisGuy>   token attribute_value { <quote> ($<-quote>) $<quote> };

[20:36] *** unclechu left
[20:36] <evalable6> JustThisGuy, rakudo-moar 6f7718cef: OUTPUT: «｢"in quotes"｣␤»

[20:36] <JustThisGuy>   token quote           { <["']> };

[20:36] <JustThisGuy> I found this discussion which is also similar, but it didn't seem to go anywhere: https://github.com/Raku/problem-solving/issues/97.

[20:37] <JustThisGuy> Any answers or alternatives are appreciated!

[20:37] *** AlexDaniel` left
[20:37] *** JJAtria[m] left
[20:37] *** CIAvash left
[20:37] *** matiaslina left
[20:37] *** ThaEwat left
[20:37] *** MitarashiDango[m left
[20:46] *** sjm_uk left
[20:52] *** afresh1 left
[20:53] *** jmcgnh joined
[20:55] *** bigdata joined
[20:59] *** stanrifkin joined
[20:59] <stanrifkin> rakubrew.org offline?

[21:00] *** aluaces joined
[21:00] *** jmcgnh left
[21:02] *** unclechu joined
[21:05] *** ThaEwat joined
[21:06] *** CIAvash joined
[21:06] *** JJAtria[m] joined
[21:07] *** AlexDaniel` joined
[21:07] *** sena_kun joined
[21:09] *** Altai-man left
[21:10] *** matiaslina joined
[21:13] *** nige left
[21:13] *** nige joined
[21:13] *** nige left
[21:14] *** nige joined
[21:14] *** MitarashiDango[m joined
[21:16] *** jmcgnh joined
[21:21] *** Ayoub joined
[21:21] <Ayoub> Hi, How do I report a possible perl6 bug?

[21:24] *** jmcgnh left
[21:25] <Ayoub> The problem is with the shell perl6 routine.

[21:27] <Ayoub> The shell perl6 routine craps up when given binary data as standard output from the system shell.

[21:30] <brass> Ayoub: what do you mean?

[21:31] <Ayoub> I have a C program giving non-text data to its standard output. I am calling it from perl6 using the shell routine.

[21:32] <Ayoub> Perl6 rejects the data saying it is not valid utf8

[21:33] <Xliff> Ayoub: How are you invoking the shell script?

[21:35] *** BenGoldberg left
[21:35] <Ayoub> $proc = shell "./guard --guard $SENTRY_ROOT/tests/ref-data/orig.png" ~ " -o nofile_dummy.out", :out, :err;

[21:38] *** orinthe left
[21:39] *** orinthe joined
[21:45] *** JustThisGuy left
[21:47] <Ayoub> In C++ you tell the IO you are handling binary data but this perl6 routine does not give you the option to deal with binary data.

[21:48] <Ayoub> Or if the option is there it is not obvious from the docs I see.

[22:00] <guifa> The option is normally :bin

[22:03] *** aborazmeh joined
[22:03] *** aborazmeh left
[22:03] *** aborazmeh joined
[22:03] <guifa> https://docs.raku.org/type/Proc#routine_new shows a :bin option, and shell is basically syntactical sugar for making a Proc

[22:07] *** BenGoldberg joined
[22:12] <Ayoub> OK thanks, I will check it out.

[22:14] <guifa> .tell JustThisGuy: honestly, the best way to do that is to use a multi for each type of quote you want to support.  Especially if you later need to handle matching quotes or need to have escape sequences that can complicate things (you can btw pass arguments, so you could do <quote> {} <content: $<quote>> <quote> and let the content bit handle all of your escaping stuff

[22:14] <tellable6> guifa, I'll pass your message to JustThisGuy

[22:15] *** aborazmeh left
[22:28] <Xliff> my @a = ({ a => 1, b => 2, c => 3}, { d => 4, c => 3 a => 2 }); @a[2] = @a[0]; @a[0]<b> *= 2; my $aa = @a[0]; say $aa eqv @a.none

[22:28] <Xliff> m: my @a = ({ a => 1, b => 2, c => 3}, { d => 4, c => 3 a => 2 }); @a[2] = @a[0]; @a[0]<b> *= 2; my $aa = @a[0]; say $aa eqv @a.none

[22:28] <camelia> rakudo-moar 6f7718cef: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 => 1, b => 2, c => 3}, { d => 4, c => 37⏏5 a => 2 }); @a[2] = @a[0]; @a[0]<b> *= 2␤    expecting any of:␤        infix␤        infix stopper␤   …»

[22:28] <Xliff> m: my @a = ({ a => 1, b => 2, c => 3 }, { d => 4, c => 3, a => 2 }); @a[2] = @a[0]; @a[0]<b> *= 2; my $aa = @a[0]; say $aa eqv @a.none

[22:28] <camelia> rakudo-moar 6f7718cef: OUTPUT: «none(True, False, True)␤»

[22:29] *** patrickb left
[22:29] <Xliff> m: my @a = ({ a => 1, b => 2, c => 3 }, { d => 4, c => 3, a => 2 }); @a[2] = @a[0].clone; @a[0]<b> *= 2; my $aa = @a[0]; say $aa eqv @a.none

[22:29] <camelia> rakudo-moar 6f7718cef: OUTPUT: «none(True, False, True)␤»

[22:29] *** kensanata left
[22:29] <Xliff> m: my @a = ({ a => 1, b => 2, c => 3 }, { d => 4, c => 3, a => 2 }); @a[2] = { a => 1, b => 2, c => 3 }; @a[0]<b> *= 2; my $aa = @a[0]; say $aa eqv @a.none

[22:29] <camelia> rakudo-moar 6f7718cef: OUTPUT: «none(True, False, False)␤»

[22:30] <Xliff> m: my @a = ({ a => 1, b => 2, c => 3 }, { d => 4, c => 3, a => 2 }); @a[2] = { a => 1, b => 2, c => 3 }; @a[0]<b> *= 2; my $aa = @a[0]; say ($aa eqv @a.none).so

[22:30] <camelia> rakudo-moar 6f7718cef: OUTPUT: «False␤»

[22:31] *** bigdata left
[22:33] *** jmcgnh joined
[22:36] *** guifa left
[22:38] <stanrifkin> is rakubrew.org down or is it just me?

[22:38] <tadzik> https://downforeveryoneorjustme.com/rakubrew.org

[22:38] <stanrifkin> ok

[22:38] <stanrifkin> just me :(

[22:38] <tadzik> ah, it does respond but the content is clearly missing

[22:38] <tadzik> I get The requested domain is currently not reachable

[22:39] <tadzik> so it's at least down for the two of us :)

[22:39] <stanrifkin> thanks... maybe some maintaining than

[22:44] *** wamba left
[22:51] *** ggoebel_ joined
[22:55] <leont> r: sub MAIN(Int(Str) :$foo) {}

[22:55] <camelia> rakudo-moar cce2fa26e: OUTPUT: «Invocant of method 'Int' must be an object instance of type 'Str', not␤a type object of type 'Str'.  Did you forget a '.new'?␤  in sub MAIN at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:55] <camelia> ..rakudo-jvm 08b449e1a: OUTPUT: «Invocant of method 'Int' must be an object instance of type 'Str', not a type object of type 'Str'.  Did you forget a '.new'?␤  in sub MAIN at <tmp> line 1␤␤»

[22:55] <leont> That doesn't seem like useful behavior

[22:56] <leont> Seems to me like the default should be a type object of the target type, not of the constraint type

[22:56] <cpan-raku> New module released to CPAN! Astro::Sunrise (0.0.2) by 03TBROWDER

[23:01] *** hal99999 left
[23:01] *** sena_kun left
[23:05] <Geth> ¦ ecosystem: 2f216b9dd5 | (Elizabeth Mattijsen)++ | 2 files

[23:05] <Geth> ¦ ecosystem: Tom Browder++ has adopted Astro::Sunrise!  Kudos!

[23:05] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/2f216b9dd5

[23:09] *** afresh1 joined
[23:11] *** stanrifkin left
[23:11] <leont> Filed a bug

[23:38] <Geth> ¦ doc/failure-handled-rw: 3f011d8f1a | (Stoned Elipot)++ | doc/Type/Failure.pod6

[23:38] <Geth> ¦ doc/failure-handled-rw: Failure.handled() is rw

[23:38] <Geth> ¦ doc/failure-handled-rw: review: https://github.com/Raku/doc/commit/3f011d8f1a

[23:38] *** stoned75 joined
[23:38] <Geth> ¦ doc: stoned++ created pull request #3726: Failure.handled() is rw

[23:38] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3726

[23:42] *** jmcgnh left
[23:55] *** stoned75 left
