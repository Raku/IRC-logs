[00:00] *** mahmudov left
[00:01] *** vrurg joined
[00:04] *** lucasb left
[00:10] *** sena_kun joined
[00:11] <cpan-raku> New module released to CPAN! Red (0.1.5) by 03FCO

[00:12] *** Altai-man_ left
[00:19] <cpan-raku> New module released to CPAN! File::Temp (0.0.7) by 03RBT

[00:22] *** wamba left
[00:32] *** snarkyboojum joined
[00:35] *** snarkyboojum_ joined
[00:35] *** snarkyboojum left
[01:35] *** greppable6 left
[01:35] *** bisectable6 left
[01:35] *** coverable6 left
[01:35] *** quotable6 left
[01:35] *** releasable6 left
[01:35] *** sourceable6 left
[01:35] *** bloatable6 left
[01:35] *** reportable6 left
[01:35] *** nativecallable6 left
[01:35] *** benchable6 left
[01:35] *** squashable6 left
[01:35] *** shareable6 left
[01:35] *** notable6 left
[01:35] *** committable6 left
[01:35] *** statisfiable6 left
[01:35] *** unicodable6 left
[01:36] *** squashable6 joined
[01:36] *** reportable6 joined
[01:36] *** notable6 joined
[01:36] *** bisectable6 joined
[01:36] *** unicodable6 joined
[01:37] *** benchable6 joined
[01:37] *** coverable6 joined
[01:37] *** bloatable6 joined
[01:37] *** releasable6 joined
[01:37] *** sourceable6 joined
[01:37] *** quotable6 joined
[01:38] *** committable6 joined
[01:38] *** nativecallable6 joined
[01:38] *** greppable6 joined
[01:38] *** statisfiable6 joined
[01:38] *** shareable6 joined
[02:09] *** Altai-man_ joined
[02:11] *** sena_kun left
[02:28] *** snarkyboojum_ left
[03:15] *** snarkyboojum_ joined
[03:21] *** titsuki joined
[03:50] <cpan-raku> New module released to CPAN! File::Temp (0.0.8) by 03RBT

[03:51] *** dmc00 joined
[04:10] *** sena_kun joined
[04:11] *** Altai-man_ left
[04:12] *** snarkyboojum_ left
[04:12] *** snarkyboojum_ joined
[04:17] *** NODE joined
[04:18] *** snarkyboojum_ left
[04:26] *** NODE left
[04:30] *** NODE joined
[04:42] *** NODE left
[04:45] *** NODE joined
[04:47] *** snarkyboojum_ joined
[05:09] *** Doc_Holliwood left
[05:09] *** Doc_Holliwould left
[05:13] *** lostinfog left
[05:30] *** NODE left
[05:32] *** NODE joined
[05:33] *** NODE left
[05:35] *** NODE joined
[05:49] *** xinming joined
[05:57] *** NODE left
[06:00] *** NODE joined
[06:09] *** Altai-man_ joined
[06:12] *** sena_kun left
[06:12] <Geth> ¦ doc: 9d7121c6ee | (Luis F. Uceta)++ | 2 files

[06:12] <Geth> ¦ doc: Fix some links to Language pages

[06:12] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/9d7121c6ee

[06:12] <Geth> ¦ doc: 4cc4aa5c9d | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[06:12] <Geth> ¦ doc: Merge pull request #3157 from uzluisf/master

[06:12] <Geth> ¦ doc: 

[06:12] <Geth> ¦ doc: Fix some links to Language pages

[06:12] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/4cc4aa5c9d

[06:27] *** jmerelo joined
[06:30] *** NODE left
[06:32] *** xinming left
[06:32] *** NODE joined
[06:50] *** stoned75 left
[06:58] *** domidumont joined
[07:02] <jmerelo> releasable6: status

[07:02] <tellable6> 2020-01-12T18:34:22Z #raku <tbrowder> jmerelo: maybe you can fix that.  but how do we get everyone to the new site without a redirect? make a redirect from old site to new one? the whole thing sounds like a miniature version of  p6 -> raku

[07:02] <releasable6> jmerelo, Next release will happen when it's ready. 1 blocker. 0 out of 438 commits logged

[07:02] <releasable6> jmerelo, Details: https://gist.github.com/c86dcc4346f34f873e49795f378e18fd

[07:09] *** domidumont left
[07:22] *** jmerelo left
[07:39] *** domidumont joined
[07:40] *** xinming joined
[08:10] *** sena_kun joined
[08:12] *** Altai-man_ left
[08:18] *** wamba joined
[08:23] *** xinming left
[08:28] *** domidumont left
[08:33] *** abraxxa joined
[08:33] *** domidumont joined
[08:42] *** scimon joined
[08:44] *** rindolf joined
[08:55] *** shred_alert joined
[09:06] *** Doc_Holliwood joined
[09:06] *** Doc_Holliwould joined
[09:24] *** NODE left
[09:24] * lizmat is looking at mailing list but only gets 500 errors: https://www.nntp.perl.org/group/perl.perl6.users/2020/01/msg7648.html

[09:24] <lizmat> am I the only one?

[09:25] <eater> nope

[09:25] <eater> `MySQL server has gone away`

[09:25] <lizmat> yeah

[09:25] <eater> it's out for a little walk

[09:25] <shred_alert> Good ol MySQL

[09:25] <lizmat> ok, so another part of Perl's infrastructure is showing cracks

[09:26] <lizmat> :-(

[09:26] *** NODE joined
[09:28] *** xinming joined
[09:36] *** rindolf left
[09:42] *** rindolf joined
[09:44] * lizmat will try again in a few hours

[09:55] <El_Che> hi lizmat 

[09:55] <tellable6> 2020-01-07T18:27:36Z #raku <jmerelo> El_Che Hope so, also. If not, the talk would be too short. Raku is not Minimalistic. That's it. (well, not experimental any more, either)

[10:09] *** Altai-man_ joined
[10:12] *** sena_kun left
[10:23] *** shred_alert left
[10:50] *** wamba left
[11:03] *** abraxxa left
[11:03] *** abraxxa joined
[11:07] *** shred_alert joined
[11:23] *** rindolf left
[11:39] *** rindolf joined
[12:09] <Geth> ¦ problem-solving: lizmat assigned to jnthn Issue Add Str.(r)index(@needles) https://github.com/Raku/problem-solving/issues/148

[12:10] *** sena_kun joined
[12:11] *** Altai-man_ left
[12:13] *** wamba joined
[12:24] *** cpan-raku left
[12:25] *** cpan-raku joined
[12:25] *** cpan-raku left
[12:25] *** cpan-raku joined
[12:28] <Doc_Holliwould> Mohammad are you here?

[12:29] <Doc_Holliwould> The weekly challenge is usually very vague, but I can't make sense of this weeks #1

[12:32] <lizmat> yeah, the olympic ring challenge is more about riddle solving, rather than programming it seems

[12:33] <lizmat> @PerlWChallenge on Twitter responds pretty quickly, usually  :-)

[12:44] *** wamba left
[12:48] *** kensanata joined
[13:08] <Doc_Holliwould> am i missing something or is there really no builtin way to find the index of some array element?

[13:09] <tyil> can I make a MAIN argument be Bool or Str?

[13:10] <tyil> I want to be able to specify --foo *or* --foo=value

[13:12] *** snarkyboojum_ left
[13:14] <lizmat> m: say <a b c d e f g>.first("d",:k)

[13:14] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «3␤»

[13:15] <tyil> seems like I can `where * ~~ Bool|Str`

[13:15] <lizmat> Doc_Holliwould   ^^^

[13:15] <scimon> I poked Mohammed about the challenge and got him to update the picture so it's a bit more understandable. 

[13:15] <tellable6> 2020-01-07T17:02:45Z #raku <tobs> scimon: I think this candidate (from the docs) catches the 2 exponent and does floating-point exponentiation which introduces the noise, instead of doing i*i: multi sub infix:<**>(Complex:D \a, Num(Real) \b --> Complex:D)

[13:16] <scimon> List.permutations is your friend :)

[13:17] <Doc_Holliwould> tyil: you can also use multi subs with MAIN

[13:17] <tyil> yes, but then I'd have to duplicate a lot of code in two mains

[13:17] *** lucasb joined
[13:17] <tyil> or split up the current MAIN code into a different sub, and call that twice

[13:17] <scimon> That would be my plan :)

[13:18] <scimon> Or if it's just about fiddling the inputs (like whether you take a list or a comma seperated string) just call MAIN again with the update.

[13:19] <scimon> mutli MAIN( $a ) { MAIN($a.split(",") }; multi MAIN( @a ) { Do stuff here } 

[13:19] <scimon> That kind of thing.

[13:28] <lizmat> Doc_Holliwould: was "say <a b c d e f g>.first("d",:k)" an answer to your question?

[13:28] <Doc_Holliwould> lizmat: ah. yes, tyvm

[13:29] <lizmat> ok, wssn't sure whether it had caught your eye

[13:29] <Doc_Holliwould> it didnt

[13:29] <lizmat> m: say <a b d c d e f d g>.grep("d",:k)

[13:29] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «(2 4 7)␤»

[13:29] <lizmat> same for grep BTW

[13:42] *** jmerelo joined
[13:43] <jmerelo> Just in case you're not in #raku-dev too, the call for projects for students that will participate in Google Summer of Code is open https://perl-foundation-outreach.github.io/gsoc-2020-ideas/

[13:43] <jmerelo> It would be nice to have a good bunch of Raku projects for students to choose.

[13:48] *** jmerelo left
[13:54] *** mensvaga joined
[14:01] *** Kaiepi joined
[14:01] <Kaiepi> releasable6, status

[14:01] <releasable6> Kaiepi, Next release will happen when it's ready. 1 blocker. 0 out of 438 commits logged

[14:01] <releasable6> Kaiepi, Details: https://gist.github.com/f7c6052cdaed81b8d8fb58d287f4a0a9

[14:09] *** Altai-man_ joined
[14:12] *** sena_kun left
[14:17] *** wamba joined
[14:32] *** NODE left
[14:35] *** NODE joined
[14:47] <Geth> ¦ doc: uzluisf++ created pull request #3158: Mention immutability of lists on the List page

[14:47] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3158

[14:53] <uzl[m]> o/ A few days ago I decided to talk myself through the concepts of iterables and iterators (especially those in Raku), and ended up assembling this: https://gitlab.com/snippets/1929111 . It's a bit longish but if anyone could read it and offer some feedback, especially corrections and suggestions for improving it, I'd appreciate it.

[14:56] <lizmat> m: .say for "foobar".comb   # uzl[m] maybe something to mention when you say that Str isn't Iterable ?

[14:56] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «f␤o␤o␤b␤a␤r␤»

[14:58] <lizmat> uzl[m]: s/Usualualy/Usually/

[15:00] <lizmat> uzl[m]: re "because afterwards the method can be called as

[15:00] <lizmat> many times as desired and the same sentinel value will always be returned."

[15:00] <lizmat> practically, that's true of many iterators, but the design is really that once an iterator has produced the IterationEnd sentinel, it should *not* be called anymore

[15:01] <lizmat> any subsequent calls may produce undefined results, or even throw an exception

[15:01] <lizmat> on the one hand, this should make iterators easier to implement

[15:01] <lizmat> otoh, it can make them more difficult to implement  :-)

[15:03] <lizmat> uzl[m]: `while True {` can be written as `loop {`

[15:03] <lizmat> "they’re supposed to return

[15:03] <lizmat> IterationEnd every time pull-one is invoked on them."  this is not the design and the contract at the moment  :-(

[15:05] <lizmat> uzl[m]: note that you can obtain the iterator of any `Seq` if it hasn't been used yet

[15:05] *** shred_alert left
[15:06] <lizmat> uzl[m]: so DNA::iterator can be just: `$!chain.comb.rotor(3).iterator`

[15:07] <lizmat> and actually, you don't need the rotor in that case either, as you can tell .comb you want three chars each time

[15:07] <lizmat> so it could become `$!chain.comb(3).iterator`

[15:08] <lizmat> have to be afk now, will look at the rest later

[15:08] <lizmat> &

[15:08] *** wamba left
[15:09] *** abraxxa left
[15:10] *** abraxxa joined
[15:15] *** veesh_ joined
[15:16] *** veesh left
[15:16] *** veesh_ is now known as veesh

[15:31] <guifa> Is there anyway for a sub to access/modify variables in its calling context?  (à la string parsing or regex)

[15:31] *** [Coke] joined
[15:31] *** [Coke] left
[15:31] *** [Coke] joined
[15:31] <[Coke]> .

[15:34] *** mahmudov joined
[15:52] <tobs> guifa: I don't think so. Every applicable pseudo-package requires the variable to be declared dynamic afaics https://docs.perl6.org/language/packages#Pseudo-packages

[15:52] <tobs> and other than those, I have no idea how to get a handle on the caller's symbols

[15:54] <jnthn> And regex matching setting $/ also follows these rules, and is based on $/ being declared dynamic.

[16:04] * [Coke] hurls https://docs.raku.org/language/packages#Pseudo-packages on behalf of jj.

[16:10] *** sena_kun joined
[16:12] *** wamba joined
[16:12] *** Altai-man_ left
[16:13] <xinming> m: sub a (($a, $b)) { }; &a.signature.perl.say; my $t = -> ($a, $b) { }; $t.signature.perl.say;

[16:13] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «:($ (Any $a, Any $b))␤:($ ($a, $b))␤»

[16:13] <xinming> Anyone ehre knows, Why will there be difference between these 2?

[16:13] <xinming> I thought they were the same.

[16:13] <xinming> espcially, the Any $a     = $a

[16:20] <jnthn> Block arguments take the type Mu by default, whereas Routine ones take the type Any by defaul

[16:20] <jnthn> *default

[16:22] <xinming> Thanks, got it.

[16:23] <xinming> m: sub a ($a, $b) { }; &a.signature.perl.say; my $t = -> $a, $b { }; $t.signature.perl.say;

[16:23] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «:($a, $b)␤:($a, $b)␤»

[16:23] <xinming> does this mean, Mu and Any are the "same"?

[16:24] <jnthn> Hmm, curious

[16:24] <jnthn> m: sub a ($a, $b) { }; say &a.signature.params[9].type

[16:24] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «Nil␤»

[16:24] <jnthn> m: sub a ($a, $b) { }; say &a.signature.params[0].type

[16:24] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «(Any)␤»

[16:25] <jnthn> m: my $t = -> $a, $b { }; say &a.signature.params[0].type

[16:25] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[16:25] <jnthn> m: my $t = -> $a, $b { }; say $t.signature.params[0].type

[16:25] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «(Mu)␤»

[16:25] <jnthn> I guess maybe .perl disregards the difference, maybe depending on what would be the default on the thing the signature applies to

[16:26] <xinming> Ok, got it.

[16:26] <jnthn> m: sub a ($a, Mu $b) { }; say &a.signature.perl

[16:26] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «:($a, Mu $b)␤»

[16:26] <jnthn> m: my $t = -> $a, Any $b { }; say $t.signature.perl

[16:26] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «:($a, Any $b)␤»

[16:26] <jnthn> Yes, it's trying to be helpful :)

[16:33] *** NODE left
[16:35] *** NODE joined
[16:36] *** NODE left
[16:38] *** NODE joined
[16:39] *** NODE left
[16:47] *** NODE joined
[16:48] *** NODE left
[16:51] *** domidumont left
[16:53] *** NODE joined
[16:54] <SmokeMachine> wouldn't that make sense to always say the type?

[16:56] *** NODE left
[16:56] *** melezhik joined
[16:57] <uzl[m]> .tell lizmat Thanks! Aside from the note about being able to get an iterator from a unused Seq, I've included all your suggestions. I also created a Github gist; it should make it easier for you if you wish to leave a comment on there.  gist: https://gist.github.com/uzluisf/6faff852ace828a9d283d9aaa944e76d

[16:57] <tellable6> uzl[m], I'll pass your message to lizmat

[16:58] *** NODE joined
[16:59] *** NODE left
[17:01] *** NODE joined
[17:13] <[Coke]> uzl[m]: There's a "Perl 6" in that gist

[17:14] <[Coke]> not sure if we should do the rename when referring to articles outside of our docs.

[17:16] *** patrickb joined
[17:25] *** shred_alert joined
[17:26] <Doc_Holliwould> why can I have a code block as the generator of a sequence but not as a terminator?

[17:26] <Doc_Holliwould> aka, why doesnt this work: 1, 2, { $_ + 1 } ... { $_ < 42 }

[17:28] *** shred_alert left
[17:29] <scimon> Because the final block has will return True after the first element and stop.

[17:29] <cpan-raku> New module released to CPAN! LibXML (0.2.7) by 03WARRINGD

[17:30] <scimon> m: say (1, 2, { $_ + 1 } ... { $_ > 42 })[0..5]

[17:30] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «(1 2 3 4 5 6)␤»

[17:30] <scimon> m: say (1, 2, { $_ + 1 } ... { $_ > 42 })

[17:30] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43)␤»

[17:31] <Doc_Holliwould> *facepalm*

[17:31] <scimon> :D

[17:31] <scimon> See you later.

[17:32] <Doc_Holliwould> cya

[17:32] *** scimon left
[18:01] *** chloekek joined
[18:05] *** NODE left
[18:07] *** NODE joined
[18:08] *** NODE left
[18:09] *** Altai-man_ joined
[18:10] *** NODE joined
[18:10] <xinming> gather/take is really handy when we need lazy list

[18:12] *** sena_kun left
[18:23] *** wamba left
[18:24] *** wamba joined
[18:28] *** moon-child left
[18:34] *** NODE left
[18:35] *** moon-child joined
[18:37] *** NODE joined
[18:38] *** NODE left
[18:40] *** NODE joined
[18:41] <AlexDaniel> jmerelo: can we start redirecting docs.perl6.org to docs.raku.org? I keep visiting the old site and it annoys me :)

[18:41] <tellable6> AlexDaniel, I'll pass your message to jmerelo

[18:47] *** titsuki left
[18:50] *** NODE left
[18:52] *** NODE joined
[18:56] *** [Coke] left
[18:57] *** [Coke] joined
[18:57] *** [Coke] left
[18:57] *** [Coke] joined
[19:18] <Doc_Holliwould> m: (gather { take 1; take 2; }).map({ .say })

[19:18] <camelia> rakudo-moar 0e9f96ea9: OUTPUT: «1␤2␤»

[19:19] <Doc_Holliwould> xinming: it's handy, yes

[19:19] <Doc_Holliwould> I'd still like to have a do method though

[19:20] *** xinming left
[19:22] *** xinming joined
[19:23] *** sauvin left
[19:37] <cpan-raku> New module released to CPAN! Font::FreeType (0.2.1) by 03WARRINGD

[19:43] <Doc_Holliwould> oh yeah? well, if you know so much why don't you go ahead and post a link to it?

[19:43] <Doc_Holliwould> you bot you

[19:43] <Doc_Holliwould> srsly, that would be handy

[19:44] *** wamba left
[19:44] <Grinnz> i suggested a possible solution the other day but it's a hard problem without knowing where the valid url will necessarily be

[19:45] <Grinnz> the possible solution being an intermediary service you can link to that will eventually apply the correct redirect

[19:45] *** kensanata left
[19:48] *** nebuchadnezzar left
[19:49] *** [Coke] left
[19:50] *** [Coke] joined
[19:50] *** [Coke] left
[19:50] *** [Coke] joined
[19:51] *** nebuchadnezzar joined
[19:52] *** nebuchadnezzar is now known as Guest59309

[19:52] *** Guest59309 is now known as nebuchadnezzar`

[19:53] *** nebuchadnezzar` left
[19:54] *** nebuchad` joined
[19:57] *** nebuchad` is now known as nebuchadnezzar

[20:10] *** sena_kun joined
[20:11] <Doc_Holliwould> https://modules.raku.org/search/?q=Font%3A%3AFreeType would be sufficient for me

[20:12] *** Altai-man_ left
[20:12] <Doc_Holliwould> No guessing involved

[20:12] <Doc_Holliwould> @Grinnz

[20:12] <Grinnz> that works

[20:14] *** Doc_Holliwould is now known as HollisterSmiley

[20:26] *** rbt joined
[20:42] *** stoned75 joined
[20:45] *** wamba joined
[21:00] *** wildtrees joined
[21:13] *** rindolf left
[21:16] *** chloekek left
[21:18] *** melezhik left
[21:26] *** rbt left
[21:27] *** Kaiepi left
[21:28] *** Kaiepi joined
[21:35] *** Kaiepi left
[21:36] *** Kaiepi joined
[21:42] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/01/13/2020-02-important-things/

[21:52] <AlexDaniel> lizmat: btw why is it rindex and not index :end ?

[21:53] <lizmat> I have no idea, that predates my involvement with Raku

[21:54] <AlexDaniel> greppable6: rindex

[21:54] <greppable6> AlexDaniel, 129 lines, 26 modules: https://gist.github.com/4e1096db30cc3dd498c8cf288b58cd2a

[21:55] <AlexDaniel> it is used sometimes, but it isn't extremely popular

[21:55] <AlexDaniel> maybe we can soft deprecate it or something

[21:55] <AlexDaniel> if we're changing the behavior a little bit anyway

[21:56] <lizmat> we're not changing behaviour, we're adding behaviour

[21:56] <lizmat> at least, that's my proposal

[21:58] <AlexDaniel> well, yeah, but :end is also “adding” :)

[21:58] <lizmat> true

[21:58] <lizmat> I'll leave that decision to jnthn   :-)

[21:59] <lizmat> implementation wise, it shouldn't be much of an issue

[21:59] <Grinnz> that reminds me that perl has a rindex and nobody remembers it exists (also probably why raku has it)

[22:00] <Grinnz> or even further back: https://linux.die.net/man/3/rindex

[22:01] <lizmat> and https://modules.raku.org/dist/P5index:cpan:ELIZABETH even provides the Perl semantics in Raku

[22:03] <AlexDaniel> looking at things that can behave from both sides we have: head/tail, first/first(:end), index/rindex, starts-with/ends-with

[22:03] <AlexDaniel> not a lot of stuff so maybe it doesn't have to be consistent

[22:04] <Grinnz> first being the only one with an :end is kind of funny

[22:04] <AlexDaniel> heh, I did know that rindex existed, but I didn't know about indices()

[22:06] <AlexDaniel> Grinnz: not necessarily, to my eye it's rindex that's kinda weird. head/tail and starts-* are sorta like shortcuts so they can exist like this just fine

[22:07] <Grinnz> in perl we can't have a last since last is already a keyword, not sure if it's the same in raku

[22:10] *** Altai-man_ joined
[22:12] *** sena_kun left
[22:12] *** japhb left
[22:22] *** japhb joined
[22:58] <lizmat> the other "side" of .first as .end was not an option, as .end was already taken  :-(

[23:21] *** lucasb left
[23:32] *** llfourn joined
[23:42] *** xinming left
[23:42] *** xinming joined
[23:52] *** bps joined
[23:53] <bps> Tried to install perl6/raku from source using the instructions here: https://www.raku.org/downloads/

[23:53] <bps> Perl6 seemed to install, but got error on zef.

[23:54] <bps> Here's where things seemed to go awry...

[23:54] <bps> ===SORRY!=== Error while compiling /home/bstahlman/rakudo-star-2019.03/home#sources/4166C19B90D62E6DB23143963A5A2C2E658CACB3 (Zef::Distribution)Method 'content' must be implemented by Zef::Distribution because it is required by roles: Distribution.at /home/bstahlman/rakudo-star-2019.03/home#sources/4166C19B90D62E6DB23143963A5A2C2E658CACB3

[23:54] <bps> (Zef::Distribution):5

[23:54] <bps> Any ideas?

[23:56] <bps> After installation completes (with error), the zef binary seems to exist (~/rakudo/share/perl6/site/bin//zef), but attempting to run it, I see the following error:

[23:57] <AlexDaniel> hmmm

[23:57] <bps> bstahlman@bstahlman-HP-EliteBook-840-G2:~/rakudo-star-2019.03$ zef --version===SORRY!=== Error while compiling /home/bstahlman/rakudo-star-2019.03/home#sources/4166C19B90D62E6DB23143963A5A2C2E658CACB3 (Zef::Distribution)Method 'content' must be implemented by Zef::Distribution because it is required by roles: Distribution.at

[23:57] <bps> /home/bstahlman/rakudo-star-2019.03/home#sources/4166C19B90D62E6DB23143963A5A2C2E658CACB3 (Zef::Distribution):5

[23:58] <AlexDaniel> bps: I was able to find this: https://github.com/ugexe/zef/issues/254

[23:58] <AlexDaniel> but I don't know if it's relevant

[23:58] <AlexDaniel> also maybe https://github.com/rakudo/rakudo/issues/2722

