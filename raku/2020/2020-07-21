[00:00] <SmokeMachine> kawaii: https://github.com/FCO/Red/blob/master/t/48-experimental-formater.t

[00:06] *** Altai-man_ joined
[00:08] *** cpage joined
[00:08] *** sena_kun left
[00:13] *** gnufr33dom joined
[00:13] *** markong left
[00:21] *** gnufr33dom left
[00:29] <kawaii> SmokeMachine: I will test this tomorrow morning, thank you! :D

[00:33] *** hungrydonkey joined
[00:34] <SmokeMachine> kawaii: thanks! and if is someone interested to know all experimental features on Red: https://fco.github.io/Red/tutorials/experimental

[00:37] *** oddp left
[00:39] *** guifa joined
[00:50] *** dustinm`_ left
[01:05] <guifa> .tell lizmat OOPS, as per seems the usual, I’m a terrible ecosystem citizen and forgot to add Intl::Timezone to the ecosystem file list.  My bad =/

[01:05] <tellable6> guifa, I'll pass your message to lizmat

[01:07] *** xinming left
[01:08] *** molaf left
[01:09] <Geth_> ¦ ecosystem: alabamenhu++ created pull request #520: Adding Intl::Usertimezone to the list

[01:09] <Geth_> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/520

[01:10] *** xinming joined
[01:16] *** guifa left
[01:17] *** MilkmanDan joined
[01:20] *** hungrydonkey left
[01:21] *** molaf joined
[01:21] *** hungrydonkey joined
[01:23] *** k-man left
[01:25] *** k-man joined
[01:30] *** lucifer_h left
[01:39] *** gnufr33dom joined
[01:42] *** gnufr33dom left
[01:44] *** Petr37 left
[02:07] *** sena_kun joined
[02:08] *** Altai-man_ left
[02:23] *** satori__ left
[02:23] *** reach_satori joined
[02:25] *** domm joined
[02:33] *** hungrydonkey left
[02:34] *** hungrydonkey joined
[02:44] *** cooper joined
[02:47] *** rir joined
[02:51] <rir> 'p6: my $sc = [  [0, 1], ]; $s.elems.say;'

[02:55] <ShimmerFairy> p6: my $sc = [  [0, 1], ]; $s.elems.say; # doesn't work with the surrounding quotes

[02:55] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$s' is not declared␤at <tmp>:1␤------> 3my $sc = [  [0, 1], ]; 7⏏5$s.elems.say; # doesn't work with the su␤»

[02:56] <rir> p6: my $sc = [ [0,1],];

[02:56] <camelia> rakudo-moar 8ca13eb2a: ( no output )

[02:57] <rir> p6: $sc.elems.say;

[02:57] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$sc' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$sc.elems.say;␤»

[02:57] <ShimmerFairy> p6: my $sc = [  [0, 1], ]; $sc.elems.say;

[02:57] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «1␤»

[02:57] <ShimmerFairy> You type $s instead of $sc in that first example

[02:57] *** hungrydonkey left
[02:58] *** hungrydonkey joined
[02:58] <rir> Thanks,  I am getting the desired construct but is there another way to write such an array as a literal?

[03:00] <ShimmerFairy> m: my @sc = [0, 1],; say @sc.perl

[03:00] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «[[0, 1],]␤»

[03:01] <ShimmerFairy> That's a bit shorter, though you may find the trailing comma out in the open a bit weird.

[03:01] <ShimmerFairy> m: my $sc = $[0,1]; say $sc.perl;

[03:01] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «$[0, 1]␤»

[03:01] <ShimmerFairy> m: my $sc = $[[0,1]]; say $sc.perl;

[03:01] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «$[0, 1]␤»

[03:02] <rir> The concern is that .elems  == 1;

[03:03] <ShimmerFairy> oh, in that case

[03:04] <rir> m: my $sc = $[ [0,1] ]; $sc.elems.say;

[03:04] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «2␤»

[03:04] <ShimmerFairy> m: my @sc = 0,1; say @sc.elems;

[03:04] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «2␤»

[03:04] <rir> m: my $sc = $[ [0,1] , ]; $sc.elems.say;

[03:04] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «1␤»

[03:05] <ShimmerFairy> m: my $sc = [0,1]; say $sc.elems;

[03:05] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «2␤»

[03:06] <ShimmerFairy> The problem is that the trailing comma in [ [0,1], ] tells Raku you explicitly want a one-element list.

[03:07] <ShimmerFairy> m: my $sc = [[0,1]]; say $sc.elems;

[03:07] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «2␤»

[03:08] <rir> That is what I want!  But I cannot find it documented;  I.e.:  [[ 0, 1] , ]

[03:09] <ShimmerFairy> This demonstrates trailing comma at the beginning: https://docs.raku.org/language/list

[03:14] <rir> m: say reduce &infix:<->, (10,);

[03:14] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «10␤»

[03:14] <rir> m: say reduce &infix:<->, (10);

[03:14] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «10␤»

[03:15] *** kktt007 left
[03:16] *** kktt007 joined
[03:18] *** codesections left
[03:20] <rir> Thanks ShimmerFairy.  I would not have gotten that a ] is the same as a ) .  

[03:23] <ShimmerFairy> m: say [1,2].perl; say (1,2).perl;

[03:23] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «[1, 2]␤(1, 2)␤»

[03:23] <ShimmerFairy> m: say [1,2].WHAT; say (1,2).WHAT;

[03:23] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «(Array)␤(List)␤»

[03:24] <ShimmerFairy> rir: They do create different objects, but the way they function from a syntax perspective is the same. (An Array is a List you can change by adding or removing elements)

[03:27] <ShimmerFairy> (docs.raku.org will, of course, better explain the differences between the two, but in general Array is a mutable List)

[03:44] *** rir left
[04:06] *** Altai-man_ joined
[04:08] *** sena_kun left
[04:10] *** rindolf joined
[04:22] *** squashable6 left
[04:24] *** squashable6 joined
[04:54] *** cooper left
[05:06] *** kensanata joined
[05:11] *** OpenZen left
[05:30] *** bocaneri joined
[05:36] *** wamba joined
[05:36] *** gordonfish left
[05:37] *** gordonfish joined
[06:07] *** sena_kun joined
[06:08] *** Altai-man_ left
[06:16] *** hungryd13 joined
[06:18] *** hungrydonkey left
[06:25] *** ufobat joined
[06:30] *** _jrjsmrtn joined
[06:31] *** __jrjsmrtn__ left
[06:31] *** dolmen joined
[07:09] *** xinming left
[07:09] <Geth_> ¦ ecosystem: db373c2331 | L'Alabameñu++ (committed using GitHub Web editor) | META.list

[07:09] <Geth_> ¦ ecosystem: Adding Intl::Usertimezone to the list

[07:09] <Geth_> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/db373c2331

[07:09] <Geth_> ¦ ecosystem: a05ce75293 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[07:09] <Geth_> ¦ ecosystem: Merge pull request #520 from alabamenhu/patch-7

[07:09] <Geth_> ¦ ecosystem: 

[07:09] <Geth_> ¦ ecosystem: Adding Intl::Usertimezone to the list

[07:09] <Geth_> ¦ ecosystem: Thanks!

[07:09] <Geth_> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/a05ce75293

[07:09] <cpan-raku> New module released to CPAN! Red (0.1.21) by 03FCO

[07:10] *** rbt left
[07:11] *** rbt joined
[07:12] *** xinming joined
[07:29] *** dustinm` joined
[07:38] *** dakkar joined
[07:43] *** finsternis left
[07:51] *** sno left
[07:58] *** pecastro joined
[08:03] *** xinming left
[08:05] *** aborazmeh joined
[08:05] *** aborazmeh left
[08:05] *** aborazmeh joined
[08:06] *** Altai-man_ joined
[08:06] *** xinming joined
[08:09] *** sena_kun left
[08:22] *** andrzejku joined
[08:23] *** Sgeo left
[08:25] *** leont joined
[08:37] *** oddp joined
[09:06] *** aborazmeh left
[09:26] <El_Che_> a new release? i am on holiday but I will try to start the build thia evening

[09:27] <Altai-man_> Yes. Sorry for the delay.

[09:37] *** rbt left
[09:38] *** xinming left
[09:38] *** rbt joined
[09:38] *** xinming joined
[09:51] *** wamba left
[10:00] *** hungrydonkey joined
[10:01] *** hungryd97 joined
[10:02] *** hungryd13 left
[10:04] *** hungrydonkey left
[10:07] *** sena_kun joined
[10:08] *** Altai-man_ left
[10:16] *** hungrydonkey joined
[10:17] *** hungryd97 left
[10:19] *** hungryd6 joined
[10:23] *** hungrydonkey left
[10:23] *** hungrydonkey joined
[10:25] <El_Che_> .tell Altai-man no sorries, thank you for the release

[10:25] <tellable6> El_Che_, I'll pass your message to Altai-man_

[10:26] <El_Che_> travis is building the linux packages now

[10:27] *** hungryd6 left
[10:29] *** Petr37 joined
[10:36] *** Petr37 left
[10:52] *** molaf left
[10:53] *** dolmen left
[10:53] *** cpan-raku left
[10:56] *** cpan-raku joined
[10:56] *** cpan-raku left
[10:56] *** cpan-raku joined
[10:58] <Altreus> jnthn: in fact it was to *ensure* termination - I wanted to know about errors from the promise, so I had to somehow resolve it

[11:00] *** Black_Ribbon left
[11:01] *** El_Che_ is now known as El_Che

[11:11] *** molaf joined
[11:15] <holyghost> My Escape key is broken on my main develop machine (a portable) so I had to switch from vi/vim to xemacs :o)

[11:16] *** xinming left
[11:18] *** dolmen joined
[11:18] *** dolmen left
[11:18] <jnthn> Altreus: That's also a very valid thing to do, yes :)

[11:18] <holyghost> my main editor on macs was aquamacs with gnus as a news reader, I still remember the keys

[11:18] *** xinming joined
[11:21] <Altreus> :)

[11:30] *** kktt007 left
[11:30] *** kktt007 joined
[11:32] *** codesections joined
[11:40] *** patrickb joined
[11:44] <El_Che> remap the keys?

[11:44] <El_Che> caps locks is a good candidate

[11:49] <raku-bridge> <tmtvl> I think vim has a Control+something-or-other bind to leave insert mode, but I've been using Emacs for long enough that the Vim bindings have left my mind.

[11:52] *** xinming left
[11:53] <holyghost> El_Che : I am slowing down like that and I also have to reprogram the leds ;-)

[11:56] *** xinming joined
[11:57] <holyghost> "When I am on Windows, I use xemacs" :-)

[11:58] *** markong joined
[12:06] *** Altai-man_ joined
[12:08] *** sena_kun left
[12:09] *** finsternis joined
[12:15] *** sno joined
[12:29] <codesections> Control + [ leaves insert mode in Vim.  (in terminal vim, it's not really that it's *bound* to the same function as Esc, it's that it *is* Esc – or, rather, that Esc sends a control-[ key sequence  

[12:33] <rypervenche> I was just typing out the ctrl+[ option (also ctrl+c, although it also does something a bit differently) and then saw codesections's reply ><

[12:36] <holyghost> ok thx

[12:41] <holyghost> problem is I have to change my typing, but a bit of emacsen won't hurt

[12:42] <holyghost> I'd like to program an editor in scheme, I started on one in objc in XCode but lost interest

[12:43] <holyghost> I got "Learning GNU Emacs" (O'Reilly) as a present from my profs

[12:43] <holyghost> goto-char is probbly the best/mot used function

[12:43] <holyghost> *most

[12:44] <holyghost> That way I can hack lisp on several OSes

[12:44] <holyghost> too bad slime.el is broken these days

[12:44] <holyghost> slime was the best lisp mode

[12:45] <kawaii> I have a submodule like `My::Example::Thing` which contains a variable, i.e. `my $test = 'some thing'`, but if I `use My::Example::Thing;` in my script  and then try to call the variable I get `... not defined`, is there a proper way to expose it? I've tried using both `our` and `$GLOBAL::`.

[12:46] <Altai-man_> kawaii, setting it to `our` should just work. Also `is export`.

[12:46] <tellable6> 2020-07-21T10:25:49Z #raku <El_Che_> Altai-man no sorries, thank you for the release

[12:48] <ShimmerFairy> I believe 'our' would expose it as $Name::of::the::Module::test

[12:49] <kawaii> Altai-man_: I tried `my $thing is export = ...` but got errors about expecting constraint 

[12:49] *** aluaces left
[12:50] <Altai-man_> kawaii, `our $foo is export = 42`?

[12:50] <samebchase-> holyghost: you can try sly as well

[12:51] <kawaii> Altai-man_: `wasn't defined` :(

[12:52] <holyghost> samebchase- : ok

[12:52] <holyghost> I'm  bit confused on many or less colors though, lost my .emacs file long ago

[12:52] <holyghost> I had a nice black and blue system

[12:53] <holyghost> I'll code up some custom-faces later on

[12:53] <ShimmerFairy> I happen to like the dark solarized look (as in, looks like a Solaris computer) for my emacs, there's one or two themes out there for that.

[12:53] *** markong left
[12:53] *** markoong joined
[12:55] <holyghost> ShimmerFairy : right, CDE (KDE from sun) had ushca colour scheme

[12:55] <holyghost> *such a

[13:04] *** patrickb left
[13:11] *** aluaces joined
[13:12] *** dataangel left
[13:27] *** andrzejku left
[13:31] *** aluaces left
[13:33] *** MasterDuke left
[13:36] *** kktt007 left
[13:38] *** kktt007 joined
[13:40] *** xinming left
[13:40] *** xinming joined
[13:42] *** rbt left
[13:43] *** rbt joined
[13:46] <El_Che> rakudo-pkgs for 2020.07 are built and in the repos

[13:47] <Altai-man_> El_Che++

[13:48] *** codesections left
[13:49] *** tsek joined
[13:50] *** tsek left
[13:59] *** [Coke]_ joined
[13:59] *** [Coke]_ left
[13:59] *** [Coke]_ joined
[14:02] *** [Coke] left
[14:04] *** ensamvarg3 joined
[14:07] *** sena_kun joined
[14:08] *** Altai-man_ left
[14:15] *** aluaces joined
[14:28] *** [Coke]_ is now known as [Coke]

[14:43] <holyghost> For the RSC, lizmat, JJMerelo and others : I would like to suggest a milestones file with raku goals, put online somewhere, so everyone gets the synergy and can coordinate

[14:44] <holyghost> This way we see the future 

[14:44] <holyghost> Then if I may say so, if raku gets modularized, so APIs in the code, it would be easier to swap out things

[14:45] <holyghost> That way you can build several rakus, e.g. by changing the network module

[14:45] *** guifa joined
[14:45] *** markoong left
[14:45] <guifa> o/

[14:46] <holyghost> perl5 has a system ecosystem for that, for example HTTP::Tiny

[14:46] <holyghost> just my 2 cents

[14:46] *** patrickb joined
[14:46] <holyghost> We see the future, s I said :-)

[14:46] <holyghost> *s

[14:46] <holyghost> *as

[14:47] <holyghost> You get more people focused like that :-)

[14:49] <holyghost> security through obscurity isn't all that, FWIW

[14:50] <holyghost> Now I have to watch out that I don't repeat myself, but I will when RSC is in place

[14:53] <holyghost> So perhaps a modular raku but some project goals such as masak's Algoloid Macro, online

[14:53] <holyghost> To help each other out

[14:54] <holyghost> By the modular system, you comprehend that it's for everyone's benefit

[14:55] <holyghost> for raku it'd be a major rewrite though, which isn't always a good idea, OOP can be put there also

[14:55] <holyghost> but that's against most C hackers who can do it in C instead of e.g. elf C++

[14:57] *** ensamvarg3 left
[14:57] *** ensamvarg3 joined
[14:57] <holyghost> a OOP raku system can then be further developed managed e.g. by the same people above everyone

[14:57] <holyghost> major nd minor systems

[14:57] <holyghost> *and

[14:58] <holyghost> macos X is written in C++, whereas BSD nd linux are not (but in C)

[14:58] <holyghost> the last are more monolythic

[15:00] <holyghost> with C++ I mean pre-11,14,17 for a decent C++ compiler such as c++ on BSDs

[15:01] <holyghost> or with "gcc -std=c89" for C++ on the command line

[15:02] <[Coke]> holyghost: I am having trouble following what you're talking about.

[15:03] <holyghost> the future :-)

[15:04] <holyghost> I am elaborating a milestones web page

[15:05] *** codesections joined
[15:05] <[Coke]> ok. hard to tell which points go together, which are separate, and what, the C/C++ is about.

[15:05] <holyghost> I'll try to aid more when the RSC is in place, I'm just talking for a raku coding channel

[15:07] *** Sgeo joined
[15:08] <holyghost> [Coke] : well, we'd have a more flexible compiler/interpreter in an OOP language

[15:08] <holyghost> then again C has its major benefits, I am not against a C system

[15:08] <holyghost> it's just talk for if we could do a OOP version of the perl6/raku system

[15:08] <holyghost> Which I am not going to do on myself

[15:09] <holyghost> but if there's interest, there'd be more code and mor hacking

[15:10] <holyghost> It's somewhat personal, but I want some distraction from always the same C raku system

[15:10] <holyghost> I have started unterpaganperl6 which uses formulas and is written in C++ for example

[15:11] <holyghost> a formula is just backtrackable for syntax

[15:11] <holyghost> you just reparse if needed

[15:12] <holyghost> We cn go to commercial UNIXEN/Linuxen also

[15:12] <holyghost> anything with a C/C++ compiler works

[15:12] <holyghost> as gcc/g++ stands for

[15:13] <holyghost> although c++ is more clean (as a compiler command)

[15:13] <holyghost> We always need more I guess :-)

[15:14] <holyghost> Most things are not some casual write or rewrite

[15:17] <holyghost> C and C++ (or some other mjor OOP language) are just simple things for milestones file

[15:18] <timotimo> how does "C and C++" exactly relate to raku?

[15:18] <holyghost> I'm not saying that it's the only way to go

[15:19] <holyghost> timotimo : it's more modular in C++, I'm not saying that the developers should turn towards C++

[15:19] <holyghost> C is fine by me as it cn be used to program OOP such as C++

[15:21] <holyghost> I'm no OO zealot myself BTW

[15:21] <holyghost> In C++ it's easier to have  modulr compiler

[15:22] <holyghost> but in C you can do the same thing

[15:23] <holyghost> Everyone has put its time into raku in C, so we shouldn't throw it away I mean

[15:23] <patrickb> c: '' ~~ m:i/ ^ [a | bc * | ''] $/

[15:23] <timotimo> "it" is more modular "in" c++?

[15:23] <committable6> patrickb, ¦'': «Cannot find this revision (did you mean “all”?)»

[15:24] <tadzik> you can write OO in C just fine, that's what Linux does, or Gtk

[15:24] <timotimo> both rakudo and nqp are very big parts written in nqp, which is object-oriented

[15:24] <tadzik> you don't need language features for it (though they can certainly be helpful)

[15:24] <patrickb> m: '' ~~ m:i/ ^ [a | bc * | ''] $/

[15:24] <camelia> rakudo-moar 8ca13eb2a: ( no output )

[15:24] <holyghost> sure, as I said, you can program OO in C

[15:25] <patrickb> m: say 'matched' if '' ~~ m:i/ ^ [a | bc * | ''] $/

[15:25] <camelia> rakudo-moar 8ca13eb2a: ( no output )

[15:25] <patrickb> m: say 'matched' if '' ~~ m:i/ ^ [a | b * | ''] $/

[15:25] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «matched␤»

[15:25] <holyghost> I know Gtk widget construction system as you say

[15:25] <patrickb> Is the above a bug?

[15:25] <timotimo> glib in general

[15:26] <holyghost> elaborating on milestones then again, for our synergy

[15:26] <rypervenche> patrickb: Why do you think it would be a bug?

[15:26] <timotimo> patrickb: i think it's supposed to say "null regex not allwoed"

[15:26] <rypervenche> Oh

[15:27] <timotimo> m: say "m" if '' ~~ m:i/^ [a | b | ] $/

[15:27] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3say "m" if '' ~~ m:i/^ [a | b | 7⏏5] $/␤    expecting any of:␤        infix stopper␤»

[15:27] <patrickb> m: say 'matched' if '' ~~ m:i/ ^ [a | b * | ''] $/; say ', '; say 'matched' if '' ~~ m:i/ ^ [a | bc * | ''] $/; 

[15:27] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «matched␤, ␤»

[15:28] <holyghost> again, more modular raku should be better for more hackers

[15:28] <patrickb> The only difference is the "b" vs "bc". I don't get why that makes it match / not match the output.

[15:28] <holyghost> hold on, I'll recapitulate when the RSC is in place

[15:30] <timotimo> patrickb: b* can match "", bc* must at least have a b to match

[15:30] <patrickb> oh

[15:30] <timotimo> since * binds tightly to the c in the second

[15:30] * patrickb dumb

[15:30] <timotimo> :)

[15:30] <Geth_> ¦ doc: codesections++ created pull request #3528: Remove documentation for (nonexistent) `allowed` method

[15:30] <Geth_> ¦ doc: review: https://github.com/Raku/doc/pull/3528

[15:31] <timotimo> holyghost: how is raku not modular?

[15:32] <kawaii> I have an object which I'm calling a method on for use in a string i.e. `description => "{$user1.nick} has given {$user2.nick} a reputation point!"`, however it's possible for `.nick` to return `Any` (nothing) if the user has no nickname, there's another method I can use `.username` instead though as a fallback, is there a clean way of doing this? :)

[15:33] <holyghost> timotimo : modules can be replaced

[15:33] <holyghost> swapped in and out

[15:33] <holyghost> thus more programmatic systems

[15:34] <timotimo> yeah?

[15:34] <holyghost> sure

[15:34] <timotimo> how is that not yet the case?

[15:34] <holyghost> I am no raku developer, but if it's in already, fine by me

[15:35] <timotimo> i think it would be worthwhile if you checked stuff out before writing pages full of irc messages with suggestions that don't apply?

[15:36] <holyghost> a module is piece of code which can be swapped

[15:37] <holyghost> as I said before

[15:37] <holyghost> several developers can work on a module, wheres others do not

[15:37] <holyghost> that way you integrate shit

[15:38] <holyghost> Where I come from (inkscape and worldforge) you write OO for that

[15:38] <timotimo> rakudo is already OO on its inside

[15:41] <holyghost> Yes, e.g. a struct is a public class

[15:41] <holyghost> that's the simplest idea possible

[15:42] <jnthn> You seem to be thinking rakudo is written in C, but it isn't (well, maybe 0.5% is, and even that tiny bit's time is short...)

[15:42] <jnthn> The only significant component written in C is MoarVM

[15:42] <jnthn> Which is the runtime, not the compiler

[15:43] <timotimo> in rakudo, Perl6::Compiler is a class, Perl6::Grammar is a class, Perl6::Optimizer is a class, all the nodes in the AST are classes, they get roles mixed in

[15:43] <holyghost> I'm a lost soul on that

[15:43] <timotimo> the Perl6::Grammar is derived from HLL::Grammar and also has roles mixed in

[15:43] <jnthn> The RakuAST approach is even more object oriented :)

[15:44] <holyghost> ok :-)

[15:44] <holyghost> jnthn : in what language is the rest written ?

[15:44] <holyghost> which languages ?

[15:45] <timotimo> a big portion in nqp, the rest in raku

[15:46] <holyghost> Anyway, I'm just a package writer but if things can be swapped out and in, I rest more easily :-)

[15:46] * holyghost lynxes

[15:46] <holyghost> right so it's not quite perl, parrot VM

[15:47] <timotimo> parrot VM is in the past

[15:47] *** aluaces left
[15:48] * holyghost sees the syntax

[15:50] <holyghost> a parrot grammar engine :-)

[15:50] <holyghost> CORBA lost :-)

[15:50] <[Coke]> no

[15:50] <[Coke]> parrot isn't a thing anymore.

[15:50] <holyghost> I know that

[15:51] <holyghost> ok, so C++ is eventually out of the question and raku has rights over the nqp language

[15:52] <holyghost> It's perl all the way

[15:52] <[Coke]> no, it's not perl either. :)

[15:52] <holyghost> :-)

[15:53] <holyghost> I am happy it's has OOP features, which is logical for today's compilers/interpreters

[15:53] *** Petr37 joined
[15:53] <holyghost> Thing is, modularnes is good in several ways, as I said

[15:53] <holyghost> it's a good focus

[15:54] *** MasterDuke joined
[15:54] <Petr37> Nice day 😎 Can i install Raku on windows 10 iot core?

[15:54] <patrickb> Petr37: Did you try?

[15:54] <holyghost> thx jnthn

[15:54] <Petr37> patrickb, not yet

[15:55] <patrickb> Petr37, building rakudo could be a challenge as the iot core is very limited wrt what's installed.

[15:55] *** xinming left
[15:56] <patrickb> Petr37, but I'd expect it to run fine.

[15:56] *** gnufr33dom joined
[15:56] <patrickb> Petr37: So maybe just go for the precompiled releases.

[15:56] <holyghost> So perl6 uses perl7 :-)

[15:56] <patrickb> Petr37: Do know that rakudo can use quite a lot of memory, so depending on the device you want to run on this might be a limiting factor.

[15:57] <Petr37> raspberry 4 8 gb ram

[15:57] *** skids joined
[15:58] <patrickb> Petr37: Then you shouldn't have any problem :-)

[15:58] <Petr37> patrickb, iot core have many limitions

[15:59] <timotimo> holyghost: no

[15:59] <holyghost> So I guess perl7 and nqp direct perl6 in the future

[16:00] *** xinming joined
[16:02] <patrickb> m: say 'm' if ''  ~~ m:i/ ^ [a | ''] $ /; say 'n' if ''  ~~ m/ ^ [a | ''] $ /; 

[16:02] <camelia> rakudo-moar 8ca13eb2a: OUTPUT: «n␤»

[16:02] <timotimo> oh interesting

[16:02] <timotimo> s the :i makes it behave differently

[16:02] <patrickb> ^ Is me dumb again?

[16:03] <timotimo> that looks more like a bug

[16:03] <jnthn> That looks like a bug

[16:03] <patrickb> Should the correct output be '' or 'mn'?

[16:04] <jnthn> mn

[16:04] <jnthn> Since '' matches

[16:04] <MasterDuke> bisectable6: say 'm' if ''  ~~ m:i/ ^ [a | ''] $ /; say 'n' if ''  ~~ m/ ^ [a | ''] $ /; 

[16:04] <bisectable6> MasterDuke, Will bisect the whole range automagically because no endpoints were provided, hang tight

[16:04] <bisectable6> MasterDuke, Output on all releases: https://gist.github.com/4eb79bec0a2382796b72e6f1f0a7b23f

[16:04] <bisectable6> MasterDuke, Bisecting by output (old=2017.02 new=2017.03) because on both starting points the exit code is 0

[16:04] * patrickb will rakudobug

[16:05] <bisectable6> MasterDuke, bisect log: https://gist.github.com/c0e2b9cbfeb44e7ab14e48f7f91b3194

[16:05] <bisectable6> MasterDuke, (2017-03-10) https://github.com/rakudo/rakudo/commit/22f00cd72deaaaafbaeb1ad83187309854e33739

[16:05] <bisectable6> MasterDuke, Output on all releases and bisected commits: https://gist.github.com/8de1da70b3cce877c53d55b2f248be7e

[16:06] *** Altai-man_ joined
[16:08] *** sena_kun left
[16:09] *** cpage_ joined
[16:09] *** hungrydonkey left
[16:09] *** Petr37 left
[16:11] *** cpage left
[16:11] *** cpage_ is now known as cpage

[16:13] *** Petr37 joined
[16:14] <patrickb> bisectable6: say 'm' if ''  ~~ m:i/''/; say 'n' if ''  ~~ m/''/; 

[16:14] <bisectable6> patrickb, Will bisect the whole range automagically because no endpoints were provided, hang tight

[16:14] <bisectable6> patrickb, Output on all releases: https://gist.github.com/935125f2a0422665b45c1472a9f8bbd9

[16:14] <bisectable6> patrickb, Bisecting by output (old=2017.02 new=2017.03) because on both starting points the exit code is 0

[16:15] <bisectable6> patrickb, bisect log: https://gist.github.com/ca23e459299fed58f65f6629f592e921

[16:15] <bisectable6> patrickb, (2017-03-10) https://github.com/rakudo/rakudo/commit/22f00cd72deaaaafbaeb1ad83187309854e33739

[16:15] <bisectable6> patrickb, Output on all releases and bisected commits: https://gist.github.com/39012039e947288855e5823dc7846c0b

[16:15] *** sena_kun joined
[16:16] <patrickb> rakudobugged: https://github.com/rakudo/rakudo/issues/3815

[16:17] <timotimo> what's the command to get a bump's stuff linked?

[16:17] <timotimo> rev: https://github.com/rakudo/rakudo/commit/22f00cd72deaaaafbaeb1ad83187309854e33739

[16:18] *** molaf left
[16:20] <timotimo> Geth_: ver https://github.com/rakudo/rakudo/commit/22f00cd72deaaaafbaeb1ad83187309854e33739

[16:20] <Geth_> timotimo, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.02-67-g5023309...2017.02-69-g4ceee06d

[16:21] *** Tirifto joined
[16:23] <holyghost> lizmat, JJMerelo and other RSC members in the future : I will recpitulate for a minor/major discussion on modularization and a projectgoals/milestones file

[16:24] <patrickb> https://github.com/MoarVM/MoarVM/compare/2017.02-31-g91aab71...2017.02-38-g58457845

[16:24] <patrickb> https://github.com/MoarVM/MoarVM/commit/58457845f599ee1fbcc6771ff70d6bc91194f40a <- this is probably the offending commit

[16:24] <holyghost> RSC : in the future I meant

[16:25] <holyghost> a RSC bot would be nice BTW

[16:26] <holyghost> (RSC == Raku Steering Council)

[16:27] <holyghost> The "Big Head" from 3rd rock of the sun :-)

[16:27] <jnthn> patrickb: Hm, wonder if it's https://github.com/MoarVM/MoarVM/commit/58457845f599ee1fbcc6771ff70d6bc91194f40a#diff-0cb6ca157d7b79b7d7e5ace869130f8cR615

[16:28] <patrickb> Found that out already ;-)

[16:28] <patrickb> Oh! You pointed to a specific line!

[16:29] <patrickb> No, I didn't see that yet!

[16:29] *** aluaces joined
[16:30] <AlexDaniel`> holyghost: modularization?

[16:33] <holyghost> AlexDaniel : see bove discussion, to swap things out and in

[16:33] <holyghost> OOP wise

[16:33] <holyghost> *above lol

[16:33] <AlexDaniel`> what do you mean by that?

[16:34] <AlexDaniel`> ah okay

[16:34] <holyghost> To make more rakus :-)

[16:34] <holyghost> not by patches but by more system libs/packages modularized

[16:34] <holyghost> e.g. HTTP::Tiny in perl5 is int the perl5 tarball itself

[16:35] <holyghost> but it's raku code

[16:35] <holyghost> I'm not talking about raku packages

[16:35] <holyghost> I'm taling about modifying the whole system piecewise

[16:35] <holyghost> then getting more programmatic systems

[16:36] <holyghost> so it has to be elevated, the raku system into modules I mean

[16:37] <holyghost> it's better as it's adavnced OOP techniques which make the kernel

[16:38] <holyghost> it's not in fully yet, but as nqp is a perloid it should do, I'm not sure about objects in nqp though

[16:38] <holyghost> which enhances

[16:38] <holyghost> blessed hashes I thought

[16:38] <holyghost> I dunno :-)

[16:41] <timotimo> no

[16:41] <holyghost> java was programmed in java bck in the day now it's gcj

[16:41] *** dakkar left
[16:41] <timotimo> objects in nqp are very very close to objects in rakudo

[16:41] <timotimo> not blessed hashes

[16:41] <holyghost> ok

[16:41] <timotimo> gcj has been abandoned some years ago

[16:42] <holyghost> openjdk, sunjdk 

[16:42] <timotimo> "It was part of the GNU Compiler Collection for over ten years but as of 2017 it is no longer maintained and will not be part of future releases"

[16:42] <timotimo> gcj doesn't exist any more

[16:42] <timotimo> openjdk and sun jdk don't use gcj, and didn't use gcj

[16:42] <holyghost> I know

[16:44] *** sena_kun left
[16:44] <holyghost> blackdown.org, back in the day had the first sun java license which became the openjdk

[16:45] <holyghost> the first license after windows and solaris jdk from sun itself of course :-)

[16:47] *** xinming left
[16:48] *** xinming joined
[16:50] <Altreus> big giant head

[16:50] <holyghost> lol

[16:52] *** aluaces left
[16:54] <holyghost> modularization and milestones.txt, that's all I know :-)

[16:54] <holyghost> or maybe milestones.php on github :-)

[16:57] <holyghost> anyway, I'd better elevate with something else

[17:11] *** rbt left
[17:11] *** rbt joined
[17:11] *** andinus left
[17:12] *** jdoege joined
[17:12] *** andinus joined
[17:13] <jdoege> I see what was done for the "install" process for Raku and I think it is much, much improved. (ra)Kudos to all involved.

[17:18] *** aluaces joined
[17:21] *** ufobat left
[17:21] *** poga left
[17:29] *** andrzejku joined
[17:34] *** poga joined
[17:36] *** molaf joined
[17:38] <tadzik> :)

[17:40] <holyghost> jdoege : I hd nothing to do with it, but we're doing our best :-)

[17:42] <holyghost> El_Che++

[17:44] *** patrickb left
[17:45] *** Petr37 left
[18:01] *** MilkmanDan left
[18:07] *** sena_kun joined
[18:08] *** Altai-man_ left
[18:13] *** molaf left
[18:13] <holyghost> a wiki would also be nice, e.g. wiki.raku.org, as on c2.com (smalltalk nd OO people)

[18:13] <holyghost> There's even one for romhacking.net

[18:14] <holyghost> on c2.com there's much more differentition thn on most wikis, it was the first wikiwikiweb ever made

[18:14] <holyghost> tech talk by the wiki users on subjects

[18:15] <holyghost> then we can comment on features of raku

[18:16] *** xelxebar left
[18:17] *** xelxebar joined
[18:21] *** cognominal joined
[18:21] *** cognominal left
[18:25] *** bocaneri left
[18:25] *** Altai-man_ joined
[18:27] <holyghost> a wiki with logins

[18:27] *** sena_kun left
[18:32] *** sena_kun joined
[18:34] *** Altai-man_ left
[18:36] *** MilkmanDan joined
[18:40] <holyghost> a META server can hold the ips of raku among other things

[18:40] <holyghost> and IPs of game servers :-)

[18:43] <holyghost> perl6 MUDs

[18:43] <holyghost> I'm sorry, raku MUDs

[18:45] *** xinming left
[18:45] *** xinming joined
[18:46] *** codesections left
[18:46] <holyghost> maybe a nice project for someone, implement some finger daemon in raku or some other language, so one can read status messages and e.g. a milestones file (using telnet for example or http)

[18:47] <holyghost> raku ports :-)

[18:47] <holyghost> 6969

[18:50] *** codesections joined
[18:59] *** xinming left
[19:01] *** kensanata left
[19:02] *** xinming joined
[19:11] *** Petr37 joined
[19:11] <Petr37> anyone use Raku in commercial project s?

[19:14] <moritz> I know nine does

[19:14] <holyghost> It's GPL2 and Artistic 2 licensed, so you can I guess

[19:14] <kawaii> Yes, I am too

[19:16] <Petr37> thanks. i want use Raku in production (commercial)

[19:17] <holyghost> It's a good programmatorical system

[19:18] <Petr37> holyghost, very good system ))

[19:20] <holyghost> I concur

[19:21] *** squashable6 left
[19:22] <oddp> Are some of these commercial project performance sensitive and require some dirty tricks or reaching down to c here and there? Has anyone written some articles using raku in large projects?

[19:22] *** squashable6 joined
[19:25] *** kensanata joined
[19:28] *** dolmen joined
[19:30] *** dolmen left
[19:31] <lizmat> oddp: if there are "dirty tricks", I would assume it's mostly reaching out to NQP code in Raku to make hot code paths perform better

[19:31] <lizmat> *not* reaching down to C (as is mostly the case with Perl and XS)

[19:31] <lizmat> although some people might actually use NativeCall for their bespoke C code

[19:32] <lizmat> but in any case, that would still be a lot cleaner interface

[19:32] <lizmat> wrt articles about large projects: I would love to see and promote one!

[19:32] *** andrzejku left
[19:34] <holyghost> we should become a better system for e.g. large projects, nice programatorical elaborated

[19:35] <holyghost> maybe I said too much :-)

[19:36] *** Petr37 left
[19:40] <oddp> Alright, thanks, guess I'll be doing a nqp deep dive then. Pretty much ignored it till now.

[19:41] <oddp> Liz, looking at some of the performance optimizations in recent raku commits, are there plans to revert some nqp usage back once raw raku code closes the gap more and more each release?

[19:43] <[Coke]> I think that's a long term goal, yes.

[19:43] <gfldex> oddp: Raku was designed to be able to self host. But that's a long way off.

[19:45] <oddp> Okie dokie, good to know.

[19:47] *** jdoege left
[19:48] <lizmat> oddp: yes, that's the goal

[19:50] * gfldex .oO( You need a lot of shoestring for a 30 year bootstrap. )

[19:52] * lizmat is looking forward to using RakuAST to have sprintf generate code, rather than running a grammar for every call to sprintf

[19:54] *** aborazmeh joined
[19:54] *** aborazmeh left
[19:54] *** aborazmeh joined
[20:02] <[Coke]> https://www.onlinegdb.com/Hy2lA2NxP ... wow

[20:03] <raku-bridge> <theangryepicbanana> Just putting this here in case anyone is interested (since Raku is available on repl.it at https://repl.it/languages/raku): https://blog.repl.it/langjam

[20:03] *** sno left
[20:04] <raku-bridge> <theangryepicbanana> since raku is pretty good for making languages (in case you haven't noticed ;) )

[20:05] *** molaf joined
[20:08] <holyghost> lol [Coke]

[20:09] <holyghost> repl.italy :-)

[20:09] <guifa> lizmat: that’s basically the same as me for all of the international formatting

[20:10] <lizmat> ++guifa

[20:12] <holyghost> lizmat, guifa, gfldex : if I may say so, you better watch out somewhat for a glibc/libc thing

[20:13] <guifa> Thankfully mine generally uses the same dozen or so formats, so I can cache them a little bit, but even then, best I can do is a list of codes (including string literals) that get stringified.  But being able to produce a code object without EVAL would be sweet

[20:13] * holyghost concurs

[20:14] <holyghost> glibc destroyed kFreeBSD for example

[20:14] <holyghost> although I'm not saying there should be native code for system calls

[20:15] <holyghost> There ws Debian/BSD back in the day but glibc destroyed kFreeBSD which was ian and debby's thing

[20:16] <holyghost> kFreeBSD is hosted on debian machines

[20:16] <holyghost> glibc is a macro bitch whereas BSD libc is stable

[20:17] <holyghost> libc implements system calls if you didn't know

[20:19] <holyghost> if you can bypass glibc (not libc) with system calls in nqp you're ok, but not otherwise

[20:20] <holyghost> so the long term project goal, as liz said is on the way

[20:20] *** rindolf left
[20:21] <holyghost> Any chicken can install debian, was in the install manual of debian earlier

[20:25] <holyghost> So for major perl systems, we have MacOS X libc, BSD libc (including windows) and linux glibc

[20:25] <holyghost> if you use the kernel interface you're locked in, so we _Will_ have to choose I guess

[20:26] <holyghost> Larry wants BSD, Windows, Linux and MacOS X software, go figure 

[20:26] <holyghost> as raku/perl6 I mean

[20:27] <holyghost> they're programatoriclly incompatible

[20:28] <holyghost> General Public Virus (The New Hacker Dictionary), GPL

[20:30] *** kktt007 left
[20:30] <holyghost> I went from linux to BSD for that, kFreeBSD was dead long ago, as somewhat but I don't need any more

[20:30] *** kktt007 joined
[20:31] <holyghost> mea culpa, Debby

[20:32] *** Altai-man_ joined
[20:32] *** sno joined
[20:32] <holyghost> Again, watch out for kernel /usr/include/X code

[20:32] <holyghost> as Liz's sprintf

[20:35] *** sena_kun left
[20:36] <holyghost> We better program on a sparc, mips64 and powerpc architecture :-) lossage again

[20:36] <holyghost> we don't have GNU libc on commercial and BSD UNIXes though

[20:37] <holyghost> for debian : apt-get dist-upgrade

[20:37] <holyghost> a genius stroke

[20:41] <holyghost> as Windows is based (with patents) on FreeBSD, it's a good monolithic kernel, I use NetBSD though as it's more stable and has more architectures

[20:41] <holyghost> I was a severe debian user, back in the day

[20:41] <holyghost> MacOS X has a better kernel as it's OOP programmed

[20:42] <holyghost> anyway, I am exagerating :-)

[20:42] <holyghost> on a NetBSD you can compile a clean gcc cross-compiler for m68-coff in a giffy

[20:43] <holyghost> BSD kernels compile without warnings, whereas kernel.org (blah) do not

[20:46] <holyghost> m68k-coff is for previous than elf amigas or appleII for example

[20:46] <holyghost> you can code your own OS in it

[20:47] <holyghost> coff is a microcode/binary format

[20:47] <holyghost> there is also M$ coff

[20:48] *** ensamvarg3 left
[20:48] <holyghost> holyghost++ from Debby from debian and Ken :-)

[20:50] <holyghost> glibc _can_ destroy perl6/raku 

[20:50] <holyghost> so watch out Liz and JJ for kernel interfaces beyond glibc/libc

[20:50] <holyghost> GNU/google is a bitch for all of us

[20:50] <holyghost> especially the BSD and MacOS (X) folks s it's called now

[20:51] <holyghost> *as

[20:51] <lizmat> MacOS is going to get interesting in more than one way for me personally:

[20:51] <holyghost> K&R includes UNIX not glibc BTW (K&R is Kernighan and Dennis Ritchie's ANSI C programming language book

[20:52] <holyghost> ok liz

[20:52] <lizmat> 1. the way Apple is going forward, my next notebook is *not* going to be a Mac

[20:52] <lizmat> 2. with a Risc processor at the heart of a next generation of hardware, Raku's JIT will be useless

[20:53] <holyghost> CISC vs. RISC

[20:54] <holyghost> UNIX can goad along though, as its libc is for commercial and common UNIXen and raku can cope with that though

[20:54] *** kensanata left
[20:54] <holyghost> I'm not saying MacOS is big endian

[20:54] <vrurg> lizmat: the 2 is truly worrisome one. I hope that by the time my macbook gets to old we'll have ARM JITting.

[20:55] <vrurg> *too old

[20:55] <lizmat> yeah, it would be a nice project, worthy of TRF funding

[20:56] <holyghost> IRIX and SunOS are monolithic kernels but macs have a good kernel

[20:56] <holyghost> it hopefully stays so

[20:56] <lizmat> could also be nice to get Raku running better on Raspberries and the like

[20:57] <vrurg> Otherwise I like the move. I never liked and fully trusted CISC. Even compared to DEC's PDP command set it was hellishly messy.

[20:58] <vrurg> lunch time...

[20:59] <holyghost> I am also pro RISC processors but CISC vs. RISC is a holy war

[20:59] <holyghost> mea culpa

[21:00] <ShimmerFairy> CISC only made sense in an era where making life easier for assembler programmers was important, but thanks to the x86 it'll likely never go away.

[21:01] <holyghost> You can install several OSes on PPC and mips though

[21:01] <holyghost> ShimmerFairy : right you are

[21:02] <holyghost> motorola/freescale does not produce anything against intel anymore, mactel whereas PPC macs

[21:02] <holyghost> e.g. IBM

[21:04] <holyghost> we _can_ use these processors for phones though, it'd be a nice talk

[21:04] <holyghost> FWIW windows mobile is better than android somewhat

[21:04] <holyghost> and android _IS_ USENIX

[21:06] <holyghost> as it includes TCP/IP stack, G4 is DSL and so on

[21:06] <holyghost> all from USENIX

[21:06] <holyghost> 4G I meant

[21:07] <holyghost> ethernet layes -> UNIX

[21:07] <holyghost> *layer

[21:08] <holyghost> from Palo Alto, Xeroc Parc all that, Jobs started with NeXT from the same guys

[21:08] <holyghost> mad it into MacOS for the appleII

[21:08] <guifa> I really have too much fun making cover images for github: https://github.com/alabamenhu/UserTimezone/raw/master/docs/logo.png

[21:12] <holyghost> ok, doesn't link in seamonkey

[21:13] <holyghost> * in my seamonkey

[21:13] <holyghost> anyway, use a better libc, so nqp does not die

[21:15] <holyghost> kFreeBSD is hosted on debian server BTW, if you can get its BSD libc for it, I'd thank you for it

[21:15] <holyghost> *servers

[21:15] <holyghost> by paying I mean :-)

[21:15] *** skids left
[21:17] <holyghost> use a good kernel interface, it helps out nqp/perl6/raku

[21:17] <holyghost> debian servers host the iso and usb images I mean

[21:21] <holyghost> man pkg_acc if you want to try out, Net or Open BSD

[21:21] <holyghost> *pkg_add

[21:22] <holyghost> man is a terminal command for manual

[21:22] <holyghost> you can read it then

[21:22] *** markoong joined
[21:26] <holyghost> man pkg for FreeBSDs

[21:27] *** dataangel joined
[21:28] <holyghost> glibc is GNU libc and libc is ANSI C UNIX libc, just for the unterwizards

[21:34] <holyghost> "When I am on windows, I mostly use XEmacs" (among other things) :o)

[21:34] <holyghost> it'd better be for the editor folks :-)

[21:35] <holyghost> oh no! it's a linux program but never worry (on NetBSD as it's open source)

[21:35] *** rjeli joined
[21:37] <rjeli> hi, i know very little about raku, but i'm writing a toy symbolic CAS that has to match left recursive patterns. wondering if raku grammars can support parsing non-text, i.e. an AST?

[21:37] <rjeli> so i would need to translate a "pattern" ast to a grammar that parses another ast of expressions

[21:38] <holyghost> thanks for withstanding me.

[21:38] <holyghost> rjeli : have a rule system :-)

[21:39] <timotimo> rjeli: it's not fully implemented at the moment, but it was speculated in the speculations

[21:40] *** aluaces left
[21:41] <rjeli> ok so is it like, 1. possible with a close reading of the docs, 2. possible with  a close understanding of the language and some "interesting" hacks, or 3. not really possible (just write my own parsing algorithm)

[21:42] <timotimo> you could spend some time implementing it into rakudo itself, but you'd also theoretically be able to use regular string matching tgether with assertions with code in them

[21:43] <rjeli> ok, thanks

[21:45] <rjeli> dumping to a canonical text representation is gross but im starting to think it's the easiest way of doing it :) :/ :)

[21:46] <lizmat> rjeli++

[21:47] <timotimo> i meant something a bit cheekier

[21:47] <timotimo> like, have essentially an empty string "tape" where the only thing it serves as is something where the cursor position can be advanced in

[21:48] *** markong joined
[21:48] *** markoong left
[21:48] <holyghost> lol rjeli

[21:48] <rjeli> oh my

[21:48] <holyghost> :-)

[21:48] <timotimo> though that's probably only sensible for a flat representation rather than a tree

[21:48] <rjeli> thats.. not a bad idea

[21:48] <holyghost> << 0

[21:49] *** rbt left
[21:49] *** rbt joined
[21:54] <guifa> rjeli: I am workingt o create a system that could do something like that

[21:54] <guifa> All I have is a proposal ATM though.

[21:55] <guifa> I’ve spent most of the time so far working on the binary version of it

[21:55] <guifa> rjeli: see https://gist.github.com/alabamenhu/2fec7a8f51a24091dc1b104a2ae2f04d

[21:55] <holyghost> guifa : make a modular system component with it

[22:06] <holyghost> modularization galore :-)

[22:11] *** rbt left
[22:11] *** rbt joined
[22:13] *** cpan-raku left
[22:14] *** cpan-raku joined
[22:14] *** cpan-raku left
[22:14] *** cpan-raku joined
[22:15] <guifa> holyghost: my ultimate goal is integrate them in some particularly tight way with Raku, similarly to how regex is (since they’re basically regex for binary and objects).

[22:17] <holyghost> bummer

[22:18] <holyghost> I don't follow but do the regex thing :-)

[22:18] * holyghost is  bit drunk

[22:19] <holyghost> or dlsym, dlopen 

[22:22] <holyghost> man, I didn't follow that at all :-)

[22:22] *** aborazmeh left
[22:24] <holyghost> guifa : are you integrating binary systems ? You should go OSS *lol*

[22:24] <holyghost> we needs it :-)

[22:26] <holyghost> We should go commercial for larger projects :-)

[22:27] <holyghost> raku-activestate.com *lol*

[22:27] <raku-bridge> <theangryepicbanana> binary grammars would be cool

[22:28] <lizmat> getting activestate involved with Raku would not actually be a bad idea

[22:28] <lizmat> but they seem entrenched in Perl 5|7 

[22:28] <raku-bridge> <theangryepicbanana> reminds me of Red/Rebol's PARSE dialect, which are similar to Raku grammars, but can also parse binary data and actual values

[22:28] <holyghost> we needs it :-)

[22:29] <raku-bridge> <theangryepicbanana> (both of which I think have been proposed for Raku iirc)

[22:29] <holyghost> I'd like to

[22:29] <lizmat> I've said before that I have half a mind re-implementaing the regex engine in Raku

[22:29] <holyghost> sure liz

[22:29] <lizmat> but only half a mind

[22:29] <holyghost> we needs them binaries

[22:29] <holyghost> activestate.com ?

[22:29] <raku-bridge> <theangryepicbanana> wasn't raku's regex engine already implemented a second time? iirc it was originally in parrot

[22:29] <jnthn> Whenever I think about it I wonder how many minds it will need... :)

[22:30] <holyghost> lol

[22:30] <holyghost> stupid bots :-)

[22:30] <raku-bridge> <theangryepicbanana> (wait is the discord bridge broken or something?)

[22:30] <holyghost> roflmao

[22:31] <holyghost> It's controlled I tell you

[22:31] <raku-bridge> <theangryepicbanana> I'll take that as "partially"

[22:31] <holyghost> they're just AIs

[22:31] <lizmat> botbotbotbotbotbotbotbotbotbotbotbotbot o boy

[22:31] <raku-bridge> <theangryepicbanana> lol

[22:31] <holyghost> fuck off ! :-)

[22:31] <lizmat> I've been accused of being a bot on Twitter more than once  :-)

[22:32] <holyghost> like that :-)

[22:32] <holyghost> bananas

[22:32] <raku-bridge> <theangryepicbanana> really though, I think raku could take some ideas from red/rebol's Parse thing

[22:32] <holyghost> It's difficult to tell the AI from a real person, liz

[22:32] <holyghost> the AI is more I :-)

[22:33] *** sena_kun joined
[22:33] <raku-bridge> <theangryepicbanana> I would agree

[22:33] <holyghost> ok, I need to sleep but I'm going to hack at 5am

[22:33] <holyghost> we needs it :-)

[22:33] <raku-bridge> <theangryepicbanana> ye

[22:34] <holyghost> raku-bridge : tell me of sheherazades 

[22:34] <holyghost> *Sheherazades

[22:34] <raku-bridge> <theangryepicbanana> idk what that is

[22:34] <lizmat> .oO( I'm a person, not a number :-)

[22:34] <holyghost> you're stupid !

[22:34] <holyghost> you're not liz

[22:34] *** Altai-man_ left
[22:34] <raku-bridge> <theangryepicbanana> fwiw my name is theangryepicbanana here on discord

[22:35] <raku-bridge> <theangryepicbanana> I thought the bot displayed my name lol

[22:35] <holyghost> discordia is against marxism BTW, raku-bridge

[22:35] <raku-bridge> <theangryepicbanana> discord is easier to use on a phone though

[22:35] <holyghost> right you are, is it a mobile ?

[22:36] <timotimo> probably a rotary phone

[22:36] <holyghost> oh you want to tell us that you have your own interface ?

[22:36] <raku-bridge> <theangryepicbanana> way

[22:36] <raku-bridge> <theangryepicbanana> *wat

[22:36] <holyghost> watts

[22:36] <raku-bridge> <theangryepicbanana> I mean I can send a screenshot if you want

[22:36] <holyghost> sure then I'll hve my lynx program download it :-)

[22:36] <raku-bridge> <theangryepicbanana> https://cdn.discordapp.com/attachments/633753286209699870/735264076854460496/image0.png

[22:37] <holyghost> lol

[22:37] <raku-bridge> <theangryepicbanana> lol imagine not having embeds

[22:37] <holyghost> roflmao

[22:37] <holyghost> no maos inhere please ?

[22:37] <holyghost> *in here

[22:37] <raku-bridge> <theangryepicbanana> nice try. ios

[22:37] <holyghost> just parse !

[22:38] <holyghost> I'm having trouble with the status of your head

[22:38] <holyghost> install festival voxes at once !

[22:38] <raku-bridge> <theangryepicbanana> yeah I'm kinda lost too

[22:38] <raku-bridge> <theangryepicbanana> lol

[22:38] <holyghost> thanks :-)

[22:39] <holyghost> raku-bridge : we got out of control, how do you parse ?

[22:39] * holyghost is going to grab another beer

[22:39] <raku-bridge> <theangryepicbanana> wdym parse? like, interact with IRC?

[22:40] <holyghost> hail raku-bridge ! :-)

[22:40] <holyghost> for example

[22:40] <raku-bridge> <theangryepicbanana> it's a bot someone made I think

[22:40] <holyghost> ?x &|- raku-bridge 

[22:40] <holyghost> it does not parse though

[22:40] <raku-bridge> <theangryepicbanana> oh you mean red/rebol parsing?

[22:41] <raku-bridge> <theangryepicbanana> actually I'll just get on irc lol

[22:41] <holyghost> do that then :-)

[22:41] <holyghost> I'd really appreciate it (ask-p *lol*)

[22:41] <holyghost> I mean askp

[22:42] <lizmat> sleep&

[22:42] <holyghost> then have a mailbox system for a VM

[22:42] <holyghost> gn lizmat !

[22:42] *** theangryepicbana joined
[22:42] <raku-bridge> <theangryepicbanana> I'm not liz

[22:42] <holyghost> right, here you are

[22:42] <raku-bridge> <theangryepicbanana> lol

[22:42] <theangryepicbana> ok there

[22:43] <holyghost> grand knights they are

[22:43] <holyghost> gkn

[22:43] <theangryepicbana> lol I'm too much of a zoomer to use IRC regularly

[22:43] <holyghost> sure

[22:43] <holyghost> you're username is blogged

[22:43] <holyghost> your name is blocked

[22:43] <theangryepicbana> yeah it's too long for most sites I

[22:44] <holyghost> lol

[22:44] <theangryepicbana> *I'm on

[22:44] <holyghost> sure, what's with the bot, it's written in what language ?

[22:44] <theangryepicbana> most likely raku

[22:44] <holyghost> coolnes

[22:44] <theangryepicbana> using the shuppet module

[22:44] <holyghost> lol

[22:44] <theangryepicbana> anyways as for what I was saying before, are you at all familiar with the Rebol or Red languages?

[22:44] <holyghost> I'm writing scheme bots ATM

[22:45] <holyghost> no

[22:45] <theangryepicbana> that's what the Parse thing is from

[22:45] <theangryepicbana> ah ok

[22:45] <holyghost> is it any good ?

[22:45] <holyghost> right

[22:45] <theangryepicbana> yeah, it's pretty easy to use

[22:45] <theangryepicbana> and super easy for making DSLs

[22:45] <holyghost> sure, I'm mostly in for AI and adaptive systems in programming

[22:45] <holyghost> I don't have the time to look it up though

[22:46] <holyghost> so it's networked ?

[22:46] <theangryepicbana> well I'll link you then http://rebol.com/docs/core23/rebolcore-15.html

[22:46] <theangryepicbana> not really

[22:46] <theangryepicbana> like, domain-specific languages

[22:46] <holyghost> ok

[22:47] <holyghost> thing is, it does not link here, bummer

[22:47] <theangryepicbana> or "mini languages" within an existing language

[22:47] <theangryepicbana> oof

[22:47] <theangryepicbana> copy+paste it maybe...?

[22:47] <holyghost> I did

[22:47] <theangryepicbana> oh

[22:47] <holyghost> seamonkey

[22:47] <holyghost> I'm a bit slammed by the KGB droids :-)

[22:47] <theangryepicbana> I'm just using whatever client came up first (which happens to be kiwi)

[22:48] <holyghost> now my beer getting

[22:48] <holyghost> kiwi is all right

[22:48] <theangryepicbana> well as for the link thing, you could just search up "rebol parse" and it's like the first result online

[22:49] <holyghost> ok

[22:51] <holyghost> right banana : so you did actually wrote the bot in a theorem prover language at first sight

[22:51] <theangryepicbana> uh no lol

[22:51] <holyghost> no ?

[22:51] <theangryepicbana> no someone else made the bot

[22:52] <holyghost> ah ok, something else than raku I guess

[22:52] <holyghost> problem is you do too much stuff in one language

[22:52] <holyghost> ?

[22:52] <theangryepicbana> basically there's a channel in the raku discord server that interacts with this channel

[22:52] <holyghost> I understand, then you just hijack and paste

[22:52] <theangryepicbana> not quite?

[22:52] <holyghost> I am writing scheme IRC bots ATM

[22:53] <theangryepicbana> are you at all familiar with discord?

[22:53] <holyghost> lol

[22:53] *** kktt007 left
[22:53] <holyghost> no

[22:53] <theangryepicbana> mhm

[22:53] <holyghost> you just popen ?

[22:53] <theangryepicbana> it's similar to normal IRC, but has more features

[22:53] <holyghost> ok

[22:53] <theangryepicbana> no, there's a normal application

[22:53] * holyghost is reading the rebol parse stuff

[22:54] <theangryepicbana> https://discord.com/new

[22:56] <holyghost> It seems all right, but I'm no fan of haskell posts

[22:56] <holyghost> HLL parsing is ok though

[22:56] <theangryepicbana> lol it's not haskell

[22:56] <holyghost> right

[22:56] <theangryepicbana> it's more similar to a parser generator or PEG parser similar to raku, but more dynamic

[22:56] * holyghost just read angryepicbanana *lol*

[22:57] <holyghost> coolnes

[22:57] <holyghost> PEG ?

[22:57] <oddp> Erm, did I unknowingly join #dadaism? ;)

[22:57] <holyghost> dynamic in the way of upper HLL features ?

[22:57] <holyghost> pegleg 

[22:58] <theangryepicbana> PEG stands for "parsing expression grammar"

[22:58] <holyghost> sure oddp :-)

[22:58] <holyghost> right

[22:58] <theangryepicbana> it's an idea that Raku grammars use

[22:58] <holyghost> problem is I'm more into older systems but rms told me to implement a langauage such as in slib into m68k

[22:59] <holyghost> ok, I'm don't know much about that grammar

[22:59] <theangryepicbana> ah ok

[23:00] <theangryepicbana> there's always time to learn something new I guess

[23:00] <holyghost> grammars are mostly used within our system

[23:00] <holyghost> sure 

[23:00] <holyghost> fact is, you have to have the right grammar compiler e.g. yacc but that's old

[23:01] *** xinming left
[23:01] <holyghost> My promotor Theo always told me to look into grammar things, languages

[23:01] <holyghost> but I'm more of a AI fan

[23:01] <holyghost> which you cannot do right these except for scheme and LISP

[23:01] <holyghost> AFAIK

[23:02] <holyghost> I know HLL features and grammars though

[23:02] <theangryepicbana> well, you can always use AI modules from Python in Raku by using Inline::Python

[23:02] <holyghost> nice

[23:02] <holyghost> I didn't know there's a python inline

[23:02] *** pecastro left
[23:02] <holyghost> TBH, we had a double java VM which had futures

[23:03] <holyghost> it had inline java but I told them to program in the new language

[23:03] <holyghost> it was called ambienttalk

[23:03] <theangryepicbana> I've heard of that before

[23:03] <holyghost> see on VUB pages, vub.ac.be

[23:03] <holyghost> it's not stupid but there are trolls in it

[23:04] <holyghost> It's google

[23:04] <holyghost> I told them to produce something with it instead of just complaining about the trolls

[23:04] <holyghost> so they have end user software

[23:04] <holyghost> google Belgium

[23:05] <holyghost> I told them to write a new AWT with it and so on

[23:05] <holyghost> without inlining

[23:05] <holyghost> I'm not too sure about those features for languages, personally

[23:05] <holyghost> inlin I mean

[23:05] <holyghost> s/inlin/inline/

[23:05] *** xinming joined
[23:06] <theangryepicbana> hmm

[23:06] <theangryepicbana> yeah that kinda stuff is out of my area lol

[23:06] <holyghost> what'd you think about that

[23:06] <holyghost> ok

[23:06] <holyghost> It's a double VM

[23:06] <holyghost> *drink*

[23:08] <holyghost> WAM I'm smoking

[23:09] *** MilkmanDan left
[23:11] <holyghost> theangrybanana : how did you code the surfacing system of the bot ?

[23:11] <holyghost> It's just a redroid ?

[23:11] <theangryepicbana> like I said earlier, I did not make the bot. I don't remember who did, but they're probably around here somewhere

[23:11] <holyghost> theangryepicbanana I mean

[23:11] <holyghost> ok sorry

[23:12] *** markong left
[23:12] <theangryepicbana> no problem, just wanted to remind you

[23:12] <holyghost> thing is, I cannot code shit anymore as my scheme code won't work

[23:12] <holyghost> I was elevated but than again not

[23:12] <holyghost> anyway, rebol is nice

[23:12] <holyghost> I just system hack it again and again

[23:13] <theangryepicbana> cool

[23:13] * holyghost is a bit too drunk

[23:15] <holyghost> anyway, if it's not scheme I don't want to learn it

[23:15] <holyghost> bracket wise

[23:16] <holyghost> theangryepicbanana : we're lost in shadowlands :-)

[23:17] <holyghost> an Iron Crown Enterprises card game (CCG)

[23:17] <holyghost> they're the old Tolkien artists card game

[23:17] <theangryepicbana> "anyway, if it's not scheme I don't want to learn it" so... lisp languages?

[23:17] <holyghost> indeed

[23:18] <holyghost> for AIs, theorem provers, prolog/progol and adaptive systems

[23:18] <theangryepicbana> mhm. scheme is not the only lisp language btw

[23:18] <holyghost> I'm writing a theorem prover for delimiters in java tokenizers

[23:19] <theangryepicbana> ok

[23:19] *** MilkmanDan joined
[23:19] <holyghost> java has a StringTokenizer class since java 1 or 2

[23:19] <holyghost> it's not fast though

[23:19] <holyghost> we i13s for it :-)

[23:20] <holyghost> I'm also doing a prolog system for it at the same time

[23:20] <holyghost> or prgol I don't remember

[23:20] <holyghost> s/prgold/progol

[23:20] <holyghost> s/prgol/progol

[23:21] <holyghost> *we need

[23:21] <holyghost> you can shift 32/64 bit code for it, but I wanted something heavier

[23:22] <holyghost> I wrote a intelligent window manager code for it for gnustep

[23:22] <theangryepicbana> gnustep? so... objective-c?

[23:22] <holyghost> it's online somewhere, I don't remember the login on github

[23:22] <holyghost> indeed

[23:23] <holyghost> On Xliff's server (mine) I have a objc from gcc for psp

[23:23] <holyghost> objc is way cool for it

[23:24] <holyghost> psp == Playstation Portable

[23:24] <holyghost> I don't remember what I did for the intelligent window system though

[23:24] <theangryepicbana> yeah objective-c is cool, but it's interesting that other people still actually use it for stuff

[23:24] <holyghost> sure

[23:25] <holyghost> It's NexT

[23:25] <holyghost> your macos 7.x.y :-)

[23:25] <holyghost> 7.5.5

[23:25] <holyghost> and earlier

[23:25] <holyghost> rms paid a version for it for GNU

[23:25] <holyghost> libobjc2 from gcc is bull

[23:26] <holyghost> on macs it's nicer

[23:26] *** MilkmanDan left
[23:27] <holyghost> I have a mountain lion 10.8 system where I write some things on, it's Xliff's server only client except for my ibook G4

[23:27] <theangryepicbana> ideally, you'd want to use clang objc

[23:27] <holyghost> indeed, it does not grovel

[23:27] <holyghost> llvm and such

[23:28] <holyghost> theangryepicbanana : what do you like most, macs (OS X I mean) or BSDs ?

[23:28] <theangryepicbana> I've never used BSD, so probably Mac OS

[23:29] <holyghost> sure, *smoking*

[23:32] <holyghost> you cannot do rebol on old macs though

[23:32] <holyghost> so I guess you like more PPC systems ?

[23:33] <holyghost> it'd be nice to have such things on IRIX or SGI machines

[23:33] <holyghost> which are now sony, psp , R9000 been

[23:33] <theangryepicbana> "you cannot do rebol on old macs though" I do believe that there are versions for PPC macs

[23:33] <theangryepicbana> yes

[23:33] <theangryepicbana> *so yes

[23:34] <theangryepicbana> idk what IRIX or SGI are though

[23:35] <holyghost> *fetch a drink, smoking*

[23:36] *** theangryepicbana left
[23:37] *** MilkmanDan joined
[23:38] <holyghost> right, troubles I guess

[23:39] <holyghost> anyway, rebol is a nice language, but I'd reimplement it in scheme, just for gigs

[23:39] <holyghost> like my tokenizer code

[23:39] <holyghost> in scheme

[23:48] <holyghost> it's just HLL functionality

[23:50] *** Tirifto left
[23:53] *** lucasb joined
[23:54] <holyghost> in C for example

