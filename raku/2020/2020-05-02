[00:05] *** pilne joined
[00:06] *** devmikey left
[00:10] *** pecastro left
[00:22] *** hungrydonkey joined
[00:42] *** finsternis left
[01:16] *** molaf left
[01:19] *** ensamvarg_g6 joined
[01:28] *** molaf joined
[02:01] *** hungryd14 joined
[02:02] *** hungrydonkey left
[02:06] *** hungryd14 left
[02:07] *** vike left
[02:08] *** kst left
[02:10] *** hungrydonkey joined
[02:13] *** vike joined
[02:19] *** ManifestO left
[02:20] *** ManifestO joined
[02:25] *** pilne left
[02:26] *** hungryd28 joined
[02:30] *** hungrydonkey left
[02:41] *** hungryd28 left
[02:42] *** hungrydonkey joined
[02:56] *** vike left
[03:00] *** brtastic left
[03:10] *** vike joined
[03:36] *** vike left
[03:37] *** moon-child joined
[03:37] *** hungrydonkey left
[03:37] *** hungrydonkey joined
[03:52] *** vike joined
[04:07] *** lembark left
[04:11] *** gabiruh left
[04:12] *** farcas1982regreg left
[04:15] *** vike left
[04:43] *** gabiruh joined
[04:48] *** JojoBabie joined
[04:48] *** hungrydonkey left
[04:50] *** JojoBabie left
[04:52] *** aborazmeh left
[04:58] *** gabiruh left
[04:58] *** hungrydonkey joined
[05:00] *** vike joined
[05:09] *** gabiruh joined
[05:12] *** hungrydonkey left
[05:13] *** SCHAPiE left
[05:13] *** SCHAPiE joined
[05:19] *** hungrydonkey joined
[05:26] *** hungrydonkey left
[05:31] *** hungrydonkey joined
[05:32] *** hungrydonkey left
[05:37] *** sjm_uk joined
[06:05] *** hungrydonkey joined
[06:07] *** vike left
[06:07] *** hungrydonkey left
[06:17] *** gabiruh left
[06:17] *** gabiruh joined
[06:37] *** rindolf joined
[06:38] <AlexDaniel> guifa2: actually, I do use it

[06:38] <AlexDaniel> guifa2: https://github.com/Raku/whateverable/search?q=ex&unscoped_q=ex

[06:48] <AlexDaniel> lembark: when was the last time FindBin::libs worked?

[06:48] <tellable6> AlexDaniel, I'll pass your message to lembark

[06:52] <AlexDaniel> lembark: also, it does seem to install just fine: https://gist.github.com/AlexDaniel/acf836bbee9c4bfe136b9c5f341d63ba

[06:52] <tellable6> AlexDaniel, I'll pass your message to lembark

[06:52] <AlexDaniel> lembark: that's on dispatcher-revert branch but I think it's the same on master

[06:52] <tellable6> AlexDaniel, I'll pass your message to lembark

[06:55] *** sauvin joined
[07:01] *** sjm_uk left
[07:11] *** brtastic joined
[07:23] *** farcas1982regreg joined
[07:52] <guifa2> AlexDaniel at least in the first one, it looks like you could use :o just as well, no?

[07:55] <AlexDaniel> guifa2: no, it's meant to go through all possible matches, :o won't work 

[07:56] <AlexDaniel> it's like brute force :)

[07:56] <AlexDaniel> maybe in the last one you can get away with :o

[07:57] <AlexDaniel> ah no, not really

[08:18] <Geth> ¦ doc: 6eb27e5363 | lukasvalle++ | 2 files

[08:18] <Geth> ¦ doc: link to pragma entry for 'use lib' on modules page

[08:18] <Geth> ¦ doc: 

[08:18] <Geth> ¦ doc: add example for use lib with IO:Path

[08:18] <Geth> ¦ doc: documents https://github.com/Raku/roast/commit/0bed3721473fc472e and closes 'use lib accepts IO::Path objects' in https://github.com/Raku/doc/issues/2632

[08:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/6eb27e5363

[08:18] <Geth> ¦ doc: 6db0c1d4ff | lukasvalle++ | doc/Language/pragmas.pod6

[08:18] <Geth> ¦ doc: fix code format

[08:18] <linkable6> Link: https://docs.raku.org/language/pragmas

[08:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/6db0c1d4ff

[08:19] <Geth> ¦ doc: cfe079c0ae | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[08:19] <Geth> ¦ doc: Merge pull request #3356 from lukasvalle/master

[08:19] <Geth> ¦ doc: 

[08:19] <Geth> ¦ doc: example for use lib with IO:Path

[08:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/cfe079c0ae

[08:19] *** girafe joined
[08:27] *** sjm_uk joined
[08:32] *** vike joined
[08:34] *** sena_kun joined
[08:56] *** Altai-man_ joined
[08:58] *** vike left
[08:59] *** sena_kun left
[09:23] <guifa2> AlexDaniel meh.  I'm still putting it as low priority ;-)

[09:28] *** pecastro joined
[09:29] *** sjm_uk left
[09:30] *** sjm_uk joined
[09:45] *** Black_Ribbon left
[09:57] *** vike joined
[09:57] *** ManifestO left
[10:04] *** Manifest0 joined
[10:10] <El_Che> new comma release? nice!

[10:10] <El_Che> I can upgrade my intellij now :)

[10:13] <El_Che> thx everyone at edument!

[10:14] *** brtastic left
[10:16] *** telex left
[10:17] *** telex joined
[10:30] <El_Che> mm, the new release is still broken on the latest intellij

[10:32] <El_Che> it's probably still on the previous platform release 

[10:36] *** chloekek joined
[10:43] *** sjm_uk left
[10:57] *** sena_kun joined
[10:59] *** Altai-man_ left
[11:02] *** sjm_uk joined
[11:04] <sena_kun> El_Che, yes

[11:04] <sena_kun> El_Che, no migration yet, I suspect next release will support it.

[11:05] <sena_kun> s/suspect/hope/

[11:14] <El_Che> no prob, I was confused (again)

[11:14] <El_Che> I'll install the standalone comma for a while

[11:14] <El_Che> the only problem I found was that I could install plugins I used on intellij

[11:15] <El_Che> like support for dockerfiles

[11:15] <sena_kun> El_Che, "couldn't"?

[11:15] <El_Che> downloading the latest one to test it

[11:16] <sena_kun> releasable6, status

[11:16] <releasable6> sena_kun, Next release will happen when it's ready. 2 blockers. 166 out of 373 commits logged (⚠ 3 warnings)

[11:16] <releasable6> sena_kun, Details: https://gist.github.com/c0c22951a0da945aeafabf0061c9e679

[11:16] *** mowcat joined
[11:17] <lizmat> sena_kun: I guess it's about time to update Changelog Draft ?

[11:17] <MasterDuke> huh, releasable6 counts closed tickets as blockers?

[11:19] <sena_kun> lizmat, not yet, I think. I'm having breakfast now, then I'll look at blin output in revert branch. I think I'll also manually diff all files before PRs and after revert, because git can leave artifacts un-reverted. Also, someone has to confirm this fixes performance as I was too confused on how to run [Tux]++ CSV tests locally.

[11:19] <lizmat> the revert has not been merged yet, right ?

[11:19] <sena_kun> And given all of this works out nicely, I'll put up a changelog draft, the easiert piece.

[11:19] <sena_kun> lizmat, I really hope it isn't.

[11:19] <sena_kun> https://github.com/rakudo/rakudo/pull/3651

[11:20] <lizmat> yeah ok  :-)

[11:20] <sena_kun> oh, I see new feedback

[11:20] <El_Che> sena_kun: the problem is that the marketplace can not be loaded

[11:20] <sena_kun> Spent two straight hours walking and now need to get some food first. :)

[11:21] <sena_kun> El_Che, that's a known issue. :(

[11:22] <El_Che> sena_kun: https://strasbourg.apt-get.be/f/859fae27fdb84575b791/

[11:22] <El_Che> ah ok

[11:22] *** chloekek left
[11:27] <AlexDaniel> MasterDuke: no idea…

[11:28] <AlexDaniel> MasterDuke: maybe it's some sort of API cache

[11:28] <AlexDaniel> releasable6, status

[11:28] <releasable6> AlexDaniel, Next release will happen when it's ready. 2 blockers. 166 out of 373 commits logged (⚠ 3 warnings)

[11:28] <AlexDaniel> hmmm

[11:28] <releasable6> AlexDaniel, Details: https://gist.github.com/e88a84a6e3cfa89f9e3955210ce46263

[11:29] <AlexDaniel> releasable6, status

[11:29] <releasable6> AlexDaniel, Next release will happen when it's ready. 1 blocker. 166 out of 373 commits logged (⚠ 3 warnings)

[11:29] <releasable6> AlexDaniel, Details: https://gist.github.com/8f432b214bbe7cf8bcb93bc5f48bb671

[11:29] <AlexDaniel> MasterDuke: yep, it's a github issue

[11:29] <AlexDaniel> I wrote a comment and then deleted it, I think this refreshed some sort of cache

[11:29] <MasterDuke> ah

[11:30] *** tejr left
[11:31] *** tejr joined
[11:41] *** oneeggeach joined
[11:44] *** chloekek joined
[11:48] *** aeruder left
[11:48] *** aeruder joined
[11:50] *** MilkmanDan left
[11:51] *** rindolf left
[11:51] *** rjbs left
[11:51] *** Voldenet left
[11:52] *** rjbs joined
[11:52] *** MilkmanDan joined
[11:54] *** rindolf joined
[11:54] *** Voldenet joined
[11:54] *** Voldenet left
[11:54] *** Voldenet joined
[12:11] <Geth> ¦ doc: 44ddeb71e2 | (JJ Merelo)++ | doc/Type/Seq.pod6

[12:11] <Geth> ¦ doc: Regex smartmatch on sequences refs #2632

[12:11] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/44ddeb71e2

[12:11] <linkable6> Link: https://docs.raku.org/type/Seq

[12:11] <linkable6> DOC#2632 [open]: https://github.com/Raku/doc/issues/2632 [Hacktoberfest][RFE][big][docs][good first issue][help wanted][new][⚠ Top Priority ⚠] Checklist for 6.d

[12:17] *** brtastic joined
[12:23] *** sjm_uk left
[12:29] *** sjm_uk joined
[12:51] *** molaf left
[12:53] *** pecastro left
[12:53] *** oneeggeach left
[12:54] *** oneeggeach joined
[12:54] *** oneeggeach left
[12:54] *** oneeggeach joined
[12:54] *** aborazmeh joined
[12:54] *** aborazmeh left
[12:54] *** aborazmeh joined
[12:56] *** Altai-man_ joined
[12:57] *** tigerpaws joined
[12:58] *** oneeggea_ joined
[12:59] *** sena_kun left
[12:59] *** oneeggeach left
[13:02] <tigerpaws> Hi. I'm new to raku, but I've used perl5 for 20 years, so I understand a bit. Can anybody point me to where in the documentation it describes the 'function: arg' syntax? (it's the colon I don't understand yet)

[13:10] <El_Che> tigerpaws: it's a fat comma

[13:10] <El_Che> it replace () in this case

[13:10] <El_Che> function(arg)

[13:10] <El_Che> for shorter stuff easier on the eyes

[13:11] <El_Che> push @array: $elem

[13:11] <El_Che> corresponds with push(@array, $elem) you know and love :)

[13:11] <tigerpaws> @El_Che so, it's an operator? a circumflex operator? 

[13:12] <El_Che> I never looked it like that, mm

[13:12] <El_Che> eg in signatures

[13:12] <El_Che> sub MAIN(:$param) { ... }

[13:12] <El_Che> it just means param => $param

[13:13] <El_Che> I always just saw it as a shortcut in my head

[13:14] <El_Che> tigerpaws: https://docs.raku.org/type/Pair

[13:14] <El_Che> I think it's just a pair and the parens are just optional

[13:14] <El_Che> Pair

[13:14] <lizmat> in the case of push @array: elem, the colon is the invocant marker

[13:14] <Altai-man_> tigerpaws, this is alternative syntax when you don't want to put too many parens around. It goes well if you have multiline calls, e.g. `Person.new: name, age, some-long-stuff, <newline> some-more-long-stuff;`

[13:14] <lizmat> it will basically make the parameter the invocant of the function

[13:15] <Altai-man_> oops, multiline call

[13:15] <lizmat> so "push @a: value" is the same as [email@hidden.address]
[13:15] <El_Che> lizmat: interesting

[13:16] <tigerpaws> I understand the use in signatures. I'm doing a presentation at a meetup and I want to be able to answer questions.  So, for marking the invocant, it's the term before the : that's the invocant. 

[13:17] <El_Che> You could turn it arround by saying everything is an object and most functions can be a method

[13:18] <El_Che> split("foo faa", ' ')

[13:18] <El_Che> "foo".split(' ')

[13:18] <MasterDuke> didn't scimon (sp?) do a presentation awhile ago about all the uses of ':' in raku (perl 6 at the time)?

[13:19] <tigerpaws> ok. I think I understand. I will practice it a bit to be sure. to be clear, it's just the equivalent of function(invocant, arg). If there are two args, does it still work? 

[13:19] <lizmat> tigerpaws: yeah, note it has the same use if you want to e.g. use the direct invocant, rather than a decontainerized one in a method

[13:19] <lizmat> method foo(\SELF: $arg1, $arg2)

[13:20] <lizmat> the name SELF is just that, could be anything (except "self" :-)

[13:20] <tigerpaws> @MasterDuke Is there any place where that presentation is available? youtube, slideshare? I'd love to see it. 

[13:22] <tigerpaws> @lizmat I've been puzzling over this since yesterday. I'm building a jupyter notebook for my presentation and copying/adapting bits of code from many places, but didn't understand them all. The colon was a particular sore point. 

[13:23] <lizmat> "everybody wants the colon" is one of TimToady's well known expressions  :-)

[13:24] <El_Che> tigerpaws: in case you have twitter you can ping him?

[13:25] <El_Che> tigerpaws: or I can ping him if you want

[13:25] <MasterDuke> tigerpaws: a quick googling isn't finding anything, but i may have some of the details wrong

[13:25] <tigerpaws> @El_Che ping scimon?  or TimToady? 

[13:25] <AlexDaniel> https://thelackthereof.org/Perl6_Colons

[13:25] <AlexDaniel> awwaiid++

[13:26] <AlexDaniel> also http://blogs.perl.org/users/zoffix_znet/2018/06/perl-6-colonpairoscopy.html

[13:26] <MasterDuke> AlexDaniel++ better memory

[13:26] <El_Che> ah great

[13:26] <El_Che> and to think we were accussing scimon :)

[13:27] <tigerpaws> @AlexDaniel Thanks. I'll check that out.  

[13:27] <AlexDaniel> MasterDuke: thelackthereof.org is using Oddmuse (which I used to maintain), it's not that I have better memory, it's just that there is a special place for that website in particular :)

[13:28] <tigerpaws> You guys are great. I never thought I'd get answers this quick. 

[13:28] *** brtastic left
[13:29] <AlexDaniel> tigerpaws: I don't see any mentions of it in the documentation, but indirect invocant syntax appears once: https://docs.perl6.org/language/objects#index-entry-indirect_invocant_syntax

[13:29] <tigerpaws> I have a second question also on the syntax: in '(* + 2)(2)'  what is it that makes the (* + 2) a function? Just the * or the () afterwards. 

[13:30] <jnthn> The * being an argment to an operator

[13:30] <lizmat> * + 2   is really the same as { $_ + 2 }

[13:31] <AlexDaniel> well, not the same…

[13:31] <AlexDaniel> but similar, yeah

[13:31] <jnthn> (There are a few operators that opt out of this.)

[13:31] <lizmat> well, what's the difference other than one is a WhateverCode, and the other is a Block ?

[13:32] <AlexDaniel> lizmat: the signature, for example

[13:32] <AlexDaniel> you can call {} without args

[13:32] <AlexDaniel> m: { say $_; say 42 }()

[13:32] <camelia> rakudo-moar 9b503292e: OUTPUT: «(Any)␤42␤»

[13:32] <AlexDaniel> m: (* + 2)()

[13:32] <camelia> rakudo-moar 9b503292e: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[13:34] <tigerpaws> So it's a block because of the whatevercode and the () afterward?  The whatevercode is always looking for an argument, so it needs to be a function, right? 

[13:34] <jnthn> tigerpaws: No, the () after doesn't matter.

[13:34] <AlexDaniel> tigerpaws: () just calls it, it doesn't matter

[13:34] <jnthn> m: my $a = * + 2; say $a(40)

[13:34] <camelia> rakudo-moar 9b503292e: OUTPUT: «42␤»

[13:34] <jnthn> You can even store it away in a variable.

[13:35] <AlexDaniel> m: my $a = { $_ + 2 }; say $a(40) # just like any other block though

[13:35] <camelia> rakudo-moar 9b503292e: OUTPUT: «42␤»

[13:35] <tigerpaws> ok, so the existence of the whatevercode makes it a block.

[13:36] <AlexDaniel> well, it's not really a block

[13:36] <AlexDaniel> I should've been clearer :)

[13:36] <AlexDaniel> but it's Code, yeah

[13:36] <AlexDaniel> lizmat: btw

[13:37] <AlexDaniel> m: dd (* + 2)

[13:37] <camelia> rakudo-moar 9b503292e: OUTPUT: «{ ... }␤»

[13:37] <AlexDaniel> lizmat: that makes it look like a block?

[13:37] <lizmat> m: dd ((* + 2))

[13:37] <camelia> rakudo-moar 9b503292e: OUTPUT: «{ ... }␤»

[13:37] <lizmat> hmmm

[13:38] <AlexDaniel> 6c: dd (* + 2)

[13:38] <tigerpaws> So the compiler identifies it as a block.  (I'm running 6.d) 

[13:38] <committable6> AlexDaniel, https://gist.github.com/18caecf989cea86977beca1b45f93a55

[13:38] <AlexDaniel> lizmat: ↑ see, WhateverCode.new sounds like a better description?

[13:39] <AlexDaniel> bisect: dd (* + 2)

[13:39] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=9b50329) because on both starting points the exit code is 0

[13:39] <jnthn> m: say (* + 2).^mro

[13:39] <camelia> rakudo-moar 9b503292e: OUTPUT: «{ ... }␤»

[13:39] <jnthn> hah!

[13:39] <AlexDaniel> xD

[13:39] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/a71f7a2f7c82adbf615e1c2f53d5117b

[13:39] <bisectable6> AlexDaniel, (2016-03-04) https://github.com/rakudo/rakudo/commit/360232a54fadc83efdafc29dfe808677bcde2865

[13:39] <jnthn> m: my $x = * + 2; dd $x.^mro

[13:39] <camelia> rakudo-moar 9b503292e: OUTPUT: «(WhateverCode, Code, Any, Mu)␤»

[13:39] <jnthn> Yeah, even by the type system it's not a block

[13:40] <lizmat> m: say (*+2).raku

[13:40] <camelia> rakudo-moar 9b503292e: OUTPUT: «{ ... }␤»

[13:40] <lizmat> m: say ({ $_ + 2 }).raku

[13:40] <camelia> rakudo-moar 9b503292e: OUTPUT: «-> ;; $_? is raw = OUTER::<$_> { #`(Block|64153088) ... }␤»

[13:42] <AlexDaniel> R#3653

[13:42] <linkable6> R#3653 [open]: https://github.com/rakudo/rakudo/issues/3653 WhateverCode.raku shows up as { … } but WhateverCode is not a Block

[13:42] <tigerpaws> So WhateverCode  is it's own type. 

[13:42] <lizmat> tigerpaws 

[13:42] <lizmat> yes

[13:42] *** brtastic joined
[13:45] <tigerpaws> This discussion is very interesting. I thought that the * was the Whatevercode, but it's not. It's the entire expression containing one or more *s. That changes things completely for my understanding. 

[13:46] <lizmat> AlexDaniel: 360232a54f

[13:46] <AlexDaniel> lizmat: I know why this doesn't work, btw

[13:46] <lizmat> 360232a54fadc83efdafc29dfe808677bcde2865

[13:46] <linkable6> (2016-03-04) https://github.com/rakudo/rakudo/commit/360232a54f Make Code.perl a bit more sensical

[13:46] <AlexDaniel> lizmat: it specifically ignores “whatever: SHA” because that's what bots tend to say

[13:47] <lizmat> ah, ok

[13:47] <lizmat> well, anyways, about 4 years ago, I changed it from "Code.new" to { ... }'

[13:47] <AlexDaniel> lizmat: and it's a bit hard for a bot to know if you're a bot or not :D

[13:47] <AlexDaniel> by you I mean, *you* :)

[13:47] <lizmat> I've been accused of being a bot  :-)

[13:48] <tigerpaws> Wow, this has been enlightening. 

[13:48] <AlexDaniel> lizmat: but… that's what bisectable6 linked above…

[13:48] <lizmat> m: dd WhateverCode.new

[13:48] <camelia> rakudo-moar 9b503292e: OUTPUT: «Cannot make a WhateverCode object using .new␤  in block <unit> at <tmp> line 1␤␤»

[13:49] <lizmat> so, making it that, would violate the roundtripping idea

[13:49] <jnthn> lizmat: Um.... {...} doesn't round-trip either? :)

[13:49] <AlexDaniel> lizmat: it's not like { … } roundtrips better

[13:49] <lizmat> m: dd { ... }

[13:49] <camelia> rakudo-moar 9b503292e: OUTPUT: «-> ;; $_? is raw = OUTER::<$_> { #`(Block|67238824) ... }␤»

[13:50] <jnthn> .raku.EVAL roundtripping for data is one thing, but for code there's never been any promises it will

[13:50] <tigerpaws> @jnthn btw, I had sent you an email, but I guess this is a better place to ask my question. I wanted to know whether raku numerical arrays could be sparse (i.e. with NaN entries), and what happened with operators in that case? 

[13:51] <lizmat> m: my @a; @a[2] = 42; dd @a.map: * + 2

[13:51] <camelia> rakudo-moar 9b503292e: OUTPUT: «Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤(2, 2, 44).Seq␤»

[13:51] <AlexDaniel> my @a = 4,8,15,16; @a[1]:delete; .say for @a

[13:51] <evalable6> AlexDaniel, rakudo-moar 9b503292e: OUTPUT: «4␤(Any)␤15␤16␤»

[13:51] <lizmat> tigerpaws: ^^

[13:53] <tigerpaws> Ok, so they can be sparse, but we have to manage the 'Any' values ourselves if operating on an array like that. Got it. 

[13:53] <jnthn> Yes, what lizmat said. :)

[13:56] <tigerpaws> Excellent. Wow, I've just learned a lot. I'll get back to the presentation I'm preparing, much wiser. Thank you all and I'll be back soon, because I've only started learning raku, it's only been three weeks since I saw my first jnthn presentation. 

[13:57] <lizmat> tigerpaws: you're welcome  :-)

[14:01] *** oneeggea_ left
[14:01] *** oneeggeach joined
[14:02] *** oneeggeach left
[14:02] *** oneeggeach joined
[14:02] *** oneeggeach left
[14:03] *** oneeggeach joined
[14:03] *** oneeggeach left
[14:03] *** oneeggeach joined
[14:04] *** oneeggeach left
[14:04] *** oneeggeach joined
[14:05] *** oneeggeach left
[14:14] *** brtastic left
[14:37] <tbrowder> nxadm: thnx for tip about rakudo-pkg: i haven't ever read far enough! i'm trying your deb9 docker image at the moment for travis-ci testing

[14:38] <tbrowder> .tell nxadm thnx for tip about rakudo-pkg: i haven't ever read far enough! i'm trying your deb9 docker image at the moment for travis-ci testing

[14:38] <tellable6> tbrowder, I haven't seen nxadm around, did you mean nadim?

[14:39] <tbrowder> hm, alias disconnect...

[14:49] *** caterfxo left
[14:56] *** caterfxo joined
[14:57] *** sena_kun joined
[14:58] *** Altai-man_ left
[15:13] *** sjm_uk left
[15:16] *** sjm_uk joined
[15:22] *** _jrjsmrtn left
[15:22] *** __jrjsmrtn__ joined
[15:34] <AlexDaniel> El_Che: ↑

[15:39] *** scovit joined
[15:58] *** aborazmeh left
[16:10] *** AlexDani` joined
[16:12] *** AlexDaniel left
[16:15] *** scovit left
[16:40] *** regreg joined
[16:42] *** farcas1982regreg left
[16:42] *** regreg is now known as farcas1982regreg

[16:44] *** Itaipu left
[16:44] *** melezhik joined
[16:47] <melezhik> Hi community! I queued to RakuDist test a bunch of Raku modules that require native dependencies - http://repo.westus.cloudapp.azure.com/sparky/queue

[16:47] <melezhik> so let's see what the test shows

[16:47] <melezhik> cc AlexDaniel

[16:47] <melezhik> cc AlexDaniel`:

[16:48] <melezhik> first one succeeds - App::OrgSleep ;-)

[16:49] <melezhik> I took the list from https://github.com/Raku/ecosystem-unbitrot/wiki

[16:49] *** AlexDani` is now known as AlexDaniel

[16:49] *** AlexDaniel left
[16:49] *** AlexDaniel joined
[16:49] <AlexDaniel> I don't think orgsleep has any tests x)

[16:50] <melezhik> if someone has any modules not listed here

[16:50] <melezhik> they could run it through an API

[16:50] <melezhik> curl -d os=debian -d sparky=1 http://repo.westus.cloudapp.azure.com/rakudist/api/run/$module_name

[16:51] <melezhik> AlexDaniel: http://repo.westus.cloudapp.azure.com/sparky/report/debian/42

[16:51] <melezhik> 16:48:00 05/02/2020 [bash: zef install App::OrgSleep] ===> Testing: App::OrgSleep:ver<0.0.8>

[16:51] <melezhik> at least what a log shows

[16:52] <AlexDaniel> melezhik: btw

[16:52] <AlexDaniel> c: f37213f88 say 42

[16:52] <committable6> AlexDaniel, ¦f37213f: «42␤»

[16:52] <AlexDaniel> c: dispatcher-revert say 42

[16:52] <committable6> AlexDaniel, ¦dispatcher-revert: «42␤»

[16:52] <melezhik> AlexDaniel: what do you mean?

[16:52] <AlexDaniel> melezhik: so whateverable now allows you to run stuff on non-master commits

[16:53] <melezhik> branches?

[16:53] <AlexDaniel> melezhik: which means that rakudist can also be used to test experimental changes in rakudo and stuff

[16:53] <melezhik> yeah, cool

[16:53] <AlexDaniel> melezhik: yes, branches :)

[16:54] <melezhik> now I am about to change RakuDist API to queue builds to Sparky, that highly-likely handles the load problem 

[16:55] <melezhik> so that now builds are in queue and my Azure VM won't overloaded :-)

[16:55] <melezhik> also nice API as a benefit

[16:56] <melezhik> AlexDaniel: AFIK git commits is commit, so one can select any branch by selecting proper commits

[16:56] *** Altai-man_ joined
[16:56] <AlexDaniel> melezhik: sure, but it also means that whateverable should follow all branches, which it didn't do

[16:57] *** cpage_ joined
[16:57] <AlexDaniel> melezhik: and then I fixed that and it still didn't work for other reasons :)

[16:57] <AlexDaniel> now it works :)

[16:57] *** sjm_uk left
[16:57] <melezhik> yeah, I guessed that

[16:57] <melezhik> btw - http://repo.westus.cloudapp.azure.com/sparky/report/debian/44

[16:57] *** aborazmeh joined
[16:57] *** aborazmeh left
[16:57] *** aborazmeh joined
[16:58] <melezhik> Failed to resolve any candidates. No reason to proceed

[16:58] <melezhik> weird because the module is modules.raku.org

[16:58] <melezhik> Audio::OggVorbis

[16:58] *** sena_kun left
[16:59] <AlexDaniel> melezhik: yeah, I can reproduce it locally

[16:59] *** cpage left
[16:59] *** cpage_ is now known as cpage

[16:59] *** brtastic joined
[17:00] <AlexDaniel> Xliff: https://colabti.org/irclogger/irclogger_log/raku?date=2020-05-02#l406

[17:00] <tellable6> AlexDaniel, I'll pass your message to Xliff

[17:13] <melezhik> AlexDaniel: it could be that meta file is broken

[17:14] <melezhik> so RakuDist happens to be useful to reveal some errors :-)

[17:16] <melezhik> some modules fail due to missing native libraries - http://repo.westus.cloudapp.azure.com/sparky/report/debian/49

[17:16] <melezhik> is not a big deal to add them

[17:17] <melezhik> I took all the dependencies from https://github.com/Raku/ecosystem-unbitrot/wiki 

[17:17] <melezhik> probably the list a bit outdated

[17:17] <melezhik> GLFW is not searchable - http://repo.westus.cloudapp.azure.com/sparky/report/debian/52

[17:29] *** sjm_uk joined
[17:35] <melezhik> AlexDaniel:  I am switching RakuDist to Sparky queues, the current blin API is going to change  and won't work for awhile, I'll let you know when it's ready

[17:36] <melezhik> HTML::Canvas fails, just an regular unit test failure - http://repo.westus.cloudapp.azure.com/sparky/report/debian/53

[17:42] *** melezhik left
[17:49] *** pilne joined
[17:54] *** Itaipu joined
[18:16] *** farcas1982regreg left
[18:17] *** farcas1982regreg joined
[18:23] *** pilne left
[18:31] *** gordonfish left
[18:32] *** mowcat left
[18:35] *** pilne joined
[18:41] *** Itaipu_ joined
[18:42] *** Itaipu left
[18:51] *** gordonfish joined
[18:57] *** sena_kun joined
[18:59] *** Altai-man_ left
[19:09] *** ensamvarg_g6 left
[19:18] <Geth> ¦ doc: lukasvalle++ created pull request #3358: Explicit mention behavior with negative values for interval.

[19:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3358

[19:44] *** rindolf left
[19:49] *** sjm_uk left
[20:10] *** sauvin left
[20:13] *** brtastic left
[20:17] *** aborazmeh left
[20:18] *** sauvin joined
[20:20] *** eseyman left
[20:22] <El_Che> tbrowder: hi :) Other nick on irc :)

[20:24] *** Black_Ribbon joined
[20:24] <tbrowder> oh, love that rakudo-pkg

[20:25] <tigerpaws> Hi, El_Che. Any idea why this gives a strange result:  say  5, { ( $_ + 5 ) * 2 } ... 100   - I thought it should stop when $_ reaches 100 or more, but it doesn't.

[20:27] *** farcas1982regreg left
[20:29] <El_Che> tigerpaws: not right away, it's look like too much golfing for me

[20:29] <lizmat> if you're using a Callable as a producer, the endpoint must match exacty

[20:29] *** brtastic joined
[20:29] <tigerpaws> No problem. Thanks. 

[20:29] <lizmat> because a Callable can do whatever it pleases, so any > or < test wouldn't make sense

[20:29] <lizmat> tigerpaws: ^^

[20:30] <El_Che> tbrowder: I have some plans to support more distros and versions. I am rewriting the backend to make it more generic

[20:30] *** eseyman joined
[20:31] <El_Che> spining off a pkgbuilder app that can build other stuff besides rakudo-pkg

[20:32] <tigerpaws> @lizmat Ok, that works. That makes it tricky to figure ouyt what the endpoint needs to be. But I guess we can put that in the callable. 

[20:32] <lizmat> you can put a "last" in the producer Callable to indicate the end of the sequence, and use * as the endpoint

[20:33] <lizmat> m: dd 1,2,3, { last } ... *

[20:33] <camelia> rakudo-moar f115a8a55: OUTPUT: «(1, 2, 3).lazy.Seq␤»

[20:33] *** farcas1982regreg joined
[20:34] <El_Che> tigerpaws: I prefer to do it the old way:

[20:34] <tigerpaws> I just tried last and my machine is going into the next galaxy; but I didn't use * as the endpoint. 

[20:34] <El_Che> m: say ($_ + 5) * 2 for 5 ... 100

[20:34] <camelia> rakudo-moar f115a8a55: OUTPUT: «20␤22␤24␤26␤28␤30␤32␤34␤36␤38␤40␤42␤44␤46␤48␤50␤52␤54␤56␤58␤60␤62␤64␤66␤68␤70␤72␤74␤76␤78␤80␤82␤84␤86␤88␤90␤92␤94␤96␤98␤100␤102␤104␤106␤108␤110␤112␤114␤116…»

[20:34] <El_Che> m: say ($_ + 5) * 2 for 5 ... 20

[20:34] <camelia> rakudo-moar f115a8a55: OUTPUT: «20␤22␤24␤26␤28␤30␤32␤34␤36␤38␤40␤42␤44␤46␤48␤50␤»

[20:34] <tigerpaws> I'm doing a demo of a generator. I guess this is not a good callable for a demo. 

[20:35] <El_Che> tigerpaws: look for something that's awful impractical to do it the classical way

[20:35] *** robertle joined
[20:37] <tigerpaws> @El_Che: true. I'll have to think about it.  Still, now that I know I have to match the endpoit exactly, I'm already further ahead. 

[20:39] <robertle> jnthn: https://github.com/robertlemmen/raku-readwritelock but only if you are bored, I'd appreciate any comments but the main questions I had did magically clarify themselves during the implementation...

[20:41] <tigerpaws> Thanks, guys. There's so much to learn. I appreciate your help. Have a good evening or whatever. 

[20:42] <El_Che> tigerpaws: keep us posted on the talk

[20:42] <El_Che> it sounds interesting

[20:43] <tigerpaws> I will. It's in a Jupyter notebook, so I will make it publicly available once I translate it (it's in french).  It's called ''A Few Tidbits of Raku' 

[20:44] *** sena_kun left
[20:45] <El_Che> Des petits morceaux de Raku :)

[20:45] <tigerpaws> It's along the same lines as johnathan's "Emergent Program' talk, meant to point out interesting parts of Raku, but to non perl people. 

[20:46] <tigerpaws> Nearly:" Quelques bouchées de perles - Raku un langage ultra-moderne"

[20:46] <El_Che> tapas!

[20:46] <El_Che> :)

[20:47] <tigerpaws> I'll keep you up to date. 

[20:47] <El_Che> tigerpaws++

[20:53] *** robertle left
[21:02] *** hankache joined
[21:03] *** hankache left
[21:04] *** hankache joined
[21:05] *** hankache left
[21:05] *** hankache joined
[21:09] <El_Che> I am probably doing something very stupid, but can someone have a look at my simple MAIN()? https://gist.github.com/nxadm/b01e357d923955f2f1f66922f9caa259

[21:09] <El_Che> I am trying to use an array as a named parameter

[21:10] <El_Che> :@env in MAIN, if I pass "--env=value" MAIN exit with an error, if I run it with "--env=value --env=value2" I get both elements

[21:11] *** brtastic left
[21:13] <MasterDuke> i think that might be a known problem?

[21:13] <MasterDuke> limitation might be more accurate?

[21:13] <El_Che> That's not an array if it has only 1 element?

[21:14] <MasterDuke> yeah

[21:14] <El_Che> (didn't know about it and it has been driving me mad :) )

[21:15] <El_Che> Thx

[21:15] <MasterDuke> i'm only about 90% sure on that though, so should probably get a second opinion

[21:15] <MasterDuke> AlexDaniel: ^^^ ?

[21:15] *** hankache left
[21:33] *** cognomin_ joined
[21:37] *** cognominal left
[21:50] *** aborazmeh joined
[21:50] *** aborazmeh left
[21:50] *** aborazmeh joined
[22:40] *** gdonald left
[22:49] *** chloekek left
[22:49] *** cognominal joined
[22:52] *** cognomin_ left
[23:37] *** guifa joined
[23:38] <guifa> There's no way to store an anonymous multi sub in a &foo var, right?  I feel like I've asked it before and got an answer but wanted to do double check

[23:50] <timotimo> subs are lexically scoped, and you can return or store something from one scope into an outer scope, which is perhaps a good enough compromise towards an anonymous sub

[23:53] *** kst joined
