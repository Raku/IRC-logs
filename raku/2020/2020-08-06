[00:12] *** wamba left
[00:25] *** aborazmeh joined
[00:25] *** aborazmeh left
[00:25] *** aborazmeh joined
[00:38] *** cpan-raku left
[00:39] *** cpan-raku joined
[00:39] *** cpan-raku left
[00:39] *** cpan-raku joined
[00:40] *** markoong left
[00:53] <jdv79> tony-o: your addendum doesn't say how cpan does not support ver/auth/api.

[01:01] <jdv79> also, i still don't get the point of api - feels like a misfeature

[01:07] *** maggotbrain left
[01:08] *** maggotbrain joined
[01:12] *** maggotbrain left
[01:13] *** Altai-man_ joined
[01:14] *** maggotbrain joined
[01:15] *** sena_kun left
[01:18] <guifa2> .tell jmerelo I have the Superposition article posted.  Scheduled it for the 8th, but feel free to change it to someone else, didn't see if anyone else was scheduled

[01:18] <tellable6> guifa2, I'll pass your message to JJMerelo

[01:36] *** guifa2 left
[01:37] *** guifa2 joined
[01:42] *** aborazmeh left
[01:47] *** molaf left
[02:00] *** molaf joined
[02:22] <codesections> I can see Raku being hit by the Lisp Curse pretty badly.  Just while working on a simple CLI, I ran into some limitations of the built-in arg-parsing (not providing helpful error messages for incorrect options).  Since Raku is so powerful, I wrote my own argument handling code which, in a dozen or so lines, is 60% of the way to being an arg parsing library

[02:23] <codesections> And there's a decent chance that it will *stay* 60% of a library, and never grow into a real one

[02:27] *** gnufr33dom joined
[02:33] *** clarjon1 joined
[02:36] *** lucasb left
[03:36] *** quotable6 left
[03:36] *** nativecallable6 left
[03:36] *** coverable6 left
[03:36] *** tellable6 left
[03:36] *** shareable6 left
[03:36] *** linkable6 left
[03:36] *** bisectable6 left
[03:36] *** releasable6 left
[03:36] *** greppable6 left
[03:36] *** benchable6 left
[03:36] *** unicodable6 left
[03:36] *** evalable6 left
[03:36] *** bloatable6 left
[03:36] *** statisfiable6 left
[03:36] *** reportable6 left
[03:36] *** committable6 left
[03:36] *** sourceable6 left
[03:36] *** notable6 left
[03:36] *** squashable6 left
[03:36] *** evalable6 joined
[03:36] *** benchable6 joined
[03:36] *** unicodable6 joined
[03:37] *** bisectable6 joined
[03:37] *** statisfiable6 joined
[03:37] *** greppable6 joined
[03:37] *** squashable6 joined
[03:37] *** sourceable6 joined
[03:37] *** reportable6 joined
[03:38] *** bloatable6 joined
[03:38] *** quotable6 joined
[03:38] *** committable6 joined
[03:38] *** nativecallable6 joined
[03:38] *** coverable6 joined
[03:38] *** linkable6 joined
[03:38] *** tellable6 joined
[03:38] *** notable6 joined
[03:38] *** releasable6 joined
[03:39] *** shareable6 joined
[03:59] *** marcusr left
[04:00] *** marcusr joined
[04:01] *** Sgeo left
[04:03] *** Sgeo joined
[04:07] *** Sgeo left
[04:11] *** Sgeo joined
[04:14] *** sena_kun joined
[04:16] *** Altai-man_ left
[04:22] *** dataangel left
[04:24] *** xinming joined
[04:27] *** dataangel joined
[04:29] <tony-o> jdv79: cpan won't index File::Temp from two different pause users with the same version

[04:30] <tony-o> you can test that by downloading a File::Temp and uploading it to the appropriate directory and waiting to get an email letting you know it couldn't index

[04:31] <tony-o> the "api" is basically handling the features of pause, indexing/filing into appropriate places a package manager should look/authenticating so it's not just a trash heap of tar files

[04:33] *** Kaeipi left
[04:33] *** Kaeipi joined
[04:39] *** ab5tract left
[04:43] *** zacts left
[05:14] *** bocaneri joined
[05:15] *** ab5tract joined
[05:41] *** zacts joined
[05:43] <jdv79> tony-o: I don't think that used to be true but in any case it shouldn't be true.  for instance, there are 2 JSON::Tiny dists from 2 different users in the p6-dists index.  if its broken, it just needs to be fixed.

[06:09] *** Kaeipi left
[06:10] *** Kaiepi joined
[06:10] *** ab5tract_ joined
[06:11] *** ab5tract_ left
[06:12] *** ab5tract_ joined
[06:14] *** Altai-man_ joined
[06:16] *** sena_kun left
[06:30] *** skids left
[06:40] *** ufobat joined
[06:50] *** kensanata joined
[06:54] *** andrzejku joined
[07:01] *** grumble left
[07:02] *** grumble joined
[07:07] *** leont joined
[07:23] *** patrickb joined
[07:35] *** ufobat left
[07:40] *** fluca1978 joined
[07:42] <fluca1978> is there a way to get operators from an object using MOP? Something like .^methods ?

[07:43] <moritz> if by operators you mean methods, then yes :D

[07:55] <ab5tract_> fluca1978, you can use `$obj.^can($method)` to do duck typing 

[07:56] <ab5tract_> as moritz++ points out, operators are "subroutines with funny names" so they don't really fit into a "get them from an object" kind of concept 

[07:57] <fluca1978> moritz: this is not working Array.^methods.grep: { .name ~~ '[]' }

[07:58] <fluca1978> I suspect that, as ab5tract says, the method has a different name like `postfix` something

[07:58] <ab5tract_> fluca1978, you are calling it on the class, 

[07:58] <ab5tract_> try on an instance

[07:59] <fluca1978> ab5tract: Array.new.^methods.grep: { .name ~~ '[]' } is not working too, there is something different with the names

[08:00] <ab5tract_> I don't know that Array has any method of that name. if it is implemented in a manner that matches userspace, the [] syntax is provided by defining `GET-POS/SET-POS`

[08:01] <ab5tract_> m: say Array.new.^methods.grep: *.name ~~ 'GET-POS'

[08:01] <camelia> rakudo-moar d4bac47ff: OUTPUT: «WhateverCode object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?␤  in block <unit> at <tmp> line 1␤␤»

[08:01] <ab5tract_> m: say Array.new.^methods

[08:01] <camelia> rakudo-moar d4bac47ff: OUTPUT: «(iterator from-iterator from-list new STORE reification-target Method+{is-nodal}.new Method+{is-nodal}.new shape Method+{is-nodal}.new Method+{is-nodal}.new grab name of default dynamic clone Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-noda…»

[08:01] <ab5tract_> so we aren't giving it the right question

[08:02] <ab5tract_> m: say Array.^methods ~~ Array.new.^methods

[08:02] <camelia> rakudo-moar d4bac47ff: OUTPUT: «False␤»

[08:02] <ab5tract_> m: say Array.^methods

[08:02] <camelia> rakudo-moar d4bac47ff: OUTPUT: «(iterator from-iterator from-list new STORE reification-target Method+{is-nodal}.new Method+{is-nodal}.new shape Method+{is-nodal}.new Method+{is-nodal}.new grab name of default dynamic clone Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-noda…»

[08:03] <ab5tract_> so the instance isn't necessary but there cane be differences between the available methods between the class object an object instance of the class

[08:03] <ab5tract_> m: say (Array.^methods (-) Any.^methods)

[08:03] <camelia> rakudo-moar d4bac47ff: OUTPUT: «Set(ACCEPTS ASSIGN-POS BIND-POS BIND-POS BUILDALL Bool CALL-ME Capture FLATTENABLE_HASH FLATTENABLE_LIST Int Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is…»

[08:04] <ab5tract_> m: say (Array.^methods (-) Any.^methods (-) Iterable.^methods)

[08:04] <camelia> rakudo-moar d4bac47ff: OUTPUT: «Set(ACCEPTS ASSIGN-POS BIND-POS BIND-POS BUILDALL Bool CALL-ME Capture FLATTENABLE_HASH FLATTENABLE_LIST Int Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is…»

[08:05] <ab5tract_> fluca1978, does that help explain it a bit?

[08:05] <ab5tract_> m: say (Array.^methods (^) Iterable.^methods)

[08:05] <camelia> rakudo-moar d4bac47ff: OUTPUT: «Set(ACCEPTS ASSIGN-POS BIND-POS BIND-POS BUILDALL Bool CALL-ME Capture FLATTENABLE_HASH FLATTENABLE_LIST Int Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new Method+{is…»

[08:05] <ab5tract_> m: say (Array.^methods (^) Nodal.^methods)

[08:05] <camelia> rakudo-moar d4bac47ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Nodal used at line 1␤␤»

[08:06] <ab5tract_> m: say (Array.^methods (^) Node.^methods)

[08:06] <camelia> rakudo-moar d4bac47ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Node used at line 1. Did you mean 'Code'?␤␤»

[08:06] <ab5tract_> anyway, enough of me poking at poor camelia :)

[08:07] <fluca1978> ab5tract: thanks, I need to reason about it

[08:10] <ab5tract_> m: Array.new.^can('BIND-POS').say; say Array.new.^methods.grep: { .name ~~ 'BIND-POS' }

[08:10] <camelia> rakudo-moar d4bac47ff: OUTPUT: «(BIND-POS BIND-POS BIND-POS)␤(BIND-POS BIND-POS)␤»

[08:11] <ab5tract_> ^^ fluca1978 I can't explain  that one :( ... maybe moritz or another core dev has an idea though

[08:12] <ab5tract_> Ahh, are those just multi method targets? so the can also includes the proto but the grep doesn't? or..?

[08:12] <ab5tract_> Wasn't expecting a list of methods in either case, to be honest

[08:13] <fluca1978> ab5tract: a multi method, may be?

[08:14] <ab5tract_> m: my @a = ^10; my &look = @a.^can('GET-POS'); dd &look; @a.&look(4).say

[08:14] <camelia> rakudo-moar d4bac47ff: OUTPUT: «Type check failed in assignment to &look; expected Callable but got List (())␤  in block <unit> at <tmp> line 1␤␤»

[08:15] <ab5tract_> well that's a weird little corner I haven't gotten myself into before :(

[08:15] <ab5tract_> I guess one is meant to go digging into signatures to find the right one?

[08:18] *** JJMerelo joined
[08:28] *** molaf left
[08:34] *** Black_Ribbon left
[08:40] *** JJMerelo left
[08:42] *** wamba joined
[09:07] <fluca1978> ab5tract: what I discovered is that the method to access and element seems to be AT-POS, by Positional. The fact is that it is not printed out (seems to be hidden): .say for Array.^methods.sort: *.name cmp *.name;

[09:07] <fluca1978> while this is working fine: @array.AT-POS( 2 );

[09:11] <El_Che> lo #rqku

[09:11] <El_Che> lo #raku

[09:13] *** JJMerelo joined
[09:13] <ab5tract_> ah, of course. silly brain fart had me thinking GET-POS. 

[09:14] <ab5tract_> fluca1978, what I can say with some certainty is that there are a few corners of the MOP where things are still not at the capabilities that we eventually expect

[09:14] *** sena_kun joined
[09:14] <ab5tract_> IIRC there is no way for monkey patching a parent class to have an impact on descendant classes

[09:15] <ab5tract_> (as an example)

[09:15] *** Sgeo left
[09:15] <ab5tract_> o/ El_Che 

[09:16] <El_Che> OO is overrated :)

[09:16] *** Altai-man_ left
[09:18] *** rindolf joined
[09:31] <Geth_> ¦ advent: 780226cb38 | L'Alabameñu++ (committed using GitHub Web editor) | 20th/articles/rfc223.md

[09:31] <Geth_> ¦ advent: Create RFC233

[09:31] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/780226cb38

[09:31] <Geth_> ¦ advent: 1540ff5f07 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 20th/articles/rfc223.md

[09:31] <Geth_> ¦ advent: Merge pull request #57 from alabamenhu/patch-3

[09:31] <Geth_> ¦ advent: 

[09:31] <Geth_> ¦ advent: Create RFC233

[09:31] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/1540ff5f07

[09:47] *** clarjon1 left
[09:50] <tbrowder> codesections: ref arg parsing have you looked at leont's Getopt::Long?

[09:55] *** markoong joined
[09:56] *** clarjon1 joined
[09:59] *** JJMerelo left
[10:00] *** markong joined
[10:00] *** markoong left
[10:01] *** clarjon1 left
[10:02] <leont> I don't know the question, but I'd always recommend Getopt:Long ;-)

[10:02] *** clarjon1 joined
[10:10] *** marcusr left
[10:10] *** marcusr joined
[10:26] *** oddp joined
[10:27] *** shlomif joined
[10:28] *** rindolf left
[10:28] *** shlomif is now known as rindolf

[10:35] <oddp> Late to the party, but thanks again for yet another weekly!

[10:36] <oddp> Oh, yeah, wanted to ask: do we have something more idiomatic than grep in conjunction with the flip-flop operator for something like {drop,skip}_while in other langs?

[10:36] <fluca1978> I'm curious: why hash has some adverbs instead of methods? %hash<foo>:exists instead of %hash.exists( <foo> )? I think because it could be a little easier for slicing, but I cannot see the real advantage.

[10:38] <oddp> fluca1978: does that help? https://perl6advent.wordpress.com/2013/12/12/day-12-slicing-with-adverbs-the-only-way/

[10:39] <oddp> Also check the comments below the article.\

[10:40] <fluca1978> oddp: I'm reading

[10:43] <jnthn> fluca1978: Various reasons, including array and hash subscripts being parsed differently from argument lists, but also because the indexers are operators, and the slicing semantics are part of the current language rather than part of the object's semantics (an indexable object only has to provide the semantics for getting/checking for existence of/deleting a single element).

[10:54] <fluca1978> jnthn: thanks, I was just realizing it while reading your comment.

[10:58] <fluca1978> jnthn: anyway I still don't understand why %hash.AT-KEY( <username>, exists => True ) is returning the value and not a boolean, being the adverb a "method argument" to an accessor I would expect it to perform as %hash<username>:exists

[10:59] <jnthn> fluca1978: You have to call .EXISTS-KEY; the exists adverb there is just being ignored

[11:00] <fluca1978> jnthn: thanks

[11:11] *** pecastro joined
[11:14] *** Altai-man_ joined
[11:16] *** sena_kun left
[11:21] <tbrowder> leont: codesections mentioned problems with param parsing and rolling his/her own

[11:22] <tbrowder> yours looks like something to start with instead

[11:24] *** ab5tract left
[11:24] *** ab5tract_ left
[11:28] *** kensanata left
[11:31] <codesections> tbrowder, that looks like a good module :)  It's not a good fit for what I'm doing right now for a couple of reasons.  First, I misspoke – I'm not really augmenting Raku's argument *parsing* so much help text generation, which is slightly outside Getopt::Long's purview (I think)

[11:32] <codesections> Second, and more importantly, for this project I'm not using external modules (for … reasons)

[11:33] <tbrowder> codesections: i'm working on a wrapper for that to auto generate stuff for my CLI use. that will use my Abbreviations module as a helper

[11:35] *** pecastro left
[11:36] <tbrowder> my idea is to provide a hash keyed by leont's option specifier whose value is the help string. the options get autoalised with Abbreviations

[11:36] <tbrowder> *aliased

[11:37] <El_Che> tbrowder: yeah, that's what I do, but I need to fix a few bugsd

[11:37] <tbrowder> wrapper name at the moment is Opt::Handler

[11:38] <tbrowder> El_Che: is it published?

[11:38] <codesections> That seems a bit fancier than I'm being.  I'm just grouping CLI commands into ARGS, FLAGS, and OPTIONS, printing their WHY, and printing their default value (if any)

[11:38] <El_Che> https://github.com/nxadm/SuperMAIN

[11:39] <El_Che> was on holiday, so I didn't had the time to fix stuff

[11:39] <codesections> Unrelated question: there isn't any way to introspect into a subset, is there?

[11:39] <El_Che> codesections sent great bug reports

[11:39] <El_Che> the '='bug is probably a 1 line change :)

[11:40] <tbrowder> oh yeah, my only prob with yrs is it uses MAIN which i stay away from

[11:40] <codesections> What do you dislike about MAIN?

[11:40] <El_Che> lol, MAIN was what I wanted to keep specifically

[11:41] <El_Che> requirements vary of course

[11:41] <tbrowder> i can't get any support for line wrapping for one thing

[11:41] <codesections> You mean based on terminal width?

[11:41] <tbrowder> and my style of CLI  is really baked in

[11:41] <tbrowder> yes

[11:42] <El_Che> I love the idea of a built-in capable MAIN

[11:43] <El_Che> but the capabilities are just very slightly lacking for my use case

[11:43] <El_Che> for something more advanced, you can always reach for sonething more advanced, like leont's modules

[11:43] <codesections> tbrowder, how are you detecting the terminal width, by the way?

[11:43] <tbrowder> i've played with Raku's a bit but i like mine better. after i figured out leont's capture handling i think my opt::handler will be a viable alternative

[11:44] <El_Che> tbrowder: it could be interesting indeed

[11:45] <tbrowder> i don't. i use gnu's guidance on 70 or so characters and either manually wrap or use my Text::Utils line wrapper.

[11:46] <codesections> Oh, well in that case, what about MAIN prevents line wrapping?

[11:46] <tbrowder> as an example of what bugs me, look at Documentable's help

[11:46] <codesections> I'm using MAIN and wrapping text in USAGE

[11:49] <tbrowder> well that's one of the strengths of raku isn't it. something like: do it my way or take the highway!  ;-D

[11:49] <codesections> :D

[11:50] <codesections> Yep!  Though it can also be a weakness – which is what got me thinking about the Lisp Curse angle

[11:50] <tbrowder> i'm too set in my ways to learn everything all over again

[11:50] <tbrowder> yep.

[11:50] <codesections> Oh, yeah, I wouldn't like lines like `documentable --help` has.  But that's easy to fix with USAGE

[11:52] <tbrowder> my prob is the rabbit hole effect. my current rabbit started out as a pdf check writing project....and there i go hopping down the bunny trail

[11:53] <tbrowder> how

[11:53] <tbrowder> i''k

[11:54] <codesections> Ha.  That reminds me of the judge I used to clerk for.  He was always telling us to stay on the trail of the big 'coon, not to go down rabbit trails

[11:54] <tbrowder> i'll have to look at it again, but leont's option specs are really powerful for my needs

[11:56] <El_Che> yak shaving to the recue

[11:56] <tbrowder> does anyone here use mi6. i just started and can't get my second release.

[11:57] <tbrowder> because  it doesn't like my Changes or version or something.

[11:58] <tbrowder> it's very useful but lite on help

[11:58] <tbrowder> got to go. bye

[12:07] *** zacts left
[12:29] *** wamba left
[12:37] <tbrowder> back. can anyone help me with an mi6 release problem?

[12:56] <codesections>  Wish I could, but I haven't yet used mi6

[13:06] <tbrowder> the first release i did went pretty well, but the second is wedged. i'm trying to take good notes and file issues, but the overall process does ease a release (just not yet well documented).

[13:19] *** skids joined
[13:36] *** kensanata joined
[13:42] *** MasterDuke joined
[13:56] <rypervenche> What is wrong with this regex? It is taking forever to run and I'm sure it should be a pretty quick thing.

[13:56] <rypervenche> $_ = 'This is my test string, for testing purposes.'; say m/ test <!before ing> /;

[13:56] <evalable6> rypervenche, rakudo-moar d4bac47ff: OUTPUT: «｢test｣␤»

[13:58] <rypervenche> Hmmm..

[14:00] <rypervenche> evalable6: say $*RAKU.compiler.version;

[14:00] <evalable6> rypervenche, rakudo-moar d4bac47ff: OUTPUT: «v2020.07.54.gd.4.bac.47.ff␤»

[14:00] <rypervenche> Oh....my bad. Ignore me.

[14:01] *** lucasb joined
[14:01] <rypervenche> I somehow left off the "raku" after "#!/usr/bin/env" ><

[14:01] <codesections> That does seem like it'd be a problem for Raku :D  I'm surprised it even started

[14:02] <codesections> how does `OUTER.keys` work, again?  It's not really documented, and I keep unexpectedly getting `()`

[14:03] *** wamba joined
[14:04] <codesections> Oh, because I was supposed to be spelling it OUTER::.keys

[14:05] *** Kaiepi left
[14:05] <codesections> nevermind, then :)

[14:05] *** aluaces left
[14:05] *** Kaeipi joined
[14:10] *** squashable6 left
[14:11] *** Kaiepi joined
[14:11] *** squashable6 joined
[14:12] *** Merfont joined
[14:13] *** Kaiepi left
[14:14] *** sena_kun joined
[14:15] *** Merfont left
[14:15] *** Kaeipi left
[14:17] *** Altai-man_ left
[14:22] *** Rawwar joined
[14:23] <codesections> m: my $first = 1,; my $second = 2,; $first.set_why('1st'); $second.set_why('2nd'); say "first: {$first.WHY}";

[14:23] <camelia> rakudo-moar d4bac47ff: OUTPUT: «first: 2nd␤»

[14:26] *** andrzejku left
[14:28] <codesections> .tell guifa You probably already know this, but I didn't: it's not only not currently possible to document a variable with a Pod declarator block, you can't currently set the WHY manually – trying to do so will set the WHY for the entire *type*, not just the variable. (which can be seen with this code: my $first = 1,; my $second = 2,; $first.set_why('1st'); $second.set_why('2nd'); say "first:

[14:28] <tellable6> codesections, I'll pass your message to guifa

[14:28] <codesections> {$first.WHY}";

[14:28] *** andrzejku joined
[14:30] <guifa> rypervenche: indeed, before/after means “immediately before/after”.  That said…. it’s possible to program a new token that would be anywhere-before and anywhere-after

[14:30] <tellable6> 2020-08-06T08:20:38Z #raku-dev <JJMerelo> guifa2 OK, great, thanks. That date is probably OK, I'll check.

[14:40] *** Rawwar left
[14:53] *** Kaiepi joined
[14:54] <codesections> I can't decide if this hack is so horrible that I need to cut it, or so amazing that I need to leave it in:

[14:54] <codesections> m:  my $total = 97; my $subtotal = 84; sub fmt-with-percent-of($num, $name) {sprintf("%4d (%d%% of $name)", $num, 100 × $num/OUTER::("\$$name")) }; say 42.&fmt-with-percent-of('total'); say 42.&fmt-with-percent-of('subtotal');

[14:54] <camelia> rakudo-moar d4bac47ff: OUTPUT: «  42 (43% of total)␤  42 (50% of subtotal)␤»

[14:55] <codesections> (It really ought to be a macro, once Raku AST is fully implemented) 

[14:55] *** Kaiepi left
[14:58] <guifa> lol but at that point, why not just pass in the variable itself?

[14:58] <guifa> 42.&fmt-with-percent-of($total) saves you a character ;-)

[14:59] <codesections> But then it can't print "(XX% of $NAME)" :D

[15:01] <guifa> fair

[15:01] *** gnufr33dom left
[15:02] <guifa> Also I’m reminded now of why the internatinoal formatters are going to be so awesome

[15:02] <codesections> oh?

[15:02] <guifa> you’ll be able to do local-number $foo, :type<percent> and it’ll autmagically format a number as a percent for you

[15:03] <guifa> I’ll probably add the binding myself but you could also do

[15:03] <codesections> what's it a percent of? 1?

[15:04] <guifa> my \local-percent = &local-number.assuming(:type<percent>)

[15:04] <guifa> Yeah, that aligns with how most other formatters handle it

[15:04] *** orinthe left
[15:04] <guifa> (e.g. ICU)

[15:05] *** orinthe joined
[15:05] <codesections> tangent: why do you write that as `my \local-percent` instead of `my &local-percent`?  

[15:06] <guifa> no morning coffee yet 

[15:06] <codesections> (I'm still trying to get my head around when it's good style to use sigil-less variables)

[15:06] <guifa> it should be & 

[15:13] *** Kaiepi joined
[15:17] *** MilkmanDan left
[15:17] *** MilkmanDan joined
[15:29] *** domidumont joined
[15:31] *** ssm left
[15:32] <tony-o> jdv79: JSON::Tiny, are you referring to a search done on modules.rakudo.org?

[15:32] *** JJMerelo joined
[15:32] *** MilkmanDan left
[15:35] <jdv79> nope.  what is on cpan and in the, I believe unused, p6-dists index

[15:35] *** Murilo joined
[15:35] *** Murilo left
[15:37] <jdv79> also, how are you going to fight off the bots in terms of signups to this new "ecosystem"?  afaik that's the only reason pause is still manual approval.

[15:38] <El_Che> signup like it's 1999

[15:40] *** ssm joined
[15:41] <jdv79> yeah, its annoying, but its simple and effective and one only has to go through it once...

[15:41] *** Sgeo joined
[15:41] <El_Che>  I disagree

[15:41] <jdv79> on what points?

[15:42] <El_Che> it makes no sense whatsoever in 2020

[15:42] <El_Che> cpan, registering, the pain

[15:42] <El_Che> it has been working for perl for decases, no sense chaging it there

[15:42] <El_Che> but shoehorn that model for a newer language? crazy

[15:43] <El_Che> *changing

[15:43] <El_Che> npm tried it

[15:43] <El_Che> it turned out like sh*t

[15:45] <codesections> "it turned out like sh*t" That can be taken two ways – and, for each meaning, I think you'll find *lots* of people who agree!

[15:45] <jdv79> what exactly about npm are you referring?  the crazy dep graphs or the lack of security or...?

[15:46] <El_Che> ask the devops people to deploy perl, python, ruby, JS and they will cry

[15:47] <jdv79> its impossible to discuss something without facts.  cool.

[15:47] <El_Che> I am saying that the CPAN model only worked for Perl because they had the talent and the manpower at a time where public git repos weren't a thing

[15:48] *** demostanis joined
[15:48] <codesections> El_Che, I'm not following what side your on in this discussion.  Are you saying that manual approval is good or bad in your opinion?

[15:48] <moritz> one option would be to allow login with github, and only require manual approval for those who don't

[15:48] <codesections> s/your/you're/  gosh

[15:48] <El_Che> codesections: I prefer no login, no registration, just a repo + git tag

[15:49] <El_Che> you put a repo + tag as a dependency

[15:49] <jdv79> El_Che: that's p6c

[15:49] <El_Che> jdv79: that's closer, yes

[15:49] <jdv79> which goes back to my original idea - why can't the existing solutions be used?

[15:49] <El_Che> besides the need to maintain a central list

[15:49] <jdv79> cpan and/or p6c - ok.  but why a third.

[15:50] <El_Che> jdv79: in my eyes p6c > cpan

[15:50] <codesections> so how does that fit in with the stuff you said that's critical of npm?  Isn't that basically the non-approval free-for-all approach that npm takes?

[15:50] <jdv79> well, the client has to have a list somehow

[15:50] <demostanis> Hello everybody! Is there an easier way to check if a list of string isn't in a hash's keys? Currently I am doing it like that: for <first second> { .callback if $_ ∉ hash.keys.cache }

[15:50] <El_Che> jdv79: I would put that in the META6.json

[15:50] *** MilkmanDan joined
[15:50] <jdv79> it is in the METAs

[15:50] <El_Che> repo + tag instead of name

[15:50] <jdv79> the "index" is really just a list of all metas

[15:50] <El_Che> so a client knows where to get the dep en what version

[15:51] <El_Che> jdv79: the problem with p6c is that nog tagging is requiring

[15:51] <El_Che> -ed

[15:52] <Grinnz> I haven't kept up on this discussion but for a data point, Perl used to have something called a module list which you could register for and which was manually maintained. It got abandoned

[15:52] <jdv79> no, we're just re-hashing basic dist repo stuff

[15:53] <Grinnz> I just saw something about manual approval, sorry

[15:53] <codesections> demostanis, what don't you like about that form?  I.e., are you looking for something shorter, or what?  (That reads pretty well to me)

[15:53] <jdv79> tag as in the git thing, not metadata

[15:53] <moritz> demostanis: if you don't want to check individually, you could use a junction

[15:54] *** zacts joined
[15:54] <moritz> demostanis: like, %hash{none(@list)}:exists

[15:54] <jdv79> well, one of the "pain points" of using cpan for raku dists is the manual approval process

[15:54] <demostanis> About what you guys are saying: can't we have a part free-for-all like NPM which requires something like an --insecure flag with Zef and another part manually checked not requiring a special flag? So that everyone is happy? 

[15:54] <demostanis> codesections: Yeah, I find it not short enough and I was wondering if there was another way

[15:54] <moritz> in general, using %hash{$key}:exists is way faster than checking %hash.keys

[15:54] <demostanis> moritz: I'm gonna try

[15:54] <El_Che> demostanis: the security check is an illusion

[15:55] <demostanis> Isn't the code read before putting it into p6c ecosystem?

[15:55] <Grinnz> ah right. Well the reason for manual approval is to avoid obvious spam and malware mainly

[15:55] <El_Che> demostanis: code is not set on stone

[15:55] <Grinnz> Those things get uploaded by people who have no intention of contributing

[15:55] <Grinnz> or bots.

[15:57] <codesections> There's been a fair bit of action on code review for security at https://github.com/crev-dev/crev/

[15:57] <Grinnz> If you base it on github accounts that would be something.

[15:57] <Grinnz> You can at least then report bad actors to github

[15:57] <jdv79> Grinnz: you're talking about pause or something else?

[15:57] <Grinnz> yes

[15:57] <jdv79> that could be neat

[15:58] <codesections> One thing I'd like to see related to Grinnz point is to have a highly-visible count of transitive dependencies per module

[15:58] <El_Che> raku has a small ecosystem. Base it on CPAN and it will stay smaller (or smaller, as several people are not fond of using cpan)

[15:58] <Grinnz> For perl it wouldn't work, I couldn't see relinquishing authentication control to github. But it's possible

[15:58] <jdv79> that's easy to do - dep graphs

[15:58] <El_Che> want to create go module? Make the repo public, tag it using semantic version, done

[15:59] <codesections> it's one thing to trust an author to not be malicious; it's entierly something else to trust that they've reviewed 500 transative deps for malice

[15:59] <Grinnz> If you have an api that can return the deps for any given module you can graph it like on https://cpandeps.grinnz.com

[15:59] <codesections> jdv79, yeah I know it's easy to do.  But I'm talking about making it visible automatically.  It's more about keeping that number front-and-center

[15:59] <jdv79> El_Che: so your only issue with p6c is that it doesn't support git tags?

[16:00] <El_Che> my issue is mostly with a cpan flow

[16:00] <jdv79> the version is in the meta so seems a non--issue with me

[16:00] <El_Che> for p6c, yes tags would make it more stable

[16:00] <El_Che> how it would be implemented is less important

[16:00] <jdv79> is it unstable now?

[16:01] <El_Che> if someone points to master, instead of a specific version (tag or commit), it can be shaky, yes

[16:01] <moritz> JJMerelo, lizmat: are we still looking for articles for the 20th advent? if yes, I'd consider doing one about RFC 64

[16:01] <jdv79> its an interesting discussion to have - maybe we should draft something so its not just oral/typing/ephemeral

[16:01] <El_Che> jdv79: most people are sane, so it's not a huge problem now

[16:03] <jdv79> some would argue that's a feature.  and if someone did cause a mess i bet it would be better to address the root cause than try to box them in with more restrictive flows

[16:03] <jdv79> sounds kinda like one of the argument used for java - "harder to make a mess" so good for any idiots to code in

[16:03] <Grinnz> a dependency system definitely should be based on tags to be reliable, i agree

[16:04] <El_Che> I think that it's  important to combine a low bar for new contribution + reproducibility

[16:04] <Grinnz> it's how docker and npm type stuff all work

[16:04] <El_Che> so, github/gitlag without a central cpan is the easy way to public code

[16:04] <jdv79> tags are not immutable, history is rewriteable

[16:04] <demostanis> moritz: Why does this return False? so %(:working, :good){none(<working good>)}:exists

[16:04] <jdv79> i fail to see how that factors well

[16:04] <El_Che> tag is for making build repoducible

[16:05] <El_Che> what google added to golang, for example, is a read-only proxy for tags

[16:05] <Grinnz> it is, but you have to intentionally rewrite them

[16:05] <jdv79> a tag is just an alias to a sha and as long as the sha doesn't get gc'ed or otherwise disappers its repro'able...

[16:05] *** xinming left
[16:05] <Grinnz> whereas branches become unstable as soon as you work on them

[16:05] <El_Che> (which you are free not to use)

[16:06] <El_Che> jdv79: commits disapper (or are rewritten), tag don't

[16:06] <El_Che> of at least people should know you're not suppose to reuse them

[16:06] <Grinnz> a tag also keeps said commit from getting gc doesn't it?

[16:06] <jdv79> tags can move/disappear

[16:06] <jdv79> yeah

[16:06] <El_Che> jdv79: yes, and people will hae you for that

[16:06] <El_Che> hate

[16:07] <El_Che> and the blame will be clearly on you :)

[16:07] <codesections> I hope that the "github" comments are just a for instance and that any system would work with any git host (not just the Microsoft-owned one)

[16:07] <jdv79> if its my repo i'll git how i like and if i cause a mess then do something about it...?

[16:07] *** xinming joined
[16:07] <Grinnz> modifying any tag on a repo is just as problematic as force pushing a branch other people are using

[16:07] <El_Che> codesections: yes, thatś why I metioned gitlab

[16:07] <El_Che> but I also think gitea

[16:07] <codesections> source hut, too

[16:07] <El_Che> the git protocol basically

[16:08] <moritz> I'd like to point out that for some some people, a tag in a git repo is a perfectly fine release. Others require a build process

[16:08] <jdv79> anyway, there's nothing stopping anyone from using a tag in p6c

[16:08] <guifa> demostanis: well, both working and good exist

[16:08] <jdv79> its just not the only ref you can use:)

[16:08] <codesections> yeah, exactly — pure git protocol, without relying on any vendor-specific addons

[16:08] <El_Che> moritz: build from a tag should be reproducible

[16:08] <moritz> El_Che: the emphasis is on *should*

[16:09] <guifa> none would only return true if they *didn’t* exist

[16:09] <guifa> m: say so %(:bar, :foo){none(<working good>)}:exists

[16:09] <camelia> rakudo-moar d4bac47ff: OUTPUT: «True␤»

[16:09] <moritz> demostanis: it's false that none of these keys exists

[16:09] <El_Che> moritz: if it doesn't something is broken

[16:09] <demostanis> Ohhhh my mistake I understand now

[16:09] <El_Che> that brings me on my 2nd stolen idea, but for apps

[16:09] <moritz> El_Che: most software builds in the wild are not reproducible

[16:10] <El_Che> they should vendor  their deps in the repo

[16:10] <El_Che> ie including the code of the deps

[16:10] <moritz> you can call that broken all you want, it's just reality

[16:10] <El_Che> so the build is identical eacht time

[16:10] <moritz> then build tool versions, time-dependent things, OS versions etc. can still make a difference

[16:11] <El_Che> I agree

[16:11] <El_Che> but you are not offering build artifacts

[16:12] <El_Che> the user's CI is building stuff. And nothing changes on their part they shouldn't expect surprises

[16:12] <El_Che> We can't avoid it completely, but we can limit the surprise factor

[16:13] <moritz> > but you are not offering build artifacts

[16:13] <jdv79> iirc there was some linux distro or soemthing that managed actual repro'able builds a few years ago

[16:13] <moritz> well, that's the point, maybe we should

[16:13] <El_Che> we're offering source code

[16:13] <jdv79> seemed extreme but ok

[16:14] <tony-o> shoe horning an ecosystem into a stack it wasn't designed for is just a bad idea.  there isn't much more to say about it.

[16:14] <moritz> nearly all of the package repos I know offer build artifacts, not (just) source code

[16:14] <moritz> cpan, npm, pypi, ruby gems etc

[16:15] <moritz> they all have tarballs or other archives that are built from a source

[16:15] <El_Che> tony-o: I don't know if you're agreeing with me or or giving a counter argument. But's that exactly how I feel about the raku+cpan combination

[16:15] <tony-o> git is already being used as the protocol.  that doesn't mean the current ecosystem is a good design and doesn't solve the problem of it being a PITA to contribute modules

[16:15] <El_Che> "cpan, npm, pypi, ruby gems" <== that's exactly what devops and ops hate to deploy

[16:15] *** dolmen joined
[16:16] <tony-o> El_Che: i agree with you in the sense that the current arrangement is becoming tedious and can be majorly improved

[16:16] <jdv79> i personally believe the current cpan AND p6c options can be much improved to the point where a third option is not necessary

[16:16] <tony-o> jdv79: what is your plan to do that?

[16:17] <jdv79> there is no plan:)

[16:18] <tony-o> then how can you confidently say it's less work to "fix" those than do a third option?

[16:19] <jdv79> because the pain points are known and the solutions are not terribly complicated.  as opposed to a from scratch effort?  seems like a good bet;)

[16:20] <tony-o> if that were true then someone would surely have taken credit for such low hanging fruit

[16:20] <jdv79> i'll stop now.  i've said my bit.  i like your energy and effort and don't want to argue anymore.

[16:21] <tony-o> jdv79++

[16:26] <cpan-raku> New module released to CPAN! Abbreviations (0.1.0) by 03TBROWDER

[16:29] *** ccube joined
[16:30] <ccube> where can I find the public key for rakudo (to verify detached signature)

[16:34] <ccube> p6: say time

[16:34] <camelia> rakudo-moar d4bac47ff: OUTPUT: «1596731659␤»

[16:34] <ccube> p6: say time

[16:34] <camelia> rakudo-moar d4bac47ff: OUTPUT: «1596731670␤»

[16:37] <Geth_> ¦ advent: 1e061ddd2d | (Moritz Lenz)++ | 2 files

[16:37] <Geth_> ¦ advent: Claim RFC 64, and add a draft for it

[16:37] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/1e061ddd2d

[16:46] <Geth_> ¦ advent: ed152047d8 | (Moritz Lenz)++ | 20th/articles/rfc64.md

[16:46] <Geth_> ¦ advent: Wording improvement

[16:46] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/ed152047d8

[16:46] *** ccube left
[16:46] <moritz> feedback on this article would be very welcome

[16:55] <JJMerelo> moritz++ I'll try to have a look, probably tomorrow.

[16:55] <JJMerelo> Thanks a lot.

[16:57] <JJMerelo> OK, I finally did it now...

[16:58] <JJMerelo> ccube I think you can get it from https://raku.org/downloads

[17:00] <JJMerelo> And yes, moritz, we're still looking for articles. We've still got 6 slots to fill.

[17:00] <JJMerelo> So thanks.

[17:00] <guifa> JJMerelo: lemme know if you need another artile and I’ll try to get.......

[17:00] <guifa> oh nm

[17:00] <guifa> there we go :-)

[17:01] <JJMerelo> guifa we definitely need them... 6 unfilled slots yet. If you want, a slot is yours...

[17:05] <jnthn> JJMerelo: How soon do they need writing? I may have some post-vacation writing energy... :)

[17:05] *** JJMerelo left
[17:06] <guifa> jjmerelo: I’ll work on it as soon as I get done fighting with this stupid localtime/gmttime algorithm.  I’ve got… something… off even though I’ve sworn I’ve translated the code exactly

[17:06] <tellable6> guifa, I'll pass your message to JJMerelo

[17:07] <guifa> jnthn: feeling refreshed?

[17:11] <moritz> jnthn: welcome back :-)

[17:13] <jnthn> guifa: Yes; I turned off github email notifications and didn't touch a computer (well, my smartphone aside) for about 2 weeks, which was quite nice :)

[17:14] *** Altai-man_ joined
[17:14] <guifa> ….until you turned it back on and got a flood of INT_MAX notifications ;-)

[17:16] *** sena_kun left
[17:18] <jnthn> :D

[17:18] <jnthn> No, it doesn't resend everything :) I can find those via the web UI though :)

[17:22] <jnthn> Home time, bbl

[17:22] *** andrzejku left
[17:30] *** dolmen left
[17:45] *** domidumont left
[17:55] *** cpan-raku left
[17:56] *** cpan-raku joined
[17:56] *** cpan-raku left
[17:56] *** cpan-raku joined
[18:17] *** MilkmanDan left
[18:21] *** bocaneri left
[18:33] <Geth_> ¦ advent: 3400415e07 | (Moritz Lenz)++ | 20th/articles/rfc64.md

[18:33] <Geth_> ¦ advent: Apply feedback by JJ++

[18:33] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/3400415e07

[18:38] <codesections> I'm having a bit of trouble with a syntax issue that seems like it should be easy: destructuring a hash into %sigiled variables.  This works (with `$`): 

[18:38] <codesections> m: my %h = a => 0, b => 1; my ($a, $b)  = %h; say $a; say $b 

[18:38] <camelia> rakudo-moar d4bac47ff: OUTPUT: «a => 0␤b => 1␤»

[18:39] <codesections> how do I do the same thing, but with %a and %b?

[18:41] <guifa> my %h = a => %(x => 1, y => 2), b => %(x => 1, y => 2); my (:%a, :%b) := %h; say %a

[18:41] <evalable6> guifa, rakudo-moar d4bac47ff: OUTPUT: «{x => 1, y => 2}␤»

[18:41] <guifa> I don’t think there’s actually a guarantee that in your scalar example that $a and $b will necessarily be a and b from the hash.

[18:42] <guifa> m: my %h = a => 0, b => 1; my ($b, $a) = %h; say $b;

[18:42] <camelia> rakudo-moar d4bac47ff: OUTPUT: «b => 1␤»

[18:44] <guifa> hrm

[18:44] <guifa> actually even when using :%a and :%b you’re still not guaranteed it it seems.

[18:45] <cpan-raku> New module released to CPAN! LibXML (0.5.8) by 03WARRINGD

[18:45] <guifa> I think you should probably need to do my %( … )

[18:45] <guifa> but that errors

[18:45] <codesections> Hmm, I'm not quite sure I follow that code

[18:46] <codesections> You declared %h as a more complex object, but I wanted to destructure an existing hash, not one I'm declaring inline

[18:46] *** andrzejku joined
[18:48] <codesections> if this isn't as easy as I thought it'd be, I don't need to bother with it – it's just to save a line 

[18:49] <guifa> If you’re just wanting to use %a and %b as variable names, use binding, otherwise %a gobbles up all the values because it’s listy

[18:49] <codesections> It's just what I *think* of when I hear a language has "destructuring assignment", so I thought I was missing something basic

[18:49] <codesections> what would "use binding" look like here?

[18:50] <guifa> assuming I’m understanding what you’re wanting to do correctly

[18:51] <codesections> I have something like 

[18:51] <codesections>  my $a = %hash<a>;

[18:51] <codesections>  my $b = %hash<b>

[18:51] <codesections> er, %a and %b

[18:51] <codesections> and I thought destructuring assignment would let me put that on one line

[18:52] <codesections> (Which is how I've used it in the past in other languages)

[18:52] <jnthn> Are those the only things in the hash?

[18:52] <jnthn> my (:%a, :%b) := %hash;

[18:52] <codesections> but if that's not the idea here, it's no big deal. 

[18:52] <codesections> Yeah

[18:53] <codesections> m:  my %h = a => 0, b => 1; my ( :%a, :%b)  := %h; say %a; say %b  

[18:53] <camelia> rakudo-moar d4bac47ff: OUTPUT: «Type check failed in binding to parameter '%a'; expected Associative but got Int (0)␤  in block <unit> at <tmp> line 1␤␤»

[18:53] <guifa> Right because you passed it an int, not a hash

[18:53] <codesections> oh, right

[18:54] <guifa> m: my %h = a => %(x => 1, y => 2), b => %(x => 3, y => 4; my (:%a, :%b) := %h; say %a; 

[18:54] <camelia> rakudo-moar d4bac47ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in contextualizer; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 3, y => 4; my (:%a, :%b) := %h; say %a;7⏏5<EOL>␤»

[18:54] <codesections> I made the minimum-reproducable example too minimal.  Oops

[18:54] <jnthn> Missing ) after teh 4

[18:54] <guifa> m: my %h = a => %(x => 1, y => 2), b => %(x => 3, y => 4); my (:%a, :%b) := %h; say %a;

[18:54] <camelia> rakudo-moar d4bac47ff: OUTPUT: «{x => 1, y => 2}␤»

[18:54] <codesections> There it is.  Thanks to you both.

[18:54] <codesections> (I knew it had to be something simple I was missing :) )

[18:56] <lizmat> moritz++   # RFC 64

[18:56] <guifa> Also yay, I fixed the bug with localtime.  And then prompty introduced a new one in mktime 

[18:56] * guifa just wants to control time

[19:00] *** molaf joined
[19:00] <moritz> you should speak to the time lords

[19:01] <cpan-raku> New module released to CPAN! PDF::ISO_32000 (0.0.9) by 03WARRINGD

[19:04] <guifa> :-)

[19:05] <phogg> Time lords? I thought they were called ntp server administrators.

[19:05] <guifa> I really was tempted to just include the C library but I didn’t want people to have to compile it

[19:13] <moritz> phogg: having impressive names really matter

[19:14] *** sena_kun joined
[19:16] *** Altai-man_ left
[19:17] *** pecastro joined
[19:24] *** rindolf left
[19:31] *** pecastro left
[19:32] <cpan-raku> New module released to CPAN! Abbreviations (0.2.0) by 03TBROWDER

[19:32] <cpan-raku> New module released to CPAN! Date::Calendar::Julian (0.0.2) by 03JFORGET

[19:36] *** andrzejku left
[19:37] *** finanalyst joined
[19:38] *** molaf left
[19:41] *** aluaces joined
[19:48] *** andrzejku joined
[19:57] *** epony left
[20:12] *** MilkmanDan joined
[20:17] *** epony joined
[20:24] *** molaf joined
[20:25] *** melezhik joined
[20:30] <melezhik> I could see 502 errors when try to visit https://modules.raku.org/dist/**** pages

[20:30] <melezhik> on and off though 

[20:32] *** molaf left
[20:32] *** molaf joined
[20:35] *** dolmen joined
[20:39] *** kensanata left
[20:43] *** holyghost joined
[21:12] *** demostanis left
[21:14] *** Altai-man_ joined
[21:16] *** sena_kun left
[21:23] <cpan-raku> New module released to CPAN! PDF::Tags (0.0.3) by 03WARRINGD

[21:24] *** AlexDaniel joined
[21:24] *** AlexDaniel left
[21:24] *** AlexDaniel joined
[21:34] *** zacts left
[22:03] *** zacts joined
[22:08] <tbrowder> if i get a return value from a sub that returns Inf, how do i test for that? the docs show testing with the === in one case (i've had no luck with that) but the author of the sub says it will have to be trapped. every time i try to handle it i get warnings about needing to gist it, etc.

[22:31] <guifa2> m: say (5 ~~ Inf); say (∞ ~~ Inf)

[22:31] <camelia> rakudo-moar d4bac47ff: OUTPUT: «False␤True␤»

[22:36] <tbrowder> i've been trying smart match, too. i may be doing it wrong. lets see:

[22:37] <tbrowder> m: my $a = Inf; so $a ~~ Inf

[22:37] <camelia> rakudo-moar d4bac47ff: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so $a ~~" in sink context (line 1)␤»

[22:38] <guifa2> m: my $a = Inf; say so $a ~~ Inf

[22:38] <camelia> rakudo-moar d4bac47ff: OUTPUT: «True␤»

[22:39] <tbrowder> hm, i have to go back to my code. ++guifa2 thanks!!

[22:42] <tbrowder> m: sub i(){Inf}; my $a = &i; say so $a ~~ Inf

[22:43] <camelia> rakudo-moar d4bac47ff: OUTPUT: «False␤»

[22:43] <tbrowder> ???

[22:43] <tbrowder> ah

[22:44] <tbrowder> m: sub i(){Inf}; my $a = i; say so $a ~~ Inf

[22:44] <camelia> rakudo-moar d4bac47ff: OUTPUT: «False␤»

[22:45] <tbrowder> thats what i'm seeing...but i have a clue now...

[22:50] <tbrowder> m: sub i(){Inf}; say  so i ~~ Inf

[22:50] <camelia> rakudo-moar d4bac47ff: OUTPUT: «False␤»

[22:50] *** melezhik left
[22:51] <MasterDuke> m: sub i(){Inf}; say  so i ~~ Inf; say  so i() ~~ Inf

[22:51] <camelia> rakudo-moar d4bac47ff: OUTPUT: «False␤True␤»

[22:51] <tbrowder> aha!!

[22:51] <MasterDuke> m: say i

[22:51] <camelia> rakudo-moar d4bac47ff: OUTPUT: «0+1i␤»

[22:52] <tbrowder> arg, thanks MasterDuke, my stupid choice...

[22:52] <MasterDuke> heh, np

[22:53] <tbrowder> lets see

[22:54] <tbrowder> m: my f(){Inf}; my $a = f(); say so $a ~~ Inf

[22:54] <camelia> rakudo-moar d4bac47ff: OUTPUT: «5===SORRY!5===␤Type 'f' is not declared␤at <tmp>:1␤------> 3my f7⏏5(){Inf}; my $a = f(); say so $a ~~ Inf␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 f(){Inf}; my $a = f(); say so $a ~~ Inf␤␤»

[22:54] <rypervenche> m: sub b(){Inf}; my $a = b; say $a ~~ Inf

[22:54] <camelia> rakudo-moar d4bac47ff: OUTPUT: «True␤»

[22:54] <rypervenche> m: sub b(){Inf}; my $a = &b; say $a() ~~ Inf

[22:54] <camelia> rakudo-moar d4bac47ff: OUTPUT: «True␤»

[22:54] <tbrowder> thnx folks, i'm blind

[22:54] <rypervenche> I wondering if I'm doing any of these wrong.

[22:55] <guifa2> no worries tbrowder .  I literally just spent three hours tracking down a bug

[22:55] <guifa2> had ONE variable that was an int32 instead of an int64 and it through everything off

[22:56] <rypervenche> m: sub b(){Inf}; my $a = &b; say '$a = ' ~ $a; say '$a() = ' ~ $a();

[22:56] <camelia> rakudo-moar d4bac47ff: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤$a = b␤$a() = Inf␤  in block <unit> at <tmp> line 1␤»

[22:56] <tbrowder> but y'all have collectively bracketed the trouble spot. thanks so much

[22:57] <rypervenche> oh, shouldn't have tried to make it a string ><

[22:57] <rypervenche> m: sub b(){Inf}; my $a = &b; say $a; say $a();

[22:57] <camelia> rakudo-moar d4bac47ff: OUTPUT: «&b␤Inf␤»

[23:04] *** patrickb left
[23:09] *** vike left
[23:15] *** sena_kun joined
[23:16] *** dolmen left
[23:17] *** Altai-man_ left
[23:21] *** vike joined
[23:31] *** vrurg left
[23:35] *** vrurg joined
[23:40] *** oddp left
