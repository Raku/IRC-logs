[00:06] *** wbn left
[00:06] *** wbn joined
[00:08] *** tadzik left
[00:25] *** sivoais left
[00:26] *** sivoais joined
[00:29] *** dustinm` left
[00:29] *** dustinm`_ joined
[00:31] *** Xliff joined
[00:31] *** daxim left
[00:32] *** simcop2387 left
[00:33] *** daxim joined
[00:33] *** simcop2387 joined
[00:35] <Xliff> vrurg: Nice work on the COERCE changes. I'm curious, however: will the old method still work?

[00:35] <Xliff> It will be a while before I can move my existing code over to the new method so just wanted to make sure.

[00:36] *** tadzik joined
[00:38] <guifa> Xliff: it should.  the COERCE is a last resort

[00:38] <guifa> so it’ll try first Foo.Bar, and then try Foo.COERCE(Bar)

[00:38] <Xliff> guifa++

[00:39] <Xliff> And does it handle the limited coercion format?

[00:39] <Xliff> method foo (Bar(Cool) $a) { ... }

[00:40] <Xliff> Although technically, that type check could be performed on .foo()

[00:44] *** BenGoldberg joined
[00:44] <guifa> with that, if you passed in a Cool, it would first do Cool.Bar, then Bar.COERCE(Cool), then lastly Bar.new(Cool) 

[00:51] <guifa> That last one I suppose in *theory* could break existing code in some weird edge case, but it’s also following the original design docs

[00:53] * guifa doesn’t know how much more of this templated out coding he can stand.  But will totally be worth it when it’s done

[01:02] *** cpan-raku joined
[01:02] *** cpan-raku left
[01:02] *** cpan-raku joined
[01:03] *** perryprog left
[01:03] *** perryprog joined
[01:17] *** BenGoldberg left
[01:22] *** mowcat left
[01:23] *** BenGoldberg joined
[01:28] *** Kaiepi joined
[01:55] *** epony left
[02:06] *** guifa left
[02:06] *** kotrcka joined
[02:07] *** epony joined
[02:10] <Geth> ¦ ecosystem: littlebenlittle++ created pull request #563: Add Stache to ecosystem

[02:10] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/563

[02:27] *** epony left
[02:33] *** epony joined
[02:34] *** cpan-raku left
[02:53] *** lucasb left
[03:03] *** ben_ left
[03:04] *** ben_ joined
[03:45] *** pilne left
[03:59] *** _jrjsmrtn joined
[04:00] *** __jrjsmrtn__ left
[04:08] *** kotrcka left
[04:30] *** Xliff left
[05:17] *** karupanerura joined
[05:22] *** BenGoldberg left
[06:13] *** jmerelo joined
[06:35] *** bocaneri joined
[06:35] *** bocaneri left
[06:41] *** bocaneri joined
[06:48] *** aluaces joined
[07:08] *** sjm_uk joined
[07:16] *** ufobat_ joined
[07:19] <Geth> ¦ doc: d7de693342 | (Stoned Elipot)++ | doc/Type/Thread.pod6

[07:19] <Geth> ¦ doc: Use code formatting

[07:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d7de693342

[07:19] <linkable6> Link: https://docs.raku.org/type/Thread

[07:30] *** MasterDuke left
[07:39] *** skids left
[07:46] <jmerelo> Don't know if this will affect us https://www.docker.com/blog/rate-limiting-by-the-numbers/ Not for the time being, I guess, but it might in the future.

[07:46] <El_Che>  jmerelo: it will

[07:46] <El_Che> it just take a few CI's 

[07:47] *** domidumont joined
[07:50] <jmerelo> El_Che: Well, a hundred in 6 hours. I would have to check on the repositories I know, but most of them have not even reached 100 pulls yet.

[07:51] <jmerelo> El_Che: this reached 6000 https://hub.docker.com/r/jjmerelo/perl6-doccer/, but it goes up to a couple of pulls a day at most

[07:52] <jmerelo> El_Che: this one, https://hub.docker.com/r/jjmerelo/alpine-raku, less than 2K. Maybe if the language becomes incredibly popular, it will. But by using specialized containers, I don't think this will become a problem in the foreseeable future.

[07:55] *** parabolize left
[08:00] <jmerelo> The main problem I see is that limits are _on the user_, not on the repository. So we'll need to see how that affects CI. Will all Travis users be considered the same?

[08:00] *** frost-lab joined
[08:01] <jmerelo> Ah, I see here it's based on the individual IP adress... https://www.docker.com/blog/scaling-docker-to-serve-millions-more-developers-network-egress/ Meaning all Travis users will share their allotment of pulls?

[08:03] <jmerelo> Well... apparently, yes https://docs.travis-ci.com/user/docker/

[08:04] * jmerelo quietly curses the whole situation. But I guess it's only fair.

[08:09] *** Black_Ribbon left
[08:12] *** TreyHarris left
[08:13] *** BenGoldberg joined
[08:14] *** wamba joined
[08:15] *** abraxxa left
[08:19] *** abraxxa1 joined
[08:23] *** ghgfhdt joined
[08:26] <El_Che> it's a gracious way to shut it dowm

[08:26] <El_Che> the free part

[08:33] *** kensanata joined
[08:35] *** dakkar joined
[08:37] *** isacl___ joined
[08:41] <Geth> ¦ problem-solving: JJ assigned to codesections Issue There's no effective way to communicate something to all people with commit bits in the different Raku repos and organizations https://github.com/Raku/problem-solving/issues/246

[08:45] *** aluaces left
[08:48] *** BenGoldberg left
[08:50] *** TreyHarris joined
[08:54] *** Sgeo left
[08:59] *** rindolf joined
[09:00] *** kiti_nomad[m] left
[09:02] *** ghgfhdt left
[09:05] *** sena_kun joined
[09:33] *** sno left
[09:38] <El_Che> jmerelo: in case I didn't congratulate you with the rsc role: cheers

[09:39] <tyil> lizmat: good news, my comment yesterday not knowing when I'd be going to the office is invalid, I'm at my work office today

[09:39] <lizmat> wow!

[09:40] <tyil> so I'll be getting the CLA signed and scanned this afternoon, I hope

[09:42] *** aluaces joined
[09:42] *** guifa` left
[09:43] *** guifa` joined
[10:05] <lizmat> :-)

[10:12] *** aborazmeh joined
[10:12] *** aborazmeh left
[10:12] *** aborazmeh joined
[10:36] <El_Che> the CLA sounds like adding people to your will

[10:36] <El_Che> :)

[10:41] *** Manifest0 left
[10:42] *** Manifest0 joined
[10:57] *** isacl___ left
[11:14] *** squashable6 left
[11:14] *** squashable6 joined
[11:26] <moritz> one CLA to rule them all, and in the darkness to bind them!

[11:38] *** BenGoldberg joined
[11:53] *** sno joined
[12:10] *** Altai-man joined
[12:12] *** BenGoldberg left
[12:12] *** sena_kun left
[12:14] *** aborazmeh left
[12:16] <El_Che> it's kind of a faustian deal :)

[12:46] *** kst left
[12:46] *** kst joined
[12:49] *** frost-lab left
[13:13] <Zero_Dogg> Is it safe to call a NativeCall imported function, where an option was int32, with a raku-native int? Ie. will rakudo cast it to a proper int32 (or throw if it's outside its range)?

[13:14] <tib> Hello, I wrote something that could maybe fit into the advent calendar. Somebody here to review it ? 

[13:16] <tib> good to know : 1. I'm total raku noob 2. I'm not native english speaker 3. It's about profiling/perfs 

[13:17] <tib> but you probably already know this :)

[13:17] <timotimo> Zero_Dogg: it should work. i assume it would truncate, but you can expose the actually native sub via a sub that does a range check on a full Int

[13:21] <Zero_Dogg> timotimo: nod, it's a quick and dirty import of kill(3) so I'm not using any time on writin proper wrappers for it, just wanted to make sure I'm not doing something completely wrong, I'm calling it with what I know to be a valid PID and the number literal for the signal

[13:26] *** abraxxa1 left
[13:28] <timotimo> it's not working?

[13:28] <timotimo> strace may be worth a try

[13:30] *** jmerelo left
[13:31] <Zero_Dogg> It's working just fine. Just wanted to ask to make sure it's not just working by chance and isn't about to break in surprising ways because I'm misunderstanding the interface somehow :)

[13:42] *** holyghost left
[13:43] *** cpan-raku joined
[13:43] *** cpan-raku left
[13:43] *** cpan-raku joined
[13:57] *** Chi1thangoo joined
[14:02] <timotimo> OK

[14:03] *** aborazmeh joined
[14:03] *** aborazmeh left
[14:03] *** aborazmeh joined
[14:06] *** ufobat_ left
[14:31] *** holyghost joined
[14:33] <gfldex> tib: lizmat tends to pick the nits out of mine.

[14:34] <gfldex> tib: did you write it already?

[14:36] <tib> yes, it's almost ready for publication, but I'm not sure if it deserves anyway :D

[14:37] <gfldex> it's more about the spirit then correctness

[14:37] <tib> yes

[14:39] *** wamba left
[14:42] <gfldex> tib: I could have a look later today. As Santas time machine technican I'm well qualified.

[14:44] <tib> what is your github username ?

[14:44] <gfldex> gfldex

[14:46] <tib> added to repo, this is the README.md, there is another (french) article (about Raku also), just ignore it :)

[14:52] *** skids joined
[14:53] *** wamba joined
[14:56] <tbrowder> hi, #raku ppl

[14:57] <tbrowder> i need some help with a class i'm trying to design

[14:59] <tbrowder> my simplest one is a "field" which has a starting x position which must be defined at construction

[15:01] *** aluaces left
[15:02] <tbrowder> it also has an ending postiion called "urx" and a "width", one of which is required at construction and the other will be defined by the two now-defined other attrs

[15:03] *** BenGoldberg joined
[15:05] <tbrowder> i will need a BUILD sub, and all three attrs will have $! twigils.

[15:06] <tbrowder> so the question is how do i describe the BUILD sub?

[15:07] *** pilne joined
[15:08] <tbrowder> my shot at signature "submethod BUILD(:$x, :$urx, :$w)"

[15:08] <ben_> You can assign directly to private class attributes with `submethod BUILD(:$!arg1, :$!arg2) {}`. A constructor would return `self.bless(arg1 => 'foo', arg2 = 'bar')`

[15:09] <ben_> **arg2 => 'bar`

[15:10] <tadzik> tbrowder: I think it may be easier to hehe build in your new() method

[15:10] <tbrowder> yes, but i want to delay until i know what is provided so i can calculate the other (this is a geometric object)

[15:10] <tadzik> see if you got at least 2 things, die if not, and if you did, calculate the 3rd and pass all 3 to bless()

[15:11] *** Sgeo joined
[15:11] <ben_> You can also add valdiators to your private class attributes using a `where` clause.

[15:11] <tbrowder> hm, can't i do that inside the submethod BUILD?

[15:13] <tbrowder> look at this BUILD sig: (:$x!, :$urx, :$w)

[15:14] <tbrowder> then i do the necessary stuff inside. shouldn't that work?

[15:14] <tbrowder> why would i need bless?

[15:14] <ben_> In this case $urx and $w would be optional private arguments. You can still access $!urx and $!width in the body of the block

[15:15] <ben_> bless is called by within a constructor to generate the class instance. When the instance is build, BUILD is called to populate the newly-minted instance's private attributes.

[15:16] <ben_> From my understanding!

[15:16] <tbrowder> ok, given my case, is there any advantage of going the "new" route instead of the BUILD route (except i think the "new" route causes trouble with subclassing)

[15:18] <ben_> for example the body of the built in `new` constructor just something like `return self.bless(...)`

[15:18] <tbrowder> or i could use TWEAK?

[15:19] <ben_> I have never used TWEAK myself. I think it's just another routine that is called during the lifecycle of an object, though.

[15:20] <tbrowder> all right, thanks ben_  and tadzik, enough to press on, back if i get stuck

[15:20] <tbrowder> bye

[15:20] <ben_> good luck!

[15:21] <tadzik> tbrowder: I think the advantage of using new() over BUILD here is that you can more explicitely describe what you actually mean to do. Maybe because I have really no clue how you could do that in BUILD though :P

[15:21] <tadzik> new() just seems like a fitting place to turn the arguments into attributes

[15:22] <tadzik> but take what I say with a grain of salt, I'm a known hater of this model ;)

[15:22] <tadzik> see https://www.youtube.com/watch?v=783CBT1r1DU

[15:32] *** jmerelo joined
[15:36] *** BenGoldberg left
[15:37] *** melezhik joined
[15:44] <xinming> SmokeMachine: What is the right way to do many to many relationship? Or, we just write methods, and filter them ourselves?

[15:46] <kawaii> xinming: I did something like this https://www.irccloud.com/pastebin/GJzG640d/

[15:47] <xinming> kawaii: Thanks, will check

[15:48] <jmerelo> tib: create a PR in the repository, I'll take a look.

[15:48] <xinming> kawaii: This is what I'm doing now too, but I wish something more native way.

[15:48] <jmerelo> .tell tib create a PR in the repository, I'll take a look.

[15:48] <tellable6> jmerelo, I'll pass your message to tib

[15:50] *** simcop2387 left
[15:52] *** parabolize joined
[15:53] *** simcop2387 joined
[15:58] *** wamba left
[16:03] *** patrickb joined
[16:04] <xinming> m: package A { class B { }; class B::C { } }; B.raku.say

[16:04] <camelia> rakudo-moar 85847d2f1: OUTPUT: «A::B␤»

[16:04] <xinming> kawaii: Your example reminds me this. Is this a bug?

[16:04] <xinming> I think that namespace B should be within A, Not register them globally.

[16:05] <lizmat> m: package A { my class B { }; my class B::C { } }; B.raku.say

[16:05] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤␤»

[16:05] <patrickb> jmerelo: The documentation isn't updated automatically anymore, right? Can you trigger a rebuild?

[16:09] *** aborazmeh left
[16:11] <xinming> m: package A { class B { }; }; B.raku.say

[16:11] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤␤»

[16:11] *** sena_kun joined
[16:11] <xinming> lizmat: Then, why in this example, B is not defined?

[16:11] <xinming> I'm actually confused about the inconsistency here.

[16:12] <xinming> m: package A { class B { }; my class B::C { } }; B.raku.say

[16:12] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤␤»

[16:12] *** Altai-man left
[16:12] <SmokeMachine> xinming: it’s not yet implemented, but planes...

[16:13] <xinming> SmokeMachine: Ok, Will use hand written version.

[16:13] <SmokeMachine> *planed

[16:13] *** simcop2387 left
[16:14] <SmokeMachine> xinming: I’ll add a new issue explaining my thoughts about the syntax of many-to-many

[16:14] *** simcop2387 joined
[16:15] *** simcop2387 left
[16:15] *** simcop2387 joined
[16:17] <jmerelo> patrickb: it's not been updated automatically since the old infrastructure burned down...

[16:17] <jmerelo> I'll do it now

[16:17] <patrickb> jmerelo: That's a fast reply! Thank you!

[16:17] <ben_> Is there a builtin for converting a list of Str into a filesystem path?

[16:20] <jmerelo> ben_: append .IO

[16:20] *** simcop2387 left
[16:20] <jmerelo> m: say "/tmp".IO.raku

[16:20] <camelia> rakudo-moar 85847d2f1: OUTPUT: «IO::Path.new("/tmp", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[16:21] *** simcop2387 joined
[16:22] <ben_> For example I have `('A', 'B', 'C')` and I want to produce 'A/B/C/' on unix and 'A\B\C' on nt

[16:23] *** sno left
[16:27] *** natrys joined
[16:28] <tobs> m: say $*SPEC.catfile(<A B C>)

[16:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: «A/B/C␤»

[16:28] <tobs> ben_: ^ it's inside the $*SPEC object, didn't see it exposed through IO::Path

[16:28] <tbrowder> tadzik: nice talk.have you done something like that for raku? i mean demo

[16:29] <tobs> $*SPEC provides an interface to the filesystem operations that should work on the current host. If you need others, I think you can instantiate IO::Spec::* objects according to demand.

[16:30] <tbrowder> *demo yr preferred approach in raku?

[16:30] <tobs> m: say IO::Spec::Win32.catfile(<A B C>)

[16:30] <camelia> rakudo-moar 85847d2f1: OUTPUT: «A\B\C␤»

[16:30] <ben_> @tobs thanks that was what I was looking for!

[16:33] <tadzik> tbrowder: no, unfortunately not

[16:36] *** sena_kun left
[16:36] *** sena_kun joined
[16:37] *** melezhik left
[16:42] *** Manifest0 left
[16:44] *** kensanata left
[16:48] <jmerelo> patrickb: still trying. I had a trusted installation I knew worked, it no longer does. I'm going to try again my other laptop, which I know it works. At the same time, tryhing latest version of Raku

[16:49] <jmerelo> Oh that h...

[16:51] <lizmat> xinming: sorry, was afk&

[16:52] <lizmat> my package A { our class B { } }; dd A::B    # our shows makes it visible, and it's inside, so A::B

[16:52] <evalable6> lizmat, rakudo-moar 8310690d5: OUTPUT: «A::B␤»

[16:52] <lizmat> my package A { class B { } }; dd A::B    # the default scope for class is "our", so this is also A::B

[16:52] <evalable6> lizmat, rakudo-moar 8310690d5: OUTPUT: «A::B␤»

[16:53] <lizmat> my package A { my class B { } }; dd A::B    # my limits the visibility to inside the A package, so outside of it, we cannot see it

[16:53] <lizmat> m: my package A { my class B { } }; dd A::B    # my limits the visibility to inside the A package, so outside of it, we cannot see it

[16:53] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Could not find symbol '&B' in 'A'␤  in block <unit> at <tmp> line 1␤␤»

[16:54] <tib> jmerelo : ok I get your message :) I will wait for the pre-review from gfldex before to know if it "fits the spirit"

[16:54] <tellable6> 2020-11-18T15:48:20Z #raku <jmerelo> tib create a PR in the repository, I'll take a look.

[16:58] *** guifa joined
[17:01] <jmerelo> tib: the spirit this year is that we would like them to be as beginner (as in no exposition to Raku) as possible. Seasonal references are appreciated, but really not needed.

[17:04] <jmerelo> patrickb: OK, done. Check out, for instance, the new https://docs.raku.org/type/IO::Path::Parts

[17:04] <jmerelo> (might not be there if the CDN has not caught up yet)

[17:05] <jmerelo> Hum, typegraph is missing...

[17:05] <jmerelo> OK, will have to try that for next...

[17:08] *** Manifest0 joined
[17:15] *** MilkmanDan left
[17:16] *** MilkmanDan joined
[17:34] <holyghost> I've found my mongbat wizard 3D model back, I am writing a 3D scenekit game. I hope I can use the model later on for pagan : github.com/theholyghost2/pagan, my game engine in the works

[17:35] <holyghost> pagan is written in raku

[17:35] *** dakkar left
[17:37] <holyghost> The scenekit game is a 3D version of an adapted NES solstice game

[17:37] <holyghost> The quest for the staff of Demnos

[17:38] <holyghost> too bad free models are hidden on the net, seems pricey sometimes

[17:39] <holyghost> but then again it kills the artists work

[17:39] <holyghost> So I better watch out when I put it into a raku module

[17:43] <holyghost> Problem is pagan needs 3D acceleration, and I am a bit behind on that since X11R6

[17:43] <holyghost> the older version had none

[17:43] <holyghost> wayland I dunno, but I better use a GL system I guess

[17:43] <holyghost> There's SDL2 in it for now

[17:45] <moon-child> I used c for gl, and then nativecall'd from a raku runner

[17:45] <holyghost> I hope Xliff can help out later on, if he finds the time

[17:46] <holyghost> moon-child : ok

[17:46] <holyghost> There'd better be a module, which I am not going to do myself, I have too much work already for that

[17:46] <moon-child> problem is that all the low-level 3d apis are *really annoying* to deal with.  (From any language.)  So you may have better luck with something like ogre3d

[17:47] <holyghost> true

[17:47] <moon-child> gl is fairly easy to wrap, as it's all integer constants and floating arrays; and you can generate bindings from the xml spec

[17:47] <holyghost> sure, ogre is pretty cool compared to GL

[17:48] <holyghost> and there's more support e.g. there's a FreeBSD package 

[17:49] <moon-child> there's also a freebsd package for opengl...

[17:49] <moon-child> (two, actually)

[17:50] <holyghost> anyway, I have a floor made up of cubes with a monkey/mongbat character in Xcode 10.14. Now I need to make it move

[17:50] <holyghost> moon-child : mesa and ?

[17:51] <moon-child> nv

[17:51] <holyghost> ah ok 

[17:51] <holyghost> which is nice :-)

[17:52] <holyghost> The mongbat has a red wizard hat on it with some white stripes then has a purple body 

[17:53] <holyghost> I also have a mongbat's quest game in the works, but this one will be called Solstice3DX

[17:53] <holyghost> with X being something else

[17:54] <holyghost> ok, I am a bit afk now, will try to alleviate the models and code tomorrow

[17:58] *** sno joined
[18:00] <patrickb> jmerelo: Looking very good, thank you! Also my rewrite of the object construction docs is now online :-)

[18:03] <patrickb> tbrowder: I have recently rewritten the object construction documentation with the aim to be a lot more obvious and clearer. If you want you could have a look. (I do value feedback :-)  (https://docs.raku.org/language/objects#Object_construction)

[18:03] <tbrowder> .tell tadzik maybe you should write a Moose for raku, call it RakuMoose or RMoose or Bison or Elk

[18:03] <tellable6> tbrowder, I'll pass your message to tadzik

[18:03] <patrickb> tadzik: ^ Maybe also an interesting read for you.

[18:04] <tadzik> patrickb: oh, definitely, thanks :)

[18:04] <lizmat> tbrowder: what would Moose bring to Raku that it doesn't already have ?

[18:04] <tadzik> tellable6: why didn't you tell me anything :o

[18:04] <tellable6> tadzik, I'll pass your message to why`

[18:05] <tadzik> 3>:(

[18:05] <tadzik> tbrowder: I think I'm done with writing animal-named things for a while ;P

[18:06] <tbrowder> oh, maybe nothing, but tadzik's talk on moose i think has some applicability to raku, but patrickb's docs may help...going there now.

[18:07] *** sno left
[18:09] *** patrickb left
[18:09] *** mowcat joined
[18:17] *** domidumont left
[18:18] *** jmerelo left
[18:19] <tbrowder> patrickb's doc is better, but i think tadzik's position was toward an easier cookbook-like approach. just my two cents.

[18:19] <tadzik> well, I just don't like the overreaching (imo) has design, regardless of how it's documented

[18:19] <tadzik> `has` design *

[18:19] <tbrowder> i

[18:20] <tbrowder> anyhoo, this has been very helpful for my current project, thanks!

[18:24] <tbrowder> the project btw is to provide a way to describe pdf forms' empty fields so dwarring's pdf classes can be used to fill them. the use case is for us irs forms and and it will include a cvs2txf converter for direct input to some us tax software.

[18:25] <tbrowder> the module is currently named TXF

[18:27] <tbrowder> the module should be able to be used for any pdf form that needs filling programmatically

[18:28] *** BenGoldberg joined
[18:37] *** simcop2387 left
[18:38] *** simcop2387 joined
[18:38] *** simcop2387 left
[18:38] *** simcop2387 joined
[18:41] *** aluaces joined
[18:42] *** pilne left
[18:43] *** Black_Ribbon joined
[18:52] *** pilne joined
[18:54] *** bocaneri left
[19:01] *** pkx joined
[19:01] *** pkx is now known as pkmnx

[19:02] <pkmnx> I was looking at the "most wanted modules" list ...

[19:02] *** BenGoldberg left
[19:03] <pkmnx> https://github.com/Raku/raku-most-wanted/blob/master/most-wanted/modules.md

[19:03] *** cpan-raku left
[19:03] <pkmnx> and it said:

[19:03] <pkmnx> These are the most-wanted pure Raku modules (as opposed to native library bindings). ...

[19:03] <pkmnx> ... and then it named:

[19:03] <pkmnx> "Graphics::Magick (port of Perl version)" ...

[19:03] <pkmnx> ...

[19:04] <pkmnx> but, fundamentally, the perl version wraps:

[19:04] <pkmnx> ...

[19:05] <pkmnx> libGraphicsMagick.so.3

[19:05] <pkmnx> and to get this into raku, I would think one would use native call ...

[19:06] <pkmnx> ... but i thought to ask here to see if there was some other way that I don't now about ...

[19:06] *** eseyman joined
[19:06] *** melezhik joined
[19:07] <melezhik> .tell tyil I have this error (probably on the latest version of Hash:;Merge) - https://gist.github.com/melezhik/6a0a037c71216806ac98abe43d26c86d

[19:07] <tellable6> melezhik, I'll pass your message to tyil

[19:11] <pkmnx> i mean, I guess you could say it wraps:

[19:11] <pkmnx> ./lib/x86_64-linux-gnu/perl5/5.30/auto/Graphics/Magick/Magick.so

[19:11] <pkmnx> for example ...

[19:11] <melezhik> .tell tyil I am doing this https://github.com/melezhik/Sparrow6/commit/2a85bd2db108f6e89fc7b202ec22f90516e072b0 as temporary remedy 

[19:11] <tellable6> melezhik, I'll pass your message to tyil

[19:17] <melezhik> it helped

[19:26] *** jmerelo joined
[19:32] *** wamba joined
[19:35] *** aborazmeh joined
[19:35] *** aborazmeh left
[19:35] *** aborazmeh joined
[19:39] *** Possum left
[19:42] *** jmerelo left
[19:47] *** sjm_uk left
[20:02] <melezhik> if someone is interested I've start an alpha version of RakuPlay -  https://rakudist.raku.org/play/ - a service to run Raku code under different Rakudo versions with Raku modules installation support

[20:03] <melezhik> it'd be useful if someone want to give their code, modules for a spin and share results with other people

[20:03] <pkmnx> ok ... no answer ...

[20:04] <pkmnx> I'll look for some answer elsewhere ...

[20:04] *** holyghost left
[20:06] *** MasterDuke joined
[20:07] <melezhik> here is an example of running HTTP::Tiny - https://raw.githubusercontent.com/melezhik/images/master/rakuplay.png cc jjatria

[20:09] <melezhik> https://rakudist.raku.org/sparky/report/RakuPlay-2/1310

[20:10] *** Altai-man joined
[20:12] *** sena_kun left
[20:14] <JJAtria[m]> melezhik: Cool! :D 

[20:21] *** ctilmes joined
[20:21] <ctilmes> pkmnx: I worked on GraphicsMagick a while back -- let me know if you want to take a look at what I did.

[20:21] <tellable6> 2020-07-22T20:58:33Z #whateverable <Xliff> ctilmes Have you figured out a way of using C function pointers from Raku? Hope things are going OK with you! TIA

[20:30] *** ctilmes left
[20:30] *** ctilmes joined
[20:32] <melezhik> https://twitter.com/melezhik2/status/1329160256795111425 RakuPlay teaser on twitter 

[20:33] <melezhik> I might bring it to a dedicated DSN name,  it shares a rakudist host so far ... I am just poor with resources :] 

[20:35] *** ctilmes left
[20:40] *** juniper_ joined
[20:41] *** juniper_ left
[20:50] <Geth> ¦ advent/authors-kaiepi: 0951e06bc7 | (Ben Davies)++ (committed using GitHub Web editor) | raku-advent-2020/authors.md

[20:50] <Geth> ¦ advent/authors-kaiepi: Add Kaiepi as an author

[20:50] <Geth> ¦ advent/authors-kaiepi: 

[20:50] <Geth> ¦ advent/authors-kaiepi: Just about all the Raku I write nowadays is typed. How to leverage Raku's type system is something I struggled with initially, so I figure an advent article on some strategies I use when typing my code would be helpful for others interested in doing this.

[20:50] <Geth> ¦ advent/authors-kaiepi: review: https://github.com/Raku/advent/commit/0951e06bc7

[20:51] <Geth> ¦ advent: Kaiepi++ created pull request #65: Add Kaiepi as an author

[20:51] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/65

[20:56] <pkmnx> cltimes ... 

[20:56] <pkmnx> sure ... I"m just looking at some quite basic definitions, to see if I'm even up for the task ...

[20:56] <pkmnx> trying to determine what is meant.

[20:57] <pkmnx> Graphics::Magick isn't a part of CPAN, but rather one yanks the distro and builds and installs from a local ...

[20:58] <pkmnx> there's a so, libMagick...

[20:58] <pkmnx> and then there's the Magick.so, created from xs ...

[20:59] <pkmnx> so, I guess, what is being asked for, from the raku "wanted modules" perspective is something that sits on top of that Magick.so work ?

[21:00] <pkmnx> and not a more lower level thing that hits libGraphicsMagick.so.3 ...

[21:00] <pkmnx> ?

[21:00] <pkmnx> so, in brief, I'm just trying to understand the ask.

[21:01] <pkmnx> from the "wanted modules" perspective ...

[21:01] <pkmnx> ...

[21:01] <pkmnx> then we can get into the programming details ...

[21:07] *** ctilmes joined
[21:08] <ctilmes> pkmnx: Mine is a 'lower level thing that hits libGraphicsMagick.so.3"

[21:08] <SmokeMachine> xinming: I think one of the best ways of doing many-to-many currently is something like this: https://www.irccloud.com/pastebin/JuWHQ0x7/

[21:09] <ctilmes> I'll try to clean it up a bit and publish a work in progress.  I ran into some problems and just walked away from it for a bit.  It still needs a lot of clean up.

[21:09] <ctilmes> But it does make it really easy to do some of the basic 'convert' type stuff

[21:09] <ctilmes> I don't have all the drawing functions implemented yet

[21:12] <ctilmes> reading/writing an image in all the formats, resizing, chop, coalesce, crop, deconstruct, flatten, flip/flop, mosaic, roll, shave, noise, blur, convolve, despeckle, edge, emboss, enhance, sharpen, charcoal, colorize, implode, oil-paint and more

[21:17] <tyil> melezhik: yes, that's probably because there's a backwards incompatible Hash::Merge:ver<2.0.0> now

[21:17] <tellable6> 2020-11-18T19:07:11Z #raku <melezhik> tyil I have this error (probably on the latest version of Hash:;Merge) - https://gist.github.com/melezhik/6a0a037c71216806ac98abe43d26c86d

[21:17] <tellable6> 2020-11-18T19:11:50Z #raku <melezhik> tyil I am doing this https://github.com/melezhik/Sparrow6/commit/2a85bd2db108f6e89fc7b202ec22f90516e072b0 as temporary remedy 

[21:17] <melezhik> yeah

[21:17] <tyil> 1.0.0 still works just fine, for the most part

[21:17] <melezhik> yes, this is why I froze it in Sparrow6 meta

[21:18] <tyil> I found a small bug, and decided to just rewrite it to my latest preferences, since it's a very small module :p

[21:18] <tyil> alright, that should solve it for now then :D

[21:18] <tyil> it was one in many dependencies for getting App::Assixt into the current-year, I hope to be spending next weekend for the finishing touches :D

[21:19] <melezhik> sure

[21:20] <tyil> (I plan to make App::Assixt also pin on a specific version number for dependencies (and auth, api) in the future, for exactly this reason, tbh)

[21:20] <tyil> regardless, I'm glad that a version pin solved your issue

[21:23] *** Tirifto joined
[21:25] <pkmnx> cltimes - why do they say they want, on the modules wanted page

[21:26] <pkmnx> not a native call library ?

[21:26] <pkmnx> I don't understand why they wouldn't want that, in this case ?

[21:26] *** ctilmes left
[21:26] *** ctilmes joined
[21:26] <pkmnx> ... unless, they are looking to replace, as much as possible, the code from Graphics::Magick ...and would like a drop in ?

[21:27] <pkmnx> ... but that's the nature of my questions, I think ... not technical, really ... but motivationally - so as to understand what is needed ... 

[21:30] *** ctilmes left
[21:45] <[Coke]> do we know who added that ask to the most wanted? You could ask them to clarify

[21:45] *** melezhik left
[21:46] <pkmnx> Coke - yeah, I was thinking that.

[21:47] <pkmnx> I was reading the history but maybe should just hit the git blame & see if I can find out directly ...

[21:47] *** MasterDuke left
[21:50] *** pkmnx left
[21:50] *** kensanata joined
[21:53] *** pkmnx joined
[21:53] *** ctilmes joined
[21:53] <pkmnx> I was kicked off, but, Coke, it was lizmat who penned the ask.

[21:53] *** BenGoldberg joined
[21:53] <pkmnx> so, I'll just ask there.

[21:54] <pkmnx> cltimes, can you send me your email & I'll write liz & cc you ...

[21:54] <pkmnx> ?

[21:54] <[Coke]> ok. she may have added it for someone else, just to level set.

[21:54] <pkmnx> "level set" ?

[21:59] <pkmnx> https://www.netlingo.com/word/level-set.php

[21:59] *** natrys left
[22:01] *** patrickb joined
[22:06] *** pkmnx left
[22:12] *** natrys joined
[22:14] *** ctilmes left
[22:14] *** ctilmes joined
[22:14] *** natrys left
[22:14] *** ctilmes left
[22:22] *** Tirifto left
[22:27] *** BenGoldberg left
[22:28] *** spycrab0 left
[22:28] <Geth> ¦ advent: 0951e06bc7 | (Ben Davies)++ (committed using GitHub Web editor) | raku-advent-2020/authors.md

[22:28] <Geth> ¦ advent: Add Kaiepi as an author

[22:28] <Geth> ¦ advent: 

[22:28] <Geth> ¦ advent: Just about all the Raku I write nowadays is typed. How to leverage Raku's type system is something I struggled with initially, so I figure an advent article on some strategies I use when typing my code would be helpful for others interested in doing this.

[22:28] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/0951e06bc7

[22:28] <Geth> ¦ advent: ece2776935 | Altai-man++ (committed using GitHub Web editor) | raku-advent-2020/authors.md

[22:28] <Geth> ¦ advent: Merge pull request #65 from Raku/authors-kaiepi

[22:28] <Geth> ¦ advent: 

[22:28] <Geth> ¦ advent: Add Kaiepi as an author

[22:28] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/ece2776935

[22:29] *** spycrab0 joined
[22:34] *** skids left
[22:44] *** kensanata left
[22:48] *** aborazmeh left
[22:59] *** wamba left
[23:02] *** Altai-man left
[23:12] <Geth> ¦ advent: pheix++ created pull request #66: Add pheix as an author

[23:12] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/66

[23:12] *** grep0r left
[23:13] *** sergot left
[23:13] *** sergot joined
[23:13] *** tadzik left
[23:17] *** patrickb left
[23:26] <Kaiepi> .tell jmerelo, i can be reached most reliably with a ping on irc

[23:26] <tellable6> Kaiepi, I'll pass your message to jmerelo

[23:35] *** tadzik joined
[23:56] *** patrickb joined
[23:57] <SmokeMachine> .tell xinming any suggestions about this? https://github.com/FCO/Red/issues/454

[23:57] <tellable6> SmokeMachine, I'll pass your message to xinming

[23:57] <patrickb> .tell rba I just created a new rakubrew release (v14). Can you upload the files? (https://rooster.uber.space/patcloud/index.php/s/qmkreEJLQDZcjbf)

[23:57] <tellable6> patrickb, I'll pass your message to rba

[23:57] * patrickb is off to bed

[23:57] *** patrickb left
[23:58] <SmokeMachine> kawaii: any suggestion about this? https://github.com/FCO/Red/issues/454

[23:59] *** rindolf left
