[00:05] *** john_parr_ joined
[00:05] *** john_parr_ left
[00:08] *** seanrobert left
[00:13] <AlexDaniel`> `@$¬¢XR**@$¬¢` heh

[00:29] *** seanrobert joined
[00:29] *** mowcat left
[00:31] *** e left
[00:47] *** seanrobert left
[00:47] *** john_parr joined
[00:52] *** sena_kun joined
[00:53] *** john_parr is now known as st_elmo

[00:53] *** Altai-man left
[01:08] *** edk_ joined
[01:22] *** AlexDani` joined
[01:24] *** AlexDaniel left
[01:30] *** xelxebar left
[01:30] *** xelxebar joined
[01:34] <rypervenche> What would the Raku equivalent of the Python „Äå"in" in ["in", "out"]„Äç be?

[01:45] *** molaf left
[01:57] *** molaf joined
[02:15] <rypervenche> Oh...

[02:15] <rypervenche> ‚ìÇ say "in" (elem) ("in", "out");

[02:16] <rypervenche> m: say "in" (elem) ("in", "out");

[02:16] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´True‚ê§¬ª

[02:40] *** MilkmanDan left
[03:21] *** seanrobert joined
[03:30] *** AlexDani` left
[03:30] *** AlexDani` joined
[03:31] *** st_elmo left
[03:33] *** seanrobert left
[03:35] <Geth> ¬¶ doc: 455d2f7c2d | Coke++ | doc/Language/subscripts.pod6

[03:35] <Geth> ¬¶ doc: Correct name of named argument to STORE

[03:35] <Geth> ¬¶ doc: 

[03:35] <Geth> ¬¶ doc: ... also in example (which didn't compile) and text

[03:35] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/455d2f7c2d

[03:35] <linkable6> Link: https://docs.raku.org/language/subscripts

[03:57] *** rindolf joined
[04:10] *** wamba joined
[04:14] *** wamba left
[04:15] *** wamba joined
[04:30] *** skids left
[04:51] *** Altai-man joined
[04:53] *** sena_kun left
[05:43] *** wamba left
[05:54] *** wamba joined
[05:57] *** skyl4rk left
[05:58] *** wamba left
[05:59] *** Marcool joined
[05:59] *** wamba joined
[06:00] <Marcool> Hi all, trying to update raku to moar-2020.07 on a raspberry pi is failing with the rather cryptic "make: *** [Makefile:1136: blib/CORE.c.setting.moarvm] Terminated", is there a way to get more information about the failing part? Passing --debug to make helps elsewhere but that is part of the "The following step can take a long time, please be patient. Stage start      :   0.001 etc." segment and --debug 

[06:00] <tellable6> 2020-05-21T15:46:30Z #raku <MasterDuke> Marcool: maybe run it under strace and see where it's actually looking?

[06:01] <Marcool> makes not difference to output there.

[06:01] <timotimo> Marcool: on the raspberry pi it's quite possible that you're running out of RAM. do you have a swap file or partition set up?

[06:01] <tellable6> 2020-08-15T21:55:57Z #raku <melezhik> timotimo I've broken down the Arrays VS Lists principal in Sparrow6 args stringification mechanism - https://github.com/melezhik/Sparrow6/blob/master/documentation/development.md#list-vs-arrays  

[06:01] <tellable6> 2020-08-15T23:22:03Z #raku <melezhik> timotimo `<>` works here - https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner.pm6#L126

[06:01] <tellable6> 2020-08-16T03:47:22Z #raku <melezhik> timotimo hopefully now I nailed it down - https://github.com/melezhik/Sparrow6/blob/master/documentation/development.md#single-element-args-array

[06:02] *** skyl4rk joined
[06:03] <Marcool> timotimo: oh‚Ä¶ i never thought of that! how simple. I used to have 2Gb and recently reduced it I think‚Ä¶ That would certainly be a good explanation I'll check

[06:05] <timotimo> dmesg may have a bit of extra information about the crash

[06:08] *** xinming left
[06:09] *** xinming joined
[06:14] <Marcool> timotimo: nothing of any help on dmesg, but it's actually earlyoom that's killing it a while before I get to 90% :D

[06:14] <Marcool> timotimo: you nailed it!

[06:15] <timotimo> earlyoom possibly saved you from a couple of minutes of a locked-up system maybe

[06:15] <timotimo> i'm glad i have earlyoom on my desktop system

[06:17] <Marcool> timotimo: yeah it's helped me out with a few memory-leaky pieces of code in the past I love it too

[06:18] <Geth> ¬¶ ecosystem: kjkuan++ created pull request #525: Add my fork of Fcntl module

[06:18] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/525

[06:47] *** xinming left
[06:48] *** xinming joined
[06:50] *** gnufr33dom left
[07:00] <Marcool> timotimo: cool! build completed :D 

[07:01] <Marcool> now new question: is there a simple way to reinstall local (i.e not in the ecosystem) modules with zef after a rakudobrew upgrade?

[07:02] <Marcool> i've kind of fiddled together a find command with an execute flag but dependencies tend to make it tedious‚Ä¶

[07:03] <timotimo> as long as the distribution was initially installed with something like zef, the sources should be in the installation as well, and whenever stuff gets updated, rakudo should rebuild from source

[07:04] <Marcool> oh‚Ä¶ that's not what I have been noticing :/ I am using zef to install my modules, but on upgrade (rakudobrew build moar 2020.07; rakudobrew global moar-2020.07 for instance) they are no longer installed in "that version"

[07:05] <timotimo> oooh rakudobrew

[07:05] <timotimo> that's a tool specifically made to keep different versions as separate as possible

[07:10] *** zacts joined
[07:11] <Marcool> timotimo: oooooh yes‚Ä¶

[07:11] <Marcool> so if I had a single system installed version and just upgraded that as versions came out, installed modules would be re-built/installed ?

[07:11] <timotimo> yeah, it's kind of trying to keep you from doing what you want there :)

[07:12] <timotimo> i hope i'm remembering this correctly and not spouting falsehoods

[07:12] <Marcool> yeah but I see the trade-off. At least you know things work in a certain configuration and it's super easy to switch back and forth. If I upgrade and some module breaks, then I have to uninstall/reinstall raku to downgrade back to a working configuration

[07:13] <timotimo> well, we're usually running all modules's test suites when doing releases

[07:16] *** Sgeo left
[07:16] <Marcool> I'm sure some of my modules will fail sooner or later :D

[07:17] <Marcool> (they're not in the ecosystem just local)

[07:17] <timotimo> that makes it more difficult for us to keep stuff working :)

[07:17] <Marcool> sure, and I do plan to upload them at some point‚Ä¶ but most of them are just a mess at this point :D

[07:18] <Marcool> I don't mean that I don't want to give back, nor that I don't want to help though, of course! I very much appreciate all you folks hard work

[07:18] <timotimo> i understand the feeling behind not wanting to push code that isn't very pretty

[07:25] *** abraxxa joined
[07:30] *** dolmen joined
[07:34] *** Manifest0 left
[07:35] <Geth> ¬¶ ecosystem: 4a707cc0a1 | (Jack Kuan)++ (committed using GitHub Web editor) | META.list

[07:35] <Geth> ¬¶ ecosystem: Add my fork of Fcntl module

[07:35] <Geth> ¬¶ ecosystem: 

[07:35] <Geth> ¬¶ ecosystem: This is needed for the `Shell::DSL` PR.

[07:35] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/4a707cc0a1

[07:35] <Geth> ¬¶ ecosystem: 4508ed1ec9 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[07:35] <Geth> ¬¶ ecosystem: Merge pull request #525 from kjkuan/patch-2

[07:35] <Geth> ¬¶ ecosystem: 

[07:35] <Geth> ¬¶ ecosystem: Add my fork of Fcntl module

[07:35] <Geth> ¬¶ ecosystem: I think it's OK now, but I guess it needs a bit of tweaking on the test side...

[07:35] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/4508ed1ec9

[07:36] *** abraxxa left
[07:38] *** dakkar joined
[07:38] *** leont joined
[07:38] *** Marcool left
[07:40] *** molaf left
[07:41] *** dolmen left
[07:43] *** Manifest0 joined
[07:52] *** abraxxa joined
[07:56] *** abraxxa left
[07:57] *** abraxxa joined
[08:17] *** rockxloose left
[08:18] *** rockxloose joined
[08:46] *** edk_ is now known as e

[08:51] *** sena_kun joined
[08:53] *** Altai-man left
[09:10] *** ChoppedBacon left
[09:11] <Geth> ¬¶ advent: 6ac631658a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20th/articles/rfc200.md

[09:11] <Geth> ¬¶ advent: More of woolfy++ tweaks

[09:11] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/6ac631658a

[09:11] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2020/08/17/defined-or-dynvar/

[09:12] *** Black_Ribbon left
[09:16] *** ChoppedBacon joined
[09:19] *** Marcool joined
[09:19] *** wamba left
[09:22] *** hungrydonkey joined
[09:26] *** Marcool left
[09:33] *** hungrydonkey left
[09:35] *** hungrydonkey joined
[09:53] *** wamba joined
[10:00] *** stoned75 joined
[10:14] *** wamba left
[10:39] *** MilkmanDan joined
[10:47] *** stoned75 left
[10:48] *** stoned75 joined
[10:59] *** Cabanossi joined
[11:17] *** JJMerelo joined
[11:42] <codesections> Upon reflection, I've decided I really dislike the way `¬ª.` uses the nodality of a routine to call either `deepmap` or `nodemap`.  It's not *that* bad (and I recognize that it's well documented, including in the Traps to Avoid page), but I wish we'd budgeted an extra operator to call `deepmap`, and had made `¬ª.` always use `nodemap` 

[11:44] *** Tirifto joined
[11:46] *** JJMerelo left
[11:53] *** hungrydonkey left
[11:53] <codesections> (and yes, I realize I'm being petty: the solution is nearly always to write `.map(*.method)` instead of `¬ª.method`, which costs only 4 characters.  But still, Raku is *usually* so good at avoiding "smart" behavior that actually doesn't dwim that this stands out

[11:53] <codesections> )

[11:54] *** terminatorul joined
[11:54] <terminatorul> Hello !

[11:54] <codesections> hi!

[11:55] <terminatorul> I run into a MoarVM panic with a short script:

[11:55] <terminatorul> role SqlInfo does X::Control{    has $.message = "Sql Info X::ControlFlow";}warn("Warning message");say "Exiting now";CONTROL{    when (SqlInfo)    {	say .message;	.resume    }}

[11:56] <terminatorul> Am I doing something wrong please ?

[11:56] <terminatorul> Sorry, how do you paste code here ?

[11:56] <terminatorul> "MoarVM panic: Trying to unwind over wrong handler"

[11:56] <codesections> The way you pasted code is generally fine.  You can also evaluate it here like this:

[11:56] <codesections> m: say 'hello world!'

[11:56] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´hello world!‚ê§¬ª

[12:02] <codesections> terminatorul: I'm not sure.  I reproduced the panic with that code.  I haven't used phasers all that much (or the CONTROL phaser at all), so I may not be the best person to help.

[12:03] <codesections> Oh!

[12:03] <codesections> m: role SqlInfo does X::Control { has $.message = "Sql Info X::ControlFlow"}; warn 'Warning message'; say "Exiting now"; { CONTROL { when (SqlInfo) { say .message; .resume }}

[12:03] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3hen (SqlInfo) { say .message; .resume }}7‚èè5<EOL>‚ê§¬ª

[12:04] <codesections> role SqlInfo does X::Control { has $.message = "Sql Info X::ControlFlow"}; warn 'Warning message'; say "Exiting now"; { CONTROL { when (SqlInfo) { say .message; .resume }}}

[12:04] <evalable6> codesections, rakudo-moar 9d6d8dd7a: OUTPUT: ¬´Warning message‚ê§Exiting now‚ê§  in block <unit> at /tmp/oCe6kliAiV line 1‚ê§¬ª

[12:05] <codesections> terminatorul: That works ^^^^, and the only difference to your code is the extra block around the CONTROL block

[12:05] <terminatorul> Oh ... but that is wrong

[12:05] <terminatorul> I mean it already has a different semantic

[12:06] <codesections> ok, right.  But I believe CONTROL cannot be used in the global scope, because it's a phaser that runs on block exit

[12:07] <lizmat> https://docs.raku.org/syntax/CONTROL

[12:07] <lizmat> I guess the text can be confusing

[12:07] <lizmat> but CONTROL runs whenever a control exception is thrown

[12:08] <lizmat> just like CATCH

[12:08] <lizmat> you could see CONTROL as a CATCHer of benevolent exceptions

[12:08] <codesections> (lizmat definitely knows this way better than I do, so listen to her over me :) ) 

[12:08] *** hungrydonkey joined
[12:09] <terminatorul> I don't find anything against CONTROL in global scope...

[12:10] <terminatorul> I am trying to create an exception class for warnings or notifications from SQL statements run with ODBC

[12:10] <terminatorul> Based on how the language warnings display output but do not interrupt the program flow

[12:11] <terminatorul> Yet they can still be caught and processed differently if the application needs to

[12:11] <terminatorul> So could I create a similar exception in my module ?

[12:11] <lizmat> m: CONTROL { say "caught a $_.^name() exception" }; next

[12:11] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a CX::Next exception‚ê§next without loop construct‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:11] <lizmat> m: CONTROL { say "caught a $_.^name() exception" }; warn "foo:

[12:12] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3ht a $_.^name() exception" }; warn "foo:7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[12:12] <lizmat> m: CONTROL { say "caught a $_.^name() exception" }; warn "foo"

[12:12] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a CX::Warn exception‚ê§foo‚ê§MoarVM panic: Trying to unwind over wrong handler‚ê§¬ª

[12:12] <lizmat> interesting

[12:12] <lizmat> m: warn "foo"

[12:12] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´foo‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[12:12] <lizmat> m: CONTROL { say "caught a $_.^name() exception" }; warn "foo"

[12:12] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a CX::Warn exception‚ê§foo‚ê§MoarVM panic: Trying to unwind over wrong handler‚ê§¬ª

[12:12] <lizmat> m: CONTROL {  }; warn "foo"

[12:12] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´foo‚ê§MoarVM panic: Trying to unwind over wrong handler‚ê§¬ª

[12:13] <terminatorul> The panic shows when you CONTROL a class derived from X::Control; doing this appears to break built-in warn()

[12:13] <lizmat> m: CONTROL { say "caught a $_.^name() exception" }; redo

[12:13] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a CX::Redo exception‚ê§redo without loop construct‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:13] <lizmat> m: CONTROL { say "caught a $_.^name() exception"; .resume }; redo

[12:13] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a CX::Redo exception‚ê§This exception is not resumable‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:13] <lizmat> hmmm

[12:14] * lizmat continues working on the RWN

[12:16] <lizmat> sena_kun tells me it's a long standing issue: https://github.com/rakudo/rakudo/issues/1605

[12:19] <terminatorul> So could I still create a warning-like exception class for my SQL commands ?

[12:21] <lizmat> Yes, you can, you should make sure your class does the X::Control role

[12:21] <lizmat> m: CONTROL { dd $_ }; class Foo does X::Control { }; Foo.new.throw

[12:21] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´Foo.new‚ê§control exception without handler‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:22] <lizmat> m: CONTROL { say "caught a $_.^name() control exception" }; class Foo does X::Control { }; Foo.new.throw

[12:22] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a Foo control exception‚ê§control exception without handler‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:22] <lizmat> m: CONTROL { say "caught a $_.^name() control exception"; .resume }; class Foo does X::Control { }; Foo.new.throw

[12:22] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´caught a Foo control exception‚ê§Cannot find method 'sink' on 'BOOTException': no method cache and no .^find_method‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:22] <terminatorul> I would like the warning-like behavior, meaning I would like my exception to be resumed by default ... by the runtime

[12:22] <terminatorul> Is this possible ?

[12:24] <lizmat> probably, but I don't have a boilerplate for that available

[12:24] <lizmat> looks to me it would be a good SO question: https://stackoverflow.com/questions/tagged/raku

[12:25] <terminatorul> Is there a way to inherit CX::Warning, but parameterize my exception like I can parameterize a role ?

[12:26] <terminatorul> Another issue I have: some multi-byte strings, like  "s≈ü t≈£", will send interactive raku into an error loop repeating a message like: "Malformed UTF-8 near bytes .. ad"

[12:26] <terminatorul> Apparently interactive raku is trying to read utf-8 strings from the console, but the default encoding in Windows is NOT utf-8, but depends on locale

[12:27] *** john_parr_ joined
[12:27] <terminatorul> In my case the string encoding used by the operating system is iso-8859-1

[12:31] *** john_parr_ left
[12:38] *** hungrydonkey left
[12:42] *** stoned75 left
[12:42] <lizmat> terminatorul: sorry, am busy with the RWN and was distracted...  

[12:42] <lizmat> I don't have an immediate answer

[12:43] *** stoned75 joined
[12:51] *** Altai-man joined
[12:53] *** sena_kun left
[13:01] *** terminatorul left
[13:02] *** __jrjsmrtn__ joined
[13:03] *** _jrjsmrtn left
[13:07] <rir> lizmat: Could you consider Rakudo/Test.rakumod/done-testing returning  Bool for passing or not?

[13:08] <lizmat> what would be considered "passing" ?

[13:09] <lizmat> no tests failed and correct number of tests when number of tests was specified ?

[13:09] <rir> lizmat: Yes, you type faster than I!

[13:10] <lizmat> I guess a PR would be considered   :-)

[13:10] <lizmat> Q: why would you need it ?

[13:10] *** xinming left
[13:11] *** xinming joined
[13:11] <rir> I want to turn tests around when actually coding by not testing when last passed and no dependencies have chained.  

[13:12] <rir> That without running a multi-level make.

[13:13] *** gnufr33dom joined
[13:14] <rir> Thanks, I'll work on a PR.

[13:17] *** stoned75 left
[13:23] *** stoned75 joined
[13:25] *** hungrydonkey joined
[13:34] *** zacts left
[13:34] *** zacts joined
[13:40] *** terminatorul joined
[13:43] *** terminatorul left
[13:50] *** zacts left
[13:53] <holyghost> where to start to learn NQP, good links or something ? I can port my theorem prover

[13:55] <codesections> holyghost: The link I was given was https://edumentab.github.io/rakudo-and-nqp-internals-course/slides-day1.pdf which is from 2013 ‚Äì I'm not aware of anything more recent, but I'd love to learn otherwise

[14:00] <holyghost> codesections : thanks a lot, I already have those on my server :-)

[14:01] <holyghost> I fogot

[14:01] <holyghost> *forgot

[14:03] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/08/17/2020-33-function-types/

[14:07] <holyghost> ok, so now to go from scheme lists to nqp lists :o|

[14:08] *** skids joined
[14:17] <holyghost> Is there an elegant way in nqp to implement actors ?

[14:17] <holyghost> e.g. an object that understands messages

[14:20] <holyghost> ok, I'll manage with a messaging system in a class or something like that

[14:23] <dakkar> holyghost: https://github.com/jnthn/oo-actors ?

[14:23] <dakkar> I'm not sure why you'd want to do it at the nqp level, though

[14:25] <holyghost> well, because of a better system but I need to look into it that it is usable in raku's nqp layer

[14:25] *** cpan-raku left
[14:26] *** cpan-raku joined
[14:26] *** cpan-raku left
[14:26] *** cpan-raku joined
[14:26] *** Sgeo joined
[14:27] <dakkar> I don't understand that sentence

[14:28] <holyghost> dakkar : I need to understand if classes are used in the implementation of raku in nqp

[14:28] <holyghost> if they are not, I'd better not use nqp classes myself

[14:29] *** hungrydonkey left
[14:29] *** hungryd61 joined
[14:30] <moritz> they are

[14:31] <moritz> (as a simple `git grep` can reveal pretty quickly)

[14:31] <dakkar> https://github.com/Raku/nqp/blob/master/src/NQP/World.nqp#L4 ‚Üê just as an expample

[14:32] <dakkar> holyghost: wait, are you writing a compiler for some non-raku language, in nqp?

[14:32] <holyghost> thanks, I understand

[14:33] <dakkar> (are there other reasons to use nqp instead of raku?)

[14:33] <holyghost> no, that's my scheme rsr3 implementation in C at github.com/theholyghost2/racul

[14:34] <holyghost> dakkar : I want to add a split method without delimiters

[14:34] <dakkar> to what?

[14:34] <dakkar> Raku `Str`?

[14:34] <holyghost> the delimiters and result get theorem proved

[14:34] <holyghost> to Str yes

[14:34] <holyghost> a stream or collection in my scheme code

[14:35] <dakkar> I still can't understand most of what you write

[14:35] <holyghost> a theorem prover is handy in a compiler, but machines are not always fast enough for it

[14:35] <holyghost> dakkar : for example,

[14:35] <dakkar> are you trying to do compile-time correctness checks for Raku, via a theorem prover running in the compiler?

[14:36] <holyghost> split ("a b\n c\t \r\n\") the theorem prover calculates the delimiter

[14:36] <dakkar> uh? why would that ever have a single solution?

[14:36] <[Coke]> I would recommned implementing in Raku instead of nqp if possible.

[14:37] <dakkar> I mean, the delimiter that the programmer meant is obviously "\0", and there just happen to be a single element

[14:37] <dakkar> ‚ò∫

[14:37] <dakkar> what would the theorem be, there?

[14:38] <holyghost> as I said it is usable on streams and arrays

[14:39] <holyghost> dakkar : the theorem calculates several delimiters by logic theory, function theory and object theory

[14:39] <dakkar> I'd love to see that theorem‚Ä¶

[14:40] <holyghost> sure, that's what I want to do

[14:40] <dakkar> when you say "works on arrays"‚Ä¶ could you give me an example? input and output

[14:41] <codesections> I just realized that the feed operator is much more powerful than I'd known:

[14:41] <codesections> m: say 1 ==> { $_ + 1 }()

[14:41] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´1‚ê§¬ª

[14:41] <codesections> m: say (1 ==> { $_ + 1 }())

[14:41] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´2‚ê§¬ª

[14:42] *** stoned75 left
[14:42] <holyghost> dakkar : I did a prototype in scheme : (define (enter-validities)

[14:42] <holyghost>                 ;; NOTE that the key is a number (to be hashed) and the value

[14:42] <holyghost>                 ;; of the dictionary is a predicate

[14:42] <holyghost>                 ((*validities 'add) 0 (make-theorem-prover-predicate

[14:42] <holyghost>                         ;; p and q (as booleans) 

[14:42] <holyghost>                 (cons (make-theorem-prover-precondition '(

[14:42] <holyghost>                         (make-theorem-prover-predicate-item 'operator-and 'and ) 

[14:42] <holyghost>                                                         '(

[14:42] <holyghost>                         (make-theorem-prover-predicate-item 'boolean 'p ) 

[14:42] <holyghost>                         (make-theorem-prover-predicate-item 'boolean 'q )

[14:42] <holyghost>                                                      )))

[14:42] <holyghost>                         ;; is q and p 

[14:42] <dakkar> codesections: it's a very fancy way to pass arguments ‚ò∫

[14:42] <codesections> dakkar: It is :D  

[14:43] <dakkar> holyghost: ehrm, don't flood the channel ‚ò∫

[14:43] <holyghost> sorry, forgot pastebin

[14:43] <dakkar> no worries, happens to the best of us

[14:43] <codesections> And, importantly (at least to me) it's a fancy way to pass arguments from left to right *without* needing to give them a name 

[14:44] *** stoned75 joined
[14:44] <holyghost> dakkar : HTH, I'm afk for a while

[14:44] <dakkar> we didn't get anything past the first 10 lines‚Ä¶

[14:45] <holyghost> ok, WAM

[14:46] <holyghost> dakkar, you see the types such as boolean, the precond and the posterior

[14:46] <holyghost> of the predicate

[14:46] <dakkar> and nothing else

[14:47] <holyghost> that will be added to function logic, e.g. f : a -> a + n

[14:47] <holyghost> for hashing towards the best delimiters

[14:47] <dakkar> how does that help guessing what to split a random string on?

[14:47] <dakkar> it's not a decidable proposition!

[14:47] <holyghost> it's a better system for it, although it is slower

[14:48] <holyghost> I just want to create a patch for it, nothing more

[14:48] <holyghost> or a PR

[14:48] <holyghost> more code, more fun :-)

[14:48] <dakkar> why would I even want my program to guess?

[14:49] <holyghost> to alleviate

[14:50] <holyghost> to program split faster for example

[14:50] <dakkar> I'm sure I'm missing something‚Ä¶ it feels like a debugging nightmare to me

[14:50] <holyghost> :-)

[14:51] <dakkar> again, in your example of `split ("a b\n c\t \r\n\")`, how would your magic ever guess that the correct delimiter to split on is `\0`?

[14:51] <holyghost> or " "

[14:51] <holyghost> my magic will be programmed

[14:51] * holyghost bows

[14:52] <[Coke]> Makes no sense to me.

[14:52] <dakkar> you said "it works for arrays"

[14:52] <dakkar> can you show an example of it working? 1-2 lines of code, input, output

[14:52] <holyghost> not yet, sorry

[14:53] <dakkar> how do you know it's working, then?

[14:53] <holyghost> I'll give a simple example :

[14:53] <dakkar> thank you

[14:54] <holyghost> f : x -> y : x := x + hash, then use risk function theory to find the most common delimiter

[14:54] <holyghost> hash is e..g a random number

[14:54] <holyghost> I need to elevate the simplicity of the f

[14:54] <dakkar> I see no arrays there

[14:55] <holyghost> but you can prove that more or less

[14:55] <holyghost> the array is a type within the object theory of the theorem prover

[14:55] <holyghost> e.g. in the scheme code above '('array etc.

[14:56] <dakkar> ok, so when you said "it works for arrays and streams" you were referring to the prover, not to the "guess the delimiter" thing?

[14:56] <holyghost> both

[14:56] <dakkar> can you show me an example of "guess the delimiter" working?

[14:56] <dakkar> as in, "given this input, it guesses this delimiter"?

[14:56] <holyghost> ok,

[14:57] <holyghost> ('array a b c), you hash the array then you find " "

[14:57] <holyghost> e.g. an argmax/minimax to be simple

[14:58] <holyghost> s/to be simple/as a simple theory/

[14:58] <dakkar> I'm not asking _how_ it guesses

[14:58] <holyghost> It still stays a theorem prover however

[14:58] <dakkar> I'm just asking _what_ it guesses

[14:59] <dakkar> you say that given a three-element array containing three lower-case latin letters, the guessed delimiter is U+0020

[14:59] <holyghost> one or several delimiters, split without a delimiter argument (non-perl wise) then returns a split lists with guessed delimiters

[14:59] <holyghost> s/lists/list

[15:00] <holyghost> dakkar : with an object theory, one might use a 'iterator type

[15:00] <dakkar> I'm not interested in the implementation, right now

[15:00] <holyghost> the object theory as a theory for the theorem prover

[15:00] <holyghost> ok

[15:00] <dakkar> I'm trying to figure out the expected result

[15:01] <holyghost> a good split :-)

[15:01] <dakkar> again, given the input string `"a b c\td e f\ng h i"`, I see no sensible code that would guess that the correct value to split on is `"|\n"`

[15:02] *** MilkmanDan left
[15:02] <holyghost> sure, it stays a statistic for example

[15:03] <holyghost> I'm not sayinng its theorem proves everything, that's probably what you wanted to hear

[15:03] <dakkar> and code that would return the equivalent of `(" ","\n","\t",/<ws>/,/<ws>+/).map: { $input.split($_) }` feels not very useful to me

[15:03] *** MilkmanDan joined
[15:04] <dakkar> (a theorem doesn't prove anything, a theorem gets proven)

[15:04] <holyghost> I use statistics for it too

[15:04] <holyghost> It' a holly theorem prover :-)

[15:05] <holyghost> anyway, I'll show you the code in nqp

[15:05] <holyghost> if I may

[15:05] <dakkar> I fear we are using two different definitions of "theorem"

[15:05] <holyghost> when it's finished, I made a prototype which works a bit

[15:05] <holyghost> dakkar : I use theories

[15:05] <Geth> ¬¶ doc/baggy-typo: 14dca27dc4 | (Stoned Elipot)++ | doc/Type/Baggy.pod6

[15:05] <Geth> ¬¶ doc/baggy-typo: typo

[15:05] <Geth> ¬¶ doc/baggy-typo: review: https://github.com/Raku/doc/commit/14dca27dc4

[15:05] <holyghost> sublogic, functional logic, object theory logic

[15:06] <Geth> ¬¶ doc: stoned++ created pull request #3562: typo

[15:06] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3562

[15:06] <holyghost> dakkar : I'm going afk now, thanks for the talk

[15:06] <dakkar> sure, have fun!

[15:06] <holyghost> as I said, I'll show you the code for it, when it's done

[15:07] <holyghost> it's done when it's done

[15:07] <dakkar> as always

[15:20] <lizmat> holyghost: sant√©

[15:21] <Geth> ¬¶ doc: 14dca27dc4 | (Stoned Elipot)++ | doc/Type/Baggy.pod6

[15:21] <Geth> ¬¶ doc: typo

[15:21] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/14dca27dc4

[15:21] <Geth> ¬¶ doc: 53021e905a | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | doc/Type/Baggy.pod6

[15:21] <Geth> ¬¶ doc: Merge pull request #3562 from Raku/baggy-typo

[15:21] <Geth> ¬¶ doc: 

[15:21] <Geth> ¬¶ doc: typo

[15:21] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/53021e905a

[15:21] *** stoned75 left
[15:21] <linkable6> Link: https://docs.raku.org/type/Baggy

[15:22] *** gordonfish left
[15:27] *** stoned75 joined
[15:48] *** terminatorul joined
[15:48] <terminatorul> Hello

[15:48] <terminatorul> Is there a way to read a CStruct with an embedded native array inside ?

[15:49] <terminatorul> I am trying to follow the example in the Native calling interface, but the nativesizeof() is always wrong and the script crashes 

[15:49] <terminatorul> And now I get "CStruct representation attribute not yet fully implemented"

[15:49] <terminatorul> Is that correct ?

[15:50] <dakkar> would that be something like `struct { int foo[4]; }` ?

[15:50] <terminatorul> Yes

[15:50] <dakkar> ew, ugly C

[15:50] <dakkar> I suspect that, as far as NativeCall is concerned, that's not an array (i.e. not a pointer)

[15:51] <terminatorul> My struct is

[15:51] <terminatorul> typedef struct _cpinfoexA {  UINT  MaxCharSize;  BYTE  DefaultChar[MAX_DEFAULTCHAR];  BYTE  LeadByte[MAX_LEADBYTES];  WCHAR UnicodeDefaultChar;  UINT  CodePage;  CHAR  CodePageName[MAX_PATH];} CPINFOEXA, *LPCPINFOEXA;

[15:51] <terminatorul> From the WinAPI documentation

[15:51] <dakkar> I guessed win32 by the weird consonant mashup üòú

[15:52] <stoned75> am I wrong thinking that *-N on .pick/pickpairs/grab/grabpair is not documented ?

[15:53] <dakkar> terminatorul: the `CArray` is a pointer type https://github.com/rakudo/rakudo/blob/master/lib/NativeCall/Types.rakumod#L92

[15:53] <dakkar> so not what you want, there

[15:53] <lizmat> stoned75: could very well be

[15:53] <stoned75> perhaps not even roasted ?

[15:55] <terminatorul> Could I map the native array to a memberd declard as "HAS Str $name" ?

[15:55] <terminatorul> Or could I use HAS CArray[] instead ?

[15:55] <dakkar> I'm pretty sure Str maps to `const char *`

[15:56] <dakkar> `has CArray $.foo` would expect a pointer in the struct, too

[15:56] <lizmat> stoned75: could very well be as well

[15:56] <stoned75> lizmat: eheh :)

[15:57] <dakkar> terminatorul: I don't see any obvious way to tell NativeCall "there's 300 bytes here, map them to a Buf"

[15:58] * dakkar doesn't know enough about NativeCall

[15:58] <terminatorul> I will use a Buf as the structure and serialize the members manually

[15:58] <terminatorul> Thank you guys !

[15:58] <lizmat> terminatorul+

[15:58] <lizmat> +

[16:04] <holyghost> m: @a.what

[16:04] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@a' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5@a.what‚ê§¬ª

[16:05] <holyghost> m: my @a = (); @a.what

[16:05] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´No such method 'what' for invocant of type 'Array'.  Did you mean any‚ê§of these: 'Rat', 'flat'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:05] <holyghost> m: my @a; @a.flat;

[16:05] <camelia> rakudo-moar 9d6d8dd7a: ( no output )

[16:05] <holyghost> m: my @a; @a.Rat;

[16:05] <camelia> rakudo-moar 9d6d8dd7a: ( no output )

[16:07] <holyghost> m: my @a = (1 2 3); @a.flat

[16:07] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3my @a = (17‚èè5 2 3); @a.flat‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§      ‚Ä¶¬ª

[16:07] <dakkar> holyghost: not lisp, you need commas ‚ò∫

[16:07] <holyghost> m: my @a = (1,2,3); @a.flat

[16:07] <camelia> rakudo-moar 9d6d8dd7a: ( no output )

[16:08] <dakkar> also you may want to `say` things

[16:08] <holyghost> ok

[16:08] <holyghost>  m: my @a = (1,2,3); @a.say

[16:08] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[16:08] <holyghost> nice :-)

[16:08] <dakkar> it's similar to the rakudo repl, but won't just print the results of expressions

[16:08] *** xinming left
[16:09] <holyghost> dakkar : how do I return the type of @a ?

[16:09] <holyghost> m: my @a = (1,2,3); @a.what.say;

[16:09] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´No such method 'what' for invocant of type 'Array'.  Did you mean any‚ê§of these: 'Rat', 'flat'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:10] <dakkar> m: my @a;say @a.^name

[16:10] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´Array‚ê§¬ª

[16:10] <dakkar> for example

[16:10] <holyghost> thanks

[16:10] <dakkar> but that's a string, not a class

[16:10] <holyghost> sure

[16:10] <dakkar> m: my @a;say @a.^HOW

[16:10] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use .^ on a non-identifier method call‚ê§at <tmp>:1‚ê§------> 3my @a;say @a.^HOW7‚èè5<EOL>‚ê§    expecting any of:‚ê§        method arguments‚ê§¬ª

[16:11] *** xinming joined
[16:12] <dakkar> m: my @a;say @a.HOW.^name

[16:12] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´Perl6::Metamodel::ClassHOW+{<anon>}‚ê§¬ª

[16:13] <dakkar> ah, there it is

[16:13] <dakkar> m: my @a;say @a.WHAT

[16:13] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´(Array)‚ê§¬ª

[16:14] <dakkar> that is the (stringifiacation of) the type objecgt

[16:14] <dakkar> (it's been too long since I played with raku‚Ä¶)

[16:15] <holyghost> thanks

[16:22] *** guifa` joined
[16:42] *** dakkar left
[16:45] *** AlexDani` is now known as AlexDaniel

[16:45] *** AlexDaniel left
[16:45] *** AlexDaniel joined
[16:45] <leont> lizmat: small correction on the weekly: I wrote the RFC22 article (JJ posted it as I didn't have the right wordpress credentials and this was easier)

[16:46] <lizmat> aaaah...  will fix

[16:47] <lizmat> fixed

[16:47] <lizmat> leont++  # excellent article

[16:47] <lizmat> afk&

[16:47] <leont> :-)

[16:49] *** mowcat joined
[16:52] *** sena_kun joined
[16:53] *** Altai-man left
[17:02] *** finanalyst joined
[17:12] *** guifa` left
[17:28] <codesections> weekly: http://bsdimp.blogspot.com/2020/08/a-35-year-old-bug-in-patch-found-in.html

[17:28] <notable6> codesections, Noted! (weekly)

[17:30] <codesections> (not directly Raku related, but about Larry's Patch and dealing with code that's been there since the beginning)

[17:30] <codesections> (also, I didn't get a chance to say it earlier, but thanks for the Weekly again this week lizmat++)

[18:02] *** mowcat left
[18:21] *** Sauvin left
[18:29] *** stoned75 left
[18:31] *** MilkmanDan left
[18:36] *** stoned75 joined
[18:47] *** JRaspass joined
[18:53] *** Black_Ribbon joined
[19:19] <codesections> When enforcing some invariant in a POST block, is it considered more idiomatic to throw an exception when the invariant is violated, or to return False?

[19:22] <[Coke]> ... or Failure?

[19:22] <codesections> Yeah, or Failure.  Is that your preference? 

[19:23] <codesections> It looks like Roast returns a Bool, for what that's worth: https://github.com/Raku/roast/blob/master/S04-phasers/pre-post.t#L65-L67

[19:29] <[Coke]> no preference, just mentioning the option

[19:31] *** skids left
[19:44] *** vrurg left
[19:45] *** vrurg joined
[19:54] *** guifa` joined
[19:56] *** stoned75 left
[20:33] *** codesections left
[20:43] *** codesections joined
[20:46] *** codesections left
[20:50] *** codesections joined
[20:51] *** Altai-man joined
[20:53] *** sena_kun left
[21:03] *** melezhik joined
[21:11] *** MilkmanDan joined
[21:29] *** skids joined
[21:42] *** bigdata joined
[21:42] *** melezhik left
[22:00] *** bigdata left
[22:08] <Geth> ¬¶ advent: 1f6c45beb7 | Altai-man++ | 20th/articles/rfc28.md

[22:08] <Geth> ¬¶ advent: Minor tweaks

[22:08] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/1f6c45beb7

[22:08] <Geth> ¬¶ advent: 630399793c | Altai-man++ | 20th/articles/rfc84.md

[22:08] <Geth> ¬¶ advent: Add RFC 84 article

[22:08] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/630399793c

[22:15] *** rindolf left
[22:29] *** mowcat joined
[22:37] *** gordonfish joined
[22:46] *** guifa` left
[22:47] *** melezhik joined
[22:48] <melezhik> .tell tony-o - here the list of aws related sparrow plugins, including the ones to work with lambdas - http://rakudist.raku.org/hub/search?q=aws

[22:48] <tellable6> melezhik, I'll pass your message to tony-o

[22:50] <tbrowder> jj

[22:52] <tbrowder> jjmerelo: how often are public-facing doc pages regenerated? do i need to trash my browser cache to see an update?

[22:52] <tellable6> tbrowder, I'll pass your message to JJMerelo

[22:52] <melezhik> .tell tony-o some of aws plugins might now work as they were created for old version of Sparrow written in Perl, but these ones (lambda related) should work - http://rakudist.raku.org/hub/search?q=function

[22:52] <tellable6> melezhik, I'll pass your message to tony-o

[22:56] *** melezhik left
[23:05] *** melezhik joined
[23:05] <melezhik> .tell tony-o - might NOT work

[23:05] <tellable6> melezhik, I'll pass your message to tony-o

[23:29] *** finanalyst left
[23:34] *** MilkmanDan left
[23:36] *** MilkmanDan joined
[23:37] *** leont left
[23:44] *** melezhik left
