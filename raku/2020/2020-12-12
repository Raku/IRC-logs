[00:17] <sacomo> RaycatWhoDat: I'm using golang with NativeCall. Seems to work fine. Not sure what the most common language is though. 

[00:25] *** sacomo left
[00:27] *** sacomo joined
[01:05] *** pecastro left
[02:11] *** sourceable6 left
[02:11] *** bisectable6 left
[02:11] *** benchable6 left
[02:11] *** coverable6 left
[02:11] *** tellable6 left
[02:11] *** evalable6 left
[02:11] *** nativecallable6 left
[02:11] *** quotable6 left
[02:11] *** committable6 left
[02:11] *** notable6 left
[02:11] *** linkable6 left
[02:11] *** bloatable6 left
[02:11] *** squashable6 left
[02:11] *** shareable6 left
[02:11] *** releasable6 left
[02:11] *** statisfiable6 left
[02:11] *** unicodable6 left
[02:11] *** greppable6 left
[02:12] *** bloatable6 joined
[02:12] *** notable6 joined
[02:12] *** quotable6 joined
[02:12] *** greppable6 joined
[02:12] *** unicodable6 joined
[02:12] *** nativecallable6 joined
[02:13] *** bisectable6 joined
[02:13] *** tellable6 joined
[02:13] *** evalable6 joined
[02:13] *** committable6 joined
[02:13] *** linkable6 joined
[02:13] *** coverable6 joined
[02:13] *** sourceable6 joined
[02:13] *** statisfiable6 joined
[02:14] *** releasable6 joined
[02:14] *** squashable6 joined
[02:14] *** benchable6 joined
[02:14] <moon-child> RaycatWhoDat: c

[02:14] *** shareable6 joined
[02:21] *** webstrand joined
[02:52] *** ape666` joined
[03:05] *** ape666` left
[03:19] *** ape666 left
[03:22] *** ape666 joined
[03:26] *** Celelibi left
[03:50] *** aborazmeh joined
[03:50] *** aborazmeh left
[03:50] *** aborazmeh joined
[03:52] *** ape666 left
[04:08] *** __jrjsmrtn__ left
[04:09] *** __jrjsmrtn__ joined
[04:23] *** Celelibi joined
[04:39] *** aborazmeh_ joined
[04:39] *** aborazmeh_ left
[04:39] *** aborazmeh_ joined
[04:39] *** aborazmeh left
[04:39] *** aborazmeh_ is now known as aborazmeh

[04:41] *** leont left
[05:34] *** rindolf joined
[05:50] *** brtastic joined
[06:06] *** aborazmeh left
[06:06] *** aborazmeh joined
[06:06] *** aborazmeh left
[06:06] *** aborazmeh joined
[06:15] <notandinus> what is the |n| operator called? if n is positive it returns n, if not then it makes it positive, i thought it was called the modulus operator

[06:19] *** brtastic left
[06:21] <RaycatWhoDat> Absolute value

[06:34] *** sena_kun joined
[06:37] <notandinus> ah yes

[06:39] <notandinus> and abs routine handles it

[06:40] <notandinus> m: my @t = -1, -2; say abs(@t);

[06:40] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «2␤»

[06:42] <notandinus> my @t = -1, -2; say @t.map(*.abs);

[06:42] <evalable6> notandinus, rakudo-moar 79b55ac3c: OUTPUT: «(1 2)␤»

[06:42] <notandinus> loop {}

[06:42] <notandinus> m: loop{}

[06:42] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required after keyword 'loop'␤at <tmp>:1␤------> 3loop7⏏5{}␤»

[06:42] <notandinus> m: loop {}

[06:42] <notandinus> hmm is there a timeout?

[06:43] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «(timeout)»

[06:43] <notandinus> nice

[06:44] *** brtastic joined
[06:48] <notandinus> can i make an int bound to a range? like say i make $t bound to 1 - 2 then $t++ after 2 will loop it back to 1

[06:48] <notandinus> if $t == -1  then $t-- will loop it back to 2

[06:55] <guifa2> notandinus no, although you could write your own class that lets you

[06:57] <notandinus> i see, thanks

[06:59] <guifa2> Not sure the exact context you have for it, but I think most people tend to only make adhoc ranges which makes such a thing fairly moot.  Personally, I rarely if ever store them in a variable (only time I do, I think, is when I'm subs to accept them as arguments)

[07:08] <notandinus> tokens will be faster than regex right?

[07:11] <notandinus> if i write both token and regex in a way that regex too doesn't backtrack then  will token still be fast?

[07:13] *** jmerelo joined
[07:36] *** parabolize left
[07:38] <guifa2> a token is literally just a regex with the :ratchet option applied

[07:39] <guifa2> token { foo } == regex { :r foo }

[07:43] *** aborazmeh left
[07:43] <guifa2> Egads, my CLDR compiler finally finished.... 5 hours later.

[07:43] <jmerelo> Did you check out today's advent calendar article? https://raku-advent.blog/2020/12/12/day-12-that-raku-feeling/

[07:44] <jmerelo> guifa2: did it work?

[07:45] *** aborazmeh joined
[07:45] *** aborazmeh left
[07:45] *** aborazmeh joined
[07:45] <guifa2> jmerelo: yes!  It's not *quite* ready for release, and unfortunately I'll be out of town for a week or so so it maybe will be ready around new years

[07:45] <jmerelo> guifa2++

[07:45] <guifa2> But all of the precalculations are well worth it

[07:46] <guifa2> When using it as a module, it's a literal order of magnitude or two faster to access stuff

[07:46] <guifa2> and load

[07:46] <guifa2> And the data files are smaller too!

[07:56] *** aborazmeh left
[07:58] <notandinus> jmerelo: it has a typo in second code block

[07:59] <notandinus> await $one-second should be $one-second-passed

[07:59] <raku-bridge> <frost> Hi, I think there is a mistake in today's advent calendar article. In the second example code, it should be await $one-second-passed

[07:59] <jmerelo> notandinus: let me check that

[08:01] <guifa2> Yup, definitely a typo

[08:01] <raku-bridge> <frost> Haha, someone has noted it.

[08:05] *** eseyman left
[08:07] <jmerelo> notandinus: should be good now. Thanks for the heads up!

[08:09] *** eseyman joined
[08:11] <notandinus> yw, 

[08:11] <notandinus> hmm rss feeds also get updated with the changes

[08:11] <moon-child> notandinus: btw, you can just

[08:11] <jmerelo> notandinus: they should feed from the same SSOT :-)

[08:12] <moon-child> m: print [-1, -2].map(&abs)

[08:12] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «1 2»

[08:12] <moon-child> fewer lexemes to think about

[08:14] <notandinus> moon-child: i see, thanks

[08:14] *** cpan-raku left
[08:16] *** cpan-raku joined
[08:16] *** cpan-raku left
[08:16] *** cpan-raku joined
[08:28] *** RaycatWhoDat left
[08:51] <sacomo> hi all, anyone have a way of listing all of the modules / dependencies / dependency's dependencies, etc that a script uses?

[08:51] *** brtastic left
[08:53] *** stoned75 joined
[08:57] <tadzik> RAKUDO_MODULE_DEBUG=1, if that's still a thing :)

[09:07] *** Altai-man joined
[09:09] *** sena_kun left
[09:20] <notandinus> what does raku mean by this: https://paste.debian.net/hidden/52f9b8a2/ ?

[09:20] <notandinus> code included in it ^

[09:20] <notandinus> if i move @directions inside of the sub routine then the error goes away

[09:20] <notandinus> all of this is in sub MAIN,

[09:20] <notandinus> if i move both outside of sub MAIN then the error goes away

[09:24] *** stoned75 left
[09:41] <guifa2> jmerelo:  okay crazy, 

[09:41] <guifa2> I'm actually BEATING the built in .Str for DateTime

[09:42] <guifa2> https://imgur.com/a/wqR1pvf

[09:42] * guifa2 pats himself on back

[09:50] *** aborazmeh joined
[09:50] *** aborazmeh left
[09:50] *** aborazmeh joined
[09:52] *** sjm_uk joined
[09:59] <jmerelo> guifa2++

[10:07] *** jmerelo left
[10:11] *** RaycatWhoDat joined
[10:12] *** sjm is now known as sjm_mobile

[10:13] *** sjm_mobile left
[10:18] *** sjm_mobile joined
[10:22] *** guifa2 left
[10:23] *** patrickb joined
[10:32] *** Sgeo left
[10:32] *** wamba joined
[10:35] *** aindilis` joined
[10:36] <notandinus> ok i understood that, it was because @directions needs to be defined before the subroutine is called

[10:39] *** aindilis left
[10:44] *** asymptotically joined
[10:47] *** domidumont joined
[10:57] *** Black_Ribbon left
[10:58] *** aborazmeh left
[11:02] *** sjm_uk left
[11:12] <xinming_> m: my $t = 0; for 3 .. 5 { my $a = 10 + $_; FIRST $t = $a; $a.say; }; "value: $t".say;

[11:12] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «13␤Use of uninitialized value element of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤14␤15␤value: ␤  in block <unit> at <tmp> line 1␤»

[11:13] <xinming_> In this example, the $a in FIRST will get Nil, What is the right way to achieve this please?

[11:14] <xinming_> I know I can doing something like,  if $t == 0 { $t = $a };   But I wish to understand wether we can have FIRST DWIM

[11:15] <moritz> $t ||= $a ?

[11:15] *** sjm_mobile left
[11:16] <xinming_> moritz: Nope, what actually I want is doing something with FIRST phaser.

[11:16] <xinming_> I just realized, maybe I can't do that.

[11:22] <moritz> FIRST runs before the code in the loop body

[11:23] <xinming_> Yea, I just realized that. :-)

[11:23] <xinming_> Need real world example to learn the lesson.

[11:24] *** v_m_v joined
[11:27] <notandinus> can i make  amulti sub based on return value?

[11:27] <moritz> notandinus: no

[11:27] <notandinus> i see

[11:27] <moritz> that would break causility

[11:28] <moritz> *causality

[11:29] <notandinus> what does that mean?

[11:29] <notandinus> oh if i specify the return value type in signature, should be possible then right?

[11:33] <moritz> consider a(b()). If &a and &b are both multis, things get complicated

[11:33] <moritz> in Perl, context flowed inwards; the caller told the callee which context (list, item, void) it expected

[11:34] <moritz> Raku takes the opposite approach: routines return objects, and those objects can know how to be usable in different contexts

[11:35] <moritz> also, consider this: multi sub a(returns Int) {}; multi sub a(returns Str) { }; multi b(Int, Str) {}; multi b(Str, Int) {}; b(a(), a())

[11:36] <moritz> just a simple example of an ambiguity if we allow dispatch based on return values

[11:36] <moritz> it's even worse if there are multis with many arguments, which are the return values from other multis

[11:37] <notandinus> ah i see, makes sense, thanks

[11:37] <moritz> then you have, in the worst case, and NP problem trying to solve which multi to call :-)

[11:39] *** MasterDuke joined
[11:40] <notandinus> hmm

[11:40] <notandinus> m: sub l ($t?) { say 'hi' } l();

[11:40] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub l ($t?) { say 'hi' }7⏏5 l();␤    expecting any of:␤        infix␤        infix stopper␤        statement …»

[11:41] <notandinus> sub l ($t?) { say 'hi' }; l();

[11:41] <evalable6> notandinus, rakudo-moar 79b55ac3c: OUTPUT: «hi␤»

[11:41] <notandinus> oh i was wondering why it was failing

[11:42] <notandinus> hmm this still fails with `raku -e`

[11:42] <notandinus> says missing block at 'sub l(HERE' 

[11:43] <notandinus> is -e and what evalable6 does different?

[11:48] <notandinus> .tell lizmat links to book "using raku" and "perl 6 at a glance" need to be updated in r/rakulang sidebar

[11:48] <tellable6> notandinus, I'll pass your message to lizmat

[11:54] <notandinus> can we specify multiple return signatures ? something like " --> Int|Bool"?

[11:56] <lizmat> notandinus thanks for the nudge, fixed

[11:57] <lizmat> re Junctions in return sigs, no, you can't, at least not atm

[11:57] <notandinus> lizmat: hmm raku.online doesn't seem to work, 

[11:57] <notandinus> https://andrewshitov.com/perl6-at-a-glance/

[11:58] <notandinus> https://andrewshitov.com/contents/

[11:58] <lizmat> that's the link I just put in?

[11:58] <notandinus> oh are you using the new reddit?

[11:58] <lizmat> argh  I need to change that at two place?

[11:58] <lizmat> which URL do you use ?

[11:59] <notandinus> i'm using the old one

[11:59] <notandinus> not sure if both are different

[11:59] <MasterDuke> m: subset IB where Int|Bool; sub a(--> IB) { return "ab" }; a

[11:59] <camelia> rakudo-moar 79b55ac3c: OUTPUT: «Type check failed for return value; expected IB but got Str ("ab")␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:59] <notandinus> on old one i see raku.online links which don't work

[12:00] *** Jack joined
[12:00] <MasterDuke> notandinus: you can, but have to use a pre-defined subset

[12:01] <notandinus> this works: https://andrewshitov.com/using-perl6/

[12:01] *** Jack left
[12:01] <notandinus> MasterDuke:  i see, makes sense 

[12:01] <notandinus> i'll checkout subset

[12:02] *** raiph joined
[12:03] *** JackChidley joined
[12:04] <JackChidley> I have noticed an error in the Linux installation instructions on https://rakudo.org/star/source any idea where to report this?

[12:06] <JackChidley> Never mind - I've just spotted the Issue Tracker at the top of the page

[12:06] <notandinus> https://rakudo.org/issue-trackers

[12:07] <notandinus> :)

[12:07] *** stoned75 joined
[12:09] *** v_m_v left
[12:10] *** sjm_mobile joined
[12:13] *** natrys joined
[12:15] *** JackChidley left
[12:15] *** wamba left
[12:16] <lizmat> notandinus fixed links in old reddit as well

[12:17] <notandinus> lizmat: thanks, so they are different sidebars?

[12:17] <lizmat> apparently, I needed to change it in 2 places

[12:17] <lizmat> which took a little figuring out

[12:17] *** v_m_v joined
[12:20] *** sjm_uk joined
[12:23] *** guifa2 joined
[12:23] *** guifa2 left
[12:23] *** aindilis` left
[12:26] *** natrys left
[12:28] *** v_m_v left
[12:32] <notandinus> what would be better, a state or global var ?

[12:33] <notandinus> i have a subroutine that will push to a variable but i want it to remember previous pushes so that it can return quickly without recomputing

[12:33] <notandinus> kinda like memoization

[12:33] <notandinus> so should i make that array a state or global var ?

[12:36] *** natrys joined
[12:47] *** Kaiepi left
[12:49] *** sjm_mobile left
[12:52] <notandinus> what causes this: https://paste.debian.net/hidden/8776c48f (code included)

[12:52] <notandinus> with every push the previous push value changes

[12:53] <notandinus> even though .say confirms that the values i'm pushing is different 

[12:54] <notandinus> line before represents what i'm pushing and line after the array after the push, every push is changing all previous values

[12:56] *** Kaiepi joined
[12:56] *** wamba joined
[12:58] *** raiph left
[13:01] <notandinus> it works as expected when i change the pushed data to hash but i want to keep it an array

[13:02] <notandinus> hmm works fine when i make it .Array, it was .List

[13:02] <notandinus> what causes list to behave like this?

[13:08] *** sena_kun joined
[13:10] <coldpress> my guess is: the wrong behavior is because all elements refer to the same object, pass-by-reference. The correct behavior with .Array is because each element now refers to different objects.

[13:10] *** Altai-man left
[13:11] <notandinus> ah i see, let me check that

[13:13] <notandinus> coldpress: yeah that is it, i checked by not pushing but changing the value

[13:13] *** sjm_mobile joined
[13:13] <notandinus> hmm so the fix is to push .Array?

[13:13] <coldpress> not sure how .Array is different from .List, maybe the perl monks here can explain

[13:16] <lizmat> perl monks ?

[13:16] <notandinus> here:

[13:16] <notandinus> https://docs.raku.org/language/list#Assigning

[13:16] <notandinus> Assignment of a list to an Array is eager. 

[13:16] <notandinus> raku monks

[13:17] <notandinus> can i make it non-eager?

[13:19] <coldpress> lizmat: https://perlmonks.org/

[13:20] <lizmat> coldpress: I know of Perl Monks, have been a monk for a long time until a very vocal part of the monastery made me decide to leave

[13:20] <notandinus> is it becuase of that thing i linked? ^ i'm not sure how that would affect pushes

[13:21] <lizmat> notandinus: am currently too busy to look into your question, hope someone else will pick up

[13:22] <notandinus> i see, it's fine

[13:50] *** b2gills left
[13:56] *** aborazmeh joined
[13:56] *** aborazmeh left
[13:56] *** aborazmeh joined
[14:09] *** leont joined
[14:18] *** MRH joined
[14:26] *** aindilis joined
[14:49] *** b2gills joined
[15:13] *** pecastro joined
[15:15] *** aborazmeh left
[15:18] *** parabolize joined
[15:40] *** raiph joined
[15:42] *** wamba left
[15:43] <raiph> notandinus: ping

[15:43] <tellable6> hey raiph, you have a message: https://gist.github.com/b7b231f18a67a9fed15fb025b37b40c1

[15:50] <Geth> ¦ doc: uzluisf++ created pull request #3731: Rework the Iterating page

[15:50] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3731

[15:50] <raiph> notandinus: An `Array` is a subtype of `List` but their behaviours are also complementary.

[15:51] *** wamba joined
[15:51] <raiph> notandinus: `Array`s zig in several ways where `List`s zag.

[15:52] <raiph> notandinus: This is true of their literals.

[15:52] *** aluaces left
[15:53] <raiph> notandinus: If you switch your code from pushing `($pos-y, $pos-x)` to `[$pos-y, $pos-x]` you'll find it works.

[15:53] *** sjm_uk left
[15:56] <raiph> notandinus: This is because the `Array` literal constructor just takes the *values* contained in the Scalar`s `$pos-x` and `$pos-y` and puts those values into its own fresh `Scalar`s.

[15:58] <raiph> notandinus: Whereas the `List` literal constructor does *not* by default put values in `Scalar`s -- but if you list one, it stores that instead of the value it contains.

[15:59] *** guifa2 joined
[16:00] <raiph> .tell notandinus https://colabti.org/irclogger/irclogger_log/raku?date=2020-12-12#l306

[16:00] <tellable6> raiph, I'll pass your message to notandinus

[16:00] *** guifa2 left
[16:02] *** aindilis left
[16:03] <raiph> notandinus: (I guess that should be "stores the listed `Scalar` *as well as* the value it contains, but the point is that that value can then change.)

[16:06] <coldpress> Is it weird if my 2D-Array algo is > 2x slower with CArrays, compared to Raku Arrays?

[16:07] <coldpress> The 2D Array has 100 rows and 100 columns

[16:13] *** schlaftier joined
[16:14] *** Celelibi left
[16:19] <raiph> coldpress: No. It all depends on the details. cf https://www.nntp.perl.org/group/perl.perl6.users/2020/06/msg8857.html

[16:20] *** domidumont left
[16:23] *** stoned75 left
[16:25] *** aluaces joined
[16:27] *** domidumont joined
[16:28] *** stoned75 joined
[16:36] <tbrowder> hi, anyone still using Padre for Perl projects?

[16:45] *** v_m_v joined
[16:45] <lizmat> tbrowder: feels like #raku is the wrong channel to ask ?

[16:46] *** aindilis joined
[16:46] <tbrowder> well, we have a lot of 

[16:47] <tbrowder> yepper

[16:53] *** Celelibi joined
[17:02] *** tbrowder left
[17:03] *** tbrowder joined
[17:03] *** tbrowder left
[17:05] *** guifa2 joined
[17:06] *** raiph left
[17:07] *** Altai-man joined
[17:10] *** sena_kun left
[17:19] <codesect`> is there a way to use `#` as on of the characters with the TR operator? 

[17:19] <codesect`> m: say (TR/a#/AB/ with 'ab#c')

[17:19] <camelia> rakudo-moar c63f078a2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Please backslash # for literal char or put whitespace in front for comment␤at <tmp>:1␤------> 3say (TR/a#7⏏5/AB/ with 'ab#c')␤»

[17:19] <codesect`> m: say (TR/a\#/AB/ with 'ab#c')

[17:19] <camelia> rakudo-moar c63f078a2: OUTPUT: «Ab#c␤»

[17:20] <codesect`> ^^^^ doesn't error, but it doesn't work

[17:21] <codesect`> (the .trans method works fine, so it's not a big deal; just currious)

[17:25] *** guifa2 left
[17:27] <lizmat> m: say (TR/ a '#' /AB/ with 'ab#c')

[17:27] <camelia> rakudo-moar c63f078a2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Please backslash # for literal char or put whitespace in front for comment␤at <tmp>:1␤------> 3say (TR/ a '#7⏏5' /AB/ with 'ab#c')␤»

[17:28] <[Coke]> I've tried a few iterations locally, don't see one that works with #

[17:34] *** asymptotically left
[17:44] <codesect`> interesting.  Thanks to you both

[17:56] *** morayj joined
[17:58] <morayj> Someone's uploaded a module for Raku to cpan called Game::Amazing (a couple of days ago) and it's not appeared on https://modules.raku.org  Does something else need to be done, or is there an interval?

[18:09] <Altai-man> morayj, I am not 100% sure, but I'd say its META json is invalid: https://github.com/arnesom/raku-game-amazing/blob/main/META6.json#L18

[18:11] * Altai-man sent a PR

[18:12] <morayj> Altai-man: Great...thanks!

[18:13] <Altai-man> morayj, you are welcome

[18:23] *** morayj left
[18:28] <Altai-man> rba, ping?

[18:32] *** v_m_v left
[18:34] *** sjm_mobile left
[18:35] *** domidumont left
[18:37] *** sjm_mobile joined
[18:42] *** wamba left
[18:43] *** wamba joined
[18:47] *** leont left
[18:49] *** sjm_mobile left
[18:49] *** sjm_mobile joined
[18:52] *** Altai-man left
[18:52] *** Sgeo joined
[18:54] *** sena_kun joined
[18:56] <patrickb> I currently fail to make a script access resource files. Shouldn't `raku -I. bin/some-script.raku` be able to do `%?RESOURCES<some-file>.slurp`? (There is a META6.json listing the file)

[18:56] <tellable6> 2020-12-10T23:21:41Z #raku <melezhik> patrickb: at some point I was trying to help tony-o as well, he is aware, with new eco system stuff . For example - http://sparrowhub.io/search?q=function

[18:56] <tellable6> 2020-12-11T16:23:57Z #raku <tony-o> patrickb sent you an email

[18:57] *** ingy left
[18:57] *** ingy joined
[18:58] *** asymptotically joined
[19:11] *** brtastic joined
[19:25] <Geth> ¦ doc/eval-2905: 3cca92e7b2 | (Stoned Elipot)++ | doc/Type/independent-routines.pod6

[19:25] <Geth> ¦ doc/eval-2905: Document EVAL $check and $filename parameters

[19:25] <Geth> ¦ doc/eval-2905: 

[19:25] <Geth> ¦ doc/eval-2905: - ref #2905

[19:25] <Geth> ¦ doc/eval-2905: - Add a small introduction to EVAL routine's description

[19:25] <Geth> ¦ doc/eval-2905: - Bring EVAL prototype (mostly) in sync with Rakudo's current

[19:25] <Geth> ¦ doc/eval-2905: implementation

[19:25] <Geth> ¦ doc/eval-2905: - Also mention EVALFILE's $check parameter

[19:25] <Geth> ¦ doc/eval-2905: - Use 'Perl' word

[19:25] <Geth> ¦ doc/eval-2905: - Use '.raku' filename suffix

[19:25] <Geth> ¦ doc/eval-2905: review: https://github.com/Raku/doc/commit/3cca92e7b2

[19:25] <Geth> ¦ doc: stoned++ created pull request #3733: Document EVAL $check and $filename parameters

[19:25] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3733

[19:36] *** wamba left
[19:42] *** cpage left
[19:44] *** cpage joined
[19:50] <codesect`> why is this allowed?

[19:50] <codesect`> m: my uint64 $a = -5; say $a

[19:50] <camelia> rakudo-moar c63f078a2: OUTPUT: «-5␤»

[19:53] <sena_kun> codesect`, as far as I heart, support of native types like this one is kind of ad-hoc and is known to be troublesome.

[19:53] <sena_kun> *heard

[20:04] *** aborazmeh joined
[20:04] *** aborazmeh left
[20:04] *** aborazmeh joined
[20:18] *** MRH left
[20:18] *** wamba joined
[20:19] <MasterDuke> the signed native types are better than the unsigned, and the unsized are better than the sized. (better in the sense of working more like they're supposed to)

[20:24] *** dataangel joined
[20:31] *** afresh1 left
[20:35] *** afresh1 joined
[20:41] *** sjm_mobile left
[20:52] *** brtastic left
[21:07] *** Altai-man joined
[21:10] *** sena_kun left
[21:14] *** stoned75 left
[21:25] *** stoned75 joined
[21:29] <Geth> ¦ doc/eval-2905: d6b231a6b4 | (Stoned Elipot)++ | doc/Type/independent-routines.pod6

[21:29] <Geth> ¦ doc/eval-2905: Unformat Perl word

[21:29] <Geth> ¦ doc/eval-2905: review: https://github.com/Raku/doc/commit/d6b231a6b4

[21:42] *** rindolf left
[21:46] *** asymptotically left
[21:47] *** asymptotically joined
[21:49] *** Geth left
[21:49] *** Geth joined
[22:03] *** Altai-man left
[22:07] *** patrickb left
[22:10] *** ajdplaysalto joined
[22:11] *** natrys left
[22:42] *** ajdplaysalto left
[22:56] *** stoned75 left
[23:14] *** aborazmeh left
[23:19] *** rir joined
[23:20] *** finsternis left
[23:52] *** moon-child is now known as heats-flamesman

[23:53] *** heats-flamesman is now known as moon-chilled

