[00:01] <Voldenet> m: use NativeCall; my uint8 $x := CArray[uint8].new()[0];

[00:01] <camelia> rakudo-moar 21b809745: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot bind to natively typed variable '$x'; use assignment instead␤at <tmp>:1␤------> 3l; my uint8 $x := CArray[uint8].new()[0]7⏏5;␤»

[00:01] <Voldenet> m: use NativeCall; my Int $x := CArray[uint8].new()[0];

[00:01] <camelia> rakudo-moar 21b809745: ( no output )

[00:04] *** dogbert17 joined
[00:07] *** dogbert11 left
[00:07] *** Xliff left
[00:21] *** dogbert11 joined
[00:23] <veesh> m: use NativeCall; my uint8 $x = CArray[uint8].new(255)[0]

[00:23] <camelia> rakudo-moar 21b809745: ( no output )

[00:23] <veesh> oops, forgot to print

[00:23] <veesh> m: use NativeCall; my uint8 $x = CArray[uint8].new(255)[0]; say $x

[00:23] <camelia> rakudo-moar 21b809745: OUTPUT: «255␤»

[00:23] *** dogbert17 left
[00:23] <veesh> that's better

[00:24] <veesh> m: use NativeCall; my uint8 $x = CArray[uint8].new(255)[0]; d $x

[00:24] <camelia> rakudo-moar 21b809745: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    d used at line 1␤␤»

[00:24] *** Redfoxmoon left
[00:27] *** Redfoxmoon joined
[00:28] <Voldenet> actually

[00:28] <Voldenet> m: use NativeCall; my $x := CArray[uint8].new()[0]; say $x = 244

[00:28] <camelia> rakudo-moar 21b809745: OUTPUT: «-12␤»

[00:46] *** sena_kun left
[00:56] *** Xliff joined
[01:00] *** titsuki_ left
[01:01] *** aborazmeh joined
[01:01] *** aborazmeh left
[01:01] *** aborazmeh joined
[01:01] *** sena_kun joined
[01:17] *** pierrot left
[01:20] *** pierrot joined
[01:24] <TreyHarris> veesh, fyi: "This is due to the fact that Natives don't know their types because they're just values, without any metadata. In multi-dispatch, you can have a native candidate, but you cannot differentiate different sizes of the same native type. That is, you can have an Int and int candidates, but there would be an ambiguity between, for instance int, atomicint or int64 candidates."

[01:24] <TreyHarris> from https://docs.raku.org/language/nativetypeshttps://docs.raku.org/language/nativetypeshttps://docs.raku.org/language/nativetypeshttps://docs.raku.org/language/nativetypeshttps://docs.raku.org/language/nativetypes

[01:24] <TreyHarris> oops

[01:24] <TreyHarris> https://docs.raku.org/language/nativetypes

[01:25] <TreyHarris> I mostly love working on an iPad Pro, but its Bluetooth keyboard handling is very, very sub-par

[01:27] <TreyHarris> veesh: so long as the native value is assigned to a single scalar, Raku _could_ work around it by using the namespace's scratchpad (or its implementational equivalent); but as you've shown, once you put it into an array (or a struct or union) Raku permanently loses track of it in a way that would afford full multi support

[01:29] *** __jrjsmrtn__ joined
[01:30] *** _jrjsmrtn left
[01:50] *** holli left
[01:55] *** aborazmeh left
[01:59] *** wildtrees left
[02:17] *** molaf left
[02:30] *** molaf joined
[02:42] *** angelds joined
[02:43] <Geth> ¦ doc: 5d568b3fd9 | (Trey Harris)++ | doc/Language/modules-core.pod6

[02:43] <linkable6> Link: https://docs.raku.org/language/modules-core

[02:43] <Geth> ¦ doc: Fix broken .pm6 → rakumod rakudo extlinks

[02:43] <Geth> ¦ doc: 

[02:43] <Geth> ¦ doc: External links to rakudo's GitHub repo using the old file extensions

[02:43] <Geth> ¦ doc: are broken. Fixed.

[02:43] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/5d568b3fd9

[02:45] *** sena_kun left
[02:52] *** Xliff left
[02:56] *** Xliff joined
[02:59] *** sena_kun joined
[03:12] *** molaf left
[03:17] *** xinming_ left
[03:18] *** xinming_ joined
[03:38] <Geth> ¦ doc: 2ad2a1ee03 | (Trey Harris)++ | doc/Language/nativetypes.pod6

[03:38] <linkable6> Link: https://docs.raku.org/language/nativetypes

[03:38] <Geth> ¦ doc: Document multi ambiguity between int and uint

[03:38] <Geth> ¦ doc: 

[03:38] <Geth> ¦ doc: As veesh++ points out, multis cannot distinguish between `int` and `uint`

[03:38] <Geth> ¦ doc: any more than they can distinguish between `int and `int64`.

[03:38] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2ad2a1ee03

[03:44] *** Actualeyes joined
[03:47] *** leont left
[04:02] *** atroxaper joined
[04:03] *** atroxaper left
[04:21] *** holyghost left
[04:22] *** holyghost joined
[04:45] *** sena_kun left
[04:58] *** mahmudov left
[04:59] *** sena_kun joined
[05:28] *** angelds left
[05:32] *** ensamvarg joined
[05:34] *** Redfoxmoon left
[05:34] *** Redfoxmoon joined
[06:16] *** holli joined
[06:20] *** sauvin joined
[06:20] *** xinming joined
[06:23] *** xinming_ left
[06:23] *** sno left
[06:24] *** jmerelo joined
[06:24] *** BlackWhite joined
[06:25] *** BlackWhite left
[06:26] *** cpan-raku left
[06:30] *** kent\n joined
[06:33] *** cpan-raku joined
[06:33] *** cpan-raku left
[06:33] *** cpan-raku joined
[06:46] *** sena_kun left
[06:48] <cpan-raku> New module released to CPAN! DateTime::Monotonic (0.0.6) by 03JMASLAK

[06:57] *** rindolf joined
[07:00] *** sena_kun joined
[07:05] <holyghost> I'm busy on probability marginal functions and more Bayesian learning

[07:06] <holyghost> The code is on Xliff's server, I'll put it on github next week

[07:06] <holyghost> e.g. a posterior approximation

[07:09] *** wamba joined
[07:21] *** rindolf left
[07:23] *** hacktor joined
[07:25] *** rindolf joined
[07:30] *** domidumont joined
[07:31] *** holli left
[07:40] *** raymze256 joined
[07:42] *** raymze256 left
[07:43] *** raymze256 joined
[07:44] *** raymze256 left
[07:46] *** hacktor left
[07:48] *** sno joined
[07:50] *** wamba left
[07:52] *** darkstardevx joined
[08:01] *** stoned75 left
[08:03] *** Actualeyes left
[08:03] *** Actualeyes joined
[08:08] *** AlexDaniel joined
[08:08] *** AlexDaniel left
[08:08] *** AlexDaniel joined
[08:11] *** xinming left
[08:17] *** xinming joined
[08:42] *** wamba joined
[08:46] *** sena_kun left
[08:46] *** xinming left
[08:46] *** xinming joined
[09:00] *** sena_kun joined
[09:00] *** hacktor joined
[09:10] *** hacktor left
[09:12] *** holli joined
[09:35] *** shred_alert joined
[09:41] *** domidumont left
[09:42] *** domidumont joined
[09:43] *** zakharyas joined
[09:56] *** hacktor joined
[10:03] <holyghost> I've just updated code on github for p6-Game-Bayes and p6-Game-Stats, what I've talked of before

[10:08] *** holli left
[10:22] *** scimon joined
[10:27] *** pecastro joined
[10:36] <holyghost> I've still ot to process pmf (probability marginal function) into chaos stochastitical systems :-)

[10:37] <holyghost> Anyway, it's easy enough

[10:41] *** wamba left
[10:45] *** sena_kun left
[10:56] *** Doc_Holliwood joined
[10:57] *** hacktor left
[10:58] *** daxim left
[11:00] *** domidumont left
[11:01] *** sena_kun joined
[11:02] *** daxim joined
[11:19] *** patrickb joined
[11:29] *** Black_Ribbon left
[11:29] *** mowcat joined
[11:33] *** Actualeyes left
[11:33] *** Actualeyes joined
[11:33] *** molaf joined
[11:36] <patrickb> 🎺🎺🎺 ANNOUNCEMENT 🎺🎺🎺

[11:36] <patrickb> The GSoC organization application deadline is in 4 days!

[11:36] <patrickb> Those of you who are pondering of whether to mentor should make up their mind soon.

[11:36] <patrickb> What you need to do when you want to mentor: Go to https://github.com/perl-foundation-outreach/gsoc-2020-ideas and create a PR with your project idea listing you as a mentor.

[11:36] <patrickb> It is fine to list multiple ideas and see which ones students apply for.

[11:37] <patrickb> lizmat, brrt, jnthn, nine, samcv, vrurg, jmerelo, AlexDaniel, sena-kun, (whoever fells addressed): Kind reminder to make up your mind of whether you want to mentor and on what project. :-)

[11:37] *** wamba joined
[11:37] <lizmat> I haz project ideas, but am hesitant about being a mentor

[11:37] <lizmat> patrickb ^^

[11:38] <patrickb> lizmat: I'm not sure who, but I seem to remember people willing to mentor but not having ideas...

[11:39] *** Doc_Holliwood left
[11:42] <patrickb> lizmat: Also, can we do something about your hesitation? I think it's very ok not to mentor, but it'd be sad to not make up ones mind in time.

[11:43] <lizmat> patrickb: consider you've done something  :-)

[11:44] *** Doc_Holliwood joined
[11:45] *** hacktor joined
[11:45] <sarna> hi, what’s the current extension for scripts? still .p6?

[11:48] *** Actualeyes left
[11:49] *** Actualeyes joined
[11:49] *** hacktor left
[11:49] <lizmat> .raku but only if you have a modern enough Rakudo (2019.11 or later)

[11:50] <sarna> oh neat! thanks

[11:52] *** colomon joined
[11:56] <jmerelo> patrickb: thanks for the reminder

[11:56] <jmerelo> patrickb: I pretty much have my mind made

[11:56] <patrickb> jmerelo: You also already have project ideas on the ideas page :-)

[11:56] <jmerelo> lizmat: you can propose a project anyway, maybe someone else will take it up as a mentor. I mean, mentors do not have to be tied to projects...

[11:57] <jmerelo> patrickb: but we _do_ need more.

[11:57] <jmerelo> patrickb: also, we need to start filling the application. Maybe this weekend in Fosdem Makoto and me can do it.

[11:57] *** colomon left
[11:58] *** colomon_ joined
[12:01] <patrickb> jmerelo: Great that you are on this!

[12:01] <patrickb> jmerelo: Do you intend to change the the project page to how last years page looked? It seems the page is currently mostly targeted to mentors.

[12:04] <sarna> how to get an array filled with x 0s? I can’t find anything in the docs, hmm

[12:05] <lizmat> m: my @a is default(0);  say @a[9999]

[12:05] <scimon> m: my @a = 0 xx 10;say @a;

[12:05] <camelia> rakudo-moar 411db10ec: OUTPUT: «0␤»

[12:05] <camelia> rakudo-moar 411db10ec: OUTPUT: «[0 0 0 0 0 0 0 0 0 0]␤»

[12:05] <scimon> :D

[12:05] <sarna> oh neat, thanks :)

[12:06] <jmerelo> patrickb: we're still in that phase... We might change it later on, when/if it's accepted

[12:06] <lizmat> sarna: using "is default(0)" is O1, rather than On

[12:06] <patrickb> jmerelo: OK, that's what I thought. :-)

[12:09] <sarna> lizmat: nice, thanks!

[12:09] <sarna> I’ve noticed some funky behavior though 

[12:10] <lizmat> sarna: with "is default()" ?

[12:10] <sarna> m: my @a is default([0;0;0]); say @a; @a[0][1] = 3; say @a; say @a[0]

[12:10] <camelia> rakudo-moar 411db10ec: OUTPUT: «[]␤[]␤[0 3 0]␤»

[12:10] <sarna> why is @a after the modification just an empty array?

[12:10] <scimon> Oooo I learnt something new today. 

[12:11] <sarna> (@a[0] is not, interestingly)

[12:12] <lizmat> what you're doing there, is that you're making a shaped array to be the default of an element of the @a array

[12:12] <lizmat> is default() is about the *elements* of an array, not about it's shape

[12:13] <sarna> oh, hm. I’m trying to make an array of five [0;0;0]s

[12:13] <lizmat> m: dd [0;0;0]

[12:13] <camelia> rakudo-moar 411db10ec: OUTPUT: «Array element = [0, 0, 0]␤»

[12:14] <lizmat> hmmm

[12:16] *** zakharyas left
[12:16] <sarna> m: my @a = [[0 xx 3] xx 5]; dd @a

[12:16] <camelia> rakudo-moar 411db10ec: OUTPUT: «Array @a = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]␤»

[12:16] <sarna> this one works, but hm

[12:17] <lizmat> sarna: thing is, that what you specify as the default, is a single instance of the value

[12:18] *** wamba left
[12:18] <sarna> oh

[12:18] <sarna> so when I modify it..

[12:18] <sarna> then rip :D

[12:22] <shred_alert> I just had a eureka moment. If we're generating an instance of some app from a template that template can also be used as a database for information about attributes of generated app.

[12:22] <shred_alert> Assuming the attributes stay in the same state throughout the lifetime of the generated app

[12:23] <shred_alert> Context: generating VMs from a template.

[12:24] *** leont joined
[12:24] *** aluaces left
[12:30] *** domidumont joined
[12:34] *** aluaces joined
[12:38] *** hacktor joined
[12:40] *** sno left
[12:44] *** Doc_Holliwood left
[12:45] *** Actualeyes left
[12:45] *** Actualeyes joined
[12:46] *** sena_kun left
[12:57] *** Doc_Holliwood joined
[12:59] *** abraxxa left
[13:01] *** sena_kun joined
[13:06] *** albongo joined
[13:06] *** albongo left
[13:06] *** albongo joined
[13:07] *** titsuki_ joined
[13:16] *** hacktor left
[13:18] *** Maylay left
[13:21] *** Maylay joined
[13:29] *** lucasb joined
[13:31] *** jmerelo left
[13:40] *** Doc_Holliwould joined
[13:41] *** Doc_Holliwood left
[13:46] *** hacktor joined
[13:48] *** uzl[m] joined
[13:48] <uzl[m]> .tell jmerelo re documentable, I'll look at it later. In the meantime, since Git[lab|hub] always serve relative links in relation to username.gitlab.io unless they specify otherwise, I just created the following group https://gitlab.com/rakudocs and a repo which ends serving the site from https://rakudocs.gitlab.io/. 

[13:48] <tellable6> uzl[m], I'll pass your message to jmerelo

[13:50] *** mowcat left
[13:51] <uzl[m]> Hi, everyone! I've been messing with the documentation's header layout and css. This is the result: https://rakudocs.gitlab.io/

[13:51] <tellable6> 2020-01-30T16:34:29Z #raku <jmerelo> uzl[m] I think there's this issue: https://github.com/Raku/Documentable/issues/78, very recent. Might that be the problem?

[13:52] *** titsuki_ left
[14:05] *** xinming left
[14:05] *** xinming joined
[14:06] *** gabiruh left
[14:06] *** gabiruh joined
[14:07] <sarna> uzl[m]: on mobile it’s a grey header with a very small camelia on the top left

[14:07] *** hacktor left
[14:14] <[Coke]> notes about layout/css - menu starts to vanish at smaller width.

[14:15] <[Coke]> I find it slightly pale for my taste, but that's just me.

[14:15] *** Doc_Holliwould left
[14:17] <sarna> m: my @foo = [1;2;3]; for @foo.kv <-> { say “won’t work” }

[14:17] <camelia> rakudo-moar 411db10ec: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[14:17] *** sno joined
[14:17] <sarna> can I somehow get the element as mutable and the key as immutable?

[14:17] <sarna> oh heck wait, my example was borked

[14:18] <sarna> <sarna> m: my @foo = [1;2;3]; for @foo.kv <-> $index, $val { say “won’t work” }

[14:18] * sarna sighs

[14:18] <sarna> m: my @foo = [1;2;3]; for @foo.kv <-> $index, $val { say “won’t work” }

[14:18] <camelia> rakudo-moar 411db10ec: OUTPUT: «Parameter '$index' expected a writable container, but got Int value␤  in block <unit> at <tmp> line 1␤␤»

[14:18] <sarna> here

[14:23] <sarna> getting the key as mutable would be okay too of course

[14:23] *** zakharyas joined
[14:24] <tobs> m: my @foo = [1,2,3]; for @foo.kv -> $index, $val is rw { say "$i: ", $val *= 10 }; dd @foo

[14:24] <camelia> rakudo-moar 411db10ec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$i' is not declared␤at <tmp>:1␤------> 3or @foo.kv -> $index, $val is rw { say "7⏏5$i: ", $val *= 10 }; dd @foo␤»

[14:24] <tobs> m: my @foo = [1,2,3]; for @foo.kv -> $index, $val is rw { say "$index: ", $val *= 10 }; dd @foo

[14:24] <camelia> rakudo-moar 411db10ec: OUTPUT: «0: 10␤Array @foo = [10, 20, 30]␤1: 20␤2: 30␤»

[14:25] <tobs> oh, dd goes to $*ERR, so the output is mixed up

[14:26] <sarna> oh cool, thanks tobs

[14:26] <tobs> sarna: not with <-> but with an is rw trait on the $value parameter to the loop body

[14:26] *** hacktor joined
[14:26] <sarna> yeah I think <-> puts rw on everything

[14:26] * tobs has never seen <-> before

[14:27] <sarna> m: my @foo = [1;2;3]; for @foo <-> $number { $number += 1 }; dd @foo

[14:27] <camelia> rakudo-moar 411db10ec: OUTPUT: «Array @foo = [2, 3, 4]␤»

[14:45] *** sena_kun left
[14:53] *** metabind joined
[14:56] <metabind> p6: Int.^name;

[14:56] <camelia> rakudo-moar 411db10ec: ( no output )

[14:56] <metabind> p6: say Int.^name;

[14:56] <camelia> rakudo-moar 411db10ec: OUTPUT: «Int␤»

[14:57] <metabind> p6: put Int.^name;

[14:57] <camelia> rakudo-moar 411db10ec: OUTPUT: «Int␤»

[14:57] *** hacktor left
[14:58] <metabind> p6: put Int.^mro

[14:58] <camelia> rakudo-moar 411db10ec: OUTPUT: «Use of uninitialized value of type Int in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤   ␤  in block <unit> at <tmp> line 1␤Use of uninitialized value of type Cool in string contex…»

[14:58] <metabind> p6: put Int.^methods

[14:58] <camelia> rakudo-moar 411db10ec: OUTPUT: «Method object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Method object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Method object coerced to string (…»

[14:58] <metabind> p6: Int.^methods

[14:58] <camelia> rakudo-moar 411db10ec: ( no output )

[14:59] <metabind> p6: Int.^methods.gist

[14:59] <camelia> rakudo-moar 411db10ec: ( no output )

[15:00] *** sena_kun joined
[15:00] <metabind> p6: 3.^name

[15:00] <camelia> rakudo-moar 411db10ec: ( no output )

[15:00] <metabind> p6: put 3.^name;

[15:00] <camelia> rakudo-moar 411db10ec: OUTPUT: «Int␤»

[15:00] <metabind> p6: 3.isNaN

[15:00] <camelia> rakudo-moar 411db10ec: ( no output )

[15:01] <metabind> p6: say 5.isNaN

[15:01] <camelia> rakudo-moar 411db10ec: OUTPUT: «False␤»

[15:05] <metabind> If I call Int.^methods, isNaN is listed as a method but it's not a method of any type listed in Int.^mro, and it's not listed as a method in the docs.

[15:05] <metabind> Why is that?

[15:06] *** melezhik joined
[15:06] <[Coke]> Int does Real

[15:07] <[Coke]> m: Int.^mro

[15:07] <camelia> rakudo-moar 411db10ec: ( no output )

[15:07] <[Coke]> m: dd Int.^mro

[15:07] <camelia> rakudo-moar 411db10ec: OUTPUT: «(Int, Cool, Any, Mu)␤»

[15:07] <[Coke]> mro is showing you classes, not Roles.

[15:07] <metabind> There is a section in the docs "routines supplied by role Real" that doesn't mention it

[15:09] <[Coke]> can you open a bug at Raku/doc for that?

[15:10] <[Coke]> m: dd Int.^roles

[15:10] <camelia> rakudo-moar 411db10ec: OUTPUT: «(Real, Numeric)␤»

[15:11] <[Coke]> m: dd Int.^roles[0].can('isNaN')

[15:11] <camelia> rakudo-moar 411db10ec: OUTPUT: «(method isNaN (Real: *%_) { #`(Method|77915504) ... },)␤»

[15:17] <vrurg> m: dd Int.^mro: :roles

[15:17] <camelia> rakudo-moar 411db10ec: OUTPUT: «Cannot find method 'raku' on 'Real': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[15:17] <vrurg> m: say .^name for Int.^mro: :roles

[15:17] <camelia> rakudo-moar 411db10ec: OUTPUT: «Int␤Real␤Numeric␤Cool␤Any␤Mu␤»

[15:17] <vrurg> [Coke]: ^^^

[15:22] <metabind> What's the difference between p6 and dd?

[15:25] <vrurg> metabind: p6?

[15:26] <metabind> evalbot usage

[15:26] *** Doc_Holliwood joined
[15:27] <vrurg> Ah! Ok. Dunno, I don't use evalbot. 

[15:27] <[Coke]> dd is the rakudo data dumper.

[15:27] <[Coke]> p6: say 'does this do more than moar?'

[15:27] <camelia> rakudo-moar 411db10ec: OUTPUT: «does this do more than moar?␤»

[15:27] <[Coke]> I think p6: defaults to moar, and m: specifically means moar.

[15:27] <[Coke]> vrurg++

[15:28] <[Coke]> vrurg: thought it might exist, but didn't see it when I search for ^mro in the docs. :)

[15:28] <nine> p

[15:29] <vrurg> [Coke]: because it's my recent addition with roles overhaul. 

[15:29] <metabind> I take it that a lot is still missing from the docs

[15:29] <[Coke]> I would say that a lot is NOT missing from the docs.

[15:30] <metabind> anything missing is a lot as far as I'm concerned

[15:30] <metabind> being new

[15:31] *** aluaces left
[15:32] <metabind> p6: dd Str.^mro

[15:32] <camelia> rakudo-moar 411db10ec: OUTPUT: «(Str, Cool, Any, Mu)␤»

[15:33] <metabind> p6: dd Str.^mro: :roles

[15:33] <camelia> rakudo-moar 411db10ec: OUTPUT: «Cannot find method 'raku' on 'Stringy': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[15:33] <metabind> m: dd Str.^mro: :roles

[15:33] <camelia> rakudo-moar 411db10ec: OUTPUT: «Cannot find method 'raku' on 'Stringy': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[15:34] *** molaf left
[15:38] <[Coke]> metabind: That probably needs a ticket.

[15:38] <[Coke]> metabind: in the meantime, if you find anything is missing, please open a ticket, thanks. 

[15:39] <metabind> I don't have a github account yet.  

[15:47] *** ufobat joined
[16:04] *** hacktor joined
[16:10] *** xinming left
[16:16] *** xinming joined
[16:16] *** Kaiepi left
[16:17] *** Kaiepi joined
[16:23] <moritz> no time like now to get one :-)

[16:33] *** mowcat joined
[16:34] <metabind> okay so, Coke taught me that isNaN *should be* included in the Int documentation but isn't so I need to file a bug, and that dd the rakudo dumper function that helps output things that put/say can/will not, and that .^mro: :roles is a recent addition to the language, great stuff thanks

[16:34] <metabind> \leave

[16:34] <metabind> i'm very new to all this 

[16:34] *** metabind left
[16:36] *** jmerelo joined
[16:43] *** leont left
[16:45] *** sena_kun left
[16:47] *** Doc_Holliwood left
[16:50] *** domidumont left
[16:51] *** domidumont joined
[16:55] <[Coke]> \o/

[16:58] *** scimon left
[16:59] *** zakharyas left
[17:00] *** sena_kun joined
[17:08] <jmerelo> Hey, [Coke] 

[17:08] <tellable6> hey jmerelo, you have a message: https://gist.github.com/ac4b35c9dd11630d215446e0077cf88f

[17:08] <jmerelo> .tell uzl[m] great, thanks!

[17:08] <tellable6> jmerelo, I'll pass your message to uzl[m]

[17:12] *** xinming left
[17:12] *** xinming joined
[17:14] *** leont joined
[17:15] <sarna> m: [0.0e xx 3]

[17:15] <camelia> rakudo-moar 411db10ec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3[0.0e7⏏5 xx 3]␤»

[17:15] <sarna> I like that error message :^)

[17:18] <jmerelo> m: say 3e

[17:18] <camelia> rakudo-moar 411db10ec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 37⏏5e␤»

[17:18] <jmerelo> sarna: well, e is a constant

[17:18] <jmerelo> m: say 3+e

[17:18] <camelia> rakudo-moar 411db10ec: OUTPUT: «5.718281828459045␤»

[17:18] <jmerelo> sarna: but also exponential

[17:19] <jmerelo> m: say 3e2 + e

[17:19] <camelia> rakudo-moar 411db10ec: OUTPUT: «302.71828182845906␤»

[17:19] <jmerelo> m: say 1e

[17:19] <camelia> rakudo-moar 411db10ec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 17⏏5e␤»

[17:19] <jmerelo> sarna: confused is about right. Probably it should be a bit more explicit.

[17:23] <sarna> jmerelo: yeah, it wasn’t sarcastic - while it could be more informative, I actually kind of like it 

[17:23] <sarna> at least shows you where it is, and it’s right about it :)

[17:24] <sarna> a nice refresher after programming in go for a while

[17:25] <jmerelo> sarna :-)

[17:33] *** Cabanossi joined
[17:58] *** leont left
[17:59] *** wildtrees joined
[18:00] *** wildtrees left
[18:01] *** wildtrees joined
[18:02] *** Sgeo__ left
[18:02] *** Sgeo__ joined
[18:03] *** mahmudov joined
[18:08] *** aluaces joined
[18:14] *** MasterDuke joined
[18:31] <jmerelo> Apparently there's no gRPC module for Raku...

[18:33] <jmerelo> ... or protobuf

[18:35] *** leont joined
[18:38] * guifa assigns gPRC to jmerelo

[18:38] * jmerelo creates a GSoC project for doing that

[18:38] * guifa doesn’t sign up for it O:-)

[18:39] <jmerelo> guifa: we need you as a mentor anyway

[18:39] <jmerelo> guifa: we need lots of them

[18:39] <guifa> jmerelo: fair, but this is my last year I can do it as a student 

[18:42] <jmerelo> guifa: well, it would be great to have you as a student, but you could propose also a project you'd feel comfortable with

[18:42] *** mahmudov left
[18:42] <jmerelo> guifa: we can look for mentors later

[18:44] <guifa> Oh, module naming question

[18:45] <guifa> For format parsing

[18:45] *** mahmudov joined
[18:45] <guifa> should we go with Grammar::Name-of-format or Grammar::Foo::Name-of-format and leave the upper level for Grammar::Extension-modifying-grammars-themselves ?

[18:46] <guifa> or is there a different place we should do that?

[18:46] <jmerelo> guifa: he

[18:46] <guifa> (like Parsers::Name-of-format or something like that)

[18:46] <jmerelo> guifa: Grammar::Extension::Self-Modifying

[18:46] *** sena_kun left
[18:47] <guifa> Ah that actually sounds like a good one for extensions.  Should there also be an intermediate one for grammars or keep them top level?  (I’m about to post grammars for Hunspell/Aspell/Nuspell/MySpell dictionaries)

[18:49] *** domidumont left
[18:49] <jmerelo> guifa: it's pretty much free. There're no guidelines, even. Choose what's helpful to find it. For instance, Grammar::Dictionary::Hunspell

[18:50] *** domidumont joined
[18:51] <guifa> Yeah, I know there’s no official guidelines, but I feel like since we’re all so early in the ecosystem development, it would be a good idea to have a sort of best practices for naming.  Because it would be annoying to have one grammar in Grammar::Dictionary::Hunspell, another one in Lingua::Spelling::MySpell another one in Nuspell (top level) and another one in Text::Spellchecking::Aspell

[18:51] <jmerelo> guifa: but I see Lingua::Spelling as more of a module to use that specific tool, not as a dictionary

[18:52] <jmerelo> guifa: also, that can't be helped.

[18:54] *** domidumont left
[18:56] <guifa> jmerelo: I would agree that I’d expect some of those to be a tool, but for developers of them, there’d be no harm in specifying their grammars that could be general use in a more generalized location and pulling from it instead.  I also just don’t have time to develop a full [Hun|A|My|Nu]spell engine right now but have the grammar for another project

[18:57] *** leont left
[19:02] *** sena_kun joined
[19:22] *** mowcat left
[19:28] *** vrurg left
[19:43] *** Kaiepi left
[19:44] *** Kaiepi joined
[19:48] <TreyHarris> From https://docs.raku.org/language/numerics#Allomorphs : "Keep in mind that allomorphs are simply subclasses of the two (or three) types they represent." '(or three)'? What's a three-type allomorph?

[19:48] *** xinming left
[19:48] *** Doc_Holliwood joined
[19:49] *** xinming joined
[19:49] *** patrickb left
[19:53] *** dansolo42 joined
[19:53] <jmerelo> TreyHarris: that's a tough one. 

[19:54] *** vrurg joined
[19:54] <jmerelo> TreyHarris: but I guess that the allomorph XY represents XY, X and Y, right?

[19:55] <jmerelo> TreyHarris: well, Y is always Str

[19:55] *** ensamvarg left
[19:58] <TreyHarris> jmerelo: oh, no, I think it's just a historical artifact of MidRatStr

[19:58] <TreyHarris> I think "(or three)" can safely be removed

[19:59] <jmerelo> TreyHarris: will you do the honor? You want me to do it?

[19:59] <TreyHarris> jmerelo: already on it

[19:59] <jmerelo> TreyHarris: thanks.

[20:00] *** jmerelo left
[20:08] <Geth> ¦ doc: 42ab3dfefc | (Trey Harris)++ | doc/Language/numerics.pod6

[20:08] <linkable6> Link: https://docs.raku.org/language/numerics

[20:08] <Geth> ¦ doc: Remove detritus from MidRatStr reference

[20:08] <Geth> ¦ doc: 

[20:08] <Geth> ¦ doc: When allomorphs were first documented in dcd83b, `MidRatStr` still

[20:08] <Geth> ¦ doc: existed as a three-superclass allomorph. That's no longer the case, so

[20:08] <Geth> ¦ doc: remove language referring to hypothetical three-class allomorphs.

[20:08] <Geth> ¦ doc: 

[20:08] <Geth> ¦ doc: But leave open the possibility so this passage isn't brittle against

[20:08] <Geth> ¦ doc: future allomorphs.

[20:08] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/42ab3dfefc

[20:08] <Geth> ¦ doc: 26b1a19ca4 | (Trey Harris)++ | doc/Language/numerics.pod6

[20:08] <Geth> ¦ doc: Wrap numerics "Coercion of allomorphs"

[20:09] <Geth> ¦ doc: 

[20:09] <Geth> ¦ doc: Separate commit to keep semantics & formatting changes separate.

[20:09] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/26b1a19ca4

[20:09] <cpan-raku> New module released to CPAN! Date::Calendar::Hebrew (0.0.3) by 03JFORGET

[20:18] *** lucasb left
[20:26] <TreyHarris> m: say so "１２" ~~ 12

[20:26] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «True␤»

[20:27] <TreyHarris> how can you do ↑ with Numeric or Int rather than specifying the value 12?

[20:29] <TreyHarris> IOW, how can I check a Str (or other concrete value) to see if it can successfully coerce into some specified type?

[20:29] *** chloekek joined
[20:31] <guifa> hmm, there’s a few different ways depending on your ultimately goal

[20:31] <guifa> Does it have a coercion method?  

[20:32] <TreyHarris> m: my $x = "１２"; say $x.^name; say "{$x + 2}"

[20:32] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «Str␤14␤»

[20:32] <guifa> my $a = "A"; say $a.^find_method("Int”) // False; say $a.^find_method(“CantCoerceToThis”) // False

[20:32] <guifa> err

[20:33] <guifa> m: my $a = "A"; say $a.^find_method("Int”) // False; say $a.^find_method(“CantCoerceToThis”) // False

[20:33] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3find_method(“CantCoerceToThis”) // False7⏏5<EOL>␤    expect…»

[20:33] <guifa> *sigh* stupid computer autocoverting quotes

[20:33] <guifa> m: my $a = "A"; say $a.^find_method("Foo") // False; say $a.^find_method("CantCoerceToThis") // False;

[20:33] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «False␤False␤»

[20:33] <guifa> m: my $a = "A"; say $a.^find_method("Int") // False; say $a.^find_method("CantCoerceToThis") // False;

[20:33] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «Int␤False␤»

[20:33] *** heth left
[20:33] *** vike left
[20:34] <guifa> TreyHarris: see the last one I posted there, if the $foo.^find_method(nameOfClass) returns a defined object, you can theoretically coerce

[20:34] <TreyHarris> m: say "12".^find_method("Numeric")

[20:34] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «Numeric␤»

[20:34] *** heth joined
[20:34] <guifa> But just because a coercion method exists doesn’t mean you actually will be able to coerce.  The only way to test for that is to actually run the coercion

[20:35] <TreyHarris> m: say "boo this is not a number".^find_method("Numeric")

[20:35] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «Numeric␤»

[20:35] *** vike joined
[20:35] <TreyHarris> guifa: yes, but:

[20:35] <TreyHarris> m: say so "１２" ~~ 12; say so say so "１２" ~~ Any(Numeric)

[20:36] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «True␤False␤True␤»

[20:36] <TreyHarris> er

[20:36] <TreyHarris> m: say so "１２" ~~ 12; say so "１２" ~~ Any(Numeric)

[20:36] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «True␤False␤»

[20:36] <TreyHarris> if I don't know the value I'll end up with, how do I do it?

[20:36] <TreyHarris> catch an exception?

[20:37] <guifa> Probably the easiest way to do it.  If you wanted to, you could possibly write a sub for it.  Lemme see what I can come up with real fast

[20:39] <MasterDuke> val perhaps would be useful

[20:39] <MasterDuke> val()

[20:45] *** sena_kun left
[20:50] *** wildtrees left
[20:51] <TreyHarris> odd:

[20:51] <TreyHarris> m: sub get-num($x) { CATCH { when X::Str::Numeric { .^name.say; .message.say } }; return $x.Numeric }; for ("12", "\c[FULLWIDTH DIGIT ONE,FULLWIDTH DIGIT TWO]") -> $n { say get-num($n) }

[20:51] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «12␤12␤»

[20:51] <TreyHarris> but

[20:52] <TreyHarris> m: sub get-num($x) { CATCH { when X::Str::Numeric { .^name.say; .message.say } }; return $x.Numeric }; for ("12", "\c[FULLWIDTH DIGIT ONE,FULLWIDTH DIGIT TWO]", "\c[ROMAN NUMERAL TWELVE]") -> $n { say get-num($n) }

[20:52] <camelia> rakudo-moar 6c5615ecf: OUTPUT: «12␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5Ⅻ' (indicated by ⏏)␤  in sub get-num at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤12␤»

[20:52] <TreyHarris> Why doesn't the second one work there

[21:00] *** Benett left
[21:00] *** Benett joined
[21:01] *** sena_kun joined
[21:15] *** aborazmeh joined
[21:15] *** aborazmeh left
[21:15] *** aborazmeh joined
[21:33] *** mensvaga left
[21:40] <tyil> samcv: https://home.tyil.nl/git/raku/Pod::To::Anything/about/ this is the base module I use for Pod6 stuff

[21:46] <tyil> samcv: this is the thing used for rendering Pod6 readmes on my cgit instance https://home.tyil.nl/git/raku/Pod::To::HTML::Section/about/

[21:48] *** rindolf left
[21:58] *** aborazmeh left
[21:58] *** Ven`` joined
[21:59] <Ven``> jnthn: as it turns out, adding default params to cro template is *really* easy, but that would be absolute hell in the JS backend :P.

[22:02] *** Ven`` is now known as Ven_de_Thiel

[22:05] *** cpan-raku left
[22:08] <jnthn> Ven_de_Thiel: Even if restricted only to nameds?

[22:10] *** cpan-raku joined
[22:10] *** cpan-raku left
[22:10] *** cpan-raku joined
[22:11] <Ven_de_Thiel> jnthn: I mean, grammar-wise

[22:12] <jnthn> Yes, but I thought the nameds in the JS compilation were done by forming a "hash"?

[22:12] <Ven_de_Thiel> yes, but JS doesn§t have default parameters

[22:13] <Ven_de_Thiel> so when we `make $/` after parsing `<.identifier> [ '=' <.expression> ]?`

[22:13] <Ven_de_Thiel> JS doesn't like it

[22:14] <Ven_de_Thiel> I guess recent javascript version (ES6+) actually has defaults, so maybe it's fine...

[22:16] *** Black_Ribbon joined
[22:21] *** chloekek left
[22:21] <rypervenche> How might I use Raku to open an image (say a jpg) for viewing? Would that require a  module?

[22:22] <Grinnz> the linux only solution would be to run xdg-open on the filename

[22:27] *** shred_alert left
[22:27] <rypervenche> Ah, is that how people would do it?

[22:45] *** sena_kun left
[22:54] *** sauvin_ joined
[22:57] *** sauvin left
[22:57] *** sauvin_ is now known as Sauvin

[22:57] <El_Che> write a small lib that checks the OS and open xdg-open/open/start accordingly?

[23:00] *** sena_kun joined
[23:03] *** aluaces left
[23:08] *** wildtrees joined
[23:12] <uzl[m]> .tell sarna Still trying to figure out how to make the grid layout work for smaller screen size. Pretty much a CSS noob ;-).

[23:12] <tellable6> uzl[m], I'll pass your message to sarna

[23:14] *** wamba joined
[23:15] <uzl[m]> .tell [Coke] re layout/css: Do you have any color scheme in mind? I myself find it too pale.

[23:15] <tellable6> uzl[m], I'll pass your message to [Coke]

[23:46] *** mowcat joined
