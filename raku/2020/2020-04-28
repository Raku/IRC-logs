[00:04] <Kaiepi> releasable6, status

[00:04] <releasable6> Kaiepi, Next release will happen when it's ready. 3 blockers. 166 out of 356 commits logged (‚ö† 3 warnings)

[00:04] <releasable6> Kaiepi, Details: https://gist.github.com/9ecaa05af8d30f49f1d60d7f6175d507

[00:05] <Kaiepi> there are a couple features in the design docs i find interesting

[00:05] <Kaiepi> one's WHENCE and the other's the COMPOSE phaser

[00:05] <Kaiepi> the COMPOSE phaser in particular would remove a lot of boilerplate from Trait::Traced

[00:06] <Kaiepi> since how it works with types is it mixes in a role to the type's HOW that adds behaviour to composition

[00:13] *** guifa2 joined
[00:25] *** Itaipu_ joined
[00:25] *** Itaipu left
[00:27] *** pilne joined
[00:28] *** orinthe left
[00:28] *** orinthe joined
[00:37] *** Kaiepi left
[00:37] *** Kaiepi joined
[00:46] *** cpage joined
[00:52] *** farcas1982regreg joined
[01:05] *** oneeggeach joined
[01:11] *** b2gills joined
[01:45] *** lizmat_ joined
[01:52] *** oneeggeach left
[01:55] *** squashable6 left
[01:57] *** squashable6 joined
[01:57] *** Doc_Holliwood joined
[02:03] *** farcas1982regreg left
[02:06] *** ManifestO left
[02:06] *** ManifestO joined
[02:09] *** hungrydonkey joined
[02:20] *** hungryd23 joined
[02:22] *** hungrydonkey left
[02:35] *** hungryd23 left
[02:39] *** hungrydonkey joined
[03:02] *** nekomune joined
[03:12] *** guifa joined
[03:18] *** pilne left
[03:20] *** _jrjsmrtn joined
[03:21] *** __jrjsmrtn__ left
[03:39] *** CepriN joined
[03:41] *** SergiusUA left
[04:41] *** nativecallable6 left
[04:41] *** sourceable6 left
[04:41] *** notable6 left
[04:41] *** reportable6 left
[04:41] *** benchable6 left
[04:41] *** squashable6 left
[04:41] *** coverable6 left
[04:41] *** committable6 left
[04:41] *** bisectable6 left
[04:41] *** statisfiable6 left
[04:41] *** releasable6 left
[04:41] *** bloatable6 left
[04:41] *** linkable6 left
[04:41] *** shareable6 left
[04:41] *** quotable6 left
[04:42] *** bloatable6 joined
[04:42] *** quotable6 joined
[04:42] *** bisectable6 joined
[04:42] *** notable6 joined
[04:42] *** squashable6 joined
[04:42] *** committable6 joined
[04:42] *** shareable6 joined
[04:43] *** statisfiable6 joined
[04:43] *** sourceable6 joined
[04:43] *** releasable6 joined
[04:44] *** linkable6 joined
[04:44] *** coverable6 joined
[04:44] *** nativecallable6 joined
[04:44] *** reportable6 joined
[04:44] *** benchable6 joined
[04:50] *** tellable6 joined
[04:51] *** tellable6 left
[04:52] *** tellable6 joined
[04:53] *** unicodable6 joined
[04:53] *** greppable6 joined
[04:53] *** evalable6 joined
[04:58] *** hungryd67 joined
[04:58] *** aborazmeh left
[04:59] *** hungrydonkey left
[05:00] *** kst` joined
[05:02] *** kst left
[05:05] *** hungryd67 left
[05:11] *** hungrydonkey joined
[05:13] *** daxim left
[05:13] *** daxim joined
[05:15] *** hungryd32 joined
[05:16] *** hungrydonkey left
[05:16] *** hungrydonkey joined
[05:20] *** hungryd32 left
[05:36] *** hungryd33 joined
[05:39] *** hungrydonkey left
[05:47] *** eater left
[05:55] *** sjm_uk joined
[06:13] *** Itaipu_ left
[06:19] *** Itaipu joined
[06:21] *** squashable6 left
[06:23] *** squashable6 joined
[07:00] *** rindolf joined
[07:02] *** rindolf left
[07:02] *** rindolf joined
[07:11] *** guifa2_ joined
[07:12] *** guifa2 left
[07:12] *** guifa2_ is now known as guifa2

[07:13] *** andrzejku joined
[07:37] *** pecastro joined
[07:39] *** dakkar joined
[07:39] *** dakkar left
[07:39] *** dakkar joined
[07:54] *** Sgeo_ left
[07:55] *** Sgeo_ joined
[08:03] *** Kaiepi left
[08:04] *** Kaiepi joined
[08:49] *** lizmat_ is now known as lizmat

[09:08] *** xinming left
[09:08] *** xinming joined
[09:14] *** lichtkind joined
[09:15] *** kensanata joined
[09:37] *** Altai-man_ joined
[09:46] * lizmat clickbaits https://rakudoweekly.blog/2020/04/27/2020-17-spring-cleanup/

[09:54] <El_Che> great service, lizmat, thx

[09:54] <moritz> indeed, lizmat++

[09:55] *** xinming left
[09:55] <El_Che> Everytime I read it I think how it doesn't take long to consume it, but it takes a lot of work to produce it

[09:58] *** Doc_Holliwould joined
[09:59] <AlexDaniel> lizmat++

[10:01] *** Doc_Holliwood left
[10:02] *** holli__ joined
[10:02] <lichtkind> lizmat++

[10:02] <lichtkind> is there a way to disable inheritance in raku?

[10:03] <lizmat> lichtkind: you mean, that it doesn't inherit from Any / Mu ?

[10:03] <lichtkind> like removing keyword is and does

[10:03] <lizmat> m: class A { }; dd A.^mro

[10:03] <camelia> rakudo-moar 561076437: OUTPUT: ¬´(A, Any, Mu)‚ê§¬ª

[10:04] <lizmat> if you remove "is" and "does", then it would still inherit from Any / Mu

[10:05] <lizmat> if you want to disable "is" / "does", you could create local versions of sub trait_mod:<is> and sub trait_mod:<does>

[10:05] <lichtkind> lizmat: to me is important that classes you write are not able to use is or does

[10:05] *** Doc_Holliwould left
[10:06] *** Doc_Holliwood joined
[10:06] <lichtkind> lizmat: yes thanks sounds like a solution, I just ponder if its possible to port KBOS to raku

[10:07] <jnthn> lichtkind: Write a MOP module that 1) subclasses Metamodel::ClassHOW and overrides `add_parent` and `add_role` to throw an exception, 2) use the EXPORTHOW mechanism to have it replace the metaclass for the `class` keyword.

[10:07] *** Doc_Holliwould joined
[10:07] <jnthn> The trouble with replacing is/does traits is that they do a lot more than just inheritance :)

[10:08] <lizmat> true

[10:08] *** holli__ left
[10:09] <lichtkind> allright so im stuck with same solution like in perl where you cant inherit kbos classes becasue they life in their own world

[10:09] <lizmat> why wouldn't that work in Raku ?

[10:09] <lichtkind> they have their own compilation phase where there resolved to data structures so they never appear as classes

[10:10] <lichtkind> that would work in raku

[10:10] <lichtkind> just that i cant bring down th thumb of god and forbid inherticance

[10:10] *** holli__ joined
[10:11] <lizmat> well, in Perl it's just about messing with a class's @ISA, no?

[10:11] *** Doc_Holliwood left
[10:14] *** Doc_Holliwood joined
[10:14] *** Doc_Holliwould left
[10:16] *** Doc_Holliwould joined
[10:16] *** holli__ left
[10:18] *** lichtkind_ joined
[10:18] *** holli__ joined
[10:19] <samebchase-> Hi, What Graph library recommendations do you have for Raku?

[10:19] *** Doc_Holliwood left
[10:20] <samebchase-> I was not able to find any Raku Modules, other than one module which computes the Strongly Connected Components of a graph 

[10:20] *** lichtkind left
[10:20] <samebchase-> Is there any general purpose graph library available?

[10:21] <lizmat> https://modules.raku.org/search/?q=Graph  didn't give you anything you could use ?

[10:22] *** Doc_Holliwould left
[10:22] *** Doc_Holliwood joined
[10:22] <samebchase-> didn't find anything üòû

[10:24] *** Doc_Holliwould joined
[10:24] *** holli__ left
[10:27] *** holli__ joined
[10:27] <lizmat> does Python have libraries you could use?  then maybe Inline::Python might be something for you ?

[10:27] *** Doc_Holliwood left
[10:28] *** Black_Ribbon left
[10:30] *** Doc_Holliwould left
[10:30] *** Doc_Holliwood joined
[10:31] *** dpk left
[10:32] *** Doc_Holliwould joined
[10:32] *** timotimo left
[10:32] *** holli__ left
[10:33] *** timotimo joined
[10:33] *** dpk joined
[10:33] *** literal joined
[10:35] *** Grrrr joined
[10:35] *** holli__ joined
[10:35] <samebchase-> lizmat: there are a lot of Perl libraries on CPAN that seem promising. Is Inline::Perl or Inline::Python expected to work better?

[10:36] *** Doc_Holliwood left
[10:36] <lizmat> Inline::Perl5 should do the trick for you then, I'd say

[10:36] <lizmat> it's the best developed interface to another language that Raku has

[10:36] <samebchase-> awesome.

[10:37] <samebchase-> Hopefully someone implements a pure-Raku Graph library someday üòè

[10:37] <lizmat> indeed  :-)

[10:38] *** Doc_Holliwould left
[10:39] *** Doc_Holliwood joined
[10:40] *** sena_kun joined
[10:40] *** Doc_Holliwould joined
[10:41] *** holli__ left
[10:41] *** Altai-man_ left
[10:43] *** holli__ joined
[10:44] *** Doc_Holliwood left
[10:46] *** Doc_Holliwould left
[10:47] *** Doc_Holliwood joined
[10:49] *** Doc_Holliwould joined
[10:49] *** holli__ left
[10:51] *** holli__ joined
[10:52] *** Doc_Holliwood left
[10:55] *** Doc_Holliwould left
[10:55] *** Doc_Holliwood joined
[10:57] *** Doc_Holliwould joined
[10:58] *** holli__ left
[11:00] *** Doc_Holliwood left
[11:03] *** Doc_Holliwould left
[11:05] <Geth> ¬¶ ecosystem/JJ-patch-8: 5d8dc4ace4 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[11:05] <Geth> ¬¶ ecosystem/JJ-patch-8: Add Services::PortMapping to the ecosystem

[11:05] <Geth> ¬¶ ecosystem/JJ-patch-8: review: https://github.com/Raku/ecosystem/commit/5d8dc4ace4

[11:09] <Geth> ¬¶ ecosystem: JJ++ created pull request #488: Add Services::PortMapping to the ecosystem

[11:09] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/488

[11:10] <Geth> ¬¶ ecosystem: 5d8dc4ace4 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[11:10] <Geth> ¬¶ ecosystem: Add Services::PortMapping to the ecosystem

[11:10] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/5d8dc4ace4

[11:10] <Geth> ¬¶ ecosystem: d150545cc8 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[11:10] <Geth> ¬¶ ecosystem: Merge pull request #488 from Raku/JJ-patch-8

[11:10] <Geth> ¬¶ ecosystem: 

[11:10] <Geth> ¬¶ ecosystem: Add Services::PortMapping to the ecosystem

[11:10] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/d150545cc8

[11:10] *** Geth left
[11:10] *** cpan-raku left
[11:13] *** sena_kun left
[11:15] *** sena_kun joined
[11:15] *** sena_kun left
[11:26] *** sena_kun joined
[11:27] <sena_kun> .seen kjk

[11:27] <tellable6> sena_kun, I saw kjk 2020-04-19T18:26:29Z in #raku: <kjk> of course, thanks!

[11:37] *** kensanata left
[11:50] *** hungrydonkey joined
[11:53] *** hungryd33 left
[12:05] <lichtkind_> looks grph module is a desirable

[12:05] <lichtkind_> is it on the list of wanted modules?

[12:05] *** lichtkind_ is now known as lichtkind

[12:21] *** kst`` joined
[12:21] <sena_kun> u: ‚î¨‚ïó

[12:21] <unicodable6> sena_kun, U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL [So] (‚î¨)

[12:21] <unicodable6> sena_kun, U+2557 BOX DRAWINGS DOUBLE DOWN AND LEFT [So] (‚ïó)

[12:22] *** kst` left
[12:25] *** kensanata joined
[12:33] *** hungryd82 joined
[12:35] *** hungrydonkey left
[12:39] *** Altai-man_ joined
[12:41] *** aborazmeh joined
[12:41] *** aborazmeh left
[12:41] *** aborazmeh joined
[12:42] *** sena_kun left
[13:21] *** Kaiepi left
[13:25] *** Kaiepi joined
[13:49] *** thundergnat joined
[13:51] <thundergnat> Depending on how complicated your plotting needs are, SVG::Plot may be sufficient. See examples: http://www.rosettacode.org/wiki/Plot_coordinate_pairs#Raku

[13:51] <thundergnat> and http://www.rosettacode.org/wiki/Yellowstone_sequence#Raku

[13:51] *** thundergnat left
[14:09] *** tejr left
[14:10] *** kensanata left
[14:16] *** tejr joined
[14:19] <[Coke]> is Blin named after –±–ª–∏–Ω?

[14:21] *** kensanata joined
[14:24] <timotimo> after tanty blinri?

[14:24] <timotimo> tasty*

[14:24] <timotimo> i believe so

[14:24] <vrurg> [Coke]: it is. 

[14:25] <vrurg> timotimo: one is 'blin', many are 'bliny' :)

[14:25] <timotimo> OK

[14:30] *** squashable6 left
[14:30] *** squashable6 joined
[14:32] *** squashable6 left
[14:32] *** squashable6 joined
[14:34] <[Coke]> huh

[14:38] *** eater joined
[14:40] *** sena_kun joined
[14:42] *** Altai-man_ left
[14:44] *** kjk joined
[14:58] *** kensanata left
[15:02] *** ckc joined
[15:06] *** kensanata joined
[15:08] *** molaf joined
[15:09] <ckc> Good Day, all.  I am successfully parsing to ASTs- how can I get postorder numbers for all nodes? (e.g., "1+2" as 3 nodes: 1 2 +, numbered: node0 node1 node2).  If QAST doesn't provide this, is there an obvious way to derive it from the QAST dd ?  I intend to use the postorder numbers as register numbers in compiling to assembly, and this is the

[15:09] <ckc> one missing step.

[15:09] <tellable6> 2020-04-18T23:49:28Z #raku <guifa2> ckc: what kind of module are you making with Lingua?

[15:14] <ckc> Not sure what "kind of module" means, but I've based my work on Shitov's excellent work.  I am successfully parsing arithmetical and boolean expressions (as well as declarations, assignments, if, while; scalars only, I removed hashes and arrays), and accurately evaluating them.  What I need is assembly output (Torczon's RISC ILOC).  If I can

[15:14] <ckc> convert each node into a register/variable {r0, r1, r2, ..} then I think I've got what I need.  I can derive preorder numbers from dd, but postorder is what I need.

[15:15] <samebchase-> Given a SetHash like so `my $s = <one two three>.SetHash;` I am struggling to understand why `$s<'one'>` returns False. 

[15:16] <samebchase-> If I have `my $str = 'one'`, how do I use the $str variable to find if that string exists in the SetHash or not 

[15:17] <samebchase-> `$s<$str>` returns False. Or put another way, what can I do to `$str` so that I can use it to index the SetHash using the `<>` notation

[15:19] <samebchase-> Or am I running into the behaviour or `===`, where two strings 'one' and 'one' are not the same object

[15:19] <jnthn> The `<>` notation is for putting a literal string as the index

[15:20] <jnthn> $s{'one'} and $s{$str} are for when it's code as the index

[15:20] <samebchase-> okay

[15:20] *** mowcat joined
[15:21] <samebchase-> will use {}

[15:21] *** mowcat left
[15:21] *** aborazmeh left
[15:35] <samebchase-> Thanks a lot for the help jnthn

[15:42] *** andrzejku left
[15:58] <samebchase-> I have a grammar and during parsing, I want to discard the rest of the file, after the first part of the file has succeeded. What's the best way of achieving this.

[15:58] <samebchase-> Say I am only interested in parsing the list of imports at the top of the file, and not the rest of the code

[15:58] <samebchase-> What's the best way to do this?

[15:59] <samebchase-> I have verified using Grammar::Tracer that the part I am interested in matches correctly

[15:59] <samebchase-> Okay, there seems to be a method called Grammar.subparse

[16:07] *** xinming joined
[16:13] <jnthn> Yes, subparse is the way to go

[16:13] *** mowcat joined
[16:17] <guifa2> Is there a good way to match a <pblock> in an arbitrary regex/grammar?  

[16:19] <moritz> no

[16:20] <guifa2> :-(

[16:21] <guifa2> time to get hacky

[16:21] *** melezhik joined
[16:23] *** chloekek joined
[16:24] <melezhik> Quite an interesting discussion on Sparrowdo/Raku possible usage happening right now reddit/devops - https://www.reddit.com/r/devops/comments/g8bty6/simpler_tool_than_ansible_for_remote_script/fouv0gw?utm_source=share&utm_medium=web2x

[16:31] *** dakkar left
[16:36] *** xinming left
[16:38] *** xinming joined
[16:39] *** Altai-man_ joined
[16:41] *** sena_kun left
[16:51] *** melezhik left
[17:01] *** maggotbrain left
[17:24] <guifa2> Yup, definitely hacky but it works.  temporarily using {{¬†}}¬†but yay, dynamically quantiied variables now

[17:32] *** xinming left
[17:33] *** Doc_Holliwould joined
[17:34] *** xinming joined
[17:38] *** kenshiro joined
[17:40] *** andrzejku joined
[17:40] *** kensanata left
[17:41] *** sjm_uk left
[17:46] *** guifa2 left
[18:03] *** hungryd82 left
[18:25] *** sauvin left
[18:32] *** kjk left
[18:39] *** kensanata joined
[18:40] *** sena_kun joined
[18:41] *** Altai-man_ left
[18:51] *** gabiruh left
[18:53] *** Sgeo_ left
[18:53] *** andrzejku left
[19:08] *** holyghost joined
[19:21] *** Sgeo joined
[19:47] *** perlbot joined
[19:49] *** simcop2387 joined
[19:50] *** Sgeo left
[19:52] *** Sgeo joined
[19:54] *** chloekek left
[20:00] *** pilne joined
[20:04] *** molaf left
[20:09] *** Geth joined
[20:09] *** CepriN left
[20:12] *** rindolf left
[20:17] *** caterfxo left
[20:18] *** caterfxo joined
[20:29] *** aborazmeh joined
[20:29] *** aborazmeh left
[20:29] *** aborazmeh joined
[20:39] *** Altai-man_ joined
[20:42] *** sena_kun left
[20:43] *** aborazmeh left
[20:43] *** Kaiepi left
[20:44] *** Kaeipi joined
[20:44] *** gabiruh joined
[20:45] *** molaf joined
[20:59] *** caterfxo left
[21:00] *** caterfxo joined
[21:09] *** caterfxo left
[21:09] *** caterfxo joined
[21:12] *** Altai-man_ left
[21:30] *** kensanata left
[21:56] *** Sgeo_ joined
[21:58] *** Sgeo left
[22:07] *** ckc left
[22:48] *** lichtkind left
[22:49] *** mowcat left
[22:58] <tbrowder> hi, travis is not finding module JSON::Hjson

[23:00] <tbrowder> but modules.raku.org shows it and i‚Äôm using it locally. ideas?

[23:19] *** caterfxo left
[23:21] *** caterfxo joined
[23:22] *** Black_Ribbon joined
[23:32] *** pecastro left
[23:33] *** hungrydonkey joined
