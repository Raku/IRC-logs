[00:26] *** zacts left
[00:29] *** finsternis joined
[00:46] *** cpan-raku joined
[00:46] *** cpan-raku left
[00:46] *** cpan-raku joined
[01:06] *** AlexDani` joined
[01:08] *** AlexDaniel left
[01:11] *** _jrjsmrtn joined
[01:12] *** Roamer` joined
[01:14] *** __jrjsmrtn__ left
[01:16] *** molaf__ left
[01:22] *** maggotbrain777 joined
[01:25] *** maggotbrain left
[01:29] *** molaf__ joined
[01:40] *** a3f left
[01:49] *** sjaveed joined
[01:51] *** sjaveed left
[01:59] *** sjaveed joined
[02:00] <sjaveed> hello folks!

[02:00] <[Coke]> hello

[02:02] *** a3f joined
[02:04] <sjaveed> so I'm just getting started with Raku - former perl monger that went to ruby but am now interested in falling in love with raku

[02:05] <sjaveed> i'm running into an issue when attempting to use a regex that's stored in a string - i'm sure i'm doing something wrong

[02:06] <sjaveed> i've got a gist with a testable script here: https://gist.github.com/sjaveed/061c743b70376bb4b317ec46bcc5c000

[02:06] <sjaveed> wondering if experienced rakuist has thoughts on what i'm doing wrong

[02:07] <[Coke]> if you want to "eval" a regex, I think it's /<$string>/

[02:07] <[Coke]> m: my $regex-str = '"/greeting/" $<name> = (.+)'; my $path = "/greeting/bob"; say $path ~~ /<$regex-str>/

[02:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´ÔΩ¢/greeting/bobÔΩ£‚ê§¬ª

[02:07] <[Coke]> which I only remember because I basically asked the same question this weekend. :)

[02:07] <sjaveed> actually yeah my bad - that was an older version

[02:07] <sjaveed> i switched to that

[02:08] <sjaveed> but it's not picking up my capture groups with that syntax

[02:08] <sjaveed> compare that to

[02:08] <[Coke]> m: my $regex-str = '"/greeting/" $<name> = (.+)'; my $path = "/greeting/bob"; $path ~~ /<$regex-str>/ ; say $0

[02:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Nil‚ê§¬ª

[02:08] <[Coke]> m: my $regex-str = '"/greeting/" $<name> = <(.+)>'; my $path = "/greeting/bob"; $path ~~ /<$regex-str>/ ; say $/

[02:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´ÔΩ¢/greeting/bobÔΩ£‚ê§¬ª

[02:09] <sjaveed> m: my $path = "/greeting/bob"; say $path ~~ /"/greeting/" $<name> = (.+)/;

[02:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´ÔΩ¢/greeting/bobÔΩ£‚ê§ name => ÔΩ¢bobÔΩ£‚ê§¬ª

[02:09] <sjaveed> i'm certain it's something trivial and i'm not seeing it

[02:10] <sjaveed> also it's been 20 years since i've been on irc

[02:10] <sjaveed> i think i've missed the bots :-)

[02:12] <sjaveed> oh lol just saw your comment [Coke] - about having asked the same question recently

[02:12] *** zacts joined
[02:12] <sjaveed> do you have an example of where you've used string interpolation in your code?

[02:12] <sjaveed> wondering if seeing an example might help figure this out

[02:13] <[Coke]> question: do you really need to store the regex as a string?

[02:13] <[Coke]> you could do my $regex = /..../ and then use the regex object.

[02:13] <[Coke]> (assuming you just wanted to pull it out into a separate object, not necessarily as a string)

[02:14] <sjaveed> the's a good question - i *think* i need to store it as a string

[02:14] <sjaveed> let me explain what i'm trying to do and maybe a better alternative will appear

[02:14] <sjaveed> so this is essentially the toy functionality i figured i'd build - a simple routing engine for the web

[02:14] *** zacts left
[02:14] <sjaveed> something like that rails has

[02:15] <sjaveed> so you could provide it a route that looks like e.g. /greeting/:name and it will match against /greeting/bob and give me name as the param

[02:15] <sjaveed> my initial take on that was to take the route /greeting/:name and convert it into a regex

[02:15] <sjaveed> similar to the one in the gist

[02:15] <sjaveed> do that for all routes specified

[02:15] <sjaveed> and see which one matches any given path

[02:16] <sjaveed> i'm not sure i can do this with a static regex

[02:17] *** MilkmanDan left
[02:17] <[Coke]> ... have you seen Cro?

[02:17] <sjaveed> what's that?

[02:18] *** MilkmanDan joined
[02:18] <[Coke]> (someone already built something similar to the thing you're looking for) - but I know that building one is very attractive to the folks that like perl & raku

[02:18] <sjaveed> sorry really new to the ecosystem

[02:18] <sjaveed> oh hmmm

[02:18] <[Coke]> https://cro.services/

[02:18] <sjaveed> i'll take a look

[02:18] *** maggotbrain777 left
[02:18] <sjaveed> yeah this is also a bit of a personal challenge really

[02:18] <sjaveed> nothing like a project to learn a language i think

[02:19] <sjaveed> but maybe there are pointers to using regexes for this there

[02:19] <sjaveed> thanks for the pointer!

[02:19] *** maggotbrain joined
[02:19] <elcaro_> sjaveed: maybe look at the source of HTTP::Server::Router and see how it does it

[02:19] <elcaro_> https://github.com/tony-o/perl6-http-server-router

[02:20] <sjaveed> oooh

[02:20] <sjaveed> a pure router

[02:20] <[Coke]> elcaro_++

[02:20] <sjaveed> ok this might be more interesting

[02:20] <sjaveed> the Cro site's first example seemed to indicate they're solving the problem differently

[02:20] *** elcaro_ is now known as elcaro

[02:20] <sjaveed> get "greet", $name -> sub {}

[02:20] <[Coke]> anyway, I don't know why your attempt doesn't preserve the captures. :(

[02:20] <sjaveed> they're bypassing the problem it looks like

[02:22] <sjaveed> thanks elcaro_!  this is promising

[02:23] <sjaveed> they're also using regexes but differently

[02:23] <elcaro> No probs... you can search for modules at modules.raku.org

[02:23] <elcaro> even if you're trying to roll your own solution for learning, it's often helpful to look at how others tackled it

[02:23] <sjaveed> agreed

[02:24] <sjaveed> the thing i know i'll struggle with for a bit is finding the idiomatic way to raku

[02:24] <sjaveed> if nothing else, existing modules should help point me in the right direction for that

[02:27] *** maggotbrain left
[02:28] *** maggotbrain joined
[02:36] *** stoned75 left
[02:38] *** a3f left
[02:39] *** a3f joined
[02:42] *** maggotbrain left
[02:43] *** maggotbrain joined
[02:47] *** maggotbrain777 joined
[02:47] *** maggotbrain left
[02:48] *** stoned75 joined
[02:51] <sjaveed> fwiw elcaro and [Coke], this gist works using EVAL https://gist.github.com/sjaveed/061c743b70376bb4b317ec46bcc5c000

[02:52] <sjaveed> i'd rather not use EVAL of course

[02:52] <sjaveed> only the first and last examples in there work - the middle example continues to fail

[03:11] *** MasterDuke left
[03:13] *** maggotbrain777 left
[03:14] *** maggotbrain joined
[03:15] <sjaveed> hmmm so it looks like https://github.com/tony-o/perl6-http-server-router is bypassing a regex check as well

[03:16] <sjaveed> there's a regex check in there which caught my eye but it looks like that's used when the route is defined in terms of a regex

[03:21] <sjaveed> looks like https://github.com/moznion/p6-Router-Boost solves it using the EVAL approach

[03:22] *** maggotbrain left
[03:23] <[Coke]> maybe when moritz gets back in the morning (EU) he can figure it out.

[03:27] <sjaveed> nice - yeah this is just weird - i'm glad i have a workaround but a proper solution or a definitive "that's not possible" would be good!

[03:28] *** aborazmeh joined
[03:28] *** aborazmeh left
[03:28] *** aborazmeh joined
[03:28] <sjaveed> oh nice - moritz as in Moritz Lenz?

[03:30] <sjaveed> i might come back in EU daylight hours then - thanks!

[03:34] *** maggotbrain joined
[03:38] <elcaro>  

[03:39] <[Coke]> aye, that one.

[03:40] <elcaro> sjaveed: EVAL might be the only option. another example is jnthn's ECMA262Regex module, which converts a ECMA262 regex to a Raku regex using EVAL

[03:40] <elcaro> jnthn has stated that this is something that RakuAST should be able to solve when it lands

[03:45] <sjaveed> nice

[03:46] <sjaveed> ok this is all good info - looks like i have something to look forward to

[03:46] <sjaveed> i'll take a look at the ECMA262Regex module though - that might be the cleanest approach to this without using EVAL myself

[03:50] *** maggotbrain777 joined
[03:52] *** maggotbrain left
[03:55] *** [Coke]_ joined
[03:55] *** [Coke]_ left
[03:55] *** [Coke]_ joined
[03:57] *** Geth left
[03:57] *** Geth joined
[03:58] *** [Coke] left
[03:58] *** sjn left
[03:58] *** mendel left
[03:58] *** mendel_ joined
[03:58] *** sjn joined
[03:58] *** zacts joined
[04:22] *** aborazmeh left
[04:24] *** stoned75 left
[04:24] *** stoned75 joined
[04:25] *** BenGoldberg left
[04:26] *** [Coke]_ left
[04:35] *** [Coke] joined
[04:35] *** [Coke] left
[04:35] *** [Coke] joined
[04:37] *** ensamvarg3 joined
[04:39] *** abraxxa left
[04:40] *** abraxxa joined
[04:43] *** abraxxa left
[04:45] *** maettu joined
[04:45] *** abraxxa joined
[05:07] *** zacts left
[05:09] *** zacts joined
[05:20] *** molaf__ left
[05:27] *** bocaneri joined
[05:28] *** squashable6 left
[05:31] *** squashable6 joined
[05:32] *** maettu left
[05:34] *** andrzejku joined
[05:34] *** hungrydonkey joined
[05:35] *** tejr left
[05:45] *** aborazmeh joined
[05:45] *** aborazmeh left
[05:45] *** aborazmeh joined
[05:48] *** zacts left
[05:48] *** zacts joined
[05:51] *** jmcgnh left
[05:54] *** aluaces joined
[05:58] *** jmcgnh_ joined
[06:07] *** zacts left
[06:09] *** andrzejku left
[06:21] *** skids left
[06:24] *** aluaces left
[06:31] *** andrzejku joined
[06:44] *** domidumont joined
[06:47] *** aluaces joined
[06:49] *** Sgeo left
[06:53] *** Altai-man joined
[06:59] *** earenndil joined
[07:01] *** earenndil left
[07:01] *** moon-child joined
[07:01] *** rindolf joined
[07:06] *** maettu joined
[07:06] <Geth> ¬¶ ecosystem: 09cba83206 | Julio++ | META.list

[07:06] <Geth> ¬¶ ecosystem: Add BigRoot to ecosystem

[07:06] <Geth> ¬¶ ecosystem: 

[07:06] <Geth> ¬¶ ecosystem: See https://github.com/juliodcs/BigRoot

[07:06] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/09cba83206

[07:06] <Geth> ¬¶ ecosystem: 2966a5f591 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[07:06] <Geth> ¬¶ ecosystem: Merge pull request #541 from juliodcs/juliodcs-BigRoot

[07:06] <Geth> ¬¶ ecosystem: 

[07:07] <Geth> ¬¶ ecosystem: Add BigRoot to ecosystem

[07:07] <Geth> ¬¶ ecosystem: Thanks!

[07:07] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/2966a5f591

[07:09] *** dyske joined
[07:09] *** dyske left
[07:10] *** dyske joined
[07:15] *** aborazmeh left
[07:16] *** BenGoldberg joined
[07:19] *** sena_kun joined
[07:21] *** Altai-man left
[07:27] *** tejr joined
[07:32] *** aluaces left
[07:34] *** dakkar joined
[07:35] *** maettu left
[07:38] *** dyske left
[07:38] *** tejr left
[07:49] *** maggotbrain777 left
[07:50] *** BenGoldberg left
[07:52] *** maggotbrain joined
[07:53] *** tejr joined
[08:01] *** ensamvarg joined
[08:03] *** sno left
[08:05] *** sno joined
[08:12] *** domidumont left
[08:16] *** domidumont joined
[08:25] *** pecastro joined
[08:47] *** Black_Ribbon left
[08:48] *** Doc_Holliwould left
[09:03] *** ensamvarg3 left
[09:18] *** tejr left
[09:25] *** maettu joined
[09:28] *** stoned75 left
[09:29] *** stoned75 joined
[09:36] *** aluaces joined
[09:42] *** natrys joined
[09:48] *** maettu left
[09:56] *** markoong joined
[10:07] *** Kaiepi left
[10:07] <timotimo> m: my $rexstr = "$<first>=<[a..z]> $<rest>=<[a..z]>+"; "hello world" ~~ / \s <blorp=$rexstr> /; say $<blorp>

[10:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§5===SORRY!5===‚ê§Unrecognized regex metacharacter = (must be quoted to match literally)‚ê§at /home/camelia/EVAL_0‚Ä¶¬ª

[10:08] <timotimo> m: my $rexstr = "$<first>=<[a..z]> $<rest>=<[a..z]>+"; "hello world" ~~ / \s $<blorp>=<$rexstr> /; say $<blorp>

[10:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§5===SORRY!5===‚ê§Unrecognized regex metacharacter = (must be quoted to match literally)‚ê§at /home/camelia/EVAL_0‚Ä¶¬ª

[10:08] <timotimo> m: my $rexstr = '$<first>=<[a..z]> $<rest>=<[a..z]>+'; "hello world" ~~ / \s $<blorp>=<$rexstr> /; say $<blorp>

[10:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´ÔΩ¢worldÔΩ£‚ê§ first => ÔΩ¢wÔΩ£‚ê§ rest => ÔΩ¢orldÔΩ£‚ê§¬ª

[10:09] <timotimo> sjaveed: i'm not sure if this will help; subcaptures of a regex-as-string interpolated bit can be received like this, by giving the result a name explicitly in the interpolating regex

[10:09] *** Kaiepi joined
[10:10] <Xliff> timotimo++ -- I was looking for that!

[10:10] <Xliff> It uses EVAL under the hood, yes?

[10:11] <timotimo> that's right

[10:15] <Xliff> Thanks.

[10:30] *** aluaces left
[10:41] *** BenGoldberg joined
[10:56] *** Doc_Holliwould joined
[11:15] *** BenGoldberg left
[11:18] *** Kaiepi left
[11:18] *** Altai-man joined
[11:21] *** sena_kun left
[11:25] *** ensamvarg3 joined
[11:26] *** Kaiepi joined
[11:28] *** molaf__ joined
[11:33] *** Noisytoot left
[11:34] *** Noisytoot joined
[11:34] *** molaf__ left
[11:37] *** cpan-raku left
[11:37] *** Kaiepi left
[11:38] *** cpan-raku joined
[11:38] *** cpan-raku left
[11:38] *** cpan-raku joined
[11:39] *** leont joined
[11:49] *** hungrydonkey left
[11:55] *** tejr joined
[12:05] *** aluaces joined
[12:06] <lizmat> .seen lizmat

[12:06] <tellable6> lizmat, I saw lizmat 2020-09-09T11:53:15Z in #raku-dev: <lizmat> ugexe: I tried

[12:13] *** tejr left
[12:14] *** tejr joined
[12:23] <Roamer`> ...were you trying to get the bot to do a double-take?... I don't think it worked...

[12:31] *** Archenoth joined
[12:48] *** dogbert17 left
[12:55] *** El_Che left
[13:01] <Xliff> Is there any way to programmatically invoke need statements?

[13:01] <Xliff> I would like to run them from a loop.

[13:01] *** El_Che joined
[13:01] <rypervenche> sjaveed: Any reason why you're not just using a named regex though?

[13:02] <rypervenche> m: my regex blah { '/greeting/' (.+) }; my $path = '/greeting/bob/'; $path ~~ &blah;

[13:02] <camelia> rakudo-moar 85847d2f1: ( no output )

[13:02] <rypervenche> m: my regex blah { '/greeting/' (.+) }; my $path = '/greeting/bob/'; say $path ~~ &blah;

[13:02] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´ÔΩ¢/greeting/bob/ÔΩ£‚ê§ 0 => ÔΩ¢bob/ÔΩ£‚ê§¬ª

[13:10] <Xliff> m: my $a = 'NativeCall'; need $a;

[13:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    need used at line 1 (in Raku please use "v" prefix and "use" for pragma (e.g., "use v6;", "use v6.c;") instead)‚ê§‚ê§¬ª

[13:10] <Xliff> m: use v6; my $a = 'NativeCall'; need $a;

[13:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Don't know setting RESTRICTED‚ê§   at gen/moar/ModuleLoader.nqp:249  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/ModuleLoader.moarvm:previous_setting_name)‚ê§ from gen/moar/ModuleLoader.nqp:254  (/home/camelia/rakudo-m-inst-2/share/perl6/lib/‚Ä¶¬ª

[13:10] <Xliff> HUnh?

[13:10] <Xliff> That definitely looks LTA

[13:31] *** andrzejku left
[13:33] *** tejr left
[13:41] *** mst joined
[13:45] *** aluaces left
[13:57] *** tejr joined
[14:04] *** cusion joined
[14:07] *** mowotter left
[14:07] *** BenGoldberg joined
[14:07] *** hungrydonkey joined
[14:08] <timotimo> c: HEAD my $a = 'NativeCall'; need $a

[14:08] <committable6> timotimo, ¬¶HEAD(e65466f): ¬´04===SORRY!04=== Error while compiling /tmp/hNU22Qt_gA‚ê§Undeclared routine:‚ê§    need used at line 1 (in Raku please use "v" prefix and "use" for pragma (e.g., "use v6;", "use v6.c;") instead)‚ê§‚ê§ ¬´exit code = 1¬ª¬ª

[14:09] <timotimo> yeah, odd.

[14:17] *** Sgeo joined
[14:19] <sjaveed> Thanks for the additional comments timotimo, rypervenche

[14:19] <sjaveed> I'll take a look as soon as i get a moment to breathe here :-)

[14:20] <sjaveed> but tl;dr on why i can't use a named regex rypervenche: i'm generating these regexes from other strings

[14:23] <rypervenche> Ahh ok

[14:29] <guifa> Xliff: yes

[14:29] <guifa> need ::($a); if I remember correctly

[14:29] *** orinthe left
[14:29] <guifa> At least, it works with require

[14:30] *** orinthe joined
[14:32] <guifa> Xliff: actually, need says it runs at compile time, so it probably won‚Äôt work.  I‚Äôd recommend going with require and then using the fully qualified name as a workaround (that‚Äôs what I‚Äôm using for Intl::X)

[14:34] <Altreus> > Private multi-methods are not supported

[14:34] <Altreus> er

[14:34] <Altreus> why :)

[14:36] <Altreus> I was sort of relying on it working tbh

[14:36] <guifa> Altres: that‚Äôs a good question.  Though there‚Äôs quite a few workarounds

[14:37] <Altreus> I'm using the multi nature of it to halt recursion - I only made it private just now

[14:37] <Altreus> doesn't have to be, but erm etc

[14:39] <timotimo> private methods something something optimization?

[14:39] <timotimo> one important thing about multis is that new candidates can be brought in in different contexts

[14:40] <timotimo> like, with an inner scope that defines a multi candidate, that is only in there

[14:40] <Altreus> can I define a method like that?

[14:40] * Altreus TIAS

[14:40] <timotimo> but private methods are per exact class, so a little more like a sub

[14:40] <timotimo> actually, with a multi sub you may be better served here?

[14:42] <Altreus> shit it worked

[14:42] *** BenGoldberg left
[14:42] *** rbt joined
[14:42] <Altreus> actually maybe it did, maybe it didn't

[14:42] <Altreus> I got excited, hang on

[14:43] <guifa> Altreus take a look at this

[14:43] <rbt> Hello. Can anyone explain the difference between Buf derived from WHAT and Buf in the hash lookup?

[14:43] <rbt> my %H{Mu:U};

[14:43] <rbt> %H{Buf} = method (Buf $val) {'some buf'};

[14:43] <rbt> sub lookup(Mu $datum) {

[14:43] <rbt> 	my \type = $datum.WHAT;

[14:43] <rbt> 	dd $datum.WHAT, %H{$datum.WHAT};

[14:43] <rbt> 	dd type, %H{type};

[14:43] <rbt> 	dd Buf, %H{Buf};

[14:43] <rbt> }

[14:43] <rbt> my Buf $b = Buf.new(^256);

[14:43] <rbt> lookup($b);

[14:43] <rbt> ##### Output

[14:43] <rbt> # Buf

[14:43] <rbt> # Any element of %H = Any

[14:43] <rbt> # Buf

[14:43] <rbt> # Any element of %H = Any

[14:43] <rbt> # Buf

[14:43] <rbt> # Method %H = method <anon> (Mu: Buf $val, *%_) { #`(Method|93826602735792) ... }

[14:44] <moritz> rbt: please don't past more than single line of code here; use a pastebin for that

[14:44] <guifa> m: class A { multi sub b(\self,Int $) {‚Äòint‚Äô}; multi sub b(\self,Str $) {‚Äòint‚Äô}; method a (|c) { self.&bar(|c) } }; say A.new.test(1); say A.new.test(‚Äòa‚Äô)

[14:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    bar used at line 1. Did you mean 'bag', 'VAR'?‚ê§‚ê§¬ª

[14:45] <guifa> erp

[14:45] <rbt> moritz: Okay. Will do in the future.

[14:45] <guifa> m: class A { multi sub b(\self,Int $) {‚Äòint‚Äô}; multi sub b(\self,Str $) {‚Äòint‚Äô}; method a (|c) { self.&b(|c) } }; say A.new.test(1); say A.new.test(‚Äòa‚Äô)

[14:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´No such method 'test' for invocant of type 'A'.  Did you mean any of‚ê§these: 'gist', 'List', 'list', 'Set'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:45] <guifa> okay I really need to stop renaming variables for golfing in irc

[14:45] <Altreus> ok so it looks like the methods aren't constrained to the scope so they're still public even though I defined them elsewhere

[14:46] <Altreus> so it looked like it worked but it was just the original with weird shapes :D

[14:46] <moritz> rbt: I don't have time to dive into it right now, but maybe it's related to Buf being a (parametric) role; if you try to instantiate it, a class will be automatically created for you

[14:46] <Altreus> but yeah I can use my multi sub

[14:46] <moritz> so Buf could refer to eitehr of these

[14:46] <Altreus> or similar

[14:47] <guifa> Altreus: 

[14:47] <guifa> m: class A { multi sub b(\self,Int) {‚Äòint‚Äô}; multi sub b(\self,Str) {‚Äòstr‚Äô}; method a (|c) { self.&b(|c) } }; say A.new.a(1); say A.new.a('a')

[14:47] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´int‚ê§str‚ê§¬ª

[14:47] <Altreus> ah right

[14:47] <guifa> will only add one character when you use (basically .&foo instead of !foo)

[14:47] <Altreus> but if it's so easy why not just make private multis do that :)

[14:47] <guifa> Could just be a NYI thing

[14:48] <Altreus> yeah, pesky

[14:48] <Altreus> get to it, unpaid labourers!

[14:48] <Altreus> also thank you

[14:48] <guifa> Also‚Ä¶ grrr at whoever made the TWEAK method for X::Method::NotFound

[14:49] <guifa> It and three other classes in Exceptions.pm6 require special code for localization =/

[14:50] <guifa> Speaking of weird things methods too btw

[14:51] <guifa> m: my &why-no-work-grrrrr = method { $:placeholder }

[14:51] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Placeholder variables (eg. $:placeholder) cannot be used in a method.‚ê§Please specify an explicit signature, like method <anon> (:$placeholder) { ... }‚ê§at <tmp>:1‚ê§------> 3my &why-no-work-grrrrr =‚Ä¶¬ª

[14:51] <Altreus> what the heck is a placeholder

[14:51] <Altreus> :O

[14:52] <guifa> whaaaaa?  you don‚Äôt know the joys of placeholders??!?!?!??!!

[14:52] * guifa is only surprised because of how deep of a dive you‚Äôve taken in Raku :-)

[14:52] <guifa> Placeholders occupy the happy place between a full block with signature and a whatever code

[14:52] <Altreus> deep but not wide

[14:52] <Altreus> I was going to say aren't they things like $^a, $^b

[14:52] <guifa> yes they are :-)

[14:53] <Altreus> but this does not match that pattern!

[14:53] <guifa> $^positional, $:named

[14:53] <Altreus> oh right hmm

[14:53] <Altreus> I've not come across a block that uses named placeholders since I've not come across a procedure that's going to pass them

[14:53] <guifa> (acutally in all honesty I had completely skimed over $:named until only a few monhs ago )

[14:54] <Altreus> is it $: or :$

[14:54] <Altreus> oh

[14:54] <Altreus> you did $: before and it said please do :$ in a signature and I got confused

[14:55] <Altreus> helpfully that's recognisably the "embarrased" emoji from before we had proper ones

[14:55] <timotimo> $:blah is one way to declare that your block takes a named argument called "blah"

[14:55] <timotimo> :$blah is the way to declare it in the signature

[14:55] <Altreus> TIL about named placeholders, yay!

[14:56] *** Maylay left
[14:57] <guifa> It is weird that methods won‚Äôt allow them though.  You‚Äôd think that they would, since self would be implied first positional, and all the rest would follow along from that

[14:59] <moritz> if you can be bothered to writes classes/roles and methods, you can also be bothered to write signatures :D

[14:59] *** Maylay joined
[14:59] <guifa> moritz:  if only you could see the nastiness I‚Äôm dealing with trying to create a semi passable localization system for Raku hahaha

[14:59] <guifa> actually

[14:59] <moritz> it's mostly meant for really short subs, often anonymous ones; for long ones, signatures help immensly with readabilty

[15:00] <guifa> moritz (and timotimo for that matter), y‚Äôall are native German speakers yeah?

[15:00] <moritz> ja

[15:01] <guifa> iche habe eine Bitte O:-)

[15:01] <guifa> ich*

[15:01] <moritz> shoot :D

[15:02] <guifa> I wrote a script that parses out the .message for all the exceptions

[15:02] <guifa> I figured out a way to hack them in so that exceptions print out in non-English languages, even for compile time stuff

[15:04] <guifa> so‚Ä¶. naturlich, wanna translate ‚Äòem to German?  I‚Äôm doing Spanish/Asturian/Euro Portuguese, and rypervenche is going to help do Chinese

[15:05] <moritz> I can translate some; probably don't have enough time/motivation to do all

[15:05] <guifa> yay.  (and don‚Äôt need all of them, that‚Äôs the joy of github and pull requests)

[15:05] <moritz> so, where do I do that?

[15:06] <timotimo> have you considered using the mechanism that also powers getting exceptions as json?

[15:07] <moritz> SCOPE CREEP! :D

[15:09] <guifa> timotimo I hadn‚Äôt seen that.  Does it return a JSON object like {type: ‚Äúfoo‚Äù, message: ‚Äúreally long message here‚Äù} ?  

[15:09] <Altreus> je peux essayer de faire le fran√ßais si tu veux

[15:10] <timotimo> env RAKU_EXCEPTIONS_HANDLER=JSON perl6 -e 'die "oh no"'

[15:10] <Altreus> ¬´les traduire dans francais¬ª, I suppose

[15:10] <timotimo> {"X::AdHoc":{"payload":"oh no","message":"oh no"}}???  

[15:11] <timotimo> it's not "a mechanism to get it as json" it's "a mechanism to get the exception and print it however you want"

[15:11] <guifa> timotimo: did not know that that existed.  But the messages are unfortunately generated in code, and sometimes through TWEAK methods (looking at you X::Method::NotFound)

[15:12] <Altreus> RAKU_EXCEPTIONS_HANDLER=de_DE

[15:12] <Altreus> Dede!

[15:14] <Altreus> guifa: as tu une^W^W^WDo you have a list of error strings somewhere?

[15:15] <codesections> points for using 3 ^Ws instead of 9 ^Hs :D

[15:15] <guifa> timotimo: I‚Äôm looking to actually adjust the message string, but it‚Äôs programmatically set ‚Äî fairly simply in most cases, but quite complex in others (so localizers need some basic knowledge of Raku esp if their language does dual/paucal/etc numbers)

[15:16] <guifa> Altreus: I should be tonight.  The only thing tripping me up from being done this morning was the no placeholders in methods.  Debating my best workaround to keep my updater scripts simple

[15:17] <codesections> guifa: If I could submit one minor patch for English, I think it'd be adding dual/paucal numbers

[15:17] <guifa> I think I‚Äôll probs just do __PLACEHOLDER__ and do a subst, since it‚Äôs just two of them and they have to have some special handling anyways

[15:17] <Altreus> what are these numbers

[15:17] <codesections> (a few years ago, I would have said "a gender neutral pronoun" but 'they' seems to have caught on well enough these days) 

[15:17] <guifa> English has singular and plural (the latter is technically ‚Äúnon-plural‚Äù because one has ‚Äúzero things‚Äù)

[15:18] <guifa> Arabic, for instance, has singular, DUAL and plural, so that the number 2 gets handled specially

[15:18] <Altreus> aha

[15:18] <Altreus> I did wonder about that weird feature of Western languages

[15:18] <Altreus> why is 1 so special

[15:19] <guifa> paucal is a weird one, normally for ‚Äúa few‚Äù (with languages determining that definition specially)

[15:19] *** sena_kun joined
[15:20] <guifa> It‚Äôs a localizer‚Äôs nightmare come true.  Determining the correct number is ‚Ä¶ complex :-)

[15:20] <codesections> imo, it infects thinking by inclining people towards binary divisions (1 vs not-1) in a way that would be less pronounced with a trinary division 

[15:20] <codesections> but that's total speculation 

[15:21] *** Altai-man left
[15:24] *** MilkmanDan left
[15:28] *** MilkmanDan joined
[15:29] <Altreus> we just group everything so it can be 1 again :D

[15:31] <guifa> So there‚Äôs still one or two bugs in the generation of this file but ‚Ä¶¬†

[15:31] <guifa> https://gist.github.com/alabamenhu/b2109f1ab0590f9a6e366d0125d0e3ab

[15:32] <guifa> But it gives a decent enough overview of how an Intl::X::en file might look

[15:33] *** grumble joined
[15:34] <guifa> Some of them have a ‚ÄúNote: ‚Äú (see X::Adhoc, line 133) which I‚Äôm creating bit by bit as I do my own localization

[15:35] <Altreus> 'SORRY!'

[15:36] <Altreus> :D

[15:36] <guifa> I gave serious thought to just leaving that one as is haha

[15:36] <guifa> and then adding in a Canadian flag next to it ;-)

[15:36] <Altreus> D√âSOL√â! qqc a fait tort

[15:37] <Altreus> not enough exclamation marks

[15:37] <Altreus> The EVAL one has three, a sure sign of a diseased mind

[15:38] <guifa> Oh but the Spanish and Asturian get six!

[15:38] <guifa> ¬°¬°¬°SI√âNTOLO!!!

[15:38] <Altreus> oy!

[15:38] <guifa> errr

[15:38] <guifa> ¬°¬°¬°EVAL ye una funci√≥n perpeligrosa!!!

[15:38] <Altreus> I'm sort of surprised they still use those upside-downey ones

[15:39] <Altreus> do they even have special names?

[15:39] <guifa> You have to have them..  ‚ÄúIt‚Äôs easy‚Äù and ‚ÄúIs it easy‚Äù use the same words, in the same order, but different intonation

[15:39] <Altreus> I'm mildly upset that they render differently

[15:39] <Altreus> Well that's true of French too, but the one at the end is enough

[15:40] <Altreus> C'est facile. C'est facile?

[15:40] <guifa> For a long question, it might not be obvious that something is a question until you get to the end

[15:40] <guifa> so it‚Äôs kinda nice

[15:40] <Altreus> Well that's OK, the Germans put all their useful words at the end and cope perfectly well

[15:40] <Altreus> It's a language of suspense

[15:40] <guifa> But they just call them opening and closing marks, same model they use for ( ) or ¬´¬†¬ª 

[15:40] <Altreus> oya

[15:41] <Altreus> is fun

[15:41] <Altreus> I was just chatting on twitch today about the way we English use the exact same words for like 5 different meanings depending on how you say it

[15:41] <Altreus> But we completely refuse to use any sort of punctuation or accents to explain which one it is

[15:42] <guifa> yeah

[15:42] * guifa . o O ( indeed | for real? | go English! | meh )

[15:46] <Altreus> we need punctuation that means this wasn't enough of a sentence to deserve a full stop

[15:46] <Altreus> .

[15:46] <sjaveed> how about elipses...

[15:47] <Altreus> that's three!

[15:47] <Altreus> How did we get to the point where repeating punctuation makes it less effective? :|

[15:48] <[Coke]> ‚Ä¶

[15:48] <Altreus> ‚ÄΩ

[15:48] <[Coke]> m: say 2√∑6

[15:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´0.333333‚ê§¬ª

[15:50] *** skids joined
[15:56] *** Kaiepi joined
[16:04] *** Kaiepi left
[16:09] *** andrzejku joined
[16:14] <guifa`> oh, I also totally forgot

[16:15] <guifa`> Altreus: lizmat had made a proposal a while back to make ¬ø? and ¬°! valid syntax in Raku.  IIRC she was thinking of them as quotation marks, but if they could be used as a substitue for ?( ... ) and !( ... ) that would be kinda cool :-) 

[16:20] *** stoned75 left
[16:22] *** stoned75 joined
[16:29] <Altreus> ah and I can type them easily so bonus

[16:30] <Altreus> does `my sub` close over `self` (not $self)?

[16:30] *** billN1VUX joined
[16:30] <[Coke]> does my sub even have a self?

[16:31] <Altreus> as in method foo() { my sub bar { ... } }

[16:31] <Altreus> I've used self.&bar for now

[16:32] <Altreus> plus the relevant signature

[16:34] *** xelxebar left
[16:35] *** aluaces joined
[16:36] *** xelxebar joined
[16:38] <guifa`> subs explicitly reject the use of self

[16:39] <guifa`> although maybe in a method block's lexical scope?

[16:40] <guifa`> m: class A {¬†method B { self #`(works okay here); my &c = sub {¬†self #`(here though?) } } }

[16:40] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of self symbol in sink context (line 1)‚ê§¬ª

[16:40] <guifa`> m: class A { method B { self.say #`(works okay here); my &c = sub { self.say #`(here though?) } } }

[16:40] <camelia> rakudo-moar 85847d2f1: ( no output )

[16:41] <guifa`> seems to allow it, if you've got it in method's scope

[16:44] *** jmcgnh_ left
[16:45] <Altreus> I finally got to the position where I can TIAS :)

[16:45] <Altreus> now I can TIAS

[16:46] *** dakkar left
[16:52] <Altreus> what function does try have over just using a block?

[16:55] <[Coke]> legibility?

[16:56] <[Coke]> it also turns on "use fatal"

[16:56] <[Coke]> https://docs.raku.org/language/exceptions#index-entry-try_blocks

[16:57] <Altreus> ah, implicit catch! of course

[16:58] <Altreus> Is there a way to tell installations that a file has been deleted? That was a common issue with cpan

[16:58] <Altreus> And I've just done it again :D

[16:59] *** aluaces left
[17:00] *** molaf joined
[17:03] *** MasterDuke joined
[17:10] *** rbt left
[17:11] *** rbt joined
[17:19] <[Coke]> Please consider casting a ballot for the RSC if you're eligible and haven't voted yet

[17:23] *** markoong left
[17:26] *** aluaces joined
[17:32] *** zacts joined
[17:33] *** BenGoldberg joined
[17:37] *** Maylay left
[17:42] *** jmcgnh joined
[17:56] *** Maylay joined
[18:01] *** vgrato_ left
[18:07] *** BenGoldberg left
[18:16] *** stoned75 left
[18:17] *** stoned75 joined
[18:22] *** Black_Ribbon joined
[18:27] *** bocaneri left
[18:30] *** Kaiepi joined
[18:39] *** cgfbee left
[18:39] *** cgfbee joined
[18:47] <El_Che> until when can one vote?

[18:53] <[Coke]> 20th

[18:54] <[Coke]> but please don't wait until the end to vote, as I have to click buttons to process each vote.

[18:54] <[Coke]> (and would rather not get 100 votes at the end of the run)

[18:54] <Juerd> [Coke]: Do people who vote get a confirmation that it was received?

[18:55] <rypervenche> guifa`: Does the ?? in your script allow for variants?

[18:57] *** zacts left
[18:57] *** zacts joined
[18:57] *** zacts left
[18:59] <lizmat> Juerd: they don't, afaik, but you can ask [Coke] here whether they received it

[19:01] <Juerd> lizmat: It's fine, if the assumption is that email works then I'll assume the same :)

[19:01] <El_Che> and to think that voting by mail is somewhat controversial in some countries :)

[19:01] *** xelxebar left
[19:02] <lizmat> well, we'll see whatever the RSC will come up with for the next election

[19:02] *** xelxebar joined
[19:03] *** wamba joined
[19:03] <[Coke]> Juerd: I'm not replying to the emails, no.

[19:04] <Juerd> [Coke]: ok, thanks :)

[19:04] <[Coke]> I will post a list of email addressess that voted as part of the results.

[19:04] <[Coke]> (but not who they voted for)

[19:04] <Juerd> Please obfuscate those a little because of address harvesting bots

[19:06] <[Coke]> Sure, but in general that ship has sailed.

[19:07] <[Coke]> Juerd: patches welcome to https://github.com/Raku/Raku-Steering-Council/blob/main/scripts/tally.raku

[19:07] <Juerd> In case of my own address, certainly, and it might be true for most. But you don't want to be responsible for someone's first, I think :)

[19:07] <[Coke]> or just tell me what you want done: how would you want "Will Coleda [email@hidden.address] (@coke)" to appear?

[19:08] <[Coke]> mine's been out the mid 90s. :)

[19:08] <[Coke]> *since

[19:09] <[Coke]> just s/@/ -at-/ ?

[19:09] <Juerd> Simple substitution of the '@' for something uncommon goes a long way, such as s/'@'/ nospam~at /

[19:10] <guifa`> rypervenche: that's actually one fo the advantages of messages being methods

[19:10] <Juerd> Just the word 'at', with or without punctuation, will work for many but not most bots, while anything else will fool most (but still not all of course)

[19:10] <El_Che> $whatbeforemail+domain@owndomain.com

[19:10] <guifa`> rypervenche: oh, actually, you mean in terms of language codes.  Yes, absolutely.  Although it's not smart about it yet

[19:11] <Juerd> [Coke]: Thanks :)

[19:11] <guifa`> My Portuguese translation wil be Intl::X::pt-PT for instances, so that SmokeMachine can do Intl::X::pt-BR ;-)

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: 7e6800a260 | Coke++ | scripts/tally.raku

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: Add simplistic ranking output

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/7e6800a260

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: 0049ee5653 | Coke++ | scripts/tally.raku

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: Obfuscated reported email address

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: 

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: Juerd++

[19:12] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/0049ee5653

[19:13] <[Coke]> Done.

[19:13] <SmokeMachine> guifa`: I'm in! How should I start?! :)

[19:14] <[Coke]> btw, I am not doing a great job with mime encoding of non-ascii. "Christian =?utf-8?Q?Bartolom=C3=A4us?="

[19:16] <Juerd> That's rfc2047 but I haven't done anything with in it Raku

[19:17] <Juerd> It's in Perl's Encode.pm as MIME-Header

[19:18] <guifa`> SmokeMachine: I should have the finalized template sometime tonight.  Still have a small bug in one of my scripts to fix before it's usable

[19:18] *** Altai-man joined
[19:20] *** xinming left
[19:20] *** xinming joined
[19:21] *** sena_kun left
[19:25] *** Altai-man left
[19:28] <bartolin> [Coke]: oops. sorry for causing trouble there

[19:32] <[Coke]> bartolin: :)

[19:37] * bartolin has (marginally) messed up the commit history in nfs-utils recently as well: http://git.linux-nfs.org/?p=steved/nfs-utils.git;a=history;f=utils/mountd/cache.c;h=ea74067209;hb=HEAD But then someone else managed to get an Umlaut in there ...

[19:38] <bartolin> maybe I should stop doing that ;)

[19:42] * [Coke] wonders where he should report bartolin's email address as a bug. Email::MIME?

[19:45] *** Archenoth left
[19:47] *** Archenoth joined
[19:55] * lizmat remembers the day a new guy named √Üvar started working at $work, and broke quite a few of the internal systems :-)

[19:56] *** andrzejku left
[19:56] *** Black_Ribbon left
[19:56] <guifa`> √Üvar was the first name or was he one of those mononymic types?

[19:57] <guifa`> (or both, and if so, which broke the system?)

[19:58] *** Black_Ribbon joined
[19:58] *** andrzejku joined
[19:58] *** zacts joined
[19:59] <lizmat> the fact that there was no extended ASCII representation for √Ü (if I remember correctly :-)

[20:00] <codesections>  Ah, good old #9 on the list: https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/

[20:01] <lizmat> yup

[20:11] *** defaultxr left
[20:12] *** defaultxr joined
[20:19] *** Possum joined
[20:19] *** approaching236 joined
[20:23] *** wamba left
[20:29] <[Coke]> codesections: I would hope that #11 at least is getting closer to true.

[20:30] *** approaching236 left
[20:32] *** rindolf left
[20:32] *** domidumont left
[20:32] *** Black_Ribbon left
[20:33] *** domidumont joined
[20:33] *** domidumont left
[20:37] <guifa> [Coke]: the only real hold back now is no clear consensus on how to handle ideographic description sequences and any of the (now very few) writing systems not encoded

[20:43] *** andrzejku left
[20:47] *** AlexDani` left
[20:51] *** approaching236 joined
[20:53] *** Black_Ribbon joined
[20:58] *** MasterDuke left
[20:59] *** BenGoldberg joined
[21:07] <codesections> I recently released 2 distributions, A and B.  A relies on B and names B in its META6.json file.  I discovered a bug in B that prevents A from working, and fixed the bug, but A is still not working, and I'm trying to figure out if A is using the new version of B or the old one.

[21:07] <codesections> I've installed the new version of B with `zef install . --force-install`.  Is that all I need to do to get A to use the new B?

[21:08] *** approaching236 left
[21:08] <codesections> (for those of you who are curious, A here is Pod::Weave and B is Pod::Literate, but that's not really relevant) 

[21:09] <codesections> I have not incremented B's version in its META6 file.  Do I need to do so in order to get A to use the new B?

[21:13] *** MasterDuke joined
[21:17] *** markoong joined
[21:17] <timotimo> zef will usually not fetch a "new version" unless the version number also changes

[21:17] <timotimo> since it's "already installed"

[21:18] <codesections> yeah, but I thought the --force-install overrides that

[21:22] <rypervenche> Did you also --force-install A?

[21:23] <codesections> yeah

[21:24] <codesections> hmm, yeah, no combination of --force-install'ing A and B worked.  But bumping B's version did.  Odd

[21:26] *** mst left
[21:27] *** approaching236 joined
[21:29] <Geth> ¬¶ doc/gc-dup: b8e1ad7a3e | (Stoned Elipot)++ | doc/Type/MixHash.pod6

[21:29] <Geth> ¬¶ doc/gc-dup: Remove duplicated section

[21:29] <Geth> ¬¶ doc/gc-dup: review: https://github.com/Raku/doc/commit/b8e1ad7a3e

[21:30] <Geth> ¬¶ doc: stoned++ created pull request #3626: Remove duplicated section

[21:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3626

[21:32] *** approaching236 left
[21:37] *** zacts left
[21:37] *** zacts joined
[21:38] <guifa> rypervenche: I think I finally worked out all of the kinks

[21:39] <guifa> weekly: https://github.com/alabamenhu/IntlX

[21:39] <notable6> guifa, Noted! (weekly)

[21:39] *** approaching236 joined
[21:39] <guifa> ^^ rypervenche take a look there under resources/template.rakumod

[21:43] <rypervenche> guifa: Nice! I'll check it out. (also typo in README "dobule")

[21:45] <guifa> (also don‚Äôt look at my ugly processing code lol.  But of course someone will come along now and tell me how I can get a Match result for parsing an entire raku file and my life would have been much easier :P 

[21:46] *** agentzh left
[21:53] <rypervenche> My eyes are closed ~_^

[22:01] *** [Coke] left
[22:04] *** [Coke] joined
[22:04] *** [Coke] left
[22:04] *** [Coke] joined
[22:10] *** rbt left
[22:11] *** rbt joined
[22:12] *** BenGoldberg left
[22:13] *** hungrydonkey left
[22:14] *** approaching236 left
[22:23] *** zacts left
[22:24] *** approaching236 joined
[22:35] *** Maylay left
[22:39] *** skids left
[22:41] *** wamba joined
[22:41] *** Maylay joined
[22:44] *** BenGoldberg joined
[22:47] *** natrys left
[22:50] *** approaching236 left
[22:52] <Xliff> guifa: Thanks. Unfortunately run-time is way too late for my purposes.

[22:53] *** xinming left
[22:53] <Xliff> m: sub weird-test ($scalar is rw) { say $scalar.VAR.nbame }; my $apapapa = 'WTF'; weird-test($apapapa)

[22:53] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´No such method 'nbame' for invocant of type 'Str'‚ê§  in sub weird-test at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:54] <Xliff> m: sub weird-test ($scalar is rw) { say $scalar.VAR.name }; my $apapapa = 'WTF'; weird-test($apapapa)

[22:54] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´$apapapa‚ê§¬ª

[22:54] <Xliff> m: sub weird-test (\scalar is rw) { say scalar.VAR.name }; my $apapapa = 'WTF'; weird-test($apapapa)

[22:54] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can only use 'is rw' on a scalar ('$' sigil) parameter, not 'scalar'‚ê§at <tmp>:1‚ê§¬ª

[22:54] <Xliff> m: sub weird-test (\scalar) { say scalar.VAR.name }; my $apapapa = 'WTF'; weird-test($apapapa)

[22:54] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´$apapapa‚ê§¬ª

[23:00] *** Sgeo_ joined
[23:02] *** Sgeo left
[23:08] <Xliff> sub (*%o) { %o.gist.say }; my $a = 'key'; o( $a => 'a' );

[23:09] <Xliff> m: sub (*%o) { %o.gist.say }; my $a = 'key'; o( $a => 'a' );

[23:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    o used at line 1‚ê§‚ê§¬ª

[23:09] <Xliff> m: sub o (*%o) { %o.gist.say }; my $a = 'key'; o( $a => 'a' );

[23:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub o at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:09] <Xliff> m: sub o (*%o) { %o.gist.say }; my $a = 'key'; ($a => 'a').gist.say

[23:09] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´key => a‚ê§¬ª

[23:10] <Xliff> m: sub o (*%o) { %o.gist.say }; my $a = 'key'; o( |Pair.new($a, 'a') );

[23:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´{key => a}‚ê§¬ª

[23:17] *** pecastro left
[23:23] *** approaching236 joined
[23:39] *** hungrydonkey joined
[23:41] *** ensamvarg3 left
[23:42] *** markoong left
[23:43] *** colomon__ left
[23:45] *** colomon joined
[23:46] *** colomon left
[23:55] *** guifa` left
[23:57] *** mst joined
