[00:05] *** konvertex left
[00:14] *** aborazmeh left
[00:27] *** KindOne left
[00:28] *** matiaslina left
[00:28] *** wildtrees[m] left
[00:30] *** DarthGandalf joined
[00:32] *** KindOne joined
[00:34] *** wildtrees[m] joined
[00:36] *** matiaslina joined
[00:39] *** hyperak joined
[00:39] *** hyperak left
[00:39] *** holli__ left
[00:40] *** hyperak joined
[00:52] *** vike1 left
[00:55] *** vike1 joined
[01:03] *** lucasb left
[01:11] *** KindTwo joined
[01:12] *** KindOne left
[01:16] *** KindTwo is now known as KindOne

[01:25] *** molaf left
[01:38] *** molaf joined
[01:44] *** bdju left
[01:48] *** bdju joined
[02:04] <cpan-raku> New module released to CPAN! Vikna (0.0.2) by 03VRURG

[02:48] *** linkable6 left
[02:48] *** evalable6 left
[02:50] *** linkable6 joined
[02:51] *** evalable6 joined
[03:33] *** __jrjsmrtn__ joined
[03:34] *** _jrjsmrtn left
[03:39] *** discoD left
[04:02] *** devmikey left
[04:07] *** brtastic joined
[04:56] *** hyperak left
[04:56] *** hyperak joined
[05:00] *** xinming_ left
[05:00] *** xinming_ joined
[05:01] *** cpan-raku left
[05:02] *** cpan-raku joined
[05:02] *** cpan-raku left
[05:02] *** cpan-raku joined
[05:14] *** Xliff left
[05:19] *** suman joined
[05:21] *** xinming_ left
[05:23] *** xinming_ joined
[05:45] *** stoned75 joined
[06:19] *** xinming_ left
[06:22] *** xinming_ joined
[06:26] *** kensanata joined
[06:27] *** andrzejku joined
[06:31] *** aborazmeh joined
[06:31] *** aborazmeh left
[06:31] *** aborazmeh joined
[06:43] *** holli__ joined
[06:44] *** brtastic left
[06:47] <Geth> ¬¶ doc/master: 5 commits pushed by (Tim Smith)++, (Juan Juli√°n Merelo Guerv√≥s)++

[06:47] <Geth> ¬¶ doc/master: 08f01e987a | Fix the INTERACT disambiguation mode

[06:47] <Geth> ¬¶ doc/master: 59a37ec01f | Use full path to rakudo, don't rely on $PATH lookup

[06:47] <Geth> ¬¶ doc/master: 03c207485f | Add black-box tests for bin/p6doc

[06:47] <Geth> ¬¶ doc/master: b0c4388673 | Move p6doc tests to xt

[06:47] <Geth> ¬¶ doc/master: eb5341ce14 | Merge pull request #3422 from softmoth/interact-disambiguate

[06:47] <Geth> ¬¶ doc/master: review: https://github.com/Raku/doc/compare/b302b19c5e69...eb5341ce141e

[06:50] *** domidumont joined
[07:00] *** wamba joined
[07:04] *** brtastic joined
[07:13] *** chloekek_ joined
[07:20] *** Sgeo left
[07:27] *** Dwarf left
[07:28] <suman> Is there another way to sort strings? I know this

[07:28] <suman> m: say "seconds".comb.sort;

[07:28] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´(c d e n o s s)‚ê§¬ª

[07:28] *** chloekek_ left
[07:30] *** soursBot joined
[07:31] *** MasterDuke joined
[07:51] *** holli__ left
[07:54] *** JJMerelo joined
[07:56] *** dakkar joined
[08:06] *** gordonfish left
[08:14] <moritz> suman: why do you want another way?

[08:14] <moritz> there are infinitely many other ways, but none that I'm aware of that are idiomatic, fast and convenient

[08:16] <suman> moritz So that I can sort a large string faster. This approach has two methods. I was just thinking if there is any other faster way.

[08:17] *** pecastro joined
[08:20] *** JJMerelo left
[08:21] <suman> I want to first sort an array (string), do binary search to find first index and last index of each unique character, get number of times of occurrence of each unique character by subtracting first index from last index. I know this can be done with .com.Bag.hash but I wanted to experiment with this algorithm.

[08:21] <suman> moritz

[08:25] *** zehc joined
[08:27] <moritz> suman: sounds like iterating over each character and keeping track of the information you want might be better than sorting

[08:29] *** guer joined
[08:29] <guer> my $TID    = regex { <.wb> \d\d? [ <[.:\h]>+ \d\d? ] ** 1..2 <.wb> };

[08:29] *** zehc left
[08:29] <guer>  $VERSRAD  = regex { ^^ ['*'? $TID '*'?]? <!lower>+? \n } 

[08:30] <guer> my $s = "*0 :22* --VA S√ÑGER DU OM BETYGET DU FICK AV IVAR LO JOHANSSON?\n"

[08:30] *** zehc joined
[08:31] <guer> my $v = $s ~~ m/ $VERSRAD /;

[08:31] <guer> say $v

[08:31] <suman> @moritz Yes I have done that. Iterating and keeping track  with map. See here the last code under functional programming https://sumankhanal.netlify.app/post/raku/count_dna/

[08:32] <suman> wondering if I could do $sequence.comb.hyper.map(&count_each_char);

[08:32] <suman> But it significantly slows down the execution

[08:33] <timotimo> it's probably not enough work per item to really get faster that way, and also i assume you're updating a hash? you'd really want to lock or at least pre-fill the slots and then atomic-increment

[08:33] <timotimo> but you can try upping the :batch parameter on the hyper

[08:34] *** chloekek_ joined
[08:34] <guer> Anyone able to see any problems with $VERSRAD above? It doesnt terminate.

[08:39] <ShimmerFairy> Not seeing the termination issue, but <[\h]> isn't doing what you think it is.

[08:41] <guer> well, it works when i tried it ... why cant i use it?

[08:41] <timotimo> recompiling my rakudo without asan exploding all over the place so i can run Grammar::Tracer on it

[08:41] <ShimmerFairy> I'd be very surprised if you could put \h inside a character class and have it work.

[08:42] *** rindolf joined
[08:42] <timotimo> m: say "...    "‚ÄØ~~ /<[.:]+\h>/

[08:42] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3say "...    "‚ÄØ~~ /<[.:]+7‚èè5\h>/‚ê§    expecting any of:‚Ä¶¬ª

[08:42] <ShimmerFairy> m: say "  " ~~ /(<[\h]>+)/

[08:42] <timotimo> m: say "...    "‚ÄØ~~ /<[.:\h]>/

[08:42] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢  ÔΩ£‚ê§ 0 => ÔΩ¢  ÔΩ£‚ê§¬ª

[08:42] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢.ÔΩ£‚ê§¬ª

[08:42] <timotimo> m: say "...    "‚ÄØ~~ /<[.:\h]>+/

[08:42] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢...    ÔΩ£‚ê§¬ª

[08:45] <ShimmerFairy> I'd call that a bug, there's nothing in S05 to suggest backslash stuff should work in there (what if some jerk defines a \] rule in their regex?)

[08:46] <guer> what's the use of char classes if you don't are allowed to make complex ones?

[08:48] <moritz> ShimmerFairy: re "what if some jerk defines a \] rule in their regex?" then it's their own problem. They are a jerk anyway.

[08:48] <ShimmerFairy> \h isn't a set of characters, it's a rule. You're supposed to do something like <+[abc] + myrule> or [<[abc]> | \h ]

[08:50] <moritz> \h isn't a rule

[08:51] <moritz> I can't call <\h> like I can with a normal rule

[08:51] <moritz> it's syntax

[08:51] <moritz> you can call it a bug in S05 if you want

[08:51] <ShimmerFairy> It is though, much like how + is still a sub, even if you use it funny.

[08:52] <moritz> don't mix regexes and regular slang where they aren't comparable

[08:52] <cpan-raku> New module released to CPAN! Log::Colored (0.1.1) by 03TYIL

[08:52] <ShimmerFairy> At least in S05, it would be a backslash:sym<h>

[08:52] <moritz> that's how it's parsed

[08:52] <moritz> everything is parsed by a rule

[08:52] <moritz> that doesn't make everthing a rule

[08:53] <ShimmerFairy> So by that logic, "3 + 7" isn't invoking a subroutine, that's just how it's parsed?

[08:54] <moritz> no, by that logic, you cannot infer from how it's parsed that "3 + 7" invokes a subroutine

[08:54] <suman> Is to possible to initialise a hash with only the keys? 

[08:54] <timotimo> ah

[08:54] <moritz> suman: well, what should the values be?

[08:54] *** soursBot left
[08:55] <suman> So that I can update values later

[08:55] <timotimo> m: say "OHAI"‚ÄØ~~‚ÄØ/‚ÄØ<!lower>+? /

[08:55] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢ÔΩ£‚ê§¬ª

[08:55] <moritz> if a hash has a key, it has a value for it (could be Any or so, but it still has a value)

[08:55] <moritz> suman: you can always update the value later; hashes are mutable

[08:55] <ShimmerFairy> But \h being a rule isn't the issue here. My problem is that <[\h]> is way more magical than I've ever seen character classes being, and since it's not mentioned anywhere in S05 that I can see, I'd love to know where it was decided upon.

[08:56] <moritz> ShimmerFairy: well, the test suit and at least three different implementations (STD.pm, rakudo, niecza; possibly even pugs) did it this way. Possibly it was just inherited from perl 5

[08:56] <suman> m: my %base_hash = A => Any, G => Any, C => Any, T => Any;

[08:56] <camelia> rakudo-moar 986f8ab6b: ( no output )

[08:57] <suman> @moritz Is it valid? m: my %base_hash = A => Any, G => Any, C => Any, T => Any;

[08:57] <moritz> m: my %base = <A G C T> X Any; say %base

[08:57] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´Use of uninitialized value of type Any in string context.‚ê§Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.‚ê§{A  => (G (Any)), C  => (T (Any))}‚ê§  in block <unit> at <tmp> line 1‚ê§Use of uninitialized valu‚Ä¶¬ª

[08:57] <suman> m: my %base_hash = A => Any, G => Any, C => Any, T => Any;

[08:57] <camelia> rakudo-moar 986f8ab6b: ( no output )

[08:57] <moritz> m: my %base = <A G C T> X=> Any; say %base

[08:57] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´{A => (Any), C => (Any), G => (Any), T => (Any)}‚ê§¬ª

[08:57] <moritz> suman: shorter :D

[08:58] <moritz> m: my %base; %base<A G C T> = (); say %base;

[08:58] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´{A => (Any), C => (Any), G => (Any), T => (Any)}‚ê§¬ª

[08:58] <moritz> also works

[08:58] <ShimmerFairy> You know what, maybe it was a good thing the synopses were deprecated after all, because I'm so goddamn tired of them not explaining shit because they assume you know Perl 5.

[08:58] <moritz> ShimmerFairy: you're welcome to update them if you still like them

[08:58] <timotimo> somehow the <!lower>+? seems to be involved in the breakage

[08:59] <moritz> timotimo: <!lower> is a zero-width assertion

[08:59] <moritz> timotimo: quantifiying it is a bad idea

[08:59] <timotimo> i thought that too

[08:59] <timotimo> m: say "OHAI"‚ÄØ~~‚ÄØ/‚ÄØ<!lower>+? /

[08:59] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢ÔΩ£‚ê§¬ª

[08:59] <timotimo> but this works fine?

[08:59] <timotimo> ah becaus it matches immediately

[08:59] <timotimo> m: say "OHAI"‚ÄØ~~‚ÄØ/‚ÄØ<!lower>+? I /

[09:00] <timotimo> so my test was bogus, great :)

[09:00] <timotimo> guer: so there's your answer

[09:00] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´(signal XCPU)¬ª

[09:00] <cpan-raku> New module released to CPAN! Log::Simple (0.1.1) by 03TYIL

[09:00] <moritz> just use <!lower> instead of <!lower>+?

[09:00] <ShimmerFairy> moritz: I've thought about doing them over from scratch, because I maintain that the spectests are a crummy way for a new team of humans to understand the language. I'm just gonna redirect my annoyance with <[\h]> at the people who thought they didn't need to explain things.

[09:00] <moritz> or <-lower>+? if that's what you mean

[09:00] <suman> moritz my %base = <A G C T> X=> Any; say %base What is this X? in X => Any 

[09:00] <moritz> suman: it's the cross product meta operator

[09:01] <moritz> m: say <a b c d> X <1 2>

[09:01] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´((a 1) (a 2) (b 1) (b 2) (c 1) (c 2) (d 1) (d 2))‚ê§¬ª

[09:01] <timotimo> m: say "OHAI THERE"‚ÄØ~~‚ÄØm/ <-lower>+?‚ÄØ/

[09:01] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢OÔΩ£‚ê§¬ª

[09:01] *** rindolf left
[09:01] <timotimo> m: say "OHAI THERE"‚ÄØ~~‚ÄØm/ <-lower>+? $‚ÄØ/

[09:01] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´ÔΩ¢OHAI THEREÔΩ£‚ê§¬ª

[09:01] <moritz> huh

[09:01] <moritz> ah no, that's right

[09:01] <suman> @moritz thank you

[09:02] *** rindolf joined
[09:05] <moritz> suman: you're welcome

[09:08] <moritz> ShimmerFairy: there have been made several attempts at explaining raku in human-friendly way in the form of books; none of them were a reference though. A reference book would be very welcome :D

[09:09] <guer> moritz, timotimo: thxs a lot! if i understand you correctly it is all about bad negation with '!'

[09:09] <ShimmerFairy> The main reason why I'd like to "redo" rather than "update" is because I expect the test suite to have diverged from the synopses way too much by now (and because, y'know, I'd miss all the implied holdovers from P5 if I didn't base new docs on roast)

[09:10] *** chloekek_ left
[09:12] <moritz> guer: correct. The negation with <!thing> generally means "There isn't a <thing> at the current position", but it doesn't consume any characters from the input string

[09:13] <moritz> plug: you can learn all of these gory details in https://www.apress.com/us/book/9781484232279 :D

[09:20] <guer> thanks again!

[09:20] *** guer left
[09:22] *** soursBot joined
[09:23] *** suman left
[09:26] *** sour joined
[09:29] <sour> What json (de)serializing module do you guys use? I've gone with JSON::Tiny and it is crushingly slow, I haven't done any proper benchmarking, but it feels quadratic. Also, some other (very) basic file processing that I did (linewise, 208k lines) on a 59MB file was also incredibly slow, anyone had to deal with such a thing?

[09:29] <moritz> JSON::Fast is faster

[09:40] *** konvertex joined
[09:44] *** Altai-man_ joined
[09:54] *** sour left
[10:00] *** dakkar left
[10:00] *** sour joined
[10:00] *** dakkar joined
[10:00] <sour> ah well, I see on the raku performance page that string handling is, in general, a performance bummer :(

[10:01] *** JJMerelo joined
[10:25] *** sour left
[10:28] *** sena_kun joined
[10:30] *** Altai-man_ left
[10:35] *** Black_Ribbon left
[10:36] <Geth> ¬¶ problem-solving: JJ++ created pull request #202: Solution for issue #72: spin off module publishing tutorial in the documentation.

[10:36] <Geth> ¬¶ problem-solving: review: https://github.com/Raku/problem-solving/pull/202

[10:42] *** squashable6 left
[10:44] *** squashable6 joined
[10:46] *** rbt left
[10:46] *** rbt joined
[10:51] *** JJMerelo left
[10:51] *** soursBot left
[10:51] *** soursBot joined
[11:05] *** APic left
[11:07] *** MasterDuke left
[11:10] *** soursBot left
[11:11] *** rbt left
[11:11] *** rbt joined
[11:12] *** finsternis joined
[11:25] *** soursBot joined
[11:34] *** soursBot left
[11:36] *** soursBot joined
[11:36] *** soursBot left
[11:44] *** andrzejku left
[11:47] *** sour joined
[11:52] *** andrzejku joined
[11:52] <sour> yeah, even with JSON::Fast, this string processing is extremely slow, I tried to change some things to maybe make it go faster, but it's still so many order of magnitudes slower than the equivalent in python

[11:53] <sour> for reference, going line by line in a file and splitting by a single space character in python takes less than a second, and the equivalent in raku takes a couple minutes aparently, still going

[11:53] <sour> is it known what's causing this big slowdown?

[11:56] <ShimmerFairy> Have you tried doing a similar operation with Uni-based strings, or even with raw Bufs/Blobs?

[11:57] <ShimmerFairy> With a Uni string (or derivative), you'd be able to see if the issue is with NFG stuff or with strings in general.

[11:57] <sour> No, I haven't really tried much, mostly changing things from line ending splitting to using "".IO.lines, which I assumed was better, and splitting strings based on strings instead of regexes

[11:57] <sour> the code's pretty simple, it's the data volume that's a bit large I guess, ~60 MB

[11:58] <sour> I will do some looking around at some point

[11:58] <sour> thanks

[12:00] <ShimmerFairy> the Uni-based classes are a bit lacking in methods, however, so splitting will be a bit more low-level.

[12:02] <lizmat> ShimmerFairy: care to elaborate on what you think is missing ?

[12:03] <ShimmerFairy> Well, I tried .split and it didn't work. I just generally mean stuff to manipulate strings.

[12:03] <ShimmerFairy> m: say Str.^methods.map(*.name)

[12:03] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´(BUILD Capture Int Num Version chomp pred succ match subst-mutate parse-base samecase samemark samespace word-by-word trim-leading trim-trailing trim encode NFC NFD NFKC NFKD unival univals wordcase trans parse-names uniparse indent codes chars uc lc ‚Ä¶¬ª

[12:03] <ShimmerFairy> m: say Uni.^methods.map(*.name)

[12:03] <camelia> rakudo-moar 986f8ab6b: OUTPUT: ¬´(new list Uni NFC NFD NFKC NFKD codes elems Numeric Int of Str Bool EXISTS-POS AT-POS gist raku BUILDALL)‚ê§¬ª

[12:04] <lizmat> well, split with regexen is going to be difficult with Uni

[12:04] <ShimmerFairy> I don't think it's a big deal or a huge priority (since 99% of the time Str is what you want), but it is kind of empty.

[12:04] <lizmat> I once tried to get JSON::Fast.from_json faster by using Uni, but failed

[12:05] <ShimmerFairy> Maybe someday I'll actually add those :nfc etc. adverbs to regexes like I proposed way way back. (I actually finally ran into a case where that would've been handy, parsing my .XCompose file.)

[12:05] <sour> my bad, I did some quick check and apparently the string parsing and splitting is alright, It's surprising to see that some other step is at fault, probably the fact that the JSON parsing was slow got me biased, thanks :P

[12:05] *** soursBot joined
[12:06] *** soursBot left
[12:06] <ShimmerFairy> no problem :)

[12:08] *** ctilmes joined
[12:09] *** soursBot joined
[12:10] <ctilmes> sour: I have a work in progress (hopefully release soon) that parses JSON faster, but still takes a long time to build Raku data structures

[12:10] <sour> what do you mean by 'takes a long time to build Raku data structures'?

[12:11] <sour> do you have a link to the repo, if it's public? I'm curious as to how it's different from JSON::Fast

[12:12] <ctilmes> I used a CPP library (simdjson.org) to parse which is blazing fast, but then I have to pull the strings/arrays/objects/ etc. back with NativeCalls, then construct arrays, hashes, strings, etc. to return them

[12:12] *** soursBot left
[12:13] <ctilmes> I have replace associative/positional handling, so you can query the objects from C without pulling everything back.. That is actually much faster than JSON::Fast

[12:13] <ctilmes> It's all ready to go, just waiting for @work permission to release

[12:13] <sour> ohhhh nice

[12:15] <ctilmes> It even supports JSON Paths, so you can ask for $object<foo/bar/3/something> and it jumps right to it.

[12:17] <sour> let us know when / if you open source it :)

[12:19] *** soursBot joined
[12:21] *** ctilmes left
[12:22] *** sour left
[12:24] *** ctilmes joined
[12:24] <ctilmes> Four approvals done, only 7 more to go and I can open source it!

[12:27] *** Altai-man_ joined
[12:29] <lucs> ‚ñ∏ zef test t/01-basic.t

[12:29] <lucs> Invalid json? File: t/01-basic.t

[12:30] *** sena_kun left
[12:30] <lucs> Wut?

[12:34] <lucs> I got that message after trying that command instead of 'zef test .' which just keeps complaining of not finding Foo::Bar::This and Foo::Bar::That, which are present, but not a peep about "invalid json".

[12:34] <lucs> What's going on?

[12:35] <lucs> What json is it talking about?

[12:35] <lucs> The META6.json looked alright to me, but how can I know if it is?

[12:36] <lucs> Then I removed that META6.json file, and got the same "Invalid json" message.

[12:36] * lucs is tired of fighting with this :(

[12:38] *** ctilmes left
[12:38] <lucs> And that 01-basic.t contains only this: use v6.c; use Test; use-ok('Foo::Bar'); done-testing;

[12:46] *** ctilmes joined
[12:49] *** sacomo left
[12:59] <lucs> Let me be clearer.

[13:00] <lucs> In my module directory, I run "zef test t/01-basic.t".

[13:00] <lucs> I get the response "Invalid json? File: t/01-basic.t"

[13:00] <lucs> What the hell does that mean!?

[13:00] <tadzik> looks like some silly exception

[13:00] * lucs thinks of the Seinfeld clip when he says that :)

[13:00] <tadzik> does the same thing happen when you just run the file?

[13:01] <tadzik> (with raku -Ilib or whatever)

[13:02] <lucs> Yes, it runs correctly.

[13:03] <lucs> The silly exception is preventing me from installing the module in my environement :(

[13:04] * lucs should have said: "No. Running the test without zef works correctly."

[13:04] <tadzik> sounds like it's caused by zef itself then. Odd

[13:04] <tadzik> which could mean that the META6.json is wrong? Is it correct json?

[13:04] *** MasterDuke joined
[13:04] <lucs> FWIW, I get the same message when I remove the json file.

[13:05] <lucs> Is it correct json? As far as I can tell, yes.

[13:05] <tadzik> if you remove it then it's still invalid JSON, I suppose :P

[13:05] <lucs> tadzik: :)

[13:05] <tadzik> I wish I could be more helpful, but it's been some years since I wrote a module, and zef wasn't really a thing then :P

[13:05] <lucs> Is the json file missing critical info? Dunno.

[13:05] <tadzik> lucs: do you have your code available somewhere?

[13:05] <lucs> Is this documented somewhere?

[13:06] <tadzik> I'd think so, but I don't know where

[13:06] *** sour joined
[13:06] <sour> yes it is documented

[13:06] <lucs> Not really. It's a pretty big thing, and I don't really feel like golfing it down.

[13:06] * lucs might golf it down if push comes to shove.

[13:07] <tadzik> lucs: does any other zef command work?

[13:07] <sour> https://design.raku.org/S22.html#META6.json

[13:07] <lucs> tadzik: Which commands are you thinking of? (note: zef works well elsewhere)

[13:08] <lucs> sour: Thanks.

[13:08] <sour> np

[13:08] *** sour left
[13:08] *** aborazmeh left
[13:09] <lucs> Hmm... Reading that, looks like "provides" needs to list anything which is "use"d?

[13:09] <lucs> I'll try that and see what happens.

[13:10] <tadzik> lucs: oh, no, it's the other way around

[13:10] <tadzik> if you're writing My::Module, that's what provides needs to contain

[13:10] <lucs> What do you mean?

[13:10] <lucs> Oh,

[13:10] <lucs> Yeah, that's what I had.

[13:11] <tadzik> see in zef itself: https://github.com/ugexe/zef/blob/master/META6.json#L13

[13:11] <lucs> Oh, I get it.

[13:12] <lucs> tadzik: Yeah, that's what I meant, I misspoke kind of.

[13:12] *** sour joined
[13:12] <lucs> I didn't mean _all_ the modules that were used by my module, but the ones that it, right, provides.

[13:13] <sour> I personally use mi6 for project scaffolding, it already provided a META6.json which is easy to modify: https://github.com/skaji/mi6

[13:13] <lucs> sour: That's what I started with (mi6).

[13:13] <lucs> I'll try tweaking that "provides" entry and see if it helps.

[13:14] <sour> üëç

[13:14] *** sour left
[13:15] <Kaiepi> i use mi6 to make new projects atm, but idr like the project template it uses

[13:15] <lucs> idr?

[13:15] <Kaiepi> i don't really

[13:16] <lucs> Ah

[13:16] <Kaiepi> iirc jjmerelo has a template repo for projects he made recently?

[13:20] *** chloekek_ joined
[13:25] <Kaiepi> found it https://github.com/JJ/raku-dist-template

[13:36] *** holli__ joined
[13:37] *** aborazmeh joined
[13:37] *** aborazmeh left
[13:37] *** aborazmeh joined
[13:39] *** MasterDuke left
[13:41] <Geth> ¬¶ ecosystem: khalidelboray++ created pull request #498: Add Text::Slugify

[13:41] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/498

[13:41] <rbt> Is there a recommended set of Raku versions for modules to support? What's the oldest reasonable version in the wild?

[13:43] <lucs> My zef version is 0.8.3, makes sense?

[13:45] <ShimmerFairy> I would just target language version v6.c for maximum compatibility.

[13:47] <lucs> I've golfed it down, get the same error.

[13:48] <lucs> Anyone have time to try it out?: http://scullucs.com/Lucs-Volumes.tgz

[13:49] * lucs is afraid it will turn out to be some stupid stupid mistake he is making...

[13:50] <[Coke]> ShimmerFairy: ... what about d?

[13:50] <[Coke]> Or do you mean "as far as old versions go"?

[13:51] *** chloekek_ left
[13:55] <ShimmerFairy> Sure, but that's not as maximum as the first official version of the language :)

[13:57] *** MasterDuke joined
[14:00] *** molaf left
[14:01] <[Coke]> it is the *current* version of the language, though

[14:10] *** gordonfish joined
[14:12] *** hyperak left
[14:28] *** sena_kun joined
[14:29] *** Altai-man_ left
[14:38] *** MasterDuke left
[14:46] *** stoned75 left
[14:48] *** stoned75 joined
[14:49] <lucs> Ok, ugexe explained that "zef test ÔΩ¢some test fileÔΩ£ is not a valid invocation; a valid invocation is "... ÔΩ¢path to distributionÔΩ£".

[14:56] <lucs> And adding my module supplied .pm6 to the META6.json fixes everything.

[14:56] <tadzik> ha

[14:56] <tadzik> the error message could be better I guess :)

[14:57] <lucs> I guess, yeah.

[14:59] <lucs> Two cases come to mind: no META6.json found in the supposed ÔΩ¢path to distributionÔΩ£, and the supposed ÔΩ¢path to distributionÔΩ£ is not even a directory.

[14:59] *** aborazmeh left
[15:02] <Geth> ¬¶ ecosystem: f7134a2ebd | (Khaled Mohamed Elborey)++ (committed using GitHub Web editor) | META.list

[15:02] <Geth> ¬¶ ecosystem: Add Text::Slugify

[15:02] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/f7134a2ebd

[15:02] <Geth> ¬¶ ecosystem: ccd4f44737 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[15:02] <Geth> ¬¶ ecosystem: Merge pull request #498 from khalidelboray/patch-1

[15:02] <Geth> ¬¶ ecosystem: 

[15:02] <Geth> ¬¶ ecosystem: Add Text::Slugify

[15:02] <Geth> ¬¶ ecosystem: Looks great. Thanks!

[15:02] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/ccd4f44737

[15:05] *** chloekek_ joined
[15:07] <[Coke]> ^^ that module is a fork of another module, and it looks like the forker added a LICENSE that didn't exist in the original

[15:09] *** skids joined
[15:19] * sena_kun wonders if uzl[m] was contacted at all about this, why not merge work instead of forking

[15:20] *** mowcat joined
[15:25] *** hyperak joined
[15:25] *** brtastic left
[15:31] *** molaf joined
[15:32] *** kensanata left
[15:32] *** hyperak is now known as picmyk

[15:38] *** Xliff joined
[15:38] <Xliff> \o

[15:38] <Xliff> What would be the direct way to redirect $*OUT to an external program?

[15:38] <Xliff> Are there examples in the docs?

[15:39] <Xliff> jnthn: Did you see my questions regarding Spreadsheet::XLSX from last night?

[15:42] <jnthn> Xliff: Uh, yes, but I was confused; I didn't see such a module on modules.raku.org?

[15:43] <jnthn> Or did you mean the Perl 5 module?

[15:47] *** rindolf left
[15:53] <[Coke]> Xliff: create a new Proc::Async and use .bind-stdin to bind $*OUT, probably.

[15:57] <jdv79> ctilmes: what ways did you try to do the marshalling?

[15:58] *** domidumont left
[15:58] <jdv79> and/or what were teh bottlenecks, if you noticed

[15:59] *** soursBot left
[16:00] *** soursBot joined
[16:01] <Xliff> jnthn: XLSX::Writer is a raku module. I guess you missed it?

[16:02] <jnthn> Xliff: https://modules.raku.org/search/?q=xlsx%3A%3Awriter is empty

[16:02] <Xliff> [Coke]: That is the path I am currently travelling, however it's not working. Currently trying to bind $*OUT to 'less -RXF'

[16:02] <jnthn> Xliff: Doesn't show up under https://modules.raku.org/search/?q=xlsx either

[16:02] <Xliff> Interesting. Here it is: https://github.com/evanmiller/XLSX-Writer

[16:03] <jnthn> OK, well, if it ain't in the ecosystem...

[16:03] <Xliff> Heh. I figured. OK.

[16:03] <jnthn> Oh, interesting, it's a binding to a C library

[16:03] <Xliff> I've used it. It works well.

[16:04] <jnthn> Nice, but I wonder why it isn't listed...

[16:04] <Xliff> Yeah. I think it was mentioned in a weekly? Weird. Don't know how I found it.

[16:11] <Xliff> Here's my latest attempt at sending output to `less`, but It doesn't pause.

[16:11] <Xliff> https://repl.it/@Xliff/GregariousDarkredNonlinearprogramming

[16:11] <timotimo> but xslx::writer doesn't seem to read xsls files?

[16:11] *** rbt left
[16:11] <Xliff> Thinking maybe I'm still doing something wrong.

[16:11] *** rbt joined
[16:12] <[Coke]> https://modules.raku.org/ should have a note about how to add a module

[16:13] <[Coke]> xls and xlsx are waaay different.

[16:14] <jnthn> timotimo: The name would imply not. :)

[16:15] <timotimo> but the jnmod does

[16:16] *** Geth left
[16:17] <Xliff> So if I Proc::Async.bind($*OUT), is $*OUT still going to the console?

[16:18] *** holli__ left
[16:20] <[Coke]> bind or bind-stdin?

[16:21] <Kaiepi> do really long method signatures in the docs get wrapped automatically?

[16:23] <Xliff> [Coke]: bind-stdin

[16:24] <[Coke]> Kaiepi: not in generated text. maybe by the HTML

[16:24] <[Coke]> (I assume you mean on the doc site)

[16:25] <Kaiepi> yeah

[16:26] <Kaiepi> i'm documenting Attribute.new and tried writing its signature over a few lines, but it wound up getting tested like normal code by xt/examples-compilation.t

[16:26] <[Coke]> https://docs.raku.org/routine/match

[16:26] <Kaiepi> i just have :skip-test on it atm, not sure what the style for this is

[16:26] <[Coke]> yup, looks like it wraps, but not prettily

[16:26] <[Coke]> Kaiepi: there's a tag for that.

[16:27] <Xliff> Has anyone gotten around to documenting Proc::Async::Pipe?

[16:27] *** Altai-man_ joined
[16:27] <[Coke]> https://github.com/Raku/doc/blob/master/writing-docs/EXAMPLES.md#methods

[16:28] *** Geth joined
[16:29] *** sena_kun left
[16:30] <Xliff> [Coke]: ?

[16:32] <Xliff> Looks like I need to dup the file-handle. That would involve .native-descriptor, yes?

[16:34] <[Coke]> Xliff: yes?

[16:34] <[Coke]> (several of my recent sends were to Kaiepi)

[16:36] <Xliff> [Coke]: OK, I'm going to try and use a native call to dup2() to see if I can solve my problem.

[16:36] *** dakkar left
[16:36] <[Coke]> good luck!

[16:37] *** brtastic joined
[16:38] <[Coke]> ... I just increased the font size and everything turned ... greek? for a secon.

[16:38] <[Coke]> (in IRC, not in raku code.)

[16:38] <timotimo> bautiful

[16:38] <timotimo> nature is healing

[16:38] <timotimo> languages thought long dead are coming back

[16:41] <Geth> ¬¶ doc: Kaiepi++ created pull request #3440: Set the TERM environment variable's value in xt/p6doc-blackbox.t

[16:41] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3440

[16:41] *** andrzejku left
[16:45] <Xliff> It seems trying to pipe into perl6 is much easier than trying to pipe from perl6 to an external command.

[16:48] *** MasterDuke joined
[16:50] <Geth> ¬¶ doc: 8aa0fcb177 | (Ben Davies)++ | xt/p6doc-blackbox.t

[16:50] <Geth> ¬¶ doc: Set the TERM environment variable's value in xt/p6doc-blackbox.t

[16:50] <Geth> ¬¶ doc: 

[16:50] <Geth> ¬¶ doc: On OpenBSD, more doesn't like when TERM is unset, causing tests run here

[16:50] <Geth> ¬¶ doc: to fail.

[16:50] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/8aa0fcb177

[16:50] <Geth> ¬¶ doc: a859c57ba2 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | xt/p6doc-blackbox.t

[16:50] <Geth> ¬¶ doc: Merge pull request #3440 from Kaiepi/blackbox-more

[16:50] <[Coke]> If you don't need $*OUT remapped, it's not bad.

[16:50] <Geth> ¬¶ doc: 

[16:50] <Geth> ¬¶ doc: Set the TERM environment variable's value in xt/p6doc-blackbox.t

[16:50] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a859c57ba2

[16:51] <Xliff> [Coke]: How would I get .say to output to the external command, then?

[16:52] <Xliff> But I do see your point.

[16:53] *** KindTwo joined
[16:55] *** KindOne left
[16:57] *** KindTwo is now known as KindOne

[17:13] <Geth> ¬¶ doc: Kaiepi++ created pull request #3441: Revise and add to Attribute's documentation

[17:13] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3441

[17:14] *** soursBot left
[17:18] *** domidumont joined
[17:30] *** soursBot joined
[17:41] *** holli__ joined
[17:42] <Geth> ¬¶ doc: 4eb808199a | (Luis F. Uceta)++ | doc/Language/functions.pod6

[17:42] <Geth> ¬¶ doc: Add few examples for named arguments as adverbs

[17:42] <Geth> ¬¶ doc: 

[17:42] <Geth> ¬¶ doc: This was already documented. The new examples just showcases the use of

[17:42] <Geth> ¬¶ doc: positional arguments with named arguments as adverbs.

[17:42] <Geth> ¬¶ doc: 

[17:42] <Geth> ¬¶ doc: Refs: #3389

[17:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/4eb808199a

[17:42] <linkable6> Link: https://docs.raku.org/language/functions

[17:42] <Geth> ¬¶ doc: 87bccb7c30 | (Luis F. Uceta)++ | doc/Language/functions.pod6

[17:42] <Geth> ¬¶ doc: Make changes as requested

[17:42] <linkable6> DOC#3389 [open]: https://github.com/Raku/doc/issues/3389 [docs][new] Document named arguments as adverbs

[17:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/87bccb7c30

[17:42] <Geth> ¬¶ doc: d24b00a360 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/functions.pod6

[17:42] <Geth> ¬¶ doc: Merge pull request #3438 from uzluisf/master

[17:42] <Geth> ¬¶ doc: 

[17:42] <Geth> ¬¶ doc: Add few examples for named arguments as adverbs

[17:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/d24b00a360

[18:23] *** sauvin left
[18:25] *** hankache joined
[18:28] *** sena_kun joined
[18:30] *** Altai-man_ left
[18:31] *** melezhik joined
[18:33] <melezhik> .tell jnthn RakuDist test fails for Spreadsheet::XLSX

[18:33] <tellable6> melezhik, I'll pass your message to jnthn

[18:33] <melezhik> probably needs to increase the verbosity on zef side

[18:38] *** melezhik left
[18:50] *** rindolf joined
[18:51] *** hankache left
[18:51] *** lucasb joined
[18:57] <[Coke]> https://grants.perlfoundation.org/#raku - if someone has suggestions about possible grants for the Raku community, but can't implement the proposal, please consider adding the suggestion to this page. (link to github at top)

[18:59] *** kensanata joined
[19:25] *** domidumont left
[19:32] *** cpan-raku left
[19:32] *** cpan-raku joined
[19:32] *** cpan-raku left
[19:32] *** cpan-raku joined
[19:42] *** xinming joined
[19:45] *** xinming_ left
[19:52] *** wamba left
[19:57] *** Cabanossi joined
[20:06] *** Black_Ribbon joined
[20:09] <timotimo> rakudo/rakudo on github has a "used by" that says you can install rakudo via npm, and it lists perl6-js-roast-test-runner as a dependent; anything we can do to make it not look as barren?

[20:11] <timotimo> the only mention of "javascript" in the readme is "ALL refers to moar, jim, and javascript backends"

[20:15] *** wamba joined
[20:21] *** sena_kun left
[20:21] *** sena_kun joined
[20:22] *** soursBot left
[20:27] *** Altai-man_ joined
[20:27] *** soursBot joined
[20:28] *** konvertex left
[20:29] *** sena_kun left
[20:32] *** stoned75 left
[20:32] *** melezhik joined
[20:33] <melezhik> I just began one course on algorithms and data structures, all the examples are given in java. I am pretty sure it's possible to find a Raku implimentation 

[20:33] <melezhik> say I need stacks and queues , nothing fancy , just basic things 

[20:34] <melezhik> where can I find  Raku examples ( in any forms -  code and blog posts ) 

[20:34] <melezhik> ?

[20:42] <timotimo> http://rosettacode.org/wiki/Queue/Definition#Raku - sadly, this just uses the fact that you can use an array to behave exactly like a fifo; i assume your datastructures course begins with linked-list based queues and such?

[20:43] <timotimo> http://rosettacode.org/wiki/Stack#Raku - same situation here

[20:43] <melezhik> yeah

[20:43] <timotimo> there's Concurrent::Queue and perhaps also Stack?

[20:43] <timotimo> but they are a bit extra special because lockless and built for multithreaded operation

[20:43] <melezhik> anyway, thanks I will probably take a look

[20:44] <melezhik> http://rosettacode.org/wiki/Queue/Definition#Raku is probably what I looked, thanks!

[20:44] <timotimo> https://modules.raku.org/dist/Concurrent::Stack:cpan:JNTHN/lib/Concurrent/Stack.pm6#L8

[20:45] <melezhik> this one is probable for stack built by linked lists?

[20:46] <timotimo> yes, it uses nodes building up a linked list, and the nodes are read-only

[20:46] *** chloekek_ left
[20:46] <timotimo> that's how it can do its thing safely

[20:47] <cpan-raku> New module released to CPAN! Font::FreeType (0.2.3) by 03WARRINGD

[20:48] <melezhik> I wonder what is _main_ difference from classical queue? it deals with concurrent push/pops? sorry if it's silly question )))

[20:49] <timotimo> probably mostly "the stuff about concurrency looks strange if you're not used to what it does"?

[20:52] *** Maylay left
[20:55] *** Maylay joined
[21:01] *** soursBot left
[21:11] *** rbt left
[21:11] *** rbt joined
[21:12] *** brtastic left
[21:18] *** soursBot joined
[21:19] *** mowotter joined
[21:21] *** melezhik left
[21:22] *** mowcat left
[21:25] *** wamba left
[21:35] *** chloekek_ joined
[21:41] *** skids left
[21:45] *** rindolf left
[21:47] *** devmikey joined
[21:48] *** soursBot left
[21:56] *** m_athias left
[22:28] *** sena_kun joined
[22:29] *** Altai-man_ left
[22:34] *** m_athias joined
[22:35] *** kensanata left
[22:39] *** chloekek_ left
[22:42] *** skids joined
[22:49] *** Sgeo joined
[22:53] *** sena_kun left
[22:55] *** rbt left
[22:55] *** xelxebar_ left
[22:56] *** rbt joined
[22:57] *** xelxebar joined
[23:09] *** pecastro left
[23:18] <Geth> ¬¶ ecosystem: ea1f3b6ead | thundergnat++ (committed using GitHub Web editor) | META.list

[23:18] <Geth> ¬¶ ecosystem: Add SDL2-ttf

[23:18] <Geth> ¬¶ ecosystem: 

[23:18] <Geth> ¬¶ ecosystem: See https://github.com/thundergnat/SDL2-ttf 

[23:18] <Geth> ¬¶ ecosystem: Mostly working. Need to track down tests that fail during CI but not locally.

[23:18] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/ea1f3b6ead

[23:40] *** lucasb left
[23:41] *** mowotter left
[23:57] *** holli__ left
