[00:09] <Geth> ¦ doc/master: 5 commits pushed by Coke++

[00:09] <Geth> ¦ doc/master: 475ce6ecaa | Make script work again

[00:09] <Geth> ¦ doc/master: 0ea63db5cc | Remove unneeded words

[00:09] <Geth> ¦ doc/master: 54917629a4 | allow aspell to run directly on pod-cache

[00:09] <Geth> ¦ doc/master: f67b63c629 | remove debug output, fix verbose handler

[00:09] <Geth> ¦ doc/master: a55d66362f | fix typo/whitespace

[00:09] <Geth> ¦ doc/master: review: https://github.com/Raku/doc/compare/c39e825ce625...a55d66362f91

[00:23] <Geth> ¦ doc: dd20c71e38 | Coke++ | 2 files

[00:23] <Geth> ¦ doc: fix typo

[00:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/dd20c71e38

[00:23] *** camelia joined
[00:49] *** yuplushi left
[01:01] *** tejr left
[01:08] *** m_athias left
[01:08] *** tejr joined
[01:19] *** m_athias joined
[01:24] *** dataangel left
[01:24] <rypervenche> If I want to simply rename keywords, terms, etc. in a slang, should I be copying the tokens/rules verbatim from Grammar.nqp and then making changes to them? Or is a smaller bit a code OK to use?

[01:26] <rypervenche> I've seen that slangs like Slang::Mosdef don't copy the grammar's rules exactly the same. I'm not sure if that's because the grammar is changed, it's not necessary, or it just happens to be ok in this instance.

[01:26] <rypervenche> I should probably ask this in the morning :P

[01:35] *** molaf left
[01:48] *** molaf joined
[02:24] *** Cabanossi left
[02:26] *** Cabanossi joined
[02:29] <codesections> I hope you get an answer – I've been curious about the same thing.  And the (vaguely) related question of how to write a slang that *doesn't* edit an existing grammar, but starts from scratch instead

[02:32] *** rindolf joined
[02:41] *** fooist left
[02:51] <rypervenche> So far I've been pretty successful with lower level things by copying the entire token/rule and then adding a | to get the custom term that I want.

[03:23] *** yuplushi joined
[04:23] *** nativecallable6 left
[04:23] *** shareable6 left
[04:23] *** quotable6 left
[04:23] *** committable6 left
[04:23] *** benchable6 left
[04:23] *** notable6 left
[04:23] *** bloatable6 left
[04:23] *** bisectable6 left
[04:23] *** coverable6 left
[04:23] *** tellable6 left
[04:23] *** reportable6 left
[04:23] *** statisfiable6 left
[04:23] *** sourceable6 left
[04:23] *** linkable6 left
[04:23] *** unicodable6 left
[04:23] *** greppable6 left
[04:23] *** evalable6 left
[04:23] *** releasable6 left
[04:23] *** sourceable6 joined
[04:23] *** bisectable6 joined
[04:23] *** greppable6 joined
[04:26] *** benchable6 joined
[04:26] *** reportable6 joined
[04:26] *** nativecallable6 joined
[04:26] *** unicodable6 joined
[04:26] *** releasable6 joined
[04:26] *** statisfiable6 joined
[04:26] *** notable6 joined
[04:26] *** committable6 joined
[04:26] *** evalable6 joined
[04:26] *** bloatable6 joined
[04:26] *** shareable6 joined
[04:26] *** quotable6 joined
[04:26] *** linkable6 joined
[04:26] *** coverable6 joined
[04:26] *** tellable6 joined
[04:29] *** zacts joined
[04:45] *** Xliff joined
[04:45] <Xliff> Very weird results. Can someone tell me why this doesn't work?

[04:45] <Xliff> https://repl.it/@Xliff/VictoriousUtilizedTrees#main.raku

[04:45] *** andrzejku joined
[04:46] <Xliff> ^^ jnthn timotimo vrurg

[04:50] <rindolf> Xliff: strcat(%c) - percent

[04:51] <Xliff> Rindolf: Ah. Actually making changes, still. Try now.

[04:52] <moritz> [Coke]: yes, autounfudge was my doing, originally

[04:53] *** AlexDaniel left
[04:56] <rindolf> Xliff: ah, why do you wish to call strcat()? it is insecure and inefficient: https://www.joelonsoftware.com/2001/12/11/back-to-basics/

[04:56] <Xliff> Because it is simple and it should work.

[04:57] <Xliff> rindolf: What I'm really trying to do - determine if I can use literals in nativecall defs.

[04:58] <Xliff> The answer looks like a "yes" for the first call.

[04:58] <rindolf> Xliff: i doubt it

[04:58] <Xliff> The subsequent results were surprising.

[04:59] <Xliff> OK, that's the fixed use-case, now.

[04:59] <Xliff> It should work. It doesn't. Why?

[04:59] <Xliff> Even if I replace 'cat' with Str, the results are still the same. 

[05:08] *** gnufr33dom joined
[05:20] *** zacts left
[05:26] *** holli__ joined
[05:41] *** bocaneri joined
[05:58] *** aluaces joined
[06:11] *** andrzejku left
[06:12] *** zacts joined
[06:34] *** cgfbee joined
[06:34] *** gnufr33dom left
[06:40] *** Archenoth left
[06:41] *** Archenoth joined
[06:47] *** Sgeo left
[06:47] *** andrzejku joined
[06:53] *** dolmen joined
[06:58] *** maettu joined
[07:12] *** maettu left
[07:13] *** holli__ left
[07:16] *** Mawile joined
[07:20] *** Archenoth left
[07:22] *** aluaces left
[07:32] *** tejr left
[07:37] *** pecastro joined
[07:38] *** tejr joined
[07:42] *** holli__ joined
[07:43] *** skyl4rk left
[07:46] *** andinus joined
[07:58] *** dakkar joined
[08:00] *** maettu joined
[08:11] *** aluaces joined
[08:11] *** sena_kun joined
[08:20] *** andrzejku left
[08:24] *** holli__ left
[08:31] *** molaf left
[08:31] *** skids left
[08:36] *** ChoppedBacon left
[08:37] <timotimo> Xliff: my first thought is, again, to throw valgrind at it

[08:37] <timotimo> which i'm doing right now

[08:39] *** ChoppedBacon joined
[08:40] <timotimo> Xliff: i assume the final expected string is actually "Baracat", not "Barcat"?

[08:41] <timotimo> frustratingly, turning jit off seems to make it work?

[08:42] <timotimo> but i would assume it has something to do with malloc and free being called in whatever order with whatever arguments

[08:44] *** skyl4rk joined
[08:45] <timotimo> anyway, it's doing dirty things with memory in terms of use-after-free

[08:45] <timotimo> Xliff: ^

[08:56] *** aluaces left
[08:57] *** holli__ joined
[08:58] *** Doc_Holliwould joined
[09:01] *** holli__ left
[09:04] *** cpan-raku left
[09:04] *** cpan-raku joined
[09:04] *** cpan-raku left
[09:04] *** cpan-raku joined
[09:37] *** Black_Ribbon left
[09:43] *** Doc_Holliwould left
[09:44] *** maettu left
[09:44] *** xinming joined
[09:52] *** aluaces joined
[09:55] *** MasterDuke left
[10:01] *** Doc_Holliwould joined
[10:23] *** Noisytoot joined
[10:30] *** Noisytoot left
[10:31] *** Noisytoot joined
[10:38] *** dolmen left
[10:38] *** Altai-man joined
[10:41] *** sena_kun left
[10:54] *** Noisytoot left
[11:02] *** Doc_Holliwould left
[11:17] <codesections> Is there a way to "disassemble" or otherwise view the contents of a .precomp file in a human-readable way?

[11:23] *** fluca1978 joined
[11:30] <fluca1978> I'm sorry I've read somewhere, but I'm not finding it anymore, why is ~~ evaluated on the right side? a ~~b is evaluated as b.ACCEPTS( a )

[11:50] <moritz> fluca1978: there are two reasons for that

[11:50] <moritz> the first is that a symmetrical smartmatching was tried first, and people didn't like how it behaved, at all

[11:51] <moritz> second reason: that's how people think, at least in English. "Is $thing an integer"? becomes $thing ~~ Int

[11:52] <fluca1978> thanks moritz, probably year of java raped my mind: a.equals( b )

[11:52] *** patrickb joined
[11:53] <moritz> fluca1978: then I wish a speedy recovery :D

[11:54] <fluca1978> thanks moritz

[11:54] *** fluca1978 left
[11:56] <codesections> I realize the user already left the channel, but I really hope phrases like "$thing raped my mind" don't become common here.  It's much less inclusive/friendly than how I think of Raku and our community 

[11:57] *** epony left
[11:58] *** epony joined
[11:58] *** patrickb left
[11:59] *** dolmen joined
[11:59] <lizmat> codesections++

[12:02] <moritz> codesections: agreed; it rubbed me the wrong way, but I couldn't really articulate why

[12:03] <timotimo> codesections: after you toss out the first bytes from a precomp file, "moar --dump blah.moar" will give you bytecode

[12:04] <lizmat> timotimo: which first bytes ?

[12:04] <lizmat> and why do we need to toss ourselves ?

[12:04] *** maettu joined
[12:04] <timotimo> it's got the dependency information in it

[12:06] <timotimo> only need to cut stuff until the third \n, or i guess until you find \nMOARVM

[12:06] <timotimo> i agree that moar --dump should perhaps learn to skip these bytes by itself

[12:12] <codesections> timotimo: thanks, exactly what I wanted

[12:16] *** ufobat joined
[12:16] <ufobat> oi :D

[12:36] *** molaf joined
[12:37] *** kent\n joined
[12:40] *** dolmen left
[12:41] *** dolmen joined
[12:41] *** dolmen left
[12:42] *** dolmen joined
[12:55] *** Doc_Holliwould joined
[12:55] <cpan-raku> New module released to CPAN! XML::Actions (0.4.6.2) by 03MARTIMM

[13:03] *** [Sno] left
[13:06] *** __jrjsmrtn__ joined
[13:07] *** _jrjsmrtn left
[13:11] *** kensanata joined
[13:12] *** sno joined
[13:13] *** zacts left
[13:17] *** gnufr33dom joined
[13:23] *** gnufr33dom left
[13:30] *** aborazmeh joined
[13:30] *** aborazmeh left
[13:30] *** aborazmeh joined
[13:33] *** maettu left
[13:42] *** gnufr33dom joined
[13:44] *** aborazmeh left
[13:44] *** Doc_Holliwould left
[13:48] *** maettu joined
[13:51] *** yangzq50 joined
[13:52] *** kent\n left
[13:59] *** kent\n joined
[14:00] <kawaii> Hello, hoping there might be someone else here with Redis experience, and knowledge of sets. I'm working on a wordfilter bot, and want to use Redis as a kind of hot-storage for the wordlist. https://www.irccloud.com/pastebin/66EZY9Ok/

[14:01] <kawaii> But it seems like no matter what I do, the data becomes a flat list.

[14:02] <kawaii> Redis certainly allows set values with spaces in, so I wonder if it's something to do with the Redis::Async module and how it sends the data.

[14:02] <codesections> I know at least a bit about Redis and Raku sets, though I've not yet used Redis with Raku.  Where is the $redis variable in the code you pasted from?

[14:03] <codesections> Redis::Async?

[14:03] <kawaii> codesections: yep, it's simply `my $redis = Redis::Async.new('127.0.0.1:6379');`

[14:04] <Altai-man> kawaii, if it's Redis::Async, you can create an issue, it seems like an unmarshalling "bug" (?). The author is usually pretty responsive.

[14:06] <kawaii> Altai-man: I'll do so, just wanted to make sure I wasn't missing something obvious :)

[14:07] <Altai-man> kawaii, well, this seems like a module-specific issue, it's just that method returns something X and not Y. You can convert that, of course, but this will kinda decrease performance (as in: more things to do - slower).

[14:11] *** MasterDuke joined
[14:12] *** maettu left
[14:18] <codesections> interesting.  I wasn't familiar with eredis, and it doesn't seem to be in many repos.  Interesting choice to build on that instead of upstream redis

[14:18] *** gnufr33dom left
[14:21] <codesections> ... and building eredis from source requires more time than I'm willing to invest in this right now.  Sorry I can't be more help :(

[14:22] <kawaii> codesections: no problem, I raised an issue, and yes it's a little tricky to get the module working compared to most others :P

[14:24] *** gnufr33dom joined
[14:30] <Grinnz> hiredis is the usual lib to work with

[14:30] <Grinnz> never heard of eredis

[14:31] <codesections> Yeah, I hadn't either, which is why I thought it was interesting.  

[14:31] <Grinnz> it does look like it's either quoting your command incorrectly or interpreting the results incorrectly

[14:32] <Grinnz> because you're right, values can contain spaces as well as any other byte

[14:32] <codesections> On the other hand, I *have* rolled my own Redis client with just the functionality I needed before, which is almost shockingly easy

[14:32] <Grinnz> yes, the protocol is quite simple

[14:36] <Geth> ¦ doc: codesections self-assigned Add detailsabout compile-time phasers https://github.com/Raku/doc/issues/3591

[14:39] *** sena_kun joined
[14:41] *** Altai-man left
[14:45] *** zacts joined
[14:46] *** gnufr33dom left
[14:49] *** gnufr33dom joined
[14:50] <kawaii> codesections: somewhat figured it out, if I send $badwords.keys instead of just $badwords it stores it correctly as a set, instead of just storing the whole thing as a string :)

[15:03] <codesections> m: my $s = SetHash[Str].new("peach tea","banana","watermelon","apple"); say $s.keys.WHAT; say $s.keys.map({.WHAT})

[15:03] <camelia> rakudo-moar cc19d3d85: OUTPUT: «(Seq)␤((Str) (Str) (Str) (Str))␤»

[15:05] <codesections> kawaii: that seems pretty odd to me -- $badwords.keys is a Seq of strings.  It's... odd API design to need to send a Seq of Str to get a Set, and not let you send a Set

[15:10] *** maettu joined
[15:14] <kawaii> codesections: yeah seems odd, but what can I say, oh well :) https://github.com/CurtTilmes/perl6-eredis/issues/4

[15:16] *** natrys joined
[15:19] *** maettu left
[15:37] *** hungrydonkey joined
[15:42] *** Doc_Holliwould joined
[15:48] *** zacts left
[15:50] *** skids joined
[15:51] <tbrowder> .tell jjmerelo i still can't see any update to the docs from 2+ weeks ago

[15:51] <tellable6> tbrowder, I'll pass your message to JJMerelo

[15:56] *** gnufr33dom left
[16:08] *** kensanata left
[16:12] *** aluaces left
[16:19] *** robm joined
[16:28] *** Altai-man joined
[16:28] *** Sgeo joined
[16:29] *** sena_kun left
[16:29] *** Altai-man left
[16:31] *** sena_kun joined
[16:31] *** dakkar left
[16:37] *** dolmen left
[16:40] *** hungrydonkey left
[16:40] *** hungryd88 joined
[16:45] *** ufobat_ joined
[16:49] *** VZ joined
[16:49] *** ufobat left
[16:52] <VZ> m: my token t { Init '(' ~ ')' (\S+) }; my regex r { Init '(' ~ ')' (\S+) }; my $str = 'Init(1)'; say &t ~~ $str; say &r ~~ $str;

[16:52] <camelia> rakudo-moar cc19d3d85: OUTPUT: «Regex object coerced to string (please use .gist or .raku to do that)␤False␤False␤  in block <unit> at <tmp> line 1␤Regex object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤»

[16:52] <VZ> m: my token t { Init '(' ~ ')' (\S+) }; my regex r { Init '(' ~ ')' (\S+) }; my $str = 'Init(1)'; say $str ~~ $t; say $str ~~ &r;

[16:52] <camelia> rakudo-moar cc19d3d85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$t' is not declared.  Did you mean '&t'?␤at <tmp>:1␤------> 3S+) }; my $str = 'Init(1)'; say $str ~~ 7⏏5$t; say $str ~~ &r;␤»

[16:52] <VZ> m: my token t { Init '(' ~ ')' (\S+) }; my regex r { Init '(' ~ ')' (\S+) }; my $str = 'Init(1)'; say $str ~~ &t; say $str ~~ &r;

[16:52] <camelia> rakudo-moar cc19d3d85: OUTPUT: «Nil␤｢Init(1)｣␤ 0 => ｢1｣␤»

[16:53] <VZ> hi, could somebody please explain why "~" doesn't seem to work inside tokens, but only inside regexes? I don't see how is it related to :sigspace...

[17:05] *** zacts joined
[17:09] *** zacts left
[17:10] *** Tirifto joined
[17:33] *** rabin joined
[17:40] *** rabin left
[17:42] <rypervenche> So I've been working on a Slang to allow other words to be used in Raku for things like sub, method, class, etc. I was curious if it's possible to add another word to call "say" as both a sub and method.

[17:42] <rypervenche> What I'm currently working on: https://gitlab.com/rypervenche/slang-chinese/-/tree/test

[17:42] *** natrys left
[17:45] <CIAvash> VZ: `\S+` is eating `)`, because token doesn't backtrack. see https://docs.raku.org/language/regexes#Ratchet

[17:45] *** Doc_Holliwould left
[17:53] *** clarjon1 joined
[17:54] *** Altai-man joined
[17:55] *** hungryd88 left
[17:56] *** hungrydonkey joined
[17:56] *** sena_kun left
[18:13] *** natrys joined
[18:24] <VZ> @CIAvash thanks, I thought `~` was somehow smart enough to prevent this from happening... is there some more idiomatic way of doing this than using `(<[\N] - [)]>+)` or something like that?

[18:27] <CIAvash> VZ: not sure, but you can make it non-greedy: `\S+?`

[18:28] <VZ> yes, I guess this is the best thing to do, just in case there are nested parenthesis there -- thanks again!

[18:28] *** Tirifto left
[18:31] <CIAvash> yw

[18:32] *** bocaneri left
[18:34] *** VZ left
[18:35] *** VZ joined
[18:37] <[Coke]> codesections++

[18:38] <codesections> hm?

[18:38] <[Coke]> deep in review

[18:41] *** ufobat_ left
[18:46] <Xliff> .

[18:48] <Xliff> timotimo: So JIT is optimizing things in a way where memory is getting freed before output.

[18:53] <timotimo> yeah, just good ol' timing- and side-effect-sensitive code :)

[18:55] <Xliff> So what would be the best way to make it work?

[19:08] <timotimo> use CArray instead of Str

[19:09] <timotimo> or fiddle around with explicitly-managed?

[19:13] <VZ> oops, actually testing the suggestion above, using `\S+?` doesn't work when there is more than one character inside the parenthesis

[19:14] <VZ> m: my token t { Init '(' ~ ')' (\S+?) }; say 'Init(12)' ~~ &t;

[19:14] <camelia> rakudo-moar e2855aa68: OUTPUT: «Nil␤»

[19:17] <codesections> tbrowder: The other day, you were asking about uses of `zef nuke`.  I just found myself in a situation where running `zef nuke site home` seemed like the best way out

[19:19] <rypervenche> m: my regex t { Init '(' ~ ')' (\S+) }; say 'Init(12)' ~~ &t;

[19:19] <camelia> rakudo-moar e2855aa68: OUTPUT: «｢Init(12)｣␤ 0 => ｢12｣␤»

[19:30] *** rindolf left
[19:34] <CIAvash> VZ: then I think you should either go with the character class you wrote or use regex instead of token. Not sure there is another way.

[19:35] <VZ> yes, I've ended up with

[19:35] <VZ> token non-paren { <[\N] - [)]>+ }

[19:35] <VZ>     token init-option { Init '(' ~ ')' (<.non-paren>) }

[19:36] *** aluaces joined
[19:37] <VZ> to finish with this, I think it might be useful to spell this out in https://docs.raku.org/language/regexes#Tilde_for_nesting_structures as it goes into some much more advanced stuff without mentioning this gotcha, which seems much more basic

[19:45] *** natrys left
[19:45] *** [Sno] joined
[19:46] *** MasterDuke left
[19:47] *** rindolf joined
[19:48] *** sno left
[19:54] *** AlexDaniel joined
[19:54] *** AlexDaniel left
[19:54] *** AlexDaniel joined
[20:03] *** VZ left
[20:13] *** MasterDuke joined
[20:18] *** billN1VUX joined
[20:22] *** rindolf left
[20:28] *** cpan-raku left
[20:40] *** wamba joined
[20:43] *** cpan-raku joined
[20:43] *** cpan-raku left
[20:43] *** cpan-raku joined
[20:50] *** wamba left
[20:55] <tbrowder> codesections: did that blow away your $HOME/.zef stash?

[20:56] <codesections> Yep.  

[20:56] <codesections> Which was the idea – I somehow messed up my upgrade from 2020.06→07 in a way that confused zef about which modules I had installed

[20:56] <tbrowder> i had to do that manually in the early days of zef upon suggestions by ugexe and moritz

[20:56] *** wamba joined
[20:57] <Altai-man> codesections, how do you upgrade?

[20:57] <tbrowder> situation has been much better since then. what do you think was the problem? a rogue module?

[20:58] <codesections> Altai-man: I don't really have a system, which is probably the issue :D  Do you have a recommendation?

[20:59] <tbrowder> i really have enjoyed the rakudo-pkg for debian. painless

[21:00] <tbrowder> and (knock on wood) i have had no problems with it running on multiple  debian hosts

[21:00] <codesections> tbrowder: I think it was just user error.  I started with Rakudo Star, then installed Raku 2020.06 from a binary, then installed 2020.07 from source – and the first couple of those were before I'd gotten serious Raku, so I probably wasn't as careful as I should have been

[21:01] <codesections> Maybe I'll try that out for 2020.08

[21:02] <tbrowder> i used to always install from source. i suggest starting now and forget your old method.

[21:04] <codesections> The only thing is, I *do* still want to have a source version around, so that I can hack on the compiler.  But that _probably_ shouldn't be my main raku executable :D

[21:04] <tbrowder> once it's working: sudo apt update: sudo apt upgrade...

[21:04] <tbrowder> (or aptitude or apt-get)

[21:04] <tbrowder> easy peasy

[21:04] *** wamba left
[21:05] <tbrowder> i do the same thing. rakudo hacking is done in a local dir away from main sys

[21:05] *** wamba joined
[21:06] <tbrowder> if i started over i might use docker

[21:19] *** wamba left
[21:23] *** Doc_Holliwould joined
[21:24] *** bbkr left
[21:25] <Geth> ¦ doc: coke self-unassigned Change from p6doc to rakudoc https://github.com/Raku/doc/issues/3203

[21:26] <Geth> ¦ doc: coke self-assigned Pod::Cache isn't safe for concurrent access https://github.com/Raku/doc/issues/3466

[21:26] *** leont joined
[21:36] *** MasterDuke left
[21:44] *** robm left
[21:44] *** robm joined
[21:45] *** Xliff left
[21:56] *** sena_kun joined
[21:57] *** Altai-man left
[22:05] *** KotH left
[22:05] *** KotH joined
[22:20] <codesections> weekly: https://www.codesections.com/blog/raku-unit-testing-with-conditional-compilation/

[22:20] <notable6> codesections, Noted! (weekly)

[22:21] <codesections> ^^^^ Just made my first blog post about Raku – I'd welcome any thoughts/feedback/criticisms 

[22:21] *** Cabanossi left
[22:22] * lizmat reads

[22:23] *** Cabanossi joined
[22:30] *** sena_kun left
[22:30] *** sena_kun joined
[22:37] *** billN1VUX left
[22:46] *** aluaces left
[22:51] *** billN1VUX joined
[22:53] *** Geth left
[22:53] *** Geth joined
[22:56] <rypervenche> Another dark solarized user :)

[22:57] *** pecastro left
[22:58] *** Tirifto joined
[23:00] <codesections> rypervenche: ha, I've actually moved away from Solarized (and most syntax highlighting in general) for my personal code – these days I use Nordless, which barely even counts as a colorscheme https://emacsthemes.com/themes/nordless-theme.html

[23:00] <codesections> but I figure it's nice to have a bit more color than that in a blog post :)

[23:06] <rypervenche> lizmat: Do you happen to know where I might look to be able to call a sub or method by another name in a slang? I've been able to figure out everything else except for things like "say" and ".new". It hasn't been as straight-forward.

[23:07] *** wamba joined
[23:10] *** Tirifto left
[23:14] *** Doc_Holliwould left
[23:15] *** sena_kun left
[23:53] *** leont left
