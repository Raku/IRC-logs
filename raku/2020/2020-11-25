[00:03] *** melezhik left
[00:05] *** BenGoldberg left
[00:10] <JJAtria[m]> jmerelo: I should have some version of my advent post ready for some reviews tomorrow or the day after, although I'm thinking about changing the topic to make it more accessible for beginners

[00:10] <tellable6> JJAtria[m], I'll pass your message to jmerelo

[00:25] <Geth_> ¬¶ ecosystem: JRaspass++ created pull request #567: Fix some 404s in META.list

[00:25] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/567

[00:37] *** mowcat left
[01:37] *** coverable6 left
[01:37] *** greppable6 left
[01:37] *** statisfiable6 left
[01:37] *** quotable6 left
[01:37] *** benchable6 left
[01:37] *** unicodable6 left
[01:37] *** committable6 left
[01:37] *** tellable6 left
[01:37] *** notable6 left
[01:37] *** sourceable6 left
[01:37] *** squashable6 left
[01:37] *** bisectable6 left
[01:37] *** nativecallable6 left
[01:37] *** shareable6 left
[01:37] *** linkable6 left
[01:37] *** evalable6 left
[01:37] *** bloatable6 left
[01:37] *** releasable6 left
[01:37] *** benchable6 joined
[01:38] *** coverable6 joined
[01:38] *** sourceable6 joined
[01:38] *** unicodable6 joined
[01:38] *** bloatable6 joined
[01:38] *** quotable6 joined
[01:38] *** evalable6 joined
[01:38] *** statisfiable6 joined
[01:38] *** tellable6 joined
[01:39] *** nativecallable6 joined
[01:39] *** greppable6 joined
[01:39] *** committable6 joined
[01:39] *** squashable6 joined
[01:39] *** shareable6 joined
[01:40] *** linkable6 joined
[01:40] *** notable6 joined
[01:40] *** bisectable6 joined
[01:40] *** releasable6 joined
[02:05] *** maggotbrain joined
[02:35] *** BenGoldberg joined
[02:35] *** wbn joined
[02:53] *** marcusr left
[02:53] *** marcusr joined
[03:00] *** Ben_Goldberg joined
[03:00] *** BenGoldberg left
[03:00] *** Ben_Goldberg is now known as BenGoldberg

[03:27] *** squashable6 left
[03:28] *** squashable6 joined
[04:13] *** Kaeipi joined
[04:16] *** Kaiepi left
[04:30] *** cpan-raku left
[04:30] *** cpan-raku joined
[04:30] *** cpan-raku left
[04:30] *** cpan-raku joined
[04:40] *** maggotbrain left
[05:34] *** parabolize left
[06:19] *** finsternis left
[06:57] *** epony left
[07:01] *** BenGoldberg left
[07:09] *** sjm_uk joined
[07:22] *** Sgeo left
[07:30] *** sena_kun joined
[07:42] *** kensanata joined
[07:50] *** domidumont joined
[07:52] *** skids left
[07:55] *** ufobat_ joined
[08:11] *** Altai-man joined
[08:12] *** abraxxa left
[08:13] *** sena_kun left
[08:14] *** ufobat__ joined
[08:15] *** abraxxa1 joined
[08:18] *** ufobat_ left
[08:21] *** dotdotdot left
[08:21] *** dotdotdot joined
[08:26] *** epony joined
[08:27] *** kensanata left
[08:38] *** dakkar joined
[08:39] *** wamba joined
[08:45] *** hythm joined
[08:48] <hythm> what is the difference between `use MyModule` in the top of the file and `use MyModule` inside for example a sub? does the later mean the MyModule will only be loaded and used if the sub was called? 

[08:52] <hythm> or the cost of using the module will exist in both cases

[09:09] <JJAtria[m]> hythm: AFAIK, the module will be loaded in both cases (it's done at compile time), but the scope of the module you import will be different

[09:10] <JJAtria[m]> So if the module exports a sub, for example, that sub will only be visible in the scope you `use`d it

[09:19] <hythm> JJAtria[m] thanks

[09:23] <JJAtria[m]> hythm: Maybe out of scope of your question, but if you want to conditionally load a module at runtime you can use require: https://docs.raku.org/language/modules#require

[09:24] <hythm> noted

[09:30] *** dakkar left
[09:32] *** dakkar joined
[09:39] *** wamba left
[09:43] *** aborazmeh joined
[09:43] *** aborazmeh left
[09:43] *** aborazmeh joined
[09:43] *** stoned75 joined
[09:52] *** BenGoldberg joined
[09:54] <lizmat> hythm: there's also the "if" module: https://github.com/FROGGS/p6-if  

[09:58] <hythm> Thanks lizmat

[10:17] *** hythm left
[10:22] *** hythm joined
[10:26] *** BenGoldberg left
[10:29] <lizmat> Files=1345, Tests=117140, 233 wallclock secs (30.39 usr  8.58 sys + 3199.41 cusr 311.12 csys = 3549.50 CPU)

[10:45] *** leont joined
[11:10] *** tejr left
[11:10] *** aborazmeh left
[11:10] *** tejr joined
[11:32] *** wamba joined
[12:11] *** vZS1 joined
[12:12] *** sena_kun joined
[12:14] *** Altai-man left
[12:14] *** xinming left
[12:14] *** xinming joined
[12:34] <tbrowder> hi, all

[12:36] <tbrowder> is there any way to have a raku prog include other code fragments during compile time (not in a module)?

[12:41] *** xinming left
[12:42] *** xinming joined
[13:16] <Geth_> ¬¶ advent: samebchase++ created pull request #71: Update authors.md

[13:16] <Geth_> ¬¶ advent: review: https://github.com/Raku/advent/pull/71

[13:17] *** BenGoldberg joined
[13:24] *** mtj_ joined
[13:32] *** raku-bridge left
[13:32] *** raku-bridge joined
[13:32] *** raku-bridge left
[13:32] *** raku-bridge joined
[13:36] *** abraxxa1 left
[13:38] *** vZS1 left
[13:41] *** vZS1 joined
[13:42] *** abraxxa joined
[13:51] *** BenGoldberg left
[13:58] <El_Che> tbrowder: you want to reimplement COBOL?

[13:59] <[Coke]> like a shell .include?

[14:00] <[Coke]> "other file".IO.slurp.EVAL

[14:06] *** hythm left
[14:10] <xinming> m: class A { has $.a; multi method t ($self where self.a == 5:) { 5.say; }; multi method t ($self where self.a == 3:) { 3.say; }; }; A.new(:a(5)).t;

[14:10] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´5‚ê§¬ª

[14:10] <tbrowder> he, he, you can have a steady job with COBOL!

[14:10] <xinming> For this example, Is there a way to make the     `multi method ($self where self.a == 5:) { };` part shorter?

[14:10] <tbrowder> yes, like a shell .include

[14:10] <tbrowder> ah,

[14:11] <[Coke]> you can use the EVAL snippet above, but I would recommend making a utility module with some exports instead.

[14:12] *** morayj joined
[14:12] <tbrowder> [Coke]: ok, good, but isn't that dangerous in the wild?

[14:13] <xinming> m: class A { has $.a; multi method t ($self where $!a == 5:) { 5.say; }; multi method t ($self where $!a == 3:) { 3.say; }; }; A.new(:a(5)).t;

[14:13] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´5‚ê§¬ª

[14:13] <xinming> This is the shortest I can make, I just now think, that we can only have this now

[14:14] <[Coke]> tbrowder: yes. why can't you use a module?

[14:14] <tbrowder> thnx, folks, and happy thanksgiving for those that celebrate it tomorrow!

[14:15] <[Coke]> (y)

[14:15] <tbrowder> [Coke]: i'm mainly think of an include use during development...

[14:15] <tbrowder> not for public code

[14:16] <tbrowder> yr method should work fine

[14:17] <tbrowder> bye

[14:17] <[Coke]> ~~

[14:21] *** vZS1 left
[14:23] *** Black_Ribbon left
[14:26] *** vZS1 joined
[14:26] <Geth_> ¬¶ advent: 5f24410047 | (Samuel Chase)++ (committed using GitHub Web editor) | raku-advent-2020/authors.md

[14:26] <Geth_> ¬¶ advent: Update authors.md

[14:26] <Geth_> ¬¶ advent: 

[14:26] <Geth_> ¬¶ advent: Adding myself so that a slot can be reserved for me.

[14:26] <Geth_> ¬¶ advent: review: https://github.com/Raku/advent/commit/5f24410047

[14:26] <Geth_> ¬¶ advent: edfd6aacca | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | raku-advent-2020/authors.md

[14:26] <Geth_> ¬¶ advent: Merge pull request #71 from samebchase/patch-1

[14:26] <Geth_> ¬¶ advent: 

[14:27] <Geth_> ¬¶ advent: Update authors.md

[14:27] <Geth_> ¬¶ advent: review: https://github.com/Raku/advent/commit/edfd6aacca

[14:39] *** Sgeo joined
[14:40] *** vZS1 left
[14:43] *** MasterDuke joined
[14:45] *** Xliff joined
[14:48] *** wamba left
[14:48] <Xliff> \o

[14:49] <Xliff> If I want to overload += can I use infix:<+=> or do I need to overload infix:<+> ?

[14:49] <Xliff> The docs aren't exactly clear on that.

[14:54] *** lucasb joined
[14:56] <tobs> Xliff: do you mean use infix:<x> ($x is rw, $y) { ‚Ä¶ } if you say "overload += [through] infix:<+>"? That does not work.

[14:57] <tobs> apparently overloading infix:<+=> works and overloading infix:<+> also affects +=

[14:58] <tobs> but it would be nice to document if assignment operators are meant to be overridden separately from their basic operator.

[14:59] *** melezhik joined
[15:04] *** melezhik left
[15:04] *** Xliff left
[15:13] <cpan-raku> New module released to CPAN! Gnome::GObject (0.16.14) by 03MARTIMM

[15:17] *** brtastic1 joined
[15:18] *** aborazmeh joined
[15:18] *** aborazmeh left
[15:18] *** aborazmeh joined
[15:20] *** ben_ left
[15:21] *** brtastic1 is now known as brtastic

[15:21] *** wamba joined
[15:21] *** rindolf joined
[15:24] *** rir joined
[15:26] *** brtastic left
[15:33] *** parabolize joined
[15:37] *** ben_ joined
[15:40] <guifa> Xliff & tobs: I think technically the assignment operators are meta operators, but probably += is specialcased allowing you to override it

[15:43] *** grep0r joined
[15:43] *** grep0r left
[15:47] *** patrickb joined
[15:56] <guifa> At the moment there‚Äôs no way to define metaoperators, though, and I‚Äôm not sure if there will be, although obviously there might be times when a combinatino metaop+op could be made more efficient some how

[15:58] *** bdju left
[16:01] *** __jrjsmrtn__ joined
[16:03] *** _jrjsmrtn left
[16:03] <Geth_> ¬¶ ecosystem: littlebenlittle++ created pull request #568: Add META6::Query and FileSystem::Helpers to ecosystem

[16:03] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/568

[16:04] *** bdju joined
[16:11] *** Altai-man joined
[16:14] *** sena_kun left
[16:14] *** wamba left
[16:17] *** raku-bridge left
[16:17] *** raku-bridge joined
[16:17] *** raku-bridge left
[16:17] *** raku-bridge joined
[16:20] *** domidumont left
[16:24] *** domidumont joined
[16:31] *** aborazmeh left
[16:32] *** natrys joined
[16:42] *** BenGoldberg joined
[16:44] *** kensanata joined
[16:54] *** patrickb left
[16:55] <Geth_> ¬¶ ecosystem: f9b0aeb1f3 | (Ben Little)++ (committed using GitHub Web editor) | META.list

[16:55] <Geth_> ¬¶ ecosystem: Add META6::Query and FileSystem::Helpers to ecosystem

[16:55] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/f9b0aeb1f3

[16:55] <Geth_> ¬¶ ecosystem: 82785a5e13 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[16:55] <Geth_> ¬¶ ecosystem: Merge pull request #568 from littlebenlittle/patch-2

[16:55] <Geth_> ¬¶ ecosystem: 

[16:55] <Geth_> ¬¶ ecosystem: Add META6::Query and FileSystem::Helpers to ecosystem

[16:55] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/82785a5e13

[17:01] *** veesh_ joined
[17:02] *** veesh left
[17:03] *** veesh_ is now known as veesh

[17:10] *** veesh left
[17:10] *** aluaces left
[17:11] *** veesh joined
[17:16] *** BenGoldberg left
[17:21] *** domidumont left
[17:26] *** guifa left
[17:35] *** dakkar left
[17:50] *** skids joined
[18:10] *** aluaces joined
[18:13] *** leont left
[18:13] *** leont joined
[18:25] *** aborazmeh joined
[18:25] *** aborazmeh left
[18:25] *** aborazmeh joined
[18:41] *** grumble left
[18:41] *** kensanata left
[18:43] *** xinming left
[18:43] *** grumble joined
[18:43] *** xinming joined
[18:47] <cpan-raku> New module released to CPAN! Gnome::Gtk3 (0.34.1) by 03MARTIMM

[18:49] *** mowcat joined
[18:58] *** morayj left
[18:59] *** morayj joined
[19:04] *** sjm left
[19:07] *** sjm joined
[19:11] *** rir left
[19:12] *** cpan-raku left
[19:15] *** xinming left
[19:15] *** xinming joined
[19:16] *** cpan-raku joined
[19:16] *** cpan-raku left
[19:16] *** cpan-raku joined
[19:18] *** morayj left
[19:19] *** Xliff joined
[19:23] <[Coke]> TIL I learned about mutation testing.

[19:24] <[Coke]> (you mutate your code slightly, and if your unit tests still pass, that's bad, way to score your tests themselves)

[19:24] *** sjm left
[19:24] *** finsternis joined
[19:24] *** sjm joined
[19:27] *** ape666 joined
[19:30] <perryprog> Whaaaaat. TIL as well: https://en.wikipedia.org/wiki/Mutation_testing

[19:31] <perryprog> Oh my gosh, the conditions for a mutation test are based on the "RIP model"

[19:35] *** sjm_uk left
[19:43] *** xinming left
[19:45] *** xinming joined
[19:46] *** wamba joined
[19:59] *** kensanata joined
[20:04] *** Black_Ribbon joined
[20:05] <sjn> I have a question about that pull-request questionnaire for the ecosystem repo: https://github.com/Raku/ecosystem/blob/master/PULL_REQUEST_TEMPLATE.md

[20:05] *** xinming left
[20:06] <sjn> Is there a reason for chosing to use the spdx.org/licenses list, rather than OSI's list?

[20:06] *** xinming joined
[20:07] *** BenGoldberg joined
[20:07] <sjn> samcv++ seems to be the original committer of that file.

[20:08] *** Doc_Holliwood joined
[20:08] <Doc_Holliwood> m: say [*] ()

[20:08] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´1‚ê§¬ª

[20:08] <Doc_Holliwood> why is this 1?

[20:09] <samcv> sjn, the reason for using spdx is just spdx being a common and nice way to unambiguously refer to a specific license. spdx is just more widely used

[20:10] <samcv> Though. I don't think OSI has the same thing where they set specific identifiers for specific licenses? I thought they mostly reviewed licenses and gave them a rating of if it fits their definition of open source. Or am i misremembering

[20:10] <sjn> ok, so there wasn't a specific goal behind choosing this list?

[20:11] <sjn> I mostly wondered about this because of the (rather understandable) noises that have been made around license prolifcation in different open source communities

[20:12] *** sena_kun joined
[20:12] <samcv> the specific goal is for the license field to be computer and user readable. It's not saying that we want you to pick one of the spdx list. SPDX doesn't approve any licenses or recommend anything. It just catalogues them

[20:12] <sjn> right

[20:12] <samcv> I would personlly recommend choosing an OSI license. But use the SPDX identifier

[20:12] <sjn> I think it would be cool if could offer a short-list of recommended licenses

[20:13] *** Altai-man left
[20:14] <samcv> Yeah. I think it could be more clear that it's the identifier matching the format that matters, and nothing else. And a link to recommended ones could be nice

[20:14] <kawaii> Raku on Windows is strange... https://www.irccloud.com/pastebin/E5AjGxit/

[20:14] <samcv> sjn, though. that list it links to does show which ones are FSF or OSI approved. which is nice

[20:15] <sjn> yes, that is true

[20:15] <sjn> but it also offers a "license overload"

[20:16] <sjn> ...and gives an author the option to "cement" the proliferation

[20:16] <sjn> btw, Bruce Perens has offered some interesting arguments and thoughts in this regard. Here's one of his talks about the topic: https://www.youtube.com/watch?v=vTsc1m78BUk

[20:17] <samcv> Yeah. Maybe it should be phrased as: "My project has a license and the its SPDX identifier is in the "license" field"

[20:17] <samcv> And then say "If you need to choose a license, we recommend XYZ"

[20:17] <sjn> Not sure if his solution is awesome, but there are some really thought-provoking ideas he's presenting there

[20:19] <sjn> Perens' minimal list of license recommendations is on https://licenseuse.org/

[20:22] <sjn> As for having a canonical list of identifiers, I'm all for that. :-)

[20:23] <samcv> Yeah. The goal was so a package manager could have an allowed license list, and only install with those or prompt for a new license. Or we could easily show or sort projects by license in a website interface etc

[20:23] <sjn> mm

[20:24] <samcv> It also makes sure the projects *have* licenses. As having unlicensed projects would not be great from a legal standpoint

[20:25] <sjn> Heh. Understatement of the day. :-D

[20:26] <sjn> I'd say it's not even open source if it doesn't have a license, and therefore should be published through open source distribution channels

[20:27] <samcv> then there's a tricky business of whether the META file needs a license

[20:27] <sjn> oh? what's tricky about that?

[20:28] <samcv> Well. If the META file doesn't have a license on the data itself, we could be violating something by just distributing it

[20:29] <samcv> Ideally to submit the project we would make you agree to a specific license just for the META file, so it's clear the exact licesne that data is under, and has no restrictions on it

[20:30] <sjn> isn't this a question about defenitions and scope? e.g. one could easily specify that a LICENSE file applies to the whole project, except where stated otherwise

[20:31] <sjn> LICENSE file, or equivalent field in the META file

[20:31] <samcv> Yeah. This is mostly a concern due to the large number of licenses one would have to review each one to be sure you can distribute it

[20:31] *** sena_kun left
[20:32] <samcv> Or an unlicensed project

[20:33] <sjn> Requiring a valid license before being allowed to upload an update ought to be a way of improving this situation over time, methinks

[20:34] *** patrickb joined
[20:40] *** morayj joined
[20:42] *** BenGoldberg left
[20:51] *** xinming left
[20:52] *** xinming joined
[21:06] *** xinming left
[21:07] *** xinming joined
[21:43] *** ufobat__ left
[21:53] *** Geth_ left
[21:55] *** Geth joined
[21:55] *** aborazmeh left
[22:03] *** aborazmeh joined
[22:03] *** aborazmeh left
[22:03] *** aborazmeh joined
[22:06] *** morayj left
[22:15] *** kensanata left
[22:20] <[Coke]> as someone on the commercial side, I'm very glad to have easily identifiable license and copyright.

[22:20] *** MasterDuke left
[22:20] <[Coke]> I also wish there was a "support" +/or donation field that was common.

[22:21] <CAPTCHA_REQUIRED> Is that fair to noncommercial developers?

[22:21] <[Coke]> (that is: if we want to get paid support on something, how would we go about it, and barring that, if we got approval to throw some bucks as a thank you...)

[22:21] <[Coke]> Having an easily identifiable license?

[22:21] <kawaii> I don't see why not, GitHub allow you to upload a .github/funding.yaml file too, to provide funding info for your project.

[22:22] <[Coke]> kawaii++

[22:22] <kawaii> But I don't agree with enforcing a license, it's not required to simply publish a module in the public domain to also provide a software licence, the FSF have some info about this published somewhere. 

[22:23] <timotimo> have your authoring tool generate github's own funding thingie off of the META6.json

[22:23] <kawaii> https://directory.fsf.org/wiki/License:PublicDomain

[22:23] <[Coke]> Sure, you don't need to add a license, but then many people will be unable to use your code.

[22:23] <timotimo> does anybody take meticulous care that you're using json only for good, not evil?

[22:23] <timotimo> was that json?

[22:24] <kawaii> Aren't you the resident JSON expert?

[22:24] <timotimo> reluctantly, LOL

[22:25] <timotimo> http://www.json.org/license.html

[22:25] <timotimo> `The Software shall be used for Good, not Evil.`

[22:25] <kawaii> I'm waiting for the premium release of JSON::Fast, or JSON::Turbo as we're calling it

[22:25] <timotimo> i should call it like a combustion engine

[22:25] <timotimo> what recognizable names of combustion engines are there ...

[22:25] <timotimo> oh, of course! JSON::v8!

[22:25] <timotimo> absolutely foolproof

[22:25] <tadzik> :D

[22:26] <tadzik> you can get more confusing by naming it like the german automakers do with specific fuel injection technologies

[22:26] <tadzik> like JSON::CGI

[22:26] <timotimo> hahaha

[22:27] <timotimo> make something up so i can name it JSON::NOSJ

[22:27] <CAPTCHA_REQUIRED> I don't agree that a license should be mandatory

[22:28] <CAPTCHA_REQUIRED> I realize that many people will be able to use the code without a license

[22:28] <CAPTCHA_REQUIRED> However, not having a license is effectively a cc0 non-commercial license without the future-tie in clause

[22:28] <timotimo> you're opening yourself up for litigation, but i guess if you're not a company you can just hope you'll never be found?

[22:28] *** natrys left
[22:28] <CAPTCHA_REQUIRED> So you can decide at a later point what license works best

[22:28] <timotimo> wait what

[22:29] <kawaii> I think that tools such as zef should warn users that whatever module they're installing doesn't come with a license, and it's caveat emptor at that point

[22:29] <CAPTCHA_REQUIRED> I do don't see how your opening yourself up, but I do see how commercial entities would be unable to use something without a license

[22:29] <CAPTCHA_REQUIRED> I am not a commercial entity I am an individual, and I am not representing a commercial entity right now

[22:29] <timotimo> if you don't have a license to use a thing and you use it you're commiting Internet Software Crime

[22:30] <CAPTCHA_REQUIRED> Maybe but intellectual property laws are not exactly based on reality

[22:30] <kawaii> Largely based on jurisdiction I expect timotimo 

[22:30] <timotimo> not sure this is IP law

[22:30] <CAPTCHA_REQUIRED> If you mean licensing

[22:31] <CAPTCHA_REQUIRED> Software isn't tangible

[22:32] <timotimo> what jurisdiction will be responsible for ACME::Kitty:auth<MisterMcDoesn'tGiveYouTheirLegalName>

[22:33] <CAPTCHA_REQUIRED> Probably whatever jurisdiction a copy of that library currently exists in at the moment

[22:34] <JJAtria[m]> What is the likely problem if zef stops and asks for github username during installation?

[22:34] <JJAtria[m]> I'm guessing some URL is pointing at the wrong thing

[22:34] <JJAtria[m]> zef install Web, if you want to try it at home

[22:34] <kawaii> I'll reiterate that duty of checking the software has a suitable license falls to whomever is using it, not publishing it, we don't prosecute homeowners for being burgled, we prosecute the thieves. Same applies to 'no trespassing' signs around forbidden areas.  

[22:36] <timotimo> JJAtria[m]: git clone may ask for username/password if you've got a https://github.com/... URL

[22:36] <timotimo> git pull as well

[22:37] <kawaii> git clone asks for the username if you use the http scheme for pushing, not cloning

[22:37] <kawaii> if you use the ssh style clone/push/pull you need to be authenticated anyway

[22:38] <JJAtria[m]> Hm, but zef info Web reports the source-url as git://... so it must be something else

[22:38] <JJAtria[m]> Time to dive into zef I guess

[22:38] <[Coke]> If we need legal advice on licensing, btw, TPF is working with a lawyer at the moment. I'd recommend asking them to get their 2¬¢

[22:39] *** xinming left
[22:40] <[Coke]> I think it's reasonable to have requirements of modules to be in the index (whether or not this is one of them) - nothing is stopping developers from releasing whatever they want on their own, of course.

[22:41] *** xinming joined
[22:42] *** ape666 left
[22:43] *** wamba left
[22:47] *** guifa2 joined
[22:50] <Geth> ¬¶ doc: JustThisGuyAZ++ created pull request #3708: Update testing.pod6

[22:50] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3708

[23:01] <JJAtria[m]> Welp, I eventually spotted the typo: https://github.com/raku-community-modules/Web-App/pull/24/files

[23:01] *** mowcat left
[23:06] *** patrickb left
[23:11] *** rindolf left
[23:29] *** aborazmeh left
[23:30] *** xinming left
[23:32] *** aborazmeh joined
[23:32] *** aborazmeh left
[23:32] *** aborazmeh joined
[23:32] *** xinming joined
[23:33] *** BenGoldberg joined
[23:52] *** ape666 joined
[23:54] *** aborazmeh left
