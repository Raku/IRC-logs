[00:13] *** sena_kun joined
[00:15] *** Altai-man_ left
[00:22] *** SQuoll left
[00:26] *** pecastro left
[00:51] *** wildtrees left
[00:58] *** markoong left
[01:09] *** aborazmeh left
[01:21] *** toddr joined
[01:21] *** SQuoll joined
[01:27] *** SQuoll left
[01:27] *** SQuoll joined
[01:32] *** SQuoll left
[02:12] *** Altai-man_ joined
[02:15] *** sena_kun left
[02:18] *** SQuoll joined
[02:24] *** wtwt5237 joined
[02:25] *** wtwt5237 left
[02:29] *** fabio joined
[02:29] <fabio> please

[02:29] *** fabio is now known as Guest66049

[02:29] <Guest66049> i want to know

[02:29] <Guest66049> about programming with perl 6

[02:29] <Guest66049> and apache

[02:30] <Guest66049> like mod_perl

[02:32] <Guest66049> ?

[02:36] *** fhpedro joined
[02:37] <fhpedro> is possible to use raku and apache httpd server?

[02:43] *** Guest66049 left
[02:56] *** lichtkind left
[02:58] <mst> fhpedro: raku can talk http itself

[02:59] <mst> fhpedro: apache can use mod_proxy to talk to it

[02:59] <mst> fhpedro: mod_perl has been a legacy technology for 15 years now and is not relevant to new code.

[03:07] <mst> fhpedro: please talk to me in #raky

[03:08] <fhpedro> will I handle http requests with a pattern in raku?

[03:08] <fhpedro> like *.do

[03:08] <fhpedro> in the URL

[03:08] <fhpedro> and let apache handle the remaining

[03:08] <fhpedro> ?

[03:35] *** holyghost left
[03:37] *** fhpedro left
[03:37] *** ensamvarg joined
[04:13] *** sena_kun joined
[04:15] *** Altai-man_ left
[05:15] *** releasable6 left
[05:15] *** sourceable6 left
[05:15] *** statisfiable6 left
[05:15] *** benchable6 left
[05:15] *** coverable6 left
[05:15] *** greppable6 left
[05:15] *** bisectable6 left
[05:15] *** linkable6 left
[05:15] *** bloatable6 left
[05:15] *** committable6 left
[05:15] *** nativecallable6 left
[05:15] *** tellable6 left
[05:15] *** quotable6 left
[05:15] *** notable6 left
[05:15] *** reportable6 left
[05:15] *** squashable6 left
[05:15] *** shareable6 left
[05:15] *** unicodable6 left
[05:15] *** evalable6 left
[05:15] *** coverable6 joined
[05:16] *** linkable6 joined
[05:16] *** peri404 joined
[05:16] *** sourceable6 joined
[05:16] *** notable6 joined
[05:16] *** committable6 joined
[05:16] *** greppable6 joined
[05:16] *** benchable6 joined
[05:17] *** tellable6 joined
[05:17] *** shareable6 joined
[05:17] *** reportable6 joined
[05:17] *** bisectable6 joined
[05:17] *** evalable6 joined
[05:17] *** unicodable6 joined
[05:17] *** nativecallable6 joined
[05:18] *** quotable6 joined
[05:18] *** statisfiable6 joined
[05:18] *** bloatable6 joined
[05:18] *** squashable6 joined
[05:18] *** releasable6 joined
[05:25] *** Sgeo left
[05:27] *** Kaeipi left
[05:28] *** Kaeipi joined
[05:30] *** holyghost joined
[05:31] *** Kaeipi left
[05:31] *** Kaeipi joined
[05:36] *** sauvin joined
[05:42] *** regreg joined
[06:04] *** wamba joined
[06:05] *** Kaeipi left
[06:05] *** Kaiepi joined
[06:07] *** Actualeyes left
[06:08] *** jmerelo joined
[06:13] *** Altai-man_ joined
[06:15] *** sena_kun left
[06:21] *** Sgeo joined
[06:35] *** xinming_ left
[06:40] *** xinming_ joined
[06:43] *** stoned75 left
[06:50] *** aindilis left
[06:53] *** aindilis joined
[07:01] *** SQuoll left
[07:08] *** SQuoll joined
[07:11] *** rindolf joined
[07:54] *** ensamvarg left
[07:58] *** theovdh joined
[08:14] *** sena_kun joined
[08:15] *** Altai-man_ left
[08:20] *** xelxebar_ left
[08:36] *** dakkar joined
[08:37] *** dakkar left
[08:37] <SmokeMachine> one question about supplies: if the emitter spends the time of each tapped function and each tapped function is “atomic” and we only run 1 whenever at any time, shouldn’t it be a deadlock?

[08:37] *** dakkar joined
[08:37] <SmokeMachine> m: my Supplier $s .= new; Promise.in(1).then: { $s.emit: 1 }; react whenever $s.Supply { .say; $s.emit: $_ + 1 if $_ < 10 }

[08:38] <SmokeMachine> m: my Supplier $s .= new; Promise.in(1).then: { $s.emit: 1 }; react whenever $s.Supply { .say; $s.emit: $_ + 1; done if $_ >= 10 }

[08:38] <SmokeMachine> evalable6: my Supplier $s .= new; Promise.in(1).then: { $s.emit: 1 }; react whenever $s.Supply { .say; $s.emit: $_ + 1; done if $_ >= 10 }

[08:38] <evalable6> SmokeMachine, rakudo-moar 355b520bf: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[08:41] *** rindolf left
[08:42] *** camelia left
[08:44] *** theovdh left
[08:51] *** sno left
[08:51] *** Kaiepi left
[08:52] *** Kaiepi joined
[08:58] *** xelxebar joined
[09:02] *** wamba left
[09:08] *** chloekek joined
[09:08] *** pecastro joined
[09:16] *** rindolf joined
[09:21] *** sno joined
[09:40] *** Black_Ribbon left
[09:53] *** holyghost left
[09:57] *** theovdh joined
[10:13] *** Altai-man_ joined
[10:14] *** rindolf left
[10:15] *** sena_kun left
[10:15] *** wamba joined
[10:17] *** ensamvarg joined
[10:20] *** __jrjsmrtn__ left
[10:20] *** _jrjsmrtn joined
[10:20] <kawaii> `MoarVM panic: Internal error: Unwound entire stack and missed handler`

[10:20] <kawaii> what? :D

[10:22] *** lichtkind joined
[10:36] *** finanalyst left
[10:37] *** chloekek left
[10:40] *** finanalyst joined
[10:44] *** markoong joined
[10:50] *** Actualeyes joined
[10:53] *** rindolf joined
[10:55] *** markong joined
[10:59] *** markoong left
[11:15] <Altreus> Did someone once tell me to always use a react block instead of .tap unless I really mean it?

[11:15] <Altreus> Cos I'm having troubles that might be solved by not doing things I don't fully understand

[11:15] <Altreus> But I don't fully understand any of it :D

[11:18] <Altreus> never mind, it's already a react block

[11:20] *** rindolf left
[11:21] *** rindolf joined
[11:31] *** MasterDuke left
[11:45] *** camelia joined
[11:46] *** markoong joined
[11:46] <camelia> rakudo-moar 355b520bf: OUTPUT: «(timeout)1␤»

[11:46] <camelia> rakudo-moar 355b520bf: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[11:46] *** markong left
[11:51] *** lichtkind_ joined
[11:54] *** lichtkind left
[12:04] *** mowcat joined
[12:13] *** sena_kun joined
[12:15] *** Altai-man_ left
[12:22] *** chloekek joined
[12:31] *** brahms joined
[12:36] *** aborazmeh joined
[12:36] *** aborazmeh left
[12:36] *** aborazmeh joined
[12:46] *** brahms left
[12:55] *** sno left
[13:05] *** aborazmeh left
[13:07] *** lucasb joined
[13:09] *** daxim left
[13:12] *** regreg left
[13:14] *** peri404 is now known as Perigrin

[13:15] *** daxim joined
[13:15] *** molaf joined
[13:21] *** sno joined
[14:01] *** theovdh left
[14:03] *** molaf left
[14:13] *** Altai-man_ joined
[14:14] *** lichtkind_ left
[14:15] *** sena_kun left
[14:24] *** Doc_Holliwood joined
[14:32] *** vike left
[14:39] *** mowcat left
[14:43] *** jmerelo left
[14:48] *** cfa left
[14:49] *** vike joined
[15:36] *** dansolo42 left
[15:36] *** dansolo42 joined
[15:44] *** wamba left
[15:46] *** melezhik joined
[15:47] *** squashable6 left
[15:50] *** squashable6 joined
[16:04] *** rindolf left
[16:08] *** ZzZombo left
[16:08] *** sarna left
[16:09] *** sarna joined
[16:13] *** Perigrin left
[16:13] *** sena_kun joined
[16:15] *** Altai-man_ left
[16:18] *** wamba joined
[16:18] *** cpan-raku left
[16:18] *** cpan-raku joined
[16:18] *** cpan-raku left
[16:18] *** cpan-raku joined
[16:20] *** Doc_Holliwood left
[16:39] *** Doc_Holliwood joined
[16:47] *** chloekek left
[16:55] *** xinming_ left
[16:57] *** xinming_ joined
[16:59] *** MasterDuke joined
[17:10] <lizmat> weekly: https://grants.perlfoundation.org

[17:10] <notable6> lizmat, Noted! (weekly)

[17:12] *** wamba left
[17:24] *** SCHAPiE left
[17:27] *** SCHAPiE joined
[17:27] *** dakkar left
[17:32] *** finanalyst_mobil joined
[17:32] *** finanalyst_mobil left
[17:33] *** xinming_ left
[17:33] *** rindolf joined
[17:33] *** xinming_ joined
[17:36] *** finanalyst left
[17:41] *** NODE left
[17:43] *** kawaii left
[17:44] *** NODE joined
[17:50] *** finanalyst joined
[17:51] *** NODE left
[17:53] *** NODE joined
[17:56] *** NODE left
[17:58] *** NODE joined
[18:00] *** sauvin left
[18:02] *** patrickb joined
[18:12] *** orinthe joined
[18:12] *** Altai-man_ joined
[18:15] *** sena_kun left
[18:30] *** ensamvarg left
[18:38] *** orinthe left
[18:40] *** orinthe joined
[18:52] *** ufobat__ joined
[18:52] *** jmerelo joined
[18:55] *** ufobat_ left
[19:03] *** jmerelo left
[19:24] *** MasterDuke left
[19:24] *** melezhik left
[19:27] *** finanalyst left
[19:29] *** aindilis left
[19:30] *** aindilis` joined
[19:31] *** cpup left
[19:37] *** cpup joined
[19:53] *** NODE left
[19:55] *** NODE joined
[19:59] *** NODE left
[20:01] *** NODE joined
[20:01] *** NODE left
[20:01] *** mowcat joined
[20:02] *** NODE joined
[20:03] *** aindilis` left
[20:04] *** NODE left
[20:09] *** aindilis joined
[20:13] *** sena_kun joined
[20:15] *** Altai-man_ left
[20:16] *** NODE joined
[20:23] *** orinthe2 joined
[20:23] *** orinthe left
[20:23] *** orinthe2 is now known as orinthe

[20:24] <SmokeMachine> lizmat: revolutionary? Thanks...

[20:27] *** orinthe8 joined
[20:28] *** orinthe left
[20:28] *** orinthe8 is now known as orinthe

[20:29] *** mowotter joined
[20:31] *** mowcat left
[20:32] *** mowcat joined
[20:34] *** lucasb left
[20:34] *** MasterDuke joined
[20:35] *** molaf joined
[20:35] *** mowotter left
[20:39] *** mowotter joined
[20:41] *** Black_Ribbon joined
[20:42] *** mowcat left
[20:43] <lizmat> :-)

[20:45] *** daxim left
[20:45] *** mowcat joined
[20:47] *** mowotter left
[20:50] *** mowotter joined
[20:50] *** daxim joined
[20:52] *** mowcat left
[20:52] <SmokeMachine> is this expected?

[20:52] <SmokeMachine> m: class C { method bla { "bla" }; method FALLBACK($a) { Proxy.new: FETCH => method (\SELF:) { say "here"; self.bla }, STORE => &say } }; say C.new.not-bla

[20:53] <SmokeMachine> evalable6: class C { method bla { "bla" }; method FALLBACK($a) { Proxy.new: FETCH => method (\SELF:) { say "here"; self.bla }, STORE => &say } }; say C.new.not-bla

[20:53] <camelia> rakudo-moar 2a58eb398: OUTPUT: «(timeout)here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here…»

[20:53] <evalable6> SmokeMachine, rakudo-moar 2a58eb398: OUTPUT: «(signal SIGHUP) here␤here␤here␤here␤here␤here␤h…»

[20:53] <evalable6> SmokeMachine, Full output: https://gist.github.com/68a3b5dc82917ed32e3882e42ccf1e3f

[20:53] *** mowcat joined
[20:53] <SmokeMachine> evalable6: class C { method bla { "bla" }; method FALLBACK($a) { Proxy.new: FETCH => method () { say "here"; self.bla }, STORE => &say } }; say C.new.not-bla

[20:54] <evalable6> SmokeMachine, rakudo-moar 2a58eb398: OUTPUT: «(signal SIGHUP) here␤here␤here␤here␤here␤here␤h…»

[20:54] <evalable6> SmokeMachine, Full output: https://gist.github.com/98d1bb3f3cf41a52db4ced7a767b55a6

[20:56] *** mowotter left
[20:56] *** mowotter joined
[20:58] <SmokeMachine> evalable6: class C { method bla { "bla" }; method FALLBACK($a) { Proxy.new: FETCH => sub ($) { say "here"; self.bla }, STORE => &say } }; say C.new.not-bla

[20:58] <evalable6> SmokeMachine, rakudo-moar 2a58eb398: OUTPUT: «here␤bla␤»

[20:58] *** mowcat left
[21:13] *** sno left
[21:15] *** sno joined
[21:16] *** chloekek joined
[21:17] <lizmat> SmokeMachine: Proxy.FETCH may be called many times, you cannot be sure it will only be called once

[21:41] *** wamba joined
[21:50] <SmokeMachine> lizmat: but it's infinite looping...

[21:51] <lizmat> that means that the FETCH method somehow calls a method that is calling FETCH again

[21:51] <lizmat> perhaps you can gain more clarity by showing the caller of the FETCH method everytime it gets called 

[21:51] <lizmat> (possbly a few levels up)

[21:53] *** finsternis left
[21:58] *** caterfxo left
[22:06] *** chloekek left
[22:06] *** Altai-man_ joined
[22:09] *** sena_kun left
[22:12] <SmokeMachine>   in any  at gen/moar/BOOTSTRAP/v6c.nqp line 1744

[22:12] <SmokeMachine>   in any decontrv at gen/moar/BOOTSTRAP/v6c.nqp line 4035

[22:13] <SmokeMachine> lizmat: https://www.irccloud.com/pastebin/OJtfGzfO/

[22:15] <lizmat> nothing jumps out to me atm...

[22:16] <lizmat> perhaps make an issue and someone less tired could have a look (like me, but tomorrow :-)

[22:17] *** NODE left
[22:18] *** rindolf left
[22:19] *** NODE joined
[22:19] *** toddr left
[22:23] *** maggotbrain left
[22:24] <Geth> ¦ problem-solving: ugexe assigned to jnthn Issue New public interfaces are often added without any chance for general consensus https://github.com/Raku/problem-solving/issues/169

[22:25] <SmokeMachine> lizmat: R#3550

[22:25] <linkable6> R#3550 [open]: https://github.com/rakudo/rakudo/issues/3550 Infinite looping on Proxy inside FALLBACK

[22:26] *** maggotbrain joined
[22:31] *** silug left
[22:46] *** doomvox joined
[22:53] *** ensamvarg joined
[23:05] *** Manifest0 left
[23:12] *** markong joined
[23:12] *** markoong left
[23:19] *** finsternis joined
[23:20] *** MasterDuke left
[23:28] *** doomvox left
[23:35] *** Doc_Holliwood left
[23:37] *** patrickb left
[23:42] *** MasterDuke joined
[23:50] *** wamba left
[23:56] *** xinming_ left
[23:57] *** xinming_ joined
