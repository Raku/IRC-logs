[00:11] *** lichtkind left
[00:13] *** Doc_Holliwood left
[00:19] *** markong left
[00:24] *** orinthe left
[00:29] <guifa> Xliff: happy birthday!

[00:29] *** orinthe joined
[00:34] *** aborazmeh joined
[00:34] *** aborazmeh left
[00:34] *** aborazmeh joined
[00:45] *** wildtrees left
[00:48] *** orinthe2 joined
[00:49] *** orinthe left
[00:49] *** orinthe2 is now known as orinthe

[00:52] *** silug left
[00:53] *** silug joined
[00:54] *** orinthe left
[01:00] *** orinthe joined
[01:10] *** rbtca left
[01:11] *** rbtca joined
[01:12] *** oneeggeach joined
[01:18] <Xliff> guifa: Thanks! :)

[01:20] *** kotrcka joined
[01:23] *** aborazmeh left
[01:33] *** oneeggeach left
[01:45] *** molaf left
[01:48] *** Altai-man_ joined
[01:51] *** sena_kun left
[01:57] *** molaf joined
[01:59] *** hungrydonkey joined
[02:13] *** guifa left
[02:14] <japhb> Happy birthday, Xliff!

[02:14] <tellable6> 2020-04-03T05:30:10Z #raku <Xliff> japhb Ooh! Thanks. I'm snagging this! ;)

[02:14] *** melezhik86 joined
[02:14] *** melezhik86 is now known as melezhik2

[02:15] <melezhik2> AlexDaniel: looks like I found a fix - http://repo.westus.cloudapp.azure.com/rakudist/reports/Colorizable/alpine/1586223468.txt 

[02:16] <melezhik2> it's installing glibc on alpine 

[02:16] <melezhik2> wget --no-check-certificate https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk

[02:16] <melezhik2> apk add --allow-untrusted glibc-2.31-r0.apk

[02:16] <melezhik2> does the trick

[02:27] *** melezhik2 left
[02:33] *** hungrydonkey left
[02:34] *** hungrydonkey joined
[02:39] <Xliff> Given the following: 'require ::($_ = "GStreamer::Raw::Types");', how would I introspect the symbols from GStreamer::Raw::Types

[02:39] <Xliff> ^^ lizmat jnthn nine timotimo vrurg

[02:40] <vrurg> Xliff: ::('Module').WHO

[02:41] <Xliff> Hah! vrurg++

[02:42] *** melezhik left
[02:43] <Xliff> Urg. That gives me 'Failure'

[02:44] <Xliff> vrurg: Hmm... take a look at GStreamer::Raw::Types. I think what I am doing breaks that method.

[02:45] <Xliff> https://github.com/Xliff/p6-GStreamer/blob/master/lib/GStreamer/Raw/Types.pm6

[02:45] <vrurg> Xliff: sorry, running out of time today. Just one thing to try...

[02:45] <vrurg> m: require ::(Test); say ::(Test).^name

[02:45] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    Test used at line 1‚ê§‚ê§¬ª

[02:46] <Xliff> vrurg: Thanks, but I need to be able to form the module require'd from a Str.

[02:46] <vrurg> m: require ::('Test'); say ::('Test').^name

[02:46] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Test‚ê§¬ª

[02:46] <vrurg> m: require ::('Test'); say ::('Test').WHO.keys.join(", ")

[02:46] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´EXPORT, &failure_output, &output, &todo_output‚ê§¬ª

[02:47] <Xliff> All it does is re-export symbols.

[02:47] <vrurg> Xliff: WHO gives you everything in our scope.

[02:48] <Xliff> Yeah, but there is no real package

[02:49] <vrurg> Xliff: Never needed it that way, I was always dealing with a packagy things.

[02:51] *** Guest17627 joined
[02:51] <vrurg> Xliff: but actually in this case it injects symbols directly into your scope.

[02:52] *** Guest17627 is now known as zorgate

[03:04] <vrurg> Xliff: I can't resist a challenge... Briefly, 'require' wants to see the requested symbol in the compunit. So, `require ::('Module')` do find and load the module, but if it can't find a package 'Module' in the compunit ‚Äì it's a failure.

[03:05] <vrurg> Perhaps it is possible to find the compunit itself somewhere in the CompUnit module family guts and try to introspect it, but I don't know where to look at.

[03:09] <vrurg> Xliff: one thing: after require there is %REQUIRE_SYMBOLS left in the lexical scope. It contains all symbols from all required compunits.

[03:10] *** ukine1 left
[03:10] <Xliff> vrurg: I fixed that. I can now do... 'require ::($_ = "GStreamer::Raw::Types"); ::("GStreamer::Raw::Types").^name.say'

[03:10] <Xliff> But I still can't see anything in ::EXPORT

[03:10] <vrurg> Xliff: do you have any 'is export' attached?

[03:11] <Xliff> I have a lot of "need" statements that I re-export using Compunit::Util

[03:11] <Xliff> Near as I can tell, these should be injected into the EXPORT table, which is the equivalent, yes?

[03:12] *** zorgate left
[03:15] <vrurg> Xliff: sorry, have to run. Depends on how you re-export. 'sub EXPORT' or 'package EXPORT'.

[03:15] * vrurg is &afk

[03:15] <Xliff> CompUnit::Utils.re-export

[03:15] <Xliff> https://github.com/LLFourn/p6-CompUnit-Util/blob/master/lib/CompUnit/Util.pm6#L156

[03:20] *** guifa joined
[03:36] <guifa> Is there a way to create a blob from several blobs efficiently?  I feel like the only .new methods will require a coercion to a list of ints first

[03:37] * guifa . o O ( on the other hand, I guess if there‚Äôs no performance penalty really for using a Buf over a Blob I could just use them by default )

[03:49] *** sena_kun joined
[03:51] *** Altai-man_ left
[03:51] *** pilne left
[04:23] *** molaf left
[04:34] *** Woodi joined
[04:39] *** Doc_Holliwood joined
[05:39] *** hacktor joined
[05:48] *** Altai-man_ joined
[05:51] *** sena_kun left
[06:05] *** rindolf joined
[06:12] *** kensanata joined
[06:20] *** wamba[m] joined
[06:21] *** hungryd85 joined
[06:23] *** hungrydonkey left
[06:25] *** Actualeyes joined
[06:27] *** Doc_Holliwood left
[06:33] *** hungryd85 left
[06:33] *** hungryd28 joined
[06:42] *** Actualeyes left
[06:43] *** Actualeyes joined
[06:43] *** ufobat_ left
[06:47] *** TheAthlete joined
[07:04] *** stux|RC-only joined
[07:07] <Geth_> ¬¶ doc: bd3c865319 | (Stoned Elipot)++ | doc/Type/Baggy.pod6

[07:07] <Geth_> ¬¶ doc: possessive clitic fixes

[07:07] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/bd3c865319

[07:07] <Geth_> ¬¶ doc: 258b819467 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Baggy.pod6

[07:07] <Geth_> ¬¶ doc: Merge pull request #3315 from Raku/possessive-clitic-fixes

[07:07] <Geth_> ¬¶ doc: 

[07:07] <Geth_> ¬¶ doc: possessive clitic fixes

[07:07] <linkable6> Link: https://docs.raku.org/type/Baggy

[07:07] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/258b819467

[07:08] *** cpan-raku left
[07:08] *** cpan-raku joined
[07:08] *** cpan-raku left
[07:08] *** cpan-raku joined
[07:14] *** hungryd28 left
[07:22] *** pecastro joined
[07:29] *** dakkar joined
[07:43] *** rbtca left
[07:43] *** rbtca joined
[07:44] *** hungrydonkey joined
[07:47] *** Actualeyes left
[07:47] *** Actualeyes joined
[07:49] *** sena_kun joined
[07:51] *** Altai-man_ left
[07:51] *** hungrydonkey left
[07:52] *** hungrydonkey joined
[08:05] *** hungrydonkey left
[08:07] *** poohman joined
[08:08] <poohman> hello all

[08:08] <poohman> is there an operator to find the common elements of 2 or more arrays/lists?

[08:08] <MasterDuke> (elem) i think

[08:10] <MasterDuke> oops

[08:10] <MasterDuke> m: say (1, 2, 3) (&) (2, 3, 4) (&) (3, 4, 5) # poohman

[08:10] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Set(3)‚ê§¬ª

[08:11] <poohman> cool

[08:11] <poohman> MasterDuke: Thanks

[08:11] <dakkar> m: say [(&)] ((1,2,3),(2,3,4),(3,4,5))

[08:11] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Set(3)‚ê§¬ª

[08:12] <dakkar> also that

[08:12] <dakkar> (which is exactly the same thing, written differently)

[08:12] <poohman> thanks

[08:12] <dakkar> notice that you get a Set back, not a list

[08:13] <AlexDaniel> dakkar: how is that the same thing

[08:13] <AlexDaniel> ah

[08:13] <AlexDaniel> yes, right, I was looking at (elem) suggestion above :)

[08:13] <dakkar> :)

[08:15] <lizmat> So I was thinking of adding a (==) operator, to apply Set semantics on the operands

[08:15] <lizmat> (1,2,3) (==) (3,1,2)  would then be True

[08:16] <lizmat> it would be functionally the same as (1,2,3).Set eqv (3,1,2).Set

[08:17] <lizmat> but with the advantage that it would not have to create full Set objects

[08:17] <dakkar> why would == map to eqv?

[08:17] <lizmat> hmnmm... so you're saying it should be called (eqv) ?

[08:18] <dakkar> or use == semantic

[08:18] *** k-man left
[08:18] <dakkar> similar things should look similar, right?

[08:18] <lizmat> m: dd (1,2,3).Set == (4,5,6).Set

[08:18] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Bool::True‚ê§¬ª

[08:18] <lizmat> that would just compare the number of elements

[08:19] <dakkar> so let's not do that :)

[08:19] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]);

[08:19] <camelia> rakudo-moar afff3b0b2: ( no output )

[08:20] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">;

[08:20] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´[[1 2 3] [2 3 4] [3 4 5]]‚ê§¬ª

[08:20] <AlexDaniel> greppable Set.*==

[08:20] <AlexDaniel> greppable: Set.*==

[08:20] <greppable6> AlexDaniel, 87 lines, 13 modules: https://gist.github.com/d610d99eb42427c242226abac0156607

[08:21] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">.*==

[08:21] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call‚ê§at <tmp>:1‚ê§------> 034]);%a<"a">.push([3,4,5]); say %a<"a">.*7‚èè5==‚ê§¬ª

[08:21] <AlexDaniel> lizmat: what's that? https://github.com/colomon/List-Utils/blob/b8eb232844b3b308f2b53af2b4a971e3076bcdf3/t/08-combinations.t#L17

[08:21] <dakkar> "are all the elements in this array different?"

[08:22] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">;

[08:22] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´[[1 2 3] [2 3 4] [3 4 5]]‚ê§¬ª

[08:22] <AlexDaniel> dakkar: ah, it's actually correct then

[08:22] <lizmat> AlexDaniel: that's another way of finding out whether all elements of an array are different from each other ?

[08:23] <dakkar> it only becomes odd when you have Set on both sides of the == ("do these two things have the same number of distinct elements?" is an odd question)

[08:23] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">.reduce(&[&]);

[08:23] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´all([1 2 3], [2 3 4], [3 4 5])‚ê§¬ª

[08:24] <AlexDaniel> dakkar: yeah, I was just wondering if anybody misused == for sets

[08:24] <AlexDaniel> but I guess not

[08:25] <poohman> for the example above, any simple way of finding the common element?

[08:26] <MasterDuke> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">.reduce(&[(&)]);

[08:26] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Set(3)‚ê§¬ª

[08:26] <poohman> aah

[08:26] <poohman> thanks

[08:26] <lizmat> also, ‚â° would then be the unicode version of that set operator

[08:27] <MasterDuke> np

[08:27] <lizmat> aka U+2261

[08:27] <MasterDuke> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">.reduce(&[(‚à©)]); # unicode version

[08:27] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside []‚ê§at <tmp>:1‚ê§------> 3a">.push([3,4,5]); say %a<"a">.reduce(&[7‚èè5(‚à©)]); # unicode version‚ê§    expecting any of:‚ê§        argument list‚ê§        infix‚ê§        infi‚Ä¶¬ª

[08:28] <MasterDuke> m: my %a;%a<"a">.push([1,2,3]);%a<"a">.push([2,3,4]);%a<"a">.push([3,4,5]); say %a<"a">.reduce(&[‚à©]); # unicode version

[08:28] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Set(3)‚ê§¬ª

[08:34] *** k-man joined
[08:38] <AlexDaniel> u: ‚â°

[08:38] <unicodable6> AlexDaniel, U+2261 IDENTICAL TO [Sm] (‚â°)

[08:42] <cpan-raku> New module released to CPAN! Gnome::Gtk3 (0.27.3) by 03MARTIMM

[08:42] <cpan-raku> New module released to CPAN! Gnome::Gio (0.5.0) by 03MARTIMM

[08:42] <cpan-raku> New module released to CPAN! Gnome::N (0.17.3.1) by 03MARTIMM

[09:11] * lizmat clickbaits https://rakudoweekly.blog/2020/04/06/2020-14-more-perspectives/

[09:15] *** mowcat joined
[09:26] *** xelxebar left
[09:27] *** Doc_Holliwood joined
[09:28] *** xelxebar joined
[09:29] *** sauvin left
[09:32] *** markong joined
[09:32] *** Black_Ribbon left
[09:36] *** k-man left
[09:40] *** chloekek joined
[09:42] *** markong left
[09:42] *** markoong joined
[09:43] *** k-man joined
[09:48] *** Altai-man_ joined
[09:51] *** sena_kun left
[09:57] *** cyg0x7 joined
[09:58] <cyg0x7> p6: say 3;

[09:58] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´3‚ê§¬ª

[10:02] *** Actualeyes left
[10:02] *** xinming left
[10:02] *** Actualeyes joined
[10:04] *** sauvin joined
[10:04] *** xinming joined
[10:05] *** cognomin_ joined
[10:07] *** Doc_Holliwood left
[10:10] *** cognominal left
[10:15] *** aborazmeh joined
[10:16] *** aborazmeh left
[10:16] *** aborazmeh joined
[10:19] *** jjatria left
[10:19] *** jjatria joined
[10:21] *** jjatria left
[10:21] *** jjatria joined
[10:22] *** jjatria left
[10:22] *** jjatria joined
[10:31] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"b">.push([2,3,4]);%a<"c">.push([3,4,5]);say %a;

[10:31] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´{"a" => [[1 2 3]], "b" => [[2 3 4]], "c" => [[3 4 5]]}‚ê§¬ª

[10:32] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"b">.push([2,3,4]);%a<"c">.push([3,4,5]);say %a.flat;

[10:32] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´("b" => [[2 3 4]] "c" => [[3 4 5]] "a" => [[1 2 3]])‚ê§¬ª

[10:33] <poohman> is there any way to get all the values in one array or array of arrays

[10:34] <MasterDuke> .append

[10:37] <poohman> m: my %a;%a<"a">.push([1,2,3]);%a<"b">.push([2,3,4]);%a<"c">.push([3,4,5]);say %a.append;

[10:37] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´{"a" => [[1 2 3]], "b" => [[2 3 4]], "c" => [[3 4 5]]}‚ê§¬ª

[10:38] <poohman> MasterDuke: some help?

[10:38] <MasterDuke> m: my %a;%a<"a">.append([1,2,3]);%a<"b">.append([2,3,4]);%a<"c">.append([3,4,5]);say %a;

[10:38] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´{"a" => [1 2 3], "b" => [2 3 4], "c" => [3 4 5]}‚ê§¬ª

[10:39] <MasterDuke> oh, sorry. i thought you were putting them all into one key

[10:39] *** Doc_Holliwood joined
[10:43] <MasterDuke> m: my %a;%a<"a">.append([1,2,3]);%a<"b">.append([2,3,4]);%a<"c">.append([3,4,5]);say gather %a.values.deepmap(*.take);

[10:43] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´(3 4 5 2 3 4 1 2 3)‚ê§¬ª

[10:44] <MasterDuke> m: my %a;%a<"a">.push([1,2,3]);%a<"b">.push([2,3,4]);%a<"c">.push([3,4,5]);say gather %a.values.deepmap(*.take);

[10:44] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´(3 4 5 1 2 3 2 3 4)‚ê§¬ª

[10:50] <poohman> hmmm let me try

[10:51] <poohman> thanks

[10:51] *** xinming left
[10:52] *** xinming joined
[10:55] *** TheAthlete left
[11:04] *** lichtkind joined
[11:27] *** aborazmeh left
[11:38] *** xinming left
[11:39] *** xinming joined
[11:40] *** MasterDuke left
[11:41] *** Doc_Holliwood left
[11:41] *** lichtkind_ joined
[11:42] <Xliff> Given the following: 'require ::($_ = "GStreamer::Raw::Types");', how would I introspect the EXPORT table from GStreamer::Raw::Types

[11:48] <lizmat> ::($_ ~ "::EXPORT::DEFAULT")  ??

[11:49] *** sena_kun joined
[11:50] *** Altai-man_ left
[11:58] *** cyg0x7 left
[12:21] *** kensanata left
[12:21] *** wamba joined
[12:34] *** dakkar left
[12:34] *** dakkar joined
[12:37] *** Doc_Holliwood joined
[12:39] <Xliff> lizmat++: 'require ::($_ = "GStreamer::Raw::Subs"); ::($_ ~ "::EXPORT::DEFAULT").WHO.keys.say'

[12:39] <Xliff> lizmat: Are you familiar with CompUnit::Util/

[12:45] *** wamba left
[12:50] *** hungrydonkey joined
[12:57] <holyghost> I've just finished my second PhD thesis, I cannot give a hyperlink as my uni didn;t want to share too much. It was based on the Hawking Boltzmann models in p6-Game-Bayes on github

[12:58] <holyghost> There's some code for it inthere

[12:58] <holyghost> I am now going to bootstrap myself into other perl6 code and research, genetic algorithms, DNA evolution etc

[12:58] *** melezhik joined
[12:59] <holyghost> probably, but I need some rest now

[12:59] <chloekek> Congrats! But why would they not want to share knowledge?

[12:59] <holyghost> the Hawking Boltzmann model code is in the examples directory above

[12:59] <melezhik> –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —Ç–∞–º —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É —Å alpine/whateverable

[13:00] <holyghost> chloekek : further research

[13:00] <holyghost> thank btw

[13:01] * holyghost is AFK

[13:02] <melezhik> sorry, written in wrong place ... ((-;

[13:02] *** poohman left
[13:03] <cpan-raku> New module released to CPAN! Gnome::Gio (0.5.0.1) by 03MARTIMM

[13:06] *** hungrydonkey left
[13:09] *** hungrydonkey joined
[13:11] *** Doc_Holliwood left
[13:11] *** xinming left
[13:12] *** xinming joined
[13:13] *** hungrydonkey left
[13:16] *** aborazmeh joined
[13:16] *** aborazmeh left
[13:16] *** aborazmeh joined
[13:22] *** hungrydonkey joined
[13:35] <Geth_> ¬¶ doc: uzluisf++ created pull request #3316: Index :api and add bit of documentation

[13:35] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/pull/3316

[13:36] *** hungrydonkey left
[13:38] <uzl[m]> jmerelo: Could you take a look at this PR, https://github.com/perl6/Pod-To-HTML/pull/66 ?

[13:38] <tellable6> uzl[m], I'll pass your message to jmerelo

[13:38] <uzl[m]> I wonder what's Jonathan Stowe's nick...

[13:41] <tobs> uzl[m]: logs tell me it's

[13:41] <tobs> .seen RabidGravy

[13:41] <tellable6> tobs, I saw RabidGravy 2017-12-17T01:40:19Z in #perl6: <RabidGravy> that's https://perl6advent.wordpress.com/2017/12/17/something-about-messaging-but-i-couldnt-think-of-a-snappier-title/ if you want to get in early

[13:42] <tobs> or used to be, at one point.

[13:43] <timotimo> RG hasn't been on the irc for a long while

[13:43] <timotimo> but he does tweet

[13:43] <uzl[m]> Thanks. Yeah, it looks like that...

[13:44] <AlexDaniel> weekly: you can now easily test your module on various distros/rakudo versions using RakuDist, see http://repo.westus.cloudapp.azure.com/rakudist/ (perhaps it's not very user-friendly yet but your feedback will be appreciated!)

[13:44] <notable6> AlexDaniel, Noted! (weekly)

[13:44] <AlexDaniel> melezhik: ‚Üë like this? :)

[13:48] *** Altai-man_ joined
[13:50] *** melezhik left
[13:51] *** sena_kun left
[13:53] <Geth_> ¬¶ doc: 12fecf7fbf | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/syntax.pod6

[13:53] <Geth_> ¬¶ doc: Add examples of common errors

[13:53] <Geth_> ¬¶ doc: 

[13:53] <Geth_> ¬¶ doc: Show various errors with no digit after a radix point.

[13:53] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/12fecf7fbf

[13:53] <linkable6> Link: https://docs.raku.org/language/syntax

[13:54] *** melezhik joined
[13:54] <melezhik> >like this?

[13:55] <melezhik> upss, sorry wrong place again ...

[13:55] <melezhik> I wish my browsers irc client would be more intuitive ... (((=:

[13:57] *** JulianLevens joined
[13:57] *** poohman joined
[14:00] *** kensanata joined
[14:04] *** aborazmeh left
[14:10] *** MasterDuke joined
[14:15] *** hungrydonkey joined
[14:24] *** hungryd47 joined
[14:24] *** hungrydonkey left
[14:53] *** Kaiepi left
[14:56] *** xinming left
[14:57] *** Ven`` joined
[14:57] *** xinming joined
[15:23] *** stoned75 left
[15:25] *** lichtkind_ left
[15:25] *** lichtkind left
[15:26] *** srandon111 joined
[15:26] <srandon111> guys why people on perl 5 is so rude??

[15:27] *** Doc_Holliwood joined
[15:27] *** wildtrees joined
[15:28] <AlexDaniel> srandon111: There are a lot of nice people in perl5 community, maybe try again later?

[15:28] <AlexDaniel> srandon111: no community is perfect

[15:30] <srandon111> AlexDaniel, i just entered, and asked if perl5 was a dying language, and they accused me of troll and banned me

[15:30] <srandon111> like i sent two messagess to be banned

[15:30] <srandon111> i see that no community is perfect, but can't understand what's wrong with the admins of that channel

[15:30] *** wamba joined
[15:32] <mst> srandon111: because you did this on March 17 as well, were answered then, and then rejoined today and asked the exact same question

[15:32] <mst> we answered it politely the first time

[15:33] <mst> as such, I suggest you stop lying to #raku and either ask a relevant question or leave them in peace

[15:33] <Altreus> mst is everywhere

[15:33] <mst> and has a long memory and very good logs

[15:33] *** hungryd47 left
[15:33] <Altreus> Are you doing raku or just peacekeeping?

[15:33] <Altreus> That sounded rude but was genuine

[15:34] <mst> I've been playing around, not done anything serious, have helped out with e.g. getting raku to start using CPAN as a distribution mechanism

[15:35] *** chloekek left
[15:36] <tadzik> Brutal. Savage. Rekt.

[15:36] <Altreus> I've been playing around by making myself responsible for something I'm underequipped to write

[15:36] <Altreus> Basically I'm now that person who wrote code he's not smart enough to debug

[15:37] <mst> I was *planning* some stuff involving the grammar engine, and in a couple months was going to sync up with the person on the raku side who properly understood what I was doing and was planning to help me figure it out

[15:37] <mst> unfortunately for that plan, said person was DrForr

[15:37] <Altreus> oh no :(

[15:38] *** hungrydonkey joined
[15:38] <Altreus> He was on the compiler team?

[15:38] *** veesh_ joined
[15:38] *** wildtrees left
[15:39] *** wildtrees joined
[15:40] <mst> he was doing a shitload of conversion of antlr grammars and we had some ideas about config file parsing and modification that we were going to work on

[15:40] *** veesh left
[15:41] *** veesh_ is now known as veesh

[15:45] <mst> plus lizmat silently deleting all of her cpan modules in a fit of spite and thereby breaking various of my users' ability to install their dependencies makes me worry about writing hybrid perl5/raku code since I now know there's a raku core team member who's happy to fuck over the perl5 community without warning, and I'm not sure it's ethically acceptable for me to ask perl5 people to depend on her work a second time under the ...

[15:45] <mst> ... circumstances

[15:46] * lizmat refrains from commenting

[15:46] *** wildtrees left
[15:47] <mst> I've never had cpan installs suddenly break from deliberate sabotage like that except for Marc Lehmann before now

[15:48] <srandon111> mst, banning does not seem to me a valid reason for someone who asked the same question twice in a distance of a month

[15:48] <srandon111> to be humble

[15:49] <srandon111> i mean i didi not offend anyone or used any racist/sexist language or spammed 

[15:49] <mst> srandon111: your complaints about #perl opping are off topic for #raku, which is a different language with its own community. please desist.

[15:49] <lizmat> srandon111: an irc channel like #perl is a bit of a football club canteen

[15:49] *** sena_kun joined
[15:50] <srandon111> lizmat, i nticed that.... sorry for polluting the channel byye mst 

[15:50] <lizmat> srandon111: would you walk into a football club canteen asking if the team is losing ?

[15:50] <mst> also, if it was a genuine mistake, you could've /msg-ed me

[15:50] <mst> rather than join #freenode and saying < srandon111> it was the first time for me on the channel

[15:51] <mst> which was provably untrue

[15:51] *** Altai-man_ left
[15:51] <mst> if you attempt to lie to the freenode staff about the problem rather than discussing it with the ops of the channel, nobody's going to believe you're operating in good faith

[15:51] <mst> beyond that, I have no further comment.

[15:54] <mst> Altreus: the fun part for me is going to be getting stuff to keep whitespace and etc.

[15:54] <mst> since for obvious reasons PEG grammars tend to not bother because they don't need to

[15:54] <mst> but I want to be able to modify configs while leaving them diffing nicely

[15:54] <Altreus> I'm unfamiliar with the problem space but I suspect it is not the only one with whitespace concerns

[15:59] *** Xliff left
[15:59] *** wamba left
[16:00] *** pmurias joined
[16:01] <pmurias> mst: did you look at boomerang?

[16:01] <pmurias> mst: I remember we talked at a YAPC about your config modifying tool

[16:02] <mst> pmurias: er. which boomerang?

[16:02] <pmurias> mst: programming language

[16:02] <pmurias> mst: and boomerang allows writing bidirectional programs to extract and change some part of data/config file/etc.

[16:03] <mst> oh, yes, that was kinda interesting

[16:03] <pmurias> mst: https://en.wikipedia.org/wiki/Boomerang_(programming_language)

[16:03] <mst> completely unaccessible to mortals, I suspect, but some fascinating theory

[16:03] <pmurias> mst: on the flip side it's an ML dialect

[16:04] <lizmat> Note: to encourage deletions, all of past CPAN glory is collected on http://history.perl.org/backpan/   # mst

[16:04] <mst> lizmat: note: deleting the latest version of something that other cpan module are still depending on is still a deliberate choice to cause harm to downstream users

[16:05] <mst> *I* know how to make things fall back to backpan, sure

[16:05] <mst> that's hardly the point

[16:06] <Grinnz> backpan is an archive, not a backup

[16:06] <AlexDaniel> lizmat: fwiw I was somewhat angry when someone deleted their raku modules thinking that nobody is using them (there were multiple other modules that depended on them)

[16:06] <pmurias> mst: I assume having to learn a new programming language with unusual ancestry at that is a major obstacle for just modifing a config file

[16:06] <AlexDaniel> lizmat: if someone did this on purpose‚Ä¶ >:E

[16:07] <mst> especially given cpan has an ADOPTME tag for "this is unsupported by the original author, please adopt it if you want another release"

[16:07] <mst> which would've been *fine* as a way to say "I withdraw from the community"

[16:07] <lizmat> *all* of my modules had been tagged with ADOPTME for *years*

[16:07] <mst> going scorched earth had unnecessary collateral damage

[16:07] <mst> yeah, well, they were still working as upstream dependencies

[16:07] <lizmat> *nobody* expressed any interest in them

[16:07] <lizmat> and the only thing I got was flak

[16:08] <Grinnz> we are toolchain, we always expect unexpected dependents

[16:08] <mst> well, yeah, that's because you're a pretty decent programmer and they kept working

[16:08] * sena_kun feels like some random (likely) troll was attempting to start a flame and _somehow_ succeeded.

[16:08] <Grinnz> sena_kun: kind of an unrelated discussion, i wouldn't blame the troll :P

[16:08] <mst> if you'd talked to #toolchain, or andreas, or anybodt, we could've sorted something out

[16:08] <lizmat> well, you could consider PAUSE not allowing an author to delete all versions of a module

[16:09] <Grinnz> it could show a warning at least, yeah

[16:09] <lizmat> but to this day, nothing has been done

[16:09] <sena_kun> Grinnz, hard to prove if would or wouldn't if you ask me... But still wondering.

[16:09] <mst> sena_kun: nah, this was following on from Altreus' question to me

[16:09] <lizmat> mst: I was done talking to the Perl community

[16:09] <lizmat> and still mostly am

[16:10] <cpan-raku> New module released to CPAN! ArrayHash (1.0.0) by 03HANENKAMP

[16:10] * Grinnz goes to add github issue for pause so the idea is not lost

[16:11] *** rbtca left
[16:11] <AlexDaniel> moritz: btw https://github.com/moritz/perl6-all-modules üëèisüëèstillüëèbroken

[16:11] <mst> lizmat: I don't consider users who've never spoken to you and as such are entirely unrelated to your throwing your toys out of the pram to be acceptable collateral damage

[16:11] *** SCHAPiE left
[16:11] <lizmat> mst: so *why* did you bring up this fact?

[16:11] *** rbtca joined
[16:11] <lizmat> was it pertinent to the conversation we had in here

[16:11] <lizmat> or were you just waiting to throw this at me?

[16:12] <Altreus> What happened to refraining from comment

[16:12] <lizmat> Altreus: you're right

[16:12] <guifa> mst: what grammar work were you doing?  I‚Äôm starting up some now to create a binary/object grammar, but will be trying to tightly integrate it with raku‚Äôs

[16:12] <lizmat> mst has the uncanny capability of pressing my buttons in the wrong way

[16:12] <Altreus> well yes he's mst

[16:12] <mst> it was pertinent because that, combined with your attempts to blackmail me into silence over other issues by threatening to cause further damage to the perl community, is a primary reason why I'm reluctant to recommend perl people try raku currently

[16:12] <moritz> AlexDaniel: I know, have tried three times to fix it, but no luck :(

[16:12] <lizmat> if I hadn't deleted all of my Perl modules yet, I would now be very close to doing it again

[16:13] <mst> if you hadn't gone full Lehmann I wouldn't be nearly this annoyed

[16:13] <AlexDaniel> moritz: what's the error that you're seeing? Maybe there's a quick fix of some sort

[16:13] <Altreus> mst: perhaps we can move on for the sake of the public interest

[16:13] * lizmat goes afk to cool down&

[16:13] <mst> guifa: like I say, config file definitions that understood indentation

[16:13] <AlexDaniel> moritz: it's all done by this script? https://github.com/moritz/perl6-all-modules/blob/master/_tools/populate.p6

[16:13] <AlexDaniel> moritz: or is there anything else?

[16:13] <moritz> AlexDaniel: some errors from git subrepo

[16:14] <moritz> AlexDaniel: yes, all done by that script

[16:14] <AlexDaniel> moritz: alright I'll take a look

[16:15] <AlexDaniel> moritz: can I have push access?

[16:15] <guifa> okay, this is probably a totally random question and the answer is almost certainly no, but ‚Ä¶¬†

[16:16] <guifa> any chance 6.e will implement infixes ~<, ~> and prefix ~^ ?  

[16:16] <mst> guifa: /w 409

[16:16] * guifa doesn‚Äôt know if it‚Äôs pending a MoarVM update

[16:16] <mst> bah, sorry

[16:16] <AlexDaniel> guifa: to do what?

[16:17] <AlexDaniel> guifa: like, what's the proposed functionality of ~< and ~^ ?

[16:17] <moritz> AlexDaniel: sure, invite sent

[16:17] <guifa> AlexDaniel: they are buf bitwise ops

[16:18] *** SCHAPiE joined
[16:18] <guifa> ~< left shifts a buf, ~> right shifts, and ~^ flips it

[16:18] *** natrys joined
[16:18] <guifa> I can work around it but with massive perf penalties I‚Äôm sure

[16:18] *** hungrydonkey left
[16:19] <guifa> (which isn‚Äôt a huge deal, I‚Äôm still at the early implementation of Binex so performance isn‚Äôt a concern, but it‚Äôs something I noticed)

[16:19] <Altreus> the ~ implies string but I don't know how to interpret left- and right-shift in string context

[16:19] <Altreus> except to cycle the characters like a queue

[16:20] *** hungrydonkey joined
[16:20] *** Kaiepi joined
[16:21] <mst> guifa: are those implementable yourself so you get the syntax etc

[16:21] <AlexDaniel> Altreus: no, no more ops that work on Strs and Bufs, ~ was a mistake

[16:21] <mst> guifa: and then you can present the profile to demonstrate it'd be a good ide?

[16:21] <mst> yeah, a Str and a Buf should never ever be interchangeable

[16:22] <mst> otherwise mojibake will ensue in the best case scenario

[16:22] <AlexDaniel> Altreus: it sounded like a great idea but it falls appart pretty quick: https://docs.raku.org/language/traps#Using_[~]_for_concatenating_a_list_of_blobs

[16:23] <AlexDaniel> guifa: file a ticket here asking for the functionality you need: https://github.com/Raku/problem-solving/issues/new?assignees=jnthn&labels=language&template=issue-template-language.md&title=

[16:23] <guifa> Altreus: on operators, a prefix + means bitwise operator, and prefix ~ means bufwise operator

[16:23] <AlexDaniel> guifa: it won't happen as ops, but maybe as 

[16:23] <AlexDaniel> guifa: *as methods on Buf/Blob

[16:23] <guifa> AlexDaniel: it‚Äôs a defined operator, but the docs say ‚Äúnot implemented‚Äù

[16:24] <AlexDaniel> ‚Ä¶ oh‚Ä¶

[16:24] <guifa> +& = bitwise OR, ~& = bufwise OR

[16:24] <guifa> err AND

[16:24] <AlexDaniel> no no no no no‚Ä¶

[16:24] <AlexDaniel> :D

[16:24] <guifa> +| and ~| for OR, +^ and ~^ for XOR

[16:25] * guifa grumbles about having to travel during the pandemic and is afk&

[16:26] <AlexDaniel> mst: it's not so much about unicode strings breaking, we just can't have it with the type system

[16:27] <AlexDaniel> I mean, we can, but it's ugly and not useful

[16:27] <mst> ah, ok

[16:27] <Altreus> I think there was an explanation but I don't have the basis to understand it

[16:28] <Altreus> I know how to apply operators bitwise but not bufwise

[16:31] <jnthn> tbh, the [~] thing feels a bit weak for saying that we should inconvenience working with Bufs in general by not allowing operators on them. Not to mention that the trap is oddly specific; `my num @foo; my num $total = [+] @foo;` has the same issue.

[16:32] <mst> pmurias: ah, I remember, boomerang is trying to do bidi text transforms ina very clever way but the central infospace doesn't really exist-as-such from my reading

[16:33] <mst> pmurias: I really like the ideas but I don't *think* the sort of transforms I have in mind quite fit the model

[16:33] <mst> I may be wrong though

[16:33] <mst> possibly when I finally get a prototype of something you can look and tell me what you think I've screwed up

[16:33] <mst> (because there's bound to be something ;)

[16:33] <AlexDaniel> jnthn: it's cool to have ops for working with bufs, but why would we abuse the same Str ops for it

[16:34] <AlexDaniel> m: my num @foo; my num $total = [+] @foo; say $total

[16:34] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§¬ª

[16:34] <AlexDaniel> jnthn: what issue btw?

[16:35] <AlexDaniel> you mean like

[16:35] <jnthn> Huh, I thought that'd blow up 'cus the base value is 0?

[16:35] <jnthn> Which is Int, not Num

[16:36] <AlexDaniel> m: my @foo; my num $total = [+] @foo; say $total

[16:36] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´This type cannot unbox to a native number: P6opaque, Int‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:36] <AlexDaniel> this

[16:36] <AlexDaniel> I guess?

[16:36] <jnthn> Wow, so, it's smart enough to look at the type on a native num array?

[16:37] *** dakkar left
[16:37] <jnthn> m: my @foo; dd [+] @foo

[16:37] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§¬ª

[16:37] <jnthn> m: my num @foo; dd [+] @foo

[16:37] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0e0‚ê§¬ª

[16:37] <jnthn> m: my Num @foo; dd [+] @foo

[16:37] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§¬ª

[16:37] <AlexDaniel> maybe [~] should learn that too then?

[16:37] <jnthn> heh :) Not *that* smart

[16:37] <jnthn> Yes, then you can do `my Blob @foo` and no trap any more :)

[16:37] <jnthn> Well, if you type :P

[16:38] <jnthn> There was a long discussion in the past about `~`, the conclusion of which was that blobs are stringy things also, and just like + is a Numeric op, ~ is a Stringy op

[16:38] *** kensanata left
[16:38] <AlexDaniel> m: my Blob @foo; dd [~] @foo

[16:38] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´""‚ê§¬ª

[16:38] <jnthn> m: say Blob ~~ Stringy

[16:38] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´True‚ê§¬ª

[16:40] <AlexDaniel> moritz: O_o https://github.com/moritz/perl6-all-modules/pull/4

[16:41] * jnthn should make dinner; bbl

[16:41] <poohman> hi all, quick question

[16:42] <poohman> m: [0..20].map(*.say)

[16:42] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§¬ª

[16:42] <poohman> in my reply and application I get a True every time I map to a say function

[16:43] <poohman> why the extra True and what is the better way to do it?

[16:43] <AlexDaniel> poohman: yep, .say returns True, so essentially you're mapping your values to True

[16:43] <AlexDaniel> a better way is to use a proper loop

[16:43] <AlexDaniel> m: .say for [0..20]

[16:43] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§¬ª

[16:44] <AlexDaniel> m: for [0..20] { .say }

[16:44] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§¬ª

[16:44] <vrurg> Or, if map is essential, then

[16:45] <vrurg> m: say (0..20).map: { .say; $_ }

[16:45] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)‚ê§¬ª

[16:45] <poohman> Thanks AlexDaniel and vrurg

[16:46] <rypervenche> m: .say for ^20

[16:46] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§¬ª

[16:54] *** melezhik left
[16:57] <srandon111> lizmat, yes i see :D that thing about the football club

[17:00] <AlexDaniel> jnthn: if it's so stringy why do we have subbuf instead of using substr

[17:02] <AlexDaniel> jnthn: a lot of stuff was discussed in the past, fortunately we have a better view of things now

[17:03] <AlexDaniel> ‚Äú~ concatenates things as strings‚Äù is a very simple behavior that didn't need to be complicated with ‚Äú‚Ä¶ oh, and also it does this, and for these edge cases it does that!‚Äù

[17:03] *** hungrydonkey left
[17:04] *** hungrydonkey joined
[17:04] *** hungrydonkey left
[17:12] *** pmurias left
[17:12] *** Doc_Holliwood left
[17:23] *** Tirifto joined
[17:26] *** wamba joined
[17:30] <AlexDaniel> m: loop { state $n = 0; put $n++; last if $n > 2; FIRST { put "Starting loop. \$n is n" } LAST { put "Finishing loop. \$n is n" } }

[17:30] <AlexDaniel>  

[17:30] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3 FIRST { put "Starting loop. \$n is n" }7‚èè5 LAST { put "Finishing loop. \$n is n" }‚ê§    expecting any of:‚ê§       ‚Ä¶¬ª

[17:31] <AlexDaniel> m: loop { state $n = 0; put $n++; last if $n > 2; FIRST { put "Starting loop. \$n is n" }; LAST { put "Finishing loop. \$n is n" } }

[17:31] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Starting loop. $n is n‚ê§0‚ê§1‚ê§2‚ê§Finishing loop. $n is n‚ê§¬ª

[17:31] <AlexDaniel> huh?

[17:31] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/a6c6b1a1d56caf3be49e41e4ede26b2c

[17:32] <committable6> AlexDaniel, https://gist.github.com/35720e1609f790954b584c368a15feb8

[17:32] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/3e089663a795b68fd4df611fbdf493f3

[17:33] <committable6> AlexDaniel, https://gist.github.com/4514afe3f74294184a6d1700aac08219

[17:37] *** melezhik joined
[17:41] *** Maylay left
[17:42] *** maggotbrain joined
[17:48] *** Altai-man_ joined
[17:51] *** sena_kun left
[17:55] *** lichtkind joined
[18:08] *** chloekek joined
[18:14] <chloekek> Is it possible to interpolate multiple strings with metacharacters in them into a regex?

[18:14] <chloekek> p6: my @s = <a b-c d>; say /<{@s}>/

[18:14] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´/<{@s}>/‚ê§¬ª

[18:15] <chloekek> p6: my @s = <a b-c d>; say ?/<{@s}>/ given '';

[18:15] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5===‚ê§Unrecognized regex metacharacter - (must be quoted to match literally)‚ê§at /home/camelia/EVAL_1:1‚ê§------> 3anon regex {  b7‚èè5-c}‚ê§Malformed regex‚ê§at /home/camelia/EVAL_1:1‚ê§------> 3anon regex {  b-7‚èè5c}‚ê§‚ê§¬ª

[18:16] <chloekek> p6: my @s = <a b-c d>; say ?/$(@s)/ given '';

[18:16] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´False‚ê§¬ª

[18:17] <chloekek> p6: my @s = <a b-c d>; say ?/$(@s)/ given 'b-c';

[18:17] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´False‚ê§¬ª

[18:17] <chloekek> p6: my @s = <a b-c d>; say ?/@s/ given 'b-c';

[18:17] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´True‚ê§¬ª

[18:17] <chloekek> So I have to make this an @-variable, and it can‚Äôt be any list-returning expression?

[18:22] <chloekek> p6: my %h = a => 1, b-c => 2, d => 3; say ?/@(%h.keys)/ given 'b-c';

[18:22] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´True‚ê§¬ª

[18:22] <chloekek> Ah nice.

[18:23] <chloekek> I‚Äôll update the docs.

[18:30] <Geth_> ¬¶ doc/@-interp-regex: 7f23a010fe | Chlo√©++ | doc/Language/regexes.pod6

[18:30] <Geth_> ¬¶ doc/@-interp-regex: Document @(code) interpolation in regex

[18:30] <Geth_> ¬¶ doc/@-interp-regex: review: https://github.com/Raku/doc/commit/7f23a010fe

[18:31] <Geth_> ¬¶ doc: chloekek++ created pull request #3317: Document @(code) interpolation in regex

[18:31] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/pull/3317

[18:35] *** cpan-raku left
[18:35] *** cpan-raku joined
[18:35] *** cpan-raku left
[18:35] *** cpan-raku joined
[18:53] *** wamba left
[18:53] *** wamba joined
[19:02] *** Tirifto left
[19:07] *** chloekek left
[19:21] *** CrtxReavr joined
[19:21] <CrtxReavr> Yikes!

[19:21] *** CrtxReavr left
[19:32] <AlexDaniel> jnthn: and then also, ok you might get an Int when you expect a Str, not very awesome but you can relatively easily just call .Num on whatever you get

[19:32] <AlexDaniel> what do you do with a Str though

[19:33] <AlexDaniel> `|| Blob.new` to make sure you don't get it in the first place?

[19:35] <AlexDaniel> oops: ‚Äúwhen you expect a *Num*‚Äù of course

[19:36] <AlexDaniel> and yeah `|| Blob.new` is what I wrote in the docs

[19:37] <cpan-raku> New module released to CPAN! Date::Calendar::Gregorian (0.0.1) by 03JFORGET

[19:43] *** vike left
[19:48] *** natrys left
[19:49] *** sena_kun joined
[19:49] <poohman> m: $a="a ;b;c";@a=$a.split(";");say @a.elems

[19:49] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5$a="a ;b;c";@a=$a.split(";");say @a.elem‚ê§¬ª

[19:50] <poohman> m:my $a="a ;b;c";my @a=$a.split(";");say @a.elems

[19:50] <evalable6> poohman, rakudo-moar afff3b0b2: OUTPUT: ¬´3‚ê§¬ª

[19:50] <poohman> m:my $a="a ;b;";my @a=$a.split(";");say @a.elems

[19:50] <evalable6> poohman, rakudo-moar afff3b0b2: OUTPUT: ¬´3‚ê§¬ª

[19:50] <poohman> m:my $a="a ;b;";my @a=$a.trim.split(";");say @a.elems

[19:50] <evalable6> poohman, rakudo-moar afff3b0b2: OUTPUT: ¬´3‚ê§¬ª

[19:51] *** Altai-man_ left
[19:51] <poohman> m:my $a="a ;b;";my @a=$a.trim.split(";");say @a.elems;for @a {.say}

[19:51] <evalable6> poohman, rakudo-moar afff3b0b2: OUTPUT: ¬´3‚ê§a ‚ê§b‚ê§‚ê§¬ª

[19:54] *** molaf joined
[19:57] <poohman> hello all,

[19:57] <poohman> m:my $a="a ;b;";my @a=$a.trim.split(";");say @a.elems;for @a {.say}

[19:57] <evalable6> poohman, rakudo-moar afff3b0b2: OUTPUT: ¬´3‚ê§a ‚ê§b‚ê§‚ê§¬ª

[19:58] <AlexDaniel> poohman: hi

[19:58] <poohman> any way to ensure the 3rd element does not get considered

[19:59] <AlexDaniel> m: my $a="a ;b;"; my @a=$a.trim.split(";", :skip-empty); say @a.elems; for @a {.say}

[19:59] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´2‚ê§a ‚ê§b‚ê§¬ª

[19:59] <AlexDaniel> m: my $a="a ;;b;"; my @a=$a.trim.split(";", :skip-empty); say @a.elems; for @a {.say}

[19:59] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´2‚ê§a ‚ê§b‚ê§¬ª

[20:00] <poohman> AlexDaniel: Thanks again

[20:01] *** Ven`` left
[20:12] *** pilne joined
[20:26] *** zorgate joined
[20:26] *** zorgate left
[20:28] *** vike joined
[20:33] *** patrickb joined
[20:37] <tbrowder> .seen dwarring

[20:37] <tellable6> tbrowder, I saw dwarring 2018-08-03T19:34:39Z in #perl6: * dwarring HTML::Canvas really is bit-rotted

[20:48] *** wamba left
[20:55] *** wamba joined
[21:11] *** rindolf left
[21:24] <tobs> I'm looking at a recent docs PR and noticed the formulation ¬´Versioning, authorship, and API can be applied via the adverbs :ver<>, :auth<> and :api<>¬ª. I'd like to ask around how you think about the use of the word "adverb" in that sentence.

[21:24] <tobs> It's something I've noticed a few times before, that literal colon pairs are referred to as adverbs, even when there is no verb they modify.

[21:25] <tobs> In this case, aren't they extended identifier syntax?

[21:26] <tobs> Maybe my understanding of adverb is too limited and this use is linguistically sound. But I would be reluctant to call something an adverb when it doesn't modify the behaviour of something sub-like.

[21:32] *** vike left
[21:33] *** poohman left
[21:34] *** vike joined
[21:44] <uzl[m]> tobs: "There is now a generalized adverbial form of Pair notation, also known as a "colon pair" form. The following table shows the correspondence to the "fatarrow" notation:"

[21:44] <uzl[m]> https://design.raku.org/S02.html#Adverbial_Pair_forms

[21:45] <uzl[m]> I think the reason you state makes sense but I'm not a linguist though. We might TimToady here ;-)!

[21:47] <uzl[m]> *might need

[21:48] *** Altai-man_ joined
[21:51] *** sena_kun left
[21:51] <tobs> uzl[m]: thanks, yes I see that they (along with a bunch of other stuff like :2<1110> number notation) are called adverbial forms. It doesn't quite dispel my doubts but synopses are a very good argument.

[21:53] <uzl[m]> tobs:  I go back to them more than I'd like to admit. üòÇ

[21:55] *** patrickb left
[21:58] *** lucasb joined
[22:13] <wildtrees[m]> is there something like :t / :type from ghci/haskell in the raku repl for looking at type signatures of functions and methods? 

[22:21] *** hahainternet left
[22:23] *** wamba left
[22:24] <timotimo> many things have introspection methods

[22:24] <timotimo> m: say &sqrt.raku

[22:24] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´proto sub sqrt ($, *%) {*}‚ê§¬ª

[22:24] <timotimo> m: say &sqrt.candidates.raku

[22:24] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´(multi sub sqrt (Numeric \x) { #`(Sub|49290128) ... }, multi sub sqrt (Cool \x) { #`(Sub|49290280) ... }, multi sub sqrt (num $a --> num) { #`(Sub+{Callable[num]}|49290432) ... })‚ê§¬ª

[22:25] <uzl[m]> m: .say for &sqrt.candidates>>.signature

[22:25] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´(Numeric \x)‚ê§(Cool \x)‚ê§(num $a --> num)‚ê§¬ª

[22:26] <wildtrees[m]> nifty, how about for a method? 

[22:26] <timotimo> method lookup is done with .^lookup or .^find_method

[22:26] <timotimo> the difference is one will pun roles for you, the latter one

[22:27] <timotimo> m: Str.^lookup("say")

[22:27] <camelia> rakudo-moar afff3b0b2: ( no output )

[22:27] <timotimo> m: Str.^lookup("say").raku.say

[22:27] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´proto method say (Mu: |) {*}‚ê§¬ª

[22:30] <wildtrees[m]> ok thanks 

[22:30] *** __jrjsmrtn__ left
[22:31] <cpan-raku> New module released to CPAN! Net::IP (2.1.1) by 03TBROWDER

[22:31] <uzl[m]> m: say Str.^lookup('say').candidates>>.signature

[22:31] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´((Mu: *%_))‚ê§¬ª

[22:31] <uzl[m]> m: say Str.^lookup('trim').candidates>>.signature

[22:31] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´((Str:D: *%_ --> Str:D))‚ê§¬ª

[22:31] *** __jrjsmrtn__ joined
[22:38] *** pecastro left
[23:03] *** |oLa| joined
[23:03] <SmokeMachine> I've being playing with the concept of monads... trying to understand it... and come up with this https://glot.io/snippets/fmaof6fik9

[23:04] <SmokeMachine> is there a better way of doing that?

[23:04] <SmokeMachine> I need to pass the type for Nothing... is there a better way of doing that?

[23:07] <wildtrees[m]> say Method.^methods #the error messages from this aren't awesome in the repl 

[23:07] <wildtrees[m]> m: say Method.^methods #the error messages from this aren't awesome in the repl 

[23:07] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´(gist BUILDALL raku The 'ForeignCode' class is a Rakudo-specific‚ê§implementation detail and has no serviceable parts inside The 'ForeignCode' class is a Rakudo-specific‚ê§implementation detail and has no serviceable parts inside package leave gist Th‚Ä¶¬ª

[23:08] *** |oLa| left
[23:10] *** aborazmeh joined
[23:10] *** aborazmeh left
[23:10] *** aborazmeh joined
[23:17] <wildtrees[m]> SmokeMachine:  I am not sure what your bind actually does, maybe you shoud implement bind in terms of join and fmap? 

[23:18] <SmokeMachine> wildtrees[m]: yes, fmap! I think that's how bind should be called

[23:20] <wildtrees[m]> :) 

[23:20] <SmokeMachine> wildtrees[m]: (sorry... I'm very new to this things...)

[23:21] <wildtrees[m]> I was thinking about the Maybe monad in raku the other day, and was wondering if you could just use Nil for Nothing, cause any type can be nil, and was wondering about adding an optional chaining method call operator, I think swift has something like that , if it's nil the method operator just returns nil without running the method, not sure how to do it though, kinda new to raku 

[23:21] <SmokeMachine> wildtrees[m]: I'm trying to implement an ACCEPTS to make Nothing match any Maybe[Type]

[23:23] <SmokeMachine> wildtrees[m]: you mean chaining method call operator like?

[23:23] *** telex left
[23:23] <wildtrees[m]> yea but Nothing needs to have a type, and sometimes that is figured out via type inference, in languages that support it , maybe some sort of coercion here? 

[23:23] <wildtrees[m]> ? already works?? 

[23:24] <SmokeMachine> m: given 42 { say .is-prime; say .head; say .tail }

[23:24] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´False‚ê§42‚ê§42‚ê§¬ª

[23:25] <SmokeMachine> m: "yes".?say

[23:25] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´yes‚ê§¬ª

[23:25] <wildtrees[m]> m: %h = %() ; say %h{"none"}.trim #something so you can chain trim onto that oh like that :) 

[23:25] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '%h' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5%h = %() ; say %h{"none"}.trim #somethin‚ê§¬ª

[23:26] <wildtrees[m]> m: my %h = %() ; say %h{"none"}.?trim

[23:26] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Nil‚ê§¬ª

[23:26] <wildtrees[m]> yea like that :)

[23:28] <SmokeMachine> m: class C { multi method ACCEPTS(42) {say "HERE"; True} }; sub a(--> C) { 42 }; a # should this work?

[23:28] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´Type check failed for return value; expected C but got Int (42)‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:29] <SmokeMachine> m: class C { multi method ACCEPTS(42) {say "HERE"; True} }; 42 ~~ C

[23:29] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´HERE‚ê§¬ª

[23:29] <SmokeMachine> m: class C { multi method ACCEPTS(42) {say "HERE"; True} }; say 42 ~~ C

[23:29] <camelia> rakudo-moar afff3b0b2: OUTPUT: ¬´HERE‚ê§True‚ê§¬ª

[23:31] <SmokeMachine> doesn't the test for return value use ~~?

[23:32] *** Xliff joined
[23:32] <Xliff> If a role has a TWEAK, then another role composed on the same object with die... right?

[23:32] <Xliff> I would think that a submethod in a role would run for all roles it is defined in.

[23:33] <Xliff> Gotta re-jigger some code, now. :/

[23:35] <Xliff> If I want a piece to run every time a role is punned... how would that be accomplished?

[23:37] *** lichtkind left
[23:40] *** mowcat left
[23:44] *** mowcat joined
[23:46] *** mowcat left
[23:49] *** sena_kun joined
[23:51] *** Altai-man_ left
[23:55] *** rbtca left
[23:56] *** rbtca joined
