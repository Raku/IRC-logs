[00:00] *** MasterDuke joined
[00:00] <tbrowder> hence the "ports?"

[00:03] <cfa> yeah

[00:03] <cfa> originally darwin ports, iirc

[00:03] <tbrowder> nevermind, i found the macports page, thnx

[00:03] <cfa> heh, sure

[00:03] <cfa> also, macports install to /opt/local (by default) so again, sandboxed

[00:03] <cfa> though i believe you can sandbox brew too

[00:06] <tbrowder> when you say sandbox you mean clean separation from normal sys files, where /opt replaced replaced the old /usr/local in the new file system standards i assume

[00:07] *** mowcat left
[00:07] <cfa> right

[00:08] <cfa> i.e., macports isn't clobbering anything in 'typical' system paths

[00:08] <cfa> i believe brew installs to its own tree then symlinks stuff into place but i could be wrong (and i'm certainly out of date on brew knowledge)

[00:08] <tbrowder> i just recently changed from the old irix standard of /usr/local/people to /home after several decades!

[00:08] <cfa> :)

[00:10] *** chloekek left
[00:11] <tbrowder> but i have been using /opt for a good while for some 3rd party stuff like google plus some commercial stuff

[00:17] <tbrowder> i see the houston perl/raku speaker/ topic list is starting to be shown. i see jmerelo and guifa and bruce gray among the raku speakers

[00:19] <tbrowder> i see no date/time matrix yet but i hope i can see most of the raku sessions

[00:19] <SmokeMachine> m: sub bla(:a[$, *@]) { say "here"}; bla :a[1,2,3]

[00:19] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub bla(:7‚èè5a[$, *@]) { say "here"}; bla :a[1,2,3]‚ê§¬ª

[00:20] <SmokeMachine> should this work? ^^

[00:20] <SmokeMachine> m: sub bla(:a([$, *@])) { say "here"}; bla :a[1,2,3]

[00:20] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´here‚ê§¬ª

[00:22] <jnthn> No, I don't think so

[00:23] <SmokeMachine> jnthn: why not?

[00:23] *** kktt007 joined
[00:25] *** hungrydonkey joined
[00:28] <SmokeMachine> jnthn: shouldn't named parameters/subsignatures accept the same syntax as pairs?

[00:30] <jnthn> No, because that'd imply :a($foo) was a sub-signature, but it's not, it's a parameter rename

[00:33] <SmokeMachine> jnthn: wouldn't a rename be `:a(:$foo)` or `:a(:b($foo))`? 

[00:34] <jnthn> Only if you want to expose both names

[00:34] <jnthn> And even that would be ambiguous

[00:35] <jnthn> So an unpack of a named always needs two levels of parens to know that's what we mean

[00:36] <jnthn> And I don't think the inconsistency of allowing :a[...] as a shortcut for :a([...]) is really worth it

[00:37] <SmokeMachine> make sense... (but I would prefere to use that way... :P )

[00:38] <jnthn> :)

[00:38] <jnthn> Sleep time o/

[00:40] <SmokeMachine> have a good night

[01:11] *** imcsk8 left
[01:13] *** imcsk8 joined
[01:25] *** hungrydonkey left
[01:34] *** sena_kun joined
[01:35] *** oodani left
[01:36] *** Altai-man_ left
[01:36] *** oodani joined
[01:51] *** PavelB left
[02:13] *** ufobat__ joined
[02:17] *** ufobat_ left
[02:22] *** molaf left
[02:26] *** titsuki left
[02:35] *** molaf joined
[02:51] *** cognomin_ joined
[02:54] *** cognominal left
[03:03] <guifa> tbrowder: where are you seeing the list?

[03:04] <tbrowder> i got an email that led me to a login...

[03:04] <tbrowder> my friend bill did too

[03:05] <tbrowder> but you are a speaker and so things nay be different for you

[03:05] <tbrowder> this is all new to me

[03:06] <tbrowder> much different than when i last attended two years ago

[03:07] <guifa> Ah, I haven‚Äôt actually registered with the conference yet.  Maybe I should do that :-)  

[03:07] <tbrowder> yes!

[03:07] <tbrowder> bill and i are registered

[03:08] <guifa> My mind has been all over the place the past few weeks ‚Äî¬†I‚Äôm defending the dissertation in a month 

[03:08] * guifa used Raku code all over the dissertation though :-)

[03:09] <tbrowder> whoa, good luck!

[03:09] <tbrowder> is it beind videoed?

[03:11] <tbrowder> i'll bet that's almost required these days

[03:12] <guifa> It‚Äôs being videoed because I have two committee members that can‚Äôt attend in person due to a last minute date change (yay jury duty ha).  But I don‚Äôt think the video will be released

[03:13] <guifa> The dissertation itself will though, and I‚Äôll be releasing a module or two based on it

[03:13] *** Maylay left
[03:13] <tbrowder> i look forward to seeing it

[03:14] <tbrowder> g'night all

[03:14] <guifa> It‚Äôs mostly boring literature stuff 

[03:14] <guifa> night!  

[03:27] <guifa> tbrowder: https://tpcih.sched.com/ I found

[03:33] *** Altai-man_ joined
[03:35] *** sena_kun left
[03:37] *** Maylay joined
[03:44] *** Actualeyes left
[03:54] *** eseyman left
[04:00] *** aborazmeh left
[04:23] <SmokeMachine> now the optional condition is also working: https://gist.github.com/FCO/b9e950e2180839a51f7f6598caa8a796

[04:30] *** hungrydonkey joined
[04:31] *** hungrydonkey left
[04:34] *** cfa left
[04:37] *** hungrydonkey joined
[05:13] *** charsbar left
[05:20] *** orinthe4 joined
[05:24] *** orinthe4 left
[05:24] *** orinthe4 joined
[05:28] *** orinthe4 is now known as orinsu

[05:29] *** orinsu left
[05:30] *** orinsu joined
[05:32] *** hungryd66 joined
[05:33] *** charsbar joined
[05:34] *** sena_kun joined
[05:34] *** orinsu left
[05:36] *** Altai-man_ left
[05:36] *** hungrydonkey left
[05:43] *** orinsu joined
[06:09] *** molaf left
[06:17] *** Doc_Holliwood joined
[06:33] *** sauvin joined
[06:38] *** jmerelo joined
[06:41] *** rindolf joined
[07:05] <Geth> ¬¶ doc: e6b1e287ce | (JJ Merelo)++ | doc/Language/pod.pod6

[07:05] <Geth> ¬¶ doc: Some improvements while preparing for #2632

[07:05] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/e6b1e287ce

[07:05] <Geth> ¬¶ doc: 9c533237b0 | (JJ Merelo)++ | doc/Language/pod.pod6

[07:05] <Geth> ¬¶ doc: Adds :numbered (#) configuration option  #2632

[07:05] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/9c533237b0

[07:05] <linkable6> Link: https://docs.raku.org/language/pod

[07:05] <linkable6> DOC#2632 [open]: https://github.com/Raku/doc/issues/2632 [Hacktoberfest][RFE][big][docs][good first issue][help wanted][new][‚ö† Top Priority ‚ö†] Checklist for 6.d

[07:05] *** wamba joined
[07:11] *** Doc_Holliwood left
[07:12] <cpan-raku> New module released to CPAN! Term::Choose::Util (1.3.2) by 03KUERBIS

[07:33] *** Altai-man_ joined
[07:35] *** sena_kun left
[07:38] *** jmerelo left
[07:40] *** eseyman joined
[07:40] *** cognominal joined
[07:44] *** cognomin_ left
[07:53] *** domidumont joined
[07:57] *** withp left
[08:03] *** Doc_Holliwood joined
[08:08] *** rindolf left
[08:28] *** maggotbrain left
[08:29] *** maggotbrain joined
[08:35] *** dakkar joined
[08:39] *** wamba left
[08:49] *** rindolf joined
[09:05] *** wamba joined
[09:16] *** Black_Ribbon left
[09:27] *** NODE left
[09:29] *** NODE joined
[09:31] *** ssm joined
[09:34] *** sena_kun joined
[09:35] *** Altai-man_ left
[09:38] *** cpan-raku left
[09:38] *** cpan-raku joined
[09:38] *** cpan-raku left
[09:38] *** cpan-raku joined
[09:42] *** NODE left
[09:44] *** NODE joined
[09:54] *** orinsu left
[10:06] *** hungryd66 left
[10:10] *** hungrydonkey joined
[10:11] *** pecastro joined
[10:11] *** atta left
[10:12] *** hungryd10 joined
[10:12] *** hungrydonkey left
[10:17] *** hungrydonkey joined
[10:17] *** hungryd10 left
[10:20] *** hungryd72 joined
[10:20] *** hungrydonkey left
[10:33] *** salva joined
[10:37] *** Doc_Holliwood left
[10:37] *** hungrydonkey joined
[10:38] *** wamba left
[10:40] *** hungryd72 left
[10:44] *** mowcat joined
[10:49] *** Sgeo left
[10:50] *** Sgeo joined
[10:51] *** hungrydonkey left
[10:52] *** hungrydonkey joined
[10:54] *** Doc_Holliwood joined
[10:58] <Altreus> Has anyone written a vim rule to collapse raku pod? I guess it's called ROD now?

[10:58] <Altreus> wait, the P wasn't Perl, never mind

[10:59] <Altreus> Anyway, I have a simple folding rule to collapse P5 pod but I can't figure one out to collapse raku pod

[10:59] <Altreus> cos I didn't figure that one out in the first place :)

[11:07] *** Redfoxmoon left
[11:10] *** Redfoxmoon joined
[11:21] *** NODE left
[11:22] *** NODE joined
[11:33] *** Altai-man_ joined
[11:36] *** sena_kun left
[11:38] *** mowcat left
[11:38] *** wamba joined
[11:50] *** kensanata joined
[11:53] *** MasterDuke left
[12:08] *** hungrydonkey left
[12:08] *** hungryd52 joined
[12:12] *** hungryd52 left
[12:13] *** hungrydonkey joined
[12:26] *** dakkar left
[12:27] *** dakkar joined
[13:13] *** aborazmeh joined
[13:13] *** aborazmeh left
[13:13] *** aborazmeh joined
[13:31] *** titsuki joined
[13:34] *** sena_kun joined
[13:36] *** Altai-man_ left
[13:46] *** aborazmeh left
[13:50] *** pmurias joined
[14:39] *** lucasb joined
[14:40] *** dansolo42 left
[14:48] *** dansolo42 joined
[14:50] *** rindolf left
[14:55] *** molaf joined
[14:58] *** rindolf joined
[15:07] *** libertas left
[15:08] *** wamba left
[15:09] *** kktt007 left
[15:10] *** hungrydonkey left
[15:20] *** moritz_ is now known as moritz

[15:33] *** libertas joined
[15:33] *** Altai-man_ joined
[15:34] *** [Sno] left
[15:35] *** [Sno] joined
[15:36] *** sena_kun left
[15:39] *** hungrydonkey joined
[15:41] <Ulti> yeah I kind of wish there was a more universal formatted docs standard languages implemented preferably more markdown like, the nice thing about POD and Sphinx and friends is they have a model of the API of a library... you could just stub in a new language with documentation from existing other languages if it was all the same

[15:45] *** mowcat joined
[15:49] *** veesh_ joined
[15:50] *** veesh left
[15:51] *** veesh_ is now known as veesh

[15:52] *** kensanata left
[15:58] *** hungrydonkey left
[15:59] *** hungrydonkey joined
[16:03] <Grinnz> Altreus: i've said before but I think it's perfectly reasonable to keep calling it Pod6, it's very much like a different version of POD - on the other hand, of late it seems like Rakudoc is a better name

[16:04] *** toddr joined
[16:04] <Altreus> Yeah I forgot the P was Plain

[16:04] <Altreus> no harm in considering it version 6 of POD

[16:04] <Altreus> Nevertheless, I still need vim to make it go away :)

[16:09] *** pmurias left
[16:38] *** domidumont left
[16:39] *** Redfoxmoon left
[16:39] *** Redfoxmoon joined
[17:03] *** jmerelo joined
[17:03] <jmerelo> The Perl Foundation has not been accepted this year in Google Summer of Code

[17:03] <jmerelo> Just got the message.

[17:06] <Altreus> Blame the president!

[17:08] * jmerelo feeling sad anyway

[17:08] <jmerelo> We can still try Outreachy

[17:08] <jmerelo> 8 days to go; submit your projects and ideas here https://github.com/perl-foundation-outreach/outreachy-2020-ideas

[17:17] <lizmat> .oO( maybe a Raku Foundation would have gotten it )

[17:18] *** dakkar left
[17:21] <jmerelo> lizmat: maybe :-) But we have no feedback whatsoever. 

[17:34] *** sena_kun joined
[17:36] *** Altai-man_ left
[17:37] *** pecastro left
[18:04] *** hungrydonkey left
[18:17] <SmokeMachine> Voldenet: sorry to interrupt, but I have a question: if we have this rule: `event bla { match { ble(#1) ble(a == #1.a) } }` and we receive 3 events: `{ :type<ble>, :42a }`, `{ :type<ble>, :42a }`, `{ :type<ble>, :42a }`. Should we emit the `bla` event once, twice or 3 times? It could match the 1st and the 2nd, the 1st and the 3rd and/or the 2nd and the 3rd...

[18:17] <SmokeMachine> Anyone??? ^^

[18:19] <SmokeMachine> I mean: should I erase a query after it‚Äôs matched?

[18:20] <SmokeMachine> Probably we should not erase the first layer queries... or the patterns would be matched only once...

[18:20] <SmokeMachine> But what about the higher layers?

[18:21] <Voldenet> SmokeMachine: imho twice

[18:22] <SmokeMachine> 1&&2 and 1&&3 or 1&&2 and 2&&3?

[18:22] <Voldenet> 1&&2 and 2&&3

[18:22] <Voldenet> at least that's what I would expect

[18:23] <SmokeMachine> So, after Mach the 2 we erase this 2nd layer?

[18:23] <Voldenet> I think that every full instance of the rule should match once

[18:24] <Voldenet> so ble(#1) matches [1,2] and ble(a == #1.a) matches [2,3]

[18:24] <SmokeMachine> Voldenet: and what would mean `bla()*` without a time? Would it never emit?

[18:25] <Voldenet> Huh, that's a tricky question

[18:25] <Voldenet> How about `match-once` `every-match` and `match`

[18:26] *** domidumont joined
[18:26] *** domidumont left
[18:26] <Voldenet> maybe match-all instead of every-match

[18:26] <SmokeMachine> What about ble(#1) matching the 1st and bla(a==#1.a) matching the 3rd?

[18:27] <Voldenet> match-once - emit the event exactly once the match is found, match-all when any matching combination of events occurs, match only firing when rule is satisfied per chain

[18:28] *** domidumont joined
[18:28] <Voldenet> I don't think firing 3 events is very practical here

[18:28] <SmokeMachine> Voldenet: you mean something like this? https://docs.raku.org/language/regexes#Adverbs

[18:29] <Voldenet> hm, either that, or just different identifiers for different type of matches

[18:31] *** mensvaga joined
[18:31] <SmokeMachine> I mean: :g, :ex, :ov

[18:32] <Voldenet> it would work

[18:34] *** chloekek joined
[18:35] *** aluaces left
[18:36] <SmokeMachine> Voldenet: have you seen that [] and & are working?

[18:36] <Voldenet> yeah, though I'm not yet sure what is it useful for

[18:36] <El_Che> lizmat: not to fun in raku activities under the Perl umbrella

[18:36] <Voldenet> I guess I'd have to use it for something :D

[18:36] <El_Che> it kinds od defeats the purpose, PR wise

[18:38] <lizmat> El_Che: agree, that's why I suggested having a Raku Foundation under the YAS umbrella

[18:38] <lizmat> but that was considered not needed   :-(

[18:38] <El_Che> it makes sense to me

[18:39] <SmokeMachine>  [] os just a way to group some stuff, and, `a() & b()` would match `a, b` as well `b, a`

[18:39] <Voldenet> SmokeMachine: the problem with "every match emitted" probably would be that it'd fire `f(n) = n - 1 + f(n - 1)` events per match, that's not a data set I'd like to have emitted :P

[18:40] <SmokeMachine> Voldenet: so, `[a() & b()] c()` would match a, b, c and b, a, c...

[18:40] <El_Che> it does not mean we don't love our Perl breathen. People can be part of both foundations, communities, etc

[18:43] <SmokeMachine> Voldenet: no, it would only emit when matched with the whole chain... that rule I‚Äôve wrote is a very loose wrote...

[18:44] <SmokeMachine> m: say ‚Äúaaaaaaa‚Äù ~~ /:ex a .* a/

[18:44] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unrecognized regex modifier :ex‚ê§at <tmp>:1‚ê§------> 3say ‚Äúaaaaaaa‚Äù ~~ /:7‚èè5ex a .* a/‚ê§    expecting any of:‚ê§        term‚ê§¬ª

[18:45] <SmokeMachine> m: say ‚Äúaaaaaaa‚Äù ~~ m:ex/a .* a/

[18:45] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´(ÔΩ¢aaaaaaaÔΩ£ ÔΩ¢aaaaaaÔΩ£ ÔΩ¢aaaaaÔΩ£ ÔΩ¢aaaaÔΩ£ ÔΩ¢aaaÔΩ£ ÔΩ¢aaÔΩ£ ÔΩ¢aaaaaaÔΩ£ ÔΩ¢aaaaaÔΩ£ ÔΩ¢aaaaÔΩ£ ÔΩ¢aaaÔΩ£ ÔΩ¢aaÔΩ£ ÔΩ¢aaaaaÔΩ£ ÔΩ¢aaaaÔΩ£ ÔΩ¢aaaÔΩ£ ÔΩ¢aaÔΩ£ ÔΩ¢aaaaÔΩ£ ÔΩ¢aaaÔΩ£ ÔΩ¢aaÔΩ£ ÔΩ¢aaaÔΩ£ ÔΩ¢aaÔΩ£ ÔΩ¢aaÔΩ£)‚ê§¬ª

[18:45] <SmokeMachine> Something like this ^^

[18:52] *** titsuki left
[18:53] <Voldenet> Yeah, so it would match that much if exhaustive matching is requested

[18:54] *** aborazmeh joined
[18:54] *** aborazmeh left
[18:54] *** aborazmeh joined
[18:54] <Geth> ¬¶ doc: e0eb76d188 | Coke++ | util/aspell-wrapper.t

[18:54] <Geth> ¬¶ doc: No longer needed

[18:54] <Geth> ¬¶ doc: 

[18:54] <Geth> ¬¶ doc: Related to #2832

[18:54] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/e0eb76d188

[18:54] <linkable6> DOC#2832 [closed]: https://github.com/Raku/doc/issues/2832 [bug][external][xt] xt/aspell.t crashes

[18:57] *** aluaces joined
[18:59] <Voldenet> SmokeMachine: but if I wanted to implement port knocking with this (because why not :P), I'd need only specific by-ip sequence to trigger it

[19:01] <Voldenet> (so randomly using nmap wouldn't open all ports, but `await knock(42); await knock(394); await knock(999);`)

[19:03] *** molaf left
[19:07] <Voldenet> SmokeMachine: it may be useful to be able to somehow describe grouping before filtering it

[19:09] <SmokeMachine> Voldenet: I think I don‚Äôt get it...

[19:14] <guifa> jmerelo: don‚Äôt worry, I‚Äôll still do my project regardless.

[19:14] <jmerelo> guifa: great

[19:16] <SmokeMachine> Voldenet: how is this port knocking implemented?

[19:18] *** grayrider left
[19:18] <guifa> jmerelo: also for another project, it looks like I‚Äôm about to have to create a non-text-based pattern matching thing hooray ha

[19:19] *** sauvin left
[19:19] <Voldenet> SmokeMachine: i've got 6 ports, if I need firewall access to all of them, I need to connect via tcp to them in the right order

[19:19] <Voldenet> s/all of them/all ports on the target machine/

[19:19] <Voldenet> otherwise it just doesn't do anything

[19:22] <SmokeMachine> Voldenet: sorry, I was seeing port knocking but reading port scanning... I‚Äôm sorry... now I got it...

[19:28] <SmokeMachine> `access(#1, port == 42), access(ip == #1.ip, port == 394), access(ip == #1.ip, port == 999)`

[19:29] <Voldenet> ‚Ä¶but wouldn't it work if someone knocked 42 999 394 999?

[19:29] *** wamba joined
[19:29] <Voldenet> it'd just decide that 999 is not being matched

[19:29] <SmokeMachine> no...

[19:30] <SmokeMachine> `access(#1, port == 42) & access(ip == #1.ip, port == 394) & access(ip == #1.ip, port == 999)` this would accept any order...

[19:30] <jmerelo> guifa: congrats!

[19:30] <Voldenet> oh, good then, exactly what i'd expect

[19:31] <lizmat> SmokeMachine: is | still XOR ?  that feels... wrong and inconsistent with Raku

[19:31] <SmokeMachine> (Without the commas between the event marchers...)

[19:32] <Grinnz> Voldenet: by any chance is your name Tom Navelo Riddle?

[19:32] <SmokeMachine> lizmat: I haven‚Äôt thought about | yet...

[19:32] <Voldenet> Grinnz: No

[19:33] <Voldenet> Grinnz: It is, but it's not by chance

[19:33] <Voldenet> :P

[19:33] <SmokeMachine> m: say ‚Äúblable‚Äù ~~ /bla | ble/

[19:33] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´ÔΩ¢blaÔΩ£‚ê§¬ª

[19:33] *** Altai-man_ joined
[19:34] <Voldenet> uh, ^ is xor almost everywhere

[19:34] <SmokeMachine> When I say XOR, I think I don‚Äôt really mean XOR...

[19:35] <SmokeMachine> I was meaning something like | on regexp...

[19:36] <SmokeMachine> lizmat: ^^

[19:36] *** sena_kun left
[19:36] <Grinnz> that's just "or"

[19:37] <SmokeMachine> Yes...

[19:38] <lizmat> ok, *phew*  :-)

[19:38] <SmokeMachine> :( sorry

[19:39] <SmokeMachine> lizmat: have you any opinion about what should be matched on my first msg?

[19:41] *** jmerelo left
[19:41] <lizmat> losing events without actually asking for it (with something like a .unique or so), feels wrong, so at first sight, I'd day 3 events emitted

[19:43] <[Coke]> anyone in chat planning on attending the Perl/Raku conference in Houston this year? If so, please consider submitting a Raku talk!

[19:43] <[Coke]> if you don't know what to talk about, I'm sure we could crowd source that.

[19:46] <SmokeMachine> lizmat: so you think that should emit for 1&&2, 2&&3 and 1&&3?

[19:47] <lizmat> yeah, but please don't assign too much value to my opinion

[19:47] <Voldenet> SmokeMachine: I think that question should be asked to the person that writes the matcher and the design should allow all the options

[19:48] <SmokeMachine> Voldenet: yes, that makes sense...

[19:50] <Voldenet> However, knowing the difference between version with ',' and without, I think it'd be fine to match everything

[19:50] <SmokeMachine> Voldenet: suggestions of syntax?

[19:50] *** domidumont left
[19:50] <SmokeMachine> (The , was an error)

[19:51] <Voldenet> `match { :ex ‚Ä¶ }` or `match:ex { ‚Ä¶ }`

[19:52] <SmokeMachine> I was thinking that :ex maybe should be the default...

[19:52] *** Black_Ribbon joined
[19:54] <Voldenet> but then you don't have an adverb that says the opposite

[19:54] <lizmat> :!ex ?

[19:54] <Voldenet> fair enough

[19:55] <SmokeMachine> Makes sense...

[19:56] <lizmat> a lot of people forget that you can used named Booleans that way in Raku, well, at least in the core

[19:57] <lizmat> it's a part where the developers get tortured

[19:57] <lizmat> because everytime you have a :$foo as a parameter

[19:57] <lizmat> you actually need to check if $foo is True  :-)

[19:57] *** aborazmeh left
[19:57] <SmokeMachine> Do you think just clearing the matched query would make that work?

[20:03] <rypervenche> So a negative named parameter boolean would be :!$foo then?

[20:03] <lizmat> m: dd (foo => True)

[20:03] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´:foo‚ê§¬ª

[20:04] <lizmat> m: dd (foo => False)

[20:04] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´:!foo‚ê§¬ª

[20:04] <lizmat> rypervenche ^^

[20:04] <lizmat> if that's what you mean with negative

[20:04] <rypervenche> Yes. So no need for $ then?

[20:05] <lizmat> m: my $foo = 42; dd (:$foo)

[20:05] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´:foo(42)‚ê§¬ª

[20:05] <lizmat> :$foo is just short for foo => $foo

[20:07] <rypervenche> Ahhhhh, I haven't been able to find the page on this for a while. It's the Pair syntax. Ok, that makes sense.

[20:07] <Voldenet> m: say ":" x 5 ~~ m:!ex/.*/

[20:07] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´ÔΩ¢:::::ÔΩ£‚ê§¬ª

[20:07] <Voldenet> ‚Ä¶right

[20:10] <El_Che> weekly: https://www.reddit.com/r/rakulang/comments/f6vxes/design_flaws_in_raku

[20:10] <notable6> El_Che, Noted! (weekly)

[20:17] <tbrowder> jmerelo: sorry about the news...

[20:17] <tellable6> tbrowder, I'll pass your message to jmerelo

[20:19] *** cfa joined
[20:22] <rypervenche> lizmat: So I just tried this again. Does :!$thing not work to set a boolean as False by default? Am I doing the syntax wrong? Or would we simply only check to see if :$foo is True and if it's (Bool) then it's considered false?

[20:23] <rypervenche> I may have orded that badly. I'm looking to set a boolean to false by default, unless I use the CLI option to make it true.

[20:24] <lizmat> m: sub a(:$foo = False) { dd $foo }; a; a :foo; a :!foo

[20:24] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´Bool::False‚ê§Bool::True‚ê§Bool::False‚ê§¬ª

[20:24] <rypervenche> Ah ok, so no shortcut syntax then.

[20:25] <lizmat> m: sub a(:!$foo) { dd $foo }

[20:25] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub a(:7‚èè5!$foo) { dd $foo }‚ê§¬ª

[20:25] <lizmat> no

[20:25] <lizmat> I guess you could open a problem-solving issue to allow that 

[20:25] <rypervenche> Is that something that we would want for consistency?

[20:26] <rypervenche> I'll go ahead and open one then. Thanks.

[20:26] <lizmat> yeah...  it feels natural and it's a compilation error atm

[20:31] <rypervenche> Oh, I'm an idiot. :$foo doesn't default to True.

[20:35] <rypervenche> Sorry about that. I had a misunderstanding of how :$foo worked for booleans...for some reason. I don't think :$!foo would need to be added in that case then.

[20:35] <lizmat> m: sub a(:$foo = True) { dd $foo }; a; a :foo; a :!foo

[20:35] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´Bool::True‚ê§Bool::True‚ê§Bool::False‚ê§¬ª

[20:35] <lizmat> okidoki  :-)

[20:39] *** leah2 left
[20:43] *** leah2 joined
[20:56] *** wamba left
[21:00] *** leah2 left
[21:00] *** pmurias joined
[21:04] *** leah2 joined
[21:07] *** molaf joined
[21:12] *** pecastro joined
[21:18] <SmokeMachine> About signature and consistency with pair syntax, yesterday I‚Äôve asked here if `sub bla(:a[$,$]) {}` should be equivalent to `sub bla(:a([$,$])) {}`

[21:19] <SmokeMachine> m: sub bla(:a[$, $]) {}; bla [1, 2]

[21:19] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub bla(:7‚èè5a[$, $]) {}; bla [1, 2]‚ê§¬ª

[21:20] <SmokeMachine> m: sub bla(:a[$, $]) {}; bla :a[1, 2]

[21:20] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub bla(:7‚èè5a[$, $]) {}; bla :a[1, 2]‚ê§¬ª

[21:20] <SmokeMachine> m: sub bla(:a([$, $])) {}; bla :a[1, 2]

[21:20] <camelia> rakudo-moar 8c995febd: ( no output )

[21:22] <SmokeMachine> lizmat: ^^

[21:24] <lizmat> jnthn would really know if that could be done...

[21:27] *** stoned75 joined
[21:28] <jnthn> SmokeMachine: I said no yesterday. What wasn't clear?

[21:33] <SmokeMachine> jnthn: yes, that was... I was trying to say that if it was a no for that, probably it would be a no for :!$foo on the signature as well...

[21:34] <jnthn> What would that mean?

[21:34] <jnthn> Other than a bad time when I typo :$!foo... :)

[21:34] *** sena_kun joined
[21:34] <rypervenche> SmokeMachine: That was a mistake on my end. I had misunderstood how :$foo worked. So :!$foo wouldn't make sense, I think.

[21:35] *** patrickb joined
[21:35] <jnthn> Or more usefully: what semantics are you looking for?

[21:35] <patrickb> o/

[21:35] <SmokeMachine> I‚Äôve probably misread that...

[21:36] <patrickb> jmerelo: Is there a way to find out why we were rejected at this years GSoC? That'd be really good to know.

[21:36] <tellable6> patrickb, I'll pass your message to jmerelo

[21:36] *** Altai-man_ left
[21:36] <patrickb> jmerelo: Was the TPF organization deleted? When I try to log in with my google account it says I'm not part of any organization anymore...

[21:36] <tellable6> patrickb, I'll pass your message to jmerelo

[21:37] <SmokeMachine> I‚Äôve read lizmat saying that a problem solver issue could be open to ask for :!$foo, and I was trying to say that probably not... sorry if I misunderstood...

[21:37] <rypervenche> SmokeMachine: For some reason I was thinking that :$foo made $foo default to True, so I wanted a default False as well. But :$foo is just a named parameter that is undefined until you pass an argument to it. So it was my fault.

[21:38] <rypervenche> I'm still new to the language and was just trying to be helpful. :X

[21:38] <lizmat> jnthn: I think the idea was that (:!$foo) would be equivalent to (:$foo = False)

[21:38] <lizmat> in any case, that's how I understood it

[21:39] <jnthn> But if $foo { } will come out false anyway without assigning the default, so just type-constrain it to bool and be happy :)

[21:39] <jnthn> (or don't, and be happy enough anyway...)

[21:40] <lizmat> yeah... except it wouldn't be a Bool... but yeah  :-)

[21:41] <lizmat> jnthn: Promise eqv Promise, should that always check the result (and block if necessary?)

[21:41] <lizmat> m: my $p := Promise.new; dd $p eqv $p   # doesn't hang

[21:41] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´Bool::True‚ê§¬ª

[21:42] <lizmat> m: my $p = Promise.new; dd $p eqv $p   # hangs

[21:42] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´Bool::True‚ê§¬ª

[21:42] <lizmat> eh?

[21:42] <lizmat> m: my $p = Promise.new; dd $p eqv $p<>   # hangs

[21:43] <lizmat> feels like that piece of code should always hang

[21:44] <jnthn> lizmat: I don't think anything should implicitly dereference a Promise

[21:44] <jnthn> Only .result and await

[21:44] <jnthn> So far as eqv goes, they're opaque references

[21:44] <lizmat> so, "nqp::eqaddr(a,b) || a.result eqv b.result" is ok with you, provided some deconts are mixed in ?

[21:44] <jnthn> Having eqv lock up feels...un-good

[21:45] <lizmat> ah, ok, gotcha the wrong way around

[21:46] <jnthn> I'd be wary of doing anything like "well, if they're both kept, compare the values" too, 'cus I fear it'll lead to unreliable code that can fail if it gets unlucky with timing

[21:46] <jnthn> So probably best is just to not try to be magical here

[21:47] *** camelia left
[21:47] <jnthn> (But were it going to, it should `await` rather than `.result`)

[21:50] <lizmat> that code has been in there for quite some time  :-)

[21:51] <lizmat> since Oct 2016 actually  :-)

[21:52] <lizmat> actually, it predates that

[21:52] *** wamba joined
[21:53] <lizmat> jnthn: no spectest breakage

[21:55] <lizmat> will keep it for after the release, to be on the save side

[21:59] <jnthn> OK

[21:59] <jnthn> If there happens to some day be vast demand for this kind of thing, I guess we can always have an A meta-operator :P

[22:00] <jnthn> But...I've yet to see it :)

[22:19] *** MasterDuke joined
[22:27] *** mowcat left
[22:31] * lizmat calls it a day&

[22:35] *** wamba left
[22:40] *** mensvaga left
[22:40] *** molaf left
[22:44] <[Coke]> night!

[23:02] *** rindolf left
[23:03] *** patrickb left
[23:33] *** Altai-man_ joined
[23:34] *** imcsk8 left
[23:36] *** imcsk8 joined
[23:36] *** sena_kun left
[23:38] *** lucasb left
[23:50] *** aborazmeh joined
[23:50] *** aborazmeh left
[23:50] *** aborazmeh joined
[23:56] *** pecastro left
