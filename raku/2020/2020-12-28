[00:00] *** Tirifto left
[00:06] *** mowcat left
[00:43] *** notagoodidea left
[00:58] *** pecastro left
[01:24] *** rypervenche left
[01:32] *** rypervenche joined
[02:18] *** Xliff joined
[02:22] *** guifa2 joined
[02:22] *** cpan-raku left
[02:22] *** cpan-raku joined
[02:22] *** cpan-raku left
[02:22] *** cpan-raku joined
[02:23] <guifa2> El_Che: I'm concerned about when users install the module.  It's not hitting it when I do `raku -Ilib` for my test files, but it's definitely hitting it when using `zef install .`

[02:27] *** guifa2 left
[02:34] *** guifa2 joined
[02:44] *** guifa2 left
[02:45] *** guifa2 joined
[03:19] *** guifa2 left
[03:19] *** guifa2 joined
[03:27] *** vrurg left
[03:30] *** rindolf joined
[03:33] *** vrurg joined
[04:00] <raku-bridge> <frost> m:([*] 1, ([+] 1,2,3))

[04:00] <evalable6> frost, rakudo-moar 5df809e29: OUTPUT: «»

[04:00] <raku-bridge> <frost> m:([*] 1, ([+] 1,2,3)).say

[04:00] <evalable6> frost, rakudo-moar 5df809e29: OUTPUT: «6␤»

[04:33] *** evalable6 left
[04:36] *** evalable6 joined
[04:56] <jmou> m: say '#' ~~ /^\#/

[04:56] <camelia> rakudo-moar 5df809e29: OUTPUT: «｢#｣␤»

[04:56] <jmou> m: say '#' ~~ /^ \#/

[04:56] <camelia> rakudo-moar 5df809e29: OUTPUT: «5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3say '#' ~~ /^ \#/7⏏5<EOL>␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3say '#' ~~ /^ \#/7⏏5<EOL>␤    expecting any of:␤        infix stopper…»

[04:57] <jmou> is it weird that the regex with a space doesn't parse?

[04:59] *** vivelakira joined
[05:00] <vivelakira> Hi. I’m a student currently working on my dissertation about Raku. The topic is evaluating Raku(perl6) for student with relevant experience. I finally decided to choose to evaluate whether Raku is a good language when dealing with high concurrency for the angle of the topic. However, my problem is I can’t find any papers about Raku’s

[05:00] <vivelakira> concurrency except official website. Also, I have no idea about how to evaluate Raku’s concurrency (e.g. what program should I use, which language should be compared with Raku). Could anyone give me some hints about it? That would be very very helpful to me. Thank you.

[05:06] <guifa2> jmou: that does seem weird, I'd be curious to know what's causing the issue on it

[05:07] <guifa2> vivelakira: for concurrency, I'd imagine comparing with a language like go might be good.  You probably won't find many papers (at least, in the academic sense) written on Raku at the moment, but jnthn (Jonathan Worthington) has a number of talks on the topic at conferences that are available on YouTube and he also puts some of his slides up.  He's the main person who has worked with concurrency latey

[05:08] <guifa2> bisectable6: say '#' ~~ /^ \#/

[05:08] <bisectable6> guifa2, Will bisect the whole range automagically because no endpoints were provided, hang tight

[05:09] <bisectable6> guifa2, Nothing to bisect!

[05:09] <bisectable6> guifa2, Output on all releases: https://gist.github.com/0e087d1a8b04ff33b1b42c4b8b019fff

[05:09] <guifa2> jmou: ^^ whatever it is, it's been that way forever

[05:10] <jmou> ok it's not just me!

[05:10] <jmou> is it helpful if i file a bug?

[05:11] <jmou> these bots are pretty great

[05:11] <guifa2> jmou: probably.  moritz might have an idea if there's something I'm missing (it's a bit late, so maybe my brain is missing something obvious)

[05:13] <jmou> same, relearning regexes is an interesting exercise

[05:14] <jmou> err where do bugs get filed?

[05:14] *** ToddAndMargo joined
[05:14] <ToddAndMargo> Hi All.  Anyone on newbie duty?  IN the following https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6337:multi method contains(Str:D: Str:D $needle --> Bool:D) {338:nqp::hllbool(nqp::isne_i(nqp::index($!value,$needle,0),-1))339:} 

[05:15] <ToddAndMargo> Where does "$!value" comes from and what is it?

[05:16] *** Doc_Holliwood joined
[05:17] <guifa2> $!value is an attribute of an object of type Str

[05:17] <guifa2> it's a very internal value

[05:19] <guifa2> It's actually defined in the bootstrap file, at https://github.com/rakudo/rakudo/blob/5df809e29cd2e7ae496a33013b27d2f7b52c7f7d/src/Perl6/bootstrap.c/BOOTSTRAP.nqp#L3427

[05:20] <vivelakira> guifa2: Thank you very much. It seems that there is very little reseach about raku's concurrency, and unfortunately i'm not farmiliar about go. So I'm thinking if i can change an angle for my dissertation. What angle would you recommend that I can use to evaluate for my dissertation topic(the gradual typing has been chosen by somone else)?

[05:20] <guifa2> I admit I'm not really sure what CS dissertations look like.  My dissertation was on medieval literature lol

[05:23] <jmou> guifa2: https://github.com/rakudo/rakudo/issues/4142 fyi, thanks!

[05:23] *** brtastic joined
[05:24] <ToddAndMargo> And line 19 defines the class.

[05:25] <ToddAndMargo> Follow on question on line 19:  my class BOOTSTRAPATTR {    has $!name;    has $!type;

[05:25] <ToddAndMargo> Why do I see a lot of examples with a dot ($.name) and these have "$!"?

[05:28] <vivelakira> There is many characteristics of raku such as Laziness, subset, but I'm not sure they can be enough to evaluate for a dissertation :9

[05:28] <guifa2> ToddAndMargo: $.foo calls an accessor method

[05:29] <guifa2> by default, when you define a class like

[05:29] <guifa2> class Foo { has $.bar }

[05:29] <guifa2> Raku will behind the scenes make a method that's defined as

[05:29] <guifa2> method bar { return $!bar }

[05:30] <guifa2> the $!foo variant accesses the variable directly — but it's only available inside of a class

[05:31] <ToddAndMargo> Thank you!

[05:34] <guifa2> vivelakira: you might try shooting jnthn an e-mail, but being the holidays no idea if he'll respond quickly 

[05:35] <vivelakira> Thank you for your advice :)

[05:36] <guifa2> sorry I can't be more helpful.  But good luck with it.  You might also try asking around here when it's afternoon / early evening in Europe, as there are more people online then

[06:00] <ToddAndMargo> Another newbie question.  Inside a class' method, exactly what is "self".  I can pick it up by context from 

[06:00] <ToddAndMargo>    class PrintTest {       has Str $.Msg;       method PrintMsg()  {          print "self   = <" ~ self.Msg ~ ">\n";          print "self   = <" ~ self.Str ~ ">\n";          print "self   = <" ~ self ~     ">\n";       }   }   my $x = PrintTest.new(Msg => "abc");    $x.PrintMsg

[06:01] <ToddAndMargo> as the value fed to the method, but do I have the defination down correct?

[06:03] <guifa2> self is the current instance of an object

[06:04] <guifa2> if I have a class like

[06:04] <guifa2> class Person { has $.name }

[06:04] <guifa2> I'll make new people by doing

[06:04] <guifa2> my $personA = Person.new( name => "John" ); my $personB = Person.new( name => "Alice" )

[06:05] <guifa2> inside of a class, sometimes you want to reference not the abstract idea of a person, but a single concrete person

[06:05] <guifa2> you might have a method like

[06:06] <guifa2> method introduce { say "Hi, my name is {self.name}" }

[06:06] <guifa2> (this is equivalent to $.name)

[06:19] *** sena_kun joined
[06:22] <guifa2> It's mainly useful when in a method you need to pass a reference to the entire specific object.  For instance "say self" or similar 

[06:41] *** aborazmeh joined
[06:41] *** aborazmeh left
[06:41] *** aborazmeh joined
[07:03] *** vivelakira left
[07:15] *** Doc_Holliwood left
[07:20] *** parabolize left
[07:21] *** Ovidius joined
[07:38] *** frost-lab joined
[07:41] *** patrickb joined
[07:41] *** aindilis left
[07:45] *** spycrab0 left
[07:45] *** brtastic left
[07:46] *** Grinnz left
[07:46] *** spycrab0 joined
[07:47] *** zostay left
[07:48] *** zostay joined
[07:49] *** Grinnz joined
[07:53] *** aborazmeh left
[07:56] *** Altai-man joined
[07:59] *** sena_kun left
[08:13] *** Sgeo left
[08:13] *** aborazmeh joined
[08:13] *** aborazmeh left
[08:13] *** aborazmeh joined
[08:17] *** wamba joined
[08:18] *** aborazmeh left
[08:23] *** brtastic joined
[08:24] *** aborazmeh joined
[08:24] *** aborazmeh left
[08:24] *** aborazmeh joined
[08:25] *** aborazmeh left
[08:27] *** Doc_Holliwood joined
[08:28] *** orinthe left
[08:28] *** orinthe joined
[08:29] *** sjm_uk joined
[08:35] *** orinthe5 joined
[08:37] *** orinthe left
[08:37] *** orinthe5 is now known as orinthe

[08:51] *** vike joined
[08:58] *** rindolf left
[09:00] *** rindolf joined
[09:09] *** Doc_Holliwood left
[09:20] *** vike left
[09:22] *** thdrmz left
[09:29] *** orinthe left
[09:34] *** sjm_uk left
[09:39] *** vike joined
[09:47] *** vike left
[09:48] *** wamba left
[09:57] *** domidumont joined
[09:58] *** wamba joined
[10:11] *** Doc_Holliwood joined
[10:27] *** notagoodidea joined
[10:34] <notagoodidea> Is there a general database interface driver module? I found DBlish and DBDish inside or specific ones like DB::Sqlite & DB::Pg. DBDI project seems dead for the last 10y.

[10:34] *** vike joined
[10:36] *** vike left
[10:41] *** sno left
[10:43] *** sjm_uk joined
[10:57] *** vike joined
[10:57] *** Doc_Holliwood left
[10:58] <moritz> DBIish has drivers for sqlite, pg, mysql and oracle, iirc

[11:13] *** sno joined
[11:14] <notagoodidea> moritz: ok thanks, seems the most general-ish module so. 

[11:22] *** brtastic left
[11:23] *** brtastic joined
[11:37] *** ToddAndMargo left
[11:47] *** pecastro joined
[11:57] *** sena_kun joined
[11:59] *** Altai-man left
[12:03] <frost-lab> m: while 0 {say 1};

[12:03] <camelia> rakudo-moar 5df809e29: ( no output )

[12:03] <frost-lab> m: while 0 {say 1};

[12:03] <camelia> rakudo-moar 5df809e29: ( no output )

[12:05] <frost-lab> m: say $_

[12:05] <camelia> rakudo-moar 5df809e29: OUTPUT: «(Any)␤»

[12:11] <frost-lab> Is the `(0..3).rand`  possible to be 3?

[12:11] <frost-lab> or 3 just is a limit?

[12:16] <moritz> you really want (0..3).pick

[12:16] <moritz> m: say (0..3)pick xx 10

[12:16] <camelia> rakudo-moar 5df809e29: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say (0..3)7⏏5pick xx 10␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mod…»

[12:16] <moritz> m: say (0..3).pick xx 10

[12:16] <camelia> rakudo-moar 5df809e29: OUTPUT: «(3 0 2 3 3 2 2 1 1 2)␤»

[12:16] <moritz> m: say (0..3).roll(10)

[12:16] <camelia> rakudo-moar 5df809e29: OUTPUT: «(1 3 2 0 3 2 3 1 0 1)␤»

[12:22] <frost-lab> Yeh, but I see the `rand` 's doc is "Returns a pseudo-random value belonging to the range.", in this sense, it is possble to be 3 but it 's hard

[12:27] <frost-lab> In the implementation level, `rand` returns a Num, 3 is more like the limit which never obtained.

[12:35] *** sjm_uk left
[12:36] <frost-lab> When I first print `while 0 { say 1 }` in the REPL, it's ok. but next whatever I typed, it prompts me "Word 'while' interpreted as a listop; please use 'do while' to introduce the statement control word

[12:36] <frost-lab> ------> $ = while⏏ 0 {say 1};

[12:36] <frost-lab> Unexpected block in infix position (two terms in a row)

[12:36] <frost-lab> ------> $ = while 0⏏ {say 1};"

[12:37] <frost-lab> Is this a bug?

[12:40] <lizmat> it's probably a REPL artefact

[12:43] <aukkras> m: $ = do while 0 {say 1};

[12:43] <camelia> rakudo-moar 5df809e29: ( no output )

[12:44] <aukkras> m: say 1 while 0;

[12:44] <camelia> rakudo-moar 5df809e29: ( no output )

[12:48] *** frost-lab left
[13:05] *** Ovidius left
[13:09] *** leont joined
[13:25] *** daxim left
[13:25] *** daxim joined
[13:46] *** jmchael joined
[13:51] *** Doc_Holliwood joined
[14:14] *** suman joined
[14:14] <suman> p6: my @header = "V" ~ (1..5); say @header

[14:14] <camelia> rakudo-moar 94d685d95: OUTPUT: «[V1 2 3 4 5]␤»

[14:14] <suman> How to get [V1 V2 V3 V4 V5] ?

[14:16] <tadzik> p6: my @headers = (1..5).map('V' ~ *)

[14:16] <camelia> rakudo-moar 94d685d95: ( no output )

[14:16] <tadzik> p6: my @headers = (1..5).map('V' ~ *); say @headers

[14:16] <camelia> rakudo-moar 94d685d95: OUTPUT: «[V1 V2 V3 V4 V5]␤»

[14:16] <suman> @tadzik Thanks

[14:16] <tadzik> you're welcome )

[14:17] <timotimo> m: say "V" X~ (1..5); say (1..5) XR~ "V"

[14:17] <camelia> rakudo-moar 94d685d95: OUTPUT: «(V1 V2 V3 V4 V5)␤(V1 V2 V3 V4 V5)␤»

[14:18] <leont> p6: my @header = "V" «~« (1..5); say @header

[14:18] <camelia> rakudo-moar 94d685d95: OUTPUT: «[V1 V2 V3 V4 V5]␤»

[14:18] <timotimo> m: my @header = 1..5; @header >>R~=>> "V"

[14:18] <camelia> rakudo-moar 94d685d95: OUTPUT: «Cannot modify an immutable Str (V)␤  in block <unit> at <tmp> line 1␤␤»

[14:19] <timotimo> m: my @header = 1..5; @header >>[R~]=>> "V"

[14:19] <camelia> rakudo-moar 94d685d95: ( no output )

[14:19] <timotimo> m: my @header = 1..5; @header >>[R~]=>> "V"; say @header

[14:19] <camelia> rakudo-moar 94d685d95: OUTPUT: «[V1 V2 V3 V4 V5]␤»

[14:20] <timotimo> m: my @headers = do for (1..5) { "V$_" }; say @headers

[14:20] <camelia> rakudo-moar 94d685d95: OUTPUT: «[V1 V2 V3 V4 V5]␤»

[14:20] <timotimo> m: my @headers = "V1".."V5"; say @headers

[14:20] <camelia> rakudo-moar 94d685d95: OUTPUT: «[V1 V2 V3 V4 V5]␤»

[14:20] <timotimo> is this the winner?

[14:23] <tadzik> I'd sya so :D

[14:27] *** notagoodidea left
[14:34] <suman> similar to __str__ method for formatting output in python, what is the equivalent in raku?

[14:36] <timotimo> that's just regular old stringification, isn't it?

[14:37] *** Xliff left
[14:38] <timotimo> you'd want to look at .gist if it's fine to have some information loss (like very long lists getting a "..." at the end, or the structure of nested lists not showing up), .Str for simple cases where you'll still get all the data, and .raku for a representation that tries to look like the code you'd write to create the thing

[14:38] <timotimo> if you have need for formatted output, like column widths, justification, number of digits, etc etc, then you'll want to look at the sprintf sub and the fmt method

[14:39] *** thdrmz joined
[14:39] <timotimo> m: say (1..20).fmt("(>^.^)> % 3x", " <(^.^<)")

[14:39] <camelia> rakudo-moar 94d685d95: OUTPUT: «(>^.^)>   1 <(^.^<)(>^.^)>   2 <(^.^<)(>^.^)>   3 <(^.^<)(>^.^)>   4 <(^.^<)(>^.^)>   5 <(^.^<)(>^.^)>   6 <(^.^<)(>^.^)>   7 <(^.^<)(>^.^)>   8 <(^.^<)(>^.^)>   9 <(^.^<)(>^.^)>   a <(^.^<)(>^.^)>   b <(^.^<)(>^.^)>   c <(^.^<)(>^.^)>   d <(^.^<)(>^.…»

[14:41] <suman> m:  say (1..20).fmt("(>^.^)> % 3x\n", " <(^.^<)")

[14:41] <camelia> rakudo-moar 94d685d95: OUTPUT: «(>^.^)>   1␤ <(^.^<)(>^.^)>   2␤ <(^.^<)(>^.^)>   3␤ <(^.^<)(>^.^)>   4␤ <(^.^<)(>^.^)>   5␤ <(^.^<)(>^.^)>   6␤ <(^.^<)(>^.^)>   7␤ <(^.^<)(>^.^)>   8␤ <(^.^<)(>^.^)>   9␤ <(^.^<)(>^.^)>   a␤ <(^.^<)(>^.^)>   b␤ <(^.^<)(>^.^)>  …»

[14:41] <suman> m:  say (1..20).fmt("(>^.^)> % 3x", " <(^.^<)\n")

[14:41] <camelia> rakudo-moar 94d685d95: OUTPUT: «(>^.^)>   1 <(^.^<)␤(>^.^)>   2 <(^.^<)␤(>^.^)>   3 <(^.^<)␤(>^.^)>   4 <(^.^<)␤(>^.^)>   5 <(^.^<)␤(>^.^)>   6 <(^.^<)␤(>^.^)>   7 <(^.^<)␤(>^.^)>   8 <(^.^<)␤(>^.^)>   9 <(^.^<)␤(>^.^)>   a <(^.^<)␤(>^.^)>   b <(^.^<)␤(>^.^)>  …»

[14:44] <guifa2> egads my eyes

[14:45] *** Sgeo joined
[14:49] *** Doc_Holliwould joined
[14:49] *** Doc_Holliwood left
[15:09] <suman> I have a file with 1000 lines. Is it possible to only  read the last line to save time? without slurping contents?

[15:09] <suman> Currently what I do is slurp("$file").split("\n").tail

[15:11] <guifa2> not anything built in.  $file.IO.lines.tail will do it lazily, but that still requires reading the whole file 

[15:12] <guifa2> you could make your own sub that reads from the final character backwards until it finds a newline, and then read back in the rest of the file

[15:20] * guifa2 bangs head on keyboard (no CLDR release today :-( found an error in the 3-hour parse process … after it finished running)

[15:24] *** Doc_Holliwould left
[15:28] *** dotdotdot left
[15:30] *** Doc_Holliwould joined
[15:32] *** dotdotdot joined
[15:34] *** thdrmz left
[15:43] <guifa2> grr, and it relates to Raku's grapheme handling.  99% of the time it's awesome, until you need to handle a delimiter followed a combining character ^_^

[15:45] <lizmat> yeah, it's meant to take those worries away from you, generally

[15:46] <lizmat> fortunately, Raku regexes are code, not strings, so you should be able to handle those cases as well, no ?

[15:46] *** parabolize joined
[15:48] <guifa2> lizmat: I'm doing @strings = $file.slurp.split($del).  What's crazy is I even added in handling for it *within* the individual strings in this section (the only one where I expect to maybe get a combining character hanging isolated), but didn't account for one at the beginning of them 

[15:49] <lizmat> yeah, those are gotchas at many levels of implementation of Unicode in Raku  :-(

[15:51] *** patrickb left
[15:51] *** rindolf left
[15:52] <guifa2> I think if we beefed up Uni a bit more it might help

[15:53] *** rindolf joined
[15:53] <guifa2> right now it just feels like a not-quite-array, not-quite-string thing, but if it could be used anywhere Str could and in th esame ways, it might do a lot.  But internally that would probably be a nightmare

[15:53] <guifa2> Also, your language didn't do anything weird so Dutch works :-)

[15:54] *** rindolf left
[15:54] <guifa2> maandag 28 december 2020 om 10:50:04 Eastern-standaardtijd

[15:54] *** rindolf joined
[15:56] *** Altai-man joined
[15:56] *** a86 joined
[15:57] *** a86 left
[15:58] <lizmat> guifa2: that's just because the Dutch massively ignored using the https://en.wikipedia.org/wiki/IJ_(digraph)

[15:58] <lizmat> :-)

[15:59] *** sena_kun left
[15:59] <guifa2> Also, on my current computer/build of Rakudo, core's datetime formatting is an order of magnitude faster than mine.  Not sure if I slowed down, or maybe JIT is working better than my older desktop

[16:09] *** thdrmz joined
[16:11] *** xinming_ joined
[16:14] *** xinming left
[16:16] *** _jrjsmrtn joined
[16:17] *** __jrjsmrtn__ left
[16:22] *** eseyman left
[16:28] *** notagoodidea joined
[16:37] *** suman left
[17:05] <Geth> ¦ doc: e1d25c0e06 | (JJ Merelo)++ | documentable.json

[17:05] <Geth> ¦ doc: Adds configuration, refs #3753, Raku/Documentable#146

[17:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e1d25c0e06

[17:05] <linkable6> DOC#3753 [open]: https://github.com/Raku/doc/issues/3753 [site][❗Blocker❗] Pencil symbol links to a 404 on Github

[17:10] *** jmerelo joined
[17:11] <notagoodidea> m: my $foo = 3; say "$foo" given $foo;

[17:11] <camelia> rakudo-moar 94d685d95: OUTPUT: «3␤»

[17:11] *** schlaftier left
[17:11] *** schlaftier joined
[17:12] <lizmat> m: my $foo = 3; .say given $foo;

[17:12] <camelia> rakudo-moar 94d685d95: OUTPUT: «3␤»

[17:13] <notagoodidea> m: my $foo = 3; .say with $foo;

[17:13] <camelia> rakudo-moar 94d685d95: OUTPUT: «3␤»

[17:14] <Geth> ¦ doc: 44d2c8bef1 | (JJ Merelo)++ | documentable.json

[17:14] <Geth> ¦ doc: Changes to edit path, refs #3753, Raku/Documentable#146

[17:14] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/44d2c8bef1

[17:14] <linkable6> DOC#3753 [open]: https://github.com/Raku/doc/issues/3753 [site][❗Blocker❗] Pencil symbol links to a 404 on Github

[17:27] <notagoodidea> Is it an "better" way to create sub-command with the command line interface than multi dispatch with litteral strings in the MAIN arguments list?

[17:29] <notagoodidea> Right know I am doing to get: ./foo bar <file> -> MAIN ('bar', Str $file) {*} 

[17:31] <tyil> notagoodidea: there's nothing wrong with that way to get subcommands

[17:32] <tyil> also, you can use `IO() $file`, and it'll automatically convert that argument to an IO::Path iirc

[17:33] <tyil> but I'm not 100% sure that works the way I'm telling you rn :P

[17:36] <notagoodidea> Good to know for `IO()`. This way is not problematic for one level of sub-command but get quickly troublesome for multi-level or command like `./foo bar <xx> baz <yy>` when `baz <yy>` is optional.

[17:37] <tyil> maybe someone with more knowledge than me has a better idea, perhaps there's something doable with a `proto`

[17:40] <lizmat> there's also https://modules.raku.org/dist/Getopt::Long

[17:42] <notagoodidea>                                                                   

[17:42] <notagoodidea>   8 roger check [bkm-id] #mark as read                                                                    

[17:42] <notagoodidea>   9 roger export [all|tags|bkim-id] to file.[json|md|html]                                                

[17:43] *** Doc_Holliwould left
[17:43] <notagoodidea> sorry wild middle click paste jumped in the chat.

[17:50] *** sno left
[17:51] <leont> Getopt::Long generally does a better job of converting arguments IMNSHO, but doesn't really solve the multi-dispatch problem.

[17:52] <leont> I've been experimenting with that, but I'm not sure I've found a solution I like yet

[17:52] <leont> (the main problem being gives terribly confusing errors)

[17:53] <leont> Try typing «zef instal» with a single l to see what I mean

[18:12] <notagoodidea> leont: Sorry got disconnect after the zef examples. I think that I have read the rational of Getopt::Long you wrote some days/weeks ago.

[18:13] <notagoodidea> rationale*

[18:14] <tony-o> tyil: the IO() thing should attempt to coerce

[18:15] <tyil> tony-o: yeah, not sure if that'd work the same on MAIN

[18:15] <tyil> (never tried)

[18:16] <tony-o> it does

[18:16] <tyil> nice :>

[18:16] <tony-o> at least on current rakudo, there was a bug with it several versions ago

[18:27] <Geth> ¦ doc: 0e2b03cf44 | (JJ Merelo)++ | documentable.json

[18:27] <Geth> ¦ doc: Changes to editable link, closes #3753

[18:27] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0e2b03cf44

[18:27] <linkable6> DOC#3753 [closed]: https://github.com/Raku/doc/issues/3753 [site][❗Blocker❗] Pencil symbol links to a 404 on Github

[18:34] *** redhands joined
[18:38] *** tejr left
[18:38] *** xelxebar left
[18:38] *** asymptotically left
[18:39] *** asymptotically joined
[18:39] *** xelxebar joined
[18:43] *** tejr joined
[18:50] *** lucasb joined
[18:55] *** rir left
[18:56] <lizmat> and the last Rakudo Weekly News of 2020 hits the Net: https://rakudoweekly.blog/2020/12/28/2020-52-rererevolution/

[18:58] *** guifa2 left
[19:00] <tony-o> .tell patrickb can we remove the config stuff from the password branch and put that in a separate issue?

[19:00] <tellable6> tony-o, I'll pass your message to patrickb

[19:24] <leont> lizmat++

[19:28] *** mowcat joined
[19:31] *** domidumont left
[19:44] *** seanrobert joined
[19:51] *** Doc_Holliwood joined
[19:52] *** jmerelo left
[19:57] *** sena_kun joined
[19:59] *** Altai-man left
[19:59] *** b2gills left
[20:02] *** b2gills joined
[20:05] *** aindilis joined
[20:24] *** seanrobert left
[20:39] *** patrickb joined
[20:41] *** melezhik joined
[20:41] <melezhik> Sparky CI starts supporting SCM triggering - https://github.com/melezhik/sparky#trigger-build-by-scm-changes , I'd appreciate if someone checks it out and give a feedback, thanks

[20:45] <Geth> ¦ doc: alanrocker++ created pull request #3754: Update syntax.pod6

[20:45] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3754

[20:48] *** sena_kun left
[21:19] *** rindolf left
[21:37] *** melezhik left
[21:53] *** wamba left
[21:53] *** brtastic left
[22:20] <notagoodidea> Is there a advantage to use >>->> rather than [Z-] to take the delta of a list/array? Or it is just another way to do it?

[22:21] <notagoodidea> m: my @foo = 10, 20, 50, 100; @foo[1..*] >>->> @foo;

[22:21] <camelia> rakudo-moar 94d685d95: OUTPUT: «Potential difficulties:␤    Useless use of >>->> in sink context␤    at <tmp>:1␤    ------> 3my @foo = 10, 20, 50, 100; @foo[1..*] 7⏏5>>->> @foo;␤»

[22:21] <notagoodidea> m: my @foo = 10, 20, 50, 100; say @foo[1..*] >>->> @foo;

[22:21] <camelia> rakudo-moar 94d685d95: OUTPUT: «(10 30 50)␤»

[22:21] <notagoodidea> m: my @foo = 10, 20, 50, 100; say @foo[1..*] [Z-] @foo;

[22:21] <camelia> rakudo-moar 94d685d95: OUTPUT: «(10 30 50)␤»

[22:23] *** aluaces left
[22:25] *** cpan-raku left
[22:26] *** cpan-raku joined
[22:26] *** cpan-raku left
[22:26] *** cpan-raku joined
[22:32] *** patrickb left
[22:55] *** melezhik joined
[22:57] *** musasji_the1 joined
[22:58] <melezhik> vrurg your build now got run - https://rakudist.raku.org/sparky/report/RakuPlay-1/8877 , first time it did not, b/c it was a bug in RakuPlay which is fixed now

[23:03] <vrurg> melezhik++

[23:08] *** melezhik left
[23:33] *** coldpress left
[23:43] *** chloekek joined
[23:44] <chloekek> m: '災'.uniprop('kSimplifiedVariant')

[23:44] <camelia> rakudo-moar 94d685d95: ( no output )

[23:44] <chloekek> m: say '災'.uniprop('kSimplifiedVariant')

[23:44] <camelia> rakudo-moar 94d685d95: OUTPUT: «0␤»

[23:44] <chloekek> 不好

[23:45] <chloekek> m: say '災'.uniprop('SimplifiedVariant')

[23:45] <camelia> rakudo-moar 94d685d95: OUTPUT: «0␤»

[23:47] <chloekek> m: say '災' coll '灾'

[23:47] <camelia> rakudo-moar 94d685d95: OUTPUT: «Less␤»

[23:53] *** musasji_the1 left
