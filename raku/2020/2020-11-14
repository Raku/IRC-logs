[00:05] *** mowcat left
[00:09] *** rindolf left
[00:10] *** thundergnat joined
[00:12] <thundergnat> Altreus: Sorry to ghost you earlier, I was at work and IRC use is somewhat frowned on so I was kind-of hit and run. I've uploaded V0.1.0 of Base::Any that supports loading custom digit sets out of the box.   

[00:12] <tellable6> 2020-11-13T13:12:49Z #raku <Altreus> thundergnat: Any chance of something like to-base-alphabet('0123456789abcdefghjkmnp') ...

[00:26] *** aborazmeh left
[00:37] *** oneeggeach joined
[00:37] *** oneeggeach left
[00:40] *** pecastro left
[01:12] *** spikemaster joined
[01:19] *** spikemaster left
[01:36] *** guifa left
[02:16] *** Black_Ribbon joined
[02:34] *** leont left
[02:58] *** lucasb left
[03:02] *** molaf left
[03:14] *** molaf joined
[03:34] *** simcop2387 left
[03:41] *** simcop2387 joined
[03:41] *** simcop2387 is now known as simcop238

[03:45] *** simcop238 left
[03:49] *** b2gills left
[03:53] *** simcop2387 joined
[04:12] *** seanrobert joined
[04:35] *** simcop2387 left
[04:38] *** simcop2387 joined
[04:38] *** simcop2387 left
[04:38] *** simcop2387 joined
[04:56] *** simcop2387_ joined
[04:56] *** simcop2387 left
[04:56] *** simcop2387_ is now known as simcop2387

[04:57] *** simcop2387 left
[04:57] *** simcop2387 joined
[05:04] *** simcop2387 left
[05:06] *** simcop2387 joined
[05:07] *** parabolize left
[05:25] *** orinthe left
[05:26] *** orinthe joined
[05:30] *** simcop2387_ joined
[05:32] *** simcop2387 left
[05:33] *** simcop2387_ is now known as simcop2387

[05:34] *** simcop2387 left
[05:35] *** simcop2387 joined
[05:35] *** simcop2387 left
[05:35] *** simcop2387 joined
[05:41] *** simcop2387 left
[05:43] *** simcop2387 joined
[05:49] *** simcop2387 left
[05:50] *** simcop2387 joined
[06:04] *** sena_kun joined
[06:22] *** bocaneri joined
[06:24] <cpan-raku> New module released to CPAN! Universal::errno (0.1.0) by 03GARLANDG

[06:53] *** skids left
[07:07] *** rsonx joined
[07:08] *** frogger joined
[07:10] *** rsonx left
[07:10] *** frogger left
[07:11] *** cpan-raku left
[07:11] <samebchase-> Hi, I'm using a library in a script which appears to have a bug in version X. I did `zef install "<LIB-NAME>:<ver>:<PREV-VERSION>"`, but the bug is still showing up. How do I ensure, that after `zef install`, the correct library version is picked up. Currently, my workaround was to update the compiler version and then installed the previous version

[07:11] <samebchase->  of the library so that I start from a blank slate so to speak, and now the bug does not show up.

[07:12] <samebchase-> How do we clean up old library artifacts which might be precompiled and get picked up by the program even though I have installed a different version

[07:12] *** cpan-raku joined
[07:12] *** cpan-raku left
[07:12] *** cpan-raku joined
[07:25] *** jmerelo joined
[07:48] *** dmc00 left
[07:58] *** epony left
[08:03] <gfldex> samebchase-: you can select the version to be used with the use-statement

[08:03] *** epony joined
[08:03] *** simcop2387 left
[08:07] *** simcop2387 joined
[08:08] *** simcop2387 left
[08:08] *** simcop2387 joined
[08:09] *** Altai-man joined
[08:12] *** sena_kun left
[08:31] *** molaf left
[08:35] *** seanrobert left
[08:40] * holyghost is back

[08:40] *** holyghost left
[09:40] *** linkable6 left
[09:40] *** evalable6 left
[09:40] *** evalable6 joined
[09:42] *** linkable6 joined
[09:44] *** natrys joined
[09:44] <samebchase-> gfldex: thanks, I shall do that üëç

[09:45] <samebchase-> I'm assuming that when a version is not specified, it will pick up the latest version present? 

[09:46] <lizmat> well, it's slightly more complicated than that

[09:46] <lizmat> you can also specify the :auth<> in a use statement and the :api< >

[09:47] <lizmat> generally, it will take the best matching and fail if there are none, or there is more than one given the arguments

[09:47] *** wamba joined
[09:48] <lizmat> if you don't specify any at all, I think it will indeed take the highest version one

[09:59] *** Manifest0 left
[10:01] *** Manifest0 joined
[10:14] <samebchase-> thanks for the explanation lizmat. Raku is helping me at work. Written some tools in Raku which help while debugging oncall incidents.

[10:14] <gfldex> samebchase-: Nice to hear that our masterplan for world domination is playing out nicely.

[10:18] *** Black_Ribbon left
[10:18] <samebchase->  I intend to do a short talk on Raku sometime so that others can try it out as well

[10:20] <gfldex> I would not know how to have a *short* talk about Raku. :->

[10:29] *** Sgeo left
[10:39] *** ufobat joined
[10:43] <samebchase-> gfldex: üòÖ

[10:53] <tyil> samebchase-: if you feel like it, you could write an advent calendar post on some cool things you've done with Raku too

[11:00] *** simcop2387_ joined
[11:01] *** jmerelo left
[11:03] *** simcop2387 left
[11:03] *** simcop2387_ is now known as simcop2387

[11:03] *** simcop2387 left
[11:03] *** simcop2387 joined
[11:13] *** rindolf joined
[11:19] *** leont joined
[11:37] *** simcop2387 left
[11:39] *** simcop2387 joined
[11:45] *** pecastro joined
[12:10] *** sena_kun joined
[12:12] *** Altai-man left
[12:29] *** frost-lab joined
[12:30] <frost-lab> hello, everyone

[12:30] <lizmat> frost-lab o/

[12:30] <frost-lab> I want to run a command like "ls -l > 1".

[12:30] <frost-lab> How can I do that in Raku

[12:31] <frost-lab> use the 'run' function

[12:31] <lizmat> raku -e 'run <ls -l>' >1 ??

[12:32] <lizmat> or do you want the >1 also in raku ?

[12:33] <frost-lab> Yes, I want use pipe to write output to file

[12:33] <leont> my $out = open :w, '1'; run <ls -l>, :$out;

[12:33] <lizmat> raku -e 'run <ls -l>, :out(open("1",:w))'

[12:34] <frost-lab> Thanks!

[12:37] *** ufobat left
[12:49] *** lucasb joined
[13:01] <samebchase-> tyil: I'll try! I _may_ have something worth sharing which has something to do with Grammars. Let's see if I can finish it

[13:01] <tyil> that would be awesome!

[13:02] *** jmcgnh left
[13:08] *** jmcgnh joined
[13:34] *** jmcgnh left
[13:34] *** epony left
[13:34] *** hobbs left
[13:34] *** k-man left
[13:34] *** phogg left
[13:34] *** dotdotdot left
[13:34] *** perlmaros left
[13:34] *** KotH left
[13:34] *** tadzik left
[13:35] *** perlmaros joined
[13:36] *** KotH joined
[13:36] *** k-man joined
[13:37] *** BuildTheRobots left
[13:37] *** timeless left
[13:37] *** rjeli left
[13:37] *** tailgate left
[13:37] *** hobbs joined
[13:37] *** phogg joined
[13:37] *** dotdotdot joined
[13:38] *** woolfy joined
[13:38] *** epony joined
[13:38] *** woolfy left
[13:38] *** woolfy joined
[13:39] *** b2gills joined
[13:39] *** woolfy left
[13:39] *** xinming_ left
[13:40] *** xinming_ joined
[13:40] *** jmcgnh joined
[13:40] *** BuildTheRobots joined
[13:40] *** timeless joined
[13:40] *** rjeli joined
[13:40] *** tailgate joined
[13:41] <gfldex> frost-lab: If you don't mind modules there is a short cut. use Shell::Piping; px<ls -1> |>> '1.txt'.IO;

[13:43] *** BuildTheRobots left
[13:44] *** sjm_uk joined
[13:44] *** CIAvash left
[13:44] *** kiti_nomad[m] left
[13:44] *** matiaslina left
[13:44] *** unclechu left
[13:44] *** MitarashiDango[m left
[13:44] *** AlexDaniel` left
[13:45] *** ThaEwat left
[13:45] *** BuildTheRobots joined
[13:47] *** JJAtria[m] left
[14:03] <cpan-raku> New module released to CPAN! Physics::Unit (1.0.0) by 03PSIXSTEVE

[14:05] *** wildtrees joined
[14:11] *** kiti_nomad[m] joined
[14:11] *** unclechu joined
[14:12] *** mayureshkathe joined
[14:12] *** mayureshkathe left
[14:13] *** matiaslina joined
[14:14] <moritz> while cleaning out old stuff we just found a big card with congratulations from lots of Perl and Raku (then Perl 6) folks

[14:14] <moritz> the occasion was our wedding roughly 10 years ago

[14:15] <moritz> I had forgotten about the card, it brought up fond memories

[14:15] <sjn> that's nice :)

[14:15] <sjn> how's life treating you, btw? 

[14:17] <moritz> the signatures I can read are from lizmat, wendy, sorear, TimToady, jnthn, Peter Rabbit Rabbitson, theorbtwo, Markov, szabgab, Schwern (page 1)

[14:18] <moritz> Dave S, Tom, Ilmari, mugwump, Meli, Dean Swift, Martin Berends, Marc, Chisel, Nick and the London Perl Mongers

[14:19] *** wildtrees left
[14:19] *** wildtrees joined
[14:19] <moritz> sjn: as good as can be during a pandemic, I'd say. Lots of small annoyances like broken appliances and such this year, but we're healthy, I have we well-paying and secure job that allows 100% remote work, and we're all healthy

[14:20] <sjn> nice :)

[14:20] <moritz> kids are thriving, and my baking and cooking skills are improving :-)

[14:20] <moritz> sjn: how about yourself?

[14:22] <sjn> moritz: I'm doing ok. Working for a startup now (Mojo/etc) that's doing pretty well. Pandemic is much less horrible here than in most of Europe, and I'm managing to keep myself busy :)

[14:22] *** MitarashiDango[m joined
[14:23] *** CIAvash joined
[14:23] *** AlexDaniel` joined
[14:25] *** JJAtria[m] joined
[14:26] *** b2gills left
[14:28] *** ThaEwat joined
[14:30] <moritz> sjn: sounds good

[14:31] <moritz> we had planned for our younger daughter to attend the 17. May celebrations in Oslo this year, but that didn't work, of course

[14:31] <moritz> the real bummer is that starting from September this year she is in school, and that's not during any Germany holidays, so getting her there in future will be much harder/more hassle

[14:34] *** b2gills joined
[14:45] *** ben_ joined
[14:47] *** mowcat joined
[14:47] <sjn> moritz: oh well :-|

[14:48] <sjn> moritz: if you somehow find a way here anyway, feel free to get in touch! :)

[14:48] <moritz> sure, willdo

[15:12] *** sjm_uk left
[15:13] *** natrys left
[15:24] *** ape666 joined
[15:27] *** wamba left
[15:29] *** natrys joined
[15:41] *** parabolize joined
[16:01] *** wamba joined
[16:08] <Geth> ¬¶ problem-solving: lizmat assigned to codesections Issue How should modules/distributions be handled when severe security issues are discovered? https://github.com/Raku/problem-solving/issues/245

[16:10] *** Altai-man joined
[16:12] *** sena_kun left
[16:19] *** Kaeipi left
[16:19] *** Kaeipi joined
[16:21] *** ufobat joined
[16:22] *** Merfont joined
[16:22] *** Kaeipi left
[16:25] <ben_> Can anyone think of a way to create a recursive class using `anon`? For example `class type { has type $!inner }` compiles but `my $type = anon class { has $type $!inner }` does not.

[16:31] <tobs> ben_: you can refer to the class being currently defined through ::?CLASS

[16:32] <tobs> m: my $type = anon class { has ::?CLASS $.inner }; say $type; say $type.new.inner.WHAT

[16:32] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(<anon|1>)‚ê§(<anon|1>)‚ê§¬ª

[16:32] *** jmerelo joined
[16:38] <ben_> Awesome! Thanks

[16:42] *** wamba left
[16:42] *** tadzik joined
[16:43] *** natrys left
[16:50] *** MilkmanDan left
[16:52] *** MilkmanDan joined
[16:52] *** domidumont joined
[16:53] *** domidumont left
[16:55] *** wamba joined
[16:56] *** natrys joined
[17:04] *** rir joined
[17:12] *** MasterDuke left
[17:15] *** MasterDuke joined
[17:22] *** ufobat left
[17:27] *** UukGoblin joined
[17:29] <UukGoblin> hello everyone. Is it just me, or does syntax hilighting gets screwed up starting from Section "1.3 Hashes, or key-value Pairs." at https://learnxinyminutes.com/docs/raku/ ?

[17:36] *** ape666 left
[17:37] *** kensanata joined
[17:41] *** Tirifto joined
[17:41] *** skids joined
[18:07] <jmerelo> UukGoblin: looks like the absence of a blank line after a comment wreaks havoc there.

[18:08] <ben_> Are there any JS or wasm linters that have support for raku?

[18:12] <jmerelo> ben_: well, we use one for the docs. It's not perfect, but it works pretty well. It's based on the Atom mode for Raku.

[18:17] <ben_> In the docs repo? https://github.com/Raku/doc

[18:19] <cpan-raku> New module released to CPAN! Auth::SCRAM (0.4.8.2) by 03MARTIMM

[18:27] <jmerelo> ben_: right. 

[18:54] *** kensanata left
[19:15] *** kensanata joined
[19:29] *** Sgeo joined
[19:34] *** jmerelo left
[19:36] *** ToddAndMargo joined
[19:36] <ToddAndMargo> Hi All.  I am having trouble finding the command to create a new blank file.

[19:37] <moritz> touch yourfile

[19:39] <ToddAndMargo> `touch` is system command.  I am not finding it in the raku docs.  I suppose I could `qqx ( touch yourfile )`.  I would like to be able to do it from Raku.

[19:45] *** perryprog left
[19:45] <thundergnat> "yourfile".IO.open(:w)

[19:45] *** perryprog joined
[19:46] <thundergnat> That will overwrite an existing file though 

[19:47] <thundergnat> "yourfile".IO.open(:a)  # will create if it doesn't exist, but not wipe out an existing file

[19:48] <ToddAndMargo> Works for me.  That way I do not have to do an unlink.  Thank you!

[19:48] <Grinnz> https://metacpan.org/release/Path-Tiny/source/lib/Path/Tiny.pm#L2008-2024 is how to approximate touch in perl, so from raku would be a similar process (utime is a function that sets modification time)

[19:50] <ToddAndMargo> :-)

[20:01] *** kensanata left
[20:08] *** stoned75 joined
[20:10] <lizmat> wonder if it would make sense to allow spurt to have "" for a default content of file, to easily allow creation of an empty file

[20:10] *** sena_kun joined
[20:12] *** Altai-man left
[20:12] *** aborazmeh joined
[20:12] *** aborazmeh left
[20:12] *** aborazmeh joined
[20:22] *** Sgeo_ joined
[20:25] *** kensanata joined
[20:26] *** Sgeo left
[20:28] *** natrys left
[20:33] <ToddAndMargo> what is the syntax to run and release a program?  `start` does ot error out, but he program does not start.

[20:33] <ToddAndMargo> ot = not

[20:35] <ben_> Are you looking for `run` or `shell` maybe?

[20:39] <ToddAndMargo> I don't care which, just the result that the program I run gets released and my program continues on its way

[20:39] <ToddAndMargo> I like run, but it waits for a return.  

[20:42] <Zero_Dogg> Proc::Async maybe?

[20:42] <ToddAndMargo> how would I use that?

[20:43] <Zero_Dogg> https://docs.raku.org/type/Proc::Async

[20:43] <lizmat> rhttps://docs.raku.org/type/Proc#method_spawn perhaps ?

[20:45] <ToddAndMargo> that seems to be for writing to files, not running programs.  Am I missing something?

[20:47] <Zero_Dogg> Both Proc.spawn and Proc::Async are for running subprocesses

[20:50] <ToddAndMargo> would you mind writing me an example of spawn?

[20:50] <Zero_Dogg> Proc::Async lets you run them in a non-blocking way

[20:55] <Zero_Dogg> I'm not sure what lizmat referred to with Spawn to be honest. If you're looking to run a command synchronously you're probably looking for 'run', to run something asynchroniously Proc::Async

[20:56] <Zero_Dogg> m: run "pwd"

[20:56] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´/home/camelia‚ê§¬ª

[20:58] <Zero_Dogg> whereas with Proc::Async:

[20:58] <Zero_Dogg> m: my $pA = Proc::Async.new("pwd"); my $promise = $pA.start; await $promise

[20:58] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´/home/camelia‚ê§¬ª

[20:59] <Zero_Dogg> You can drop await-ing the promise to just go about your business

[21:06] <ToddAndMargo> p6 'my $pA = Proc::Async.new( "/usr/bin/leafpad" ); my $promise = $pA.start;'JOy!

[21:08] *** veesh left
[21:09] *** veesh joined
[21:26] *** simcop2387 left
[21:27] *** simcop2387 joined
[21:31] *** ToddAndMargo left
[21:31] *** BenGoldberg joined
[21:41] <Altreus> thundergnat: sweet! Didn't feel ghosted - that's IRC

[21:41] <Altreus> I'mma check it out

[21:42] *** simcop2387 left
[21:42] <Altreus> at least I got to practice my raku

[21:42] *** finanalyst joined
[21:44] *** simcop2387 joined
[21:44] *** simcop2387 is now known as simcop238

[21:44] *** BenGoldberg left
[21:44] *** Ben_Goldberg joined
[21:44] *** Ben_Goldberg is now known as BenGoldberg

[21:49] *** BenGoldberg left
[21:49] *** Ben_Goldberg joined
[21:49] *** Ben_Goldberg is now known as BenGoldberg

[21:51] *** kensanata left
[22:00] *** BenGoldberg left
[22:00] *** rindolf left
[22:01] *** BenGoldberg joined
[22:03] *** dmc00 joined
[22:06] *** BenGoldberg left
[22:14] *** wamba left
[22:21] *** sena_kun left
[22:23] *** simcop238 left
[22:24] *** mowcat left
[22:25] *** stoned75 left
[22:25] *** stoned75 joined
[22:26] *** simcop2387 joined
[22:28] *** sena_kun joined
[22:32] *** BenGoldberg joined
[22:35] *** sena_kun left
[22:40] *** jmac left
[22:42] *** perlbot left
[22:42] *** Benett left
[22:43] *** perlbot joined
[22:44] *** Benett joined
[22:49] *** perlbot left
[22:51] *** perlbot joined
[22:51] *** sena_kun joined
[22:53] *** Hermitude joined
[22:54] <Hermitude> is there any effort underway to making raku into the kind of scripting language runtime that can be embedded in a c/c++ program?

[22:54] <Hermitude> For example, as an extension mechanism for said program?

[23:02] <sjn> Hermitude: out of curiosity; why would you want to do something like that? (serious question - I've seen plenty of people ask for this, and actually use this, but I've always thought there was something backwards about this)

[23:04] <sjn> I have to admit I probably am just unaware of any situations where this is the best pattern...

[23:06] *** sena_kun left
[23:07] *** finanalyst left
[23:11] *** seanrobert joined
[23:13] <leont> Question is really "what do you want to achieve?"

[23:19] <cpan-raku> New module released to CPAN! Getopt::Long (0.2.0) by 03LEONT

[23:19] <Hermitude> I'd like to build a desktop app with plugin/extension capability offered via raku

[23:20] <Hermitude> i LOVE the language but unfortunately it doesn't seem to offer a direct means of embedding rakudo and moarvm

[23:20] <MasterDuke> i can be done, look at Inline::Perl6

[23:21] <MasterDuke> *it can

[23:21] <Tirifto> leont: Thanks! :)

[23:22] <leont> Tirifto: for Getopt::Long? :-)

[23:22] <MasterDuke> https://metacpan.org/pod/Inline::Perl6

[23:22] * leont has a lot of things to say about this, but ENEEDTOSLEEP

[23:23] <Hermitude> i will take a look

[23:23] <Hermitude> I think I've heard of it before and it seems to be a one-off rather than a well-trodden path

[23:23] <Tirifto> leont: Yeah! I just made use of it yesterday. (And today, technically.)

[23:24] * leont has been planning to write a "why everyone should be using Getopt::Long" article, but haven't gotten around to it

[23:25] <Tirifto> I guess you should sleep first, but I‚Äôll be looking forward to it!

[23:25] <MasterDuke> i suspect that's a reasonably fair assessment. it's probably a bit late now, but if you have questions nine (who wrote it and Inline::Perl5) is usually around during the day

[23:26] <leont> The hard part of embedding is not calling functions from A to B, but dealing with data

[23:26] <Hermitude> Also since it's calling rakudo with no binary modifications it is likely spawning a child process

[23:26] <MasterDuke> pretty sure it's using libmoar.so

[23:27] <leont> Yeah, it's a bit esoteric still, but entirely possible

[23:27] <Hermitude> Sure, you have to offer conversions and wrapping -- but this is the purpose of engineering native support directly into the project

[23:27] <Hermitude> Man I would really get a lot of use out of an embeddable Raku interpreter

[23:28] <MasterDuke> but my knowledge is all second-hand at best, nine can actually answer any questions

[23:28] <Hermitude> Right now Python is the default go-to extension mechanism and tbh it just sucks -- no native multithreading is too big a strike

[23:28] * leont at some point completely programmed themselves into a corner writing a libperl++, he's not wondering what a libraku++ would look like

[23:30] <Hermitude> there's also Lua but I don't like it either

[23:31] <leont> Lua is optimized well for embeddability, but it's not the greatest of languages

[23:31] <leont> It's great for what it is designed to do, but not so great otherwise, IMHO

[23:35] *** Hermitude left
[23:40] *** stoned75 left
[23:46] *** Hermit joined
[23:46] *** Hermit is now known as Guest81493

[23:47] *** Guest81493 is now known as Hermitude

[23:47] *** Hermitude is now known as Hermitude-

