[00:36] *** orinthe8 joined
[00:36] *** orinthe left
[00:36] *** orinthe8 is now known as orinthe

[00:42] *** cpan-raku left
[00:44] *** cpan-raku joined
[00:44] *** cpan-raku left
[00:44] *** cpan-raku joined
[00:46] *** Xliff joined
[00:46] <Xliff> \o

[00:46] <Xliff> How can I use npq to make a method call?

[01:03] *** frost-lab joined
[01:05] <Xliff> Adjacently... where can I find the source code for postfix:<.>

[01:05] <Xliff> ^^ jnthn timotimo AlexDaniel lizmat

[01:06] <timotimo> what is postfix:<.>?

[01:07] <timotimo> you should normally be able to just do a normal boring method call in nqp, how exactly do you mean?

[01:09] <Xliff> timotimo: Well. I have a problem.

[01:10] <Xliff> I have had a "submethod BUILD" in many of the ::Role:: objects I've created over the two years.

[01:10] <Xliff> Have now discovered that it conflicts with "submethod BUILD" composed in the object (might be better if it could override?\)

[01:10] <timotimo> ah, yes

[01:10] <timotimo> that is a common issue

[01:11] <Xliff> So I've tried to do it at .bless time with a custom bless method.

[01:11] <Xliff> Now discovered that doing it this way, there is NO SELF when punning a role to a blank object (ie using a role def as a class def)

[01:11] *** aborazmeh joined
[01:11] *** aborazmeh left
[01:11] *** aborazmeh joined
[01:12] <Xliff> So I have a method used in the initialization logic that expects "self" to exist.

[01:12] <Xliff> It doesn't. I get "Cannot invoke this object (REPR: Null; VMNull)"

[01:13] <Xliff> Bug?

[01:14] <Xliff> This is odd because I am calling that method via an object created by self.CREATE.BUILDALL(Empty, %attrinit);

[01:18] <timotimo> bless is responsible for creating the self

[01:19] <Xliff> I know. so why the VMNull exception?

[01:19] <Xliff> Further explanation here: https://github.com/Xliff/p6-GIO/blob/september-refactor-review/lib/GIO/Roles/GFile.pm6#L40

[01:19] <Xliff> See comments in .bless and .setGFile 

[01:20] <Xliff> If role code is encountered via object, things are fine.

[01:20] <Xliff> However if we use the role AS an object, there are initialization failures.

[01:20] <Xliff> These resulted in the need for the custom .bless as shown.

[01:21] <timotimo> i think you'll want to use method dispatch:<::>

[01:21] <Xliff> How?

[01:21] <Xliff> Example, pls?

[01:22] <timotimo> $foo.Int::BUILD is compiled as $foo.dispatch:<::>($foo, "BUILD", Int)

[01:22] <timotimo> feel free to play around with that i guess :)

[01:22] <Xliff> :)

[01:22] <Xliff> \i/

[01:22] <Xliff> Er. \o/

[01:23] <Xliff> Er... I think.

[01:23] <timotimo> i didn't actually look very closely at your code, but i'm thinking this mechanism could get you much further

[01:23] <Xliff> That would work if the object overrode the BUILD.

[01:23] <Xliff> It doesn't, it conflicts.

[01:24] <Xliff> And here I am attempting to find a solution to the problem that doesn't require me re-writing a lot of code.

[01:24] <timotimo> it conflicts, meaning you get a compilation error or an error at the time the role is composed into the object?

[01:24] <Xliff> Yes

[01:27] <timotimo> hmm. to get around that error you'd put a submethod BUILD of your own in the target class i guess

[01:28] <timotimo> but that has the "benefit" of eliminating the things you generally lose when you implement BUILD yourself

[01:28] <Xliff> Impossible. Too many target classes.

[01:28] <Xliff> This is something that the role logic can do in a self-contained manner.

[01:29] <timotimo> hmm. at compile time rename BUILD to something else :D

[01:29] <Xliff> LOL!

[01:29] <Xliff> Code?

[01:29] <timotimo> build a metaclass of your own that just doesn't return BUILD when asked for it

[01:29] <Xliff> Of course, that would have the unfortunate side effect of "Losing the Point"

[01:30] <Xliff> Because how will the role code initialize via self.bless( :$param )?

[01:30] <Xliff> To implement this within self.BUILD of target classes would mean rewriting thousands of lines of code.

[01:31] <Xliff> That, I'd like to avoid for obvious reasons.

[01:31] <timotimo> right

[01:31] <timotimo> may i ask, what state is the project in right now and what were you trying to add when you hit this roadblock?

[01:31] <Xliff> Runnable state. Then I ran into this.

[01:32] <Xliff> You can clone https://github.com/Xliff/p6-GIO.git

[01:32] <Xliff> then switch to september-refactor-review branch

[01:32] <Xliff> Then ./p6gtkexed t/08-file.t

[01:32] <Xliff> Er,

[01:32] <Xliff> Then ./p6gtkexec t/08-file.t

[01:33] *** Kaeipi left
[01:33] <Xliff> Hmm... GIO could use an installation README.md

[01:33] <Xliff> One sec!

[01:33] *** Kaeipi joined
[01:34] <timotimo> i may actually go to sleep soon

[01:35] <Xliff> OK.

[01:36] <Xliff> Done, tho... check it if you have some time, tomorrow...

[01:42] <Xliff> timotimo: Good night.

[01:42] <Xliff> Now bouncing into windows for play.

[01:42] *** Xliff left
[01:47] *** leont left
[01:50] *** Kaeipi left
[01:50] *** Kaiepi joined
[01:59] *** BenGoldberg left
[01:59] *** Ben_Goldberg joined
[01:59] *** Ben_Goldberg is now known as BenGoldberg

[02:06] *** BenGoldberg left
[02:06] *** Ben_Goldberg joined
[02:06] *** Ben_Goldberg is now known as BenGoldberg

[02:07] *** mowcat left
[02:08] *** BenGoldberg left
[02:08] *** Ben_Goldberg joined
[02:08] *** Ben_Goldberg is now known as BenGoldberg

[02:33] *** Ben_Goldberg joined
[02:33] *** BenGoldberg left
[02:33] *** Ben_Goldberg is now known as BenGoldberg

[03:21] *** aborazmeh left
[03:41] *** Xliff joined
[03:41] *** Xliff left
[03:41] *** Xliff joined
[03:43] *** sno left
[03:45] *** sno joined
[03:58] *** cpan-raku left
[03:59] *** cpan-raku joined
[03:59] *** cpan-raku left
[03:59] *** cpan-raku joined
[04:03] *** Xliff left
[05:02] *** holli__ joined
[05:03] *** maggotbrain left
[05:09] *** aluaces joined
[05:16] *** maggotbrain joined
[05:27] *** nige_ joined
[05:27] *** nige left
[05:35] *** sena_kun joined
[05:37] *** holli__ left
[05:38] *** Doc_Holliwood joined
[05:41] *** Altai-man joined
[05:44] *** sena_kun left
[05:55] *** jmerelo joined
[06:22] *** Doc_Holliwood left
[06:39] *** maettu joined
[06:44] *** skids left
[06:44] *** BenGoldberg left
[07:08] *** natrys joined
[07:48] *** kylese joined
[07:52] *** maettu left
[08:52] *** sono__ joined
[08:56] *** Black_Ribbon left
[08:59] *** frost-lab left
[09:01] *** sono__ left
[09:06] *** Doc_Holliwood joined
[09:12] *** synopsebot joined
[09:12] *** synopsebot left
[09:18] *** wamba joined
[09:19] *** bocaneri left
[09:25] *** bocaneri joined
[09:34] *** rindolf joined
[09:36] *** bocaneri left
[09:36] *** BenGoldberg joined
[09:36] *** sauvin_ joined
[09:40] *** pecastro joined
[09:41] *** Sgeo left
[09:42] *** sena_kun joined
[09:43] *** Altai-man left
[09:46] *** skids joined
[09:47] *** Doc_Holliwood left
[09:48] *** maettu joined
[09:48] <lizmat> weekly: https://www.reddit.com/r/rakulang/comments/j862pr/a_raku_manifesto_part_3_codesections/

[09:48] <notable6> lizmat, Noted! (weekly)

[09:48] <lizmat> Files=1336, Tests=113604, 217 wallclock secs (29.25 usr  8.46 sys + 3040.82 cusr 285.45 csys = 3363.98 CPU)

[09:58] *** kylese left
[10:07] *** maettu left
[10:08] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2020/10/10/sneaky-arguments/

[10:09] *** BenGoldberg left
[10:28] *** gabiruh left
[10:29] *** gabiruh joined
[10:30] *** wamba left
[10:33] *** wamba joined
[10:39] <moritz> gfldex: the docs for Method say "Methods will ignore extra named arguments where other types of C<Routine> will

[10:39] <tellable6> 2020-10-09T16:39:39Z #raku <tbrowder> moritz just heard from apress (springer nature): the print book price does NOT include the ebook with the purchase.

[10:39] <moritz> throw at runtime."

[10:39] <moritz> what's missing from that?

[10:39] *** m6locks left
[10:40] <moritz> ah, probably that they land in %_

[10:40] *** m6locks joined
[10:40] <gfldex> aye

[10:41] <moritz> m: class A { method x() }; A.^find_method('x').signature.print

[10:41] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3class A { method x() 7‚èè5}; A.^find_method('x').signature.print‚ê§¬ª

[10:42] <moritz> m: class A { method x() {} }; A.^find_method('x').signature.print

[10:42] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Signature<60209904>¬ª

[10:42] <moritz> m: class A { method x() {} }; A.^find_method('x').signature.perl.print

[10:42] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´:(A: *%_)¬ª

[10:42] <Geth> ¬¶ doc: 1b7057739b | (Moritz Lenz)++ | doc/Type/Method.pod6

[10:42] <Geth> ¬¶ doc: Methods have an implicit *%_

[10:42] <linkable6> Link: https://docs.raku.org/type/Method

[10:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1b7057739b

[10:44] <moritz> m: class A { method x() {*%a} }; A.^find_method('x').signature.perl.print

[10:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[10:46] <Geth> ¬¶ doc: 4ef062d94e | (Moritz Lenz)++ | doc/Type/Signature.pod6

[10:46] <Geth> ¬¶ doc: Mention default *%_ in methods in Signature docs as well

[10:46] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/4ef062d94e

[10:46] <linkable6> Link: https://docs.raku.org/type/Signature

[10:53] *** __jrjsmrtn__ joined
[10:53] *** _jrjsmrtn left
[11:12] *** patrickb joined
[11:13] <patrickb> o/

[11:15] <patrickb> lizmat, I'd value your opinion on https://github.com/rakudo/rakudo/pull/3948 . It's basically the follow up to the recently merged MAIN bundling changes that you suggested.

[11:16] <lizmat> approved  :-)

[11:17] <patrickb> lizmat: Wow, that was fast. Thanks :-)

[11:17] <lizmat> i value leont's assessment in this :-)

[11:18] <patrickb> lizmat: That's why I also asked him to review.

[11:18] <lizmat> :-)

[11:39] *** leont joined
[11:58] *** skids left
[11:58] *** Doc_Holliwood joined
[12:07] *** patrickb left
[12:08] *** wamba left
[12:09] *** patrickb joined
[12:13] *** patrickb left
[12:16] *** jmerelo left
[12:27] *** molaf joined
[12:30] *** wamba joined
[12:39] *** spycrab0 joined
[12:41] *** jmcgnh left
[12:47] *** jmcgnh joined
[12:49] *** grondilu joined
[12:50] <grondilu> Hi.  Possibly a dumb question but : why isn't parameter evaluation used as a paradigm for parallelism ?

[12:50] <grondilu> By this I mean that a programming language could decide that all function parameters should be evaluated concurrently.

[12:53] *** camelCaser left
[12:54] <grondilu> Like instead of Promise.allof(&a, &b).then(&c) we could write (sub { c() })(foo(), bar())

[12:55] <grondilu> sorry I meant  (sub { c() })(a(), b())

[12:56] <grondilu> m: { say "c" }({ say "a" }(), { say "b" }()) 

[12:56] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´a‚ê§Too many positionals passed; expected 0 or 1 arguments but got 2‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§b‚ê§¬ª

[12:56] <grondilu> m: (sub ($a, $b) { say "c" })({ say "a" }(), { say "b" }()) 

[12:56] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´a‚ê§b‚ê§c‚ê§¬ª

[12:59] <grondilu> m: (sub ($a, $b) { say "c" })({ sleep 1; say "a" }(), { sleep 1; say "b" }()); say now - BEGIN { now }

[12:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´a‚ê§b‚ê§c‚ê§2.0180792‚ê§¬ª

[12:59] *** DriedGrape joined
[13:00] <grondilu> I mean it would be conceptually simpler and we wouldn't have to learn keywords and syntax

[13:02] *** BenGoldberg joined
[13:04] <timotimo> in a programming language without an effect system, it'll be very hard to prevent bad things from happening there

[13:05] <grondilu> well ideally concurrency would be applied only if the parameters are pure functions or something

[13:05] <grondilu> which should not be too hard for the compiler to detect

[13:05] <timotimo> in a language with late-bound method calls, good luck :) :)

[13:06] <timotimo> also, figuring out when it's worth it to parallelize could be a difficult task as well

[13:07] <timotimo> otherwise parallelization overhead is going to eat all your wins

[13:07] <grondilu> that's a good point

[13:07] <grondilu> parallelizing all function calls would probably be overkill indeed

[13:09] <timotimo> imagine, every function you're calling will also likely call functions

[13:10] <grondilu> well the compiler could keep track of the number of threads and limit them to the number of avalaible processors or something

[13:10] <timotimo> the compiler? at compile time? :D

[13:11] *** aborazmeh joined
[13:11] *** aborazmeh left
[13:11] *** aborazmeh joined
[13:11] <grondilu> not the compiler indeed.  My bad.

[13:11] <grondilu> the vm then ?  I don't know.

[13:13] <timotimo> i'd say "the runtime", that covers everything i think

[13:14] <timotimo> whether it be a VM or something a little simpler

[13:16] <grondilu> doesn't the runtime already limit the number of threads, anyway ?

[13:17] <timotimo> our runtime?

[13:17] <grondilu> yeah, raku's

[13:18] <grondilu> or rather rakudo's

[13:18] <grondilu> I thought so, anyway.

[13:18] <timotimo> we have the ThreadPoolScheduler, which has a "maximum threads" attribute, but by virtue of the $*SCHEDULER variable being dynamic, you can have many instances of the scheduler for different parts of your program

[13:18] <timotimo> and of course you can create new Thread objects at any time

[13:18] <timotimo> until you run out of file descriptors, that is :)

[13:35] *** BenGoldberg left
[13:35] *** dummy joined
[13:36] *** dummy is now known as Guest75794

[13:36] *** Doc_Holliwood left
[13:41] *** Altai-man joined
[13:42] *** Guest75794 left
[13:43] *** sena_kun left
[13:59] *** oneeggeach joined
[13:59] *** oneeggeach left
[14:32] *** aborazmeh left
[15:01] *** Doc_Holliwood joined
[15:12] *** MilkmanDan left
[15:12] *** MilkmanDan joined
[15:18] *** maettu joined
[15:31] *** grep0r joined
[15:31] *** grep0r left
[15:37] *** oneeggeach joined
[15:55] *** grondilu left
[16:26] *** BenGoldberg joined
[16:43] *** Xliff joined
[16:43] <Xliff> \o

[16:43] <kawaii> o/

[16:53] *** maettu left
[16:56] *** Benett left
[17:00] *** BenGoldberg left
[17:01] *** Benett joined
[17:14] *** MilkmanDan left
[17:15] *** jmerelo joined
[17:20] *** oneeggeach left
[17:21] *** MilkmanDan joined
[17:34] *** Success joined
[17:35] <[Coke]> m: dd "a".uniprop("Numeric_Value_Denominator")

[17:35] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´"NaN"‚ê§¬ª

[17:35] <[Coke]> ^^ Having that be a string is problematic.

[17:38] <[Coke]> m: dd "a".uniprop("Canonical_Combining_Class")

[17:38] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´"0"‚ê§¬ª

[17:39] <[Coke]> I also don't think we have a way to interrogate if the property is considered boolean/numeric, etc.

[17:42] *** sena_kun joined
[17:44] *** Altai-man left
[17:49] *** Success left
[17:57] *** skids joined
[17:59] <moritz> m: say 'a'.uniprop('Numeric')

[17:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Lower‚ê§¬ª

[17:59] <moritz> what?

[18:00] <moritz> m: say 'a'.uniprop('Punctuation')

[18:00] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´0‚ê§¬ª

[18:16] <[Coke]> not the numeric property - if the property itself is a numeric property

[18:17] <[Coke]> e.g. punctuation is a boolean; but *Denominator is numeric

[18:28] *** jmerelo left
[18:37] *** gnufr33dom joined
[18:37] <JJAtria[m]> I want to check at runtime whether a given version of a module is available. My current working code is `$*REPO.repo-chain.map( *.?candidates: "Foo::Bar", :ver<1.2.3+> ).flat.grep( *.defined ).so`, but that's a mouthful. Is there an easier way to do it?

[18:42] <skids> You could use .first instead of grep.

[18:43] <jdv79> how is .WHAT determined?  think i foung a bug.

[18:43] <jdv79> found even

[18:44] <JJAtria[m]> skids: one char more, though :P

[18:44] <skids> But more efficient.

[18:44] *** gnufr33dom left
[18:45] <jdv79> well, perhaps not a "bug" per se

[18:45] <jdv79> m: class Foo::Bar {}; Foo::Bar.new.WHAT.say

[18:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´(Bar)‚ê§¬ª

[18:45] <jdv79> why is that showing only the last portion of the name?

[18:46] <lizmat> jdv79: I think that's actually a bug that nine reported

[18:46] <moritz> I think it's by design, even if the design never quite convinced me

[18:46] <jdv79> I spent a few minutes trying to figure out why my Foo::DateTime obj was a DateTime obj...

[18:46] <jdv79> lizmat: ok, i'll check.

[18:46] <moritz> class Foo::Bar {}; say  Foo::Bar.^name

[18:46] <evalable6> moritz, rakudo-moar 6986ea1d0: OUTPUT: ¬´Foo::Bar‚ê§¬ª

[18:46] <moritz> one of the many reasons I prefer this for debugging :D

[18:47] <jdv79> how is it by design then?

[18:48] <jdv79> good luck trying to search for an issue on that:(

[18:49] <lizmat> yeah... I wonder where I saw that again  :-(

[18:49] *** gnufr33dom joined
[18:50] <JJAtria[m]> skid: Yeah, I mean it is an improvement, alright. I guess I'm less worried about the performance of that query than the fact it looks like I'm doing it wrong

[18:51] <JJAtria[m]> skids: ^

[18:51] <skids> [//] maybe?

[18:53] <JJAtria[m]> If I wanted to do it at compile time I could do `use Foo::Bar:ver<1.2.3+>`, which looks pleasingly straightforward

[18:53] *** Sgeo joined
[18:55] <skids> Are you trying to dtermine if it available and then maybe use it, or doing something more meta with packages?

[18:56] <moritz> S14-roles/namespaced.t:is(A::B.WHAT.gist, '(B)', 'A::B.WHAT stringifies to short name B');

[18:57] <JJAtria[m]> Use it if available, or tell the user that it's needed

[18:57] <skids> See the bottom of https://docs.raku.org/syntax/require for runtime symbol lookup

[18:58] <JJAtria[m]> I know I can do `require ::("Foo::Bar")`, but I'm not sure how to add the version information in there

[18:58] <moritz> the test I referenced above was introduced in 2009 by jnthn++

[18:59] *** defaultxr left
[19:04] *** mowcat joined
[19:27] *** MilkmanDan left
[19:27] *** MilkmanDan joined
[19:34] *** gnufr33dom left
[19:51] *** BenGoldberg joined
[20:04] <skids> star: say $*REPO.repo-chain.map( *.?candidates: "Digest::SHA")[0][0].meta

[20:04] <camelia> star-m 2020.05-rc2: OUTPUT: ¬´{api => v0, auth => Lucien Grondin, checksum => 4800B0DD54DDAAA7F2C0E757B76106F3CABE56FF, source => C61E6C50139D029A15E947C2DB2ECA511574F2EB, ver => v0.3.4}‚ê§¬ª

[20:05] <skids> star: use Digest::SHA:ver<0.3.5>; 

[20:05] <camelia> star-m 2020.05-rc2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Could not find Digest::SHA:ver<0.3.5> in:‚ê§    inst#/home/camelia/.raku‚ê§    inst#/home/camelia/star-2020.05-rc2/share/perl6/site‚ê§    inst#/home/camelia/star-2020.05-rc2/share/perl6/vendor‚ê§    inst#/‚Ä¶¬ª

[20:05] <skids> star: require Digest::SHA:ver<0.3.5>; 

[20:05] <camelia> star-m 2020.05-rc2: ( no output )

[20:06] <skids> JJAtria[m]: loks like non-symbolic require does not check version either.

[20:08] *** Ernesto joined
[20:08] *** Ernesto is now known as Guest89238

[20:09] <skids> maybe it just never got iplemented?

[20:11] <Guest89238> Hi !! i stuck on one problem but i don't know where post it since the community have many dynamics 

[20:14] <Guest89238> my problem is related with the library Graphics::PLplot that installs without error but doesn's work with latest stable ubuntu by default because the library of plotting it does not (anymore i guess?) on libplplot-dev

[20:16] <Guest89238> in the specific: Cannot locate native library '(null)': libplplotd.so: cannot open shared object file: No such file or directory

[20:17] <Guest89238> appears when you tried to running the any file that calls the library but checking the list of files with 

[20:17] <Guest89238> dpkg-query -L libplplot-dev

[20:21] <Guest89238> say that the file actually don't exists, in new to report any kind of error and i really new understanding problems with libraries because before i resolve everything with bash-programs but i see raku as a manner of expanding my capabilities about processing text 

[20:23] <MasterDuke> does your dpkg-query listing show something similar? maybe it upgraded its version number and is now libplplotd.2.so or something like that

[20:24] <MasterDuke> if so, you could always try creating a symlink from what Graphics::PLplot is looking for to what you actually have

[20:24] *** JJMerelo joined
[20:24] <JJMerelo> Hey

[20:25] <JJMerelo> releasable6: status

[20:25] <releasable6> JJMerelo, Next release in ‚âà13 days and ‚âà22 hours. There are no known blockers. 0 out of 34 commits logged

[20:25] <releasable6> JJMerelo, Details: https://gist.github.com/ebdc5c2d74273adaaebd108fa5752794

[20:26] *** DriedGrape left
[20:26] *** angelaig joined
[20:26] <JJMerelo> Hey, angelaig

[20:26] <angelaig> (y) 

[20:26] <JJMerelo> Just a few things you can do around here

[20:26] *** BenGoldberg left
[20:26] <JJMerelo> Just ask any question

[20:27] <JJMerelo> You can use the nick directly to "talk" to anyone,like angelaig

[20:27] <JJMerelo> There's also little camelia that you can use to evaluate Raku expressions fast. Like this

[20:27] <JJMerelo> camelia: <a b c>.pick.say

[20:27] <JJMerelo> ... she's taking a walk ...

[20:27] <JJMerelo> m: <a b c>.pick.say

[20:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´b‚ê§¬ª

[20:28] <JJMerelo> so just m: and then some raku expressions

[20:28] <JJMerelo> You can use /me and then some sentence to express thoughts or feelings

[20:29] * JJMerelo things it's a bit quiet around here tonight

[20:29] <JJMerelo> s/things/thinks/

[20:29] <JJMerelo> And that's it. You'll find lots of friendly and helpful people around here to help you get in the wonderful world of raku :-)

[20:29] <angelaig> thank you!

[20:30] * JJMerelo goes AFK now, 

[20:30] *** JJMerelo left
[20:34] <Guest89238> Hi JJmerelo !!! i know you from your book :O 

[20:34] *** Xliff left
[20:36] <Guest89238> yes the output of the query was something that i guess is the library 

[20:37] <Guest89238> this: /usr/lib/x86_64-linux-gnu/libplplot.so

[20:37] <Guest89238> but there is no 'd' in it that's the problem 

[20:40] *** rindolf left
[20:40] <Guest89238> i tried to chance the link in the library to this but i don't understand what is happning under the hood because the problem still happening 

[20:54] *** Success joined
[21:03] <MasterDuke> Guest89238: you tried changing the filename in Graphics::PLplot?

[21:04] *** wamba left
[21:10] *** BenGoldberg joined
[21:11] *** Doc_Holliwood left
[21:13] <moon-child> m: 5

[21:13] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 5 in sink context (line 1)‚ê§¬ª

[21:15] *** sena_kun left
[21:20] *** sena_kun joined
[21:22] *** cpan-raku left
[21:24] *** cpan-raku joined
[21:24] *** cpan-raku left
[21:24] *** cpan-raku joined
[21:28] *** Guest89238 left
[21:30] *** Tirifto joined
[21:30] *** angelaig left
[21:31] *** natrys left
[21:32] *** natrys joined
[21:32] *** natrys left
[21:40] *** sena_kun left
[21:50] *** patrickb joined
[21:56] *** patrickb left
[22:06] *** Ernesto joined
[22:07] *** Ernesto is now known as Guest94360

[22:09] <Guest94360> @MasterDuke sorry there was a shutdown where i live because a thunder join in the electric network so i have to wait to be reconected 

[22:12] <Guest94360> about changing the name if the library i already do it, but doesn't seem to work, i don't know if i should open a issue in github 

[22:16] <MasterDuke> how did you change the name? had you used zef to install the module?

[22:18] <Guest94360> yes i used zef to install module and it was installed without problems 

[22:18] <Guest94360> i already clean the .perl6 in the home directory and reinstalled 

[22:20] <Guest94360> let me replicate the commands of use to locate the file where i changed the name 

[22:20] <MasterDuke> did you change the name that the module is looking for to point to the file you have? or change the name of the file on the disk to match what the module is looking for?

[22:22] <Guest94360> grep libplplot ~/.perl6/sources/*

[22:23] <Guest94360> and returns a file with the name of the file that references to libplplotd.so, just i open the file and delete the extra "d" but don't work

[22:24] <MasterDuke> yeah, any changes you make to files under that path won't be picked up. you'll need to clone the module source, make the change there, and then use a `-I` flag to rakudo that points to your clone

[22:25] <Guest94360> Duhh my bad, let me try 

[22:25] <MasterDuke> not the first person to make that mistake, won't be the last

[22:29] <Guest94360> how install a local module ? 

[22:30] <MasterDuke> you can `zef install .`, or -I will use it without "installing" it

[22:31] *** aluaces left
[22:32] <timotimo> will want to --force there unless you're bumping the version in the meta file every time

[22:33] <Guest94360> what the hell !!?!?!?!?!

[22:34] <Guest94360> it works 

[22:34] <JJAtria[m]> skids: Hm, yeah... Thanks for looking! I'll see if I can find an issue about this somewhere and otherwise open a new one

[22:38] <Guest94360> Thanks for the help !!! 

[22:39] <MasterDuke> np

[23:03] *** mowcat left
[23:05] *** BenGoldberg left
[23:05] *** Ben_Goldberg joined
[23:05] *** Ben_Goldberg is now known as BenGoldberg

[23:08] *** pecastro left
[23:24] *** mryan joined
[23:31] *** mryan left
[23:35] *** Tirifto left
[23:47] *** BenGoldberg left
[23:47] *** Ben_Goldberg joined
[23:47] *** Ben_Goldberg is now known as BenGoldberg

[23:58] *** aborazmeh joined
[23:58] *** aborazmeh left
[23:58] *** aborazmeh joined
