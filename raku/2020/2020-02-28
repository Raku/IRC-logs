[00:16] <guifa> leont: is it something you‚Äôre going to use regularly?  Then you could make a custom operator that you could use with Z

[00:21] *** leont left
[00:27] *** m_athias left
[00:29] <MasterDuke> i think there was some discussion about that exact question recently (within the past month or so), but i can't find it

[00:34] *** wildtrees left
[00:36] <rypervenche> There was something similar that Jonathan wrote, but I couldn't get it to work. Something like @a Z[&({$^b($^a)})] b . But yeah, I think a custom operator may be a cleaner approach.

[00:44] *** m_athias joined
[00:45] *** veesh left
[01:27] <vrurg> m: sub foo($s) { $s*2 }; say (1,2,3) Z[&(-> $a, $b {$b.($a)})] &foo xx *

[01:27] <evalable6> vrurg, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:28] <vrurg> rypervenche: ^^ something like this.

[01:28] <vrurg> m: sub foo($s) { $s*2 }; say (1,2,3) X[&(-> $a, $b {$b.($a)})] &foo

[01:28] <evalable6> vrurg, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:32] <rypervenche> Ahhhh, it needs a lambda.

[01:34] *** Altai-man_ joined
[01:35] <cfa> rypervenche: this is fine too,

[01:35] <cfa> m: sub foo($s) { $s*2 }; say (1,2,3) Z[&({$^b.($^a)})] &foo xx *

[01:35] <evalable6> cfa, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:36] <cfa> per your original

[01:36] <cfa> as is

[01:36] <cfa> m: sub foo($s) { $s*2 }; say (1,2,3) Z[&({$^b($^a)})] &foo xx *

[01:36] <evalable6> cfa, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:37] *** sena_kun left
[01:38] <cfa> or, ofc

[01:38] <cfa> m: say (1, 2, 3) Z[&({$^b($^a)})] { $_ * 2 } xx *

[01:38] <evalable6> cfa, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:39] <cfa> m: say (1, 2, 3) Z[&({$^b($^a)})] (* * 2) xx *

[01:39] <evalable6> cfa, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:40] * cfa shuts up

[01:45] <vrurg> rypervenche: it also works with $^b, $^a. Pointy block in my case is an artifact of experimenting.

[01:45] <vrurg> m: sub foo($s) { $s*2 }; say (1,2,3) X[&({$^b.($^a)})] &foo

[01:45] <evalable6> vrurg, rakudo-moar eb19a3d2e: OUTPUT: ¬´(2 4 6)‚ê§¬ª

[01:45] <vrurg> Oh, I should've read what cfa was writing. :D

[01:47] *** hankache joined
[01:52] *** hankache left
[01:54] <rypervenche> m: my @values = <one two three>; say @values X[&({$^b($^a)})] &uc

[01:54] <evalable6> rypervenche, rakudo-moar eb19a3d2e: OUTPUT: ¬´(ONE TWO THREE)‚ê§¬ª

[01:54] <rypervenche> Ahhh, I see. I needed the & there.

[01:56] <rypervenche> How would one put something like &uc into an array? and then use an array at the end instead? I keep getting errors.

[01:58] <cfa> vrurg: :P

[01:59] <vrurg> m: say (&uc xx 3).raku

[01:59] <evalable6> vrurg, rakudo-moar eb19a3d2e: OUTPUT: ¬´(proto sub uc ($, *%) {*}, proto sub uc ($, *%) {*}, proto sub uc ($, *%) {*}).Seq‚ê§¬ª

[01:59] <vrurg> rypervenche: like this, for example.

[02:00] <vrurg> rypervenche: &foo is a Callable object (Code and derivates).

[02:03] <cfa> rypervenche: what are you trying to achieve, exactly?

[02:03] <cfa> rypervenche: store a collection of functions to apply later?

[02:09] <rypervenche> Oh, I was missing parentheses. All good then. Just trying to do what the original question was.

[02:14] <vrurg> rypervenche: parentheses are there only to invoke .raku on the resulting list. xx creates a list on its own.

[02:14] <vrurg> m: my $a := &uc xx 3; say $a

[02:14] <evalable6> vrurg, rakudo-moar eb19a3d2e: OUTPUT: ¬´(&uc &uc &uc)‚ê§¬ª

[02:14] <vrurg> m: my $a := &uc xx 3; say $a.raku

[02:14] <evalable6> vrurg, rakudo-moar eb19a3d2e: OUTPUT: ¬´(proto sub uc ($, *%) {*}, proto sub uc ($, *%) {*}, proto sub uc ($, *%) {*}).Seq‚ê§¬ª

[02:25] *** mowcat left
[03:02] *** cfa left
[03:35] *** sena_kun joined
[03:37] *** Altai-man_ left
[03:40] *** reach_satori joined
[03:40] *** reach_satori_ left
[03:42] *** veesh joined
[04:04] *** reach_satori left
[04:05] *** reach_satori joined
[04:15] *** holyghost joined
[04:41] *** avar joined
[04:41] *** avar left
[04:41] *** avar joined
[04:59] *** aborazmeh left
[05:27] *** reach_satori left
[05:28] *** reach_satori joined
[05:34] *** Altai-man_ joined
[05:37] *** sena_kun left
[05:44] *** pierrot_ is now known as pierrot

[05:45] *** pierrot left
[05:45] *** pierrot joined
[06:19] *** Doc_Holliwould joined
[06:36] *** sftp left
[06:39] *** sftp joined
[06:41] *** sauvin joined
[07:30] *** wamba joined
[07:35] *** sena_kun joined
[07:37] *** Altai-man_ left
[07:39] *** abraxxa joined
[07:41] *** Bucciarati joined
[07:42] *** Redfoxmoon left
[07:44] *** abraxxa left
[07:44] *** abraxxa joined
[07:50] *** wamba left
[07:50] *** Doc_Holliwould left
[08:10] *** discord6 left
[08:10] *** discord6 joined
[08:10] *** discord6 left
[08:10] *** discord6 joined
[08:24] *** rindolf joined
[08:24] *** domidumont joined
[08:26] *** erdic left
[08:28] *** erdic joined
[08:31] *** leont joined
[08:31] *** wamba joined
[08:37] *** domidumont left
[08:39] *** abraxxa left
[08:41] *** abraxxa joined
[08:47] *** xelxebar left
[08:48] <leont> guifa: not really, though I have seen someone ask for the same operator a few weeks ago

[08:52] *** titsuki joined
[08:54] *** wamba left
[08:58] *** wamba joined
[09:13] *** mowcat joined
[09:15] *** wamba left
[09:15] *** veesh left
[09:17] *** veesh joined
[09:18] *** titsuki left
[09:23] *** wamba joined
[09:34] *** Altai-man_ joined
[09:37] *** sena_kun left
[09:40] *** titsuki joined
[09:44] <leont> m: say NaN == NaN; say NaN === NaN

[09:44] <evalable6> leont, rakudo-moar eb19a3d2e: OUTPUT: ¬´False‚ê§True‚ê§¬ª

[09:44] *** abraxxa left
[09:45] <leont> That seems surprising, it that a bug or a feature?

[09:47] <leont> I would argue bug

[09:48] *** abraxxa joined
[09:49] <leont> Both are logical in their own right, but the combination seems confusing

[09:51] *** pecastro joined
[09:54] *** Black_Ribbon left
[10:00] *** hankache joined
[10:08] *** pecastro left
[10:17] *** reach_satori left
[10:17] *** reach_satori joined
[10:36] *** pecastro joined
[10:42] *** reach_satori left
[10:42] *** reach_satori joined
[10:44] *** pecastro left
[10:44] *** reach_satori_ joined
[10:47] *** reach_satori left
[10:56] *** wamba left
[10:58] *** raven__ left
[11:00] *** EuAndreh[m] left
[11:01] *** wamba joined
[11:01] *** pmf[m] left
[11:03] *** darkstardevx joined
[11:07] *** mowcat left
[11:14] *** reach_satori joined
[11:15] *** reach_satori_ left
[11:23] *** mowcat joined
[11:25] *** tadzik[m]1 left
[11:35] *** sena_kun joined
[11:37] *** Altai-man_ left
[11:38] *** erdic left
[11:39] *** erdic joined
[11:50] *** pecastro joined
[11:59] *** pecastro left
[12:16] *** hankache left
[12:19] <tyil> hmm

[12:20] <tyil> I have a small raku script here, which throws a big error if I run it with `| head -n 3`

[12:20] <tyil> about a broken pipe

[12:20] *** molaf joined
[12:20] <tyil> I cannot post the script or its output, but I can post the error

[12:20] <tyil> https://p.tyil.nl/uk0k

[12:21] <tyil> piped through wc -l shows there's 71678 lines in the actual output

[12:22] *** wamba left
[12:23] *** mowcat left
[12:25] *** mowcat joined
[12:25] *** lucasb joined
[12:27] *** pecastro joined
[12:32] *** pecastro left
[12:34] <leont> Yeah, that is a known issue

[12:35] <leont> I'm sure I posted a solution a while ago, but I'm not sure I saved it

[12:38] <leont> ¬´use NativeCall; sub signal(int32, int64) is native { * }; signal(SIGPIPE, 0);¬ª

[12:49] <leont> It will ensure the default unix behavior in such cases, which is the right thing for command line tools and the wrong thing for network applications

[12:51] *** abraxxa left
[12:52] *** reach_satori left
[12:52] *** pecastro joined
[12:53] *** abraxxa joined
[12:53] *** Voldenet left
[13:03] <tyil> interesting

[13:03] <tyil> thanks leont 

[13:04] <leont> Raku defaults to the opposite, basically

[13:08] <lizmat> tyil: could it be that the module upload bot is down ?

[13:09] <tyil> cpan-raku is in this channel

[13:09] *** Voldenet joined
[13:09] *** Voldenet left
[13:09] *** Voldenet joined
[13:10] <tyil> logs show it saw voldenet change host just now as well

[13:11] <tyil> is it not reporting a module you uploaded?

[13:11] * lizmat just uploaded a module twice, and it has been reported on Twitter already  :)

[13:11] <tyil> hmm

[13:11] <tyil> give me a few moments to do some work related stuff

[13:11] <tyil> then I'll take a look :>

[13:11] <lizmat> no hurry...  just noticing...

[13:16] *** cpan-raku left
[13:16] *** cpan-raku joined
[13:16] *** cpan-raku left
[13:16] *** cpan-raku joined
[13:24] <tyil> lizmat: which module are you referring too?

[13:24] <tyil> twitter doesn't let me read anything without accepting js trackers these days

[13:24] <tyil> so I can't check there

[13:25] <lizmat> ValueTypeCache

[13:25] <tyil> ty

[13:25] <lizmat> 0.01 and 0.02

[13:26] *** mowcat left
[13:27] *** mensvaga left
[13:27] <cpan-raku> New module released to CPAN! ValueTypeCache (0.0.2) by 03ELIZABETH

[13:28] <cpan-raku> New module released to CPAN! ValueTypeCache (0.0.1) by 03ELIZABETH

[13:28] <tyil> both the nntp and rsync services to check for new modules seem to be having issues on my end

[13:28] <cpan-raku> New module released to CPAN! Cro::ZeroMQ (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! Cro::WebApp (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! cro (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! Cro::WebSocket (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! Cro::TLS (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! Cro::HTTP (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! Cro::Core (0.8.3) by 03JNTHN

[13:28] <cpan-raku> New module released to CPAN! ValueType (0.0.2) by 03ELIZABETH

[13:28] <tyil> seems like kicking them helps

[13:29] <tyil> nntp one is easy to fix by letting it die when it encounters an issue, so it'll restart itself

[13:29] <tyil> as for the rsync service, I'll need to take a moment to figure out a prettier way

[13:29] *** mowcat joined
[13:30] <tyil> if that restarts, it does a full rsync of all modules, which is a lot of data to do fi its not strictly necessary

[13:34] *** Altai-man_ joined
[13:36] <lizmat> ack

[13:37] <cpan-raku> New module released to CPAN! ValueType (0.0.1) by 03ELIZABETH

[13:37] *** sena_kun left
[13:37] *** abraxxa left
[13:41] *** __jrjsmrtn__ joined
[13:42] *** _jrjsmrtn left
[13:43] *** mowcat left
[13:46] <rypervenche> How do you all normally work on your modules and test them after changes made to them? I'm currently pushing to master on a git repo and then zef installing it each time, which is not ideal. Not sure how to use a different branch, but even then, it would be nice to just be able to use the module right away. I'm guessing 'use lib "lib"' and have to be in that directory or hardcode the directory there

[13:46] <rypervenche> and just exclude it from my repo? I'm curious how others do it.

[13:53] *** mensvaga joined
[13:56] <lizmat> zef install .

[13:57] *** Doc_Holliwould joined
[13:57] <lizmat> but failing that, "use lib 'lib'" when in the repo

[13:57] <lizmat> or other various ways of doing that, like PERL6LIB=lib ?

[13:57] <lizmat> afk&

[14:03] <rypervenche> Ahh, didn't realize I could zef install . I'll go with that and --force-install.

[14:04] <Altreus> I find I'm accidentally "activating" latent behaviour when I try to debug stuff

[14:04] <Altreus> Either I'm causing blocks on incomplete promises or, in this case, accidentally activating an Object::Delayed

[14:05] <Altreus> Any tricks to make this easier?

[14:05] <Altreus> I'm just using say because I'm lazy

[14:12] *** NODE left
[14:15] *** molaf left
[14:16] *** xNetX0 joined
[14:19] *** gabiruh joined
[14:23] *** xNetX0 is now known as NODE

[14:23] *** titsuki left
[14:34] *** Doc_Holliwould left
[14:48] <uzl[m]> rypervenche: You can use the -I flag followed by where the module is located (e.g., `raku -Ilib my-script.raku`). Alternatively, you can use RAKULIB/PERL6LIB (e.g., `RAKULIB=lib raku my-script.raku`) as lizmat suggests. This way you don't need to be installing your module after every minor change. 

[14:48] *** heth left
[14:49] <rypervenche> Sounds good. Thanks for the advice.

[14:50] *** heth joined
[14:52] <uzl[m]> Np!

[14:56] *** vike left
[15:02] *** vike joined
[15:02] <leont> m: say roundrobin([1, 2], [3, 4]); say roundrobin([1, 2]);'

[15:02] <evalable6> leont, rakudo-moar ffcc61986: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[15:02] <evalable6> leont, Full output: https://gist.github.com/e0f4793310da9fbdf99ef90b5a9598cc

[15:03] <leont> m: say roundrobin([1, 2], [3, 4]); say roundrobin([1, 2]);

[15:03] <evalable6> leont, rakudo-moar ffcc61986: OUTPUT: ¬´((1 3) (2 4))‚ê§((1 2))‚ê§¬ª

[15:03] <leont> That second result is very surprising to me

[15:03] <leont> I would have expected (1), (2)

[15:08] *** patrickb joined
[15:08] <guifa> leont: that NaN != NaN but NaN === NaN isn‚Äôt a bug

[15:08] <uzl[m]> m: say roundrobin [1, 2], []

[15:08] <evalable6> uzl[m], rakudo-moar ffcc61986: OUTPUT: ¬´((1) (2))‚ê§¬ª

[15:08] <guifa> You need to use === to test that something is, well, not a number

[15:09] <uzl[m]> leont: ^ It seems you must provide a list of lists so they can be zipped up. Even if one of them is an empty list as in this case.

[15:10] <guifa> Because === checks for identity

[15:10] <guifa> == checks for value, and in that sense, it should return false: NaN can be obtained from a variety of different operations, and it‚Äôs Not Safe‚Ñ¢ to assume the values are equal

[15:11] <leont> uzl[m]: that doesn't make sense

[15:12] <leont> I can see what it does, but why would we want it to do this?

[15:13] <uzl[m]> leont: What I gather is that with a single list, roundrobin has nothing to zip it up with so it just returns a list containing the list itself.

[15:19] <guifa> It‚Äôs not returning the list itself

[15:20] *** patrickz joined
[15:20] <guifa> m: my @a = [1,2]; say @a.WHAT; say roundrobin(@a).WHAT

[15:20] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´(Array)‚ê§(Seq)‚ê§¬ª

[15:21] <guifa> m: my @a = [1,2]; say @a.WHAT; say roundrobin(@a).head.WHAT

[15:21] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´(Array)‚ê§(List)‚ê§¬ª

[15:21] <guifa> It gathers the first element of each iterable it‚Äôs passed, and puts it into a list.  Then it grabs the second element, etc. Then it returns a Seq of lists

[15:22] <guifa> The idea of roundrobin is that the lists don‚Äôt need to be equal

[15:22] <guifa> If you do (1,2) Z (3,4,5), the 5 disappears:

[15:22] <guifa> m: say (1,2) Z (3,4,5)

[15:22] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´((1 3) (2 4))‚ê§¬ª

[15:23] <guifa> Roundrobin takes the first elements, then the second ones, and so on.  But if a value doesn‚Äôt exist at that index, it just ignores it:

[15:23] <guifa> m: say roundrobin (1,2,3), (10,20), (100,200,300,400)

[15:23] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´((1 10 100) (2 20 200) (3 300) (400))‚ê§¬ª

[15:25] <guifa> leont uzl[m] ^^ hope that helps

[15:25] <leont> Not really

[15:25] <leont> (not to be ungrateful for your effort)

[15:28] <uzl[m]> guifa: thanks. It cleared up some things up.

[15:30] <guifa> Actually wait

[15:30] <guifa> leont‚Äôs not entirely wrong.  I think this is a case of the single argument rule.

[15:31] <guifa> m: say roundrobin( [1,2] ); say roundrobin( [3,4],¬†)

[15:31] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´((1 2))‚ê§((3 4))‚ê§¬ª

[15:31] <guifa> m: say roundrobin( (1,2) ); say roundrobin( (3,4), )

[15:31] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´((1 2))‚ê§((3 4))‚ê§¬ª

[15:32] <guifa> nm ignore me

[15:34] <guifa> I actually now agree that leont found a bug.  It SHOULD be ((1),(2)) and ((3),(4))

[15:36] *** sena_kun joined
[15:37] *** Altai-man_ left
[15:38] <guifa> I‚Äôm fairly certain it‚Äôs a single argument rule issue that‚Äôs causing it.  The definition is sub rr (+lol) and that‚Äôs getting passed onto to Rakudo::Iterable::RoundrobinIterables

[15:39] *** titsuki joined
[15:40] <guifa> That means that when you do (1,2),(3,4), you get lol = first item (1,2), and second item (3,4).  But if you do rr([1,2]) you get lol = first item 1, second item 2.  And then RR‚Äôs behavior is correct to give first item of 1 (which is 1) and first item of 2 (which is 2) in a list, as the first item of the sequence

[15:41] *** Redfoxmoon joined
[15:41] *** Redfoxmoon left
[15:41] *** Redfoxmoon joined
[15:43] <guifa> (lol = list of lists, not the more typical ha)

[15:47] <guifa> Here‚Äôs a way to force it down: 

[15:47] <guifa> m: my @a = 1,2,3; say roundrobin(@a); my @b = @a,; say roundrobin(@b)

[15:47] <evalable6> guifa, rakudo-moar ffcc61986: OUTPUT: ¬´((1 2 3))‚ê§(([1 2 3]))‚ê§¬ª

[15:48] <guifa> of course now it‚Äôs interpretting the array as a single scalar element.  *sigh*

[15:48] <leont> I don't think I've encountered a + sigil before‚Ä¶

[15:48] <guifa> it‚Äôs a slurpy 

[15:50] <guifa> *@a = flatten all iterables into one.  **@a = don‚Äôt flatten them.  +@a = same as **@a, but if there‚Äôs only one argument, then flatten it

[15:52] * guifa heads to $day-job

[16:10] *** wamba joined
[16:16] *** patrickz left
[16:19] <Altreus> How do I call the default constructor from a subclass? Is there a super keyword?

[16:21] <Altreus> Previously I've called the method on the parent class I want to use it from

[16:21] <mst> Altreus: what are you trying to achieve?

[16:21] <mst> why bother overriding the constructor when you have BUILD and TWEAK

[16:22] *** aluaces left
[16:22] <Altreus> I'm trying to reshape the args, because most of them are actually for constructing a property

[16:22] <Altreus> But I did change my mind halfway through

[16:23] <Altreus> so I will try BUILD and see if it works correctly

[16:24] <mst> I would say 90% likelihood you wanted BUILD in that case

[16:24] <mst> BUILD in raky is sort of a combination of BUILDARGS and slot population

[16:28] <Altreus> typo or nickname? :P

[16:28] <mst> tupo

[16:42] *** wamba left
[16:45] *** Doc_Holliwood joined
[16:55] *** mowcat joined
[17:20] *** reach_satori joined
[17:29] *** aluaces joined
[17:34] *** Altai-man_ joined
[17:36] *** Kaiepi left
[17:37] *** sena_kun left
[17:38] *** zingzhang joined
[17:40] *** Altai-man_ left
[17:41] *** sena_kun joined
[17:41] *** foo222 joined
[17:43] *** mochan32 joined
[17:44] *** foo222 left
[17:46] *** mochan joined
[17:48] *** aluaces left
[17:49] <mochan> Just learning raku. I have a question. Why does the program 

[17:49] <mochan> my $a=3;say $a while $a-- .Int 

[17:49] <evalable6> mochan, rakudo-moar ffcc61986: OUTPUT: ¬´2‚ê§1‚ê§0‚ê§¬ª

[17:50] <mochan> works and prints three numbers, while the program

[17:50] <mochan> my $a=3;say $a while $a--

[17:50] <evalable6> mochan, rakudo-moar ffcc61986: OUTPUT: ¬´2‚ê§1‚ê§0‚ê§¬ª

[17:50] <mochan> loops without stopping

[17:51] <leont> It does stop, as shown above by evalable6 

[17:51] *** sena_kun left
[17:52] <mochan> Sorry. Your are right. I must have made some error yesterday with a similar example. I'll try to recover it. 

[17:52] *** sena_kun joined
[17:53] <lizmat> mochan: if you do things more declarative, it makes it harder to make mistakes

[17:53] <lizmat> m: .say for 2...0

[17:53] <evalable6> lizmat, rakudo-moar ffcc61986: OUTPUT: ¬´2‚ê§1‚ê§0‚ê§¬ª

[17:59] <leont> Yes, more declarative code is generally a good idea

[18:00] <mochan> I found it. my $a=3; $a.say while {--$a}

[18:01] <mochan> I guess the braces are wrong. But I expected the block to yield the new value of $a. Actually, $a doesn't change during the infinite iteration.

[18:08] <lizmat> mochan: that's a postfix "while"

[18:08] <lizmat> and a block is true when evaluated as a Bool

[18:08] <lizmat> so your code effectively says:

[18:08] <lizmat> my $a=3; $a.say while True

[18:09] *** sarna left
[18:09] <lizmat> and that indeed, will only stop when you make it stop

[18:09] *** sarna joined
[18:09] *** titsuki left
[18:10] <mochan> Ok. Thanks!

[18:12] <mochan> { 0 }.Bool returns True, but { 0 } returns 0! 

[18:12] *** zingzhang2 joined
[18:13] <mochan> (do { 0 }).Bool returns False.

[18:13] *** matiaslina left
[18:13] *** uzl[m] left
[18:13] <jnthn> Only because a block at statement level is immediately evaluated; this is not true in general.

[18:13] <jnthn> m: my $a=3; $a.say while do {--$a}

[18:13] <evalable6> jnthn, rakudo-moar ffcc61986: OUTPUT: ¬´2‚ê§1‚ê§¬ª

[18:15] *** zingzhang left
[18:18] *** mochan32 left
[18:21] *** pecastro left
[18:25] *** matiaslina joined
[18:31] *** cfa joined
[18:32] *** Kaiepi joined
[18:32] <cfa> o/

[18:33] *** uzl[m] joined
[18:38] *** clarjon1 joined
[18:58] *** patrickb left
[19:07] *** wildtrees joined
[19:08] *** wildtrees left
[19:08] *** wildtrees joined
[19:11] <cfa> leont: ah, that signal snippet is handy; thanks

[19:11] <cfa> it's a shame that it's necessary though

[19:12] <leont> I perhaps should make it a module

[19:12] <cfa> yeah

[19:14] <leont> (with an unless Windows around it)

[19:14] <leont> Not sure yet what to call it

[19:20] <leont> What does it say about me that I have 3 consecutive lines with a map in them :-p

[19:23] *** sauvin left
[19:24] *** chloekek joined
[19:25] *** pecastro joined
[19:31] <guifa> leont: that you like functional programming lol

[19:35] *** Altai-man_ joined
[19:38] *** sena_kun left
[19:39] *** Kaiepi left
[19:40] *** Kaiepi joined
[19:47] *** chloekek left
[19:56] *** TheAthlete joined
[19:57] <TheAthlete> Hello!

[19:57] <TheAthlete> Where can I find the source code of IO:: Socket::Async

[19:59] <cfa> https://github.com/rakudo/rakudo/blob/master/src/core.c/IO/Socket/Async.pm6

[20:00] <TheAthlete> Thanks a lot!

[20:00] <cfa> TheAthlete: np

[20:03] <leont> You could have asked for a simpler piece of code though

[20:04] <leont> Any particular problem you're hitting?

[20:05] *** lucasb left
[20:07] <TheAthlete> There are no problems at the moment. I just want to see how the module works from the inside.

[20:08] <leont> Much of it is actually implemented in C, hence all the nqp

[20:15] *** zingzhang2 left
[20:24] *** domidumont joined
[20:27] *** Itaipu left
[20:28] *** Itaipu joined
[20:34] *** TheAthlete left
[20:36] *** domidumont left
[21:08] <cpan-raku> New module released to CPAN! Gnome::Gio (0.2.0) by 03MARTIMM

[21:19] *** mensvaga left
[21:27] *** aluaces joined
[21:36] *** sena_kun joined
[21:38] *** Altai-man_ left
[21:38] *** mochan left
[21:52] *** rindolf left
[22:20] *** sno left
[22:21] *** Itaipu left
[22:22] *** sno joined
[22:35] *** Itaipu joined
[22:37] *** Exodist left
[22:38] *** Exodist joined
[22:40] *** Itaipu left
[22:41] *** Itaipu joined
[22:44] *** Black_Ribbon joined
[22:50] *** wamba joined
[22:56] *** wildtrees left
[22:58] *** wildtrees joined
[23:35] *** Altai-man_ joined
[23:37] *** sena_kun left
[23:41] *** cognomin_ joined
[23:45] *** cognominal left
[23:55] *** aborazmeh joined
[23:55] *** aborazmeh left
[23:55] *** aborazmeh joined
