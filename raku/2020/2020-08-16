[00:02] *** MilkmanDan left
[00:28] *** guifa2 joined
[00:32] *** dogbert11 joined
[00:33] *** tejr left
[00:33] *** zacts joined
[00:35] *** dogbert17 left
[00:40] *** tejr joined
[00:53] *** stanrifkin left
[01:01] *** _jrjsmrtn joined
[01:02] *** __jrjsmrtn__ left
[01:04] *** gdonald left
[01:11] *** dogbert17 joined
[01:14] *** dogbert11 left
[01:15] *** sena_kun joined
[01:16] *** Altai-man left
[01:36] *** zacts left
[01:37] *** zacts joined
[01:45] *** Noisytoot left
[01:53] *** zacts left
[01:53] *** dogbert11 joined
[01:57] *** dogbert17 left
[02:00] <codesections> .tell melezhik `[‚Ä¶]` is the Array constructor.  `(1,2)` constructs a list; `%(1, 2)` constructs a Hash; and `[1, 2]` constructs an Array.  That means `[ [1,2], ]` - which is the same as `[ [1,2], () ]` constructs an Array inside an Array.  Thus, `[ [1,2], ][0]` is `[1,2]`.  But, without the trailing `,`, empty layers are ignored, so `[ [1,2] ][0]` is `1`.  Does that help?

[02:00] <tellable6> codesections, I'll pass your message to melezhik

[02:02] *** melezhik joined
[02:03] <melezhik> . tell timotimo: looks like I have found that ideally fits my use case https://docs.raku.org/language/list#Single_Argument_Rule. 

[02:03] <tellable6> hey melezhik, you have a message: https://gist.github.com/ebf3329a42973a725dfcc51655c19ce5

[02:04] <melezhik> üòä

[02:05] *** melezhik left
[02:05] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:06] *** melezhik joined
[02:08] *** dogbert17 joined
[02:08] <melezhik> codesections: yeah I am slowly figuring all this out while reading documentation. but yeah thanks to you and timotimo: for all the help.  

[02:09] <rypervenche> codesections: Would you say that [] is the same as @(), or does @() coerce something to an array?

[02:11] *** dogbert11 left
[02:11] <codesections> The other way around, I'm pretty sure - `[]` coerces to an Array, but @() just makes it Positional (which could be a list)

[02:11] *** melezhik left
[02:11] *** dogbert11 joined
[02:11] <codesections> m: say @(1,2).WHAT; say [1,2].WHAT

[02:11] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´(List)‚ê§(Array)‚ê§¬ª

[02:12] <rypervenche> Oooh

[02:12] <rypervenche> TIL :P

[02:14] *** dogbert17 left
[02:21] *** dogbert17 joined
[02:23] *** dogbert11 left
[02:30] *** guifa2 left
[02:41] *** dogbert17 left
[02:44] *** dogbert17 joined
[02:53] *** skids left
[02:53] *** cooper joined
[03:14] *** melezhik joined
[03:14] <melezhik> as for `[1],` I am also reading this - https://perl6advent.wordpress.com/2015/12/14/day-15-2015-the-year-of-the-great-list-refactor/

[03:25] *** zacts joined
[03:32] *** lucasb left
[03:47] <melezhik> .tell timotimo hopefully now I nailed it down - https://github.com/melezhik/Sparrow6/blob/master/documentation/development.md#single-element-args-array

[03:47] <tellable6> melezhik, I'll pass your message to timotimo

[03:49] *** melezhik left
[03:50] *** guifa2 joined
[03:52] <guifa2> m: class Foo is Date { method new(*%c) {¬†self.bless(|%c) }¬†}; say Foo.new(:2020year, :15month, :56day) 

[03:52] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´2020-15-56‚ê§¬ª

[03:52] <guifa2> :D  :D :D :D

[03:52] * guifa2 gives extra evil grin

[04:01] *** cpan-raku left
[04:02] *** cpan-raku joined
[04:02] *** cpan-raku left
[04:02] *** cpan-raku joined
[04:14] *** clarjon1 joined
[04:26] *** zacts left
[05:03] *** cooper left
[05:14] *** Altai-man joined
[05:16] *** ensamvarg3 joined
[05:16] *** sena_kun left
[05:47] *** yuplushi left
[05:56] *** wamba joined
[06:11] *** rindolf joined
[06:28] *** zacts joined
[06:30] *** yuplushi joined
[06:48] *** xinming_ left
[06:50] *** xinming_ joined
[07:12] *** zacts_ joined
[07:16] *** zacts left
[07:16] *** zacts joined
[07:17] *** JJMerelo joined
[07:17] <JJMerelo> releasable6: status

[07:17] <releasable6> JJMerelo, Next release in ‚âà6 days and ‚âà11 hours. 1 blocker. Changelog for this release was not started yet

[07:17] <releasable6> JJMerelo, Details: https://gist.github.com/8609f4122ffd87867b9e5440e3781a04

[07:17] *** zacts_ left
[07:25] *** keutoi joined
[07:43] *** dolmen joined
[07:49] *** dolmen left
[08:17] *** ensamvarg3 left
[08:24] <Geth> ¬¶ advent: 4f707ec0ac | (JJ Merelo)++ | 20th/articles/rfc159.md

[08:24] <Geth> ¬¶ advent: Minor typographic corrections

[08:24] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/4f707ec0ac

[08:26] *** ensamvarg3 joined
[08:43] *** leont joined
[08:51] *** keutoi left
[08:52] *** sena_kun joined
[08:53] *** Altai-man left
[09:01] *** JJMerelo left
[09:02] *** samcv left
[09:02] *** samcv joined
[09:07] *** MilkmanDan joined
[09:32] *** JJMerelo joined
[09:38] *** keutoi joined
[09:43] *** keutoi left
[09:49] *** ensamvarg3 left
[10:02] *** wamba left
[10:06] *** pecastro joined
[10:10] *** fridim left
[10:12] *** fridim joined
[10:12] *** stoned75 left
[10:14] *** stoned75 joined
[10:18] *** wamba joined
[10:27] *** bdju left
[10:28] *** bdju joined
[10:34] *** JJMerelo left
[10:37] *** Sgeo left
[10:50] <Geth> ¬¶ ecosystem: 71548649ae | (Ramiro Encinas)++ (committed using GitHub Web editor) | META.list

[10:50] <Geth> ¬¶ ecosystem: Added System::Stats::CPUsage module

[10:50] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/71548649ae

[10:54] *** ramix joined
[11:00] *** ramix left
[11:59] *** molaf joined
[12:16] *** zacts left
[12:31] *** keutoi joined
[12:51] *** Altai-man joined
[12:53] *** sena_kun left
[12:59] *** cpage left
[13:10] *** keutoi left
[13:10] *** zacts joined
[13:16] *** keutoi joined
[13:27] *** keutoi left
[13:34] *** lucasb joined
[13:38] *** keutoi joined
[14:06] *** mirrorbird joined
[14:20] *** MilkmanDan left
[14:21] *** MilkmanDan joined
[14:44] *** stoned75 left
[14:46] <holyghost> I managed a good parsing system for my theorem prover

[14:46] <holyghost> It uses operators (and,not,or) on lists

[14:47] <holyghost> I might port it to nqp with a patch for the delimiter theorem prover, for raku

[14:47] <holyghost> as a patch, nothing much

[14:47] <holyghost> people don't need it :-)

[14:48] <holyghost> it's somewhat better in scheme as it is now, as you need an index for a nqp list

[14:48] *** mirrorbird left
[14:50] *** stoned75 joined
[14:51] *** keutoi left
[14:54] *** xinming joined
[14:57] *** xinming_ left
[15:26] *** orinthe left
[15:27] *** orinthe joined
[15:28] *** MilkmanDan left
[15:31] *** MilkmanDan joined
[15:36] *** squashable6 left
[15:38] *** squashable6 joined
[15:48] *** JJMerelo joined
[15:48] <JJMerelo> Hey

[15:52] <lizmat> JJMerelo o/

[15:52] <JJMerelo> \o

[15:53] <JJMerelo> lizmat the hacker news post has had a big impact on visits.

[15:53] <JJMerelo> lizmat as well as reference spam

[15:53] <lizmat> which one are you talking about?

[15:54] <lizmat> I post regularly on HN  :-)

[15:57] <JJMerelo> lizmat the one about OO and RFC

[15:58] <JJMerelo> https://raku-advent.blog/2020/08/16/rfc-188-by-damian-conway-objects-private-keys-and-methods/

[15:58] <JJMerelo> There must have been something special about it, since it's quadrupled visits just by being mentioned there.

[15:59] <lizmat> yeah, Damian again serving as clickbait on HN  :-)

[16:04] <JJMerelo> So that's the thing...

[16:05] <lizmat> it only works sometimes, oddly enough

[16:06] <lizmat> didn't work for https://raku-advent.blog/2020/08/13/rfc22-control-flow-builtin-switch-statement-by-damian-conway/  :-(

[16:07] <JJMerelo> Let's hope there's some spillover to the other stories...

[16:12] <JJMerelo> lizmat looking up to add docs for Proc::Async::Pipe, but also stopping at Proc::Async

[16:12] <JJMerelo> lizmat what does this mean? https://github.com/rakudo/rakudo/blob/ed936c1435d63265e9afcf7c95419b9884084775/src/core.c/Proc/Async.pm6#L124

[16:12] <JJMerelo> It means that it needs to be deprecated, but it's not?

[16:12] *** rockxloose left
[16:13] *** rockxloose joined
[16:13] *** MilkmanDan left
[16:14] <lizmat> Zoffix appears to have added that line...  I guess it was part of the IO grant that they gave back later

[16:14] <lizmat> I have no idea

[16:15] *** MilkmanDan joined
[16:15] *** stoned75 left
[16:16] <JJMerelo> Proc::Async seems to have shifted away from docs, also.

[16:17] <lizmat> isn't Patrick B√∂ker working on that ?

[16:17] <JJMerelo> The docs? Not AFAIK

[16:18] <lizmat> no, on Proc::Async?

[16:19] <JJMerelo> Ah, OK, yes, that part was added by him.

[16:20] <JJMerelo> lizmat but then again the docs do not seem to correspond to the actual definition of Proc::Async.new

[16:21] <lizmat> perhaps check with PB ?

[16:21] <JJMerelo> lizmat https://github.com/rakudo/rakudo/blob/ed936c1435d63265e9afcf7c95419b9884084775/src/core.c/Proc/Async.pm6#L123

[16:21] <JJMerelo> vs https://docs.raku.org/type/Proc::Async#method_new

[16:23] <lizmat> looks like all extra named args are passed on verbatim ?

[16:23] *** jessa^22 joined
[16:23] <JJMerelo> Ah, OK, the |%_ part

[16:24] <lizmat> JJMerelo: you still need my #200 post, right ?

[16:24] <JJMerelo> lizmat yes, please, for tomorrow if possible.

[16:24] <JJMerelo> If you can't make it I'll try to whip up something.

[16:24] <lizmat> ok, I will work on that now then and have it ready before I start working on tomorrow's RWN

[16:24] <JJMerelo> thanks, lizmat

[16:25] <lizmat> I can make it... just wanted to know for sure if nobody else filled the remaining slots

[16:25] <JJMerelo> I got [Coke]'s, keeping it for last.

[16:27] *** MilkmanDan left
[16:27] *** skids joined
[16:33] *** jessa^22 left
[16:35] *** guifa2 left
[16:36] *** guifa2 joined
[16:41] <Geth> ¬¶ doc: e8c5aca937 | (Elizabeth Mattijsen)++ | 3 files

[16:41] <Geth> ¬¶ doc: Correct name of named argument to STORE

[16:41] <Geth> ¬¶ doc: 

[16:41] <Geth> ¬¶ doc: It has been INITIALIZE for quite some time already.

[16:41] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/e8c5aca937

[16:46] *** zacts left
[16:51] *** sena_kun joined
[16:54] *** Altai-man left
[16:57] * lizmat hates false positives from CI runs

[16:57] <lizmat> https://app.circleci.com/pipelines/github/Raku/doc/829/workflows/8805ad1c-5e94-4c36-9d5f-454be92a6bca/jobs/814

[17:00] <Geth> ¬¶ doc/master: 6 commits pushed by (JJ Merelo)++

[17:00] <Geth> ¬¶ doc/master: 4058e098da | Add definition of the :start attribute #3561

[17:00] <Geth> ¬¶ doc/master: a796797195 | Reformatting and correcting links #3561

[17:00] <Geth> ¬¶ doc/master: 7818041624 | Adds put #3561

[17:00] <Geth> ¬¶ doc/master: beb69780fd | Revises interpretation of win-verbatim-args #3561

[17:00] <Geth> ¬¶ doc/master: a48448a4a8 | Revises kill #3561

[17:00] <Geth> ¬¶ doc/master: f8e535e7ec | Fixes compilation errors closes #3561

[17:00] <Geth> ¬¶ doc/master: review: https://github.com/Raku/doc/compare/e8c5aca9378f...f8e535e7ecc2

[17:00] <JJMerelo> lizmat I think I'm going to disable that. It never works...

[17:00] <lizmat> if people see too many false positives, they will ignore the reports

[17:00] <lizmat> I know I will

[17:21] *** guifa2 left
[17:23] <leont> I can't get rakudo to build anymore, becuase 3rdparty/nqp-configure trips over with ¬´error: Entry '3rdparty/nqp-configure/README.md' not uptodate. Cannot merge.¬ª

[17:24] <leont> Anyone have a clue? Other than ¬´rm -rf && git clone¬ª

[17:24] <lizmat> git stash ?

[17:24] <leont> The submodule is in a clean state

[17:27] <lizmat> git submodule update ?

[17:37] <leont> Doesn't seem to make a difference

[17:38] <leont> http://paste.scsys.co.uk/592443

[17:39] <lizmat> have you tried without the --backends=moar ?

[17:40] <leont> Same result

[17:40] *** Sgeo joined
[17:41] <lizmat> rename the install dir to something else, mimicking its absence ?

[17:43] <lizmat> builds ok for me  :-(

[17:49] *** JJMerelo left
[17:56] <codesections> There's not a faster/better way to set the topic var of a sub to parameter than VVVVV, is there? 

[17:56] <codesections> sub f($arg) { given $arg { .say }} 

[17:57] <codesections> :m sub f($arg) { given $arg { .say }}; f 'using given'

[17:57] <codesections> m: sub f($arg) { given $arg { .say }}; f 'using given'

[17:57] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´using given‚ê§¬ª

[17:57] <tobs> m: sub f ($_) { .say }; f 'using aliasing'

[17:57] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´using aliasing‚ê§¬ª

[17:58] <codesections> Oh, that's much cleaner ‚Äì thanks, tobs

[17:58] *** Sgeo left
[17:58] <tobs> you will also see this used with $/ in action classes of grammars

[17:58] <codesections> You know, I *have* seen that -- it should have occured to me that I could do the same thing with $_ as with $/

[17:59] <lizmat> codesections: if you just want a code block that says what it gets, then &say would do what you want

[17:59] <codesections> tobs, is there a way to use that syntax with a named parameter?

[18:00] <leont> Creating an entirely new checkout "solved it", may need to move some branches over though

[18:01] *** Sgeo joined
[18:01] <tobs> codesections: yeah, I think that's called aliasing as well

[18:01] <tobs> m: sub f(:named($_)) { .say }; f named => 'test'

[18:01] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´test‚ê§¬ª

[18:02] <codesections> Thanks, lizmat.  I was asking more generally about the syntax for assigning the topic variable when declaring a sub, so tobs' answer was what I was looking for.  (I find myself using blocks for a similar purpose (`my &f { *something with the topic* }` instead of (`sub f($name) {‚Ä¶}`), but this approach seems clearer)

[18:02] <lizmat> codesections: you're welcome

[18:03] <codesections> Thanks.  Here, again, I'd seen (and even used!) aliasing syntax.  But I hadn't put the pieces together!

[18:10] *** MilkmanDan joined
[18:11] <tobs> yes, raku gives you that feeling every now and then. It's great :)

[18:22] <lizmat> note that this behaviour is also handy in TWEAK

[18:23] <lizmat> m: class Foo { has $!a; method TWEAK(:$!a = 42) { }; method a() { $!a } }; dd Foo.new.a

[18:23] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´42‚ê§¬ª

[18:26] <codesections> m: class Foo { has $!a; method TWEAK($!a = 42) { }; method a() { $!a } }; dd Foo.new.a

[18:26] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´42‚ê§¬ª

[18:27] <codesections> lizmat: Very interesting, thanks.  What role is the `:` playing?  It looks like the same result without it?

[18:28] <lizmat> without the :, it is a positional parameter

[18:28] <lizmat> and since it has a default, and no value was specified, it seems to work

[18:28] <lizmat> m: m: class Foo { has $!a; method TWEAK($!a = 42) { }; method a() { $!a } }; dd Foo.new(a => 666).a   # but in fact does not

[18:28] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´42‚ê§¬ª

[18:29] *** Maylay left
[18:29] <codesections> aha, thanks.  Very useful stuff :)

[18:31] *** Maylay joined
[18:32] *** Celelibi joined
[19:05] <codesections> Is there a straightforward way to check whether a string constitutes a syntactically valid Regex?  I've encountered that issue when working with text interpolated into a regex (see below)

[19:05] <codesections> m: my $a := '.'; say 'foo' ~~ /<$a>/; # this works

[19:05] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´ÔΩ¢fÔΩ£‚ê§¬ª

[19:05] <codesections> m: my $a := '*'; say 'foo' ~~ /<$a>/; #this doesn't

[19:05] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Quantifier quantifies nothing‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3anon regex {  *7‚èè5}‚ê§¬ª

[19:06] <codesections> Is there a way to check for ^^^ before running the Regex (ideally, even to prevent a string that would be an invalid Regex from matching the Signature), or is it better to just catch the error when it happens?

[19:08] <lizmat> using a CATCH block or a try would be my suggestion

[19:09] <codesections> Thanks.  That was my thought too, but I wanted to make sure there wasn't some Signature trickery I didn't know about :)  (Something like sub `f(Regex(Str) $a)`, but that doesn't quite work)

[19:12] <lizmat> that will only do type checking

[19:14] <codesections> m: sub f(Int(Str) $a) { say $a}; f('42'); f('foo')

[19:14] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´42‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5foo' (indicated by ‚èè)‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:15] <codesections> that ^^^ asks for a Str that can be validly coerced to an Int.  I was wondering if there was something similar for a Str that can become a Regex

[19:16] <codesections> But it makes sense that there isn't ‚Äì a Str isn't *coerced* to a Regex, it's *interpolated* as (part of all) of one

[19:19] *** lichtkind joined
[19:22] <Geth> ¬¶ advent: 5890941ec9 | Altai-man++ (committed using GitHub Web editor) | 20th/README.md

[19:22] <Geth> ¬¶ advent: Promise RFC 84

[19:22] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/5890941ec9

[19:32] *** sena_kun left
[19:32] *** sena_kun joined
[20:29] <rypervenche> How would change the locale for the .lc method? For example using the Turkish locale and having 'I'.lc.say output „Äåƒ±„Äç instead of „Äåi„Äç?  Changing the locale on my system didn't seem to do anything.

[20:39] <Geth> ¬¶ ecosystem: kjkuan++ created pull request #524: Add my Shell::DSL module to the list

[20:39] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/524

[20:42] <MasterDuke> hm. do you have it available on your system? `locale -a` for me only lists 'C', 'en_US.utf8', and 'POSIX'

[20:45] <rypervenche> MasterDuke: I do indeed.

[20:45] <rypervenche> export LANG="tr_TR.UTF-8" LC_ALL="tr_TR.UTF-8" LANGUAGE="tr_TR"; raku -e "say 'I'.lc;"

[20:47] <MasterDuke> hm, not sure then (as you can probably tell, i don't do much with locales)

[20:51] *** Altai-man joined
[20:53] *** sena_kun left
[20:55] <moritz> rakudo doesn't do any locales, afaict

[20:59] <codesections> Hmm, I have a POST block, and when I return a value from the function with the `return` keyword, it works fine.  But when I return *the same value* with the implicit return in a `when` block, it dies and says 'expected Any but got Mu (Mu)'.  How odd

[21:04] <codesections> m: sub f() { POST { .say; True }; when ?True { return 5 }; 6}; f

[21:04] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´5‚ê§¬ª

[21:04] <codesections> sub f() { POST { .say; True }; when ?True {        5 }; 6}; f

[21:05] <codesections> m: sub f() { POST { .say; True }; when ?True { 5 }; 6}; f

[21:05] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: ¬´(Mu)‚ê§return_value + exit_handler case NYI‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:05] <Geth> ¬¶ advent: 407e389fd1 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20th/articles/rfc200.md

[21:05] <Geth> ¬¶ advent: Create rfc200.md

[21:05] <Geth> ¬¶ advent: review: https://github.com/Raku/advent/commit/407e389fd1

[21:06] <codesections> ^^^ Slightly different (better?) error msg, but the same general issue.  I wouldn't have expected implicit and explicit returns to behave any differently 

[21:06] <lizmat> comments welcome ^^

[21:06] *** Sgeo left
[21:06] <lizmat> .tell JJMerelo https://github.com/Raku/advent/blob/master/20th/articles/rfc200.md

[21:06] <tellable6> lizmat, I'll pass your message to JJMerelo

[21:11] *** rindolf left
[21:18] *** Sgeo joined
[21:20] *** HarmtH joined
[21:26] *** Black_Ribbon joined
[22:02] *** mowcat joined
[22:39] *** seanrobert joined
[23:09] *** seanrobert left
[23:09] *** seanrobert joined
[23:19] *** tejr left
[23:20] *** pecastro left
[23:24] *** lucasb left
[23:25] *** tejr joined
[23:25] *** lichtkind left
[23:38] *** cpan-raku left
[23:39] *** cpan-raku joined
[23:39] *** cpan-raku left
[23:39] *** cpan-raku joined
[23:40] *** leont left
[23:50] *** wamba left
