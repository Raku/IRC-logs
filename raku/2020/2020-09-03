[00:09] *** sena_kun left
[00:13] *** Noisytoot left
[00:27] *** Noisytoot joined
[00:28] <[Coke]> vrurg++

[00:28] <[Coke]> discoD++

[00:47] *** aborazmeh joined
[00:47] *** aborazmeh left
[00:47] *** aborazmeh joined
[00:58] *** Tirifto left
[01:10] *** _jrjsmrtn joined
[01:10] *** __jrjsmrtn__ left
[01:24] *** molaf left
[01:34] *** hythm joined
[01:35] <hythm> m: my @a = 1, 2; .say for @a.map( *.Str )

[01:35] <camelia> rakudo-moar 82d505269: OUTPUT: ¬´1‚ê§2‚ê§¬ª

[01:35] <hythm> m: my @a = 1, 2; .say for @a.map( *.WHAT )

[01:35] <camelia> rakudo-moar 82d505269: OUTPUT: ¬´Cannot map a Array using 'Whatever'‚ê§Did a * (Whatever) get absorbed by a list?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[01:37] <hythm> hello, Why *.WHAT errors out while *.Str works?

[01:37] *** molaf joined
[01:40] *** nebuchadnezzar left
[01:41] <discoD> the whatever star is special i think. try it with map({*.Str}) and map({*.WHAT}) to see how it behaves

[01:42] <hythm> works with map( { .WHAT })

[01:42] <codesections> It'll need to be `map({.Str})` and `map({.WHAT})` (i.e., you can't have the * and the {})

[01:44] <hythm> m: my @a = 1, 2; .say for @a.map({ .WHAT })

[01:44] <camelia> rakudo-moar 82d505269: OUTPUT: ¬´(Int)‚ê§(Int)‚ê§¬ª

[01:57] <[Coke]> given a BagHash, how can I dump the content of another BagHash into it?

[01:58] <[Coke]> (+) ?

[01:59] <[Coke]> aye

[02:00] <[Coke]> lizmat: ok, I have a script to tally votes. I'm sure it'll need some tweaking once real votes start coming in, but it'll parse a directory full of .eml's using that voting form with some slop.

[02:05] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:13] <rypervenche> [Coke]: $bag1 (+)= $bag2;

[02:13] <rypervenche> Oh, you answered your own question.

[02:17] <timotimo> hythm: WHAT is a little too weird to work with whatevercode

[02:19] <hythm> Thanks timotimo

[02:28] *** aborazmeh left
[02:34] *** peteretep left
[02:35] *** peteretep joined
[02:44] *** zacts joined
[03:00] *** discoD left
[03:06] *** hythm left
[03:16] *** hythm joined
[03:22] *** aborazmeh joined
[03:22] *** aborazmeh left
[03:22] *** aborazmeh joined
[03:26] *** aborazmeh left
[03:26] *** aborazmeh_ joined
[03:26] *** aborazmeh_ left
[03:26] *** aborazmeh_ joined
[03:27] *** aborazmeh_ is now known as aborazmeh

[03:31] *** aborazmeh left
[03:36] *** aborazmeh joined
[03:36] *** aborazmeh left
[03:36] *** aborazmeh joined
[03:58] *** finanalyst_ joined
[04:06] *** BR_ joined
[04:10] *** Black_Ribbon left
[04:10] *** aborazmeh left
[04:20] *** zacts left
[05:02] *** finanalyst_ left
[05:19] *** molaf left
[05:21] *** molaf joined
[05:26] *** bocaneri joined
[05:32] *** molaf left
[05:46] *** aluaces joined
[06:00] *** domidumont joined
[06:01] *** nebuchadnezzar joined
[06:02] *** guifa left
[06:03] *** vrurg_ joined
[06:05] *** jmerelo joined
[06:05] *** vrurg left
[06:12] <Geth> ¬¶ doc: 1e685dc32a | (Daniel Sockwell)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/regexes.pod6

[06:12] <Geth> ¬¶ doc: Add documentation for recursive Regex <~~>

[06:12] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1e685dc32a

[06:12] <linkable6> Link: https://docs.raku.org/language/regexes

[06:15] *** sjn__ is now known as sjn

[06:23] *** ufobat__ joined
[06:36] *** aluaces left
[06:37] *** BR_ left
[06:42] <jmerelo> Last days to fill the Raku survey! https://docs.google.com/forms/d/e/1FAIpQLSdRPBdn1iRN_sT8BMNMOBhVbEY1u8ngZWVwLyM37sqsa4OLwQ/viewform

[07:01] *** Sgeo_ joined
[07:04] *** aluaces joined
[07:04] *** Sgeo left
[07:07] *** Sgeo_ left
[07:09] *** finanalyst_ joined
[07:31] *** zacts joined
[07:33] *** wamba joined
[07:34] *** MasterDuke joined
[07:40] <jmerelo> This is the most visited page in the documentation lately https://docs.raku.org/language/regexes

[07:40] <jmerelo> We should really get it nice and beautiful for newcomers. operators and list are also quite popular, to the tune of several visits a day.

[07:49] *** pecastro joined
[08:00] *** rbt left
[08:00] *** rbt joined
[08:01] *** yuplushi left
[08:09] *** sena_kun joined
[08:41] *** domidumont left
[08:52] *** yuplushi joined
[09:04] *** ctrlleaf joined
[09:04] *** ctrlleaf left
[09:06] *** MasterDuke left
[09:20] *** rindolf joined
[09:25] *** MasterDuke joined
[09:38] *** xinming_ left
[09:40] *** xinming_ joined
[09:58] *** yuplushi left
[10:04] *** aborazmeh joined
[10:04] *** aborazmeh left
[10:04] *** aborazmeh joined
[10:19] <tbrowder> jmerelo: any progress getting the docs built automagically?

[10:20] <jmerelo> tbrowder: short answer: no

[10:20] *** yangzq50 joined
[10:20] <jmerelo> tbrowder: long answer: if we did so, I think we would have to change the development model.

[10:20] <tbrowder> can i help?

[10:22] <jmerelo> tbrowder: of course you can, but I'm afraid the problem is not so much technical but a policy one

[10:23] <jmerelo> tbrowder: right now, there are lots of people that can commit to master. Commits get sent here, and sometimes [Coke] or other people spell-check, or run additional checks on them

[10:23] <jmerelo> tbrowder: in some other cases, there are changes not caught by author tests, that shouldn't really be in the published version.

[10:24] <jmerelo> tbrowder: so what I do is that when I'm sure something *really* works (and I'm free to do it), I publish a new version

[10:25] <tbrowder> ok, sounds like we need an editorial board or enforce pr only or somehing

[10:25] <jmerelo> tbrowder: admittedly, documentation is not infrastructure-critical. But it's still not nice to get something published what shouldn't have

[10:26] <jmerelo> tbrowder: We should probably move to a "release" system, with releases built automatically and uploaded

[10:26] <tbrowder> sounds good

[10:27] <jmerelo> tbrowder: but for the time being, my "manual" update is the closest thing: I check stuff (weekly usually), build and upload it...

[10:28] <jmerelo> tbrowder: the system does not scale, but there are not so many changes in the repo, unfortunately. Building the additional tooling takes time and effort, and at the end of the day it would be overengineering

[10:30] <Geth> ¬¶ doc: c184f16ec1 | (Norbert Buchmueller)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Programs/02-reading-docs.pod6

[10:30] <Geth> ¬¶ doc: update 02-reading-docs.pod6 s/p6doc/rakudoc/g

[10:30] <Geth> ¬¶ doc: 

[10:30] <Geth> ¬¶ doc: According to

[10:30] <Geth> ¬¶ doc: https://github.com/Raku/doc/blob/master/README.md#install-rakudoc the

[10:30] <Geth> ¬¶ doc: `rakudoc` command-line utility for reading POD was moved to separate

[10:30] <Geth> ¬¶ doc: repo and renamed. Unfortunately it's not released as a distro on

[10:30] <Geth> ¬¶ doc: modules.raku.org yet.

[10:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/c184f16ec1

[10:30] <Geth> ¬¶ doc: 4aa787deee | (Norbert Buchmueller)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Programs/02-reading-docs.pod6

[10:30] <Geth> ¬¶ doc: update doc to match rakudoc functionality (more or less)

[10:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/4aa787deee

[10:31] *** aluaces left
[10:56] *** yuplushi joined
[11:01] *** MasterDuke left
[11:12] *** finsternis left
[11:13] *** finsternis joined
[11:16] *** aborazmeh left
[11:28] *** MasterDuke joined
[11:34] *** LearningAboutRak joined
[11:39] <LearningAboutRak> Hi all, if anyone has a spare moment I was hopeing to get some help. Im inexperienced with Perl/Raku but have been programming in other languages for a decent amount of time. It seems like Rakudo is the most active implementation of Raku but I'm mage lost of what the binaries are. raku.exe vs rakudo.exe. There are also -m variants... Is there

[11:39] <LearningAboutRak> anywhere that explains all the differences?

[11:40] <moritz> LearningAboutRak: you can use either binary

[11:40] <moritz> raku and rakudo should be the same

[11:40] <moritz> the -m suffix references the MoarVM backend, which is the default. For example the JVM backend (not built by default) adds a rakudo-j binary

[11:42] <LearningAboutRak> Thank you! i hadn't actually thought to check the hashes, it seems raku and rakudo are in fact the same binary. Oddly rakudo and rakudo-m are different though...

[11:45] <LearningAboutRak> Actually on further inspection with CFF Explorer it looks like its the timestamp causing the difference in hash and they also look identical

[11:45] *** Altai-man joined
[11:47] *** sena_kun left
[11:49] <LearningAboutRak> I'm interested in compiling raku into MoarVM bytecode then running that later. I tried "raku --target=mbc --output=test.moarvm script.raku" which worked but when I try to run that like "moar test.moarvm" I get errors about not being able to find ModuleLoader.moarvm. After looking in the install folders it seems like there is an nqp MoarVm file and

[11:49] <LearningAboutRak> a Perl MoarVM for ModuleLoader.  I'm a little lost at this point

[11:54] *** aluaces joined
[12:00] *** jmerelo left
[12:01] <moritz> that doesn't seem to be well supported. If your main concern is performance, then I recommend putting most of your code into a module. Modules are precompiled by default.

[12:02] <moritz> Then you can have a very short script that uses the module and runs a function

[12:06] *** hythm left
[12:08] <LearningAboutRak> Thanks for your help! Ah okay, is running MoarVM bytecode still a little beta? I dropped the module it wanted in the same folder but ended up with "Unhandled exception: Cannot call method 'load_setting' on a null object

[12:09] <LearningAboutRak> Thanks for the advice, I'll look into creating modules and having a small script that exercises it

[12:12] <MasterDuke> LearningAboutRak: timotimo would likely know the details better, but just running moar against the bytecode likely won't work. you'll need to add some flags referencing the location of the rakudo and/or nqp core settings bytecode

[12:14] <MasterDuke> the blog posts here https://yakshavingcream.blogspot.com/ might also have some relevant info

[12:17] <LearningAboutRak> MasterDuke Thanks for your help! Ill have a look at the blog and various docs to see if I can figure out what it needs :)  

[12:31] <MasterDuke> LearningAboutRak: patrickb would also be a good person to ask (though not online right now)

[12:31] <LearningAboutRak> Thanks! I've jotted the names down so i'll try message them at some point.

[12:32] <MasterDuke> np

[12:56] *** epony left
[12:59] *** yangzq50 left
[13:01] *** Kaeipi left
[13:05] *** Kaiepi joined
[13:08] *** epony joined
[13:08] *** andrzejku joined
[13:24] *** hungrydonkey joined
[13:26] *** domidumont joined
[13:30] <Geth> ¬¶ doc: coke self-assigned xt/check-signatures.t doesn't respect TEST_FILES  https://github.com/Raku/doc/issues/3611

[13:32] *** Geth left
[13:33] *** Geth joined
[13:36] *** finanalyst_ left
[13:40] <Geth> ¬¶ doc: coke self-unassigned xt/check-signatures.t doesn't respect TEST_FILES  https://github.com/Raku/doc/issues/3611

[13:46] *** wamba left
[13:49] *** aluaces left
[13:50] *** wamba joined
[13:56] *** lucasb joined
[13:57] *** finanalyst_ joined
[13:57] *** andrzejku left
[14:16] *** Sgeo joined
[14:54] *** guifa joined
[14:59] *** yangzq50 joined
[15:05] <finanalyst_> I'm trying to implement a Language definition for Raku using the highlight.js library. I have a repo for Raku with the hightlight.js organisation. 

[15:06] *** gnufr33dom joined
[15:07] <finanalyst_> Question is this: does anyone know how the hightlighting for Raku for docs.raku.org work? Samantha did the original work. The grammars are available, and I've read them. What I don't understand is how items identified in the grammars are matched to css class names

[15:08] <finanalyst_> If anyone could help, please email me rnhainsworth at-sign gmail etc

[15:10] <Geth> ¬¶ Raku-Steering-Council/main: c9bc482a0a | Coke++ | 2 files

[15:10] <Geth> ¬¶ Raku-Steering-Council/main: Add tally script

[15:10] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/c9bc482a0a

[15:11] <[Coke]> ^^ feedback welcome on that.

[15:11] *** zacts left
[15:12] <[Coke]> retupmoca++ for Email::MIME

[15:17] <rir_> mendel, lizmat, thank you for the info re: TAI, UTC and Instant.

[15:30] *** yangzq50 left
[15:35] *** molaf joined
[15:39] <Grinnz> jmerelo: in perl we just show the docs that went out with the released version. i suppose the difference here is that raku docs are not tied to the release?

[15:39] <tellable6> Grinnz, I'll pass your message to jmerelo

[15:40] <Grinnz> (and i have a separate section of my doc site that shows blead docs, for development convenience)

[15:40] <Grinnz> but generally best not to expose that immediately to users

[15:46] *** sena_kun joined
[15:47] *** Altai-man left
[15:48] *** squashable6 left
[15:49] <[Coke]> Grinnz: I think a goal is to have a single set of docs that shows multiple versions (both of language spec and where needed, rakudo implementation), but it's ad hoc at the moment.

[15:49] <[Coke]> (rather than different versions of the site based on language spec version)

[15:49] *** squashable6 joined
[15:49] <Grinnz> interesting, my larger point though is that, yes you should not immediately show whatever is committed as docs, there should be some criteria before those changes are "released"

[15:50] <Grinnz> if only by releasing them to a development deployment first

[15:52] <[Coke]> so, there are doc tickets that show changelog items. I think just de facto there is a delay between tracking that item and getting the docs written - but yes, in general, I would imagine in a world where docs could show up in the doc repo as soon as the code is in roast & rakudo, we'd want to stage it in a branch and then merge and generate a version of the docs as part of the release.

[15:52] <[Coke]> ... we're not up-to-date enough for that to be a practical problem atm.

[15:52] <[Coke]> (I think)

[15:54] *** wamba left
[15:54] <Grinnz> certainly has some interesting differences without being integrally part of each release like perl's are

[15:55] <[Coke]> generate not a version, but *the site*.

[15:55] <[Coke]> part of keeping the spec/impl. separate.

[16:06] *** rbt left
[16:07] *** rbt joined
[16:10] *** hungryd52 joined
[16:10] *** hungrydonkey left
[16:12] *** LearningAboutRak left
[16:13] *** LearningRaku joined
[16:24] <cpan-raku> New module released to CPAN! Auth::SCRAM (0.4.8.1) by 03MARTIMM

[16:25] *** zacts joined
[16:26] <rypervenche> Whoa, I just found this: https://www.ozonehouse.com/mark/periodic/

[16:29] *** gnufr33dom left
[16:30] *** aluaces joined
[16:31] *** rir left
[16:31] *** rir_ left
[16:34] *** rir joined
[16:34] *** rir_ joined
[16:36] *** rir_ left
[16:46] *** ufobat_ joined
[16:49] *** ufobat__ left
[16:57] *** aluaces left
[17:02] *** gordonfish left
[17:10] <Geth> ¬¶ doc: b41ba91ec5 | (Daniel Sockwell)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | 29 files

[17:10] <Geth> ¬¶ doc: Fix typos detected by xt/check-signatures.t

[17:10] <Geth> ¬¶ doc: 

[17:10] <Geth> ¬¶ doc: Fixes the errors detected by xt/check-signatures.t.  Most of these

[17:10] <Geth> ¬¶ doc: were simple typos (typically forgetting `:`).  Nearly all others were

[17:10] <Geth> ¬¶ doc: places where Rakudo constrains the invocant but we did not.

[17:10] <Geth> ¬¶ doc: 

[17:10] <Geth> ¬¶ doc: One change was slightly more substantive: we had inadvertently

[17:10] <Geth> ¬¶ doc: documented the `match` method twice in `Cool`, so I merged the two

[17:10] <Geth> ¬¶ doc: definitions.

[17:10] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/b41ba91ec5

[17:10] *** rbt left
[17:11] *** rbt joined
[17:13] *** jmerelo joined
[17:16] *** MasterDuke left
[17:18] *** approaching236 left
[17:20] *** approaching236 joined
[17:26] *** aluaces joined
[17:29] *** rir_ joined
[17:31] *** rir left
[17:34] *** andrzejku joined
[17:35] <jmerelo> Filled the Raku user survey? You can still do it! https://docs.google.com/forms/d/e/1FAIpQLSdRPBdn1iRN_sT8BMNMOBhVbEY1u8ngZWVwLyM37sqsa4OLwQ/viewform

[17:35] <tellable6> 2020-09-03T15:39:10Z #raku <Grinnz> jmerelo: in perl we just show the docs that went out with the released version. i suppose the difference here is that raku docs are not tied to the release?

[17:36] <jmerelo> .tell Grinnz no, they are not, I'm afraid. There's a backlog of release-specific docs, we just cleared the one corresponding to the 6.d release

[17:36] <tellable6> jmerelo, I'll pass your message to Grinnz

[17:41] <[Coke]> for commercial stuff i've worked on, we've made doc updates part of the deliverable, so that if you are trying to get a feature delivered, it can't go in until the docs are also done.

[17:43] <codesections> [Coke]: how would that work with Raku versus Rakudo, though?  Would someone need to document a feature when adding it to Rakudo?  Or when first specifying it in Roast (even if it's NYI and might change before it is implemented?)

[17:44] <jmerelo> [Coke]: that would be really nice, but there's such a backlog that I would find it impossible.

[17:44] <jmerelo> codesections: there's nothing *preventing* them from doing it. Except for lizmat++, that rarely happens (sometimes vrurg too)

[17:45] <codesections> jmerelo: I don't *think* the backlog would be a problem or that the policy [Coke] mentioned would create more work for you/other doccers.  It would create more work for/slow down people working on new features

[17:46] <jmerelo> The main problem is that when Rakudo started being developed, it couldn't really parse documentation. When it *could* it was too slow. If moritz++ hadn't started it, we might be still looking for it.

[17:46] *** approaching236 left
[17:46] <codesections> but aiui, the idea would be for implementers to add docs for new features, which would free up the current doccers to whittle down the backlog 

[17:47] <jmerelo> codesections: the backlog by itself wouldn't be a problem, provided we didn't have 430 issues more. That, on top of other issues, that's a problem.

[17:48] <jmerelo> codesections: yeah... however, I've learned to stop trying to tell other people what to do. Let them do what they want/can, I'll try and do the same...

[17:48] <jmerelo> codesections: implementers might be more efficient implementing, also. Doccers might be more efficient just letting them do that.

[17:48] <codesections> Yeah, fair enough.  I've heard the term 'do-ocracy' used to describe our community more than once, both for good and ill

[17:49] <[Coke]> codesections: my take on raku vs. rakudo there: new features should either be specced with tests and docs before implemented, or they should have tests and docs and be marked as experimental/implementation details

[17:49] <[Coke]> obviously non-commercial products can't re-assign or hire resources to cope with demand.

[17:50] <jmerelo> [Coke]: yeah, that would be *really* nice. Not gonna happen, though. 

[17:50] <codesections> [Coke]: No argument from me.  But I *really* care about docs, and that would represent a significant shift of focus away from features and towards docs.

[17:52] <jmerelo> codesections, [Coke] The current situation has historic roots, but also technical roots. Keeping docs off the Rakudo code base is by design.

[17:53] *** LearningRaku left
[17:53] <[Coke]> (note: implementation details require much less documentation, basically just a warning)

[17:53] <jmerelo> codesections, [Coke] right now the complier is fast enough to keep documentation of classes online; that would be the ideal situation. But changing the status quo is something that must be decided from above.

[17:53] <codesections> jmerelo: yeah, I understand that.  I don't want (and don't think [Coke] is suggesting) moving docs into Rakudo.  

[17:54] <jmerelo> codesections: but that would be the best, if not the only, way to make developers keep at least class and method docs up to date; also, tests could be easily added for undocumented stuff.

[17:55] *** ufobat_ left
[17:55] <jmerelo> codesections: not all the docs, mind you, just the class reference. 

[17:56] <codesections> [Coke]: ¬´changing the status quo is something that must be decided from above¬ª I disagree.  I don't think there is/should be any "above" that could/should set policy like that.  I think the way it would change is if the implementers developed a consensus position that they would each commit to adding docs when they add features

[17:56] <jmerelo> codesections, [Coke] policies could be implemented to keep that part up to date, easy. Even in roast. We wouldn't need to write Defined as: it would be inline.

[17:56] <codesections> i.e., from below, not above

[17:56] <jmerelo> codesections: again, it would be nice if a consensus would be reached on that. Not gonna happen, though.

[17:58] <jmerelo> Moving class reference to class themselves could probably be done (mostly) automatically. It would add a fraction to the compilation of every class. But it would affect all classes (all with definition, that is) so I don't see it happening by consensus.

[17:58] <jmerelo> We might want and try a problem-solving issue, but I would really prefer to have one of the 1K issues in Rakudo solved.

[17:59] <codesections> jmerelo: I agree that having inline docs would make the sort of policy/automation you're describing _easier_ (indeed, I came from Rust, and that's how they do things).  But I don't think it's impossible to do with separate repos.  E.g., there could be a consensus policy not to merge a Rakudo PR unless it links to a PR to raku/doc adding matching docs (or a link showing the docs already exist)  

[17:59] <jmerelo> Going back to releases, a release of documentation is done with every Rakudo Star. That's however, also in the air for the time being.

[18:00] <jmerelo> codesections: I'd love to see that. Even much less than that: a ping to doccers whenever a new feature is added. As you probably know, I parse announcements to gather new features and create the issue.

[18:00] <jmerelo> codesections: documentation is reactive, not proactive. 

[18:01] <jmerelo> codesections:  but to be practical (and a bit cynical on the side) that would put a burden either on the shoulders of implementors, or on the shoulders of doccers, or probably worse, both (if via PRs and reviews).

[18:02] <jmerelo> codesections: after it was started, cruise speed would be reached quickly. But if there's any chance that delays releases, I don't see it happening.

[18:03] <codesections> Yeah.  And, as I said to [Coke], I think the way to change that is by building consensus one contributor at a time.  Right now, I'm not an active Rakudo contributor -- I've had very minor PRs merged (one of which has an error that I'm still trying to fix).  But, as I get more and more comfortable with Rakudo, I plan to contribute more.  And, when doing so, I'll always add docs along with new

[18:03] <codesections> features.

[18:03] <jmerelo> codesections: as I say above: I would be happy, for instance, if an issue is added, with links to the commit, every time a new feature is added. Right now it's much easier to document features (because Change docs include commits), but it's still reactive.

[18:04] <codesections> I know I'm just one person, but I hope I can make a difference, slowly, over time :)

[18:04] <jmerelo> codesections: that would be awesome :-)

[18:05] <jmerelo> codesections: plain truth is, however, that Rakudo as well as the documentation need a lot of more resources.

[18:06] <jmerelo> codesections: when I got the grant to work part time on the documentation I managed to make a good dent on the issue backlog, clearing 300 in two months. 

[18:06] <jmerelo> codesections: so a part-time person might we all we need on this side, permanently or semi-permanently. That would free up time for infrastructure, policy and so on.

[18:07] <jmerelo> codesections: meanwhile, any work like yours on docs (and wherever) is much appreciated. 

[18:07] <jmerelo> codesections: so you *really* make a difference. And [Coke]'s work is invaluable. Backstop to any problem that's there, always on watch. 

[18:08] *** rir_ left
[18:08] <moritz> speaking of docs...

[18:08] <codesections> jmerelo: Well, the sort of work you've done (with, e.g., coordinating the 20-days-of-RFC-posts) is exactly the sort of outreach we need to attract more good 

[18:08] <moritz> is there any topic that needs most help?

[18:09] <moritz> in particular, I think I'm pretty good at explaining concepts (like how regexes work, stuff like that), not so much with API documentation

[18:09] <jmerelo> BTW there's this issue https://github.com/Raku/doc/issues/2690 on the whole release thing. You might want to discuss it there.

[18:10] <jmerelo> moritz: well, I just saw this: https://github.com/Raku/doc/issues/3439 There's another issue linked from that one. It's increasingly necessary.

[18:10] <jmerelo> I'm gonna bump it up

[18:11] <jmerelo> Now we have two top priority issues https://github.com/Raku/doc/labels/%E2%9A%A0%20Top%20Priority%20%E2%9A%A0 Everything else, low priority :-)

[18:12] <jmerelo> codesections: you might want to pledge yourself for the actual advent calendar in December ;-) moritz, you too :-)

[18:12] *** cpan-raku left
[18:12] *** cpan-raku joined
[18:12] *** cpan-raku left
[18:12] *** cpan-raku joined
[18:13] <moritz> I don't think I should get re-involved with the build system of the docs

[18:14] * codesections doesn't know the history there but also doesn't want to pry

[18:15] <moritz> codesections: it all started with a huge pile of hacks on top of other hacks (mostly written by me) to have anything render at all

[18:15] *** Xliff joined
[18:16] <moritz> and when my involvement with the docs reduced, others took over and refactored the build system in ways that don't make too much sense to me

[18:16] <codesections> Ah, I follow

[18:20] <jmerelo> moritz: that's a pretty straightforward versioning and meta-data tutorial for distributions, no building involved.

[18:21] <moritz> jmerelo: and that's the second problem, I don't even understand the issues on the docs repo anymore

[18:21] <jmerelo> moritz: advent calendar it is, then :-)

[18:21] <moritz> I thought this issue was about the docs repo's build system

[18:22] <jmerelo> moritz: https://github.com/Raku/doc/issues/3439 ? Not really. I can add a link to the "original" but in this case I didn't because it might be better to start from scratch.

[18:24] <jmerelo> This one is more straightforward, maybe https://github.com/Raku/doc/issues/3481

[18:29] *** finanalyst_ left
[18:30] *** bocaneri left
[18:31] *** zacts left
[18:44] <jmerelo> Maybe we would want to propose a session for this? https://my.fsf.org/lp-call-for-sessions

[18:46] <Geth> ¬¶ doc: 596b606d59 | (Moritz Lenz)++ | 2 files

[18:46] <Geth> ¬¶ doc: Document Hash type parameterization.

[18:46] <Geth> ¬¶ doc: 

[18:46] <Geth> ¬¶ doc: Closes #3592.

[18:46] <Geth> ¬¶ doc: 

[18:46] <Geth> ¬¶ doc: Also adds a basic usage example early on.

[18:46] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/596b606d59

[18:46] <linkable6> DOC#3592 [closed]: https://github.com/Raku/doc/issues/3592 [RFE][docs] Document Hash key-type parameterization

[18:48] <jmerelo> moritz++

[18:49] <moritz> jmerelo: thanks for the pointers; the whole module/release process isn't really my forte, so I'm looking for other issues to spray my knowledge :D

[18:52] <jmerelo> moritz: thanks

[18:56] *** domidumont left
[18:56] *** domidumont joined
[18:57] *** domidumont left
[18:57] *** domidumont joined
[18:57] *** domidumont left
[18:58] <jmerelo> Checking out raku-mode for emacs now. Pretty cool :-)

[19:00] <codesections> jmerelo: agreed!  I use it every day :)

[19:01] <Geth> ¬¶ doc: 788006f998 | (JJ Merelo)++ | doc/Type/Hash.pod6

[19:01] <Geth> ¬¶ doc: Whitespace and grammar

[19:01] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/788006f998

[19:01] <linkable6> Link: https://docs.raku.org/type/Hash

[19:07] <Geth> ¬¶ doc: 1f07b6251b | (Moritz Lenz)++ | doc/Language/regexes.pod6

[19:07] <Geth> ¬¶ doc: Separate tables for built-in character classes and other rules.

[19:07] <Geth> ¬¶ doc: 

[19:07] <Geth> ¬¶ doc: Closes #3547

[19:07] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1f07b6251b

[19:07] <linkable6> Link: https://docs.raku.org/language/regexes

[19:07] <linkable6> DOC#3547 [closed]: https://github.com/Raku/doc/issues/3547 [docs] Clarify what are (and are not) character classes

[19:15] *** MasterDuke joined
[19:16] <codesections> There's no way to interpolate inside Pod6 blocks, is there?

[19:17] *** Grauwolf left
[19:21] <jmerelo> codesections: not a working one

[19:22] <jmerelo> codesections: if I remember correctly, P<> or somesuch could have been used to include other files. But it's not been implemented. If you meen interpolating code, no such thing. 

[19:22] <Geth> ¬¶ doc: 17836046da | Coke++ | xt/pws/words.pws

[19:22] <Geth> ¬¶ doc: new word

[19:22] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/17836046da

[19:22] <Geth> ¬¶ doc: a7f4f3c1e7 | Coke++ | doc/Language/regexes.pod6

[19:22] <Geth> ¬¶ doc: fix word variant

[19:22] <Geth> ¬¶ doc: 

[19:22] <Geth> ¬¶ doc: table, not code

[19:22] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a7f4f3c1e7

[19:22] <linkable6> Link: https://docs.raku.org/language/regexes

[19:22] <codesections> jmerelo: I just found that the synopsis defines `=alias` blocks, which looks like it's exactly what I'd want -- but it also isn't implemented 

[19:24] <jmerelo> codesections: ah, pre-defined pieces of code... Yes. Pod6 still's got way to go...

[19:25] *** Grauwolf joined
[19:25] <codesections> Wow, there are **so** many cool features in design.raku.org/S26.html that we haven't implemented yet

[19:27] <jmerelo> codesections: you see why I say there are higher priorities than implementors doing documentation?

[19:27] <jmerelo> codesections: not only there, sprintf format options are NYI also

[19:28] <codesections> :D  I do.  But I also think that documenting as we go would/could be faster in the long run for at least some things 

[19:30] <jmerelo> codesections: might be faster for us focused on docs. Definitely feature-to-doc time might be faster. Bulk of the work, however, is not in new features...

[19:32] <jmerelo> ... and Raku extensions have just been merged into coderrank ! https://github.com/codersrank-org/repo_info_extractor/pull/139#event-3726288602

[19:33] <jmerelo> Don't know when it will be deployed, but I hope soon I'll be able to not have the bulk of my GitHub work listed as "other"

[19:35] <codesections> \o/

[19:35] <jmerelo> And I *really* have to get CircleCI fixed. It's annoying.

[19:37] <jmerelo> gonna get AFK now... I had late lunch (daughter's birthday, late siesta... ) so it's later than usual, but got to go. See ya all tomorrow!

[19:37] *** jmerelo left
[19:45] *** Altai-man joined
[19:47] *** sena_kun left
[20:09] *** rbt left
[20:10] *** rbt joined
[20:18] *** silug left
[20:19] <guifa> so‚Ä¶

[20:19] <guifa> lizmat: SUCCESS

[20:19] <guifa> I managed to localize an X::Comp Exception, definitely wasn‚Äôt expecting to be able to do that as easily as I did

[20:20] <guifa> I‚Äôve got compilation errors being reported to me in Spanish now ^_^

[20:20] <guifa> (and doing it entirely from module space!)

[20:21] *** silug joined
[20:27] *** literal_ is now known as literal

[20:29] <[Coke]> guifa++ #nifty

[20:29] *** andrzejku left
[20:30] <guifa> [Coke]: wanna help translate to $anything-other-than-EN-AST-ES-PT ? :-)

[20:33] <rypervenche> guifa: What needs to be translated?

[20:35] <guifa> rypervenche: I‚Äôm still working on figuring out the best structure but, basically all the .messages for the classes here https://github.com/rakudo/rakudo/blob/master/src/core.c/Exception.pm6

[20:36] <guifa> I‚Äôll try to finish up Spanish and start Asturian / Portuguese to get a feel for what works best and how to manage the translations

[20:47] <[Coke]> guifa: any other second language of mine is no better than grade school.

[20:47] <[Coke]> (and my best would have been Spanish. :)

[20:48] <rypervenche> I'll have to pick up some technical words, but I might be able to do zh-TW.

[20:48] <guifa> rypervenche: that would be sweet.  I was really hoping someone could do a non-Latin language

[20:52] <[Coke]> I'm sure we can find someone to do Russian

[21:01] <lizmat> guifa++

[21:15] *** rindolf left
[21:20] <MasterDuke> vrurg_ might be able to to russian

[21:23] *** wamba joined
[21:44] *** Xliff left
[22:05] *** Black_Ribbon joined
[22:11] *** rbt left
[22:11] *** rbt joined
[22:33] *** sftp left
[22:44] *** wamba left
[22:50] *** sftp joined
[22:57] *** leont left
[23:13] *** pecastro left
[23:19] *** hungrydonkey joined
[23:19] *** hungryd52 left
[23:20] *** Altai-man left
[23:21] *** MasterDuke left
[23:24] *** hungrydonkey left
[23:38] <Geth> ¬¶ doc: coke self-assigned Inconsistent xt/aspell results  https://github.com/Raku/doc/issues/3597

[23:38] <Geth> ¬¶ doc: coke assigned to codesections Issue Inconsistent xt/aspell results  https://github.com/Raku/doc/issues/3597

[23:40] *** Kaiepi left
[23:41] <Geth> ¬¶ doc: coke self-unassigned Inconsistent xt/aspell results  https://github.com/Raku/doc/issues/3597

[23:47] *** Kaiepi joined
[23:54] <Geth> ¬¶ doc: coke self-assigned substr doc https://github.com/Raku/doc/issues/3550

