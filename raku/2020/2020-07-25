[00:01] <kawaii> timotimo: works perfect, thank you <3

[00:02] <timotimo> == will always convert its arguments to numeric

[00:02] <timotimo> you will not want to do that to the message content, and also not to the regex :)

[00:09] *** markoong left
[00:15] *** sena_kun joined
[00:16] *** Altai-man_ left
[00:17] *** xinming_ left
[00:18] *** xinming_ joined
[00:48] *** oddp left
[01:13] *** aborazmeh joined
[01:13] *** aborazmeh left
[01:13] *** aborazmeh joined
[01:20] *** telex left
[01:22] *** telex joined
[01:31] *** Kaiepi left
[01:32] *** Kaiepi joined
[01:33] *** guifa left
[01:33] *** dustinm` left
[01:33] *** guifa joined
[01:36] *** dustinm` joined
[01:41] <codesections> I know I can use `&say.file` to introspect on the file that declared a sub.  I could have sworn there was a way to do the same for a Type, but now I can't find it in the docs

[01:41] <codesections> did I just make that up?

[01:42] <Geth> ¦ problem-solving: vrurg assigned to jnthn Issue Allow overriding of compiler-handled operators https://github.com/Raku/problem-solving/issues/214

[01:49] <vrurg> codesections: You certainly made that up. When a new type is created by the metamodel the information about the source file/line is not even passed into the constructor method.

[01:51] <codesections> vrung: Thanks.  And the same goes for a method on a type?  I can use `.file` on a standalone sub but not on a method?

[01:51] <codesections> er, vrurg:,sorry

[01:53] <vrurg> codesections: a method is a Routine, as a sub is too. Both carry this information on them.

[01:54] <vrurg> m: class Foo { method foo { } }; say Foo.^lookup("foo").file

[01:54] <camelia> rakudo-moar 3843a1e89: OUTPUT: «<tmp>␤»

[01:54] <vrurg> codesections: ^^^

[01:54] <cpan-raku> New module released to CPAN! App::AizuOnlineJudge (0.0.5) by 03TITSUKI

[01:55] <codesections> Thanks!

[01:55] <vrurg> codesections: welcome! :)

[01:58] *** raku-bridge4 joined
[02:08] *** e left
[02:08] *** Kaiepi left
[02:08] *** aborazmeh left
[02:08] *** sena_kun left
[02:08] *** dataangel left
[02:08] *** zacts left
[02:08] *** APic left
[02:08] *** molaf left
[02:08] *** cpan-raku left
[02:08] *** robinsmidsrod left
[02:08] *** webstrand left
[02:08] *** Guest91264 left
[02:08] *** marcusr left
[02:08] *** nicholatian left
[02:08] *** gordonfish left
[02:08] *** skyl4rk left
[02:08] *** jmcgnh left
[02:08] *** poga left
[02:08] *** orinthe left
[02:08] *** m0ltar_ left
[02:08] *** Noisytoot left
[02:08] *** kybr left
[02:08] *** vike left
[02:08] *** xinming_ left
[02:08] *** maggotbrain left
[02:08] *** ensamvarg left
[02:08] *** dogbert17 left
[02:08] *** broquaint left
[02:08] *** bdju left
[02:08] *** silug left
[02:08] *** nebuchadnezzar left
[02:08] *** stux|RC left
[02:08] *** krunen left
[02:08] *** sno left
[02:08] *** sivoais_ left
[02:08] *** lizmat left
[02:08] *** Voldenet left
[02:08] *** eseyman left
[02:08] *** lnx left
[02:08] *** mst left
[02:08] *** a3f left
[02:08] *** codesections left
[02:08] *** cooper left
[02:08] *** leah2 left
[02:08] *** SmokeMachine left
[02:08] *** jhill left
[02:08] *** fridim left
[02:08] *** sftp left
[02:08] *** ChoppedBacon left
[02:08] *** mrsolo left
[02:08] *** BinGOs left
[02:08] *** ecocode left
[02:08] *** zostay left
[02:08] *** Roamer`_ left
[02:08] *** simcop2387 left
[02:08] *** xq left
[02:08] *** esh left
[02:08] *** rba left
[02:08] *** El_Che left
[02:08] *** veesh left
[02:08] *** Manifest0 left
[02:08] *** Maylay left
[02:08] *** gabiruh left
[02:08] *** Benett left
[02:08] *** tinita left
[02:08] *** cgfbee left
[02:08] *** xi left
[02:08] *** benaiah left
[02:08] *** timotimo left
[02:08] *** raku-bridge left
[02:08] *** dpk left
[02:08] *** tomaw left
[02:08] *** renormalist left
[02:08] *** Mithaldu left
[02:08] *** nine left
[02:08] *** jdv79 left
[02:08] *** a3r0 left
[02:08] *** m_athias left
[02:08] *** samebchase left
[02:08] *** ambs left
[02:08] *** stux|RC-only left
[02:08] *** releasable6 left
[02:08] *** quotable6 left
[02:08] *** sourceable6 left
[02:08] *** benchable6 left
[02:08] *** coverable6 left
[02:08] *** shareable6 left
[02:08] *** sergot_ left
[02:08] *** dotdotdot left
[02:08] *** tony-o left
[02:08] *** pierrot left
[02:08] *** karupanerura left
[02:08] *** shadowpaste left
[02:08] *** cibs left
[02:08] *** tailgate left
[02:08] *** perryprog left
[02:08] *** tardisx left
[02:08] *** CIAvash left
[02:08] *** Nasrudin left
[02:08] *** dudz left
[02:08] *** xkr47 left
[02:08] *** smash left
[02:08] *** k-man left
[02:08] *** epony left
[02:08] *** Zero_Dogg left
[02:08] *** aindilis left
[02:08] *** gugod left
[02:08] *** HarmtH left
[02:08] *** hvxgr left
[02:08] *** cj left
[02:08] *** elcaro left
[02:08] *** tobs left
[02:08] *** lucs left
[02:08] *** xxpor left
[02:08] *** ribasushi left
[02:08] *** a6502 left
[02:08] *** tadzik left
[02:08] *** protium left
[02:08] *** raku-bridge4 is now known as raku-bridge

[02:10] *** Kaiepi joined
[02:10] *** aborazmeh joined
[02:10] *** sena_kun joined
[02:10] *** dataangel joined
[02:10] *** APic joined
[02:10] *** cpan-raku joined
[02:10] *** robinsmidsrod joined
[02:10] *** webstrand joined
[02:10] *** stux|RC-only joined
[02:10] *** APic left
[02:10] *** APic joined
[02:11] *** BuildTheRobots left
[02:11] *** matiaslina left
[02:11] *** AlexDaniel` left
[02:11] *** unclechu left
[02:12] *** xinming_ joined
[02:12] *** maggotbrain joined
[02:12] *** dogbert17 joined
[02:12] *** ensamvarg joined
[02:12] *** broquaint joined
[02:12] *** bdju joined
[02:12] *** molaf joined
[02:13] *** jdv79 joined
[02:13] *** nine joined
[02:13] *** Mithaldu joined
[02:13] *** renormalist joined
[02:13] *** tomaw joined
[02:13] *** dpk joined
[02:13] *** timotimo joined
[02:13] *** benaiah joined
[02:13] *** xi joined
[02:13] *** cgfbee joined
[02:13] *** tinita joined
[02:13] *** Benett joined
[02:13] *** gabiruh joined
[02:13] *** Maylay joined
[02:13] *** veesh joined
[02:13] *** El_Che joined
[02:13] *** vike joined
[02:13] *** kybr joined
[02:13] *** Noisytoot joined
[02:13] *** m0ltar_ joined
[02:13] *** orinthe joined
[02:13] *** poga joined
[02:13] *** skyl4rk joined
[02:13] *** gordonfish joined
[02:13] *** nicholatian joined
[02:13] *** marcusr joined
[02:13] *** Guest91264 joined
[02:13] *** ManifestO joined
[02:13] *** k-man joined
[02:13] *** epony joined
[02:13] *** Zero_Dogg joined
[02:13] *** aindilis joined
[02:13] *** gugod joined
[02:13] *** HarmtH joined
[02:13] *** hvxgr joined
[02:13] *** cj joined
[02:13] *** elcaro joined
[02:13] *** tobs joined
[02:13] *** perryprog joined
[02:13] *** tailgate joined
[02:13] *** tardisx joined
[02:13] *** protium joined
[02:13] *** tadzik joined
[02:13] *** a6502 joined
[02:13] *** ribasushi joined
[02:13] *** xxpor joined
[02:13] *** lucs joined
[02:14] *** a3r0 joined
[02:14] *** tony-o joined
[02:14] *** m_athias joined
[02:14] *** samebchase joined
[02:14] *** ambs joined
[02:14] *** releasable6 joined
[02:14] *** quotable6 joined
[02:14] *** sourceable6 joined
[02:14] *** benchable6 joined
[02:14] *** coverable6 joined
[02:14] *** shareable6 joined
[02:14] *** sergot_ joined
[02:14] *** dotdotdot joined
[02:14] *** pierrot joined
[02:14] *** karupanerura joined
[02:14] *** shadowpaste joined
[02:14] *** cibs joined
[02:14] *** gordonfish left
[02:14] *** dudz joined
[02:14] *** xkr47 joined
[02:14] *** smash joined
[02:14] *** a3f joined
[02:14] *** codesections joined
[02:14] *** cooper joined
[02:14] *** leah2 joined
[02:14] *** SmokeMachine joined
[02:14] *** fridim joined
[02:14] *** sftp joined
[02:14] *** ChoppedBacon joined
[02:14] *** mrsolo joined
[02:14] *** BinGOs joined
[02:14] *** ecocode joined
[02:14] *** zostay joined
[02:14] *** Roamer`_ joined
[02:14] *** xq joined
[02:14] *** simcop2387 joined
[02:14] *** esh joined
[02:14] *** rba joined
[02:14] *** jhill joined
[02:14] *** silug joined
[02:14] *** nebuchadnezzar joined
[02:14] *** stux|RC joined
[02:14] *** krunen joined
[02:14] *** sno joined
[02:14] *** sivoais_ joined
[02:14] *** lizmat joined
[02:14] *** Voldenet joined
[02:14] *** eseyman joined
[02:14] *** lnx joined
[02:14] *** mst joined
[02:15] *** BuildTheRobots joined
[02:15] *** silug left
[02:15] *** nebuchadnezzar left
[02:15] *** stux|RC left
[02:15] *** krunen left
[02:15] *** sno left
[02:15] *** sivoais_ left
[02:15] *** lizmat left
[02:15] *** Voldenet left
[02:15] *** eseyman left
[02:15] *** lnx left
[02:15] *** mst left
[02:15] *** a3f left
[02:15] *** codesections left
[02:15] *** cooper left
[02:15] *** leah2 left
[02:15] *** SmokeMachine left
[02:15] *** fridim left
[02:15] *** sftp left
[02:15] *** ChoppedBacon left
[02:15] *** mrsolo left
[02:15] *** BinGOs left
[02:15] *** ecocode left
[02:15] *** zostay left
[02:15] *** Roamer`_ left
[02:15] *** simcop2387 left
[02:15] *** xq left
[02:15] *** esh left
[02:15] *** rba left
[02:15] *** dudz left
[02:15] *** xkr47 left
[02:15] *** smash left
[02:15] *** a3r0 left
[02:15] *** m_athias left
[02:15] *** samebchase left
[02:15] *** ambs left
[02:15] *** releasable6 left
[02:15] *** quotable6 left
[02:15] *** sourceable6 left
[02:15] *** benchable6 left
[02:15] *** coverable6 left
[02:15] *** shareable6 left
[02:15] *** sergot_ left
[02:15] *** dotdotdot left
[02:15] *** tony-o left
[02:15] *** pierrot left
[02:15] *** karupanerura left
[02:15] *** shadowpaste left
[02:15] *** cibs left
[02:15] *** El_Che left
[02:15] *** veesh left
[02:15] *** Maylay left
[02:15] *** gabiruh left
[02:15] *** Benett left
[02:15] *** tinita left
[02:15] *** cgfbee left
[02:15] *** xi left
[02:15] *** benaiah left
[02:15] *** timotimo left
[02:15] *** dpk left
[02:15] *** tomaw left
[02:15] *** renormalist left
[02:15] *** Mithaldu left
[02:15] *** nine left
[02:15] *** jdv79 left
[02:15] *** ManifestO left
[02:15] *** Guest91264 left
[02:15] *** marcusr left
[02:15] *** nicholatian left
[02:15] *** skyl4rk left
[02:15] *** poga left
[02:15] *** orinthe left
[02:15] *** m0ltar_ left
[02:15] *** Noisytoot left
[02:15] *** kybr left
[02:15] *** vike left
[02:15] *** tailgate left
[02:15] *** perryprog left
[02:15] *** tardisx left
[02:15] *** k-man left
[02:15] *** epony left
[02:15] *** Zero_Dogg left
[02:15] *** aindilis left
[02:15] *** gugod left
[02:15] *** HarmtH left
[02:15] *** hvxgr left
[02:15] *** cj left
[02:15] *** elcaro left
[02:15] *** tobs left
[02:15] *** lucs left
[02:15] *** xxpor left
[02:15] *** ribasushi left
[02:15] *** a6502 left
[02:15] *** tadzik left
[02:15] *** protium left
[02:15] *** jhill left
[02:15] *** unclechu joined
[02:15] *** dudz joined
[02:15] *** xkr47 joined
[02:15] *** smash joined
[02:15] *** peteretep left
[02:16] *** unclechu left
[02:16] *** unclechu joined
[02:16] *** jhill joined
[02:16] *** sena_kun left
[02:16] *** ManifestO joined
[02:16] *** Guest91264 joined
[02:16] *** marcusr joined
[02:16] *** nicholatian joined
[02:16] *** skyl4rk joined
[02:16] *** poga joined
[02:16] *** orinthe joined
[02:16] *** m0ltar_ joined
[02:16] *** Noisytoot joined
[02:16] *** kybr joined
[02:16] *** vike joined
[02:16] *** rjeli left
[02:16] *** spycrab0 left
[02:16] *** kawaii left
[02:17] *** timeless left
[02:17] *** stux|RC joined
[02:17] *** Grinnz left
[02:17] *** PotatoGim left
[02:18] *** a3r0 joined
[02:18] *** tony-o joined
[02:18] *** m_athias joined
[02:18] *** samebchase joined
[02:18] *** ambs joined
[02:18] *** releasable6 joined
[02:18] *** quotable6 joined
[02:18] *** sourceable6 joined
[02:18] *** benchable6 joined
[02:18] *** coverable6 joined
[02:18] *** shareable6 joined
[02:18] *** sergot_ joined
[02:18] *** dotdotdot joined
[02:18] *** pierrot joined
[02:18] *** karupanerura joined
[02:18] *** shadowpaste joined
[02:18] *** cibs joined
[02:19] *** silug joined
[02:19] *** nebuchadnezzar joined
[02:19] *** krunen joined
[02:19] *** sno joined
[02:19] *** sivoais_ joined
[02:19] *** lizmat joined
[02:19] *** Voldenet joined
[02:19] *** eseyman joined
[02:19] *** lnx joined
[02:19] *** mst joined
[02:19] *** tardisx joined
[02:19] *** tailgate joined
[02:19] *** perryprog joined
[02:19] *** El_Che joined
[02:19] *** veesh joined
[02:19] *** Maylay joined
[02:19] *** gabiruh joined
[02:19] *** Benett joined
[02:19] *** tinita joined
[02:19] *** xi joined
[02:19] *** benaiah joined
[02:19] *** timotimo joined
[02:19] *** dpk joined
[02:19] *** tomaw joined
[02:19] *** renormalist joined
[02:19] *** Mithaldu joined
[02:19] *** nine joined
[02:19] *** jdv79 joined
[02:19] *** cj joined
[02:19] *** Grinnz joined
[02:19] *** a3f joined
[02:19] *** codesections joined
[02:19] *** leah2 joined
[02:19] *** SmokeMachine joined
[02:19] *** fridim joined
[02:19] *** sftp joined
[02:19] *** ChoppedBacon joined
[02:19] *** mrsolo joined
[02:19] *** BinGOs joined
[02:19] *** ecocode joined
[02:19] *** zostay joined
[02:19] *** Roamer`_ joined
[02:19] *** xq joined
[02:19] *** simcop2387 joined
[02:19] *** esh joined
[02:19] *** rba joined
[02:19] *** elcaro joined
[02:19] *** hvxgr joined
[02:19] *** Grinnz left
[02:19] *** Grinnz joined
[02:20] *** Grinnz left
[02:20] *** Grinnz joined
[02:20] *** spycrab0 joined
[02:20] *** spycrab0 left
[02:20] *** spycrab0 joined
[02:20] *** cgfbee joined
[02:20] *** cooper joined
[02:20] *** simcop2387 left
[02:20] *** cooper left
[02:20] *** cooper joined
[02:20] *** cooper left
[02:20] *** cooper joined
[02:20] *** sena_kun joined
[02:20] *** simcop2387 joined
[02:20] *** simcop2387 left
[02:20] *** simcop2387 joined
[02:20] *** peteretep joined
[02:20] *** tobs joined
[02:21] *** k-man joined
[02:21] *** epony joined
[02:21] *** Zero_Dogg joined
[02:21] *** aindilis joined
[02:21] *** gugod joined
[02:21] *** HarmtH joined
[02:21] *** lucs joined
[02:21] *** xxpor joined
[02:21] *** ribasushi joined
[02:21] *** a6502 joined
[02:21] *** tadzik joined
[02:21] *** protium joined
[02:21] *** rjeli joined
[02:21] *** timeless joined
[02:21] *** kawaii joined
[02:22] *** AlexDaniel` joined
[02:22] *** Nasrudin joined
[02:22] *** CIAvash joined
[02:22] *** matiaslina joined
[02:25] *** PotatoGim joined
[02:32] *** adu joined
[02:47] *** e joined
[03:10] *** vike left
[03:20] *** xinming_ left
[03:23] *** xinming_ joined
[03:24] *** aborazmeh left
[03:27] *** jmcgnh joined
[03:32] *** xinming_ left
[03:33] <Geth> ¦ doc: softmoth++ created pull request #3534: Call it "Pod", not "POD" or "Pod6"

[03:33] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3534

[03:34] *** xinming_ joined
[03:36] *** vike joined
[04:00] <cpan-raku> New module released to CPAN! Template::Mustache (1.2.2) by 03SOFTMOTH

[04:08] *** gnufr33dom joined
[04:09] *** NewGreyhawke joined
[04:14] *** Altai-man_ joined
[04:16] *** sena_kun left
[04:21] *** wamba joined
[04:36] *** mistersir joined
[04:39] *** zacts joined
[04:39] *** OpenZen left
[04:50] *** adu left
[04:52] *** zacts left
[04:59] *** andrzejku joined
[04:59] *** xinming_ left
[04:59] *** xinming_ joined
[05:28] *** xinming_ left
[05:30] *** Guest91264 is now known as aluaces

[05:31] *** bocaneri joined
[05:48] *** nebuchadnezzar left
[05:49] *** wamba left
[06:14] *** sena_kun joined
[06:16] *** Altai-man_ left
[06:19] *** cpan-raku left
[06:20] *** cpan-raku joined
[06:20] *** cpan-raku left
[06:20] *** cpan-raku joined
[06:59] *** NewGreyhawke left
[07:09] *** skids left
[07:41] *** rindolf joined
[07:47] *** leont joined
[08:09] *** schlaftier left
[08:12] *** rindolf left
[08:14] *** Altai-man_ joined
[08:16] *** sena_kun left
[08:37] *** molaf left
[08:44] *** dakkar joined
[08:50] *** rindolf joined
[08:51] *** molaf joined
[08:52] *** leont left
[08:52] *** oddp joined
[09:45] *** markoong joined
[09:50] *** markoong left
[09:51] *** markoong joined
[09:56] *** MasterDuke joined
[10:00] *** Sgeo left
[10:06] *** pecastro joined
[10:14] *** sena_kun joined
[10:14] *** grumble is now known as rawr

[10:16] *** Altai-man_ left
[10:44] *** Ven`` joined
[11:02] *** aborazmeh joined
[11:02] *** aborazmeh left
[11:02] *** aborazmeh joined
[11:34] *** pi4 joined
[11:39] *** molaf left
[11:52] *** oja joined
[11:53] *** andrzejku left
[12:01] <timotimo> https://64.media.tumblr.com/1d27d0909e2b21056b56a373ae84b07e/f3207c44d1ae0a7d-58/s1280x1920/000d9b6e8389c27af11bd343b83277faa7aa2189.jpg - cat *.raku

[12:11] *** nebuchadnezzar joined
[12:14] *** dakkar left
[12:14] *** Altai-man_ joined
[12:17] *** sena_kun left
[12:24] *** andrzejku joined
[12:28] *** Tirifto joined
[12:36] *** aborazmeh_ joined
[12:36] *** aborazmeh_ left
[12:36] *** aborazmeh_ joined
[12:38] <lizmat> prettygood  :-)

[12:38] *** aborazmeh left
[12:38] *** aborazmeh_ is now known as aborazmeh

[12:38] *** cpan-raku left
[12:46] *** cpan-raku joined
[12:46] *** cpan-raku left
[12:46] *** cpan-raku joined
[13:02] *** Petr37 joined
[13:20] *** andrzejku left
[13:39] *** Petr37 left
[13:59] *** andrzejku joined
[13:59] *** Tirifto left
[14:05] *** aborazmeh left
[14:06] *** Xliff joined
[14:07] <Xliff> Hi. Are enums fixed after definition, or can the MOP be used to extend them?

[14:07] <timotimo> i could imagine there exists caches somewhere, but otherwise i imagine you could. let's try, shall we

[14:08] <Xliff> Here's what I'm trying to do:

[14:08] <Xliff> https://gist.github.com/Xliff/600d1c8ba52ce33c6c0bcbf43fb24ccc

[14:09] <timotimo> m: enum Blorp <One Two>; say Blorp.keys.raku; Blorp.^add_enum_value("hi", 5); say try Blorp("hi"); say try Blorp(5);

[14:09] <camelia> rakudo-moar 3843a1e89: OUTPUT: «()␤Too many positionals passed; expected 3 arguments but got 4␤  in block <unit> at <tmp> line 1␤␤»

[14:10] <timotimo> ah

[14:10] <timotimo> m: enum Blorp <One Two>; say Blorp.keys.raku; Blorp.^add_enum_value(Pair.new("hi", 5)); say try Blorp("hi"); say try Blorp(5);

[14:10] <camelia> rakudo-moar 3843a1e89: OUTPUT: «()␤(Blorp)␤hi => 5␤»

[14:10] <timotimo> m: enum Blorp <One Two>; say Blorp.keys.raku; Blorp.^add_enum_value(Pair.new("hi", 5)); say try Blorp("hi"); say try Blorp(5); say try Blorp.keys

[14:10] <Xliff> Oooh!

[14:10] <camelia> rakudo-moar 3843a1e89: OUTPUT: «()␤(Blorp)␤hi => 5␤()␤»

[14:10] <timotimo> keys doesn't do what i think, it needs to be Blorp::.keys

[14:10] <timotimo> and that's a package, which will most probably want a separate operation to add the new thing to it

[14:10] <Xliff> enum Blorp <One Two>; say Blorp.keys.raku; Blorp.^add_enum_value(Pair.new("hi", 5)); say try Blorp("hi"); say try Blorp(5); say try Blorp::.keys

[14:10] <evalable6> Xliff, rakudo-moar 3843a1e89: OUTPUT: «()␤(Blorp)␤hi => 5␤(One Two)␤»

[14:11] <timotimo> i imagine that one will refuse changes

[14:11] <timotimo> perhaps even when you grab the underlying storage and nqp:: bind a key or something

[14:11] <Xliff> enum Blorp <One Two>; say Blorp.keys.raku; Blorp.^add_enum_value(Pair.new("hi", 5)); say try Blorp("hi"); say try Blorp(5); say try Blorp::.keys; say One; say hi

[14:11] <Xliff> m: enum Blorp <One Two>; say Blorp.keys.raku; Blorp.^add_enum_value(Pair.new("hi", 5)); say try Blorp("hi"); say try Blorp(5); say try Blorp::.keys; say One; say hi

[14:11] <camelia> rakudo-moar 3843a1e89: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    hi used at line 1␤␤»

[14:12] <Xliff> So maybe a better thing to do would be to add constants that map to the enum.

[14:12] <Xliff> The values I'm trying to add aren't new, so....

[14:12] <Xliff> Best way to add a constant to a compunit?

[14:13] *** lucasb joined
[14:13] *** Tirifto joined
[14:14] *** sena_kun joined
[14:16] *** Altai-man_ left
[14:19] *** vike left
[14:20] <timotimo> "add" a constant "to a compunit"? sounds vaguely like you want a sub EXPORT

[14:24] <Xliff> Hmmm... Yeah.

[14:26] <Xliff> Add an example export on that gist for me? I haven't had much luck adding things to the export table. Its easy when I can pass the whole Hash from EXPORT when I'm creating it wholesale.

[14:26] <Xliff> I mean... would I append values to ::EXPORT::DEFAULT in that case?

[14:38] *** Ven`` left
[14:40] <timotimo> sorry, i haven't had to work with EXPORT in a long time, the only time i really used it was my ADT module but there i only export what i explicitly create

[14:44] *** NewGreyhawke joined
[15:01] *** molaf joined
[15:10] <Xliff> timotimo: OK. Thanks!

[15:36] *** andrzejku left
[15:40] <tbrowder> \o hi folks

[15:41] <tbrowder> question on $*CWD, docs are a little fuzzy to me

[15:41] <tbrowder> use case:

[15:42] <tbrowder> in an interactive raku prog, pass my cwd to an installed modules subroutine. what is the best way to do that?

[15:43] <tbrowder> like this:    "somesub $*CWD"

[15:44] <tbrowder> and in the sub: sub somesub($cwd)"?

[15:44] <tbrowder> or?

[15:47] *** Tirifto left
[15:50] <tbrowder> or is $*CWD defined magically inside the installed module?

[15:51] <tbrowder> defined/accessible...

[15:51] <timotimo> $*CWD is a regular dynamic variable, it'll immediately be available if you've defined your own

[15:51] *** alvapan joined
[15:51] <timotimo> dynamic variables are scoped "by the call stack" so to say

[15:51] *** Tirifto joined
[15:54] <tbrowder> so should i do something like: my $dir = $*CWD; my $res = somesub $dir

[15:54] <timotimo> no

[15:54] <timotimo> my $*CWD = "/foo/bar"; somesub()

[15:55] <tbrowder> but the docs warn about that syntax

[15:55] <timotimo> where?

[15:56] <tbrowder> input/output

[15:56] *** alvapan left
[15:56] <timotimo> https://docs.raku.org/language/io here?

[15:57] <tbrowder> no, the "definitive input/output guide"

[15:57] <timotimo> i didn't know this existed lol

[15:58] <tbrowder> sorry, "input/output, the definitive guide" by Zoffix

[15:58] <timotimo> in that case, use temp $*CWD

[16:02] <tbrowder> so, not knowing my curr dir, it seems like i shoud use "my $cwd = '.'.IO" and pass it to the sub and forget about $*CWD

[16:02] <timotimo> um

[16:03] <timotimo> your current dir is literally in $*CWD

[16:03] <timotimo> if you just want to pass your current dir on to the sub, just do nothing and call the sub, if it will use $*CWD

[16:04] <tbrowder> ok, so the magic of dyn vars carries throughout--awesome!

[16:06] <tbrowder> but, just to be clear, i could do the "$dir = $*CWD; somesub $dir" to satisfy my stubborness?

[16:07] *** Tirifto left
[16:08] *** wamba joined
[16:08] <timotimo> yes, if somesub takes an argument for the path

[16:08] *** Tirifto joined
[16:08] *** Tirifto left
[16:08] <tbrowder> i'm going to be using File::Find inside that sub and want to be clear what's happening from the caller's perspective.

[16:08] *** Tirifto joined
[16:09] <tbrowder> timotimo: thanks!

[16:14] *** Altai-man_ joined
[16:15] <Geth> ¦ doc: usev6++ created pull request #3535: Tweak names of two variables

[16:15] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3535

[16:16] *** sena_kun left
[16:28] *** Kaiepi left
[16:28] *** Kaiepi joined
[16:31] *** Kaiepi left
[16:39] *** melezhik joined
[16:40] <melezhik> now Red has Postgresql tests with Rakudist - http://rakudist.raku.org/sparky/report/debian/542

[16:40] *** JJMerelo joined
[16:45] *** Kaiepi joined
[16:47] <timotimo> pretty nice

[17:03] <melezhik> yeah, thanks

[17:04] <melezhik> basically Fernando asked me to restore test environment for Red/Pg and I did

[17:05] <melezhik> I have a free tier amazon subscription, so I just spin up a small ec2 instance with Postgresql on it, enough for things like testing Red module  

[17:06] <melezhik> here is Red setup - https://github.com/melezhik/RakuDist/blob/master/modules/default-github/files/patches/FCO/Red/sparrowfile

[17:08] *** wamba left
[17:09] <timotimo> ah, the postgres instance is permanent

[17:30] <SmokeMachine> melezhik: \o/

[17:39] *** holyghost joined
[17:43] <Geth> ¦ doc: 9db30691a6 | (Christian Bartolomäus)++ (committed using GitHub Web editor) | doc/Language/contexts.pod6

[17:43] <Geth> ¦ doc: Tweak names of two variables (#3535)

[17:43] <Geth> ¦ doc: 

[17:43] <Geth> ¦ doc: The original names had the potential to cause confusion.

[17:43] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/9db30691a6

[17:43] <linkable6> Link: https://docs.raku.org/language/contexts

[17:43] <linkable6> DOC#3535 [closed]: https://github.com/Raku/doc/pull/3535 Tweak names of two variables

[17:46] *** Tirifto left
[17:52] *** Tirifto joined
[17:53] *** wamba joined
[18:09] *** Tirifto left
[18:10] *** xinming joined
[18:14] *** sena_kun joined
[18:16] *** Altai-man_ left
[18:17] *** Sgeo joined
[18:17] *** Tirifto joined
[18:30] <melezhik> SmokeMachine \o/ yeah, we did it!

[18:32] <melezhik> timotimo yeah, in original version it was created on the same docker container, but I had some problems to run docker with systemd on new virtual server where RakuDist moved

[18:34] *** Tirifto left
[18:34] <melezhik> so, I just decided to spin up a postgres separately on my ec2 instance, will work till my free tier is expired )) 

[18:35] <melezhik> but technically I might return ode day to the scheme all in one ( docker on the same docker ) approach, should not be a big deal

[18:35] <melezhik> ode -> one

[18:35] <codesections> if I call `take` inside a hyper block, will the values I get in my `gather` be in the same order as my input?  Or is `take`ing a side effect (like `say`) and they could be in any order?

[18:35] *** aindilis left
[18:37] *** andrzejku joined
[18:37] *** vike joined
[18:44] *** Tirifto joined
[18:46] *** aindilis joined
[19:05] *** Tirifto left
[19:08] *** Tirifto joined
[19:10] *** leont joined
[19:12] <moritz> take is a side effect

[19:13] *** guifa2 joined
[19:15] <codesections> thanks

[19:17] <timotimo> it's possible that take-ing from multiple threads can be destructive to your data

[19:19] <timotimo> hyper already collects your data for you, however, so perhaps you can Just??? Slip multiple results or Empty results you don't want

[19:19] <guifa2> Has anyone had much success lately with Net::FTP?  Or is there a better ftp client these days?

[19:28] <Xliff> When is sub EXPORT run?

[19:29] <timotimo> when something use-es your module

[19:29] <timotimo> or requires or whatever

[19:29] <Xliff> It doesn't seem to be running when I perl6 -e 'use Module'

[19:29] <Xliff> "sub EXPORT {}" is sufficient, yes?

[19:29] <Voldenet> m: use nqp; $*CWD = "/"; say nqp::cwd()

[19:29] <camelia> rakudo-moar 3843a1e89: OUTPUT: «/home/camelia␤»

[19:29] <Voldenet> as expected

[19:29] <codesections> These causes an infinite loop when I wouldn't expect it to: given 10 { when $_ < 0 { 'done' }; &?BLOCK($_ - 1) for ^2 }

[19:30] <codesections> is the postfix `for` implicitly creating a block?

[19:31] <Xliff> codesections: create a closure for the &?BLOCK call?

[19:31] <Xliff> Or user OUTER::

[19:31] <lizmat> Xliff: the EXPORT should be in the compunit, but *not* in the package scope

[19:31] <lizmat> unit class Foo; sub EXPORT { }   # wrong

[19:32] <lizmat> class Foo { }  sub EXPORT { }   # right

[19:35] <codesections> Xliff: I don't understand.  The `given` block should be a closure for the &?BLOCK call, right?  I mean, this works 

[19:35] <codesections> m: given 10 { .say;  when $_ < 0 { 'done' }; &?BLOCK($_ - 1)}

[19:35] <camelia> rakudo-moar 3843a1e89: OUTPUT: «10␤9␤8␤7␤6␤5␤4␤3␤2␤1␤0␤-1␤»

[19:42] <guifa2> codesections: what would stop the loop?

[19:42] <codesections> I'm also not quite following the advice to use `OUTER::` and don't see anything about `OUTER::` in the docs

[19:42] <codesections> guifa2: the when statement?

[19:42] <Xliff> given 10 { when $_ < 0 { 'done' }; sub b($n) { &?OUTER::BLOCK($n) } b($_ - 1) for ^2 }

[19:43] <Xliff> m" given 10 { when $_ < 0 { 'done' }; sub b($n) { &?OUTER::BLOCK($n) } b($_ - 1) for ^2 }

[19:43] <Xliff> m: given 10 { when $_ < 0 { 'done' }; sub b($n) { &?OUTER::BLOCK($n) } b($_ - 1) for ^2 }

[19:43] <camelia> rakudo-moar 3843a1e89: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3one' }; sub b($n) { &?OUTER::BLOCK($n) }7⏏5 b($_ - 1) for ^2 }␤    expecting any of:␤        infix␤        infi…»

[19:43] <Xliff> m: given 10 { when $_ < 0 { 'done' }; sub b($n) { &?OUTER::BLOCK($n) }; b($_ - 1) for ^2 }

[19:43] <guifa2> the &?BLOCK isn't being conditionally called

[19:43] <guifa2> perhaps you wanted to throw it in a "default"?

[19:43] <camelia> rakudo-moar 3843a1e89: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 131072 bytes␤»

[19:44] <Xliff> codesections: Was acting on the thought that the for was creating an implicit block, as you suggested.

[19:44] <Xliff> Looks the same, though.

[19:44] <codesections> It's being conditionally *not* called, right?  If the `when` statement is true, control flow exits the `given` block, right?

[19:44] <Xliff> lizmat++ # Thanks!

[19:45] <lizmat> yeah, been there done that :-)

[19:45] <codesections> xliff: oh, I see what you meant by OUTER

[19:45] <guifa2> no

[19:45] <guifa2> "when" juts means "run the code in this block if true"

[19:45] <Xliff> Is the best way to access a symbol in EXPORT::DEFAULT -- "EXPORT::DEFAULT::{$sym}" ?

[19:48] <guifa2> m: given 10 { my &b = &?BLOCK; when * < 0 { say "done" }; default { b($_ - 1) } }

[19:48] <camelia> rakudo-moar 3843a1e89: OUTPUT: «done␤»

[19:49] <Xliff> Oh. HAH! guifa++

[19:49] <guifa2> of course, you can't use &?BLOCK in the default block (I mean, you CAN, but it's referring to a different one)

[19:50] <melezhik> I've added 2020.07 version to RakuDist, in case someone want to test against the latest version

[19:50] <codesections> m: given 10 { my &b = &?BLOCK; when * < 0 { say "done" }; b($_ - 1 }

[19:50] <camelia> rakudo-moar 3843a1e89: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3CK; when * < 0 { say "done" }; b($_ - 1 7⏏5}␤»

[19:50] <codesections> m: given 10 { my &b = &?BLOCK; when * < 0 { say "done" }; b($_ - 1) }

[19:50] <camelia> rakudo-moar 3843a1e89: OUTPUT: «done␤»

[19:50] <codesections> `default` wasn't doing any of the work there

[19:50] *** melezhik left
[19:51] <codesections> From the docs: >  But there is a difference in how following code in the same, outer block is handled: When the when block is executed, control is passed to the enclosing block and following statements are ignored; but when the if block is executed, following statements are executed.

[19:52] <guifa2> hmmm

[19:53] <Xliff> 10 -> default -> 9 -> default -> 8 -> default ... 0 -> done

[19:54] <Xliff> Without the default it still works, it's just.... if there are more when blocks after the call to b() then you may run into a sleeping dragon.

[19:54] <Xliff> ^^ codesections

[19:54] <codesections> assigning `my &b = &?BLOCK` works, though, thanks!  It's a bit inelegant (since the idea of &?BLOCK is to have implicit recursion *without* naming to block) and reminds me a bit of the `that = this` from JavaScript…

[19:55] <Xliff> codesections: You DO have implicit recursion, just be careful of implicit blocks! :)

[20:00] <guifa2> eventually (though NYI) I believe we're supposed to be able to label all blocks rather than just loops

[20:00] <guifa2> which should help with that

[20:02] <codesections> Wait… I think (though I haven't figured out the details) that the problem *isn't* an implicit block – it's that postfix `for` is setting the topic!

[20:04] <guifa2> oh right, because you're doing < 0 so it's calling it on the block for values of 0 and 1 each time

[20:04] <guifa2> one of which terminates the other goes on forever

[20:04] <codesections> (both of which go on forever, but yeah)

[20:05] *** wamba left
[20:06] <guifa2> err calling it with -1 and 0, because 0 - 1 and 1-1.  

[20:06] * guifa2 needs his caffeine 

[20:07] <codesections> wait, wat 

[20:07] <codesections> m: given 4 { .say; my $topic = $_; my &b = &?BLOCK; when $_ < 0 { 'done'}; b($topic - 1) for ^2}; say 'done';

[20:07] <camelia> rakudo-moar 3843a1e89: OUTPUT: «4␤3␤2␤1␤0␤-1␤-1␤0␤-1␤-1␤1␤0␤-1␤-1␤0␤-1␤-1␤2␤1␤0␤-1␤-1␤0␤-1␤-1␤1␤0␤-1␤-1␤0␤-1␤-1␤3␤2␤1␤0␤-1␤-1␤0␤-1␤-1␤1␤0␤-1␤-1␤0␤-1␤-1␤2␤1␤0␤-1␤-1␤0␤-1␤-1…»

[20:07] <codesections> m: given 3 { .say; my $topic = $_; my &b = &?BLOCK; when $_ < 0 { 'done'}; b($topic - 1) for ^2}; say 'done';

[20:07] <camelia> rakudo-moar 3843a1e89: OUTPUT: «3␤2␤1␤0␤-1␤-1␤0␤-1␤-1␤1␤0␤-1␤-1␤0␤-1␤-1␤2␤1␤0␤-1␤-1␤0␤-1␤-1␤1␤0␤-1␤-1␤0␤-1␤-1␤done␤»

[20:08] <guifa2> for ^2 is the same as for (0, 1)

[20:09] <codesections> (Oops, yeah, I forgot it there was a `- 1` even the first time.  So I was thinking it was 0 and 1, not -1 and 0.  My bad; you're right that only one is ∞)

[20:12] <thundergnat> guifa2:  FWIW Net::FTP works ok for the most part, it just won't pass it's tests because the test FTP server is offline. It works for me if I --force install it.

[20:12] <guifa2> thundergnat: yeah I noticed that, but after installing I can't get it to connect to the IANA ftp server

[20:13] *** mistersir left
[20:14] *** Altai-man_ joined
[20:14] *** JJMerelo left
[20:16] *** sena_kun left
[20:16] *** Altai-man_ left
[20:17] *** sena_kun joined
[20:19] <thundergnat> guifa2: Sorry, I stand corrected. It worked the last time I tried it but seems to have bit-rotted since then. No longer works for me either. 

[20:19] <guifa2> thundergnat: at least it's not just me then

[20:36] <Xliff> which is executed first? BEGIN or EXPORT?

[20:36] <guifa2> Begin should be

[20:37] <timotimo> yeah, EXPORT can only be run after it got parsed, after all

[20:37] <guifa2> export is called at runtime, but begin is called at compile time

[20:38] <timotimo> i'd say export is called at parse-time of the user of your module

[20:39] <Xliff> Hmmm... might have a chicken and egg problem.

[20:39] <Xliff> I need the export table at BEGIN time.

[20:39] <timotimo> at whose begin time?

[20:40] <Xliff> HAH!

[20:40] <Xliff> I have to have BEGIN defined after 'unit'

[20:40] <Xliff> Then sub EXPORT {} will pick it up, properly.

[20:40] <Xliff> \o/

[20:40] <Xliff> One sec and then I can commit this.

[20:51] <Xliff> https://github.com/Xliff/p6-OpenVR/blob/master/lib/OpenVR/Raw/Enums.pm6

[20:52] *** Black_Ribbon joined
[20:52] <guifa2> Xliff: hmmm

[20:56] <guifa2> So not fully grocking the BEGIN code, I'd say I'd move the sub export all the way down, and not attach the "is export" to everything, and manually make your map.  But that's very off the cuff and I'd need to look at it a bit more in depth

[20:56] *** rindolf left
[21:02] <Xliff> guifa: Um. No. Tried that.

[21:02] <Xliff> sub EXPORT must be out of module def, so it has to be ABOVE "unit package"

[21:04] <Xliff> BEGIN needs to be after the unit def otherwise EXPORT::DEFAULT is unpopulated.

[21:04] <Xliff> The rest of the code is just there to add alternative constants to the enum due to weirdness in the C code I'm writing a binding for.

[21:06] *** NewGreyhawke left
[21:07] *** xinming left
[21:07] *** leont left
[21:08] *** xinming joined
[21:28] *** Chidaruma666Onym joined
[21:38] *** markoong left
[21:38] *** markoong joined
[21:50] *** Tirifto left
[21:55] *** Chidaruma666Onym left
[21:57] <codesections> I'm still pretty confused by how `&?BLOCK` works (esp. with `OUTER` and/or `for` loops).  So I wrote up a StackOverflow question https://stackoverflow.com/questions/63093953/understanding-rakus-block-compile-time-variable

[21:58] *** andrzejku left
[22:01] *** markong joined
[22:01] <guifa2> codesections: it looks like it may be a bug.  Even using OUTER::OUTER::BLOCK I get the same 

[22:05] <codesections> Yeah. And I didn

[22:05] *** markoong left
[22:06] <codesections> *didn't mention it in the question, but I tried other options (DYNAMIC, CALLER, etc) and always got the inner block's ID

[22:06] <guifa2> Although that said, I don't know if it has that information available.  Things are designed to be single pass

[22:07] <guifa2> And an inner block while be constructed before the outer 

[22:07] <codesections> That's why I didn't open an issue yet – I don't know if it's a bug, or just an inherent limitation 

[22:13] *** Altai-man_ joined
[22:14] *** reach_satori left
[22:14] *** reach_satori joined
[22:16] *** sena_kun left
[22:20] *** markong left
[22:21] *** MilkmanDan left
[22:28] *** xelxebar left
[22:29] *** xelxebar joined
[22:33] *** NewGreyhawke joined
[22:49] <Xliff> OK. My latest foray into sub EXPORT has met with unexpected failure after passing the first test case.

[22:52] *** MilkmanDan joined
[22:52] <Xliff> And now... after reordering... it works again. Weird.

[22:55] *** oja left
[23:09] *** oddp left
[23:16] <Xliff> Does raku do uint64 literals?

[23:21] *** Zero_Dogg left
[23:21] *** Zero_Dogg joined
[23:25] <codesections> m: my uint64 $a = 14;

[23:25] <camelia> rakudo-moar 3843a1e89: ( no output )

[23:26] <codesections> Xliff: Like that? ^^^^ or do you mean something else?

[23:30] <Xliff> codesections: Not quite. I was wondering if there was a literal, like there is in C: 1L would create a 64-bit integer with the value of 1.

[23:31] *** skids joined
[23:31] <Xliff> I really didn't think so. Raku doesn't need 'em.

[23:33] <codesections> Oh, I'm with you now.  I don't think Raku does (it's certainly not listed in the docs: according to them, we have Number, Int, Rat, Num, and Complex literals (for numeric types) but nothing about the size)

[23:33] <codesections> https://docs.raku.org/language/syntax#Int_literals

[23:37] *** skids left
[23:47] *** MasterDuke left
