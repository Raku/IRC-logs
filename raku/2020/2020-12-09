[00:05] <ab5tract> anyone else here using Raku on Windows? I'm surprised to be experiencing garbled text a la "Welcome to ≡¥Éæ≡¥ÉÜ≡¥Éñ≡¥É«≡¥É¥≡¥É¿Γäó v2020.10."

[00:05] *** pecastro left
[00:08] <tbrowder> is there any built-in method i'm missing?

[00:10] <guifa> tbrowder: I don’t think there is a better built in method

[00:20] *** mowcat left
[00:24] *** jmchael left
[00:28] *** epony left
[00:34] *** jmchael joined
[00:38] *** epony joined
[00:40] <guifa2> ab5tract: that's because the Windows terminal doesnt support higher plane Unicode I think

[00:40] <timotimo> you need to use "chcp" with some special value to get unicode in the terminal

[00:41] <ab5tract> timotimo, guifa2 -- geez, that's unfortunate...

[00:42] <guifa2> ab5tract: it's a thing to help with trademarky stuff rigth now.  It might not be permanent

[00:42] <leont> «chcp 65001» may help

[00:43] <ab5tract> leont: that does seem to help!

[00:43] <ab5tract> at least with the TM ...

[00:44] <ab5tract> and also with the output from regex matches.. thanks for the tip!

[00:50] <ab5tract> huh... doesn't help in Powershell ISE but does help in the Terminus term emulator that I usually use..

[00:51] <ab5tract> pretty crazy to see Unicode issues in 2020, but whatevs, it's "solved" :)

[00:53] *** Henry151 left
[00:56] *** Henry151 joined
[01:11] *** BenGoldberg joined
[01:18] *** asymptotically left
[01:21] *** jmchael left
[01:41] *** guifa left
[02:17] *** maggotbrain joined
[02:21] *** holli__ left
[02:27] *** eseyman left
[02:29] *** eseyman joined
[02:31] *** MasterDuke left
[03:29] *** maggotbrain left
[03:38] *** ensamvarg195 left
[03:57] *** maggotbrain joined
[03:59] *** leont left
[04:00] *** ab5tract left
[04:01] *** sivoais joined
[04:04] *** ab5tract joined
[04:08] *** _jrjsmrtn joined
[04:09] *** __jrjsmrtn__ left
[04:13] *** ab5tract left
[05:05] *** roguelazer left
[05:08] *** roguelazer joined
[05:23] *** BenGoldberg left
[05:27] *** ChoppedBacon left
[05:28] *** ChoppedBacon joined
[05:29] *** cpan-raku left
[05:30] *** cpan-raku joined
[05:30] *** cpan-raku left
[05:30] *** cpan-raku joined
[06:02] *** maggotbrain left
[06:07] *** aluaces joined
[06:08] *** jmerelo joined
[06:17] *** aborazmeh joined
[06:17] *** aborazmeh left
[06:17] *** aborazmeh joined
[06:21] *** ufobat_ joined
[06:26] *** parabolize left
[06:32] *** moon-child joined
[06:34] *** frost-lab joined
[07:08] *** skids left
[07:11] <coldpress> is there a shorter way to extract the first elements of each list, in a list of lists?

[07:11] <coldpress> m: map *[0], (0..3).combinations(2)

[07:11] <camelia> rakudo-moar 2274aa85a: ( no output )

[07:11] <coldpress> m: say do map *[0], (0..3).combinations(2)

[07:11] <camelia> rakudo-moar 2274aa85a: OUTPUT: «(0 0 0 1 1 2)␤»

[07:14] <moon-child> coldpress: not shorter, but I would probably say

[07:14] <moon-child> m: print (0..3).combinations(2).map(*.head)

[07:14] <camelia> rakudo-moar 2274aa85a: OUTPUT: «0 0 0 1 1 2»

[07:15] *** aborazmeh left
[07:17] <coldpress> moon-child: that's fine, but I'm looking to extract other indexes as well, like:

[07:18] <coldpress> m: say do map *[2], (0..5).combinations(3)

[07:18] <camelia> rakudo-moar 2274aa85a: OUTPUT: «(2 3 4 5 3 4 5 4 5 5 3 4 5 4 5 5 4 5 5 5)␤»

[07:20] <moon-child> I don't entirely follow.  map *[0 .. k], @a  will give you the first k elements of each list contained in @a, but I don't think that's what you're looking for

[07:21] <moon-child> (or perhaps  flat map *[0 .. k], @a)

[07:40] *** domidumont joined
[07:59] *** stoned75 joined
[08:07] *** pecastro joined
[08:11] *** holli__ joined
[08:14] *** BenGoldberg joined
[08:15] *** sena_kun joined
[08:22] *** Sgeo left
[08:24] *** sjm_uk joined
[08:38] *** abraxxa joined
[08:43] *** abraxxa left
[08:43] *** abraxxa joined
[08:44] *** dakkar joined
[08:47] <guifa2> coldpress: @foo[*;0]

[08:47] *** BenGoldberg left
[08:47] <guifa2> m: my @a = 1,2,3; my @b = 10,20,30; my @c = 100,200,300; my @d = @a, @b, @c;  say @d[*;0]

[08:47] <camelia> rakudo-moar 2274aa85a: OUTPUT: «(1 10 100)␤»

[08:49] <guifa2> Or for your example:

[08:49] <guifa2> m: say (0..3).combinations(2)[*;0]

[08:49] <camelia> rakudo-moar 2274aa85a: OUTPUT: «(0 0 0 1 1 2)␤»

[08:49] <guifa2> You can also use >> inside of your method call, that will distribute the subsequent call to each item in the former (functionally it's very similar to map, but there are some differences)

[08:50] <guifa2> m: say (0..3).combinations(2)>>[0]

[08:50] <camelia> rakudo-moar 2274aa85a: OUTPUT: «(0 0 0 1 1 2)␤»

[09:07] *** Altai-man joined
[09:09] *** wamba joined
[09:10] *** sena_kun left
[09:34] *** v_m_v left
[09:34] *** v_m_v joined
[09:35] *** aluaces left
[09:36] *** aluaces joined
[09:44] *** aluaces left
[09:56] *** aluaces joined
[09:59] <holyghost> guifa2 : that's nice

[10:01] *** wamba left
[10:06] <JJAtria[m]> Are there any recent-ish examples out there of using NativeCall with C++ classes, etc?

[10:06] <JJAtria[m]> Found this from 2016, but I'm not sure if things have changed significantly since then: https://hoelz.ro/blog/binding-to-cpp-with-nativecall

[10:07] <JJAtria[m]> And this section is a bit scant: https://docs.raku.org/language/nativecall#C++_support

[10:11] *** rindolf joined
[10:14] *** holli__ left
[10:29] *** asymptotically joined
[10:50] *** redhands_001 joined
[10:51] *** redhands left
[10:54] *** aborazmeh joined
[10:54] *** aborazmeh left
[10:54] *** aborazmeh joined
[10:56] *** guifa2 left
[11:29] *** ufobat_ left
[11:39] *** BenGoldberg joined
[11:42] <notandinus> oof raku is driving me mad

[11:43] <notandinus> m: my @set = 1, 2, 3; my @tmp = 0 .. @set.elems - 1; @tmp = @tmp.reverse; while shift @tmp -> $idx_1 { for @tmp -> $idx_2 { say "$idx_1 $idx_2" } }

[11:43] <camelia> rakudo-moar 2274aa85a: OUTPUT: «2 1␤2 0␤1 0␤»

[11:43] <notandinus> m: my @set = 1, 2, 3; my @tmp = 0 .. @set.elems - 1;  while shift @tmp -> $idx_1 { for @tmp -> $idx_2 { say "$idx_1 $idx_2" } }

[11:43] <camelia> rakudo-moar 2274aa85a: ( no output )

[11:43] <notandinus> why does the first one work and second one doesnt?

[11:43] *** Black_Ribbon left
[11:44] <notandinus> https://paste.debian.net/hidden/c23f3a36/ - here is prettier version

[11:44] <notandinus> if you remove line 4 it doesn;t work

[11:44] <notandinus> is this a bug?

[11:47] <lizmat> the first shift of @tmp yields a 0 if @tmp is not reversed.  This is false, so the outer loop will never fire

[11:47] <lizmat> so ENOTACOREBUG  :-)

[11:48] <notandinus> oh

[11:48] <lizmat> notandinus ^^

[11:48] <notandinus> oof i've been using it everywhere

[11:48] <notandinus> what's the correct way of doigng this ?

[11:50] <lizmat> define "this"  :)

[11:51] <notandinus> i want to loop over @tmp while pop'ng it

[11:51] *** morayj joined
[11:51] <lizmat> while @tmp { my $popped = @tmp.pop }

[11:53] <notandinus> i see, can i ask `while' to not focus on pop'ed value & work with if `shift` was successful?

[11:54] <lizmat> in this case, the while just looks at whether @tmp has any elements in it

[11:54] <lizmat> so I'm not sure how shift or pop comes into that

[11:54] <lizmat> or what you're trying to achieve

[11:54] <notandinus> i see, yeah your code will fix it

[11:55] <notandinus> what would be the  direct translation of this perl code:

[11:55] <notandinus> while (my $pop = pop @tmp) { } 

[11:56] <lizmat> for @tmp.reverse -> $pop {

[11:56] *** wamba joined
[11:56] <lizmat> well, that wouldn't destroy your @tmp

[11:56] <lizmat> otherwise:

[11:57] <lizmat> if you know there are only true values in @tmp (which in your case, there weren't)

[11:57] <lizmat> you could do:

[11:58] <lizmat> while @tmp && @tmp.pop -> $pop {

[12:00] <notandinus> i see,

[12:00] <notandinus> actually that while @tmp { my $popped = @tmp.pop }  doesnt fix it

[12:01] <notandinus> what i want to do is, combinations (nested for) but my operation is addition so a + b == b + a, that is why i want to eliminate the value as i go on

[12:02] <notandinus> that code does this: https://paste.debian.net/hidden/0f878f78/

[12:03] <notandinus> ok wait, ah sorry, i should use $popped as $idx_1

[12:05] <notandinus> thanks, that fixes it

[12:07] *** jmchael joined
[12:09] <lizmat> m: dd (^10).combinations(2).unique: :as(&sum)   # something like this ?

[12:09] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)).Seq␤»

[12:13] *** BenGoldberg left
[12:14] <notandinus> lizmat: yeah that's what i wanted, i should've read about combinations, i didn't know of unique method

[12:15] <notandinus> i'll read the docs,t hanks

[12:15] <lizmat> yw  :-)

[12:19] *** leont joined
[12:19] <notandinus> lizmat: i think .unique is not required

[12:19] <notandinus> m: say (^3).combinations(2).unique

[12:19] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((0 1) (0 2) (1 2))␤»

[12:19] <notandinus> m: say (^3).combinations(2)

[12:19] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((0 1) (0 2) (1 2))␤»

[12:20] <notandinus> looks like combinations does it by default

[12:20] <lizmat> yeah, but you wanted uniqueness on the sum of the values ?

[12:21] <lizmat> m: say (^4).combinations(2)   # note that both (0 3) and (1 2) will produce 3 as sum ?

[12:21] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((0 1) (0 2) (0 3) (1 2) (1 3) (2 3))␤»

[12:22] *** dmc00 left
[12:22] <notandinus> ah, sorry for misunderstanding, i wanted what combinations does by default

[12:22] <lizmat> ok, then you're good with just combinations :-)

[12:22] <notandinus> what i meant was both (0 1) and (1 0) will produce same sum

[12:22] <notandinus> i mean the index, 

[12:22] <lizmat> ok

[12:23] <notandinus> also, shouldn't this default behaviour of combinations be a bug?

[12:23] *** aborazmeh left
[12:23] *** dmc00 joined
[12:23] <notandinus> because 

[12:24] <notandinus> m: say (^3).combinations(2).unique

[12:24] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((0 1) (0 2) (1 2))␤»

[12:24] <notandinus> should include (2 2) right ?

[12:24] <notandinus> and also (1 0) (2 0)

[12:25] <notandinus> is it expected behaviour?

[12:26] <lizmat> m: say <a b c>.combinations(2)   # maybe not using numbers makes it easier

[12:26] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((a b) (a c) (b c))␤»

[12:26] <lizmat> you're *combining*

[12:27] <lizmat> (a a) cannot happen, because "a" only occurs once

[12:27] <lizmat> m: say <a a b c>.combinations(2)

[12:27] <camelia> rakudo-moar 2274aa85a: OUTPUT: «((a a) (a b) (a c) (a b) (a c) (b c))␤»

[12:27] <lizmat> note that now you have two "(a b)" and "(a c)" because there are two "a"\s

[12:33] <notandinus> oh right

[12:33] <notandinus> what i was thinking of is permutations right?

[12:33] <notandinus> oof i'm already starting to forget these things

[12:34] <lizmat> well, maybe *I* led you astray here

[12:35] <notandinus> no, i had this discussion before too with someone else

[12:35] <notandinus> i didn't understand what they were saying so i gave up, it was right here in #raku 

[12:36] <notandinus> thanks for fixing this

[12:36] <lizmat> ok, well, I don't really backlog here anymore.. there's just too much to backlog  :-)

[12:37] <notandinus> hah yeah, its quite idle when i'm online though

[12:37] <notandinus> might be active when i'm sleeping

[12:41] *** v_m_v left
[13:08] *** sena_kun joined
[13:10] *** Altai-man left
[13:12] *** ggoebel_ left
[13:14] *** ggoebel joined
[13:15] *** frost-lab left
[13:31] *** morayj left
[13:38] *** ab5tract joined
[13:51] *** holli__ joined
[14:02] *** morayj joined
[14:04] <tbrowder> jmerelo (or anyone): when running Pod::To:HTML how can i eliminate the toc

[14:04] *** cpan-raku left
[14:08] <tbrowder> i like everything else but i don't see how to automagically eliminate it.

[14:11] *** MasterDuke joined
[14:12] <MasterDuke> coldpress: thanks, made those edits

[14:14] <leont> What is generally considered a reasonable backwards compatibility policy in Raku.

[14:14] <leont> I have the impression people in Raku tend to run relatively recent versions, but I'm not sure (especialyl not wrt distro packaged versions)

[14:18] <vrurg> leont: we don't break it except for some bugs. Roast and ecosystem testing ensures that no major breaks happen.

[14:19] <leont> I should be more specific: how backwards compatible should I be in my *modules*

[14:19] *** cpan-raku joined
[14:19] *** cpan-raku left
[14:19] *** cpan-raku joined
[14:22] <vrurg> This is harder to say. I'd say that best if you make them work with distros packages. But how much do they lag behind – I don't know. A year old rakudo release looks reasonable to me.

[14:25] <leont> .rakumod is an obvious case of "only supported for about a year", but I also have some code for working with older version of raku in one of my modules

[14:28] *** ggoebel left
[14:28] *** domidumont left
[14:34] *** wamba left
[14:35] *** morayj left
[14:37] *** morayj joined
[14:38] *** domidumont joined
[14:38] *** domidumont left
[14:38] *** wamba joined
[14:39] <coldpress> guifa2: nice, thanks for the two ways of distributing calls over arrays

[14:39] <tellable6> coldpress, I'll pass your message to guifa2

[14:40] <vrurg> leont: to my view, if somebody is happy with really old version of compiler they could be ok with older versions of modules.

[14:42] *** Sgeo joined
[14:43] <leont> Apparently the version shipped with ubuntu LTS has .rakumod support, that does make things a bit easier

[14:48] *** domidumont joined
[15:04] *** BenGoldberg joined
[15:07] *** parabolize joined
[15:45] *** RaycatWhoDat joined
[15:50] <RaycatWhoDat> Quick question: what's the state of game development in Raku? Is it still "make-bindings-to-SDL2-and-roll-everything-yourself"?

[15:51] <jmerelo> RaycatWhoDat: kinda, yes. There's SDL" and SDL::raw.

[15:53] <RaycatWhoDat> Is it a similar story for GUI development?

[16:16] <dakkar> GUI is a bit better https://modules.raku.org/search/?q=gnome

[16:16] <dakkar> you can use nearly all of GTK3

[16:16] <dakkar> (disclaimer: I haven't tried, yet)

[16:18] *** BenGoldberg left
[16:21] <codesections> does anyone happen to know the implementation details of Raku Arrays enough to say whether there's a performance reason to use them as a queue via `unshift` and `pop` versus `push` and `shift`?

[16:22] <dakkar> run a benchmark and see what happens?

[16:22] <codesections> (that is, whether the direction matters)

[16:22] <codesections> dakkar: fair :D

[16:22] <dakkar> it may well change between different releases

[16:22] <dakkar> (which is all a long winded way of saying "I don't know" 😜)

[16:24] <codesections> well, I'm not really interested in *micro* optimizations of the sort that change super frequently

[16:32] <dakkar> I've written this: `use Benchy; my @front = ^100; my @back = ^100; b 2_000_000, { @front.unshift(1); @front.pop() }, { @back.push(1); @back.shift() };`

[16:32] <dakkar> it doesn't give any reliable results

[16:32] <dakkar> as in, different runs give very different times

[16:32] <dakkar> 2M operations take <½s on my machine

[16:33] *** wamba left
[16:33] *** wamba joined
[16:40] <dakkar> codesections: I've checked with three different benchmark modules, the answer is: if there is a difference, it's too small to measure, pick whichever style looks better for you

[16:40] *** domidumont left
[16:42] <codesections> Thanks.  (I didn't know about benchy -- I'll have to check that out)

[16:42] <dakkar> I just searched "benchmark" on modules.raku.org

[16:42] <dakkar> then used all three results ☺

[16:43] <codesections> haha, fair enough :D

[16:44] <codesections> I've always just used `now - INIT now`

[16:45] <dakkar> that has a few problems when you want to compare different implementations in a single run

[16:46] <dakkar> but it's good enough for a first approximation

[16:47] <codesections> agreed.  Which is as far as I've gone

[16:51] *** skids joined
[16:51] *** domidumont joined
[16:57] *** domidumont left
[17:07] *** Altai-man joined
[17:08] *** morayj left
[17:08] *** morayj joined
[17:09] *** dataange` left
[17:10] *** sena_kun left
[17:10] *** guifa2 joined
[17:14] *** morayj left
[17:14] *** morayj joined
[17:17] *** leont left
[17:17] *** leont joined
[17:24] *** rindolf left
[17:29] *** morayj left
[17:32] *** finsternis left
[17:34] <guifa2> grr, I wish array slices could be used as left hands in assignment

[17:34] <tellable6> 2020-12-09T14:39:57Z #raku <coldpress> guifa2: nice, thanks for the two ways of distributing calls over arrays

[17:34] *** domidumont joined
[17:34] *** RaycatWh` joined
[17:35] *** dakkar left
[17:37] *** RaycatWhoDat left
[17:37] *** RaycatWh` left
[17:39] <[Coke]> m: my @a = 1..10; @a[1,2,3]=4,5,6; dd @a

[17:39] <camelia> rakudo-moar ac84c1886: OUTPUT: «Array @a = [1, 4, 5, 6, 5, 6, 7, 8, 9, 10]␤»

[17:39] <[Coke]> guifa2: ^^ ??

[17:40] <guifa2> [Coke]: I should have been more specific, I wanted to do

[17:41] <guifa2> @a[3,4,5] = 5

[17:41] <guifa2> --> [1,2,3,5,5,5,6…]

[17:41] *** cpan-raku left
[17:42] <guifa2> but >>= doesn't work :-(

[17:43] <guifa2> I can use @foo[*] = $bar xx Inf though it just feels clunkier

[17:44] <MasterDuke> codesections: https://github.com/MoarVM/MoarVM/pull/1392 is likely relevant

[17:46] <codesections> guifa2: is the clunkier alternative this:

[17:46] <codesections> m: my @a = 1..10; @a[3, 4, 5] = 5 xx *; say @a

[17:46] <camelia> rakudo-moar ac84c1886: OUTPUT: «[1 2 3 5 5 5 7 8 9 10]␤»

[17:47] *** wamba left
[17:47] *** rindolf joined
[17:48] <codesections> MasterDuke: thanks

[17:49] <guifa2> codesections: I forget about the star sometimes haha

[17:49] *** domidumont left
[17:51] <codesections> :D  or ∞, though * seems clearer here, IMO

[17:55] <guifa2> although actually dangit

[17:55] <guifa2> That won't work for me

[17:56] <guifa2> I need to swap out the key name at one level of a nested hash

[17:56] <guifa2> there's gotta be a simpler way

[17:57] *** dogbert17 joined
[17:57] <tbrowder> .tell jmerelo my advent article is ready for publishing and it's here <https://github.com/tbrowder/advent2020/blob/master/fancy-advent.html>

[17:57] <tellable6> tbrowder, I'll pass your message to jmerelo

[17:58] <tbrowder> .tell jmerelo i'll try to put it on the raku-advent.blog site but i'm now having much luck with it so far

[17:58] <tellable6> tbrowder, I'll pass your message to jmerelo

[18:01] <guifa2>  .<new> = .<old> if .<old> for %a{*;*} # this will work since the old key name sticking around is okay

[18:05] <guifa2> .<new> = .<old>:delete if .<old> for %a{*;*} # even better!

[18:05] <tbrowder> .tell jmerelo it's on the advent site, bit styling doesn't look great, bummer

[18:05] <tellable6> tbrowder, I'll pass your message to jmerelo

[18:05] *** domidumont joined
[18:06] *** domidumont left
[18:19] *** lucasb joined
[18:20] *** skids left
[18:21] <jmerelo> tbrowder: ack. I'll check it out. Thanks!

[18:21] <tellable6> 2020-12-09T17:57:39Z #raku <tbrowder> jmerelo my advent article is ready for publishing and it's here <https://github.com/tbrowder/advent2020/blob/master/fancy-advent.html>

[18:21] <tellable6> 2020-12-09T17:58:57Z #raku <tbrowder> jmerelo i'll try to put it on the raku-advent.blog site but i'm now having much luck with it so far

[18:21] <tellable6> 2020-12-09T18:05:10Z #raku <tbrowder> jmerelo it's on the advent site, bit styling doesn't look great, bummer

[18:25] *** xinming left
[18:26] *** xinming joined
[18:29] *** jjmerelo joined
[18:31] *** jmerelo left
[18:35] *** aborazmeh joined
[18:35] *** aborazmeh left
[18:35] *** aborazmeh joined
[18:38] *** Doc_Holliwould joined
[18:41] *** holli__ left
[18:42] *** cpage_ joined
[18:42] *** cydf joined
[18:44] <cydf> Hi all

[18:45] *** cpage left
[18:45] *** cpage_ is now known as cpage

[18:46] * guifa2 waves at cydf

[18:46] <cydf> There used to be a thing called 'p6doc' before... what would that be now?  There's no 'rakudoc' in my install from rakubrew

[18:48] <moritz> use https://docs.raku.org/

[18:51] <cydf> And how do I get the docs from an installed module?  Or do I have to find those on-line, too?

[18:52] <moritz> ha, good question

[18:53] <cydf> I guess that means there's no good answer....

[18:55] <leont> There's raku --doc, but that expects a file not a module name

[18:55] <moritz> I'm not omniscient

[18:56] <jjmerelo> There's actually rakudoc

[18:56] <jjmerelo> You need to install it on top of the documentation.

[18:57] <jjmerelo> But moritz's answer is actually the best thing. Use them online.

[18:58] *** wamba joined
[18:58] <cydf> Where would I find this mythical rakudoc?  Doesn't seem part of the ruke distribution...

[18:58] <cydf> ruke/raku

[19:01] <jjmerelo> cydf: zef install rakudoc, probably

[19:01] <jjmerelo> Let me check

[19:02] <jjmerelo> But, again, the web which you can also build yourself is your best bet. rakudoc is not thoroughly checked, and it's not even called rakudoc... I haven't been able to find it

[19:03] <jjmerelo> https://github.com/Raku/rakudoc Not sure why it's not been released... Probably because I had to check it before we did, and we didn't

[19:03] <jjmerelo> cydf: there's a pre-built repo which you can just download here https://github.com/rakudocs/rakudocs.github.io

[19:05] <leont> Yeah, having it in the module repository would be helpful

[19:06] <cydf> OK, thanks jjmerelo

[19:09] *** BenGoldberg joined
[19:10] <jjmerelo> cydf: sure :-)

[19:16] *** |oLa| joined
[19:26] *** sjm left
[19:32] *** aluaces left
[19:33] *** sjm joined
[19:33] *** aluaces joined
[19:34] *** jjmerelo left
[19:41] *** sjm left
[19:42] *** sjm joined
[19:43] *** BenGoldberg left
[19:44] *** |oLa| left
[19:58] *** |oLa| joined
[19:58] *** |oLa| left
[20:01] *** aborazmeh left
[20:04] <SmokeMachine> m: my @a; @a = 5 xx *; say @a

[20:04] <camelia> rakudo-moar ac84c1886: OUTPUT: «[...]␤»

[20:05] <SmokeMachine> m: my @a; @a = 5 xx *; .say for @a

[20:05] <camelia> rakudo-moar ac84c1886: OUTPUT: «(timeout)5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5␤5…»

[20:09] *** sjm_uk left
[20:09] <SmokeMachine> m: my @a; @a[<1 3 5 7 9>] = 5 xx *; .say for @a

[20:09] <camelia> rakudo-moar ac84c1886: OUTPUT: «(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤»

[20:12] *** rypervenche left
[20:14] *** tejr left
[20:16] *** skids joined
[20:16] *** rypervenche joined
[20:19] *** tejr joined
[20:20] <guifa2> SmokeMachine: or even

[20:20] <guifa2> m: my @a; @a[1,3,5 ... *] = 5 xx *; .say for @a

[20:20] <camelia> rakudo-moar ac84c1886: ( no output )

[20:20] * guifa2 glares at camelia

[20:21] *** ggoebel joined
[20:29] <moritz> m: my @a; @a[1,3,5 ... *] = 5 xx *; .say for @a.head(10)

[20:29] <camelia> rakudo-moar ac84c1886: ( no output )

[20:29] <moritz> m: my @a; @a[1,3,5 ... *] = 5 xx *; .say @a.head(10)

[20:29] <camelia> rakudo-moar ac84c1886: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my @a; @a[1,3,5 ... *] = 5 xx *; .say7⏏5 @a.head(10)␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        st…»

[20:29] <moritz> m: my @a; @a[1,3,5 ... *] = 5 xx *; say @a.head(10)

[20:29] <camelia> rakudo-moar ac84c1886: OUTPUT: «()␤»

[20:31] <guifa2> m: my @a; @a[1,3,5 ... 9999] = 5 xx *; .say for @a

[20:31] <camelia> rakudo-moar ac84c1886: OUTPUT: «(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5␤(Any)␤5…»

[20:31] * guifa2 notes the limitation: must be a finite list

[20:39] * moritz would have prefered an error message to a silent non-action

[20:46] <MasterDuke> yeah, that's interesting

[20:57] *** robinsmidsrod left
[20:58] *** robinsmidsrod joined
[21:00] *** grondilu joined
[21:00] <grondilu> SpaceX's second attempt imminent : https://www.youtube.com/watch?v=ap-BkkrRg-o

[21:01] <lizmat> T-minus 3 minutes

[21:08] *** sena_kun joined
[21:10] *** Altai-man left
[21:18] *** Black_Ribbon joined
[21:21] *** stoned75 left
[21:25] <moritz> tenative T-0 now at 22:40 UTC

[21:39] <El_Che> now

[21:39] *** rindolf left
[21:43] <moritz> in one hour, actually

[21:44] <El_Che> that's why it doesn't  move 

[21:44] <El_Che> :)

[21:51] *** jmchael left
[21:51] *** jmchael joined
[21:52] *** jmchael left
[21:54] *** jmchael joined
[22:22] *** sena_kun left
[22:34] *** BenGoldberg joined
[22:34] *** skids left
[22:43] <ggoebel> how do you make a method or function signature that requires an array parameter to be an array of integers?

[22:44] <leont> You can declare an Int @array, but that does something subtly different

[22:44] <leont> It wants you to pass an Array[Int], not an Array that happens to contain Ints

[22:44] <leont> So unless that array is the former, that won't help you

[22:45] <ggoebel> can you use a where clause to constrict it to an array of int? And would that also allow an Array[Int]?

[22:45] <leont> You can do that, yes

[22:46] <ggoebel> what is the syntax for that... I'm reading https://docs.raku.org/type/Signature#index-entry-where_clause but not seeing it

[22:46] <ggoebel> thank you for your help leont++

[22:47] *** MasterDuke left
[22:47] <leont> sub foo(@array where all(@$_) ~~ Int) {}

[22:48] <leont> Or better, sub foo(@array where $_.all ~~ Int) {}

[22:50] <ggoebel> thank you!

[23:01] *** wamba left
[23:03] <lizmat> well, that was interesting: hit the target with a little excess velocity :-)

[23:08] *** BenGoldberg left
[23:21] <leont> Boom is bad?

[23:31] <lizmat> well, flying something up to 12.5km by just rockets, then getting it back to within meters of the target, is quite the achievement already

[23:31] <lizmat> after the smoke cleared, the message was "SN9 is up next" or something to that effect

