[00:06] *** Maylay left
[00:07] <jdv79> how does one match a \r that's next to a \n?

[00:08] <jdv79> m: "a\rb".subst(/\r/, "_")

[00:08] <camelia> rakudo-moar 95f7d34e8: ( no output )

[00:08] <jdv79> m: "a\rb".subst(/\r/, "_").say

[00:08] <camelia> rakudo-moar 95f7d34e8: OUTPUT: ¬´a_b‚ê§¬ª

[00:08] <jdv79> m: "a\r\nb".subst(/\r/, "_").say

[00:08] <camelia> rakudo-moar 95f7d34e8: OUTPUT: ¬´a

[00:08] <jdv79> wut

[00:11] *** Maylay joined
[00:13] *** Ven`` joined
[00:24] <timotimo> jdv79: raku doesn't match partial graphemes

[00:25] <jdv79> then how do i do that?  i actually need to basically do "\r" => "something else"

[00:25] <jdv79> too many llys

[00:27] <timotimo> you'll need to match \r\n separately from \r

[00:28] <jdv79> i guess for now i'll loop over .codes and stitch it up verbosely

[00:28] <jdv79> i thought you implied that's not possible at the moment

[00:29] <jdv79> oh, i see.  i can't do that.

[00:29] <jdv79> thanks anyway 

[00:32] <jdv79> oh, i can.  nevermind.  ok.

[00:34] <timotimo> right, it's one character, but it's a distinct one you can match

[00:34] <timotimo> i mean, characters that have it can be matched against

[00:34] <timotimo> there's only one that fuses with it afaik

[00:38] *** dotdotdot left
[00:53] *** konvertex left
[01:03] *** lucasb left
[01:04] *** Maylay left
[01:05] *** Maylay joined
[01:11] *** Ven`` left
[01:32] *** molaf left
[01:45] *** molaf joined
[01:49] *** Manifest0 left
[01:49] *** Manifest0 joined
[01:50] *** mowcat left
[02:05] <cpan-raku> New module released to CPAN! Test::Async (0.0.13) by 03VRURG

[02:05] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:11] *** dotdotdot joined
[02:38] *** aindilis left
[03:01] *** Maylay left
[03:04] *** sauvin is now known as Daddy

[03:04] *** Daddy is now known as Daddums

[03:04] *** Daddums is now known as Sauvin

[03:07] *** melezhik left
[03:18] *** aborazmeh left
[03:29] *** _jrjsmrtn joined
[03:30] *** __jrjsmrtn__ left
[03:51] *** aborazmeh joined
[03:51] *** aborazmeh left
[03:51] *** aborazmeh joined
[04:12] *** Sgeo left
[05:12] *** quotable6 left
[05:12] *** bloatable6 left
[05:12] *** notable6 left
[05:12] *** greppable6 left
[05:12] *** shareable6 left
[05:12] *** tellable6 left
[05:12] *** squashable6 left
[05:12] *** bisectable6 left
[05:12] *** releasable6 left
[05:12] *** benchable6 left
[05:12] *** committable6 left
[05:12] *** nativecallable6 left
[05:12] *** sourceable6 left
[05:12] *** coverable6 left
[05:12] *** statisfiable6 left
[05:12] *** evalable6 left
[05:12] *** reportable6 left
[05:12] *** linkable6 left
[05:12] *** unicodable6 left
[05:13] *** tellable6 joined
[05:13] *** bisectable6 joined
[05:13] *** nativecallable6 joined
[05:13] *** releasable6 joined
[05:13] *** reportable6 joined
[05:13] *** linkable6 joined
[05:13] *** statisfiable6 joined
[05:14] *** greppable6 joined
[05:14] *** squashable6 joined
[05:14] *** quotable6 joined
[05:14] *** sourceable6 joined
[05:14] *** bloatable6 joined
[05:14] *** benchable6 joined
[05:14] *** unicodable6 joined
[05:14] *** shareable6 joined
[05:15] *** coverable6 joined
[05:15] *** notable6 joined
[05:15] *** evalable6 joined
[05:15] *** committable6 joined
[05:18] *** brtastic joined
[05:20] *** molaf left
[05:26] *** Sgeo joined
[05:41] *** brtastic left
[05:50] *** patrickb joined
[05:54] *** skids left
[05:56] *** TreyHarris left
[06:00] <patrickb> .tell melezhik Reasons for Azure: Supports MacOS, Windows, Linux. Has no usage limits.

[06:00] <tellable6> patrickb, I'll pass your message to melezhik

[06:03] *** stoned75 joined
[06:08] *** patrickb45 joined
[06:08] *** patrickb left
[06:14] *** sjm_uk joined
[06:22] *** xinming_ left
[06:22] *** xinming_ joined
[06:38] *** jmerelo joined
[06:39] *** kensanata joined
[06:43] *** xinming_ left
[06:43] *** xinming_ joined
[06:54] *** domidumont joined
[06:56] *** pilne left
[07:00] *** tyil joined
[07:01] <tyil> .tell melezhik I dont work on Rakudo, I only do the Star bundle, I wouldn't touch Azure, and I try to stay away from GitHub when I can too

[07:01] <tellable6> tyil, I'll pass your message to melezhik

[07:01] *** tyil left
[07:05] *** Sgeo left
[07:10] *** brtastic joined
[07:13] *** chloekek joined
[07:21] *** manj-gnome_ joined
[07:21] *** manj-gnome_ left
[07:21] *** andrzejku joined
[07:23] *** sour joined
[07:24] *** timeless left
[07:25] <sour> Hi, has anyone tried to install zef packages and got "Enabled fetching backends [pswebrequest path curl wget] don't understand http://www.cpan.org/authors/id/J/JS/JSTOWE/Perl6/Lumberjack-0.0.10.tar.gzYou may need to configure one of the following backends, or install its underlying software - [git]" as a result? I'm unsure what this means, I got

[07:25] <sour> git installed D:

[07:25] <sour> Also, what logging package do you guys use? I tried to go for Lumberjack, but it seems that tests are failing when trying to install it...

[07:26] <sour> Also, that message is from zef install Lumberjack - a subsequent rerun of the same command passed through that part

[07:27] *** timeless joined
[07:32] *** aborazmeh left
[07:34] *** sarna joined
[07:34] <sarna> o/

[07:39] *** sivoais left
[07:39] *** TeamBlast left
[07:39] <El_Che> patrickb45: don't they all support the 3 OSes nowaday?

[07:40] *** sivoais joined
[07:41] *** TeamBlast joined
[07:44] <MasterDuke> El_Che: i don't so at the free tiers

[07:45] *** dakkar joined
[07:49] <patrickb45> El_Che: Partly. E.g. Travis has minimal / beta support for Windows.

[07:50] <patrickb45> CircleCI supports all three, but has a bug in their billing which makes it impossible for OSS projects to build on Windows.

[07:53] <patrickb45> AppVeyor only supports one build job at a time in their free tier.

[07:59] <sarna> m: ((my $foo, my @bar), my @baz) = [[1,2,3],4,5]; say "foo: $foo, bar: {@bar}, baz: {@baz}" # why doesn't this dwim?

[07:59] <camelia> rakudo-moar 95f7d34e8: OUTPUT: ¬´foo: 1 2 3, bar: 4, baz: 5‚ê§¬ª

[07:59] <sarna> (I'd like `$foo` to be 1, `@bar` to be [2,3] and `@baz` to be [4,5])

[08:03] *** chloekek left
[08:06] *** sarna left
[08:07] *** sarna joined
[08:09] <sarna> https://www.evanmiller.org/a-review-of-perl-6.html mentions destructuring assignment and says what to do so the left hand side doesn't get flattened - but it doesn't seem to work anymore?

[08:09] <sarna> I can't find the colon version in the docs either

[08:10] <dakkar> I'm looking at it

[08:11] <dakkar> m: sub x(($a,*@b),*@c) { say $a;say @b;say @c }; x((1,2,3),4,5)

[08:11] <camelia> rakudo-moar 95f7d34e8: OUTPUT: ¬´1‚ê§[2 3]‚ê§[4 5]‚ê§¬ª

[08:11] <dakkar> so it works in the way the documentation says, with a signature https://docs.raku.org/type/Signature#Destructuring_arguments

[08:12] <sarna> yeah but I want to do this *inside* a sub

[08:12] <sarna> ..or should I create a sub and invoke it just to get destructuring

[08:14] <dakkar> I don't think destructuring *assignment* handles slurpies (which you need, notice the `*` in that signature)

[08:14] <dakkar> but you should be able to use a signature without a sub

[08:14] *** Altai-man_ joined
[08:15] <sarna> yeah, but why doesn't the old colon version work? did it get dropped?

[08:15] <dakkar> I don't know what you mean my "colon version", sorry. Can you give me an example?

[08:15] <sarna> now the compiler says "Lexical with name '$foo' does not exist in this frame"

[08:15] <sarna> https://www.evanmiller.org/a-review-of-perl-6.html, ctrl+f "destructuring assignment"

[08:15] <dakkar> (I'm not an expert, I'm just good at pretending)

[08:16] <sarna> aren't we all

[08:16] <dakkar> ok, that example is binding (`:=`) to a signature literal (`:(...)`)

[08:16] <dakkar> which is exactly what I was trying to do ‚ò∫

[08:16] <dakkar> give me a minute

[08:16] <sarna> hmm..

[08:17] <dakkar> ok, that looks wrong

[08:17] <dakkar> m: my ($a,@b,@c); :(($a,*@b),*@c) := ((1,2,3),4,5);

[08:17] <camelia> rakudo-moar 95f7d34e8: ( no output )

[08:17] <dakkar> m: my ($a,@b,@c); :(($a,*@b),*@c) := ((1,2,3),4,5); say $a; say @b; say @c;

[08:17] <camelia> rakudo-moar 95f7d34e8: OUTPUT: ¬´1‚ê§[2 3]‚ê§[4 5]‚ê§¬ª

[08:18] <dakkar> well, looks like it was broken then fixed! get the latest rakudo

[08:18] * sarna gasps

[08:18] <dakkar> (I get the same error you do, on 2020.02)

[08:18] <dakkar> m: my :(($a,*@b),*@c) := ((1,2,3),4,5); say $a; say @b; say @c;

[08:18] <camelia> rakudo-moar 95f7d34e8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed my‚ê§at <tmp>:1‚ê§------> 3my7‚èè5 :(($a,*@b),*@c) := ((1,2,3),4,5); say $‚ê§¬ª

[08:18] <sarna> no, your newest version works for me too :)

[08:19] <sarna> oh well I have 2020.05.1 anyway so

[08:19] <dakkar> notice that you need to declare the names before you bind to the signature that mentions them

[08:19] <sarna> thank you so much :)))

[08:19] <dakkar> oh, so maybe my problem is in how I was using the REPL

[08:19] <sarna> oh let me try something actually

[08:19] <dakkar> glad to be of service

[08:20] *** natrys joined
[08:20] <sarna> yeahh if you say the first line, hit return, and try to enter the rest - it doesn't work

[08:20] <sarna> it has to be on one line

[08:20] <sarna> I hope just in the repl, not in a text file..

[08:20] <dakkar> or in a proper program ‚ò∫

[08:21] <sarna> that's cool with me then!

[08:24] *** konvertex joined
[08:26] *** sena_kun joined
[08:28] *** Altai-man_ left
[08:33] *** pecastro joined
[08:41] *** finsternis left
[08:41] *** finsternis joined
[08:51] *** stoned75 left
[08:53] *** stoned75 joined
[09:05] * lizmat clickbaits https://rakudoweekly.blog/2020/05/18/2020-20-continuously-upgraded/

[09:11] *** chloekek joined
[09:25] *** natrys left
[09:28] * sjn clickbaits https://rakudoweekly.blog/2020/05/18/2020-20-continuously-upgraded/

[09:29] <sjn> "You'll never believe what happens next!"

[09:29] <lizmat> :-)

[09:32] *** Doc_Holliwood left
[09:34] *** Ven`` joined
[09:37] <El_Che> hi sjn !

[09:37] <El_Che> (and everyone else as well, but sjn has been a while :) )

[09:37] <El_Che> mental image can not be unseen

[09:43] <sjn> hei, El_Che, it's been a while! :-)

[09:50] *** sour left
[09:51] *** Doc_Holliwood joined
[10:08] *** sarna left
[10:08] *** sarna joined
[10:15] *** Ven`` left
[10:22] *** Black_Ribbon left
[10:25] *** Altai-man_ joined
[10:28] *** sena_kun left
[10:32] <moritz> Hi sjn! Since we couldn't Norway for 17. May, we made our own little celebration here in .de

[10:35] <moritz> 20200510_104025.jpg

[10:35] <moritz> eeks

[10:35] <moritz> https://imgur.com/a/LK3s1Ov proper link now :D

[10:39] *** ensamvarg joined
[10:41] *** dakkar left
[10:43] <tadzik> mmm :)

[10:47] <sarna> what a lovely pie

[10:48] *** mowcat joined
[11:00] *** chloekek left
[11:08] *** Maylay joined
[11:16] <MasterDuke> those look good

[11:35] *** andrzejku left
[11:36] <sjn> moritz: that was nice! Hope you had a nice celebration! :-)

[11:36] <moritz> sjn: we had :D

[11:37] <moritz> thanks all

[11:54] *** ragekagemage left
[12:07] *** andrzejku joined
[12:13] *** skids joined
[12:17] *** jmerelo left
[12:27] *** sena_kun joined
[12:28] *** Altai-man_ left
[12:37] *** cpan-raku left
[12:38] *** cpan-raku joined
[12:38] *** cpan-raku left
[12:38] *** cpan-raku joined
[13:10] <[Coke]> lizmat: regarding the stack overflow article about unicode... you *can* search for ¬´ in the site search.

[13:10] <lizmat> op mentioned Google search, no ?

[13:11] <lizmat> but maybe a good idea to mention in the answer

[13:13] <lizmat> [Coke]++

[13:14] *** sour joined
[13:15] <[Coke]> lizmat++ (updating the answer)

[13:19] <sarna> what's the name of the polymorphic equality operator?

[13:19] <timotimo> you mean eqv?

[13:19] <sarna> yess, thank you

[13:20] <timotimo> :)

[13:21] *** Kaiepi left
[13:22] <[Coke]> m: say &infix::eqv eqv &infix::eqv

[13:22] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´True‚ê§¬ª

[13:23] <[Coke]> m: say &infix::eqv infix::eqv &infix::eqv

[13:23] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say &infix::eqv7‚èè5 infix::eqv &infix::eqv‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§   ‚Ä¶¬ª

[13:24] <sour> wow, function comparison

[13:29] <timotimo> [Coke]: one : too many

[13:29] <timotimo> m: say &infix::eqv

[13:29] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´(Any)‚ê§¬ª

[13:29] <timotimo> m: say &infix

[13:29] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    infix used at line 1. Did you mean 'index', 'indir'?‚ê§‚ê§¬ª

[13:29] <timotimo> m: say &infix::

[13:29] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    infix used at line 1. Did you mean 'index', 'indir'?‚ê§‚ê§¬ª

[13:29] <timotimo> m: say infix::

[13:29] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    infix used at line 1. Did you mean 'indir', 'index'?‚ê§‚ê§¬ª

[13:29] <timotimo> *shrug*

[13:39] *** poohman left
[13:44] *** patrickb45 left
[13:49] *** patrickb joined
[13:54] *** patrickb left
[13:57] *** patrickb joined
[14:09] *** sarna left
[14:14] <jdv79> i got the latest moarperf release, fired it up, but all i get is 404s

[14:17] <timotimo> hum, did i push that last change improperly?

[14:18] <MasterDuke> i still have to redirect manually sometimes

[14:19] <jdv79> it looks partial

[14:19] <jdv79> at least the static subdir is missing

[14:19] <jdv79> i tried copying in the node_modules from the release over a git checkout and it gets farther but no dice

[14:20] <timotimo> dang, let me have a look at the travis file

[14:20] <jdv79> maybe i'll try the n-1 release

[14:21] <timotimo> here's the "how did this ever work" moment i guess

[14:23] <jdv79> n-1 release doesn't work either.  maybe its me.

[14:23] <jdv79> i download and extract the release and run raku -I. service.p6 foo.sql and go to localhost:20000 - is there more/is that wrong?

[14:24] <timotimo> https://github.com/timo/moarperf/releases/tag/untagged-3a9056a0e91856407e17 - give this a try please

[14:25] <timotimo> wait what, why are there symlinks

[14:26] *** Altai-man_ joined
[14:28] <jdv79> that one got farther

[14:28] <jdv79> now a 500

[14:28] <timotimo> -rw-rw-r-- travis/travis  148137 2020-05-19 16:23 static/js/allocationviewer.js

[14:28] *** sena_kun left
[14:28] <timotimo> hrw-rw-r-- travis/travis       0 2020-05-19 16:23 static/js/allocationviewer.js link to static/js/allocationviewer.js

[14:28] <jdv79> DBDish::SQLite: Error: no such table: pragma_table_info (1)

[14:29] <jdv79> and the browser actually has content - header stuff and "hold on..."

[14:29] <timotimo> um that's a sqlite builtin

[14:29] <jdv79> weird

[14:30] <timotimo> https://sqlite.org/pragma.html#pragma_table_info

[14:30] *** aindilis joined
[14:30] <timotimo> it's just used to see if the version of the sqlite data is old and it needs to generate some extra data for convenience

[14:30] <jdv79> darn.  got a meeting.  i'll dig in after i guess.

[14:30] <jdv79> thanks

[14:40] *** aborazmeh joined
[14:40] *** aborazmeh left
[14:40] *** aborazmeh joined
[14:43] <jdv79> seems that table is part of "experimental" stuff and it might not be avail in my ver - 3.11.0:(

[14:46] <jdv79> or it was?

[14:48] *** jmerelo joined
[15:14] *** mowcat left
[15:33] *** sour left
[15:47] *** aborazmeh left
[15:59] *** patrickb left
[15:59] *** molaf joined
[16:00] *** brtastic left
[16:06] *** vlad_drac joined
[16:07] <timotimo> wtf :( :( :(

[16:08] <timotimo> well, you can probably comment out the code that does it

[16:09] <jdv79> no biggee.  docker:)

[16:09] <jdv79> i should upgrade my $work box anyway - just one more reason

[16:10] <timotimo> 2016-02-15 (3.11.0)

[16:10] <timotimo> it's long ago but not *that* long ago

[16:10] *** kensanata left
[16:11] <timotimo> huh, but it already existed long before

[16:17] *** andrzejku left
[16:23] *** chloekek joined
[16:27] *** sena_kun joined
[16:27] <jdv79> wow.  the gc ran for 2.2s out of the 8.3s run time.

[16:27] <jdv79> is that normal?

[16:29] *** Altai-man_ left
[16:29] *** brtastic joined
[16:30] <timotimo> that's quite the amount

[16:31] <timotimo> in the gc slot in the graphs you'd see how many objects are being kept alive each time

[16:31] <timotimo> the more the gc can toss out in minor runs, the better gc performance in general will be

[16:31] <timotimo> but of course that all depends on what kind of data you're working with in the first place

[16:35] <jdv79> its almost all "freed very early"

[16:35] <jdv79> is that what you mean?

[16:36] <timotimo> that should be very good

[16:36] <timotimo> what are the individual gc run times? how many times does it run a major ("full") rather than minor collection?

[16:38] <jdv79> the times seem to grow fairly evenly - from 5ms to 30ms

[16:38] <jdv79> 127 runs

[16:39] <jdv79> where do i see major vs minor?

[16:39] <timotimo> majors will have a little star, and you can filter major vs minor vs all at the top, and the overview page has it in prose as well

[16:41] <jdv79> i think there were no majors

[16:41] <jdv79> both pages seem to agree on that

[16:41] <timotimo> OK

[16:41] <jdv79> weird

[16:42] <timotimo> hm. things that can make gc runs take longer even if many things are freed are for example very deep recursion or objects with many many references like a million elements list of Int objects

[16:43] <timotimo> does it show the amount of references when you expand gc runs?

[16:43] <jdv79> idk about millions.  this is just taking 20 json files and munging them into an xml output

[16:43] <jdv79> its not that complicated, i don't think

[16:44] <jdv79> where would i see this "references"?

[16:46] <timotimo> if it exists, clicking a row in the gc table on the gc tab would be the place

[16:47] <jdv79> are you talking about the counts in the "freed *" columns?

[16:47] <timotimo> hm, no, that'd be objects rather than references

[16:48] <jdv79> i don't know what you are referring to then

[16:49] <timotimo> good pun

[16:49] <timotimo> probably a thing the profiler doesn't record ... yet!

[16:49] <timotimo> trying to get an example program to profile m(

[16:49] <jdv79> anyway.  idk how to address that so i guess i'll ignore it.

[16:50] <jdv79> but 25% is not insignificant - i'd like to get that down if possible

[16:50] <timotimo> for sure

[16:51] <timotimo> the heap snapshot profile mode would do a better job of telling you what's up

[16:54] *** mowcat joined
[17:12] *** pilne joined
[17:20] *** Black_Ribbon joined
[17:26] *** MasterDuke left
[17:31] *** natrys joined
[17:37] *** molaf left
[17:46] *** domidumont left
[17:55] *** brtastic left
[17:59] <jdv79> no real surprises otherwise.  looks generally dominated by "regexy stuff"

[18:00] *** chloekek left
[18:01] <jdv79> JSON::Fast is the biggest:(

[18:02] *** aborazmeh joined
[18:02] *** aborazmeh left
[18:02] *** aborazmeh joined
[18:03] <timotimo> JSON::Fast uses no regexes :|

[18:03] <timotimo> but that's for run time?

[18:08] <jdv79> oh right - that was json tiny

[18:09] <jdv79> yeah.  from-json is one of my top.

[18:10] <timotimo> ah, would be interested to see how json::fast compares for your use case

[18:10] *** MasterDuke joined
[18:10] <jdv79> and subst() is in there but seems like 40% of it

[18:12] <jdv79> JSON::Fast::from-json() is about 50% of my runtime

[18:12] <jdv79> gonna try JsonC

[18:16] *** brtastic joined
[18:23] *** Sauvin left
[18:24] <jdv79> huh.  its ~2x slower

[18:24] <jdv79> ok then

[18:26] *** jmerelo left
[18:26] *** Altai-man_ joined
[18:28] <jdv79> too much raku in that "c" module" i guess;)

[18:28] <jdv79> is there a faster way to parse json?

[18:28] *** sena_kun left
[18:28] *** gordonfish left
[18:30] *** kst joined
[18:39] *** aborazmeh left
[18:54] <timotimo> yeah, there's a library that parses json with vectorized ops. no raku binding for it yet

[18:55] <timotimo> https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/

[18:56] <timotimo> if you'd like to, you could anonymize the json file(s) and chuck them my way so i can profile them thoroughly perhaps %)

[18:56] *** stoned75 left
[18:58] <jdv79> wow, the pre-comp diff is real.  moved my MAIN into a module and went from 2.7s to 0.7s "no-op" runtime

[18:59] <Doc_Holliwood> why the heck is Inf a Num? i mean, OBVIOUSLY Inf is an Int

[18:59] <jdv79> i can probably gen something someday - its customer data though so it'd be non-trivial

[18:59] <jdv79> i'll make a note

[19:08] *** sour joined
[19:12] *** sjm_uk left
[19:12] *** stoned75 joined
[19:15] *** poohman joined
[19:19] *** gordonfish joined
[19:21] *** aborazmeh joined
[19:21] *** aborazmeh left
[19:21] *** aborazmeh joined
[19:26] <poohman> m: use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:26] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Could not find Text::CSV in:‚ê§    inst#/home/camelia/.raku‚ê§    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    inst#/home/camelia‚Ä¶¬ª

[19:27] <poohman> hello all, cant use modules here?

[19:28] *** vlad_drac left
[19:28] <MasterDuke> not with camelia. there is a way to do it with the *ables though

[19:29] <poohman> having some problems with the Text::CSV module - not getting an array of hashes as mentioned in the documentation

[19:30] <MasterDuke> e: use lib ‚Äòdata/all-modules/cpan/TIMOTIMO/JSON-Fast‚Äô; use JSON::Fast;

[19:30] <poohman> instead getting array of array when headers => "uc" or "lc" or callable

[19:30] <evalable6> MasterDuke, rakudo-moar 6a0eaabdb: OUTPUT: ¬´¬ª

[19:33] <poohman> e: use lib 'data/all-modules/cpan/Tux/CSV';use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:33] <evalable6> poohman, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:33] <evalable6> poohman, Full output: https://gist.github.com/1cf66d0e2192b07ec49abd0a6c71826b

[19:34] <poohman> e: use lib ‚Äòdata/all-modules/cpan/Tux/CSV‚Äô;use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:34] <evalable6> poohman, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:34] <evalable6> poohman, Full output: https://gist.github.com/686913dd32d1a4bc9322573a58ed80ad

[19:38] <poohman> e: use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:38] <evalable6> poohman, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:38] <evalable6> poohman, Full output: https://gist.github.com/16ab3442c414d90711a044462e85f084

[19:42] <poohman> need to hit the sack - its late here - tomorrow is another day - bye

[19:43] <sour> goodnight

[19:47] <MasterDuke> e: use lib ‚Äòdata/all-modules/github/Tux/CSV‚Äô;use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:47] <evalable6> MasterDuke, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:47] <evalable6> MasterDuke, Full output: https://gist.github.com/0e7f176f20b7e0fe29165bdfb80c64e6

[19:48] <MasterDuke> e: use lib ‚Äòdata/all-modules/github/Tux/CSV‚Äô; use lib ‚Äòdata/perl6-all-modules/github/FROGGS/p6-Slang-Tuxic‚Äô; use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:48] <evalable6> MasterDuke, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:48] <evalable6> MasterDuke, Full output: https://gist.github.com/48c5609ced79982db89061726d75332b

[19:49] <MasterDuke> e: use lib ‚Äòdata/all-modules/github/Tux/CSV‚Äô; use lib ‚Äòdata/all-modules/github/FROGGS/p6-Slang-Tuxic‚Äô; use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:49] <evalable6> MasterDuke, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:49] <evalable6> MasterDuke, Full output: https://gist.github.com/5e96660867ab6c82cdc0bb8b01351d6a

[19:50] <timotimo> you know, evalable bots could totally have a custom CUR that lets you write just the name of the module and it gets the right path for you

[19:51] <MasterDuke> e: use lib ‚Äòdata/all-modules/github/Tux/CSV‚Äô; use lib ‚Äòdata/all-modules/github/FROGGS/p6-Slang-Tuxic‚Äô; use lib ‚Äòdata/all-modules/github/perlpilot/p6-File-Temp‚Äô; use Text::CSV; my @aoh = csv(in => ["header1,header2\n1,2\n3,4\n"], sep =>",", headers => "uc");say @aoh.keys;

[19:51] <evalable6> MasterDuke, rakudo-moar 6a0eaabdb: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[19:51] <evalable6> MasterDuke, Full output: https://gist.github.com/0cd2111f472b74d03a5a32596ab687c3

[19:51] <MasterDuke> yeah, that would be nice

[19:56] *** silug left
[20:03] *** vike1 left
[20:07] *** chloekek joined
[20:09] *** rindolf joined
[20:14] <sour> has anyone used Cro::HTTP::Client together with Cro::WebSocket::Client? I'm able to reproduce some really strange bug: when I declare a class member as a websocket, the internal Uri parser is unable to parse URIs

[20:15] <lizmat> sour: maybe #cro is a better channel to ask this on  :-)

[20:15] <sour> oh, I wasn't aware there was a special channel, thanks!

[20:17] <lizmat> yes, there is!

[20:17] *** timotimo left
[20:17] *** timo joined
[20:18] *** timo is now known as Guest71053

[20:18] <Guest71053> welp, "/quit" is not what you use to leave a single channel

[20:18] *** Guest71053 is now known as timotimo

[20:18] <El_Che> as the cros fly

[20:18] <El_Che> ->/leave

[20:26] *** poohman left
[20:27] *** sena_kun joined
[20:28] *** sour left
[20:29] *** Altai-man_ left
[20:29] *** rindolf left
[20:32] *** brtastic left
[20:32] *** molaf joined
[20:36] *** sour joined
[20:40] *** squashable6 left
[20:41] * [Coke] uses "/win c"

[20:42] *** squashable6 joined
[20:42] <timotimo> i normally use /wc i think

[20:42] <timotimo> i literally brainfarted that

[20:42] <El_Che> timotimo: I have exact that alias

[20:43] <lucs> What does  \('foo')  mean?

[20:44] <lizmat> m: dd \("foo").^name

[20:44] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´"Capture"‚ê§¬ª

[20:44] <El_Che> Capture

[20:44] <lucs> Ah, thanks.

[20:44] <lizmat> it is a Capture of a single positiional argument

[20:44] <El_Che> m: dd \("foo").WHAT

[20:44] <camelia> rakudo-moar 2a88990b5: ( no output )

[20:44] <El_Che> m: say \("foo").WHAT

[20:44] <camelia> rakudo-moar 2a88990b5: ( no output )

[20:45] <El_Che> mm

[20:45] <El_Che> the says (Capture) in the REPL

[20:45] <lizmat> that *is* strange

[20:46] *** natrys left
[20:46] *** vike1 joined
[20:58] *** natrys joined
[20:59] *** natrys left
[20:59] <timotimo> i get "(Capture)" with -e, too

[21:00] <lizmat> m: say "hello"

[21:00] <camelia> rakudo-moar 2a88990b5: OUTPUT: ¬´hello‚ê§¬ª

[21:02] <chloekek> I wonder how capable PCRE is regarding Raku regexes, ignoring syntax.

[21:03] <chloekek> Would be cool if we could just write a Raku regex parser, translate to PCRE regex, and plug it into PCRE and it works.

[21:03] *** melezhik joined
[21:03] <chloekek> Perhaps if prefixed with (?6) it could do that automatically.

[21:07] <chloekek> Things like % and %% and | (but not ||) would probably be translated in a very ugly way.

[21:07] <chloekek> Not to mention &&.

[21:07] *** poohman joined
[21:21] *** stoned75 left
[21:23] <Doc_Holliwood> how do i pass a type to a function so that function can use it to instantiate a parametrized role? basically I have role R[::T] { sub helper( $type ) { R[$type].new } } but that doesnt work

[21:23] <Doc_Holliwood> dies with Died with X::Multi::NoMatch

[21:25] <timotimo> how are you calling it?

[21:27] <Doc_Holliwood> nevermind, i had an error in my actual signature

[21:27] *** chloekek left
[21:38] *** konvertex left
[21:40] <melezhik> rba AlexDaniel` I've spinned up a rakudist worker in i-088204c3758429047. It's t3a.small one, 2 GB / 2 Core.  web UI itself is on my laptop so fat

[21:40] <tellable6> 2020-05-19T06:00:39Z #raku <patrickb> melezhik Reasons for Azure: Supports MacOS, Windows, Linux. Has no usage limits.

[21:40] <tellable6> 2020-05-19T07:01:55Z #raku <tyil> melezhik I dont work on Rakudo, I only do the Star bundle, I wouldn't touch Azure, and I try to stay away from GitHub when I can too

[21:41] <melezhik> so far

[21:41] <melezhik> @ty

[21:41] <melezhik> tyil[m] makes a sense , I see

[21:42] *** poohman left
[21:43] <melezhik> rba AlexDaniel`  when we test aws worker we can move master part (rakudist web UI + sparky ) to the VM with blin

[21:44] <melezhik> so we might have a setup with master on VM and as many workers as we want on aws

[21:44] *** silug joined
[21:44] <melezhik> but I get things slowly, one by one , to see how it goes and not to over budget :-)))

[21:46] *** stoned75 joined
[22:04] *** tuxlovesyou joined
[22:04] * tuxlovesyou waves in penguin

[22:05] <raku-bridge> <tuxlovesyou> /me also waves in penguin

[22:05] *** sour left
[22:06] *** stoned75 left
[22:07] *** stoned75 joined
[22:10] *** aborazmeh left
[22:10] <timotimo> my weechat cuts off the nickname of raku-bridge to read "raku-brid" and i kind of want it to be renamed "raku-bird" now

[22:22] *** silug left
[22:23] *** |oLa| joined
[22:24] *** |oLa| left
[22:26] *** Altai-man_ joined
[22:28] *** sena_kun left
[22:33] *** guifa joined
[22:35] <guifa> o/

[22:36] *** silug joined
[22:43] *** donaldh_ left
[23:00] *** vike1 left
[23:02] <lucs> https://docs.raku.org/language/grammars#Creating_grammars mentions "If action objects are not used, .parse returns a Match object and sets, by default, the default match object $/, to the same value."

[23:02] <lucs> What's the difference if an action object is used?

[23:05] *** mowcat left
[23:05] *** vike1 joined
[23:07] *** aindilis left
[23:07] *** Altai-man_ left
[23:07] *** mowcat joined
[23:11] <guifa> Actually just returns the match object, plus anything special in the .made 

[23:11] <lucs> Yeah, I guess the phrasing just needs a bit of improvement.

[23:11] <guifa> We should probably clear that up in the docs.  

[23:11] <guifa> jinx

[23:11] <guifa> haha

[23:11] <lucs> :)

[23:15] *** melezhik left
[23:18] <lucs> How does this sound?: "If actions or action objects are not used, you can still examine the Match object returned by .parse, which also happened by default to set $/, the default Match object."

[23:19] *** mowcat left
[23:24] <lucs> Oops, s/."$/, to the same value."/

[23:25] *** pecastro left
[23:34] <guifa> I would proabbly just delete the "If action objects are not used, .parse returns a Match object and sets, by default, the default match object $/, to the same value." lien entirely.  

[23:37] <lucs> Hmm... It's true that this is the first time .parse is mentioned in the document.

[23:37] <lucs> The more I read the document, the more, um, difficulties I find with it :/

[23:41] <lucs> For example, action objects are discussed, but I don't see anything about actions within the grammar.

[23:51] <lucs> Documentation is hard :/

[23:51] <lucs> In the grammars tutorial: "Token methods are faster than regex methods and ignore whitespace."

[23:52] <lucs> "ignore whitespace" What does that mean?

[23:55] <lucs> (not looking for an explanation, just pointing out the difficulty)

[23:57] * lucs should open issue tickets instead of complaining, eh.

[23:58] <guifa> Grammars are particularly tough, because you want the docs to be quick reference, but grammars need more of an entire tutorial / larger example

