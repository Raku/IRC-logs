[00:04] *** mowcat left
[00:09] <tbrowder> is there a way to avoid precomp for debugging modules?

[00:10] <tbrowder> lizmat: i'm getting an error using P5pack and it seems it's due to my caller but i can't locate the entry

[00:13] <tbrowder> on my side

[00:14] <tbrowder> wait a mo, time to break out jnthn's debugger!

[00:14] *** Xliff left
[00:16] *** hungrydonkey joined
[00:21] *** upupbb-user2 left
[00:23] *** cpan-raku left
[00:23] *** cpan-raku joined
[00:23] *** cpan-raku left
[00:23] *** cpan-raku joined
[00:26] *** Xliff joined
[00:27] <Xliff> m: class A ( has $!a is built; has $.b }; A.new(a => 42, b => 'meow').gist.say

[00:27] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> 3class A7⏏5 ( has $!a is built; has $.b }; A.new(a ␤    expecting any of:␤        generic role␤»

[00:28] <Xliff> m: class A { has $!a is built; has $.b }; A.new(a => 42, b => 'meow').gist.say

[00:28] <camelia> rakudo-moar 439b86095: OUTPUT: «A.new(a => 42, b => "meow")␤»

[00:28] <Xliff> m: class A { has $!a is built; has $1b }; A.new(a => 42, b => 'meow').gist.say

[00:28] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot declare a numeric variable␤at <tmp>:1␤------> 3class A { has $!a is built; has $17⏏5b }; A.new(a => 42, b => 'meow').gist.sa␤»

[00:28] <Xliff> m: class A { has $!a is built; has $!b }; A.new(a => 42, b => 'meow').gist.say

[00:28] <camelia> rakudo-moar 439b86095: OUTPUT: «A.new(a => 42)␤»

[00:31] *** no-n joined
[00:31] *** no-n left
[00:34] *** caterfxo left
[00:36] *** Actualey` left
[00:39] *** caterfxo joined
[00:39] <tbrowder> lizmat: problem was p5 prog was using following pack call: pack(C => 0xAD) and pack was reporting that as one arg instead of two. i changed call to form: pack("

[00:40] <tbrowder> *pack('C', 0xAD) which was accepted.

[00:42] <tbrowder> fyi, original p5 code is at least 5 but mostly 10 years old.

[00:42] *** caterfxo left
[01:11] *** aborazmeh joined
[01:11] *** aborazmeh left
[01:11] *** aborazmeh joined
[01:14] <rypervenche> How can I get a character, for example "\x9F9C", which is 龜, from a string of just the hex number 9F9C? I've tried something like this, but it doesn't work: say "\x[$_]" for "9F9C";

[01:14] <tbrowder> issue filed

[01:16] <tbrowder> m: say \x[9f9c]

[01:16] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say \x[97⏏5f9c]␤    expecting any of:␤        whitespace␤»

[01:16] <tbrowder> m: say "\x[9f9c]"

[01:16] <camelia> rakudo-moar 439b86095: OUTPUT: «龜␤»

[01:17] <rypervenche> I can't figure out how to get the number inside of the [] from a variable.

[01:18] <tbrowder> m:

[01:18] <evalable6> tbrowder, rakudo-moar 439b86095: OUTPUT: «»

[01:19] <tbrowder> i think you have to do some magic...let me see if i can find some old code...

[01:20] *** sena_kun joined
[01:22] *** Altai-man_ left
[01:22] *** Doc_Holliwood left
[01:24] <tbrowder> i found it...give me a few minutes to gist it

[01:26] <rypervenche> Thanks for taking the time to help.

[01:27] <tbrowder> my pleasure (if it works for you--we'll see)...

[01:29] <Xliff> m: "\x[9f9c]".^name.say;

[01:29] <camelia> rakudo-moar 439b86095: OUTPUT: «Str␤»

[01:29] <Xliff> m: "\x[9f9c]".ord.say;

[01:29] <camelia> rakudo-moar 439b86095: OUTPUT: «40860␤»

[01:29] <Xliff> m: "\x[9f9c]".uniname.say;

[01:29] <camelia> rakudo-moar 439b86095: OUTPUT: «CJK UNIFIED IDEOGRAPH-9F9C␤»

[01:30] <Xliff> m: 40860.fmt('%x').say

[01:30] <camelia> rakudo-moar 439b86095: OUTPUT: «9f9c␤»

[01:30] <Xliff> m: "\x[9f9c]b".chars.say;

[01:30] <camelia> rakudo-moar 439b86095: OUTPUT: «2␤»

[01:30] <Xliff> m: "\x[9f9c]b\x[9f9b]".chars.say;

[01:30] <camelia> rakudo-moar 439b86095: OUTPUT: «3␤»

[01:30] <Xliff> m: "\x[9f9c]b\x[9f9b]".say

[01:31] <camelia> rakudo-moar 439b86095: OUTPUT: «龜b龛␤»

[01:31] <Xliff> .ord.say for "\x[9f9c]b\x[9f9b]".chars

[01:31] <evalable6> Xliff, rakudo-moar 439b86095: OUTPUT: «51␤»

[01:31] <Xliff> .ord.say for "\x[9f9c]b\x[9f9b]".split

[01:31] <Xliff> m: .ord.say for "\x[9f9c]b\x[9f9b]".split

[01:31] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot resolve caller split(Str:D: ); none of these signatures match:␤    (Str:D: Regex:D $regex, $limit is copy = Inf;; :$v, :$k, :$kv, :$p, :$skip-empty, *%_ --> Seq:D)␤    (Str:D: Str(Cool) $match;; :$v is copy, :$k, :$kv, :$p, :$skip-empty, *%…»

[01:31] <Xliff> m: .ord.say for "\x[9f9c]b\x[9f9b]".split()

[01:31] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot resolve caller split(Str:D: ); none of these signatures match:␤    (Str:D: Regex:D $regex, $limit is copy = Inf;; :$v, :$k, :$kv, :$p, :$skip-empty, *%_ --> Seq:D)␤    (Str:D: Str(Cool) $match;; :$v is copy, :$k, :$kv, :$p, :$skip-empty, *%…»

[01:31] <Xliff> m: .ord.say for "\x[9f9c]b\x[9f9b]".comb

[01:32] <camelia> rakudo-moar 439b86095: OUTPUT: «40860␤98␤40859␤»

[01:32] <Xliff> ^^ rypervenche 

[01:32] <Xliff> m: .ord.say for "\x[9f9c]b\x[9f9b]".encode

[01:32] <camelia> rakudo-moar 439b86095: OUTPUT: «50␤49␤49␤57␤50␤49␤49␤»

[01:32] <rypervenche> I'm starting with just "9f9c", not "\x9f9c" though.

[01:33] <rypervenche> I'm sourcing a file that has "%u9f9c" and need to turn it into 龜 ultimately.

[01:33] <Xliff> Are you always given two bytes or is this a stream

[01:33] <rypervenche> Sometimes it's multiple characters together.

[01:34] <Xliff> So the file always has "%u<b><b>"?

[01:34] <rypervenche> Yes, or a number of them concatenated together.

[01:35] <tbrowder> the gist i'll point to in a minute hasn't been cleaned up but it was used to help me make a PR for rakudo to handle some special unicode space chars.

[01:35] <tbrowder> it may have what you need in some part of it. just execute it as is and see.

[01:35] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s/'%u'(..)/\x$1/; $a.say

[01:35] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\x'␤at <tmp>:1␤------> 3"%u9f9c%u9f9b%u9f9d"; $a ~~ s/'%u'(..)/\7⏏5x$1/; $a.say␤    expecting any of:␤        infix stopper␤        single quotes␤»

[01:36] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s/'%u'(..)/\\x$1/; $a.say

[01:36] <camelia> rakudo-moar 439b86095: OUTPUT: «Use of Nil in string context␤\x9c%u9f9b%u9f9d␤  in code  at <tmp> line 1␤»

[01:36] <tbrowder> the gist: https://gist.github.com/tbrowder/1312dd6971f2e3bab0f37294e1286434

[01:36] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(..)/\\x$1/; $a.say

[01:36] <camelia> rakudo-moar 439b86095: OUTPUT: «Use of Nil in string context␤\x9c\x9b\x9d␤  in code  at <tmp> line 1␤Use of Nil in string context␤  in code  at <tmp> line 1␤Use of Nil in string context␤  in code  at <tmp> line 1␤»

[01:36] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\\x$1/; $a.say

[01:36] <camelia> rakudo-moar 439b86095: OUTPUT: «Use of Nil in string context␤\x\x\x␤  in code  at <tmp> line 1␤Use of Nil in string context␤  in code  at <tmp> line 1␤Use of Nil in string context␤  in code  at <tmp> line 1␤»

[01:36] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\\x[$1]/; $a.say

[01:36] <camelia> rakudo-moar 439b86095: OUTPUT: «Use of Nil in string context␤\x[]\x[]\x[]␤  in code  at <tmp> line 1␤Use of Nil in string context␤  in code  at <tmp> line 1␤Use of Nil in string context␤  in code  at <tmp> line 1␤»

[01:36] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\\x[$0]/; $a.say

[01:36] <camelia> rakudo-moar 439b86095: OUTPUT: «\x[9f9c]\x[9f9b]\x[9f9d]␤»

[01:37] <tbrowder> let me know if that helps

[01:37] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\\x[$0]/; "$a".say

[01:37] <camelia> rakudo-moar 439b86095: OUTPUT: «\x[9f9c]\x[9f9b]\x[9f9d]␤»

[01:38] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/x[$0]/; "$a".say

[01:38] <camelia> rakudo-moar 439b86095: OUTPUT: «x[9f9c]x[9f9b]x[9f9d]␤»

[01:39] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\x[$0]/; "$a".say

[01:39] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\x'␤at <tmp>:1␤------> 3c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\x[7⏏5$0]/; "$a".say␤    expecting any of:␤        hex character␤        infix stopper␤  …»

[01:39] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\x\[$0\]/; "$a".say

[01:39] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\x'␤at <tmp>:1␤------> 3f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/\7⏏5x\[$0\]/; "$a".say␤    expecting any of:␤        infix stopper␤        single quotes␤»

[01:40] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ chr($0) }/; "$a".say

[01:40] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot convert string to number: trailing characters after number in '039⏏5f9c' (indicated by ⏏)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:40] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ chr($0.fmt('%d).Int) }/; "$a".say

[01:40] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3...)/{ chr($0.fmt('%d).Int) }/; "$a".say7⏏5<EOL>␤    expecting …»

[01:40] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ chr($0.fmt('%d).Int) }/; "$a".say

[01:40] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3...)/{ chr($0.fmt('%d).Int) }/; "$a".say7⏏5<EOL>␤    expecting …»

[01:40] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ chr($0.fmt('%d').Int) }/; "$a".say

[01:40] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot stringify this object of type VMArray (BOOTArray)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:40] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ chr($0.Int.fmt('%d')) }/; "$a".say

[01:40] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot stringify this object of type VMArray (BOOTArray)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:41] <Xliff> Well, that's weird.

[01:41] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Int }/; "$a".say

[01:41] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot convert string to number: trailing characters after number in '039⏏5f9c' (indicated by ⏏)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:41] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Str.,Int }/; "$a".say

[01:41] <camelia> rakudo-moar 439b86095: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Str.7⏏5,Int }/; "$a".say␤»

[01:42] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Str.Int }/; "$a".say

[01:42] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot convert string to number: trailing characters after number in '039⏏5f9c' (indicated by ⏏)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:42] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.say }/; "$a".say

[01:42] <camelia> rakudo-moar 439b86095: OUTPUT: «｢9f9c｣␤｢9f9b｣␤｢9f9d｣␤TrueTrueTrue␤»

[01:42] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Int.say }/; "$a".say

[01:42] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot convert string to number: trailing characters after number in '039⏏5f9c' (indicated by ⏏)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:42] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Str.say }/; "$a".say

[01:42] <camelia> rakudo-moar 439b86095: OUTPUT: «9f9c␤9f9b␤9f9d␤TrueTrueTrue␤»

[01:42] <Xliff> m: my $a = "%u9f9c%u9f9b%u9f9d"; $a ~~ s:g/'%u'(....)/{ $0.Str.fmt('%x').say }/; "$a".say

[01:42] <camelia> rakudo-moar 439b86095: OUTPUT: «Cannot stringify this object of type VMArray (BOOTArray)␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:43] <rypervenche> Oh geez...

[01:43] <rypervenche> m: say ("0x" ~ $_).chr for "9f9c";

[01:43] <camelia> rakudo-moar 439b86095: OUTPUT: «龜␤»

[01:43] <Xliff> Hah!

[01:43] <rypervenche> tbrowder: Thanks. That put me in the right direction.

[01:52] <tbrowder> good deal! raku is kool, but i have trouble getting my head around the fact that all integers become decimal in native form regardless of how we input them. then we can show them in different base.

[01:52] <tbrowder> *bases

[01:59] *** Kaiepi left
[02:00] *** Kaiepi joined
[02:21] *** hungryd23 joined
[02:24] *** hungrydonkey left
[02:30] *** cpup left
[02:31] *** cpup joined
[02:37] *** aborazmeh left
[02:45] *** upupbb-user2 joined
[02:54] *** xelxebar left
[02:56] *** xelxebar joined
[03:11] *** hungryd23 left
[03:19] *** Altai-man_ joined
[03:22] *** sena_kun left
[03:27] *** hungrydonkey joined
[03:46] *** PacoLinux left
[04:50] <Geth> ¦ doc: 66c0269c26 | cfa++ | 2 files

[04:50] <Geth> ¦ doc: Learn a code word; fix typo.

[04:50] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/66c0269c26

[04:51] *** hungrydonkey left
[04:52] *** hungrydonkey joined
[04:55] *** pilne left
[05:07] *** Doc_Holliwood joined
[05:17] *** Xliff left
[05:20] *** sena_kun joined
[05:22] *** Altai-man_ left
[05:26] *** wamba joined
[05:29] *** yht joined
[05:48] *** hungryd27 joined
[05:48] *** hungrydonkey left
[06:11] *** hungrydonkey joined
[06:14] *** hungryd27 left
[06:30] *** hungryd15 joined
[06:34] *** hungrydonkey left
[06:35] *** ensamvarg joined
[06:38] *** [Sno] left
[06:40] *** [Sno] joined
[07:19] <Geth> ¦ doc: f299cff716 | Tinmarino++ | 5 files

[07:19] <Geth> ¦ doc: Rename: Perl 5 -> Perl (about)

[07:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f299cff716

[07:19] <Geth> ¦ doc: 1291bd1661 | Tinmarino++ | doc/Language/traps.pod6

[07:19] <Geth> ¦ doc: Tipo

[07:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1291bd1661

[07:19] <Geth> ¦ doc: 53cdd98060 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 5 files

[07:19] <Geth> ¦ doc: Merge pull request #3277 from tinmarino/merge_perl5_5

[07:19] <linkable6> Link: https://docs.raku.org/language/traps

[07:19] *** Altai-man_ joined
[07:19] <Geth> ¦ doc: 

[07:19] <Geth> ¦ doc: Rename: Perl 5 -> Perl (about) (5/6)

[07:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/53cdd98060

[07:21] <Geth> ¦ doc: eec5c7aae1 | Tinmarino++ | 6 files

[07:21] <Geth> ¦ doc: Rename: Perl 5 -> Perl (in 5to6)

[07:21] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/eec5c7aae1

[07:21] <Geth> ¦ doc: 152bed7e7e | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 6 files

[07:21] <Geth> ¦ doc: Merge pull request #3273 from tinmarino/merge_perl5_1

[07:21] <Geth> ¦ doc: 

[07:21] <Geth> ¦ doc: Change Perl 5 to Perl (1/6)

[07:21] <Geth> ¦ doc: Thanks!

[07:21] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/152bed7e7e

[07:22] *** sena_kun left
[07:33] *** [Sno] left
[07:42] *** sjm_uk joined
[08:07] *** pecastro joined
[08:10] *** stoned75_ left
[08:11] *** stoned75 left
[08:11] *** [Sno] joined
[08:11] *** abraxxa joined
[08:15] *** abraxxa left
[08:16] *** stux|RC left
[08:16] *** abraxxa joined
[08:18] *** imcsk8 left
[08:19] *** imcsk8 joined
[08:21] *** stux|RC joined
[08:25] *** stoned75 joined
[08:25] *** stoned75_ joined
[08:30] <stoned75> m: say "abcde".comb(/./, :match)

[08:30] <camelia> rakudo-moar 439b86095: OUTPUT: «(｢a｣ ｢b｣ ｢c｣ ｢d｣ ｢e｣)␤»

[08:31] *** stoned75 left
[08:36] *** dakkar joined
[08:37] *** upupbb-user2 left
[08:37] *** PacoLinux joined
[08:40] *** stoned75 joined
[08:42] *** PacoLinux left
[08:51] *** rindolf joined
[08:56] *** sjm_uk left
[09:03] *** hungrydonkey joined
[09:05] *** yht left
[09:06] *** hungryd15 left
[09:08] *** hungryd29 joined
[09:09] *** Manifest0 left
[09:10] *** Manifest0 joined
[09:10] *** Altai-man_ left
[09:11] *** hungrydonkey left
[09:18] *** hungrydonkey joined
[09:19] *** hungryd29 left
[09:29] *** stoned75_ left
[09:29] *** stoned75 left
[09:31] *** camelCaser joined
[09:39] *** stoned75 joined
[09:39] *** stoned75_ joined
[09:43] *** chloekek joined
[09:43] *** mowcat joined
[09:45] *** ensamvarg left
[09:47] *** Doc_Holliwood left
[09:48] *** yht joined
[09:50] *** tejr joined
[09:59] *** [Sno] left
[10:02] *** rindolf left
[10:12] *** chloekek left
[10:15] *** mowcat left
[10:24] *** [Sno] joined
[10:33] *** upupbb-user2 joined
[10:41] *** aborazmeh joined
[10:41] *** aborazmeh left
[10:41] *** aborazmeh joined
[10:49] *** wamba left
[10:54] *** rindolf joined
[10:59] *** Kaiepi left
[10:59] *** Kaiepi joined
[11:14] *** wamba joined
[11:17] *** aborazmeh left
[11:25] *** upupbb-user2 left
[11:25] *** [Sno] left
[11:27] *** [Sno] joined
[11:28] *** chloekek joined
[11:39] *** xi left
[11:41] *** xi joined
[11:47] *** PacoLinux joined
[11:48] *** ufobat joined
[12:04] *** upupbb-user2 joined
[12:06] *** epony left
[12:08] *** hungrydonkey left
[12:13] *** hungrydonkey joined
[12:30] *** ensamvarg joined
[12:39] *** lnx joined
[12:49] *** hungrydonkey left
[12:49] *** hungrydonkey joined
[12:56] *** upupbb-user2 left
[13:43] *** caterfxo joined
[14:02] *** sena_kun joined
[14:02] *** sena_kun left
[14:03] *** sena_kun joined
[14:14] *** yht left
[14:32] *** kawaii joined
[14:35] <kawaii> Hello, I seem to be having an issue where a live supply is feeding me historical events from a tap? :)

[14:35] <kawaii> https://github.com/myisha/p6-zoe-voteban/blob/master/voteban.p6#L57-L83

[14:35] <kawaii> The two `add-reaction` events from the first block of code are being picked up by the listener in the second block and we're not sure why :)

[14:35] <kawaii> Even if I were to add a lengthy break, such as a sleep for 5 seconds, between the two blocks, the historical events are still captured

[14:36] <kawaii> https://github.com/shuppet/p6-api-discord/blob/messages/lib/API/Discord/Message.pm6#L150 <- here is where the tap is created in the module we're using

[14:41] <Geth> ¦ doc: 658059184d | Coke++ | 2 files

[14:41] <Geth> ¦ doc: whitespace

[14:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/658059184d

[14:41] <Geth> ¦ doc: 14468dfb7e | Coke++ | doc/Language/objects.pod6

[14:41] <Geth> ¦ doc: fix example compilation

[14:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/14468dfb7e

[14:41] <Geth> ¦ doc: 0588b51f94 | Coke++ | xt/headings.t

[14:41] <Geth> ¦ doc: allow capitalized Perl in headings

[14:41] <linkable6> Link: https://docs.raku.org/language/objects

[14:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0588b51f94

[14:45] *** natrys joined
[14:53] *** pilne joined
[15:01] *** wamba left
[15:02] *** wamba joined
[15:02] *** lucasb joined
[15:18] *** rindolf left
[15:18] <Geth> ¦ doc: Kaiepi++ created pull request #3279: Document how `is raw` behaves with slurpy list parameters

[15:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3279

[15:19] *** Altai-man_ joined
[15:19] *** caterfxo is now known as itried

[15:21] *** itried left
[15:21] *** sena_kun left
[15:22] *** caterfxo joined
[15:22] *** rindolf joined
[15:22] *** Actualeyes joined
[15:26] *** PacoLinux left
[15:34] *** hungryd76 joined
[15:37] *** hungrydonkey left
[15:39] *** Doc_Holliwood joined
[15:40] *** wamba left
[15:54] *** upupbb-user1 joined
[15:58] <Geth> ¦ doc: 4e84900c2d | (Tom Browder)++ (committed using GitHub Web editor) | doc/Type/IO/Spec/Unix.pod6

[15:58] <Geth> ¦ doc: Correct typo

[15:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/4e84900c2d

[15:58] <linkable6> Link: https://docs.raku.org/type/IO::Spec::Unix

[16:01] *** wamba joined
[16:05] *** dataangel joined
[16:11] *** natrys left
[16:14] *** Kaiepi left
[16:15] *** Kaiepi joined
[16:27] <jdv79> [Coke]: when did you stop commuting down here?

[16:28] <jdv79> i started wfh on the 11th

[16:29] *** cpan-raku left
[16:29] *** cpan-raku joined
[16:29] *** cpan-raku left
[16:29] *** cpan-raku joined
[16:41] <[Coke]> I was in NYC March 2-3, basically sprinted out of the city that afternoon.

[16:41] <[Coke]> (barely caught the subway to penn station, had to run through the concourse there to catch my train)

[16:41] <[Coke]> Got out just in time, I think.

[16:41] <[Coke]> while i was there, $dayjob had already started cancelling non-essential travel, now it's *all* shutdown.

[16:51] *** upupbb-user1 left
[17:17] *** mowcat joined
[17:20] *** sena_kun joined
[17:21] *** Altai-man_ left
[17:41] *** natrys joined
[17:42] *** dakkar left
[17:50] *** hungryd76 left
[18:04] *** grayrider left
[18:13] <rbt> Weird.

[18:13] <rbt> echo "message" | r -e 'use v6d; sub MAIN() {my $msg =  slurp(:bin); say $msg.^name;}'

[18:13] <rbt> OUT: Str

[18:13] <rbt> echo "message" | r -e 'use v6d; my $msg =  slurp(:bin); say $msg.^name;'

[18:13] <rbt> OUT: Buf[uint8]

[18:14] <rbt> r --version

[18:14] <rbt> This is Rakudo version 2020.02.1 built on MoarVM version 2020.02.1

[18:14] <rbt> implementing Raku 6.d.

[18:16] *** ensamvarg left
[18:19] <[Coke]> m: sub MAIN() { say $*ARGFILES.^name}

[18:19] <camelia> rakudo-moar 13559242f: OUTPUT: «IO::ArgFiles␤»

[18:20] <[Coke]> m: say $*ARGFILES.^name

[18:20] <camelia> rakudo-moar 13559242f: OUTPUT: «IO::Handle␤»

[18:20] <[Coke]> rbt: ^^

[18:21] <Doc_Holliwood> muh. why can't I have "123".tail, why do i have to write "123".substr(*-1,1) ?

[18:21] <rbt> So I guess slurp(:bin) on Argfiles isn't a :bin result?

[18:22] <Doc_Holliwood> whining from a high  horse I know =)

[18:23] <rbt> Still seems unexpected.

[18:26] <Geth> ¦ doc: 7fd74bb9c1 | Coke++ | 2 files

[18:26] <Geth> ¦ doc: Update some executable invocations

[18:26] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/7fd74bb9c1

[18:26] <Geth> ¦ doc: 42534ccdde | Coke++ | doc/Type/independent-routines.pod6

[18:26] <Geth> ¦ doc: Update some compiler language names

[18:26] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/42534ccdde

[18:26] <linkable6> Link: https://docs.raku.org/type/independent-routines

[18:27] <[Coke]> rbt: yah, that could still be a bug, just giving you more deets.

[18:27] <[Coke]> *details

[18:28] <rbt> Thanks. I've started on an issue submission.

[18:28] <[Coke]> m: "123".comb.tail

[18:28] <camelia> rakudo-moar 13559242f: ( no output )

[18:28] <[Coke]> m: "123".comb.tail.say

[18:28] <camelia> rakudo-moar 13559242f: OUTPUT: «3␤»

[18:28] <[Coke]> Doc_Holliwood: ^^

[18:29] <[Coke]> rbt++

[18:30] <Doc_Holliwood> I know Coke.

[18:31] <Doc_Holliwood> why is it that Coke from a small glass bottle tastes so much better than from a 1.5l PET?

[18:32] <[Coke]> in some cases, different sweetener.

[18:35] <Doc_Holliwood> There are no cases. I only drink Classic

[18:35] <Doc_Holliwood> Everything else is devils work

[18:36] <[Coke]> different regions can have different bottlers; but if it's all the same bottler, than I don't know why the glass tastes better. I prefer cans, these days

[18:36] <[Coke]> I am 100% team Coke Zero these days

[18:36] <Doc_Holliwood> heretic!

[18:36] *** thundergnat joined
[18:37] <[Coke]> In the states, we occasionally get "mexican coke" which cane sugar instead of HFCS.

[18:37] <[Coke]> eh. for a while it was even caff. free.

[18:37] <[Coke]> diabetes and tachycardia restrict my options sometimes. :)

[18:37] <thundergnat> m: say "123".substr(*-1) # FWIW, if you only want the last character(s), you don't need to supply a second argument

[18:37] <camelia> rakudo-moar 13559242f: OUTPUT: «3␤»

[18:38] <Doc_Holliwood> really, I tried that.

[18:38] <Doc_Holliwood> at least I think I did

[18:38] <Doc_Holliwood> allright, cool.

[18:38] <Doc_Holliwood> thanks

[18:39] <thundergnat> Also, maybe check out https://modules.raku.org/search/?q=String%3A%3ASplice for your string slicing and dicing needs. (shameless plug)

[18:39] *** thundergnat left
[18:41] <Doc_Holliwood> yeah, diabetes sucks. i would collapse without ready sugar. my whole organism runs on it

[19:01] <Doc_Holliwood> m: multi sub infix:<*>( Block $b, Int $i ) { &$b($_) for ^$i; }; { .say } * 3

[19:01] <camelia> rakudo-moar 13559242f: OUTPUT: «WARNINGS for <tmp>:␤0␤1␤2␤Useless use of "*" in expression "{ .say } * 3" in sink context (line 1)␤»

[19:01] <Doc_Holliwood> m: multi sub infix:<*>( Block $b, Int $i ) { &$b($_) for ^$i; }; $ = { .say } * 3

[19:01] <camelia> rakudo-moar 13559242f: OUTPUT: «0␤1␤2␤»

[19:01] <Doc_Holliwood> how do i get rid of that sink error?

[19:04] <jjatria> I'm using NativeCall and I have a function that returns a Pointer[CStruct], but if I try to modify it like I would do in C, I get an error saying it is immutable. Is there a way to make it mutable?

[19:04] <jjatria> The function in question: https://gitlab.com/jjatria/raku-termbox/-/blob/master/lib/Termbox.pm6#L201-202

[19:06] *** previouslykjs joined
[19:08] *** Altai-man_ joined
[19:10] *** sena_kun left
[19:12] *** caterfxo left
[19:22] *** kawaii left
[19:23] *** wamba left
[19:27] *** Black_Ribbon joined
[20:00] *** wamba joined
[20:05] *** devmikey joined
[20:10] *** abraxxa left
[20:11] *** abraxxa joined
[20:15] *** previouslykjs left
[20:22] <Geth> ¦ doc: uzluisf++ created pull request #3281: Document that Str.contains now also can take a Regex

[20:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3281

[20:23] <AlexDaniel> it can??

[20:24] <AlexDaniel> what!

[20:24] <jnthn> Can it?

[20:24] <AlexDaniel> m: say ‘foo’.contains(/f./)

[20:24] <jnthn> Why?

[20:24] <camelia> rakudo-moar efab398e2: OUTPUT: «True␤»

[20:24] <AlexDaniel> 6c: say ‘foo’.contains(/f./)

[20:24] <committable6> AlexDaniel, https://gist.github.com/5e6f433a9d0bd57dd99c37a49b5fef04

[20:25] <AlexDaniel> let's see…

[20:25] <AlexDaniel> bisect: say ‘foo’.contains(/f./)

[20:25] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=efab398). Old exit code: 1

[20:25] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/1971a5eb895e96ee7849051c73c1c3c6

[20:25] <bisectable6> AlexDaniel, (2020-02-06) https://github.com/rakudo/rakudo/commit/c3c5dae1230dda41fca5e3ecce5616f2367ba17c

[20:26] <jnthn> Ah, hm.

[20:26] <jnthn> Well yeah, I guess that saves also populating $/

[20:26] <AlexDaniel> jnthn: interesting, yeah, it's a long-standing issue that whenever you needed a regex you'd end up with sloooow code because of the match objects

[20:26] <AlexDaniel> so I guess that's now fixed?

[20:27] <jnthn> Well, in the case you only want to ask "does this match somewhere" and have no further info on where...

[20:28] <AlexDaniel> I remember there was a discussion about this, but somehow “just make .contains accept regexes” wasn't a good option

[20:28] <jnthn> I'd not assume any particular speedup without measuring though.

[20:28] <jnthn> You don't get rid of the overhead of setting up the regex engine, for example.

[20:29] <AlexDaniel> https://github.com/rakudo/rakudo/issues/2268

[20:32] <AlexDaniel> “Personally, I found the addition of .contains, .starts-with, and friends a bit frivolous, but now that those string-searching methods are here, it seems almost obvious to let them accept all regex adverbs that make logical sense for them.”

[20:32] <AlexDaniel> heh

[20:34] <lizmat> and another Rakudo Weekly news hits the Net: https://rakudoweekly.blog/2020/03/23/2020-12-jvm-nullification/

[20:36] <Geth> ¦ doc: 0ac130fe92 | (Luis F. Uceta)++ | 2 files

[20:36] <Geth> ¦ doc: Document that Str.contains now also can take a Regex

[20:36] <Geth> ¦ doc: 

[20:36] <Geth> ¦ doc: refs: https://github.com/Raku/doc/issues/3229

[20:36] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0ac130fe92

[20:36] <Geth> ¦ doc: ee9a576a7b | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[20:36] <Geth> ¦ doc: Merge pull request #3281 from uzluisf/master

[20:36] <Geth> ¦ doc: 

[20:36] <Geth> ¦ doc: Document that Str.contains now also can take a Regex

[20:36] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ee9a576a7b

[20:41] <AlexDaniel> lizmat: nice weekly!

[20:46] *** wamba left
[20:47] <Doc_Holliwood> can i iterate a shaped array shape-wise?

[20:50] <AlexDaniel> lizmat: did you want to say that .contains now accepts a regex? :)

[20:53] *** Black_Ribbon left
[20:54] *** sjm_uk joined
[21:09] *** sena_kun joined
[21:10] *** Altai-man_ left
[21:20] *** natrys left
[21:25] *** rindolf left
[21:27] *** astronavt joined
[21:33] *** natrys joined
[21:33] *** natrys left
[21:33] *** astronavt left
[21:46] <chloekek> p6: .say for <a b> Xx <2 3>

[21:46] <camelia> rakudo-moar efab398e2: OUTPUT: «aa␤aaa␤bb␤bbb␤»

[21:46] <chloekek> p6: .say for <a b> Xxx <2 3>

[21:46] <camelia> rakudo-moar efab398e2: OUTPUT: «(a a)␤(a a a)␤(b b)␤(b b b)␤»

[21:56] *** HarmtH joined
[22:00] <chloekek> p6: say [×]  # get 1 but only use characters consisting of straight lines

[22:00] <camelia> rakudo-moar efab398e2: OUTPUT: «1␤»

[22:01] <chloekek> p6: say [+]

[22:01] <camelia> rakudo-moar efab398e2: OUTPUT: «0␤»

[22:01] <chloekek> p6: say [+] eqv ([×]) - [×]

[22:01] <camelia> rakudo-moar efab398e2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    eqv used at line 1␤␤»

[22:02] <chloekek> Ah the precedence of [×] is quite annoying for that purpose.

[22:02] <chloekek> p6: say [[×]][[+]] - [×]

[22:02] <camelia> rakudo-moar efab398e2: OUTPUT: «0␤»

[22:03] <tobs> p6: say ([+]) eqv ([×]) - [×]

[22:03] <camelia> rakudo-moar efab398e2: OUTPUT: «True␤»

[22:03] <chloekek> (…) are not straight lines, but […][[+]] is ok

[22:04] <chloekek> Similar to the Perl solution by D. Conway: […]->[//]

[22:04] <tobs> oh, wasn't aware of what you're doing

[22:07] <chloekek> p6: say [[×]][[+]] - $_ for (0, 1)  # logical not

[22:07] <camelia> rakudo-moar efab398e2: OUTPUT: «1␤0␤»

[22:08] <chloekek> Combine with | to get logical nor, and now you can make all logic gates.

[22:08] <chloekek> I mean ||

[22:10] <chloekek> What’s cool is that Z and X are allowed :)

[22:24] *** girafe joined
[22:25] *** __jrjsmrtn__ left
[22:25] <MasterDuke> fyi, a HN thread about strings and how unicode is hard that doesn't yet have a raku comment https://news.ycombinator.com/item?id=22652130

[22:26] *** __jrjsmrtn__ joined
[22:30] *** aborazmeh joined
[22:31] *** aborazmeh left
[22:31] *** aborazmeh joined
[22:32] *** upupbb-user1 joined
[22:36] *** yht joined
[22:46] *** mtj_ left
[22:52] *** mowcat left
[22:58] *** sena_kun left
[23:09] <cpan-raku> New module released to CPAN! Colorizable (0.1.0) by 03UZLUISF

[23:09] *** aborazmeh left
[23:13] *** sjm_uk left
[23:14] *** aborazmeh joined
[23:14] *** aborazmeh left
[23:14] *** aborazmeh joined
[23:19] *** rbt left
[23:20] *** rbt joined
[23:28] *** chloekek left
[23:32] *** aborazmeh left
[23:39] *** xelxebar left
[23:43] *** xelxebar joined
[23:43] *** AlexDaniel left
[23:58] *** pecastro left
