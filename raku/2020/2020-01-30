[00:06] *** aborazmeh joined
[00:06] *** aborazmeh left
[00:06] *** aborazmeh joined
[00:08] <vrurg> guifa++

[00:10] <vrurg> guifa: what's the subject?

[00:11] *** Doc_Holliwould left
[00:11] <guifa> vrurg: well, the title is “Going International in Raku”.  I’m not creative with titles :-)

[00:11] *** wildtrees_ joined
[00:11] *** titsuki left
[00:11] *** titsuki_ joined
[00:12] <guifa> Basically a “here’s the state of international stuff in Raku, and why Raku makes doing this otherwise super complicated stuff insanely easy"

[00:12] * vrurg isn't creative too. I'm totally fine about both facts!

[00:12] <vrurg> :D

[00:13] <cpan-raku> New module released to CPAN! Pretty::Table (0.0.1) by 03UZLUISF

[00:13] <guifa> I think some of the big stuff to takl about will be the tokens

[00:13] <vrurg> I hope to get my current project good enough on time to have a subject for a talk too.

[00:13] *** pecastro left
[00:13] *** NODE left
[00:14] <vrurg> Grammar tokens or ...??

[00:14] <guifa> Being able to just say <local-number> and have it recognize 12,349 and determine if that’s 12 thousand-ish or 12-ish will really make folks’ lives easier

[00:14] *** wildtrees left
[00:14] <guifa> Yeah, although I’ve been writing them so they can be used in adhoc regexen and grammars

[00:14] *** NODE joined
[00:15] <guifa> CLDR has some cool other stuff — like you’ll be able to use <local-alpha> and limit yourself to the letters commonly used in the language, rather than any <alpha>

[00:15] <vrurg> Aha... I just meant *that* tokens as terminology is my weak point. It could have been some other tokens as well. :)

[00:16] <vrurg> guifa: Ok, don't expose all the secrets accidentally! Keep the suspense!

[00:16] <guifa> Haha these are all things that show up in my README.md ;-)

[00:16] *** lucasb left
[00:18] * vrurg imagines guifa entering the stage, opening the README and having an epic speach of: "Just read it through!" :D :D :D 

[00:18] <guifa> I actually had a long chat with tchrist about two months ago, I’m going to try to revive some of his work in Lingua:: for identifying languages too.  Maybe I’ll even convince him to come to the darkside

[00:18] <guifa> vrurg: that’s what I do for the first day of class with my syllabus.  “READ IT, I will not answer your emails if they can be answered based on this document” haha

[00:19] *** Kaeipi is now known as Kaiepi

[00:19] <vrurg> guifa: Ok, you definitely got the first listener on my side! :)

[00:22] <guifa> vrurg: are you going to Perl/Rakucon in houston?

[00:23] <vrurg> guifa: yes, unless my boss reject the budget.

[00:24] <guifa> Awesome.  Thankfully I have family there so I think work will cover all of it

[00:27] *** aborazmeh_ joined
[00:27] *** aborazmeh_ left
[00:27] *** aborazmeh_ joined
[00:28] *** aborazmeh left
[00:28] *** aborazmeh_ is now known as aborazmeh

[00:30] *** molaf joined
[00:34] *** aborazmeh left
[00:47] *** sena_kun left
[00:50] *** Xliff joined
[00:57] *** mowcat left
[01:01] *** sena_kun joined
[01:03] *** mahmudov left
[01:15] *** epony left
[01:16] *** epony joined
[01:24] *** wildtrees_ left
[01:29] *** gabiruh_ joined
[01:30] *** gabiruh left
[01:33] <Geth> ¦ doc: uzluisf++ created pull request #3192: Mention that the colon syntax on $.foo method is now supported

[01:33] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3192

[01:39] *** melezhik left
[02:18] *** molaf left
[02:26] *** marcusr left
[02:27] *** marcusr joined
[02:31] *** molaf joined
[02:45] *** sena_kun left
[02:50] *** evalable6 left
[02:50] *** bloatable6 left
[02:51] *** tellable6 left
[02:51] *** unicodable6 left
[02:51] *** shareable6 left
[02:51] *** benchable6 left
[02:51] *** greppable6 left
[02:52] *** nativecallable6 left
[02:52] *** notable6 left
[02:56] *** ensamvarg joined
[03:00] *** sena_kun joined
[03:38] *** Redfoxmoon left
[03:41] *** angelds joined
[03:46] *** unicodable6 joined
[03:48] *** tellable6 joined
[03:48] *** notable6 joined
[03:48] *** shareable6 joined
[04:00] <uzl[m]> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates;

[04:00] <camelia> rakudo-moar b6fa5f5dd: OUTPUT: «(end end end end)␤»

[04:00] <uzl[m]>  * m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates>>.signature;

[04:00] <uzl[m]> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates>>.signature;

[04:00] <camelia> rakudo-moar b6fa5f5dd: OUTPUT: «((Any:U: *%_ --> 0) (Any:D: *%_) (A: $val, *%_) (A: *%_))␤»

[04:04] <uzl[m]> How do I grep the method 'end' specific to the type A?

[04:15] <AlexDaniel`> sena_kun well, at the same time it's not hard to do it

[04:15] <AlexDaniel`> sena_kun same command just with a different version ;)

[04:16] <AlexDaniel`> But hey it's almost February now

[04:17] *** gabiruh_ left
[04:18] *** gabiruh joined
[04:20] *** molaf left
[04:44] *** sena_kun left
[04:45] *** aindilis left
[04:46] *** benchable6 joined
[04:46] *** greppable6 joined
[04:47] *** evalable6 joined
[04:48] *** nativecallable6 joined
[04:51] *** robertle_ joined
[04:52] *** titsuki_ left
[04:54] *** robertle left
[05:00] *** sena_kun joined
[05:00] *** rindolf joined
[05:06] *** aindilis joined
[05:11] *** NODE left
[05:11] *** NODE joined
[05:19] *** aborazmeh joined
[05:19] *** aborazmeh left
[05:19] *** aborazmeh joined
[05:46] *** bloatable6 joined
[06:07] *** veesh_ joined
[06:10] *** jmerelo joined
[06:10] *** veesh left
[06:11] *** veesh_ is now known as veesh

[06:16] *** Doc_Holliwould joined
[06:20] *** sauvin joined
[06:22] *** aborazmeh left
[06:25] *** marcusr left
[06:26] *** marcusr joined
[06:32] <bartolin> sena_kun: (jvm build) we *could* remove the 'allow_failures' configuration for the jvm backend for travis. We don't attempt to run tests for the jvm backend, so a travis failure indicates a build error.

[06:37] <bartolin> but doing so would raise the question who is willing to fix the breakage ...

[06:39] <bartolin> no offense meant: given the limited resources it's kind of logical to let the core devs focus on the main backend

[06:43] <bartolin> I'm trying to fix eventual breakage; but in my own time: I'm only able to look once in a while

[06:45] *** sena_kun left
[07:00] *** sena_kun joined
[07:00] *** ensamvarg left
[07:17] <cpan-raku> New module released to CPAN! Trait::Traced (0.3.0) by 03KAIEPI

[07:19] <Kaiepi> ^ makes trace output handling customizable! (needs documentation though)

[07:23] *** Doc_Holliwould left
[07:27] *** ayerhart left
[07:32] <cpan-raku> New module released to CPAN! Trait::Traced (0.3.1) by 03KAIEPI

[07:34] *** ayerhart joined
[07:44] *** Kaiepi left
[07:44] *** Kaiepi joined
[07:50] <holyghost> |I've got some new methods into p6-Game-Bayes and p6-Game-Stats, I'll upload to ithub later

[07:51] <holyghost> An approximation of posterior probability and frequency analysis 

[07:51] <holyghost> The code is now on Xliff's server

[07:52] <holyghost> I'm at page 80 of the book "Monte Carlo methods for Bayesian Computing", that's where everything comes from

[07:56] *** Redfoxmoon joined
[08:04] *** sno left
[08:05] *** aluaces left
[08:09] *** Redfoxmoon left
[08:10] *** Redfoxmoon joined
[08:20] *** wamba joined
[08:33] *** pierrot joined
[08:33] *** zakharyas joined
[08:33] *** Doc_Holliwould joined
[08:40] *** dakkar joined
[08:45] *** kensanata joined
[08:46] *** sena_kun left
[09:02] *** sena_kun joined
[09:11] *** AlexDaniel joined
[09:11] *** AlexDaniel left
[09:11] *** AlexDaniel joined
[09:15] *** Doc_Holliwould left
[09:15] <AlexDaniel> .

[09:21] *** pecastro joined
[09:29] <holyghost> Maybe I'm going to do operating systems in perl6, but I'm a lost soul on raku

[09:29] <holyghost> I tried pico.vub.ac.be for an Amiga NetBSD

[09:29] <holyghost> Fact is, I'm trying to port NetBSD to Amiga 2000's

[09:30] <holyghost> non-MMU

[09:30] <holyghost> It'll be called ANBSD

[09:33] <holyghost> It should be a binary, where you write your OS code in perl6 then have e.g. a non VM thing

[09:34] <holyghost> which is of course somewhat ridiculous

[09:34] <holyghost> An amia 2000 has 1Mb of RAM for example

[09:36] <holyghost> _And_ perl6 should be compiled to m68k-coff

[09:41] <holyghost> e.g. a perl6 compiler instead of a VM for building with gcc's -D_KERNEL flag

[09:43] <holyghost> An elf or coff format should be compiled straight out of perl6

[09:43] <holyghost> then compile e.g. with a intermediate API/kernel API to a format thereon

[09:44] <holyghost> Note API

[09:46] <holyghost> An API to output kernels for coff and elf, that's what I would want

[09:47] <holyghost> then an API for compiling instead of just using perl6's system

[09:47] <holyghost> and so on :-)

[09:47] *** domidumont joined
[09:53] *** samebchase-3 joined
[09:54] *** samebchase- left
[09:56] *** samebchase-3 is now known as samebchase-

[10:03] <holyghost> Basically you want raku to compile to several machine lanuguaes with moarVM

[10:04] <holyghost> and a VM is too heavy weight for old machines

[10:13] *** xinming_ left
[10:13] *** xinming_ joined
[10:27] *** holyghost left
[10:32] *** aluaces joined
[10:32] *** cpan-raku left
[10:33] *** bbkr joined
[10:36] *** cpan-raku joined
[10:36] *** cpan-raku left
[10:36] *** cpan-raku joined
[10:39] <bbkr> 2020.01 release is awesome! We got 25% average performance improvement on production environments. Big thanks to all Raku devs.

[10:41] <sena_kun> \o/

[10:46] *** sena_kun left
[10:49] *** Doc_Holliwould joined
[10:57] <El_Che> bbkr: if ok to do so, please do tell (and blog)!

[10:59] *** sena_kun joined
[11:11] *** domidumont left
[11:12] *** ensamvarg joined
[11:18] *** shred_alert joined
[11:21] *** kensanata left
[11:23] *** Demos[m] left
[11:28] *** Doc_Holliwould left
[11:32] *** kensanata joined
[11:46] *** CIAvash left
[11:46] *** Nasrudin left
[11:50] *** Doc_Holliwould joined
[11:53] *** wamba left
[11:55] *** epony left
[12:08] *** epony joined
[12:13] *** holyghost joined
[12:18] *** abraxxa left
[12:19] *** abraxxa joined
[12:35] *** zakharyas left
[12:35] *** lucasb joined
[12:36] *** CIAvash joined
[12:38] *** mowcat joined
[12:45] *** sena_kun left
[12:56] *** titsuki_ joined
[12:58] *** Doc_Holliwould left
[13:00] *** sena_kun joined
[13:00] *** aborazmeh joined
[13:00] *** aborazmeh left
[13:00] *** aborazmeh joined
[13:09] *** mowcat left
[13:09] <cpan-raku> New module released to CPAN! cro (0.8.0.2) by 03JNTHN

[13:09] <cpan-raku> New module released to CPAN! Cro::WebSocket (0.8.2.2) by 03JNTHN

[13:09] <cpan-raku> New module released to CPAN! Cro::TLS (0.8.2.2) by 03JNTHN

[13:09] <cpan-raku> New module released to CPAN! Cro::HTTP (0.8.2.2) by 03JNTHN

[13:09] <cpan-raku> New module released to CPAN! Distribution::Builder::MakeFromJSON (0.5) by 03NINE

[13:27] *** domidumont joined
[13:30] *** Doc_Holliwould joined
[13:36] *** xinming_ left
[13:39] *** xinming_ joined
[13:43] *** zakharyas joined
[13:47] *** aborazmeh left
[13:47] *** zakharyas left
[13:50] *** zakharyas joined
[13:57] *** rindolf left
[14:00] <abraxxa> jnthn++

[14:07] <abraxxa> jnthn: upgrade successful

[14:10] *** rindolf joined
[14:12] *** holli joined
[14:13] *** Doc_Holliwould left
[14:20] *** cpan-raku left
[14:20] *** bbkr left
[14:22] *** abraxxa left
[14:23] *** jmerelo left
[14:24] *** abraxxa joined
[14:24] *** cpan-raku joined
[14:24] *** cpan-raku left
[14:24] *** cpan-raku joined
[14:27] *** angelds left
[14:38] *** daxim left
[14:44] *** daxim joined
[14:46] *** sena_kun left
[14:56] *** holli left
[14:59] *** Xliff_ joined
[14:59] <Xliff_> nine: https://gist.github.com/Xliff/303485c7227990f8fe456ea964c8a80f

[14:59] *** sena_kun joined
[15:00] <Xliff_> Or anyone else with Inline::Perl5 experience! :)

[15:05] *** [Coke] left
[15:11] *** zakharyas left
[15:11] <nine> $spreadsheet.worksheet({ title => 'Sheet1' });

[15:11] <nine> Xliff_: $spreadsheet.worksheet(${ title => 'Sheet1' });

[15:12] <Xliff_> Checking.

[15:13] *** melezhik joined
[15:13] <Xliff_> nine++

[15:13] <Xliff_> So that has to be done for all hash refs?

[15:15] <nine> Wenn passed as arguments, yes. Otherwise they get flattened by the slurpy args

[15:17] <Xliff_> Thanks!

[15:36] *** holli joined
[15:49] *** camelCaser left
[15:53] *** camelCaser joined
[15:55] *** kensanata left
[16:09] *** [Coke] joined
[16:09] *** [Coke] left
[16:09] *** [Coke] joined
[16:13] *** zakharyas joined
[16:16] *** veesh_ joined
[16:18] *** veesh left
[16:18] *** veesh_ is now known as veesh

[16:19] <uzl[m]> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates>>.signature;

[16:19] <camelia> rakudo-moar 589ba38c7: OUTPUT: «((Any:U: *%_ --> 0) (Any:D: *%_) (A: $val, *%_) (A: *%_))␤»

[16:19] <uzl[m]> How do I grep the method 'end' specific to the type A?

[16:22] <uzl[m]> .tell jmerelo Any idea about this? https://colabti.org/irclogger/irclogger_log/raku?date=2020-01-28#l537

[16:22] <tellable6> uzl[m], I'll pass your message to jmerelo

[16:30] *** atroxaper joined
[16:30] <Geth> ¦ doc: 3a2678d4b9 | (Luis F. Uceta)++ | doc/Language/objects.pod6

[16:30] <linkable6> Link: https://docs.raku.org/language/objects

[16:30] <Geth> ¦ doc: Mention that the colon syntax on $.foo method is now supported

[16:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/3a2678d4b9

[16:30] <Geth> ¦ doc: b302b5004e | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[16:30] <Geth> ¦ doc: Merge pull request #3192 from uzluisf/master

[16:30] <Geth> ¦ doc: 

[16:30] <Geth> ¦ doc: Mention that the colon syntax on $.foo method is now supported

[16:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/b302b5004e

[16:30] *** jmerelo joined
[16:31] <atroxaper> hi, #raku

[16:31] <jmerelo> Hi!

[16:31] <tellable6> 2020-01-28T21:11:29Z #raku-dev <TreyHarris> jmerelo please see https://colabti.org/irclogger/irclogger_log/raku-dev?date=2020-01-28#l580 in re commit sha's and doc churn

[16:31] <tellable6> 2020-01-30T16:22:28Z #raku <uzl[m]> jmerelo Any idea about this? https://colabti.org/irclogger/irclogger_log/raku?date=2020-01-28#l537

[16:31] <tellable6> hey jmerelo, you have a message: https://gist.github.com/7bc02f5c621d0f3382ad9be9764c2e5d

[16:32] <jmerelo> .tell TreyHarris we eliminated it a long time ago. Since we are using a cache now, it didn't make a lot of sense anyway.

[16:32] <tellable6> jmerelo, I'll pass your message to TreyHarris

[16:33] <dakkar> uzl[m]: .grep({ with .params[0] { .invocant && .type eqv A } });

[16:33] <dakkar> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates>>.signature.grep({ with .params[0] { .invocant && .type eqv A } });

[16:33] <camelia> rakudo-moar 589ba38c7: OUTPUT: «((A: $val, *%_) (A: *%_))␤»

[16:34] <dakkar> (the check for `.invocant` is probably redundant if you know you're looking at methods, but can't hurt)

[16:34] <jmerelo> .tell uzl[m] I think there's this issue: https://github.com/Raku/Documentable/issues/78, very recent. Might that be the problem?

[16:34] <tellable6> jmerelo, I'll pass your message to uzl[m]

[16:35] *** Kaiepi left
[16:37] *** Kaiepi joined
[16:37] <atroxaper> If I want to add a test for fails-like in roast, how can I check a fail case. I expect that    fails-like { sub { fail X::Foo.new }() }, X::Foo, :42miss;   did not match 42. But how can I prove it in test?

[16:39] *** domidumont left
[16:40] *** Redfoxmoon left
[16:40] *** Redfoxmoon joined
[16:41] *** xinming_ left
[16:42] *** xinming_ joined
[16:45] *** sena_kun left
[16:48] *** aborazmeh joined
[16:48] *** aborazmeh left
[16:48] *** aborazmeh joined
[16:52] <jmerelo> atroxaper: that should work. You check for the type of exception it's thrown, and its message (or any other payload)

[16:52] *** mowcat joined
[16:53] <atroxaper> jmerelo: If I want to check that fails-like fails if did not match payload?

[16:54] <atroxaper> jmerelo: I mean, if payload missmatched then test will be nok, but I expect that behaviour and want test ok :)

[16:56] <jmerelo> atroxaper: ah, you want to check fails-like itself... I think tests return True or False

[16:56] <jmerelo> m: use test; say ok(1)

[16:56] <camelia> rakudo-moar 589ba38c7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find test in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/raku…»

[16:56] <jmerelo> m: use Test; say ok(1)

[16:56] <camelia> rakudo-moar 589ba38c7: OUTPUT: «ok 1 - ␤True␤»

[16:57] <jmerelo> atroxaper:                                      ^^^^

[17:00] <atroxaper> jmerelo: As I understand, prove will parse stdout and fail test. Because fails-like makes the 'nok' output.

[17:02] *** sena_kun joined
[17:03] *** leont joined
[17:05] *** lgtaube left
[17:07] <jmerelo> atroxaper: ah, OK. There's a module for that, Test::Output; also Testo tests that if I remember correctly. But mainly it's a matter of redirecting and capturing output.

[17:08] <jmerelo> atroxaper: I wouldn't be surprised there would be some helper in roast for doing that.

[17:08] <jmerelo> atroxaper: or you can simply suppress output and work with return value

[17:08] <shred_alert> Which part of the docs mentions the syntax qx/<command>/ (backticking?)?

[17:09] <atroxaper> jmerelo: Fair enough. Will looking for some helper. Thank you.

[17:16] <atroxaper> shred_alert: 'Quoting constructs' or 'Independent routines' probably.

[17:19] *** wamba joined
[17:21] *** molaf joined
[17:21] <shred_alert> Can't seem to find it there.

[17:28] <Xliff_> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates>>.signature.grep({ with .params[0] { .invocant && .type eqv A } });

[17:28] <camelia> rakudo-moar 589ba38c7: OUTPUT: «((A: $val, *%_) (A: *%_))␤»

[17:30] <Xliff_> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; say A.^find_method('end').candidates>>.signature.grep({ with .params[0] { .invocant && .type ~~ A } });

[17:30] <camelia> rakudo-moar 589ba38c7: OUTPUT: «((A: $val, *%_) (A: *%_))␤»

[17:31] <Xliff_> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; class B { multi method end(Str $val) { 1 }; }; say B.^find_method('end').candidates>>.signature.grep({ with .params[0] { .invocant && .type ~~ A } });

[17:31] <camelia> rakudo-moar 589ba38c7: OUTPUT: «()␤»

[17:31] <Xliff_> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; class B is A { multi method end(Str $val) { 1 }; }; say B.^find_method('end').candidates>>.signature.grep({ with .params[0] { .invocant && .type ~~ A } });

[17:31] <camelia> rakudo-moar 589ba38c7: OUTPUT: «((A: $val, *%_) (A: *%_) (B: Str $val, *%_))␤»

[17:32] <Xliff_> m: class A { has $!n; multi method end($val) { $!n = $val }; multi method end { $!n } }; class B is A { multi method end(Str $val) { 1 }; }; say B.^find_method('end').candidates>>.signature.grep({ with .params[0] { .invocant && .type eqv A } });

[17:32] <camelia> rakudo-moar 589ba38c7: OUTPUT: «((A: $val, *%_) (A: *%_))␤»

[17:32] *** shred_alert left
[17:32] *** dakkar left
[17:36] *** zakharyas left
[17:39] *** Xliff_ left
[17:39] *** aborazmeh left
[17:43] *** wildtrees joined
[17:52] *** Tirifto joined
[18:06] *** lgtaube joined
[18:10] *** chloekek joined
[18:14] *** atroxaper left
[18:28] *** ensamvarg left
[18:36] *** sno joined
[18:46] *** sena_kun left
[18:46] *** titsuki_ left
[18:49] *** dogbert1 left
[18:52] *** Tirifto left
[18:57] *** AlexDaniel left
[19:02] *** sena_kun joined
[19:06] *** wamba left
[19:06] *** veesh_ joined
[19:08] *** veesh left
[19:08] *** veesh_ is now known as veesh

[19:09] * [Coke] finds https://github.com/watching and unwatches a whole bunch of old stuff.

[19:11] <cpan-raku> New module released to CPAN! PDF::Class (0.4.0) by 03WARRINGD

[19:22] *** Kaiepi left
[19:27] *** Kaiepi joined
[19:27] *** Kaiepi left
[19:28] *** Kaiepi joined
[19:29] *** mahmudov joined
[19:31] *** sauvin left
[19:33] *** ayerhart left
[19:41] *** ayerhart joined
[19:46] *** jmerelo left
[19:47] *** lgtaube left
[20:09] *** lgtaube joined
[20:14] *** stoned75 joined
[20:16] *** dpk left
[20:16] *** dpk joined
[20:29] *** titsuki_ joined
[20:34] *** rindolf left
[20:35] *** Benett left
[20:35] *** uzl[m] left
[20:35] *** krunen joined
[20:35] *** jargan joined
[20:35] *** jargan is now known as jast

[20:42] *** molaf left
[20:45] *** sena_kun left
[20:50] *** zakharyas joined
[20:53] *** MasterDuke joined
[20:55] *** aborazmeh joined
[20:55] *** aborazmeh left
[20:55] *** aborazmeh joined
[21:00] *** sena_kun joined
[21:05] *** aborazmeh left
[21:16] *** melezhik left
[21:30] *** molaf joined
[21:34] *** zakharyas left
[21:34] *** Benett joined
[21:45] *** lucasb left
[21:57] *** melezhik joined
[22:01] *** xinming_ left
[22:03] *** chloekek left
[22:04] *** clarjon1 left
[22:05] *** xinming_ joined
[22:08] *** wildtrees left
[22:08] *** wildtrees joined
[22:26] *** MasterDuke left
[22:35] *** cooper left
[22:44] <Voldenet> m: once quietly given now { .say } or die when start exit

[22:44] <camelia> rakudo-moar 589ba38c7: ( no output )

[22:44] <Voldenet> is there any way to drop these { }

[22:46] *** sena_kun left
[22:53] *** melezhik left
[22:55] *** Black_Ribbon joined
[22:57] <lizmat> m: once quietly .say given now or die when start exit

[22:57] <camelia> rakudo-moar 589ba38c7: ( no output )

[22:58] <lizmat> m: { once quietly .say given now or die when start exit }

[22:58] <camelia> rakudo-moar 589ba38c7: ( no output )

[22:59] *** sena_kun joined
[23:00] *** mowcat left
[23:04] <veesh> do nativecall arrays silently convert uint into int?

[23:04] <veesh> or is that a weirdness in how raku interprets it on the way out?

[23:05] <veesh> in reference to the last post from ToddAndMargo on the mailing list

[23:06] <veesh> m: use NativeCall; dd CArray[uint8].new(255).list

[23:06] <camelia> rakudo-moar 589ba38c7: OUTPUT: «(-1,)␤»

[23:06] <veesh> that's weird

[23:08] *** Xliff left
[23:30] *** pecastro left
[23:31] *** Xliff joined
