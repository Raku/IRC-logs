[00:06] <AlexDaniel> o/

[00:42] *** xinming left
[00:42] *** xinming joined
[00:48] *** benlittle left
[00:48] *** softmoth left
[00:49] *** softmoth joined
[00:55] *** Nileee joined
[00:55] <Nileee> I have a question..

[00:56] *** Nileee left
[00:57] *** xinming left
[00:57] *** xinming joined
[01:05] *** toddr left
[01:11] *** rainmanjam joined
[01:11] *** rbt left
[01:12] *** rbt joined
[01:14] *** rainmanjam left
[01:20] *** aborazmeh left
[01:35] *** molaf left
[01:37] *** xinming left
[01:37] *** xinming joined
[01:47] *** molaf joined
[02:05] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:37] *** Kaeipi left
[02:38] *** Kaeipi joined
[03:26] *** pilne left
[03:34] *** cognominal joined
[03:38] *** cognomin_ left
[03:41] *** cognomin_ joined
[03:45] *** cognominal left
[03:49] *** k-man joined
[03:50] *** k-man__ left
[03:50] *** mowcat left
[04:12] *** Doc_Holliwood joined
[04:19] *** xinming left
[04:20] *** xinming joined
[04:31] *** orinthe left
[04:33] *** orinthe joined
[04:40] *** xinming left
[04:41] *** xinming joined
[04:56] *** xinming left
[04:57] *** xinming joined
[05:13] *** sauvin joined
[05:20] *** discoD left
[05:35] *** molaf left
[05:46] *** xinming left
[05:46] *** xinming joined
[05:48] *** Doc_Holliwood left
[06:04] *** dustinm` left
[06:13] *** Doc_Holliwood joined
[06:19] *** dustinm` joined
[06:24] *** kensanata joined
[06:29] *** sjm_uk joined
[06:40] *** xinming left
[06:40] *** xinming joined
[06:48] *** MasterDuke joined
[06:50] *** gabiruh left
[06:50] *** Doc_Holliwood left
[06:50] *** gabiruh joined
[06:57] *** stoned75 joined
[07:09] <sacomo> hi timotimo

[07:12] *** Sgeo__ joined
[07:12] *** Doc_Holliwood joined
[07:15] *** Sgeo_ left
[07:19] <cpan-raku> New module released to CPAN! Gnome::Gtk3 (0.27.5) by 03MARTIMM

[07:27] *** pecastro joined
[07:35] *** dakkar joined
[07:42] *** stoned75 left
[07:43] *** stoned75 joined
[07:45] *** skyl4rk_ joined
[07:47] *** skyl4rk left
[07:49] *** skyl4rk joined
[07:50] *** skyl4rk_ left
[07:56] *** Doc_Holliwood left
[08:00] *** girafe joined
[08:03] *** v_m_v joined
[08:05] <v_m_v> Hello. Yesterday I've found that solution on rosseta code: https://rosettacode.org/wiki/Hofstadter-Conway_$10,000_sequence#Raku It is really nice...but also really slooow. 36 times slower then Perl. Do you know why? Can we speed it up somehow? 

[08:06] <lizmat> v_m_v: am working on refactoring the series (...) operator, which will make this run about 4x as fast without any change

[08:07] <lizmat> but that's just the setting up... hhmmm

[08:08] <v_m_v> lizmat: it will be still 9 times slower. Maybe something is wrong with the solution?

[08:10] *** rindolf joined
[08:11] * lizmat runs a profile

[08:19] <lizmat> on my machine, that runs for 25.5 seconds, 17 of which are in the precalculating of the sequence

[08:19] <lizmat> so my refactoring would take it down to about 12.5 seconds, so about 2x as fast

[08:21] <v_m_v> here it is 36s vs 0.9s from Perl. 

[08:22] *** Sgeo__ left
[08:22] *** Sgeo__ joined
[08:23] <v_m_v> can we precalculate the sequence in the other (faster) way?

[08:30] <lizmat> my refactoring of ... will be close to optimal with all the JITtiing

[08:30] <lizmat> so don't expect much there for manual rewriting

[08:31] <lizmat> in the profile, that drowns out all of the other stuff, so not very useful to look at now

[08:31] <lizmat> I suspect the Z/ Z=> to be relatively expensive

[08:34] <v_m_v> I am just wondering...maybe we should move raku to different existing VM? One of the biggest issues right now is not the lack of functionalities but the speed / resources ratio. 

[08:34] <lizmat> have you seen jnthn's latest video presentation ?

[08:34] <v_m_v> no. Do you have a link ? 

[08:35] <lizmat> main article in the last Rakudo Weekly News: https://rakudoweekly.blog/2020/04/13/2020-15-an-easter-surprise/

[08:36] <v_m_v> Oh, with RakuAST it should be quite easy to move it to llvm or Graal ..right? 

[08:38] <lizmat> possibly, it is higher level than AST

[08:48] *** Altai-man_ joined
[08:49] <MasterDuke> v_m_v: pmurias has started to port the jvm backend to graalvm/truffle https://github.com/Raku/nqp/tree/truffle

[08:52] <MasterDuke> some completely artificial microbenchmarks (that have to be run long enough to compensate for the jvm's slow startup) have shown to be faster than moarvm

[09:08] *** Ven`` joined
[09:11] <El_Che> being unix centrix, I have some trouble running my tests on windows: 'run' failes (I check the exitcode and output). I've tried several incarnations with "cmd.exe /c". Here is the test in question. Pointers appreciated: https://github.com/nxadm/SuperMAIN/blob/master/t/01-submainopts.rakutest#L11

[09:12] *** rindolf left
[09:15] *** sena_kun joined
[09:16] *** xinming left
[09:16] *** xinming joined
[09:16] *** Altai-man_ left
[09:18] *** rindolf joined
[09:20] *** netrino joined
[09:21] <sena_kun> AlexDaniel, I think it lacks a newline somewhere: https://gist.github.com/Altai-man/50db11ae949d3e04e84023e91209ae80 ?

[09:23] *** xinming left
[09:23] <sena_kun> What I'd be more happy about is how to get rid of those strange broken modules that somehow succeed for for any old revision (even though they are broken for years) and then are bisected to some nonsense commit, because most of the items in this gist are those.

[09:23] *** xinming joined
[09:43] *** Kaeipi left
[09:43] *** Merfont joined
[09:52] *** softmoth left
[10:08] *** xinming left
[10:09] *** xinming joined
[10:09] *** Nileee joined
[10:09] *** Nileee left
[10:32] *** Doc_Holliwood joined
[10:39] *** xinming left
[10:39] *** xinming joined
[10:43] *** Ven`` left
[10:53] *** xinming left
[10:54] *** xinming joined
[10:54] *** Ven`` joined
[10:56] *** caterfxo left
[10:57] *** caterfxo joined
[11:05] *** aborazmeh joined
[11:05] *** aborazmeh left
[11:05] *** aborazmeh joined
[11:08] *** v_m_v left
[11:14] *** Altai-man_ joined
[11:15] *** caterfxo left
[11:16] <AlexDaniel> sena_kun: fixed: https://gist.github.com/AlexDaniel/223d187e0edcc920d7021651813890d0

[11:16] *** sena_kun left
[11:16] <AlexDaniel> Altai-man_: ‚Üë

[11:16] <AlexDaniel> I'll also patch blin‚Ä¶

[11:20] <Altai-man_> AlexDaniel, the new format looks great! I wonder if now we can investigate how some of the modules listed can pass on every old revision regardless of what you try, while being obviously broken for years, and failing to install when you try it out locally with the same revision.

[11:20] <AlexDaniel> Altai-man_: example?

[11:21] <Altai-man_> E.g. November is listed (and about every other from this list, not all of them).

[11:21] <Altai-man_> I was running it with `--old=2020.02`. On my local 2020.02 it dies just fine.

[11:21] <Altai-man_> But Blin somehow gets it working.

[11:22] <tadzik> wow. I wrote myself a Perl script for a work tool, it starts up slow because it uses DateTime. I ported it to Raku for comparison and Raku is *almost* faster

[11:22] <Altai-man_> AlexDaniel, and the commit it "bisects" them too is always the `new` revision.

[11:22] <tadzik> (at least in wallclock time, CPU time is almost twice as much as Perl)

[11:22] *** Xliff joined
[11:23] <Altai-man_> So no matter what new and old you set, November will be always showing up as Fail and "bisected" to new.

[11:23] <Xliff> o/

[11:24] <Xliff> m: my $a = 'abcdefg'; sub separate (Str $s) { ( $s.substr(0, $s), $s.substr($s, *) ) }; $a.&separate(3).say

[11:24] <camelia> rakudo-moar c13faeefa: OUTPUT: ¬´Too many positionals passed; expected 1 argument but got 2‚ê§  in sub separate at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:24] <Xliff> m: my $a = 'abcdefg'; sub separate (Str $s, Int $p) { ( $s.substr(0, $p), $s.substr($p, *) ) }; $a.&separate(3).say

[11:24] <camelia> rakudo-moar c13faeefa: OUTPUT: ¬´(abc defg)‚ê§¬ª

[11:24] <AlexDaniel> Xliff: what's the meaning of this .chomp? https://github.com/Raku/Blin/commit/2049de6c369b5eda473420bb57bfcf95cd6b54d1#

[11:25] <lizmat> tadzik: care to gist ?  see if we can make it faster still?   :-)

[11:25] <tadzik> lizmat: I started by updating Raku to something form this year :) But yes, will do

[11:25] <Xliff> AlexDaniel: It takes that last carriage return OUT of the output since say already will emit one.

[11:25] <tadzik> both versions can probably be improved...

[11:25] <Xliff> I thought that was pretty clear.

[11:26] <AlexDaniel> Altai-man_: that's absolutely bizarre I have never seen it behave this way

[11:26] <Altai-man_> :(

[11:26] <AlexDaniel> Xliff: yeah cuz we're lacking some newlines‚Ä¶ :D

[11:26] <Xliff> If that fixes the problem, feel free to remove it.

[11:26] <Altai-man_> I wonder if I can reproduce this using only a single module...

[11:26] <AlexDaniel> Xliff: yeah, testing it right now

[11:27] <Xliff> m: my $a = 'abcdefg'; sub separate (Str $s, Int $p) { ( $s.substr(0, $p), $s.substr($p, *) ) }; $a.&separate(3).say

[11:27] <camelia> rakudo-moar c13faeefa: OUTPUT: ¬´(abc defg)‚ê§¬ª

[11:27] <tadzik> lizmat: https://gist.github.com/tadzik/ca52a6ef8d125dd9b28a5245b92ed913

[11:27] <Xliff> ^^ Is there a String op for this, or 

[11:27] *** caterfxo joined
[11:27] <tadzik> Rakudo 2020.02 seems *slightly* faster, but still slower than Perl

[11:28] <lizmat> tadzik: ++$date ?

[11:28] <tadzik> I thought they're immutable...

[11:28] <tadzik> but they're not apparently :)

[11:28] <tadzik> equally fast though, it seems

[11:29] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/531999d23d85404bf51212291c3744bf

[11:29] <lizmat> tadzik: Date objects are immutable, but if they're in a container, it can fill the container with a new Date object  :-)

[11:29] <AlexDaniel> maybe 10000 is too much :)

[11:29] <Altai-man_> I was recently running some 2009 time benchmarks from examples repo. Not 1600 times slower these days, but https://github.com/Raku/examples/blob/06cdb38917dca1863d8bd9e38fdc09bd72669a4e/categories/shootout/RESULTS

[11:30] <tadzik> lizmat: oh, right :)

[11:31] *** xinming left
[11:31] <AlexDaniel> let's try 100 times first xD

[11:31] *** committable6 left
[11:31] *** committable6 joined
[11:31] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/531999d23d85404bf51212291c3744bf

[11:32] <committable6> AlexDaniel, https://gist.github.com/02c20773701dbb95d1f42ac33ffa93aa

[11:32] <Xliff> m: (2**15).base(2).^name

[11:32] <camelia> rakudo-moar c13faeefa: ( no output )

[11:32] <Xliff> m: (2**15).base(2).^name.say

[11:32] <camelia> rakudo-moar c13faeefa: OUTPUT: ¬´Str‚ê§¬ª

[11:33] *** Doc_Holliwood left
[11:33] <lizmat> tadzik: also, superstitious parens ?  

[11:33] <tadzik> lizmat: yes. Relic from Perl :)

[11:33] <lizmat> not that that will matter for ececution

[11:34] <tadzik> there were actually very little changes I had to make from one version to the other, mostly removing the `use`s :)

[11:34] *** xinming joined
[11:34] <lizmat> sometimes I wonder whether we should have a "last-day-of-the-month" method

[11:36] <lizmat> you could then do something like: say ($date .. $date.last-day-of-month).grep( *.day-of-week < 6 ).elems

[11:36] <lizmat> tadzik ^^

[11:37] *** Xliff left
[11:43] *** stoned75 left
[11:45] *** stoned75 joined
[11:48] <tadzik> lizmat: ah, that's elegant :) last-day-of-month and such I usually just do with .month++;day=1

[11:48] *** netrino left
[11:48] <lizmat> that's the first of next month ?

[11:49] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/531999d23d85404bf51212291c3744bf

[11:49] <committable6> AlexDaniel, https://gist.github.com/678d3da87ed5788d9ba199562384b91a

[11:50] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/531999d23d85404bf51212291c3744bf

[11:50] <tadzik> lizmat: oh, right. One more day-- then ;)

[11:50] <lizmat> yeah, but that's very resource consuming

[11:51] <lizmat> there is actually a "days-in-month" method

[11:51] <tadzik> I guess the overall slowness is still mostly just startup time

[11:51] <committable6> AlexDaniel, https://gist.github.com/9b269534e4320008dbff7dcde4e9ab29

[11:52] <tadzik> the reason it "matters" to me is because I use this in tools I run very often, like "it's in my .zshrc" often

[11:52] <AlexDaniel> lizmat, tadzik: ‚Üë oh wow :)

[11:52] <tadzik> and the tools are in Rust, but I do have Perl hooks in there ;)

[11:53] <tadzik> AlexDaniel: ha. We've come a long way :)

[11:53] <AlexDaniel> I wonder if it's throwing away a bit too much of code‚Ä¶ let's try printing the stuff‚Ä¶

[11:53] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/531999d23d85404bf51212291c3744bf

[11:54] <tadzik> AlexDaniel: you're only say() ing once :)

[11:54] <AlexDaniel> yeah because otherwise it'll say 2000 times :)

[11:55] <tadzik> but again: even `time raku -e 'say "ok"'` is slower than the Perl version

[11:55] <committable6> AlexDaniel, https://gist.github.com/f82a3ee46c10d55c85eb83ea6840ceaf

[11:55] <tadzik> so I don't think anything in code itself can be much improved :)

[11:55] <lizmat> yeah, in Perl compiling the DateTime module is what is costing you

[11:57] <tadzik> yeah

[11:57] *** natrys joined
[12:02] *** kensanata left
[12:15] *** mowcat joined
[12:27] *** mowcat left
[12:27] <lizmat> AlexDaniel: the gist should probably read "say now - INIT now", as you don't want improvement / worsening of parsing to be included?

[12:27] <lizmat> then again, "now" itself has also become about 2x as fast recently  :-)

[12:28] <AlexDaniel> lizmat: don't think it matters, but feel free to fork it and rerun :

[12:28] <AlexDaniel> :)

[12:30] *** caterfxo left
[12:32] *** Black_Ribbon left
[12:35] *** stoned75 left
[12:41] *** Doc_Holliwood joined
[12:56] *** dakkar left
[12:57] *** dakkar joined
[12:57] *** rypervenche joined
[12:57] *** caterfxo joined
[13:01] *** Sgeo__ left
[13:02] <tbrowder> hi folks

[13:03] <tbrowder> i have a grammar question:

[13:04] *** Sgeo joined
[13:05] <tbrowder> um, belay that, not ready yet...

[13:06] <jjatria> I'll go then: I have code that broke when I moved classes into their own files. Raku complains about not being to resolve a method: https://gitlab.com/jjatria/widget-experiments/-/commit/49ad3da

[13:06] <jjatria> Any ideas why?

[13:06] <Geth_> ¬¶ ecosystem: nxadm++ created pull request #486: Add SuperMAIN to ecosystem

[13:06] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/486

[13:07] <Geth_> ¬¶ ecosystem: 0fe174566e | (Claudio Ramirez)++ | META.list

[13:07] <Geth_> ¬¶ ecosystem: Add SuperMAIN to ecosystem

[13:07] <Geth_> ¬¶ ecosystem: 

[13:07] <Geth_> ¬¶ ecosystem: See https://github.com/nxadm/SuperMAIN

[13:07] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/0fe174566e

[13:07] <Geth_> ¬¶ ecosystem: 2c75110477 | nxadm++ (committed using GitHub Web editor) | META.list

[13:07] <Geth_> ¬¶ ecosystem: Merge pull request #486 from nxadm/master

[13:07] <Geth_> ¬¶ ecosystem: 

[13:07] <Geth_> ¬¶ ecosystem: Add SuperMAIN to ecosystem

[13:07] <Geth_> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/2c75110477

[13:08] <tadzik> ah, nice that %SUB-MAIN-OPTS<named-anywhere> = True is a thing

[13:08] <tadzik> I used to this by sorting @*ARGS :>

[13:09] <El_Che> tadzik: lizmat++ added after my nagging

[13:09] <tadzik> El_Che++ lizmat++ :)

[13:10] <tadzik> is there a module yet that'd do MAIN canditate disambiguations?

[13:10] <El_Che> tadzik: what do ou mean? Which applies when multi is used?

[13:10] <El_Che> tadzik: what do ou mean? Which MAIN applies when multi is used?

[13:11] <tadzik> I wrote it manually myself recently for my worktracker: https://tadzik.net/ss/xujYqW9zz.png

[13:11] <tadzik> (that's in Rust though)

[13:11] <tadzik> it's how mercurial does it, I think

[13:11] <El_Che> nice

[13:11] <El_Che> the lines are after a tab?

[13:12] <El_Che> like shell completion on steroids?

[13:12] <tadzik> those are the proposed solutions, yes

[13:12] <El_Che> make working with it very nice

[13:12] <tadzik> well, it doesn't do anything with the shell. It's basically just multi-matching with some leniency  :)

[13:13] <El_Che> a leftover MAIN that catches everything?

[13:13] <tadzik> https://git.tadzik.net/tadzik/work-rs/src/master/src/main.rs#L347

[13:13] <El_Che> if so, nice idea

[13:13] <tadzik> I don't know how that'd work in Raku

[13:15] <tadzik> (the code above is a bit overly complicated :))

[13:15] *** sena_kun joined
[13:15] <El_Che> tadzik: that would be a dream PR for SuperMAIN and probably tripple the line count :P

[13:15] <tadzik> :D

[13:15] *** aborazmeh left
[13:16] <tadzik> I wonder if you could hook somehow into the exception that gets thrown where multiple multi canditates fit

[13:16] <tadzik> and then just list them all in a subset of --help, basically

[13:16] *** Altai-man_ left
[13:18] <El_Che> it would complicate things because you want it to work also when nothing matches

[13:19] <tadzik> hrm, right

[13:19] <El_Che> tadzik: you're man with good idea's, sir

[13:19] <tadzik> hehe, just a long (selective) memory

[13:20] <El_Che> as long as you don't start loosing your short one, it's a great thing :)

[13:20] <tadzik> someone was advocating mercurial to me, some 10 years ago and I thought "I think I prefer git but this prefix matching is really nice"

[13:20] <tadzik> El_Che: losing my short what?

[13:20] <tadzik> :>

[13:20] <El_Che> tadzik: what you talking 'bout? :P

[13:20] <tadzik> what a confusing conversation!

[13:21] <El_Che> tadzik: who are you sir and why don't you have any trousers on??

[13:21] <El_Che> :)

[13:23] <tadzik> ha, but I have! Since this whole quarantine business there's actually two people in my home office, which requires some discipline

[13:24] *** Doc_Holliwood left
[13:24] <El_Che> Where do you live nowdays? Poland? Viena?

[13:25] <tadzik> Poland, Warsaw

[13:25] <tadzik> no changes, yet...

[13:25] <tadzik> I wish I moved out of here before I planted the roots, even if they're not very deep yet

[13:25] *** kensanata joined
[13:26] <El_Che> last time I saw you, you had I baby, I think

[13:27] <tadzik> oh, that must've been a different person then

[13:27] <tadzik> unless I do have a really bad memory :D

[13:27] <El_Che> no, it was you, maybe the baby thing was my bad memory :)

[13:27] <tadzik> :)

[13:33] *** aborazmeh joined
[13:33] *** aborazmeh left
[13:33] *** aborazmeh joined
[13:45] *** stoned75 joined
[13:47] *** aborazmeh left
[13:54] *** bbkr left
[13:55] *** squashable6 left
[13:56] *** squashable6 joined
[14:08] *** stoned75 left
[14:16] *** Doc_Holliwood joined
[14:23] *** aborazmeh joined
[14:24] *** aborazmeh left
[14:24] *** aborazmeh joined
[14:41] *** Merfont is now known as Kaiepi

[14:45] *** molaf joined
[14:52] *** Doc_Holliwood left
[15:05] *** kensanata left
[15:08] *** Doc_Holliwood joined
[15:14] *** Altai-man_ joined
[15:15] *** Ven`` left
[15:16] *** sena_kun left
[15:38] *** sjm_uk left
[15:48] *** Ven`` joined
[16:00] *** sjm_uk joined
[16:06] *** molaf left
[16:09] *** chloekek joined
[16:22] *** Doc_Holliwood left
[16:32] *** [Coke] left
[16:35] *** [Coke] joined
[16:35] *** [Coke] left
[16:35] *** [Coke] joined
[16:48] *** patrickb joined
[16:51] *** aborazmeh left
[16:52] *** dakkar left
[16:57] *** Doc_Holliwood joined
[17:11] *** telex left
[17:13] *** mowcat joined
[17:13] *** telex joined
[17:14] <timotimo> i just learned about new readable syntax for some regex constructs in perl

[17:15] *** sena_kun joined
[17:15] <timotimo> (*nlb:pattern)

[17:15] <timotimo> (*negative_lookbehind:pattern) 

[17:17] *** Altai-man_ left
[17:17] <chloekek> Nice.

[17:19] *** AlexDaniel left
[17:20] *** AlexDaniel joined
[17:20] *** AlexDaniel left
[17:20] *** AlexDaniel joined
[17:21] <timotimo> our perl5re support is, of course, rather poor at the moment :(

[17:21] <timotimo> adding these syntaxes will not do much for their usefulness i guess

[17:21] *** aborazmeh joined
[17:21] *** aborazmeh left
[17:21] *** aborazmeh joined
[17:29] *** cpan-raku left
[17:31] *** cpan-raku joined
[17:31] *** cpan-raku left
[17:31] *** cpan-raku joined
[17:31] * chloekek wanna write something in Perl

[17:40] * [Coke] wonders if it's worth improving our perl5re support if Inline::Perl5 exists.

[17:42] <timotimo> it'd be amazing if we could come up with sensible semantics for mixing p5 and rk regexes in literally the same regex

[17:43] <timotimo> the rules for determining capture numbering differ quite a bit, so that could be very weird

[17:43] <[Coke]> O_o

[17:43] <[Coke]> I feel like if you want p5 regexes, you are all in on that.

[17:43] <timotimo> but being able to rewrite regexes line-by-line and trying to keep tests green ... that could be amazing

[17:43] <Grinnz> i think it was previously suggested to allow use of PCRE and delegate to Inline::Perl5 for perl5re, which seems more future proof

[17:43] <[Coke]> mix and match seems too much

[17:43] <timotimo> mhh

[17:44] <timotimo> fwiw, i'd appreciate if we had regex modules for a boatload of dialects (but i wouldn't appreciate it enough to actually work on it)

[17:44] <Grinnz> otherwise you are just making another PCRE :P

[17:45] <timotimo> like, being able to just copypaste a regex from js, from java, from python, from an html5 attribute, from sed, from awk, ...

[17:45] <[Coke]> any nqp jvm users here?

[17:45] <Grinnz> luckily half of those are probably PCRE

[17:45] <Grinnz> js is not

[17:45] <[Coke]> (have a PR which deletes a bunch of stuff that could use some testing)

[17:46] <timotimo> recently i wished to make a point to someone that "pcre is great because all languages have it!" by showing them a table with how each dialect calls the different constructs

[17:46] <timotimo> but i could not find any such table

[17:46] <timotimo> maybe i'm actually wrong and they are all actually very much the same

[17:46] <Grinnz> i would say they are very much not the same unless they are actually just linking to PCRE

[17:47] <Grinnz> and of course, there's now pcre1 and pcre2

[17:47] <chloekek> RCRE when.

[17:47] <Grinnz> when you write it as a C lib ;)

[17:48] <timotimo> offer it via an RPC mechanism :D

[17:49] <timotimo> literally a dbus-activate-able service for rk regex evaluation

[17:55] *** aborazmeh left
[18:04] *** Actualeyes left
[18:04] *** robertle joined
[18:05] *** vmv joined
[18:06] <robertle> I am wondering: if I want to do some closed-source raku development in my mega-corporation, I need some sort of private CPAN or so where my legion of developers and their CI jobs can upload module tarballs and where they can fetch it with zef. How could I set this up?

[18:07] <MasterDuke> robertle: i think nine or ugexe are the people to ask

[18:08] <lizmat> robertle: depending on your sense of paranoia, you could use private repos on Github / Gitlab

[18:09] <robertle> lizmat: right, but a git repo isn't the same as an artifact store for built and versioned modules, of course with some overlap due to the way zef works...

[18:09] *** sauvin left
[18:10] <lizmat> well, the concept of a recommendation manager was to allow a company to set up its own recommendation manager for in-house usage

[18:10] <lizmat> that could use internal as well as external content storage

[18:13] <robertle> and I am not very paranoid :) but the workflow needs to be right, kinda around how you release a module versio  and then use it in other builds...

[18:13] <robertle> and how you automatically test new versions

[18:18] <robertle> I am kinda on the edge of cobbling something together and am wondering whether that's stupid or already exists...

[18:18] <lizmat> I'm afraid there's nothing for that out of the box atm

[18:18] <lizmat> and I would be willing to help you with implementing some recommendation manager ideas  :-)

[18:19] <robertle> I don't quite understand what you mean with that, could you elaborate? where does the "recommendation" part come in?

[18:21] <sena_kun> I suspect if you have a legion of developers or at least one, you might simply patch zef upstream to have a nice implementation of https://deathbyperl6.com/zef-plugins-a-very-alpha-glimpse/ and then write a plugin that'll work with your custom repos and so on.

[18:21] <lizmat> robertle: https://design.raku.org/S22.html#recommendation_manager

[18:23] <robertle> sena_kun: correct, and also an artifact server where you can push your tarballs to, that's exactly what I mean. just wondering if that artifact server already exists

[18:24] <robertle> not sure you need a zef plugin if you use the cpan method, but I guess it would need patches to support some form of authentication

[18:24] <lizmat> https://design.raku.org/S22.html   # maybe more inspiration ?

[18:26] <sena_kun> robertle, AFAIK, zef (or "raku package manager") is agnostic to ecosystem, if the question is "how to create such an ecosystem", I wonder if pinging patrickb makes sense.

[18:27] <robertle> aha, now I get it. I think what I am looking for is the "content storage" service!

[18:32] <patrickb> Hi!

[18:38] *** sjm_uk left
[18:49] *** patrickb left
[18:50] *** hankache joined
[18:50] *** vmv left
[18:52] <hankache> hello #raku

[18:53] <hankache> what is the native type equivalent to wchar_t?

[18:55] *** patrickb joined
[18:55] *** softmoth joined
[18:57] <patrickb> ping tadzik

[18:57] <patrickb> tadzik: We didn't finish our conversation a few days ago...

[18:59] *** robertle left
[19:02] *** robertle joined
[19:02] *** JulianLevens left
[19:14] *** Altai-man_ joined
[19:15] *** natrys left
[19:16] *** sena_kun left
[19:20] <tadzik> ah, indeed

[19:20] <tadzik> I'm okay with deprecating rakudobrew

[19:20] <tadzik> so feel free to throw in a fitting README change in a PR :)

[19:22] <El_Che> I think many people still use it

[19:24] <patrickb> tadzik: OK, will do!

[19:24] <patrickb> El_Che: What do you think is the best way forward?

[19:26] *** lichtkind joined
[19:26] <El_Che> I think binaries and source is the way forward, and rakudobrew could still be a ecosystem tool for those that like or need the functionalities

[19:27] *** robertle left
[19:27] *** lucasb joined
[19:27] <patrickb> El_Che: Not sure I understand. Is there any functionality that rakudobrew provides and rakubrew regressed at?

[19:29] <El_Che> rakudobrew let's you build the source easily. I don't use it myself, but I think some people find that useful

[19:29] <El_Che> lets

[19:29] <El_Che> tadzik is the maintainer, so it's up to him anyways. Just my 2c

[19:32] <tadzik> El_Che: rakubrew is basically patrickb picking up rakudobrew, improving it and maintaning since I stopped, it makes sense to direct users there these days. The usecase is pretty much the same

[19:33] * patrickb is rebooting to linux. Back in a minute or so

[19:33] *** patrickb left
[19:36] *** patrickb joined
[19:39] <[Coke]> tadzik++ patrickb++

[19:50] <El_Che> both your work is appreciated

[19:57] *** hankache left
[20:01] *** kensanata joined
[20:02] <Geth_> ¬¶ doc: jjatria++ created pull request #3342: Corrects minor mistakes on DEPRECATED Attributes

[20:02] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/pull/3342

[20:03] *** molaf joined
[20:04] *** wildtrees joined
[20:10] <Geth_> ¬¶ doc: 6b5e37ba35 | (Konrad Bucheli)++ | doc/Type/Iterable.pod6

[20:10] <Geth_> ¬¶ doc: how to flatten itemized sublists

[20:10] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/6b5e37ba35

[20:10] <Geth_> ¬¶ doc: e8a9199591 | (Konrad Bucheli)++ | 2 files

[20:10] <Geth_> ¬¶ doc: add 'the' where it makes sense

[20:10] <linkable6> Link: https://docs.raku.org/type/Iterable

[20:10] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/e8a9199591

[20:10] <Geth_> ¬¶ doc: f9b80c73cb | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | 2 files

[20:10] <Geth_> ¬¶ doc: Merge pull request #3341 from kbucheli/decontainerize_before_flat

[20:10] <Geth_> ¬¶ doc: 

[20:10] <Geth_> ¬¶ doc: how to flatten itemized sublists on an Iterable

[20:10] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/f9b80c73cb

[20:10] <Geth_> ¬¶ doc: 04965f86fc | (Jos√© Joaqu√≠n Atria)++ (committed using GitHub Web editor) | doc/Type/Attribute.pod6

[20:10] <linkable6> Link: https://docs.raku.org/type/Attribute

[20:10] <Geth_> ¬¶ doc: Corrects minor mistakes on DEPRECATED Attributes

[20:10] <Geth_> ¬¶ doc: 

[20:10] <Geth_> ¬¶ doc: The previous phrasing made it sound like calling `DEPRECATED` was somehow mandatory for attributes marked as such, which is probably not what is meant.

[20:10] <Geth_> ¬¶ doc: 

[20:10] <Geth_> ¬¶ doc: This patch also corrects the name of a variable used in an example.

[20:10] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/04965f86fc

[20:10] <Geth_> ¬¶ doc: 3df3f38478 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Attribute.pod6

[20:10] <Geth_> ¬¶ doc: Merge pull request #3342 from jjatria/patch-1

[20:10] <Geth_> ¬¶ doc: 

[20:10] <Geth_> ¬¶ doc: Corrects minor mistakes on DEPRECATED Attributes

[20:10] <Geth_> ¬¶ doc: review: https://github.com/Raku/doc/commit/3df3f38478

[20:12] *** guifa2 joined
[20:19] *** stoned75 joined
[20:32] *** rainmanjam joined
[20:49] *** clarkema joined
[20:52] *** Ven`` left
[21:00] *** rindolf left
[21:03] *** aborazmeh joined
[21:03] *** aborazmeh left
[21:03] *** aborazmeh joined
[21:10] *** aborazmeh left
[21:12] <patrickb> tadzik: https://github.com/tadzik/rakudobrew/pull/152

[21:13] *** aborazmeh joined
[21:13] *** aborazmeh left
[21:13] *** aborazmeh joined
[21:14] *** donaldh joined
[21:14] <tadzik> patrickb: merged, thanks :)

[21:15] *** sena_kun joined
[21:15] <guifa2> What is the advantage to using proto token foo:sym<bar> instead of just proto token foo:bar ?

[21:16] *** Altai-man_ left
[21:18] *** pilne joined
[21:18] *** pilne left
[21:19] *** discoD joined
[21:21] <chloekek> p6: say vCard.raku;

[21:21] <camelia> rakudo-moar a4906a713: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    vCard used at line 1‚ê§‚ê§¬ª

[21:21] *** mowcat left
[21:25] *** patrickb left
[21:26] *** patrickb joined
[21:26] *** sena_kun left
[21:27] *** Summertime left
[21:27] *** Summertime joined
[21:30] *** Black_Ribbon joined
[21:31] *** pilne joined
[21:31] *** chloekek left
[21:32] <jdv79> how does one interpolate a method call in a regex?

[21:33] <jdv79> m: class c { method m {"asdf"}; method r {"foo" ~~ /<{self.m}>/} }; c.new.r

[21:33] <camelia> rakudo-moar a4906a713: OUTPUT: ¬´No such method 'm' for invocant of type 'Match'‚ê§  in method r at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:34] *** dogbert17 joined
[21:38] *** kensanata left
[21:41] *** aborazmeh left
[21:44] *** girafe left
[21:47] *** aborazmeh joined
[21:47] *** aborazmeh left
[21:47] *** aborazmeh joined
[21:48] *** stoned75 left
[21:52] <guifa2> The self in that case ends up giong to the Regex object IIRC, I'd store self in a var and reference that

[21:54] <guifa2> jdv79: m: class c { method m {"a"}; method r { my $self := self; "abc" ~~ /<{$self.m}>/} }; c.new.r

[21:54] <guifa2> m: class c { method m {"a"}; method r { my $self := self; "abc" ~~ /<{$self.m}>/} }; say c.new.r

[21:54] <camelia> rakudo-moar a4906a713: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[21:55] *** Doc_Holliwood left
[22:03] *** patrickb left
[22:03] *** softmoth left
[22:04] *** softmoth joined
[22:09] *** Redfoxmoon left
[22:09] *** softmoth left
[22:09] *** softmoth joined
[22:11] *** kensanata joined
[22:23] *** guifa2 left
[22:26] <jdv79> .seen ufobat

[22:26] <tellable6> jdv79, I saw ufobat 2019-12-12T16:29:03Z in #raku: <ufobat> what would you suggest to install raku, rakudobrew or install the sources from rakudo.org (manually)?

[22:36] *** __jrjsmrtn__ left
[22:36] *** __jrjsmrtn__ joined
[22:41] *** rbt left
[22:42] *** rbt joined
[22:50] *** kensanata left
[22:52] *** softmoth left
[22:55] *** oneeggeach joined
[22:55] *** oneeggeach left
[23:11] *** guifa2 joined
[23:12] *** clarkema left
[23:14] *** lichtkind left
[23:40] *** wildtrees left
[23:49] *** k-man_ joined
[23:50] *** k-man left
[23:53] <discord6> <BrightLight> Hello, new to Raku; I come with a background of Common Lisp, D, and Forth. I have a question about Raku's compilation model - are there any particular semantics in Raku that make it difficult for it to be fully native code? In the common lisp world, despite being dynamically typed and image-based, most implementations are high-performing native, incremental compilers. Even the most dynamic of code (redefinition of classes and metaobject

[23:53] <discord6> protocol stuff) is compiled to machine code. What pitfalls does Raku have that prevent it from doing the same? Thank you in advance.

[23:54] *** softmoth joined
[23:55] *** MasterDuke left
[23:55] <timotimo> with moarvm we're relying on dynamic specialization to gain performance, which also includes jit-compiling to machine code

[23:57] <timotimo> i can answer more specific questions

[23:57] <discord6> <BrightLight> Is there an option of AOT compilation to machine code?

[23:58] <timotimo> there is not, unless someone secretly developed such a thing

