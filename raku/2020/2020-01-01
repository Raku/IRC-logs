[00:19] *** pilne joined
[00:30] *** RobRaku joined
[00:42] *** sena_kun left
[00:57] *** sena_kun joined
[01:10] *** chloekek left
[01:21] *** RobRaku left
[01:46] *** wildtrees left
[01:58] *** mahmudov left
[01:58] *** mahmudov joined
[02:36] *** mahmudov left
[02:41] *** sena_kun left
[02:57] *** sena_kun joined
[04:42] *** sena_kun left
[04:56] *** sena_kun joined
[05:40] *** Voldenet left
[05:45] *** Voldenet joined
[05:45] *** Voldenet left
[05:45] *** Voldenet joined
[05:53] *** johnjohn101 left
[06:42] *** sena_kun left
[06:57] *** sena_kun joined
[07:13] *** holyghost left
[07:51] *** wamba joined
[08:03] *** Poohmaan joined
[08:07] *** Poohman left
[08:16] *** mahmudov joined
[08:25] *** mahmudov left
[08:30] *** benjif_ joined
[08:32] *** benjif left
[08:35] *** jmerelo joined
[08:36] *** rindolf joined
[08:42] *** sena_kun left
[08:53] *** rindolf left
[08:58] *** sena_kun joined
[08:59] *** rindolf joined
[09:04] *** mahmudov joined
[09:07] *** xinming left
[09:07] *** xinming joined
[09:09] *** holyghost joined
[09:14] *** AlexDaniel left
[09:14] *** AlexDaniel joined
[09:14] *** AlexDaniel left
[09:14] *** AlexDaniel joined
[09:29] <AlexDaniel> m: say DateTime.new("2020-01-01T10:00:00").later(:5seconds-on-mars)

[09:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «2020-01-01T10:00:05Z␤»

[09:30] <Geth_> ¦ doc: 950cb60b74 | (Stoned Elipot)++ | doc/Language/typesystem.pod6

[09:30] <Geth_> ¦ doc: xref HyperWhatever

[09:30] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/950cb60b74

[09:31] <AlexDaniel> sourceable6: DateTime.new("2020-01-01T10:00:00").later(:5seconds-on-mars)

[09:31] <sourceable6> AlexDaniel, https://github.com/rakudo/rakudo/blob/186c4ce/src/core.c/DateTime.pm6#L318

[09:32] *** mahmudov left
[09:37] *** mahmudov joined
[09:38] <jmerelo> releasable6: status

[09:38] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 0 out of 323 commits logged

[09:38] <releasable6> jmerelo, Details: https://gist.github.com/43366d654d32bab5acf4f599d0d94399

[09:38] <AlexDaniel> sena_kun: btw can you change the release guide file so that releasable6 picks up the new estimated date?

[09:40] <Xliff> Happy New Year, everyone

[09:42] <jmerelo> Happy new year!

[09:42] <Xliff> m: DateTime.now.later.^candidates.name.say

[09:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «No time unit supplied␤  in block <unit> at <tmp> line 1␤␤»

[09:42] <Xliff> m: DateTime.now.later.^candidates.say

[09:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «No time unit supplied␤  in block <unit> at <tmp> line 1␤␤»

[09:42] <Xliff> m: (&DateTime.now.later).^candidates.say

[09:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Illegally post-declared type:␤    DateTime used at line 1␤␤»

[09:43] <Xliff> m: DateTime.now.^can('later').candidates.say

[09:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «No such method 'candidates' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[09:43] <Xliff> m: DateTime.now.^can('later').elems.name.say

[09:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «No such method 'name' for invocant of type 'Int'. Did you mean any of these?␤    base␤    none␤    note␤    take␤␤  in block <unit> at <tmp> line 1␤␤»

[09:43] <Xliff> m: DateTime.now.^can('later').map( *.signature ).gist.say

[09:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «((DateTime:D: :$earlier, *%unit --> DateTime:D))␤»

[09:44] <AlexDaniel> Xliff: I mean… sourceable6 gave the right link…

[09:44] <Xliff> AlexDaniel: How does sourceable resolve that code to a file and line number?

[09:44] <AlexDaniel> Xliff: magic

[09:44] <Xliff> I mean... you showed a gist, earlier...

[09:45] <AlexDaniel> I don't have the debug output for this case but yes it uses bruteforce :)

[09:45] <AlexDaniel> https://gist.github.com/AlexDaniel/46495f595cac5de74026b27bbb93ab94

[09:46] <Xliff> m: DateTime.now.^can('later').map( *.cando( \( :later ) ).gist.say

[09:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3r').map( *.cando( \( :later ) ).gist.say7⏏5<EOL>␤»

[09:47] <AlexDaniel> https://github.com/perl6/whateverable/blob/f645470099a5230bea2ee06251087b6cd8592899/xbin/Sourceable.p6#L49-L70

[09:47] <Xliff> m: DateTime.now.^can('later').map( *.cando( \( :$later ) ).gist.say

[09:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$later' is not declared␤at <tmp>:1␤------> 3ime.now.^can('later').map( *.cando( \( :7⏏5$later ) ).gist.say␤»

[09:48] <AlexDaniel> m: my $code = ｢DateTime.new("2020-01-01T10:00:00").later(:5seconds-on-mars)｣; my @wild-guesses = gather { for $code ~~ m:ex/^ (.+) ‘.’ (<[\w-]>+) [ [‘: ’ (.*)] | [‘(’ (.*) ‘)’]? ] $/ -> $/ { take ｢(%s).^can(‘%s’).map(*.cando(\((%s), |\(%s)))).first(*.so)[0]｣.sprintf: $0, $1, $0, $2 // $3 // ‘’ } }; .say for @wild-guesses

[09:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «(DateTime.new("2020-01-01T10:00:00")).^can(‘later’).map(*.cando(\((DateTime.new("2020-01-01T10:00:00")), |\(:5seconds-on-mars)))).first(*.so)[0]␤(DateTime).^can(‘new’).map(*.cando(\((DateTime), |\("2020-01-01T10:00:00").later(:5seconds-on-ma…»

[09:48] <AlexDaniel> e: my $code = ｢DateTime.new("2020-01-01T10:00:00").later(:5seconds-on-mars)｣; my @wild-guesses = gather { for $code ~~ m:ex/^ (.+) ‘.’ (<[\w-]>+) [ [‘: ’ (.*)] | [‘(’ (.*) ‘)’]? ] $/ -> $/ { take ｢(%s).^can(‘%s’).map(*.cando(\((%s), |\(%s)))).first(*.so)[0]｣.sprintf: $0, $1, $0, $2 // $3 // ‘’ } }; .say for @wild-guesses

[09:48] <evalable6> AlexDaniel, rakudo-moar 186c4ce6c: OUTPUT: «(DateTime.new("2020-01-01T10:00:00")).^can(‘l…»

[09:48] <evalable6> AlexDaniel, Full output: https://gist.github.com/43bafac6a76002f4597858f708bc7929

[09:48] <Xliff> m: DateTime.now.^can('later').map( *.cando( \( (:$later) ) ).gist.say

[09:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$later' is not declared␤at <tmp>:1␤------> 3me.now.^can('later').map( *.cando( \( (:7⏏5$later) ) ).gist.say␤»

[09:48] <AlexDaniel> Xliff: ↑ one of these should work

[09:49] <AlexDaniel> m: say (DateTime.new("2020-01-01T10:00:00")).^can(‘later’).map(*.cando(\((DateTime.new("2020-01-01T10:00:00")), |\(:5seconds-on-mars)))).first(*.so)[0]

[09:49] <camelia> rakudo-moar 672c5d403: OUTPUT: «later␤»

[09:49] <AlexDaniel> that one I guess

[09:50] <Xliff> m: DateTime.now.^can('later').map( *.cando( |\(:5seconds-on-uranus) ) ).gist.say

[09:50] <camelia> rakudo-moar 672c5d403: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[09:51] <Xliff> m: DateTime.now.^can('later').map( *.cando( \(DateTime), |\(:5seconds-on-uranus) ) ).gist.say

[09:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «(())␤»

[09:51] <Xliff> m: DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).gist.say

[09:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «((later))␤»

[09:51] <Xliff> m: DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).map( *.^name ).gist.say

[09:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «(List)␤»

[09:51] <Xliff> m: DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).map( *[0].^name ).gist.say

[09:52] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Method)␤»

[09:54] <Xliff> m: ((DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).map( *[0] ) xx 2) ».« (file, name))».say

[09:54] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3onds-on-uranus) ) ).map( *[0] ) xx 2) ».7⏏5« (file, name))».say␤»

[09:54] <Xliff> m: ((DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).map( *[0] ) xx 2) ».» (file, name))».say

[09:54] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3onds-on-uranus) ) ).map( *[0] ) xx 2) ».7⏏5» (file, name))».say␤»

[09:55] <Xliff> m: ((DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).map({ .[0].file, .[0].name }).say

[09:55] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3s) ) ).map({ .[0].file, .[0].name }).say7⏏5<EOL>␤   …»

[09:55] <Xliff> m: (DateTime.now.^can('later').map( *.cando( \(DateTime.now), |\(:5seconds-on-uranus) ) ).map({ .[0].file, .[0].name }).say

[09:55] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3s) ) ).map({ .[0].file, .[0].name }).say7⏏5<EOL>␤   …»

[09:55] <AlexDaniel> well, you can also do that locally, and in private chat with camelia, and on #whateverable, and …

[09:55] <Xliff> :P

[09:55] <Xliff> Like anyone else is talking here.

[09:55] * Xliff stalks off to cuddle camelia.

[09:56] <Geth_> ¦ doc: b2836942d7 | (Stoned Elipot)++ | doc/Language/typesystem.pod6

[09:56] <Geth_> ¦ doc: Be more demonstrative in examples

[09:56] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/b2836942d7

[09:57] <Xliff> I love MOP

[09:57] <Xliff> And people like AlexDaniel give me ideas to do bad things. :D

[09:58] <Xliff> .cando is evil.

[10:00] <Xliff> AlexDaniel++: How long did it take you to write that brute of an algorhythm?

[10:01] <AlexDaniel> two days I think

[10:01] <Xliff> "algorithm"

[10:01] <Xliff> I always get that wrong... :s

[10:01] <Xliff> Oh... and Happy New Year! 8-)

[10:02] <AlexDaniel> CoreHackers::Sourcery does something similar, just without bruteforce: https://github.com/AlexDaniel/perl6-CoreHackers-Sourcery/blob/master/lib/CoreHackers/Sourcery.pm6

[10:02] <Xliff> AlexDaniel: I am thinking about writing a cro based application server... as soon as I can spec one out. 

[10:03] <AlexDaniel> nice

[10:03] *** wamba left
[10:05] *** cpan-raku left
[10:05] <Xliff> AlexDaniel: Aren't your multis for sourcery missing "sub" ?

[10:06] <Xliff> L36-38

[10:06] <Xliff> Oh... and L26

[10:07] <AlexDaniel> it accepts a “thing” and a capture, so I think you can use it for subs

[10:07] <AlexDaniel> sourceable6 doesn't use that module at all so it doesn't matter

[10:08] *** cpan-raku joined
[10:08] *** cpan-raku left
[10:08] *** cpan-raku joined
[10:08] <Xliff> Um... no.

[10:09] <Xliff> shouldn't "multi sourcery" be "multi sub sourcery" ?

[10:09] <AlexDaniel> ah

[10:10] <AlexDaniel> “multi” is a multi sub

[10:10] <Xliff> And yeah... I just got to that part and.... this is really nice!

[10:11] <Xliff> m: multi a (Int) { 'Int' }; multi a (|) { 'Anything else' }; a(42).say; a(π).say

[10:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «Int␤Anything else␤»

[10:11] <Xliff> Huh.

[10:11] <Xliff> TIL

[10:12] <Xliff> OK. Good night! 

[10:16] *** wamba joined
[10:18] <xinming> https://docs.perl6.org/routine/listen   <--- In this page, there is an example which is    $tap = do whenever $listener -> $con { ... }         Anyone here would clarify this for me?  Where did the tap returned from?

[10:18] <xinming> Or,   $tap = do whenever $listener -> $con { ... }     is kind of syntax we should remember.

[10:19] <xinming> I just a little bit confused about this

[10:30] <stoned75> I think the tap is returned from the Supply, which is returned from the IO::Socket::Async.listen()

[10:30] <stoned75> see https://docs.perl6.org/language/concurrency#react

[10:32] <jmerelo> Meanwhile, the Raku Advent Calendar blog has totalled circa 9K visits, 2k visitors for the month. 

[10:32] <jmerelo> Most incoming links from raku.org, followed by slashdot and then the Rakudo Weeekly blog. Top 5 closed by Twitter. So, keep twitting.

[10:33] <jmerelo> Top five countries: US, UK, Germany, France and, surprisingly, Australia. Then Switzerland, Spain, Canada, India and Netherlands.

[10:34] <jmerelo> Most read articles by me (no wonder, the one that opened and closed), tbrowder, altai-man, tyil, scimon. 

[10:35] <jmerelo> I see there are more than a few outgoing links to docs.perl6.org. Anyone that inserted them, please fix that.

[10:38] <jmerelo> Meanwhile, the call for contributors to 2020's advent calendar is officially open https://github.com/Raku/advent/blob/master/raku-advent-2020/authors.md This year there are no preassigned slots, and we'll admit as many authors as request it. But articles will need to be ready by Dec 1st, and will be scheduled when ready.

[10:39] <jmerelo> If there are more than 24 articles, we'll publish them as bonus articles.

[10:42] *** sena_kun left
[10:46] *** rindolf left
[10:47] *** rindolf joined
[10:58] *** sena_kun joined
[11:08] *** sena_kun left
[11:09] *** sena_kun joined
[11:22] *** mahmudov left
[12:06] *** mahmudov joined
[12:25] *** chloekek joined
[12:28] <sarna> is [1,2,3] any different from [1;2;3]?

[12:38] <chloekek> p6: say [1,2,3] cmp [1;2;3]

[12:38] <camelia> rakudo-moar 672c5d403: OUTPUT: «Same␤»

[12:38] <chloekek> p6: say [1,2,3].perl eq [1;2;3].perl

[12:38] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[12:39] <sarna> nice, thanks

[12:41] <AlexDaniel> m: say [1,2;3,4;5,6]

[12:41] <camelia> rakudo-moar 672c5d403: OUTPUT: «[(1 2) (3 4) (5 6)]␤»

[12:41] *** sena_kun left
[12:45] <chloekek> p: say [1,;2]

[12:45] <chloekek> p6: say [1,;2]

[12:45] <camelia> rakudo-moar 672c5d403: OUTPUT: «[(1) 2]␤»

[12:46] <chloekek> p6: my @xs := 1, 2, 3; say [@xs].perl

[12:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «[1, 2, 3]␤»

[12:46] <chloekek> p6: my @xs := (1; 2; 3); say @xs.perl

[12:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «(1, 2, 3)␤»

[12:46] <chloekek> It seems that , and ; are both list constructors, and [] is just a circumfix operator that creates an array from a list.

[12:52] <sarna> I like , more :)

[12:53] <sarna> m: "1234".trim.comb

[12:53] <camelia> rakudo-moar 672c5d403: ( no output )

[12:53] <sarna> m: dd "1234" .trim.comb # note the space

[12:53] <camelia> rakudo-moar 672c5d403: OUTPUT: «("1", "2", "3", "4").Seq␤»

[12:53] <sarna> m: dd "1234".trim.comb>>.Int # no space

[12:53] <camelia> rakudo-moar 672c5d403: OUTPUT: «(1, 2, 3, 4)␤»

[12:54] <sarna> m: dd "1234" .trim.comb>>.Int # space anywhere

[12:54] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing << or >>␤at <tmp>:1␤------> 3dd "1234" .trim.comb>>.7⏏5Int # space anywhere␤»

[12:54] <sarna> why? :(

[12:54] <sarna> can I resolve that ambiguity somehow?

[12:54] <lizmat> precedence

[12:56] *** sena_kun joined
[12:56] <lizmat> m: dd ("1234" .comb)>>.Int    # sarna

[12:56] <camelia> rakudo-moar 672c5d403: OUTPUT: «(1, 2, 3, 4)␤»

[12:58] <sarna> lizmat: I see. I encountered this when I split a call into multiple lines, and parens don't really look well there :(

[12:58] <sarna> I'm using .map instead now

[12:59] <lizmat> that should work fine as well  :-)

[12:59] <lizmat> m: dd "1234" .comb.map: *.Int

[12:59] <camelia> rakudo-moar 672c5d403: OUTPUT: «(1, 2, 3, 4).Seq␤»

[13:15] <chloekek> p6: say "1234".comb »+» 0

[13:15] <camelia> rakudo-moar 672c5d403: OUTPUT: «(1 2 3 4)␤»

[13:16] <sarna> okay, I don't get this

[13:17] <sarna> m: my $test = False; my $foo = 0; $test ?? Nil !! $foo += 1; dd $foo

[13:17] <camelia> rakudo-moar 672c5d403: OUTPUT: «Int $foo = 1␤»

[13:17] <sarna> why is $foo 1 now?

[13:17] <chloekek> Because $test is false so it executes the part after the !!.

[13:18] <chloekek> m: my $test = True; my $foo = 0; $test ?? Nil !! $foo += 1; dd $foo

[13:18] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot modify an immutable Str (Nil)␤  in block <unit> at <tmp> line 1␤␤»

[13:18] <sarna> I don' goofd!

[13:18] <chloekek> And apparently ?? !! has higher precedence than += lmao

[13:18] <chloekek> m: my $test = True; my $foo = 0; $test ?? Nil !! ($foo += 1); dd $foo

[13:18] <camelia> rakudo-moar 672c5d403: OUTPUT: «Int $foo = 0␤»

[13:19] <sarna> m: my $test = True; my $foo = 0; $test ?? $foo !! $foo += 1; dd $foo

[13:19] <camelia> rakudo-moar 672c5d403: OUTPUT: «Int $foo = 1␤»

[13:19] <sarna> :I

[13:19] <sarna> should I file a bug report, I don't think this should happen

[13:20] <chloekek> You can do that in C++ too but the precedence is different. :)

[13:20] <chloekek> (a ? b : c) += 1;

[13:21] <sarna> shouldn't ?? !! have the lowest precedence? so I don't have to wrap the stuff inside in ()

[13:21] <moritz> m: my $test = True; my $foo = 0; $test ?? $foo !! ($foo += 1); dd $foo

[13:21] <camelia> rakudo-moar 672c5d403: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $foo in sink context (line 1)␤Int $foo = 0␤»

[13:21] <chloekek> That would make sense.

[13:21] <moritz> precedence misuse, not a bug

[13:21] <chloekek> ??!! seems to have rather high precedence: https://docs.raku.org/language/operators

[13:22] <moritz> and that's because you often use them as the RHS of an assignment

[13:22] <chloekek> But only one level higher than assignment.

[13:22] <moritz> $a = $b ?? $c !! $d

[13:22] <moritz> for that, it needs to be tighter than assignment

[13:23] <sarna> oh.. yeah I'll have to remember this then

[13:23] <moritz> and since += inherits its prec from = (and not +), it causes confusion when you use += inside ?? !!

[13:23] <sarna> thanks for the help :)

[13:23] <sarna> yeah

[13:27] *** mahmudov left
[13:27] <moritz> my pleasure

[13:28] <chloekek> Enough questionable mutation syntax, time to watch MRE reviews.

[13:50] <tbrowder> happy new year, #raku people!

[13:51] <tbrowder> lizmat: i checked and domain "raku-advent-calendar.blog" is available

[13:52] <tbrowder> are there any nay votes?

[13:55] <tbrowder> MRE?

[13:55] <tbrowder> meals ready to eat?

[13:59] <tadzik> mmm MREs

[14:00] <chloekek> Military rations

[14:37] <uzl[m]> Happy new year to everyone!!!

[14:37] <tellable6> 2019-12-25T22:02:42Z #raku <sena_kun> uzl[m] hi! it seems there are some issues with installing https://modules.raku.org/dist/QM:cpan:UZLUISF, it would be awesome if you could check it out, doesn't seem like a recent regression

[14:38] <uzl[m]> sena_kun: Thanks for letting me know. Will check it out when I've the time.

[14:39] *** mahmudov joined
[14:42] *** sena_kun left
[14:43] <xinming> https://docs.perl6.org/routine/listen   <--- In this page, there is an example which is    $tap = do whenever $listener -> $con { ... }     returns tap instead of last state ment the block.

[14:49] *** Manifest0 left
[14:58] *** sena_kun joined
[14:58] *** patrickb joined
[15:07] <Poohmaan> Wishing you all a very happy and blessed new year!

[15:19] *** Manifest0 joined
[15:21] <Poohmaan> m:@lines = [ 'name = aa; age = 10', 'name = cc; age = 11', 'name = bb; age = 12']; @lines.sort

[15:21] <evalable6> Poohmaan, rakudo-moar 186c4ce6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[15:21] <evalable6> Poohmaan, Full output: https://gist.github.com/16d9f47b4a08cd3214995eeb332d07b3

[15:21] <Poohmaan> m: @lines = [ 'name = aa; age = 10', 'name = cc; age = 11', 'name = bb; age = 12']; @lines.sort

[15:21] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@lines' is not declared. Did you mean '&lines'?␤at <tmp>:1␤------> 3<BOL>7⏏5@lines = [ 'name = aa; age = 10', 'name ␤»

[15:21] <Poohmaan> m:my @lines = [ 'name = aa; age = 10', 'name = cc; age = 11', 'name = bb; age = 12']; @lines.sort

[15:21] <evalable6> Poohmaan, rakudo-moar 186c4ce6c: OUTPUT: «»

[15:21] <Poohmaan> m:my @lines = [ 'name = aa; age = 10', 'name = cc; age = 11', 'name = bb; age = 12']; say @lines.sort

[15:21] <evalable6> Poohmaan, rakudo-moar 186c4ce6c: OUTPUT: «(name = aa; age = 10 name = bb; age = 12 name = cc; age = 11)␤»

[15:23] <Poohmaan> hello all, how can I sort using the age in the above example - in other words, how can I use a customer routine in sort in this case - for example, read lines from file, use regex or json to get a particular field to sort

[15:31] *** wamba left
[15:32] <AlexDaniel> m: my @lines = [ 'age=15', 'age=11', 'age=12']; say @lines.sort(+*.split(‘=’)[1])

[15:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=11 age=12 age=15)␤»

[15:32] <AlexDaniel> Poohmaan: I'm not sure I understand the question. You'd have to parse the data yourself

[15:35] *** wamba joined
[15:36] <Poohmaan>  m: my @lines = [ 'age=15', 'age=11', 'age=12']; say @lines.sort

[15:36] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=11 age=12 age=15)␤»

[15:37] <AlexDaniel> m: my @lines = [ 'age=9', 'age=11', 'age=12']; say @lines.sort(+*.split(‘=’)[1])

[15:37] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=9 age=11 age=12)␤»

[15:37] <AlexDaniel> m: my @lines = [ 'age=9', 'age=11', 'age=12']; say @lines.sort

[15:37] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=11 age=12 age=9)␤»

[15:42] *** wamba left
[15:43] *** wamba joined
[16:15] <chloekek> m: my @lines = [ 'age=15', 'age=11', 'age=12']; say @lines.coll

[16:15] <camelia> rakudo-moar 672c5d403: OUTPUT: «No such method 'coll' for invocant of type 'Array'. Did you mean any of these?␤    Bool␤    all␤    comb␤    conj␤␤  in block <unit> at <tmp> line 1␤␤»

[16:15] <chloekek> m: my @lines = [ 'age=15', 'age=11', 'age=12']; say @lines.collate

[16:15] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=11 age=12 age=15)␤»

[16:15] <chloekek> m: my @lines = [ 'age=15', 'age=11', 'age=2']; say @lines.collate

[16:15] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=11 age=15 age=2)␤»

[16:15] *** thundergnat joined
[16:15] <chloekek> L A M E

[16:18] <thundergnat> Poohmaan: Depending on your usage, it may be easier to set-up and work with an HoH instead of an AoH. 

[16:18] <thundergnat> m: https://gist.github.com/thundergnat/fadc9a77b9e53d308f13ec0945c43687

[16:18] <camelia> rakudo-moar 672c5d403: OUTPUT: «Sorted by age, descending:␤ID# 2) Name: bb, Age: 22␤ID# 3) Name: cc, Age: 11␤ID# 1) Name: aa, Age: 9␤»

[16:19] <thundergnat> (Or an array of strings,  I guess.) 

[16:23] <thundergnat> Though I guess if you really want to you could do something like:

[16:23] <thundergnat> use Sort::Naturally; put [ 'age=15', 'age=11', 'age=2'].sort: &naturally; # -> (age=2 age=11 age=15)

[16:23] *** johnjohn101 joined
[16:35] <chloekek> Oh this is actually quite the footgun.

[16:35] <chloekek> p6: sub f($x) { my @a = $x; say @a.perl }; f((1, 2, 3));

[16:35] <camelia> rakudo-moar 672c5d403: OUTPUT: «[(1, 2, 3),]␤»

[16:35] <chloekek> Oh it’s fine.

[16:35] <chloekek> p6: sub f($x is raw) { my @a = $x; say @a.perl }; f((1, 2, 3));

[16:35] <camelia> rakudo-moar 672c5d403: OUTPUT: «[1, 2, 3]␤»

[16:41] *** sena_kun left
[16:47] <chloekek> p6: sub f($x) { $x = 1 }; f(1)

[16:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:48] <chloekek> p6: sub f($x) { say $x.VAR.WHAT }; f(1)

[16:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Scalar)␤»

[16:50] <chloekek> So scalars can be “read-only”?

[16:51] <chloekek> Is it possible to make a my variable a read-only Scalar?

[16:51] <chloekek> p6: my $x := $(1); say $x.VAR

[16:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «1␤»

[16:51] <chloekek> p6: my $x := $(1); say $x.VAR.WHAT

[16:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Int)␤»

[16:56] <chloekek> p6: sub f($x) is raw { $x }; my $a := f(1); say $a.VAR.WHAT

[16:56] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Scalar)␤»

[16:56] <chloekek> p6: sub f($x) is raw { $x }; my $a := f(1); $a = 2

[16:56] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot assign to a readonly variable or a value␤  in block <unit> at <tmp> line 1␤␤»

[16:56] <chloekek> :)

[16:56] *** sena_kun joined
[16:58] *** rindolf left
[17:06] *** veesh_ joined
[17:07] <Poohmaan> Thanks AlexDaniel and thundergnat

[17:07] *** veesh left
[17:07] *** veesh_ is now known as veesh

[17:09] <Poohmaan> My question is about the function for the sort function - I read that I can give sort a "custom routine" of my own

[17:10] <Poohmaan> if I use a function - how can I access the members of the array in the function

[17:11] <sena_kun> two arguments will be passed to a function

[17:11] <Poohmaan>  m: my @lines = [ 'age=15', 'age=11', 'age=12']; say @lines.sort(my_function)

[17:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    my_function used at line 1␤␤»

[17:11] <sena_kun> e.g.

[17:11] <sena_kun> m: [6,1,2,3,4,5].sort({ $^a < $^b }).say;

[17:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «(6 5 4 3 2 1)␤»

[17:11] <sena_kun> but

[17:11] <sena_kun> m: [6,1,2,3,4,5].sort({ $^a > $^b }).say;

[17:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «(1 2 3 4 5 6)␤»

[17:11] <sena_kun> m: [6,1,2,3,4,5].sort(-> $a, $b { $a < $b }).say

[17:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «(6 5 4 3 2 1)␤»

[17:12] <sena_kun> or

[17:12] <sena_kun> m:  sub f($a, $b) { $a < $b }; [6,1,2,3,4,5].sort(&f).say

[17:12] <camelia> rakudo-moar 672c5d403: OUTPUT: «(6 5 4 3 2 1)␤»

[17:12] <sena_kun> Poohmaan: ^ with a function

[17:13] <sena_kun> if you want to access attributes of objects sorted, you can just use getter of $a and $b

[17:14] <Poohmaan> let me try that 

[17:14] <Poohmaan> sena_kun: thanks

[17:14] <sena_kun> m: my @lines = 'age=15', 'age=11', 'age=12'; say @lines.sort(-> $a, $b { $a.split('=')[1].Int < $b.split('=')[1].Int }).say;

[17:14] <camelia> rakudo-moar 672c5d403: OUTPUT: «(age=15 age=12 age=11)␤True␤»

[17:15] <sena_kun> while in reality I suggest you to check if the input is valid, of course

[17:16] <Poohmaan> gotcha

[17:16] <Poohmaan> thanks

[17:18] <johnjohn101> what is the latest version of raku?

[17:19] <sena_kun> language or compiler?

[17:21] <johnjohn101> i want to install on ubuntu... 

[17:21] <sena_kun> johnjohn101: https://github.com/nxadm/rakudo-pkg#os-repositories <-

[17:21] *** veesh left
[17:21] <johnjohn101> thanks

[17:22] *** rindolf joined
[17:26] <chloekek> 2019.11 is the latest version.

[17:26] <chloekek> You can find the list of versions on https://github.com/rakudo/rakudo/releases

[17:28] <Geth_> ¦ doc: 4a05a2f8df | (JJ Merelo)++ | doc/Type/Map.pod6

[17:28] <Geth_> ¦ doc: Links to the page

[17:28] <Geth_> ¦ doc: 

[17:28] <Geth_> ¦ doc: Within-page links will not work when that fragment is included somewhere else. Closes #3130

[17:28] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/4a05a2f8df

[17:35] <Geth_> ¦ doc: e09686fee1 | (JJ Merelo)++ | doc/Type/Map.pod6

[17:35] <Geth_> ¦ doc: Reflow

[17:35] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/e09686fee1

[17:37] *** wildtrees joined
[17:38] <Poohmaan> thanks - got my sort working

[17:39] <Geth_> ¦ doc: 4a64a52412 | (JJ Merelo)++ | doc/Type/Map.pod6

[17:39] <Geth_> ¦ doc: Another instance for #3130 fixed.

[17:39] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/4a64a52412

[17:40] <jmerelo> releasable6: status

[17:40] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 0 out of 323 commits logged

[17:40] <releasable6> jmerelo, Details: https://gist.github.com/30bb3b8197f4b2250f538d4297ba8a85

[17:41] <sena_kun> jmerelo: release will happen mid-January, I hope

[17:42] <jmerelo> sena_kun: great :-)

[17:43] *** veesh joined
[17:45] <Poohmaan> just curious, is all this possible in other dynamic languages

[17:45] <sena_kun> sure, why not

[17:46] <sena_kun> maybe in different syntactic ways, of course

[17:46] <Poohmaan> I meant usage of functions and user defined routines directly as arguments for sort

[17:47] <Poohmaan> functional first languages would support them

[17:47] <Grinnz> it was originally a feature of perl, yes

[17:47] <Grinnz> perl hasn't quite got it looking as pretty as raku does yet

[17:50] <Poohmaan> because I was able to read the line from the file - parse it as Json in the function and then use that as an argument for the sort - found that to be pretty cool

[17:50] <Poohmaan> thanks again all

[17:51] <stoned75> hi. where can I find an usage example of traits leading_docs or trailing_docs ?

[17:52] <jmerelo> stoned75: hi. Great work, BTW, in the documentation

[17:52] <tobs> `sub f { 42 }; say &f` <- I tripped over this more than once when switching between Raku and Perl...

[17:52] <stoned75> jmerelo: you're welcome !

[17:52] <jmerelo> stoned75: I'll tell you all my dirty tricks as a documentor

[17:52] <stoned75> nice ! :)

[17:53] <jmerelo> stoned75: first, you look in roast. If it's spec, there's a high likelihood there's some example there.

[17:53] *** veesh left
[17:53] <jmerelo> stoned75: second, look in github at large. Just use the Github search engine to look for examples "in the wild". Even if something has not been documented _or_ specced, brave souls sometimes manage to use it in the wild

[17:54] *** veesh joined
[17:54] <jmerelo> stoned75: stoned75 that might turn some code in Rakudo, usually. Which sometimes is hard to follow, even more so if it includes NQP code. The commit that changed the code might help

[17:55] <jmerelo> stoned75: so use git blame to look for the particular commit, which might take you to maybe an issue, or at least some context or additional documentation.

[17:56] <jmerelo> stoned75: that might fail, however. So just start and program an example in the way you think that would work. It might not work, but error messages might put you in the right direction.

[17:56] <stoned75> ok great! many thanks for the hints !

[17:56] <jmerelo> stoned75: or you may github-search the error message and get to the code.

[17:57] <jmerelo> in this case, I couldn't say, really...

[17:57] <jmerelo> stoned75: but please raise an issue anyway, or assign that issue to yourself if it's created.

[17:58] <stoned75> ok understood

[17:59] <jmerelo> stoned75: there's this issue https://github.com/Raku/doc/issues/2825 which's got lots of stuff. Just say in a comment you're working on those.

[18:00] *** cqd joined
[18:00] <stoned75> jmerelo: ok I see

[18:00] <sena_kun> https://github.com/perl6/perl6-examples/issues/66

[18:02] <jmerelo> sena_kun++

[18:05] *** xinming left
[18:05] *** xinming joined
[18:06] <johnjohn101> ok dumb question

[18:07] <johnjohn101> how to i run a raku script?   just need  simple helloworld to get started

[18:07] <Geth_> ¦ doc: 88a0af3b83 | (JJ Merelo)++ | doc/Type/Map.pod6

[18:07] <Geth_> ¦ doc: Reduces line length.

[18:07] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/88a0af3b83

[18:07] <veesh> if you have it installed, there's a REPL where you can do those fun things

[18:08] <veesh> it meaning raku, it comes with the REPL

[18:08] <veesh> otherwise you could use a shebang line `#!/usr/bin/env raku`

[18:08] <veesh> or manually call the raku program on your script

[18:08] <johnjohn101> i just installed using the ppa repo on ubuntu

[18:09] <johnjohn101> i run raku and it can't find the program

[18:10] <johnjohn101> sudo apt-get install rakudo-pkg is what i ran

[18:12] <chloekek> What does perl6 --version say?

[18:12] <johnjohn101> not foud

[18:13] <johnjohn101> ok it's in /opt let me see if in path

[18:14] <Grinnz> that doesn't seem right for something from apt

[18:14] <chloekek> Why would a .deb package install something to /opt

[18:14] <johnjohn101> that is what surprised me

[18:15] <veesh> you use rakudo-pkg?

[18:15] <veesh> it doesn't add raku to your path for you

[18:15] <johnjohn101> what ever was in these instructions

[18:16] <johnjohn101> https://github.com/nxadm/rakudo-pkg#os-repositories

[18:16] <veesh> read a little bit lower, you needa set the path

[18:16] <Grinnz> ahh, not official repo, that makes sense

[18:18] <johnjohn101> ok sorry i was assuming 

[18:20] <stoned75> jmerelo: thanks again. and FIY I tracked down leading_docs to this commit https://github.com/rakudo/rakudo/commit/88d4e039f1212fdd6930ab656a95610e04999754

[18:20] <stoned75> and similarlyfor trailing_docs

[18:21] <stoned75> andso its related to roast/S26-documentation/block-{leading,trailing}.t

[18:24] <xinming> Where can I check the logic for    do whenever please?

[18:25] <jmerelo> stoned75: great job! That one is only for Attributes, however. There are three versions of them.

[18:25] <jmerelo> xinming: is it not well covered in the documentation?

[18:26] <xinming> I just now googled a lot, find nothing, and no any useful info on docs.raku.org either, So, this makes me quite curious about behavior of  'do whenever ... { }',   As far as I tried, It always returns a Tap.new

[18:26] <xinming> jmerelo: Nope.

[18:26] *** cqd left
[18:26] <johnjohn101> ok where is panda?

[18:26] <xinming> jmerelo: there is documentation about whenever, but nothing about   `do whenever`

[18:26] *** cqd joined
[18:26] <jmerelo> johnjohn101: deprecated

[18:26] <jmerelo> xinming: can you please raise an issue?

[18:26] <johnjohn101> how can i install dbiish?

[18:26] <xinming> The only reference is here https://docs.perl6.org/routine/listen

[18:26] <jmerelo> johnjohn101: zef install DBIish

[18:27] <johnjohn101> ok thanks

[18:27] <xinming> jmerelo: Ok.

[18:27] *** cqd left
[18:27] <johnjohn101> sorry complete noob here.

[18:27] <jmerelo> johnjohn101: no problem, just ask

[18:27] <johnjohn101> is that global or per project?

[18:27] <xinming> johnjohn101: You'll love it here, all people here are newbie friendly. :-)

[18:27] <jmerelo> johnjohn101: panda was deprecated some time ago, but it's still in some documentation...

[18:28] <jmerelo> johnjohn101: zef is the only module and dependency management app now

[18:28] <xinming> jmerelo: where should I create the ticket?

[18:29] *** cqd joined
[18:29] *** johnjohn101 left
[18:30] <veesh> why does raku create a .precomp in the directory that it was run in, and not in some fixed location in your home directory?

[18:30] <veesh> my system is littered with lib/.precomps everywhere

[18:31] <xinming> jmerelo: I know it's github, I just don't know the repo for docs. :-)

[18:31] *** johnjohn101 joined
[18:31] <xinming> veesh: Because they are pre-compiled files for faster loading.

[18:31] <veesh> no, but wouldn't you want them in one well-know place on the system

[18:32] <stoned75> jmerelo: roast covers all variations. and as the code involved in their implemention hints it the leading,trailing}_docs really seem to be internals one

[18:32] <stoned75> and indirectly they are documented in language/pod#Declarator_blocks ;-)

[18:32] <xinming> veesh: Well, You asked something I wanted to know, but low priority to me. :-)

[18:33] *** chloekek left
[18:40] <stoned75> jmerelo: and I found the answer to my original question: "and usage example of traits trailing_docs" :-)

[18:41] <stoned75> it is in rakudo/src/Perl6/Pod.nqp:document() ;-)

[18:42] <stoned75> eg https://github.com/rakudo/rakudo/blob/master/src/Perl6/Pod.nqp#L152

[18:42] *** sena_kun left
[18:57] *** sena_kun joined
[19:00] <xinming> jmerelo: https://github.com/Raku/doc/issues/3136

[19:00] <jmerelo> xinming: https://github.com/Raku/doc Recently moved

[19:00] <jmerelo> stoned75: great :-)

[19:00] <xinming> Yea, I just googled the address

[19:00] <jmerelo> xinming: sorry, got distracted 

[19:02] <xinming> Ok, It'll be best if you tell me what exactly does `do whenever` do :-)\

[19:09] <uzl[m]> .tell Poohmaan You could use an array of Pairs instead. That would simplify the body of the sub/block passed to sort. E.g., my @lines = age => 15, age => 11, age => 12; @lines.sort(-> $a, $b { $a.value > $b.value }).say

[19:09] <tellable6> uzl[m], I'll pass your message to Poohmaan

[19:13] *** kensanata joined
[19:13] <jmerelo> xinming: thanks!

[19:28] <uzl[m]> m: my %h = :1a; my %o = l => %(:2b, :3c); %h.push(%o<l>); say %h;

[19:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «Trailing item in Hash.push␤{a => 1}␤  in block <unit> at <tmp> line 1␤»

[19:28] *** wamba left
[19:28] <uzl[m]> How do I append a hash to another hash?

[19:30] <wildtrees> you could convert them both to arrays of key value pairs, then concatenate the arrays together to form a new array, then convert the new array into the final hash, but you might lose some information if there are key collisions 

[19:30] <wildtrees> not sure how to do that in perl6 though :-/ 

[19:31] <lizmat> wildtrees: you mean raku?  :-)

[19:31] <uzl[m]> m: my %h = :1a; my %o = l => %(:2b, :3c); for %o<l>.pairs { %h{$_.key} = $_.value }; say %h

[19:31] <camelia> rakudo-moar 672c5d403: OUTPUT: «{a => 1, b => 2, c => 3}␤»

[19:31] <jmerelo> m: my %one = :a, :b; my %two = :c, :d; say %one ∪ % two

[19:31] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3= :a, :b; my %two = :c, :d; say %one ∪ %7⏏5 two␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement e…»

[19:32] <jmerelo> m: my %one = %(:a, :b); my %two = %(:c, :d); say %one ∪ % two

[19:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3, :b); my %two = %(:c, :d); say %one ∪ %7⏏5 two␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement e…»

[19:32] <uzl[m]> I figured I could do as above but I'm wondering if there's something simpler.

[19:32] <jmerelo> m: my %one = %(:a, :b).Bag; my %two = %(:c, :d).Bag; say (%one ∪ % two).Hash

[19:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3; my %two = %(:c, :d).Bag; say (%one ∪ %7⏏5 two).Hash␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤       …»

[19:32] <lizmat> m: my %a = a => 42; my %b = b => 666; my %c = %a, %b; dd %c

[19:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «Hash %c = {:a(42), :b(666)}␤»

[19:32] <lizmat> m: my %a = a => 42; my %b = b => 666; my %c = %a, %b; dd %c

[19:32] <veesh> m: my %one = (:a, :b); my %two = (:c, :d); say %one ∪ %two

[19:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «Hash %c = {:a(42), :b(666)}␤»

[19:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «set(a b c d)␤»

[19:33] <jmerelo> lizmat++

[19:33] <jmerelo> The union would have been cool...

[19:34] *** chloekek joined
[19:35] <uzl[m]> m: my %h = :1a; my %o = l => %(:2b, :3c, :4a); %h = %h, |%o<l>; say %h

[19:35] <camelia> rakudo-moar 672c5d403: OUTPUT: «{a => 4, b => 2, c => 3}␤»

[19:35] <uzl[m]> my %h = :1a; my %o = l => %(:2b, :3c); %h ,= |%o<l>; say %h

[19:35] <evalable6> uzl[m], rakudo-moar 74aea8299: OUTPUT: «{a => 1, b => 2, c => 3}␤»

[19:36] <jmerelo> m: my %h = :1a; my %o = %(:2b, :3c); %h ,= %o; say %h   

[19:36] <camelia> rakudo-moar 672c5d403: OUTPUT: «{a => 1, b => 2, c => 3}␤»

[19:36] <uzl[m]> ^ seems to be fine as long as there's no collisions.

[19:37] <lizmat> m: my %a = a => 42; my %b = a => 666; my %c = %a, %b; dd %c   # last one wins

[19:37] <camelia> rakudo-moar 672c5d403: OUTPUT: «Hash %c = {:a(666)}␤»

[19:38] <wildtrees> whats dd? 

[19:38] <lizmat> dd is the tiny data dumper, so tiny it lost its t

[19:39] <jmerelo> wildtrees: a pretty printer, basically. Also, rakudo-specific

[19:39] <lizmat> it basically does `note arg.perl`

[19:39] <lizmat> with some extra checks and introspection

[19:39] *** lucasb joined
[19:45] *** jmerelo left
[20:02] *** chloekek left
[20:05] *** wamba joined
[20:35] *** mahmudov left
[20:41] *** sena_kun left
[20:41] *** chloekek joined
[20:44] *** mahmudov joined
[20:55] *** sena_kun joined
[21:25] *** kensanata left
[21:30] <tbrowder> any blockers or nay votes for domain name “raku-advent-calendar.blog”? going twice...

[21:31] <sena_kun> tbrowder: raku-advent.blog is?

[21:32] <tbrowder> proposed website name for the new raku advent calendar

[21:33] *** chloekek left
[21:33] *** rindolf left
[21:35] <sena_kun> tbrowder: sorry, I mean, can't we get a shorter name, `raku-advent.blog`, or `raku-advent-calendar.blog` is the only option?

[21:38] <tbrowder> well, that was lizmat’s suggestion. what do you suggest? i do like the .blog tld. you should be able to test  to see if your desired name is available before proposing it.

[21:39] <tbrowder> try using any registrar for the search, i use namecheap.com

[21:40] <tbrowder> i do like raku-advent.blog

[21:40] <tbrowder> lizmat: ^^^

[21:40] <tbrowder> jmerelo: ^^^

[21:40] <tellable6> tbrowder, I'll pass your message to jmerelo

[21:40] <tbrowder> moritz: ^^^

[21:40] <lizmat> fine by me  :-)

[21:44] <tbrowder> ok, both “raku-advent.blog” and “rakuadvent.blog” are available...

[21:47] *** cpan-raku left
[21:47] *** cpan-raku joined
[21:47] *** cpan-raku left
[21:47] *** cpan-raku joined
[21:49] <tbrowder> i’m reluctant to choose a name without more than a couple of up votes

[22:13] *** Jack-20 joined
[22:13] <Jack-20> hi

[22:14] <Jack-20> what is the difference between "carton" and "cpanmius" ?

[22:30] *** wamba left
[22:41] *** sena_kun left
[22:56] *** sena_kun joined
[22:59] *** lucasb left
[23:06] *** kensanata joined
[23:07] *** melezhik joined
[23:07] <melezhik> Hi! And happy new year to everyone

[23:09] <melezhik> AlexDaniel: lizmat: chloekek: I've started to implement RakuDist, first report is available, might give you an impression of the idea https://github.com/melezhik/RakuDist

[23:10] <melezhik> I have no final version for the name of service, so far it is RakuDist

[23:10] <lizmat> melezhik: "dicker images" ??

[23:10] <lizmat> :-)

[23:10] <melezhik> upss

[23:10] <melezhik> fixed

[23:11] <melezhik> it got passed by my nano/aspell 

[23:12] <melezhik> the thing is everyone could drop a very simple high-level scenario to prepare environment to test theirs modules, using Sparrow6 DSL,  for example - https://github.com/melezhik/RakuDist/blob/master/modules/red/sparrowfile

[23:36] *** patrickb left
[23:47] *** mahmudov left
[23:53] *** melezhik left
[23:58] <cpan-raku> New module released to CPAN! Sparrowdo (0.1.2) by 03MELEZHIK

