[00:42] *** sena_kun left
[00:56] *** sena_kun joined
[01:15] *** wildtrees left
[01:22] *** kensanata left
[02:13] *** gabiruh joined
[02:42] *** sena_kun left
[02:53] *** gabiruh left
[02:56] *** sena_kun joined
[03:15] *** mahmudov left
[04:11] <SmokeMachine> m: say Supplier.new.Supply.zip: Supplier.new.Supply xx 3

[04:11] <camelia> rakudo-moar 5d6c0b6b4: OUTPUT: «Can only use zip to combine defined Supply objects␤  in block <unit> at <tmp> line 1␤␤»

[04:11] <SmokeMachine> it seems to be a bug for me...

[04:13] <SmokeMachine> say Supply.from-list(^10).zip: Supply.from-list(^5) xx 3

[04:13] <SmokeMachine> m: say Supply.from-list(^10).zip: Supply.from-list(^5) xx 3

[04:13] <camelia> rakudo-moar 5d6c0b6b4: OUTPUT: «Can only use zip to combine defined Supply objects␤  in block <unit> at <tmp> line 1␤␤»

[04:42] *** Kaiepi left
[04:42] *** sena_kun left
[04:57] *** sena_kun joined
[05:01] *** Kaiepi joined
[05:14] *** Kaiepi left
[05:22] *** Kaiepi joined
[05:51] *** mahmudov joined
[06:05] *** wamba joined
[06:05] <cpan-raku> New module released to CPAN! Color::Scheme (1.001002) by 03HOLLI

[06:19] <cpan-raku> New module released to CPAN! Color::Scheme (1.001003) by 03HOLLI

[06:41] *** sena_kun left
[06:47] *** wamba left
[06:50] *** gabiruh joined
[06:55] *** gabiruh left
[06:56] *** sena_kun joined
[07:07] *** sauvin joined
[07:08] *** sauvin left
[07:13] *** sauvin joined
[07:18] *** Doc_Holliwood left
[07:34] *** domidumont joined
[07:42] *** rindolf joined
[07:42] *** domidumont left
[07:42] *** rindolf left
[07:45] *** rindolf joined
[08:18] *** laminowany joined
[08:19] <Geth> ¦ doc/master: 4 commits pushed by (Sterling Hanenkamp)++, (Juan Julián Merelo Guervós)++

[08:19] <Geth> ¦ doc/master: 519b05f969 | fix a problem with C<> in IO::Socket::Async

[08:19] <Geth> ¦ doc/master: 6c0930f131 | adding documentation for ListenSocket

[08:19] <Geth> ¦ doc/master: 836434dc79 | Adding ListenSocket docs to IO::Socket::Async

[08:19] <Geth> ¦ doc/master: 20afcc8579 | Merge pull request #3165 from zostay/io-socket-async-listensocket

[08:19] <Geth> ¦ doc/master: review: https://github.com/Raku/doc/compare/f6a006ffe395...20afcc85794d

[08:21] *** go|dfish left
[08:23] *** go|dfish joined
[08:29] *** wamba joined
[08:34] *** rindolf left
[08:41] *** sena_kun left
[08:43] *** rindolf joined
[08:55] *** sena_kun joined
[09:26] *** stoned75 joined
[09:36] *** wamba left
[10:01] <Geth> ¦ doc: aded2f0df0 | (JJ Merelo)++ | doc/Language/nativecall.pod6

[10:01] <Geth> ¦ doc: Minor rephrasing

[10:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/aded2f0df0

[10:01] <Geth> ¦ doc: a4b79266f7 | (JJ Merelo)++ | doc/Type/Signature.pod6

[10:01] <Geth> ¦ doc: Comments about True and False in signature literals, refs #2632

[10:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a4b79266f7

[10:42] *** sena_kun left
[10:52] *** gabiruh joined
[10:56] *** gabiruh left
[10:57] *** wamba joined
[10:57] *** sena_kun joined
[11:05] *** laminowany left
[11:07] *** mahmudov left
[11:22] <Geth> ¦ doc: ee3d9c2f89 | (Stoned Elipot)++ | type-graph.txt

[11:22] <Geth> ¦ doc: Add missing type

[11:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ee3d9c2f89

[11:23] *** laminowany joined
[11:23] *** chloekek joined
[11:45] *** Doc_Holliwood joined
[11:47] *** xinming left
[11:48] *** wamba left
[11:49] *** xinming joined
[11:57] *** kensanata joined
[12:17] *** stoned75 left
[12:27] *** mahmudov joined
[12:42] *** sena_kun left
[12:57] *** sena_kun joined
[13:03] *** pmurias joined
[13:04] *** kensanata left
[13:07] *** stoned75 joined
[13:10] *** lucasb joined
[13:13] <rypervenche> No one answered chrsteel's question and I'm curious as to the answer. He wanted to know why this doesn't work: my $x = "ho raku!"; $x .= tc.subst(/o/,"i"); say $x;

[13:16] <sena_kun> I am not a pro, but...

[13:19] <sena_kun> bisectable6: my $x = "ho raku!"; $x .= subst(/o/,"i").tc; say $x;

[13:19] <bisectable6> sena_kun, On both starting points (old=2015.12 new=06db4c2) the exit code is 0 and the output is identical as well

[13:19] <bisectable6> sena_kun, Output on both points: «hi raku!␤»

[13:19] <sena_kun> m: my $x = "ho raku!"; $x .= tc.subst(/o/,"i"); say $x;

[13:19] <camelia> rakudo-moar 06db4c249: OUTPUT: «Ho raku!␤»

[13:19] <sena_kun> m: my $x = "ho raku!"; $x .= subst(/o/,"i").tc; say $x

[13:19] <camelia> rakudo-moar 06db4c249: OUTPUT: «hi raku!␤»

[13:22] *** chloekek left
[13:24] <lizmat> I think the problem is more general:

[13:24] <sena_kun> ok, my hypothesis was correct

[13:24] <sena_kun> it's precedence

[13:24] <lizmat> m: my $a = 42; $a.= Str.Int; dd $a    # should have been an int

[13:24] <camelia> rakudo-moar 06db4c249: OUTPUT: «Str $a = "42"␤»

[13:24] <sena_kun> m: my $x = "ho raku!"; say $x .= subst(/o/,"i").tc; say $x;

[13:24] <camelia> rakudo-moar 06db4c249: OUTPUT: «Hi raku!␤hi raku!␤»

[13:25] <lizmat> m: my $a = 42; dd $a.= Str.Int; dd $a   # aaah, precedence

[13:25] <camelia> rakudo-moar 06db4c249: OUTPUT: «42␤Str $a = "42"␤»

[13:25] <sena_kun> it seems like it is executed like `($x .= subst(/o/,"i")).tc` (and .tc result is sunk), instead of

[13:25] <sena_kun> yes

[13:25] <lizmat> definitely worth an issue, I would say... as this is a bit of a WAT to me

[13:26] <sena_kun> I thought about that when saw that the result is changing if you are swapping the methods, but was not really sure and decided to look at it a bit more carefully not to embarass myself...

[13:26] <sena_kun> I am not sure about that (not as the language designer, of course)

[13:26] <sena_kun> judging by bisectable6 it has been here since forever

[13:26] <sena_kun> and raku is not haskell to point-free things, really

[13:28] <lizmat> well...  a .= foo is intended to be the equivalent of a = a.foo

[13:28] <lizmat> m: my $a = 42; $a = $a.Str.Int; dd $a   # this is correct

[13:28] <camelia> rakudo-moar 06db4c249: OUTPUT: «Int $a = 42␤»

[13:28] <sena_kun> imho the .= is super cool sometimes, but when you want to chain, you chain it

[13:28] <sena_kun> lizmat: docs says "they are equivalent except for precedence" though. :)

[13:29] <lizmat> ok, so it is a trap

[13:29] <lizmat> m: my $a = 42; $a.= Str.=Int; dd $a

[13:29] <camelia> rakudo-moar 06db4c249: OUTPUT: «Int $a = 42␤»

[13:29] <lizmat> hmmm

[13:30] <lizmat> I wonder why the difference of precedence is there

[13:32] *** chloekek joined
[13:32] <Geth> ¦ doc: Kaiepi++ created pull request #3168: Proofread IO::Socket::Async::ListenSocket docs and pass make xtest

[13:32] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3168

[13:34] *** mahmudov left
[13:36] *** chloekek left
[13:37] *** chloekek joined
[13:53] <Kaiepi> releasable6, status

[13:53] <releasable6> Kaiepi, Next release will happen when it's ready. 1 blocker. 0 out of 490 commits logged

[13:53] <releasable6> Kaiepi, Details: https://gist.github.com/db7059aac18486ead035dff9db34dff8

[14:00] *** mahmudov joined
[14:00] *** xinming left
[14:00] *** xinming joined
[14:11] *** chloekek left
[14:12] *** chloekek joined
[14:13] <Geth> ¦ doc: taboege self-assigned NativeCall and manually creating C strings https://github.com/Raku/doc/issues/3169

[14:17] *** tejr left
[14:27] *** Doc_Holliwood left
[14:34] *** tejr joined
[14:38] <Geth> ¦ whateverable: fd496744fd | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Output.pm6

[14:38] <Geth> ¦ whateverable: Add missing .encode

[14:38] <Geth> ¦ whateverable: 

[14:38] <Geth> ¦ whateverable: Resolves #372.

[14:38] <Geth> ¦ whateverable: review: https://github.com/Raku/whateverable/commit/fd496744fd

[14:41] *** sena_kun left
[14:44] *** kensanata joined
[14:51] *** gabiruh joined
[14:56] *** sena_kun joined
[15:18] <rypervenche> So I've learned that I can automatically have short and long options available to me by adding a parameter to MAIN like Int :l(:$length), however the short -l form only works if I use an equals sign, like -l=32 . Is there a way (built-in) to have it allow a space instead of an equals sign?

[15:20] <lizmat> rypervenche : not at the moment

[15:20] <rypervenche> Ok, thanks.

[15:20] <lizmat> rypervenche but there is https://modules.raku.org/dist/Getopt::Long:cpan:LEONT

[15:24] <rypervenche> That'll work. I'll need to get used to the idea of using modules for things if I want to get the most out of this language.

[15:25] *** Doc_Holliwood joined
[15:25] *** pmurias left
[15:26] *** pmurias joined
[15:37] <rypervenche> Does anyone else have an issue with vim-raku not seeing a .raku file as filetype=raku ? I've noticed that if my shebang has #!/usr/bin/env perl6 it works, however #!/usr/bin/env raku does not. It sets the filetype to conf instead. Just curious before I file an issue.

[15:48] <AlexDaniel> rypervenche: are you using this version? https://github.com/Raku/vim-raku

[15:49] <rypervenche> AlexDaniel: I am, yes.

[15:50] <rypervenche> I'm using vim 8's plugin system, so I've cloned it into ~/.vim/pack/my-plugins/start/ . It does the syntax highlighting if I manually run ":set ft=raku" while the file is opened, but not automatically.

[16:06] *** kensanata left
[16:19] *** pmurias left
[16:23] <eiro> rypervenche: i check it

[16:26] <uzl[m]> rypervenche: I'm having the same problem with vim-raku so it might be worth filing an issue.

[16:26] <rypervenche> All right, will do. Thanks.

[16:28] <eiro> rypervenche: please do: i'm preparing the patch

[16:30] <eiro> rypervenche: patch is ready

[16:31] <eiro> hmm ... i wonder: in gh, what is the good way to say "this patch is an attempt to close issue xxx" ?

[16:32] *** phogg left
[16:32] <lizmat> eiro make the PR, use the URL for the issue in the text, GH will make it a correct link

[16:33] <rypervenche> eiro: Done: https://github.com/Raku/vim-raku/issues/10

[16:34] <eiro> lizmat: o

[16:34] <eiro> ok

[16:35] <eiro> more questions:

[16:35] *** rindolf left
[16:36] <eiro> * i should also test the shebang

[16:36] <eiro> * what is the file extension for modules ?

[16:36] <eiro> * is there other cases to test?

[16:36] <lizmat> .pm6 .pm .rakumod

[16:37] <lizmat> .p6 .raku I'd say

[16:37] <eiro> * should i create more than 1 pr because i fix more than expected ?

[16:37] <rypervenche> The module supports these: .pm6,.pm,.raku,.rakutest,.t6

[16:37] <rypervenche> s/module/plugin/

[16:38] <rypervenche> We might want to add .rakumod to the list as well.

[16:39] <lizmat> yeah, if you test for the other, .rakumod should be in there as well

[16:40] *** pmurias joined
[16:41] *** sena_kun left
[16:44] *** rindolf joined
[16:48] <eiro> https://github.com/Raku/vim-raku/pull/11

[16:48] <eiro> grmbl ... misseed p6

[16:49] <lizmat> eiro: and .rakumod  :-)

[16:49] *** Doc_Holliwood left
[16:51] <eiro> fixed 

[16:52] <uzl[m]> eiro: For all the extensions: https://github.com/Raku/problem-solving/blob/master/solutions/language/Path-to-Raku.md#extensions

[16:52] <stoned75> fwiw I use autocmd BufEnter,BufNew,BufNewFile,BufRead *.raku,*.rakudoc,*.rakutest,*.pl6,*.pm6,*.p6,*.t6 setf raku

[16:53] <eiro> should i add pl6 too ?

[16:54] <eiro> hmm ... BufEnter,BufNew could be nice too: i'll see in official ftdetect

[16:55] <stoned75> and in my vimrc I also add *.pod6 ... as used in Raku/doc ;)

[16:56] <lizmat> eiro: never seen .pl6 in the wild

[16:56] *** sena_kun joined
[16:58] <eiro> ok so pod6 is a good idea :) let's keep pl6 aside ?

[17:00] <stoned75> I admit I only had thrown in to my own version as it is mentioned in vim-raku/README.md

[17:01] <eiro> also: i wonder why BufEnter,BufNew 'cause BufNewFile,BufRead already handled it

[17:01] <eiro> but what if i start with an empty buffer and then :w foo.raku?

[17:01] <eiro> i test it 

[17:04] *** wamba joined
[17:05] <eiro> stoned75 are you agree there is no need of BufEnter,BufNew ?

[17:05] <eiro> (if so, i'll push)

[17:05] <stoned75> eiro: for me, without BufEnter, a command like 'vim foo.raku' does not result in the syntax being set

[17:06] <stoned75> but well, my vimfu is very weak :-}

[17:07] <eiro> stoned75: thanks for reporting. i test with an empty .vimrc

[17:08] <stoned75> de rien ;-)

[17:08] <eiro> (maybe i have some raku settings elsewhere in my large base :)

[17:13] <eiro> stoned75: it's probably because your syn on happens too late in your .vimrc. i guess the ftdetect will fix this. so: remove your own line, test with the patch and tell me.

[17:13] <eiro> right ?

[17:13] <eiro> (it works like a charm here)

[17:17] <eiro> rypervenche: https://github.com/Raku/vim-raku/pull/11/commits 

[17:18] <lizmat> just tell me when it's ready to merge, and I will  :-)

[17:18] <eiro> 4 commits for 3 lines ... should i crash them into 1 single commit ?

[17:18] <eiro> lizmat: sounds good for me

[17:18] <eiro> (if there is no more suggestions)

[17:19] <eiro> stoned75? rypervenche ?

[17:20] <stoned75> eiro: hum... I'm not sure, I can't seem to be able to get it ftdetecting without BufEnter when using a command like the one I mentionned, but either way adding ftdetect to vim-raku repo is a good thing ;)

[17:20] <lizmat> dinner&

[17:20] <eiro> :)

[17:21] <eiro> lizmat: bon appétit 

[17:22] <eiro> stoned75: did you try ? i really wonder what could go wrong ...

[17:23] <eiro> it would be a case when you enter in a buffer without rising New or ReadPost? how can it be possible?

[17:24] <AlexDaniel> eiro: also can you remove .pm?

[17:25] <stoned75> eiro: yes I did more testing :) I'm not really sure about what's going on

[17:25] <AlexDaniel> eiro: or do you think it won't conflict with perl5?

[17:25] <Geth> ¦ doc: e6a0b4994e | (Stoned Elipot)++ | doc/Programs/03-environment-variables.pod6

[17:25] <Geth> ¦ doc: Be more specific about RAKUDO_DEFAULT_READ_ELEMS

[17:25] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e6a0b4994e

[17:26] <rypervenche> Is it possible to have it set the filetype based on the file extension? Opening a new test.raku file doesn't give it a filetype using your commits.

[17:27] *** Doc_Holliwood joined
[17:28] <eiro> AlexDaniel: nice spot: i remove it

[17:30] <eiro> stoned75: i just looked at the other ftdetect: none of them use Enter. so if it's ok for you, i keep the current hooks and i help you to fix your setting

[17:30] <eiro> AlexDaniel, lizmat : how about rewriting the pr to have a single patch instead of 5 ones ? 

[17:32] <eiro> (i don't know the good practices expected by the perl6 community

[17:32] <rypervenche> I think it would be cleaner that way.

[17:34] <eiro> which way is *that* way ?

[17:34] <rypervenche> To squash them.

[17:34] <eiro> k

[17:35] <stoned75> eiro: sure no problem, and thanks for the proposal but don't trouble yourself I should be able to handle my vimrc's mess ;)

[17:36] <rypervenche> It's still not working for new empty files though.

[17:42] <eiro> stoned75: ok

[17:42] <eiro> rypervenche hmmm ... this is when BufEnter comes in ? let me try 

[17:45] <uzl[m]> m: enum Color<Blue Green>; say Color.enums;

[17:45] <camelia> rakudo-moar 407970284: OUTPUT: «Map.new((Blue => 0, Green => 1))␤»

[17:47] <rypervenche> eiro: I don't know much about how vim plugins work, but does suffixesadd in ftplugin/raku.vim also need to be updated to match the new list of suffixes?

[17:47] <uzl[m]> Is it possible to create a new enum from another one? Say I want to create the enum MoreColor using Color.

[17:50] <eiro> rypervenche: well ... suffixadd works with a complete filename: we should probably define an inex

[17:51] <eiro> rypervenche: i don't know the plugin: i just cloned it to fix your problem

[17:52] <eiro> i'll take a look. if you have other complains, feel free to tell me :)

[17:55] *** maggotbrain left
[17:55] <eiro> rypervenche: can you confirm it works when you have BufNewFile in the list of events to hook ?

[17:56] <eiro> BufNewFile,BufWritePost,BufReadPost < those are the events that can use the filename extension and i don't see any case that doesn't workd for me

[17:56] <rypervenche> eiro: Yes, adding BufNewFile worked.

[17:56] *** maggotbrain joined
[17:56] *** Guest78373 left
[18:00] <eiro> so i add shebang detection, squash the commit and create a new pr

[18:01] <MasterDuke> eiro: you don't need to create a new pr. just push --force to the same branch

[18:01] <MasterDuke> and the pr will get updated

[18:02] <eiro> push --force ? isn't it evil ? i'm scarred of any --force thing

[18:02] <eiro> MasterDuke: i will revert (i pushed on my own master)

[18:03] <MasterDuke> force pushing on a public repo is bad

[18:03] <eiro> ahh ... but pushing on mine is ok ?

[18:04] <eiro> cool!

[18:04] <eiro> thanks 

[18:04] <MasterDuke> on your own it's usually fine

[18:04] <eiro> MasterDuke: so what i wanted to do is:

[18:05] <eiro> * copy the file 

[18:05] <eiro> * reset to the old branch

[18:05] <eiro> * paste the file

[18:05] <eiro> * create a single commit

[18:05] <eiro> is there a better way ? 

[18:06] <eiro> (i love those moment when you get help while helping)

[18:06] <MasterDuke> you could rebase -i HEAD~<the number of commits you have that you want to squash together>

[18:07] <MasterDuke> so commit all your changes. then rebase -i to squash them down to one commit. then force push

[18:13] <Geth> ¦ doc: 57783d3431 | (Ben Davies)++ | 3 files

[18:13] <Geth> ¦ doc: Proofread IO::Socket::Async::ListenSocket docs and pass make xtest

[18:13] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/57783d3431

[18:13] <Geth> ¦ doc: 98e4b34010 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 3 files

[18:13] <Geth> ¦ doc: Merge pull request #3168 from Kaiepi/io-socket-async-listensocket

[18:13] <Geth> ¦ doc: 

[18:13] <Geth> ¦ doc: Proofread IO::Socket::Async::ListenSocket docs and pass make xtest

[18:14] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/98e4b34010

[18:15] *** phogg joined
[18:15] *** phogg left
[18:15] *** phogg joined
[18:21] *** Doc_Holliwood left
[18:29] *** Doc_Holliwood joined
[18:30] <eiro> ok. last call before squashing MasterDuke AlexDaniel rypervenche stoned75 

[18:30] <eiro> https://github.com/Raku/vim-raku/pull/11/files

[18:33] <rypervenche> eiro: Looks good to me. So the suffixesadd in ftplugin/raku.vim doesn't need to be updated as well then?

[18:34] <rypervenche> I feel that that should be consistent as well.

[18:35] <rypervenche> Aside from that, it looks good to me.

[18:35] <eiro> rypervenche: i'll check 

[18:37] <eiro> ok... i see there is an inex that substitute :: by /: good

[18:38] <eiro> but the thing is : what's the point of adding t6 for example in the suffixadd ?

[18:38] <eiro> in my way of using vim, suffixadd is for gf, right ?

[18:39] <eiro> anyway rypervenche i think this isn't the same.

[18:39] <eiro> let's push this bugfix and then start talking about suffixadd which is more controversal :)

[18:40] <rypervenche> It's not the same, no. I just thought it should also be updated. We can do it separately though.

[18:41] *** Guest78373 joined
[18:41] *** sena_kun left
[18:42] *** wildtrees joined
[18:43] *** wildtrees left
[18:50] <eiro> MasterDuke: worked like a charm! awesome

[18:50] <eiro> thank you very much

[18:50] <eiro> lizmat: it's ready to merge

[18:51] <lizmat> Merged :-)

[18:51] <eiro> thank you :)

[18:51] <lizmat> eiro++

[18:53] <Geth> ¦ doc: ad08bdb2fc | (JJ Merelo)++ | doc/Type/Enumeration.pod6

[18:53] <Geth> ¦ doc: Smartmatch and enumeration, refs #2632

[18:53] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ad08bdb2fc

[18:53] <rypervenche> Thanks :)

[18:55] <eiro> rypervenche: now let's talk about this suffixadd: the only usage i have of suffixadd is gf so the only suffix required is .pm6 but i see more extensions so maybe there is a usage of suffixadd i don't know about.

[18:56] *** wildtrees joined
[18:56] <eiro> rypervenche: if i have to patch, it would be to remove extensions.

[18:56] *** gabiruh left
[18:56] <eiro> how to open a discussion on github ?

[18:56] <eiro> (maybe create an issue and see what happens ?)

[18:57] <rypervenche> .rakumod would also need to be added

[18:57] <eiro> oh ... indeed !

[18:57] *** cpan-raku left
[18:58] *** sena_kun joined
[18:58] *** cpan-raku joined
[18:58] *** cpan-raku left
[18:58] *** cpan-raku joined
[18:58] *** wildtrees left
[18:58] <eiro> but how about the others ? let's take a look to suffixadd in other modules...

[18:58] <eiro> i check

[18:59] *** wildtrees joined
[19:00] <rypervenche> I was just looking at that. Some languages have their normal extensions, but I don't know enough about the languages to know if that is correctly done.

[19:00] *** wildtrees left
[19:01] *** wildtrees joined
[19:01] <rypervenche> I'm too new to Raku to know what possible file extension would be needed for a gf.

[19:01] <eiro> rypervenche: some langages use their normal extensions for their modules too 

[19:01] <eiro> like python

[19:01] <rypervenche> But it would be at least .rakumod and .pm6.

[19:01] <rypervenche> Ahhh.

[19:01] *** wildtrees left
[19:02] <rypervenche> Maybe it's not even needed then... Perl doesn't have one.

[19:02] *** wildtrees joined
[19:03] *** wildtrees left
[19:03] <AlexDaniel> rypervenche: what do you mean doesn't have one? :)

[19:04] <eiro> hmm i'm confused: perl has pm 

[19:04] *** wildtrees joined
[19:04] <rypervenche> There's no suffixesadd line in the ftplugin in vim for perl.

[19:04] *** wildtrees left
[19:05] <rypervenche> Does the .pm ever get written in a Perl file? And does .p6 or .rakumod ever get written in a Raku file?

[19:05] <eiro> because they use a more complex inex

[19:05] <rypervenche> I should just be quiet, I think. I don't know enough about this. :P

[19:06] <eiro> the raku one is simple: just substitute :: by /

[19:06] <eiro> and let suffixesadd deal with the extension

[19:06] <eiro> (which is easier to read, i think)

[19:07] <rypervenche> Ahhhh, that's how it works.

[19:07] *** gabiruh joined
[19:08] <eiro> yep :)

[19:08] <eiro> if you see the perl inex, you see they try to add .pm at the end of the path

[19:10] <eiro> ok you know what? i fix the way i think is the good one, i PR and let's see how people react

[19:10] <MasterDuke> glad to hear. rebase -i is great, i use it all the teime

[19:10] <MasterDuke> *time

[19:12] <eiro> while we're on fixing raku: i remember there was this problem of path for installed modules.

[19:12] <eiro> s/fixing raku/fixing vim-raku/

[19:13] <eiro> MasterDuke: i will show the tip to my colleagues: good demo of "why you should fork"

[19:14] <eiro> (or branch)

[19:14] <eiro> (or both)

[19:16] <eiro> i wonder if we can use coma as a backend for a vim module ... is there a lsp for raku ? maybe jnthn know about ? 

[19:17] <lizmat> not sure what Comma would have to do with a vim module ?

[19:17] <MasterDuke> i think someone had a beta/incomplete implementation of lsp for raku, but i don't remember who

[19:23] <pmurias> lizmat: a lsp would be for a whole bunch of editors, so I guess the question is if Comma could be refactored into a lsp

[19:24] <lizmat> well, I think jnthn or Altai_man / sena_kun would know

[19:25] <pmurias> Comma seemed super IntelliJ oriented/specific from how jnthn was describing it is implemented

[19:50] *** wildtrees joined
[19:53] *** wildtrees left
[19:54] *** wildtrees joined
[19:55] *** wildtrees left
[19:59] <sena_kun> eiro: no LSP in Comma

[20:00] <sena_kun> eiro: and no, no possibility to backend usage

[20:00] <eiro> back 

[20:00] <eiro> sena_kun: ok thanks

[20:01] <eiro> lizmat: well... i had in mind that there is probably an engine that parse the code so you can query it

[20:02] <eiro> MasterDuke: let me know if you remember at some point :)

[20:02] <sena_kun> https://github.com/perl6/user-experience/issues/38 may be a (starting?) point

[20:02] <eiro> ok

[20:02] <eiro> thanks

[20:10] <rypervenche> Yay! My first Raku script is on its way. Much taken from Rosettacode for a password generator, but yeah. This is my first scripting language (if you don't count Bash). https://d.ryper.org/pw.raku.png

[20:14] *** pmurias left
[20:17] *** pmurias joined
[20:18] <Kaiepi> how can you run code when the program ends?

[20:20] <Kaiepi> &*EXIT looks similar to what i want, but i need this code to run regardless of whether exit is called

[20:20] <sena_kun> Kaiepi: END phaser?

[20:22] <Kaiepi> tried that sena_kun, that happens after precomp, not when after runtime

[20:22] *** no-n left
[20:23] <lizmat> rypervenche++

[20:24] <lizmat> Kaiepi: that only happens after precomp because another process is used to precomp?

[20:24] <lizmat> perhaps precomp should clear the END block array 

[20:27] <eiro> rypervenche: oh.. congrats! may i suggest using gist instead of a screenshot?

[20:27] <eiro> * this saves some bandwidth

[20:28] <eiro> * it's easy to propose some improvements

[20:29] <Kaiepi> lizmat, if i write the line like END ..., it only runs after precomp, but if i write it like END { ... }, it runs the block both after precomp and at the end of the program, which works for me in this case

[20:29] <lizmat> hmmm.. that would be a bug,

[20:30] <lizmat> it should run in both cases regardless of thunkiness of END

[20:30] <lizmat> afaik

[20:36] <SmokeMachine> m: say Supply.from-list(^10).zip: Supply.from-list(^5)

[20:36] <camelia> rakudo-moar 13c5d0462: OUTPUT: «Supply.new␤»

[20:36] <SmokeMachine> m: say Supply.from-list(^10).zip: Supply.from-list(^5) xx 2

[20:36] <camelia> rakudo-moar 13c5d0462: OUTPUT: «Can only use zip to combine defined Supply objects␤  in block <unit> at <tmp> line 1␤␤»

[20:37] <SmokeMachine> m: say Supply.from-list(^10).zip: |(Supply.from-list(^5) xx 2)

[20:37] <camelia> rakudo-moar 13c5d0462: OUTPUT: «Supply.new␤»

[20:41] <lizmat> m: dd Supply.from-list(1,2,3,4).Seq

[20:41] <camelia> rakudo-moar 13c5d0462: OUTPUT: «(1, 2, 3, 4).Seq␤»

[20:41] <lizmat> that's what I use for debugging  :-)

[20:42] *** sena_kun left
[20:47] <eiro> is rakudo repo the place to open an issue about the langage ?

[20:47] <eiro> like 'given should return' ?

[20:48] <Geth> ¦ doc: f1983a0fed | (Stoned Elipot)++ | doc/Type/IO/Handle.pod6

[20:48] <Geth> ¦ doc: really demonstrate .Str method

[20:48] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f1983a0fed

[20:49] *** chloekek left
[20:50] <[Coke]> eiro: Raku/problem-solving ?

[20:50] <eiro> ok

[20:50] <[Coke]> perl6 if it's not migrated yet

[20:53] <eiro> it actually is. it's nice to have every topic listed that way

[20:56] *** sena_kun joined
[21:03] <mojca> How do I interpret these tests? https://paste.macports.org/03e2524f5433

[21:04] <eiro> hoo ... macports is still alive ?

[21:05] <mojca> Just because HB became popular, it doesn't mean that MacPorts should be dead :)

[21:05] <eiro> and you still use cpan2port :) \o/ (pride)

[21:06] <eiro> mojca: of course not! i really liked macport when i had to use mac.

[21:07] <eiro> plus: i learned tcl thanks to macports

[21:07] <mojca> Not sure what to say. We had a GSOC student in 2019 who worked on upt,  which is a tool from anything (pypi, cpan, gem, ...) to "anything" (macports, fedora, freebsd, ...)

[21:07] <mojca> But only the pypi was really extensively tested.

[21:08] <mojca> I'm not sure how many new perl packages have been created recently. I certainly didn't add any new one in a while.

[21:08] <mojca> But last time I did need one, I used cpan2port, yes.

[21:09] <[Coke]> mojca: Hi!

[21:09] <eiro> mojca: cpan2port is really uggly: i wrote it while discovering macports because i had to package the koha ils on mac. that's why i'm surprised such a hack survived a whole decade

[21:10] <mojca> https://github.com/macports/macports-contrib/commits/master/cpan2port/cpan2port

[21:10] <eiro> my feeling when i left the company i worked for at this time was: it's uggly but really pleasant to use ...

[21:11] <mojca> In theory we should now have https://github.com/macports/upt-macports

[21:11] *** wildtrees joined
[21:11] <eiro> oh .. i hope you didn't suffer too much with this code :)

[21:12] <eiro> anyway: good to know macports still exists. i remember you have a really welcoming and friendly community

[21:12] <mojca> [Coke]: Hi. I'm still stuck with updating this package that you once submitted (not even using it myself) :), so you're welcome to help :)

[21:13] <mojca> ... at least with this issue :)

[21:15] <Geth> ¦ doc: 71788a2dd7 | (Stoned Elipot)++ | doc/Type/IO/Handle.pod6

[21:15] <Geth> ¦ doc: Make example code pass compilation test

[21:15] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/71788a2dd7

[21:18] <mojca> eiro: I was really happy with cpan2port as long as I used it. Not that I really ever studied the code, but it produced useful results which was the main point.

[21:18] <eiro> good to know! thanks

[21:28] <[Coke]> mojca: yah, sorry about that.

[21:28] <[Coke]> Is anyone using it, do you think?

[21:29] <mojca> At least according to https://ports.macports.org/port/rakudo/stats I'm not the only one

[21:30] <mojca> But please keep in mind that this is opt-in statistics.

[21:30] <mojca> The total number of unique users ever submitting stats is 542

[21:31] <mojca> 6 people apparently have it installed among those; that's 1% of users

[21:41] *** pmurias left
[21:52] *** wamba left
[21:54] *** rindolf left
[21:57] <Geth> ¦ problem-solving: vrurg assigned to jnthn Issue Visibility of dynamic symbols in async blocks https://github.com/Raku/problem-solving/issues/151

[22:16] *** pmurias joined
[22:33] *** Doc_Holliwould joined
[22:42] *** sena_kun left
[22:55] *** gabiruh left
[22:55] *** sena_kun joined
[23:16] *** laminowany left
[23:19] *** lucasb left
[23:20] *** rir_ joined
[23:29] *** jcb joined
[23:34] *** jcb left
[23:40] <vrurg> .

[23:40] <tellable6> 2020-01-17T08:31:19Z #raku-dev <lizmat> vrurg since most of Supply depends on dynamic variables, I doubt it, but jnthn would know

[23:41] *** rir82 joined
[23:41] *** rir_ left
[23:44] *** rir82 left
[23:57] <cpan-raku> New module released to CPAN! DateTime::Monotonic (0.0.5) by 03JMASLAK

[23:57] <cpan-raku> New module released to CPAN! TCP::LowLevel (0.0.4) by 03JMASLAK

[23:58] <cpan-raku> New module released to CPAN! Net::BGP (0.2.1) by 03JMASLAK

[23:59] <cpan-raku> New module released to CPAN! IP::Random (0.0.11) by 03JMASLAK

[23:59] <cpan-raku> New module released to CPAN! App::Tasks (0.0.17) by 03JMASLAK

