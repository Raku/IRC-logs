[00:00] *** sjaveed joined
[00:54] *** dmc00 joined
[00:58] *** Grinnz left
[00:59] *** zostay left
[00:59] *** zostay joined
[00:59] *** Grinnz joined
[01:11] *** molaf left
[01:13] *** ThaEwat left
[01:13] *** suzusime[m] left
[01:13] *** unclechu left
[01:13] *** renormalist left
[01:13] *** phogg left
[01:19] *** __jrjsmrtn__ joined
[01:21] *** _jrjsmrtn left
[01:22] *** molaf joined
[01:33] *** hungrydonkey joined
[01:38] *** hungryd19 joined
[01:39] *** hungrydonkey left
[02:03] *** hungryd19 left
[02:04] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:26] <xinming_> timotimo: Yea, I do think it's recursion, I just don't know Red enough to track this issue.

[02:59] *** aborazmeh left
[03:08] *** BenGoldberg left
[03:10] <AlexDaniel> timotimo: well, the difference between gmp and libtommath is actually rather small, sure we can win some % but nothing crazy

[03:10] <AlexDaniel> timotimo: but what I am interested in seeing is using gmp's rational numbers, if that's possible

[03:10] <AlexDaniel> because

[03:10] <AlexDaniel> m: my $x = 1; for ^10_000_000 { $x += 2 }; say $x; say now - INIT now

[03:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´20000001‚ê§0.6048722‚ê§¬ª

[03:10] <AlexDaniel> m: my $x = 1.5; for ^10_000_000 { $x += 2 }; say $x; say now - INIT now

[03:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´20000001.5‚ê§3.6196093‚ê§¬ª

[03:11] <AlexDaniel> my understanding is that these will become roughly the same

[03:12] <AlexDaniel> now, yes, of course it will turn raku-ish implementation into a call to the vm, which is unfortunate in some sense

[03:13] <AlexDaniel> most of rakudo isn't written in raku anyway, so doesn't really matter IMO

[04:08] *** evalable6 left
[04:08] *** linkable6 left
[04:10] *** linkable6 joined
[04:10] *** evalable6 joined
[04:41] *** aborazmeh joined
[04:41] *** aborazmeh left
[04:41] *** aborazmeh joined
[04:52] *** frot-lab joined
[04:55] *** sjaveed left
[04:57] *** sjaveed joined
[04:59] *** sjaveed left
[04:59] *** sjaveed joined
[05:13] *** frot-lab left
[05:21] *** frot-lab joined
[05:24] <xinming_> How do we add break point in source code, so raku-debug can be triggered please?

[05:42] <parabolize> xinming_: I've been away a while and I'm having trouble finding anything called raku-debug. There is a builtin Backtrace: https://docs.raku.org/type/Backtrace

[05:45] *** ex_nihilo left
[05:58] *** BenGoldberg joined
[06:25] <xinming_> parabolize: Thanks

[06:27] *** frot-lab is now known as hungrydonkey

[06:32] *** BenGoldberg left
[06:48] *** aluaces joined
[06:56] *** skids left
[07:04] *** SmokeMachine left
[07:22] *** SmokeMachine joined
[07:29] *** sena_kun joined
[07:30] *** k-man left
[07:43] *** kylese joined
[08:26] *** xelxebar left
[08:26] *** xelxebar joined
[08:26] <hungrydonkey> m: say 0.99.base(2)

[08:26] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´0.11111101‚ê§¬ª

[08:27] <hungrydonkey> m: say 0b101001

[08:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´41‚ê§¬ª

[08:27] <hungrydonkey> m: say 0b1001.11

[08:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call‚ê§at <tmp>:1‚ê§------> 3say 0b1001.7‚èè0511‚ê§¬ª

[08:27] <hungrydonkey> m: say (0.99.base(2)).base(10)

[08:27] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´No such method 'base' for invocant of type 'Str'.  Did you mean any of‚ê§these: 'asec', 'Bag', 'Date', 'hash'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:27] *** k-man joined
[08:31] <hungrydonkey> I can convert decimal(0.99) to binary(0.11111101), but how can I  convert binary(0.11111101) to decimal?

[08:34] <hungrydonkey> Is there a way to express a decimal as a binary literalÔºü

[08:35] *** ThaEwat joined
[08:35] *** suzusime[m] joined
[08:35] *** unclechu joined
[08:35] *** phogg joined
[08:54] *** molaf left
[08:56] <kylese> hungrydonkey, I not sure ... but ... may be    :2(((.99).base(2)))     ?

[09:08] <hungrydonkey> kylese Yeah, it works.

[09:09] <hungrydonkey> @kyl

[09:09] <hungrydonkey> kyleseThanks

[09:10] <kylese> hungrydonkey, your are welcome

[09:24] *** BenGoldberg joined
[09:33] *** Black_Ribbon left
[09:40] *** Altai-man joined
[09:43] *** sena_kun left
[09:45] *** Sgeo left
[09:57] *** BenGoldberg left
[10:11] *** timeless left
[10:11] *** leont joined
[10:11] *** timeless joined
[10:16] *** k-man_ joined
[10:18] *** k-man left
[10:24] *** k-man__ joined
[10:25] *** k-man_ left
[10:28] *** wamba joined
[10:29] *** wamba left
[10:29] *** k-man__ left
[10:32] *** caasih left
[10:34] *** caasih joined
[10:35] *** k-man__ joined
[10:54] <tbrowder> g'day Raku brothers and sisters. i hope there is peace in the valley today!

[10:58] *** mowcat joined
[11:05] <tbrowder> docs are a little fuzzy on routine 'clone'. does a clone of an existing class object provide an exact copy of its attributes?

[11:08] <tbrowder> m: class F{has @.f is rw = 1,2;}; my $a = F.new; my $b = $a.clone; say $a.gist; say $b.gist

[11:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´F.new(f => [1, 2])‚ê§F.new(f => [1, 2])‚ê§¬ª

[11:12] <tbrowder> m: class F{has @.f is rw};my $a = F.new;$a.f.push(1); my $b = $a.clone; say $b.gist

[11:12] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´F.new(f => [1])‚ê§¬ª

[11:14] <tbrowder> m: class F{has %.f};my $a = F.new;$a.f<z> = 10; my $b = $a.clone; say $b.gist

[11:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´F.new(f => {:z(10)})‚ê§¬ª

[11:14] <Altai-man> tbrowder, there are number of exceptions (like for Array or Match), but for basically everything else that is derived from Mu `clone` is shallow.

[11:14] <Altai-man> Or so the docs say, at least.

[11:16] <tbrowder> that's my point: docs, as in many cases, doesn't start with the defs, it starts with weird exceptions and caveats.

[11:16] <tbrowder> is a hash an array?

[11:18] <tbrowder> in perl yes, but i thought in raku it's not quite the same

[11:19] <tbrowder> but i assume a class object with other class objects as attributes need their own clone methods.

[11:20] <tbrowder> so it looks

[11:21] <tbrowder> disregard, pls

[11:22] <tbrowder> safest for complex classes is to have their own clone methods

[11:23] <tbrowder> but good to know both @ and % with "value" types clone nicely.

[11:24] <tbrowder> probably why i can assign one @ or % to another without a problem

[11:28] <tbrowder> m: class F{@.f is rw;}; my @a[0] = F.new; @a[0].f.push(6); my @b = @a; say @b.gist; @b = @a.clone; say @b.gist

[11:28] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable @.f used where no 'self' is available‚ê§at <tmp>:1‚ê§------> 3class F{@.f7‚èè5 is rw;}; my @a[0] = F.new; @a[0].f.push‚ê§    expecting any of:‚ê§        term‚ê§¬ª

[11:29] <tbrowder> m: class F{has @.f};

[11:29] <camelia> rakudo-moar 85847d2f1: ( no output )

[11:32] <tbrowder> m: class F{has @.f is rw}; my @a[0] = F.new; @a[0].f.push(6); my @b = @a; say @b.gist; @b = @a.clone; say @b.gist

[11:32] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Illegal dimension in shape: 0. All dimensions must be integers bigger than 0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:33] <tbrowder> arg! going to my own host for a while...

[11:49] <tbrowder> well, i was able to successfully clone an array of class objects with each having value arrays, so cloning actually looks quite reliable so far

[11:49] *** k-man joined
[11:51] *** k-man__ left
[12:06] <tbrowder> well OOPS. cloning is not what i want. it appears to be equivalent to binding, at least for class objects. so $b := $a and whatever i do to $b also changes $a. i just want a copy of $a's state at some point and don't want to affect $a at all when i modify $b

[12:07] <tbrowder> back to my module's drawing board...

[12:24] <tbrowder> shameless plug follows:

[12:31] <tbrowder> i have been working on a Raku spreadsheet solution for (1) reading spreadsheets of various popular formats (csv, ods, xsl, xslx), (2) writing the data out as either csv or xlsx, (3) xlsx output will have the format of either an input xlsx template or programmatic input by a text input file of some yet-to-be determined format(s).

[12:33] <tbrowder> if that would scratch anyone's itch, i would appreciate feedback on the project.

[12:34] <tbrowder> at the moment i'm calling the module "Spreadsheets"

[12:38] *** stoned75 joined
[12:38] *** molaf joined
[12:43] <tbrowder> of course you will be able to use 2x2 arrays of data from any other source you use to generate it. the csv input is one way to do that.

[12:46] <tbrowder> i mean MxN not 2x2

[12:47] <codesections> I don't have an immediate need for that module, but I'd be happy to take a look at the code ‚Äì it sounds interesting  

[12:49] *** BenGoldberg joined
[12:57] *** rindolf joined
[12:59] <Geth> ¬¶ doc/seq-new: 5fcd836c5c | (Stoned Elipot)++ | doc/Type/Seq.pod6

[12:59] <Geth> ¬¶ doc/seq-new: Fix typo

[12:59] <Geth> ¬¶ doc/seq-new: review: https://github.com/Raku/doc/commit/5fcd836c5c

[13:00] <Geth> ¬¶ doc/master: 4 commits pushed by (Stoned Elipot)++

[13:00] <Geth> ¬¶ doc/master: c8939e91df | document sequence operator variants ^... and ^...^ ref #3360

[13:00] <Geth> ¬¶ doc/master: a2e77f00e2 | Revisit infix ...

[13:00] <Geth> ¬¶ doc/master: e396df6bc8 | sequence operator with/out final ^ clarification

[13:00] <Geth> ¬¶ doc/master: c5a9f058a8 | Restore previous wording

[13:00] <Geth> ¬¶ doc/master: review: https://github.com/Raku/doc/compare/a88182cd2238...c5a9f058a8e4

[13:09] *** mowcat left
[13:23] *** BenGoldberg left
[13:41] *** sena_kun joined
[13:43] *** Altai-man left
[13:44] <tbrowder> @

[13:48] <tbrowder> codesections: thnx, the module is at <github.com/tbrowder/Spreadsheets>. the real working code at the moment is the file "dev/dump-fils.raku"

[13:50] *** hungrydonkey left
[13:50] *** wamba joined
[13:50] <xinming_> SmokeMachine: I'm trying to narrow down that bug, Seems pretty close

[13:50] *** BenGoldberg joined
[14:02] *** Kaiepi joined
[14:06] <Geth> ¬¶ doc: 4e5c63b19f | (Stoned Elipot)++ | doc/Type/Cool.pod6

[14:06] <Geth> ¬¶ doc: no need to link to self

[14:06] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/4e5c63b19f

[14:06] <linkable6> Link: https://docs.raku.org/type/Cool

[14:14] *** aborazmeh left
[14:14] *** aborazmeh joined
[14:14] *** aborazmeh left
[14:14] *** aborazmeh joined
[14:19] <xinming_> IIRC, there is a feature which allows people to supress output of block of code in raku, What is that please?

[14:20] *** k-man left
[14:20] <xinming_> quitely

[14:21] <codesections> I was about to say that, but afaik that just suppresses warnings, not all output 

[14:21] <xinming_> codesections: Yea, doesn't supress $*ERR.say

[14:23] <xinming_> Hmm, the Yea means "No" in English, Sorry, Chinglish :-)

[14:24] *** dogbert17 joined
[14:32] *** k-man joined
[14:35] <xinming_> SmokeMachine: https://termbin.com/yras  <--- This is the farthest I can get, It might be caused by lazy initialization of Red::Column. The recursion happens in the code `func filter` in grep method of ResultSeq.pm6

[14:36] *** woodi joined
[14:37] <xinming_> hmm, actually, in Red/PrepareCode.pm6   the line    `my $ret = func type;`   caused the recursion

[14:39] <[Coke]> You can provide an override to $*ERR that captures all the output and discards it if you need.

[14:41] <[Coke]> something like https://github.com/Raku/roast/blob/master/rosettacode/sierpinski_triangle.t#L26

[14:41] <El_Che> ok, new release I hear

[14:41] <El_Che> no dot releases after?

[14:43] <xinming_> [Coke]: Thanks

[14:44] *** kylese left
[14:46] * [Coke] wonders if it would be useful to put that into a module and add a keyword.

[14:51] <lizmat> .oO( silently )

[14:56] <El_Che> building the new release, hoping for no build failures :)

[14:59] <xinming_> I just now upgraded.

[15:00] <xinming_> SmokeMachine: This bug is also in latest rakudo.

[15:11] *** BenGoldberg left
[15:12] *** BenGoldberg joined
[15:16] *** stoned75 left
[15:20] *** guifa left
[15:23] *** aluaces left
[15:23] *** stoned75 joined
[15:32] <Geth> ¬¶ doc: 75a5c04f4a | (Stoned Elipot)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Type/Seq.pod6

[15:32] <Geth> ¬¶ doc: mention the sequence operator

[15:32] <Geth> ¬¶ doc: 

[15:32] <Geth> ¬¶ doc: while here document the various way to build a Seq at the

[15:32] <Geth> ¬¶ doc: start of the document.

[15:32] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/75a5c04f4a

[15:32] <Geth> ¬¶ doc: cfcdc0c511 | (Stoned Elipot)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Type/Seq.pod6

[15:32] <Geth> ¬¶ doc: Fix typo

[15:32] <linkable6> Link: https://docs.raku.org/type/Seq

[15:32] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/cfcdc0c511

[15:37] <Geth> ¬¶ ecosystem/master: 4 commits pushed by (Haytham Elganiny)++, (Juan Juli√°n Merelo Guerv√≥s)++

[15:37] <Geth> ¬¶ ecosystem/master: 710d889c2a | Add new modules

[15:37] <Geth> ¬¶ ecosystem/master: 3f65601ab8 | Deleted dependencies

[15:37] <Geth> ¬¶ ecosystem/master: 057248a2b9 | OK, I didn't realize that

[15:37] <Geth> ¬¶ ecosystem/master: b10ba7cf86 | Merge pull request #543 from hythm7/master

[15:37] <Geth> ¬¶ ecosystem/master: review: https://github.com/Raku/ecosystem/compare/e36a9d8f41a3...b10ba7cf8664

[16:14] <xinming_> SmokeMachine: BTW, I just found, that when we add    use Red:api<2>  on top of the M file, It worked fine. Hope my discovery can help you pinpoint the bug   ;-)

[16:23] *** cooper joined
[16:24] <SmokeMachine> xinming_: Thank you very much for your help, I still hadn't time to look at that... :( do you think that could be related to it? https://github.com/FCO/Red/issues/100

[16:25] *** wamba left
[16:29] <xinming_> SmokeMachine: Yea, I think that's the bug, But the strange thing is, When we access the column once within .grep({ });  everything will be fine again

[16:34] *** wamba joined
[16:51] *** aborazmeh left
[17:06] <Geth> ¬¶ ecosystem: hythm7++ created pull request #544: Add Pakku::Meta and Pakku::RecMan::Client

[17:06] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/544

[17:14] *** aluaces joined
[17:19] <timotimo> xinming_: if you have a bit extra time, you could try getting a stack trace at a random point where it's been growing too much

[17:19] <timotimo> xinming_: you can use rakudo-gdb-m (if you've got a gdb, that is) and just ctrl-c when you've noticed it started growing (i guess almost immediately?)

[17:20] <timotimo> hopefully you have a moarvm with debug symbols, in that case you can look in "bt" for a "tc=0x..." and then "call MVM_dump_backtrace(0x...)"

[17:23] *** wamba left
[17:24] *** wamba joined
[17:28] <SmokeMachine> xinming_: I think I couldn't reproduce: https://usercontent.irccloud-cdn.com/file/6T6NHcRw/image.png

[17:28] <SmokeMachine> xinming_: let me update my rakudo

[17:34] *** wamba left
[17:40] *** Altai-man joined
[17:43] *** sena_kun left
[17:49] *** sjaveed left
[17:49] *** sjaveed joined
[17:50] *** wamba joined
[17:54] *** sjaveed left
[17:56] *** sjaveed joined
[18:02] <Geth> ¬¶ ecosystem: 91be16881e | (Haytham Elganiny)++ | META.list

[18:02] <Geth> ¬¶ ecosystem: Add Pakku::Meta

[18:02] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/91be16881e

[18:02] <Geth> ¬¶ ecosystem: 21c840dd74 | (Haytham Elganiny)++ | META.list

[18:02] <Geth> ¬¶ ecosystem: Add Pakku::RecMan::Client

[18:02] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/21c840dd74

[18:02] <Geth> ¬¶ ecosystem: 23fa6f87df | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[18:02] <Geth> ¬¶ ecosystem: Merge pull request #544 from hythm7/master

[18:02] <Geth> ¬¶ ecosystem: 

[18:02] <Geth> ¬¶ ecosystem: Add Pakku::Meta and Pakku::RecMan::Client

[18:02] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/23fa6f87df

[18:09] <codesections> weekly: https://www.codesections.com/blog/raku-manifesto/

[18:09] <notable6> codesections, Noted! (weekly)

[18:10] * lizmat reads

[18:11] *** Sgeo joined
[18:16] *** ezzieyguywuf joined
[18:21] <El_Che> weekly: lizmat, linux pkgs are being built now, so ready for the weekly

[18:21] <notable6> El_Che, Noted! (weekly)

[18:21] <lizmat> El_Che++

[18:23] <El_Che> Altai-man++ and everyone++: no fails this time

[18:41] <Altai-man> \o/

[18:42] <Altai-man> El_Che++ patrickb++ for fixes and tests

[18:42] * Altai-man closes https://github.com/rakudo/rakudo/issues/3824

[18:42] <El_Che> oh certainly

[18:42] <El_Che> he has been a rock fixing quite a lot of building stuff 

[18:45] *** rir joined
[18:47] <El_Che> ok, pkgs released. Thx Altai-man and devs!

[18:51] <tbrowder> codesections: great post!

[18:53] <codesections> Thanks :)

[18:53] <tbrowder> but i wish raku had a prettifier for the docs

[18:53] <codesections> What would you like it to do?

[18:55] <tbrowder> i'm all in on timtoady but, for new ppl, some easier syntax might be helpful.

[18:57] <tbrowder> but yr post highlights exactly why i've thought from my first raku contact it's the best lang for intro to noob programmers

[19:00] <timotimo> https://github.com/timo/rakudo-appimage/releases/tag/2020.09 - anybody want to try 2020.09 as AppImage?

[19:00] <timotimo> notable6: weekly https://github.com/timo/rakudo-appimage/releases/tag/2020.09

[19:00] <notable6> timotimo, Noted! (weekly)

[19:02] *** xelxebar left
[19:02] *** xelxebar joined
[19:32] <El_Che> codesections: what is the difference between your Raku manifesto and a Perl one?

[19:32] <El_Che> (or Ruby for that matter)

[19:33] <El_Che> (devil's advocate and all that)

[19:36] <codesections> El_Che: That's a good question.  The _true_ answer is that I don't really know ‚Äì I've hardly written any Ruby, and I've basically never written Perl

[19:37] <codesections> I _think_ of Ruby as more of an "easy to learn" vs "rewarding mastery" language, but that might not be right

[19:38] <MasterDuke> timotimo: works for me

[19:38] <El_Che> ruby is pretty much perl with a better OO system

[19:38] <Grinnz> and less sysadmin-ness

[19:41] <El_Che> anyway, my point is that it's pretty much what Perl has been selling for decades

[19:42] <El_Che> I am sure Grinnz agress :)

[19:42] <codesections> Well, when I get to "powerful code over unsurprising code", I'll talk a bit about operator overloading/custom operators.  My understanding is that the support for both in Perl and Ruby is somewhat limited, which holds them back on "powerful code", at least in my book

[19:43] <Grinnz> they're similar ideas sure, i don't think that's a bad thing to share with perl though ;)

[19:43] <codesections> But, yeah, in general I wouldn't think that Ruby or Perl's _goals_ are all that different from Raku's (I just think we get closer to achieving those goals, imo)

[19:43] <El_Che> Peboth ruby and perl support operator overloading, although it's easier in raku

[19:43] <Grinnz> perl does not support custom operators at all, so that is one thing

[19:44] <El_Che> codesections: there are goals and there are justifications for warts :)

[19:44] *** aindilis left
[19:44] *** cpan-raku left
[19:45] <El_Che> Grinnz: really?

[19:46] <codesections> In contrast, go, rust, java, typescript, and (sort of) python seem to have pretty different goals ‚Äì I think that, even if we all had perfect execution, we'd want to make really different tradeoffs

[19:46] <Grinnz> people have come up with hacks to kind of do it, but nothing that i would call "support"

[19:46] <El_Che> https://www.foo.be/docs/tpj/issues/vol4_3/tpj0403-0012.html <-- 1999

[19:46] <Grinnz> overloading yes

[19:46] <Grinnz> you can't invent new operators

[19:46] <Grinnz> (symbolic ones anyway)

[19:46] <El_Che> that≈õ the second part of codesections point

[19:47] <Grinnz> also, overloading is primarily intended to extend the existing behavior of an operator to work with objects; when you use it to do more custom stuff it wasn't intended for, you sort of lose the warranty

[19:48] <Grinnz> not that there aren't prominent modules that do this *cough IO::All*

[19:49] *** cpan-raku joined
[19:49] *** cpan-raku left
[19:49] *** cpan-raku joined
[19:50] <Altai-man> 2c: I am not really convinced Raku is "just perl but with custom ops" even when playing Devil's advocate. There were decades between designing one and another and if you ask me, Raku has a lot of stuff (regexps-grammars, MOP, huffmanization, concurrency to name a few) that are baked in. Technically, you can do most of those things in other languages, but that would be trying to make a ferrari out of a tracktor. Technically you can tune it to some degree 

[19:50] <Altai-man> and it will be kinda sorta, but this won't be "native" feature like Raku has.

[19:50] <Grinnz> just the whole parser itself is very much better designed and extensible, yes

[19:50] <Grinnz> operators would just be one demonstration of this

[19:51] <Altai-man> I mean, the snipped one can write in 50 lines in Go and be like WOW CONCURRENCY CHANNELS SO COOL can be written in 50 or something characters in Raku. Technically both have concurrency, but it's almost like Raku takes it to 11.

[19:52] <Altai-man> s/snipped/snippet/

[19:52] <codesections> Altai-man: yeah, even without knowing Perl, I wouldn't say Raku is "just Perl with custom ops".  The interesting question ‚Äì and one I don't know enough about Perl to answer ‚Äì is whether Perl and Raku are *aiming* at the same place, and Raku just gets there better (imo).  Or are they aiming at different goals?  

[19:52] <Grinnz> i don't think there's one answer to that, both languages have many goals

[19:53] <codesections> True, of course :)

[19:53] <Grinnz> and some goals one or the other clearly finds more important

[19:54] <Altai-man> codesections, never wrote anything in perl, and I'd probably break heart for a lot of people if I start to say what I think about this whole story, so no comments. :)

[19:54] <El_Che> back

[19:55] <El_Che> like codesections suggests: what it aims to be and not how good it delivers

[19:56] <El_Che> Altai-man: the baked-in stuff helps with the readibility stuff by --ironically-- providing a single way to do it instead of non-core modules or ad hoc code

[19:57] <timotimo> i tried to do a bit of bash scripting recently and was annoyed by the magical variables it has; i'm glad raku got rid of most of the sigil + symbol variables in favor of variables with names in them

[19:58] <El_Che> "3. Powerful code over unsurprising code" can be still readable code

[19:58] <El_Che> and good names help

[20:00] <codesections> El_Che: yeah, agreed.  I think Raku can be _very_ readable.  But part of the question is "readable to whom"?  Maximizing for readability in the first 5 minutes someone spends on a project is different from maximizing for readability after someone has grokked the style/idioms that code uses  

[20:01] <El_Che> yeah, but surprising code can be painful

[20:04] <stoned75> does GLOBAL.^find_method() can find a sub ?

[20:05] <moritz> no

[20:05] <moritz> a sub is not a method

[20:05] <moritz> references to subs are usually stored in lexical scopes

[20:06] <stoned75> ah of course!

[20:06] <moritz> m: sub f() { }; say ::('&f')

[20:06] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´&f‚ê§¬ª

[20:06] <stoned75> thanks!

[20:06] <moritz> my pleasure

[20:06] <moritz> m: say CORE::('&floor)'

[20:06] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in indirect name; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3say CORE::('&floor)'7‚èè5<EOL>‚ê§¬ª

[20:06] <moritz> m: say CORE::('&floor')

[20:06] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´Sub+{is-pure}.new‚ê§¬ª

[20:09] *** rindolf left
[20:16] <stoned75> hum... sub symbols are in CORE but sub objects are in GLOBAL ? Do I make sense ?

[20:28] <Geth> ¬¶ ecosystem: hythm7++ created pull request #545: Add Pakku::RecMan

[20:28] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/545

[20:29] *** smotchkkiss joined
[20:40] <Geth> ¬¶ doc: fb7604e844 | (Stoned Elipot)++ | doc/Type/Metamodel/MROBasedMethodDispatch.pod6

[20:40] <Geth> ¬¶ doc: typo

[20:40] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/fb7604e844

[20:40] <linkable6> Link: https://docs.raku.org/type/Metamodel::MROBasedMethodDispatch

[20:45] <Geth> ¬¶ doc/core-is-std-raku: 773fecd631 | (Stoned Elipot)++ | doc/Language/packages.pod6

[20:45] <Geth> ¬¶ doc/core-is-std-raku: Perl -> Raku

[20:45] <Geth> ¬¶ doc/core-is-std-raku: review: https://github.com/Raku/doc/commit/773fecd631

[20:45] <Geth> ¬¶ doc: stoned++ created pull request #3654: Perl -> Raku

[20:45] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3654

[20:59] *** aindilis joined
[21:01] *** ggoebel__ left
[21:08] <Geth> ¬¶ doc: 773fecd631 | (Stoned Elipot)++ | doc/Language/packages.pod6

[21:08] <Geth> ¬¶ doc: Perl -> Raku

[21:08] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/773fecd631

[21:08] <Geth> ¬¶ doc: 9176a7afb9 | (Will Coleda)++ (committed using GitHub Web editor) | doc/Language/packages.pod6

[21:08] <Geth> ¬¶ doc: Merge pull request #3654 from Raku/core-is-std-raku

[21:08] <Geth> ¬¶ doc: 

[21:08] <Geth> ¬¶ doc: Perl -> Raku

[21:08] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/9176a7afb9

[21:08] <linkable6> Link: https://docs.raku.org/language/packages

[21:09] *** mark[m]1 left
[21:09] <JJAtria[m]> firefox

[21:09] <tellable6> 2020-09-26T07:01:43Z #raku <jmerelo> jjatria it's the first time I've seen a META6.json like this https://gitlab.com/jjatria/raku-termbox/-/blob/master/META6.json Where did you find the specs for that?

[21:09] <tellable6> 2020-09-26T07:21:28Z #raku <jmerelo> jjatria forget my previous question.

[21:09] *** wamba left
[21:09] <JJAtria[m]> Oops, not a search bar I guess :P

[21:20] *** Altai-man left
[21:21] *** smotchkkiss left
[21:23] *** smotchkkiss joined
[21:26] *** stoned75 left
[21:30] *** smotchkkiss left
[21:34] *** codesections left
[21:50] *** stoned75 joined
[21:51] *** skids joined
[21:55] <parabolize> m: say .signature for &floor.candidates

[21:55] <camelia> rakudo-moar 85847d2f1: OUTPUT: ¬´($a)‚ê§(Numeric $a)‚ê§(num $a --> num)‚ê§¬ª

[22:06] *** vike left
[22:15] *** aluaces left
[22:18] *** ^Sauvin^ is now known as Sauvin

[22:20] *** leont left
[22:43] <tbrowder> hi, i just left the San Franciso Perl's Raku Study Group's weekly Zoom session and was pleased to see Bruce Gray there as well as Bill Michels and our host Joe Brenner. if interested, checkout the invitations on the perl6 users mailing list. it was almost like a perl conf (but only virtual beer). mtg time is 2100 europe time so you night owls might enjoy it.

[22:44] <tbrowder> i understand codesections usually hangs out there, too

[22:46] <tbrowder> it was my first time and i plan to attend more often

[22:47] *** ex_nihilo joined
[23:04] *** dominix joined
[23:05] <dominix> hi everyone

[23:05] <tbrowder> hey

[23:05] <dominix> is a there a dockerfile for raku a bit more up to date than dockerhub ?

[23:06] <dominix> I am on clear Linux and docker seems the only way to go, but on dockerhub rakudo-star is 2020.01

[23:06] <tbrowder> don't know for sure. tony-o used to have a "nightly that was updated nightly

[23:07] <dominix> thanks for pointing me at raku 2020.09 on docker (I don't care to reinstall all modules)

[23:07] <tbrowder> but i haven't used it since leaving travis

[23:07] <dominix> ware is that ?

[23:07] <dominix> were

[23:08] <tbrowder> i'm changing to using mi6 to manage my module and github-actions seem to work with it well.

[23:08] *** stoned75 left
[23:09] <tbrowder> i'm working on using it but with my own docker image of choice and so i could use tony-o's again.

[23:11] <tbrowder> or my own maybe. i'm just starting to realize how cool docker is.

[23:14] <tbrowder> hm, i don't remember recommending raku on docker...i go formrakudo-pkg

[23:14] <tbrowder> *f

[23:15] *** stoned75 joined
[23:15] <tbrowder> *use rakudo-pkg

[23:26] <tbrowder> dominix: why do you use clear linux?

[23:31] *** MilkmanDan left
[23:32] *** MilkmanDan joined
[23:42] *** ggoebel joined
[23:44] *** codesections joined
