[00:01] *** frost-lab joined
[00:14] *** Doc_Holliwood left
[00:16] <moon-child> m: say [+] 1024..*

[00:16] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´Inf‚ê§¬ª

[00:20] <timotimo> m: .say for [\+] 1024..*

[00:20] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´(timeout)1024‚ê§2049‚ê§3075‚ê§4102‚ê§5130‚ê§6159‚ê§7189‚ê§8220‚ê§9252‚ê§10285‚ê§11319‚ê§12354‚ê§13390‚ê§14427‚ê§15465‚ê§16504‚ê§17544‚ê§18585‚ê§19627‚ê§20670‚ê§21714‚ê§22759‚ê§23805‚ê§24852‚ê§25900‚ê§26949‚ê§27999‚ê§29050‚ê§30102‚ê§31155‚ê§32209‚ê§332‚Ä¶¬ª

[00:29] *** mowcat left
[00:41] <jmou> hi! i am just learning raku. wondering if anyone can explain ~~ with Match objects

[00:41] <jmou> m: 'a' ~~ /(.)/; say 'b' ~~ $0

[00:41] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[00:41] <jmou> m: 'a' ~~ /(.)/; say 'b' ~~ ~$0

[00:41] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´False‚ê§¬ª

[00:41] <timotimo> sourceable6: Match.new(), ACCEPTS

[00:41] <sourceable6> timotimo, No idea, boss. Can you give me a Code object? Output: 04===SORRY!04=== Error while compiling /tmp/QoacIMGixr‚ê§Undeclared name:‚ê§    ACCEPTS used at line 1‚ê§‚ê§

[00:41] <timotimo> sourceable6: Match.new(), "ACCEPTS"

[00:41] <sourceable6> timotimo, No idea, boss. Can you give me a Code object?

[00:42] <jmou> Match doesn't seem to have ACCEPTS, so wondering why it returns a truthy in the first example?

[00:44] <AlexDaniel`> sourceable6: Match.new().ACCEPTS

[00:44] <sourceable6> AlexDaniel`, https://github.com/rakudo/rakudo/blob/4b6b2e0/src/core.c/Mu.pm6#L20

[00:44] <AlexDaniel`> timotimo: why overthink it :)

[00:44] <timotimo> haha, ok

[00:44] <AlexDaniel`> sourceable6: Match.new().ACCEPTS(‚Äòfoo‚Äô)

[00:44] <sourceable6> AlexDaniel`, https://github.com/rakudo/rakudo/blob/4b6b2e0/src/core.c/Match.pm6#L238

[00:44] *** lucasb left
[00:46] <jmou> ah so it does have ACCEPTS...

[00:47] <timotimo> is it docced at all?

[00:47] <jmou> is there an intuition for why a Match object should return itself in ~~ ?

[00:47] <jmou> mmm i don't think so... https://docs.raku.org/routine/ACCEPTS

[00:53] <jmou> found the commit for Match.ACCEPTS *hmm* https://github.com/rakudo/rakudo/commit/b4296cbfbcf160abf9c6b7e71b2d223fa5a94776

[01:04] *** Tirifto left
[01:25] <timotimo> it's probably for when you have something that does a match on the RHS on ~~

[01:25] <timotimo> like a $blan ~~ m/foo/ would do that

[01:30] <jmou> ah i can see that. i suppose you could also write $blah ~~ /foo/ to not use a Match on the RHS

[01:30] <jmou> but it makes sense

[02:00] *** rindolf joined
[02:07] <timotimo> coverage data from the tests should be able to tell us what tests that it does that, and then we'd also have the right spot in the design documents to look

[02:33] *** defaultxr left
[02:39] *** defaultxr joined
[03:04] <xinming> Can we do multi dispatch on whenever?

[03:04] <timotimo> not sure how exactly you mean that

[03:05] <xinming> Something like, react { whenever $supply -> ('a') { ... }; whenever $supply -> ('b') { ... } };

[03:05] <timotimo> you can use multile `when` inside of a `whenever` since it sets `$_`

[03:05] <xinming> got it, thanks

[03:06] <timotimo> you could do that with .grep on supplies, but then you won't have "if a more specific rule matched, don't match any of the others" semantics like given/when or multi-dispatch haev

[03:09] <xinming> timotimo: Thanks, Will use `when` approach

[03:17] <xinming> m: my $s = supply { emit(("X", "a")); emit(("Y", "b")) }; react { whenever $s { when (my $t, "a") { $t.say }; when ($t, "b") { "b".say } } }

[03:17] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´(Any)‚ê§b‚ê§¬ª

[03:17] <xinming> timotimo: Is it possible to do assignment to var too?

[03:17] <xinming> Just like multi dispatch, the var is also assigned.

[03:19] <timotimo> m: given ("X", "a") { when :(my $t, "a") { say $t }; say "hmm" }

[03:19] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid typename 'my' in parameter declaration.‚ê§at <tmp>:1‚ê§------> 3given ("X", "a") { when :(my7‚èè5 $t, "a") { say $t }; say "hmm" }‚ê§¬ª

[03:19] <timotimo> m: given ("X", "a") { when :($t, "a") { say $t }; say "hmm" }

[03:19] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$t' is not declared‚ê§at <tmp>:1‚ê§------> 3iven ("X", "a") { when :($t, "a") { say 7‚èè5$t }; say "hmm" }‚ê§¬ª

[03:19] <timotimo> m: given ("X", "a") { when :(*, "a") -> $t, "a" { say $t }; say "hmm" }

[03:19] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´===SORRY!===‚ê§Internal error: find_var_decl could not find $_‚ê§¬ª

[03:19] <timotimo> haha, oops

[03:19] <timotimo> that's not great

[03:19] <xinming> :You find a bug

[03:20] <xinming> OUTPUT: ¬´===SORRY!===‚ê§Internal error: find_var_decl could not find $_‚ê§¬ª

[03:20] *** frost-lab left
[03:24] *** cpan-raku left
[03:44] *** cpan-raku joined
[03:44] *** cpan-raku left
[03:44] *** cpan-raku joined
[04:16] *** leont left
[04:51] *** ribasushi left
[04:54] *** japhb left
[04:54] *** japhb joined
[04:54] *** wmoxam left
[04:54] *** wmoxam joined
[04:55] *** ribasushi joined
[05:08] *** eater left
[05:09] *** eater joined
[05:11] *** warriors joined
[05:12] *** rjbs left
[05:12] *** rjbs joined
[05:28] *** a6502 left
[05:28] *** a6502 joined
[05:33] *** TheOneWhoSighs joined
[05:36] *** TheOneWhoSighs left
[06:36] *** nativecallable6 left
[06:36] *** unicodable6 left
[06:36] *** tellable6 left
[06:36] *** notable6 left
[06:36] *** sourceable6 left
[06:36] *** squashable6 left
[06:36] *** evalable6 left
[06:36] *** bisectable6 left
[06:36] *** benchable6 left
[06:36] *** bloatable6 left
[06:36] *** coverable6 left
[06:37] *** bisectable6 joined
[06:37] *** unicodable6 joined
[06:38] *** notable6 joined
[06:38] *** evalable6 joined
[06:38] *** bloatable6 joined
[06:38] *** benchable6 joined
[06:38] *** nativecallable6 joined
[06:39] *** squashable6 joined
[06:39] *** sourceable6 joined
[06:39] *** coverable6 joined
[06:40] *** tellable6 joined
[07:29] *** moony left
[07:30] *** silug left
[07:30] *** moony joined
[07:37] *** wbn left
[07:45] <notandinus> what is the recommended config module?

[07:46] <notandinus> star distribution included toml and yaml, should i go with those or simple ini?

[07:49] *** silug joined
[07:50] <moon-child> notandinus: I would go with toml.  Yaml is really annoying, and toml is basically formalised ini

[07:50] *** squashable6 left
[07:51] *** squashable6 joined
[07:57] <notandinus> moon-child: i see, toml looks good. i'll use that, thanks.

[07:58] <notandinus> also do you have links to a good guide to read before creating a backup system for personal use? i'll just define profiles (list  of files) & tar them.

[08:01] <moon-child> noooo don't do that

[08:01] <moon-child> use zfs

[08:02] <moon-child> make snapshots

[08:04] <notandinus> oh, i use obsd so no zfs

[08:04] <moon-child> :/

[08:04] <moon-child> I probably would use openbsd if it had zfs

[08:04] <notandinus> is this a very bad idea? i've been taking daily backups of some files, i've put it in cron

[08:05] <notandinus> seems to work fine, alsoit sync all files to other devices, very simple tar + gpg backup

[08:09] <notandinus> what is recommended directory structure for a raku program?

[08:10] *** Doc_Holliwood joined
[08:10] *** parabolize left
[08:53] *** Altai-man joined
[09:10] *** sena_kun joined
[09:11] *** Altai-man left
[09:19] *** sjm_uk joined
[09:30] *** squashable6 left
[09:31] *** squashable6 joined
[09:48] *** wamba joined
[09:49] <epony> merry OpenBSD Xmas!

[10:08] <notandinus> what is the equivalent of strftime (Perl) in Raku?

[10:20] <sena_kun> notandinus, https://docs.raku.org/type/Dateish#method_formatter <- ?

[10:24] *** aborazmeh joined
[10:24] *** aborazmeh left
[10:24] *** aborazmeh joined
[10:25] *** wbn joined
[10:41] *** warriors left
[10:54] *** aborazmeh left
[10:56] *** Black_Ribbon left
[10:57] *** sno joined
[11:02] *** Doc_Holliwood left
[11:14] *** Sgeo left
[11:26] *** jferrero joined
[11:41] *** dotdotdot left
[12:01] *** dotdotdot joined
[12:14] *** anx joined
[12:15] <anx> p6: say 3

[12:15] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´3‚ê§¬ª

[12:18] <anx> Long back while i coded in perl, there was perl6 under development, also called parrot at the time. Is it renamed to Raku ?

[12:19] <tyil> anx: yes

[12:19] <tellable6> 2020-12-23T16:37:42Z #raku <melezhik> tyil Hi Patrick! Could you please comment on this? https://github.com/melezhik/sparky/pull/2#issuecomment-750376484 , thanks

[12:20] <anx> Thanks for response tyil

[12:21] <lizmat> anx: also, Parrot is no more, Raku currently runs on MoarVM, JVM and Javascript

[12:22] <anx> ok, I would like to know more about raku. I will browse the website, thanks lizmat

[12:26] <notandinus> sena_kun: i see, thanks

[12:27] <notandinus> how do i do something like: " my @t = all elements of @set_a which are not present in @set_b" ?

[12:29] <notandinus> i'm currently iterating over @set_a and pushing unless @set_b ‚àã $

[12:32] <sena_kun> m: my $a = set(1, 2, 3); my $b = set(2); say $a (-) $b;

[12:32] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´Set(1 3)‚ê§¬ª

[12:32] <sena_kun> notandinus, there is a set difference operator

[12:32] <sena_kun> notandinus, https://docs.raku.org/language/operators#infix_(-),_infix_%E2%88%96

[12:35] *** leont joined
[12:36] <notandinus> sena_kun: ah isee, thanks, that's nice

[12:51] *** ensamvarg195 joined
[12:52] *** ensamvarg195 left
[12:54] *** ensamvarg195 joined
[12:55] *** ensamvarg195 left
[12:57] *** ensamvarg195 joined
[13:09] *** Altai-man joined
[13:11] *** sena_kun left
[13:31] *** zln joined
[13:37] *** anx left
[13:37] <notandinus> how do i convert a set to a list?

[13:37] <notandinus> i performed the set difference on 2 lists and it returned a set, i want to convert that to a list

[13:40] <grondilu> m: say <foo bar>.Set.List

[13:40] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´(bar => True foo => True)‚ê§¬ª

[13:40] <grondilu> m: say <foo bar>.Set.List.keys

[13:40] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´(0 1)‚ê§¬ª

[13:40] <grondilu> :/

[13:40] <grondilu> m: say <foo bar>.Set.List>>.keys

[13:40] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´((foo) (bar))‚ê§¬ª

[13:41] <grondilu> m: say <foo bar>.Set.keys

[13:41] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´(foo bar)‚ê§¬ª

[13:41] <grondilu> ^probably like this

[13:41] <notandinus> i see, thanks , its mentioned in docs/type/Set

[13:41] <notandinus> just read that

[13:55] *** lucasb joined
[14:24] *** thdrmz joined
[15:24] *** squashable6 left
[15:24] *** coverable6 left
[15:24] *** benchable6 left
[15:24] *** notable6 left
[15:24] *** sourceable6 left
[15:24] *** tellable6 left
[15:24] *** bloatable6 left
[15:24] *** unicodable6 left
[15:24] *** quotable6 left
[15:24] *** nativecallable6 left
[15:24] *** bisectable6 left
[15:24] *** evalable6 left
[15:24] *** greppable6 left
[15:24] *** shareable6 left
[15:24] *** statisfiable6 left
[15:24] *** releasable6 left
[15:24] *** linkable6 left
[15:24] *** committable6 left
[15:24] *** benchable6 joined
[15:24] *** linkable6 joined
[15:25] *** nativecallable6 joined
[15:25] *** greppable6 joined
[15:25] *** sourceable6 joined
[15:25] *** statisfiable6 joined
[15:25] *** unicodable6 joined
[15:25] *** evalable6 joined
[15:25] *** coverable6 joined
[15:25] *** bisectable6 joined
[15:26] *** notable6 joined
[15:26] *** tellable6 joined
[15:26] *** squashable6 joined
[15:26] *** releasable6 joined
[15:26] *** bloatable6 joined
[15:26] *** quotable6 joined
[15:26] *** committable6 joined
[15:26] *** shareable6 joined
[15:44] *** parabolize joined
[15:46] *** leont left
[16:14] *** _jrjsmrtn joined
[16:14] *** __jrjsmrtn__ left
[16:38] *** thdrmz left
[17:05] *** brtastic joined
[17:10] *** sena_kun joined
[17:11] *** Altai-man left
[17:22] <xinming> m: $_ = <a b>; when my ($a, $b) { .say; }

[17:22] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´===SORRY!===‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§¬ª

[17:22] <xinming> Is this  a bug?

[17:51] *** thdrmz joined
[18:08] <grondilu> sourceable6: when

[18:08] <sourceable6> grondilu, No idea, boss. Can you give me a Code object? Output: 04===SORRY!04=== Error while compiling /tmp/sWHcp8vnOh‚ê§Whitespace required after keyword 'when'‚ê§at /tmp/sWHcp8vnOh:1‚ê§------> 03when08‚èè04<EOL>‚ê§

[18:08] <grondilu> m: when

[18:08] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Whitespace required after keyword 'when'‚ê§at <tmp>:1‚ê§------> 3when7‚èè5<EOL>‚ê§¬ª

[18:08] * grondilu had no idea 'when' was a keyword

[18:09] <grondilu> m: given <a b> { when my $a { .say } }

[18:09] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´(a b)‚ê§¬ª

[18:10] <grondilu> m: given <a b> { when my ($a, $b) { .say } }

[18:10] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´===SORRY!===‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§¬ª

[18:10] <grondilu> m: given "foo" { when my ($a, $b) { .say } }

[18:10] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´===SORRY!===‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§¬ª

[18:10] <grondilu> m: given "foo" { when my ($, $) { .say } }

[18:10] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´===SORRY!===‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§¬ª

[18:10] <grondilu> m: given "foo" { when my $ { .say } }

[18:10] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´foo‚ê§¬ª

[18:11] <grondilu> looks like a bug indeed, though the semantic is dubious

[18:11] <grondilu> m: given "foo" { when my $ { .say }; default { say "bar" } }

[18:11] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´foo‚ê§¬ª

[18:11] <grondilu> m: given "foo" { when my $ = 0 { .say }; default { say "bar" } }

[18:11] <camelia> rakudo-moar 4b6b2e070: OUTPUT: ¬´bar‚ê§¬ª

[18:21] *** cpan-raku left
[18:22] *** cpan-raku joined
[18:22] *** cpan-raku left
[18:22] *** cpan-raku joined
[19:00] *** warriors joined
[19:02] *** thdrmz left
[19:04] *** thdrmz joined
[19:22] *** Sgeo joined
[19:27] *** thdrmz left
[19:27] *** thdrmz1 joined
[19:30] *** thdrmz1 is now known as thdrmz

[19:30] *** Doc_Holliwood joined
[19:38] *** brtastic left
[19:41] *** agentzh left
[19:41] *** agentzh joined
[19:41] *** agentzh left
[19:41] *** agentzh joined
[19:56] *** melezhik joined
[19:56] <melezhik> there is a Sparky feature request - SCM polling VS web hooks discussion, join if you can - https://github.com/melezhik/sparky/issues/3 

[20:01] *** pecastro left
[20:02] *** pecastro joined
[20:09] *** melezhik left
[20:39] *** tejr left
[20:40] *** tejr joined
[20:40] *** tejr left
[20:45] *** tejr joined
[20:47] *** sjm_uk left
[21:09] *** Altai-man joined
[21:11] *** sena_kun left
[21:36] *** rindolf left
[21:39] *** n1n3fly joined
[21:39] *** wamba left
[21:43] *** Tirifto joined
[22:24] *** Doc_Holliwood left
[22:37] *** brtastic joined
[22:44] *** n1n3fly left
[22:53] *** brtastic left
[23:00] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2020/12/25/coercive-files/

[23:15] *** Altai-man left
[23:31] *** jmchael left
[23:43] *** jmchael joined
