[00:01] *** sena_kun joined
[00:03] *** Altai-man_ left
[00:28] *** sno left
[00:32] *** Cabanossi left
[00:39] <raku-bridge> <DataKinds> rypervenche: might be very overkill, but that's totally something that mongoDB or similar could make quick work of

[00:39] <raku-bridge> <DataKinds> and you get cool things like very fast indexing and bloom filters if you go that route

[00:41] <raku-bridge> <DataKinds> https://modules.raku.org/dist/MongoDB:cpan:MARTIMM looks very cute

[00:41] *** xinming left
[00:42] *** xinming joined
[00:42] *** MilkmanDan left
[00:42] *** Cabanossi joined
[00:45] *** vike left
[00:54] *** vike joined
[00:55] *** Xliff joined
[00:56] *** xinming left
[00:56] *** xinming joined
[00:59] <elcaro> The title on moarvm.org says "MoarVM - A VM for NQP and Rakudo Perl 6"

[00:59] <jdv79> what does it all mean?

[00:59] <elcaro> what should this change to? "... NQP and Raku"? "... NQP and Rakudo Raku"?

[01:01] <elcaro> "MoarVM - An elegant VM for a more civilized age"

[01:10] *** oddp left
[01:10] *** molaf left
[01:22] *** molaf joined
[01:30] *** softmoth joined
[01:37] <timotimo> ah don't you just love it when a tiny usability feature feels good to use

[01:37] <timotimo> even though you're working in a browser

[01:48] <softmoth> :)

[01:51] <timotimo> the heap snapshot explorer has two panes for one object each with all its outgoing or ingoing references, and each pane has a "copy over to the other side" button

[01:52] <timotimo> but now holding shift while clicking a reference will put the object into the other pane instead of the one it's from

[01:59] *** maggotbrain joined
[02:01] *** Altai-man_ joined
[02:03] *** sena_kun left
[02:05] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:11] *** rbt left
[02:11] *** rbt joined
[02:14] <softmoth> that's a nice touch

[02:15] *** Cabanoss- joined
[02:17] *** Cabanossi left
[02:17] *** Cabanoss- is now known as Cabanossi

[02:21] *** softmoth left
[02:22] *** softmoth joined
[02:24] *** Doc_Holliwould left
[02:27] <timotimo> perhaps even necessary to make it remotely usable :)

[02:30] *** cpan-raku left
[02:31] *** cpan-raku joined
[02:31] *** cpan-raku left
[02:31] *** cpan-raku joined
[02:45] *** zacts joined
[03:26] *** sftp left
[03:30] *** sftp joined
[03:32] *** Cabanossi left
[03:35] *** Cabanossi joined
[03:55] *** rbt left
[03:55] *** rbt joined
[03:59] *** zacts left
[04:02] *** sena_kun joined
[04:03] *** Altai-man_ left
[04:21] <raku-bridge> <DataKinds> hey all, I have a work in progress expansion upon that blog post that I posted earlier

[04:21] <raku-bridge> <DataKinds> https://datakinds.github.io/2020/06/25/explaining-raku-using-itertools

[04:21] <raku-bridge> <DataKinds> don't post it anywhere but if anyone has any feedback I'd like to hear it üôÇ

[04:26] <Xliff> DataKinds: Nice job from what I've read so far.

[04:26] <Xliff> One thing that twisted my head was the accumulate function...

[04:26] <raku-bridge> <DataKinds> why's that?

[04:26] *** epony left
[04:26] <Xliff> "sub accumulate(@p, &func = * + *) { [\[&func]] @p }"

[04:27] <raku-bridge> <DataKinds> ahhhh

[04:27] <Xliff> I have never seen that in Raku, before. Can you explain why the nested square braces?

[04:27] <raku-bridge> <DataKinds> https://docs.raku.org/language/operators#Reduction_metaoperators

[04:27] *** epony joined
[04:27] <raku-bridge> <DataKinds> > To wrap a function instead of an operator, provide an additional layer of square brackets

[04:27] <raku-bridge> <DataKinds> > Prefix the wrapped operator with a , to return a lazy list of all intermediate values instead

[04:28] <raku-bridge> <DataKinds> er. that's supposed to be a \, but discord ate it

[04:28] <Xliff> Ah! OK. I must have missed that construct, first time around.

[04:32] <raku-bridge> <DataKinds> yeah, it just stuck out to me because i'm an APL guy

[04:32] *** xinming left
[04:33] *** xinming joined
[04:53] *** sena_kun left
[04:54] *** sena_kun joined
[04:54] *** schlaftier left
[04:54] *** schlaftier joined
[05:13] *** abraxxa left
[05:16] *** abraxxa joined
[05:28] *** molaf left
[05:33] *** aborazmeh joined
[05:33] *** aborazmeh left
[05:33] *** aborazmeh joined
[05:36] *** bocaneri joined
[05:44] *** aborazmeh left
[05:45] *** bocaneri is now known as Boc

[05:49] *** aborazmeh joined
[05:49] *** aborazmeh left
[05:49] *** aborazmeh joined
[06:01] *** Altai-man_ joined
[06:03] *** Black_Ribbon left
[06:04] *** sena_kun left
[06:04] <Xliff> m: my @a = <a b c d e>; @a .= splice(2, 0); @a.gist.say

[06:04] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´[]‚ê§¬ª

[06:05] <Xliff> m: my @a = <a b c d e>; @a.splice(2, 0); @a.gist.say

[06:05] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´[a b c d e]‚ê§¬ª

[06:05] <Xliff> m: my @a = <a b c d e>; @a.splice(2, 1); @a.gist.say

[06:05] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´[a b d e]‚ê§¬ª

[06:06] *** aborazmeh left
[06:06] *** zacts joined
[06:36] *** clarjon1 left
[06:49] *** Xliff left
[06:52] *** Doc_Holliwould joined
[06:53] *** oddp joined
[06:53] *** antoniogamiz joined
[06:53] *** zacts left
[06:53] *** zacts joined
[06:57] *** Kaeipi left
[07:00] *** Kaiepi joined
[07:00] *** wamba joined
[07:10] *** Guest98635 left
[07:11] *** rbt left
[07:11] *** softmoth left
[07:11] *** rbt joined
[07:16] *** Guest98635 joined
[07:19] *** nadim joined
[07:20] *** nadim is now known as Guest14298

[07:33] *** Guest14298 left
[07:45] *** tejr left
[07:58] *** rbt left
[07:58] *** rbt joined
[07:59] *** tejr joined
[08:02] *** sena_kun joined
[08:03] *** Altai-man_ left
[08:06] *** xinming left
[08:07] *** xinming joined
[08:13] *** JJMerelo joined
[08:33] *** Sgeo left
[08:33] *** sarna joined
[08:38] *** antoniogamiz left
[08:44] *** aborazmeh joined
[08:46] *** pecastro joined
[08:48] *** aborazmeh left
[08:53] *** zacts left
[08:54] *** zacts joined
[09:12] *** JJMerelo left
[09:12] *** aborazmeh joined
[09:12] *** aborazmeh left
[09:12] *** aborazmeh joined
[09:24] *** aborazmeh left
[09:26] *** antoniogamiz joined
[09:51] *** sno joined
[10:01] *** Altai-man_ joined
[10:02] *** libertas left
[10:03] *** sena_kun left
[10:12] <El_Che> lizmat: you're a busy twitter bee :)

[10:12] *** antoniogamiz left
[10:13] <lizmat> yeah.. never waste an opportunity for more exposure

[10:14] <El_Che> It seems to annoucement was mostly positively received

[10:14] <El_Che> on the other hand, if it was a physical conf we would have seen some lynching ;)

[10:17] *** riatre left
[10:20] *** riatre joined
[10:23] *** JJMerelo joined
[10:32] *** Doc_Holliwould left
[10:32] *** libertas joined
[10:51] *** zacts left
[10:51] *** zacts joined
[10:57] <Geth> ¬¶ ecosystem: e5dc5c2246 | (Richard Hainsworth)++ (committed using GitHub Web editor) | META.list

[10:57] <Geth> ¬¶ ecosystem: Adding Pod::From::Cache to ecosystem

[10:57] <Geth> ¬¶ ecosystem: 

[10:57] <Geth> ¬¶ ecosystem: Pod::From::Cache replaces the functionality of Pod::To::Cache, removes unnecessary functionality, and has no other non-core modules.

[10:57] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/e5dc5c2246

[11:01] *** tejr left
[11:02] *** rindolf joined
[11:04] *** vike left
[11:05] *** xinming left
[11:06] *** xinming joined
[11:14] *** atta joined
[11:18] *** kensanata joined
[11:21] *** tejr joined
[11:24] *** tejr left
[11:25] *** tejr joined
[11:27] *** antoniogamiz joined
[11:44] *** patrickb joined
[11:46] *** vike joined
[11:49] *** tejr left
[11:53] <abraxxa> https://andrewshitov.com/2020/06/06/some-tips-for-working-with-hashes-in-raku/ is sadly a perfect example what's wrong with Rakus type system: from four types in Perl 5 to too much types which even overlap with the sigils that as available for some types but not all and even change what they do ;(

[11:54] *** tejr joined
[11:56] *** lichtkind joined
[12:00] <ShimmerFairy> It seems that blog post focuses a lot on "look at these weird corner cases that can trip you up", and not enough on "it's because the system works like this, which isn't that complex"

[12:01] *** sena_kun joined
[12:03] *** Altai-man_ left
[12:03] <ShimmerFairy> (though I will say that having sigils beyond $ is way less useful than I presume they are in Perl 5)

[12:11] *** rbt left
[12:11] *** rbt joined
[12:12] *** brtastic joined
[12:14] *** antoniogamiz left
[12:17] <jnthn> I'm not really sure what point that article is trying to make. It's pretty simple really: assignment is a copying operation into the target on the left, so the thing you end up with is always the type of the thing on the left.

[12:17] <jnthn> I think the problems are largely that folks thing assignment is *replacing* the thing on the left with the thing on the right. And until that distinction is understood, all kinds will be confusing.

[12:18] <jnthn> s/thing/think/

[12:20] <jnthn> So assign into $ or & means store the thing on the right into the value of the scalar container, assignment into @ means iterate the thing on the right and store each value it produces into the array, and assignment into % means iterate the thing on the right and find pairs or take the things pair-wise

[12:28] *** JJMerelo left
[12:29] <ShimmerFairy> I still have quite a bit of trouble with arrays and hashes honestly, though I wonder how much of that comes from the fact that I used Raku pre-GLR.

[12:34] *** chloekek joined
[12:39] *** rindolf left
[12:45] *** Kaiepi left
[12:48] *** Kaiepi joined
[12:50] *** chloekek left
[12:56] <abraxxa> but it answers exactly those questions that come up in my mind every time I touch Raku code

[12:56] <abraxxa> even knowing the difference between a %hash variable holding an object of type Hash directly vs. a scalar container pointing to a Hash object doesn't help

[12:57] <abraxxa> I *think* I would have preferred to abandon the sigils at all

[12:58] <abraxxa> and you can code Raku without them, but it might have some drawbacks and the code style clashes with people that prefer them

[12:59] <abraxxa> jnthn = vs := is also hard to grasp

[12:59] <lizmat> personally, I have been using the syntax "my \foo := bar"

[12:59] <lizmat> where the := is currently not needed

[12:59] <lizmat> I hope a future language version would allow you to drop the \ in that case

[12:59] <abraxxa> I say \ in an article yesterday for the very first time

[13:00] <lizmat> which would allow you to program sigilless if you want to

[13:00] <jnthn> It won't because the \ is there to solve an ambiguity

[13:00] <lizmat> which ambiguity ?

[13:00] <jnthn> With a type name

[13:01] <El_Che> well, if people found $@%& ugly, wait until they hear about \

[13:01] <lizmat> you mean, in the case "my int foo := bar" ?

[13:01] <El_Che> ;)

[13:01] <jnthn> lizmat: Well, just so far as `my foo` - is `foo` a type name or a symbol to be introduced? 

[13:02] <lizmat> if we would go for allowing that, it would mean a new symbol

[13:02] *** Kaeipi joined
[13:02] <abraxxa> why not use $foo?

[13:02] <lizmat> agree you have some potential issue there

[13:03] <abraxxa> because of the additional container memory usage?

[13:03] <abraxxa> and I thought the language design phase is over after 20 years...

[13:03] <abraxxa> to me this is bikeshedding

[13:03] <lizmat> no, the language continues to evolve

[13:03] <lizmat> but in a controlled way  :-)

[13:03] <abraxxa> the languages that have a character in front of variable names use $

[13:03] <jnthn> < jnthn> It won't <== pretty clear, I think ;)

[13:04] <abraxxa> end of discussion

[13:04] <lizmat> [14:57:28]  <abraxxa>	I *think* I would have preferred to abandon the sigils at all   

[13:04] <lizmat> ??

[13:05] <abraxxa> what do they add but confusion and more ways to do basic things?

[13:05] <abraxxa> when everything is an object, $var holds an object, which one doesn't matter

[13:05] <lizmat> ah, so you want to abandon @ and % ?

[13:05] <abraxxa> if you want to know you call isa on it

[13:06] <lizmat> I see... well, you can write your code like that, so go for it!

[13:06] *** Kaiepi left
[13:06] <abraxxa> that would at least stop the question which one you can use because both work on assignment but are different later one

[13:06] <abraxxa> that confuses starters completely

[13:06] <lizmat> my $list = (1,2,3,4); for $list { }   # how many times will this iterate ?

[13:07] <abraxxa> i guess once

[13:07] <abraxxa> but this is where the problem starts

[13:07] <lizmat> is that what you want ?

[13:07] <abraxxa> either an array has a sigil and is NOT an object but something special, but not both

[13:07] <lizmat> that's why we have the @ sigil :-)

[13:07] <lizmat> in Raku, *everything* is an object

[13:07] <abraxxa> yes, but Array and Hash have a sigil, the others don't

[13:08] <lizmat> even native variables are, at some place

[13:08] <lizmat> which others ?

[13:08] <abraxxa> how do other languages solve this problem?

[13:08] <abraxxa> Pair?

[13:08] <jnthn> There's no direct connection between Array and Hash and sigils, other than they are the default container type for @ and %

[13:08] <jnthn> Any other Positional or Associative type can be bound to an @ or %

[13:09] <jnthn> my %h is BagHash # for example

[13:09] <lizmat> m: my @a is List = 1,2,3; @a[0] = 42

[13:09] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Cannot modify an immutable List ((1 2 3))‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:09] <jnthn> Or that

[13:09] <abraxxa> the missing thing for me is the guideline when to use what and why

[13:09] <lizmat> so we have a documentation issue?

[13:09] <abraxxa> lizmat: what is a List? Did we *really* need another Array type?

[13:10] <abraxxa> and there are so many of them, and each call returns a different one!

[13:10] <synthmeat> wasn't it for the laziness?

[13:10] <ShimmerFairy> The non-$ sigils are the kind of thing I'd suggest maybe removing in a hypothetical Raku 2, but it's not big enough to worry about changing now.

[13:10] <lizmat> m: say (1,2,3).WHAT

[13:10] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´(List)‚ê§¬ª

[13:10] <ShimmerFairy> List is immutable, Array is mutable.

[13:10] <abraxxa> sometimes you need to cast, sometimes not

[13:10] <lizmat> ShimmerFairy: wish it were so simple

[13:10] <abraxxa> ShimmerFairy: and the names don't tell that difference

[13:10] <abraxxa> I'd like to be able to flag each var or maybe type with a read-only bit

[13:11] <lizmat> m: my ($a,$b) = 42, 66;  # the LHS is a List, but not immutable  :-)

[13:11] <camelia> rakudo-moar f1960baa9: ( no output )

[13:11] <ShimmerFairy> well, the List itself is immutable, the contents (annoyingly) aren't :)

[13:11] <jnthn> lizmat: Wrong, the List *is* immutable, the things inside it are mutable :)

[13:12] <abraxxa> the things outsiders critizise about Perl 5 shouldn't be amplified in Raku like List vs Array

[13:12] <lizmat> to me, saying something is immutable, implies it's a Value Type.  Lists are not

[13:12] <ShimmerFairy> m: class A { has @.b }; my $x = A.new; $x.b.push(5); say $x.perl;  # I really wish you needed 'is rw' like with scalars

[13:12] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´A.new(b => [5])‚ê§¬ª

[13:13] <lizmat> m: my @a; sub a(@b) { @b.push(42) }; dd @a

[13:13] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Array @a = []‚ê§¬ª

[13:13] <lizmat> hmmm

[13:13] *** Kaeipi left
[13:13] <El_Che> I must confess that I have been bitten quite  few times needing to cast stuff between array, list and seq

[13:14] <El_Che> adding ".list" has kind of a cargo cult + trial and error vibe in my usage

[13:14] <ShimmerFairy> I've never needed to "cast" list types as far as I can recall, they just convert as needed.

[13:15] <El_Che> the sigils are not problematic for me though

[13:16] <ShimmerFairy> Same, if there's anything wrong with with lists and hashes, it ain't the sigils :)

[13:17] <El_Che> I must say that sigils feel natural to me (knowing Perl), the \ does not

[13:18] *** soursBot joined
[13:19] <lizmat> even worse, the syntax for creating a Capture

[13:19] <lizmat> m: dd \(1,2,3, :foo)

[13:19] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´\(1, 2, 3, :foo)‚ê§¬ª

[13:19] <lizmat> m: dd (\(1,2,3, :foo)).WHAT

[13:19] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Capture‚ê§¬ª

[13:19] <El_Che> in my head: escaping regex? something utf8? a reference? a pointer?

[13:19] <lizmat> yeah, I would be in favour of disallowing that

[13:20] <lizmat> and just use:

[13:20] <El_Che> while I know what it does, but my mind hits the breaks when I skim code that uses it

[13:20] <lizmat> m: dd \(1,2,3, :foo).Capture

[13:20] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´\(1, 2, 3, :foo)‚ê§¬ª

[13:20] <lizmat> perhaps I should start with fixing the .raku representation :-)

[13:24] <jnthn> What's broken about it? \(...) is the capture literal syntax, just as :(...) is the signature literal syntax

[13:25] <jnthn> And calling .Capture on a list ain't the same, 'cus of the pair handling being different

[13:26] <ShimmerFairy> Maybe it's that a backslash usually means you're escaping something?

[13:28] <jnthn> Not really. Is \w in a regex escaping the w? Nope. :)

[13:28] <El_Che> jnthn: what I mean is that \ is already heavily overloaded

[13:28] <El_Che> thus it makes it difficult to skim code for me

[13:28] <ShimmerFairy> well, you're, um, ESCAPING the usual meaning of 'w' in that context.

[13:29] <El_Che> mm, indeed

[13:29] <jnthn> Sure, and \(...) is ESCAPING the usual meaning of parentheses being just a grouping ;)

[13:29] <El_Che> mmm

[13:29] <El_Che> :)

[13:29] <jnthn> And don't forget [\+], where you're escaping the reduction operator throwing away the intermediate results

[13:30] <ShimmerFairy> Related question: when would I, an ordinary Raku user, ever need to create a Capture or Signature?

[13:31] <jnthn> ShimmerFairy: I think about 90% of my doing that is when using Test::Mock,

[13:31] <ShimmerFairy> that would make sense

[13:32] <jnthn> Where it's really quite useful

[13:32] <lizmat> jnthn: re different Pair handling, I'm not seeing it ?

[13:32] <lizmat> m: dd \(1,2,3,:foo)

[13:32] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´\(1, 2, 3, :foo)‚ê§¬ª

[13:33] <lizmat> dd \(1,2,3, foo => True)

[13:33] <evalable6> lizmat, rakudo-moar f1960baa9: OUTPUT: ¬´\(1, 2, 3, :foo)‚ê§¬ª

[13:33] <lizmat> m: dd (1,2,3,:foo).Capture

[13:33] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´\(1, 2, 3, :foo)‚ê§¬ª

[13:33] <lizmat> m: dd (1,2,3, foo => True).Capture

[13:33] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´\(1, 2, 3, :foo)‚ê§¬ª

[13:34] <jnthn> m: sub foo($x) { dd $x }; my $c = \((a => 42)); foo(|$c)

[13:34] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´:a(42)‚ê§¬ª

[13:34] <jnthn> m: sub foo($x) { dd $x }; my $c = ((a => 42)).Capture; foo(|$c)

[13:34] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Too few positionals passed; expected 1 argument but got 0‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:35] <jnthn> Uff, JITty segfault...this'll be fun

[13:36] <lizmat> jnthn: ok, gotcha

[13:38] *** antoniogamiz joined
[13:45] <El_Che> ok, now it looks you're all speaking in tongues :P

[13:48] *** sarna left
[13:56] <[Coke]> m: :P

[13:56] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of ":P" in sink context (line 1)‚ê§¬ª

[13:56] <[Coke]> m: say :P

[13:56] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Unexpected named argument 'P' passed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:57] <[Coke]> m: dd :P

[13:57] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´:P‚ê§¬ª

[13:57] <[Coke]> there we go. :)

[13:57] *** softmoth joined
[13:58] *** lucasb joined
[14:01] *** Altai-man_ joined
[14:01] *** zacts left
[14:03] *** sena_kun left
[14:04] *** xinming left
[14:05] *** xinming joined
[14:09] *** Doc_Holliwould joined
[14:15] *** dataangel left
[14:15] *** dataangel joined
[14:16] *** antoniogamiz left
[14:21] *** b2gills left
[14:23] *** Boc left
[14:23] *** orinthe7 joined
[14:25] *** orinthe left
[14:25] *** orinthe7 is now known as orinthe

[14:33] <rypervenche> I'm trying to get this .map to work, but because I've added an if/else statement, I'm having trouble assigning the output to a variable, since it gives "Useless use of "=>" in expression "$num1 => set @num2" in sink context".

[14:33] <rypervenche> https://gist.github.com/rypervenche/5f5fc3103cd89d8007cc9ec92d64b95c

[14:34] <rypervenche> If I add "say" to line 25 it outputs the desired output, but I need that to go into the variable, not to stdout.

[14:34] *** orinthe9 joined
[14:35] <lizmat> rypervenche: what to you want to have in the map?  just :num(set @num2) ?

[14:35] *** orinthe left
[14:35] *** orinthe9 is now known as orinthe

[14:35] <rypervenche> In the resulting hash, yes that's what I would like.

[14:36] *** Boc joined
[14:36] <rypervenche> Errr, an example would be: 9831 => Set(189112 2170497 2170512)

[14:37] <lizmat> you need to store the result of $num1 => set @num2 into a variable

[14:37] <lizmat> either explicitely or implicitely

[14:38] <lizmat> that's also what the warning is telling you

[14:38] <lizmat> so something like: my \result = $num1 => set @num2; .....; result

[14:38] <rypervenche> Ahh, I'll give that a shot then. Thanks.

[14:39] <lizmat> I guess in the "if" case, you don't want anything added to the map, right ?

[14:39] *** rindolf joined
[14:40] <lizmat> also, I don't you need the outer %( ... )

[14:40] *** xinming left
[14:40] <lizmat> actuallly, hang on...

[14:40] *** skids joined
[14:41] <lizmat> do you want the %links to be a Set of Pairs ?

[14:41] *** JJMerelo joined
[14:42] <rypervenche> I want it to be a hash of sets. The source file looks like this: https://gist.github.com/rypervenche/a1dfb2505256ae8794f7297cf3cc1f2d

[14:42] <lizmat> ah, yeah, duh...   

[14:42] * lizmat has done too much social media today  :-)

[14:42] *** xinming joined
[14:42] <rypervenche> Looking to make the hash key the first number, and then the set all of the numbers that go along with that number.

[14:43] <lizmat> gotcha

[14:43] *** Doc_Holliwould left
[14:47] *** antoniogamiz joined
[14:47] *** antoniogamiz left
[14:55] *** Xliff joined
[14:55] *** Kaiepi joined
[14:55] <Xliff> \o

[14:56] <Xliff> .tell vrurg Was R#3075 ever fixed? Looks like both it and R#3284 are still open

[14:56] <linkable6> R#3075 [open]: https://github.com/rakudo/rakudo/issues/3075 [precompilation] Conflicting use statement does not produce an error, but fails dynamic compilation.

[14:56] <linkable6> R#3284 [open]: https://github.com/rakudo/rakudo/pull/3284 [precompilation] Fix Stash'es clashing after deserialization

[14:56] <tellable6> Xliff, I'll pass your message to vrurg

[14:56] *** Xliff left
[14:57] *** zacts joined
[14:57] <vrurg> Xliff: no. I'm having a lightning talk soon, will elaborate later.

[14:57] <tellable6> vrurg, I'll pass your message to Xliff

[15:03] <rypervenche> lizmat: Still not sure how to do that. Assigning the output of what I want to a variable and then calling it inside the else loop still throws the sink context error.

[15:05] <lizmat> I have a file called "ten" that contains 0..9 as words on separate lines

[15:06] <lizmat> m: my %h = "ten".IO.lines.map: -> $line { a => $line if $line eq "zero" }; dd %h   # does that explain ?

[15:06] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Failed to open file /home/camelia/ten: No such file or directory‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:06] <lizmat> Hash %h = {:a("zero")}   # output for me  :-)

[15:16] *** b2gills joined
[15:17] *** sno left
[15:21] *** MilkmanDan joined
[15:22] <JJMerelo> Just tallyed up again the number of lines the documentation includes. Some time in the past weeks, we went over 100K.

[15:22] <JJMerelo> Here's the breakdown per contributor https://github.com/JJ/TPF-Grant/blob/master/data/current-lines-written.csv

[15:23] *** sno joined
[15:25] <lizmat> JJMerelo++

[15:25] *** zacts left
[15:27] *** Kaiepi left
[15:29] * [Coke] wonders if he is the 'will' on the list.

[15:29] <JJMerelo> [Coke] yep

[15:29] <JJMerelo> Parsing of contributors is not perfect.

[15:31] <JJMerelo> It's done by "blame"ing every single file, and adding up the lines of code in every fragment.

[15:32] <JJMerelo> It's not really what every one has written, but how many lines written (or otherwise touched) by someone are in the current state of the repo.

[15:34] <JJMerelo> Here's the presentation, BTW. https://jj.github.io/doccing-raku/#/6

[15:34] <JJMerelo> I'd say it's 99% ready. Might change something from here to presentation time in 90 minutes.

[15:35] <rypervenche> lizmat: Hmmm, I altered your little one-liner to look a bit more like my hash, and I don't understand why yours works and mine has the sink issue: https://gist.github.com/rypervenche/5f5fc3103cd89d8007cc9ec92d64b95c

[15:35] <lizmat> rypervenche: because it is about the *last* value evaluated in a block

[15:36] <lizmat> so you'll always get $last-num into the hash

[15:36] <rypervenche> Oh!

[15:37] *** soursBot left
[15:39] *** kensanata left
[15:41] <rypervenche> Now I understand. Thanks so much :)

[15:41] <lizmat> weekly: https://github.com/JJ/TPF-Grant/blob/master/data/current-lines-written.csv

[15:41] <notable6> lizmat, Noted! (weekly)

[15:41] <lizmat> rypervenche: you're welcome!

[15:45] *** __jrjsmrtn__ joined
[15:46] *** _jrjsmrtn left
[15:50] *** Kaiepi joined
[15:54] *** chloekek joined
[15:54] *** xinming left
[15:55] *** xinming joined
[15:56] *** Nile joined
[15:56] *** molaf joined
[15:57] *** Nile left
[16:00] *** stoned75 joined
[16:01] *** sena_kun joined
[16:03] *** xinming left
[16:03] *** xinming joined
[16:03] *** Altai-man_ left
[16:03] *** chloekek left
[16:07] <Geth> ¬¶ ecosystem: 3e39a32626 | (Richard Hainsworth)++ (committed using GitHub Web editor) | META.list

[16:07] <Geth> ¬¶ ecosystem: removing Pod::From::Cache until tests pass

[16:07] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/3e39a32626

[16:14] *** cpan-raku left
[16:16] *** cpan-raku joined
[16:16] *** cpan-raku left
[16:16] *** cpan-raku joined
[16:17] *** soursBot joined
[16:22] *** dolmen joined
[16:23] *** chloekek joined
[16:27] *** antoniogamiz joined
[16:27] <antoniogamiz> is there a way to detect is raku is being run from cmd or Powershell?

[16:29] <sena_kun> antoniogamiz, you mean the platform or?

[16:30] <antoniogamiz> no, I mean the terminal

[16:30] *** xinming left
[16:30] <antoniogamiz> I want to delete a file, but in powershell I can use 'rm', but in cmd I have to use 'rd'

[16:30] *** guifa left
[16:30] *** xinming joined
[16:30] <antoniogamiz> So I need a way to detect what terminal is being used to run the script

[16:32] *** rindolf left
[16:34] <sena_kun> antoniogamiz, can't you call unlink?

[16:34] *** Kaiepi left
[16:34] <sena_kun> https://docs.raku.org/routine/unlink <- and it'll do the thing for you.

[16:35] <antoniogamiz> oh great, raku always has what I need :) thanks!

[16:37] *** sno left
[16:41] *** Doc_Holliwood joined
[16:41] *** orinthe5 joined
[16:41] *** guifa joined
[16:43] *** orinthe left
[16:43] *** orinthe5 is now known as orinthe

[16:43] <JJMerelo> antoniogamiz there's also a test for running in Windows, is-win

[16:43] <antoniogamiz> JJMerelo, I know, but I needed to differentiate terminals

[16:44] <antoniogamiz> unlink makes the trick

[16:44] <JJMerelo> antoniogamiz that's not so easy... but if unlink does the trick...

[16:45] *** finanalyst joined
[16:46] *** guifa left
[16:49] <finanalyst> I'm getting a '::' error in name from Test::Meta. I can suppress the error using :relaxed-name. But why am I getting the error at all? The only name I have with :: is in the provides and refers to the module being provided

[16:51] <JJMerelo> The name of the module needs to include ::

[16:53] <finanalyst> JJMerelo, so why am I getting this error: name has a '::' rather than a hyphen (if this is intentional please pass :relaxed-name to meta-ok)

[16:53] *** soursBot left
[16:55] <antoniogamiz> is there a way to make compare paths in a os-independent way? Something like "a\b".IO eq "a/b".IO => True

[16:56] <lizmat> m: "a\\b".IO eqv "a/b".IO 

[16:56] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "eqv" in expression ".IO eqv \"a/b\".IO" in sink context (line 1)‚ê§¬ª

[16:56] <lizmat> m: dd "a\\b".IO eqv "a/b".IO 

[16:56] <camelia> rakudo-moar f1960baa9: OUTPUT: ¬´Bool::False‚ê§¬ª

[16:56] *** kensanata joined
[16:58] <antoniogamiz> lizmat: so it cannot be done?

[17:00] <lizmat> not immediately 

[17:01] <lizmat> it's a good question  :-)

[17:01] <antoniogamiz> I will compare all parts then :D

[17:01] <antoniogamiz> or replace \\ by /

[17:02] <lizmat> yeah, feels like a thing to do

[17:10] *** sno joined
[17:11] *** rbt left
[17:11] *** rbt joined
[17:15] *** OpenZen joined
[17:19] *** MasterDuke left
[17:21] <patrickb> wrt distinguishing powershell and cmd: just for reference: https://github.com/Raku/App-Rakubrew/blob/master/lib/App/Rakubrew/Shell.pm#L31

[17:24] <Geth> ¬¶ ecosystem/finanalyst-patch-2: f3e0715386 | (Richard Hainsworth)++ (committed using GitHub Web editor) | META.list

[17:24] <Geth> ¬¶ ecosystem/finanalyst-patch-2: Adding Pod::From::Cache to the Ecosystem

[17:24] <Geth> ¬¶ ecosystem/finanalyst-patch-2: 

[17:24] <Geth> ¬¶ ecosystem/finanalyst-patch-2: Test::META test passing with :relaxed-name

[17:24] <Geth> ¬¶ ecosystem/finanalyst-patch-2: review: https://github.com/Raku/ecosystem/commit/f3e0715386

[17:24] <Geth> ¬¶ ecosystem: finanalyst++ created pull request #511: Adding Pod::From::Cache to the Ecosystem

[17:24] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/511

[17:27] *** dolmen left
[17:31] *** soursBot joined
[17:34] *** chloekek left
[17:40] *** reach_satori left
[17:40] *** reach_satori joined
[17:40] *** antoniogamiz_ joined
[17:42] *** Doc_Holliwood left
[17:43] *** antoniogamiz left
[17:49] *** rindolf joined
[17:50] *** Guest14298 joined
[17:53] *** antoniogamiz_ left
[17:59] *** JJMerelo left
[18:00] *** Doc_Holliwood joined
[18:01] *** Altai-man_ joined
[18:01] *** zacts joined
[18:01] *** zacts left
[18:03] *** sena_kun left
[18:05] *** rjbs left
[18:06] *** rjbs joined
[18:06] *** rjbs left
[18:06] *** rjbs joined
[18:17] *** JJMerelo joined
[18:22] *** rindolf left
[18:22] *** Boc left
[18:28] *** JJMerelo left
[18:32] *** dolmen joined
[18:33] *** Cabanossi left
[18:33] *** Cabanossi joined
[18:34] *** Sgeo joined
[18:46] *** Guest14298 left
[18:52] *** chloekek joined
[18:52] <Geth> ¬¶ ecosystem/no-volatile-source-url: 3eaa0302b2 | (Patrick B√∂ker)++ (committed using GitHub Web editor) | PULL_REQUEST_TEMPLATE.md

[18:52] <Geth> ¬¶ ecosystem/no-volatile-source-url: Add a check for volatile source-urls

[18:52] <Geth> ¬¶ ecosystem/no-volatile-source-url: 

[18:52] <Geth> ¬¶ ecosystem/no-volatile-source-url: Volatile `source-url`s will result in an inconsistent module state the users computer as soon as the contents of that source-url change without a matching change in the version number. Setting `source-url` to a git master branch is the typical faux-pas.

[18:52] <Geth> ¬¶ ecosystem/no-volatile-source-url: *Instead* one should change the `source-url`to link to a never changing target (a tag, revision or some zip file).

[18:52] <Geth> ¬¶ ecosystem/no-volatile-source-url: review: https://github.com/Raku/ecosystem/commit/3eaa0302b2

[19:01] *** kensanata left
[19:04] *** soursBot left
[19:05] *** soursBot joined
[19:08] *** molaf left
[19:15] *** rindolf joined
[19:20] <stoned75> hum... https://github.com/moose/Moose/search?l=raku

[19:24] <Geth> ¬¶ ecosystem: patrickbkr++ created pull request #512: Add a check for volatile source-urls

[19:24] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/512

[19:37] *** molaf joined
[19:57] *** dolmen left
[20:01] *** sena_kun joined
[20:03] *** Altai-man_ left
[20:07] *** rbt left
[20:08] *** rbt joined
[20:16] *** wamba left
[20:17] *** dolmen joined
[20:18] <softmoth> stoned75, well spotted. I think a bug report at github/linguist is what's needed. I've never dug into their code: https://github.com/github/linguist

[20:19] *** brtastic left
[20:23] *** wamba joined
[20:30] *** kensanata joined
[20:32] *** soursBot left
[20:35] *** finsternis joined
[20:40] *** xinming left
[20:41] *** xinming joined
[20:52] *** rindolf left
[20:58] *** wamba left
[21:02] <kensanata> Returning after a long time I uninstalled all the Perl6 stuff I had and installed rakubrew. So far so good. Then I tried zef install --/test cro and got "Enabled fetching backends [git path curl wget] don't understand http://www.cpan.org/authors/id/J/JN/JNTHN/Perl6/cro-tls-0.8.3.tar.gz" and something about configuring "one of the following backends" [pswebrequest] ‚Äì that does that mean?

[21:07] <timotimo> pswebrequest is, i think, based on powershell's built-ins?

[21:07] <timotimo> but i think the actual problem is you don't have a tar installed?

[21:08] <[Coke]> kensanata: what platform are you on?

[21:10] <kensanata> [Coke]: Some Debian variant (PureOS)

[21:10] <kensanata> timotimo: tar --version says I have 1.30

[21:11] <kensanata> [Coke]: That is, I did a sudo apt install rakubrew and went from there.

[21:11] <kensanata> Let me check what I did.

[21:13] <kensanata> No, I did cpanm App::Rakubrew because apt only had rakudo stuff from 2018

[21:14] *** aborazmeh joined
[21:14] *** aborazmeh left
[21:14] *** aborazmeh joined
[21:30] *** softmoth left
[21:33] *** softmoth joined
[21:39] <kensanata> There used to be a prove6 binary, which I still refer to in my Makefile. What's it called, now?

[21:40] *** softmoth left
[21:54] *** kensanata left
[22:01] *** Altai-man_ joined
[22:03] *** sena_kun left
[22:11] *** rbt left
[22:11] *** rbt joined
[22:12] *** nebuchadnezzar left
[22:12] *** Celelibi left
[22:13] <timotimo> could it be t/harness6?

[22:14] <timotimo> or installed with TAP::Harness from the ecosystem

[22:19] <leont> App::prove6

[22:20] <leont> (which uses TAP::Harness)

[22:22] *** Celelibi joined
[22:24] <leont> I think someone is looking for raku https://github.com/Perl/perl5/issues/17886

[22:25] <raku-bridge> <DataKinds> just finished the post that was WIP yesterday https://datakinds.github.io/2020/06/25/explaining-raku-using-itertools

[22:36] <leont> Yeah, some of those really do need an explanation

[22:38] <leont> But half of that is that non-python programmers have no idea what some of these functions are supposed to do

[22:39] *** Black_Ribbon joined
[22:40] <AlexDaniel> kensanata: if you're on a debian derivative, any reason you can't use rakudo that is packaged in the repos?

[22:40] <tellable6> AlexDaniel, I'll pass your message to kensanata

[22:42] <AlexDaniel> kensanata: ah, I've read your last message. Rakudo 2018.12 is not bad at all, but you can easily have 2020.05.1 from unstable

[22:42] <tellable6> AlexDaniel, I'll pass your message to kensanata

[22:48] *** lucasb left
[22:49] *** aborazmeh left
[22:54] *** finanalyst left
[22:58] *** skids left
[23:04] *** dolmen left
[23:05] <Geth> ¬¶ whateverable: 152bd39da6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 21 files

[23:05] <Geth> ¬¶ whateverable: Fix %*BOT-ENV situation

[23:05] <Geth> ¬¶ whateverable: 

[23:05] <Geth> ¬¶ whateverable: By using PROCESS variables instead. Dynamic variables shouldn't

[23:05] <Geth> ¬¶ whateverable: be used in code where start blocks are common. See

[23:05] <Geth> ¬¶ whateverable: https://github.com/rakudo/rakudo/issues/3770.

[23:05] <Geth> ¬¶ whateverable: 

[23:05] <Geth> ¬¶ whateverable: There's probably a better way to achieve this, but for now

[23:05] <Geth> ¬¶ whateverable: this will do.

[23:05] <Geth> ¬¶ whateverable: review: https://github.com/Raku/whateverable/commit/152bd39da6

[23:05] <Geth> ¬¶ whateverable: 4fea789613 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Statisfiable.p6

[23:05] <Geth> ¬¶ whateverable: Rework Statisfiable

[23:05] <Geth> ¬¶ whateverable: 

[23:06] <Geth> ¬¶ whateverable: It's an old bot so the code was a bit dated too. This should get it

[23:06] <Geth> ¬¶ whateverable: back on track.

[23:06] <Geth> ¬¶ whateverable: review: https://github.com/Raku/whateverable/commit/4fea789613

[23:10] *** pecastro left
[23:16] *** chloekek left
[23:30] *** Maylay left
[23:32] *** finanalyst joined
[23:33] *** Cabanossi left
[23:33] *** maggotbrain left
[23:34] *** Maylay joined
[23:34] <Geth> ¬¶ whateverable: cf9bcd03b1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Configurable.pm6

[23:34] <Geth> ¬¶ whateverable: Can't use binding here (oops)

[23:34] <Geth> ¬¶ whateverable: review: https://github.com/Raku/whateverable/commit/cf9bcd03b1

[23:35] *** nebuchadnezzar joined
[23:42] *** Cabanossi joined
[23:47] *** patrickb left
[23:54] *** MilkmanDan left
[23:58] *** MilkmanDan joined
