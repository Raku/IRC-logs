[00:12] *** aborazmeh joined
[00:12] *** aborazmeh left
[00:12] *** aborazmeh joined
[00:47] *** markoong left
[00:58] *** leont joined
[01:01] *** wamba left
[01:15] *** wildtrees joined
[01:24] *** nt80 left
[01:24] *** wildtrees left
[01:26] *** Redfoxmoon joined
[01:33] *** upupbb-user2 left
[01:49] *** Altai-man_ joined
[01:52] *** sena_kun left
[02:09] *** molaf left
[02:15] *** sivoais left
[02:18] *** upupbb-user2 joined
[02:20] *** leont left
[02:22] *** molaf joined
[03:00] *** mowcat left
[03:45] *** reach_satori left
[03:50] *** sena_kun joined
[03:52] *** Altai-man_ left
[04:01] <uzl[m]> I've created the following section(?) (https://gist.github.com/uzluisf/7f575c702373565a18b6d74565b2db40) to complement the other section on the `handles` trait . I'm unsure if it meets the standard for the docs but if it does, I can submit a PR to include it. I was thinking it'd be a nice addition to the Objects page. 

[04:01] <uzl[m]> AFK

[04:16] *** reach_satori joined
[04:20] *** hungrydonkey left
[04:20] *** hungrydonkey joined
[04:29] *** upupbb-user2 left
[04:30] <[Coke]> .

[04:33] *** aborazmeh left
[04:51] *** Actualeyes left
[04:51] *** Actualeyes joined
[05:50] *** Altai-man_ joined
[05:52] *** sena_kun left
[06:45] *** Actualeyes left
[06:45] *** Actualeyes joined
[06:52] *** ufobat joined
[06:53] *** sauvin joined
[06:57] *** SCHAPiE left
[07:02] *** SCHAPiE joined
[07:41] *** rindolf joined
[07:47] *** gugod1 is now known as gugod

[07:49] *** upupbb-user2 joined
[07:51] *** sena_kun joined
[07:52] *** Altai-man_ left
[08:25] *** shadowpaste0 left
[08:38] *** patrickb joined
[08:46] *** shadowpaste joined
[08:52] *** pecastro left
[08:53] *** pecastro joined
[08:58] *** PavelB joined
[09:05] *** Redfoxmoon left
[09:05] *** Redfoxmoon joined
[09:19] *** ensamvarg left
[09:20] *** vike left
[09:24] *** vike joined
[09:39] *** upupbb-user2 left
[09:49] *** nightfrog left
[09:50] *** Altai-man_ joined
[09:53] *** sena_kun left
[09:55] *** nightfrog joined
[10:05] *** Black_Ribbon left
[10:06] *** ensamvarg joined
[10:08] *** reach_satori left
[10:08] *** kent\n left
[10:09] *** kent\n joined
[10:19] *** xelxebar_ joined
[10:19] *** xelxebar left
[10:24] *** Doc_Holliwood left
[10:24] *** reach_satori joined
[10:27] *** andrzejku joined
[10:39] *** leont joined
[10:41] *** upupbb-user2 joined
[10:46] *** tphilipp joined
[10:49] *** tphilipp left
[11:00] *** xelxebar_ left
[11:03] *** xelxebar joined
[11:08] *** PavelB left
[11:10] *** andrzejku left
[11:11] *** Nile joined
[11:12] *** Nile left
[11:15] *** wamba joined
[11:22] *** andrzejku joined
[11:23] *** markoong joined
[11:34] *** mowcat joined
[11:39] *** aborazmeh joined
[11:39] *** aborazmeh left
[11:39] *** aborazmeh joined
[11:51] *** sena_kun joined
[11:52] *** Altai-man_ left
[11:58] *** xelxebar left
[12:05] *** caterfxo left
[12:07] *** caterfxo joined
[12:16] *** hungryd8 joined
[12:16] *** hungrydonkey left
[12:17] *** markong joined
[12:17] *** markoong left
[12:22] *** hungryd8 left
[12:23] *** xelxebar joined
[12:32] *** andrzejku left
[12:47] *** hungrydonkey joined
[12:52] *** wamba left
[12:58] *** Doc_Holliwood joined
[12:59] *** andrzejku joined
[13:00] *** wamba joined
[13:03] *** aborazmeh left
[13:11] *** upupbb-user2 left
[13:14] *** lucasb joined
[13:17] *** regreg left
[13:21] <synthmeat> if FatRat is infectious, why does this break on line 6? https://gist.github.com/synthmeat/635fdda6ff7dd52fedbf7e9b3ce81dd6

[13:40] *** thundergnat joined
[13:41] <thundergnat> synthmeat: As it is, it breaks because $_ is undefined. 

[13:41] <tellable6> 2020-02-08T20:06:22Z #raku <Doc_Holliwould> thundergnat: Ty, that is a nice way. I did not know about this function.

[13:45] <synthmeat> thundergnat: ok, good catch, but even without it https://gist.github.com/synthmeat/635fdda6ff7dd52fedbf7e9b3ce81dd6

[13:46] <thundergnat> Yeah, there is something else going on there, I'm looking at it.

[13:50] *** Altai-man_ joined
[13:51] <synthmeat> it isn't infectious as exponent?

[13:52] <thundergnat> synthmeat: Ok, that is a little unintuitive but yeah, FatRat exponents aren't infectious

[13:52] *** sena_kun left
[13:53] <thundergnat> Change it to: $sum += FatRat.new(1 , 2 ** $n++); and it works how I would expect

[13:53] <synthmeat> yeah, that's what it says in the book. was just wondering why this wasn't working too. ty ^_^

[13:53] <thundergnat> At first glance, I was quite puzzled too. 

[13:55] <synthmeat> doesn't even work when both base and exponent are fat rats

[13:56] <thundergnat> Without going and digging around in the source, I suspect that exponentiation only has Num and Int candidates

[13:57] <synthmeat> yeah, "The exponentiation operator coerces both arguments to Numeric and calculates the left-hand-side raised to the power of the right-hand side."

[13:58] <thundergnat> If you want to operate on FatRats: https://github.com/SqrtNegInf/Rosettacode-Perl6-Smoke/blob/e53e1fb76ed16591ea4e79cc13eca53300b28df6/0/0-high-precision-routines#L50 Lines 50-90

[14:00] <synthmeat> nice. i'll give it a proper look once i'm up to speed with raku in general

[14:29] *** andrzejku left
[14:36] *** patrickb left
[14:51] *** Doc_Holliwood left
[14:56] *** Actualeyes left
[15:10] <synthmeat> (quite some fun all this raku so far!)

[15:18] *** Doc_Holliwood joined
[15:29] *** wamba left
[15:42] *** patrickb joined
[15:51] *** sena_kun joined
[15:52] *** Altai-man_ left
[15:55] *** aborazmeh joined
[15:55] *** aborazmeh left
[15:55] *** aborazmeh joined
[16:06] *** hungrydonkey left
[16:07] *** hungrydonkey joined
[16:07] *** hungrydonkey left
[16:08] *** hungrydonkey joined
[16:08] *** hungrydonkey left
[16:14] *** wamba joined
[16:21] *** TreyHarris joined
[16:23] *** Doc_Holliwood left
[16:27] *** aborazmeh left
[16:27] *** cpan-raku left
[16:27] *** cpan-raku joined
[16:27] *** cpan-raku left
[16:27] *** cpan-raku joined
[16:32] *** benlittle joined
[16:39] *** aborazmeh joined
[16:39] *** aborazmeh left
[16:39] *** aborazmeh joined
[16:42] *** caterfxo is now known as Guest11420

[16:42] *** Guest11420 left
[16:42] *** caterfxo joined
[16:43] *** lucasb left
[16:43] *** markong left
[16:44] *** markong joined
[16:56] *** upupbb-user2 joined
[17:00] <benlittle> p6: say "x" ~~ rx:r/ <-[-]>+ %% <.ws>+  (.*) /;

[17:00] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´(signal XCPU)¬ª

[17:00] <benlittle> Any idea why that regex hangs?

[17:01] <leont> Because <ws> can be zero width

[17:03] <benlittle> Is there a canonical way to alternate whitespace without running into zero width issues? The only way I know of is to redefine the <ws> token

[17:05] <leont> I think you want to use something other than <ws>

[17:05] <moritz> you don't need to quantify <.ws> with a +

[17:05] <moritz> it matches more than one blank anyway

[17:05] <moritz> m:  '   ' ~~ /<ws>/ and say $/.Str.chars

[17:05] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´3‚ê§¬ª

[17:05] <leont> You probably want to use <.space>+

[17:06] <leont> <.ws> is closer to <.space>*

[17:06] <moritz> or \s+

[17:07] <leont> Eh, yeah that's the more logical way to write that

[17:08] <benlittle> Right on üòÉ

[17:08] <leont> I remember being bitten exactly by this myself at some point, it's not entirely obvious

[17:14] *** Skarsnik joined
[17:15] <Skarsnik> Hello, what is the best way to compare data in a Buf inside test? when using just ok I get an error that it can't stringify one buf, but is-deeply fail when comparing Buf and Buf[uint8]

[17:15] <tellable6> 2019-07-09T11:54:10Z #perl6 <timotimo> skarsnik: did you see that gumbo has probably been fixed?

[17:16] <Skarsnik> July 2019, you are kinda late tellable6 !

[17:19] <Skarsnik>  /using just ok/using just is/

[17:21] <sena_kun> Skarsnik, can you golf it a bit?

[17:21] <sena_kun> m: use Test; say is Buf.new(42), Buf[uint8].new(42);

[17:21] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´ok 1 - ‚ê§True‚ê§¬ª

[17:22] *** margeas joined
[17:25] <Skarsnik> let see

[17:25] *** upupbb-user2 left
[17:26] *** markong left
[17:26] <Skarsnik> m: use Test; is Buf.new([0 xx 40]), Buf.new([1 xx 40]);

[17:26] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§Cannot use a Buf as a string, but you called the Stringy method on it‚ê§  in block  at /home/camelia/rakudo-m-inst-2/share/perl6/core/sources/2D4A7CA10695CD2B374573413D261A660E282E2A (Test) line 188‚ê§  in‚Ä¶¬ª

[17:27] <Skarsnik> that what I get when the test fail instead of expected: blabla, got: claclalca

[17:27] <sena_kun> oh, I see where I'm wrong

[17:27] <Geth> ¬¶ ecosystem: 35308e509d | thundergnat++ (committed using GitHub Web editor) | META.list

[17:27] <Geth> ¬¶ ecosystem: Add String::Splice to the ecosystem

[17:27] <Geth> ¬¶ ecosystem: 

[17:27] <Geth> ¬¶ ecosystem: See https://github.com/thundergnat/String-Splice

[17:27] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/35308e509d

[17:28] *** caterfxo left
[17:28] *** caterfxo joined
[17:28] <Skarsnik> m: use Test; is Buf.new([0 xx 40]), Buf.new([0 xx 40]);

[17:28] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[17:28] <sena_kun> Skarsnik, I'd convert it to Blob, to be honest

[17:28] <sena_kun> I think we have such tests in Cro

[17:28] <sena_kun> it isn't too pretty, of course

[17:29] <Skarsnik> feel like Test/rakudo bug x)

[17:29] <sena_kun> maybe Test should not attempt to use .Str, using .gist instead

[17:30] <Skarsnik> ? Str look fine, just why it fail when data are not the same

[17:30] <sena_kun> Skarsnik, no, I mean...

[17:31] <thundergnat> Skarsnik: Do you get the same failure if you do a is-deeply() rather than is()?

[17:31] <sena_kun> the thing is that when the comparing fails, it tries to show you expected/got message and apparently uses .Str method on Buf to stringify it, but Buf wants decode. Using .gist instead of .Str might be better, but I am not really pro.

[17:32] <sena_kun> Skarsnik, can you file a ticket, please?

[17:32] <Skarsnik> is-deeply fail correcly, just it's annoying because my test data are from a file and slurp give me a buf8 and my data are Buf

[17:32] *** domidumont joined
[17:32] <Skarsnik> so it fails because type are not the same ^^

[17:33] <thundergnat> is() is really geared toward string comparisons, so things that aren't strings can fail in weird ways

[17:34] <Skarsnik> m: say Buf.new(<1 2 3>).gist; say buf8.new(<1 2 3>);

[17:34] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´Buf:0x<01 02 03>‚ê§Buf[uint8]:0x<01 02 03>‚ê§¬ª

[17:34] <Skarsnik> sena_kun, it's in rakudo/rakudo issues to fill a ticket now?

[17:35] *** Doc_Holliwood joined
[17:35] <sena_kun> Skarsnik, yeah, https://github.com/rakudo/rakudo/issues

[17:35] <thundergnat> m: open( $*IN, :bin); say .slurp;

[17:35] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´No such method 'slurp' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:35] <rypervenche> I've got a list of hashes. I want to do a for loop and loop through and create a string from each hash and then have that string end in a newline. I'd like to have the output of that for loop essentially be a string with one string on each line, each line ending in a new line and be put in a variable. How might I accomplish that? I can do it using my $var = do for... but I can only manage to get it

[17:35] <rypervenche> to work using "say", but it doesn't go into the variable.

[17:36] <sena_kun> rypervenche, let's see...

[17:36] <rypervenche> I can show what I have, so it might make more sense.

[17:37] <sena_kun> m: my %a = a => 1, b => 2; my $str = %a.map({ "$_.key() is $_.value()" }).join("\n") ~ "\n"; say $str;

[17:37] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´a is 1‚ê§b is 2‚ê§‚ê§¬ª

[17:37] <sena_kun> rypervenche, something like this? 

[17:37] <Skarsnik> sub buf-is {is $buf1.Str, $buf2.Str, $msg}; could that work? x) the issue is probably to redirect the error of the is to the line of buf-is

[17:38] <rypervenche> Oh, I completely forgot about join.

[17:38] <sena_kun> Skarsnik, no, this won't work, Buf are not .Str. And that's the issue with `is` you have.

[17:38] * leont has been planning a feature to do that redirecting, but hasn't gotten around to that

[17:39] <rypervenche> I'm converting a really old db file, which is '| ' delimited to a \0-delimited one: https://gist.github.com/rypervenche/0834f77d7d9075aa2c6045d2b38f0744

[17:39] <rypervenche> I think join will do exactly what I need. I completely forgot about that.

[17:39] <sena_kun> m: say Buf.new(1,2,3).Str;

[17:39] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´Cannot use a Buf as a string, but you called the Str method on it‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:39] <Skarsnik> duh

[17:40] <sena_kun> m: use Test; ok Buf.new(1) eq Buf[uint8].new(1); ok Buf.new(0) eq Buf[uint8].new(1);

[17:40] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´ok 1 - ‚ê§not ok 2 - ‚ê§# Failed test at <tmp> line 1‚ê§¬ª

[17:41] <sena_kun> if you don't really care about what's the difference, you can do ^, otherwise a ticket (though even if there will be a fix, it means it'll have to go into a release and then be fresh enough and)

[17:41] <Skarsnik> oh right, it compare with eq then fail to .Str to show what is wrong

[17:41] <sena_kun> yesh

[17:44] <Skarsnik> Not sure how to formulate the issue xD

[17:45] <sena_kun> Skarsnik, "Buf comparing dies when using `is` Test subroutine"

[17:46] <sena_kun> Skarsnik, and then provide a sample of what's happening (you know, this "It compares ok, but dies in attempt to do .Str to provide failure message") and "It shouldn't die, instead should just mark this compare is nok".

[17:48] <Skarsnik> Everytime I touch Raku I found some bugs/annoying behavior x

[17:49] <Skarsnik> another bugs to report: the issue template should maybe be updated for raku xD it says * Compiler version (`perl6 -v`): 

[17:49] *** Altai-man_ joined
[17:50] <benlittle> p6:grammar Test {    token TOP { <x>+ % \h+ [\N*] \n }    proto token x {*}    token x:sym<A> { \S+ [\h \S+]* }    token x:sym<B> {        "[" <special-token> "]" <.ws> <important-message>    }    token special-token { "SPECIAL TOKEN" }    token important-message { \S+ }}my $dat = q:to/EOF/;59.5   Some Term   [SPECIAL TOKEN] Important!!  Yet

[17:50] <benlittle> another termEOFsay Test.parse($dat);

[17:50] <evalable6> benlittle, rakudo-moar 9f4a0f1ca: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[17:50] <evalable6> benlittle, Full output: https://gist.github.com/f1824bcc7894f9b9737e2d56be2854b0

[17:51] *** markoong joined
[17:52] <rypervenche> Nice. .join fixed my issue and I was able to do it all in my grammar's actions. :)

[17:52] *** sena_kun left
[17:54] *** aluaces left
[17:55] *** margeas left
[17:57] <Skarsnik> m: 'class A { method get-tab returns Array[A] {my A @t; @t.append(A.new); return @t} }; multi sub infix:<(elem)>(Str $stuff, A @d) { say "my infix" }; my $a = A.new; my @tab = $a.get-tab; say "foo" (elem) @tab;'

[17:57] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant string "class A { method get-tab returns Array[A] {my A @t; @t.append(A.new); return @t} }; multi sub infix:<(elem)>(Str $stuff, A @d) { say \"my infix\" }; my $a = A.new; my @tab = $a.get-tab; say \"foo\"‚Ä¶¬ª

[17:57] <Skarsnik> m: class A { method get-tab returns Array[A] {my A @t; @t.append(A.new); return @t} }; multi sub infix:<(elem)>(Str $stuff, A @d) { say "my infix" }; my $a = A.new; my @tab = $a.get-tab; say "foo" (elem) @tab;

[17:57] <camelia> rakudo-moar 8c995febd: OUTPUT: ¬´False‚ê§¬ª

[17:58] <Skarsnik> it's annoying to have to write my A @tab to have the right infix called. I know the compiler does not check method type to solve type

[18:01] <moritz> that's the downside of using nominal types over structural types

[18:03] <Skarsnik> maybe there should be a pragma to force the compiler to check method type and such, I am pretty sure 99% of code written by people does not compose much/change a class at run time x)

[18:12] *** markong joined
[18:14] *** aborazmeh left
[18:15] <Skarsnik> 1..10 good enought for today x)

[18:15] *** markoong left
[18:16] *** rindolf left
[18:28] *** margeas joined
[18:28] *** markong left
[18:45] <Doc_Holliwood> Any of you guys do work in Swift?

[18:51] *** ufobat_ joined
[18:53] *** aborazmeh joined
[18:53] *** aborazmeh left
[18:53] *** aborazmeh joined
[18:53] *** cpan-raku left
[18:53] *** cpan-raku joined
[18:53] *** cpan-raku left
[18:53] *** cpan-raku joined
[18:54] *** wamba left
[18:55] *** ufobat left
[18:58] *** domidumont left
[19:12] *** wildtrees joined
[19:12] *** aborazmeh left
[19:50] *** sena_kun joined
[19:52] *** oneeggeach joined
[19:52] *** Altai-man_ left
[20:16] *** mowcat left
[20:18] *** rindolf joined
[20:19] *** sno left
[20:21] *** sno joined
[20:29] *** oneeggeach left
[20:30] *** sivoais joined
[20:31] *** oneeggeach joined
[20:36] *** mowcat joined
[20:48] <rypervenche> How might I supply a string to a command's STDIN using "run"? I've tried following the docs on run, but I haven't been able to find the right combination of things.

[20:48] <rypervenche> I'd like to do something like this: run ¬´gpg -c -o "$new-encrypted-db"¬ª, :in($passwords); where $new-encrypted-db is the output file and $passwords is a string.

[20:48] *** aborazmeh joined
[20:48] *** aborazmeh left
[20:48] *** aborazmeh joined
[20:49] *** Doc_Holliwood left
[20:58] *** Doc_Holliwood joined
[21:00] <leont> If you specify :in, then the proc object will have an $proc.in member that you can write to

[21:04] *** oneeggea_ joined
[21:08] *** oneeggeach left
[21:14] *** xelxebar left
[21:15] *** xelxebar_ joined
[21:15] *** aborazmeh left
[21:23] <rypervenche> leont: Ahh, thank you. I understand it better now. I had to assign the Proc object(?) to a variable and then do $p.in.say: $passwords; and then $p.in.close; That did the trick :)

[21:27] *** Skarsnik left
[21:33] *** oneeggea_ left
[21:35] *** rindolf left
[21:50] *** Altai-man_ joined
[21:52] *** sena_kun left
[22:19] *** TeamBlast joined
[22:21] *** xinming_ left
[22:23] *** xinming_ joined
[22:48] *** markoong joined
[22:48] *** margeas left
[22:59] *** markong joined
[23:03] *** markoong left
[23:08] *** xelxebar_ left
[23:09] *** xelxebar joined
[23:19] *** dustinm` left
[23:31] *** dustinm` joined
[23:37] *** dustinm` left
[23:45] *** patrickb left
[23:50] *** sena_kun joined
[23:52] *** Altai-man_ left
[23:52] *** ufobat_ left
[23:56] *** dustinm` joined
[23:58] *** Doc_Holliwood left
