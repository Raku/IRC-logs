[00:10] *** ctilmes joined
[00:12] *** hacktor left
[00:13] *** aborazmeh joined
[00:13] *** aborazmeh left
[00:13] *** aborazmeh joined
[00:16] *** Altai-man_ joined
[00:18] *** mowcat left
[00:18] *** sena_kun left
[00:26] *** hacktor joined
[00:40] *** ctilmes left
[00:47] *** Manifest0 left
[00:51] *** Manifest0 joined
[00:59] *** hacktor left
[00:59] *** hacktor joined
[01:03] *** ctilmes joined
[01:28] *** ctilmes left
[01:29] *** ctilmes joined
[01:30] *** mowcat joined
[01:35] *** melezhik left
[01:43] *** molaf left
[01:56] *** molaf joined
[02:05] *** pilne left
[02:05] *** brtastic joined
[02:11] *** mahafyi left
[02:11] *** aborazmeh left
[02:16] *** sena_kun joined
[02:17] *** jmaslak joined
[02:18] *** Altai-man_ left
[02:19] <jmaslak> I'm having the executable from perl6/rakudo 2020.05 crash (with a complex, high memory utilization, multi-threaded program).  Is there a guide to providing information needed to report a useful bug on this, since I don't have an easy-to-reproduce-for-someone-else case?

[02:20] <jmaslak> I do have a core dump so I got that far.

[02:27] *** ctilmes left
[02:33] <timotimo> without knowing anything more, a "bt" of every thread seems promising, and if possible calling MVM_dump_backtrace(tc) on every thread where you can find a tc with a not-optimized-out value

[02:33] *** ctilmes joined
[02:34] <timotimo> you're probably running the whole thing with JIT, which will give some very strange stack traces, but that's known and harmless, if annoying

[02:35] <jmaslak> bt - https://gist.github.com/jmaslak/197339bf06d2e1503e4e3d5b1d326720

[02:36] <timotimo> ah, double free or corruption, that's not fun

[02:36] <jmaslak> I'm not sure how to do the MVM_dump_backtrace(tc) or how to find a tc with a not-optimized-out value.

[02:36] <timotimo> it's possible to cause memory corruption by growing arrays or hashes from multiple threads at the same time, or from one thread while another writes to it without growing it

[02:36] <timotimo> oh, your moar is without debug symbols

[02:37] *** mowcat left
[02:37] <timotimo> that makes things a lot more tricky i'm afraid

[02:37] <jmaslak> Doh!  I'm using rakubrew - I'm glad to rebuild with symbols if you point me in the right direction for options.

[02:38] *** jmaslak8 joined
[02:39] *** Cabanossi left
[02:40] <timotimo> OK, you can try --configure-opts=--moar-option=--optimize=0 --configure-opts=--moar-option=--debug=3

[02:40] <timotimo> not sure if that'll reach the right target

[02:40] <timotimo> build / build-rakudo take that argument

[02:41] <timotimo> optimize=0 will of course make your everything slower, but it's a lot easier to debug

[02:41] *** jmaslak left
[02:41] <jmaslak8> Will try - I'm fine with slower to help figure out what is doing it.  I wouldn't be surprised if I'm extending an array / list in multiple places (I definitely won't say it's not *my* bug)

[02:42] <timotimo> there's a "single-user mode" thingie in moar that can explode in your face when you do that, let me have a look how it's activated

[02:43] <timotimo> oh, hm, can't be activated using a configure option, only by changing a #define in src/6model/reprs/VMArray.h

[02:44] <timotimo> i should petition to make including debug symbols in moar builds the default 

[02:45] <timotimo> or perhaps including "split debug symbols" mode, where the debug symbols land in a different file, but i've never tried to do that

[02:46] <timotimo> how much experience do you have with gdb?

[02:47] *** jmaslak8 is now known as jmaslak

[02:48] <jmaslak> I have used it before, but not on complex multi-threaded apps, and it's been a long time since I've done anything beyond bt.

[02:48] <timotimo> OK i'll just spell it out in detail, because it's time i go to bed soon

[02:49] <timotimo> for a quick "bt of all threads" you can issue "thread apply all bt", but for the MVM_dump_backtrace bit you may have to actually switch to each thread in turn

[02:49] <timotimo> for that you'll "info threads" to get the list, "thread 5" to switch to a thread, and then "up" until the frame has a readable "tc=0xblah" in the function call printout

[02:49] <timotimo> then you can "call MVM_dump_backtrace(tc)" from there

[02:50] <jmaslak> ok, I can give that a try.

[02:50] <timotimo> there are limitations to what you can do with "call" when doing a post-mortem aka with a core dump

[02:50] <timotimo> so perhaps you'll have more luck running your program with raku-gdb-m / perl6-gdb-m

[02:51] *** Cabanossi joined
[02:51] <timotimo> if you really don't mind spending a lot of time waiting, like if you can reproduce the bug over night without interaction, throwing valgrind at it can be helpful

[02:51] <timotimo> oh, how could i forget asan, maybe that would be the smarter first step actually

[02:52] <jmaslak> asan?

[02:52] <timotimo> --configure-opts=--moar-option=--asan which requires a library to be installed, too

[02:53] <timotimo> yeah, it's a memory checker like valgrind, but it requires you to build the program to include it

[02:53] <timotimo> but it's a lot faster

[02:53] <timotimo> valgrind can be truly glacial

[02:54] <timotimo> i think it'd be best to combine --asan with the optimize=0 and debug=3 options and then running your program in the gdb version of raku/perl6

[02:58] <jmaslak> Okay, let me see what I can do.

[03:16] *** farcas1982regreg joined
[03:17] *** mayuresh joined
[03:17] <mayuresh> hello. :)

[03:17] <mayuresh> o great ones, welcome me, the latest convert to #raku.

[03:17] <mayuresh> yeah, i spent some time hating #raku.

[03:18] <mayuresh> but on reading up some more, i see potential in it.

[03:18] <mayuresh> so yeah, i am here, and i am gonna stay. :)

[03:20] <mayuresh> i read an article via twitter which described 'oo'.

[03:20] <mayuresh> that was the turning point.

[03:20] <mayuresh> also, correct me if i'm wrong, but the regex are normal.

[03:21] <mayuresh> unlike in "perl 5", where there are 'pcre'.

[03:24] <mayuresh> no response! hmnn, looks like i've still not been forgiven.

[03:24] <mayuresh> no worries, i'll still stick with "raku", i like it.

[03:24] <mayuresh> even the 'ide' called "comma" is impressive.

[03:25] <mayuresh> though i am more used to "vim".

[03:25] <mayuresh> i wonder where i could get the syntax files for "vim".

[03:25] <mayuresh> would anyone here know?

[03:26] <mayuresh> still no response!

[03:26] <mayuresh> okay, now i gotta go take bath. it's early morning.

[03:26] <mayuresh> bye for now.

[03:26] <mayuresh> be right back.

[03:26] *** mayuresh left
[03:27] *** MilkmanDan left
[03:29] *** MilkmanDan joined
[03:30] *** farcas1982regreg left
[03:32] *** farcas1982regreg joined
[03:42] *** ctilmes left
[03:49] *** mayuresh joined
[03:49] <mayuresh> alrighty, i'm back.

[03:49] <mayuresh> hello. :)

[03:53] <mayuresh> how come no one is active?

[03:53] <mayuresh> or am i being ignored?

[03:56] <mayuresh> i think everyone is just inactive.

[03:56] <mayuresh> people out here don't seem to be vindictive.

[03:56] <mayuresh> hence i can't assume that i'm being ignored.

[03:56] <mayuresh> alrighty, see you everybody after 12~14 hours.

[03:56] <mayuresh> bye.

[03:56] *** mayuresh left
[04:07] *** hungrydonkey joined
[04:15] *** hungrydonkey left
[04:16] *** Altai-man_ joined
[04:18] *** sena_kun left
[04:19] *** KotH left
[04:19] *** KotH joined
[04:22] *** hungrydonkey joined
[04:23] *** jmaslak left
[04:32] *** hungrydonkey left
[04:38] *** hungrydonkey joined
[04:46] *** aborazmeh joined
[04:46] *** aborazmeh left
[04:46] *** aborazmeh joined
[04:54] *** hungrydonkey left
[04:58] *** Cabanossi left
[05:05] *** Cabanossi joined
[05:32] *** sauvin joined
[05:56] *** sjm_uk joined
[06:16] *** sena_kun joined
[06:18] *** Altai-man_ left
[06:34] *** Doc_Holliwood left
[06:43] *** andrzejku joined
[06:46] <Geth> ¦ doc: f78e05ac1f | (Stoned Elipot)++ | xt/routine-definitions.t

[06:46] <Geth> ¦ doc: Add test for routine header vs routune definitions

[06:46] <Geth> ¦ doc: 

[06:46] <Geth> ¦ doc: ref #3350

[06:46] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f78e05ac1f

[06:46] <Geth> ¦ doc: f8064dd42a | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | xt/routine-definitions.t

[06:46] <Geth> ¦ doc: Merge pull request #3380 from Raku/test-for-3350

[06:46] <Geth> ¦ doc: 

[06:46] <linkable6> DOC#3350 [open]: https://github.com/Raku/doc/issues/3350 [bug][xt] Header/definition discrepancy

[06:46] <Geth> ¦ doc: Add test for routine header vs routine definitions

[06:46] <Geth> ¦ doc: This is awesome. I'll leave the referred issue open to add what needs to be corrected there as a checklist. Thanks!

[06:46] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f8064dd42a

[06:51] *** dhaval joined
[06:52] <dhaval> where can I find best benchmark comparison between p5 and p6?

[07:03] *** aborazmeh left
[07:18] <MasterDuke> dhaval: best how? there currently aren't any really comprehensive ones. [Tux] does daily runs of his Text::CSV benchmark, perl6/raku results here http://tux.nl/Talks/CSV6/speed4.html

[07:19] *** dhaval left
[07:19] <MasterDuke> i'm not sure if the perl5 numbers are on the website, but they're posted in #raku-dev daily

[07:29] <nine> mayuresh: it's quite common for the channel to be quiet when Europe is asleep

[07:29] <tellable6> nine, I'll pass your message to mayuresh

[07:31] <MasterDuke> and friday evening is kind of a slower time in general

[07:36] *** vike left
[07:40] *** andrzejku left
[08:14] *** xinming joined
[08:16] *** Altai-man_ joined
[08:17] *** xinming_ left
[08:18] *** sena_kun left
[08:20] *** gnufr33dom left
[08:21] *** kensanata joined
[08:34] *** dhaval joined
[08:41] *** konvertex joined
[08:53] *** dhaval left
[08:54] *** kensanata left
[09:00] *** vike joined
[09:03] *** dhaval joined
[09:23] *** sjm_uk left
[09:26] *** dhaval left
[09:43] *** stoned75 joined
[09:45] <AlexDaniel> MasterDuke: yeah I wish…

[09:48] *** stoned75 left
[09:54] *** rindolf joined
[09:54] <lizmat> weekly: https://colincrain.wordpress.com/2020/05/08/sorting-a-linked-list-and-summing-binary-bits/

[09:54] <notable6> lizmat, Noted! (weekly)

[09:54] <lizmat> weekly: https://perlweeklychallenge.org/blog/meet-the-champion-2020-04/

[09:54] <notable6> lizmat, Noted! (weekly)

[10:06] *** sjm_uk joined
[10:13] *** stoned75 joined
[10:15] *** chloekek joined
[10:15] *** poohman_1 joined
[10:16] *** sena_kun joined
[10:18] *** Altai-man_ left
[10:18] <poohman_1> Hello all, I use trying out the pdf modules by dwarring and came across a type called dict

[10:19] <poohman_1> is dict a built in type in Raku or is it only specific to the PDF modules

[10:22] *** hungrydonkey joined
[10:32] <lizmat> dict is not a built-in type

[10:35] *** mowcat joined
[10:38] <hungrydonkey> Hello, everyone. I just started to learn how to write socket program with raku. I want to know if there is any way to get information about peer socket except for peer-host and peer-port in IO::Socket::Async.

[10:42] <AlexDaniel> hungrydonkey: welcome! Information like what?

[10:44] <hungrydonkey> like IP address and port

[10:46] <hungrydonkey> As I know, class IO:: socket:: INET does not provide similar functions.

[10:47] *** brtastic left
[10:54] <AlexDaniel> hungrydonkey: oh, you're using INET but want the info that Async provides

[10:56] <hungrydonkey> Yeah, you're right!

[10:56] <AlexDaniel> .seen Kaiepi

[10:56] <tellable6> AlexDaniel, I saw Kaiepi 2020-05-04T22:34:07Z in #raku-dev: <Kaiepi> lizmat, is https://github.com/rakudo/rakudo/pull/3589 good to go now with the release made?

[11:00] <AlexDaniel> hungrydonkey: hmm I'm not sure… but any reason not to use the Async version?

[11:04] *** rindolf left
[11:06] *** rindolf joined
[11:11] <hungrydonkey> Because I don't know much about raku's concurrency mechanism. I will continue to study raku, and I enjoy programming with raku. Anyway, thank you AlexDaniel, thank you community.

[11:12] *** Noisytoot joined
[11:16] *** poohman_1 left
[11:17] *** Doc_Holliwood joined
[11:19] *** molaf left
[11:23] *** poohman_1 joined
[11:28] <timotimo> hungrydonkey: with a "react" block you don't have to introduce concurrency at the code level; your react block will only have code run in it from one thread at any time

[11:30] *** hungrydonkey left
[11:37] *** chloekek left
[11:38] *** caterfxo left
[11:39] *** MasterDuke left
[11:40] *** poohman_1 left
[11:41] *** k-man left
[11:44] *** k-man joined
[11:53] *** Noisytoot left
[11:53] *** poohman_1 joined
[12:03] *** MasterDuke joined
[12:04] *** brtastic joined
[12:13] *** Noisytoot joined
[12:16] *** Altai-man_ joined
[12:16] *** ctilmes joined
[12:17] *** hungrydonkey joined
[12:18] *** sena_kun left
[12:19] *** Noisytoot left
[12:37] *** caterfxo joined
[12:51] *** sjm_uk left
[12:59] *** ctilmes left
[13:05] *** poohman_1 left
[13:19] *** poohman_1 joined
[13:19] *** sjm_uk joined
[13:24] *** pecastro joined
[13:29] *** chloekek joined
[13:39] *** poohman_1 left
[13:40] *** Itaipu left
[13:41] *** andreoss joined
[13:53] *** hungrydonkey left
[14:05] *** jmaslak joined
[14:06] *** Itaipu joined
[14:07] <jmaslak> With leak detection off, but using libasn, this is what I'm seeing on 2020.05 - https://gist.github.com/jmaslak/544665019eba87c95a2482e21a79bfde

[14:08] *** poohman_1 joined
[14:09] *** brtastic left
[14:09] *** orinthe left
[14:11] *** grumble left
[14:16] *** grumble joined
[14:16] *** sena_kun joined
[14:18] *** Altai-man_ left
[14:23] <lizmat> jmaslak: o/

[14:23] <lizmat> you should probably throw that gist on #moarvm

[14:24] <lizmat> along with the code that generated that gist ?

[14:27] *** Itaipu left
[14:28] *** ctilmes joined
[14:29] <timotimo> oh dang, yeah, i should ahve pointed out to turn leak detection off

[14:29] *** Itaipu joined
[14:29] <timotimo> i wonder if moar can call anything inside libasan to do that automatically

[14:30] *** aborazmeh joined
[14:30] *** aborazmeh left
[14:30] *** aborazmeh joined
[14:31] <timotimo> jmaslak: did it crash right after that message?

[14:31] <jmaslak> Yes

[14:32] <timotimo> OK, so the hash being visited by the GC there was bigger when the loop was going through the entries than it was when it checked the size beforehand

[14:32] <timotimo> moar isn't supposed to run GC while any code that modifies things runs, though

[14:33] <jmaslak> This is multithreaded (lots of start {} blocks).

[14:33] <timotimo> yeah, but the GC is stop-the-world

[14:34] <timotimo> so it should have no threads run user code, only do GC things

[14:34] <timotimo> could also be a bug in the element counting function of our hash impl

[14:34] <lizmat> jmaslak: oops, sorry I missed the backlog

[14:35] <jmaslak> I don't think it always crashed - I'm glad to try running it on older versions if that is helpful.  (Code FWIW is Net::BGP's bgpmon.p6 script while receiving a full BGP table)

[14:38] <timotimo> do you feel comfortable applying a moarvm patch and rebuilding only moar?

[14:38] <timotimo> a "make install" inside moar's source folder should be enough

[14:39] <timotimo> i put it as a comment to your gist

[14:39] <timotimo> running that without asan would give us a hint if this occurs often, and you could also breakpoint it to see what the other threads are up to at that moment

[14:40] <jmaslak> I can learn.  :)   I've built this outside of rakubrew so it should be straight forward.

[14:40] <timotimo> ah, good

[14:44] <jmaslak> Definitely getting output along the lines of "in MVMHash_gc_mark: expected HASH_CNT to match count fo HASH_ITER_FAST invocations, but had -8 at the end

[14:44] *** sjm_uk left
[14:44] <jmaslak> The -8 varies.  Seems to be getting bigger (started at -1) as execution continues

[14:44] <jmaslak> s/bigger/more negative/

[14:45] <timotimo> OK that's a big wtf from me

[14:46] <timotimo> i hope it's concurrent modification or reading data while it hasn't reached the other core yet or something like that

[14:46] <jmaslak> I definitely wouldn't promise I'm not accidentally modifying a data structure across multiple threads.

[14:46] <timotimo> would be good to know if this can happen, though. it shouldn't :) :)

[14:46] *** gnufr33dom joined
[14:47] <jmaslak> I'm good at triggering the impossible.  ;)

[14:47] <timotimo> thumbs up for that

[14:48] <jmaslak> I'm going to try to see where in my code this is coming from too.

[14:48] <timotimo> so "break MVMhash.c:64" would get us in the right spot to check

[14:49] <jmaslak> ok

[14:52] <timotimo> it would be very frightening if this output also triggered in non-multithreaded programs

[14:52] <timotimo> but i think we've got people run valgrind against moar regularly and this never exploded before

[14:53] <timotimo> anyway, until now i had assumed that changing hashes so that its actual allocation size changes was the only way to make it explode

[14:53] <jmaslak> I added a comment to the gist of the bt from the breakpoint.

[14:54] <timotimo> but with this it looks like it can also cause trouble from just adding individual items to a relatively empty hash

[14:55] <Manifest0> I'm getting a sigsegv on raku's repl. I'm doing: "for ^720 {say ($_/34560*100)}" and then "720/48". 

[14:55] <Manifest0> On Rakudo version 2020.05-48-gde173a18c built on MoarVM version 2020.05-4-gc4917b192

[14:55] <timotimo> OK, we'll want backtraces from the other threads as well

[14:56] <timotimo> though with the jit active, they'll all look odd after some point

[14:56] <jmaslak> This is happening inside an array->hyper().map().grep().  The map() does a lot.

[14:56] <timotimo> unless you're writing to a hash declared outside that, that ought to be fine

[14:57] <timotimo> env MVM_JIT_DISABLE=1 will keep stack traces "normal"

[14:57] <timotimo> Manifest0: very interesting, could i ask you to run it with "raku-gdb-m" if you have a gdb installed?

[14:57] <Manifest0> timotimo: sure

[14:59] <Manifest0> timotimo: you'll have to guide me through... :-(

[14:59] <timotimo> no problem

[14:59] <timotimo> it should work the same until it segfaults

[14:59] <Manifest0> Thread 1 "rakudo-m" received signal SIGSEGV, Segmentation fault.

[14:59] <Manifest0> 0x00007ffff79b6939 in MVM_spesh_frame_walker_move_outer () from /usr/lib/libmoar.so

[14:59] <jmaslak> For my problem, I do see a potential concurrency/hash issue inside the map().  Let me see if I can narrow it down.  I'll report back.

[15:00] <timotimo> OK, next thing you can do is "bt" for a C-level backtrace, and for a raku-level backtrace we would need a moar with debug symbols, otherwise we'll have a hard time finding the TC object we need to call it with

[15:02] <Manifest0> timotimo: https://paste.opensuse.org/58982474

[15:04] <timotimo> OK, can you re-run it with the environment variable MVM_JIT_DISABLE=1 set?

[15:05] <Manifest0> no success

[15:06] <jmaslak> On my issue, I do think that's it hitting.  I'll throw some locks around the shared accesses to the hash to be safe, but I think this is it.  I added my problematic code (running in a hyper()) to the gist.  There shouldn't be any withdrawals or changes to hash elements, just additions of new ones, up to the point of crash.

[15:06] <timotimo> it should at least give a better output to "bt"

[15:06] <jmaslak> s/that's it hitting/that it is modifying a hash in multiple threads/

[15:06] <Manifest0> oh. i ran the simple raku :-). Gimme a sec

[15:09] <Manifest0> same output: https://paste.opensuse.org/78704749

[15:10] <timotimo> huh, that's a bit odd

[15:10] <timotimo> what you pasted when you came in, was that the entirety of the code you're running?

[15:10] <Manifest0> yes

[15:10] <timotimo> oh wow

[15:10] <timotimo> that's incredible

[15:11] <timotimo> it reproduces just fine here, so i can probably more easily debug it here than telling you everything to do

[15:11] <Manifest0> just two lines. If i ran the lines in the same line with a ; separating them, it will go through

[15:11] <Manifest0> Nice :-D

[15:11] <Manifest0> It's very easy to reproduce

[15:12] <timotimo> you've literally managed to crash the compiler

[15:13] <Manifest0> Don't know if i shoud be happy or not XD

[15:14] <Manifest0> i tried a bit with other numbers but without success

[15:14] <Manifest0> should i open a git issue?

[15:15] <timotimo> yes, i'll put a full backtrace there, too

[15:16] <Manifest0> ok

[15:22] <Manifest0> https://github.com/rakudo/rakudo/issues/3678

[15:24] <jmaslak> FYI, the checkin that fixed my issue in my code (it also let me control degree of parallelization for debugging, so ignore those changes): https://github.com/jmaslak/Raku-Net-BGP/commit/817f6fec9538606412fd2181cd75ea6ef3f88251 

[15:25] <jmaslak> I'll have to re-work how not to have a bottleneck lock like that, but at least it runs without crashing now. I can deal with the performance later.

[15:26] <poohman_1> Hello all,

[15:26] <timotimo> i assume all the threads need up-to-date data from the hash that other threads may have changed recently?

[15:26] <poohman_1> Is there any way I can have a look at the history of the IRC Raku channel

[15:27] <poohman_1> I had asked a question a month back and got an answer

[15:27] <poohman_1> I have forgotten a bit about it

[15:27] <timotimo> https://colabti.org/irclogger/irclogger_log/raku has the logs

[15:27] <poohman_1> thanks

[15:28] <poohman_1> wow thanks

[15:29] <jmaslak> timotimo - I don't think there is a lot of reading of recently written data at the point of crash (I'd be surprised if there is *any* - that would occur after the initial BGP sync, not during it).  So lots of new hash elements added by multiple threads, growing fairly quickly.  Lots of hash lookups that return not found as well.

[15:31] <timotimo> in that case you can copy the hash for every thread and accumulate changes in a per-thread hash, then merge it all into one hash afterwards

[15:31] <lizmat> or produce a stream of Pairs and combine that in a hash afterwards

[15:32] <timotimo> right

[15:32] <timotimo> can send all pairs on a channel and have an extra thread put together the result while the other workers are working

[15:32] <timotimo> (including sending the original hash either as a hash or as pairs)

[15:33] *** k-man left
[15:33] <jmaslak> Ya, I'll have to do some thinking.  I have some thoughts of what I can do here, the old code also has another concurrency bug if there is a lot of quickly occurring updates to paths (that would happen after the initial BGP).

[15:33] <jmaslak> Concurrency is hard.  ;)

[15:35] <timotimo> true

[15:35] <timotimo> good thing raku offers so many ways to handle it

[15:35] *** k-man joined
[15:36] <jmaslak> Yes - I love having all the paradigms built-in - message passing, locking, async, threads, etc.

[15:41] *** jmaslak left
[15:43] *** jjmerelo joined
[15:44] *** sjm_uk joined
[15:47] *** aborazmeh left
[15:50] *** ctilmes left
[16:06] *** jjmerelo left
[16:10] *** brtastic joined
[16:14] <guifa> How does one manually create a multi method for composition?

[16:14] <guifa> doing .^add_method doesn't work 

[16:14] <guifa> and anons can't be multi

[16:14] <timotimo> i believe you'd have to .^add_multi_method

[16:14] <guifa> oh

[16:15] * guifa puts on dunce cap

[16:15] <guifa> didn't even realize that was a method :-)

[16:15] <timotimo> check Perl6::Metamodel::MultiMethodContainer

[16:15] <guifa> timotimo++

[16:15] <timotimo> those will be renamed to Raku:: eventually i'm sure

[16:16] *** Altai-man_ joined
[16:16] <guifa> I'm trying to get my Binex stuff as close to the regex grammar as possible

[16:16] *** aborazmeh joined
[16:16] *** aborazmeh left
[16:16] *** aborazmeh joined
[16:16] *** poohman_1 left
[16:17] *** poohman_1 joined
[16:17] <guifa> I'm trying to get my Binex stuff as close to the regex grammar as possible but I can't seem to add new tokens to regex and method defs 

[16:19] *** sena_kun left
[16:20] *** aborazmeh left
[16:24] *** aborazmeh joined
[16:24] *** aborazmeh left
[16:24] *** aborazmeh joined
[16:26] <guifa> I think I can get much closer and usable by creating an anonymosu subclass and adding in the binex methods via manually composition

[16:26] <guifa> requiring a .new isn't the worst

[16:29] *** eiro joined
[16:29] <eiro> hello people.

[16:31] *** sour joined
[16:31] <sour> hello, does anyone know where I can read about raku benchmarking (general performance benchmarking) to get an idea about how well it performs, if such information exists?

[16:35] <AlexDaniel> sour: we used to have this: https://github.com/japhb/perl6-bench

[16:35] <AlexDaniel> sour: but a lot of things have changed since the last time somebody used it, I think

[16:35] <AlexDaniel> eiro: o/

[16:36] <sour> 6 jun 2018 last commit, it may not be up to date, yeah

[16:37] <timotimo> those were also mostly microbenchmarks, some of which are now hitting very well optimized paths of moarvm's specializer, and so are better than average

[16:38] <AlexDaniel> I'm actually interested in seeing more benchmarking

[16:38] <AlexDaniel> pretty sure it can uncover some fixable issues

[16:40] <MasterDuke> agreed

[16:40] *** ctilmes joined
[16:50] *** oneeggeach joined
[16:50] *** oneeggeach left
[17:01] *** dd070 joined
[17:02] *** ctilmes left
[17:03] *** poohman_1 left
[17:03] *** poohman_1 joined
[17:24] <tigerpaws> Hi. After my presentation this week, (which was a disaster, too much material and detail) I got two interesting questions I had no answer for: can we make a binary executable (jvm, I suppose), and what is the business case for raku? 

[17:25] <tigerpaws> I know ther's no good answer for the second, but maybe someone has some ideas anyway? 

[17:25] <AlexDaniel> tigerpaws: binary executables I think should be possible eventually, people were working on it recently

[17:25] <AlexDaniel> tigerpaws: on moar that is

[17:26] <moritz> tigerpaws: what exactly do you mean by "the business case for raku"?

[17:28] <tigerpaws> I don't really know, and I suspect the guy asking it doesn't either. In fact, I don't remember anyone ever mentioning a business case for ruby or python either. 

[17:29] <tigerpaws> AlexDaniel: So we'd package Moar with the code, or the code would be integrated into moar? 

[17:29] <moritz> there are some possible questions that might fit, like "why would a business develop their software in raku?" or "why would a company sopport into the develping raku as a language?"

[17:30] <Altai-man_> Killer features include concurrency, parsing, very advanced OOP, whip-it-up-ability, custom everything...

[17:31] <moritz> or summarized, developer productivity

[17:31] <tigerpaws> moritz: You're right, those two questions might actually work. I know the person that asked that, and he wasn't at the level in the company (my former company) to ask either of those questions, so I suppose it was more rhetorical. 

[17:32] <moritz> good for small things, but with types and all also good for scaling up code bases

[17:33] <tigerpaws> I like those features. I wasn't originally thinking of evangelizing, but I might go that way. It would be an uphill battle, though. 

[17:34] <tigerpaws> I was wondering if there were some things we could steal from python, like numpy or pandas, by linking directly to the C library (I think they are in C)

[17:35] <moritz> there's also Inline::Python (and a branch to port it to Python 3 is in progress)

[17:36] <Altai-man_> I am not sure if anyone "must" evangelize Raku. If you find it fun, just join the bandwagon, do things you find nice and little by little...

[17:36] <AlexDaniel> tigerpaws: I guess they were just wondering if somebody is using Raku in production (yes) and if so what for exactly

[17:37] <sour> raku may be a language fit for the next hundred years, but people shouldn't wait 100 years to realize 'oh boy, this would've been good all along'

[17:37] <AlexDaniel> lizmat: maybe I should make a blog post indeed…

[17:38] <konvertex> Uphill battle for sure. Even more so when crystal (about to hit 1.0) and nim offer similar dev productivity, but also come with neck-breacking perf improvements over ruby and python, respectively.

[17:39] <tigerpaws> AlexDaniel: It's one of my former employees, and he has been forcibly converted from perl5 to ruby since I left. So, from his point of view, he's of course wondering if it's a good job decision to look at raku,. 

[17:39] <tigerpaws> I don't know crystal. What is that? 

[17:40] <konvertex> But raku offers a sweet mix of features. Given that the mem usage and perf situation improves over the next releases, it might replace all other langs for me, apart from ada/rust for the super low-level stuff.

[17:40] <konvertex> Crystal is ruby with whole-program type inference and macros essentially.

[17:41] *** dd070 left
[17:42] *** dd070 joined
[17:42] <tigerpaws> Ok, I've just checked out the crystal site. Interesting, but still ruby. Interesting. I'll have a look at it. 

[17:43] <tigerpaws> AlexDaniel: blog post about what? raku usage in production or binary executables? 

[17:43] *** sawyer joined
[17:44] <sawyer> lizmat: o/ :)

[17:44] <AlexDaniel> tigerpaws: what I use raku for in production :)

[17:44] <konvertex> Yes, please.

[17:46] <tigerpaws> AlexDaniel:  I think we need as many of those as we can get.  I really liked Jonathan's talks about Cro and his Easilang stuff. In fact, I'm taking a demo service I wrote for python and kubernetes and converting it to CRO to see how that goes. 

[17:47] <konvertex> Speaking of lizm4t. There was this recent Supply.rotate commit in rakudo. Is the reference implementation basically free to add certain api improvments that aren't covered in the spec yet? Or was this added following some RFC process somewhere? Sorry, still new to this.

[17:51] <AlexDaniel> konvertex: yes it is free to add new features

[17:51] <AlexDaniel> konvertex: but it can't change or remove features that are in 6.c or 6.d

[17:52] <konvertex> Okay, I see.

[17:52] <AlexDaniel> konvertex: I mean, it can, but the feature has to remain intact if you have `use v6.c` or `use v6.d` in your coe

[17:52] *** pilne joined
[17:52] <AlexDaniel> code*

[17:53] *** dd070 left
[17:55] *** dd070 joined
[18:01] *** dd070 left
[18:02] *** dd070 joined
[18:03] *** sjm_uk left
[18:04] *** mowcat left
[18:08] <poohman_1> hello all

[18:08] <poohman_1> can someone tell me what this "q:to/EOI" means?

[18:09] <poohman_1> any link to some documentation would help

[18:09] <Altai-man_> pochi_, it is called "heredoc".

[18:09] <Altai-man_> https://docs.raku.org/syntax/heredocs%20:to <- poohman_1 

[18:09] <guifa> basically "quote from here, until you find EOI"

[18:10] <Altai-man_> guifa, "from next line" maybe?

[18:10] <poohman_1> thanks Altai-man & guifa

[18:16] *** sena_kun joined
[18:17] <El_Che> and it's indented so it doesn't mix up your code layout

[18:17] <tellable6> 2020-05-08T19:18:50Z #raku-dev <patrickb> El_Che There is a decent possibility that the 2020.05 release broke relocatability. See here: https://github.com/rakudo/rakudo/issues/3669

[18:17] <tellable6> 2020-05-08T19:20:11Z #raku-dev <patrickb> El_Che I tested this on windows and it's definitely broken. Changes are high it's also broken on non-windows. I'm working on a fix.

[18:18] *** Altai-man_ left
[18:28] *** dd070 left
[18:40] *** rouking joined
[18:42] <rouking> I've noticed a problem with the stringification of hashes (as in calling .Str). Namely, { a => { b => 'c' } } and { { a => 'b' } => 'c' } end up outputting the same thing when you call .Str

[18:43] <rouking> This wouldn't be a huge issue except it causes confusion when they're used as hash keys, since standard hashmaps coerce keys to Str

[18:43] <AlexDaniel> m: put { a => { b => 'c' } }

[18:43] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «a       b       c␤»

[18:43] <AlexDaniel> m: put { { a => 'b' } => 'c' }

[18:43] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «a       b       c␤»

[18:43] <AlexDaniel> m: dd { a => { b => 'c' } }

[18:43] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «Hash % = {:a(${:b("c")})}␤»

[18:43] <AlexDaniel> m: dd { { a => 'b' } => 'c' }

[18:43] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «Hash % = {"a\tb" => "c"}␤»

[18:47] <rouking> m: my %h1 = {a => 'b'} => 'c'; my %h2 = a => { b => 'c' }; my %h = %h1 => 1; say %h{%h2};

[18:47] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «(1)␤»

[18:47] *** andrzejku joined
[18:47] <rouking> Also the value ends up being a List??

[18:47] <rouking> Very strange

[18:47] *** suman joined
[18:48] <suman> how to know how much time does a script require to run ? Is it putting say now - INIT now; at the end of script?

[18:48] <suman> m: say now - INIT now;

[18:48] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «0.00127652␤»

[18:50] <suman> m: say now - INIT now;

[18:50] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «0.0012778␤»

[18:51] <AlexDaniel> suman: yeah

[18:51] <lizmat> suman: you could also do a "END say now - INIT now" anywhere in the script  

[18:52] <suman> Thank you

[18:53] *** poohman_1 left
[18:56] *** sjm_uk joined
[19:04] *** poohman_1 joined
[19:13] <suman> I have posted raku solution for this problem, see at the end disqus comment https://biospace.xyz/posts/reading-dna-on-computers/

[19:13] <suman> To run code go here https://repl.it/repls/CorruptNavyblueSeahorse

[19:15] <suman> But it runs quite slow !

[19:16] <sena_kun> suman, there is also https://github.com/Raku/examples/blob/master/categories/shootout/fasta.p6 but I am not sure how related that is.

[19:18] <sena_kun> Last time I checked it was "Rakudo is 7 times slower than Perl 5" which is not horribly bad if you ask me though can be better, of course.

[19:20] <sour> hello, do you have some links for that claim? @sena_kun 

[19:20] <sena_kun> sour, to what claim? Sorry, when I copy-pasted "7 times slower than" I mean "in this particular benchmark on my machine", not "in general", because "performance in general" is a lie of all lies.

[19:21] <sena_kun> sour, see https://github.com/Raku/examples/blob/enchance/categories/shootout/RESULTS

[19:21] <sour> thanks

[19:22] <sour> the " 7 times slower" thing :P

[19:23] <sena_kun> sour, I think someone smarter than me can rewrite it into something faster, but I have other things and I am not smart in the first place. :P

[19:24] <MasterDuke> timotimo: https://github.com/Raku/examples/blob/enchance/categories/shootout/n-body.raku seems like something that could be re-written to take advantage of your hyper-ops optimization branch

[19:25] <timotimo> oh, hm, yeah it actually possibly could

[19:26] <timotimo> but only removing one layer of for loop

[19:26] <timotimo> the $i would be a single value, the $k would be hypered over

[19:26] <timotimo> oh

[19:26] <timotimo> it's actually triangle-shaped

[19:30] <timotimo> but the @XS and @YS can be advanced with a hyperop, so you save these three lines in the outer for loop

[19:30] *** dd070 joined
[19:31] <MasterDuke> offset_momentum() could be hypered, right?

[19:31] <timotimo> yeah that looks good

[19:31] <timotimo> only five planets, though

[19:32] <timotimo> wonder how big the difference would be at such a small number

[19:36] *** suman left
[19:36] <timotimo> i can relatively easily support += whereas supporting actually mentioning the result array somewhere in the expression will be harder, since it has to make sure it never reads a value after it has been written to in the same hyper execution

[19:40] *** andrzejku left
[19:42] <timotimo> m: my int @foo = 1, 2, 3, 4; my int @bar = 10, 10, 10, 10; my int @result = @foo >>+<< @bar >>+<< (@bar >>*=>> 10); say @result

[19:42] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «[111 112 113 114]␤»

[19:42] <timotimo> m: my int @foo = 1, 2, 3, 4; my int @bar = 10, 10, 10, 10; my int @result = (@foo >>+<< @bar) >>+<< (@bar >>*=>> 10); say @result

[19:42] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «[111 112 113 114]␤»

[19:42] <timotimo> and this kind of stuff also has to be correct

[19:44] <timotimo> m: my int @foo = 1, 2, 3, 4; my int @bar = 10, 10, 10, 10; my int @result = @foo >>+<< @bar >>div<< (@bar >>*=>> 10); say @result

[19:44] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «[2 3 4 5]␤»

[19:44] <timotimo> eeeh obviously

[19:44] <timotimo> m: my int @foo = 1, 2, 3, 4; my int @bar = 10, 10, 10, 10; my @result = @foo >>+<< @bar >>/<< (@bar >>*=>> 10); .raku.say for @result

[19:44] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «2.0␤3.0␤4.0␤5.0␤»

[19:44] <timotimo> m: my int @foo = 1, 2, 3, 4; my int @bar = 10, 10, 10, 10; my @result = @foo >>+<< @bar >>/<< (@bar >>*=>> 10); .nude.say for @result

[19:44] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «(2 1)␤(3 1)␤(4 1)␤(5 1)␤»

[19:45] <timotimo> m: my int @foo = 1, 2, 3, 4; my int @bar = 10, 10, 10, 10; my @result = @foo >>+<< @bar »=>« (@bar >>*=>> 10); .raku.say for @result

[19:45] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «11 => 100␤12 => 100␤13 => 100␤14 => 100␤»

[19:45] <poohman_1> Hello all, is "$match.make: $match<pair>».made" the same as "$match.make($match<pair>».made);"

[19:45] <timotimo> sorry for the spam

[19:46] <timotimo> poohman_1: yeah; this syntax only works for method calls, though

[19:46] <tigerpaws> timotimo: No, I love the last one (with =>)

[19:47] <poohman_1> thanks timotimo - I prefer the brackets, just wanted to make sure it was nothing Grammar specific

[19:47] <timotimo> trying to zero in on exactly when values are gotten and when they are changed

[19:47] <dd070> can I use raku in production ? 

[19:48] <timotimo> dd070: a bunch of people already do, so i'd say give it a try

[19:48] <timotimo> depends on what exactly you're going to do with it

[19:49] <El_Che> dd070: like for all production projecte, have tests and monitoring and you'll be fine. New releases (bug fixes and new features) arr released regularly.

[19:50] <timotimo> committable6: 6c my @foo = 1, 2, 3, 4; @foo.reverse >>+=>> 1; say @foo; my int @bar = 1, 2, 3, 4; @bar.reverse >>+=>> 2; say @bar

[19:50] *** dd0701 joined
[19:50] <committable6> timotimo, https://gist.github.com/eb02c68d6caf867e3a7ce40ea88da7d2

[19:51] <timotimo> ha, two change spots

[19:51] <timotimo> but the behavior changed (broke, i'd say) back near the end of 2016

[19:51] <timotimo> very interesting, very interesting indeed

[19:53] *** dd070 left
[19:56] *** caterfxo left
[20:01] *** mjsir911 left
[20:04] *** sjm_uk left
[20:06] <dd0701> timotimo:  some network scripts. read/write socket data, read/write remote redis server  . and probably full blown mvc web application. 

[20:06] <timotimo> yeah, that sounds like something raku should be good for

[20:07] <dd0701> that's good. where it should  not be used then? except AI. 

[20:08] <timotimo> hard realtime is currently not possible

[20:08] <dd0701> is it related with performance drawbacks compared to p5 ? 

[20:08] <timotimo> can't run on embedded hardware, by which i mean like STM or ATMega where you don't have an OS underneath it

[20:09] <timotimo> running rakudo on moarvm means you'll haev a stop-the-world garbage collector

[20:09] <timotimo> in general, those don't do hard realtime

[20:10] <dd0701> I haven't used p5 for hard realtime either. in fact no language before. 

[20:10] <timotimo> i guess perl5 is a bit better for it because it uses reference counting, but i assume it also comes with a little garbage collector to get rid of reference cycles that are otherwise not "anchored"

[20:11] <timotimo> like cpython has

[20:11] <timotimo> many performance drawbacks of raku over p5 can be defeated with parallelism in raku

[20:13] <dd0701> I like async but its not always usable for some apps

[20:13] *** rindolf left
[20:13] <timotimo> it's not only async that raku has

[20:13] <dd0701> like, simple web app, parse request, query db and prepare html output and send it. 

[20:14] <timotimo> that sounds like you can parallelize perfectly

[20:14] <dd0701> perhaps job of middleware 

[20:15] <dd0701> to support concurrent requests

[20:15] <timotimo> cro does that just fine by itself

[20:16] *** Altai-man_ joined
[20:17] <timotimo> cro is very good :)

[20:18] *** sena_kun left
[20:19] <dd0701> yes just checked that. 

[20:19] <dd0701> I often have to write script to sync ebay/amazon data. call api, fetch large number of orders, update local db etc. 

[20:20] <dd0701> but as you said I would be using parallelism 

[20:20] <dd0701> with Raku

[20:41] *** dd0701 left
[20:42] *** dd0701 joined
[20:43] *** andreoss left
[20:43] *** stoned75 left
[20:44] *** stoned75 joined
[20:49] *** dd0701 left
[20:52] *** k-man left
[20:52] *** elcaro left
[20:52] *** elcaro joined
[20:55] *** mowcat joined
[20:57] *** k-man joined
[20:59] *** brtastic left
[21:01] *** sour left
[21:13] *** stoned75 left
[21:13] *** farcas1982regreg left
[21:29] <poohman_1> hello all, what is the equality operator or inequality operator to check if something is Nil - i keep getting use of Nil in string context

[21:29] *** poohman_1 left
[21:30] *** poohman_1 joined
[21:30] <AlexDaniel> poohman_1: usually you'd use .defined

[21:30] <AlexDaniel> m: say Nil.defined

[21:30] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «False␤»

[21:31] <AlexDaniel> if it has to be an operator then maybe `$x ~~ Nil`

[21:32] <poohman_1> $Match<something>.made~~Nil - would that make sense??

[21:33] * moritz usually just checks for defined

[21:33] <AlexDaniel> yeah, usually that'd be $Match<something>.made.defined

[21:34] <AlexDaniel> or even better `with $Match<something>.made { .say }`

[21:35] <poohman_1> but the last example would not give me Bool, would it/

[21:35] <poohman_1> ?

[21:36] <AlexDaniel> poohman_1: yeah, but you asked about checking if something is Nil

[21:36] <AlexDaniel> it won't give you Bool but it does check :)

[21:37] <poohman_1> ok I meant as a condition

[21:37] <poohman_1> :) - thanks 

[21:40] *** aborazmeh left
[21:58] <poohman_1> m: $a="ffff";say $a.int;

[21:58] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$a="ffff";say $a.int;␤»

[21:58] <poohman_1> m: my $a="ffff";say $a.int;

[21:58] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «No such method 'int' for invocant of type 'Str'. Did you mean 'Int'?␤  in block <unit> at <tmp> line 1␤␤»

[21:58] <poohman_1> m: my $a="ffff";say $a.Int;

[21:58] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5ffff' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[21:59] <timotimo> m: my $a = "ffff"; say :16($a)

[21:59] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «65535␤»

[21:59] <timotimo> m: my $a = "ffff"; say "0x$a".Int

[21:59] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «65535␤»

[22:02] <poohman_1> m: my $a="0000";my $b="0010"; my @c = 16(@a) .. 16(@b); say @c;

[22:02] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared. Did you mean '$a'?␤at <tmp>:1␤------> 3my $a="0000";my $b="0010"; my @c = 16(7⏏5@a) .. 16(@b); say @c;␤»

[22:03] <poohman_1> m: my $a="0000";my $b="0010"; my @c = 16($a) .. 16($b); say @c;

[22:03] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[22:04] <poohman_1> m: my $a="0000";my $b="0010"; my @c = 0 .. 16; say @c;

[22:04] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]␤»

[22:05] <poohman_1> m: my $a="0000";my $b="0010"; my @c = :16($a) .. :16($b); say @c;

[22:05] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]␤»

[22:06] <poohman_1> cool

[22:06] <poohman_1> any way to display @c also in hex?

[22:07] <tobs> m: my @c = 0..16; say @c.map(*.base(16))

[22:07] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «(0 1 2 3 4 5 6 7 8 9 A B C D E F 10)␤»

[22:08] <poohman_1> cool - thanks timotimo and tobs

[22:08] <tobs> poohman_1: this calls the .base(16) method on everything in @c and collects the results

[22:08] <timotimo> i prefer .fmt for that tbh

[22:08] <timotimo> m: my @c = 0..16; say @c.fmt("%0x")

[22:08] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «0 1 2 3 4 5 6 7 8 9 a b c d e f 10␤»

[22:09] <timotimo> m: my @c = 0..16; say @c.fmt("%02x")

[22:09] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10␤»

[22:09] <timotimo> m: my @c = 0..16; say @c.fmt("«0x%02x»")

[22:09] <camelia> rakudo-moar 7a902b5e4: OUTPUT: ««0x00» «0x01» «0x02» «0x03» «0x04» «0x05» «0x06» «0x07» «0x08» «0x09» «0x0a» «0x0b» «0x0c» «0x0d» «0x0e» «0x0f» «0x10»␤»

[22:09] <timotimo> m: my @c = 0..16; say @c.fmt("«0x%02x»", " ←=→ ")

[22:09] <camelia> rakudo-moar 7a902b5e4: OUTPUT: ««0x00» ←=→ «0x01» ←=→ «0x02» ←=→ «0x03» ←=→ «0x04» ←=→ «0x05» ←=→ «0x06» ←=→ «0x07» ←=→ «0x08» ←=→ «0x09» ←=→ «0x0a» ←=→ «0x0b» ←=→ «0x0c» ←=→ «0x0d» ←=→ «0x0e» ←=…»

[22:10] <poohman_1> nice - you have any tricks to get it in upper case as well?

[22:11] <poohman_1> :)

[22:11] <timotimo> of course

[22:11] <timotimo> m: my @c = 0..16; say @c.fmt("«0x%02X»", " ←=→ ")

[22:11] <camelia> rakudo-moar 7a902b5e4: OUTPUT: ««0x00» ←=→ «0x01» ←=→ «0x02» ←=→ «0x03» ←=→ «0x04» ←=→ «0x05» ←=→ «0x06» ←=→ «0x07» ←=→ «0x08» ←=→ «0x09» ←=→ «0x0A» ←=→ «0x0B» ←=→ «0x0C» ←=→ «0x0D» ←=→ «0x0E» ←=…»

[22:11] <poohman_1> wow - supercool - thanks

[22:12] <timotimo> m: say "hello how are you doing today my friend".samecase("Aa" x 50)

[22:12] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «HeLlO HoW ArE YoU DoInG ToDaY My fRiEnD␤»

[22:13] <poohman_1>  m: say "hello how are you doing today my friend".samecase("Aa" x 10)

[22:13] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «HeLlO HoW ArE YoU Doing today my friend␤»

[22:14] <timotimo> m: say "hello how are you doing today my friend".samemark("öôóòõø" x 50)

[22:14] <camelia> rakudo-moar 7a902b5e4: OUTPUT: «ḧêĺl̀õ ḧôẃ ̀ãrë ̂ýòũ d̈ôíǹg̃ ẗôd́àỹ m̈ŷ ́f̀r̃iën̂d́␤»

[22:15] <timotimo> seems like ø doesn't count as "having a mark"?

[22:15] <lizmat> well, it doesn't ?

[22:16] *** sena_kun joined
[22:18] *** ctilmes joined
[22:18] *** Altai-man_ left
[22:19] *** chloekek left
[22:27] *** melezhik joined
[22:27] *** melezhik left
[22:30] *** sena_kun left
[22:51] *** poohman_1 left
[23:05] *** pecastro left
[23:10] *** mowcat left
[23:38] *** aborazmeh joined
[23:38] *** aborazmeh left
[23:38] *** aborazmeh joined
[23:40] *** aborazmeh left
[23:52] *** Sgeo joined
[23:55] *** Sgeo_ left
