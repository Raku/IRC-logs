[00:02] *** rindolf left
[00:11] *** patrickz joined
[00:11] *** mahmudov left
[00:15] *** patrickb left
[00:34] *** Benett left
[00:56] *** Benett joined
[01:05] *** perryprog left
[01:06] *** perryprog joined
[01:07] *** rjbs left
[01:07] *** rjbs joined
[01:07] *** awwaiid left
[01:08] *** awwaiid joined
[01:53] *** patrickz left
[01:57] *** guifa2 joined
[02:08] *** ufobat__ joined
[02:12] *** ufobat_ left
[02:20] *** wamba left
[02:50] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; my $x := IterStr.new('hello'); .say for $x;

[02:50] <camelia> rakudo-moar 06292bc82: OUTPUT: «h␤e␤l␤l␤o␤»

[02:50] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; my @x = IterStr.new('hello'); .say for @x;

[02:50] <camelia> rakudo-moar 06292bc82: OUTPUT: «h␤e␤l␤l␤o␤»

[02:51] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; .say for  IterStr.new('hello');

[02:51] <camelia> rakudo-moar 06292bc82: OUTPUT: «h␤e␤l␤l␤o␤»

[02:52] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; my $x = IterStr.new('hello'); .say for $x;

[02:52] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «IterStr.new(str => "hello")␤»

[02:52] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; my $x = IterStr.new('hello'); my $i = $x.iterator; say $i.pull-one;

[02:52] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «h␤»

[02:53] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; my $x = IterStr.new('hello'); my $i = $x.iterator; say $i.pull-one; say $i.pull-one;

[02:53] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «h␤e␤»

[02:54] <uzl[m]> Why is it that assigning an iterable to a scalar variable prevents you from iterating it like you'd would do by binding it?

[02:56] <uzl[m]> m: class IterStr does Iterable { has $.str; method new($str) { self.bless(:$str) }; method iterator { $!str.split('', :skip-empty).iterator }}; my $x = IterStr.new('hello'); my $i = $x.iterator; while True { my $item := $i.pull-one; last if $item =:= IterationEnd; say $item }

[02:56] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «h␤e␤l␤l␤o␤»

[02:58] *** rbt left
[03:07] <vrurg_> uzl[m]: Because it gets itemized, I guess.

[04:07] *** quotable6 left
[04:07] *** committable6 left
[04:07] *** bloatable6 left
[04:07] *** reportable6 left
[04:07] *** releasable6 left
[04:07] *** greppable6 left
[04:07] *** squashable6 left
[04:07] *** bisectable6 left
[04:07] *** shareable6 left
[04:07] *** statisfiable6 left
[04:07] *** nativecallable6 left
[04:07] *** coverable6 left
[04:07] *** notable6 left
[04:07] *** sourceable6 left
[04:07] *** unicodable6 left
[04:07] *** benchable6 left
[04:07] *** bisectable6 joined
[04:07] *** quotable6 joined
[04:07] *** unicodable6 joined
[04:07] *** bloatable6 joined
[04:08] *** coverable6 joined
[04:08] *** benchable6 joined
[04:08] *** sourceable6 joined
[04:09] *** greppable6 joined
[04:09] *** squashable6 joined
[04:09] *** nativecallable6 joined
[04:09] *** reportable6 joined
[04:09] *** notable6 joined
[04:09] *** statisfiable6 joined
[04:09] *** releasable6 joined
[04:10] *** committable6 joined
[04:10] *** shareable6 joined
[04:55] *** guifa2 left
[05:02] <Xliff> nqp: my @filechars = ('a'... 'z');

[05:02] <camelia> nqp-moarvm: OUTPUT: «Assignment ("=") not supported in NQP, use ":=" instead at line 2, near " ('a'... '"␤   at gen/moar/stage2/NQPHLL.nqp:1026  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:panic)␤ from <unknown>:1  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.…»

[05:03] <Xliff> nqp: my @filechars := ('a'... 'z');

[05:03] <camelia> nqp-moarvm: OUTPUT: «Malformed binding at line 2, near "('a'... 'z"␤   at gen/moar/stage2/NQPHLL.nqp:1026  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:panic)␤ from <unknown>:1  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.moarvm:initializer)␤ from gen/moar/s…»

[05:03] <Xliff> nqp: my @filechars := ('a'.. 'z');

[05:03] <camelia> nqp-moarvm: OUTPUT: «Malformed binding at line 2, near "('a'.. 'z'"␤   at gen/moar/stage2/NQPHLL.nqp:1026  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:panic)␤ from <unknown>:1  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.moarvm:initializer)␤ from gen/moar/s…»

[05:03] <Xliff> nqp: my @filechars := ('a'..'z');

[05:03] <camelia> nqp-moarvm: OUTPUT: «Malformed binding at line 2, near "('a'..'z')"␤   at gen/moar/stage2/NQPHLL.nqp:1026  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:panic)␤ from <unknown>:1  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.moarvm:initializer)␤ from gen/moar/s…»

[05:04] <Xliff> nqp: my @filechars := ('a', 'z');

[05:04] <camelia> nqp-moarvm: ( no output )

[05:05] <Xliff> nqp: my $filechars := 'abcdefghijklmnopqrstuvwxyz0123456789';

[05:05] <camelia> nqp-moarvm: ( no output )

[05:12] <cpan-raku> New module released to CPAN! Auth::SASL (0.0.1) by 03HANENKAMP

[05:20] *** rindolf joined
[05:21] *** MasterDuke left
[05:37] *** lbtjp joined
[06:24] *** sauvin joined
[06:27] *** klapperl left
[06:27] *** klapperl joined
[06:33] *** Doc_Holliwood left
[06:33] *** Doc_Holliwould left
[07:06] <Xliff> m: say 36 ** 20

[07:06] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «13367494538843734067838845976576␤»

[07:06] <Xliff> m: «13367494538843734067838845976576».chars.say

[07:06] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «32␤»

[07:07] <Xliff> m: say («13367494538843734067838845976576».chars - 6) / 3

[07:07] <camelia> rakudo-moar 72fadd1b2: OUTPUT: «8.666667␤»

[07:43] *** hacktor joined
[08:14] *** aluaces left
[08:27] *** cpan-raku left
[08:27] *** cpan-raku joined
[08:27] *** cpan-raku left
[08:27] *** cpan-raku joined
[08:59] *** zln joined
[08:59] *** Doc_Holliwould joined
[08:59] *** Doc_Holliwood joined
[09:00] <zln> why do you separate perls 

[09:00] <zln> is there that big difference

[09:04] <moritz> there is, yes

[09:07] *** shred_alert joined
[09:11] <zln> ah, I began learning perl. Maybe I should go on and begin learning Perl 6 instead ?

[09:11] <zln> is it like c & c++?

[09:11] <zln> the difference I mean

[09:17] *** mahmudov joined
[09:17] <shred_alert> zln, Perl 6 is called Raku now. :)

[09:17] <zln> :-D

[09:18] <shred_alert> You can write Raku code that looks a lot like C(++)

[09:18] <shred_alert> That one of the great things about it. It's flexible enough to fit around many styles and paradigms of coding.

[09:18] *** hacktor left
[09:18] <epony> there is no difference, there is familiarity

[09:20] <zln> stranger things this is

[09:21] *** sena_kun joined
[09:21] <epony> https://en.wikipedia.org/wiki/Raku_(programming_language) "Raku is a member of the Perl family of programming languages".

[09:23] <zln> Should a person like me who began to learn perl switch to raku instead or keep going 

[09:24] <epony> how old are you?

[09:24] <shred_alert> What do you want to do with the programming language?

[09:26] <zln> eh, I am 29. Donno, maybe mostly sysadmin things and other data manipulation things. 

[09:26] <epony> keep going

[09:26] <zln> In what situation should I not keep going? :)

[09:27] <shred_alert> You won't lose out by switching to Raku in that case.

[09:28] <shred_alert> Unless you already have dependencies with Perl modules, I'd recommend learning Raku instead.

[09:28] <zln> No I am not a maintainer or pro-programmer

[09:28] <zln> It's just for enthusiasm only :)

[09:29] <shred_alert> In that case, Raku is a great choice!

[09:30] <zln> Is it as integrated as perl when it comes to sysadmin and data manipulation?

[09:30] <shred_alert> No. It's still a new language in the sysadmin world. 

[09:31] <zln> And. What books would you recommend for learning Raku deeply and thorougly 

[09:31] <shred_alert> Uh. I'd just recommend learning Raku by looking up a basic syntax guide and building something. You'll get started a lot faster that way.

[09:31] <shred_alert> You can refer to docs and books when you want more depth

[09:31] <shred_alert> And share your code as well to get pointers

[09:32] <zln> Alright

[09:32] <zln> I think we got it covered :)

[09:32] <shred_alert> (y) 

[09:32] <zln> Thanks for taking time

[09:32] <shred_alert> You're welcome. :)

[09:32] <zln> :-=

[09:32] <zln> :-)  :p

[09:35] <shred_alert> zln, this link is very useful: https://docs.perl6.org/language/syntax

[09:36] <zln> Will do, thanks :)

[09:37] <shred_alert> Anyone know why there are two versions still floating around? https://docs.raku.org/language/syntax https://docs.perl6.org/language/syntax

[09:40] <sena_kun> shred_alert, for backward compatibility for some time?

[09:40] <sena_kun> yesh, redirects, but

[09:48] <shred_alert> Ah okay

[09:48] <shred_alert> Was just curious

[09:51] *** shred_alert left
[09:52] *** Altai-man_ joined
[09:54] <sarna> does raku have something like python’s virtualenv?

[09:55] *** sena_kun left
[10:05] *** shred_alert joined
[10:18] <zln> what is python's virtualenv maybe you could explein if there who have the answer on the raku side but cannot relate to python

[10:18] <zln> I think maybe

[10:20] <shred_alert> Basically you're decoupling the environment that your programming is running in from the base operating system.

[10:21] <Altai-man_> there is p6env, but not sure how "local" can it be

[10:22] <Altai-man_> also I think rakudobrew can do things

[10:23] <shred_alert> If you really want to decouple an app from the base system you can look into stuff like VMs, containers, and jails.

[10:24] *** hacktor joined
[10:26] <sarna> yeah, but vms containers and jails are really heavyweight.. using them when I just want to have two different versions of libraries installed for two different projects would be.. suboptimal 

[10:26] <sarna> or at least that’s my viewpoint

[10:27] <shred_alert> Just listing options :)

[10:28] *** patrickb joined
[10:30] <Altai-man_> sarna, two versions of raku libraries? you can do that without any venvs. :)

[10:31] <Altai-man_> just specify :ver<foo> and :ver<bar> in META6.json to install both, and then you can use Cool::Lib:ver<foo> and use Cool::Lib:ver<bar> and both will be available in this scope.

[10:35] <Altai-man_> and if they are in a different projects, then no problem at all

[10:37] <sarna> Altai-man_: oh wow that’s cool

[10:37] <Altai-man_> sarna, :)

[10:40] *** Manifest0 left
[10:41] *** Doc_Holliwould left
[10:41] *** Doc_Holliwood left
[10:43] *** Manifest0 joined
[10:45] <Altai-man_> u:  – AlwaysFail

[10:45] <unicodable6> Altai-man_, U+0020 SPACE [Zs] ( )

[10:45] <unicodable6> Altai-man_, U+2013 EN DASH [Pd] (–)

[10:45] <unicodable6> Altai-man_, 13 characters in total ( – AlwaysFail): https://gist.github.com/a0f60822e1ce45fc5d64c934ea0cff0a

[10:45] <Altai-man_> hmmm

[10:56] *** hacktor left
[10:58] *** rindolf left
[10:58] *** hacktor joined
[11:02] *** hacktor left
[11:11] *** chloekek joined
[11:16] *** wamba joined
[11:23] *** shred_alert left
[11:26] *** Guest78373 left
[11:27] *** Guest78373 joined
[11:30] *** aluaces joined
[11:53] *** sena_kun joined
[11:56] *** Altai-man_ left
[12:13] *** Guest78373 left
[12:16] *** Guest78373 joined
[12:29] *** AlexDani` joined
[12:30] *** Guest78373 left
[12:30] *** AlexDaniel left
[12:30] *** mahmudov left
[12:31] *** Guest78373 joined
[12:32] *** mahmudov joined
[12:44] *** AlexDani` is now known as AlexDaniel

[12:44] *** AlexDaniel left
[12:44] *** AlexDaniel joined
[13:14] *** chloekek left
[13:25] *** Guest78373 left
[13:35] *** hungrydonkey joined
[13:37] *** Guest78373 joined
[13:39] *** rindolf joined
[13:43] *** wamba left
[13:52] *** Altai-man_ joined
[13:56] *** sena_kun left
[13:57] *** chloekek joined
[14:14] *** Doc_Holliwood joined
[14:14] *** Doc_Holliwould joined
[14:28] *** lucasb joined
[14:33] *** hungrydonkey left
[14:50] *** silug joined
[15:03] *** asdfasdfasdf joined
[15:04] *** asdfasdfasdf left
[15:13] *** Kaiepi joined
[15:17] <Kaiepi> i'm writing a routine that takes another routine along with a capture of arguments and using that routine's signature, maps its parameters to corresponding values in the capture. the problem is atm i keep state for which named params have been seen and where in the list of positional params the routine is currently at because of slurpy parameters, but this is really annoying to write in such a way that it's 

[15:17] <Kaiepi> both testable and optimal. are there other ways to go about implementing this?

[15:17] <tellable6> 2019-12-26T18:52:37Z #raku <jmerelo> Kaiepi OK :-)

[15:19] <Kaiepi> in js i'd use something like a generator for something like this, which is similar to gather, but i want to be able to test how individual params get mapped, which i'm not sure if i can do with that

[15:32] <Kaiepi> oh, looks like the Iterator class does what i'm looking for

[15:53] *** sena_kun joined
[15:55] *** Altai-man_ left
[16:04] *** tadzik left
[16:07] *** sergot left
[16:07] *** masak left
[16:10] *** tadzik joined
[16:19] *** wamba joined
[16:32] *** lichtkind joined
[16:55] *** Kaiepi left
[17:24] *** domidumont joined
[17:33] *** stoned75 joined
[17:37] *** wildtrees joined
[17:45] *** zln left
[17:47] *** tyil left
[17:48] *** tyilanmenyn joined
[17:48] *** tyilanmenyn is now known as tyil

[17:52] *** Altai-man_ joined
[17:56] *** sena_kun left
[17:58] <SmokeMachine> sarna: have you seen 6pm?

[18:01] *** phogg left
[18:04] *** phogg joined
[18:04] *** phogg left
[18:04] *** phogg joined
[18:07] <SmokeMachine> sarna: https://modules.raku.org/dist/6pm:github:Fernando%20Correa%20de%20Oliveira

[18:20] *** stoned75 left
[18:42] *** mahmudov left
[18:42] *** xinming joined
[18:43] *** mahmudov joined
[19:14] *** rindolf left
[19:18] *** pochi_ joined
[19:20] *** zeylos7 joined
[19:21] *** pochi left
[19:21] *** zeylos left
[19:21] *** zeylos7 is now known as zeylos

[19:21] *** TreyHarris left
[19:23] *** TreyHarris joined
[19:25] *** wamba left
[19:29] *** rindolf joined
[19:30] *** patrickb left
[19:48] *** domidumont left
[19:53] *** sena_kun joined
[19:55] *** Altai-man_ left
[19:55] *** sauvin left
[19:59] *** sauvin joined
[20:03] *** chloekek left
[20:31] *** stoned75 joined
[20:37] *** Kaiepi joined
[20:47] *** chloekek joined
[21:11] *** rindolf left
[21:27] *** dzedesfr joined
[21:27] <dzedesfr> i

[21:27] <dzedesfr> Hi

[21:27] <dzedesfr> could anyone tell GitHub to replace "Perl6" by "Raku" ??

[21:46] <cpan-raku> New module released to CPAN! Object::Permission (0.0.4) by 03JSTOWE

[21:49] *** wamba joined
[21:51] *** ufobat__ left
[21:52] *** Altai-man_ joined
[21:55] *** sena_kun left
[22:05] <Geth> ¦ doc: cc2557c937 | (Stoned Elipot)++ | doc/Type/IO/Path.pod6

[22:05] <Geth> ¦ doc: remove unnecessary calls to IO coercer in examples

[22:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/cc2557c937

[22:11] <sjn> \o

[22:12] <sjn> Updated stickers for FOSDEM: https://www.dropbox.com/sh/x8yjm7s73idbjrf/AACp2UGtIygHGiCA5NzrTBHKa?dl=0

[22:12] <sjn> I've ordered 2000 of them. Come to FOSDEM if you want any of them! :-)

[22:49] <uzl[m]> sjn++

[22:50] <uzl[m]> dzedesfr: What do you mean specifically? Repos? Language tag? 

[22:51] *** kensanata joined
[22:52] <dzedesfr> uzl[m] language tag

[22:52] *** aluaces left
[22:52] <dzedesfr> https://github.com/search/advanced

[22:52] <dzedesfr> Replace "Perl6" by "Raku"

[22:53] <uzl[m]> I guess that there must be some repo where an issue can be submitted if it hasn't.

[22:54] <Grinnz> it should happen as soon as https://github.com/github/linguist/pull/4731 is deployed

[22:59] *** uzl joined
[23:00] <uzl> .tell vrurg_ Re: Iterators, Thanks. I ended up finding the following SO question (https://stackoverflow.com/q/50580476/10824322). I even asked a related question (https://stackoverflow.com/q/57121561/10824322) which I somehow forgot about it 😅.

[23:00] <tellable6> uzl, I'll pass your message to vrurg_

[23:02] <uzl> I decided to talk myself through the concepts of iterables and iterators (especially those in Raku), and ended up assembling this: https://gitlab.com/snippets/1929111. It's a bit longish but if anyone could read it and offer some feedback, especially corrections and suggestion for improving it, I'd appreciate it.

[23:02] <dzedesfr> http://openmortal.sourceforge.net/cgi-bin/characters.cgi?fighter=8

[23:04] *** dzedesfr left
[23:11] *** uzl left
[23:17] *** wamba left
[23:27] *** lucasb left
[23:31] *** chloekek left
[23:43] *** cpan-raku left
[23:47] *** cpan-raku joined
[23:47] *** cpan-raku left
[23:47] *** cpan-raku joined
[23:54] *** sena_kun joined
[23:56] *** Altai-man_ left
