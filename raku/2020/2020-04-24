[00:01] *** p6steve joined
[00:06] *** p6steve left
[00:35] *** ensamvarg_g6 joined
[00:39] *** KindOne joined
[00:50] *** sena_kun joined
[00:52] *** Altai-man_ left
[00:55] *** rbt left
[00:56] *** rbt joined
[01:12] *** Kaeipi left
[01:12] *** Kaeipi joined
[01:19] *** Altai-man_ joined
[01:21] *** sena_kun left
[01:26] *** molaf left
[01:27] *** farcas1982regreg left
[01:38] *** molaf joined
[01:40] <guifa2> stu002: I've not done an 100% literate style, but I've start doing a LOT more in-line documentation which approaches that style (particularly when I'm having to hew towards standards)

[01:41] <guifa2> (also because I tend to only be able to program in spurts, so it helps me remember WTF I was doing 

[01:49] <raschipi> guifa2: any modules you published in this style?

[01:50] *** aborazmeh left
[01:54] <guifa2> None that are purely so, but if you look here: 

[01:54] <guifa2> https://github.com/alabamenhu/LanguageTag/blob/master/lib/Intl/LanguageTag.pm6

[01:55] <guifa2> particularly the ACCEPTS() method for LanguageTagFilter

[01:55] <guifa2> and the check-valid for TransformedContent

[01:56] <guifa2> or lookup-language-tags

[01:56] <guifa2> but I need to do a *lot* of clean up and better documenting in there so no judging me :-)

[01:59] <raschipi> No judgement from someone whose code still causes nightmares on his colleagues.

[01:59] *** pilne left
[02:01] *** Manifest0 left
[02:02] *** Manifest0 joined
[02:03] *** p6steve joined
[02:06] <raschipi> Literate programming means that the end result is formatted nicely, with TeX for example. So these examples get us almost there. Perhaps a POD slang that keeps the code mixed into the final display would be it.

[02:08] *** p6steve left
[02:36] <guifa2> We can't quite do full literate programming, but we can get close.  But it's definitely possible to parse for pod6 and get some nice TeX-like literate output if you want to

[02:39] <raschipi> But then it will discard the code and the book won't make sense.

[02:49] *** Kaiepi joined
[02:49] *** Kaeipi left
[02:56] *** melezhik left
[03:04] *** Kaiepi left
[03:05] <cpan-raku> New module released to CPAN! Test::Async (0.0.6) by 03VRURG

[03:06] *** k-man left
[03:07] *** raschipi left
[03:10] <guifa2> .tell raschipi that the code is discarded at the moment is just because all pod renderers have chosen to do that :-) 

[03:10] *** rbt left
[03:10] <tellable6> guifa2, I'll pass your message to raschipi

[03:11] *** rbt joined
[03:11] *** Kaiepi joined
[03:17] *** k-man joined
[03:20] *** sena_kun joined
[03:21] *** Altai-man_ left
[03:36] *** Itaipu left
[03:36] *** Itaipu joined
[03:44] *** molaf left
[03:53] *** k-man left
[03:55] *** Util joined
[04:12] *** k-man joined
[04:23] *** Doc_Holliwood joined
[04:24] *** p6steve joined
[04:29] *** p6steve left
[04:30] *** farcas1982regreg joined
[04:35] <discord6> <stu002> @guifa2 @raschipi @AlexDaniel thanks for that, POD documents may be enough for my needs. Being able to add LaTeX expressions would be nice though.

[04:38] <guifa2> which LaTeX expressions would you want?  The nice thing about a pod processor is that you can capture text andd process it accordingly if you want.  So you could do a [latex: ] or something, and then process the innards if you need, e.g., math epxressions.  There's probably already a library out there to help with processing TeX stuff, but I've not used it

[04:44] <discord6> <stu002> @guifa2 that approach of a latex block handled by custom processing code may well be enough.

[04:45] <guifa2> The nice thing about raku is that writing your own text processing stuff is a breeze :-)

[04:45] <discord6> <stu002> Agreed.

[05:05] *** k-man left
[05:06] <guifa2> Actually, it seems no one has written a LaTeX parser.  *wink* 

[05:06] <guifa2> *cough*

[05:10] *** k-man joined
[05:14] *** [Sno] left
[05:19] *** Altai-man_ joined
[05:20] *** sauvin joined
[05:22] *** sena_kun left
[05:22] <discord6> <stu002> @guifa2 I'm still very new to the language and ecosystem so probably not (yet) a good person to tackle that.

[05:24] <guifa2> Understanding LaTeX takes enough time.  Understanding TeX takes more time.  A tight integration between Raku and LaTeX à la LuaLaTeX would be amazing but undestanding an immense amount of time.

[05:27] <guifa2> that said, Raku is one of the few languages that would legitimately make parsing TeX probably merely uncomfortable rather than extremely painful.  It would be an ugly grammar with some complex actions but .... it could be done

[05:55] <moritz> I'd really love to have a more modern language on top of TeX's rendering engine

[06:03] *** cpan-raku left
[06:04] *** cpan-raku joined
[06:04] *** cpan-raku left
[06:04] *** cpan-raku joined
[06:10] *** [Sno] joined
[06:11] *** andrzejku joined
[06:15] *** __jrjsmrtn__ left
[06:17] *** __jrjsmrtn__ joined
[06:22] *** Doc_Holliwood left
[06:25] *** Kaiepi left
[06:26] *** Kaiepi joined
[06:42] *** p6steve joined
[06:47] *** p6steve left
[06:47] *** stoned75 joined
[06:50] *** girafe left
[07:06] *** stoned75 left
[07:09] *** stoned75 joined
[07:20] *** sena_kun joined
[07:21] *** Altai-man_ left
[07:27] *** xelxebar_ left
[07:27] *** xelxebar joined
[07:28] *** rindolf joined
[07:31] <guifa2> moritz: I agree 10000%.  TeX is amazing.  But it's also a product of its time and there are just a few modern niceties that would be amazing in it

[07:32] * guifa2 just got quantifiers working in binex!

[07:32] <guifa2> quantifiers + concat + literals = 70% of typical regexen?

[07:33] <moritz> I might not be a your typical regex author, but I also use ^, $ and char classes a lot

[07:34] *** stoned75 left
[07:40] <guifa2> moritz: I don't have really any of the metachars yet (although ^ and $ would be very easy).  Right now I'm slowly working my way up the regex chain, once I hit termseq I'll get into metachar/grouping/capturing.

[07:43] <guifa2> bedtime now

[07:46] *** girafe joined
[07:47] *** girafe left
[08:10] *** rbt left
[08:11] *** rbt joined
[08:15] *** kybr joined
[08:16] *** p6steve joined
[08:32] *** [Sno] left
[08:36] *** girafe joined
[08:36] *** Black_Ribbon left
[08:46] *** pecastro joined
[08:53] <Geth> ¦ doc: 3be49a8b5b | (JJ Merelo)++ | doc/Type/Slip.pod6

[08:53] <Geth> ¦ doc: .perl → .raku

[08:53] <Geth> ¦ doc: 

[08:53] <Geth> ¦ doc: Closes #3348

[08:53] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/3be49a8b5b

[08:53] <linkable6> Link: https://docs.raku.org/type/Slip

[08:53] <linkable6> DOC#3348 [closed]: https://github.com/Raku/doc/issues/3348 [docs][easy to resolve] some .perl needs changing

[09:03] *** girafe left
[09:04] *** stoned75 joined
[09:08] *** girafe joined
[09:10] *** girafe left
[09:19] *** Altai-man_ joined
[09:21] *** sena_kun left
[09:22] *** p6steve left
[09:34] *** kotrcka joined
[09:35] *** lichtkind joined
[09:37] *** girafe joined
[09:38] *** [Sno] joined
[09:53] *** stoned75 left
[10:02] *** p6steve joined
[10:07] *** natrys joined
[10:18] *** epony joined
[10:18] *** lichtkind_ joined
[10:20] *** lichtkind left
[10:31] *** Doc_Holliwood joined
[10:37] *** natrys left
[10:49] *** andrzejku left
[10:50] *** xinming_ joined
[10:55] *** aborazmeh joined
[10:55] *** aborazmeh left
[10:55] *** aborazmeh joined
[11:02] *** mowcat joined
[11:11] *** xinming_ left
[11:12] *** xinming_ joined
[11:16] *** p6steve left
[11:16] *** MasterDuke left
[11:20] *** sena_kun joined
[11:21] *** Altai-man_ left
[11:25] *** titsuki joined
[11:25] *** andrzejku joined
[11:31] *** raschipi joined
[11:31] *** aborazmeh left
[11:31] <raschipi> .

[11:31] <tellable6> 2020-04-24T03:10:33Z #raku <guifa2> raschipi that the code is discarded at the moment is just because all pod renderers have chosen to do that :-) 

[11:32] *** elcaro joined
[11:37] *** Doc_Holliwood left
[11:44] *** stoned75 joined
[11:49] *** mowcat left
[11:49] *** p6steve joined
[11:50] *** xinming_ left
[11:50] *** xinming_ joined
[11:54] *** p6steve left
[12:10] *** Voldenet joined
[12:10] *** Voldenet left
[12:10] *** Voldenet joined
[12:11] *** molaf joined
[12:11] *** p6steve joined
[12:12] *** Doc_Holliwood joined
[12:15] *** xinming_ left
[12:15] *** patrickb joined
[12:16] *** xinming_ joined
[12:17] *** Maylay left
[12:33] *** kotrcka left
[12:35] *** MasterDuke joined
[12:45] *** Maylay joined
[12:47] *** raschipi left
[12:47] *** aborazmeh joined
[12:47] *** aborazmeh left
[12:47] *** aborazmeh joined
[12:50] *** raschipi joined
[12:52] *** Doc_Holliwood left
[12:56] *** xinming_ left
[12:57] *** stoned75 left
[12:59] *** xinming_ joined
[13:02] *** stoned75 joined
[13:04] *** rbt left
[13:05] *** rbt joined
[13:08] *** p6steve left
[13:19] *** Altai-man_ joined
[13:19] *** xinming_ left
[13:20] *** xinming_ joined
[13:22] *** sena_kun left
[13:23] *** Kaiepi left
[13:31] <Altreus> ahaha thanks raku for apparently being the only language that uses <> as delimiters

[13:31] <jnthn> C++ too

[13:31] <Altreus> surround.vim does not like it

[13:31] <jnthn> C#, Java, etc. :)

[13:31] <Altreus> It waits for me to complete the tag

[13:31] <jnthn> (For templates and generics respectively)

[13:31] <Altreus> I don't really want to surround the thing with <></>

[13:32] <raschipi> It appears your vi is trying too hard.

[13:32] <Altreus> indeed

[13:33] <Altreus> It's too hipster - the only thing that uses <> is HTML5

[13:33] <tadzik> hrm, tons of languages use <> :o

[13:33] <Altreus> :O

[13:34] <Altreus> I don't think many of them require you to replace {} with <> because you forgot what language it was

[13:34] <tadzik> pretty much everything with generics in it

[13:34] <tadzik> heh, in that context perhaps not

[13:35] <timotimo> Altreus:i think if you use > instead of < it will let you surround with just <>

[13:35] <timotimo> yes, indeed it will

[13:36] <timotimo> DYK that you can also use surround.vim to change (foo) to ( foo ) and vice versa?

[13:36] <timotimo> that's the diference you get when you ys( vs ys)

[13:37] <Altreus> yes that's the thing innit

[13:38] <timotimo> mh?

[13:38] <Altreus> I can't get with-space or without-space because one of them thinks it's HTML

[13:38] <timotimo> ah, that's how you meant it

[13:38] <Altreus> if I do cs{< it waits for HTML

[13:38] <Altreus> as it happens, cs{> does what I want

[13:38] <Altreus> hrm I thought it was the opposite

[13:38] <Altreus> Anyway there's no way to put <> with spaces :)

[13:39] <timotimo> try a

[13:39] *** vike left
[13:39] <timotimo> no, wrong one

[13:39] *** tejr left
[13:39] *** Kaiepi joined
[13:40] *** tejr joined
[13:40] <Altreus> it's OK, spaces are for millennials

[13:42] <timotimo> dangit. there is literally really no way?

[13:45] *** vike joined
[13:47] <timotimo> well, no built-in way. you can define custom surround mappings of course

[13:47] <[Coke]> m: dd << "this has spaces" >>

[13:47] <camelia> rakudo-moar fa3c0dba9: OUTPUT: «"this has spaces"␤»

[13:48] <[Coke]> hurm. not quite. :)

[14:03] *** Doc_Holliwood joined
[14:04] *** p6steve joined
[14:04] *** melezhik joined
[14:07] <AlexDaniel> greppable6: <<.*".*".*>>

[14:08] <greppable6> AlexDaniel, 316 lines, 20 modules: https://gist.github.com/2f00abc9b8533520715a749042d3993f

[14:08] *** p6steve left
[14:09] <AlexDaniel> greppable6: <<.*\$.*>>

[14:09] <greppable6> AlexDaniel, 116 lines, 56 modules: https://gist.github.com/f7c6f920b176f801e97481973f567933

[14:10] *** cognomin_ joined
[14:11] *** cognominal left
[14:16] *** |Sno| joined
[14:20] *** [Sno] left
[14:38] *** aborazmeh left
[14:44] *** p6steve joined
[15:11] *** molaf left
[15:18] *** natrys joined
[15:20] *** sena_kun joined
[15:21] *** Altai-man_ left
[15:37] *** stoned75 left
[15:39] *** stoned75 joined
[15:52] *** chloekek joined
[16:07] *** sjm_uk joined
[16:13] *** andrzejku left
[16:14] <p6steve> is there a new name for prove6?

[16:16] <guifa2> arg, & is probably going to be the most powerful of all of the conjunctions in Binex, but also annoyingly complex.

[16:17] *** Kaiepi left
[16:18] *** Kaiepi joined
[16:18] <timotimo> provaku?

[16:18] <timotimo> rakrove

[16:19] <p6steve> prover

[16:19] <timotimo> ProverK

[16:19] <[Coke]> I mean, prove seems like a fine name. :) I wouldn't be clever; if we feel we need a different name, maybe "verify" or "attest"

[16:19] <timotimo> proveRK

[16:19] <chloekek> pr6ve

[16:19] <timotimo> well, we'd probably be going away from a 6

[16:19] <timotimo> `evidence`

[16:20] <discord6> <tmtvl> Just have prove check whether to use Perl or Raku based on the use statement in the tests?

[16:20] <[Coke]> do we have to have a different name? 

[16:20] *** farcas1982regreg left
[16:20] <Altreus> doesn't prove just consume TAP?

[16:20] <timotimo> that's true, but it does also invoke your test programs and i think also discovers tests?

[16:20] <[Coke]> Altreus: there's logic in there about what tests to run and how to run them.

[16:20] <chloekek> tapestry

[16:21] <timotimo> can we get something bible-y in there to honor The Language Creator™?

[16:21] <timotimo> apocalypse seems slightly relevant; reveal whether the code is right or not

[16:21] <Altreus> tapocalypse?

[16:21] <p6steve> tempt

[16:21] <timotimo> omg

[16:22] <timotimo> what was the name of the guy with the revelations?

[16:22] <MasterDuke> john

[16:22] *** xinming_ left
[16:22] <Altreus> John Wick?

[16:22] <[Coke]> I would prefer NOT having something bibly, but that may just be me.

[16:22] <timotimo> isn't there already a johntheripper that's like a password bruteforcing tool?

[16:23] <discord6> <tmtvl> Yes.

[16:23] *** xinming_ joined
[16:23] <p6steve> rakup

[16:23] <MasterDuke> i assumed that's a play on the serial killer

[16:23] <timotimo> i believe so

[16:23] <discord6> <tmtvl> I mean, if we want to provide our own TAP runner and consumer we could just call it something like rakutest.

[16:24] <timotimo> jacktheripper exists too i believe?

[16:24] <MasterDuke> but johntherevealer would work

[16:24] <timotimo> i assume the relation is like between sup and notmuch

[16:24] <timotimo> > Notmuch is an answer to Sup. Sup is a very good email program written by William Morgan (and others) and is the direct inspiration for Notmuch.

[16:25] <MasterDuke> like less and more?

[16:25] <[Coke]> discord6: "rakutest" ++

[16:25] <timotimo> > alot, a curses frontend written in Python with the Urwid toolkit.

[16:25] <timotimo> > netviel, a single-page web app with Javascript frontend and Python backend.

[16:27] <timotimo> less, more, and don't forget most :)

[16:29] <MasterDuke> nano, pico

[16:29] <timotimo> cat, tac

[16:29] *** xinming_ left
[16:29] <timotimo> head, tail

[16:30] *** xinming_ joined
[16:30] *** abraxxa left
[16:30] <discord6> <tmtvl> A test runner wouldn't be too hard to implement, basically something like for t in */*.t; do raku -Ilib t; done, we could hash that out in a few minutes. ...and write tests for the tester.

[16:30] <discord6> <tmtvl> Who tests the tester? It tests itself.

[16:32] *** abraxxa joined
[16:32] *** raschipi left
[16:34] *** rindolf left
[16:36] *** patrickb left
[16:37] <p6steve> sub MAIN(:$name, :$auth, :$ver, *@, *%) { CompUnit::RepositoryRegistry.run-script("prove6", :$nam    e, :$auth, :$ver); }

[16:38] <p6steve> ^^^ this is the body of prove6

[16:40] *** Doc_Holliwood left
[16:43] *** West85 joined
[16:46] *** raschipi joined
[16:46] <West85> Hi folks. I'm having an issue with errors during configure on a raku star installation.

[16:47] *** abraxxa left
[16:47] <West85> is there a zstd library I'm supposed to have installed

[16:47] *** xinming_ left
[16:47] <West85> for heapsnapshot

[16:48] <p6steve> quit

[16:48] <p6steve> exit

[16:48] *** xinming_ joined
[16:48] <p6steve> 

[16:48] *** p6steve left
[16:50] <[Coke]> West85: can you put the errors on (e.g.) gist.github.com?

[16:51] <guifa2> re naming, attest would handle both the ideas of "prove" and the biblicliness simultaneously, but I think "prove" by itself works well

[16:53] *** cognominal joined
[16:54] <chloekek> hope

[16:55] *** natrys left
[16:56] <West85> https://gist.github.com/WesternStar/4e0bf6de3ec01b66310f02d27f8c4c1e

[16:57] *** cognomin_ left
[17:00] <timotimo> damn, it should be optional

[17:01] <timotimo> West85:can you also post the output of earlier pieces?

[17:01] <timotimo> i hope i didn't majorly goof up :(

[17:01] <West85> Sure

[17:03] <West85> I updated the gist

[17:04] *** natrys joined
[17:17] *** rindolf joined
[17:19] *** Altai-man_ joined
[17:19] *** abraxxa joined
[17:20] *** aborazmeh joined
[17:20] *** aborazmeh left
[17:20] *** aborazmeh joined
[17:21] *** sena_kun left
[17:29] *** sjm_uk left
[17:34] *** MasterDuke left
[17:35] *** patrickb joined
[17:37] *** melezhik left
[17:39] *** aborazmeh left
[17:47] <AlexDaniel> timotimo: provaku xD

[17:47] *** West85 left
[17:48] <chloekek> provo

[17:48] <AlexDaniel> reminds me if Pakku

[17:48] <AlexDaniel> https://github.com/hythm7/Pakku

[17:48] <AlexDaniel> of*

[17:49] <chloekek> Plankalkül

[17:52] *** mowcat joined
[18:06] *** titsuki left
[18:07] *** Doc_Holliwood joined
[18:23] *** kensanata joined
[18:24] *** ensamvarg_g6 left
[18:34] *** cognomin_ joined
[18:35] *** molaf joined
[18:38] *** cognominal left
[18:40] *** molaf left
[18:42] *** stoned75 left
[18:42] <guifa2> yay, & | && || are mostly working enough to move on to metachars

[18:47] *** stoned75 joined
[18:48] *** lembark joined
[18:49] <lembark> Q: Anyone I could talk to about tracking down a memory leak in Rakudo?

[18:49] <tellable6> 2019-12-25T16:48:43Z #raku <sena_kun> lembark hi! your FindBin module is failing tests for some reason, can you check it?

[18:49] <lembark> Sure.

[18:49] <lembark> Any idea which release of Rakduo (i.e., git id so I can test the right one).

[18:50] <lembark> Q: Is there any way to run 'zef acquire and test only'?

[18:52] *** aborazmeh joined
[18:52] *** aborazmeh left
[18:52] *** aborazmeh joined
[18:52] *** lichtkind_ left
[18:53] <lembark> Building whatever's on github now...

[18:55] <lembark>                                 ^~~~~~~~In file included from /usr/include/pwd.h:63,                 from /scratch/RAKU/smoke-rakudo.d/include/libuv/uv/unix.h:37,                 from /scratch/RAKU/smoke-rakudo.d/include/libuv/uv.h:66,                 from src/vm/moar/runner/main.c:4:/usr/include/bits/types/FILE.h:7:25: error: conflicting types for

[18:55] <lembark> ‘FILE’ typedef struct _IO_FILE FILE;                         ^~~~

[18:55] <lembark> Q: Anyone successfully built whatever's on github now?

[18:59] <timotimo> huh. perhaps you can try installing a newer libuv dev package and using --with-libuv or --has-libuv or whatever we called that flag

[19:04] <lembark>  # which libuvwhich: no libuv in (/opt/bin:/opt/sbin:/sbin:/usr/sbin:/bin:/usr/bin)

[19:04] <lembark> Odd... looking for libuv.

[19:04] <Grinnz> libuv would not be found in path, it's not a binary

[19:05] <lembark> *  dev-libs/libuv      Latest version available: 1.35.0      Latest version installed: 1.35.0      Size of files: 1225 KiB      Homepage:      https://github.com/libuv/libuv      Description:   Cross-platform asychronous I/O      License:       BSD BSD-2 ISC MIT

[19:05] <lembark> 1.35 seems to be the most recent one available on Gentoo.

[19:05] <lembark> Sorry, which was a bad choice. Lack of caffeine.

[19:06] <timotimo> OK, current moarvm master also has v1.35.0 included in it

[19:06] <lembark> Rebuilding w/o jvm; see if just moar works.

[19:06] *** xinming_ left
[19:07] *** xinming_ joined
[19:07] *** MasterDuke joined
[19:13] <lembark> Q: Is this significant from ./Configure?

[19:13] <lembark> ERROR: NQP_HOME is invalid: /root/project/rakudo-2020.02.1/install/bin/../share/nqp

[19:14] <lembark> Double-checked, NQP_HOME isn't set in the environment building rakduo.

[19:19] <lizmat> patrickb vrurg ^^ 

[19:20] *** sena_kun joined
[19:20] <patrickb> lembark: The error message is misleading. It doesn't refer to the environment variable but to the nqp home itself.

[19:21] <patrickb> lembark: Does that folder look like a legitimate nqp folder? Is it empty?

[19:22] *** Altai-man_ left
[19:24] *** lucasb joined
[19:25] <lembark> Full output from running Configure + make: https://pastebin.com/ngtEi3QW

[19:25] <lembark> I'm not running as su to build rakduo, no idea where it would have gotten reference to /root.

[19:26] *** wbn left
[19:26] <lembark> I run the installs as myself into /opt/rakudo (stable tag) or /scratch/RAKU/smoke-rakudo.d (nightly smoke test via zef).

[19:26] *** wbn joined
[19:26] *** xinming_ left
[19:26] *** aindilis` joined
[19:26] *** aindilis left
[19:26] *** aindilis` left
[19:27] <lembark> Q: Where is the NQP root dir derived? From the prefix (which is being fed as /opt/rakudo).

[19:28] *** xinming_ joined
[19:30] <lembark> Q: Where would these files get configured?

[19:30] *** stoned75 left
[19:30] <lembark>  $ find . -type f | xargs grep -l '/root/project/' 2>/dev/null./nqp/Makefile./nqp/nqp-m

[19:30] <patrickb> lembark: Was there an nqp executable preexisting in /opt/rakudo/bin/nqp ? If yes, do you happen to know where tha was from?

[19:31] <lembark> Anything in /opt/rakudo was build via "cd rakudo; ./Congure --preifx=/opt/rakudo ... " & make all test install" 

[19:32] *** stoned75 joined
[19:32] <lembark> See:  https://pastebin.com/X8XaZy01

[19:33] *** aindilis joined
[19:34] *** Black_Ribbon joined
[19:34] <lembark> Nightly smoke test snags head of master build builds with prefix of /scratch/RAKU/smoke-raku.d; code in opt is highest-numbered tag  with prefix = /opt/rakudo;

[19:34] <lembark> Q: How do I reset the /root/* paths (e.g. via config)?  

[19:35] *** raschipi left
[19:35] <lembark> There should be nothing referencing anything root or su-ish in anything I'm doing in /opt.

[19:36] <lembark> A: There is an nqp 

[19:36] <lembark> $ find /opt/rakudo/ -name 'nqp' -type f/opt/rakudo/2020.02.1/bin/nqp

[19:37] <lembark> So much for newlines "/opt/rakudo/2020.02.1/bin/nqp" is the path.

[19:38] *** xinming_ left
[19:38] *** xinming_ joined
[19:50] <lembark> Fresh clone of rakudo, fails with non-existing  /root/project/rakudo-2020.02.1/install/bin/../share/nqp

[19:50] <lembark> https://pastebin.com/xsK1CEsj

[19:50] *** West85 joined
[19:50] *** pilne joined
[19:51] *** kensanata left
[19:51] *** abraxxa left
[19:52] *** abraxxa joined
[19:52] <patrickb> lembark: Can you grep all relevant folders for `/root/project/rakudo-2020.02.1/install` to find out where that path comes from?

[19:52] *** Metaperl6 joined
[19:53] <lembark> There is no directory on the system /root/project.

[19:54] <lembark> Files containing /root/project are:

[19:54] <lembark> ./nqp/Makefile

[19:55] <lembark> ################################################################################ Included from /mnt/scratch/RAKU/rakudo/nqp/tools/templates/moar/Makefile.in ################################################################################M_NQP              = nqpM_NQP_M            = nqp-mM_BUILD_RUNNER     = nqp-mM_BUILD_RUNNER_BIN =

[19:55] <lembark> $(BASE_DIR)/$(M_BUILD_RUNNER)M_INST_NQP                      = inst-nqpM_INST_NQP_M            = inst-nqp-mNQP_LIB_DIR_MOAR                = $(NQP_LIB_DIR)# It's ok to shell quote this one as it only used in a command lineM_MOAR_INC_PATHS = \   \  -I'/root/project/rakudo-2020.02.1/install/include' \

[19:55] <lembark> -I'/root/project/rakudo-2020.02.1/install/include/moar' \  -I'/root/project/rakudo-2020.02.1/install/include/libatomic_ops' \  -I'/root/project/rakudo-2020.02.1/install/include/dyncall' \  -I'/root/project/rakudo-2020.02.1/install/include/moar' \  -I'/root/project/rakudo-2020.02.1/install/include/sha1' \

[19:55] <lembark> -I'/root/project/rakudo-2020.02.1/install/include/tinymt' \  -I'/root/project/rakudo-2020.02.1/install/include/libtommath' \  -I'/root/project/rakudo-2020.02.1/install/include/libuv'M_STAGE1_GEN_CAT = $(M_GEN_CAT) stage1M_STAGE2_GEN_CAT = $(M_GEN_CAT) stage2

[19:55] <patrickb> lembark: I just grepped though the repo on my side. That path is not part of the repo itself. So it has to have slipped in there somehow on your side.

[19:56] <lembark> https://pastebin.com/aUhVXKMF

[19:56] *** xinming_ left
[19:56] <lembark> (ins)lembark@dizzy rakudo $ set | grep '/root'(ins)lembark@dizzy rakudo $

[19:56] *** chloekek left
[19:56] <lembark> i.e., there is nothing with the string '/root' in my environment.

[19:56] <lembark> Q: Where is the nqp/Makefile generated?

[19:57] <patrickb> nqp/Configure.pl + files in nqp/tools/templates

[19:57] *** xinming_ joined
[19:58] *** finsternis joined
[19:59] *** Metaperl6 left
[19:59] <patrickb> nqp/tools/templates/moar/Makefile.in as @moar::prefix@ in that spot

[20:00] <patrickb> lembark: What's the contents of the config.status file in the nqp folder?

[20:01] *** maggotbrain joined
[20:02] <lembark> https://pastebin.com/QQUpdQHu

[20:03] *** stoned75 left
[20:04] <lembark> Could turn off '--silent-build' if that helps.

[20:05] *** cognominal joined
[20:08] *** stoned75 joined
[20:09] <lembark> Q: Is any of that remarkable?

[20:09] *** cognomin_ left
[20:09] <patrickb> lembark: Can you do a global grep for that path? It has to be in some file on your system. Knowing where it is might help in finding out how it ends up in the build.

[20:10] <patrickb> lembark: Do I assume correctly that the build continues as usual and ends up working? If yes, then this is a minor inconvenience. It's still now how it should be though.

[20:10] <lembark> Build fails with lack of "moar.h".

[20:11] <lembark> I'll start by grep-ing home & /scratch/RAKU.

[20:11] <lembark> Throw in /etc.

[20:15] <jdv79> what would be a good way to keep a "hyper map" fed?

[20:15] <lembark> https://pastebin.com/EshFQUgt

[20:16] <jdv79> it appears one can't just keep appending to the original array

[20:16] <lembark> jdv79: lazy gather.

[20:16] *** abraxxa left
[20:18] <lembark> https://pastebin.com/e464x0KQ

[20:18] <patrickb> lembark: None of those files particularly stand out. That's a really interesting problem you have there...

[20:18] <lembark> jdv79: @array is assigned from the lazy result of a gather; takes are run as needed to populate the array as it's fed through .map.

[20:19] *** abraxxa joined
[20:19] <lembark> i.e., my @stuff = lazy gather loop { ... };

[20:20] <lembark> @stuff.race( blah blah  ).map( { frobnicate $_ } );

[20:20] <jdv79> except that loop is the thing finding more values

[20:20] <jdv79> that wont work

[20:20] <lembark> loop has a take in it.

[20:20] <lembark> See pastebin.

[20:21] <lembark> I'm running a loop over 129GiB of input that way right now.

[20:21] <lembark> https://pastebin.com/e464x0KQ

[20:21] <lembark> is a working example of a lazy gather calling a sub to extract some content that is fed into the .map on demand.

[20:23] <jdv79> i get the idea.  thanks.

[20:23] <lembark> it shows up in a .precomp file. That might be a better place to start than grep-ing 1TiB of .iso archives in my photographic backups...

[20:24] <lembark> Q: Any idea what this is used for?

[20:24] <lembark>  $ clear; find /home/lembark/.zef/store/Backtrace-AsHTML-0.0.1.tar.gz/Backtrace-AsHTML-0.0.1/lib/home/lembark/.zef/store/Backtrace-AsHTML-0.0.1.tar.gz/Backtrace-AsHTML-0.0.1/lib/.precomp/88C68DB709242DDB6220EB476EA54C7A7A1F89AB/B3/B32F3D4673775772D550FA05CBCB6070D6120723

[20:25] <lembark> "Backtrace-AsHTML" has the string "/root/project" in it, which may just have come from the nqp install.

[20:32] *** rindolf left
[20:33] <lembark> Output from searching all of raku-land, my home for '/root/project': https://pastebin.com/0mxNQGTj

[20:38] <patrickb> lembark: Did you empty the /opt/rakudo/2020.02.1 folder prior to starting the build?

[20:38] <lembark> No. Possibly a holdover from Perl5, but I didn't want to blow off all the known modules.

[20:39] <lembark> Easy enough to do it however; takes a minute to stop the raku code I have running.

[20:39] *** stoned75 left
[20:39] *** stoned75 joined
[20:41] <lembark> Building now...

[20:43] <lembark> Removing the existing /opt/rakudo directory seemed to work.

[20:46] *** stoned75 left
[20:46] *** natrys left
[20:48] *** stoned75 joined
[20:48] *** aborazmeh left
[20:49] <lembark> At least the process is going a lot further.

[20:51] <lembark> Q: If I do a git checkout master or git checkout $some_tag + git clean -fdx + Configure --prefix=blah && make should I expect that rakudo + moar + nqp are fully rebuilt?

[20:52] <lembark> This matters because I use a single cloned repository for my nightly smoke test and also for installing into /opt/rakudo (i.e., local production copy).

[20:52] <lembark> It may be that I need separate locations to perform a full checkout each time.

[20:52] <lembark> make -wk is up to running rakudo tests now.

[20:53] <lembark> I don't find the string "/root/project" anywhere in rakudo.

[20:53] <patrickb> lembark: If you checkout rakudo and do not specify --gen-nqp and --gen-moar then rakudo will take what it finds in prefix.

[20:54] <patrickb> It's possible that it even uses the nqp it finds when using --gen-nqp, not sure though.

[20:54] <lembark> fixed="--prefix=$prefix --gen-nqp --gen-moar";back='moar';(    args="--backends=$back $fixed";    echo "Config args: '$fixed'";    cd $(dirname $0)/rakudo;    git status;

[20:55] <lembark> i.e., it's alwyas run with gen-nqp and gen-moar; I've assumed that ./Configure.pl does the Right Thing w/ respect to git submodule update, which may not be correct.

[20:55] <jdv79> i don't want to run it cause it blocks

[20:55] <jdv79> but why does

[20:55] <jdv79> my $c = Channel.new; $c.send($_) for 1,2; $c.list.hyper(:1batch, :1degree).map: {say $_}

[20:55] <jdv79> not see the second val?

[20:56] <jdv79> it just hits on the first and blocks forever

[20:56] <jdv79> sans the hyper() it sees both

[20:58] *** raschipi joined
[21:00] <lizmat> what if you increase the number of degrees ?

[21:00] <lembark> Hello Liz; hope you are wll.

[21:00] <jdv79> nah

[21:01] <jdv79> i guess i could build that-ish with gather/take/array/sleep/etc but it'll be messy

[21:01] <lembark> The list may need to be eager in order to process it properly via map.

[21:01] <lembark> that or explicitly lazy.

[21:01] <jdv79> the list out of a channel is a seq so its lazy

[21:01] <jdv79> afaik

[21:02] <lembark> Hack a lazy loop with take on the channel.

[21:02] <lembark> assign the lazy loop to an array.

[21:02] <lembark> Note that the array begins life empty in any case.

[21:02] <jdv79> yeah i guess i could hack around it but i think that example above should work

[21:02] <lembark> At that point iterating the array will keep hitting the lazy loop to extract values.

[21:03] <jdv79> according to my probably shifty understanding

[21:03] <lembark> Look back at the pastebin.

[21:03] <jdv79> i know what you're saying

[21:03] <jnthn> m: my $c = Channel.new; $c.send($_) for 1,2,3; $c.close; $c.list.hyper(:1batch, :1degree).map: {say $_}

[21:03] <camelia> rakudo-moar feb036719: OUTPUT: «1␤2␤3␤»

[21:03] <lembark> Your sub replaces read-cunk.

[21:03] <jdv79> ah, it needs some prodding

[21:03] <jdv79> weird

[21:03] <jdv79> thanks

[21:04] <jnthn> iirc, the end of the hyper chain controls the overall flow

[21:04] <lembark> The array works because the array really is just an iterative on-demand factory for return values.

[21:04] <lizmat> lembark: I'm fine, thank you

[21:04] <jnthn> So when we take a batch, that is also the point when we try to produce a new one

[21:04] <lizmat> lembark: looks like you're doing fine as well  :-)

[21:04] <lembark> Surviving.

[21:05] <jnthn> So it'll be waiting for some more values to batch; with the .close it'll know there's no more coming.

[21:10] <jdv79> cool.  seems to work better now.

[21:10] <jdv79> now just need to know when to call close() - think i can figure it.  thanks!

[21:11] <guifa2> arg.  I hate writing implementation specific code

[21:11] *** rbt left
[21:11] <lembark> Close or you have to make the process of accepting values lazy so that the next value is looked up on demand.

[21:11] <guifa2> but vrurg++ for finding the Backtrace difference :-) 

[21:11] *** rbt joined
[21:11] <jdv79> its something of a special purpose "api aggregator" so values come in as part of current results...

[21:12] <jdv79> its a bit roundabout but think i almost got it =

[21:12] <jdv79> rather, new array items may be birthed from processing previous array items

[21:13] *** mowcat left
[21:13] <MasterDuke> jnthn: any particular reason $.degree is an `Int` here instead of an `int` (like $.batch)? https://github.com/rakudo/rakudo/commit/e7293c51e1e05c71e92344a8fde6ab8f07ea0efd#diff-d32a6799dde281b7f28c59bb4bad0583R7

[21:14] *** CandiceSwan joined
[21:16] <El_Che> the great raku errors made me cranky about python white space in the stacktraces: https://twitter.com/nxadm/status/1253794141600985091?s=20

[21:17] *** CandiceSwan left
[21:18] *** patrickb left
[21:19] <jnthn> MasterDuke: Can't think of one. I wonder if the distinction was even deliberate, or just a missed hit of the shift key... :)

[21:19] *** Altai-man_ joined
[21:20] <lembark> jdv79: think of this this way, the array assigned a lazy list is really nothing but a single factory entry. each time you access the 'next' element from the array the factory (e.g., lazy loop) is called until there are no values returned.

[21:21] <lembark> Q: Anyone know of a decent way to trace a memory leak in rakudo or moar?

[21:21] <MasterDuke> jnthn: yeah, seemed like an accident

[21:21] <lembark> Running a long-ish (120GiB) list through lazy list + map; rssmax keeps growing even though everything I can see gets cleaned up.

[21:21] <MasterDuke> lembark: i've used heaptrack, but that works at the moarvm level. or you can try the heap snapshot profiler

[21:22] *** sena_kun left
[21:23] <MasterDuke> lembark: btw, if you use heaptrack, i recommend adding `--full_cleanup` to your rakudo command line

[21:26] <lembark> Q: what does '--full-cleanup' do (or try to)?

[21:27] <MasterDuke> it free memory when moar shuts down instead of just letting the os do it. heaptrack sees it as leaks

[21:29] <raschipi> El_Che: Python errors really are annoying, I also had to deal with them today. A full stacktrace to tell me there was a missing command line switch, took way too much time to parse it.

[21:29] <lembark> Sanity check:

[21:31] <lembark> @foobar = lazy gather loop { ... take $about_1_mib_of_text };

[21:31] <El_Che> raschipi: exactly

[21:31] <lembark> @foobar.race( ... ).map( { process $_; $_ = Nil } );

[21:32] <lembark> Should not leave we with any contents in @foobar.

[21:32] <lembark> I think?

[21:33] <lembark> Problem here is that react is way too slow; map with race is several orders faster; but I keep watching the process grow until it starts swapping on a box with 128GiB of core.

[21:37] *** Xliff joined
[21:43] <Geth> ¦ ecosystem: 5725a6c88a | thundergnat++ (committed using GitHub Web editor) | META.list

[21:43] <Geth> ¦ ecosystem: Add String-Rotate to the ecosystem

[21:43] <Geth> ¦ ecosystem: 

[21:43] <Geth> ¦ ecosystem: It's rotate; but for strings instead of arrays.

[21:43] <Geth> ¦ ecosystem: See https://github.com/thundergnat/String-Rotate

[21:43] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/5725a6c88a

[21:43] <guifa2> So LTM....

[21:45] <guifa2> is it supposed to be longest by string length, or largest number of tokens matched (so that <longtoken> ** 2 would lose out to <shorttoken> ** 4) ?

[21:45] <Geth> ¦ ecosystem: 46654fb508 | thundergnat++ (committed using GitHub Web editor) | META.list

[21:45] <Geth> ¦ ecosystem: Add Base::Any to the ecosystem

[21:45] <Geth> ¦ ecosystem: 

[21:45] <Geth> ¦ ecosystem: Convert numbers to and from nearly any integer base

[21:45] <Geth> ¦ ecosystem: See https://github.com/thundergnat/Base-Any

[21:45] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/46654fb508

[21:49] *** cpan-raku left
[21:51] *** cpan-raku joined
[21:51] *** cpan-raku left
[21:51] *** cpan-raku joined
[21:55] *** abraxxa left
[22:10] *** rbt left
[22:11] *** rbt joined
[22:25] * guifa2 fist pumps the air

[22:25] <guifa2> use Binex; my $bx = bx '[b...._...1 b...._...0]+ x00'; my $blob = blob8.new(1,4,9,6,3,8,0,3,2); $blob ~~ $bx; say $/.Blob

[22:25] <guifa2> # Blob[uint8]:0x<01 04 09 06 03 08 00>

[22:27] *** West85 left
[22:35] <jnthn> lembark: my @foo = ... is assigning every value into @foo ('cus storage is what an array is for); the lazy only means it is populated on demand, but the data is retained.

[22:36] <jnthn> lembark: If you want to build a lazy pipeline, stick it into a sigilless var, e.g. `my \foo = ...`

[22:39] <Xliff> jnthn: Could you please look into https://github.com/MoarVM/MoarVM/issues/1275 and share your thoughts when you have the time

[22:39] <Xliff> ?>

[22:49] <lembark> Q: How would the statement [email@hidden.address] ... ).map( { frobnicate $_; $_ = Nil } );" ever update @foo?

[22:50] <lembark> @foo used to iterate the contents of $_, but after that the map output is not assigned to anything.

[22:50] <lembark> In any case [badly worded question], $_ = Nil should keep contents of @foo empty.

[22:51] <lembark> Q: Why would @foo be growing if the contents of $_ are Nil-ified at use?

[22:59] *** xinming_ left
[22:59] <jnthn> An array full of Nils still takes up space for element

[22:59] <jnthn> *per element

[23:00] *** xinming_ joined
[23:02] <lembark> Sanity check: Nill != ().  Q: Is there any equivalent to 'pushing nothing' a'la map { () } in Perl5?

[23:03] <guifa2> yes.  Empty

[23:03] <guifa2> iirc

[23:03] <jnthn> Yes, but you're not actually pushing to the array

[23:04] <guifa2> m: my @a = 1,2,3; @a.push: Empty; say @a;

[23:04] <camelia> rakudo-moar feb036719: OUTPUT: «[1 2 3]␤»

[23:04] <jnthn> The problem is that you have an array in the first place

[23:04] <lembark> The non-sigil is effectively a constant?

[23:04] <jnthn> array = storage; if you don't want stuff to hang around in memory, don't funnel it via an array

[23:04] <jnthn> lembark: Yes

[23:04] <jnthn> Well, not quite a constant

[23:04] <jnthn> It's just an alias

[23:05] <lembark> Reference to anonymous?

[23:05] <jnthn> It doesn't imply any kind of context

[23:05] <lembark> the anon factory returned by lazy.

[23:06] <jnthn> One of the commonly understood things is that `my @foo = <stuff>` is just making @foo reference <stuff>, but it's not. It's allocating an array and then iterating stuff in order to populate it. `lazy` only defers that population until the first time an element is accessed.

[23:06] <jnthn> Yes; gather returns a Seq, which is something that can be iterated; my \foo = lazy gather { ... } just stores the iterable thing.

[23:08] <lembark> Thank you.

[23:09] <lembark> Which leaves me with syntax \foo = lazy ... ; foo.race(...).map: { ... } ;  I think?

[23:09] <lembark> Or is it \foo.race...?

[23:11] <jnthn> No, you only put the \ when declaring

[23:11] <jnthn> It's because `my foo` would think foo is a typename

[23:13] *** aborazmeh joined
[23:13] *** aborazmeh left
[23:13] *** aborazmeh joined
[23:17] <lembark>   chunked-input  .race( degree => THREADS, batch => 1 )  .map( { sink process-chunk $_;  Empty } )  ;

[23:17] <lembark> with \chunked-input = lazy ... ;

[23:18] <jnthn> You don't need the Empty really

[23:18] <lembark> Grasping at straws with the growth.

[23:19] <lembark> Finally got rakudo re-installed and modules rebuilt... using the \chunked-input = lazy part didn't change the rate of memory growth.

[23:20] <lembark> At least not appreciably -- apparently storing Nil's doesn't use much space.

[23:20] *** sena_kun joined
[23:20] <lembark> Does improve the speed, however, thank you.

[23:21] *** Altai-man_ left
[23:22] <guifa2> weekly: https://github.com/alabamenhu/BinexObjex

[23:22] <notable6> guifa2, Noted! (weekly)

[23:22] <guifa2> Still needs captures to really be useful, but hey, gotta start somewhere

[23:32] <lembark> Neat idea.

[23:33] *** molaf joined
[23:48] *** Xliff left
[23:53] *** xinming_ left
[23:54] *** xinming_ joined
