[00:27] *** Noisytoot left
[00:30] *** Noisytoot joined
[01:10] *** approaching236 left
[01:10] *** vgrato_ joined
[01:34] *** zakame joined
[01:59] *** molaf left
[02:12] *** molaf joined
[02:15] *** marcusr left
[02:16] *** marcusr joined
[02:41] *** mahafyi joined
[03:19] <mahafyi> With respect to building rakudo star from latest src, a small suggestion for an addition in https://rakudo.org/star/source : Build instructions can include the README.md instructions so 'cd <to pwd>' ; git init ; ./bin/rstar install' . 

[03:30] *** fooist left
[04:30] *** sourceable6 left
[04:30] *** statisfiable6 left
[04:30] *** coverable6 left
[04:30] *** releasable6 left
[04:30] *** unicodable6 left
[04:30] *** linkable6 left
[04:30] *** quotable6 left
[04:30] *** shareable6 left
[04:30] *** tellable6 left
[04:30] *** greppable6 left
[04:30] *** reportable6 left
[04:30] *** bloatable6 left
[04:30] *** committable6 left
[04:30] *** notable6 left
[04:30] *** evalable6 left
[04:30] *** nativecallable6 left
[04:30] *** bisectable6 left
[04:30] *** squashable6 left
[04:30] *** benchable6 left
[04:30] *** notable6 joined
[04:30] *** reportable6 joined
[04:31] *** nativecallable6 joined
[04:31] *** squashable6 joined
[04:32] *** tellable6 joined
[04:32] *** benchable6 joined
[04:32] *** coverable6 joined
[04:32] *** linkable6 joined
[04:32] *** quotable6 joined
[04:32] *** bloatable6 joined
[04:32] *** sourceable6 joined
[04:32] *** unicodable6 joined
[04:32] *** committable6 joined
[04:32] *** shareable6 joined
[04:32] *** releasable6 joined
[04:33] *** statisfiable6 joined
[04:33] *** greppable6 joined
[04:33] *** bisectable6 joined
[04:33] *** evalable6 joined
[05:14] *** molaf left
[05:27] *** aborazmeh left
[05:27] *** zacts joined
[05:33] *** bocaneri joined
[05:37] *** mahafyi left
[05:40] *** andrzejku joined
[05:41] *** andrzejku left
[05:45] *** squashable6 left
[05:46] <SmokeMachine> guifa: cool module (Test::Inline) it reminds me of https://github.com/FCO/Test-Fuzz (different intent, but using modules as “test files”)

[05:48] *** squashable6 joined
[06:03] *** hungryd19 left
[06:04] *** domidumont joined
[06:27] *** billN1VUX left
[06:31] *** zacts left
[06:31] *** domidumont left
[06:33] *** billN1VUX joined
[06:51] *** domidumont joined
[06:54] *** aluaces joined
[06:58] *** mahafyi joined
[07:01] *** finanalyst joined
[07:05] *** dolmen joined
[07:13] *** MasterDuke joined
[07:32] *** pecastro joined
[07:33] *** tejr left
[07:40] *** tejr joined
[07:46] *** Sgeo left
[07:54] *** Altai-man joined
[08:00] *** hungrydonkey joined
[08:04] *** mahafyi left
[08:22] <El_Che> ok, I'll relqse linux packages today

[08:22] <El_Che> let's see if everything builds ok

[08:22] <El_Che> Altai-man and everyone: thx for the releaase

[08:23] <Altai-man> El_Che, hi! There were some issues, ahem, but 2020.08.2 point is the sane one.

[08:23] <Altai-man> I am not sure about building previous ones.

[08:23] <Altai-man> Do we package broken releases or skip them?

[08:23] <El_Che> ah, good coicidence I reappeared after the latest dot release then

[08:23] <Altai-man> Yes.

[08:24] <El_Che> I skip them if I know they are broken

[08:24] <Altai-man> Roger. So go straight for 2020.08.2 then.

[08:24] <timotimo> an annoyance i just stumbled upon is that i read 52 bits from a 64 bit big buffer, and i got back a signed integer

[08:24] <El_Che> I leave them in the repos if already packaged because they are updates by the system on the user's machine

[08:25] *** rir_ joined
[08:25] *** rir left
[08:25] <El_Che> Altai-man: I'll check, but did everything get a dot release or only rakudo?

[08:26] <Altai-man> El_Che, Moar is 2020.08, no points, nqp and rakudo are at 2020.08.2

[08:26] <El_Che> thx

[08:31] *** hungryd79 joined
[08:31] <MasterDuke> timotimo: that's what i'd expect right now. rakudo/moarvm support for unsigned stuff is still a bit lacking, so i assume everything is signed

[08:32] *** hungrydonkey left
[08:33] <MasterDuke> i had a moarvm branch that added a bunch of *_u versions of a lot of ops, but i either ran out of steam or hit a sticking point, because i don't think i ever submitted a pr

[08:43] *** mahafyi joined
[08:46] *** dotdotdot joined
[08:51] <timotimo> hm, so reading n bits where n < 64 you'll get sign-extension

[08:51] <timotimo> i guess that's fair

[08:55] *** aluaces left
[09:03] <timotimo> i'm definitely too dumb to take apart a num after writing it to a buf and then mathematically putting it back together

[09:13] <MasterDuke> https://github.com/dankogai/p6-num-hexfloat might have something to steal

[09:13] *** hungryd79 left
[09:13] *** hungrydonkey joined
[09:22] <timotimo> i wanted to double-check the num from the recent moarvm issue on github by using Rat arithmetic

[09:30] <MasterDuke> https://github.com/MoarVM/MoarVM/issues/1289 ?

[09:34] *** aluaces joined
[09:34] <timotimo> exactly

[09:35] *** ufobat joined
[09:36] <MasterDuke> there's got to be some online tool for that

[09:50] <timotimo> for sure

[10:05] *** vgrato_ left
[10:15] *** mniip joined
[11:00] *** dolmen left
[11:07] *** gnufr33dom joined
[11:15] <finanalyst> HI. I just noticed that there is no reference on the raku.org home page of the license. There is a reference to Artistic 2.0 on docs.raku.org, so I assume its the same for Raku.

[11:38] *** aborazmeh joined
[11:38] *** aborazmeh left
[11:38] *** aborazmeh joined
[11:39] <lizmat> finanalyst: could you make an issue for that at https://github.com/raku/raku.org ?

[11:41] *** domidumont left
[11:42] *** domidumont joined
[11:43] * lizmat clickbaits https://rakudoweekly.blog/2020/08/31/2020-35-election-candidacies/

[11:43] <finanalyst> lizmat: done. I have to go out now, so can't do a PR. It should be a simple fix

[11:46] *** sena_kun joined
[11:46] *** Xliff left
[11:48] *** Altai-man left
[12:00] *** molaf joined
[12:15] *** mniip left
[12:17] *** mniip joined
[12:20] *** kent\n left
[12:23] *** domidumont left
[12:24] *** kent\n joined
[12:25] *** domidumont joined
[12:33] *** molaf left
[12:45] *** squashable6 left
[12:46] *** KotH left
[12:47] *** KotH joined
[12:48] *** squashable6 joined
[12:49] *** finanalyst left
[12:54] *** aluaces left
[12:55] *** mahafyi left
[13:09] *** john_parr_ joined
[13:09] *** john_parr_ is now known as st_elmo

[13:09] *** st_elmo left
[13:09] *** __jrjsmrtn__ joined
[13:09] *** _jrjsmrtn left
[13:12] <[Coke]> lizmat: Want me to come up with a template for the voting that is supposed to start in 5 days?

[13:12] <tellable6> [Coke], I'll pass your message to lizmat

[13:15] <[Coke]> lizmat: It says "vote 1 to 5" but doesn't say what a winning vote looks like.

[13:15] <tellable6> [Coke], I'll pass your message to lizmat

[13:16] <[Coke]> lizmat: is it "the top X vote recipients" (if so, what's X?)

[13:16] <tellable6> [Coke], I'll pass your message to lizmat

[13:18] *** lizmat joined
[13:36] <[Coke]> lizmat: opened https://github.com/Raku/Raku-Steering-Council/issues/23

[13:36] *** aluaces joined
[13:36] <[Coke]> anyone else knows the answer or has a comment, please chime in there.

[13:48] *** finsternis left
[13:59] <[Coke]> vrurg++

[14:03] <[Coke]> AlexDaniel`: can you add your employer to the RSC nomination doc?

[14:03] *** maggotbrain left
[14:03] <AlexDaniel`> sure

[14:03] <AlexDaniel`> I'm going to change the nomination a bit anyway

[14:04] <[Coke]> jnthn: can you add your employer to the RSC nomination doc?

[14:04] <tellable6> [Coke], I'll pass your message to jnthn

[14:04] <[Coke]> lizmat: can you add your employer (self, I assume) to the RSC nomination doc?

[14:04] *** maggotbrain joined
[14:04] <[Coke]> nine: can you add your employer to the RSC nomination doc?

[14:05] <[Coke]> tony-o, ugexe: can you add ugexe's employer to the RSC nomination doc?

[14:05] <[Coke]> .ask ugexe do you accept tony-o's nomination, btw? 

[14:05] <tellable6> [Coke], I'll pass your message to ugexe

[14:06] <[Coke]> if anyone knows how to reach the others who have nominations, please do so and have them update the pages.

[14:07] <[Coke]> (JJ already had his)

[14:07] *** aluaces left
[14:08] <AlexDaniel`> [Coke]: is this good enough?

[14:09] <AlexDaniel`> ah, it's not markdown

[14:09] <AlexDaniel`> OK I'll fix it up and change it later

[14:10] <[Coke]> (everyone) assuming you're OK sharing it publicly. vrurg points out that maybe it's not public info. (but it may impact voting results)

[14:10] *** finsternis joined
[14:12] *** mowcat joined
[14:12] <lizmat> I'd leave it up to the candidates themselves whether they want to include their employer or not

[14:12] <tellable6> 2020-09-01T13:12:24Z #raku <[Coke]> lizmat: Want me to come up with a template for the voting that is supposed to start in 5 days?

[14:12] <tellable6> 2020-09-01T13:15:30Z #raku <[Coke]> lizmat: It says "vote 1 to 5" but doesn't say what a winning vote looks like.

[14:12] <tellable6> 2020-09-01T13:16:37Z #raku <[Coke]> lizmat: is it "the top X vote recipients" (if so, what's X?)

[14:13] <[Coke]> lizmat: ok, but if we are supposed to reject candidates based on employer, I don't see how it can be optional.

[14:13] <lizmat> I don't think, at this stage, can reject anybody based on emplyer

[14:13] <[Coke]> based on my reading of https://github.com/Raku/Raku-Steering-Council/blob/main/papers/Raku_Steering_Council_Code.md#conflicts-of-interest

[14:14] <[Coke]> Then let's add something that it's not relevant to the initial round of voting?

[14:14] <lizmat> well, I *do* find it relevant

[14:15] <codesections>  [Coke]: Couldn't candidates state that they do not share an employer with other candidates without disclosing their employer (if that's what they prefer?)

[14:15] <lizmat> but I also deem it an honour question at this stage

[14:15] <lizmat> that would work for me

[14:15] <[Coke]> lizmat: the rules say people get disqualified. Are you saying that they will not get disqualified at this poitn?

[14:16] <[Coke]> Also: there's no guarantee for many employers that you know someone also works at your company.

[14:16] <lizmat> hmmm...  perhaps stating that they're not employed by anybody else of the candidates would work best

[14:16] <AlexDaniel`> [Coke]: yeah, the process is a little bit of a hodgepodge :S Thanks for trying to bring clarity to it!

[14:16] <lizmat> and *if* that work for the same employer, state which people they share employers with

[14:16] <lizmat> *they

[14:17] <[Coke]> ok. I'll just release the votes "as is" and let the RSC sort it out once votes are tallied.

[14:17] <[Coke]> but -1 from me on having that language in the rules and then not really enforcing it.

[14:17] <codesections> [Coke]: It's *theoretically* true that two people could work for the same employer, both not feel comfortable revealing their employer, and *neither* know that the other works there.  But that's a *lot* of things that have to go wrong

[14:18] <codesections> I still think that, so long as every candidate reveals their employer or avows that they don't share an employer, then you *are* enforcing it

[14:18] <AlexDaniel`> yeah, absolutely weird to have a protection for getting a council that is too biased, and then to let the council itself to figure it out

[14:18] <lizmat> codesections: indeed, and reversely, to give an example:

[14:18] <El_Che> the idea is to prevent a takeover by a single company?

[14:19] <lizmat> I am employed by WenZPerl BV in the NL, but I could be doing work for Edument

[14:19] <lizmat> technically, not the same employer

[14:20] <lizmat> still, I could have significant interest in lining up with opinions of Edument employees on the council, or lose the work

[14:20] *** MasterDuke left
[14:20] *** finanalyst joined
[14:20] <AlexDaniel`> correct! And I feel like this is what that section is supposed to prevent

[14:21] <lizmat> indeed

[14:21] <[Coke]> the text in the document only mentions employer, not contract work. If you're also concerned about that, I think that would require more language

[14:21] <lizmat> indeed...  

[14:21] <lizmat> and I think that is something for the first voted RSC to figure out

[14:21] <[Coke]> but I'm fine. I'll just report the results "as is"

[14:21] <lizmat> ++[Coke] 

[14:22] <lizmat> in the end it is all about trust of the community in the functioning of the RSC

[14:23] <lizmat> if there is no trust, there is no way that enforcing any rules will be able to fix that

[14:23] <[Coke]> My take: don't have rules if you

[14:23] <[Coke]> 're not going to follow them.

[14:23] <[Coke]> s/follow/enforce/, I mean.

[14:25] <lizmat> well, probably, but let's just work with what we have now, and let the RSC adjust the rules with a mandate from the community

[14:25] <[Coke]> jnthn, ugexe, tony-o, ugexe: please feel free to consider your employer private information. I think it will not be required for the voting process.

[14:26] <lizmat> or state the candidates that you share an employer with, without needing to mention the employer

[14:27] <lizmat> [Coke]: to give another example

[14:27] <lizmat> in 2000, Wendy was a member of a Dutch foundation for Internet providers

[14:27] <codesections> [Coke]++ that said, for anyone who does _not_ consider their employer to be private info, listing it could be helpful because it would allow others to know whether they share an employer with you without realizing it

[14:27] <lizmat> she could be that, because she worked for a company that was a member of that foundation

[14:28] <lizmat> then we both were fired from that company

[14:28] *** rindolf joined
[14:28] <lizmat> the people of the foundation wanted her on the board so badly that they offered her a token job at their companies, just so she could stay on the board

[14:28] <lizmat> she luckily declined

[14:29] <lizmat> neither the company nor the foundation survived the next year

[14:34] <lizmat> afk&

[14:37] *** aborazmeh left
[14:38] *** Sgeo joined
[14:47] *** skyl4rk left
[14:49] <El_Che> hi liz

[14:52] *** gnufr33dom left
[14:55] <nine> [Coke]: done

[14:55] <guifa> SmokeMachine: Nice.  I hadn’t seen that one.  It could be interesting to see how well the two combine

[15:02] * [Coke] adds https://github.com/Raku/Raku-Steering-Council/blob/main/nominations/2020/voting-form.md

[15:02] <[Coke]> nine++

[15:03] <[Coke]> Please feel free to add any new people that show up before voting starts. I won't hold people directly to the form, but it'll definitely make it easier for me to process votes.

[15:03] <[Coke]> Also: we only have nicks for 2 people. Won't impact vote tallying, but not sure if we need "real"/"legal" names.

[15:16] *** skyl4rk joined
[15:20] *** eseyman left
[15:32] *** MasterDuke joined
[15:34] *** approaching236 joined
[15:37] <tbrowder> ok, i'm confused: 5 or 7 on the council? how many to vote for?

[15:40] <El_Che> Altai-man AlexDaniel`: I am getting test fails about the profiler: https://gist.github.com/nxadm/1635b36be8946c9230508aa5314baa47

[15:41] <codesections> tbrowder: you vote for 5.  7 go on the council.  Voting doesn't start until next week and candidates still have time to sign up

[15:41] <[Coke]> tbrowder: you get 5 votes. there are 7 winners

[15:41] <guifa> &a cmp &b # <— what should determine More Less Same?

[15:42] <guifa> (speaking hypothetically, since right now that will always return Same and produce a warning)

[15:43] <tbrowder> ok, thnx. i saw the convo where the tpc voting method was being confused with ours and that confused me. how about adding info that to the ballot for fuzzy thinkers like me :-D

[15:43] <[Coke]> guifa: that doesn't return same to me.

[15:44] <[Coke]> m: sub a { ... }; sub b { ... }; dd &a cmp &b;

[15:44] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Sub object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Order::Less␤»

[15:44] <guifa> Coke: hmm 

[15:44] <Geth> ¦ doc: codesections++ created pull request #3608: Add xt/check-signatures

[15:44] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3608

[15:45] <guifa> I was testing with regex and they return Same always

[15:45] *** Altai-man joined
[15:45] <Altai-man> El_Che, hmm, our CI thinks it's fine.

[15:46] <guifa> m: my &a = { $^b + 1}; my &b = { 'a' }; dd &a cmp &b

[15:46] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Block object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Block object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Order::Same␤»

[15:46] <El_Che> I had 2 so far

[15:46] <El_Che> restarted them

[15:46] <El_Che> is the test time based?

[15:46] <Altai-man> El_Che, can you log into an environment where it happens and try to manually invoke something with --profile?

[15:46] <codesections> guifa: that's because regex all coerce to the empty string

[15:46] <codesections> which isn't great

[15:46] <El_Che> no, it's travis

[15:46] <El_Che> the container is gone

[15:47] <codesections> m: say /a/.Str eq ''

[15:47] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Regex object coerced to string (please use .gist or .raku to do that)␤True␤  in block <unit> at <tmp> line 1␤»

[15:47] <Altai-man> It is not a dockerfile-driven?

[15:47] <guifa> ahaaaaa I found it

[15:47] <Altai-man> El_Che, travis allows you to log for debugging, by the way

[15:47] <Altai-man> s/log/log in/

[15:47] <guifa> subs will stringify to their names

[15:48] <El_Che> Altai-man: it is

[15:48] <guifa> regularly blocks stringify to empty strings like regex

[15:48] *** sena_kun left
[15:48] <guifa> I think

[15:48] <Altai-man> El_Che, I know it would take time and probably not the most interesting thing in the world, but I don't think there is a neat way to see why it fails otherwise.

[15:49] <Altai-man> And I don't think it is time based. :(

[15:49] <guifa> Yup, that’s it

[15:50] <guifa> m: sub a { … }; sub b { … }; my &c = { … }; my &d = { … }; say [~] &a, &b, &c, &c, ‘*’ 

[15:50] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤ab*␤  in block <unit> at <tmp> line 1␤Sub object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Block object coerced to string (p…»

[15:50] <El_Che> Altai-man: this one failed twice in a row: https://travis-ci.org/github/nxadm/rakudo-pkg/jobs/723130833 (just restarting it again, so it's live)

[15:50] <El_Che> got to be a little afk

[15:51] <codesections> m:  my regex Foo { a }; say &Foo.Str

[15:51] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Regex object coerced to string (please use .gist or .raku to do that)␤Foo␤  in block <unit> at <tmp> line 1␤»

[15:51] <codesections> guifa: ^^^ looks like Regex stringify to their names too

[15:51] <codesections> They're just usually not named

[15:51] <guifa> yeah.  Hmm

[15:52] <guifa> I wondered if labeled blocks stringify to their label

[15:52] <codesections> (yay consistency, I guess)

[15:53] <Geth> ¦ doc: a4f343a9a2 | (Daniel Sockwell)++ (committed by Juan Julián Merelo Guervós) | xt/check-signatures.t

[15:53] <Geth> ¦ doc: Add xt/check-signatures

[15:53] <Geth> ¦ doc: 

[15:53] <Geth> ¦ doc: This commit adds a new xtest, check-signatures.t.  Here is the

[15:53] <Geth> ¦ doc: description of the test from it's documentation:

[15:53] <Geth> ¦ doc: 

[15:53] <Geth> ¦ doc: > For each method documented in a .pod6 file in doc/doc/Type/, this

[15:53] <Geth> ¦ doc: > test compares the documented signature against the signature in the

[15:53] <Geth> ¦ doc: <…commit message has 24 more lines…>

[15:53] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a4f343a9a2

[15:57] <guifa> Okay, so we stringify using the name of a Code object, or empty string if there’s not one.  Why produce the warning then?  Is it just for people who think doing “The result of sub a is &a” will run it?

[15:58] <codesections> I think it's because we want to guide people towards .gist and .raku, right?

[15:59] <guifa> …which leads to the question of why?  .gist and .Str produce the same output lol.

[16:00] <guifa> Right now I’m thinking the best solution for https://github.com/rakudo/rakudo/issues/3885

[16:01] <guifa> And basically, I think the two best solutions are either (a) add a few more multis so that Code types use .gist instead of .Str, or (b) just get rid of the warning altogether for Code.Str

[16:02] <codesections> Yeah, but it's a code clarity/intent sort of thing.  `.gist` signals the reader "I want a human-readable representation of this thing" whereas `.Str` signals the reader "I want to convert this to a Str value"

[16:03] <guifa> FWIW, the only two things that produce warnings on stringifying is Code and Nil

[16:04] <guifa> Threads feel roughly on the same level as Code, but they don’t produce an error

[16:04] *** cpan-raku left
[16:04] <guifa> ForeignCode doesn’t either, per the docs (though I’ve not tested it)

[16:04] *** cpan-raku joined
[16:04] *** cpan-raku left
[16:04] *** cpan-raku joined
[16:04] <Altai-man> El_Che, raised https://github.com/rakudo/rakudo/issues/3824#issuecomment-684962540 again, need more details of why it doesn't work in this particular env, will see how it goes.

[16:04] <codesections> m: sub greet { 'Hey '}; say &greet ~ 'Bob'  

[16:04] <camelia> rakudo-moar 09e4f2333: OUTPUT: «Sub object coerced to string (please use .gist or .raku to do that)␤greetBob␤  in block <unit> at <tmp> line 1␤»

[16:05] <codesections> ^^ that feels like something that should produce a warning

[16:05] <guifa> Fair

[16:05] <guifa> I could definitely see a beginner using that

[16:06] <El_Che> Altai-man: I can try to recreate (where do I add the profile? at test time?). So far i think about 30% fails

[16:07] <Altai-man> El_Che, if it's broken on some env the same way it was until we "fix" it, mere `raku --profile -e 'say "foo"'` would trigger error.

[16:07] <codesections> guifa: I haven't looked into 3885, but could it be as simple as wrapping a few things in `quietly` blocks?

[16:09] <guifa> That would work, but I think getting a general solution is better: everything else can pass through cmp without a warning (although they might get a weird ordering)

[16:09] *** veesh left
[16:09] <El_Che> (going to prepare food, bbl)

[16:09] <codesections> No, I meant as a fix: putting the relevant parts of cmp inside quietly blocks

[16:09] <codesections> (instead of using a different multi with .gist)

[16:10] *** veesh joined
[16:11] <guifa> That just feels sort of….bandaid-y 

[16:11] <codesections> Fair :)

[16:14] *** finanalyst left
[16:15] *** finanalyst joined
[16:17] *** finanalyst_ joined
[16:18] <guifa> Final question, I suppose, is where to ptu it.  in core.c/Order.pm6 or core.c/Code.pm6

[16:18] <guifa> lizmat: vrurg: y’all have most of the commits in Order.pm6, thoughts?

[16:23] <lizmat> guifa: I guess in Order, as Code doesn't know about Order yet, looking at tools/templates/6.c/core_sources

[16:23] *** mowcat left
[16:24] <codesections> Is there such a thing as an `Any:D`?  

[16:24] <codesections> Or is Any inherently :U ?

[16:25] <guifa> Sure.  Anything defined is also Any:D 

[16:25] * guifa . o O ( unless it’s direct subclass of Mu, I suppose )

[16:26] <guifa> But Any:D === :D

[16:26] <codesections> guifa: it *matches* Any:D, but it isn't Any:D, is it?

[16:26] *** aluaces joined
[16:26] <guifa> I mean

[16:27] <codesections> Like, there's nothing where .WHAT returns Any and .defined returns True ?

[16:27] <guifa> m: my $a = Any.new; say $a.WHAT; say $a.defined

[16:27] <camelia> rakudo-moar 09e4f2333: OUTPUT: «(Any)␤True␤»

[16:27] <guifa> Not really sure what you’d use it for though lol

[16:27] <codesections> Aha, interesting!

[16:28] <codesections> Not a thing in the world!  Just ran into a type signature and got curious

[16:29] <codesections> m: say Any.^lookup('prepend').candidates.map(*.signature)[0] 

[16:29] <camelia> rakudo-moar 09e4f2333: OUTPUT: «(Any:U \SELF: |values)␤»

[16:29] <codesections> (that type signature, in fact)

[16:31] <SmokeMachine> guifa: yes, that would be interesting

[16:46] *** ufobat_ joined
[16:48] *** aluaces left
[16:49] *** ufobat left
[16:54] <guifa> okay weird, when I tried using .name … it ended up producing the same output as .raku instead of .name normally

[17:06] *** eseyman joined
[17:14] *** dotdotdot left
[17:14] *** aluaces joined
[17:15] *** billN1VUX left
[17:16] <tbrowder> ref upcoming vote: does voting for more than five invalidate the ballot? i assume so. if true, that needs to be highlighted near the top of the ballot.

[17:17] <tbrowder> i would also put the note about the actual number being seated near the top.

[17:19] <tony-o> [Coke]: i talked to ugexe before i nominated him.  i'll ask him about his employer

[17:19] <tony-o> (i know who it is, just want to make sure he's fine with it)

[17:27] *** jmerelo joined
[17:27] <jmerelo> Hey

[17:27] *** hungrydonkey left
[17:27] <codesections> o/

[17:27] *** hungrydonkey joined
[17:28] <tbrowder> \o

[17:29] <tbrowder> i

[17:30] <tbrowder> i'm looking for a good, non-wordpress blogging platform that permits editing after the original post. suggestions?

[17:31] <codesections> Do you want a dynamic site rather than one built by a static site generator? 

[17:43] *** molaf joined
[17:44] *** finanalyst_ left
[17:44] *** vrurg left
[17:44] *** Util left
[17:44] *** shadowpaste left
[17:44] *** Celelibi left
[17:44] *** gfldex left
[17:44] *** agentzh left
[17:44] *** stux|RC-only left
[17:46] *** finanalyst_ joined
[17:46] *** vrurg joined
[17:46] *** Util joined
[17:46] *** shadowpaste joined
[17:46] *** Celelibi joined
[17:46] *** gfldex joined
[17:46] *** agentzh joined
[17:46] *** stux|RC-only joined
[17:46] *** stux|RC-only left
[17:46] <codesections> Well, here's a LTA error msg:

[17:46] <codesections> m: class A { method file(IO:Path:D $f) {}}

[17:46] <camelia> rakudo-moar 122ed081e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multiple type smileys cannot be used␤at <tmp>:1␤------> 3class A { method file(IO:Path:D7⏏5 $f) {}}␤»

[17:47] <lizmat> :Foo:Bar

[17:47] <lizmat> hmmm

[17:47] *** stux|RC-only joined
[17:47] <lizmat> perhaps "did you forget a ":" somewhere" should be added to that message ?

[17:48] <[Coke]> tony-o: (employer) followup: lizmat says not to require it, so no worries.

[17:49] <[Coke]> tbrowder: Rapi::Blog, based on Rapi::App, which is what news.perlfoundation.org uses?

[17:49] * [Coke] hurls https://metacpan.org/pod/Rapi::Blog

[17:49] <codesections> lizmat: Yeah, or maybe even not say anything about multiple type smileys when one of them is ≥ 2 characters long?

[17:50] <codesections> it seems unlikely that the user tried to have 2 type smileys _and_ an incorrectly long smiley -- much more likely that they forgot a ':'

[17:51] <tbrowder> [Coke]: thnx

[17:51] *** wamba joined
[17:52] <tbrowder> codesections: static sites imho are great for blogging

[17:52] <codesections> Agreed.  That's what I use (specifically, Zola)

[17:53] *** wamba left
[17:56] *** wamba joined
[17:57] <Geth> ¦ doc: codesections++ created pull request #3609: Fix typos detected by xt/check-signatures.t

[17:57] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3609

[17:58] <guifa> codesections:  don’t forget that IO:Path could very well be a valid identifier.  I wonder….

[17:58] <guifa> ora t least, it can be with subs

[17:59] <[Coke]> codesections++

[17:59] *** bocaneri left
[17:59] <[Coke]> codesections: I may patch that xt file so it races, if you don't mind.

[17:59] <guifa> Only :ver and :auth on classes

[17:59] <guifa> but

[18:00] <guifa> m: class A:ver<1> { }; sub foo (A:ver<1>:D $bar) { }

[18:00] <camelia> rakudo-moar 3cd51ae40: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multiple type smileys cannot be used␤at <tmp>:1␤------> 3class A:ver<1> { }; sub foo (A:ver<1>:D7⏏5 $bar) { }␤»

[18:00] <codesections> [Coke]: Please feel free.  I tried to do so naively, but it caused tests to fail and I didn't think it worth investigating right now 

[18:00] <codesections> (where naively === "I just added `race`") :D 

[18:00] <guifa> Aparently :ver can’t be specified in the signature?  That actually feels like a great thing to use sometimes

[18:01] <codesections> So, if you do, I'll be interested to see what needs to be done

[18:01] <[Coke]> needs race, a lock around the hash you're saving results in, and then a loop at the end to dump results in alpha order.

[18:01] *** aborazmeh joined
[18:01] *** aborazmeh left
[18:01] *** aborazmeh joined
[18:02] <[Coke]> lizmat: it doesn't say this in the repo, but I'm assuming invididual votes are "secret", and I'll just be reporting on the aggregrate results.

[18:02] <codesections> [Coke]: but what hash?  The test pass/fail within the loop

[18:02] <[Coke]> but if you race, they will be reported out of order.

[18:03] <[Coke]> so you save all the results, then dump them in order when the race is done.

[18:03] <[Coke]> it's not mandatory, but is nice to have.

[18:03] <lizmat> [Coke] yes, I think voting should be secret in the sense that only you will know who voted for what

[18:03] <codesections> Right, and I expected that.  But, instead, results were wrong – even though I didn't see any shared state

[18:03] <[Coke]> if you don't care about order, yes, emit the test result asap

[18:03] <[Coke]> lizmat: ok, good, same page.

[18:04] <[Coke]> codesections: maybe Test has some thread safety issues?

[18:04] <guifa> Test not thread safe

[18:04] <codesections> Yeah, that's what the Test docs say.  (And that's what I didn't feel like debugging :D)

[18:05] <codesections> [Coke]: Why would I use race and then sort the results?  My understaning is that that's what hyper does -- is that wrong?

[18:09] <[Coke]> You're not returning results, you're doing stuff in the loop. If you return them, sure.

[18:10] <codesections> Oh, right, I'm with you

[18:11] <[Coke]> could probably stick a .map() onto the end of the .race.map we have to handle that. not a bad idea.

[18:11] <[Coke]> (then we could start getting output asap, not "when all chunks are done'

[18:11] <[Coke]> I'll see about updating aspell to take that approach.

[18:11] <codesections> Well, anyway, if you make it work with race, I'll be interested in seeing what it takes to overcome the lack of thread safety.  And if you don't, I may try my hand at it later

[18:12] <[Coke]> er, hyper is sorted, race is not.

[18:13] <rypervenche> tbrowder: I use Hugo for my personal stuff. I much prefer static site generators now. Much easier syntax and can pretty easily move it to another platform if need be.

[18:13] <codesections> Well, hyper's *output* is similar, but it runs/can run out of order

[18:13] <codesections> s/similar/sorted/

[18:13] <[Coke]> "Unlike hyper, race does not preserve the order of elements.

[18:13] <[Coke]> "

[18:13] <[Coke]> ^^

[18:14] <codesections> right, but hyper gives you the same output order as input order but doesn't perform the operations in order

[18:14] <[Coke]> ah. looks tricky to update xt/aspell.t to use hyper because the map doesn't have a clearly defined "exit" point, it's inside a react block where we capture the output.

[18:14] <guifa> Well, it’s not required to.  I think at the moment it does

[18:14] * guifa . o O ( [Coke]’s mention of aspell reminds me to finish the hunspell port }

[18:14] <[Coke]> codesections: ... neither hyper nor race perform things in order, right.

[18:14] <[Coke]> hyper returns the results in order, race does not.

[18:15] <codesections> Yep, agreed. 

[18:15] <[Coke]> I read that you were disagreeing with the latter point there.

[18:15] <[Coke]> ok. same page.

[18:15] <codesections> I did something kind of similar with https://github.com/Raku/doc/blob/master/util/list-missing-methods.p6

[18:15] <[Coke]> for stuff not using react blocks in the information gathering, hyper may make sense. Will check.

[18:17] *** molaf left
[18:21] *** ufobat_ left
[18:25] *** jmerelo left
[18:34] <[Coke]> yah, as soon as I start using "ok" in the hyper flow, things start exploding, so the "save output in a hash" and then "loop over the hash" method seems to be the way to go. shame.

[18:35] <timotimo> if you can, put the oks in a second stage with a .eager.map

[18:36] <timotimo> then it'll be serialized, both in terms of the same order as it comes in, and on a single thread

[18:38] <[Coke]> timotimo: huh. verified, eager helps. Why is it needed?

[18:39] <[Coke]> (looks like some items are just not received without it.

[18:39] <timotimo> otherwise it'll just become part of the hyper pipeline as well

[18:40] <[Coke]> ahhhh

[18:41] <timotimo> eager is along the lazy-hyper spectrum / dimension

[18:41] <timotimo> like, lazy, eager, hyper, race ... i guess

[18:43] *** finanalyst_ left
[18:45] *** wamba left
[18:46] *** wamba joined
[18:51] *** domidumont left
[19:15] <[Coke]> codesections, timotimo: https://gist.github.com/coke/61bf77696acb435e525777b4942acfc5

[19:15] <[Coke]> if I try to hyper the processing, but keep the test output in the eager at the end, I see the random failures which are not reproducible when run individually.

[19:17] *** aborazmeh left
[19:18] <codesections> [Coke]: and, to be clear, you _don't_ see those errors if you do everything with a race + hash behind a lock?

[19:20] <[Coke]> I don't see them in the original version without hyper/race

[19:20] <[Coke]> I didn't also implement a race version to test

[19:21] <codesections> Ok, makes sense.  You didn't run into any errors like that with aspell.t's race/lock, though?

[19:21] *** bdju left
[19:22] <[Coke]> nope.

[19:22] *** bdju joined
[19:24] <tbrowder> rypervenche: thnx, looking a zola and github pages at the moment...

[19:26] <codesections> rypervenche: tbrowder: Zola and Hugo are _very_ similar -- Zola exists because the main developer really liked Hugo but couldn't stand its template syntax

[19:26] <rypervenche> Yeah, I've started looking at Zola a bit. I'll see how I like it.

[19:34] *** dotdotdot joined
[19:37] <guifa> Ugh, okay,  github newbie

[19:37] <guifa> How do I go about ammending a PR?

[19:37] *** molaf joined
[19:37] <codesections> If it hasn't been merged, just push to the same branch

[19:39] <guifa> Will both committs end up in the master branch or will git treat them as one?

[19:39] <codesections> two separate ones

[19:40] <[Coke]> if it's a branch you control, you can squash them and force push. (In general you don't want to do this on a public branch)

[19:41] <[Coke]> you can also copy that branch to a new branch, squash locally, push and open a new PR.

[19:41] <codesections> If you want it to be just one commit from the PR, you can do a "squash and merge" commit when you merge the PR via github, you're probably better off closing the PR, using `git rebase` to combine your commits, and then opening a new PR.

[19:42] <codesections> s/via github, you're/via github.  But if you don't want to do that, then you're/

[19:42] <codesections> (forgot, like, half a sentence there.  Oops)

[19:43] <guifa> Heh it’s okay.  I basically just totally botched a C&P job when I had already rebased once and that’s hwy I’m in this situation :-)

[19:46] *** sena_kun joined
[19:47] <MasterDuke> no need to close the PR, then you lose comments. just git rebase and force push

[19:47] *** Altai-man left
[19:48] <MasterDuke> (/me has done that many many times to many many PRs)

[19:48] <guifa> Well, for some reason git commandline doesn’t like my password (I normally use gitdesktop)

[19:49] <guifa> But it looks like the second one has already been picked up by the PR so … meh

[19:51] <codesections> guifa: use an SSH key instead of a password!  It's more convenient and **way** more secure 

[19:52] * codesections gets off soapbox

[19:55] <MasterDuke> i sometimes wish there was a syntax for "there are two arguments, one is of type A, the other is of type B; do X with A and Y with B, but i don't care what order the two are in" when writing multis

[19:58] <El_Che> Altai-man: building locally now

[19:58] <tellable6> El_Che, I'll pass your message to Altai-man

[19:59] <El_Che> Altai-man: profile test failes, but running raku --profile does not give an error

[19:59] <tellable6> El_Che, I'll pass your message to Altai-man

[19:59] <[Coke]> MasterDuke: seems like that could go into a module, something like infix.... is reversible

[20:00] <MasterDuke> hm

[20:00] <El_Che> Altai-man: funnily enough the other ubuntu 16.04 pkg builds fine. The only difference I can find is that I build each project separately

[20:00] <tellable6> El_Che, I'll pass your message to Altai-man

[20:01] <codesections> MasterDuke: is this the syntax you're trying to avoid?

[20:01] <codesections> m: multi f(Str $s, Int $i) { f($i, $s) }; multi f(Int $i, Str $s) { say "Int $i, Str $s"}; f('answer', 42)

[20:01] <camelia> rakudo-moar a9371749f: OUTPUT: «Int 42, Str answer␤»

[20:01] <codesections> that's not *that* verbose

[20:04] <MasterDuke> m: multi f(Str $s, Int $i) { $s.Int + $i }; multi f(Int $i, Str $s) { $i + $s.Int }; say f("2", 3); say f(4, "23") # this kind of thing

[20:04] <camelia> rakudo-moar a9371749f: OUTPUT: «5␤27␤»

[20:04] <El_Che> Altai-man: oh I see now, moarvm has new (and broken) test. Older releases of moarvm did not have test so I didn't run the moarvm test there. Sadly, this mean I have a higher failure rate. I'll check what other OSes are impacted by the new tests

[20:04] <tellable6> El_Che, I'll pass your message to Altai-man

[20:05] <codesections> m: multi f(Str $s, Int $i) { f($i, $s) }; multi f(Int $i, Str $s) { $i + $s.Int }; say f("2", 3); say f(4, "23")

[20:05] <camelia> rakudo-moar a9371749f: OUTPUT: «5␤27␤»

[20:06] <codesections> MasterDuke: but my point was that you can shorten that to ^^^

[20:07] <codesections> which isn't _much_ shorter for a 1-line function, but would save duplicating the entire body if the function were longer

[20:08] <MasterDuke> oh sure. and that's not a bad solution. but then you might have (depending on inlining) an extra function call in one

[20:09] <codesections> True.  given a sufficiently smart compiler, though...  

[20:09] <codesections> (famous last words, I know)

[20:10] <El_Che> a sufficiently smart compiler is indistinguishable from magic?

[20:11] <codesections> Let's hope not :D

[20:14] <guifa> Ugh.  I give up with git.  I’m just gonna delete my branch and start over from scratch.  That will require a new PR though, yeah?

[20:15] <[Coke]> yup.

[20:15] <timotimo> you can force-push into the same branch

[20:15] <timotimo> that will update the PR, too

[20:15] *** rindolf left
[20:32] *** roguelazer left
[20:33] *** roguelazer joined
[20:34] *** wamba left
[20:39] *** approaching236 left
[20:53] *** approaching236 joined
[21:14] <Geth> ¦ Raku-Steering-Council/main: eb843071c9 | (Elizabeth Mattijsen)++ | nominations/2020/lizmat

[21:14] <Geth> ¦ Raku-Steering-Council/main: Add advent blog posts

[21:14] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/eb843071c9

[21:14] <lizmat> whee!    tyil++ vrurg++

[21:14] <tellable6> 2020-09-01T21:11:49Z #raku-dev <vrurg> lizmat tyil has fixed RSC notifications, we have have pushes reported into #raku.

[21:16] <[Coke]> lizmat: I put together a voting-form.md in that directory. Please encourage people to follow that when voting.

[21:52] *** AlexDaniel joined
[21:52] *** AlexDaniel left
[21:52] *** AlexDaniel joined
[22:00] *** xelxebar left
[22:01] *** xelxebar joined
[22:22] <timotimo> who wants to build a cut-down version of CORE.setting that compiles like 5x faster and can still be used for simple tests? :S

[22:36] <MasterDuke> interesting

[22:47] <timotimo> env RAKUDO_MICROCORE=-threads,-bags,-supplies,-hyper make install

[22:58] *** sena_kun left
[23:35] *** pecastro left
[23:49] <Geth> ¦ Raku-Steering-Council: codesections++ created pull request #25: codesections nomination

[23:49] <Geth> ¦ Raku-Steering-Council: review: https://github.com/Raku/Raku-Steering-Council/pull/25

[23:52] <Geth> ¦ Raku-Steering-Council/main: d1c57dee10 | (Daniel Sockwell)++ | 2 files

[23:52] <Geth> ¦ Raku-Steering-Council/main: codesections nomination

[23:52] <Geth> ¦ Raku-Steering-Council/main: 

[23:52] <Geth> ¦ Raku-Steering-Council/main: Based on issue #20, I believe that my commit-bit to the raku/doc

[23:52] <Geth> ¦ Raku-Steering-Council/main: repository allows me to nominate myself to serve on the Raku Steering

[23:52] <Geth> ¦ Raku-Steering-Council/main: Council.  If I am incorrect about that, please feel free to close this

[23:52] <Geth> ¦ Raku-Steering-Council/main: PR.

[23:52] <Geth> ¦ Raku-Steering-Council/main: 

[23:52] <Geth> ¦ Raku-Steering-Council/main: This PR also updates the voting form to include list my name and

[23:53] <Geth> ¦ Raku-Steering-Council/main: github handle.

[23:53] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/d1c57dee10

[23:53] <Geth> ¦ Raku-Steering-Council/main: f1d7c4d77c | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[23:53] <Geth> ¦ Raku-Steering-Council/main: Merge pull request #25 from codesections-forks/codesections-nomination

[23:53] <Geth> ¦ Raku-Steering-Council/main: 

[23:53] <Geth> ¦ Raku-Steering-Council/main: codesections nomination

[23:53] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/f1d7c4d77c

