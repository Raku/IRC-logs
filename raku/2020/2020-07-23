[00:00] *** Tirifto left
[00:15] *** oddp left
[00:16] *** oneeggeach left
[00:18] *** tony-o_ joined
[00:19] *** Petr37 left
[00:43] *** leont left
[00:51] *** _jrjsmrtn joined
[00:52] *** __jrjsmrtn__ left
[00:54] *** mowcat left
[01:07] *** nebuchadnezzar left
[01:42] *** jdjohnston joined
[01:43] <jdjohnston> Why is the docker version of rakudocs different from the online version? Most noticeably, it still says "Perl 6"

[01:46] <jdjohnston> Is there an easy way to update the docs in the container?

[02:02] *** molaf left
[02:03] *** cooper joined
[02:04] <jdjohnston> Gotta go. I'll try again some other time.

[02:04] *** jdjohnston left
[02:05] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:07] <raku-bridge> <勉人> how do i print a combining character as a noncombining character?

[02:09] *** Jimbolli joined
[02:09] *** Jimbolli left
[02:12] <raku-bridge> <勉人> my $chars = "가 \x[302E] \x[302F]"; $chars .= split(" "); $chars».uniname».say; this just returns HANGUL SYLLABLE GA instead of all 3 characters that i wanted because the second 2 are combining characters

[02:14] *** molaf joined
[02:20] <[Coke]> guessing we haven't updated the docker container in ages.

[02:21] <[Coke]> ah, he's gone.

[02:49] *** gnufr33dom joined
[03:04] *** Xliff joined
[03:04] <Xliff> o/

[03:12] *** k-man left
[03:12] <[Coke]> \o

[03:14] *** zacts joined
[03:15] *** zacts left
[03:38] *** k-man joined
[03:42] *** melezhik joined
[03:43] <Xliff> m: use NativeCall; my bool $a;

[03:43] <camelia> rakudo-moar 43bd739ff: ( no output )

[03:44] *** melezhik left
[03:44] *** zacts joined
[03:46] *** zacts left
[04:00] <[Coke]> try "uninames" to at least see the extra combining char info

[04:01] <[Coke]> m: my $chars = "가 \x[302E] \x[302F]"; $chars .= split(" "); $chars».uninames.say

[04:01] <camelia> rakudo-moar 43bd739ff: OUTPUT: «((HANGUL SYLLABLE GA SPACE HANGUL SINGLE DOT TONE MARK SPACE HANGUL DOUBLE DOT TONE MARK))␤»

[04:01] <[Coke]> m: my $chars = "가 \x[302E] \x[302F]"; $chars .= split(" "); $chars.uninames.say

[04:01] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Cannot resolve caller uninames(Seq:D); none of these signatures match:␤    (Str:D $str)␤  in block <unit> at <tmp> line 1␤␤»

[04:07] <[Coke]> m: my $chars = "가 \x[302E] \x[302F]"; $chars.NFC[2].uniname.say # convert it to NFC instead of NFG

[04:07] <camelia> rakudo-moar 43bd739ff: OUTPUT: «HANGUL SINGLE DOT TONE MARK␤»

[04:10] *** Xliff left
[04:12] *** xelxebar left
[04:13] *** xelxebar joined
[04:37] *** lucasb left
[04:38] <raku-bridge> <勉人> thanks

[04:44] *** andrzejku joined
[04:52] *** nebuchadnezzar joined
[05:14] *** aluaces joined
[05:16] *** xinming left
[05:16] *** xinming joined
[05:25] *** bocaneri joined
[05:27] *** zacts joined
[05:27] *** xinming left
[05:28] *** xinming joined
[05:46] *** xelxebar left
[05:50] *** xelxebar joined
[06:05] *** zacts left
[06:11] *** zacts joined
[06:13] *** dolmen joined
[06:16] *** hungrydonkey left
[06:16] *** hungrydonkey joined
[06:20] *** ufobat joined
[06:24] *** dolmen left
[06:36] *** wamba joined
[06:43] *** gnufr33dom left
[06:53] *** tejr left
[06:54] <Geth_> ¦ doc: fa676ce2be | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Type/Pod/Block/Code.pod6

[06:54] <Geth_> ¦ doc: Remove documentation for (nonexistent) `allowed` method (#3528)

[06:54] <Geth_> ¦ doc: 

[06:54] <Geth_> ¦ doc: Thanks!

[06:54] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/fa676ce2be

[06:54] <linkable6> Link: https://docs.raku.org/type/Pod::Block::Code

[06:54] <linkable6> DOC#3528 [closed]: https://github.com/Raku/doc/pull/3528 Remove documentation for (nonexistent) `allowed` method

[07:00] *** samcv left
[07:02] *** kensanata joined
[07:04] <xinming> $ ./rakudo-m -e 'say \() ~~ :(Int :$page)'

[07:04] <xinming> m: ./rakudo-m -e 'say \() ~~ :(Int :$page)'

[07:04] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3.7⏏5/rakudo-m -e 'say \() ~~ :(Int :$page)'␤»

[07:04] <xinming> m: say \() ~~ :(Int :$page)

[07:04] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤»

[07:04] <xinming> m: say \() ~~ :(Int() :$page)

[07:04] <camelia> rakudo-moar 43bd739ff: OUTPUT: «False␤»

[07:04] <xinming> This is a bug, should be reported. ;-)

[07:05] *** aluaces left
[07:06] *** rindolf joined
[07:14] *** JJMerelo joined
[07:19] *** xinming left
[07:19] *** xinming joined
[07:27] *** samcv joined
[07:33] *** Sgeo left
[07:48] *** dakkar joined
[07:50] *** pecastro joined
[08:00] *** kensanata left
[08:01] *** leont joined
[08:05] *** reach_satori left
[08:05] *** reach_satori joined
[08:27] <cpan-raku> New module released to CPAN! Random::Names (0.0.3) by 03ELIZABETH

[08:29] *** xinming left
[08:30] *** xinming joined
[09:01] *** oddp joined
[09:10] *** zacts left
[09:13] *** markoong joined
[09:17] *** xinming left
[09:17] *** xinming joined
[09:18] *** zacts joined
[09:22] *** zacts left
[09:31] *** aluaces joined
[09:32] *** markoong left
[09:35] *** markoong joined
[09:36] *** schlaftier left
[09:37] *** schlaftier joined
[09:38] *** kktt007 joined
[09:38] *** hungryd91 joined
[09:38] *** hungrydonkey left
[09:56] *** zacts joined
[09:56] *** JJMerelo left
[10:08] *** rbt left
[10:14] *** zacts left
[10:20] <holyghost> I'm doing ok with AI in scheme for language features (e.g. for raku), I chose several things from C++ STL, Java and Smalltalk

[10:20] <holyghost> It's an actor based system

[10:20] <holyghost> Now I have to learn Ada and Eiffel, still :-)

[10:21] <holyghost> gnats == Ada on most systems

[10:21] <holyghost> or gnat, I don't remember

[10:21] <holyghost> Earlier, there was such Ada support in gcc

[10:23] <holyghost> So I am working for raku in scheme, which is nice :-)

[10:25] <holyghost> I chose scheme because of for AI, I might do something for raku in its implementation later on

[10:26] <holyghost> nqp, AFAIK and raku itself

[10:27] <holyghost> That way, we have some AI support, I'm doing several algorithms

[10:27] <holyghost> guile extensions for nqp are probably out of the question, but do note it

[10:28] <holyghost> I use scheme48 and scsh, as it's also a swiss army knife of UNIX, it was made on BSD 

[10:28] <holyghost> linux has guile more

[10:29] <holyghost> Thing is, the revised scheme report (below 7) has portable scheme, guile and scsh are incompatible extensioned though

[10:29] *** yangzq50 joined
[10:29] <holyghost> so e.g. there's a vector-ref no list-ref

[10:30] <holyghost> and so on :-)

[10:31] <holyghost> I started with r3rs in 1995, until r6rs (revised scheme reports) evrything's a pretty good language system

[10:31] <holyghost> r7rs is broken by compatibility IIRC

[10:35] <holyghost> Again, it's based on actors which I can do magically in raku itself

[10:36] <holyghost> we probably don't have the money and karma for actors in the nqp base

[10:36] *** kktt007 left
[10:36] <holyghost> in raku it's slower

[10:40] <Altreus> What's the incantation to know if a number is an integer?

[10:40] *** hungryd91 left
[10:41] <Altreus> ~~ Int?

[10:41] <Altreus> nar :(

[10:42] <tadzik> m: say so 5.0.Int == 5

[10:42] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤»

[10:43] <tadzik> does that work for you? I'm not sure if you mean a typecheck, or a logical "does it have something after the dot"

[10:43] <Altreus> the latter - I was trying to avoid using it twice because then I have to get it into a variable

[10:43] <Altreus> The XY problem is I'm trying to specify "power of 2"

[10:43] <Altreus> therefore log($_, 2) is an int

[10:44] <tadzik> m: subtype EffectivelyInt of Numeric where { $_.Int == $_ }; say so 5.0 ~~ EffectivelyInt; say so 5.1 ~~ EffectivelyInt

[10:44] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3subtype EffectivelyInt of Numeric7⏏5 where { $_.Int == $_ }; say so 5.0 ~~ E␤    expecting any of:␤        infix␤        infix stopper␤        po…»

[10:44] <tadzik> grr

[10:44] <Altreus> subset :D

[10:45] <tadzik> oh yes :D

[10:45] <Altreus> I just did the exact same

[10:45] <tadzik> m: subset EffectivelyInt of Numeric where { $_.Int == $_ }; say so 5.0 ~~ EffectivelyInt; say so 5.1 ~~ EffectivelyInt

[10:45] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤False␤»

[10:45] <Altreus> yes I could do two and that would be simpler

[10:46] <lizmat> use Bits; sub powerof2(Int:D $value) { $value > 1 && bitcnt($value) == 1 }; say powerof2 16    # True

[10:47] <Altreus> 1 is a power of 2 :)

[10:47] <Altreus> but 16 is the min for this function anyway apparently

[10:47] <lizmat> use Bits; sub powerof2(Int:D $value) { $value > 0 && bitcnt($value) == 1 }; say powerof2 16    # True

[10:48] *** xinming left
[10:48] <lizmat> 16?  1 is  

[10:48] *** sena_kun joined
[10:48] <Altreus> no I mean the function I'm writing

[10:48] <lizmat> ah, ok  *phew*  :-)

[10:48] <Altreus> to which the constraint is relevant

[10:48] <Altreus> :)

[10:49] <SmokeMachine> m: say 42.WHAT =:= Int

[10:49] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤»

[10:50] <Altreus> what is this magic

[10:51] <Altreus> m: say so log(4,2).WHAT =:= Int

[10:51] <camelia> rakudo-moar 43bd739ff: OUTPUT: «False␤»

[10:51] <Altreus> :(

[10:51] *** xinming joined
[10:52] *** Xliff joined
[10:52] <SmokeMachine> Hum!! you dont what the type! sorry I thought you wanted to differentiate Int from it's specialisations, sorry...

[10:52] <holyghost> m: say so log(4,2).WHAT =:= # ?

[10:52] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say so log(4,2).WHAT =:= # ?7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[10:53] <SmokeMachine> *its

[10:53] <holyghost> m: sy log(4,2).WHAT =:= Float

[10:53] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Float used at line 1. Did you mean 'Num'?␤Undeclared routine:␤    sy used at line 1. Did you mean 'so'?␤␤»

[10:53] <SmokeMachine> m: say so log(4,2).WHAT =:= Num

[10:53] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤»

[10:53] <holyghost> lol

[10:56] <holyghost> An actor based system :-)

[10:59] *** Xliff-con joined
[11:00] <Xliff-con> \o

[11:00] <holyghost> 'lo Xliff

[11:01] <Xliff-con> Hi. I'm slumming from a console, ATM. Attempting to compile Rakudo on a Raspberry Pi. It's tied to my second monitor, which is where my GUI client exists.

[11:01] <Xliff-con> Unfortunately, I can't get the damned thing to switch windows.

[11:01] <Xliff-con> :(

[11:01] <Xliff-con> I'm assuming someone has attempted this on the latest Pi hardware?

[11:03] <Xliff-con> OK. Compiling core.c -- This will be interesting.

[11:04] <Xliff-con> htop

[11:05] *** wamba left
[11:07] *** xinming left
[11:08] <Xliff-con> CORE.c.setting - 273 seconds!

[11:08] <Xliff-con> Opotimize took another 33

[11:09] *** xinming joined
[11:09] <Xliff-con> Mast took another 57 seconds

[11:11] <timotimo> woof

[11:11] <timotimo> is it swapping at all?

[11:11] <timotimo> though if it were swapping, the difference would be between 10x and 1000x i guess

[11:11] <Xliff-con> No.

[11:12] <Xliff-con> Core module install took another 55 seconds.

[11:12] <Xliff-con> I knew I was in for it when the MoarVM compile took perceptibly long. My desktop compiles that in 5-10 seconds.

[11:12] <Xliff-con> But build completed no problem!

[11:13] <Xliff-con> Probably best, in this situation, to install from binaries.

[11:15] <Geth_> ¦ advent: cd41b55c51 | Altai-man++ (committed using GitHub Web editor) | 20th/README.md

[11:15] <Geth_> ¦ advent: Add an article mention for 20th anniversary advent

[11:15] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/cd41b55c51

[11:15] <Xliff-con> Still...decent enough once it's running. Now to install zef

[11:16] <Xliff-con> ....and.... we're off!

[11:18] <timotimo> is this a pi 2 or 3?

[11:18] <Xliff-con> Latest. I just bought it in June

[11:19] <Xliff-con> Pi 4. 3 cores. 4GB

[11:19] <timotimo> the performance is still a little bit sobering

[11:19] <Xliff-con> Yes, it is.

[11:19] <Xliff-con> :(

[11:19] <Xliff-con> Still, aside from the time it was a hassle free installation.

[11:19] <timotimo> :)

[11:20] <Xliff-con> Installing rakudo star is probably the recommended thing to do for this platform.

[11:20] *** markong joined
[11:20] *** markoong left
[11:20] <Xliff-con> *I* wanted to install from sources because...well... I'm aparantly a masochist. 

[11:20] <timotimo> once we have a jit, things will be a little faster, but also there's a little bit of memory overhead to it, too

[11:20] <Xliff-con> I thought we already had JIT!

[11:21] <timotimo> parts of it

[11:21] <Xliff-con> OK.

[11:21] * Xliff-con goes to install p6-GLibg

[11:21] <timotimo> everything except the writing of native machine code on arm

[11:21] <Xliff-con> First I need the deps. Oh, that will be fun!

[11:21] <Xliff-con> Oh. ARM. Right. LOL

[11:28] <Altreus> how do I define a subset that only runs the condition when the value is defined?

[11:28] <Altreus> I feel like putting "not defined or" all the time is going to get old

[11:29] <Altreus> I was kind of expecting only a defined type would be tested in the first place

[11:29] <Altreus> er, a defined value

[11:30] <Altreus> Since the type object ... doesn't have a value to test

[11:31] <lizmat> m: dd 4 ~~ Int:D

[11:31] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Bool::True␤»

[11:31] <lizmat> m: dd Int ~~ Int:D

[11:31] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Bool::False␤»

[11:32] <Altreus> I mean that I want to constrain the value passed to the function, IF a value is passed

[11:33] <Altreus> requiring that an undefined value passes the type checks of a subset is inconsistent with allowing an undefined value not to contain required properties of a class

[11:38] *** wamba joined
[11:47] <Altreus> In fact it seems all subsets implicitly expect definedness.

[11:47] <Altreus> m: subset ReallyInt of Int where { $_.Int == $_ }; say so Int ~~ ReallyInt; say so Int ~~ Int;

[11:47] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int',␤not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[11:48] <Altreus> well

[11:48] <Altreus> m: subset ReallyInt of Int where { $_.Int == $_ }; say so Int ~~ Int; say so Int ~~ ReallyInt;

[11:48] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤Invocant of method 'Bridge' must be an object instance of type 'Int',␤not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[11:49] <Altreus> m: say Int.Int ~~ Int

[11:49] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤»

[11:49] <Altreus> The actual condition should survive the test...

[11:51] <timotimo> https://github.com/raku-community-modules/perl6-Subset-Helper

[11:52] *** xinming left
[11:52] *** xinming joined
[12:08] <timotimo> Altreus: did you see this module?

[12:08] <Altreus> no :o

[12:12] *** molaf left
[12:13] *** Altai-man_ joined
[12:13] <holyghost> JJMerelo : I would like to upload a package to CPAN, since you blocked my account, just this once

[12:14] <holyghost> JJMerelo : It's on http://github.com/theholyghost2/p6-Random-Hawking-Boltzmann

[12:15] <Altreus> timotimo: hey it covers my use case!

[12:15] <Altreus> :D

[12:15] <holyghost> JJMerelo, it needs 1 test, the rand function in BoltzmannFunction.pm6, then one can upload, it compiles

[12:15] <holyghost> .seen JJMerelo

[12:15] <tellable6> holyghost, I saw JJMerelo 2020-07-22T11:38:09Z in #raku-dev: <JJMerelo> Please propose yourself with a PR or directly if you've got the privs.

[12:16] *** sena_kun left
[12:16] <Altreus> ah good old zoffix

[12:16] <holyghost> JJMerelo : wait a minute, I dunno where to do a pull request PR

[12:18] <holyghost> JJMerelo : I cannot login into CPAN

[12:18] <holyghost> I don't know where to propose :-)

[12:19] <timotimo> why is $.kB rw when it's a constant?

[12:20] <Altai-man_> holyghost, just leave it at github.

[12:20] <timotimo> holyghost: Int.rand, like it's used in method rand, will give you a warning and return 0, so you're immediately using a division by zero in your code

[12:21] <timotimo> $!T = 1.227 * 10,*  -23; # <- this line from HawkingTemperature.pm6 seems like it has a typo

[12:23] <timotimo> holyghost: definitely do write that test before you consider pushing it up to cpan

[12:24] <holyghost> timotimo : a random number in the positive integer range does get close to a 0 in a long time :-)

[12:24] <Altreus> when people start blocking you, that's an opportunity to re-evaluate your home truths

[12:24] <tadzik> m: my $a = Int.rand; say $a

[12:24] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int',␤not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[12:25] <Altreus> what is this Bridge that I also saw?

[12:25] <timotimo> m: say Int.rand

[12:25] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int',␤not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[12:25] <Altreus> I feel like Raku has a lot of complexity inside it, and the high-level programmer needs to know it

[12:25] <timotimo> Altreus: it's how many types can be made to conform to Real (i think?) for calculation?

[12:26] <timotimo> holyghost: it would have been good to first confirm if it actually does what you think

[12:26] <timotimo> m: say Int.Range.rand

[12:26] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Can not get a random value from an infinite range␤  in block <unit> at <tmp> line 1␤␤»

[12:26] <timotimo> you can't use this more correct form either

[12:26] <timotimo> and also, you weren't even asking for the positive range of int, the code would, if it had been correct this way, have given you negative values as well

[12:27] <holyghost> Altreus : oy, I'm getting rusty :-)

[12:27] *** yangzq50 left
[12:28] <holyghost> m: say Int.new.rand

[12:28] <camelia> rakudo-moar 43bd739ff: OUTPUT: «0␤»

[12:29] <holyghost> m: say Int.rand

[12:29] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int',␤not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[12:29] <holyghost> The above compiled on the server

[12:29] <timotimo> of course it compiles

[12:30] <timotimo> compiling correctly is the absolute bare minimum

[12:30] <timotimo> you can write a lot of BS that compiles that's still useless

[12:31] <tadzik> yeah, the language is not "static" enough for compilation to mean much

[12:31] <tadzik> no language is, really. But especially not something as dynamic as Raku :)

[12:32] <Xliff-con>  cd..cd ..

[12:32] <holyghost> .tell Xliff, if you'd like to update the perl6 compiler on the server, Int.rand compiles whereas AFAIK it doesn't in raku. It'd be nice to keep the old compiler also by naming the new one raku on the command line, if that's doable *gnolly bows to the priest*"

[12:32] <tellable6> holyghost, I'll pass your message to Xliff

[12:33] <holyghost> Int.rand is as clear as my fucking ass in OOP :o|

[12:33] <Altreus> sure it is, means give me a random number between 0 and undefined

[12:34] <tadzik> not sure what OOP has to do with it

[12:34] <holyghost> tadzik : class method

[12:34] <tadzik> what about it?

[12:34] <Altreus> The existence of a class method is not sufficient to determine what it does

[12:34] <holyghost> right

[12:34] <tadzik> the error tells you exactly that this is *not* a class method

[12:34] <holyghost> sure

[12:35] <Altreus> So you've said you understand that you can run a class method, but you've not said that you've understood that your example is not one

[12:35] * holyghost unhails his python code

[12:35] <Altreus> Int.rand is python?

[12:35] <tadzik> I can imagine an Int.rand meaning "give me something between min- and maxint", but that doesn't make much sense when your ints auto-upgrade to bigints

[12:35] <Altreus> I can imagine what it does *with arguments*

[12:36] <Altreus> absolutely

[12:36] <tadzik> yes, those make it quite a lot clearer :)

[12:36] <moritz> Int.rand is a design smell to me

[12:36] <moritz> why would an Integer class know how to create a random number?

[12:36] <holyghost> *drink! girls!*

[12:36] <Altreus> m: say 4.rand

[12:36] <camelia> rakudo-moar 43bd739ff: OUTPUT: «0.36316631285077294␤»

[12:36] <holyghost> father Ted

[12:36] <holyghost> Altreus roflmao

[12:38] <tadzik> m: say 4.Int.rand

[12:38] <camelia> rakudo-moar 43bd739ff: OUTPUT: «1.6837977401117348␤»

[12:38] <tadzik> *blink*

[12:39] <Altreus> m: say 4.rand

[12:39] <camelia> rakudo-moar 43bd739ff: OUTPUT: «3.8379443138531912␤»

[12:39] <holyghost> m: say Int.Int.0.rand

[12:39] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3say Int.Int.7⏏050.rand␤»

[12:39] <tadzik> that's not something I'd expect out of Int.rand :P

[12:39] <[Coke]> m: say 4.rand.Int

[12:39] <camelia> rakudo-moar 43bd739ff: OUTPUT: «2␤»

[12:39] <Altreus> tadzik: you mean not-an-int?

[12:39] <tadzik> Altreus: yeah, going back to what moritz++ said

[12:39] <tadzik> if it's in the context of an Integer I'd expect to roll a random Integer

[12:39] <Altreus> Presumably it's inherited

[12:40] <[Coke]> https://docs.raku.org/routine/rand - "Returns a pseudo-random Num"

[12:40] <Altreus> Yeah but how do you know it's in context of an integer?

[12:40] <holyghost> moritz : a random number is positive definite between [0+, Inf[

[12:40] <Altreus> It's just as likely to be an accident that it was an Int than any other Numeric

[12:40] <holyghost> in python you have such a method IIRC also randint(0,10)

[12:40] <[Coke]> m: say ^100.pick

[12:40] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at <tmp>:1␤    ------> 3say ^1007⏏5.pick␤^100␤»

[12:40] <holyghost> the last is raku one

[12:40] <[Coke]> m: say (^100).pick

[12:40] <camelia> rakudo-moar 43bd739ff: OUTPUT: «35␤»

[12:41] <[Coke]> ^^ there's a different way to approach that

[12:41] <tadzik> that smells of just bad Liskov to me

[12:41] <tadzik> or not

[12:41] * tadzik hurt himself in his confusion

[12:41] <holyghost> [Coke] I need a float random [0,Inf[, 1/ Int.new.rand

[12:41] <holyghost> m: say Int.new.rand

[12:41] <camelia> rakudo-moar 43bd739ff: OUTPUT: «0␤»

[12:41] <holyghost> which is stupid ^^

[12:42] <Altreus> random numbers in computing are usually considered to be between 0 and 1, not 0 and inf

[12:42] <holyghost> I don't need interval limits for it

[12:42] <Altreus> cos inf is big and 1 is not

[12:42] <tadzik> Int narrows down a Numeric, and so the inherited .rand does no longer make much sense, is what I'm trying to say

[12:42] <[Coke]> I don't understand your syntax.

[12:42] <moritz> IMHO the best design would be:

[12:42] <holyghost> Altreus : ANSI C

[12:42] <moritz> * a Random class that can be initialied with a seed

[12:43] <holyghost> tadzik : right, so I was right too, see Xliffs message

[12:43] <moritz> * the random class can generate random Ints and Nums

[12:43] <Altreus> tadzik: but rand uses the number to define the upper bound; this should not affect the type of number returned

[12:43] <Altreus> rand is always defined as Rat, or whatever

[12:43] <moritz> * a dynamic variable $*RANDOM or so that is pre-initialized

[12:43] <holyghost> no moritz, again, I'm talking ANSI C : rand, srand

[12:43] <moritz> holyghost: yes, that's horrible, because it keeps global state

[12:43] <Altreus> Changing method rand(Rat --> Rat) to method rand(Int --> Int) seems ... bad

[12:44] <Altreus> If you did rand(4.Int) and rand(4.Rat) would you expect the former to return an int?

[12:44] <holyghost> Altreus: AFAIK rand should have no args, srand has a seed

[12:44] <holyghost> didn't know about Rat

[12:45] <Altreus> basically, rand doesn't change its behaviour and that seems more correct to me

[12:45] <Altreus> POLA

[12:45] *** aluaces left
[12:45] <holyghost> exagerating, if you cannot use libc class wise, some could get confused

[12:45] <tadzik> Altreus: right, I understand. I just don't like it :)

[12:46] <holyghost> I'm not saying raku syntax is dumb, but I used a lot of random number generating functions in python

[12:46] <tadzik> I'm with moritz here

[12:46] <holyghost> and arc4random() on macs in objc

[12:46] <tadzik> it's a different responsibility entirely, and the awkwardness becomes apparent when you consider seeding

[12:46] <Altreus> So you want a new language to behave like old languages?

[12:46] <Altreus> Just use those ones

[12:46] <Altreus> This one is doing things differently and this is one of those things

[12:46] <holyghost> no Altreus, just for fast hacking's sake

[12:47] <moritz> if you make PRNGs explicitly instantiatble, you can do very coll things with that

[12:47] <Altreus> just learn the behaviour

[12:47] <moritz> like, have different threads with the PRNG seed

[12:47] <moritz> or several asynchronnously running simulations with different seeds in the same thread

[12:48] <holyghost> arc4random is non-pseudo random for example, and does not take arguments, neither does /dev/urandom or /dev/random

[12:49] <Altreus> but those things don't give you ints, they give you bytes

[12:49] <Altreus> they don't even give you numbers

[12:49] <Altreus> just bytes

[12:49] <Altreus> typless things

[12:50] <Altreus> unformatted

[12:50] <holyghost> but as the name says they're randoms

[12:50] <Altreus> They're random but they're not structured

[12:50] <holyghost> a float modulus and your on (I know it's int based)

[12:50] <Altreus> We're talking about structured random

[12:50] <holyghost> then shift

[12:51] <moritz> holyghost: that's the beauty of putting the generator into a dynamic variable: you can replace it withn one of your choice, as long as it keeps interface compatiblitiy

[12:51] <Altreus> you can't use /dev/urandom without knowing how much you want and waht you want to treat it as

[12:51] <Altreus> But you *can* use rand(x) without knowing those things

[12:51] <Altreus> what you actually know is what you want the max to be

[12:51] <Altreus> And the rest is done for you: you get a Numeric value

[12:52] <Altreus> This defines how big it is and what its structure is

[12:52] <Altreus> It's like you want a high-level language to be a low-level language

[12:52] <holyghost> sure, I wrote way too many lines of python 10 years ago, for pygame games and I used randint(X,Y) for a Quest For Glory character sheet system

[12:52] <Altreus> but this isn't python

[12:52] <Altreus> this is raku

[12:53] <holyghost> indeed

[12:53] <Altreus> So it works like this, not like that

[12:53] <holyghost> randint(X,XX) uses the same things as in raku, so there :o)

[12:54] <holyghost> problem is mostly the float randoms

[12:54] <holyghost> therefor 1 / Int.new.rand(0,1000000), SFY

[12:54] <holyghost> or something similar which compiles

[12:54] <holyghost> 0,Inf I guess

[12:55] <Altreus> why create an object to marshal this routine?

[12:55] *** |oLa| joined
[12:55] <Altreus> m: rand(1,3)

[12:55] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of rand(N).  In Raku please use: N.rand for Num or␤(^N).pick for Int result.␤at <tmp>:1␤------> 3rand7⏏5(1,3)␤»

[12:56] <Altreus> It even tells you what to do

[12:56] <holyghost> WAM

[12:56] <holyghost> m: Inf.rand

[12:56] <camelia> rakudo-moar 43bd739ff: ( no output )

[12:56] <holyghost> m: Int.rand(Inf)

[12:56] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[12:57] <holyghost> m: Inf.new

[12:57] <camelia> rakudo-moar 43bd739ff: ( no output )

[12:57] <holyghost> m: rand

[12:57] <camelia> rakudo-moar 43bd739ff: ( no output )

[12:57] <holyghost> m: rand(Inf)

[12:57] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling rand(Num) will never work with signature of the proto (*%)␤at <tmp>:1␤------> 3<BOL>7⏏5rand(Inf)␤»

[12:57] <holyghost> botcherous

[12:58] *** kensanata joined
[12:58] <tadzik> ....what do you expect rand(Inf) to return?

[12:58] <tadzik> m: say Inf.rand

[12:58] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Inf␤»

[12:59] <tadzik> looks correct %)

[12:59] <Altreus> I'm pretty sure a random number bounded by Inf runs into the halting problem :P

[12:59] <holyghost> rand is a C function for perl5 and raku I guess

[13:00] <Altreus> ?

[13:00] <holyghost> TMTOWTDI

[13:00] <Altreus> It's a raku function for raku

[13:00] <holyghost> ok

[13:00] <Altreus> a perl5 function for perl5

[13:00] <Altreus> a C function for C

[13:00] <Altreus> there aren't very many names for things ... languages tend to share

[13:00] <holyghost> I just need some different things for my random code

[13:00] <holyghost> right

[13:01] <holyghost> m: rand(0,Inf)

[13:01] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of rand(N).  In Raku please use: N.rand for Num or␤(^N).pick for Int result.␤at <tmp>:1␤------> 3rand7⏏5(0,Inf)␤»

[13:01] <holyghost> you see, that was python

[13:01] <holyghost> use pick, ok

[13:01] <Altreus> ok and python has the same chance of picking inf than any other number?

[13:01] <holyghost> s/different/several

[13:01] <Altreus> as

[13:02] <holyghost> I meant randint(0,5) Inf is not in python AFAIK

[13:02] <Altreus> And that wasn't the Inf you input, that was the number just before the Inf that you input, because rand's return value will never equal the upper bound

[13:02] <holyghost> indeed

[13:02] <Altreus> So don't say it :P

[13:02] <Altreus> an upper bound of inf is impossible with 2 seconds of thought

[13:04] <[Coke]> m: my @a = gather for ^10000 { take Inf.rand} ; @a.unique.say # hey, it... works... 

[13:04] <camelia> rakudo-moar 43bd739ff: OUTPUT: «(Inf)␤»

[13:07] <holyghost> if only I didn't have to type 100000000000.rand :-)

[13:07] <holyghost> even if it's a Rat

[13:09] *** |oLa| left
[13:10] <timotimo> m: say int64.Range.rand

[13:10] <camelia> rakudo-moar 43bd739ff: OUTPUT: «8.04785272651649e+18␤»

[13:10] <timotimo> m: say int64.Range.rand

[13:10] <camelia> rakudo-moar 43bd739ff: OUTPUT: «-3.398761726145194e+18␤»

[13:10] <timotimo> m: say int64.Range.rand

[13:10] <camelia> rakudo-moar 43bd739ff: OUTPUT: «-4.0153277634563707e+18␤»

[13:10] <[Coke]> m: 10¹¹.rand

[13:10] <camelia> rakudo-moar 43bd739ff: ( no output )

[13:10] <[Coke]> m: 10¹¹.rand.say

[13:10] <camelia> rakudo-moar 43bd739ff: OUTPUT: «96400714556.83554␤»

[13:11] <holyghost> m: Int32.Range.rand

[13:11] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Int32 used at line 1. Did you mean 'int32', 'uint32'?␤␤»

[13:11] <holyghost> stupid scheme

[13:11] <holyghost> m: say In32.Range.rand

[13:11] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    In32 used at line 1. Did you mean 'int32'?␤␤»

[13:11] <holyghost> m: say Int32.Range.rand

[13:11] <camelia> rakudo-moar 43bd739ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Int32 used at line 1. Did you mean 'int32', 'uint32'?␤␤»

[13:12] <holyghost> right

[13:12] <oddp> int32, buddy.

[13:12] <holyghost> m: int32.Range.rand

[13:12] <camelia> rakudo-moar 43bd739ff: ( no output )

[13:12] <oddp> m: say int32.Range.rand

[13:12] <camelia> rakudo-moar 43bd739ff: OUTPUT: «1100084852.5297184␤»

[13:12] <oddp> m: say int32.Range.rand.Int

[13:12] <camelia> rakudo-moar 43bd739ff: OUTPUT: «835444890␤»

[13:12] <holyghost> nice

[13:13] <holyghost> I use uint32_t in GBA games ;-)

[13:13] <Altreus> Surely Inf.rand is really just an implied upper bound that's really big

[13:13] <holyghost> cool

[13:13] <Altreus> cos you can't risk rolling a number that doesn't fit in memory and that's basically guaranteed given how many numbers up to inf are bigger than your memory

[13:14] <Altreus> m: say Inf.rand

[13:14] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Inf␤»

[13:14] <Altreus> or you just alway get inf

[13:14] <Altreus> not really what was intended I think :D

[13:14] <Altreus> makes sense though

[13:14] <tadzik> it's not wrong :P

[13:15] <tadzik> perhaps not very useful though

[13:15] <timotimo> there is actually a highest number below Inf that a Num can represent

[13:15] <Altreus> Well if a random number between 0 and X is just rand() * X, then all numbers between 0 and inf are either 0 or inf

[13:17] <holyghost> y * sin(x) for a nice game AI (throttles upward down on your screen :-)

[13:17] <holyghost> going left to right

[13:21] <holyghost> ok I updated my code to int64.Range.rand instead of Int.rand

[13:22] <holyghost> we divide by 48 :-)

[13:22] <holyghost> and 1 sometimes :-)

[13:23] *** Xliff left
[13:23] *** Xliff-con left
[13:27] *** thundergnat joined
[13:28] <thundergnat> m: sub is-po2 ($_ where * > 0) { .msb === .lsb }; say "$_: ", .&is-po2 for 1..8;

[13:28] <camelia> rakudo-moar 43bd739ff: OUTPUT: «1: True␤2: True␤3: False␤4: True␤5: False␤6: False␤7: False␤8: True␤»

[13:28] *** thundergnat left
[13:30] *** Petr37 joined
[13:31] <Petr37> gday. how can i generate html in Raku? i can't find any module ...

[13:31] <moritz> Petr37: https://modules.raku.org/search/?q=template

[13:32] <Altreus> timotimo: I still get an undef error using subset-is

[13:32] <Altreus> :(

[13:32] <Petr37> moritz, thanks!

[13:34] <Altreus> Any ideas? https://github.com/shuppet/p6-api-discord/commit/3759257c896c5a1117c6d90e758ef838fa8175cb

[13:35] <Altreus> Hard to show it usable but the error is: Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?

[13:35] <Altreus> If I call the method with no arguments

[13:37] *** aluaces joined
[13:40] <Altreus> oh!

[13:40] <Altreus> It's probably the constraint on the method itself, right?

[13:40] <Altreus> damn

[13:40] <Altreus> er - in the arguments I mean

[13:43] <timotimo> yeah, quite probably

[13:44] <timotimo> m: sub test(:$blorp where 16 <= (* // 16) <= 4096) { say "yay" }; test(); test(blorp => 1000); test(blorp => 999999999)

[13:44] <Altreus> This inability to natively use constraints on optional values seems very broken

[13:44] <camelia> rakudo-moar 43bd739ff: OUTPUT: «Cannot resolve caller Real(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:44] <timotimo> m: sub test(:$blorp where 16 <= ($_ // 16) <= 4096) { say "yay" }; test(); test(blorp => 1000); test(blorp => 999999999)

[13:44] <camelia> rakudo-moar 43bd739ff: OUTPUT: «yay␤Constraint type check failed in binding to parameter '$blorp'; expected anonymous constraint to be met but got Int (999999999)␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤yay␤»

[13:45] <timotimo> stdout and stderr get interleaved wildly, but this works ^

[13:45] <timotimo> not optimal, though

[13:45] <Altreus> what does this mean?     Type check failed in binding to parameter '&check'; expected Callable but got List ($( ))

[13:45] <Altreus> I just made another subset for that range :D

[13:46] *** xinming left
[13:46] <timotimo> looks like you passed an empty list accidentally?

[13:46] <timotimo> what does the code look like?

[13:46] <Altreus> sec

[13:47] *** MasterDuke joined
[13:47] <Altreus> https://github.com/shuppet/p6-api-discord/blob/avatar-url/lib/API/Discord/User.rakumod#L64

[13:47] *** xinming joined
[13:47] <timotimo> ah

[13:48] <timotimo> %image-formats{*}:exists is not what you want

[13:48] <timotimo> you can * (elem) %image-formats, or possibly just %image-formats

[13:48] <timotimo> m: my %if = <jpeg .jpeg png .png>; say "png" ~~ %if; say "pnm" ~~ %if

[13:48] <camelia> rakudo-moar 43bd739ff: OUTPUT: «True␤False␤»

[13:48] <timotimo> just smart-matching will do the exists check i believe

[13:49] <Altreus> that seems like a bizarre thing to have to avoid

[13:49] <Altreus> gotta say I'm getting a lot of aggro from raku :P

[13:49] <Altreus> where's my dwim

[13:49] <timotimo> some things accept * as an argument

[13:49] <timotimo> like 1..* for example

[13:50] <Altreus> :\ why not other things

[13:50] <Altreus> * things seem to pass off as a shortcut to { $_ } but they frequently don't behave that way

[13:50] <timotimo> but also putting * inside method calls and such

[13:51] <[Coke]> is there a particular case that is confusing for you?

[13:51] <[Coke]> or a particular place you need * that isn't supported?

[13:51] <timotimo> whatever-currying happens when you put operators next to the *, method calls and regular sub calls don't curry

[13:51] <Altreus> [Coke]: %image-formats{*}:exists apparently does not function as I expect

[13:52] <[Coke]> what do you expect?

[13:52] <Altreus> I expect it to return a boolean indicating whether the argument exists as a key in the hash

[13:52] <Altreus> I do not understand what actually happened, which is why I asked for help in the first place

[13:53] <Altreus> But apparently it didn't compile to a callable at all

[13:54] <dakkar> ooh nice

[13:54] <dakkar> m: my %a=(a=>1,b=>2);say %a{*}:exists

[13:54] <camelia> rakudo-moar 43bd739ff: OUTPUT: «(True True)␤»

[13:54] *** cpan-raku left
[13:54] <[Coke]> what is "subset-is" ?

[13:55] <Altreus> from Subset::Helper

[13:55] <Altreus> Now I get: Constraint type check failed in binding to parameter '$format'; expected API::Discord::User::ImageFormat but got Str ("PNG")

[13:55] *** cpan-raku joined
[13:55] *** cpan-raku left
[13:55] *** cpan-raku joined
[13:55] <Altreus> Even though "PNG" ~~ %image-formats is true

[13:55] <dakkar> the WhateverCode goes straight through the subscript operator, so you get a list of True

[13:55] *** codesections joined
[13:55] <Altreus> I see

[13:55] <Altreus> This is not the sort of thing I expect to have to understand :/

[13:55] <Altreus> There's a lot of this in raku

[13:55] <dakkar> WhateverCode is very magic

[13:55] <Altreus> I still don't understand why I was having an error mapping the same array twice

[13:56] <Altreus> Something to do with Seqs

[13:56] <dakkar> probably because it was a Seq and not an Array

[13:56] * [Coke] is trying to golf this down. there's a lot in your code.

[13:56] <dakkar> Seq can be scanned once

[13:56] <Altreus> well it was an array before the map

[13:56] * dakkar doesn't have enough context, and should be working

[13:57] <Altreus> [Coke]: just this (with raku -MSubset::Helper) https://gist.github.com/Altreus/f0a2170378f31562779379692de8de8b

[13:58] <Altreus> in fact

[13:59] <[Coke]> subset ImageFormat of Str where subset-is {%image-formats{$_}:exists};

[13:59] <Altreus> I've updated it to not use subset-is

[13:59] <Altreus> let me try that

[14:00] *** aluaces left
[14:00] <[Coke]> if I run your example as "a.raku" it outputs PNG

[14:00] *** maggotbrain left
[14:00] <[Coke]> what is your raku version?

[14:00] *** aluaces joined
[14:00] <Altreus> This is Rakudo version 2020.01 built on MoarVM version 2020.01.1

[14:01] <[Coke]> the original {*} doesn't work in 2020.06+, but your gist example did. might be worth updating.

[14:01] *** maggotbrain joined
[14:01] <Altreus> I'll kick it off

[14:06] *** gnufr33dom joined
[14:06] <kawaii> I like how easy it is to download a new version of Rakudo now without needing to compile anything

[14:06] <tellable6> 2020-07-22T22:29:16Z #raku <SmokeMachine> kawaii now this works: https://www.irccloud.com/pastebin/uVZiQ0Da/

[14:10] *** markong left
[14:14] <timotimo> i'm only at the keyboard intermittently, i wonder how the version with %image-formats directly worked

[14:14] <timotimo> (or didn't work)

[14:14] *** sena_kun joined
[14:16] *** Altai-man_ left
[14:18] <Voldenet> 'without needing to compile anything' – not if someone uses gentoo ;)

[14:18] *** pi4 joined
[14:18] <codesections> Or you count byte-compiling raku code :)

[14:19] <Voldenet> but on gentoo things aren't installed, they just emerge

[14:20] <codesections> »ö«

[14:21] *** pi62 joined
[14:22] *** Kaiepi left
[14:22] *** Kaiepi joined
[14:23] *** Kaiepi left
[14:24] *** Kaiepi joined
[14:25] *** Kaiepi left
[14:26] *** pi62 left
[14:27] <pi4> q

[14:27] *** andrzejku left
[14:31] *** Geth_ left
[14:32] *** Geth joined
[14:37] *** vrurg left
[14:38] *** vrurg joined
[14:44] *** Petr37 left
[14:48] <tbrowder> hi, folks!

[14:49] <kawaii> o/

[14:50] <tbrowder> i wonder if we have a problem with installing modules with a "bin" entry in their META6.json file?

[14:50] <tbrowder> kawaii: \o

[14:51] <tbrowder> does zef overwrite an existing bin file of the same name but different module?

[14:54] <holyghost> ambiguity of raku gets better every day 

[14:54] <holyghost> oh well

[14:54] <tbrowder> if so, then that seems to be a future problem unless we do something to at least warn of the problem via zef.

[14:55] <tbrowder> holyghost: how do other langs or distros handle that problem?

[14:56] <tbrowder> i don't think it's solely a raku problem.

[14:56] <tbrowder> check out debian for example

[14:56] <codesections> tbrowder: many langs don't let you install binary packages via the language package manager

[14:57] *** dre joined
[14:57] <tbrowder> i think perl does

[14:58] *** dre left
[14:58] *** gnufr33dom left
[14:58] <tbrowder> but i'm not sure

[14:58] <tbrowder> i have had similar problems with npm

[14:59] <codesections> and, for distros, they traditionally solve the problem by being fully in control of their repos and making sure that the packages with the same name refer to the same code

[14:59] <holyghost> it's zef not cpan on the command line

[14:59] <tbrowder> yes

[14:59] <holyghost> as far as I understand you, zef does not install needed libs (in C for example)

[14:59] <holyghost> but you knew that I guess

[14:59] <codesections> (I think Nix and Guix have a more advanced solution, but I don't fully understand it)

[15:00] <tbrowder> but i use perl modules with raku and use cpanm to install perl modules

[15:02] *** eaterof joined
[15:03] *** eater left
[15:04] <lizmat> hmmm... I guess I should give it a less obvious name

[15:05] <tbrowder> let me see if i get a warning from zef...

[15:08] <cpan-raku> New module released to CPAN! Hash2Class (0.0.4) by 03ELIZABETH

[15:11] *** MasterDuke left
[15:16] <cpan-raku> New module released to CPAN! Hash2Class (0.0.5) by 03ELIZABETH

[15:24] <cpan-raku> New module released to CPAN! Hash2Class (0.0.6) by 03ELIZABETH

[15:47] *** skids joined
[15:47] *** KnightLautrec[m] left
[15:51] *** Sgeo joined
[15:52] <holyghost> lizmat : so you're hacking some perl6/raku, I see :-)

[15:53] <lizmat> yeah, got bored with working on Raku itself

[15:53] <holyghost> sure, ga

[15:58] <holyghost> (ga == go ahead, ust to make sure)

[15:58] <holyghost> *just

[16:00] *** kensanata left
[16:13] *** Altai-man_ joined
[16:16] *** sena_kun left
[16:16] *** abraxxa left
[16:36] *** dakkar left
[16:40] *** jmcgnh left
[16:42] <tbrowder> lizmat: see my pr for h2c

[16:43] <lizmat> holyghost: understood  :-)

[16:47] *** ufobat left
[16:50] *** jmcgnh joined
[16:53] *** xinming left
[16:54] *** melezhik joined
[16:54] *** xinming joined
[16:55] <melezhik> I am impressed how easy it was to install Raku on mac OS using rakubrew, great tool!

[16:55] <melezhik> it took me a few seconds to install the latest distribution of Rakudo with zef

[16:56] <melezhik> and all PATHs are here and everything within my home, pretty neat!

[16:56] <lizmat> :-)

[16:56] <melezhik> works as a charm

[16:57] <melezhik> and Sparrow works on mac os too, it only requires gnu-tar (instead of standard mac bsd tar), which is not big deal with homebrew

[16:57] <melezhik> so I am ready for a battle ))))

[17:09] <kawaii> the only gripe I have with Raku's module ecosystem is that modules don't tell you what package you're missing when they fail to install, and some guesswork is required to search through apt and figure it out

[17:09] <kawaii> IIRC, some work is being done/discussed around this topic

[17:10] <melezhik> kawaii do you system dependencies for Raku modules?

[17:10] <melezhik> you -> you mean

[17:10] <kawaii> yep

[17:11] <melezhik> well, it's quite discussed problem ))), let me get you some links

[17:11] <melezhik> that could be of interest 

[17:11] <kawaii> that would make for interesting reading, thanks :)

[17:12] <melezhik> https://github.com/ugexe/zef/issues/356 , https://github.com/Raku/ecosystem/issues/505

[17:14] <melezhik> but if you want my view on this - use could Sparrowdo to manage system dependencies for you raku modules 

[17:15] <melezhik> if you take a look at this "patches" that are used in RakuDist - https://github.com/melezhik/RakuDist/tree/master/modules/default/files/patches

[17:15] <melezhik> you'll get an idea

[17:18] <melezhik> basically you may install Raku modules using Sparrow: `package-install "gcc openssl openssl-devel"; zef "Cro::TLS";`

[17:18] <melezhik> that is it

[17:19] <melezhik> at least this is how you can get _repeatable_ deploy scenarios for your Raku code

[17:24] <SmokeMachine> melezhik: does that RakuDist Red test environment still exist?

[17:25] <melezhik> SmokeMachine it does, do you need it?

[17:25] *** dataangel joined
[17:26] *** skids left
[17:29] <rypervenche> kawaii: Do you know if it's possible to send audio (I guess via a buffer using ffmpeg) to a bot in API::Discord? Or would that need to be added to the module?

[17:30] <SmokeMachine> Yes, I'm planing to take a look at those Pg problems this weekend, and try to do a CI schema to test all the tests on PG, if possible

[17:30] <kawaii> rypervenche: not possible at this time, IIRC Raku would need a module to handle the Opus codec (all that Discord supports), and we have no code in the module to handle voice at all yet anyway - also the voice endpoints on Discord's API are ENTIRELY undocumented :D

[17:31] *** skids joined
[17:32] <rypervenche> kawaii: And what if the source/file were already in the Opus codec? Would that be possible at this time?

[17:32] <rypervenche> Oh, I missed the "we have no code" part. 

[17:33] <kawaii> voice stuff is the very last thing on our roadmap for the module, because it's going to be annoying/difficult 

[17:34] <rypervenche> All righty. I was just curious since I'm learning to write a bot. :)

[17:39] <kawaii> rypervenche: there's a link to our Discord server in the README if you have questions and stuff :)

[17:39] <kawaii> there's not really many people there, but feel free to ping me if you need help

[17:44] <SmokeMachine> kawaii: you are playing with discord bot + Red, maybe you could gimme some help on a old project of a IRC bot + Red: https://github.com/FCO/RedBot/blob/whateverable/bin/red-bot :)

[18:01] <tony-o_> [Coke]: i have a raku nightly building

[18:01] <tellable6> 2020-05-29T17:39:25Z #raku-dev <patrickb> tony-o I'm still interested in your revamp of the ecosystem. Are you still planing on going forward with that?

[18:01] <tellable6> 2020-06-11T10:58:35Z #raku-dev <patrickb> tony-o I'm still interested in creating a more robust p6c ecosystem. But I'm currently kind of blocked by you spearheading a similar effort. Is there anything I can do to speed things up on your side?

[18:02] <tony-o_> .tell patrickb ugexe just told me there's been some pining for it.  currently working on it again.

[18:02] <tellable6> tony-o_, I'll pass your message to patrickb

[18:04] <tony-o_> [Coke]: https://hub.docker.com/repository/docker/tonyodell/rakudo-nightly

[18:04] *** tony-o_ is now known as tony-o

[18:08] *** skyl4rk left
[18:10] *** ensamvarg3 left
[18:10] *** melezhik left
[18:11] *** skyl4rk joined
[18:14] *** MetroMSI joined
[18:14] *** wklew joined
[18:14] <tony-o> kawaii: nine, ugexe, and i discussed the system deps problem a few years ago at PTS.  not sure if we agreed on anything for it

[18:15] *** sena_kun joined
[18:15] <tony-o> kawaii: this was the test for it: https://github.com/tony-o/p6-warthog

[18:15] *** wklew left
[18:16] *** wklew joined
[18:16] *** Altai-man_ left
[18:23] *** Black_Ribbon joined
[18:23] *** bocaneri left
[18:28] <[Coke]> tony-o: sorry, what was that in reference to?

[18:30] *** codesections left
[18:30] <tony-o> docker images for raku

[18:34] <tony-o> ah, sorry, that might've been from last night - my buffer wasn't scrolling since i rejoined the channel.

[18:35] <[Coke]> i think it was docker images for raku docs that we were discussing.

[18:35] <[Coke]> but I may have been mistaken.

[18:35] <[Coke]> anyway, thanks. :)

[18:36] <cpan-raku> New module released to CPAN! Hash2Class (0.0.7) by 03ELIZABETH

[18:37] <tony-o> [Coke]: i can add a docs image to that nightly if that's interesting.

[18:51] *** Kaiepi joined
[19:02] <cpan-raku> New module released to CPAN! PDF::Tags (0.0.2) by 03WARRINGD

[19:03] *** codesections joined
[19:14] *** Possum joined
[19:24] <cpan-raku> New module released to CPAN! Hash2Class (0.0.8) by 03ELIZABETH

[19:26] *** xelxebar_ joined
[19:26] *** xelxebar left
[19:26] *** sena_kun left
[19:27] *** sena_kun joined
[19:40] <[Coke]> tony-o: ask jj.

[19:42] *** skids left
[19:46] *** skids joined
[19:50] <rypervenche> What exactly is the expanded equivalent of this? my API::Discord $discord .= new :$token;

[19:51] <SmokeMachine> my API::Discord $discord = API::Discord.new :$token;

[19:51] <timotimo> no need for the colon after new?

[19:52] <SmokeMachine> timotimo: yes, sorry: my API::Discord $discord = API::Discord.new: :$token;

[19:52] <timotimo> m: class T { method test(*%a) { .say for a } }; my T $t = T.new :blorp

[19:52] <camelia> rakudo-moar 3843a1e89: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[19:52] <timotimo> oops

[19:52] <timotimo> m: class T { method test(*%a) { .say for %a } }; my T $t = T.test :blorp

[19:52] <camelia> rakudo-moar 3843a1e89: OUTPUT: «blorp => True␤»

[19:52] <timotimo> it does work without the colon!

[19:52] <SmokeMachine> odd

[19:52] <timotimo> not so surprising

[19:53] <SmokeMachine> adverb?

[19:53] <rypervenche> Ahh, I should add the colon I guess.

[19:54] <rypervenche> I originally had "my $discord = API::Discord.new(:$token);", but I thought I should probably add a type constraint.

[19:56] *** skids left
[19:56] *** aborazmeh joined
[19:56] *** aborazmeh left
[19:56] *** aborazmeh joined
[19:56] *** markong joined
[19:57] *** aborazmeh left
[19:58] *** skids joined
[20:00] *** Possum left
[20:01] <guifa> rypervenche: I believe named arguments don’t actually have to be indicated as arguments per se with and could even be stacked:

[20:02] <guifa> m: class A { method a(*%a) { say %a } }; A.a :1a:b(2):c<3>:d('4')

[20:02] <camelia> rakudo-moar 3843a1e89: OUTPUT: «{a => 1, b => 2, c => 3, d => 4}␤»

[20:04] *** Petr37 joined
[20:04] <guifa> I think but don’t quote me that named args like that are first given to the operator, and those pass them through if they can’t do anything with them 

[20:05] <oddp> Btw., thanks for the july grant report. And have a fun and relaxing vacation!

[20:11] *** Petr37 left
[20:13] *** Altai-man_ joined
[20:13] <cpan-raku> New module released to CPAN! Red (0.1.25) by 03FCO

[20:16] *** sena_kun left
[20:16] *** wklew left
[20:20] *** andrzejku joined
[20:27] *** rindolf left
[20:37] *** Altai-man_ left
[20:38] *** sena_kun joined
[20:48] *** Black_Ribbon left
[20:49] *** xinming left
[20:49] *** xinming joined
[20:52] *** andrzejku left
[20:55] *** kensanata joined
[20:56] *** wklew joined
[21:14] *** abraxxa joined
[21:18] *** Black_Ribbon joined
[21:31] <tony-o> hey all.  a heads up that i submitted a tpf grant request for building out an autonomous raku ecosystem.

[21:35] *** gordonfish left
[21:35] <kawaii> tony-o: are these grant requests publically logged and/or discussed anywhere?

[21:36] <tony-o> kawaii: they are.  they're on the TPF site, i just submitted this one so it isn't on there yet (https://www.perlfoundation.org/)

[21:37] *** gordonfish joined
[21:37] <tony-o> kawaii: here is a gist of the proposal: https://gist.github.com/tony-o/07fdf8b3a0f364b182e6034131ac224b

[21:38] <kawaii> thanks!

[21:43] *** aluaces left
[21:47] *** wamba left
[21:50] *** abraxxa left
[21:55] *** abraxxa joined
[22:00] *** tejr joined
[22:03] *** squashable6 left
[22:04] *** skids left
[22:05] *** squashable6 joined
[22:06] *** Xliff joined
[22:07] *** markoong joined
[22:08] *** markong left
[22:10] <Xliff> Ahhh... I think I just did a nice bit of meta-programming....

[22:10] <tellable6> hey Xliff, you have a message: https://gist.github.com/2ad36d59c036273fbfc5588995a429e1

[22:10] <Xliff> https://repl.it/@Xliff/AvariciousRectangularMultiprocessing#main.p6

[22:10] <Xliff> Actually, that's...

[22:10] <Xliff> https://repl.it/@Xliff/AvariciousRectangularMultiprocessing#main.raku

[22:11] <Xliff> Generates method calls from C typing information in POD comments. :)

[22:11] *** abraxxa left
[22:12] *** abraxxa joined
[22:13] *** Altai-man_ joined
[22:15] *** Petr37 joined
[22:16] *** sena_kun left
[22:16] *** aborazmeh joined
[22:16] *** aborazmeh left
[22:16] *** aborazmeh joined
[22:17] <Petr37> sorry... Cro Services or Bailador for web development?

[22:17] <Xliff> Cro. I don't know if Bailador is still under development.

[22:19] <Petr37> Xliff, thanks 😊

[22:19] <Xliff> yw

[22:27] <oddp> Since when are they requiring this clowning around with the google captchas on repl.it? :(

[22:28] <Xliff> oddp: What? When?

[22:28] <Xliff> I haven't hit a captcha on repl.it all day...

[22:28] <oddp> Solved two and it's still not showing me code.

[22:28] <Xliff> Which link? Mine?

[22:29] <oddp> Yeah.

[22:29] <Xliff> Huh! Still not getting one and I logged out. Lemme try something else.

[22:30] <Xliff> oddp: Try this one -- https://glot.io/snippets/fpkmj1j6d5

[22:31] <oddp> Thanks. All good.

[22:31] *** Petr37 left
[22:31] <Xliff> Yeah. I generally don't like glot.io because it's hard to see the code.

[22:31] <Xliff> I wonder if this would make a good blog post....

[22:38] *** marcusr left
[22:39] *** kensanata left
[22:39] *** marcusr joined
[22:40] *** marcusr left
[22:42] *** marcusr joined
[22:45] *** leont left
[23:01] *** aborazmeh left
[23:02] *** tejr left
[23:05] *** OpenZen joined
[23:09] *** tejr joined
[23:17] *** tejr left
[23:22] *** tejr joined
[23:33] <cpan-raku> New module released to CPAN! Red (0.1.26) by 03FCO

[23:41] *** markoong left
[23:44] *** pecastro left
[23:54] *** Maylay left
[23:57] *** Maylay joined
[23:59] *** DarthGandalf left
[23:59] *** schlaftier9 joined
[23:59] *** schlaftier left
[23:59] *** schlaftier9 is now known as schlaftier

