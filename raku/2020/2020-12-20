[00:22] *** mowcat left
[00:22] *** xi left
[00:23] *** xi joined
[00:41] *** pecastro joined
[01:00] *** Henri left
[01:09] *** Doc_Holliwood left
[01:21] *** pecastro left
[01:44] <warriors> why is my $x = ^5 ; for $x {} different from for ^5 {}

[01:45] <timotimo> putting stuff into a scalar container (my $foo) makes them have item semantics

[01:45] <timotimo> you can decont it to have `for $x<> { }`, you can contextualize it as a list with `for @$x {}` or `for $x.list { }`

[01:46] <timotimo> if you use binding instead of =, i.e. `my $x := ^5` then you'll not have a scalar container, and the item semantics go away too

[01:47] <warriors> thanks

[01:54] <warriors> |$x also works

[01:54] <warriors> flattens object

[01:56] <timotimo> true, that'll be what you need if you have some extra items from another list you want to iterate over individually as well

[02:18] *** jmchael left
[02:42] *** cpan-raku left
[02:43] *** cpan-raku joined
[02:43] *** cpan-raku left
[02:43] *** cpan-raku joined
[02:55] *** RaycatWhoDat joined
[02:58] *** xinming left
[02:58] *** xinming joined
[03:04] *** Manifest0 left
[03:06] *** Manifest0 joined
[03:07] *** maggotbrain joined
[04:07] *** coverable6 left
[04:07] *** benchable6 left
[04:07] *** quotable6 left
[04:07] *** releasable6 left
[04:07] *** tellable6 left
[04:07] *** squashable6 left
[04:07] *** bloatable6 left
[04:07] *** nativecallable6 left
[04:07] *** unicodable6 left
[04:07] *** greppable6 left
[04:07] *** notable6 left
[04:07] *** xinming left
[04:07] *** bisectable6 left
[04:07] *** shareable6 left
[04:07] *** sourceable6 left
[04:07] *** committable6 left
[04:07] *** statisfiable6 left
[04:07] *** committable6 joined
[04:07] *** xinming joined
[04:07] *** bloatable6 joined
[04:07] *** benchable6 joined
[04:07] *** quotable6 joined
[04:08] *** wamba joined
[04:08] *** tellable6 joined
[04:08] *** statisfiable6 joined
[04:08] *** releasable6 joined
[04:08] *** shareable6 joined
[04:08] *** bisectable6 joined
[04:08] *** nativecallable6 joined
[04:09] *** notable6 joined
[04:09] *** unicodable6 joined
[04:09] *** sourceable6 joined
[04:09] *** squashable6 joined
[04:09] *** greppable6 joined
[04:10] *** coverable6 joined
[04:13] *** RaycatWhoDat left
[04:13] *** RaycatWhoDat joined
[04:42] *** wamba left
[05:03] *** xinming left
[05:03] *** xinming joined
[05:21] *** xinming left
[05:21] *** xinming joined
[05:35] *** RaycatWhoDat left
[06:00] *** rindolf joined
[06:08] *** gordonfish left
[06:24] *** brtastic joined
[06:43] *** dotdotdot left
[06:43] *** dotdotdot joined
[06:46] *** parabolize left
[07:13] *** Doc_Holliwood joined
[07:21] *** gordonfish joined
[07:29] <Geth> ¬¶ ecosystem: a1aa5910ba | (Henri Schmidt)++ | META.list

[07:29] <Geth> ¬¶ ecosystem: Add new Bio module. See https://github.com/schmidt73/Bio.

[07:29] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/a1aa5910ba

[07:29] <Geth> ¬¶ ecosystem: fd9d71bc3c | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[07:29] <Geth> ¬¶ ecosystem: Merge pull request #572 from schmidt73/add-bio-module

[07:29] <Geth> ¬¶ ecosystem: 

[07:29] <Geth> ¬¶ ecosystem: Add new Bio module. See https://github.com/schmidt73/Bio.

[07:29] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/fd9d71bc3c

[07:45] <Geth> ¬¶ doc: 52ad12dabd | (Stoned Elipot)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Type/Test.pod6

[07:45] <Geth> ¬¶ doc: Document Test.done-testing's return value

[07:45] <Geth> ¬¶ doc: 

[07:45] <Geth> ¬¶ doc: ref #3580

[07:45] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/52ad12dabd

[07:45] <linkable6> Link: https://docs.raku.org/type/Test

[07:45] <linkable6> DOC#3580 [open]: https://github.com/Raku/doc/issues/3580 [checklist][docs] Checklist for 2020.08

[07:51] *** wamba joined
[08:03] *** aborazmeh joined
[08:03] *** aborazmeh left
[08:03] *** aborazmeh joined
[08:13] *** brtastic left
[08:19] *** Doc_Holliwood left
[08:27] *** Doc_Holliwood joined
[08:52] *** ex_nihilo joined
[08:55] *** wamba left
[09:23] *** ToddAndMargo joined
[09:24] <ToddAndMargo> Anyone on newbie duty tonight?

[09:28] <ToddAndMargo> I am having trouble declaring a method inside a class.  Anyone available to look at my code on vpaste.net?

[09:30] <coldpress> ToddAndMargo: why not post the URL?

[09:30] <ToddAndMargo> I wanted to make sure someone was home first: http://vpaste.net/m6JZt

[09:32] <coldpress> pretty sure methods belong to an object, so `Angle.new.AngleCosine` should work

[09:34] <ToddAndMargo> I was trying to get around that.  I am trying to do a `say 1.cos` style method, only angle instead of radians

[09:34] *** wamba joined
[09:35] <ToddAndMargo> I am writing myself instructions on how to do methods and this wold make a good example

[09:37] *** cpan-raku left
[09:38] *** cpan-raku joined
[09:38] *** cpan-raku left
[09:38] *** cpan-raku joined
[09:39] <coldpress> I don't know if it's possible to extend native types like that

[09:40] <coldpress> I think `Angle(1).cos` would work, though

[09:40] *** sena_kun joined
[09:41] <ToddAndMargo> How would I alter this code to get `(45.0).AngleCosine` to work?

[09:41] <ToddAndMargo> Angle(1).cosCannot find method 'Angle' on object of type Int  in block <unit> at <unknown file> line 1

[09:43] <coldpress> sorry, forgot Raku has weird object initialization syntax

[09:43] <coldpress> I meant Angle.new(1).cos

[09:43] <coldpress> but that's not what you want

[09:48] <tyil> coldpress: you can `augment class Int` I'm sure

[09:48] <tyil> it works with Hash in one of my modules

[09:48] <tyil> but requires MONKEY-TYPING

[09:49] <tyil> and it'll cost you on performance

[09:49] <ToddAndMargo> I am told to stay away from the monkey!

[09:49] <tyil> and you should

[09:49] <tyil> I'm not saying you *should*, I'm saying you *can* do something

[09:51] <coldpress> cool, thanks for the tip

[09:51] <ToddAndMargo> I an even get this to work:     class PrintString2 {       method PrintStr( Str:D: )  {          print "self   = <" ~ self ~ ">\n";       }   }

[09:51] <ToddAndMargo> say "abc".PrintStrNo such method 'PrintStr' for invocant of type 'Str'

[09:52] <ToddAndMargo> I thought the `Str:D:` took care of that

[09:52] <tyil> why

[09:52] <coldpress> is there an easy way to make the lists in a set of lists unique? (easy means: without declaring a custom class that overrides WHICH)

[09:52] <tyil> "abc" is a Str, and Str doesn't have your method

[09:52] <coldpress> m: Set([[1],[1]])

[09:52] <camelia> rakudo-moar 357a7f300: ( no output )

[09:52] <coldpress> m: say Set([[1],[1]])

[09:52] <camelia> rakudo-moar 357a7f300: OUTPUT: ¬´Set([1] [1])‚ê§¬ª

[09:53] <coldpress> here there are two "identical" [1]'s, but Set considers them to be different

[09:53] <lizmat> Arrays are not value types

[09:54] <coldpress> yes I understand why Set considers them to be different

[09:54] <coldpress> is there an easy way to make Arrays value types?

[09:54] <ToddAndMargo> Now I am confused.  All values that are "Str" have to be in core.c Str.pm6?

[09:55] <tyil> what

[09:55] <tyil> is Raku your first object oriented language, ToddAndMargo?

[09:56] <ToddAndMargo> yes

[09:56] <tyil> (or your first programming language in general)

[09:56] <tyil> I would strongly recommend learning about object oriented programming before trying remotely advanced tricks

[09:56] <ToddAndMargo> not by any shake of the stick.  Never used OO though

[09:57] <tyil> otherwise you're just going to come in here every day being confused about rather simple things

[09:57] <tyil> and it's really frustrating for others to then realize they have to walk you through the absolute basics of OO

[09:57] <ToddAndMargo> I used Perl5 a lot before switching to Raku and that uses OO a lot.

[09:59] <ToddAndMargo> I do know that each implementation of OO is specific to the language it is used in. Do you know of a paper that explains how Raku is using OO and what the specific OO rules are for Raku?

[09:59] <ToddAndMargo> I am writing my own instructions with examples, so once I get it once, I should not have to come back here.

[10:00] <tyil> well, I've seen you return with very simple questions time and time again, and proper explanations being waved away

[10:00] <ToddAndMargo> Can you tell me what I did wrong in the code I posted?

[10:00] <tyil> 10:53 <tyil> "abc" is a Str, and Str doesn't have your method

[10:01] <ToddAndMargo> So back to the question, I can not use a type Str unless it is in code.c Str.pm6?  https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6

[10:02] <tyil> I'm really not eveen sure what you're trying to say here

[10:02] <ToddAndMargo> sorry core.c, not code.c

[10:02] <tyil> you're missing the core of OO too much here, and I don't have the patience to walk you through the bare basics

[10:03] <ToddAndMargo> Would you mind correcting the code I posted so I can pick it up by example?

[10:04] <ToddAndMargo> "when do I wave away" things?  Sometimes I do not understand, but I always state such.

[10:04] <tyil> what you're trying to do doesn't really work (though yes, you *can* do this in Raku specifically, it would introduce things that you've already been told to stay away from when possible)

[10:04] <tyil> well, you're waving away my advice to learn the basics before trying to dive into the deep end

[10:05] <ToddAndMargo> Oh, the monkey thing?

[10:06] <ToddAndMargo> I am not waving anything away.  I asked about a paper on the specific implementation of OO in Raku.  You never answered me.  Each language has its own implementation rules.  Where are Raku's?

[10:06] <tyil> I answered you to learn the basics of OO

[10:06] <tyil> not how Raku has implemented the ideas of OO

[10:07] *** ToddAndMargo left
[10:07] *** pecastro joined
[10:07] *** ToddAndMargo joined
[10:08] <ToddAndMargo> Sorry.  I got kicked off for some reason.

[10:08] <ToddAndMargo> Where are Raku implementation rules for OO?

[10:09] <tyil> pretty sure those are on the docs

[10:09] <tyil> https://docs.raku.org/language/classtut

[10:09] <tyil> but again, you're completely missing what I'm *actually* saying

[10:09] <tyil> stop trying to make huge leaps without prior knowledge

[10:10] <ToddAndMargo> I found that one already.  It says it is a tutorial, but it does not define what a class or an object is. It is badly written.  This is my definition:

[10:11] <ToddAndMargo>      "class" is a "container for methods (functions) and properties (variables),     and you can create multiple instances [objects] from a single template.       The rest (implementation) is language dependant.     Also, a class can have *internal* (private) variables that you can only     access by way of a method - which means that those

[10:11] <ToddAndMargo> internal variables     are not properties (that you can read from and/or write to)."

[10:11] <tyil> it is badly written for someone who doesn't know anything about OO, perhaps

[10:11] <tyil> when I started Raku years ago, docs.perl6.org had all the info I needed to do some object oriented programming with it

[10:11] <tyil> it has only improved since then

[10:12] <ToddAndMargo> And without link to or explaining how OO is implemented in Raku, it is pretty much useless to anyone that does not already know what they are doing and does not need it.

[10:12] <ToddAndMargo> Had you programmed in OO before? 

[10:13] <tyil> yes

[10:13] *** aborazmeh left
[10:13] <ToddAndMargo> Are you religiously opposed to correcting the code I posted?

[10:13] <tyil> which goes to show that it doesn't matter how Raku implements OO, you just need to know what OO is and how the concepts work

[10:14] <tyil> no, I'm opposed to your mindset

[10:14] <tyil> it prohibits you from understanding what you're doing

[10:14] <tyil> and in the long term, prohibits you from learning properly

[10:14] <tyil> you're trying to sprint a marathon before being able to walk

[10:15] <ToddAndMargo> we all learn in different manners.  Reading wikipedia's OO page would not help in with this issue

[10:15] <tyil> and then when you fall over, all you say is "no, I want to SPRINT, not WALK"

[10:15] <ToddAndMargo> The only way learn is to dive in.   Others learn differently than me.  And yes, I do admit I am weird.

[10:16] <tyil> well, if you keep blaming everyone who's trying to help you, and actively ignore what they're saying, I can't help you

[10:16] <tyil> I don't think anyone here can

[10:16] <ToddAndMargo> Whose it blaming anyone?  I sincerely appreciate the help.  Even yours

[10:17] <tyil> if you did appreciate it, you would do something with it

[10:17] <tyil> but you're still just telling me you don't want to learn the basics

[10:18] <ToddAndMargo> how about you posting a link to a good OO tutorial that you think will help with the code I posted?  Or you can continue insulting my skill level.  Where did you learn OO?

[10:18] <ToddAndMargo> Where are the basics?

[10:19] <tyil> https://www.tutorialspoint.com/What-is-object-oriented-programming-OOP

[10:19] <tyil> https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS

[10:19] <tyil> https://www.codeproject.com/articles/186107/object-orientation-beginners-tutorial

[10:19] *** sjm_uk joined
[10:19] <tyil> https://tutorials.supunkavinda.blog/php/oop-intro

[10:20] <ToddAndMargo> Thank you.  I have some reading to do

[10:20] <tyil> just 4 from the top of duck duck go

[10:20] <tyil> when searching "object oriented tutorial"

[10:20] <tyil> there's books on this

[10:20] <tyil> there's talks on this

[10:20] <tyil> there's decades of work poured into this

[10:20] <ToddAndMargo> Do you have a favorite link?

[10:20] <tyil> no

[10:20] <tadzik> also, it's notoriously not taught properly :)

[10:21] <tyil> tadzik: that's certainly true

[10:21] <tyil> the "best" OO info I got was at university

[10:21] <tadzik> I always had it explained to me as "classes are like structs, but they also have functions in them", since it was a logical consequence of complexity after learning C, I suppose

[10:22] <tadzik> and what taught me the most about it was hanging around then-Perl6 people who actually understood what it's for, rather than what it's made of :P

[10:22] <tyil> tadzik: a struct with function references is the most basic way you can do it in C iirc

[10:22] *** warriors left
[10:22] <ToddAndMargo> We were doing machine coding on 8080's when I was at university.  Fortran was the go to language

[10:22] <tadzik> tyil: or just have similarly named functions operating on plain structs, which is like Gtk does this afaik

[10:22] <tyil> but the language-specific implementation is mostly irrelevant here

[10:22] <tadzik> indeed

[10:23] <tadzik> the fun part is the idea that makes you think of objects in your program as sets of operations that abstract away some data, so that the data structures themselves become mostly irrelevant

[10:23] <tadzik> it's the switch from "what is it made of" to "what does it do, somehow"

[10:23] <tadzik> for me anyway

[10:24] <tadzik> and then you have Perl and Raku that hit it off with "your attributes and your interface are two sides of the same coin and we're making it as easy as possible to disregard the difference" and argh, but I've ranted about that before :P

[10:25] <tyil> coming from (mostly) php, Raku is not all that different in how I'd do things

[10:25] <tyil> when it comes to OO design, at least

[10:26] <tyil> it still adheres to the methodology pretty well, so if you know that, all you need to read is the class tutorial on docs.raku.org

[10:27] *** stoned75 left
[10:31] *** Sgeo left
[10:32] <tyil> ToddAndMargo: https://www.youtube.com/results?search_query=theory+on+object+oriented+programming there's a bunch more potential things here, even a 40 minute talk from MIT

[10:33] <ToddAndMargo> thank you

[10:45] <ToddAndMargo> Thank you all for the tips!   I am calling it a night. 

[10:45] *** ToddAndMargo left
[10:55] <El_Che> rakudo-pkg: all distro's look ok, except FPM on ubuntu 20.04. I'll release the packages whem I fix that

[10:56] <lizmat> El_Che++

[10:59] *** Black_Ribbon left
[11:09] *** leont joined
[11:12] *** Doc_Holliwood left
[11:22] *** brtastic joined
[11:50] *** brtastic left
[11:50] *** brtastic joined
[12:46] *** jmchael joined
[12:56] *** sjm_uk left
[12:57] *** domidumont joined
[13:08] *** Altai-man joined
[13:11] *** sena_kun left
[13:19] *** MasterDuke left
[13:43] *** sjm_uk joined
[14:12] *** domidumont left
[14:14] *** simcop2387 left
[14:31] *** domidumont joined
[14:32] *** camelCaser left
[14:37] *** camelCaser joined
[14:42] *** rindolf left
[14:49] *** mowcat joined
[14:50] *** sjm_uk left
[14:52] *** simcop2387 joined
[15:03] *** parabolize joined
[15:22] *** domidumont left
[15:23] *** pecastro left
[15:28] *** pecastro joined
[15:32] <coldpress> Hi, what's the best way to concatenate two 2D arrays horizontally?

[15:32] <coldpress> m: (map {[[&append]] $_}, map *.Array.List, [Z] [[1,2],[3,4]], [[1,2],[3,4]]).say

[15:32] <camelia> rakudo-moar 357a7f300: OUTPUT: ¬´([1 2 1 2] [3 4 3 4])‚ê§¬ª

[15:33] *** Doc_Holliwood joined
[15:36] *** domidumont joined
[15:47] *** gordonfish left
[15:48] *** fridim left
[15:50] *** sjm_uk joined
[15:50] *** gordonfish joined
[15:54] *** mowcat left
[16:03] *** domidumont left
[16:09] *** Doc_Holliwood left
[16:20] *** domidumont joined
[16:20] *** rindolf joined
[16:34] *** domidumont left
[16:41] *** rindolf left
[16:43] *** domidumont joined
[17:04] *** domidumont left
[17:07] *** rindolf joined
[17:09] *** sena_kun joined
[17:10] *** Altai-man left
[17:21] *** domidumont joined
[17:25] *** redhands joined
[17:31] *** MasterDuke joined
[17:40] *** domidumont left
[17:46] *** maggotbrain left
[17:51] *** Doc_Holliwood joined
[18:00] *** hungrydonkey joined
[18:04] *** redhands left
[18:07] *** lucasb joined
[18:22] *** ex_nihilo left
[18:30] *** xinming left
[18:31] *** xinming joined
[18:45] *** jmerelo joined
[18:54] <El_Che> ok, found workaround for ruby ffi

[18:54] <El_Che> so release will happen once built

[19:03] *** xelxebar left
[19:03] *** xelxebar joined
[19:04] *** sjm_uk left
[19:10] *** sjm_uk joined
[19:10] *** samcv_ is now known as samcv

[19:11] *** samcv left
[19:11] *** samcv joined
[19:14] <jmerelo> hey, samcv 

[19:24] *** jmerelo left
[19:28] *** Merfont left
[19:29] *** Kaiepi joined
[19:35] *** benjif joined
[19:43] *** Sgeo joined
[19:46] *** brtastic left
[19:47] *** aborazmeh joined
[19:47] *** aborazmeh left
[19:47] *** aborazmeh joined
[19:59] *** patrickb joined
[20:08] <Geth> ¬¶ doc: JustThisGuyAZ++ created pull request #3743: Update Map.pod6

[20:08] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3743

[20:24] *** rindolf left
[20:33] *** xinming left
[20:34] *** xinming joined
[20:36] *** grumble is now known as SeasonsBeatings

[20:37] *** patrickb left
[20:51] *** mowcat joined
[20:59] *** sjm_uk left
[21:08] *** Altai-man joined
[21:10] *** joahim3 joined
[21:11] *** joahim3 left
[21:11] *** sena_kun left
[21:17] *** Altai-man left
[21:44] *** brtastic joined
[21:51] *** brtastic left
[22:08] *** gtodd joined
[22:12] <El_Che> weekly: https://github.com/nxadm/rakudo-pkg/releases/tag/v2020.12

[22:12] <notable6> El_Che, Noted! (weekly)

[22:18] *** xinming left
[22:19] *** xinming joined
[23:13] *** ggoebel left
[23:19] *** aborazmeh left
[23:19] *** cpan-raku left
[23:24] *** cpan-raku joined
[23:24] *** cpan-raku left
[23:24] *** cpan-raku joined
[23:29] *** ggoebel joined
[23:41] *** MasterDuke left
