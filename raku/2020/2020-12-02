[00:01] <valley> Oh, ouch. Sometimes I feel like an idiot. I just assumed the `.raku` was there for a reason and didn't even think about removing it. Thank you for the help. I swear I'm not usually this dumb, programming after a long and stressful day of work can be hard.

[00:02] <moon-child> :)

[00:05] <valley> And I do plan on making this a pure Raku program if possible (meaning no capturing command/shell output). Whenever I get started with a new language, I make an info fetch program that initially captures command output, and I slowly work my way up to properly parsing files and all that.

[00:12] *** Doc_Holliwould left
[00:14] *** pecastro left
[00:14] *** Doc_Holliwould joined
[00:18] *** m_athias left
[00:18] *** ape666 joined
[00:21] *** m_athias joined
[00:32] *** BenGoldberg joined
[00:36] *** RaycatWhoDat left
[00:39] *** jmchael left
[00:45] <codesections> I just came up with an advent 

[00:46] <codesections> *advent of code solution that is probably too short/cryptic to be anything I'd actually use, but it was a lot of fun to write:

[00:46] <codesections> https://github.com/codesections/advent-of-raku-2020/blob/main/codesections/01/reduce

[00:48] <codesections> (and, the more I look at it, the closer I come to convincing myself it makes perfect sense)

[00:48] *** ben_ left
[01:05] *** BenGoldberg left
[01:05] *** BenGoldberg joined
[01:06] *** RaycatWhoDat joined
[01:12] *** ape666 left
[01:12] *** RaycatWhoDat left
[01:23] *** valley left
[01:24] *** MasterDuke left
[01:30] *** Util left
[01:30] *** Doc_Holliwould left
[01:33] *** lucasb left
[01:38] <MitarashiDango[m> Couldn't you ditch the $p2 default and just use ?$p2 after the plus (for the sake of golfing further)

[01:52] *** ape666 joined
[01:56] *** aborazmeh joined
[01:56] *** aborazmeh left
[01:56] *** aborazmeh joined
[01:58] *** fridim left
[01:58] *** fridim joined
[02:04] *** RaycatWhoDat joined
[02:08] *** El_Che left
[02:08] *** El_Che joined
[02:11] *** RaycatWhoDat left
[02:22] *** coldpress joined
[02:35] *** ape666 left
[02:45] <codesections> Yeah, I guess I could.  I was kind of treating the `unit sub MAIN` line as "free" and just focusing on the "substantive" line

[02:46] <codesections> if I'm golfing the character count, I guess I'd want to use braces instead of `unit` too

[02:46] <guifa> Weird.  binding is slower than normal assignment

[02:48] <guifa> but not consistently?  Maybe I Need better tests

[03:02] *** RaycatWhoDat joined
[03:06] *** RaycatWhoDat left
[03:06] *** RaycatWhoDat joined
[03:11] *** RaycatWhoDat left
[03:28] *** sten37 joined
[03:31] <sten37> How to explain??     (1..5) »*« (6..10)  (# no questions), but (1..5) [»*«] (6..10)  (#same thing !)

[03:32] <sten37> (raku 2020.11)

[03:37] *** leont left
[03:43] *** ensamvarg3 joined
[03:52] <coldpress> I can say lines.combinations(3); but why can't I my @combined-lines = lines.combinations(3); say @combined-lines; ?

[03:52] <coldpress> I get this error: uv__close: Assertion `fd > STDERR_FILENO' failed.

[03:52] <coldpress> invoking with `raku file < in`

[03:52] <coldpress> .combinations(2) does not give this error

[04:05] *** RaycatWhoDat joined
[04:11] *** aborazmeh left
[04:11] *** RaycatWhoDat left
[04:12] *** dataangel joined
[04:12] *** RaycatWhoDat joined
[04:21] *** RaycatWhoDat left
[04:27] <coldpress> it's all good now, plagarized raku AoC solutions :)

[04:28] <coldpress> I think I don't understand how functions return values

[04:30] <coldpress> `sub f() { ...; say ... }` outputs my answer, but `say f()` outputs Nil

[04:30] *** Doc_Holliwould joined
[04:31] <moon-child> coldpress: 'sub f() { foo; bar; baz }' returns baz

[04:31] <moon-child> 'say' returns null

[04:31] <coldpress> correction: `sub f() { ...; say computation }` outputs my computation, but `sub f() { ...; computation } say f()` outputs Nil

[04:32] <moon-child> m: sub f() { 5; 6; 7 }; say f()

[04:32] <camelia> rakudo-moar 80f928364: OUTPUT: «WARNINGS for <tmp>:␤7␤Useless use of constant integer 5 in sink context (line 1)␤Useless use of constant integer 6 in sink context (line 1)␤»

[04:33] <moon-child> (also note that you can leave out the ())

[04:34] <coldpress> yes, that's what I expect. I think the when-for computation messes it up somehow?

[04:34] <moon-child> code?

[04:34] <coldpress> m: sub solve($lines, $p2) {[*] $_ if .sum == 2020 for $lines.combinations($p2 ?? 3 !! 2) }; say solve([1721,979,366,299,675,1456], True);

[04:34] <camelia> rakudo-moar 80f928364: OUTPUT: «Nil␤»

[04:35] <coldpress> m: sub solve($lines, $p2) {say [*] $_ if .sum == 2020 for $lines.combinations($p2 ?? 3 !! 2) }; solve([1721,979,366,299,675,1456], True);

[04:35] <camelia> rakudo-moar 80f928364: OUTPUT: «241861950␤»

[04:37] *** squashable6 left
[04:37] <moon-child> I'm not entirely sure why that's the case, but I do notice that wrapping parens around the expression in the function makes the problem go away

[04:38] *** squashable6 joined
[04:42] <coldpress> moon-child: by wrapping parens, you mean `sub solve { ( ... ) }`? This constructs a list, right?

[04:43] <coldpress> that resolves my issue, thank you very much

[04:46] *** xelxebar left
[04:46] *** xelxebar joined
[04:48] <coldpress> another way to resolve is `sub solve { return ... }`

[04:48] <coldpress> no list is constructed, so I think this is preferable

[04:57] *** RaycatWhoDat joined
[05:02] *** RaycatWhoDat left
[05:06] *** RaycatWhoDat joined
[05:12] *** RaycatWhoDat left
[05:12] *** RaycatWhoDat joined
[05:19] *** RaycatWhoDat left
[05:21] *** BenGoldberg left
[05:41] *** Doc_Holliwould left
[05:48] *** parabolize left
[05:53] *** sten37 left
[06:01] *** RaycatWhoDat joined
[06:05] *** xinming joined
[06:06] *** RaycatWhoDat left
[06:06] *** RaycatWhoDat joined
[06:06] *** sena_kun joined
[06:08] *** xinming_ left
[06:11] *** RaycatWhoDat left
[06:43] *** aluaces joined
[06:45] *** jmerelo joined
[06:46] <jmerelo> Today's post starts with "Perl is dead" https://raku-advent.blog/2020/12/02/day-1-perl-is-dead-long-live-perl-and-raku/

[06:48] <sjn> nice article :)

[06:50] <sjn> (though, I'd have loved to see some acknowledgment that Larry _and his community_ designed the language - many people had a hand in that process! Maybe there's an ackowledgment list somewhere to link to?)

[06:52] <sjn> Damian's work should definitely not go ignored, certainly.

[06:53] <sjn> Looking at https://design.raku.org/ there's an AUTHORS section at the end of most files

[06:54] <sjn> jmerelo: Maybe https://github.com/Raku/mu/blob/master/AUTHORS is a good list to link to? :)

[06:56] *** domidumont joined
[06:57] *** RaycatWhoDat joined
[07:03] *** RaycatWhoDat left
[07:04] <jmerelo> sjn: you can comment at the post, and the author is usually around here too

[07:04] <jmerelo> .seen nigehamilton

[07:04] <tellable6> jmerelo, I haven't seen nigehamilton around

[07:04] <jmerelo> .seen nigehamilton_

[07:04] <tellable6> jmerelo, I haven't seen nigehamilton_ around

[07:04] <jmerelo> .seen nige123

[07:04] <tellable6> jmerelo, I haven't seen nige123 around, did you mean nige1?

[07:05] <sjn> no worries :)

[07:07] *** RaycatWhoDat joined
[07:11] *** RaycatWhoDat left
[07:15] *** sjm_uk joined
[07:23] *** aluaces left
[07:25] <coldpress> hmm, URL says day-1

[07:39] *** RaycatWhoDat joined
[07:42] *** wamba joined
[07:44] *** jmerelo left
[07:44] *** RaycatWhoDat left
[07:57] *** abraxxa joined
[07:59] *** abraxxa left
[08:00] *** abraxxa joined
[08:00] *** jmerelo joined
[08:01] *** RaycatWhoDat joined
[08:02] *** fridim left
[08:03] *** fridim joined
[08:05] *** abraxxa left
[08:05] *** abraxxa joined
[08:06] *** RaycatWhoDat left
[08:06] *** RaycatWhoDat joined
[08:11] *** RaycatWhoDat left
[08:11] *** RaycatWhoDat joined
[08:12] *** BenGoldberg joined
[08:12] *** frost-lab joined
[08:15] *** aluaces joined
[08:18] *** RaycatWhoDat left
[08:25] *** skids left
[08:39] *** dakkar joined
[08:44] *** MasterDuke joined
[08:45] *** BenGoldberg left
[08:46] *** stoned75 joined
[08:57] <jmerelo> coldpress: noted

[08:58] <jmerelo> coldpress: problem is I can't change it now... it was scheduled to be published yesterday initially. But I'll fix it for the next ones. Thanks!

[09:02] *** nige joined
[09:03] <nige> hi o/

[09:03] *** pecastro joined
[09:04] <nige> happy to make an amend to the article - it's true that Larry designed it with the help of the community

[09:04] <nige> https://github.com/Raku/mu/blob/master/AUTHORS <--- should I link to this one?

[09:06] *** Altai-man joined
[09:06] *** nige left
[09:07] *** nige joined
[09:07] *** Geth left
[09:08] <jmerelo> nige: probably

[09:09] *** sena_kun left
[09:09] *** Sgeo left
[09:09] <nige> ok - cool  - sentence now reads: When Larry Wall designed Raku, with the help of the Perl community, he fixed most of Perl's imperfections and doubled down on Perl's DNA.

[09:10] <nige> where "Perl community" links to - https://github.com/Raku/mu/blob/master/AUTHORS

[09:10] <nige> and "designed" links to - https://design.raku.org

[09:10] *** cpan-raku left
[09:12] *** nige left
[09:12] *** nige joined
[09:16] *** nige left
[09:17] *** nige joined
[09:22] *** nige left
[09:22] *** nige joined
[09:26] <JJAtria[m]> Is there a reason we don't have a touch in IO::Path? I was expecting to see that, or have eg. modified be a setter as, but the closest I've seen is https://trizen.gitbook.io/perl6-rosettacode/programming-tasks/f/file_modification_time 

[09:27] *** nige left
[09:27] *** nige joined
[09:36] <jmerelo> nige: please note this too https://raku-advent.blog/2020/12/02/day-1-perl-is-dead-long-live-perl-and-raku/comment-page-1/#comment-368

[09:41] *** ufobat_ left
[09:45] <notandinus> what is the equivalent to perldoc for raku?

[09:46] *** a3f left
[09:49] *** harrison joined
[09:49] *** aborazmeh joined
[09:49] *** aborazmeh left
[09:49] *** aborazmeh joined
[09:49] <moritz> https://docs.raku.org/

[09:50] *** cpan-raku joined
[09:50] *** cpan-raku left
[09:50] *** cpan-raku joined
[09:50] <moritz> there is some bare-bones command line tool, but IMHO it's not good enough to be worth using

[09:52] <notandinus> which version of rakudo includes zef? looks like the one in openbsd ports doesn't come with zef

[09:53] *** natrys joined
[09:55] <moritz> zef is a third-party module

[09:55] <moritz> if you have access to a rakudo-star package, that should come with zef

[09:56] <notandinus> i see, ports only has rakudo-2018.11

[09:57] <notandinus> hmm looks like i can build the rakudo-star version from source, it has instructions for obsd

[09:57] *** aborazmeh left
[09:59] <moritz> also, rakudo development still moves quickly enough that I wouldn't advise using a 2 year old version

[09:59] <jmerelo> even more so if it's prior to the rename...

[10:08] <notandinus> i see, looks like someone did it sometime ago, https://blog.lambda.cx/posts/openbsd-compiling-rakudo-star/

[10:08] <notandinus> should i go the rstar way or get rakubrew from cpan and install with it?

[10:11] <Zero_Dogg> You don't actually need rakudo-star these days. rakudo and zef should be enough

[10:12] <jmerelo> notandinus: the rakudo star version has everything in and is reasonably up to date. Give it a try first.

[10:20] <notandinus> i see, i'll try installing rakudo-star then

[10:32] *** nige left
[10:32] *** nige joined
[10:37] *** nige left
[10:37] *** nige joined
[10:45] *** Doc_Holliwould joined
[10:46] *** Black_Ribbon left
[10:55] *** morayj joined
[10:57] <xinming> Hi, today, I watched video from jnthn on youtube about perl6 optimization, we got quite a lot improvements there. but still got me curious, do we still have much room to optimize the compiler to make it run much faster than it was now?

[10:57] *** nige left
[10:57] *** nige joined
[11:01] <moritz> xinming: there is some more potential, but it requires a few bigger changes, like the higher-level AST that preserves more context for the optimizer (rakuast branch)

[11:01] *** nige left
[11:02] *** nige joined
[11:02] <xinming> moritz: Ok, Thanks, BTW, when I run raku script I wrote, I got, Command terminated, How can I debug this?

[11:04] <timotimo> are you on linux?

[11:04] <xinming> yea, I do

[11:04] <xinming> And I think it might be caused by

[11:04] <timotimo> command terminates sounds like maybe a segfault or other signal

[11:05] <timotimo> dmesg would usually point out segfaults

[11:05] <xinming> class AA { multi method test ('aaa', My::ObjectType $object) { } }; AA.test('aaa', $obj);

[11:05] <xinming> timotimo: Ok

[11:05] <timotimo> with rakudo-gdb-m you can get backtraces of where it asplodes

[11:05] <xinming> Yea

[11:05] <xinming> I got it.

[11:05] <timotimo> could be out-of-memory killed

[11:06] <timotimo> there doesn't seem to be a $obj declared in your code

[11:06] <xinming> Nope

[11:06] <xinming> https://termbin.com/alg4

[11:06] <xinming> timotimo: It's just illustration, It's a large script.

[11:06] <timotimo> OK

[11:06] <xinming> and later, I changed to AA.new.test('aaa', $obj)    I got an error

[11:08] <timotimo> infinite recursion is a way to get a crash at record speeds, though if you don't have a ulimit set it may make your computer unusable for a couple minutes

[11:08] *** squashable6 left
[11:09] <xinming> timotimo: yea, But my computer is not freezed at all, It just runs and runs, and soon, I receive Command terminated error.

[11:09] <timotimo> OK

[11:11] *** squashable6 joined
[11:13] <timotimo> what kind of help would you like?

[11:14] <xinming> Nothing ATM, Just now, I tried to repeat the issue, now, it always raises error.

[11:14] *** rindolf joined
[11:16] <timotimo> are you accessing one hash or array from multiple threads at the same time, per chance?

[11:16] <timotimo> apart from NativeCall, that is one major way to segfault or crash a rakudo

[11:17] <xinming> I don't think so, as I don't use multi threads feature

[11:18] <timotimo> OK

[11:18] <xinming> before I try to fix the issue, I don't know where I modified, it's now always raises error instead of `Command terminated` thin

[11:19] <timotimo> oh, error as in an Exception

[11:24] *** a3f joined
[11:27] *** nige left
[11:27] *** nige joined
[11:29] *** Geth joined
[11:31] *** nige left
[11:32] *** nige joined
[11:36] *** BenGoldberg joined
[11:48] <Geth> ¦ advent: 58eadd37b8 | (Tom Browder)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[11:48] <Geth> ¦ advent: Update CONTRIBUTING.md

[11:48] <Geth> ¦ advent: 

[11:48] <Geth> ¦ advent: Update a bit. Needs more love.

[11:48] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/58eadd37b8

[12:05] <notandinus> ok so i installed rakudo-star from source on OpenBSD, it took ~1H with default module list

[12:09] <jmerelo> notandinus++

[12:10] <notandinus> hmm something went wrong 

[12:10] <notandinus> ld.so: raku: can't load library 'libmoar.so'

[12:10] <notandinus> Killed

[12:10] <notandinus> ^ it says this when i run it

[12:11] *** BenGoldberg left
[12:12] *** nige left
[12:12] *** nige joined
[12:14] *** abraxxa left
[12:17] *** nige left
[12:17] *** nige joined
[12:18] <notandinus> hmm i figured out the error, i moved the whole directory to another location thinking that won't change anything. i've symlinked the old install directory to the new one & it works fine now

[12:19] *** abraxxa joined
[12:19] <timotimo> is that that one feature in rpath that openbsd doesn't have that we rely on for relocatable builds?

[12:37] *** nige left
[12:37] *** nige joined
[12:40] <Geth> ¦ advent: b28fa1e3b3 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2020/authors.md

[12:40] <Geth> ¦ advent: Update with new title

[12:40] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/b28fa1e3b3

[12:45] *** morayj left
[12:46] <notandinus> what would be the best way to get each line of a file in an array? i'm thinking of slurp'ng it and splitting 

[12:46] <lizmat> my @array = "file".IO.lines

[12:47] <lizmat> this will also remove newlines for you

[12:47] <lizmat> if you want to keep them:

[12:47] <lizmat> my @array = "file".IO.lines(:!chomp)

[12:48] <lizmat> notandinus ^^

[12:49] <notandinus> ah thanks

[12:50] <notandinus> i wanted this, found it from someone elses code : my @inputs = "input.txt".IO.lines>>.Int;

[12:50] <notandinus> i need to read up on this methods thing, i only understand functions

[12:50] <lizmat> if you just want to take from STDIN, its just "lines"

[12:50] <lizmat> my @array = lines

[12:51] <lizmat> if you want words from STDIN:

[12:51] <lizmat> my @array = words  

[12:51] <lizmat> :-)

[12:51] *** nige left
[12:52] *** nige joined
[12:52] <notandinus> ah thats nice, thanks

[12:52] <lizmat> ah, and if you just want STDIN as a string: slurp

[12:53] <lizmat> my $stdin-as-a-single-string = slurp

[12:56] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2020/12/02/santa-is-pseudo-packaging/

[12:56] <notandinus> thanks, i'm saving these for later

[12:56] <notandinus> i was doing the advent of code thing

[13:01] *** domidumont1 joined
[13:03] *** domidumont left
[13:07] *** nige left
[13:07] *** nige joined
[13:07] *** sena_kun joined
[13:09] *** Altai-man left
[13:11] *** nige left
[13:12] *** nige joined
[13:12] <Geth> ¦ advent: 3b40509262 | p6steve++ (committed using GitHub Web editor) | raku-advent-2020/local-drafts/p6steve-rudolph-on-raku.md

[13:12] <Geth> ¦ advent: some comments in the Bearing code section

[13:12] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/3b40509262

[13:15] <notandinus> how would i improve this: http://ix.io/2Gft

[13:16] <notandinus> looks like $num scope is larger than the while loop, i want its scope to be only the loop

[13:17] <timotimo> internal server error :<

[13:18] <notandinus> oh, sorry looks like it got fixed, works fine on my end

[13:19] <timotimo> m: my @nums = 1e0 ... 10e0; while shift @nums -> $num { say $num }

[13:19] <camelia> rakudo-moar 0d1c8a8ee: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[13:19] <timotimo> m: my @nums = 1e0 ... 10e0; while shift @nums -> $num { say $num }; say $num

[13:19] <camelia> rakudo-moar 0d1c8a8ee: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$num' is not declared.  Did you mean any of these: 'num',␤'Num'?␤at <tmp>:1␤------> 3e shift @nums -> $num { say $num }; say 7⏏5$num␤»

[13:19] <timotimo> ^- note that this will abort if the value shifted off the array booleans to false, for example 0e0

[13:19] <moritz> notandinus: you could do something like: for @inputs.kv -> $idx, $num {  }

[13:20] <moritz> and then only iterate over @inputs[$idx..*] inside the loop

[13:20] <timotimo> @inputs.skip($idx) or $idx - 1 depending on what exactly you need

[13:20] <timotimo> or + 1 i mean

[13:21] <notandinus> ah that looks better, i only need to go over an index one time

[13:21] <notandinus> so i'll iterate over @inputs[$idx..*]

[13:22] *** nige left
[13:22] *** nige joined
[13:25] <notandinus> looks like that is significantly slower than previous code

[13:25] <notandinus> i did: http://ix.io/2Gfx

[13:26] <notandinus> this new one takes ~ 2.3 s whereas previous one took ~1.7 s

[13:26] <moritz> internal server again :-(

[13:26] <notandinus> what could be causing this?

[13:26] <moritz> maybe that slice is slow

[13:26] <notandinus> oh i guess ix.io is under load, i'll use another paste

[13:26] *** nige left
[13:27] *** nige joined
[13:27] <notandinus> did it load? paste.debian.net is also down :(

[13:29] <moritz> it loaded on the third attempt :D

[13:29] <notandinus> oh ghostbin is also down, do you know of any other paste serivce?

[13:29] <notandinus> ah nice

[13:30] <notandinus> yeah the slice part is the only change, rest is same

[13:30] <moritz> gist.github.com

[13:31] <moritz> http://perlpunks.de/paste

[13:32] <notandinus> thanks i'll bookmark it

[13:32] *** nige left
[13:32] *** nige joined
[13:35] <notandinus> raku in general seems slower than perl, will this improve in later versions?

[13:35] <moritz> we're working on it

[13:40] <timotimo> we just had a relatively big performance regression in the last release

[13:41] <timotimo> which was a fix for correctness that wasn't fully optimized at the time of the release

[13:44] <sena_kun> timotimo, I think it is relatively big in some isolated examples, though, not in general.

[13:49] <timotimo> OK

[13:51] *** nige left
[13:52] *** nige joined
[13:54] *** ggoebel joined
[13:56] *** aindilis` joined
[13:57] *** aindilis left
[13:57] <ggoebel> how does one force an object to interpolate as a string in a regular expression? i.e. assume $a is an object where ~$a stringifies it to 'abc'. what is the correct way to say 'abc' ~~ /~$a/? 

[13:58] <timotimo> $a won't do it already?

[13:58] <ggoebel> maybe I'm overthinking it...

[13:58] <timotimo> m: my $to-match = "abc"; say "123abc987" ~~ / . $to-match . /

[13:58] <camelia> rakudo-moar 161325e08: OUTPUT: «｢3abc9｣␤»

[13:58] <moritz> ggoebel: there is no special syntax for that; you might need to create the stringified variable outside of the regex

[13:59] <timotimo> m: my @to-match = "abc", "xyz"; say "123abc xyz987" ~~ / . $(@to-match) . /

[13:59] <camelia> rakudo-moar 161325e08: OUTPUT: «｢3abc xyz9｣␤»

[13:59] <timotimo> m: my @to-match = "abc", "xyz"; say "123abc xyz987" ~~ / . $(~@to-match) . /

[13:59] <camelia> rakudo-moar 161325e08: OUTPUT: «｢3abc xyz9｣␤»

[13:59] <timotimo> this seems to work

[14:02] <moritz> m: class A { method Str() { "abc" } }; my $x = A.new; say "fooabcd" ~~ /$x/

[14:02] <camelia> rakudo-moar 161325e08: OUTPUT: «｢abc｣␤»

[14:02] <moritz> seems to work fine

[14:02] *** nige left
[14:02] *** nige joined
[14:03] *** harrison left
[14:04] <ggoebel> my token x { 'abc' }; 'abc' ~~ /<x>/; if ('abc' ~~ /$<x>/) { say "1" }

[14:04] <ggoebel> doesn't work...

[14:05] <timotimo> tokens are like subs and have & as their sigil

[14:05] <ggoebel> my token x { 'abc' }; 'abc' ~~ /<x>/; my $x = ~$<x>; if ('abc' ~~ /$x/) { say "2" }

[14:05] <evalable6> ggoebel, rakudo-moar 161325e08: OUTPUT: «2␤»

[14:05] <ggoebel> does

[14:06] <timotimo> m: my token x { 'abc' }; say 'abc' ~~ /<x>/; if ('abc' ~~ / &x /) { say "1" }

[14:06] <camelia> rakudo-moar 161325e08: OUTPUT: «｢abc｣␤ x => ｢abc｣␤»

[14:06] <timotimo> m: my token x { 'abc' }; say 'abc' ~~ /<x>/; if ('abc' ~~ / $&x /) { say "1" }

[14:06] <camelia> rakudo-moar 161325e08: OUTPUT: «｢abc｣␤ x => ｢abc｣␤1␤»

[14:06] *** nige left
[14:07] *** nige joined
[14:07] <ggoebel> does

[14:08] <ggoebel> thank you!

[14:17] *** ape666 joined
[14:18] <notandinus> moritz:  i see, that's nice

[14:18] *** frost-lab left
[14:20] *** tankf33der joined
[14:24] *** aindilis` left
[14:25] *** aindilis joined
[14:27] *** nige left
[14:27] *** nige joined
[14:30] *** leont joined
[14:33] *** parabolize joined
[14:35] *** wamba left
[14:44] *** abraxxa left
[14:46] *** ape666 left
[14:46] *** nige left
[14:47] *** nige joined
[14:47] *** abraxxa1 joined
[14:49] *** ape666 joined
[14:50] *** ufobat joined
[14:53] <ggoebel> timotimo: I don't think I'm fully understanding what you did with the token when you do $&x. If I am trying to match against what the token captured... how do I make the following work?

[14:53] <ggoebel> my token x { <:alpha>+ } my token y { <:alpha> <x> } if ('bc' ~~ /$(~$<y><x>)/) { say "ok" }

[14:53] <ggoebel> oops

[14:54] <ggoebel> my token x { <:alpha>+ } my token y { <:alpha> <x> } say 'abc' ~~ /<y>/; if ('bc' ~~ /$(~$<y><x>)/) { say "ok" }

[14:54] <timotimo> not sure if that's what you mean, but you can always $<blorp>=$<y> and then probably $/<blorp>

[14:57] *** wamba joined
[14:57] <ggoebel> m: my token x { <:alpha>+ } my token y { <:alpha> <x> } say 'abc' ~~ /<y>/; my $foo = ~$<y><x>; if ('bc' ~~ /$foo/) { say "ok" }

[14:57] <camelia> rakudo-moar 161325e08: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3my token x { <:alpha>+ }7⏏5 my token y { <:alpha> <x> } say 'abc' ~␤    expecting any of:␤        infix␤       …»

[14:58] <ggoebel> m: my token x { <:alpha>+ }; my token y { <:alpha> <x> }; say 'abc' ~~ /<y>/; my $foo = ~$<y><x>; if ('bc' ~~ /$foo/) { say "ok" }

[14:58] <camelia> rakudo-moar 161325e08: OUTPUT: «｢abc｣␤ y => ｢abc｣␤  x => ｢bc｣␤ok␤»

[14:58] *** tankf33der left
[14:59] <ggoebel> is there a way to avoid declaring $foo and assigning ~$<y><x> to it?

[15:01] *** BenGoldberg joined
[15:02] *** nige left
[15:02] <ggoebel> is there a way to avoid declaring $foo and assigning ~$<y><x> to it?

[15:02] <ggoebel> sorry

[15:02] *** nige joined
[15:14] <dakkar> m: my token x { <:alpha>+ }; my token y { <:alpha> <x> }; say 'abc' ~~ /<y>/; if ('bc' ~~ /<{~$<y><x>}>/) { say "ok" } # ggoebel 

[15:14] <camelia> rakudo-moar 161325e08: OUTPUT: «｢abc｣␤ y => ｢abc｣␤  x => ｢bc｣␤Use of Nil in string context␤  in block  at <tmp> line 1␤5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Null regex not allowed␤at /home/camelia/EVAL_0:1␤------> 3anon regex {  …»

[15:15] <dakkar> that explodes because the match object gets reset at the start of the match

[15:15] *** Sgeo joined
[15:16] <dakkar> m: my token x { <:alpha>+ }; my token y { <:alpha> <x> }; my $m = 'abc' ~~ /<y>/; if ('bc' ~~ /<{~$m<y><x>}>/) { say "ok" }

[15:16] <camelia> rakudo-moar 161325e08: OUTPUT: «ok␤»

[15:16] <dakkar> that works, because I saved the match object

[15:16] <dakkar> ggoebel: does any of that help?

[15:20] *** aluaces left
[15:35] *** BenGoldberg left
[15:41] <guifa> I know I’ve asked it before, but is there anyway to subclass Str? Mixins are (at least currently) a good bit slower than doing outright subclasses, so I’d love to be able to avoid them if possible

[15:42] *** nige left
[15:42] *** nige joined
[15:43] *** ape666 left
[15:46] <ggoebel> dakkar: thank you!

[15:46] <ggoebel> for both the solution and explanation dakkar++

[15:47] *** ensamvarg3 left
[15:48] *** wamba left
[15:48] *** sjm_uk left
[15:56] <xinming> m: role R {  method t () { "R" }; }; class A does R { method t () { "A".say; }; }; A.new.t.say;

[15:56] <camelia> rakudo-moar 161325e08: OUTPUT: «A␤True␤»

[16:01] *** sjm_uk joined
[16:02] *** nige left
[16:02] *** nige joined
[16:06] *** nige left
[16:07] *** nige joined
[16:22] *** nige left
[16:22] *** nige joined
[16:24] *** patrickb joined
[16:26] *** nige left
[16:27] *** nige joined
[16:27] <patrickb> timotimo: re relocatability on OpenBSD. Yes, OpenBSD lacks the mechanism to have relative paths in rpath. Doing relocatable builds on OpenBSD is actually forbidden in our build system for that very reason.

[16:27] <tellable6> 2020-12-01T10:15:32Z #raku-dev <MasterDuke> patrickb https://github.com/pypa/pip/blob/master/.azure-pipelines/scripts/New-RAMDisk.ps1 might be interesting to steal from

[16:28] <patrickb> timotimo: There may be possibilities programmatically linking the files with dlopen or some such, but then  you hit the next wall, that is reliably determining the absolute path of the currently running executable.

[16:29] *** dataangel left
[16:29] *** dataange` joined
[16:30] <patrickb> The limitation of not being able to determine the executable path is known and Theo de Raadt considers it to be a too minor benefit and thus won't-fix.

[16:42] *** jmchael joined
[16:52] *** nige left
[16:52] *** nige joined
[16:56] *** nige left
[16:57] *** nige joined
[17:04] <timotimo> fair enough

[17:06] *** Altai-man joined
[17:07] *** abraxxa1 is now known as abraxxa

[17:09] *** sena_kun left
[17:14] *** ufobat left
[17:22] *** skids joined
[17:26] *** ggoebel left
[17:28] <brass> Is there a way to convert a string to a regex?

[17:29] <brass> I'm trying to do this https://0x0.st/i745.txt

[17:32] <codesections> brass: there are several ways :D I believe <$rx> may be the one you want

[17:32] <codesections> details at https://docs.raku.org/language/regexes#Regex_interpolation

[17:33] <brass> codesections: Oh awesome!! Thank you!

[17:34] *** dakkar left
[17:35] <brass> btw, whoever wrote raku-mode for Emacs is an absolute Saint, I use it all the time :) 

[17:38] *** jmchael left
[17:48] *** camelCaser joined
[17:54] *** domidumont1 left
[18:02] *** nige left
[18:02] *** nige joined
[18:03] *** aluaces joined
[18:06] *** nige left
[18:07] *** nige joined
[18:14] *** patrickb left
[18:15] <timotimo> $ain't

[18:26] *** BenGoldberg joined
[18:47] <brass> Is there a way to convert a match to an array of strings?

[18:49] <timotimo> if you want to do that, perhaps you'd be better served by the "comb" method

[18:50] <brass> I'm just trying to golf my advent of code question

[18:50] <timotimo> OK, you can try putting a >>.Str after it

[18:52] <brass> Beautiful! Thanks

[18:52] *** nige left
[18:52] *** nige joined
[18:56] *** nige left
[18:57] *** nige joined
[18:58] *** orinthe left
[18:58] *** orinthe joined
[19:01] *** BenGoldberg left
[19:01] *** wamba joined
[19:11] *** orinthe left
[19:11] *** orinthe joined
[19:12] *** domidumont joined
[19:12] *** orinthe left
[19:13] *** orinthe joined
[19:16] *** aluaces left
[19:16] *** domidumont left
[19:18] *** Xliff_ joined
[19:19] *** Xliff left
[19:41] <holyghost> I just started on the sequel of Game::Bayes, http://github.com/theholyghost2/p6-Game-Decision . it's decision theory based on Game::Stats and Game::Bayes where you use the stats from there

[19:42] <holyghost> In a few weeks/months I will try to PR Game-Stats and Game-Bayes into some ecosystem

[19:43] <holyghost> I still have to read the book about, finish it for building Bayes and Decision out

[19:47] *** jmchael joined
[19:56] <holyghost> I am working on 10 things at the same time, so be patient

[20:02] *** jmerelo left
[20:08] *** mowcat joined
[20:24] <codesections> Raku doesn't have an easy way to both print and return a value, does it?

[20:24] <codesections>  

[20:24] <codesections> for example:

[20:25] <codesections> m: say(^5).map({$_+2}).sum

[20:25] <camelia> rakudo-moar 0d6278f32: OUTPUT: «^5␤»

[20:25] <codesections> er

[20:25] <codesections> m: say (^5).map({$_ + 2}).sum

[20:25] <camelia> rakudo-moar 0d6278f32: OUTPUT: «20␤»

[20:26] <codesections> if I wanted to inspect the value inside the map

[20:26] <codesections> m: say (^5).map({$_ + 2 ==> {.say; $_}()}).sum

[20:26] <camelia> rakudo-moar 0d6278f32: OUTPUT: «2␤3␤4␤5␤6␤20␤»

[20:28] <codesections> is the best I've come up with, but that's clunky enough that I miss Rust's dbg! macro

[20:30] *** stoned75 left
[20:30] <codesections> (which would be trivial to write myself in Raku, I know.  But "while I'm print-debugging" isn't really a time when I want to be writing helper fns)

[20:34] <[Coke]> worth writing up a debug module once and using that?

[20:37] <brass> What's the ==>?

[20:38] <brass> nvm found it https://docs.raku.org/language/operators#infix_==%3E

[20:39] <timotimo> i don't know what "dbg!" does, but have you seen that module that offers "is traced"?

[20:39] <timotimo> https://modules.raku.org/dist/Trait::Traced:cpan:KAIEPI

[20:39] *** skids left
[20:39] <codesections> yep that's the one (re: ==>)

[20:41] <codesections> Thanks, I'll take a look (it's not a big deal -- I mostly wanted to make sure I hadn't missed something built in)

[20:42] <codesections> (between all the ways we have to print something, I thought there might be one that returns something more useful than `True` :D )

[21:01] *** sjm_uk left
[21:03] <brass> Is there an operator like ==> but that lets you use blocks instead of routines?

[21:03] <guifa> [Coke]: unit module Debug::PrintReturn; sub print-return (\x) is export { print x; x }

[21:04] <guifa> ^_^

[21:08] *** sena_kun joined
[21:08] *** Altai-man left
[21:12] *** brtastic1 joined
[21:14] *** dataange` left
[21:16] *** brtastic1 is now known as brtastic

[21:19] *** nige left
[21:41] *** brtastic left
[21:44] *** Guest5249 joined
[21:50] *** sena_kun left
[21:51] <brass> Is mienaikage here? I have a question about their answer for day 2 :) 

[21:52] <MitarashiDango[m> Hi!

[21:52] *** BenGoldberg joined
[21:53] <brass> What do you call the prefix dot on this line? https://github.com/codesections/advent-of-raku-2020/blob/main/mienaikage/02.raku#L19

[21:53] <brass> I assume it's something to do with grammars but I'm not sure where to look

[21:53] <guifa> brass: That’s an implicit method call

[21:53] <brass> OOOOOH

[21:54] <MitarashiDango[m> Yup, its on the topic variable $_

[21:54] <guifa> basically if you ever see ‘.foo’, it really means $_.foo

[21:54] <brass> I didn't know that you could do .<thing>

[21:54] <brass> With the angle brackets

[21:57] <brass> https://0x0.st/i7tD.raku :OOO 

[21:57] <brass> I had no idea!

[21:57] <guifa> Works with all of the postfixes too

[21:58] *** cpan-raku left
[21:58] <brass> I've always accessed them directly using like %a<a>, not knowing it could be %a.<a>

[21:58] <brass> That's really cool

[21:58] <perryprog> ur really cool

[21:58] <brass> :^)

[21:59] *** cpan-raku joined
[21:59] *** cpan-raku left
[21:59] *** cpan-raku joined
[22:01] <guifa> codesections: you’re welcome https://github.com/alabamenhu/DebugTransput

[22:01] *** rindolf left
[22:06] *** sena_kun joined
[22:07] *** polettix joined
[22:14] *** ensamvarg3 joined
[22:20] *** mort joined
[22:22] *** sena_kun left
[22:23] <mort> Noob here, sorry. How can I iterate through the characters in a string?

[22:23] <brass> .comb

[22:24] <brass> Returns an array of all the characters from the string 

[22:24] <mort> oh, I didn't notice that one of the overloads for .comb is one which takes only the input string

[22:24] <guifa> Also don’t forget Raku’s definition of character differs a little from other languages (I think swift is the only other one that works similarly).

[22:24] <mort> I found .comb in https://docs.raku.org/type/Str#routine_comb, but also found .words which says it uses .comb, and found .comb which looked super complex so I assumed it was a low-level function which

[22:25] <guifa> More just super versatile :-) 

[22:25] *** BenGoldberg left
[22:27] <Guest5249> but does it comb hair?

[22:28] <brass> m: "hair".comb().say

[22:28] <camelia> rakudo-moar 0d6278f32: OUTPUT: «(h a i r)␤»

[22:28] <Guest5249> nice!

[22:31] * guifa was going to make a joke about not combing too fast and use race, but ‘hair’ is too short to trigger out-of-order parallelization 

[22:33] <cpan-raku> New module released to CPAN! RogueGame (0.1.10) by 03KOBOLDWIZ

[22:33] <mort> is there something wrong about using "eq in sink context"? Rakudo warns on the expression ($pass.comb[$p2] eq $ch)

[22:34] <mort> the full statement is `return ($pass.comb[$p1] eq $ch) xor ($pass.comb[$p2] eq $ch);`

[22:35] <mort> (yes, I'm using advent of code as an opportunity to try to learn raku)

[22:35] *** Black_Ribbon joined
[22:36] <Geth> ¦ ecosystem/alabamenhu-patch-1: 32ac9a1745 | L'Alabameñu++ (committed using GitHub Web editor) | META.list

[22:36] <Geth> ¦ ecosystem/alabamenhu-patch-1: Add Debug::Transport to list

[22:36] <Geth> ¦ ecosystem/alabamenhu-patch-1: 

[22:36] <Geth> ¦ ecosystem/alabamenhu-patch-1: See https://github.com/alabamenhu/DebugTransput

[22:36] <Geth> ¦ ecosystem/alabamenhu-patch-1: review: https://github.com/Raku/ecosystem/commit/32ac9a1745

[22:36] <Geth> ¦ ecosystem: alabamenhu++ created pull request #571: Add Debug::Transport to list

[22:36] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/571

[22:37] * guifa facepalms.  Not transport, transput hahaha

[22:38] <guifa> mort: careful about precedence

[22:38] <guifa> letter operators like xor have extremely low precedence

[22:38] <guifa> so what you’ve said is

[22:38] <mort> sure, but even with parens literally everywhere like with `return (($pass.comb[$p1]) eq $ch) xor (($pass.comb[$p2]) eq $ch);` it still complains

[22:39] <guifa> hmm

[22:39] <mort> Useless use of "eq" in expression "($pass.comb[$p2]) eq $ch" in sink context (line 10)

[22:40] <mort> apparently sink is raku's name for void, so it's in a void context? I thought xor was a binary operator?

[22:40] <Guest5249> that return is still the left operand of the xor

[22:40] <mort> wat

[22:41] <mort> so the statement is parsed as `(return (($pass.comb[$p1]) eq $ch)) xor (($pass.comb[$p2]) eq $ch)`?

[22:41] <mort> sorry, I had too many (s somewhere, but you get the idea

[22:42] <guifa> mort: correct

[22:42] *** dataangel joined
[22:42] <mort> well, you're right that adding parens to the whole expression fixes it. That's really weird to me though

[22:42] <guifa> xor has EXTREMELY low precedence

[22:42] <MitarashiDango[m> Try ^^ instead of xor

[22:42] <guifa> you’re probably wanting ^^ 

[22:43] <mort> I suppose I'm used to statement-oriented languages, where the general syntax for a return statement would be `return <expression>`, so as long as xor is at all an operator which can be part of an expression, it can't be lower "presedence" than the return keyword

[22:43] <guifa> I can’t really think of a reason to use ‘xor’ to be honest.  It was probably only done for parity with ‘and’ and ‘or’ which are useful

[22:44] *** natrys left
[22:44] <mort> are there times when it's useful to have an operator with a lower presedence than the return keyword?

[22:45] <guifa> yeah

[22:45] <guifa> return $foo if $foo > 10

[22:45] <mort> ah, that kind of infix if is an operator?

[22:45] <guifa> actually, I think if in that case isn’t an operator

[22:46] <guifa> But I suppose with return there might be a case where your return expression results in a failure, and you could catch that with an `or`

[22:47] <mort> does a return "expression" evaluate to the returned value? So that you could do like 'return do-something() or die', parsed as '(return do-something()) or die', where you die if do-something() evaluates to something falsey?

[22:47] <timotimo> bisectable6: sub MAIN($a, $b --> Nil) { }

[22:47] <bisectable6> timotimo, Will bisect the whole range automagically because no endpoints were provided, hang tight

[22:48] <bisectable6> timotimo, Output on all releases: https://gist.github.com/2d39696a3851b4d7819e9509b3cc1f15

[22:48] <bisectable6> timotimo, bisect log: https://gist.github.com/92a9b8ace55143ee0e4a57eefa95a8fd

[22:48] <bisectable6> timotimo, Bisecting by output (old=2018.09 new=2018.10) because on both starting points the exit code is 2

[22:48] <bisectable6> timotimo, bisect log: https://gist.github.com/a688d006258a74cf2219c3c15d765e7e

[22:48] <bisectable6> timotimo, (2018-10-12) https://github.com/rakudo/rakudo/commit/7d02b949ef9d69deffe4184d6a2a737a69bc97af

[22:49] <bisectable6> timotimo, Output on all releases and bisected commits: https://gist.github.com/472c8271c47ad6a92d7a76008a38544d

[22:55] *** Guest5249 left
[22:55] <guifa> I can’t seem to get a way to trigger an ‘or’ with with return

[22:55] <guifa> but it definitely fully exits the routine when it hits:

[22:56] <guifa> m: my $foo = ‘hi’; sub bar { $foo = return ‘bye’ }; bar; say $foo

[22:56] <camelia> rakudo-moar 0d6278f32: OUTPUT: «hi␤»

[22:59] <guifa> But my suspicions are correct, it’s implemented as a sub, rather than as a control flow word

[22:59] <guifa> m: say &return.WHAT

[22:59] <camelia> rakudo-moar 0d6278f32: OUTPUT: «(Sub)␤»

[23:03] <timotimo> .seen chloekek

[23:03] <tellable6> timotimo, I saw chloekek 2020-09-20T18:36:15Z in #raku: <chloekek> m: say (*).^name

[23:04] <guifa> I’d  guess that a lot of it has to do with the fact that it (and several others, like ‘redo’, ‘next’, or ‘take’) can take postfix control statements, which isn’t allowed for regular control statements

[23:04] <guifa> but I could be wrong, I wasn’t involved in the early design

[23:04] *** xinming left
[23:06] *** xinming joined
[23:13] <mort> might just be an incidental result of other stuff, if there are other keywords which it does make sense to give a higher precedence than and/or, and it makes sense for return to be in the same category as those keywords, and it makes sense for xor to be in the same category as and/or

[23:14] <mort> when making one strict ordering of the presence of every keyword, I suppose it's hard or impossible to make sure every single keyword pair's relative precedence makes sense in isolation 

[23:15] <lizmat> guifa: little in raku is really statement: most operators are really just subs

[23:16] <lizmat> the only exception is really the short-circuiting || and &&

[23:22] <SmokeMachine> I was thinking... would that make sense if `done` could accept a optional parameter and if it received it, that would be returned by react? so, something like this `say react whenever Promise.in: 1 { done 42 }` would print 42

[23:23] <lizmat> m: say react whenever Promise.in: 1 { done }

[23:23] <camelia> rakudo-moar a89d02075: OUTPUT: «Nil␤»

[23:23] <lizmat> m: say react whenever Promise.in: 1 { done 42 }

[23:23] <camelia> rakudo-moar a89d02075: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling done(Int) will never work with declared signature ( --> Nil)␤at <tmp>:1␤------> 3say react whenever Promise.in: 1 { 7⏏5done 42 }␤»

[23:24] <SmokeMachine> lizmat: would that make sense?

[23:24] <lizmat> semantically I guess

[23:24] *** xinming left
[23:24] <lizmat> technically, not sure how easy it would be to implement :-)

[23:25] *** xinming joined
[23:26] *** skids joined
[23:28] *** vrurg left
[23:29] *** vrurg joined
[23:32] *** wamba left
[23:32] *** squashable6 left
[23:33] *** squashable6 joined
[23:34] <guifa> mort: yeah, and that’s why Raku tries to let you know when you hit a situation that is probably not what you want

[23:34] *** xinming left
[23:35] *** xinming joined
[23:36] <lizmat> SmokeMachine: looks like it could be implemented  :-)   so make an issue, I'd say

[23:38] <SmokeMachine> 👍

[23:39] <tbrowder> .tell jmerelo my advent article is on the advent site

[23:39] <tellable6> tbrowder, I'll pass your message to jmerelo

[23:47] <SmokeMachine> lizmat: https://github.com/Raku/problem-solving/issues/249

[23:50] <cpan-raku> New module released to CPAN! RogueGame (0.1.11) by 03KOBOLDWIZ

[23:51] *** xinming left
[23:51] *** xinming joined
[23:55] *** xinming left
[23:56] *** xinming joined
