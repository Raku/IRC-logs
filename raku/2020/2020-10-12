[00:12] *** maggotbrain joined
[00:15] *** molaf joined
[00:18] *** skids joined
[00:25] *** leont left
[00:32] *** MasterDuke left
[00:55] *** BenGoldberg left
[00:55] *** Ben_Goldberg joined
[00:55] *** Ben_Goldberg is now known as BenGoldberg

[01:20] *** molaf left
[01:32] *** molaf joined
[01:35] *** BenGoldberg left
[01:35] *** Ben_Goldberg joined
[01:35] *** Ben_Goldberg is now known as BenGoldberg

[02:21] *** defaultxr joined
[02:22] *** aindilis left
[02:23] *** defaultxr left
[02:24] *** defaultxr joined
[02:41] *** Aliv3 left
[02:42] *** Aliv3 joined
[02:52] *** Doc_Holliwood left
[03:02] *** k-man left
[03:04] *** k-man joined
[03:25] *** Aliv3 left
[03:27] *** BenGoldberg left
[03:27] *** Ben_Goldberg joined
[03:27] *** Ben_Goldberg is now known as BenGoldberg

[03:27] *** skids left
[03:39] *** aindilis joined
[04:01] *** mowcat left
[04:02] *** nige left
[04:02] *** nige joined
[04:11] *** BenGoldberg left
[04:12] *** k-man left
[04:40] *** k-man joined
[04:43] *** Kaiepi left
[05:10] *** Altai-man joined
[05:30] *** BenGoldberg joined
[05:34] *** maettu joined
[05:42] *** sena_kun joined
[05:44] *** Altai-man left
[05:46] *** xinming left
[05:47] *** xinming joined
[05:51] *** frost-lab joined
[05:57] *** BenGoldberg left
[05:57] *** Ben_Goldberg joined
[05:57] *** Ben_Goldberg is now known as BenGoldberg

[06:00] *** molaf left
[06:00] *** BenGoldberg left
[06:00] *** Ben_Goldberg joined
[06:00] *** Ben_Goldberg is now known as BenGoldberg

[06:00] *** cpan-raku left
[06:03] *** cpan-raku joined
[06:03] *** cpan-raku left
[06:03] *** cpan-raku joined
[06:05] *** BenGoldberg left
[06:14] *** frost-lab left
[06:31] *** kensanata joined
[06:34] *** abraxxa joined
[06:41] *** abraxxa left
[06:43] *** abraxxa joined
[06:56] *** domidumont joined
[06:59] *** frost-lab joined
[07:08] *** stoned75 left
[07:10] *** Sgeo left
[07:13] *** pecastro joined
[07:14] *** stoned75 joined
[07:17] *** frost-lab left
[07:30] *** MasterDuke joined
[07:30] *** frost-lab joined
[07:30] *** Doc_Holliwood joined
[07:55] *** dakkar joined
[08:21] *** leont joined
[08:56] *** BenGoldberg joined
[08:58] *** eseyman left
[09:08] *** xinming left
[09:08] *** xinming joined
[09:11] *** frost-lab left
[09:14] *** eseyman joined
[09:20] *** Doc_Holliwood left
[09:28] *** xinming left
[09:30] *** xinming joined
[09:30] *** BenGoldberg left
[09:33] *** pecastro left
[09:40] *** frost-lab joined
[09:40] *** xinming left
[09:41] *** xinming joined
[09:41] *** Altai-man joined
[09:43] *** frost-lab left
[09:44] *** sena_kun left
[09:45] *** maettu left
[09:48] *** pecastro joined
[09:51] *** aluaces left
[09:53] *** skids joined
[09:53] *** Doc_Holliwood joined
[09:54] *** aluaces joined
[09:54] *** aluaces is now known as alberto

[09:54] *** alberto is now known as Guest82400

[10:03] *** lizmat_ joined
[10:05] *** lizmat left
[10:06] *** lizmat_ is now known as lizmat

[10:07] *** sena_kun joined
[10:08] *** natrys joined
[10:09] *** Altai-man left
[10:14] *** AlexDaniel joined
[10:14] *** AlexDaniel left
[10:14] *** AlexDaniel joined
[10:30] *** xinming left
[10:30] *** xinming joined
[10:36] *** qiqi joined
[10:39] *** qiqi left
[10:49] *** abraxxa left
[10:52] *** rindolf joined
[10:54] *** abraxxa1 joined
[10:56] *** abraxxa1 left
[10:57] *** stoned75 left
[10:57] *** abraxxa joined
[11:02] *** abraxxa left
[11:03] *** abraxxa joined
[11:06] *** skids left
[11:11] *** pecastro left
[11:25] *** stoned75 joined
[11:35] *** Doc_Holliwood left
[11:36] *** pecastro joined
[11:51] *** sftp left
[11:56] *** rindolf left
[11:59] *** jmerelo joined
[12:07] *** rindolf joined
[12:10] *** maettu joined
[12:21] *** BenGoldberg joined
[12:30] *** Geth left
[12:30] *** Geth joined
[12:34] *** pecastro left
[12:39] *** schlaftier joined
[12:55] *** BenGoldberg left
[12:56] *** natrys left
[13:01] *** jmerelo left
[13:11] *** natrys joined
[13:27] <cpan-raku> New module released to CPAN! eigenstates (0.0.1) by 03ELIZABETH

[13:40] *** xinming left
[13:41] *** Altai-man joined
[13:42] *** xinming joined
[13:44] *** sena_kun left
[13:45] *** sftp joined
[13:50] *** pecastro joined
[13:52] *** xelxebar left
[13:52] *** maettu left
[13:53] *** xelxebar joined
[13:56] *** xinming left
[13:58] *** xinming joined
[14:09] *** xinming left
[14:09] *** xinming joined
[14:10] *** pecastro left
[14:11] * lizmat wonders how Red would handle features described in http://blogs.perl.org/users/zhtwn/2020/10/tau-station-the-internal-adventures-dbixclassrow-cache-avoid-the-rabbits.html

[14:11] <lizmat> SmokeMachine ^^  :-)

[14:17] *** Sgeo joined
[14:32] *** xelxebar left
[14:32] *** xelxebar joined
[14:35] *** xinming left
[14:35] *** xinming joined
[14:38] *** gnufr33dom joined
[14:46] *** ufobat joined
[14:51] *** gnufr33dom left
[15:12] *** domidumont left
[15:17] *** Sgeo left
[15:20] *** Sgeo joined
[15:22] *** xinming left
[15:24] *** xinming joined
[15:26] *** jmerelo joined
[15:47] *** BenGoldberg joined
[15:53] *** Doc_Holliwood joined
[15:55] *** pecastro joined
[16:01] *** pecastro left
[16:06] *** natrys left
[16:06] *** pecastro joined
[16:10] <SmokeMachine> lizmat: that’s a good question. I think Red has that same problem and it could be fixed the same way they handled it with DBIC. But for doing that right, we should have a weak ref hash... that we don’t, right?

[16:10] *** pecastro left
[16:13] <lizmat> I'm not sure I understand how that would be needed ?

[16:14] <SmokeMachine> Otherwise the obj would never be garbage collected, right? Or am I missing something?

[16:15] <SmokeMachine> Other solution would be only get values instead of objects...

[16:16] <lizmat> but, there is no difference between values and objects ?

[16:16] <lizmat> or do you mean native int / str / num ?

[16:17] <SmokeMachine> I mean not row objects

[16:18] <SmokeMachine> But I think the weak ref cache would be a better solution

[16:18] <SmokeMachine> Why don’t we have weakref?

[16:19] *** natrys joined
[16:19] <colomon__> Is there an accepted best practices for including C/C++ code with a Raku module?  Looking to experiment with custom C inner loops with Raku mandelbrot code…

[16:20] <SmokeMachine> If we did, I could store the obis on a hash and if we do not use that it would gced but otherwise we would use the same obj if that was requested again

[16:21] <lizmat> colomon__: apart from NatveCall test files, I'm not aware of any

[16:21] *** BenGoldberg left
[16:21] <lizmat> perhaps some module with NativeCall as a dependency could serve as inspiration ?

[16:29] <SmokeMachine> lizmat: why weak ref hash doesn’t make sense? (I’ve asked that before but I don’t remember the answer)

[16:30] <lizmat> in raku, an object is either reachable, or it is not: in the latter case, it is ok for the GC to kill it

[16:30] <lizmat> whenever it feels like it

[16:30] <lizmat> weak refs imply some sort of reference counting (even if it is only 1 or 0)

[16:31] <lizmat> and that's unlikely to happen

[16:31] <moritz> there are still *some* use cases for weak references, even with a GC

[16:31] <SmokeMachine> Do you know how Java does that?

[16:31] <lizmat> no, I don't, so please enlighten me  :)

[16:32] <moritz> for example, a class could keep references to its child classes, to be able to propagate down augments to them

[16:32] *** MilkmanDan left
[16:32] <moritz> but if it did that with regular references, it would keep all (even anonymous / lexical) subclasses alive

[16:32] <SmokeMachine> (I’ve asked because I don’t know either)

[16:33] <lizmat> SmokeMachine: I know a little bit how Perl does that, and as I remember, it is a messy hack

[16:33] <lizmat> Grinnz will correct me I'm sure if I'm wrong about that  :-)

[16:34] <SmokeMachine> I think the way Java does is different from the Perl way... but I don’t really know anything about it

[16:34] <SmokeMachine> moritz: weakref map is another example

[16:35] <SmokeMachine> https://www.baeldung.com/java-weakhashmap

[16:36] *** Doc_Holliwood left
[16:36] *** dakkar left
[16:37] <SmokeMachine> In Java it seems to have strong, soft and weak references

[16:37] <SmokeMachine> And the gc knows rache one of them

[16:37] *** MilkmanDan joined
[16:38] *** stoned75 left
[16:39] *** Chi1thangoo left
[16:39] *** Chi1thangoo joined
[16:40] <SmokeMachine> Than if there is a path to the obj passing by a strong ref it’s not gced, otherwise if paths passing by a soft ref, it will be gced only when the system needs memory and if passing by a weakref only, it can be gced without thinking twice

[16:45] *** xinming left
[16:45] *** xinming joined
[16:47] <Grinnz> perl doesn't have a GC, just refcounting and weak refs don't increment the refcount, that's all

[16:48] <SmokeMachine> Grinnz: yes, I know, but that’s not the case with Java, for example...

[16:50] <SmokeMachine> another example of garbage collected language with weakref is kotlin

[17:00] *** eseyman left
[17:05] *** approaching236 joined
[17:06] *** kensanata left
[17:07] *** eseyman joined
[17:20] *** MilkmanDan left
[17:25] *** gordonfish left
[17:26] *** maettu joined
[17:30] *** gordonfish joined
[17:31] *** Spooktober left
[17:39] *** grumboo joined
[17:42] *** sena_kun joined
[17:44] *** Altai-man left
[17:44] *** molaf joined
[17:45] *** molaf left
[17:54] <moritz> Grinnz: but not incrementing the refcount cannot be all -- how would perl know to set the (weak) reference to undef once the referent is GCed?

[17:57] <Grinnz> i don't know the implementation

[17:57] <lizmat> yeah, my memory was that it was quite a bit more involved than just reducing refcount

[17:59] <Grinnz> there is a virtual table of backrefs, so i assume it uses that to set all weak referents to undef

[17:59] <Grinnz> references even

[18:00] *** ufobat_ joined
[18:01] *** pecastro joined
[18:04] *** ufobat left
[18:06] *** pecastro left
[18:08] *** skids joined
[18:09] *** MilkmanDan joined
[18:12] *** maettu left
[18:12] <SmokeMachine> I’ve needed weakref a more than once...

[18:19] *** xinming left
[18:20] *** xinming joined
[18:28] *** Sauvin left
[18:28] *** maettu joined
[18:45] *** molaf joined
[18:45] *** xinming left
[18:45] *** xinming joined
[18:47] *** vrurg left
[18:48] *** vrurg joined
[18:54] *** jmerelo left
[18:57] *** Doc_Holliwood joined
[19:09] *** xinming left
[19:09] *** xinming joined
[19:12] *** BenGoldberg joined
[19:13] <lizmat> and yet another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2020/10/12/2020-41-a-first-year/

[19:14] *** ufobat_ left
[19:15] *** natrys left
[19:16] *** kiti_nomad[m] left
[19:16] *** CIAvash left
[19:16] *** ThaEwat left
[19:16] *** unclechu left
[19:16] *** matiaslina left
[19:16] *** suzusime[m] left
[19:16] *** AlexDaniel` left
[19:16] *** JJAtria[m] left
[19:17] *** sena_kun left
[19:22] *** JJAtria[m] joined
[19:26] *** xinming left
[19:27] *** xinming joined
[19:28] *** skids left
[19:28] *** kiti_nomad[m] joined
[19:28] *** unclechu joined
[19:28] *** AlexDaniel` joined
[19:28] *** ThaEwat joined
[19:28] *** CIAvash joined
[19:28] *** matiaslina joined
[19:28] *** suzusime[m] joined
[19:33] *** maettu left
[19:34] *** kst` joined
[19:36] *** kst left
[19:43] <codesections> lizmat++ Thanks as always :D  What do you/others think the story behind the «Raku [laughs]» line?  It was before my time, but Audrey used to be pretty heavily involved with Raku, right?

[19:43] <lizmat> yes, without her there would not have been a Raku

[19:44] <jdv79> the pugs era was pretty crazy

[19:45] <lizmat> https://twitter.com/liztormato/status/1278298845856686080/photo/1

[19:46] <jdv79> arguably Perl wouldnt be the same without it

[19:46] *** BenGoldberg left
[19:51] <codesections> lizmat: Very cool piece of history!  I take it the front/bottom row is Daemon Conway, Larry Wall, and Audrey Tang.  Can you help me out with the top/back row?

[19:55] <lizmat> the one just above Damian is Mark Overmeer...

[19:56] <lizmat> sadly the names of the other two escape me atm

[20:00] *** HarmtH joined
[20:11] *** rindolf left
[20:13] *** melezhik joined
[20:15] <melezhik> Hi! I am looking for a module to colorize terminal output, the only I've found - Terminal::ANSIColor - is quite old, and not sure if maintained ... 

[20:15] <tellable6> 2020-10-05T08:14:46Z #raku-dev <jmerelo> melezhik how?

[20:16] <melezhik> .tell @jmerelo - see https://github.com/melezhik/RakuDist/blob/master/utils/queue-selected-modules.sh 

[20:16] <tellable6> melezhik, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Tellable

[20:16] <melezhik> .tell jmerelo: - see https://github.com/melezhik/RakuDist/blob/master/utils/queue-selected-modules.sh 

[20:16] <tellable6> melezhik, I'll pass your message to JJMerelo

[20:18] <melezhik> .tell JJMerelo: here is full CICD example with pulling RakuDist build status and waiting it finishes - https://github.com/melezhik/RakuDist/blob/master/docs/api.md#bash-automation-example

[20:18] <tellable6> melezhik, I'll pass your message to JJMerelo

[20:19] <melezhik> .tell JJMerelo: you basically give it a list of modules and run them all, RakuDist will place request in queue and start executing them one by one ... 

[20:19] <tellable6> melezhik, I'll pass your message to JJMerelo

[20:22] <melezhik> oh, I've found that one - https://modules.raku.org/dist/Colorizable:cpan:UZLUISF

[20:23] *** xinming left
[20:23] <melezhik> How do I check check if a module installed in runtime?

[20:24] *** xinming joined
[20:24] <MasterDuke> try `need` or `require`, don't remember the difference

[20:26] *** abraxxa left
[20:28] *** melezhik left
[20:31] *** Geth left
[20:32] *** cpan-raku left
[20:36] <codesections> melezhik: As far as I know, Terminal::ANSIColor is maintained/still the go-to module for colorizing terminal output.  It was updated just a couple of years ago, and the code is very simple (< 100 lines).  What sort of updates would it need?

[20:36] <tellable6> codesections, I'll pass your message to melezhik

[20:36] *** xinming left
[20:37] <codesections> m: say "Hello, \e[1mWorld!\e[0m"

[20:37] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Hello, World!␤»

[20:38] <codesections> formatting terminal output isn't hard :D

[20:38] *** xinming joined
[20:38] *** melezhik joined
[20:39] *** gnufr33dom joined
[20:40] <melezhik> codesections yeah I see. I am choosing b/w Colorizable and Terminal::ANSIColor. The first one has a documentation, let's see maybe I'll stick to it ...

[20:40] <tellable6> hey melezhik, you have a message: https://gist.github.com/e81b585018842d4c34436932d0c5d9ed

[20:40] <codesections> and, in any event, Terminal::ANSIColor is one of the most-frequently depended on packages https://finanalyst.github.io/ModuleCitation/

[20:41] *** abraxxa joined
[20:41] <melezhik> Colorizable also has a zero dependencies ...

[20:42] <melezhik> https://modules.raku.org/dist/Colorizable:cpan:UZLUISF/META6.json#L7

[20:44] <codesections> that's also true for Terminal::ANSIColor -- and, really, printing output to the terminal with ANSI escape codes shouldn't require dependencies.  

[20:44] <codesections> `

[20:45] <jdv79> have you heard of npm?;)

[20:47] <jdv79> dep concerns be damned.  full speed ahead!

[20:47] *** xinming left
[20:47] *** xinming joined
[20:47] <codesections> (I sound like I'm advocating for Terminal::ANSIColor, but I'm really not.  Use whichever seems better -- or roll your own, like I said, it's not hard.  All I'm pushing back on is that this is an area that's complex/fast moving enough that a package is "unmaintained" when it hasn't been updated in ~2 years)

[20:47] *** melezhik left
[20:49] <jdv79> yup.  its a common misconception that "not updated" means bad.  perhaps its Done.

[20:51] <jdv79> (a bunch of cpan is like that)

[21:00] <[Coke]> I think a package with no commits for 2 years can correctly be called unmaintained.

[21:00] <[Coke]> unmaintained != broken

[21:01] *** melezhik joined
[21:01] <melezhik> @code

[21:02] <melezhik> codesections , yeah, but I said "I am not _sure_ if maintained" ))))

[21:02] <melezhik> anyway, overall I agree, the only thing I'd improve on the mentioned module is a documentation ...

[21:04] <[Coke]> (issue/wiki activity might be a good secondary check after "last commit)

[21:10] *** melezhik left
[21:11] *** pecastro joined
[21:13] *** melezhik joined
[21:13] <melezhik> [Coke] that's right )))

[21:20] *** xinming left
[21:20] *** xinming joined
[21:23] *** approaching236 left
[21:39] *** Black_Ribbon joined
[21:44] *** melezhik left
[21:50] *** xinming left
[21:50] *** xinming joined
[22:01] * [Coke] has done enough lisp that melezhik's sends hurt.

[22:02] *** xinming left
[22:03] *** xinming joined
[22:07] <codesections> [Coke]: Agreed :D  (incidentally, I tend to use :D as my default smile-emoji instead of :) for largely the same reason and/or to avoid pareedit or smartparens issues")

[22:37] *** BenGoldberg joined
[22:44] *** xinming left
[22:44] *** xinming joined
[22:44] *** Aliv3 joined
[22:46] *** skids joined
[22:54] *** winters01 joined
[22:56] *** xinming left
[22:56] *** xinming joined
[22:56] <winters01> there any way to see if a process is already running in raku?

[23:01] *** pecastro left
[23:04] *** xinming left
[23:05] *** xinming joined
[23:06] <moon-child> run 'ps' ?

[23:14] *** winters01 left
[23:24] *** BenGoldberg left
[23:24] *** Ben_Goldberg joined
[23:24] *** Ben_Goldberg is now known as BenGoldberg

[23:26] *** BenGoldberg left
[23:26] *** Ben_Goldberg joined
[23:26] *** Ben_Goldberg is now known as BenGoldberg

[23:30] *** cpan-raku joined
[23:30] *** cpan-raku left
[23:30] *** cpan-raku joined
[23:30] <cpan-raku> New module released to CPAN! Date::Names (2.1.0) by 03TBROWDER

