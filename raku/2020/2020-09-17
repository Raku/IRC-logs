[00:00] *** cpan-raku left
[00:01] *** cpan-raku joined
[00:01] *** cpan-raku left
[00:01] *** cpan-raku joined
[00:09] *** approaching236 left
[00:28] *** MasterDuke left
[00:31] *** vrurg_ joined
[00:33] *** vrurg left
[00:58] <[Coke]> 41 ballots reporting (Average votes per ballot: 4.59)

[00:59] <[Coke]> .tell detroitdan - there is a package installer for windows here https://rakudo.org/downloads

[00:59] <tellable6> [Coke], I'll pass your message to DetroitDan

[00:59] <[Coke]> .tell detroitdan I also build from source every so often with msvc on windows (using msvc & strawberry perl)

[00:59] <tellable6> [Coke], I'll pass your message to DetroitDan

[01:00] <Geth> ¦ Raku-Steering-Council/main: 2c09bb94a9 | Coke++ | scripts/tally.raku

[01:00] <Geth> ¦ Raku-Steering-Council/main: show a little more precision

[01:00] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/2c09bb94a9

[01:01] *** leont left
[01:01] *** donaldh joined
[01:06] *** donaldh left
[01:21] *** molaf left
[01:34] *** molaf joined
[01:47] *** AlexDani` joined
[01:49] *** AlexDaniel left
[01:52] *** aborazmeh joined
[01:52] *** aborazmeh left
[01:52] *** aborazmeh joined
[02:21] *** Skarsnik left
[02:29] *** ensamvarg3 joined
[02:29] *** aborazmeh left
[02:30] *** aborazmeh joined
[02:30] *** aborazmeh left
[02:30] *** aborazmeh joined
[02:31] *** mowcat left
[02:50] *** approaching236 joined
[02:52] *** vrurg joined
[02:54] *** vrurg_ left
[03:03] *** donaldh joined
[03:09] *** donaldh left
[03:09] *** AlexDani` left
[03:56] *** sftp joined
[04:35] *** aborazmeh left
[04:36] *** sjaveed left
[04:37] *** sjaveed joined
[04:41] *** sjaveed left
[04:58] *** sjaveed joined
[05:00] *** parabolize left
[05:04] *** sjaveed left
[05:10] *** bocaneri joined
[05:13] *** skids left
[05:15] *** Kaiepi left
[05:15] *** Kaiepi joined
[05:21] *** billN1VUX left
[05:22] *** molaf left
[05:32] *** sjaveed joined
[05:34] *** sjaveed_ joined
[05:37] *** sjaveed left
[06:16] *** approaching236 left
[06:37] *** andrzejku joined
[06:43] *** stoned75 joined
[07:02] <Xliff> Hrm.

[07:03] <Xliff> I'm getting the following error:

[07:03] <Xliff> $!c = $cancellable;

[07:03] <Xliff>     self.roleInit-Object;

[07:03] <Xliff> Actually, not that one... this one:

[07:03] <Xliff> ===SORRY!=== Error while compiling /home/cbwood/Projects/p6-GIO/lib/GIO/ApplicationCommandLine.pm6 (GIO::ApplicationCommandLine)

[07:03] <Xliff>     P6M Merging GLOBAL symbols failed: duplicate definition of symbol %RAW-DEFS

[07:03] <Xliff>     at /home/cbwood/Projects/p6-GIO/lib/GIO/ApplicationCommandLine.pm6 (GIO::ApplicationCommandLine):12

[07:03] <Xliff> However I've removed all references of %RAW-DEFS from the code a few hours ago. Is there an easy way to fix this?

[07:05] *** donaldh joined
[07:09] *** donaldh left
[07:13] *** stoned75 left
[07:21] *** kst joined
[07:27] *** sena_kun joined
[07:29] *** donaldh joined
[07:30] *** bocaneri left
[07:31] *** donaldh left
[07:33] *** abraxxa left
[07:34] *** bocaneri joined
[07:35] *** abraxxa joined
[07:36] *** dakkar joined
[07:42] <Xliff> Error golfed: https://repl.it/@Xliff/LovingMassiveVendors#C.pm6

[07:52] *** MasterDuke joined
[07:54] *** Sgeo left
[07:54] *** defaultxr left
[07:55] *** defaultxr joined
[07:56] *** andrzejku left
[07:59] <timotimo> Xliff: works when i use package A { our %RAW-DEFS; ... } and package B and such

[08:00] <Xliff> OK, so you are placing them in package blocks?

[08:00] <Xliff> Here's the real issue. Most of these compunits are there to declare classes of the same name.

[08:01] <Xliff> However sometims I will need symbols defined that will need quick nativecall defs.

[08:01] <Xliff> If I do this in a compunit: class A::B { ... };  package A::B::C { ... }; 

[08:02] <Xliff> the class def will not be able to see anything in A::B::C, even if they are marked "is export"

[08:02] <Xliff> If we can solve that, then I'll be happy as a clam! :)

[08:05] <Xliff> Is there a way to declare partials in Raku?

[08:05] *** domidumont joined
[08:12] *** sarna joined
[08:14] <sarna> hello, does raku have bidirectional hashmaps? or something that could emulate one?

[08:15] <sarna> asking mostly out of curiosity - I can just declare ten variables in this particular case, a bidirectional mapping would be much nicer though :)

[08:17] <sena_kun> I imagine implementing one wouldn't be too hard. Implement `Associative` and overload a couple of methods to do checks you want.

[08:17] <sena_kun> .oO ( document, pack and release then! )

[08:21] *** stoned75 joined
[08:22] <sarna> haha thanks, sena_kun - might as well do that :^)

[08:24] *** dogbert11 joined
[08:25] *** pecastro joined
[08:28] *** dogbert17 left
[08:32] <Xliff> sarna: What do you mean by "bidiractional hashmap"? Is there something online that describes the difference between that and the current Associatives we are used to in Raku?

[08:36] <sena_kun> Xliff, see https://guava.dev/releases/19.0/api/docs/com/google/common/collect/BiMap.html ? If I interpreted correctly what sarna wants.

[08:37] <sarna> sena_kun: yeah, something similar at least

[08:40] <sarna> raku is dynamically typed, I could get away with adding stuff twice

[09:04] <Xliff> role TwoWayHash[K, V] { has HahsMap[V, K] %!bizzaro; method EXISTS-KEY(\k) { k ~~ K ?? self{K}:exists !! %!bizzaro{K}:exists }; method AT-KEY(\k) { k ~~ K ?? self<K> !! %!bizzaro{K} }; }; # ???

[09:05] <Xliff> AT-KEY may need to be "is rw"

[09:05] *** rindolf joined
[09:06] <Xliff> Actually, it's more complex than that.

[09:06] <Xliff> EXISTS-KEY need to return Proxy objects

[09:16] * sena_kun has an impression that it's just putting that must be locked, plus you call .antipairs to get "inverted" hash.

[09:20] <Xliff> Yeah. Should have thought about that. Oh well. 

[09:25] <sena_kun> I mean, the idea seems to be to enforce that for each key there is a single value which cannot be overwritten (and add a backup method to break this law, of course) + antipairs does all the work on inverting.

[09:26] <dakkar> you don't want to call `.antipairs` on each access though, otherwise you go from ~O(1) to O(N*log(N))

[09:27] <dakkar> (or whatever the cost of building a new hash each time is)

[09:27] <sena_kun> Why call it on each access?

[09:27] <dakkar> I just said not to ☺

[09:28] <dakkar> I may be thinking of a different data structure… an immutable bi-hash is easy, a mutable one needs a bit more work

[09:30] <El_Che> 5 people to vote sounded like a lot at first

[09:30] <El_Che> it isn't

[09:30] <El_Che> :)

[09:36] *** leont joined
[09:37] *** Skarsnik joined
[09:55] *** Xliff left
[10:02] <sarna> how to call methods of a parent, when I'm inheriting?

[10:04] *** Black_Ribbon left
[10:04] *** Black_Ribbon joined
[10:07] *** aborazmeh joined
[10:07] *** aborazmeh left
[10:07] *** aborazmeh joined
[10:10] <tobs> sarna: if `class B is A` and you want to call exactly A's method f, then you can inside of a method of B: self.A::f

[10:10] <sarna> tobs: makes sense! I also like the syntax :)

[10:10] <tobs> but if you just want to redispatch to the "next most appropriate method in the current dispatch chain" (which also involves methods of parent classes), then see nextsame and nextwith and the like.

[10:11] <sarna> will do, thanks

[10:11] <sarna> "nextsame calls the next matching candidate with the same arguments that were used for the current candidate" - oh my!

[10:12] <tobs> Those weave multiple dispatch and multiple inheritance into one string of candidates which you can walk and does the right thing if your situation is not as complex, e.g. with single inheritance.

[10:13] <sarna> awesome!

[10:35] *** parabolize joined
[10:39] *** aluaces left
[10:40] *** aluaces joined
[10:50] *** cpan-raku left
[10:51] *** cpan-raku joined
[10:51] *** cpan-raku left
[10:51] *** cpan-raku joined
[10:51] *** aborazmeh left
[10:53] *** Skarsnik left
[11:19] *** marcusr left
[11:21] *** marcusr joined
[11:24] *** Altai-man joined
[11:27] <sarna> does raku have keyword punning? in ocaml if you have a variable with the same name as a named argument, you can just omit the second part of "foo => $foo"

[11:27] *** sena_kun left
[11:34] *** Altai-man left
[11:43] <lizmat> sarna: :$foo

[11:43] <sarna> lizmat: thanks :)

[11:43] *** sena_kun joined
[11:47] <sarna> m: my \foo = a => 1, b => 2; say \foo.keys; say \foo.values; # why??

[11:47] <camelia> rakudo-moar 85847d2f1: OUTPUT: «\((:a(1), :b(2)))␤\((:a(1), :b(2)))␤»

[11:48] *** domidumont left
[11:48] <sarna> m: my \foo = a => 1, b => 2; say foo.keys; say foo.values; # oh well that kinda works

[11:48] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(0 1)␤(a => 1 b => 2)␤»

[11:54] *** ggoebel left
[11:54] *** ggoebel joined
[11:55] *** stoned75 left
[11:56] *** stoned75 joined
[11:57] *** rindolf left
[11:58] *** rindolf joined
[11:59] <timotimo> yeah, when you define a my \foo you're defining a sigil-less "foo" to be used as "foo"; putting a \ in front of a value gives you a Capture object

[12:00] *** aborazmeh joined
[12:00] *** aborazmeh left
[12:00] *** aborazmeh joined
[12:00] * lizmat wonders if we should get rid of that for .f

[12:00] <lizmat> it's huffmanization for something most people don't use

[12:01] <timotimo> capture literal syntax?

[12:01] <timotimo> well, not really literal

[12:01] <lizmat> m: dd (42,666).Capture    # much clearer imo

[12:01] <camelia> rakudo-moar 85847d2f1: OUTPUT: «\(42, 666)␤»

[12:02] <timotimo> but yeah

[12:02] <timotimo> at the very least change the output to read (blah).Capture

[12:02] <timotimo> so that it's less confusing?

[12:03] <lizmat> yeah, that it should then as well  :-)

[12:04] <timotimo> ah, right, can't really not do that

[12:14] <sarna> m: my @foo = [1,2,3]; @foo[1]:delete; say @foo # how can I make @foo be [1,3], without the hole?

[12:14] <camelia> rakudo-moar 85847d2f1: OUTPUT: «[1 (Any) 3]␤»

[12:24] *** aborazmeh left
[12:33] <sarna> m: my %hash = %{foo => [1,2]}; say %hash<foo>; .say for %hash<foo> # this was very confusing :(

[12:33] <camelia> rakudo-moar 85847d2f1: OUTPUT: «[1 2]␤[1 2]␤»

[12:34] <timotimo> m: my $blerp = [1, 2]; .say for $blerp; .say for $blerp<>

[12:34] <camelia> rakudo-moar 85847d2f1: OUTPUT: «[1 2]␤1␤2␤»

[12:36] <sarna> ..decontainerization operator?

[12:36] <sarna> first time I see this

[12:39] *** frost-lab joined
[12:43] <timotimo> aye, scalar containers prevent iteration

[12:45] *** Black_Ribbon left
[12:48] <sarna> https://repl.it/repls/AgreeableYearlyFile#main.raku

[12:48] <sarna> sena_kun: I made it :)

[12:49] <sarna> mostly stolen from here https://stackoverflow.com/a/21894086, but eh

[12:49] <timotimo> oh i thought bihash would forbid the same value from appearing more than once

[12:50] <sarna> well it's an ambiguous condition - I like this approach more

[12:51] <timotimo> OK

[12:52] <lizmat> sarna: do you know about invert and push ?

[12:52] <lizmat> m: my %h = a => 1, b => 1; my %i; %i.push(%h.invert); dd %i

[12:52] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Hash %i = {"1" => $["a", "b"]}␤»

[12:52] * sarna implodes

[12:53] <lizmat> oops

[12:57] *** Xliff joined
[13:01] <Altreus> Anyone mind giving me a terminology refresher? In P5 I think of this as a hashref: my $data = {...};

[13:02] <Altreus> I'm not sure what to call it in Raku

[13:02] <Altreus> does it particularly differ from my %data = ... ?

[13:02] <dakkar> m: my $data = { a => 1 };say $data.WHAT

[13:02] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(Hash)␤»

[13:02] <dakkar> it's a Hash

[13:03] <lizmat> Altreus : an itemized Hash in a scalar

[13:03] <lizmat> m: my $data = { a => 1 }; dd $data

[13:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Hash $data = ${:a(1)}␤»

[13:03] <lizmat> note the ${  }

[13:04] <lizmat> that will stop it from iterating seamlessly

[13:04] <lizmat> m: my %data = { a => 1 }; dd %data

[13:04] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Potential difficulties:␤    Useless use of hash composer on right side of hash assignment; did you mean := instead?␤    at <tmp>:1␤    ------> 3my %data = { a => 1 }7⏏5; dd %data␤Hash %data = {:a(1)}␤»

[13:04] <lizmat> m: my %data = a => 1; dd %data

[13:04] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Hash %data = {:a(1)}␤»

[13:04] <Altreus> itemized!

[13:04] <lizmat> note the absence of ${  }, so this *will* iterate seamlessly

[13:05] <Altreus> so ${} has to be decontainerised e.g. with <>

[13:05] <lizmat> yup

[13:05] <Altreus> hmm

[13:05] <lizmat> m: my $data = { a => 1, b => 2 }; .say for $data<>

[13:05] <camelia> rakudo-moar 85847d2f1: OUTPUT: «b => 2␤a => 1␤»

[13:06] <Altreus> We were just running a test where I suggested swapping a % for a $ and it made no difference so presumably Raku does some containerisation magic when passing things to functions?

[13:06] <Altreus> So if it's expecting a $ and you give it a % it itemises it for you, and if it's already a $ it doesn't? Something like that?

[13:07] <lizmat> m: my $a = { a => 1 }; sub a(%b) { dd %b }; a $a

[13:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Hash % = {:a(1)}␤»

[13:07] <Altreus> m: sub whatever($data) { dd $data }; my %data = 1 => 2; whatever(%data)

[13:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «${"1" => 2}␤»

[13:07] <lizmat> that's the single arg rule at work

[13:07] <Altreus> m: sub whatever($data) { dd $data }; my $data = {1 => 2}; whatever($data)

[13:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «${"1" => 2}␤»

[13:07] <Altreus> single arg rule!

[13:07] <Altreus> then

[13:07] <Altreus> m: sub whatever($data, :$more-data) { dd $data }; my $data = {1 => 2}; whatever($data)

[13:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «${"1" => 2}␤»

[13:07] <Altreus> o

[13:08] <Altreus> m: sub whatever($data, :$more-data) { dd $data }; my %data = 1 => 2; whatever(%data)

[13:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: «${"1" => 2}␤»

[13:08] <Altreus> okay

[13:08] <Altreus> still, it always looks the same is the point

[13:08] <lizmat> well, Raku tries very hard to DWIM

[13:08] <Altreus> as long as I SWIM, right

[13:08] <Altreus> :D

[13:09] <lizmat> and if you go with the flow, it generally does

[13:09] <sarna> can I reopen a class in raku, like in ruby? to add one method to it?

[13:09] <lizmat> it's different if you're applying e.g. Perl preconceptions

[13:10] <lizmat> sarna: https://docs.raku.org/syntax/augment

[13:10] <lizmat> but there's probably a better way to do that

[13:10] <lizmat> afk for a bit&

[13:10] <sarna> lizmat: thanks, this one demands going back to monke though :(

[13:11] <Altreus> Perl preconceptions are hard to dispense of, especially when you refresh them every day

[13:12] *** frost-lab left
[13:36] *** sjaveed_ left
[13:39] <lizmat> Altreus: true

[13:39] * lizmat is lucky in that respect

[13:42] *** vrurg left
[13:49] *** aluaces left
[13:50] *** aluaces joined
[13:51] *** vrurg joined
[14:02] <Altreus> I'm lucky in the respect that I'm no longer working with PHP :D

[14:03] <El_Che> [Coke]: thx for doing the logistics for the election

[14:07] *** sjaveed joined
[14:13] *** sjaveed left
[14:14] <[Coke]> 42 ballots reporting (Average votes per ballot: 4.60)

[14:14] <[Coke]> El_Che: so far, not a problem! :)

[14:17] *** gnufr33dom joined
[14:24] <El_Che> not a lot of votes so far

[14:26] <[Coke]> nope. about 3 days left

[14:27] *** Sgeo joined
[14:27] <jdv79> what is the percentage of votes to potential votes?

[14:27] <[Coke]> there is no list of potential voters.

[14:27] <[Coke]> if you want to make one, that'd be great!

[14:28] <[Coke]> it's everyone with access to several of the repos, but there is no trivial way to get that list.

[14:28] <[Coke]> I'm going to verify that the small # of voters appear someone in the list before certifying the results.

[14:28] <[Coke]> *somewhere

[14:28] <jdv79> probably impossible without higher privs at gh to do the api calls

[14:29] <[Coke]> (easier to do 42 lookups than it is to write the script for me ATM)

[14:29] <[Coke]> if someone wrote something that could dump everyone from -a- repo, we can find someone to run it against our 4.

[14:30] *** k-man left
[14:31] <El_Che> if the 14 (!) candidates votes, that leaves us at 28 voters

[14:31] <El_Che> s/votes/vote/

[14:32] *** sarna left
[14:32] <lizmat> .oO( only marginally better than the Mexican army )

[14:32] <El_Che> 14 managers for 28 programmers sounds about right, on the other hand :)

[14:32] <jdv79> if i have some free time today i could probably cobble it together

[14:32] <jdv79> that's a big if i'm afraid:(

[14:34] <codesections> m: say '»ö«' ~~ /<alpha>/

[14:34] <camelia> rakudo-moar 85847d2f1: OUTPUT: «｢ö｣␤ alpha => ｢ö｣␤»

[14:35] <codesections> what's the best way to match just ASCII chars?  Just <[A..Za..z]>, or is there a better way?

[14:35] <jdv79> what's the criteria again?  all contributors with commit bit for @repos?

[14:36] <lizmat> jdv79: indeed

[14:36] <jdv79> thanks

[14:38] *** k-man joined
[14:43] <[Coke]> El_Che: I don't think this is spoilers - some of the 42 votes include votes from candidates.

[14:43] <[Coke]> codesections: by ascii are you including control characters? NUL ?

[14:44] <[Coke]> I don't think we have <ascii>

[14:44] *** sjaveed joined
[14:44] <[Coke]> m: say "wtf" ~~ /^ <ascii>* $/

[14:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «No such method 'ascii' for invocant of type 'Match'.  Did you mean␤'asin'?␤  in block <unit> at <tmp> line 1␤␤»

[14:45] <codesections> [Coke]: Yeah, I didn't think there was a built in (it'd be odd to leave it out from the docs).  Is there a unicode property that would do it, though?

[14:46] <[Coke]> m: say "wtf" ~~ /^ <[\c[control-0000]..\c[LATIN SMALL LETTER Y WITH DIAERESIS]>* $/

[14:46] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name 'control-0000'␤at <tmp>:1␤------> 3say "wtf" ~~ /^ <[\c[control-00007⏏5]..\c[LATIN SMALL LETTER Y WITH DIAERESI␤»

[14:47] <[Coke]> m: say "wtf" ~~ /^ <[\x00..\xFF>* $/

[14:47] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3say "wtf" ~~ /^ <[\x00..\xFF7⏏5>* $/␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3say "wtf" ~~ /^ <[…»

[14:47] <[Coke]> m: say "wtf" ~~ /^ <[\x00..\xFF]>* $/

[14:47] <camelia> rakudo-moar 85847d2f1: OUTPUT: «｢wtf｣␤»

[14:47] <[Coke]> ^^

[14:47] <dakkar> maybe \x7F? ASCII is 7-bit

[14:48] <[Coke]> sure, FF is extended.

[14:49] <codesections> Sorry, I wasn't clear: I really am looking for <[A..Za..z]> -- that is, just alphabetic ASCII

[14:49] <[Coke]> m: say "wtf\t" ~~ /^ <[\x00..\x7F]>* $/

[14:49] <camelia> rakudo-moar 85847d2f1: OUTPUT: «｢wtf    ｣␤»

[14:49] <[Coke]> codesections: then /:i <[a..z]> / works

[14:49] *** stoned75 left
[14:50] <[Coke]> if you use something like <alpha> you're going to get a lot of unicode support that it sounds like you don't want.

[14:50] <codesections> Makes sense.  I think I was just overthinking it, unsuprisingly 

[14:52] <codesections> (I thought there might be something easy that's similar to `:Lu` but for [letter & ASCII] instead of [letter & uppercase]

[14:52] <codesections> )

[14:55] <[Coke]> You could write a code block in the regex to make sure the point is < \xF7

[14:55] <[Coke]> but that seems less maintainable.

[14:55] <codesections> now who's overthinking it? :D

[14:57] *** gnufr33dom left
[14:58] <[Coke]> (and it doesn't look like there's a unicode category for ascii, which makes sense.)

[15:00] <dakkar> it's called `Basic Latin`

[15:00] <dakkar> it's the name of the block 0..7F

[15:00] <dakkar> (took me a while to find it…)

[15:01] <codesections> dakkar: where did you find it?  I haven't found a great source for unicode props

[15:01] *** stoned75 joined
[15:01] <dakkar> https://en.wikipedia.org/wiki/Unicode_block via https://en.wikipedia.org/wiki/Unicode_character_property via https://docs.raku.org/routine/uniprop via https://docs.raku.org/language/regexes#Unicode_properties

[15:03] <codesections> dakkar++ I still feel like there must be a better reference source than Wikipedia, but that's the best I've found too

[15:07] <dakkar> m:  "abc\xe8" ~~ / [<:Script{'Basic Latin'}> & <:L>]+ / # uh?

[15:07] <camelia> rakudo-moar 85847d2f1: ( no output )

[15:07] <dakkar> m: say "abc\xe8" ~~ / [<:Script{'Basic Latin'}> & <:L>]+ / # uh?

[15:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «｢abcè｣␤»

[15:07] *** stoned75 left
[15:07] <dakkar> I was not expecting it to match that è

[15:07] <dakkar> aahh

[15:08] <dakkar> m: say  "abc\xe8" ~~ / [<:Block('Basic Latin')> & <:L>]+ /

[15:08] <camelia> rakudo-moar 85847d2f1: OUTPUT: «｢abc｣␤»

[15:08] <dakkar> the delimiters are important, and it's a Block, not a Script

[15:08] <codesections> thanks :)

[15:08] *** stoned75 joined
[15:09] <dakkar> (weird that what looks like a colonpair isn't)

[15:09] <dakkar> also, what did the parser thought I meant with <:Script{'thing'}> ?

[15:12] <dakkar> codesections: the official source for unicode stuff is https://www.unicode.org/Public/14.0.0/ucd/

[15:12] <dakkar> (the Unicode Character Database)

[15:12] <dakkar> a bit unwieldy, though

[15:17] *** sjaveed left
[15:17] *** sjaveed joined
[15:21] *** sjaveed left
[15:22] *** vrurg left
[15:24] <[Coke]> dakkar++

[15:24] *** DetroitDan joined
[15:24] <[Coke]> I still think a..z is more succint. :)

[15:24] <dakkar> oh sure!

[15:24] <[Coke]> *succinct

[15:25] *** Altai-man joined
[15:25] <dakkar> I wanted to see what the UCD/declarative way looked like

[15:26] <dakkar> also, I found another thing in Raku that looks like a pair but really isn't: the property-based character class

[15:26] <codesections> Yeah, if there had been a shorter one (like `:Lb` or something), it would have won out, but given that there isn't, `[:i <[a..z]>]` is probably better

[15:26] <dakkar> (the other being the named parameter in a signature)

[15:26] <[Coke]> 43 ballots reporting (Average votes per ballot: 4.60)

[15:27] *** sena_kun left
[15:29] <codesections> The downside with [a..z] is that it's a common bug for when people *should* be matching unicode, but forgot.  Depending on the context, it might need a comment to clarify that it's intentional.  :Block('Basic Latin') makes your intention clear

[15:30] <dakkar> "I know there's a billion characters out there, I actually really want just these 52"

[15:43] *** skids joined
[15:49] <guifa> This is where you might want <local-alpha> or similar :-)

[15:54] *** sjaveed joined
[15:58] <Altreus> is there a with except for truth and not definedness? as in X = $_ with Y;

[15:58] <Altreus> if doesn't set $_ does it

[16:00] <[Coke]> yah, hide it all behind a named rule, there's your documentation. :)

[16:06] <jdv79> [Coke]: here's a quick and dirty maybe...: https://nopaste.linux-dev.org/?1323914

[16:06] <jdv79> i could fix it up more maybe later but the basics are there

[16:10] <dakkar> m: my $x=5;if $x -> $_ { .say } # Altreus 

[16:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5␤»

[16:12] <Altreus> yeah a bit more pesky than just repeating x

[16:12] <Altreus> no worries tbh

[16:18] <codesections> m: my $x = 1; say 'True' with $x || Any

[16:18] <camelia> rakudo-moar 85847d2f1: OUTPUT: «True␤»

[16:18] <codesections> m: my $x = 0; say 'True' with $x || Any

[16:18] <camelia> rakudo-moar 85847d2f1: ( no output )

[16:18] <codesections> Altreus: ^^^ could work, though it's a little less clear

[16:19] <Altreus> clarity is preferred :D

[16:19] *** DetroitDan left
[16:20] <codesections> yeah.  It all comes down to what idioms you like/are part of your vocabulary :)

[16:22] <dakkar> macros and slangs are still too complicated / immature to easily create a `wif` statement modifier

[16:22] <dakkar> (I tried)

[16:23] *** sjaveed left
[16:32] *** approaching236 joined
[16:33] <Altreus> wiv

[16:33] <Altreus> :D

[16:33] <[Coke]> jdv79: I'll give it a shot later, thank you

[16:36] <[Coke]> jdv79: what does ~/.rel_gen.conf look like?

[16:36] <[Coke]> { "github_auth": "user@pass" } ?

[16:38] <[Coke]> after putting what I think is a correct rel_gen.conf in place, and changing foo/bar to "Raku" and "doc", I get:

[16:38] *** dakkar left
[16:38] <[Coke]> Not an ARRAY reference at ./test-coke.pl line 25.

[16:40] <[Coke]> ah typo. ok. that gives a huge dump of ids.

[16:44] <[Coke]> I don't understand how you're looping through multiple pages (I see the while loop, but don't understand the logic)

[16:45] * [Coke] hurls https://gist.github.com/coke/ae6506a3a80daba7e7c1d86c4ef23731 for jdv79 

[16:47] <[Coke]> based on that list, I'm seeing several misses in the votes so far (voters who do not appear on the list)

[16:48] <[Coke]> but this reduces the number I have to hand check considerably, thanks.

[16:49] <[Coke]> jnthn: can you make me an admin on rakudo/rakudo, if you're OK with that?

[16:49] <tellable6> [Coke], I'll pass your message to jnthn

[16:51] <El_Che> nwc10 is twice on the list

[16:51] <[Coke]> I dumped several runs of the script into a file and did a sort. probably needed -u

[16:52] <[Coke]> updated

[17:03] <[Coke]> m: say 43/240

[17:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0.179167␤»

[17:07] *** vrurg joined
[17:11] *** MilkmanDan left
[17:14] *** aluaces left
[17:15] *** sjaveed joined
[17:22] *** sjaveed left
[17:30] *** k-man left
[17:33] *** k-man joined
[17:37] *** natrys joined
[17:38] *** MasterDuke left
[17:44] *** aluaces joined
[17:44] *** thundergnat joined
[17:45] *** ensamvarg3 left
[17:45] <thundergnat> m: say 'camelia »ö« ftw' ~~ m:g/<:ASCII>+/; # <-- codesections; if you haven't already found it

[17:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: «(｢camelia ｣ ｢ ftw｣)␤»

[17:45] *** thundergnat left
[17:46] <codesections> O.O thundergnat++ I had _not_ found that, thanks

[17:47] <codesections> (I still feel like there *must* a list of unicode properties somewhere that I just haven't found...)

[17:58] *** sjaveed joined
[17:59] *** Kaiepi left
[18:01] *** sjaveed left
[18:02] *** sjaveed joined
[18:08] *** sjaveed left
[18:09] *** skids left
[18:14] *** domidumont joined
[18:15] *** Kaiepi joined
[18:16] *** ggoebel left
[18:16] *** domidumont left
[18:25] *** bocaneri left
[18:29] <[Coke]> doesn't look like :ASCII is spec'd.

[18:30] <Xliff> thundergnat: When did <:ASCII> get in? It's not documented here: https://docs.raku.org/language/regexes#Predefined_character_classes

[18:30] <tellable6> Xliff, I'll pass your message to thundergnat

[18:33] <[Coke]> (or in roast)

[18:33] <[Coke]> (at least not in S05)

[18:33] <[Coke]> there is :ASCIIHexDigit

[18:35] *** stanrifkin joined
[18:36] <[Coke]> also see :InASCII

[18:36] *** approaching236 left
[18:36] *** cpan-raku left
[18:36] *** Xliff left
[18:37] *** cpan-raku joined
[18:37] *** cpan-raku left
[18:37] *** cpan-raku joined
[18:39] <stanrifkin> How can i lookup ~~ operator with p6doc? Something like perldoc perlop or so...

[18:39] *** sjaveed joined
[18:40] <stanrifkin> ah. I found it. p6doc operators 

[18:42] *** moony left
[18:45] <moritz> stanrifkin: also on docs.raku.org you can enter operators into the search box

[18:45] <moritz> and once upon a time you could also put it in the URL, but that feature has been removed some time ago

[18:48] <stanrifkin> moritz: is docs.raku.org downloadable? I mean is there a zip or so? 

[18:49] <[Coke]> stanrifkin: worst case there's https://github.com/Raku/doc

[18:50] <[Coke]> there's some work in progress to restore the single-big-html version also

[18:53] *** sjaveed left
[18:56] *** moony joined
[18:57] *** ccamel left
[18:57] <codesections> [Coke]: Xliff: now I'm a bit confused about what unicode properties Raku *does* support.  My previous understanding was that we supported some list of properties defined by the unicode consortium/ICU/some other group.  Under that understanding, we didn't need to document specific properties that we support (though it would be nice if we could link to an ICU page listing the current relevant

[18:57] <codesections> properties).  Was that understanding wrong?

[18:58] <[Coke]> we need to document what we support, even if it's a link.

[18:58] <codesections> Listening to you now, it sounds like we only support a subset of properties, and have to select properties that we want to support (instead of getting them automatically as they're added).  If that's the case, then we should be documenting/spec'ing each property as it's added

[18:59] <codesections> m: say ['-'] ~~ /<:dash>/

[18:59] <camelia> rakudo-moar 85847d2f1: OUTPUT: «｢-｣␤»

[18:59] <codesections> ^^^ works

[18:59] <codesections> m: '☕' ~~ /<:Basic_Emoji>/ 

[18:59] <camelia> rakudo-moar 85847d2f1: ( no output )

[18:59] <[Coke]> codesections: ... I'm not speaking in any kind of expert capacity here. :)

[18:59] <codesections> ^^^ doesn't work

[19:00] <[Coke]> I'm just checking to see if stuff is listed on docs site or in roast, that's it

[19:00] <codesections> and I'm not sure if that's because :dash is in a different category according to ICU, or if that's because we've decided to support :dash but not :Basic_Emoji

[19:02] <[Coke]> .seen samcv

[19:02] <tellable6> [Coke], I saw samcv 2020-08-24T19:18:52Z in #raku-dev: <samcv> lizmat++

[19:02] <[Coke]> she did most of the work. think nwc10 also has touched it recently

[19:03] <tobs> m: say '☕' ~~ /<:Basic_Emoji>/

[19:03] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Nil␤»

[19:03] <tobs> (so it *really* does not work...)

[19:03] <codesections> haha, fair point :)

[19:05] <codesections> m: say '☕'.uniprop('Basic_Emoji')

[19:05] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[19:05] <codesections> I'm assuming those use the same mechanisim

[19:10] <codesections> m: say 'a'.uniprop('L'); say 'a'.uniprop('ASCII'); say 'a'.uniprop('Alpha')

[19:10] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1␤Basic Latin␤True␤»

[19:10] <stanrifkin> in the book "Learning Perl6" the first example program "find_moth_genera.p6" is stuck executing. There is no output. Does anyone had the same issue?

[19:11] <codesections> I don't understand why &uniprop sometimes returns a Str, a Bool, or an Int

[19:11] <codesections> very odd

[19:15] *** camelCaser joined
[19:16] *** Skarsnik joined
[19:18] *** sjaveed joined
[19:22] <lizmat> codesections: uniprop is a multi that returns  different things for different invocants

[19:23] <lizmat> although I would argue that the 'L' case returning 1 is wrong as it should return a Bool

[19:24] *** sjaveed left
[19:24] <codesections> lizmat: yeah, I see that now.  I was just looking at the source, but couldn't figure out they rhyme or reason behind when it returns different types.  It also **looks** like the source has a list of all unicode properties Raku knows about – but then that list doesn't have :ASCII, which is what got us started on this topic

[19:24] <codesections> https://github.com/rakudo/rakudo/blob/master/src/core.c/Cool.pm6#L624-L679

[19:25] *** sena_kun joined
[19:26] * lizmat wouldn't know why that would not be in there

[19:27] <codesections> It does have `General_Category`.  My (now) current understanding is that :ASCII is a synonym for :Block('Basic Latin'), which looks up a character's `General Category`.  But I'm not sure how that's implemented/if that's even correct

[19:27] *** Altai-man left
[19:28] *** approaching236 joined
[19:29] *** molaf joined
[19:33] <[Coke]> stanrifkin: do you have a copy of the program in a gist?

[19:33] *** approaching236 left
[19:35] <stanrifkin> [Coke]: i looked at the source... the program seems fine. There is a misprinting in the book. 

[19:35] <[Coke]> oops.

[19:35] <[Coke]> stanrifkin++

[19:48] *** melezhik joined
[19:48] <melezhik> how can I server static files with cro?

[19:48] <tellable6> 2020-09-16T20:37:08Z #raku <SmokeMachine> melezhik thanks! I’ll take a look as soon as possible

[19:48] <melezhik> serve

[19:51] *** sjaveed joined
[19:57] *** sjaveed left
[19:59] *** skids joined
[19:59] *** stoned75 left
[20:01] *** stoned75 joined
[20:02] *** sjaveed joined
[20:02] *** natrys left
[20:07] *** sjaveed left
[20:18] *** Black_Ribbon joined
[20:19] <stanrifkin> how do you use all the unicode special characters? how do you list... and copy them into a editor?

[20:20] <timotimo> there's a documentation page about different ways

[20:23] <melezhik> looks like the answer on my question is here - https://cro.services/docs/reference/cro-http-router

[20:24] <melezhik> in Serving static content§ section

[20:25] <[Coke]> melezhik: https://docs.raku.org/language/unicode_entry

[20:25] <[Coke]> er.

[20:25] <[Coke]> stanrifkin: https://docs.raku.org/language/unicode_entry

[20:26] <melezhik> [Coke] ))

[20:26] <[Coke]> someone should add an os x section to that pag.

[20:26] <stanrifkin> os x user which uses raku? :)

[20:28] <melezhik> how the things are in general in Raku community? what's up  recent reddit are quite quiet )))  ...

[20:30] <lizmat> 2+ posts per day ?

[20:30] <melezhik> oh ... just my personal perception, I might be wrong though ... maybe it's me not that active and so feel that way )))

[20:46] <jdv79> [Coke]: sorry, i took a script at work and butchered it for that.

[20:47] <jdv79> anything i can help with?  seemed straightforward at the time.

[20:47] <[Coke]> sorry about what now?

[20:47] <[Coke]> I got what I needed, I think.

[20:48] <[Coke]> oh, about the algorithm? no worries

[20:48] <jdv79> then not sorry

[20:48] <jdv79> good stuff

[20:48] <jdv79> so, back to the origin of that.  what is the % voting so far?

[20:49] *** melezhik left
[20:49] <lizmat> jdv79: not knowing how many people can vote, sorta makes % calculations difficult ?

[20:49] <lizmat> I understand there have been 42 ballots cast so far

[20:49] <jdv79> well, i think we now have potential voters

[20:50] <jdv79> or dont we?

[20:52] <lizmat> jdv79: ah, did I miss something ?

[20:53] <jdv79> i provided coke with a scriptlet that can get the list from gh, more or less.

[20:54] <jdv79> ah, ~18%.  i backlogged better.  cool.

[20:55] <lizmat> ah, cool!

[20:58] *** MilkmanDan joined
[20:59] <[Coke]> I haven't validated anything, but that's the raw data right now. :)

[21:00] <jdv79> its like hte US elections - "as it comes in"

[21:01] <timotimo> not enough voter suppression

[21:04] *** finsternis left
[21:07] *** mowcat joined
[21:08] *** stoned75 left
[21:08] *** MasterDuke joined
[21:16] *** ggoebel joined
[21:19] *** rindolf left
[21:24] *** aindilis left
[21:28] *** sjaveed joined
[21:33] *** sjaveed left
[21:42] *** finsternis joined
[21:51] *** Sgeo_ joined
[21:54] *** Sgeo left
[21:55] *** aluaces left
[21:56] *** Sgeo__ joined
[21:57] *** aindilis joined
[21:58] <guifa> SmokeMachine++ for the example on webperl, I’m already making good use fo it

[22:00] *** Sgeo_ left
[22:07] *** Sgeo_ joined
[22:11] *** Sgeo__ left
[22:14] *** Kaeipi joined
[22:17] *** Kaiepi left
[22:20] *** thundergnat joined
[22:21] <thundergnat> Sorry I didn't answer earlier, I got sucked into meetings and other RL intervened.

[22:21] <tellable6> 2020-09-17T18:30:56Z #raku <Xliff> thundergnat: When did <:ASCII> get in? It's not documented here: https://docs.raku.org/language/regexes#Predefined_character_classes

[22:23] *** sena_kun left
[22:23] <thundergnat> .tell Xliff <:ASCII> isn't a Raku specific thing. It an official Unicode property alias. See http://unicode.org/Public/UNIDATA/PropertyValueAliases.txt - search for ASCII. It's an alias for Block<Basic Latin>.

[22:23] <tellable6> thundergnat, I'll pass your message to Xliff

[22:24] *** aindilis left
[22:25] <codesections> thundergnat: is ASCII an alias for Block<Basic Latin> or for Block?  Or both?

[22:25] <guifa> codesections: ASCII is defined here: http://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt 

[22:26] <codesections> m: say 'a'.uniprop('ASCII'); say 'a'.uniprop('blk')

[22:26] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Basic Latin␤Basic Latin␤»

[22:29] <codesections> guifa: so why does ^^^ return "Basic Latin" instead of True or 1?

[22:30] <codesections> also, 'ASCII' has the same unipropcode as 'block', which is what made me think it was an alias for 'Block' rather that Block<Basic Latin>

[22:30] <codesections> m: use nqp; say nqp::unipropcode('ASCII')

[22:30] <camelia> rakudo-moar 85847d2f1: OUTPUT: «6␤»

[22:30] <codesections> m: use nqp; say nqp::unipropcode('Block')

[22:30] <camelia> rakudo-moar 85847d2f1: OUTPUT: «6␤»

[22:31] *** sjaveed joined
[22:31] <thundergnat> I'm not sure how  'a'.uniprop('ASCII'); is parsing. blk (block) is a Unicode property and ASCII is nominally an alias for blk<Basic Latin> 

[22:32] <thundergnat> You may be right though.

[22:32] <thundergnat> m: say "٣".uniprop(<ASCII>)

[22:32] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Arabic␤»

[22:32] <thundergnat> Hmm.

[22:35] <thundergnat> I suspect that that is an accident of parsing rather than a intentional implementation.

[22:35] <guifa> Let’s follow the rabbit hole 

[22:35] <guifa> uniprop is defined in Cool, and calls the sub uniprop, first arg the string and the rest other args (e.g. ASCII)

[22:36] <codesections> yeah, and that eventually gets you to unicode_db.c 

[22:37] <guifa> m: use nqp; say nqp::unipropcode(‘AHex’)

[22:37] <camelia> rakudo-moar 85847d2f1: OUTPUT: «28␤»

[22:37] <guifa> m: use nqp; say nqp::unipropcode(‘Xxasdsefsdf’)

[22:37] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[22:39] <codesections> yeah, (at least in MoarVM) all that is from the (very long) table in unicode_db.c, which is auto-generated from MoarVM/tools/ucd2c.pl as part of the MoarVM build 

[22:40] <codesections> When built, it contains the Unicode Character Database 

[22:40] <thundergnat> My suspicion: Unicode properties are all a single word/phrase (linked by underscores). ASCII is an alias for blk; Basic_Latin. I suspect that it is just grabbing the first "word" of the alias (blk) and using that as the property to search for. (all speculation)

[22:42] <codesections> interesting!  So, if that's the case, it means that <:ASCII> isn't using the same machinery as &uniprop?  I'd kind of been assuming that <:ASCII> was implemented as something like `$str.uniprop('ASCII') eq 'Basic Latin'`, but I guess it must use different machinery if it doesn't have the same issue

[22:43] <thundergnat> see my above snippet

[22:43] <thundergnat> m: say "٣".uniprop(<ASCII>)

[22:43] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Arabic␤»

[22:44] <thundergnat> How is it finding Arabic if it isn't just searching for Block?

[22:44] <thundergnat> m: say "٣".uniprop(<blk>)

[22:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Arabic␤»

[22:44] <codesections> m: "٣" ~~ /<:ASCII>/

[22:44] <camelia> rakudo-moar 85847d2f1: ( no output )

[22:44] <codesections> m: say "٣" ~~ /<:ASCII>/

[22:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Nil␤»

[22:44] <thundergnat> m: say "٣".uniprop(<blk ASCII>)

[22:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Cannot resolve caller uniprop(Int:D, List:D); none of these signatures match:␤    (Str:D $str, |c)␤    (Int:D $code)␤    (Int:D $code, Stringy:D $propname)␤  in block <unit> at <tmp> line 1␤␤»

[22:44] <guifa> m: say “α”.uniprop(<anything>)

[22:44] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[22:44] <thundergnat> m: say "٣".uniprop(<blk;ASCII>)

[22:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[22:45] <thundergnat> Hmm

[22:45] <guifa> Something weird is definitely going on

[22:45] <thundergnat> On the other hand, I may be completely full of it...

[22:45] *** stanrifkin left
[22:48] <SmokeMachine> guifa: really? Now I’m curious!

[22:49] <guifa> SmokeMachine: I don’t have it ready yet, but it’s going to make localizing errors SOOOOO much easier

[22:50] <guifa> I just wish for JS there was a way to open a file AND SAVE IT in the same place lol

[22:50] * guifa also needs to write a ton of fake exception data 

[22:52] <SmokeMachine> Have you thought of using the file API? You could download the new version generated by the js

[23:01] *** pecastro left
[23:01] *** aindilis joined
[23:01] *** Skarsnik left
[23:07] <thundergnat> m: say "\c[LATIN CAPITAL LETTER P WITH SQUIRREL TAIL]" # The odd things you stumble across while perusing the Unicode tables

[23:07] <camelia> rakudo-moar 85847d2f1: OUTPUT: «Ꝕ␤»

[23:10] <guifa> I actually used that character in my dissertation 

[23:10] <guifa> It’s generally read as "pro"

[23:12] <thundergnat> I can't say that I ever consciously saw that particular character before. I may have _seen_ it but didn't particularly notice it. 

[23:15] <guifa> Ps and Qs (hence the expression) have all sorts of variations with special readings

[23:32] *** aindilis left
[23:41] *** epony left
[23:42] *** epony joined
[23:42] *** Sgeo joined
[23:44] *** Sgeo__ joined
[23:45] <codesections> Aha! I've found the missing piece of the puzzle: &unipvalcode

[23:45] <codesections> m: use nqp; say given '٣' {nqp::matchuniprop(.ord, nqp::unipropcode('ASCII'), nqp::unipvalcode(nqp::unipropcode('ASCII'), 'ASCII'))}

[23:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»

[23:45] <codesections> m: use nqp; say do given '٣' {nqp::matchuniprop(.ord, nqp::unipropcode('ASCII'), nqp::unipvalcode(nqp::unipropcode('ASCII'), 'ASCII'))}

[23:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: «0␤»

[23:45] <codesections> m: use nqp; say do given 'a' {nqp::matchuniprop(.ord, nqp::unipropcode('ASCII'), nqp::unipvalcode(nqp::unipropcode('ASCII'), 'ASCII'))}

[23:45] *** Sgeo_ left
[23:45] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1␤»

[23:46] <codesections> thundergnat: guifa: I'm pretty sure ^^^^ (or something like it) is how ~~ /<:ASCII>/ is implemented 

[23:47] *** Sgeo left
[23:50] <codesections> also

[23:50] <codesections> m: use nqp; say nqp::unipvalcode(6, 'BasicLatin'); say nqp::unipvalcode(6, 'ASCII'); say nqp::unipvalcode(6, 'Invalid');

[23:50] <camelia> rakudo-moar 85847d2f1: OUTPUT: «1␤1␤0␤»

[23:54] *** stanrifkin joined
[23:58] <stanrifkin> When I use an variable which I declared as Int like my Int $n and then assign a string to it. Is this checked only at runtime not compile time? When I run raku with the -c option is says OK.

[23:58] *** dataangel left
[23:59] *** dataangel joined
