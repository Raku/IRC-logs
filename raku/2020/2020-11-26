[00:02] *** xinming left
[00:02] *** xinming joined
[00:04] *** ape666 left
[00:07] *** BenGoldberg left
[00:09] *** guifa2 left
[00:12] *** xinming left
[00:12] *** xinming joined
[00:13] *** leont left
[00:25] *** guifa2 joined
[00:37] *** guifa2 left
[00:40] *** guifa2 joined
[00:44] *** Chi1thangoo left
[00:47] *** xinming left
[00:48] *** xinming joined
[00:48] *** Doc_Holliwood left
[01:00] *** xinming left
[01:02] *** raku-bridge left
[01:02] *** raku-bridge joined
[01:03] *** xinming joined
[01:03] *** guifa2 left
[01:12] *** lucasb left
[01:14] *** guifa2 joined
[01:16] *** xinming left
[01:17] *** xinming joined
[01:21] *** guifa2 left
[01:27] <xinming> Anyone here can give me some hint on writing promises chain, which is something like,  while ($data = fetch) { process-data($data) }   ?

[01:27] <xinming> I've thought a white, Still not much clue about it.

[01:31] *** guifa2 joined
[01:33] <xinming> Just skeleton is fine, I know how to chaining, but just stuck with how I can break the Promise

[01:38] <timotimo> i'm not entirely sure how you mean, how does this involve promises, how does it involve chaining?

[01:41] *** ape666 joined
[01:42] <xinming> hmm, let me think about it

[01:44] *** ape666 left
[02:04] *** xinming left
[02:07] <guifa2> I swear when I get done with this refactoring of CLDR I'm never coming back to it lol

[02:07] *** xinming joined
[02:08] <guifa2> everytime I get half way done I come up with a better way =\

[02:16] *** ensamvarg195 joined
[02:28] *** xinming left
[02:28] *** xinming joined
[02:33] <xinming> timotimo: https://termbin.com/mx2z

[02:33] <xinming> timotimo: It's soemthing like this, building a promise chain with data received.

[02:38] <timotimo> it kind of looks like you want a single worker that receives from a channel and does stuff, like in a loop that keeps a variable around to hold what the pasted code uses prev-p.result for

[02:38] <xinming> timotimo: yea, something like that, I've been stucking in this loop for an hour. :-(

[02:39] <timotimo> really depends what you want to get out of the whole thing

[02:39] <xinming> receive a data, and build a promise

[02:39] <xinming> the promise requires previous previous value to be processed.

[02:39] <timotimo> where does the promise need to go?

[02:40] <xinming> Do you mean we don't need promise in this case?

[02:40] <timotimo> not sure yet

[02:40] <xinming> timotimo: actually, $channel.recevie  part is also a promise.

[02:41] <timotimo> it feels like this is being done to manage the queue of incoming requests/data somewhere else than the channel

[02:41] <timotimo> do you want something resembling "the current promise"/"the latest promise"?

[02:43] <xinming> Nope

[02:43] <Xliff> m: say Int !=:= Mu

[02:43] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´True‚ê§¬ª

[02:43] <xinming> I just want to ensure these promises are chained as long as values arrived.

[02:44] <Xliff> m: class A { }; say A !=:= Mu

[02:44] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´True‚ê§¬ª

[02:44] <timotimo> but it's not important that it's a Promise that is used?

[02:45] <timotimo> m: my Channel $c .= new; $c.send("first"); Supply.interval(1).tap({ $c.send($_) }); start react { my $last; whenever $c { $last = $last.comb.pick(5).join("") ~ $_; $last.say } }; sleep 6

[02:45] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´Unhandled exception in code scheduled on thread 7‚ê§A react block:‚ê§  in code  at <tmp> line 1‚ê§‚ê§Died because of the exception:‚ê§    No such method 'comb' for invocant of type 'Any'‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[02:45] <timotimo> m: my Channel $c .= new; $c.send("first"); Supply.interval(1).tap({ $c.send($_) }); start react { my $last = ""; whenever $c { $last = $last.comb.pick(5).join("") ~ $_; $last.say } }; sleep 6

[02:45] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´first‚ê§fitsr0‚ê§0irfs1‚ê§1rsf02‚ê§0rf1s3‚ê§1srf34‚ê§rs4315‚ê§r145s6‚ê§¬ª

[02:46] <timotimo> does this seem like it fits your use case?

[02:47] <timotimo> you also wanted to have something that handles breaking the promise, right?

[02:48] <timotimo> m: my Channel $c .= new; $c.send("first"); Supply.interval(1).tap({ $c.send($_) }); start react { my $last = ""; whenever $c { $last = $last.comb.pick(5).join("") ~ $_; $last.say; die "oh no" if rand < 0.2 }; CATCH { default { .say; $c.close; } } }; sleep 8

[02:48] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´first‚ê§Unhandled exception in code scheduled on thread 7‚ê§fitrs0‚ê§0sftr1‚ê§rt1s02‚ê§rt0s13‚ê§1st034‚ê§0341s5‚ê§A react block:‚ê§  in code  at <tmp> line 1‚ê§‚ê§Died because of the exception:‚ê§    oh no‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[02:48] *** xinming left
[02:49] *** xinming joined
[02:55] <timotimo> ah you're back

[02:55] <timotimo> what was the last message of mine you saw?

[02:55] <timotimo> i guess you could probably look at the irclog?

[02:57] <xinming> timotimo: I don't see any log, I just have the last message I wrote.

[02:57] <xinming>  xinming | Just a moment, i'll rewrite my example.

[02:57] <timotimo> i did not get that line :)

[02:57] <timotimo> m: my Channel $c .= new; $c.send("first"); Supply.interval(1).tap({ $c.send($_) }); start react { my $last = ""; whenever $c { $last = $last.comb.pick(5).join("") ~ $_; $last.say } }; sleep 8

[02:57] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´first‚ê§irfts0‚ê§0trfs1‚ê§st0rf2‚ê§tfsr23‚ê§f2rst4‚ê§t4sr25‚ê§t45r26‚ê§64tr27‚ê§¬ª

[02:58] *** BenGoldberg joined
[03:02] <timotimo> do you like it?

[03:09] <xinming> timotimo: I'll check, sorry, was rewriting another version of that example

[03:10] <timotimo> m: my Channel $c .= new; $c.send("first"); Supply.interval(1).tap({ say "sending $_"; $c.send($_) }); start react { my $last = ""; whenever $c { $last = $last.comb.pick(5).join("") ~ $_; $last.say; sleep 1.25 } }; sleep 8

[03:10] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´sending 0‚ê§first‚ê§sending 1‚ê§tfsri0‚ê§sending 2‚ê§tsfr01‚ê§sending 3‚ê§1tsfr2‚ê§sending 4‚ê§sending 5‚ê§rt1s23‚ê§sending 6‚ê§2srt34‚ê§sending 7‚ê§23rts5‚ê§¬ª

[03:11] <timotimo> ^- demonstrates that it'll only process something that was sent if the previous processing step has finished

[03:11] <timotimo> which is what i think your promise chaining was needed for

[03:13] <xinming> timotimo: https://termbin.com/p0ri

[03:17] <Xliff> m: Supply.interval(1).tap({ .say }); sleep 3;

[03:17] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§¬ª

[03:18] <xinming> timotimo: https://termbin.com/uc3uu    <--- This one with what I'm trying to do.

[03:18] <Xliff> m: Supply.interval(1.5).tap({ .say }); sleep 3;

[03:18] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§¬ª

[03:18] <xinming> timotimo: and I just realized, that I have to use inifinite loop.

[03:19] <xinming> BBL

[03:29] <timotimo> my code does the infinite loop if you "react" instead of "start react"

[03:31] *** BenGoldberg left
[03:37] <xinming> timotimo: https://termbin.com/m1iw   This is my final working version.

[03:37] <xinming> timotimo: I don't understand your code very well before, Will check it again. :-)

[03:40] <timotimo> my "react whenever $c" is also an infinite loop, unless you close the channel

[03:44] <xinming> yea, understood now

[03:44] <xinming> Still can't think in raku

[03:51] <timotimo> :)

[03:55] <timotimo> in this case, the react/whenever is equivalent to an infinite loop with $c.receive

[04:31] *** Xliff left
[04:34] <guifa2> Any great (===simple, else I'll go more complex) way to supress some keys in a subclass of Hash?

[04:34] <guifa2> I tried overriding .keys, but .kv and .values are unaffected

[04:57] *** xinming left
[04:58] *** xinming joined
[05:02] *** aborazmeh joined
[05:02] *** aborazmeh left
[05:02] *** aborazmeh joined
[05:03] *** guifa2 left
[05:07] <ben_> 

[05:20] <holyghost> guifa2: I use .kv

[05:20] <tellable6> holyghost, I'll pass your message to guifa2

[05:28] *** marcusr left
[05:32] *** Doc_Holliwood joined
[05:33] *** parabolize left
[05:34] *** aborazmeh left
[05:57] *** frost-lab joined
[05:57] *** xinming left
[05:57] *** xinming joined
[06:04] *** sena_kun joined
[06:08] *** bdju left
[06:09] *** aborazmeh joined
[06:09] *** aborazmeh left
[06:09] *** aborazmeh joined
[06:11] *** jmerelo joined
[06:23] *** bdju joined
[06:23] *** BenGoldberg joined
[06:29] <Geth> ¬¶ doc: 3136df50ae | JustThisGuyAZ++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/testing.pod6

[06:29] <Geth> ¬¶ doc: Update testing.pod6

[06:29] <Geth> ¬¶ doc: 

[06:29] <Geth> ¬¶ doc: Fix anchors in links under the "Testing exceptions" section.

[06:29] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/3136df50ae

[06:29] <linkable6> Link: https://docs.raku.org/language/testing

[06:31] *** squashable6 left
[06:34] *** squashable6 joined
[06:38] *** pilne joined
[06:55] *** raku-bridge left
[06:57] *** BenGoldberg left
[07:04] *** pilne left
[07:12] *** ufobat__ joined
[07:14] *** xinming left
[07:14] *** xinming joined
[07:15] *** aborazmeh left
[07:17] *** aborazmeh joined
[07:17] *** aborazmeh left
[07:17] *** aborazmeh joined
[07:24] *** xinming left
[07:25] *** xinming joined
[07:29] *** abraxxa left
[07:31] *** sjm_uk joined
[07:32] *** domidumont joined
[07:33] *** squashable6 left
[07:33] *** squashable6 joined
[07:34] *** squashable6 left
[07:34] *** abraxxa1 joined
[07:35] *** squashable6 joined
[07:55] *** aborazmeh left
[08:04] *** wamba joined
[08:04] <xinming> SmokeMachine: Does `@result-seq .= grep({ });`  work as expcectd?

[08:09] <holyghost> racul compiles (symboltable with hawking boltzmann random approx. done), see http://github.com/theholyghost2/racul

[08:09] <holyghost> I might PR into raku when there's a piece of the compiler done, anyhow

[08:09] <SmokeMachine> xinming: it seems it doesn't  :( but $result-seq does...

[08:10] <SmokeMachine> xinming:  https://www.irccloud.com/pastebin/t22JGhc6/

[08:11] *** suman joined
[08:11] *** Altai-man joined
[08:11] <suman> how can I check from within raku if gcc is present in the system?

[08:12] <SmokeMachine> xinming: it seems I need to write a STORE() to Red::ResultSeq

[08:13] *** sena_kun left
[08:14] *** ufobat_ joined
[08:18] *** ufobat__ left
[08:25] *** skids left
[08:29] *** xinming left
[08:31] *** cpan-raku left
[08:32] *** ufobat_ left
[08:32] *** dakkar joined
[08:33] *** cpan-raku joined
[08:33] *** cpan-raku left
[08:33] *** cpan-raku joined
[08:33] <CAPTCHA_REQUIRED> You could also exec cc and check if it's stdout contains the string gcc

[08:34] <CAPTCHA_REQUIRED> *xec cc -v

[08:34] *** xinming joined
[08:34] <xinming> Is there channel log here?

[08:34] <xinming> I'll check log

[08:34] <CAPTCHA_REQUIRED> But that would check if gcc is set as the current c compiler rather than if it is available on the system

[08:35] <xinming> m: class AA { has $.a; has $.b; has $.c; }; my $obj = AA.new: :a(1), :b(2), :c(3); %(<a b c>.map({ $_ =>  $obj."$_"(); })).raku.say;

[08:35] <camelia> rakudo-moar e46a1da29: OUTPUT: ¬´{:a(1), :b(2), :c(3)}‚ê§¬ª

[08:35] <xinming> Is there a shorter version of       <a b c>.map({ $_ => $obj."$_"() })   ?

[08:35] <xinming> SmokeMachine: Yea, another bug, I discovered it just now, but busy with other things, so no time to isolate the real issue.

[08:37] <SmokeMachine> xinming: what's the bug?

[08:41] <xinming> the @result-seq .= grep({ ... })

[08:43] <xinming> SmokeMachine: BTW, Can we have a shorter version of   <a b c>.map({ $_ => $obj."$_"() })   ??

[08:44] *** suman left
[09:14] <Geth> ¬¶ doc: 5b5735fbe6 | (Stoned Elipot)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/testing.pod6

[09:14] <Geth> ¬¶ doc: Add back PERL6_TEST_DIE_ON_FAIL

[09:14] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/5b5735fbe6

[09:14] <Geth> ¬¶ doc: 56b9b69d1e | (Stoned Elipot)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/testing.pod6

[09:14] <Geth> ¬¶ doc: Document {RAKU,PERL6}_TEST_TIMES

[09:14] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/56b9b69d1e

[09:14] <linkable6> Link: https://docs.raku.org/language/testing

[09:23] <SmokeMachine> xinming: I could swear we did... but I could find it...

[09:24] <JJAtria[m]> The link in https://github.com/raku/ecosystem-unbitrot still points to https://perl6.github.io/ecosystem-unbitrot

[09:32] *** aborazmeh joined
[09:32] *** aborazmeh left
[09:32] *** aborazmeh joined
[09:33] *** MasterDuke joined
[09:38] *** abraxxa1 left
[09:42] *** abraxxa joined
[09:48] *** BenGoldberg joined
[09:49] *** abraxxa left
[09:50] *** abraxxa joined
[10:17] *** Doc_Holliwood left
[10:20] *** aborazmeh left
[10:23] *** BenGoldberg left
[10:24] *** tejr left
[10:24] *** morayj joined
[10:26] *** tejr joined
[10:27] *** kensanata joined
[10:30] *** wamba left
[10:32] *** sjm left
[10:40] *** Doc_Holliwood joined
[10:45] *** sjm joined
[11:07] *** wamba joined
[11:21] *** leont joined
[11:28] *** Sgeo left
[11:34] *** unclechu left
[11:34] *** ThaEwat left
[11:34] *** JJAtria[m] left
[11:34] *** CIAvash left
[11:34] *** MitarashiDango[m left
[11:35] *** matiaslina left
[11:35] *** AlexDaniel` left
[11:37] *** kensanata left
[11:39] *** sjm left
[11:40] *** CIAvash joined
[11:42] *** Altai-man left
[11:46] *** frost-lab left
[11:47] *** ThaEwat joined
[11:47] *** unclechu joined
[11:47] *** AlexDaniel` joined
[11:47] *** matiaslina joined
[11:47] *** JJAtria[m] joined
[11:47] *** MitarashiDango[m joined
[11:49] *** sjm joined
[12:25] <cpan-raku> New module released to CPAN! eigenstates (0.0.3) by 03ELIZABETH

[12:28] *** abraxxa left
[12:32] *** abraxxa1 joined
[12:36] *** kensanata joined
[12:37] *** domidumont left
[12:41] *** domidumont joined
[12:43] *** Black_Ribbon left
[12:57] *** abraxxa1 left
[13:03] *** tib left
[13:05] *** sena_kun joined
[13:05] *** abraxxa joined
[13:06] *** Xliff joined
[13:06] *** squashable6 left
[13:06] <Xliff> Happy Thanksgiving, everyone!

[13:08] <xinming> SmokeMachine: I think there is another bug, Which is,    `Model.^all.grep({ .id in @!has-many.map({ .xx-id }) });`  is different from  `Model.^all.grep({ .id in @.has-many.map({ .xx-id }) });`

[13:08] *** squashable6 joined
[13:09] <xinming> SmokeMachine: Please notice the @!has-many vs @.has-many, I just encountered this, not much time to go deeper now, Later will dive into this when I get time.

[13:11] <SmokeMachine> xinming: really?! I'll need to take a look, would you mind to open a issue, please?

[13:12] <holyghost> Xliff : happy TG ! take a look at racul : http://github.com/theholyghost2/racul

[13:12] <holyghost> Xliff : it's Scheme for inside racul 

[13:12] <holyghost> s/racul/raku

[13:13] <holyghost> symbol table is ok, now I have to do the parser of the compiler/REPL

[13:13] <xinming> SmokeMachine: Later, when I have time, I'll also submit the issue with test case.

[13:13] *** BenGoldberg joined
[13:14] <SmokeMachine> xinming: thanks

[13:14] <holyghost> It should load scheme code and execute that in raku with a compiler pattern. You then write Scheme files which can e.g. be persistent in memory

[13:16] *** marcusr joined
[13:20] <holyghost> It can become a Scheme with futures even, I tried to build in some OO

[13:20] <Xliff> holyghost: Good. I'm glad you are progressing with your work. 

[13:20] *** tib joined
[13:20] <Xliff> I am doing the same with mine.

[13:20] <Xliff> Passed 460kLOC just a while ago.

[13:20] <Xliff> Not familiar with Scheme, though so.... :/

[13:23] <holyghost> Coolness, Scheme is all right, don't worry about it

[13:29] <xinming> SmokeMachine: How do we do DESC sorting please?

[13:29] <xinming> SmokeMachine: The default is asc

[13:29] <Xliff> xinming: Anti sort?

[13:29] <xinming> .sort({ $^a <=> $^b })   ??

[13:30] <xinming> Xliff: in sql using Red

[13:30] <xinming> .sort({ $^b <=> $^a })   ??

[13:30] <SmokeMachine> xinming: `Model.^all.sort: -*.col`

[13:31] <SmokeMachine> m: ^10 .sort: -* # xinming: as here

[13:31] <camelia> rakudo-moar f2851b907: ( no output )

[13:31] <SmokeMachine> m: say ^10 .sort: -* # xinming: as here

[13:31] <camelia> rakudo-moar f2851b907: OUTPUT: ¬´(9 8 7 6 5 4 3 2 1 0)‚ê§¬ª

[13:32] <xinming> Ok, thanks.

[13:34] <Xliff> SmokeMachine: Is that explanation in the tests or the docs?

[13:35] <SmokeMachine> Xliff: not sure...

[13:35] <Xliff> Hmmm.... looks like t/08-best-tree.t is the earliest.

[13:36] <Xliff> No mention in docs/

[13:37] <Xliff> SmokeMachine: Where would something like that go in docs/ ?

[13:37] <SmokeMachine> sort on tests: https://www.irccloud.com/pastebin/a51XAa5T/

[13:38] <SmokeMachine> Xliff: not sure, maybe here? https://fco.github.io/Red/api/Red/ResultSeq

[13:39] <Xliff> Yeah. Am editing.

[13:40] <SmokeMachine> Xliff: I think we need to improve this section and show it better how to use the different ways of using the ResultSeq methods

[13:41] <SmokeMachine> Xliff: thanks!

[13:45] *** BenGoldberg left
[13:45] *** BenGoldberg joined
[13:47] <Xliff> SmokeMachine: https://paste.centos.org/view/33c97e47

[13:48] <Xliff> I can't submit a PR because I am using an older fork.

[13:50] <SmokeMachine> Xliff: it's looking good, but it's generated by this (https://github.com/FCO/Red/blob/master/lib/Red/ResultSeq.pm6#L262)

[13:50] <SmokeMachine> Xliff: ok, I'll apply that after $dayjob...

[13:53] <SmokeMachine> Xliff: thank you very much!

[13:59] *** lucasb joined
[14:05] <Xliff> SmokeMachine: yw!

[14:07] <SmokeMachine> and I was thinking... I think it does make sense to support `.sort: *.col <=> *.col` or `.sort: { $^b.col <=> $^a.col}`...

[14:22] <Xliff> How would that work?

[14:22] <Xliff> How can you tell what the ordering is from a block?

[14:22] <Xliff> I agree, that would be a useful alternative. I was about to suggest that, but I ran into that particular question.

[14:23] <Xliff> Do you run a sample sequence through the sort func and analyze the resutls?

[14:28] <SmokeMachine> Xliff: if it expects 2 params: it will create 2 alias from the Model, run the block passing both alias. if the result is a Red::AST::ShipOP and both sides of it is the same column from the same base model, it uses that column to order, if the first model I've passed is the left model it's DESC, otherwise it's ASC. And if it's anything different from that, I order like: order by <left> - <right> ASC

[14:28] <SmokeMachine> Xliff: that's the kind of stuff does on map and grep... it should be doing that on sort as well

[14:30] <Xliff> Um. Wow.

[14:30] <Xliff> I think I understood that.

[14:30] <Xliff> Nice job.

[14:31] <SmokeMachine> Xliff: when you call a "column method" on a model's object type, it returns the Red::Column of that column, and using operators on it returns Red::AST, that that's how I "know" what a block is doing...

[14:33] <SmokeMachine> Xliff: there is also a interesting thing when you call Red::AST.Bool inside of a map/grep block: if it already "saw" that call, it return False, and if it haven't seen that, it return True and run the block again... that way we can find the conditionals and what every possibility should return...

[14:37] <SmokeMachine> Xliff: that's how we can do stuff like this: https://www.irccloud.com/pastebin/0bGGkYTb/

[14:39] <SmokeMachine> Xliff: or this  https://www.irccloud.com/pastebin/AKjTDHji/

[14:40] <Xliff> Are given / when blocks supported?

[14:41] <SmokeMachine> Xliff: but I plan to change that when we have RakuAST and custom compiler passes...

[14:41] <Xliff> Yes, RakuAST will hopefully make a lot more possible. 

[14:41] <Xliff> Looks like we will have to wait a bit longer for it, though.

[14:42] <SmokeMachine> Xliff: no given / when yet... I haven't done ~~ yet...

[14:45] <Xliff> Ah! So when ~~ is complete,  you will pretty much have what you need, right?

[14:45] <SmokeMachine> Xliff: yes, I think so

[14:46] <SmokeMachine> Xliff: so many things to do... and so small time to do it... :( I really need help...

[14:47] <Xliff> I hear that. You and me both.

[14:48] <Xliff> If I even understood half of what you are doing with the AST, I would do what I could.

[14:51] <SmokeMachine> Xliff: that's not that complex: https://github.com/FCO/Red/blob/1ebefda78dce6029cf794999dced6a41cbd09545/lib/Red/PrepareCode.pm6#L56

[14:59] *** linkable6 left
[14:59] *** evalable6 left
[15:01] *** linkable6 joined
[15:01] *** evalable6 joined
[15:01] <Xliff> SmokeMachine: That's not all that clear to me.

[15:02] <Xliff> For one thing, IO don't know what you have in @values. That's a LONG bit of code for %first-key

[15:02] <Xliff> How would you go about handling ~~, for example?

[15:07] <SmokeMachine> Xliff: I‚Äôll probably make is return an Red::AST... so, on that point there will be no ~~ anymore...

[15:09] *** vike left
[15:10] <SmokeMachine> Xliff: when you run func it returns (probably) an array of Red::AST trees

[15:10] <Xliff> So you would do what? Overload infix:<~~>?

[15:10] <Xliff> Or that and ACCEPTS?

[15:11] <SmokeMachine> Xliff: it depends...

[15:11] <Xliff> SmokeMachine: Trying to see if I can help ya out, here...

[15:11] <Xliff> :)

[15:13] <SmokeMachine> m: class C { method ACCEPTS (|) { 42 } }; say C ~~ C # Xliff: if it prints 42, them implement ACCEPTS otherwise, ~~

[15:13] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´True‚ê§¬ª

[15:13] <SmokeMachine> ~~ it is

[15:14] *** aborazmeh joined
[15:14] *** aborazmeh left
[15:14] *** aborazmeh joined
[15:20] *** rindolf joined
[15:23] <Xliff> m: say 42.ACCEPTS(42)

[15:23] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´True‚ê§¬ª

[15:23] <Xliff> SmokeMachine: Are you sure?

[15:24] <Xliff> m: class C { method ACCEPTS (|) { True } }; say False ~~ C; say True ~~ C; say "A" ~~ C;

[15:24] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´True‚ê§True‚ê§True‚ê§¬ª

[15:25] <Xliff> m: class C { method ACCEPTS (|) { True } }; say (1, 2, 3) ~~ C

[15:25] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´True‚ê§¬ª

[15:25] <Xliff> m: class C { method ACCEPTS (|c) { c ~~ List } }; say False ~~ C; say True ~~ C; say (1, 2, 3) ~~ C

[15:25] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´False‚ê§False‚ê§False‚ê§¬ª

[15:25] <Xliff> m: class C { method ACCEPTS (|c) { c ~~ List } }; say False ~~ C; say True ~~ C; say (1, 2, 3).List ~~ C

[15:25] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´False‚ê§False‚ê§False‚ê§¬ª

[15:25] <Xliff> Hmmm...

[15:25] <Xliff> m: class C { method ACCEPTS (|c) { c ~~ Seq } }; say False ~~ C; say True ~~ C; say (1, 2, 3).List ~~ C

[15:25] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´False‚ê§False‚ê§False‚ê§¬ª

[15:26] <Xliff> m: class C { method ACCEPTS (\) { c ~~ Seq } }; say False ~~ C; say True ~~ C; say (1, 2, 3).List ~~ C

[15:26] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Expected a term, but found either infix ~~ or redundant prefix ~‚ê§  (to suppress this message, please use a space like ~ ~)‚ê§at <tmp>:1‚ê§------> 3class C { method ACCEPTS (\) { c ~~7‚èè5 Seq } }; ‚Ä¶¬ª

[15:26] <Xliff> m: class C { method ACCEPTS (\c) { c ~~ (List, Seq, Array).any  } }; say False ~~ C; say True ~~ C; say (1, 2, 3).List ~~ C

[15:26] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´False‚ê§False‚ê§True‚ê§¬ª

[15:30] <SmokeMachine> m: class C { }; multi infix:<~~>(C, C) { 42 }; say C ~~ C # Xliff: it seems ~~ will not be possible as well

[15:30] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot override infix operator '~~', as it is a special form handled directly by the compiler‚ê§(consider implementing an ACCEPTS method)‚ê§at <tmp>:1‚ê§------> 3class C { }; multi infix:<~~>7‚èè5(C,‚Ä¶¬ª

[15:31] *** Chdobagne joined
[15:32] <Xliff> SmokeMachine: So why not override ACCEPTS and see if that will work?

[15:32] <SmokeMachine> Xliff: I think it will need to eat till RakuAST (now I'm remembering it... I think that's the reason I haven't done that yet...)

[15:32] <Xliff> SmokeMachine: OK. Fair enough.

[15:33] *** parabolize joined
[15:33] <SmokeMachine> Xliff: it seems ~~ only returns boolean... and we need to return Red::AST...

[15:35] *** sjm left
[15:35] <Chdobagne> Is it possible in Raku to evaluate the right part of a regex. The equivalent of the modifier e in perl 5.

[15:38] *** ufobat joined
[15:38] <lizmat> Chdobagne: could you show what you mean in Perl ?

[15:40] <Chdobagne> In perl 5 s/ .../ .../ e alows to evaluate the right part.

[15:41] <SmokeMachine> m: say S/(\d+)/{ $0 + 1 }/ given 41 # ChoppedBacon: like this?

[15:41] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´42‚ê§¬ª

[15:42] <lizmat> SmokeMachine++

[15:43] <Xliff> m: ("Hello" ~~ s¬´ 'Hell' (.) ¬ª = $0.Str.succ).say

[15:43] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´Cannot modify an immutable Str (Hello)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:43] <Xliff> m: my $a = "Hello" ; $a ~~ s¬´ 'Hell' (.) ¬ª = $0.Str.succ); $a.say

[15:43] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> 3o" ; $a ~~ s¬´ 'Hell' (.) ¬ª = $0.Str.succ7‚èè5); $a.say‚ê§¬ª

[15:43] <Xliff> m: my $a = "Hello" ; $a ~~ s¬´ 'Hell' (.) ¬ª = $0.Str.succ; $a.say

[15:43] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´p‚ê§¬ª

[15:43] <Xliff> ^^ Another method

[15:44] <Xliff> m: my $a = "Hello" ; $a ~~ s¬´ ( 'Hell' ) ¬ª = $0.uc; $a.say # Another way to look at it

[15:44] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´HELLo‚ê§¬ª

[15:47] <Chdobagne> I try to translate this perl 5 program : $a = 1; print ("$a\n") and $a =~ s/((\d)\2*)/length($1).$2/ge while length($a) < 64; in Raku.

[15:50] <Xliff> m: $a = 1; $a ~~ s:g/ ((\d)\2*) /{ $0.Str.chars }.{ $1.Str }/ while $a.chars < 64;

[15:50] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5$a = 1; $a ~~ s:g/ ((\d)\2*) /{ $0.Str.c‚ê§¬ª

[15:50] <Xliff> m: my $a = 1; $a ~~ s:g/ ((\d)\2*) /{ $0.Str.chars }.{ $1.Str }/ while $a.chars < 64; $a.say

[15:50] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unrecognized backslash sequence: '\2'. Did you mean $1?‚ê§at <tmp>:1‚ê§------> 3my $a = 1; $a ~~ s:g/ ((\d)\27‚èè5*) /{ $0.Str.chars }.{ $1.Str }/ while $‚ê§¬ª

[15:50] <Xliff> m: my $a = 1; $a ~~ s:g/ ((\d)2*) /{ $0.Str.chars }.{ $1.Str }/ while $a.chars < 64; $a.say

[15:50] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´Use of Nil in string context‚ê§1...............................................................‚ê§  in block  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block  at <tmp> line 1‚ê§U‚Ä¶¬ª

[15:52] <Xliff> m: my $a = 1; $a ~~ s:g/ ((\d)2*) /{ $0.Str.chars }{ $1.Str }/ while $a.chars < 64; $a.say

[15:52] <Xliff> Hrm.

[15:52] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´(timeout)Use of Nil in string context‚ê§  in block  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block  at <tmp> line 1‚Ä¶¬ª

[15:52] <Xliff> m: my $a = 1; $a ~~ s:g/ ((\d)2*) /{ $0.chars }{ $1 }/ while $a.chars < 3; $a.say

[15:53] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´(timeout)Use of Nil in string context‚ê§  in code  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in code  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in code  at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in code  at <tmp> line 1‚ê§Us‚Ä¶¬ª

[15:54] *** vike joined
[15:56] *** sjm joined
[16:00] *** Chdobagne left
[16:09] <SmokeMachine> m: .say for (1, { S:g/(\d)$0*/{ $/.chars }{ ~$0 }/ } ... *.chars > 64)

[16:09] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´1‚ê§11‚ê§21‚ê§1211‚ê§111221‚ê§312211‚ê§13112221‚ê§1113213211‚ê§31131211131221‚ê§13211311123113112211‚ê§11131221133112132113212221‚ê§3113112221232112111312211312113211‚ê§1321132132111213122112311311222113111221131221‚ê§111312211312111312311211131122211‚Ä¶¬ª

[16:09] <Xliff> SmokeMachine++

[16:09] *** Chi1thangoo joined
[16:09] <SmokeMachine> Chi1thangoo: ^^

[16:11] *** Altai-man joined
[16:11] *** morayj left
[16:12] *** morayj joined
[16:13] *** aborazmeh left
[16:13] <SmokeMachine> m: .say for 1, { S:g/(\d)$0*/{ $/.chars }{ ~$0 }/ } ... *.chars > 64

[16:13] <camelia> rakudo-moar aecfc9b3d: OUTPUT: ¬´1‚ê§11‚ê§21‚ê§1211‚ê§111221‚ê§312211‚ê§13112221‚ê§1113213211‚ê§31131211131221‚ê§13211311123113112211‚ê§11131221133112132113212221‚ê§3113112221232112111312211312113211‚ê§1321132132111213122112311311222113111221131221‚ê§111312211312111312311211131122211‚Ä¶¬ª

[16:13] *** sena_kun left
[16:21] <Chi1thangoo> SmokeMachine: ?

[16:22] <Xliff> Chdobagne logged out

[16:22] <Chi1thangoo> I see

[16:22] <Chi1thangoo> strange timing

[16:22] <Xliff> Yah.

[16:23] <SmokeMachine> Chi1thangoo: sorry... I meant Chdobagne

[16:23] <Chi1thangoo> no problem, I was just confused haha

[16:24] <Xliff> :)

[16:29] *** abraxxa left
[16:35] *** abraxxa joined
[16:41] *** b2gills left
[16:50] *** kensanata left
[16:53] *** ufobat left
[16:53] *** ufobat joined
[17:02] *** kensanata joined
[17:34] *** dakkar left
[17:35] *** xinming left
[17:36] *** xinming joined
[18:10] *** MasterDuke left
[18:12] *** morayj left
[18:12] *** bigdata joined
[18:13] *** xinming left
[18:14] *** ufobat left
[18:15] *** xinming joined
[18:15] *** bigdata left
[18:24] *** natrys joined
[18:26] *** domidumont left
[18:28] *** xinming left
[18:29] *** xinming joined
[18:32] *** aborazmeh joined
[18:32] *** aborazmeh left
[18:32] *** aborazmeh joined
[18:37] *** kensanata left
[18:37] *** aborazmeh left
[18:41] *** BenGoldberg left
[18:47] *** BenGoldberg joined
[19:01] *** domidumont joined
[19:01] *** domidumont left
[19:06] *** xinming left
[19:06] *** xinming joined
[19:09] *** guifa2 joined
[19:13] *** xinming left
[19:16] *** xinming joined
[19:25] *** sjm left
[19:28] *** sjm joined
[19:31] *** jmerelo left
[19:38] *** sjm_uk left
[19:39] *** Sgeo joined
[19:40] *** sjm left
[19:41] *** sjm joined
[19:49] *** xinming left
[19:49] *** xinming joined
[19:52] *** MasterDuke joined
[19:56] *** kensanata joined
[20:10] <Geth> ¬¶ doc: dfd7494d8a | (Stoned Elipot)++ | doc/Language/testing.pod6

[20:10] <Geth> ¬¶ doc: Fix links to Test module's subroutines

[20:10] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/dfd7494d8a

[20:10] <linkable6> Link: https://docs.raku.org/language/testing

[20:12] *** sena_kun joined
[20:13] *** Altai-man left
[20:25] *** xinming left
[20:27] *** xinming joined
[20:32] *** guifa2 left
[20:42] *** xinming left
[20:43] *** xinming joined
[20:57] *** mowcat joined
[20:59] *** xinming left
[20:59] *** xinming joined
[21:03] *** guifa2 joined
[21:05] *** pkmnx joined
[21:07] <pkmnx> I was looking at: https://github.com/Raku/rakudoc & saw an error.

[21:08] <pkmnx> a MAIN call allows for a parameter, per use case from docs: raku -Ilib bin/rakudoc -d=../doc/doc IO

[21:08] *** Sgeo_ joined
[21:09] <pkmnx> rakudoc/lib/Rakudoc/CMD.rakumod throws an error

[21:09] <pkmnx> 94         @doc-dirs = cross :with({$^a.add($^b)}), @dirs, @subdirs;

[21:09] <pkmnx> its an IO path add.

[21:10] <pkmnx> could be fixed in a few ways, but w/ "... $^a.IO.add ..."

[21:11] <pkmnx> otherwise $a has a string, given -d from command line ...

[21:12] *** Sgeo left
[21:12] *** xinming left
[21:14] *** xinming joined
[21:18] <MasterDuke> pkmnx: good catch. feel free to create an issue in github (or a PR fixing it)

[21:18] <pkmnx> ok. I'll push it in ...

[21:19] *** rindolf left
[21:19] <pkmnx> just wanted to ask whether it was an actual thing to care about ..

[21:21] *** sjm left
[21:22] *** sjm joined
[21:24] <guifa2> Okay, API design question

[21:24] <tellable6> 2020-11-26T05:20:19Z #raku <holyghost> guifa2: I use .kv

[21:26] <guifa2> Most places in CLDR, there's a strong hierarchical structure, so if I want the long, standalone, way to say "November" in Asturian, I say $data.calendars.gregorian.months.stand-alone.wide[11] --> 'payares'

[21:26] <guifa2> But in a few places, there are places where that structure falls apart because of grammatical features like gender, number, and case.  

[21:28] <guifa2> It would feel weird to require $data.units.meters.nominal.neuter.other to get '{0} meters' for English, given we only care about the number

[21:28] *** xinming left
[21:29] *** xinming joined
[21:29] <guifa2> I'm guessing I could try to do something like $data.units.meters(number => 'other'), but it feels weird abusing the CALL-ME function to do selection like that

[21:29] <guifa2> But maybe that's just me?  Any thoughts?

[21:36] <Geth> ¬¶ ecosystem: lizmat self-assigned Modules by deceased community members https://github.com/Raku/ecosystem/issues/569

[21:37] *** xinming left
[21:37] *** xinming joined
[21:41] *** sena_kun left
[21:51] *** stoned75 left
[21:57] *** xinming left
[22:00] *** xinming joined
[22:05] <Geth> ¬¶ ecosystem: 3202c6f8ce | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[22:05] <Geth> ¬¶ ecosystem: Update META for modules by DrForr

[22:05] <Geth> ¬¶ ecosystem: 

[22:05] <Geth> ¬¶ ecosystem: that have been moved to raku-community-modules

[22:05] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/3202c6f8ce

[22:15] <Geth> ¬¶ ecosystem: 22747c227c | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[22:15] <Geth> ¬¶ ecosystem: Update URLs of /perl6/ that have move to community modules

[22:15] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/22747c227c

[22:25] *** natrys left
[22:25] *** xinming left
[22:27] *** xinming joined
[22:33] *** MasterDuke left
[22:34] *** guifa2 left
[22:37] *** guifa2 joined
[22:39] *** xinming left
[22:39] *** xinming joined
[22:49] *** xinming left
[22:49] *** xinming joined
[22:53] <Geth> ¬¶ ecosystem: 3168d76819 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[22:53] <Geth> ¬¶ ecosystem: Update URL's or perlpilot's modules that were moved

[22:53] <Geth> ¬¶ ecosystem: 

[22:53] <Geth> ¬¶ ecosystem: to raku-community-modules

[22:53] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/3168d76819

[23:03] *** xinming left
[23:03] *** xinming joined
[23:06] *** wamba left
[23:06] *** wamba joined
[23:08] *** MasterDuke joined
[23:08] <Geth> ¬¶ ecosystem: 9736762fed | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[23:08] <Geth> ¬¶ ecosystem: Update supernovus URLs of modules that have moved

[23:08] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/9736762fed

[23:08] <lizmat> and that concludes my hacking for today

[23:09] *** guifa2 left
[23:10] *** stoned75 joined
[23:10] <MasterDuke> lizmat++

[23:14] *** cpan-raku left
[23:15] *** cpan-raku joined
[23:15] *** cpan-raku left
[23:15] *** cpan-raku joined
[23:17] *** guifa2 joined
[23:18] *** aluaces left
[23:20] *** kensanata left
[23:24] *** mowcat left
[23:25] *** stoned75 left
[23:31] *** xinming left
[23:32] *** xinming joined
[23:35] *** wamba left
[23:47] *** xinming left
[23:47] *** xinming joined
[23:52] *** wamba joined
