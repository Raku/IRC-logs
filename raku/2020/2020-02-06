[00:08] *** NODE left
[00:08] *** Benett left
[00:09] *** Benett joined
[00:10] <k-man> thanks, i'm able to run the tests now

[00:11] *** NODE joined
[00:11] *** discord61 joined
[00:11] *** discord61 left
[00:11] *** discord61 joined
[00:11] *** discord6 left
[00:12] *** discord61 is now known as discord6

[00:14] *** |Sno| joined
[00:15] *** squashable6 left
[00:15] *** Actualey` joined
[00:15] *** aeruder_ joined
[00:16] *** nightfro` joined
[00:16] *** eaterof joined
[00:16] *** squashable6 joined
[00:16] *** benaiah` joined
[00:16] *** guifa_ joined
[00:19] *** moritz_ joined
[00:21] *** [Sno] left
[00:21] *** aeruder left
[00:21] *** eater left
[00:21] *** nightfrog left
[00:22] *** benaiah left
[00:22] *** guifa left
[00:22] *** molaf left
[00:22] *** Voldenet left
[00:22] *** moritz left
[00:22] *** Actualeyes left
[00:22] *** nightfro` is now known as nightfrog

[00:22] *** benaiah` is now known as benaiah

[00:22] *** hungrydonkey joined
[00:22] *** mojca left
[00:22] *** mojca joined
[00:22] *** Voldenet joined
[00:22] *** Voldenet left
[00:22] *** Voldenet joined
[00:22] *** shadowpaste joined
[00:23] *** guifa_ is now known as guifa

[00:25] *** NODE left
[00:25] *** camelia left
[00:25] *** dylanwh left
[00:25] *** iviv left
[00:25] *** pnu__ left
[00:25] *** zostay left
[00:25] *** PotatoGim left
[00:25] *** BuildTheRobots left
[00:25] *** dylanwh joined
[00:25] *** iviv joined
[00:25] *** NODE joined
[00:25] *** esh left
[00:26] *** PotatoGim joined
[00:26] *** pnu__ joined
[00:26] *** e1z0 left
[00:26] *** zostay joined
[00:26] *** e1z0 joined
[00:26] *** BuildTheRobots joined
[00:27] *** Celelibi left
[00:27] *** holyghost left
[00:27] <k-man> that exercise is kind of annoying

[00:28] *** esh joined
[00:28] <k-man> it becomes an exercise in boolean logic rather than enhancing skill in raku

[00:29] <Geth> ¬¶ ecosystem: 3ec9c00f7b | thundergnat++ (committed using GitHub Web editor) | META.list

[00:29] <Geth> ¬¶ ecosystem: Add Linux-Joystick to the ecosystem

[00:29] <Geth> ¬¶ ecosystem: 

[00:29] <Geth> ¬¶ ecosystem: See https://github.com/thundergnat/Linux-Joystick

[00:29] <Geth> ¬¶ ecosystem: A Linux (POSIX environment) interface providing joystick events as an asynchronous stream

[00:29] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/3ec9c00f7b

[00:30] *** camelia joined
[00:32] *** Doc_Holliwood left
[00:33] *** Celelibi joined
[00:34] <k-man> how can i test if a string does not contain any letters?

[00:40] <k-man> when not ($msg ~~ /\w/) {return "Whatever."} doesn't seem to be doing what I want

[00:40] <Grinnz> \w is word characters, which is a lot more than letters

[00:42] <k-man> ah

[00:42] <leont> Also, you probably want to use !~~

[00:43] <k-man> ok good tip

[00:44] <k-man> when ($msg !~~ /<alpha>/) {return "Whatever."}  

[00:44] <k-man> that seeems to work I think

[00:45] *** sena_kun left
[00:48] *** Actualey` left
[00:52] <rypervenche> What is the best way to remove an element from an array (of hashes)? I saw something that Liz wrote that was essentially doing: @array .= grep: *<foo> ne $bar; Is there a better or more specific way to do this?

[00:57] <wildtrees> so I do : my $p = Promise.start(&routine) ; it starts running routine as a promise, how do I kill or break the promise from outside? yells at me about it already being vowed 

[01:00] <leont> You can't

[01:01] *** sena_kun joined
[01:04] <wildtrees> would I need to use something other than a promise if I wanted to kill the "process/thread" from outside? 

[01:04] <leont> You could wrap it in another Promise if you really want to though

[01:04] <leont> You can't kill the thread/task from the outside, AFAIK

[01:04] <leont> This is generally a surprisingly difficult thing in threads, not just in raku

[01:05] <leont> (just imagine killing a thread that holds a lock for an idea of the kind of thing that can go wrong)

[01:05] <wildtrees> so I would need to pass in a channel or a supply into the Promise that could signal a kill message, and have the promise check the channe/supply for a death notice? 

[01:15] *** aborazmeh joined
[01:15] *** aborazmeh left
[01:15] *** aborazmeh joined
[01:24] *** sivoais joined
[01:27] *** Kaeipi left
[01:28] *** Kaeipi joined
[01:30] *** kst joined
[01:32] *** _jrjsmrtn left
[01:33] *** __jrjsmrtn__ joined
[01:42] <cpan-raku> New module released to CPAN! Auth::SASL (0.1.1) by 03HANENKAMP

[01:48] *** sena_kun left
[01:56] <elcaro> k-man: FYI, the <alpha> char class also includes '_'

[01:56] <elcaro> m: say so '_' ~~ /<alpha>/

[01:56] <camelia> rakudo-moar e1faa704e: OUTPUT: ¬´True‚ê§¬ª

[01:57] *** squashable6 left
[01:57] <elcaro> if you just want ascii letters, you can be explicit, ie: /<[A .. Z] + [a .. z]>/

[01:58] *** Kaiepi joined
[01:58] *** wildtrees left
[01:58] <elcaro> or if you want to match anything Unicode says is a letter, then use /<:Letter>/ or just /<:L>/

[01:58] *** Kaeipi left
[02:00] *** squashable6 joined
[02:01] <k-man> thanks elcaro 

[02:03] <guifa2> elcaro: hopefully I'll have a module out soon that will make things easier

[02:07] *** leont left
[02:08] *** normanrockwell joined
[02:13] <guifa2> (the equivalent will be <local-alpha>.  Nicely, if you run in Spanish it'll have [A..Z√Å√â√ç√ì√ö√ú√ë] etc 

[02:17] <guifa2> Setting it to en-US-posix would get you the most expected values: https://st.unicode.org/cldr-apps/v#/en_US_POSIX/Alphabetic_Information/ 

[02:24] *** Kaiepi left
[02:27] *** aborazmeh left
[02:28] *** Kaiepi joined
[02:35] *** molaf joined
[02:52] *** k-man left
[02:55] *** k-man joined
[03:31] <rypervenche> m: my @array = ^100; @array[2..5].say;

[03:31] <camelia> rakudo-moar e1faa704e: OUTPUT: ¬´(2 3 4 5)‚ê§¬ª

[03:31] <rypervenche> m: my @array = ^100; my $range = 2..5; @array[$range].say;

[03:31] <camelia> rakudo-moar e1faa704e: OUTPUT: ¬´4‚ê§¬ª

[03:31] <rypervenche> Is this normal? ^

[03:33] <rypervenche> m: my @array = ^100; my $range = 2..5; @array[lazy $range].say;

[03:33] <camelia> rakudo-moar e1faa704e: OUTPUT: ¬´(2 3 4 5)‚ê§¬ª

[03:33] <rypervenche> Oh...

[03:38] <rypervenche> Ok, new question. Is there a shorthand for: @array = @array[1..10] ?

[03:46] *** mahmudov left
[03:52] <guifa2> You mean starting at 1?

[03:52] <guifa2> There isn't, but you could make on

[03:53] <guifa2> m: sub prefix:<^^> (Int $a) {¬†(1..$a).list }; my @a = ^^4; say @a

[03:53] <camelia> rakudo-moar e1faa704e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Expected a term, but found either infix ^^ or redundant prefix ^‚ê§  (to suppress this message, please use a space like ^ ^)‚ê§at <tmp>:1‚ê§------> 3^> (Int $a) {¬†(1..$a).list }; my @a = ^^7‚èè054; ‚Ä¶¬ª

[03:53] <guifa2> err

[03:54] <guifa2> I forgot ^^ was an infix already ^_^ 

[03:54] <guifa2> sub prefix:<‚Ç¨> (Int $a) { (1..$a).list }; my @a = ‚Ç¨4; say @a

[03:54] <evalable6> guifa2, rakudo-moar e1faa704e: OUTPUT: ¬´[1 2 3 4]‚ê§¬ª

[03:56] <guifa2> rypervenche: see above

[03:58] <rypervenche> I meant with any range, although I could make one with an infix using your above examples. Thanks.

[04:02] <guifa2> Oh, you were referring to the $range returning the value of 4 (range = listy = numeric context is the number of elements)

[04:02] <guifa2> If you were out of scalar context, it would work differently

[04:03] <guifa2> my @array = ^100; my @range = 2..5; @array[@range].say

[04:03] <evalable6> guifa2, rakudo-moar e1faa704e: OUTPUT: ¬´(2 3 4 5)‚ê§¬ª

[04:03] <guifa2> If you really want to keep the range in a scalar

[04:03] <guifa2> my @array = ^100; my $range = 2..5; @array[$range.list].say

[04:03] <evalable6> guifa2, rakudo-moar e1faa704e: OUTPUT: ¬´(2 3 4 5)‚ê§¬ª

[04:04] <guifa2> my @array = ^100; my $range = 2..5; @array[$range.list].say; @array[$range<>].say; @array[|$range].say

[04:04] <evalable6> guifa2, rakudo-moar e1faa704e: OUTPUT: ¬´(2 3 4 5)‚ê§(2 3 4 5)‚ê§(2 3 4 5)‚ê§¬ª

[04:04] <guifa2> three different ways you can do it from a scalar :-)

[04:19] <rypervenche> Oh, don't know why I didn't just make it an array then. Good to know. And this is good practice with |

[04:20] <rypervenche> Oh, wouldn't be lazy then.

[04:21] <rypervenche> I think I'll stop there for tonight. As always, thanks for the help.

[04:34] *** normanro_ joined
[04:35] *** epony left
[04:35] *** epony joined
[04:37] *** epony left
[04:37] *** epony joined
[04:38] *** normanrockwell left
[04:45] *** Kaiepi left
[04:45] *** Kaiepi joined
[04:50] *** normanro_ left
[04:50] *** normanrockwell joined
[04:55] *** normanrockwell left
[05:55] *** reportable6 left
[05:55] *** committable6 left
[05:55] *** coverable6 left
[05:55] *** shareable6 left
[05:55] *** bloatable6 left
[05:55] *** squashable6 left
[05:55] *** nativecallable6 left
[05:55] *** notable6 left
[05:55] *** sourceable6 left
[05:55] *** linkable6 left
[05:55] *** benchable6 left
[05:55] *** releasable6 left
[05:55] *** tellable6 left
[05:55] *** evalable6 left
[05:55] *** greppable6 left
[05:55] *** bisectable6 left
[05:55] *** unicodable6 left
[05:55] *** statisfiable6 left
[05:55] *** quotable6 left
[05:55] *** notable6 joined
[05:55] *** releasable6 joined
[05:55] *** evalable6 joined
[05:55] *** shareable6 joined
[05:55] *** bisectable6 joined
[05:55] *** bloatable6 joined
[05:56] *** squashable6 joined
[05:56] *** reportable6 joined
[05:56] *** linkable6 joined
[05:56] *** nativecallable6 joined
[05:57] *** unicodable6 joined
[05:57] *** rindolf joined
[05:57] *** coverable6 joined
[05:57] *** tellable6 joined
[05:57] *** statisfiable6 joined
[05:57] *** committable6 joined
[05:57] *** greppable6 joined
[05:57] *** quotable6 joined
[05:58] *** sourceable6 joined
[05:58] *** benchable6 joined
[06:01] *** molaf left
[06:03] *** rindolf left
[06:05] *** rindolf joined
[06:07] *** Doc_Holliwood joined
[06:18] *** stoned75 left
[06:41] *** kensanata joined
[06:42] *** holyghost joined
[06:42] <holyghost> my posterior approximation method is almost finished, later on I need to transform with complex numbers

[06:43] *** rindolf left
[06:43] <holyghost> It's a piece of Bayesian Learning, my code is at github.com/theholyghost2/p6-Game-Bayes

[06:56] *** cpan-raku left
[06:56] *** cpan-raku joined
[06:56] *** cpan-raku left
[06:56] *** cpan-raku joined
[06:57] *** nebuchadnezzar left
[07:15] *** domidumont joined
[07:19] *** sauvin joined
[07:19] *** Doc_Holliwood left
[07:19] *** sauvin left
[07:24] <Geth> ¬¶ problem-solving: CIAvash assigned to rba Issue A new website for raku.org https://github.com/Raku/problem-solving/issues/158

[07:26] *** sauvin joined
[07:33] *** abraxxa joined
[07:37] *** abraxxa left
[07:37] *** abraxxa joined
[07:42] *** abraxxa left
[07:43] *** abraxxa joined
[08:00] *** domidumont left
[08:00] *** domidumont1 joined
[08:01] *** darkstardev13 joined
[08:06] <abraxxa> I'd need help with a grammar

[08:07] <abraxxa> I need to store variables somewhere to be able to use them for substitution in the associated action class

[08:15] *** rindolf joined
[08:22] <abraxxa> it seems I can use them in the Grammer or in the Actionclass, not sure what's the better approach

[08:25] *** zakharyas joined
[08:26] *** dakkar joined
[08:33] *** eaterof left
[08:33] *** kensanata left
[08:33] *** eater joined
[08:43] *** nebuchadnezzar joined
[08:46] *** Doc_Holliwood joined
[09:08] <holyghost> I just made the first Bayesian Learning method (with the grid method) for my package, code on Xliff's server and on github.com/theholyghost2/p6-Bayes-Learn

[09:08] <holyghost> yeay! I'm progressing :-)

[09:09] *** pecastro joined
[09:10] <holyghost> Now I need to read further on in the book, and need to implement the complex numbers idea

[09:11] <AlexDaniel`> weekly: Cool raku.org redesign http://raku-demo-temp.ciavash.name/ https://github.com/Raku/problem-solving/issues/158 CIAvash++

[09:11] <notable6> AlexDaniel`, Noted! (weekly)

[09:21] *** hungrydonkey left
[09:21] *** hungrydonkey joined
[09:22] *** zeylos joined
[09:25] *** wamba joined
[09:25] <xkr47> AlexDaniel`, agreed!

[09:26] <xkr47> example list scrolling is a bit jumpy but not a biggie

[09:27] *** hungrydonkey left
[09:28] <abraxxa> I let the grammar only parse the variable definition and added a private hash to the action class which fills it and uses it

[09:29] <abraxxa> AlexDaniel`: I'd move async and grammars up as they are the major distinctions from other languages

[09:29] <abraxxa> 'every' can do OO

[09:29] *** Doc_Holliwood left
[09:29] <abraxxa> not a fan of the color scheme though

[09:30] <abraxxa> a brand needs a color scheme associated with it, Raku changes too often

[09:33] *** hungrydonkey joined
[09:35] *** hungrydonkey left
[09:36] *** hungrydonkey joined
[09:42] *** hungrydonkey left
[09:44] *** hungrydonkey joined
[09:46] *** kensanata joined
[09:54] *** hungrydonkey left
[09:57] *** hungrydonkey joined
[09:59] *** hungrydonkey left
[10:01] *** hungrydonkey joined
[10:06] *** hungrydonkey left
[10:07] *** hungrydonkey joined
[10:07] <AlexDaniel`> abraxxa just leave feedback on the ticket

[10:08] <AlexDaniel`> I think it mostly keeps colors that are already there

[10:13] *** natrys joined
[10:14] <El_Che> CIAvash: are you planning to add a light mode?

[10:16] <AlexDaniel`> El_Che my understanding is that CIAvash won't be able to work on improvements, so we need a maintainer first in order to have plans :)

[10:17] <AlexDaniel`> Light/dark is easy to do nowadays with pure css

[10:18] <AlexDaniel`> Based on browser/os preference

[10:21] *** hungrydonkey left
[10:21] <abraxxa> a json repsonse returns a hash containing a 'data' key that contains a list

[10:22] <abraxxa> when i return that from a method and assign it to an array it has only a single element which in turn is an array

[10:22] <abraxxa> why does this happen?

[10:22] <abraxxa> I find myself always having to call .list or .slip in such cases

[10:25] *** xinming_ left
[10:25] *** xinming_ joined
[10:27] *** hungrydonkey joined
[10:29] *** hungrydonkey left
[10:31] <El_Che> abraxxa: it makes sense to me

[10:31] <El_Che> abraxxa: you don't want to flatten data by default

[10:31] <jnthn> Hash values are items, and return retains the itemness

[10:31] *** hungrydonkey joined
[10:33] <abraxxa> I just don't get the rules to understand what to do when

[10:34] <abraxxa> does Raku also return different types based on the caller like Perl 5?

[10:34] <abraxxa> scalar vs list context?

[10:35] <abraxxa> sub foo { my @ary; return @ary; } my @main-ary = foo;

[10:35] <abraxxa> and now @main-ary doesn't contain the same as @ary, that's just weird

[10:35] <abraxxa> as they are the same type

[10:37] <abraxxa> https://docs.raku.org/type/Array doesn't even document the list method

[10:40] <El_Che> I don't think raku has a return list context

[10:40] <El_Che> (but I could be wrong)

[10:41] <El_Che> https://docs.raku.org/type/Signature#Return_type_arrow:_--%3E suggest an item return

[10:42] *** Doc_Holliwood joined
[10:45] *** hungrydonkey left
[10:47] <abraxxa> ok, but still requires the .list method call

[10:50] <El_Che> yes, you choose to unpack the item

[10:53] <El_Che> m: sub f() { return 1,2,3 }; say "elem: $_" for f();

[10:53] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1‚ê§elem: 2‚ê§elem: 3‚ê§¬ª

[10:53] <El_Che> no list explictly called

[10:55] *** hungrydonkey joined
[10:58] *** hungrydonkey left
[10:59] *** hungrydonkey joined
[11:01] *** hungrydonkey left
[11:03] *** hungrydonkey joined
[11:05] <SmokeMachine> m: sub f() { my @a = 1,2,3; return @a }; say "elem: $_" for f();

[11:05] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1‚ê§elem: 2‚ê§elem: 3‚ê§¬ª

[11:06] <SmokeMachine> m: sub f() { my %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:06] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Shaped variable declarations not yet implemented. Sorry.‚ê§at <tmp>:1‚ê§------> 3sub f() { my %a<a>7‚èè5 = 1,2,3; return %a<a> }; say "elem: $_"‚ê§¬ª

[11:06] <SmokeMachine> m: sub f() { my%a; %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:06] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1 2 3‚ê§¬ª

[11:06] <SmokeMachine> m: sub f() { my%a; %a<a> = 1,2,3; return %a<a><> }; say "elem: $_" for f();

[11:06] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1‚ê§elem: 2‚ê§elem: 3‚ê§¬ª

[11:07] <SmokeMachine> m: sub f(‚Äî>Positional) { my%a; %a<a> = 1,2,3; return %a<a><> }; say "elem: $_" for f();

[11:07] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub f(7‚èè5‚Äî>Positional) { my%a; %a<a> = 1,2,3; ret‚ê§¬ª

[11:07] <SmokeMachine> m: sub f(-->Positional) { my%a; %a<a> = 1,2,3; return %a<a><> }; say "elem: $_" for f();

[11:07] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1‚ê§elem: 2‚ê§elem: 3‚ê§¬ª

[11:08] <SmokeMachine> m: sub f(-->Positional) { my%a; %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:08] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1 2 3‚ê§¬ª

[11:08] <SmokeMachine> m: sub f(‚Äî>Positional()) { my%a; %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:08] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub f(7‚èè5‚Äî>Positional()) { my%a; %a<a> = 1,2,3; r‚ê§¬ª

[11:11] <SmokeMachine> I think it should be a way of saying it‚Äôs not returning an item on the signature...

[11:12] <jnthn> The return type constraint is just a check, it doesn't modify the value

[11:14] <SmokeMachine> jnthn: it does if you cast...

[11:15] <SmokeMachine> m: sub bla(‚Äî>Hash()) { [a => 1, b => 2] }; dd bla

[11:15] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub bla(7‚èè5‚Äî>Hash()) { [a => 1, b => 2] }; dd bla‚ê§¬ª

[11:15] <jnthn> Ah, you can use coercion types there? That I'd forgotten :)

[11:15] <SmokeMachine> m: sub bla(-->Hash()) { [a => 1, b => 2] }; dd bla

[11:15] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´Hash % = {:a(1), :b(2)}‚ê§¬ª

[11:16] <SmokeMachine> jnthn: ^^

[11:17] <jnthn> Neat :)

[11:17] <jnthn> Then yeah, that's a way to be rid of the item

[11:17] *** wamba left
[11:17] <SmokeMachine> jnthn: I was thinking that something like --> Positional() should do that...

[11:18] <SmokeMachine> m: sub f(‚Äî>Positional()) { my%a; %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:18] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub f(7‚èè5‚Äî>Positional()) { my%a; %a<a> = 1,2,3; r‚ê§¬ª

[11:18] <SmokeMachine> m: sub f(-->Positional()) { my%a; %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:18] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´Unable to coerce the return value from List to Positional; no coercion method defined‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:18] <SmokeMachine> (I have it changing ‚Äî> to ‚Äî>)

[11:19] <SmokeMachine> *hate

[11:19] <jnthn> SmokeMachine: `--> List()` is shorter though... :)

[11:19] <SmokeMachine> m: sub f(-->List()) { my%a; %a<a> = 1,2,3; return %a<a> }; say "elem: $_" for f();

[11:19] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´elem: 1‚ê§elem: 2‚ê§elem: 3‚ê§¬ª

[11:19] <SmokeMachine> good!

[11:19] <SmokeMachine> jnthn: thanks!

[11:21] <SmokeMachine> Much more readable than adding `<>` t the end...

[11:21] <SmokeMachine> *at

[11:24] <SmokeMachine> jnthn: Just wondering, would it make sense to add an Unitemised() that would just <> the return and Unitemised would check if it‚Äôs not an item when used as the returns field?

[11:25] <SmokeMachine> jnthn: we could, of course, use it on smatmatch: something ~~ Itemised

[11:26] <SmokeMachine> m: sub bla(\something) { say ‚Äúitem:$_‚Äù for something }; bla [1,2,3]; bla $[1,2,3]

[11:26] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´item:1‚ê§item:2‚ê§item:3‚ê§item:1 2 3‚ê§¬ª

[11:26] *** hungrydonkey left
[11:27] <SmokeMachine> jnthn: how can I know if it‚Äôs an item or not?

[11:32] <SmokeMachine> m: say [1,2,3].VAR ~~ Scalar

[11:32] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´False‚ê§¬ª

[11:32] <SmokeMachine> m: say $[1,2,3].VAR ~~ Scalar

[11:32] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´True‚ê§¬ª

[11:32] <SmokeMachine> :)

[11:33] <SmokeMachine> m: sub bla(--> Scalar()) { [1,2,3] }; bla

[11:33] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´Unable to coerce the return value from Array to Scalar; no coercion method defined‚ê§  in sub bla at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:33] *** kensanata left
[11:34] *** Doc_Holliwood left
[11:39] *** leont joined
[11:54] *** AlexDaniel joined
[11:54] *** AlexDaniel left
[11:54] *** AlexDaniel joined
[11:54] *** wamba joined
[11:57] *** Doc_Holliwood joined
[12:00] *** hungrydonkey joined
[12:07] *** hungrydonkey left
[12:10] *** kensanata joined
[12:29] <abraxxa> m: sub f( --> Array ) { my @a = 1,2,3; return @a; }; my @b = f(); say @b.gist;

[12:29] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[12:29] <abraxxa> m: sub f( --> Array ) { my @a = 1,2,3; return @a; }; my @b = f(); say @b.perl;

[12:29] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´[1, 2, 3]‚ê§¬ª

[12:30] <abraxxa> m: sub f( --> Array ) { my @a = 1,2,3; return @a.list; }; my @b = f(); say @b.perl;

[12:30] <camelia> rakudo-moar c592b80ec: OUTPUT: ¬´[1, 2, 3]‚ê§¬ª

[12:30] <abraxxa> different here

[12:39] *** zakharyas left
[12:50] *** Black_Ribbon left
[13:00] *** vike left
[13:02] *** Doc_Holliwood left
[13:14] *** PotatoGim left
[13:15] *** xinming_ left
[13:15] *** tbrowder left
[13:16] *** BuildTheRobots left
[13:17] *** xinming_ joined
[13:32] *** sena_kun joined
[13:47] <rypervenche> How can I get this so that running script -g fails, but script -g=1 doesn't?: sub MAIN(Int :g(:$gen)){say $gen}

[13:47] <rypervenche> I'm assuming it allows -g without any arguments because True and False are essentially 1 and 0, which are Ints?

[13:50] <lizmat> m: dd Bool.^mro

[13:50] <camelia> rakudo-moar d75a703fd: OUTPUT: ¬´(Bool, Int, Cool, Any, Mu)‚ê§¬ª

[13:50] <lizmat> rypervenche: ^^

[13:51] *** vike joined
[13:57] <rypervenche> Hmmm.

[13:58] *** vike left
[14:00] *** zakharyas joined
[14:03] *** tbrowder joined
[14:04] *** lucasb joined
[14:05] <jnthn> Probably `where .WHAT === Int` forces it

[14:06] *** mrsolo joined
[14:08] *** isacl___ joined
[14:09] *** vike joined
[14:12] *** PotatoGim joined
[14:12] <rypervenche> That didn't seem to work, but forcing it to IntStr did.

[14:14] <jnthn> Oh, right, IntStr is *why* it doesn't work :)

[14:14] <jnthn> Forgot it passes them as that

[14:18] *** veesh left
[14:22] <rypervenche> Thanks. Fixes my problem.

[14:24] *** AlexDaniel left
[14:33] *** Doc_Holliwood joined
[14:34] *** hungrydonkey joined
[14:35] <rypervenche> Actually, just changing the type to IntStr works without needing the where bit. Good to know.

[14:36] <leont> rypervenche: you may want to check my Getopt::Long module

[14:38] <rypervenche> leont: I'll eventually go down that path, but for now I like learning how to do things without the need for modules (where possibile). Less code, I guess.

[14:49] *** BuildTheRobots joined
[15:16] *** Doc_Holliwood left
[15:17] *** melezhik joined
[15:28] *** Actualeyes joined
[15:33] *** sena_kun left
[15:33] *** Doc_Holliwood joined
[15:34] *** abraxxa left
[15:34] *** abraxxa joined
[15:44] *** dansolo42 left
[15:48] *** sena_kun joined
[15:49] *** dansolo42 joined
[16:01] *** molaf joined
[16:01] *** kensanata left
[16:03] <cpan-raku> New module released to CPAN! Math::Libgsl::Constants (0.0.2) by 03FRITH

[16:07] *** wamba left
[16:09] <rypervenche> Is there a more compact way of writing this? subset one-to-eight of IntStr where { not .defined or $_ ~~ 1 .. 8 };

[16:10] <rypervenche> I was able to do "where 1 .. 8", and I could also do "where not .defined", but I haven't found a way to do them both together with an "or" without adding the $_ ~~ bit.

[16:19] *** mahmudov joined
[16:19] <tbrowder> hi, #raku people

[16:19] <tellable6> 2020-01-26T19:32:53Z #raku <jmerelo> tbrowder thanks!

[16:20] <tbrowder> jmerelo: you're welcome

[16:20] <tellable6> tbrowder, I'll pass your message to jmerelo

[16:23] <tbrowder> i'm taking my own advice and working on more conversions to raku from perl: starting with the scripts and saving module conversion for later

[16:24] *** Kaiepi left
[16:24] <tbrowder> but i see a possible advantage in using local raku modules by installing them with zef

[16:25] <abraxxa> zef tries to install p6doc to the rakudo package directory instead of my home dir, any idea why?

[16:25] <abraxxa> ===> Building: p6doc:ver<1.003>:auth<perl6>

[16:25] <abraxxa> [p6doc] Failed to create directory '/opt/rakudo-pkg/share/perl6/site/doc' with mode '0o777': Failed to mkdir: Permission denied

[16:26] <abraxxa> only this module

[16:26] <rypervenche> abraxxa: It's still an issue: https://github.com/Raku/doc/issues/2896

[16:26] *** Kaiepi joined
[16:26] <tbrowder> that way one can maybe eliminate confusion by avoiding "use lib" and PERL6LIB

[16:26] <melezhik> abraxxa: https://github.com/vrurg/raku-IP-Addr/issues/5

[16:26] *** hythm joined
[16:27] <abraxxa> melezhik: that's the module I'm trying to install ;)

[16:27] <melezhik> this is issue with p6doc itself

[16:28] <melezhik> not with the IP::Addr

[16:28] <abraxxa> I don't see a workaround in those two issues

[16:30] <abraxxa> can I do anything when not having root access?

[16:31] <abraxxa> is p6doc something deprecated or wasn't it just not renamed to rakudoc?

[16:34] <tbrowder> any suggestions about the best way to install local modules? special location or namespace?

[16:35] <[Coke]> it hasn't been renamed.

[16:35] <[Coke]> It also has had install problems for a bit.

[16:35] <abraxxa> is it an optional dependency I can skip?

[16:37] <guifa> I find the easiest way is to just cd into the module‚Äôs directory (where the META6.json) is and ‚Äòzef install .‚Äô

[16:38] <[Coke]> Who is depending on it?

[16:39] <[Coke]> I wouldn't expect a generic module to depend on it.

[16:39] <rypervenche> It would be nice to be able to use it from one's home directory installation.

[16:39] <abraxxa> ===> Searching for missing dependencies: JSON::Name, JSON::Tiny

[16:39] <abraxxa> ===> Building: p6doc:ver<1.003>:auth<perl6>

[16:39] <abraxxa> one of those two

[16:40] <abraxxa> is there maybe an additional debian package I can install that provides it?

[16:41] <abraxxa> IP::Addr itself: https://modules.raku.org/dist/IP::Addr:cpan:VRURG/META6.json

[16:42] *** dakkar left
[16:42] *** dakkar joined
[16:43] <[Coke]> both of those have empty depends, I think

[16:43] <[Coke]> weird.

[16:43] <[Coke]> (https://modules.raku.org/dist/JSON::Tiny:cpan:MORITZ/META6.json , https://modules.raku.org/dist/JSON::Name:cpan:JSTOWE/META6.json)

[16:44] <[Coke]> What were you installing?

[16:44] <abraxxa> melezhik: can you get rid of the p6doc dependency?

[16:44] <[Coke]> the "missing dep.." is showing things missing, not the original install

[16:44] <abraxxa> [Coke]: see above, already wrote that its IP::Addr itself

[16:45] <[Coke]> ah. it's got a "build-depends".

[16:45] <abraxxa> yes

[16:45] <abraxxa> should the rakudo-pkg debian package not include p6doc?

[16:45] <[Coke]> Not if it's going to fail. :)

[16:46] <[Coke]> I don't see anything in IP::Addr that requires p6doc.

[16:46] <[Coke]> It's listed as a dep, but there's no Build.pm...

[16:47] <[Coke]> guessing it was a boilerplate that snuck in

[16:48] <tbrowder> looking at zef's README, it suggest's using PERL6LIB along with "-to="  for a non-default install location which looks like a good solution to my needs.

[16:49] *** Doc_Holliwood left
[16:49] *** Doc_Holliwood joined
[16:49] <[Coke]> looks like build-depends was removed in master on git

[16:50] <[Coke]> so you can probably zef install <git url> but then you're getting a non-release version, maybe, not an official cpan release.

[16:57] *** dakkar left
[16:59] <abraxxa> I used the --force-build the zef output suggested on fail which worked

[17:00] <melezhik> tbrowder: "looking at zef's README, it suggest's using PERL6LIB along with "-to=" - I am afraid this does not solve the issue 

[17:01] <melezhik> abraxxa: `zef --force-build install p6doc && zef install IP::Addr`

[17:03] <abraxxa> melezhik: zef --force-build IP::Addr worked as well, thanks

[17:03] <abraxxa> i have this wonderful line: my @destinations = @rules.grep({ .<dst> }).map({ .<dst>.Slip }).unique(:with(&[eqv]));

[17:03] <rypervenche> abraxxa: It will install, but it won't actually work.

[17:03] <abraxxa> .<dst> happens to be an array sometimes I want to flatten but neither .flat before .unique nor .flat before the .Slip helps

[17:04] <rypervenche> If you want to use p6doc, that is.

[17:04] <abraxxa> rypervenche: IP::Addr works

[17:04] <abraxxa> that's what I care about

[17:10] <[Coke]> note that force build just gets you past the install failure. it doesn't actually give you a working p6doc.

[17:10] <abraxxa> i don't need one!

[17:11] <[Coke]> (rather, none of the docs get installed that way, so you can run p6doc, but then it never finds anything)

[17:11] <[Coke]> the right thing is to remove the dep on it, hopefully we can get another release of that module that removes it.

[17:12] *** wamba joined
[17:13] *** molaf left
[17:16] *** Tirifto joined
[17:19] <abraxxa> the .gist of such an element is $["10.133.14.101", ["10.133.14.5", "10.133.134.25"]]

[17:21] *** Doc_Holliwould joined
[17:30] <abraxxa> [*;*] worked instead of .flat

[17:30] <abraxxa> any idea why?

[17:32] *** sena_kun left
[17:35] *** patrickb joined
[17:35] <SmokeMachine> tbrowder: have you tryed 6pm?

[17:37] <cpan-raku> New module released to CPAN! Math::Libgsl::Matrix (0.0.2) by 03FRITH

[17:38] <tbrowder> SmokeMachine: no, but i will have a look, thnx

[17:38] <tbrowder> melezhik: why will that not work?

[17:39] <tbrowder> for my local modules, not public ones

[17:45] *** |Sno| left
[17:47] *** [Sno] joined
[17:48] *** sena_kun joined
[17:51] <tbrowder> SmokeMachine: 6pm looks interesting, i'll install it and check it out

[17:58] <rypervenche> Is it possible to set a named parameter that's a boolean as defaulting to False? I know you can do !$varname for positional ones, but I can't seem to get it to work with: Bool :v(:$varname)

[18:03] *** hungrydonkey left
[18:09] *** veesh joined
[18:21] *** kensanata joined
[18:24] <SmokeMachine> m: class A { method a(--> self) { 42 } }; say A.new.a # why not make it work?

[18:24] <camelia> rakudo-moar d75a703fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Type 'self' is not declared‚ê§at <tmp>:1‚ê§------> 3class A { method a(--> self7‚èè5) { 42 } }; say A.new.a # why not make i‚ê§¬ª

[18:25] <SmokeMachine> it would be a very cool and readable way of returning self

[18:25] <SmokeMachine> m: class A { method a(self: --> self) { 42 } }; say A.new.a

[18:25] <camelia> rakudo-moar d75a703fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid typename 'self' in parameter declaration.‚ê§at <tmp>:1‚ê§------> 3class A { method a(self7‚èè5: --> self) { 42 } }; say A.new.a‚ê§¬ª

[18:25] <SmokeMachine> m: class A { method a(SELF: --> SELF) { 42 } }; say A.new.a

[18:25] <camelia> rakudo-moar d75a703fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid typename 'SELF' in parameter declaration.‚ê§at <tmp>:1‚ê§------> 3class A { method a(SELF7‚èè5: --> SELF) { 42 } }; say A.new.a‚ê§¬ª

[18:26] <SmokeMachine> m: class A { method a(\SELF: --> SELF) { 42 } }; say A.new.a

[18:26] <camelia> rakudo-moar d75a703fd: OUTPUT: ¬´===SORRY!===‚ê§No compile-time value for SELF‚ê§¬ª

[18:26] <SmokeMachine> :(

[18:38] *** veesh_ joined
[18:38] *** aborazmeh joined
[18:38] *** aborazmeh left
[18:38] *** aborazmeh joined
[18:38] *** abraxxa left
[18:38] *** chloekek joined
[18:39] <cpan-raku> New module released to CPAN! Text::Diff (1.0.0) by 03RBT

[18:39] *** veesh left
[18:40] *** veesh_ is now known as veesh

[18:42] *** aborazmeh left
[18:43] *** aborazmeh joined
[18:43] *** aborazmeh left
[18:43] *** aborazmeh joined
[18:43] *** zakharyas left
[18:48] *** wamba left
[18:50] *** aluaces left
[18:52] *** patrickb left
[18:58] *** wildtrees joined
[19:00] <wildtrees> ok this isn't working https://pastebin.com/xQ1DSz0p

[19:00] <wildtrees> my payload never seems to receive a kill signal from the kill-supply

[19:01] *** wamba joined
[19:01] <wildtrees> and also how do I get a react block to shutdown when one of it's supplies is done? 

[19:10] *** wamba left
[19:16] *** patrickb joined
[19:23] *** sauvin left
[19:25] *** aborazmeh left
[19:33] *** sena_kun left
[19:45] *** aluaces joined
[19:47] *** veesh_ joined
[19:47] *** sena_kun joined
[19:48] *** veesh left
[19:48] *** veesh_ is now known as veesh

[19:49] *** domidumont1 left
[19:54] <jnthn> wildtrees: LAST done

[19:54] <jnthn> (inside the `whenever` of the supply that should cause this behavior)

[19:56] *** stoned75 joined
[19:59] <wildtrees> jnthn, ok thank you, it exits after 10 seconds now from the $supply/$main-supply, but it still doesn't seem to be getting the message from $kill-supply at all to shutdown early 

[20:00] *** hythm left
[20:01] *** stoned75 left
[20:02] <jnthn> Probably because your $main-supply is too blocking

[20:03] <jnthn> Don't `sleep` in a for loop; instead just write it as whenever Supply.interval(1) { }

[20:04] *** stoned75 joined
[20:07] *** kensanata left
[20:13] <wildtrees> jnthn, still not receiving any messages from $kill-supply it seems after changing $main-supply = Supply.inteval(1) 

[20:13] <melezhik> with RakuDist you jave probable the most minimalistic setup for TravisCI - https://github.com/melezhik/RakuDist/blob/master/docs/api.md#travis-integration-example

[20:13] <melezhik> to test Raku module hosted in github, just `curl http://repo.westus.cloudapp.azure.com/rakudist/api/run/$os/$author/$project -s | bash`

[20:14] <SmokeMachine> jnthn: do you think `method bla(--> self)` would make sense? would that be possible to implement?

[20:14] <melezhik> for example - `curl http://repo.westus.cloudapp.azure.com/rakudist/api/run/debian/melezhik/sparrowdo -s | bash`

[20:15] <melezhik> tbrowder: - I don't know, my understanding is that p6doc is always tries to get install some stuff into system directories, ignoring `--to`. I may be wrong, as I've not tried 

[20:15] *** rindolf left
[20:16] <lizmat> SmokeMachine: should be possible to implement, as a special case

[20:17] <SmokeMachine> lizmat: and do you think that would make sense?

[20:17] <lizmat> there are many cases I see that as useful

[20:17] <lizmat> e.g. a lot of !SET-SELF methods in core  :-)

[20:18] <wildtrees> jnthn, I appreciate your help this far, but I have to go for a while. should be back in a few hours. latter all 

[20:18] <lizmat> now, if it would be faster, I have no idea

[20:21] *** vinay joined
[20:23] *** wildtrees left
[20:31] <[Coke]> (p6doc) it's not trying *on purpose* to install into system directories, it's an attempt to compensate for docs being in "doc/" instead of "lib/" in the repo

[20:31] <[Coke]> .seen niner

[20:31] <tellable6> [Coke], I haven't seen niner around, did you mean nine?

[20:31] <[Coke]> .seen nine

[20:31] <tellable6> [Coke], https://gist.github.com/605113395bc7e36e3412d7669ac85ab1

[20:32] <[Coke]> .ask nine - can you take a look at https://github.com/Raku/doc/blob/master/Build.pm6#L9 ? It's trying to install stuff from doc as if it were in lib/, but is accidentally installing to the system repo and not whatever the default target install dir is (so installing as a non-priv'd user fails)

[20:32] <tellable6> [Coke], I'll pass your message to nine

[20:33] <[Coke]> .tell nine same as https://github.com/Raku/doc/issues/2896

[20:33] <tellable6> [Coke], I'll pass your message to nine

[20:33] <vinay> Hello, I am Vinay Vyas. I am new to this org. Can someone please direct me to the getting started page.

[20:34] <[Coke]> raku.org?

[20:34] <[Coke]> Let us know if you're looking for some

[20:34] *** lucasb left
[20:34] <[Coke]> thing in particular

[20:35] <vinay> I was looking for perl foundation, trying to get started for gsoc 2020 for the same org

[20:37] <[Coke]> ok. Raku, GSOC and TPF are three different things, but we're definitely the right spot for anything gsoc Raku related.

[20:37] <[Coke]> I think jmerelo was our GSOC leader, but he's on european time.

[20:39] <[Coke]> How far along is GSOC this year? Are you applying? chosen?

[20:40] <[Coke]> Sorry, I'm out of the loop.

[20:40] <vinay> Can you direct me to the getting start page where i can get get the required installation guides and contribution procedures.

[20:41] <[Coke]> I don't know anything about your particular project or if Merelo has put together a page. But if you want to have a copy of Raku so you can start working: 

[20:41] <[Coke]> https://raku.org/ - Download

[20:41] <vinay> the orgs who would be selected is not released yet. Its due date is 21 feb. 

[20:41] <[Coke]> That's generic. Anyone know if there's anything GSOC specific?

[20:42] <[Coke]> vinay: ah, thanks. Thanks for showing up early!

[20:43] <[Coke]> depending on the nature of what you end up working on, you may want the source build; the rakudo star build is closer to "batteries included", but may be a little behind.

[20:43] <[Coke]> Folks here are happy to help if you have any install or build issues. What OS are you on, out of curiousity?

[20:44] <vinay> I use ubuntu, but i am fine with windows as well. I thing ubuntu would be preferred

[20:46] <[Coke]> If you're comfortable doing development work on windows, it's fine, but ubuntu's probably easier all around.

[20:47] *** melezhik left
[20:51] *** melezhik joined
[20:52] *** a3f joined
[20:53] <vinay> https://github.com/perl   Is this the main git page for perl. Or raku, i am not sure?

[20:55] <sena_kun> vinay: https://github.com/raku/ is the organization for Raku

[20:55] <sena_kun> perl is for perl. :)

[20:56] <[Coke]> TPF is probably covering for both Raku & Perl in GSOC

[20:57] <vinay> What exactly is raku. I found this on a page for The Perl Foundation

[20:57] <[Coke]> Sorry for the historical confusion.

[20:57] <[Coke]> Raku is a new language.

[20:57] <[Coke]> Historically, it was called "Perl 6".

[20:58] <[Coke]> Currently, it's called Raku, and TPF is the foundation for both Raku & Perl.

[20:58] <vinay> Okay, thanks for clarifying.

[20:58] <[Coke]> It's definitely Perl-ish.

[20:59] <vinay> So what github page do we use for Raku?

[21:00] <[Coke]> the org is at /Raku

[21:00] <[Coke]> the compiler is at /Rakudo/rakudo

[21:00] <[Coke]> er, /rakudo/rakudo

[21:00] <[Coke]> (separate orgs because we have commiter license agreements for the compiler only)

[21:00] <[Coke]> and also we try to maintain the separation between language spec & compiler

[21:01] <[Coke]> rakudo is technically "a" compiler, as opposed to "the" compiler. (it's also basically the only one right now, though.)

[21:02] *** MasterDuke joined
[21:02] <sena_kun> vinay: is there a particular project you want to participate in? the list can be viewed at https://github.com/perl-foundation-outreach/gsoc-2020-ideas#project-ideas which has both perl and raku project proposals.

[21:04] <vinay> I wanted to go through the code base first before choosing the project. I am looking for the same. Can you please direct me to the required place. 

[21:06] <cpan-raku> New module released to CPAN! Test::Differences (1.0.0) by 03RBT

[21:06] <cpan-raku> New module released to CPAN! Text::Diff (1.0.1) by 03RBT

[21:06] *** xinming_ left
[21:08] *** xinming_ joined
[21:08] *** chloekek left
[21:09] *** chloekek joined
[21:10] <vinay> I got some links from specific potential projects page. Thanks for helping :)

[21:18] *** AlexDaniel joined
[21:23] *** imcsk8 joined
[21:26] <Geth> ¬¶ rakudo.org: c1567e4e62 | (Patrick B√∂ker)++ | 2 files

[21:26] <Geth> ¬¶ rakudo.org: Fix up Star Bundle OS detection a bit

[21:26] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/c1567e4e62

[21:28] <Doc_Holliwould> how do i tell wether a Num $num contains a natural number? $num - $num.Int == 0 and !$num.contains(".") feel both equally clumsy

[21:30] <chloekek> $num == $num.Int

[21:31] <chloekek> That checks for integers by the way. To check for natural numbers you also have to check that it is not negative, e.g. $num == $num.Int && $num >= 0

[21:31] <chloekek> Or >= 1 if you‚Äôre one of those people.

[21:32] *** sena_kun left
[21:34] <guifa2> I think you can also do UInt no?

[21:35] <guifa2> m: say 22 ~~ UInt; say -43 ~~ UInt; say 0 ~~ UInt

[21:35] <camelia> rakudo-moar 495ddcc1f: OUTPUT: ¬´True‚ê§False‚ê§True‚ê§¬ª

[21:35] <guifa2> Doc_Holliwood: see above ^^ 

[21:36] <chloekek> p6: say 0e1 == 0e1.Int; say 0e1 ~~ UInt

[21:36] <camelia> rakudo-moar 495ddcc1f: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[21:36] *** stoned75 left
[21:36] <guifa2> https://codegolf.stackexchange.com/a/199075/30284  <-- probably the ugliest line of Raku code I've written in a long time.  And abusing both assignments and regex 

[21:37] <guifa2> Oddly, I can't switch the order of the .sum/$_ and .reduce(‚Ä¶), but not sure why exactly

[21:37] *** stoned75 joined
[21:39] *** molaf joined
[21:46] *** sena_kun joined
[21:46] *** vrurg joined
[21:49] *** vrurg left
[22:04] <Geth> ¬¶ doc: 09fbb537d4 | (Stoned Elipot)++ | doc/Language/operators.pod6

[22:04] <linkable6> Link: https://docs.raku.org/language/operators

[22:04] <Geth> ¬¶ doc: rephrase boolean logical OR operator description

[22:04] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/09fbb537d4

[22:17] *** chloekek left
[22:24] *** natrys left
[22:30] *** benjif_ joined
[22:33] *** benjif left
[22:35] *** guifa2 left
[22:37] *** Tirifto left
[22:46] *** vinay left
[22:52] *** Black_Ribbon joined
[22:53] *** cpan-raku left
[22:53] *** cpan-raku joined
[22:53] *** cpan-raku left
[22:53] *** cpan-raku joined
[22:56] *** guifa2 joined
[23:08] *** Doc_Holliwould left
[23:09] *** Doc_Holliwood left
[23:09] *** wildtrees joined
[23:13] *** guifa2 left
[23:21] <tbrowder> melezhik: i understand, thanks!

[23:29] <AlexDaniel> weekly: Raku on FOSDEM https://mirrors.dotsrc.org/fosdem/2020/AW1.125/rakulang.mp4

[23:29] <notable6> AlexDaniel, Noted! (weekly)

[23:29] <AlexDaniel> weekly: jmerelo++

[23:29] <notable6> AlexDaniel, Noted! (weekly)

[23:33] *** e1z0 left
[23:33] *** e1z0 joined
[23:33] *** sena_kun left
[23:38] *** mahmudov left
[23:43] *** patrickb left
[23:48] *** AlexDaniel left
[23:49] *** sena_kun joined
[23:52] <Geth> ¬¶ doc: cde8d4611b | (Stoned Elipot)++ | doc/Language/operators.pod6

[23:52] <linkable6> Link: https://docs.raku.org/language/operators

[23:52] <Geth> ¬¶ doc: (really) rephrase boolean logical OR operator description

[23:52] <Geth> ¬¶ doc: 

[23:52] <Geth> ¬¶ doc: ...as last commit was really about XOR

[23:52] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/cde8d4611b

[23:58] *** hungrydonkey joined
