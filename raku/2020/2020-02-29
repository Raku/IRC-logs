[00:00] *** pecastro left
[00:02] *** xelxebar joined
[00:08] *** leont left
[00:09] *** leont joined
[00:19] *** cognominal joined
[00:23] *** cognomin_ left
[00:59] *** leont left
[01:06] *** epony left
[01:12] *** dansolo42 left
[01:12] *** dansolo42 joined
[01:14] *** epony joined
[01:18] *** titsuki joined
[01:24] *** pecastro joined
[01:36] *** sena_kun joined
[01:37] *** Altai-man_ left
[01:53] *** Redfoxmoon_ joined
[01:54] *** wamba left
[01:56] *** Redfoxmoon left
[02:19] *** wildtrees left
[02:25] *** cpan-raku left
[02:25] *** cpan-raku joined
[02:25] *** cpan-raku left
[02:25] *** cpan-raku joined
[02:34] *** mowcat left
[03:03] *** Doc_Holliwould joined
[03:03] *** molaf joined
[03:06] *** holli joined
[03:06] *** Doc_Holliwood left
[03:08] *** Doc_Holliwood joined
[03:09] *** Doc_Holliwould left
[03:11] *** Doc_Holliwould joined
[03:12] *** holli left
[03:14] *** holli joined
[03:15] *** Doc_Holliwood left
[03:17] *** Doc_Holliwould left
[03:20] *** holli left
[03:35] *** Altai-man_ joined
[03:37] *** sena_kun left
[04:37] *** bloatable6 left
[04:37] *** coverable6 left
[04:37] *** unicodable6 left
[04:37] *** sourceable6 left
[04:37] *** statisfiable6 left
[04:37] *** greppable6 left
[04:37] *** reportable6 left
[04:37] *** linkable6 left
[04:37] *** notable6 left
[04:37] *** bisectable6 left
[04:37] *** evalable6 left
[04:37] *** releasable6 left
[04:37] *** shareable6 left
[04:37] *** quotable6 left
[04:37] *** committable6 left
[04:37] *** nativecallable6 left
[04:37] *** benchable6 left
[04:37] *** squashable6 left
[04:37] *** tellable6 left
[04:38] *** coverable6 joined
[04:38] *** statisfiable6 joined
[04:38] *** committable6 joined
[04:38] *** bisectable6 joined
[04:39] *** linkable6 joined
[04:39] *** bloatable6 joined
[04:39] *** evalable6 joined
[04:39] *** tellable6 joined
[04:39] *** shareable6 joined
[04:39] *** sourceable6 joined
[04:39] *** nativecallable6 joined
[04:39] *** greppable6 joined
[04:40] *** notable6 joined
[04:40] *** reportable6 joined
[04:40] *** quotable6 joined
[04:40] *** unicodable6 joined
[04:40] *** releasable6 joined
[04:40] *** squashable6 joined
[04:40] *** benchable6 joined
[04:51] *** pecastro left
[05:10] *** titsuki left
[05:16] *** cfa left
[05:36] *** sena_kun joined
[05:37] *** Altai-man_ left
[05:58] *** Kaiepi left
[05:58] *** Kaeipi joined
[06:27] *** Hotbees joined
[06:28] *** sauvin joined
[06:29] *** aborazmeh left
[06:45] *** molaf left
[06:46] *** titsuki joined
[07:18] *** lgtaube left
[07:19] *** finsternis left
[07:20] *** finsternis joined
[07:29] *** xinming joined
[07:32] *** xinming_ left
[07:35] *** Altai-man_ joined
[07:35] *** Voldenet left
[07:36] *** Voldenet joined
[07:36] *** Voldenet left
[07:36] *** Voldenet joined
[07:37] *** sena_kun left
[07:39] *** rindolf joined
[08:32] *** antoniogamiz joined
[08:32] *** Redfoxmoon_ left
[08:32] *** Redfoxmoon_ joined
[08:32] *** Redfoxmoon_ is now known as Redfoxmoon

[08:32] <antoniogamiz> o/

[08:32] <antoniogamiz> any idea why this regex is not working?

[08:33] <antoniogamiz> m: > "7710BE40DEE87AED4CAFCC5C2D350391227AD5E2" ~~ /[0..9A..F] ** 5..40/

[08:33] <evalable6> antoniogamiz, rakudo-moar 88f04b630: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[08:33] <evalable6> antoniogamiz, Full output: https://gist.github.com/cb112a14654a96aa5f7f9e94b2934425

[08:33] <antoniogamiz> m: "7710BE40DEE87AED4CAFCC5C2D350391227AD5E2" ~~ /[0..9A..F] ** 5..40/

[08:33] <evalable6> antoniogamiz, rakudo-moar 88f04b630: OUTPUT: ¬´¬ª

[08:38] <antoniogamiz> solved!

[08:38] <antoniogamiz> m: > "7710BE40DEE87AED4CAFCC5C2D350391227AD5E2" ~~ /<[A..Z 0..9]> ** 5..40/

[08:38] <evalable6> antoniogamiz, rakudo-moar 88f04b630: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[08:38] <evalable6> antoniogamiz, Full output: https://gist.github.com/ee6c7bdc3e6a1e43ec787df09b1799ef

[08:39] <antoniogamiz> m: "7710BE40DEE87AED4CAFCC5C2D350391227AD5E2" ~~ /<[A..Z 0..9]> ** 5..40/

[08:39] <evalable6> antoniogamiz, rakudo-moar 88f04b630: OUTPUT: ¬´¬ª

[08:39] <antoniogamiz> ah, in my machine works mm

[08:44] <Geth> ¬¶ doc: 76c8fbb5c4 | (JJ Merelo)++ | doc/Type/Num.pod6

[08:44] <Geth> ¬¶ doc: Adds Num.new, including coercion

[08:44] <Geth> ¬¶ doc: 

[08:44] <Geth> ¬¶ doc: Refs #2632

[08:44] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/76c8fbb5c4

[08:44] <linkable6> Link: https://docs.raku.org/type/Num

[08:44] <linkable6> DOC#2632 [open]: https://github.com/Raku/doc/issues/2632 [Hacktoberfest][RFE][big][docs][good first issue][help wanted][new][‚ö† Top Priority ‚ö†] Checklist for 6.d

[08:49] *** m_athias left
[08:52] *** titsuki left
[08:54] *** antoniogamiz left
[09:01] *** titsuki joined
[09:06] *** m_athias joined
[09:36] *** sena_kun joined
[09:37] *** Altai-man_ left
[09:43] *** mowcat joined
[09:44] *** clarjon1 left
[10:08] *** chloekek joined
[10:10] *** cpan-raku left
[10:10] *** cpan-raku joined
[10:10] *** cpan-raku left
[10:10] *** cpan-raku joined
[10:22] *** Black_Ribbon left
[10:26] <chloekek> p6: say 'a' cmp 1

[10:26] <evalable6> chloekek, rakudo-moar 88f04b630: OUTPUT: ¬´More‚ê§¬ª

[10:26] <tellable6> 2020-02-25T10:25:28Z #raku-dev <lizmat> chloekek could you give a reply on https://www.reddit.com/r/rakulang/comments/f95r2o/how_to_create_a_binary_executable_in_raku/ with regards to the status of your GSOC project of last year ?

[10:27] <chloekek> lizmat: I‚Äôve never done a GSOC project.

[10:35] *** skyl4rk left
[10:37] *** skyl4rk joined
[10:55] *** titsuki left
[10:56] *** domidumont joined
[11:03] *** titsuki joined
[11:15] *** aborazmeh joined
[11:15] *** aborazmeh left
[11:15] *** aborazmeh joined
[11:23] *** chloekek left
[11:31] *** lgtaube joined
[11:34] *** wamba joined
[11:35] *** domidumont left
[11:35] *** Altai-man_ joined
[11:37] *** sena_kun left
[11:38] *** titsuki left
[11:40] *** titsuki joined
[11:53] *** molaf joined
[11:54] *** molaf left
[12:01] *** chloekek joined
[12:29] *** wamba left
[12:35] <lizmat> chloekek: oops, I guess I got it wrong then...  :-)

[12:35] <lizmat> sorry for the noise

[12:41] *** leont joined
[12:57] *** chloekek left
[13:17] *** chloekek joined
[13:20] <cpan-raku> New module released to CPAN! Gnome::N (0.15.6) by 03MARTIMM

[13:36] *** sena_kun joined
[13:38] *** Altai-man_ left
[13:40] *** veesh left
[13:41] *** veesh joined
[13:56] *** nightfrog left
[14:01] *** nightfrog joined
[14:18] *** lucasb joined
[14:26] *** molaf joined
[14:40] *** Manifest0 left
[14:50] *** Manifest0 joined
[14:53] *** masak left
[14:54] *** aborazmeh left
[14:55] *** masak joined
[14:59] *** rindolf left
[15:09] *** mowcat left
[15:10] *** wamba joined
[15:33] <cpan-raku> New module released to CPAN! Math::Libgsl::Constants (0.0.3) by 03FRITH

[15:35] *** Altai-man_ joined
[15:35] *** literal joined
[15:37] *** sena_kun left
[15:44] *** pecastro joined
[16:12] *** andrzejku joined
[16:20] *** aborazmeh joined
[16:20] *** aborazmeh left
[16:20] *** aborazmeh joined
[16:21] *** patrickb joined
[16:42] *** xelxebar left
[16:43] *** xelxebar joined
[16:44] *** titsuki left
[16:55] *** MasterDuke left
[16:57] <cpan-raku> New module released to CPAN! Math::Libgsl::Random (0.0.1) by 03FRITH

[17:01] *** Kaeipi left
[17:02] *** Kaeipi joined
[17:04] *** leont left
[17:15] *** leont joined
[17:22] *** mowcat joined
[17:23] *** guifa left
[17:23] <rypervenche> Is using "note" like this typical for what I'm trying to do? https://gist.github.com/rypervenche/5d35368ca504c2443433ca95b959745d

[17:24] *** leont left
[17:26] <tobs> rypervenche: note prints to $*ERR, so that seems good to me.

[17:27] *** cpan-raku left
[17:27] *** cpan-raku joined
[17:27] *** cpan-raku left
[17:27] *** cpan-raku joined
[17:27] <rypervenche> Cool. I see people using "die" and maybe "fail" a lot in code, but I didn't want all of the errors in my output and I haven't seen any code yet that uses note. I'll have to read some more application-type code. :)

[17:27] <tobs> but the check itself could be easy to circumvent, if the person calling the script has access to the environment

[17:29] *** Altai-man_ left
[17:31] <tobs> die could be another option. Instead of directly exiting from some function like you do, die raises an exception that can be regularly caught by some caller of your function if they know better than to exit the program.

[17:31] <rypervenche> Well, the script is in my normal user's git repo in its home directory, so I thought this would be a good way to check. I'm converting a bash script into Raku. It was simpler in Bash: [ $UID != 0 ] && echo "You are not root. Exiting..." && exit 1

[17:33] <tobs> The problem is you're not checking the UID of the user running the process. You're checking some string that is in the USER environment variable. Someone with shell access can write anything they like into that variable including non-existent usernames or root.

[17:33] <rypervenche> That's true...

[17:35] <tobs> m: dd $*USER

[17:35] <evalable6> tobs, rakudo-moar d95d218f3: OUTPUT: ¬´IntStr.new(1005, "bisectable")‚ê§¬ª

[17:37] <lizmat> m: dd +$*USER   # pretty sure that cannot be faked easily

[17:37] <evalable6> lizmat, rakudo-moar d95d218f3: OUTPUT: ¬´1005‚ê§¬ª

[17:37] <lizmat> m: dd ?$*USER 

[17:37] <evalable6> lizmat, rakudo-moar d95d218f3: OUTPUT: ¬´Bool::True‚ê§¬ª

[17:38] *** hacktor left
[17:38] <lizmat> m: die "You are not root.  Exiting..." if +$*USER

[17:38] <evalable6> lizmat, rakudo-moar d95d218f3: OUTPUT: ¬´(exit code 1) You are not root.  Exiting...‚ê§  in block <unit> at /tmp/qgx5TUV4K_ line 1‚ê§‚ê§¬ª

[17:40] *** hacktor joined
[17:42] *** aborazmeh left
[17:42] <rypervenche> Oooh

[17:43] <rypervenche> knowledge++

[17:44] *** Kaeipi left
[17:45] *** Kaeipi joined
[17:47] *** Kaeipi left
[17:47] *** Kaeipi joined
[18:07] *** rindolf joined
[18:09] *** aborazmeh joined
[18:09] *** aborazmeh left
[18:09] *** aborazmeh joined
[18:09] *** Kaeipi left
[18:13] *** Kaiepi joined
[18:13] *** mowcat left
[18:30] *** regreg joined
[18:33] *** regreg left
[18:35] *** regreg joined
[18:50] *** NODE left
[18:55] *** NODE joined
[18:58] *** aborazmeh left
[18:59] *** NODE left
[19:00] *** NODE joined
[19:04] *** veesh left
[19:04] *** veesh joined
[19:08] *** veesh left
[19:08] *** veesh joined
[19:16] *** veesh left
[19:16] *** veesh joined
[19:24] *** andrzejku left
[19:33] *** pecastro left
[19:38] *** mowcat joined
[19:42] *** regreg left
[19:43] *** regreg joined
[19:49] *** hankache joined
[19:55] *** hacktor left
[20:06] *** chloekek left
[20:14] *** wamba left
[20:41] *** leont joined
[20:48] *** wamba joined
[21:08] *** hankache left
[21:19] *** sena_kun joined
[21:20] *** Celelibi left
[21:27] *** xinming left
[21:28] *** xinming joined
[21:33] *** Celelibi joined
[21:36] *** Altai-man_ joined
[21:39] *** sena_kun left
[21:40] *** pecastro joined
[21:48] *** mowcat left
[21:48] *** mowcat joined
[22:02] <tobs> Is there a way to cancel a Promise.in()?

[22:13] <lizmat> tobs: Promise.in is a wrapper around ThreadPoolScheduler.cue

[22:13] <lizmat> https://docs.raku.org/routine/cue

[22:13] <lizmat> that returns a Cancellation object

[22:13] <lizmat> the Promise wrapper does not expose that

[22:14] <tobs> ha, I *knew* I had read Cancellation before

[22:38] <SmokeMachine> tobs: if you use it inside a react and done() that, it‚Äôs autocanceled (if I remember ir right)

[22:40] *** rindolf left
[22:40] <tobs> sadly no, I set it off to tick in the background. But I solved my immediate problem in a different way meanwhile.

[22:52] *** Poohman joined
[22:57] <Poohman> hello all, if I use a grammar and parse, how can I check if a match has been found?

[22:59] <Poohman> if the parse has failed, then is it considered as Any??

[23:00] *** wamba left
[23:06] <Poohman> m: say "test";

[23:06] <evalable6> Poohman, rakudo-moar e11142084: OUTPUT: ¬´test‚ê§¬ª

[23:08] <Poohman> m: grammar A {token TOP {\d*}};my $match = A.parse("a");say $match;

[23:08] <evalable6> Poohman, rakudo-moar e11142084: OUTPUT: ¬´(Any)‚ê§¬ª

[23:08] <Poohman> m: grammar A {token TOP {\d*}};my $match = A.parse("1");say $match;

[23:08] <evalable6> Poohman, rakudo-moar e11142084: OUTPUT: ¬´ÔΩ¢1ÔΩ£‚ê§¬ª

[23:09] <Poohman> What is the idiomatic way to check if I have a match?

[23:09] <Poohman> m: grammar A {token TOP {\d*}};my $match = A.parse("1");say $match.WHAT;

[23:09] <evalable6> Poohman, rakudo-moar e11142084: OUTPUT: ¬´(A)‚ê§¬ª

[23:11] <Poohman> m: grammar A {token TOP {\d*}};my $match = A.parse("1");given $match.WHAT {when A { say " I have a match"}};

[23:11] <evalable6> Poohman, rakudo-moar e11142084: OUTPUT: ¬´ I have a match‚ê§¬ª

[23:13] <leont> A failing match is false and undefined

[23:14] <Poohman> thanks

[23:14] <Poohman> got a bit confused because of the Any

[23:20] <leont> I think that using dd instead of say helps in understanding what's going on

[23:22] <leont> A successful match returns a defined Match object

[23:29] *** MasterDuke joined
[23:37] *** sena_kun joined
[23:39] *** Altai-man_ left
[23:46] *** aborazmeh joined
[23:46] *** aborazmeh left
[23:46] *** aborazmeh joined
