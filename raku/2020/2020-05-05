[00:01] *** devmikey left
[00:10] *** xinming left
[00:10] *** xinming joined
[00:14] *** molaf joined
[00:29] *** skyl4rk_ joined
[00:29] *** skyl4rk left
[00:29] *** skyl4rk_ is now known as skyl4rk

[00:30] *** Kaiepi left
[00:30] *** Kaiepi joined
[00:32] *** ragekagemage left
[00:41] *** p6steve joined
[00:46] *** p6steve left
[00:48] *** mowcat left
[01:03] *** mowcat joined
[01:03] *** titsuki left
[01:22] *** Skarsnik left
[01:32] *** xinming left
[01:37] *** xinming joined
[01:49] *** molaf left
[02:00] *** Sgeo__ joined
[02:01] *** molaf joined
[02:01] *** gnufr33dom joined
[02:03] *** xinming left
[02:03] *** xinming joined
[02:04] *** Sgeo_ left
[02:26] *** stoned75 left
[02:27] *** pilne left
[02:42] *** p6steve joined
[02:46] *** p6steve left
[03:12] *** xinming left
[03:47] *** _dev_zero left
[03:48] *** holyghost left
[03:49] *** _dev_zero joined
[04:05] *** molaf left
[04:08] *** marcusr joined
[04:08] *** brtastic joined
[04:09] *** bdju joined
[04:14] *** mowcat left
[04:29] *** farcas1982regreg joined
[04:42] *** p6steve joined
[04:45] *** stoned75 joined
[04:47] *** p6steve left
[05:19] *** sauvin joined
[05:21] *** rindolf joined
[05:25] <Geth> ¦ doc/test-for-perl-method: bcf9c26443 | (Stoned Elipot)++ | 2 files

[05:25] <Geth> ¦ doc/test-for-perl-method: Test for discouraged usage of .perl in sample code

[05:25] <Geth> ¦ doc/test-for-perl-method: 

[05:25] <Geth> ¦ doc/test-for-perl-method: If needed the 'perl' method can be allowed in sample code with

[05:25] <Geth> ¦ doc/test-for-perl-method: the :ok-test<perl> annotation.

[05:25] <Geth> ¦ doc/test-for-perl-method: review: https://github.com/Raku/doc/commit/bcf9c26443

[05:29] *** aborazmeh left
[05:31] <Geth> ¦ doc: stoned++ created pull request #3359: Test for discouraged usage of .perl in sample code

[05:31] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3359

[05:42] *** brtastic left
[05:43] *** holyghost joined
[05:54] *** stoned75_ joined
[05:58] *** stoned75 left
[05:59] *** sjm_uk joined
[06:01] *** p6steve joined
[06:06] *** p6steve left
[06:15] *** |Sno| left
[06:15] *** [Sno] joined
[06:25] *** anatofuz_ joined
[06:27] *** anatofuz_ left
[06:28] *** anatofuz joined
[06:39] <Geth> ¦ doc/test-for-perl-method: 595108c1cc | (Stoned Elipot)++ | writing-docs/EXAMPLES.md

[06:39] <Geth> ¦ doc/test-for-perl-method: The 'perl' method usage is discouraged

[06:39] <Geth> ¦ doc/test-for-perl-method: 

[06:39] <Geth> ¦ doc/test-for-perl-method: Also mention the alternative, 'raku'.

[06:39] <Geth> ¦ doc/test-for-perl-method: review: https://github.com/Raku/doc/commit/595108c1cc

[06:44] <Geth> ¦ doc: bcf9c26443 | (Stoned Elipot)++ | 2 files

[06:44] <Geth> ¦ doc: Test for discouraged usage of .perl in sample code

[06:44] <Geth> ¦ doc: 

[06:44] <Geth> ¦ doc: If needed the 'perl' method can be allowed in sample code with

[06:44] <Geth> ¦ doc: the :ok-test<perl> annotation.

[06:44] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/bcf9c26443

[06:44] <Geth> ¦ doc: 595108c1cc | (Stoned Elipot)++ | writing-docs/EXAMPLES.md

[06:44] <Geth> ¦ doc: The 'perl' method usage is discouraged

[06:44] <Geth> ¦ doc: 

[06:44] <Geth> ¦ doc: Also mention the alternative, 'raku'.

[06:44] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/595108c1cc

[06:44] <Geth> ¦ doc: 35155512ef | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[06:44] <Geth> ¦ doc: Merge pull request #3359 from Raku/test-for-perl-method

[06:44] <Geth> ¦ doc: 

[06:44] <Geth> ¦ doc: Test for discouraged usage of .perl in sample code

[06:44] <Geth> ¦ doc: Thanks a lot!

[06:45] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/35155512ef

[06:47] *** stoned75_ left
[06:49] *** stoned75 joined
[06:50] *** kensanata joined
[06:56] *** andrzejku joined
[07:01] *** brtastic joined
[07:03] *** samcv joined
[07:03] *** freezing_ left
[07:04] *** tigerpaws left
[07:05] *** tigerpaws joined
[07:05] *** MasterDuke joined
[07:06] *** freezing_ joined
[07:09] *** orinthe left
[07:09] *** gdonald left
[07:09] *** Ulti left
[07:09] *** KindOne left
[07:09] *** a3r0 left
[07:09] *** Celelibi left
[07:09] *** ribasushi left
[07:10] *** brtastic left
[07:10] *** ribasushi joined
[07:11] *** brtastic joined
[07:13] *** Geth left
[07:13] *** Geth joined
[07:14] *** tigerpaws left
[07:15] *** tigerpaws joined
[07:15] *** KindOne joined
[07:15] *** orinthe joined
[07:15] *** gdonald joined
[07:15] *** Ulti joined
[07:15] *** a3r0 joined
[07:15] *** Celelibi joined
[07:15] *** sacomo joined
[07:15] *** erdic joined
[07:15] *** jjatria joined
[07:15] *** sivoais joined
[07:15] *** masak joined
[07:15] *** ilbelkyr joined
[07:15] *** autarch joined
[07:15] *** moritz joined
[07:15] *** cxreg joined
[07:20] *** tigerpaws left
[07:20] *** tigerpaws joined
[07:21] *** sivoais left
[07:22] *** sivoais joined
[07:25] *** tigerpaws left
[07:25] *** tigerpaws joined
[07:26] *** farcas1982regreg left
[07:34] *** gnufr33dom left
[07:39] *** expon joined
[07:41] *** mahafyi joined
[07:42] *** SCHAPiE left
[07:44] *** patrickb joined
[07:45] *** p6steve joined
[07:48] *** pecastro joined
[07:48] *** sena_kun joined
[07:51] *** stoned75 left
[07:53] *** kst`` left
[07:54] *** SCHAPiE joined
[07:56] *** stoned75 joined
[08:07] *** Kaiepi left
[08:08] *** Kaiepi joined
[08:18] *** xinming joined
[08:30] *** rindolf left
[08:34] *** elcaro left
[08:35] *** elcaro joined
[08:40] <El_Che> releasable6: status

[08:40] <releasable6> El_Che, Release date for Rakudo 2020.05 is listed in “Planned future releases”, but it was already released.

[08:40] <releasable6> El_Che, and I oop! Backtrace: https://gist.github.com/ebdccf2240cce4924b497ca378f7cd11

[08:41] <El_Che> so, is it released?

[08:46] *** rindolf joined
[08:47] <AlexDaniel> sena_kun: ↑

[08:48] *** xinming left
[08:48] *** xinming joined
[08:49] *** p6steve left
[08:51] *** jjmerelo joined
[08:52] *** sena_kun left
[08:52] *** sena_kun joined
[08:57] *** jjmerelo left
[09:07] *** Altai-man_ joined
[09:07] *** chloekek joined
[09:09] *** sena_kun left
[09:32] <El_Che> is the arrow for the release or the backtrace?

[09:32] <El_Che> fyi: now that ubuntu dropper i386 I am moving i386 builds to debian

[09:34] *** jjmerelo joined
[09:38] *** xinming left
[09:39] *** xinming joined
[09:44] *** vike left
[09:54] * lizmat clickbaits https://rakudoweekly.blog/2020/05/04/2020-18-comma-community/

[09:55] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue A way to control Rat's behavior when it is running out of range for its denominator https://github.com/Raku/problem-solving/issues/185

[09:58] <El_Che> lizmat: I am building the new release at we speak

[09:58] <El_Che> Can we cheat? :)

[09:58] <lizmat> no, it will be in next week's RWN  :-)

[09:59] <lizmat> perhaps with a Rakudo Star to go with it?

[09:59] * lizmat hopes

[10:00] <El_Che> lizmat: I haven't followed the * releases for some time, but I think it's a while from the last release

[10:01] <lizmat> 2020.01 was the last one

[10:01] <El_Che> oh, that's ok, then

[10:01] <El_Che> seems on schedule

[10:03] <Altai-man_> We don't have tarballs on the website yet

[10:03] <Altai-man_> And I don't know who does that.

[10:07] <lizmat> perhaps rba knows?

[10:07] <El_Che> Altai-man_: I am building compiled tar.gz if that helps

[10:08] <El_Che> (although reflecting on what you said,  you mean source tar balls)

[10:09] <Altai-man_> Oh, no, sources are already there.

[10:09] <Altai-man_> The website just suggests me precompiled ones.

[10:10] <Altai-man_> Ok, this means I can send a happy email? I think last time there was a suggestion not to do that until sources or builds are not ready, but I don't remember clearly. :S

[10:24] *** Black_Ribbon left
[10:29] *** dogbert17 joined
[10:29] *** timotimo left
[10:29] *** ccamel left
[10:29] *** perlmaros left
[10:29] *** dogbert11 left
[10:29] *** patrickb left
[10:29] *** perlmaros joined
[10:29] *** camelCaser joined
[10:30] *** dg left
[10:30] *** timotimo joined
[10:32] *** dg joined
[10:41] *** farcas1982regreg joined
[10:42] <Altreus> is a react block sufficient to keep a lexical variable alive?

[10:42] <Altreus> Does it close over it?

[10:43] <Altreus> e.g.: « my $something-lexical-with-a-supply; start react whenever $something-lexical-with-a-supply.supply { ... } »

[10:43] *** natrys joined
[10:43] <Altreus> will this immediately stop?

[10:43] <Altreus> (ironically because of the start)

[10:44] <Altreus> In reality I'm sending a websocket around the place, but as soon as I try to use it, it seems to be closed - I'm wondering if it's going out of scope without telling me

[10:44] <lizmat> well, it feels wrong to rely on a lexical outside of a start because of possible race conditions

[10:45] <Altreus> I just realised the real code is a link away

[10:45] <Altreus> https://github.com/shuppet/p6-api-discord/blob/bug/35-reconnect-issue/lib/API/Discord/Connection.pm6#L102

[10:45] *** p6steve joined
[10:45] <Altreus> I also just realised this is only a problem the /second/ time

[10:45] <lizmat> does it have a DESTROY method?  perhaps that can tell you whether it really gets lost or not

[10:46] <lizmat> well, that feels like a race condition then

[10:46] <Altreus> I agree, but I cannot figure it out at all

[10:46] <Altreus> I made it lexical so I could be sure /which/ websocket I was working with

[10:46] <jnthn> It closes over it, but it will also see any mutations

[10:47] <jnthn> e.g. it doesn't capture the value, it captures the container

[10:47] <Altreus> So the line above gets run a second time in the same runtime; Discord tells me to reconnect, so I make a new websocket via the same path

[10:47] <Altreus> Which as far as I can tell is a new everything - new variable, new container, new lexical, new react block etc

[10:47] <lizmat> so why aren't the first two lines in !on_ws_connect not inside of the start block ?

[10:48] <Altreus> Should they be? I don't have an answer either way

[10:48] <Altreus> It didn't seem relevant to the start or the react, so I didn't put it in

[10:49] <Altreus> What actually happens is when this line runs it is closed and thus crashes -> https://github.com/shuppet/p6-api-discord/blob/bug/35-reconnect-issue/lib/API/Discord/Connection.pm6#L181

[10:49] <Altreus> but this only happens the second time around

[10:49] <Altreus> I'm sure it's related to how these threads cross over in the properties of the Connection object itself...

[10:50] <Altreus> seems like where a race condition should show up

[10:50] *** p6steve left
[10:50] <Altreus> I should probably rethink the semantics of my variables

[10:52] *** squashable6 left
[10:52] <Altreus> afk for groceries :)

[10:53] *** squashable6 joined
[11:03] *** caterfxo left
[11:06] *** andrzejku left
[11:07] *** sena_kun joined
[11:09] *** Altai-man_ left
[11:15] *** farcas1982regreg left
[11:19] *** andrzejku joined
[11:19] *** renormalist joined
[11:23] *** patrickb joined
[11:24] *** caterfxo joined
[11:41] <tbrowder> hi, all

[11:42] <tbrowder> is there any way to trap a core dump when writing a module test?

[11:43] <tbrowder> could eval-dies-ok be made to work somehow?

[11:45] <jnthn> No, you'd need to run a separate process really

[11:45] <jnthn> And then look at the signal

[11:50] *** caterfxo left
[11:50] *** caterfxo joined
[12:05] <tbrowder> ok, thnx, suspicions confirmed!

[12:17] *** anatofuz left
[12:17] *** epony left
[12:19] *** natrys left
[12:29] <samebchase-> Hi, I have a question. I appreciate how every time I try to install something using zef it runs all the tests. I was wondering kind of vetting is done so that no malicious code runs in the tests. 

[12:29] *** chloekek left
[12:30] <jjmerelo> samebchase afraid not... 

[12:30] <jjmerelo> So it's caveat emptor territory here

[12:32] *** molaf joined
[12:33] <lizmat> samebchase-: I think you can install without having the tests run

[12:33] <lizmat> --/test

[12:34] <jnthn> Yes, but...then you'll want use the module? And it should be just as evil?

[12:34] <jnthn> *want to

[12:34] <jnthn> Um, and could be. :)

[12:34] <samebchase-> jnthn: I was just thinking that haha :-)

[12:35] <samebchase-> IIRC there was a bug in utop (OCaml some time ago where a badly formatted bash script or something would end up doing a "rm -rf" 

[12:37] *** molaf left
[12:47] *** jjmerelo left
[12:54] *** plicease joined
[13:00] *** Aussieteen joined
[13:01] *** epony joined
[13:03] *** Aussieteen left
[13:04] *** stoned75 left
[13:05] *** stoned75 joined
[13:05] *** aborazmeh joined
[13:05] *** aborazmeh left
[13:05] *** aborazmeh joined
[13:07] *** Altai-man_ joined
[13:07] <El_Che> weekly: new rakudo 2020.05 packages for Linux distributions, addition of Debian 10 i386 packages (Ubuntu dropped i386 from 20.04 onwards): https://nxadm.github.io/rakudo-pkg/

[13:07] <notable6> El_Che, Noted! (weekly)

[13:08] <MasterDuke> why would https://github.com/rakudo/rakudo/blob/master/src/core.c/Array.pm6#L31-L33 allocate a BOOTHash for every call?

[13:09] *** sena_kun left
[13:10] <MasterDuke> p6scalarwithvalue looks pretty simple https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L778-L791

[13:12] <jnthn> The implicit *%_ (the allocation of that should be elimianted by spesh, but it'll be allocated up until then)

[13:13] <timotimo> we've got enough cases where *@ and *% are still created, but then never used, in my experience

[13:13] <Altai-man_> El_Che, hopefully, everything builds fine?

[13:13] <timotimo> possibly related to the osr thing we stumbled upon the other day

[13:14] <MasterDuke> the profile reports 10001000 of them allocated

[13:16] <MasterDuke> same with Scalar

[13:21] *** chloekek joined
[13:21] <El_Che> Altai-man_: everything built very fine

[13:21] <El_Che> even 386

[13:21] <El_Che> (because of the perf test made optional)

[13:21] <El_Che> Altai-man_++

[13:21] * Altai-man_ still can't believe

[13:22] <El_Che> Altai-man_: you should start to :)

[13:24] *** vike joined
[13:27] <MasterDuke> timotimo: what was the OSR thing? i've forgotten. the profile reports only 2 OSRs, but neither in the slow function

[13:28] <timotimo> when we optimize a frame by doing OSR, we're essentially entering the code at a different block from  BB 0, so there's an artificial edge between BB 0 and the one where the osrpoint is

[13:28] <timotimo> which can give us "phantom" register versions that spesh knows nothing about

[13:28] <timotimo> which can prevent spesh from optimizing things

[13:33] <MasterDuke> hm. think that might be the problem here? even though there's no OSR for the "problem" function?

[13:39] <Geth> ¦ problem-solving: Skarsnik assigned to AlexDaniel Issue Nativecall, native trait library usage rework https://github.com/Raku/problem-solving/issues/186

[13:40] <timotimo> perhaps not

[13:43] <MasterDuke> seems like it might be something with spesh, given how expensive MVM_spesh_arg_guard_run and resolve_using_guards are. any suggestions for debugging?

[13:44] *** mowcat joined
[13:45] *** squashable6 left
[13:45] *** squashable6 joined
[13:47] <MasterDuke> and the difference between what the profile and the spesh log report about whether the function is speshed/jitted or not

[13:49] *** rainmanjam left
[13:53] *** Skarsnik joined
[13:55] *** stoned75 left
[13:55] *** stoned75 joined
[14:06] *** wamba joined
[14:07] *** wamba left
[14:15] *** aborazmeh left
[14:16] *** natrys joined
[14:17] *** farcas1982regreg joined
[14:18] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Nativecall, native trait library usage rework https://github.com/Raku/problem-solving/issues/186

[14:18] <Geth> ¦ problem-solving: AlexDaniel self-unassigned Nativecall, native trait library usage rework https://github.com/Raku/problem-solving/issues/186

[14:23] *** caterfxo left
[14:23] *** Doc_Holliwood joined
[14:24] <Doc_Holliwood> m: say (1..10).grep({ $_ ~~2 ff^ $_ ~~4 }) # can i do this without an explicit block?

[14:24] <camelia> rakudo-moar 6a79e18fb: OUTPUT: «(2 3)␤»

[14:24] <Doc_Holliwood> m: say (1..10).grep( * ~~ 2 ff^ * ~~ 4 )

[14:24] <camelia> rakudo-moar 6a79e18fb: OUTPUT: «()␤»

[14:48] *** jjmerelo joined
[14:49] *** patrickb left
[14:53] <samebchase-> I am using `mongo-perl6-driver`, and it is taking me 20+ seconds to fetch a single object from the DB. Is this expected?

[14:53] <samebchase-> or should I try some other library

[14:54] <[Coke]> I can't comment on whether or not that's *expected*, but damn is that *slow*

[14:54] <tadzik> is it 20+ seconds for the first object, or every single fetch?

[14:55] <tadzik> maybe it's just slow to load

[14:59] *** patrickb joined
[14:59] <samebchase-> Two queries one after the other are also taking 20 seconds. Connection initialization seems to be happening fast. What do you all use to profile your programs?

[15:01] <samebchase-> Or am I running into some timeout, due to a config messup

[15:02] <samebchase-> $collection.find seems to be taking all the time

[15:04] <samebchase-> Setting up the client connection, database, and collection happen fast, and then the program hangs for 20seconds to do the $collection.find(); I do have an index on the field I am querying etc.

[15:07] *** sena_kun joined
[15:09] *** Altai-man_ left
[15:18] *** brtastic left
[15:23] <timotimo> samebchase-: you can use raku --profile or using the Telemetry module (comes with rakudo) to time individual stuff

[15:23] *** stoned75 left
[15:23] <timotimo> hold up, Telemetry doesn't time individual sections

[15:24] <timotimo> but running your program with -Msnapper can get you some info about what the program is doing over time

[15:24] *** _jrjsmrtn left
[15:25] <timotimo> the defualt --profile doesn't give very reliable results when your program uses multiple threads, which i would think the mongo p6 driver probably uses for something?

[15:25] *** __jrjsmrtn__ joined
[15:26] <timotimo> so you can --profile=/tmp/blah.sql and feed that into moarperf: https://github.com/timo/moarperf/releases/tag/untagged-550315574d6efe9a9874 should work (but needs some other dependencies from zef)

[15:35] *** Doc_Holliwood left
[15:39] *** stoned75 joined
[15:40] *** caterfxo joined
[15:41] *** caterfxo is now known as Guest66327

[15:41] *** caterfxo joined
[15:44] *** brtastic joined
[15:45] *** Guest66327 left
[15:45] <Geth> ¦ problem-solving: JJ assigned to jnthn Issue Use a grammar for command line options https://github.com/Raku/problem-solving/issues/187

[15:46] *** MilenaDevi joined
[15:48] *** MilenaDevi left
[15:49] *** kensanata left
[15:59] *** Doc_Holliwood joined
[16:05] *** xinming left
[16:06] *** xinming joined
[16:07] *** farcas1982regreg left
[16:14] <samebchase-> timotimo: thanks, will try out --profile

[16:19] <timotimo> just running the program with "time" will also tell you if it has been doing a lot of waiting, which you can tell by the user and system times being shorter than the wallclock time it took to run

[16:21] *** andrzejku left
[16:21] *** brtastic left
[16:23] *** KindOne left
[16:34] <samebchase-> real    0m22.649s

[16:34] <samebchase-> user    0m2.960s

[16:34] <samebchase-> sys     0m0.096s

[16:35] <samebchase-> yeah, you are right, there is a huge difference between the various times

[16:36] <timotimo> sys being low is fine, but the user time being so low looks a lot like it's doing a whole load of waiting

[16:37] <timotimo> "user" can, at least for single-threaded workloads, be interpreted somewhat like "if there was no reason to wait, the whole thing could have taken this long"

[16:41] <Geth> ¦ problem-solving: JJ assigned to jnthn Issue Should we have named arguments in test routines? https://github.com/Raku/problem-solving/issues/188

[16:42] <samebchase-> I have filed an issue on Github, with the snippet I am running. Perhaps, the maintainer of the library might be able to point out if I am doing something wrong. I am following the documentation very closely...

[16:43] <timotimo> you could try recording the network traffic with for example wireshark, and see where the pause(s) occur

[16:46] *** molaf joined
[16:49] <samebchase-> I am running the program inside a VM

[16:49] <samebchase-> :-D

[16:50] <samebchase-> I tried increasing the logging on Mongo, so that I can see the query happening, but couldn't get it working... this will take some more investigation

[16:50] <jjmerelo> samebchase did you try to run it with some other library or mongo CLI to rule that out?

[16:50] <samebchase-> yes, Mongo CLI is instant

[16:51] <samebchase-> I chained together five queries, and it takes the same time as a single query

[16:51] <samebchase-> 22 secs

[16:53] *** KindOne joined
[16:53] <timotimo> did you put some output between the lines in the raku script?

[16:53] <timotimo> it's possible, but i wouldn't expect it to be the case, that compile time is high for some reason

[16:53] <timotimo> try raku --stagestats blah.rk

[16:54] <samebchase-> https://github.com/MARTIMM/mongo-perl6-driver/issues/31

[16:54] <samebchase-> you can see the program there. I added a `say` after every line

[16:54] <samebchase-> Everything up to `coll.find` happens instantly

[16:54] <samebchase-> and then it hangs for a long time before printing the output

[16:56] <samebchase-> --stagestats shows that parsing took 1.8s and everything else is negligible

[16:57] <samebchase-> I will laugh hard if I find there is some 20 second config value/timeout that is messing with things.

[17:00] <samebchase-> some misconfiguration on my end

[17:01] <AlexDaniel> samebchase-: I did this more often than I'd like to admit

[17:01] <AlexDaniel> `sleep 60` … wait why is my program hanging? Ctrl-c

[17:02] <samebchase-> 😂

[17:03] <samebchase-> I am trying to build a quick object dumper which I can then pipe to `jq` or `bat` for pretty-printing and/or further processing

[17:05] <samebchase-> writing lots of tiny scripts to optimise my workflow at $DAYJOB

[17:07] *** Altai-man_ joined
[17:09] *** sena_kun left
[17:10] <timotimo> there's a cool module called Data::Dump::Tree, but i'm not sure if there's already a frontend that does filtering and such like you'd expect to be able to do with jq

[17:22] *** softmoth joined
[17:23] *** Xliff joined
[17:23] <Xliff> Hello.

[17:23] <tellable6> 2020-05-02T17:00:21Z #raku <AlexDaniel> Xliff: https://colabti.org/irclogger/irclogger_log/raku?date=2020-05-02#l406

[17:24] <softmoth> ,o/

[17:24] <Xliff> AlexDaniel: Tell him to file an issue. Audio::OggVorbis is on github!

[17:25] <Xliff> .tell AlexDaniel Tell him to file an issue. Audio::OggVorbis is on github!

[17:25] <tellable6> Xliff, I'll pass your message to AlexDaniel

[17:25] <AlexDaniel> .tell tellable6 can you file an issue?

[17:25] <tellable6> AlexDaniel, Thanks for the message

[17:25] * Xliff kicks Alexdaniel with a flipper.

[17:26] <AlexDaniel> mmmm

[17:26] <Xliff> AlexDaniel, I don't even know what you were talking about in a link.

[17:26] <AlexDaniel> anyway: https://github.com/Xliff/p6-audio-oggvorbis/issues/2

[17:26] <Xliff> Oh. :P

[17:26] <AlexDaniel> `zef install Audio::OggVorbis` doesn't work, IIRC

[17:26] <Xliff> So the problem is what? CPAN?

[17:27] <AlexDaniel> it's not on cpan, so no

[17:27] <AlexDaniel> Xliff: maybe https://github.com/ugexe/Perl6-ecosystems ?

[17:27] <AlexDaniel> maybe something is wrong with your META6.json

[17:30] <Xliff> Yeah. Fixed it. Tests passed. Pushed.

[17:31] *** patrickb left
[17:32] <Xliff> So... what's the fastest (or best) way to convert a Buf to a CArray[uint8]?

[17:32] <AlexDaniel> ohh you have from<native> thingies

[17:32] <Xliff> Currently I am using: "CArray[uint8].new( $buf.list )"

[17:32] <Xliff> AlexDaniel: Thise test fine.

[17:32] <Xliff> It was the '#' in front of them that were problematic.

[17:33] <AlexDaniel> Xliff: yeah they're alright, it's just a bit unusual

[17:33] <Xliff> s/Thiese/These/

[17:33] <AlexDaniel> there are like… three modules in total doing this maybe?

[17:33] *** xinming left
[17:33] <AlexDaniel> maybe a bit more

[17:33] <Xliff> Wow.

[17:34] <Skarsnik> maybe there even stuff in NC itself, this module is a nightmare xD

[17:35] *** xinming joined
[17:35] *** Xliff left
[17:35] *** chloekek left
[17:36] <lucs> "Precedence issue with ! and :exists, perhaps you meant :!exists?"

[17:36] <lucs> I did! Raku's error messages are really something! raku++

[18:05] *** andrzejku joined
[18:12] <softmoth> r: say 'aaaa'.comb('aa'); # I expect two non-overlapping matches, but get 3 overlapping matches?

[18:12] <camelia> rakudo-jvm 08b449e1a, rakudo-moar 6a79e18fb: OUTPUT: «(aa aa aa)␤»

[18:12] <softmoth> r: say 'aaaa'.comb(/aa/); # This works as I expect

[18:12] <camelia> rakudo-jvm 08b449e1a, rakudo-moar 6a79e18fb: OUTPUT: «(aa aa)␤»

[18:13] *** brtastic joined
[18:14] <softmoth> Is this intentional (just not documented under Str.comb)? Or am I right to be surprised?

[18:16] *** natrys_ joined
[18:16] *** stoned75 left
[18:17] *** xinming left
[18:18] *** xinming joined
[18:19] *** natrys left
[18:19] <Geth> ¦ doc: 56bd8dda1e | (JJ Merelo)++ | doc/Language/operators.pod6

[18:19] <Geth> ¦ doc: Adds examples of ~ with Blobs, preparing for #2632

[18:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/56bd8dda1e

[18:19] <Geth> ¦ doc: a580e45cac | (JJ Merelo)++ | doc/Language/operators.pod6

[18:19] <Geth> ¦ doc: 1-arity ~ for blobs #2632

[18:19] <Geth> ¦ doc: 

[18:19] <Geth> ¦ doc: Also, same on Junctions...

[18:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a580e45cac

[18:19] <linkable6> Link: https://docs.raku.org/language/operators

[18:19] <linkable6> DOC#2632 [open]: https://github.com/Raku/doc/issues/2632 [Hacktoberfest][RFE][big][docs][good first issue][help wanted][new][⚠ Top Priority ⚠] Checklist for 6.d

[18:28] *** sauvin left
[18:33] *** chloekek joined
[18:36] *** ragekagemage joined
[18:38] *** stoned75 joined
[18:38] *** ctilmes joined
[18:39] <ctilmes> m: use NativeCall; sub foo(size_t $x) { say $x }; foo(27);

[18:39] <camelia> rakudo-moar 6a79e18fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Failed to open file /home/camelia/.raku/precomp/CACHEDIR.TAG: Permission denied␤at <tmp>:1␤Actually thrown at:␤  in any statement_control at /home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/Gra…»

[18:39] <ctilmes> m: use NativeCall; multi foo(size_t $x) { say $x }; foo(27);

[18:39] <camelia> rakudo-moar 6a79e18fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Failed to open file /home/camelia/.raku/precomp/CACHEDIR.TAG: Permission denied␤at <tmp>:1␤Actually thrown at:␤  in any statement_control at /home/camelia/rakudo-m-inst-2/share/perl6/lib/Perl6/Gra…»

[18:40] <ctilmes> When I call a sub with a size_t arg, an Int goes into it fine, but with a multi, it barfs and says they don't match

[18:40] <ctilmes> how come?

[18:43] <[Coke]> (can verify that locally, despite camelia here.)

[18:45] *** andrzejku left
[18:45] <ragekagemage> After compiling and installing the new 2020.05 release of MoarVM and NQP, building Rakudo still fails with the error "Stage start : moar://usr/local/lib/libmoar.so.11.0: undefined symbol 'mp_set_double' ld.so: moar: lazy binding failed!" This is one OpenBSD-current, using libtommath 1.2.0, libuv 1.35, and libatomic_ops 7.6.10

[18:52] *** KindTwo joined
[18:54] *** KindOne left
[18:58] <MasterDuke> what if you don't use the system libtommath?

[18:59] *** wamba joined
[19:00] <MasterDuke> ragekagemage: we're using https://github.com/MoarVM/libtommath/commit/db0d387b808d557bd408a6a253c5bf3a688ef274 on top of libtommath v1.2.0

[19:00] <Skarsnik> NativeCall type are ... weird

[19:02] *** KindOne joined
[19:03] *** KindTwo left
[19:05] *** xinming left
[19:07] *** xinming joined
[19:08] *** sena_kun joined
[19:08] *** wamba left
[19:09] *** Altai-man_ left
[19:18] *** KindOne left
[19:20] *** KindOne joined
[19:20] *** lucasb joined
[19:20] *** andrzejku joined
[19:32] *** sjm_uk left
[19:36] *** natrys_ left
[19:36] *** xinming left
[19:36] *** natrys joined
[19:38] *** xinming joined
[19:40] <ragekagemage> MasterDuke: That was the last thing blocking the build, it's working now! \o/

[19:41] *** pilne joined
[19:43] <MasterDuke> glad to hear it

[19:48] <El_Che> so, happy release day everyone!

[19:48] *** Grrrr left
[19:51] <ragekagemage> Now if only I could figure out how to build it without the --no-jit flag on MoarVM, when I remove it the build for NQP instantly crashes. All my code is running fast enough without it, that's a problem for another day.

[19:55] <MasterDuke> ragekagemage: what hardware are you on?

[19:55] <El_Che> This may be interesting to some (lizmat? jnthn?): https://github.com/rakudo/rakudo/issues/3666#issuecomment-624270590 <-- speed regression of new release

[19:57] <El_Che> (I pointed him here, it looks he has his own speed stats)

[19:59] <ragekagemage> MasterDuke: I'm on an AMD 3900X overclocked to 4.125ghz with 16gb of ram. I'm running OpenBSD-current

[20:01] <MasterDuke> probably something with openbsd then, several devs have ryzens and don't have problems. does openbsd disallow self-modifying processes?

[20:04] *** wtwt5237 joined
[20:05] <MasterDuke> El_Che: hm, i can't repro. for me 2020.02 takes 8s and 2020.05 takes 6.1s

[20:05] <wtwt5237> hi, fellow raku-ers, I noticed the newest version of rakudo (2020.05) is slower than 2020.02: https://github.com/wtwt5237/raku-for-bioinformatics. Do you have any insight into this?

[20:05] <ragekagemage> They have W^X as a security feature, any jit needs extra function calls to mark the memory regions as executeable and unwriteable. I've never had to mess with it but I know it's something that a lot of ports need to have patched before they can run. You can mark a partition as wxallowed to allow binaries to not be held to that requirement. I just haven't had time to mess with it

[20:06] <MasterDuke> wtwt5237: i just mentioned this to El_Che, for me 2020.02 takes 8s and 2020.05 takes 6.1s

[20:06] <wtwt5237> interesting. so it is different for different tasks

[20:06] <MasterDuke> ragekagemage: i think there might be an open issue in moarvm for that problem

[20:08] <MasterDuke> wtwt5237: you haven't changed OS or hardware between runs?

[20:08] <wtwt5237> no, i don't think so. but I am running on university server. there could be changes behind the scenes

[20:10] <MasterDuke> that's a really dramatic change you're seeing. how do you install raku?

[20:12] <timotimo> hi tao, we just chatted on the github issue tracker

[20:14] <Doc_Holliwood> the heck you mean private multimethods are not supported? i demand to talk to a manager!

[20:16] *** rindolf left
[20:22] *** jjmerelo left
[20:22] *** melezhik joined
[20:22] <tbrowder> El_Che: new rakudo-pkg worked fine on the upgrade on my Deb Buster box--thanks! 

[20:23] <melezhik> Xliff: FYI -  I can see Audio::OggVorbis is successfully installed through rakudist  - http://repo.westus.cloudapp.azure.com/sparky/report/debian/284

[20:23] <tellable6> melezhik, I'll pass your message to Xliff

[20:27] <wtwt5237> MasterDuke, I really just installed it in the standard way

[20:27] <wtwt5237> except that I found the nqp_configure module is missing, and manually downloaded it and put it into the install package

[20:28] <wtwt5237> timotimo, hello again!

[20:28] <timotimo> o/

[20:28] *** stoned75 left
[20:29] <timotimo> can you retry with the rakudo-2020.05.tar.gz? it should at the very least not complain about the nqp_configure submodule

[20:34] <MasterDuke> wtwt5237: or maybe you accidentally ran against test3.sam?

[20:34] <wtwt5237> no. it is test2.sam. I double checked

[20:37] <timotimo> which benchmark are we talking about and how do i properly run it?

[20:37] <wtwt5237> please check: https://github.com/wtwt5237/raku-for-bioinformatics/tree/master/Come%20on%2C%20sister

[20:37] <wtwt5237> test2.sam

[20:38] <El_Che> tbrowder: glad to hear 

[20:38] <El_Che> wtwt5237: I am the other person on the ticket thread

[20:39] <wtwt5237> hello!

[20:39] <timotimo> benchmark1.p6 or benchmark2.p6?

[20:40] <wtwt5237> benchmark2.p6

[20:40] <timotimo> OK

[20:40] <timotimo> that takes 15 seconds on my machine, huh?

[20:41] <wtwt5237> speed is very similar. 8s

[20:41] <MasterDuke> same user time?

[20:42] <wtwt5237> real    0m8.556s

[20:42] *** stoned75 joined
[20:43] <timotimo> Total Time:          19.69 seconds

[20:43] <timotimo> Total CPU Usage:     38.49 seconds

[20:44] <MasterDuke> i get wildly varying times in runs immediately after each other. 7.5s, 10.0s, 5.8s

[20:45] <timotimo> OK

[20:45] <timotimo> the user time is much more stable

[20:46] <timotimo> the cpu% value fluctuates noticeably

[20:46] <timotimo> so mostly a "system is scheduling stuff differently" issue perhaps

[20:46] <MasterDuke> yes. 21s, 20s, 23s user

[20:46] <timotimo> about 35 over here :|

[20:47] <MasterDuke> timotimo: but notice the last line in the table? https://github.com/wtwt5237/raku-for-bioinformatics#come-on-sister

[20:47] <MasterDuke> gotta get yourself a ryzen

[20:47] *** stoned75 left
[20:47] <timotimo> wow can the user time there really be accurate? that's wild

[20:48] *** stoned75 joined
[20:48] <timotimo> like, if the real time only went up 2 seconds, the cpu core usage must have increased a few hundred percent?

[20:49] <wtwt5237> I got to leave the conversation now. if you are interested in contacting me for any other details, please email me at [email@hidden.address]
[20:49] *** wtwt5237 left
[20:49] <timotimo> the output of --benchmark=blah.html will be only a little part of everything with a .race.map

[20:50] <timotimo> --profile*

[20:50] *** kst joined
[20:52] <Geth> ¦ doc/hashmap-perl-to-raku: 82c50100bc | (Stoned Elipot)++ | doc/Language/hashmap.pod6

[20:52] <Geth> ¦ doc/hashmap-perl-to-raku: Change .perl to .raku, ref #3309

[20:52] <Geth> ¦ doc/hashmap-perl-to-raku: review: https://github.com/Raku/doc/commit/82c50100bc

[20:52] <Geth> ¦ doc: stoned++ created pull request #3362: Change .perl to .raku, ref #3309

[20:52] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3362

[20:52] <linkable6> DOC#3309 [open]: https://github.com/Raku/doc/issues/3309 [docs][update] Change .perl to .raku in examples

[20:55] *** chloekek left
[20:56] <timotimo> does Digest::SHA1::Native miss a dependency on LibraryMake?

[20:57] *** Redfoxmoon left
[20:59] *** Kaiepi left
[20:59] *** Kaeipi joined
[20:59] *** Kaeipi left
[21:00] *** Kaeipi joined
[21:02] <melezhik> timotimo:  Digest::SHA1::Native succeeds in RakuDist - http://repo.westus.cloudapp.azure.com/sparky/report/debian/286

[21:03] <melezhik> dependency gets installed - Testing [OK] for LibraryMake:ver<1.0.0>:auth<github:retupmoca>

[21:03] *** brtastic left
[21:07] *** Altai-man_ joined
[21:09] *** sena_kun left
[21:14] *** Altai-man_ left
[21:14] *** softmoth_ joined
[21:16] *** softmoth__ joined
[21:17] *** softmoth left
[21:19] *** softmoth_ left
[21:26] <timotimo> outdated stuff in my zef store has apparently caused trouble

[21:27] *** softmoth__ left
[21:27] *** softmoth__ joined
[21:27] <MasterDuke> nuke it from orbit, it's the only way to be sure

[21:27] <timotimo> yup, that's what i did

[21:27] <timotimo> tungsten rod from geostationary orbit

[21:29] <melezhik> ;-)

[21:30] <melezhik> you can always use rakudist to check such a things 

[21:31] <timotimo> i didn't see a search function there, do i just have to scroll through "recent builds"?

[21:32] <melezhik> I'll add a search function soon, so far it's just a `curl -d os=debian   http://repo.westus.cloudapp.azure.com/rakudist/api/run/Digest::SHA1::Native` 

[21:32] <melezhik> it will queue a new build and you'll get results soon

[21:33] <melezhik> I am going to add more convenient web UI soon, so that people could trigger builds from html form, rather then from `curl`

[21:33] *** softmoth joined
[21:34] <melezhik> and yeah - recent builds are 500 last results - so you can search through a browser search

[21:34] <timotimo> OK

[21:35] *** softmoth__ left
[21:36] <timotimo> aaaaaanyway, i'm looking through the profiler results from the bioperl benchmark

[21:36] *** softmoth_ joined
[21:37] <MasterDuke> seeing anything interesting?

[21:38] <timotimo> not so sure

[21:38] *** softmoth left
[21:40] <timotimo> i'll probably toss out the race multitheading for a moment so the profile gets a lot simpler

[21:42] *** softmoth_ left
[21:45] <MasterDuke> timotimo: btw, did you git pull the repo recently? a micro-optimization was just merged ~40min ago

[21:46] <timotimo> i think i got it after that, but let me look again

[21:47] <timotimo> ah, that's a good one

[21:47] <timotimo> goes even faster if you're sure 64bit is enough to hold the sum, the nyou can .sum(:wrap) and it'll use native ints

[21:48] <timotimo> another thing i've done locally is to use comb instead of match :g and use )> <-[I]> instead of <!before I>

[21:49] <timotimo> though i'm not sure if that particular last change makes such a big difference

[21:49] <MasterDuke> i don't know the data well enough to know if :wrap is safe, but i'd forgotten about that, good to get a reminder

[21:57] *** thundergnat joined
[22:00] <Geth> ¦ doc: b2a8ece763 | Coke++ | xt/examples-compilation.t

[22:00] <Geth> ¦ doc: add ref to ticket

[22:00] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/b2a8ece763

[22:01] <thundergnat> Is anyone else having trouble installing Inline::Perl5:ver<0.48> on Raku 2020.05? I'm not having much success with it. Version 0.47 installs fine but .48 keeps complaining about undefined symbols.

[22:02] <thundergnat> Fail log: https://gist.github.com/thundergnat/68ff939274c9a84dbdb22915af6f9171

[22:04] *** andrzejku left
[22:06] <timotimo> the regex matches for the substr lines take about 5 seconds in total

[22:06] <timotimo> out of about 30 seconds profiled run time

[22:07] <timotimo> Match is responsible for a whole lot of allocations (by size * count)

[22:08] <timotimo> 3 million allocations vs Scalar's 5.7 mil, but 442 megs vs 275 megs

[22:10] <MasterDuke> matching seems expensive by any metric you choose

[22:10] <timotimo> yeah

[22:11] <timotimo> tearing the first match (well, subst really) apart into stuff like index and substr and such could be relatively easy, i.e. finding the first non-\d char and seeing if it's an S and then just substr-ing the number out and use that

[22:12] *** Redfoxmoon joined
[22:14] <timotimo> also interesting to see that match and sum take the same amount of time per entry (though match is called twice as often because there's two ~~ in there)

[22:14] <MasterDuke> really? why is sum so expensive?

[22:15] <timotimo> not sure

[22:15] <timotimo> also interesting, the regexes are on line 33 and 31, right?

[22:16] *** KotH left
[22:16] <timotimo> the one on 33 takes 2.183s and the one on 31 takes about 1.421s

[22:17] <MasterDuke> i checked the number of numbers found in the match, 208215 times it was just one, 1491 times it was zero, 189 times it was 3, 84 times it was 2, and 21 times it was 6

[22:18] <MasterDuke> huh. adding the end of line anchor slows it down?

[22:18] <timotimo> how much is in the $!CIGAR field? it uses a $, i think we're not yet good at going to the end and starting backwards

[22:18] <timotimo> it's possible the regex engine is scanning from the beginning every time

[22:18] <timotimo> how often does it match vs not matching?

[22:19] <MasterDuke> what do you mean?

[22:19] <Geth> ¦ doc: 82c50100bc | (Stoned Elipot)++ | doc/Language/hashmap.pod6

[22:19] <Geth> ¦ doc: Change .perl to .raku, ref #3309

[22:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/82c50100bc

[22:19] <Geth> ¦ doc: 9bcce59e58 | (Will Coleda)++ (committed using GitHub Web editor) | doc/Language/hashmap.pod6

[22:19] <Geth> ¦ doc: Merge pull request #3362 from Raku/hashmap-perl-to-raku

[22:19] <Geth> ¦ doc: 

[22:19] <Geth> ¦ doc: Change .perl to .raku, ref #3309

[22:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/9bcce59e58

[22:19] <linkable6> Link: https://docs.raku.org/language/hashmap

[22:19] <linkable6> DOC#3309 [open]: https://github.com/Raku/doc/issues/3309 [docs][update] Change .perl to .raku in examples

[22:19] <MasterDuke> heh, what you if flip the string and the regexes?

[22:20] *** stoned75 left
[22:20] <MasterDuke> oh, don't starts-with and ends-with now take regexes?

[22:20] <timotimo> they do i believe

[22:20] <timotimo> but just a ends-with with the S could be a good start if that has a rejection rate of more than 10%

[22:21] <timotimo> 1078 / 110000

[22:21] <timotimo> that is a very, very high rejection rate

[22:23] <timotimo> hum, but .ends-with("S") doesn't seem to give True, like, ever? what did i do wrong now

[22:23] <timotimo> oh haha

[22:23] <timotimo> removed the S at the end before checking if it exists

[22:23] <Geth> ¦ doc: f39a270390 | sztanyi++ (committed using GitHub Web editor) | doc/Language/numerics.pod6

[22:23] <Geth> ¦ doc: change perl method to raku method

[22:23] <Geth> ¦ doc: 

[22:23] <Geth> ¦ doc: change 1e0.perl to 1e0.raku

[22:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f39a270390

[22:23] <Geth> ¦ doc: 907dab8660 | (Will Coleda)++ (committed using GitHub Web editor) | doc/Language/numerics.pod6

[22:23] <Geth> ¦ doc: Merge pull request #3282 from sztanyi/patch-2

[22:23] <Geth> ¦ doc: 

[22:23] <linkable6> Link: https://docs.raku.org/language/numerics

[22:23] <Geth> ¦ doc: change perl method to raku method

[22:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/907dab8660

[22:24] <timotimo> the rejection rate of "ends with an S?" seems to be 1:1 for the whole regex

[22:24] <timotimo> that's good

[22:25] *** KotH joined
[22:25] <timotimo> it does seem a bit faster to check for an S at the end first

[22:25] <melezhik> thundergnat: Inline::Perl5:ver<0.48> on Raku 2020.05 seems fine on RakuDist - http://repo.westus.cloudapp.azure.com/sparky/report/debian/287

[22:26] <thundergnat> Yep. It does seem that way, but it fails to install for me on two different Linux Mint systems.

[22:27] <melezhik> you can always check by just ` curl -d os=debian -d rakudo_version=40a82d8723470a58d2d0cdde4cb14f8d0e845c91   http://repo.westus.cloudapp.azure.com/rakudist/api/run/Inline::Perl5`

[22:27] <thundergnat> with the same failure mode on each

[22:27] <melezhik> it's possible to run test against ubuntu

[22:28] <thundergnat> And it's very odd because 0.47 installs fine on both systems but 0.48 fails.

[22:29] <timotimo> i did it wrong

[22:29] *** lucasb left
[22:30] <melezhik> thundergnat: I've just run it on ubuntu. let's see - http://repo.westus.cloudapp.azure.com/sparky/builds

[22:30] <timotimo> i had the match line with the .sum in there twice because i unstashed my changes and forgot to delete the original new line

[22:31] *** natrys left
[22:32] <MasterDuke> ha

[22:32] <timotimo> yeah it's faster now in total

[22:32] <timotimo> https://gist.github.com/timo/4fecd3851edca8fb286d9db3cf7c2ef1 my current diff

[22:33] <timotimo> looks like a .contains for "S" can also reject a whole bunch of lines

[22:34] <timotimo> that's worth rather a bit

[22:35] <timotimo> https://cdn.discordapp.com/attachments/633753335119478795/707359842523676742/unknown.png

[22:35] <timotimo> ^- check out the icicle graph

[22:36] <timotimo> TWEAK used to be about 3/4 of the width or something

[22:38] <MasterDuke> nice

[22:45] <timotimo> the $!CIGAR strings are all short-ish, so no need to limit how far into the string to search for the existence of any S

[22:45] <timotimo> BagHash(1(781) 10(11) 11(11) 19(11) 3(107052) 5(990) 6(814) 7(88) 8(187) 9(55))

[22:47] <Geth> ¦ doc: 68237e2e92 | Coke++ | 7 files

[22:47] <Geth> ¦ doc: Use .raku instead of .perl in examples

[22:47] <Geth> ¦ doc: 

[22:47] <Geth> ¦ doc: Part of #3309

[22:47] <Geth> ¦ doc: 

[22:47] <Geth> ¦ doc: Update usage and some output diagnostics which themselves have been updated

[22:47] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/68237e2e92

[22:48] <linkable6> DOC#3309 [open]: https://github.com/Raku/doc/issues/3309 [docs][update] Change .perl to .raku in examples

[22:51] <melezhik> thundergnat: if it helps - Inline::Perl5 succeed for Rakudo version 2020.05, on ubuntu - http://repo.westus.cloudapp.azure.com/sparky/report/ubuntu/289

[22:53] <thundergnat> melezhik: That's encouraging, though it doesn't really help on _my_ system(s). Thanks for checking though.

[22:54] <melezhik> you are welcome 

[22:54] <thundergnat> It isn't the end of the world, I can run .47, it is just a little disconcerting.

[22:56] *** Skarsnik left
[23:02] *** pecastro left
[23:03] *** xinming left
[23:03] *** xinming joined
[23:06] <ctilmes> m: sub foo(int32 $x) { say $x }; foo(27);

[23:06] <camelia> rakudo-moar 6a79e18fb: OUTPUT: «27␤»

[23:06] *** stoned75 joined
[23:06] <ctilmes> m: multi foo(int32 $x) { say $x }; foo(27);

[23:06] <camelia> rakudo-moar 6a79e18fb: OUTPUT: «Cannot resolve caller foo(Int:D); none of these signatures match:␤    (int32 $x)␤  in block <unit> at <tmp> line 1␤␤»

[23:06] *** aborazmeh joined
[23:06] *** aborazmeh left
[23:06] *** aborazmeh joined
[23:11] *** stoned75_ joined
[23:12] *** stoned75 left
[23:16] *** Black_Ribbon joined
[23:17] *** Xliff joined
[23:18] <Xliff> Hi! 

[23:18] <tellable6> 2020-05-05T20:23:40Z #raku <melezhik> Xliff: FYI -  I can see Audio::OggVorbis is successfully installed through rakudist  - http://repo.westus.cloudapp.azure.com/sparky/report/debian/284

[23:18] <Xliff> Has anyone thought about my question from yesterday?

[23:18] <Xliff> https://colabti.org/irclogger/irclogger_log/raku?date=2020-05-05#l432

[23:26] *** lembark joined
[23:28] <lembark> Q: Is there a simple way to extract a list of installed modules? I can see where CompUnit::Repository::FileSystem can provide data about known modules, but not any way to extract the list of modules that are installed locally.

[23:28] <lembark> Thanks.

[23:28] <tellable6> 2020-05-02T06:48:28Z #raku <AlexDaniel> lembark: when was the last time FindBin::libs worked?

[23:28] <tellable6> 2020-05-02T06:52:33Z #raku <AlexDaniel> lembark: also, it does seem to install just fine: https://gist.github.com/AlexDaniel/acf836bbee9c4bfe136b9c5f341d63ba

[23:28] <tellable6> 2020-05-02T06:52:55Z #raku <AlexDaniel> lembark: that's on dispatcher-revert branch but I think it's the same on master

[23:28] <lembark> Five minutes ago using bleed here.

[23:29] *** squashable6 left
[23:30] <lembark> I did a pull in ./raku, installed it, ran 'zef install .' for FindBin, FileSystem::Parent, and FindBin::libs. They all passed the tests and installed.

[23:30] *** squashable6 joined
[23:30] *** squashable6 left
[23:31] *** squashable6 joined
[23:33] <lembark> I was told that there'd been a problem... if nobody has seen one so much the better.

[23:41] *** softmoth joined
[23:43] *** ragekagemage left
[23:44] <timotimo> lembark: zef does have a --list with --installed or something similar

[23:56] <lembark> Thank you.

[23:56] *** lembark left
