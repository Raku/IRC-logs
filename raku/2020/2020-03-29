[00:01] *** Tirifto left
[00:09] <timotimo> i think that'll enforce parsing as an array of words (because that's what angle brackets do) followed by stringification by joining on a single space by from-json

[00:10] <timotimo> so not very fast :)

[00:18] *** lucasb left
[00:23] *** sarna left
[00:23] *** sarna joined
[00:27] *** xinming_ left
[00:29] *** xinming_ joined
[00:40] <rypervenche> Oh, that was for my example :/ In my actual script, I've got a grammar that captures the entire json.

[00:44] <Geth> ¬¶ problem-solving: vrurg assigned to jnthn Issue Provide better interface for dispatchers https://github.com/Raku/problem-solving/issues/170

[00:51] *** patrickz joined
[00:52] <timotimo> oh, if you're already using a grammar to capture JSON, maybe try JSON::Tiny::Grammar as a base

[00:55] *** patrickb left
[00:59] *** Aukai joined
[01:05] <rypervenche> timotimo: I'll give that a shot, thanks.

[01:06] *** patrickz left
[01:10] *** rypervenche joined
[01:33] *** Doc_Holliwould left
[01:49] *** sftp joined
[01:52] *** aborazmeh joined
[01:53] *** aborazmeh left
[01:53] *** aborazmeh joined
[02:07] *** aborazmeh left
[02:23] <vrurg> m: say "10.".Rat;

[02:23] <camelia> rakudo-moar 156356eae: OUTPUT: ¬´Cannot convert string to number: radix point must be followed by one or more valid digits in '0310.‚èè' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:24] <vrurg> This doesn't feel right...

[02:24] *** helit joined
[02:28] <Geth> ¬¶ doc: d9671fb439 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/classtut.pod6

[02:28] <Geth> ¬¶ doc: Use preferred syntax

[02:28] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/d9671fb439

[02:28] <linkable6> Link: https://docs.raku.org/language/classtut

[02:38] *** upupbb-user3 left
[03:03] *** upupbb-user3 joined
[03:10] *** upupbb-user3 left
[03:45] *** oodani left
[03:45] *** xinming_ left
[03:46] *** oodani joined
[03:46] *** Sgeo joined
[03:47] *** xinming_ joined
[03:49] *** gdonald left
[03:51] *** gdonald joined
[04:48] *** Actualeyes left
[04:48] *** Actualeyes joined
[04:48] *** wamba joined
[04:56] *** orinthe joined
[05:14] *** upupbb-user3 joined
[05:29] *** rindolf joined
[05:30] *** xinming_ left
[05:33] *** xinming_ joined
[06:00] *** upupbb-user3 left
[06:04] *** xinming_ left
[06:07] *** xinming_ joined
[06:18] <Geth> ¬¶ doc: c5b97ad97d | Tinmarino++ | doc/Language/regexes.pod6

[06:18] <Geth> ¬¶ doc: Feature: Index regex interpolation tokens

[06:18] <Geth> ¬¶ doc: 

[06:18] <Geth> ¬¶ doc: Issue: #3220

[06:18] <Geth> ¬¶ doc: 

[06:18] <Geth> ¬¶ doc: ```raku

[06:18] <Geth> ¬¶ doc: $variable

[06:18] <Geth> ¬¶ doc: $(code)

[06:18] <linkable6> Link: https://docs.raku.org/language/regexes

[06:18] <Geth> ¬¶ doc: <‚Ä¶commit message has 9 more lines‚Ä¶>

[06:18] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/c5b97ad97d

[06:18] <linkable6> DOC#3220 [open]: https://github.com/Raku/doc/issues/3220 [docs] Index `<{ ... }>` and other missing regex interpolatives

[06:18] <Geth> ¬¶ doc: ebbdc62a84 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[06:18] <Geth> ¬¶ doc: Merge pull request #3295 from tinmarino/merge_index_regex

[06:19] <Geth> ¬¶ doc: 

[06:19] <Geth> ¬¶ doc: Feature: Index regex interpolation tokens

[06:19] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/ebbdc62a84

[06:22] *** xinming_ left
[06:24] *** xinming_ joined
[06:28] *** pilne left
[06:29] <Geth> ¬¶ doc: f5499d435e | (JJ Merelo)++ | doc/Language/grammars.pod6

[06:29] <Geth> ¬¶ doc: Adds semicolon, closes #3296

[06:29] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/f5499d435e

[06:29] <linkable6> Link: https://docs.raku.org/language/grammars

[06:29] <linkable6> DOC#3296 [closed]: https://github.com/Raku/doc/issues/3296 [RFE] Missing a semicolon in the statement

[07:01] *** Doc_Holliwould joined
[07:22] *** sjm_uk joined
[08:05] *** stoned75 joined
[08:12] *** xinming_ left
[08:13] *** xinming_ joined
[08:27] <samcv> Does anyone know if I can use Grammar::Profiler::Simple to profile standard regex's? I tried but maybe I'm using it incorrectly. The documentation only mentions grammars

[08:40] <MasterDuke> samcv: no idea re your question, but i have one of my own. is there a quick way to tell if a string has any utf8 (i.e., non iso-8859-1) codepoints?

[08:43] *** molaf joined
[08:53] <lizmat>   /^ <:Script<Latin>>* $/

[08:53] *** hungrydonkey joined
[08:55] <lizmat> not "abcd".ords.first(* > 255)

[08:56] <MasterDuke> hm. what about in pure nqp?

[08:57] <MasterDuke> i.e., is this best https://github.com/Raku/nqp/blob/master/src/vm/moar/QAST/QASTCompilerMAST.nqp#L2299-L2305 ?

[09:03] <lizmat> that looks ok to me...  and I forgot about CR

[09:04] <lizmat> I would probably check for $g== 0x0d first, then >= xff then < 0

[09:04] <lizmat> but that's really micro  :-)

[09:05] <lizmat> m: use nqp; my str $s = "abcd"; dd nqp::getcp_s($s,1)

[09:05] <camelia> rakudo-moar 156356eae: OUTPUT: ¬´98‚ê§¬ª

[09:05] <lizmat> he

[09:05] <lizmat> I don't think nqp::getcp is documented

[09:06] <lizmat> MasterDuke: in these types of loops, I always start at $i = -1 and use ++$i

[09:08] <lizmat> also: you could do all of the checks inside the condition, make the body nqp::null, and check $i < $chars in the end as the flag

[09:08] <lizmat> you wouldn't need the $utf8 variable then

[09:08] <stoned75> hum... dumb question may be but what's special about CR here ?

[09:08] <lizmat> it's a synthetic codepoint

[09:09] <lizmat> m: dd "\r\n".chars

[09:09] <camelia> rakudo-moar 156356eae: OUTPUT: ¬´1‚ê§¬ª

[09:09] <stoned75> oh ok

[09:10] <stoned75> thanks

[09:10] *** upupbb-user3 joined
[09:11] <samcv> MasterDuke, let me check

[09:13] *** pecastro joined
[09:14] *** natrys joined
[09:19] <samcv> well i just found a bug in the REPL. so that's neat. If you put invalid utf-8 into the repl it will enter an infinite loop

[09:21] <samcv> MasterDuke, also. yes about the \r\n you should cache "\r\n"'s grapheme value and allow that as utf8. though tbh i don't have full background on WHY we care if $utf8 is set or not. like. are we trying to actually detect things that are ascii?

[09:22] <samcv> er. things that fit in 7-bit strings or whatever

[09:22] <MasterDuke> well, https://github.com/Raku/nqp/blob/master/src/vm/moar/QAST/QASTCompilerMAST.nqp#L2307

[09:24] *** leont joined
[09:25] <samcv> so. are we really trying to find out if the result will have any graphemes containing more than 1 codepoint?

[09:27] <MasterDuke> i guess, but nine++ would know for sure

[09:27] *** sarna left
[09:27] <samcv> i guess I still am confused about where the strings come from. And what format they are actually in. Is it actually latin-1, or are we just using latin-1 because it supports 8 bits?

[09:28] <MasterDuke> i think the string come when compiling rakudo, e.g., method names

[09:28] <MasterDuke> afk for a bit, will backlog

[09:30] *** chloekek joined
[09:32] <samcv> if i always try to encode as utf8 i get this error when trying to compile nqp: "Could not resolve lexical $√Ç¬¢" which is a bit weird.

[09:34] <samcv> '$√Ç¬¢'.encode('latin-1').decode => '$¬¢'.

[09:40] *** kylese joined
[09:57] *** Grauwolf left
[10:13] <samcv> MasterDuke, i have fixed your problem https://github.com/Raku/nqp/pull/607 this PR is mostly a proof of concept, not in a fully finished form

[10:13] <samcv> but it fixes the bug (feature?) of our mast encoded strings

[10:15] * lizmat has commented on that PR

[10:17] <timotimo> samcv: do you know about the #?if stage thingie i put in at some point?

[10:18] <samcv> timotimo, no i don't

[10:18] <timotimo> that could remove the need for the stage0 rebuilds

[10:18] <timotimo> it's in gen-cat

[10:19] <samcv> yeah. i probably did more rebuilds than i needed. but it's a quick proof of concept

[10:19] <samcv> as well so that only one thing happens between each commit as the other, so each commit can generate the one before it

[10:19] <timotimo> ah, i put that in for confprog support, since it added an op confprogconfigure to HLL::Compiler or something

[10:19] <samcv> you could easily do it all in one step

[10:21] <samcv> there's other places we do latin-1 encoding. but i'm guessing nowhere else is handling $¬¢ lexical. A full fix would probably remove any use of latin1

[10:24] *** Grauwolf joined
[10:24] *** Grauwolf left
[10:24] *** Grauwolf joined
[10:51] *** Altai-man_ joined
[11:00] *** mowcat joined
[11:04] <chloekek> What is an example where you have to use $¬¢ and cannot use $/ instead?

[11:12] *** stoned75 left
[11:12] *** stoned75 joined
[11:19] <lizmat> chloekek: I believe you need this when you add methods to grammars, but I have never done so myself 

[11:22] *** Doc_Holliwould left
[11:29] <timotimo> did this change when cursor and match were made the same thing?

[11:30] <Kaiepi> releasable6, status

[11:30] <releasable6> Kaiepi, Next release will happen when it's ready. 3 blockers. 166 out of 256 commits logged (‚ö† 3 warnings)

[11:30] <releasable6> Kaiepi, Details: https://gist.github.com/cedf201085e1d34770529e31e2bf39b3

[11:31] <Kaiepi> i have some big stuff for the ecosystem once this next release happens :)

[11:34] <lizmat> Kaiepi: unless we can fix the JIT issues and the performance loss real soon, I don't think we'll see a 2020.03 release  :-(

[11:35] <Kaiepi> ah man :(

[11:37] <lizmat> sorry, I guess I shouldn't have merged the nextdispatcher stuff  :-(

[11:40] <Kaiepi> the updates to Trait::Traced depend on that, but i think my new module just depends on a fix to `is built` i made

[11:40] <Kaiepi> if the release doesn't happen i think the new module is still releasable with some tweaks

[11:46] <lizmat> Kaiepi: unless you have some dependency on MoarVM version in your code, you would still need to make those adjustments anyway?

[11:47] <Kaiepi> i guess it'd make more sense not to have the v2020.03 requirement if that's the only reason it has it

[12:02] *** mowcat left
[12:07] *** Doc_Holliwould joined
[12:07] <lizmat> m: dd Date.new(2020,3,24) cmp Date.new(2020.3,25)   # this feels like an omission

[12:07] <camelia> rakudo-moar a10140f18: OUTPUT: ¬´Cannot resolve caller new(Date:U: Rat:D, Int:D); none of these signatures match:‚ê§    (Date: Int:D(Any):D $year, Int:D(Any):D $month, Int:D(Any):D $day, :&formatter, *%_ --> Date:D)‚ê§    (Date: Int:D(Any):D :$year!, Int:D(Any):D :$month = 1, Int:D(A‚Ä¶¬ª

[12:08] <lizmat> m: dd (Date.new(2020,3,24),Date.new(2020.3,25)).sort

[12:08] <camelia> rakudo-moar a10140f18: OUTPUT: ¬´Cannot resolve caller new(Date:U: Rat:D, Int:D); none of these signatures match:‚ê§    (Date: Int:D(Any):D $year, Int:D(Any):D $month, Int:D(Any):D $day, :&formatter, *%_ --> Date:D)‚ê§    (Date: Int:D(Any):D :$year!, Int:D(Any):D :$month = 1, Int:D(A‚Ä¶¬ª

[12:10] <MasterDuke> hm. don't think i would ever pass 2020.3 to a date function. maybe "2020.3", but even that is unlikely

[12:10] <lizmat> yeah... :-(

[12:10] <lizmat> argh   :-)

[12:11] <lizmat> I was referring to the omission of Date cmp Date

[12:11] <lizmat> but it isn't omitted at all

[12:12] <lizmat> note to self: read the error!

[12:12] <MasterDuke> oh, ha

[12:13] *** aborazmeh joined
[12:13] *** aborazmeh left
[12:13] *** aborazmeh joined
[12:16] <Geth> ¬¶ doc: 8d5add817b | Tinmarino++ | doc/Type/Metamodel/Mixins.pod6

[12:16] <Geth> ¬¶ doc: Fix URL mixin with absolute path

[12:16] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/8d5add817b

[12:16] <Geth> ¬¶ doc: da7fa89d5e | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Metamodel/Mixins.pod6

[12:16] <Geth> ¬¶ doc: Merge pull request #3291 from tinmarino/merge_mixins

[12:16] <Geth> ¬¶ doc: 

[12:16] <Geth> ¬¶ doc: Fix URL mixin with absolute path

[12:16] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/da7fa89d5e

[12:16] <linkable6> Link: https://docs.raku.org/type/Metamodel::Mixins

[12:25] *** hungrydonkey left
[12:26] *** kylese left
[12:29] *** sena_kun joined
[12:30] *** aborazmeh left
[12:30] *** Altai-man_ left
[12:31] *** hungrydonkey joined
[12:45] <cpan-raku> New module released to CPAN! Data::Record (0.0.1) by 03KAIEPI

[12:45] *** kylese joined
[12:46] <Kaiepi> ^ big if you like strictly typed code or have data sanitization needs!

[12:56] *** hungrydonkey left
[13:16] *** upupbb-user3 left
[13:36] *** molaf left
[13:58] *** kensanata joined
[14:05] *** lucasb joined
[14:16] <sena_kun> NativeCall question: say I have a CStruct which doesn't have a field in one impl and has one in another, so in `is repr('CSTruct')` I have `has int32 $.foo` I am getting either library provided value or garbage. Doing `has int32 $.foo = -1` isn't helping, I think, because that's not how objects are initialized here.

[14:17] <sena_kun> Any bells?

[14:18] <timotimo> don't really understand the question, but would writing your own accessor methods help here?

[14:19] <sena_kun> timotimo, can I have them in CStruct repr?

[14:19] <timotimo> yep

[14:19] <sena_kun> another question is how do I differentiate if it was a real value provided by the library or garbage.

[14:19] <timotimo> i believe every repr allows methods, because the metaobject is responsible for them

[14:19] <sena_kun> timotimo, can giving a context help with understanding the question? :)

[14:19] <timotimo> well, yeah, how *do* you know what it is?

[14:20] <timotimo> whether it's garbage or not

[14:21] <sena_kun> The problem is that in openssl implementation, ssl_method_st is defined this way: https://docs.huihoo.com/doxygen/openssl/1.0.1c/include_2openssl_2ssl_8h_source.html#l00410

[14:21] <timotimo> i don't know what "in one impl" vs "another impl" means %)

[14:21] <sena_kun> and in libressl it is this - https://github.com/libressl-portable/openbsd/blob/master/src/lib/libssl/ssl.h#L403

[14:21] <sena_kun> so totally different structs. :(

[14:21] <sena_kun> and the second one doesn't provide `version`

[14:21] <timotimo> oh

[14:22] <sena_kun> I also see no calls to check what implementation that is, since it is designed to be a "drop in replacement" (oh yeah).

[14:23] <timotimo> there's a vastly different amount of functions, even. or are you supposed to go through the internal pointer?

[14:24] <sena_kun> timotimo, I am not sure I want to implement them. There are tests which test this particular `version` attribute and on libressl they fail. But if I --force them, the module just works fine.

[14:24] <timotimo> how do you get the ssl_method_st struct in libressl in the first place?

[14:24] <sena_kun> it is provided by its parent struct, ssl_ctx_st, I think

[14:25] <Geth> ¬¶ doc/any-grep-undef-wording: b6e2cc3d53 | (Stoned Elipot)++ | doc/Type/Any.pod6

[14:25] <Geth> ¬¶ doc/any-grep-undef-wording: Imporove wording

[14:25] <Geth> ¬¶ doc/any-grep-undef-wording: review: https://github.com/Raku/doc/commit/b6e2cc3d53

[14:25] <sena_kun> or, hmm, not really, it isn't

[14:25] <timotimo> it seems to give the internal_st

[14:26] <timotimo> but that's kind of not declared in that header

[14:26] <timotimo> so probably not meant to be used by end users

[14:26] <sena_kun> Probably that's why libressl folks just removed it.

[14:27] <timotimo> what's the ssl/foo.h stuff that gets included around line 900 or so?

[14:27] <timotimo> from openssl i mean

[14:27] <timotimo> maybe you do get the same struct after all?

[14:28] <timotimo> anyway, i need to go rest my eyes a bit

[14:28] *** Altai-man_ joined
[14:30] <Geth> ¬¶ doc/improve-wording: 03e41c23dd | (Stoned Elipot)++ | doc/Type/Any.pod6

[14:30] <Geth> ¬¶ doc/improve-wording: Improve wording

[14:30] <Geth> ¬¶ doc/improve-wording: review: https://github.com/Raku/doc/commit/03e41c23dd

[14:30] <Geth> ¬¶ doc: stoned++ created pull request #3297: Improve wording

[14:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3297

[14:31] *** sena_kun left
[14:43] *** xelxebar left
[14:50] *** pecastro left
[14:53] <Altai-man_> anyone who have some free time and has ubuntu (or any other distro with openssl), macos or windows, can take a look at https://github.com/sergot/openssl/pull/78 ? :)

[15:09] *** synthmeat left
[15:09] <Geth> ¬¶ doc: uzluisf++ created pull request #3298: Perl 6 extensions -> Raku extensions

[15:09] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3298

[15:12] *** pilne joined
[15:15] *** Manifest0 joined
[15:19] *** molaf joined
[15:23] *** pecastro joined
[15:31] *** sjm_uk left
[15:32] *** synthmeat joined
[15:32] *** stoned75 left
[15:42] *** stoned75 joined
[15:47] *** chloekek left
[15:49] *** leah2 joined
[15:52] <Geth> ¬¶ doc: 03e41c23dd | (Stoned Elipot)++ | doc/Type/Any.pod6

[15:52] <Geth> ¬¶ doc: Improve wording

[15:52] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/03e41c23dd

[15:52] <Geth> ¬¶ doc: a3f66fb721 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Any.pod6

[15:52] <Geth> ¬¶ doc: Merge pull request #3297 from Raku/improve-wording

[15:52] <Geth> ¬¶ doc: 

[15:52] <Geth> ¬¶ doc: Improve wording

[15:52] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a3f66fb721

[15:52] <linkable6> Link: https://docs.raku.org/type/Any

[15:54] <Geth> ¬¶ doc: a20128a975 | (Luis F. Uceta)++ | doc/Language/modules.pod6

[15:54] <Geth> ¬¶ doc: Perl 6 extensions -> Raku extensions

[15:54] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a20128a975

[15:54] <Geth> ¬¶ doc: a1de178828 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[15:54] <Geth> ¬¶ doc: Merge pull request #3298 from uzluisf/master

[15:54] <Geth> ¬¶ doc: 

[15:54] <Geth> ¬¶ doc: Perl 6 extensions -> Raku extensions

[15:54] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a1de178828

[15:55] <linkable6> Link: https://docs.raku.org/language/modules

[16:09] *** Black_Ribbon joined
[16:15] *** thundergnat joined
[16:16] *** cognominal joined
[16:16] <thundergnat> Any regex experts about? or someone willing to offer an opinion?

[16:16] <thundergnat> m: https://gist.github.com/thundergnat/8c2135bd62c7785f9fcd00ce58229d3f

[16:16] <camelia> rakudo-moar a10140f18: OUTPUT: ¬´What's so Tom? That's so Tom. 'Tis tomish‚ê§‚ê§‚ê§XXXXXX so Tom? XXXXXX so Tom. 'Tis XXXXXX‚ê§What's so XXX? XXXX's so XXX. XXXX tomish‚ê§XXXXXX so XXX? XXXX's so XXX. XXXX XXXXXX‚ê§XXXXXX so XXX? XXXX's so XXX. XXXX XXXXXX‚ê§¬ª

[16:17] <thundergnat> I can't understand why the 4th word "That's" is being captured differently in the different circumstances

[16:18] <thundergnat> Sometimes it captures the trailing 's, other times it doesn't

[16:19] <thundergnat> It seems like a (pretty obscure) bug to me, but I'd like to get a second opinion before reporting it as such

[16:29] *** sena_kun joined
[16:29] *** kensanata left
[16:31] *** Altai-man_ left
[16:31] *** sena_kun left
[16:34] *** veesh left
[16:34] *** veesh joined
[16:42] <thundergnat> Hmm. Ok, after explaining the problem to my Camelia plushie, it turns out that I am just very confused. No bug.

[16:49] <Altreus> Is there a note without nl?

[16:49] <Altreus> a print but defaults to $*ERR

[16:52] *** chloekek joined
[16:53] <chloekek> Programming in Raku again, what a joy. :)

[16:54] *** sena_kun joined
[16:54] <chloekek> Using the latest Rakudo.

[16:57] <thundergnat> m: sub noted ($text) { $*ERR.print($text) }; .&noted for ^5; # <-- Altreus

[16:57] <camelia> rakudo-moar a10140f18: OUTPUT: ¬´01234¬ª

[17:01] <Altreus> Ya I meant existing :)

[17:02] <Altreus> Seems like there's an incomplete coverage

[17:02] <Altreus> I guess in fact there's only note for $*ERR

[17:02] <Altreus> The rest are just shortcuts to $*OUT.x

[17:03] <chloekek> timotimo: do you recall when you added JSON::Fast to CPAN?

[17:03] <chloekek> Has it always been on there?

[17:03] *** rbt left
[17:04] <chloekek> For some reason I was getting it from GitHub.

[17:04] <chloekek> Oh I know why, nevermind.

[17:04] *** rbt joined
[17:04] <thundergnat> note is only a shortcut to to $*ERR because that is the way it is written. It's the whole point really. I guess there just hasn't much demand for a no new-line note.

[17:04] <thundergnat> Especially since it is so simple to code it up in the rare event you may need it.

[17:04] <chloekek> p6: my $*OUT := $*ERR; .print for ^5

[17:04] <camelia> rakudo-moar a10140f18: OUTPUT: ¬´01234¬ª

[17:05] <Altreus> :x

[17:05] <Altreus> Honestly it's just a stand-in for a proper log object so I'm not too concerned :)

[17:05] <lizmat> Altreus: $*ERR.print

[17:07] <Altreus> lizmat: si I am doing this ^_^

[17:07] <chloekek> Just define ‚Äúlog object‚Äù as any object that has a method called print. :+1:

[17:08] <chloekek> p6: enum Level <Info Warning Error>; $*ERR.print(Info, ‚ÄòReticulating splines‚Äô);

[17:08] <camelia> rakudo-moar a10140f18: OUTPUT: ¬´InfoReticulating splines¬ª

[17:08] <chloekek> The default is kinda ugly but it does the job. :P

[17:10] <Altreus> Well I figure I can put it in a special place

[17:24] *** Actualeyes left
[17:35] *** mowcat joined
[17:36] *** lichtkind joined
[17:38] *** xinming_ left
[17:40] *** xinming_ joined
[17:44] *** sjm_uk joined
[17:53] *** sauvin left
[17:57] *** abraxxa left
[18:01] *** Exodist joined
[18:05] *** thundergnat left
[18:13] *** Black_Ribbon left
[18:15] *** sauvin joined
[18:28] *** Altai-man_ joined
[18:31] *** sena_kun left
[18:36] *** sjm_uk left
[18:51] *** kylese left
[19:03] *** MasterDuke left
[19:13] *** MasterDuke joined
[19:19] *** chloekek left
[19:33] *** kensanata joined
[19:49] *** mowcat left
[19:50] <Altai-man_> Anyone with OSX or Windows to try out https://github.com/sergot/openssl/pull/78 around? :)

[19:54] *** zxcvz left
[20:00] <Altreus> If I call done, does it stop execution of the current handler (like a return) or just turn off the supply?

[20:04] <Altai-man_> m: my $s = supply { say 1; done; say 2; }; react { whenever $s {} }

[20:04] <camelia> rakudo-moar 2f8538ed0: OUTPUT: ¬´1‚ê§¬ª

[20:04] <Altai-man_> m: my $s = supply { say 1; done; start { say 2 }; }; react { whenever $s {} }; sleep 2;

[20:04] <camelia> rakudo-moar 2f8538ed0: OUTPUT: ¬´1‚ê§¬ª

[20:05] <Altai-man_> Altreus, ^

[20:05] <Altreus> hmm

[20:06] <Altreus> m: my $s = Supply.interval(1); react whenever $s -> $v { say $v; if $v == 3 { $s.done }; say $v }; sleep 4;

[20:06] <camelia> rakudo-moar 2f8538ed0: OUTPUT: ¬´0‚ê§A react block:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died because of the exception:‚ê§    No such method 'done' for invocant of type 'Supply'. Did you mean any of these?‚ê§        clone‚ê§        do‚ê§        does‚ê§        none‚ê§‚ê§      in b‚Ä¶¬ª

[20:06] <Altreus> m: my $s = Supply.interval(1); react whenever $s -> $v { say $v; if $v == 3 { done }; say $v }; sleep 4;

[20:06] <camelia> rakudo-moar 2f8538ed0: OUTPUT: ¬´0‚ê§0‚ê§1‚ê§1‚ê§2‚ê§2‚ê§3‚ê§¬ª

[20:07] <Altreus> I guess that's my problem

[20:07] <Altreus> hrm

[20:07] <Altreus> I'm in an async tangle

[20:11] <jnthn> Altreus: `done` finishes the supply or react block as a whole

[20:11] <tellable6> 2020-03-29T19:38:24Z #moarvm <nwc10> jnthn there is also a Malformed DU chain in t/spec/S32-exceptions/misc2.rakdo.moar -- it's Spesh of 'EVAL' (cuid: 12669, file: SETTING::src/core.c/ForeignCode.pm6:27)

[20:11] <jnthn> Altreus: Use `last` if you just want to unsubscribe from one thing

[20:16] *** devmikey joined
[20:18] <Altreus> I want to stop the supply but continue processing, but that smells like my design is wrong in the first place

[20:19] <Altreus> my brain is a bit full for today

[20:22] <Altreus> I can postpone the done I think, but I still feel like I've done it wrong

[20:25] <jnthn> You want to turn off the timer, but after scheduling another piece of work that runs within the supply block?

[20:26] <jnthn> whenver Supply.interval(1) { if should-stop() { whenever start the-other-processing() -> $result { ... }; last; }

[20:29] *** sena_kun joined
[20:29] <Altreus> Yes, except it's recursive :)

[20:29] <Altreus> I'll show you

[20:30] <Altreus> https://github.com/shuppet/p6-api-discord/blob/bug/35-reconnect-issue/lib/API/Discord/Connection.pm6#L183-L189

[20:30] *** Altai-man_ left
[20:31] <Altreus> This bit of code handles when we didn't get an ACK since the last iteration

[20:31] <Altreus> What it _should_ do is disconnect and reconnect - but "connect" involves setting up this heartbeat

[20:31] <Altreus> So I need to kill the current heartbeat, then reconnect

[20:31] <Altreus> I dunno if that's a problem but it  feels like a problem :)

[20:32] <Altreus> Also super hard to test so I want to get as much right as possible first go

[20:34] <jnthn> If you reconnect, where does the new heartbeat supply come from?

[20:34] <Altreus> line 181 creates one indiscriminately

[20:34] <Altreus> I dunno what that will do with the previous

[20:35] <Altreus> Also, I'm not sure whether the definedness of this supply is a good indication of stuff, so I'm not entirely sure I should be saving it into a private property at all

[20:35] <Altreus> e..g

[20:35] <Altreus> https://github.com/shuppet/p6-api-discord/blob/bug/35-reconnect-issue/lib/API/Discord/Connection.pm6#L161-L163

[20:36] <Altreus> This uses the existence of the heartbeat to skip making a new one but that might be the wrong thing to do

[20:37] <Altreus> In fact, it only skips it because it would be doing it twice if it didn't... I really don't think I should worry about a second HELLO out of nowhere

[20:37] <jnthn> In general, things that need recursion in a supply context are done by 1) having a sub inside of the supply or react block, 2) having a whenever inside of that sub, 3) calling it initially for the intial action (e.g. heartbeat of current connection), and 4) calling it again with the thing to work on subsequently (e.g. the next connection's stream of heartbeats)

[20:38] <jnthn> I think Cro::HTTP::Client does a similar structure for following redirects

[20:38] <Altreus> react { sub do-the-thing { ... } do-the-thing(); whenever something-happens { do-the-thing } }?

[20:38] <jnthn> As does the example from my supply/react talk that keeps N tasks going at a time

[20:39] <Altreus> hmm a supply/react talk would probably help me out

[20:39] <jnthn> Well, maybe, but I'd expect a `whenever` inside the sub too

[20:39] <Altreus> got it handy? I'll watch it later

[20:39] <Altreus> as in tomorrow

[20:39] <Altreus> as in arbitrary future point

[20:39] <jnthn> Hm, where is the video I wonder...slides are just on the talks page of my site

[20:39] <jnthn> http://jnthn.net/papers/2019-gpw-react-supply-whenever.pdf

[20:40] <Altreus> I might have to let my brain reboot from staring at it too long - fresh pair of eyes so I can actually understand it :D

[20:41] <jnthn> https://www.youtube.com/watch?v=GdU5XUck8OA&list=UUPl0v0Gg-kaHYLzRsaDtEDw&index=24&t=7s

[20:41] <Altreus> \o/

[20:46] *** lichtkind left
[20:48] <Aukai> Good resource for a perl 5 developer to learn Raku/p6?

[20:49] <sena_kun> Aukai, you can take a look at migration guides in official docs: https://docs.raku.org/language.html#Migration_guides

[20:53] <Aukai> Is there pattern matching btw?

[20:53] <Aukai> In the rust/erlang sense?

[20:55] <timotimo> yeah, in multi-dispatch subs you can and do pattern match

[20:59] <Aukai> ty 

[20:59] *** natrys left
[20:59] <Aukai> And final question for now: are there any mature (or mature-ish) light web routing frameworks?

[21:00] <Aukai> Oh actually, bonus question: is tail-call recursion optimized? :D

[21:00] <lizmat> Aukai: https://cro.services to the final question

[21:00] <lizmat> bonus question: no

[21:04] <Aukai> Thanks <3

[21:08] *** kensanata left
[21:15] *** Kaiepi left
[21:16] *** Kaiepi joined
[21:17] *** Kaiepi left
[21:18] *** Kaiepi joined
[21:19] *** Kaiepi left
[21:19] *** vike1 left
[21:20] *** Kaiepi joined
[21:21] *** Kaiepi left
[21:31] *** Kaiepi joined
[21:32] *** Kaiepi left
[21:32] *** Kaiepi joined
[21:34] *** cpan-raku left
[21:34] *** cpan-raku joined
[21:34] *** cpan-raku left
[21:34] *** cpan-raku joined
[21:35] *** Kaiepi left
[21:38] *** Kaiepi joined
[22:13] *** wamba left
[22:14] *** aborazmeh joined
[22:14] *** aborazmeh left
[22:14] *** aborazmeh joined
[22:18] *** sftp left
[22:21] *** sftp joined
[22:26] *** _jrjsmrtn joined
[22:26] <cpan-raku> New module released to CPAN! Data::Record (0.0.2) by 03KAIEPI

[22:28] *** Altai-man_ joined
[22:29] *** __jrjsmrtn__ left
[22:30] *** xkr47 joined
[22:31] *** sena_kun left
[22:35] *** lucasb left
[22:35] *** xinming_ left
[22:36] *** xinming_ joined
[22:36] *** leont left
[22:36] *** rindolf left
[22:40] *** stoned75 left
[22:55] *** benlittle left
[22:55] *** Altai-man_ left
[22:57] *** benlittle joined
[22:59] *** vike1 joined
[23:10] *** xinming_ left
[23:12] *** xinming_ joined
[23:15] *** rba[m] joined
[23:23] *** benkolera joined
[23:28] *** erdic left
[23:28] *** telex left
[23:28] *** erdic joined
[23:28] *** b2gills joined
[23:28] *** aborazmeh left
[23:29] *** telex joined
[23:34] *** xelxebar joined
[23:50] *** pecastro left
