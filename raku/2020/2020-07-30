[00:05] *** wamba left
[00:12] *** sena_kun joined
[00:14] *** Altai-man_ left
[00:41] *** cydf joined
[00:41] *** cy_d_fect_ left
[01:03] *** aborazmeh joined
[01:03] *** aborazmeh left
[01:03] *** aborazmeh joined
[01:25] *** aborazmeh left
[01:31] *** Xliff left
[01:37] *** orinthe left
[01:54] *** molaf left
[01:56] *** Sgeo left
[01:57] *** Sgeo joined
[02:00] *** orinthe joined
[02:07] *** molaf joined
[02:11] *** Altai-man_ joined
[02:13] *** sena_kun left
[02:31] *** guifa2 left
[02:33] *** guifa2 joined
[02:36] *** zacts left
[02:48] *** xinming_ left
[02:49] *** xinming_ joined
[03:43] <brass> Hey, if I want to read in a file that's been compressed with gzip, what would be the best way to do that?

[03:44] <brass> Like access.log.gz, so it's not a tar archive 

[03:49] *** evalable6 left
[03:49] *** linkable6 left
[03:51] *** evalable6 joined
[03:52] *** linkable6 joined
[04:03] *** Sgeo left
[04:04] *** Sgeo joined
[04:12] *** sena_kun joined
[04:14] *** Altai-man_ left
[04:25] *** cydf left
[04:30] *** lucasb left
[04:42] *** andrew_ joined
[04:44] *** andrew_ is now known as andrew[43]

[04:50] <guifa2> brass: have you tried Libarchive?

[04:51] <guifa2> I haven't used it (yet), but it appears to handle gzipped files

[04:55] *** molaf left
[04:57] *** andrzejku joined
[05:20] *** bocaneri joined
[05:23] *** cpan-raku joined
[05:23] *** cpan-raku left
[05:23] *** cpan-raku joined
[05:33] <cpan-raku> New module released to CPAN! Date::Calendar::MayaAztec (0.0.2) by 03JFORGET

[06:11] *** Altai-man_ joined
[06:14] *** sena_kun left
[06:28] *** patrickas joined
[06:30] *** patrickas left
[06:54] *** Sgeo left
[07:16] *** leont joined
[07:29] *** dakkar joined
[07:37] *** kent\n left
[07:38] *** kent\n joined
[07:42] *** pecastro joined
[07:48] *** andrew[43] left
[07:49] *** xinming_ left
[07:50] *** andrew_ joined
[07:51] *** xinming_ joined
[08:12] *** sena_kun joined
[08:13] *** Altai-man_ left
[08:24] *** wamba joined
[08:58] <Geth> ¦ doc: paultcochrane++ created pull request #3542: Capitalise the word "Boolean"

[08:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3542

[09:00] <tadzik> hah

[09:00] <tadzik> I never thought of Boolean that way (even though I knew about George Bool

[09:04] <synthmeat> *Boole

[09:04] *** andrew_ left
[09:05] <tadzik> duh, yes, thanks

[09:15] *** patrickb joined
[09:21] <patrickb> o/

[09:21] <tellable6> 2020-07-29T23:32:50Z #raku <tony-o> patrickb i'll flesh that out in the gist tomorrow ante meridiem

[09:21] <tellable6> 2020-07-29T23:33:11Z #raku <tony-o> patrickb that being the zef ecosystem tpf doc

[09:23] <patrickb> guifa2: supernovus is difficult to reach via IRC. The best idea is probably to write an email. (I have been in contact with him via email the last weeks).

[09:24] <patrickb> tony-o: Sounds good!

[09:26] *** wamba left
[09:31] <Geth> ¦ doc: b5f57e72f3 | (Paul Cochrane)++ (committed using GitHub Web editor) | 16 files

[09:31] <Geth> ¦ doc: Capitalise the word "Boolean" (#3542)

[09:31] <Geth> ¦ doc: 

[09:31] <Geth> ¦ doc: * Capitalise "Boolean" in `Language/` subdir

[09:31] <Geth> ¦ doc: 

[09:31] <Geth> ¦ doc: As required in #3517.

[09:31] <Geth> ¦ doc: 

[09:31] <Geth> ¦ doc: * Capitalise "Boolean" in `Type/` subdir

[09:31] <linkable6> DOC#3542 [closed]: https://github.com/Raku/doc/pull/3542 Capitalise the word "Boolean"

[09:31] <Geth> ¦ doc: 

[09:31] <Geth> ¦ doc: As required in #3517.

[09:31] <linkable6> DOC#3517 [open]: https://github.com/Raku/doc/issues/3517 [docs][easy to resolve] Boolean should be capitalized

[09:31] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/b5f57e72f3

[09:56] *** _jrjsmrtn left
[10:00] *** __jrjsmrtn__ joined
[10:11] *** Altai-man_ joined
[10:13] *** sena_kun left
[10:37] *** wamba joined
[10:43] *** andrew joined
[10:52] *** kensanata joined
[10:54] *** ensamvarg3 joined
[11:54] *** andrew left
[12:12] *** sena_kun joined
[12:14] <Geth> ¦ advent: antoniogamiz++ created pull request #54: Claim RFC-5

[12:14] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/54

[12:14] *** Altai-man_ left
[12:16] <Geth> ¦ advent: 16b3321902 | (Antonio Gamiz)++ | 20th/README.md

[12:16] <Geth> ¦ advent: Claim RFC-5

[12:16] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/16b3321902

[12:16] <Geth> ¦ advent: efdca4a4b7 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20th/README.md

[12:16] <Geth> ¦ advent: Merge pull request #54 from antoniogamiz/pr/claim-rfc-5

[12:16] <Geth> ¦ advent: 

[12:16] <Geth> ¦ advent: Claim RFC-5

[12:16] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/efdca4a4b7

[12:24] <Geth> ¦ advent: antoniogamiz++ created pull request #55: Add article for RFC 5

[12:24] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/55

[12:28] *** andrew joined
[12:30] *** rindolf joined
[12:34] *** raku-bridge left
[12:35] *** raku-bridge joined
[12:35] *** raku-bridge left
[12:35] *** raku-bridge joined
[12:38] <rypervenche> brass: I use: use Libarchive::Filter :gzip; and it gives me the "gunzip" sub.

[12:39] *** cpan-raku left
[12:44] <codesections> m: say "No capture: " ~ ('a1a2a3a4a5' ~~ m:g/a \d/).gist; say "capture: " ~ ('a1a2a3a4a5' ~~ m:g/(a \d)/).gist

[12:44] <camelia> rakudo-moar a3af5833d: OUTPUT: «No capture: (｢a1｣ ｢a2｣ ｢a3｣ ｢a4｣ ｢a5｣)␤capture: (｢a1｣␤ 0 => ｢a1｣ ｢a2｣␤ 0 => ｢a2｣ ｢a3｣␤ 0 => ｢a3｣ ｢a4｣␤ 0 => ｢a4｣ ｢a5｣␤ 0 => ｢a5｣)␤»

[12:45] <codesections> why do the $0 capture group ^^^ have multiple matches in it?  I would have expected just one in each execution

[12:46] <codesections> s/do/does

[12:52] <moritz> codesections: you actually get several matches, each with their own $0

[12:53] <codesections> Yeah, I see that.  But, unless I'm misreading the output, each of the $0 (except the last) has two matches

[12:54] <moritz> you are misreading

[12:54] <moritz> I recommend you print each match on a separate line in the terminal, it will be easier to see that way

[12:56] *** _jrjsmrtn joined
[12:56] *** __jrjsmrtn__ left
[12:59] *** patrickb left
[13:01] <codesections> Aha, thanks, I see it now

[13:01] <codesections>  m: for ('a1a2a3a4a5' ~~ m:g/(a \d)/) { print "match " ~ ++$ ~ ": "  ~ say $_.gist}

[13:01] <camelia> rakudo-moar a3af5833d: OUTPUT: «｢a1｣␤ 0 => ｢a1｣␤match 1: True｢a2｣␤ 0 => ｢a2｣␤match 2: True｢a3｣␤ 0 => ｢a3｣␤match 3: True｢a4｣␤ 0 => ｢a4｣␤match 4: True｢a5｣␤ 0 => ｢a5｣␤match 5: True»

[13:02] <codesections> By default, that prints like (｢a1｣

[13:02] <codesections>  0 => ｢a1｣ ｢a2｣

[13:02] <codesections>  0 => ｢a2｣ ｢a3｣

[13:02] <codesections>  0 => ｢a3｣ ｢a4｣

[13:02] <codesections>  0 => ｢a4｣ ｢a5｣

[13:02] <codesections>  0 => ｢a5｣)

[13:02] <codesections> maybe a LTA print representation? 

[13:04] <moritz> it's pretty good actually, if you take care that each output starts on a new line

[13:05] <codesections> Hmm?  The thing I was saying is LTA is that each output *doesn't* start on a new line.

[13:05] *** aborazmeh joined
[13:05] <moritz> well, but that's because you're not using say()

[13:05] *** aborazmeh left
[13:05] *** aborazmeh joined
[13:05] <moritz> just do it, and you'll be fine

[13:06] <moritz> https://gist.github.com/moritz/698e186c9fbe45d2c887998f0bbf7588

[13:07] <moritz> or even add \n before you output the match

[13:08] <codesections> yeah, I get that.  I was saying the *default* print representation for `say 'a1a2a3a4a5' ~~ m:g/(a \d)/` isn't great – because that prints without the newlines

[13:09] <moritz> agreed

[13:09] <moritz> but there isn't much we could do

[13:09] <moritz> that wouldn't also break some other use case

[13:10] <codesections> Interesting.  Why is that?  `say` there prints with `.gist` – I thought `.gist` was free to print however it liked without breaking anything? 

[13:10] <codesections> Or would it break things in the sense of displaying poorly?

[13:10] <moritz> well, say gets a list

[13:11] <moritz> we could of course say that .gist on a list joins by newline

[13:11] <moritz> but then something like

[13:11] <moritz> m: say <a b c>

[13:11] <camelia> rakudo-moar a3af5833d: OUTPUT: «(a b c)␤»

[13:11] <moritz> would be *much* more verbose

[13:12] <moritz> or we could say that Match.gist adds newlines (leading or trailing), but then the *far more common* use case of simply doing "say $/" now contains unnecessary whitespace

[13:12] <moritz> codesections: what would be your suggestion on improving the situation?

[13:14] <codesections> I was thinking along the lines of the second suggestion.  If `Match.gist` added a trailing newline, wouldn't that be good whenever `$/` returns more than one match?  And when $/ returns 1 match, it'd just cost 1 newline

[13:15] <moritz> IME a single mach is by far more common than multiple matches

[13:15] <moritz> and it makes sense to optimize for the common use case

[13:16] <codesections> Agreed

[13:17] <codesections> I guess I thought one extra newline wouldn't be much of a loss: the problem with newlines in `say (a, b, c)` is that it gets really verbose, but one newline doesn't really cause that problem.

[13:17] <codesections> But yeah, if we view the extra newline as a problem, then there's no good way to fix the uncommon case without messing up the common one

[13:18] <codesections>  ¯\_(ツ)_/¯

[13:20] *** domidumont joined
[13:20] <codesections> (a more radical solution that I personally like but wouldn't advocate for is to change `List.gist` to print commas between the list elements.  But that's too big a change to make sense as a fix here – I'd just like it :) )

[13:25] * moritz too

[13:25] <Geth> ¦ doc: 1be6eefaac | Coke++ | xt/headings.t

[13:25] <Geth> ¦ doc: Treat Boolean as a proper name

[13:25] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1be6eefaac

[13:30] <Geth> ¦ advent: 6928ceda82 | (Antonio Gamiz)++ | 20th/articles/rfc5.md

[13:30] <Geth> ¦ advent: Add article for RFC 5

[13:30] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/6928ceda82

[13:30] <Geth> ¦ advent: 369acb0c66 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20th/articles/rfc5.md

[13:30] <Geth> ¦ advent: Merge pull request #55 from antoniogamiz/pr/rfc5-article

[13:30] <Geth> ¦ advent: 

[13:30] <Geth> ¦ advent: Add article for RFC 5

[13:30] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/369acb0c66

[13:33] <codesections> Actually, moritz: what would you think about printing Matches with a delimiter?  e.g., changing .gist to print like: 

[13:33] <codesections> m: say ('a1a2a3' ~~ m:g/(a \d)/).map({'{' ~.gist~ '}'})

[13:33] <camelia> rakudo-moar a3af5833d: OUTPUT: «({｢a1｣␤ 0 => ｢a1｣} {｢a2｣␤ 0 => ｢a2｣} {｢a3｣␤ 0 => ｢a3｣})␤»

[13:34] <codesections> Matches *aren't* associative, but they "feel" a bit like an associative object

[13:35] <codesections> which is why I used `{…}` in the example.  But it could be other delimiters

[13:35] <moritz> m: say Match ~~ Associative

[13:35] <camelia> rakudo-moar a3af5833d: OUTPUT: «False␤»

[13:35] <moritz> m: say Match ~~ Positional

[13:35] <camelia> rakudo-moar a3af5833d: OUTPUT: «False␤»

[13:35] * moritz slightly surprised

[13:37] *** aluaces left
[13:37] *** aborazmeh left
[13:39] <codesections> m: say Match.new.hash ~~ Associative; say Match.new.list ~~ Positional

[13:39] <camelia> rakudo-moar a3af5833d: OUTPUT: «True␤True␤»

[13:42] *** m0ltar_ is now known as m0ltar

[13:43] *** m0ltar is now known as m0ltar_

[13:52] *** cpan-raku joined
[13:52] *** cpan-raku left
[13:52] *** cpan-raku joined
[14:00] *** kensanata left
[14:12] *** Altai-man_ joined
[14:14] *** sena_kun left
[14:23] *** dogbert11 joined
[14:26] *** dogbert17 left
[14:38] *** dogbert11 left
[14:43] *** andrzejku left
[14:55] *** molaf joined
[15:12] *** Sgeo joined
[15:19] *** gnufr33dom joined
[15:21] <moritz> Hi all, please comment on https://news.perlfoundation.org/post/grant_proprosal_raku_ecosystem to let us (the grant committee) know what the Raku community thinks of this grant proposal

[15:21] *** JJMerelo joined
[15:22] *** andrzejku joined
[15:27] <[Coke]> There is not a lot of milestone info.

[15:38] <rockxloose> Price each milestone at $3,000?

[15:39] *** lichtkind joined
[15:40] <dakkar> I'm wary of the API aspect

[15:40] <dakkar> I love the metacpan api

[15:40] <dakkar> but I love more than the cpan clients don't need it

[15:41] <dakkar> I can set up my own darkpan or reduced cpan mirror or any combination of them with minimal effort

[15:41] <dakkar> and all tools Just Work™ (as long as `02-packages.txt` is there)

[15:42] *** zacts joined
[15:43] * [Coke] adds his questions so far to the proposal

[15:51] <cpan-raku> New module released to CPAN! Math::Libgsl::RunningStatistics (0.0.1) by 03FRITH

[15:53] <jdv79> i'm with coke - there's virtually no details

[15:53] <jdv79> quite hand wavy, not only on the new but also on the contrast to the existing

[15:54] <guifa2> patrickb++ 

[16:01] <guifa2> Is there a way to remove a mixin?  (guessing the answer is no but… )

[16:02] <gfldex> guifa2: not from the object that has received the mixin. You could create a new object that is a partial clone.

[16:05] *** andrew left
[16:10] <guifa2> gfldex: hmm, creating the new object is the tricky bit.  I'm being evil and wrapping new ^_^

[16:11] <guifa2> I guess i can check if it matches the mixin role and adjust the callsame accordingly

[16:12] *** sena_kun joined
[16:13] *** gnufr33dom left
[16:13] *** john_parr_ joined
[16:14] *** Altai-man_ left
[16:17] <tony-o> dakkar: i'm fleshing that grant proposal out a bit more this morning.  anything in particular you'd like addressed about the API ?

[16:18] <tony-o> disregard - i see comments on the link moritz posted

[16:18] <dakkar> yeah ☺ and here

[16:19] <dakkar> essentially, having "just a bunch of files" makes plenty of uses simpler

[16:19] <dakkar> of course, some of those files will be indexes

[16:19] *** melezhik joined
[16:19] <dakkar> but the fact that I can create a local cpan mirror with just a call to rsync is powerful

[16:20] <dakkar> by all means, fancy APIs like metacpan are awesome

[16:20] <melezhik> Hi rakuers! If someone is into kubernetes stuff here? I've created a Sparrowdo scenario to deploy k8s cluster from the scratch using aws infrastructure 

[16:20] <melezhik> https://github.com/melezhik/sparrowdo/blob/master/examples/k8s.raku

[16:20] <dakkar> but having to install indexers, servers, &c to serve my own distributions feels like a sub-optimal design to me

[16:21] <melezhik> I am going to give more details in the next RakuOps issue

[16:21] <tony-o> there won't be much of a change from that type of structure except to handle the :auth:ver etc

[16:21] <tony-o> the api is mostly around account creation/uploading

[16:24] <dakkar> ok, so it's a PAUSE-like API

[16:24] <dakkar> and the repository stays CPAN-like

[16:25] <dakkar> and `zef` doesn't need an index server, it keeps fetching the whole index file and reading that

[16:25] <dakkar> +1 from me

[16:25] *** squashable6 left
[16:26] <tony-o> exactly ^ right on

[16:27] <dakkar> tony-o++ # keeping the good bits, improving the bad bits

[16:27] *** squashable6 joined
[16:27] *** skids joined
[16:29] <[Coke]> Getting details like that into the proposal would definitely help in my opinion. (I am a recently former member of the GC, full disclosure)

[16:31] <tony-o> [Coke]: i'll be adding some and responding to your comments this morning too 

[16:31] <tony-o> is it appropriate to just respond in comments or is there a way to amend the proposal?

[16:38] <moritz> tony-o: you write an email to Jason Crome (TPF secretary who posted the item on the blog) and supply him with an updated version

[16:38] <moritz> he'll probably figure something out

[16:39] <moritz> if you don't have his email address, I can /msg it to to you

[16:40] *** dakkar left
[16:41] <codesections> tony-o: You may have already read this, but here's an article that I found helpful in framing the questions around language package managers/ecosystems: https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527

[16:41] *** Kaeipi joined
[16:41] *** dogbert17 joined
[16:44] *** Kaiepi left
[16:45] *** Kaeipi left
[16:47] *** Kaiepi joined
[16:48] *** Kaiepi left
[17:03] *** aluaces joined
[17:04] *** JJMerelo left
[17:04] <[Coke]> crome has the ability to update that posting, or create a new one, or...

[17:12] *** andrew joined
[17:27] <guifa2> reading through pure C code designed for a bajillion different architectures reminds me why I like scripting languages

[17:29] <codesections> I added a couple of questions to the grant proposal :)

[17:42] *** domidumont left
[17:43] *** domidumont joined
[17:43] *** domidumont left
[17:46] *** andrew_ joined
[17:50] *** andrew left
[18:09] <jdv79> gee golly - isn't that nice that the comments get whitespace stripped on the grants pages.

[18:10] <jdv79> now my comment looks like an incoherent rant instead of a semi-structured piece...

[18:10] <codesections> Yeah, I noticed that.  Mine turned into quite the wall of text!  Sorry about that

[18:10] <jdv79> [Coke]: what is up with that?!

[18:10] <jdv79> haha

[18:12] *** Altai-man_ joined
[18:13] *** reach_satori_ left
[18:13] *** reach_satori_ joined
[18:14] *** sena_kun left
[18:19] *** AlexDaniel joined
[18:20] *** AlexDaniel left
[18:20] *** AlexDaniel joined
[18:20] <tony-o> a lot of turn out on the comments, i have some notes in an addendum i'll email to jason in a bit

[18:20] <tony-o> unless discussion here is preferrable.

[18:21] *** andrzejku left
[18:24] *** ensamvarg3 left
[18:25] <Geth> ¦ doc: paultcochrane++ created pull request #3543: Link to Bool types

[18:25] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3543

[18:30] *** bocaneri left
[18:33] <codesections> Is there any particular logic behind why BagHash has an `add` method but SetHash doesn't? 

[18:33] <codesections> m: my %b is BagHash; %b.add('apple'); say %b; my %s is SetHash; %s.add('pear')

[18:33] <camelia> rakudo-moar 17f7f156a: OUTPUT: «BagHash(apple)␤No such method 'add' for invocant of type 'SetHash'␤  in block <unit> at <tmp> line 1␤␤»

[18:34] *** andrew_ left
[18:34] *** MasterDuke joined
[18:36] *** AlexDaniel left
[18:37] *** zacts left
[18:38] <lizmat> codesections: there was, but it escapes me now

[18:39] <codesections> :D

[18:40] <lizmat> yeah, because it is called .set rather than .add

[18:40] <lizmat> to reflect the subtle difference in semantics

[18:40] <lizmat> m: my %s is SetHash; %s.set('pear'); dd %s

[18:40] <camelia> rakudo-moar 17f7f156a: OUTPUT: «SetHash.new("pear")␤»

[18:41] <lizmat> and remove is called unset on SetHash

[18:42] <lizmat> codesections ^^

[18:42] <codesections> Aha.  That all makes sense, thanks! 

[18:42] <codesections> (None of these are documented on the SetHash or BagHash pages; I'll try and send a doc PR to add this info) 

[18:45] <lizmat> codesections++

[18:45] <lizmat> bisectable6: old=2019.01 my %s is SetHash; %s.set('pear'); dd %s

[18:45] <bisectable6> lizmat, Cannot find revision “2019.01” (did you mean “2020.01”?)

[18:46] <lizmat> bisectable6: old=2019.02 my %s is SetHash; %s.set('pear'); dd %s

[18:46] <bisectable6> lizmat, Cannot find revision “2019.02” (did you mean “2020.02”?)

[18:46] <lizmat> bisectable6: old=2019.03 my %s is SetHash; %s.set('pear'); dd %s

[18:46] <bisectable6> lizmat, Bisecting by exit code (old=2019.03 new=17f7f15). Old exit code: 1

[18:46] <guifa2> code to convert [-]h[h[:mm[:ss[.s*]?]?]? into an integer of seconds in C = 50+ lines of code.  Raku, 11.  And only because I like pretty whitespace.  Really just 3

[18:46] <bisectable6> lizmat, bisect log: https://gist.github.com/dc1e2ccfe93ab669b0dc65afb2f39e83

[18:46] <bisectable6> lizmat, (2020-02-04) https://github.com/rakudo/rakudo/commit/6df78ca3ed72fe1ca22e54d24700250e5be420ed

[18:47] <lizmat> codesections: available since 2020.02

[18:47] <codesections> Thanks :)

[18:57] <lizmat> PSA: for all of you who didn't see this here, or in the Rakudo Weekly News:

[18:57] <lizmat> https://github.com/Raku/Raku-Steering-Council/blob/main/announcements/20200720.md

[18:58] <lizmat> Raku Community to elect Raku Steering Council

[18:58] <lizmat> you can still nominate yourself for the election!

[18:58] <Geth> ¦ doc: paultcochrane++ created pull request #3544: Add `update-html` make target

[18:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3544

[18:58] *** andrew joined
[19:05] <guifa2> lizmat++ 

[19:08] <guifa2> lizmat:  how many will be on the steering committee? 

[19:08] <lizmat> the intent is 7, it's all in https://github.com/Raku/Raku-Steering-Council/blob/main/papers/Raku_Steering_Council_Code.md

[19:17] <guifa2> lizmat: Are commit bits required for nomination or just for voting?  (strictly as written, it's the latter)

[19:18] <lizmat> passive voting right is the right to put yourself up for nomination >

[19:18] <lizmat> ?

[19:19] <lizmat> Since there is no formal Raku "core team" yet, any person with a commit bit in either of these repositories, has active and passive voting rights:

[19:19] <lizmat> Rakudo

[19:19] <lizmat> NQP

[19:19] <lizmat> MoarVM

[19:19] <lizmat> guifa2: does that answer your question ?

[19:22] *** squashable6 left
[19:23] <guifa2> lizmat: ah okay.  That makes sense, I just didn't the distinction of passive/active there.

[19:23] *** squashable6 joined
[19:24] * guifa2 doesn't have any commit bits in those repositories yet oddly

[19:26] <lizmat> do you have a commit bit in roast ?

[19:48] *** melezhik left
[19:49] *** Ven`` joined
[19:58] *** zacts joined
[20:08] *** wamba left
[20:13] *** sena_kun joined
[20:14] *** Altai-man_ left
[20:30] *** zacts left
[20:33] *** andrew left
[20:42] *** kensanata joined
[20:48] *** Kaiepi joined
[20:57] *** Ven`` left
[21:08] *** rindolf left
[21:10] *** Ven`` joined
[21:11] <guifa2> lizmat: also no.  I've done everything outside of core space.  But there are some very capable names nominated so I'm happy to sit this cycle out

[21:12] <lizmat> there's a PR now to postpone the election by a month: https://github.com/Raku/Raku-Steering-Council/pull/18

[21:13] *** demostanis joined
[21:13] <demostanis> Hello everyone! 

[21:14] <codesections> o/

[21:14] <lizmat> demostanis o/

[21:14] <gfldex> raku: say ‚Hello demostanis!‘;

[21:14] <evalable6> gfldex, rakudo-moar 17f7f156a: OUTPUT: «Hello demostanis!␤»

[21:15] <Altreus> Can I just do start { $thing } to wrap $thing in a promise?

[21:15] <Altreus> as a return value

[21:16] <Altreus> oh hey the examples do supply emit

[21:16] <Altreus> I try this

[21:16] <gfldex> You will get a Promise that way, but you will get a thread and no control over the Promise.

[21:17] <lizmat> what is $thing?  a variable, or something that runs ?

[21:17] <Altreus> a variable yes

[21:17] <Altreus> a new - synchronous - object!

[21:19] <lizmat> m: dd Promise.kept(42).result   # maybe that's what you're looking for ?

[21:19] <camelia> rakudo-moar 17f7f156a: OUTPUT: «42␤»

[21:20] <Altreus> aha :)

[21:20] <Altreus> I think I'm looking for a better way of sticking it together, but this will work for now

[21:21] <Altreus> thank :)

[21:23] <demostanis> I'm having some weird issue with regexes (again), $m.Str where $m ~~ Match seems to return a string of the match, INCLUDING ignored stuff, is this is intended behavior? I am going to try to write up an example... 

[21:24] <demostanis> In a grammar, I have a token value { [ <thing> | <other-thing> | <.ignored-thing> ]* }

[21:25] <demostanis> In the grammar's actions, I am trying to get the $<value> as a string using its .Str method, however the result includes stuff matched by <.ignored-thing>

[21:31] <skids> <.ignored-thing> just doesn't create a submatch.  It doesn't exclude the text that matched ignored-thing from the outer token.

[21:32] <demostanis> How would I make it exclude that text?

[21:33] <codesections> If I understand what you're trying to do correctly, try something like this:

[21:33] <codesections> m:  'AAABBBCCC' ~~ /<(['AAA' | 'BBB')> | 'CCC']*/

[21:33] <camelia> rakudo-moar 17f7f156a: ( no output )

[21:33] <codesections> m: say  'AAABBBCCC' ~~ /<(['AAA' | 'BBB')> | 'CCC']*/

[21:33] <camelia> rakudo-moar 17f7f156a: OUTPUT: «｢AAABBB｣␤»

[21:34] <codesections> (grr, always forget I need to add the `say` on here)

[21:34] *** sno left
[21:34] <codesections> With the <(…)> doing the work of limiting the Match as a whole

[21:36] *** sno joined
[21:37] <demostanis> Ok, seems to solve my problem, thanks

[21:38] <codesections> Glad I could help :)

[21:42] <demostanis> Why does the first '<(' comes before '[', while the second doesn't go after the ']', though?

[21:43] <lizmat> demostanis <( and )> do *not* need to be balanced

[21:43] <codesections> ha, good question.  The `<(…)>` isn't really a grouping thing, despite the apparance 

[21:43] <lizmat> indeed

[21:50] <demostanis> How is it called?

[21:51] <codesections> "capture marker" https://docs.raku.org/language/regexes#Capture_markers:_%3C(_)%3E

[21:51] <demostanis> Thanks

[21:58] *** kensanata left
[22:02] *** gordonfish- joined
[22:03] *** gordonfish- left
[22:03] *** gordonfish- joined
[22:03] *** gordonfish left
[22:04] *** gordonfish- is now known as gordonfish

[22:12] *** Altai-man_ joined
[22:14] *** sena_kun left
[22:17] *** demostanis left
[22:19] *** vike left
[22:26] *** netrino joined
[22:26] *** netrino is now known as destroycomputers

[22:27] *** destroycomputers left
[22:28] <cpan-raku> New module released to CPAN! Hash2Class (0.1.1) by 03ELIZABETH

[22:35] *** Ven`` left
[22:50] <codesections> The docs mention that you can check whether a type object is an enum like this 

[22:50] <codesections> m: enum E(<a b c>); say E ~~ Enumeration;

[22:50] <camelia> rakudo-moar 17f7f156a: OUTPUT: «True␤»

[22:51] <codesections> is there something similar to see if a type object is a Role?

[22:52] <codesections> Right now, I'm doing 

[22:52] <codesections> m: role R {...}; say ~R.HOW ~~ /Role/;

[22:52] <camelia> rakudo-moar 17f7f156a: OUTPUT: «｢Role｣␤»

[22:52] <codesections> which feels a little gross/Stringly-typed

[22:53] *** vike joined
[22:54] *** leont left
[22:55] *** m_athias left
[22:59] <guifa2> m: enum (a => (my Int $ = 2));  say a

[23:00] <camelia> rakudo-moar 17f7f156a: OUTPUT: «a␤»

[23:00] <guifa2> m: enum (a => (my int $ = 2));  say a

[23:00] <camelia> rakudo-moar 17f7f156a: OUTPUT: «===SORRY!===␤Lexical with name '$ANON_VAR__1' has wrong type. real type 8 wanted type -1␤»

[23:00] <guifa2> o.O

[23:01] <gfldex> guifa2: Raku is less dynamic that it might look. You just made that show.

[23:02] <guifa2> Indeed.  I'm finding lots of little gotchas when working with natives.  

[23:05] *** fridim left
[23:05] *** lichtkind left
[23:05] *** fridim joined
[23:06] *** m_athias joined
[23:17] <codesections> m: say MixHash.HOW

[23:17] <camelia> rakudo-moar 17f7f156a: OUTPUT: «No such method 'gist' for invocant of type␤'Perl6::Metamodel::ClassHOW+{<anon>}'.  Did you mean 'isa'?␤  in block <unit> at <tmp> line 1␤␤»

[23:39] *** pecastro left
[23:51] <elcaro> lizmat: Hash2Class is nice. I'm not sure if it's of any interest to you, but there's an intersting talk by Rich Hickey about schema (and something called 'spec') in Clojure

[23:52] <elcaro> It's about validating that the data in a Hash looks a certain way. I was thinking of building something like that but Hash2Class pretty darn close

[23:52] <elcaro> here's the talk, if interested: https://www.youtube.com/watch?v=YR5WdGrpoug

[23:53] <elcaro> I'm not a Clojure user, but it's still interesting... and potentially would still be a useful thing to build. Do we have something in ecosystem that validates the shape of - and types in - a Hash?

