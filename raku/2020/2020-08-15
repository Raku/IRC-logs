[00:00] *** finsternis joined
[00:06] <Geth> ¦ advent: 7f464f0f98 | Altai-man++ | 20th/articles/rfc188.md

[00:06] <Geth> ¦ advent: Add RFC 188 article

[00:06] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/7f464f0f98

[00:06] <Geth> ¦ advent: 5d36d37078 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 20th/articles/rfc188.md

[00:06] <Geth> ¦ advent: Merge pull request #61 from Raku/rfc-188

[00:06] <Geth> ¦ advent: 

[00:06] <Geth> ¦ advent: Add RFC 188 article

[00:06] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/5d36d37078

[00:09] *** patrickb left
[00:13] *** dogbert17 left
[00:43] *** dogbert17 joined
[00:56] *** aborazmeh joined
[00:56] *** aborazmeh left
[00:56] *** aborazmeh joined
[01:14] *** Altai-man joined
[01:17] *** sena_kun left
[01:27] *** clarjon1 joined
[01:38] *** dogbert17 left
[01:38] *** dogbert17 joined
[01:43] *** agentzh left
[01:56] *** dogbert11 joined
[01:57] *** dogbert17 left
[02:02] *** Manifest0 left
[02:03] *** Manifest0 joined
[02:14] *** dogbert17 joined
[02:19] *** dogbert11 left
[02:46] *** Altai-man left
[02:47] *** sena_kun joined
[02:52] *** lucasb left
[02:54] *** timeless left
[02:56] *** melezhik joined
[02:56] <melezhik> .tell rba: ssh brezeleisen issue resolved 

[02:56] <tellable6> melezhik, I'll pass your message to rba

[02:57] *** mirrorbird joined
[02:58] *** melezhik left
[02:59] *** rjeli left
[02:59] <mirrorbird> i thought i would finally try perl/raku after my hello world program 13-14 years ago. does anyone know a good article which compares Perl and Raku and talks about them in some way?

[03:02] *** caasih left
[03:05] *** timeless joined
[03:10] <guifa2> mirrorbird: there's a guide for people coming from Perl 

[03:10] *** agentzh joined
[03:10] *** agentzh left
[03:10] *** agentzh joined
[03:10] *** timeless left
[03:11] <guifa2> https://docs.raku.org/language.html#Migration_guides

[03:12] *** caasih joined
[03:14] <mirrorbird> ok. i have no experience with perl but i guess that should do it

[03:16] <guifa2> Hm, I don't know if there's any great discussions on the two from the perspective of someone who hasn't used Perl.  Most Raku users were previously Perlers, so the resources have —for better or for worse— been biased in that way

[03:17] <mirrorbird> that makes sense

[03:17] <mirrorbird> but some new people must be learning these languages. i guess not as much these days

[03:19] *** caasih left
[03:21] <guifa2> mirrorbird: there definitely are. There are a lot of people that have been working on building up documentation and just last week there was some talk about how more resources should be made oriented towards non-Perl folk

[03:21] <guifa2> (the ones who brought it up were similarly not previous Perl users, hence their interest)

[03:25] *** rjeli joined
[03:25] *** caasih joined
[03:29] *** timeless joined
[03:41] *** guifa left
[03:52] *** aborazmeh left
[04:03] *** skids left
[04:07] *** wamba joined
[04:13] <rockxloose> I understand Facebook was built on php.  Has anything been built with Raku at such a scale?

[04:23] *** gnufr33dom joined
[04:29] <rockxloose> I understand one strength Perl has is govt document processing.  Could Raku take over that role and link to modern uses of tech such as Zoom chats for problems like not waiting 2-months or 6-years for things to happen https://www.maritime-executive.com/article/report-welders-set-off-the-beirut-blast-while-securing-explosives

[04:29] <rockxloose> ?

[05:13] *** holyghost left
[05:14] *** Altai-man joined
[05:17] *** sena_kun left
[05:22] *** mirrorbird left
[05:24] *** mirrorbird joined
[05:26] *** Benett left
[05:27] *** Benett joined
[05:32] *** xinming_ left
[05:33] *** xinming_ joined
[05:55] *** Sgeo left
[05:57] *** Sgeo joined
[06:09] *** wamba left
[06:12] *** rindolf joined
[06:13] *** sjm_uk joined
[06:49] *** xinming_ left
[06:49] <guifa2> rockxloose: parsing is a strength of Raku.  People have begun to write programs of larger scale.  jnthn in fact does basically exactly that at $day-job, processing some insanely large amount of documents that have to be compiled to instructions and something

[06:49] *** xinming_ joined
[06:57] <guifa2> I'm trying to find that talk but I forgot which one it wasand he has soo many lol

[07:05] *** dogbert11 joined
[07:08] *** dogbert17 left
[07:10] *** guifa2 left
[07:39] *** fridim joined
[07:42] *** stoned75 left
[07:44] *** stoned75 joined
[08:08] *** justsomeguy joined
[08:10] <justsomeguy> This is probably a silly question, but is Raku fast (in terms of runtime performance)?

[08:15] *** justsomeguy left
[08:37] *** cpan-raku left
[08:38] *** cpan-raku joined
[08:38] *** cpan-raku left
[08:38] *** cpan-raku joined
[08:41] *** Black_Ribbon left
[08:41] *** mirrorbird left
[08:53] *** MasterDuke joined
[08:56] *** JJMerelo joined
[08:58] *** kensanata joined
[08:59] <JJMerelo> Like a PRAYER, TWEAK was introduced in the set of Raku phasers. Learn all about it in today's entry in the 20th anniversary calendar, which was on me https://raku-advent.blog/2020/08/15/rfc-307-by-simon-cozens/

[08:59] <tellable6> 2020-08-14T20:43:54Z #raku <[Coke]> jjmerelo I can be ready in about an hour from now.

[08:59] <tellable6> 2020-08-14T20:44:08Z #raku <[Coke]> jjmerelo sorry about the delay!

[08:59] <tellable6> 2020-08-14T21:48:24Z #raku <tbrowder> jjmerelo pls disregard avl-tree prob

[08:59] <tellable6> 2020-08-14T22:18:28Z #raku <[Coke]> jjmerelo committed rfc28, created a placeholder in wordpress... unable to figure out how to paste in markdown.

[08:59] <tellable6> 2020-08-14T22:22:09Z #raku <[Coke]> jjmerelo - ok, figured out how, but when I run the tool, I get 'abort trap 6', presumably related my old "one of cro's deps doesn't work on the mac" problem. I leave it to you to post the article.

[08:59] <JJMerelo> .tell [Coke] Ok, many thanks.

[08:59] <tellable6> JJMerelo, I'll pass your message to [Coke]

[09:00] <JJMerelo> .tell Altai_man do you want me to upload the article for you too?

[09:00] <tellable6> JJMerelo, I'll pass your message to Altai-man

[09:02] <JJMerelo> .tell [Coke] I'll also try to schedule yours for the last day, as you originally intended. 

[09:02] <tellable6> JJMerelo, I'll pass your message to [Coke]

[09:03] <Altai-man> JJMerelo, I have $dayjob now, so that would be nice. I hope code examples would be colored, github gist method works for you?

[09:04] <JJMerelo> Altai-man you probably mean the original script that Tom or zoffix created. 

[09:04] <Altai-man> Yes.

[09:04] <Altai-man> I mean, whatever works, IIRC it just uploads a gist, downloads page and extracts certain html block, it can be done even manually.

[09:05] <JJMerelo> Altai-man to tell you the truth, I'm not sure it works... I'll give it a try. Generally, if they are short snippets, I let WP handle it; if they are longer, I create a gist manually

[09:05] *** mirrorbird joined
[09:05] <JJMerelo> I'm going to schedule it for tomorrow, then. And thanks :-)

[09:08] <Altai-man> https://modules.raku.org/dist/RakuAdvent::WordPress:cpan:TBROWDER looks relevant

[09:08] *** sjm_uk left
[09:09] <JJMerelo> Hum, uses HTML for input. Thanks anyway, I can always check it out. 

[09:11] <Altai-man> Oh, right. :S

[09:11] <Altai-man> Then Acme::Advent::Highlighter.

[09:11] <Altai-man> Or wait for me this evening.

[09:15] <JJMerelo> No problem, I'll do it

[09:15] *** sena_kun joined
[09:16] *** Altai-man left
[09:18] *** sjm_uk joined
[09:27] *** mirrorbird left
[09:35] *** Sgeo left
[09:50] *** JJMerelo left
[10:21] *** mirrorbird joined
[10:22] *** JJMerelo joined
[10:26] *** zxcvz left
[10:33] *** sjm_uk left
[11:07] *** kensanata left
[11:16] <Geth> ¦ advent: 333e62542d | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20th/articles/rfc159.md

[11:16] <Geth> ¦ advent: Create rfc159.md

[11:16] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/333e62542d

[11:17] <lizmat> Comments welcome ^^

[11:17] <lizmat> .tell JJMerelo please schedule it at your convenience

[11:17] <tellable6> lizmat, I'll pass your message to JJMerelo

[11:18] <lizmat> .tell JJMerelo please schedule rfc159.md at your convenience

[11:18] <JJMerelo> lizmat got it. Thanks a lot, Liz, I appreciate. In principle, it will go right behind Altai_man's, next Monday.

[11:18] <tellable6> lizmat, I'll pass your message to JJMerelo

[11:18] <lizmat> oki

[11:19] <JJMerelo> With [Coke]'s already in, that leaves only two to go. So almost there :-)

[11:23] *** mirrorbird left
[11:33] <lizmat> JJMerelo I do plan to do the RFC200 one as well, is that already included in your calculations?

[11:34] <JJMerelo> No, it's not. Then it's only one to go!

[11:34] <JJMerelo> I can do it if no one else stands up

[11:35] * sena_kun will finish another draft if someone could tell ow export of operators from packages works

[11:35] <sena_kun> s/ow/how/

[11:36] <lizmat> operators are subs

[11:36] <lizmat> sub infix:<foo> is export { }

[11:37] <sena_kun> lizmat, can I export multi infix:<+> this way? I tried and it said multi need to export proto, so I created proto with is export and then some error I don't clearly remember now.

[11:38] <lizmat> ah, you want to *add* a candidate?

[11:38] <sena_kun> Yes.

[11:39] <lizmat> the way I've done that is:

[11:40] * lizmat looks at an example in one of her modules

[11:41] <sena_kun> My current code is https://gist.github.com/Altai-man/f01dcc42134aff363d754cea7f423aa0  I am not sure how what I do should be implemented, to be honest, so the draft I almost finished became useless for this reason. No sense to write about something if you're not 100% good with it.

[11:41] *** sjm_uk joined
[11:42] <lizmat> https://modules.raku.org/dist/Array::Circular:cpan:ELIZABETH/lib/Array/Circular.pm6#L3

[11:42] <lizmat> and https://modules.raku.org/dist/Array::Circular:cpan:ELIZABETH/lib/Array/Circular.pm6#L34

[11:42] <lizmat> and https://modules.raku.org/dist/Array::Circular:cpan:ELIZABETH/lib/Array/Circular.pm6#L50

[11:42] <sena_kun> Hmm, this is a bit advanced. :S

[11:43] <sena_kun> (not for me, but likely for the reader)

[11:43] <lizmat> I hope the newdisp would allow for an easier way to do this

[11:43] <lizmat> or maybe jnthn or someone else can point me to a better way of doing that now  :-)

[11:44] <lizmat> perhaps some MOP magic would be possible nowadays

[11:46] <sena_kun> I can share the draft if anyone is interested in tech reviewing it and maybe suggesting another direction where the overall narration should go.

[11:46] <JJMerelo> sena_kun please do that

[11:47] <JJMerelo> Nothing is too advanced if there are links to relevant documents, or examples introduce the stuff gradually.

[11:47] *** Celelibi left
[11:48] <sena_kun> Not really "advanced", the problem is that I drove the post narration to the point where it is broken, so either the premise itself is not good or I wrote some stupid nonsense somewhere along the line and it went downhill.

[11:48] <sena_kun> Wait, what

[11:49] <lizmat>  $dispatcher.add_dispatchee($code); seems a lead

[11:49] <sena_kun> Disregard all I wrote.

[11:49] <lizmat> ?

[11:49] <sena_kun> The article draft I struggled with is about, ahem, RFC 159. :)

[11:52] <lizmat> aaahhh?

[11:53] <JJMerelo> I don't think it's a problem that a RFC is repeated. 

[11:53] <sena_kun> I guess that's what I got for not using schedule properly.

[11:53] <JJMerelo> Unless you think so, of course.

[11:54] <sena_kun> Another solution is to take another RFC and write a post, that's it.

[11:54] <lizmat> sena_kun: I didn't know

[11:54] <lizmat> :-(

[11:54] <sena_kun> lizmat, no, it's not your fault, in fact, it is awesome you did it.

[11:55] <sena_kun> Because I clearly lack expertise for it anyway.

[11:55] <lizmat> I originally didn't plan on doing 159, but started writing 200 and saw it needed an intro into 159

[11:55] <lizmat> and then that grew into a full blog post

[11:56] <sena_kun> Yeah, that's great, as now things will be more natural.

[11:57] <Geth> ¦ advent: c5c7f3ccba | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 20th/articles/rfc159.md

[11:57] <Geth> ¦ advent: Tweaks suggested by woolfy++

[11:57] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/c5c7f3ccba

[11:57] *** cpan-raku left
[11:58] *** cpan-raku joined
[11:58] *** cpan-raku left
[11:58] *** cpan-raku joined
[11:58] <JJMerelo> sena_kun do whatever you think is best. My take is that it's no big deal to have two different takes on the same RFC. You can even link that post if it's already been published.

[12:00] <lizmat> sena_kun: agree

[12:02] <lizmat> sena_kun: what error did you get when exporting a multi sub infix? 

[12:02] <lizmat> I'm not seeing it?

[12:02] <sena_kun> lizmat, without proto?

[12:02] <lizmat> yeah

[12:02] <sena_kun> Weird.

[12:03] <sena_kun> Removing proto now I am not seeing it, but the idea behind this code is very broken, so don't waste your time on it.

[12:03] <lizmat> ok, what I needed was to export a trait_mod: which has its own sets of gnarly bits :-)

[12:04] *** rindolf left
[12:04] <sena_kun> Yeah, this is a bit more interesting task. :)

[12:13] *** mscha joined
[12:16] *** rindolf joined
[12:17] *** mscha left
[12:21] *** sftp left
[12:21] *** sftp joined
[12:40] *** aborazmeh joined
[12:40] *** aborazmeh left
[12:40] *** aborazmeh joined
[12:45] *** sjm_uk left
[12:55] *** mirrorbird joined
[13:01] *** mirrorbird left
[13:01] *** mirrorbird_ joined
[13:04] *** mirrorbird joined
[13:05] *** mirrorb2rd joined
[13:05] *** mirrorbird left
[13:05] *** mirrorb2rd left
[13:06] *** mirrorbird_ left
[13:06] *** cobalt joined
[13:07] *** cobalt is now known as Guest27754

[13:08] <Guest27754> Hey, are there any resources on how to get started with raku available? Seems like an interesting language and I would like to get started. Thanks in advance for any help.

[13:10] *** mirrorbird joined
[13:10] <Guest27754> I have already experience with C/C++ and Python 

[13:10] *** Guest27754 left
[13:14] *** Altai-man joined
[13:15] *** aborazmeh left
[13:16] *** JJMerelo left
[13:16] *** sena_kun left
[13:17] <lizmat> Seems like Guest27754 had a short attention span

[13:17] <lizmat> https://raku.guide would be a good starting point

[13:21] *** mirrorbird left
[13:25] <rindolf> lizmat: thanks! :)

[13:38] *** mirrorbird joined
[13:45] *** clarjon1 left
[13:46] *** lucasb joined
[13:57] *** sjm_uk joined
[14:00] *** Grauwolf left
[14:07] *** clarjon1 joined
[14:22] *** rockxloose left
[14:24] *** rockxloose joined
[14:32] *** rockxloose left
[14:33] *** rockxloose joined
[14:37] *** mirrorbird left
[14:46] *** guifa2 joined
[14:49] <guifa2> o/

[14:53] <lizmat> guifa2 \o

[14:53] * guifa2 just found out he's going to be even more productive this year than he thought for Raku stuff

[14:53] <lizmat> ++guifa2 

[14:54] <guifa2> good/bad reasons lol.  They canelled spring break, and pushed back the start of next academic semester, so two month christmas break (yay time to code). but no spring break when I might actually be able to travel

[15:00] *** cpan-raku left
[15:07] *** cpan-raku joined
[15:07] *** cpan-raku left
[15:07] *** cpan-raku joined
[16:03] *** MilkmanDan left
[16:11] *** wamba joined
[16:19] *** melezhik joined
[16:20] <melezhik> how can I coerce Array into List? 

[16:21] *** MilkmanDan joined
[16:22] <lizmat> .List ?

[16:22] <lizmat> m: my @a = ^10; my @b := @a.List; @b[0] = 42

[16:22] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Cannot modify an immutable List ((0 1 2 3 4 5 6 7 8 9))␤  in block <unit> at <tmp> line 1␤␤»

[16:24] <melezhik> thanks

[16:25] *** wamba left
[16:26] *** MilkmanDan left
[16:32] *** melezhik left
[16:34] *** MilkmanDan joined
[16:36] *** skids joined
[16:42] *** Maylay left
[16:47] *** guifa2 left
[16:59] *** Maylay joined
[17:08] *** melezhik joined
[17:09] <melezhik> I stumble with some "weird" Raku behavior when handling Arrays of Arrays/Hashes 

[17:09] <melezhik> let me give some examples

[17:09] <melezhik> m: my $a = [[1,2]]; for $a<> -> $i { say $i}

[17:09] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «1␤2␤»

[17:09] <melezhik> m: my $a = [[1,2]]; for $a<> -> $i { say $i, " / " }

[17:09] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «1 / ␤2 / ␤»

[17:09] <melezhik> m: my $a = [[1,2], %( foo => 1, bar => 2 )]; for $a<> -> $i { say $i, " / " }

[17:09] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «[1 2] / ␤{bar => 2, foo => 1} / ␤»

[17:10] <MasterDuke> m: my $a = [[1,2],]; for $a<> -> $i { say $i, " / " }

[17:10] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «[1 2] / ␤»

[17:10] <melezhik> why in the second case `$a<>` split array by bigger chunks?

[17:10] <melezhik> I've not changed iterator logic, I only pushed to `$a` and Hash  

[17:10] <melezhik> and -> a

[17:11] <melezhik> this is quite confusing the `<>` logic changes when you push data to array ):

[17:15] <melezhik> looks like if I only have a ONE element in array `$a = [ [1,2]] ` it differs from the case when an array has more then ONE element `$a = [[1,2], %( foo => 1, bar => 2)]`

[17:15] *** sena_kun joined
[17:16] *** Altai-man left
[17:21] <melezhik> looks decontarization happens in the first case 

[17:23] <melezhik> m: my $a = [[1,2]]; for $a<> -> $i { say $i.^name }

[17:23] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Int␤Int␤»

[17:23] <melezhik> m: my $a = [[1,2], [1,2]]; for $a<> -> $i { say $i.^name }

[17:23] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array␤Array␤»

[17:24] <melezhik> I expect the first run should produce Array

[17:26] <melezhik> so that `<>` will consistently apply the same logic when dealing with arrays, irrespective of array size 

[17:26] *** dogbert17 joined
[17:27] <tbrowder> hi

[17:28] <tbrowder> question: i have a recursive sub that writes to stdout.how can i internall

[17:29] *** dogbert11 left
[17:30] <tbrowder> internally capture it all as a string for reformatting or do i need a mutil?

[17:32] <tbrowder> the sub is acting over a tree structure and writing all nodes' key as it moves to each node.

[17:34] *** gfldex left
[17:34] *** gfldex joined
[17:35] <[Coke]> Ideally, you would have those subs output to the string themselves rather than try to capture stdout. You can temporarily replace stdout with something that does the capture however, and replace it when you're done.

[17:35] <tellable6> 2020-08-15T08:59:50Z #raku <JJMerelo> [Coke] Ok, many thanks.

[17:35] <tellable6> 2020-08-15T09:02:43Z #raku <JJMerelo> [Coke] I'll also try to schedule yours for the last day, as you originally intended. 

[17:36] <[Coke]> one sec.

[17:36] <tbrowder> i've tried this: my $s = (show-keys($n));

[17:38] *** Grauwolf joined
[17:38] <[Coke]> m: my $output; { temp $*OUT = class { method print(*@args) { $output ~= @args.join } }; say 3; say 4; say 5 }; say "..$output.."

[17:38] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «..3␤4␤5␤..␤»

[17:38] <tbrowder> i could use a multi and write to a buf or tmp file but i know there's an expert  here that use the power of raku to avoid that.

[17:38] <[Coke]> tbrowder: ^^

[17:39] <[Coke]> you could go further and make the output an attribute of the class so there's no leaky globalish variables, but I was too lazy

[17:39] <tbrowder> looks pretty spiffy to me. thnx!

[17:39] <[Coke]> you could also pull out the class definition instead of inlining it

[17:40] <[Coke]> tbrowder: stole it from myself from the rosettacode examples in roast

[17:40] <CIAvash> melezhik: When you write `my $a = [[1,2]]`, `$a` becomes `[1,2]`. You need to add a comma like MasterDuke showed you.

[17:40] <tbrowder> aha, good source%

[17:41] <tbrowder> !

[17:42] <melezhik> I see that, CIAvash it's valid workaround, but this is still _workaround_ :-))

[17:42] <[Coke]> tbrowder: there's also a nice module in the ecosystem that does more.

[17:43] <CIAvash> melezhik: that's how things work, this is not a workaround

[17:44] <tbrowder>  since this is a rosetta code thing i will try not to use externals if possible.

[17:45] <CIAvash> melezhik: It's the single argument rule

[17:48] *** dogbert11 joined
[17:49] <timotimo> the circumfix:<[ ]> operator will iterate what you give to it, so [1, 2] iterates through 1, 2, and [[1, 2]] will iterate over 1, 2 in the first step to create [1, 2], then it will iterate over [1, 2] in the second step, to create [1, 2] again

[17:49] <timotimo> this mechanism also makes [[[[1, 2]]]] give [1, 2]

[17:50] <timotimo> putting a , in there gives you an actual outer list that will be iterated over instead of the array

[17:50] <timotimo> so [[1, 2],] will first iterate over 1, 2 in the middle to give [1, 2] and then it will iterate over ([1, 2],) to give [1, 2] as first element, and no second element, so it gives you [[1, 2],]

[17:51] <timotimo> this also lets you do stuff like [<foo bar baz>] to give an array instead of a list, since it turns the inner list into an array for you

[17:51] *** dogbert17 left
[17:59] <melezhik> sorry timotimo why I need to put a comma to the end of the array to change iteration logic?

[18:00] <timotimo> you don't change iteration logic

[18:00] <timotimo> you just change what the target of iteration is

[18:00] <timotimo> in one case the array is iterated, in the other it's a list with one entry which is the array

[18:01] <timotimo> so in the first case you get the contents of the array as the result, but in the second case the array itself is the result, because it's the only entry in the list that's being iterated

[18:02] <melezhik> m: my $a = [[1,2]]; for $a<> -> $i { say $i.^name }

[18:02] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Int␤Int␤»

[18:03] <melezhik> m: my @a  = [[1,2]]; for @a<> -> $i { say $i.^name }

[18:03] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Int␤Int␤»

[18:03] <melezhik> timotimo - "so in the first case you get the contents of the array as the result," - not only that? I mean there is also decontarization happens here, does not it?

[18:04] <melezhik> why?

[18:06] <timotimo> i need to look at the original code again, hold on

[18:08] <timotimo> which of the lines was the "second case"?

[18:08] <timotimo> you were comparing [[1, 2]] vs [[1, 2], %( foo=> 1, bar => 2 )] right?

[18:09] <melezhik> m: my @a  = [[1,2]]; for @a<> -> $i { say $i.^name }

[18:09] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Int␤Int␤»

[18:09] <melezhik> this is the first one

[18:09] <timotimo> OK

[18:09] <melezhik> I would expect here "Array" output not "Int Int"

[18:10] <melezhik> I mean decontarezation/flattering happening here under the hood

[18:10] <timotimo> m: my @a = [[1, 2]]; dd @a

[18:10] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array @a = [1, 2]␤»

[18:10] <melezhik> and it does not happen with a List

[18:10] <timotimo> m: my @a = [[1, 2]]; dd @a; say @a.elems

[18:10] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array @a = [1, 2]␤2␤»

[18:11] <timotimo> m: my @a = [1, 2]; dd @a; say @a.elems

[18:11] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array @a = [1, 2]␤2␤»

[18:11] <timotimo> m: my @a = 1, 2; dd @a; say @a.elems

[18:11] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array @a = [1, 2]␤2␤»

[18:11] <timotimo> these are all the same

[18:11] <melezhik> my assumption (I might be wrong here) that `@a = [[1,2]]` is Array with 1 element, where this element is also is an Array with 2 elements (Strings)

[18:11] <timotimo> yes, that is wrong :)

[18:12] <melezhik> why?

[18:12] <timotimo> assigning to an array is a "list assignment" and causes iteration to happen

[18:12] <melezhik> probably perl5 influence .... but still why?

[18:12] <timotimo> and [[1, 2]] is already the same as [1, 2]

[18:18] <CIAvash> "The only one of these that is likely to provide a surprise is [[1]], but it is deemed sufficiently rare that it does not warrant an exception to the very general single argument rule." from https://design.raku.org/S07.html#The_single_argument_rule

[18:19] *** wamba joined
[18:20] <timotimo> sorry i'm AFK half the time

[18:27] *** sjm_uk left
[18:28] <melezhik> timotimo thanks, I need to digest that, but thank you 

[18:31] *** holyghost joined
[18:33] *** ensamvarg3 left
[18:43] *** melezhik left
[18:45] *** Sgeo joined
[18:53] *** sjm_uk joined
[19:14] *** dataangel joined
[19:18] *** oneeggeach joined
[19:18] *** oneeggeach left
[19:30] *** wamba left
[19:51] *** wamba joined
[20:01] *** clarjon1 left
[20:36] *** rindolf left
[20:54] *** wamba left
[20:57] *** stoned75 left
[20:58] *** stoned75 joined
[21:09] *** sno left
[21:15] *** Altai-man joined
[21:17] *** sena_kun left
[21:27] <tbrowder> m: a

[21:27] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[21:28] <tbrowder> m: 'a' cmp 2

[21:28] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "cmp" in expression "'a' cmp 2" in sink context (line 1)␤»

[21:28] <tbrowder> m: say 'a' cmp 2

[21:28] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «More␤»

[21:30] <tbrowder> i would for the output to say "LeftMore" (and 'LeftLess' and 'Same')

[21:32] <tbrowder> *would love it better if the ouput said...

[21:32] * lizmat recalls discussions about the naming of what became the Order enum

[21:33] <lizmat> this is what was decided on then

[21:33] <lizmat> tbrowder: do you want it to say something different in *your* code only?

[21:34] *** sno joined
[21:34] <tbrowder> well, that's a step forward.

[21:34] <lizmat> multi method gist(::?CLASS:D:) { $!key }

[21:35] <lizmat> so changing that would either involve overriding the .gist method, or changing the `$!key` attribute

[21:35] <tbrowder> i've been struggling with implicit numstr equality comparisons and cmp is the only thing reliable

[21:36] <tbrowder> i've found so far, just a bit awkward to use

[21:36] <lizmat> why?

[21:36] <lizmat> you can use the Order numerically as -1 0 or 1 

[21:37] <lizmat> m: say +Less

[21:37] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «-1␤»

[21:37] <lizmat> m: say +Same

[21:37] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «0␤»

[21:37] <lizmat> m: say +More

[21:37] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «1␤»

[21:37] <lizmat> if you really want to mess with things:

[21:37] <lizmat> m: use nqp; nqp::bindattr(Order::Less,Order,q/$!key/,"LeftLess"); say Less

[21:37] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «LeftLess␤»

[21:38] <tbrowder> because i've assigned the cmp result to a var and use it in a three-way expression later and am not used to using it yet   :-)

[21:39] <tbrowder> no, i'm just whining...

[21:40] <tbrowder> thanks for letting me vent. cmp is cool.

[21:42] <tbrowder> but lt and gt are supposed to coerce nums to str for comparison and that wasn't reliable.

[21:43] <tbrowder> cmp was the answer

[21:54] <lizmat> :-)

[21:54] *** melezhik joined
[21:55] <melezhik> .tell timotimo I've broken down the Arrays VS Lists principal in Sparrow6 args stringification mechanism - https://github.com/melezhik/Sparrow6/blob/master/documentation/development.md#list-vs-arrays  

[21:55] <tellable6> melezhik, I'll pass your message to timotimo

[21:56] <melezhik> hopefully now I am on the same page

[21:56] <melezhik> ))

[22:05] *** melezhik left
[22:07] <tbrowder> lizmat: actualy, couldn't i create my own infix opers using cmp behind the curtain? that might be the best for my current situation.

[22:07] <tbrowder> <=, <, etc.

[22:07] <lizmat> that is definitely always an option

[22:16] *** Voldenet left
[22:17] *** Voldenet joined
[22:17] *** Voldenet left
[22:17] *** Voldenet joined
[22:27] <timotimo> .tell melezhik i'm not sure where the <> operator enters into this, and the `will "convert" args into a List` part seems a little misguided

[22:27] <tellable6> timotimo, I'll pass your message to melezhik

[22:42] *** dogbert17 joined
[22:46] *** dogbert11 left
[23:09] *** Voldenet left
[23:18] *** Voldenet joined
[23:18] *** Voldenet left
[23:18] *** Voldenet joined
[23:19] *** stanrifkin joined
[23:19] <stanrifkin> What GUI lib should i use?

[23:21] *** melezhik joined
[23:22] <melezhik> .tell timotimo `<>` works here - https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner.pm6#L126

[23:22] <tellable6> melezhik, I'll pass your message to timotimo

[23:22] <melezhik> on "the `will "convert" args into a List` part seems a little misguided"

[23:22] <tellable6> 2020-08-15T22:27:39Z #raku <timotimo> melezhik i'm not sure where the <> operator enters into this, and the `will "convert" args into a List` part seems a little misguided

[23:23] <melezhik> m: say [ [1,2] ].^name

[23:23] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array␤»

[23:23] <melezhik> m: say [ [1,2], ].^name

[23:23] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «Array␤»

[23:23] <melezhik> upps, I expected it to be List

[23:23] <melezhik> weird

[23:24] <melezhik> m:  for [ [1,2] ]<> -> $i {say $i}

[23:24] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «1␤2␤»

[23:24] <melezhik> m:  for [ [1,2], ]<> -> $i {say $i}

[23:24] <camelia> rakudo-moar 9d6d8dd7a: OUTPUT: «[1 2]␤»

[23:24] <melezhik> timotimo I am still confused in terminology ...

[23:25] <melezhik> why `[[1]]` and `[[1],]` acts differently with `<>` ?

[23:26] <melezhik> I was under impression that just `[[1]]` is an Array and `[[1],]` is List, but I can see now it's not the case

[23:27] <melezhik> so if underlying structures are of the same type (Array), why do they act different with `<>` ? 

[23:27] <rypervenche> Good ol' zen slices.

[23:30] <melezhik> I mean I know now that adding comma to the end of my array will do the trick for me, I am just not sure if I could explain it myself, why, in terms of Raku types ... or whatsover ...

[23:32] *** leont left
[23:35] <melezhik> also on "putting a , in there gives you an actual outer list that will be iterated over instead of the array" - I am not sure if understand that honestly ... if there is an rakudo doc that describe a `<>` behavior  for various cases?

[23:39] *** melezhik left
