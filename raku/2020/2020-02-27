[00:04] *** leont left
[00:05] *** leont joined
[00:14] *** cfa left
[00:17] *** pecastro left
[00:22] *** leont left
[00:25] *** sena_kun joined
[00:27] *** Altai-man_ left
[00:32] *** hungrydonkey left
[00:36] *** wildtrees left
[00:39] *** NODE left
[00:41] *** NODE joined
[00:54] *** NODE left
[00:57] *** NODE joined
[01:04] *** Kaiepi left
[01:05] *** MasterDuke left
[01:05] *** Kaiepi joined
[01:18] *** lucasb left
[01:19] *** lichtkind left
[01:28] *** squashable6 left
[01:31] *** squashable6 joined
[01:34] *** Altai-man_ joined
[01:36] *** sena_kun left
[01:41] *** _jrjsmrtn joined
[01:41] *** __jrjsmrtn__ left
[01:43] *** ToddAndMargo joined
[01:43] <ToddAndMargo> Anyone on newbie duty?

[01:44] <ToddAndMargo> Windows 7; What am I doing wrong.  I am trying to call `dir "test 1"`  

[01:45] <ToddAndMargo> C:\NtUtil>perl6 -e "my $proc=run( 'dir', 'test 1', :out ); my @RtnStr  = $$proc.out.slurp-rest.lines; for @RtnStr -> $Line { say $Line;}"

[01:45] <ToddAndMargo> Nothing comes back

[01:49] <rypervenche> ToddAndMargo: Have you tried running it in a script?

[01:50] <rypervenche> I have problems running it from the command line because of the quoting and variables.

[01:51] *** ToddAndMargo left
[01:52] <poga> hi! Is there a way to get AST from raku code? I found this https://docs.raku.org/type/AST but it doesn't show much

[01:53] <rypervenche> poga: I think you want .made, which is used with make and grammars: https://docs.raku.org/routine/make

[01:57] <poga> rypervenche: thanks! I will look into it

[01:57] <rypervenche> poga: This might be more useful for you: https://docs.raku.org/language/grammar_tutorial

[02:19] *** molaf left
[02:31] *** molaf joined
[02:44] <tbrowder> todd: i see two $$:

[02:44] <tbrowder> which looks wrong

[02:48] *** ToddAndMargo joined
[02:49] <ToddAndMargo> I somehow got kicked off.  Thi sis the specific command I am trying to run:

[02:49] <ToddAndMargo> C:\NtUtil>fsutil usn readdata "C:/NtUtil/test 1"Major Version    : 0x2Minor Version    : 0x0FileRef#         : 0x0019000000021a81Parent FileRef#  : 0x001e000000005b8bUsn              : 0x00000000460f7dd8Time Stamp       : 0x0000000000000000 00:00:00 1/1/1601Reason           : 0x0Source Info      : 0x0Security Id      : 0x0File Attributes  :

[02:49] <ToddAndMargo> 0x20File Name Length : 0xcFile Name Offset : 0x3cFileName         : test 1

[02:58] *** leont joined
[03:14] *** ToddAndMargo left
[03:18] *** aborazmeh joined
[03:18] *** aborazmeh left
[03:18] *** aborazmeh joined
[03:35] *** sena_kun joined
[03:37] *** Altai-man_ left
[03:52] *** leont left
[03:58] *** ToddAndMargo joined
[03:59] <ToddAndMargo> I keep getting kicked off.  :'(

[04:23] *** cpan-raku left
[04:24] *** cpan-raku joined
[04:24] *** cpan-raku left
[04:24] *** cpan-raku joined
[04:41] *** aborazmeh left
[04:42] *** NODE left
[04:43] *** NODE joined
[04:59] *** PavelB joined
[05:00] *** Celelibi left
[05:11] *** Celelibi joined
[05:27] *** molaf left
[05:34] *** Altai-man_ joined
[05:36] *** sena_kun left
[05:39] *** a3r0 joined
[05:42] <elcaro> does MVM_DISABLE_JIT disable JIT when I run raku, or do I have to compile rakudo with that flag set

[05:50] *** guifa_ joined
[05:51] *** guifa left
[05:51] *** guifa_ is now known as guifa

[06:04] *** aborazmeh joined
[06:04] *** aborazmeh left
[06:04] *** aborazmeh joined
[06:12] *** xelxebar left
[06:14] *** sauvin joined
[06:38] <Voldenet> elcaro: my manpage says that MVM_JIT_DISABLE is an environment variable

[06:40] <Voldenet> elcaro: https://github.com/MoarVM/MoarVM/blob/master/docs/moar.pod relevant docs

[06:45] *** aborazmeh left
[06:59] *** wamba joined
[07:02] *** cognominal joined
[07:05] *** cognomin_ left
[07:09] *** PavelB left
[07:35] *** sena_kun joined
[07:36] *** Altai-man_ left
[07:37] *** abraxxa joined
[07:42] *** abraxxa left
[07:42] *** abraxxa joined
[07:58] *** NODE left
[07:59] *** NODE joined
[08:01] *** ToddAndMargo left
[08:03] *** NODE left
[08:04] *** NODE joined
[08:05] *** NODE left
[08:07] *** NODE joined
[08:07] *** domidumont joined
[08:18] *** stoned75 left
[08:23] *** sno left
[08:42] *** domidumont left
[08:45] *** dakkar joined
[08:45] *** xelxebar joined
[08:46] *** wamba left
[08:51] *** Black_Ribbon left
[08:51] *** wamba joined
[09:03] *** wamba left
[09:07] *** sno joined
[09:07] *** wamba joined
[09:11] *** rindolf joined
[09:20] *** a3r0 left
[09:34] *** Altai-man_ joined
[09:36] *** Grrrr left
[09:37] *** Grrrr joined
[09:37] *** sena_kun left
[09:44] *** pecastro joined
[10:13] *** domidumont joined
[10:15] *** mowcat joined
[10:18] <rba> Practical Raku and Perl Meetup in Zurich, 23. March 2020  https://www.meetup.com/Swiss-Raku-Perl-Community-Meetup/events/269029945/ retweet: https://twitter.com/baumerits/status/1232972401010495488

[10:22] <Altreus> rypervenche: ah, is it because EXPORT was part of the class and not at the top level of the file?

[10:25] *** reach_satori left
[10:32] *** lichtkind joined
[10:47] *** wamba left
[11:04] *** titsuki joined
[11:09] *** sftp left
[11:11] *** reach_satori joined
[11:27] <Altai-man_> bisectable6, &slurp.candidates.map(*.signature).sort.say

[11:27] <bisectable6> Altai-man_, Bisecting by output (old=2015.12 new=cbd75f7) because on both starting points the exit code is 0

[11:28] <bisectable6> Altai-man_, bisect log: https://gist.github.com/29bf7f0aaac96dcdc41897505e254cd4

[11:28] <bisectable6> Altai-man_, (2016-03-04) https://github.com/rakudo/rakudo/commit/eac1e26d6342d0d65ff39a82d7b204341e986a91

[11:28] *** titsuki left
[11:28] <Altai-man_> bisectable6, &slurp.candidates.map(*.signature).sort.say

[11:28] <bisectable6> Altai-man_, Bisecting by output (old=2015.12 new=cbd75f7) because on both starting points the exit code is 0

[11:28] <bisectable6> Altai-man_, bisect log: https://gist.github.com/79eac7d2f70c84fc6badc3b0165520a3

[11:28] <bisectable6> Altai-man_, (2016-03-04) https://github.com/rakudo/rakudo/commit/eac1e26d6342d0d65ff39a82d7b204341e986a91

[11:34] *** leont joined
[11:35] *** sena_kun joined
[11:37] *** Altai-man_ left
[11:41] <lizmat> wow, that's a blast from the past

[11:42] <tadzik> I expected to see something pre-nom :P

[11:42] <tadzik> but that was wayy earlier

[11:45] <leont> m: sub foo($foo, *@bar) { }; dd $_ for &foo.signature.params.map(*.positional)

[11:45] <evalable6> leont, rakudo-moar cbd75f723: OUTPUT: ¬´Bool::True‚ê§Bool::False‚ê§¬ª

[11:46] <leont> That false is rather unexpected, is that intentional?

[11:46] <leont> Also because *%baz is .named (and .slurpy)

[11:56] <lizmat> because that's a slurpy ?

[11:57] <lizmat> I think it's intentional, because it can slurp many positional arguments ?

[12:07] <leont> I would expect it to be .slurpy and .positional

[12:08] <leont> Just as a slurpy named argument is .slurpy and .named

[12:08] <leont> I don't have a strong opinion either way, but this feels inconsistent

[12:09] <lizmat> well, I think this boils down to the difference between the number of positionals in a signature, and the arity

[12:10] *** tejr left
[12:11] <lizmat> m: dd :($a,*@b).arity

[12:11] <evalable6> lizmat, rakudo-moar 4f63764c8: OUTPUT: ¬´1‚ê§¬ª

[12:18] *** tejr joined
[12:23] *** titsuki joined
[12:27] <Geth> ¬¶ rakudo.org: 616bbb43c9 | (Roman Baumer)++ (committed using GitHub Web editor) | post/announce-rakudo-star-release-2020.01.md

[12:27] <Geth> ¬¶ rakudo.org: Fix date in text of the 2020.01 announcement

[12:27] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/616bbb43c9

[12:31] *** lichtkind left
[12:33] <leont> lizmat: then why it *%foo .named?

[12:34] <leont> I mean .named_names is empty

[12:34] * lizmat suspects you've found a case where jnthn has cut corner, wrt *@a not being positional  

[12:34] <lizmat> *corners

[12:35] <lizmat> or it is just an oversight

[12:37] <jnthn> Either way, things that process/introspect signatures may well rely on the current inconsistency, so we'd need to be rather careful if we want to change it

[12:37] <jnthn> I agree its inconsistent.

[12:40] * leont is filing the issue

[12:57] <sena_kun> El_Che, ping?

[13:15] *** hankache joined
[13:18] *** mowcat left
[13:21] <rypervenche> Altreus: I was using "unit module" and didn't realize it reads the entire file as a block. So I changed it to a module block and put the sub EXPORT outside of that. Fixed the issue. :)

[13:22] <Altreus> mildly pesky because I like the structure that 'unit' gives you

[13:22] <Altreus> I'm sure there's a way of declaring EXPORT so that it works, even if you have unit

[13:28] *** abraxxa left
[13:28] *** abraxxa1 joined
[13:28] <lizmat> Altreus: not atm, afaik

[13:29] <lizmat> but if you can get by with just adding "is export" traits, you don't have to worry about that anyway

[13:29] *** hankache left
[13:31] <Altreus> ah yes, true, most of the time it's not a concern

[13:32] <Altreus> What namespace does EXPORT have, then, when it's in a file but not a module or some other namespace?

[13:32] <lizmat> GLOBAL::EXPORT I think ?

[13:32] <Altreus> presumably it's got special behaviour associated with it so they don't collide

[13:35] *** Altai-man_ joined
[13:35] *** sftp joined
[13:36] <jnthn> It has to be in UNIT

[13:36] <jnthn> And it should be a lexical there

[13:36] <jnthn> It's not in any package (or not looked for there0

[13:36] *** sena_kun left
[13:38] *** pecastro left
[13:40] <Altreus> Raku seems accidentally quite aggressive at failing to report problems

[13:41] <Altreus> eh

[13:41] <Altreus> Let me try that again without shifting blame

[13:41] <Altreus> I seem to find it very easy to write Raku code that doesn't report errors

[13:41] <Altreus> I have to put CATCH { .say } more often than I'd expect

[13:41] <Altreus> It's probably to do with concurrency, but still... things go missing

[13:41] <jnthn> If you're catching an exception, it's getting reported?

[13:42] <Altreus> But if I don't catch it, it goes unreported

[13:42] <Altreus> For example, I just learned I was getting "Type check failed in assignment to $!timestamp; expected DateTime but got Str ("2020-02-27T13:39:41....)

[13:42] <jnthn> Promises that you don't await anywhere, perhaps?

[13:42] <Altreus> I don't know... that's part of the issue I think

[13:43] *** aborazmeh joined
[13:43] *** aborazmeh left
[13:43] *** aborazmeh joined
[13:43] <Altreus> I mean, I wouldn't expect it to work at all if I weren't awaiting them

[13:43] <lizmat> Altreus: hoping to see a MRE  :-)

[13:43] <jnthn> If you put the `start` in sink context, it'll attach a handler that will bring the program down if you don't handle it :)

[13:43] <Altreus> But it's entirely possible the error is contained in some other promise that I'm not awaiting

[13:44] <Altreus> Yeah ... I think my issue is somewhere in not caring whether a promise completes or not

[13:44] <Altreus> I'm still a bit shaky so my whole system is dubious :D

[13:44] <jnthn> If you don't care, just don't store the Promise anywhere

[13:44] <jnthn> Maybe we should put a DESTROY in Promise so that if it is broken and never awaited, we warn

[13:44] <Altreus> indeed

[13:44] <jnthn> A bit like unhandled failures

[13:45] <Altreus> I am unclear what's happening

[13:45] <jnthn> That'd maybe at least identify some such issues

[13:45] <Altreus> I'm also mid-refactor, so I'm finding these problems on the fly

[13:45] <Altreus> I'll pause my refactor and try hunting this down

[13:45] <Altreus> See if I can figure out where the error is going, then see how much of a user error it is to do whatever I'm doing :)

[13:46] <Altreus> Ultimately it would be nice for the language to complain irrespective of how much of a user error it was though

[13:46] <Altreus> so let's see

[13:46] <lizmat> jnthn: re "a DESTROY in Promise", wouldn't that be noisy with some of the timeout structures if there was a timeout ?

[13:47] <Altreus> If I use await in sink context, what happens to a fail?

[13:47] <jnthn> lizmat: Those don't get broken, though?

[13:47] <lizmat> they might get broken without you noticing after the timeout, no ?

[13:48] <jnthn> Altreus: Propagtes to the uncaught handler on the scheduler, which by default reports the exception and exits the program with non-zero

[13:48] <Altreus> right well

[13:48] <Altreus> :P

[13:48] <Altreus> hol up, I'mma try something

[13:48] <jnthn> lizmat: Yeah but...if you used it in an anyof then it *did* get awaited as part of the `anyof` implementation, so it'd not trigger this :)

[13:49] <Altreus> I'm pretty sure there's no promise here

[13:49] <Altreus> I'll commit my code and show it

[13:53] <Altreus> https://github.com/shuppet/p6-api-discord/blob/object-delayed/lib/API/Discord.pm6#L177

[13:53] <Altreus> This CATCH is necessary, or I never learn that Message.new failed

[13:54] <Altreus> None of this appears to be a promise, but it /is/ in a tap

[13:55] <jnthn> $!conn.messages.tap( -> $message 

[13:55] <jnthn> Do

[13:55] <jnthn> start react whenever $!conn.messages -> $message

[13:57] <Altreus> correct

[13:57] <Altreus> but why :)

[13:58] <jnthn> Because structured programming :P

[13:58] <Altreus> furthermore, who wants .tap to swallow errors silently? :x

[13:58] <Altreus> I feel like that's a trap

[13:58] <jnthn> I don't think it does in general

[13:58] <jnthn> They're eventaully meant to cause a sheduler thread to die, and bring the thing down

[13:59] <Altreus> But I'm a noob doing stuff from the docs and I got to .tap instead of start react whenever

[14:00] <Altreus> Especially this idea of putting it in a promise in sink context ... that seems archaic

[14:00] <Altreus> arcane

[14:01] <jnthn> The docs probably should guide people away from .tap and more towards react/supply/whenever

[14:04] <Altreus> What would I lose if I didn't have a promise there?

[14:05] <jnthn> Sorry, I'm confused; what promise?

[14:06] <Altreus> the start in `start react whenever`

[14:06] <jnthn> Ah...sorry, I get confused when pepole call start "a promise" :)

[14:06] <jnthn> react is blocking

[14:07] <jnthn> start runs it on the pool

[14:07] <jnthn> I note your method name even has the word start in it...so this fits quite well :)

[14:08] <Altreus> oh of course

[14:08] <Altreus> yes, definitely don't want a blocking react

[14:23] <Altreus> Chrome has not yet realised that docs.raku.org is a search engine

[14:23] <Altreus> jnthn: is start not a promise? :x

[14:24] <jnthn> Altreus: start will 1) schedule some work on the thread pool, 2) return a Promise that will be kept/broken based on the outcome of that work

[14:24] <jnthn> Altreus: So really `start` is a Promise factory, and the thing that it returns is a Promise

[14:25] <Altreus> My instinct is to say that a straight-up Promise doesn't do the work until you ask for it

[14:26] *** aborazmeh left
[14:27] <jnthn> That isn't really how it is; a Promise is a synchronization mechanism, and the work is arranged by whatever gave you the Promise

[14:27] <jnthn> So Promise.in(1) is scheduling a timer and then returning the Promise, and keeping it when the time elapses.

[14:28] <Altreus> ... right, it's almost identical to Future in that regard

[14:28] <Altreus> The concepts are really orthogonal

[14:30] <jnthn> Yeah, in Raku we don't really have a distinct word for "a Promise that is backed by some running code"

[14:31] <Altreus> once you realise the separation it's obvious

[14:33] <Altreus> Today's internet is stressing me out

[14:33] <Altreus> Try to type and it's cut me off again

[14:33] <Altreus> I was going to ask, on a separate tangent, the best way of accepting a Str in a constructor to populate a DateTime property

[14:33] <Altreus> I feel like I don't want to override BUILD, but TWEAK is too late

[14:35] <Altreus> I could monkey type DateTime

[14:35] <Altreus> is that allowed?

[14:35] <jnthn> Well, with the usual constraint that if two modules do it, your precomp ends here.

[14:36] <jnthn> But...feels like overkill

[14:36] <jnthn> Why is TWEAK too late?

[14:36] <Altreus> cos the object is constructed already, no?

[14:36] <Altreus> Did I misunderstand?

[14:37] <lizmat> you can still modify the object, can't you?

[14:37] <lizmat> to make it right?

[14:37] <jnthn> Well, TWEAK is the last step in the construction

[14:37] <Altreus> But it won't accept a Str in the attribute

[14:38] <Altreus> so I figure it will already have failed

[14:38] <Altreus> TIAS

[14:38] <lizmat> ah, yes, if it is like that, yes

[14:38] <leont> Is there a cute trick to invert an array of arrays?

[14:38] <moritz> leont: invert? like, transpose?

[14:39] <moritz> m: my @a = ['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']; say [Z] @a

[14:39] <evalable6> moritz, rakudo-moar e33fe878b: OUTPUT: ¬´((a 1 x) (b 2 y) (c 3 z))‚ê§¬ª

[14:39] <leont> Yeah, that was the word I was looking for, and I figured it had to be easy :-)

[14:39] <Altreus> can I override BUILD, edit %args, and then call ... samewith?

[14:41] <leont> Is there a way to make that work with lists that aren't all equally long? Or should I just push Any's in there?

[14:42] <jnthn> Altreus: I'd just override `new` and tweak the arg there and then call .bless

[14:42] <lizmat> Altreus: make your own "new" method, then call self.bless

[14:42] <leont> (actually, pushing Any is a terrible idea in my case)

[14:42] <lizmat> wow, jnthn beat me  :-)

[14:43] <Altreus> OK - This is stuff I would like to be easier, though :)

[14:44] <Altreus> coercion in general bth

[14:44] <Altreus> tbh

[14:44] <jnthn> Well, ultimately `has Date() $.foo`

[14:44] <Altreus> I can use DateTime() in a ... oh

[14:44] <leont> Ah, roundrobin is what I want

[14:44] <jnthn> Though it's NYI

[14:44] <Altreus> NYI?

[14:44] <jnthn> Not Yet Implemented

[14:44] <Altreus> oh!

[14:44] <Altreus> ._.

[14:44] <jnthn> At one point it was also really hard to implement

[14:45] <jnthn> Though my last big refactor of assignment makes it easier to do without totally hosing performance of assignment generally :)

[14:46] <Altreus> So I suppose Str has no method DateTime

[14:46] <Altreus> can it?

[14:47] <jnthn> Better would be for DateTime to implement CALL-ME accepting Str

[14:47] <jnthn> Though...really the way this is meant to work is it should call DateTime.new($str)

[14:47] <Altreus> seems good too, although that is not documented in the bit about coercion

[14:48] <lizmat> jnthn: what would DateTime.CALL-ME(Str:D $) give ?

[14:48] <lizmat> DateTime($str) support ?

[14:48] <lizmat> hmmm...

[14:49] <Altreus> Is there a design reason why we have to specify that coercion should happen, by adding postfix ()?

[14:49] <Altreus> as opposed to presumably technical reasons

[14:49] <lizmat> postfix () is just short for (Any)

[14:49] <lizmat> as in, specifying the types you will accept

[14:50] <Altreus> I guess I'm asking if there's a language-design reason why that's not the default assumption

[14:50] <Altreus> as in, omitting () also means (Any)

[14:50] <lizmat> omitting will not coerce

[14:50] <Altreus> I know - I'm asking why

[14:51] <lizmat> because we don't want it to be like Perl where all sorts of coercions happen without you noticing it ?

[14:51] <lizmat> and thereby losing the benefits of gradual typing ?

[14:51] <Altreus> Ah, deeper reasons :)

[14:54] <Altreus> is this the NYI error? :) "Coercion DateTime(Any) is insufficiently type-like to qualify a variable"

[14:54] <moritz> yes, I think so

[14:55] <Altreus> cool, I'll code around it

[15:00] *** wamba joined
[15:03] *** lucasb joined
[15:11] *** lizmat left
[15:19] *** molaf joined
[15:30] *** pecastro joined
[15:35] *** sena_kun joined
[15:36] *** Altai-man_ left
[15:39] <leont> Given a list of values and a list of subs, is there a way to zip-call them?

[15:42] *** molaf left
[15:48] <sena_kun> u: E[0m[{"

[15:48] <unicodable6> sena_kun, U+0045 LATIN CAPITAL LETTER E [Lu] (E)

[15:48] <unicodable6> sena_kun, U+005B LEFT SQUARE BRACKET [Ps] ([)

[15:48] <unicodable6> sena_kun, 7 characters in total (E[0m[{"): https://gist.github.com/ece2fc4c42aeea94f1fb023afa1123e4

[15:49] <sena_kun> u: E[0m[

[15:49] <unicodable6> sena_kun, U+0045 LATIN CAPITAL LETTER E [Lu] (E)

[15:49] <unicodable6> sena_kun, U+001B <control-001B> [Cc] (control character)

[15:49] <unicodable6> sena_kun, 6 characters in total: https://gist.github.com/a20b2bc9196546560eac59be1d4c3a12

[15:53] *** lizmat joined
[15:57] <leont> ¬´Invocant of method 'CALL-ME' must be a type object of type 'List', not an object instance of type 'Array[Code:D]'.  Did you forget a 'multi'?¬ª is a very confusing error message

[16:02] *** Actualeyes joined
[16:05] *** cfa joined
[16:07] *** aborazmeh joined
[16:07] *** aborazmeh left
[16:07] *** aborazmeh joined
[16:09] *** dansolo42 joined
[16:11] <leont> Best solution I currently have is (@converter Z @list).map: -> [ $converter, $item ] { $converter($item) }

[16:11] <leont> It's ok, but I usually there's a cuter way to do this in raku

[16:17] *** mowcat joined
[16:19] *** abraxxa1 left
[16:20] *** abraxxa joined
[16:20] *** wamba left
[16:25] *** hankache joined
[16:27] *** abraxxa left
[16:29] *** hankache left
[16:38] *** aborazmeh left
[16:38] *** veesh_ joined
[16:38] *** veesh left
[16:39] *** veesh_ is now known as veesh

[16:39] *** molaf joined
[16:46] *** lizmat left
[16:47] *** lizmat joined
[16:49] *** hankache joined
[16:49] *** lizmat left
[16:55] *** titsuki left
[17:02] *** wamba joined
[17:09] *** Itaipu left
[17:10] *** Itaipu joined
[17:17] *** aborazmeh joined
[17:17] *** aborazmeh left
[17:17] *** aborazmeh joined
[17:30] *** sno left
[17:33] *** pecastro left
[17:34] *** ctilmes1 left
[17:34] *** Altai-man_ joined
[17:36] <Altreus> Object::Delayed has actually simplified this architecture a lot

[17:36] <Altreus> I don't need any promises any more

[17:36] *** domidumont left
[17:36] <Altreus> mostly because it lets me sack off the actual communication until later, when it can be synced

[17:37] *** sena_kun left
[17:37] <vrurg> Altreus: you could also have a look a my AttrX::Mooish. It does lazy attributes.

[17:37] <tellable6> 2020-02-27T16:27:38Z #raku-dev <lizmat> vrurg how is the precomp going for you ?

[17:38] <Altreus> eh, probably works out the same at this point

[17:38] <Altreus> Same effect on the architecture anyway

[17:38] *** chloekek joined
[17:45] *** MasterDuke joined
[17:47] *** aborazmeh left
[18:07] *** domidumont joined
[18:11] *** molaf left
[18:15] <Geth> ¬¶ problem-solving: vrurg assigned to jnthn Issue RAKUDOLIB destiny? https://github.com/Raku/problem-solving/issues/167

[18:24] *** dakkar left
[18:25] *** sarna left
[18:27] *** ccamel joined
[18:30] *** camelCaser left
[18:34] *** hankache left
[18:42] *** silug left
[18:53] *** wamba left
[19:22] *** wildtrees joined
[19:23] *** Black_Ribbon joined
[19:24] *** sauvin left
[19:32] *** domidumont left
[19:35] *** sena_kun joined
[19:37] *** Altai-man_ left
[19:37] *** lizmat joined
[19:52] *** Black_Ribbon left
[20:02] *** Guest25353 joined
[20:05] *** pecastro joined
[20:06] *** tejr left
[20:13] *** Guest25353 left
[20:14] *** Black_Ribbon joined
[20:16] *** hankache joined
[20:17] *** Doc_Holliwood joined
[20:24] <mst> https://raku.org/archive/doc/design/apo/A01.html

[20:24] <mst> the =encoding seems to've got intended accidentally

[20:24] <mst> no idae who I'm supposed to harass

[20:25] *** lizmat left
[20:27] <MasterDuke> mst: no real idea, but i think hankache and rba have been working on raku.org recently

[20:30] *** aborazmeh joined
[20:30] *** aborazmeh left
[20:30] *** aborazmeh joined
[21:03] *** Doc_Holliwould joined
[21:07] *** Doc_Holliwood left
[21:16] *** sno joined
[21:26] *** Itaipu left
[21:34] *** Altai-man_ joined
[21:37] *** sena_kun left
[21:43] *** reach_satori left
[21:43] *** reach_satori joined
[21:54] *** reach_satori_ joined
[21:54] *** reach_satori left
[22:07] *** Itaipu joined
[22:17] <rba> mst: Looks like this is "broken" already a while age https://web.archive.org/web/20120712010808/http://perl6.org/archive/doc/design/apo/A01.html

[22:18] <rba> s/age/ago/

[22:33] *** lizmat joined
[22:46] *** aborazmeh left
[22:51] *** hankache left
[22:51] *** cpan-raku left
[22:51] *** cpan-raku joined
[22:51] *** cpan-raku left
[22:51] *** cpan-raku joined
[23:00] *** Doc_Holliwould left
[23:02] *** chloekek left
[23:06] *** rindolf left
[23:11] *** tphilipp joined
[23:11] *** tphilipp left
[23:16] *** lucasb left
[23:18] *** tphilipp joined
[23:19] *** tphilipp left
[23:35] *** sena_kun joined
[23:37] *** Altai-man_ left
[23:43] *** sarna joined
[23:46] *** aborazmeh joined
[23:46] *** aborazmeh left
[23:46] *** aborazmeh joined
[23:58] *** pecastro left
