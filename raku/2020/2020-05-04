[00:37] *** releasable6 left
[00:37] *** bisectable6 left
[00:37] *** nativecallable6 left
[00:37] *** quotable6 left
[00:37] *** evalable6 left
[00:37] *** sourceable6 left
[00:37] *** unicodable6 left
[00:37] *** coverable6 left
[00:37] *** linkable6 left
[00:37] *** tellable6 left
[00:37] *** reportable6 left
[00:37] *** committable6 left
[00:37] *** squashable6 left
[00:37] *** notable6 left
[00:37] *** benchable6 left
[00:37] *** greppable6 left
[00:37] *** bloatable6 left
[00:37] *** shareable6 left
[00:37] *** statisfiable6 left
[00:40] *** pippo joined
[00:43] <pippo> p6: say 3;

[00:43] <camelia> rakudo-moar 3d2522eed: OUTPUT: ¬´3‚ê§¬ª

[00:45] <pippo> p6: my @a = ^5; @a[2]:delete; my @b is default(42) = @a.reverse; dd @b[2];

[00:45] <camelia> rakudo-moar 3d2522eed: OUTPUT: ¬´Any @b = Any‚ê§¬ª

[00:45] *** _dev_zero joined
[00:47] <pippo> ^^That should return 42 according to e9468d6a02.

[00:48] *** finsternis joined
[00:55] *** devmikey joined
[01:08] *** stoned75 left
[01:12] *** Xliff joined
[01:12] <holyghost> I'm going to read some evolutionary computation books then write some things in perl6

[01:13] <holyghost> probably starting this week

[01:15] *** farcas1982regreg joined
[01:17] <holyghost> The code will be on github.com/theholyghost2 and on Xliff's server

[01:19] *** devmikey left
[01:23] <Xliff> \o gnolly

[01:26] <holyghost> lo Xliff

[01:28] *** farcas1982regreg left
[01:30] <Xliff> How are things going?

[01:34] <holyghost> Well I've done lots of statistics last year, building packages on the research in perl6, now I'm going to read about evo in adaptive systems

[01:34] <holyghost> Nice things to build games (or schedulers) on

[01:35] <Xliff> Cool!

[01:35] <Xliff> Good luck with that. 

[01:35] <Xliff> Now must reboot. Games are calling.

[01:35] <Xliff> o7

[01:35] <holyghost> I served you well enough as you said earlier, everything gets uploaded to github from your server

[01:35] *** Xliff left
[01:35] <holyghost> ok, take care

[01:38] *** salimsimba left
[01:40] *** molaf left
[01:53] *** molaf joined
[02:00] *** pippo left
[02:46] *** ensamvarg_g6 joined
[02:49] *** VPS left
[02:53] *** Benett left
[02:55] *** Benett joined
[02:56] *** molaf left
[03:23] *** __jrjsmrtn__ left
[03:23] *** _jrjsmrtn joined
[03:52] *** Benett left
[03:52] *** Benett joined
[04:00] *** mahafyi joined
[04:09] *** javan joined
[04:10] *** javan left
[04:17] *** pilne left
[04:18] *** aborazmeh left
[04:18] *** brtastic joined
[04:46] *** xinming joined
[05:31] <mahafyi> to remove double quotes in a double quoted String (like "my text") ,  $my-string.subst("\"", "") removes the first , but not the last "

[05:34] <mahafyi> aah , :g for gloabl. never mind the question, lol

[05:43] *** cgfbee joined
[05:55] *** brtastic left
[06:00] *** sjm_uk joined
[06:00] *** AlexDaniel joined
[06:01] *** AlexDaniel left
[06:01] *** AlexDaniel joined
[06:02] *** stoned75 joined
[06:04] *** epony left
[06:12] *** epony joined
[06:15] *** kst` joined
[06:17] *** kst left
[06:19] *** jjmerelo joined
[06:19] <Geth> ¬¶ doc: 094fb8d8b9 | (Stoned Elipot)++ | doc/Type/Pod/Block.pod6

[06:19] <Geth> ¬¶ doc: Fix multi-line content table

[06:19] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/094fb8d8b9

[06:23] <mahafyi> how to find the execution time and memory usage of a script?

[06:27] *** stoned75 left
[06:32] <AlexDaniel> mahafyi: from inside the script or from the outside?

[06:33] <mahafyi> AlexDaniel : either way is fine 

[06:33] <AlexDaniel> mahafyi: for the inside option, we have telemetry: https://docs.raku.org/type/Telemetry

[06:33] <mahafyi> AlexDaniel : gr8 will read

[06:34] <AlexDaniel> mahafyi: otherwise just `time` will do? :) Especially if it's /usr/bin/time which shows max-rss

[06:35] *** kst`` joined
[06:37] *** kst` left
[06:46] *** patrickb joined
[06:46] *** farcas1982regreg joined
[06:49] *** brtastic joined
[06:50] *** patrickb left
[06:51] *** stoned75 joined
[07:10] *** guifa` left
[07:41] *** rindolf joined
[07:45] *** pecastro joined
[07:51] *** stoned75 left
[07:51] *** stoned75 joined
[07:58] *** hairykitty joined
[07:58] *** Altai-man_ joined
[08:01] *** hairykitty left
[08:12] *** rindolf left
[08:41] *** patrickb joined
[08:44] *** ensamvarg_g6 left
[08:45] *** rindolf joined
[08:50] *** stoned75_ joined
[08:53] <lizmat> weekly: https://github.com/JJ/raku-dist-template

[08:53] *** stoned75 left
[08:54] <lizmat> AlexDaniel: looks like some bots, notably notable6 is awol ?

[08:58] *** sena_kun joined
[08:59] *** Altai-man_ left
[09:12] *** jjmerelo left
[09:14] *** lgtaube left
[09:23] *** xinming left
[09:23] *** xinming joined
[09:29] *** andrzejku joined
[09:39] *** jjmerelo joined
[09:44] *** reportable6 joined
[09:44] *** releasable6 joined
[09:44] *** shareable6 joined
[09:44] *** sourceable6 joined
[09:44] *** committable6 joined
[09:44] *** coverable6 joined
[09:44] *** statisfiable6 joined
[09:45] *** bloatable6 joined
[09:45] *** squashable6 joined
[09:45] *** quotable6 joined
[09:45] *** evalable6 joined
[09:45] *** benchable6 joined
[09:45] *** bisectable6 joined
[09:45] *** nativecallable6 joined
[09:46] *** linkable6 joined
[09:46] *** unicodable6 joined
[09:46] *** tellable6 joined
[09:47] *** notable6 joined
[09:47] <AlexDaniel> weekly: https://github.com/JJ/raku-dist-template

[09:47] <notable6> AlexDaniel, Noted! (weekly)

[09:48] *** greppable6 joined
[09:51] *** ensamvarg_g6 joined
[09:51] *** Black_Ribbon left
[10:14] <Geth> ¬¶ problem-solving: AlexDaniel assigned to jnthn Issue What should be the size of `int`? (and other NativeCall type issues) https://github.com/Raku/problem-solving/issues/182

[10:24] <Geth> ¬¶ problem-solving: AlexDaniel assigned to jnthn Issue What should unicode subscripts do? (and should they do anything at all?) https://github.com/Raku/problem-solving/issues/183

[10:25] *** stoned75_ left
[10:27] *** stoned75 joined
[10:45] *** robertle joined
[10:46] *** stoned75 left
[10:49] *** robertle left
[10:54] <Geth> ¬¶ ecosystem: robertlemmen++ created pull request #490: Remove ReadWriteLock from META.list

[10:54] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/490

[10:55] <Geth> ¬¶ ecosystem: 2b0d7d61f7 | (Robert Lemmen)++ (committed using GitHub Web editor) | META.list

[10:55] <Geth> ¬¶ ecosystem: Remove ReadWriteLock from META.list

[10:55] <Geth> ¬¶ ecosystem: 

[10:55] <Geth> ¬¶ ecosystem: ...the module is on CPAN and should be taken from there rather than from the source repo.

[10:55] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/2b0d7d61f7

[10:55] <Geth> ¬¶ ecosystem: e8c1e9ebf9 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[10:55] <Geth> ¬¶ ecosystem: Merge pull request #490 from robertlemmen/patch-2

[10:55] <Geth> ¬¶ ecosystem: 

[10:55] <Geth> ¬¶ ecosystem: Remove ReadWriteLock from META.list

[10:55] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/e8c1e9ebf9

[10:56] *** Altai-man_ joined
[10:59] *** sena_kun left
[11:14] <mahafyi> when we do a slurp "data.txt" in a react block, will it lead to memory getting full. is there any way or need to handle that like a file handle close?

[11:23] <Geth> ¬¶ problem-solving: AlexDaniel assigned to jnthn Issue Should ¬ø? and ¬°! be an alternative to "" ? https://github.com/Raku/problem-solving/issues/184

[11:27] <AlexDaniel> mahafyi: I think if you do ‚Äúdata.txt‚Äù.IO.lines then it'll give you a lazy Seq

[11:27] <AlexDaniel> mahafyi: but processing the lines in a react block is a bit different‚Ä¶ are you sure you need that? :)

[11:28] <mahafyi> the react block itself modifies the file slurped sometimes. Need to run a match everytime the block runs.

[11:48] <jnthn> slurp with a file name will close the handle, so that probalby isn't the problem

[11:52] <jnthn> I'd probably try and reduce the problem to a small example that shows the memory growth

[11:52] <jnthn> Which may in the process show up what exactly leads to it

[11:53] <jnthn> (And gives an isolated example to file an issue about if it looks like it might be a problem in Rakudo itself)

[11:55] *** stoned75 joined
[12:02] *** Skarsnik joined
[12:05] <Skarsnik> Hello

[12:06] *** kensanata joined
[12:07] <lizmat> Skarsnik o/   (long time no see?)

[12:28] <jjmerelo> Hey!

[12:35] <patrickb> o/

[12:35] <tellable6> 2020-04-28T06:43:39Z #raku-dev <nine> patrickb: you put the precompiled script in the same place we pick when precompiling modules. Please don't invent your own logic there.

[12:35] <tellable6> 2020-04-28T07:40:19Z #raku-dev <tyil> patrickb on precompiled script files, $XDG_CACHE_HOME/raku/precomp

[12:37] *** aborazmeh joined
[12:37] *** aborazmeh left
[12:37] *** aborazmeh joined
[12:44] *** andrzejku left
[12:49] *** mowcat left
[12:53] <Skarsnik> hm, any idea how I can solve conflict on https://github.com/rakudo/rakudo/pull/716 ? (I deleted and redid the fork since and there are other commit on it)

[12:53] <stoned75> hi all!

[12:53] <AlexDaniel> o/

[12:54] <AlexDaniel> Skarsnik: hmm, so do you have the changes rebased on master or not?

[12:54] *** jjmerelo left
[12:54] <AlexDaniel> Skarsnik: if it's just a matter of opening another PR then feel free to do it

[12:54] <AlexDaniel> Skarsnik: but maybe I'm not understanding the question fully

[12:55] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2020/05/04/2020-18-comma-community/

[12:55] <Skarsnik> but it will loose the historic on it?

[12:56] <AlexDaniel> Skarsnik: it's OK

[12:56] <Skarsnik> Gonna be annoying again lol

[12:57] <Geth> ¬¶ doc: 7011d33743 | (Stoned Elipot)++ | doc/Type/Hash.pod6

[12:57] <Geth> ¬¶ doc: Fix link to moved out content

[12:57] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/7011d33743

[12:57] <linkable6> Link: https://docs.raku.org/type/Hash

[12:57] *** sena_kun joined
[13:00] *** Altai-man_ left
[13:01] <Skarsnik> I am not sure I can create a branch with already commits used in another pr 

[13:01] <mahafyi> slurp seems safe, from point of view of memory, i see several PIDs show up in htop (not yet into the telemetry, lol).

[13:05] <Skarsnik> AlexDaniel, I deleted the fork and recreated it since this PR (easier that spending 2h trying to merge change from the original repo xD) but I already have a PR submit with unrelated change (Test module fix), I am not sure I can easily create a branch without these new changes to redo a the NC pr

[13:05] <mahafyi> inside a a react block, watch a syslog with IO::TailFile , seeing some interesting things, that there isn't an ordered handling of lines. The end result is correct, that offending IPs are banned. A slurp of existing iptables chain rules, and match , so as to avoid duplicates. But timewise, it is not always the first syslog line with an offending IP

[13:05] <mahafyi> address that gets acted on first though. Not sure if I wrote out this thing well.

[13:05] *** molaf joined
[13:07] *** andrzejku joined
[13:12] <AlexDaniel> Skarsnik: just create a branch from an earlier commit?

[13:12] <AlexDaniel> Skarsnik: or rebase your new commits?

[13:13] <Skarsnik> I will have to reforce push the Test commit?

[13:14] <Skarsnik> can I creat a branche for an earlier commit without rolling back the main branch?

[13:17] *** Benett left
[13:18] *** Benett joined
[13:25] <AlexDaniel> Skarsnik: only your imagination is the limit :)

[13:25] <Skarsnik> and my patience with git xD

[13:25] <AlexDaniel> exactly!

[13:26] <Skarsnik> wich is very limited

[13:28] <Skarsnik> nativecallable6, int foo;

[13:28] <nativecallable6> Skarsnik, and I oop! Backtrace: https://gist.github.com/de6969d8fb7a66671751564bf7339238

[13:29] <AlexDaniel> yeah it needs some fixing

[13:29] <AlexDaniel> people don't try to use it often enough so it wasn't the top priority :(

[13:30] <AlexDaniel> I did start going through all the bots recently but got distracted with other stuff: https://github.com/Raku/whateverable/issues/377

[13:32] <Skarsnik> hm, I should have worked on a shared repo on WSL, c/p stuff with vim in a terminal is not great x)

[14:01] *** bdju left
[14:03] *** Skarsnik left
[14:04] *** Skarsnik joined
[14:06] <Skarsnik> hm, Git is not supposed to keep track of a file historic when renamed? NC history does not show change past its rename into .rakumod

[14:07] <AlexDaniel> Skarsnik: try --follow ?

[14:07] <Skarsnik> I am looing on github x)

[14:10] <AlexDaniel> Skarsnik: well‚Ä¶ :P

[14:44] <Skarsnik> who the hell put the nativecall trait declaration in a weird export thing :(

[14:56] *** Altai-man_ joined
[14:59] *** sena_kun left
[15:09] *** brtastic left
[15:10] *** jjmerelo joined
[15:12] <tigerpaws> Good morning or afternoon! Can anyone explain why the following code gives (4 4):  `( (3 , 9) X ( 2, 10) ).map: * + *;` or `{ $^a + $^b} for (3,9) X (2,10);`

[15:12] <AlexDaniel> hello!

[15:12] <AlexDaniel> m: say ( (3 , 9) X ( 2, 10) ).map: * + *

[15:12] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(4 4)‚ê§¬ª

[15:13] <AlexDaniel> m: say ( (3 , 9) X ( 2, 10) )

[15:13] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´((3 2) (3 10) (9 2) (9 10))‚ê§¬ª

[15:14] <AlexDaniel> tigerpaws: I didn't know you could do that

[15:14] <tigerpaws> when {$^a[0] + $^a[1]} for (3,9) X (2,10) gives (5 13 11 9)

[15:15] <AlexDaniel> tigerpaws: but the map itself iterates by two elements at a time

[15:15] <AlexDaniel> tigerpaws: so the first iteration it's (3, 2) + (3, 10)

[15:15] *** aborazmeh left
[15:15] <AlexDaniel> tigerpaws: numeric operations on lists work on the number of elements, so it's 2 elements + 2 elements = 4

[15:16] <AlexDaniel> I absolutely didn't know that .map can do .rotor-like operations‚Ä¶

[15:16] <AlexDaniel> c: all say ( (3 , 9) X ( 2, 10) ).map: * + *

[15:16] <committable6> AlexDaniel, https://gist.github.com/558ce603ec7053c528c4267582dbfc69

[15:16] <tigerpaws> That's what I get for experimenting. I originally did ` * + * for (3,9) X (2,10);  then turned it around into a map

[15:17] <jnthn> AlexDaniel: It's most typically seen in things like `%h.kv.map: -> $key, $value { }` (though of course that's even more typically written as a for loop)

[15:18] <AlexDaniel> jnthn: I see, but I wonder if .kv is at all common

[15:18] <AlexDaniel> it used to be in the past that's for sure

[15:18] <AlexDaniel> like nowadays I'd rather work with pairs, for some reason, maybe I should learn to love .kv :)

[15:19] <AlexDaniel> anyway:

[15:19] <AlexDaniel> m: say ((3 , 9) X ( 2, 10)).map(-> ($a, $b) { $a + $b })

[15:19] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(5 13 11 19)‚ê§¬ª

[15:19] <jnthn> I also like it on arrays when I need the index. :)

[15:19] <AlexDaniel> tigerpaws: ‚Üë what about this?

[15:19] <AlexDaniel> m: my @a = <a b c>; .say for @a.pairs

[15:19] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´0 => a‚ê§1 => b‚ê§2 => c‚ê§¬ª

[15:19] <AlexDaniel> jnthn: still doesn't need to be kv :)

[15:20] <Skarsnik> why I always end up with weird issues :(

[15:20] <AlexDaniel> Skarsnik: because you're amazing!

[15:20] <jnthn> AlexDaniel: I know, it's just that I tend to want the index in a variable, and often the value too, so I can name them for what I'm doing :)

[15:21] *** clarkema joined
[15:21] <Kaiepi> m: say ((3,9) X (2,10)).map(*.sum)

[15:21] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(5 13 11 19)‚ê§¬ª

[15:22] <tigerpaws> @AlexDaniels   say ((3 , 9) X ( 2, 10)).map(-> ($a, $b) { $a + $b }) looks a lot more like ` {$^a[0] + $^a[1]} for (3,9) X (2,10) ` 

[15:22] <Skarsnik> Not sure I can find a short way to reproduce it, hm

[15:22] <AlexDaniel> m: my @a = <a b c>; for @a.pairs -> (:$key, :$value) { say ‚Äú$key $value‚Äù }

[15:22] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´0 a‚ê§1 b‚ê§2 c‚ê§¬ª

[15:22] <AlexDaniel> jnthn: ‚Üë sure? :)

[15:23] <AlexDaniel> and if you want to rename them‚Ä¶

[15:23] <AlexDaniel> m: my @a = <a b c>; for @a.pairs -> (:key($mykey), :$value) { say ‚Äú$mykey $value‚Äù }

[15:23] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´0 a‚ê§1 b‚ê§2 c‚ê§¬ª

[15:23] <AlexDaniel> jnthn: but yeah that gets a bit too verbose

[15:24] <Kaiepi> i wonder if this works...

[15:24] <AlexDaniel> yes!

[15:24] <Kaiepi> m: my @a = <a b c>; for @a.kv { say $^key, ': ', $^value }

[15:24] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´0: a‚ê§1: b‚ê§2: c‚ê§¬ª

[15:24] <Kaiepi> nice

[15:24] <Skarsnik> Basicly I am adding a Role to NC then I add it as a valid type for the native role (https://github.com/rakudo/rakudo/blob/master/lib/NativeCall.rakumod#L265) but when calling sub foo is native($thing-with-new-type), it tell me it can't find a valid variant of the role. No appropriate parametric role variant available for 'NativeCall::Native'

[15:24] <jnthn> AlexDaniel: I'm not saying you can't do it with pairs, just it's a bit less wordy not to :)

[15:25] <AlexDaniel> but yeah, I'm somehow uncomfortable with the idea of flattening the thing and then letting it restructure it the way it was in the first place

[15:25] <AlexDaniel> m: my @a = <a b c d e>; for @a.kv { say $^key, ': ', $^value; say $^foo }

[15:25] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´a: 1‚ê§Too few positionals passed; expected 3 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§0‚ê§2: c‚ê§b‚ê§d: 4‚ê§3‚ê§¬ª

[15:25] <AlexDaniel> m: my @a = <a b c d e f>; for @a.kv { say $^key, ': ', $^value; say $^foo }

[15:25] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´a: 1‚ê§0‚ê§2: c‚ê§b‚ê§d: 4‚ê§3‚ê§5: f‚ê§e‚ê§¬ª

[15:25] <jnthn> (Sometimes. Other times, .pairs is nicer)

[15:26] <Skarsnik> I remember addin multiple trait to avoid this error (maybe?) but that does not fit with the new EXPORT approch :(

[15:27] <AlexDaniel> tigerpaws: did we answer your question? There are probably other ways to express that too

[15:27] <AlexDaniel> for example

[15:27] <AlexDaniel> m: say ( (3 , 9) X ( 2, 10) ).map: [+] * # I wonder if this works

[15:27] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:28] <AlexDaniel> m: say ( (3 , 9) X ( 2, 10) ).map: { [+] $_ } # I wonder if this works

[15:28] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(5 13 11 19)‚ê§¬ª

[15:28] <Kaiepi> &[+] might

[15:28] <AlexDaniel> I don't think so‚Ä¶ but

[15:28] <AlexDaniel> m: say ( (3 , 9) X ( 2, 10) ).map: &[+]

[15:28] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(4 4)‚ê§¬ª

[15:28] <Kaiepi> oh, right

[15:29] <tigerpaws> I just found a new one: {[+]($^a) } for (3,9) X (2,10);

[15:30] <timotimo> m: {[+]($^a) } for (3,9) X (2,10);

[15:30] <camelia> rakudo-moar ee22c2ef4: ( no output )

[15:30] <timotimo> m: say {[+]($^a) } for (3,9) X (2,10);

[15:30] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´-> $a { #`(Block|57666176) ... }‚ê§-> $a { #`(Block|57672368) ... }‚ê§-> $a { #`(Block|57672440) ... }‚ê§-> $a { #`(Block|57672512) ... }‚ê§¬ª

[15:30] <timotimo> m: say do {[+]($^a) } for (3,9) X (2,10);

[15:30] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Placeholder variable $^a may not be used here because the surrounding block takes no signature‚ê§at <tmp>:1‚ê§------> 3say do {[+]($^a) }7‚èè5 for (3,9) X (2,10);‚ê§    expecting any of:‚ê§        h‚Ä¶¬ª

[15:30] <timotimo> no idea what we were talking about :D

[15:31] <Kaiepi> i missed the earlier half of the convo so i'm not entirely sure either lol

[15:31] <AlexDaniel> did you mean like

[15:31] <AlexDaniel> m: say ({[+]($^a) } for (3,9) X (2,10));

[15:31] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(5 13 11 19)‚ê§¬ª

[15:31] <timotimo> haha, yeah

[15:31] <timotimo> you caught me

[15:31] <timotimo> i haven't caffeinated yet :) :)

[15:31] <tigerpaws> I didn't know that arithmetic operations on lists worked on the number or elements. I'll have to remember that. 

[15:31] <AlexDaniel> timotimo: I can see the python inside you :P :P

[15:32] <Kaiepi> m: (3, 9) X (2, 10) ==> map(*.sum) ==> say()

[15:32] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´(5 13 11 19)‚ê§¬ª

[15:32] <tigerpaws> Yes, it's really cool. The [+] is like APL's +/ (shows how old I am, I was brought up on APL)

[15:32] <AlexDaniel> tigerpaws: yeah, it's pretty common when checking the number of elements like @a > 5

[15:32] <timotimo> i get easily frustrated when i am forced to write python code and it's so clumsy

[15:32] <Skarsnik> hey timotimo, how is your profiler going? :)

[15:32] <timotimo> here's a good place to speak about nodal and not-nodal methods

[15:32] <timotimo> Skarsnik: oh, um, i gotta go! bye!!

[15:33] <timotimo> (but read my glob on wakelift.de, it has screenshots)

[15:33] <AlexDaniel> and cats maybe?

[15:33] <tigerpaws> Yes. You need to remember that I haven't done any perl in a few years, and I'm only 3 weeks old as far as raku/perl6 is concerned. 

[15:34] <AlexDaniel> tigerpaws: hmmm perl6‚Ä¶ sounds like you're way older than 3 weeks :)

[15:35] <Kaiepi> i write typescript sometimes and i find myself thinking "damn it'd be nice if i could do x with types like i can in raku" a lot

[15:35] <tigerpaws> So, Thanks, I think I understand the behaviour now. 

[15:36] <Skarsnik> I wish the type system of raku was applied to method not for just overload x)

[15:36] <Kaiepi> wdym?

[15:36] <tigerpaws> @AlexDaniel: well, there are a lot of things in perl6 that remind me of the early days with APL, and that makes them a little easier to catch on to. The concepts I already ahd. 

[15:36] <Skarsnik> raku does not check routine signature at compile time

[15:37] <Skarsnik> *method

[15:37] <Skarsnik> it does for sub but not method

[15:37] *** Black_Ribbon joined
[15:37] <Kaiepi> i thought it did?

[15:37] <AlexDaniel> lizmat: btw should we perhaps celebrate Oct 14th or Aug 8th? :)

[15:37] <Kaiepi> m: CATCH { default { .^name.say } }; class { method foo(Int:D) { } }.foo: "a"

[15:37] <camelia> rakudo-moar ee22c2ef4: OUTPUT: ¬´X::TypeCheck::Binding::Parameter‚ê§¬ª

[15:37] <Kaiepi> oh, it doesn't

[15:37] <Skarsnik> No, I think it's because the core and other stuff create method at run time

[15:38] <Kaiepi> if it were that'd be X::TypeCheck::Argument iirc

[15:38] <Skarsnik> and anyways since the language allow it anyways, you can't expect to have error for something created later

[15:39] <Kaiepi> methods are created at compile-time, but method resolution is handled later, i think

[15:39] <AlexDaniel> tigerpaws: well, my point is that just knowing that it was ‚Äúperl6‚Äù (and now it's ‚Äúraku‚Äù) suggests that you might have heard about it more than 3 weeks ago :)

[15:39] <Kaiepi> this is getting into stuff related to compilation i'm not so familiar with though

[15:40] *** brtastic joined
[15:41] <AlexDaniel> tigerpaws: anyway let us know if there's anything else we can help with. This .map detail is actually an interesting feature I haven't noticed previously

[15:41] <Skarsnik> it's tricky, you can do lot of stuff at compile time x)

[15:41] <tigerpaws> @AlexDaniels: true enough, but when I was writing perl5, it was with 5.8 (legacy code), and perl6 was sort of in a dream. It was only 3 weeks ago I saw my first jnthn video. Since then, I've watched evry one I can find. 

[15:42] <Skarsnik> !probsolving

[15:42] <AlexDaniel> I'm a bot, bleep blop, https://github.com/Raku/problem-solving

[15:42] <[Coke]> tigerpaws: welcome aboard. :)

[15:42] <Skarsnik> Merci AlexDianielable

[15:43] <[Coke]> AlexDaniel: that's AnothyDaniels. :)

[15:43] <[Coke]> *AnthonyDaniels, oops

[15:43] <Kaiepi> supplies are something i still find myself stumbling over how to handle sometimes. didn't jnthn do a video on those?

[15:43] <tigerpaws> There are so many ways perl6 is astonishing.  It's very exciting for me. So, thanks, guys, and you've all been extremely helpful.  Later. 

[15:53] *** chloekek joined
[15:53] <AlexDaniel> [Coke]: but if it was AnthonyDanielable6 it'd respond either way!

[15:53] <AlexDaniel> bsicetable6: help

[15:53] <bisectable6> AlexDaniel, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^‚àû).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Bisectable

[15:57] *** mowcat joined
[16:00] *** patrickb left
[16:02] <jdv79> just got "make: *** [blib/Perl6/BOOTSTRAP/v6c.moarvm] Segmentation fault (core dumped)"

[16:03] <jdv79> is gcc 4.4.7 20120313 too old - got a bunch of warnings

[16:05] *** brtastic left
[16:08] <MasterDuke> i don't know if we have an official cutoff for c compiler versions, but 4.4.7 is pretty old...

[16:09] <jdv79> ok, i can work around it.  $work's prod stuff is pretty old:(

[16:10] *** Kaiepi left
[16:10] <MasterDuke> can you get a backtrace in gdb?

[16:11] <jdv79> not at the moment.  i'll make a note to try though.

[16:12] *** Kaiepi joined
[16:14] *** AlexDaniel left
[16:15] *** AlexDaniel joined
[16:15] *** AlexDaniel left
[16:15] *** AlexDaniel joined
[16:20] *** stoned75 left
[16:29] *** kensanata left
[16:38] *** bdju joined
[16:41] *** farcas1982regreg left
[16:42] *** farcas1982regreg joined
[16:46] *** rindolf left
[16:50] *** rindolf joined
[16:56] *** andrzejku left
[16:57] *** sena_kun joined
[16:59] *** Altai-man_ left
[17:00] *** gnufr33dom left
[17:06] *** titsuki joined
[17:21] <mahafyi> i'd like to learn to do better , i feel i am doing something roundabout here -> https://pastebin.com/73tbfMgZ

[17:23] <mahafyi> basically i want o make a function that puts KV from asterisk log file into a hash

[17:27] *** xinming left
[17:29] *** xinming joined
[17:43] *** titsuki left
[17:43] <Kaiepi> mahafyi, i'd use a grammar and actions class for this rather than manually parsing the log

[17:43] <mahafyi> Kaiepi : thanks. I have no idea how to... i have to read

[17:44] <Kaiepi> i found them a bit tricky to understand at first, but they're very powerful and useful for cases like this

[17:51] <jjmerelo> Kaiepi, can you please check this? https://github.com/rakudo/rakudo/pull/3451

[17:51] <jjmerelo> jnthn requested some changes...

[17:55] *** Sgeo_ joined
[17:58] *** Sgeo left
[18:00] <Kaiepi> jjmerelo, i think i've addressed the changes he wanted. depends on what jnthn thinks

[18:01] <jjmerelo> (y)  kaiepi

[18:01] <Kaiepi> .tell jnthn, are https://github.com/rakudo/rakudo/pull/3451 and friends ok now?

[18:01] <tellable6> Kaiepi, I'll pass your message to jnthn

[18:02] <jjmerelo> Kaiepi are CI OK failing? Is it a flapper or something like that? Can you please check that too, just in case?

[18:03] <Kaiepi> jjmerelo, tests are allowed to fail for this. they checked if methods die instead of failing, which is what they were supposed to be doing. there's a roast pr related to that

[18:04] <jjmerelo> Great :-)

[18:13] <mahafyi> Kaiepi : On first read the Grammars tutorial is awesome. The descriptive portions I mean, as for the rest I am lost, lol. 

[18:15] *** melezhik joined
[18:23] <moritz> a slower explanation is available in book form: https://www.apress.com/us/book/9781484232279

[18:26] *** sauvin left
[18:34] *** mahafyi left
[18:50] *** poga joined
[18:51] *** mahafyi joined
[18:51] *** molaf left
[18:55] *** orinthe joined
[18:55] *** molaf joined
[18:56] *** Altai-man_ joined
[18:59] *** ensamvarg_g6 left
[18:59] *** sena_kun left
[19:01] *** brtastic joined
[19:02] *** ragekagemage joined
[19:04] *** sjm_uk left
[19:06] *** xinming left
[19:06] *** xinming joined
[19:10] *** jjmerelo left
[19:12] <ragekagemage> I'm trying to get Rakudo 2020.02.1 to compile on OpenBSD and keep hitting the error "Stage start : moar://usr/local/lib/libmoar.so.10.0: undefined symbol 'mp_set_double' ld.so: moar: lazy binding failed!" I've updated libtommath to 1.2.0 but that didn't fix it. Any idea what I'm doing wrong?

[19:17] <AlexDaniel> Kaiepi: ‚Üë ?

[19:19] <Kaiepi> that's a bug with the Makefile that's since been fixed

[19:19] <Kaiepi> if you move the /usr/local/include include in the includes list so that it's the second last one it should work

[19:21] *** andrzejku joined
[19:28] *** stoned75 joined
[19:35] *** Altai-man_ left
[19:36] *** sena_kun joined
[19:36] *** sena_kun left
[19:37] *** sena_kun joined
[19:37] *** xinming left
[19:37] *** stoned75 left
[19:38] *** sena_kun left
[19:39] *** sena_kun joined
[19:39] *** sena_kun left
[19:39] *** stoned75 joined
[19:39] *** mahafyi left
[19:40] *** xinming joined
[19:41] *** pilne joined
[19:44] <ragekagemage> Do you mean the list in M_MOAR_INC_PATHS in the generated makefile? I moved around the -I/usr/local/include in the list but it's giving the same error.

[19:47] *** guifa joined
[19:47] <MasterDuke> ragekagemage: i believe https://github.com/MoarVM/MoarVM/pull/1240 was the change

[19:48] *** ctilmes joined
[19:52] *** cognomin_ joined
[19:53] <ctilmes> m: my @list = <a b c>; say 'a' ~~ any @list;

[19:53] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´True‚ê§¬ª

[19:53] <ctilmes> m: my @list = <a b c>; say 'a' ~~ all @list;

[19:53] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´False‚ê§¬ª

[19:53] <ctilmes> m: my @list = <a b c>; say Str ~~ any @list;

[19:53] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´False‚ê§¬ª

[19:53] <ctilmes> m: my @list = <a b c>; say Str ~~ all @list;

[19:53] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´False‚ê§¬ª

[19:54] <ctilmes> What's the easiest way to see if all items in a list are Str?

[19:55] *** sena_kun joined
[19:55] *** cognominal left
[19:58] *** rindolf left
[19:59] <jnthn> m: my @list = <a b c>; say all(@list) ~~ Str;

[19:59] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´True‚ê§¬ª

[19:59] <jnthn> m: my @list = |<a b c>, 42; say all(@list) ~~ Str;

[19:59] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´False‚ê§¬ª

[20:00] <jnthn> Type needs to go on the right

[20:00] <ctilmes> ok

[20:00] <ctilmes> thx

[20:01] *** ctilmes left
[20:06] *** andrzejku left
[20:14] *** stoned75 left
[20:14] *** stoned75 joined
[20:18] <timotimo> hum, we only use C89 compatible shit, so gcc 4.4.7 should already be able to do everything we have?

[20:29] *** xinming left
[20:30] *** andrzejku joined
[20:30] *** Itaipu_ left
[20:32] *** xinming joined
[20:32] *** Kaiepi left
[20:32] *** Kaeipi joined
[20:37] <Geth> ¬¶ ecosystem: 61e3d43064 | p6steve++ (committed using GitHub Web editor) | META.list

[20:37] <Geth> ¬¶ ecosystem: publish Physics::Measure

[20:37] <Geth> ¬¶ ecosystem: 

[20:37] <Geth> ¬¶ ecosystem: [physics][unit][measure]

[20:37] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/61e3d43064

[20:38] <ragekagemage> MasterDuke: I applied that change to moarvm makefile.in and recompiled it, rakudo is still giving me the same compile error.

[20:39] *** chloekek left
[20:39] *** chloekek joined
[20:40] *** p6steve joined
[20:43] <jdv79> is there a way to get the MAIN based usage text in a var?

[20:43] <jdv79> i'd like to have a real usage that includes paragraphs and stuff in addition to the args stuff

[20:47] <moritz> m: sub MAIN($x) { }; say $*USAGE

[20:47] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´Dynamic variable $*USAGE not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:47] <moritz> m: sub MAIN($x?) { say $*USAGE }

[20:47] <camelia> rakudo-moar 1a536ca9d: OUTPUT: ¬´Usage:‚ê§  <tmp> [<x>]‚ê§¬ª

[20:48] <jdv79> oh, its in $*USAGE.  thanks.

[20:49] <moritz> are you aware of #= comments?

[20:51] <jdv79> i only know i use those for the args themselves

[20:51] *** p6steve left
[20:52] *** p6steve joined
[20:53] <ragekagemage> jdv79: https://docs.raku.org/language/pod#index-entry-declarator_blocks

[20:55] <ragekagemage> jdv79: Using #= or #| applied to MAIN will show up in the usage.

[20:56] *** chloekek left
[20:56] *** rouking joined
[20:56] *** Altai-man_ joined
[20:56] *** chloekek joined
[20:57] <rouking> So I notice the docs say each part of a Complex needs to be a Real, and I also notice these parts turn out to be Nums. I'm wondering why these wouldn't be Rats instead given that Rat is the default for numeric literals

[20:58] * [Coke] has a vague recollection of a design discussion 15 years ago

[20:58] * [Coke] would ask colomon if he were still about.

[20:59] *** sena_kun left
[20:59] <rouking> We do have a colomon_ in the roster

[21:00] *** p6steve left
[21:01] *** Altai-man_ left
[21:01] *** p6steve joined
[21:01] *** Itaipu joined
[21:02] <colomon_> you rang?

[21:02] <rouking> Ah, yes we did

[21:03] <rouking> I was wondering why the two parts of a Complex turn out to be Nums instead of Rats (the docs just say they need to be Real)

[21:04] * [Coke] realizes this is ancient history. :)

[21:04] <[Coke]> also, HI COLOMON!!!!

[21:04] <colomon_> Don‚Äôt think Rats would ever have been considered for a ‚Äúnormal‚Äù Complex, they fall back to Num in extreme situations

[21:04] *** chloekek left
[21:04] <colomon_> hi [Coke] !

[21:05] <colomon_> last time I checked (which admitedly was a while ago) aren‚Äôt the parts of Complex currently num rather than Num?

[21:05] *** chloekek joined
[21:06] *** p6steve left
[21:06] *** clarkema left
[21:06] *** sena_kun joined
[21:07] <colomon_> thinking of it in ideal terms: it‚Äôs great to think of Complex as Real, Real, that‚Äôs very general.

[21:07] <colomon_> It can‚Äôt really be Rat, Rat unless there‚Äôs also a Num, Num version

[21:07] <colomon_> FatRat, FatRat would presumably be too slow for real world use

[21:08] <colomon_> It was Num, Num back in the day for flexibility and speed

[21:08] <rouking> It just struck me as odd, given Rats are the default for real numbers, to see (Num) when I did (1+2i).re.WHAT

[21:08] <colomon_> as far as I know it‚Äôs nuim, num now.

[21:08] <colomon_> (But I haven‚Äôt poked under the hood there in a long while)

[21:09] <colomon_> (num, num, no stray i)

[21:09] <rouking> It would make more sense to me if it followed the same pattern as standard numbers where you have a Rat until you have to fall back to Num

[21:09] *** brtastic left
[21:11] <rouking> At this point I'm wondering how tight the coupling is and whether this behavior couldn't be achieved with just a few relatively easy changes

[21:12] *** p6steve joined
[21:12] <colomon_> looking at the source ‚Äî https://github.com/rakudo/rakudo/blob/master/src/core.c/Complex.pm6 ‚Äî it is very tightly coupled

[21:13] <colomon_> for performance reasons

[21:13] <colomon_> if you pull up the old source (say eight years ago) you can probably find a version that can easily be modified to do what you want.

[21:14] *** andrzejku left
[21:14] <[Coke]> colomon_: could one write a complex type in user space that was Rats?

[21:14] <[Coke]> could at least use that to flesh out where it would be slow, if it would be problematic.

[21:14] <colomon_> Complex is set up as a class not a role, but one could certainly write a, say, RatComplex in user space

[21:16] <colomon_> (BTW, if anyone‚Äôs worrying I‚Äôve given up on it, wrote my most recent p6 err Raku program yesterday.  91 lines to automatically scrap sound files from an archival site and generate sensible MP3 tags for them.  :) )

[21:17] *** p6steve left
[21:17] <colomon_> *scrape

[21:18] <rouking> I believe we've come a long way in terms of Rat performance so maybe it would be worth more investigation to see whether rational-based complex numbers are acceptably fast

[21:18] <colomon_> I believe lizmat++ did the Complex to num, num conversion, she could probably tell you more about the performance changes involved

[21:24] <colomon_> My git / github foo is weak, but if you can pluck out Complex.pm from far enough back I would think the changes to get it to Rat would be pretty simple.

[21:24] *** cognominal joined
[21:25] <colomon_> gotta run, I need to do some chores and shower and fix dinner and sit in on evening storytime AND be ready to run D&D in 2.5 hours.

[21:25] <colomon_> but feel free to ping me, just unlikely to respond before tomorrow.

[21:27] *** cognomin_ left
[21:47] *** p6steve joined
[21:55] <ragekagemage> I just noticed that 2020.05 was tagged in moarvm, any idea when rakudo and nqp are going to get released to go with it?

[21:55] *** p6steve left
[21:56] <lizmat> ragekagemage: it's in process right *now*

[21:58] <ragekagemage> lizmat: Awesome!!! I'll hold off on my porting efforts until it's out.

[22:01] <jdv79> $0 should be thread safe, right?

[22:01] <jdv79> getting weird failures seemingly involving $0 after a regex match...

[22:03] <MasterDuke> jdv79: i'm pretty sure it isn't thread safe. $0 is just sugar for $/[0], and arrays are not thread safe

[22:03] *** melezhik left
[22:03] <jdv79> but its not shared, right?

[22:05] *** Kaeipi left
[22:07] <jdv79> i'm not sure what "Type check failed in binding to parameter '<anon>'; expected Capture but got Nil (Nil)" means.  any ideas?

[22:09] <MasterDuke> jdv79: oh, i assumed you were using it with threads

[22:09] <jdv79> the code on the line # that points to is:  die "uh oh:  $i<url>" unless $/[0];

[22:09] <jdv79> the code that failing is in a hyper map block

[22:09] *** Kaiepi joined
[22:10] <jdv79> and the incidence seems to increase the more i increase the degree of the hyper but it may not be related...

[22:15] <MasterDuke> oh, so there are threads. what if you wrap that line in a $lock.protect \?

[22:17] *** aborazmeh joined
[22:17] *** aborazmeh left
[22:17] *** aborazmeh joined
[22:18] <jdv79> still get errors

[22:18] <jdv79> hmm

[22:20] <jdv79> a diff error this time though i've gotten it before.  somehow a regex failed to match even though there is no evidence for that

[22:21] <jdv79> freaky and frustrating;)

[22:22] <MasterDuke> yeah, i think we'd have to see more code

[22:22] <timotimo> that is one thing that can definitely happen when something is shared between threads and it shouldn't be

[22:25] <lizmat> weekly: https://news.perlfoundation.org/post/gr_2020-03-votes

[22:25] <notable6> lizmat, Noted! (weekly)

[22:25] <jdv79> i guess i'll have to golf it.  maybe tomorrow.  thanks!

[22:30] <timotimo> there's the cross-thread write log, which is an env var that moarvm takes

[22:30] <timotimo> it's rather verbose, though

[22:30] <jdv79> oh its even better now - Segmentation fault (core dumped)

[22:30] <jdv79> *sigh* this might take a while to figure out

[22:35] <jnthn> If you declare `my $/;` in the hyper map block does it help?

[22:35] <tellable6> 2020-05-04T21:39:41Z #raku-dev <vrurg> jnthn here is detailed description of the problem with debugging in Comma: https://gist.github.com/vrurg/47a7ea373eb7372f72cd245a96c215cd

[22:36] *** bdju left
[22:40] *** p6steve joined
[22:44] *** p6steve left
[22:47] *** chloekek left
[22:48] *** rouking left
[22:50] <jdv79> "my $/;" *seems* to help it be stabler.  got through one full run sans errors.  neato.

[22:52] *** farcas1982regreg left
[23:07] *** Altai-man_ joined
[23:09] *** sena_kun left
[23:31] *** MasterDuke left
[23:49] *** pecastro left
[23:53] *** titsuki joined
[23:54] *** devmikey joined
[23:56] *** Altai-man_ left
[23:57] *** molaf left
