[00:28] *** sena_kun joined
[00:30] *** Altai-man_ left
[00:30] *** rir left
[00:51] *** KindOne left
[00:53] *** KindOne joined
[00:54] *** kst left
[00:57] *** KindTwo joined
[00:57] *** squashable6 left
[00:58] *** KindOne left
[01:01] *** squashable6 joined
[01:02] *** KindTwo left
[01:04] *** KindOne joined
[01:13] *** ensamvarg3 joined
[01:28] *** molaf left
[01:28] *** klapperl_ joined
[01:30] *** klapperl left
[01:40] *** molaf joined
[01:57] *** roguelazer left
[02:01] *** aborazmeh left
[02:02] *** roguelazer joined
[02:03] *** roguelazer left
[02:07] *** roguelazer joined
[02:10] *** xinming_ left
[02:11] *** xinming_ joined
[02:17] *** aborazmeh joined
[02:17] *** aborazmeh left
[02:17] *** aborazmeh joined
[02:25] *** melezhik left
[02:27] *** Altai-man_ joined
[02:30] *** sena_kun left
[02:31] *** xinming_ left
[02:33] *** xinming_ joined
[02:35] *** guifa2 joined
[02:38] *** brtastic joined
[02:40] *** helit joined
[03:02] *** xinming_ left
[03:02] *** xinming_ joined
[03:04] *** squashable6 left
[03:06] *** squashable6 joined
[03:08] *** warriors joined
[03:10] *** warriors left
[03:14] *** molaf left
[03:44] *** Itaipu joined
[03:51] *** guifa2 left
[04:23] *** aborazmeh left
[04:28] *** sena_kun joined
[04:29] *** Altai-man_ left
[04:30] *** zacts joined
[04:30] *** zacts left
[04:31] *** zacts joined
[04:32] *** zacts left
[04:40] *** Erik43 joined
[04:43] <Erik43> download  unavailable? https://rakudo.org/latest/star/macos 404's

[04:49] *** Erik43 left
[04:49] *** Itaipu left
[05:00] *** brtastic left
[05:10] <rba> Please download the latest available star release from https://rakudo.org/downloads/star

[05:10] <tellable6> 2020-05-21T21:15:43Z #raku <melezhik> rba I successfully tested ssh/http tunneling, it's funny stuff to learn )))

[05:10] <tellable6> 2020-05-25T15:10:39Z #raku <melezhik> rba , please ping me when you are here, thanks

[05:17] *** brtastic joined
[05:56] *** skids left
[06:00] *** dmc00 left
[06:10] *** wamba joined
[06:11] *** sjm_uk joined
[06:13] *** JJMerelo joined
[06:19] <Geth> ¦ doc: 40a753a9b7 | (Luis F. Uceta)++ | doc/Language/control.pod6

[06:19] <Geth> ¦ doc: Minor rewording with few examples

[06:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/40a753a9b7

[06:19] <Geth> ¦ doc: a2a3ec78fe | (Luis F. Uceta)++ | doc/Language/control.pod6

[06:19] <Geth> ¦ doc: Make changes as requested

[06:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a2a3ec78fe

[06:19] <Geth> ¦ doc: 73d7182c56 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/control.pod6

[06:19] <Geth> ¦ doc: Merge pull request #3429 from uzluisf/master

[06:19] <linkable6> Link: https://docs.raku.org/language/control

[06:19] <Geth> ¦ doc: 

[06:19] <Geth> ¦ doc: Minor rewording with few examples

[06:19] <Geth> ¦ doc: Thanks a lot!

[06:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/73d7182c56

[06:23] *** Kaiepi left
[06:26] *** Kaiepi joined
[06:27] *** Altai-man_ joined
[06:29] *** sena_kun left
[06:52] *** domidumont joined
[06:57] *** NODE left
[06:58] *** NODE joined
[06:59] *** rindolf joined
[07:16] *** Kaiepi left
[07:21] *** Kaiepi joined
[07:28] *** pecastro joined
[07:38] *** dakkar joined
[07:40] *** aborazmeh joined
[07:40] *** aborazmeh left
[07:40] *** aborazmeh joined
[07:42] *** Dock_Holliwood left
[07:46] *** MasterDuke joined
[07:50] *** patrickb joined
[07:52] *** Sgeo left
[08:04] *** Black_Ribbon left
[08:28] *** sena_kun joined
[08:29] *** Altai-man_ left
[08:30] <Geth> ¦ doc: a07587818a | (JJ Merelo)++ | doc/Language/regexes.pod6

[08:30] <Geth> ¦ doc: Clarify what can be used as an argument to nth, refs #2632

[08:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a07587818a

[08:30] <linkable6> Link: https://docs.raku.org/language/regexes

[08:30] <linkable6> DOC#2632 [open]: https://github.com/Raku/doc/issues/2632 [Hacktoberfest][RFE][big][docs][good first issue][help wanted][new][⚠ Top Priority ⚠] Checklist for 6.d

[08:42] <JJMerelo> Flappers in the doc tests are back... https://travis-ci.com/github/Raku/doc/builds/168169665 (they never really went away)

[08:44] <MasterDuke> `Use of uninitialized value $repo-id` what is that `$repo-id` supposed to have? if it's talking about the git repo, github has had a lot of connectivity problems recently

[08:48] *** kensanata joined
[08:52] *** JJMerelo left
[09:14] *** mowcat joined
[09:40] *** JJMerelo joined
[09:45] *** Prince213 joined
[09:45] *** andrzejku joined
[09:45] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2020/05/26/watching-new-arrivals/

[09:45] <Prince213> Hello. Can I read formatted input in Raku?

[09:46] <Prince213> Also, how to use vararg functions from NativeCall?

[09:46] *** NODE left
[09:47] *** stoned75 left
[09:47] <Prince213> (If it's possible to do that)

[09:47] *** Prince213 left
[09:48] *** Prince213 joined
[09:48] *** NODE joined
[09:49] *** Prince213 left
[09:49] *** stoned75 joined
[09:49] *** Prince213 joined
[09:50] *** Prince213 left
[09:50] *** Prince213 joined
[09:50] *** Prince213 left
[09:53] *** NODE left
[09:56] *** NODE joined
[10:09] *** MasterDuke left
[10:11] *** mowcat left
[10:12] *** _jrjsmrtn left
[10:16] <tbrowder> Prince123: hi, i'm not sure what you are asking for. do you mean accessing pod internally? if so, yes.

[10:16] <tellable6> tbrowder, I'll pass your message to Prince213

[10:17] *** Prince213 joined
[10:18] *** __jrjsmrtn__ joined
[10:19] <Prince213> For the first one, I'm asking if we have a function (like scanf in C) to read formatted input?

[10:19] <tellable6> 2020-05-26T10:16:02Z #raku <tbrowder> Prince123: hi, i'm not sure what you are asking for. do you mean accessing pod internally? if so, yes.

[10:20] <Prince213> For the second one, I'm asking if we have a way to use functions like scanf.

[10:21] *** NODE left
[10:22] *** NODE joined
[10:22] <tbrowder> oh, good question, i'm not sure, but i don't think so. does Perl?

[10:24] <tbrowder> use case? you may have to roll your own.

[10:25] <jnthn> Prince213: For varargs there's not a really good way, but you can write out the cases you need (e.g. write signatures with the args)

[10:25] <jnthn> *with the args you want to pass

[10:26] <Prince213> I'm writing a binding for PDCurses, and some functions (printw for example) are vararg function

[10:27] <Prince213> This is the prototype: `int printw(const char* fmt, ...);`

[10:27] *** Altai-man_ joined
[10:27] *** Prince213 left
[10:27] <tbrowder> i vaguely remember using scanf in c progs long ago, but i can't remember why i needed them, sorry. lot's of c experts here, though.

[10:29] *** sena_kun left
[10:33] *** Prince213 joined
[10:34] *** mowcat joined
[10:35] <Prince213> tbrowder: FYI, scanf is used to read something from stdin($*IN). Anyway thanks.

[10:38] <jnthn> Prince213: Typically in Raku one would either use coercions on what is read, or regex matching for more advanced things.

[10:38] <tbrowder> is yr code publicly avail?

[10:40] <tadzik> Prince213: regexes are probably closest to what you need

[10:40] <tadzik> (and probably won't cause buffer overflows that scanf() traditionally does :P)

[10:41] <Prince213> Hmm... I'm just making a binding.

[10:42] <Prince213> Will publish my code when I prepared the ecosystem-related things(README etc.).

[10:47] *** Prince213 left
[10:48] *** NODE left
[10:50] *** mowcat left
[10:50] *** Guest2081 joined
[10:57] *** JJMerelo left
[11:07] *** Guest2081 is now known as NODE

[11:12] *** wamba left
[11:13] *** wamba joined
[11:21] <Geth> ¦ problem-solving: Prince213 assigned to jnthn Issue Calling vararg functions from NativeCall https://github.com/Raku/problem-solving/issues/201

[11:23] <cpan-raku> New module released to CPAN! Console::Blackjack (1.0.5) by 03GDONALD

[11:25] *** NODE left
[11:26] *** NODE joined
[11:31] *** aborazmeh left
[11:32] *** Kaiepi left
[11:33] *** Kaiepi joined
[11:33] *** aborazmeh joined
[11:33] *** aborazmeh left
[11:33] *** aborazmeh joined
[11:35] *** JJMerelo joined
[11:36] *** NODE left
[11:37] *** NODE joined
[11:39] *** andrzejku left
[11:51] *** sarna joined
[11:51] *** aborazmeh left
[12:02] *** dakkar left
[12:02] *** dakkar joined
[12:04] *** wamba left
[12:08] *** andrzejku joined
[12:15] *** oneeggeach left
[12:18] *** wamba joined
[12:25] *** wamba left
[12:27] *** sena_kun joined
[12:29] *** Altai-man_ left
[12:33] *** NODE left
[12:36] *** tejr left
[12:37] *** molaf joined
[12:37] *** tejr joined
[12:44] *** melezhik joined
[12:48] *** JJMerelo left
[13:08] *** aborazmeh joined
[13:08] *** aborazmeh left
[13:08] *** aborazmeh joined
[13:13] *** MasterDuke joined
[13:16] <robertle> does anyone know how to get the current location within a grammar/action? to do error erporting?

[13:18] <jnthn> self.pos

[13:18] <vrurg> robertle: there is no way to get the line number.You'd have to do it on your own, unfortunately.

[13:18] <jnthn> Or $/.from or $/.to in the action

[13:18] <ShimmerFairy> A long while back I wrote a Grammar::Parsefail module (not sure if it's in the ecosystem, but should be under my same-named account on github).

[13:18] <jnthn> And yeah, those are char offsets

[13:19] <ShimmerFairy> Fair warning, last I used it myself, the positioning of the eject symbol in the error messages was frequently off (probably because I last touched the code when Cursor still existed).

[13:20] <ShimmerFairy> And if experimental features are OK, I happened to spot that Grammar in the prospective v6.e has nicer error messages for parse failures.

[13:27] <MasterDuke> robertle: lineposof maybe?

[13:28] <MasterDuke> hm, maybe it's linefileof

[13:28] *** APic joined
[13:35] *** squashable6 left
[13:36] *** APic left
[13:36] *** Dock_Holliwood joined
[13:36] <robertle> I tried $/.from and .to, but that didn't give me meaningful results. will try again, perhaps I was just stupid

[13:37] <ShimmerFairy> robertle: you can call .from and .to on specific parts of the match, like $<identifier>.from, if that helps.

[13:37] *** brtastic left
[13:37] *** squashable6 joined
[13:38] <robertle> I was a bit stupid, ok. so that way I get a character offset of the failure which I need to translate into a line number, that should be ok

[13:38] <robertle> great!

[13:40] *** cnnbs joined
[13:41] *** cnnbs left
[13:48] *** APic joined
[14:07] *** sarna left
[14:23] *** Doc_Holliwould joined
[14:23] *** aborazmeh left
[14:25] *** wamba joined
[14:26] *** Dock_Holliwood left
[14:27] *** Altai-man_ joined
[14:28] *** JJMerelo joined
[14:29] *** sena_kun left
[14:33] *** skids joined
[14:48] *** patrickb left
[14:54] *** molaf left
[15:02] *** brtastic joined
[15:07] *** ensamvarg3 left
[15:17] <uzl[m]> Hello, #raku! When documenting some newly introduced routine, is there some guideline about where it's placed in the documentation alongside the type's other routines? Alphabetically? Right at the end of the type's Methods section?

[15:19] <expon> i personally just whack some comments above it with #| but i don't know if that's recommended

[15:19] <tadzik> that's the way to do it, yes

[15:20] <tadzik> see https://design.raku.org/S26.html

[15:20] <[Coke]> uzl[m]: unless it's already divided into sections, alphabetica

[15:20] <[Coke]> l

[15:21] <tadzik> https://design.raku.org/S26.html#Declarator_blocks has some examples

[15:21] <[Coke]> if it's in sections, someone can help you figure out which section. Thanks!

[15:23] <uzl[m]> tadzik: Thanks. Although I'm more concerned with the placement. 

[15:24] <[Coke]> uzl[m]: ... oh, you mean in code, not in, say, submitting a PR to the doc site. :)

[15:24] <[Coke]> apologies, I misread.

[15:24] <uzl[m]> [Coke]: Is it some historical blunder that some routines aren't in alphabetical order? For instance, in https://docs.raku.org/type/Date#Methods 

[15:24] <[Coke]> tadzik++

[15:25] <[Coke]> uzl[m]: There isn't any guidance on it, I don't think. (and having the "new" method first makes a lot of sense)

[15:25] <uzl[m]> Oh, no. I do really mean submitting a PR to the doc repo. Sorry for the confusion.

[15:25] <tadzik> uzl[m]: well, typically you document every routine right next to that routine

[15:25] <uzl[m]> [Coke]: Ok.

[15:25] <[Coke]> also, many of these pages are dynamically generated from other segments, so re-ordering can be hard.

[15:25] <tadzik> ooh, the doc repo

[15:25] <[Coke]> tadzik--, then!

[15:25] <tadzik> sorry, I misunderstood 

[15:26] <uzl[m]> No problem, tadzik!

[15:26] <uzl[m]> Thanks, Coke and tadzik!

[15:26] <[Coke]> uzl[m]: better it gets documented, we can worry about ordering things as a universal concern separately.

[15:26] <uzl[m]> Haha!

[15:26] <uzl[m]> That makes sense!

[15:26] <[Coke]> uzl[m]: but that page looks like a good example to start with.

[15:28] * [Coke] wonders why Dateish has an .IO method. :P

[15:30] <timotimo> why wouldn't you have a folder with files or folders that are named exactly like dates?

[15:31] <timotimo> also, i imagine that also uses the formatter method?

[15:31] <timotimo> m: Date.now.IO.raku.say

[15:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «No such method 'now' for invocant of type 'Date'. Did you mean any of these?␤    new␤    not␤␤  in block <unit> at <tmp> line 1␤␤»

[15:31] <timotimo> m: DateTime.now.IO.raku.say

[15:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «IO::Path.new("2020-05-26T17:31:20.283554+02:00", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[15:31] <dakkar> m: now.IO.raku.say

[15:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «IO::Path.new("Instant:1590507127.572433", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[15:31] <dakkar> `now` is a term, not a metho

[15:31] <timotimo> m: DateTime.now(:formatter(*.raku)}.IO.raku.say

[15:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3DateTime.now(:formatter(*.raku)7⏏5}.IO.raku.say␤»

[15:31] <timotimo> m: DateTime.now(:formatter(*.raku)).IO.raku.say

[15:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «IO::Path.new("DateTime.new(2020,5,26,17,31,45.37471604347229,:timezone(7200))", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[15:31] <timotimo> a fine filename choice

[15:32] <timotimo> m: say (1+4i).IO.raku

[15:32] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «IO::Path.new("1+4i", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[15:32] <timotimo> [Coke]: how do you feel about this one? :) :)

[15:32] <Altai-man_> m: (1+4i).^mro.say;

[15:32] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «((Complex) (Cool) (Any) (Mu))␤»

[15:32] *** _jrjsmrtn joined
[15:32] <Altai-man_> m: Cool.IO.say;

[15:32] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «(Path)␤»

[15:33] <dakkar> I once started building a document-management system that used templated filenames. Meaning that I had files called `[% title %]-[% date %].txt`

[15:33] <Altai-man_> timotimo, that's probably ^

[15:33] <timotimo> yeah

[15:33] <timotimo> m: say { :1a, :2b, :3c }.IO.raku

[15:33] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «IO::Path.new("a\t1\nb\t2\nc\t3", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[15:33] <timotimo> now here's one that doesn't make very much sense

[15:34] <timotimo> tabs in filenames *shudder*

[15:34] <dakkar> sometimes I think that too many classes are Cool…

[15:34] *** __jrjsmrtn__ left
[15:34] *** aborazmeh joined
[15:34] *** aborazmeh left
[15:34] *** aborazmeh joined
[15:37] <ShimmerFairy> I personally like to start my filenames with a little RIGHT-TO-LEFT OVERRIDE

[15:39] *** molaf joined
[15:41] *** Doc_Holliwould left
[15:41] <melezhik> Raku modules authors! https://rakudist.raku.org/ allows to test Raku module distribution against multiple Raku versions (2015.12 ... 2020.05.01) in one click

[15:41] <melezhik> I'd appreciate feedback, as the service is in beta testing stage

[15:42] <melezhik> so far debian/ubuntu OS are available to test against, but I could add more OS if required

[15:47] *** Doc_Holliwould joined
[15:47] <[Coke]> huh. Why am I installing a script with such a short name and with a .p6 suffix? I should clean that up

[15:47] <melezhik> one can select multiple version of Rakudo and run in one bunch ... it could be useful for authors who cares about their modules running on older versions of Rakudo

[15:50] *** abraxxa left
[15:50] <[Coke]> melezhik: thought I ran one for multiple versions, but it seems to have only run a single version

[15:51] <melezhik> @Coke it's multiselect html form

[15:51] <[Coke]> melezhik: guess it was user error.

[15:51] <melezhik> @Coke, what do you mean?

[15:51] <[Coke]> I think the issue is that the form doesn't remember the multiselect when you submit, so I did it, submitted, had a mistake, lost the multiselect, then re-submitted.

[15:51] *** abraxxa joined
[15:51] <[Coke]> (which is not what I meant by user error, I think I figured out how I lost the multi-select)

[15:52] <melezhik> yeah, you're right, it does not memorized previous input for versions

[15:52] <melezhik> yeah, anyway, now you know you still can run multiple versions, correct? )))

[15:52] <[Coke]> otherwise, seems fine, my dumb module working on last few versions.

[15:53] <melezhik> yeah, I see the queue has got some your requests - https://rakudist.raku.org/sparky/queue

[15:53] <melezhik> feel free to post an issues and suggestion to RakuDist GitHub )))

[15:53] *** mowcat joined
[15:55] <melezhik> there is also API, so one can trigger builds from GitHub/Gitlab/Whatever CI

[15:55] <melezhik> need to go

[15:55] <[Coke]> melezhik++

[15:56] *** abraxxa left
[16:11] *** abraxxa joined
[16:23] <jdv79> m: class A { has $.a ="abc" }; class B is A { has $.a = 123 }; B.new.raku.say;

[16:23] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «B.new(a => 123, a => "abc")␤»

[16:23] <jdv79> why are both there?

[16:23] *** abraxxa left
[16:24] *** abraxxa joined
[16:28] *** sena_kun joined
[16:29] <jnthn> Because there are two separate attributes. Alas, this is not going to roundtrip.

[16:29] *** Altai-man_ left
[16:30] <dakkar> what's the correct way to change an attribute default in a subclass?

[16:31] <dakkar> (or an attribute's type, to a narrower one)

[16:32] <JJMerelo> dakkar you can either change it in BUILD, or in TWEAK, or in the declaration of an attribute

[16:33] <dakkar> but see above, jdv79's example

[16:33] <ShimmerFairy> For an attribute's default value, BUILD or TWEAK like JJMerelo (but only if it's publicly rewritable).

[16:33] <[Coke]> m: class A { has $.a ="abc" }; class B is A { has $.a = 123 }; B.new.a.say

[16:33] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «123␤»

[16:33] <[Coke]> ^^ it's still defaulting to the right value.

[16:33] <dakkar> sure, until something in A uses $!a

[16:34] <ShimmerFairy> For narrowing a type, you should maybe consider doing a parameterized role instead of ising a parent class.

[16:34] <ShimmerFairy> That's why class code should generally use $.a unless it REALLY needs to use its own attribute :)

[16:34] <dakkar> ok, so the answer is "the Rakku MOP does not implement this"

[16:35] <dakkar> (too many 'k'…)

[16:36] <ShimmerFairy> again, if class A's attribute is public and "is rw" then you can set it in B's BUILD() or TWEAK().

[16:36] <dakkar> sure, but that's not what I asked

[16:36] <dakkar> it is a work-around that may be used in some cases

[16:38] <ShimmerFairy> I mean, through BUILD/TWEAK you are effectively changing the default when it comes to that subclass.

[16:38] <dakkar> but only for rw attributes

[16:38] <dakkar> and the new default is not introspectible via the MOP

[16:40] <dakkar> oh joy, the default value of an attribute is not in the MOP at all, is it?

[16:41] <ShimmerFairy> I did a quick check, and it looks like in Raku, default values only exist within the bowels of QAST.

[16:41] <ShimmerFairy> So maaaaaybe it'll be accessible when RakuAST is a thing?

[16:41] <dakkar> that's the wrong place for it

[16:42] <dakkar> the Attribute class has a $!build_closure attribute, which I think is the thing that gets called to provide the default value

[16:43] <jnthn> Yes, that's called to produce the default, and passed self and the attribute to initalize

[16:43] <jnthn> (Which is how `has Type $.foo .= new` works)

[16:43] <dakkar> it's very private

[16:43] <jnthn> It's exposed as just .build iirc

[16:44] <dakkar> oh, so it is

[16:44] <jnthn> _closure is a bit of an internal detail

[16:44] <dakkar> I couldn't see it in Attribute.^methods

[16:44] <ShimmerFairy> I find .^methods.map(*.name) is the most reliable way of seeing every method's name

[16:45] <dakkar> I agree, that's what I do

[16:45] <dakkar> m: Attribute.^methods.map: *.name

[16:45] <camelia> rakudo-moar 986f8ab6b: ( no output )

[16:45] <dakkar> m: say for Attribute.^methods.map: *.name

[16:45] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say"; in Raku please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at <tmp>:1␤-…»

[16:45] <dakkar> m: .say for Attribute.^methods.map: *.name

[16:45] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤compose␤apply_handles␤get_value…»

[16:46] <dakkar> m: .say for Attribute.^methods.map(*.name).grep(/build/)

[16:46] <camelia> rakudo-moar 986f8ab6b: ( no output )

[16:46] <dakkar> (I know that lots of the bootstrapped bits need lots of love and care…)

[16:47] <dakkar> anyway… I don't actually need that functionality, I was curious to see what the MOP does and what it doesn't

[16:52] *** dakkar left
[16:55] *** caasih left
[16:55] *** timeless left
[17:01] *** caasih joined
[17:03] *** wildtrees joined
[17:03] *** wildtrees left
[17:04] *** wildtrees joined
[17:06] *** caasih left
[17:09] *** caasih joined
[17:14] <jdv79> i was surprised by it

[17:14] <jdv79> but ok

[17:14] <jdv79> thanks

[17:17] *** andrzejku left
[17:20] *** sour joined
[17:20] *** antoniogamiz joined
[17:20] *** soursBot joined
[17:21] *** sour left
[17:25] *** timeless joined
[17:26] *** antoniogamiz left
[17:29] *** chloekek joined
[17:30] *** aborazmeh left
[17:31] <[Coke]> m: Attribute.^method[0]

[17:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «No such method 'method' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'methods'?␤  in block <unit> at <tmp> line 1␤␤»

[17:31] <[Coke]> m: Attribute.^methods[0]

[17:31] <camelia> rakudo-moar 986f8ab6b: ( no output )

[17:31] <[Coke]> m: Attribute.^method[0].gist

[17:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «No such method 'method' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'methods'?␤  in block <unit> at <tmp> line 1␤␤»

[17:31] <[Coke]> m: Attribute.^methods[0].gist

[17:31] <camelia> rakudo-moar 986f8ab6b: ( no output )

[17:31] <[Coke]> m: Attribute.^methods[0].gist.say

[17:31] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside␤»

[17:33] *** kensanata left
[17:34] *** antoniogamiz joined
[17:34] <[Coke]> nʞɐᴚ

[17:45] *** Chi1thangoo joined
[17:56] <antoniogamiz> how can I overload a function to detect that no arguments have been used to call the function?

[17:58] <JJMerelo> uzl[m] good one

[17:58] <JJMerelo> antoniogamiz use slurpy, for instance *@args

[18:00] <[Coke]> make it a multi and have one variant that takes no args?

[18:01] *** Chi1thangoo left
[18:01] <antoniogamiz> none of the solutions work

[18:01] <antoniogamiz> the function is already a multi, inside a package definition

[18:03] <jnthn> m: multi f() { say "no args" }; multi f($a) { say "one arg" }; multi f(*@a) { say "many args" }; f(); f(1); f(1, 2, 3);

[18:03] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «no args␤one arg␤many args␤»

[18:04] <antoniogamiz> mm

[18:05] <antoniogamiz> then there must be something else not working

[18:06] <jdv79> m: my %h; %h{$_}="" for reverse 1..5; %h.raku.say

[18:06] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «{"1" => "", "2" => "", "3" => "", "4" => "", "5" => ""}␤»

[18:06] <jdv79> are hash keys ordered?

[18:07] <jdv79> dd, .raku, .gist - all show them ordered from what i can tell

[18:08] <jdv79> at least .keys isn't

[18:08] <Grinnz> https://cry.nu/perl6/secure-hashing-for-moarvm/

[18:08] <jdv79> wonder why the typical "look at it" methods imply ordering

[18:09] <antoniogamiz> I have recreated my problem here => https://gist.github.com/antoniogamiz/e6e6d8297a25358ea2c0a7145dcbdd9f

[18:09] <MasterDuke> jdv79: TimToady made that decision a while ago

[18:11] <jdv79> i imagine for dev ergonomics.  odd that would be the case and there still isn't a core "pretty print" dumping method

[18:11] <MasterDuke> dd is pretty core, even if not officially so

[18:11] *** sauvin left
[18:12] <jdv79> looks like no newlines or indentation to me

[18:12] <jdv79> anyway, ok. thanks.

[18:17] *** molaf left
[18:17] *** soursBot left
[18:18] *** soursBot joined
[18:27] *** Altai-man_ joined
[18:29] *** sena_kun left
[18:32] *** JJMerelo left
[18:35] <Geth> ¦ doc: uzluisf++ created pull request #3434: Document few additions introduced with 2020.05

[18:35] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3434

[18:38] *** guifa2 joined
[18:40] *** antoniogamiz left
[18:47] *** guifa2 left
[18:50] *** sjm_uk left
[18:50] *** guifa2 joined
[18:51] *** Xliff joined
[18:52] <Xliff> \o

[18:53] <Xliff> If I do "role B {}; class C {}; my $c = C.new; $c = $c but B"; is there a way I can get a piece of code to automatically fire on that last line?

[18:53] *** soursBot_ joined
[18:54] <Xliff> So I guess the question is: Is there a way to automatically run code when punning a role on an object?

[18:54] <moritz> "but B" is mixin more than punning a role

[18:54] <Xliff> Good point. 

[18:55] *** soursBot left
[18:55] <MasterDuke> Xliff: i think there's a COMPOSE phaser or something like that

[18:55] <MasterDuke> ISTR SmokeMachine having a similar question at one point

[18:55] <Xliff> MasterDuke: Hmmm...that might work!

[18:55] <moritz> so, one way is to cheat and define your own infix:<but>

[18:56] <Xliff> moritz: Heh!

[18:56] <moritz> the other is: infix:<but> calls obj.clone.^mixin($role).BUILD_LEAST_DERIVED({});

[18:56] <MasterDuke> maybe it's just code in the mainline of the role?

[18:56] <Xliff> m: role B { }; class C { COMPOSE { say "HI!" } }; my $c = C.new; $c = $c but B;

[18:56] <camelia> rakudo-moar 986f8ab6b: ( no output )

[18:56] <MasterDuke> (that gets executed at each mixin)

[18:56] <Xliff> m: role B { }; class C { COMPOSE { say "HI!" } }; my $c = C.new; $c = $c but B;

[18:56] <camelia> rakudo-moar 986f8ab6b: ( no output )

[18:56] <moritz> so you could hook into the MOP and override ^.mixin

[18:57] <Xliff> Eesh.

[18:57] <MasterDuke> m: role B { say "HI!" }; class C { }; my $c = C.new; $c = $c but B;

[18:57] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «HI!␤»

[18:57] <Xliff> Was hoping there would be something like TWEAK but only for role mixin.

[18:58] <Xliff> MasterDuke: Yeah, but the role needs access to self.

[18:58] <Xliff> m: role B { self.hi }; class C { method hi { say "HI!" };  }; my $c = C.new; $c = $c but B;

[18:58] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> 3role B {7⏏5 self.hi }; class C { method hi { say "H␤    expecting any of:␤        term␤»

[19:00] *** cpan-raku left
[19:00] *** cpan-raku joined
[19:00] *** cpan-raku left
[19:00] *** cpan-raku joined
[19:02] <MasterDuke> m: role B { ::?CLASS.hi }; class C { method hi { say "hi" } }; my $c = C.new; $c = $c but B;

[19:02] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «hi␤»

[19:03] <Xliff>  m: role B { ::?CLASS.hi }; class C { method hi { say "hi" } }; my $c = C.new;

[19:03] <camelia> rakudo-moar 986f8ab6b: ( no output )

[19:03] <Xliff> Ooh! That might work.

[19:06] *** eseyman left
[19:08] *** zacts joined
[19:09] *** zacts left
[19:10] *** soursBot_ left
[19:10] *** soursBot joined
[19:10] <Xliff> MasterDuke++ # Thanks!

[19:11] <MasterDuke> np

[19:13] *** eseyman joined
[19:18] *** domidumont left
[19:20] *** soursBot left
[19:23] *** Xliff left
[19:23] *** soursBot joined
[19:27] *** lucasb joined
[19:32] *** rindolf left
[20:21] *** chloekek left
[20:28] *** sena_kun joined
[20:29] *** Altai-man_ left
[20:30] *** hyperak joined
[20:30] *** hyperak left
[20:32] *** hyperak joined
[20:32] *** hyperak left
[20:33] *** hyperak joined
[20:35] *** cognomin_ left
[20:42] *** hyperak left
[20:42] *** hyperak joined
[20:42] *** hyperak left
[20:43] *** hyperak joined
[20:45] *** nebuchadnezzar left
[20:50] *** soursBot left
[20:50] *** Sgeo joined
[20:54] <lucs> Any idea approximately how many tests in roast?

[20:57] *** brtastic left
[20:58] *** Black_Ribbon joined
[21:01] *** hyperak left
[21:13] <sena_kun> lucs,  	Files=1306, Tests=111304

[21:13] <sena_kun> So about 111_000 tests, I guess.

[21:17] *** vike1 left
[21:17] <lucs> Heh. I just told someone it had over 100,000 tests (pulled the number from you know where).

[21:17] *** guifa2 left
[21:17] <lucs> I thought I was exagerating a bit.

[21:17] <sena_kun> You was close, though. :)

[21:17] <sena_kun> It's not really that far, I'd say.

[21:18] <jnthn> sena_kun: Is that spectest or stresstest?

[21:19] <sena_kun> jnthn, spectest, I think? I took the numbers from lizmat posts to raku-dev. Stresstest has more, I think?

[21:19] <lucs> sena_kun: Yeah, I was lucky :) I'm glad I didn't happen to inflate the number.

[21:19] <jnthn> Yes, so that's an underestimate :)

[21:21] *** KindTwo joined
[21:23] *** KindOne left
[21:24] *** vike1 joined
[21:25] *** KindTwo is now known as KindOne

[21:44] *** aborazmeh joined
[21:44] *** aborazmeh left
[21:44] *** aborazmeh joined
[21:48] *** leah2 left
[21:56] *** nebuchadnezzar joined
[21:59] *** wamba left
[22:02] <jdv79> what would !* mean?

[22:03] <jdv79> m: (1,2,3).grep(!*).say

[22:03] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «()␤»

[22:03] <jdv79> m: (1,2,3).grep(*).say

[22:03] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «(1 2 3)␤»

[22:03] <jdv79> is that what it looks like?

[22:04] <jdv79> oh, nm.

[22:04] *** leah2 joined
[22:06] <timotimo> m: (0, 1, 2, 3).grep(*).say; (0, 1, 2, 3).grep(!*).say; (0, 1, 2, 3).grep(?*).say

[22:06] <camelia> rakudo-moar 986f8ab6b: OUTPUT: «(0 1 2 3)␤(0)␤(1 2 3)␤»

[22:17] *** hyperak joined
[22:27] *** Altai-man_ joined
[22:30] *** sena_kun left
[22:31] *** hyperak left
[22:41] *** maggotbrain joined
[22:48] *** wildtrees_ joined
[22:51] *** wildtrees left
[22:54] *** wildtrees__ joined
[22:58] *** wildtrees joined
[22:58] *** wildtrees_ left
[22:58] *** wildtrees_ joined
[23:00] *** wildtrees__ left
[23:01] *** stoned75 left
[23:01] *** Doc_Holliwould left
[23:03] *** wildtrees left
[23:03] *** stoned75 joined
[23:04] *** Altai-man_ left
[23:19] *** pecastro left
[23:27] *** wildtrees joined
[23:30] *** wildtrees_ left
[23:34] *** wildtrees_ joined
[23:37] *** wildtrees left
[23:38] *** wildtrees__ joined
[23:42] *** wildtrees_ left
[23:59] *** wildtrees__ left
