[00:00] *** guifa2 joined
[00:27] <guifa2> Docs say that "<$variable> Interpolates stringified contents of variable as a regex." but … 

[00:27] <guifa2> p6: my $a = 3; say 'aaa' ~~ /a ** <$a>/;

[00:27] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quantifier quantifies nothing␤at <tmp>:1␤------> 3my $a = 3; say 'aaa' ~~ /a **7⏏5 <$a>/;␤»

[00:28] <guifa2> Shouldn't that be equivalent to /a ** 3/ ?

[00:30] <AlexDaniel> guifa2: well, that's a good question…

[00:31] <AlexDaniel> you can make it work like this

[00:31] <AlexDaniel> m: my $a = 3; say ‘aaa’ ~~ /<{“a**$a”}>/

[00:31] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢aaa｣␤»

[00:31] <AlexDaniel> but that doesn't answer your question

[00:33] <guifa2> I'm guessing the issue is that <$foo> needs to be able to fully compile into a regex on its own, so maybe it's a doc question (but then it feels like there ought to be an easy way to just insert an int for repetitions)

[00:37] <AlexDaniel> m: my $a = 4; say ‘aaa’ ~~ /"a" ** : 3/

[00:37] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢aaa｣␤»

[00:37] <AlexDaniel> not entirely sure why that is allowed but it just is

[00:37] <AlexDaniel> you can even do

[00:37] <AlexDaniel> m: my $a = 4; say ‘aaa’ ~~ /"a" ** :! 3/

[00:37] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢aaa｣␤»

[00:37] <AlexDaniel> m: my $a = 4; say ‘aaa’ ~~ /"a" ** :? 3/

[00:37] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢aaa｣␤»

[00:38] <AlexDaniel> m: my $a = 4; say ‘aaa’ ~~ /"a" ** ^*/

[00:38] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unecessary use of "** ^*" quantifier. Did you mean to use the "*" quantifier␤at <tmp>:1␤------> 3my $a = 4; say ‘aaa’ ~~ /"a" ** ^*7⏏5/␤»

[00:38] <AlexDaniel> m: my $a = 4; say ‘aaa’ ~~ /"a" ** */

[00:38] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quantifier quantifies nothing␤at <tmp>:1␤------> 3my $a = 4; say ‘aaa’ ~~ /"a" **7⏏5 */␤»

[00:38] <AlexDaniel> heh

[00:40] <AlexDaniel> m: my $a = 3; say ‘aaa’ ~~ /"a" ** {$a}/

[00:40] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢aaa｣␤»

[00:40] <AlexDaniel> guifa2: ah, there

[00:41] <AlexDaniel> guifa2: source: https://github.com/perl6/nqp/blob/25114a3f130a692b992f5cc578cb8a0d8d69763c/src/QRegex/P6Regex/Grammar.nqp#L255-L281

[00:41] <AlexDaniel> guifa2: so it really doesn't have much to do with <>, it's just how nqp parses **

[00:42] <guifa2> Hmm yeah because I thought that the { … } was supposed to just run code, but otherwise be ignored

[00:42] <AlexDaniel> guifa2: yeah honestly it makes no sense

[00:43] <AlexDaniel> I would have never figured it out without looking at the source code

[00:43] <AlexDaniel> guifa2: can you file a ticket?

[00:43] <guifa2> My advent calendar post title was going to be "Go home Santa, you're drunk!" but … maybe it's Raku instead ;-)

[00:43] <guifa2> AlexDaniel:  sure.  

[00:44] <AlexDaniel> guifa2: I think this is the right place: https://github.com/perl6/problem-solving/issues/new?assignees=jnthn&labels=language&template=issue-template-language.md&title=

[00:44] <guifa2> AlexDaniel: okay, great.  I was about to go put it in Rakudo

[00:45] <AlexDaniel> we used to do that in the past, yeah

[00:45] <guifa2> But TBH it's probably a bigger thing.  Like I feel like I should be able to do (not that I'd really *want* to, but , you know)

[00:46] <guifa2> something like /'a' { <+ *>.pick } /

[00:46] <brass> I have a question, if I have an array in a hash, can I iterate over the list without adding .list to the end?

[00:46] <AlexDaniel> guifa2: you can do that through <{}>

[00:46] <guifa2> oh, so it really is just a bug with **

[00:46] <AlexDaniel> guifa2: you'll just need to have the whole thing returned from the block

[00:47] <AlexDaniel> brass: well, you can add @ to the front…

[00:47] <brass> In front of where?

[00:47] <AlexDaniel> @(%h<foo>)

[00:47] <brass> Ah

[00:48] <guifa2> although in most cases you don't need to do anything speical

[00:48] <guifa2> p6: my %foo = a => (1,2,3), b => (4,5,6); .say for %foo<a>

[00:48] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «(1 2 3)␤»

[00:48] <guifa2> err

[00:48] <brass> m: my %a; %a<a> = [1, 2, 3]; .say for %a<a>;

[00:48] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «[1 2 3]␤»

[00:49] <guifa2> m: my %foo = a => (1,2,3), b => (4,5,6); .say for %foo<a><>

[00:49] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «1␤2␤3␤»

[00:50] <guifa2> you can use <> to decontainerize

[00:50] <brass> Even better!

[00:51] <AlexDaniel> fish operator :D

[00:51] <AlexDaniel> m: my %foo = a => (1,2,3), b => (4,5,6); .say for |%foo<a>

[00:51] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «1␤2␤3␤»

[00:52] <guifa2> ah yeah and the slip.  So many possibilities

[00:54] * guifa2 just realized that the definition of a "word" character is only Letters + underscore + digits.  That means w+ only gets "ma" from "ma'am"

[00:55] <guifa2> I definitely need to hurry up and get the <local-letters> or similar token 

[00:56] <AlexDaniel> guifa2: you mean \w ? It also includes a lot of unicode stuff

[00:56] <guifa2> m: say "ma'am" ~~ /\w+/

[00:56] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢ma｣␤»

[00:58] <AlexDaniel> m: say “maʼam” ~~ /\w+/

[00:58] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢maʼam｣␤»

[01:00] <guifa2> that's … odd.

[01:01] <guifa2> say <' ’>>>.uniprop

[01:01] <evalable6> guifa2, rakudo-moar 7e3d023b4: OUTPUT: «(Po Pf)␤»

[01:01] <AlexDaniel> unidump: '’

[01:01] <unicodable6> AlexDaniel, https://gist.github.com/0737209f435bc1ef54e6679551d32bd7

[01:01] <AlexDaniel> not that

[01:01] <AlexDaniel> unidump: 'ʼ

[01:01] <unicodable6> AlexDaniel, https://gist.github.com/6dda4d213cc8b6018e3e8d6738466011

[01:03] <guifa2> Only thing that's different is Word_Break, General_Category, and East_Asian_Width.  But General_Category is Punctuation (just different subtypes).  Interesting.  Definitely will need to look a lot deeper for when I do the local-char token

[01:04] <AlexDaniel> guifa2: look at the last link, you have a different character in mind

[01:04] <AlexDaniel> it's not a quote

[01:06] <guifa2> don't you love unicode? lol

[01:06] <AlexDaniel> you know :) http://cldr-build.unicode.org/UnicodeJsps/confusables.jsp?a=%27&r=None

[01:07] <AlexDaniel> m: say “maʹʻʼʽʾˈˊˋ˴am” ~~ /\w+/

[01:07] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢maʹʻʼʽʾˈˊˋ｣␤»

[01:07] <AlexDaniel> oh shoot it didn't like ˴

[01:07] <AlexDaniel> m: say “maʹʻʼʽʾˈˊˋam” ~~ /\w+/

[01:07] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «｢maʹʻʼʽʾˈˊˋam｣␤»

[01:07] <AlexDaniel> unidump: ʹ˴

[01:07] <unicodable6> AlexDaniel, https://gist.github.com/01851dfea4156aa12a215919e6c80be1

[01:08] <AlexDaniel> oooooooooh it's a *spacing* modifier

[01:08] <guifa2> AlexDaniel: CLDR actually has a lot of lax pasing values even down to a per-language value

[01:10] <guifa2> (different purpose than the confusables, which is more for security, but still... so much to handle to do good parsing)

[01:14] <guifa2> AlexDaniel: take a look at this: https://bit.ly/2BK0Ni1  need to polish it up a bit but it'll end up being the basis of the advent calendar post

[01:14] <AlexDaniel> ohh fuzzy matching

[01:15] <guifa2> actually this one shows it off even better: https://bit.ly/2ormu3k 

[01:19] <brass> Hey I'm working on last year's advent of code and I'm running into something really strange

[01:19] <brass> When iterating over a hash, I get really bizarre behaviour unless I use .list or .sort

[01:20] <guifa2> example?

[01:20] <SmokeMachine> xinming, vrurg: what do you guys think? https://www.irccloud.com/pastebin/WnlucxEh/

[01:21] <brass> Here's my code: https://pastebin.com/ERiabKHn here's my input: https://pastebin.com/Fmn4AFjP

[01:22] <brass> If I run that code I get erratic answers but if I change line 15 to .list it's consistent

[01:22] <vrurg> SmokeMachine: do you implicitly set $_ in the current context?

[01:22] <SmokeMachine> no

[01:22] <vrurg> Where is .^save takes its topic then?

[01:23] <SmokeMachine> vrurg: iterating on `for`

[01:23] <vrurg> Oops... I'm a bit tired.

[01:24] <SmokeMachine> `ResultSeq.with($db)` just returns a ResultSeq that will run on `$db`...

[01:24] <vrurg> Post.^all: :with<db2> then, isn't it?

[01:24] <vrurg> Ah, I see.

[01:25] <vrurg> SmokeMachine: looks inconsistent. :with is everywhere, but not with .^all.

[01:26] <vrurg> I mean, you could obviously have the method there, but it'd be better to support adverb on .^all method too.

[01:26] <brass> guifa2: Any ideas?

[01:26] <guifa2> brass: I'm taking a look at it.  One small thing to point out is that for %steps.pairs is equivalent to for %steps

[01:26] <SmokeMachine> it's `.with` on ResultSeq, but every `Model` meta-method (that used db), can receive an optional `:$with`

[01:27] <brass> Yeah, I only did that to be explicit because I'm trying to figure out what's going on

[01:27] <vrurg> SmokeMachine: So, I can write it Post.^all: :with<db2> – and it'd be the same?

[01:27] <SmokeMachine> vrurg: yes

[01:28] <vrurg> Goooooood! :D

[01:28] <vrurg> I like it so far. Looks so much Rakuish!

[01:28] <SmokeMachine> :)

[01:29] <SmokeMachine> vrurg: but I'm thinking on changing `:$with` for `:$on`

[01:29] <vrurg> SmokeMachine: BTW, my moarvm patch was commited. So, https://github.com/FCO/Red/issues/158 must be working now. Unfortunately, I can't test it. 

[01:29] <SmokeMachine> `Post.^all(:on<db1>)` => all posts on db1...

[01:30] <SmokeMachine> vrurg: good news! I'll test it tomorrow

[01:30] <vrurg> SmokeMachine: both are words are ok. I wouldn't care. 

[01:30] <SmokeMachine> `:$on` or `:$using`

[01:31] *** squashable6 left
[01:31] <vrurg> SmokeMachine: TIMTOWTDI, use named param aliasing. Then people choose what hey like.

[01:31] <SmokeMachine> vrurg: yes... that makes sense!

[01:32] *** squashable6 joined
[01:32] * vrurg is away, continue working on PseudoStash semantics. Pingable.

[01:34] <guifa2> Oh! I see the problem

[01:34] <guifa2> brass: your loop has sideeffects

[01:34] <brass> Oh Oh! Where?

[01:35] <guifa2> for %steps { ……… if foo { %steps{$newKey} = bar } …… }

[01:35] <guifa2> when you insert the new key, it's reseting the loop.  I'd be willing to bet that .pairs is lazy too, whereas .list must not be

[01:36] <guifa2> or not reseting the loop per se, but it's definitely causing it to lose track of where it was

[01:36] <brass> oooooooooooh 

[01:37] <brass> Yeah .pairs produces  a Seq whereas .list prodcues a list

[01:37] <brass> I never would have put that together

[01:37] <brass> Thank you so much that was driving me crazy

[01:37] <guifa2> same.  I only realized it when I had it output the key on each loop

[01:38] <guifa2> and I saw a few letters show up twice

[01:42] <Geth_> ¦ whateverable: 63df823cfd | (Aleks-Daniel Jakimenko-Aleksejev)++ | 5 files

[01:42] <Geth_> ¦ whateverable: Bump the msg length limit to make Tellable cooler

[01:42] <Geth_> ¦ whateverable: 

[01:42] <Geth_> ¦ whateverable: Also make it say something meaningful when messages are gisted.

[01:42] <Geth_> ¦ whateverable: 

[01:42] <Geth_> ¦ whateverable: Resolves #354.

[01:42] <Geth_> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/63df823cfd

[01:43] *** tellable6 left
[01:45] *** tellable6 joined
[02:00] *** AlexDaniel left
[02:16] *** Kaeipi joined
[02:18] *** redable joined
[02:18] *** Kaiepi left
[02:18] <brass> Does List.grep return a container or a value?

[02:20] <SmokeMachine> brass: a Seq...

[02:20] <SmokeMachine> m: (1,2,3,4,5).grep(* %% 2).^name.say

[02:20] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «Seq␤»

[02:20] <brass> If I go through the seq and modify the values will it effect the original list?

[02:21] <brass> Or say hash?

[02:22] <brass> Ok it does nvm

[02:23] <SmokeMachine> m: my @a = 1,2,3,4,5; for @a -> $b is rw { $b *= 2 }; say @a

[02:23] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «[2 4 6 8 10]␤»

[02:23] <brass> m: my %a = <a 1 b 2>; .value++ for %a.grep(*); %a.say

[02:23] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «{a => 2, b => 3}␤»

[02:24] <SmokeMachine> https://www.irccloud.com/pastebin/aICThncR/

[02:25] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/aICThncR/

[02:25] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[02:25] <redable> SmokeMachine, https://gist.github.com/876e1419686355a3cf02342776fb948a

[02:26] <brass> Another question, is there an easy way to remove an element from an array? Like @a = [1, 2, 3]; @a.remove(2) or something?

[02:29] <SmokeMachine> m: @a = ^10; @a.splice: 2, 3; say @a

[02:29] *** Kaeipi left
[02:29] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5@a = ^10; @a.splice: 2, 3; say @a␤»

[02:30] <SmokeMachine> m: my @a = ^10; @a.splice: 2, 3; say @a

[02:30] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «[0 1 5 6 7 8 9]␤»

[02:30] *** Kaiepi joined
[02:30] <SmokeMachine> brass: ^^

[02:31] <SmokeMachine> m: my @a = ^10; @a[3]:delete; say @a

[02:31] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «[0 1 2 (Any) 4 5 6 7 8 9]␤»

[02:32] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/aICThncR/

[02:32] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[02:32] *** redable left
[02:34] <brass> SmokeMachine: Thanks :)

[02:34] *** redable joined
[02:34] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/aICThncR/

[02:34] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[02:34] <redable> SmokeMachine, https://gist.github.com/cc04bf118bc3bf113c1c38fb4a651139

[02:35] <SmokeMachine> xinming: ^^, please, see if you prefer this way...

[02:43] *** redable left
[02:44] <brass> Oh when I said that I meant like @a = <a b c>; @a.remove('b') sorry I wasn't more specific with my example, I shouldn't have used numbers

[02:45] *** AlexDaniel joined
[02:45] *** AlexDaniel left
[02:45] *** AlexDaniel joined
[02:45] <brass> Unless there's just an easy way to get the index of a word in a list then I could just splice it too

[02:49] <SmokeMachine> m: my @a = < a b c d e >; @a .= grep: * ne “c”; say @a

[02:49] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «[a b d e]␤»

[02:50] <SmokeMachine> m: my @a = < a b c d e >; say @a.index: “c”

[02:50] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «4␤»

[02:51] <brass> I thought .index was Cool and converted the array into a string first?

[02:54] <brass> my @a = <one two three>; say @a.index: "two"

[02:54] <evalable6> brass, rakudo-moar 7e3d023b4: OUTPUT: «4␤»

[02:55] <brass> The grep method makes sense though  

[03:05] *** El_Che left
[03:09] *** Kaiepi left
[03:11] *** Kaiepi joined
[03:11] *** Kaiepi left
[03:12] *** Kaiepi joined
[03:17] *** Kaiepi left
[03:34] *** MasterDuke left
[03:34] <elcaro> m: my @a = < one two three four >; @a.splice(@a.first('two'):k, 1); say @a;

[03:34] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «[one three four]␤»

[03:36] <elcaro> although for resiliancy, you wanna check if that index exists first, ie. with @a.first('two'):k -> $idx { @a.splice($idx, 1) }

[03:45] *** huyna joined
[03:46] <huyna> hi all, is there any http client module that work well on Window environment, i tried with Cro but it seem to have certificate problem when i request https host

[03:51] <elcaro> huyna: have you installed the IO::Socket::SSL module

[03:52] <huyna> yeah elcaro, i have just checked and it's installed

[03:53] *** h3l1x joined
[03:55] *** h3l1x left
[04:01] <elcaro> I currently don't have Rakudo installed on my Windows machine to test if it works for me.

[04:01] <elcaro> You could try HTTP::UserAgent

[04:01] <elcaro> in the IO::Socket::SSL test files, there's a snippet that opens a socket on 443... can you run that test and confirm it's successfuly for you

[04:14] <huyna> thanks elcaro, i will try on this

[04:20] <guifa2> brass: for the index of an item

[04:20] <elcaro> huyna: check if this works: https://gist.github.com/0racle/09137d1a904d12ed3aaaa26037c35ace

[04:20] <elcaro> this will at least confirm that your IO::Socket::SSL is working ok.

[04:21] <guifa2> m: my @a = <one two three four >;  say @a.first("three"):k

[04:21] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «2␤»

[04:22] <huyna> this seem ok elcaro

[04:22] <guifa2> note the :k which gives you the key (or index).  Grabbing the value is mostly pointless if you're matching literals, but you can use all sorts of other things too

[04:22] <guifa2> m: my @a = <one two three four >;  say @a.first(*.starts-with: 't'):kv

[04:22] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «(1 two)␤»

[04:23] <huyna> temporarily i can use this way on my auth request instead of a http client

[04:23] <huyna> thank you :D

[04:30] <elcaro> huyna: No probs

[05:30] *** squashable6 left
[05:32] *** squashable6 joined
[05:42] *** huyna left
[06:07] *** Doc_Holliwould joined
[06:08] *** jmerelo joined
[06:10] *** holli joined
[06:10] *** Doc_Holliwood left
[06:11] <jmerelo> releasable6: status

[06:11] <tellable6> 2019-10-26T23:04:35Z #raku <uzl[m]> jmerelo Thanks for letting me know ;-)!

[06:11] <releasable6> jmerelo, Next release will happen when it's ready. 2 blockers. 7 out of 450 commits logged (⚠ 9 warnings)

[06:11] <releasable6> jmerelo, Details: https://gist.github.com/67165069e3c54e5001c09832e2ed3035

[06:12] *** Doc_Holliwood joined
[06:13] *** sena_kun joined
[06:14] *** Doc_Holliwould left
[06:15] *** Doc_Holliwould joined
[06:15] *** sena_kun left
[06:16] *** holli left
[06:17] *** holli joined
[06:18] *** Doc_Holliwood left
[06:20] *** Doc_Holliwood joined
[06:22] *** Doc_Holliwould left
[06:23] *** Doc_Holliwould joined
[06:24] *** holli left
[06:25] *** holli joined
[06:27] *** Doc_Holliwood left
[06:28] *** Doc_Holliwood joined
[06:29] *** Doc_Holliwould left
[06:31] *** Doc_Holliwould joined
[06:31] *** holli left
[06:33] *** holli joined
[06:34] *** Doc_Holliwood left
[06:36] *** Doc_Holliwood joined
[06:36] *** Doc_Holliwould left
[06:38] *** Doc_Holliwould joined
[06:39] *** robertle left
[06:39] <Geth_> ¦ doc/master: 4 commits pushed by tusindfryd++, (Dominika Góral)++, (Juan Julián Merelo Guervós)++

[06:39] <Geth_> ¦ doc/master: a37bf1f7cb | Fix broken links

[06:39] <Geth_> ¦ doc/master: 736f985530 | Update create-cli.pod6

[06:39] <Geth_> ¦ doc/master: 9ff168d02d | Update operators.pod6

[06:39] <Geth_> ¦ doc/master: e7b73ea077 | Merge pull request #3076 from tusindfryd/master

[06:39] <Geth_> ¦ doc/master: review: https://github.com/perl6/doc/compare/b839acebab6a...e7b73ea077ee

[06:40] *** holli left
[06:40] *** lil joined
[06:40] <lil> Hi

[06:40] *** robertle joined
[06:41] <moon_child> hii

[06:41] *** holli joined
[06:42] <lil> can you say please how to convert Any to Str. Compilator says that `⚠ test Use of uninitialized value of type Any in string context.

[06:42] <lil> ⚠ test Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.`

[06:42] *** Doc_Holliwood left
[06:42] *** maettu joined
[06:43] <lil> but this don't work in my code where Im using DBIish

[06:44] *** Doc_Holliwood joined
[06:45] *** Doc_Holliwould left
[06:46] *** Doc_Holliwould joined
[06:47] *** holli left
[06:49] *** holli joined
[06:49] *** Doc_Holliwood left
[06:52] *** Doc_Holliwood joined
[06:52] *** wamba joined
[06:53] *** Doc_Holliwould left
[06:54] *** Doc_Holliwould joined
[06:55] *** stoned75 left
[06:55] *** holli left
[06:57] *** holli joined
[06:58] *** Doc_Holliwood left
[07:00] *** Doc_Holliwood joined
[07:01] *** Doc_Holliwould left
[07:02] *** japhb left
[07:03] *** Doc_Holliwould joined
[07:03] *** japhb joined
[07:04] *** holli left
[07:05] *** holli joined
[07:06] *** Doc_Holliwood left
[07:08] *** Doc_Holliwood joined
[07:09] *** Doc_Holliwould left
[07:10] *** Doc_Holliwould joined
[07:11] *** holli left
[07:13] *** holli joined
[07:14] *** Doc_Holliwood left
[07:16] *** Doc_Holliwood joined
[07:17] *** Doc_Holliwould left
[07:18] *** Doc_Holliwould joined
[07:19] *** holli left
[07:21] *** holli joined
[07:22] *** Doc_Holliwood left
[07:24] *** Doc_Holliwood joined
[07:25] *** Doc_Holliwould left
[07:26] *** Doc_Holliwould joined
[07:27] *** holli left
[07:29] *** holli joined
[07:30] *** Doc_Holliwood left
[07:31] *** Doc_Holliwood joined
[07:32] *** jmerelo left
[07:32] *** Doc_Holliwould left
[07:34] *** Doc_Holliwould joined
[07:35] *** holli left
[07:37] *** holli joined
[07:37] *** Doc_Holliwood left
[07:39] *** Doc_Holliwood joined
[07:40] *** Doc_Holliwould left
[07:42] *** Doc_Holliwould joined
[07:43] *** holli left
[07:45] *** holli joined
[07:46] *** Doc_Holliwood left
[07:47] *** Doc_Holliwood joined
[07:48] *** Doc_Holliwould left
[07:50] *** Doc_Holliwould joined
[07:51] *** holli left
[07:52] *** holli joined
[07:54] *** Doc_Holliwood left
[07:55] *** Doc_Holliwood joined
[07:56] *** Doc_Holliwould left
[07:58] *** Doc_Holliwould joined
[07:59] *** holli left
[08:00] *** holli joined
[08:01] *** lil left
[08:01] *** Doc_Holliwood left
[08:03] *** Doc_Holliwood joined
[08:04] *** Doc_Holliwould left
[08:05] *** Doc_Holliwould joined
[08:07] *** holli left
[08:08] *** holli joined
[08:09] *** Doc_Holliwood left
[08:11] *** Doc_Holliwood joined
[08:11] *** ZzZombo_ joined
[08:12] *** Doc_Holliwould left
[08:13] *** Doc_Holliwould joined
[08:14] *** ZzZombo left
[08:14] *** ZzZombo_ is now known as ZzZombo

[08:15] *** holli left
[08:16] *** holli joined
[08:16] *** Doc_Holliwood left
[08:19] *** Doc_Holliwould left
[08:23] *** cdc_ left
[08:45] *** pmurias joined
[08:53] *** holli left
[08:54] *** cpan-raku left
[08:54] *** cpan-raku joined
[08:54] *** cpan-raku left
[08:54] *** cpan-raku joined
[09:06] *** xinming_ joined
[09:09] *** xinming left
[09:11] *** pmurias left
[09:13] *** pmurias joined
[09:47] <xinming_> SmokeMachine: I personally prefer   red-with(Post, :db1).^all  :-)

[09:48] <xinming_> .say for Post.^all.with: "db1";

[09:48] <xinming_> This is acceptable

[09:48] <xinming_> the red-with('db1', Post).^all   is more natural to me.

[09:49] <xinming_> Or, Post.^all(:with<db1>);    Post.^with('db1').^all

[09:53] <xinming_> SmokeMachine: actually, The reason is, the order to think about the code is,  We first see the "database",  then, we look into the model, then, we do something with the "model".

[09:57] <xinming_> SmokeMachine: So, if we put the db info at last, Which is not natural to me, As I'll check order is, DB -> Model -> What we'll do with the model.  If we put :with<db1> to the last. Then, I'll need to find what db is then, I have to go back to see what it does with that db.

[10:00] *** pmurias left
[10:29] *** Doc_Holliwood joined
[11:08] *** sarna joined
[11:29] *** sarna left
[11:29] *** sarna joined
[11:38] *** xinming_ left
[11:39] *** xinming_ joined
[11:46] <tbrowder> can someone please tell me again how to find the currents docs?

[11:49] <tbrowder> never mind, found it:

[11:53] <tbrowder> perl6docs.github.io

[11:59] *** pmurias joined
[12:05] *** redable joined
[12:08] <xinming_> tbrowder: docs.perl6.org is also a good place

[12:11] *** Doc_Holliwood left
[12:33] *** sena_kun joined
[12:47] *** ggoebel joined
[12:50] *** xinming_ left
[12:50] *** xinming_ joined
[12:57] *** Altai-man_ joined
[12:59] *** sena_kun left
[13:14] <tyil> .tell jmerelo where to submit possible advent calendar entries?

[13:14] <tellable6> tyil, I'll pass your message to jmerelo

[13:14] *** redable left
[13:24] <guifa> tyil lemme grab you the link

[13:25] <guifa> tyil: https://github.com/perl6/advent/blob/master/perl6advent-2019/schedule 

[13:25] <tyil> guifa: ty

[13:27] *** scimon joined
[13:27] <guifa> Can methods be installed in a class through export or are roles the main/only way to do that?

[13:27] <tyil> think you'll need to use a role if I understand you correctly

[13:27] <scimon> p6: say sqrt(-1) 

[13:27] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «NaN␤»

[13:27] <tyil> perhaps you could use monkeytyping to do it through sub EXPORT

[13:28] <scimon> (So... any reason that doesn't give 0+i ? 

[13:28] <tyil> but monkeytyping comes with its own flaws

[13:29] <guifa> tyil: thanks.  ’use Foo’ lets tokens get imported no problems, but not methods.  I think what’ll be best is for me to just adjust it to work in a token block.  Not *quite* as clean but I can make it work

[13:29] <scimon> p6: say sqrt(-1+i)

[13:29] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «0.4550898605622274+1.09868411346781i␤»

[13:29] <scimon> p6: say sqrt(-1+0i)

[13:29] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «0+1i␤»

[13:29] <scimon> So... that works.

[13:29] <scimon> Hmm

[13:29] <guifa> p6: say sqrt(-1.Complex)

[13:29] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «0+1i␤»

[13:31] <guifa> so quick workaround I guess is if you want/expect unreal, just cast to Complex 

[13:34] *** lucasb joined
[13:36] <[Coke]> guifa++

[13:42] <guifa2> is there a way to use POST inside of a token?

[13:48] * guifa2 would also be cool with weird workarounds, this is for non-user-facing code.  Maybe 'token foo is trait' and have the trait install it?  Or via wrap?

[13:56] *** redable joined
[14:12] *** Kaiepi joined
[14:17] *** redable left
[14:53] *** scimon left
[14:55] *** Kaiepi left
[14:59] *** Altai-man_ left
[15:03] *** Kaiepi joined
[15:29] *** Kaiepi left
[15:29] *** Doc_Holliwood joined
[15:30] *** sarna left
[15:34] *** kybr joined
[15:38] *** Kaiepi joined
[15:43] *** Manifest0 joined
[15:47] *** warriors joined
[16:12] *** pmurias left
[16:39] *** Kaiepi left
[16:42] *** Kaiepi joined
[16:51] <tony-o>  .tell tbrowder Xoos will respect unique constraints on the database (even with multi columns), if you want it to update or insert depending on multiple columns then you can set `is-primary-key` on the columns and it'll look for all of those columns when deciding whether to update or insert

[16:51] <tellable6> 2019-10-27T12:49:26Z #raku <tbrowder> tony-o is there any way to put a unique(cola, colb) constraint using Xoos (SQLite)?

[17:04] *** MasterDuke joined
[17:08] <Kaiepi> releasable6, status

[17:08] <releasable6> Kaiepi, Next release will happen when it's ready. 1 blocker. 7 out of 451 commits logged (⚠ 9 warnings)

[17:08] <tellable6> 2019-10-24T20:09:20Z #moarvm <brrt> Kaiepi - I'm not aware of the details of your grant, so I'd need some time to get up to speed, but I'll volunteer as a 'moarvm-side' mentor, if that'd be of any help

[17:08] <releasable6> Kaiepi, Details: https://gist.github.com/0a892d9eb297bce4bb46f63421295ba5

[17:22] *** patrickb joined
[17:24] *** vrurg left
[17:27] <Geth_> ¦ perl6.org/master: 5 commits pushed by (Roman Baumer)++

[17:27] <Geth_> ¦ perl6.org/master: e15f8c08e8 | http://pl6anet.org/ -> https://pl6anet.org/

[17:27] <Geth_> ¦ perl6.org/master: 57917490d6 | perl6maven.com 502 Bad Gateway -> removed

[17:27] <Geth_> ¦ perl6.org/master: d4ce1912a0 | http://rakudo.org/ -> https://rakudo.org/

[17:27] <Geth_> ¦ perl6.org/master: 408c2ab5ac | http://design.perl6.org -> https://design.raku.org

[17:27] <Geth_> ¦ perl6.org/master: ff2d1f2258 | Community/Raku Testes commented out, using html comment

[17:27] <Geth_> ¦ perl6.org/master: review: https://github.com/perl6/perl6.org/compare/19f88526cbdd...ff2d1f2258b5

[17:38] *** cognomin_ joined
[17:41] <tony-o> .tell tbrowder an example can be found here https://github.com/tony-o/perl6-xoo/blob/master/t/06-compound-keys.t

[17:41] <tellable6> tony-o, I'll pass your message to tbrowder

[17:43] *** cognominal left
[17:46] *** chloekek joined
[17:47] *** chloekek left
[17:48] *** chloekek joined
[17:51] <Geth_> ¦ perl6.org: 3d3a41ea73 | (Roman Baumer)++ | includes/footer

[17:51] <Geth_> ¦ perl6.org: http://moarvm.com/ -> https://moarvm.org/

[17:51] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/3d3a41ea73

[17:51] <Geth_> ¦ perl6.org: 4d603731a6 | (Roman Baumer)++ | includes/footer

[17:51] <Geth_> ¦ perl6.org: http://pl6anet.org/ -> https://pl6anet.org/

[17:51] <Geth_> ¦ perl6.org: 

[17:51] <Geth_> ¦ perl6.org: http://rakudo.org/ -> https://rakudo.org/

[17:51] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/4d603731a6

[17:51] <Geth_> ¦ perl6.org: 828794b5d1 | (Roman Baumer)++ | includes/footer

[17:51] <Geth_> ¦ perl6.org: design.perl6.org -> design.raku.org

[17:51] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/828794b5d1

[17:52] *** b2gills left
[17:56] *** b2gills joined
[17:58] *** chloekek left
[17:58] <AlexDaniel> rba: so what about planet.raku.org? :)

[17:59] <rba> AlexDaniel: https://planet.raku.org :-)

[18:00] <AlexDaniel> yaay

[18:00] <rba> AlexDaniel: You're very quick.

[18:01] <rba> Btw. realised there is many work to do on the website for raku.org. May we ask for more help others?

[18:01] <AlexDaniel> rba: what's #raku-infra ? Is it a thing? I wanted to get rid of unnecessary channels, actually…

[18:01] *** wildtrees joined
[18:02] <AlexDaniel> rba: what work? It's mostly done, actually, there are still many places that mention Perl 6 but they're often references to books and similar

[18:02] <rba> AlexDaniel: So moving back to ##perl6-infra (just joking.)

[18:02] <AlexDaniel> ideally just move to #raku-dev :)

[18:02] <rba> irc channels

[18:02] <AlexDaniel> we definitely do need help though

[18:03] <rba> Will check and if not needed any more will shut down the *-infra channels again.

[18:04] <rba> I just tried to cleanup the basics. Like wrong redirects an so on. Many pages still have Perl 6 in the wording.

[18:05] <rba> both perl6.org and raku.org every 15 minutes will get the updates from the repo.

[18:05] *** veesh_ joined
[18:07] *** veesh left
[18:07] *** veesh_ is now known as veesh

[18:09] *** chloekek joined
[18:10] <guifa> Hrm.  How could one wrap a token?

[18:11] <guifa> tokens are methods, after all, but I can’t just access them from within the grammar (and docs seem to indicate the regexen belong to the Match, not the Grammar, but that’s not helping me too much)

[18:17] <Geth_> ¦ perl6.org: a7cb86a366 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[18:17] <Geth_> ¦ perl6.org: Rakufy more pages

[18:17] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/a7cb86a366

[18:18] <AlexDaniel> rba: ↑ I think I tweaked all pages now, there are still mentions of Perl 6 but what's left is a bit harder to change

[18:19] <wildtrees> so is perl 6 officially raku now? 

[18:19] <guifa> oh wow, that was tricky.  But I figured it out

[18:20] <guifa> To wrap a token in a grammar, you can add a POST block, and then find the method on the class: POST { ::?CLASS.^find_method('foo').wrap( ... ) }

[18:21] <guifa> wildtrees: yes.  It’s been officially decided, right now it’s a process of implementing the name change

[18:21] <wildtrees> oh ok 

[18:26] <AlexDaniel> well, the change is already implemented, in some sense

[18:26] <AlexDaniel> it's just that there are many things that still call it Perl 6 and we need to update them

[18:27] <AlexDaniel> but it's already Raku, today

[18:33] *** maettu left
[18:37] *** warriors left
[18:42] <tony-o> is the executable name changed on current head ?

[18:42] <tony-o> the rakudo nightly i published might need it's docs changed :-)

[18:44] *** warriors joined
[18:47] <AlexDaniel> tony-o: it's not, and we probably want to tweak that before the release, hmm

[18:48] <AlexDaniel> tony-o: but we'll have both raku and perl6, one probably as a symlink to the other

[18:52] <tony-o> for 6.e, yes?

[18:53] <tony-o> i need to checkback with the deprecation ticket that was opened re:(extensions|names) though i'm not sure the latter was discussed

[18:53] *** rindolf joined
[18:53] <rindolf> hi all

[18:53] *** Kaiepi left
[18:53] <tony-o> hey rindolf 

[18:54] <rindolf> is this chan moer active than #perl6 ?

[18:54] <rindolf> tony-o: sup?

[18:54] *** Kaiepi joined
[18:54] <tony-o> probably about equal now, it's transitioning to this channel more and more

[18:54] <rindolf> tony-o: ah

[18:54] <mspo> forward the old one :)

[18:54] <tony-o> the end goal is to deprecate perl6

[18:54] <rindolf> mspo: i agree

[18:55] <AlexDaniel> tony-o: well, we ended up starting to support .rakumod ahead of time

[18:56] <AlexDaniel> tony-o: and if so, I guess having a raku symlink is not going to hurt too…

[18:56] <tony-o> i caught that, i'm unsure what to do with 30+ modules - i'm wondering if the API key in the META should help indicate what extensions ship with the module distro

[18:57] <tony-o> in that way we can control what is being served from the repo 

[18:58] <tony-o> or if my plugin for zef to go to a zef ecosystem should provide the version number but then we have an inconsistency where i'm trying to modify gzipped tar files in a stream just to modify extensions (and check sums will fail)

[19:02] <rindolf> AlexDaniel: hi, sup?

[19:02] <AlexDaniel> rindolf: sup :)

[19:04] <rindolf> AlexDaniel: slaved away on https://twitter.com/shlomif/status/1188354040134025216 - it may get easier in time

[19:04] <rindolf> captioned images i meab

[19:05] <rindolf> captioned images i mean

[19:05] <AlexDaniel> rindolf: honestly, I'm very confused by your sense of humor :D

[19:05] <tony-o> jnthn: are you able to restart the travis ci for: https://travis-ci.org/croservices/cro-openapi-routes-from-definition/jobs/575080893?utm_medium=notification&utm_source=github_status ?  i show this as passing now

[19:05] <rindolf> AlexDaniel: heh

[19:06] *** stoned75 joined
[19:06] <rindolf> AlexDaniel: do you like any of those - https://www.shlomifish.org/humour.html ?

[19:07] <rindolf> AlexDaniel: she has very good tweets usually - https://twitter.com/lissalet

[19:08] <rindolf> AlexDaniel: well, we may be getting off topic

[19:09] <rindolf> AlexDaniel: how are you?

[19:10] *** stoned75 left
[19:11] <rindolf> #raku without Timtoady is like a cat without whiskers - https://www.shlomifish.org/humour/fortunes/show.cgi?id=svn-stand-in-sussman

[19:11] <rindolf> my late grandfather said that - in hebrew

[19:15] <tony-o> jnthn: disregard, rakudobrew wasn't higher in my path and i'm testing against wrong revision

[19:18] *** patrickb left
[19:34] *** guifa2 left
[19:35] *** guifa2 joined
[19:39] *** guifa2 left
[19:41] *** guifa2 joined
[19:43] <rba> AlexDaniel: Looks much better already.

[19:44] <rba> Let me know when you thing it‘s fine to setup the redirect perl6.org/* -> raku.org/*

[19:52] <AlexDaniel> rba: why not now?

[19:53] <AlexDaniel> it looks like a good start, I hope missing bits will be contributed shortly

[19:59] *** guifa2 left
[19:59] *** guifa2 joined
[20:03] <Geth_> ¦ rakudo.org: 364b17418f | (Aleks-Daniel Jakimenko-Aleksejev)++ | 12 files

[20:03] <Geth_> ¦ rakudo.org: Initial Raku changes

[20:03] <Geth_> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/364b17418f

[20:04] <TreyHarris> What's the most straightforward way to do tied-hash style on-disk persistence?

[20:05] <xinming_> m: my %x = (:a<a b c>); %x.append(%(:a^C; %x.perl.say;

[20:05] <camelia> rakudo-moar 9f433da0d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in contextualizer; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3<a b c>); %x.append(%(:a^C; %x.perl.say;7⏏5<EOL>␤»

[20:05] <xinming_> m: my %x = (:a<a b c>); %x.append(%(:a); %x.perl.say;

[20:05] <camelia> rakudo-moar 9f433da0d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3a<a b c>); %x.append(%(:a); %x.perl.say;7⏏5<EOL>␤    expecting …»

[20:05] <xinming_> m: my %x = (:a<a b c>); %x.append(%(:a)); %x.perl.say;

[20:05] <camelia> rakudo-moar 9f433da0d: OUTPUT: «{:a($["a", "b", "c", Bool::True])}␤»

[20:05] <xinming_> How do we replace the a key in the hash please?

[20:05] <xinming_> I saw that push and append are almost the same for Hash.

[20:05] <TreyHarris> xinming_: if it can all fit in memory, sure--or JSON, for that matter. but... oh, I thought you were answering my question :-)

[20:06] <xinming_> Nope, I'm confused.

[20:08] <TreyHarris> m: my %x = (:a<a b c>); %x.append(%(:a)); %x.perl.say; %x<a> = 'new value'; %x.perl.say;

[20:08] <camelia> rakudo-moar 9f433da0d: OUTPUT: «{:a($["a", "b", "c", Bool::True])}␤{:a("new value")}␤»

[20:08] <TreyHarris> just assign to it?

[20:09] <tony-o> what is it youre trying to do?

[20:09] <xinming_> Yea, Only assign to it, The reason I don't like this is, maybe arg list will overflow.

[20:09] <xinming_> tony-o: my %x = (:a<a b c>); %x.append(%(:a)); %x.perl.say; %x<a> = 'new value'; %x.perl.say;

[20:10] <tony-o> i saw that but what is the end goal?  if you want to tie the hash var to a container then binding would be better

[20:11] <tony-o> m: my %x = :a<5 6 7>; say %x.gist; my $y = 7; %x<a> := $y; say %x.gist; $y++; say %x.gist

[20:11] <camelia> rakudo-moar 9f433da0d: OUTPUT: «{a => (5 6 7)}␤{a => 7}␤{a => 8}␤»

[20:12] <tony-o> but that doesn't seem to address `tied-hash style on-disk persistence` 

[20:13] <TreyHarris> tony-o: that was my question, I think xinming_ just happened to have their own question to ask at the same moment that was confusingly seemingly related

[20:13] <tony-o> ah

[20:13] <AlexDaniel> rba: any thoughts on why this is not updating? https://rakudo.org/

[20:13] <tony-o> TreyHarris: i think that perhaps no module with that exists

[20:14] <tony-o> AlexDaniel: is there a cdn in front of it? perhaps cached?

[20:14] <tony-o> TreyHarris: that looks like an interesting one to write that i could pick up later this week if you don't intend to

[20:14] <AlexDaniel> tony-o: no clue, but I hope rba knows

[20:16] <TreyHarris> tony-o: well, there's lizmat's 

[20:16] <TreyHarris> oops

[20:16] <lizmat> que?

[20:16] <TreyHarris> lizmat: sorry, finger-fumble tagged you and sent my message prematurely

[20:16] <lizmat> oki

[20:16] <tony-o> ah, search missed that one :-)

[20:17] * lizmat goes back to working on the RW

[20:17] <TreyHarris> I meant, "well, there's jstowe's GDBM binding" that looks pretty complete

[20:17] <tony-o> i'd use his modules (and lizmat's)

[20:20] <rba> AlexDaniel: curently afk. will check in the next 30 mins...

[20:20] <TreyHarris> I was interested in doing an on-disk trie, though, and unlike Perl 5's persistent tie modules, there doesn't seem to be general-purpose glue for this kind of thing

[20:21] <tony-o> what type of trie?

[20:21] <TreyHarris> just a plain character-based one. have an anagram problem to work on

[20:23] <TreyHarris> the set of allowable entries can expand from time to time, though, and needs to persist between invocations

[20:23] <TreyHarris> s/allowable// # no idea why I put that word there

[20:24] <tony-o> gotcha

[20:24] <tony-o> that sounds like an interesting one to work one

[20:24] <tony-o> s/.$//

[20:25] <guifa2> How does one properly export a wrapped function?  It seems like only the original, unwrapped one gets exported

[20:25] <TreyHarris> lots of ways to skin the anagram cat, but in my case--where I want a large dictionary to draw from and i want to be able to anagram a sequence into multiple words--a trie is the classic data structure to use

[20:27] *** Manifest0 left
[20:33] <guifa2> I tried using sub EXPORT, but I can't figure out the correct name to export to 

[20:40] *** Kaiepi left
[20:41] *** Kaiepi joined
[20:42] *** rindolf left
[20:45] <guifa2> FINALLY.  This is fast becoming a far more interesting and comprehensive advent day post than I thought it would be

[20:48] <Kaiepi> .tell brrt that'd be great

[20:48] <tellable6> Kaiepi, I'll pass your message to brrt

[20:48] *** guifa2 left
[20:49] <lizmat> And yet another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2019/10/28/2019-43-performance-toaling/

[20:50] <tony-o> ++

[20:54] *** guifa2 joined
[20:55] *** guifa2 left
[20:56] *** guifa2 joined
[20:56] <rba> AlexDaniel: Not sure if it was the cache about https://rakudo.org. Did restart hypnotoad too. Changes show up now.

[20:57] <AlexDaniel> yaaay weekly

[20:59] *** guifa2 left
[21:00] <rba> I've setup all sites without CDN as well: They are under *.rakulang.site. Eg. https://rakudo.rakulang.site or https://raku.rakulang.site or https://design.rakulang.org and so on...

[21:00] <Geth_> ¦ rakudo.org: c5a0474bf5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 4 files

[21:00] <Geth_> ¦ rakudo.org: “Rakudo Raku” → “Rakudo”

[21:00] <Geth_> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/c5a0474bf5

[21:01] <AlexDaniel> rba: thanks!

[21:02] <rba> s{https://design.rakulang.org}{https://design.rakulang.site}

[21:04] <Geth_> ¦ modules.perl6.org/lukasvalle-patch-1: 4ff3ec0492 | lukasvalle++ (committed using GitHub Web editor) | templates/layouts/default.html.ep

[21:04] <Geth_> ¦ modules.perl6.org/lukasvalle-patch-1: Update default.html.ep

[21:04] <Geth_> ¦ modules.perl6.org/lukasvalle-patch-1: review: https://github.com/perl6/modules.perl6.org/commit/4ff3ec0492

[21:04] *** pmurias joined
[21:05] <Geth_> ¦ modules.perl6.org: lukasvalle++ created pull request #127: Change IRC

[21:05] <Geth_> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/pull/127

[21:05] <rba> AlexDaniel: Any use for https://twitter.com/raku_lang ???

[21:07] <Geth_> ¦ modules.perl6.org: 4ff3ec0492 | lukasvalle++ (committed using GitHub Web editor) | templates/layouts/default.html.ep

[21:07] <Geth_> ¦ modules.perl6.org: Update default.html.ep

[21:07] <Geth_> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/4ff3ec0492

[21:07] <Geth_> ¦ modules.perl6.org: 539f654730 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | templates/layouts/default.html.ep

[21:07] <Geth_> ¦ modules.perl6.org: Merge pull request #127 from perl6/lukasvalle-patch-1

[21:07] <Geth_> ¦ modules.perl6.org: 

[21:07] <Geth_> ¦ modules.perl6.org: Change IRC

[21:07] <Geth_> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/539f654730

[21:08] <AlexDaniel> rba: I don't know! I don't use twitter, and I don't know who owns that particular account

[21:08] <AlexDaniel> lizmat: ↑ maybe you know more and can suggest something :)

[21:09] *** Manifest0 joined
[21:09] <rba> AlexDaniel: I've registred it, mainly to claim it and to handover to someone who like to use it for maybe announcements?

[21:10] *** patrickb joined
[21:10] <AlexDaniel> rba: nice

[21:11] <lizmat> rba: but why the underscore ?

[21:11] <lizmat> I guess it doesn't matter much

[21:11] <rba> raku was taken and during registration twitter put the underscore.

[21:12] <rba> Ah, rakulang was taken too, so I tries raku-lang and twitter changed it to raku_lang

[21:14] *** stoned75 joined
[21:14] <AlexDaniel> SmokeMachine: I like your presentation :) Good vibes, good humor

[21:15] <rba> Ok, will prepare the redirect perlmanent (301) perl6.org/* -> raku.org/*

[21:15] <AlexDaniel> perlmanent, yes

[21:16] <SmokeMachine> AlexDaniel: thanks! :)

[21:16] <rba> Holy s... meant rakumanent for sure .-)

[21:17] <SmokeMachine> AlexDaniel: what about the content?

[21:29] <AlexDaniel> SmokeMachine: I like it, I think you did great to show what Red can do, and the presentation makes me want to use it

[21:31] <SmokeMachine> AlexDaniel: :) good to know! Thanks!

[21:39] <rba> AlexDaniel: redirect setup looks fine so far.

[21:39] <japhb> SmokeMachine: What presentation?

[21:39] <AlexDaniel> japhb: https://www.youtube.com/watch?v=Hxi_rsrtY4Q&list=PLxNdCz2kBhVnyEXIR7MPkHDHyLqIBzzGs

[21:41] <rba> I grabbed perl6.org and raku.org in the Google Search Console and intiated a website move.

[21:45] *** ggoebel left
[21:47] <xinming_> SmokeMachine: can we do  ` is column{ :unique }`   ?

[21:52] <SmokeMachine> Yes

[21:54] <wildtrees> whats the new file extension for raku, am I still supposed to use .p6? 

[21:54] <guifa> SmokeMachine: just saw the link to your talk on the weekly.  Can’t wait to watch it

[21:55] <guifa> wildtress: any extension should theoretically work.  I’m holding on using .p6 until the next big release 

[21:57] <SmokeMachine> guifa: I hope you like it...

[21:59] <xinming_> SmokeMachine: BTW, how do we change the ResultSeq class?

[22:01] <xinming_> The reason I don't want to write method to Model directly is, I may need set different ResultSeq class to different Model.

[22:02] <SmokeMachine> xinming_: I’m not sure if it’s working, but there is a `is rs-class<NewRsClassName>` trait...

[22:04] <xinming_> SmokeMachine: What is the base class of NewRsClassName?

[22:04] <xinming_> Or, we don't need it?

[22:04] <xinming_> Maybe `does rs-role<xxx`

[22:07] <SmokeMachine> Red::ResultSeq

[22:10] <SmokeMachine> xinming_: the original plan was to have `is rs-class`, `is rs-role` and use your custom MyModelName::ResultSeq if it’s defined... but I think I removed some of those, I don’t remember why...

[22:11] *** pmurias left
[22:13] *** pmurias joined
[22:13] <SmokeMachine> xinming_: https://github.com/FCO/Red/blob/master/lib/MetamodelX/Red/Model.pm6#L121

[22:14] <xinming_> SmokeMachine: Seems, you removed rs-role

[22:15] <xinming_> SmokeMachine: Will try rs-class to see if it worked.

[22:19] <SmokeMachine> xinming_: I’m very curious! Would you mind if I ask you what are you using Red for?

[22:20] <xinming_> SmokeMachine: rewrite my old app which is written in perl5 using DBIx::Class + Catalyst

[22:21] *** chloekek left
[22:21] <SmokeMachine> xinming_: so, are you using Red + Cro? Are you using Cro::HTTP::Session::Red?

[22:21] <xinming_> Not yet using Cro::HTTP::Session::Red

[22:22] <xinming_> I wrote a small test app with Cro, And have my own Session module for this.

[22:22] <SmokeMachine> Him... ok...

[22:22] <xinming_> And I use Xoos for that project.

[22:22] *** jjatria left
[22:22] <rba> Moved as well:

[22:23] *** jjatria joined
[22:23] <SmokeMachine> S/Him/Hum/

[22:23] <rba> https://design.perl6.org -> https://design.raku.org

[22:23] <rba> https://marketing.perl6.org -> https://marketing.raku.org

[22:24] <rba> https://modules.perl6.org -> https://modules.raku.org

[22:24] <rba> Let me know any issues...

[22:24] *** jjatria left
[22:25] *** jjatria joined
[22:27] <xinming_> SmokeMachine: moving my old app to use Red + Cro, Will expose the real features people need. :-)

[22:28] <rba> afk

[22:28] <SmokeMachine> xinming_: yes, that’s great!

[22:29] <xinming_> I'm pretty happy with Catalyst+DBIx::Class, It's just perl6 is so good, that I want to write perl6 for the rest of my life.

[22:33] <japhb> SmokeMachine: Just watched your LPW presentation.  Very cool progress!  :-)

[22:43] *** stoned75 left
[22:56] <sjn> lizmat: it looks like a typo in the main title of the latest weekly

[23:16] <SmokeMachine> japhb: thanks!

[23:17] <SmokeMachine> xinming_: I know the  felling...

[23:31] *** patrickb left
