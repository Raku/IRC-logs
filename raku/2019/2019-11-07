[00:18] <timotimo> Xliff: if you can reproduce it, can you try if the typical MVM_ env vars change anything?

[00:19] <timotimo> i may be of more use tomorrow, not any more today :)

[00:22] <Xliff> Fair enough.

[00:22] <Xliff> OK. Before you split, what were those vars again?

[00:48] <timotimo> MVM_SPESH_DISABLE, MVM_JIT_DISABLE, MVM_SPESH_INLINE_DISABLE, all individually

[00:49] <timotimo> why not also SPESH_OSR_DISABLE and SPESH_PEA_DISABLE just for fun

[01:03] <Xliff> Thanks!

[01:09] *** klapperl joined
[01:10] *** HoboWithAShotgun left
[01:22] <xinming> SmokeMachine: In postgres, There is something like    json_column->>'json_key'  = 'value'   In this case, What is the right ast to generate the json_column->>'json_key'?   NOTE, The 'json_key' can not be placeholder, So, It should be passed as literal string.

[01:31] <Xliff> xinming: What does the model look like. Can you post an example?

[01:33] *** wildtrees left
[01:36] <xinming> Xliff:  create table test ( id serial, json_column json );      :-)

[01:36] <Xliff> That's not the Red def though, is it?

[01:36] <xinming> I have patched version of Red which generates right sql for json

[01:37] <xinming> The default Red def doesn't work with postgres jsonb

[01:37] <xinming> json*

[01:37] <Xliff> OK, so you need some way to tell Red to generate the json_column, right?

[01:38] <Xliff> Do you have a fork I can look at?

[01:38] <xinming> I don't have that.

[01:38] <xinming> hmm, I created pull request

[01:38] <xinming> Xliff: https://github.com/FCO/Red/pull/404

[01:38] <xinming> Xliff: The json/jsonb one need to be patched.

[01:39] <xinming> Xliff: I don't mean to generate the json_column, I need the json op in postgres db.

[01:39] <xinming> Let's json,  The result sql will be something like,   SELECT ... FROM ... WHERE json_column->>'json_key' = 'value';

[01:42] <Xliff> Yeah, that's probably beyond my current understanding of Red... sorry.

[01:51] <Xliff> xinming: Yeah, you will have to talk to SmokeMachine about that. 

[01:52] <Xliff> It looks like that has to be done by .translate

[02:40] *** pdcawley left
[02:40] *** pdcawley joined
[02:41] *** cpan-raku left
[02:43] *** cpan-raku joined
[02:43] *** cpan-raku left
[02:43] *** cpan-raku joined
[02:44] *** pdcawley left
[02:53] *** rindolf joined
[02:53] <rindolf> hi all

[03:29] *** colomon_ joined
[03:29] *** colomon left
[03:29] *** colomon_ is now known as colomon

[03:42] *** wtwt5237 joined
[03:43] <wtwt5237> could someone please help me with zef? I installed perl6, and cannot find it under /bin?

[03:43] <wtwt5237> sorry if I am missing something obvious.

[03:44] *** hythm joined
[03:46] <rindolf> wtwt5237: hi

[03:47] <rindolf> wtwt5237: how did you install perl6?

[03:48] <hythm> wtwt5237, I install rakudo with `rakudobrew build moar-blead`, then I nstall zef with 'rakudobrew build zef`, then I find zef in ` /home/hythm/.rakudobrew/versions/moar-blead/install/share/perl6/site/bin/zef `

[03:49] <wtwt5237> thanks!

[03:50] <wtwt5237> hythm, let me give that a try. thanks!

[03:51] <hythm> np, I also add  rakudobrew bin directory to $PATH as instructed in rakudobrew README.md

[03:53] <Xliff> You can do 'rakudobrew mode shims' and not have to worry about $PATH if you have the environment set correctly.

[03:58] <hythm> good to know

[04:00] <Xliff>  :)

[04:00] <Xliff> good night! ;)

[04:00] *** Xliff left
[04:00] <hythm> gn

[04:00] <hythm> wtwt5237, I think you need to switch to moar-blead `rakudobrew switch moar-blead` before installing zef

[04:01] <wtwt5237> trying these. thanks all!

[04:08] *** kurahaupo joined
[04:45] *** wtwt5237 left
[05:14] *** hythm left
[06:09] *** jmerelo joined
[06:09] <jmerelo> releasable6: status

[06:09] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 248 out of 463 commits logged (⚠ 9 warnings)

[06:09] <releasable6> jmerelo, Details: https://gist.github.com/bf470eba700c1eb866cffaac51539b1b

[06:09] *** sena_kun joined
[06:09] *** jaldhar joined
[06:10] *** jaldhar left
[06:10] *** jaldhar joined
[06:12] *** jaldhar left
[06:12] *** jaldhar_ joined
[06:25] *** jaldhar_ left
[06:26] *** jaldhar_ joined
[06:44] *** xkr47 left
[06:49] *** wamba joined
[06:55] *** jaldhar_ left
[06:56] *** jaldhar_ joined
[06:59] *** jaldhar_ left
[07:00] *** jaldhar_ joined
[07:09] <SmokeMachine> xinming: I think it could be something like: `Red::AST::JsonItemStr.new: .json-column, ast-value “json-key”`

[07:12] *** stoned75 left
[07:19] <SmokeMachine> xinming: but I think it’ll need a specific translation for that ast... that could be something like: `multi method translate(Red::AST::JsonItemStr $_, $context?) { my ($lsql, @l) := do given self.translate: .left, $context { .key, .value }; my ($rsql, @r) := do given self.translate: .right, $context { .key, .value }; “{ $lsql }->>{ $rsql }” => [|@l, |@r] }`

[07:24] <SmokeMachine> And the column’s AT-KEY will need to return a rw container...

[07:26] <SmokeMachine> And do something like this to be possible to be used on update: https://github.com/FCO/Red/blob/master/lib/MetamodelX/Red/Comparate.pm6#L16

[07:26] <SmokeMachine> xinming: ^^

[07:29] <SmokeMachine> xinming: I think we’ll need to change the update a little... the key expect to be a column name, but should be an AST...

[07:29] *** Altai-man_ joined
[07:32] *** sena_kun left
[07:34] *** mid_home left
[07:35] *** jmerelo left
[07:38] *** xkr47 joined
[07:38] <SmokeMachine> xinming: here: https://github.com/FCO/Red/blob/master/lib/Red/ResultSeq.pm6#L70

[07:40] <SmokeMachine> xinming: https://github.com/FCO/Red/blob/master/lib/Red/AST/Update.pm6#L8

[07:41] *** linfir joined
[07:42] <SmokeMachine> xinming: and here: https://github.com/FCO/Red/blob/master/lib/Red/Driver/CommonSQL.pm6#L651

[07:44] *** Altai-man_ left
[07:50] *** wbn joined
[07:54] *** sena_kun joined
[07:59] *** linfir left
[08:01] *** wamba left
[08:03] <ZzZombo> m: 'asd' ~~ /<ident>/

[08:03] <camelia> rakudo-moar 1d84c64d6: ( no output )

[08:10] *** kurahaupo left
[08:11] *** kurahaupo joined
[08:19] *** sena_kun left
[08:27] *** kensanata joined
[08:28] *** pdcawley joined
[08:32] *** pdcawley left
[08:51] *** wamba joined
[08:53] <ZzZombo> m: say 'asd' ~~ /<ident>/

[08:53] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «｢asd｣␤ ident => ｢asd｣␤»

[08:55] <ZzZombo> "<ident>		Identifier. Also a default rule." -- what does it mean?

[08:56] *** wamba left
[09:06] *** wamba joined
[09:13] *** daxim left
[09:16] *** mid_laptop joined
[09:16] *** daxim joined
[09:21] *** wamba1 joined
[09:22] *** wamba left
[09:30] *** ufobat joined
[09:36] *** wamba1 left
[09:39] *** wamba joined
[10:09] <ZzZombo> m: my $a = 'asd'; say 'asd' ~~ /<.$a>/

[10:09] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «｢asd｣␤»

[10:10] <ZzZombo> m: my $a = 'asd'; say 'asd' ~~ /<$a>/

[10:10] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «｢asd｣␤»

[10:10] <ZzZombo> huh, this works.

[10:10] <ZzZombo> m: my $a = 'asd'; say 'asd' ~~ /{$a}/

[10:10] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «｢｣␤»

[10:20] *** wamba left
[10:22] *** abraxxa joined
[10:22] <abraxxa> I'm trying to write a grammar for FireHol firewall rule definitions and might found a parser bug

[10:23] *** Wahnberger joined
[10:23] <Wahnberger> Hi there: is the an elegant way to get the last part of a string, splitted by an given seperator?

[10:23] *** wamba joined
[10:23] <Wahnberger> something like:  my $foo = $d.Str.split( / \\ / ).last;

[10:24] <abraxxa> http://paste.scsys.co.uk/587097

[10:24] <abraxxa> the commented token was my first try that doesn't work

[10:35] *** sena_kun joined
[10:35] *** wamba left
[10:52] *** wamba joined
[10:54] *** mid_laptop left
[10:55] *** wamba left
[11:02] *** wamba joined
[11:05] *** daxim left
[11:10] *** daxim joined
[11:29] *** Altai-man_ joined
[11:32] *** sena_kun left
[11:36] <Juerd> Wahnberger: If you use 'tail' instead of 'last', that should work :)

[11:37] <lizmat> also, if you want the last N, you can do .tail(N)

[11:39] <Wahnberger> ahh :)

[11:47] *** jaldhar_ left
[11:48] *** jaldhar_ joined
[11:49] *** jaldhar_ left
[11:50] <lizmat> conversely, if you only want the first, you can do .head

[11:50] *** jaldhar_ joined
[11:50] <lizmat> and .head(N) for the first N

[11:51] <lizmat> also, if you want a certain number of elements:

[11:52] <lizmat> you can just treat the result of split as an array

[11:52] <lizmat> m: dd "123456789".comb[5,0,7]

[11:52] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «("6", "1", "8")␤»

[11:53] *** jaldhar_ left
[11:54] *** jaldhar_ joined
[11:54] <Wahnberger> is head inside similar to a perl split like  (split(/ bla /))[1]  ?

[11:54] <Wahnberger> and tail

[11:55] <Wahnberger> slice..in perl

[11:55] *** jaldhar_ left
[11:56] *** jaldhar_ joined
[11:56] <lizmat> head / tail are methods on Seq uences

[11:56] <lizmat> many method produce them

[11:56] <lizmat> *methods

[11:56] <lizmat> $filename.IO.lines  is one of them

[11:56] <lizmat> $filename.IO.lines.head(3)  

[11:57] <lizmat> will give you the first 3 lines of the file indicated by $filename

[11:57] <Wahnberger> i see

[11:57] <lizmat> so nothing specific about split

[11:57] <lizmat> it's just a method that produces a Seq

[11:58] <Wahnberger> saved 3 lines of code now :D

[11:58] *** mid_laptop joined
[12:03] *** jaldhar_ left
[12:04] *** jaldhar_ joined
[12:05] *** jaldhar_ left
[12:06] *** jaldhar_ joined
[12:07] *** jaldhar_ left
[12:08] *** jaldhar_ joined
[12:25] <jjatria> How can you get a key / value slice from a Hash? I'm thinking of something like `%foo{qw( a b c )}` in Perl

[12:25] <Altai-man_> can you provide an example of input/output?

[12:26] <jjatria> Sure, one second

[12:26] <Altai-man_> m: my %foo = a => 42, b => 50; say $_ => %foo{$_} given 'a';

[12:26] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «a => 42␤»

[12:26] <Altai-man_> or, hmm, do you want slicing?

[12:27] <jjatria> Well, I'm after what in Perl is called a slice, but not just for keys _or_ values, but for both

[12:27] <Altai-man_> m: my %a = a => 32, b => 50; say %a<a b>;

[12:27] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «(32 50)␤»

[12:27] <jjatria> So, closer to what you posted first

[12:27] <Altai-man_> ah, ok

[12:27] <jnthn> m: m: my %a = a => 32, b => 50; say %a<a b>:kv;

[12:27] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «(a 32 b 50)␤»

[12:27] <jnthn> m: m: my %a = a => 32, b => 50; say %a<a b>:p;

[12:27] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «(a => 32 b => 50)␤»

[12:27] <jnthn> Depending on whether you want a flat view of Pair objects

[12:27] <jnthn> *or Pair objects

[12:28] <jjatria> Oh, perfect. Thanks!

[12:36] <ZzZombo> m: say '/etc/passwd'.IO.slurp

[12:36] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «bin:x:1:1:bin:/bin:/bin/bash␤daemon:x:2:2:Daemon:/sbin:/bin/bash␤ftp:x:40:49:FTP account:/srv/ftp:/bin/bash␤games:x:12:100:Games account:/var/games:/bin/bash␤lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash␤mail:x:8:12:Mailer daemon:/var/sp…»

[12:38] *** mid_laptop left
[12:39] <ZzZombo> m: say '/etc/shadow'.IO.slurp

[12:39] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «Failed to open file /etc/shadow: Permission denied␤  in block <unit> at <tmp> line 1␤␤»

[12:43] *** lucasb joined
[12:45] *** wamba left
[12:45] *** jaldhar_ left
[12:46] *** jaldhar_ joined
[13:04] *** mid_laptop joined
[13:09] *** daxim left
[13:11] <lizmat> *phew*  :-)

[13:16] *** daxim joined
[13:26] *** lizmat_ joined
[13:27] *** jaldhar_ left
[13:28] *** jaldhar_ joined
[13:30] *** jaldhar_ left
[13:30] *** jaldhar_ joined
[13:30] *** lizmat left
[13:30] <Wahnberger> how can i get the http status code from a Cro Get? I thought something like that would work but doesnt: my $head = await $resp.head; (works) and then say $head{"status"}; (wont work)?

[13:30] *** sena_kun joined
[13:30] <Wahnberger> it says "Type Cro::HTTP::Response does not support associative indexing."

[13:32] *** Altai-man_ left
[13:32] <lizmat_> $head.status ?

[13:33] *** lizmat_ is now known as lizmat

[13:33] <Wahnberger> args :/

[13:34] *** mid_laptop left
[13:35] <timotimo> o/

[13:37] <ZzZombo> m: :our $a = 'a'

[13:37] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3:our7⏏5 $a = 'a'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement…»

[13:37] <ZzZombo> m: sub a { :our $a = 'a' }

[13:37] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3sub a { :our7⏏5 $a = 'a' }␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤       …»

[13:38] <ZzZombo> m: token a { :our $a = 'a' }

[13:38] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «Potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my token a'?)␤    at <tmp>:1␤    ------> 3token 7⏏5a { :our $a = 'a' }␤»

[13:38] <ZzZombo> m: my token a { :our $a = 'a' }

[13:38] <camelia> rakudo-moar 1d84c64d6: ( no output )

[13:50] <ZzZombo> m: :our

[13:50] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ":our" in sink context (line 1)␤»

[13:51] <ZzZombo> m: :our.say

[13:51] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «our => True␤»

[13:52] <[Coke]> m: given .WHAT for {} # but there IS a block.

[13:52] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3given .WHAT for 7⏏5{} # but there IS a block.␤»

[13:57] *** wamba joined
[13:57] <Wahnberger> is there a way to split a multiline output which i get from a qqx{} shell command into an array?

[13:57] *** jaldhar_ left
[13:58] *** jaldhar_ joined
[13:58] <[Coke]> .lines ?

[13:58] <[Coke]> m: "hi\nthere\nfriend".lines.say

[13:58] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «(hi there friend)␤»

[13:59] <[Coke]> m: dd "hi\nthere\nfriend".lines

[13:59] <camelia> rakudo-moar 1d84c64d6: OUTPUT: «("hi", "there", "friend").Seq␤»

[14:00] *** mid_laptop joined
[14:00] <Wahnberger> :)

[14:00] <Wahnberger> ..hard to learn and then easy to use..

[14:13] *** jaldhar_ left
[14:14] *** jaldhar_ joined
[14:18] <lizmat> Wahnberger: well, once you realize you can use .lines on IO objects as well as strings, as well as on supplies

[14:18] <lizmat> and know there is a .words method as well

[14:18] <lizmat> you should expect to be able to use .words the same way everywhere as well

[14:20] <AlexDaniel> uuuuhhhhhhhh

[14:21] <timotimo> heyo AD

[14:21] <AlexDaniel> processing output from tools can be a bit more difficult

[14:21] <abraxxa> how can i match any word but not 'custom' in a grammar?

[14:21] <AlexDaniel> I don't even remember what's the right way to do it, is it .split(“\n”) ?

[14:21] <timotimo> <!before "custom">\w+

[14:22] <AlexDaniel> it's definitely not .lines

[14:22] <abraxxa> i've read about lookahead assertion but that doesn't help as I don't want to match something based on what is before or after it

[14:22] <AlexDaniel> or is it .lines if you run it on .IO but not strings?

[14:22] <timotimo> what you want is to reject matching a thing if it was a thing

[14:22] <timotimo> which is equivalent to matching something and then refusing the match when at its end there's a thing you don't like in front of the match position

[14:22] <AlexDaniel> lizmat: and that's the thing, you can realize it, of course, but it does different things, if I'm not mistaken

[14:23] <abraxxa> timotimo: hm...hard to grasp but it seems to work, thanks!

[14:23] <AlexDaniel> like

[14:23] <AlexDaniel> m: say “foo\rbar”.lines[0]

[14:23] <camelia> rakudo-moar 726c38f06: OUTPUT: «foo␤»

[14:24] <AlexDaniel> I think it doesn't do that on IO stuff, but I'm not sure

[14:24] <timotimo> splitting by /\n/ will do "smart" newline stuff

[14:25] <timotimo> splitting by /\x[a]/ (or whatever the ascii code for newline is) will only accept the actual \n character

[14:25] <lizmat> right

[14:25] <lizmat> afaik  :-)

[14:25] <AlexDaniel> what do you mean right

[14:26] <abraxxa> is there a way to define the same regex for multiple different named tokens or rules?

[14:26] <abraxxa> i've defined a quoted-string token which i use in some other named tokens but don't want it to show up in the match object

[14:26] <abraxxa> as it's just a helper token

[14:26] <lizmat> define it as a regex, and use that ?

[14:27] <AlexDaniel> m: dd “foo\r\nbar”.split(/\x[A]/)

[14:27] <camelia> rakudo-moar 726c38f06: OUTPUT: «("foo\r\nbar",).Seq␤»

[14:27] <AlexDaniel> so clearly that didn't split by \n

[14:29] <AlexDaniel> timotimo, lizmat: this is something we actually have to fix in the language, somehow

[14:29] <timotimo> \r\n is not \n

[14:29] <timotimo> just like ä isn't a

[14:29] <timotimo> blame the unicode consortium

[14:29] *** jaldhar_ left
[14:30] <timotimo> all we can do is document better or unconfuse in some other way

[14:30] *** jaldhar_ joined
[14:32] <AlexDaniel> what does unicode consortium has to do with processing output from qqx

[14:32] <AlexDaniel> we have to actually make it possible, not document the excuses

[14:33] <AlexDaniel> maybe it's already possible, I don't remember

[14:35] *** jaldhar_ left
[14:36] *** jaldhar_ joined
[14:37] <lizmat> it's the unicode consortium, afaik, who decided that \r\n is a single codepoint

[14:37] *** abraxxa left
[14:37] <lizmat> different from \r and \n

[14:38] <AlexDaniel> lizmat: it has nothing to do with how you process output from unix commands

[14:38] *** daxim left
[14:38] <AlexDaniel> in which case the output is separated with \n, that's it

[14:41] * [Coke] wonders why "it's definitely not lines"

[14:42] <AlexDaniel> [Coke]: well, it depends. What are you processing? Is it purely text, or some \n-separated output? The latter is very common

[14:42] <AlexDaniel> [Coke]: looking at https://docs.raku.org/type/Proc::Async

[14:42] <AlexDaniel> “whenever $proc.stdout.lines { # split input on \r\n, \n, and \r”

[14:42] <El_Che> lo

[14:42] <AlexDaniel> pretty sure I wrote that comment

[14:43] <AlexDaniel> because it drives me crazy :)

[14:43] *** daxim joined
[14:43] *** jaldhar_ left
[14:44] *** jaldhar_ joined
[14:44] <AlexDaniel> actually, makes me wonder if that's what it actually does

[14:45] <AlexDaniel> maybe the comment is wrong

[14:47] <AlexDaniel> no, the comment is right :)

[14:47] <jnthn> Probably Blob wants to have a `.split`

[14:47] <[Coke]> even though .lines splits on more than just \n, if you're not expecting random \r characters, why not use it?

[14:47] <timotimo> \r\n being a grapheme gives a little bit of friction with old-timey tools

[14:47] *** jaldhar_ left
[14:48] <jnthn> I suspect for every time there are \r's that are undesirably eaten by .lines, there's thousands more times where the result of using .lines is that one's code is portable if run on Windows.

[14:48] *** jaldhar_ joined
[14:48] <[Coke]> jnthn++, right.

[14:48] <timotimo> don't forget you can use :v to get the thing back that was split on

[14:48] <AlexDaniel> … absolutely wrong

[14:48] <timotimo> with split, but not with lines

[14:48] <timotimo> if you .lines on an IO with :!chomp, do the line endings stay with the line strings? i would expect them to.

[14:49] <jnthn> Probably, yes.

[14:49] <AlexDaniel> you guys go try to process output of something, then struggle once you get \r, then say this nonsense

[14:50] <timotimo> unix tools don't output text, they output "text" :P

[14:50] <AlexDaniel> when you're processing output of some tool, you're typically expecting the line to be in some format

[14:50] <AlexDaniel> once you get \r in there, it splits the line in half

[14:51] <timotimo> i wonder if changing the .in-nl on Proc::Async's pipes by default is more wtf than dwim

[14:52] <timotimo> and maybe \r\n and \n is a saner selection than \r \r\n and \n

[14:52] <AlexDaniel> it's not…

[14:52] *** abraxxa joined
[14:52] <AlexDaniel> but we should only have two sets of options, that's right

[14:52] <jnthn> No, the sane thing to do is to work at byte level if you're actually processing output that should be treated as an octet stream

[14:53] <jnthn> And we should make that easier

[14:53] *** abraxxa left
[14:53] <timotimo> unix: text is the ultimate exchange format

[14:53] <timotimo> unicode consortium: hold my beer

[14:53] <jnthn> :)

[14:53] <timotimo> but yes, 100% on Blob.split

[14:54] *** abraxxa joined
[14:55] *** abraxxa left
[15:08] *** abraxxa joined
[15:09] *** abraxxa left
[15:23] *** jaldhar_ left
[15:24] *** jaldhar_ joined
[15:29] *** Altai-man_ joined
[15:32] *** sena_kun left
[15:35] *** jaldhar_ left
[15:36] *** jaldhar_ joined
[15:37] *** ggoebel joined
[15:37] *** jaldhar_ left
[15:38] *** jaldhar_ joined
[15:38] *** rindolf left
[15:55] *** jaldhar_ left
[15:56] *** jaldhar_ joined
[16:07] *** jaldhar_ left
[16:08] *** jaldhar_ joined
[16:27] *** jaldhar_ left
[16:28] *** jaldhar_ joined
[16:30] <lizmat> m: for ^1000000 { my %h = a => 42, b => 666 }; say now - INIT now

[16:30] <camelia> rakudo-moar 726c38f06: OUTPUT: «2.11986731␤»

[16:31] <lizmat> m: class A { has $.a; has $.b }; for ^1000000 { my $obj = A.new(a => 42, b => 666) }; say now - INIT now

[16:31] <camelia> rakudo-moar 726c38f06: OUTPUT: «0.4957836␤»

[16:31] <lizmat> morale: don't use hashes as fake objects in Raku, it's 4x as slow as using classes / objects

[16:35] *** wamba left
[16:36] <[Coke]> lizmat: nice.

[16:37] <lizmat> same goes for accessors:

[16:37] <lizmat> m: my %h = a => 42, b => 666; for ^10000000 { my $a = %h<a> }; say now - INIT now

[16:37] <camelia> rakudo-moar 726c38f06: OUTPUT: «0.72105429␤»

[16:37] <lizmat> m: class A { has $.a; has $.b }; my $obj = A.new(a => 42, b => 666); for ^10000000 { my $a = $obj.a }; say now - INIT now

[16:37] <camelia> rakudo-moar 726c38f06: OUTPUT: «0.5161566␤»

[16:40] <lizmat> feels like material for a blog post

[16:40] <lizmat> perhaps an advent post ?

[16:47] <AlexDaniel> lizmat: damn

[16:47] * AlexDaniel rewrites a bunch of code

[16:47] <AlexDaniel> :D

[16:47] <AlexDaniel> I wonder…

[16:48] <AlexDaniel> 6c: class A { has $.a; has $.b }; for ^1000000 { my $obj = A.new(a => 42, b => 666) }; say now - INIT now

[16:49] <Geth> ¦ doc: bafa925464 | finanalyst++ | doc/Language/compilation.pod6

[16:49] <Geth> ¦ doc: new compilation tutorial

[16:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bafa925464

[16:51] <committable6> AlexDaniel, https://gist.github.com/b68f2aa208fd71f31fe460dce2a5a6ab

[16:51] <AlexDaniel> 6c: for ^1000000 { my %h = a => 42, b => 666 }; say now - INIT now

[16:52] <timotimo> once hashes that don't escape are translated to sets of registers, creating hashes and not using them will be ridiculously fast, and this benchmark if used exactly as shown will become very misleading

[16:53] *** finanalyst joined
[16:53] <brass>  lizmat: that seems like it would be a good blog post, it's good to know

[16:54] *** joule joined
[16:54] <[Coke]> yah, any optimizations that go into NQP to make things faster need to be revisted as other things are made faster, neh?

[16:55] <finanalyst> hi all, an apology. I just drafted a new tutorial for the docs on compilation based on a talk by niner. But by mistake I commited it rather than posting as a PR

[16:55] <brass> Is there a doc that explains what nqp does and how it fits in with rakudo and moarvm?

[16:55] <committable6> AlexDaniel, https://gist.github.com/e45da1c5e2f3387f44683532efc186bc

[16:56] <timotimo> no problem, git makes it easy to revert stuff

[16:56] <brass> I want to learn more about how they all fit together

[16:56] <finanalyst> timotimo: I don't quite know how to revert it from the main repo

[16:56] <timotimo> it's just the one commit, right?

[16:56] <finanalyst> yse

[16:56] <finanalyst> yes

[16:56] <finanalyst> last one

[16:56] <timotimo> in that case just "git revert master" will do it

[16:57] <lizmat> finanalyst: but you didn't push yet, right ?

[16:57] <finanalyst> https://github.com/perl6/doc/commit/bafa9254643d3dca86e8bed2bc58ab0c87b62c0a

[16:57] <timotimo> i see the commit notification up there

[16:57] <lizmat> ah, ok, you did push

[16:57] <finanalyst> lizmat: yep. it was a mistake. I thought I was push ing to my forked repo

[16:58] *** jaldhar_ left
[16:58] *** jaldhar_ joined
[16:59] *** jaldhar_ left
[17:00] <finanalyst> would someone please tell me how to reverse my commit?

[17:00] *** jaldhar_ joined
[17:00] <Grinnz> git-revert, as timotimo said

[17:01] <Grinnz> it will create a new commit reversing the commit (you can't change history you've pushed)

[17:02] <Geth> ¦ doc: eb0c073de5 | finanalyst++ | doc/Language/compilation.pod6

[17:02] <Geth> ¦ doc: Revert "new compilation tutorial"

[17:02] <Geth> ¦ doc: 

[17:02] <Geth> ¦ doc: This reverts commit bafa9254643d3dca86e8bed2bc58ab0c87b62c0a.

[17:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/eb0c073de5

[17:03] <finanalyst> OK done. I'll make a PR now. 

[17:04] *** mid_laptop left
[17:04] <Grinnz> now is a good time to do it on a branch instead of master, too ;)

[17:09] *** wamba joined
[17:13] *** jaldhar_ left
[17:14] *** jaldhar_ joined
[17:16] <Geth> ¦ doc: finanalyst++ created pull request #3082: new compilation tutorial

[17:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/3082

[17:27] *** jaldhar_ left
[17:28] *** jaldhar_ joined
[17:30] *** sena_kun joined
[17:32] *** Altai-man_ left
[17:39] *** finanalyst left
[17:43] *** jaldhar_ left
[17:44] *** jaldhar_ joined
[17:47] *** jaldhar_ left
[17:48] *** jaldhar_ joined
[17:51] *** kensanata left
[17:59] *** jaldhar_ left
[18:00] *** jaldhar_ joined
[18:03] *** jaldhar_ left
[18:04] *** jaldhar_ joined
[18:07] *** chloekek joined
[18:21] *** mid_home joined
[18:25] *** cpan-raku left
[18:26] *** cpan-raku joined
[18:26] *** cpan-raku left
[18:26] *** cpan-raku joined
[18:29] *** jaldhar_ left
[18:30] *** jaldhar_ joined
[18:35] *** wamba left
[18:36] *** wamba joined
[18:56] *** ufobat left
[19:11] *** Xliff joined
[19:11] <Xliff> o/

[19:11] <Xliff> timotimo: On https://github.com/Xliff/p6-GtkPlus/issues/40

[19:11] *** jaldhar_ left
[19:12] <Xliff> timotimo: Setting MVM_SPESH_DISABLE=1 fixes the issue

[19:12] *** jaldhar_ joined
[19:13] <Xliff> timotimo: Setting MVM_SPESH_DISABLE=1 fixes the issue

[19:13] <Xliff> oops

[19:13] <Xliff> MVM_SPESH_INLINE_DISABLE also works

[19:15] <Xliff> SPESH_OSR_DISABLE and SPESH_PEA_DISABLE have no effect.

[19:15] <Xliff> Thanks!

[19:15] *** jaldhar_ left
[19:16] *** jaldhar_ joined
[19:17] *** mla joined
[19:18] *** jaldhar_ left
[19:18] *** jaldhar_ joined
[19:19] <timotimo> can you check if setting MVM_SPESH_NODELAY makes the problem appear much quicker?

[19:22] <Xliff> Setting MVM_SPESH_NODELAY also eliminates the issue

[19:26] <timotimo> hm. interesting

[19:27] *** lichtkind left
[19:27] *** jaldhar_ left
[19:28] *** jaldhar_ joined
[19:29] *** jaldhar_ left
[19:29] *** Altai-man_ joined
[19:30] *** jaldhar_ joined
[19:32] *** sena_kun left
[19:35] <timotimo> do we have something nice for "give me an array shallow-cloned from this other array, except index X should have object A in it?

[19:36] <timotimo> javascript has the wordy-but-working Object.assign({}, [...arr], {[X]: A})

[19:36] <timotimo> i'd like something that can also work with something immutable

[19:37] *** Xliff left
[19:42] *** jaldhar_ left
[19:42] *** jaldhar_ joined
[19:45] *** jaldhar_ left
[19:46] *** jaldhar_ joined
[19:49] *** jaldhar_ left
[19:50] *** jaldhar_ joined
[19:50] *** daxim left
[19:52] *** wildtrees joined
[19:53] <Kaiepi> m: sub clone-with-replacement-at(@arr, Int:D $idx, Mu $obj is raw) { @arr.WHAT.new: |@arr[0..$idx-1].clone, $obj, |@arr[$idx+1..*].clone }; say clone-with-replacement-at [1,2,3,4,5], 2, 42

[19:53] <camelia> rakudo-moar 726c38f06: OUTPUT: «[1 2 42 4 5]␤»

[19:53] <Kaiepi> something like this timotimo ?

[19:55] *** daxim joined
[19:55] <wildtrees> what does that : | notation do? 

[19:57] *** patrickb joined
[19:57] *** jaldhar_ left
[19:58] <Kaiepi> | makes a Slip out of the array given, : does a method call in this case

[19:58] <Kaiepi> m: sub clone-with-replacement-at(@arr, Int:D $idx, Mu $obj is raw) { @arr.WHAT.new: |@arr[0..$idx-1].clone, $obj, |@arr[$idx+1..*].clone }; say clone-with-replacement-at((1,2,3,4,5), 2, 42).^name

[19:58] <camelia> rakudo-moar 726c38f06: OUTPUT: «List␤»

[19:58] *** jaldhar_ joined
[19:58] <timotimo> i was hoping for something shorter, not longer :D

[19:59] <Kaiepi> hm

[20:01] <timotimo> not that big a deal

[20:01] <timotimo> though the javascript version of that code also allows an arbitrary amount of replacements at once

[20:01] <jnthn> I'm pretty sure the .clone ain't needed there

[20:02] <jnthn> If you're slicing then you're already getting a List back

[20:02] <timotimo> right

[20:02] <jnthn> Also, 0..^$idx instead of -1, and $idx^..* on the other side :)

[20:03] <jnthn> Also, no need for .WHAT.new, just .new

[20:03] <timotimo> and probably head($n) and tail(* - $n) maybe

[20:03] <jnthn> That's at lesat some saving :)

[20:03] *** jaldhar_ left
[20:04] *** jaldhar_ joined
[20:05] *** jaldhar_ left
[20:06] *** jaldhar_ joined
[20:08] *** jaldhar_ left
[20:08] *** jaldhar_ joined
[20:08] <patrickb> o/

[20:08] <tellable6> 2019-11-07T08:40:24Z #raku-dev <El_Che> patrickb: thank you for your work. I think we are in the same page. I was also thinking on building on CentOS 6

[20:08] <tellable6> 2019-11-07T08:41:45Z #raku-dev <El_Che> patrickb: we need to add macos instructions once we try that out

[20:10] <patrickb> El_Che: I hope we'll manage to make the upcoming release the first that also offers precompiled archives.

[20:15] <El_Che> Good plan. I would like to add relocatble .tar.gz to rakudo-pkg, maybe have a look at mac and win as well. Depending on time

[20:17] <patrickb> What's still to be decided is how we promote those precompiled releases on the website.

[20:20] <El_Che> patrickb: I think there is a use case for precompiled packages (certainly if in a repo) and precompiled tar.gz

[20:20] <patrickb> I'd guess we somehow need to put that on https://rakudo.org/files. Ugh, some more opitions are listed on https://raku.org/downloads (including your rakudo-pkg packages). Those pages really need some tidying and streamlinification.

[20:20] <El_Che> yes, they are ajungle

[20:22] <patrickb> Step 1. - Find out who is to decide on how the website can change.

[20:22] <patrickb> Step 2. - Find someone with a website affinity.

[20:22] <El_Che> we're also in a situation where more distributions have rakudo

[20:24] <patrickb> I think the raku.org download page needs to go. It should just link to rakudo.org and have a sentence or two about potential alternative implementations.

[20:25] <El_Che> Download should be in one page, in my view yes. And as long there aren't competing compilers, there is no need to complicate things

[20:26] *** daxim left
[20:27] <patrickb> Also when we have multiple compilers it's clearer when the different implementations have their own download page on their own domains. raku.org is not about implementations.

[20:28] <patrickb> And then I'd remove the words "official" and "3rd party" from the download page. Just offer downloads and don't classify them.

[20:31] *** daxim joined
[20:31] <patrickb> is the rakudo.org repository seriously placed in the perl6 org?!? https://github.com/perl6/rakudo.org

[20:33] <timotimo> well, for anything in the rakudo org you need a CLA i believe?

[20:33] <timotimo> if you want a commit bit

[20:33] *** jaldhar_ left
[20:34] *** jaldhar_ joined
[20:41] *** dumarchie joined
[20:41] <dumarchie> Hi, can anyone tell me how to re-export an enum?

[20:44] <dumarchie> I would expect it to be a common use case for a role to export an enum and for a class implementing the role to re-export the enum.

[20:45] <timotimo> you'd do it the same way you re-export anything else, i believe

[20:46] <timotimo> our TheEnum is export = OtherPackage::TheEnum perhaps? i'ven't done this yet

[20:47] <AlexDaniel> patrickb: regarding step 1, you decide. If you feel that others may object, then you submit it as a PR to the problem-solving repo

[20:47] <AlexDaniel> timotimo: you don't need to sign CLA for rakudo.org changes

[20:48] <dumarchie> I tried sub EXPORT, the enum symbol is exported but the enumerated values are not.

[20:48] <timotimo> yes because it's in the perl6 org on github :)

[20:48] <AlexDaniel> yep

[20:48] <timotimo> ah, i see

[20:48] <timotimo> it's probably not enough to simply "import TheEnum;" in the class body

[20:49] <rba> patrickb: I think too we need to make it more simple for the people to fine the releases.

[20:49] <timotimo> actually, i think you can't put an "our" scoped thing into a role?

[20:49] <AlexDaniel> timotimo: ah, I misread the conversation, that's exactly what you said :)

[20:49] * AlexDaniel runs away

[20:49] <timotimo> no you will stay here and atone for your sins

[20:49] <timotimo> just one tone will be enough

[20:49] <rba> patrickb: And we need to just offer all the options, src, pkgs and star vx. plain rakudo.

[20:49] <patrickb> rba: Just what I think.

[20:50] * AlexDaniel screams in F sharp

[20:50] <rba> AlexDaniel: I had to sign a CLA, but I don't have access to rakudo org in github... Hmmm....

[20:50] <patrickb> I suspect just flying under the radar and doing the changes to the websites directly will be a lot less hassle than going through problem-solving...

[20:50] <AlexDaniel> .oO( https://youtu.be/5Ju8Wxmrk3s?t=56 )

[20:51] <AlexDaniel> [Coke]: can you confirm that rba signed a CLA?

[20:51] <rba> patrickb: If you like you create a PR and I setup a separate hosting based on the PR, then we can fiddle arround till we feel fine and repleace the prod ones...

[20:51] <El_Che>  CLA sounds so ORacle :)

[20:52] <patrickb> rba: I like that idea

[20:52] <AlexDaniel> patrickb: that's right, and you can always do it later if people start complaining :)

[20:52] <dumarchie> "import TheEnum;" in the class body does not work indeed

[20:52] <patrickb> I'll try to put something together.

[20:53] <patrickb> rba: On a different topic. Can you imagine making that MacOS of yours somehow available for testing and release work for raku devs?

[20:54] <rba> patrickb: You mean ssh access?

[20:54] <rba> patrickb: On the mac?

[20:54] <patrickb> ssh would be the obvious choice, yes.

[20:55] <patrickb> rba: It was you talking about a MacOS mini catching dust, was it?

[20:55] <rba> patrickb: As the idea came up with running Blin on it as well and now ssh access, I have to extend my DMZ first. But yes why not. Just don't use all my bandwith... :-)

[20:55] <El_Che> patrickb: travis has mac builds, looking at it for creating pkgs

[20:56] <rba> patrickb: Yes. I wanted to have a look at the macmini this weekend.

[20:56] <patrickb> El_Che: That'd be a nice solution.

[20:56] * rba crosses fingers to have time.

[20:56] <AlexDaniel> rba: not sure if you've seen my answer: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-11-07#l183

[20:57] <AlexDaniel> ah, a bit earlier even: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-11-07#l165

[20:57] <rba> Realised github actions could start own runners, then I started thinking...

[20:57] <patrickb> rba: No hurries.

[20:58] <rba> AlexDaniel: Need to check, but thought that mac is 64 bit.

[20:58] <AlexDaniel> rba: sure, but it doesn't mean you'll be able to run linux binaries there

[20:59] <rba> AlexDaniel: ack

[20:59] <El_Che> rba, AlexDaniel : I can follow the mac, 64-bit, linux statements

[21:01] <El_Che> rba's mac will only be for testing 64-bit macos

[21:01] <El_Che> 32-bit can be easily run on 64-bit docker

[21:02] <AlexDaniel> oh

[21:02] <AlexDaniel> that's interesting

[21:02] <rba> Again, what is not 32-bit? Blin itself?

[21:02] <El_Che> This is how I create my 32-bit base images: https://github.com/nxadm/rakudo-pkg/blob/master/bin/create-ubuntu-i386-baseimg.p6

[21:02] * rba didn't got the point.

[21:03] <AlexDaniel> rba: don't worry about it, I mentioned 32-bit builds just because currently we're not checking for regressions on 32-bit archs

[21:03] <El_Che> AlexDaniel: I use these images in rakudo-pkg: https://hub.docker.com/r/nxadm/ubuntu-i386/tags

[21:03] <AlexDaniel> rba: once we have blin running automatically at least on one architecture, we can think how to extend that :)

[21:03] <El_Che> There are not many i386 users though

[21:04] <AlexDaniel> El_Che: but… arm?

[21:04] <KotH> El_Che: we are many!

[21:04] <El_Che> I offer 32-bit packages mostly for the case that devs want to test stuff or for people running 32-bit VMs on the cloud

[21:05] <El_Che> AlexDaniel: I gave you a finger and you take the arm :)

[21:05] <El_Che> AlexDaniel: arm is possible but painful

[21:05] <rba> I will see maettu tomorrow. Heard that he annexed another physical machine in his office again. 

[21:05] <El_Che> AlexDaniel: crosscompiling, e.g. for rasppi

[21:05] <rba> Thats for Blin on Linux.

[21:05] <El_Che> KotH: that did wake you up, didn'it :)

[21:05] <AlexDaniel> El_Che: it doesn't have to be crosscompiling if you get a beefy arm machine :P

[21:06] <rba> The Mac we can use for build automation, Blin or just for testing if needed.

[21:06] <El_Che> AlexDaniel: you're at the shoulder now :)

[21:06] <AlexDaniel> El_Che: I'm not done yet :D

[21:06] <KotH> El_Che: we are always awake! always watching! bidding our time! *g*

[21:06] <AlexDaniel> El_Che: because it can be really cool to have Blin on ARM :D

[21:06] <El_Che> AlexDaniel: I had a look some time ago at qemu + docker for building rakudo packages

[21:07] <AlexDaniel> El_Che: ehh, qemu… in my experience that's really slow :S

[21:07] <[Coke]> what is rba's email address? (privmsg is fine)

[21:07] <AlexDaniel> but my experience is outdated :)

[21:07] <El_Che> AlexDaniel: yeah, I wanted to do it on travis, like the other packages

[21:08] <El_Che> but I didn't get around it

[21:08] <KotH> hmm? no cross compiling framework?

[21:08] <El_Che> But my usecase was small becasue I ended getting celeron NUCs and 32-bit rakudo is slow anyway

[21:08] <AlexDaniel> KotH: well, it depends. We don't have it, but for example users of Debian get rakudo packages on all archs just fine

[21:09] <[Coke]> I have no emails from that address, no one else has added him to the list of CLAs.

[21:09] <[Coke]> was it emailed or mailed?

[21:09] <KotH> AlexDaniel: well, debian does ethical compiling

[21:09] <AlexDaniel> KotH: what's that?

[21:09] <KotH> AlexDaniel: compiling on the arch itself

[21:10] <AlexDaniel> right

[21:10] <KotH> AlexDaniel: kind of a slur from the people in embedded linux, because nobody in his right mind would want to compile on arm (quemu is fast in comparison)

[21:10] <rba> [Coke]: Hmm. So I'm an illegal contributor?

[21:11] <rba> [Coke]: Let me search the papers and the scan. Where to send?

[21:11] <AlexDaniel> rba: you don't have commits in rakudo

[21:11] <AlexDaniel> notable6: CLA

[21:11] <notable6> AlexDaniel, 1 note: 2019-08-01T07:40:37Z <AlexDaniel>: https://www.perlfoundation.org/contributor-license-agreement print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org and don't forget to CC will at coleda.com

[21:12] <rba> AlexDaniel: Is perl6 org handled differently?

[21:12] <AlexDaniel> rba: yes

[21:12] <rba> AlexDaniel: Ok, and why?

[21:12] <AlexDaniel> rba: :(

[21:12] <[Coke]> this is *just* for rakudo. doesn't include anythign in perl6, nqp, MoarVM...

[21:13] <[Coke]> because we're trying to avoid legal issues with the perl6 compiler.

[21:13] <[Coke]> It was setup by the foundation way back in the parrot days, and is similar (as I understand) to the p5 situation.

[21:13] *** joule left
[21:14] <AlexDaniel> previous discussions: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-07-08#l228 https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-08-01#l13

[21:14] * [Coke] hurls https://www.perlfoundation.org/license-faq.html

[21:16] <rba> Understand.

[21:16] <KotH> as someone who has been involved in a license change proces... for the love of all that is good and chocolaty! please sign the CLA!!!!

[21:17] <AlexDaniel> KotH: that's not exactly going to help with the current state of things

[21:17] <AlexDaniel> you see, nqp is still in perl6 org, with no CLA requirement

[21:18] *** dumarchie left
[21:18] <[Coke]> The person to talk to at TPF about such things is Allison, as far as I know.

[21:18] <KotH> AlexDaniel: one problem at a time, one problem at a time

[21:18] <rba> [Coke]: My mistake, was only sent to trademark -at- perlfoundation.org

[21:19] <[Coke]> but I would not recommend removing it from the rakudo process.

[21:19] <AlexDaniel> I'm ok with that, but why?

[21:19] <[Coke]> I will ping the president and ask why it's not being handled.

[21:19] <[Coke]> AlexDaniel: did you read the TPF page?

[21:20] *** daxim left
[21:20] <rba> [Coke]: I'm fine with the CLA.

[21:21] <rba> [Coke]: rba

[21:22] <[Coke]> I've received rba's CLA and added him to the contributor doc. Feel free to add them to the github repo.

[21:22] <rba> About the promotion of rakudo release vs. rakudo-star releases. What should we do.

[21:22] <[Coke]> (doc) the list maintained by the TPF with a list of contributors.

[21:22] <rba> Should we just be quicker in upding rakudo-star and alway offer both?

[21:22] <rba> updating

[21:22] <rba> always

[21:23] <El_Che> rba: as I understand it, rakudo star is maintained (and released) by different people

[21:23] <AlexDaniel> jnthn: can you add rba to github org?

[21:23] * rba like to write german, as the inglisch isch buggy toooday.

[21:23] <AlexDaniel> jnthn: rakudo org I mean, CLA was received as confirmed by [Coke] ↑

[21:24] <El_Che> AlexDaniel: looking for 64bit arm? https://twitter.com/gamelaster/status/1192551455334576128

[21:24] *** daxim joined
[21:25] <AlexDaniel> El_Che: yes, but I guess most people have just a bunch of rpi's that are not 64-bit :)

[21:25] <AlexDaniel> but of course it's a thing, yes

[21:25] <[Coke]> jnthn: you may also want to add me as a rakudo admin.

[21:26] <AlexDaniel> rba: well, the question that's still not answered completely is why we have star at all. You see, at some point we'll likely start recommending distro packages more than we do star

[21:27] <AlexDaniel> rba: “Windows!” is a good argument, but maybe then rakudo star should be exactly that?

[21:27] <rba> AlexDaniel: Is this a discussion of batteries included or not?

[21:27] <El_Che> The concept of Star is completely lost on my if there is a module manager

[21:27] <Grinnz> AlexDaniel: given perl's sordid history with what core should include, i think having deliverables on two ends of the spectrum officially supported isn't a bad idea

[21:27] <Grinnz> in that context

[21:28] <AlexDaniel> rba: it's more about defining what star is and why we do it, it's not necessarily about including batteries or not

[21:28] <El_Che> Grinnz: those are not the 2 ends of the spectrum

[21:28] <Grinnz> no, but two ends that matter :P

[21:28] <El_Che> the other end, which I would like to see, is an application packaged with it modules and the runtime

[21:29] <El_Che> install star, install or update something with zef and zoof, star is gone

[21:29] <rba> El_Che: And with the star release promoted on rakdudo.org, the first thing to do anyway is to update zef.

[21:30] <El_Che> Grinnz: so the two sides of the coin for me are minimal packages (compiler+module manager), e.g. for docker images and for people that hate installing what they don't need (both me), or a self-contained app, easily deployable

[21:30] <El_Che> the middle ground is meh

[21:30] *** sena_kun joined
[21:30] <El_Che> again imho

[21:31] <Grinnz> well, once you have an app that is actually something to run, and not to program in, that's not a rakudo distribution but well, an app

[21:31] <Grinnz> that's more along the lines of par packager

[21:31] <Grinnz> (unless i misinterpreted what you meant by app)

[21:31] <El_Che> think more of jars of go programs with the added problem of a runtime

[21:32] <rba> So sending star into a winter sleep and changing the download page to offer more different options (pkgs as well) of *rakudo* on the rakudo.org downloads page?

[21:32] <El_Che> par wasn't really a huge success

[21:32] <Grinnz> right, so that's not a rakudo distribution, that's an application that includes how to run that specific application

[21:32] <El_Che> yes, but my point is that fucntionality would be part of rakudo

[21:32] *** Altai-man_ left
[21:33] <El_Che> as is creating jar part of the the java toolkit and go binaries of the go compiler

[21:33] <Grinnz> what i'm talking about is a distribution for people to program in, not to give to users

[21:33] <El_Che> (again apples and oranges, but you get my drift)

[21:33] <El_Che> Grinnz: yes, exactly

[21:33] <El_Che> Grinnz: with the addition that a lot of your users are programmers and admin

[21:34] <Grinnz> not disagreeing, just seems like two very different conversations

[21:34] <rba> El_Che: Not all programmers are admins. Not in the companies I've worked before. Some of them better never see a command line... (pray for it.)

[21:35] <El_Che> someone will have to deploy the stuff

[21:35] <El_Che> and the more difficult, the less likely people will do it

[21:35] <El_Che> Admins deploying Perl, Ruby and Python complain all the time :)

[21:35] <El_Che> (it seems)

[21:36] <El_Che> rba: in devops enviroments, programmers end up doing a big part of the CI/deployment.

[21:36] <El_Che> anyway, like Grinnz points out, it's likely a different discussion

[21:37] <rba> El_Che: agreed.

[21:37] <rba> https://dist.tyil.nl/raku/rakudo-star/

[21:42] <rba> patrickb: Will let you know when we have a staging webhosting ready for rakudo.org.

[21:42] *** finanalyst joined
[21:42] * rba will be afk

[21:47] <patrickb> rba: Thanks!

[21:48] *** daxim left
[21:55] *** daxim joined
[21:55] *** finanalyst left
[22:00] <[Coke]> if I recall correctly, star was meant to get us from point a (compiler only) to point b (various distributions of Perl 6/Raku existing), at which point we wouldn't need Star. But I don't see any other distros yet, so Star as a part of the path still seems relevant. (also, at some point, I think everyone just started assuming Star was a thing in its own right.)

[22:02] <El_Che> [Coke]: the idea of distributions sounds a lot like an early optimazation problem. Or a solution to a non-existent problem

[22:03] <El_Che> A few sucesfull languages have multiple compiles, I don't know of any with multiple distributions

[22:03] <[Coke]> The thought was to provide a one-stop bundle that has enough for someone to do something. I don't need that, but I can tell you that over the past 4 years, many people have done ONLY star downloads because they couldn't be bothered with something like zef.

[22:04] <El_Che> the perl distributions were mostly a way to get an installer for windows

[22:04] <[Coke]> we don't have multiple distro, though, just one. neh?

[22:04] <El_Che> I think no one has

[22:04] <[Coke]> El_Che: having been here since 2015, that's a big plus for windows, but it wasn't the main reason for rakudo star.

[22:04] <El_Che> multiple compiles, I get that, but that's firmly in the wishful thinking territory at the moment

[22:05] <El_Che> [Coke]: No, I get the bootstrap-like problem of the past

[22:05] <El_Che> [Coke]: Just thinking that the problem for the solution is gone

[22:06] <[Coke]> Anyway, are you suggesting we do something in particular to the current state, or just talking about how things have been so far?

[22:06] <El_Che> Personally? I would like to see official Linux, MacOS and Windows compiler+zef packages on the main site

[22:07] <El_Che> "offcial" being an imporant part

[22:07] <El_Che> the sitatuion is confusing today (being myself part of the confusion, probably)

[22:07] <[Coke]> "official" compiler?

[22:08] <El_Che> official binary downloads

[22:08] <El_Che> with rakudo+zef

[22:08] <[Coke]> So, just for the compiler, not for the star distro?

[22:08] <El_Che> yes

[22:08] <[Coke]> Sure, seems reasonable.

[22:08] <El_Che> [Coke]: like this: https://golang.org/dl/

[22:08] <[Coke]> I think that's a different discussion than R*.

[22:09] <El_Che> I am doing that all evening I think, so I am going to stop with that :)

[22:13] *** lucasb left
[22:16] <patrickb> El_Che, [Coke]: From what it looks like now, we will have such rakudo+zef releases from the coming release onwards. I'm currently in the process of changing the raku.org and rakudo.org websites to sanitize the download pages. I'll be liberal in changing it to what I think makes sense. I'll create PRs. The PRs are then up for discussion.

[22:19] <El_Che> patrickb: it sounds great

[22:20] *** RubioTerra joined
[22:25] *** jaldhar_ left
[22:26] *** jaldhar_ joined
[22:26] <SmokeMachine> xinming: now Red must be accepting left AST... https://github.com/FCO/Red/commit/0f52e246750b365f2966d825b31d5c5ed76de210

[22:27] *** dduncan joined
[22:27] *** dduncan left
[22:29] <brass> Is it possible to have @.a and $.a in the same object?

[22:29] <patrickb> What happened to pl6env? I can't seem to find it anymore...

[22:31] <[Coke]> m: class A { has @.a; has $.a } ; dd A.new

[22:31] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two or more attributes declared that both want an accessor method 'a'␤at <tmp>:1␤»

[22:31] <[Coke]> m: class A { has @!a; has $!a } ; dd A.new

[22:31] <camelia> rakudo-moar a05e169ea: OUTPUT: «A.new␤»

[22:31] <[Coke]> ^^

[22:31] <[Coke]> it's the accessors that get you

[22:31] <[Coke]> m: class A { has @!a; has $.a } ; dd A.new

[22:31] <camelia> rakudo-moar a05e169ea: OUTPUT: «A.new(a => Any)␤»

[22:31] *** jaldhar_ left
[22:32] *** jaldhar_ joined
[22:34] <brass> Hm ok neat

[22:36] *** wamba left
[23:10] *** patrickb left
[23:18] *** MasterDuke left
[23:29] *** Altai-man_ joined
[23:32] *** sena_kun left
