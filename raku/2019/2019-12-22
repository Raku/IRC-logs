[00:07] <rypervenche> releasable6: status

[00:07] <releasable6> rypervenche, Next release will happen when it's ready. There are no known blockers. 0 out of 289 commits logged

[00:07] <releasable6> rypervenche, Details: https://gist.github.com/7a45dda8cb9278510eeeb230137d78de

[00:25] *** chloekek left
[00:27] *** hacktor left
[00:40] *** hacktor joined
[00:45] *** Tirifto joined
[00:46] <Tirifto> Hello!

[00:49] <Tirifto> Side question: Could one say that the ‘&’ sigil marks the infinitive?

[00:51] <Juerd> That's a nice observation. Seems to work, but there are probably enough edge cases :)

[00:55] <Tirifto> Juerd: Gotcha. Then I'll keep it in mind and keep an eye out for edge cases; thanks! :)

[00:55] <tbrowder> .tell chloekek user-format pod leading decl works on master branch and should be in upcoming release. until i v

[00:55] <tellable6> tbrowder, I'll pass your message to chloekek

[01:00] <tbrowder> .tell chloekek until i can update docs, look at roast test: S26*/block-leading-user-format.t for an example

[01:00] <tellable6> tbrowder, I'll pass your message to chloekek

[01:08] *** xinming_ left
[01:08] *** wildtrees left
[01:11] *** xinming_ joined
[01:20] *** Altai-man_ joined
[01:23] *** sena_kun left
[01:57] *** kalkin-- joined
[02:00] *** Tirifto left
[02:01] *** kalkin- left
[03:01] *** bisectable6 left
[03:01] *** sourceable6 left
[03:01] *** benchable6 left
[03:01] *** nativecallable6 left
[03:01] *** releasable6 left
[03:01] *** committable6 left
[03:01] *** bloatable6 left
[03:01] *** statisfiable6 left
[03:01] *** squashable6 left
[03:01] *** reportable6 left
[03:01] *** greppable6 left
[03:01] *** quotable6 left
[03:01] *** coverable6 left
[03:01] *** shareable6 left
[03:01] *** unicodable6 left
[03:01] *** notable6 left
[03:02] *** nativecallable6 joined
[03:02] *** bisectable6 joined
[03:02] *** greppable6 joined
[03:02] *** coverable6 joined
[03:02] *** benchable6 joined
[03:03] *** statisfiable6 joined
[03:03] *** quotable6 joined
[03:03] *** sourceable6 joined
[03:03] *** unicodable6 joined
[03:03] *** shareable6 joined
[03:03] *** releasable6 joined
[03:03] *** notable6 joined
[03:03] *** committable6 joined
[03:04] *** squashable6 joined
[03:04] *** bloatable6 joined
[03:04] *** reportable6 joined
[03:21] *** sena_kun joined
[03:23] *** Altai-man_ left
[03:25] *** wamba joined
[04:01] *** marcusr left
[04:02] *** benjif1 joined
[04:03] *** benjif1 left
[04:17] *** vrurg_ is now known as vrurg

[04:33] *** AlexDaniel joined
[04:33] *** AlexDaniel left
[04:33] *** AlexDaniel joined
[05:20] *** Altai-man_ joined
[05:23] *** sena_kun left
[06:23] *** statisfiable6 left
[06:23] *** benchable6 left
[06:23] *** quotable6 left
[06:23] *** shareable6 left
[06:23] *** greppable6 left
[06:23] *** coverable6 left
[06:23] *** bisectable6 left
[06:23] *** committable6 left
[06:23] *** bloatable6 left
[06:23] *** unicodable6 left
[06:23] *** squashable6 left
[06:23] *** nativecallable6 left
[06:23] *** sourceable6 left
[06:23] *** releasable6 left
[06:23] *** notable6 left
[06:23] *** reportable6 left
[06:23] *** notable6 joined
[06:23] *** bisectable6 joined
[06:23] *** nativecallable6 joined
[06:23] *** committable6 joined
[06:23] *** squashable6 joined
[06:24] *** quotable6 joined
[06:24] *** statisfiable6 joined
[06:24] *** bloatable6 joined
[06:24] *** unicodable6 joined
[06:25] *** benchable6 joined
[06:25] *** greppable6 joined
[06:25] *** releasable6 joined
[06:25] *** coverable6 joined
[06:25] *** sourceable6 joined
[06:25] *** reportable6 joined
[06:26] *** shareable6 joined
[06:56] *** wamba left
[07:21] *** sena_kun joined
[07:23] *** Altai-man_ left
[07:58] *** AlexZahatski joined
[08:00] *** AlexZahatski is now known as Zag

[08:00] *** Zag is now known as aZag

[08:08] *** rindolf joined
[08:10] *** ewr joined
[08:32] *** aZag left
[08:33] *** ewr left
[08:34] *** stoned75 left
[08:36] *** xinming joined
[08:39] *** xinming_ left
[08:40] *** AlexDani` joined
[08:43] *** AlexDaniel left
[08:47] *** hacktor left
[08:49] *** AlexDani` is now known as AlexDaniel

[08:49] *** AlexDaniel left
[08:49] *** AlexDaniel joined
[08:49] *** eseyman left
[08:50] *** hacktor joined
[08:59] *** marcusr joined
[09:01] *** cpan-raku left
[09:04] *** cpan-raku joined
[09:04] *** cpan-raku left
[09:04] *** cpan-raku joined
[09:20] *** Altai-man_ joined
[09:21] *** stoned75 joined
[09:23] *** sena_kun left
[09:53] *** mid_laptop joined
[09:58] <kalkin--> If I have Pod on a class and it attributes + methods, I would expect to get a Pod Structure as a tree, but currently I'm getting a list. Is it a bug or a feature?

[09:58] *** kalkin-- is now known as kalkin0-

[09:58] *** kalkin0- is now known as kalkin-

[10:14] <Geth_> ¦ doc: 402e897c6a | (JJ Merelo)++ | doc/Language/statement-prefixes.pod6

[10:14] <Geth_> ¦ doc: Comment automatic serialization of *Seq in loops

[10:14] <Geth_> ¦ doc: 

[10:14] <Geth_> ¦ doc: And how to avoid it with statement prefixes #2632.

[10:14] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/402e897c6a

[10:34] <Kaiepi> m: class Foo { has Int:D @!foo is Set; submethod BUILD(:@!foo) { } }; say Foo.new: :foo[1,2,3]

[10:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot modify an immutable Set[Int:D] (set())␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:34] <Kaiepi> m: $eval my class Foo { has Int:D @!foo is Set; submethod BUILD(:@foo) { @!foo := @!foo.new: @foo } }; Foo.new: :foo[1,2,3]

[10:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$eval' is not declared. Did you mean any of these?␤    &EVAL␤    &val␤␤at <tmp>:1␤------> 3<BOL>7⏏5$eval my class Foo { has Int:D @!foo is ␤»

[10:34] <Kaiepi> m: my class Foo { has Int:D @!foo is Set; submethod BUILD(:@foo) { @!foo := @!foo.new: @foo } }; say Foo.new: :foo[1,2,3]

[10:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «Foo.new␤»

[10:35] <Kaiepi> is the former supposed to happen?

[10:37] <Kaiepi> or rather why does the former work the way it does?

[11:03] <Kaiepi> oh

[11:03] *** wamba joined
[11:04] <Kaiepi> m: my Int:D @foo is Set; @foo = 1, 2, 3

[11:04] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot modify an immutable Set[Int:D] (set())␤  in block <unit> at <tmp> line 1␤␤»

[11:05] <Kaiepi> i was expecting it to work like assigning to `my Int:D @foo` would if i hadn't already assigned anything to it

[11:21] *** sena_kun joined
[11:23] *** Altai-man_ left
[11:39] *** masak_ is now known as masak

[11:45] <kalkin-> p6: say "asdasd\x00foo".split: "\x00";

[11:45] <camelia> rakudo-moar 672c5d403: OUTPUT: «(asdasdoo)␤»

[11:46] <kalkin-> p6: say "asdasd:foo".split: ":";

[11:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «(asdasd foo)␤»

[11:46] <kalkin-> split a string by ASCII NULL doesn't work

[11:46] <kalkin-> bug or feature?

[11:46] <lizmat> I'd say bug

[11:47] <kalkin-> p6: say "asdasd\x0foo".split: "\x0";

[11:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «(asdasdoo)␤»

[11:47] <kalkin-> p6: say "asdasd\0foo".split: "\0";

[11:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «(asdasd foo)␤»

[11:48] *** mid_laptop left
[11:48] <kalkin-> p6: say "asdad\x3easd"

[11:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «asdadϪsd␤»

[11:48] <kalkin-> p6: say "asdad\x00asd"

[11:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «asdad␤sd␤»

[11:48] *** mid_laptop joined
[11:48] <kalkin-> I thought i can enter any char via \xHEXHEX

[11:48] <kalkin-> looks like it doesn't work for 0 byte?

[11:49] <kalkin-> is this a bug or did I misunderstood the purpose/working of \xFF syntax?

[11:51] <kalkin-> p6: say "asdasd\0foo";

[11:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «asdasd␀foo␤»

[11:53] <kalkin-> p6:"foo:ver<1.2>\0asd", "bar:ver<2.3>\0foo" ==> map *.split(':ver')[1] ==> map *.split: "\0" ==> my %h; say %h

[11:53] <evalable6> kalkin-, rakudo-moar 9a571b685: OUTPUT: «{<1.2> asd => (<2.3> foo)}␤»

[11:54] <kalkin-> not what i expected, hmm somehow \0 parsing is wrong, or I'm missing something obvious

[11:57] <kalkin-> p6: "foo:ver<1.2>\0asd", "bar:ver<2.3>\0foo" ==> map *.split(':ver')[1] ==> map *.split: "\0" ==> flat() ==> my %h

[11:57] <camelia> rakudo-moar 672c5d403: ( no output )

[11:57] <kalkin-> p6: "foo:ver<1.2>\0asd", "bar:ver<2.3>\0foo" ==> map *.split(':ver')[1] ==> map *.split: "\0" ==> flat() ==> my %h; say %h

[11:57] <camelia> rakudo-moar 672c5d403: OUTPUT: «{<1.2> => asd, <2.3> => foo}␤»

[12:53] *** chloekek joined
[12:55] <chloekek> Inline::Perl5 gives me Prototype mismatch: sub Digest::SHA::DESTROY ($) vs none at (eval 10) line 5. if I import Digest::SHA with use Digest::SHA:from<Perl5> <sha256_hex>;. But everything works fine though.

[12:55] <tellable6> 2019-12-22T00:55:58Z #raku <tbrowder> chloekek user-format pod leading decl works on master branch and should be in upcoming release. until i v

[12:55] <tellable6> 2019-12-22T01:00:19Z #raku <tbrowder> chloekek until i can update docs, look at roast test: S26*/block-leading-user-format.t for an example

[12:57] <chloekek> tbrowder: neat!

[13:06] <kalkin-> did p6doc Language/testing or p6doc Str ever worked for any one?

[13:20] *** Altai-man_ joined
[13:23] *** sena_kun left
[13:42] *** bobv joined
[13:47] *** xinming left
[13:49] *** xinming joined
[13:59] <kalkin-> ok I see. I neeed to install from source and then use `zef install --force .`

[14:16] <chloekek> p6: sub g { $*x = 2; }; sub f { my $*x = 1; g; say $*x }; f

[14:16] <camelia> rakudo-moar 672c5d403: OUTPUT: «2␤»

[14:16] <chloekek> p6: sub g { $*x = 2; }; sub f { my $*x := 1; g; say $*x }; f

[14:16] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot modify an immutable Int (1)␤  in sub g at <tmp> line 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:16] <chloekek> p6: sub g { my $*x = 2; }; sub f { my $*x := 1; g; say $*x }; f

[14:16] <camelia> rakudo-moar 672c5d403: OUTPUT: «1␤»

[14:35] <kalkin-> Hmm, am I right that it's under specified if a leading/trailing pod can contain elements like L<> and B<> ?

[14:40] <kalkin-> Current rakudo does not parse formatting codes in leading/trailing pods. Bug or feature?

[14:47] <tbrowder> .tell jmerelo i can't tell if my advent post is scheduled properly--the bloody calendar display seems to have changed on me! please help!

[14:47] <tellable6> tbrowder, I'll pass your message to jmerelo

[14:47] <tbrowder> afk&

[14:51] <tbrowder> kalkin: formatting codes are not yet implemented in all pod objects, PRs welcome!

[14:54] <uzl[m]> tbrowder: Will you latest work allow for full POD formatting in declarator blocks? Or only the comments won't be squashed into a single line as before?

[15:14] *** EuAndreh[m] left
[15:18] <kalkin-> tbrowder: my issue isn't even that it's not implemented, skimming S26 i'm not sure if formatting codes should be implemented as part of leading/trailing pod

[15:21] *** sena_kun joined
[15:23] *** Altai-man_ left
[15:37] *** stoned75 left
[15:47] *** leont joined
[15:49] <guifa> kalkin-: I think ultimately it would make sense — after all theoretically it’s just a POD.  But they get stored as Str ATM

[15:53] <cpan-raku> New module released to CPAN! Getopt::Subcommands (0.0.1) by 03LEONT

[15:54] *** stoned75 joined
[16:08] *** stoned75 left
[16:13] *** guifa left
[16:15] *** bobv left
[16:21] <kalkin-> .tell guifa looking at Grammar.nqp there're two methods for attaching leading/trailing pod. I'm not sure why it's implemented this way

[16:21] <tellable6> kalkin-, I'll pass your message to guifa

[16:21] <kalkin-> In general I find Grammar.nqp is very confusing and complicated. My understanding of it is very limited

[16:25] <kalkin-> .tell guifa never mind, it's for attaching it the actual code parts

[16:25] <tellable6> kalkin-, I'll pass your message to guifa

[16:28] <chloekek> First time running Raku code on a server. :D

[17:21] *** Altai-man_ joined
[17:22] *** sena_kun left
[17:37] <tbrowder> kalkin: i agree it wasn't planned,

[17:39] <tbrowder> *planned for all pod objects, and as i read it that includes table cells. however, that doesn't mean we couldn't add that feature. but i think that would entail a new internal design.

[17:40] <tbrowder> likewise, S26 doesn't address formattingb

[17:41] <tbrowder> *formatting in pod declarator blocks as far as i can see.

[17:46] <kalkin-> tbrowder: can you elaborate on what you mean by “new internal design”. What is wrong with the current, besides that it stringifies content for leading/trailing pods

[17:52] <tbrowder> well, when you look at how pod parts are assembled, i think it would be easier to handle formatted code, as well as other objects, as classes, so that we could more easily create such things as tables within table cells, etc.

[18:43] *** evalable6 left
[18:44] *** evalable6 joined
[18:49] *** johnjohn101 joined
[18:49] <johnjohn101> hi  raku people

[18:49] <Altai-man_> o/

[18:53] <tbrowder> \o

[18:56] <kalkin-> huhu

[18:57] *** chloekek left
[19:03] <AlexDaniel> Altai-man_: ahhhhhhhh

[19:03] <AlexDaniel> I have an idea

[19:03] <Altai-man_> yup?

[19:03] <cpan-raku> New module released to CPAN! RakuAdvent::WordPress (0.0.2) by 03TBROWDER

[19:03] <AlexDaniel> Altai-man_: can you try wiping both installed/ and output/ dirs before running blin?

[19:03] <AlexDaniel> or is it already the case?

[19:03] <Altai-man_> AlexDaniel, I did that before running it the second time (with 12 nproc), but if you want to...

[19:03] <AlexDaniel> hmm…

[19:04] <Altai-man_> AlexDaniel, as for "green light" from me: well, no regressions were spotted yet. what's the usual number for ZefFailure count?

[19:04] <AlexDaniel> Altai-man_: 5

[19:05] <AlexDaniel> ok, there were a lot more, for the file I have at hand there were 10

[19:05] <rindolf> AlexDaniel: hi, sup? ltns

[19:06] <Altai-man_> hmm, ~300 is too much compared to 10...

[19:06] <AlexDaniel> Altai-man_: exactly

[19:07] <AlexDaniel> Altai-man_: many times there's only 1 module that breaks when we introduce a serious regression, so not testing 300 modules is pretty bad

[19:08] <Altai-man_> AlexDaniel, I probably have to read the blin code more carefully, how the situation with "already installed" can occur at all? a single zef instance is used?

[19:09] <AlexDaniel> rindolf: I'm enjoying a little break from raku stuff and at the same time being busy on some of my other projects (though I use raku for all of them…)

[19:09] <AlexDaniel> Altai-man_: I don't get it too, yes

[19:09] <rindolf> AlexDaniel: ah, i am stuck on a node-inspect issue

[19:10] <AlexDaniel> Altai-man_: it installs modules into separate directories, and these directories are only included when the module is in the dependency chain

[19:11] <AlexDaniel> Altai-man_: so I have absolutely no idea how that can happen, unless installed/ dir was not purged

[19:11] <Altai-man_> oh

[19:11] <Altai-man_> so `installed/` too...

[19:11] <Altai-man_> I only purged output/, ouch.

[19:11] <AlexDaniel> ok one issue down :)

[19:12] <AlexDaniel> there's no purge command because I thought the image with blin will be fresh every time you start it

[19:12] <AlexDaniel> and that's how it should be, actually…

[19:13] <AlexDaniel> like, scrap the whole vm or whatever there is and start from scratch for every run

[19:13] <Altai-man_> I am sure rm -r can delete some things...

[19:13] <AlexDaniel> but there are also processes and other stuff that can be left behind

[19:15] <Altai-man_> AlexDaniel, there are 26 tasks right now and I don't see anything related except my ssh session, so...

[19:15] <AlexDaniel> ok let's figure out the proper way of running it later :)

[19:16] <Altai-man_> so I am running nproc 12 again, with installed/ output/ contents purged, right?

[19:16] <AlexDaniel> Altai-man_: right, you can also maybe purge /tmp/whateverable

[19:17] <AlexDaniel> Altai-man_: also, are you sure you have all dependencies installed?

[19:17] <AlexDaniel> ===SORRY!===\nPlease install Inline::Perl5 for Perl 5 support. \n\n

[19:17] <AlexDaniel> ah

[19:17] <AlexDaniel>     "output": "===> Searching for: Inline::Perl5\n«timed out after 600 seconds»"

[19:17] <AlexDaniel> either increase the timeout or run with less nproc

[19:17] <Altai-man_> AlexDaniel, even less than 12?

[19:18] <AlexDaniel> try with 8 maybe

[19:18] <AlexDaniel> it's gonna take a while but… that's maybe ok…

[19:18] <AlexDaniel> I'm gonna go get some food

[19:19] * AlexDaniel &

[19:20] *** sena_kun joined
[19:23] *** Altai-man_ left
[19:24] *** wamba left
[19:27] *** chloekek joined
[19:48] *** wamba joined
[19:54] *** mid_laptop left
[20:08] *** wamba left
[20:33] <kalkin-> what does <.foo> mean in Grammer.nqp

[20:34] <kalkin-> is it just a call to a method?

[20:34] <leont> No, means it matches the foo rule, but doesn't capture it into a foo element

[20:36] <kalkin-> leont: but there is a attach_leading_docs method but no rule

[20:37] <kalkin-> or is it the case of as long as you return a Match it doesn't matter that it's a method?

[20:37] <kalkin-> like documented here: https://docs.perl6.org/language/grammars#Methods_in_grammars ?

[20:39] <kalkin-> I've been starring into Grammar.nqp for a few hours now, but i still have no idea how to allow to handle leading/trailing pods as proper pod and not Str

[20:41] <kalkin-> e.g in Grammar.nqp:2415 the leading pod is set. But at which point is $*DOC set, which is used by attach_leading_docs?

[20:42] <kalkin-> I suspect it habens in the token pblock, but i don't see where it is matched for a subroutine

[20:47] *** rindolf left
[20:47] *** Xliff joined
[20:47] <Xliff> o/

[20:48] <Xliff> Will raku work in a 32-bit environment?

[20:49] <AlexDaniel> yes, without JIT

[20:49] <AlexDaniel> and possibly with some bugs

[20:49] <AlexDaniel> but yes

[20:49] <Xliff> Thanks.

[20:54] *** mid_laptop joined
[20:59] <Xliff> Is there a programmatic way to handle delegation, yet?

[21:04] <Xliff> Answer: No. See src/core.c/traits.pm6:422

[21:04] <Xliff> Actually, that's line 421. The reason it's "no" is because the role that does all the work is scope-limited

[21:05] <lizmat> Xliff: I see no reason why that couldn't be publized / exposed

[21:06] <lizmat> but how would you indicate you'd want it your way?

[21:06] <Xliff> lizmat: Actually, couldn't you call it as trait_mod:<handles>() and manually pass the attribute and method name?

[21:07] <lizmat> preferably in a BEGIN block, but yeah, that could work

[21:07] <Geth_> ¦ ecosystem/bbkr-patch-1: b4b5ede86c | (Pawel Pabian)++ (committed using GitHub Web editor) | META.list

[21:07] <Geth_> ¦ ecosystem/bbkr-patch-1: Added HomoGlypher module - toolset for handling similarly looking characters in strings.

[21:07] <Geth_> ¦ ecosystem/bbkr-patch-1: 

[21:07] <Geth_> ¦ ecosystem/bbkr-patch-1: I agree to the usage of the META file as listed here.

[21:07] <Geth_> ¦ ecosystem/bbkr-patch-1:  I have a license field listed in my META file that is one of https://spdx.org/licenses

[21:07] <Geth_> ¦ ecosystem/bbkr-patch-1: review: https://github.com/perl6/ecosystem/commit/b4b5ede86c

[21:07] <lizmat> alternately, expose this as an Atribute method ?

[21:09] <Geth_> ¦ ecosystem: bbkr++ created pull request #476: Added HomoGlypher module.

[21:09] <Geth_> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/476

[21:09] * leont has had to call trait_mod's directly before

[21:11] <Xliff> lizmat: role Delegatable {}; for self.^attributes.grep(* ~~ Delegatable) { trait_mod<handles>($_, .name.substr(2)) } # Attributes have been pre-marked with Delegatable

[21:11] <Xliff> lizmat: Definitely in a begin block.

[21:12] <Xliff> lizmat: ClassHOW, I would think.

[21:12] <Xliff> ClassHOW.add-deletation($attriubte, $thunk)

[21:13] <Xliff> But Attribute could work, too.

[21:13] <Xliff> Attribute.add-delegator($thunk)

[21:19] <Xliff> Aaannnnd.... crap.

[21:19] <Xliff> If this needs to be done in a BEGIN block, I can't do this from a role.

[21:19] *** wamba joined
[21:19] <Xliff> Please tell me I'm mistaken... ;S

[21:19] * lizmat is trying to make it an Attribute method

[21:20] <Xliff> lizmat++

[21:20] *** Altai-man_ joined
[21:23] *** sena_kun left
[21:35] <lizmat> Xliff: ok, this gets into bootstrap issues...  I guess there is a reason why that role lives in the place that it does

[21:36] <lizmat> Stage start      :   0.000

[21:36] <lizmat> Ambiguous call to trait_mod:<handles>

[21:39] <lizmat> Xliff: https://gist.github.com/lizmat/31a39891dce0d8ed07bd4739846fa047   # if you wanna have a go at it yourself

[22:01] <Xliff> lizmat: Yeah. There's this weird thing with roles and attributes.

[22:02] <Xliff> At compile time I don't think they are completely there, yet.

[22:02] <Xliff> Especially when I am trying to get the attributes of a CStruct.

[22:03] <Xliff> Hmm... they are there if I strictly go from the CStruct, but not for the role that contains the CStruct

[22:06] <Xliff> lizmat: This seems to work.

[22:07] <Xliff> https://github.com/Xliff/p6-GIMP/blob/master/lib/GIMP/Roles/ColorConfig.pm6#L135

[22:08] <Xliff> ^^ Compiles, not yet tested, but I would expect I would get immediate feedback from the BEGIN block if there were problems.

[22:08] *** sauvin left
[22:08] *** sauvin_ joined
[22:14] <Xliff> Will this work? -> "multi submethod BUILD (:$color-config) { ... }; multi submethod BUILD (:$mode, :$properties, :$something-else) { ... }; "

[22:15] *** vividsnow joined
[22:16] <jnthn> Xliff: You'd need to make those required named arguments for it to work

[22:16] <Xliff> So more like: multi submethod BUILD (:$color-config is required ) { ... }; multi submethod BUILD (:$mode, :$properties, :$something-else) { ... }; "

[22:17] <jnthn> I'd just spell it ! but yes

[22:23] *** mid_laptop left
[22:35] *** vividsnow left
[22:45] <chloekek> p6: use NativeCall; say byte ~~ Int

[22:45] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[22:46] <chloekek> p6: use NativeCall; say $_ ~~ Int for (int8, int16, uint8, uint16);

[22:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤True␤True␤True␤»

[22:47] <chloekek> p6: use NativeCall; say $_ ~~ UInt for (int8, int16, uint8, uint16);

[22:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤True␤True␤True␤»

[22:58] *** finanalyst joined
[23:01] <chloekek> p6: my int $x = 0; say $x.VAR

[23:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «0␤»

[23:03] <lizmat> chloekek: the int gets upgraded to Int

[23:04] <lizmat> m: my Int $x = 0; say $x.VAR

[23:04] <camelia> rakudo-moar 672c5d403: OUTPUT: «0␤»

[23:04] <lizmat> m: my Int $x := 0; say $x.VAR

[23:04] <camelia> rakudo-moar 672c5d403: OUTPUT: «0␤»

[23:04] <lizmat> hmmm

[23:05] <lizmat> guess I'm in he wrong mindset

[23:21] *** sena_kun joined
[23:23] *** Altai-man_ left
[23:28] <chloekek> p6: my $x = 0; say $x.VAR

[23:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «0␤»

[23:28] <chloekek> p6: my $x = 'a'; say $x.VAR

[23:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «"a"␤»

[23:28] <chloekek> Ah, should check VAR.WHAT

[23:28] <chloekek> p6: my int $x = 0; say $x.VAR.WHAT

[23:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «(IntLexRef)␤»

[23:30] *** cpan-raku left
[23:31] *** cpan-raku joined
[23:31] *** cpan-raku left
[23:31] *** cpan-raku joined
[23:34] *** wamba left
[23:48] *** Tirifto joined
[23:49] *** Tirifto left
[23:50] *** chloekek left
