[00:06] <SmokeMachine> xinming_: https://www.irccloud.com/pastebin/VG7hKIbp/

[00:08] <SmokeMachine> xinming_: it's working, but gives an error if you not pass a Ble to your Ble...

[00:08] <SmokeMachine> xinming_: it's working, but gives an error if you not pass a Ble to your Bla...

[00:14] <SmokeMachine> xinming_: the important part is: `has UInt $!ble-id is column{ :references{ Ble.id }, :!nullable }`

[00:23] *** Doc_Holliwood left
[00:25] *** redable left
[00:25] *** ggoebel left
[00:28] *** lucasb left
[00:39] <SmokeMachine> red: model Bla { ... }; model Ble { has $!id is serial; has Bla @.blas is relationship{ .ble-id } }; model Bla { has $!id is serial; has UInt $!ble-id is column{ :references{ Ble.id }, :!nullable }; has Str $.name is column; has Ble $.ble is relationship{ .ble-id } }; my $*RED-DB = database "SQLite"; Bla.^create-table; Ble.^create-table; Ble.^create: :blas[{:name<bla>}, {:name<ble>}]; .say for Bla.^all; Bla.^create: 

[00:39] <SmokeMachine> :name<bli>

[00:40] *** redable joined
[00:40] <SmokeMachine> red: model Bla { ... }; model Ble { has $!id is serial; has Bla @.blas is relationship{ .ble-id } }; model Bla { has $!id is serial; has UInt $!ble-id is column{ :references{ Ble.id }, :!nullable }; has Str $.name is column; has Ble $.ble is relationship{ .ble-id } }; my $*RED-DB = database "SQLite"; Bla.^create-table; Ble.^create-table; Ble.^create: :blas[{:name<bla>}, {:name<ble>}]; .say for Bla.^all; Bla.^create: 

[00:40] <SmokeMachine> :name<bli>

[00:40] *** redable left
[00:43] <SmokeMachine> red: model Bla { ... }; model Ble { has $!id is serial; has Bla @.blas is relationship{ .ble-id } }; model Bla { has $!id is serial; has UInt $!ble-id is column{ :references{ Ble.id }, :!nullable }; has Str $.name is column; has Ble $.ble is relationship{ .ble-id } }; my $*RED-DB = database "SQLite"; Bla.^create-table; Ble.^create-table; Ble.^create: :blas[{:name<bla>}, {:name<ble>}]; .say for Bla.^all; Bla.^create: 

[00:43] <SmokeMachine> :name<bli>

[01:46] *** ggoebel joined
[02:06] <Geth> ¬¶ problem-solving/old-issue-tracker: 57f7054251 | (Aleks-Daniel Jakimenko-Aleksejev)++ | solutions/rakudo/Old-Issue-Tracker-Dismantling-Plan.md

[02:06] <Geth> ¬¶ problem-solving/old-issue-tracker: Mention others too

[02:06] <Geth> ¬¶ problem-solving/old-issue-tracker: review: https://github.com/perl6/problem-solving/commit/57f7054251

[02:06] <Geth> ¬¶ problem-solving/old-issue-tracker: 57f2e8ebb8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | solutions/rakudo/Old-Issue-Tracker-Dismantling-Plan.md

[02:06] <Geth> ¬¶ problem-solving/old-issue-tracker: Mention that perl6/ will likely not be ‚Äúperl6/‚Äù later

[02:06] <Geth> ¬¶ problem-solving/old-issue-tracker: review: https://github.com/perl6/problem-solving/commit/57f2e8ebb8

[03:19] *** ZzZombo joined
[03:42] <Geth> ¬¶ ecosystem: 9b15b778ca | tony-o++ (committed using GitHub Web editor) | META.list

[03:42] <Geth> ¬¶ ecosystem: sqlite orm

[03:42] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/9b15b778ca

[04:30] *** marcusr left
[04:30] *** marcusr joined
[06:20] *** epony left
[06:39] <discord6> <Aearnus> does cro/cro::webapp have anything like partials

[06:39] <discord6> <Aearnus> a-la ruby on rails' <%= render ... %>

[06:40] <discord6> <Aearnus> I couldn't find anything like that online

[06:40] <discord6> <Aearnus> aha, cro::webapp provides <:use '...'>

[06:41] <discord6> <Aearnus> üòÑ

[06:48] <Geth> ¬¶ doc: 3b828abad6 | (Stoned Elipot)++ | doc/Language/classtut.pod6

[06:48] <Geth> ¬¶ doc: Pursue .WHAT removal

[06:48] <Geth> ¬¶ doc: 

[06:48] <Geth> ¬¶ doc: - Sync output with code example

[06:48] <Geth> ¬¶ doc: - Update code example description

[06:48] <Geth> ¬¶ doc: - Advise .^name usage

[06:48] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3b828abad6

[06:48] <Geth> ¬¶ doc: 9fc140b745 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/classtut.pod6

[06:48] <Geth> ¬¶ doc: Merge pull request #3074 from stoned/classtut-no-what

[06:48] <Geth> ¬¶ doc: 

[06:48] <Geth> ¬¶ doc: Pursue .WHAT removal

[06:48] <Geth> ¬¶ doc: We can discuss whether .WHAT should be removed from this particular document, but this PR just makes the text match the example.

[06:48] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9fc140b745

[07:08] *** sena_kun joined
[07:12] *** Doc_Holliwood joined
[07:24] *** Voldenet joined
[09:06] *** sarna joined
[09:32] *** xinming_ left
[09:34] *** xinming_ joined
[09:39] *** Doc_Holliwood left
[10:09] *** cpan-raku left
[10:10] *** cpan-raku joined
[10:10] *** cpan-raku left
[10:10] *** cpan-raku joined
[10:10] *** chloekek joined
[10:55] *** chloekek left
[10:59] *** sarna left
[11:05] *** sena_kun left
[11:21] *** sena_kun joined
[11:23] *** sena_kun left
[11:24] <tbrowder> tony-o: hi, how do you create a "unique(field1, field2)" constraint in xoo?

[11:26] <xinming_> SmokeMachine: When a has_many relationship is defined, How can we further filter the has_many?

[11:26] <xinming_> For example,   $object.has_many_items.^load: xxxx;

[11:27] <xinming_> When I try this, I got     ` No such method 'load' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'head'?`

[11:34] <xinming_> SmokeMachine: Got it, It's a bit confusing that some api are not "unified", we need to use  .grep  instead of  .^grep,    `Model.^load: 1;` works, but    `$xx-object.has_many_items.^load: 1;`  doesn't.  with has_many_items relationship, We need to use $xx-object.has_many_items.grep: ...;    The API is bit confusing.

[11:38] *** xinming_ left
[11:39] *** xinming_ joined
[11:48] <xinming_> SmokeMachine: Also, How do we do multi-key primary key? ;-)

[12:10] <xinming_> SmokeMachine: Also, the way to get all columns from a row.

[12:15] *** markmarkmark joined
[12:21] <SmokeMachine> xinming_: $obj.has-many.first: *.name eq ‚Äúbla‚Äù

[12:26] <SmokeMachine> xinming_: you can have multiple `is id` fields...

[12:27] <SmokeMachine> xinming_: the obj has all columns...

[12:30] *** markmarkmark is now known as markmark

[12:32] *** stoned75 joined
[12:37] *** chloekek joined
[12:38] *** markmark is now known as markmarkmark

[12:50] *** Doc_Holliwood joined
[12:59] *** lucasb joined
[13:12] <SmokeMachine> xinming_: `$obj.has-multi` returns an ResultSeq, so, you can do with it anything you would do with `Model.^all`...

[13:27] *** xinming_ left
[13:27] *** xinming_ joined
[13:33] *** Kaeipi left
[13:36] *** epony joined
[13:42] *** chloekek left
[13:44] <SmokeMachine> xinming_: have you seen my answers?

[13:45] <SmokeMachine> xinming_: https://colabti.org/irclogger/irclogger_log/raku?date=2019-10-26#l76

[13:45] *** cpan-raku left
[13:46] <SmokeMachine> .tell xinming_ https://colabti.org/irclogger/irclogger_log/raku?date=2019-10-26#l76

[13:46] <tellable6> SmokeMachine, I'll pass your message to xinming_

[13:47] *** cpan-raku joined
[13:47] *** cpan-raku left
[13:47] *** cpan-raku joined
[14:16] *** stoned75 left
[14:16] *** stoned75 joined
[14:26] <SmokeMachine> red: model Bla { ... }; model Ble { has $!id is serial; has Bla @.blas is relationship{ .ble-id } }; model Bla { has $!id is serial; has UInt $!ble-id is column{ :references{ Ble.id }, :!nullable }; has Str $.name is column; has Ble $.ble is relationship{ .ble-id } }; my $*RED-DB = database "SQLite"; Bla.^create-table; Ble.^create-table; Ble.^create: :blas[{:name<bla>}, {:name<ble>}]; .say for Bla.^all; Bla.^create: 

[14:26] <SmokeMachine> :name<bli>

[14:31] *** Doc_Holliwood left
[14:47] *** xinming_ left
[14:50] *** xinming_ joined
[15:05] <xinming_> SmokeMachine: Thanks.

[15:05] <tellable6> 2019-10-26T13:46:01Z #raku <SmokeMachine> xinming_ https://colabti.org/irclogger/irclogger_log/raku?date=2019-10-26#l76

[15:06] <xinming_> I'll reconnect, bll

[15:06] <xinming_> SmokeMachine: What I mean is, wether there is a method to call, so we can get all columns data from model.

[15:06] *** xinming_ left
[15:10] *** xinming joined
[15:10] <xinming> back with new config, seems ssl on freenode will kill me for a period.

[15:10] <SmokeMachine> xinming_: Model.^columns

[15:10] <xinming> SmokeMachine: How about the object?

[15:11] <SmokeMachine> xinming: $obj.^columns

[15:12] <xinming> SmokeMachine: the ^columns returns an Hash with values?

[15:12] <SmokeMachine> xinming: no, a list of `Attribute`s

[15:13] <ZzZombo> Remind me if I can declare custom `has` traits?

[15:14] <SmokeMachine> ZzZombo: sorry, what do you mean?

[15:15] <ZzZombo> I know you can declare custom `is` traits, but back then couldn't `has`. Did that change?

[15:17] <SmokeMachine> not that I know..

[15:19] <SmokeMachine> red: say 42

[15:21] *** xinming left
[15:21] *** xinming joined
[15:21] <vrurg> ZzZombo: you can't declare a custom trait yet. Not sure if it ever be possible.

[15:22] <ZzZombo> But why not? What's the difference between "is" and "has" that allows to declare the former and not the latter?

[15:22] *** redable joined
[15:24] <vrurg> ZzZombo: the difference is in grammar. Traits are handled individually each one.

[15:25] <vrurg> ZzZombo: actually, it should be possible to define a slang and add a custom trait.

[15:26] <vrurg> The problem with traits is that they have different syntax. 

[15:26] * vrurg is afk

[15:29] <SmokeMachine> red: use Post; say Post.new.^columns # <- xinming 

[15:29] <redable> SmokeMachine, [Int $!id Int $!author-id Str $!title Str $!body Bool $!deleted DateTime $!created Set $!tags]‚ê§

[15:33] *** redable left
[16:07] *** Doc_Holliwood joined
[16:18] *** sena_kun joined
[16:22] <xinming> red: use Post; say Post.new.^columns.map: { .perl.say };

[16:24] <xinming> Why doesn't bot respond for me?

[16:24] <xinming> red: "hello".say;

[16:30] <timotimo> y'know, we could totally have something short for the evalbot where it'd give you a bunch of models with example data to play around with

[16:30] <timotimo> like "use RedEx" :D

[16:33] <timotimo> and a specific output module that spits out CSV with headers, creating gists where the filename is (related to) the query code and the contents are the result as sortable/filterable tables

[16:45] <SmokeMachine> xinming: I've turned it off... sorry

[16:47] <SmokeMachine> timotimo: it's a good idea... about the models, I've alread started: https://github.com/FCO/RedBot/tree/master/samples

[16:55] *** redable joined
[16:56] <SmokeMachine> red: use Post; say Post.new.^columns.map: { .perl.say };

[16:56] <redable> SmokeMachine, post.id‚ê§post.author_id‚ê§post.title‚ê§post.body‚ê§post.deleted‚ê§post.created‚ê§post.tags‚ê§(True True True True True True True)‚ê§

[16:56] *** pmurias joined
[16:56] <pmurias> hi

[16:56] <tellable6> 2019-10-26T16:40:14Z #raku-dev <MasterDuke> pmurias: any idea why https://github.com/MasterDuke17/nqp/commit/8e82f332b43fd9768f3b25b23a25a0fcfdd891d9 doesn't work and gives this? https://gist.github.com/MasterDuke17/14d6d6b184a6a106615df63d13d13bb8

[16:57] <MasterDuke> hey hey

[16:57] <SmokeMachine> red: use Post; say Post.^columns.map: { .column.name };

[16:57] <redable> SmokeMachine, (id author_id title body deleted created tags)‚ê§

[16:58] <SmokeMachine> xinming: ^^

[16:58] <SmokeMachine> pmurias: hi!

[17:07] <SmokeMachine> timotimo: any idea of models we should have?

[17:07] <timotimo> no idea ... the typical ones i guess?!

[17:08] <timotimo> todo application! states and their capitals around the world?

[17:08] <veesh> a blog?

[17:08] <veesh> that's the other classic

[17:09] <veesh> uh.... ecommerce!

[17:09] <SmokeMachine> red: say Post.^all.head.author # <- veesh 

[17:09] <redable> SmokeMachine, 04===SORRY!04=== Error while compiling /code/./code.p6‚ê§Undeclared name:‚ê§    Post used at line 2‚ê§‚ê§

[17:10] <SmokeMachine> red: use Post; say Post.^all.head.author # <- veesh 

[17:10] <redable> SmokeMachine, (Person)‚ê§

[17:11] <SmokeMachine> red: use Person; Person.^create: :name<SmokeMachine>, :posts[{:title("new post"), :body("A new post")}]

[17:11] <redable> SmokeMachine, https://gist.github.com/2fa3109ccbe52c83560b97e9db16b74d

[17:11] <SmokeMachine> red: use Post; say Post.^all.sort(*.id).tail.author # <- veesh 

[17:11] <redable> SmokeMachine, (Person)‚ê§

[17:12] <SmokeMachine> :(

[17:12] <SmokeMachine> red: use Post; .say for Post.^all

[17:12] <redable> SmokeMachine, https://gist.github.com/b7b899950a0e06c5fc6dc0175044de9d

[17:17] <xinming> red: use Post; my Post $post .= new; $post does role { method columns-data () { my %colmap = self.^attr-to-column; %(self.^columns.map: { %colmap{.name} => .get_value(self) }); } }; $post.columns-data.perl.say;

[17:17] <redable> xinming, {:author_id(Any), :body(Any), :created(DateTime.new(2019,10,26,17,17,34.04522466659546)), :!deleted, :id(Any), :tags(set()), :title(Any)}‚ê§

[17:18] <xinming> red: use Post; my Post $post .= new; $post does role { method columns-data () { %(self.^columns.map: { .column.name => .get_value(self) }); }; $post.columns-data.perl.say;

[17:18] <redable> xinming, 04===SORRY!04=== Error while compiling /code/./code.p6‚ê§Missing block‚ê§at /code/./code.p6:3‚ê§------> 03<BOL>08‚èè04<EOL>‚ê§

[17:18] <xinming> red: use Post; my Post $post .= new; $post does role { method columns-data () { %(self.^columns.map: { .column.name => .get_value(self) }); } }; $post.columns-data.perl.say;

[17:19] <redable> xinming, {:author_id(Any), :body(Any), :created(DateTime.new(2019,10,26,17,18,59.74856209754944)), :!deleted, :id(Any), :tags(set()), :title(Any)}‚ê§

[17:19] <xinming> red: use Post; my Post $post = Post.^all.head; $post does role { method columns-data () { %(self.^columns.map: { .column.name => .get_value(self) }); } }; $post.columns-data.perl.say;

[17:19] <redable> xinming, {:author_id(Any), :body(Any), :created(DateTime.new(2019,10,26,17,19,35.81536102294922)), :!deleted, :id(Any), :tags(set()), :title(Any)}‚ê§

[17:20] <xinming> SmokeMachine: I mean, the columns-data returns the column-value map from the db directly.

[17:20] <xinming> I tried to write the meta method in MetaModelX::Red::Model

[17:20] <xinming> Not enough understanding of it for now.

[17:26] <SmokeMachine> red: use Post; my $post = Post.^all.head; $post.HOW does role :: { method column-values($obj --> Hash()) { $obj.^columns.map: { .column.name => .get_value: $obj } } }; say $post.column-values

[17:26] <redable> SmokeMachine, No such method 'column-values' for invocant of type 'Post'‚ê§  in block <unit> at ./code.p6 line 2‚ê§‚ê§

[17:26] <SmokeMachine> red: use Post; my $post = Post.^all.head; $post.HOW does role :: { method column-values($obj --> Hash()) { $obj.^columns.map: { .column.name => .get_value: $obj } } }; say $post.^column-values

[17:27] <redable> SmokeMachine, {author_id => (Any), body => body-test1, created => 2019-10-22T12:00:19.196347Z, deleted => 0, id => 1, tags => set(), title => test1}‚ê§

[17:27] *** wildtrees joined
[17:27] <SmokeMachine> xinming: ^^

[17:27] *** wildtrees left
[17:34] <xinming> SmokeMachine: I get that version too.

[17:34] <xinming> I think you can add this meta method.

[17:34] <xinming> It's useful.

[17:36] *** redable left
[17:36] *** chloekek joined
[17:37] *** pmurias left
[17:38] *** wildtrees joined
[17:38] *** pmurias joined
[17:39] *** redable joined
[18:26] *** gdonald left
[18:26] *** gdonald joined
[18:27] *** stoned75 left
[18:28] *** stoned75 joined
[18:40] *** redable left
[18:41] *** xinming left
[18:41] *** xinming joined
[18:52] *** pmurias left
[18:57] <xinming> SmokeMachine: https://termbin.com/cwav

[18:57] <xinming> SmokeMachine: This test script will raise a bug. Maybe multi column relationship is not perfect.

[19:19] <SmokeMachine> red: https://termbin.com/cwav

[19:21] *** Geth_ joined
[19:21] *** Geth left
[19:23] <SmokeMachine> xinming: a relationship should point to a foreign key, not to a primary key...

[19:24] *** redable joined
[19:25] <SmokeMachine> red: https://termbin.com/cwav

[19:25] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[19:25] <redable> SmokeMachine, 04===SORRY!04=== Error while compiling /code/./code.p6‚ê§'EXPORTHOW::DECLARE::model' conflicts with an existing meta-object imported into this lexical scope‚ê§at /code/./code.p6:6‚ê§------> 03use Red08‚èè04;‚ê§

[19:27] <SmokeMachine> https://www.irccloud.com/pastebin/JY6hC3p0/

[19:28] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/JY6hC3p0/

[19:28] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[19:28] <redable> SmokeMachine, 04===SORRY!04=== Error while compiling /code/./code.p6‚ê§'EXPORTHOW::DECLARE::model' conflicts with an existing meta-object imported into this lexical scope‚ê§at /code/./code.p6:5‚ê§------> 03use Red08‚èè04;‚ê§

[19:28] *** pmurias joined
[19:28] <SmokeMachine> https://www.irccloud.com/pastebin/QUqMTYof/

[19:29] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/QUqMTYof/

[19:29] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[19:29] <redable> SmokeMachine, https://gist.github.com/fe17b251363660ecf90ad3f9fe8b7990

[19:29] <SmokeMachine> xinming: ^^

[19:29] <xinming> SmokeMachine: Thanks, After adding the references, It worked.

[19:30] <xinming> SmokeMachine: yea, Your slogan is right for Red, It's WIP, but quite usable.

[19:30] <xinming> BTW, how is transaction handled?

[19:31] <SmokeMachine> xinming: transactions are NYI

[19:32] <xinming> Ok, But for now, We can still wrap txn ourselves by manually get the dbh

[19:33] *** pmurias left
[19:33] <SmokeMachine> xinming: I'm happy you are liking it... :)

[19:34] <SmokeMachine> xinming: what parts you are geting more troubles?

[19:35] *** sena_kun left
[19:38] *** stoned75 left
[19:38] *** pmurias joined
[19:39] *** chloekek left
[19:56] <xinming> SmokeMachine: Not much for now, maybe in the future, We may try customized sql function call, customized join

[19:56] <xinming> If customized join doesn't work, I can use view to do that, which is not a big problem ATM.

[19:59] <xinming> Also customized baseclass for ResultSeq

[20:00] <xinming> Maybe different class/role applied to the Row object based on different logic.

[20:02] *** redable left
[20:04] *** gdonald left
[20:06] *** pmurias left
[20:08] *** Doc_Holliwood left
[20:08] *** chloekek joined
[20:10] *** gdonald joined
[20:11] *** wamba joined
[20:13] *** pmurias joined
[20:19] *** xinming left
[20:20] *** xinming joined
[20:20] *** veesh left
[20:20] *** veesh joined
[20:35] <xinming> m: my %h; my %y = %(x => %("a" .. "d")); %h.append(%y<x><a c>:p[], :x); %h.perl.say;

[20:35] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´{:a("b"), :c("d")}‚ê§¬ª

[20:35] <xinming> How can I also append the :x to the %h?

[20:35] <xinming> If I don't want to do it twice

[20:36] <xinming> don't want to append %h twice

[20:36] <xinming> m: my %h; my %y = %(x => %("a" .. "d")); %h.append(%(%y<x><a c>:p, :x)); %h.perl.say;

[20:36] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´{"a\tb c\td" => :x}‚ê§¬ª

[20:37] <xinming> m: my %h; my %y = %(x => %("a" .. "d")); %h.append(%(|(%y<x><a c>:p), :x)); %h.perl.say;

[20:37] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´{:a("b"), :c("d"), :x}‚ê§¬ª

[20:37] <xinming> This one worked, But not perfect.

[20:37] <xinming> Any ideas?

[20:39] <xinming> I don't like the |(),  As it might run out of memory IIRC

[20:42] <timotimo> m: my %h; my %y = %(x => %("a" .. "d")); %h.push(%(|(%y<x><a c>:p), |(:x))); say %h.perl

[20:42] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´{:a("b"), :c("d"), :x}‚ê§¬ª

[20:43] <timotimo> it's not shorter

[20:44] <SmokeMachine> m: my %h; my %y = %(x => %("a" .. "d")); %h = |%y<x>, :x; %h.perl.say

[20:44] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´{:a("b"), :c("d"), :x}‚ê§¬ª

[20:47] <xinming> timotimo: there is |

[20:47] <timotimo> yes, true

[20:47] <xinming> The reason I don't like | is, when you use it with push, It sometimes make program quit directly.

[20:47] <xinming> Before I meet once, IIRC, the array is too large.

[20:48] <xinming> so, I learnt   @array[]   and %xx<>

[20:48] <timotimo> sounds like accidentally trying to expand an infinite sequence

[20:48] <timotimo> or maybe argument lists growing beyond the limit?

[20:50] <xinming> timotimo: yes, arg lists growing beyond the limit

[20:50] <timotimo> ah, yes

[20:58] <vrurg> m: sub DYNAMIC($name) { say "DYN $name"; 42 }; say $*no-var

[20:58] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´DYN $*no-var‚ê§42‚ê§¬ª

[20:58] <vrurg> heh... ;)

[20:59] <vrurg> A solution for the recent weekly.

[21:02] <SmokeMachine> Creating a new file I had a good surprise! :) https://usercontent.irccloud-cdn.com/file/vD82ZRRJ/image.png

[21:03] <SmokeMachine> I didn't know this DYNAMIC sub...

[21:03] <vrurg> SmokeMachine: this is how $* gets resolved.

[21:06] <SmokeMachine> can you belive I got confused by model and module?!! :P

[21:06] <SmokeMachine> m: sub DYNAMIC($name) { say "DYN $name"; 42 }; say $*no-var; my $*yes-var = 42; say $*yes-var

[21:06] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´DYN $*no-var‚ê§Cannot modify an immutable Int (42)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§42‚ê§DYN $*yes-var‚ê§¬ª

[21:06] <SmokeMachine> m: sub DYNAMIC($name) { say "DYN $name"; 42 }; say $*no-var; my $*yes-var = 13; say $*yes-var

[21:06] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´DYN $*no-var‚ê§Cannot modify an immutable Int (42)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§42‚ê§DYN $*yes-var‚ê§¬ª

[21:07] <SmokeMachine> m: sub DYNAMIC($name) is rw { say "DYN $name"; $ //= 42 }; say $*no-var; my $*yes-var = 13; say $*yes-var

[21:07] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´DYN $*no-var‚ê§42‚ê§DYN $*yes-var‚ê§DYN $*yes-var‚ê§13‚ê§¬ª

[21:07] <vrurg> SmokeMachine: oh, easily. Yesterday I was double-fixing a single simple condition. Messing up two similar words? Easily... ;)

[21:08] <vrurg> m: sub DYNAMIC($name) is raw { $ //= 42 }; $*no-var = 1; say $*yes-var

[21:08] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´1‚ê§¬ª

[21:09] <vrurg> m: sub DYNAMIC($name) is raw { state %h; %h{$name} }; $*no-var = 1; say $*yes-var;

[21:09] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´(Any)‚ê§¬ª

[21:24] <SmokeMachine> vrurg: how is the original implementation? Does it leak memory?

[21:25] <vrurg> SmokeMachine: Sure, no. It only lookups for the requested symbols

[21:26] <SmokeMachine> m: sub DYNAMIC($name) is raw { state %h; %h{$name} }; for ^10 { $*no-var .= 1 }; say $*no-var

[21:26] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing required term after infix‚ê§at <tmp>:1‚ê§------> 3e %h; %h{$name} }; for ^10 { $*no-var .=7‚èè5 1 }; say $*no-var‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§¬ª

[21:27] <SmokeMachine> m: sub DYNAMIC($name) is raw { state %h; %h{$name} }; for ^10 { $*no-var ~= 1 }; say $*no-var

[21:27] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´1111111111‚ê§¬ª

[21:28] <SmokeMachine> m: {my $*no-var; for ^10 { $*no-var ~= 1 } }; # is this still storing 1111111111?

[21:28] <camelia> rakudo-moar 7b1977ec8: ( no output )

[21:30] <SmokeMachine> m: sub DYNAMIC(|c) is raw { say c; 1 }; { say $*no-var }; say $*no-var

[21:30] <camelia> rakudo-moar 7b1977ec8: OUTPUT: ¬´\("\$*no-var")‚ê§1‚ê§\("\$*no-var")‚ê§1‚ê§¬ª

[21:31] <vrurg> SmokeMachine: don't actually rely on this. I'm considering changing this and getting rid of the sub, moving the functionality into PseudoStash.

[21:32] <vrurg> I don't feel good about possible accidental redefinition of the sub in a user code.

[21:36] *** pmurias left
[21:38] *** pmurias joined
[21:40] *** wamba left
[21:40] <Geth_> ¬¶ problem-solving: vrurg assigned to jnthn Issue Dynamic symbols resolution via &DYNAMIC is potentially a problem in user code https://github.com/perl6/problem-solving/issues/127

[21:46] <rba> https://raku.org is serving https://github.com/perl6/perl6.org independently NOW. let me know if you find any issues.

[22:04] *** wildtrees left
[22:17] *** pmurias left
[22:19] *** pmurias joined
[23:03] <uzl[m]> m: class A { has $!n = 1; method n { $!n } }; A.new.n.say

[23:03] <camelia> rakudo-moar efd7146c4: OUTPUT: ¬´1‚ê§¬ª

[23:03] <tellable6> 2019-10-15T16:03:09Z #raku <jmerelo> uzl changes are agreed, but not yet deployed. Documentation should reflect what's already there. 

[23:04] <uzl[m]> .tell jmerelo Thanks for letting me know ;-)!

[23:04] <tellable6> uzl[m], I'll pass your message to jmerelo

[23:04] <uzl[m]> m: class A { has $.n = 1; method new { self.bless() } }; A.new.n.say

[23:04] <camelia> rakudo-moar efd7146c4: OUTPUT: ¬´1‚ê§¬ª

[23:09] <uzl[m]> So which one of these shows more intent? The end goal is that I don't want the client to set the attribute during construction.  The first one declares a $! attribute and creates a method of the same name. The second one declares a $. attribute and then overrides the new method so as to avoid the client setting it.

[23:10] <jnthn> Well, the first isn't really possible to circumvent, whereas the second is by the client calling .bless or even .Mu::new(:1n) :)

[23:10] <uzl[m]> I'm inclined to go with the former, at the expense of creating a method that's already provided by Raku, since I don't have to mess with the object construction needlessly.

[23:11] <jnthn> The other option you miss is declaring a `submethod BUILD() { $!n = 1 }`, since BUILD gives complete control of the construction at that inheritance level.

[23:14] <uzl[m]> Yeah, totally forgot about BUILD... ;-)

[23:15] *** pmurias left
[23:15] <uzl[m]> m: class A { has $.n; submethod BUILD() { $!n = 1} }; A.new(n => 5).n.say

[23:15] <camelia> rakudo-moar efd7146c4: OUTPUT: ¬´1‚ê§¬ª

[23:20] <uzl[m]> Oh, great. It seems I wrongly assumed that the BUILD's signature needed to match whatever the bless method's capture is ( (:$n) in this case).

[23:39] *** Kaiepi joined
[23:43] *** gdonald left
[23:47] <Geth_> ¬¶ perl6.org: f37711cb14 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 7 files

[23:47] <Geth_> ¬¶ perl6.org: Initial Raku changes

[23:47] <Geth_> ¬¶ perl6.org: 

[23:47] <Geth_> ¬¶ perl6.org: Now that raku.org no longer redirects, I think it's time to start

[23:47] <Geth_> ¬¶ perl6.org: changing references to Perl¬†6. This is the first pass and I manually

[23:47] <Geth_> ¬¶ perl6.org: corrected just some of the pages. It is a bit hard because there are

[23:47] <Geth_> ¬¶ perl6.org: many different variations (with space, with no space, with unicode

[23:47] <Geth_> ¬¶ perl6.org: nbsp, with html entity), and sometimes it is part of ‚ÄúRakudo Perl¬†6‚Äù,

[23:47] <Geth_> ¬¶ perl6.org: <‚Ä¶commit message has 5 more lines‚Ä¶>

[23:47] <Geth_> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/f37711cb14

[23:47] <AlexDaniel> rba: ‚Üë

[23:48] *** lucasb left
[23:51] <AlexDaniel> rba: https issue here: https://docs.raku.org/

[23:51] <AlexDaniel> wrong certificate

[23:51] <AlexDaniel> rba: same as https://modules.raku.org/ and everything else

[23:52] *** gdonald joined
