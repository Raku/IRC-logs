[00:00] <SmokeMachine> https://colabti.org/irclogger/irclogger_log/raku?date=2019-12-09#l218

[00:01] <SmokeMachine> Am I crazy? What am I understanding wrong?

[00:01] <Xliff> SmokeMachine: ??

[00:02] <Xliff> SmokeMachine: I am talking about having code execute when you do: $a = $r but Role;

[00:02] <Xliff> So code in Role will get executed when it is added to $r via but and assigned to $a;

[00:03] <Xliff> Actually, I am hoping that vrurgs changes to roles will make this possible via TWEAK.

[00:03] <SmokeMachine> m: role R { say “working?” }; say 42 but R

[00:03] <camelia> rakudo-moar 672c5d403: OUTPUT: «working?␤42␤»

[00:04] <SmokeMachine> Xliff: that? ^^

[00:04] <SmokeMachine> Xliff: that? ^^

[00:05] <SmokeMachine> jnthn: what am I miss understanding here??? https://colabti.org/irclogger/irclogger_log/raku?date=2019-12-09#l218

[00:08] <SmokeMachine> That’s not working!

[00:11] *** ellipsis left
[00:16] *** dotdotdot joined
[00:17] <Xliff> SmokeMachine: Oh! .... Hmmm...

[00:17] <Xliff> That.... was not what I was expecting! :)

[00:17] <Xliff> Thanks! I will see if it satisfies my use-case!

[00:18] <Xliff> m: class A { has $!a }; role R { method a { say $!a }; $!a = 42; }; my $a = A.new; $a but R; $a.a

[00:18] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $!a used where no 'self' is available␤at <tmp>:1␤------> 3!a }; role R { method a { say $!a }; $!a7⏏5 = 42; }; my $a = A.new; $a but R; $a.a␤»

[00:19] <Xliff> m: class A { }; role R { has $!a; method a { say $!a }; $!a = 42; }; my $a = A.new; $a but R; $a.a

[00:19] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $!a used where no 'self' is available␤at <tmp>:1␤------> 3e R { has $!a; method a { say $!a }; $!a7⏏5 = 42; }; my $a = A.new; $a but R; $a.a␤»

[00:19] <Xliff> SmokeMachine: ^^

[00:21] <SmokeMachine> 00:18 <Xliff> m: class A { has $.b }; role R { method a { say $.b }; $!a = 42; }; my $a = A.new; $a but R; $a.a

[00:21] <SmokeMachine> m: class A { has $.b }; role R { method a { say $.b }; $!a = 42; }; my $a = A.new; $a but R; $a.a

[00:21] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $!a used where no 'self' is available␤at <tmp>:1␤------> 3.b }; role R { method a { say $.b }; $!a7⏏5 = 42; }; my $a = A.new; $a but R; $a.a␤»

[00:22] <SmokeMachine> Xliff: yes... I don’t think that will work... there is no obj at compose time...

[00:24] <Xliff> SmokeMachine: kk

[00:28] <Xliff> https://www.youtube.com/watch?v=_aCxa-LJyNE&loop=0  -- BREAKBEATS!

[00:55] *** sena_kun left
[01:00] <Demos[m]> what's the best way to implement eval, but controlled?

[01:00] <Demos[m]> like in a subinterpreter with control over scope and interpreter/jit state?

[01:08] <Xliff> Demos[m]: What are you trying to eval?

[01:20] *** finanalyst left
[01:24] *** stoned75 left
[01:38] *** rypervenche left
[01:41] *** rypervenche joined
[02:04] *** wildtrees left
[02:12] *** wamba left
[02:14] *** b2gills left
[02:28] *** ZzZombo joined
[02:29] *** b2gills joined
[02:47] *** ZzZombo_ joined
[02:50] *** ZzZombo left
[02:50] *** ZzZombo_ is now known as ZzZombo

[03:02] *** MasterDuke left
[03:25] *** xinming_ left
[03:27] *** xinming_ joined
[03:56] *** ZzZombo_ joined
[03:57] *** xinming_ left
[04:00] *** ZzZombo left
[04:00] *** xinming_ joined
[04:00] *** ZzZombo_ is now known as ZzZombo

[04:46] *** epony left
[05:04] *** ZzZombo_ joined
[05:07] *** ZzZombo left
[05:07] *** ZzZombo_ is now known as ZzZombo

[05:27] *** epony joined
[05:58] <xinming_> w

[06:04] *** epony left
[06:09] *** epony joined
[06:43] *** jmerelo joined
[07:06] *** Xliff left
[07:30] *** jmerelo left
[07:42] *** rindolf joined
[07:44] <SmokeMachine> Is zostay.com down?

[08:10] <xkr47> m: say Any.HOW, Any.HOW.HOW, Any.HOW.HOW.HOW

[08:10] <camelia> rakudo-moar 672c5d403: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[08:10] <xkr47> bah!

[08:11] <xkr47> if I do them one at a time in REPL I get:

[08:11] <xkr47> Perl6::Metamodel::ClassHOW.new

[08:11] <xkr47> (low-level object `NQPClassHOW`)

[08:11] <xkr47> (low-level object `KnowHOW`)

[08:16] *** wamba joined
[08:45] *** huf left
[08:49] *** xinming_ left
[08:50] *** xinming_ joined
[09:18] *** epony left
[09:23] *** epony joined
[09:52] <jnthn> If you stick .^name on the end of each of those, it'll likely do the same

[09:57] *** finanalyst joined
[10:07] *** kensanata joined
[10:07] *** huf joined
[10:11] *** vividsnow left
[10:37] *** sena_kun joined
[10:40] *** pilne left
[10:40] *** sena_kun left
[10:40] *** sena_kun joined
[10:45] *** vividsnow joined
[10:49] *** sena_kun left
[10:51] *** holyghost left
[10:54] *** chloekek joined
[11:03] <xkr47> jnthn, yeah, I was just poking it with a stick for fun :)

[11:06] <jnthn> :)

[11:06] <jnthn> Also, fun fact: once you reach KnowHOW, it's defined in terms of itself, so you just go in circles. :)

[11:09] *** Guest38485 joined
[12:12] *** epony left
[12:23] *** epony joined
[13:13] *** finanalyst left
[13:20] *** kensanata left
[13:31] *** lucasb joined
[13:47] *** xinming_ left
[13:47] *** xinming_ joined
[13:57] *** mid_laptop joined
[14:03] *** abraxxa left
[14:25] *** wamba left
[14:29] <Kaeipi> releasable6, status

[14:29] <releasable6> Kaeipi, Next release in ≈1 day and ≈4 hours. There are no known blockers. 0 out of 277 commits logged

[14:29] <releasable6> Kaeipi, Details: https://gist.github.com/23a90e80a98c3a5d4d5d686f995747ca

[14:31] *** wamba joined
[14:38] *** sena_kun joined
[15:04] *** kybr_ left
[15:10] *** mid_laptop left
[15:10] *** mid_laptop joined
[15:31] *** kalkin joined
[15:31] <kalkin> hi

[15:41] <kalkin> Do I assume right that Pod parsing is utterly broken?

[15:42] <kalkin> e.g: begin =item

[15:42] <kalkin> foo

[15:42] <kalkin> =end item

[15:42] <kalkin> is parsed as code block

[15:42] <kalkin> instead of named block

[15:42] <kalkin> (I meant of course =begin item)

[15:45] <tadzik> did you mean "=begin item"?

[15:45] <tellable6> 2019-12-17T10:41:30Z #raku-dev <patrickb> tadzik: I brought up the rakudobrew -> rakubrew rename discussion recently: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-12#l170

[15:45] <tellable6> 2019-12-17T10:42:09Z #raku-dev <patrickb> tadzik: I don't want to just decide this over your head. Can you have another look?

[15:45] <tadzik> oh :)

[15:46] <tadzik> tellable6: tell patrickb the rename may be worth it if you're doing the whole rewrite, re-setup, re-marketing etc for the sake of reducing confusion

[15:46] <tellable6> tadzik, I'll pass your message to patrickb

[15:47] <tadzik> tellable6: tell patrickb I really don't think anyone will ever be confused by the name "rakudobrew" realistically, so for that reason I don't think it's worth bothering with. But since you're changing rakudobrew so much and will require all the new setups and whatnot, then rename makes sense imo

[15:47] <tellable6> tadzik, I'll pass your message to patrickb

[15:48] <tadzik> tellable6: tell patrickb kind of like plenv has a different name to perlbrew: they are different projects, incompatible, even though they achieve pretty much the same thing :)

[15:48] <tellable6> tadzik, I'll pass your message to patrickb

[15:51] *** cpan-raku left
[15:52] *** Guest38485 left
[15:54] <kalkin> not item → input

[15:54] *** chloekek left
[15:54] <[Coke]> .seen jjmerelo

[15:54] <tellable6> [Coke], I saw jjmerelo 2019-12-19T17:43:34Z in #raku: <jmerelo> Today the third country sending more visitors is Vietnam

[15:54] <kalkin> sorry for mixup

[15:55] <kalkin> also if Pod::Block::Code is the right one for =begin input, why don't it have a type attribute, so I can decide how to display it

[15:56] <kalkin> Reading older code i see that there was a type attribute on Pod::Block::Named

[15:59] *** cpan-raku joined
[15:59] *** cpan-raku left
[15:59] *** cpan-raku joined
[16:00] <tadzik> https://github.com/perl6/roast/blob/master/S26-documentation/01-delimited.t#L15 if these tests are not broken yet then it absolutely shouldn't give you ::Code

[16:01] <tadzik> but tbh the last time I dealt with this was around the time these tests were written ;)

[16:01] <tadzik> I'd be surprised if the word "input" somehow made it special though

[16:09] <kalkin> tadzik: well i have some code testing it and it returns Block::Code, also reading Grammar.nqp there is this line:  token pod-delim-code-typ { code | input | output }

[16:10] <tadzik> huh

[16:10] <tadzik> that's not me then anymore, must've been someone else :P

[16:11] <tadzik> I can see the logic, I think: I guess it's supposed to mean "expected input/output for this thing", which you'd want rendered verbatim I guess

[16:13] <kalkin> also another bug, which is not covered with roast

[16:13] <kalkin> sub foo($asd #= asasd,

[16:14] <kalkin> $bar #= "asd")

[16:14] <kalkin> doesn't work

[16:14] <tadzik> I think the comma should come before the comment

[16:14] <kalkin> I don't remember exactly what, i think $pod.content[0].defined but $pod.content[1].undefined

[16:14] <kalkin> tadzik: yes comma before

[16:14] <kalkin> just my sloppy typing

[16:15] <tadzik> nod nod

[16:15] <kalkin> I'm not sure how to handle the last bug i shown. Should I add a roast test and do a PR? Open an issue with rakudo/rakudo?

[16:17] <kalkin> Ohh and also in current stable rakudo, this is broken:

[16:17] <kalkin> +sub so-many-params-with-trailers(

[16:17] <kalkin> +    Str $param, #= first param

[16:17] <kalkin> +    Int $other-param, #= second param

[16:17] <kalkin> +    Str $third-param

[16:17] <kalkin> +) {}

[16:18] <kalkin> the second param is undefined

[16:18] <kalkin> but in master it works

[16:19] *** Kaeipi left
[16:19] *** Kaeipi joined
[16:34] *** socomm joined
[16:36] <kalkin> so for the last one I opened a PR https://github.com/perl6/roast/pull/602

[16:38] *** sena_kun left
[16:41] *** rindolf left
[16:46] *** rindolf joined
[16:51] <kalkin> I had the chat more lively in memory. Is it because of the holidays?

[16:53] *** sena_kun joined
[16:56] <socomm> I upgraded perl recently and the repl changed.

[16:57] *** socomm left
[17:01] *** vividsnow left
[17:02] *** vividsnow joined
[17:03] *** no-n joined
[17:06] *** xinming_ left
[17:08] *** xinming_ joined
[17:13] <tadzik> kalkin: probably :)

[17:36] *** kalkin left
[17:36] *** finanalyst joined
[17:37] *** kalkin joined
[17:54] <kalkin> And another bug in Pod parsing submitted

[18:04] *** stoned75 joined
[18:11] <kalkin> All the Pod6 stuff is pretty broken. I seriously questioning if no one writes a elaborate pod docs or views them in p6doc?

[18:11] <kalkin> Some things are very simple to fix, once you spotted that they are actually not rendered by p6doc

[18:16] <[Coke]> We use it to generate our own doc web site, but I think that is the biggest use case

[18:20] <kalkin> [Coke]: you probably only use named blocks

[18:20] <kalkin> Once you start working with leading & trailing pod it breaks

[18:22] <[Coke]> Thanks for finding bugs; I know it's frustrating, but having them documented will help get 'em fixed.

[18:22] *** wamba left
[18:23] <kalkin> [Coke]: The parts which I can fix in Pod::To::Text I'm already fixing, just need people to review my PRs 

[18:23] <kalkin> I made two for displaying subsets and enums, third one will be online in a few minutes

[18:29] *** ptrd joined
[18:32] <ptrd> I have this has declaration my %h = 1 => [2,3], 4 => [2,8], 5 => [3,8,2];

[18:32] <ptrd> I'd like to include the type of %h in its declaration

[18:32] <ptrd> what can that be?

[18:32] <ptrd> *this hash declaration

[18:34] *** AlexDaniel left
[18:35] <kalkin> my Array %h = 1 => [2,3]

[18:35] <kalkin> but my Array[Int] %h = 1 => [2,3] doesnt work

[18:35] <ptrd> Let suppose I have my %h = 1 => ['a', 'b'], 2=> ['c', 'd'];

[18:36] <kalkin> p6: my Array[Int] %h =  1 => [2,3], 4 => [2,8], 5 => [3,8,2]

[18:36] <camelia> rakudo-moar 672c5d403: OUTPUT: «Type check failed in assignment to %h; expected Array[Int] but got Array ($[2, 3])␤  in block <unit> at <tmp> line 1␤␤»

[18:36] <ptrd> what is the strongest possible type declaration for %h ?

[18:37] <kalkin> I'm pretty sure there should be a way to declare Array[Int] %h somehow

[18:38] *** sena_kun left
[18:40] <guifa> ptrd: ValueType %hash{KeyType}

[18:40] <guifa> err

[18:41] <guifa> so your definition is fine

[18:41] <guifa> The problem is that the literal [2,3] is not an Array[Int]

[18:41] <guifa> Rather it’s an Array[Any] 

[18:42] <guifa> p6: my Array[Int] %h =  1 => Array[Int].new(2,3), 4 => Array[Int].new(2,8), 5 => Array[Int].new(3,8,2)

[18:42] <camelia> rakudo-moar 672c5d403: ( no output )

[18:42] <guifa> p6: my Array[Int] %h =  1 => Array[Int].new(2,3), 4 => Array[Int].new(2,8), 5 => Array[Int].new(3,8,2); say %h

[18:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «{1 => [2 3], 4 => [2 8], 5 => [3 8 2]}␤»

[18:43] <guifa> Strong typing can be annoying sometimes like that, and sometimes subsets can be easier:

[18:44] <guifa> p6: subset IntArray is Array where *.all ~~ Int; my IntArray %h = 1 => [2,3], 4 => [2,8], 5 => [3,8,2]; say %h

[18:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such method 'add_parent' for invocant of type 'Perl6::Metamodel::SubsetHOW'␤at <tmp>:1␤»

[18:44] <guifa> p6: subset IntArray of Array where *.all ~~ Int; my IntArray %h = 1 => [2,3], 4 => [2,8], 5 => [3,8,2]; say %h

[18:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «Type check failed in assignment to %h; expected IntArray but got Array ($[2, 3])␤  in block <unit> at <tmp> line 1␤␤»

[18:45] <guifa> hmmm

[18:46] <guifa> p6: subset IntArray where { $_ ~~ Array && .all ~~ Int}; my IntArray %h = 1 => [2,3], 4 => [2,8], 5 => [3,8,2]; say %h

[18:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «{1 => [2 3], 4 => [2 8], 5 => [3 8 2]}␤»

[18:46] <guifa> there we go

[18:46] * guifa needs his coffee

[18:47] <kalkin> p6: class F { method g(--> Str:D) {}}; my $f = F.new; my &g = $f.g; say &g.returns;

[18:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Mu)␤»

[18:47] <kalkin> p6: sub g(-->Str:D) {}; &g.returns

[18:47] <camelia> rakudo-moar 672c5d403: ( no output )

[18:47] <kalkin> p6: sub g(-->Str:D) {}; say &g.returns

[18:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Str:D)␤»

[18:47] <guifa> kalkin: I know a lot of the leading and trailing pod hasn’t really had much work done on it.  The most recent bit was done by tbrowder to allow for embedded stuff/newlines, but I don’t think as many people are using them.

[18:48] <kalkin> Why does a returns on a method return Mu while on the sub the actual return type

[18:48] <kalkin> Bug or feature?

[18:49] <kalkin> This breaks my pr: https://github.com/rakudo/rakudo/pull/3369/

[18:49] *** ptrd left
[18:50] <guifa> p6: class F { method g(--> Str:D) {}}; say F.g.returns

[18:50] <camelia> rakudo-moar 672c5d403: OUTPUT: «Nil␤»

[18:50] <guifa> err duh

[18:51] <guifa> kalkin: very much feature

[18:51] <guifa> p6: class F { method g(--> Str:D) {}}; my $f = F.new; my &g = $f.^find_method('g'); say &g.returns;

[18:51] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Str:D)␤»

[18:52] <guifa> $f.g is actually calling g

[18:52] <guifa> so it’s an empty result

[18:52] *** sena_kun joined
[18:52] <guifa> The bug seems to be allowing the assignment to &g

[18:53] <kalkin> p6: class F { method g(--> Str:D) {}}; say F.g.signature;

[18:53] <camelia> rakudo-moar 672c5d403: OUTPUT: «Nil␤»

[18:54] <guifa> p6: class F { method g(--> Str:D) {}}; say F.^find_method('g').signature

[18:54] <camelia> rakudo-moar 672c5d403: OUTPUT: «(F: *%_ --> Str:D)␤»

[18:54] <kalkin> guifa: but in my pr I get the method from $pod.WHEREFORE so it shouldn't be called it should be callable(??) i think

[18:55] <kalkin> I also tried $pod.WHEREFORE.signature.returns

[18:55] <kalkin> p6: class F { method g(--> Str:D) {}}; say F.^find_method('g').signature.returns

[18:55] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Str:D)␤»

[18:57] *** wildtrees joined
[18:57] <kalkin> https://github.com/rakudo/rakudo/pull/3369/commits/130ccbf07c66ae7c6481b57ac360ae681658f6b8#diff-a580ffcdf157cfc4d6f0688ab956848dL85-R91

[18:57] <kalkin> lines 85-91

[18:58] <kalkin> replacing $_.returns with $_.signature.returns also returns Mu

[19:01] *** kybr_ joined
[19:03] <kalkin> also ^find.method is not a solution if it's a multi

[19:05] *** ptrd joined
[19:06] <guifa> hmm that’s odd indeed

[19:09] <guifa> It should work AFAICT https://tio.run/##K0gtyjH7/z85J7G4WMFRoVqBS0FBuUbBCUjlppZk5KcoJGno6topBJcUWbloAuWVkpUUarlqrbm4cisVVMoVbBUc9eLSMvNS4iHqNdST1DX1wj0igSrSM8tS84CKgFzXIFc3/yBXoAHlGUAxX4jZ1QrFiZUKesWZ6XmJJaVFqXpFqUAqr1ihVqH2/38A

[19:11] <ptrd> does it work on your computer with version 2019.03 ?

[19:12] <kalkin> will try

[19:13] <guifa> ptrd: did you see my message about parameterized stuff? (your connection died on timeout so wanted to make sure you got it)

[19:14] <ptrd> you mean where you posted "It should work AFAICT https: ..."

[19:14] <ptrd> yes I got it

[19:14] <guifa> no

[19:14] <ptrd> in that case I lost it

[19:15] <guifa> Let suppose I have my %h = 1 => ['a', 'b'], 2=> ['c', 'd'];

[19:15] <guifa> from that message

[19:15] <ptrd> yes

[19:16] <guifa> You have two options.  If you paramterize the values, e.g. Array[Int] %h = … then you have to make sure that you give it typed values.  Literal arrays made with […] are always Array[Any], so

[19:16] <kalkin> guifa: will take some time, need to rebuild rakudo + moarvm + nqp

[19:16] <guifa> p6: my Array[Int] %h =  1 => Array[Int].new(2,3), 4 => Array[Int].new(2,8), 5 => Array[Int].new(3,8,2); say %h

[19:16] <camelia> rakudo-moar 672c5d403: OUTPUT: «{1 => [2 3], 4 => [2 8], 5 => [3 8 2]}␤»

[19:17] <guifa> Second option which requires less typing out and is probs more intuitive generally is to use a subset which will let you still use literal arrays 

[19:18] <guifa> p6: subset IntArray of Array where .all ~~ Int; my IntArray %h = 1 => [2,3], 4 => [2,8], 5 => [3,8,2]; say %h

[19:18] <camelia> rakudo-moar 672c5d403: OUTPUT: «{1 => [2 3], 4 => [2 8], 5 => [3 8 2]}␤»

[19:19] <ptrd> ok, I think I understand now why Array[Int].new is needed before the value

[19:20] <ptrd> thanks

[19:21] <Kaeipi> oh this problem!

[19:22] <Kaeipi> i use it in the synopsis for Kind::Subset::Parametric https://modules.raku.org/dist/Kind::Subset::Parametric:cpan:KAIEPI

[19:23] <ptrd> is there a link you can post with examples of advanced type declarations

[19:24] <ptrd> or with examples of at least nontrivial type declarations

[19:24] <guifa> I don’t think there’s a great one-stop-shop for that.  We should probably do that actually.  Parameterizing hashes is kind of hidden in the hash page

[19:24] <kalkin> guifa: does not work on rakduo-2019.03.1

[19:25] <guifa> oh crap, apparently I’m running on 2018.12 on my desktop

[19:25] * guifa should have done --version before testing

[19:25] <Kaeipi> ptrd, https://modules.raku.org/dist/Kind::Subset::Parametric:cpan:KAIEPI/t/02-will.t shows a few simpler examples

[19:25] <guifa> Sorry for wasting your cycles :(

[19:26] <Kaeipi> oh mb misread

[19:26] <kalkin> guifa: Gentoo user here. I'm used to this :)

[19:27] <kalkin> guifa: just to make sure I will rebuild 2018.12 and test it. May be it's my setup´s fault (Which i doubt, but you never know).

[19:30] <Kaeipi> which sort of type are you looking to do advanced stuff with ptrd ?

[19:31] *** sauvin left
[19:33] <ptrd> I just like strong typing, that means less debugging 

[19:34] <ptrd> or debugging closer to the location of the error

[19:34] <Kaeipi> you might be interested in this, which shows off how to make classes parametric https://stackoverflow.com/questions/57554660/how-can-classes-be-made-parametric-in-perl-6?noredirect=1&lq=1

[19:34] <Kaeipi> it's how i wrote my Failable and Kind libraries

[19:37] <kalkin> guifa: I think I found the issue. It's not the version

[19:37] <kalkin> let me rebuild the current master

[19:37] <kalkin> or no i do not even need this

[19:38] <guifa> Kaeipi: Maybe if I get chance I could write a Strongly Typing Raku Code page.  There are definitely a couple of gotchas, and it could include mentions of Subsets, :D/:U, parameterization, etc

[19:40] <kalkin> https://github.com/rakudo/rakudo/pull/3369/commits/130ccbf07c66ae7c6481b57ac360ae681658f6b8#diff-a580ffcdf157cfc4d6f0688ab956848dR118 ← this line is an issue, but only on methods

[19:40] <Kaeipi> that would be helpful guifa 

[19:40] <kalkin> If I remove the $returns !~~ Mu I get Str:D on a method

[19:40] <Kaeipi> i've been chipping away at documenting the MOP so people can know about the behaviour that drives types in raku

[19:40] <kalkin> but on a sub it works even with the check

[19:41] <kalkin> this is weird

[19:41] <guifa> oooh waaaait makes total sense now

[19:42] <guifa> for $returns !~~ Mu it’d have to be … I dunno, some very unique type

[19:42] <guifa> because $returns will always by definition be Mu

[19:42] <guifa> even Nil is Mu

[19:44] <lizmat> perhaps make a lexically visible constant that is Mu.new

[19:44] <lizmat> and check for =:=

[19:44] <lizmat> alternately, make it a multi?

[19:44] <kalkin> no it doesnt

[19:44] <kalkin> hmm

[19:44] <kalkin> lizmat: will try thanks

[19:45] <kalkin> it doesn't work on subs. it worked as I checked for !~~ Nil

[19:50] *** ptrd left
[19:50] <kalkin> lizmat: you mean something like this: constant $mu = Mu.new; unless $returns =:= Mu { ... } ?

[19:50] *** Scimon joined
[19:50] <lizmat> yeah, something like that ?

[19:50] <Scimon> Evening all. 

[19:51] <tbrowder> guifa: in the discussion with kalkin do you see a problem caused by my pod declarator and embedded pod changes?

[19:51] <Scimon> There was this question on Stack Overflow and I am wandering if chaining works the way I think : https://stackoverflow.com/questions/59399554/reduction-meta-operator-inconsistency/59399943

[19:52] <lizmat> m: constant A = Mu.new; sub a(Mu \a = A) { dd a =:= A }; a; a Nil    # kalkin

[19:52] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::True␤Bool::False␤»

[19:52] <Scimon> m: sub infix:<eog> ( $a,  $b ) is assoc<chain> is pure { note $a, $b; so $a == $b+1 };say 5 eog 4 eog 3 eog 2 eog 1;

[19:52] <camelia> rakudo-moar 672c5d403: OUTPUT: «21␤False␤3True␤4False␤5False␤»

[19:52] <guifa> tbrowder: I don’t think so, I think kalkin’s stuff is unrelated, was just mentioning you because you had recently done some work to boost up the pre/post declarators’s functionality, but otherwise I think the pre/post declarators aren’t used very much ATM

[19:53] <Scimon> Opps. Without the notes

[19:53] <Scimon> m: sub infix:<eog> ( $a,  $b ) is assoc<chain> is pure { so $a == $b+1 };say 5 eog 4 eog 3 eog 2 eog 1

[19:53] <camelia> rakudo-moar 672c5d403: OUTPUT: «False␤»

[19:54] <Scimon> From the documentation on what is assoc<chain> says I'd expect that to work

[19:55] <Scimon> m: sub infix:<eog> ( $a,  $b ) is assoc<chain> is pure { so $a == $b+1 };say 5 eog 4 eog 3 eog 2 eog 1;say ( (5 eog 4) and (4 eog 3) and (3 eog 2) and (2 eog 1) );

[19:55] <camelia> rakudo-moar 672c5d403: OUTPUT: «False␤True␤»

[19:56] <tbrowder> if someone can show me how to add an option to raku, i think i could really help with at least the leading declarator block. at the moment, one has to declare an environment variable. but with a raku option you could retain user formatting which imho could really be useful. 

[19:56] <Scimon> (As for PRE and POST blocks I think there biggest issue is the docs don't really highlight what they are there for.)

[19:56] <Scimon> (Going to read the history)

[19:58] <tbrowder> Scimon: look at S26

[19:58] <guifa> Scimon: biggest current use is on attributes on a MAIN function, 

[19:59] *** ufobat__ joined
[20:02] <kalkin> p6: constant A = Mu.new; sub a(Mu \a = A) { dd \a =:= A }; sub f() {}; a &f; # lizmat

[20:02] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::False␤»

[20:02] <guifa> Scimon: this reveals the problem

[20:03] <guifa> sub infix:<eog> ( $a, $b ) is assoc<chain> is pure { say "$a = $b + 1? ", (so $a == $b+1); (so $a == $b+1) }; say 5 eog 4 eog 3 eog 2 eog 1

[20:03] <evalable6> guifa, rakudo-moar db6579830: OUTPUT: «2 = 1 + 1? True␤3 = True + 1? False␤4 = False + 1? False␤5 = False + 1? False␤False␤»

[20:03] *** ufobat_ left
[20:03] <kalkin> ups

[20:03] <guifa> It’s being treated with left assoc

[20:04] <kalkin> p6: constant A = Mu.new; sub a(Mu \a = A) { dd \a =:= A }; sub f() {}; a &f.returns; # lizmat this one is the counter example

[20:04] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::False␤»

[20:04] <Scimon> Yeah... So... I should check if there's an issue?

[20:04] <kalkin> It should be Bool::True

[20:05] <lizmat> m: constant A = Mu.new; sub a(Mu \a = A) { dd \a =:= A }; sub f(--> Nil) {}; a &f.returns;

[20:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::False␤»

[20:05] <lizmat> m: sub f() {}; dd &f.returns;

[20:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «Mu␤»

[20:05] <guifa> Scimon: I think there is.  I tried changing it to is assoc(‘right’) and nothing changes in order of ops, which of course makes no sense because it should be exactly backwards

[20:06] <lizmat> kalkin: why should that be true?  You're passing a parameter, so by definition it's going to be False

[20:06] <kalkin> lizmat: i want to print the return type of a function if the function is defined to return anything

[20:06] <lizmat> then you should check for =:= Mu I think

[20:07] <lizmat> m: sub a() {}; dd &a.returns

[20:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «Mu␤»

[20:07] <kalkin> lizmat: doesn't work either

[20:08] <kalkin> p6: constant A = Mu.new; sub a(Mu \a = A) { dd \a =:= Mu }; sub f() {}; a &f.returns;

[20:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::False␤»

[20:08] <lizmat> m: sub a(Mu \a) { dd a =:= Mu }; sub b() {}; a &b.returns

[20:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::True␤»

[20:09] <kalkin> m: sub a(Mu \a) { dd a =:= Mu }; sub b(--> Str:D) {}; a &b.returns

[20:09] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::False␤»

[20:09] <kalkin> nice!

[20:09] <Scimon> Is nqp strict? 

[20:09] <lizmat> Scimon: yes, afaik

[20:09] <lizmat> kalkin: you don't need the Mu.new rigamarole

[20:09] <lizmat> I misunderstood your issue

[20:10] <kalkin> lizmat: Thank you very much now it works!

[20:10] <lizmat> and "dd a" is something else then "dd \a"  :-)

[20:10] <Scimon> Reading https://github.com/rakudo/rakudo/blob/3f699e26f6629349dc8ef64c2b64c96b33f718a3/src/core.c/Rakudo/Metaops.pm6 trying to work out if that's the code that's supposed to handle it.

[20:10] <kalkin> One more question why doesn't it work if I define sub a (Mu $a) ?

[20:11] <lizmat> kalkin: using $a in the signature, will create a container, and that will thwart the check with =:=

[20:11] <lizmat> m: sub a(Mu $a) { dd $a<> =:= Mu }; sub b() {}; a &b.returns    # unless you decont

[20:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «Bool::True␤»

[20:11] <lizmat> I prefer the \a in signature

[20:13] <kalkin> lizmat: I think i will use decont, because in this specific case the arguments is named $returns, which surprisingly works with \returns, but is confusing when used with syntax highlighting

[20:14] <lizmat> sure...  :-)

[20:14] *** pilne joined
[20:16] <kalkin> tbrowder: this are the issues with trailing/leading pod https://github.com/rakudo/rakudo/issues/3368 & https://github.com/rakudo/rakudo/issues/3367

[20:16] <kalkin> (if you are interested)

[20:17] <guifa> Scimon: the Metaops.pm6 looks fine.  My guess is the problem is somewhere it’s ignoring the chain/right definitions, because I tried “non” and that worked, ditto for left.

[20:17] <Scimon> So is assoc<list> works because it tries to match against a sub expecting all the values or a slurpy.

[20:18] *** benjif_ is now known as benjif

[20:20] <guifa> if assoc<list> works, you could probably cheat by writing the chaining code yourself.  But there is definitely a bug somewhere

[20:21] <Scimon> Yeah... that's why I thought. I'll raise an issue (or see if there already is one)

[20:25] *** mid_laptop left
[20:26] *** rindolf left
[20:27] <Scimon> https://github.com/rakudo/rakudo/issues/3370

[20:28] <Scimon> (Feeling crappy, signing off, have a happy holiday if I'm not around for a bit)

[20:29] <guifa> Scimon: hope you feel better!

[20:39] <kalkin> =begin input is it a Pod::Block::Named or Pod::Block::Code? Rakudo thinks it Code, but reading old code shows that at some point it was a Named

[20:39] *** sena_kun left
[20:40] *** rindolf joined
[20:41] <kalkin> Currently there is no way to distinguish between code, input & output, when rendering Pod

[20:41] <[Coke]> been a while. how to define a sub that you can then call without parens?

[20:43] *** kalkin left
[20:43] *** kalkin joined
[20:44] <kalkin> [Coke]: Hmm not sure if i understand. Do I miss some part of the syntax? Where is the difference in parsing between =begin Asd & =begin input?

[20:46] <lizmat> :w

[20:52] <[Coke]> kalkin: My question was separate.

[20:52] <[Coke]> I don't know the answer to your POD question, sorry

[20:53] *** sena_kun joined
[20:54] *** kalkin left
[20:54] *** kalkin joined
[20:59] *** benjif left
[20:59] <[Coke]> trying to make a lib that I can run using the REPL where I can do things like THING 1 2 3 and have it be parsed like THING(1,2,3). Any suggestionS?

[21:00] <[Coke]> do I need to make a slang?

[21:02] <lizmat> I think so

[21:02] *** benjif joined
[21:03] <[Coke]> do we have docs on that?

[21:03] <[Coke]> don't see anything obvious on the doc site

[21:07] *** kalkin left
[21:11] *** brass left
[21:12] *** brass joined
[21:15] <tbrowder> kalkin: i am interested, but i also know the trailing pod declarator grammar is very tricky for my skill level, so i'm reluctant at the moment to take it on. but i'll see after i get my development version working again after all the configuration changes!

[21:15] <tellable6> tbrowder, I'll pass your message to kalkin

[21:16] *** kalkin joined
[21:17] <tbrowder> [Coke]: i submitted an issue for someone to give some doc help on making and using a slang. looks like two votes now? or can you add the doc?

[21:18] <[Coke]> are you asking me to *write* it?

[21:18] <[Coke]> because I don't know how to do it.

[21:18] <tbrowder> if you can, or nudge someone who can

[21:19] <[Coke]> ... I don't know how to do it. if I knew who to nudge, I'd ask them how to do it.

[21:19] <[Coke]> Sorry

[21:22] <tbrowder> i think lizmat can. also nine. of course jnthn

[21:22] <lizmat> I've always used Slang::Tuxic and Slang::Piersing as examples

[21:23] <lizmat> and attempts to create one for some P5 related stuff, have failed so far  :-(

[21:25] <[Coke]> thank you, I'll look at those modules.

[21:26] <[Coke]> yup, that's too complicated for the small thing I'm trying to do. I'll just skip the full REPL and make my own, I think.

[21:26] <[Coke]> but first, more MTGA.

[21:27] *** Scimon left
[21:31] *** mensvaga left
[21:41] *** rindolf left
[21:41] <kalkin> p6doc Str returns no such type Str

[21:41] <tellable6> hey kalkin, you have a message: https://gist.github.com/b1fb18e65a10f5190c77af498479dbe3

[21:41] <kalkin> type Str the same

[21:42] <kalkin> p6doc type/Str seems also not to work

[21:42] <kalkin> tbrowder: same here. I looked into Grammar.nqp and it's complicated

[21:45] <tbrowder> but it looks like it's fixed with the current master branch

[21:45] <tbrowder> my pod stuff wasn't in 2019.11

[21:52] <kalkin> tbrowder: yes, the issue for which I did the roast pr, but there are other things too

[22:07] *** Kaeipi left
[22:08] *** Kaiepi joined
[22:34] *** AlexDaniel joined
[22:34] *** AlexDaniel left
[22:34] *** AlexDaniel joined
[22:39] *** sena_kun left
[22:53] *** sena_kun joined
[23:03] <guifa> <[Coke]>: take a look at the inline SQL library

[23:04] <guifa> I think it’ll work to show you what you want.  It returns the result of sql code and defines its syntax as ‘sql’ <sql-code> ‘;’ or something or another 

[23:49] *** benjif left
