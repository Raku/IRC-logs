[00:02] *** Kaiepi left
[00:03] *** Kaiepi joined
[00:05] *** wildtrees left
[00:16] *** warriors joined
[00:35] <squashable6> 🍕 vrurg++ wrote a comment on “Add support for .rakumod extension”: https://github.com/rakudo/rakudo/pull/3246#issuecomment-544024841

[00:40] *** go|dfish left
[00:43] *** lelf left
[01:00] *** lucasb left
[01:06] <squashable6> 🍕 tony-o++ wrote a comment on “Add support for .rakumod extension”: https://github.com/rakudo/rakudo/pull/3246#issuecomment-544033699

[01:06] <squashable6> 🍕🍕🍕  First contribution by tony-o++! ♥

[01:36] <AlexDaniel> “The password you entered is too long.”

[01:36] <AlexDaniel> yeah… right :'(

[01:37] <AlexDaniel> it was just 64 symbols

[01:37] <AlexDaniel> ah, 25 max, nice!

[02:02] *** benjif left
[02:02] *** benjif joined
[02:09] *** rindolf3 joined
[02:09] <rindolf3> hi all, sup?

[02:10] <rindolf3> i've been up all night

[02:10] <rindolf3> chatting and scheming

[02:29] <guifa> Ugh… I can’t seem to get an indirect reference to work to avoid cyclic compile problems =\  Looks like I’m going to just have to combine everything into one big mega class file =\

[02:37] <rindolf3> guifa: ah :(

[02:58] *** benjif left
[03:09] <squashable6> 🍕 vrurg++ opened pull request “Add --force-rebuild command line option”: https://github.com/rakudo/rakudo/pull/3248

[03:10] <squashable6> 🍕 vrurg++ edited pull request “Add --force-rebuild command line option”: https://github.com/rakudo/rakudo/pull/3248

[03:10] *** benjif joined
[03:11] <squashable6> 🍕 vrurg++ requested a review on pull request “Add --force-rebuild command line option”: https://github.com/rakudo/rakudo/pull/3248

[03:11] <squashable6> 🍕 vrurg++ requested a review on pull request “Add --force-rebuild command line option”: https://github.com/rakudo/rakudo/pull/3248

[03:53] *** marcusr left
[03:54] *** marcusr joined
[04:13] *** cinch_ joined
[04:14] *** cinch left
[04:21] <discord6> <Aearnus> there's a hackathon happening at uni this weekend, I've been racking my brain for Raku ideas haha

[05:16] *** leonardus joined
[05:16] <leonardus> hi

[05:27] <rindolf3> leonardus: meow

[05:30] *** warriors left
[05:31] *** go|dfish joined
[05:34] *** delimited joined
[05:41] *** go|dfish left
[05:48] *** delimited left
[05:48] *** delimited joined
[05:56] *** delimited left
[05:57] *** delimited joined
[06:33] *** sena_kun joined
[06:47] <squashable6> 🍕 Altai-man++ opened pull request “Test fake-infix adverbs on a construct”: https://github.com/perl6/roast/pull/588

[06:48] <squashable6> 🍕 niner++ wrote a comment on “Add support for .rakumod extension”: https://github.com/rakudo/rakudo/pull/3246#issuecomment-544108210

[06:55] *** benjif left
[06:56] *** benjif joined
[07:05] *** benjif left
[07:11] <squashable6> 🍕 Altai-man++ opened pull request “Test return constraints for role implementors”: https://github.com/rakudo/rakudo/pull/3249

[07:27] <Geth> ¦ doc/master: 4 commits pushed by Altai-man++, (Juan Julián Merelo Guervós)++

[07:27] <Geth> ¦ doc/master: a24093fc8c | Remove redundant newline

[07:27] <Geth> ¦ doc/master: 09016b78a0 | Document %?RESOURCES

[07:27] <Geth> ¦ doc/master: 44f2cf489c | Thinko

[07:27] <Geth> ¦ doc/master: 44903fd418 | Merge pull request #3065 from perl6/document-resources

[07:27] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/6a5cebe7e618...44903fd41890

[07:35] *** sena_kun left
[07:37] *** pmurias joined
[07:58] <squashable6> 🍕 jonathanstowe++ wrote a comment on “Add support for .rakumod extension”: https://github.com/rakudo/rakudo/pull/3246#issuecomment-544112654

[07:58] <squashable6> 🍕🍕🍕  First contribution by jonathanstowe++! ♥

[08:05] *** go|dfish joined
[08:16] *** chloekek joined
[08:42] *** pmurias left
[08:51] *** pat_js joined
[08:52] <pat_js> hi I was wondering why √ is not defined in my perl6

[08:53] <pat_js> p6: say √9

[08:53] <camelia> rakudo-moar e45bb3418: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 √9␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5√9␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤      …»

[08:56] *** cpan-raku left
[08:57] *** cpan-raku joined
[08:57] *** cpan-raku left
[08:57] *** cpan-raku joined
[08:58] *** go|dfish left
[09:02] <AlexDaniel> squashable6: status

[09:02] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in 1 day and ≈2 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:02] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/36b06aa519b04b2b25ec472abd46c1a0

[09:03] <AlexDaniel> pat_js: https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII#---2

[09:05] <pat_js> AlexDaniel: Thank you, I did not know that wiki page (tbh. I haven't ever been here, was lurking a lot in the old #perl6 quite a while)

[09:06] <AlexDaniel> pat_js: yeah, I try to keep all unicode ideas in the same place :)

[09:07] <AlexDaniel> also, on top of the page there's some criteria for adding new ops

[09:07] <AlexDaniel> √ satisfies ① but nothing else

[09:08] <AlexDaniel> arguably most mathy ops do only that

[09:08] <AlexDaniel> greppable6: sqrt

[09:08] <greppable6> AlexDaniel, 353 lines, 54 modules: https://gist.github.com/a0ff4f141cdc746f9610d84e7fb62e14

[09:12] <AlexDaniel> now why is the output broken…

[09:14] *** pmurias joined
[09:19] <AlexDaniel> ok, it's because of this: https://gist.github.com/Whateverable/a0ff4f141cdc746f9610d84e7fb62e14#file-result-md-L151-L152

[09:19] <AlexDaniel> now how did that happen…

[09:31] <AlexDaniel> ah! Found it

[09:42] *** pmurias left
[09:55] <chloekek> I used √ as an infix operator in Haskell once.

[09:56] <chloekek> p6: sub infix:<√>($x, $y) { $y ** (1 / $x) }; say 2 √ 9; say 3 √ 125;

[09:56] <camelia> rakudo-moar e45bb3418: OUTPUT: «3␤4.999999999999999␤»

[09:57] <chloekek> But then again I've also used bookmαrk instead of bookmark as an identifier to avoid a shadowing warning.

[10:11] <Geth> ¦ whateverable: 9ac71dca89 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Greppable.p6

[10:11] <Geth> ¦ whateverable: Make greppable not choke on \r\n

[10:11] <Geth> ¦ whateverable: 

[10:11] <Geth> ¦ whateverable: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-10-19#l50

[10:11] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/9ac71dca89

[10:12] *** greppable6 left
[10:14] *** greppable6 joined
[10:14] <AlexDaniel> greppable6: sqrt

[10:14] <greppable6> AlexDaniel, 359 lines, 54 modules: https://gist.github.com/1d8f93deb8bc5af9388c0aec03074e67

[10:14] <AlexDaniel> yaay

[10:24] *** sena_kun joined
[10:34] <cpan-raku> New module released to CPAN! Inline::Perl5 (0.42) by 03NINE

[11:07] *** lelf joined
[11:09] <lelf> p6: with [[1],[2,3]] {say gather {.permutations».take for $_}; say gather {(.take for .permutations) for $_}}

[11:09] <camelia> rakudo-moar e45bb3418: OUTPUT: «(1 2 3 3 2)␤((1) (2 3) (3 2))␤»

[11:09] <lelf> ^ why results are different?

[11:13] <sena_kun> m: [1,2].permutations>>.say; .say for [1,2].permutations;

[11:13] <camelia> rakudo-moar e45bb3418: OUTPUT: «1␤2␤2␤1␤(1 2)␤(2 1)␤»

[11:14] <sena_kun> a golf, though I don't have an idea why they are different

[11:16] <sena_kun> m: say ((1, 2), (2, 1))>>.say;

[11:16] <camelia> rakudo-moar e45bb3418: OUTPUT: «1␤2␤2␤1␤((True True) (True True))␤»

[11:16] <sena_kun> m: say ((1, 2), (2, 1))>>.say; .say for ((1, 2), (2, 1));

[11:16] <camelia> rakudo-moar e45bb3418: OUTPUT: «1␤2␤2␤1␤((True True) (True True))␤(1 2)␤(2 1)␤»

[11:26] *** chloekek left
[11:38] <fingolfin3> Hello! Would you like to enable math signs support ∧ and ∨ with ASCII equivalents && and || ?

[11:44] *** chloekek joined
[11:48] <sena_kun> squashable6, status

[11:48] <squashable6> sena_kun, 🍕🍕 SQUASHathon is in progress! The end of the event in 1 day and ≈0 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:48] <squashable6> sena_kun, Log and stats: https://gist.github.com/526f6f0eeb7da55960624260317fb9be

[12:01] *** chloekek left
[12:02] *** CIAvash joined
[12:03] <fingolfin3> sena_kun I'm still a beginner and not particularly good at development. Just noticed a missing feature and suggested to adding it :)

[12:06] <sena_kun> fingolfin3, I am not a core developer either... But I would rather fix real bugs than adding more unicode. Or write more batteries. Or write docs. Or tutorials or blog posts. Too many things that are orders of magnitude more helpful than adding more unicode. But that's just my opinion.

[12:06] <CIAvash> lelf: I think it's because of nodality, ». is not the same as for or map, see https://docs.perl6.org/language/traps#Using_%C2%BB_and_map_interchangeably and https://docs.perl6.org/language/operators#index-entry-methodop_%3E%3E.

[12:12] <fingolfin3> sena_kun Probably, the creators of the language do not agree with you, since they have already added a lot of unicode.

[12:14] <sena_kun> fingolfin3, probably they don't. as I said, it is just my personal opinion.

[12:15] *** warriors joined
[12:17] *** fingolfin3 left
[12:24] *** lucasb joined
[12:26] *** go|dfish joined
[12:40] *** pmurias joined
[12:48] *** pmurias left
[12:50] <squashable6> 🍕 Altai-man++ edited pull request “Test return constraints for role implementors”: https://github.com/rakudo/rakudo/pull/3249

[12:50] *** pmurias joined
[13:01] *** go|dfish left
[13:23] <AlexDaniel> fingolfin3: re ∧ and ∨: thanks for the interest! It's a lot of work, more than it seems at first glance (e.g. they need to be versioned, so that you can only use them on newer language versions)

[13:23] <tellable6> AlexDaniel, I'll pass your message to fingolfin3

[13:24] <AlexDaniel> fingolfin3: we had some not nice experience with other unicode stuff (e.g. unicode minus) which was a real pain to support properly and maintain, so it's unlikely we'll be adding more ops any time soon

[13:24] <tellable6> AlexDaniel, I'll pass your message to fingolfin3

[13:24] <AlexDaniel> fingolfin3: maybe in the future, but right now we have some other things we should focus on :)

[13:24] <tellable6> AlexDaniel, I'll pass your message to fingolfin3

[13:26] <AlexDaniel> sena_kun: that's not just your opinion, you're actually right :)

[13:27] <AlexDaniel> I'm one of the users who uses primarily unicode ops, and I can't see myself using ∧ and ∨

[13:27] <AlexDaniel> so who's going to use them, really?

[13:28] <AlexDaniel> and then we'll find out that performance of ∧ and ∨ is different from performance of && ||, and someone will spend hours trying to fix that and test it

[13:32] <warriors> didnt unicode ops contribute to the demise of apl

[13:32] <warriors> not really sure why rakudoers are such a fan of them 

[13:34] <warriors> apl reincarnation J (which is a lot of fun) consciously  decided to be all ascii and drop the weird symbols

[13:35] <AlexDaniel> warriors: it depends on which operators we're talking about

[13:35] <AlexDaniel> warriors: ‘’ “” and such are just better

[13:35] <AlexDaniel> (because you can nest things without extra toothpicks)

[13:36] <AlexDaniel> visually they're perfectly readable, and you don't have to use them if you don't want to

[13:36] <warriors> yes, but they are not on my keyboard, i need to use special emacs mode to convert regular ascii sequences to those 

[13:37] <warriors> which is .. in my opinion a needless layer on mental effort that we dont need

[13:38] <AlexDaniel> warriors: you can enable compose key and you'll be able to type a bunch of stuff anywhere in your system

[13:38] <warriors> in the case of quotes you are right, quotes will never become api

[13:38] <warriors> but any ops, who risk becoming api, is trouble

[13:38] <AlexDaniel> you don't have to, but I'm much happier being able to type special symbols, emoji and other stuff directly :)

[13:39] <AlexDaniel> warriors: ok, what about say 2³²

[13:39] <warriors> 2^32 

[13:39] <AlexDaniel> m: say 2^32

[13:39] <camelia> rakudo-moar e45bb3418: OUTPUT: «one(2, 32)␤»

[13:39] <AlexDaniel> m: say 2**32

[13:39] <camelia> rakudo-moar e45bb3418: OUTPUT: «4294967296␤»

[13:39] <AlexDaniel> you used the wrong op :P

[13:40] <AlexDaniel> unicode version is less ambiguous

[13:40] <warriors> yea sorry

[13:40] <warriors> i am used to ^ being the one

[13:40] <AlexDaniel> ∞ being Inf is also pretty obvious

[13:40] <warriors> it is easier to read, but harder to type

[13:41] <AlexDaniel> 3 key presses with compose key, 4 key presses without

[13:41] *** finanalyst_ joined
[13:41] <lelf> is there a shorted way to write (@x».pred) aka (@x X- 1) ?

[13:41] <AlexDaniel> compose 8 8 vs Shift + I n f

[13:41] <warriors> and if rakukings and rakuqueens insist on them, you should also spend a lot more time educating people how to configure their systems to type them

[13:42] <AlexDaniel> which is not horrible, default input methods really suck and IMO people should improve the defaults

[13:42] <AlexDaniel> lelf: are you golfing? :)

[13:42] <AlexDaniel> m: my @a = < 1 2 3 4 >; @a»--; say @a

[13:42] <camelia> rakudo-moar e45bb3418: OUTPUT: «[0 1 2 3]␤»

[13:43] <AlexDaniel> lelf: I don't think it'll get any shorter than that

[13:43] <AlexDaniel> warriors: so yeah, we do that too: https://docs.perl6.org/language/unicode_entry

[13:44] * AlexDaniel shower &

[13:45] <lelf> AlexDaniel: golfing, but only a little :) thanks!

[13:46] <warriors> didnt know about this page, should be promoted more :)

[13:46] <warriors> thanks for sharing

[13:51] <AlexDaniel> lelf: if you're not simply making your code smaller but actually golfing, then here's a page with some hints: https://github.com/AlexDaniel/raku-golf-cheatsheet

[13:52] *** rindolf3 left
[13:56] <cpan-raku> New module released to CPAN! ORM::ActiveRecord (0.0.8) by 03GDONALD

[14:08] *** finanalyst_ left
[14:11] *** Tirifto joined
[14:27] <cpan-raku> New module released to CPAN! Failable (0.1.0) by 03KAIEPI

[15:00] <AlexDaniel> sena_kun: did you register for hacktoberfest too? :)

[15:00] <AlexDaniel> sena_kun: you have 4 pull requests, that's exactly a t-shirt I think

[15:01] <AlexDaniel> squashable6: status

[15:01] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈20 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:01] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/ba6b10a075623dd4f21dc13783cb8b70

[15:01] <sena_kun> AlexDaniel, I did not, though sent some patches to roast. I am living in a middle of nowhere and it is always a hell when dealing with anything related to mailing. :|

[15:02] <AlexDaniel> sena_kun: https://hacktoberfest.digitalocean.com/ click the button, maybe it'll even count them

[15:02] <sena_kun> lemme see...

[15:04] <sena_kun> >You submitted Update schedule to perl6/advent <- this is just cheating. :P

[15:05] <AlexDaniel> hehe

[15:05] <AlexDaniel> last year I didn't do enough pull requests, it was weird

[15:05] <AlexDaniel> to be fair I wasn't doing any specifically for hacktoberfest :P

[15:06] <sena_kun> AlexDaniel, to be honest, I'd rather be happier to see the PRs merged (after a review, ofc) than getting yet another t-shirt. ;)

[15:06] <AlexDaniel> sena_kun: will you do more if I review and merge them? :)

[15:07] <sena_kun> AlexDaniel, I planned to do more anyway, after today's $dayjob, but sure. :)

[15:07] <vrurg> AlexDaniel: if it's about the roast PRs I plan to work on it tomorrow or Monday.

[15:08] <AlexDaniel> squashable6: status

[15:08] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈20 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:08] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/d5427c1eefa0df50c2f831b4c9417702

[15:08] <AlexDaniel> vrurg: ↑ it's better if squashathon stuff is accepted while the squashathon is going :)

[15:09] <vrurg> Too bad. I'm not having much time as of yesterday. :(

[15:09] <vrurg> Should be less loaded tomorrow.

[15:10] <AlexDaniel> I'll review, these are not that hard

[15:10] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test Parameter subclassing”: https://github.com/perl6/roast/pull/585#issuecomment-544157632

[15:10] <squashable6> 🍕 AlexDaniel++ closed issue “Parameter subclasses don't initialize attributes”: https://github.com/rakudo/rakudo/issues/2829

[15:10] <squashable6> 🍕 AlexDaniel++ merged pull request “Test Parameter subclassing”: https://github.com/perl6/roast/pull/585

[15:11] <vrurg> AlexDaniel: thanks!

[15:12] * vrurg is afk again....

[15:12] <AlexDaniel> 6c:  say 1 «*« |cis(1).reals x 2

[15:12] <committable6> AlexDaniel, https://gist.github.com/1a1986987733e8cd6f8ca004331828df

[15:13] <AlexDaniel> c: 2018.10-119-g18ded174e say 1 «*« |cis(1).reals x 2

[15:13] <committable6> AlexDaniel, ¦2018.10-119-g18ded174e: «Cannot test this commit (Commit exists, but an executable could not be built for it)»

[15:13] <AlexDaniel> c: 18ded174e say 1 «*« |cis(1).reals x 2

[15:13] <committable6> AlexDaniel, ¦18ded17: «Cannot test this commit (Commit exists, but an executable could not be built for it)»

[15:13] <AlexDaniel> c: 18ded174e^^^ say 1 «*« |cis(1).reals x 2

[15:13] <committable6> AlexDaniel, ¦18ded174e^^^: «Cannot modify an immutable Num (0.5403023058681398)␤  in block <unit> at /tmp/4a95_MefBY line 1␤␤ «exit code = 1»»

[15:13] <AlexDaniel> I see

[15:13] <AlexDaniel> so this one was actually a regression

[15:14] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Slip and hyper operation…”: https://github.com/rakudo/rakudo/issues/2482#issuecomment-544158224

[15:15] <AlexDaniel> c: 18ded174e^^^ use Test; lives-ok { |<1 2> >>xx>> 2 }

[15:15] <committable6> AlexDaniel, ¦18ded174e^^^: «not ok 1 - ␤# Failed test at /tmp/IJ2lSBLt_z line 1␤# Cannot modify an immutable IntStr (1)␤ «exit code = 1»»

[15:15] <AlexDaniel> c: 18ded174e^^^,HEAD use Test; lives-ok { |<1 2> >>xx>> 2 }

[15:15] <committable6> AlexDaniel, ¦18ded174e^^^: «not ok 1 - ␤# Failed test at /tmp/V_Q1StvvXn line 1␤# Cannot modify an immutable IntStr (1)␤ «exit code = 1»» ¦HEAD(e45bb34): «ok 1 - ␤»

[15:15] <AlexDaniel> sena_kun: shouldn't we test the values too?

[15:16] <AlexDaniel> like, what if it lives but gives garbage output?

[15:17] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test hyperop results in a slip”: https://github.com/perl6/roast/pull/587#issuecomment-544158581

[15:18] <AlexDaniel> c: 2015.12,HEAD use Test; my Pair $p; is-deeply ($p .= new :key<foo> :value<bar>), :foo<bar>.Pair, ‘foo’

[15:18] <committable6> AlexDaniel, ¦2015.12: «===SORRY!===␤Unknown QAST node type NQPMu␤ «exit code = 1»» ¦HEAD(e45bb34): «ok 1 - foo␤»

[15:18] <AlexDaniel> so this one doesn't even parse

[15:19] <sena_kun> AlexDaniel, I have an impression that results are already tested in numerous places, and we paid attention to "they are not immutable" part.

[15:21] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test fake-infix adverbs on a construct”: https://github.com/perl6/roast/pull/588#issuecomment-544159255

[15:21] <sena_kun> in a similar manner one can argue that we need to test it with e.g. all possible numbers, because otherwise we don't guarantee that e.g. 100_000 after 99_999 successful numbers works.

[15:22] <sena_kun> OTOH I don't feel too opinionated on this and can add values as well

[15:22] <AlexDaniel> I'd feel better if at least some values were tested too

[15:23] * sena_kun nods

[15:24] <squashable6> 🍕 Altai-man++ wrote a comment on “Test fake-infix adverbs on a construct”: https://github.com/perl6/roast/pull/588#issuecomment-544159673

[15:26] <AlexDaniel> meh, not sure if metamodel stuff should be in roast, but we already have tests for it

[15:26] <AlexDaniel> so, fine!

[15:26] <AlexDaniel> pretty cool code too

[15:28] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test runtime-created classes being attributes”: https://github.com/perl6/roast/pull/586#issuecomment-544160140

[15:28] <squashable6> 🍕 AlexDaniel++ merged pull request “Test runtime-created classes being attributes”: https://github.com/perl6/roast/pull/586

[15:28] <squashable6> 🍕 AlexDaniel++ closed issue “Smartmatch and type chec…”: https://github.com/rakudo/rakudo/issues/2607

[15:28] <sena_kun> https://design.perl6.org/S12.html#Custom_Meta-objects mentions MOP-related things

[15:28] <sena_kun> >These are for the standard Perl 6 Meta-Object Protocol, but other MOPs may define other traits

[15:28] <sena_kun> so MOP belongs to roast, imho

[15:29] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test fake-infix adverbs on a construct”: https://github.com/perl6/roast/pull/588#issuecomment-544160240

[15:29] <squashable6> 🍕 AlexDaniel++ merged pull request “Test fake-infix adverbs on a construct”: https://github.com/perl6/roast/pull/588

[15:29] <squashable6> 🍕 AlexDaniel++ closed issue “Unknown QAST node type N…”: https://github.com/rakudo/rakudo/issues/1500

[15:29] <AlexDaniel> oh, design subdomain is up!

[15:29] <AlexDaniel> rba++ # I guess you did it? :)

[15:31] *** sena_kun left
[15:31] <AlexDaniel> sena_kun: well, I don't think we thought through the idea of different compilers, partial compliance and stuff like this

[15:31] <tellable6> AlexDaniel, I'll pass your message to sena_kun

[15:32] <AlexDaniel> sena_kun: with my limited knowledge, I can totally imagine a compiler that implements almost everything but MOP, perhaps for some good reasons too. But arguably there are many features that can potentially be “skipped” but various implementations, and we don't yet know how this will work out

[15:32] <tellable6> AlexDaniel, I'll pass your message to sena_kun

[15:33] <rba> AlexDaniel: jw

[15:33] <AlexDaniel> sena_kun: fudging is ok but very LTA in my opinion

[15:33] <tellable6> AlexDaniel, I'll pass your message to sena_kun

[15:36] *** sena_kun joined
[15:42] *** haxmeister joined
[15:43] <haxmeister> :P

[15:57] <Tirifto> Hello, moving from #perl6!

[15:57] <AlexDaniel> o/

[15:58] <haxmeister> For other options, go to http://rakudo.org/how-to-get-rakudo/#Installing-Rakudo-Star-Linux

[15:58] <haxmeister> that's a dead link

[15:58] <haxmeister> on perl6intro

[16:03] <AlexDaniel> ouch!

[16:05] <Tirifto> So apparently ‘⇒’ doesn't go for ‘=>’ in Raku? :P

[16:06] <AlexDaniel> Tirifto: yeah, currently not!

[16:06] <haxmeister> that would be cool though

[16:06] <AlexDaniel> Tirifto: same for -> and →, <-> and ↔

[16:06] <lizmat> https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII

[16:07] <guifa> sub infix:<⇒> ($a,$b) { Pair.new: $a,$b } # Now it does

[16:08] <AlexDaniel> Tirifto: interestingly, we were just discussing some unicode ops before you joined :) See https://colabti.org/irclogger/irclogger_log/raku?date=2019-10-19#l67

[16:12] <Tirifto> lizmat: Wow, that's awesome there's been discussion on so many! :D

[16:13] <lizmat> Tirifto: and it's a Wiki, so if you have any additional ideas, please don't hesitate to name them  :-)

[16:13] <haxmeister> trying to make good decisions here, installing raku on opensuse

[16:13] <lizmat> Tirifto: no guarantee that they will ever be implemented, though, 

[16:13] <lizmat> afk&

[16:15] <AlexDaniel> haxmeister: what's the latest version there?

[16:15] <AlexDaniel> haxmeister: seems like we do have some opensuse packages here: https://github.com/nxadm/rakudo-pkg/releases

[16:16] <haxmeister> 2019.07-2.1

[16:16] <haxmeister> yes rakudo installs

[16:16] <haxmeister> but trying to understand getting zef

[16:16] <guifa> DONE.  *finally* got LanguageTags to support the T-extension semantics which required a massive reorganization of code because cyclic =\

[16:17] <squashable6> 🍕 llelf++ wrote a comment on “Implement ¿? and ¡! as alternative to ""”: https://github.com/rakudo/rakudo/pull/3218#issuecomment-544167086

[16:17] <squashable6> 🍕🍕🍕  First contribution by llelf++! ♥

[16:17] <squashable6> 🍕 niner++ wrote a comment on “Windows NativeCall regression ”: https://github.com/rakudo/rakudo/issues/3247#issuecomment-544167113

[16:17] <squashable6> 🍕 niner++ closed issue “Windows NativeCall regression ”: https://github.com/rakudo/rakudo/issues/3247

[16:17] <haxmeister> because the zef instructions don't include installing globally nor is there information about running zef to manage raku for the system

[16:17] <guifa> but now you can do $tag.extensions<t>.hybrid-locale and get back a fully fledged language tag :D

[16:18] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Implement ¿? and ¡! as alternative to ""”: https://github.com/rakudo/rakudo/pull/3218#issuecomment-544167383

[16:19] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Add tests for R#3035”: https://github.com/perl6/roast/pull/584#issuecomment-544167462

[16:21] <haxmeister> squashable6: a bot or person?

[16:21] <squashable6> haxmeister, ALRIGHT, LET'S DO IT!!!

[16:21] <haxmeister> I C

[16:21] <haxmeister>  /ignore squashable6 

[16:22] <AlexDaniel> haxmeister: it's squashathon time, which is why it's so loud :)

[16:22] <AlexDaniel> haxmeister: we're writing tests and closing testneeded tickets this time

[16:22] *** cpan-raku left
[16:23] <haxmeister> AlexDaniel: it is actually good to see so much work happening.. not mad here

[16:23] *** cpan-raku joined
[16:23] *** cpan-raku left
[16:23] *** cpan-raku joined
[16:23] <AlexDaniel> haxmeister: some distros have zef packaged: https://repology.org/project/perl6-zef/versions

[16:23] <haxmeister> AlexDaniel: I have like 10 channels moving in irssi.. so the bot sends me back to check responses

[16:23] <AlexDaniel> haxmeister: but not opensuse, unfortunately!

[16:25] <haxmeister> AlexDaniel: does zef install packages in a way that allows it to do system wide installs on multi-user systems?

[16:28] <AlexDaniel> haxmeister: not by default, and I haven't tried making it do that

[16:28] <haxmeister> ok

[16:28] <AlexDaniel> nine: nice! Thank you

[16:28] <Tirifto> AlexDaniel, lizmat: Thank you, I'll see about adding new ideas if I can think of them! I definitely like ⇒ & the other arrows, ∧ & the other logic symbols, subscripts and the bag delimiters which I'm not familiar with, but they look awesome. I hope they'll make it in along with the other improvements someday! :-)

[16:29] <AlexDaniel> Tirifto: it's also possible to implement most of them in a module

[16:30] <AlexDaniel> Tirifto: it's just that nobody did that yet

[16:30] <AlexDaniel> a lot of these suggestions don't really have to be in core, I think

[16:30] <AlexDaniel> greppable6: ≠|≤|≥

[16:31] <greppable6> AlexDaniel, 368 lines, 29 modules: https://gist.github.com/3f54ffdf48140ddfcc9fb0344f8014cb

[16:31] <AlexDaniel> let's see if that works…

[16:32] <AlexDaniel> almost

[16:32] <AlexDaniel> here's a rendered version: https://gist.github.com/AlexDaniel/1b8d02eb7902f774fe0dd3f1eb9f9b3e

[16:32] * guifa had moderate success making ¿ ? a circumfix for truthiness testing and ¡ ! for negating, probably woudl need to tinker deeper in the P6 grammar to get it to work well

[16:37] <Geth> ¦ whateverable: 47013e95a5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Greppable.p6

[16:37] <Geth> ¦ whateverable: Skip .pdf files

[16:37] <Geth> ¦ whateverable: 

[16:37] <Geth> ¦ whateverable: Otherwise we get a lot of binary data in the gist which breaks

[16:37] <Geth> ¦ whateverable: rendering.

[16:37] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/47013e95a5

[16:38] *** greppable6 left
[16:38] <nine> releasable6: status

[16:39] <releasable6> nine, Next release in ≈2 hours. 6 blockers. Unknown changelog format

[16:39] <releasable6> nine, Details: https://gist.github.com/df4b0784176b07a5508addeb6865d679

[16:40] <Tirifto> AlexDaniel: ¡False!, but they might make the core nicer! :-)

[16:40] *** greppable6 joined
[16:41] <AlexDaniel> greppable6: ≠|≤|≥

[16:41] <AlexDaniel> this should work now

[16:42] <greppable6> AlexDaniel, 368 lines, 29 modules: https://gist.github.com/69c89dfd35a61098ea1e252c80ab1f0a

[16:42] <AlexDaniel> nine: yeah, we'll get there, not in 2 hours but we'll get there :)

[16:49] <Tirifto> AlexDaniel: What exactly is greppable6 telling us here?

[16:49] <guifa> Is there a best practice for renaming a module?  Not ideal, but its best for long term before usage increases too much?  Make it a new module and deprecate the old one or just upload all the new stuff to github and stub the old name for a little while with a deprecation notice or?

[16:50] <squashable6> 🍕 vrurg++ wrote a comment on “Add tests for R#3035”: https://github.com/perl6/roast/pull/584#issuecomment-544171306

[16:51] <AlexDaniel> Tirifto: in this case it's all uses of ≠≤≥ ops in all modules

[16:51] <Tirifto> Oh, nice!

[16:54] <AlexDaniel> guifa: I don't think there's a guide or anything like that, and I haven't heard of any best practices for this. But, one think to keep in mind is that modules are installable by whatever you have in your “provides” section

[16:55] <AlexDaniel> guifa: so a module Foo::Bar that provides Baz::Baz should be installable with `zef install Baz::Baz`

[16:55] <AlexDaniel> maybe you can use that to provide some sort of backward compatibility, but maybe not and it'll confuse everything :)

[16:55] <guifa> ooh, didn’t realize that

[16:55] <guifa> That might not be bad.  I don’t think *that* many people are using language tags

[16:56] <squashable6> 🍕 llelf++ wrote a comment on “Implement ¿? and ¡! as alternative to ""”: https://github.com/rakudo/rakudo/pull/3218#issuecomment-544172196

[16:57] <guifa> I originally named the module Intl::BCP47 after the document that defined them, but I’ve implemented a few other related standards so the name is kinda misleading.  Besides it makes more sense to just call the module Intl::LanguageTag with all the rest of the stuff I’ve been doing in Intl:: .  

[16:58] <guifa> The exports are all the same though, so I think I can just provide Intl::BCP47 for the time being and it shouldn’t break any code

[17:01] *** pmurias left
[17:13] *** sena_kun left
[17:14] *** sena_kun joined
[17:14] <timotimo> finally set up proper travis-ci for moarperf; now people will be able to download releases from github that contain the finished javascript files, so they don't have to run "npm install" and get millions of javascript packages onto their machines

[17:15] <timotimo> there'll probably also be releases on cpan that will be similar in that way, hopefully

[17:32] *** wildtrees joined
[17:33] *** wildtrees left
[17:35] <squashable6> 🍕 Kaiepi++ synchronize pull request “Add tests for R#3035”: https://github.com/perl6/roast/pull/584

[18:09] <guifa> WTF

[18:09] <guifa> reading through the T extension options for the “transform destination” data

[18:09] <guifa> one of them is “remove every character in the string"

[18:10] <guifa> so ‘en-t-d0-remove’ is “text in English that had ever single character removed” lolol

[18:14] *** go|dfish joined
[18:38] <cpan-raku> New module released to CPAN! XML::Actions (0.4.3) by 03MARTIMM

[18:49] *** go|dfish left
[18:59] *** Tirifto left
[19:04] *** pmurias joined
[19:11] <El_Che> if someone has a clue why this rakudo build fails on travis (with a fedora 30 container) but runs find on the same container on my machine: https://travis-ci.org/nxadm/rakudo-pkg/builds/599998931

[20:09] *** pmurias left
[20:11] *** pmurias joined
[20:17] <squashable6> 🍕 lizmat++ wrote a comment on “Empty #| cause compilation error”: https://github.com/rakudo/rakudo/issues/3242#issuecomment-544194008

[20:17] <squashable6> 🍕 lizmat++ closed issue “Empty #| cause compilation error”: https://github.com/rakudo/rakudo/issues/3242

[20:19] *** finanalyst_ joined
[20:32] *** chloekek joined
[21:00] *** finanalyst_ left
[21:01] *** cinch_ is now known as cinch

[21:01] *** cinch left
[21:01] *** cinch joined
[21:14] <squashable6> 🍕 niner++ wrote a comment on “Weird issue in epoll module”: https://github.com/rakudo/rakudo/issues/3244#issuecomment-544197846

[21:23] <Doc_Holliwood> how do i require a minimal version of a module in a `use` statement?

[21:24] <Doc_Holliwood> ah, it dwims

[21:24] <Doc_Holliwood> who'd have thought

[21:34] *** ggoebel joined
[21:37] <Doc_Holliwood> is it too late to propose builtin methods?

[21:37] <Doc_Holliwood> i'd really like to have a .last and .nth method for lists

[21:42] <sena_kun> Doc_Holliwood, it likely is in a sense that we can't just add stuff in CORE, you'd need to somehow prove that it is useable over what we have now, then consider it for next language spec version, then wait for its release, then for a compiler implementing that, and you'll only be able to use that from fresh enough compilers that support the spec...

[21:42] <tellable6> 2019-10-19T15:31:38Z #raku <AlexDaniel> sena_kun: well, I don't think we thought through the idea of different compilers, partial compliance and stuff like this

[21:42] <tellable6> 2019-10-19T15:33:23Z #raku <AlexDaniel> sena_kun: fudging is ok but very LTA in my opinion

[21:42] <tellable6> https://gist.github.com/13c179d51fae450460cfaefd6433445a

[21:43] <sena_kun> Doc_Holliwood, what's wrong with [*-1] and [n]?

[21:43] <sena_kun> m: my $a = (1,2,3,4,5); say $a[*-1]; say $a[2];

[21:43] <camelia> rakudo-moar 7dc34148e: OUTPUT: «5␤3␤»

[21:44] <AlexDaniel> goddamn tellable6 stop posting gists :)

[21:44] <AlexDaniel> thank you for your service, of course, tellable6, but you can do better

[21:44] <tellable6> AlexDaniel, \o/

[21:45] <Doc_Holliwood> sena_kun, it forces you to break the flow in a chain of list functions. `@foo.grep().nth(3).split().pick` is prettier than `(@foo.grep())[2].split().pick`

[21:45] <Doc_Holliwood> also there is already a `first` method

[21:45] <sena_kun> m: (1,2,3,4,5).grep(*)[3].pick;

[21:45] <camelia> rakudo-moar 7dc34148e: ( no output )

[21:45] <sena_kun> m: (1,2,3,4,5).grep(*)[3].pick.say;

[21:45] <camelia> rakudo-moar 7dc34148e: OUTPUT: «4␤»

[21:45] <sena_kun> the flow seems ok to me. :)

[21:46] <sena_kun> Doc_Holliwood, also, if you REALLY want that, you can use AT-POS directly, I think

[21:46] *** delimited left
[21:46] <sena_kun> m: (1,2,3,4,5).grep(*).AT-POS(3).say;

[21:46] <camelia> rakudo-moar 7dc34148e: OUTPUT: «4␤»

[21:46] <tobs> m: (1,2,3,4,5).grep(*).[3].pick.say;  # indexing can also be a method

[21:46] <camelia> rakudo-moar 7dc34148e: OUTPUT: «4␤»

[21:46] <sena_kun> heh

[21:47] <Doc_Holliwood> yeah.

[21:47] <Doc_Holliwood> heh

[21:47] <Doc_Holliwood> tobs++

[21:53] <Doc_Holliwood> yeah, no. when i try any of those i either get  `Missing infix inside []` or `Malformed postfix call (only alphabetic methods may be detached)`

[21:53] <squashable6> 🍕 niner++ wrote a comment on “Weird issue in epoll module”: https://github.com/rakudo/rakudo/issues/3244#issuecomment-544200300

[21:53] <Doc_Holliwood> the latter is the method lookup

[21:56] <squashable6> 🍕 Altai-man++ synchronize pull request “Test hyperop results in a slip”: https://github.com/perl6/roast/pull/587

[21:56] <Doc_Holliwood> nevermind

[21:56] <squashable6> 🍕 Altai-man++ wrote a comment on “Test hyperop results in a slip”: https://github.com/perl6/roast/pull/587#issuecomment-544200488

[22:07] *** eseyman left
[22:14] *** delimited joined
[22:14] *** delimited is now known as Guest31645

[22:14] *** eseyman joined
[22:14] *** Guest31645 left
[22:15] <sena_kun> 6c: use NativeCall; my @t2682 := CArray[int32].new(1,2,3); say @t2682[*-1];

[22:15] <committable6> sena_kun, https://gist.github.com/4e4eb9af3f30d6a52222fc7bf0d984dc

[22:21] <sena_kun> 6c: use NativeCall; my @t2682 := CArray[int32].new(1,2,3); say @t2682[0..*-2];

[22:21] <committable6> sena_kun, https://gist.github.com/d7a10b93fd2f62dd01d4a168c0c3724a

[22:23] <sena_kun> committable6, help

[22:23] <committable6> sena_kun, Like this: committable6: f583f22,HEAD say ‘hello’; say ‘world’ # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Committable

[22:24] <AlexDaniel> just swap 6c: with bisect: if you want to bisect it

[22:25] <sena_kun> AlexDaniel, I think the thing I am writing test for was broken in between of two releases, so want to check that my golf indeed can trigger the correct error on old version...

[22:25] <AlexDaniel> sena_kun: between which releases?

[22:25] <sena_kun> but yes, bisecting is another option, but I'd like to check the fixing commit and the one before that

[22:26] <sena_kun> AlexDaniel, https://github.com/rakudo/rakudo/commit/0d2658b806de11a538d69080737c59ea9067c8dc#diff-46ffdef2be7f008af940be7578df7d89 <- the commit in question

[22:26] <AlexDaniel> ahh right the parent of the fixing commit will be the one

[22:26] <AlexDaniel> c: 0d2658b806^,0d2658b806 use NativeCall; my @t2682 := CArray[int32].new(1,2,3); say @t2682[0..*-2];

[22:26] <committable6> AlexDaniel, https://gist.github.com/b53a76047ad2a110a1a2b05855df3f5d

[22:26] <AlexDaniel> let's see

[22:27] <AlexDaniel> that?

[22:27] <sena_kun> AlexDaniel, yup! Thanks, pushing it...

[22:27] <sena_kun> by the way, rakudo tests are not accepted due to a release being close or?

[22:28] <AlexDaniel> if they pass they can be merged right away

[22:28] <sena_kun> AlexDaniel, they don't (as in full spec), but the failing ones are pretty unrelated... and different on different travis configs

[22:28] <AlexDaniel> you mean this? https://github.com/rakudo/rakudo/pull/3249

[22:29] <sena_kun> AlexDaniel, yes, for example this one, also https://github.com/rakudo/rakudo/pull/3245

[22:30] <AlexDaniel> ahh I see, there's something failing in CI

[22:30] <AlexDaniel> anyway the PR is good to go

[22:30] <squashable6> 🍕 Altai-man++ wrote a comment on “Some issue exposed by Math::FFT::Libfftw3”: https://github.com/rakudo/rakudo/issues/2682#issuecomment-544202590

[22:31] <squashable6> 🍕 Altai-man++ opened pull request “Test indexing with whatever for CArray”: https://github.com/rakudo/rakudo/pull/3250

[22:31] <sena_kun> a-and another one...

[22:32] <AlexDaniel> sena_kun: ok, looking at your rakudo pr, why not a roast test?

[22:32] <sena_kun> AlexDaniel, which one? :)

[22:33] <AlexDaniel> sena_kun: I understand that your test is looking at the error message, which is a no-no for roast, but the functionality seems to be something that is defined by the language, no?

[22:33] <sena_kun> one is nativecall, which is rakudo-specific, AFAIK

[22:33] <AlexDaniel> sena_kun: this one: https://github.com/rakudo/rakudo/pull/3249

[22:33] <sena_kun> error messages are no-no for roast

[22:33] *** lucasb left
[22:34] <AlexDaniel> sena_kun: right, but it's error vs no error, so shouldn't we be checking that in roast?

[22:34] <AlexDaniel> like a basic lives-ok or something

[22:34] <sena_kun> hmmm

[22:35] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test indexing with whatever for CArray”: https://github.com/rakudo/rakudo/pull/3250#issuecomment-544202859

[22:35] <squashable6> 🍕 AlexDaniel++ closed issue “Some issue exposed by Math::FFT::Libfftw3”: https://github.com/rakudo/rakudo/issues/2682

[22:35] <squashable6> 🍕 AlexDaniel++ merged pull request “Test indexing with whatever for CArray”: https://github.com/rakudo/rakudo/pull/3250

[22:40] <sena_kun> AlexDaniel, I think it doesn't. The rule being tester here is that return constraints are considered when looking at "If this method implemented or not". If it is, we are ok, but if it isn't, it is a compiler level error, it does not compile at all, so we can't dies-ok it.

[22:40] <sena_kun> s/tester/tested/

[22:43] <AlexDaniel> sena_kun: eval-dies-ok ?

[22:44] <sena_kun> AlexDaniel, well... I wonder what's the semantic here would be. We test things that work and some things that must not work. But we don't test any possible input outside of allowed one as "doesn't work". The line between "If it is untested, we consider it to not work" and "We test it does not work" is a bit blurry, imho.

[22:50] <sena_kun> m: (:(Str(Int) $a)).gist.say

[22:50] <camelia> rakudo-moar 7dc34148e: OUTPUT: «(Str(Int) $a)␤»

[22:50] <sena_kun> 6c: (:(Str(Int) $a)).gist.say

[22:51] <committable6> sena_kun, https://gist.github.com/2c35eb0ea7f7f59ff73340e12ab1e10a

[22:52] *** lelf left
[22:52] *** lelf joined
[22:52] <AlexDaniel> sena_kun: I'm not sure what you mean, I see it as simply “role multi methods must be implemented with the right type”

[22:53] <sena_kun> AlexDaniel, maybe I am overthinking it...

[22:53] <AlexDaniel> for example, don't we already tests that check this (without return types)?

[22:55] <sena_kun> we do. I need to check though if we are checking it with a correct return type or not...

[22:56] <AlexDaniel> sena_kun: something like this: https://github.com/perl6/roast/blob/93cc2e4274df21e9bb7ff485acfc5279305ba87c/S14-roles/composition.t#L179-L190

[22:56] <AlexDaniel> your test is pretty much the same, just using the return type

[22:56] <AlexDaniel> right?

[22:57] <AlexDaniel> ok I highlighted the wrong lines but it's around there :)

[22:57] *** lelf left
[22:57] <sena_kun> hm, yes, I guess it is

[22:57] *** pmurias left
[22:57] <sena_kun> anyway, I am finishing a new one and going to bed, I am afraid...

[22:59] <sena_kun> are results of .gist specced?

[22:59] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Test return constraints for role implementors”: https://github.com/rakudo/rakudo/pull/3249#issuecomment-544204099

[22:59] <sena_kun> I am looking at https://github.com/rakudo/rakudo/issues/2416 the test is very easy, but I am really not sure where should it go.

[22:59] <AlexDaniel> sena_kun: no, .gists are not specced and shouldn't be I think

[23:00] <AlexDaniel> arguably even .perl has a range of OK results, I don't know if we test it but we shouldn't

[23:00] <AlexDaniel> so putting them in rakudo is definitely safe

[23:00] <sena_kun> AlexDaniel, so we can just close it? ;)

[23:00] <AlexDaniel> sena_kun++ # shredding it :)

[23:01] <AlexDaniel> sena_kun: what's the connection to .gist? I'm not following

[23:02] <sena_kun> AlexDaniel, see https://gist.github.com/2c35eb0ea7f7f59ff73340e12ab1e10a

[23:02] <sena_kun> the test should be essentially "Gist on a signature with a coercion shows the coercion type"

[23:02] <AlexDaniel> ohh I see

[23:03] <AlexDaniel> just add a test in rakudo, why not

[23:03] <sena_kun> oki

[23:03] <AlexDaniel> my point is that they shouldn't go in roast for sure, but adding a test in rakudo to make sure there's no regression is always a good idea :)

[23:04] <sena_kun> 02-rakudo/99-misc.t, I guess...

[23:04] <sena_kun> woah

[23:04] <sena_kun> what I am seeing...

[23:06] <AlexDaniel> a lot of gist tests in roast? I see that too :S

[23:06] <sena_kun> no, not these

[23:06] <sena_kun> sigh

[23:07] <AlexDaniel> some tests are abusing gists to test the functionality…

[23:07] <AlexDaniel> we definitely need a great roast refactor :(

[23:08] <sena_kun> https://github.com/rakudo/rakudo/blob/master/t/02-rakudo/99-misc.t#L153-L156 and https://github.com/perl6/roast/blob/master/S12-class/inheritance.t#L180-L186

[23:08] <AlexDaniel> vrurg: a bunch of roast tests that check the output of .gist? That doesn't make any sense, right??

[23:09] <sena_kun> rakudo-one was originally added by jnthn, and I really wonder if we want to remove it now once it's in roast...

[23:09] <sena_kun> ok, sleep time for me.

[23:09] <sena_kun> o/

[23:09] <AlexDaniel> sena_kun: sleep well!

[23:09] <AlexDaniel> your PRs are great :)

[23:09] <sena_kun> AlexDaniel, so do you! Take care, thanks for all your help today.

[23:11] *** sena_kun left
[23:14] *** chloekek left
[23:14] *** ggoebel left
[23:28] *** ggoebel joined
