[00:04] *** pmurias left
[00:04] <rjt_pl> Is there a Raku equivalent to p5's s/match/repl/r , important part being the /r (non-destructive substitution and returns result)?

[00:04] *** patrickz joined
[00:05] <Xliff> m: $_ = "Pear"; my $s = S/P/R/; $s.say;

[00:05] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «Rear␤»

[00:05] <Xliff> ^^ rjt_pl ?

[00:06] <Xliff> m: $_ = "Pear"; my $s = S/P/R/; $s.say; .say;

[00:06] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «Rear␤Pear␤»

[00:06] <rjt_pl> Oh wow, ok. That explains why I couldn't find an adverb for that. ;-) Thanks!

[00:07] <Xliff> Be aware that S/// only works on $_.

[00:07] <rjt_pl> Right, perfect for what I'm doing.

[00:07] <Xliff> If you want to do something with arbitrary strings, use Str.replace

[00:08] <Xliff> Actually... that would be .subst

[00:08] <Xliff> https://docs.perl6.org/routine/subst

[00:08] *** patrickb left
[00:14] *** patrickz left
[00:17] *** pmurias joined
[00:41] <guifa> note that Str.subst will (temporarily) likely be faster if you’re not replacing regexen

[00:42] <guifa> (or at least, for a while things like starts-with(‘foo’) and ends-with(‘foo’) were much faster than ~~ /^foo/ and ~~ /foo$/ and the recommended route — and even if regex gets faster, it’s cleaner code IMO)

[00:49] <rjt_pl> Good to know.

[01:03] *** Doc_Holliwould left
[01:06] <guifa> Eventually they should end up being the same speed (regex optimizations should recognize a simple anchor + static string) but there have been bigger fish to fry elsewhere in the core 

[01:23] *** AlexDani` joined
[01:24] *** AlexDaniel left
[01:32] *** cognomin_ left
[01:32] *** AlexDani` is now known as AlexDaniel

[01:32] *** AlexDaniel left
[01:32] *** AlexDaniel joined
[01:39] *** benjif joined
[01:54] *** pmurias left
[02:07] *** wildtrees left
[02:29] *** lucasb left
[02:42] <cpan-raku> New module released to CPAN! AttrX::Mooish (0.7.0) by 03VRURG

[02:45] *** Guest38485 left
[02:45] *** skyl4rk left
[02:46] *** Guest38485 joined
[02:46] *** skyl4rk joined
[03:12] *** cpan-raku left
[03:13] *** cpan-raku joined
[03:13] *** cpan-raku left
[03:13] *** cpan-raku joined
[03:21] <Xliff> Is there a more up-to-date version of perl6-all-modules from moritz?

[03:32] <Xliff> AlexDaniel?

[03:32] <AlexDaniel> Xliff: no

[03:33] <Xliff> Whyyyyyy?

[03:33] <AlexDaniel> perl6-all-modules is stuck for some reason and needs fixing

[03:33] <Xliff> Oh. nvm

[03:33] <Xliff> AlexDaniel: What's the best way for me to get a bisectable installation going?

[03:33] <ZzZombo> How can I express "this variable/property" is supposed to be initialized with defined strings" w/o also giving it an immediate value, like `my Str:D $a = ''`?

[03:33] <AlexDaniel> Xliff: what for?

[03:34] <Xliff> I do NOT want to continue compiling rakudo everytime I need to check something

[03:34] <Xliff> Compiling GTK is bad enough.

[03:34] <AlexDaniel> Xliff: what about this? https://github.com/perl6/whateverable/wiki/Shareable

[03:34] <Xliff> Was looking at that.

[03:34] <AlexDaniel> Xliff: you can get any build from whateverable server

[03:35] <AlexDaniel> I think modern rakudo versions are relocatable so you should have even less issues using this

[03:35] <Xliff> Is there a script that will download a nice subset?

[03:35] <AlexDaniel> shareable6: HEAD

[03:35] <shareable6> AlexDaniel, https://whateverable.6lang.org/HEAD

[03:36] <AlexDaniel> Xliff: well, if you replace HEAD with anything else it'll give you the build

[03:36] <AlexDaniel> so as long as you can define your own subset, sure

[03:36] <Xliff> Hm. OK. This means I need to script downloads via that link, then undo them, then run via that new executable, correct?

[03:37] <Xliff> I was hoping there was a CLI version of bisectable.

[03:37] <AlexDaniel> there is Blin, yes

[03:37] <AlexDaniel> which you can use as exactly that

[03:37] <Xliff> *sigh*

[03:38] <Xliff> OK. I've been misunderstanding the purpose of some of these bots, then.

[03:38] <Xliff> Let me gain some altitude and explain.

[03:38] <AlexDaniel> to be honest I don't entirely understand what problem you're trying to solve :)

[03:38] <Xliff> I want to see if I can find the largest perl6 module in the ecosystem. What's the best method to do that?

[03:39] <AlexDaniel> hmm, what's largest?

[03:39] <ZzZombo> If you omit the `:D`, then it's possible to assign undefined values, on the other hand, assigning some half-assed default value also kinda works against the design.

[03:39] <Xliff> Yes

[03:40] <AlexDaniel> I mean, what's your definiton of “largest”

[03:40] <Xliff> Either compunit count or line count. Don't care which.

[03:40] <Xliff> Line count would be the best one.

[03:40] <Xliff> That directly translates to "size of repo"

[03:41] <Xliff> m: class A { method b (Str:D $name) { say 'Defined' }; }; A.new.b()

[03:41] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) Too few positionals passed; expected 2 arguments but got 1␤  in method b at /tmp/bKbzLRuIn5 line 1␤  in block <unit> at /tmp/bKbzLRuIn5 line 1␤␤»

[03:41] <Xliff> m: class A { method b (Str:D $name) { say 'Defined' }; }; my $c; A.new.b($c)

[03:41] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) Type check failed in binding to parameter '$name'; expected Str but got Any (Any)␤  in method b at /tmp/NtQI9pcDxH line 1␤  in block <unit> at /tmp/NtQI9pcDxH line 1␤␤»

[03:41] <Xliff> m: class A { method b (Str:D $name) { say 'Defined' }; }; my $c; A.new.b('')

[03:41] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «Defined␤»

[03:41] <Xliff> m: class A { method b (Str:D $name) { say 'Defined' }; }; my $c; A.new.b(Str)

[03:41] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) Parameter '$name' of routine 'b' …»

[03:41] <evalable6> Xliff, Full output: https://gist.github.com/f770353c2e68e868108d6d0aacf5a4dd

[03:41] <Xliff> ZzZombo: ^^^

[03:42] <ZzZombo> What?

[03:42] <ZzZombo> How does that answer my question?

[03:42] <Xliff> I don't know. Can you tell me why it doesn't?

[03:43] <ZzZombo> Maybe because you involve parameters rather than variables and properties?

[03:43] <Xliff> I don't think I got the mid bit of your explanation...

[03:43] <Xliff> Can you gist?

[03:43] <AlexDaniel> ah, I understand the question

[03:44] <AlexDaniel> so you want to declare `my Str:D $a;` but assign to it later

[03:44] <ZzZombo> Yep.

[03:44] <Xliff> Yeah. That was the mid bit I missed.

[03:45] <ZzZombo> Especially in a class, why can't the initialization be deferred to `BUILD\TWEAK`, etc?

[03:45] <AlexDaniel> ZzZombo: well, I don't think you can or should be able to. Before you assign to it, it'll be undefined, meaning it'll be violating the constraint

[03:45] <Xliff> class A { has Str $!a is required }; A.new

[03:45] <Xliff> m: class A { has Str $!a is required }; A.new

[03:45] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) The attribute '$!a' is required, but you did not provide a value for it.␤  in block <unit> at /tmp/bw27leLZ9W line 1␤␤»

[03:46] <Xliff> m: class A { has Str $!a is required; submethod BUILD (:$!a) { };  }; A.new(a => '42')

[03:46] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «»

[03:46] <ZzZombo> Good, looks fine.

[03:47] <AlexDaniel> Xliff: I can't come up with a very easy way to do it, you'll have to implement it somehow

[03:47] <Xliff> AlexDaniel: *sigh* -- Was hoping I wouldn't need to go through and download every module.

[03:47] <Xliff> OK. Thanks!@

[03:48] <AlexDaniel> Xliff: as for fetching every module, it's also a bit… complicated

[03:48] <AlexDaniel> Xliff: first of all, there are two lists: https://github.com/perl6/Blin/blob/0b12bc0b33f2e47ebb7c3669abf1f690a173d9ee/bin/blin.p6#L36-L37

[03:49] <AlexDaniel> then there's this issue with source urls being something other than https links…

[03:49] <AlexDaniel> then there are different versions of the same module

[04:18] <Xliff> Yeek! Looks like massive amounts of data normalization.

[04:54] *** squashable6 left
[04:55] *** squashable6 joined
[04:56] <guifa> .tell jmerelo Sent you an e-mail to your university account.  Sorry for the delay!

[04:56] <tellable6> guifa, I'll pass your message to jmerelo

[05:11] <Xliff> Hrm. How can I make a hash slice into another hash...

[05:11] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>

[05:11] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «»

[05:12] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>.gist.say

[05:12] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(2 3 4)␤»

[05:13] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>.pairs.map( *.key eq <b c e>.any ).Hash.gist.say

[05:13] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) Died with X::Hash::Store::OddNumber␤  in block <unit> at /tmp/K0_oczdUtI line 1␤␤»

[05:13] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>.pairs.grep( *.key eq <b c e>.any ).Hash.gist.say

[05:13] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «{}␤»

[05:14] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>.pairs.grep( *.key eq <b c e>.any ).gist.say

[05:14] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «()␤»

[05:14] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>.pairs.grep({.key eq <b c e>.any }).gist.say

[05:14] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «()␤»

[05:14] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h<b c e>.pairs.grep({ .key eq <b c>.any }).gist.say

[05:14] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «()␤»

[05:14] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h.pairs.grep({ .key eq <b b c>.any }).gist.say

[05:14] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(b => 2 c => 3)␤»

[05:14] <Xliff> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); %h.pairs.grep({ .key eq <b c e>.any }).gist.say

[05:14] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(e => 4 c => 3 b => 2)␤»

[05:14] <Xliff> Hrm.

[05:31] <guifa> Xliff: sounds like the time for a custom circumscript

[05:32] <ZzZombo> m: role R[**%h]{method m{%h}};say R[:a<f>, :1b].new.m

[05:32] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) ===SORRY!===␤No appropriate parametric role variant available for 'R'␤»

[05:32] <ZzZombo> Why?

[05:33] <ZzZombo> m: role R[**%h]{method m{%h}};say R[%(:a<f>, :1b)].new.m

[05:33] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «{a => f, b => 1}␤»

[05:33] <ZzZombo> WTF??

[05:34] <ZzZombo> m: role R[**%h]{method m{%h}};say R[a=>'asd', b=>123].new.m

[05:34] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) ===SORRY!===␤No appropriate parametric role variant available for 'R'␤»

[05:34] <guifa> m: role R[+%h]{method m{%h}};say R[:a<f>, :1b].new.m

[05:34] <evalable6> guifa, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) Could not instantiate role 'R':␤␤  in any protect at gen/moar/stage2/NQPCORE.setting line 1216␤  in block <unit> at /tmp/nEIoojWBeO line 1␤␤»

[05:34] <guifa> m: role R[*%h]{method m{%h}};say R[:a<f>, :1b].new.m

[05:34] <evalable6> guifa, rakudo-moar 382d18bda: OUTPUT: «{a => f, b => 1}␤»

[05:34] * guifa wonders why single argument rule isn’t available for hashes

[05:35] <guifa> In any case, you need to use a single star slurpy

[05:35] <ZzZombo> Yea, thanks for pointing that out.

[05:36] <ZzZombo> BTW, Comma apparently doesn't know about `return` and `fail`...

[05:36] <guifa> it normally does … but sometimes if you have fairly complex syntax it might lose track of the context and it can get screwy

[05:38] <Xliff> m: Version.new(

[05:38] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[05:38] <evalable6> Xliff, Full output: https://gist.github.com/1a2d93786b10e34ebdfa0595f4d78ed1

[05:38] *** Doc_Holliwould joined
[05:38] <Xliff> m: my $a = Version.new("0.9.6"); my #b = Version.new("0.9.16"); say $a > $b

[05:38] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/H4np3pCf6f␤Malformed my␤at /tmp/H4np3pCf6f:1␤------> 03 #b = Version.new("0.9.16"); say $a > $b08⏏04<EOL>␤»

[05:38] <Xliff> m: my $a = Version.new("0.9.6"); my $b = Version.new("0.9.16"); say $a > $b

[05:38] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «False␤»

[05:39] <Xliff> m: my $a = Version.new("0.9.6"); my $b = Version.new("0.9.16"); say $a < $b

[05:39] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «True␤»

[05:39] <ZzZombo> m: my SetHash:D[Str:D] $h = 'asd', 'foo', 'bra';say $h<asd>

[05:39] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) WARNINGS for /tmp/SaLT1tFQHx:␤Use…»

[05:39] <evalable6> ZzZombo, Full output: https://gist.github.com/697f088d6d7e69d0169e4a346269f13d

[05:39] <ZzZombo> m: my SetHash:D[Str:D] $h = 'asd', 'foo', 'bra';say $h

[05:39] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) WARNINGS for /tmp/FdsclHTCBr:␤Use…»

[05:39] <evalable6> ZzZombo, Full output: https://gist.github.com/9a1cdf0ca9924dda519da5bd6d766d86

[05:39] <ZzZombo> perlbot: eval: my SetHash:D[Str:D] $h = 'asd', 'foo', 'bra';say $h

[05:39] <perlbot> ZzZombo: WARNINGS for /tmp/sk2rrAZ_ht:␤Useless use of constant string "foo" in sink context (lines 1, 1)␤Useless use of constant string "bra" in sink context (lines 1, 1)␤Type check failed in assignment to $h; expected SetHash:D but got Str ("asd")␤  in block <unit> at /tmp/sk2rrAZ_ht line 1␤␤[Exited 1]

[05:39] <ZzZombo> perlbot: eval: my SetHash:D[Str:D] $h = ('asd', 'foo', 'bra');say $h

[05:39] <perlbot> ZzZombo: Type check failed in assignment to $h; expected SetHash:D but got List ($("asd", "foo", "bra"))␤  in block <unit> at /tmp/C356VWIQn6 line 1␤␤[Exited 1]

[05:39] <ZzZombo> perlbot: eval: my SetHash:D[Str:D] $h .= new('asd', 'foo', 'bra');say $h

[05:39] <perlbot> ZzZombo: SetHash(asd bra foo)␤

[05:41] <ZzZombo> Is there a shorter version of `sub x (--> 42){}` w/o the empty body at all?

[05:43] <guifa> constant &term:<x> = 42;

[05:43] <guifa> Xliff how does this work?

[05:44] <guifa> m: sub postcircumfix:<{_ _}>(%h,@v) { %( do for @v { $_ => %h{$_} } ) }; my %a = a => 1, b => 2, c => 3, d => 4; say %a{_ "a", "b" _}

[05:44] <evalable6> guifa, rakudo-moar 382d18bda: OUTPUT: «{a => 1, b => 2}␤»

[05:47] <Xliff> m: Version.new("0.9.42").say

[05:47] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «v0.9.42␤»

[05:47] <ZzZombo> It can't be a constant, it actually returns an expression, like `@a.elems`; I'm probably too used to one-liners for such occasions in other languages.

[05:48] <guifa> I just wouldn’t use —> then, it’s not obligatory.  sub x { @_.elems }  would return the elements of the array passed

[05:53] <Xliff> Grabs cpan.json and turns it into something I can use...

[05:54] <Xliff> perl6 -e 'use URI; use JSON::Fast; my $cpan = from-json("cpan.json".IO.slurp); $cpan .= map({ my %h = .pairs.grep( *.key eq <source-url version name auth>.any).Hash; unless %h<auth>:exists { %h<auth> = URI.new(.<source-url>).path.Str.split("/")[5].lc }; if %h<auth>:exists { %h<auth> ~~ s/^ ["github:" | "cpan:" | "CPAN:" | "bitbucket:" | "gitlab:"]//; %h<auth> .= lc if %h<auth>; };  %h }); my %p; for $cpan.Array -> $c { 

[05:54] <Xliff> %p{$c<auth>}{$c<name>}{$c<version>} = $c<source-url> }; for %p.values -> $a { for $a.values -> $p { my @s = $p.keys.map({ Version.new($_) }).Array.sort; $p<versions> = @s.reverse; }; }; "cpan-parsed.json".IO.spurt: to-json(%p)'

[05:54] <Xliff> Bwahahaha!

[06:07] <guifa> Xliff BTW if you ever do for @a -> $a { for @b -> $b { , etc

[06:07] <guifa> use the X operator

[06:09] <guifa> for @a X @b -> $a, $b { 

[06:09] <guifa> it’s even more effective when you have to embed 3 or more

[06:14] <guifa> err oops forgot you hve to deconstruct

[06:15] <guifa> for @a X @b -> ($a, $b) {

[06:18] *** sauvin left
[06:24] *** jmerelo joined
[06:24] <jmerelo> .seen tmtvl

[06:24] <tellable6> jmerelo, I saw tmtvl 2019-12-02T18:04:10Z in #raku: <tmtvl> Shall I share the latest Weekly on the Facebook?

[06:25] <jmerelo> .seen kaiepi

[06:25] <tellable6> jmerelo, I saw kaiepi 2019-12-08T10:52:18Z in #raku-dev: <Kaiepi> ah there you are

[06:25] <ZzZombo> .seen ZzZombo

[06:25] <tellable6> ZzZombo, I saw ZzZombo 2019-12-10T05:47:23Z in #raku: <ZzZombo> It can't be a constant, it actually returns an expression, like `@a.elems`; I'm probably too used to one-liners for such occasions in other languages.

[06:25] <ZzZombo> .seen tellable6

[06:25] <tellable6> ZzZombo, I haven't seen tellable6 around, did you mean evalable6?

[06:25] <ZzZombo> LOL

[06:26] <AlexDaniel> hah

[06:26] <AlexDaniel> you can add some easter egg for that :)

[06:28] <Voldenet> uh, but it's not @a X @b, it's %a.values -> $b { $b.values … }

[06:30] <guifa> Voldenet: good point.  Um… 

[06:30] <guifa> %a.values X %a.values».values.flat

[06:30] <guifa> :D

[06:32] <Voldenet> in this case tho: for %p.map(*.values).flat.map(*.values).flat { $_<versions> = $_.keys.map({ Version.new($_) }).Array.sort.reverse };

[06:34] *** sauvin joined
[06:36] <Voldenet> uh, maybe %p.values>>.values.flat, but I'm not very good at golf

[06:56] *** rindolf joined
[07:04] <Xliff> HAH!

[07:05] <Xliff> I try to sleep and you marvelous people fiddle with my not-golf.

[07:05] *** wamba joined
[07:06] <Xliff> Of course, you all are missing the assignment to %p, which preclues the X.

[07:06] <Xliff> Hmmm... or not...

[07:12] <SmokeMachine> m: my %h = ( a=>1, b=>2, c=>3, e=>4 ); (%h<b c e>:p).Hash.say

[07:12] <evalable6> SmokeMachine, rakudo-moar 382d18bda: OUTPUT: «{b => 2, c => 3, e => 4}␤»

[07:13] <Xliff> SmokeMachine++

[07:23] *** jmerelo left
[07:58] *** stoned75 left
[08:06] <ZzZombo> SmokeMachine: I kinda got how to declare, but how do I use a custom metaclass?

[08:13] <SmokeMachine> ZzZombo: https://github.com/FCO/Red/blob/master/lib/Red.pm6#L39

[08:17] <SmokeMachine> ZzZombo: https://github.com/FCO/Red/blob/master/examples/blog2/Person.pm6#L3

[08:23] <Xliff> m: "filename.tar.gs".IO.extension.basename.say

[08:23] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) No such method 'basename' for invocant of type 'Str'␤  in block <unit> at /tmp/tonL6J9NmD line 1␤␤»

[08:23] <Xliff> m: "filename.tar.gs".IO.extension('').basename.say

[08:23] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «filename.tar␤»

[08:24] <Xliff> m: "filename.tar.gs".IO.extension('', :parts(3)).basename.say

[08:24] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «filename.tar.gs␤»

[08:24] <Xliff> m: "filename.tar.gs".IO.extension('', :parts(2)).basename.say

[08:24] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «filename␤»

[08:25] <Xliff> m: "filename.tar.gs".IO.extension('', :parts(^5)).basename.say

[08:25] <evalable6> Xliff, rakudo-moar 382d18bda: OUTPUT: «filename␤»

[08:34] *** wamba left
[08:35] *** xinming_ joined
[08:37] *** chloekek joined
[08:37] <chloekek> p6: say set(1, 2, 3) R(elem) 1

[08:37] <evalable6> chloekek, rakudo-moar 382d18bda: OUTPUT: «True␤»

[08:37] <chloekek> Ah, camelia was renamed.

[08:37] <chloekek> Didn’t work in DM. :þ

[08:38] *** xinming left
[08:47] <rindolf> .seen TimToady

[08:47] <tellable6> rindolf, I saw TimToady 2019-07-22T20:38:55Z in #perl6-dev: * TimToady had the power company swapping his electric meter, and it broke my / key

[08:51] <ZzZombo> Yea, where is Camelia?

[08:51] <ZzZombo> I want it back!

[08:53] <cpan-raku> New module released to CPAN! Gnome::N (0.15.1.1) by 03MARTIMM

[08:56] *** sena_kun joined
[09:03] <sarna> camelia was renamed?

[09:04] *** Doc_Holliwould left
[09:04] <sena_kun> sarna: hmm? the mascot?

[09:05] <sarna> sena_kun: oh, I think chloekek meant the bot

[09:05] <chloekek> Absolutely.

[09:06] *** SyrupThinker left
[09:08] <sarna> can I get rakudo on ARM? like, a rasp pi

[09:11] *** wamba joined
[09:22] *** patrickb joined
[09:33] *** Doc_Holliwould joined
[09:36] <sarna> ha, you can! https://stackoverflow.com/questions/51604871/is-it-possible-to-compile-install-perl6-on-a-raspberry-pi-3

[09:36] <sarna> very nice :D

[09:43] *** wamba left
[09:43] *** wamba joined
[09:51] *** knoop joined
[09:53] *** knoop left
[09:53] *** knoop joined
[09:54] <knoop> hello raku... glad about the new name... I'm looking for a language that makes sense like Perl does but with simpler dependency management... am I in the right place?

[09:55] <sarna> knoop: what do you mean by "simpler dependency management"?

[09:55] <knoop> well I find npm easy to use

[09:55] <knoop> cpan not so much

[09:56] <benjif> I find zef pretty simple to use

[09:56] <sarna> ah, raku's cli tool is called zef and the modules live at https://modules.raku.org/

[09:56] <tadzik> huh

[09:57] <knoop> I guess before I delve in I was wondering if this was a specific area where raku tries to make it simpler than it was with perl 5

[09:57] <knoop> interested in your views

[09:58] <knoop> but will read up on zef

[09:58] <knoop> too

[09:58] <knoop> thanks!

[09:58] <tadzik> knoop: if you like npm then you might like https://metacpan.org/pod/distribution/App-cpm/script/cpm

[09:58] <tadzik> raku has nothing quite like it though afaik

[09:59] <sarna> knoop: I haven't used perl, but I've heard OO is more convenient in raku

[09:59] <sarna> there are new regexes that are definitely simpler and make more sense, but they take a bit of time to get used to

[10:00] <sarna> I've also heard raku's treatment of sigils is way simpler than perl's, not sure if that's true though

[10:01] <SmokeMachine> knoop: 6pm should be a clone of npm for raku...

[10:01] <knoop> Ah yeah oo was the other point but I already knew that was tackled from the ground up in raku

[10:02] <sarna> I think overall raku should make more sense than perl, but :)  as I said, I have no prior perl experience

[10:02] <SmokeMachine> knoop: https://github.com/FCO/6pm

[10:03] <knoop> thanks for the pointers guys

[10:03] <sarna> you're welcome!

[10:06] <chloekek> The way lists work in Perl 5 and Raku is significant when considering sigil variance.

[10:10] <chloekek> $xs[$i] and @xs[$i] in Perl 5 are both valid but the former evaluates to a scalar whereas the latter evaluates to a single-element list.

[10:10] <chloekek> In Raku what you get when you write @xs[$i] depends on what $i is at runtime.

[10:12] <chloekek> p6: my @xs = qw｢a b c｣; my $i = 0; my $j := (0, 1); @xs[$i].perl.say; @xs[$j].perl.say;

[10:12] <evalable6> chloekek, rakudo-moar 382d18bda: OUTPUT: «"a"␤("a", "b")␤»

[10:21] *** Xliff left
[10:29] *** wamba left
[10:46] <ZzZombo> m: role R {...};class C does R {};say C.new

[10:46] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/KtpVOo3VEc␤No appropriate parametric role variant available for 'R'␤at /tmp/KtpVOo3VEc:1␤»

[10:47] <ZzZombo> m: role R {...};class C does R {};role R {};say C.new

[10:47] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/1RCl0jKe0u␤No appropriate parametric role variant available for 'R'␤at /tmp/1RCl0jKe0u:1␤»

[10:47] <ZzZombo> WTF?

[10:47] <ZzZombo> This makes forward declaration useless for roles.

[10:49] <chloekek> m: role R {...};class C does R {};role R { method m {...}; };say C.new

[10:49] <evalable6> chloekek, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/as6oscVBp9␤No appropriate parametric role variant available for 'R'␤at /tmp/as6oscVBp9:1␤»

[10:49] *** chloekek left
[10:50] <ZzZombo> m: role R {...};class C does R {};role R {};dd R

[10:50] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Vk6S2tFSEC␤No appropriate parametric role variant available for 'R'␤at /tmp/Vk6S2tFSEC:1␤»

[10:50] <ZzZombo> m: role R {...};dd R;role R {}

[10:50] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «R␤»

[10:51] <ZzZombo> m: role R {...};dd R;role R {};dd R

[10:51] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «R␤R␤»

[10:51] <ZzZombo> m: role R {...};dd R.HOW;role R {};dd R.HOW

[10:51] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW.new␤Perl6::Metamodel::ParametricRoleGroupHOW.new␤»

[10:51] <ZzZombo> WTF??

[10:52] <ZzZombo> Why is it parametric all of sudden?

[10:52] <jnthn> All roles are parametric

[10:52] <jnthn> Stubbing a role is like declaring a proto with no multi candidates

[10:53] *** wamba joined
[10:53] *** sena_kun left
[10:53] <jnthn> You can't actually `does` a stubbed role, because composition happens at the time the closing `}` of the class is reached.

[10:53] <jnthn> And composition is flattening

[10:54] <jnthn> So the definition of the role must be available by the point it is composed.

[10:58] <nine> ZzZombo: forward declarations of roles can still be useful for type constraints

[11:00] *** wamba left
[11:07] *** sena_kun joined
[11:09] *** wamba joined
[11:09] *** Doc_Holliwould left
[11:14] *** abraxxa left
[11:14] *** abraxxa joined
[11:20] *** Doc_Holliwould joined
[11:42] <tbrowder> .tell ab6tract when i actually started designing a check-file sub it was not as simple as i first imagined, but, for my use cases, it's becoming clearer

[11:42] <tellable6> tbrowder, I'll pass your message to ab6tract

[11:54] *** wamba left
[12:08] *** wamba joined
[12:22] *** scimon joined
[12:23] *** joule joined
[12:30] *** pmurias joined
[12:32] <pmurias> vrurg: should I merge in: https://github.com/perl6/nqp/pull/590

[12:33] <pmurias> vrurg: I'm not sure if it's waiting for code review before being merged or something else?

[12:36] *** lucasb joined
[12:37] *** wamba left
[12:38] *** wamba joined
[12:39] *** wamba left
[12:39] *** wamba joined
[12:40] *** wamba left
[12:40] *** wamba joined
[12:43] *** scimon left
[12:45] *** wamba left
[12:47] *** scimon joined
[12:48] <ZzZombo> m: say 1.'succ()' #??

[12:48] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[12:48] <evalable6> ZzZombo, Full output: https://gist.github.com/72259a769daa4cedca522260e1734c3c

[12:48] <ZzZombo> What am I doing wrong again?

[12:49] *** Doc_Holliwould left
[12:50] *** wamba joined
[12:53] <lizmat> m: say 1.succ

[12:53] <evalable6> lizmat, rakudo-moar 382d18bda: OUTPUT: «2␤»

[12:53] <sarna> m: say 1.'succ'()

[12:53] <evalable6> sarna, rakudo-moar 382d18bda: OUTPUT: «2␤»

[12:53] <lizmat> ah, ok

[12:54] <sarna> ZzZombo

[12:54] *** sena_kun left
[12:55] *** wamba left
[12:56] <ZzZombo> OK, thanks.

[12:57] *** knoop left
[12:57] *** knoop_ joined
[13:00] *** knoop joined
[13:04] *** knoop_ left
[13:08] *** sena_kun joined
[13:08] <ZzZombo> rkeval: my method m(Positional:D \SELF: ){SELF.grep: * % 2 == 0};(1,2,3,4).&m.say

[13:08] <ZzZombo> rkeval: my method m(Positional:D \SELF: ){SELF.grep: * % 2 == 0};(1,2,3,4).'m'().say

[13:08] <perlbot> ZzZombo: (2 4)␤

[13:08] <perlbot> ZzZombo: No such method 'm' for invocant of type 'List'␤  in block <unit> at /tmp/uNJsFyQQq6 line 1␤␤[Exited 1]

[13:08] <ZzZombo> Why does the second not work?

[13:09] <scimon> Hi all

[13:09] <lizmat> because it does a method lookup for method "m", which List does not have

[13:10] <lizmat> &m is a direct Callable, so (1,2,3,4).&m basically forces the use of the Callable, without any further checks

[13:11] <ZzZombo> rkeval: say ''.&Int

[13:11] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/UqJaV0v4TL␤Illegally post-declared type:␤    Int used at line 1␤␤[Exited 1]

[13:11] <ZzZombo> rkeval: say ''.&say

[13:11] <perlbot> ZzZombo: ␤True␤

[13:14] *** cpan-raku left
[13:16] *** cpan-raku joined
[13:16] *** cpan-raku left
[13:16] *** cpan-raku joined
[13:18] *** maettu left
[13:22] *** pmurias left
[13:26] *** wamba joined
[13:33] <cpan-raku> New module released to CPAN! Gnome::Gdk3 (0.15.0.1) by 03MARTIMM

[13:34] *** xinming_ left
[13:35] *** xinming_ joined
[13:40] *** squashable6 left
[13:41] *** squashable6 joined
[13:49] *** pmurias joined
[14:09] *** Summertime left
[14:10] *** maettu joined
[14:15] *** Summertime joined
[14:22] <Geth> ¦ doc: McSinyx++ created pull request #3126: Substitute Perl 6 with Raku

[14:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3126

[14:25] <sarna> tyil: thanks for the very nice advent posts :D  I learned a lot about grammars

[14:26] <sarna> I even managed to write my own rule for multiline comments

[14:32] <tyil> sarna: nice

[14:33] <tyil> grammars have been one of the hardest (raku) topics to get into for me

[14:33] <tyil> I have a book on grammars, and it's very helpful in my experience, if you want to get better at them

[14:36] *** hungrydonkey joined
[14:36] <sarna> tyil: what is it called?

[14:36] <tyil> "Parsing with Perl 6 Regexes and Grammars"

[14:37] <sarna> also, how to match anything but some string of characters? something like `-[\n]` but I'd like to do `-["foo"]`

[14:37] <sarna> I'll check it out, thanks!

[14:38] <tyil> I do not have an answer on your question, but perhaps you're looking for negative lookahead/behind

[14:40] <sarna> yeah, seems to be it. thanks!

[14:44] <jnthn> I know nothing about what you're trying to parse, but: if that's for keyword handling, it's often more natural to express it in terms of an alternation or protoregexes, and let LTM and the longest literal disambiguation sort it out.

[14:47] *** hungrydonkey left
[14:50] *** hungrydonkey joined
[14:53] *** sena_kun left
[14:55] *** chloekek joined
[14:59] *** hungrydonkey left
[15:03] *** hungrydonkey joined
[15:07] *** zby joined
[15:07] *** sena_kun joined
[15:09] <sarna> jnthn: I just think my multiline comment rule is too greedy :D it works fine on small strings but in a real file it matches until the end of the last multiline comment (I think)

[15:11] *** hungrydonkey left
[15:12] <sarna> it’s `‘/*’ <( .* )> ‘*/‘`

[15:13] <chloekek> p6: say '/* foo */ /* bar */' ~~ /‘/*’ <( .* )> ‘*/’/

[15:13] <evalable6> chloekek, rakudo-moar 3941fef00: OUTPUT: «｢ foo */ /* bar ｣␤»

[15:13] <chloekek> p6: say '/* foo */ /* bar */' ~~ /‘/*’ <( .*? )> ‘*/’/

[15:13] <evalable6> chloekek, rakudo-moar 3941fef00: OUTPUT: «｢ foo ｣␤»

[15:15] <sarna> oh nice! why does that work?

[15:15] <sarna> does ? make it not greedy?

[15:15] *** hungrydonkey joined
[15:15] <chloekek> .*? is not the same as [.*]?. Instead, *? is special syntax for a non-greedy match.

[15:16] <chloekek> You can also use a negative lookahead:

[15:16] <chloekek> p6: say '/* foo */ /* bar */' ~~ /‘/*’ <( [. <!before ‘*/’>]* )> ‘*/’/

[15:16] <evalable6> chloekek, rakudo-moar 3941fef00: OUTPUT: «Nil␤»

[15:19] *** Doc_Holliwould joined
[15:20] <sarna> awesome, thanks chloekek :)

[15:20] <chloekek> p6: say '/* foo */ /* bar */' ~~ /‘/*’ <( [<!before ‘*/’> .]* )> ‘*/’/

[15:20] <evalable6> chloekek, rakudo-moar 3941fef00: OUTPUT: «｢ foo ｣␤»

[15:22] <chloekek> p6: say '/* foo /* bar */ */ /* baz */' ~~ /‘/*’ <( .*? )> ‘*/’/

[15:22] <evalable6> chloekek, rakudo-moar 3941fef00: OUTPUT: «｢ foo /* bar ｣␤»

[15:25] *** wamba left
[15:25] *** wamba joined
[15:25] *** hungrydonkey left
[15:28] <sarna> oh, that’s why I was getting Nil with !before

[15:28] <sarna> I put the dot before <> too :D

[15:29] *** pmurias left
[15:29] *** pmurias joined
[15:29] <chloekek> . already matches * <!before> wouldn’t get to see it.

[15:29] *** hungrydonkey joined
[15:30] <sarna> right

[15:49] *** hungrydonkey left
[15:51] *** wamba1 joined
[15:51] *** wamba left
[16:10] *** pmurias left
[16:11] *** chloekek left
[16:38] *** jmerelo joined
[16:39] <Geth> ¦ doc: b4db2e6616 | (Nguyễn Gia Phong)++ | doc/Type/Cool.pod6

[16:39] <Geth> ¦ doc: Substitute Perl 6 with Raku

[16:39] <Geth> ¦ doc: 

[16:39] <Geth> ¦ doc: Handle irregular cases (pun intended) and whitespace to complete #3054

[16:39] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/b4db2e6616

[16:39] <Geth> ¦ doc: a81f8c0d22 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Cool.pod6

[16:39] <Geth> ¦ doc: Merge pull request #3126 from McSinyx/master

[16:39] <Geth> ¦ doc: 

[16:39] <Geth> ¦ doc: Substitute Perl 6 with Raku

[16:39] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a81f8c0d22

[16:44] *** patrickb left
[16:44] *** mscha joined
[16:44] <mscha> m: my $a = 5+i; my $step = -1+i; for $a+$step, $a+2×$step ... * -> $b { say $b; last if ++$ ≥ 10; }

[16:44] <evalable6> mscha, rakudo-moar 3941fef00: OUTPUT: «4+2i␤3+3i␤2+3i␤1+3i␤0+3i␤-1+3i␤-2+3i␤-3+3i␤-4+3i␤-5+3i␤»

[16:45] <mscha> Huh?

[16:48] <mscha> my $a = 5+i; my $step = -1+i; say ($a+$step, $a+2×$step ... *)[^10]; # Simpler, still broken

[16:48] <evalable6> mscha, rakudo-moar 3941fef00: OUTPUT: «(4+2i 3+3i 2+3i 1+3i 0+3i -1+3i -2+3i -3+3i -4+3i -5+3i)␤»

[16:52] *** scimon left
[16:52] <mscha> https://github.com/rakudo/rakudo/issues/3344

[16:53] *** sena_kun left
[16:54] <mscha> m: my $a = 5+i; my $step = -1+i; loop (my $b = $a+$step; ; $b += $step) { say $b; last if ++$ ≥ 10; }

[16:54] <evalable6> mscha, rakudo-moar 3941fef00: OUTPUT: «4+2i␤3+3i␤2+4i␤1+5i␤0+6i␤-1+7i␤-2+8i␤-3+9i␤-4+10i␤-5+11i␤»

[16:56] <Geth> ¦ advent: tmtvl++ created pull request #43: Update drafts

[16:56] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/43

[17:04] <Geth> ¦ advent: a013579013 | (Tom Browder)++ (committed using GitHub Web editor) | raku-advent-2019/schedule

[17:04] <Geth> ¦ advent: update schedule

[17:04] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/a013579013

[17:07] *** wamba1 left
[17:08] *** sena_kun joined
[17:18] <Geth> ¦ advent: be05891746 | (Tim Van den Langenbergh)++ (committed using GitHub Web editor) | raku-advent-2019/drafts

[17:18] <Geth> ¦ advent: Update drafts

[17:18] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/be05891746

[17:18] <Geth> ¦ advent: 14201a542a | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | raku-advent-2019/drafts

[17:18] <Geth> ¦ advent: Merge pull request #43 from tmtvl/patch-1

[17:18] <Geth> ¦ advent: 

[17:18] <Geth> ¦ advent: Update drafts

[17:18] <Geth> ¦ advent: review: https://github.com/Raku/advent/commit/14201a542a

[17:33] * lizmat clickbaits https://rakudoweekly.blog/2019/12/09/2019-49-almost-starring/

[17:54] <Geth> ¦ whateverable: f645470099 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META6.json

[17:54] <Geth> ¦ whateverable: Depend on “sake” instead of “Sake”

[17:54] <Geth> ¦ whateverable: 

[17:54] <Geth> ¦ whateverable: See #370 and https://github.com/ugexe/zef/issues/327.

[17:54] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f645470099

[18:10] *** stoned75 joined
[18:20] *** chloekek joined
[18:23] *** wildtrees joined
[18:24] *** wildtrees left
[18:27] *** knoop left
[18:28] *** wamba joined
[18:28] *** xinming_ left
[18:28] *** knoop joined
[18:29] *** xinming_ joined
[18:39] *** wamba left
[18:39] *** wamba joined
[18:45] *** wildtrees joined
[18:54] *** sena_kun left
[19:08] *** sena_kun joined
[19:11] <sena_kun> m: { :a, {{ True ?? :prefix<42> !! hash }} }

[19:11] <evalable6> sena_kun, rakudo-moar 657d36f17: OUTPUT: «(exit code 1) Odd number of elements found wher…»

[19:12] <evalable6> sena_kun, Full output: https://gist.github.com/85bc553f3ff505b36fb145974739e3f6

[19:12] <sena_kun> any ideas how to DWIM?

[19:14] <sena_kun> oops

[19:14] <sena_kun> m: { :a, |{ True ?? :prefix<42> !! hash } }

[19:14] <evalable6> sena_kun, rakudo-moar 657d36f17: OUTPUT: «(exit code 1) Odd number of elements found wher…»

[19:14] <evalable6> sena_kun, Full output: https://gist.github.com/f8b814e93a1f1551df2c1b3e70f9f252

[19:46] <jmerelo> Search results for Raku going up: binary input output Raku gets the official documentation in third place https://www.google.com/search?client=ubuntu&channel=fs&q=binary+input+output+raku&ie=utf-8&oe=utf-8

[19:46] <tellable6> 2019-12-10T04:56:21Z #raku <guifa> jmerelo Sent you an e-mail to your university account.  Sorry for the delay!

[19:46] <jmerelo> Still not the first, but we're getting there...

[19:54] <El_Che> jmerelo: lo

[19:58] *** jmerelo left
[20:12] *** mscha left
[20:14] *** daxim left
[20:21] *** daxim joined
[20:47] *** chloekek left
[20:53] *** sena_kun left
[20:59] *** joule left
[21:03] *** thundergnat joined
[21:04] <thundergnat> m: my $a = 5+i; my $step = -1+i; say ({$a + ++$ × $step} ... *)[^10]

[21:04] <evalable6> thundergnat, rakudo-moar 4252a8c98: OUTPUT: «(4+2i 3+3i 2+4i 1+5i 0+6i -1+7i -2+8i -3+9i -4+10i -5+11i)␤»

[21:04] <tellable6> 2019-11-14T18:15:33Z #raku <tbrowder> thundergnat avl tree is on rosettacode.org

[21:04] <thundergnat> mscha ^^

[21:09] *** sena_kun joined
[21:12] *** pmurias joined
[21:34] *** just_why joined
[21:34] <just_why> Hi. Why did you do that ?

[21:41] *** just_why left
[21:54] *** zby left
[21:59] *** pmurias left
[22:01] *** pmurias joined
[22:27] *** atweiden-air joined
[22:33] <atweiden-air> it's 2019-12-11 where i'm at, but rakudo is reporting 2019-12-10

[22:35] <atweiden-air> i've tested this on macos with rakudo-2019.07.1 and on voidlinux with rakudo-2019.11

[22:35] <atweiden-air> $*TZ

[22:37] <atweiden-air> Pacific/Auckland

[22:37] <atweiden-air> 46800

[22:37] <atweiden-air> ?

[22:38] *** knoop left
[22:38] <atweiden-air> ah, i see now.DateTime and DateTime.now are producing different results

[22:39] <atweiden-air> i hadn't realized this from reading the docs https://docs.perl6.org/routine/now which suggest now's timezone=$*TZ by default

[22:40] <atweiden-air> i guess it's UTC though

[22:41] <lizmat> hmmm... feels to me they should produce the same result, though ?

[22:42] <atweiden-air> DateTime.now.Date works

[22:43] *** sena_kun left
[23:04] *** knoop_ joined
[23:15] *** atweiden-air left
[23:27] *** clarjon1 joined
[23:27] *** rindolf left
[23:50] *** knoop_ left
[23:55] *** wamba left
