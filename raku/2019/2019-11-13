[00:00] *** rindolf left
[00:06] <tbrowder> i think i'll put it on rosetta code as is. anyone can modify it as needed.

[00:09] *** marcusr left
[00:10] *** marcusr joined
[00:35] *** HoboWithAShotgun joined
[00:38] *** Doc_Holliwood left
[00:47] *** HoboWithAShotgun left
[01:13] *** squashable6 left
[01:15] *** squashable6 joined
[01:17] *** squashable6 left
[01:18] *** squashable6 joined
[01:35] *** marcusr left
[01:36] *** marcusr joined
[01:45] <Geth> ¦ problem-solving: vrurg assigned to jnthn Issue FQN method calls may need clarification https://github.com/perl6/problem-solving/issues/129

[01:48] *** wildtrees left
[02:08] *** stanley_tam joined
[02:48] *** Kaeipi left
[02:49] *** Kaeipi joined
[03:06] *** hythm joined
[03:31] *** xinming left
[03:31] *** xinming joined
[04:31] *** nativecallable6 left
[04:31] *** notable6 left
[04:31] *** benchable6 left
[04:31] *** greppable6 left
[04:31] *** shareable6 left
[04:31] *** statisfiable6 left
[04:31] *** reportable6 left
[04:31] *** coverable6 left
[04:31] *** unicodable6 left
[04:31] *** squashable6 left
[04:31] *** bloatable6 left
[04:31] *** quotable6 left
[04:31] *** releasable6 left
[04:31] *** committable6 left
[04:32] *** squashable6 joined
[04:32] *** bloatable6 joined
[04:32] *** coverable6 joined
[04:32] *** quotable6 joined
[04:32] *** committable6 joined
[04:32] *** releasable6 joined
[04:32] *** reportable6 joined
[04:33] *** nativecallable6 joined
[04:33] *** notable6 joined
[04:33] *** shareable6 joined
[04:34] *** greppable6 joined
[04:34] *** benchable6 joined
[04:34] *** unicodable6 joined
[04:34] *** statisfiable6 joined
[04:47] *** rindolf joined
[05:31] *** rindolf left
[05:32] *** hythm left
[05:39] *** hythm joined
[05:57] *** xinming left
[06:01] *** xinming joined
[06:03] *** robertle left
[06:05] *** Merfont joined
[06:05] *** Kaeipi left
[06:07] *** cpan-raku left
[06:08] *** cpan-raku joined
[06:08] *** cpan-raku left
[06:08] *** cpan-raku joined
[06:19] *** stoned75 left
[06:26] *** maettu joined
[07:17] *** stoned75 joined
[07:35] *** nebuchadnezzar joined
[07:39] *** stoned75 left
[08:34] *** clarjon1 joined
[09:00] *** robertle joined
[09:01] *** sena_kun joined
[09:05] *** sarna joined
[09:07] *** Altai-man_ joined
[09:09] *** chloekek joined
[09:10] *** sena_kun left
[10:07] *** MasterDuke left
[10:26] <El_Che> SmokeMachine: It's not clear from the github page of Red supports Mysql/MariaDB. Does it

[10:26] <El_Che> SmokeMachine: It's not clear from the github page of Red supports Mysql/MariaDB. Does it?

[10:26] <SmokeMachine> it doesn’t yet...

[10:26] <SmokeMachine> El_Che: ^^

[10:27] <SmokeMachine> El_Che: but it’s just a question of creating a new driver...

[10:27] <El_Che> SmokeMachine: thank you. (Our admins guys only have Mysql and Oracle clusters running)

[10:28] <El_Che> SmokeMachine: looking at the SQLlite one. Not sure if  I get what it does :)

[10:29] <El_Che> SmokeMachine: so the driver for sqllite is completely implemented in SQLiteMaster.pm6 and SchemaReader.pm6?

[10:30] <El_Che> No binary libs linked somewhere?

[10:30] <SmokeMachine> El_Che: no, its implemented here: https://github.com/FCO/Red/blob/master/lib/Red/Driver/SQLite.pm6

[10:31] <SmokeMachine> El_Che: those 2 classes are just to given a db, read it and create new models...

[10:31] <El_Che> so this: https://github.com/perl6/DBIish (and nativecalls)

[10:31] <El_Che> got it

[10:31] <SmokeMachine> the driver itself is this file I’ve sent you...

[10:32] <El_Che> the driver is kind of the interface with DBIish

[10:32] <El_Che> like DBI/DBM thing in P5

[10:32] <SmokeMachine> Yes… this and a way to translate the AST specific to that database...

[10:33] <El_Che> you wrote a lot of code, Red is pretty big

[10:33] <El_Che> SmokeMachine++

[10:33] <SmokeMachine> El_Che: but most of the translation (the SQL commom part) is implemented on CommonSQL...

[10:33] <SmokeMachine> :)

[10:34] <SmokeMachine> Yes… it’s getting big… but it’s still far from complete… :(

[10:34] <El_Che> SmokeMachine: only browsing the code (too busy as it's the end of the planning cycle at work), but it's pretty impressive so far

[10:35] <SmokeMachine> El_Che: :) thanks

[10:35] <El_Che> in the code I see: 

[10:35] <El_Che> Person.^create-table;

[10:35] <El_Che> why the ^?

[10:35] <SmokeMachine> It’s a meta-method call...

[10:35] <El_Che> yeah, why not a regular method I mean

[10:35] <SmokeMachine> Red do not add any method on your model...

[10:36] <El_Che> I see

[10:36] <El_Che> nice of you :)

[10:36] <El_Che> got to go, ad hoc meetign

[10:37] <SmokeMachine> As in a class, you have to call .^attributes to get the attributes, in a model you have to call .^columns to get the columns...

[10:37] <SmokeMachine> and you need to use meta-methods for everything that touches the database...

[10:44] *** stanley_tam left
[11:04] *** thundergnat left
[11:09] *** sena_kun joined
[11:10] *** Altai-man_ left
[11:38] *** stanley_tam joined
[12:06] *** xinming left
[12:09] *** xinming joined
[12:35] *** kensanata joined
[12:37] *** lucasb joined
[12:39] *** stanley_tam left
[13:07] *** Altai-man_ joined
[13:10] *** sena_kun left
[13:52] *** eiro joined
[14:17] *** mid_laptop joined
[14:25] <kawaii> Hi, I'm using IO.watch to check for new files being created on a filesystem, but it seems that it doesn't check recursively within any subdirs of the path I've given it, any ideas? :) https://www.irccloud.com/pastebin/HFBm8Jv7/

[14:26] <kawaii> it only searches the root of my `%configuration<geotrack-filepath>`

[14:37] <vrurg> kawaii: This limitation partly comes from libuv too: http://docs.libuv.org/en/v1.x/fs_event.html

[14:42] <vrurg> But MoarVM doesn't set the recursive flag anyway. Perhaps, it should be optional.

[14:43] <kawaii> vrurg: any hacky workaround to maybe detect all of the directories contained within a path and set up an array of event listeners?

[14:43] <kawaii> :)

[14:46] <vrurg> kawaii: same could be achieved in Raku too. BTW, I might have seen something like this in a module. Could a deja vu though.

[15:01] *** delimited joined
[15:08] *** sena_kun joined
[15:10] *** Altai-man_ left
[15:11] *** xinming left
[15:13] *** xinming joined
[15:47] <jnthn> vrurg: I think there's maybe a module; Cro certainly has code to do it also that could be borrowed

[15:48] <jnthn> uh, kawaii ^^ :)

[15:48] <jnthn> It was hard enough to get right that I sometimes wonder if we shouldn't provide for it in core...

[15:48] *** delimited left
[15:51] <vrurg> jnthn: why not provide optional support for UV_FS_EVENT_RECURSIVE in moar? IO::Notifications could then make use of it and bail out on unsupported yet platforms.

[15:52] * vrurg is afk

[15:53] <kawaii> jnthn: if you could point me in the rigth direction that would be great :)

[15:53] <kawaii> I have a directory which then has a dozen or so subdirs, and I need to monitor each one for new files 

[15:55] <jnthn> There's even https://github.com/croservices/cro/issues/48 for it

[15:56] <jnthn> https://github.com/croservices/cro/blob/master/lib/Cro/Tools/Services.pm6#L159 is the code you're after

[15:58] <kawaii> jnthn: that seems to accept a hash of dirs, can we not do it dynamically?

[15:59] <jnthn> It takes an IO::Path?

[16:00] <jnthn> `sub watch-recursive(IO::Path $path) {`

[16:00] <kawaii> oh right I read it wrong, yes I see now

[16:03] *** delimited joined
[16:09] <kawaii> jnthn: seems like I can't just hot-swap it in my code `whenever %configuration<geotrack-filepath>.watch-recursive -> $event`

[16:09] <kawaii> `%configuration<geotrack-filepath>` is a Str, a path

[16:10] <kawaii> `    No such method 'watch-recursive' for invocant of type 'Str'`

[16:10] <jnthn> If you just copied it, then it's a sub, so you'd need to use .&watch-recursive

[16:11] <jnthn> But you'll also need to coerce to an IO path too (.IO)

[16:11] <jnthn> You'd have to do that to call .watch though...

[16:11] <kawaii> I just added a `use Cro::Tools::Services;` to my code because lazy

[16:14] <kawaii> hey I got it working!

[16:14] <kawaii> thanks jnthn!

[16:16] <jnthn> :)

[16:26] *** jmerelo joined
[16:27] *** kensanata left
[16:32] *** xinming left
[16:34] *** mid_laptop left
[16:34] *** xinming joined
[16:45] *** delimited left
[17:04] *** delimited joined
[17:07] *** Altai-man_ joined
[17:10] *** delimited left
[17:10] *** sena_kun left
[17:12] *** robertle left
[17:42] *** veesh left
[17:42] *** veesh joined
[17:43] *** abraxxa left
[17:43] *** abraxxa joined
[17:44] *** abraxxa left
[17:45] *** abraxxa joined
[17:49] *** xinming left
[17:50] *** xinming joined
[17:52] *** MasterDuke joined
[18:02] *** delimited joined
[18:05] *** abraxxa left
[18:22] *** robertle joined
[18:40] *** chloekek_ joined
[19:09] *** sena_kun joined
[19:10] *** Altai-man_ left
[19:24] *** hythm_ joined
[19:30] *** ufobat_ left
[19:35] *** hythm_ left
[19:37] *** hythm_ joined
[19:41] *** stoned75 joined
[19:44] *** wildtrees joined
[19:44] *** wildtrees left
[19:45] *** stoned75_ joined
[19:45] *** wildtrees joined
[19:48] *** wamba joined
[19:53] *** jmerelo left
[19:53] *** xinming left
[19:55] *** xinming joined
[20:12] *** hythm_ left
[20:17] *** delimited left
[20:17] *** delimited joined
[20:21] *** maggotbrain joined
[20:33] *** delimited left
[20:34] *** delimited joined
[20:35] *** sena_kun left
[20:36] *** hythm left
[20:44] *** delimited left
[20:44] *** delimited joined
[20:44] *** patrickb joined
[21:19] *** MasterDuke left
[21:25] *** Merfont left
[21:26] *** Merfont joined
[21:35] *** robertle left
[21:41] *** Kaeipi joined
[21:42] *** Merfont left
[21:49] *** Kaeipi left
[22:05] *** Kaiepi joined
[22:07] *** chloekek_ left
[22:26] *** Xliff joined
[22:26] <Xliff> o/

[22:26] <Xliff> What's the best way to define a conditional constant?

[22:27] <Xliff> m: my $a; BEGIN { $a = 1; }; constant B := $a; B.say

[22:27] <camelia> rakudo-moar 75056dfa1: OUTPUT: «1␤»

[22:27] <Xliff> m: my $a; BEGIN { $a = 2; }; constant B := $a; B.say

[22:27] <camelia> rakudo-moar 75056dfa1: OUTPUT: «2␤»

[22:28] <Xliff> my $bits := BEGIN $*KERNEL.bits == 32 ?? uint32 !! uint64; our constant Pid is export := $bits; Pid.say

[22:28] <evalable6> Xliff, rakudo-moar 75056dfa1: OUTPUT: «(Any)␤»

[22:28] <Xliff> my $bits := do BEGIN { $*KERNEL.bits == 32 ?? uint32 !! uint64 }; our constant Pid is export := $bits; Pid.say

[22:28] <evalable6> Xliff, rakudo-moar 75056dfa1: OUTPUT: «(Any)␤»

[22:29] <Xliff> my $bits; BEGIN { $bits = $*KERNEL.bits == 32 ?? uint32 !! uint64 }; our constant Pid is export := $bits; Pid.say

[22:29] <evalable6> Xliff, rakudo-moar 75056dfa1: OUTPUT: «(uint64)␤»

[22:30] <Xliff> my $bits; BEGIN { $bits := $*KERNEL.bits == 32 ?? uint32 !! uint64 }; our constant Pid is export := $bits; Pid.say

[22:30] <evalable6> Xliff, rakudo-moar 75056dfa1: OUTPUT: «(Any)␤»

[22:30] <Xliff> Wow! Can't bind? Huh

[23:05] *** patrickb left
[23:07] *** cpan-raku left
[23:08] *** cpan-raku joined
[23:08] *** cpan-raku left
[23:08] *** cpan-raku joined
[23:29] <elcaro> how do I query which version of a module I have installed

[23:29] <elcaro> eqv to perl5's $Module::Name::VERSION

