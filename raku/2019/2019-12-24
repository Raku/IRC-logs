[00:07] *** finanalyst left
[00:14] *** squashable6 left
[00:15] *** johnjohn101 joined
[00:15] *** squashable6 joined
[00:16] *** pmurias left
[00:50] *** sena_kun left
[01:17] *** marcusr left
[01:19] *** marcusr joined
[01:41] *** squashable6 left
[01:43] *** squashable6 joined
[01:53] *** kalkin-- joined
[01:57] *** kalkin- left
[02:03] *** xinming left
[02:03] *** xinming joined
[02:05] *** wildtrees left
[02:10] *** mahmudov left
[02:27] *** leont left
[03:27] *** releasable6 left
[03:27] *** bloatable6 left
[03:27] *** nativecallable6 left
[03:27] *** squashable6 left
[03:27] *** statisfiable6 left
[03:27] *** quotable6 left
[03:27] *** unicodable6 left
[03:27] *** committable6 left
[03:27] *** notable6 left
[03:27] *** bisectable6 left
[03:27] *** coverable6 left
[03:27] *** reportable6 left
[03:27] *** greppable6 left
[03:27] *** benchable6 left
[03:27] *** sourceable6 left
[03:27] *** shareable6 left
[03:28] *** nativecallable6 joined
[03:28] *** bisectable6 joined
[03:28] *** bloatable6 joined
[03:28] *** reportable6 joined
[03:28] *** notable6 joined
[03:28] *** statisfiable6 joined
[03:28] *** releasable6 joined
[03:28] *** committable6 joined
[03:28] *** quotable6 joined
[03:29] *** squashable6 joined
[03:29] *** shareable6 joined
[03:29] *** benchable6 joined
[03:30] *** sourceable6 joined
[03:30] *** greppable6 joined
[03:30] *** coverable6 joined
[03:30] *** unicodable6 joined
[04:21] *** johnjohn101 left
[04:47] *** guifa2 left
[04:58] *** guifa2 joined
[05:09] *** guifa2 left
[05:11] *** guifa2 joined
[05:19] *** guifa2 left
[06:14] *** ZzZombo_ joined
[06:17] *** ZzZombo left
[06:17] *** ZzZombo_ is now known as ZzZombo

[06:37] *** ZzZombo_ joined
[06:41] *** ZzZombo left
[06:41] *** ZzZombo_ is now known as ZzZombo

[06:52] *** AlexDani` left
[07:06] <kalkin--> tbrowder: yoou mean this: https://www.youtube.com/watch?v=Jes3bD6P0To?

[07:10] *** kalkin-- is now known as kalkin-

[07:12] *** stoned75 joined
[07:15] <kalkin-> tbrowder: pod parser from scratch might be a good idea, because it's much more approachable for me, than understanding the whole Grammar.nqp

[07:15] *** mahmudov joined
[07:26] *** stoned75 left
[07:52] <kalkin-> tbrowder: after watching the tree-sitter video, I'm not sure if we can use a Perl6 Grammar with tree-sitter like approach. I need more details on what AlexDaniel meant, I couldn't find anything in the history

[08:23] *** sauvin joined
[08:26] *** wamba joined
[08:27] *** kensanata joined
[08:31] *** wamba left
[08:33] *** daemonguy joined
[08:42] <AlexDaniel`> hmm?

[08:43] <AlexDaniel`> what did I say? :) I can probably explain what I meant

[08:55] <kalkin-> > tbrowder: kalkin: did you see reference to the "tree-sitter" streaming gramar parser mentioned i think by AlexDaniel a few weeks ago?

[08:55] <kalkin-> context is pod parsing

[08:56] <kalkin-> currently it's pretty buggy and there is the idea flowing in the room, to separate it from Grammar.nqp

[08:57] *** daemonguy left
[09:06] *** rindolf joined
[09:12] *** vividsnow left
[09:15] *** leont joined
[09:20] *** leont left
[09:23] *** rindolf left
[09:30] *** vividsnow joined
[09:33] *** rindolf joined
[10:20] *** kalkin- left
[10:20] *** kalkin- joined
[10:32] *** dogbert17 left
[10:33] *** dogbert17 joined
[10:40] *** pilne left
[10:47] *** mid_laptop joined
[11:11] *** kensanata left
[11:13] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2019/12/24/2019-51-2-holidays/

[11:41] *** pat_js left
[11:49] *** kensanata joined
[12:04] <cpan-raku> New module released to CPAN! App::Mi6 (0.3.0) by 03SKAJI

[12:27] *** sena_kun joined
[12:48] *** hacktor left
[12:59] *** chloekek joined
[13:01] *** rindolf left
[13:02] <chloekek> Spreadsheet function: sub l√∂b(@fs) { my @xs = @fs.map({ &^f(@xs) }).lazy; @xs; }

[13:02] <chloekek> p6: sub l√∂b(@fs) { my @xs = @fs.map({ &^f(@xs) }).lazy; @xs; }; say l√∂b([ -> @cells { 1 }, -> @cells { 2 }, -> @cells { @cells[0] + @cells[1] } ]).eager

[13:02] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[13:02] *** hacktor joined
[13:03] <chloekek> The Excel equivalent would be A1=1, B1=2, C1=SUM(A1, B1)

[13:04] *** rindolf joined
[13:06] <chloekek> Shorter version:

[13:06] <chloekek> sub l√∂b(*@f) { my @r = @f.map({ $_(@r) }).lazy }; .say for l√∂b({ 1 }, { 2 }, { [+] @^s[0, 1] })

[13:06] <evalable6> chloekek, rakudo-moar 9a571b685: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[13:13] <chloekek> It suddenly occurred to me that this is a nice technique for implementing type checking of programming languages with both return type inference and mutually recursive functions.

[13:14] <chloekek> Just write @definitions Z l√∂b(@definitions.map(&type-check)) to pair each definition with its type.

[13:19] *** AlexDani` joined
[13:21] <cpan-raku> New module released to CPAN! App::Mi6 (0.3.1) by 03SKAJI

[13:23] *** sena_kun left
[13:37] *** sena_kun joined
[13:42] *** kensanata left
[13:48] <tbrowder> kalkin: how would you approach the rewrite? i'm thinking first about the start/end points as a grouping of similar behavior, that is, the several, quite different ways we jump into pod and then jump out again as independent chunks. then refactor and refit.

[14:07] *** AlexDani` is now known as AlexDaniel

[14:07] *** AlexDaniel left
[14:07] *** AlexDaniel joined
[14:26] *** vividsnow left
[14:28] *** vividsnow joined
[14:34] *** xinming left
[14:35] *** xinming joined
[14:38] *** vividsnow left
[14:38] *** vividsnow joined
[14:40] *** xinming left
[14:41] *** xinming joined
[14:48] *** vividsnow left
[14:49] *** vividsnow joined
[14:55] <cpan-raku> New module released to CPAN! Math::Libgsl (0.0.2) by 03FRITH

[14:57] *** chloekek left
[15:00] *** cpan-raku left
[15:03] *** cpan-raku joined
[15:03] *** cpan-raku left
[15:03] *** cpan-raku joined
[15:15] <kalkin-> tbrowder: I thought I would write a grammar, which parses POD and _only_ POD. So in Grammar.nqp you can just find a piece of pod and call PodGrammar.parse($stuff, actions=>PodActions.new); 

[15:16] *** leont joined
[15:16] <kalkin-> The grammar wouldn't be responsible in case of leading/trailing POD for attaching it to a Code object, because then it needs to be able to parse Perl6 

[15:16] <kalkin-> but may be my approach is to na√Øve

[15:22] *** sena_kun left
[15:22] *** ZzZombo left
[15:23] *** ZzZombo joined
[15:37] *** sena_kun joined
[15:51] *** rindolf left
[15:56] *** rindolf joined
[16:07] *** mid_laptop left
[16:09] *** guifa2 joined
[16:14] <tbrowder> give it a shot. will you put it where you can take PRs?

[16:22] <kalkin-> I will inform you once I have some code

[16:23] <kalkin-> I actually wanted to rewrite, cleanup & document my Git::Plumbing module. While documenting it I ended up writing my own POD Renderer and this lead me to finding a bunch of weird stuff in Pod :D

[16:25] <kalkin-> But the Pod::Renderer ( a fork of Pod::To::Pager, the author seems to abandoned it, I tried conctacting him), is coming along very well. Because I'm using it while writing POD

[16:25] <kalkin-> Long story short, once I finish up with Git::Plumbing and release it, I will start working on a Pod Grammar.

[16:43] *** dogbert2 joined
[16:46] *** dogbert17 left
[16:54] *** guifa2 left
[17:02] *** guifa2 joined
[17:06] *** guifa2 left
[17:19] *** AlexDaniel left
[17:23] *** sena_kun left
[17:36] *** tejr left
[17:38] *** sena_kun joined
[17:39] *** tejr joined
[17:51] *** vividsnow left
[17:56] *** vividsnow joined
[18:05] *** vividsnow left
[18:07] *** vividsnow joined
[18:09] *** finanalyst joined
[18:16] *** vividsnow left
[18:16] *** vividsnow joined
[18:18] *** cpan-raku left
[18:19] *** cpan-raku joined
[18:19] *** cpan-raku left
[18:19] *** cpan-raku joined
[18:34] *** wildtrees joined
[18:55] *** johnjohn101 joined
[19:05] *** chloekek joined
[19:23] *** sena_kun left
[19:38] *** sena_kun joined
[20:06] *** squashable6 left
[20:07] *** squashable6 joined
[20:12] <chloekek> How does Inline::Perl5 cope with Raku threads?

[20:12] <chloekek> I want to deploy a Cro::HTTP app that uses it but I‚Äôm scared my server gets owned due to a data race.

[20:12] * chloekek should stop using Inline::Perl5 just for Digest::SHA.

[20:15] <Grinnz> perhaps you could nativecall to https://github.com/libtom/libtomcrypt ?

[20:16] <chloekek> I already have a dependency on OpenSSL through Cro::HTTP so I‚Äôd probably use that.

[20:16] *** guifa2 joined
[20:21] *** guifa2 left
[20:30] <chloekek> Something funny happened with Cro::HTTP 0.7.6. :)

[20:31] <chloekek> It has 0 dependencies and the tag list is ["Choose me!"].

[20:31] <chloekek> All other versions are more descriptive.

[20:31] <chloekek> Ah, license, not tag list.

[20:42] <sena_kun> chloekek: that was an unhappy accident. :S

[20:51] <chloekek> Oh. :(

[21:22] *** sena_kun left
[21:29] *** rindolf left
[21:37] *** sena_kun joined
[21:44] *** wamba joined
[21:45] *** guifa2 joined
[21:52] <chloekek> Why do functions like encode take a string with the encoding name, rather than some object that does encoding?

[22:18] *** wamba left
[22:35] <guifa2> chloekek: it's probably on a principle of keeping things simpler for the user.  Internally it does a look up based on the encoding name

[22:35] <tellable6> 2019-12-22T16:21:05Z #raku <kalkin-> guifa looking at Grammar.nqp there're two methods for attaching leading/trailing pod. I'm not sure why it's implemented this way

[22:35] <tellable6> 2019-12-22T16:25:02Z #raku <kalkin-> guifa never mind, it's for attaching it the actual code parts

[22:37] <guifa2> But if you notice the way that Str.encode() is defined, it's a multi, so it could be easily later implemented with encode(Str:D $name) or encode(Callable:D &conversion-code) or encode(EncoderRole $encoder)

[22:37] <[Coke]> (string) wonder if we should move that to an enum

[22:37] <guifa2> (you could actually augment it to do that if you wanted)

[22:45] *** wildtrees_ joined
[22:49] *** wildtrees left
[23:04] *** wildtrees_ left
[23:13] <guifa2> [Coke]: the problem is that enums can't be extended at runtime, so actually Str works best.  Modules can call Encoding::Registry.register() to register names and allomorphs (e.g. 'utf8', 'UTF-8', 'utf-8'), and then when you call .encode<foo>, it uses Encoding::Registry.find('foo') to grab the encoder

[23:18] *** vividsnow left
[23:19] *** Tirifto joined
[23:19] *** chloekek left
[23:20] <Tirifto> Merry Christmas! (Unless I'm late and the whole community has moved on to celebrating Diwali now. :))

[23:21] <guifa2> It's not even the 25th yet for some of us :-)

[23:22] *** sena_kun left
[23:23] <sjn> Yeah, merry christmas!

[23:24] *** vividsnow joined
[23:26] <Tirifto> Ah, perhaps my international information is a bit tangled. Over here (Czech Republic) we regard 24‚Äì26th of December as Christmas, but I'm not sure how well that carries over to elsewhere. xP

[23:31] *** pilne joined
[23:32] * guifa2 is an old fashioned fogie and does Dec 25 to Jan 6th :-)

[23:32] <guifa2> Plus despite being in the northern hemisphere, it's was a solid 22 C out today =\

[23:34] *** vividsnow left
[23:34] *** vividsnow joined
[23:34] <guifa2> .say for "Merry Christmas", "Feliz Navidad", "Felices fiestes navadieges" ¬†‚Ä¶¬† "Bom Natal"

[23:37] *** sena_kun joined
[23:37] *** holyghost left
[23:38] *** holyghost joined
[23:48] *** guifa2 left
[23:54] <xkr47> merry christmas!

[23:55] <xkr47> I typed the first sentence into GPT-2 @ https://talktotransformer.com/ and this is what came out: "When I discovered the Raku language on wikipedia, I finally was converted. Reading the Raku project's source code, I was amazed at how comprehensive and rich it was. It's quite nice to be able to leverage the latest technologies, to develop fantastic new apps with them, and it's fun to interact with so many other...                   

[23:55] <xkr47> ... languages. Raku is a simple, easy to use language with powerful functionalities. Being able to use it in combination with CoffeeScript, HTML and CSS made the whole process much faster and also much more enjoyable."

