[00:13] *** Wahnberger left
[00:22] *** jaldhar_ left
[00:22] *** jaldhar_ joined
[00:23] *** jaldhar_ left
[00:24] *** jaldhar_ joined
[00:34] *** jaldhar_ left
[00:34] *** jaldhar_ joined
[00:34] *** chloekek left
[00:38] *** wildtrees left
[00:39] *** jaldhar_ left
[00:40] *** jaldhar_ joined
[00:41] *** jaldhar_ left
[00:42] *** RubioTerra left
[00:42] *** jaldhar_ joined
[00:46] *** Altai-man_ left
[00:57] <SmokeMachine> xinming: I've started implementing json for SQLite (https://github.com/FCO/Red/commit/57e86fea00e3ab4c44d864b65d07afe77cb84a19) if you would like to take a look...

[00:57] *** jaldhar_ left
[00:58] *** jaldhar_ joined
[00:58] <SmokeMachine> xinming: an example https://www.irccloud.com/pastebin/RgUpYYHa/

[01:16] *** ZzZombo_ joined
[01:19] *** ZzZombo_ is now known as ZzZombo

[01:41] *** jaldhar_ left
[01:42] *** jaldhar_ joined
[01:48] *** veesh_ joined
[01:50] *** veesh left
[01:51] *** veesh_ is now known as veesh

[01:57] <xinming> SmokeMachine: I don't think we need to enable update support for json columns, The reason is, app level support is enough. Even in Pg, IIRC, If we want to update the json column, We'll have to update the whole column too.

[02:07] *** jaldhar_ left
[02:08] *** jaldhar_ joined
[02:10] *** jaldhar_ left
[02:10] *** jaldhar_ joined
[02:12] *** jaldhar_ left
[02:12] *** jaldhar_ joined
[02:19] <guifa> .tell senakun I just looked back at my calendar code, it was apparently a lot more alpha status than beta status like I thought and so def not usable for what you needed.  Sorry if you ended up spending more time than necessary realizing that in testing

[02:19] <tellable6> guifa, I'll pass your message to sena_kun

[02:21] <SmokeMachine> xinming: we need it, because one may need, for example, update a Json field in a json column for every record on a table... and looping for every row, and updating isn’t a good idea...

[02:39] *** Xliff joined
[02:40] <Xliff> .

[02:43] *** hythm joined
[02:44] <Xliff> o/

[03:03] <hythm> Xliff, wondering if you know off the top of your head, when selecting GTK FlowBox children by clicking the mouse button and drag to form a rectangle, the current behavior is selecting all the children range between button press to button release... is there a way to change this to select only the children under the formed rectangle?

[03:03] <Xliff> Hmmm...

[03:03] <Xliff> That's a hardcoded GTK thing.

[03:03] <Xliff> I will have to look into it.

[03:04] <Xliff> Yeah. It's built into flowbox.

[03:04] <Xliff> https://developer.gnome.org/gtk3/stable/gtk3-Standard-Enumerations.html#GtkSelectionMode

[03:05] <hythm> ok thanks, I thought its some kind of a setting, like SELECT_MODE_MULTIPLE or something,,  i searched online but did not find anything useful

[03:05] <Xliff> That looks to be the only control you have.

[03:05] <Xliff> You do have GTK_SELECTION_MULTIPLE

[03:05] <hythm> right, this is the one that allow selecting multiple childrens

[03:06] <Xliff> Yes.

[03:06] <Xliff> But how the children are selected is left to the flowbox implementation.

[03:07] <hythm> makes sense... i thought its common thing, as for example its most natural,,, like selecting multiple files in a file manager application

[03:07] <Xliff> Unfortunately, I don't know of a way to do what you suggest without reimplenting flowbox, which is non-trivial.

[03:08] <Xliff> And probably best left to C code.

[03:08] <hythm> got it

[03:09] <Xliff> You would have to do CTRL-click to have precise selection options.

[03:09] <Xliff> Your way makes more sense, though.

[03:09] <hythm> yes, thats what im doing 

[03:09] <Xliff> :)

[03:18] *** stoned75 joined
[03:31] *** stoned75 left
[03:39] <ZzZombo> m: my $a = 1, $b := $a;$a = Nil;dd $b

[03:39] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3my $a = 1, 7⏏5$b := $a;$a = Nil;dd $b␤»

[03:39] <ZzZombo> m: my $a = 1;my $b := $a;$a = Nil;dd $b

[03:39] <camelia> rakudo-moar a05e169ea: OUTPUT: «Any $a = Any␤»

[03:39] <ZzZombo> Why does this report `$a` rather than `$b`?

[03:40] <Xliff>  You bound $b to $a

[03:49] *** jaldhar_ left
[03:49] *** jaldhar_ joined
[04:23] *** hythm left
[04:52] <Xliff> What's the best way to recompile perl6 after rakudobrew has installed it?

[04:54] <Xliff> Also: Why am I getting this -- Unhandled exception: Missing or wrong version of dependency 'gen/moar/Grammar.nqp' (from 'gen/moar/perl6.nqp')

[04:56] <Xliff> Trying to rebuild nqp in nqp/ I get this -- Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/MASTNodes.nqp' (from 'gen/moar/stage2/NQP.nqp')

[05:19] <Xliff> dir

[05:27] *** wamba joined
[06:05] *** jmerelo joined
[06:23] *** Geth left
[07:00] *** wamba left
[07:42] *** jmerelo left
[08:11] *** Xliff left
[08:31] *** xinming_ joined
[08:33] *** xinming left
[08:38] *** mid_home left
[09:03] *** scimon joined
[09:03] <scimon> Morning

[09:10] *** sena_kun joined
[09:23] <ZzZombo> m: Blob.new.^methods>>.say

[09:23] <camelia> rakudo-moar a05e169ea: OUTPUT: «STORE␤allocate␤read-int8␤read-int16␤read-int32␤read-int64␤read-int128␤read-uint8␤read-uint16␤read-uint32␤read-uint64␤read-uint128␤read-num32␤read-num64␤read-bits␤read-ubits␤Capture␤Numeric␤Int␤bytes␤chars␤deco…»

[09:23] <ZzZombo> m: Blob.new.write(my $a=1).say

[09:23] <camelia> rakudo-moar a05e169ea: OUTPUT: «No such method 'write' for invocant of type 'Blob'␤  in block <unit> at <tmp> line 1␤␤»

[09:23] <ZzZombo> m: Blob.new.write-uint8(my $a=1).say

[09:23] <camelia> rakudo-moar a05e169ea: OUTPUT: «No such method 'write-uint8' for invocant of type 'Blob'␤  in block <unit> at <tmp> line 1␤␤»

[09:24] <ZzZombo> m: Buf.new.^methods>>.say

[09:24] <camelia> rakudo-moar a05e169ea: OUTPUT: «write-int8␤write-int16␤write-int32␤write-int64␤write-int128␤write-uint8␤write-uint16␤write-uint32␤write-uint64␤write-uint128␤write-num32␤write-num64␤write-bits␤write-ubits␤pop␤shift␤reallocate␤splice␤push␤append…»

[09:24] <ZzZombo> m: Buf.new.write-uint8(my $a=1).say

[09:24] <camelia> rakudo-moar a05e169ea: OUTPUT: «Too few positionals passed; expected 3 or 4 arguments but got 2␤  in block <unit> at <tmp> line 1␤␤»

[09:24] <ZzZombo> m: Buf.new.append(my $a=1).say

[09:24] <camelia> rakudo-moar a05e169ea: OUTPUT: «Buf:0x<01>␤»

[09:30] *** Altai-man_ joined
[09:32] *** sena_kun left
[09:34] <ZzZombo> m: class C[Int $a] { method m(){$a.say}};C[1].new.say

[09:34] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> 3class C7⏏5[Int $a] { method m(){$a.say}};C[1].new.␤    expecting any of:␤        generic role␤»

[09:34] <ZzZombo> m: role R[Int $a] { method m(){$a.say}};R[1].new.say

[09:34] <camelia> rakudo-moar a05e169ea: OUTPUT: «R[Int].new␤»

[09:34] <ZzZombo> m: role R[Int $a] { method m(){$a.say}};R[1].new.m.say

[09:34] <camelia> rakudo-moar a05e169ea: OUTPUT: «1␤True␤»

[09:35] <SmokeMachine> m: class C { method ^parametize(Mu:U $type) { $type } }; say C[Int]

[09:35] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤C cannot be parameterized␤at <tmp>:1␤------> 3tize(Mu:U $type) { $type } }; say C[Int]7⏏5<EOL>␤»

[09:36] *** donaldh joined
[09:46] <SmokeMachine> m: class C { method ^ parameterize(Mu:U $type) { $type } }; say C[Int]

[09:46] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3class C { method7⏏5 ^ parameterize(Mu:U $type) { $type } };␤»

[09:47] <SmokeMachine> m: class C { method ^parameterize(Mu:U $type) { $type } }; say C[Int]

[09:47] <camelia> rakudo-moar a05e169ea: OUTPUT: «===SORRY!===␤Too many positionals passed; expected 2 arguments but got 3␤»

[09:47] <SmokeMachine> m: class C { method ^parameterize($, Mu:U $type) { $type } }; say C[Int]

[09:47] <camelia> rakudo-moar a05e169ea: OUTPUT: «(Int)␤»

[09:47] *** wamba joined
[10:11] *** wamba left
[10:14] <ZzZombo> SmokeMachine: what's the first argument for the method?

[10:15] <SmokeMachine> ZzZombo: the own object… all `$obj.^method(|c)` is the same as `$obj.HOW.method($obj, |c)`

[10:16] <ZzZombo> ah, I see. What does it return?

[10:18] <SmokeMachine> ZzZombo: what do you mean?

[10:19] <ZzZombo> Scratch that. How do I actually get the parameter to the class this way?

[10:19] <ZzZombo> To replicate `method m(){$a.say}` in the earlier sample.

[10:32] *** daxim left
[10:32] <SmokeMachine> m: class C { method ^parameterize($self, Mu:U $type) { my $new = $self.HOW.new_type: :name(“{ $type.^name }[{$self.^name}]”); $new.^add_parent: $self; $new.^compose; $new }; method m { self.say } }; C[Int].new.m # ZzZombo ?

[10:32] <camelia> rakudo-moar a05e169ea: OUTPUT: «Int[C].new␤»

[10:33] <SmokeMachine> the opposite!

[10:33] <SmokeMachine> m: class C { method ^parameterize($self, Mu:U $type) { my $new = $self.HOW.new_type: :name(“{ $self.^name }[{$type.^name}]”); $new.^add_parent: $self; $new.^compose; $new }; method m { self.say } }; C[Int].new.m

[10:33] <camelia> rakudo-moar a05e169ea: OUTPUT: «C[Int].new␤»

[10:34] <SmokeMachine> ZzZombo: why would you like to do something like that?

[10:38] *** daxim joined
[10:40] *** cpan-raku left
[10:41] *** cpan-raku joined
[10:41] *** cpan-raku left
[10:41] *** cpan-raku joined
[10:47] *** tyil left
[10:48] *** tyilanmenyn joined
[11:04] <ZzZombo> Well, yes, but why not let to just define parametric classes the same way as roles?

[11:09] <jnthn> Why not just write a role if you want parametricity?

[11:13] <jnthn> But ultimatey, the answer is becuase type parameters are lexical, and that implies immutability, but classes are open.

[11:14] <jnthn> Also, from a design perspective, roles are the means for re-use, and classes for instance management, and being parametric is primarily a re-use thing.

[11:22] *** wamba joined
[11:31] *** sena_kun joined
[11:33] *** Altai-man_ left
[11:47] *** joule joined
[11:54] *** daxim left
[11:59] *** ggoebel left
[11:59] *** daxim joined
[12:19] *** wamba left
[12:26] <ZzZombo> m: -> returns 42 { 41 }

[12:26] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'returns' in parameter declaration.␤at <tmp>:1␤------> 3-> returns7⏏5 42 { 41 }␤»

[12:27] <AlexDaniel> m: say -> --> 42 { }()

[12:27] <camelia> rakudo-moar a05e169ea: OUTPUT: «42␤»

[12:34] <ZzZombo> m: -> --> 42 { 41 }

[12:34] <camelia> rakudo-moar a05e169ea: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 41 in sink context (line 1)␤»

[12:34] <ZzZombo> m: -> --> 42 { return 41 }

[12:34] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No return arguments allowed when return value 42 is already specified in the signature␤at <tmp>:1␤------> 3-> --> 42 { return 41 7⏏5}␤»

[12:35] *** jaldhar_ left
[12:36] *** patrickb joined
[12:36] *** jaldhar_ joined
[12:36] <patrickb> .

[12:36] <tellable6> 2019-11-08T10:04:40Z #raku-dev <El_Che> patrickb: set-env.sh is problematic. It set relative paths in the PATH: export PATH=./../bin:./../share/perl6/site/bin:...

[12:39] <patrickb> .tell El_Che That's fatal. I get absolute paths. How did you manage to do that? To which shell is /bin/sh linked to on your system?

[12:39] <tellable6> patrickb, I'll pass your message to El_Che

[12:42] <ZzZombo> m: multi sub {}

[12:42] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An anonymous routine may not take a multi declarator␤at <tmp>:1␤------> 3multi sub {}7⏏5<EOL>␤»

[12:42] <El_Che> patrickb: bash on ubuntu 19.10, not linked to dash and the like

[12:42] <ZzZombo> m: only sub {}

[12:42] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An anonymous routine may not take a only declarator␤at <tmp>:1␤------> 3only sub {}7⏏5<EOL>␤»

[12:42] <ZzZombo> a only

[12:42] <ZzZombo> :/

[12:44] <patrickb> El_Che: When I execute that script with bash, I also don't get relative paths. This will be an interesting bug to track down. How did you call that script? Just `./set-env.sh` ?

[12:44] <patrickb> oh have to leave now

[12:44] <patrickb> back in the evening

[12:44] *** patrickb left
[12:46] <El_Che> no prob

[12:53] *** jaldhar_ left
[12:54] *** jaldhar_ joined
[12:54] <xkr47> oh my, it looks like raku is sucking me in like perl5 did 20 years ago

[12:55] <El_Che> xkr47: that's the secret plan

[12:56] *** jaldhar_ left
[12:56] *** jaldhar_ joined
[12:59] <xkr47> I just love that you have `.Str`, `.gist` and `.perl` on all objects

[12:59] <xkr47> and how say uses it etc

[13:05] <El_Che> xkr47: yeah, consistency and a huge std-lib are big plusses

[13:06] *** jaldhar_ left
[13:06] <xkr47> p6: say /foo/[0][0][0][0]

[13:06] <camelia> rakudo-moar a05e169ea: OUTPUT: «/foo/␤»

[13:06] *** jaldhar_ joined
[13:06] <xkr47> it is funnay!

[13:06] <xkr47> I don't know what happens yet, but it's interesting to try to figure out :)

[13:10] <sena_kun> xkr47, IIRC what lizmat explained to me about this, when you are using indexing on scalars, they are turned into a single-item list, you take its first element, and again and again.

[13:10] <tellable6> 2019-11-06T23:16:34Z #cro <japhb> sena_kun Content-Disposition header?

[13:10] <tellable6> hey sena_kun, you have a message: https://gist.github.com/6102db6b4f85829e5356e31ccc1f1958

[13:10] <lizmat> m: say 42[0]

[13:10] <camelia> rakudo-moar a05e169ea: OUTPUT: «42␤»

[13:10] <lizmat> m: say 42[0][0][0][0]

[13:10] <camelia> rakudo-moar a05e169ea: OUTPUT: «42␤»

[13:10] <xkr47> :D

[13:11] <xkr47> so everything is a list! :D

[13:12] *** jaldhar_ left
[13:12] *** jaldhar_ joined
[13:14] *** jaldhar_ left
[13:14] *** jaldhar_ joined
[13:16] *** jaldhar_ left
[13:16] *** jaldhar_ joined
[13:19] <ZzZombo> m: 42 [say] 24

[13:19] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing infix inside []␤at <tmp>:1␤------> 0342 [7⏏5say] 24␤    expecting any of:␤        bracketed infix␤        infix␤        infix stopper␤»

[13:20] <ZzZombo> m: 42 [&say] 24

[13:20] <camelia> rakudo-moar a05e169ea: OUTPUT: «WARNINGS for <tmp>:␤4224␤Useless use of &say in sink context (line 1)␤»

[13:21] <ZzZombo> wut

[13:22] *** lucasb joined
[13:30] *** Altai-man_ joined
[13:33] *** sena_kun left
[13:34] *** Xliff joined
[13:35] <Xliff> o/

[13:47] *** jaldhar_ left
[13:48] *** jaldhar_ joined
[13:49] *** abraxxa joined
[13:49] <abraxxa> why does this not match a single comment line?

[13:49] <abraxxa> token comment { '#' \N* }

[13:50] *** kktt joined
[13:50] *** jaldhar_ left
[13:50] *** jaldhar_ joined
[13:50] <abraxxa> ah, token comment { '#' \N*\n } does match <comment>*

[13:51] <abraxxa> what's the best practise of not capturing linefeeds?

[13:52] *** chloekek joined
[13:52] *** chloekek left
[13:53] <jnthn> If you want to eat something but exclude it from the capture, use <( and/or )>

[13:53] <jnthn> token comment { '#' \N* )> \n } or so

[13:53] <abraxxa> or?

[13:54] <abraxxa> I came up with: token comment {  <.ws> <( '#' \N* )> \n }

[13:54] *** tyilanmenyn is now known as tyil

[13:54] <abraxxa> that allows whitespace before the # which happens in the Filehol config files I have to parse

[13:54] <jnthn> That also works :)

[13:55] *** chloekek joined
[13:56] <abraxxa> thanks!

[13:56] <abraxxa> down to one unparsable file now

[13:57] <abraxxa> token comment {  <.ws> <( '#' \N* )> \n <.ws> }

[13:57] <abraxxa> that now also works for a comment line followed by an indented config line

[13:57] <abraxxa> all files parse ;)

[13:58] <abraxxa> weekend! bye!

[13:59] *** abraxxa left
[14:03] *** wamba joined
[14:04] <xkr47> how Do I quickest find the implementation of some routine or method? like the source code..

[14:04] *** Xliff left
[14:05] <xkr47> like Str for example

[14:05] <Altai-man_> source: help

[14:05] <Altai-man_> I am not sure the great bot for that is online...

[14:05] <xkr47> is there a cli for it? p6doc obv would be a great place..

[14:06] *** wamba left
[14:06] <jnthn> m: say .file, ":", .line for Str.^lookup("flip")

[14:06] <camelia> rakudo-moar a05e169ea: OUTPUT: «SETTING::src/core.c/Str.pm6:3005␤»

[14:06] *** wamba joined
[14:07] <ZzZombo> If only that could be turned easily into a link to the file in the repo?

[14:07] *** wamba left
[14:07] <xkr47> yeah!

[14:08] <xkr47> wait, we've got raku, we can do it!

[14:08] <jnthn> In some not too distant Comma version, we'll also figure out some way to point at CORE.setting sources and so be able to jump to them in the IDE also :)

[14:09] <ZzZombo> What is Comma?

[14:09] <jnthn> A Raku IDE

[14:09] *** wamba joined
[14:09] <xkr47> can has!

[14:09] <jnthn> https://commaide.com/

[14:09] <Altai-man_> so someone volunteers to maintain https://github.com/zoffixznet/perl6-sourceable ? :)

[14:10] <jnthn> Wonder if it can be brought into the general whateverable fold :)

[14:11] <Altai-man_> I think whateverable is maintained by AlexDaniel, who is pretty (ok, very) busy, so would be nice to have another person to look into it.

[14:11] <AlexDaniel> yeah, I'd gladly run and maintain it

[14:11] <AlexDaniel> anyone can PR it to whateverable :)

[14:11] *** jaldhar_ left
[14:12] *** jaldhar_ joined
[14:12] <xkr47> how do you do `$foo =~ s/x/y/r``

[14:12] <AlexDaniel> btw I also have a draft of synopsebot based on whateverable

[14:13] <timotimo> m: my $foo = "hello"; $foo ~~ s/e/u/; say $foo

[14:13] <camelia> rakudo-moar a05e169ea: OUTPUT: «hullo␤»

[14:13] <AlexDaniel> but yeah, maybe I'll get to commit it next week after the release

[14:13] <xkr47> ugh

[14:13] *** ZzZombo left
[14:13] *** ZzZombo joined
[14:13] <ZzZombo> Wait, can Comma be integrated, with say Android Studio, since that based on IntelliJ?

[14:14] <timotimo> yeah, comma is available as a plugin, too

[14:14] *** wamba left
[14:14] <timotimo> it's not guaranteed to work 100%, but it'll surely do most of what it's supposed to do

[14:14] <Altai-man_> technically - yes, in reality your mileage may vary.

[14:15] <timotimo> one issue is jetbrains based IDEs that don't have the concept of "SDK"

[14:15] <timotimo> webstorm has that problem

[14:15] <Altai-man_> most issues I saw with webstorm were because working with sdk interesting there.

[14:15] <Altai-man_> yes

[14:15] <timotimo> you can't tell comma where to find your perl6 stuff, because it relies on the intellij code to manage that and offer the UI and all that

[14:15] <Altai-man_> so no nice completion and "undefined" are everywhere, but you still have local things and editing.

[14:15] <timotimo> Altai-man_: you think it could just take paths from an env var?

[14:15] <AlexDaniel> Altai-man_: wanna try making a PR for sourcebot? This file you just throw away, whateverable does all that for you: https://github.com/zoffixznet/perl6-sourceable/blob/master/bin/sourceable.p6

[14:16] <AlexDaniel> Altai-man_: then you just take this file and call it Sourceable.p6 https://github.com/zoffixznet/perl6-sourceable/blob/master/lib/Sourceable/Plugin/Sourcery.pm6

[14:17] <AlexDaniel> or maybe not, you can keep it as a lib too

[14:17] <Altai-man_> timotimo, technically we can, but we probably don't want to do it silently and default-y. what if a user wants to use various binaries?

[14:17] <Altai-man_> I think the sane option is to detect if we're in idea or not and if not add an action for sdk setting

[14:17] <AlexDaniel> Altai-man_: here's the shortest bot: https://github.com/perl6/whateverable/blob/master/xbin/Nativecallable.p6

[14:17] <ZzZombo> I don't want yet another IDE just for Raku, so I'd like to know if Comma is better than, say, Raku extension for Atom or VS Code?

[14:17] <xkr47> ===SORRY!=== Error while compiling:

[14:17] <xkr47> :: not yet implemented

[14:18] <timotimo> comma understands perl6 code

[14:18] <Altai-man_> AlexDaniel, will see what I can do tomorrow! Thanks for your guidelines. Also need to revive some my PRs to roast...

[14:18] <timotimo> it has its own parser

[14:18] <El_Che> ZzZombo: Comma is based on Intellij and/or and Intellij plugin

[14:18] <timotimo> full-featured parser

[14:18] <El_Che> Intellij has lots of support for many languages and formats

[14:18] <AlexDaniel> Altai-man_: then after adapting the code just a little bit `sake debug:sourceable` should run the bot, that's about it

[14:19] <Altai-man_> AlexDaniel, saved those instructions, thanks. inb4: history

[14:19] <xkr47> m: my $f = Str.^lookup("flip"); my $u = $f.file; $u ~~ s!SETTING\:\:!https://github.com/rakudo/rakudo/blob/master/!; say $u ~ "#L" ~ $f.line

[14:19] <camelia> rakudo-moar a05e169ea: OUTPUT: «https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L3005␤»

[14:20] <xkr47> it worked!

[14:20] <AlexDaniel> Altai-man_: fwiw you can also use Whateverable as an external lib, like here: https://github.com/FCO/RedBot/tree/whateverable

[14:21] <AlexDaniel> Altai-man_: but I'd recommend not to if you want me to run it :)

[14:21] <AlexDaniel> that is, just commit it to whateverable repo

[14:26] <chloekek> Hello.

[14:26] <AlexDaniel> o/

[14:27] <chloekek> It's been a while since I used Raku.

[14:28] <chloekek> Seems Rakudo is still at the same version, neat.

[14:31] <timotimo> that's a positive way to express that we haven't released in a little while

[14:32] <chloekek> Means I don't have to update my nix package. :)

[14:34] <timotimo> no packages need to be nixed

[14:34] <SmokeMachine> jnthn: Would you mind if I do a feature request for Comma? Whould that be possible to Comman follow meta-methods? I mean, if I cmd+click something like `$model.^columns` it go to `MetamodelX::Red::Model.columns()`?

[14:37] <chloekek> I forgot what part of integrating raku with nix was so much work, but it wasn't rakudo.

[14:37] <chloekek> Ah it was dealing with repositories, distributions, and install-dist.p6.

[14:39] <timotimo> m: say [(0 xx 10).keys]

[14:39] <camelia> rakudo-moar a05e169ea: OUTPUT: «[0 1 2 3 4 5 6 7 8 9]␤»

[14:40] <chloekek> And generating the PERL6LIB environment variable, especially.

[14:40] <timotimo> ^- this is how to make a range from 0 to n-1 in javascript :P

[14:40] <chloekek> m: say [(0 xx 10)]

[14:40] <camelia> rakudo-moar a05e169ea: OUTPUT: «[0 0 0 0 0 0 0 0 0 0]␤»

[14:41] <chloekek> Ah yeah of course.

[14:41] <timotimo> [...Array(10).keys()]

[14:43] <jnthn> SmokeMachine: Can request it, though it's not quite trivial to make happen :)

[14:43] <chloekek> LiveScript has syntax [x til y] and it generates an IIFE with a for loop in it.

[14:44] <chloekek> Meh, materialized ranges.

[14:45] <timotimo> what's an IIFE?

[14:45] <chloekek> An immediately-invoked function expression; (function() { ... })()

[14:45] <chloekek> Basically what Raku has the do keyword for; do { ... }

[14:46] <chloekek> So that you can put statements where expressions are expected.

[14:48] <chloekek> m: my $x = 1; my \y := $x; y = 2; say y;

[14:48] <camelia> rakudo-moar a05e169ea: OUTPUT: «2␤»

[14:50] <ZzZombo> Ah, can somebody explain the `handles` trait and it's practical use?

[14:53] <lizmat> is there something lacking in https://docs.raku.org/language/typesystem#index-entry-handles_trait-handles ?

[14:55] <ZzZombo> I don't understand why would one use that, the page does nothing to explain that I'm afraid.

[15:03] <timotimo> ah, good to know

[15:03] <timotimo> "handles" is to make delegation trivial so that you can compose instead of derive

[15:04] <timotimo> like, you don't have to derive from Array just to add a method or two if you can just put the array into an attribute and have all its methods forwarded

[15:04] <timotimo> (and also: you can then easily plop in arbitrary types that conform to the methods)

[15:07] <SmokeMachine> jnthn: it would make my life so much easier...

[15:11] <timotimo> that will require comma to understand EXPORTHOW properly

[15:11] <timotimo> currently iirc it just has a list of stuff that it understands to be class-like: monitor, actor, model

[15:17] <jnthn> Yeah, it doesn't track EXPORTHOW at all

[15:18] <SmokeMachine> jnthn: is this track planned?

[15:21] *** GxD joined
[15:21] *** GxD left
[15:22] <jnthn> Eventually, though wasn't high on the todo list since there (until Red) wasn't really that much call for it

[15:22] <jnthn> That said, being able to auto-complete meta-methods would probably fall out of the work

[15:25] <Altai-man_> m: Int.HOW.^methods.say;

[15:25] <camelia> rakudo-moar a05e169ea: OUTPUT: «(archetypes new new_type add_fallback compose roles role_typecheck_list is_composed setup_junction_fallback find_method_fallback has_fallbacks set_name set_shortname name shortname WHY set_why set_language_version lang-rev-before ver auth api set_ver …»

[15:30] *** sena_kun joined
[15:31] <timotimo> the original question was to go-to-definition for meta methods

[15:32] <jnthn> Yeah, but resolution and auto-complete fall out of the same mechanism, pretty much

[15:32] *** Altai-man_ left
[15:33] <timotimo> right

[15:37] *** wamba joined
[15:47] <SmokeMachine> jnthn: the next one is just an wish… but would that be possible, some day, to add Red’s model here? https://usercontent.irccloud-cdn.com/file/nw81ITmZ/image.png

[15:48] <SmokeMachine> I know that’s probably too much...

[15:48] <ZzZombo> "Traits are subs declared in the form trait_mod<VERB>, where VERB stands for the name like is, does or handles." -- this suggests it's possible to create custom traits with arbitrary names, but that's wrong AFAIK.

[15:49] <ZzZombo> m: multi trait_mod:<asd>(Routine $a) { dd $a };sub s asd {}

[15:49] <camelia> rakudo-moar a05e169ea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3it_mod:<asd>(Routine $a) { dd $a };sub s7⏏5 asd {}␤    expecting any of:␤        new name to be defined␤»

[15:49] <SmokeMachine> ZzZombo: maybe bacause asd isn’t a verb?! (jusgt kidding...)

[15:49] *** jaldhar_ left
[15:50] *** jaldhar_ joined
[15:54] <jnthn> "I can't be asd" sounds verby to me :P

[15:54] <jnthn> SmokeMachine: That one is significantly easier; please give us a wish list. Actually I'm surprised `monitor` isn't there as an option already.

[15:56] <SmokeMachine> jnthn: I thought monitor and actor would be there already...

[15:58] <jnthn> Well, they kind of imply a chain of consequences: you need the `use` needing the `use` might imply a META6.json `depends`, etc.

[16:10] *** Xliff joined
[16:11] <SmokeMachine> jnthn: but is that possible to include that?

[16:12] *** chloekek left
[16:16] <Xliff> vrurg: You around? Applied patch and recompiled, but still no luck.

[16:22] <jnthn> SmokeMachine: Yeah, make an issue

[16:25] *** ubz-dih_ left
[16:32] <SmokeMachine> jnthn: issues 59 and 60 were created...

[16:33] <jnthn> Thanks!

[16:38] *** lizmat_ joined
[16:38] <vrurg> Xliff: send me the instructions, I would try locally. Will be away for a while though.

[16:39] <SmokeMachine> jnthn: another question: when I do `given 42 { when :is-prime {...} }` while I’m writing the `:is-prime` should comma auto-complete that?

[16:41] <sena_kun> SmokeMachine, `.is-prime` maybe? But nope, Comma doesn't take candidates from `given` (yet).

[16:41] <SmokeMachine> sena_kun: no, :is-prime...

[16:41] <sena_kun> o.O

[16:41] *** lizmat left
[16:41] <SmokeMachine> m: say 42 ~~ :is-prime

[16:41] <sena_kun> m: given 42 { when :is-prime { 42.say } }

[16:41] <camelia> rakudo-moar a05e169ea: OUTPUT: «False␤»

[16:41] <camelia> rakudo-moar a05e169ea: ( no output )

[16:41] <SmokeMachine> m: say 2 ~~ :is-prime

[16:41] <camelia> rakudo-moar a05e169ea: OUTPUT: «True␤»

[16:41] <jnthn> No, since it's actually just a totally ordinary Pair

[16:41] *** lizmat_ is now known as lizmat

[16:42] <sena_kun> ah, I remember, it is something about smartmatching against Pair...

[16:42] <sena_kun> I see

[16:42] <sena_kun> no, it can't autocomplete that

[16:42] <SmokeMachine> jnthn: but isn’t every ordinary pair in an smart-match mean a method call?

[16:42] <jnthn> Pairs are just used for too many htings...

[16:42] <jnthn> *things

[16:43] <jnthn> I guess if we know we're in a smart-match context maybe we can though

[16:43] <sena_kun> `.is-prime` would be another question because it is a call and we can do things for guessing what's the topic

[16:43] <jnthn> Like pair after ~~ for after when

[16:43] <jnthn> *or after when

[16:44] <SmokeMachine> Is `42 ~~ :is-prime` is a call as is `42.is-prime`...

[16:44] <jnthn> Not really, it's :is-prime.ACCEPTS(42)

[16:45] <SmokeMachine> jnthn: but it’s being called internally… I mean the &is-prime runs somehow… right?

[16:45] <jnthn> Yes, it's one multi candidate of ACCEPTS

[16:46] <jnthn>     multi method ACCEPTS(Pair:D: Mu $other) {

[16:46] <jnthn>         nqp::if(

[16:46] <jnthn>           nqp::can($other,(my $method := $!key.Str)),

[16:46] <jnthn>           ($other."$method"().Bool === $!value.Bool),

[16:46] <SmokeMachine> So, wouldn’t it make sense to auto-complete?

[16:46] *** Tirifto joined
[16:46] <jnthn> SmokeMachine: It's a very special case, and we'd only want it to auto-complete when it's quite likely to be useful

[16:46] <jnthn> It should be possible, though

[16:47] <jnthn> Similarly, we could auto-complete pairs in argument lists with the names of the accepted named arguments of the target of the call :)

[16:47] <SmokeMachine> jnthn: and sorry for all this odd requests...

[16:47] <jnthn> They're all quite reasonable. :) Just not all totally easy. ;-)

[16:48] <jnthn> But that's never stopped us so far :D

[16:48] <SmokeMachine> jnthn: that would be wonderful! but wouldn’t *%_ make it herder?

[16:48] <jnthn> Well, yeah, then we don't have any guidance on what to offer :)

[16:48] <Xliff> hi, jnthn!

[16:48] <Xliff> Any progress on https://github.com/jnthn/p6-io-socket-async-ssl/issues/44?

[16:48] <SmokeMachine> s/herder/harder/

[16:49] <SmokeMachine> m: my method bla {}.signature.say

[16:49] <camelia> rakudo-moar a05e169ea: OUTPUT: «(Mu: *%_)␤»

[16:49] <jnthn> Xliff: No, it makes no sense whatsoever; I did wonder if it was a generic NativeCall bug (some setup race in there), but failed to reproduce such

[16:50] <SmokeMachine> jnthn: I mean that *%_ ^^

[16:50] <Xliff> jnthn: You were never able to reproduce?

[16:50] <jnthn> Xliff: Pretty sure I tried doing so and didn't...

[16:51] <Xliff> jnthn: OK. I will try and rerun with latest rakudo and update the bug. Maybe it got fixed?! %)

[16:51] <Xliff> I love it when bugs grow legs and walk away.

[16:51] <jnthn> Xliff: Possibly :) If it's still there for you, let me know

[16:51] <Xliff> jnthn: Will do. Thanks!

[17:02] *** scimon left
[17:06] *** jaldhar_ left
[17:06] *** jaldhar_ joined
[17:07] *** patrickb joined
[17:13] *** jaldhar_ left
[17:14] *** jaldhar_ joined
[17:19] *** jaldhar_ left
[17:20] *** jaldhar_ joined
[17:21] *** jaldhar_ left
[17:22] *** jaldhar_ joined
[17:27] *** jaldhar_ left
[17:28] *** jaldhar_ joined
[17:30] *** jaldhar_ left
[17:30] *** Altai-man_ joined
[17:30] *** jaldhar_ joined
[17:31] *** jaldhar_ left
[17:32] *** patrickb left
[17:32] *** jaldhar_ joined
[17:32] *** sena_kun left
[18:12] *** jaldhar_ left
[18:12] *** jaldhar_ joined
[18:27] *** jaldhar_ left
[18:28] *** jaldhar_ joined
[18:29] *** wamba left
[18:32] *** lucasb left
[18:43] *** jaldhar_ left
[18:44] *** jaldhar_ joined
[18:48] *** wildtrees joined
[18:50] *** jaldhar_ left
[19:02] <Xliff> vrurg: Is there a way I can check to see if your patch is applied, programmatically?

[19:03] <vrurg> Xliff: perhaps in a hacky way, by checking Stash for TAKE-SNAPSHOT method.

[19:04] <vrurg> Xliff: I'd like you to test the case from 3075 on your side. Because if you get a problem on your HEAD that could be something unrelated.

[19:10] <Xliff> Yeah. It's not there. WTF?

[19:10] <Xliff> I patched the files. :/

[19:10] <Xliff> So I install via rakudobrew. What's the best way to insure I rebuild properly?

[19:18] <vrurg> You could actually checkout directly from my repo and checkout rakudo_3075 branch

[19:19] <Xliff> OK. URL?

[19:19] <vrurg> https://github.com/vrurg/rakudo/tree/rakudo_3075

[19:21] <Xliff> ./Configure.pl --gen-moar --gen-nqp ?

[19:23] <vrurg> Right.

[19:30] *** sena_kun joined
[19:30] *** sena_kun left
[19:32] *** Altai-man_ left
[19:51] <Xliff> vrurg: OK, rakudo built, however now I can't build zef.

[19:52] <Xliff> Missing or wrong version of dependency 'core#sources/70EBDA25F44EBFF8734F739F5779D64914083409 (CompUnit::Repository::Staging)' (from 'core#sources/1C08282E0E9C9AD04D60AE924EF6A2DD50636161 (NativeCall::Compiler::GNU)'

[19:52] <vrurg> Does rakudo pass make test?

[19:53] <Xliff> Yeah. Might be my environment. Not sure.

[19:54] <Xliff> I've got your bin aliased to 'perl6', but the rakudobrew'd version is still on PATH

[19:59] <vrurg> Xliff: just run with the full binary path. 

[20:00] <Xliff> kk

[20:00] <vrurg> When I test I often run ~/src/.../perl6

[20:01] <Xliff> Using full path, still get same error.

[20:02] <Xliff> Let me move zef out of perl6 tree

[20:02] <Xliff> Still same. But with zef?!

[20:06] <vrurg> Xliff: try make test in rakudo's build dir. 

[20:07] <Xliff> That's where I ran it the first time.

[20:07] <vrurg> PR fails on travis and I can't reproduce the problem. Perhaps you have it too.

[20:08] <vrurg> Ok, then I'll need to get back to it and try installing zef from scratch. Frankly saying, I have it and required modules pre-installed.

[20:08] <vrurg> Presumably, PR breaks it.

[20:08] <Xliff> :(

[20:09] <Xliff> Think it's something with the Stash?

[20:10] <vrurg> Will see. Leave it for now.

[20:10] <Xliff> OK

[20:27] *** patrickb joined
[21:00] *** kktt left
[21:00] *** kktt joined
[21:04] *** cpan-raku left
[21:05] *** cpan-raku joined
[21:05] *** cpan-raku left
[21:05] *** cpan-raku joined
[21:28] *** chloekek joined
[21:30] *** joule left
[22:14] *** MasterDuke joined
[22:54] *** MasterDuke left
[22:56] *** kktt left
[22:59] *** chloekek left
[23:04] *** patrickb left
[23:08] *** jaldhar_ joined
[23:28] *** jaldhar_ left
[23:29] *** jaldhar_ joined
