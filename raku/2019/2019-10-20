[00:18] *** benjif joined
[00:21] <cpan-raku> New module released to CPAN! Failable (0.1.1) by 03KAIEPI

[01:09] *** reportable6 left
[01:09] *** reportable6 joined
[01:32] *** benjif left
[02:25] <vrurg> AlexDaniel: I think you're mostly right. But how much sense would it make spending time on changing those?

[02:25] <AlexDaniel> vrurg: sorry, what exactly?

[02:25] <vrurg> AlexDaniel: .gist :)

[02:26] <vrurg> Sorry, I didn't even noticed the time when you made the comment. :)

[02:26] <AlexDaniel> vrurg: well‚Ä¶ I don't know. But we can at least acknowledge the problem and not contribute to it more

[02:26] <AlexDaniel> vrurg: but, eh, imagine writing your compiler and having to comply to .gist just because some existing compiler does it the way it does

[02:27] <vrurg> Sure. I don't mean we must not do it. But this is better be postponed until at least most of the renaming tasks are done.

[02:27] <AlexDaniel> sure, yea

[02:28] <AlexDaniel> I simply wasn't aware of the problem

[02:28] <AlexDaniel> therefore my surprise

[02:28] <vrurg> But added it to my roast todos.

[02:28] <AlexDaniel> thank you

[02:28] <vrurg> I didn't see any until grepped a few minutes ago. Don't like most of what I see.

[02:29] <AlexDaniel> yep :(

[02:30] <AlexDaniel> if I see it right, some of them are not testing .gist but just using the way it stringifies to validate the data

[02:31] <AlexDaniel> probalby should be replaced with is-deeply or similar

[02:33] <vrurg> AlexDaniel: some are subject for isa, some for is-deeply. Mostly, yeah.

[02:37] <AlexDaniel> weekly: https://gist.github.com/AlexDaniel/81af50d9e9207588595cb7a290bcf51e

[02:37] <notable6> AlexDaniel, Noted! (weekly)

[02:37] <AlexDaniel> weekly:

[02:37] <notable6> AlexDaniel, 2 notes: 2019-10-18T11:20:24Z <lizmat>: https://raku.online/2019/10/18/raku-one-liners-a-free-book/  ;  2019-10-20T02:37:48Z <AlexDaniel>: https://gist.github.com/AlexDaniel/81af50d9e9207588595cb7a290bcf51e

[02:38] <AlexDaniel> weekly: https://gist.githubusercontent.com/AlexDaniel/81af50d9e9207588595cb7a290bcf51e/raw/f0bb05cde67fdaa9967f890934cff40f36e8235f/foo.txt

[02:38] <notable6> AlexDaniel, Noted! (weekly)

[02:38] <AlexDaniel> weekly: OK, it doesn't work that way! Nevermind!

[02:38] <notable6> AlexDaniel, Noted! (weekly)

[02:47] *** ggoebel left
[03:14] <Doc_Holliwood> .oO( N≈çdo means Node in japanese )

[03:24] *** benjif joined
[04:20] *** marcusr left
[04:21] *** marcusr joined
[04:25] *** benjif left
[04:50] *** Kaiepi left
[04:56] *** Doc_Holliwood left
[04:57] *** Kaiepi joined
[05:06] <discord6> <Aearnus> what's the current weekly challenge?

[05:19] *** marcusr left
[05:19] *** marcusr joined
[05:44] *** warriors left
[06:30] *** benjif joined
[06:30] *** benjif left
[06:31] *** benjif joined
[06:59] *** benjif left
[07:13] *** squashable6 left
[07:16] *** squashable6 joined
[09:01] *** sena_kun joined
[09:05] *** xinming joined
[09:08] *** xinming_ left
[09:15] *** cpan-raku left
[09:16] *** cpan-raku joined
[09:16] *** cpan-raku left
[09:16] *** cpan-raku joined
[09:22] <squashable6> üçï niner++ wrote a comment on ‚ÄúWeird issue in epoll module‚Äù: https://github.com/rakudo/rakudo/issues/3244#issuecomment-544235303

[09:22] <squashable6> üçï niner++ closed issue ‚ÄúWeird issue in epoll module‚Äù: https://github.com/rakudo/rakudo/issues/3244

[09:36] *** bob24 joined
[09:38] *** bob24 left
[09:49] *** gdonald left
[09:51] *** gdonald joined
[09:54] *** [Coke]_ joined
[09:54] *** [Coke]_ left
[09:54] *** [Coke]_ joined
[09:54] *** pmurias joined
[09:55] *** [Coke] left
[09:56] *** ilogger2 left
[09:58] *** ilogger2 joined
[10:01] <cpan-raku> New module released to CPAN! Algorithm::LibSVM (0.0.8) by 03TITSUKI

[10:08] *** tony-o left
[10:09] *** tony-o joined
[10:13] *** Doc_Holliwood joined
[10:42] <Doc_Holliwood> good morning u beautiful people

[10:54] *** chloekek joined
[10:58] <squashable6> üçï niner++ wrote a comment on ‚ÄúNativeCall regression in Math::FFT::Libfftw3‚Äù: https://github.com/rakudo/rakudo/issues/3237#issuecomment-544241679

[10:58] <squashable6> üçï niner++ closed issue ‚ÄúNativeCall regression in Math::FFT::Libfftw3‚Äù: https://github.com/rakudo/rakudo/issues/3237

[11:07] <squashable6> üçï niner++ wrote a comment on ‚ÄúRegression in Cro (fetching a json file eats RAM)‚Äù: https://github.com/rakudo/rakudo/issues/3223#issuecomment-544242279

[11:15] <squashable6> üçï niner++ wrote a comment on ‚ÄúRegression in Cro (fetching a json file eats RAM)‚Äù: https://github.com/rakudo/rakudo/issues/3223#issuecomment-544242822

[11:15] <squashable6> üçï niner++ closed issue ‚ÄúRegression in Cro (fetching a json file eats RAM)‚Äù: https://github.com/rakudo/rakudo/issues/3223

[11:18] *** pmurias joined
[11:30] *** pmurias left
[11:41] *** pmurias joined
[11:47] <squashable6> üçï niner++ wrote a comment on ‚ÄúWindows precompilation regression‚Äù: https://github.com/rakudo/rakudo/issues/3170#issuecomment-544244970

[12:06] <Doc_Holliwood> is there an opposite of `require`?

[12:07] <pmurias> Doc_Holliwood: what would it do?

[12:07] <tellable6> 2019-10-19T01:11:01Z #raku-dev <vrurg> pmurias When jvm backend serialize closures does it serialize their respective core setting too?

[12:07] <Doc_Holliwood> as in, is it possible to unload / unreqire a CompUnit, freeing memory

[12:12] <nine> Doc_Holliwood: MoarVM will actually garbage collect code, too. Bytecode files are mmaped, not copied into memory.

[12:14] <Doc_Holliwood> and when does the code become eligible for garbollection=

[12:14] <Doc_Holliwood> ?

[12:16] <nine> When it's not referenced anymore by anything. And that's the key: there are just so many ways an object can become referenced in non-obvious ways (e.g. as part of the lexical scope of the closure of an if-block).

[12:16] <Doc_Holliwood> oh, require is lexically scoped

[12:16] <nine> Doc_Holliwood: anyway, why're you asking about this in the first place? Code is usually not that large?

[12:16] <lizmat> just about everything is in Raku  :-)

[12:17] <Doc_Holliwood> so, i can put a loaded comp unit into a scalar, put it in a cache of some sort and once the cache decides to, it will get forgotten?

[12:19] <nine> Why bother?

[12:21] <Doc_Holliwood> I'm thinking about a concept of a "everything is a node" like framework (like permonks), where each node would just be a piece of raku code

[12:37] <timotimo> sounds like an object oriented database :)

[12:37] <timotimo> like that zope one

[12:38] <nine> Oh please not Zope...\

[12:38] * timotimo plones nine

[12:44] *** lucasb joined
[12:46] *** pmurias left
[13:07] *** go|dfish joined
[13:54] *** warriors joined
[13:55] <lizmat> can anybody come up with names of people that previously have done the Perl 6 Weekly ?

[13:55] <lizmat> I have so far: Ann Barcomb, Piers Cawley, Timo Paulssen

[13:56] <lizmat> please let me know if you think I'm forgetting someone

[14:13] *** ZzZombo_ joined
[14:13] *** ZzZombo_ is now known as ZzZombo

[14:23] <AlexDaniel> squashable6: status

[14:23] <squashable6> AlexDaniel, The date for the next SQUASHathon is not set

[14:25] *** Kaiepi joined
[14:27] * Doc_Holliwood sighs slightly annoyed

[14:27] <Doc_Holliwood> my fingers just can't get used to the new ternary. i am always typing " something ?? value : other value " and then have to go back and change the colon to !!

[14:28] <Doc_Holliwood> maybe not always but most of the time

[14:31] <tobs> for me it's the opposite now :D

[14:35] <El_Che> Doc_Holliwood: I tend to write ternary stuff in 3 lines,it helps for me

[14:37] *** Kaiepi left
[14:38] *** Kaiepi joined
[14:38] *** softmoth joined
[14:39] *** Kaiepi left
[14:39] *** Kaiepi joined
[14:40] *** ggoebel joined
[14:52] *** Altai-man_ joined
[15:19] *** dotdotdot joined
[15:29] <AlexDaniel> did anybody ever use .samemark?

[15:29] <Doc_Holliwood> m: sub foo { my $x = 1; return with $x { $_ }; return 99; }; foo.say

[15:29] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3sub foo { my $x = 1; return with $x7‚èè5 { $_ }; return 99; }; foo.say‚ê§    expect‚Ä¶¬ª

[15:29] <Doc_Holliwood> m: sub foo { my $x = 1; with $x { return $_ }; return 99; }; foo.say

[15:29] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´1‚ê§¬ª

[15:30] <Doc_Holliwood> m: sub foo { my $x = 0; with $x { return $_ }; return 99; }; foo.say

[15:30] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´0‚ê§¬ª

[15:30] <Doc_Holliwood> m: sub foo { my $x; with $x { return $_ }; return 99; }; foo.say

[15:30] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´99‚ê§¬ª

[15:30] <Doc_Holliwood> m: sub foo { my $x = 0; if $x { return $_ }; return 99; }; foo.say

[15:30] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´99‚ê§¬ª

[15:32] <Doc_Holliwood> i guess there is no statement that tests for  truth AND topicalizes?

[15:43] *** pmurias joined
[15:46] *** Xliff joined
[15:46] <Xliff> \o

[15:47] <Xliff> m: my $pi = Pointer.^parameterize(Int); $pi.say

[15:47] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    Pointer used at line 1‚ê§‚ê§¬ª

[15:47] <Xliff> m: use NativeCall; my $pi = Pointer.^parameterize(Int); $pi.say

[15:47] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´(NativeCall::Types::Pointer[Int])‚ê§¬ª

[15:50] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.^WHAT }; class CS is repr<CStruct> { has uint64 $.csm; method p { my $pp = Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; 

[15:50] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use .^ on a non-identifier method call‚ê§at <tmp>:1‚ê§------> 3eCall; sub A (Pointer $p) { say $p.^WHAT7‚èè5 }; class CS is repr<CStruct> { has uint‚ê§    expecting any of:‚ê§        method a‚Ä¶¬ª

[15:50] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.^WHAT; }; class CS is repr<CStruct> { has uint64 $.csm; method p { my $pp = Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; 

[15:50] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use .^ on a non-identifier method call‚ê§at <tmp>:1‚ê§------> 3eCall; sub A (Pointer $p) { say $p.^WHAT7‚èè5; }; class CS is repr<CStruct> { has uin‚ê§    expecting any of:‚ê§        method a‚Ä¶¬ª

[15:50] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.WHAT; }; class CS is repr<CStruct> { has uint64 $.csm; method p { my $pp := Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; 

[15:50] <camelia> rakudo-moar 2dd570dee: ( no output )

[15:51] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.WHAT; }; class CS is repr<CStruct> { has uint64 $.csm; method p { my $pp := Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; A(CS.new.p)

[15:51] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´(NativeCall::Types::Pointer[CS])‚ê§¬ª

[15:59] *** sumanstats joined
[16:00] <sumanstats> Why is this code not working

[16:00] <cpan-raku> New module released to CPAN! Failable (0.1.2) by 03KAIEPI

[16:00] <sumanstats> sub odds_from_prob($x) {

[16:01] <sumanstats> say odds_from_prob(0.3);

[16:01] <sumanstats> It throws:

[16:01] <sumanstats> Cannot look up attributes in a Rat type object

[16:03] <Xliff> sumanstats: Can you paste your code somewhere and share a link?

[16:03] <lizmat> sumanstats: could you run the code with m: here so that we can look closer as to what the problem is?

[16:04] <sumanstats> p6: sub odds_from_prob($x) {

[16:04] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub odds_from_prob($x) {7‚èè5<EOL>‚ê§¬ª

[16:05] <lizmat> sumanstats: please, on a single line, or make a paste of your code

[16:09] <sumanstats> Find the code here https://glot.io/snippets/fh2xfiz6ba

[16:11] <lizmat> sumanstats: "my Foo $a" fills the variable $a with the Foo type object

[16:12] <lizmat> m: say Rat.new(3,7).perl   # sumanstats 

[16:12] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´<3/7>‚ê§¬ª

[16:13] <lizmat> does that help?

[16:14] <sumanstats> m: say Rat.new(3,7).perl.WHAT

[16:14] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´(Str)‚ê§¬ª

[16:14] <sumanstats> @lizmat Yes it helps. I want to output as Rat so that I can use it in Testing, Currently output is string <<Str>>

[16:19] <sumanstats> Is it possible?

[16:29] <moritz> uhm, .perl always returns a Str

[16:29] <moritz> if you don't want that, don't call .perl

[16:29] <moritz> just use the object directly

[16:30] <lizmat> what moritz said  :-)

[16:30] <lizmat> afk for a few hours&

[16:34] <Xliff> sumanstats: Did you know that: (numeric value 1) / (numeric value 2) will always return a Rat?

[16:35] <Xliff> So you don't need to explicitly create the Rat object. Raku does that for you.

[16:35] <Xliff> So....

[16:36] <Xliff> m: sub odds_from_prob($x) { my $a = ($x / (1 - $x)); $a.nude[0] / $a.nude[1] }; say odds_from_prob(0.3).WHAT

[16:36] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´(Rat)‚ê§¬ª

[16:36] <Xliff> m: sub odds_from_prob($x) { my $a = ($x / (1 - $x)); $a.nude[0] / $a.nude[1] }; say odds_from_prob(0.3).perl

[16:36] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´<3/7>‚ê§¬ª

[16:38] *** softmoth left
[16:39] <sumanstats> @xliff Agreed the output is Rat but I wanted fraction as it is rather than the calculated value.  This is my code

[16:39] <sumanstats> #Calculating odds ratio from probability and probability from odds ratio

[16:39] <sumanstats> For testing I have these 

[16:40] <sumanstats> ok prob_from_odds(3/7) == 0.3;

[16:40] <Xliff> sumanstats: So you want it to return "0.3 / 0.7"

[16:40] <Xliff> m: sub odds_from_prob($x) { my $a = ($x / (1 - $x)); $a.nude[0] / $a.nude[1] }; say odds_from_prob(3/7).perl

[16:40] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´0.75‚ê§¬ª

[16:41] <Xliff> ah... that might be a bit of a tickle.

[16:41] <Xliff> I think Rat will simplify,.

[16:42] <Xliff> m: sub odds_from_prob($x) { my $a = ($x / (1 - $x)); $a.nude[0] / $a.nude[1] }; say odds_from_prob(3/7).Num

[16:42] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´0.75‚ê§¬ª

[16:42] <Xliff> sumanstats: Can you write up what you expect and what is happening on glot.io?

[16:42] <Xliff> That way I can play with things and see if I can help you get what you are looking for.

[16:44] <Xliff> m: my $a = 3.75 / 2.05; $a.WHAT.say

[16:44] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´(Rat)‚ê§¬ª

[16:44] <Xliff> m: my $a = 3.75 / 2.05; $a.perl.say

[16:44] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´<75/41>‚ê§¬ª

[16:45] <Xliff> m: say 41 / 2.05

[16:45] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´20‚ê§¬ª

[16:46] <Xliff> m: my $a = 3.75 / 2.12345; $a.perl.say

[16:46] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´<75000/42469>‚ê§¬ª

[16:47] <Xliff> m: say 42469 / 2.12345

[16:47] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´20000‚ê§¬ª

[16:47] <Xliff> m: my $a = 3.77 / 2.12345; $a.perl.say

[16:47] <camelia> rakudo-moar 2dd570dee: OUTPUT: ¬´<75400/42469>‚ê§¬ª

[16:49] *** Altai-man_ left
[16:55] *** Tirifto joined
[17:08] *** softmoth joined
[17:19] *** Tirifto left
[17:27] *** sumanstats left
[17:30] *** xinming joined
[17:30] <Geth> ¬¶ doc: uzluisf++ created pull request #3066: Wrap inline code examples with C<>, remove unneeded capitalization, ...

[17:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/3066

[18:01] *** chloekek left
[18:50] <cpan-raku> New module released to CPAN! XML::Actions (0.4.5) by 03MARTIMM

[18:55] <Doc_Holliwood> so i have a bunch of roles and a bunch of methods in an 1 : 1 relationship. is it better to "does" them all in the class declaration, or to use the (self but SomeRole).someMethod pattern?

[18:58] <guifa> I would just put the does in the class declaration

[18:59] <guifa> I find when I get > 2 classes/roles it becomes easier to use ‚Äúalso does Foo‚Äù as the first line after the declaration

[19:00] <guifa> Or to put the ‚Äúalso does Foo‚Äù right above any methods being implemented for Foo (for example, if I need custom handling for Associative/Positional)

[19:02] <guifa> m: class Language {¬†enum (English => ‚Äòen‚Äô, Spanish => ‚Äòes‚Äô); say Language::English; say Language::Spanish eq ‚Äòes‚Äô; # :D :D :D

[19:02] <camelia> rakudo-moar bfaec9741: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3ay Language::Spanish eq ‚Äòes‚Äô; # :D :D :D7‚èè5<EOL>‚ê§¬ª

[19:02] <guifa> class Language {¬†enum (English => ‚Äòen‚Äô, Spanish => ‚Äòes‚Äô) } ; say Language::English; say Language::Spanish eq ‚Äòes‚Äô; # :D :D :D

[19:02] <evalable6> guifa, rakudo-moar bfaec9741: OUTPUT: ¬´English‚ê§True‚ê§¬ª

[19:03] <guifa> I assume the above won‚Äôt recreate the enum for each instance, so this is a pretty slick solution to get readable language code (Language::Foo) that coexist with the Language class. 

[19:08] *** Kaiepi left
[19:11] *** thundergnat joined
[19:11] *** Kaiepi joined
[19:12] <thundergnat>  <Doc_Holliwood 	i guess there is no statement that tests for truth AND topicalizes?>  I think you are looking for with.

[19:12] <thundergnat> m: for 1, Nil, 'foo' -> $t { $t.say; with $t { .say } }

[19:12] <camelia> rakudo-moar bfaec9741: OUTPUT: ¬´1‚ê§1‚ê§Nil‚ê§foo‚ê§foo‚ê§¬ª

[19:13] <thundergnat> Doc_Holliwood: ^^^

[19:13] <Doc_Holliwood> thundergnat: with tests for definedness

[19:14] <thundergnat> Hmm. so it does. Nevermind.

[19:15] <guifa> ^^ I‚Äôve run into that before.  That seems like a good opportunity to right a slang.  ifgiven $a {¬†#`(topicalize $a, but skip if $a is false) }

[19:21] *** pmurias left
[19:23] *** pmurias joined
[19:25] <discord6> <noelsken> isn't that andthen?

[19:26] <tejr> and then?

[19:26] <discord6> <noelsken> m: for 1, Nil, "foo" -> $x { $x andthen .say } # no idea if this works across the bridge

[19:26] <evalable6> noelsken, rakudo-moar bfaec9741: OUTPUT: ¬´1‚ê§foo‚ê§¬ª

[19:28] <discord6> <noelsken> ah wait that doesn't even show what I wanted to

[19:29] <discord6> <noelsken> yeah reading the docs it seems like andthen is more a chainable statement with or somesuch

[19:36] <AlexDaniel> somesuch sounds like another operator :)

[19:40] *** thundergnat left
[19:44] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.WHAT; }; class CS is repr<CStruct> { has uint64 $.csm; method BUILD { $!csm = 1 }; method p { my $pp := Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; 

[19:44] <camelia> rakudo-moar bfaec9741: ( no output )

[19:45] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.WHAT; }; class CS is repr<CStruct> { has uint64 $.csm; method BUILD { $!csm = 1 }; method p { my $pp := Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; A.new.csm.say

[19:45] <camelia> rakudo-moar bfaec9741: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling A() will never work with declared signature (NativeCall::Types::Pointer $p)‚ê§at <tmp>:1‚ê§------> 3self.WHAT); nativecast($pp, self) }; }; 7‚èè5A.new.csm.say‚ê§¬ª

[19:45] <Xliff> m: use NativeCall; sub A (Pointer $p) { say $p.WHAT; }; class CS is repr<CStruct> { has uint64 $.csm; method BUILD { $!csm = 1 }; method p { my $pp := Pointer.^parameterize(self.WHAT); nativecast($pp, self) }; }; CS.new.csm.say

[19:45] <camelia> rakudo-moar bfaec9741: OUTPUT: ¬´1‚ê§¬ª

[20:00] *** Xliff left
[20:33] <Geth> ¬¶ doc/seq-elems-cache-note: a2ac522229 | Altai-man++ | doc/Type/Seq.pod6

[20:33] <Geth> ¬¶ doc/seq-elems-cache-note: Document elems on Seq

[20:33] <Geth> ¬¶ doc/seq-elems-cache-note: review: https://github.com/perl6/doc/commit/a2ac522229

[20:34] <guifa> I can kind of see why If doesn‚Äôt topicalize (if I say ‚Äúif $a == 4‚Äù what is the topic set to?  OTOH, if $_ were set to True, it wouldn‚Äôt interfere too much either because presumably in that case no one would use it, but topicalizing may be expensive enough to not do it (or not, I haven‚Äôt looked at the internals)

[20:35] <Geth> ¬¶ doc: Altai-man++ created pull request #3067: Document elems on Seq

[20:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/3067

[20:45] <Doc_Holliwood> this language never seems to amaze me

[20:46] <Doc_Holliwood> i just put this in a role: has $.initialized = self.init-config;

[20:46] <Doc_Holliwood> and it worked

[20:49] *** Kaiepi left
[20:50] *** Kaiepi joined
[20:53] *** chloekek joined
[21:03] *** sena_kun joined
[21:03] <sena_kun> m: use Test; is-deeply (1,2,3).all, (1,2,3).all;

[21:03] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# expected: all(1, 2, 3)‚ê§#      got: all(1, 2, 3)‚ê§¬ª

[21:03] <sena_kun> ok, so how do we... you know, do this thing?

[21:04] <sena_kun> hmm, maybe just `ok ~~`...

[21:05] <sena_kun> m: use Test; ok (1,2,3).all ~~ (1,2,3).all;

[21:05] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§¬ª

[21:05] <sena_kun> ok...

[21:05] <Doc_Holliwood> m: use Test; is-deeply (1,2,3).all.eager, (1,2,3).all.eager;

[21:05] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# expected: all((1,), (2,), (3,))‚ê§#      got: all((1,), (2,), (3,))‚ê§¬ª

[21:05] <Doc_Holliwood> m: use Test; is-deeply (1,2,3).all.Array, (1,2,3).all.Array;

[21:05] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# expected: all([1], [2], [3])‚ê§#      got: all([1], [2], [3])‚ê§¬ª

[21:05] <Doc_Holliwood> m: use Test; is-deeply (1,2,3).Array, (1,2,3).Array;

[21:05] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[21:06] <sena_kun> hmm, I wonder if coercing a junction to array is consistent all the time

[21:07] <Doc_Holliwood> m: use Test; ok (1,2,3).all equiv (1,2,3).all;

[21:07] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3use Test; ok (1,2,3).all7‚èè5 equiv (1,2,3).all;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚Ä¶¬ª

[21:07] <Doc_Holliwood> m: use Test; ok (1,2,3).all eqv (1,2,3).all;

[21:07] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§¬ª

[21:07] <Doc_Holliwood> m: use Test; ok (1,2,3).all.perl eq (1,2,3).all.perl;

[21:07] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[21:07] <Doc_Holliwood> tada :D

[21:08] <sena_kun> .perl is not ok for roast tests, I think. :(

[21:08] <Doc_Holliwood> m: (1,2,3).all.perl.say

[21:08] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´all(1, 2, 3)‚ê§¬ª

[21:09] <Doc_Holliwood> m: use Test; ok (1,2,3).all ~~ (1,2,3).all;

[21:09] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§¬ª

[21:10] <Doc_Holliwood> m: say (1,2,3).all - (1,2,3).all;

[21:10] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´all(all(0, -1, -2), all(1, 0, -1), all(2, 1, 0))‚ê§¬ª

[21:10] <Doc_Holliwood> o.... k.

[21:11] <Doc_Holliwood> m: say (1,2,3).all ~ (1,2,3).all;

[21:11] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´all(11, 12, 13, 21, 22, 23, 31, 32, 33)‚ê§¬ª

[21:11] <sena_kun> junctions...

[21:13] *** tellable6 joined
[21:14] <sena_kun> m: use Test; say 1|2|3 ~~ (1,2,3).all

[21:14] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´True‚ê§¬ª

[21:14] <sena_kun> yay

[21:16] *** ggoebel left
[21:23] *** sena_kun left
[21:30] <Doc_Holliwood> writing tests for the language in itself must be like walking on swimming logs

[21:43] <Doc_Holliwood> m: sub foo { fail }; with foo { say 1 }

[21:43] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´5===SORRY!5===‚ê§Function 'foo' needs parens to avoid gobbling block‚ê§at <tmp>:1‚ê§------> 3sub foo { fail }; with foo { say 1 }7‚èè5<EOL>‚ê§Missing block (apparently claimed by 'foo')‚ê§at <tmp>:1‚ê§------> 3sub foo { fail }; with foo { say‚Ä¶¬ª

[21:43] <Doc_Holliwood> m: sub foo { fail }; with foo() { say 1 }

[21:43] <camelia> rakudo-moar bf318db68: ( no output )

[21:43] <Doc_Holliwood> m: sub foo { 1 }; with foo() { .say }

[21:43] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´1‚ê§¬ª

[21:49] <Doc_Holliwood> m: sub foo { 1 }; .say with foo()

[21:49] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´1‚ê§¬ª

[21:52] <Doc_Holliwood> m: sub foo { 1 }; say with foo() ?? 1 !! 0;

[21:52] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun‚ê§at <tmp>:1‚Ä¶¬ª

[21:52] <go|dfish> 1

[21:54] <Doc_Holliwood> m: sub foo { 1 }; .say with foo() or 22

[21:54] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´1‚ê§¬ª

[21:54] <Doc_Holliwood> m: sub foo { fail }; .say with foo() or 22

[21:54] <camelia> rakudo-moar bf318db68: OUTPUT: ¬´22‚ê§¬ª

[21:54] <Doc_Holliwood> that's it

[21:54] <Doc_Holliwood> overly clever?

[21:54] <Doc_Holliwood> should i use an if and two returns?

[22:03] <discord6> <noelsken> that with ... or ... construct still needs an if to handle the sentinel value doesn't it?

[22:05] <discord6> <noelsken> I had had "with $x and .so { ... }" as an idea but with hasn't topicalized there yet

[22:06] <Geth> ¬¶ ecosystem: hythm7++ created pull request #470: Add Pakku to ecosystem

[22:06] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/470

[22:06] <discord6> <noelsken> anyway I'd suggest "do it minimally clever"

[22:34] <Geth> ¬¶ ecosystem: ec6e8b7b3e | (Haytham Elganiny)++ | META.list

[22:34] <Geth> ¬¶ ecosystem: Add Pakku to ecosystem

[22:34] <Geth> ¬¶ ecosystem: 

[22:34] <Geth> ¬¶ ecosystem: https://github.com/hythm7/Pakku

[22:34] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/ec6e8b7b3e

[22:34] <Geth> ¬¶ ecosystem: 7d162e5438 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | META.list

[22:34] <Geth> ¬¶ ecosystem: Merge pull request #470 from hythm7/add-pakku-meta

[22:34] <Geth> ¬¶ ecosystem: 

[22:34] <Geth> ¬¶ ecosystem: Add Pakku to ecosystem

[22:34] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/7d162e5438

[22:42] <AlexDaniel> weekly: non-cpan modules are sometimes not mentioned in weeklies, so just making sure. Meet Pakku! https://github.com/hythm7/Pakku

[22:42] <notable6> AlexDaniel, Noted! (weekly)

[22:46] <AlexDaniel> that's a lot of emojis in the source code :)

[22:49] *** k-man joined
[22:50] <Doc_Holliwood> sentinel value?

[22:52] <discord6> <noelsken> Doc_Holliwood: I understood the 22 as placeholder value for "the LHS of the or was falsey"

[22:53] *** pmurias left
[22:54] *** pmurias joined
[22:54] *** lucasb left
[22:54] <Doc_Holliwood> yes

[22:56] <Doc_Holliwood> the "real code" was more like sub f { ...; return $_ with from-json($json) or {} } 

[22:56] *** chloekek left
[22:56] <Doc_Holliwood> where from json might fail and that gets elegantly caught by the with

[22:58] <discord6> <noelsken> ah, that makes sense

[23:17] *** marcusr joined
[23:56] *** pmurias left
[23:59] *** Kaiepi left
[23:59] *** Kaiepi joined
