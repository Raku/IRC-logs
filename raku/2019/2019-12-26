[00:08] *** johnjohn101 joined
[00:39] <tbrowder> pheix: thnx, that's my vote also

[00:39] <tellable6> tbrowder, I'll pass your message to pheix

[01:11] *** tellable6 left
[01:11] *** evalable6 left
[01:14] *** tellable6 joined
[01:14] *** evalable6 joined
[01:22] *** sena_kun left
[01:24] *** Tirifto left
[01:37] *** sena_kun joined
[01:49] *** kalkin- joined
[01:50] *** Xliff left
[01:53] *** kalkin left
[02:05] *** mahmudov left
[02:35] *** johnjohn101 left
[02:39] *** johnjohn101 joined
[02:47] *** vrurg_ joined
[02:48] *** vrurg left
[03:01] *** wamba joined
[03:17] *** guifa2 joined
[03:23] *** sena_kun left
[03:38] *** sena_kun joined
[03:50] <cpan-raku> New module released to CPAN! Sparrow6 (0.0.11) by 03MELEZHIK

[04:07] *** guifa2 left
[04:21] *** guifa2 joined
[04:26] *** guifa2 left
[04:29] *** guifa2 joined
[04:37] *** guifa2 left
[04:53] *** ZzZombo_ joined
[04:56] *** ZzZombo left
[04:57] *** ZzZombo__ joined
[04:57] *** ZzZombo__ is now known as ZzZombo

[04:59] *** ZzZombo_ left
[05:09] *** RobRaku joined
[05:17] *** wamba left
[05:22] *** sena_kun left
[05:38] *** sena_kun joined
[05:49] *** johnjohn101 left
[05:58] *** Kaiepi left
[05:59] *** Kaiepi joined
[06:04] *** Kaiepi left
[06:05] *** Kaiepi joined
[06:18] *** Kaiepi left
[06:18] *** Kaiepi joined
[06:20] *** Kaiepi left
[06:21] *** Kaiepi joined
[06:57] *** RobRaku left
[06:59] *** RobRaku joined
[07:20] *** cpan-raku left
[07:21] *** cpan-raku joined
[07:21] *** cpan-raku left
[07:21] *** cpan-raku joined
[07:23] *** sena_kun left
[07:39] *** sena_kun joined
[08:32] *** rindolf joined
[08:37] *** xinming_ joined
[08:40] *** xinming left
[09:18] *** sena_kun left
[09:33] *** sena_kun joined
[09:40] *** mahmudov joined
[10:03] *** RobRaku left
[10:16] *** RobRaku joined
[10:30] *** holyghost left
[10:30] *** holyghost joined
[10:34] *** veesh left
[10:38] *** pilne left
[11:04] *** kalkin- left
[11:12] *** kalkin- joined
[11:22] *** eir0 is now known as eiro

[11:23] *** sena_kun left
[11:36] *** RobRaku left
[11:38] *** wamba joined
[11:38] *** sena_kun joined
[11:47] *** kensanata joined
[12:17] *** pheix joined
[12:21] *** RobRaku joined
[12:44] *** kensanata left
[12:45] *** sena_kun left
[12:49] *** chloekek joined
[12:53] *** wamba left
[12:57] *** pheix left
[12:58] *** mahmudov left
[13:03] <xinming_> SmokeMachine: ping

[13:03] <xinming_> !seen SmokeMachine 

[13:05] <SmokeMachine> xinming_: pong

[13:08] <xinming_> SmokeMachine: Is multi column relationship implemented in 0.1?

[13:10] <SmokeMachine> Never tried... bu I think it should work

[13:11] <SmokeMachine> xinming_: ^^

[13:11] *** sena_kun joined
[13:12] *** RobRaku left
[13:13] <xinming_> SmokeMachine: Do we have example for this?

[13:17] <xinming_> Also, something like   model A { has B @.many is column{ :references{B.a-id} } };  model B { has A $.a is column{ :references{A.id} }; };       $a-row.many.^create: ...

[13:17] <xinming_> the $a-row.many.^create doesn't work yet, now I use something like,  $a-row.WHAT.of.^create: ...

[13:20] <xinming_> hmm, sorry, 2 months of no writing code, the code is not correct. just the ideas

[13:22] *** sena_kun left
[13:23] *** chloekek left
[13:24] *** chloekek joined
[13:37] *** sena_kun joined
[14:10] *** mahmudov joined
[14:19] *** Kaeipi joined
[14:20] *** Kaiepi left
[14:23] *** Kaeipi left
[14:24] *** Kaiepi joined
[14:29] *** lucasb joined
[14:32] <cpan-raku> New module released to CPAN! Gnome::GObject (0.15.7) by 03MARTIMM

[14:35] <SmokeMachine> xinming_: https://www.irccloud.com/pastebin/6VwUjDE5/

[14:44] *** vrurg joined
[14:46] *** vrurg_ left
[14:50] *** AlexDaniel left
[14:50] *** vrurg_ joined
[14:52] *** vrurg left
[15:22] *** sena_kun left
[15:33] <cpan-raku> New module released to CPAN! WebService::AWS::S3 (0.0.3) by 03BDUGGAN

[15:36] *** chloekek left
[15:38] *** sena_kun joined
[15:46] *** RobRaku joined
[16:12] *** mahmudov left
[16:14] *** mahmudov joined
[16:20] *** mahmudov left
[16:22] *** mahmudov joined
[16:25] *** mahmudov left
[16:27] *** mahmudov joined
[16:44] *** zeylos left
[16:46] *** zeylos joined
[16:49] *** kensanata joined
[16:54] *** wamba joined
[16:54] *** Kaiepi left
[16:55] *** Doc_Holliwood joined
[16:58] *** Kaiepi joined
[16:59] *** RobRaku left
[16:59] *** zeylos left
[17:19] <cpan-raku> New module released to CPAN! CSS (0.0.2) by 03WARRINGD

[17:24] *** sena_kun left
[17:32] *** kensanata left
[17:33] *** kensanata joined
[17:38] *** gabiruh joined
[17:39] *** holyghost left
[17:39] *** holyghost joined
[17:39] *** sena_kun joined
[17:42] *** zeylos joined
[18:02] *** finanalyst joined
[18:20] *** vividsnow joined
[18:24] *** pilne joined
[18:25] *** Doc_Holliwood left
[18:28] *** lucasb left
[18:30] *** finanalyst left
[18:31] *** kensanata left
[18:42] *** Poohman joined
[18:43] <Poohman> hello all

[18:44] <Poohman> Is there any simple ways to use prompt and ensure the only the correct type is entered

[18:47] <sena_kun> while not check-validness(prompt('Insert a value: ')) { say "Too bad!" }?

[18:51] <Poohman> Hi sena_kun - let me read about check-validness

[18:51] *** jmerelo joined
[18:52] <jmerelo> Hi

[18:52] <tellable6> 2019-12-23T19:35:01Z #raku <kalkin-> jmerelo the succ & pred stuff is magic. so I guess i need to do a PR which turns the MORE MAGIC switch on this ranges

[18:52] <tellable6> 2019-12-23T20:13:46Z #raku <Kaiepi> jmerelo, i'll get the post scheduled

[18:52] <tellable6> 2019-12-23T20:18:56Z #raku <Kaiepi> jmerelo, oh mb didn't see the emails

[18:52] <jmerelo> .tell kalkin- we all need more magic :-)

[18:52] <tellable6> jmerelo, I'll pass your message to kalkin

[18:52] <Poohman> do we get to specify the type

[18:52] <jmerelo> .tell Kaiepi OK :-)

[18:52] <tellable6> jmerelo, I'll pass your message to Kaiepi

[18:52] <jmerelo> I've just published a closing post for this year's advent calendar https://rakuadventcalendar.wordpress.com/

[18:53] <jmerelo> We've had around 8000 visits, which is quite good.

[18:53] <jmerelo> During this month, the old Advent Calendar at perl6advent.wordpress.com had 2k visits

[18:54] <jmerelo> Also, this time last year the old AC gathered 16k visits

[18:54] <jmerelo> Still, not bad for the first time ever, new URL, no incoming search engine queries or links...

[18:54] <jmerelo> But if you don't mind, I'm going to make some changes for next year.

[18:55] <jmerelo> Main change will be that there will be no slots assigned from scratch, the editor (me or whoever) will assign the publishing slots as they are available.

[18:56] <jmerelo> Also, I'd like to have all, or most, articles available by Dec 1st. 

[18:56] <lizmat> seems a fair goal  :-)

[18:56] <jmerelo> Which I also did this year but, well, I didn't have mine ready and it was assigned for the 6th, so, well...

[18:57] <jmerelo> Anyway, I think that not assigning a day and giving the same deadline for everyone will allow for easier scheduling.

[18:57] <jmerelo> Nobody that was not an author did notice, but there was a fair amount of rescheduling in the background so that there would be an article ready every day

[18:58] <jmerelo> Also, tbrowder had to write an extra article, for which I'm quite grateful.

[18:59] <jmerelo> I will also ask everyone to send me an email (one that people actually read) or any other way of contacting, like matrix or telegram, so that I can start to ask for articles by the middle of August

[18:59] <jmerelo> is

[18:59] <jmerelo> I meant, ish.

[19:00] <jmerelo> Anyway, thanks a lot to everyone who's written an article this year or any of the others.

[19:01] <jmerelo> You can still edit it, categorize it, add the 2019 tag and maybe fix something if you so want.

[19:01] <jmerelo> Linking the official documentation will be specially helpful

[19:02] <jmerelo> We also need help with the CSS edition. Tom Browder also paid for the premium site, so it will be really helpful if we make it seem really nice.

[19:02] <jmerelo> Since tbrowder paid, we also have a free domain we can use.

[19:02] <jmerelo> Changing it in the middle of the season seemed a bit confusing, but we can do it now.

[19:02] <jmerelo> Please send suggestions to tbrowder

[19:03] <Poohman> m: say "test"

[19:03] <camelia> rakudo-moar 672c5d403: OUTPUT: «test␤»

[19:03] <jmerelo> .tell tbrowder what about simply raku-advent-calendar.org for a domain?

[19:03] <tellable6> jmerelo, I'll pass your message to tbrowder

[19:04] *** Doc_Holliwood joined
[19:07] <Poohman> m: my $line = 12; if ($line.Numeric.does(Numeric)) {my $amt = $line} else {say "Wrong input"}

[19:07] <camelia> rakudo-moar 672c5d403: ( no output )

[19:07] <Poohman> m: my $line = "Twelve"; if ($line.Numeric.does(Numeric)) {my $amt = $line} else {say "Wrong input"}

[19:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «Wrong input␤»

[19:09] <lizmat>  raku-advent-calendar.blog    # JJ ??

[19:09] <lizmat> .org is becoming suspect

[19:09] <jmerelo> lizmat: ah, right, I forgot that. Please tell tbrowder

[19:09] <lizmat> .tell tbrowder perhaps  raku-advent-calendar.blog  ?

[19:09] <tellable6> lizmat, I'll pass your message to tbrowder

[19:10] <Geth_> ¦ advent: d4643bdf0a | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | raku-advent-2020/schedule

[19:10] <Geth_> ¦ advent: Changing the call for articles

[19:10] <Geth_> ¦ advent: 

[19:10] <Geth_> ¦ advent: Please @tbrowder and @nige123 check that next year we are not going to have fixed slots; the editor will schedule them when they are ready, and they will need to be ready by midnight December 1st 2020.

[19:10] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/d4643bdf0a

[19:12] <Geth_> ¦ advent: 273918329b | (JJ Merelo)++ | 2 files

[19:12] <Geth_> ¦ advent: Markdownizes

[19:12] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/273918329b

[19:12] <Geth_> ¦ advent: 4dab55630f | (JJ Merelo)++ | 2 files

[19:12] <Geth_> ¦ advent: Changes to real name

[19:12] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/4dab55630f

[19:12] <jmerelo> releasable6: status

[19:12] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 0 out of 300 commits logged

[19:12] <releasable6> jmerelo, Details: https://gist.github.com/4575ef3b90d381976d3f7dc7e0f5343a

[19:19] *** Tirifto joined
[19:23] *** sena_kun left
[19:24] *** chloekek joined
[19:26] *** sauvin left
[19:38] *** sena_kun joined
[19:38] *** jmerelo left
[19:46] <Poohman> m: my $line = "2019-12-26"; Date.new($line).does(Date);

[19:46] <camelia> rakudo-moar 672c5d403: ( no output )

[19:46] <Poohman> m: my $line = "Test"; Date.new($line).does(Date);

[19:46] <camelia> rakudo-moar 672c5d403: OUTPUT: «Invalid Date string 'Test'; use yyyy-mm-dd instead␤  in block <unit> at <tmp> line 1␤␤»

[19:46] *** RobRaku joined
[19:47] <Poohman> m: my $line = "2019-12-26"; Date.new($line);

[19:47] <camelia> rakudo-moar 672c5d403: ( no output )

[19:47] <Poohman> m: my $line = "Test"; Str.new($line).does(Str);

[19:47] <camelia> rakudo-moar 672c5d403: OUTPUT: «Default constructor for 'Str' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[19:51] <chloekek> Really nice that you can put overloads of MAIN in different source files.

[19:52] <lizmat> Poohman: what is wrong with:

[19:52] <lizmat> dd Date.new('2019-12-26')

[19:52] <evalable6> lizmat, rakudo-moar d5a34f19f: OUTPUT: «Date.new(2019,12,26)␤»

[19:53] <lizmat> m: my $line = "2019-12-26"; say Date.new($line);

[19:53] <camelia> rakudo-moar 672c5d403: OUTPUT: «2019-12-26␤»

[19:54] <Poohman> Hi Lizmat, im trying to map all my members to one sanitising function which will make sure the user input matches my member types

[19:55] <lizmat> that could mean many things  :-)

[19:55] <Poohman> The condition i have been using till now is $line.Str.does(Str) or $line.Numeric.does(Numeric)

[19:56] <lizmat> so you want to see if something is a Str or Numeric ?

[19:56] <Poohman> Str, Numeric, Date etc - based on the type of my member

[19:57] <lizmat> $line ~~ Str   ??

[19:59] <Poohman> ok let me make some checks to see if I can make that work with Date as well

[19:59] <Poohman> as simple as that? thanks

[20:05] <chloekek> Got a nice commit hash: ffffff1

[20:05] <lizmat> .oO( wtfffff1 )

[20:07] <chloekek> What a lucky number to be allocated to Raku code.

[20:30] <chloekek> Is it possible to enable rakudo profiling using an environment variable instead of a command-line argument?

[20:31] <chloekek> I have various bash scripts wrapping my program (to set other environment variables, such as PERL6LIB and PATH), so shoving in that extra command-line argument before the Raku source file name would be inconvenient.

[20:33] <lizmat> perhaps https://github.com/perl6/nqp/blob/master/docs/ops.markdown#mvmstartprofile is what you're looking for

[20:33] <lizmat> but there is no env variable atm

[20:38] *** dakkar joined
[20:38] <dakkar> p6: my Positional $x=Array.new; # ok, nothing specal

[20:38] <camelia> rakudo-moar 672c5d403: ( no output )

[20:39] <dakkar> p6: my Positional[Str] $x=Array[Str].new; # ok, this works

[20:39] <camelia> rakudo-moar 672c5d403: ( no output )

[20:39] <dakkar> p6: my Positional[Str:D] $x=Array[Str:D].new; # uh?

[20:39] <camelia> rakudo-moar 672c5d403: OUTPUT: «Type check failed in assignment to $x; expected Positional[Str:D] but got Array[Str:D] (Array[Str:D].new())␤  in block <unit> at <tmp> line 1␤␤»

[20:39] <dakkar> is that some bootstrapping special case? should that work?

[20:40] <chloekek> lizmat: Thanks! MoarVM::Profiler class also seems relevant.

[20:41] <lizmat> yeah, that still needs a lot of work, though  :-)

[20:44] <dakkar> even stranger:

[20:44] <dakkar> p6: Array[Str:D] ~~ Positional # ok

[20:44] <camelia> rakudo-moar 672c5d403: ( no output )

[20:44] <dakkar> p6: Array[Str:D] ~~ Positional[Str] # ok, covariant

[20:44] <camelia> rakudo-moar 672c5d403: ( no output )

[20:44] <chloekek> lizmat: also seems like generating HTML is tricker with manually invoking these routines.

[20:44] <dakkar> p6: Array[Str:D] ~~ Positional[Str:D] # uh?

[20:44] <camelia> rakudo-moar 672c5d403: ( no output )

[20:44] <chloekek> lizmat: I’ll just insert the flag.

[20:44] <dakkar> p6: say Array[Str:D] ~~ Positional # ok

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[20:45] <dakkar> p6: say Array[Str:D] ~~ Positional[Str] # ok, covariant

[20:45] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[20:45] <dakkar> p6: say Array[Str:D] ~~ Positional[Str:D] # uh?

[20:45] <camelia> rakudo-moar 672c5d403: OUTPUT: «False␤»

[20:45] <lizmat> chloekek: yeah, that seems to be the easiest way to shave that yak

[20:46] <dakkar> lizmat: do you have any insight on my strange type mis-match?

[20:46] <cpan-raku> New module released to CPAN! Sparrowdo::Chef::Client (0.1.0) by 03MELEZHIK

[20:46] <lizmat> dakkar: alas, no

[20:47] <dakkar> I'll have to wait for some other raku-expert, then ☺

[20:49] <lizmat> yeah, jnthn  comes to mind

[20:54] <dakkar> I *think* it's a bug, but those bits are declared in BOOTSTRAP and that's a bit too obscure for me

[20:57] <lizmat> it's obscure for a lot of people  :-(

[21:01] <dakkar> is it even possible to declare a parametric class type?

[21:02] <lizmat> yes, by adding a ^parameterize method ?

[21:02] *** RobRaku left
[21:02] <lizmat> see how object / typed Hashes are implemented

[21:05] <chloekek> … and running into https://github.com/perl6/nqp/issues/567 again :')

[21:06] * chloekek is going to look into fixing that

[21:06] *** RobRaku joined
[21:07] <lizmat> ++chloekek 

[21:09] <dakkar> lizmat: I can't find any mention of `parameterize` in the documentation…

[21:09] <lizmat> well, that warrants a doc ticket then

[21:10] <lizmat> lemme see if I can create a gist

[21:10] <dakkar> I found a method by that name in ParametricRoleHOW

[21:10] <dakkar> (the source)

[21:10] <lizmat> m: class A { method ^parameterize(|c) { dd c } }; A[Int].new

[21:10] <camelia> rakudo-moar 672c5d403: OUTPUT: «\(A, Int)␤»

[21:11] <lizmat> m: class A { method ^parameterize(|c) { dd c } }; A[1,2,3,4].new

[21:11] <camelia> rakudo-moar 672c5d403: OUTPUT: «\(A, 1, 2, 3, 4)␤»

[21:11] <dakkar> ok, so ::A has a metaclass that's not ClassHOW, but a subclass of it with a redefined / extra method?

[21:12] <lizmat> dakkar: it is supposed to return the mixed in type, according to the given parameters (and your logic)

[21:12] <lizmat> yeah, that's basically what the 'method ^foo() { }' does, as I understand it

[21:14] <lizmat> m: class A { method ^parameterize(|c) { dd c } }; dd A[1,2,3,4].new

[21:14] <camelia> rakudo-moar 672c5d403: OUTPUT: «\(A, 1, 2, 3, 4)␤Nil␤»

[21:17] <dakkar> role Foo[::X] { }; class Bar { method ^parameterize(Any:U $type, *@) { return Bar but Foo[$type] } }; dd Bar[Str].new;

[21:17] <evalable6> dakkar, rakudo-moar d5a34f19f: OUTPUT: «Bar+{Foo[Bar]}.new␤»

[21:17] <dakkar> role Foo[::X] { }; class Bar { method ^parameterize(Any:U $type, *@) { return Bar but Foo[$type] } }; dd Bar[Str] ~~ Foo[Str];

[21:17] <evalable6> dakkar, rakudo-moar d5a34f19f: OUTPUT: «Bool::False␤»

[21:17] <dakkar> uh?

[21:17] *** cpan-raku left
[21:17] <Poohman> m: my $line = "2019-12-26"; Str.new($line);

[21:17] <camelia> rakudo-moar 672c5d403: OUTPUT: «Default constructor for 'Str' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[21:18] <Poohman> m: my $line = "2019-12-26"; Date.new($line);

[21:18] <camelia> rakudo-moar 672c5d403: ( no output )

[21:18] <lizmat> Poohman: m: is NOT a REPL, you need to e.g. 'say' it

[21:18] <lizmat> m: my $line = "2019-12-26"; say Date.new($line);

[21:19] <camelia> rakudo-moar 672c5d403: OUTPUT: «2019-12-26␤»

[21:19] *** cpan-raku joined
[21:19] *** cpan-raku left
[21:19] *** cpan-raku joined
[21:19] <lizmat> m: my $line = "2019-12-26"; dd Date.new($line);   # or use 'dd', which may give clearer output

[21:19] <camelia> rakudo-moar 672c5d403: OUTPUT: «Date.new(2019,12,26)␤»

[21:20] <Poohman> Ok Lizmat, but why does Str.new($line) not work - conversely what does the error regarding named arguments mean?

[21:21] <lizmat> first of all, using Str.new to create a string, is really a lot of writing

[21:21] <lizmat> in Raku one usually uses the prefix ~ for that

[21:21] <lizmat> m: dd ~42

[21:21] <camelia> rakudo-moar 672c5d403: OUTPUT: «"42"␤»

[21:21] <lizmat> in Raku, when you create a class, it's "new" method will only accept named parameters

[21:22] <lizmat> m: class A { has $.foo = 42 }; dd A.new( foo => 666 )

[21:22] <camelia> rakudo-moar 672c5d403: OUTPUT: «A.new(foo => 666)␤»

[21:22] <lizmat> m: class A { has $.foo = 42 }; dd A.new( 666 )

[21:22] <camelia> rakudo-moar 672c5d403: OUTPUT: «Default constructor for 'A' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[21:22] *** sena_kun left
[21:23] <lizmat> Poohman: if you really want to create strings the hard way, you could do it like this:

[21:23] <lizmat> m: dd Str.new(value => 42)

[21:23] <camelia> rakudo-moar 672c5d403: OUTPUT: «"42"␤»

[21:23] *** wildtrees joined
[21:24] *** wildtrees left
[21:25] *** wildtrees joined
[21:26] <Poohman> Thanks

[21:27] *** wildtrees left
[21:28] *** wildtrees joined
[21:38] *** sena_kun joined
[21:42] <dakkar> lizmat: https://github.com/rakudo/rakudo/issues/3383 at least it's recorded

[21:52] <dakkar> also https://github.com/Raku/doc/issues/3132

[21:52] *** veesh joined
[21:53] <dakkar> and with this, I've raku'd enough for tonight ☺

[21:53] *** dakkar left
[22:08] *** RobRaku left
[22:38] *** chloekek left
[22:44] *** Xliff joined
[22:44] <Xliff> o/

[22:45] <Xliff> Merry Day-After-XMas, #raku!

[22:46] <El_Che> 4 years and 1 day anniversary

[22:46] <tellable6> 2019-12-17T20:53:04Z #raku-dev <patrickb> El_Che The rakudo-pkg releases are missing the files in rakudo-repo/tools/binary-release/Linux.

[22:46] <tellable6> hey El_Che, you have a message: https://gist.github.com/410216f79e32f3d6930f50ea06e66ec2

[22:46] *** wamba left
[22:49] *** rindolf left
[22:49] *** chloekek joined
[22:50] <Xliff> El_Che: Really? Nice!

[22:50] <El_Che> releasable6: status

[22:50] <releasable6> El_Che, Next release will happen when it's ready. There are no known blockers. 0 out of 300 commits logged

[22:50] <releasable6> El_Che, Details: https://gist.github.com/cd4b9756959f43492128b68dcbd4d322

[22:54] <chloekek> Last release of 2019?

[22:55] <chloekek> Or first release of 2020? :þ

[23:04] *** Kaeipi joined
[23:04] *** Kaiepi left
[23:07] <Xliff> m: 'þ'.uniname.say

[23:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «LATIN SMALL LETTER THORN␤»

[23:07] <Xliff> Oh I need to Compose that...

[23:07] <Xliff> m: 'þ'.chr.fmt('%x').say

[23:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5þ' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[23:07] <Xliff> m: 'þ'.ord.fmt('%x').say

[23:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «fe␤»

[23:08] <Xliff> :Þ

[23:08] <Xliff> \o/

[23:08] <Xliff> :þ

[23:08] <Xliff> chloekek++

[23:14] <chloekek> Ever since enabling the compose key I’ve been using that smiley.

[23:14] <Xliff> The Compose key rules!

[23:14] <chloekek> Also added rules for ｢｣ ([[ and ]]) for Raku string literals.

[23:14] <Xliff> Ooh!

[23:15] <Xliff> Those are good Texas Alt choices.

[23:15] <chloekek> And I can type ‘’ outside of my editor now too.

[23:15] <Xliff> chloekek: How good are you with the MOP?

[23:16] <chloekek> 0% good.

[23:16] <Xliff> Heh. OK.

[23:16] <Xliff> No worries. 

[23:16] <Xliff> I'm just trying to figure out why some MOP code I wrote isn't getting executed.

[23:16] <chloekek> I want to learn though.

[23:17] <chloekek> Post the code.

[23:17] <Xliff> https://github.com/Xliff/Method-Also/blob/proto-role-fix-again/lib/Method/Also.pm6#L38

[23:17] <Xliff> Trying to make aliases work in roles. Classes are working just fine. Just roles are not.

[23:17] <Xliff> Particularly where a role defines a proto.

[23:18] <Xliff> Oh ... wanna see something semi-neat?

[23:18] <chloekek> Sure.

[23:19] <Xliff> https://github.com/Xliff/p6-GtkPlus/blob/master/scripts/dependency-build.pl6

[23:19] <Xliff> I have 1284 compunits in that project.

[23:20] <Xliff> If I run through the optimized build list here: https://github.com/Xliff/p6-GtkPlus/blob/master/BuildList

[23:20] <Xliff> It takes around 3200 seconds to compile.

[23:20] <Xliff> Using that first script I can get that down to 1400 seconds. 

[23:20] <chloekek> Build in parallel.

[23:20] <Xliff> :)

[23:21] <chloekek> I’m using Cro and it also takes a long time to build.

[23:21] <chloekek> Like five seconds.

[23:21] <Xliff> Ooh! What are you using Cro for?

[23:21] <Xliff> ppft! 5 seconds? I'll take that any day.

[23:22] <chloekek> I have a SQLite database with Raku archive metadata and I have a web app that searches it with Cro::HTTP.

[23:22] <Xliff> I've got several single compunits that take around 30 seconds to precompile.

[23:22] <Xliff> SQLite? Interesting.

[23:23] <Xliff> Have you checked the performance of that against something like MySQL?

[23:23] <chloekek> I have not used MySQL. I am very familiar with PostgreSQL. SQLite is easier to set up.

[23:23] *** sena_kun left
[23:23] <chloekek> I could switch to PostgreSQL but I don’t need it for this project.

[23:23] <Xliff> Ah. I have worked with both MySQL and SQLite3.

[23:24] <Xliff> Sounds like a cool project. Is there a repo?

[23:25] <Xliff> I want to write a web framework based on Cro::WebApp. Just don't know what to put into it...

[23:26] <Xliff> I think I have a way to add scope limited routes to the main object.

[23:26] <Xliff> Think: extensibility

[23:36] *** sena_kun joined
[23:41] *** chloekek left
[23:44] *** sena_kun left
