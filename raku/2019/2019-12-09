[00:06] <AlexDaniel> squashable6: status

[00:06] <squashable6> AlexDaniel, The date for the next SQUASHathon is not set

[00:11] <tbrowder> ok, jjmerelos Raku Advent post for Day 9 is now published!

[00:12] <AlexDaniel> weekly: Another squashathon ended! And the winner is MasterDuke17++!

[00:12] <notable6> AlexDaniel, Noted! (weekly)

[00:14] <tbrowder> .tell jmerelo muchas gracias for saving my "Christmas Ham!"

[00:14] <tellable6> tbrowder, I'll pass your message to jmerelo

[00:25] *** cognomin_ joined
[00:28] *** cognominal left
[00:56] <dominix_> I have a strange problem with zef. it looks that I cannot uninstall some modules

[00:57] <dominix_> zef list --installed

[00:57] <dominix_> ...  Test::META:ver<0.0.13>:auth<github:jonathanstowe>  ...

[00:57] <dominix_> zef uninstall --verbose "Test::META:ver<0.0.13>"

[00:57] <dominix_> !!!> Found no matching candidates to uninstall

[00:58] <dominix_> zef list --installed

[00:58] <dominix_> Test::META:ver<0.0.13>:auth<github:jonathanstowe>

[00:58] <dominix_> Test::META:ver<0.0.16>:auth<github:jonathanstowe>:api<1.0>

[01:22] <dominix_> I have to uninstall Test::META then install Test::META to have only 

[01:22] <dominix_> Test::META:ver<0.0.16>:auth<github:jonathanstowe>:api<1.0> in the zef list --installed

[01:23] <dominix_> is that a bug ?

[01:26] <vrurg> dominix_: looks like it is. I think it'd be good to file an issue in zef repo.

[01:28] *** evalable6 left
[01:30] *** evalable6 joined
[02:00] *** xinming left
[02:01] *** xinming joined
[02:02] <dominix_> vrurg: OK

[02:09] <dominix_> is it safe to "rm -rf ~/.zef ~/.perl6" ? it seeme it fix some issue in zef ... 

[02:09] <dominix_> seems

[02:18] <ZzZombo> SmokeMachine: I kinda got how to declare, but how to use a custom metaclass?

[02:22] *** lucasb left
[02:36] *** Doc_Holliwould left
[02:44] *** dominix_ left
[03:22] *** wamba joined
[03:40] *** stoned75 left
[04:12] <ZzZombo> m: role R[Str:D $n]{has $.n = $n};role R2[$n]{also does R[$n]};class A does R2['asd'] {};say A.new

[04:12] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/_Gyuy6UAd2‚ê§No appropriate parametric role variant available for 'R'‚ê§at /tmp/_Gyuy6UAd2:1‚ê§¬ª

[04:12] <ZzZombo> m: role R[Str:D $n]{has Str:D $.n = $n};role R2[$n]{also does R[$n]};class A does R2['asd'] {};say A.new

[04:12] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ouAq069lhy‚ê§No appropriate parametric role variant available for 'R'‚ê§at /tmp/ouAq069lhy:1‚ê§¬ª

[04:12] <ZzZombo> Please work.

[04:14] <ZzZombo> m: role R[Str:D $n]{has Str:D $.n = $n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.new

[04:14] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/LPRG1K32SH‚ê§No appropriate parametric role variant available for 'R'‚ê§at /tmp/LPRG1K32SH:1‚ê§¬ª

[04:18] *** cpan-raku left
[04:27] *** cpan-raku joined
[04:27] *** cpan-raku left
[04:27] *** cpan-raku joined
[05:01] *** wamba left
[05:18] *** AlexDani` joined
[05:20] *** AlexDaniel left
[05:22] *** xinming left
[05:22] *** xinming joined
[05:26] *** sauvin joined
[05:28] *** AlexDani` is now known as AlexDaniel

[05:28] *** AlexDaniel left
[05:28] *** AlexDaniel joined
[05:28] *** benjif left
[05:35] *** rindolf joined
[05:44] <ZzZombo> m: role R[Str:D $n]{has Str:D $.n = $n};role R2 {also does R['R2']};class A does R['asd'] does R2 {};say A.new

[05:44] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/WRqsRmQpXb‚ê§Attribute '$!n' conflicts in role composition‚ê§at /tmp/WRqsRmQpXb:1‚ê§¬ª

[05:45] <ZzZombo> m: role R[Str:D $n]{has Str:D $.n = $n};role R2 {also does R['R2']};class A does R['asd'] {};say A.new

[05:45] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´A.new(n => "asd")‚ê§¬ª

[05:45] <ZzZombo> m: role R[Str:D $n]{has Str:D $.n = $n};role R2 {also does R['R2']};class A does R2 {};say A.new

[05:45] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´A.new(n => "R2")‚ê§¬ª

[05:45] <ZzZombo> m: role R[Str:D $n]{has Str:D $.n = $n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.new

[05:45] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/4n5ZU3J7TC‚ê§No appropriate parametric role variant available for 'R'‚ê§at /tmp/4n5ZU3J7TC:1‚ê§¬ª

[05:45] <ZzZombo> WHYYYYYYYYY

[06:09] *** wamba joined
[06:15] *** stoned75 joined
[06:23] *** Xliff joined
[06:43] *** RobRaku joined
[06:47] *** RobRaku left
[06:51] *** wamba left
[06:52] *** dominix joined
[07:03] *** xinming left
[07:04] *** xinming joined
[07:31] *** wamba joined
[07:34] <dominix> hi everyone, I have a question regarding module. How do I make the link with the name of a module I have installed and it real install location ?

[07:34] <dominix> for exemple I have installed PSGI

[07:35] <dominix> if I tpe p6doc PSGI i have "No Pod found in /opt/rakudo-pkg/share/perl6/site/sources/C3577325076AA02263D770AD0F22D36E14F81568"

[07:37] <dominix> the fact is : I have in /opt/rakudo-pkg/share/perl6/site/sources/ much more stuff than I have modules installed

[07:49] <dominix> how does raku knows where to search ? is there a database ? a computation of the name ? how does this works ?

[08:01] *** wamba left
[08:06] *** wamba joined
[08:09] *** abraxxa joined
[08:12] *** cpan-raku left
[08:13] *** cpan-raku joined
[08:13] *** cpan-raku left
[08:13] *** cpan-raku joined
[08:15] <Xliff> dominix: Sorry to text and go, but the short answer is that the name is computed by the compiler. I know not the details.

[08:15] <Xliff> Good night!

[08:15] *** Xliff left
[08:18] *** xinming left
[08:21] *** xinming joined
[08:22] *** xinming left
[08:22] *** xinming joined
[08:24] *** stoned75 left
[08:42] *** dominix left
[08:58] <ZzZombo> m: role R[Str:D $n]{our Str:D $n = $n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.n

[08:58] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04===‚ê§Ca‚Ä¶¬ª

[08:58] <evalable6> ZzZombo, Full output: https://gist.github.com/f884c3312718c8801f9db6cae5ffbc62

[09:08] <ZzZombo> m: role R[Str:D $_n]{our Str:D $n = $_n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.n

[09:08] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[09:08] <evalable6> ZzZombo, Full output: https://gist.github.com/e0f1d421005933f671e738508398a9be

[09:09] <ZzZombo> m: role R[Str:D $_n]{our $n = $_n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.n

[09:09] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª

[09:09] <evalable6> ZzZombo, Full output: https://gist.github.com/7eaf82b2b211b3db7de6373322b74225

[09:10] <ZzZombo> perlbot: eval: role R[Str:D $_n]{OUR::$n = $_n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.n

[09:10] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/LvNP_TLNfb‚ê§Malformed lookup of ::$n; please use ::('$n'), ::{'$n'}, or ::<$n>‚ê§at /tmp/LvNP_TLNfb:1‚ê§------> 3role R[Str:D $_n]{OUR7‚èè5::$n = $_n};role R2[Str:D $n]{also does ‚ê§[Exited 1]

[09:10] <ZzZombo> perlbot: eval: role R[Str:D $_n]{OUR::<$n> = $_n};role R2[Str:D $n]{also does R[$n]};class A does R2['asd'] {};say A.n

[09:10] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/6yrk6BHfRZ‚ê§No appropriate parametric role variant available for 'R'‚ê§at /tmp/6yrk6BHfRZ:1‚ê§[Exited 1]

[09:11] <ZzZombo> perlbot: eval: role R[Str:D $_n]{OUR::<$n> = $_n};role R2[Str:D $n]{also does R['asd']};class A does R2['asd'] {};say A.n

[09:11] <perlbot> ZzZombo: No such method 'n' for invocant of type 'A'‚ê§  in block <unit> at /tmp/hA2EAiiOQ0 line 1‚ê§‚ê§[Exited 1]

[09:11] <ZzZombo> perlbot: eval: role R[Str:D $_n]{OUR::<$n> = $_n};role R2[Str:D $n]{also does R['asd']};class A does R2['asd'] {};say A::n

[09:11] <perlbot> ZzZombo: Could not find symbol '&n'‚ê§  in block <unit> at /tmp/w4otO5uk8U line 1‚ê§‚ê§[Exited 1]

[09:11] <ZzZombo> perlbot: eval: role R[Str:D $_n]{OUR::<$n> = $_n};role R2[Str:D $n]{also does R['asd']};class A does R2['asd'] {};say $A::n

[09:11] <perlbot> ZzZombo: (Any)‚ê§

[09:11] <ZzZombo> Damn it.

[09:12] <ZzZombo> m: Int.^name.say

[09:12] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´Int‚ê§¬ª

[09:18] <ZzZombo> m: Int.^shortname.say

[09:18] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´Int‚ê§¬ª

[09:19] <ZzZombo> m: Int.^setname('asd');Int.^name.say

[09:19] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) No such method 'setname' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'set_name'?‚ê§  in block <unit> at /tmp/H5e2jFFLwZ line 1‚ê§‚ê§¬ª

[09:19] <ZzZombo> m: Int.^set_name('asd');Int.^name.say

[09:19] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´asd‚ê§¬ª

[09:20] <ZzZombo> m: Int.^set_name('asd 123 !!!');Int.^name.say

[09:20] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´asd 123 !!!‚ê§¬ª

[09:20] <ZzZombo> m: Int.^set_name('asd 123 !!!');dd Int

[09:20] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´asd 123 !!!‚ê§¬ª

[09:20] <ZzZombo> m: Int.^set_name('asd 123 !!!');dd Int, 1

[09:20] <evalable6> ZzZombo, rakudo-moar 382d18bda: OUTPUT: ¬´asd 123 !!!‚ê§1‚ê§¬ª

[09:36] *** Doc_Holliwould joined
[09:39] <ZzZombo> perlbot: eval: role R[Str:D $n]{method ^name --> $n};role R2[Str:D $n]{also does R['asd']};class A does R2['asd'] {};say A.^name

[09:39] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/Tdr7YuFta8‚ê§Missing block‚ê§at /tmp/Tdr7YuFta8:1‚ê§------> 3role R[Str:D $n]{method ^name7‚èè5 --> $n};role R2[Str:D $n]{also does R['‚ê§[Exited 1]

[09:39] <ZzZombo> perlbot: eval: role R[Str:D $n]{method ^name {$n}};role R2[Str:D $n]{also does R['asd']};class A does R2['asd'] {};say A.^name

[09:39] <perlbot> ZzZombo: Potential difficulties:‚ê§    Useless declaration of a has-scoped method in role (did you mean 'my method name'?)‚ê§    at /tmp/45HHPhffES:1‚ê§    ------> 3role R[Str:D $n]{method7‚èè5 ^name {$n}};role R2[Str:D $n]{also does‚ê§A‚ê§

[09:41] *** sena_kun joined
[09:43] *** wamba left
[09:49] <ZzZombo> perlbot: eval: role R[Str:D $n]{method name {$n}};class A {};A.HOW does R['asd'];say A

[09:49] <perlbot> ZzZombo: (A)‚ê§

[09:49] <ZzZombo> perlbot: eval: role R[Str:D $n]{method name {$n}};class A {};A.HOW does R['asd'];say A.^name

[09:49] <perlbot> ZzZombo: Too many positionals passed; expected 1 argument but got 2‚ê§  in method name at /tmp/XmtbKB5IMa line 1‚ê§  in block <unit> at /tmp/XmtbKB5IMa line 1‚ê§‚ê§[Exited 1]

[09:49] <ZzZombo> perlbot: eval: role R[Str:D $n]{method name(\SELF) {$n}};class A {};A.HOW does R['asd'];say A.^name

[09:50] <perlbot> ZzZombo: asd‚ê§

[09:51] <ZzZombo> perlbot: eval: role R[Str:D $n]{method name(\SELF) {$n}};class A {};A.HOW does R['asd'];class B is A {};B.HOW does R['foo'];say B.^name

[09:51] <perlbot> ZzZombo: foo‚ê§

[09:52] <ZzZombo> So how can I condense class declaration and `<class>.HOW does <role>` into one thing? Or otherwise achieve the same result in a neat way?

[09:53] *** wamba joined
[09:57] <ZzZombo> perlbot: eval: role R[Str:D $n]{COMPOSE { $?PACKAGE.HOW does role :: {method name(\SELF) {$n}}};class A does R['asd'];say A.^name

[09:57] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/THvhXL5i4d‚ê§Cannot declare our-scoped class inside of a role‚ê§(the scope inside of a role is generic, so there is no unambiguous‚ê§package to install the symbol in)‚ê§at /tmp/THvhXL5i4d:1‚ê§------> 3name(\SELF) {$n}}};class A does R['asd']7‚èè5;say A.^name‚ê§[Exited 1]

[10:02] <ZzZombo> perlbot: eval: sub trait_mod<is>(Any:U $cls, Str:D :$anno){ $cls.HOW does role :: {method name(\SELF) {$n}}};class A is anno('asd');say A.^name

[10:02] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/DjjphmYACs‚ê§Missing block‚ê§at /tmp/DjjphmYACs:1‚ê§------> 3sub trait_mod7‚èè5<is>(Any:U $cls, Str:D :$anno){ $cls.HOW‚ê§    expecting any of:‚ê§        new name to be defined‚ê§[Exited 1]

[10:02] *** wamba left
[10:05] <ZzZombo> perlbot: eval: multi trait_mod<is>(Mu:U $cls, Str:D :$anno) { $cls.HOW does role :: {method name(\SELF) {$n}}};class A is anno('asd');say A.^name

[10:05] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/GGez3YT97F‚ê§Missing block‚ê§at /tmp/GGez3YT97F:1‚ê§------> 3multi trait_mod7‚èè5<is>(Mu:U $cls, Str:D :$anno) { $cls.HOW‚ê§    expecting any of:‚ê§        new name to be defined‚ê§[Exited 1]

[10:05] *** wamba joined
[10:08] *** wamba left
[10:09] <ZzZombo> perlbot: eval: multi trait_mod<is>(Mu:U $cls, :$anno) { $cls.HOW does role :: {method name(\SELF) {$anno}}};class A is anno('asd');say A.^name

[10:09] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/QkSkVSDfqv‚ê§Missing block‚ê§at /tmp/QkSkVSDfqv:1‚ê§------> 3multi trait_mod7‚èè5<is>(Mu:U $cls, :$anno) { $cls.HOW does ‚ê§    expecting any of:‚ê§        new name to be defined‚ê§[Exited 1]

[10:10] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does role :: {method name(\SELF) {$anno}}};class A is anno('asd');say A.^name

[10:10] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/3PCTQ26CWB‚ê§Too late for unit-scoped class definition;‚ê§Please use the block form.‚ê§at /tmp/3PCTQ26CWB:1‚ê§------> 3\SELF) {$anno}}};class A is anno('asd');7‚èè5say A.^name‚ê§[Exited 1]

[10:11] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does role :: {method name(\SELF) {$anno}}};class A is anno('asd') {};say A.^name

[10:11] <perlbot> ZzZombo: No exception handler located for catch‚ê§   at SETTING::src/core/Exception.pm6:427  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:print_exception)‚ê§ from SETTING::src/core/Exception.pm6:484  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:<anon>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1854  (/langs/perl6/share/nqp/lib/NQPHLL.moarvm:command_eva... [Output truncated. http://perl.bot/p/wp7xmx ]

[10:11] <ZzZombo> SHIIT

[10:16] *** AlexDaniel` left
[10:16] *** uzl[m] left
[10:16] *** Nasrudin left
[10:16] *** BlackChaosNL[m] left
[10:16] *** Demos[m] left
[10:16] *** MitarashiDango[m left
[10:16] *** tyil[m] left
[10:16] *** unclechu left
[10:16] *** rba[m] left
[10:16] *** CIAvash left
[10:16] *** matiaslina left
[10:25] *** Guest38485 joined
[10:46] *** rba[m] joined
[10:48] *** abraxxa left
[10:49] *** abraxxa joined
[10:52] *** sena_kun left
[11:06] *** Doc_Holliwould left
[11:09] *** sena_kun joined
[11:23] *** Demos[m] joined
[11:23] *** BlackChaosNL[m] joined
[11:23] *** AlexDaniel` joined
[11:23] *** tyil[m] joined
[11:23] *** MitarashiDango[m joined
[11:23] *** unclechu joined
[11:23] *** Nasrudin joined
[11:23] *** uzl[m] joined
[11:23] *** CIAvash joined
[11:23] *** matiaslina joined
[11:46] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does role :: {method name(\SELF) {$anno}}};class A is anno('asd') {};say A.^name

[11:46] <perlbot> ZzZombo: No exception handler located for catch‚ê§   at SETTING::src/core/Exception.pm6:427  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:print_exception)‚ê§ from SETTING::src/core/Exception.pm6:484  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:<anon>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1854  (/langs/perl6/share/nqp/lib/NQPHLL.moarvm:command_eva... [Output truncated. http://perl.bot/p/3v2x72 ]

[11:46] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does role :: {method name(\SELF) {$anno}}};class A is anno('asd') {};

[11:46] <perlbot> ZzZombo: No exception handler located for catch‚ê§   at SETTING::src/core/Exception.pm6:427  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:print_exception)‚ê§ from SETTING::src/core/Exception.pm6:484  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:<anon>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1854  (/langs/perl6/share/nqp/lib/NQPHLL.moarvm:command_eva... [Output truncated. http://perl.bot/p/p4op2e ]

[11:46] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does role :: {method name(\SELF) {$anno}}};

[11:46] <perlbot> ZzZombo: No output.

[11:47] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does my role R {method name(\SELF) {$anno}}};class A is anno('asd') {};

[11:47] <perlbot> ZzZombo: No exception handler located for catch‚ê§   at SETTING::src/core/Exception.pm6:427  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:print_exception)‚ê§ from SETTING::src/core/Exception.pm6:484  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:<anon>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1854  (/langs/perl6/share/nqp/lib/NQPHLL.moarvm:command_eva... [Output truncated. http://perl.bot/p/hp5on1 ]

[11:47] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does my role R {method name(\SELF) {$anno}}};class A is anno {};

[11:47] <perlbot> ZzZombo: No exception handler located for catch‚ê§   at SETTING::src/core/Exception.pm6:427  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:print_exception)‚ê§ from SETTING::src/core/Exception.pm6:484  (/langs/perl6/share/perl6/runtime/CORE.setting.moarvm:<anon>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1854  (/langs/perl6/share/nqp/lib/NQPHLL.moarvm:command_eva... [Output truncated. http://perl.bot/p/wjs7jj ]

[11:47] <ZzZombo> perlbot: eval: multi trait_mod:<is>(Mu:U $cls, :$anno!) { $cls.HOW does my role R {method name(\SELF) {$anno}}};class A is foo {};

[11:47] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/DpWSc0ji5L‚ê§'A' cannot inherit from 'foo' because it is unknown.‚ê§at /tmp/DpWSc0ji5L:1‚ê§[Exited 1]

[11:49] <ZzZombo> perlbot: eval: role R[Str:D $n]{COMPOSE { $?PACKAGE.HOW does role :: {method name(\SELF) {$n}}};class A does R['asd'];say A.^name

[11:49] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/abeGosks2_‚ê§Cannot declare our-scoped class inside of a role‚ê§(the scope inside of a role is generic, so there is no unambiguous‚ê§package to install the symbol in)‚ê§at /tmp/abeGosks2_:1‚ê§------> 3name(\SELF) {$n}}};class A does R['asd']7‚èè5;say A.^name‚ê§[Exited 1]

[11:55] *** wamba joined
[11:55] <ZzZombo> perlbot: eval: role R[Str:D $n]{COMPOSE { $?PACKAGE.HOW does role :: {method name(\SELF) {$n}}};class A does R['asd'] {};say A.^name

[11:55] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/Xn9Sg7AeHY‚ê§Cannot declare our-scoped class inside of a role‚ê§(the scope inside of a role is generic, so there is no unambiguous‚ê§package to install the symbol in)‚ê§at /tmp/Xn9Sg7AeHY:1‚ê§------> 3name(\SELF) {$n}}};class A does R['asd']7‚èè5 {};say A.^name‚ê§[Exited 1]

[11:56] <ZzZombo> perlbot: eval: role R[Str:D $n]{COMPOSE { $?PACKAGE.HOW does role :: {method name(\SELF) {$n}}}};class A does R['asd'] {};say A.^name

[11:56] <perlbot> ZzZombo: A‚ê§

[11:56] <ZzZombo> perlbot: eval: role R[Str:D $n]{COMPOSE { $?PACKAGE.HOW does role :: {method name(\SELF) {$n}}}};class A does R['asd'] {};say A.^name, R.^name

[11:56] <perlbot> ZzZombo: AR‚ê§

[11:59] *** leah2 left
[12:03] *** leah2 joined
[12:14] <ZzZombo> perlbot: eval: role R[Str:D $n]{COMPOSE { say $?PACKAGE;$?PACKAGE.HOW does role :: {method name(\SELF) {$n}}}};class A does R['asd'] {};say A.^name, R.^name

[12:14] <perlbot> ZzZombo: AR‚ê§

[12:32] *** wamba left
[12:36] <SmokeMachine> is COMPOSE working?!

[12:41] *** ab6tract joined
[12:41] <ab6tract> good *, #raku!

[12:41] <tellable6> 2019-11-19T03:35:00Z #raku <japhb> ab6tract Oh, you know, the usual -- super busy and not enough time for fun hacking.  :-P

[12:42] *** xinming left
[12:42] <ab6tract> I'd like some pointers on fixing an LTA error message, if possible

[12:42] <ab6tract> m: class F { has $.f is required where *.IO.e }; F.new: f => "/tmp/f"

[12:42] <evalable6> ab6tract, rakudo-moar 382d18bda: OUTPUT: ¬´(exit code 1) Type check failed in assignment to $!f; expected <anon> but got Str ("/tmp/f")‚ê§  in block <unit> at /tmp/3O9LpC2gNT line 1‚ê§‚ê§¬ª

[12:43] <ab6tract> it would be awesome to make the above spit out an IO related error there

[12:43] *** xinming joined
[12:44] <ab6tract> just not sure where to even start looking

[12:47] <ab6tract> or if it's even possible :)

[12:48] <ab6tract> SmokeMachine: is COMPOSE *not* working? :O

[12:49] <SmokeMachine> ab6tract: The last time I saw, it was NIY...

[12:50] <SmokeMachine> (but that was long time ago...)

[12:50] <ab6tract> ahhh... it's been working since it was implemented, which is why i got shocked :)

[12:50] <ab6tract> i didn't know it was actually part of the spec, though it makes sense.. it was a very natural addition to the object creation story

[12:53] *** sena_kun left
[12:54] *** wamba joined
[12:54] <ab6tract> i thought lizmat just got tired of running everything through new/BUILD ;)

[13:08] *** sena_kun joined
[13:09] *** pmurias joined
[13:12] <tbrowder> hi, all

[13:12] <tellable6> 2019-12-09T08:25:42Z #raku-dev <jmerelo> tbrowder my pleasure. Thanks for the chance to do so.

[13:13] <tbrowder> in my progs i typically open files for writing with :w,m

[13:13] <tbrowder> *:w

[13:14] <tbrowder> then i test for an existing file and abort unless the user enter a --force option.

[13:16] <veesh> the mailing list is getting frustrating

[13:16] <veesh> just had to vent a little bit

[13:18] <tbrowder> i think i could do this, but haven't yet tried it: "open $f, :create, :exclusive($force)" where the value of $force can be 1 or 0

[13:20] <tbrowder> on the other hand, the docs are careful to point out the hazards of using other combinations than those showm.

[13:20] <tbrowder> *shown

[13:21] <tbrowder> so, does anyone have a clever idiom to do that, or shall i create a sub to handle it?

[13:22] <tbrowder> s/shall/must/

[13:23] <ab6tract> hmmmm.... sounds like a good opportunity to enumerate the docs with what combinations work now relative to then

[13:24] <ab6tract> if you have a safe space to test it, could be interesting to note if the the effect was as expected and consistently so

[13:25] <tbrowder> i'll experiment, but i was hoping someone had a good solution. btw, i just searched the modules for general error handling but only found one. it looks good, but it's for more complex use cases than i need.

[13:25] <ab6tract> but for safety purposes a sub seems like an easy and quick way through

[13:26] <ab6tract> tbrowder: would it be enough to check whether the directory where the file will be written to is writeable?

[13:27] <ab6tract> or are you also trying to protect against fs size errors or something like that?

[13:28] <jnthn> ab6tract: Declare a named subset type like ExistingFile and then do `has ExistingFile $.f is required` and then the error should mention that subset type name.

[13:30] <ab6tract> jnthn: of course! 

[13:30] <tbrowder> ab6tract: no, it's to keep a user from accidentally overwriting an existing file.

[13:31] <ab6tract> tbrowder: ah! then i would use exactly the idiom that jnthn just mentioned of a subset

[13:31] <tbrowder> warn him and remind him of the force option if he needs it

[13:33] <ab6tract> ah

[13:34] <tbrowder> i saw that, but is that any better than a sub whose msg can be tailored a bit?

[13:35] <ab6tract> Is the force option part of an interactive prompt or is it a run time flag?

[13:35] <tbrowder> i usually have it as a run time flag

[13:36] <tbrowder> but the ease of prompting in raku probably makes that a better choice, although not so good with scripting..l

[13:36] <ab6tract> then i would probably just use a conditional, using the constrained subset where force was not specified and otherwise clobbering. then use a CATCH to throw a custom error when the constraint isn't met

[13:39] <ab6tract> `if ($force) { my NonExistingFile $file-path = $user-input; open $file-path, :w; } else { open $user-choice, :w }; CATCH { die "File exists but --force was not specified" }`

[13:39] <tbrowder> that's essentially what i do now, but thanks.

[13:39] <ab6tract> gotcha :)

[13:39] <ab6tract> sorry i couldn't provide a better golf 

[13:40] <ab6tract> s/golf/idiom/

[13:40] <tbrowder> ok,

[13:41] <ab6tract> but you are right that subs can make it read nicer. i bet you could use multis

[13:42] <ab6tract> that usually cleans up your call site pretty nicely

[13:43] <tbrowder> where would you use the multis?

[13:46] <tbrowder> um, i meant how would you use the multis but i think i see what you mean...thx!

[13:46] <ab6tract> tbrowder: no worries! i'm baking an example right now :D

[13:47] <ZzZombo> SmokeMachine: I kinda got how to declare, but how to use a custom metaclass?

[13:49] *** lucasb joined
[13:52] <ab6tract> tbrowder: honestly, the dispatching isn't working the way i want it to on this. let me keep poking away but i don't want to send you down a rabbit hole

[13:56] <ab6tract> the idea would be to make a set of multi candidates that would take $path and $force and then use those to define the subset. not making it magically appear in my repl though.

[13:56] <ab6tract> tbrowder: if the idea is call-site cleanliness, you could also consider abstracting the check into a barebones class

[14:00] *** wamba left
[14:01] <tbrowder> some good ideas, maybe you could put it all in a module along with other error-handling code :-D

[14:03] <tbrowder> i would be glad to 'zef install Super::Error::Handler', by ab6tract!

[14:04] *** wamba joined
[14:09] <ab6tract> tbrowder: that would be cool ;)  .. but i'm happy even just to be dipping my toes back into the irc chat. it's been a bumpy couple of years for me!

[14:10] <ab6tract> anyway, in terms of an idiomatic raku approach, i imagine something like this: https://gist.github.com/ab5tract/e71a6d43cdc63f061a07492c9f8a31c4

[14:11] <ab6tract> run-time flags are awesome with run time subsets :D

[14:13] <ab6tract> . o O ( the best thing about raku idioms is.. where there may be one, there may be many )

[14:25] *** Doc_Holliwould joined
[14:35] *** veesh left
[14:42] <ab6tract> tbrowder: sorry, you may have already noticed, the previous gist was broken. it's been updated. probably still looks something like a conditional and a catch at the callsite though '=D 

[14:43] <ab6tract> actually, it should mean that only the catch is necessary..

[14:46] *** xinming left
[14:47] *** xinming joined
[14:52] *** sena_kun left
[14:55] <tbrowder> ab6tract: maybe we could convince the raku admins to add an appropriate community module repo, with an agreed-upon name, of course!

[14:55] <ab6tract> well, to me this is one of those grey areas where it is so easy to wire up that i get lazy and never modularize it ;)

[14:56] <ab6tract> "damn you Perl!!!""

[14:56] *** hungrydonkey joined
[14:57] <ab6tract> but it did occur to me already while working on this that `Guards` or `Checks` might be a good namespace for this kind of thing. namespacing is still more or less a free for all, as our community tends to prefer

[14:59] <ab6tract> ugh, minus the pluralization.. `Guard::File` or `Check::File` ... then that leads me back to my "why modularize?" when i start struggling with the transcendental fact that _no name_ could ever _truly_ describe the functionality.

[15:00] <ab6tract> but i'm pretty sure that's a personal issue ;)

[15:01] *** hungrydonkey left
[15:07] <vrurg> ab6tract: to the choice is simple. 'Check' if it only reports back. 'Guard' if it also takes an action.

[15:07] <vrurg> *to me

[15:08] <ab6tract> vrurg: nice, i like it!

[15:08] *** hungrydonkey joined
[15:08] <ab6tract> and `Guard` can then be easily built on and considered downstream of `Check`

[15:08] *** sena_kun joined
[15:09] <vrurg> ab6tract: If those are classes ‚Äì inherit, perhaps.

[15:09] <pmurias> vrurg: if I need to add stuff to nqp-configure for the truffle branch what a sane way to do it?

[15:09] <vrurg> pmurias: like what?

[15:10] <vrurg> me sprinkles ashes on his head. Forgot about the dependency issue. :(

[15:11] <[Coke]> .

[15:11] <pmurias> vrurg: https://github.com/perl6/nqp-configure/blob/master/lib/NQP/Config.pm#L433

[15:11] <pmurias> vrurg: I want to add truffle jars in the truffle branch

[15:11] <pmurias> might make sense to get that list of jars out of NQP::Configure

[15:12] <ab6tract> vrurg: `Check` modules in this system would probably be best implemented with primary consideration given to convenience of export/composability, so maybe exported subsets based on roles in a `Rule` namespace that are easy to pull in dynamically based on the importers needs

[15:12] <tbrowder> for the file module i vote fo

[15:12] <pmurias> vrurg: would make sense

[15:12] <tbrowder> arrrgh, ff

[15:13] <vrurg> pmurias: moving to -dev

[15:13] <tbrowder> for my uses cases i like the 'Check::*' name for file checking

[15:13] <pmurias> [Coke]: on the reddit post I got two pieces of feedback https://www.reddit.com/r/rakulang/comments/e50qqq/asking_for_rakudojs_grant_feedback/

[15:16] <ab6tract> tbrowder++ ok that settles it

[15:17] <ab6tract> i'll have a `Check::File` "out by Christmas"

[15:17] <ab6tract> ;)

[15:19] <tbrowder> well, thanks, Santa! i also would like some kind of "Error::Handler" module to give me more ad hoc actions than more formal error handling, but i admit i'm not real used to using 'try' yet.

[15:20] <ab6tract> tbrowder: "do not use 'try', for you have the force... of the phaser CATCH!"

[15:23] <tbrowder> yes, i know, but i need to study its use in my world a bit more. so far i've just used something like this and all worked as i neede:

[15:24] *** hungrydonkey left
[15:26] *** wamba left
[15:31] <tbrowder> "try { do-something: foolish } if $! { if $! ~~ /  'some text' \h* (\S+) / { do-more-with: ~$0 } else { die "Unexpected error: {$!}" }}"

[15:37] <[Coke]> pmurias++

[15:41] *** zeylos left
[15:41] *** zeylos joined
[15:45] *** chloekek joined
[15:48] *** wamba joined
[15:50] *** wamba left
[16:02] *** wamba joined
[16:03] *** pmurias left
[16:09] <Geth> ¬¶ problem-solving: coke assigned to AlexDaniel Issue perl6-users mailing list https://github.com/perl6/problem-solving/issues/139

[16:09] *** wamba left
[16:10] *** wamba joined
[16:28] *** scimon joined
[16:46] *** cognominal joined
[16:47] *** Doc_Holliwould left
[16:47] *** chloekek left
[16:50] *** wamba left
[16:50] *** wamba1 joined
[16:50] *** cognomin_ left
[16:52] *** sena_kun left
[16:55] *** Doc_Holliwould joined
[17:07] *** sena_kun joined
[17:08] *** jmerelo joined
[17:12] *** wamba1 left
[17:14] *** rindolf left
[17:20] *** rindolf joined
[17:22] *** scimon left
[17:46] <tony-o> .tell tbrowder have you texted with Jan on whatsapp or just regular text?  my phone is giving me issues with texting him

[17:46] <tellable6> tony-o, I'll pass your message to tbrowder

[17:48] *** clarjon1 left
[17:51] *** cognomin_ joined
[17:54] *** cognominal left
[17:56] <tbrowder> tony-o: I've only conversed with him via e-mail.

[17:56] <tellable6> 2019-12-09T17:46:09Z #raku <tony-o> tbrowder have you texted with Jan on whatsapp or just regular text?  my phone is giving me issues with texting him

[18:05] *** chloekek joined
[18:06] <tony-o> ah, i'll do that then, thanks tbrowder 

[18:06] <tony-o> ghc -h

[18:06] <tony-o> oops

[18:26] *** stoned75 joined
[18:27] *** wamba joined
[18:38] <tony-o> tbrowder: https://travis-ci.org/rakudo/rakudo/jobs/622786489#L1069 <- check it out

[18:39] *** hkdtam left
[18:42] <cpan-raku> New module released to CPAN! Gnome::Gdk3 (0.15.0) by 03MARTIMM

[18:42] <cpan-raku> New module released to CPAN! Gnome::N (0.15.0) by 03MARTIMM

[18:43] *** ZzZombo left
[18:43] *** ab6tract left
[18:43] *** ZzZombo joined
[18:43] *** wildtrees joined
[18:54] *** sena_kun left
[19:03] <tbrowder> tony-o: is it doing what you expect now?

[19:04] <tbrowder> did you make contact with jan?

[19:04] *** veesh joined
[19:08] *** sena_kun joined
[19:15] *** Manifest0 joined
[19:20] *** patrickb joined
[19:43] *** stoned75 left
[19:47] *** rindolf left
[19:50] *** stoned75 joined
[19:52] *** wamba left
[19:53] *** wamba joined
[19:56] *** jmerelo left
[20:10] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2019/12/09/2019-49-almost-starring/

[20:22] <guifa> lizmat: hooray!

[20:22] <tellable6> 2019-12-05T15:56:12Z #raku <jmerelo> guifa please send me in some effective way your email address or ID in wordpress.com for the Advent calendar article.

[20:22] <sena_kun> releasable6: status

[20:22] <releasable6> sena_kun, Next release in ‚âà11 days and ‚âà22 hours. There are no known blockers. 0 out of 102 commits logged

[20:22] <releasable6> sena_kun, Details: https://gist.github.com/e184ebeac1632a6887f87d6fffe6c396

[20:45] <cpan-raku> New module released to CPAN! Gnome::N (0.15.1) by 03MARTIMM

[20:53] *** sena_kun left
[21:08] *** sena_kun joined
[21:24] *** MasterDuke left
[21:49] *** pmurias joined
[21:57] *** Xliff joined
[22:03] *** pmurias left
[22:03] *** pmurias joined
[22:27] *** chloekek left
[22:49] *** wamba left
[22:52] *** sena_kun left
[23:41] *** Voldenet left
[23:47] *** Voldenet joined
[23:47] *** Voldenet left
[23:47] *** Voldenet joined
[23:58] *** rjt_pl joined
