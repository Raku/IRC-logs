[00:00] <Xliff> Ah.

[00:32] <Xliff> m: sub b(:$a) { $a.gist.say }; b(a => 'a', a => 'b');

[00:32] <camelia> rakudo-moar ed8f5141f: OUTPUT: «b␤»

[00:32] <Xliff> m: sub b(:@a) { $a.gist.say }; b(a => 'a', a => 'b');

[00:32] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '@a'?␤at <tmp>:1␤------> 3sub b(:@a) { 7⏏5$a.gist.say }; b(a => 'a', a => 'b');␤»

[00:32] <Xliff> m: sub b(:$a) { $a.gist.say }; b(a => 'a', a => 'b');

[00:32] <camelia> rakudo-moar ed8f5141f: OUTPUT: «b␤»

[00:46] *** pmurias left
[00:47] <jnthn> "latest named arg wins" is specified behavior, if you're curious :)

[00:48] <jnthn> Mostly useful in cases like foo(a => 'default', b => 'default', |%overrides)

[00:51] <Xliff> jnthn: Does next work with while?

[00:51] <Xliff> jnthn++: Ah! Good to know.

[00:52] <Xliff> Nevermind. 

[00:59] *** wildtrees left
[01:06] <Xliff> $_ = rx/abc/; my $a = 'abcabc'; say $a ~~ $_

[01:06] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «｢abc｣␤»

[01:20] <Xliff> m: my $a = '^ LastBuildResults'; say "LastBuildResults" ~~ /<{ $a }>/

[01:20] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢LastBuildResults｣␤»

[01:20] <Xliff> m: my $a = '^ LastBuildResults'; say "LastBuildResults.0" ~~ /<{ $a }>/

[01:20] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢LastBuildResults｣␤»

[01:27] <Xliff> m: my $a = '^ LastBuildResults'; say "LastBuildResults.0" ~~ rx/<{ $a }>/

[01:27] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢LastBuildResults｣␤»

[01:27] <Xliff> m: my $a = '^ LastBuildResults'; say "LastBuildResults.0" ~~ rx/    <{ $a }>     /

[01:27] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢LastBuildResults｣␤»

[01:29] <Xliff> m: $_ = rx/    <{ $a }>     /; my $a = '^ LastBuildResults'; say "LastBuildResults.0" ~~ $_

[01:29] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3$_ = rx/    <{ 7⏏5$a }>     /; my $a = '^ LastBuildResults␤»

[01:29] <Xliff> m: my $a = '^ LastBuildResults'; $_ = rx/    <{ $a }>     /; say "LastBuildResults.0" ~~ $_

[01:29] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢LastBuildResults｣␤»

[01:35] <Xliff> "/".tr( '/' => '\/' ).say

[01:35] <Xliff> m: "/".tr( '/' => '\/' ).say

[01:35] <camelia> rakudo-moar ed8f5141f: OUTPUT: «No such method 'tr' for invocant of type 'Str'. Did you mean any of these?␤    Str␤    tc␤␤  in block <unit> at <tmp> line 1␤␤»

[01:36] <Xliff> m: my $a = "/"; $a ~~ tr/ '/' / '\/'; $a.say

[01:36] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $a = "/"; $a ~~ tr/ '/' /7⏏5 '\/'; $a.say␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement …»

[01:36] <Xliff> m: my $a = "/"; $a ~~ tr/ '/' / '\/'/; $a.say

[01:36] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $a = "/"; $a ~~ tr/ '/' /7⏏5 '\/'/; $a.say␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement…»

[01:37] <Xliff> m: "/".trans( '/' => '\/' ).say

[01:37] <camelia> rakudo-moar ed8f5141f: OUTPUT: «\␤»

[01:37] <Xliff> m: "/".trans( '/' => '\\\/' ).say

[01:37] <camelia> rakudo-moar ed8f5141f: OUTPUT: «\␤»

[01:37] <Xliff> m: "/".trans( '/' => '\\/' ).say

[01:37] <camelia> rakudo-moar ed8f5141f: OUTPUT: «\␤»

[01:37] <Xliff> m: "/".trans( ['/'] => ['\\/'] ).say

[01:37] <camelia> rakudo-moar ed8f5141f: OUTPUT: «\/␤»

[03:04] *** Manifest0 left
[03:05] *** Manifest0 joined
[04:05] *** committable6 left
[04:05] *** notable6 left
[04:05] *** shareable6 left
[04:05] *** reportable6 left
[04:05] *** coverable6 left
[04:05] *** squashable6 left
[04:05] *** unicodable6 left
[04:05] *** benchable6 left
[04:05] *** releasable6 left
[04:05] *** statisfiable6 left
[04:05] *** quotable6 left
[04:05] *** nativecallable6 left
[04:05] *** bloatable6 left
[04:06] *** benchable6 joined
[04:06] *** bloatable6 joined
[04:06] *** statisfiable6 joined
[04:06] *** unicodable6 joined
[04:07] <Xliff> m: my $a = 'A-b.json'; my $rx = rx/ <{ $a }> /;

[04:07] <camelia> rakudo-moar ed8f5141f: ( no output )

[04:07] <Xliff> m: my $a = 'A-b.json'; my $rx = rx/ <{ $a }> /; say $a ~~ $rx

[04:07] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at /home/camelia/EVAL_0:1␤------> 3anon regex {  A7⏏5-b.json}␤Malformed regex␤at /home/camelia/EVAL_0:1␤------> 3anon regex {  A-7⏏5b.json…»

[04:07] <Xliff> m: my $a = '<[ A-b ]>.json'; my $rx = rx/ <{ $a }> /; say $a ~~ $rx

[04:07] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Unsupported use of - as character range; in Perl 6 please use .. for range, for explicit - in character class, escape it or place it as the first or last thing␤at /home/camelia/EVAL_0:1…»

[04:07] *** quotable6 joined
[04:07] <Xliff> m: my $a = '<[ A..b ]>.json'; my $rx = rx/ <{ $a }> /; say $a ~~ $rx

[04:07] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Nil␤»

[04:08] *** nativecallable6 joined
[04:08] <Xliff> m: my $a = '<[ A..b ]>.json'; my $rx = rx/ <{ $a }> /; say "A.json" ~~ $rx

[04:08] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢A.json｣␤»

[04:08] *** coverable6 joined
[04:08] *** greppable6 joined
[04:08] *** releasable6 joined
[04:08] *** notable6 joined
[04:08] *** committable6 joined
[04:08] *** shareable6 joined
[04:08] *** squashable6 joined
[04:09] *** reportable6 joined
[04:09] <Xliff> m: my $a = "<[ A..b ]>\.json'; my $rx = rx/ <{ $a }> /; say "A.json" ~~ $rx

[04:09] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$rx' is not declared␤at <tmp>:1␤------> 3my $a = "<[ A..b ]>\.json'; my 7⏏5$rx = rx/ <{ $a }> /; say "A.json" ~~ $r␤»

[04:09] <Xliff> m: my $a = "<[ A..b ]>\n.json"; my $rx = rx/ <{ $a }> /; say "A.json" ~~ $rx

[04:09] <camelia> rakudo-moar ed8f5141f: OUTPUT: «｢A.json｣␤»

[04:49] <Xliff> .seen MadcapJake

[04:49] <tellable6> Xliff, I saw MadcapJake 2016-12-02T06:23:08Z in #perl6: <MadcapJake> well I'm gonna fiddle with this laptop some more and then hit the hay. Glad to be back! See you this weekend!

[04:49] <Xliff> :(

[04:49] <Xliff> Hope he's ok...

[05:04] <guifa> Xliff: my google fu (—> Linked In) says he’s currently doing okay.  But started a new job right around then

[05:22] <Xliff> guifa++ # Thanks!

[05:25] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); @a.flat.say

[05:25] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «((1 2) (3 4) (5 6))␤»

[05:26] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); |(@a.flat).say

[05:26] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «((1 2) (3 4) (5 6))␤»

[05:26] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); @a[0].flat.say

[05:26] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «(1 2)␤»

[05:27] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); @a[0].say

[05:27] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «(1 2)␤»

[05:28] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); @a[2..3].flat.say

[05:28] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «((5 6) (Any))␤»

[05:28] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); @a[1..2].flat.say

[05:29] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «((3 4) (5 6))␤»

[05:29] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); |@a[1..2].flat.say

[05:29] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «((3 4) (5 6))␤»

[05:29] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); |@a[1..2].map( *.flat).flat.say

[05:29] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «(3 4 5 6)␤»

[05:30] <Xliff> m: ((("a", "b"), "c"), "d").flat

[05:30] <camelia> rakudo-moar ed8f5141f: ( no output )

[05:30] <Xliff> m: ((("a", "b"), "c"), "d").flat.say

[05:30] <camelia> rakudo-moar ed8f5141f: OUTPUT: «(a b c d)␤»

[05:30] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); @a.flat.say

[05:30] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «((1 2) (3 4) (5 6))␤»

[05:30] <Xliff> m: my @a = (((1, 2), 3), (3, 4), (5, 6)); @a.flat.say

[05:30] <camelia> rakudo-moar ed8f5141f: OUTPUT: «(((1 2) 3) (3 4) (5 6))␤»

[05:31] <Xliff> I thought flattening was recursive.

[05:31] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); |@a[1..2].map( *.flat).flat.say

[05:31] <evalable6> Xliff, rakudo-moar ed8f5141f: OUTPUT: «(3 4 5 6)␤»

[05:31] <Xliff> m: say flat ((1, 2), (3, 4), (5, 6)); 

[05:31] <camelia> rakudo-moar ed8f5141f: OUTPUT: «(1 2 3 4 5 6)␤»

[05:31] <Xliff> my @a = ((1, 2), (3, 4), (5, 6)); flat @a

[05:31] <Xliff> m: my @a = ((1, 2), (3, 4), (5, 6)); flat @a

[05:31] <camelia> rakudo-moar ed8f5141f: ( no output )

[05:31] <Xliff> m: my @a = ((1, 2), (3, 4), (5, 6)); say flat @a

[05:31] <camelia> rakudo-moar ed8f5141f: OUTPUT: «((1 2) (3 4) (5 6))␤»

[05:32] <Xliff> m: my @a = ((1, 2), (3, 4), (5, 6)); say (flat @a)

[05:32] <camelia> rakudo-moar ed8f5141f: OUTPUT: «((1 2) (3 4) (5 6))␤»

[05:32] <Xliff> m: my @a = (((1, 2), 3), (3, 4), (5, 6)); @a.List.flat.say

[05:32] <camelia> rakudo-moar ed8f5141f: OUTPUT: «(1 2 3 3 4 5 6)␤»

[05:36] *** maettu joined
[06:01] *** rindolf joined
[06:10] *** stoned75 joined
[06:19] *** rindolf left
[06:34] *** rindolf joined
[07:02] *** tejr left
[07:02] *** tejr joined
[07:27] *** stoned75 left
[07:43] *** gbmor joined
[08:00] *** abraxxa left
[08:01] *** abraxxa joined
[08:40] *** abraxxa left
[08:41] *** abraxxa joined
[08:45] *** abraxxa left
[08:45] *** abraxxa joined
[09:07] *** sena_kun joined
[09:14] *** scimon joined
[09:14] <scimon> Morning

[09:19] <lizmat> scimon o/

[09:20] <scimon> Right. Tweaked my draft for the Advent. Now to polish my slides for tonights talk at the BCS. Full house... kinda scary.

[09:25] <lizmat> scimon++  :-)

[09:26] <sena_kun> scimon, good luck!

[09:27] <scimon> Thanks

[09:48] *** bisectable6 joined
[10:02] *** Altai-man_ joined
[10:05] *** sena_kun left
[10:12] *** eythian joined
[10:22] <scimon> Possible target for a squashathon. The Faq. https://docs.raku.org/language/faq 

[10:23] <AlexDaniel> weekly: joke of the day: “What's the difference between Raku, Rakudo and Raku?” ( https://docs.raku.org/language/faq  )

[10:23] <notable6> AlexDaniel, Noted! (weekly)

[10:30] <scimon> Yeah... that one made me giggle. 

[10:35] <AlexDaniel> weekly: and more “Why is Raku called Perl?”

[10:35] <notable6> AlexDaniel, Noted! (weekly)

[10:36] <AlexDaniel> weekly: Answer: “it was Larry's choice under Rule 1”

[10:36] <notable6> AlexDaniel, Noted! (weekly)

[10:40] <AlexDaniel> weekly: For a weeklie after this one, Raku FAQ squashathon: https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:40] <notable6> AlexDaniel, Noted! (weekly)

[10:40] <AlexDaniel> scimon: :)

[10:45] <rba> :-)

[10:55] <discord6> <huyna> if i have some regex like: my regex dump { [abc|def|ghi] },  i use this usually but in some cases i want to use the dump regex to match string without 'def', if we have a way to do this?

[10:57] *** huyna joined
[10:57] <huyna> if i have some regex like: my regex dump { [abc|def|ghi] },  i use this usually but in some cases i want to use the dump regex to match string without 'def', if we have a way to do this?

[10:57] <jnthn> Give it a parameter and assert against that?

[10:58] <jnthn> my regex dump(:$allow-def = True) { abc | <?{ $allow-def }> def | ghi }

[10:58] <jnthn> Or some such

[10:59] <huyna> wow so regex can also receive parameters

[10:59] <jnthn> Yes, it's just like a method, except with a regex body rather than a main language body :)

[11:00] <huyna> this will make my regex more flexible, thank you jnthn

[11:21] *** demanuel joined
[11:24] *** huyna left
[11:59] *** joule joined
[12:03] *** sena_kun joined
[12:04] *** Altai-man_ left
[12:18] *** finanalyst joined
[12:20] <Geth> ¦ problem-solving: bbkr assigned to JJ Issue "Path to Raku" is missing change of linux module namespaces https://github.com/perl6/problem-solving/issues/130

[12:27] *** lucasb joined
[12:34] <SmokeMachine> scimon: I’ve sent you a msg...

[12:36] *** kensanata joined
[12:50] *** Kaiepi left
[12:50] *** Kaiepi joined
[12:51] *** abraxxa left
[12:51] *** abraxxa joined
[12:55] <tbrowder> scimon++

[12:56] <tbrowder> thanks to scimon, we have a place to put links to gists (or other location) of draft advent articles

[12:56] <tbrowder> enter or make a PR for https://github.com/perl6/advent/blob/master/perl6advent-2019/drafts

[12:57] <tbrowder> unless you're an admin, i don't think you can see draft articles on WP

[13:01] *** abraxxa left
[13:05] <moritz> editor role is enough

[13:13] <tbrowder> thnx

[13:15] *** abraxxa joined
[13:40] *** Doc_Holliwood joined
[13:41] <Doc_Holliwood> m: ².WHAT.say

[13:41] <camelia> rakudo-moar ed8f5141f: OUTPUT: «(Int)␤»

[13:42] <Doc_Holliwood> m: say 2 - ²

[13:42] <camelia> rakudo-moar ed8f5141f: OUTPUT: «0␤»

[13:42] *** abraxxa left
[13:42] <Doc_Holliwood> where is the magic?

[13:43] <Doc_Holliwood> m: 2²

[13:43] <camelia> rakudo-moar ed8f5141f: ( no output )

[13:43] <Doc_Holliwood> m: 2².say

[13:43] <camelia> rakudo-moar ed8f5141f: OUTPUT: «4␤»

[13:43] <jnthn> I don't think there's any magic at all, it's just falling out of the standard parsing rules

[13:44] <AlexDaniel> u: ²⅓

[13:44] <unicodable6> AlexDaniel, U+00B2 SUPERSCRIPT TWO [No] (²)

[13:44] <unicodable6> AlexDaniel, U+2153 VULGAR FRACTION ONE THIRD [No] (⅓)

[13:44] <Doc_Holliwood> somewhere something must be actively distinguishing

[13:44] <AlexDaniel> so any No has a numeric value

[13:45] <jnthn> Well, the parser knows when it's looking for a term and when it's looking for a postfix

[13:45] <AlexDaniel> you can use these unicode characters (that are No) as numeric literals

[13:45] <AlexDaniel> and yeah, what jnthn said :)

[13:45] <jnthn> It can't be looking for a postfix if it didn't yet see a term

[13:45] <AlexDaniel> we had a few tickets about this, people find it very surprising, but the parser doesn't

[13:45] <Doc_Holliwood> so ² is sometimes an int and sometimes its a postfix depending on context?

[13:46] <tobs> by the same rule, it can distinguish between multiplication and whatever star

[13:46] <AlexDaniel> well, similarly, yes

[13:46] <AlexDaniel> m: say (* * *)(2, 8)

[13:46] <camelia> rakudo-moar ed8f5141f: OUTPUT: «16␤»

[13:47] <jnthn> Doc_Holliwood: I guess, though only in the same sense that "+" in +$x is the numify operator, but in $a + $b it's the infix addition operator.

[13:48] <tobs> m: say 2²⁰

[13:48] <camelia> rakudo-moar ed8f5141f: OUTPUT: «1048576␤»

[13:49] <jnthn> In general, the parser is always quite clear about what category of thing it would like to see next.

[13:51] <AlexDaniel> m: 2 2

[13:51] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 0327⏏5 2␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier…»

[13:52] <AlexDaniel> m: * 2

[13:52] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3*7⏏5 2␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier …»

[13:52] <AlexDaniel> m: × 2

[13:52] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix × instead.␤at <tmp>:1␤------> 3×7⏏5 2␤»

[13:52] <AlexDaniel> the error messages make it quite transparent :)

[13:53] <Doc_Holliwood> I'm just trying to wrap my head around the latest SO question. but it makes sense to me now. if ² ist a postfix, but X requires an infix. so X² cant DWTHAM

[13:56] <Doc_Holliwood> in order for say 1, 3, 5, 7, 9 X² to be 1 , 25, etc you would need to change how X works 

[13:57] <jnthn> m: say (1, 3, 5, 7, 9)>>²

[13:57] <camelia> rakudo-moar ed8f5141f: OUTPUT: «(1 9 25 49 81)␤»

[13:57] <jnthn> Just use something that expects a postfix op :)

[13:58] <Doc_Holliwood> I am so going to post this :D

[14:02] *** Altai-man_ joined
[14:04] *** sena_kun left
[14:10] <Doc_Holliwood> I think what surprise people is that ² has a numeric value at all

[14:10] *** abraxxa joined
[14:10] <Doc_Holliwood> on it's own i mean.

[14:10] <Doc_Holliwood> its

[14:10] *** abraxxa1 joined
[14:14] <Kaiepi> m: sub foo { callframe(1).name }; sub bar { foo }; bar

[14:14] <camelia> rakudo-moar ed8f5141f: OUTPUT: «No such method 'name' for invocant of type 'CallFrame'. Did you mean any of these?␤    none␤    note␤    take␤␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:14] <Kaiepi> m: sub foo { callframe(1).code.name }; sub bar { foo }; bar

[14:14] <camelia> rakudo-moar ed8f5141f: ( no output )

[14:14] <Kaiepi> m: sub foo { callframe(1).code.name }; sub bar { foo }; say bar

[14:14] <camelia> rakudo-moar ed8f5141f: OUTPUT: «bar␤»

[14:14] *** cognominal joined
[14:14] <Kaiepi> is there a way you can get the caller of a function that's more clear than this?

[14:14] *** abraxxa1 left
[14:15] *** abraxxa left
[14:16] <jnthn> More clear in what sense?

[14:16] <jnthn> I'not sure there even is another way.

[14:16] <guifa> Kapiei: Nope, unless something changed.  I was trying to do that to make a hash only be editable by itself

[14:18] <guifa> It’s probably not even particularly accurate (I mean, it is, but in a DWIM sense) either, as sometimes you’ll get intermediate objects / subs in the callframe

[14:18] <Kaiepi> i was thinking something like a &?CALLER variable

[14:19] <vrurg_> jnthn: There is another way – Backtrace. :)

[14:19] <jnthn> Oh, right

[14:19] <jnthn> Kaiepi: That'd make no sense at all, given caller is a dynamic property, but &?FOO things are compile-time symbols :)

[14:22] *** sjn left
[14:22] *** sjn joined
[14:27] <Kaiepi> ah

[14:27] <Kaiepi> &*CALLER then

[14:29] *** abraxxa joined
[14:32] <jnthn> Except one could actually declare that, so it'd be ambiguous :)

[14:32] <jnthn> IMO, the current way is short enough relative to how often one would wish to do this

[14:43] *** abraxxa left
[14:45] *** abraxxa joined
[14:55] *** cognomin_ joined
[14:59] *** cognominal left
[15:03] *** cpan-raku left
[15:04] *** cpan-raku joined
[15:04] *** cpan-raku left
[15:04] *** cpan-raku joined
[15:40] <Kaiepi> m: role Foo { has $.a; has $.b; has $.c; has $.d; }; class Bar does Foo { }; class Baz does Foo { }; class Qux does Foo { my enum Type <bar baz>; has Type:D $.type is required; proto method new(Foo:D $foo) { my $*a = $foo.a; my $*b = $foo.b; my $*c = $foo.c; my $*d = $foo.d; {*} }; multi method new(Bar:D $bar) { self.bless: :$*a, :$*b, :$*c, :$*d, type => bar }; multi method new(Baz:D $baz) { self.bless: :$*a, :$*b, :$*c, :$*d, type => baz } }; say Qux.new: 

[15:40] <Kaiepi> Bar.new: :1a, :2b, :3c, :4d

[15:40] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:40] <Kaiepi> argh

[15:41] <Kaiepi> m: role Foo { has $.a; has $.b; has $.c; }; class Bar does Foo { }; class Baz does Foo { }; class Qux does Foo { my enum Type <bar baz>; has Type:D $.type is required; proto method new(Foo:D $foo) { my $*a = $foo.a; my $*b = $foo.b; my $*c = $foo.c; {*} }; multi method new(Bar:D $bar) { self.bless: :$*a, :$*b, :$*c, type => bar }; multi method new(Baz:D $baz) { self.bless: :$*a, :$*b, :$*c, type => baz } }; say Qux.new: Bar.new: :1a, :2b, :3c

[15:41] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Qux.new(type => Type::bar, a => 1, b => 2, c => 3)␤»

[15:42] <Kaiepi> not the most practical example of it, but you can get rid of a lot of boilerplate in constructors if you make them multis and use dynamic variables in the proto for it

[16:01] <Kaiepi> actually wait, wouldn't using submethod BUILD make more sense for cases like this?

[16:03] *** sena_kun joined
[16:05] *** Altai-man_ left
[16:15] *** xinming left
[16:17] *** jmerelo joined
[16:17] *** xinming joined
[16:17] <jmerelo> releasable6: status

[16:17] <tellable6> 2019-11-19T23:21:58Z #raku <tbrowder> jmerelo gist of draft advent article is available, see yr github issue for the comment with it

[16:17] <tellable6> 2019-11-20T18:28:11Z #raku <AlexDaniel> jmerelo: why is there a separate raku advent blog? Why not use the existing one?

[16:17] <tellable6> 2019-11-20T18:56:55Z #raku <tyil> jmerelo I've scheduled my advent blog posts

[16:17] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 248 out of 479 commits logged (⚠ 9 warnings)

[16:17] <releasable6> jmerelo, Details: https://gist.github.com/0007c3bf2017c8a86b2e7093a1fe2373

[16:17] <jmerelo> .seen AlexDaniel

[16:17] <tellable6> jmerelo, I saw AlexDaniel 2019-11-21T13:52:37Z in #raku: <AlexDaniel> the error messages make it quite transparent :)

[16:17] <AlexDaniel> o/

[16:17] <jmerelo> Hi AlexDaniel 

[16:18] <jmerelo> Long story short: I don't have privileges to change the name, the person who owns it didn't want to change it.

[16:19] <AlexDaniel> really??

[16:19] <jmerelo> AlexDaniel: It's a good reason, I guess: let's not lose all the incoming links.

[16:19] <AlexDaniel> ok… whatever

[16:19] <jmerelo> Yep, we'll have to make do...

[16:27] *** mensvaga left
[16:31] <finanalyst> jmerelo: hi

[16:32] <finanalyst> .seen jmerelo

[16:32] <tellable6> finanalyst, I saw jmerelo 2019-11-21T16:19:44Z in #raku: <jmerelo> Yep, we'll have to make do...

[16:34] <Kaiepi> would creating custom package declarators with EXPORTHOW::DECLARE be a good topic for an advent calendar article?

[16:35] <finanalyst> I'm trying to grok the classes in CompUnit/Repository. Nine classes. Is there a link/code/comment to indicate the need/use-case for them?

[16:39] <Kaiepi> docs/module_management.md finanalyst ?

[16:40] *** scimon left
[16:41] <finanalyst> Kaiepi: I've read it once already, and reading it again. But no indication about the subclasses in CompUnit/Repository

[16:41] <Kaiepi> hm, idk then

[16:41] <finanalyst> I have the feeling some of the classes are not actually used now, or were stubs during design.

[16:41] <finanalyst> So the question arises as to whether they need to be documented

[16:42] <jmerelo> Hi, finanalyst !

[16:43] <finanalyst> They are: AbsolutePath.pm6, FileSystem, Installable, Installation, Locally, NQP, Perl5, Spec, Unknonw

[16:43] <finanalyst> jmerelo: trying to grok CompUnit classes.

[16:43] <jmerelo> Just came back. finanalyst, they are definitely used. Did you try and do a GitHub search for them? Sometimes you find them in unexpected places...

[16:46] *** Xliff left
[16:49] <finanalyst> jmerelo: just tried a search on CompUnit/Repository/AbsolutePath for all github. No mentions. 

[16:49] <finanalyst> Also tried CompUnit::Repository::AbsolutePath, no finds

[16:50] <finanalyst> But CompUnit::Repository yields one result

[16:51] <finanalyst> misreading results, I need to look at "code" results, not overview

[16:53] <jmerelo> finanalyst: they should be at least tested...

[16:54] <finanalyst> jmerelo: I have now found some results, but still no indication about how they are used. Looking at the code for these classes, there does not seem to be much difference between some of them

[16:57] <jmerelo> finanalyst: from what I know, they are different ways to specify a CompUnit. For instance, when you "use" a NQP class, you are using the NQP form above.

[16:58] <jmerelo> finanalyst: but, well, I do have like 12 tabs open in my firefox for 18 months already until I get around to it... So it's not easy.

[16:58] *** kensanata left
[17:03] <finanalyst> jmerelo:  IN docs.module_management.md, I read: Distribution

[17:03] <finanalyst> To be more fully defined, but consists of the metadata from a META6.info and a way to reach any resources declared within it.

[17:03] <finanalyst> Is there a fuller definition of 'distribution'? 

[17:06] <finanalyst> I presume 'META6.info' is 'META6.json' that comes with a 'module'?

[17:13] <jmerelo> finanalyst: there's the docs for Distribution, I guess https://docs.raku.org/type/Distribution

[17:13] <El_Che> lo

[17:19] *** rbt joined
[17:20] <finanalyst> jmerelo: I have read that doc. To be honest, its even more confusing! It discusses a role without saying what a Distribution is

[17:24] <jmerelo> finanalyst: please also raise an issue about it...

[17:25] <jmerelo> finanalyst: a Distribution is also mentioned in the documentation about META6.json

[17:25] *** rbt left
[17:25] *** rbt joined
[17:25] <finanalyst> jmerelo: I'm trying to write a doc to clarify it.

[17:26] <jmerelo> finanalyst: but well, you've found the Catch-22 of documenting stuff. It's not documented, so it's difficult to understand what it does to document it.

[17:27] <finanalyst> jmerelo: but the person who wrote the classes should still have some memory about why they were written.

[17:28] <finanalyst> When did the distinction between Distribution classes and CompUnit classes occur?

[17:28] <finanalyst> they seem to be similar

[17:28] <jmerelo> finanalyst: I sometimes go through commit comments and issues they refer to understand the context

[17:30] <finanalyst> jmerelo: that's a lead. 

[17:30] <jmerelo> finanalyst: AFAIU, CompUnits:: tell the program how should it load and work with them. For instance, FileSystem. 

[17:42] *** patrickb joined
[17:46] <tbrowder> jmerelo: \o/

[17:47] <tbrowder> does anyone know how to upload a text file into a draft article on wordpress?

[17:47] *** hythm joined
[17:49] <jmerelo> tbrowder: other than copy and paste?

[17:50] <jmerelo> tbrowder: but I really don't know. They provide the editor, which you can switch to code if you want.

[17:51] <tbrowder> i see they have an api that may help (yep, copy paste is not my cup of tea, old fumble fingers sometimes messes things up)

[17:53] <tbrowder> since the consensus last year or so was to keep using wp, a good raku tool to aid publishing advents would be a good community project imho

[17:53] <jmerelo> tbrowder: it sure would :-)

[17:57] <hythm>  finanalyst, there is an old advent post about Compunit here  (if you havnt seent it already ) https://perl6advent.wordpress.com/2016/12/16/day-16-the-meta-spec-distribution-and-compunitrepository-explained-ish/

[17:57] <tellable6> 2019-11-17T14:44:46Z #raku <Xliff_> hythm: I'm awake. 

[17:57] <tellable6> 2019-11-17T15:08:03Z #raku <Xliff_> hythm: Pull the latest code, I've made those types of parameters optional. They are only there as out params, anyways. So now: $sc.get-color($state) will return a GdkRGBA value, which is a CStruct.

[17:57] *** lizmat joined
[17:58] <finanalyst> hythm: thanx

[17:58] <hythm> there is also a nice pdf called Module Loading in Perl6 by niner

[17:59] <finanalyst> hythm: where is the pdf?

[17:59] <finanalyst> I have his talk on Module loading

[18:00] <hythm> yes its the pdf basically of the talk, i dont have the link for the moment, but its in http://niner.name website

[18:01] *** wildtrees joined
[18:02] <finanalyst> hythm: I created a pod6 file based on the talk. A first draft is a PR in the doc/ repository. There are issues with it because I wrote is as a sort of tutorial, but it's not

[18:02] *** Altai-man_ joined
[18:03] *** jmerelo left
[18:04] *** sena_kun left
[18:05] <tbrowder> ref wp api: looks like there is an existing javascript client to model from. there is a set of apis to post and publish articles.

[18:05] <hythm> finanalyst, this is the link of the pdf http://niner.name/talks/A%20look%20behind%20the%20curtains%20-%20module%20loading%20in%20Perl%206/

[18:05] *** chloekek_ joined
[18:06] <tbrowder> google summer of code project?

[18:06] <tbrowder> or part of one?

[18:07] <finanalyst> hythm: that is the same content as the talk and the odp document.

[18:08] <finanalyst> hythm: Advent Calendar link you sent is also v good.

[18:14] *** hythm left
[18:16] *** hythm joined
[18:20] <hythm> thanks Xliff, I used the .get-color method after update and works great

[18:34] *** Xliff joined
[18:34] <Xliff> .seen salortiz

[18:34] <tellable6> Xliff, I haven't seen salortiz around, did you mean sortiz?

[18:35] <Xliff> .seen sortiz

[18:35] <tellable6> Xliff, I saw sortiz 2019-10-14T20:28:20Z in #raku-dev: <sortiz> Thank you

[18:49] *** patrickb left
[18:50] *** xinming left
[18:52] *** xinming joined
[18:57] *** Xliff left
[19:23] *** abraxxa left
[19:30] *** Kaiepi left
[19:30] *** Kaiepi joined
[19:31] *** Kaiepi left
[19:32] *** wildtrees left
[19:32] *** Kaiepi joined
[19:33] *** Kaiepi left
[19:34] *** Kaiepi joined
[19:35] *** Kaiepi left
[19:35] *** Kaiepi joined
[19:40] *** xinming left
[19:42] *** xinming joined
[19:43] <cpan-raku> New module released to CPAN! LibXML (0.1.11) by 03WARRINGD

[19:45] *** hythm left
[19:48] *** wildtrees joined
[19:49] *** wildtrees left
[19:49] *** wildtrees joined
[19:57] *** lucasb left
[19:59] *** Kaiepi left
[20:00] *** Kaiepi joined
[20:01] *** Kaiepi left
[20:02] *** Kaiepi joined
[20:02] *** Kaiepi left
[20:03] *** sena_kun joined
[20:04] *** Altai-man_ left
[20:15] *** finanalyst left
[20:25] *** joule left
[20:46] <lizmat> weekly: https://www.i-programmer.info/news/222-perl/13267-the-raku-beginner-tutorial.html

[20:46] <notable6> lizmat, Noted! (weekly)

[20:49] *** lizmat left
[21:07] *** Doc_Holliwould joined
[21:09] *** lucasb joined
[21:09] *** Doc_Holliwood left
[21:10] *** apathor_ joined
[21:12] *** gbmor left
[21:13] *** gbmor joined
[21:14] *** markmarkmark joined
[21:15] *** epony joined
[21:16] *** veesh joined
[21:20] *** Ekho joined
[21:28] *** rbt left
[21:28] *** rbt joined
[22:02] *** Altai-man_ joined
[22:05] *** sena_kun left
[22:28] *** b2gills left
[22:31] *** b2gills joined
[22:49] *** chloekek_ left
[23:06] *** mid_home joined
[23:07] *** vrurg joined
[23:07] *** vrurg left
[23:08] *** vrurg_ is now known as vrurg

[23:18] *** vrurg left
[23:20] *** vrurg joined
[23:25] *** rbt left
[23:31] *** lizmat joined
[23:57] *** cognominal joined
