[00:02] *** sena_kun left
[00:04] <mspo> what does simple mean in this context

[00:09] <xkr47> I don't know, GPT-2 invented everything except the first sentence :)

[00:11] <cpan-raku> New module released to CPAN! CSS (0.0.1) by 03WARRINGD

[00:22] *** itcharlie joined
[00:32] *** squashable6 left
[00:34] *** squashable6 joined
[00:34] *** leont left
[00:40] <cpan-raku> New module released to CPAN! Kind (0.1.0) by 03KAIEPI

[00:46] *** lizmat left
[01:18] *** itcharlie left
[01:22] *** finanalyst left
[01:22] *** mahmudov left
[01:51] *** kalkin-- joined
[01:55] *** kalkin- left
[02:24] *** Tirifto left
[03:24] *** sourceable6 left
[03:24] *** notable6 left
[03:24] *** reportable6 left
[03:24] *** nativecallable6 left
[03:24] *** bisectable6 left
[03:24] *** squashable6 left
[03:24] *** quotable6 left
[03:24] *** greppable6 left
[03:24] *** statisfiable6 left
[03:24] *** benchable6 left
[03:24] *** releasable6 left
[03:24] *** bloatable6 left
[03:24] *** unicodable6 left
[03:24] *** committable6 left
[03:24] *** shareable6 left
[03:24] *** coverable6 left
[03:24] *** releasable6 joined
[03:24] *** statisfiable6 joined
[03:25] *** shareable6 joined
[03:25] *** sourceable6 joined
[03:25] *** committable6 joined
[03:25] *** squashable6 joined
[03:25] *** reportable6 joined
[03:25] *** unicodable6 joined
[03:25] *** nativecallable6 joined
[03:26] *** greppable6 joined
[03:26] *** benchable6 joined
[03:26] *** coverable6 joined
[03:27] *** notable6 joined
[03:27] *** quotable6 joined
[03:27] *** bloatable6 joined
[03:27] *** bisectable6 joined
[04:27] *** sourceable6 left
[04:27] *** quotable6 left
[04:27] *** shareable6 left
[04:27] *** statisfiable6 left
[04:27] *** bisectable6 left
[04:27] *** benchable6 left
[04:27] *** nativecallable6 left
[04:27] *** unicodable6 left
[04:27] *** reportable6 left
[04:27] *** squashable6 left
[04:27] *** coverable6 left
[04:27] *** notable6 left
[04:27] *** greppable6 left
[04:27] *** releasable6 left
[04:27] *** committable6 left
[04:27] *** bloatable6 left
[04:28] *** notable6 joined
[04:28] *** quotable6 joined
[04:28] *** nativecallable6 joined
[04:28] *** benchable6 joined
[04:29] *** reportable6 joined
[04:29] *** bisectable6 joined
[04:29] *** statisfiable6 joined
[04:29] *** shareable6 joined
[04:29] *** committable6 joined
[04:29] *** bloatable6 joined
[04:29] *** coverable6 joined
[04:30] *** squashable6 joined
[04:30] *** unicodable6 joined
[04:30] *** greppable6 joined
[04:30] *** releasable6 joined
[04:30] *** sourceable6 joined
[04:31] *** johnjohn101 left
[04:48] *** xinming left
[04:49] *** xinming joined
[05:49] *** statisfiable6 left
[05:49] *** coverable6 left
[05:49] *** benchable6 left
[05:49] *** quotable6 left
[05:49] *** reportable6 left
[05:49] *** releasable6 left
[05:49] *** notable6 left
[05:49] *** bisectable6 left
[05:49] *** tellable6 left
[05:49] *** sourceable6 left
[05:49] *** bloatable6 left
[05:49] *** squashable6 left
[05:49] *** unicodable6 left
[05:49] *** committable6 left
[05:49] *** evalable6 left
[05:49] *** greppable6 left
[05:49] *** nativecallable6 left
[05:49] *** shareable6 left
[05:49] *** benchable6 joined
[05:49] *** unicodable6 joined
[05:49] *** bisectable6 joined
[05:50] *** coverable6 joined
[05:50] *** bloatable6 joined
[05:50] *** committable6 joined
[05:50] *** tellable6 joined
[05:50] *** quotable6 joined
[05:51] *** squashable6 joined
[05:51] *** reportable6 joined
[05:51] *** nativecallable6 joined
[05:51] *** statisfiable6 joined
[05:51] *** notable6 joined
[05:51] *** shareable6 joined
[05:51] *** evalable6 joined
[05:51] *** releasable6 joined
[05:51] *** greppable6 joined
[05:52] *** sourceable6 joined
[06:33] <xinming> SmokeMachine: https://termbin.com/0gmt6    This will cause    'This type cannot unbox to a native string: P6opaque, Failure'   error

[06:33] <xinming> The raku version is    `This is Rakudo version 2019.11 built on MoarVM version 2019.11`

[07:13] *** xinming left
[07:13] *** xinming joined
[08:03] *** kalkin-- left
[08:15] *** gabiruh_ joined
[08:16] *** kalkin-- joined
[08:19] *** gabiruh left
[08:24] *** kalkin-- left
[08:30] *** xinming left
[08:30] *** xinming joined
[08:31] <xinming> SmokeMachine: i just try to narrow down, It's not Red problem.

[08:31] <xinming> It seems, It's DB::Pg problem, I'll continue trying

[08:32] *** rindolf joined
[08:50] *** vividsnow left
[08:56] *** vividsnow joined
[09:04] *** vividsnow left
[09:04] *** vividsnow joined
[09:14] *** holyghost left
[09:15] *** holyghost joined
[09:43] *** sena_kun joined
[09:49] *** kalkin-- joined
[10:15] *** kalkin-- left
[10:18] *** rindolf left
[10:25] *** hacktor1 joined
[10:25] *** hacktor left
[10:27] *** stoned75 joined
[10:30] *** rindolf joined
[10:37] *** stoned75 left
[11:11] *** hacktor1 left
[11:12] *** hacktor joined
[11:17] *** hacktor left
[11:22] *** sena_kun left
[11:37] *** sena_kun joined
[12:06] *** pheix joined
[12:06] *** pheix left
[12:06] *** pheix joined
[12:11] *** pheix_ joined
[12:12] *** pheix_ left
[12:13] *** RobRaku joined
[12:16] *** rindolf left
[12:18] *** rindolf joined
[12:37] *** AlexDaniel joined
[12:37] *** AlexDaniel left
[12:37] *** AlexDaniel joined
[12:38] *** lizmat joined
[12:51] *** chloekek joined
[12:52] *** vividsnow left
[13:08] *** pheix left
[13:11] *** pheix joined
[13:23] *** sena_kun left
[13:28] <chloekek> Does DBIish support writing custom SQLite collations in Raku?

[13:30] <chloekek> I’ll open a feature request, doesn’t seem like it.

[13:38] *** sena_kun joined
[13:45] *** RobRaku left
[13:59] *** Xliff joined
[14:15] <chloekek> Nice trick: put large/bulky SQL queries in a resource, and load them with $dbh.prepare(BEGIN { %?RESOURCES<blabla.sql>.slurp })

[14:17] <lizmat> it's what %?RESOURCES was intended for  :-)

[14:22] <chloekek> p6: given " foo ".trim { s:g/' '/%/; .say }

[14:22] <camelia> rakudo-moar 672c5d403: OUTPUT: «foo␤»

[14:22] <chloekek> p6: given " foo ".trim { s:g/' '/%/; .say }

[14:22] <camelia> rakudo-moar 672c5d403: OUTPUT: «foo␤»

[14:22] *** chloekek left
[14:22] *** chloekek joined
[14:22] <chloekek> p6: given ' foo '.trim { s:g/' '/%/; .say }

[14:22] <camelia> rakudo-moar 672c5d403: OUTPUT: «foo␤»

[14:23] <chloekek> Interesting, I get an error that I’m trying to mutate an immutable Str.

[14:23] <chloekek> p6: given ' foo '.trim { s:g/(' ')/%\\$0/; .say }

[14:23] <camelia> rakudo-moar 672c5d403: OUTPUT: «foo␤»

[14:23] <chloekek> Oh lol.

[14:23] <chloekek> p6: given ' f o o '.trim { s:g/(' ')/%/; .say } # better example

[14:23] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot modify an immutable Str (f o o)␤  in block <unit> at <tmp> line 1␤␤»

[14:24] <chloekek> I’ll just not use s/// :P

[14:26] <uzl[m]> Passing by to wish everyone Merry Christmas!

[14:26] <uzl[m]> p: given ' f o o '.trim { S:g/(' ')/%/; .say }

[14:26] <uzl[m]> p6: given ' f o o '.trim { S:g/(' ')/%/; .say }

[14:26] <camelia> rakudo-moar 672c5d403: OUTPUT: «f o o␤»

[14:28] <chloekek> S doesn’t modify $_ so .say still prints the old one.

[14:28] <chloekek> p6: given ' f o o '.trim { say S:g/(' ')/%/ }

[14:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «f%o%o␤»

[14:28] <chloekek> However, in reality I have two substitutions and you can’t chain them easily with S.

[14:29] <chloekek> p6: given ' f o o '.trim { say {S:g/(' ')/%/}(S:g/f/x/); }

[14:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «x%o%o␤»

[14:29] <chloekek> Works but ugly. :þ

[14:30] <uzl[m]> p6: say S:g/(' ')/%/ with ' f o o ';

[14:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «%f%o%o%␤»

[14:30] <chloekek> p6: given ' f o o ' { $_ ==> trim() ==> {S:g/(' ')/%/} ==> {S:g/f/x/} ==> say(); }

[14:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Only routine calls or variables that can '.push' may appear on either side of feed operators.␤at <tmp>:1␤------> 3given ' f o o ' { $_ ==> trim() ==> 7⏏5{S:g/(' ')/%/} ==> {S:g/f/x/} ==> say();…»

[14:30] <chloekek> p6: given ' f o o ' { $_ ==> trim() ==> {S:g/(' ')/%/}() ==> {S:g/f/x/}() ==> say(); }

[14:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «x%o%o␤»

[14:30] <chloekek> That’s ok I suppose.

[14:31] <uzl[m]> say S:g/(' ')/%/ given ' f o o ';

[14:31] <evalable6> uzl[m], rakudo-moar 8e3b0a714: OUTPUT: «%f%o%o%␤»

[14:31] <uzl[m]> However, you must trim the string.

[14:31] <uzl[m]> say S:g/(' ')/%/ with ' f o o '.trim;

[14:31] <evalable6> uzl[m], rakudo-moar 8e3b0a714: OUTPUT: «f%o%o␤»

[14:32] *** cpan-raku left
[14:33] *** cpan-raku joined
[14:33] *** cpan-raku left
[14:33] *** cpan-raku joined
[14:39] *** kalkin joined
[14:42] <chloekek> Went with $query.trim.subst(/\s+/, ‘::’, :g).subst(/(<[%_\\]>)/, {“\\$0”}, :g)

[14:43] <Xliff> Merry Christmas, #raku!

[14:52] <sena_kun> Xliff: o/

[14:55] *** wamba joined
[15:03] <chloekek> p6: say ‘merry christmas’.tc

[15:03] <camelia> rakudo-moar 672c5d403: OUTPUT: «Merry christmas␤»

[15:05] <chloekek> p6: ‘merry christmas’.subst(/«./, {$0.tc}, :g).say

[15:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «Use of Nil in string context␤erry hristmas␤  in block  at <tmp> line 1␤Use of Nil in string context␤  in block  at <tmp> line 1␤»

[15:06] <chloekek> p6: ‘merry christmas’.subst(/«(.)/, {$0.tc}, :g).say

[15:06] <camelia> rakudo-moar 672c5d403: OUTPUT: «Merry Christmas␤»

[15:15] *** chloekek left
[15:18] <kalkin> hi

[15:22] *** sena_kun left
[15:36] *** pheix left
[15:37] *** sena_kun joined
[15:38] <sena_kun> lizmat: ping?

[15:44] *** Tirifto joined
[16:03] *** gabiruh_ left
[16:30] * sena_kun hopes masak can de-bitrot https://github.com/masak/data-pretty with help of PRs available

[16:47] <sena_kun> .seen lembark

[16:47] <tellable6> sena_kun, I saw lembark 2019-07-03T18:33:03Z in #perl6: <lembark> If the issue is closure conext fine, where can I look to find out how the closure context is defined and how it affects the state vars?

[16:48] <sena_kun> .tell lembark hi! your FindBin module is failing tests for some reason, can you check it?

[16:48] <tellable6> sena_kun, I'll pass your message to lembark

[16:51] <sena_kun> .tell masak not only https://github.com/masak/data-pretty but https://github.com/masak/gge wants some de-bitrotting too...

[16:51] <tellable6> sena_kun, I'll pass your message to masak

[17:04] <sarna> hello, what’s (*SKIP)(*F) and does raku have it?

[17:19] *** xinming left
[17:21] *** xinming joined
[17:22] *** sena_kun left
[17:34] <Xliff> sarna: Where are you getting that from?

[17:35] *** chloekek joined
[17:38] *** sena_kun joined
[17:42] *** guifa2 joined
[17:43] <moritz> perldoc perlre has something on (*SKIP)

[17:46] <Xliff> Is there a way to invoke perl6's compiling routines from inside perl6?

[17:47] <Xliff> Or is the expected way to invoke perl6 from a subshell?

[17:48] <chloekek> Xliff: what do you want to compile and what do you expect to get?

[17:48] <Xliff> I want to compile (and have it output .moarvm files as normal) perl6 modules

[17:49] <Xliff> I basically want to see if I can write a more efficient perl6 loader without having to drop to NQP.

[17:49] <Xliff> One where I can actually start parallel compilation jobs.

[17:53] *** chloekek left
[17:53] <xinming> After we rename perl6 to raku, Will the .perl method also be renamed? :-)

[17:58] <sena_kun> xinming: yeah

[17:58] *** vividsnow joined
[17:58] <sena_kun> https://github.com/perl6/problem-solving/blob/master/solutions/language/Path-to-Raku.md#perl <- xinming

[18:00] <lizmat> sena_kun: pong

[18:02] <sena_kun> lizmat: o/

[18:03] <sena_kun> I guess you are aware that Acme::Cow6 fails tests?

[18:03] *** guifa2 left
[18:03] <sena_kun> I filled a ticket anyway, iirc

[18:03] <lizmat> yeah... don't worry about it

[18:04] <sena_kun> oki

[18:04] <lizmat> it was an experiment, and one that is still ongoing

[18:04] <lizmat> and not very serious

[18:05] <sena_kun> no problem, I am just going over all not-OK things in the ecosystem for the release and thought you're the author that did not abandon modules. :)

[18:11] <sarna> Xliff: something something perl regexes

[18:12] <lizmat> sena_kun: it's not abandoned, it's just resting

[18:13] * sena_kun nods

[18:13] <sena_kun> ++lizmat

[18:13] <lizmat> and I *have* abandoned all of my Perl modules, so I have abandoned modules

[18:13] <lizmat> just no Raku modules

[18:16] *** chloekek joined
[18:22] <chloekek> Xliff: even the Rakudo module for precompiling distributions spawns a subprocess so I doubt there’s another way to do it than via MoarVM flags.

[18:24] *** wamba left
[18:38] *** stoned75 joined
[18:50] *** johnjohn101 joined
[18:52] *** stoned75 left
[18:55] <cpan-raku> New module released to CPAN! Math::Libgsl (0.0.3) by 03FRITH

[18:56] <johnjohn101> hi raku!!  i think i'm going to try a few things today with this

[18:56] <sarna> hello johnjohn101 o/

[18:56] <johnjohn101> what is panda?

[18:57] <lizmat> the predecessor of zef

[18:57] <lizmat> the way to install modules from the ecosystem

[18:58] <johnjohn101> ok was going to do this...  so panda isn't used any more?

[18:58] <johnjohn101> https://andrewshitov.com/2018/10/31/database-access-in-perl-6/

[19:00] <lizmat> panda is indeed not the tool of choice for installing modules

[19:00] <lizmat> (anymore)

[19:02] <sarna> johnjohn101: `zef install DBIish` should work

[19:04] <johnjohn101> ok, will do that.  1st i need to get this working on ubuntu.

[19:05] <sarna> I recommend lonestar 

[19:05] <sena_kun> tyil: ping?

[19:06] <sarna> johnjohn101: https://github.com/Tyil/lonestar

[19:06] <sarna> will work fine if your shell is zsh or bash

[19:06] <johnjohn101> ok, thanks...

[19:06] <sena_kun> .tell tyll hi! I can't install App::Cpan, the output is https://gist.github.com/Altai-man/f65f529f73bb8f8e2d642f897a875746 can you please check it?

[19:06] <tellable6> sena_kun, I haven't seen tyll around, did you mean tyil?

[19:06] <johnjohn101> i don't customize anything

[19:06] <sena_kun> oops

[19:06] <sarna> yeah so you should be just fine :)

[19:07] <sena_kun> .tell tyil hi! I can't install App::Cpan, the output is https://gist.github.com/Altai-man/f65f529f73bb8f8e2d642f897a875746 can you please check it?

[19:07] <tellable6> sena_kun, I'll pass your message to tyil

[19:07] <johnjohn101> part of my issue today is complete procrastination and lazy. 1st vacay in over a year and my brain is telling me not to do anything that requires anykind of thinking

[19:07] <sarna> you can take some rest instead then!

[19:07] <sarna> that’s a lot of time without vacation :)

[19:08] <johnjohn101> and i work a high stress coding job

[19:10] <sarna> coding in your spare time sounds like an overkill :D

[19:12] * sena_kun prepared a Christmas present for jnthn

[19:12] <sena_kun> :P

[19:14] <johnjohn101> well, i use some of my spare time for education. small projects that i've learned a technique or what not have paid off royally

[19:15] <johnjohn101> at work. in fact, i was goofing around with some stuff last year at this time and now it's used in our product 

[19:15] <chloekek> At work I only learn Python pitfalls and XML feed problems so I spend my free time learning useful and fun things.

[19:15] <lizmat> johnjohn101++

[19:17] <johnjohn101> tbh, i love xml::twig to do xml stuff.  LOVE IT

[19:17] <sena_kun> https://github.com/pierre-vigier/Perl6-Data-MessagePack/pull/17 https://github.com/pierre-vigier/Perl6-Data-MessagePack/pull/18 lol I guess

[19:17] *** mahmudov joined
[19:23] *** sena_kun left
[19:37] *** sena_kun joined
[19:42] *** hacktor joined
[19:43] *** vividsnow left
[19:44] *** guifa2 joined
[19:54] *** RobRaku joined
[20:23] <Xliff> Ooh! XML::Twig looks cool!

[20:24] *** RobRaku left
[20:24] <Xliff> Hope this is pure Perl5. I might wanna see if this can be ported.

[20:24] <Grinnz> it's not, it uses XML::Parser

[20:24] <Xliff> Awww.... 

[20:25] <Grinnz> well XML::Twig itself is

[20:25] <Xliff> Well... that's not so bad.

[20:25] <Xliff> I can Inline::Perl5 XML::Parser until that too is ported.

[20:25] * Grinnz prefers Mojo::DOM

[20:26] <Grinnz> which is already ported i believe ;)

[20:26] <Xliff> What? There's a Perl6 Mojolicious?

[20:26] <Grinnz> no, but it was ported under the name DOM::Tiny

[20:28] <Xliff> https://www.google.com/search?q=munch%27s+scream&sxsrf=ACYBGNRKBxOQ-KKhL9iZriS5eIDbPbpMOA:1577305677933&source=lnms&tbm=isch&sa=X&ved=2ahUKEwihm4rF0dHmAhVqrlkKHYUkAxoQ_AUoAXoECBEQAw&biw=1501&bih=900#imgrc=-4j9OW6FXR40KM:

[20:28] * Xliff swoons.

[20:31] <Xliff> Um...

[20:32] <Xliff> What are <.rule> tokens for? Non capturing?

[20:32] <Xliff> And is this valid? <.valid-rule>

[20:32] <moritz> <off-topic>I've recently read that right around the time that Munch painted this, a vulcanic eruption might have actually turned the sky red</off-topic>

[20:32] <moritz> yes, <.foo> is non-capturing

[20:33] <moritz> m: grammar A { token a-b { . }; token TOP { <a-b> }}: A.parse('x')

[20:33] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3{ token a-b { . }; token TOP { <a-b> }}:7⏏5 A.parse('x')␤    expecting any of:␤        colon pair␤»

[20:33] <Xliff> m: grammar A { token a-b { . }; token TOP { <a-b> }}; A.parse('x')

[20:33] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3 . }; token TOP { <a-b> }}; A.parse('x')7⏏5␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modif…»

[20:33] <Xliff> m: grammar A { token a-b { . }; token TOP { <a-b> }}; A.parse('x')

[20:33] <camelia> rakudo-moar 672c5d403: ( no output )

[20:33] <Xliff> m: grammar A { token a-b { . }; token TOP { <a-b> }}; A.parse('x').say

[20:33] <camelia> rakudo-moar 672c5d403: OUTPUT: «｢x｣␤ a-b => ｢x｣␤»

[20:33] <Xliff> moritz++

[20:34] <Xliff> m: grammar A { token a-b { . }; token TOP { <.a-b> }}; A.parse('x').say

[20:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «｢x｣␤»

[20:40] *** vividsnow joined
[20:40] <Xliff> ('a'...'z').hyper.map({ .say })

[20:40] <evalable6> Xliff, rakudo-moar d5a34f19f: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤h␤i␤j␤k␤l␤m␤n␤o␤p␤q␤r␤s␤t␤u␤v␤w␤x␤y␤z␤»

[20:41] <Xliff> ('a'...'z').hyper.map({ sleep rand; .say })

[20:41] <Xliff> m: rand.say

[20:41] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.651624443789071␤»

[20:41] <Xliff> m: ('a'...'z').hyper.map({ sleep rand; .say })

[20:41] <Xliff> ?!?

[20:41] <camelia> rakudo-moar 672c5d403: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤h␤i␤j␤k␤l␤m␤n␤o␤p␤q␤r␤s␤t␤u␤v␤w␤x␤y␤z␤»

[20:42] <Xliff> m: ('a'...'z').hyper.map({ sleep 1.rand; .say })

[20:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤h␤i␤j␤k␤l␤m␤n␤o␤p␤q␤r␤s␤t␤u␤v␤w␤x␤y␤z␤»

[20:42] <Xliff> m: sleep rand; say now - INIT now;

[20:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.9780913␤»

[20:42] <Xliff> m: sleep rand; say now - INIT now;

[20:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.5319324␤»

[20:42] <Xliff> m: sleep rand; say now - INIT now;

[20:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.1741123␤»

[20:42] <Xliff> m: sleep rand; say now - INIT now;

[20:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.861960193␤»

[20:42] <Xliff> m: sleep 2.rand; say now - INIT now;

[20:42] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.1759264␤»

[20:43] <Xliff> m: sleep 2.rand; say now - INIT now;

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.880982␤»

[20:43] <Xliff> m: sleep 2.rand; say now - INIT now;

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «0.703917␤»

[20:43] <Xliff> m: sleep 2.rand; say now - INIT now;

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «1.5179566␤»

[20:43] <Xliff> m: 2.rand.say

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «1.9859595382464654␤»

[20:43] <Xliff> m: 2.rand.say

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «1.5541059515765867␤»

[20:43] <Xliff> m: ^999.pick

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at <tmp>:1␤    ------> 3^9997⏏5.pick␤WARNINGS for <tmp>:␤Useless use of "^" in expression "^999.pick" in sink context (line 1)␤»

[20:43] <Xliff> m: (^999).pick

[20:43] <camelia> rakudo-moar 672c5d403: ( no output )

[20:43] <Xliff> m: (^999).pick.say

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «802␤»

[20:43] <Xliff> m: (^999).pick.say

[20:43] <camelia> rakudo-moar 672c5d403: OUTPUT: «982␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «937␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «939␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «949␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «121␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «979␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «696␤»

[20:44] <Xliff> Hmmm... why skewed so high?!

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «965␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «845␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «571␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «968␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «198␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «141␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «974␤»

[20:44] <Xliff> m: (^999).pick.say

[20:44] <camelia> rakudo-moar 672c5d403: OUTPUT: «591␤»

[20:48] <lizmat> m: say (^10000).map( { ^10000 .pick } ).sum / 10000

[20:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «4993.5009␤»

[20:48] <lizmat> m: say (^10000).map( { ^10000 .pick } ).sum / 10000

[20:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «5080.0407␤»

[20:48] <lizmat> m: say (^10000).map( { ^10000 .pick } ).sum / 10000

[20:48] <camelia> rakudo-moar 672c5d403: OUTPUT: «4994.3976␤»

[20:49] <lizmat> I don't see much bias ?

[20:49] *** vividsnow left
[20:49] *** vividsnow joined
[20:51] <Xliff> Well, when I see 5 numbers in the 900s out of 999 of them, I wonder.

[20:52] <Xliff> How can I assure I get @a to run $*KERNEL.cpu-core jobs in parallel? Especially if @a is larger than the number of cores?

[20:52] <Xliff> .hyper and .race all seem to not be starting threads in parallel.

[20:53] <lizmat> if the load of the work done in a batch is too low, it'll get finished too soon

[20:53] <lizmat> alleviating the need to start more threads

[20:53] <lizmat> this can usually be solved by a larger number for :batch

[20:54] <Xliff> batch or degree?

[20:54] <lizmat> degree is the max mumber of threads it will use

[20:54] <Xliff> I don't want to pass more than one element to a worker, so I leave batch at 1

[20:54] <lizmat> batch is the number of values it will pull before sending it off to a thread

[20:54] <Xliff> I set degree equal to the number of cpus

[20:54] <lizmat> that's ok

[20:54] <lizmat> but if the batch-size is too small, you're just creating overhead

[20:56] <Xliff> I'd rather it just start max(x, $cpu) threads and start another thread as they come available until the queue is exhausted.

[20:56] <Xliff> Yes, some of these jobs are finishing in a second or less, but I still want them to occur in parallel.

[20:56] *** pheix joined
[20:56] <Xliff> I don't want Raku to tell me that's not enough time before it will spawn another thread.

[20:57] <Xliff> So does this mean I have to work around .hyper and .race and roll my own?

[20:58] <lizmat> thing is, it *will* do what you want if the batch sizes create enough load

[20:58] <Xliff> OK. So maybe I let it run until some of the more heavier loads and it will start new threads?

[20:58] <lizmat> it should

[20:58] <Xliff> :S

[20:58] <lizmat> if you have a script that does a run like that

[20:59] <lizmat> you can also run it with -Msnapper

[20:59] <Xliff> And that does?

[20:59] <lizmat> and it should give you output at the end of the run from which you can see when threads where started

[20:59] <Xliff> Hmmm...

[20:59] *** vividsnow left
[21:00] *** vividsnow joined
[21:00] <lizmat> RAKUDO_SNAPPER=1 raku -Msnapper script

[21:00] <lizmat> would do a snapshot every second

[21:01] <Xliff> Hmmm... gw of 2.

[21:02] <Xliff> What I really wanna emulate is like "make -j$cores" but in Perl6.

[21:02] <lizmat> Perl6?   :-)

[21:03] <Xliff> Yes. I want to make a perl6 compiler that parallelizes precompile of perl6

[21:03] <Xliff> scripts

[21:03] <lizmat> perl6 ?

[21:03] <Xliff> s/compiler/script/

[21:03] <lizmat> :-)

[21:03] <Xliff> No. It doesn't.

[21:03] <lizmat> you mean Raku ?  :-)

[21:03] <Xliff> Oh. Yes. Sorry.

[21:04] <Xliff> C'mon Liz. We all revert occasionally. ;p

[21:04] <Xliff> ;)

[21:04] <lizmat> no pb, I make that mistake still

[21:04] <lizmat> every now and then

[21:04] <Xliff> Yes. Next time use a sledgehammer. I am not one for subtle hints! :)

[21:04] <lizmat> and I'm the one telling everybody on Twitter that they shouldn't  :)

[21:05] <Xliff> Had your chance!

[21:05] <Xliff> Now I insist you use Nerf products! It will be nicer for my head!

[21:05] <lizmat> so, if you start up X threads, how are you going to distribute the work to those threads ?

[21:05] <lizmat> consider yourself nerfed  :-)

[21:05] <Xliff> LOL

[21:06] <Xliff> lizmat: Well, thread starts with name of script to precompile.

[21:06] <Xliff> I just don't want to have more threads than the number of cores at any given time.

[21:06] <lizmat> this feels like premature optimization to me

[21:07] <Xliff> I may have to re-think this simple implementation into something more atimic.

[21:07] <Xliff> s/atimic/atomic/

[21:07] <Xliff> I've given it careful thought and I don't think that's true.

[21:07] <Xliff> Consider: I have scripts with a varying numnber of dependencies.

[21:07] <Xliff> I have a list of optimal build order.

[21:08] <Xliff> I'd like to pop off a all scripts that have no remaining dependencies and compile them in parallel.

[21:08] <Xliff> Rinse and repeat until the List is exhausted.

[21:09] <Xliff> Right now I could do a top-down compile and it would get me close, but threads would hang when more dependencies are detected.

[21:09] <Xliff> Start another thread and compile that until either it finishes or another dependency is found.

[21:09] <lizmat> well, precompilation currently still spawns an async process

[21:10] <lizmat> so I'm not sure what using threads will bring  

[21:10] <Xliff> http:://github.com/Xliff/p6-GtkPlus <- Grab this and follow the installation instructions.

[21:10] <Xliff> And I would SERIOUSLY appreciate tips on how to make that go faster.

[21:11] <Xliff> Even with your monster it will take close to an hour. It should not need to take that long.

[21:11] <Xliff> Oh... and my monster is bigger than yours. I tested! :D

[21:11] <Xliff> (that sounds vaguely obescene...)

[21:11] * Xliff flees

[21:12] <lizmat> :-)

[21:12] <lizmat> .oO( dirt is in the mind of the beholder )

[21:20] <cpan-raku> New module released to CPAN! Map::Ordered (0.0.3) by 03ELIZABETH

[21:23] *** sena_kun left
[21:25] <tbrowder> Merry Christmas, Raku, and Happy Fourth Birthday!

[21:27] <tbrowder> ref Raku Advent: we can get a "free" domain with our current plan. choices currently are:

[21:31] <tbrowder> m: my $r="rakuadventcalendar"; my @tld="com","blog","org"; .say "$r.$_" for @tld

[21:31] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3endar"; my @tld="com","blog","org"; .say7⏏5 "$r.$_" for @tld␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤  …»

[21:32] <tbrowder> m: say $r

[21:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$r' is not declared␤at <tmp>:1␤------> 3say 7⏏5$r␤»

[21:32] *** rindolf left
[21:33] <tbrowder> m: my $r="rakuadventcalendar"; my @tld="com","blog","org"; .say("$r.$_") for @tld

[21:33] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot resolve caller say(Str:D: Str:D); none of these signatures match:␤    (Mu: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[21:34] <tbrowder> m: my $r="rakuadventcalendar"; my @tld="com","blog","org"; .say("{$r}.{$_}") for @tld

[21:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot resolve caller say(Str:D: Str:D); none of these signatures match:␤    (Mu: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[21:34] <tbrowder> m: my $r="rakuadventcalendar"; my @tld="com","blog","org"; .say("$r'.'$_") for @tld

[21:34] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot resolve caller say(Str:D: Str:D); none of these signatures match:␤    (Mu: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[21:35] <tbrowder> m: my $r="rakuadventcalendar"; my @tld="com","blog","org"; .say($r ~ '.' ~ $_) for @tld

[21:35] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot resolve caller say(Str:D: Str:D); none of these signatures match:␤    (Mu: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[21:35] <tbrowder> m: my $r="rakuadventcalendar"; my @tld="com","blog","org"; say($r ~ '.' ~ $_) for @tld

[21:35] <camelia> rakudo-moar 672c5d403: OUTPUT: «rakuadventcalendar.com␤rakuadventcalendar.blog␤rakuadventcalendar.org␤»

[21:36] <tbrowder> votes, please

[21:37] *** sena_kun joined
[21:40] <pheix> +1 for rakuadventcalendar.org

[21:49] *** RobRaku joined
[22:01] <sena_kun> .seen uzl[m]

[22:01] <tellable6> sena_kun, I saw uzl[m] 2019-12-25T14:31:49Z in #raku: <uzl[m]> say S:g/(' ')/%/ with ' f o o '.trim;

[22:02] <sena_kun> .tell uzl[m] hi! it seems there are some issues with installing https://modules.raku.org/dist/QM:cpan:UZLUISF, it would be awesome if you could check it out, doesn't seem like a recent regression

[22:02] <tellable6> sena_kun, I'll pass your message to uzl[m]

[22:06] *** vividsnow left
[22:09] *** vividsnow joined
[22:11] *** pheix left
[22:18] *** hacktor left
[22:19] *** RobRaku left
[22:23] <tyil> sena_kun: will check out App::CPAN soon-ish, I sadly have little time around the holidays :(

[22:23] <tellable6> 2019-12-25T19:07:05Z #raku <sena_kun> tyil hi! I can't install App::Cpan, the output is https://gist.github.com/Altai-man/f65f529f73bb8f8e2d642f897a875746 can you please check it?

[22:23] <tyil> looks like an incorrect dep

[22:23] <sena_kun> tyil: thanks! no problem or a hurry, I am just preparing a release and telling people some things are broken. :)

[22:23] *** Hotbees left
[22:24] *** Hotbees joined
[22:35] *** vividsnow left
[23:01] *** kybr_ is now known as kybr

[23:22] *** sena_kun left
[23:27] *** chloekek left
[23:27] *** johnjohn101 left
[23:31] *** finanalyst joined
[23:38] *** sena_kun joined
[23:43] *** finanalyst left
[23:46] *** xi left
[23:48] *** xi joined
[23:55] *** guifa2 left
