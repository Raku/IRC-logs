[00:54] *** nativecallable6 joined
[00:54] *** committable6 joined
[00:54] *** shareable6 joined
[00:55] *** quotable6 joined
[00:55] *** coverable6 joined
[00:55] *** reportable6 joined
[00:55] *** benchable6 joined
[00:55] *** greppable6 joined
[00:55] *** releasable6 joined
[00:55] *** statisfiable6 joined
[00:55] *** bloatable6 joined
[00:56] *** notable6 joined
[00:56] *** squashable6 joined
[00:56] *** unicodable6 joined
[01:47] <ZzZombo> m: ->(;;){}

[01:47] <camelia> rakudo-moar 0b8ede6c4: ( no output )

[01:47] <ZzZombo> m: ->(;;;;;){}

[01:47] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can only specify ';;' once in a signature␤at <tmp>:1␤------> 3->(;;;;7⏏5;){}␤»

[01:47] <ZzZombo> m: ->(;;$a){}

[01:47] <camelia> rakudo-moar 0b8ede6c4: ( no output )

[01:47] <ZzZombo> m: ->(;;$a, $b){}

[01:47] <camelia> rakudo-moar 0b8ede6c4: ( no output )

[01:47] *** hythm joined
[01:48] <ZzZombo> m: ->(;;$a, $b){}().say

[01:48] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «Too few positionals passed to '<anon>'; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[01:48] <ZzZombo> m: ->(;;$a, $b){}(1).say

[01:48] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «Cannot unpack or Capture `1`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block <unit> at …»

[01:48] <ZzZombo> What's `;;` in the signature?

[01:59] *** Tirifto left
[02:02] *** cpan-raku left
[02:02] *** cpan-raku joined
[02:02] *** cpan-raku left
[02:02] *** cpan-raku joined
[02:04] *** AlexDaniel joined
[02:04] *** AlexDaniel left
[02:04] *** AlexDaniel joined
[02:36] <vrurg> ZzZombo: ;; impacts multi-dispatch. It doesn't make positionals optional.

[02:37] <vrurg> ZzZombo: they would only be ignored by dispatcher when selecting a candidate.

[02:38] <ZzZombo> Thanks!

[03:24] *** Doc_Holliwood left
[04:05] *** hythm left
[05:05] *** benchable6 left
[05:05] *** statisfiable6 left
[05:05] *** bloatable6 left
[05:05] *** committable6 left
[05:05] *** unicodable6 left
[05:05] *** coverable6 left
[05:05] *** nativecallable6 left
[05:05] *** greppable6 left
[05:05] *** notable6 left
[05:05] *** reportable6 left
[05:05] *** releasable6 left
[05:05] *** quotable6 left
[05:05] *** squashable6 left
[05:05] *** shareable6 left
[05:05] *** committable6 joined
[05:05] *** unicodable6 joined
[05:05] *** nativecallable6 joined
[05:06] *** shareable6 joined
[05:06] *** quotable6 joined
[05:06] *** releasable6 joined
[05:06] *** bloatable6 joined
[05:06] *** coverable6 joined
[05:06] *** benchable6 joined
[05:07] *** notable6 joined
[05:07] *** greppable6 joined
[05:08] *** reportable6 joined
[05:08] *** statisfiable6 joined
[05:08] *** squashable6 joined
[05:35] <ZzZombo> m: given 'asdfgghj'.comb -> @c { @c.roll.say for @c }

[05:35] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «a␤g␤a␤d␤f␤j␤j␤f␤»

[05:35] <ZzZombo> "If $count is supplied: Returns $count elements chosen at random and without repetition from the invocant."

[05:36] <ZzZombo> What is wrong, the docs or the function?

[05:37] <ZzZombo> Oops, I accidentally used `roll`, sorry.

[05:37] <ZzZombo> m: given 'asdfgghj'.comb -> @c { @c.pick.say for @c }

[05:37] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «f␤h␤f␤h␤d␤g␤d␤a␤»

[05:37] *** roit joined
[05:54] *** stanleytam joined
[07:00] *** veesh joined
[08:02] *** kensanata joined
[08:32] *** abraxxa joined
[08:33] *** chloekek joined
[08:37] <chloekek> I used to put distribution sources in PERL6LIB and I did need that for something, but I don't remember what I needed it for.

[08:37] <chloekek> Now I only put the precompiled repository in PERL6LIB and it works just fine. I don't need both the precompiled and sources in PERL6LIB.

[08:41] <chloekek> I also apparently don't need to put the sources in PERL6LIB when invoking install-dist.p6.

[08:44] <SmokeMachine> Could you guy give your opinion on this, please? https://github.com/FCO/Red/issues/406

[08:49] *** sena_kun joined
[08:53] <xkr47> my simple (first) calculator in raku: https://gist.github.com/xkr47/ed2ca66636c487bf6ef44385b88c0e7e

[08:53] <chloekek> Oh, I know why I got the issue yesterday with the install-dist.p6-generated executables using the wrong template. I was accidentally using Rakudo 2017.01.

[08:54] *** El_Che joined
[09:01] <moritz> that's, like, well matured :D

[09:03] <SmokeMachine> moritz: yes, knowing where your code touches the database is a good thing about using .^all...

[09:06] *** abraxxa left
[09:06] *** abraxxa joined
[09:07] *** Altai-man_ joined
[09:10] *** sena_kun left
[09:18] <abraxxa> can I use a module only when a specific multi MAIN is called? Grammar::Tracer in my case

[09:21] <lizmat> use statements are lexical, so just use Grammar::Tracer inside the specific multi ?

[09:21] <lizmat> or are you worried about the loading overhead ?

[09:22] <chloekek> That would still cause the compilation to load the module. If you don't want that to happen you can use require instead of use.

[09:22] *** sena_kun joined
[09:22] <chloekek> E.g. if it is an optional dependency.

[09:22] <abraxxa> lizmat: I tried that but it didn't work

[09:23] <abraxxa> require works, thanks

[09:23] <lizmat> could you be more specific ?   "it didn't work" is not really descriptive or helpful  :-(

[09:24] <moritz> the problem is likely that Grammar::Tracer does magic at import time

[09:24] *** Altai-man_ left
[09:24] *** roit left
[09:25] <lizmat> if so, then I don't understand why "require" solves this 

[09:25] <moritz> so after the require, you likely need to trigger that magic somehow

[09:25] <moritz> wait

[09:25] <moritz> I think Grammar::Tracer modifies the meta class for the 'grammar' declarator

[09:25] <moritz> so it needs to be loaded at compile time

[09:26] <moritz> so the multi MAIN distinction is way too late

[09:26] <lizmat> that's what I thought

[09:26] <chloekek> p6: my $f = { 123; }; $f .= (); say $f

[09:26] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «No such method '' for invocant of type 'Block'. Did you mean any of these?␤    kv␤    of␤    so␤␤  in block <unit> at <tmp> line 1␤␤»

[09:27] <lizmat> that's looks worthy of an issue  :-)

[09:29] <chloekek> p6: my $f = { 123; }; $f .= CALL-ME; say $f

[09:29] <camelia> rakudo-moar 0b8ede6c4: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Block'␤  in block <unit> at <tmp> line 1␤␤»

[09:30] <lizmat> that one feels like DIHWIDT

[09:30] <lizmat> afk for a few hours&

[09:31] *** xinming_ left
[09:35] *** xinming_ joined
[09:38] *** stanleytam left
[10:03] *** xinming_ left
[10:03] *** xinming_ joined
[10:10] *** sena_kun left
[10:23] *** scimon joined
[10:24] *** MitarashiDango[m joined
[10:26] <scimon> Morning all. I had a weird idea that actually worked : https://gist.github.com/Scimon/b589a25527b46e591e931287bcea8089

[10:35] <abraxxa> lizmat: it was always loaded, also when running the other multi sub

[10:36] <abraxxa> moritz: but require in the multi MAIN does work for me

[10:37] <abraxxa> can I somehow exclude some tokens from being included in the match object of a grammar?

[10:43] *** Doc_Holliwood joined
[11:00] <SmokeMachine> scimon: what's weird on that?

[11:00] <jnthn> abraxxa: Just do <.foo> instead of <foo>

[11:01] <abraxxa> jnthn: to exclude a token from the match object?

[11:02] <jnthn> Yes; <.foo> is non-capturing

[11:07] <abraxxa> where can I find that in the docs?

[11:10] <abraxxa> jnthn: thanks, works nicely

[11:11] <MitarashiDango[m> It's mentioned here, not sure where else: https://docs.raku.org/language/regexes#Subrules

[11:11] <abraxxa> jnthn: I'd also need to implement an include feature in the grammar. I'm currently trying to rewrite a token into a method that load the included file and uses the whole grammar itself to parse it and return the match object. Does that sound sane?

[11:19] <jnthn> abraxxa: Hm, you mane like calling a <.include($foo)> and then method include($foo) { MyGrammar.parsefile($foo) } ? Not sure that's going to go too well since the return value of something called as a token will be used to indicate how much was parsed, and so completely bizare things might happen :)

[11:19] <jnthn> I'd attach it with `make` or some such

[11:46] <MasterDuke> xkr47: cool. btw, if you wanted to, https://gist.github.com/xkr47/ed2ca66636c487bf6ef44385b88c0e7e#file-calc-raku-L97-L108 could be `my $mul = do given $<unit> { when 'w' { 60 * 60 * 24 * 7 } ... }`

[11:49] *** joule joined
[11:53] *** perlmaros joined
[11:54] *** perlmaros left
[11:56] *** perlmaros joined
[11:59] *** ZzZombo joined
[12:02] <xkr47> MasterDuke, awesome, thanks! all tips appreciated!

[12:03] <xkr47> one thing I couldn't figure out is why the `<numb> \h* $<unit> = ...` part would fail to parse if enter any spaces between the number and the unit..

[12:13] <abraxxa> jnthn: yes that's what I tried because I thought not parsing it somehow simpler to include the files before parsing it to the grammar

[12:16] <xkr47> how do I get the type of some expression

[12:35] <abraxxa> jnthn: instead of rule include { '. ' <.value> } I tried method include (:$include) { $include ~~ rx/ '. ' <value> / }

[12:50] <MasterDuke> m: say 5.WHAT; say "a".WHAT; say <1 a>.WHAT # xkr47

[12:50] <camelia> rakudo-moar 1c5d010f8: OUTPUT: «(Int)␤(Str)␤(List)␤»

[12:53] <chloekek> p6: say 5.WHAT.WHAT

[12:53] <camelia> rakudo-moar 1c5d010f8: OUTPUT: «(Int)␤»

[12:54] <abraxxa> jnthn: P6opaque: no such attribute '$!pos' on type Match in a Slip when trying to get a value

[12:54] <abraxxa> I have NO idea what that should mean

[12:56] *** mensvaga joined
[12:56] <lizmat> abraxxa: it is a roundabout way of saying you somehow had a Match type object, rather than am instance somewhere under the hood

[12:57] <jnthn> abraxxa: Means the object you returned didn't meet the protocol that you have to if you're interacting with the grammar engine

[13:01] *** MasterDuke left
[13:02] <abraxxa> jnthn: http://paste.scsys.co.uk/587135

[13:02] <abraxxa> that's the code in question

[13:03] <jnthn> And the Slip would be an Empty, when the `if` ends up False

[13:07] <abraxxa> i thought so, but what do I need to return in this case?

[13:07] <abraxxa> I thought the return value of the last boolean op is sufficient

[13:07] <abraxxa> aka doesn't match, try the next one

[13:10] <jnthn> No, it'd have to be a failed Match of some kind, maybe make a `token failed { <!> }` and then return self.failed

[13:10] <jnthn> Though as noted, I'm still very skeptical about returning a Match object from a different parse as if it were part of this one

[13:11] <jnthn> I'd really just attach it with `make`, like I suggested before

[13:15] *** MasterDuke joined
[13:19] *** sena_kun joined
[13:22] *** Altai-man_ joined
[13:24] <abraxxa> The Match type is documented as return on successful match

[13:25] <abraxxa> jnthn: can you please point me at an example as I haven't gotten my head around make/made examples in the docs

[13:25] *** sena_kun left
[13:26] *** HoboWithAShotgun joined
[13:28] *** [Coke] joined
[13:28] *** [Coke] left
[13:28] *** [Coke] joined
[13:29] *** Doc_Holliwood left
[13:37] *** lucasb joined
[13:40] *** abraxxa left
[13:41] *** abraxxa joined
[13:54] *** stoned75 joined
[13:55] <xkr47> MasterDuke, thx!

[13:55] <MasterDuke> np

[13:56] <xkr47> it's not in https://docs.perl6.org/type/Mu ?

[14:03] <MasterDuke> it's not a method of Mu. it's a special compiler thing

[14:04] <MasterDuke> https://docs.perl6.org/language/typesystem#Reserved_method_names

[14:17] <chloekek> I have an issue where precompiling a module that uses NativeCall can't find NativeCall, but requireing it at runtime succeeds.

[14:19] <chloekek> With the command: perl6 install-dist.p6 --from=sourcedir --to=inst#targetdir

[14:20] <chloekek> The error message says it can't find NativeCall in inst#targetdir, but does not mention anything else, even if I set PERL6LIB first to include inst#<rakudo>/share/perl6/core

[14:22] <scimon> SmokeMachine: I just hadn't really thought about it (and not seen it done in a number of the frontend tools I've seen). 

[14:24] <xkr47> ok, thx!

[14:24] <Ulti> scimon: it might be nice to actually have a trait like "is main" that actually does that wiring

[14:28] <scimon> Well you can just export as MANDATORY too. But I figured having it as an optional import means you can test your plugin code without pollution. 

[14:28] *** Geth joined
[14:28] <scimon> Anyway going to do a little Advent calendar about it and command line tools with Raku in general.

[14:29] <chloekek> Turns out adding inst#targetdir to PERL6LIB magically fixes it.

[14:34] <tyil> chloekek: nice

[14:36] <japhb> scimon: Why explicitly have a MAIN for --help in your gist?  That's builtin.  Or was it just because you wanted -h instead of -? for the short version?

[14:38] <chloekek> tyil: Not really, I have no idea why this is necessary, and why it would cause the lookup to suddenly find NativeCall

[14:39] <japhb> scimon: Also, I'm not sure what's the plugin case you're talking about ... just exporting MAIN multis from a module?  If so, that's how doing an "app module" (so your bin script can just be "#!/usr/bin/env perl6\nuse App::Foo;") generally works.  And yeah, making an optional MAIN export is a way to do testing -- that's an old Python trick IIRC.

[14:56] <scimon> Basically yes. I generally always specify the help endpoint for completeness. 

[14:59] <scimon> But the point with the plugin idea is if you look at something like Zef or App::Mi6 (two Raku CLI tools I use) both have all the MAIN sub's in a single file (one is the main script the other a CLI module). I was going to explain that you could split your MAIN code out allowing for easier additions of new functionality. 

[15:08] <japhb> scimon: Ah, I see.  Yeah, that might be useful to point out.

[15:09] <xinming_> m: my $x = "hello.ext";  my $s = ($x ~~ S/".ext"$/ ~ ".new-ext"); $s.say;

[15:09] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $s in declaration to initialize itself␤at <tmp>:1␤------> 3 $s = ($x ~~ S/".ext"$/ ~ ".new-ext"); $7⏏5s.say;␤    expecting any of:␤        double quotes␤        infix…»

[15:10] <xinming_> m: my $x = "hello.ext";  my $s = (($x ~~ S/".ext"$/) ~ ".new-ext"); $s.say;

[15:10] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $s in declaration to initialize itself␤at <tmp>:1␤------> 3s = (($x ~~ S/".ext"$/) ~ ".new-ext"); $7⏏5s.say;␤    expecting any of:␤        double quotes␤        infix…»

[15:10] <xinming_> m: my $x = "hello.ext";  my $s = (($x ~~ S/".ext"$ /) ~ ".new-ext"); $s.say;

[15:10] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $s in declaration to initialize itself␤at <tmp>:1␤------> 3 = (($x ~~ S/".ext"$ /) ~ ".new-ext"); $7⏏5s.say;␤    expecting any of:␤        infix stopper␤        term␤»

[15:10] <xinming_> Anyway to fix this as a one liner?

[15:10] <japhb> The bigger plugin thing that I need to get around to at some point is being able to determine all installed modules in a namespace and load them all at BEGIN time, without iterating over *all* installed modules (including those *not* in the namespace), because, well, that's slow.

[15:11] <xinming_> 3: my $x = "hello.ext";  my $s = ($x ~~ s/".ext"$/.new-ext/; $s.say;

[15:11] <xinming_> m: my $x = "hello.ext";  my $s = ($x ~~ s/".ext"$/.new-ext/; $s.say;

[15:11] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $s in declaration to initialize itself␤at <tmp>:1␤------> 3;  my $s = ($x ~~ s/".ext"$/.new-ext/; $7⏏5s.say;␤    expecting any of:␤        term␤»

[15:11] <xinming_> I know this worked, But I just want to use  S//

[15:11] <xinming_> m: my $x = "hello.ext";  $x ~~ s/".ext"$/.new-ext/; $x.say;

[15:11] <camelia> rakudo-moar dd2f072d6: OUTPUT: «hello.new-ext␤»

[15:12] <xinming_> m: my $x = "hello.ext";  my $s = (($x ~~ S/ ".ext" $ /) ~ ".new-ext"); $s.say;     #  <--  Is this a bug?

[15:12] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $s in declaration to initialize itself␤at <tmp>:1␤------> 3 (($x ~~ S/ ".ext" $ /) ~ ".new-ext"); $7⏏5s.say;     #  <--  Is this a bug?␤    expecting any of:␤        in…»

[15:17] <xinming_> ignore me, I just realized that  S///  also need the replace ment.

[15:20] *** abraxxa left
[15:20] *** abraxxa joined
[15:22] *** abraxxa left
[15:23] *** sena_kun joined
[15:23] <SmokeMachine> scimon: so you prefer adding .^grep and .^map then not adding any alias?

[15:23] *** sena_kun left
[15:24] *** Altai-man_ left
[15:32] *** robertle joined
[15:34] <ZzZombo> m: say |$(1,2,3)

[15:34] <camelia> rakudo-moar dd2f072d6: OUTPUT: «123␤»

[15:34] <ZzZombo> m: say $(1,2,3)

[15:34] <camelia> rakudo-moar dd2f072d6: OUTPUT: «(1 2 3)␤»

[15:34] <ZzZombo> m: say ^'1.0'

[15:34] <camelia> rakudo-moar dd2f072d6: OUTPUT: «0..^1.0␤»

[15:35] <ZzZombo> m: say 1 .= 'Str'

[15:35] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3say 1 .= 'Str'7⏏5<EOL>␤»

[15:35] <scimon> Well as long as they are aliases then I don't see why not. If they simplify things that are done a lot it makes sense.

[15:35] <ZzZombo> m: say 1 .= 'Str'()

[15:35] <camelia> rakudo-moar dd2f072d6: OUTPUT: «Cannot modify an immutable Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[15:35] <scimon> SmokeMachine: ^

[15:36] <ZzZombo> m: say my Int $a .= 'new'()

[15:36] <camelia> rakudo-moar dd2f072d6: OUTPUT: «0␤»

[15:38] <ZzZombo> m: say 1 mod 0

[15:38] <camelia> rakudo-moar dd2f072d6: OUTPUT: «Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[15:38] <ZzZombo> LTA message detected.

[15:40] <ZzZombo> m: say 0x1 ~< 1

[15:40] <camelia> rakudo-moar dd2f072d6: OUTPUT: «Cannot resolve caller infix:«~<»(Int:D, Int:D); none of these signatures match:␤    (Str:D \a, Int:D \b --> Str:D)␤    (str $a, int $b)␤  in block <unit> at <tmp> line 1␤␤»

[15:40] <ZzZombo> m: say 0x1 +< 1

[15:40] <camelia> rakudo-moar dd2f072d6: OUTPUT: «2␤»

[15:41] <ZzZombo> m: say 0x1 +< 1 xx 4

[15:41] <camelia> rakudo-moar dd2f072d6: OUTPUT: «(2 2 2 2)␤»

[15:42] <SmokeMachine> scimon: thanks

[15:43] *** chloekek left
[15:46] <ZzZombo> m: my $x = 1 | 2 | Inf;say ^Inf.pick ~~ $x

[15:46] <camelia> rakudo-moar dd2f072d6: OUTPUT: «True␤»

[15:46] <ZzZombo> m: my $x = 1 | 2 | Inf;say ^Inf.pick ~~ $x

[15:46] <camelia> rakudo-moar dd2f072d6: OUTPUT: «True␤»

[15:46] <japhb> ZzZombo: You can /msg the bot, so that you don't have to clutter the channel

[15:53] *** pmurias joined
[15:53] <ZzZombo> m: my $x = 1 | 2 | Inf;my $y = (-3..3).pick;say $y, ' ', $y ~~ $x # how can I know what case exactly is met in the junction?

[15:53] <camelia> rakudo-moar dd2f072d6: OUTPUT: «-3 False␤»

[16:00] <stoned75> does anyone know if Pod-Utilities was initially written for Documentable ?

[16:02] <stoned75> I found something strange in Documentable and I would fix it by modifying Pod::Utilities::textify-guts() :-}

[16:07] <SmokeMachine> lizmat: Hi! thank you for your PR! Is ` ` `raku working on github already?

[16:08] <SmokeMachine> \`\`\`raku

[16:08] <AlexDaniel> I don't think so

[16:08] <SmokeMachine> sorry, I dont know how to scape that...

[16:08] <tadzik> ```raku? :)

[16:11] <lizmat> SmokeMachine: ah, maybe I was too eager... 

[16:12] *** perlmaros left
[16:12] <lizmat> SmokeMachine: should I submit another PR that is less eager ?

[16:13] *** perlmaros joined
[16:19] <SmokeMachine> lizmat: could you, please?

[16:19] <lizmat> sure, no pb

[16:24] <AlexDaniel> squashable6: status

[16:24] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 3 days and ≈11 hours (2019-11-16 UTC-12⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:24] <AlexDaniel> can somebody step in and figure out what we can do with the squashathon this month? :)

[16:25] <Geth> ¦ problem-solving/master: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[16:25] <Geth> ¦ problem-solving/master: 2ff1bb88f0 | Add the RT tracker dismantling plan

[16:25] <Geth> ¦ problem-solving/master: 57f7054251 | Mention others too

[16:25] <Geth> ¦ problem-solving/master: 57f2e8ebb8 | Mention that perl6/ will likely not be “perl6/” later

[16:25] <Geth> ¦ problem-solving/master: d66c6ff877 | Merge pull request #126 from perl6/old-issue-tracker

[16:25] <Geth> ¦ problem-solving/master: review: https://github.com/perl6/problem-solving/compare/6d0c078ea04d...d66c6ff8776f

[16:30] <lizmat> SmokeMachine: done

[16:49] *** cognomin_ joined
[16:53] *** perlmaros left
[16:54] *** perlmaros joined
[16:54] *** perlmaros left
[16:57] *** scimon left
[17:00] *** joule left
[17:14] *** pmurias left
[17:15] <stoned75> ok so I have a fix to solve the duplicate entries in https://docs.perl6.org/routine.html

[17:16] <stoned75> so ones due to whitespace at least, a couple are due to typos

[17:17] <stoned75> *the ones

[17:24] *** sena_kun joined
[17:28] <stoned75> oh there are still some :}

[17:30] <lizmat> and another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2019/11/11/2019-45-red-alert/

[17:37] <cpan-raku> New module released to CPAN! Gnome::Glib (0.15.1) by 03MARTIMM

[17:38] <lizmat> that'll be in next weeks  :-)

[17:38] <lizmat> dinner&

[17:43] <sena_kun> SmokeMachine, o/

[17:43] <sena_kun> are you around?

[17:43] <SmokeMachine> sena_kun: hi!

[17:43] <sena_kun> \o/

[17:44] <SmokeMachine> lizmat: thank you!

[17:45] <sena_kun> SmokeMachine, I am now writing an advent post involding Red, and wanted to ask what the solutions to "hash your password" problem. With raw postgresql (for example) I can use pgcrypt extension, but when it comes to what to _safely_ do using models, I am not sure. Any suggestions?

[17:46] *** donaldh joined
[17:46] <SmokeMachine> sena_kun: the way I was thinking of suggesting it was using `has $.password is column{ :deflate(&encript-it) }`...

[17:48] <sena_kun> SmokeMachine, it is NYI, right?

[17:48] <SmokeMachine> https://github.com/FCO/Red/issues/141

[17:48] <SmokeMachine> sena_kun: I dont think so...

[17:51] <sena_kun> hmm, I probably want to use something like https://github.com/skinkade/p6-crypt-argon2 manually...

[17:52] <SmokeMachine> yes...

[17:52] <SmokeMachine> with :deflate

[17:53] <sena_kun> SmokeMachine, why do I need it? I mean, if I manually hash and save a pass and then manually hash things again to check

[17:55] <SmokeMachine> sena_kun: if you use :deflate you will not need to hash it when save... (maybe not enough to use it...)

[17:57] <SmokeMachine> sena_kun: https://www.irccloud.com/pastebin/4ktGMRGc/

[18:02] <SmokeMachine> sena_kun:  https://www.irccloud.com/pastebin/NR5o6KvB/

[18:03] <SmokeMachine> I think it should auto deflate...

[18:03] <sena_kun> SmokeMachine, oh, I see what you mean, so it is partially implemented... I still think for an example it'd be easier to do it directly though.

[18:07] <sena_kun> SmokeMachine, a stupid question, but of course input data is escaped, right?

[18:10] <SmokeMachine> sena_kun: it's binded if the container is rw... https://www.irccloud.com/pastebin/hpC4r7BN/

[18:12] <sena_kun> SmokeMachine, sorry, I meant the other thing, I mean, special characters are escaped in input data?

[18:12] <SmokeMachine> sena_kun: what kind of special char?

[18:13] <sena_kun> quotes

[18:14] *** donaldh left
[18:15] <SmokeMachine> sena_kun: I don't remember of doing that... I relly on binding for not being SQL injected

[18:15] *** donaldh joined
[18:16] <SmokeMachine> relie? 

[18:16] <sena_kun> *rely

[18:20] *** donaldh left
[18:22] *** newbie joined
[18:22] *** newbie left
[18:26] *** abraxxa joined
[18:26] *** donaldh joined
[18:29] *** abraxxa left
[18:30] *** abraxxa joined
[18:31] *** rindolf joined
[18:31] <rindolf> hi all

[18:31] *** donaldh left
[18:34] *** abraxxa left
[18:35] *** abraxxa joined
[18:36] *** wildtrees joined
[18:36] <guifa> sena_kun I think I found the bugs, I’ll should probably have an update for date formatting coming out tonight or tomorrow am

[18:37] *** wildtrees left
[18:37] <sena_kun> guifa, your efforts are awesome, but I used a simple hash, so don't hurry too much.

[18:38] *** Kaiepi joined
[18:38] <guifa> don’t tell me that lol.  If I don’t have a reason to finish stuff it ends up going undone haha

[18:39] <sena_kun> guifa, I'll gladly patch things to remove that one `# SUPER DIRTY WE WANT TO USE CLDR HERE` comment I left. :P

[18:40] *** wildtrees joined
[18:45] *** chloekek joined
[18:49] <guifa> Eeeew okay yeah I’m going to help you get rid of it.

[18:49] *** joule joined
[19:00] *** donaldh joined
[19:05] *** donaldh left
[19:22] *** Altai-man_ joined
[19:24] <SmokeMachine> sena_kun: isn't that enough?

[19:24] *** sena_kun left
[19:35] <guifa> Is there any way to allow subclasses access to private attributes of parent classes withouth allowing outside access?   The “trust” model unfortunately only works if you know the classes in advance / defined in the same file.  

[19:36] <Altai-man_> guifa, roles?

[19:37] *** abraxxa left
[19:38] *** abraxxa joined
[19:39] <guifa> p6: role A { has $!a = 1 }; class B does A { method b { self!A::a } }; say B.new.b

[19:39] <camelia> rakudo-moar dd2f072d6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot call private method 'a' on package A because it does not trust B␤at <tmp>:1␤------> 3}; class B does A { method b { self!A::a7⏏5 } }; say B.new.b␤    expecting any of:␤        met…»

[19:39] <El_Che> releasable6: status

[19:39] <releasable6> El_Che, Next release will happen when it's ready. There are no known blockers. 248 out of 470 commits logged (⚠ 9 warnings)

[19:39] <releasable6> El_Che, Details: https://gist.github.com/85ff4b080e28b2937780bf4fa0cb15a2

[19:41] <Altai-man_> guifa, you don't need fancy accessors with roles...

[19:41] <Altai-man_> m: role A { has $!a = 1 }; class B does A { method b { $!a } }; say B.new.b

[19:41] <camelia> rakudo-moar dd2f072d6: OUTPUT: «1␤»

[19:42] <guifa> I … did not realize private role attributes are accessible like that.  I figured scope would be identical to subclasses

[19:42] <Altai-man_> no, roles are composed into classes, so privates and non-privates are available just as they'd be in a class itself

[19:43] <Altai-man_> if you want some chunk of thing including privates to be pluggable, you stick it into a role. but classes are classes, they keep their stuff, so `protected` is not really necessary.

[19:43] *** donaldh joined
[19:45] <guifa> altai-man++ Makes sense, I think before hand the only time I had worried about stuff like that was dealing with overlapping method names, where the namespace reference was necessary

[19:47] *** donaldh left
[19:55] *** donaldh joined
[19:59] *** donaldh left
[20:03] <xkr47> Altai-man_, could the error message be improved?

[20:03] <Altai-man_> xkr47, sorry, which one?

[20:03] <xkr47> the one guifa triggered

[20:04] <xkr47> I'm a noob, just asking :)

[20:04] <Altai-man_> xkr47, improved how? I mean, technically it says truth: you can't call a private from A because it doesn't trust B its privates.

[20:05] <xkr47> could it recognize it's a role and give a tip on how to proceed?

[20:05] <Altai-man_> I suspect that "Maybe you want to compose a role" is a bit too much of a suggestion. And `trusts` syntax (`self!A::a`) is not that basic, I think in general people get to know roles earlier than trusts.

[20:05] <xkr47> but yeah don't want to harass, just thinking

[20:06] <xkr47> ok thanks

[20:06] <Altai-man_> ah, you mean that A is a role already...

[20:06] <xkr47> yeah

[20:08] <Altai-man_> xkr47, you can try to suggest a patch and see what core devs think. :)

[20:08] <xkr47> sorry I'm way too noob for that

[20:08] * xkr47 bows gracefuly

[20:08] <xkr47> +l

[20:09] <Altai-man_> let me see...

[20:12] <Altai-man_> I must say I am really confused right now

[20:13] <Altai-man_> oh, no

[20:18] <Altai-man_> xkr47, I know how to patch that up, if you want, you can just clone / change a couple of lines in rakudo code under my guidance and send a PR. :)

[20:21] <stoned75> ok I think I removed all duplicate entries from doc's routines.html, due to incorrect processing, but I need a small patch to Pod-Utilities and another to Documentable

[20:22] <xkr47> Altai-man_, I'm nowhere close writing that kind of code myself, I'm a perl5 guy with a raku calculator :D

[20:24] <Altai-man_> xkr47, it does not look too different compared to normal raku code though. :) but it is up to you... the message is at https://github.com/rakudo/rakudo/blob/master/src/core.c/Exception.pm6#L1312 and it is called at https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L5915

[20:26] <Altai-man_> so I think in `message` method you can have a conditional depending on a new attribute, something like `has $.is-source-role`.

[20:27] <Altai-man_> and then you add initialization code for the new attribute at caller

[20:28] <Altai-man_> what I am not sure about is how to check that $methpkg is a role, but someone more knowlegeable than me knows that for sure

[20:34] *** joule left
[20:41] *** donaldh joined
[20:44] *** kensanata left
[20:55] *** rindolf left
[20:59] <MasterDuke> somebody like vrurg would probably have a better answer, but maybe `!nqp::istype($methpkg.HOW, Perl6::Metamodel::ConcreteRoleHOW)`?

[21:00] <abraxxa> jnthn: I can't get the Grammar actions to work, still 'Cannot assign to a readonly variable or a value' in the line I try to create a Match object from the contents of the included file contents

[21:03] *** Altai-man_ left
[21:17] *** wildtrees left
[21:17] <timotimo> abraxxa: you probably need to "$/ is copy" in your signature

[21:18] <abraxxa> timotimo: the problem was that I named the variable $/ like most of the examples, changing it to something else and using either it or $/ where appropriate made it work

[21:19] <abraxxa> now I have a solution that puts the code directly in the grammar like https://stackoverflow.com/questions/51354035/how-to-implement-recursive-grammar-in-perl6 and one that uses action objects

[21:20] *** pmurias joined
[21:24] <abraxxa> I can't find a good example of how to traverse a complex Match object, is there one?

[21:27] <guifa> abraxxa: in generally you just treat it like hashes/positionals

[21:31] <Altreus> is there a build that produces a raku yet?

[21:31] <Altreus> Sorry for not keeping up :)

[21:32] <abraxxa> Altreus: 2019.10.1 has a raku executable

[21:34] <abraxxa> WTF is ~$?

[21:35] <Altreus> I see I see

[21:37] *** lucasb left
[21:39] <tobs> abraxxa: &prefix:<~> is stringification. A sole $ might be the anonymous state variable.

[21:39] <abraxxa> tobs: the search on the docs page doesn't find it

[21:39] <Altreus> 10.1 released?

[21:40] <Altreus> cos it's not here: https://github.com/rakudo/rakudo/releases

[21:40] <Altreus> wait that's rakudo

[21:40] <tobs> ~$<something> is a common expression which takes a submatch for 'something' from the current match and stringifies it.

[21:40] <tobs> abraxxa: doesn't find what? The prefix tilde is there: https://docs.perl6.org/routine/~

[21:43] *** donaldh left
[21:47] <abraxxa> tobs: I searched for ~$ which returns nothing

[21:47] <abraxxa> ~ alone returns three matches

[21:49] <tobs> I know no interpretation of `~$` except as stringification of the variable called `$`. It's a compound expression, that's why it's not in the docs.

[21:50] <tobs> For the same reason, you will not find matches for `$counter++`, but for the ++ operator and for variables separately.

[21:51] <tobs> (I do wonder where ~$ would be useful, though.)

[21:55] *** chloekek left
[21:56] <Altreus> looks like the sort of thing that compiles but 99% of the time is a typo

[21:59] <abraxxa> tobs the example was ~$<key>

[21:59] <tobs> aha!

[21:59] <abraxxa> tobs: but as you said searching for a specific variable name doesn't make sense

[22:00] <abraxxa> from here: https://tpm-regex.perl6.party/#/47

[22:00] <tobs> https://docs.perl6.org/syntax/$$SOLIDUS#Named_attributes

[22:00] <abraxxa> defining the signature as $/ but using $<> makes absolutely no sense to me

[22:00] <tobs> that syntax $<key> is short for $/<key>, but I only found it just now via the docs index because I knew what to look for...

[22:01] <tobs> well, "short"

[22:01] <abraxxa> the shortcut is only confusing, saving a single letter is not worth it, especially in tutorials!

[22:02] <abraxxa> Perl 6 makes the Perl mistakes again after 20 years and thinks renaming helps but it doesn't

[22:04] <abraxxa> and what the hell is $<row>».made.hash?

[22:04] <abraxxa> using 'cool' characters nobody can type is not saving time either

[22:05] <[Coke]> Sorry you're having trouble with the Raku synta, abraxxa.

[22:08] <tobs> takes the 'row' submatches (probably something repeated in the regex) and calls .made to each of them, then puts the list of results in a hash. ».&method is like a map which uses a method and is allowed to parallelize.

[22:14] <abraxxa> tobs: and how should you type that?

[22:17] <tobs> altgr+y on a German keyboard?

[22:18] <tobs> alternatively you can use >> instead of »

[22:21] *** titsuki joined
[22:22] *** wildtrees joined
[22:22] <abraxxa> US keyboard here

[22:23] <tobs> m: if "abc" ~~ / [ $<key>=. ]+ c $ / { say $<key>>>.from }

[22:23] <camelia> rakudo-moar dd2f072d6: OUTPUT: «[0 1]␤»

[22:24] <tobs> there is also a page with suggestions on how to type unicode, if you want to https://docs.perl6.org/language/unicode_entry

[22:30] <abraxxa> I'm getting knowwhere which constructing something useful from the match object of the grammar...

[22:33] *** Xliff joined
[22:33] <Xliff> o/

[22:35] <guifa> With Pod6, there’s a way to link simple information about a class/method/etc using #| or #=  I’ve been interleaving documentation via larger =begin pod / =end pod blocks, is there any sort of a shorthand to link that for the .WHY?  I feel a bit repetitive/overkill with the information in #| or #= 

[22:36] <AlexDaniel> abraxxa: there's no raku executable yet

[22:37] <AlexDaniel> even in the next release

[22:37] <AlexDaniel> it seems that having one is a bit more difficult than it sounds

[22:37] <MasterDuke> guifa: i'd suggest asking tbrowder

[22:37] <AlexDaniel> but PRs welcome :)

[22:38] <abraxxa> AlexDaniel: I have one

[22:38] <abraxxa> AlexDaniel: /opt/rakudo-pkg/bin/raku

[22:38] <AlexDaniel> mm maybe that's because you're using rakudo packages by El_Che? :)

[22:38] <MasterDuke> abraxxa: i think El_Che is doing that manually

[22:39] <AlexDaniel> building rakudo from source won't give you that

[22:39] <guifa> .tell tbrowder: anyway to link larger pod blocks to classes/subs for use in .WHY?  I feel a bit repetitive using both for each class in some of my files

[22:39] <tellable6> guifa, I'll pass your message to tbrowder

[22:39] <abraxxa> this one https://nxadm.github.io/rakudo-pkg/#os-repositories

[22:41] <tbrowder> .guifa

[22:43] <tbrowder> guifa: i don't think so at the moment, but if you can give me an example of what you want as an issue that would be helpful

[22:44] <tbrowder> i have one PR ready to merge (after next release) that might help a bit

[22:45] <tbrowder> it prvides a way to keep your formatting in the leading declarator blocks instead of giving one giant string

[22:47] *** wildtrees left
[22:48] <abraxxa> Why do I get 'Too few positionals passed; expected 1 argument but got 0' for method inface ($/) { make foo => 'bar' }

[22:50] <TreyHarris> abraxxa: the error is being thrown from the line where that method is defined? not some other line?

[22:50] <guifa> tbrowder: take a look at https://gist.github.com/alabamenhu/b7179258120923a917970eb1c2d12ab1

[22:50] <abraxxa> the make line

[22:52] <tobs> it is because `make foo => 'bar'` passes a named argument foo with value 'bar' to make, instead of passing a pair as a positional argument.

[22:52] <abraxxa> tobs: where is the difference to https://tpm-regex.perl6.party/#/47 ?

[22:52] <abraxxa> row

[22:53] <tobs> the first fix that comes to mind is itemizing `make $(foo => 'bar')`

[22:53] <guifa> tbwoder: not necessarily thinking that syntax, but maybe something similar to that one could even be expanded to allow explicit references to classes/methods, e.g. “the new-item method {{CLDR:Calendars.NEW-ITEM|makes a new calendar item}} and should only be used be used internally and not be end users”, which would link just the “makes a new calendar item” text to the NEW-ITEM method.

[22:54] <tobs> abraxxa: you'll not like the answer. There `$<header>.made` is not a valid variable name, so the parser knows not to turn that into a named argument.

[22:55] <abraxxa> tobs: there is a rule named header

[22:55] <abraxxa> tobs: the example in https://docs.perl6.org/language/grammars#Action_objects is not very different

[22:56] <abraxxa> method pair

[22:56] <TreyHarris> putting just the parens around the make(...) args should be enough to fix it

[22:56] *** mid_home left
[22:56] <tbrowder> guifa: that hurts my brain! can you take your example and show results you would like to see for the .WHY

[22:56] <TreyHarris> well, double parens, in this case, since you're using a bare `foo`

[22:57] <guifa> tbrowder: sure.  Lemme edit the gist

[22:57] *** xinming_ left
[22:58] <abraxxa> TreyHarris: nope, tried that already

[22:58] <TreyHarris> the sub form of make() takes a Mu. A pair is a Mu (anything is, really). But it is exactly one thing. By doing `make foo => bar` you're either giving make two things or you're....

[22:59] <abraxxa> doc examples that don't compile don't make much sense!

[22:59] <TreyHarris> abraxxa: doubling the parens still gives you the `expected ` argument but got 0`?? How about `make($(foo => 'bar'))`?

[22:59] <tbrowder> guifa: the PR is the first step in try to get more user-desired formatting in the declarator blocks, including the name of the object being attached to

[23:00] <tbrowder> abraxxa: is there a token for the method?

[23:00] <guifa> tbrowder: my proposal is a bit different, but your current PR would definitely be relevant

[23:00] <tobs> The difference is that `foo` is a valid variable name, whereas `$<header>.made` is not. So `foo => bar` in a call context becomes a named argument of the callee, whereas `$<header>.made => 'bar'` in the same situation becomes a positional Pair argument.

[23:00] *** xinming_ joined
[23:00] <TreyHarris> m: sub bleeb (Mu $x) { say $x.WHAT }; bleeb(3 => 4); bleeb(foo => 4)

[23:00] <camelia> rakudo-moar dd2f072d6: OUTPUT: «(Pair)␤Too few positionals passed; expected 1 argument but got 0␤  in sub bleeb at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:01] <TreyHarris> ^

[23:01] <abraxxa> I also tried make 'foo' => 'bar';

[23:02] <abraxxa> m: sub bleeb (Mu $x) { say $x.WHAT }; bleeb('foo' => 'bar')

[23:02] <camelia> rakudo-moar dd2f072d6: OUTPUT: «(Pair)␤»

[23:03] <abraxxa> so => in Perl 6 doesn't stringify the lhs?

[23:03] <TreyHarris> abraxxa:no.

[23:04] <TreyHarris> => is the Pair constructor.  Well, *a* Pair constructor.

[23:06] <abraxxa> I want a hash

[23:06] <guifa> tbrowder: I updated the gist: https://gist.github.com/alabamenhu/b7179258120923a917970eb1c2d12ab1

[23:07] <TreyHarris> m: my $x = 'foo' => 'bar'; my $y = :foo('bar'); my $z = $(foo => 'bar'); say $x === $y; say $x === $z;

[23:07] <camelia> rakudo-moar dd2f072d6: OUTPUT: «True␤True␤»

[23:08] <TreyHarris> m: my %g = %(foo => 'bar', bat => 'baz'); say %g<bat>; say %g<foo>;

[23:08] <camelia> rakudo-moar dd2f072d6: OUTPUT: «baz␤bar␤»

[23:11] <abraxxa> I *hate* it when there are more than one options available!

[23:11] <TreyHarris> In a hash constructor like %( ... ), it will stringify the LHS of pairs like you are used to.

[23:12] <TreyHarris> abraxxa: the inventor of the language's nom de plume is literally the abbreviation of "There's More Than One Way To Do It", I'm afraid.

[23:13] <tbrowder> guifa: thnx. it may be possible, but not so easy. one step at a time. frankly, i see the declarator blocks' utility as more in extracting pod with p6doc, but we'll see.

[23:14] <guifa> Yeah, that’s what I meant by it’s different from your PR.  Definitely not anything to rush into

[23:14] <TreyHarris> Also, it so happens that most of the "automagic" DWIMminess in Perl 5 becomes much better-defined syntactic sugar in Perl 6 without adding boilerplate code simply by having various options like this

[23:15] <tbrowder> i need to add some more doc utility with raku's input args, but so far, in a limited search, i haven't found where the args are defined.

[23:15] <TreyHarris> m: my %g = %(foo => 'bar', bat => 'baz'); .WHAT.say for %g # for instance

[23:15] <camelia> rakudo-moar dd2f072d6: OUTPUT: «(Pair)␤(Pair)␤»

[23:18] <TreyHarris> Oops, Raku, I mean. First time I've slipped on this channel I think...

[23:24] <TreyHarris> abraxxa: Probably the biggest difference between the two languages that you seem to have run into at least a couple times looking at the channel backlog is that Perl 5 mostly let you add useless lists of stuff anywhere and would only take what was needed, ignoring the rest, though sometimes trying different ways to accept otherwise ambiguous input in favor of any that would use up everything written.

[23:24] <TreyHarris> This made for extremely liberal acceptable input, but created a lot of bugs. Raku will at least warn you about a useless use of "Sink" context, and more often will actually throw an exception when you give it too much stuff. It just doesn't have those ambiguities that Perl 5 does, and that's a good think, though it can be a pain while learning the language.

[23:25] <TreyHarris> Erm... no, not the biggest difference. One of the biggest differences in language design perspectives aside from overall modernization.

[23:31] <abraxxa> the most criticized feature of Perl 5 are sigils and exactly those where taken to 11...

[23:33] <TreyHarris> abraxxa: you mean via the twigils? Because, unlike Perl 5, the sigils are now 100% normalized and invariate

[23:36] <TreyHarris> They're now much more like correlatives in languages that have them. (Like, if "Who" and "You" and "Where" and "There" could be taken as a starting pattern, so "Alwhere" meant everywhere 'alwho' everyone and "Thy" meant "for this reason", and so on. Lots of languages have this and when it's perfectly regularized, it's fantastic, even though it seems strange in English.)

[23:38] <TreyHarris> er, s/this reason/that reason/. heh

[23:40] <abraxxa> TreyHarris: yes, whatever they are called

[23:41] <abraxxa> I like that and @ stays an @ even when you access a single item

[23:41] <abraxxa> but you can do my $foo = ('a', 'b', 'c'); which should be a syntax error

[23:41] <TreyHarris> abraxxa: but my $foo = ['a', 'b', 'c'c] should be okay?

[23:42] <abraxxa> that's an arrayref

[23:42] <TreyHarris> so is the thing you just wrote

[23:42] <TreyHarris> abraxxa: the ideas that the twigils represent are either inaccessible via most languages, or acccessible using clumsy pseudo-routines like "global" or pseudo-namespaces like "next::"

[23:42] <abraxxa> if such a thing still exists yes, if you now can pass an array object as one positional parameter then no

[23:44] <TreyHarris> abraxxa: I don't know what the yes/no refers to, but you can choose on either the calling or the caller side which is the default behavior, but if you do nothing special on either side, yes, an array object is a single positional parameter

[23:45] <TreyHarris> It sounds like you might benefit from reading through both the Signatures and Captures pages of the docs; it may clarify things here quite a bit

