[00:01] <Xliff_> my my $hf = "/usr/include/blah/blorp.h"; $a = "unit package Blah::Blorp"; $a = s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ $/[0] }"; $a.say

[00:01] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; $a = "unit package Blah::Blorp"; $a = s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ $/[0] }"; $a.say

[00:01] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3my $hf = "/usr/include/blah/blorp.h"; 7⏏5$a = "unit package Blah::Blorp"; $a = s[␤»

[00:01] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a = s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ $/[0] }"; $a.say

[00:01] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤(Any)␤  in block <unit> at <tmp> line 1␤»

[00:02] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a = s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ $0 }"; $a.say

[00:02] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤(Any)␤  in block <unit> at <tmp> line 1␤»

[00:02] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a = s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ 1 }"; $a.say

[00:02] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤(Any)␤  in block <unit> at <tmp> line 1␤»

[00:02] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a = s[^^ ( 'unit package ' <[ \w : ]>+ ) ';' $$] = "\n\n### { $hf }\n{ $/[0] }"; $a.say

[00:02] <camelia> rakudo-moar ed8f5141f: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤(Any)␤  in block <unit> at <tmp> line 1␤»

[00:03] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a ~~ s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ 1 }"; $a.say

[00:03] <camelia> rakudo-moar ed8f5141f: OUTPUT: «␤␤### /usr/include/blah/blorp.h␤1␤»

[00:03] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a ~~ s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ $0 }"; $a.say

[00:03] <camelia> rakudo-moar ed8f5141f: OUTPUT: «␤␤### /usr/include/blah/blorp.h␤unit package Blah::Blorp␤»

[00:03] <Xliff_> m: my $hf = "/usr/include/blah/blorp.h"; my $a = "unit package Blah::Blorp"; $a ~~ s[^^ ( 'unit package ' <[ \w : ]>+ ) $$] = "\n\n### { $hf }\n{ $0 };"; $a.say

[00:03] <camelia> rakudo-moar ed8f5141f: OUTPUT: «␤␤### /usr/include/blah/blorp.h␤unit package Blah::Blorp;␤»

[00:36] <Geth> ¦ doc: kjpye++ created pull request #3092: Change link for Math::Constants to point to the top of the repo.

[00:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/3092

[00:55] <ZzZombo> lizmat: great, now I'm happy again. ;)

[00:55] <tellable6> 2019-11-17T21:57:06Z #raku <lizmat> ZzZombo https://github.com/rakudo/rakudo/commit/ed8f5141fe

[00:58] *** hythm joined
[02:55] <Geth> ¦ doc: c14f5e2d96 | (Stoned Elipot)++ | doc/Type/Method.pod6

[02:55] <Geth> ¦ doc: Fix preposition

[02:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c14f5e2d96

[04:17] *** hythm left
[04:25] *** b2gills joined
[05:20] *** xinming_ left
[05:20] *** xinming_ joined
[05:45] *** Xliff joined
[05:48] *** rindolf joined
[06:06] <Geth> ¦ doc: 565f07df04 | (Kevin Pye)++ | doc/Language/math.pod6

[06:06] <Geth> ¦ doc: Change link for Math::Constants to point to the top of the repo.

[06:06] <Geth> ¦ doc: 

[06:06] <Geth> ¦ doc: Previously this pointed into the "pulls" area, which could be confusing for git or github neophytes.

[06:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/565f07df04

[06:06] <Geth> ¦ doc: 49813fff75 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/math.pod6

[06:06] <Geth> ¦ doc: Merge pull request #3092 from kjpye/math

[06:07] <Geth> ¦ doc: 

[06:07] <Geth> ¦ doc: Change link for Math::Constants to point to the top of the repo.

[06:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/49813fff75

[06:29] *** jmerelo joined
[07:04] *** kensanata joined
[07:15] *** jaldhar_ joined
[07:18] *** abraxxa joined
[07:23] *** abraxxa left
[07:24] *** abraxxa joined
[07:29] *** abraxxa left
[07:29] *** abraxxa joined
[07:30] <Geth> ¦ doc: Kaiepi++ created pull request #3093: Document Metamodel::Documenting

[07:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/3093

[07:35] *** jmerelo left
[08:09] *** mid_home left
[08:20] *** robertle joined
[08:30] <lizmat> Xliff: self is *always* decontainerized.  having \SELF: as the invocant, make sure that it is *not* decontainerized

[08:30] <lizmat> Xliff: in ZzZombo's example, the subst-rw needed access to the invocant's container

[08:31] <lizmat> Xliff: because Any.ASSIGN-POS was decontainerizing, it tried to change the immutable string in it, which fails

[08:33] <lizmat> Xliff: you can work around this for earlier, unfixed versions by adding an ASSIGN-POS method to the StrIdx role

[08:55] <Geth> ¦ doc: 7e90dd91d9 | (Ben Davies)++ | 2 files

[08:55] <Geth> ¦ doc: Document Metamodel::Documenting

[08:55] <Geth> ¦ doc: 

[08:55] <Geth> ¦ doc: This also makes "documenting's" and "metarole" valid words.

[08:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7e90dd91d9

[08:55] <Geth> ¦ doc: 410f7215fd | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[08:55] <Geth> ¦ doc: Merge pull request #3093 from Kaiepi/metamodel-documenting

[08:55] <Geth> ¦ doc: 

[08:55] <Geth> ¦ doc: Document Metamodel::Documenting

[08:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/410f7215fd

[09:03] *** sena_kun joined
[09:05] *** scimon joined
[09:08] *** Altai-man_ joined
[09:10] *** sena_kun left
[09:28] *** pmurias joined
[09:29] <pmurias> [Coke]: hi

[09:33] *** daxim joined
[09:37] *** pmurias left
[09:39] *** pmurias joined
[10:03] *** mid_laptop joined
[10:19] *** stdev joined
[10:31] *** steale joined
[10:33] *** Kaiepi joined
[10:34] *** stdev left
[10:41] *** mid_laptop left
[11:09] *** sena_kun joined
[11:10] *** Altai-man_ left
[11:31] *** mid_laptop joined
[11:33] *** steale left
[11:33] <Altreus> SmokeMachine: seems to work!

[11:33] <Altreus> I got a «false» in my JSON :)

[11:33] <SmokeMachine> Altreus: :)

[11:35] <Altreus> Does it work if it doesn't have a type? Or is there a default type?

[11:44] *** pmurias left
[11:46] <SmokeMachine> Altreus: sorry, what do you mean?

[11:49] *** steale joined
[11:54] <Altreus> SmokeMachine: I mean, is it OK if «$!attr.type.^name» is ... you know, Any, or Mu, or whatever?

[11:54] <Altreus> I don't recall whether it's required for a column to have a data type

[11:55] <Altreus> (in code)

[11:55] *** pmurias joined
[11:55] <Altreus> Maybe it defaults to Str

[12:12] *** joule joined
[12:13] *** joule left
[12:15] *** rindolf left
[12:21] *** rindolf joined
[12:30] *** scimon left
[12:31] *** rindolf left
[12:34] *** mensvaga joined
[12:39] *** jaldhar_ left
[12:52] *** cpan-raku joined
[12:52] *** cpan-raku left
[12:52] *** cpan-raku joined
[12:57] *** mid_laptop left
[13:08] *** lucasb joined
[13:08] *** Altai-man_ joined
[13:10] *** sena_kun left
[13:12] *** joule joined
[13:23] *** mid_laptop joined
[13:23] *** mensvaga left
[13:57] *** rindolf joined
[14:09] *** Guest85410 joined
[15:04] *** steale left
[15:04] *** steale joined
[15:09] *** sena_kun joined
[15:10] *** Altai-man_ left
[15:25] *** steale left
[15:45] <Kaiepi> m: class Foo { my atomicint $next-index = 0; has Int:D $.index = $next-index⚛++ }; say Foo.new.index; say Foo.new.index; say Foo.new.index;

[15:45] <camelia> rakudo-moar ed8f5141f: OUTPUT: «0␤1␤2␤»

[15:45] <Kaiepi> m: class Foo { my atomicint $next-index = 0; has Int:D $.index = $next-index⚛++ }; BEGIN say Foo.new.index; BEGIN say Foo.new.index; BEGIN say Foo.new.index;

[15:45] <camelia> rakudo-moar ed8f5141f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Lexical with name '$next-index' has wrong type. real type 8 wanted type…»

[15:47] <Kaiepi> there are other ways to deal with what i'm trying to do with $!index, but is there a bug here?

[15:52] *** ilbelkyr joined
[16:04] <[Coke]> pmurias: oops.

[16:05] * [Coke] digs up last email thread with pmurias 

[16:10] * [Coke] gets back on track.

[16:11] *** robertle left
[16:11] *** pmurias left
[16:44] *** kensanata left
[16:46] *** ab6tract joined
[16:51] <ab6tract> p6: class Foo { my $next-index = 0; has Int:D $.index = $next-index++ }; BEGIN Foo.new.index.say; BEGIN Foo.new.index.say

[16:51] <camelia> rakudo-moar ed8f5141f: OUTPUT: «0␤1␤»

[16:51] <ab6tract> Kaiepi looks like a bug to me

[16:54] <japhb> ab6tract, Kaiepi: I use that same idiom in one of my modules; precomp doesn't break it, but I haven't tried BEGIN time within the same module yet (I only create objects in that class at runtime).

[16:57] <ab6tract> yeah BEGIN is not a context i would expect much utility from for this kind of singleton stuff, to be honest. but the fact that it compiles with regular but bails with atomic does seem to point to a hidden issue

[17:00] <ab6tract> japhb: also, nice to see you! how have things been?

[17:02] *** finanalyst joined
[17:03] <ab6tract> jnthn: is the issue Kaiepi flagged perhaps a compilation order issue somehow?

[17:05] <jnthn> ab6tract: Well, I guess, but it's not like it's going to preserve the value of a lexical over the compilation boundary anyway; that only happens if it's closed over.

[17:05] <jnthn> So even if it worked it'd still not really work.

[17:05] <ab6tract> fair enough :)

[17:06] *** chloekek_ joined
[17:06] <jnthn> But yeah, it's worth reporting

[17:06] <Kaiepi> aight

[17:06] <jnthn> 'cus I guess it'd show up in some other context somehow

[17:06] <ab6tract> they usually do :(

[17:08] *** Altai-man_ joined
[17:10] *** sena_kun left
[17:18] *** Kaiepi left
[17:31] *** Kaiepi joined
[17:35] <El_Che> still more people on #perl6, mm

[17:45] <Altreus> more like #denial

[17:46] <mspo> who can do the forward

[17:50] <El_Che> mst?

[17:54] *** mid_laptop left
[18:10] <cxreg> cj: hey bud

[18:11] <cxreg> I forget, did I do something with MySQL?

[18:13] <cxreg> oh wow, like 9 years ago :D

[18:16] *** robertle joined
[18:17] <cxreg> cj: did you ever figure that out?

[18:27] *** wildtrees joined
[18:40] *** stoned75 joined
[18:49] <cj> cxreg: nopers

[18:49] <cj> have you ever gotten DBIish to work at all?

[18:50] <cj> Looks like Salvador Oritz and Rob Taylor have been doing not too distant historical commits.

[18:51] <cj> trying to build from f359c84f93dfd69ce9cd5533204a3a895f4dfe2e

[18:52] <cj> [DBIish] # Connect failed with error DBIish: DBDish::mysql needs 'mysqlclient', not found

[18:52] <cj> sudo apt-get install default-libmysqlclient-dev

[18:52] <cj> [DBIish] # DBIish: DBDish::mysql needs 'mysqlclient', not found

[18:53] <cj> but it's installing, so maybe it worked this time.

[18:59] *** MasterDuke joined
[19:05] *** mid_home joined
[19:06] *** maettu joined
[19:08] *** ab6tract left
[19:10] *** Altai-man_ left
[19:17] <El_Che> cj: don't keep us in suspense

[19:18] *** abraxxa left
[19:18] <cj> I'm not trying to!

[19:18] <cj> I brought up a VM to do this development on so I don't break my workstation

[19:19] <El_Che> :)

[19:19] <cj> right now, the vm can't start ...

[19:19] <cj> Nov 18 11:16:53 raku systemd[1]: mariadb.service: Failed with result 'exit-code'.

[19:19] <cj> gee, that's super useful.

[19:20] <cj> running the mysqld myself manually launches the db no problem.

[19:20] <El_Che> systemctl status mariadb

[19:20] <El_Che> journalctl -xv

[19:20] <cj>    Active: failed (Result: exit-code) since Mon 2019-11-18 11:16:53 PST; 3min 28s ago

[19:20] <cj> the line above was from journalctl -xv

[19:20] *** abraxxa joined
[19:20] <cj>   Process: 32203 ExecStartPre=/usr/bin/install -m 755 -o mysql -g root -d /var/run/mysqld (code=exited, status=127)

[19:21] * [Coke] has a long running bot on a MOO server called CJ, so I keep going "ah, what's the bot doing"

[19:22] * [Coke] waves at cj.

[19:22] <mspo> wow a MOO

[19:22] <cj> hello Mr. Coke

[19:23] <mspo> [Coke]: is it called Mu ? :)

[19:33] *** sena_kun joined
[19:39] *** wildtrees left
[19:39] * [Coke] hURLS https://en.wikipedia.org/wiki/LambdaMOO

[19:40] <[Coke]> mspo: that server has been up since I was in college, so late 80s/early 90s

[19:43] <lizmat> And another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2019/11/18/2019-46-guidance/

[19:45] <mspo> [Coke]: I believe it

[19:45] <mspo> [Coke]: I knew a few MUD survived but MUSH and MOO were pretty rare even back then

[19:47] *** Guest85410 left
[19:50] <mspo> MUDs were the only part of the internet that I liked when I first got on

[19:50] <mspo> BBS were better otherwise ;)

[19:53] <cj> looks like installing a new systemd fixed it.  I've loaded my schema and am now getting an error on connect

[19:54] <cj> my $dbh = DBIish.connect('mysql', :socket</var/run/mysqld/mysqld.sock>,:database<grammar>, :user<grammaradm>, $password);

[19:54] <cj> Too many positionals passed; expected 2 arguments but got 3

[20:02] <MasterDuke> cj: maybe try `:$password`

[20:03] <cj> $ echo $?

[20:03] <cj> 0

[20:03] <cj> thanks, MasterDuke!

[20:04] <MasterDuke> np

[20:23] *** pmurias joined
[20:28] <[Coke]> For me, BBS were junior high, MUDs were college. (High school was probably AOL)

[20:29] <cj> ICQ in HS for me.  1455395 is me

[20:29] <cj> but IRC throughout.  Probably just the last year of middle school, though.

[20:31] <cj> oh, I guess it was "junior high" for me, too.  I switched from Poulsbo Middle School (PMS) to Kingston Junior High (KJH) in my ninth grade year, so I collectively refer to 7th-9th as either MS or JH.  Life's so complicated.

[20:33] <[Coke]> the MOO/MUD in college were because that clique hated early 90s IRC.

[20:33] <[Coke]> (and were coming off a mainframe chat app)

[20:34] <cj> anyhow, here's some mysql failure to get your mind off of that...

[20:34] <cj> https://gist.github.com/cjac/3f6c306381e7aec3b9c56882382a3481

[20:34] <cj> the connect succeeds, but not the ... is it a do()...?

[20:35] <cj> no, it's a prepare()

[20:43] <cj> DBIish: DBDish::mysql needs 'mysqlclient', not found

[20:55] *** wamba joined
[21:00] *** joule left
[21:00] *** Kaiepi left
[21:01] *** pmurias left
[21:04] *** Kaiepi joined
[21:06] *** rindolf left
[21:08] *** Altai-man_ joined
[21:11] *** sena_kun left
[21:12] *** pmurias joined
[21:19] <cj> maybe it has something to do with the rename of the client libraries in recent releases of debian?

[21:20] <cj> is it looking for a .a or a .so there?

[21:20] <cj> same error changing mysqlclient to mariadbclient:

[21:20] <cj> https://gist.github.com/cjac/466fee33bd1052d60a989f685c6b0984

[21:21] <cj> anyone know what `NativeLibs::Searcher.at-runtime()` is?

[21:24] *** wildtrees joined
[21:30] *** asdfan joined
[21:31] *** asdfan left
[21:36] <cj> is it looking through dynamic libraries or static libraries?

[21:38] <cj> ah.  I needed to put libmariadb.so.3 in there instead of mysqlclient or mariadbclient

[21:39] <cj> yes.  Now it's working.  My schemes are coming to fruition...

[21:43] <cj> https://gist.github.com/cjac/97177ebedfbbf3d6672b882f5f806aec

[21:56] *** pmurias left
[22:10] <Xliff> cj: Heh. Now try Red.

[22:11] <cj> Xliff: yeah, I'm looking at it now

[22:11] <Xliff> :)

[22:18] *** pmurias joined
[22:20] *** abraxxa left
[22:20] *** abraxxa joined
[22:20] *** abraxxa left
[22:23] *** chloekek_ left
[22:25] <cj> are there tools to auto-generate the raku code from the database schema?

[22:26] <Xliff> No, but I was working on something like that.

[22:26] <cj> okay.  I'm trying to create a model for typed feature structures and grammars which use them

[22:27] *** wamba left
[22:27] <cj> these feature structures use inheritence, so maybe RDBMS are not the best way to model them...

[22:27] <cj> https://web.stanford.edu/group/cslipublications/cslipublications/site/1575862603.shtml

[22:27] <cj> but whatever.  I think I can make inheritence work with triggers and views

[22:29] <Xliff> See: https://github.com/Xliff/perl6-Parser-Sql

[22:29] <Xliff> Not it's not even close to being finished.

[22:30] <cj> here's the schema definition in case you want to use it as an example :-)

[22:30] <cj> https://github.com/LLC-Technologies-Collier/syntactic-theory/tree/master/sql

[22:31] *** finanalyst left
[23:09] <Xliff>  m: IO::Spec::Unix.new.say

[23:09] <camelia> rakudo-moar ed8f5141f: OUTPUT: «IO::Spec::Unix.new␤»

[23:09] <Xliff>  m: IO::Spec::Unix.splitdir("/a/b/c").say

[23:09] <camelia> rakudo-moar ed8f5141f: OUTPUT: «( a b c)␤»

[23:09] <Xliff>  m: IO::Spec::Unix.splitdir("/a/b/c").elems.say

[23:09] <camelia> rakudo-moar ed8f5141f: OUTPUT: «4␤»

[23:10] *** sena_kun joined
[23:11] *** Altai-man_ left
