[00:30] <AlexDaniel> https://github.com/topics/raku 181 repos vs 372 repos https://github.com/topics/perl6

[00:59] <AlexDaniel> .seen Xliff

[00:59] <tellable6> AlexDaniel, I saw Xliff 2019-10-25T06:53:50Z in #raku-dev: <Xliff> o/

[01:22] *** Kaiepi left
[01:22] *** Kaiepi joined
[01:24] *** AlexDani` joined
[01:29] *** AlexDaniel left
[01:30] *** AlexDani` is now known as AlexDaniel

[01:30] *** AlexDaniel left
[01:30] *** AlexDaniel joined
[02:00] *** chloekek left
[02:56] <Geth_> ¦ perl6.org: 53e304963d | (Aleks-Daniel Jakimenko-Aleksejev)++ | 8 files

[02:56] <Geth_> ¦ perl6.org: More Raku changes

[02:56] <Geth_> ¦ perl6.org: 

[02:56] <Geth_> ¦ perl6.org: Still leaving some places where more work is required, but now most

[02:56] <Geth_> ¦ perl6.org: pages talk about Raku.

[02:56] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/53e304963d

[03:05] *** wamba joined
[03:24] <SmokeMachine> Does it make sense? https://www.irccloud.com/pastebin/TukGCFCK/

[03:34] *** squashable6 left
[03:35] *** squashable6 joined
[04:35] *** notable6 left
[04:35] *** releasable6 left
[04:35] *** quotable6 left
[04:35] *** squashable6 left
[04:35] *** evalable6 left
[04:35] *** tellable6 left
[04:35] *** benchable6 left
[04:35] *** bloatable6 left
[04:35] *** greppable6 left
[04:35] *** unicodable6 joined
[04:35] *** quotable6 joined
[04:36] *** bisectable6 joined
[04:37] *** squashable6 joined
[04:37] *** statisfiable6 joined
[04:37] *** cpan-raku left
[04:37] *** notable6 joined
[04:37] *** shareable6 joined
[04:37] *** greppable6 joined
[04:37] *** reportable6 joined
[04:37] *** coverable6 joined
[04:38] *** bloatable6 joined
[04:38] *** tellable6 joined
[04:38] *** benchable6 joined
[04:38] *** committable6 joined
[04:38] *** evalable6 joined
[04:38] *** releasable6 joined
[04:38] *** nativecallable6 joined
[04:38] *** cpan-raku joined
[04:38] *** cpan-raku left
[04:38] *** cpan-raku joined
[05:04] <rba> AlexDaniel: I know. Subdomains are not completely ready yet.

[06:37] *** unicodable6 left
[06:37] *** releasable6 left
[06:37] *** nativecallable6 left
[06:37] *** tellable6 left
[06:37] *** notable6 left
[06:37] *** greppable6 left
[06:37] *** reportable6 left
[06:37] *** quotable6 left
[06:37] *** statisfiable6 left
[06:37] *** bisectable6 left
[06:37] *** coverable6 left
[06:37] *** shareable6 left
[06:37] *** evalable6 left
[06:37] *** benchable6 left
[06:37] *** bloatable6 left
[06:37] *** committable6 left
[06:37] *** squashable6 left
[06:38] *** benchable6 joined
[06:38] *** committable6 joined
[06:38] *** releasable6 joined
[06:38] *** quotable6 joined
[06:38] *** squashable6 joined
[06:38] *** statisfiable6 joined
[06:39] *** notable6 joined
[06:39] *** bisectable6 joined
[06:39] *** bloatable6 joined
[06:39] *** coverable6 joined
[06:39] *** tellable6 joined
[06:39] *** evalable6 joined
[06:39] *** unicodable6 joined
[06:39] *** shareable6 joined
[06:39] *** nativecallable6 joined
[06:40] *** reportable6 joined
[06:40] *** greppable6 joined
[06:43] *** wamba left
[08:03] <xinming> SmokeMachine: How to do multi column sort BTW?

[08:14] *** wamba joined
[08:50] *** wamba left
[09:03] *** hankache joined
[09:31] *** hankache left
[09:39] <xinming> m: sub test ($y) { my @x; if $y { @x = <a b c> }; @x; }; test(True);

[09:39] <camelia> rakudo-moar efd7146c4: ( no output )

[09:39] <xinming> m: sub test ($y) { my @x; if $y { @x = <a b c> }; @x; }; test(True).say;

[09:39] <camelia> rakudo-moar efd7146c4: OUTPUT: «[a b c]␤»

[09:40] *** hankache joined
[09:40] <xinming> In this example, what is the perl6 way to write  `my @x; if $y { @x = ... }; do-something with @x

[09:55] *** hankache left
[09:55] <SmokeMachine> red: use Post;  .say for Post.^all.sort: { .title, .body } # xinming, I don’t remember if it’s implemented...

[10:13] <ZzZombo> m: my @x = if 'asd' { 1,2,3 };say @x

[10:13] <camelia> rakudo-moar efd7146c4: OUTPUT: «5===SORRY!5===␤Word 'if' interpreted as a listop; please use 'do if' to introduce the statement control word␤at <tmp>:1␤------> 3my @x = if7⏏5 'asd' { 1,2,3 };say @x␤Unexpected block in infix position (two terms in a row)␤at <tmp>:…»

[10:13] <ZzZombo> m: my @x = do if 'asd' { 1,2,3 };say @x

[10:13] <camelia> rakudo-moar efd7146c4: OUTPUT: «[1 2 3]␤»

[10:13] <ZzZombo> m: my @x = do if False { 1,2,3 };say @x

[10:13] <camelia> rakudo-moar efd7146c4: OUTPUT: «[]␤»

[11:01] *** redable joined
[11:01] <SmokeMachine> red: use Post;  .say for Post.^all.sort: { .title, .body } # xinming, I don’t remember if it’s implemented...

[11:01] <redable> SmokeMachine, https://gist.github.com/04f6e837f9ceae97552442c55bf6f988

[11:02] <SmokeMachine> red: use Post;  my $*RED-DEBUG = True; .say for Post.^all.sort: { .title, .body }

[11:02] <redable> SmokeMachine, https://gist.github.com/33537e9ee8955dbee07e2bd5d6cdeb6e

[11:02] <SmokeMachine> xinming: yes, it's working... ^^

[11:13] *** redable left
[11:37] <tbrowder> hi, raku people!

[11:38] <tbrowder> is it true that in a substituion like:  s/some stuff/any literal/

[11:39] *** xinming left
[11:40] *** xinming joined
[11:41] <tbrowder> any char between the second pair of forward slashes is valid as a substitution (except another forward slash which must be escaped)?

[11:44] <SmokeMachine> red: use Post;  say Post.^all.pick

[11:45] *** redable joined
[11:46] <tbrowder> m: s/foo/'/

[11:46] <camelia> rakudo-moar efd7146c4: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[11:46] <tbrowder> s/foo/bar/

[11:47] <tbrowder> m: s/foo/bar/

[11:47] <camelia> rakudo-moar efd7146c4: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[11:49] <SmokeMachine> red: use Post;  say Post.^all.pick

[11:49] <tbrowder> m: s/foo/bar/; .say

[11:49] <camelia> rakudo-moar efd7146c4: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤(Any)␤  in block <unit> at <tmp> line 1␤»

[11:49] <redable> SmokeMachine, Post.new(id => 1, title => "test1", body => "body-test1", deleted => 0, created => DateTime.new(2019,10,22,12,0,19.196347), tags => Set.new(""))␤

[11:50] <tbrowder> m: $_ = 'foo'; s/foo/'/; .say

[11:50] <camelia> rakudo-moar efd7146c4: OUTPUT: «'␤»

[11:50] <SmokeMachine> red: use Post;  my $*RED-DEBUG = Trur; say Post.^all.pick

[11:50] <redable> SmokeMachine, 04===SORRY!04=== Error while compiling /code/./code.p6␤Undeclared name:␤    Trur used at line 2. Did you mean 'True'?␤␤

[11:50] <SmokeMachine> red: use Post;  my $*RED-DEBUG = True; say Post.^all.pick

[11:50] <redable> SmokeMachine, https://gist.github.com/9942a10ffb9399b49f1bc37bf9ccddf6

[11:50] <SmokeMachine> red: use Post;  my $*RED-DEBUG = True; say Post.^all.pick: 5

[11:50] <redable> SmokeMachine, https://gist.github.com/5e15679012d7084c5b3a8d39d6b5a4d5

[11:51] <tbrowder> m: $_ = 'foo'; s/foo/%/;.say

[11:51] <camelia> rakudo-moar efd7146c4: OUTPUT: «%␤»

[11:52] *** redable left
[11:52] <tbrowder> $_ = 'foo';s/foo/%(/;.say

[11:53] <tbrowder> m: $_ = 'foo'; s/foo/%(/.say

[11:53] <camelia> rakudo-moar efd7146c4: OUTPUT: «5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3$_ = 'foo'; s/foo/%(/.say7⏏5<EOL>␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3$_ = 'foo'; s/foo/%(/.say7⏏5<EOL>␤    expecting any of:␤     …»

[11:53] <SmokeMachine> xinming: ^^

[11:54] <tbrowder> m: $_='foo';s/foo/%\(/.say

[11:54] <camelia> rakudo-moar efd7146c4: OUTPUT: «｢foo｣␤»

[11:57] <tbrowder> m: $_='foo';s/foo/\%(/;.say

[11:57] <camelia> rakudo-moar efd7146c4: OUTPUT: «%(␤»

[11:58] <tbrowder> m: $_='foo';s/foo/\%\(/;.say

[11:58] <camelia> rakudo-moar efd7146c4: OUTPUT: «%(␤»

[11:59] <tbrowder> m: $_='f';s/f/\a/;.say

[11:59] <camelia> rakudo-moar efd7146c4: OUTPUT: «␤»

[12:00] <Geth_> ¦ doc: tusindfryd++ created pull request #3076: Fix broken links

[12:00] <Geth_> ¦ doc: review: https://github.com/perl6/doc/pull/3076

[12:02] <tbrowder> so what should we do about the docs? i think we need some more specifics in the section on substitution about some restrictions on the substitution part. at the moment there are none.

[12:05] <Ulti> is there a spec for the current Raku things somewhere? like file endings, I know they changed from the initial discussion

[12:06] <Ulti> I'm working on a little tool to port all of my existing modules so figure I can also upload it for everyone else

[12:06] <Ulti> unless some brave soul has already done this?

[12:08] *** chloekek joined
[12:11] *** wamba joined
[12:22] <MasterDuke> Ulti: https://github.com/perl6/problem-solving/blob/master/solutions/language/Path-to-Raku.md has some info. i thought there was a doc explicitly targeting module authors that jnthn++ wrote, but i either can't find it or am imagining things

[12:29] <Geth_> ¦ doc: b839acebab | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[12:29] <Geth_> ¦ doc: start section on substitution RHS restrictions

[12:29] <Geth_> ¦ doc: 

[12:29] <Geth_> ¦ doc: More specifics need to be added.

[12:29] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/b839acebab

[12:46] *** chloekek left
[12:49] <tbrowder> .ask tony-o is there any way to put a unique(cola, colb) constraint using Xoos (SQLite)?

[12:49] <tellable6> tbrowder, I'll pass your message to tony-o

[12:59] <SmokeMachine> red: model MultColUnique { has $.a is column; has $.b is column; ::?CLASS.^add-unique-constraint: { .a, .b } }; $*RED-DEBUG = True; MultColUnique.^create-table

[13:00] <SmokeMachine> :(

[13:12] <AlexDaniel> SmokeMachine: well, the bot is offline :P

[13:15] *** squashable6 left
[13:16] *** squashable6 joined
[13:21] *** lucasb joined
[13:34] *** ggoebel left
[13:45] <xinming> SmokeMachine: How about NULLS FIRST, NULLS last

[14:08] <SmokeMachine> AlexDaniel: yes... probably my machine is sleeping...

[14:09] <SmokeMachine> xinming: what do you mean?

[14:15] <xinming> SmokeMachine: SELECT ... ORDER BY xx ASC NULLS FIRST, yyy DESC NULLS LAST;

[14:18] <SmokeMachine> Myo

[14:18] <SmokeMachine> Nyi

[14:28] <xinming> So, If you plan to implement it, what the idea will it be?

[14:28] <xinming> Something like,    null-first(.a), null-last(.b) ?

[14:34] *** evalable6 left
[14:36] *** evalable6 joined
[15:11] <SmokeMachine> xinming: idk yet... but I’ll try to find a Raku native way of doing that...

[15:11] <SmokeMachine> xinming: have you seen the pick?

[15:13] *** evalable6_ joined
[15:13] *** evalable6_ left
[15:14] <Geth_> ¦ whateverable: b08ffef6f0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[15:14] <Geth_> ¦ whateverable: Make it stop joining #perl6 and #perl6-dev

[15:14] <Geth_> ¦ whateverable: 

[15:14] <Geth_> ¦ whateverable: With a temporary hack for evalable and tellable because these are

[15:14] <Geth_> ¦ whateverable: still needed sometimes.

[15:14] <Geth_> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/b08ffef6f0

[15:15] *** tellable6 left
[15:15] *** evalable6 left
[15:16] *** tellable6 joined
[15:16] *** evalable6 joined
[15:20] <xinming> SmokeMachine: What pick? Do you mean your answer for multi column sort?

[15:23] *** Voldenet left
[15:28] <SmokeMachine> https://github.com/FCO/Red/commit/8a36096240ebf553389058f9124a6e2af04042e5#diff-6318d75722607909c1a26b0152aa5e2fR322

[15:28] <SmokeMachine> xinming: ^^

[15:28] *** Voldenet joined
[15:28] *** Voldenet left
[15:28] *** Voldenet joined
[15:30] <Geth_> ¦ perl6.org: 19f88526cb | (Aleks-Daniel Jakimenko-Aleksejev)++ | source/downloads/index.html

[15:30] <Geth_> ¦ perl6.org: Fix bold title (Raku)

[15:30] <Geth_> ¦ perl6.org: 

[15:30] <Geth_> ¦ perl6.org: Somehow I missed it in the last commit

[15:30] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/19f88526cb

[16:34] *** chloekek joined
[16:37] <xinming> SmokeMachine: saw it, thanks, I understood how pick is implemented now.

[16:43] *** pmurias joined
[16:47] <SmokeMachine> xinming: and what do you think about this? https://github.com/FCO/Red/commit/54f290964a3a801127c3ca695cb787e1c8289ff0#diff-cefde04b1fcce745b19dca7582080fb7R132

[17:07] *** chloekek left
[17:09] <xinming> Do you mean red-do?

[17:20] <xinming> If you mean red-do, I do wish some way of support like      red-do <db1 db2> -> ($db1, $db2) { use db1 and db2 here };

[17:21] <SmokeMachine> xinming: I was meaning `red-do :transaction`

[17:21] <xinming> Ah, That way looks good

[17:23] <SmokeMachine> xinming: `red-do <db1 db2> => { ... }` will run the block twice, one for db1 and other for db2...

[17:24] <xinming> SmokeMachine: Yea, I know the red-emit/red-tap will be used to exchange data between databases. I don't think the idea is good.

[17:24] <xinming> But it seems, Since we don't have "schema" object, We can't pass schema's around.

[17:25] <SmokeMachine> xinming: and you can also do `red-do db1 => { do something with db1 }, db2 => { do something with db2 }`

[17:25] <xinming> Yea, What if db1 needs to access db2?

[17:26] <xinming> we have to do    red-do db1 => {  red-do db2 => { }; };

[17:26] <xinming> we'll need many red-do db2 if we need to query databases interacively.

[17:27] <SmokeMachine> xinming: could you please give me an example?

[17:27] *** Doc_Holliwood joined
[17:30] <SmokeMachine> I still can’t see why one would be changing the database that way...

[17:31] <SmokeMachine> Unless it’s for master/slave DBs... and for that we have a better solution planned...

[17:33] <xinming> SmokeMachine: https://termbin.com/cuf0

[17:33] <SmokeMachine> https://github.com/FCO/Red/issues/153#issuecomment-486462089

[17:33] <xinming> Not for master/slave sollution, It's just for doing things as easy as possible.

[17:34] <xinming> I think red-do within red-do is acceptable.

[17:34] <xinming> better than  doing  temp $*RED-DB = ...   all the time.

[17:35] <xinming> another question,     red-defaults db1 => \("SQLite", :default), db2 => (my $db2 = database("SQLite"));      <---   Why do we use Capture in the firt db1 arg?

[17:35] <xinming> I know the     db2 => (my $db2  = database("..."));     my $db2  is used to access $db2 later

[17:36] <xinming> does database declared with "capture" the "default" one?

[17:36] <SmokeMachine> xinming: just to show both are acceptable...

[17:38] <xinming> Got it, thanks

[17:44] <SmokeMachine> xinming: you can always do something like: `sub process-result(..., :$with = “db1”) { red-do :$with, { ... } }`

[17:44] <xinming> Yea, We can wrap them into utilty functions

[17:44] <xinming> But be better if we have them as default.

[18:28] *** tobs left
[18:38] *** tobs joined
[18:57] *** jmerelo joined
[19:29] *** jmerelo left
[19:52] *** redable joined
[19:52] *** pmurias left
[19:54] *** pmurias joined
[20:01] *** lucasb left
[20:13] *** pmurias left
[20:14] *** pmurias joined
[20:16] <discord6> <Rogue> How does one destructure a list of Pairs in a for loop?

[20:16] <discord6> <Rogue> I'm trying to give the keys and values more descriptive names

[20:22] <tobs> m: my @a = :1a, :2b, :3c; for @a -> (:key($foo), :value($bar)) { say "$foo → $bar" }

[20:22] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «a → 1␤b → 2␤c → 3␤»

[20:27] <uzl[m]> Wow, Raku never ceases to amaze me. I'd have probably done

[20:27] <uzl[m]> m: my @a = :1a, :2b, :3c; for @a -> $pair { my ($foo, $bar) = $pair.kv; say "$foo → $bar" }

[20:27] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «a → 1␤b → 2␤c → 3␤»

[20:27] *** Kaeipi joined
[20:28] *** Kaiepi left
[20:30] *** redable left
[20:30] <uzl[m]> So the loop is binding a pair to $_ but how the colon pair in the signature works?

[20:30] <AlexDaniel`> m: my @a = :1a, :2b, :3c; for @a -> (:$key, :$value) { say "$key → $value" }

[20:30] <camelia> rakudo-moar 7e3d023b4: OUTPUT: «a → 1␤b → 2␤c → 3␤»

[20:35] <uzl[m]> Oh, it's just an old named parameter but in the first case, it's also creating an alias. I've seen it in MAIN subs but didn't extrapolate it to loops.

[20:37] *** Kaiepi joined
[20:38] *** Kaeipi left
[20:53] *** Kaiepi left
[20:55] *** [Coke] left
[20:56] *** stoned75 joined
[21:00] *** Kaiepi joined
[21:07] *** [Coke] joined
[21:10] *** Kaiepi left
[21:13] *** Kaiepi joined
[21:15] *** [Coke] left
[21:20] *** [Coke] joined
[21:34] *** wamba left
[21:35] *** pmurias left
[21:42] *** pmurias joined
[21:55] <discord6> <Rogue> huh, I guess I should have thought of objects as fancy hashes

[21:56] <discord6> <Rogue> that makes sense, thanks tobs and AlexDaniel

[22:23] <timotimo> that's what happens if your class defines a Capture method

[22:49] *** pmurias left
[22:56] *** Doc_Holliwood left
[22:58] *** cpan-raku left
[22:59] *** cpan-raku joined
[22:59] *** cpan-raku left
[22:59] *** cpan-raku joined
[23:03] *** Doc_Holliwood joined
[23:33] *** Kaiepi left
[23:34] *** Kaiepi joined
