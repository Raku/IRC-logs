[00:40] *** lucasb left
[00:44] *** warriors left
[00:48] *** Kaiepi left
[00:48] *** Kaiepi joined
[01:08] *** ggoebel joined
[01:13] *** Kaiepi left
[01:15] *** Kaeipi joined
[01:32] *** warriors joined
[01:47] *** Kaeipi left
[02:04] *** hythm joined
[02:24] <hythm> AlexDaniel: "and Pakku simply depends on a bunch of modules :), yeah, no idea

[02:24] <hythm> how that's going to work, but hey it's in larva stage :)"

[02:24] <hythm> Pakku and its dependencies are installed to a custom repository and operates

[02:24] <hythm> from outside the Raku env. the only downside to this approach is using a few

[02:24] <hythm> extra MBs in the hard disk, but the benefit is great, can use all the goodies

[02:24] <hythm> in the ecosystem including all the awesome modules that will be added in the

[02:24] <hythm> future, so it should be easy to expand Pakku's features without re-inventing

[02:24] <hythm> the wheel..

[02:24] <hythm> but may be you seeing downsides that I'm not seeing, can you explain what will not work with this approach? in this case it also should be fairly easy to write helper subroutines for git, curl tar,, (the main dependencies)

[02:33] <Grinnz> hythm: this is solved in cpanm for perl by fatpacking, which means all its dependencies are copied into the script for distribution - sounds similar

[02:34] <mspo> mm fatpack

[02:36] <hythm> Grinnz, going to check cpanm, but yeah sounds very similar... but anyway a a custom repository is basically the same thing, having everything installed in one inst# repository, then include this repository or fatpack it to the script

[02:48] *** Doc_Holliwood joined
[03:23] *** ggoebel left
[03:36] *** ZzZombo_ joined
[03:38] *** ZzZombo left
[03:38] *** ZzZombo_ is now known as ZzZombo

[04:32] *** hythm left
[04:57] *** Doc_Holliwood left
[05:02] *** jmerelo joined
[05:44] *** ufobat left
[06:06] <jmerelo> releasable6: status

[06:06] <releasable6> jmerelo, Next release will happen when it's ready. 1 blocker. 7 out of 441 commits logged (⚠ 9 warnings)

[06:06] <releasable6> jmerelo, Details: https://gist.github.com/db637d5ae333fb8ed2918becd7196813

[06:21] <xkr47> hi guys.. I just wanted to say that I think the wikipedia article on Raku is the best introduction to the language out there.. I several times (years apart) tried to get started with perl6 using the homepage but got turned off by it, but the wikipedia article really hits the sweet spot for me: https://en.wikipedia.org/wiki/Raku_(programming_language) and from there moving on with https://en.wikipedia.org/wiki/Perl_6_rules and then reading synopsis etc

[06:24] *** warriors left
[06:25] *** veesh left
[06:25] *** veesh joined
[06:27] <jmerelo> xkr47: thanks!

[06:28] *** veesh left
[06:30] *** jmerelo left
[06:57] *** marcusr left
[06:58] *** marcusr joined
[06:58] *** marcusr left
[06:58] *** marcusr joined
[07:14] *** stoned75 joined
[07:17] *** veesh joined
[07:24] *** Doc_Holliwood joined
[07:25] *** stoned75 left
[07:29] *** marcusr left
[07:29] *** marcusr joined
[07:43] *** sena_kun joined
[08:32] *** MasterDuke joined
[09:06] *** xinming_ joined
[09:09] *** xinming left
[09:44] *** MasterDuke left
[09:59] *** pmurias joined
[10:03] *** xinming_ left
[10:04] *** xinming_ joined
[10:12] *** MasterDuke joined
[10:40] *** Doc_Holliwood left
[10:47] *** veesh left
[10:48] *** veesh joined
[10:55] *** ggoebel joined
[10:59] *** ggoebel left
[11:09] <xinming_> m: 'my %x; my %y^C= %x.append((x => 4)); %y.perl.say;

[11:09] <camelia> rakudo-moar b45d99d45: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 %y^C= %x.append((x => 4)); %y.perl.say;7⏏5<EOL>␤    expecting …»

[11:09] <xinming_> m: my %x; my %y^C= %x.append((x => 4)); %y.perl.say;

[11:09] <camelia> rakudo-moar b45d99d45: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    C used at line 1␤␤»

[11:09] <xinming_> m: my %x; my %y = %x.append((x => 4)); %y.perl.say;

[11:09] <camelia> rakudo-moar b45d99d45: OUTPUT: «{:x(4)}␤»

[11:09] <xinming_> m: my %x; my %y = %x.append(x => 4); %y.perl.say;

[11:09] <camelia> rakudo-moar b45d99d45: OUTPUT: «{}␤»

[11:10] <xinming_> here, when we use  %x.append(x => 4)   The example doesn't work, Anyone here expains why?

[11:10] <xinming_> m: my %x; my %y = %x.append("x" => 4); %y.perl.say;

[11:10] <camelia> rakudo-moar b45d99d45: OUTPUT: «{:x(4)}␤»

[11:11] <xinming_> This worked. so, a bit curious, how this can be distinguished.  Also, When we try to inflate a  %hash,  How can we specify it's a "pair", or a named arg?

[11:13] *** cpan-raku left
[11:15] *** luk joined
[11:16] *** cpan-raku joined
[11:16] *** cpan-raku left
[11:16] *** cpan-raku joined
[11:18] *** MasterDuke left
[11:21] *** stoned75 joined
[11:23] *** stoned75_ joined
[11:27] *** sena_kun left
[11:28] *** sena_kun joined
[11:45] *** ggoebel joined
[11:51] <xinming_> SmokeMachine: When I create a json column,    which is correct?     has Hash $.json-column is column{ :deflate{ ... },   :inflate{ ... } };       Is it possible that we use    has %.json-column is column{ ... } ???

[11:55] *** Kaiepi joined
[11:57] *** pmurias left
[12:02] *** luk left
[12:14] *** stoned75_ left
[12:14] *** stoned75 left
[12:21] *** Kaiepi left
[12:22] *** Kaiepi joined
[12:23] *** Kaiepi left
[12:27] *** Kaiepi joined
[12:31] *** MasterDuke joined
[12:40] <AlexDaniel> weekly: (we skipped it in the last weekly) On 2019-10-19 there was a squashathon dedicated to closing tickets that need tests. The winner is Altai-man, who submitted 7 pull requests! Congratulations!

[12:40] <notable6> AlexDaniel, Noted! (weekly)

[12:41] <AlexDaniel> weekly: Next squashathon is currently scheduled on 2019-11-02 (side note: we do them every month, it's just that the one in October drifted a bit closer to the end of the month)

[12:41] <notable6> AlexDaniel, Noted! (weekly)

[12:43] <AlexDaniel> weekly: We accept *your* ideas for squashathons! Do you have a cool Raku project that needs help, and you can provide enough open tickets for potential contributors to work on? Let us know on #raku!

[12:43] <notable6> AlexDaniel, Noted! (weekly)

[13:13] *** robertle_ joined
[13:24] *** lucasb joined
[13:35] *** stoned75 joined
[13:35] *** stoned75_ joined
[13:37] *** sena_kun left
[13:38] *** sena_kun joined
[13:38] <xinming_> m: "test-a" ~~ /"test-" ("a")/ && my $x = $0.Str;  ("test-a" ~~ $0).Bool.say; ("test-a" ~~ $0.Str).Bool.say;

[13:38] <camelia> rakudo-moar b45d99d45: OUTPUT: «True␤False␤»

[13:38] <xinming_> Anyone here tells me, when we smart match against a match result. What behaivor it'll be?

[13:43] <moritz> m: say ('a' ~~ Match.new).perl

[13:43] <camelia> rakudo-moar b45d99d45: OUTPUT: «Match.new(list => (), orig => "", made => Any, from => 0, hash => Map.new(()), pos => 0)␤»

[13:43] <moritz> it's the match itself

[13:44] <moritz> which is necessary to make things like $var ~~ m/.../ DWIM

[13:53] <xinming_> m: "test-a" ~~ /"test-" ("a")/ && my $x = $0.Str;  ("test-a" ~~ $0).perl.say; ("test-a" ~~ $0.Str).perl.say;

[13:53] <camelia> rakudo-moar b45d99d45: OUTPUT: «Match.new(pos => 6, made => Any, from => 5, list => (), hash => Map.new(()), orig => "test-a")␤Bool::False␤»

[13:53] <xinming_> m: "test-a" ~~ /"test-" ("a")/ && my $x = $0.Str; $0.perl.say;  ("test-a" ~~ $0).perl.say; ("test-a" ~~ $0.Str).perl.say;

[13:53] <camelia> rakudo-moar b45d99d45: OUTPUT: «Match.new(made => Any, pos => 6, hash => Map.new(()), list => (), orig => "test-a", from => 5)␤Match.new(made => Any, from => 5, hash => Map.new(()), list => (), pos => 6, orig => "test-a")␤Bool::False␤»

[13:55] <xinming_> m: "test-a" ~~ /"test-" ("a")/; ("test-a" ~~ $0).perl.say;  ("test-b" ~~ $0).perl.say;

[13:55] <camelia> rakudo-moar b45d99d45: OUTPUT: «Match.new(hash => Map.new(()), orig => "test-a", pos => 6, made => Any, list => (), from => 5)␤Match.new(orig => "test-a", hash => Map.new(()), pos => 6, from => 5, list => (), made => Any)␤»

[13:55] <xinming_> m: "test-a" ~~ /"test-" ("a")/; ("test-a" ~~ $0).perl.Bool.say;  ("test-b" ~~ $0).perl.Bool.say;

[13:55] <camelia> rakudo-moar b45d99d45: OUTPUT: «True␤True␤»

[13:55] <xinming_> So, ~~ $0, will return the $0 directly.

[14:11] *** stoned75_ left
[14:11] *** stoned75 left
[14:12] *** stoned75 joined
[14:13] *** robertle_ left
[14:15] <tbrowder> can anyone give an example of a class that does both Associative and Positional role plus allow access to contents like: "$obj<a>" as well as "$obj[3]"?

[14:18] <tbrowder> such a class is required to fully implement the pod $=data variable according to S26.

[14:21] <tbrowder> the class will have both an array and a hash attribute, it's just how the provide the [] and <> that stump me. do i add an operator overload in the class? i think i may have done that in an experiment a long time ago but haven't yet found it.

[14:25] <sena_kun> tbrowder, you need to implement methods from Positional and Associative roles

[14:25] <sena_kun> https://docs.perl6.org/type/Positional#Methods_that_should_be_provided and https://docs.perl6.org/type/Associative#Methods_that_should_be_provided

[14:25] <sena_kun> so something like:

[14:28] <sena_kun> m: class A does Positional does Associative { method elems { 3 }; method AT-POS(\pos) { 3 }; method EXISTS-POS(\pos) { True }; method AT-KEY(\key) { 3 }; method EXISTS-KEY(\key) { True }; method of { Str } }; say A.new<42>; say A.new[42];

[14:28] <camelia> rakudo-moar b45d99d45: OUTPUT: «3␤3␤»

[14:28] <tbrowder> sena_kun: thanks! i forgot about our wonderful docs. i was searching in raw nwp src code and couldn't find anything solid yet.

[14:28] <sena_kun> of course, instead of True and `3` you need to actually query your inner data structure

[14:28] <tbrowder> great example!! THANKS

[14:28] <sena_kun> you are welcome!

[14:29] <tbrowder> later..,

[14:35] *** warriors joined
[14:37] *** robertle_ joined
[14:40] *** xinming_ left
[14:41] *** xinming_ joined
[15:03] *** robertle_ left
[15:04] *** Doc_Holliwood joined
[15:09] *** robertle_ joined
[15:19] <Geth> ¦ doc: cfa072a239 | (Stoned Elipot)++ | doc/Type/Signature.pod6

[15:19] <Geth> ¦ doc: Add comma

[15:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cfa072a239

[15:26] <Doc_Holliwood> m: [1, [2, [3, 4]]]>>.List.flat.say

[15:26] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 2 3 4)␤»

[15:26] <Doc_Holliwood> m: [1, [2, [3, [4, 5]]]]>>.List.flat.say

[15:26] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 2 3 [4 5])␤»

[15:26] <Doc_Holliwood> ???

[15:28] <Doc_Holliwood> why doesn't the second example work? is this a bug?

[15:44] <jnthn> m: dd [1, [2, [3, 4]]]>>.List

[15:44] <camelia> rakudo-moar b45d99d45: OUTPUT: «((1,), (2, [3, 4]))␤»

[15:45] <jnthn> >> isn't descending as deep as you'd wish 

[15:47] <Doc_Holliwood> I noticed that :P

[15:47] <Doc_Holliwood> Q is why?

[15:48] <Doc_Holliwood> m: [1, [2, [3, [4, 5,[6,7,8]]]]]>>.List.flat.say

[15:48] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 2 3 [4 5 [6 7 8]])␤»

[15:48] <Doc_Holliwood> so its not elems - 1 deep

[15:51] <[Coke]> m: dd [1, [2, [3, 4]]][*;*]

[15:51] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1, 2, $[3, 4])␤»

[15:51] <[Coke]> m: dd [1, [2, [3, 4]]][*;*;*]

[15:51] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1, 2, 3, 4)␤»

[15:51] <[Coke]> I am not sure if there's a "flatten everything" sugar.

[15:54] <Doc_Holliwood> methinks there is, it's just buggy. the 2nd one above should work. 

[15:55] <Doc_Holliwood> The doc ( https://docs.perl6.org/type/Any#method_flat ) 

[15:55] <jnthn> I think the docs are misleading there

[15:56] <jnthn> Since https://docs.perl6.org/type/Any#method_List is defined as `is nodal`

[15:56] <jnthn> And that means we treat such a call as a node and don't descending into it

[16:04] <brass> What does dd do?

[16:04] <[Coke]> data dump

[16:04] <Doc_Holliwood> it Dumps Data

[16:04] <[Coke]> it's rakudo specific.

[16:04] <brass> Oh ok thanks

[16:05] <[Coke]> we needed something that showed data structures more clearly than .gist

[16:05] <Doc_Holliwood> jnthn: not a problem of hyper? sure?

[16:06] <Doc_Holliwood> m: say [1,11, [2,22, [3, 33, [4,44, 5,55]]]]>>.elems

[16:06] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 1 3)␤»

[16:06] <Doc_Holliwood> dafuq?

[16:07] <Doc_Holliwood> i expected  3 3 3 3

[16:08] <jnthn> Because .elems is nodal too

[16:08] <Doc_Holliwood> what does that mean=

[16:08] <jnthn> >>.foo behavior depends on the nature of the method being called, and if it has the nodal trait set on it

[16:08] * Doc_Holliwood reads up

[16:08] <jnthn> Explained better at https://doc.perl6.org/routine/is%20nodal than I'm likely to here :)

[16:09] <Doc_Holliwood> i just read that

[16:09] <Doc_Holliwood> how can i tell wether a routine is nodal or not?

[16:10] <Doc_Holliwood> m: say [1,11, [2,22, [3, 33, [4,44, 5,55]]]]>>{ .elems }

[16:10] <camelia> rakudo-moar b45d99d45: OUTPUT: «Type Int does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[16:10] <Doc_Holliwood> m: say [1,11, [2,22, [3, 33, [4,44, 5,55]]]]>>.&{ .elems }

[16:10] <camelia> rakudo-moar b45d99d45: OUTPUT: «[1 1 [1 1 [1 1 [1 1 1 1]]]]␤»

[16:12] *** tyil[m] joined
[16:14] <jnthn> m: say 1.^lookup('elems').nodal

[16:14] <camelia> rakudo-moar b45d99d45: OUTPUT: «True␤»

[16:14] <jnthn> m: say 1.^lookup('Int').nodal

[16:14] <camelia> rakudo-moar b45d99d45: OUTPUT: «No such method 'nodal' for invocant of type 'Method'␤  in block <unit> at <tmp> line 1␤␤»

[16:14] <jnthn> hah :)

[16:14] <jnthn> m: say so 1.^lookup('Int').?nodal # probably more like how it actually works :)

[16:14] <camelia> rakudo-moar b45d99d45: OUTPUT: «False␤»

[16:16] <Doc_Holliwood> m: say [1,11, [2,22, [3, 33, [4,44, 5,55]]]]>>.Str

[16:16] <camelia> rakudo-moar b45d99d45: OUTPUT: «[1 11 [2 22 [3 33 [4 44 5 55]]]]␤»

[16:18] <Doc_Holliwood> m: say ['a', 'aa', ['b','bb', ['c', 'c', ['d','dd', 'e', 'ee']]]]>>.uc

[16:18] <camelia> rakudo-moar b45d99d45: OUTPUT: «[A AA [B BB [C C [D DD E EE]]]]␤»

[16:19] <Doc_Holliwood> m: say ['a', 'aa', ['b','bb', ['c', 'c', ['d','dd', 'e', 'ee']]]]>>.&{ .uc }

[16:19] <camelia> rakudo-moar b45d99d45: OUTPUT: «[A AA [B BB [C C [D DD E EE]]]]␤»

[16:20] <Doc_Holliwood> Ok now the docs suggest there is a difference between these two forms

[16:21] <timotimo[m]> say ['a', 'aa', ['b','bb', ['c', 'c', ['d','dd', 'e', 'ee']]]]>>.reverse

[16:21] <evalable6> timotimo[m], rakudo-moar b45d99d45: OUTPUT: «((a) (aa) ([c c [d dd e ee]] bb b))␤»

[16:21] <Doc_Holliwood> scratch that, misread

[16:21] <timotimo[m]> m: say ['a', 'aa', ['b','bb', ['c', 'c', ['d','dd', 'e', 'ee']]]]>>.reverse

[16:21] <camelia> rakudo-moar b45d99d45: OUTPUT: «((a) (aa) ([c c [d dd e ee]] bb b))␤»

[16:22] <timotimo[m]> that's a little odd

[16:22] <timotimo[m]> nah, i guess it isn't; it just doesn't call .reverse on the outermost one

[16:22] <timotimo[m]> which is fine for nodal methods like .elems for example

[16:22] <jnthn> m: dd gather [1,11, [2,22, [3, 33, [4,44, 5,55]]]].deepmap(*.take)

[16:22] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1, 11, 2, 22, 3, 33, 4, 44, 5, 55).Seq␤»

[16:22] <El_Che> will #perl6 be forwarded? Still more people there than here

[16:22] <jnthn> That's a fairly neat way to write a deep flattener

[16:25] <stoned75> fwiw, mentioned in https://rosettacode.org/wiki/Flatten_a_list#Perl_6

[16:27] <AlexDaniel> El_Che: we'll see

[16:27] <AlexDaniel> El_Che: I guess we're now trying to get people to move naturally, and it's actually working

[16:28] <Doc_Holliwood> m: sub f { |$^a, [[&f]] |$^b>>.List.flat }; say [[&f]] [1,11, [2,22, [3, 33, [4,44, 5,55,[6]]]]]

[16:28] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 11 (2 22 3 33 4 44 5 55 6))␤»

[16:28] <Doc_Holliwood> so close :P

[16:28] <Doc_Holliwood> gather

[16:28] <Doc_Holliwood> of course

[16:33] <Doc_Holliwood> i agree. really neat

[16:33] <Doc_Holliwood> so neat i totally stole it (with credit)

[16:33] <Doc_Holliwood> https://www.youtube.com/watch?v=iDas3lZamz4

[16:33] <Doc_Holliwood> see the comments

[16:45] <Geth> ¦ whateverable: e002ae89f9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[16:45] <Geth> ¦ whateverable: Leave #perl6-dev (it's #raku-dev now)

[16:45] <Geth> ¦ whateverable: 

[16:45] <Geth> ¦ whateverable: I'm still keeping it on #perl6 for Tellable and some occasional

[16:45] <Geth> ¦ whateverable: Evalable action, but not for long.

[16:45] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/e002ae89f9

[16:46] *** squashable6 left
[16:50] *** camelia left
[16:50] *** camelia joined
[16:50] *** squashable6 joined
[16:50] *** notable6 joined
[16:51] *** greppable6 joined
[17:00] *** nebuchadnezzar joined
[17:03] *** chloekek joined
[17:26] *** xinming_ left
[17:26] *** xinming_ joined
[17:35] *** Kaiepi left
[17:35] *** Kaiepi joined
[17:41] <SmokeMachine> xinming_: it was with a bug... but it's fixed

[17:42] <SmokeMachine> xinming_: https://www.irccloud.com/pastebin/ZIdSlm9S/

[17:50] *** jaywalkerTux joined
[17:50] *** jaywalkerTux left
[17:54] *** ZzZombo left
[17:59] <xinming_> SmokeMachine: How to specify the default value for column BTW?

[18:00] <xinming_> something like     has DateTime $.now is column{:default<now>};

[18:04] <[Coke]> m: class A { has Int $.what is default(3) }; A.new.what.say

[18:04] <camelia> rakudo-moar b45d99d45: OUTPUT: «3␤»

[18:05] <[Coke]> ah, sorry, was thinking straight attribute, I see you're asking something more complex.

[18:31] *** wildtrees joined
[18:46] <xinming_> [Coke]: about the column default in Red ORM

[18:46] <xinming_> m: class A { has Int $.what = 3 }; A.new.what.say;

[18:46] <camelia> rakudo-moar b45d99d45: OUTPUT: «3␤»

[18:50] *** MasterDuke left
[18:52] <xinming_> SmokeMachine: BTW, We also need .pick   for (Model.^all).pick   ;-)

[18:55] <brass> What do you call the methods that start with ^?

[18:56] <SmokeMachine> https://github.com/FCO/Red/blob/4604f8723fdbe0494339a1cf0890732b59efe70b/docs/api/Red/ResultSeq.md#L55

[18:56] <SmokeMachine> xinming_: ^^

[18:56] <SmokeMachine> xinming_: just: Model.^all.pick

[18:57] <SmokeMachine> brass: it’s a meta-method...

[18:57] <[Coke]> https://docs.perl6.org/language/operators#methodop_.^

[18:58] <brass> Thanks

[18:59] <SmokeMachine> xinming_: that’s only with whateverable?! All fix that.

[19:07] <xinming_> SmokeMachine: why Model.^all.pick work, But not (Model.^all).pick?

[19:07] <xinming_> That makes me curious

[19:08] <AlexDaniel> SmokeMachine: speaking of whateverable, let me know if my changes are ok to you :) I can also submit some basic tests

[19:09] <AlexDaniel> tests are very easy in whateverable, but I have not tried doing that by using whateverable as a module…

[19:10] <AlexDaniel> redbot is the first project like this, actually :)

[19:10] *** robertle_ left
[19:10] <SmokeMachine> :)

[19:11] <SmokeMachine> AlexDaniel: Yes, I liked it a lot! I just need to change it to get configuration from the database (but I haven't tested yet...)

[19:12] <xinming_> SmokeMachine: The Model.^all.pick doesn't seem work

[19:12] <SmokeMachine> xinming_: I meant `Model.^all.pick(*)` is implemented but `Model.^all.pick` is not yet...

[19:13] <xinming_> Ok, got it.

[19:13] <SmokeMachine> xinming_: until I fix it, you can probably run `Model.^all.pick(*).head`

[19:25] <AlexDaniel> SmokeMachine: have you look at the latest commits? It's no longer reading the config file

[19:25] <AlexDaniel> SmokeMachine: it doesn read from the database, but now it's much easier: https://github.com/FCO/RedBot/blob/c9f8f78b389b3ffc695d7bbee66d001954c9ace8/bin/red-bot#L45-L52

[19:26] <SmokeMachine> AlexDaniel: Yes I did! :) it will be easy to make it use Red to get the configuration...

[19:28] <Doc_Holliwood> a my variable in a class will be shared by all instances, yes?

[19:53] *** stoned75 left
[19:55] *** stoned75 joined
[20:04] *** pmurias joined
[20:05] <pmurias> [Coke]: hi

[20:05] <tellable6> 2019-10-23T15:22:04Z #raku-dev <MasterDuke> pmurias: got it working with https://github.com/perl6/nqp/commit/8a9e57c00a

[20:05] <tellable6> 2019-10-23T15:31:41Z #raku-dev <MasterDuke> pmurias: btw, why does it say `runtime NYI: unimplemented QAST::Op for` when for does work?

[20:07] <[Coke]> pmurias: ho

[20:07] <[Coke]> I think I still owe you an email

[20:08] <xinming_> SmokeMachine: head is the same as first, right?

[20:09] *** cpan-raku left
[20:10] <Doc_Holliwood> give first, give head. yeah, about the same

[20:10] *** cpan-raku joined
[20:10] *** cpan-raku left
[20:10] *** cpan-raku joined
[20:11] <xinming_> when we do sort, How can we do reverse sort?

[20:12] <Doc_Holliwood> you give sort a callable that accepts 2 arguments

[20:12] <pmurias> [Coke]: if you have any question/or anything needs fixing, I'll gladly answer/fix ;)

[20:12] <Doc_Holliwood> basically

[20:13] <Doc_Holliwood> m: [1,2,3].sort({ $^b <=> %^a }).say

[20:13] <camelia> rakudo-moar b45d99d45: OUTPUT: «Type check failed in binding to parameter '%a'; expected Associative but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[20:13] <Doc_Holliwood> m: [1,2,3].sort({ $^b <=> $^a }).say

[20:13] <camelia> rakudo-moar b45d99d45: OUTPUT: «(3 2 1)␤»

[20:15] <Doc_Holliwood> m: [1,2,3].sort({ * <=> * }).say

[20:15] <camelia> rakudo-moar b45d99d45: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> 3[1,2,3].sort({ * <=> * }7…»

[20:15] <Doc_Holliwood> m: [1,2,3].sort( * <=> * ).say

[20:15] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 2 3)␤»

[20:16] <Doc_Holliwood> m: [1,2,3].sort( * !<=> * ).say

[20:16] <camelia> rakudo-moar b45d99d45: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot negate <=> because structural infix operators are not iffy enough␤at <tmp>:1␤------> 3[1,2,3].sort( * !7⏏5<=> * ).say␤    expecting any of:␤        infix␤        infix stopper␤»

[20:16] <Doc_Holliwood> lol, not iffy enough

[20:18] <Doc_Holliwood> m: [1,2,3].sort( * after * ).say

[20:18] <camelia> rakudo-moar b45d99d45: OUTPUT: «(1 2 3)␤»

[20:18] <Doc_Holliwood> m: [1,2,3].sort( * before * ).say

[20:18] <camelia> rakudo-moar b45d99d45: OUTPUT: «(3 2 1)␤»

[20:18] <Doc_Holliwood> optimum reached

[20:21] <xinming_> Doc_Holliwood: I mean in Red.

[20:22] <xinming_> the ORM

[20:22] <Doc_Holliwood> uh. no idea then.

[20:35] <xinming_> SmokeMachine: Also, I try to use Red in Cro, It seems, I need to add   my $*RED-DB = database ....;    to every request action.

[20:36] <SmokeMachine> xinming_: https://github.com/FCO/Cro-HTTP-Session-Red

[20:37] <SmokeMachine> xinming_: no, `.head` is different from `.first`... `.first(...)`means `.grep(...).head`

[20:38] <SmokeMachine> xinming_: `Model.^all.sort: -*.col`

[20:43] *** xinming_ left
[20:43] *** xinming_ joined
[20:45] <xinming_> SmokeMachine: Is there pager sollution in Red?

[20:45] <SmokeMachine> xinming_: `.batch($page-size)`

[20:45] <SmokeMachine> xinming_: `.batch($page-size)[$page]`

[20:46] <AlexDaniel> xinming_: .sort.reverse is fine

[20:47] <xinming_> AlexDaniel: Are you talking about the Red ORM?

[20:47] <xinming_> SmokeMachine: Thanks.

[20:48] <AlexDaniel> xinming_: no, it's about “How can we do reverse sort?” :)

[20:48] <SmokeMachine> xinming_: have you seen the other responses?

[20:48] <xinming_> SmokeMachine: Which one?

[20:48] <AlexDaniel> xinming_: oh, sorry, just read the rest of the messages :)

[20:48] <xinming_> I know I got disconnected

[20:48] <SmokeMachine> https://www.irccloud.com/pastebin/YMDplWec/

[20:48] <xinming_> AlexDaniel: Ok, Red ORM is doing kind great

[20:49] <xinming_> I read them now.

[20:49] <xinming_> SmokeMachine: Do you plan to add something like Data::Page from perl 5?

[20:50] <AlexDaniel> yep, Red looks prett cool, SmokeMachine++ :)

[20:50] <AlexDaniel> prett*

[20:50] <xinming_> Or, there is something better sollution for the Pager object

[20:50] <SmokeMachine> Thanks! :)

[20:52] <SmokeMachine> xinming_: I haven't thought about that yet...

[20:52] <xinming_> SmokeMachine: Though, I'm still not get the idea why you choose to use function style rather than OO style.

[20:52] <xinming_> I asked the same question in #cro, and understand why they choose to do it this way.

[20:53] <SmokeMachine> xinming_: what do you mean?

[20:55] <xinming_> I mean, you make it with   Model.^load: xxx;   instead of   $dbschema.RSSeq('Model').load: xxx;

[20:56] <xinming_> I mean, you make it with   Model.^load: xxx;   instead of   $dbschema.RSSeq('Model').^load: xxx;

[20:57] *** ggoebel left
[21:00] <SmokeMachine> xinming_: but it's kinda the same thing if you think the $dbschema is your Metaclass... so,  `$dbschema.RSSeq('Model')` is equivalent to `Model.HOW.all(Model)`... so, if you do `my $dbschema = Model.HOW; $dbschema.all(Model)` if you want it...

[21:01] <SmokeMachine> or `$dbschema.rs(Model)` (`.^all` is an alias for `.^rs`)

[21:19] *** moon_child left
[21:26] *** moon_child joined
[21:26] *** jjatria left
[21:26] *** jjatria joined
[21:29] <xinming_> SmokeMachine: What I mean is, actually, We can have the $schema object..

[21:30] <xinming_> BTW, is there a shortcut for   my %h = %( |($xx ?? :$xx !! ()), |($yy ?? :$yy !! ()) );

[21:32] <SmokeMachine> m: my $yy = 42; my %h = |(:$xx with $xx), |(:$yy with $yy); say %h

[21:32] <camelia> rakudo-moar b45d99d45: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$xx' is not declared␤at <tmp>:1␤------> 3my $yy = 42; my %h = |(:7⏏5$xx with $xx), |(:$yy with $yy); say %h␤»

[21:32] <SmokeMachine> m: my $xx; my $yy = 42; my %h = |(:$xx with $xx), |(:$yy with $yy); say %h

[21:32] <camelia> rakudo-moar b45d99d45: OUTPUT: «{yy => 42}␤»

[21:36] <xinming_> SmokeMachine: What I mean is,  |(...)   seems to be too tedious

[21:37] <SmokeMachine> xinming_: it creates a Slip...

[21:40] *** sena_kun left
[21:40] <discord6> <noelsken> :$xx creates a pair which is one object, which means it can only be one of key or value for a hash, and the | is necessary to lower the pair object into the hash as a key/value pair

[21:40] <discord6> <noelsken> so that it slips into key and value

[21:41] <discord6> <noelsken> if this is about having to type |( ) for every variable I'd suggest stuffing them into something Positional and iterating over it

[21:53] <xinming_> discord6: I know what it means, The reason I ask for this is trying to finder a shorter way to do things in perl6

[21:53] <xinming_> noelsken: ^^

[21:54] *** chloekek left
[21:55] <discord6> <noelsken> I don't think there's anything shorter than prefix:<|>

[21:55] <xinming_> m: my $xx; my $yy = 42; my %h = (:$xx with $xx), (:$yy with $yy); say %h

[21:55] <camelia> rakudo-moar b45d99d45: OUTPUT: «{yy => 42}␤»

[21:56] <xinming_> This is the shortest way I can do this.

[21:59] <discord6> <noelsken> m: my $x = "foo"; my %h = (:$x with $x); say %h.perl

[21:59] <evalable6> noelsken, rakudo-moar b45d99d45: OUTPUT: «{:x("foo")}␤»

[21:59] <discord6> <noelsken> huh, I'd have expected "expected 2 but got 1" there

[22:16] <SmokeMachine> AlexDaniel: that's hanging for me... :(

[22:18] <AlexDaniel> SmokeMachine: what is?

[22:18] <AlexDaniel> SmokeMachine: did you update whateverable?

[22:18] <SmokeMachine> yes...

[22:18] <AlexDaniel> hmmmm

[22:18] <SmokeMachine> oh no! it's running!

[22:27] *** Kaiepi left
[22:29] *** Kaiepi joined
[22:30] <SmokeMachine> AlexDaniel https://www.irccloud.com/pastebin/wy8bhLAa/

[22:33] <AlexDaniel> SmokeMachine: that's in the version I committed or you tweaked it?

[22:34] <SmokeMachine> the version you committed...

[22:35] *** Kaiepi left
[22:36] <AlexDaniel> I see

[22:36] <AlexDaniel> yup, I see

[22:36] <AlexDaniel> SmokeMachine: run it with DEBUGGABLE env var for now while I'm fixing it

[22:40] <SmokeMachine> AlexDaniel: with DEBUGGABLE it's working...

[22:41] *** Kaiepi joined
[22:46] <AlexDaniel> SmokeMachine: I'm an idiot. Put a semicolon on this line: https://github.com/FCO/RedBot/blob/f1c6ca3b11313da4479997c64450badfa22f6c57/bin/red-bot#L51

[22:47] <SmokeMachine> AlexDaniel: Sorry, I didn't find it...

[22:49] <SmokeMachine> but why is it working with DEBUGGABLE?

[22:52] <AlexDaniel> SmokeMachine: because then it doesn't use the cave var

[22:53] <AlexDaniel> ideally the list of channels should be configurable too :)

[22:54] *** redable joined
[22:54] <SmokeMachine> yes, it will be on database...

[22:54] *** stoned75 left
[22:56] *** redable left
[23:36] *** greppable6_ joined
[23:36] *** greppable6_ left
[23:37] <Geth> ¦ whateverable: ab7c6b2283 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[23:37] <Geth> ¦ whateverable: Make the channel list configurable

[23:37] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/ab7c6b2283

[23:38] <AlexDaniel> SmokeMachine: done ↑

[23:45] *** warriors left
[23:52] *** pmurias left
