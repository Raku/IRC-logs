[00:04] *** wamba left
[00:04] *** Doc_Holliwould joined
[00:04] *** vrurg joined
[00:08] *** Doc_Holliwood left
[00:10] *** Doc_Holliwould left
[00:10] *** lucasb left
[00:13] *** Doc_Holliwood joined
[00:15] *** redable joined
[00:17] *** wildtrees left
[00:21] *** guifa2 joined
[00:34] *** vrurg left
[00:36] *** tony-o left
[00:41] *** redable left
[00:44] *** squashable6 left
[00:45] *** redable joined
[00:45] *** squashable6 joined
[00:49] *** vrurg joined
[00:59] *** stoned75 joined
[00:59] *** pmurias left
[00:59] *** cpan-raku left
[01:01] *** cpan-raku joined
[01:01] *** cpan-raku left
[01:01] *** cpan-raku joined
[01:05] *** redable left
[01:07] *** warriors left
[01:11] *** redable joined
[01:33] <guifa> .tell SmokeMachine great presentation.  I can‚Äôt wait to have some time to dive into using Red.  e falas muito melhor do que achas

[01:33] <tellable6> guifa, I'll pass your message to SmokeMachine

[01:36] *** Kaiepi left
[01:39] *** Kaiepi joined
[01:42] *** redable left
[01:43] <SmokeMachine> vrurg: it seems that the tests are passing my branch copy of you PR... I'm thinking of merging it... I've run again th tests on your PR, but I'm having the same error there... that doesn't make any sense...

[01:43] <tellable6> 2019-10-29T01:33:02Z #raku <guifa> SmokeMachine great presentation.  I can‚Äôt wait to have some time to dive into using Red.  e falas muito melhor do que achas

[01:44] <SmokeMachine> vrurg: https://travis-ci.org/FCO/Red/builds/604221184?utm_source=github_status&utm_medium=notification

[01:45] *** redable joined
[01:45] <SmokeMachine> guifa: thanks!

[01:46] <SmokeMachine> red: say "are you there?!"

[01:46] <redable> SmokeMachine, are you there?!‚ê§

[01:47] <SmokeMachine> red: use Post; .say for Post.^all

[01:47] <redable> SmokeMachine, https://gist.github.com/4b39b830364475f936535bad07711069

[01:48] *** huyna joined
[01:49] <huyna> i found Bailador framework which support easy way to make http server, i wonder if this framework support HTTP/2.0

[01:49] <vrurg> SmokeMachine: That's weird. 

[01:49] <SmokeMachine> huyna: I think it doesn't... but Cro does

[01:50] <SmokeMachine> vrurg: yes, a lot

[01:50] <huyna> SmokeMachine: good to hear some, let me do Cro

[01:51] <SmokeMachine> huyna: https://cro.services

[01:51] <huyna> yes @Smok

[01:51] <huyna> sorry, yes SmokeMachine, thank you so much

[01:51] <SmokeMachine> huyna: np

[01:52] <vrurg> SmokeMachine: is it same rakudo version used by travis and with manual testing?

[01:52] <SmokeMachine> vrurg: I'm running the same docker image/container...

[01:53] <vrurg> SmokeMachine: but most certainly it gets a non-code in $meth. The only way to find out ‚Äì is to print $meth. If I get time I would try to commit a "patch" and see what the output in travis would be.

[01:53] <SmokeMachine> vrurg: I know it's working... but I'm afraid of merging it and the bug goes to master...

[01:54] <vrurg> SmokeMachine: you're absolutely right.

[01:58] *** lucs joined
[02:08] *** redable left
[02:20] *** tony-o joined
[02:20] *** stoned75 left
[02:41] *** huyna left
[03:12] *** marcusr left
[03:12] *** marcusr joined
[03:16] *** marcusr left
[03:16] *** marcusr joined
[03:57] *** Doc_Holliwood left
[04:04] *** marcusr left
[04:04] *** marcusr joined
[04:15] *** marcusr left
[04:16] *** marcusr joined
[04:47] *** guifa2 left
[05:05] *** squashable6 left
[05:07] *** squashable6 joined
[05:14] *** guifa2 joined
[05:28] *** squashable6 left
[05:30] *** squashable6 joined
[05:55] *** wamba joined
[06:00] *** jmerelo joined
[06:00] <jmerelo> releasable6: status

[06:00] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 248 out of 451 commits logged (‚ö† 9 warnings)

[06:00] <tellable6> 2019-10-28T13:14:02Z #raku <tyil> jmerelo where to submit possible advent calendar entries?

[06:00] <releasable6> jmerelo, Details: https://gist.github.com/dab42ab183773bc10fd3f1e28417374e

[06:01] <jmerelo> .tell tyil plese submit them here https://github.com/perl6/advent/tree/master/perl6advent-2019

[06:01] <tellable6> jmerelo, I'll pass your message to tyil

[06:01] <tyil> thanks

[06:02] <jmerelo> tyil sure :-)

[06:02] *** vlad78 joined
[06:02] <jmerelo> We're halfway there; anyone interested, please add yourself to the advent calendar schedule via PR

[06:03] <vlad78> Hi

[06:03] <vlad78> I'm trying to find instructions on how to compile raku from sources

[06:03] <vlad78> Latest git, not rakudo star

[06:03] <moritz> vlad78: perl Configure.pl --gen-moar

[06:03] <moritz> make

[06:03] <moritz> make install

[06:04] <vlad78> moritz: that downloads moarvm or do I have to have it cloned in advance?

[06:04] <vlad78> s/cloned/clone/

[06:06] <jmerelo> vlad78: if you want to compile from source, you're supposed to have the source already... That does not download anything.

[06:06] <vlad78> jmerelo: Right, in that case what all packages do I need to download and where?

[06:07] <vlad78> I'm aware of 'raku' and 'moarvm'

[06:07] <jmerelo> vlad78: unless you want to do it yourself for some reason, I stronly advise to use something like rakudobrew... Will simplify stuff a lot.

[06:07] <vlad78> Right, /me googles rakudobrew

[06:08] <vlad78> The thing is that I have tried to compile raku on solaris, and in current rakudo star is nasty bug in hostname resolving routine

[06:08] <vlad78> But the current git has the code very different, probably fixed

[06:09] <jmerelo> so you need HEAD as opposed to other

[06:09] <jmerelo> With rakudobrew you can install the point versions. 2019.07.1 is the latest

[06:12] <Ulti> vlad78: p6env is also a useful choice especially if you want multiple versions for different projects

[06:18] <vlad78> All right, thank you all. I'll try rakudobrew, and if it fails just wait for next star release :)

[06:25] *** Doc_Holliwood joined
[06:30] *** stoned75 joined
[06:31] *** vlad78 left
[06:46] *** guifa2 left
[06:50] *** stoned75 left
[07:30] *** sarna joined
[07:35] *** jmerelo left
[07:36] *** El_Che joined
[07:39] *** maettu joined
[07:43] *** Voldenet left
[07:54] *** sena_kun joined
[08:01] *** bartolin left
[08:03] *** bartolin joined
[08:31] <ZzZombo> Is this correct: `@names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse;`? Doesn't the second `sort` call just override the previous?

[08:34] <tyil> tony-o: in the readme on https://github.com/tony-o/p6-db-xoos-sqlite you refer to another github repo that gives me a 404

[08:36] *** bartolin left
[08:37] *** bartolin joined
[08:59] *** rindolf joined
[09:00] <rindolf> Hi everypony!

[09:01] *** hungrydonkey joined
[09:03] <hungrydonkey> hello, Is there a way to make the result of high precision in division?

[09:05] <hungrydonkey> like 1/3 in the REPL, the result is 0.333333. I want the result to have more decimal places, more accurate.

[09:06] <hungrydonkey> üò∂

[09:06] *** Manifest0 left
[09:06] *** Manifest0 joined
[09:24] <xinming_> SmokeMachine: How do we do multiple key renference?

[09:25] <SmokeMachine> xinming_: what do you mean?

[09:30] *** bartolin left
[09:31] <xinming_> create table a { part1 int, part2 int2, primary key(part1, part2) };   table b { id serial, part1 int, part2 int2, primary key(id) };     SELECT * FROM b JOIN a USING (part1, part2) WHERE a.part1 = 'part1 AND a.part2 = 'part2';

[09:33] <xinming_> https://termbin.com/lbjp    <--- This is the most I can get and think of

[09:34] <El_Che> m: (1/3).WHAT

[09:34] <camelia> rakudo-moar 9f433da0d: ( no output )

[09:34] <El_Che> m: say (1/3).WHAT

[09:34] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(Rat)‚ê§¬ª

[09:34] <El_Che> ^--- hungrydonkey 

[09:34] <El_Che> the devision is a Rational number until you force it to be something else, so you don't loose precision

[09:35] <El_Che> m: say <1/3>.nude

[09:35] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(1 3)‚ê§¬ª

[09:35] <El_Che> m: say <1/3>.^name

[09:35] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Rat‚ê§¬ª

[09:36] <El_Che> hungrydonkey: https://docs.perl6.org/type/Rat

[09:40] <xinming_> SmokeMachine: https://termbin.com/72hv6

[09:41] <SmokeMachine> xinming_: joins are not implemented yet... it's coming on :api<2>

[09:41] <xinming_> SmokeMachine: Ok. So, my second example can be updated as test.

[09:42] <xinming_> So, in this case, it's has_many relationship join.

[09:42] <SmokeMachine> red: https://termbin.com/72hv6

[09:43] * SmokeMachine needs to find somewhere to run this bot...

[09:43] *** bartolin joined
[09:47] <xinming_> SmokeMachine: Is multi column unique constraint added?

[09:48] <ZzZombo> Is there a way to use my Raku code outside of it, i. e. by compiling it into a DLL?

[09:49] <xinming_> Something like,     is column{ :unique-constraint-name<xxx> };

[09:51] <SmokeMachine> xinming_: yes: `::?CLASS.^add-unique-constraint: { .col1, col2 }`, and it's plained `is column{ :unique<name> }` and `is unique<name>`

[09:55] *** Altai-man_ joined
[09:57] *** sena_kun left
[10:08] *** thundergnat joined
[10:08] <thundergnat> m: use lib ‚Äòdata/all-modules/github/thundergnat/Rat-Precise/‚Äô; use Rat::Precise; say (1/3).precise(32);

[10:08] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´===SORRY!===‚ê§Could not find Rat::Precise at line 1 in:‚ê§    file#/home/camelia/data/all-modules/github/thundergnat/Rat-Precise‚ê§    inst#/home/camelia/.perl6‚ê§    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    inst#/home/camelia/rakudo‚Ä¶¬ª

[10:08] <thundergnat> meh.

[10:16] <El_Che> releasable6: status

[10:16] *** thundergnat left
[10:16] <releasable6> El_Che, Next release will happen when it's ready. There are no known blockers. 248 out of 451 commits logged (‚ö† 9 warnings)

[10:16] <releasable6> El_Che, Details: https://gist.github.com/7c2b65b5d8ee8d97fae6711467079858

[10:19] *** sarna left
[10:23] <hungrydonkey> El_Che, thank you very much. 

[10:25] <hungrydonkey> It's true. 

[10:25] <hungrydonkey> p6 : say 1/3+0.11111111;

[10:27] *** scimon joined
[10:32] *** pmurias joined
[10:35] *** sarna joined
[10:47] *** hungrydonkey left
[10:57] *** wamba left
[10:58] <ZzZombo> m: class A {};class B does A {};B.new.WHAT.say

[10:58] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§A is not composable, so B cannot compose it‚ê§at <tmp>:1‚ê§¬ª

[11:08] *** squashable6 left
[11:11] *** squashable6 joined
[11:30] <pmurias> MasterDuke: just not doing silly stuff gets us a bit faster on the point creation benchmark then the old jvm backend :)

[11:30] <pmurias> MasterDuke: I'll try to add some truffle magic and will see how it goes ;)

[11:31] *** donaldh joined
[11:35] *** Voldenet joined
[11:35] *** Voldenet left
[11:35] *** Voldenet joined
[11:38] *** pmurias left
[11:38] *** xinming_ left
[11:38] *** xinming_ joined
[11:56] *** sena_kun joined
[11:58] *** Altai-man_ left
[11:59] *** ggoebel joined
[12:03] *** squashable6 left
[12:04] *** pmurias joined
[12:05] *** squashable6 joined
[12:06] *** hungrydonkey joined
[12:19] *** hungrydonkey left
[12:19] *** lucasb joined
[12:23] *** hungrydonkey joined
[12:28] *** hungrydonkey left
[12:33] *** hungrydonkey joined
[12:33] *** hungrydonkey left
[12:39] *** donaldh left
[12:52] *** MasterDuke left
[12:55] <scimon> https://ossg.bcs.org/blog/event/modern-languages/ : Really should write slides for this.

[12:55] <scimon> :)

[13:12] *** guifa2 joined
[13:31] *** maettu left
[13:33] *** Juerd left
[13:34] *** donaldh joined
[13:46] *** guifa2 left
[13:56] *** Altai-man_ joined
[13:57] <ZzZombo> "Please note that one should keep the code inside the whenever as small as possible, as only one whenever block will be executed at any time" - shouldn't this read "at the same time"?

[13:58] *** sena_kun left
[14:07] <jnthn> That's also not especially good advice; you need to do whatever is transactionally required to process the event.

[14:18] *** kybr left
[14:23] *** guifa2 joined
[14:30] * guifa2 is making an e-mail token for regexen.  Good lord we have come a long way in terms of designing formats

[14:31] <guifa2> "<1234   @   local(blah)  .machine .example>" (spaces intentional) is a valid e-mail address ü§¶

[14:34] *** Manifest0 left
[14:35] *** Manifest0 joined
[14:36] *** Manifest0 left
[14:37] <[Coke]> O_o;

[14:39] <[Coke]> is it distinct from the version with no spaces?

[14:40] <Grinnz> never forget: https://metacpan.org/release/Email-Valid/source/lib/Email/Valid.pm#L399-400

[14:41] <[Coke]> I am all in on never validating email except by trying to send an email.

[14:42] *** warriors joined
[14:43] <guifa2> [Coke]: I'm more or less the same.  But I was thinking one of the strengths of Raku is the ability to create some fairly powerful reusable tokens (the coolest so far I'm saving for advent calendar), and e-mail address is a fairly "easy" one to tackle to show its utility

[14:43] <[Coke]> nice.

[14:44] <[Coke]> Do we have enough volunteers for the advent calendar this year?

[14:45] <guifa2> The goal (mostly working so far is to go "use Regex::EmailToken" and then [email@hidden.address] ~~ /My e-mail is <email>/; say $<email><domain> ---> "foo.com"; would work both in general code and inside of grammars!

[14:46] *** pmurias left
[14:46] <guifa2> And I figured out how to grant dot access to the matches too, so the above could have say $<email>.domain, or $<email>.has-domain-literal , etc

[14:47] <guifa2> (the dot access is I think the coolest bit I figured out, by wrapping tokens to provide a mixin)

[14:48] *** pmurias joined
[14:48] <AlexDaniel> jmerelo: so what's up with docs.raku.org ?

[14:48] <tellable6> AlexDaniel, I'll pass your message to jmerelo

[14:55] *** sarna left
[15:10] <ZzZombo> jnthn: so should that quote be edited out or corrected?

[15:12] <tony-o> tyil: ty, should be fixed now

[15:13] <tyil> tony-o: \o/

[15:13] <tyil> thanks

[15:14] <tony-o> jnthn: i ran a bisect on that commit regarding boundary issue and i think the regression is in 2019.03 and not actually in that PR, the test also passes fine on HEAD rakudo

[15:15] <tony-o> re: cro routing boundary PR12

[15:23] *** lil joined
[15:29] <jnthn> ZzZombo: Maybe something like "Only a single whenever block may be running at a time for a given instance of a supply or react block. This means one can reliably write event processing code without races over the state declared inside the supply or react block. However, it also means that a long-running whenever block will prevent processing of further messages until it has completed."

[15:34] <ZzZombo> Is this correct: `@names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse;`? Doesn't the second `sort` call just override the previous?

[15:34] <jnthn> Yes, seems pointless

[15:35] <jnthn> tony-o: Hm, interesting...thanks. Will take a look later.

[15:35] <Grinnz> unless it's a stable sort and they aren't all uniquely ordered?

[15:35] <ZzZombo> Another docs issue then. Will fix tomorrow. Gotta go to bed. Cya!

[15:35] <jnthn> Should probably be `@names.sort({ %sets{$_}, %matches{$_} }).reverse`

[15:38] <Kaiepi> any experts on how types are handled in raku on?

[15:40] <jnthn> Well, I designed/implemented most of the MOP, which isn't unrelated. :)

[15:40] <Kaiepi> yeah this is to do with a niche scenario when using the MOP

[15:40] <Kaiepi> so

[15:40] <Kaiepi> m: class FooHOW { method new_type() { my Mu:U $ := Metamodel::Primitives.create_type: self.new, 'Uninstantiable' } }; FooHOW.new_type

[15:40] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Died with X::TypeCheck::Binding‚ê§  in method new_type at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:41] <Kaiepi> there's nothing wrong with this

[15:41] <Kaiepi> i haven't told the type to behave like Mu so it shouldn't type check as such

[15:41] <Kaiepi> but

[15:42] <Kaiepi> m: sub foo(Mu:U $ --> 1) { }; class FooHOW { method new_type() { Metamodel::Primitives.create_type: self.new, 'Uninstantiable' } }; say foo FooHOW.new_type

[15:42] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´1‚ê§¬ª

[15:42] <Kaiepi> why does this type check?

[15:43] <jnthn> In many places, Mu is taken to mean "don't even bother checking"

[15:43] <jnthn> Because everything (should be) Mu

[15:43] <jnthn> So the checks are simply optimized out.

[15:44] <jnthn> This is allowed.

[15:44] <jnthn> I guess the variable typed with Mu:U path is one where that optimization simply doesn't happen.

[15:44] <jnthn> (I can kind of guess why; it's a bit harder to make it happen.)

[15:46] <Kaiepi> is a library for a type that always succeeds type checks against it, but can't be used for anything outside of type annotations a bad idea?

[15:48] <jnthn> Not sure I see the point of it, tbh

[15:48] <jnthn> I bet `my Mu $ := ...` would also work out

[15:49] <Kaiepi> m: class FooHOW { method new_type() { my Mu $ := Metamodel::Primitives.create_type: self.new, 'Uninstantiable' }; method shortname(--> Str:D) { 'Foo' } }; say FooHOW.new_type

[15:49] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Cannot find method 'gist' on '': no method cache and no .^find_method‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:50] <Kaiepi> m: class FooHOW { method new_type() { my Mu $ := Metamodel::Primitives.create_type: self.new, 'Uninstantiable' }; method shortname(--> Str:D) { 'Foo' }; method find_method(Mu:U $type is raw, Str:D $name) { Mu.HOW.find_method: Mu, $name } }; say FooHOW.new_type

[15:50] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Too many positionals passed; expected 1 argument but got 2‚ê§  in method shortname at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:51] <Kaiepi> m: class FooHOW { method new_type() { my Mu $ := Metamodel::Primitives.create_type: self.new, 'Uninstantiable' }; method shortname(Mu:U $ --> Str:D) { 'Foo' }; method find_method(Mu:U $type is raw, Str:D $name) { Mu.HOW.find_method: Mu, $name } }; say FooHOW.new_type

[15:51] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(Foo)‚ê§¬ª

[15:51] <Kaiepi> ah

[15:51] <Kaiepi> there we go

[15:52] <tony-o> [Coke]: do you need anyone for the advent calendar?

[15:53] <tony-o> guifa2: did you look at using an action with your grammar to provide an email type object back?  this would make it so you don't have to mixin or wrap grammar tokens

[15:53] <Kaiepi> thanks jnthn 

[15:54] <[Coke]> tony-o: I don't need anything, just curious

[15:54] <guifa2> tony-o: I definitely did, and will probably still provide such an object.  The catch is, actions can't be used in adhoc regexes, only in grammars

[15:55] <AlexDaniel> [Coke]: jmerelo seems to be taking care of it

[15:56] <AlexDaniel> as for volunteers, you never know :)

[15:56] *** sena_kun joined
[15:56] *** cpan-raku left
[15:57] *** cpan-raku joined
[15:57] *** cpan-raku left
[15:57] *** cpan-raku joined
[15:58] *** Altai-man_ left
[16:00] <guifa2> tony-o: the actions route is what I took for the <local-number> token for Intl:: stuff when I did it a few weeks ago, but tbh the ability to quickly access the super important stuff seems worth it the wrap+mixin trouble

[16:01] *** patrickb joined
[16:05] <tony-o> ah, you can always call the actions manually from the resulting regex's match object

[16:06] <guifa2> true, but that's like a whole extra line of code for the end-user ;-)

[16:07] <guifa2> (and honestly, now that I've figured out how to do it, only about 5-10 extra lines of code on my side)

[16:08] <tony-o> ah

[16:12] *** pmurias left
[16:14] *** jmerelo joined
[16:15] *** rindolf left
[16:15] <Kaiepi> üëÄ https://www.humblebundle.com/books/linux-bsd-bookshelf-2019-books

[16:15] <Kaiepi> this could help increase the bus factor on bsd-related issues

[16:16] <jmerelo> There's a book aout Perl too...

[16:16] <tellable6> 2019-10-29T14:48:46Z #raku <AlexDaniel> jmerelo: so what's up with docs.raku.org ?

[16:16] <Kaiepi> would be useful for me as well since idr linux that well

[16:17] <guifa2> jmerelo: but it's not Raku.  I agree with Kaiepi, that would be a good "boom look at the evolution" if someone flipped through it after getting it

[16:20] <jmerelo> .tell AlexDaniel I'll try to have it ready ASAP.

[16:20] <tellable6> jmerelo, I'll pass your message to AlexDaniel

[16:20] *** scimon left
[16:23] *** patrickb left
[16:29] <guifa2> Should we slowly start to remove compile errors that are exclusively to prevent P5-isms?  I'm thinking about, for instance, where we disallow allow a hyphen in character classes except as the first/last to prevent gotchas, but there's no other reason to prevent it except for P5->P6 transitions  

[16:32] *** lil left
[16:34] <rba> jmerelo: let me know if I can help. 

[16:37] <jmerelo> rba: I'll see if I can set it up this afternoon. I'm in the middle of a course, but I'll try.

[16:37] <jmerelo> rba: any feedback from AWS?

[16:39] <rba> Jmerelo: not yet Gupta from AWS just accepted the application as it seems to be more complete now. 

[16:39] <jmerelo> rba: great :-)

[16:39] <rba> jmerelo: we will see...

[16:40] <rba> jmerelo: ping me, if you need me. :-)

[16:40] <jmerelo> rba: sure, thanks!

[16:45] *** xinming_ left
[16:46] *** xinming_ joined
[16:55] *** guifa2 left
[16:55] *** donaldh left
[16:59] *** Kaiepi left
[17:10] *** guifa2 joined
[17:13] *** guifa2 left
[17:15] <rba> jmerelo: I‚Äòve claimed docs.perl6.org and docs.raku.org in Google Search Console already. After publishing docs.raku.org I can setup a permanent (301) redirect from docs.perl6.org/* -> docs.raku.org/*. Will this fit your needs?

[17:15] *** wildtrees joined
[17:16] <xinming_> SmokeMachine: ^delete on ResultSeq doesn't work.

[17:16] <SmokeMachine> xinming_: do you mean `.delete`?

[17:17] <xinming_> let me try.

[17:17] <SmokeMachine> xinming_: you should use meta-methods only on your model, not on ResultSet...

[17:18] *** guifa2 joined
[17:27] *** MasterDuke joined
[17:32] <jmerelo> releasable6: status

[17:33] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 248 out of 451 commits logged (‚ö† 9 warnings)

[17:33] <releasable6> jmerelo, Details: https://gist.github.com/f981731bb3fae55969f4a11ce679fcba

[17:34] *** wamba joined
[17:37] *** guifa2 left
[17:39] <SmokeMachine> xinming_: did it work?

[17:40] *** Kaiepi joined
[17:43] <xinming_> Nope

[17:43] <xinming_> SmokeMachine: //termbin.com/r413

[17:43] <xinming_> SmokeMachine: https://termbin.com/r413

[17:44] <SmokeMachine> xinming_: could you show me the code, please?

[17:44] <xinming_> BBL

[17:44] <xinming_> I'll shrink the problem code for you.

[17:48] *** wamba left
[17:49] <xinming_> SmokeMachine: BTW, do you dev use the master branch of rakudo?

[17:49] <xinming_> I'm using the 2019.07.1

[17:50] <xinming_> https://termbin.com/dx6y

[17:55] *** Altai-man_ joined
[17:57] *** sena_kun left
[18:01] <SmokeMachine> yes...

[18:03] *** chloekek joined
[18:07] <SmokeMachine> xinming_: it's not binding the value... I'll try to fix it when I arrive at home...

[18:08] <SmokeMachine> xinming_: https://www.irccloud.com/pastebin/PHZJCmCa/

[18:08] <SmokeMachine> xinming_: thanks... would you ming to open a issue?

[18:12] <xinming_> SmokeMachine: Ok

[18:17] <El_Che> any news on the state of relocatable builds? I thought there were still some issues?

[18:17] <jmerelo> .tell rba you've got email

[18:17] <tellable6> jmerelo, I'll pass your message to rba

[18:53] <tony-o> AlexDaniel: not seeing an approve button on https://github.com/perl6/problem-solving/pull/87

[18:53] <tony-o> but lgtm

[18:54] <AlexDaniel> tony-o: hmm what about this link https://github.com/perl6/problem-solving/pull/87/files

[18:54] <tellable6> 2019-10-29T16:20:11Z #raku <jmerelo> AlexDaniel I'll try to have it ready ASAP.

[18:54] <AlexDaniel> tony-o: do you see ‚ÄúReview changes‚Äù button?

[18:58] <tony-o> approved

[19:00] <AlexDaniel> thank you!

[19:02] *** wamba joined
[19:07] <jmerelo> AlexDaniel: trying to copy stuff to stating server now, but having problems with ssh keys. Or something. Pinging +rba for help.

[19:08] <AlexDaniel> El_Che: mind joining #raku-dev? :)

[19:09] <AlexDaniel> jmerelo: you too :)

[19:09] <AlexDaniel> missed discussion: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-10-29#l179

[19:20] <vrurg> m: our $foo = "really?"; say $*foo

[19:20] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´really?‚ê§¬ª

[19:21] <vrurg> ^ this is totally confusing...

[19:21] <vrurg> jnthn: are you around?

[19:23] *** wildtrees_ joined
[19:24] <Doc_Holliwood> anybody here living in hungary?

[19:25] *** wildtrees left
[19:33] *** Xliff joined
[19:34] *** wamba left
[19:34] *** wamba joined
[19:42] <Xliff> So, who can explain %?RESOURCES and it's proper use vis-a-vis META6.json?

[19:42] <Xliff> Because I am trying to use it and it is NOT working.

[19:42] <Xliff> m: $*OS.name.say

[19:42] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Dynamic variable $*OS not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:43] <Xliff> m: $*KERNEL.gist.say

[19:43] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´linux (1.SMP.Fri.Mar.22.06.23.26.UTC.2019.a.0.dd.1.b.8)‚ê§¬ª

[19:43] <Xliff> m: $*KERNEL.os.say

[19:43] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´No such method 'os' for invocant of type 'Kernel'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:43] <Xliff> m: $*KERNEL.WHAT.say

[19:43] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(Kernel)‚ê§¬ª

[19:44] <Xliff> m: $*KERNEL.arch.say

[19:44] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´x86_64‚ê§¬ª

[19:44] <Xliff> m: $*KERNEL.archname.say

[19:44] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´x86_64-linux‚ê§¬ª

[19:44] <Xliff> m: $*KERNEL.cpu-cores.say

[19:44] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´4‚ê§¬ª

[19:45] *** jmerelo left
[19:45] <Xliff> m: $*KERNEL.release.say

[19:45] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´4.4.176-96-default‚ê§¬ª

[19:46] <Xliff> m: $*DISTRO.say

[19:46] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´opensuse (42.3)‚ê§¬ª

[19:46] <Xliff> m: $*DISTRO.WHAT.say

[19:46] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(Distro)‚ê§¬ª

[19:55] *** warriors left
[19:57] *** Altai-man_ left
[19:58] <Xliff> my %numKeys = :{ 3.1 => 'a', œÄ => 'b', 22/6 => 'c' }; %numKeys.gist.say

[19:58] <Xliff> m: my %numKeys = :{ 3.1 => 'a', œÄ => 'b', 22/6 => 'c' }; %numKeys.gist.say

[19:58] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3= :{ 3.1 => 'a', œÄ => 'b', 22/6 => 'c' }7‚èè5; %numKeys.gist.say‚ê§{3.1 => a, 3.666667 => c, œÄ ‚Ä¶¬ª

[19:58] *** kybr joined
[19:59] *** pmurias joined
[19:59] <Xliff> m: my %numKeys = :( 3.1 => 'a', œÄ => 'b', 22/6 => 'c' ); %numKeys.gist.say

[19:59] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix > instead.‚ê§at <tmp>:1‚ê§------> 3my %numKeys = :( 3.1 =>7‚èè5 'a', œÄ => 'b', 22/6 => 'c' ); %numKeys.‚ê§¬ª

[19:59] <Xliff> m: my $numKeys = :{ 3.1 => 'a', œÄ => 'b', 22/6 => 'c' }; %numKeys.gist.say

[19:59] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '%numKeys' is not declared. Did you mean '$numKeys'?‚ê§at <tmp>:1‚ê§------> 3:{ 3.1 => 'a', œÄ => 'b', 22/6 => 'c' }; 7‚èè5%numKeys.gist.say‚ê§¬ª

[19:59] <Xliff> m: my $numKeys = :{ 3.1 => 'a', œÄ => 'b', 22/6 => 'c' }; $numKeys.gist.say

[19:59] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´{3.1 => a, 3.666667 => c, œÄ => b}‚ê§¬ª

[20:03] *** Kaiepi left
[20:05] *** Kaiepi joined
[20:08] *** wamba left
[20:10] *** donaldh joined
[20:10] <donaldh> Is there a way to enumerate all the declared classes in global scope?

[20:11] <tony-o> .seen ctilmes

[20:11] <tellable6> tony-o, I saw ctilmes 2019-10-22T21:07:27Z in #raku: <ctilmes> SmokeMachine: Ah... I haven't done testing/etc. for mac

[20:11] *** wamba joined
[20:11] <tony-o> .tell ctilmes running into FATAL:  remaining connection slots are reserved for non-replication superuser connections using DB::Pg under heavy insert reps

[20:12] <tellable6> tony-o, I'll pass your message to ctilmes

[20:29] *** xinming_ left
[20:29] *** xinming_ joined
[20:30] *** donaldh left
[20:32] *** Manifest0 joined
[20:35] *** Manifest0 left
[20:37] *** pmurias left
[20:38] *** pmurias joined
[20:39] *** Manifest0 joined
[20:46] *** pmurias left
[20:46] *** chloekek left
[20:47] *** pmurias joined
[20:47] *** redable joined
[20:47] *** wamba left
[20:49] *** wamba joined
[20:50] *** stoned75 joined
[20:51] *** eseyman joined
[20:57] <SmokeMachine> https://www.irccloud.com/pastebin/CWcYDy9P/

[20:57] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/CWcYDy9P/

[20:57] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[20:58] <redable> SmokeMachine, 04===SORRY!04=== Error while compiling /code/./code.p6‚ê§'EXPORTHOW::DECLARE::model' conflicts with an existing meta-object imported into this lexical scope‚ê§at /code/./code.p6:3‚ê§------> 03use Red08‚èè04;‚ê§

[20:58] *** redable left
[21:08] *** redable joined
[21:08] <SmokeMachine> red: https://www.irccloud.com/pastebin/raw/CWcYDy9P/

[21:08] <redable> SmokeMachine, Successfully fetched the code from the provided URL

[21:08] <redable> SmokeMachine, SQL : DELETE FROM film_playlist‚ê§WHERE film_playlist.film_id = ?‚ê§BIND: [1]‚ê§

[21:09] <SmokeMachine> xinming_: ^^

[21:14] *** ctilmes joined
[21:17] <ctilmes> tony-o: You might need to up max_connections.  You can also leak connections if you don't close them (could be a bug on the DB::Pg side preventing close..)

[21:17] <tellable6> 2019-10-29T20:12:00Z #raku <tony-o> ctilmes running into FATAL:  remaining connection slots are reserved for non-replication superuser connections using DB::Pg under heavy insert reps

[21:25] <lizmat> weekly: https://news.perlfoundation.org/post/tpf-response-raku-rename

[21:25] <notable6> lizmat, Noted! (weekly)

[21:51] *** normanrockwelles joined
[21:51] *** normanrockwelles is now known as rockwellesque

[21:52] <lizmat> weekly: https://dev.to/melezhik/informal-introduction-into-sparrow6-40pa

[21:52] <notable6> lizmat, Noted! (weekly)

[21:56] <xinming_> SmokeMachine: Thanks.

[21:56] <xinming_> SmokeMachine: Is it possible to implement the tree feature in Red?

[21:57] <SmokeMachine> what's the tree feature?

[22:02] <xinming_> https://termbin.com/unlz

[22:02] <xinming_> SmokeMachine: It's kind like this.

[22:02] *** rockwellesque left
[22:04] <SmokeMachine> xinming_: something like this? 

[22:04] <SmokeMachine> https://github.com/FCO/Red/blob/392250bef219e1386900dc340bf0d77e4657b8f9/docs/api/Red.md#create

[22:04] *** redable left
[22:05] <SmokeMachine> https://github.com/FCO/Red/blob/a0355f4fc67e7200d096dfe77e9d285d50f7073a/t/24-metamodel-model.t#L143

[22:05] <xinming_> SmokeMachine: It seems a bit confusing, the belongs_to and has_one relationship is hard to distinguish

[22:05] <SmokeMachine> $ and @

[22:05] <tony-o> ctilmes: i'll see if i can debug further, i'm only ever calling .execute so i'll see if i can log .close failures

[22:05] <xinming_> @.a is has_many,  We can think $.a  is has_one, But what about the belongs_to?

[22:06] <xinming_> I'll go to bed. Thanks for your time

[22:06] *** ctilmes left
[22:07] *** ctilmes joined
[22:07] <tony-o> belongs_to can be one or more if it's modeled after dbix xinming_ 

[22:07] <tony-o> (i'm assuming it is)

[22:09] *** pmurias left
[22:09] <tyil> I currently have the following rule to match a string surrounded by double quotes: `'"' ( <-["]>* ) '"'`, is there something better (preferably one that allows escaped double quotes)

[22:11] *** ctilmes left
[22:12] <tony-o> if you don't need nested quotes you can you use an <?after

[22:13] *** epony left
[22:15] <tony-o> m: my $x = 'x "hello \"world\""   x';  say $x ~~ /'"' .+? <!after '\\'> '"'/;

[22:15] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´ÔΩ¢"hello \"world\""ÔΩ£‚ê§¬ª

[22:16] <tyil> that would work for me

[22:16] <tyil> thanks!

[22:18] *** ctilmes joined
[22:18] <tony-o> the way to do nested is with a tilde in case that comes in handy

[22:19] <ctilmes> tony-o: Hmm..  .execute just does a "get handle from pool, do thing with it, return handle to pool".  I may have to add some diagnostics

[22:20] <tony-o> i'll add them, i'm running a script that is copy all of the META info from p6c to a database so zef can query it and it's doing 881 modules * however many times the version line changed in the META

[22:20] <tony-o> that way i can do a fix instead of just complaining that it is dying :-)

[22:23] *** wamba left
[22:25] *** ctilmes left
[22:25] *** pmurias joined
[22:30] <jnthn> vrurg: I'm about-ish. About the example you showed, that's just because the default package is GLOBAL :)

[22:48] <vrurg> jnthn: I'm about to open a problem-solving ticket. It doesn't look right to me.

[22:50] *** guifa2 joined
[22:51] <jnthn> m: say ::?PACKAGE

[22:51] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(GLOBAL)‚ê§¬ª

[22:51] <jnthn> Why the problem-solving issue? So I can write the same thing I did here and close it? :)

[22:52] <jnthn> (If there's more to it than this, then sure. If that's all there is, then that's the answer.)

[22:53] <vrurg> jnthn: I'm still checking if I'm not mistaken about the outcomes of this design. 

[22:59] <vrurg> jnthn: ok, it only now that I got time to check it and though confusing it seemingly harmless. Though it still feels wrong and I would only allow `our $*foo` to be visible by dynamic lookups. Don't see the reason for current behavior.

[23:01] <vrurg> Except that it could serve as an alternative solution for people asking for $* to be EXPORTable.

[23:02] <jnthn> vrurg: It's long established that the * is removed from the name when doing lookups in GLOBAL and PROCESS.

[23:03] <jnthn> That's how $*IN resolves to $PROCESS::IN

[23:03] <vrurg> jnthn: I know. I only wonder what was the original purpose of this. Just to provide means for the above resolution?

[23:04] <jnthn> Yes; it'd be really quite annoying to have to write PROCESS::<$*IN> instead

[23:05] <jnthn> Not sure I follow the exportable thing: can't you already do `my $*foo is export`, or bind such a dynamic variable into the hash returned by sub EXPORT?

[23:07] <vrurg> m: module Foo { our $*foo is export = "foo" }; import Foo; say $*foo

[23:07] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´(Any)‚ê§¬ª

[23:08] <vrurg> I don't remember if this is a bug or intended behavior.

[23:09] <jnthn> m: module Foo { my $*foo is export = "foo" }; dd FOO::EXPORT::DEFAULT.WHO

[23:09] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't apply trait 'is export' on a my scoped variable. Only our scoped variables are supported.‚ê§at <tmp>:1‚ê§------> 3module Foo { my $*foo is export7‚èè5 = "foo" }; dd FOO::EXPORT::DEFAULT.WHO‚ê§‚Ä¶¬ª

[23:09] <jnthn> m: module Foo { our $*foo is export = "foo" }; dd FOO::EXPORT::DEFAULT.WHO

[23:09] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Could not find symbol '&DEFAULT'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:09] <jnthn> m: module Foo { our $*foo is export = "foo" }; dd Foo::EXPORT::DEFAULT.WHO

[23:09] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Stash element = {"\$*foo" => Any}‚ê§¬ª

[23:10] <jnthn> Hmm...that feels more like bug to me

[23:12] <vrurg> Anyway, when I once was thinking about exporting dynamics, some unpleasant side effects was coming into mind. Unfortunately, it was long ago and I can't remember what seemed wrong to me then.

[23:13] <vrurg> That's why this looks more appropriate to me now:

[23:14] <vrurg> m: module Foo { our $foo = "my default"; sub foo is export { if $foo == 1 { say "ok" } } }; import Foo; my $*foo = 1; foo

[23:14] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5my default' (indicated by ‚èè)‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:14] <Xliff> jnthn: Can you do multi subs with different signatures. Something like: multi sub func-with-callback( &func(Int, Str, gdouble is rw) ) and multi sub func-with-callback( &func(Str, Pointer --> Pointer) ) 

[23:14] <Xliff> ??

[23:14] <vrurg> m: module Foo { our $foo = "my default"; sub foo is export { if $*foo == 1 { say "ok" } } }; import Foo; my $*foo = 1; foo

[23:14] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´ok‚ê§¬ª

[23:15] <vrurg> m: module Foo { our $foo = "my default"; sub foo is export { if $*foo == 1 { say "ok" } else { say "not ok" } } }; import Foo; foo

[23:15] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´Dynamic variable $*foo not found‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:15] <Xliff> m: module Foo { our $foo = "my default"; sub foo is export { if ?$*foo == 1 { say "ok" } else { say "not ok" } } }; import Foo; fo

[23:15] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    fo used at line 1. Did you mean 'fc', 'so'?‚ê§‚ê§¬ª

[23:15] <Xliff> m: module Foo { our $foo = "my default"; sub foo is export { if ?$*foo == 1 { say "ok" } else { say "not ok" } } }; import Foo; foo

[23:15] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´not ok‚ê§¬ª

[23:17] <vrurg> Xliff: right, but the idea is that `our $foo` must end up in GLOBAL and be available via $*foo.

[23:17] <vrurg> Like in this simple snippet:

[23:17] <vrurg> m: our $foo = 42; say $*foo

[23:17] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´42‚ê§¬ª

[23:19] <jnthn> m: multi foo(&a:(Int)) { say "i" }; multi foo(&a:(Str)) { say "s" }; foo -> Str { }; foo -> Int { };

[23:19] <camelia> rakudo-moar 9f433da0d: OUTPUT: ¬´s‚ê§i‚ê§¬ª

[23:19] <jnthn> Xliff: ^^

[23:20] <Xliff> jnthn: Would that work without the colons and an "is native" trait?

[23:21] <jnthn> If you don't put the colon then you're trying to do an unpack

[23:21] <jnthn> This won't go well

[23:22] <Xliff> I've been using that without colons successfully for GtkPlus

[23:22] <jnthn> Hm, that surprises me

[23:22] <jnthn> I wonder if NativeCall is doing something special there

[23:22] <Xliff> I would suspect so. If I use a colon, it doesn't work.

[23:22] <jnthn> D'oh.

[23:23] <jnthn> I don't think `multi` and `is native` go together too well, though that may have been addresed.

[23:24] <Xliff> Ah. That's what I was worried about.

[23:31] *** maggotbrain joined
[23:32] <jnthn> Mostly I see modules write multis as the external interface and then call the appropriate native thing within them

[23:32] *** maggotbrain left
[23:32] <jnthn> Been a while since I wrote a native binding...

[23:32] <Xliff> Yes, but there are times when I need to call a routine that has a nullable callback.

[23:33] <Xliff> Which means I need two definitions: one with the callback and one with the callback replaced by Pointer.

[23:33] <jnthn> Maybe 'cus folks use the ones I write and then ask hard questions... :)

[23:33] <Xliff> Can I use the ones I write and still ask hard questions?! :)

[23:33] *** maggotbrain joined
[23:34] <jnthn> Apparently ;)

[23:34] <Xliff> heh

[23:34] <jnthn> Hm, is it not possible to pass something like Callable to indicate you want to pass null as the function pointer?

[23:38] <Xliff> Oh! I will have to look into that.

[23:38] <Xliff> .oO( d'oh )

[23:38] <jnthn> https://github.com/MoarVM/MoarVM/blob/master/src/core/nativecall_dyncall.c#L86 looks like it's trying to handle that on the VM side, at least

[23:38] <Xliff> jnthn++ # Thanks!

[23:39] <Xliff> jnthn: BTW -- a friendly reminder... https://github.com/jnthn/p6-io-socket-async-ssl/issues/44

[23:39] <Xliff> 8-)

[23:41] <Xliff> I have not tested with recent rakudo bins, though...

[23:51] *** epony joined
[23:57] <SmokeMachine> This is working and just left 3 more tests to fix... I think `Red:api<2>` is coming soon... :) https://www.irccloud.com/pastebin/fDWKvjBH/

