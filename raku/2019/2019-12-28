[00:01] <Xliff> I would actually write a sub that wraps ReqQueryValueExW which does all that for you so you can use it more or less like you'd expect.

[00:01] <ToddAndMargo> would you give mr. confused here another vpaste?

[00:01] <Xliff> LOL

[00:01] <Xliff> Of the wrapper?

[00:05] <ToddAndMargo> of what you sent me previously

[00:07] <Xliff> http://vpaste.net/pKKuI

[00:09] <Xliff> Ah, crap. That's wrong.

[00:09] <Xliff> http://vpaste.net/At8QP <- This one isn't

[00:13] *** sena_kun left
[00:16] <ToddAndMargo> I has to go help my wife with something.   I will have to change some stuff around

[00:16] <ToddAndMargo> Thank you!

[00:16] <Xliff> OK. Good luck!

[00:16] <Xliff> yw

[00:22] <Kaeipi> i'd appreciate any input you guys might have on https://www.reddit.com/r/rakulang/comments/egivl2/what_features_of_types_would_you_want_to_be/

[00:27] *** Kaeipi left
[00:27] *** sena_kun joined
[00:28] *** Kaeipi joined
[00:30] *** chloekek left
[00:41] *** ToddAndMargo left
[01:05] <Xliff> .tell jnthn Is there a mechanism that allows a raku script to compile raku code and emit .moarvm bytecode? If so, is there another mechanism that will allow a raku script to then execute that bytecode? EVAL, maybe?

[01:05] <tellable6> Xliff, I'll pass your message to jnthn

[01:05] *** wildtrees left
[01:41] *** vrurg_ is now known as vrurg

[02:08] *** Tirifto left
[02:14] *** sena_kun left
[02:30] *** sena_kun joined
[02:35] *** guifa2 joined
[02:54] *** stoned75 left
[03:50] *** guifa2 left
[03:51] *** guifa2 joined
[03:51] *** guifa2 left
[04:15] *** sena_kun left
[04:16] *** johnjohn101 joined
[04:20] *** marinin[t] left
[04:24] *** mahmudov left
[04:30] *** sena_kun joined
[04:56] *** Kaeipi left
[04:57] *** Kaeipi joined
[04:57] *** Kaeipi left
[04:58] *** Kaeipi joined
[05:14] *** pony is now known as no-n

[05:36] *** johnjohn101 left
[06:14] *** sena_kun left
[06:18] *** sauvin joined
[06:22] *** RobRaku joined
[06:28] *** cognomin_ joined
[06:30] *** sena_kun joined
[06:31] *** cognominal left
[07:31] *** sourceable6 left
[07:31] *** nativecallable6 left
[07:31] *** greppable6 left
[07:31] *** notable6 left
[07:31] *** releasable6 left
[07:31] *** quotable6 left
[07:31] *** benchable6 left
[07:31] *** coverable6 left
[07:31] *** tellable6 left
[07:31] *** reportable6 left
[07:31] *** bisectable6 left
[07:31] *** bloatable6 left
[07:31] *** statisfiable6 left
[07:31] *** squashable6 left
[07:31] *** shareable6 left
[07:31] *** evalable6 left
[07:31] *** committable6 left
[07:31] *** unicodable6 left
[07:32] *** statisfiable6 joined
[07:32] *** unicodable6 joined
[07:32] *** shareable6 joined
[07:32] *** benchable6 joined
[07:32] *** nativecallable6 joined
[07:32] *** quotable6 joined
[07:33] *** sourceable6 joined
[07:33] *** notable6 joined
[07:33] *** greppable6 joined
[07:33] *** committable6 joined
[07:33] *** releasable6 joined
[07:33] *** coverable6 joined
[07:33] *** squashable6 joined
[07:33] *** evalable6 joined
[07:34] *** bisectable6 joined
[07:34] *** reportable6 joined
[07:34] *** tellable6 joined
[07:34] *** bloatable6 joined
[07:47] *** holyghost joined
[07:50] *** Xliff left
[07:57] <xinming_> How do we pass  an array to    multi MAIN?

[07:58] <xinming_> For example,    multi test ('x', @array) { ... };     I try something like `raku t.p6 x a b c`,  It will only display the command line

[08:14] *** sena_kun left
[08:28] *** sena_kun joined
[08:33] <CIAvash> xinming_: You probably want `*@array`

[08:37] <xinming_> CIAvash: I don't mean that. :-)

[08:37] <xinming_> I do mean  @array.   As when we use  :@array,  We can do  --array 1 --array 2  to pass array. So, I wonder how we do positional arg

[08:41] <CIAvash> your example suggested that. so what happens to a value after the array? example: ('x', @array, 'y'). Maybe I'm wrong but I don't think MAIN has a case for that.

[08:54] <xinming_> CIAvash: If so, I think we should raise error in this case.

[08:54] <xinming_> multi test ('xx', @array) { }    raise error to mean  @array is not supported

[08:55] <xinming_> in raku multi,    test('x', @array, 'y')     etst('x', $other-object, 'y')    will work as expected

[09:07] <xinming_> SmokeMachine: https://termbin.com/qrey    <--- I think you mis-understood me, What I mean multi-column constraint is something like this.

[09:13] *** rindolf joined
[09:15] *** Voldenet left
[09:40] <xinming_> multi MAIN ('xx', @array) { }   should inform user it's error to do so.

[10:08] *** RobRaku left
[10:14] *** sena_kun left
[10:24] *** RobRaku joined
[10:28] *** sena_kun joined
[10:47] *** mahmudov joined
[11:20] *** Benett joined
[11:39] *** RobRaku left
[12:14] *** sena_kun left
[12:27] *** Tirifto joined
[12:29] *** sena_kun joined
[12:40] *** Voldenet joined
[12:40] *** Voldenet left
[12:40] *** Voldenet joined
[13:04] <Tirifto> Hello! Is my understanding correct that prefixing a variable's name with a colon in subroutine invocation passes a pair to the subroutine, whose key is the variable's name and whose value is the variable's value? (Thus requiring a variable to exist in the current scope with a name identical to the key expected by the subroutine which takes named arguments?)

[13:19] <sena_kun> Tirifto: yes, you are correct.

[13:23] <Tirifto> sena_kun: Thanks!

[13:33] <xinming_> m: my %h = ("a" .. "z"); %h.perl.say; for %h<>:p.sort(*.key) -> ($k, $v) { [$k, $v].perl.say; }

[13:33] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´{:a("b"), :c("d"), :e("f"), :g("h"), :i("j"), :k("l"), :m("n"), :o("p"), :q("r"), :s("t"), :u("v"), :w("x"), :y("z")}‚ê§Too few positionals passed to '<anon>'; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:33] <xinming_> In this case, How do we unpack the pair produced with .sort method?

[13:37] <xinming_> as far as I tried,

[13:37] <xinming_> m: my %h = ("a" .. "z"); for %h<>:p.sort(*.key) -> (:$key, :$value) { $key.perl.say; }

[13:37] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´"a"‚ê§"c"‚ê§"e"‚ê§"g"‚ê§"i"‚ê§"k"‚ê§"m"‚ê§"o"‚ê§"q"‚ê§"s"‚ê§"u"‚ê§"w"‚ê§"y"‚ê§¬ª

[13:37] <xinming_> This worked, But I still wish to know wether it's possible to do something like    -> ($key, $value) directly.

[13:39] <xinming_> Fianlly got it. :-)

[13:39] <sena_kun> m: my %h = ("a" .. "z"); for %h.sort(*.key) -> (:$key, :$value) { $key.perl.say; }

[13:39] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´"a"‚ê§"c"‚ê§"e"‚ê§"g"‚ê§"i"‚ê§"k"‚ê§"m"‚ê§"o"‚ê§"q"‚ê§"s"‚ê§"u"‚ê§"w"‚ê§"y"‚ê§¬ª

[13:40] *** evalable6 left
[13:40] *** evalable6 joined
[14:13] *** sena_kun left
[14:15] *** mahmudov left
[14:26] <SmokeMachine> xinming_: no, it's not working yet...

[14:29] *** sena_kun joined
[14:41] *** Tirifto left
[14:51] *** cpan-raku left
[14:52] *** cpan-raku joined
[14:52] *** cpan-raku left
[14:52] *** cpan-raku joined
[15:14] <Kaeipi> are there better ways to check if code is being run at compile-time than checking for something like DYNAMIC::<$*W>:exists?

[15:15] *** veesh left
[15:28] *** veesh joined
[15:40] *** chloekek joined
[15:53] *** mahmudov joined
[16:14] *** sena_kun left
[16:24] <AlexDaniel> u: ìÖ≠

[16:24] <unicodable6> AlexDaniel, U+1316D EGYPTIAN HIEROGLYPH G039 [Lo] (ìÖ≠)

[16:24] <AlexDaniel> u: EGYPTIAN HIEROGLYPH

[16:24] <unicodable6> AlexDaniel, U+13000 EGYPTIAN HIEROGLYPH A001 [Lo] (ìÄÄ)

[16:24] <unicodable6> AlexDaniel, U+13001 EGYPTIAN HIEROGLYPH A002 [Lo] (ìÄÅ)

[16:24] <unicodable6> AlexDaniel, 1080 characters in total: https://gist.github.com/3b54ca491ec800cb1a4f0b6328b965bc

[16:29] *** sena_kun joined
[16:44] *** Tirifto joined
[17:20] *** mahmudov left
[17:26] *** mahmudov joined
[17:31] *** chloekek left
[17:44] *** Manifest0 joined
[17:50] *** Poohman joined
[17:50] <Poohman> Hello all

[17:51] <Poohman> m: class A { has Str $.b is rw;} A.^attributes;

[17:51] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3class A { has Str $.b is rw;}7‚èè5 A.^attributes;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§   ‚Ä¶¬ª

[17:51] <Poohman> m: class A { has Str $.b is rw;}; A.^attributes;

[17:51] <camelia> rakudo-moar 672c5d403: ( no output )

[17:51] <Poohman> m: class A { has Str $.b is rw;}; say A.^attributes;

[17:51] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(Str $!b)‚ê§¬ª

[17:52] <Poohman> hello all

[17:52] <Poohman> why is the ^attributes showing $!b instead of $.b??

[17:55] *** chloekek joined
[17:59] *** wildtrees joined
[18:06] *** rindolf left
[18:13] *** sena_kun left
[18:18] *** rindolf joined
[18:27] <lizmat> Poohman: because $!b is the real name of the attribute

[18:27] <lizmat> "has $.b" signals that an accessor should be made for the attribute

[18:28] <lizmat> using $.b in code, is just syntactic sugar for "self.b", with the advantage that it interpolates

[18:28] *** sena_kun joined
[18:30] <Poohman> thanks lizmat - what do you mean by interpolates?

[18:30] <lizmat> say "the value of b is $.b"

[18:31] <lizmat> vs:

[18:31] <lizmat> say "the value of b is {self.b}"

[18:33] <Poohman> ok

[18:37] <sarna> hey, I want to be able to take any digits from a number, what would be the optimal way of doing this? in a static language I'd turn that int into a string and then into a char array, and then index into it

[18:37] <sarna> but I think that approach would be suboptimal in raku

[18:37] <lizmat> m: dd "foobar".chomp   # sarna

[18:37] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´"foobar"‚ê§¬ª

[18:37] <lizmat> m: dd "foobar".comb   # oops

[18:38] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´("f", "o", "o", "b", "a", "r").Seq‚ê§¬ª

[18:38] <sarna> m: dd 1234.comb

[18:38] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´("1", "2", "3", "4").Seq‚ê§¬ª

[18:38] <lizmat> m: for "foobar".comb -> $letter { say $letter }

[18:38] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´f‚ê§o‚ê§o‚ê§b‚ê§a‚ê§r‚ê§¬ª

[18:38] <sarna> ha, thanks lizmat :D

[18:47] *** RobRaku joined
[18:48] <chloekek> You can also use $.b when b is a normal user-defined method.

[18:48] <chloekek> p6: class C { method m { "m" }; method n { "l $.m n" } }; C.new.n.say

[18:48] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´l m n‚ê§¬ª

[18:52] <lizmat> personally, I dislike using that that way, but yeah, you can  :-)

[18:53] <lizmat> I doubt it will be in the RBP book  :-)

[18:55] <sarna> m: dd [1,2][*-2 .. *-1]; dd [1][*-2] or 0; dd ([1][*-2 .. *-1] or [1][*-1])

[18:55] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 0 in sink context (line 1)‚ê§(1, 2)‚ê§Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -1, range => "0..^Inf", comment => Any), backtrace => Backtrace.new)‚ê§(Failure.ne‚Ä¶¬ª

[18:55] <sarna> heck

[18:55] <sarna> m: say [1,2][*-2 .. *-1]; say [1][*-2] or 0; say ([1][*-2 .. *-1] or [1][*-1])

[18:55] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§(1 2)‚ê§Useless use of constant integer 0 in sink context (line 1)‚ê§Effective index out of range. Is: -1, should be in 0..^Inf‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:57] <sarna> m: say [1,2][*-2 .. *-1]; say ([1][*-2] or 0); say ([1][*-2 .. *-1] or [1][*-1])

[18:57] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(1 2)‚ê§Effective index out of range. Is: -1, should be in 0..^Inf‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§0‚ê§¬ª

[18:57] * sarna groans

[18:57] <sarna> m: say [1,2][*-2 .. *-1]; say ([1][*-2] or 0); 

[18:57] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(1 2)‚ê§0‚ê§¬ª

[18:57] <sarna> m: say ([1][*-2 .. *-1] or [1][*-1])

[18:57] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Effective index out of range. Is: -1, should be in 0..^Inf‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:58] <sarna> how to make this one work? the third one

[18:58] <lizmat> m: [1][*-2]

[18:58] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Effective index out of range. Is: -1, should be in 0..^Inf‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:58] <lizmat> m: dd [1,2][*-2]

[18:58] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Int element = 1‚ê§¬ª

[18:59] <lizmat> the list is too small to handle * - 2

[18:59] <sarna> yes, and if the list is too small, I want to give it a default value

[18:59] <sarna> m:  say ([1][*-2] or 0); 

[18:59] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´0‚ê§¬ª

[18:59] <sarna> like here

[18:59] <sarna> but I want to do this with a range (a slice?) instead of just one element

[19:00] <lizmat> m: dd [1][*-2 .. *-1]

[19:00] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -1, range => "0..^Inf", comment => Any), backtrace => Backtrace.new), 1)‚ê§¬ª

[19:00] <lizmat> hmmm

[19:01] <sarna> I wonder if that's possible at all :D

[19:01] <lizmat> m: dd [1][*-2 .. *-1] of [1][*-1]

[19:01] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Bogus statement‚ê§at <tmp>:1‚ê§------> 3dd [1][*-2 .. *-1] o7‚èè5f [1][*-1]‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª

[19:01] <lizmat> m: dd [1][*-2 .. *-1] or [1][*-1]

[19:01] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -1, range => "0..^Inf", comment => Any), backtrace => Backtrace.new), 1)‚ê§¬ª

[19:01] <lizmat> m: dd [1][*-4 .. *-1] or [1][*-1]

[19:01] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -3, range => "0..^Inf", comment => Any), backtrace => Backtrace.new), Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -2, range => "0..^Inf", co‚Ä¶¬ª

[19:02] <sarna> m: my @l = [1]; say ([ @l[*-2] or 0, @l[*-1] or 0])

[19:02] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´[0 1]‚ê§¬ª

[19:02] <sarna> :D

[19:03] <lizmat> :-)

[19:03] <sarna> m: my @l = [1]; say [ @l[*-5] or 0 .. @l[*-1] or 0] # unfortunately I get two elements with this one as well

[19:03] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´[0 1]‚ê§¬ª

[19:03] <sarna> (thought I'd get five or something)

[19:03] *** libertas left
[19:11] *** Xliff joined
[19:11] <Xliff> .

[19:37] <Poohman> chloekek: thanks

[19:42] <Poohman> will self.new(|%args) work??

[19:42] <Poohman> I want to instantiate a class inside a member function

[19:45] <lizmat> Poohman: that should generally work, yes

[19:45] <lizmat> if your class.new accepts named arguments, is it would by default

[19:46] <Poohman> I keep getting "cannot look up objects in a xxxx type object"

[19:51] *** wamba joined
[19:54] <lizmat> objects?  not attributes 

[19:54] <lizmat> ?

[19:54] *** Tirifto left
[19:54] <lizmat> m: class A { has $!a; method a() { $!a } }; A.a

[19:54] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Cannot look up attributes in a A type object‚ê§  in method a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:54] <lizmat> Poohman:  that's the one ?  ^^^

[19:55] <Poohman> lizmat : yes

[19:55] <Xliff> m: my $sub = -> |c { c.gist.say }; $sub('a', 2, œÄ)

[19:55] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´\("a", 2, 3.141592653589793e0)‚ê§¬ª

[19:55] <lizmat> then you probably forgot to instantiate an object somewhere

[19:56] <Xliff> m: my $sub = -> |c { |c.gist.say }; $sub('a', 2, œÄ)

[19:56] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´\("a", 2, 3.141592653589793e0)‚ê§¬ª

[19:56] <Xliff> m: my $sub = -> |c { |c.gist.say }; $sub('a', [1, 2, 3], œÄ)

[19:56] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´\("a", [1, 2, 3], 3.141592653589793e0)‚ê§¬ª

[19:56] <Poohman> im trying to instantiate it inside method a

[19:57] <Xliff> m: sub printargs( *@a ) { .gist.say for @a }; my $sub = -> |c { printargs(|c) }; $sub('a', [1, 2, 3], œÄ)

[19:57] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´a‚ê§1‚ê§2‚ê§3‚ê§3.141592653589793‚ê§¬ª

[19:57] <Xliff> m: sub printargs( +@a ) { .gist.say for @a }; my $sub = -> |c { printargs(|c) }; $sub('a', [1, 2, 3], œÄ)

[19:57] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´a‚ê§[1 2 3]‚ê§3.141592653589793‚ê§¬ª

[19:57] <lizmat> Poohman: maybe make a gist ?

[20:10] <Poohman> m: class B {has $.a is rw; method b() {self.new(a => "test")}}; my B $temp; $temp.b();say $temp.a;

[20:10] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Cannot look up attributes in a B type object‚ê§  in method a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:11] <lizmat> Poohman: you probably want 'my B $temp .= new'  rather than 'my B $temp'

[20:12] <lizmat> the latter just sets a type constraint on the $temp, it does *not* create an object

[20:12] <lizmat> m: my Int $a; say $a

[20:12] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(Int)‚ê§¬ª

[20:13] <Poohman> m: class B {has $.a is rw; method b() {self.new(a => "test")}}; my B $temp .= new; $temp.b();say $temp.a;

[20:13] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(Any)‚ê§¬ª

[20:13] <Poohman> but in that case new will be used twice

[20:14] <Poohman> is that ok?

[20:14] <lizmat> hmmm.... good point... lemme look closer  :-)

[20:14] *** sena_kun left
[20:15] <lizmat> I guess I'm not sure what you want to achieve

[20:16] <lizmat> do you want to achieve an alternate object instantiation method ?

[20:16] <lizmat> m: class A { has $.a; method b() { self.new( a => "test" ) } }; dd A.b

[20:16] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´A.new(a => "test")‚ê§¬ª

[20:20] *** Xliff left
[20:23] <Poohman> Lizmat: Im trying to introspect the data member attributes and generate the user input and then instantiate the object

[20:24] <lizmat> but how can you inspect data members if you haven't instantiated yet ?

[20:25] <Poohman> im just checking the datatypes etc and then im trying to get the corresponding user input - for example if the data member is of type Date, I make sure the user input is of the correct type

[20:26] <Poohman> then using the generated hash im trying to instantiate

[20:28] <Poohman> m: class A { has $.a; method b() { self.new( a => "test" ) }; say self }; my A $temp; $temp.b();

[20:28] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§'self' used where no object is available‚ê§at <tmp>:1‚ê§------> 3od b() { self.new( a => "test" ) }; say 7‚èè5self }; my A $temp; $temp.b();‚ê§    expecting any of:‚ê§        argument list‚ê§       ‚Ä¶¬ª

[20:29] <Poohman> m: class A { has $.a; method b() { self.new( a => "test" ); say self }}; my A $temp; $temp.b();

[20:29] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(A)‚ê§¬ª

[20:29] <Poohman> m: class A { has $.a; method b() { self.new( a => "test" ); say self.a; }}; my A $temp; $temp.b();

[20:29] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Cannot look up attributes in a A type object‚ê§  in method a at <tmp> line 1‚ê§  in method b at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:30] <lizmat> self inside method "b" is a type object.

[20:30] <lizmat> it's *not* an instantiated object

[20:30] *** sena_kun joined
[20:30] <Poohman> ok

[20:30] <lizmat> and a type object does not have any attributes

[20:30] <lizmat> which is what the error message is trying to tell you  :-)

[20:31] <lizmat> my A $temp; $temp.b will *not* automagically make $temp an instantiated object

[20:31] <lizmat> you *can* do that, if that's what you want

[20:32] <lizmat> m: class A { has $.a; method b(\SELF:U:) { SELF = self.new(a => "test") } }; my A $foo; $foo.b; dd $foo

[20:32] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix = instead.‚ê§Did you make a mistake in Pod syntax?‚ê§at <tmp>:1‚ê§------> 3A { has $.a; method b(\SELF:U:) { SELF =7‚èè5 self.new(a => "test") } }; m‚Ä¶¬ª

[20:33] <lizmat> m: class A { has $.a; method b(\SELF:) { SELF = self.new(a => "test") } }; my A $foo; $foo.b; dd $foo

[20:33] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´A $foo = A.new(a => "test")‚ê§¬ª

[20:34] <lizmat> \SELF: means assigning the name SELF to the un-decontainerized invocant, which you can assign to

[20:35] <lizmat> perhaps better readable:

[20:35] <lizmat> m: class A { has $.a; method b($invocant is rw:) { $invocant = self.new(a => "test") } }; my A $foo; $foo.b; dd $foo

[20:35] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´A $foo = A.new(a => "test")‚ê§¬ª

[20:37] <Poohman>  m: class A { has $.a; method b($invocant is rw:) { $invocant = self.new(a => "test") } }; my A $foo; $foo.b; dd $foo; say $foo.a;

[20:37] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´A $foo = A.new(a => "test")‚ê§test‚ê§¬ª

[20:41] *** RobRaku left
[20:42] <Poohman> was reading up on $invocant

[20:42] <Poohman> cool

[20:42] <Poohman> lizmat: thanks

[21:11] *** RobRaku joined
[21:27] *** rindolf left
[21:55] *** Kaeipi left
[21:56] *** Kaeipi joined
[22:07] <lizmat> m: dd ‚àûi   # expressiveness  :-)

[22:07] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´<0+Inf\i>‚ê§¬ª

[22:09] <chloekek> p6: dd 0+Inf\i

[22:09] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´<0+Inf\i>‚ê§¬ª

[22:14] *** sena_kun left
[22:25] *** ircforandroid joined
[22:25] *** ircforandroid left
[22:28] *** sena_kun joined
[22:35] *** stoned75 joined
[22:35] *** wamba left
[22:36] <chloekek> bisectable6: class A { }; class B { }; multi sub infix:<cmp>(A $a, B $b) { Order::More }; multi sub infix:<cmp>(B $b, A $a) { Order::Less }; [A.new, B.new].sort.say

[22:36] <bisectable6> chloekek, On both starting points (old=2015.12 new=5c65a12) the exit code is 0 and the output is identical as well

[22:36] <bisectable6> chloekek, Output on both points: ¬´(A.new B.new)‚ê§¬ª

[22:37] *** RobRaku left
[22:39] <chloekek> bisectable6: class A { }; class B { }; multi sub infix:<cmp>(A $a, B $b) { Order::More }; multi sub infix:<cmp>(B $b, A $a) { Order::Less }; [B.new, A.new].sort.say

[22:39] <bisectable6> chloekek, On both starting points (old=2015.12 new=5c65a12) the exit code is 0 and the output is identical as well

[22:39] <bisectable6> chloekek, Output on both points: ¬´(A.new B.new)‚ê§¬ª

[22:39] *** libertas joined
[22:51] <chloekek> p6: multi f(Int $x) { say 'Int' }; sub g($x) { f($x) }; sub h { multi f(Str $x) { say 'Str' }; g('a') }; h

[22:51] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´Cannot resolve caller f(Str:D); none of these signatures match:‚ê§    (Int $x)‚ê§  in sub g at <tmp> line 1‚ê§  in sub h at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:01] *** stoned75 left
[23:06] *** kensanata joined
[23:14] <SmokeMachine> xinming_: https://github.com/FCO/Red/blob/master/t/39-relationship-multiple-columns.t

[23:17] *** kensanata left
[23:20] <SmokeMachine> xinming_: now it's implemented... :)

[23:22] *** chloekek left
[23:28] *** sena_kun left
