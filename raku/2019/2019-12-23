[00:35] *** finanalyst left
[00:43] <Geth_> ¦ ecosystem/bbkr-patch-1: 5b74a410cf | (Pawel Pabian)++ (committed using GitHub Web editor) | META.list

[00:43] <Geth_> ¦ ecosystem/bbkr-patch-1: Added HomoGlypher - tool for handling similarly looking characters in strings.

[00:43] <Geth_> ¦ ecosystem/bbkr-patch-1: review: https://github.com/perl6/ecosystem/commit/5b74a410cf

[00:44] <Geth_> ¦ ecosystem: bbkr++ created pull request #477: Added HomoGlypher - tool for handling similarly looking characters in strings

[00:44] <Geth_> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/477

[01:17] *** sauvin_ is now known as sauvin

[01:20] *** Altai-man_ joined
[01:22] *** sena_kun left
[01:26] *** TreyHarris left
[01:39] *** TreyHarris joined
[01:56] *** kalkin-- joined
[01:59] *** kalkin- left
[02:26] *** leont left
[03:21] *** sena_kun joined
[03:23] *** Altai-man_ left
[04:23] *** bloatable6 left
[04:23] *** bisectable6 left
[04:23] *** sourceable6 left
[04:23] *** greppable6 left
[04:23] *** committable6 left
[04:23] *** coverable6 left
[04:23] *** shareable6 left
[04:23] *** releasable6 left
[04:23] *** reportable6 left
[04:23] *** nativecallable6 left
[04:23] *** squashable6 left
[04:23] *** quotable6 left
[04:23] *** unicodable6 left
[04:23] *** notable6 left
[04:23] *** statisfiable6 left
[04:23] *** benchable6 left
[04:24] *** shareable6 joined
[04:24] *** nativecallable6 joined
[04:24] *** squashable6 joined
[04:24] *** committable6 joined
[04:25] *** releasable6 joined
[04:25] *** reportable6 joined
[04:25] *** coverable6 joined
[04:25] *** unicodable6 joined
[04:25] *** notable6 joined
[04:26] *** statisfiable6 joined
[04:26] *** bloatable6 joined
[04:26] *** sourceable6 joined
[04:26] *** benchable6 joined
[04:26] *** marcusr left
[04:26] *** bisectable6 joined
[04:26] *** quotable6 joined
[04:26] *** greppable6 joined
[04:29] *** cpan-raku left
[04:31] *** cpan-raku joined
[04:31] *** cpan-raku left
[04:31] *** cpan-raku joined
[05:20] *** Altai-man_ joined
[05:23] *** sena_kun left
[06:05] <Xliff> m: use NativeCall; BEGIN my $bit_type := uint64; class A is repr<CStruct> { has $bit_type $.a }; A.new( a => 42 ); A.gist.say

[06:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3class A is repr<CStruct> { has $bit_type7⏏5 $.a }; A.new( a => 42 ); A.gist.say␤    expecting any of:␤        infix␤        infix stopper␤       …»

[06:05] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a }; A.new( a => 42 ); A.gist.say

[06:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «(A)␤»

[06:05] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a }; A.new( a => 42 ); A.a.say

[06:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot look up attributes in a A type object␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:05] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a }; A.new( a => 42 ); A.new.gist.say

[06:05] <camelia> rakudo-moar 672c5d403: OUTPUT: «A.new(a => 0)␤»

[06:06] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$!a) {}; }; A.new( a => 42 ); A.new.gist.say

[06:06] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot unbox a type object (Any) to int.␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:06] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { $!a = $a }; }; A.new( a => 42 ); A.new.gist.say

[06:06] <camelia> rakudo-moar 672c5d403: OUTPUT: «Cannot unbox a type object (Any) to int.␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:07] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a }; }; A.new( a => 42 ); A.new.gist.say

[06:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «42␤(Any)␤A.new(a => 0)␤»

[06:07] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a }; }; A.new(); A.new.gist.say

[06:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «(Any)␤(Any)␤A.new(a => 0)␤»

[06:07] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a }; }; A.new( a => 42); A.new.gist.say

[06:07] <camelia> rakudo-moar 672c5d403: OUTPUT: «42␤(Any)␤A.new(a => 0)␤»

[06:08] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a }; $!a = $a }; A.new( a => 42 ); A.new.gist.say

[06:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $!a used where no 'self' is available␤at <tmp>:1␤------> 3a; submethod BUILD (:$a) { say $a }; $!a7⏏5 = $a }; A.new( a => 42 ); A.new.gist.sa␤»

[06:08] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a; $!a = $a }; A.new( a => 42 ); A.new.gist.say

[06:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3= $a }; A.new( a => 42 ); A.new.gist.say7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loo…»

[06:08] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a; $!a = $a }; }; A.new( a => 42 ); A.new.gist.say

[06:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «42␤Cannot unbox a type object (Any) to int.␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤(Any)␤»

[06:08] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a; }; }; A.new( a => 42 ); A.new.gist.say

[06:08] <camelia> rakudo-moar 672c5d403: OUTPUT: «42␤(Any)␤A.new(a => 0)␤»

[06:09] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$a) { say $a if $a.defined }; }; A.new( a => 42 ); A.new.gist.say

[06:09] <camelia> rakudo-moar 672c5d403: OUTPUT: «42␤A.new(a => 0)␤»

[06:09] <Xliff> m: use NativeCall; BEGIN constant bitType := uint64; class A is repr<CStruct> { has bitType $.a; submethod BUILD (:$!a) {}; }; A.new( a => 42 ).gist.say

[06:09] <camelia> rakudo-moar 672c5d403: OUTPUT: «A.new(a => 42)␤»

[06:17] *** marcusr joined
[06:20] *** marcusr left
[06:21] *** marcusr joined
[06:47] <Geth_> ¦ ecosystem: 5b74a410cf | (Pawel Pabian)++ (committed using GitHub Web editor) | META.list

[06:47] <Geth_> ¦ ecosystem: Added HomoGlypher - tool for handling similarly looking characters in strings.

[06:47] <Geth_> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/5b74a410cf

[06:47] <Geth_> ¦ ecosystem: f34a860868 | (Jonathan Stowe)++ (committed using GitHub Web editor) | META.list

[06:47] <Geth_> ¦ ecosystem: Merge pull request #477 from perl6/bbkr-patch-1

[06:47] <Geth_> ¦ ecosystem: 

[06:47] <Geth_> ¦ ecosystem: Added HomoGlypher - tool for handling similarly looking characters in strings

[06:47] <Geth_> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/f34a860868

[07:01] *** rindolf joined
[07:21] *** sena_kun joined
[07:23] *** Altai-man_ left
[07:32] *** rindolf left
[07:39] *** hacktor left
[08:03] *** mid_laptop joined
[08:12] <Geth_> ¦ doc: f788c9dedc | (JJ Merelo)++ | doc/Language/terms.pod6

[08:12] <Geth_> ¦ doc: Merges code and deindents

[08:12] <Geth_> ¦ doc: 

[08:12] <Geth_> ¦ doc: Since there's no difference now after 6.d. Refs #2632. Also eliminates a reference to 6.d.PREVIEW refs #2687

[08:12] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/f788c9dedc

[08:12] <Geth_> ¦ doc: 1d223c2fc5 | (JJ Merelo)++ | doc/Type/Complex.pod6

[08:12] <Geth_> ¦ doc: Fixes example

[08:12] <Geth_> ¦ doc: 

[08:12] <Geth_> ¦ doc: And also adds example of fixed complex exponentiation, refs #2632

[08:12] <Geth_> ¦ doc: review: https://github.com/Raku/doc/commit/1d223c2fc5

[08:26] *** rindolf joined
[08:33] *** kensanata joined
[08:40] *** mid_laptop left
[08:41] *** mid_laptop joined
[08:47] <Geth_> ¦ advent: nige123++ created pull request #46: Update schedule

[08:47] <Geth_> ¦ advent: review: https://github.com/Raku/advent/pull/46

[08:53] *** kensanata left
[08:58] *** rindolf left
[08:59] *** kensanata joined
[09:02] *** kensanata left
[09:04] <Geth_> ¦ advent: 885757425d | (Nigel Hamilton)++ (committed using GitHub Web editor) | raku-advent-2020/schedule

[09:04] <Geth_> ¦ advent: Update schedule

[09:04] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/885757425d

[09:04] <Geth_> ¦ advent: 0b650f611e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | raku-advent-2020/schedule

[09:04] <Geth_> ¦ advent: Merge pull request #46 from nige123/patch-4

[09:04] <Geth_> ¦ advent: 

[09:04] <Geth_> ¦ advent: Update schedule

[09:05] <Geth_> ¦ advent: review: https://github.com/Raku/advent/commit/0b650f611e

[09:20] *** kensanata joined
[09:20] *** kensanata left
[09:20] *** Altai-man_ joined
[09:21] *** rindolf joined
[09:21] *** kensanata joined
[09:23] *** sena_kun left
[09:24] *** chloekek joined
[09:24] <chloekek> .

[09:24] <Xliff> chleokek: ,

[09:25] <Xliff> Don't mind me. I'm sleepless...and not in Seattle!

[09:25] <chloekek> p6: use europe; say 1,2 + 3,4;

[09:25] <camelia> rakudo-moar 672c5d403: OUTPUT: «===SORRY!===␤Could not find europe at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/share/per…»

[09:26] <chloekek> Hmm, no comma for decimal point. But I can write my string literals in Dutch!

[09:26] <chloekek> p6: say „Hallo, wereld!“

[09:26] <camelia> rakudo-moar 672c5d403: OUTPUT: «Hallo, wereld!␤»

[09:26] <Xliff> Try doing that in C#

[09:27] <Xliff> Progress is slow...but at least it is progress.

[09:27] <chloekek> I once wrote a C# parser in Haskell and I called the parsing function parseC# because you can put # at the end of an identifier.

[09:28] <Xliff> Until you can do C♯ ... it's a crude imitator.

[09:28] <chloekek> p6: sub parse-C♯ { }

[09:28] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub parse-C7⏏5♯ { }␤    expecting any of:␤        new name to be defined␤»

[09:29] *** kensanata left
[09:29] <Xliff> *gasp*

[09:29] <Xliff> I'm shocked!

[09:29] *** kensanata joined
[09:29] <Xliff> m: parse-C# { }

[09:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    parse-C used at line 1␤␤»

[09:29] <Xliff> m: parse-C♯ { }

[09:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3parse-C7⏏5♯ { }␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement mod…»

[09:29] <chloekek> p6: sub postfix:<♯>($x) { $x }; sub parse-C { 123 }; say parse-C♯

[09:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «123␤»

[09:30] <Xliff> Not marked as a letter or a number in the parser.

[09:30] <Xliff> m: parse-Cα { }

[09:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    parse-Cα used at line 1␤␤»

[09:30] <chloekek> It’s a musical symbol.

[09:30] <Xliff> m: sub parse-Cα { }

[09:30] <camelia> rakudo-moar 672c5d403: ( no output )

[09:30] <chloekek> Alpha is a letter so it is allowed.

[09:30] <Xliff> Yes. That was what I was getting at.

[09:31] <chloekek> I think musical symbols are in the category Math Symbol

[09:31] <Xliff> Yeah. OK. That's why it wouldn't work.

[09:31] <chloekek> Some are in Other Symbol it seems.

[09:32] <chloekek> Lol there is QUARTER NOTE but also MUSICAL SYMBOL QUARTER NOTE

[09:32] <chloekek> p6: say ‘♩’ eq ‘𝅘𝅥’

[09:32] <camelia> rakudo-moar 672c5d403: OUTPUT: «False␤»

[09:33] *** kensanata left
[09:33] *** kensanata joined
[09:34] <Xliff> Aannd....back to more sleepless I go.

[09:34] *** kensanata left
[09:34] <Xliff> I have to wake up for work in 4 hours. :(

[09:36] <chloekek> p6: .say for (0 .. 0x10FFFF).map(*.chr).grep(*.uniname.starts-with(‘MUSICAL SYMBOL ’))

[09:36] <camelia> rakudo-moar 672c5d403: OUTPUT: «𝄀␤𝄁␤𝄂␤𝄃␤𝄄␤𝄅␤𝄆␤𝄇␤𝄈␤𝄉␤𝄊␤𝄋␤𝄌␤𝄍␤𝄎␤𝄏␤𝄐␤𝄑␤𝄒␤𝄓␤𝄔␤𝄕␤𝄖␤𝄗␤𝄘␤𝄙␤𝄚␤𝄛␤𝄜␤𝄝␤𝄞␤𝄟␤𝄠␤𝄡␤𝄢␤𝄣…»

[09:38] <chloekek> p6: say (0 .. 0x10FFFF).map(*.chr).grep(*.uniname.starts-with(‘MUSICAL SYMBOL ’)).elems

[09:38] <camelia> rakudo-moar 672c5d403: OUTPUT: «231␤»

[09:40] <lizmat> afk&

[09:41] *** kensanata joined
[09:48] *** vividsnow joined
[10:01] <cpan-raku> New module released to CPAN! Crypt::SodiumPasswordHash (0.0.1) by 03JSTOWE

[10:04] <chloekek> Where is the parser for nqp?

[10:06] <moritz> in the nqp repo, src/NQP/Grammar.nqp

[10:10] <chloekek> Ah cool. Thanks.

[10:16] <cpan-raku> New module released to CPAN! Crypt::AnyPasswordHash (0.0.3) by 03JSTOWE

[10:30] *** Xliff left
[10:30] *** Xliff_ joined
[10:37] *** pilne left
[10:40] *** xinming left
[10:41] *** xinming joined
[10:58] *** kensanata left
[11:09] *** wamba joined
[11:11] *** finanalyst joined
[11:11] *** xinming left
[11:11] *** xinming joined
[11:21] *** sena_kun joined
[11:23] *** Altai-man_ left
[11:37] *** kensanata joined
[11:59] *** stoned75 joined
[12:09] *** leont joined
[12:13] <lizmat> PSA: the last Rakudo Weekly of 2019 will be published tomorrow morning

[12:19] *** stoned75 left
[12:37] <chloekek> p6: BEGIN { f; }; sub f { }

[12:37] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    f used at line 1␤␤»

[12:37] *** finanalyst left
[12:37] <chloekek> p6: sub f { }; BEGIN { f; }

[12:37] <camelia> rakudo-moar 672c5d403: ( no output )

[12:38] <chloekek> p6: sub f { g; }; sub g { }

[12:38] <camelia> rakudo-moar 672c5d403: ( no output )

[12:38] <chloekek> p6: sub f { g; };

[12:38] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    g used at line 1␤␤»

[12:38] <chloekek> This is interesting; compiling a subroutine definition sees subroutines defined later.

[12:40] <chloekek> BEGIN obviously cannot. What would happen if g were an infix operator instead?

[12:40] <chloekek> That seems to work as well. Then, how is precedence done? Are subroutine bodies not parsed immediately?

[12:41] <chloekek> Oh, actually it doesn’t work with infix operators.

[12:55] <cpan-raku> New module released to CPAN! Method::Also (0.0.5) by 03ELIZABETH

[13:03] <cpan-raku> New module released to CPAN! RedX::HashedPassword (0.0.4) by 03JSTOWE

[13:20] *** Altai-man_ joined
[13:21] <leont> Does the «token element:<foo>» syntax have a particular name?

[13:23] *** sena_kun left
[13:36] *** kalkin-- is now known as kalkin-

[13:47] *** mahmudov joined
[13:49] *** mid_laptop left
[13:56] <chloekek> leont: assuming you mean token element:sym<foo>, they’re called proto regexes in the manual.

[14:00] *** wamba left
[14:15] *** lucasb joined
[14:35] <cpan-raku> New module released to CPAN! Crypt::AnyPasswordHash (0.0.4) by 03JSTOWE

[14:48] *** mensvaga joined
[14:56] *** wamba joined
[15:21] *** sena_kun joined
[15:23] *** Altai-man_ left
[15:28] *** kensanata left
[15:36] <cpan-raku> New module released to CPAN! MeCab (0.0.17) by 03TITSUKI

[15:36] <cpan-raku> New module released to CPAN! MeCab (0.0.16) by 03TITSUKI

[15:51] *** johnjohn101 left
[15:58] *** dotdotdot left
[15:58] *** rindolf left
[15:59] <cpan-raku> New module released to CPAN! Algorithm::LibSVM (0.0.11) by 03TITSUKI

[16:01] *** rindolf joined
[16:02] *** dotdotdot joined
[16:07] <cpan-raku> New module released to CPAN! Chart::Gnuplot (0.0.16) by 03TITSUKI

[16:10] *** jmerelo joined
[16:14] <cpan-raku> New module released to CPAN! Random::Choice (0.0.7) by 03TITSUKI

[16:15] *** rindolf left
[16:41] *** chloekek left
[17:07] *** rindolf joined
[17:21] *** Altai-man_ joined
[17:23] *** sena_kun left
[17:41] *** chloekek joined
[17:46] *** stoned75 joined
[17:46] *** unclechu left
[17:46] *** matiaslina left
[17:46] *** BlackChaosNL[m] left
[17:46] *** CIAvash left
[17:46] *** uzl[m] left
[17:46] *** Demos[m] left
[17:46] *** AlexDaniel` left
[17:46] *** rba[m] left
[17:47] *** Nasrudin left
[18:01] *** kensanata joined
[18:02] *** CIAvash joined
[18:12] *** stoned75 left
[18:19] <chloekek> Is it possible for a grammar/regex to modify the input string at some point during parsing, so that a different string will be used to continue parsing?

[18:22] <chloekek> e.g. ‘foo’ ‘(’ <expr> ’)’ { my $new-string = EVAL $<expr>; <.continue-with($new-string ~ $current-remainder)> }

[18:24] <rindolf> chloekek: hi - no idea here

[18:25] <kalkin-> m: say "1".succ; say "¹".succ; say "⒈".succ 

[18:25] <camelia> rakudo-moar 672c5d403: OUTPUT: «2␤¹␤⒈␤»

[18:26] <kalkin-> why it does not work with ¹ & ⒈?

[18:28] <[Coke]> ¹ is only a superscript where it makes sense.

[18:28] <[Coke]> er.

[18:28] <[Coke]> only a *power*

[18:29] <[Coke]> m: say 1 eq ¹

[18:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[18:29] <[Coke]> m: say 1 === ¹

[18:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[18:29] <[Coke]> m: say 1 =:= ¹

[18:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[18:29] <kalkin-> ok, but the second one is a 1 with dot, this should be incremented

[18:29] <[Coke]> m: say 1 == ¹ # oops, not eq!

[18:29] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[18:30] <[Coke]> m: dd ⒈

[18:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «1␤»

[18:30] <[Coke]> m: say ⒈  === 1

[18:30] <kalkin-> m: say ("⒈".ord +1).chr

[18:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «True␤»

[18:30] <camelia> rakudo-moar 672c5d403: OUTPUT: «⒉␤»

[18:30] <[Coke]> yup, that seems buggy.

[18:31] <[Coke]> I misread your question, btw. :)

[18:31] <[Coke]> might fall out of digit vs. number handling.

[18:31] <[Coke]> but at first glance, seems suprising.

[18:32] *** kensanata left
[18:35] *** lucasb left
[18:35] *** mahmudov left
[18:41] *** BlackChaosNL[m] joined
[18:41] *** unclechu joined
[18:41] *** AlexDaniel` joined
[18:41] *** EuAndreh[m] joined
[18:41] *** rba[m] joined
[18:41] *** Demos[m] joined
[18:41] *** uzl[m] joined
[18:41] *** matiaslina joined
[18:41] *** Nasrudin joined
[18:47] *** mahmudov joined
[18:50] *** hacktor joined
[18:56] *** mensvaga left
[18:57] <kalkin-> so once again, is it a bug or a feature? Should I open a github issue for that?

[18:59] <jmerelo> say "⒈ ".uniprops

[18:59] <evalable6> jmerelo, rakudo-moar 9a571b685: OUTPUT: «(No Zs)␤»

[18:59] <tellable6> 2019-12-22T14:47:23Z #raku <tbrowder> jmerelo i can't tell if my advent post is scheduled properly--the bloody calendar display seems to have changed on me! please help!

[18:59] <tellable6> hey jmerelo, you have a message: https://gist.github.com/df277fb78c251e4b0ba289aea4d33e45

[18:59] <jmerelo> say "1".uniprops

[18:59] <evalable6> jmerelo, rakudo-moar 9a571b685: OUTPUT: «(Nd)␤»

[18:59] <jmerelo> say "⒈ ".uniprops

[18:59] <evalable6> jmerelo, rakudo-moar 9a571b685: OUTPUT: «(No Zs)␤»

[19:00] <jmerelo> say "¹".uniprops

[19:00] <evalable6> jmerelo, rakudo-moar 9a571b685: OUTPUT: «(No)␤»

[19:00] <jmerelo> kalkin-: different unicode properties. I would say that's a feature.

[19:01] <jmerelo> kalkin-: surprisingly enough, digits and numbers are not exactly the same

[19:01] <kalkin-> say "a".succ; say "①"succ

[19:01] <kalkin-> m: say "a".succ; say "①"succ

[19:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say "a".succ; say "①"7⏏5succ␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statem…»

[19:01] <jmerelo> .tell chloekek that's amazing. I'll check it out (I saw it on twitter, too)

[19:01] <tellable6> jmerelo, I'll pass your message to chloekek

[19:01] <jmerelo> .tell tbrowder I'll check

[19:01] <tellable6> jmerelo, I'll pass your message to tbrowder

[19:01] <kalkin-> m: say "a".succ; say "①"succ;

[19:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say "a".succ; say "①"7⏏5succ;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        state…»

[19:01] <kalkin-> m: say "a".succ; say "①".succ;

[19:01] <camelia> rakudo-moar 672c5d403: OUTPUT: «b␤②␤»

[19:01] <jmerelo> .tell tbrowder it's been published anyway, so we're good.

[19:01] <tellable6> jmerelo, I'll pass your message to tbrowder

[19:02] <kalkin-> m: say "①".uniprops

[19:02] <camelia> rakudo-moar 672c5d403: OUTPUT: «(No)␤»

[19:02] <kalkin-> jmerelo: according to your theory ① should not work

[19:02] <jmerelo> kalkin-: it's a number

[19:03] <jmerelo> that means you can't join it with other "Nos" to create numbers with several digits.

[19:03] <kalkin-> m: say "¹".uniprops; say "¹".succ

[19:03] <camelia> rakudo-moar 672c5d403: OUTPUT: «(No)␤¹␤»

[19:03] <jmerelo> And you can compare it numerically

[19:03] <jmerelo> say 1 == ¹

[19:03] <evalable6> jmerelo, rakudo-moar 9a571b685: OUTPUT: «True␤»

[19:03] <jmerelo> But it's not exactly the same

[19:03] <jmerelo> say 1 === ¹

[19:03] <kalkin-> but  "¹" is also a No and succ doesn't work on it

[19:03] <evalable6> jmerelo, rakudo-moar 9a571b685: OUTPUT: «True␤»

[19:04] <jmerelo> Ah, OK. I didn't know that was the precise issue.

[19:04] <jmerelo> Might be a bug, but I'd look at the set of properties before

[19:05] <kalkin-> to sum it up: why is 1, ¹, ⒈ and ① all handled differently?

[19:05] <kalkin-> jmerelo: what set properties do you mean?

[19:06] <jmerelo> Well, 1 is Nd, and the rest are No, for starters. But your point is that succ works in all of them but ¹

[19:06] <jmerelo> Also, ⒈ is actually a combination of two codepoints. It might evaluate dynamically to 1, but again, it's not the same.

[19:07] <kalkin-> and ⒈ is also not supported

[19:07] <kalkin-> DIGIT ONE FULL STOP (if you don't see it clearly)

[19:07] *** wildtrees joined
[19:08] <jmerelo> uniprop just returns the general category, but it might have more categories.

[19:08] <jmerelo> Unicode is a whole world.

[19:10] <kalkin-> so shall i open a GitHub issue?

[19:10] <jmerelo> And No needn't have a successor, I think. It might have, but then...

[19:11] <jmerelo> kalkin-: it will always help clarify any ambiguity, of course, in case there's one

[19:11] <jmerelo> And f*ck

[19:11] <jmerelo> There's nothing scheduled for today.

[19:13] <jmerelo> .seen kaiepi

[19:13] <tellable6> jmerelo, I saw kaiepi 2019-12-22T11:05:09Z in #raku: <Kaiepi> i was expecting it to work like assigning to `my Int:D @foo` would if i hadn't already assigned anything to it

[19:14] <kalkin-> jmerelo: k, thank you

[19:21] *** sena_kun joined
[19:23] *** Altai-man_ left
[19:24] <kalkin-> done

[19:25] *** sauvin left
[19:27] *** jmerelo left
[19:32] *** mid_laptop joined
[19:35] <kalkin-> .tell jmerelo the succ & pred stuff is magic. so I guess i need to do a PR which turns the MORE MAGIC switch on this ranges

[19:35] <tellable6> kalkin-, I'll pass your message to jmerelo

[19:38] <lizmat> kalkin-: indeed :-)

[19:39] <lizmat> kalkin-: you probably want to look at https://github.com/rakudo/rakudo/blob/master/tools/build/makeMAGIC_INC_DEC.p6

[19:40] <kalkin-> lizmat: nice, thanks! now i know what to extend

[19:41] <kalkin-> m: say "🂤".succ;

[19:41] <camelia> rakudo-moar 672c5d403: OUTPUT: «🂤␤»

[19:41] <kalkin-> the question is how wild can i go? :)

[19:42] <kalkin-> cards? domino? majong? chess pieces?

[19:42] <kalkin-> they all have an internal order

[19:45] *** Xliff_ left
[19:50] <lizmat> anything with an internal order is ok to me... 

[19:50] <lizmat> as has been said: this is really magic  :-)

[19:50] <kalkin-> http://xahlee.info/comp/unicode_circled_numbers.html ← Xah Lee has a good list of circled stuff

[19:51] <kalkin-> also do I need to add roast tests for that?

[19:52] <kalkin-> I would assume the behavior of Str.succ & Str.pred are part of the language definition 

[19:53] <lizmat> yes, I think there should be tests, I think there are, actually

[19:53] *** mid_laptop left
[19:54] *** mid_laptop joined
[19:55] <lizmat> not too many, apparently  :-(

[20:13] <Kaiepi> oh it's the 23rd

[20:13] <Kaiepi> .tell jmerelo, i'll get the post scheduled

[20:13] <tellable6> Kaiepi, I'll pass your message to jmerelo

[20:17] *** AlexDani` joined
[20:18] <kalkin-> Reading S26 I figured out that if you want to have trailing declarator block on a sub you have to define it like this: sub f() #= Trailing comment ␤ {}

[20:18] *** AlexDaniel left
[20:18] <Kaiepi> .tell jmerelo, oh mb didn't see the emails

[20:18] <tellable6> Kaiepi, I'll pass your message to jmerelo

[20:21] <kalkin-> Ohh and leading/trailing pod on vars is broken. if there is a sub before the var, it declares the sub a multi and displays the variable pod as belonging to the sub. The var is lost… 

[20:28] <chloekek> Would be fun to write a COBOL parser with grammar.

[20:28] <tellable6> 2019-12-23T19:01:36Z #raku <jmerelo> chloekek that's amazing. I'll check it out (I saw it on twitter, too)

[20:29] <lizmat> chloekek: go for it  :-)  

[20:29] <chloekek> It has some fun parsing rules regarding line continuations.

[20:30] <chloekek> And of course the 7..72 columns limit.

[20:39] *** pilne joined
[20:40] *** rindolf left
[20:46] *** stoned75 joined
[20:59] *** pmurias joined
[21:03] *** stoned75 left
[21:03] *** vividsnow left
[21:03] *** vividsnow joined
[21:21] *** Altai-man_ joined
[21:21] *** finanalyst joined
[21:23] *** sena_kun left
[21:33] *** vividsnow left
[21:34] *** vividsnow joined
[21:44] *** aluaces joined
[21:47] *** aluaces left
[21:52] *** mid_laptop left
[21:57] <xkr47> chloekek, use Inline::COBOL; # :-D

[22:24] <cpan-raku> New module released to CPAN! CSS::Selector::To::XPath (0.0.6) by 03WARRINGD

[22:40] *** gabiruh joined
[22:43] *** guifa2 joined
[22:52] *** dogbert11 joined
[22:54] *** dogbert17 left
[23:01] *** Kaiepi left
[23:02] *** Kaiepi joined
[23:07] *** wamba left
[23:10] *** dogbert17 joined
[23:12] *** dogbert11 left
[23:21] *** sena_kun joined
[23:23] *** Altai-man_ left
[23:24] *** cpan-raku left
[23:25] *** cpan-raku joined
[23:25] *** cpan-raku left
[23:25] *** cpan-raku joined
[23:28] *** chloekek left
[23:45] <tbrowder> kalkin: did you see reference to the "tree-sitter" streaming gramar parser mentioned i think by AlexDaniel a few weeks ago?

[23:45] <tellable6> 2019-12-23T19:01:43Z #raku <jmerelo> tbrowder I'll check

[23:45] <tellable6> 2019-12-23T19:01:59Z #raku <jmerelo> tbrowder it's been published anyway, so we're good.

[23:45] <tbrowder> *grammar

[23:50] <tbrowder> i was thinking that we might try to design a pod parser from scratch without regard (or minimum regard) to any previous grammar in the ambient code. then see if we can fit it back in either as a slang or just a rewrite of the current pod grammar.

