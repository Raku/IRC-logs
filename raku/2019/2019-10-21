[00:12] *** lgtaube left
[00:20] *** softmoth left
[00:21] *** softmoth joined
[00:44] *** softmoth left
[00:45] *** ZzZombo_ joined
[00:48] *** ZzZombo left
[00:48] *** ZzZombo_ is now known as ZzZombo

[00:53] *** ggoebel joined
[01:10] *** elcaro joined
[01:11] <elcaro> What's the recommneded way to re-build HEAD these days. I had an alias set up for years that used to work all the time: -

[01:11] <elcaro> git pull && perl Configure.pl --gen-moar --gen-nqp --backends=moar --prefix=/usr/tools/perl6 && make && make install && make clean

[01:11] <elcaro> but ever since the builds were modified (i guess to make them reproducable) the above alias fails sometimes

[01:12] <elcaro> I think mainly after a Moar bump

[01:12] <elcaro> when it fails I'll get a failure in NQP/Config.pm complaining that moar is too old

[01:12] <elcaro> the old build system would update moar when it found the version was too old.

[01:29] <vrurg> elcaro: it means you haven't pulled tags from the upstream.

[01:30] <vrurg> It does rebuild when necessary.

[01:32] <vrurg> Er, sorry, wrong. Somehow I decided you build from a forked repo. 

[01:34] <vrurg> elcaro: Anyway, try doing some more diagnostics. I just have pulled latest changes including bumps in my copy of HEAD and it currently rebuilds moar.

[01:38] *** cpan-raku joined
[01:38] *** cpan-raku left
[01:38] *** cpan-raku joined
[02:10] *** ggoebel left
[02:17] *** softmoth joined
[02:32] *** benjif joined
[02:37] <cpan-raku> New module released to CPAN! LibXML (0.1.6) by 03WARRINGD

[02:43] *** ZzZombo_ joined
[02:46] *** ZzZombo left
[02:46] *** ZzZombo_ is now known as ZzZombo

[03:04] *** warriors left
[03:04] <elcaro> vrurg: probably related to the fact i'm running under git 1.7. I suspect it handles fetching tags differently

[03:35] *** AlexDani` joined
[03:39] <cpan-raku> New module released to CPAN! Prometheus::Client (0.1.0) by 03HANENKAMP

[03:39] *** AlexDaniel left
[03:42] *** ZzZombo_ joined
[03:44] *** AlexDani` is now known as AlexDaniel

[03:44] *** AlexDaniel left
[03:44] *** AlexDaniel joined
[03:44] *** ZzZombo left
[03:45] *** ZzZombo_ is now known as ZzZombo

[03:52] *** ZzZombo_ joined
[03:54] *** ggoebel joined
[03:55] *** ZzZombo left
[03:55] *** ZzZombo_ is now known as ZzZombo

[04:04] *** moon_child joined
[04:14] *** cinch_ joined
[04:51] *** benjif1 joined
[04:56] *** benjif1 left
[04:57] *** benjif1 joined
[04:58] *** benjif left
[04:58] *** benjif1 left
[04:59] *** benjif joined
[04:59] *** masak joined
[04:59] <masak> hi there #raku

[05:01] <masak> (name still feels like wearing somebody else's clothes. maybe I'll get used to it. probably.)

[05:02] <benjif> howdy masak

[05:08] *** jmerelo joined
[05:09] <jmerelo> releasable6: status

[05:09] <releasable6> jmerelo, Next release will happen when it's ready. There are no known blockers. 7 out of 432 commits logged (⚠ 9 warnings)

[05:09] <releasable6> jmerelo, Details: https://gist.github.com/b8f3fd2b8971f15a2016101ec0669f23

[05:23] *** AlexDaniel left
[05:25] <Geth> ¦ doc: a2ac522229 | Altai-man++ | doc/Type/Seq.pod6

[05:25] <Geth> ¦ doc: Document elems on Seq

[05:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a2ac522229

[05:25] <Geth> ¦ doc: b47ff56e84 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Seq.pod6

[05:25] <Geth> ¦ doc: Merge pull request #3067 from perl6/seq-elems-cache-note

[05:25] <Geth> ¦ doc: 

[05:25] <Geth> ¦ doc: Document elems on Seq

[05:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b47ff56e84

[05:31] *** rindolf3 joined
[05:31] <rindolf3> sigh

[05:31] <rindolf3> perl6->raku

[05:31] <SyrupThinker> Doc_Holliwood: How about the defined-or operator? I think it makes the intend more clear

[05:31] <rindolf3> no timtoady no cry

[05:32] <SyrupThinker> p6: sub foo { fail }; .say with foo() // 22

[05:32] <camelia> rakudo-moar db849a659: OUTPUT: «22␤»

[05:33] <SyrupThinker> You wouldn't even need the with, a return is enough

[05:39] *** benjif1 joined
[05:40] *** benjif left
[05:42] *** lgtaube joined
[06:03] *** benjif1 left
[06:21] <rindolf3> i am going to miss the 2ndsukkot holiday

[06:22] <rindolf3> cant wait for my father to come and bring me pizza and/or bourekas

[06:24] <rindolf3> it is home made pizza, but  i''mperfectly satisfied w theone in the shopping centreor pizza hat or dominoes

[06:25] <rindolf3> my parents can spend a lot oftime to save a little money :(

[06:25] <rindolf3> </boring rindolf life at the ward>

[06:25] <rindolf3> now you can return to the game

[06:36] *** sena_kun joined
[06:46] *** jmerelo left
[07:26] *** ggoebel left
[07:34] <cpan-raku> New module released to CPAN! LibXSLT (0.0.3) by 03WARRINGD

[08:00] *** stanley_tam joined
[08:39] *** sena_kun left
[08:45] *** sena_kun joined
[08:54] *** patrickb joined
[08:55] *** cdc joined
[08:58] *** patrickb left
[08:58] *** rindolf3 left
[09:13] *** simcop2387 joined
[09:48] *** sergot joined
[09:55] *** stanley_tam left
[10:01] *** pmurias joined
[10:13] <SmokeMachine> should lists have `.do` method as supplies does?

[10:14] <SmokeMachine> m: await Supply.from-list(^10).map({ %(value => $_) }).do({ .<value> *= 2 }).map: *.say

[10:14] <camelia> rakudo-moar db849a659: OUTPUT: «{value => 0}␤{value => 2}␤{value => 4}␤{value => 6}␤{value => 8}␤{value => 10}␤{value => 12}␤{value => 14}␤{value => 16}␤{value => 18}␤»

[10:14] <SmokeMachine> m: (^10).map({ %(value => $_) }).do({ .<value> *= 2 }).map: *.say

[10:14] <camelia> rakudo-moar db849a659: OUTPUT: «No such method 'do' for invocant of type 'Seq'. Did you mean 'so'?␤  in block <unit> at <tmp> line 1␤␤»

[10:21] *** pmurias left
[10:29] *** Doc_Holliwood left
[10:29] <lizmat> SmokeMachine: seems like a question worthy of a problem-solving issue

[10:31] <SmokeMachine> lizmat: Yes, I think I agree... I'll open it on lunch time... but what's your opinion about that?

[10:32] <lizmat> I'll form an opinion when you have described the wanted semantics :-)

[10:32] <lizmat> in the middle of working on the first RakudoWeekly

[10:32] <lizmat> my mind is not at the right place for an opinion about that

[10:32] <SmokeMachine> :)

[10:39] <SmokeMachine> m: (^10).map({ %(value => $_) }).map({ .<value> *= 2; $_ }).map: *.say # lizmat: but I think it would be something like this

[10:39] <camelia> rakudo-moar db849a659: OUTPUT: «{value => 0}␤{value => 2}␤{value => 4}␤{value => 6}␤{value => 8}␤{value => 10}␤{value => 12}␤{value => 14}␤{value => 16}␤{value => 18}␤»

[10:40] <lizmat> so what's the difference of .do on Supplies over .map on Supplies ?

[10:40] <discord6> <noelsken> .map emits the altered value, .do emits the original value

[10:40] <lizmat> in other words, wouldn't .do for other types be just the same as .map ?

[10:40] <lizmat> ah....   so it's just for side-effects  

[10:40] <lizmat> hmmm

[10:41] <lizmat> interesting

[10:42] <discord6> <noelsken> I'm mostly unsure how "emit" in those semantics would translate to lists because .map already is for the side-effects, at least from the perspective of the list

[10:47] <SmokeMachine> noelsken: the way I see it map isn't for the side-effects, but for its return... and it's return would be the equivalent of the emit... so I think of something like: `method do(&side-effects) { self.map: -> |c { side-effects |c; $_ } }` but with proper handle of the signature...

[10:48] *** pmurias joined
[10:57] <discord6> <noelsken> I'm not really seeing why we'd want another method instead of "just don't assign the return value" to be honest

[10:57] <discord6> <noelsken> well, behind a bit of clarity of intent maybe

[10:58] <discord6> <noelsken> mind, this clearly doesn't mean there isn't a good reason :)

[11:01] <SmokeMachine> noels ken: I think consistency is another reason...

[11:02] <SmokeMachine> I think everything that exists on a Supply and make sense, should also exists on List... and vice-versa...

[11:03] <SmokeMachine> as (something I still have to continue trying to implkement)

[11:04] <SmokeMachine> as (something I still have to continue trying to implement), Supply.map's closure when returning Empty should skip that value...

[11:05] <SmokeMachine> m: (^10).map({ $_ if $_ %% 2 }).map: *.say

[11:05] <camelia> rakudo-moar db849a659: OUTPUT: «0␤2␤4␤6␤8␤»

[11:05] <SmokeMachine> m: await Supply.from-list(^10).map({ $_ if $_ %% 2 }).map: *.say

[11:05] <camelia> rakudo-moar db849a659: OUTPUT: «0␤()␤2␤()␤4␤()␤6␤()␤8␤()␤»

[11:06] <SmokeMachine> noelsken, lizmat: ^^

[11:09] <discord6> <noelsken> yeah, those Emptys do seem inconsistent

[11:10] <timotimo> https://github.com/julvo/reloading

[11:10] <timotimo> uuuuh shiny

[11:11] <timotimo> m: await Supply.from-list(^10).map({ |($_, $_) }).map: *.say

[11:11] <camelia> rakudo-moar db849a659: OUTPUT: «(0 0)␤(1 1)␤(2 2)␤(3 3)␤(4 4)␤(5 5)␤(6 6)␤(7 7)␤(8 8)␤(9 9)␤»

[11:11] <timotimo> Supply's map simply doesn't seem to have semantics for slipping

[11:16] <SmokeMachine> timotimo: yes... I've suggested of doing that... I was trying to implement that... but I haven't enough time yet...

[11:25] <lizmat> timotimo: oops, looks like that needs a ticket ?

[11:28] <SmokeMachine> lizmat: I haven't opened that because I thought I would be able to "fix" that fast... now I see that was an error... :()

[11:28] <SmokeMachine> s/\)$//

[11:35] <Geth> ¦ problem-solving: FCO assigned to jnthn Issue List should have `.do` method as Supply https://github.com/perl6/problem-solving/issues/122

[11:38] <Geth> ¦ problem-solving: FCO assigned to jnthn Issue `Supply.map` should respect the `Slip` semantics as `List.map` does https://github.com/perl6/problem-solving/issues/123

[12:10] <timotimo> depends, i'd claim it's a design question whether we want it or not

[12:10] <timotimo> i can definitely see a reason to want it

[12:12] *** ggoebel joined
[12:14] *** marcusr left
[12:15] *** marcusr joined
[12:20] *** marcusr left
[12:20] *** marcusr joined
[12:22] *** diegok left
[12:24] *** scimon joined
[12:24] *** AlexDaniel joined
[12:25] *** AlexDaniel left
[12:25] *** AlexDaniel joined
[12:58] *** ggoebel left
[13:08] <brass> How is a Promise vow supposed to be used?

[13:09] <brass> I'm understand what it does but I'm having a tough time imagining what it's for

[13:10] <jnthn> It's useful in situations where you are manually creating a Promise to return, and want to make sure that only the thing that provides it can keep/break it, and that no other code can.

[13:10] <tellable6> https://gist.github.com/989a6709e3ff65d736446fc9c3c05f3b

[13:10] <SmokeMachine> m: my Promise $p .= new; my $v = $p.vow; Promise.in(1).then: { $v.keep: 42 }; say await $p

[13:10] <camelia> rakudo-moar db849a659: OUTPUT: «42␤»

[13:11] <jnthn> You hand back the Promise, and keep the Vow to yourself.

[13:11] <jnthn> A little bit like how one keeps a Supplier private and hands back a Supply

[13:11] <SmokeMachine> jnthn: do you think that should be 42 or (42,).Seq?

[13:11] *** ggoebel joined
[13:11] <jnthn> SmokeMachine: Where "that" refers to the problem-solving issue? I don't know.

[13:11] <SmokeMachine> yes

[13:12] <brass> Oh ok thanks jnthn that makes sense

[13:12] <jnthn> SmokeMachine: I can argue it a few ways.

[13:12] <brass> I'm just not used to promises being kept like that in other languages 

[13:13] <jnthn> If you're used C#, then you can think of the Vow as being a bit like the TaskCompletionSource, I guess.

[13:13] <SmokeMachine> jnthn: I think it would be cool to do something like: ```return $return-value.do: { when something() { do something }; default { do something } }```

[13:14] <SmokeMachine> return the $return-value, but do something else just for the side-effect...

[13:15] <SmokeMachine> ```my $ret = process().do: { @responses.push: $_ }

[13:16] <SmokeMachine> $_ .= "```"

[13:18] <SmokeMachine> jnthn: ^^

[13:30] *** mensvaga joined
[13:41] *** awwaiid joined
[13:43] *** fingolfin1 joined
[13:47] <fingolfin1> Hi, how can I use dynamically typed hash? Like this: my $type = Int; my %hash{$type};

[13:47] <tellable6> 2019-10-19T13:23:32Z #raku <AlexDaniel> fingolfin3: re ∧ and ∨: thanks for the interest! It's a lot of work, more than it seems at first glance (e.g. they need to be versioned, so that you can only use them on newer language versions)

[13:47] <tellable6> 2019-10-19T13:24:10Z #raku <AlexDaniel> fingolfin3: we had some not nice experience with other unicode stuff (e.g. unicode minus) which was a real pain to support properly and maintain, so it's unlikely we'll be adding more ops any time soon

[13:47] <tellable6> 2019-10-19T13:24:26Z #raku <AlexDaniel> fingolfin3: maybe in the future, but right now we have some other things we should focus on :)

[13:57] <vrurg> fingolfin1: only though type capture.

[13:59] <jnthn> m: my $type = Int; my %h := Hash[Any, $type].new; dd %h;

[13:59] <camelia> rakudo-moar db849a659: OUTPUT: «(my Any %{Int})␤»

[13:59] <lizmat> and the first Rakudo Weekly hits the Net: https://rakudoweekly.blog/2019/10/21/2019-42-answered/

[14:02] *** pmurias left
[14:02] <vrurg> lizmat++

[14:13] *** pmurias joined
[14:23] <awwaiid> lizmat: thanks for the DCBPW shout-out!

[14:23] <lizmat> awwaiid: yw  :-)

[14:28] *** warriors joined
[14:40] *** lucasb joined
[14:50] <bartolin> lizmat++

[15:03] *** patrickb joined
[15:04] <patrickb> o/

[15:04] <patrickb> As far as I have seen, there wasn't even a single news article that correctly described the rename process. They all took Larrys approval as the act that made the rename official. None recognized, that we now have a well defined process for how changes to the language are made and the conclusion of that process resulted in the rename, not the

[15:04] <patrickb> approval of Larry.

[15:05] <patrickb> AlexDaniel: Thanks for getting problem-solving up and running.

[15:06] <patrickb> Also I think this entry https://insights.dice.com/2019/10/18/perl-6-renamed-raku/ shows very well, how confused the outside world in parts still is wrt Perl 5 and Perl 6 being separate languages.

[15:07] <patrickb> </end_of_rant>

[15:07] *** pmurias left
[15:18] <mspo> insights.dice.com

[15:18] <mspo> weird

[15:18] <Kaiepi> releasable6, status

[15:18] <releasable6> Kaiepi, Next release will happen when it's ready. 1 blocker. 7 out of 432 commits logged (⚠ 9 warnings)

[15:19] <releasable6> Kaiepi, Details: https://gist.github.com/d0bf678cee216ac5c0a039b4d840e4b6

[15:23] <AlexDaniel> patrickb: it's weird, but Larry's approval seems to be very important to people regardless of what we have established for working on such issues

[15:24] *** Doc_Holliwood joined
[15:24] <Grinnz> from the outside, he still appears to be BDFL and well he is, his hands-off direction is less apparent to those who haven't been watching

[15:24] <Grinnz> people are probably used to how guido directed python

[15:25] <AlexDaniel> patrickb: and I don't care as much when people say “all these problem-solving don't matter”, I'm just happy that we got a solution to this big issue, and we have a process for working on anything alike in the future

[15:25] <AlexDaniel> problem-solving tickets*

[15:26] <Grinnz> you can only show it matters by results

[15:27] <AlexDaniel> also, the problem-solving document can be somewhat confusing, it should be much more explicit on how things work

[15:28] <AlexDaniel> I'll do my best to improve it when I get time

[15:31] <AlexDaniel> PRs are welcome, too

[15:32] <patrickb> Again, big :thumbs-up:. I think we wouldn't have been able to do this debate without escalation if we wouldn't have had that frame for discussion.

[15:33] *** RubioTerra joined
[15:35] <AlexDaniel> thanks :)

[15:36] <AlexDaniel> it's a bit too late, unfortunately, I think one of the reasons for Zoffix's departure is the fact that we didn't have anything like this in place earlier

[15:38] <AlexDaniel> for me their departure was one of the motivators for creating the repo

[15:39] <AlexDaniel> Zoffix++ :)

[15:39] <AlexDaniel> ok, that didn't sound right? But you get what I mean :)

[15:43] <nine> While we didn't require Larry's approval, it did help the process along quite a bit. But that doesn't devalue the problem-solving process in any way. Renaming the whole language is a huge thing and the discussion about it has been ongoing for almost a decade. It's not something that comes along frequently and not something that can be seen as part of any "normal" process.

[15:51] <mspo> https://github.com/raku

[15:54] <mspo> nine: it looks like copyright is mostly assigned to the perl foundation?

[15:54] <mspo> did larry give up the copyright to "perl" ?

[16:02] <AlexDaniel> mspo: https://github.com/rakulang https://github.com/raku-lang

[16:03] <AlexDaniel> I'm waiting for the main domain to change

[16:03] <rba> Aha

[16:05] <rba> AlexDaniel: Did you think already how to move to the new github org?

[16:05] <El_Che> AlexDaniel: I wonder if github bots would ban you if they look for the honest description of the repo :)

[16:06] <mspo> AlexDaniel: did you ask `raku` if he'd consider giving up his name?

[16:06] <AlexDaniel> rba: yep, this was discussed previously. It may sound surprising but moving each repo individually is better than renaming the organization

[16:07] <AlexDaniel> rba: we only have 82, so wish me luck

[16:07] <AlexDaniel> and strength

[16:07] <AlexDaniel> mspo: I did not

[16:07] <rba> Just curious. Will old raw links be redirected?

[16:08] <AlexDaniel> rba: yes, most things will be redirected

[16:08] <rba> AlexDaniel: great

[16:08] <AlexDaniel> rba: I'm pretty sure there are some edge cases, but mostly it should just work

[16:09] <AlexDaniel> rba: my understanding is that if something goes really wrong, we can just transfer the repo back and broken links will start working again

[16:09] <AlexDaniel> and then we can think again :)

[16:10] <AlexDaniel> so the transition should go really smooth, but also it's a good opportunity to perhaps move some repos into different places

[16:10] <mspo> AlexDaniel: he's only marginally active

[16:10] <mspo> might not mind

[16:10] <AlexDaniel> for example, there are some modules in perl6/ org that should probably be in community-modules org

[16:11] <AlexDaniel> and also there are some repo names that should perhaps be changed

[16:11] <AlexDaniel> so I'll try to figure it all out

[16:11] <sena_kun> mspo, short names are not always working...

[16:11] <sena_kun> https://github.com/rust

[16:11] <sena_kun> https://github.com/go

[16:12] <sena_kun> though I agree that'd be cool to have `raku`

[16:12] <sena_kun> but `rakulang` is cool enough

[16:12] <El_Che> or we can pick a new name with a non-claimed github namespace?

[16:12] * El_Che ducks

[16:12] <El_Che> :)

[16:13] <rba> The high level plan to move the webhosting from *.perl6.org to *.raku.org is to let all domains (so far without touching docs.perl6.org) appear under *.raku.org.

[16:13] <sena_kun> El_Che, seeing all the ways people surely invent to mock the new name again will be bad for my health. :S

[16:13] <rba> Then if all looks fine doing redirects of eg. design.perl6.org/* -> design.raku.org/*

[16:14] <AlexDaniel> rba++

[16:15] <AlexDaniel> El_Che: I'm surprised I'm still not banned on github

[16:15] <rba> AlexDaniel: Is the github repo move something you like to do this week?

[16:15] <AlexDaniel> rba: no

[16:16] <AlexDaniel> El_Che: first, I have too many accounts

[16:16] <AlexDaniel> El_Che: turns out their rule is that you can only have 1 personal account and 1 bot account

[16:17] <El_Che> ha, lol, I didn't know that either

[16:17] <AlexDaniel> I have at least 3 total, and last time I asked for 4th they told me to delete other ones

[16:18] <AlexDaniel> the only reason they noticed, I think, is because I use +foo in email when registering anywhere, and this raises a red flag for them because spam or something

[16:18] <AlexDaniel> then I have 10500 gists on whateverable account

[16:19] <AlexDaniel> some of which contain actual spam, because reportable used to pass ticket subjects from RT

[16:20] <El_Che> ik you ever visit the USA and have to give your social accounts at the border --> Guantanamo for you

[16:23] <rba> What do you think of moving https://pl6anet.org to something like https://feed.raku.org or maybe https://planet.raku.org ?

[16:30] <AlexDaniel> rba: rss.raku.org? :)

[16:31] <patrickb> rba: I'm in favor of moving the planet "home".

[16:31] <patrickb> planet.raku.org describes best what it is in my opinion. It's not just an rss feed, it's a distinct website. Most similar sites I know call it planet

[16:32] <AlexDaniel> patrickb: oh! I'd like to see some examples :)

[16:32] <patrickb> planet.gnome.org planet.kde.org planeteclipse.org/planet

[16:33] <AlexDaniel> planet it is then!

[16:33] <AlexDaniel> :)

[16:33] <patrickb> planet.qt.io

[16:33] *** scimon left
[16:34] *** patrickb left
[16:41] <Doc_Holliwood> Task #2 is impossible without resorting to generating code

[16:42] *** Kaiepi left
[16:56] <Doc_Holliwood> or is it

[16:57] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue What's exactly our stance regarding other Raku implementations? https://github.com/perl6/problem-solving/issues/124

[16:57] <AlexDaniel> Doc_Holliwood: what's task #2?

[16:57] <Doc_Holliwood> creating a variable with a name coming from the command line

[16:57] <Doc_Holliwood> but i think i know how

[17:15] *** wildtrees joined
[17:25] *** xinming left
[17:26] *** xinming joined
[17:30] <Doc_Holliwood> hah!

[17:39] *** softmoth left
[17:43] *** chloekek joined
[17:45] *** ainait joined
[17:47] <SmokeMachine> has anyone made an AWS Lambda Layer for Raku?

[17:58] * sena_kun remembers https://github.com/Xliff/p6-Amazon-AWS-EC2 but not sure if it's related

[18:02] *** sena_kun left
[18:19] <Doc_Holliwood> Who's the first one to solve the raku parts of the challenge?

[18:19] <Doc_Holliwood> <-- this guy 

[18:22] <Doc_Holliwood> I liked #2, it makes you connect rather obscure corners.

[18:22] <Doc_Holliwood> of the language

[18:39] <vrurg> Doc_Holliwood: proof link? ;)

[18:39] <Doc_Holliwood> https://github.com/manwar/perlweeklychallenge-club/pull/823/commits/8fcfaf0d22fdb65afd0e3f0a6401e4585fed5f10

[18:41] <discord6> <Aearnus> damn Doc_Holliwood, beat me by an hour.. was going to do it when I got out of lecture :)

[18:41] <Doc_Holliwood> everything is lexical in this language, why not sub EXPORT?

[18:42] <vrurg> Doc_Holliwood: why dynamic? Why read-only? ;)

[18:44] <Doc_Holliwood> I guess "dynamic variable name" is abit ambiguous

[18:46] <vrurg> Doc_Holliwood: I mean, you could just export "${$var-name}" key.

[18:46] <lizmat> Doc_Holliwood: EXPORT needs to be lexical to the compilation unit, afaik

[18:47] <vrurg> lizmat: it is. VariableFactory class is a stub with { * } body

[18:48] <Doc_Holliwood> vrurg: it is not read only. also, what do you mean, just export "${$var-name}" key?

[18:48] <Doc_Holliwood> and i think liz was referring to my question, not my code

[18:49] <vrurg> Doc_Holliwood: It isn't r/o right. Hash and it's coercion to scalar container...

[18:50] <vrurg> Doc_Holliwood: With regard to the export – can't get why do you export twigilled var, not just sigilled?

[18:50] <vrurg> Anyway, I like this solution. It's quite elegant. :)

[18:50] <Doc_Holliwood> because my brain parsed it as (dynamic variable) name

[18:52] <Doc_Holliwood> I'm curious if there'll be solutions that use a different approach

[18:53] <Doc_Holliwood> would an eval in INIT work?

[18:53] <lizmat> depends on what you're trying to achieve

[18:54] <Doc_Holliwood> solving the challenge #2

[18:54] <Doc_Holliwood> m: BEGIN eval 'my $s'; $s = 1;

[18:54] <camelia> rakudo-moar db849a659: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    eval used at line 1. Did you mean 'EVAL', 'val'?␤␤»

[18:55] <Doc_Holliwood> m: use MONKEY-SEE-NO-EVAL; BEGIN EVAL 'my $s'; $s = 1;

[18:56] <camelia> rakudo-moar db849a659: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$s' is not declared␤at <tmp>:1␤------> 3MONKEY-SEE-NO-EVAL; BEGIN EVAL 'my $s'; 7⏏5$s = 1;␤»

[18:56] <vrurg> Doc_Holliwood: BEGIN is a lexical scope.

[18:59] <Doc_Holliwood> I'm sure you come up with something that surprises me vrurg

[18:59] <vrurg> Doc_Holliwood: not really. I'm so much into the core stuff that first thing I think about is nqp and that's definitely not that elegant.

[19:00] <Doc_Holliwood> inner platform syndrome

[19:00] <Doc_Holliwood> the cure for it involves beaches and drinks

[19:04] <vrurg> Doc_Holliwood: if you call developing something in Raku itself – yeah, it would be more like 'beaches and drink' after chasing a bug in areas which I know very little about. :D

[19:05] <vrurg> BTW, an alternate solution for dynamic variables would be use of PROCESS::

[19:06] <vrurg> m: my $var = 'foo'; PROCESS::{ "${$var}" } = 42; say $*foo

[19:06] <camelia> rakudo-moar db849a659: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of ${$var}; in Perl 6 please use $($var) for hard ref or $::($var) for symbolic ref␤at <tmp>:1␤------> 3my $var = 'foo'; PROCESS::{ "${$var}7⏏5" } = 42; say $*foo␤»

[19:06] <vrurg> m: my $var = 'foo'; PROCESS::{ q<$> ~ $var } = 42; say $*foo

[19:06] <camelia> rakudo-moar db849a659: OUTPUT: «42␤»

[19:08] <vrurg> But there're some gotchas.

[19:15] *** chloekek left
[19:15] <Doc_Holliwood> documentation is very sparse regarding PROCESS

[19:16] <Doc_Holliwood> what gotchas would that be?

[19:21] <vrurg> m: my $var = 'foo'; PROCESS::{ q<$> ~ $var } = 42; say $*foo; say LEXICAL::{ '$*foo' }

[19:21] <camelia> rakudo-moar db849a659: OUTPUT: «42␤Nil␤»

[19:21] <vrurg> m: my $var = 'foo'; PROCESS::{ q<$> ~ $var } = 42; say $*foo; say DYNAMIC::{ '$*foo' }

[19:21] <camelia> rakudo-moar db849a659: OUTPUT: «42␤Nil␤»

[19:22] <vrurg> I may need to look into this at some point. 

[19:22] <lizmat> m: my $var = 'foo'; PROCESS::{ q<$> ~ $var } = 42; say $*foo; say DYNAMIC::{ '$foo' }

[19:22] <camelia> rakudo-moar db849a659: OUTPUT: «42␤Nil␤»

[19:24] <vrurg> m: use v6.e.PREVIEW; my $var = 'foo'; PROCESS::{ q<$> ~ $var } = 42; say $*foo; say DYNAMIC::{ '$*foo' }

[19:24] <camelia> rakudo-moar db849a659: OUTPUT: «42␤No such symbol 'DYNAMIC::<$*foo>'␤  in block <unit> at <tmp> line 1␤␤»

[19:24] <vrurg> m: use v6.e.PREVIEW; my $var = 'foo'; PROCESS::{ q<$> ~ $var } = 42; say $*foo; say DYNAMIC::{ '$foo' }

[19:24] <camelia> rakudo-moar db849a659: OUTPUT: «42␤No such symbol 'DYNAMIC::<$foo>'␤  in block <unit> at <tmp> line 1␤␤»

[19:26] <vrurg> Anyway, neither 6.c, 6.d nor 6.e lookup via DYNAMIC doesn't look in PROCESS:: and that's incorrect.

[19:26] *** MasterDuke joined
[19:27] <lizmat> m: my $*foo = 42; dd DYNAMIC::<$foo>

[19:27] <camelia> rakudo-moar db849a659: OUTPUT: «Nil␤»

[19:27] <lizmat> m: my $*foo = 42; dd DYNAMIC::<$*foo>

[19:27] <camelia> rakudo-moar db849a659: OUTPUT: «Int $*foo = 42␤»

[19:27] <lizmat> yeah, I'd say that is a bug

[19:28] <lizmat> vrurg: have a look at &DYNAMIC as to what it is doing to lookup dynamic variables

[19:28] <Doc_Holliwood> is @ARGV set at PROCESS time?

[19:28] <Doc_Holliwood> i mean @*ARGS

[19:28] <Doc_Holliwood> old habits ^^

[19:29] <vrurg> lizmat: it travesres callers contexts. Nothing else.

[19:31] <lizmat> &DYNAMIC does more

[19:32] <lizmat> it looks at GLOBAL, then at PROCESS

[19:32] <vrurg> lizmat: DYNAMIC is a pseudo-package.

[19:32] <lizmat> yeah, but it is supposed to mimic dynamic variable lookup, no ?

[19:34] <vrurg> Frankly – I didn't know &DYNAMIC exists. I based 6.e PseudoStash solely on 6.c version which is nowhere referencing &DYNAMIC.

[19:35] <vrurg> I need to have a closer look at PseudoStash again and see if it could possibly just use &DYNAMIC for the lookups.

[19:36] <lizmat> yeah, that could work  :-)

[19:36] <lizmat> at least we'd know for sure they\re consistent

[19:37] <Geth> ¦ whateverable: f18c0216a6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Messages.pm6

[19:37] <Geth> ¦ whateverable: Make the error message a bit more trendy

[19:37] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f18c0216a6

[19:37] <Geth> ¦ whateverable: 383a371b5d | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Messages.pm6

[19:37] <Geth> ¦ whateverable: Don't judge bot's behavior

[19:37] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/383a371b5d

[19:37] <vrurg> lizmat: do you know why &DYNAMIC is using $*PROMISE for obtaining dynamic context?

[19:38] <lizmat> to make sure dynamic variables work correctly across start { }

[19:38] <lizmat> so that they have the dynamic context where the start got executed

[19:39] <vrurg> So, there is another bug in DYNAMIC::. Well, fine, fine...

[19:39] <lizmat> ??

[19:39] *** pmurias joined
[19:39] <lizmat> why?  what is the bug ?

[19:39] *** tellable6 left
[19:40] <vrurg> DYNAMIC:: doesn't use $*PROMISE and thus it would result in different lookup.

[19:40] <lizmat> ah, indeed, so another reason to use &DYNAMIC there as well

[19:41] *** tellable6 joined
[19:43] *** chloekek joined
[19:43] <vrurg> lizmat: Just checked a little bit deeper, &DYNAMIC can't be used unless modified. The sub is based on the current context whereas pseudo-packages are not.

[19:44] *** releasable6 joined
[19:45] <lizmat> vrurg: ah yes, hmmm...

[19:45] <vrurg> Besides, &DYNAMIC only cares about dynamic lookups whereas some pseudo-packages are combining lexical and dynamical. And I'm not certain how that's to be handled.

[19:45] <lizmat> then I guess a problem-solving issue would be in order

[19:45] <lizmat> see what jnthn thinks about it ?

[19:46] <vrurg> lizmat: A rakudo ticket first. Perhaps there is no tricky points in there. I'm just not familiar with start { } internals and will need more investigation.

[19:46] <lizmat> wfm

[19:51] *** ainait left
[19:53] *** sgrs joined
[19:55] *** sgrs is now known as ainat

[20:00] *** ainat left
[20:09] *** atta joined
[20:21] *** chloekek left
[20:30] *** softmoth joined
[20:37] <Doc_Holliwood> m: $*PROMISE.say

[20:37] <camelia> rakudo-moar db849a659: OUTPUT: «Dynamic variable $*PROMISE not found␤  in block <unit> at <tmp> line 1␤␤»

[20:44] <Geth> ¦ doc: stoned++ created pull request #3068: Fix formatting

[20:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/3068

[20:45] *** ddate joined
[20:53] *** ggoebel left
[20:55] *** dogbert17 left
[21:19] <Geth> ¦ doc: 521d41a614 | (Stoned Elipot)++ | doc/Language/101-basics.pod6

[21:19] <Geth> ¦ doc: Fix formatting

[21:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/521d41a614

[21:19] <Geth> ¦ doc: 15132f765f | Altai-man++ (committed using GitHub Web editor) | doc/Language/101-basics.pod6

[21:19] <Geth> ¦ doc: Merge pull request #3068 from stoned/101-basics-fix

[21:19] <Geth> ¦ doc: 

[21:19] <Geth> ¦ doc: Fix formatting

[21:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/15132f765f

[21:20] *** ddate left
[21:29] <discord6> <Aearnus> hehe, just finished my weekly challenge

[21:33] <SmokeMachine> is there a way to pass arguments to the `use` while using `-M`?

[21:34] <discord6> <Aearnus> https://github.com/manwar/perlweeklychallenge-club/pull/825

[21:43] <cj> http://moon.c9h.org/~cjac/for-raku/IMG_20191020_162728.jpg

[21:45] <discord6> <noelsken> pretty :o

[21:47] <cj> I thought so too.  it reminded me of y'all :-)

[21:55] *** cpan-raku left
[21:56] *** cpan-raku joined
[21:56] *** cpan-raku left
[21:56] *** cpan-raku joined
[22:03] *** redable joined
[22:03] <SmokeMachine> red: model Bla { has UInt $.id is serial; has Str $.name is column }; Bla.^create-table; Bla.^create: :name<test>; .say for Bla.^all

[22:03] <redable> Bla.new(id => 1, name => "test")

[22:03] <SmokeMachine> \o/

[22:04] *** redable left
[22:04] <AlexDaniel> interesting :)

[22:04] <SmokeMachine> :)

[22:05] <SmokeMachine> AlexDaniel: just the first try... but I like this idea...

[22:06] <SmokeMachine> AlexDaniel: but maybe have some model saved to make it easy to do some tests...

[22:07] <Geth> ¦ doc: d4b0e3f0a5 | (Luis F. Uceta)++ | doc/Language/5to6-nutshell.pod6

[22:07] <Geth> ¦ doc: Wrap inline code examples with C<>, remove unneeded capitalization, add example, etc.

[22:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d4b0e3f0a5

[22:07] <Geth> ¦ doc: 6d0adfba95 | (Luis F. Uceta)++ | doc/Language/5to6-nutshell.pod6

[22:07] <Geth> ¦ doc: instances -> cases

[22:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6d0adfba95

[22:07] <Geth> ¦ doc: 76771692cd | Altai-man++ (committed using GitHub Web editor) | doc/Language/5to6-nutshell.pod6

[22:07] <Geth> ¦ doc: Merge pull request #3066 from uzluisf/master

[22:07] <Geth> ¦ doc: 

[22:07] <Geth> ¦ doc: Wrap inline code examples with C<>, remove unneeded capitalization, ...

[22:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/76771692cd

[22:09] *** squashable6 joined
[23:17] *** pmurias left
