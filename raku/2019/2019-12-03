[00:01] <Juerd> I guess that very indirectly, the infix . is my fault, even :P

[00:01] <Juerd> (given the rationale about .= already existing anyway)

[00:03] <Juerd> (About which timtowtdi said, back in 2004: "Yes, but the fact that you had to change the spacing bothers me")

[00:04] <Juerd> I somehow missed until today that \ . was no longer necessary (at least in many cases)

[00:10] <Xliff> Backslashdot?

[00:28] <Juerd> Xliff: It was called the "long dot"

[00:29] <Juerd> Xliff: \ plus whitespace is unspace, and with the . it's the long dot.

[00:32] <Xliff> And that did...?

[00:32] <Juerd> \ negates the whitespace that comes after it

[00:33] <Xliff> And holy !@(#(*.... Last watchmen was good!

[00:33] <Xliff> Oh... so 42\ .say would work?

[00:33] <Juerd> Yes. But with method calls the \ is no longer needed.

[00:33] <Xliff> What was the point of something like that?

[00:34] <Juerd> Because 42 .say was originally invalid, and people wanted to be able to use whitespace to line things up in tables etc

[00:34] <Juerd> But \ . didn't really solve that, because its aesthetics kind of defeated the purpose

[00:35] <Juerd> m: my @foo = 42, 15; say @foo [1]

[00:35] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside []‚ê§at <tmp>:1‚ê§------> 3my @foo = 42, 15; say @foo [7‚èè051]‚ê§    expecting any of:‚ê§        bracketed infix‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[00:35] <Juerd> m: my @foo = 42, 15; say @foo\ [1]

[00:35] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´15‚ê§¬ª

[00:36] *** sena_kun left
[01:26] *** xinming_ left
[01:26] *** xinming_ joined
[01:32] *** wamba left
[01:46] *** Kaiepi left
[01:48] *** Kaiepi joined
[02:36] *** lgtaube left
[02:48] *** wildtrees left
[02:56] *** xinming_ left
[02:58] *** xinming_ joined
[03:55] *** xinming_ left
[03:56] *** xinming_ joined
[04:16] *** xinming_ left
[04:16] *** xinming_ joined
[04:17] *** Xliff left
[04:32] *** mid_home left
[04:37] *** rindolf joined
[04:49] *** rindolf left
[04:52] *** rindolf joined
[05:26] *** rindolf left
[05:28] *** rindolf joined
[05:46] *** xinming_ left
[05:47] *** xinming_ joined
[05:48] *** stoned75 joined
[05:50] *** wtwt5237 joined
[05:51] <wtwt5237> hey, guys, may I have your suggestions on the best Raku package(s) for handling image (JPG, PNG, etc) reading and writing?

[05:52] <wtwt5237> I want to read an image as a 2d or 3d numeric array, and do some manipulations on it, and then write back into an image

[05:52] *** TreyHarris left
[06:03] *** wtwt5237 left
[06:03] *** sena_kun joined
[06:09] *** lgtaube joined
[06:10] *** jmerelo joined
[06:29] <jmerelo> Great functional programming insights with tmtvl today in the Raku Advent Calendar https://rakuadventcalendar.wordpress.com/2019/12/03/day-3-stack-frame-reduction/

[06:39] *** sena_kun left
[06:41] *** ManDeJan left
[06:49] *** stoned75 left
[07:18] *** ManDeJan joined
[07:31] *** jmerelo left
[07:43] <abraxxa> how can I ignore a self-signed cert with Cro::HTTP::Client?

[07:45] <abraxxa> the exact error I get is 'Certificate contains no altnames to check host against' from IO::Socket::Async::SSL line 322

[07:48] *** pochi_ joined
[07:51] *** pochi left
[07:51] *** renormalist left
[07:51] *** renormalist joined
[08:04] *** wamba joined
[08:07] <abraxxa> see https://github.com/croservices/cro-http/issues/77

[08:26] <xinming_> Is it ok to use something like       start {  react { ... } }   ?

[08:26] <xinming_> I never tried, Just thought, since I found that react will  "pause" the script

[08:34] <El_Che>    morning

[08:35] *** wamba left
[08:39] *** wamba joined
[08:39] *** ManDeJan left
[08:50] <abraxxa> Cro serializes JSON incorrect for me

[08:51] <abraxxa> a hash with two keys becomes an array with two hashes each containing only a single key

[08:57] <abraxxa> JSON::Fast does that

[09:01] <abraxxa> perl.bot doesn't list #raku, only the old #perl6 channels

[09:01] <abraxxa> is there anything wrong with my syntax? http://paste.scsys.co.uk/587292

[09:10] <abraxxa> I need a comma after the closing bracket of the single hash so that it becomes an array

[09:10] <abraxxa> how stupid is that!

[09:10] <abraxxa> regardless if I use [] or () brackets

[09:19] <jnthn> Yes, that's the single argument rule

[09:19] <jnthn> Same reaosn that [1..10] gives you an array of 10 items, not 1

[09:26] *** Doc_Holliwould joined
[09:28] *** cpan-raku left
[09:29] *** cpan-raku joined
[09:29] *** cpan-raku left
[09:29] *** cpan-raku joined
[09:29] *** Doc_Holliwood left
[09:29] *** Doc_Holliwood joined
[09:32] *** wamba left
[09:32] *** Doc_Holliwould left
[09:32] *** ManDeJan joined
[09:33] <abraxxa> jnthn: doesn't make sense to me as .. is a range operator

[09:33] *** Doc_Holliwould joined
[09:33] *** abraxxa left
[09:33] *** abraxxa joined
[09:35] *** Doc_Holliwood left
[09:36] *** Doc_Holliwood joined
[09:39] *** Doc_Holliwould left
[09:40] *** TreyHarris joined
[09:40] *** Doc_Holliwould joined
[09:40] *** abraxxa left
[09:40] *** abraxxa joined
[09:42] *** discord6 left
[09:42] *** timotimo left
[09:43] *** Doc_Holliwood left
[09:43] *** Doc_Holliwood joined
[09:45] *** ManDeJan left
[09:46] *** Doc_Holliwould left
[09:47] *** Doc_Holliwould joined
[09:49] *** Doc_Holliwood left
[09:50] *** holli joined
[09:51] *** wamba joined
[09:53] *** Doc_Holliwould left
[09:54] *** Doc_Holliwood joined
[09:56] *** timotimo joined
[09:56] *** holli left
[09:57] *** Doc_Holliwould joined
[10:00] *** abraxxa left
[10:00] *** Doc_Holliwood left
[10:01] *** holli joined
[10:03] *** abraxxa joined
[10:04] *** Doc_Holliwould left
[10:05] *** Doc_Holliwould joined
[10:08] *** holli left
[10:09] *** holli joined
[10:11] *** Doc_Holliwould left
[10:12] *** Doc_Holliwood joined
[10:15] *** holli left
[10:16] *** Doc_Holliwould joined
[10:18] *** Doc_Holliwood left
[10:19] *** scimon joined
[10:19] *** Doc_Holliwood joined
[10:22] *** Doc_Holliwould left
[10:23] *** Doc_Holliwould joined
[10:25] *** Doc_Holliwood left
[10:27] *** Doc_Holliwood joined
[10:30] *** Doc_Holliwould left
[10:32] *** Doc_Holliwould joined
[10:35] *** Doc_Holliwood left
[10:36] *** Doc_Holliwood joined
[10:38] *** Doc_Holliwould left
[10:39] *** Doc_Holliwould joined
[10:42] *** Doc_Holliwood left
[10:43] *** Doc_Holliwood joined
[10:45] *** Doc_Holliwould left
[10:46] *** Doc_Holliwould joined
[10:49] *** Doc_Holliwood left
[10:50] *** Doc_Holliwood joined
[10:53] *** Doc_Holliwould left
[10:53] *** abraxxa left
[10:54] *** Doc_Holliwould joined
[10:57] *** Doc_Holliwood left
[10:58] *** Doc_Holliwood joined
[10:59] *** abraxxa joined
[11:01] *** Doc_Holliwould left
[11:01] *** Doc_Holliwould joined
[11:05] *** Doc_Holliwood left
[11:05] *** Doc_Holliwood joined
[11:08] *** Doc_Holliwould left
[11:08] *** Doc_Holliwould joined
[11:11] *** Doc_Holliwood left
[11:12] *** holli joined
[11:14] *** Doc_Holliwould left
[11:15] *** Doc_Holliwood joined
[11:18] *** holli left
[11:19] *** Doc_Holliwould joined
[11:21] *** Doc_Holliwood left
[11:22] *** Doc_Holliwood joined
[11:25] *** Doc_Holliwould left
[11:26] *** Doc_Holliwould joined
[11:26] *** wamba left
[11:28] *** Doc_Holliwood left
[11:29] *** Doc_Holliwood joined
[11:32] *** Doc_Holliwould left
[11:33] *** Doc_Holliwould joined
[11:35] *** Doc_Holliwood left
[11:36] *** scimon left
[11:36] *** Doc_Holliwood joined
[11:39] *** Doc_Holliwould left
[11:40] *** Doc_Holliwould joined
[11:43] *** Doc_Holliwood left
[11:43] *** holli joined
[11:46] *** Doc_Holliwould left
[11:47] *** Doc_Holliwood joined
[11:47] *** Guest38485 joined
[11:48] *** mid_laptop joined
[11:49] *** holli left
[11:50] *** Doc_Holliwould joined
[11:52] *** scimon joined
[11:53] *** Doc_Holliwood left
[11:54] *** Doc_Holliwood joined
[11:56] *** Doc_Holliwould left
[11:57] *** Doc_Holliwould joined
[12:00] *** Doc_Holliwood left
[12:01] *** Doc_Holliwood joined
[12:04] *** Doc_Holliwould left
[12:04] *** Doc_Holliwould joined
[12:07] *** Doc_Holliwood left
[12:08] *** Doc_Holliwood joined
[12:09] *** lucasb joined
[12:09] *** sena_kun joined
[12:10] *** Doc_Holliwould left
[12:11] *** Doc_Holliwould joined
[12:12] <SmokeMachine> u: üë©‚Äçüë©‚Äçüëß‚Äçüë¶

[12:12] <unicodable6> SmokeMachine, U+1F469 WOMAN [So] (üë©)

[12:12] <unicodable6> SmokeMachine, U+200D ZERO WIDTH JOINER [Cf] (¬†‚Äç)

[12:12] <unicodable6> SmokeMachine, 7 characters in total: https://gist.github.com/093401af4a604cdd6fd1f44dae6cee8a

[12:15] *** Doc_Holliwood left
[12:15] *** Doc_Holliwood joined
[12:17] <Geth> ¬¶ doc: f26de212ba | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/control.pod6

[12:17] <Geth> ¬¶ doc: Add example of an "is copy" iteration variable

[12:17] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/f26de212ba

[12:17] *** Doc_Holliwould left
[12:18] *** Doc_Holliwould joined
[12:21] <Geth> ¬¶ doc: 11403aff73 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/control.pod6

[12:21] <Geth> ¬¶ doc: improve grammar

[12:21] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/11403aff73

[12:21] *** Doc_Holliwood left
[12:21] *** wamba joined
[12:22] *** Doc_Holliwood joined
[12:25] *** Doc_Holliwould left
[12:25] *** Doc_Holliwould joined
[12:28] *** Doc_Holliwood left
[12:29] *** Doc_Holliwood joined
[12:31] *** Doc_Holliwould left
[12:32] *** Doc_Holliwould joined
[12:34] *** scimon left
[12:35] *** Doc_Holliwood left
[12:36] *** Doc_Holliwood joined
[12:39] *** Doc_Holliwould left
[12:39] *** Doc_Holliwould joined
[12:40] <Geth> ¬¶ doc: 945c37eb93 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/control.pod6

[12:40] <Geth> ¬¶ doc: Add note for the unwary

[12:40] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/945c37eb93

[12:42] *** Doc_Holliwood left
[12:43] *** Doc_Holliwood joined
[12:46] *** Doc_Holliwould left
[12:46] *** Doc_Holliwould joined
[12:47] *** scimon joined
[12:48] *** wamba left
[12:49] *** Doc_Holliwood left
[12:50] *** Doc_Holliwood joined
[12:53] *** Doc_Holliwould left
[12:53] *** Doc_Holliwould joined
[12:56] *** Doc_Holliwood left
[12:57] *** Doc_Holliwood joined
[12:57] *** mid_laptop left
[12:59] *** Doc_Holliwould left
[13:00] *** Doc_Holliwould joined
[13:02] *** sena_kun left
[13:03] *** Doc_Holliwood left
[13:04] *** holli joined
[13:07] *** Doc_Holliwould left
[13:07] *** Doc_Holliwood joined
[13:09] *** abraxxa left
[13:09] *** abraxxa joined
[13:10] *** holli left
[13:11] *** Doc_Holliwould joined
[13:13] *** wamba joined
[13:14] *** Doc_Holliwood left
[13:16] *** sena_kun joined
[13:23] *** sarna left
[13:35] *** sarna joined
[13:54] *** nosqrt left
[14:14] *** MasterDuke left
[14:16] *** Doc_Holliwould left
[14:17] *** MasterDuke joined
[14:18] *** Doc_Holliwood joined
[14:23] *** abraxxa left
[14:23] *** abraxxa joined
[14:25] *** abraxxa left
[14:26] *** abraxxa joined
[14:28] *** joule joined
[14:38] *** abraxxa left
[14:39] *** abraxxa joined
[14:42] *** abraxxa left
[14:43] *** abraxxa joined
[14:47] <xkr47> tbrowder, a friend called it a toombstone... :)

[14:49] <tbrowder> xkr47, i'm not fast enough on humor, is that a play on "tomb"? or a typo?

[14:50] <tbrowder> if you meant 'tombstone' that is ghoulishly funny!

[14:51] <tbrowder> no, actually, wryly humourous or, perhaps, touchingly warm praise?

[15:02] *** sena_kun left
[15:05] <tbrowder> xkr47: ^^

[15:16] *** wamba left
[15:17] *** sena_kun joined
[15:20] *** wamba joined
[15:38] *** xinming_ left
[15:39] *** xinming_ joined
[15:55] *** jmerelo joined
[15:58] *** mid_laptop joined
[16:13] <Doc_Holliwood> m: .say for DateTime.new('2019-12-12T12:00:00Z') ...  DateTime.new('2019-12-12T12:00:00Z')

[16:13] *** ben_m joined
[16:13] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´(timeout)2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T12:00:00Z‚ê§2019-12-12T1‚Ä¶¬ª

[16:14] <Doc_Holliwood> m: .say for DateTime.new('2019-12-12T12:00:00Z') ...  DateTime.new('2019-12-12T15:00:00Z')

[16:14] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´2019-12-12T12:00:00Z‚ê§No such method 'succ' for invocant of type 'DateTime'. Did you mean any of these?‚ê§    sum‚ê§    utc‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:14] <ben_m> Does anyknow know of an Emacs inferior raku mode or a way to make the raku repl work with comint-mode?

[16:15] <Doc_Holliwood> m: role UpOneHour { method succ() { self.clone( :hour( self.hour + 1 ) ) } }; .say for (DateTime but UpOneHour).new('2019-12-12T12:00:00Z') ... (DateTime but UpOneHour).new('2019-12-12T16:00:00Z')

[16:15] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´2019-12-12T12:00:00Z‚ê§2019-12-12T13:00:00Z‚ê§2019-12-12T14:00:00Z‚ê§2019-12-12T15:00:00Z‚ê§2019-12-12T16:00:00Z‚ê§¬ª

[16:15] <Doc_Holliwood> aha!

[16:16] <Doc_Holliwood> gotta love this language. just why does the first expression create a infinity loop when there is no "succ" method

[16:17] <Doc_Holliwood> unless there is something looking at the endpoints, sees they are identical and optimizes to that?

[16:32] <ben_m> Is there an elegant way to check if a loop was exited using `last` or if it looped through completely?

[16:33] *** abraxxa left
[16:33] *** abraxxa joined
[16:34] *** wamba left
[16:37] <[Coke]> m: ^10 -> $i { say $i; last if $i == 3; CONTROL { dd $_ }} ; say "done"

[16:37] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3^107‚èè5 -> $i { say $i; last if $i == 3; CONTRO‚ê§    expecting any of:‚ê§        ‚Ä¶¬ª

[16:37] <[Coke]> m: for ^10 -> $i { say $i; last if $i == 3; CONTROL { dd $_ }} ; say "done"

[16:37] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´0‚ê§CX::Last.new‚ê§1‚ê§2‚ê§3‚ê§done‚ê§¬ª

[16:37] <[Coke]> ^^

[16:37] <[Coke]> if you try that locally and comment out the "last if..." line you'll see the control block is never invoked.

[16:40] <sena_kun> m: for ^10 -> $i { say $i; last if $i == 3; #`( CONTROL { dd $_ } )} ; say "done"

[16:40] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§done‚ê§¬ª

[16:40] <[Coke]> You can try to use a "when..." block inside the CONTROL but then you have to be careful to not stop the last from happening.

[16:41] <[Coke]> Note that the output is out of order in my first example due to stderr/stdout interleaving.

[16:41] <Doc_Holliwood> maybe you should mention the block does get triggered on other things as well. such as return, fail, redo, next, last, done, emit, take, warn, proceed and succeed

[16:42] <Doc_Holliwood> I would use a flag for that

[16:43] <ben_m> What I'm looking for is basically Python's else clause on a loop

[16:43] <[Coke]> m: for ^10 -> $i { say $i; last if $i==3; CONTROL { when CX::Last { say "last"; last } } }; say "done";

[16:43] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§last‚ê§done‚ê§¬ª

[16:44] <[Coke]> there, there handles last specifically.

[16:44] <[Coke]> (and orders output correctly)

[16:45] *** cspencer joined
[16:45] <cspencer> hello all!  i‚Äôm curious is there has been any work done on bindings for either the torch or tensorflow libraries.  previously, i‚Äôve used python for some of my deep learning experimentation, but i‚Äôd be curious to try it in raku as well

[16:45] <tadzik> ben_m: in my experience the Python's for-else is mostly useful for trying to find something in a list: perhaps it'd be easier to just do that without a loop in your case?

[16:45] <tadzik> like the .first() method

[16:49] *** robertle joined
[16:50] <ben_m> Usually, yes. And I can probably restate this problem in a more raku way. What I'm doing is basically `while (something) { if (test) { process_thing; $found = True; last; } } unless $found { process_no_thing }`

[16:51] <ben_m> Not iterating through a list in this case

[16:58] <tadzik> hm, I see

[17:02] *** sena_kun left
[17:03] <Doc_Holliwood> m: multi sub foo($found where $found) { say "process_no_thing" }; multi sub foo($found where !$found) { loop { return if "process_thing" } }; foo( True ); foo( False );

[17:03] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´process_no_thing‚ê§¬ª

[17:03] <Doc_Holliwood> m: multi sub foo($found where $found) { say "process_no_thing" }; multi sub foo($found where !$found) { loop { return if "process_thing" } }; foo( False );

[17:03] <camelia> rakudo-moar 672c5d403: ( no output )

[17:03] <Doc_Holliwood> huh

[17:03] <Doc_Holliwood> m: multi sub foo($found where $found) { say "process_no_thing" }; multi sub foo($found where not $found) { loop { return if "process_thing" } }; foo( False );

[17:03] <camelia> rakudo-moar 672c5d403: ( no output )

[17:04] <Doc_Holliwood> m: multi sub foo($found where $found) { return "process_no_thing" }; multi sub foo($found where not $found) { loop { return "process_thing" if "process_thing" } }; say foo( False );

[17:04] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´process_thing‚ê§¬ª

[17:04] <Doc_Holliwood> m: multi sub foo($found where $found) { return "process_no_thing" }; multi sub foo($found where not $found) { loop { return "process_thing" if "process_thing" } }; say foo( True );

[17:04] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´process_no_thing‚ê§¬ª

[17:04] <Doc_Holliwood> here we go

[17:04] <Doc_Holliwood> ben_m: ^^

[17:17] *** sena_kun joined
[17:25] *** wamba joined
[17:28] <ben_m> I'm not sure that's what I mean but I'll have another look in a bit

[17:28] *** mid_laptop left
[17:36] *** lgtaube left
[17:38] * lizmat forgot to clickbait https://rakudoweekly.blog/2019/12/02/2019-48-released-advent/ this morning

[17:41] <AlexDaniel> squashable6: status

[17:41] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 2 days and ‚âà10 hours (2019-12-07 UTC-12‚åÅUTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:49] <AlexDaniel> ben_m: I think this is a fun related read: http://blogs.perl.org/users/damian_conway/2019/09/itchscratch.html :)

[17:54] <Geth> ¬¶ doc: 5bb0e8c8f9 | timo++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[17:54] <Geth> ¬¶ doc: IO::Path.rmdir returns a Failure, not throws an Exception

[17:54] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/5bb0e8c8f9

[17:56] <ben_m> AlexDaniel: thanks, that really is interesting

[17:57] <AlexDaniel> ben_m: I also needed the `else {}` feature a few times, but its use is so rare that I think writing out explicitly what you need is more readable

[17:59] <ben_m> Yeah, I'm just used to raku having elegant solutions for everything so I thought I'd ask :)

[18:05] <AlexDaniel> `.first(‚Ä¶) // ‚Äòdefault‚Äô` is kinda it

[18:07] <AlexDaniel> oh no, I'm about to write something ugly ü§¢

[18:08] <AlexDaniel> .map for its side effect: for gather @foo.map(‚Ä¶) {

[18:08] <AlexDaniel> I think there's a spot for me in hell being prepared

[18:08] <Kaiepi> .tell jnthn, can you sum up what metaclasses, metaobjects, metamethods, and HOWs are? i need to ensure i'm getting the jargon for the MOP straight for my advent article on the 14th

[18:08] <tellable6> Kaiepi, and I oop! Backtrace: https://gist.github.com/525cc9776f5452cdb1bc337d86a7b7b6

[18:09] <AlexDaniel> Kaiepi: one sec I'll fix it

[18:09] <lizmat> Kaiepi: ls src/Perl6/Metamodel/*HOW*

[18:10] <AlexDaniel> Kaiepi: can you try again?

[18:10] <Kaiepi> .tell jnthn, can you sum up what metaclasses, metaobjects, metamethods, and HOWs are? i need to ensure i'm getting the jargon for the MOP straight for my advent article on the 14th

[18:10] <tellable6> Kaiepi, I'll pass your message to jnthn

[18:11] <Kaiepi> thanks AlexDaniel 

[18:13] <AlexDaniel> ah wait, did sena_kun already fix that bug

[18:14] *** wildtrees joined
[18:14] <AlexDaniel> and I simply have to update JSON::Fast

[18:15] *** justconcerned joined
[18:16] *** chloekek joined
[18:16] *** tellable6 left
[18:18] *** tellable6 joined
[18:19] *** hkdtam joined
[18:19] <AlexDaniel> .tell Kaiepi test test

[18:19] <tellable6> AlexDaniel, I'll pass your message to Kaiepi

[18:19] <AlexDaniel> Kaiepi: I think that bug is fixed now!

[18:19] <AlexDaniel> sena_kun++ timotimo++

[18:19] <Kaiepi> lizmat, i've read most of those files, but i want to be certain i explain what they are correctly

[18:20] *** mensvaga joined
[18:20] <Kaiepi> s/they are/those terms mean/

[18:25] <sena_kun> AlexDaniel which one, https://github.com/timo/json_fast/commit/049de4d4abfd29e107dac6154afc7f33adb08192 ?

[18:26] <AlexDaniel> sena_kun: yep!

[18:26] <sena_kun> ah. $comma_development_process++ and the fact that our docs contain unicode examples++ for this bugfix. :>

[18:27] <AlexDaniel> well, I did know about that bug for quite some time

[18:27] <AlexDaniel> because people like to send unicode stuff on IRC :D

[18:27] <AlexDaniel> I was just procrastinating hoping that somebody else will fix it

[18:28] <sena_kun> well, your hopes were granted. \o/

[18:28] <AlexDaniel> heh‚Ä¶

[18:28] <AlexDaniel> I guess upcoming rakudo releases are in good hands :)

[18:29] <AlexDaniel> sena_kun: https://colabti.org/irclogger/irclogger_log/raku-dev?date=2019-12-02#l184

[18:30] <AlexDaniel> sena_kun: I'm trying to make sourceable a bit more, um, whateverably :)

[18:31] <AlexDaniel> you can now give it non-HEAD commits and it also dwims like 50% of the time

[18:31] <sena_kun> AlexDaniel, I am ok with whatever the license, really... How to mention: if it's the license header with this `Copyright Foo Bario <haha@bububu>` thing, then `Alexander Kiryuhin` and the e-mail you can find at my githug profile is ok

[18:31] <AlexDaniel> trying to nail the remaining 49% :)

[18:32] <AlexDaniel> sena_kun: ok, then, maybe consider changing your git config

[18:50] *** Kaiepi left
[18:50] *** Kaiepi joined
[18:51] *** Kaiepi left
[18:54] *** finanalyst joined
[18:56] *** lgtaube joined
[19:03] *** sena_kun left
[19:11] *** mid_home joined
[19:11] *** wamba left
[19:12] *** wamba joined
[19:18] *** sena_kun joined
[19:19] *** cspencer left
[19:20] <guifa> AlexDaniel: rereading that article by Damian has me thinking post-rename.  The for(;;) structure errors, but given that ; is also a list op,it should be perfectly valid syntax

[19:20] <guifa> p6: my @a = (* + 2; * * 2; * ** 2); for @a {¬†say .(3) }

[19:20] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5‚ê§6‚ê§9‚ê§¬ª

[19:20] <guifa> p6: for (* + 2; * * 2; * ** 2) {¬†say .(3) }

[19:20] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of C-style "for (;;)" loop; in Perl 6 please use "loop (;;)"‚ê§at <tmp>:1‚ê§------> 3for 7‚èè5(* + 2; * * 2; * ** 2) {¬†say .(3) }‚ê§¬ª

[19:24] <guifa> (it seems to not have any problem with n < 2 or n > 3 whatever blocks, but it does oddly complain that they‚Äôre in sink context)

[19:24] <guifa> p6: for (* + 2; * - 2) {¬†say .(3)¬†}

[19:24] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§5‚ê§1‚ê§Useless use of "+" in expression "* + 2" in sink context (line 1)‚ê§Useless use of "-" in expression "* - 2" in sink context (line 1)‚ê§¬ª

[19:39] *** jmerelo left
[19:39] *** scimon left
[19:45] *** veesh left
[19:46] *** MasterDuke left
[19:51] *** justconcerned left
[19:53] *** rayperry joined
[19:55] *** squashable6 left
[19:57] *** squashable6 joined
[19:59] *** veesh joined
[20:01] *** rayperry left
[20:01] *** cspencer joined
[20:02] *** squashable6 left
[20:02] *** MasterDuke joined
[20:02] *** cspencer left
[20:04] *** squashable6 joined
[20:06] <AlexDaniel> guifa: hmm https://github.com/rakudo/rakudo/pull/1188

[20:09] *** johnrd joined
[20:09] <johnrd> I have a class C that contains a nested class D. how can a method in D access C's attributes? in general, how can a method in D refer to C's "self"?

[20:15] <johnrd> if that can't be done I'll find a workaround but I'd still like to know

[20:16] *** veesh left
[20:17] *** veesh joined
[20:17] <sena_kun> johnrd there is no such linking, but you can 1)store self of class C in class D, for example

[20:21] *** veesh left
[20:22] <sena_kun> m: class D {...}; class C { has D $.d; has $.hehe = 42; submethod TWEAK { $!d = D.new(c => self) } }; class D { has C $.c; method m { say $!c.hehe; } }; C.new.d.m;

[20:22] <camelia> rakudo-moar 672c5d403: OUTPUT: ¬´42‚ê§¬ª

[20:22] *** veesh joined
[20:22] <sena_kun> johnrd see ^

[20:26] *** veesh left
[20:26] *** veesh joined
[20:28] *** veesh left
[20:28] *** lucasb left
[20:29] *** veesh joined
[20:29] *** veesh left
[20:30] *** rindolf left
[20:30] *** veesh joined
[20:31] *** veesh left
[20:33] *** veesh joined
[20:40] *** veesh left
[20:41] *** veesh joined
[20:41] *** veesh left
[20:41] *** johnrd left
[20:42] *** veesh joined
[20:43] *** veesh left
[20:43] *** veesh joined
[20:49] *** joule left
[21:02] *** sena_kun left
[21:14] *** captain_none_ame joined
[21:14] <captain_none_ame> hi

[21:14] <captain_none_ame> I am searching for a man who will create the most powerfull web framework in Raku

[21:17] *** sena_kun joined
[21:18] *** captain_none_ame left
[21:35] <moritz> how's the search going, so far?

[21:44] * lizmat wonders why captain_none_ame would disqualify more than half of the world's population

[21:44] *** stoned75 joined
[21:57] *** Kaiepi joined
[21:57] *** johnjay left
[22:02] *** wamba left
[22:02] *** johnjay joined
[22:02] *** johnjay left
[22:04] *** johnjay joined
[22:08] *** cspencer joined
[22:32] <guifa> AlexDaniel: definitely related, but distinct.  loop() needs to have exactly 0 (sans parentheses) or 3 expressions.  There‚Äôs no real reason to stop for() from having them, other than to avoid perl5isms, though

[22:41] <AlexDaniel> lizmat: could very well be accidental language barrier thing

[22:42] *** lucasb joined
[22:42] <AlexDaniel> sometimes I write ‚Äúhe‚Äù on autopilot (out of habit?), then I punch myself

[22:48] <veesh> could be one of the old fashioned types who uses the male as gender neutral

[22:48] <veesh> or maybe it's 'a man' as in someone who's 'the man'

[22:48] <veesh> lots of options

[22:49] <sena_kun> I am more interested in "most powerful web framework" part, to be honest. the conditions of the deal make me very curious...

[22:50] <veesh> also difficult if you don't define by what means you're measuring power

[22:50] <veesh> 'most expressive'?

[22:50] <veesh> can do the most things?

[22:50] <sena_kun> if it is something else than "Who is pretty skilled here and has absolutely nothing to do at the same time to write tons of pretty, complex code and squash bugs everywhere and then write even more".

[22:50] <veesh> can shoot a kamehaha wave?

[22:51] <veesh> i would use a web framework that could go super saiyan any day

[22:51] * sena_kun ported a flask tutorial to Cro::HTTP and the sources were twice as small, for example

[22:52] <veesh> lol

[22:52] <veesh> well, if you cut out all the whitespace, then that's easy

[22:52] <veesh> especiallly if it's spaces and not tabs

[22:56] <AlexDaniel> sena_kun: niiice

[22:56] <AlexDaniel> I'm actually interested in something django-like

[22:57] <sena_kun> AlexDaniel, well, django is another matter... It is not minimalism anymore and I don't think cro fits.

[22:59] <AlexDaniel> sena_kun: it surely fits? It's just that a lot more needs to be implemented too

[23:02] *** sena_kun left
[23:03] *** sena_kun joined
[23:03] *** sena_kun left
[23:07] *** chloekek left
[23:13] <veesh> what's so great about django? I didn't enjoy it when i was learning it

[23:13] <veesh> but then again, that was when i just started programming

[23:22] *** finanalyst left
[23:24] *** Xliff joined
[23:54] *** stoned75 left
