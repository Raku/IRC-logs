[00:05] *** xinming_ left
[00:06] *** rjt_pl left
[00:07] *** xinming_ joined
[00:10] *** Geth left
[00:11] *** Geth joined
[00:15] *** lucasb left
[00:16] *** knoop_ joined
[00:32] *** pmurias left
[00:42] *** xkr47 left
[00:54] *** cognominal joined
[01:05] *** xkr47 joined
[01:12] *** dogbert17 left
[01:20] *** cognomin_ joined
[01:24] *** cognominal left
[01:40] *** knoop_ left
[01:51] *** cognominal joined
[01:54] *** cognomin_ left
[02:01] *** wildtrees left
[02:36] *** knoop joined
[02:54] *** Xliff joined
[02:54] <Xliff> m: my @a = ^26; @a.skip(10).say

[02:54] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)␤»

[02:57] *** knoop left
[02:58] <Xliff> m: my @a = ^26; @a.skip(10).reverse.skip(3).reverse.say

[02:58] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(10 11 12 13 14 15 16 17 18 19 20 21 22)␤»

[02:58] <Xliff> ^^ Can that still lazy?

[02:58] <Xliff> s/lazy/be lazy/?

[03:00] *** squashable6 left
[03:02] *** squashable6 joined
[03:04] <AlexDaniel> Xliff: good question

[03:04] *** squashable6 left
[03:04] <AlexDaniel> not sure about @a, but with $a it can be done

[03:05] <AlexDaniel> by it can be done I mean maybe rakudo can be tweaked to do it

[03:06] <AlexDaniel> right now .skip works great but it returns a Seq

[03:06] <AlexDaniel> so suddenly all range-specific optimizations are gone

[03:06] <Xliff> Ah, darn.

[03:07] *** squashable6 joined
[03:07] <AlexDaniel> which makes sense, but it's possible there's a way to do better

[03:07] <Xliff> If you find a way I can trim an array from both ends without using a slice, that would be good. :)

[03:07] <Xliff> Um... there is always [$start .. $end] though, innit?

[03:07] <AlexDaniel> yes?

[03:07] <AlexDaniel> what's wrong with that? :)

[03:08] <Xliff> m: my @a = ^26; @a[10 .. *-3].gist.say

[03:08] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(10 11 12 13 14 15 16 17 18 19 20 21 22 23)␤»

[03:08] <Xliff> Nothing. I just thought of it.

[03:08] <Xliff> Problem being now I need complex logic to handle start, end and startend combinations. :P

[03:09] <AlexDaniel> though that's kinda not lazy enough still, not to my taste at least

[03:09] <Xliff> Mine either. :P

[03:09] <AlexDaniel> maybe we need something for Seq to limit the number of elements?

[03:10] <Xliff> m: use NativeCall; use MONKEY-TYPING; class A is repr('CStruct') { has int32 $!a; }; augment A { method a { say $!a }; }; A.new(a => 42).a

[03:10] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[03:10] <evalable6> Xliff, Full output: https://gist.github.com/a18e6ccd8af3a60d13786f7c3cf5c119

[03:10] <Xliff> m: use NativeCall; use MONKEY-TYPING; class A is repr('CStruct') { has int32 $!a; }; augment class A { method a { say $!a }; }; A.new(a => 42).a

[03:10] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «0␤»

[03:10] <Xliff> m: use NativeCall; use MONKEY-TYPING; class A is repr('CStruct') { has int32 $!a; submethod BUILD (:$!a) { }; }; augment class A { method a { say $!a }; }; A.new(a => 42).a

[03:10] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «42␤»

[03:11] <AlexDaniel> Xliff: hey, what about .toggle ?

[03:11] <ZzZombo> perlbot: rkeval: role R {has $!lastId = 'thing_A0';has $.id = {my $id = $!lastId; $!lastId .= succ; $id}() };say R.new, R.new

[03:11] <perlbot> ZzZombo: R.new(id => "thing_A0")R.new(id => "thing_A0")␤

[03:11] <Xliff> AlexDaniel: Hmm?

[03:12] <ZzZombo> Is it possible to make the initializer run each time anew?

[03:12] <AlexDaniel> m: say (1..99999999999999999999999).toggle(:off, * > 3, * < 6)

[03:12] <evalable6> AlexDaniel, rakudo-moar ab99c2dd3: OUTPUT: «(4 5)␤»

[03:12] <AlexDaniel> finally found a use for it :D

[03:12] <Xliff> Ooo!

[03:12] <Xliff> So that would work for .lines?

[03:12] <AlexDaniel> sure

[03:13] <AlexDaniel> it should work with any Seq

[03:13] <Xliff> Now to get that working with vars.

[03:13] <AlexDaniel> Xliff: just put the vars in and then bang the keyboard until all off-by-one's are gone

[03:13] <AlexDaniel> … that's what I usually do…

[03:14] <AlexDaniel> :S

[03:14] <AlexDaniel> but hey, at least I'm honest about it :D

[03:14] <Xliff> m: my $start = 0; my $end; my @conds = (* >= $start); @conds.push: * < $end if $end; say (1..14).toggle(:off, |@conds)

[03:14] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1 2 3 4 5 6 7 8 9 10 11 12 13 14)␤»

[03:15] <Xliff> m: my $start = 0; my $end=5; my @conds = (* >= $start); @conds.push: * < $end if $end; say (1..14).toggle(:off, |@conds)

[03:15] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1 2 3 4)␤»

[03:15] <Xliff> m: my $start = 0; my $end=5; my @conds = (* >= $start); @conds.push: * < @conds.elems - $end if $end; say (1..14).toggle(:off, |@conds)

[03:15] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1)␤»

[03:15] <Xliff> m: my $start = 0; my $end=5; my @conds = (* >= $start); @conds.push: * < (@conds.elems - $end) if $end; say (1..14).toggle(:off, |@conds)

[03:15] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1)␤»

[03:16] <Xliff> m: my $start = 0; my $end = 5; my @conds = (* >= $start); @conds.push: @cond.elems < $end if $end; say (1..14).toggle(:off, |@conds)

[03:16] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[03:16] <evalable6> Xliff, Full output: https://gist.github.com/a47885b5f03577272e8d21671647c4e1

[03:16] <Xliff> m: my $start = 0; my $end = 5; my @conds = (* >= $start); @conds.push: * < $end if $end; say (1..14).toggle(:off, |@conds)

[03:16] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1 2 3 4)␤»

[03:16] <Xliff> m: my $start = 0; my $end = 5; my @conds = (* >= $start); @conds.push: * < $end if $end - @cond.elems; say (1..14).toggle(:off, |@conds)

[03:16] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[03:16] <evalable6> Xliff, Full output: https://gist.github.com/0478f0109fe999aafd419ff054f3643b

[03:16] <Xliff> Hum. That's not working as expected.

[03:17] <Xliff> m: my @stuff = (1..14); my $start = 0; my $end = @stuff.elems - 5; my @conds = (* >= $start); @conds.push: * < $end if $end; say .toggle(:off, |@conds)

[03:17] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(exit code 1) Cannot resolve caller toggle(Any:…»

[03:17] <evalable6> Xliff, Full output: https://gist.github.com/6d10cd5fa2fd2a581f0a088439270059

[03:18] <Xliff> m: my @stuff = (1..14); my $start = 0; my $end = +@stuff - 5; my @conds = (* >= $start); @conds.push: * < $end if $end; say @stuff.toggle(:off, |@conds)

[03:18] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1 2 3 4 5 6 7 8)␤»

[03:18] <Xliff> m: my @stuff = (1..14); my $start = 0; my $end = +@stuff - 4; my @conds = (* >= $start); @conds.push: * < $end if $end; say @stuff.toggle(:off, |@conds)

[03:18] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «(1 2 3 4 5 6 7 8 9)␤»

[03:18] <Xliff> AlexDaniel++

[03:18] <Xliff> That works. 

[03:18] <Xliff> Yeeeesssss.

[03:18] *** cpan-raku left
[03:18] <AlexDaniel> lizmat++ for implementing toggle :)

[03:18] <Xliff> Indeed.

[03:19] *** cpan-raku joined
[03:19] *** cpan-raku left
[03:19] *** cpan-raku joined
[03:20] <AlexDaniel> I guess it's one of those things that you may need once in a lifetime, but when that happens you *really* need it

[03:21] <Xliff> Err... the usecase for this is a lot more common than that.

[03:22] <Xliff> cat a file from line $a to $b

[03:22] <Xliff> Try THAT in a shell. :P

[03:23] <ZzZombo> rkeval: role R {has $!lastId = 'thing_A0';has $.id is default({my $id = $!lastId; $!lastId .= succ; $id}()) };say R.new, (my class C does R {}).new

[03:23] <perlbot> ZzZombo: ===SORRY!===␤Cannot invoke this object (REPR: Null; VMNull)␤[Exited 1]

[03:23] <ZzZombo> perlbot: rkeval: role R {has $!lastId = 'thing_A0';has $.id is default({my $id = $!lastId; $!lastId .= succ; $id}()) };say R.new, (my class C does R {}).new

[03:23] <perlbot> ZzZombo: ===SORRY!===␤Cannot invoke this object (REPR: Null; VMNull)␤[Exited 1]

[03:24] <ZzZombo> Hm??

[03:26] *** knoop joined
[03:40] <Xliff> ZzZombo: You may want to look into AttrX::Mooish

[03:41] <Xliff> ZzZombo: You can then lazily define the default attribute, then also include a trigger that will update the attribute every time it changes. Careful with that, however.

[03:42] *** Xliff left
[03:44] *** Xliff joined
[03:45] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { my $id = $!lastId; $!lastId .= succ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId, $a.lastId

[03:45] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «»

[03:46] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { my $id = $!lastId; $!lastId .= succ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId.say, $a.lastId.say

[03:46] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «thing_A2␤thing_A5␤»

[03:46] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { my $id = $!lastId; $!lastId .= succ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId.say, $a.lastId.say

[03:46] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «thing_A2␤thing_A5␤»

[03:47] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { say "F"; my $id = $!lastId; $!lastId .= succ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId.say, $a.lastId.say

[03:47] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «F␤F␤F␤thing_A2␤F␤F␤F␤thing_A5␤»

[03:47] <Xliff> Hrm. So many fetches! Why?

[03:47] <Xliff> ZzZombo: ^^^

[03:47] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { say "F"; my $id = $!lastId; $!lastId .= succ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; 

[03:47] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «»

[03:48] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { say "F"; my $id = $!lastId; $!lastId .= succ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId

[03:48] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «F␤F␤F␤»

[03:49] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { say "F"; my $id = $!lastId; $!lastId .= succ if $++ % 3 == 0 ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId

[03:49] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «F␤F␤F␤»

[03:49] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { say "F"; my $id = $!lastId; $!lastId .= succ if $++ % 3 == 0 ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId.say

[03:49] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «F␤F␤F␤thing_A1␤»

[03:49] <Xliff> m: class A { has $!lastId = 'thing_A0'; method lastId is rw { Proxy.new: FETCH => -> $ { say "F"; my $id = $!lastId; $!lastId .= succ if $++ % 3 == 0 ; $id; }, STORE => -> $, $val { $!lastId = $val }; }; }; my $a = A.new; $a.lastId.say; $a.lastId.say

[03:49] <evalable6> Xliff, rakudo-moar ab99c2dd3: OUTPUT: «F␤F␤F␤thing_A1␤F␤F␤F␤thing_A2␤»

[03:49] <Xliff> Wow. Don't like that hack, though...

[03:50] *** Xliff left
[04:35] <ZzZombo> Van I turn off auto-closing starting brackets in Comma? It gets them every single time wrong.

[04:35] <ZzZombo> Can*

[05:07] <ZzZombo> rkeval: my Pair:D[Int:d] $a = :a<w>;say $a

[05:07] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/ZY53UHt5L9␤Invalid type smiley 'd' used in type name␤at /tmp/ZY53UHt5L9:1␤------> 3my Pair:D[Int:d7⏏5] $a = :a<w>;say $a␤    expecting any of:␤        pair value␤[Exited 1]

[05:07] <ZzZombo> rkeval: my Pair:D[Int:D] $a = :a<w>;say $a

[05:07] <perlbot> ZzZombo: a => w␤

[05:07] <ZzZombo> rkeval: my Pair:D of Int:D $a = :a<w>;say $a

[05:07] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/DYZ6ZNUPP1␤Pair:D cannot be parameterized␤at /tmp/DYZ6ZNUPP1:1␤------> 3my Pair:D of Int:D7⏏5 $a = :a<w>;say $a␤[Exited 1]

[05:08] <ZzZombo> LOL?

[05:08] <ZzZombo> The more I try to use Raku, the less sense it starts to make to me.

[05:23] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D];my IntPair $a = :a<w>;say $a

[05:23] <perlbot> ZzZombo: 5===SORRY!5=== Error while compiling /tmp/TA9jaVuUPJ␤Semicolon form of 'class' without 'unit' is illegal.  You probably want to use 'unit class'␤at /tmp/TA9jaVuUPJ:1␤------> 3 is Pair does Associative[Int:D, Str:D];7⏏5my IntPair $a = :a<w>;say $a␤[Exited 1]

[05:23] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a = :a<w>;say $a

[05:23] <perlbot> ZzZombo: Type check failed in assignment to $a; expected IntPair but got Pair (:a("w"))␤  in block <unit> at /tmp/6x4vhPzE5d line 1␤␤[Exited 1]

[05:24] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a = :a<1>;say $a

[05:24] <perlbot> ZzZombo: Type check failed in assignment to $a; expected IntPair but got Pair (:a(IntStr.new(1, "1")))␤  in block <unit> at /tmp/peiNKDOyJa line 1␤␤[Exited 1]

[05:24] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a = :a(1);say $a

[05:24] <perlbot> ZzZombo: Type check failed in assignment to $a; expected IntPair but got Pair (:a(1))␤  in block <unit> at /tmp/POtomGNhN1 line 1␤␤[Exited 1]

[05:24] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new(:a(1));say $a

[05:24] <perlbot> ZzZombo: Cannot resolve caller new(IntPair:U: :a(Int)); none of these signatures match:␤    (Pair: Cool:D \key, Mu \value, *%_)␤    (Pair: Mu \key, Mu \value, *%_)␤    (Pair: Mu :$key!, Mu :$value!, *%_)␤  in block <unit> at /tmp/2ckiLaPZuE line 1␤␤[Exited 1]

[05:25] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new('a', 1);say $a

[05:25] <perlbot> ZzZombo: a => 1␤

[05:25] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new('a', 5);say $a

[05:25] <perlbot> ZzZombo: a => 5␤

[05:25] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new('a', '3');say $a

[05:25] <perlbot> ZzZombo: a => 3␤

[05:25] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new('a', 'asd');say $a

[05:25] <perlbot> ZzZombo: a => asd␤

[05:25] <ZzZombo> Damn.

[05:26] <ZzZombo> And another one: can't construct a `Pair` out of another `Pair`...

[05:26] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new('a', 'asd');say $a.of, $a.keyof

[05:26] <perlbot> ZzZombo: (Int:D)(Str:D)␤

[05:27] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new; $a<a>='asd';say $a

[05:27] <perlbot> ZzZombo: Cannot resolve caller new(IntPair:U: ); none of these signatures match:␤    (Pair: Cool:D \key, Mu \value, *%_)␤    (Pair: Mu \key, Mu \value, *%_)␤    (Pair: Mu :$key!, Mu :$value!, *%_)␤  in block <unit> at /tmp/FcfzVHwWua line 1␤␤[Exited 1]

[05:28] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new: a=>0; $a<a>='asd';say $a

[05:28] <perlbot> ZzZombo: Cannot resolve caller new(IntPair:U: :a(Int)); none of these signatures match:␤    (Pair: Cool:D \key, Mu \value, *%_)␤    (Pair: Mu \key, Mu \value, *%_)␤    (Pair: Mu :$key!, Mu :$value!, *%_)␤  in block <unit> at /tmp/X6wKd_y_Mr line 1␤␤[Exited 1]

[05:28] <ZzZombo> rkeval: class IntPair is Pair does Associative[Int:D, Str:D] {};my IntPair $a .= new: 'a', 0; $a<a>='asd';say $a

[05:28] <perlbot> ZzZombo: Cannot modify an immutable Int (0)␤  in block <unit> at /tmp/g5RJpk7id2 line 1␤␤[Exited 1]

[05:33] *** [Coke] left
[05:35] *** [Coke] joined
[05:35] *** [Coke] left
[05:35] *** [Coke] joined
[06:20] *** squashable6 left
[06:21] *** squashable6 joined
[06:36] *** jmerelo joined
[06:36] <jmerelo> .seen Kaiepi

[06:36] <tellable6> jmerelo, I saw Kaiepi 2019-12-08T10:52:18Z in #raku-dev: <Kaiepi> ah there you are

[06:37] <jmerelo> .tell Kaiepi how's your Advent Calendar article going?

[06:37] <tellable6> jmerelo, I'll pass your message to Kaiepi

[06:44] *** squashable6 left
[06:44] *** squashable6 joined
[06:46] *** clarjon1 left
[06:47] *** wamba joined
[07:10] *** stoned75 left
[07:13] *** rindolf joined
[07:14] *** rindolf left
[07:19] *** rindolf joined
[07:25] *** wamba left
[07:39] *** jmerelo left
[08:05] *** wamba joined
[08:09] *** daxim left
[08:15] *** daxim joined
[08:18] *** wamba left
[08:22] *** wamba joined
[08:30] *** wamba left
[08:31] *** sarna left
[08:34] *** wamba joined
[08:37] *** knoop left
[08:50] *** sarna joined
[08:58] *** wamba left
[08:58] *** abc_not_cba joined
[08:58] <abc_not_cba> hi. why ?

[08:59] *** wamba joined
[08:59] <tadzik> becuase it's the correct order in the alphabet

[09:05] *** wamba left
[09:17] *** wamba joined
[09:18] *** abraxxa left
[09:18] *** abraxxa joined
[09:23] *** wamba left
[09:27] <moritz> Kafka says hi :D

[09:36] *** wamba joined
[09:39] *** abc_not_cba left
[09:39] *** wamba left
[09:40] *** wamba joined
[09:41] *** sena_kun joined
[09:51] *** wamba1 joined
[09:52] *** wamba left
[09:57] *** abraxxa left
[09:58] *** abraxxa joined
[10:09] *** AlexDani` joined
[10:13] *** AlexDaniel left
[10:13] *** wamba1 left
[10:13] *** wamba joined
[10:18] *** vividsnow joined
[10:24] *** RobRaku joined
[10:41] *** wamba left
[10:41] *** wamba1 joined
[10:53] *** sena_kun left
[11:05] *** wamba1 left
[11:05] <SmokeMachine> Should setting LC_ALL to tr_TR be enough to make `”i”.uc` be “İ”?

[11:06] *** hungrydonkey joined
[11:07] <SmokeMachine> https://en.wikipedia.org/wiki/Dotted_and_dotless_I

[11:08] *** sena_kun joined
[11:13] *** wamba joined
[11:15] *** ZzZombo left
[11:18] *** joule joined
[11:33] *** knoop_ joined
[11:35] *** wamba1 joined
[11:35] *** wamba left
[11:36] *** kensanata joined
[11:41] <Geth> ¦ doc: c9222dfdaa | (Elizabeth Mattijsen)++ | doc/Type/Range.pod6

[11:41] <Geth> ¦ doc: Update Range.int-bounds doc

[11:41] <Geth> ¦ doc: 

[11:41] <Geth> ¦ doc: Reflects the tightened implementation.

[11:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/c9222dfdaa

[11:44] *** wamba1 left
[11:55] *** robertle joined
[12:02] *** RobRaku left
[12:06] *** wamba joined
[12:09] <tbrowder> .tell ab6tract i have a usable version of CheckFile that suits most of my use cases, but it may not suit other users

[12:09] <tellable6> tbrowder, I'll pass your message to ab6tract

[12:20] *** hungrydonkey left
[12:21] *** knoop_ left
[12:28] *** thundergnat left
[12:33] *** klapperl left
[12:33] *** lucasb joined
[12:40] *** knoop joined
[12:41] *** chloekek joined
[12:46] <chloekek> p6: say ｢🏴󠁧󠁢󠁳󠁣󠁴󠁿｣.chars

[12:46] <evalable6> chloekek, rakudo-moar 8c3f29278: OUTPUT: «1␤»

[12:47] <chloekek> Hmm, D’s grapheme decoder reports 7 graphemes for this instead of 1.

[12:49] <chloekek> I’ll check what ICU does.

[12:52] *** sena_kun left
[13:08] *** sena_kun joined
[13:27] *** mensvaga joined
[13:27] *** RobRaku joined
[13:32] *** Doc_Holliwood joined
[13:33] <Doc_Holliwood> The impossible happened. 

[13:34] <Doc_Holliwood> Someone mad Raku available for Android

[13:34] <Doc_Holliwood> *made

[13:35] <Doc_Holliwood> See https://apkpure.com/raku-radio-news-podcast-video/net.amp.dvr

[13:36] <chloekek> Doc_Holliwood: seems unrelated to the Raku programming language.

[13:36] <chloekek> It seems to be a different project that by coincidence has the same name.

[13:37] *** pmurias joined
[13:38] *** thundergnat joined
[13:39] <thundergnat> m: say ｢🏴󠁧󠁢󠁳󠁣󠁴󠁿｣.codes

[13:39] <evalable6> thundergnat, rakudo-moar b9c0196f8: OUTPUT: «7␤»

[13:39] <thundergnat> m: say ｢🏴󠁧󠁢󠁳󠁣󠁴󠁿｣.encode(<utf8>).bytes

[13:39] <evalable6> thundergnat, rakudo-moar b9c0196f8: OUTPUT: «28␤»

[13:40] <Doc_Holliwood> I know. I was trying to be funny.

[13:42] *** wamba left
[13:48] <chloekek> p6: say ｢🚒｣.chars

[13:48] <evalable6> chloekek, rakudo-moar b9c0196f8: OUTPUT: «1␤»

[14:15] *** wamba joined
[14:21] *** wamba left
[14:43] <chloekek> p6: my $x-y = 1; my $z = 2; say $x-y−z;

[14:43] <evalable6> chloekek, rakudo-moar b9c0196f8: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/uBzYMdqXAS␤Undeclared routine:␤    z used at line 1␤␤»

[14:43] <chloekek> p6: my \x-y = 1; my \z = 2; say x-y−z;

[14:43] <evalable6> chloekek, rakudo-moar b9c0196f8: OUTPUT: «-1␤»

[14:43] <chloekek> Beautiful.

[14:47] *** epony left
[14:53] *** RobRaku left
[14:54] *** sena_kun left
[14:58] <chloekek> p6: my \x—y = 1; say x—y;

[14:58] <evalable6> chloekek, rakudo-moar b9c0196f8: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/9QDkUQtCys␤Term definition requires an initializer␤at /tmp/9QDkUQtCys:1␤------> 03my \x08⏏04—y = 1; say x—y;␤»

[14:58] <chloekek> No em-dashes in identifiers. :(

[15:08] *** sena_kun joined
[15:19] *** wamba joined
[15:24] <Kaiepi> .

[15:24] <tellable6> 2019-12-11T06:37:24Z #raku <jmerelo> Kaiepi how's your Advent Calendar article going?

[15:25] <Kaiepi> .tell jmerelo, i have a draft finished, but the example code i use might need some tweaking. depends on what you think. lemme know when you get on

[15:25] <tellable6> Kaiepi, I'll pass your message to jmerelo

[15:30] *** RobRaku joined
[15:34] *** epony joined
[15:58] *** kensanata left
[16:01] *** robertle left
[16:07] *** wamba left
[16:18] *** pmurias left
[16:19] *** pmurias joined
[16:22] <chloekek> p6: constant term:<⦜> = 90 × π / 180; say sin(⦜);

[16:22] <evalable6> chloekek, rakudo-moar b9c0196f8: OUTPUT: «1␤»

[16:26] *** jmerelo joined
[16:42] *** knoop left
[16:54] *** sena_kun left
[16:55] *** ZzZombo joined
[16:58] *** chloekek left
[17:06] *** knoop_ joined
[17:09] *** ZzZombo left
[17:09] *** dogbert17 joined
[17:09] *** ZzZombo joined
[17:09] *** sena_kun joined
[17:13] *** ZzZombo left
[17:24] *** Doc_Holliwood left
[17:24] *** Doc_Holliwould left
[17:28] *** RobRaku left
[17:38] <jmerelo> The [raku] tag is up to 600 questions now in StackOverflow. But still need to swap [perl6] for [raku] in another 300 or so to be able to create a synonym

[17:38] <tellable6> 2019-12-11T02:46:07Z #raku-dev <tbrowder> jmerelo tyil suggests ecosystem improvements as possible GSoC project

[17:38] <tellable6> 2019-12-11T15:25:29Z #raku <Kaiepi> jmerelo, i have a draft finished, but the example code i use might need some tweaking. depends on what you think. lemme know when you get on

[17:39] <jmerelo> https://stackoverflow.com/questions/tagged/raku So please go back to your old questions, or to any question if you've got the privs, and delete the perl6 tags, substituting for raku

[17:40] <jmerelo> .tell Kaiepi I'm around, or you can contact me via Telegram or email, double the initial j, and add gmail.com

[17:40] <tellable6> jmerelo, I'll pass your message to Kaiepi

[17:41] <jmerelo> .tell tbrowder tyil a pretty neat idea. Please do a PR on the new site

[17:41] <tellable6> jmerelo, I'll pass your message to tbrowder

[17:44] *** knoop__ joined
[17:44] *** knoop_ left
[17:49] *** knoop__ left
[17:50] *** knoop joined
[17:55] *** wamba joined
[17:55] *** knoop left
[18:01] *** wamba left
[18:06] *** wamba joined
[18:09] *** knoop__ joined
[18:09] *** daxim left
[18:15] *** daxim joined
[18:53] *** sena_kun left
[19:00] *** chloekek joined
[19:07] *** sena_kun joined
[19:19] *** AlexDani` is now known as AlexDaniel

[19:19] *** AlexDaniel left
[19:19] *** AlexDaniel joined
[19:19] *** stoned75 joined
[19:24] *** pmurias left
[19:28] *** sauvin left
[19:30] *** stoned75 left
[19:33] *** stoned75 joined
[19:36] *** jmerelo left
[19:45] *** Kaiepi left
[19:48] *** Kaiepi joined
[20:01] *** wildtrees joined
[20:12] <Geth> ¦ doc: 1594b19770 | (Stoned Elipot)++ | doc/Language/control.pod6

[20:12] <Geth> ¦ doc: Standardizes example output

[20:12] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1594b19770

[20:13] *** stoned75 left
[20:16] *** stoned75 joined
[20:25] *** pmurias joined
[20:27] *** stoned75 left
[20:39] *** joule left
[20:44] *** stoned75 joined
[20:52] *** stoned75 left
[20:54] *** sena_kun left
[20:55] *** stoned75 joined
[20:56] *** rindolf left
[21:01] *** stoned75 left
[21:08] *** sena_kun joined
[21:09] *** patrickb joined
[21:22] *** leont joined
[21:24] *** josef_october joined
[21:25] *** josef_october left
[21:25] *** josef_october joined
[21:26] <josef_october> j #k4cg

[21:32] *** knoop__ left
[21:32] *** josef_october left
[21:35] *** MasterDuke joined
[21:38] *** knoop joined
[22:08] *** vividsnow left
[22:37] <chloekek> p6: sub f(@xs) { @xs.push(4); }; my @xs = 1, 2, 3; f(@xs); say @xs

[22:37] <evalable6> chloekek, rakudo-moar 7ecc3e84b: OUTPUT: «[1 2 3 4]␤»

[22:54] *** sena_kun left
[23:06] *** vividsnow joined
[23:22] *** chloekek left
[23:28] *** knoop left
[23:31] *** vividsnow left
[23:37] *** vividsnow joined
[23:44] *** MasterDuke left
[23:46] *** leont left
[23:50] *** wamba left
[23:55] <tbrowder> jmdrelo: which site for the PR?

[23:55] <tellable6> 2019-12-11T17:41:17Z #raku <jmerelo> tbrowder tyil a pretty neat idea. Please do a PR on the new site

[23:57] <tbrowder> hi, question ref topic variable: in a for loop "for f.IO.lines {..."

[23:58] <tbrowder> am i free to define

[23:58] <tbrowder> *ref$_

[23:59] <tbrowder> *redefine value of $_ during the

[23:59] <tbrowder> *at the top of the loop and still use when later in the loop?

