[00:18] <Voldenet> my thoughts https://github.com/FCO/Red/issues/15#issuecomment-1984826416

[00:19] <Voldenet> I'm not sure on `Red-*` methods, it's just an idea

[00:19] <SmokeMachine> looking, thanks!

[00:19] <Voldenet> created-on could use unix timestamp too

[00:31] <Voldenet> in fact, I could add that as a comment too

[00:36] *** jpn joined
[00:41] *** jpn left
[01:25] *** Summer left
[01:25] *** Summer joined
[01:28] <Voldenet> defending that `keep model changes instead of model snapshot` approach is going to be hard to defend

[01:31] <Voldenet> ngl, it sounds cool, but nothing else

[01:49] <SmokeMachine> Voldenet: I have added there an option to your migration "class"... https://github.com/FCO/Red/issues/15#issuecomment-1984905771

[01:56] <Voldenet> > User.^migration: *.drop-column("type");

[01:56] <Voldenet> doesn't this require `User` entity to exist?

[01:56] <Voldenet> what if it gets removed in the future?

[02:07] <discord-raku-bot> <aruniecrisps> @SmokeMachine you're suggesting that we use a .sqlite file to house the migration plan right?

[02:07] <SmokeMachine> That's a reason I'm thinking in not only store the model representation but all model classes to each version

[02:08] <SmokeMachine> aruniecrisps: not the plan, but the history...

[02:08] <SmokeMachine> aruniecrisps: but after Voldenet's comment, I'm rethinking it...

[02:09] <discord-raku-bot> <aruniecrisps> Yea didn't voldenet suggest using git diffs?

[02:09] <Voldenet> well, depends

[02:09] <Voldenet> if we store snapshot, you can use diffs to extract differences

[02:10] <Voldenet> if we store differences in migrations, we have diffs and we reconstruct snapshots

[02:10] <Voldenet> though diffs are not useful in terms of frameworks

[02:12] <Voldenet> tbh. entity framework simply stores whole model in every migration

[02:12] <Voldenet> it gets beyond gigantic

[02:13] <Voldenet> so I'm sure what to avoid

[02:14] <discord-raku-bot> <aruniecrisps> What do you think?

[02:14] <discord-raku-bot> <aruniecrisps> I wonder what Rails and Phoenix do

[02:14] <SmokeMachine> I think my preferred way is storing all models for each version... that was we can get the difference between models and we are able to use them on migrations...

[02:15] <Voldenet> that could work

[02:15] <SmokeMachine> by diff, I don't mean git diff, but something like: Model1.diff: Model2

[02:16] <SmokeMachine> something like this: https://github.com/FCO/Red/blob/3e318994d1d4bbbebdd155690bdc5f879515f964/lib/Red/Cli.rakumod#L68

[02:16] <SmokeMachine> (this example uses diff from DB to model...)

[02:17] <discord-raku-bot> <aruniecrisps> I'm assuming for that though you would need something like sqlite to store thee full model

[02:17] <SmokeMachine> no, file

[02:18] <SmokeMachine> just copy the model file

[02:18] <discord-raku-bot> <aruniecrisps> Doesn't that lead to what voldenet was talking about?

[02:19] <SmokeMachine> what?

[02:19] <discord-raku-bot> <aruniecrisps> Where if you store the whole model in every migration it gets way out of hand?

[02:19] <discord-raku-bot> <aruniecrisps> Or am I misunderstanding something

[02:20] <Voldenet> Hmm, what if entities were only stored on change and otherwise old versions would be used

[02:20] <SmokeMachine> sorry... I didn't get it...

[02:20] <Voldenet> the project gets large if you maintain it long enough

[02:21] <SmokeMachine> Voldenet:

[02:21] <SmokeMachine> > Hmm, what if entities were only stored on change and otherwise old versions would be used

[02:21] <SmokeMachine> I was thinking about that too...

[02:22] <Voldenet> it would require some per-entity versioning and having the list of entities used in model

[02:22] <Voldenet> sounds horrible, but shouldn't be that tough to maintain

[02:22] <discord-raku-bot> <aruniecrisps> what would that look like though?

[02:23] <discord-raku-bot> <aruniecrisps> what do you mean by per-entity versioning

[02:23] <SmokeMachine> we just increment the version of a model if it changed on that migration...

[02:23] <SmokeMachine> s/just/only/

[02:24] <Voldenet> `/migrations/entities/User/1/entity.raku: model User is rw { … }`

[02:25] <Voldenet> and then in the migration `/migrations/1/initial-migration.raku: use User:ver<1>` or something similar

[02:25] <discord-raku-bot> <aruniecrisps> ah okay that makes sense

[02:26] <discord-raku-bot> <aruniecrisps> I'm not familiar enough with extended identifiers in Raku to figure how to pull out the version number if needed

[02:27] <SmokeMachine> maybe we could use a custom CompUnit::Repository... 

[02:28] *** kylese left
[02:28] *** kylese joined
[02:28] <SmokeMachine> or maybe just add all of them on META6.json?

[02:28] <discord-raku-bot> <aruniecrisps> I don't like the second idea

[02:29] <SmokeMachine> why?

[02:29] <Voldenet> project shouldn't be referencing other versions

[02:29] <discord-raku-bot> <aruniecrisps> wait do you mean by add all of them to META6.json, what field would they go under

[02:30] <discord-raku-bot> <aruniecrisps> what voldenet said, and i feel that is the ability to get unwieldy very quickly

[02:30] <SmokeMachine> provides

[02:30] <SmokeMachine> maybe the custom CompUnit::Repository then...

[02:31] <Voldenet> consider this: `use lib <entities/User/1 entities/Roles/3 entities/Scores/2>; use User; use Roles…`

[02:31] <Voldenet> something like that sounds a bit awful

[02:32] <discord-raku-bot> <aruniecrisps> Yea, that's what I'm thinking, I don't think the business logic should be directly referencing version numbers

[02:32] <Voldenet> but it's a storage optimization for migrations then

[02:33] <SmokeMachine> maybe return with this old idea: https://github.com/FCO/Red/issues/7

[02:36] *** Summer left
[02:36] *** Summer joined
[02:37] <discord-raku-bot> <aruniecrisps> I think this idea might be better

[02:37] <discord-raku-bot> <aruniecrisps> What are your thoughts @Voldenet?

[02:38] <Voldenet> sounds nice, the only limit is that it has to be parsed

[02:39] <Voldenet> with CompUnit::Repository only specific entities could need to be loaded

[02:40] <Voldenet> so, out of 100 entities in 4 versions, the latest necessary migration may only load 4 files (each 50b in size) instead of one being 20kb in size (I'm assuming 50b per entity)

[02:41] <Voldenet> it's not horrible though

[02:45] <discord-raku-bot> <aruniecrisps> So basically @SmokeMachine if i'm getting you correctly the idea is to implement schema as a CompUnit::Repository?

[02:45] <SmokeMachine> I'm thinking on something like: `use lib "RedSchema#User:ver<1>#Model2:ver<3>#Model3:ver<5>"`

[02:48] <discord-raku-bot> <aruniecrisps> That feels like the same as use lib <entities/User/1 entities/Roles/3 entities/Scores/2>

[02:49] <SmokeMachine> but you don't need to know where they are..

[02:49] <SmokeMachine> but yes...

[02:49] <discord-raku-bot> <aruniecrisps> you don't need to know where they are, but they're still referencing version numbers

[02:50] <SmokeMachine> yes, and that's what we need on the migration, right?

[02:52] <Voldenet> in normal code there wouldn't be any need for that, so either way it's managable

[02:53] <discord-raku-bot> <aruniecrisps> @SmokeMachine oh you mean for the migration

[02:53] <discord-raku-bot> <aruniecrisps> i thought this use lib "RedSchema#User:ver<1>#Model2:ver<3>#Model3:ver<5> was for the business logic

[02:55] <SmokeMachine> better, we could have a Schema.rakumod inside each migration dir and have:

[02:55] <SmokeMachine> class Schema:ver<2> does RedSchema { has @.models = ( Model1:ver<1>, Model2:ver<3>, Model3:ver<5>) }

[02:55] <SmokeMachine> and then, when we `use RedSchema` it would import all those Models...

[02:56] <SmokeMachine> I mean for migration, yes... but this last idea could also be used on normal code (with no versions...)

[02:56] <discord-raku-bot> <aruniecrisps> I like this idea

[02:57] <SmokeMachine> RedSchema would be just a simple `sub EXPORT` with the logic to se what models and what versions to load and just return a map with them...

[02:58] <SmokeMachine> (sorry, @.models would be strings... not the types)

[02:59] <SmokeMachine> the only problem with these ideas is to split files if there are more than 1 model on that...

[03:00] <SmokeMachine> 3am... sorry I need to go now...

[03:00] <Voldenet> productive night either way

[03:00] <Voldenet> 4am here

[03:01] <discord-raku-bot> <aruniecrisps> See you guys later!

[03:02] <SmokeMachine> We need to add that last suggestion on the thread...

[03:06] <Voldenet> I've added something

[03:06] <Voldenet> basically a very brief summary

[03:06] *** Summer left
[03:07] *** Summer joined
[03:07] <SmokeMachine> thnks! I was doing that too... I replaced the class with a sub call (I think that makes more sense)... https://github.com/FCO/Red/issues/15#issuecomment-1984964871

[03:07] <SmokeMachine> Voldenet: ^^

[03:09] <Voldenet> and no thought was lost

[03:09] <SmokeMachine> https://github.com/FCO/Red/issues/15#issuecomment-1984966702

[03:09] <SmokeMachine> Thank you very much you 2!

[03:09] <SmokeMachine> I'm going to sleep

[03:15] *** kylese left
[03:15] *** kylese joined
[03:37] *** Summer left
[03:38] *** Summer joined
[04:08] *** Summer left
[04:08] *** Summer joined
[04:39] *** Summer left
[04:39] *** Summer joined
[05:06] *** MasterDuke joined
[05:09] *** Summer left
[05:10] *** Summer joined
[05:40] *** Summer left
[05:40] *** Summer joined
[06:11] *** Summer left
[06:11] *** Summer joined
[06:32] *** MasterDuke left
[06:41] *** Summer left
[06:42] *** Summer joined
[07:11] *** kst left
[07:12] *** Summer left
[07:12] *** Summer joined
[07:17] *** kst joined
[07:34] *** jpn joined
[07:39] *** jpn left
[07:43] *** Summer left
[07:43] *** Summer joined
[07:43] *** Sgeo left
[08:13] *** Summer left
[08:14] *** Summer joined
[08:44] *** El_Che left
[08:44] *** Summer left
[08:44] *** Summer joined
[08:54] *** merp left
[08:59] *** haxxelotto joined
[09:01] *** merp joined
[09:01] *** jpn joined
[09:08] *** sena_kun joined
[09:53] *** sena_kun left
[10:42] *** ACfromTX left
[11:13] *** hudo__ joined
[11:17] *** hudo_ left
[11:20] *** mark22k left
[11:21] *** mark22k joined
[11:23] *** mark22k left
[11:24] *** mark22k joined
[11:26] *** mark22k left
[11:27] *** mark22k joined
[11:33] *** haxxelotto left
[12:14] <dutchie> what's the best way to make ascii-only regexes?

[12:15] <dutchie> i.e. i don't want \w etc to match non-ascii characters. or would it be better just to check my string is ascii separately from whether it matches the regex

[12:36] <lizmat> m: say "aa" ~~ / <:ascii>+ /

[12:36] <camelia> rakudo-moar 612dd255a: OUTPUT: «｢aa｣␤»

[12:38] <lizmat> m: say "b👍a" ~~ / <:ascii>+ /

[12:38] <camelia> rakudo-moar 612dd255a: OUTPUT: «｢b｣␤»

[12:38] <lizmat> m: say "b👍a" ~~ / ^ <:ascii>+ $ /

[12:38] <camelia> rakudo-moar 612dd255a: OUTPUT: «Nil␤»

[12:38] <lizmat> m: say "ba" ~~ / ^ <:ascii>+ $ /

[12:38] <camelia> rakudo-moar 612dd255a: OUTPUT: «｢ba｣␤»

[12:39] <lizmat> m: say "b👍a" ~~ / <-:ascii>+ /

[12:39] <camelia> rakudo-moar 612dd255a: OUTPUT: «｢👍｣␤»

[12:39] <lizmat> ^^ dutchie 

[12:53] *** MasterDuke joined
[12:57] *** jpn left
[12:59] <dutchie> ah :ascii, couldn't find that in the docs anywhere

[13:20] <lizmat> m: say "b👍a".contains( / <-:ascii> /'

[13:20] <camelia> rakudo-moar 612dd255a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say "b👍a".contains( / <-:ascii> /⏏'␤    expecting any of:…»

[13:20] <lizmat> m: say "b👍a".contains( / <-:ascii> /

[13:20] <camelia> rakudo-moar 612dd255a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> say "b👍a".contains( / <-:ascii> /⏏<EOL>␤»

[13:21] <lizmat> m: say "b👍a".contains( / <-:ascii> / )

[13:21] <camelia> rakudo-moar 612dd255a: OUTPUT: «True␤»

[13:21] <lizmat> m: say "ba".contains( / <-:ascii> / )

[13:21] <camelia> rakudo-moar 612dd255a: OUTPUT: «False␤»

[13:21] <lizmat> that's a quick way to ensure that a string contains any non-ascii grapheme

[13:22] <[Coke]> dutchie - if you could be so kind as to open a raku/doc ticket about what you were trying to find. I just tried to search for :ascii itself and couldn't find it, but someone trying to answer your question wouldn't start with that. (but we should probably have all the regex :classes indexed for search.)

[13:22] <[Coke]> If not, no worries

[13:32] <tbrowder__> hi

[13:33] <tbrowder__> hi

[13:35] <tbrowder__> hi

[13:36] <lizmat> tbrowder__ o/

[13:37] <tbrowder__> hi, lizmat. i'm still blind to my msgs

[13:39] <tbrowder__> i'm working on a module that looks for the user to set a certain value by one of three mean:

[13:42] <tbrowder__> *means: config file, env var, or CLI. i usually expect the priority for programs to check in order first to last: cli, env var, config.

[13:43] <tbrowder__> i would appreciate other opinions as to the best way to do that. maybe POSIX has an answer

[13:45] *** jpn joined
[13:48] <tbrowder__> [Coke]: any problem with a merge of my File::Temp PR?

[13:59] *** jpn left
[14:13] *** jpn joined
[14:15] <[Coke]> tbrowder__: I only had an issue with the sha items in the changelog, but am fine if they go in.

[14:16] <[Coke]> I can't address the "meat" of the changes.

[14:22] <tbrowder__> ok, thnx, maybe lizmat could take a look when time permits

[14:22] *** haxxelotto joined
[14:28] *** xinming left
[14:29] *** xinming joined
[15:02] *** jmcgnh left
[15:35] *** haxxelotto_ joined
[15:35] *** haxxelotto left
[15:49] *** Sgeo joined
[16:37] *** vlad joined
[16:48] *** vlad left
[16:48] *** vlad joined
[17:05] *** El_Che joined
[17:08] <discord-raku-bot> <_grenzo> From a US/Pacific time point of view, rakoons (raccoons?) are crepuscular

[17:08] *** vlad left
[17:08] *** vlad joined
[17:10] <jdv> trash pandas?

[17:11] <discord-raku-bot> <_grenzo> Sure, as long as they use Raku

[17:51] *** haxxelotto_ left
[17:51] *** haxxelotto joined
[18:11] *** haxxelotto left
[18:21] *** vlad left
[18:47] *** jpn left
[19:12] <discord-raku-bot> <antononcube> @grenzo Visual aid:

[19:12] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1215738981912936468/Raku-is-for-Trash-Pandas-1.webp?ex=65fdd828&is=65eb6328&hm=dc931c9101df4aa27b734cd820ee3b54552f4715c2560d79e4f421df3f580191&

[19:30] <tbrowder__> hi

[19:31] <tbrowder__> humbug!

[19:34] *** jpn joined
[19:34] <discord-raku-bot> <_grenzo> Curious, do images work across the irc bridge?

[19:38] *** jpn left
[19:39] *** haxxelotto joined
[20:01] *** abraxxa-home joined
[20:02] *** abraxxa-home left
[20:04] *** abraxxa-home joined
[20:27] *** ericst joined
[20:28] *** jpn joined
[20:28] *** ericst left
[20:32] *** kst left
[20:32] *** jpn left
[20:39] *** kst joined
[20:43] *** jpn joined
[20:48] *** jpn left
[20:57] *** abraxxa-home left
[21:23] *** jpn joined
[21:28] *** jpn left
[21:42] <japhb> _grenzo: We get a link to a WebP file on cdn.discordapp.com

[21:44] *** jpn joined
[21:46] *** haxxelotto left
[21:48] *** jpn left
[22:00] *** haxxelotto joined
[22:08] *** sena_kun joined
[22:11] *** jmcgnh joined
[22:12] *** MasterDuke left
[22:24] *** ponycat joined
[22:26] <ponycat> does raku have an equivalent to this? https://docs.python.org/3/library/os.path.html#os.path.join

[22:29] <discord-raku-bot> <antononcube> @ponycat Yes, https://docs.raku.org/type/IO/Path

[22:30] <ponycat> thanks, it looks like the add method is what I was looking for in particular

[22:33] <discord-raku-bot> <aruniecrisps> @SmokeMachine does .^save return the id of the new record when you're saving a new record?

[22:35] <SmokeMachine> No, but you can .^refresh to repopulate your object (if you are using the refresh experimental)

[22:36] <SmokeMachine> (If I remember it well… let me take a look)

[22:42] <SmokeMachine> Sorry, I was wrong, .^save DOES return stuff: https://github.com/FCO/Red/blob/master/lib/MetamodelX/Red/Model.rakumod#L481

[22:44] *** jpn joined
[22:45] *** MasterDuke joined
[22:46] <discord-raku-bot> <aruniecrisps> It does return something, question is what does it return :cameliathink:

[22:49] *** jpn left
[22:55] <SmokeMachine> In Pg we return *

[22:57] <SmokeMachine> For SQLite, I think it doesn’t return anything useful… but I have no access to a computer to be sure now…

[22:57] <SmokeMachine> But why are you using .^save instead of .^create?

[22:58] <discord-raku-bot> <aruniecrisps> @SmokeMachine I'm thinking about a good way of doing validations

[22:59] <SmokeMachine> What kind of validation?

[22:59] <discord-raku-bot> <aruniecrisps> form data validation, checking to see whether or not the form data is good or not

[23:00] <discord-raku-bot> <aruniecrisps> so say i'm trying to check to see whether or not a value that is entered into a field is valid

[23:00] <discord-raku-bot> <aruniecrisps> the way i have it is I just validate this data directly and accumulate the errors to show to the client

[23:00] <discord-raku-bot> <aruniecrisps> if you look at what i'm doing for begumpura you'll see what i mean

[23:04] <SmokeMachine> You could do validations on type `subset Name of Str where 0 < *.chars <= 30; has Name $.name is column{ :type<varchar(30) };`

[23:05] <SmokeMachine> But I think form validations should be done before data gets to the model…

[23:05] <discord-raku-bot> <aruniecrisps> That's probably a good call

[23:07] <SmokeMachine> As I do on this HTML::Component example: https://github.com/FCO/HTML-Component/blob/main/examples/users/User.rakumod#L32

[23:08] <SmokeMachine> And that’s common to a form validation be different to the model validation…

[23:08] *** haxxelotto left
[23:09] *** haxxelotto joined
[23:19] <SmokeMachine> aruniecrisps: make sense?

[23:36] *** sena_kun left
[23:45] *** jpn joined
[23:51] *** jpn left
