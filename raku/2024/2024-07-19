[01:17] *** kylese left
[01:17] *** hulk joined
[02:04] *** Maylay left
[02:05] *** guifa left
[02:08] *** Maylay joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:24] *** MasterDuke joined
[02:44] *** derpydoo joined
[02:48] *** teatime joined
[02:50] *** pony joined
[05:05] *** yewscion joined
[05:08] *** yewscion left
[05:08] *** yewscion joined
[05:09] *** yewscion left
[05:30] *** Sgeo left
[07:24] *** wayland joined
[07:24] *** sena_kun joined
[07:53] *** sena_kun left
[08:06] *** sena_kun joined
[08:08] <wayland> Question: In the following gist https://gist.github.com/wayland/299d245e4bc04e84eaed49d4fd6e16a8 is the first line in the method useful, or do I have to duplicate it in each function in the Proxy?  

[08:11] <wayland> Hmm.  It looks like the first line gets called once, and then the FETCH block gets called repeatedly.  

[08:13] *** jpn joined
[08:33] *** MasterDuke left
[08:42] *** tadzik left
[08:42] *** tadzik joined
[08:58] <lizmat> without looking at the code, if it's about FETCH being called multiple times: yes, it can

[09:00] <lizmat> looking at the gist: the idea of proxies is that they are created once, and then called

[09:00] <lizmat> so typically you'd bind a proxy on first access, and subsequent accesses would be automatic

[09:03] <lizmat> m: my $a := Proxy.new( FETCH => ->$ { say "FETCH"; 42 }, STORE => -> $, $val { say "STORE $val" } ); $a = 666; say $a + $a

[09:03] <camelia> rakudo-moar f4b4b2196: OUTPUT: ¬´STORE 666‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§84‚ê§¬ª

[09:03] <lizmat> wayland: ^^

[09:04] <lizmat> note you will need to *bind* to the variable to retain its proxyness

[09:05] <lizmat> m: my $a = Proxy.new( FETCH => ->$ { say "FETCH"; 42 }, STORE => -> $, $val { say "STORE $val" } ); $a = 666; say $a + $a

[09:05] <camelia> rakudo-moar f4b4b2196: OUTPUT: ¬´FETCH‚ê§1332‚ê§¬ª

[09:20] *** sena_kun left
[09:31] *** discord-raku-bot left
[09:32] *** discord-raku-bot joined
[09:39] *** jpn left
[09:44] *** jpn joined
[09:50] <wayland> lizmat: Thanks!  That clears things up some.  But if I move that line inside the FETCH/STORE routines, it seems that STORE isn't getting called.  So, I have class Table { has $.backend-object handles <AT-POS> ... }   and I'm calling $table[0].  Should that use the Proxy in $.backend-object ?  

[09:51] <wayland> It's calling FETCH on the backend object, but it doesn't seem to be calling STORE.  

[09:51] <wayland> Maybe I just have to go digging though.  

[09:52] <lizmat> could it be you're assigning the Proxy, instead of binding ?

[09:53] <wayland> Could be.  It's now the only thing inside the method.  I suspect that means that it's getting returned by the AT-POS method, but I don't know where it's getting returned *to*.  

[09:53] <lizmat> m: my $a;  # $a is bound to a Scalar object, with its own FETCH/STORE logic

[09:53] <camelia> rakudo-moar f4b4b2196: ( no output )

[09:54] <lizmat> m: my $a := Proxy.new(...);  # $a is bound to a Proxy object, with *your* FETCH/STORE logic

[09:54] <camelia> rakudo-moar f4b4b2196: OUTPUT: ¬´Stub code executed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:55] <lizmat> my $a = Proxy.new   # creates a Proxy object, on which FETCH is called once and that result is put into the Scalar object in $a

[09:55] <lizmat> the Proxy object is then discarded

[09:55] <lizmat> feels like the latter is going on

[09:59] *** dpk left
[10:00] <wayland> OK.  Thanks.  I'll keep digging and see what I get.  

[10:07] *** dpk joined
[10:13] <wayland> I'm struggling to figure out the difference between "is rw" and "is raw".  Is the difference that, with "is raw", we don't need to use return-rw?  

[10:15] <lizmat> if applied to a routine, yes

[10:16] <wayland> OK, that answers my question :) 

[10:16] <wayland> Thanks!  

[10:17] <lizmat> you can also have "is rw/raw" on parameters, that's why I mentioned routine  :-)

[10:19] <wayland> m: my $a := Proxy.new( FETCH => ->$ { say "FETCH"; 42 }, STORE => -> $, $val { say "STORE $val" } ); $a = 666; say $a + $a; dd $a;

[10:19] <camelia> rakudo-moar f4b4b2196: OUTPUT: ¬´STORE 666‚ê§42‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§84‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§FETCH‚ê§¬ª

[10:20] <wayland> Huh, that's not what it did on my local.  

[10:20] <wayland> Anyway, my question is, is there a way I can tell that an object has a Proxy?  

[10:24] <discord-raku-bot> <melezhik.> Hi patricb: I‚Äôve made a ci for your module - https://sparky.sparrowhub.io/report/sh-patrickb-IO-Socket-TLSViaAsync/22465

[10:25] <discord-raku-bot> <melezhik.> You may pin a badge by https://sparky.sparrowhub.io/badge/sh-patrickb-IO-Socket-TLSViaAsync

[10:29] <lizmat> m: my $a := Proxy.new(FETCH => -> $ { 42 }, STORE => -> $, $val { say "STORE $val" } ); say $a.VAR.^name   # wayland 

[10:29] <camelia> rakudo-moar f4b4b2196: OUTPUT: ¬´Proxy‚ê§¬ª

[10:29] <lizmat> m: my $a; say $a.VAR.^name 

[10:29] <camelia> rakudo-moar f4b4b2196: OUTPUT: ¬´Scalar‚ê§¬ª

[10:30] <wayland> Great!  Thanks!  

[10:50] *** derpydoo left
[11:05] <wayland> Haha, I've figured it out, I think.  $table[0]<name> = 'Narnia'  only does fetches on $table, but should do its STORE on $table[0].  

[11:13] <patrickb> melezhik: Nice!

[11:14] <patrickb> melezhik: You are relying strongly on Cro, right? Would you be willing to take on some responsibility for the Cro framework itself? We are currently in the process of building up a team.

[11:15] <patrickb> Badge added. Apparently the sr.ht markdown supports badges.

[11:35] *** wayland76 joined
[11:35] *** wayland left
[11:40] *** jpn left
[11:41] *** vrurg joined
[11:41] *** vrurg_ left
[12:21] *** jpn joined
[12:28] <discord-raku-bot> <melezhik.> patrickb: thanks for the offer , I am quite busy with life right now, not sure if I will be able to act as a core developer , however I would be happy to give a hand as a infrastructure / ci guy. I am thinking about having integration tests for cro implemented as sparky jobs . Let‚Äôs say we want test tls/databases/client integration ? I could put my ideas on cro gh repo or discussion pages , what you think ?

[12:34] *** jpn left
[12:43] *** jpn joined
[12:58] <patrickb> Sounds good!

[12:59] <patrickb> Thinking about it, do you have plans to integrate sparky into the GitHub APIs? So that results are reported back to GH.

[13:00] <patrickb> If you do, the Rakudo CI bot is a good project to steal from as the GH integration is pretty much completed there.

[13:05] <patrickb> melezhik: What we need most in the Cro project is people willing to review PRs. So if you have some knowledge of the code base or are willing to dig into it and feel you are able to judge if something is good or not, that would help a lot.

[13:11] <[Coke]> Happy cloudstrike day to all who are inadvertently celebrating. :(

[13:17] <greenfork> m: "img.jpg".IO.basename.subst(/"." ("jpg")/, "_thumbnail.$0");

[13:17] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[13:17] <greenfork> m: say "img.jpg".IO.basename.subst(/"." ("jpg")/, "_thumbnail.$0");

[13:17] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´Use of Nil in string context‚ê§img_thumbnail.‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[13:18] <greenfork> Can I avoid this "Use of Nil in string", I think that $0 is not initialized when I call subst. How do I make it work for me?

[13:26] <discord-raku-bot> <antononcube> @Coke Yeah, I feel better about my GitHub Win64 actions failing. (So, celebration is in order.)

[13:27] <greenfork> m: say S/"." ("jpg")/_thumbnail.$0/ given "img.jpg".IO.basename

[13:27] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´img_thumbnail.jpg‚ê§¬ª

[13:28] <greenfork> This form works, though it breaks a method chain. If only there was something like `\1` in other languages to reference a capture regex in a method

[13:30] <discord-raku-bot> <librasteve> coke: yaay \o/

[13:33] <ugexe> greenfork: https://stackoverflow.com/a/59868119/1772220

[13:34] <discord-raku-bot> <antononcube> @greenfork It seems that you have to use match or subst.

[13:34] <ugexe> m: say "xxx".subst(/x $<foo>=(xx)/, {$/<foo>})

[13:34] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´xx‚ê§¬ª

[13:35] <ugexe> m: say "xxx".subst(/x $<foo>=(xx)/, $/<foo>)

[13:35] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´Use of Nil in string context‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[13:35] <ugexe> thus

[13:35] <ugexe> m: say "img.jpg".IO.basename.subst(/"." ("jpg")/, {"_thumbnail.$0"});

[13:35] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´img_thumbnail.jpg‚ê§¬ª

[13:38] <greenfork> Very smart, defer the execution, thank you!

[13:42] <discord-raku-bot> <antononcube> @librasteve If you didn't comment on Frink in reddit, I would have not known about it. üôÇ

[13:53] <tbrowder> any suggestions for naming a module that differs slightly for one OS versus another? at the moment, we assume authors build module X to work for *nix, macos, and windows. but what if it's impossible on, say, windows without a change in dependencies. with zef and the static META6.json file the repos would have to be different.

[13:53] <tellable6> 2024-07-16T22:52:22Z #raku <wayland> tbrowder tbrowder do you mean that we have a shorter version than what lizmat wrote above?  

[13:55] <tbrowder> .tell wayland i was referring to the last part of the name: use a kebab-case alias

[13:55] <tellable6> tbrowder, I'll pass your message to wayland

[13:55] <discord-raku-bot> <antononcube> @tbrowder You can have "X::Unix", "X::Windows", etc.

[13:58] <tbrowder> yep, but kind of unwieldy, but i don't have any better ideas. although being able to tag it somehow in raku.land would be nice

[13:59] <tbrowder> or some special meta key

[14:00] <tbrowder> "os":"w" or "os":"lwm"

[14:02] <tbrowder> in addition to a name diff as you suggested

[14:18] *** Sgeo joined
[16:14] <[Coke]> er, I meant CrowdStrike.

[17:21] *** dustinm` left
[17:29] <patrickb> Hey! I'm first time using GTK::Simple. Is there a way to give a widget a fixed size? I've seen size-request(), but iiuc that's a min size.

[17:34] *** dustinm` joined
[17:45] <patrickb> I found out. Can pass a hash to the v/box constructors instead of the widget directly. Then have :!expand in that hash.

[18:23] <discord-raku-bot> <melezhik.> patrickb: gh and sparky integration is possible , i guess i can test using my token , but probably better to have some impersonated token for that , meanwhile here is my take on cro core -  https://sparky.sparrowhub.io/report/gh-croservices-cro-core/22469

[18:59] *** guifa joined
[19:23] *** ssoss joined
[19:25] *** ssoss left
[19:46] *** skyesoss joined
[19:48] *** skyesoss left
[19:49] *** skyesoss joined
[20:12] *** jpn left
[20:34] *** jpn joined
[20:58] <guifa> m: sub foo ($x) { loop { FIRST my $y = $x; $y--; return 42 if $y < 0 } }

[20:58] <camelia> rakudo-moar a469bd8da: ( no output )

[20:58] <guifa> m: sub foo ($x) { loop { FIRST my $y = $x; $y--; return 42 if $y < 0 } }; foo 4

[20:58] <camelia> rakudo-moar a469bd8da: ( no output )

[20:59] <guifa> m: sub foo ($x) { loop { FIRST my $y = $x; $y--; say $y; return 42 if $y < 0 } }; foo 4

[20:59] <camelia> rakudo-moar a469bd8da: OUTPUT: ¬´3‚ê§-1‚ê§¬ª

[20:59] <guifa> that.... doesn't feel right

[21:11] *** skyesoss1 joined
[21:16] *** sena_kun joined
[21:21] *** sena_kun left
[21:26] <discord-raku-bot> <librasteve> guifa: its a bit of a mystery to me what you intend with the FIRST here

[21:27] <discord-raku-bot> <librasteve> m: sub foo ($x) { my $y = $x; loop { $y--; say $y; return 42 if $y < 0 } }; foo 4;

[21:27] <discord-raku-bot> <Raku eval>  3 2 1 0 -1 

[21:27] <evalable6> librasteve, rakudo-moar a469bd8da: OUTPUT: ¬´3‚ê§2‚ê§1‚ê§0‚ê§-1‚ê§¬ª

[21:28] <discord-raku-bot> <librasteve> i guess

[21:38] *** guifa left
[21:55] *** skyesoss1 left
[22:14] *** thaewrapt left
[22:21] *** jpn left
[22:22] *** jpn joined
[22:40] *** derpydoo joined
[22:42] *** jpn left
[23:22] *** jpn joined
[23:55] *** jpn left
