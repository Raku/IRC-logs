[01:30] *** cm left
[02:10] *** coleman left
[02:12] *** coleman joined
[02:14] *** guifa joined
[02:56] *** Aedil joined
[02:57] *** hulk joined
[02:59] *** Aedil left
[02:59] *** kylese left
[03:04] *** Aedil joined
[03:05] *** guifa left
[03:15] *** hulk left
[03:15] *** kylese joined
[04:08] *** euandreh left
[04:14] *** euandreh joined
[05:54] *** euandreh left
[05:55] *** euandreh joined
[06:28] *** euandreh left
[06:29] *** euandreh joined
[08:00] *** samebchase left
[08:21] *** eseyman left
[08:27] *** manu_ joined
[08:30] *** manu_ is now known as eseyman

[09:01] *** snonux left
[09:35] *** snonux joined
[10:11] *** [Coke] left
[10:44] *** euandreh left
[10:45] *** euandreh joined
[10:57] *** [Coke] joined
[11:21] *** euandreh left
[11:30] *** sena_kun joined
[12:20] *** Sgeo left
[15:00] <discord-raku-bot> <antononcube> @lizmat A very important question: Can the emojis be pipelined and upside-downed?

[15:02] <lizmat> upside-downed: not afaik

[15:02] <tellable6> 2024-12-28T18:55:21Z #raku <timo> lizmat moin moin

[15:03] <lizmat> pipelined?  Not sure what you mean?

[15:03] <discord-raku-bot> <antononcube> Yeah, just tried it. 😦

[15:03] <discord-raku-bot> <antononcube> Oh, "pipelined" is /was a hint for having a CLI for "Text::Emojis".

[15:05] <discord-raku-bot> <antononcube> Meaning, would have been nice to write in the shell something like:  to-emoji "I :heart: :beer:" | ud 

[15:26] <lizmat> antononcube version .0.0.5 has an "em" script

[15:27] <lizmat> % em I :heart: :beer:       

[15:27] <lizmat> I ❤️ 🍺

[15:27] <lizmat> % echo I :heart: :beer: | em  

[15:27] <lizmat> I ❤️ 🍺

[15:30] *** bartolin left
[15:32] <discord-raku-bot> <antononcube> 🎉

[15:34] <lizmat> :tada:  :-)

[17:22] *** bartolin joined
[19:00] *** Aedil left
[19:59] *** Sgeo joined
[20:18] <Geth> ¦ ecosystem/main: 4edc8acdee | (Elizabeth Mattijsen)++ | META.list

[20:18] <Geth> ¦ ecosystem/main: Remove Context

[20:18] <Geth> ¦ ecosystem/main: 

[20:18] <Geth> ¦ ecosystem/main: It's not testable nor installable and probably very out of date

[20:18] <Geth> ¦ ecosystem/main: compared with current async features, such as Channels

[20:18] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/4edc8acdee

[20:21] <Geth> ¦ ecosystem/main: 75c56b95da | (Elizabeth Mattijsen)++ | META.list

[20:21] <Geth> ¦ ecosystem/main: Remove DB::Rscs

[20:21] <Geth> ¦ ecosystem/main: 

[20:21] <Geth> ¦ ecosystem/main: Because this is a client to a daemon that also hasn't been updated

[20:21] <Geth> ¦ ecosystem/main: in 5 years.  And there are probably better alternatives nowadays.

[20:21] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/75c56b95da

[21:44] <xinming> m: my $s = "fd11::/64"; $s ~~ rx/ "/" (\d+)/; $0.say;

[21:44] <camelia> rakudo-moar 3265ff3bb: OUTPUT: «64␤»

[22:00] <xinming> https://github.com/raku-community-modules/URI/blob/main/lib/IETF/RFC_Grammar/IPv6.rakumod   Anyone here would give an example of how I can use this grammer to validate and parse the ipv6 address?

[22:01] <xinming> I know I need to read the docs more, But since I want to make things work first. So I'll read the doc later. :-)

[22:02] <xinming> What I want to do is parse ipv6 address with prefixes, to extract the ipv6 prefix/prefix-length/interface-id info

[22:27] <timo> it doesn't define a token TOP so you have to pass a named parameter to ThatGrammar.parse, i think it's called rule

[22:27] <timo> so parse(..., rule => IPv6address)

[22:34] <xinming> I gave up, I'll read more doc and use that, now, I'll use split and extract parts with length code for now

[22:35] <timo> oh, now i understand what you mean

[22:35] <timo> well, for one you can use subparse which allows a parse to succeed when it doesn't go all the way to the end

[22:37] <timo> but you can also / <IETF::RFC_Grammar::IPv6::IPv6address> '/' (\d+) / i think

[22:48] <xinming> timo: Thanks for the idea, Will go and read doc about this. I have done snippets without using grammar.

[22:48] <xinming> will use that for now.

[22:52] *** sena_kun left
