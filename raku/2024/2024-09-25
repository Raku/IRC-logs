[00:46] *** discord-raku-bot left
[00:46] *** discord-raku-bot joined
[01:27] *** Aedil joined
[01:41] *** euandreh left
[01:41] *** euandreh joined
[01:48] *** teatime left
[01:55] *** hulk joined
[01:56] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[04:09] *** antim0d3s joined
[04:09] *** sdfgsdfg left
[04:26] *** kst left
[04:30] *** sftp left
[05:00] *** Aedil left
[05:19] *** itaipu left
[05:30] *** Sgeo left
[05:36] *** itaipu joined
[05:38] *** derpydoo joined
[05:53] <Xliff> Can you redirect $*ERR to a file?

[06:10] *** [Coke] left
[06:47] *** tib joined
[06:53] *** derpydoo left
[06:55] *** Aedil joined
[07:06] *** sena_kun joined
[07:17] *** sena_kun left
[07:21] <discord-raku-bot> <antononcube> @Xliff Yes.  my $filename = 'error.log'; my $*ERR = open $filename, :w;  # Example usage try {     die "This is an error";     CATCH {         default {             $*ERR.say: .^name, ': ', .Str;         }     } }  $*ERR.close; 

[07:36] <dutchie> which of Readline, Linenoise, or Terminal::LineEditor is best for a reasonable repl experience on Linux these days?

[07:36] * dutchie rlwraps for now

[07:45] <Xliff> Thanks, @antoncube

[08:08] *** [Coke] joined
[08:15] *** dakkar joined
[08:38] <Xliff> my @a; start react whenever @a -> $l { $l.say }; Promise.in(2).then: { @a.push: "a" }; Promise.in(4).then: { @a.push: "b" }; sleep 6;

[08:38] <Xliff> m: my @a; start react whenever @a -> $l { $l.say }; Promise.in(2).then: { @a.push: "a" }; Promise.in(4).then: { @a.push: "b" }; sleep 6;

[08:38] <camelia> rakudo-moar 0b6c7dc69: ( no output )

[08:38] <Xliff> Why does my whever block not trigger?

[09:36] <lizmat> because @a is not an Awaitable ?

[10:47] *** merp left
[10:58] *** merp joined
[11:09] <timo> m: my @a = <foo bar baz>; say "starting"; start react whenever @a -> $l { $l.say }; say "after start react"; Promise.in(2).then: { @a.push: "a" }; Promise.in(4).then: { @a.push: "b" }; sleep 6;

[11:09] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´starting‚ê§after start react‚ê§foo‚ê§bar‚ê§baz‚ê§¬ª

[11:09] <timo> well, the say gets executed faster than the start has time to react (haha, pun)

[11:10] <timo> but since it's a regular array there's no synchronisation that it would offer. it just goes through the array producing the result from everything in it if it's Awaitable, or the thing itself if it's not

[11:11] <timo> you probably want a Channel instead of @a, otherwise you would have to busy-loop or otherwise signal from one thread to the other that a new item is available

[11:14] *** sena_kun joined
[11:43] *** sena_kun left
[11:45] *** merp left
[11:47] *** merp joined
[11:49] *** silug left
[11:52] *** silug joined
[12:22] *** merp left
[12:29] *** merp joined
[12:30] *** merp left
[12:31] *** merp joined
[13:42] <discord-raku-bot> <librasteve> my expectation is that BST (British Summer Time) matches GMT/UTC during the winter and then adjusts ¬±1 hour in spring and autumn. Is this undertsanding correct? And also correct for EDT vs EST and so on?

[13:43] <Xliff> timo: Thanks. 

[13:49] <timo> huh, is combinations broken?

[13:49] <lizmat> que?

[13:50] <timo> wait, combinations is without-putting-back?

[13:50] <lizmat> not sure what you expect ?

[13:50] <lizmat> code?

[13:51] <timo> m: .say for ("a".."c").combinations(2)>>.join("")

[13:51] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´ab‚ê§ac‚ê§bc‚ê§¬ª

[13:52] <timo> i guess what i want is [X] ("a".."c") xx 2

[13:52] <timo> m: .say for [X~] ("a".."c") xx 2

[13:52] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´aa‚ê§ab‚ê§ac‚ê§ba‚ê§bb‚ê§bc‚ê§ca‚ê§cb‚ê§cc‚ê§¬ª

[13:53] <lizmat> m: .say for ("a".."c").permutations(2)>>.join("")

[13:53] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´Cannot resolve caller permutations(List:D: Int:D); none of these signatures matches:‚ê§    (List $:: *%_ --> Seq:D)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:53] <lizmat> hmmm

[13:53] <timo> permutations is always of the full list

[13:53] <timo> that's by definition, but we could offer the "other thing" for convenience

[13:53] <lizmat> combinations would never combine a elem with itself

[13:54] <timo> right, i was being a silly little dumb-dumb

[13:56] <timo> oooh it also only outputs them "sorted", no reorderings

[13:57] <timo> so it outputs a list of sets, technically

[13:57] <lizmat> mathematically speaking, yes

[13:58] <lizmat> m: dd $_ for ("a".."c").combinations(2)

[13:58] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´("a", "b")‚ê§("a", "c")‚ê§("b", "c")‚ê§¬ª

[13:58] <lizmat> in the implementation, they're lists

[14:13] *** sena_kun joined
[16:34] *** dakkar left
[17:26] *** jjido joined
[19:53] <discord-raku-bot> <antononcube> @ab5tract This project is entirely done via comma-2.0(-beta): https://github.com/antononcube/Raku-Math-SparseMatrix

[19:55] <discord-raku-bot> <antononcube> Some far I have seen only minor problem with executable scripts settings. (Basically, a wrongly named Raku SDK might shown and picked.)

[20:44] <ab5tract> antononcube: nice! yeah, there are some lingering issues with the SDK stuff

[20:44] <ab5tract> to make a long story short, Comma would specify a Raku SDK where only a JDK should be specified

[20:45] <ab5tract> considering the revision of IntelliJ and the goal of standalone, this was a perfectly good choice 

[20:45] <ab5tract> but getting out of the grips of that is both under-documented and still under-way

[20:53] *** jjido left
[21:06] <discord-raku-bot> <antononcube> üëç

[21:26] *** sena_kun left
[21:52] *** Sgeo joined
[23:21] <[Coke]> ab5tract++ timo++

