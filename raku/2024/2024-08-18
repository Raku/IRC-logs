[01:22] *** japhb joined
[01:38] *** hulk joined
[01:40] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[03:16] *** Aedil joined
[03:41] *** xinming left
[03:42] *** xinming joined
[07:59] *** wayland joined
[07:59] *** wayland76 left
[08:26] *** sena_kun joined
[09:34] *** merp joined
[09:52] *** teatwo joined
[09:54] *** tea3po joined
[09:54] *** teatime left
[09:57] *** teatwo left
[10:31] *** merp left
[10:41] *** Sgeo left
[11:44] *** tjr joined
[11:49] *** guifa joined
[12:39] *** jast left
[12:39] *** jast joined
[13:21] *** hunkee joined
[13:26] *** guifa left
[13:33] *** hunkee left
[13:50] *** sftp left
[14:04] *** sftp joined
[14:48] *** jaguart left
[14:54] *** jrjsmrtn left
[15:51] *** simcop2387 left
[15:51] *** perlbot left
[15:55] *** perlbot joined
[15:57] *** simcop2387 joined
[16:22] *** simcop2387 left
[16:22] *** perlbot left
[16:24] *** swaggboi left
[16:25] *** swaggboi joined
[16:45] *** simcop2387 joined
[16:47] *** perlbot joined
[17:18] *** izel joined
[17:20] <izel> hi, with RakuAST, how to produce an AST for the code without evaluating it?

[17:20] <izel> like

[17:20] <izel> m: say '$a'.AST

[17:20] <camelia> rakudo-moar d0be5d1be: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Variable '$a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at /home/camelia/EVAL_0:1␤------> <BOL>⏏$a␤»

[17:20] <izel> Instead, I expect: `RakuAST::Statement::Expression.new(expression => RakuAST::Var::Lexical.new("\$a"))`

[17:21] <izel> is there a way?

[17:37] <MasterDuke> m: say 'my $a'.AST

[17:37] <camelia> rakudo-moar d0be5d1be: OUTPUT: «RakuAST::StatementList.new(␤  RakuAST::Statement::Expression.new(␤    expression => RakuAST::VarDeclaration::Simple.new(␤      sigil       => "\$",␤      desigilname => RakuAST::Name.from-identifier("a")␤    )␤  )␤)␤»

[17:39] <MasterDuke> izel: ^^^ you (at least currently) can only get an AST for code that EVALs without error

[17:55] <izel> i see thanks

[17:56] <MasterDuke> np

[18:25] <lizmat> m: my $a; say '$a'.AST.statements.head

[18:25] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «RakuAST::Statement::Expression.new(␤  expression => RakuAST::Var::Lexical.new("\$a")␤)␤»

[18:25] <lizmat> izel: ^^

[18:26] <lizmat> alternately:

[18:26] <lizmat> m: say q/no strict; $a/.AST.statements.skip.head

[18:26] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «RakuAST::Statement::Expression.new(␤  expression => RakuAST::Var::Lexical.new("\$a")␤)␤»

[18:42] <izel> hmm, thanks but first one: the code is retrieved dynamically so i cant predeclare every var, second one: tried with a function call but it errored

[18:43] <izel> m: say 'no strict; f()'.AST

[18:43] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «===SORRY!=== Error while compiling EVAL_0␤Undeclared routine:␤    f used at line 1␤␤»

[18:44] <lizmat> m: say "abs()".AST.statements.head

[18:44] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «===SORRY!=== Error while compiling EVAL_0␤Calling abs() will never work with signature of the proto ␤at EVAL_0:1␤»

[18:44] <lizmat> m: say "set()".AST.statements.head

[18:44] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «RakuAST::Statement::Expression.new(␤  expression => RakuAST::Call::Name.new(␤    name => RakuAST::Name.from-identifier("set")␤  )␤)␤»

[18:44] <lizmat> izel: take that as an example, and s/set/f/

[18:45] <izel> i don't get it

[18:45] <izel> i tried and it errored like SORRY! while compiling above

[18:45] <lizmat> say "set()".AST.statements.head ??

[18:46] <izel> that works but i wanted for unknown `f()` call

[18:46] <izel> to parse an AST without evaling

[18:47] <izel> In Python: `import ast; print(ast.parse("f()").body[0].value.func.id)` prints "f"

[18:47] <lizmat> and what do you want to do with that AST ?

[18:47] <izel> i wanted to check if last statement is a call to "say", for example

[18:48] <izel> i did achieve that in the past (to some extent) with string manipulating (like ends-with etc.)

[18:48] <izel> but wanted to try with RakuAST, as it will parse and not error prone to string manipulation I do

[18:50] <izel> is this an XY problem or am i innocent to have given it a try?

[18:51] <lizmat> it feels a bit like an X-Y problem, as the code you attempt to check isn't valid ?

[18:52] <izel> it's actually in a REPL-like context; the function has already been possibly defined

[18:52] <izel> i get code after code from user

[18:53] <izel> and if it endswith "say $arg", for example, i will only say it, not print also the return value True

[18:53] <lizmat> ah, like that!

[18:54] <lizmat> in the Raku REPL this is done by checking the position of $*OUT before and after evalling

[18:54] <lizmat> if that changed, the code produced output and you don't need to say anything

[18:55] <izel> i see, interesting

[18:55] <lizmat> my $pos = $*OUT.tell; run code; if $*OUT.tell eq $pos { say return value }

[18:58] <izel> but i would want `say "a"; say "b"; 3` to output "a\nb\n3\n", i'll play more, thanks

[18:59] <izel> is there a parser-without-evaler in the Rakudo internals, be it new frontend or old frontend?

[18:59] <lizmat> note that you can also cause output with: put print printf note dd 

[18:59] <izel> like implementation-detail or something maybe

[19:00] <izel> yeah i have an array :\)

[19:00] <izel> constant @PRINTERS   = "put" , "say" , "print" , "dd" , "note";

[19:00] <izel> should add printf :p

[19:00] <lizmat> the old one for sure hasn't, the new one might get one

[19:01] <izel> hmm, thanks

[19:03] <lizmat> it's quite foreseeable that a subclass of the Raku Grammar and/or Raku Actions will be able to do what you want

[19:03] <lizmat> but for now, alas, not

[19:03] *** Sgeo joined
[19:31] *** jrjsmrtn joined
[20:14] *** Aedil left
[20:30] *** izel left
[22:04] *** Xliff joined
[22:04] <Xliff> \o

[22:04] <Xliff> Hope everyone is doing well.

[22:04] <Xliff> m: my @c; my role A { say "Adding"; @c.push( ::?CLASS ) }; class B does A { }; class C does A { }; class D does A { }; @c.gist.say; BEGIN say "Done"

[22:04] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «Adding␤Adding␤Adding␤Done␤[(B) (C) (D)]␤»

[22:04] <Xliff> Is there a way to get a role to automatically run code...at RUN time... every time it is composed on to a class?

[22:08] *** sena_kun left
[22:11] <lizmat> Xliff: put it in the mainline of the role

[22:11] <lizmat> m: role A { say "foo" }; class B does A { }; class C does A { }

[22:11] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «foo␤foo␤»

[22:11] <lizmat> ah, at RUN time...

[22:12] <lizmat> the composition takes place at compile time...

[22:14] <lizmat> at run time, it's just a class with methods, and the only thing separating it from a class without roles, is the fact that the .^does list is not empty

[22:14] <lizmat> sleep&

[22:41] <ab5tract> IIRC there are some plans to implement a COMPOSE construct that would be akin to TWEAK, or maybe it was proposed as a phaser.. can’t really recall atm

[22:42] <wayland> Just a heads-up that Googling "pod6 raku" turns up the new-raku.finanalyst.org, but not the actual raku.org page.  

[22:43] <ab5tract> I don’t think there is much use of pod6 on Raku.org

[22:43] <ab5tract> As a term

[22:43] <wayland> https://docs.raku.org/language/phasers#COMPOSE_(Not_yet_implemented)

[22:43] <wayland> ab5tract: I'd expect it to turn up https://docs.raku.org/language/pod

[22:44] <wayland> Instead of https://new-raku.finanalyst.org/language/pod which is the same thing but on the wrong site.

[22:45] <ab5tract> Yeah, I guess I’m wrong. More use of pod6 than I’d like ;)

[22:45] <wayland> Heading to work now though -- sorry :) .  

[22:45] <ab5tract> Yeah, weird, Google is getting goofier every day

[22:45] *** wayland left
[23:01] <Xliff> So the only way I think it will work is a method, then. :(

[23:05] <Xliff> Huh... maybe..,

[23:05] <Xliff> m: my @c; sub reg (\c) {  say "Adding"; @c.push(c) }; class B { reg(::?CLASS); }; class C { reg(::?CLASS); }; class D { reg(::?CLASS) }; @c.gist.say; BEGIN say "Done"'

[23:05] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «Done␤===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> ?CLASS) }; @c.gist.say; BEGIN say "Done"⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement…»

[23:05] <Xliff> m: my @c; sub reg (\c) {  say "Adding"; @c.push(c) }; class B { reg(::?CLASS); }; class C { reg(::?CLASS); }; class D { reg(::?CLASS) }; @c.gist.say; BEGIN say "Done"

[23:05] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «Done␤Adding␤Adding␤Adding␤[(B) (C) (D)]␤»

[23:06] <Xliff> m: my @c; sub reg (\c) {  say "Adding"; @c.push(c) }; class B { reg(::?CLASS); }; class C { reg(::?CLASS); }; class D { reg(::?CLASS) }; @c.gist.say; BEGIN say "Done"; INIT say "Start"

[23:06] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «Done␤Start␤Adding␤Adding␤Adding␤[(B) (C) (D)]␤»

[23:06] <Xliff> Wow! That looks like it will work.

