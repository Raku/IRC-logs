[00:33] *** nebuchadnezzar left
[00:41] *** guifa joined
[01:11] *** librasteve_ left
[01:14] *** Manifest0 left
[01:21] *** guifa left
[01:31] *** tirnanog left
[01:35] *** teatwo left
[01:35] *** guifa joined
[02:05] *** kylese left
[02:06] *** kylese joined
[02:51] <guifa> bisect: class Int { ; }; my Int = 5

[02:51] <bisectable6> guifa, Will bisect the whole range automagically because no endpoints were provided, hang tight

[02:51] <tellable6> 2024-03-27T07:56:44Z #raku <ab5tract> guifa: worth filing a bug report, but I don‚Äôt actually know whether last-ness can be determinable in the face of a return statement

[02:52] <bisectable6> guifa, Output on all releases: https://gist.github.com/6fa8253de64bfab30cc750347b5bed3e

[02:52] <bisectable6> guifa, Bisecting by output (old=2021.12 new=2022.02) because on both starting points the exit code is 1

[02:53] <bisectable6> guifa, bisect log: https://gist.github.com/8f9f60e49955789dc1177050a0c0f853

[02:53] <bisectable6> guifa, (2022-01-12) https://github.com/rakudo/rakudo/commit/28b512380b2db18f7b573701d98194c44359e2db

[02:53] <bisectable6> guifa, Bisecting by output (old=2019.03.1 new=2019.07.1) because on both starting points the exit code is 1

[02:53] <bisectable6> guifa, bisect log: https://gist.github.com/167925d210a678a302a3444caf31f5c3

[02:53] <bisectable6> guifa, (2019-04-13) https://github.com/rakudo/rakudo/commit/45e2902d0210cc24376229800569e1dbb7856093

[02:53] <bisectable6> guifa, Bisecting by output (old=2016.04 new=2016.05) because on both starting points the exit code is 1

[02:53] <bisectable6> guifa, bisect log: https://gist.github.com/f046ce24f02272737383be6da24de60d

[02:53] <bisectable6> guifa, (2016-05-12) https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[02:54] <bisectable6> guifa, Output on all releases and bisected commits: https://gist.github.com/936ec53681dfee1ace04749f5ff9b09f

[02:54] <guifa> err I mean

[02:54] <guifa> bisect: class Int { ; }; my Int $a = 5

[02:54] <bisectable6> guifa, Will bisect the whole range automagically because no endpoints were provided, hang tight

[02:55] <bisectable6> guifa, Output on all releases: https://gist.github.com/fa65fd6b7adcebb6ae388d0bae587e54

[02:55] <bisectable6> guifa, More than 3 changes to bisect, please try a narrower range like old=2022.03 new=HEAD

[03:15] *** kylese left
[03:15] *** kylese joined
[03:43] *** guifa left
[06:25] *** maylay left
[06:33] *** Maylay joined
[06:41] *** Maylay left
[07:39] *** haxxelotto joined
[08:00] *** Sgeo left
[08:07] *** sena_kun joined
[08:21] *** MasterDuke left
[08:25] *** Manifest0 joined
[08:30] *** jpn joined
[09:24] *** vlad joined
[09:26] *** teatime joined
[10:12] *** ptc joined
[10:17] *** jpn left
[10:19] *** ptc left
[10:25] *** Maylay joined
[10:26] *** vlad left
[10:51] *** ptc joined
[10:56] *** guifa joined
[10:57] *** guifa left
[11:26] <ab5tract> guifa: what‚Äôs the conundrum here?

[11:26] <tellable6> ab5tract, I'll pass your message to guifa

[11:26] *** librasteve_ joined
[12:04] *** haxxelotto left
[12:21] *** ptc left
[14:47] *** jpn joined
[14:56] *** librasteve_ left
[15:05] *** jpn left
[15:13] *** Sgeo joined
[15:25] *** vlad joined
[15:35] *** jpn joined
[15:40] *** jpn left
[16:07] *** jpn joined
[18:12] <tbrowder> [Coke]: do you have a good example of one or more CSV lines using quotes i could use for testing? i'll also check raku spec testing, but a real world one would be helpful. even better is one using newlines and quotes. thnx

[18:54] <ugexe> a multi line address

[18:56] <ugexe> column:mailing_address 'Mr Foo bar\nC/O Jane "The Brain" Doe\n123 Fake St\nMiami, FL 12345'

[18:58] <ugexe> or just anything containing a json string

[18:59] *** haxxelotto joined
[18:59] <jdv> "pretty" for more fun

[19:10] *** haxxelotto left
[19:11] *** haxxelotto joined
[19:21] *** _________ left
[19:28] *** _________ joined
[19:36] <[Coke]> ugexe++

[19:42] *** vlad left
[19:43] *** jpn left
[19:51] *** abraxxa-home joined
[19:57] *** abraxxa-home left
[20:05] *** haxxelotto left
[20:06] *** haxxelotto joined
[20:21] <tbrowder> wow, didn't even think of a json string, what a concept!

[20:21] <tbrowder> ugexe: thnx!

[20:22] <tbrowder> i usually think of a json string as a db itself for simple use

[20:23] <tbrowder> you folks are scaling up on me!

[20:23] *** abraxxa-home joined
[20:24] <tbrowder> csv: comma simply-separated values üòÑ

[20:25] <discord-raku-bot> <librasteve> csv parser test files

[20:26] <discord-raku-bot> <librasteve> https://github.com/maxogden/csv-spectrum

[20:27] <discord-raku-bot> <librasteve> this seems like a useful resource

[20:30] <tbrowder> yes, i vaguely remember seeing it, thnx

[20:31] <tbrowder> btw, ref south fl a long time ago, what group were you presenting to?

[20:31] *** jpn joined
[20:32] <discord-raku-bot> <librasteve> i was presenting the inmos transputer to an invited audience of hardware shops

[20:35] <discord-raku-bot> <librasteve> (we failed, but imo the world missed the HLL + MIMD opportunity)

[20:36] *** jpn left
[20:41] <discord-raku-bot> <librasteve> https://en.m.wikipedia.org/wiki/Occam_(programming_language)

[21:08] <tbrowder> cool, reminds me of a PostScript/PDF a bit. i did like PS programming but like Raku/PDF much better. but i have no patience for python--i love TIMTOWTDI without much concern about spaces

[21:21] <discord-raku-bot> <librasteve> amen to that - I think that Occam was the first language to enforce pythonic indentation ... so for me, perl was a release

[21:22] <discord-raku-bot> <librasteve> that said, Occam's CSP model was very, very cool ... the killer feature is that "if a program can deadlock, it will always deadlock"

[21:24] *** librasteve_ joined
[21:26] *** jpn joined
[21:27] *** cm_ joined
[21:28] *** cm left
[21:28] *** cm_ is now known as cm

[21:31] <discord-raku-bot> <antononcube> I get the warning message: > Method Str (from Distribution::Resource) seen at: ... Please use %?RESOURCES<key> directly instead. for a certain resource CSV file. But when I try to use %?RESOURCES<myFileName>  as in argument in the function csv for "Text::CSV" I get the error that it is not a know input type.

[21:32] <discord-raku-bot> <antononcube> The expression %?RESOURCES<myFileName> is of type Resource not, say, Str. Should I just ignore the warning?

[21:42] *** cm left
[21:43] *** cm joined
[21:44] *** Maylay left
[21:46] <discord-raku-bot> <librasteve> anton: I think that this was tightened up in recent release ... what worked for me was to copy the resource out to another file as you can see here https://github.com/librasteve/raku-PDF-Extract/blob/main/lib/PDF/Extract.rakumod

[21:54] *** Maylay joined
[21:59] <discord-raku-bot> <antononcube> üëç

[22:02] <discord-raku-bot> <antononcube> Hmm... why that? Seems inconvenient.

[22:03] <discord-raku-bot> <antononcube> I mean that warning / error message...

[22:11] <discord-raku-bot> <librasteve> yes - very inconvenient --- I think the idea is that any distro is not allowed to have unfettered access to an installation resource file to prevent the situation where eg. the resource file is a virus and then the install process runs it

[22:13] <discord-raku-bot> <roguerakudev> Any idea why <1/200000000000000000000000000>.WHAT yields (Rat) in the REPL? I thought Rat's denominator was limited to uint64

[22:13] <discord-raku-bot> <roguerakudev> It's not like it's getting clamped into the uint64 range either, because it evaluates to the right thing

[22:15] <discord-raku-bot> <roguerakudev> There's something weird going on, because tacking some nonzero digits onto the end still results in 0.0...05

[22:16] <discord-raku-bot> <roguerakudev> onto the end of the denominator, that is

[22:17] <discord-raku-bot> <roguerakudev> Oh, that's just the rounding I guess

[22:18] <discord-raku-bot> <roguerakudev> But still, a .nude call reveals that the denominator is way bigger than an int64 can hold

[22:18] <discord-raku-bot> <roguerakudev> uint64*

[22:19] <discord-raku-bot> <librasteve> m: say (<1/200000000000000000000000000> + 0).WHAT

[22:19] <evalable6> librasteve, rakudo-moar 73e1c7162: OUTPUT: ¬´(Num)‚ê§¬ª

[22:19] <discord-raku-bot> <Raku eval>  (Num) 

[22:20] <discord-raku-bot> <librasteve> my guess is that the <nu/de> literal is stored as the literal values until you do an operation on it

[22:21] <discord-raku-bot> <librasteve> m: say (<1/200000000000000000000000000>.FatRat + 0).WHAT

[22:21] <evalable6> librasteve, rakudo-moar 73e1c7162: OUTPUT: ¬´(FatRat)‚ê§¬ª

[22:21] <discord-raku-bot> <Raku eval>  (FatRat) 

[22:21] <discord-raku-bot> <librasteve> unless you are doing FatRat

[22:22] <discord-raku-bot> <roguerakudev> that's interesting, because I would expect calling .nude or .WHAT to cause it collapse in some way

[22:23] <discord-raku-bot> <librasteve> well, I suppose it the operations that apply coercions

[22:26] <discord-raku-bot> <roguerakudev> true, but I'm still confused as to how that big Int is getting stored in what is ostensibly a native int slot

[22:26] <discord-raku-bot> <roguerakudev> maybe under the hood it's not actually uint64, but it just ends up being that most of the time as you apply operations

[22:26] *** haxxelotto left
[22:27] <discord-raku-bot> <roguerakudev> I guess I'll have to look at Rakudo source to satisfy my curiousity here

[22:28] <discord-raku-bot> <librasteve> yeah, there is something fishy here ... please do report back

[22:28] <discord-raku-bot> <librasteve> m: say <1/200000000000000000000000000>.Str

[22:28] <evalable6> librasteve, rakudo-moar 73e1c7162: OUTPUT: ¬´0.000000000000000000000000005‚ê§¬ª

[22:28] <discord-raku-bot> <Raku eval>  0.000000000000000000000000005 

[22:30] <discord-raku-bot> <librasteve> that's me trying to work out if there's an Allomorph in play (doesn't seem to be) - but for .Str to resolve to that result means that this is somehow weird

[22:30] <discord-raku-bot> <roguerakudev> Okay, Rat does in fact do Rational[Int, Int] https://github.com/rakudo/rakudo/commit/09d755cbe1d604d81c13e928b37f123aa17667ca

[22:31] <discord-raku-bot> <librasteve> oh - so the uint64 denom is BS

[22:31] <discord-raku-bot> <roguerakudev> According to the current comment, it is known that it should eventually do Rational[Int, uint64], but there's some kind of limitation preventing that right now?

[22:32] <discord-raku-bot> <librasteve> memo to self - do not use raku math for missile targeting software

[22:35] *** kjp left
[22:39] *** kjp joined
[22:50] <discord-raku-bot> <librasteve> soooo ... my first guess would be that our Rat[Int, Int] only fallback to Num "on principle" when there is an irrational operation (sqrt, log, sin...)

[22:50] *** jpn left
[22:52] *** jpn joined
[22:54] <discord-raku-bot> <librasteve> but ... what is this abomination? ...

[22:54] <discord-raku-bot> <librasteve> m: say (<1/200000000000000000000000000> + 0)

[22:54] <evalable6> librasteve, rakudo-moar 73e1c7162: OUTPUT: ¬´5e-27‚ê§¬ª

[22:54] <discord-raku-bot> <Raku eval>  5e-27 

[22:56] <kjp> More likely it's normalising things after every operation.

[22:56] *** jpn left
[22:56] <kjp> Possibly it should on definition as well.

[22:57] <kjp> Having Rat[Int, uint64] would make arithmetic more complicated. With it as it is you can perform a full rational operation, and then check for overflow of the denominator

[22:57] *** abraxxa-home left
[23:01] <discord-raku-bot> <librasteve> my first guess - since the numerator and the denominator are both (Big)Int - is that you would never fallback to Num

[23:02] *** kjp left
[23:03] *** kjp joined
[23:04] <discord-raku-bot> <librasteve> but ... that's not the case since (see above) +0 makes a Num ... but I can make these Nums (which retain their significant value - eg 0.00...005) beyond the precision of double

[23:05] <discord-raku-bot> <librasteve> &afk

[23:13] *** abraxxa-home joined
[23:31] *** sena_kun left
[23:41] *** jpn joined
[23:45] *** jpn left
