[00:02] *** nuno left
[01:02] <SmokeMachine> lizmat: I’ve created 2 issues on ParaSeq, one asking if it could/should have a reduce parallel method and another to ask if it would make sense to head and tail (and any thing that returns an Seq, like skip) to return ParaSeq

[01:07] <[Coke]> are pod comments stripped on compile or are they part of the $=pod?

[01:08] <[Coke]> (and does the answer change in RakuAST)

[01:12] *** jpn joined
[01:15] *** kylese left
[01:16] *** kylese joined
[01:16] *** jpn left
[01:26] *** Chanakan left
[02:15] *** kylese left
[02:15] *** kylese joined
[02:37] *** guifa joined
[02:38] *** guifa left
[02:49] *** Chanakan joined
[04:16] *** merp left
[04:21] *** merp joined
[04:25] *** jpn joined
[04:30] *** jpn left
[04:30] *** wayland joined
[04:31] *** wayland76 left
[05:30] *** Sgeo left
[05:32] *** jpn joined
[06:13] *** jpn left
[06:27] *** jpn joined
[07:16] *** jpn left
[08:33] *** sena_kun joined
[08:58] *** sena_kun left
[09:19] *** jpn joined
[11:18] *** ACfromTX left
[11:32] *** ACfromTX joined
[11:38] *** ACfromTX left
[11:39] *** MasterDuke left
[11:49] *** ACfromTX joined
[11:52] *** jpn left
[12:08] *** jpn joined
[12:16] *** jgaz left
[14:06] *** avuserow_ left
[14:07] *** avuserow_ joined
[14:10] *** soverysour joined
[14:13] *** soverysour left
[14:55] *** Sgeo joined
[16:00] *** jpn left
[17:35] *** simcop2387 left
[17:35] *** perlbot left
[17:38] *** jpn joined
[18:09] *** simcop2387 joined
[18:10] *** perlbot joined
[18:59] *** jpn left
[19:44] *** eddd9087 joined
[19:50] *** Xliff left
[20:00] *** eddd9087 left
[20:22] <tbrowder> .seen tyil

[20:22] <tellable6> tbrowder, I saw tyil 2021-06-20T16:51:00Z in #raku-dev: <tyil> that should be all of the (non-archived) docs

[20:24] <tbrowder> has anyone tried using @tyil's Pod::To::Anything module? it looks very useful but it looks to me like it can't handle pod config hashes

[20:26] <tbrowder> it bombs when i try to feed it a pod chunk with a config entry

[20:26] *** guifa joined
[20:34] *** ACfromTX left
[20:40] <tbrowder> arg, i don't think i'm using it correctly yet!

[20:47] *** ACfromTX joined
[20:56] *** jpn joined
[21:46] *** sena_kun joined
[21:57] *** bdju left
[21:59] *** bdju joined
[22:19] *** jpn left
[22:28] *** bdju left
[22:28] *** bdju joined
[22:54] <[Coke]> .seen cfa

[22:54] <tellable6> [Coke], I saw cfa 2023-03-17T17:38:06Z in #raku: <cfa> m: say "u\x[0308]" ~~ /\x[0308]/

[23:00] *** sena_kun left
[23:04] *** kybr joined
[23:04] <kybr> is there a reverse of the Z operator?

[23:11] <ab5tract> not exactly, but..

[23:11] <ab5tract> m: dd  <a b c> Z=> <x y z>.reverse

[23:11] <camelia> rakudo-moar a26b756a5: OUTPUT: «(:a("z"), :b("y"), :c("x")).Seq␤»

[23:11] <ab5tract> or 

[23:12] <ab5tract> m: (<a b c> Z=> <x y z>).reverse

[23:12] <camelia> rakudo-moar a26b756a5: ( no output )

[23:12] <ab5tract> m: dd (<a b c> Z=> <x y z>).reverse

[23:12] <camelia> rakudo-moar a26b756a5: OUTPUT: «(:c("z"), :b("y"), :a("x")).Seq␤»

[23:13] <ab5tract> kybr: does either of those spark for your use case?

[23:14] <Voldenet> the question was probably how to turn

[23:14] <Voldenet> m: say <a b c> Z <x y z>

[23:14] <camelia> rakudo-moar a26b756a5: OUTPUT: «((a x) (b y) (c z))␤»

[23:14] <Voldenet> into (a b c) (x y z) back

[23:19] <kybr> yes. that

[23:20] <Voldenet> m: my $x = <a b c> Z <x y z>; say ($x.map(*[0]), $x.map(*[1]))

[23:20] <camelia> rakudo-moar a26b756a5: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "Z" in expression "my $x = <a b c> Z <x y z>" in sink context (line 1)␤Index out of range. Is: 1, should be in 0..0␤  in block <unit> at <tmp> line 1␤␤»

[23:21] <Voldenet> hm

[23:21] <Voldenet> m: my $x = eager <a b c> Z <x y z>; say ($x.map(*[0]), $x.map(*[1]))

[23:21] <camelia> rakudo-moar a26b756a5: OUTPUT: «((a b c) (x y z))␤»

[23:21] <Voldenet> that's not exactly an elegant solution

[23:23] <kybr> thanks

[23:23] <Voldenet> but it works at least

[23:29] <guifa> m: multi sub V {@x } { @x.map(*.head), @x.map(*.tail) }; say V(<a b c> Z <x y z>)

[23:29] <camelia> rakudo-moar a26b756a5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@x' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> multi sub V {⏏@x } { @x.map(*.head), @x.map(*.tail) };␤»

[23:29] <guifa> m: multi sub V (@x ) { @x.map(*.head), @x.map(*.tail) }; say V(<a b c> Z <x y z>)

[23:29] <camelia> rakudo-moar a26b756a5: OUTPUT: «((a b c) (x y z))␤»

[23:31] <ab5tract> ah, sorry for misinterpreting the question. Voldenet++ and guifa++

[23:36] <Voldenet> good solution could probably iterate over both of those only once

[23:37] <Voldenet> m: multi sub V($x) { $x.map(*.head), $x.map(*.tail) }; say V(0..* Z 5..*)

[23:37] <camelia> rakudo-moar a26b756a5: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq (you␤might solve this by adding .cache on usages of the Seq, or by assigning␤the Seq into an array)␤  in sub V at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:41] <discord-raku-bot> <antononcube> @lizmat I will publish an English version tomorrow. 🙂

[23:43] <guifa> Voldenet: I was thinking about that too, but I couldn't think of a functional way to do it. 

[23:43] <guifa> obviously can just do 

[23:45] <guifa> m: multi sub V(@x) { my @a; my @b; for @x -> ($a, $b) {push @a, $a; push @b, $b}; return @a.List, @b.List; }; say V(0..4 Z 5..9); 

[23:45] <camelia> rakudo-moar a26b756a5: OUTPUT: «((0 1 2 3 4) (5 6 7 8 9))␤»

[23:45] <guifa> but that fails for the infinite

[23:47] <guifa> ah I guess it'd be creating an iterator and returning a sequence made from it

[23:48] <guifa> would be able to iterate them independently at least

[23:51] <Voldenet> yeah, custom iterator is what I'd think of too

[23:54] <Voldenet> with a buffer for every sequence, and pull-one either using values from the buffer or advancing the inner iterator

[23:54] <Voldenet> doesn't sound like something fitting in one-liner

