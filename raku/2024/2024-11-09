[00:01] <Geth> ¦ ecosystem/main: d479910327 | (Elizabeth Mattijsen)++ | META.list

[00:01] <Geth> ¦ ecosystem/main: Remove SSH::LibSSH

[00:01] <Geth> ¦ ecosystem/main: 

[00:01] <Geth> ¦ ecosystem/main: It will soon live in the zef ecosystem

[00:01] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/d479910327

[01:17] *** Manifest0 left
[02:26] *** coleman left
[02:28] *** coleman joined
[02:47] <SmokeMachine> Hi! I have a question about RakuAST... does ApplyInfix have a "invisible" ArgList? I say invisible because when printing it, it does not show that, but when iterating over its children it is one of the steps... is that correct/expected?

[02:47] <SmokeMachine> m: use experimental :rakuast; say "say 42 + 13".AST.grep: RakuAST::ArgList

[02:47] <camelia> rakudo-moar dc0342502: OUTPUT: «(RakuAST::ArgList.new(␤  RakuAST::ApplyInfix.new(␤    left  => RakuAST::IntLiteral.new(42),␤    infix => RakuAST::Infix.new("+"),␤    right => RakuAST::IntLiteral.new(13)␤  )␤) RakuAST::ArgList.new(␤  RakuAST::IntLiteral.new(42),␤  Rak…»

[02:48] <SmokeMachine> m: use experimental :rakuast; say "say 42 + 13".AST.grep(RakuAST::ArgList).map: *.DEPARSE

[02:48] <camelia> rakudo-moar dc0342502: OUTPUT: «(42 + 13 42, 13)␤»

[02:50] *** kylese left
[02:50] *** kylese joined
[03:15] *** kylese left
[03:15] *** kylese joined
[03:16] *** jgaz left
[03:17] *** jgaz joined
[03:30] <ab5tract> Isn’t that the arglist to ‘say’?

[03:30] *** kylese left
[03:31] <ab5tract> Hmm…

[03:31] <ab5tract> I’ll have to take a look at this tomorrow

[03:32] <ab5tract> But I can recommend looking at the sources, if there are arglists being created they will be visible there

[03:34] *** kylese joined
[03:51] *** guifa left
[04:37] *** xinming left
[04:37] *** xinming joined
[04:46] <SmokeMachine> ab5tract: the 42 + 13 is the arglist for say and 42, 13 is for the  +...

[04:56] <SmokeMachine> m: given "say 42 + 13".AST.statements.head.expression.args.args.head { .say; say .args }

[04:56] <camelia> rakudo-moar dc0342502: OUTPUT: «RakuAST::ApplyInfix.new(␤  left  => RakuAST::IntLiteral.new(42),␤  infix => RakuAST::Infix.new("+"),␤  right => RakuAST::IntLiteral.new(13)␤)␤RakuAST::ArgList.new(␤  RakuAST::IntLiteral.new(42),␤  RakuAST::IntLiteral.new(13)␤)␤»

[04:57] <SmokeMachine> m: given "say 42 + 13".AST.statements.head.expression.args.args.head { .DEPARSE.say; say .args.DEPARSE }

[04:57] <camelia> rakudo-moar dc0342502: OUTPUT: «42 + 13␤42, 13␤»

[05:07] <SmokeMachine> https://github.com/rakudo/rakudo/blob/dc03425027c42a7458f90f3ff68dd237b5a730b5/src/Raku/ast/expressions.rakumod#L1724

[05:29] *** Aedil joined
[07:45] *** lizmat left
[07:46] *** lizmat joined
[08:44] <discord-raku-bot> <librasteve> jdv: and others - apologies about the multiline Discord paste ... I will confine myself to gists from now on

[09:52] *** Sgeo left
[10:57] *** sena_kun joined
[11:15] <lizmat> weekly: https://github.com/Raku/doc-website/issues/419

[11:15] <notable6> lizmat, Noted! (weekly)

[11:55] *** synthmeat left
[11:58] *** synthmeat joined
[12:36] <xinming> m: my @a = :a:b; @a.say;

[12:36] <camelia> rakudo-moar dc0342502: OUTPUT: «[a => True]␤»

[12:37] <xinming> Why is :b eaten in this example please?

[13:13] *** tjr left
[13:14] *** ohmycloud joined
[13:15] *** ohmycloud left
[13:15] *** ohmycloud joined
[13:15] *** ohmycloud left
[13:15] *** guifa joined
[13:18] *** tjr joined
[13:20] *** librasteve_ joined
[13:22] <discord-raku-bot> <librasteve> reaches for irc

[13:23] <librasteve_> m: my @a = :a,:b; @a.say;

[13:23] <camelia> rakudo-moar dc0342502: OUTPUT: «[a => True b => True]␤»

[13:23] <librasteve_> xinming: guess you forgot the comma

[13:24] <xinming> librasteve_: Nope, I do mean  :a:b  thing

[13:24] <xinming> Probalby the spec has changed, or I remember wrong.  IIRC  :a:b means  list of  :a, :b

[13:25] <librasteve_> m: sub fn(*%h) {say %h}; fn :a:b

[13:25] <camelia> rakudo-moar dc0342502: OUTPUT: «{a => True, b => True}␤»

[13:25] <librasteve_> I think the “string together Pair as named args syntax” is only in call context

[13:26] <librasteve_> m: sub fn(*@a) {say @a}; fn :a:b

[13:26] <camelia> rakudo-moar dc0342502: OUTPUT: «Unexpected named argument 'a' passed␤  in sub fn at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:27] <librasteve_> seems to be limited to only Hash params too

[13:31] *** Manifest0 joined
[13:35] <discord-raku-bot> <librasteve> hmmm - can't find it in the docs

[13:36] *** kylese left
[13:41] *** kylese joined
[13:58] *** kylese left
[14:03] *** kylese joined
[14:11] *** tjr left
[14:18] *** tjr joined
[14:18] *** snonux left
[14:21] *** snonux joined
[14:22] *** guifa left
[14:23] <discord-raku-bot> <librasteve> okaay my project for today is to use my (very limited) debug skills to fix Inline::Python build (see https://github.com/niner/Inline-Python/issues/46 if you want a blow by blow account of my fumblings)

[14:25] <discord-raku-bot> <librasteve> so far I have made good progress ... 12/13 tests are working ... yay!

[14:26] <[Coke]> librasteve_: last comment "clean install of zef"- is that really "clean install with zef" ?

[14:26] <[Coke]> good job!

[14:27] *** snonux left
[14:28] *** snonux joined
[14:28] <discord-raku-bot> <librasteve> tx! learning on the job ... yes you are correct ... and so far the issue is mostly resolved with fixing a Python LIB path ...

[14:32] *** snonux left
[14:33] *** snonux joined
[14:59] <discord-raku-bot> <librasteve> okaay - I have gone as far as I know how ... anyone know how to make export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/conda/lib part of the build process with Distribution::Builder::MakefromJSON?

[15:00] <discord-raku-bot> <librasteve> meantime I will document this in the README and submit the doc change as a fix

[15:00] <discord-raku-bot> <antononcube> Maybe that can be in Makefile?

[15:00] <discord-raku-bot> <librasteve> okay let me have a look (likely tomorrow)

[15:01] <discord-raku-bot> <librasteve> since I have to go to the pub

[15:02] <discord-raku-bot> <librasteve> 🍺

[15:02] <discord-raku-bot> <antononcube> Haha -- good luck!

[15:03] <ab5tract> Inline::Python requires conda?

[15:03] <ab5tract> Also, enjoy 🍺

[15:05] <discord-raku-bot> <antononcube> I am not surprised -- Python docs "officially" say to use environments. @librasteve probably just want to know the solution in principle and use a confgurable directory.

[15:05] <discord-raku-bot> <antononcube> That is really good to know, BTW, because certain Python packages can be used only through Python environments.

[15:12] <discord-raku-bot> <librasteve> well it requires Python … my Dockerfile is FROM jupyter:scipy-notebook

[15:13] <discord-raku-bot> <librasteve> I guess they use conda

[15:21] <discord-raku-bot> <antononcube> Yeah, I cannot install fully Python's SciPy library on the default, "built-in" Python distribution of macOS.

[15:22] <discord-raku-bot> <antononcube> More precisely, I could not do that few years ago. So, I am using Python environment via miniforge since then.

[17:04] <xinming> librasteve_: Thanks, I think it's right to think :a:b thing is only allowed in call context.

[17:23] <lizmat> m: sub a(|c) { dd c }; a :b:c:d

[17:23] <camelia> rakudo-moar dc0342502: OUTPUT: «\(:b, :c, :d)␤»

[17:23] <lizmat> m: sub a(*%_) { dd %_ }; a :b:c:d

[17:23] <camelia> rakudo-moar dc0342502: OUTPUT: «{:b, :c, :d}␤»

[17:25] <lizmat> m: dd (:a:b:c)

[17:25] <camelia> rakudo-moar dc0342502: OUTPUT: «(:a, :b, :c)␤»

[17:26] <lizmat> m: my @a = (:a:b:c); dd @a

[17:26] <camelia> rakudo-moar dc0342502: OUTPUT: «[:a, :b, :c]␤»

[17:27] <lizmat> xinming: fwiw, it feels like a bug to me

[17:32] *** japhb left
[17:47] <xinming> lizmat: So,  my @a = :a:b; should be  [:a, :b]

[17:47] <xinming> Will report tomorrow, sleep time here

[17:48] <lizmat> feels to me, yes, as: my @a = (:a:b:c)   *does* work

[17:48] <lizmat> ++xinming

[17:48] <lizmat> sleep well!

[18:04] *** maylay left
[18:12] *** maylay joined
[18:14] <SmokeMachine> is there any plain to create a .DEPARSE with highlight?

[18:18] <SmokeMachine> does it already have it? https://github.com/rakudo/rakudo/blob/dc03425027c42a7458f90f3ff68dd237b5a730b5/src/core.c/RakuAST/Deparse.rakumod#L172

[18:21] <SmokeMachine> I think I found it... sorry for asking before searching...

[18:45] <ab5tract> SmokeMachine: are you feeling clear on the arglist in ApplyInfix?

[18:46] <SmokeMachine> ab5tract: I think so... I just think that's a bit surprising... but makes sense...

[18:55] <ab5tract> Yeah I’m not 100% if it’s necessary..

[19:19] *** Aedil left
[19:54] *** Sgeo joined
[20:05] *** abraxxa-home joined
[20:08] <Geth> ¦ ecosystem/main: 1e78645d62 | (Elizabeth Mattijsen)++ | META.list

[20:08] <Geth> ¦ ecosystem/main: Remove modules now living in the zef ecosystem

[20:08] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/1e78645d62

[20:10] *** dmvrtx left
[20:12] *** dmvrtx joined
[20:13] *** Manifest0 left
[20:22] <SmokeMachine> Is the idea to have something like this? https://usercontent.irccloud-cdn.com/file/scGySF2M/image.png

[20:28] <SmokeMachine> for some reason it did not like a multi hsyn...

[21:36] <SmokeMachine> is there a string method that return the sum of the sizes of chars, I mean to not count invisible chars, for example:

[21:37] <SmokeMachine> m: say "\o33[33;1m42\o33[m" # is there any Str method that with that string it would return 3 ( 42 + enter)?

[21:37] <camelia> rakudo-moar dc0342502: OUTPUT: «742␤»

[21:38] <SmokeMachine> m: say "\o33[33;1m42\o33[m".chars # is there any Str method that with that string it would return 3 ( 42 + enter)?

[21:38] <camelia> rakudo-moar dc0342502: OUTPUT: «12␤»

[22:02] *** Manifest0 joined
[22:03] *** demanuel joined
[22:04] *** demanuel left
[22:19] *** zara left
[22:20] *** Manifest0 left
[23:03] *** Manifest0 joined
[23:19] *** librasteve_ left
[23:22] <lizmat> SmokeMachine: that's why .DEPARSE allows roles to be mixed in  :-)

[23:23] <lizmat> looks like a plan

[23:33] *** sena_kun left
[23:51] *** zara joined
