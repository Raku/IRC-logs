[00:24] *** Manifest0 left
[02:11] *** jpn joined
[02:15] *** jpn left
[02:24] *** hulk joined
[02:26] *** kylese left
[02:47] *** festerdam left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:50] *** justache- is now known as justache

[04:53] *** jpn joined
[04:58] *** jpn left
[06:53] *** jpn joined
[07:21] <xinming> Is it possible to make a raku modules mirror please?

[07:22] <xinming> GFW randomly blocks connections make module install a pain

[08:04] *** abraxxa joined
[08:08] *** jpn left
[08:30] *** abraxxa1 joined
[08:33] *** abraxxa left
[09:09] *** sena_kun joined
[09:09] *** Manifest0 joined
[09:10] *** dakkar joined
[09:12] *** jjido joined
[09:22] *** Sgeo_ left
[09:30] *** jjido left
[09:34] <lizmat> xinming: does GFW block Github ?

[09:52] *** jpn joined
[10:04] *** abraxxa joined
[10:07] *** abraxxa1 left
[10:09] <xinming> lizmat: They don't fully block the github, But there will be random packet drop which caused the network doesn't work most time.

[10:09] <lizmat> you could configure zef to just use the REA

[10:10] <xinming> lizmat: What does REA mean?

[10:10] <lizmat> Raku Ecosystem Archive

[10:11] <lizmat> if you run zef --help

[10:12] <lizmat> it will tell you the location of the configuration file

[10:12] <lizmat> CONFIGURATION ....

[10:12] <lizmat> that's a JSON file

[10:13] <lizmat> the "Repository" section contains an array of 2 arrays

[10:13] <lizmat> sorry, 3 arrays

[10:14] <lizmat> if you move the array with the "shortname": "rea" to the first location, then it will first attempt to load modules from the REA, aka Github

[10:18] <xinming> Is it possible to make a whole module mirror?

[10:20] <lizmat> have you tried using the REA ?

[10:21] <lizmat> or maybe I'm misunderstanding the question?

[10:21] <lizmat> you can also git clone the REA

[10:21] <lizmat> then you'd have the whole ecosystem locally

[10:22] <xinming> lizmat: I saw that REA uses githubusercontent  that site will be blocked randomly too.

[10:23] <lizmat> and a git clone ?

[10:23] <xinming> I'll dig deeper about the git clone way.

[10:25] <xinming> I uses proxy to install modules for now, It's working, But proxy connection is too slow, most of time wasted when I install module is caused by slow proxy link, That's why I want to make a local mirror, and I can update the mirror in the background.

[10:25] <lizmat> a git clone / git pull would do that for you

[10:37] <lizmat> git clone https://github.com/Raku/REA.git

[10:37] <lizmat> or ssh://github.com/Raku/REA.git

[10:50] <xinming> Thanks, will check after I go home. :-)

[11:30] *** jpn left
[12:04] *** Bits joined
[12:05] <Bits> Hi, guys.

[12:05] *** zups left
[12:06] *** Bits left
[12:15] *** jpn joined
[12:21] *** jpn left
[12:26] *** Xliff_ joined
[12:26] <Xliff_> \o

[12:26] <Xliff_> Can someone tell me why this is happening?

[12:26] <Xliff_> Method absolute (from Distribution::Resource) seen at:

[12:26] <Xliff_>   /home/cbwood/Projects/p6-GLib/lib/GLib/Raw/Distro.pm6 (GLib::Raw::Distro), line 165

[12:26] <Xliff_> Please use %?RESOURCES<key> directly instead.

[12:27] <Xliff_> In a specific piece of code that ALL of my later code depends on, I need to get the absolute location of a Distribution::Resource.

[12:28] <Xliff_> Using %?RESOURCES<key> has proven to be problematic in this use-case.

[12:28] <Xliff_> Why is .absolute being deprecated?

[12:29] <Xliff_> Also, since this message started appearing, my parallel compiles are now failing. Compunits are now hanging while waiting for a file lock to release. Said release is not happening.

[12:39] *** jpn joined
[12:45] <lizmat> ugexe ^^

[12:45] <lizmat> I wonder whether the deprecation message is interfering with dependency recording

[12:46] <lizmat> hmmm  I guess it can't as the deprecation message is on stderr, not stdout

[12:51] *** jpn left
[13:06] <Xliff_> I think the issue is that compunits are being recompiled that don't NEED to be. I have compunits I compiled 15 minutes ago being recompiled again. In the case of parallel precomp, this can be devastating since those earlier compunits are now locking files that do not need to be locked.

[13:07] <Xliff_> I'm convinced that the hangups are due to errant raku processes not releasing their file locks.

[13:07] *** abraxxa left
[13:07] <Xliff_> Since I do compilings every week, this issue can't be older than the last compilations I did. 

[13:07] <Xliff_> That should be 8 days ago.

[13:15] *** abraxxa joined
[13:16] <lizmat> could 47fdc20d73c7236f593078 be the reason?   perhaps revert that

[13:16] <linkable6> (2024-01-10) https://github.com/rakudo/rakudo/commit/47fdc20d73 Deprecate the use of PERL6LIB

[13:17] <lizmat> otherwise 225533d6f2a207f8b913

[13:17] <linkable6> (2024-01-07) https://github.com/rakudo/rakudo/commit/225533d6f2 Merge pull request #5507 from rakudo/ugexe/deprecate-more-resources-stuff

[13:21] <ugexe> Why exactly can't you use %?RESOURCES<key>? You do exactly that a few lines down from the deprecation message reference here - https://github.com/Xliff/p6-GLib/blob/a4915915c7595f354a348dc16183dd6f78d26c1c/lib/GLib/Raw/Distro.pm6#L176

[13:24] <ugexe> and why do you *need* the absolute location of a Distribution::Resource?

[13:27] <ugexe> https://github.com/rakudo/rakudo/issues/5504 contains the why and links supporting it

[14:17] *** abraxxa1 joined
[14:19] *** jpn joined
[14:21] *** abraxxa left
[14:47] *** epony left
[14:55] *** Sgeo joined
[15:20] *** epony joined
[15:23] *** abraxxa1 left
[15:41] *** zups joined
[15:42] *** guest912 is now known as wh

[15:43] *** wh is now known as wlhn

[15:49] *** MasterDuke joined
[16:51] *** donaldh joined
[17:37] *** dakkar left
[17:38] <Geth> ¦ Raku-Steering-Council/main: 06f534eee7 | (Elizabeth Mattijsen)++ | minutes/20240113.md

[17:38] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2024-01-13

[17:38] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/06f534eee7

[17:39] <Geth> ¦ Raku-Steering-Council/main: e38ba54620 | (Elizabeth Mattijsen)++ | papers/cat_membership.md

[17:39] <Geth> ¦ Raku-Steering-Council/main: Add Richard Hainsworth to the Community Affairs Team

[17:39] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/e38ba54620

[18:19] *** discord-raku-bot left
[18:19] *** discord-raku-bot joined
[19:10] *** abraxxa-home joined
[19:14] *** jpn left
[19:18] *** jpn joined
[19:23] *** jpn left
[19:57] <tbrowder__> Hi. I would appreciate any critique of the new README on my Date::Utils module. I have been wordsmithing it for many iterations in the last week. The latest is at https://github.com/tbrowder/Date-Utils/, and I want to make a new release--but not until someone else puts eyes on it. A PR for correction would be swell! Thanks.

[20:04] *** sena_kun left
[20:05] *** sena_kun joined
[20:30] <discord-raku-bot> <antononcube> @tbrowder I will get an LLM to do it using this prompt: https://resources.wolframcloud.com/PromptRepository/resources/CopyEdit

[20:32] *** jpn joined
[20:36] *** jpn left
[20:47] <discord-raku-bot> <antononcube> Actually, using the prompt "GrammarReport" is probably more interesting. https://resources.wolframcloud.com/PromptRepository/resources/GrammarReport/

[20:47] <discord-raku-bot> <antononcube> Here are the results I got over that README: 1. Error: The copyright year is in the future (2024). Correction: The copyright year should be the current year or a past year.  2. Error: The phrase "New since the original release is a more general routine" is awkwardly phrased. Correction: It should be rephrased for clarity, such as "A more general routine has been added since the original release".  3. Error: The

[20:47] <discord-raku-bot> phrase "Lists of Date days stay in the proper order as shown here in code used herein" is awkwardly phrased. Correction: It should be rephrased for clarity, such as "The lists of Date days remain in the correct order, as demonstrated in the following code".  4. Error: The phrase "So we must get one of the above sequences in a first week of one to seven days" is unclear. Correction: It should be rephrased for clarity, such as

[20:47] <discord-raku-bot> "Therefore, we must obtain one of the above sequences during the first week, which can range from one to seven days".  5. Error: The phrase "Note also each sequence is defined by its first day number, but it does not have to have its full set of days (as occurs in a partial first week)" is awkwardly phrased. Correction: It should be rephrased for clarity, such as "Also note that each sequence is defined by its first day

[20:47] <discord-raku-bot> number, but it doesn't necessarily include a full set of days, as seen in a partial first week".  6. Error: The phrase "Those remaining days divided by seven (and rounded up by one for any partial week) yield the remaining weeks so we get the desired result" is awkwardly phrased. Correction: It should be rephrased for clarity, such as "Dividing the remaining days by seven (and rounding up by one for any partial week) gives us

[20:48] <discord-raku-bot> the remaining weeks, leading to the desired result".

[20:48] <discord-raku-bot> <antononcube> Obviously, the 1st one indicates the training date range of the model (I used OpenAI's "gpt-4".)

[20:50] *** jjido joined
[20:59] <discord-raku-bot> <antononcube> Here is how my chatbook code for those edits looks like:

[20:59] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1196921687808155800/LLM-GrammarReport-and-CopyEdit-demo.png?ex=65b96330&is=65a6ee30&hm=e8b2df30e273d86cb593553a033aa6d5b67e0e1653f0aac16b0c70eca946d8b1&

[21:00] <Xliff_> ugexe: Why do I need .absolute? Because my code crashes without it and that particular resource isn't documented well enough for me to figure out why.

[21:03] <Xliff_> One use case is if the end user is expected to edit said resource and will need to know where in the repository it is located.

[21:04] <Xliff_> That is the long and short of it.

[21:04] <Xliff_> ugexe: So why shouldn't end-users know where their resource is located?

[21:10] <Xliff_> If this is now the expected behavior, then please tell me why I have to handle Distribution::Resource differently than IO?

[21:10] <Xliff_> They both represent a [file location] so why can't they be handled in a similar manner?

[21:11] <Xliff_> If you expect Distribution::Resource to be handled in a specific way, then could you please tell me how I can get a usable file reference from it?

[21:31] <ugexe> because it doesn't represent an IO path, it could represent a socket for all you know

[21:32] <ugexe> so you can only expect to consume data from it, you shouldn't expect to it to be a file or do file like things

[21:33] <ugexe> that is why it is called Distribution::Resource and not IO::Path

[21:33] <ugexe> if it could just be an IO::Path, then it already would be

[21:35] <ugexe> otherwise if a user really needs to know where some resource is located then it can be accessed through CompUnit::Repository::Installation or CompUnit::Repository::FileSystem

[21:35] <ugexe> you can expect a file from those CompUnit::Repository::* implementations 

[21:36] <ugexe> a CompUnit::Repository::GitHub on the other hand would not return a file for resources (more likely a socket or process handle), yet you could still *read* the data with %?RESOURCES<foo>

[21:36] <discord-raku-bot> <librasteve> what about copy %?RESOURCES<apply/Cargo.toml>, "$apply-dir/apply/Cargo.toml"; ??

[21:37] <ugexe> sure, but then you wouldn't be using %?RESOURCES<apply/Cargo.toml> in your code

[21:38] <discord-raku-bot> <librasteve> "sure" as in don't worry that will continue to work?

[21:39] <ugexe> right

[21:40] <discord-raku-bot> <librasteve> later I go chdir<apply>; run<cargo build> so the Build.pm co-locates all the bits via copy

[21:40] <discord-raku-bot> <librasteve> good - just checking!

[21:41] <ugexe> %?RESOURCES should be viewed like IO::Handle, not an IO::Path

[21:41] <ugexe> a path-less IO::Handle

[21:54] <ugexe> %?RESOURCES<foo>.Str/.absolute/.relative etc also ends up actually being a security issue. Staging occurs in a tmp directory, and precompilation also occurs during this step. The precompiled is "installed" in the next step, which involves moving all the files from the tmp directory to the install location. If someone has a string representation of a resource precompiled in their code it will still

[21:54] <ugexe> point at the tmp directory, and will run fine until whenever that tmp directory is cleared. A clever person could use this to install a malicious library to that tmp location once it gets cleared, potentially having a privileged user run their library

[21:57] *** donaldh left
[21:57] <ugexe> "if the end user is expected to edit said resource and will need to know where in the repository it is located." - but the user is expected to *not* do that, particularly for CompUnit::Repository::Installation

[21:57] <ugexe> files in most repositories are considered immutable

[21:58] <ugexe> the only repository where that isn't the case, you wouldn't need a special way to find the resource (because it will be the literal string you would otherwise use to look it up)

[22:16] <guifa> tonyo++ for behind the scenes help

[22:16] <tonyo> ++

[22:16] <tellable6> 2024-01-14T13:04:15Z #raku <melezhik> tonyo: I've my comment on your grant proposal

[22:17] <tonyo> melezhik: i do have some thoughts around that, i need to think through how to move ahead with those before i have any meaningful questions

[22:17] <tellable6> tonyo, I'll pass your message to melezhik

[22:29] *** jpn joined
[22:35] *** jpn left
[22:56] *** sena_kun left
[22:57] *** lizmat_ joined
[23:01] *** lizmat left
[23:03] *** abraxxa-home left
[23:16] *** lizmat_ left
[23:17] *** lizmat joined
[23:17] *** jjido left
[23:21] *** jjido joined
[23:27] *** jjido left
[23:36] *** tejr left
[23:43] <tbrowder__> antononcube: thanks so much. looks nice test of LLM (but I will see

[23:43] *** jpn joined
[23:43] <tbrowder__> how it really fits).

[23:49] *** tejr joined
[23:49] *** jpn left
