[00:14] *** jpn left
[00:43] *** MasterDuke joined
[00:55] *** jpn joined
[01:01] *** jpn left
[01:19] *** hulk joined
[01:21] *** kylese left
[01:28] *** bloatable6_ joined
[01:28] *** unicodable6_ joined
[01:28] *** nativecallable6_ joined
[01:28] *** evalable6_ joined
[01:28] *** squashable6 joined
[01:28] *** coverable6_ joined
[01:28] *** releasable6_ joined
[01:29] *** bloatable6_ left
[01:29] *** unicodable6_ left
[01:29] *** releasable6_ left
[01:29] *** coverable6_ left
[01:29] *** evalable6_ left
[01:29] *** squashable6 left
[01:29] *** nativecallable6_ left
[01:30] *** tellable6_ joined
[01:30] *** committable6_ joined
[01:30] *** shareable6_ joined
[01:30] *** sourceable6_ joined
[01:30] *** statisfiable6 joined
[01:31] *** linkable6_ joined
[01:31] *** nativecallable6_ joined
[01:31] *** quotable6_ joined
[01:31] *** benchable6_ joined
[01:31] *** unicodable6_ joined
[01:31] *** notable6_ joined
[01:32] *** evalable6_ joined
[01:32] *** greppable6_ joined
[01:32] *** squashable6 joined
[01:32] *** bloatable6_ joined
[01:32] *** releasable6_ joined
[01:32] *** coverable6_ joined
[01:32] *** bisectable6_ joined
[01:33] *** reportable6 joined
[01:40] *** evalable6_ left
[01:41] *** evalable6_ joined
[01:50] *** jpn joined
[01:54] *** jpn left
[02:15] *** hulk left
[02:15] *** kylese joined
[03:11] *** jpn joined
[03:16] *** jpn left
[03:58] *** MasterDuke left
[04:12] *** jpn joined
[04:17] *** jpn left
[04:19] *** simcop2387 left
[04:19] *** simcop2387 joined
[05:00] *** lizmat__ joined
[05:03] *** bdju left
[05:03] *** lizmat left
[05:05] *** bdju joined
[05:09] *** bdju left
[05:10] *** bdju joined
[05:13] *** jpn joined
[05:19] *** jpn left
[05:30] *** Sgeo left
[05:53] *** lizmat joined
[05:57] *** lizmat__ left
[06:00] *** reportable6 left
[06:02] *** reportable6 joined
[06:10] *** xkr47 is now known as xkr947

[06:14] *** jpn joined
[06:20] *** jpn left
[06:27] *** jpn joined
[06:31] *** abraxxa joined
[06:39] *** jpn left
[06:43] *** jpn joined
[06:48] *** jpn left
[06:48] *** silug left
[06:53] *** lizmat_ joined
[06:53] *** haxxelotto joined
[06:56] *** lizmat left
[07:06] *** jpn joined
[07:26] *** silug joined
[07:33] *** jpn left
[07:35] *** xinming left
[07:37] *** xinming joined
[08:14] *** dakkar joined
[08:30] *** lizmat_ left
[08:31] *** lizmat joined
[08:48] *** sena_kun joined
[09:20] *** jpn joined
[11:35] *** kylese left
[11:43] *** jpn left
[11:45] *** kylese joined
[12:00] *** reportable6 left
[12:01] *** reportable6 joined
[12:08] *** jpn joined
[12:10] *** abraxxa left
[12:14] *** jpn left
[12:16] *** abraxxa joined
[12:20] *** jpn joined
[12:23] *** Xliff joined
[12:23] <Xliff> \o

[12:23] <Xliff> Good morning!

[12:24] <Xliff> Can you dynamically create a class with a given .^mro?

[12:31] <lizmat> I wouldn't be surprised if Inline::Perl5 had examples of that

[12:43] <greenfork> Will the new version of Rakudo be released that works with Red?

[12:44] <SmokeMachine> greenfork: main rakudo works with Red…

[12:45] <SmokeMachine> But I agree a new release could be made…

[12:46] <greenfork> SmokeMachine: Alright, thanks! I thought it is strange that the latest release of Rakudo doesn't work with Red, while Red says "Please update your Raku to use Red.", so it is a bit confusing

[12:46] *** lizmat_ joined
[12:46] <[Coke]> Did we figure out why blin didn't catch the issue? does Red need more tests?

[12:47] <SmokeMachine> In this case you need to update to a non released version of rakudo… :(

[12:47] <lizmat_> we're very close to a 2024.04 release: scheduled for the 25th

[12:48] <lizmat_> so one week from now

[12:49] <greenfork> Sounds reasonable to wait one week

[12:49] <SmokeMachine> [Coke]: that’s really a good question… but I don’t think missing tests on Red was the one (but there are tests missing on Red)… but the problem was discovered by Red’s test… almost all tests on Red were failing…

[12:49] *** lizmat left
[12:50] *** lizmat_ left
[12:50] *** lizmat joined
[12:50] <SmokeMachine> lizmat_: couldn’t we have a 2024.04.1? But yes, 1 week may not be much to it…

[12:50] <tellable6> SmokeMachine, I'll pass your message to lizmat_

[12:50] <tellable6_> SmokeMachine, I'll pass your message to lizmat_

[12:51] <lizmat> whee  two tellables!

[12:51] <tellable6> 2024-04-18T12:50:50Z #raku <SmokeMachine> lizmat_: couldn’t we have a 2024.04.1? But yes, 1 week may not be much to it…

[12:51] <tellable6_> 2024-04-18T12:50:51Z #raku <SmokeMachine> lizmat_: couldn’t we have a 2024.04.1? But yes, 1 week may not be much to it…

[12:52] <[Coke]> Is red run by the pre-release blin tests?

[12:52] <SmokeMachine> I think more important than releasing a new version for that problem would be to find out why that wasn’t discovered before the release…

[12:52] <[Coke]> (I never was able to get blin running in docker on my mac, sadly)

[12:53] <SmokeMachine> [Coke]: I don’t know, but I really how it is… I know that it already got problems on Red before…

[12:55] <greenfork> On Windows, what is the difference between raku.exe and rakuw.exe? Which one would I run for an SDL application like a game in Pop?

[12:56] <lizmat> if I remember correctly, one of them doesn't open a window, and the other one dies

[12:56] <lizmat> *does

[12:57] * lizmat hasn't used Windows for 23+ years now

[13:00] <patrickb> Green fork: Rakuw.exe won't open a console window. Stdin and out are not connected. when using it make sure you don't use the handles.

[13:00] <patrickb> raku.exe will open a console window.

[13:01] <greenfork> Thank you! I will need rakuw.exe then

[13:01] <patrickb> technically raku.exe has application type set to "console" while rakuw.exe to "windows"

[13:02] <patrickb> Be careful with the STD handles. If you manage to write to them the app will insta die.

[13:03] <patrickb> I seem to recall that there are mechanisms in place that will noop say / note and the likes, but it's not foolproof.

[13:05] <greenfork> Have you had any luck running Windows version of Raku on Linux with Wine?

[13:05] <greenfork> I don't seem to be able to run Hello, World! with raku.exe

[13:06] <ceux> why would you run rakuw on wine LOL

[13:07] <greenfork> To test that it works on Windows without a Windows machine

[13:07] <ceux> i don't trust wine enough to do that. TBH...

[13:09] <greenfork> It's better than nothing. Last time it catched \r\n vs \n bugs, and a strange font rendering issue. I did a game in Janet then

[13:10] <ceux> greenfork: just download a windows vm.

[13:10] <ceux> https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/

[13:11] <greenfork> Maybe I should

[13:13] *** Sgeo joined
[13:22] <patrickb> greenfork: there are some docs in https://github.com/rakudo/rakudo/blob/main/tools/build/binary-release/assets/Windows/README.txt I have the vague feeling that it's not up-to-date though. No word about STD handles being disabled.

[13:49] <greenfork> patrickb: Thank you, I found explanations in README.txt: **WARNING** These _non-console_ applications do not have their `STDIN`, `STDOUT` and `STDERR` attached. Trying to write to these handles will cause the application to abort.

[13:58] *** discord-raku-bot left
[13:59] *** lizmat_ joined
[14:01] *** discord-raku-bot joined
[14:03] *** lizmat left
[14:13] <patrickb> I think there is some code in rakudo that disables writes to the handles. I'll see if I can find the commit.

[14:43] *** jpn left
[14:45] *** jpn joined
[16:05] *** jpn left
[16:32] *** dakkar left
[17:03] *** haxxelotto left
[17:11] *** tjr left
[17:14] *** haxxelotto joined
[17:32] *** lizmat_ left
[17:32] *** lizmat joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:41] *** TieUpYourCamel left
[19:21] *** abraxxa left
[19:22] *** haxxelotto left
[19:57] *** jpn joined
[20:01] *** jpn left
[20:18] <discord-raku-bot> <librasteve> o/

[20:19] <discord-raku-bot> <librasteve> anton: thanks for the quick fix on Chemistry::Stoichiometry! (sorry for slow reply ... $day-job!)

[20:22] <discord-raku-bot> <librasteve> coke: thanks for your feedback on the length / flags around the .pm deprecation message ... not sure if this was addressed yet, please let me know if I should eg post an issue on rakudo/rakudo?

[20:25] *** haxxelotto joined
[21:24] *** Maylay left
[21:27] *** Maylay joined
[22:02] *** lizmat_ joined
[22:06] *** lizmat left
[22:06] <Xliff> For those who can log in to repl.it, here is the result of my experiment with dynamic class making: https://replit.com/@Xliff/PlumpDapperRepository

[22:11] *** bdju left
[22:17] <Xliff> Can someone tell me why my sub EXPORT symbol 'D' isn't getting picked up by the consuming script here: https://replit.com/@Xliff/PlumpDapperRepository#main.raku

[22:19] <Xliff> Oh wow, I had to add "returns Hash" and return a Hash instead of a Map

[22:19] <Xliff> ... OK

[22:27] <ab5tract> Xliff: it appears that your links are visible even without a login, which is breath of fresh air

[22:29] <ab5tract> were you using `%()` as the return "wrapper" prior to using `returns Hash`?

[22:29] <Xliff> No. I was using Map.new

[22:29] <ab5tract> gotcha

[22:30] <Xliff> ab5tract, And you're right. That is good news. I use repl.it for testing my wild theories all of the time and it hurts when I want to share when it's held captive by a login.

[22:30] <ab5tract> that's pretty surprising

[22:30] <ab5tract> the Hash vs Map thing

[22:31] <Xliff> Yeah. Was to me, but I couldn't get it to work with: 'sub EXPORT { Map.new( D => obj ) }'

[22:31] <ab5tract> repl.it is pretty great stuff

[22:31] <Xliff> Yeah.

[22:31] <Xliff> The only way I know to check on situations where you NEED a separate module to illustrate an issue... like now.

[22:31] <ab5tract> even better knowing that one can share so easily

[22:35] <ab5tract> Xliff: this is as dynamic as I've ever  gotten when it comes to EXPORT : https://github.com/finanalyst/GTK-Simple/commit/4419b07827b6ef2d7cf989e3ff7b6c8490812a78#diff-c786c35fb05ee61bcae4daeac542097132ea07ddb14ccc58ed97950c315116a1

[22:36] <Xliff> Is EXPORT::subs documented anywhere?

[22:38] <ab5tract> The pattern must be documented somewhere, or I couldn't have discovered it...

[22:38] <Xliff> Or is that package level module that is basically EXPORT::<tag>

[22:38] <ab5tract> that's exactly right

[22:38] <Xliff> Hmm...

[22:38] <Xliff> So I could have a module EXPORT::DEFAULT?

[22:38] <ab5tract> I believe so, yeah

[22:39] <Xliff> Hmmm... that gives me ideas. TIMTOWTDI!

[22:42] <ab5tract> I wish this were a bit more self-documenting: https://github.com/Raku/roast/blob/ea4e74b76e888b0ac8b6311a9d31d3fa7d8a3184/S11-modules/export.t#L53

[22:45] *** jpn joined
[22:50] *** jpn left
[22:57] *** lizmat joined
[23:00] *** lizmat_ left
[23:28] <tonyo> if you're exporting as default then you can get at it with &YourMod::EXPORT::DEFAULT::sub

[23:28] <tonyo> if you're exporting as something else then the keys in YourMod::EXPORT::.keys will be different

[23:29] *** haxxelotto left
[23:31] *** ttyyls left
[23:31] *** lizmat_ joined
[23:35] *** lizmat left
[23:35] *** lizmat__ joined
[23:38] *** lizmat_ left
[23:38] *** lizmat joined
[23:42] *** lizmat_ joined
[23:42] *** lizmat__ left
[23:45] *** lizmat__ joined
[23:46] *** lizmat left
[23:48] *** lizmat joined
[23:49] *** lizmat_ left
[23:50] *** ttyyls joined
[23:51] *** lizmat_ joined
[23:52] *** lizmat__ left
[23:53] *** kotrcka joined
[23:55] *** sena_kun left
[23:55] *** lizmat left
[23:56] *** tjr joined
