[01:05] *** hulk joined
[01:05] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:15] <ingy> I wanted to mention here that YAMLScript is an official language track on exercism.org now: https://exercism.org/tracks/yamlscript

[02:17] <ingy> The exercise solutions in YS are always among the most concise... Raku, Haskell and Python generally do quite well also...

[02:18] <ingy> Here's a generated language comparison of one of the exercises: https://gist.github.com/ingydotnet/03d6e44d2b1d74c5252ed88b298cbc9e

[02:18] <ingy> The Raku solution there is lovely <3 :)

[03:18] *** Aedil joined
[03:21] <xinming> Hi, Is there a better way to do something like this:     my $class = Int;  Any ~~ $class     ?

[03:21] <xinming> Check class in scalar not Any

[03:33] *** nine_ joined
[03:33] *** nine left
[03:33] *** camelia left
[03:38] *** camelia joined
[05:35] *** Sgeo left
[06:26] *** xinming_ left
[06:28] *** xinming_ joined
[06:49] *** xinming_ left
[06:51] *** xinming_ joined
[07:11] *** simcop2387 left
[07:11] *** perlbot left
[07:25] *** simcop2387 joined
[07:26] *** perlbot joined
[07:28] *** MasterDuke left
[07:39] <discord-raku-bot> <antononcube> @ingy What “generated” means? I do not think it means “LLM-generated”, but I might be wrong.

[08:00] <ab5tract> xinming: are you trying to check whether the object is a scalar?

[08:14] *** dakkar joined
[08:32] *** Aedil left
[08:32] *** sena_kun joined
[08:40] *** Aedil joined
[09:05] *** sena_kun left
[10:33] *** jjido joined
[10:57] *** jjido left
[11:00] *** teatwo left
[11:54] <xinming> ab5tract: Nope, I'm trying to check the $scalar has class assigned. $scalar.defined returns False for class

[12:02] <xinming> So what I can think of is, use Any to test with, but wish to know if we can have better way for this.

[12:05] <discord-raku-bot> <antononcube> @xinming You can probably use Perl6::Metamodel::ClassHOW.

[12:07] <timo> you want to check what the variable is defined as?

[12:08] <timo> m: my Int $foo; my Any $bar; say $foo.VAR.of; say $bar.VAR.of;

[12:08] <camelia> rakudo-moar dde756878: OUTPUT: «(Int)␤(Any)␤»

[12:08] <timo> or you want to see if the thing stored in the variable is not definite, i.e. not an instance?

[12:10] <timo> m: my $foo = Any; my $bar = Pair; my $baz = 99; class Meanie { method defined { False } }; my $quux = Meanie.new(); for ($foo, $bar, $baz, $quux) { say "DEFINITE? $_.DEFINITE() - defined? $_.defined()"; }

[12:10] <camelia> rakudo-moar dde756878: OUTPUT: «DEFINITE? False - defined? False␤DEFINITE? False - defined? False␤DEFINITE? True - defined? True␤DEFINITE? True - defined? False␤»

[12:11] <timo> m: my $foo = Any; my $bar = Pair; my $baz = 99; class Meanie { method defined { False } }; my $quux = Meanie.new(); my $blorb = Meanie; for ($foo, $bar, $baz, $quux, $blorb) { say "DEFINITE? $_.DEFINITE() - defined? $_.defined() - ~~ Mu:U? $( $_ ~~ Mu:U )"; }

[12:11] <camelia> rakudo-moar dde756878: OUTPUT: «DEFINITE? False - defined? False - ~~ Mu:U? True␤DEFINITE? False - defined? False - ~~ Mu:U? True␤DEFINITE? True - defined? True - ~~ Mu:U? True␤DEFINITE? True - defined? False - ~~ Mu:U? True␤DEFINITE? False - defined? False - ~~ Mu:U? True␤»

[12:12] <timo> m: my $foo = Any; my $bar = Pair; my $baz = 99; class Meanie { method defined { False } }; my $quux = Meanie.new(); my $blorb = Meanie; for (:$foo, :$bar, :$baz, :$quux, :$blorb) -> $_ is copy { say .key; $_ = .value; say "DEFINITE? $_.DEFINITE() - defined? $_.defined() - ~~ Mu:U? $( $_ ~~ Mu:U )"; }

[12:12] <camelia> rakudo-moar dde756878: OUTPUT: «foo␤DEFINITE? False - defined? False - ~~ Mu:U? True␤bar␤DEFINITE? False - defined? False - ~~ Mu:U? True␤baz␤DEFINITE? True - defined? True - ~~ Mu:U? True␤quux␤DEFINITE? True - defined? False - ~~ Mu:U? True␤blorb␤DEFINITE? False -…»

[12:14] <timo> m: my $foo = Any; my $bar = Pair; my $baz = 99; class Meanie { method defined { False } }; my $quux = Meanie.new(); my $blorb = Meanie; say "DEFINITE? defined?   Mu:U?"; for (:$foo, :$bar, :$baz, :$quux, :$blorb) -> $_ is copy { say .key; $_ = .value; ($_.DEFINITE(), $_.defined(), $_ ~~ Mu:U).fmt("% 10s").say; }

[12:14] <camelia> rakudo-moar dde756878: OUTPUT: «DEFINITE? defined?   Mu:U?␤foo␤     False      False       True␤bar␤     False      False       True␤baz␤      True       True       True␤quux␤      True      False       True␤blorb␤     False      False       True␤»

[12:15] <timo> ok not 100% sure why Mu:U gives True for all those

[12:16] <timo> m: my $foo = Any; my $bar = Pair; my $baz = 99; class Meanie { method defined { False } }; my $quux = Meanie.new(); my $blorb = Meanie; say "Mu:U?"; for ($foo, $bar, $baz, $quux, $blorb) { say ($_ ~~ Mu:U) }

[12:16] <camelia> rakudo-moar dde756878: OUTPUT: «Mu:U?␤True␤True␤True␤True␤True␤»

[12:17] <timo> m: my $foo = Any; my $bar = Pair; my $baz = 99; class Meanie { method defined { False } }; my $quux = Meanie.new(); my $blorb = Meanie; say "Mu:U?"; for ($foo, $bar, $baz, $quux, $blorb) { say ($_ ~~ Mu:U, $_ ~~ Mu:D, $_ ~~ Mu:_) }

[12:17] <camelia> rakudo-moar dde756878: OUTPUT: «Mu:U?␤(True False True)␤(True False True)␤(True True True)␤(True True True)␤(True False True)␤»

[12:17] <timo> m: say 42 ~~ Int:U

[12:17] <camelia> rakudo-moar dde756878: OUTPUT: «False␤»

[12:18] <timo> m: for (42,) { say $_ ~~ Int:U }

[12:18] <camelia> rakudo-moar dde756878: OUTPUT: «False␤»

[12:18] <timo> m: for (42,) { say $_ ~~ Any:U }

[12:18] <camelia> rakudo-moar dde756878: OUTPUT: «False␤»

[12:18] <timo> m: for (42,) { say $_ ~~ Mu:U }

[12:18] <camelia> rakudo-moar dde756878: OUTPUT: «True␤»

[12:18] <timo> okay, stay away from Mu:U i guess?

[12:23] <timo> m: given 42 { say $_ ~~ Mu:U }

[12:23] <camelia> rakudo-moar dde756878: OUTPUT: «True␤»

[12:23] <timo> m: say 42 ~~ Mu:U

[12:23] <camelia> rakudo-moar dde756878: OUTPUT: «False␤»

[12:24] <timo> i wonder if it checks against the scalar container there

[12:24] <timo> say Scalar ~~ Any; say Scalar ~~ Mu

[12:24] <evalable6> timo, rakudo-moar dde756878: OUTPUT: «True␤True␤»

[12:24] <timo> hmm. yeah, not sure.

[12:27] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/09/17/2024-38-recomma-plug/

[12:54] <xinming> timo: Just test wether the class in var is other than Any.

[12:54] <xinming> m: $c = Int; $c.Bool.say;  (Any ~~ Int).Bool.say;

[12:54] <camelia> rakudo-moar dde756878: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$c' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL>⏏$c = Int; $c.Bool.say;  (Any ~~ Int).Boo␤»

[12:54] <xinming> m: my $c = Int; $c.Bool.say;  (Any ~~ Int).Bool.say;

[12:54] <camelia> rakudo-moar dde756878: OUTPUT: «False␤False␤»

[13:23] <timo> m: my $a = Int; say $a =:= Any; $a = Any; say $a =:= Any

[13:23] <camelia> rakudo-moar dde756878: OUTPUT: «False␤False␤»

[13:23] <timo> m: my $a = Int; say $a === Any; $a = Any; say $a === Any

[13:23] <camelia> rakudo-moar dde756878: OUTPUT: «False␤True␤»

[13:23] *** xinming left
[13:26] *** xinming joined
[13:35] *** silug left
[13:36] *** silug joined
[14:29] *** andinus2 left
[14:30] *** andinus joined
[15:12] <timo> m: https://gist.github.com/timo/2aa2a740fba4efcaba6fa7ee3d337e1c

[15:12] <camelia> rakudo-moar dde756878: OUTPUT: «Ip.new(a => $[Address.new(address => 999, ifname => "eth0"), Address.new(address => 123, ifname => "wlp0")], r => $[Route.new(dev => "eth0", dst => "default"), Route.new(dev => "lo", dst => "127.0.0.1")])␤»

[15:12] <timo> here, have some sillyness

[17:07] *** dakkar left
[17:41] *** sena_kun joined
[18:51] *** MoC joined
[18:54] *** MoC left
[19:01] <ingy> antononcube: by generated I mean I have a ys program that generated the markdown gist I posted by cloning the 74 exercism language repos, pulling out the code from each and formatting it all into markdown

[19:03] <ingy> I can make pages showing all the exercises as implemented by the langs I'm interested in. or 1 exercise showing every lang implementation

[19:07] *** xinming left
[19:28] *** jjido joined
[19:38] <discord-raku-bot> <antononcube> @ingy This is cool -- it should be a treasure trove for LLM training.

[19:58] *** sena_kun left
[20:40] <discord-raku-bot> <antononcube> weekly: https://x.com/antononcube/status/1836081920981209089

[20:40] <notable6__> antononcube, Noted! (weekly)

[22:11] *** Aedil left
[22:23] *** Sgeo joined
[22:39] *** sena_kun joined
[22:41] *** sena_kun left
[23:06] *** jjido left
