[00:33] *** jpn joined
[00:37] *** jpn left
[01:26] *** guifa joined
[01:29] *** hulk joined
[01:30] *** kylese left
[01:49] *** lain`_ joined
[01:49] *** atweedie_ joined
[01:49] *** [dpk] joined
[01:50] *** gabiruh left
[01:50] *** Opus left
[01:50] *** gabiruh joined
[01:50] *** dpk left
[01:50] *** atweedie left
[01:50] *** atweedie_ is now known as atweedie

[01:50] *** Opus joined
[01:51] *** lain` left
[01:51] *** Ekho left
[01:51] *** lain`_ is now known as lain`

[01:56] *** guifa left
[02:09] *** Ekho joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:23] *** guifa joined
[02:27] <wayland76> lizmat: Thanks!  

[03:44] *** guifa left
[05:09] *** discord-raku-bot left
[06:00] *** discord-raku-bot joined
[06:00] *** discord-raku-bot left
[06:01] *** discord-raku-bot joined
[06:01] <discord-raku-bot> <whistlingzephyr> bridge test

[06:01] <discord-raku-bot> <whistlingzephyr> alright, works

[06:04] *** discord-raku-bot left
[06:05] *** discord-raku-bot joined
[06:13] *** discord-raku-bot left
[06:13] *** discord-raku-bot joined
[06:24] *** tejr left
[06:29] *** tejr joined
[06:30] *** discord-raku-bot left
[06:31] *** discord-raku-bot joined
[06:34] *** discord-raku-bot left
[06:35] *** discord-raku-bot joined
[06:40] *** discord-raku-bot left
[06:40] *** discord-raku-bot joined
[06:40] *** tejr left
[07:03] *** tejr joined
[07:50] *** jpn joined
[07:55] *** jpn left
[08:03] *** jpn joined
[08:04] *** [dpk] is now known as dpk

[08:08] *** jpn left
[08:09] *** soverysour joined
[08:09] *** soverysour left
[08:09] *** soverysour joined
[08:20] *** soverysour left
[08:45] *** jpn joined
[08:58] *** sena_kun joined
[09:40] *** soverysour joined
[09:44] *** jpn left
[09:50] *** soverysour left
[09:54] *** soverysour joined
[10:08] *** soverysour left
[10:31] *** jpn joined
[10:32] *** Sgeo left
[10:36] *** jpn left
[10:46] *** jrjsmrtn joined
[11:16] *** jpn joined
[11:24] *** jpn left
[11:45] *** Xliff joined
[11:45] <Xliff> m: say "mediumint" ~~ / 'mediumint' /.gist;

[11:45] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´False‚ê§¬ª

[11:45] <tellable6> 2024-07-04T06:32:35Z #raku <SmokeMachine> Xliff: why is that too strict? Do you mean performance wise?

[11:45] <Xliff> WTF?

[11:47] <Xliff> 2024-07-04T06:32:35Z #raku <SmokeMachine> Xliff: why is that too strict? Do you mean performance wise?

[11:48] <lizmat> m: say ("mediumint" ~~ / 'mediumint' /).gist;

[11:48] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢mediumintÔΩ£‚ê§¬ª

[11:48] <lizmat> Xliff: precedence

[11:48] <Xliff> ?

[11:48] <Xliff> OOOOH\

[11:49] <Xliff> OK, that's one thing. I'm trying to debug a grammar. Kinda sucks when you are debugging something and even your debugging code has bugs.

[11:51] <Xliff> SmokeMachine: Strict as in your first example. I still haven't quite wrapped my head around functional programming, but I do understand the utility. However if I was reading that bit of code at first glance, I'd get got by the difference.

[11:51] <Xliff> got = fooled

[11:57] <Xliff> m: my rule type-test { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; ('mediumint' ~~ &type-test }.gist.say

[11:57] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> tetime' ] }; ('mediumint' ~~ &type-test ‚èè}.gist.say‚Ä¶¬ª

[11:57] <Xliff> m: my rule type-test { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; ('mediumint' ~~ &type-test) }.gist.say

[11:57] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> etime' ] }; ('mediumint' ~~ &type-test) ‚èè}.gist.say‚ê§¬ª

[11:57] <Xliff> m: my rule type-test { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; ('mediumint' ~~ &type-test ).gist.say

[11:57] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´Nil‚ê§¬ª

[11:58] <Xliff> lizmat: That's the actual problem

[11:59] <Xliff> m: ('mediumint' ~~ / ['medium' | 'short' | 'tiny' ]'int' /).gist.say

[11:59] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢mediumintÔΩ£‚ê§¬ª

[11:59] <Xliff> So it's in the larger regex?

[11:59] <Xliff> m: my rule type-test { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; ('varchar' ~~ &type-test ).gist.say

[11:59] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢varcharÔΩ£‚ê§¬ª

[11:59] <Xliff> m: my rule type-test { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; ('datetime' ~~ &type-test ).gist.say

[12:00] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢datetimeÔΩ£‚ê§¬ª

[12:12] <Xliff> m: my rule type-test { [ ['medium' | 'short' | 'tiny' ]'int' || 'var'?'char' ||  'datetime' ] }; ('datetime' ~~ &type-test ).gist.say

[12:12] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢datetimeÔΩ£‚ê§¬ª

[12:13] <lizmat> Xliff: perhaps you need token?

[12:13] <lizmat> m: my token type-test { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; say 'mediumint' ~~ &type-test

[12:13] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢mediumintÔΩ£‚ê§¬ª

[12:13] <Xliff> WTF?\

[12:13] <Xliff> That *was* a token.

[12:14] <Xliff> my token type { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; say 'mediumint' ~~ &type-test

[12:14] <Xliff> m: my token type { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; say 'mediumint' ~~ &type-test

[12:14] <lizmat> then why did it say "rule" ?

[12:14] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    type-test used at line 1‚ê§‚ê§¬ª

[12:14] <Xliff> m: my token type { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; say 'mediumint' ~~ &type

[12:14] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´ÔΩ¢mediumintÔΩ£‚ê§¬ª

[12:14] <Xliff> lizmat: Because it's a small part of a larger grammar

[12:15] <Xliff> lizmat: Does raku have a grammar for parsing SQL?

[12:16] <Xliff> m: my rule type { [ ['medium' | 'short' | 'tiny' ]'int' | 'var'?'char' |  'datetime' ] }; say 'mediumint' ~~ &type

[12:16] <lizmat> https://raku.land/?q=SQL

[12:16] <camelia> rakudo-moar 0554ae9e6: OUTPUT: ¬´Nil‚ê§¬ª

[12:16] <Xliff> Boom goes the dynamite. Why does the rule fail?

[12:17] <lizmat> https://github.com/tony-o/perl6-slang-sql/blob/master/lib/Slang/SQL.pm6   has a SQL::Grammar

[12:18] <lizmat> Xliff: perhaps https://raku.land/github:jnthn/Grammar::Debugger can be of help?

[12:28] <Xliff> lizmat: Not really. That's more for executing SQL rather than actually paring out the bits.

[12:28] <lizmat> https://raku.land/cpan:DMAESTRO/SQL::Lexer

[12:29] <lizmat> perhaps?

[12:29] <Xliff> SQL::Lexer would be useful, but it's not yet up to the bits, but does have the sub-bits.

[12:29] <Xliff> I actually had the start of an SQL parser back in 2016, but that's probably in the same shape as SQL::Lexer.

[12:29] <lizmat> perhaps a cooperation with tonyo could be the basis of a nice new module ?

[12:30] <Xliff> And SQL::Lexer might be the better work.

[12:30] <Xliff> lizmat: Perhaps. And that is something I'd definitely be interested in. Raku could use a nice SQL parser.

[12:30] <lizmat> agree

[12:30] <Xliff> However, that helps me not right now.

[12:30] <lizmat> also: leont might be interested in this

[12:31] <Xliff> Hmmm.... I'll make pings.

[12:31] <Xliff> tellable, help

[12:31] <tellable6> Xliff, Like this: .tell AlexDaniel your bot is broken # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Tellable

[12:31] <Xliff> .tell tonyo Would you be interested in working on a generic SQL parser for Raku. Please see https://github.com/Xliff/perl6-Parser-SQL

[12:31] <tellable6> Xliff, I'll pass your message to tonyo

[12:32] <Xliff> .tell leont Would you be interested in working on a generic SQL parser for Raku. Please see https://github.com/Xliff/perl6-Parser-SQL

[12:32] <tellable6> Xliff, I'll pass your message to leont

[12:32] <Xliff> lizmat: Please note.... 2016

[12:32] <lizmat> should still work, no ?

[12:32] <lizmat> one of the benefits of a 100 year language :-)

[12:32] <Xliff> Yeah. But guess what the last test I was working on was.

[12:33] <Xliff> It was CREATE statements. And it wasn't complete. Same thing I'm working on now and arguably for the SAME use case.

[12:33] <Xliff> Life intruded. Work was suspended.

[12:37] *** leah2 left
[12:58] *** soverysour joined
[12:58] *** soverysour left
[12:58] *** soverysour joined
[13:07] *** guifa joined
[13:21] <discord-raku-bot> <antononcube> "SQL::Lexer" might be useful, but it seems to be abandoned.

[13:23] <discord-raku-bot> <antononcube> I think @_grenzo  might be also interested in "developing" an SQL grammar in Raku.

[13:24] <discord-raku-bot> <antononcube> I.e. I volunteer @_grenzo  to help that effort out. üôÇ

[13:29] *** teatwo joined
[13:30] *** teatime left
[13:31] *** teatime joined
[13:34] *** teatwo left
[13:46] <Xliff> lizmat: Here's another one for you. Would appreciate some help if you have the time.

[13:46] <Xliff> https://replit.com/@Xliff/CommonQueryFlips

[13:47] <Xliff> This is an open question in case anyone else has some insight.

[13:49] <discord-raku-bot> <antononcube> @Sliff Does not load for me. (macOS / Safari)

[13:52] <Xliff> antononcube: Thanks for looking anyways.

[13:52] <Xliff> I'll try it on tio.run

[13:53] <Xliff> https://tio.run/##nVZbT9swFH7vrzhCSE6BlsCmbUAbVKDbqpXCSniYGGpDa4pF4oTEQauA385OfGlc1sK2KIpv37l/tpPQNPzw/BxNYTW7C/cqlUkaRFGQwtldeJjSQNAzgZ@IcgEPFYA0Dyn4J6dyAEAO@@2W3yZA/NZBF9vVhgiuQsqDiHrNBhujHBNTD4hDpABAYxSHecS9dTNOUoYGp7VbOvXM3KxPqgSUylqciKyYfKrgR8S3lINSVaxof3aZbC4AtCbCYwE8D0OixvBoFoJcxAPGR6kMTnl3adTLMJV2rdmKpSGmCfVMIIV1b23eL0zARNxoyZ/j9UWrtSyhI5NGB6NU054M2TzzgowLW@qCRHTM8ojAI5DsJk6F7AnGpwQuCVNRlfEUbhtRk5@G0ekZB9RoH0jOMzbhdEz2y

[13:53] <Xliff> 6TdBynZJ6MbbObxJWSMdBEsokT7b2VVR6ETaWIfEqiv7ctWKcHRvMQ1o@FY1t8UIwvzNFFkQCMzYEmUBcAZSs7BA9qxZy0aGs9O@53jVv8HsvtbG7@YqzH9peMlG@RlccyiXVRrB1Tnq2HZ0dpLgtmGjCUVp0XMGo/nQn1JUJMdNFnJgims9FF2t4i7MP0ENez@ucvrSZBm1KnfB2FON5S9pidlqvUJywQ8rRRlvY5TVd1ZOdWDWDIMrvKMpgM2HpINCZLUK58CpLhbkPRtCMy4uBQ7o91SBHK3IK6z7bpVjbLOD4PqnfjQO@92lyNeHBxzOFOSF1mARZHo3aFPGVicP1iag3@WAxMatM79k0Gnh2f3cbvnk72K3qr4LiVEcT0oAtSRTHhRdHodX14a0IS7XRFvnn3vbqIGdSOAvA9Ae5QN

[13:53] <Xliff> wZFG/s9DFfAwf0NKw1hS4GSp321XS51H7c@t864PRCdwmOVXHDnzd@AkmMhbbQglj17DC4zZcHIBbGvno1tzt/AF192Vr5HE9GcxL@1svW7oLqfpNBMp4xPbt9dk9LkGeO6AY5WkqpaLaZVsRzb2tEquo1p7oUymU/ZtgAnLMT17sciWU3yrOFeFdu9Lp9dudjiPjw5m7h9@bfXP2n4zF9efoqv3cHjS7SLVzHjg7rjuIGCDUfETgGx8fv4N

[13:53] *** teatwo joined
[13:53] <Xliff> Oh dear lord.

[13:55] <discord-raku-bot> <antononcube> üôÇ üôÇ

[13:55] <Xliff> copy and paste friendly page: https://pastebin.com/Kc0R7qz0

[13:55] <lizmat> heh, we need a gist to show the url of a gist

[13:56] <Xliff> I gno rite!

[13:56] <lizmat> Forbidden :-(

[13:56] <Xliff> WHAT?

[13:57] <Xliff> lizmat: Did you use the pastebin link?

[13:57] *** teatime left
[13:57] <lizmat> Error, this is a private paste or is pending moderation. If this paste belongs to you, please login to Pastebin to view it.

[13:59] <Xliff> Fixing...

[14:00] <discord-raku-bot> <antononcube> Yeah "Forbidden (#403)"

[14:01] <lizmat> will look after I get back from some cycling&

[14:05] <Xliff> lizmat: https://gist.github.com/Xliff/e5aafbc101964c072161f67eac98a58b

[14:05] <Xliff> And antononcube, of course.

[14:12] *** wlhn left
[14:26] <discord-raku-bot> <antononcube> @Xliff I made it work -- do the changes get automatcally saved? I.e. can you see my changes?

[14:27] <discord-raku-bot> <antononcube> I changed the rule column  to be:    rule column {     <identity> <type> [ <column-opt>+ % \h+ ]?   } 

[14:28] <discord-raku-bot> <antononcube> and the token identity to be:    token identity {     '`' .*? '`' |     \w.*?   } 

[14:29] <discord-raku-bot> <antononcube> As a result I get this output:  Rule: identity - ÔΩ¢`abuser_id`ÔΩ£ Rule: type - ÔΩ¢mediumintÔΩ£  int-spec => ÔΩ¢mediumintÔΩ£ Rule: type - ÔΩ¢mediumint unsignedÔΩ£  int-spec => ÔΩ¢mediumintÔΩ£ Rule: type - ÔΩ¢datetimeÔΩ£ Rule: type - ÔΩ¢varchar(200)ÔΩ£  length-spec => ÔΩ¢(200)ÔΩ£   length => ÔΩ¢200ÔΩ£ Rule: column-opt - ÔΩ¢NOT NULLÔΩ£ Rule: column-opt - ÔΩ¢auto_incrementÔΩ£ Rule: column-no-opts - ÔΩ¢`abuser_id`

[14:29] <discord-raku-bot> mediumint unsignedÔΩ£  identity => ÔΩ¢`abuser_id`ÔΩ£  type => ÔΩ¢mediumint unsignedÔΩ£   int-spec => ÔΩ¢mediumintÔΩ£ Rule: column - ÔΩ¢`abuser_id` mediumint unsignedÔΩ£  identity => ÔΩ¢`abuser_id`ÔΩ£  type => ÔΩ¢mediumint unsignedÔΩ£   int-spec => ÔΩ¢mediumintÔΩ£ Rule: column - ÔΩ¢`abuser_id` mediumint unsigned NOT NULL AUTO_INCREMENTÔΩ£  identity => ÔΩ¢`abuser_id`ÔΩ£  type => ÔΩ¢mediumint unsigned ÔΩ£   int-spec =>

[14:29] <discord-raku-bot> ÔΩ¢mediumintÔΩ£  column-opt => ÔΩ¢NOT NULLÔΩ£  column-opt => ÔΩ¢AUTO_INCREMENTÔΩ£ Nil 

[14:35] *** leah2 joined
[14:39] *** jpn joined
[14:45] *** soverysour left
[14:46] *** abraxxa-home joined
[14:51] <Xliff> antononcube++ # You rock!

[15:07] *** jpn left
[15:08] <leont> Xliff: yeah that does sound interesting

[15:08] <tellable6> 2024-07-07T12:32:04Z #raku <Xliff> leont Would you be interested in working on a generic SQL parser for Raku. Please see https://github.com/Xliff/perl6-Parser-SQL

[15:15] *** soverysour joined
[15:32] <discord-raku-bot> <antononcube> I wonder to what degree LLMs can generate reiliable SQL Raku-grammars. SQL has very good representation on the Web and there are multiple grammar- and parser efforts for it.

[15:38] *** abraxxa-home left
[15:58] <Xliff> leont: There's also SQL::Lexer which might be a better starting point.

[15:58] <Xliff> antononcube: Any more thoughts on my Raku-to-Python LLM?

[15:59] <leont> Xliff: having a lexer parser distinction sounds very un-Rakuish to me

[16:01] *** soverysour left
[16:03] *** soverysour joined
[16:03] <discord-raku-bot> <antononcube> @Xliff I have to find and ingest the API documentation of Python-Blender.

[16:24] <Xliff> antononcube: OK, thanks! Take your time! Let me know when you need anything.

[16:29] <discord-raku-bot> <antononcube> @Xliff I was considering to work-out that idea into an example for a conference next week. But I decided to do something of more general interest. (I think it is more general...)

[16:40] <Xliff> OK. Let me know when you start work on that and if I can help.

[17:24] *** jpn joined
[17:37] *** Sgeo joined
[17:44] *** jpn left
[17:46] *** MasterDuke left
[18:04] *** soverysour left
[18:35] *** soverysour joined
[18:35] *** soverysour left
[18:35] *** soverysour joined
[18:40] *** soverysour left
[18:47] *** soverysour joined
[19:00] <discord-raku-bot> <_grenzo> https://gist.github.com/ssotka/03140441d07d91677eaf7510f4093ce4

[19:00] <discord-raku-bot> <_grenzo> (just select, update, delete, insert so far)

[19:06] *** soverysour left
[19:24] *** wayland joined
[19:25] *** wayland76 left
[19:27] <discord-raku-bot> <antononcube> Thanks! I was thinking earlier today that for an SQL parser it might be a good idea to start with the tests.

[19:29] <discord-raku-bot> <antononcube> For example, do the other SQL packages in raku.land pass the tests you have in file/gist ?

[19:34] *** soverysour joined
[19:39] *** soverysour left
[19:41] <discord-raku-bot> <_grenzo> I haven't checked them yet

[19:50] <discord-raku-bot> <_grenzo> Perl6-Parser-SQL handles WAY more

[20:16] *** guifa left
[20:18] <discord-raku-bot> <_grenzo> Xliff has put a huge amount of work into this.

[20:21] *** soverysour joined
[20:21] *** soverysour left
[20:21] *** soverysour joined
[20:25] *** soverysour left
[20:50] *** guifa joined
[21:18] *** jpn joined
[21:19] *** MasterDuke joined
[21:23] *** jpn left
[23:02] *** wayland left
[23:03] *** sena_kun left
[23:08] *** merp left
[23:12] *** merp joined
[23:54] *** thaewrapt left
