[00:04] <discord-raku-bot> <the_real_pk> The extension is a language server, so

[01:11] *** yewscion joined
[01:33] *** Manifest0 left
[02:13] *** kylese left
[02:14] *** hulk joined
[02:34] *** zetaaaa left
[03:03] *** Tirifto left
[03:05] *** Tirifto joined
[03:15] *** hulk left
[03:15] *** kylese joined
[03:29] <Geth> ¦ docker: 5ee0f98efb | AntonOks++ | 4 files

[03:29] <Geth> ¦ docker: Bump to 2024.12 [skip workflow]

[03:29] <Geth> ¦ docker: review: https://github.com/Raku/docker/commit/5ee0f98efb

[03:58] *** yewscion left
[04:25] *** codesections joined
[04:28] *** Aedil joined
[04:56] *** yewscion joined
[04:58] <discord-raku-bot> <sampersand—2B +| +^2B == FF> Two questions: how can i get a list of digits out of a number, and how can i get the chars out of a string?

[05:00] *** yewscion left
[05:10] *** xinming left
[05:11] *** xinming joined
[06:06] *** pk left
[06:10] *** yewscion joined
[06:15] *** yewscion left
[06:22] *** codesections left
[06:58] <discord-raku-bot> <antononcube> Using .comb.

[07:15] *** Sgeo left
[08:38] *** yewscion joined
[08:42] *** yewscion left
[08:52] *** dakkar joined
[09:04] *** sena_kun joined
[09:04] *** leah2 left
[09:24] *** sena_kun left
[10:20] *** leah2 joined
[11:05] *** zenmov left
[11:07] *** zenmov joined
[11:27] <Voldenet> m: "this way".ords.say

[11:27] <camelia> rakudo-moar 0e9a2d73e: OUTPUT: «(116 104 105 115 32 119 97 121)␤»

[11:28] <Voldenet> oh wait, nevermind, I read the question wrong

[11:32] <Voldenet> .comb is the way, for numbers .Str.comb will work

[11:38] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/12/16/2024-51-bus/

[11:50] <discord-raku-bot> <nahita3882> for numbers .comb will do .Str.comb for us

[11:51] <discord-raku-bot> <nahita3882> https://github.com/rakudo/rakudo/blob/main/src/core.c/Cool.rakumod#L318

[12:22] <Geth> ¦ ecosystem/main: 7d0e511651 | (Elizabeth Mattijsen)++ | META.list

[12:22] <Geth> ¦ ecosystem/main: Remove Xmav::JSON

[12:22] <Geth> ¦ ecosystem/main: 

[12:22] <Geth> ¦ ecosystem/main: It was only a proof of concept

[12:22] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/7d0e511651

[13:07] <Geth> ¦ ecosystem/main: 5495fcb63c | (Elizabeth Mattijsen)++ | META.list

[13:07] <Geth> ¦ ecosystem/main: Remove spitsh

[13:07] <Geth> ¦ ecosystem/main: 

[13:07] <Geth> ¦ ecosystem/main: The owner has archived the repo

[13:07] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/5495fcb63c

[13:10] <Geth> ¦ ecosystem/main: 04119774b0 | (Elizabeth Mattijsen)++ | META.list

[13:10] <Geth> ¦ ecosystem/main: Remove Task::Galaxy

[13:10] <Geth> ¦ ecosystem/main: 

[13:10] <Geth> ¦ ecosystem/main: The owner is no longer interested in it, and it has become obsolete

[13:10] <Geth> ¦ ecosystem/main: due to the large number of new modules in the Raku ecosystem

[13:10] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/04119774b0

[13:15] <Geth> ¦ ecosystem/main: 0d292cb46b | (Elizabeth Mattijsen)++ | META.list

[13:15] <Geth> ¦ ecosystem/main: Remove Maven

[13:15] <Geth> ¦ ecosystem/main: 

[13:15] <Geth> ¦ ecosystem/main: The owner has archived the repo

[13:15] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/0d292cb46b

[13:33] *** yewscion joined
[13:39] *** yewscion left
[13:43] *** yewscion joined
[13:53] *** yewscion left
[13:54] <Geth> ¦ ecosystem/main: c2255cb5fb | (Elizabeth Mattijsen)++ | META.list

[13:54] <Geth> ¦ ecosystem/main: Remove String::FuzzyIndex

[13:54] <Geth> ¦ ecosystem/main: 

[13:54] <Geth> ¦ ecosystem/main: It is now a Raku Community module

[13:54] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/c2255cb5fb

[13:56] *** MyNetAz left
[13:58] *** Geth left
[13:58] *** Geth joined
[13:59] *** Geth left
[13:59] *** Geth joined
[14:04] <Geth> ¦ ecosystem/main: a927e5d788 | (Elizabeth Mattijsen)++ | META.list

[14:04] <Geth> ¦ ecosystem/main: Removed Net::IRC

[14:04] <Geth> ¦ ecosystem/main: 

[14:04] <Geth> ¦ ecosystem/main: It hasn't really been touched in 8 years, and its function has been

[14:04] <Geth> ¦ ecosystem/main: basically superseded by IRC::Client

[14:04] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/a927e5d788

[14:11] *** MyNetAz joined
[14:19] *** Aedil left
[14:23] *** Aedil joined
[14:32] *** zenmov left
[14:34] *** finanalyst joined
[14:34] *** zenmov joined
[14:42] *** Manifest0 joined
[14:56] *** yewscion joined
[15:03] <Geth> ¦ ecosystem/main: 7748595dd8 | (Elizabeth Mattijsen)++ | META.list

[15:03] <Geth> ¦ ecosystem/main: Removed Math::Quaternion

[15:03] <Geth> ¦ ecosystem/main: 

[15:03] <Geth> ¦ ecosystem/main: Because it lives on as a Raku Commmunity module

[15:03] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/7748595dd8

[15:06] *** yewscion_ joined
[15:07] *** yewscion left
[15:11] *** finanalyst left
[15:12] *** yewscion joined
[15:14] *** yewscion_ left
[15:15] <Geth> ¦ ecosystem/main: d45196ef1d | (Elizabeth Mattijsen)++ | META.list

[15:15] <Geth> ¦ ecosystem/main: Remove November

[15:15] <Geth> ¦ ecosystem/main: 

[15:15] <Geth> ¦ ecosystem/main: It hasn't been touched in 9 years, it dates back to the Apache,

[15:15] <Geth> ¦ ecosystem/main: mod_rewrite and Parrot days and as such looks unfixable without

[15:15] <Geth> ¦ ecosystem/main: a major investment

[15:15] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/d45196ef1d

[15:30] *** codesections joined
[15:37] *** finanalyst joined
[16:06] *** codesections left
[16:15] <Geth> ¦ ecosystem/main: 58e8517b9f | (Elizabeth Mattijsen)++ | META.list

[16:15] <Geth> ¦ ecosystem/main: Remove Text::Abbrev

[16:15] <Geth> ¦ ecosystem/main: 

[16:15] <Geth> ¦ ecosystem/main: Re-imagined its sole exported subroutine as part of the String::Utils

[16:15] <Geth> ¦ ecosystem/main: package

[16:15] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/58e8517b9f

[17:14] *** finanalyst left
[17:33] *** dakkar left
[17:46] *** rjbs_ joined
[17:46] *** rba_ joined
[17:46] *** dutchie- joined
[17:46] *** Maximus joined
[17:49] *** bdju_ joined
[17:49] *** sivoais_ joined
[17:49] *** timo1 joined
[17:49] *** Manifest1 joined
[17:53] *** Manifest0 left
[17:53] *** traxex left
[17:53] *** bdju left
[17:53] *** rba left
[17:53] *** Sevalecan left
[17:53] *** sivoais left
[17:53] *** dutchie_ left
[17:53] *** timo left
[17:53] *** rjbs left
[17:53] *** rba_ is now known as rba

[17:54] *** Maximus is now known as Sevalecan

[17:54] *** rjbs_ is now known as rjbs

[17:59] *** bdju_ left
[17:59] *** traxex joined
[18:00] *** bdju joined
[18:04] <Geth> ¦ ecosystem/main: 89ddce6d67 | (Elizabeth Mattijsen)++ | META.list

[18:04] <Geth> ¦ ecosystem/main: Remove PerlStore

[18:04] <Geth> ¦ ecosystem/main: 

[18:04] <Geth> ¦ ecosystem/main: It needs to be re-imagined probably using the Rakudo bytecode format

[18:04] <Geth> ¦ ecosystem/main: and with a different name

[18:04] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/89ddce6d67

[18:05] *** yewscion left
[18:07] *** yewscion joined
[18:33] *** [Coke] left
[18:47] *** MyNetAz left
[18:51] *** [Coke] joined
[19:02] *** MyNetAz joined
[19:11] *** sena_kun joined
[19:19] *** Aedil left
[19:34] *** yewscion left
[19:35] *** orangebot joined
[19:40] *** abraxxa-home joined
[19:47] <Geth> ¦ advent/main: 243e2f23be | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[19:47] <Geth> ¦ advent/main: 20 -> 17

[19:47] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/243e2f23be

[19:47] <lizmat> still 3 open slots in the Advent calendar  :-(

[19:54] *** abraxxa-home left
[19:59] *** abraxxa-home joined
[20:05] <Geth> ¦ ecosystem/main: bd0645b17c | (Elizabeth Mattijsen)++ | META.list

[20:05] <Geth> ¦ ecosystem/main: Remove Nova Patch's modules

[20:05] <Geth> ¦ ecosystem/main: 

[20:05] <Geth> ¦ ecosystem/main: The live on as Raku Community modules now

[20:05] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/bd0645b17c

[20:10] <Geth> ¦ advent/main: 347fd0bc2c | librasteve++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[20:10] <Geth> ¦ advent/main: 21 => 18

[20:10] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/347fd0bc2c

[20:10] <lizmat> librasteve thanks!

[20:12] <Geth> ¦ advent/main: e27302678a | librasteve++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[20:12] <Geth> ¦ advent/main: Update authors.md

[20:12] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/e27302678a

[20:13] <discord-raku-bot> <librasteve> still leaves 20 and 21 open ;-(

[20:15] <lizmat> well, if push comes to shove, I can whip up a few blogs posts, but I'd rather not have to  :-)

[20:16] <lizmat> the day 25 post is at least going to cost me a day to cobble together

[20:19] <lizmat> afk&

[21:05] *** yewscion joined
[21:33] <Geth> ¦ advent/main: f515d71e46 | ab5tract++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[21:33] <Geth> ¦ advent/main: Adding another ab5tract post on the 20th

[21:33] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/f515d71e46

[22:03] *** sena_kun left
[22:13] *** abraxxa-home left
[22:14] *** abraxxa-home joined
[22:19] *** zetaaaa joined
[22:38] *** Xliff joined
[22:38] <Xliff> \o

[22:41] <Xliff> I'm having some issues with multi dispatch and have a question. Might there be some caching done there? I use a multi dispatch some 4 times in a bit of test code I wrote and have a multi dispatch A and B. If I run A-A-B-A, it works just fine. If I run B-A-B-A it doesn't. Can someone tell how the last A doesn't run properly?

[22:48] *** abraxxa-home left
[22:55] <ab5tract> Xliff: I think a bit of code to review might go a long way in this case

[22:55] <Xliff> Yeah. Was afraid you might say that. The problem is that it's all unreleased and I'm still separating much of it from $dayJob code.

[22:56] <Xliff> So until I get it released, I might need to find a workaround. I was hoping someone just knew if raku cached multis.

[23:08] <lizmat> the call site of a method call will cache the candidate to be used depending on the capture it receives

[23:09] <lizmat> it's been pretty good at that so far, but maybe there are still bugs lurking there

[23:09] <lizmat> also: is this single threaded or multi threaded?

[23:25] <Xliff> Single

[23:26] <Xliff> The workaround turned out to be to create a new object that was retrieved by the int version of the record and use that.

[23:27] <Xliff> lizmat: BTW - Loved your more recent article. Was a nice write up about how to speed up some things. All of these bits and pieces we might want to collect into a guide or something.

[23:32] *** Sgeo joined
[23:37] *** yewscion left
[23:40] <timo1> the dispatcher stuff is pretty cool but if you don't already know what exactly you're looking for, not exactly easy to grok. there's one option that dumps every "activity" of the dispatcher logic, but since dispatchers cover things from boolifying over type checking to deconting and finally method lookups and invocations ... well, if you have a raku program and you run it with the logging turned on

[23:40] <timo1> you'll be swimming in output in a matter of milliseconds :)

[23:41] <Xliff> Suspected as much. 

[23:42] <timo1> good(?) news though, you can step through the dispatcher code with App::MoarVM::Debug, but without a facility to make outputting "the value of lexical X" after every step trivial, you'll be typing up a storm before you learn much of anything

[23:42] <timo1> plus, almost all variables are optimized into locals instead of lexicals in most of the dispatchers thanks to the nqp optimizer being allowed to do a lot more than the raku one ... and you don't get to look at those in the debugger either

[23:44] <timo1> this general topic is something i would like to give some thought to

[23:45] <timo1> there's no reason why the remote debug api shouldn't be able to inspect some amount of information about dispatchers

[23:48] <timo1> the debug logging stuff is a compile time switch, but there's no reason why it couldn't be filtered or turned on and off at runtime either

[23:48] <timo1> (i assume it's compile time because it's a rather hot code path that we don't want to waste time checking for "debug on?" on or something, but i don't have measurements or anything)

[23:50] <timo1> .o( did anyone say ... self-modifying code? )

[23:51] <Xliff> I've been saying that. Was hoping we could use RakuAST to accomplish this.

[23:51] <timo1> oh, the part i'm refering to actually lives inside moarvm, so it's written in C

[23:51] <Xliff> However, I'm not so sure about how easy it would be. If we have an existing AST, could we modify it like we do the Web DOM?

[23:52] <timo1> you've been saying what exactly?

[23:52] <Xliff> Oh. Wouldn't writing self-modifying code in C basically turn into an AST anyways>

[23:53] <Xliff> timo: I've been saying that, with RakuAST, raku could be self-modifying.

[23:53] <timo1> i'm sure there's different ways to go about it, some more ast like and some less ast like?

[23:54] <Xliff> Although aren't RakuAST nodes immutable once created?

[23:56] <timo1> i haven't looked very deeply into rakuast yet, but i imagine the trickier question might be how you can cause something that was created from a piece of rakuast tree to be "updated" whenever you make changes, whether it's a "make a clone of the whole thing with some modifications" or "modify he nodes in-place"

[23:56] <Xliff> Exactly!

[23:56] <timo1> like, for anything routine-like we'd have turned the rakuast into moar bytecode and that would then have already become what we attach to the object in question?

[23:57] <Xliff> Of course, this might not be a question until RakuAST has been completed.

[23:58] <Xliff> But if we were smart, wouldn't we just associate the non-executed AST with the bytecode? We'd clone the non-executed AST and then convert the clone to bytecode and then just drop the clone once done.

[23:58] <timo1> do you know about the different phases a rakuast goes through during compilation? something like binding or linking or so? i seem to recall that's an important part that's new and that makes things better compared to the previous design based on the World class

[23:58] <Xliff> I would expect the act of generating bytecode would make the AST immutable.

[23:59] <Xliff> Nope. I just have a basic understanding of the concept. Would love to dive in, though.

