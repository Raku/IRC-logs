[01:00] *** Riviera left
[01:39] *** hulk joined
[01:40] *** kylese left
[01:44] *** Sevalecan left
[01:44] *** Sevalecan joined
[02:05] <tbrowder> antononcube: thnx for the reminder of lizmat's review of new stuff

[02:15] *** hulk left
[02:15] *** kylese joined
[02:58] <SmokeMachine> does anyone here uses nvim + telescope? I'm playing with it to create a plugin for Rak, is anyone interested? https://usercontent.irccloud-cdn.com/file/paQmPkIw/CleanShot%202024-04-01%20at%2003.54.41.gif

[02:59] <stanrifkin_> SmokeMachine: What is telescope?

[03:00] <SmokeMachine> telescope is a fuzyfinder for neovim... it's highly plugabble...

[03:01] <SmokeMachine> (on my gif, that's that panel that opens to let me search using rak)

[03:01] <SmokeMachine> stanrifkin_: ^^

[03:02] <SmokeMachine> stanrifkin_: https://github.com/nvim-telescope/telescope.nvim

[03:19] <Xliff> I have most of the bindings for GLib::Top ready to go. Hope to release in the next week or two: https://developer-old.gnome.org/libgtop/stable/

[03:19] <Xliff> So obtaining information from /proc in a usable manner is near!

[03:34] *** stanrifkin joined
[03:36] *** stanrifkin_ left
[05:12] *** ponycat left
[05:29] *** kylese left
[05:34] *** kylese joined
[06:00] *** Sgeo left
[06:00] <Geth> ¬¶ docker: sorairolake++ created pull request #62: Add CI status badge

[06:00] <Geth> ¬¶ docker: review: https://github.com/Raku/docker/pull/62

[06:20] <Geth> ¬¶ docker: 0dc0527914 | (Shun Sakai)++ (committed using GitHub Web editor) | README.md

[06:20] <Geth> ¬¶ docker: Add CI status badge

[06:20] <Geth> ¬¶ docker: review: https://github.com/Raku/docker/commit/0dc0527914

[06:20] <Geth> ¬¶ docker: dbc5eef911 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | README.md

[06:20] <Geth> ¬¶ docker: Merge pull request #62 from sorairolake/add-badge

[06:20] <Geth> ¬¶ docker: 

[06:20] <Geth> ¬¶ docker: Add CI status badge

[06:20] <Geth> ¬¶ docker: review: https://github.com/Raku/docker/commit/dbc5eef911

[06:25] *** corwin is now known as catwin

[07:04] *** kst left
[07:48] *** sena_kun joined
[08:40] *** ptc joined
[09:32] *** jpn joined
[09:48] <Geth> ¬¶ ecosystem/main: aeb3205dae | (Elizabeth Mattijsen)++ | META.list

[09:48] <Geth> ¬¶ ecosystem/main: MoarVM::Remote now lives in zef ecosystem

[09:48] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/aeb3205dae

[09:59] <patrickb> lizmat: Thanks for tackling MoarVM::Remote. Very appreciated.

[10:00] <lizmat> it actually needs more TLC

[10:00] <lizmat> I had to disable one test to be able to upload

[10:01] <lizmat> I also feel that Data::MessagePack could use some updating

[10:28] *** jpn left
[10:32] *** jpn joined
[11:12] <Tirifto> m: role R is Int { ; }; role S is Int { ; }; class C does R does S { ; };

[11:12] <camelia> rakudo-moar ffc663d52: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Package '<anon|1' already has parent 'Int'‚ê§at <tmp>:1‚ê§¬ª

[11:14] <Tirifto> ‚Üë Is it a good thing that this fails? Intuitively, I‚Äôd expect that to be okay, since both roles want the new class to inherit from the same class. :o

[11:27] <Tirifto> At least my reading of this hierarchy isn‚Äôt that the author wants to inherit from the same class twice (which is odd and sensibly fails), but that the author wants to mix in two roles, both of which want to add the same class to the inheritance. So there‚Äôs a duplicate requirement from two separate roles, which could be met by only inheriting once, thereby avoiding the error.

[11:29] <ab5tract> Tirifto: That's a reasonable take. However the roles are already composed before they are being used for C

[11:30] <ab5tract> *with C

[11:32] <ab5tract> which allows them to use / override methods and attributes from the Int class in their definitions

[11:39] <ab5tract> without this composition, they can't be compiled as such roles (usually) refer to things not within their core definition

[11:40] <Tirifto> ab5tract, how can I imagine a role being ‚Äòcomposed‚Äô before being used with a class? Since the documentation says the role‚Äôs methods are copied into the class, I imagined that mixing in a class was (conceptually) much like writing its body into the body of the class (without overwriting anything) and adding the carried classes to the chain of inheritance. `o`

[11:46] <ab5tract> Yeah, I see what you mean

[11:46] *** amenonsen left
[11:46] *** amenonsen joined
[11:56] <ab5tract> Tirifto: I've done a quick search of open issues that would match this and haven't found one.

[11:57] <ab5tract> Would you mind creating one?

[12:01] <lizmat> I guess the reason for not allowing this, is that that the order of composing roles with already existing parents, could create some unexpected method lookup efffects

[12:01] <lizmat> in this simple example it wouldn't

[12:08] *** jpn left
[12:09] <Tirifto> ab5tract, I wouldn‚Äôt in theory, but I am not in possession of a GitHub account; are there alternative ways of submitting reports? :o

[12:10] <lizmat> Tirifto: do you have reasons for not wanting to have a Github account?

[12:10] <lizmat> just OOC

[12:10] <ab5tract> Tirifto: No worries. I'll take care of it

[12:17] <tbrowder> hi, i'm try file open with other line endings. but there seems to be a newline at the very end when i read a single string from a file

[12:18] <tbrowder> my file looks like this:

[12:19] <tbrowder> name, age || go, 32

[12:20] <tbrowder> i cannot see the newline at the end

[12:22] <tbrowder> i open the file for reading like this: my $fh = open $f, :nl-in("||");

[12:22] <tbrowder> for $fh.lines ...

[12:22] <tbrowder> afk&

[12:27] <Tirifto> lizmat, mostly various ethical concerns, such as requiring the use of non-libre software, licence violations, being owned by a notoriously user-hostile company, etc.

[12:27] <lizmat> gotcha

[12:27] <Tirifto> ab5tract, once again, thank you very much!

[12:30] *** MasterDuke left
[12:38] *** jpn joined
[13:08] <tbrowder> i guess i can strip any trailing newlines without interfering with interior newlines

[13:11] <lizmat> without more code and/or the input file in a gist, it's hard to guess what's going on, tbrowder 

[13:21] <tbrowder> ok, i think i have it. i'll gist it in a bit

[13:22] <tbrowder> i'm trying to make my little csv module very powerful as you and [Coke] would like. one issue though is a real test file with embedded newlines.

[13:23] <lizmat> tbrowder: there is already a very powerful Text::CSV: I was merely pointing out potential issues in the "simple" approach

[13:23] <tbrowder> i have one (i'll show in the gist). but trying to visualize how the final product looks.

[13:23] <lizmat> as long as everybody is on the same page wrt to known issues with an implementation, we should be ok

[13:25] <tbrowder> yes, but the difference in mine is it's a final table (on top of my own parser). the file is read entirely before the user gets it

[13:26] <tbrowder> obviously not able to handle huge files

[13:26] <tbrowder> and the input file may have comment lines

[13:27] <tbrowder> which are removed on read and the "raw" csv file can be saves to use in libreoffice or excell

[13:28] <tbrowder> *excel

[13:30] <tbrowder> of course my motivation is to use it in another module üòÑ

[13:32] <tbrowder> aha, i'll create a test file in excel and output to csv (he said while slapping forehead)

[15:54] *** haxxelotto_ joined
[15:57] *** haxxelotto_ left
[16:36] <ugexe> ptc: in your building and testing in raku blogpost you mention not installing the distribution being tested, but actually you *should* install it as that will precompile everything (catching any compile time errors that might not have been exercised by the test suite) as well as ensuring that the META6.json is listing all the provides/modules it should

[16:39] <ugexe> i've seen these type of errors from various developers that would have been caught by installing instead of just running the tests tens of times

[16:41] <ugexe> additionally one should just use `zef install .` (i.e. let the install workflow also run the tests) instead of `zef test . && zef install .` (i.e. run the tests and install as seperate workflows) as the former will only precompile things once, whereas the later precompiles twice

[16:44] <ugexe> additionally additionally, you should almost always use `-I.` (i.e. -I $path-to-directory-containing-META6) and not `-Ilib`, since the later doesn't use META6.json and thus isn't equivalent to what the installed version might be. For example if you fail to list a module in META6.json it would fail very obviously with -I., whereas -Ilib guesses what files should be included based on the files it sees 

[17:05] *** teatwo left
[17:05] *** teatwo joined
[17:06] *** jpn left
[17:07] <ptc> ugexe: ok, good to know.  I thought one explicitly *doesn't* want to install a dist's modules because then if one changes the code, how does one know that one is testing the right code?  I've definitely had the situation in the past where the installed code was being found first and any changes I made weren't having any effect.

[17:09] <ptc> good point about -I though; I didn't know about that effect.  Thanks!

[17:12] <ptc> I wonder if there's a workflow whereby one tests such compile time and META6.json errors as a pre-release check.  It'd also be necessary to uninstall the dist afterwards too, I think, in case one doesn't want to have it installed locally.

[17:46] *** vlad joined
[19:10] *** vlad left
[19:11] *** ptc left
[19:14] <ugexe> fro CI tests at least you wouldn't worry about having leftover installed code

[19:15] <ugexe> but you can also just install it into some temporary directory

[19:15] <ugexe> --install-to=/tmp/whatever

[19:17] <ugexe> for quickly testing and iterating locallym using `zef test .` or `prove -I. t/` is fine. you would want to do a test install at some point though, likely before pushing any changes

[19:18] <ugexe> however, I wouldn't recommend using --install-to= when CI tests, because that prevents the use of the staging repository and thus precompilation will occur twice (once during tests, once during install)

[21:08] *** antononcube joined
[21:22] *** antononcube left
[21:22] *** antononcube joined
[21:39] <discord-raku-bot> <librasteve> I have started to go zef install . in my workflow ... it was a bit of a gear change, but I agree that it is the best approach (I use --force --/test so that I can run the test manually when I want (since that can take a while) and to avoid having to uninstall (except the last time ;-)

[21:59] *** Sgeo joined
[22:17] *** antononcube left
[22:28] *** sena_kun left
[22:30] *** MasterDuke joined
[22:34] *** stanrifkin left
[22:54] <tbrowder> i do the same as librasteve, works great and i can always fall back to the published  module if need be

