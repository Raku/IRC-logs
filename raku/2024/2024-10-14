[00:55] <discord-raku-bot> <librasteve> gfldex: two reasons I do. it use the feed operator (i) i wanted to prototype a bind >>= operator for inclusion in the Definitely module and (ii) vanilla feed afaik is not amenable to Monad return types [I could be wrong about this] … wamba has made a very good suggestion to do this (use the feed) in the blog post comments and I will rewrite his way as soon as I can

[01:43] *** hulk joined
[01:43] *** kylese left
[02:07] *** Aedil joined
[02:15] *** hulk left
[02:15] *** kylese joined
[05:30] *** Sgeo_ left
[07:50] *** holyghost joined
[07:57] *** dakkar joined
[09:36] *** DarthGandalf left
[09:38] *** DarthGandalf joined
[12:54] *** MasterDuke left
[13:13] *** dakkar left
[13:26] *** dakkar joined
[14:51] <discord-raku-bot> <librasteve> wamba commented on my post and used the is prec trait - I can't find this in the docs ... anyone know what it is?

[14:56] <discord-raku-bot> <librasteve> (and what it is doing in the example - https://rakujourney.wordpress.com/2024/10/12/raku-burritos/#comment-800 )?

[15:00] <ab5tract> Hmm, it should be in the docs indeed

[15:00] <ab5tract> We used to have it in an example on the front page after all

[15:03] <ab5tract> I forget the specific syntax for defining it but this is the precedence for feeds: https://docs.raku.org/language/operators#Operators

[15:04] <discord-raku-bot> <librasteve> oh, I thought this was is equiv

[15:04] <ab5tract> Arg, I copied the back-to-top link. It’s the section at the very close to end

[15:08] <discord-raku-bot> <librasteve> still mystified ... proto infix:«>>=»($ ,$) is prec(prec => ‘f=’) {*} ... what is the named arg prec, what is f=

[15:11] <ab5tract> Right, like I said I have lost track of the syntax:(

[15:12] <ab5tract> I think the looser/tighter traits are better documented?

[15:12] <discord-raku-bot> <librasteve> oh, sorry

[15:13] <ab5tract> prec definitely looks like an ancient artifact

[15:14] <ab5tract> If it’s not marked as an implementation detail, it probably should be

[15:14] <discord-raku-bot> <librasteve> ok, I guess that is prec(prec => 'f=') means set precedence level to prec => xx where f= is an incantation for feed operator precendence

[15:15] <ab5tract> That’s my guess as well

[15:15] <discord-raku-bot> <librasteve> cool - tx!

[15:16] <ab5tract> I think tighter/looser ( is there an equivalent .. erm, equivalent?) traits are the “modern” (or at least legible) approaches

[15:17] <ab5tract> I am not at home to check Rakudo source

[15:17] <ab5tract> But “f=“ almost certainly means “at the precedence level of Feed”

[15:25] <discord-raku-bot> <librasteve> ok - thanks for the help!

[15:29] <ab5tract> Finally found the docs reference : https://docs.raku.org/syntax/is%20tighter

[15:31] <ab5tract> Still ancient enough that 5 characters are shaved from equivalent because lot course we need to take care not to burden our programmers with too many letters while they are doing that everyday task of setting operator precedence

[15:41] <discord-raku-bot> <librasteve> that's very helpful - thanks! sadly I am getting somewhat confusing (not related?) error from wambas example (which I am keen to employ) ... have raised this on SO https://stackoverflow.com/questions/79086815/setting-raku-custom-operator-precedence-to-feed so everyone can try the code and ut me straight ... wamba is a visitor to SO so hopefully they will pick up on it

[15:41] <discord-raku-bot> <librasteve> appreciate the steer

[15:58] *** DarthGandalf left
[15:58] *** Some-body_ joined
[16:01] *** Some-body_ is now known as DarthGandalf

[16:02] <ab5tract> librasteve: what happens if you add the trait on each candidate?

[16:13] *** Xliff joined
[16:13] <Xliff> \o

[16:14] <timo> o/

[16:34] *** dakkar left
[16:40] <Xliff> @.shift is atomic, yes?

[16:41] <Xliff> Or do I need to lock it?

[16:44] <timo> i don't think it's atomic, we don't use atomic operations to load and change the count and offset attributes in arrays

[16:48] <Xliff> So I need to lock it in a multi-threaded app?

[16:49] <Xliff> I guess I'm being a bit inaccurate in my use of language.

[16:49] <Xliff> If I don't need to lock something to prevent a race condition, I consider that operation "atomic" 

[16:49] <Xliff> And that might be incorrect. 

[16:50] <timo> you'll want to use locking if you use methods on array that also change the number of items

[16:51] <timo> the "changing how many items there are" and "getting the last/first item" operations can interleave in unfortunate ways, causing funny things like getting the same item out twice and one item just being lost

[16:53] <timo> we do have "enter-single-user-mode" and "leave-single-user-mode" bits in VMArray but i think that's not locking, just warning if you're in trouble?

[16:57] <lizmat> Xliff: aren't you looking for a Channel ?

[17:08] <timo> there's also a few async and atomic datastructure modules in the ecosystem right?

[17:19] <lizmat> https://raku.land/?q=concurrent

[17:22] <Xliff> lizmat: If that means pull out in the same order I put in, then maybe so.

[17:23] <lizmat> https://docs.raku.org/type/Channel

[17:28] <timo> yeah channel is exactly what you want

[17:39] <discord-raku-bot> <librasteve> ab5tract: yep applying is looser on the individual candidates works - i can live without pronto for now - brilliant, thanks! ps. will update the so

[18:35] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/10/14/2024-42-burritonads/

[19:04] <discord-raku-bot> <librasteve> ab5tract: quick update - applying more testing without proto - I can now confirm that is looser(&infix:<xor>) works as in the code runs, but does NOT give the same Sequencer precedence as ==>, more checking and I CAN apply is prec(prec => ‘f=’) at the candidate level and that does appear to produce the right precedence (so wamba was right to reach for this arcane syntax all along)

[19:06] <discord-raku-bot> <librasteve> question now seems to be (i) is getting Sequencer precedence level a feature we want in raku (I vote yes since I value the outcome) and then (ii) how do we recommend coders get this precedence - should the arcane is prec be kept or is there another way.... curious to hear if folk think this is a good topic for a Problem Solving Issue (I have not yet checked to see if there is one already btw)??

[19:08] <ab5tract> Yeah I think it’s worth a problem solving for sure

[19:09] <ab5tract> I think that there is an argument to be made that we should be providing an enum of precedence levels rather than ( or in addition to) passing routine names

[19:21] <discord-raku-bot> <librasteve> yeah - I was thinking of just a numeric value, but an Enum would be cleaner

[19:21] *** Aedil left
[19:40] *** guifa left
[19:44] <discord-raku-bot> <librasteve> fwiw I would say you want to use locking on any raku data type where you are changing it from more than one thread (not only changing the length, but also changing values, keys, etc)

[19:50] *** stanrifkin joined
[19:53] *** guifa joined
[20:21] *** guifa left
[20:29] *** guifa joined
[21:54] *** guifa left
[22:01] *** merp left
[22:04] *** merp joined
[22:07] <patrickb> o/ I'm looking for a way to reach for the OS level FD of the STDIN of a Proc::Async. I am willing to mess with the rakudo source. Does anyone know if there is a chance?

[22:08] *** stanrifkin left
[22:10] <Xliff> Um. There's .native-descriptor available on the IO::Handle that do it.

[22:10] <Xliff> ^^ patrickb

[22:13] <patrickb> $!process-handle is the handle I'm interested in?

[22:13] <Xliff> Looking...

[22:13] *** guifa joined
[22:14] <patrickb> It's at least the one passed to nqp::asyncwritebytes()

[22:14] <patrickb> and the one that's nqp::closefh()ed

[22:20] <Xliff> Ick.

[22:20] <Xliff> I've traced it back to src/io/procops.c line 991

[22:20] <Xliff> Then it goes over my head.

[22:21] <Xliff> Was hoping it was just an IO handle, but it's created by Moar and accessed via an NQP operation.

[22:29] <[Coke]> my $proc = Proc::Asyc.new; $proc.stdin.native-descriptor?

[22:35] *** guifa left
[22:38] <Xliff> That's what I was thinking../.

[23:16] *** Sgeo joined
[23:30] <elcaro_> .sort(:k) behaving weird on Seq's... given @a = <A B C>,<1 2 3 4 5>,<w x y z> ...

[23:31] <elcaro_> @a.map({ |[^.elems] }).sort(:k) ~~ (0,0,0,1,1,1,2,2,2,3,3,4)

[23:31] <elcaro_> Need to convert to List/Array first

[23:31] <elcaro_> [ @a.map({ |[^.elems] }) ].sort(:k) ~~ (0,3,8,1,4,9,2,5,10,6,11,7)

[23:31] <elcaro_> sort() func doesn't have this issue.

[23:31] <elcaro_> I will raise an Issue

[23:36] *** guifa joined
[23:39] <Xliff> m: '➿'.uniname.say

[23:39] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «DOUBLE CURLY LOOP␤»

[23:40] <Xliff> m: '➿'.ord.say

[23:40] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «10175␤»

[23:42] <elcaro_> I must say, I'm not a fan of that symbol, tho I think giving round-robin a metaop is a decent idea; I'm pretty sure the suggestion has come up in previous years of IRC chat

[23:43] <elcaro_> In line with X and Z, it would be nice if it had a single cap ascii version... it's a shame R is taken.

[23:46] <elcaro_> `E` isn't a bad idea, visually symbolizing "this, then this, then this...", but then again... maybe round-robin is not common enough to deserve a single ascii letter. Maybe `RR` is a possibility. Just idle thoughts.

[23:48] <timo> m: my @a = <A B C>,<1 2 3 4 5>,<w x y z>,<a b>,<9 8 7 6 5 4 3 2 1>; @a.map({ |[^.elems] }).say

[23:48] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «(0 1 2 0 1 2 3 4 0 1 2 3 0 1 0 1 2 3 4 5 6 7 8)␤»

[23:48] <timo> m: my @a = <A B C>,<1 2 3 4 5>,<w x y z>,<a b>,<9 8 7 6 5 4 3 2 1>; @a.map({ |[^.elems] }).sort(:k).say

[23:48] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «(0 0 0 0 0 1 1 1 1 1 2 2 2 2 3 3 3 4 4 5 6 7 8)␤»

[23:48] <timo> m: my @a = <A B C>,<1 2 3 4 5>,<w x y z>,<a b>,<9 8 7 6 5 4 3 2 1>; @a.map({ |[^.elems] }).sort().say

[23:48] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «(0 0 0 0 0 1 1 1 1 1 2 2 2 2 3 3 3 4 4 5 6 7 8)␤»

[23:49] <elcaro_> m: my @a = <A B C>,<1 2 3 4 5>,<w x y z>,<a b>,<9 8 7 6 5 4 3 2 1>.map({ |[^.elems] }); @a.sort(:k).say

[23:49] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «(4 1 0 3 2)␤»

[23:49] <elcaro_> oops

[23:49] <elcaro_> m: my @a = (<A B C>,<1 2 3 4 5>,<w x y z>,<a b>,<9 8 7 6 5 4 3 2 1>).map({ |[^.elems] }); @a.sort(:k).say

[23:49] <camelia> rakudo-moar 91f2f3c19: OUTPUT: «(0 3 8 12 14 1 4 9 13 15 2 5 10 16 6 11 17 7 18 19 20 21 22)␤»

[23:49] <elcaro_> This should be the answer. 

[23:50] <elcaro_> That one worked because I assigned @a after the .map

[23:50] <timo> could be there needs to be more candidates for method sort that have :k, not just for List:D

[23:53] <timo> gotta run

[23:53] <elcaro_> o :k

[23:56] <guifa> in retrospect, maybe we should have used F for Flip (instead of R for Reverse), so we could use R for Roundrobin

