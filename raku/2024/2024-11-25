[00:16] *** yewscion joined
[00:21] *** yewscion_ joined
[00:21] *** yewscion left
[00:47] *** yewscion joined
[00:48] *** yewscion_ left
[01:01] *** Manifest0 left
[01:29] <botato> raku's concurrency features look neat, so I want to implement some solutions to protohackers to learn it, but I'm stuck on the first problem: https://protohackers.com/problem/0

[01:30] <botato> a basic tcp echo server in raku is easy enough, but this has the complication that you don't echo their message right away, but read everything until they close, and then write everything back

[01:30] *** kylese left
[01:31] <botato> but it seems IO::Socket::Async doesn't have the concept of half-closed connection? with tcp one side or the other should be able to close connection and it is half closed meaning they won't send anymore but can still receive, then when other side closes it's fully closed

[01:32] <botato> to read everything first, and then write it back all at once I try:         for $conn.Supply(:bin).list.eager -> $msg {$conn.write: $msg;}

[01:33] <botato> but when the other side half-closes the connection, so for sure there won't be anything more to receive, the Supply is still open, until I close my side of the connection

[01:34] *** kylese joined
[01:41] <botato> I try non Async socket: https://gist.github.com/bo-tato/7930d618b4360f9097f70d142eccb3b8 and `echo "adsf" | nc localhost 1337 -v`, and it seems worse, that the recv call blocks forever even though the socket is fully closed

[01:42] <botato> with the Socket::Async at least when socket is fully closed the Supply closes, just when the other side has half-closed the tcp connection the Supply is still open though it should be closed at that point I think

[01:44] <botato> can test as after EOF from the echo piped to nc, it half-closes the connection, then ctrl-C the nc to fully close it

[02:01] *** Aedil joined
[02:07] *** MasterDuke joined
[02:34] *** hulk joined
[02:35] *** kylese left
[02:42] *** yewscion left
[03:11] *** yewscion joined
[03:15] *** hulk left
[03:15] *** kylese joined
[03:16] *** yewscion left
[03:18] *** MasterDuke left
[03:41] <timo> https://github.com/libuv/libuv/issues/3449 harumpf

[04:37] <botato> my bad if testing with nc you need -q0 so it sends half close as soon as it reads EOF

[04:37] <botato> interesting issue, but here we don't have any RST flag

[04:40] <botato> echo server with IO::Socket::Async: https://gist.github.com/bo-tato/1f0a264c787d88096b842541217561d0 tcpdump log: https://gist.github.com/bo-tato/45262edebb98f379ab4fddfa55634e24 as soon as it gets Fin flag from client, it sends back Fin and closes connection, never writing back the message

[04:42] <botato> echo server that passes the protohackers.com tests: `socat tcp-l:1337,fork,reuseaddr exec:cat` with tcpdump: https://gist.github.com/bo-tato/4b7b092cb50cd695d1501cc3bbbbe045 after it gets Fin from client it doesn't respond with Fin right away, but echoes the message back, then closes it's side with Fin

[04:42] <botato> is that possible with current raku socket library?

[05:00] *** librasteve_ left
[06:02] *** zenmov left
[06:02] *** zenmov joined
[06:03] *** zenmov left
[06:03] *** zenmov joined
[06:05] *** zenmov left
[06:06] *** zenmov joined
[06:07] *** zenmov left
[06:08] *** zenmov joined
[06:08] *** zenmov left
[06:08] *** zenmov joined
[07:24] *** Sgeo left
[07:27] *** [Coke] left
[08:15] *** apac joined
[08:30] <Geth> ¦ advent: pheix++ created pull request #117: Add post by pheix on KZG commitments and Ethereum v3 trxs

[08:30] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/117

[08:48] *** sena_kun joined
[08:54] *** dakkar joined
[08:55] *** guifa joined
[08:59] <timo> very worst case, you can still NativeCall

[09:01] *** Manifest0 joined
[09:22] *** [Coke] joined
[09:29] *** apac left
[09:52] *** sena_kun left
[10:18] <Geth> ¦ advent/main: 726baa649d | Kostas++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[10:18] <Geth> ¦ advent/main: Add post by pheix on KZG commitments and Ethereum v3 trxs (#117)

[10:18] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/726baa649d

[10:29] *** librasteve_ joined
[10:45] <xinming> m: ((0..Inf) Z <a b c>).grep(*[1] eq "b").map(*[0]).raku.say

[10:45] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «(1,).Seq␤»

[10:46] <timo> ^- can that use the :as named argument to grep?

[10:46] <xinming> Above example is a way to get index of an element, But wonders, Is there a function which is defined for this? returns indexes with a function without such onliners.

[10:46] <timo> oh, of course

[10:46] <timo> there's .pairs, there's .kv, depending on how you would prefer to iterate over the thing

[10:47] <timo> and the :kv and :p or :pairs argument to grep

[10:47] <lizmat> or even :k !

[10:47] <timo> m: say <a b c d e f>.grep("b", :k)

[10:47] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «(1)␤»

[10:47] <timo> m: say <a b c d e f a b c d a b c a b a b a>.grep("b", :k)

[10:47] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «(1 7 11 14 16)␤»

[10:47] <timo> m: say <a b c d e f a b c d a b c a b a b a>.grep("b", :kv)

[10:47] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «(1 b 7 b 11 b 14 b 16 b)␤»

[10:48] <xinming> timo: thanks for the :k thing.

[10:48] <xinming> This is why I love raku/perl

[10:48] <xinming> quite expressive. :-)

[10:49] <timo> it's also vaguely related to the schwartzian transform from perl that you can do without in raku in more places

[10:49] <timo> also thank liz as well :)

[11:15] *** Manifest0 left
[12:52] <xinming> m:  my @x = [[1..3]]

[12:52] <camelia> rakudo-moar 7d29c62a9: ( no output )

[12:52] <xinming> m:  my @x = [[1..3]]; @x.raku.say;

[12:52] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «[1, 2, 3]␤»

[12:52] <timo> m: my @x = [[1..3],]; dd :@x

[12:52] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «:x([[1, 2, 3],])␤»

[12:53] <xinming> With this example, I know that ((1..3)) will be slipped makes sense. But why will [[]] be still slpped?

[12:53] <timo> it's not "slipped" per se, it's just iterated. this is the "single-argument rule" in action

[12:53] <xinming> timo: Yea, I know that adding comma will work, But that makes me confuse

[12:53] <timo> the [1..3] is the single argument to the outer circumfix:<[ ]>

[12:53] <timo> m: for [1,2,3] { "element: $_".say }

[12:53] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «element: 1␤element: 2␤element: 3␤»

[12:54] <timo> m: for $[1,2,3] { "element: $_".say }

[12:54] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «element: 1 2 3␤»

[12:54] <timo> "unless it's an item"

[13:17] *** finanalyst joined
[13:25] *** ashfield left
[13:25] *** greenfork left
[13:25] *** atweedie left
[13:25] *** patrickb left
[13:25] *** atweedie joined
[13:26] *** greenfork joined
[13:26] *** ashfield joined
[13:26] *** patrickb joined
[13:55] *** finanalyst left
[14:05] *** guifa left
[14:34] *** guifa joined
[14:49] <xinming> m: my @x = <a b c>; my @idx = 1,2; my @t = @x; @x = (); @x[@idx] = @t[@idx]; @x.raku.say;

[14:49] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «[Any, "b", "c"]␤»

[14:49] <xinming> In this example, Is there a way to remove the @t var and empty the @x in this case?

[14:50] <xinming> I mean, preseving the array, But only keep portion of values

[14:52] <timo> m: my @x = <a b c>; my @idx = 1,2; @x = @x[][@idx]; @x.raku.say;

[14:52] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «["b", "c"]␤»

[14:52] <timo> actually it also works without the empty []

[14:53] <timo> or do you want the Any in there?

[14:55] <xinming> timo: yea

[14:56] <xinming> I know the @x[@idx] thing, But it doesn't preserve the Array shape

[14:56] <xinming> So my code do a backup, and cleanup original array, then assign items accordingly

[14:58] <xinming> it's quite fine even we can't do that, I personally doesn't think this should be the language feature. Just try to make things more compact

[14:59] <timo> i can think of things that are longer than what you wrote

[15:02] <timo> m: my @x = <a b c>; my @idx = 1,2; @x .= map({ ($++ (elem) @idx) ?? $_ !! Any }); @x.raku.say

[15:02] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «[Any, "b", "c"]␤»

[15:03] <timo> it's only slightly longer than yours :\

[15:09] <xinming> I thought about this idea too, just felt it's harder to understand. I think no built-in language feature for this.

[15:09] <dakkar> m: my @x=<a b c>; my @idx=1,2; @x[(@x.keys() (-) @idx).keys()]:delete;@x.raku.say

[15:09] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «[Any, "b", "c"]␤»

[15:10] <dakkar> "delete all indices not mentioned"

[15:14] <discord-raku-bot> <nahita3882> you can reduce to @x[(^* ∖ @idx).keys]:delete if you wanted

[15:14] <discord-raku-bot> <nahita3882> that we need .keys is a little sad i think

[15:14] <timo> are you a raku golfer? :D amazing

[15:15] <timo> i think you could shorten that to @x[keys ^* \ @idx:]:delete

[15:20] <discord-raku-bot> <nahita3882> i had the same idea as dakkar and was looking to shorten further :p

[15:21] <discord-raku-bot> <nahita3882> and it wasn't working without .keys on the Set produced, it was deleting "b", which is actually a bit mysterious unfortunately

[15:22] <discord-raku-bot> <nahita3882> it takes the length of the Set when it is used directly as the indexer for some reason

[15:23] <discord-raku-bot> <nahita3882> also your .map solution works even if the last item has to go; ours shorten the list length by 1 in that case

[15:23] <discord-raku-bot> <nahita3882> also compiler gets confused on your indirect method invocation suggestion unfortunately

[15:23] <timo> damn

[15:24] <timo> does it need [(@x....:)] to work?

[15:25] <discord-raku-bot> <nahita3882> i tried with parens in various places, it's still confused on the location of the infix ∖

[15:26] <timo> ah, dang, so it would need parens around that and then there is no win from the : syntax

[15:30] *** yewscion joined
[15:34] *** dmvrtx_ joined
[15:34] *** dmvrtx left
[16:23] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/11/25/2024-46-no-release/

[16:26] *** Manifest0 joined
[16:35] *** yewscion left
[16:49] <El_Che> hi lizmat, thank you

[16:51] *** apac joined
[17:13] *** yewscion joined
[17:25] *** apac left
[17:28] *** coleman left
[17:30] *** coleman joined
[17:37] *** yewscion left
[17:38] *** dakkar left
[17:53] *** yewscion joined
[18:08] *** thowe left
[18:08] *** thowe joined
[18:12] *** lizmat_ joined
[18:15] *** lizmat left
[18:17] *** BinGOs left
[18:17] *** bingos joined
[18:21] *** lizmat_ left
[18:21] *** lizmat joined
[18:48] <xinming> DarthGandalf: thanks for the idea, That version is acceptable to me

[18:49] *** sena_kun joined
[18:49] <xinming> @nahita3882 I don't like the @x[(keys ^* \ @idx:]:delete thing, As I don't understand how it worked. :-)

[19:02] <DarthGandalf> xinming: which one?

[19:05] <xinming> DarthGandalf: oops, sorry, wrong completion, I mean dakkar

[19:07] <timo> that's not the one that worked :D

[19:07] <timo> that's my broken one

[19:07] <discord-raku-bot> <antononcube> DarthDakkar?

[19:09] <xinming> m: multi test-multi (@a) { @a.raku.say }; <a b c>.test-multi()

[19:09] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «No such method 'test-multi' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[19:10] <xinming> IIRC, before we can call test-multi as method for an object, Is my memory wrong?

[19:15] <timo> do it like .&test-multi()

[19:18] <xinming> timo: So, the syntax changed long ago, right?

[19:18] <xinming> thanks

[19:18] <lizmat> it's been like thatfor 12 years at least  :-)

[19:20] <xinming> hmm, Ok, I'll need to refresh my memory for all these.

[19:38] <ab5tract> xinming: you also have this option:

[19:38] <ab5tract> m: my $a = <1 2 3> but role :: { method test-multi { say "testing!" } }; $a.test-multi

[19:38] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «testing!␤»

[19:38] <ab5tract> note that DWIMs with scalar container

[19:39] <lizmat> .oO( sometimes I wish we could drop the "role :: {    }" boilerplate

[19:40] <lizmat> )

[19:44] <lizmat> .oO( also syntax like  "is !built" for "is built(False)" )

[19:46] <timo> isn't built

[19:52] <lizmat> hmmmm

[19:52] <lizmat> that would mean a new trait_mod

[19:59] <timo> can't just make that a sub, right? has to go in the grammar as well?

[19:59] <timo> or does it automatically do that just like operators do?

[20:00] <timo> m: multi sub trait-mod:<isn't>(Attribute $thing, :$built!) { say "haha" }; class A { has $.foo isn't built }

[20:00] <camelia> rakudo-moar 7d29c62a9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot add tokens of category 'trait-mod'␤at <tmp>:1␤------> multi sub trait-mod:<isn't><HERE>(Attribute $thing, :$built!) { say "haha␤»

[20:00] *** abraxxa-home joined
[20:42] *** apac joined
[21:01] *** abraxxa-home left
[21:37] *** Aedil left
[21:40] *** librasteve_ left
[21:56] <timo> https://asciinema.org/a/jKMWXHzKYk1tRdc7Xfc0wzcDD silly little "when you paste something in this line editor, you get to work on the stuff before it actually goes in" proof-of-concept / experiment

[21:56] <timo> japhb, patrickb: check it out :) it's based on Terminal::LineEditor

[21:58] <patrickb> oh wow! That's a slice'n'dice!

[21:59] <timo> it can almost send email, but not quite

[22:03] <timo> don't ask what happens when the individual lines are too long to fit in one line ... :|

[22:04] <timo> i also accidentally half a lizmat's Commands module, but worse

[22:05] <timo> but really, a normal user would probably just want a keybind that launches $EDITOR

[22:05] <guifa> random: do we have a clipboard module?

[22:06] <guifa> ah we do

[22:07] <timo> is it for the OSC 53 or whichever it is ansi escape sequence? or like xclip or so?

[22:24] *** sena_kun left
[22:31] <timo> i see now that it shells out to a commandline program that does the clipboard handling

[22:36] *** sena_kun joined
[22:38] *** apac left
[22:40] <guifa> yeah works for a QAD manner, but I wonder what it gets when the clipboard has binary data

[22:41] <guifa> I've been trying to do systems stuff where the command line is the fall back but trying to do a native call as preferred

[22:41] <guifa> I think User::Language was my first one with that model

[22:44] <Geth> ¦ advent/finanalyst-patch-1: a7deb7c306 | (Richard Hainsworth)++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[22:44] <Geth> ¦ advent/finanalyst-patch-1: Update authors.md

[22:44] <Geth> ¦ advent/finanalyst-patch-1: 

[22:44] <Geth> ¦ advent/finanalyst-patch-1: Suggestion for Day 8

[22:44] <Geth> ¦ advent/finanalyst-patch-1: review: https://github.com/Raku/advent/commit/a7deb7c306

[22:44] <Geth> ¦ advent: finanalyst++ created pull request #118: Update authors.md

[22:44] <Geth> ¦ advent: review: https://github.com/Raku/advent/pull/118

[22:49] *** Sgeo joined
[23:05] *** Manifest0 left
[23:07] *** Manifest0 joined
[23:13] *** yewscion left
[23:14] *** yewscion joined
[23:14] *** sena_kun left
[23:14] *** yewscion left
[23:34] <Geth> ¦ advent/main: 193fe96f38 | (Richard Hainsworth)++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[23:34] <Geth> ¦ advent/main: Update authors.md (#118)

[23:34] <Geth> ¦ advent/main: 

[23:34] <Geth> ¦ advent/main: Suggestion for Day 8

[23:34] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/193fe96f38

[23:35] *** Manifest0 left
[23:36] *** Manifest0 joined
