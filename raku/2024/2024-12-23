[00:03] *** ACfromTX joined
[00:15] *** finanalyst left
[00:23] *** ACfromTX left
[00:25] *** ACfromTX joined
[00:28] *** abraxxa-home left
[01:16] *** Guest81 joined
[01:39] *** Guest81 left
[02:06] *** hulk joined
[02:07] *** kylese left
[02:09] *** Aedil joined
[02:38] *** librasteve_ left
[02:48] *** zenmov left
[03:06] *** kst left
[03:12] *** cm left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:20] <[Coke]> https://raku.land/zef:tbrowder/PDF::NameTags

[03:21] *** cm joined
[03:32] *** kst joined
[03:54] *** oodani left
[03:55] *** oodani joined
[04:00] *** oodani left
[04:01] *** oodani joined
[05:46] *** stackspace joined
[06:46] *** Sgeo left
[06:54] *** stackspace left
[07:52] *** Aedil left
[08:50] <xinming> ab5tract: thanks for the #whateverable note

[08:57] *** sena_kun joined
[09:36] *** Aedil joined
[09:59] <lizmat> tbrowder: updates on raku.land can be delayed up to several hours due to a bug in the harvesting logic of raku.land, which causes a harvest to fail if one of the servers interrogated answers with a 403

[09:59] <lizmat> this is a known issue

[10:00] <lizmat> the module *was* zef installable immediately though, and the REA harvester also indexed it on the next hourly run

[11:25] *** Aedil left
[11:26] *** Aedil joined
[11:27] *** Aedil left
[11:28] *** Aedil joined
[11:32] *** Aedil left
[11:33] *** Aedil joined
[11:57] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/12/23/2024-52-connecting-the-dots/

[13:20] <guifa> m: say sprintf: '%d h%d m%d s', 5,5,5

[13:20] <camelia> rakudo-moar bcd7beaf7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling sprintf() will never work with signature of the proto ($, |)␤at <tmp>:1␤------> say <HERE>sprintf: '%d h%d m%d s', 5,5,5␤»

[13:29] <lizmat> m: say sprintf '%d h%d m%d s', 5,5,5

[13:29] <camelia> rakudo-moar bcd7beaf7: OUTPUT: «5 h5 m5 s␤»

[13:29] <lizmat> guifa: why the colon?

[13:29] <guifa> oh duh

[13:29] <timo> say sprintf: is equivalent to sprintf.say: blah, right?

[13:30] <timo> indirect object notation if i'm not mistaken

[13:30] <timo> but a little surprised that it invokes sprintf with no arguments there. i don't think this syntax is meant to be used like that though?

[13:33] <guifa> timo: no not meant to be used that way, that's just me being an idiot :) 

[13:34] <timo> i really really rarely ever use that notation in the first place

[13:34] <guifa> ah I use it quite a bit 

[13:34] * guifa hateses the parenthesesss

[13:35] <lizmat> I usually use it with blocks

[13:35] <lizmat> @a.map: {

[13:35] <lizmat> ...

[13:35] <lizmat> }

[13:35] <lizmat> saves on a ; as well then

[13:35] <guifa> I also use it inside of parentheses 

[13:36] <guifa> @foo.map(*.substr: 0, 1).join is cleaner to me that @foo.map(*.substr(0,1)).join

[13:38] <timo> well, @a.map: isn't indirect object notation

[13:38] <timo> that would be map @a: ...

[13:49] <lizmat> right, that was more about using the colon  :-)

[13:49] <timo> yeah i use the colon for method calls regularly

[13:50] <guifa> oh you were meaning just for indirect.  I use it occasionally

[13:50] <guifa> less so though because most syntax highlighters don't get it

[14:53] * guifa testing out his mDNS-based service discovery module

[14:53] <guifa> What am I doing wrong?  I can only find like one thing when I'm searching

[14:53] <guifa> oh

[14:53] <guifa> that's it

[14:53] <guifa> 99% of devices aren't followings tandard and responding to a "what's out there" query lol

[15:26] <ab5tract> Probably a decent move from a security standpoint… but also a bit self-defeating in terms of the intent of the mDNS protocol :)

[15:30] <guifa> oh hmmm actually inspecting via wireshark, maybe I need to double check my moarvm stuff --- it seems i thought I'm sending fpm 5353 but its a randomly assigned port which can be ignored

[15:38] <guifa> aaaaah I think I see the issue.  When we use IO::Socket::Async.udp(...) doesn't let you choose the outgoing port number

[15:40] <guifa> if you want to, you need to use bind-udp, which in the docs is listed as just for listening (but can be used for sending as well)

[16:10] <discord-raku-bot> <antononcube> If I import JSON file that has new lines (in Raku) I get the message: >  Missing serialize REPR function for REPR VMException (BOOTException)

[16:11] <discord-raku-bot> <antononcube> It seems to happen with both "JSON::Tiny" and "JSON::Fast".

[16:25] <discord-raku-bot> <antononcube> Since these a certain configuration files, I can control / massage the imported content. But it is inconvenient.

[16:39] <lizmat> antononcube if you could create a golf, please make an issue for it

[16:39] <lizmat> exceptions should just be runtime, they should not be serialized

[16:44] <discord-raku-bot> <antononcube> Ok. That happens in INIT  phaser in "Jupyter::Chatbook". (Meaning, the code I observer this behavior with is somewhat complicated.) But it is interesting that that problem can be "fixed" by just manipulating the JSON file.

[16:44] <discord-raku-bot> <antononcube> So, hopefully, it is simple to narrow down to (much) simpler code.

[16:44] <lizmat> dinner&

[17:34] <timo> ah, we should really figure something out for outputting what's in the exception when it ends up in a serialization context by accident

[17:52] <timo> @antononcube, how can i get a little patch of moarvm's C sources to you so you can test if it works with your code?

[18:17] <timo> can't easily trigger the exception myself right now

[18:53] *** Tirifto_ joined
[18:58] *** Tirifto left
[19:01] <timo> @antononcube, i have a branch called serialize_vmexception_prints_its_message_and_backtrace which should give a more helpful error message for your issue. can you build moar from source?

[19:03] <discord-raku-bot> <antononcube> @timo I can try these after 4-5 hours.

[19:28] *** bisectable6 left
[19:32] *** bisectable6 joined
[19:49] <jdv> ab5tract: you really do java a lot?

[19:55] <discord-raku-bot> <antononcube> No, little-java, much-kotlin.

[19:55] <discord-raku-bot> <antononcube> (At least that is what @ab5tract stated in his Raku Advent 2024 post.)

[20:01] *** Aedil left
[20:59] *** xinming left
[21:00] <ab5tract> I do a lot of Java at work

[21:05] <discord-raku-bot> <antononcube> It is an interesting question do LLMs know Java better Kotlin.

[21:06] <discord-raku-bot> <antononcube> Or the other way around, of course.

[21:08] <ab5tract> jdv: why do you ask?

[21:08] *** xinming joined
[21:24] <jdv> ab5tract: just curious.  i don't know that many people who do.

[22:15] <ab5tract> Fair enough! It’s an interesting language to be honest, it’s possible to be relatively concise (relative to other Java code, that is)

[22:17] <ab5tract> However, I doubt I would ever write a line of it  without being paid to do so

[22:17] <ab5tract> s/a/another/

[22:49] *** Sgeo joined
[22:52] *** cm_ joined
[22:53] *** cm left
[22:53] *** cm_ is now known as cm

[22:58] *** Sgeo left
[22:59] *** Sgeo joined
[23:13] *** sena_kun left
[23:37] <guifa> what's the best way to do an enum that you don't want to flood the name space?

[23:38] <guifa> like that has to be references in full as Foo::A, Foo::B but still lets you say that you want something typed as Foo?

[23:38] <guifa> but such that A and B aren't valid constants?  I guess just making the enum in a packet and exporting only the top level name?

[23:40] <lizmat> m: my constant A = do { my enum FOO <a b c>; FOO }; dd A; dd A::a; dd a

[23:40] <camelia> rakudo-moar f58bed9f6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[23:41] <lizmat> m: my constant A = do { my enum FOO <a b c>; FOO }; dd A; dd A::a

[23:41] <camelia> rakudo-moar f58bed9f6: OUTPUT: «FOO␤FOO::a␤»

[23:41] <lizmat> guifa: ^^

[23:42] <guifa> ha that's basically I guess what that exporting would do but without needing a separate package

[23:42] <lizmat> yup

[23:44] <guifa> too many overlapping enum names when dealing with DNS 

[23:44] <guifa> *ahem* 'standard'

