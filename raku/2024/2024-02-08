[00:03] <discord-raku-bot> <aruniecrisps> i wonder what i'm doing wrong then ü§î if i can get it to properly parse raku files into an AST then a good chunk of our work is done already @lizmat

[00:03] <discord-raku-bot> <aruniecrisps> https://cdn.discordapp.com/attachments/633753286209699870/1204940610407104564/Screenshot_2024-02-07_at_7.02.37_PM.png?ex=65d68f64&is=65c41a64&hm=509da9afe407fae0f0b2059078739da4ced7deea32e65257b2e17676c3934307&

[00:19] *** xinming left
[00:20] *** xinming joined
[00:20] *** jpn joined
[00:25] *** jpn left
[01:25] *** derpydoo left
[01:40] <discord-raku-bot> <_grenzo> what was the command that produced that error?

[01:42] <discord-raku-bot> <_grenzo> nvm I see it right at the top

[01:43] <discord-raku-bot> <_grenzo> and is Moneys in your include paths?

[01:56] *** jpn joined
[02:01] *** jpn left
[02:03] *** jpn joined
[02:08] *** jpn left
[02:11] <discord-raku-bot> <aruniecrisps> it's not, but it shouldn't matter, what i'm trying to do is just get the AST

[02:13] <[Coke]> the use has to run code.

[02:13] <discord-raku-bot> <_grenzo> you're trying to turn the string 'use Moneys' into it's AST representation?

[02:14] <[Coke]> try 'use Test' instead, that one's built in

[02:15] <[Coke]> m: dd "use Test".AST

[02:15] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´use Test‚ê§¬ª

[02:15] <[Coke]> m: say "use Test".AST

[02:15] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´RakuAST::StatementList.new(‚ê§  RakuAST::Statement::Use.new(‚ê§    module-name => RakuAST::Name.from-identifier("Test")‚ê§  )‚ê§)‚ê§¬ª

[02:16] <[Coke]> (sorry, dd not as helpful with AST)

[02:16] <discord-raku-bot> <aruniecrisps> Hmmm, well in that case it looks like it's got error handling built in then

[02:19] *** hulk joined
[02:21] *** kylese left
[02:27] *** gabiruh left
[02:33] *** _________ left
[02:43] *** gabiruh joined
[03:04] *** jpn joined
[03:08] *** jpn left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:16] *** gabiruh left
[03:24] *** merp left
[03:33] *** gabiruh joined
[03:43] *** gabiruh left
[03:56] *** merp joined
[04:00] *** gabiruh joined
[04:02] *** japhb left
[04:05] *** jpn joined
[04:10] *** jpn left
[04:13] *** japhb joined
[04:42] *** jpn joined
[04:47] *** jpn left
[05:20] *** TieUpYourCamel left
[05:20] *** Aedil left
[05:20] *** nativecallable6 left
[05:20] *** benchable6 left
[05:20] *** bisectable6 left
[05:20] *** coverable6 left
[05:20] *** clarkema_ left
[05:20] *** patrickb left
[05:20] *** atweedie left
[05:20] *** vrurg left
[05:21] *** ingy left
[05:21] *** sdfgsdfg left
[05:21] *** GreaseMonkey left
[05:21] *** ab5tract left
[05:21] *** BinGOs left
[05:21] *** Opus left
[05:21] *** mst left
[05:21] *** zostay left
[05:21] *** rjbs left
[05:21] *** irth left
[05:22] *** ingy joined
[05:22] *** sdfgsdfg joined
[05:22] *** GreaseMonkey joined
[05:22] *** ab5tract joined
[05:22] *** BinGOs joined
[05:22] *** Opus joined
[05:22] *** mst joined
[05:22] *** zostay joined
[05:22] *** rjbs joined
[05:22] *** irth joined
[05:22] *** TieUpYourCamel joined
[05:22] *** Aedil joined
[05:22] *** nativecallable6 joined
[05:22] *** benchable6 joined
[05:22] *** coverable6 joined
[05:22] *** bisectable6 joined
[05:22] *** clarkema_ joined
[05:22] *** patrickb joined
[05:22] *** atweedie joined
[05:22] *** vrurg joined
[05:23] *** clarkema_ left
[05:24] *** xinming left
[05:24] *** oodani left
[05:24] *** eseyman left
[05:24] *** Sevalecan left
[05:24] *** eof left
[05:24] *** gugod left
[05:24] *** bdju left
[05:24] *** jcallen left
[05:24] *** samebchase left
[05:24] *** tonyo left
[05:24] *** tbrowder__ left
[05:24] *** thebb left
[05:24] *** corwin left
[05:24] *** PotatoGim left
[05:24] *** discord-raku-bot left
[05:24] *** rba left
[05:24] *** mort left
[05:24] *** hvxgr left
[05:24] *** dpk left
[05:24] *** skaji_ left
[05:24] *** tib_ left
[05:24] *** acidsys left
[05:24] *** SmokeMachine left
[05:24] *** patrickb left
[05:24] *** atweedie left
[05:24] *** xinming joined
[05:24] *** oodani joined
[05:24] *** eseyman joined
[05:24] *** Sevalecan joined
[05:24] *** eof joined
[05:24] *** gugod joined
[05:24] *** bdju joined
[05:24] *** jcallen joined
[05:24] *** samebchase joined
[05:24] *** tonyo joined
[05:24] *** tbrowder__ joined
[05:24] *** thebb joined
[05:24] *** corwin joined
[05:24] *** PotatoGim joined
[05:24] *** discord-raku-bot joined
[05:24] *** rba joined
[05:24] *** mort joined
[05:24] *** hvxgr joined
[05:24] *** acidsys joined
[05:24] *** dpk joined
[05:24] *** skaji_ joined
[05:24] *** tib_ joined
[05:24] *** SmokeMachine joined
[05:24] *** atweedie joined
[05:24] *** samebchase left
[05:24] *** bdju left
[05:24] *** clarkema_ joined
[05:24] *** patrickb joined
[05:25] *** bdju joined
[05:25] *** samebchase joined
[05:28] *** tinita left
[05:28] *** hexology left
[05:28] *** gordonfish left
[05:28] *** jast left
[05:28] *** lizmat left
[05:28] *** leedo left
[05:28] *** tobs left
[05:28] *** esh left
[05:28] *** synthmeat left
[05:28] *** teatime left
[05:28] *** ecocode_ left
[05:28] *** kaskal- left
[05:28] *** tejr left
[05:28] *** maylay left
[05:28] *** Tirifto left
[05:28] *** nine left
[05:28] *** cm left
[05:28] *** kawaii left
[05:28] *** destroycomputers left
[05:28] *** pierrot left
[05:28] *** epony left
[05:28] *** tjr left
[05:28] *** sjn left
[05:28] *** kst left
[05:28] *** bloatable6 left
[05:28] *** tellable6 left
[05:28] *** quotable6 left
[05:28] *** notable6 left
[05:28] *** releasable6 left
[05:28] *** shareable6 left
[05:28] *** unicodable6 left
[05:28] *** evalable6 left
[05:28] *** committable6 left
[05:28] *** linkable6 left
[05:28] *** zups left
[05:28] *** dutchie left
[05:28] *** bd3i left
[05:28] *** andinus left
[05:28] *** tailgate left
[05:28] *** teatime joined
[05:28] *** ecocode_ joined
[05:28] *** kaskal- joined
[05:28] *** tejr joined
[05:28] *** maylay joined
[05:28] *** Tirifto joined
[05:28] *** nine joined
[05:28] *** cm joined
[05:28] *** kawaii joined
[05:28] *** destroycomputers joined
[05:28] *** pierrot joined
[05:28] *** japhb left
[05:28] *** kylese left
[05:28] *** dustinm` left
[05:28] *** simcop2387 left
[05:28] *** peder left
[05:28] *** Util left
[05:28] *** elcaro_ left
[05:29] *** tejr left
[05:29] *** tejr joined
[05:31] *** japhb joined
[05:31] *** kylese joined
[05:31] *** dustinm` joined
[05:31] *** simcop2387 joined
[05:31] *** peder joined
[05:31] *** Util joined
[05:31] *** elcaro_ joined
[05:31] *** epony joined
[05:31] *** tjr joined
[05:31] *** sjn joined
[05:31] *** kst joined
[05:31] *** bloatable6 joined
[05:31] *** tellable6 joined
[05:31] *** quotable6 joined
[05:31] *** notable6 joined
[05:31] *** shareable6 joined
[05:31] *** releasable6 joined
[05:31] *** unicodable6 joined
[05:31] *** evalable6 joined
[05:31] *** committable6 joined
[05:31] *** linkable6 joined
[05:31] *** zups joined
[05:31] *** dutchie joined
[05:31] *** bd3i joined
[05:31] *** andinus joined
[05:31] *** tailgate joined
[05:31] *** tinita joined
[05:31] *** hexology joined
[05:31] *** gordonfish joined
[05:31] *** jast joined
[05:31] *** lizmat joined
[05:31] *** leedo joined
[05:31] *** tobs joined
[05:31] *** esh joined
[05:31] *** synthmeat joined
[05:33] *** tjr left
[05:33] *** epony left
[05:34] *** epony joined
[05:34] *** HobGoblin left
[05:34] *** camelia left
[05:34] *** perlbot left
[05:34] *** avuserow left
[05:34] *** nebuchadnezzar left
[05:35] *** tjr joined
[05:36] *** HobGoblin joined
[05:36] *** camelia joined
[05:36] *** perlbot joined
[05:36] *** avuserow joined
[05:36] *** nebuchadnezzar joined
[05:39] *** jpn joined
[05:42] *** tinita left
[05:42] *** hexology left
[05:42] *** gordonfish left
[05:42] *** jast left
[05:42] *** lizmat left
[05:42] *** leedo left
[05:42] *** tobs left
[05:42] *** esh left
[05:42] *** synthmeat left
[05:42] *** epony left
[05:42] *** tjr left
[05:42] *** sjn left
[05:42] *** kst left
[05:42] *** bloatable6 left
[05:42] *** tellable6 left
[05:42] *** quotable6 left
[05:42] *** notable6 left
[05:42] *** releasable6 left
[05:42] *** shareable6 left
[05:42] *** unicodable6 left
[05:42] *** evalable6 left
[05:42] *** committable6 left
[05:42] *** linkable6 left
[05:42] *** zups left
[05:42] *** dutchie left
[05:42] *** bd3i left
[05:42] *** andinus left
[05:42] *** tailgate left
[05:42] *** japhb left
[05:42] *** kylese left
[05:42] *** dustinm` left
[05:42] *** simcop2387 left
[05:42] *** peder left
[05:42] *** Util left
[05:42] *** elcaro_ left
[05:42] *** teatime left
[05:42] *** ecocode_ left
[05:42] *** kaskal- left
[05:42] *** maylay left
[05:42] *** Tirifto left
[05:42] *** nine left
[05:42] *** cm left
[05:42] *** kawaii left
[05:42] *** destroycomputers left
[05:42] *** pierrot left
[05:42] *** discord-raku-bot left
[05:42] *** rba left
[05:42] *** mort left
[05:42] *** hvxgr left
[05:42] *** dpk left
[05:42] *** skaji_ left
[05:42] *** tib_ left
[05:42] *** acidsys left
[05:42] *** SmokeMachine left
[05:42] *** xinming left
[05:42] *** oodani left
[05:42] *** eseyman left
[05:42] *** Sevalecan left
[05:42] *** eof left
[05:42] *** gugod left
[05:42] *** jcallen left
[05:42] *** tonyo left
[05:42] *** tbrowder__ left
[05:42] *** thebb left
[05:42] *** corwin left
[05:42] *** PotatoGim left
[05:42] *** ingy left
[05:42] *** sdfgsdfg left
[05:42] *** GreaseMonkey left
[05:42] *** ab5tract left
[05:42] *** BinGOs left
[05:42] *** Opus left
[05:42] *** mst left
[05:42] *** zostay left
[05:42] *** rjbs left
[05:42] *** irth left
[05:42] *** TieUpYourCamel left
[05:42] *** Aedil left
[05:42] *** nativecallable6 left
[05:42] *** benchable6 left
[05:42] *** bisectable6 left
[05:42] *** coverable6 left
[05:42] *** vrurg left
[05:42] *** tejr left
[05:42] *** Sgeo left
[05:42] *** kjp left
[05:42] *** dano left
[05:42] *** itaipu left
[05:42] *** dead1 left
[05:42] *** gfldex left
[05:42] *** lucerne left
[05:42] *** jpn left
[05:42] *** bdju left
[05:42] *** justache left
[05:42] *** greppable6 left
[05:42] *** sourceable6 left
[05:42] *** silug left
[05:42] *** rypervenche left
[05:42] *** Geth left
[05:42] *** timo left
[05:42] *** jdv left
[05:42] *** phogg left
[05:42] *** avar left
[05:42] *** cleo left
[05:42] *** slu left
[05:42] *** DarthGandalf left
[05:42] *** tadzik left
[05:42] *** sivoais left
[05:42] *** mark22k left
[05:42] *** jrjsmrtn left
[05:42] *** bartolin left
[05:42] *** ACfromTX left
[05:42] *** Ekho left
[05:42] *** tbrowder_ left
[05:42] *** leont left
[05:42] *** xkr47 left
[05:42] *** samebchase left
[05:42] *** clarkema_ left
[05:42] *** patrickb left
[05:42] *** atweedie left
[05:42] *** gabiruh left
[05:42] *** El_Che left
[05:42] *** human-blip left
[05:42] *** Altreus left
[05:42] *** ilogger2 left
[05:42] *** jmcgnh left
[05:42] *** meooow left
[05:42] *** [Coke] left
[05:43] *** samcv left
[05:43] *** broquaint left
[05:43] *** nicole left
[05:43] *** jpn joined
[05:43] *** tjr joined
[05:43] *** epony joined
[05:43] *** synthmeat joined
[05:43] *** esh joined
[05:43] *** tobs joined
[05:43] *** leedo joined
[05:43] *** lizmat joined
[05:43] *** jast joined
[05:43] *** gordonfish joined
[05:43] *** hexology joined
[05:43] *** tinita joined
[05:43] *** tailgate joined
[05:43] *** andinus joined
[05:43] *** bd3i joined
[05:43] *** dutchie joined
[05:43] *** zups joined
[05:43] *** linkable6 joined
[05:43] *** committable6 joined
[05:43] *** evalable6 joined
[05:43] *** unicodable6 joined
[05:43] *** releasable6 joined
[05:43] *** shareable6 joined
[05:43] *** notable6 joined
[05:43] *** quotable6 joined
[05:43] *** tellable6 joined
[05:43] *** bloatable6 joined
[05:43] *** kst joined
[05:43] *** sjn joined
[05:43] *** elcaro_ joined
[05:43] *** Util joined
[05:43] *** peder joined
[05:43] *** simcop2387 joined
[05:43] *** dustinm` joined
[05:43] *** kylese joined
[05:43] *** SmokeMachine joined
[05:43] *** tib_ joined
[05:43] *** skaji_ joined
[05:43] *** dpk joined
[05:43] *** acidsys joined
[05:43] *** hvxgr joined
[05:43] *** mort joined
[05:43] *** rba joined
[05:43] *** discord-raku-bot joined
[05:43] *** PotatoGim joined
[05:43] *** corwin joined
[05:43] *** thebb joined
[05:43] *** tbrowder__ joined
[05:43] *** tonyo joined
[05:43] *** jcallen joined
[05:43] *** gugod joined
[05:43] *** eof joined
[05:43] *** Sevalecan joined
[05:43] *** eseyman joined
[05:43] *** oodani joined
[05:43] *** xinming joined
[05:43] *** vrurg joined
[05:43] *** bisectable6 joined
[05:43] *** coverable6 joined
[05:43] *** benchable6 joined
[05:43] *** nativecallable6 joined
[05:43] *** Aedil joined
[05:43] *** TieUpYourCamel joined
[05:43] *** irth joined
[05:43] *** rjbs joined
[05:43] *** zostay joined
[05:43] *** mst joined
[05:43] *** Opus joined
[05:43] *** BinGOs joined
[05:43] *** ab5tract joined
[05:43] *** GreaseMonkey joined
[05:43] *** sdfgsdfg joined
[05:43] *** ingy joined
[05:43] *** gabiruh joined
[05:43] *** Sgeo joined
[05:43] *** kjp joined
[05:43] *** El_Che joined
[05:43] *** dano joined
[05:43] *** itaipu joined
[05:43] *** DarthGandalf joined
[05:43] *** dead1 joined
[05:43] *** gfldex joined
[05:43] *** human-blip joined
[05:43] *** lucerne joined
[05:43] *** justache joined
[05:43] *** tadzik joined
[05:43] *** Altreus joined
[05:43] *** ilogger2 joined
[05:43] *** sivoais joined
[05:43] *** mark22k joined
[05:43] *** greppable6 joined
[05:43] *** sourceable6 joined
[05:43] *** silug joined
[05:43] *** jmcgnh joined
[05:43] *** rypervenche joined
[05:43] *** Geth joined
[05:43] *** jrjsmrtn joined
[05:43] *** timo joined
[05:43] *** bartolin joined
[05:43] *** meooow joined
[05:43] *** [Coke] joined
[05:43] *** ACfromTX joined
[05:43] *** Ekho joined
[05:43] *** jdv joined
[05:43] *** tbrowder_ joined
[05:43] *** leont joined
[05:43] *** samcv joined
[05:43] *** slu joined
[05:43] *** cleo joined
[05:43] *** avar joined
[05:43] *** phogg joined
[05:43] *** xkr47 joined
[05:43] *** nicole joined
[05:43] *** broquaint joined
[05:44] *** jpn left
[05:44] *** epony left
[05:45] *** epony joined
[05:56] *** merp left
[05:56] *** sftp left
[05:56] *** mtj left
[05:56] *** clarkema left
[05:56] *** jjatria left
[05:56] *** lucs left
[05:56] *** leah2 left
[06:01] *** merp joined
[06:01] *** sftp joined
[06:01] *** mtj joined
[06:01] *** clarkema joined
[06:01] *** jjatria joined
[06:01] *** lucs joined
[06:01] *** leah2 joined
[06:14] *** CIAvash joined
[07:08] *** jpn joined
[07:13] *** jpn left
[07:35] *** jpn joined
[07:41] *** jpn left
[08:12] *** atweedie joined
[08:12] *** clarkema_ joined
[08:12] *** patrickb joined
[08:13] *** atweedie left
[08:14] *** clarkema_ left
[08:14] *** patrickb left
[08:20] *** atweedie joined
[08:20] *** patrickb joined
[08:20] *** clarkema_ joined
[08:36] *** CIAvash left
[08:37] *** Sgeo left
[09:16] *** dakkar joined
[09:19] *** sena_kun joined
[09:28] *** synthmeat left
[09:30] *** synthmeat joined
[09:31] *** epony left
[09:37] *** epony joined
[10:20] *** jpn joined
[10:47] *** jpn left
[10:50] <lizmat> aruniecrisps  because a "use" statement can change the grammar, and thus parsing of code, the module *is* actually loaded at compile time

[10:50] <lizmat> and if it cannot, then will fail

[10:52] <lizmat> m: use v6.e.PREVIEW; say RakuAST::Statement::Use.new(module-name => RakuAST::Name.from-identifier("Bar"))

[10:52] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´RakuAST::Statement::Use.new(‚ê§  module-name => RakuAST::Name.from-identifier("Bar")‚ê§)‚ê§¬ª

[10:52] <lizmat> aruniecrisps this does not happen if you programmatically create the AST for a "use Bar"

[10:53] <lizmat> m: use v6.e.PREVIEW; say RakuAST::Statement::Use.new(module-name => RakuAST::Name.from-identifier("Bar")).EVAL

[10:53] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´Could not find Bar in:‚ê§    /home/camelia/.raku‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/core‚ê§    CompUnit::Repository::AbsolutePath<‚Ä¶¬ª

[10:53] <lizmat> unless you .EVAL it of course, and the module can not be foud

[10:53] <lizmat> *found

[10:57] *** jpn joined
[11:02] *** jpn left
[11:40] *** jpn joined
[11:45] *** jpn left
[12:05] *** jpn joined
[12:08] <tbrowder__> lizmat: any thoughts on feasability of autochecking for allowable  subroutine named args?

[12:11] <tbrowder__> sub f(:$bar --> Hash | bar) is export {..}

[12:12] <lizmat> tbrowder__: not sure I follow

[12:14] *** jpn left
[12:14] <tbrowder__> in tha sub i'm defining the allowable named args. if a caller uses anything else it would cause an exception.

[12:14] <lizmat> m: sub a(:$a, :$b) { }; a(:c)

[12:14] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´Unexpected named argument 'c' passed‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:15] <lizmat> it's only on methods that unexpected named arguments are slurped into %_

[12:16] <tbrowder__> funny but in my code i swear i see named args a didn't expect being ignored

[12:16] <lizmat> m: my method a() { }; dd &a.signature   # note that the sigature of a method always has an implicit *%_

[12:16] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´:(Mu: *%_)‚ê§¬ª

[12:17] <lizmat> m: my sub a() { }; dd &a.signature   # as opposed to subs

[12:17] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´:()‚ê§¬ª

[12:17] <tbrowder__> i'll keep an eye out

[12:17] <lizmat> should only happen with methods, not subs

[12:17] <lizmat> unless the sub as an explicit *%_ in its signature

[12:17] <lizmat> *has

[12:19] *** jpn joined
[12:19] <tbrowder__> so subs was my prob, unexpected named arg being ignore. so, for my simple mind, what is the solution?

[12:19] <lizmat> provide a piece of code that shows the problem, so we can fix it ?

[12:20] <tbrowder__> ok, will do, thanks

[12:20] <lizmat> specifically an --ll-exception stack trace

[12:34] <tbrowder__> ah, my bad, it was a method. that's been around a while. i remember it haunting me a few years back.

[12:35] <lizmat> *phew*  :-)

[12:36] <lizmat> the only way to disallow unexpected nameds in a method is to do something like:   die "unexpected nameds: %_.keys()" if %_;

[12:36] <tbrowder__> so in a method i think you got me to check that % to see if was empty or something. does that sound right?

[12:37] <lizmat> yes :-)   but %_ rather than %   :-)

[12:37] <tbrowder__> cool, thank you!!

[12:37] *** jpn left
[13:02] <Voldenet> if you need this kind of behavior better is to use a subroutine instead

[13:03] <Voldenet> m: class :: { x() { } }.x(:thing);

[13:03] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> class :: { x()‚èè { } }.x(:thing);‚ê§    expecting any of:‚ê§        infix‚ê§    ‚Ä¶¬ª

[13:03] <Voldenet> m: class :: { method x() { } }.x(:thing);

[13:03] <camelia> rakudo-moar 02bc10c21: ( no output )

[13:03] <Voldenet> m: sub x { }; class :: {  }.&x(:thing);

[13:03] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:03] <Voldenet> m: sub x { }; class :: {  }.&x();

[13:03] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:04] <Voldenet> m: class X { method x() { } }; sub x(X $x){}; X.&x();

[13:04] <camelia> rakudo-moar 02bc10c21: ( no output )

[13:05] <Voldenet> m: class X { method x() { } }; sub x(X $x){}; X.&x(:y);

[13:05] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´Unexpected named argument 'y' passed‚ê§  in sub x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:09] <tbrowder__> Voldenet: good point, but my use case is a bit different. It can very likely be designed better, but that's where I am for now.

[13:11] <Voldenet> I wish methods didn't accept arbitrary named arguments

[13:11] <tbrowder__> i try to get design help here when i can, but too often jump in without that life preserver

[13:13] <Voldenet> consider StrictNamedArguments package

[13:13] <tbrowder__> i also, but i think that has to be because of some Rake internal magic that requires it.

[13:13] <tbrowder__> i will do that.

[13:14] <Voldenet> it's runtime exception, but better than nothing

[13:14] *** tadzik left
[13:14] *** tadzik joined
[13:24] <tbrowder__> wow, looks pretty slick. so, if i understand correctly, all i have to do use yr pkg and in my class add trait "is strict" to all my added methods?

[13:25] <lizmat> It's El_Che's package, actually

[13:25] <lizmat> but the approach comes at a price, an extra layer of indirection  :-(

[13:26] <lizmat> the proper approach would be to *not* install the slurpy *%_ in the signature of the method

[13:27] <lizmat> tried that years ago, and it would fail somewhere deep in the bowels, because the core assumes there's a *%_ in the signature of each method

[13:27] <lizmat> maybe I should revisit that approach  :-)

[13:27] <lizmat> or someone else should  :-)

[13:27] <tbrowder__> oops, a tip of the hat to nxadm aka El_Che

[13:31] <tbrowder__> lizmat: that would surely ease signature documentation! i get lost in that cave

[13:31] <tbrowder__> and i

[13:33] <tbrowder__> and in enums. although i got practical enums tamed a little more in my update to the Date::Event pkg

[13:34] *** jpn joined
[13:39] *** jpn left
[13:41] *** epony left
[13:55] *** itaipu left
[13:56] *** epony joined
[13:59] <discord-raku-bot> <librasteve> Voldenet: I was interested in your point about named args and looked up the rationale for this from the design docs...

[13:59] <discord-raku-bot> <librasteve>  =head1 Interface Consistency  By default, all methods and submethods that do not declare an explicit C<*%> parameter will get an implicit C<*%_> parameter declared for them whether they like it or not.  In other words, all methods allow unexpected named arguments, so that C<nextsame> semantics work consistently.  If you mark a class "C<is hidden>", it hides the current class from "C<nextsame>" semantics, and

[13:59] <discord-raku-bot> incidentally suppresses the autogeneration of C<*%_> parameters.  Methods on hidden classes may still be called as C<$obj.NameOfHiddenClass::yourmethod>.  A similar effect can be achieved from the derived class by saying C<hides Base> instead of C<is Base>. 

[14:00] <discord-raku-bot> <librasteve> https://github.com/Raku/old-design-docs/blob/master/S12-objects.pod L:2264

[14:02] <discord-raku-bot> <librasteve> anyway it seems that the consistency of nextsame is to blame (I guess to chain args through) ... this kinda makes sense to me as a design trade off (and has ways to turn off the behaviour such as 'is hidden' which I never came across before). so you may not like this particular design choice ... but it wasn't just arbitrary

[14:02] <Voldenet> Huh

[14:02] <Voldenet> m: class :: {  }.&x(:thing);

[14:02] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    x used at line 1‚ê§‚ê§¬ª

[14:03] <Voldenet> m: class :: { method x() { } }.x(:thing);

[14:03] <camelia> rakudo-moar 02bc10c21: ( no output )

[14:03] <Voldenet> m: class :: is hidden { method x() { } }.x(:thing);

[14:03] <camelia> rakudo-moar 02bc10c21: OUTPUT: ¬´Unexpected named argument 'thing' passed‚ê§  in method x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:03] <Voldenet> That is useful to know

[14:03] <discord-raku-bot> <librasteve> yeah I was surprised that 'is hidden' and 'hides' made it to the implementaiton (and the docs too!)

[14:10] <lizmat> looks like "is hidden" is not really documented :-(

[14:29] *** jpn joined
[14:34] *** jpn left
[14:38] *** jgaz joined
[14:50] *** jpn joined
[14:59] *** _________ joined
[15:09] <discord-raku-bot> <librasteve> well its documented a bit  https://docs.raku.org/routine/hides  (but not searchable) tbh this is kind of a master class feature

[15:12] <lizmat> in any case, the different method signatures appear to be a side-effect

[15:13] <discord-raku-bot> <librasteve> of the despatch semantics?

[15:14] *** Sgeo joined
[15:32] <Voldenet> Implicit *%_ is the implementation detail of nextsame, when you throw in "hidden/hides" to the mix it becomes weird

[15:32] <Voldenet> m: class A is hidden { method x(:$p) { say $p } }; class B is A { method x() { say "foo"; nextsame } }.x(:p);

[15:32] <camelia> rakudo-moar ccbe370ad: OUTPUT: ¬´foo‚ê§¬ª

[15:32] <Voldenet> m: class A { method x(:$p) { say $p } }; class B hides A { method x() { say "foo"; nextsame } }.x(:p);

[15:32] <camelia> rakudo-moar ccbe370ad: OUTPUT: ¬´foo‚ê§¬ª

[15:32] <Voldenet> m: class A { method x(:$p) { say $p } }; class B is A { method x() { say "foo"; nextsame } }.x(:p);

[15:32] <camelia> rakudo-moar ccbe370ad: OUTPUT: ¬´foo‚ê§True‚ê§¬ª

[15:35] <Voldenet> oh, and

[15:35] <Voldenet> m: class A { method x(:$p) { say $p } }; class B is A is hidden { method x() { say "foo"; nextsame } }.x(:p);

[15:35] <camelia> rakudo-moar ccbe370ad: OUTPUT: ¬´Unexpected named argument 'p' passed‚ê§  in method x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:39] *** derpydoo joined
[16:15] <discord-raku-bot> <librasteve> weird? yes! ... to be fair it does what is says on the tin (although I would be a bit upset to see class B is A is hidden in production code!) ... I can imagine some use cases ... for example if you are refactoring together some "grandparent" classes from which you would like to inherit, but many of the method names conflict (or are externally provided or you cannot guarantee no conflict down the line) so you

[16:15] <discord-raku-bot> want to mask them 100% ... but you want to use normal parent-child nextsame semantics in your stuff ... bit of a strech I know

[16:19] *** vlad joined
[16:59] *** jpn left
[17:30] <lizmat> another disadvantage is that "is hidden" affects *all* methods in the class

[17:31] <lizmat> which may be too coarse-grained for you

[18:00] *** dakkar left
[18:37] *** epony left
[18:46] <SmokeMachine> just for curiosity, I've used the ChatGPT to generate a new Pod6 for may Configuration module based on the original one, and I think that did it very good: https://github.com/FCO/Configuration

[18:50] <lizmat> SmokeMachine: the boilerplate: use Configuration::Node;   and    does Configuration::Node  

[18:51] <lizmat> could also be handled by the EXPORT, by mixing in the Connfiguration::Node role into the given class

[18:52] <lizmat> the mixin would still be done at compile time

[18:52] <SmokeMachine> but the clas does not necessarily need to does that role

[18:53] <lizmat> "To define your application's configuration structure, create a Raku class that does the Configuration::Node role. This class will specify the fields and default values for your configuration."

[18:53] <SmokeMachine> I'm still deciding if it makes sense to change that...

[18:53] <lizmat> appears to say otherwise ?

[18:53] <SmokeMachine> Thanks, I'll change that

[18:55] <SmokeMachine> It seems I was wrong... and the root class needs to be a Node... I think I'll follow your suggestion...

[19:08] <discord-raku-bot> <antononcube> @SmokeMachine Did you use ChatGPT via Raku?

[19:08] <SmokeMachine> no... :(

[19:09] <SmokeMachine> (but I was writing a module to play with with the assistent api at some point...)

[19:10] <discord-raku-bot> <antononcube> The OpenAI's Assistant functionalities seem to "unfinished" at the moment. Same with their LLM functions.

[19:10] <discord-raku-bot> <antononcube> Granted, they honestly say those are in Beta-stage.

[19:12] <discord-raku-bot> <antononcube> As for making Raku configurations using LLMs -- that can be done either via Raku LLM-functions or with a Question Answers System (QAS).

[19:13] <discord-raku-bot> <antononcube> Well, QAS, might be too involved. But definitely LLM examples based generation should applicable,

[19:23] <SmokeMachine> When I was doing that my only intention was to play with that API...

[19:24] <discord-raku-bot> <antononcube> I understand. I tried out the assistant framework for work project using their Python package.

[19:25] <discord-raku-bot> <antononcube> It is does not always work. Or, more precisely, it does not adhere to expectations. (Not just mine, also implied from the documentation.)

[19:50] <SmokeMachine> lizmat: is it better now? https://github.com/FCO/Configuration

[19:53] <lizmat> much better, except the first example in the README still uses the old boilerplate ?

[19:54] <SmokeMachine> yes, but it explains you can avoid adding the role...

[19:54] <SmokeMachine> with the 2nd example

[19:55] <SmokeMachine> make sense?

[19:58] <lizmat> why would you need to add the role "manually" ever ?

[19:58] <discord-raku-bot> <antononcube> @SmokeMachine I think you should spell out a few use cases in the "Configuration" README.

[19:58] <lizmat> that feels like an exception to me

[19:59] <SmokeMachine> if you are going to have more than one layer you may need to `use` that... for example: https://github.com/FCO/Configuration/blob/main/examples/test1/Test1Config.rakumod

[20:01] <lizmat> I'm not sure I follow

[20:01] <SmokeMachine> antononcube: I think that's a great idea... but I confess I'm failing to think into some examples

[20:01] <SmokeMachine> lizmat: I think you are right... (again)

[20:03] <lizmat> ak&

[20:05] *** vlad left
[20:07] <SmokeMachine> antononcube: do you have any idea?

[20:22] <discord-raku-bot> <antononcube> @SmokeMachine I was thinking configurations of LLMs.

[20:23] <discord-raku-bot> <antononcube> @SmokeMachine See the LLM configurations here: https://raku.land/zef:antononcube/LLM::Functions#configurations

[20:33] <discord-raku-bot> <antononcube> @SmokeMachine But I might be misunderstanding what "Configuration" is about. Is it about setting up attributes in data classes / objects? Why not just use hash maps?

[20:39] <SmokeMachine> antononcube: because Configuration creates builders that can type check your configuration while you are writing it and returns to your program an immutable (if you defined your config class that way). And it also can return to your program a Supply that emits new configuration objects every time the configuration changes

[20:40] *** jpn joined
[20:41] <SmokeMachine> it makes it impossible to someone have invisible typos on configuration files and also makes it programable, so, you can for example have loops to define many attributes...

[20:46] <SmokeMachine> antononcube: for example, here we have an example of a program using cro and Configuration to configure host and port for the cro server. if that's running and the configuration file changes, it automaticaly restart the cro server with the new port: https://github.com/FCO/Configuration/tree/main/examples/cro

[20:48] <SmokeMachine> make sense?

[21:05] *** jpn left
[21:10] *** eseyman left
[21:15] *** eseyman joined
[21:39] *** discord-raku-bot left
[21:40] *** discord-raku-bot joined
[21:50] <discord-raku-bot> <antononcube> @SmokeMachine I will study the example tonight.

[21:53] *** dano left
[22:01] *** itaipu joined
[22:11] *** dano joined
[22:23] *** jgaz left
[22:41] <SmokeMachine> antononcube: please, let me know your thoughts/suggestions

[23:12] *** epony joined
[23:24] *** sena_kun left
[23:36] *** derpydoo left
