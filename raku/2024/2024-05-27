[00:50] *** coleman left
[00:50] *** coleman joined
[00:54] *** coleman left
[00:54] *** coleman joined
[00:54] *** coleman left
[00:58] *** coleman joined
[01:06] *** coleman left
[01:07] *** coleman joined
[01:12] *** kylese left
[01:12] *** kylese joined
[01:16] *** jpn left
[02:15] *** kylese left
[02:15] *** kylese joined
[03:25] *** itaipu left
[04:15] *** thaewrap1 left
[04:33] *** thaewrapt joined
[04:38] *** thaewrapt left
[04:46] *** bdju left
[04:48] *** bdju joined
[04:49] *** thaewrapt joined
[04:56] *** thaewrapt left
[05:03] *** bdju left
[05:03] *** bdju joined
[05:10] *** thaewrapt joined
[05:15] *** thaewrapt left
[05:26] *** thaewrapt joined
[05:45] *** guifa left
[05:47] *** thaewrapt left
[06:00] *** thaewrapt joined
[06:19] *** thaewrapt left
[06:32] *** thaewrapt joined
[06:37] *** thaewrapt left
[06:49] *** thaewrapt joined
[07:00] *** thaewrapt left
[07:12] *** thaewrapt joined
[07:17] *** thaewrapt left
[07:21] <ab5tract> Ah, for some reason I thought you were generating both signatures

[07:21] <ab5tract> just at different times

[07:29] *** thaewrapt joined
[07:30] <ab5tract> regardless:

[07:30] <ab5tract> m: sub foo(Int $a, Str $b is raw) { }; my $ast = Q:qq| {&foo.signature.raku} |.AST; say $ast.statements[0].expression.signature.parameters

[07:30] <camelia> rakudo-moar cd74aa79a: OUTPUT: «(RakuAST::Parameter.new(␤  type   => RakuAST::Type::Simple.new(␤    RakuAST::Name.from-identifier("Int")␤  ),␤  target => RakuAST::ParameterTarget::Var.new(␤    name => "\$a"␤  )␤) RakuAST::Parameter.new(␤  type   => RakuAST::Type::Sim…»

[07:32] <ab5tract> note that .AST is currently considered "unofficial", but I personally can't imagine that we would ship 6.e without some way of converting expressions to AST

[07:34] *** thaewrapt left
[07:45] *** sena_kun joined
[07:45] *** thaewrapt joined
[07:51] *** thaewrapt left
[07:52] *** wayland76 joined
[07:53] <wayland76> ab5tract: thanks!  

[08:01] *** thaewrapt joined
[08:06] *** thaewrapt left
[08:17] *** thaewrapt joined
[08:24] *** thaewrapt left
[08:27] *** jpn joined
[08:36] *** thaewrapt joined
[08:46] *** thaewrapt left
[08:55] *** soverysour joined
[08:55] *** soverysour left
[08:55] *** soverysour joined
[08:57] *** thaewrapt joined
[08:59] *** soverysour left
[09:04] *** thaewrapt left
[09:14] *** thaewrapt joined
[09:20] *** jpn left
[09:21] *** thaewrapt left
[09:22] *** thaewrapt joined
[09:23] *** jpn joined
[09:29] *** sena_kun left
[10:02] *** quotable6 left
[10:02] *** committable6 left
[10:02] *** releasable6__ left
[10:02] *** greppable6 left
[10:02] *** evalable6 left
[10:02] *** bisectable6 left
[10:02] *** notable6 left
[10:02] *** coverable6 left
[10:02] *** tellable6 left
[10:02] *** shareable6 left
[10:02] *** benchable6 left
[10:02] *** linkable6 left
[10:02] *** nativecallable6 left
[10:02] *** bloatable6 left
[10:02] *** unicodable6 left
[10:02] *** sourceable6 left
[10:07] *** bisectable6 joined
[10:07] *** unicodable6 joined
[10:07] *** nativecallable6 joined
[10:07] *** committable6 joined
[10:07] *** coverable6 joined
[10:08] *** sourceable6 joined
[10:08] *** releasable6 joined
[10:08] *** bloatable6 joined
[10:08] *** tellable6 joined
[10:08] *** evalable6 joined
[10:09] *** linkable6 joined
[10:09] *** shareable6 joined
[10:09] *** quotable6 joined
[10:09] *** greppable6 joined
[10:09] *** benchable6 joined
[10:10] *** notable6 joined
[10:41] *** xinming joined
[10:41] *** wayland76 left
[10:44] *** wayland76 joined
[10:48] *** xinming left
[10:56] *** xinming joined
[11:16] <wayland76> m: sub foo(Int $a, Str $b is raw) { }; my $ast = Q:qq| {&foo.signature.raku} |.AST; say $ast.statements[0].expression.signature.return

[11:16] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[11:16] <wayland76> m: sub foo(Int $a, Str $b is raw) { }; my $ast = Q:qq| {&foo.signature.raku} |.AST; say $ast.statements[0].expression.signature.returns

[11:16] <camelia> rakudo-moar cd74aa79a: OUTPUT: «(Node)␤»

[11:17] <wayland76> Interesting!  How do I get a programmatically-created signature to have a "returns" value like that one?  

[11:17] <wayland76> (the second one -- my first run had a bug)

[11:30] *** jpn left
[11:46] <ab5tract> the constructor RakuAST::Signature.new takes a list of RakuAST::Parameter objects  (:$parameters) as well as a RakuAST::Node object (:$returns) 

[11:47] <ab5tract> since RakuAST::Node is essentially the super-class of (almost) all RakuAST classes, that gives you a lot of leeway for what to return

[11:47] *** itaipu joined
[11:49] <ab5tract> m: use experimental :rakuast; sub foo(Int $a, Str $b is raw) { }; my $ast = Q:qq| {&foo.signature.raku} |.AST; my $ret-ast = Q| Int |.AST; dd RakuAST::Signature.new(parameters => $ast.statements[0].expression.signature.parameters, returns => $ret-ast)

[11:49] <camelia> rakudo-moar cd74aa79a: OUTPUT: «Int $a, Str $b is raw --> Int␤»

[11:56] *** jpn joined
[11:59] <xinming> m: my constant role-a = role :: { method t () { "1".say; } }; role :: { "2".say; }; my constant T = anon class T { method t () { "t".say; } } but role-a; T.new.t;

[11:59] <camelia> rakudo-moar cd74aa79a: OUTPUT: «1␤»

[11:59] <xinming> In this exampe, is it possible to make a list of of roles dynamically applies to the same class, and compose different "classes" ?

[12:00] <xinming> something like     anon class T { method t () { "t".say } } but  @role-list-enabled;

[12:01] *** jpn left
[12:03] *** guifa joined
[12:26] *** bdju left
[12:28] *** bdju joined
[12:31] *** wayland joined
[12:32] *** wayland76 left
[13:03] *** jpn joined
[13:42] *** soverysour joined
[13:42] *** soverysour left
[13:42] *** soverysour joined
[14:15] *** soverysour left
[15:00] *** bdju left
[15:01] *** bdju joined
[15:28] *** soverysour joined
[15:36] *** xinming left
[15:38] *** xinming joined
[16:03] *** jpn left
[16:16] *** jpn joined
[16:31] *** soverysour left
[16:31] *** soverysour joined
[16:46] *** Xliff joined
[16:46] <Xliff> \o

[16:46] <Xliff> I'm trying to pick up all of the caps in a camel cased var.

[16:46] <Xliff> I have this but it doesn't work.

[16:46] <Xliff> m: say "MyWeirdlyCamelCasedVar" ~~ / (\w).+?[ <[a..z]>(<[A..Z]>) .+?]+ /

[16:46] <camelia> rakudo-moar cd74aa79a: OUTPUT: «｢MyWeirdlyCa｣␤ 0 => ｢M｣␤ 1 => ｢C｣␤»

[16:49] <Xliff> m: say "MyWeirdlyCamelCasedVar" ~~ / (\w).+?[ <[a..z]>+(<[A..Z]>) ]+ /

[16:49] <camelia> rakudo-moar cd74aa79a: OUTPUT: «｢MyWeirdlyCamelCasedV｣␤ 0 => ｢M｣␤ 1 => ｢C｣␤ 1 => ｢C｣␤ 1 => ｢V｣␤»

[16:50] <Xliff> Aha!

[17:03] *** guifa left
[17:08] <ab5tract> m: say "MyWeirdlyCamelCasedVar" ~~ / [(<:Lu>)<:Ll>+]+ /

[17:08] <camelia> rakudo-moar cd74aa79a: OUTPUT: «｢MyWeirdlyCamelCasedVar｣␤ 0 => ｢M｣␤ 0 => ｢W｣␤ 0 => ｢C｣␤ 0 => ｢C｣␤ 0 => ｢V｣␤»

[17:09] *** guifa joined
[17:09] <ab5tract> Xliff: your last example seems to be missing the 'W'

[17:21] *** jpn left
[17:28] *** guifa left
[17:29] <Xliff> ab5tract: Thanks, I fixed that in the greater project.

[17:30] <ab5tract> My pleasure

[17:35] *** jpn joined
[17:40] *** jpn left
[17:50] *** sena_kun joined
[18:00] *** soverysour left
[18:01] *** guifa joined
[18:11] *** coleman left
[18:12] *** coleman joined
[18:18] *** xinming left
[18:18] *** samebchase joined
[18:21] *** guifa left
[18:26] *** xinming joined
[18:28] *** guifa joined
[18:32] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/05/27/2024-22-detect-incoming/

[18:54] <discord-raku-bot> <antononcube> .seen bduggan

[18:54] <tellable6> antononcube, I saw bduggan 2023-03-14T18:02:06Z in #raku-dev: <bduggan> Okay, cool -- good to know, and thanks for the comments

[18:56] *** jpn joined
[19:26] *** guifa left
[19:39] *** guifa joined
[19:39] *** jpn left
[19:42] *** jpn joined
[20:00] <tbrowder> lizmat++, excellent weekly, as usual!

[20:01] <tbrowder> thanks so much!

[20:01] <lizmat> yw  :-)

[20:19] *** jpn left
[20:55] *** guifa left
[21:28] <tbrowder> i just had a weird experience (maybe self-inflicted). my module tests fine locally, then, on github, zef install finds a pod error not found locally!

[21:29] <lizmat> strange

[21:29] <tbrowder> it could be a precompile issue. is there a way get raku or zef to recompile a lib path?

[21:30] <lizmat> rm -rf ~/.raku/precomp

[21:31] <tbrowder> yes, but i was hoping for a more friendly way for noobs

[21:31] <lizmat> well... ideally it shouldn't be needed

[21:31] <[Coke]> n00bs don't need it

[21:31] <tbrowder> true

[21:32] <[Coke]> Why do YOU need it?

[21:32] <tbrowder> laziness

[21:33] <tbrowder> and avoid possibility of ff nuking stuff

[21:39] <gfldex> .seen raiph

[21:39] <tellable6> gfldex, I saw raiph 2024-05-14T09:12:22Z in #raku: <raiph> m: say $*RAKU.compiler.version

[21:43] *** itaipu left
[21:49] *** jpn joined
[21:55] *** jpn left
[22:01] *** itaipu joined
[22:03] *** kaskal joined
[22:04] *** kaskal- left
[22:13] <tbrowder> ok, i narrowed prob a bit. using zef and mi6 testing locally in the module repo work fine.

[22:14] <tbrowder> however, using "zef install . " fails and it finds the pod error.

[22:14] <tbrowder> so, how can that be fixed?

[22:15] <tbrowder> the remote testing was done with raku v2024.02 and v2024.04

[22:18] <[Coke]> one of your own pod files?

[22:18] <[Coke]> you can add a test that verifies your pod?

[22:19] <[Coke]> https://github.com/Raku/doc/blob/main/t/02-pod-valid.rakutest

[22:19] <tbrowder> i can probably use Pod::Load for one, but what is zef doing different on install vs test locally?

[22:20] <tbrowder> i'm sure i'm not the only person making subtle pod errors.

[22:23] *** guifa joined
[22:25] <tbrowder> thnx for the link, maybe mi6 and zef could add that test.

[22:27] <ab5tract> anyone know if there is a path in Windows that is not writable by the default user and, if so, what it is?

[22:33] *** xkr47 left
[22:33] *** xkr47 joined
[22:45] <ab5tract> I guess 'C:\Windows\system32' should work alright

[22:46] *** jpn joined
[22:51] *** jpn left
[23:06] *** sena_kun left
[23:16] *** jpn joined
[23:19] <ab5tract> Never mind, found a better approach to generating failures

[23:20] *** jpn left
