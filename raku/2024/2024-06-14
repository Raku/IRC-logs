[01:43] *** MasterDuke joined
[01:51] *** hulk joined
[01:52] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[03:41] *** jpn joined
[03:45] *** jpn left
[04:51] *** beanbrain joined
[05:30] *** Sgeo left
[05:36] *** jpn joined
[05:40] *** jpn left
[06:06] *** cm left
[06:07] *** cm joined
[06:23] *** cm left
[07:04] *** sena_kun joined
[07:36] *** wayland76 joined
[07:58] *** jpn joined
[08:01] *** oodani left
[08:02] *** oodani joined
[08:18] *** sena_kun left
[08:20] *** sena_kun joined
[08:21] *** cm joined
[09:29] <discord-raku-bot> <librasteve> o/

[09:32] <discord-raku-bot> <librasteve> saw some comments on community modules ... personally I think that "domain specific" modules such as Statistics::LinearRegression should not be adopted as community modules and rather, if the original author is unresponsive, then if the licence permits anyone is free to fork, change auth and bump the version in the expectation that they would follow the usual practices of semantic versioning and deprecation and

[09:32] <discord-raku-bot> so on eg.  if they want to change the API

[09:36] <discord-raku-bot> <librasteve> that keeps the community's efforts, as far as community modules goes, focused on providing a path forward for general and common modules such as Text::Wrap which have been abandoned ... and here we all should feel empowered to submit and (with permission and due process) merge PRs to keep these modules from breaking

[09:52] *** thowe left
[09:53] *** thowe joined
[09:59] *** jpn left
[10:08] *** jpn joined
[10:46] *** avuserow_ left
[10:47] *** avuserow_ joined
[11:41] <discord-raku-bot> <antononcube> I agree that ‚ÄúStatistics::LinearRegression‚Äù is somewhat specialized. But it is: 1) simple, 2) fundamental for doing statistics, and 3) its code ‚Äî or very similar ‚Äî can be reliably generated with LLMs.

[11:43] <discord-raku-bot> <antononcube> ‚ÄúFundamental for doing statistics‚Äù means that if one, say, does benchmarking of routine performance having linear regression can be really handy.

[11:45] <discord-raku-bot> <antononcube> Now, I do not mind forking and making that package better. (With higher API version.) As I mentioned, I would rather have ‚ÄúMath::Fitting‚Äù which includes the functionalities of ‚ÄúStatistics::LinearRegression‚Äù package.

[11:51] <[Coke]> tbrowder: I don't see how having him publish a version that you are immediately going to obsolete helps.

[11:52] <[Coke]> My take on community owned is similar. I don't think community means "every abandoned module that one person wants to use."

[11:53] <[Coke]> I also didn't think taking over graphql was the plan, I thought you were talking about one of the Text::Wraps.

[12:00] *** thaewrapt left
[12:23] *** jpn left
[12:29] <discord-raku-bot> <antononcube> @Coke and @librasteve I was not aware of the community modules re-adopting rules or principles. I do agree that not every abandoned module should be made a community one.

[12:32] <[Coke]> I am not sure there is a documented plan. I think tbrowder would now better

[12:37] <discord-raku-bot> <antononcube> In case this statement "every abandoned module that one person wants to use."  is related to my ask about "Statistics::LinearRegression" to be a community module. If I am the only one who wants to use that module in the Raku community that is really telling about the community and the ecosystem. (Honestly, no judgment here beyond that "tell.")

[12:38] *** xinming left
[12:38] <discord-raku-bot> <antononcube> I also would like to mention that many people in Data Science would not look at Raku twice if Raku does not have at least good linear model fitting routines. (Meaning, it does not matter how much Steve and I claim or prove that Raku is good for exploratory data analysis.

[12:40] *** xinming joined
[12:57] <[Coke]> I think we want to support both "common" modules and "strategic" ones, but whether that support is directly under the RCM umbrella or not could be discussed - but I'd hope strategic distros already had an evangelist/contributor, yes.

[13:11] <discord-raku-bot> <holmdunc> The Emacs Orphanage github org has a more fitting name for that kind of repo transfer. https://github.com/emacsorphanage

[13:14] <tbrowder> hm, maybe antononcube could start another repo for ppl interested in his specialty and could give appropriate creds to other interested raku ppl.

[13:14] <tbrowder> i see that kind of grp all over github

[13:14] <discord-raku-bot> <antononcube> @Coke "Strategic" is a good characterization. I was thinking that a recent addition, "Algorithm::Diff" is kind of "fundamental" in the minds of many. "Strategic" fits better that module.

[13:15] <discord-raku-bot> <antononcube> @tbrowder Already done. üôÇ (With MVP-0.) : https://github.com/antononcube/Raku-Math-Fitting

[13:16] *** thaewrapt joined
[13:17] <tbrowder> no, i mean top level: github.com/raku-math-fitting

[13:17] *** jpn joined
[13:17] <tbrowder> ^^^

[13:18] <tbrowder> github/Raku-Math-Fitting

[13:18] <discord-raku-bot> <librasteve> tbh I don't think that community modules get a lot of love except when something is broken --- imo better to have "core skilled" devs working on core ;-)

[13:24] <discord-raku-bot> <antononcube> I.e. no community love for orphans... (Sigh...)

[13:25] <tbrowder> well, at least the comm modules are there to be adopted, or at least someone can get a PR looked at.

[13:27] <[Coke]> Right, we don't want core devs doing work on modules, but I think we have a bunch of core-adjacent folks who could. (myself included). I don't have them on my priority list, though. Be nice if we had someone to keep an eye on community modules and ping folks here when dev cycles are needed to fix something

[13:27] <[Coke]> I volunteer tbrowder. :)

[13:31] <discord-raku-bot> <antononcube> @Coke I support your right to volunteer others.

[13:32] <tbrowder> well, i hope my upcoming linter can help. i plan to use it on comm modules and at least submit issues for a start.

[13:47] *** MasterDuke left
[14:04] *** Sgeo joined
[14:11] <[Coke]> in github, I have https://github.com/issues - How can I say "show me all tickets in repositories owned by Raku or raku-community-modules ?

[14:12] <[Coke]> org!

[14:13] <[Coke]> here we go: https://github.com/issues?q=is%3Aopen+is%3Aissue+org%3Araku-community-modules

[14:14] <[Coke]> We should have a common set of labels for tickets to make it easier for devs to prioritize

[14:15] <[Coke]> (and colors for those labels)

[14:32] <discord-raku-bot> <librasteve> nice! this is a great set of introductory issues

[14:35] *** sena_kun left
[14:40] *** sena_kun joined
[14:51] <Geth> ¬¶ problem-solving: coke self-assigned The raku-community-modules organization and its problems.  https://github.com/Raku/problem-solving/issues/210

[15:00] *** sena_kun left
[15:00] *** sena_kun joined
[15:08] <discord-raku-bot> <antononcube> @Coke Great! (About community modules issues list.)

[15:08] <discord-raku-bot> <antononcube> (My favority communitu module issue is on top. For now.)

[15:10] <ingy> I have a problem with a language I'm writing (ys) where I can run a program with either `ys foo` or `./foo` if foo is +x and has a shebang line...

[15:12] <ingy> I have a problem where foo wants to print help when it gets `-h`, but ys is getting the -h and printing its help instead.

[15:12] <ingy> `./foo -- -h` works but wondering WWRD?

[15:15] *** thaewrapt left
[15:17] *** thaewrapt joined
[15:19] <ingy> interesting the behavior of `raku foo -h` and `raku -h foo`

[15:19] <ingy> #!/usr/bin/env raku

[15:19] <ingy> say @*ARGS;

[15:19] <evalable6> ingy, rakudo-moar 46511d59c: OUTPUT: ¬´[]‚ê§¬ª

[15:48] <discord-raku-bot> <librasteve> ingy: are you using raku sub MAIN()? maybe you can share a gist with a code example?

[15:48] <tonyo> raku is picky about the arg placement ingy

[15:49] <discord-raku-bot> <librasteve> oh, yes I forgot you need the -h before the foo I guess like ys -h foo

[15:52] <ugexe> probably needs `my %*SUB-MAIN-OPTS ; :named-anywhere`

[15:52] <ugexe> my %*SUB-MAIN-OPTS = :named-anywhere;

[15:52] <discord-raku-bot> <librasteve> .oO

[15:52] <ugexe> https://docs.raku.org/syntax/%25%2ASUB-MAIN-OPTS

[16:03] <ingy> I'm not implementing in raku. raku is just a language made my people I can what with :)

[16:06] <ugexe> ah

[16:07] <discord-raku-bot> <_grenzo> So, I guess ys is being passed a list of arguments starting with "foo" and followed by "-h"?

[16:07] <ugexe> raku actually used to have a similar problem for all installed scripts :)

[16:07] <ugexe> https://github.com/rakudo/rakudo/commit/73888f45ad2e09f791e45f8e54f8c59628617885

[16:08] <ugexe> i don't think that fix is what you'd want to do tho :P

[16:13] <discord-raku-bot> <holmdunc> so foo is a filesystem path, and the program ys basically needs to decide that it doesn't accept flags after its positional argument?

[16:26] *** sena_kun left
[16:27] *** sena_kun joined
[16:32] *** jpn left
[16:36] *** jpn joined
[17:04] *** melezhik joined
[17:04] <melezhik> o/

[17:05] *** soverysour joined
[17:09] *** melezhik left
[17:15] *** soverysour left
[17:15] *** soverysour joined
[17:15] *** soverysour left
[17:15] *** soverysour joined
[18:09] <ingy> ugexe: I think I need to special case when the first arg looks like a file path, and then pass the following args unparsed to it

[18:10] *** soverysour left
[18:10] <ingy> holmdunc: pretty much what you said

[18:10] <ingy> I currently use an options parser right away

[18:11] <ingy> but (imho) raku should gripe on `raku -h foo`

[18:12] <ingy> checking something

[18:15] *** Altai-man joined
[18:18] *** sena_kun left
[18:35] *** jpn left
[18:50] <discord-raku-bot> <_grenzo> @ingy: is it possible you'd do something like ys -I ../lib foo.ys -h

[18:51] <discord-raku-bot> <_grenzo> ?

[19:42] *** beanbrain left
[19:50] <ingy> _grenzo: yeah good point‚Ä¶

[19:51] <ingy> I just added check if the first arg does not start with `-` but that's not perfect

[19:52] <ingy> looking at my current opts

[19:54] <ingy> https://gist.github.com/ingydotnet/92574ed7f6251892db7ac044f271f367

[19:56] <ingy> I don't have -I *yet* (just YSPATH env var)

[19:57] <ingy> maybe at the point I either require `ys -I ../lib foo.ys -- -h` or `ys -I ../lib --run foo.ys -h`

[19:57] <ingy> the former would work now

[19:59] <ingy> and I just realized that `-` is a valid file name for stdin...

[20:00] <ingy> so far the arg parsing library is great (except for today's bug) so I'd like to hold onto it

[20:01] <discord-raku-bot> <_grenzo> @ingy is ys taking yaml and generating code from it (perl, raku, python, rust...)?

[20:01] *** beanbrain joined
[20:01] *** beanbrain left
[20:01] *** beanbrain joined
[20:02] <ingy> no, it's only generating clojure code and then evaluating it (but no jvm, all binary)

[20:02] <discord-raku-bot> <_grenzo> oh, wait, no I see

[20:03] <ingy> the language bindings (raku etc) pass ys to libys and get back json of compile/evaluation and decode to native

[20:03] <discord-raku-bot> <_grenzo> It loads and parses yaml with bindings to those languages?

[20:04] <discord-raku-bot> <_grenzo> you're seconds ahead of me üôÇ

[20:04] <ingy> it's likely the best raku yaml loader

[20:04] <ingy> but has no dumper

[20:05] <ingy> but you can also add logic to yaml files, including pulling in other files etc

[20:05] <ingy> if the yaml/ys file starts with !yamlscript/v0

[20:06] <ingy> if not, then just loaded like any other yaml

[20:06] <discord-raku-bot> <_grenzo> hmm manipulating docker-compose files and openAPI definitions

[20:06] <discord-raku-bot> <_grenzo> does it work both ways?

[20:06] <ingy> ?

[20:06] <discord-raku-bot> <_grenzo> loading and outputting

[20:07] <ingy> I don't follow

[20:07] <ingy> the results of a load are same scope as json

[20:08] <discord-raku-bot> <_grenzo> You can take yaml and turn it into json and transform that into perl/raku datastructures. Is it as easy to take json and turn it into yaml?

[20:09] <ingy> $ echo '["foo", 42]' | ys -Y -

[20:09] <ingy> - foo

[20:09] <ingy> - 42

[20:09] *** beanbrain left
[20:09] <ingy> pandon my paste

[20:10] <discord-raku-bot> <_grenzo> no problem. I should just probably read the whole readme file

[20:10] <ingy> I mean that's because all json is valid yaml

[20:12] <ingy> the ys CLI used as a loader, outputs json or yaml (or edn) but using it from raku is only gonna turn json, yaml or ys files into whatever the raku json module would return

[20:13] <ingy> TPRC talks on YS (including for raku) in 12 days...

[20:38] *** sena_kun joined
[20:40] *** Altai-man left
[20:45] <discord-raku-bot> <antononcube> I am not sure is the "Math::Matrix" package abandoned or not. But its functionalities are fundamental in so many ways. I consider forking it just to make sure it can be built on different architectures, passes correctness tests, and has some "low hanging fruit" features implemented. (E.g. QR decomposition, system of linear equations solving, inversion, etc.)

[20:46] <discord-raku-bot> <antononcube> I do not want my brand new "Math::Fitting" to depend on such an old package!!

[20:49] <ingy> Maybe dep on it until you get burned and not helped by the author?

[20:50] <discord-raku-bot> <antononcube> Hmm... "Chemistry::Stoichiometry" depends on "Math::Matrix" -- I think I had only minor propblems with easy work-around.

[20:51] <ingy> I've been spending time in the clojure community for past year, and old libraries are not worried about. They seem to take library API back compat as seriously as they (or perl) takes language back compat.

[20:52] <ingy> It feels weird for me to trust that mindset though.

[20:53] <discord-raku-bot> <antononcube> That reminds me -- "Chemistry::Elements" is definitely abandoned, and "Chemistry::Stoichiometry" completely replaces it functionality-wise. Many / all of the GitHub issues of the former are implemented in the latter.

[20:54] <ingy> I forget, does raku permit/encourage use of same named modules by different authors?

[20:55] <discord-raku-bot> <antononcube> Yes -- I think different author is fine, forking and re-authoring is fine, making a new API version is fine.

[20:56] <ingy> nice

[20:56] <discord-raku-bot> <antononcube> For me, to trust many of the math-packages in Raku would be much easier after I streamline the verification of their tests with Mathematica. (Something, I have started, but I have to finish.)

[20:58] <discord-raku-bot> <antononcube> I strongly suspect defining Gherkin tests and using LLMs might provide great transparency and speed-up of that kind of work.

[20:59] <discord-raku-bot> <antononcube> As for Clojure -- because of Mathematica I have been asked to look into Clojure.

[21:00] <discord-raku-bot> <antononcube> More precisely, because of questions and discussions at Mathematica forums and conferences.

[21:01] <discord-raku-bot> <antononcube> But I know 'too many" LISP descendents, so, I decided to skip Clojure.

[21:02] *** wayland joined
[21:02] *** wayland76 left
[21:05] *** BooK joined
[21:09] *** sftp left
[21:09] *** sftp joined
[22:28] *** beanbrain joined
[22:35] *** sena_kun left
[23:40] *** teatwo left
[23:40] *** teatwo joined
[23:59] *** beanbrain left
