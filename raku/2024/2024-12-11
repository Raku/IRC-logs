[00:00] *** yewscion left
[00:42] <discord-raku-bot> <aruniecrisps> Thank you for the help! I'm currently playing around with the idea of making monad syntax in Raku and so I'm looking at the forgiven repo as a blueprint

[01:01] <guifa> m: enum Foo <a b c>; say Foo.^mro

[01:01] <camelia> rakudo-moar 22a5b0ec3: OUTPUT: ¬´((Foo) (Int) (Cool) (Any) (Mu))‚ê§¬ª

[01:01] <guifa> m: enum Foo <a b c>; say Foo.HOW

[01:01] <camelia> rakudo-moar 22a5b0ec3: OUTPUT: ¬´Perl6::Metamodel::EnumHOW.new‚ê§¬ª

[01:07] *** yewscion joined
[01:10] *** AnaBanana joined
[01:13] *** yewscion left
[01:13] <guifa> hmmm

[01:13] <guifa> I'm trying to add a coerce target for an enum

[01:22] <guifa> given, say

[01:22] <guifa> enum Type <Question Answer Comment>; sub foo (Type() :$type) { ... } 

[01:23] <guifa> How could I enable calling with `foo :type<Question>` ?

[01:24] <discord-raku-bot> <antononcube> Can use where in the sub's definition signature?

[01:25] <guifa> the where clause won't coerce the value

[01:25] <guifa> so COERCE gets called, but by default COERCE works on the value (0, 1, 2) not the identifier 

[01:26] <discord-raku-bot> <antononcube> I see.

[01:29] *** AnaBanana left
[01:29] <guifa> I mean I totally get I can just manually do stuff

[01:30] <guifa> but I'd rather handle it in the signature nicely if possible

[01:30] * guifa is going to try to do an mDNS module

[01:36] <guifa> it seems the problem is that the coerce HOW methods are applied after the trait

[01:45] <guifa> aha got it

[01:47] <guifa> multi sub trait_mod:<is> (::EnumType \enumerable, :$coerceable!) { enumerable.^add_multi_method('COERCE', anon sub COERCE (EnumType \SELF, Str \from) { SELF::.AT-KEY: from }) unless enumerable.HOW.^name eq 'Perl6::Metamodel::EnumHOW'}

[01:48] <discord-raku-bot> <antononcube> üëç

[01:51] <guifa> does mean I kinda want to use lc ones now

[01:52] <discord-raku-bot> <antononcube> Are you the only one who is going to read this code?

[01:54] <discord-raku-bot> <antononcube> üôÇ BTW, since you are record telling me to use kebab-case instead of camelCase, I feel I can justly ask: What's up with snake_case? (In your code.)

[01:54] *** Manifest0 left
[02:12] <guifa> add_multi_method is a Raku HOW core method

[02:12] <guifa> so the idea is I can do Packet.new: :authoritative, :truncated, :want-recursive, :!recursive-available

[02:13] <guifa> or

[02:13] <guifa> :type<foo>

[02:13] <guifa> I added a new multi candidate for the boolean ones

[02:17] <discord-raku-bot> <antononcube> How about trait_mod ?

[02:19] *** kylese left
[02:19] *** kylese joined
[03:15] *** kylese left
[03:15] *** kylese joined
[04:11] *** yewscion joined
[04:15] *** yewscion left
[04:34] *** yewscion joined
[04:44] *** yewscion left
[05:07] <guifa> same

[05:07] <guifa> the end result is you say

[05:07] <guifa> enum Foo is enumerable <a b c>;

[05:07] <guifa> err coerceable

[05:23] *** yewscion joined
[05:27] *** yewscion left
[05:37] <greenfork> [Coke]: I did exactly this :) I thought that maybe there's a better way to write in it repl without jumping between start/end of the line and classify seems great

[05:38] <greenfork> timo: thank you for classify! I looked at it multiple times and it seemed like it doesn't do what I want. There's also categorize that I don't understand despite looking at it multiple times too

[05:39] <greenfork> I think I should make a cheat sheet for simple data transformations like list -> hashmap etc.

[05:41] <greenfork> In other languages there's a seemingly simpler alternative: there's a single "enumerable comprehension" function that specifies the final data structure

[05:44] <greenfork> Ruby: [%w[black tree], %w[yellow tree], %w[blue sky]].each_with_object({}) { |el, acc| acc[el[1]] ||= []; acc[el[1]].push(el[0]) }

[05:44] <greenfork> each_with_object({}) specifies `{}`

[05:49] <greenfork> Elixir (simpler example): for [v, k] <- [~w[black tree], ~w[blue sky]], into: %{}, do: {k, v}

[05:49] <greenfork> into: %{} specified `%{}`

[05:49] <greenfork> I was looking in Raku a similar idea but couldn't find it

[05:50] <greenfork> It is not bad but rather not obvious coming from other languages. A "general" solution seems easier than having to memorize specific functions that allow transitioning between different data structures

[07:57] *** Aedil joined
[08:46] *** dakkar joined
[08:56] *** yewscion joined
[08:59] *** yewscion left
[09:23] *** Sgeo left
[09:27] *** Manifest0 joined
[09:33] *** sena_kun joined
[09:52] *** sena_kun left
[10:34] *** traxex joined
[11:20] <discord-raku-bot> <librasteve> greenfork: I will try to mirror your ruby example in raku:

[11:20] <discord-raku-bot> <librasteve> Ruby: [%w[black tree], %w[yellow tree], %w[blue sky]].each_with_object({}) { |el, acc| acc[el[1]] ||= []; acc[el[1]].push(el[0]) }

[11:21] *** abraxxa-home joined
[11:27] *** yewscion joined
[11:29] *** yewscion left
[11:35] *** yewscion joined
[11:37] <discord-raku-bot> <librasteve> Raku: my %h; [<black tree>, <yellow tree>, <blue sky>].map: { %h{.[1]}.push: .[0] }

[11:39] <discord-raku-bot> <librasteve> this is a slightly different take - since a raku Hash (%h) has a nice .push method that accumulates items as we need

[11:40] *** abraxxa-home left
[11:40] *** yewscion left
[11:40] <discord-raku-bot> <librasteve> I agree that .classify is a bit of a sledgehammer to crack this nut

[11:42] *** yewscion joined
[11:46] *** yewscion left
[12:07] *** zayd left
[12:17] *** zayd joined
[14:38] <Geth> ¬¶ ecosystem/main: 4484f6c967 | (Elizabeth Mattijsen)++ | META.list

[14:38] <Geth> ¬¶ ecosystem/main: Remove Plosurin, looks like abandoned

[14:38] <Geth> ¬¶ ecosystem/main: 

[14:38] <Geth> ¬¶ ecosystem/main: And no reaction from author

[14:38] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/4484f6c967

[14:52] <Geth> ¬¶ ecosystem/main: 995e27e153 | (Elizabeth Mattijsen)++ | META.list

[14:52] <Geth> ¬¶ ecosystem/main: Remove modules by adaptiveoptics

[14:52] <Geth> ¬¶ ecosystem/main: 

[14:52] <Geth> ¬¶ ecosystem/main: They appear abandoned and author doesn't respond

[14:52] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/995e27e153

[14:58] <Geth> ¬¶ ecosystem/main: 7c2d297497 | (Elizabeth Mattijsen)++ | META.list

[14:58] <Geth> ¬¶ ecosystem/main: Remove ajs modules

[14:58] <Geth> ¬¶ ecosystem/main: 

[14:58] <Geth> ¬¶ ecosystem/main: They will be migrated to Raku Community modules

[14:58] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/7c2d297497

[15:07] <discord-raku-bot> <antononcube> @lizmat I wil put in my Raku Advent post draft within 5 hours. I assume that is a few hours before the automatic publishing.

[15:08] <lizmat> antononcube thanks!  that's a relief to hear

[15:08] <discord-raku-bot> <antononcube> The post is 90% written -- I have to make coherent image links. (Always takes longer than expected.)

[15:09] <lizmat> don't I know it  :-)

[15:13] <discord-raku-bot> <antononcube> @lizmat Would be fine if the image are in "dark mode" ?

[15:13] <jdv> antononcube: did you get your dist fixed?

[15:13] <lizmat> antononcube yes

[15:14] <discord-raku-bot> <antononcube> @jdv Hmm.. I think it is just a library variable renaming. I think I did, but I have to experiment with the new version.

[15:17] <jdv> no, its a change in how the repl works

[15:18] <discord-raku-bot> <antononcube> Ok, I have misunderstood then. I can look into this more closely after 6-7 hours.

[15:23] *** Sgeo joined
[15:36] <tadzik> hmm. I know the best time to do this was like last year, but I reckon I should move my stuff to community modules :)

[15:36] <tadzik> (or drop it entirely...)

[15:37] <tadzik> but I think at least some of it is useful

[15:37] <lizmat> tadzik: if you could transfer the repos that you think are worth preserving, I'll make sure they get a nice new release as community moduoe

[15:37] <lizmat> *module

[15:38] * tadzik starts with Acme::Meow

[15:44] *** GreaseMonkey left
[15:44] <Geth> ¬¶ ecosystem/main: 5d177b246c | (Tadeusz So≈õnierz)++ (committed using GitHub Web editor) | META.list

[15:44] <Geth> ¬¶ ecosystem/main: Remove my modules

[15:44] <Geth> ¬¶ ecosystem/main: 

[15:44] <Geth> ¬¶ ecosystem/main: They've been moved to raku-community-modules and/or are obsolete.

[15:44] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/5d177b246c

[15:44] <tadzik> I think I did this right

[15:45] <lizmat> yeah, looks about ok  :-)

[15:53] *** yewscion joined
[15:57] *** greaser|q joined
[16:46] *** xinming left
[17:11] *** MyNetAz left
[17:26] *** MyNetAz joined
[17:45] *** dakkar left
[17:48] <discord-raku-bot> <librasteve> greenfork: if you are a purist and do not want to declare a lexical as your acc, maybe you would prefer this...

[17:49] <discord-raku-bot> <librasteve> m: `[<black tree>, <yellow tree>, <blue sky>] andthen -> @_, %_={} { @_.map: { %_{.[1]}.push: .[0] }; %_ } andthen .say;

[17:49] <evalable6> librasteve, rakudo-moar 0911eca22: OUTPUT: ¬´(exit code 1) ===SORRY!=== Error while compilin‚Ä¶¬ª

[17:49] <evalable6> librasteve, Full output: https://gist.github.com/a0f9e565b8498f9bfdfed1a7c19055d7

[17:49] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus statement at /home/glot/main.raku:1 ------> <BOL>‚èè``[<black tree>, <yellow tree>, <blue sk     expecting any of:         prefix         statement list         term 

[17:49] <discord-raku-bot> <librasteve> m: [<black tree>, <yellow tree>, <blue sky>] andthen -> @_, %_={} { @_.map: { %_{.[1]}.push: .[0] }; %_ } andthen .say;

[17:49] <evalable6> librasteve, rakudo-moar 0911eca22: OUTPUT: ¬´{sky => [blue], tree => [black yellow]}‚ê§¬ª

[17:49] <discord-raku-bot> <Raku eval>  {sky => [blue], tree => [black yellow]} 

[18:09] *** yewscion left
[18:37] *** yewscion joined
[18:39] *** sena_kun joined
[18:45] *** yewscion left
[18:45] *** yewscion joined
[18:46] *** zenmov left
[19:07] *** Sampersand joined
[19:17] <discord-raku-bot> <antononcube> @lizmat My Day 12 draft is completed.

[19:17] <lizmat> cool!

[19:18] <discord-raku-bot> <antononcube> I did not schedule it. (I am not sure do I have the rights to do it.)

[19:18] <lizmat> ok, will do!

[19:18] <lizmat> thanks!

[19:18] <discord-raku-bot> <antononcube> üëç

[19:25] *** PipStuart joined
[19:32] *** traxex left
[19:32] *** swaggboi left
[19:36] *** traxex joined
[19:38] <Geth> ¬¶ advent/main: 29b5639542 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[19:38] <Geth> ¬¶ advent/main: day 12 scheduled

[19:38] <Geth> ¬¶ advent/main: review: https://github.com/Raku/advent/commit/29b5639542

[19:41] <discord-raku-bot> <antononcube> üéâ

[19:41] *** swaggboi joined
[19:42] <lizmat> antononcube did some copy-editing as well, hope you don't mind

[19:43] <lizmat> so you may want to double check if I didn't do an oopsie

[19:43] <lizmat> :-)

[19:43] <discord-raku-bot> <antononcube> Thanks! I was just writing that I have to proofread the post again.

[19:45] <discord-raku-bot> <antononcube> I have an LLM prompt "CopyEdit", but using it usually takes me longer time, that "simple" proofreading/

[19:46] *** Sampersand left
[19:47] *** yewscion left
[19:50] *** Sampersand joined
[19:53] <Geth> ¬¶ ecosystem/main: 7d7711bce6 | (Elizabeth Mattijsen)++ | META.list

[19:53] <Geth> ¬¶ ecosystem/main: Remove jnthn's modules

[19:53] <Geth> ¬¶ ecosystem/main: 

[19:53] <Geth> ¬¶ ecosystem/main: They are being migrated to Raku community modules

[19:53] <Geth> ¬¶ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/7d7711bce6

[19:57] *** yewscion joined
[20:07] *** Sampersand left
[20:07] <greenfork> @librasteve interesting! My point about avoiding a lexical variable is to type it in repl more easily. So although there's a purist in me, I for the love of God would not remember such incantation :)

[20:09] <greenfork> Raku: my %h; [<black tree>, <yellow tree>, <blue sky>].map: { %h{.[1]}.push: .[0] }

[20:10] <greenfork> That is very close. Interesting use of dots in .[1]

[20:13] *** greaser|q left
[20:13] *** greaser|q joined
[20:13] *** greaser|q is now known as GreaseMonkey

[20:13] *** yewscion left
[20:14] *** swaggboi left
[20:17] *** yewscion joined
[20:21] *** kjp left
[20:27] *** Sampersand joined
[20:41] *** Aedil left
[20:58] *** Sampersand left
[21:07] <discord-raku-bot> <librasteve> yeah - the andthen is a bit of an acquired taste ... another way to write that is as an sub declaration and then to call it on your data:

[21:08] <discord-raku-bot> <librasteve> my &fn = -> @_, %_={} { @_.map: { %_{.[1]}.push: .[0] }; %_ }

[21:09] <discord-raku-bot> <librasteve> say fn( [<black tree>, <yellow tree>, <blue sky>] );

[21:10] <discord-raku-bot> <librasteve> another way to write the function is:

[21:10] <discord-raku-bot> <librasteve> my &fn = -> @el, %acc={} { @el.map: { %acc{.[1]}.push: .[0] }; %acc };

[21:10] <discord-raku-bot> <librasteve> which is familiar from the ruby hopefully...

[21:22] *** swaggboi joined
[22:38] *** Sampersand joined
[23:14] *** sena_kun left
[23:17] *** Sampersand left
[23:21] *** yewscion left
[23:37] *** AlexDaniel joined
[23:46] *** unicodable6 joined
[23:55] *** AlexDaniel left
[23:55] *** AlexDaniel joined
