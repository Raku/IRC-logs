[01:36] *** hulk joined
[01:37] *** kylese left
[02:11] *** silug left
[02:12] *** silug joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:18] *** silug left
[02:19] *** silug joined
[02:29] *** guifa left
[02:30] *** kylese left
[02:32] *** silug left
[02:33] *** silug joined
[02:35] *** kylese joined
[02:42] *** guifa joined
[02:45] *** ACfromTX joined
[03:54] *** beastieboo__ left
[03:55] *** beastieboo__ joined
[04:46] *** jpn joined
[05:01] *** beastieboo__ left
[05:01] *** beastieboo__ joined
[05:27] *** CIAvash joined
[05:56] *** jpn left
[07:31] *** jpn joined
[07:35] *** jpn left
[08:22] *** Sgeo left
[08:46] *** wayland left
[08:46] *** wayland76 joined
[09:22] *** jpn joined
[09:22] *** sena_kun joined
[09:42] *** soverysour joined
[09:51] *** thaewrapt left
[09:53] *** soverysour left
[09:58] *** thaewrapt joined
[10:15] *** CIAvash left
[10:17] *** vrurg_ joined
[10:20] *** vrurg left
[10:22] *** oodani left
[10:23] *** oodani joined
[10:43] *** Geth joined
[11:01] <tbrowder> antononcube: any raku ppl beside you down south?

[11:02] <tbrowder> you giving any public presentos this year?

[11:05] *** jpn left
[12:27] *** thaewrap1 joined
[12:30] *** thaewrapt left
[12:58] <tbrowder> i’m using “$proc = run <<locate -q $f>>, :out, :err;” to test for existence of a system file. when the file is found, exitcode is 0 and i can get the :out lines fine. however, when NOT found, exitcode is 1 (as expected), but i can’t seem to capture the err lines in :err.

[13:01] <tbrowder> this is debian with latest raku

[13:13] <tbrowder> hm, it doesn’t explain the problem above, but the locate command does have a “—limit” option which can be used to quell an exitcode of 1 when nothing is found. i can live with that, but it still begs question of non-capture of :err.

[13:33] *** soverysour joined
[13:37] *** soverysour left
[13:55] <tbrowder> no, i can’t live with that. why am i not capturing stderr: $p=run “…”, :err;”

[13:56] <tbrowder> m: my $p=run <<locate blahZx>>, :err

[13:56] <camelia> rakudo-moar 7190eae29: ( no output )

[13:57] <tbrowder> double hm

[14:01] *** jpn joined
[14:07] *** jpn left
[14:08] <ugexe> ...are you reading the .err handle?

[14:10] <ugexe> m: my $p = run "ls", "--asdfasfd", :err; say $p.err.slurp(:close)

[14:10] <camelia> rakudo-moar 7190eae29: OUTPUT: «ls: unrecognized option '--asdfasfd'␤Try 'ls --help' for more information.␤␤»

[14:10] <ugexe> does locate actually output to stderr?

[14:12] <tbrowder> let me try on cmd line on my host

[14:12] <ugexe> m: my $p = run "locate", "-q", "blahZx", :err, :!out; say $p.err.slurp(:close)

[14:12] <camelia> rakudo-moar 7190eae29: OUTPUT: «␤»

[14:15] <ugexe> i dont know why that output blank here, but on my computer it outputs the usage

[14:15] <tbrowder> on the command line i NO output when locate doesn’t find anything

[14:15] <ugexe> locate: illegal option -- q

[14:17] <tbrowder> i’m using debian 11

[14:21] <ugexe> what output do you actually expect to capture with `run`? you stated

[14:21] <tbrowder> the options have to precede the pattern

[14:21] <ugexe> i just copied your code

[14:22] <ugexe> if i run `locate filethatdoesntexist` it doesnt output anything

[14:22] <tbrowder> i’m writing a test for a module to see if the locate  command is installed

[14:22] <ugexe> ok, but what do you expect it to output when a file is not found?

[14:23] <ugexe> you seem to be expecting something, whereas from what i see from using the locate command directly i would expect no output

[14:23] <ugexe> i also get exit code 0 when the file does not exist

[14:23] <tbrowder> nothing i assume. maybe i’m running “run” improperly

[14:24] <ugexe> i think you're using locate wrong

[14:24] <ugexe> $ locate asdfasdf

[14:24] <ugexe> $ echo $?

[14:24] <ugexe> 0

[14:24] <ugexe> no output, exit code 0

[14:24] <tbrowder> ok, let me give it another try…

[14:27] <ugexe> -q is not going to work on macos (and thus probably bsd in general)

[14:36] *** jpn joined
[14:40] *** Xliff joined
[14:40] <Xliff> \o

[14:41] <Xliff> How difficult would it be to bundle rakudo into a shared library?

[14:54] <discord-raku-bot> <antononcube> @tbrowder "you giving any public presentos this year?" -- Yes, I have a scheduled talk next month in Miami. (Titled "Robust LLM pipelines.")

[14:54] <tbrowder> ugexe: thnx for the help. it’s working correctly now. a cpl of things: i wasn’t slurping :out, just reading .lines before closing (not sure that makes a diff). this time i only read :out and ignored :err. i checked exitcode both times: got 0 when file found, 1 when file not found. i was using :err when exit code was 1.

[14:55] <tbrowder> antononcube: gonna be broadcast, or put on youtube?

[14:56] <Xliff> Would it work something like this? A new shared library is created that bundles all of the .moarvm files into blobs. The entry point into moar is... from my filesystem is /home/cbwood/Projects/rakudo/install/bin/moar. We take the essentials of bin/moar and convert that into a loader that takes in index of the .moarvm bundle and converts them into offsets. These offsets are then used instead of filenames.

[14:57] <discord-raku-bot> <antononcube> @tbrowder Yes, it should end up in YouTube. That presentation is done through a meetup, I assume they going to record it. If they done I will do a recording anyway.

[15:01] <discord-raku-bot> <antononcube> @tbrowder Thank you for your interest! Here is the extended abstract of the presentation: https://github.com/antononcube/RakuForPrediction-book/blob/main/Presentations/DataScieceStudyGroup-SouthFL-July-2024/LLM-for-Software-Engineers.md

[15:03] <discord-raku-bot> <antononcube> The fifth technique listed there (i.e. point 5), "Filtering of multiple outputs", is actually about using grammars. I plan to replace it with "Using Grammar-LLM chain of responsibility."

[15:39] <patrickb> Xliff: re rakudo shared lib, look at https://github.com/rakudo/rakudo/blob/main/src/vm/moar/runner/main.c

[15:40] <patrickb> Just compile that to a lib instead of exec and you're done.

[15:41] <patrickb> inline::perl6/5 does the same. You'll find a very similar source file in it's repo.

[15:42] <patrickb> Both are adaptions of the https://github.com/MoarVM/MoarVM/blob/main/src/main.c

[15:47] <Xliff> patrickb: Excellent! Thanks for the first part. That's MoarVM as a shared lib. Now we need to get NQP and Rakudo in there somehow. The fact that they will be inside of a BLOB is the tricky part, but it looks like that's the file to handle that in.

[15:53] *** jpn left
[16:13] <Xliff> Another idea...: sub a ($a, $b, $c, ...) { $*EXTRA.head # first arg in ... } -- Would people be interested in this? Could we get it in 6.e or 6.f?

[16:18] <Xliff> Meanwhile... directly related to my previous topic... https://gist.github.com/Xliff/563246e22ea8a06b82cc14e58051e79f

[16:32] *** silug left
[16:46] *** Sgeo joined
[17:02] *** silug joined
[17:06] <Xliff> m: role T[Str $s] { method t { $s.say } }; class A does T["meh"] { }; say A does T; say A does T[Str]

[17:06] <camelia> rakudo-moar 7190eae29: OUTPUT: «Cannot use 'does' operator on a type object A.␤  in block <unit> at <tmp> line 1␤␤»

[17:06] <Xliff> m: role T[Str $s] { method t { $s.say } }; class A does T["meh"] { }; say A ~~ T; say A ~~ T[Str]

[17:06] <camelia> rakudo-moar 7190eae29: OUTPUT: «True␤True␤»

[17:10] <tbrowder> ugexe: my problem was not closing the slurp on the :err pipe. thnx so much for reminding me

[17:35] <SmokeMachine> Hi! From inside Attribute's container_initializer and auto_viv_container, is there a way to get the actual object I'm creating to be able to pass it to build()/build_closure()?

[17:39] <SmokeMachine> I mean, I was able to make it work with default values using auto_viv_container... https://usercontent.irccloud-cdn.com/file/PkIo1mbW/image.png

[17:41] <SmokeMachine> but it won't work if I try to use a attribute value inside of it... I supose that's like that because I'm passing Attribute's package to it instead of the actual object... but I can't find a way to get the object... does anyone know how I could do that? https://usercontent.irccloud-cdn.com/file/G0oeJj9s/image.png

[17:46] <SmokeMachine> I’ve been reading rakudo code, but I couldn’t find where build is called to be able to copy how it’s done… I found where it’s created… but not where it’s called…

[17:47] <lizmat> perhaps a --ll-exception stack trace is more informative

[17:50] <SmokeMachine> I don't quite understand that output... :(

[17:53] <lizmat> can you gist it somewhere as text?

[17:53] <SmokeMachine> I tried something like this: raku --ll-exception -e 'class C { has $.a = $!wrong }; say C.new' but it pointed out to grammar...

[17:54] <SmokeMachine> adding that on that code before pointed to my code...

[17:54] <SmokeMachine> let me show you...

[17:55] <SmokeMachine> https://www.irccloud.com/pastebin/FsMukK39/

[17:56] *** soverysour joined
[17:57] <SmokeMachine> this is my current Attribute class... https://www.irccloud.com/pastebin/rdy0pAZX/

[17:57] <lizmat> hmmm that stack trace is from 2024.05, can't be sure the location in World.nqp is correct for 2024.06

[17:58] <lizmat> I guess rakubrew hasn't been updated yet?

[17:59] <SmokeMachine> I'm building 2024.06 to run again

[18:02] <SmokeMachine> Also, I don't know what should be the 2nd parameter to build... I'm passing anything... but I don't know what should be passed...

[18:04] <[Coke]> rakubrew build moar 2024.06

[18:05] <SmokeMachine> oh, sorry... no I mean Attribute's build... the method... not rakubrew...

[18:08] <SmokeMachine> I mean this, the `$build.($.package, 1)`... the 1, I don't know what that should be... https://www.irccloud.com/pastebin/FEDjiH1x/

[18:09] <SmokeMachine> lizmat: with 2024.06 https://www.irccloud.com/pastebin/zwmDcr54/

[18:12] <lizmat> ok, same line number in World...and that's just a call there...

[18:13] <lizmat> so it's somewhere deep in the bowels  :-(

[18:15] <lizmat> sorry, I'm currently not in that headspace  :-(

[18:17] <SmokeMachine> if I understand this correctly (https://github.com/rakudo/rakudo/blob/7190eae29b8e7a1be56789a221ba14ded934c52a/src/Perl6/Metamodel/REPRComposeProtocol.nqp#L64-L66) the auto_viv_container is run on compose... so it will not have access to the obj itself... :(

[18:17] <SmokeMachine> lizmat: thanks

[18:17] <SmokeMachine> np

[18:39] <SmokeMachine> I think my real problem is to find out how usual code avoid this: https://github.com/rakudo/rakudo/blob/7190eae29b8e7a1be56789a221ba14ded934c52a/src/Perl6/Metamodel/BUILDPLAN.nqp#L148-L150

[18:42] *** synthmeat left
[18:43] *** synthmeat joined
[18:45] <SmokeMachine> I suppose usual Attribute does not have container_initializer?

[18:53] * guifa is currently trying to find a way to muck with a cursor's .orig / .target

[18:53] <guifa> it's.... not as easy as I'd've thought

[18:54] *** silug left
[18:54] *** silug joined
[18:54] * lizmat has just found a JIT issue  :-(

[18:54] <lizmat> https://github.com/MoarVM/MoarVM/issues/1817

[19:01] *** soverysour left
[19:25] <patrickb> rakubrew/rakudo.org builds are in progress.

[19:40] <patrickb> files are available

[19:51] <jdv> lizmat: nice

[20:05] <Xliff> lizmat! Did you see my questions above? What do you think of the possibility?

[20:48] *** gabiruh_ left
[20:49] *** gabiruh joined
[20:50] <lizmat> Xliff: isn't that what the GSOC project of pamplemousse was about a few years ago ?

[20:54] <Xliff> I think so. I don't know how far she got, or what limitations she had.

[20:54] <Xliff> Maybe I'll see if I can grab a copy of what she did and check.

[20:55] <Xliff> pamplemousse's was more about making Raku executables. Mine is more about making Rakudo something reusable.

[20:55] <Xliff> My ultimate plans revolve around making Rakudo a drop-in addition to things like PL/SQL... or anywhere you might use LUA

[20:57] <discord-raku-bot> <antononcube> Always, there are some lurking Lua likers.

[20:59] <lizmat> Xliff: perhaps your approach is different.  But in the end, you'd want something (directly) executable, no?

[20:59] <lizmat> which could be an very thin layer around a shared lib

[21:10] <lizmat> afk again&

[21:11] <patrickb> I think one part that is salvageable of pamplemousses work is a change that allows running byte code directly. (I.e. allows recompiling the top level script). it's a rather small change actually.

[21:11] <patrickb> *precompiling

[21:13] *** fulkunber34 joined
[21:14] *** fulkunber34 left
[21:35] <Xliff> patrickb: Actually, you'd still need to write a loader for that.

[21:36] <Xliff> lizmat: Actually, no. You'd just link to a shared lib and pass the script as a string to some entry point.

[21:55] <SmokeMachine> Does anyone have any idea on where I can find an explanation (or the code itself) for nqp::p6attrinited?

[21:58] <SmokeMachine> I think I found it: https://github.com/rakudo/rakudo/blob/main/src/Perl6/Actions.nqp#L976-L995

[22:13] <SmokeMachine> I think I finally found where build is called... https://github.com/rakudo/rakudo/blob/7190eae29b8e7a1be56789a221ba14ded934c52a/src/Perl6/World.nqp#L3832-L3836

[22:16] <SmokeMachine> but it didn't help... because it only runs if nqp::p6attrinited returns 0... and I can't find a way to make that return 0... :(

[22:18] <SmokeMachine> what mean that an attribute was initialized?

[22:19] <tbrowder> can any mac user tell me the mac equivalent for linux system’s “locate” which is used to find patterns in the file system paths? ugexe said his mac has locate, so how do i install it on .github/workflows?

[22:26] <guifa> locate exists on my mac

[22:26] <guifa> didn't need to install it afaict 

[22:27] <tbrowder> maybe “myfind -literal”?

[22:32] <lizmat> rak foo / --find

[22:41] *** sena_kun left
[23:57] <[Coke]> /usr/bin/locate exists on my mac

[23:58] <[Coke]> I have never used it.

[23:58] <[Coke]> (and it requires some kind of setup I've never run)

