[00:19] *** zenmov joined
[00:33] <Geth> ¦ advent/main: b3ea66ac69 | (Hillel Wayne)++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[00:33] <Geth> ¦ advent/main: Add RAC article (#120)

[00:33] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/b3ea66ac69

[01:25] *** guifa joined
[01:29] *** Manifest0 left
[02:03] *** zenmov left
[02:11] *** zenmov joined
[02:30] *** hulk joined
[02:30] *** kylese left
[02:33] *** _________ left
[03:00] *** yewscion joined
[03:00] *** kjp left
[03:01] *** kjp joined
[03:03] *** kjp left
[03:03] *** kjp joined
[03:06] *** yewscion left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:27] *** yewscion joined
[03:33] *** yewscion left
[05:23] *** zenmov left
[06:20] *** Aedil joined
[06:21] *** _________ joined
[07:10] *** zenmov joined
[08:43] *** kst joined
[08:53] <Geth> ¦ advent/main: 136146c433 | ab5tract++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[08:53] <Geth> ¦ advent/main: Add article on revision gating

[08:53] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/136146c433

[09:04] <Voldenet> m: {}

[09:04] <camelia> rakudo-moar 1ff7f0851: ( no output )

[09:04] <Voldenet> also short, maybe not as short as 0

[09:05] *** Manifest0 joined
[09:05] <Voldenet> and empty does work with `raku -e ''`

[09:20] *** dakkar joined
[09:52] *** sena_kun joined
[10:10] *** sena_kun left
[10:17] *** MoC joined
[10:23] <Geth> ¦ raku.org: pelanaut++ created pull request #226: Atikon-Logo aktualisiert und mit https://www.atikon.com/ verlinkt

[10:23] <Geth> ¦ raku.org: review: https://github.com/Raku/raku.org/pull/226

[10:24] <Geth> ¦ raku.org/main: 1ed6abbe5a | (Peter Lang)++ (committed by Elizabeth Mattijsen) | 2 files

[10:24] <Geth> ¦ raku.org/main: Atikon-Logo aktualisiert und mit https://www.atikon.com/ verlinkt

[10:24] <Geth> ¦ raku.org/main: review: https://github.com/Raku/raku.org/commit/1ed6abbe5a

[11:44] *** Sgeo left
[12:20] *** finanalyst joined
[13:07] *** finanalyst left
[14:46] *** librasteve_ joined
[15:35] <discord-raku-bot> <antononcube> @lizmat I will play with "App::Ecosystems" soon. Should produce interesting package-dependency graphs.

[15:38] <discord-raku-bot> <antononcube> Here is a such graph from 2022: https://imgur.com/33P7QmG

[15:42] *** donaldh left
[15:43] *** donaldh joined
[15:44] *** pierrot left
[15:45] *** pierrot joined
[15:45] *** Ekho left
[15:45] *** guifa left
[15:47] <discord-raku-bot> <antononcube> I just filed a (low priority) metadata documentation issue to GitHub's repository for "App::Rak", which, I think, is a good idea to follow for all Raku package Git repositories. See: https://github.com/lizmat/App-Rak/issues/63 .

[15:50] *** bdju left
[15:51] *** bdju joined
[15:53] *** Ekho joined
[15:55] <timo> https://finanalyst.github.io/ModuleCitation/ do you know about this yet?

[16:01] *** zenmov left
[16:20] <ugexe> the graphs end in 2019 lol

[16:22] <timo> there's a "fork me on github" button near the middle, presumably you can find a CI job there with some output or so?

[16:47] *** MoC left
[16:48] <discord-raku-bot> <antononcube> @ugexe I might have used some old or obsolete repository.

[16:54] <timo> is REA a good primary source for this kind of information, or would the fez ecosystem be better?

[17:06] <discord-raku-bot> <antononcube> @timo That kind of questions is why I proclaimed my anticipated use of lizmat's (new) "App::Ecosystems".

[17:07] <discord-raku-bot> <antononcube> I.e. I hope that package to give "up to date" information.

[17:17] <timo> makes sense, yeah

[17:17] <timo> doing some analysis of historical data could be interesting at some point, too

[17:21] <discord-raku-bot> <antononcube> I did such rudimentary analysis for a TRC-2022 presentation, but I was mostly focused on making/demoing a recommender for Raku packages.

[17:32] *** dakkar left
[18:55] <botato> I really like the interactive style of development supported by common lisp, or even to a decent extent python with autoreload/importlib.reload, where you can make changes to your code and run the new version without restarting the whole program and losing any state

[18:56] <botato> it seems rakudo doesn't support reloading a module, is that something that long-term could be added, or just not possible for rakudo?

[19:01] *** sena_kun joined
[19:01] <timo> at first look, it seems tricky

[19:01] <timo> but it depends a lot on what depth of "replacement" you expect from reloading a module

[19:03] <timo> under what circumstances is it okay to abort and say "the before and after for $thing are not compatible enough for a hot reload"?

[19:06] <timo> our metaobject protocol allows a fair bit of shenanigans, and if you are okay with "if you break it you get to keep the pieces" you can poke around in some internals with the ops that start with "nqp::"

[19:07] <ab5tract> I wonde, how much of an obstacle is our current lack of a mechanism for parent classes to "inform" their child classes of augmentation?

[19:08] <ab5tract> in the broader context of hot reloading, I mean

[19:08] <timo> right. okay, imagine we already had that, because i can think of a hacky way to do that that is very not fast and very not a good idea for production ...

[19:09] <ab5tract> I think there might be interest in this even in the face of those concerns

[19:12] <ab5tract> I also wonder if we could leverage `:ver<>` in hot reloading efforts ...

[19:13] <timo> m: class A:ver<1> { has $.foo }; class A:ver<2> { has Int $.foo }; say A.new(foo=>"hi");

[19:13] <camelia> rakudo-moar 461b81f79: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Redeclaration of symbol 'A'.␤at <tmp>:1␤------> s A:ver<1> { has $.foo }; class A:ver<2><HERE> { has Int $.foo }; say A.new(foo=>"hi")␤    expecting any of:␤        generic role␤»

[19:13] <timo> m: package First { class A:ver<1> { has $.foo }; }; package Second { class A:ver<2> { has Int $.foo }; }; say First::A.new(foo=>"hi"); say First::A.new() ~~ Second::A

[19:13] <camelia> rakudo-moar 461b81f79: OUTPUT: «First::A.new(foo => "hi")␤False␤»

[19:23] <timo> m: class PretendyClassHOW is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $before_a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $before_a.compose(); my $after_a := PretendyClassHOW.new_type(:2ver, :name("A")); $after_a.pretend_to_be([$before_a<>]); $after_a.compose(); say $before_a.new() ~~ $after_a; say $after_a.new() ~~ $before_a;

[19:23] <camelia> rakudo-moar 461b81f79: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Invalid typename 'Perl6::Metamodel::TypePretense'␤at <tmp>:1␤------> sHOW does Perl6::Metamodel::TypePretense<HERE> { }; my $before_a := Perl6::Metamodel::␤»

[19:23] <timo> ah?

[19:24] <ab5tract> could it be a bootstrap order issue?

[19:24] <timo> i think that package is just not in scope

[19:24] *** Aedil left
[19:24] <timo> this is probably going to become too long for a single line of irc very fast

[19:25] <timo> m: use Perl6::Metamodel:from<NQP>; class PretendyClassHOW is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $before_a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $before_a.compose(); my $after_a := PretendyClassHOW.new_type(:2ver, :name("A")); $after_a.pretend_to_be([$before_a<>]); $after_a.compose(); say $before_a.new() ~~ $after_a; say $after_a.new() ~~

[19:25] <camelia> rakudo-moar 461b81f79: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> new() ~~ $after_a; say $after_a.new() ~~<HERE><EOL>␤    expecting any of:␤        prefix␤        term␤»

[19:25] <timo> $before_a;

[19:25] <timo> dangit

[19:25] <timo> that really was very fast

[19:27] <timo> m: use Perl6::Metamodel:from<NQP>; class PCH is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $a^.compose(); my $b := PretendyClassHOW.new_type(:2ver, :name("A")); $b.pretend_to_be([$a<>]); $b.^compose(); say $a.new() ~~ $b; say $b.new() ~~ $a;

[19:27] <camelia> rakudo-moar 461b81f79: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    PretendyClassHOW used at line 1␤␤»

[19:27] <timo> m: use Perl6::Metamodel:from<NQP>; class PCH is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $a^.compose(); my $b := PCH.new_type(:2ver, :name("A")); $b.pretend_to_be([$a<>]); $b.^compose(); say $a.new() ~~ $b; say $b.new() ~~ $a;

[19:27] <camelia> rakudo-moar 461b81f79: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "^" in expression "$a^.compose()" in sink context (line 1)␤No such method 'compose' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[19:27] <timo> oops

[19:27] <timo> m: use Perl6::Metamodel:from<NQP>; class PCH is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $a.^compose(); my $b := PCH.new_type(:2ver, :name("A")); $b.pretend_to_be([$a<>]); $b.^compose(); say $a.new() ~~ $b; say $b.new() ~~ $a;

[19:27] <camelia> rakudo-moar 461b81f79: OUTPUT: «Method A.pretend_to_be not found␤  in block <unit> at <tmp> line 1␤␤»

[19:28] <timo> m: use Perl6::Metamodel:from<NQP>; class PCH is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $a.^compose(); my $b := PCH.new_type(:2ver, :name("A")); $b.^pretend_to_be([$a<>]); $b.^compose(); say $a.new() ~~ $b; say $b.new() ~~ $a;

[19:28] <camelia> rakudo-moar 461b81f79: OUTPUT: «Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[19:29] <timo> silly.

[19:29] <timo> m: use Perl6::Metamodel:from<NQP>; class PCH is Perl6::Metamodel::ClassHOW does Perl6::Metamodel::TypePretense { }; my $a := Perl6::Metamodel::ClassHOW.new_type(:1ver, :name("A")); $a.^compose(); my $b := PCH.new_type(:2ver, :name("A")); $b.HOW.pretend_to_be([$a<>]); $b.^compose(); say $a.new() ~~ $b; say $b.new() ~~ $a;

[19:29] <camelia> rakudo-moar 461b81f79: OUTPUT: «False␤False␤»

[19:29] <timo> well, that's not HOW to do that

[19:30] <ab5tract> :D

[19:31] <timo> this is an area of the metamodel that i haven't touched before, i don't think

[19:32] <discord-raku-bot> <antononcube> weekly: https://youtu.be/S_3e7liz4KM

[19:32] <notable6> antononcube, Noted! (weekly)

[19:32] <ab5tract> antononcube++

[19:33] <ab5tract> REPL food for thought: "A problem with REPLs is that they embed an iterative design process, and potentially the only way to get back to a guaranteed state is to rerun the entire code history"

[19:37] <timo> bpython has this cool "undo" feature where it actually reruns the whole history up until the previous line you executed :D

[19:38] <timo> if there's side-effects in your code so far, well, tough luck ;) ;)

[19:51] <timo> ok, i'm not feeling up to MOP noodling right now, I think

[20:03] *** Sgeo joined
[20:31] <ab5tract> that's fair :)

[20:47] <xinming> With Cache::Async module, Is it possible to do .get-if-present("$key"), if not found, let Cache::Async handle the build in the background automatically?

[20:49] <xinming> Something like:   my $d = $cache.get-if-present("$key"); unless $d { $cache.build("$key"); return "default" };  $cache.get("$key");

[20:49] <Xliff> Happy Turkey Day for those of you celebrating!

[20:51] <xinming> What I mean is, when the data is not in cache, We return 'default' and build cache in the background. if cache is expired, We return stale cached value, also build in the background.

[20:52] <xinming> When I read the doc, it returns a Promise, I think I may need to hold the promise and wait for it to finish somewhere. otherwise, if I early return, The promise var goes out of scope, probably be aborted.

[21:17] *** dustinm` left
[21:20] *** dustinm` joined
[22:01] <ab5tract> xinming: Maybe you can return the promise always? If the cache gives back the default (use a sentinel), then you give back the promise that will produce the result. If the cache has the value, you can create a Promise, create a Vow from that promise, then keep the vow with the value from the cache before returning the promise

[22:01] <ab5tract> I hope that makes sense and/or helps :)

[22:22] *** sena_kun left
[23:36] *** cm left
[23:42] *** xinming left
[23:45] *** cm joined
