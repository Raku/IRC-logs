[00:43] *** guifa joined
[00:47] *** guifa left
[00:50] *** oodani left
[00:51] *** oodani joined
[01:37] *** kylese left
[01:37] *** kylese joined
[02:15] *** kylese left
[02:15] *** kylese joined
[04:04] *** _________ left
[04:05] *** Aedil joined
[04:12] *** _________ joined
[05:30] *** Sgeo left
[06:08] *** thaewrapt left
[06:12] *** thaewrapt joined
[06:17] *** thaewrapt left
[06:28] *** thaewrapt joined
[06:51] *** thaewrapt left
[07:05] *** thaewrapt joined
[07:11] *** thaewrapt left
[07:22] *** thaewrapt joined
[07:26] *** sena_kun joined
[07:30] *** thaewrapt left
[07:30] <andinus> mail

[07:30] <andinus> oops wrong pane

[07:38] *** sena_kun left
[07:41] *** thaewrapt joined
[08:27] *** thaewrapt left
[08:38] *** thaewrapt joined
[08:53] *** thaewrapt left
[08:56] *** MasterDuke left
[09:04] *** thaewrapt joined
[09:36] <patrickb> I have a role that needs some init logic. I can't put it in a `submethod TWEAK` as that collides in the does-ing class. Currently I rely on a `method TWEAK_SpanHandling()` that needs to be called in the mixing in classes TWEAK. Is there a way to do this that does not require cooperation of the does-ing class?

[09:41] <ab5tract> patrickb: https://docs.raku.org/language/phasers#COMPOSE_(Not_yet_implemented)

[09:42] <lizmat> m: role A { sub TWEAK($) { dd; nextsame }; ::?CLASS.^find_method("TWEAK").wrap(&TWEAK) }; class B does A { method TWEAK() { dd } }; B.new

[09:42] <camelia> rakudo-moar 5cca0b4fc: OUTPUT: «sub TWEAK($)␤method TWEAK(B $:: *%_)␤»

[09:42] <ab5tract> ah, nice

[09:42] <patrickb> ab5tract: But I need this at object creation time, not compile time. 

[09:43] <lizmat> patrickb: I think my solution is what you're looking for ?

[09:43] <patrickb> lizmat: That works. Thanks!

[09:43] <patrickb> But wow, this is hacky..

[09:44] <ab5tract> I imagine COMPOSE will be used often to mix in a run time candidate as above, but you raise a good point

[09:44] <ab5tract> This comes up fairly often, it would be great to explore some solutions

[09:47] <lizmat> FWIW, I don't think a COMPOSE phaser is that necessary, as the mainline of the role is basically the COMPOSE phaser

[09:56] <ab5tract> Fair, I think it was proposed as a way to create hooks like the ones that have been asked for twice in 48 hours alone. But just a hook or two in themselves would likely be plenty

[10:56] <discord-raku-bot> <librasteve> just playing with the role / TWEAK conundrum - you could do this:

[10:57] <discord-raku-bot> <librasteve> m: role Thingy { submethod TWEAK { say 'yo' } } class A is Thingy { submethod TWEAK { say 'ho' } } my $a = A.new;

[10:57] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Strange text after block (missing semicolon or comma?) at /home/glot/main.raku:1 ------>  Thingy { submethod TWEAK { say 'yo' } }⏏ class A is Thingy { submethod TWEAK { s     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop 

[10:57] <evalable6__> librasteve, rakudo-moar 5cca0b4fc: OUTPUT: «(exit code 1) 4===SORRY!4=== Er…»

[10:57] <evalable6__> librasteve, Full output: https://gist.github.com/2850c869c3272537a47aaa6ca051efb3

[10:57] <discord-raku-bot> <librasteve> m: role Thingy { submethod TWEAK { say 'yo' } }; class A is Thingy { submethod TWEAK { say 'ho' } }; my $a = A.new;

[10:57] <discord-raku-bot> <Raku eval>  yo ho 

[10:57] <evalable6__> librasteve, rakudo-moar 5cca0b4fc: OUTPUT: «yo␤ho␤»

[10:58] *** guest555 joined
[10:58] <discord-raku-bot> <librasteve> that is to go is rather than does in the user class and force the role to be punned...?

[11:18] *** guest555 left
[12:22] *** Chanakan left
[13:26] *** jgaz joined
[13:38] <tbrowder> .ask patrickb have you tried installing Raku on a Chromebook?

[13:38] <tellable6> tbrowder, I'll pass your message to patrickb

[13:39] <tbrowder> or anyone else...

[14:13] *** coleman left
[14:15] <patrickb> no I haven't

[14:15] <tellable6> 2024-08-19T13:38:46Z #raku <tbrowder> patrickb have you tried installing Raku on a Chromebook?

[14:21] *** coleman joined
[14:28] *** Chanakan joined
[14:37] *** derpydoo joined
[14:51] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/08/19/2024-34-steaming-ahead/

[15:10] *** derpydoo left
[16:32] <jgaz> When will Raku Land stop listing up non-Zef modules?

[16:40] *** sena_kun joined
[16:50] *** lizmat left
[16:51] *** lizmat joined
[17:19] *** Xliff left
[18:00] <patrickb> jgaz: Probably nevercor very far in the future. Since p6c is effectively frozen, there is no harm coming from it anymore.

[18:19] *** Aedil left
[18:24] *** Aedil joined
[19:30] <discord-raku-bot> <antononcube> Just finished watching the presentation and Q&A session of "Large Language Models and The End of Programming - CS50 Tech Talk with Dr. Matt Welsh" (https://www.youtube.com/watch?v=JhCl-GeT4jw)  My TL;DR review is:  > Yes, yes, yes, and blah, blah, blah.

[19:30] <discord-raku-bot> <antononcube> The presenter either lacks imagination or really likes portraying himself as such.

[19:30] <discord-raku-bot> <antononcube> As for programming with LLMs -- I challenge him to show me how with LLMs he is going to produce working code for "multiscale Truchet patterns" -- say in Python, R, or JavaScript -- via cursory, human understanding of the this post: https://community.wolfram.com/groups/-/m/t/3247480

[19:30] <discord-raku-bot> <antononcube> See these LLM-derived breakdowns and summaries of that presentation: https://github.com/antononcube/RakuForPrediction-blog/blob/main/Markdown/LLM-over-Large-Language-Models-and-The-End-of-Programming-CS50-Tech-Talk-with-Dr-Matt-Welsh.md

[19:31] *** dawids_ joined
[19:32] *** Aedil left
[20:57] <discord-raku-bot> <jaguart.v1> One thing I note on LLM generated code, with  prompts are for Perl - the code is  legacy Perl style - no modern idioms  e.g. Corinna. Might differ for other languages I guess.

[20:59] *** guifa joined
[21:15] *** jgaz left
[21:41] *** dawids_ left
[21:46] <discord-raku-bot> <antononcube> Understanble -- LLMs are statistical in nature, hence larger-footprint outcomes are more probable. That is why people make complicated prompts, etc. (And make different claims about those... )

[21:47] *** sena_kun left
[22:07] <discord-raku-bot> <_grenzo> So, you're saying, to protect our jobs we need to put more honey pots on github with code that suffers from the Halting problem, or other hard to spot bugs?

[22:07] <discord-raku-bot> <_grenzo> And use misleading comments...

[22:11] <discord-raku-bot> <_grenzo> Rule 1: We don't talk about AI fight club.

[22:27] *** Sgeo joined
[22:46] <discord-raku-bot> <antononcube> Or just invent new programming languages that immediately have huge mind-share.

[22:46] <discord-raku-bot> <_grenzo> Have an LLM do that

[23:01] *** MasterDuke joined
