[00:00] <Xliff> m: my $a = 0x5a; $a.base(16).say

[00:00] <camelia> rakudo-moar fd29555b1: OUTPUT: «5A␤»

[00:01] <tbrowder> yes, that works too

[00:03] <tbrowder> i’m trying to get the glyph (unicode char) for decimal 90

[00:04] <tbrowder> m: my $c = 90; say $c.chr

[00:04] <camelia> rakudo-moar fd29555b1: OUTPUT: «Z␤»

[00:05] <botato> I just needed to add filter to get ltrace to show calls from libraries loaded dynamically later: ltrace -x '*@libxml2.so.2' raku raku-libxml.raku

[00:05] <timo> botato: you should be able to trace calls made by NativeCall with the MVM_nativecall_invoke function where all invocations should go through

[00:05] <timo> oh, cool

[00:06] <tbrowder> ok, that works. i’m having trouble with doing that in a program

[00:28] <botato> actually yea MVM_nativecall_invoke seems like a better idea, ltrace shows tons of output, all internal calls within the libxml2 library, whereas that should just show the calls raku is making to libxml2 which would be more helpful

[00:49] *** yewscion joined
[00:53] <Xliff> So what's the best way to use MVM_nativecall_invoke? Set a breakpoint?

[00:54] *** yewscion left
[01:02] <timo> in gdb, you can set a breakpoint, probably in a different line than the entry, honestly, then add "commands" with a bunch of prints for interesting things, maybe an MVM_dump_backtrace(tc) if you want to see the raku language backtrace as well, and make the last command be "continue" so after gdb hits the breakpoint and outputs all the stuff it immediately continues

[01:02] <timo> that can of course give a boatload of output, so YMMV what exactly you need

[01:02] <timo> but of course you can also set a condition for the breakpoint

[01:05] *** yewscion joined
[01:29] *** yewscion left
[01:30] *** yewscion joined
[01:41] <Xliff> timo: Can you set these in a config file or something?

[01:42] <Xliff> I'd like to build up a library of this stuff.

[01:43] <tbrowder> hi, considering a range of integers from 1 to N for Unicode decimal code points, is there a way to detect a non-printable glyph (

[01:43] <timo> there's a ~/.gdbinit that you can put stuff like that into, and you can define functions in it i think? i haven't worked with that yet

[01:43] <tbrowder> before you use it?

[01:44] <timo> there's the unicode categories, would that help?

[01:44] <timo> like letter and its subcategories, symbol and its subcategories, etc

[01:45] *** japhb joined
[01:49] *** Manifest0 left
[01:49] <tbrowder> yes, that should help, but i haven't found it in the docs in a search--still browsing...

[01:53] <tbrowder> ah it's in regexes...

[02:00] <tbrowder> and i found the list of props. use ".uniprop" to avoid regex, that's what i'm looking for

[02:20] *** librasteve_ left
[02:21] <tbrowder> looks i want to skip code points with .uniprop('propcode') values of M, Z, and C

[02:22] <tbrowder> hm, still getting the ? in a box for some chars...

[02:25] <timo> it depends on your font, of course :/

[02:25] <timo> and not just the font that's currently chosen by your terminal emulator or browser, but also the list of fallback fonts that it will choose from

[02:27] <timo> there might actually be an ansi escape sequence that lets you ask your terminal for whether it has something for a given sequence of codepoints? that's of course something that's probably only in some and not in other terminal emulators

[02:27] <tbrowder> of course, how stupid of me. i was just using whatever my system has for a terminal!

[02:27] <timo> printable is a very "local" property

[02:28] <timo> you can have a font that has glyphs in the private use area of unicode

[02:28] <tbrowder> you are right, thnx

[02:28] <timo> then the question of "printable" becomes extra thorny

[02:31] <tbrowder> yes, i will be using good opentype fonts with 2000+ printable glyphs so there shouldn't be many "bad" glyphs

[02:41] *** kylese left
[02:41] *** kylese joined
[03:15] *** kylese left
[03:15] *** kylese joined
[03:22] <guifa> or also how do you consider a combiner?  they're printable but technically only in combination with others

[03:23] <guifa> or the local codes they use for emoji flags , originally designed to be nonprintable but in combination they make a printable flag

[03:51] *** zetaaaa left
[04:53] <guifa> Antonon: have you had any luck running Stable Diffusion locally perchance? I know you're on a Mac too

[05:44] *** teatime left
[06:06] *** Aedil joined
[06:27] *** swaggboi left
[06:30] *** Sgeo left
[06:36] <discord-raku-bot> <antononcube> @guifa Yes, via DiffusionBee.

[06:36] <discord-raku-bot> <antononcube> https://diffusionbee.com

[07:14] *** yewscion left
[08:03] <Xliff> Can you extract the regular expression from a grammar rule/method?

[08:07] *** yewscion joined
[08:10] <SmokeMachine> Xliff: do you mean something like this?

[08:10] <SmokeMachine> m: grammar G { token bla { "bla" } }; my &bla = G.^find_method: "bla"; say "blablabla" ~~ /&bla/

[08:10] <camelia> rakudo-moar fd29555b1: OUTPUT: «｢bla｣␤»

[08:10] <Xliff> Yup!

[08:12] *** yewscion left
[08:13] <Xliff> However my extracted match fails.

[08:14] <Xliff> m: token intl-date { <year=.D4-year> '/' <month=.D2> '/' <day=.D2> }; say "ssss2024/11/22bbb" ~~ /<intl-date>/

[08:14] <camelia> rakudo-moar fd29555b1: OUTPUT: «Potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my token intl-date'?)␤    at <tmp>:1␤    ------> token ⏏intl-date { <year=.D4-year> '/' <month=.␤No such method 'intl-date' for invocant…»

[08:14] <Xliff> m: my token intl-date { <year=.D4-year> '/' <month=.D2> '/' <day=.D2> }; say "ssss2024/11/22bbb" ~~ /<intl-date>/

[08:14] <camelia> rakudo-moar fd29555b1: OUTPUT: «No such method 'D4-year' for invocant of type 'Match'␤  in regex intl-date at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:14] <Xliff> m: my token intl-date { <year=\d\d\d\d> '/' <month=\d\d> '/' <day=\d\d> }; say "ssss2024/11/22bbb" ~~ /<intl-date>/

[08:14] <camelia> rakudo-moar fd29555b1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> my token intl-date { <year=⏏\d\d\d\d> '/' <month=\d\d> '/…»

[08:15] <Xliff> m: my token intl-date { <year=\d+> '/' <month=\d+> '/' <day=\d+> }; say "ssss2024/11/22bbb" ~~ /<intl-date>/

[08:15] <camelia> rakudo-moar fd29555b1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> my token intl-date { <year=⏏\d+> '/' <month=\d+> '/' <day…»

[08:15] <Xliff> m: my token intl-date { <year>=\d+ '/' <month>=\d+ '/' <day>=\d+ }; say "ssss2024/11/22bbb" ~~ /<intl-date>/

[08:15] <camelia> rakudo-moar fd29555b1: OUTPUT: «===SORRY!===␤Unrecognized regex metacharacter = (must be quoted to match literally)␤at <tmp>:1␤------> my token intl-date { <year>⏏=\d+ '/' <month>=\d+ '/' <day>=\d+ }; sa␤Malformed regex␤at <tmp>:1␤------> my token intl-d…»

[08:16] <Xliff> m: my token intl-date { $<year>=\d+ '/' $<month>=\d+ '/' $<day>=\d+ }; say "ssss2024/11/22bbb" ~~ /<intl-date>/

[08:16] <camelia> rakudo-moar fd29555b1: OUTPUT: «｢2024/11/22｣␤ intl-date => ｢2024/11/22｣␤  year => ｢2024｣␤  month => ｢11｣␤  day => ｢22｣␤»

[08:18] <Xliff> SmokeMachine: Here's what I am trying to do... I'm trying to get a rule to match a substring where the rule will match in the middle. .subparse wants it to match at the beginning. Any ideas?

[08:22] <Xliff> Unfortunately this brings up anonymous subs and the fact that they are methods on the Grammar, and the Grammar isn't around at MY:: level so they all fail an anonymous type check.

[08:22] <Xliff> Wish there was a way for a Grammar to match a fucking substring!

[08:26] <timo> isn't .subparse for that?

[08:26] <timo> i mean, apparently not but isn't it supposed to?

[08:26] <Xliff> Subparse matches from start but does not have to match until end.

[08:26] <Xliff> I would like to be proven otherwise.

[08:27] <timo> and you probably can't just .substr first?

[08:27] <Xliff> No, because hoiw can I .substr if I don't know where the date starts in the str!

[08:27] <timo> but you could / .* &MyGrammar::TheRule / or however you have to spell that for it to work

[08:27] <Xliff> I could make wild guesses, but that wouldn't be robust.

[08:28] <Xliff> timo: Um. Worth a try... but how DO you spell that! :)

[08:28] <Xliff> And what happens if your rules include other rules? Those other rules fail an anonymous type check!

[08:28] <timo> they are not supposed to :|

[08:29] <Xliff> OK. Take a look at github.com/Xliff/datetime-parse.git

[08:29] <timo> m: grammar Test { regex TeTest { "foo" } }; say "hello my foo" ~~ / .* &Test::TeTest /

[08:29] <camelia> rakudo-moar fd29555b1: OUTPUT: «Nil␤»

[08:30] <Xliff> Then see if you can figure out why this one goes wrong: raku -Ilib -e 'use DateTime::Parse; my &m = DateTime::Parse::Grammar.^find_method("intl-date"); &m.gist.say; say "2022/11/23" ~~ &m'

[08:30] <timo> m: grammar Test { regex otherTeTest { "foo" }; regex TeTest { <otherTeTest> } }; say "hello my foo" ~~ / .* <&Test::TeTest> /

[08:30] <camelia> rakudo-moar fd29555b1: OUTPUT: «Cannot resolve caller INTERPOLATE_ASSERTION(Match:D: Any:U, BOOTInt, BOOTInt, BOOTInt, BOOTInt, PseudoStash:D); none of these signatures matches:␤    (Match $:: Associative:D, $, $, $, $, $, *%_)␤    (Match $:: Iterable:D \var, int \im, int \monke…»

[08:30] <timo> is that the one you mean?

[08:30] <Xliff> Nope.

[08:30] <Xliff> Type check failed in binding to parameter '<anon>'; expected DateTime::Parse::Grammar but got Match

[08:30] <Xliff> (Match.new(:orig("202...)

[08:30] <Xliff>   in regex intl-date at /home/cbwood/Projects/datetime-parse/lib/DateTime/Parse.rakumod (DateTime::Parse) line 134

[08:31] <Xliff> But yours was way more spectacular!

[08:31] <Xliff> 8)

[08:35] <timo> sorry i only looked at the last few lines and now i have to AFK again so i won't be able to chase this all the way right now

[08:35] <timo> > [...] int \monke… [...]

[08:35] <Xliff> No worries. It will be in your scrollback. Ping me if you find anything?

[08:35] <timo> mhhh ... monke ...

[08:36] <timo> oh hey

[08:36] <timo> m: grammar Test { regex otherTeTest { "foo" }; regex TeTest { <otherTeTest> } }; say "hello my foo" ~~ / .* <Test::TeTest> /

[08:36] <camelia> rakudo-moar fd29555b1: OUTPUT: «｢hello my foo｣␤ Test::TeTest => ｢foo｣␤  otherTeTest => ｢foo｣␤»

[08:37] <timo> there you go Xliff i hopethat's good enough?

[08:41] <Xliff> timo: Thanks! Let me check. I'll ping you with the results. Testing now.

[08:42] <Xliff> YATA!!! \o/

[08:42] <Xliff> timo: Thanks!!!! 

[08:43] <timo> cool

[08:46] *** sena_kun joined
[08:46] <SmokeMachine> m: use DateTime::Parse; say "ssss2022-11-23" ~~ /<DateTime::Parse::Grammar::date5>/

[08:46] <camelia> rakudo-moar fd29555b1: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Could not find DateTime::Parse in:␤    /home/camelia/.raku␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst…»

[08:46] <SmokeMachine> :(

[08:47] <timo> camelia doesn't have modules installed, but perhaps evalable does?

[08:50] <SmokeMachine> m: grammar DateTime::Parse::Grammar {token date5 {$<year>=[\d**4] "-" $<month>=[\d**2] "-" $<day>=[\d**2]}}; say "ssss2022-11-23" ~~ /<DateTime::Parse::Grammar::date5>/

[08:50] <camelia> rakudo-moar fd29555b1: OUTPUT: «｢2022-11-23｣␤ DateTime::Parse::Grammar::date5 => ｢2022-11-23｣␤  year => ｢2022｣␤  month => ｢11｣␤  day => ｢23｣␤»

[08:52] <SmokeMachine> timo: do you need the .* there?

[08:52] <SmokeMachine> m: grammar Test { regex otherTeTest { "foo" }; regex TeTest { <otherTeTest> } }; say "hello my foo" ~~ / <Test::TeTest> /

[08:52] <camelia> rakudo-moar fd29555b1: OUTPUT: «｢foo｣␤ Test::TeTest => ｢foo｣␤  otherTeTest => ｢foo｣␤»

[08:52] <timo> i guess not

[08:54] <SmokeMachine> timo: and thank you for the `<Complete::NS::method>`... muth better than the `.^find_method`...

[08:54] <timo> :)

[08:56] <SmokeMachine> Xliff: about using the DataTime::Parse::Grammar, that worked here: https://usercontent.irccloud-cdn.com/file/btBWhlyr/image.png

[08:57] <Xliff> SmokeMachine: So no need for the .*? Thanks!

[08:57] *** Manifest0 joined
[08:57] <discord-raku-bot> <antononcube> “DateTime::Grammar” is better!!

[08:59] *** dakkar joined
[09:01] <SmokeMachine> this worked here too: `use DateTime::Grammar; say "ssss2022-11-23" ~~ /<DateTime::Grammar::date-spec>/`

[09:06] *** sena_kun left
[09:06] <discord-raku-bot> <antononcube> @Xliff “Wish there was a way for a Grammar to match a fucking substring!” — multiple ways to do that.

[09:20] *** sena_kun joined
[10:21] *** sena_kun left
[10:49] *** librasteve_ joined
[11:23] <Xliff> antoncube: You were reading my mind! I swore I left the f-word out of the chat!

[11:24] <Xliff> OK, so is there any way I can override multi sub infix:<+> (Duration, Duration)?

[11:31] <lizmat> what's wrong with multi sub infix:<+> (Duration, Duration) ?

[11:47] <Xliff> It will get confused about two confusing candidates.

[11:58] <lizmat> m: say (now - now) + (now - now)

[11:58] <camelia> rakudo-moar fd29555b1: OUTPUT: «-0.000288204␤»

[11:59] <lizmat> I don't see a confusion?

[11:59] <Xliff> m: multi sub infix:<+> (Duration $a, Duration $b) is export { $a - $b }; say Duration.new(3) - Duration.new(4)

[11:59] <camelia> rakudo-moar fd29555b1: OUTPUT: «-1␤»

[11:59] <Xliff> Huh. 

[12:00] <Xliff> I must be missing something then...

[12:01] <lizmat> m: multi sub infix:<+> (Duration $a, Duration $b) is export { $a - $b }; say Duration.new(3) + Duration.new(4)

[12:01] <camelia> rakudo-moar fd29555b1: OUTPUT: «Ambiguous call to 'infix:<+>(Duration, Duration)'; these signatures all match:␤  (Duration:D $a, Duration:D $b) from SETTING::src/core.c/Duration.rakumod line 48␤  (Duration $a, Duration $b) from <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:01] <lizmat> m: multi sub infix:<+> (Duration $a, Duration $b) is export is default { dd; $a - $b }; say Duration.new(3) + Duration.new(4)

[12:01] <camelia> rakudo-moar fd29555b1: OUTPUT: «sub+{<anon|1>} infix:<+>(Duration $a, Duration $b)␤-1␤»

[13:26] *** swaggboi joined
[13:32] <guifa> Xliff: both me and codesections had a pretty extensive discussion embedding grammars which may be useful .... but I can't remember exactly where it was

[13:33] <guifa> but basically I'd make a grammar, get it to do exactly what you want.  Then export a token that calls that Grammar::TOP 

[13:33] <guifa> then use that token wherever you want with its far more convenient name 

[13:43] *** merp joined
[14:01] <discord-raku-bot> <antononcube> @Xliff Ditto what @guifa said -- see the section "FEN sub-parser" in this notebook: https://github.com/antononcube/RakuForPrediction-book/blob/main/Notebooks/Jupyter/ChessMaster-LLM-persona.ipynb

[14:02] <discord-raku-bot> <antononcube> It section shows three different ways to extract text fragments from text blobs using grammars.

[14:03] <discord-raku-bot> <antononcube> This code fragment corresponds to what @guifa and @SmokeMachine advised:  with $txt.match( /<FEN::Grammar::TOP>/, :g) { $/».Str }; 

[14:05] <discord-raku-bot> <librasteve> this topic would be great for an advent post - maybe worth a couple of episodes - it would help me to have somewhere to look up that's memorable since I need this about once or twice a year ;-)

[14:15] <timo> weekly: https://asciinema.org/a/kN82JXZd4hJWBIAzvQ6CcxJmb

[14:15] <notable6> timo, Noted! (weekly)

[14:16] *** orangebot left
[14:16] *** orangebot joined
[14:17] *** renormalist left
[14:17] *** renormalist joined
[14:22] <Geth> ¦ Papers/main: 1902ac052d | (Elizabeth Mattijsen)++ | minutes/20241116.md

[14:22] <Geth> ¦ Papers/main: Add RSC meeting minutes for 2024-11-16

[14:22] <Geth> ¦ Papers/main: review: https://github.com/Raku-Steering-Council/Papers/commit/1902ac052d

[14:24] <discord-raku-bot> <antononcube> @librasteve I plan to discuss that in grammar-based extraction from text-blobs. (Obtained by interacting with LLMs.) But that would be just one of the ingredients of the process described.

[14:25] <discord-raku-bot> <antononcube> @lizmat I would like to mention that "Graphviz::DOT::Grammar" is a new package. (From last week.)

[14:26] <discord-raku-bot> <antononcube> BTW, @librasteve , I made "Graphviz::DOT::Grammar" in order to have easier integration of Graphviz with Jupyter notebooks. But of  Raku HTML notebook are "figured out" that seems to come for free.

[14:28] <discord-raku-bot> <librasteve> don't expect that that will be figured out by the OP - but maybe they can give is a message layer to eg https://cro.raku.org/docs/reference/cro-websocket-message

[14:32] <discord-raku-bot> <antononcube> Well, no, I didn't and do not expect the OP to figure it out. 🙂 How interested are you to figured it out though? I think I will first support HTML notebooks for literate programming, with " Text::CodeProcessing", and then try to figure out the "interactivity."

[14:35] <discord-raku-bot> <librasteve> it's definitely of interest --- I would say on my radar for next year --- I think that the rest of this years raku tuits are focused on getting a handle on reproducible / extensible websites with raku ...

[14:37] <discord-raku-bot> <librasteve> ... quite soon I would like to get Rainbow (or similar raku code highlighting) and Cro working so that would be maybe aligned to a "Sakurn" project

[14:37] <discord-raku-bot> <librasteve> [Sakurn == Jupyter, but with raku inside ... geddit?]

[14:38] <timo> phew! that's a thick pun

[14:38] <discord-raku-bot> <antononcube> 🙂 👍

[14:39] * timo googles whether saturn's atmosphere is thicker or thinner than jupiter's

[14:39] <discord-raku-bot> <librasteve> prbably thinner

[14:39] <discord-raku-bot> <antononcube> How about "RakuIo", or any other Jupyter moon derivative?

[14:40] <discord-raku-bot> <librasteve> (less mass since Jupiter is largest planet)

[14:40] <timo> ... rakullisto ...

[14:40] <discord-raku-bot> <antononcube> Right!

[14:41] <discord-raku-bot> <librasteve> surely there should be a 'y' in it

[14:41] <discord-raku-bot> <antononcube> Presumably, "Jupyter" is an acronym of "Julia, Python, and R". So, a name that is just with Raku is fine.

[14:42] <timo> huh i never thought of that

[14:44] <discord-raku-bot> <librasteve> oh - that's right (according to perplexity)

[14:44] <timo> wikipedia says so, so it must be true

[14:44] <discord-raku-bot> <antononcube> Yeah, the Jupyter creator got inspired from Mathematica, and decided to use JSON instead of M-expressions. In the article/interview with him I remember reading about the name itself...

[14:46] <discord-raku-bot> <antononcube> I am surprised you two did not just take my word for it and went on to verify my statement !!!

[14:46] <discord-raku-bot> <librasteve> trust, but verify

[14:47] <timo> truify

[14:47] <discord-raku-bot> <antononcube> Yeah, using certain very trustworthy sources...

[14:47] <discord-raku-bot> <librasteve> I am surprised you don't like my Sakurn idea

[14:47] <discord-raku-bot> <antononcube> I have to find that article/interview -- I have referred to it more a few times by now...

[14:48] <discord-raku-bot> <librasteve> well perplexity references wikipedia as it's source

[14:48] <timo> https://speakerdeck.com/fperez/project-jupyter?slide=3 slide deck from 2014 from fernando perez

[14:48] <timo> sakurn is a fun name

[14:48] <discord-raku-bot> <antononcube> It is not that I do not like "Sakurn." It is more about possible misreadings and "bastartizations."

[14:49] <timo> don't call it IRaku unless you want people to think of the IRA

[14:52] <discord-raku-bot> <antononcube> What I am saying is that the planet reference -- Jupiter -- comes from the notebook's scope for languages. I.e. you can call that Raku notebook solution "Harmony", and that is a more faithful following of the naming process. (For Jupyter.)

[14:54] <timo> if we want to go with something based on planets, why stay in our solar system? :D

[14:54] <discord-raku-bot> <antononcube> Absolutely! For example, "Nebula" is a more appropriate name. (For anything Raku related.)

[14:55] <timo> raku is supposed to be a hundred year language. what celestial objects are in reach if we are willing to take a hundred year trip? depends on the amount of thrust our theoretical vehicle could sustain

[14:56] <orangebot> Andromeda?

[14:57] <discord-raku-bot> <antononcube> Rakumeda, too.

[14:58] <discord-raku-bot> <antononcube> @orangebot You should like my choice of default colors for highlights in graphs.

[14:59] <orangebot> oh excellent

[15:02] *** zetaaaa joined
[15:04] <discord-raku-bot> <antononcube> @orangebot Which one is excellent? "Rakumeda", or the orange highlights in "Graph" and "JavaScript::D3" ?

[15:06] <orangebot> The orange highlights especially. Kind of on the edge for Rakumeda.

[15:09] <discord-raku-bot> <antononcube> Some people say that steel blue and orange are usind in the web too much, but that is precisely the reason I use them.

[15:27] *** yewscion joined
[15:30] *** yewscion left
[15:31] *** yewscion joined
[16:12] *** zetaaaa left
[16:20] <renormalist> Dropping in more space names: Vega. There is even a movie reference for it: Contact (1997). And a wikipedia page which sounds nice: https://en.wikipedia.org/wiki/Vega - Though not sure about cool Portmanteaus to build with Raku.

[16:22] *** teatime joined
[16:23] <Geth> ¦ App-Rakubrew/main: d6bf01f391 | (Patrick Böker)++ | 2 files

[16:23] <Geth> ¦ App-Rakubrew/main: Implement `exec --with`

[16:23] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/d6bf01f391

[16:23] <Geth> ¦ App-Rakubrew/main: e702f2e0e9 | (Patrick Böker)++ | lib/App/Rakubrew.pm

[16:23] <Geth> ¦ App-Rakubrew/main: Add some docs about installing via CPAN

[16:23] <Geth> ¦ App-Rakubrew/main: 

[16:23] <Geth> ¦ App-Rakubrew/main: Thanks jeffgazso for the hint and snippet!

[16:23] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/e702f2e0e9

[16:26] <discord-raku-bot> <antononcube> What are the associations with "Vega"?

[16:30] <discord-raku-bot> <antononcube> Since the Vega star corresponds to the goddess for weaving, that names is epecially good for Literate Programming projects: - https://en.wikipedia.org/wiki/Zhinü - https://en.wikipedia.org/wiki/Literate_programming#Workflow

[16:52] <Geth> ¦ advent/main: 2b654f5d85 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | raku-advent-2024/authors.md

[16:52] <Geth> ¦ advent/main: Claim slots 10 and 25

[16:52] <Geth> ¦ advent/main: review: https://github.com/Raku/advent/commit/2b654f5d85

[16:54] *** abraxxa-home joined
[16:55] <discord-raku-bot> <antononcube> @lizmat and @tbrowder I have figured out the code for my first post for Raku Advent 2024 (titled "LLM chess playing" or similar.) I "just" have to write the  corresponding explanations.

[16:55] <lizmat> ++antononcube

[16:56] <discord-raku-bot> <antononcube> Here is the notebook: https://github.com/antononcube/RakuForPrediction-book/blob/main/Notebooks/Jupyter/ChessMaster-LLM-persona.ipynb

[16:56] <discord-raku-bot> <antononcube> Again, not finished -- code only at this point.

[16:56] <Geth> ¦ App-Rakubrew/main: 680022f033 | (Patrick Böker)++ | lib/App/Rakubrew.pm

[16:56] <Geth> ¦ App-Rakubrew/main: Fixup `exec --with`

[16:56] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/680022f033

[16:56] <Geth> ¦ App-Rakubrew/main: a3e16152b0 | (Patrick Böker)++ | lib/App/Rakubrew/Shell.pm

[16:56] <Geth> ¦ App-Rakubrew/main: Auto-complete `exec --with`

[16:56] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/a3e16152b0

[16:56] <Geth> ¦ App-Rakubrew/main: b9791d388a | (Patrick Böker)++ | script/rakubrew

[16:56] <Geth> ¦ App-Rakubrew/main: Document `exec --with`

[16:56] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/b9791d388a

[16:58] <Geth> ¦ App-Rakubrew/main: 07903669c8 | (Patrick Böker)++ | 3 files

[16:58] <Geth> ¦ App-Rakubrew/main: Version 40

[16:58] <Geth> ¦ App-Rakubrew/main: review: https://github.com/Raku/App-Rakubrew/commit/07903669c8

[17:07] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/11/18/2024-45-rainbow-butterfly/

[17:07] <discord-raku-bot> <librasteve> yay

[17:12] <discord-raku-bot> <librasteve> arrakis, merak, karaka from https://en.m.wikipedia.org/wiki/List_of_proper_names_of_stars

[17:31] <Geth> ¦ rakubrew.org: 116705da5b | (Patrick Böker)++ | resources/homepage.md.tmpl

[17:31] <Geth> ¦ rakubrew.org: Add `exec --with` documentation

[17:31] <Geth> ¦ rakubrew.org: review: https://github.com/Raku/rakubrew.org/commit/116705da5b

[17:33] *** hellwolf left
[17:34] *** hellwolf joined
[17:36] *** dakkar left
[18:00] *** orangebot left
[18:05] *** dpk left
[19:34] <ab5tract> So comma `beta 29` should resolve the issue with installing on 2024.3

[19:35] <ab5tract> however, building the plugin based off of 2024.3 (which is what was required) causes at least two regressions in functionality

[19:36] <ab5tract> if that's the pace of unexpected breakage in was-just-working code that is waiting for us in the future...

[19:36] <discord-raku-bot> <antononcube> Getting it now.

[19:37] <discord-raku-bot> <antononcube> Oh, see beta-29 is not posted yet.

[19:38] <ab5tract> it must still be generating

[19:38] <ab5tract> https://github.com/ab5tract/comma-plugin/releases/tag/v2.0-beta.29

[19:41] <discord-raku-bot> <antononcube> Downloaded it, installed it, and opened a Raku project -- no problems.

[19:42] <ab5tract> Glad to hear it. Wish it were the same for me :)

[19:43] <ab5tract> If you do notice any, please give a shout here or on github

[19:48] <discord-raku-bot> <antononcube> Sure!

[19:48] *** kaskal left
[19:51] *** sena_kun joined
[19:52] *** kaskal joined
[20:01] *** abraxxa-home left
[20:02] <ab5tract> ah, phew! it looks like the regressions I saw were related to something else

[20:05] *** bdju left
[20:07] *** bdju joined
[20:13] *** kaskal- joined
[20:15] *** kaskal left
[20:22] *** kaskal- left
[20:22] *** kaskal joined
[20:31] *** librasteve_ left
[21:57] <sjn> 

[22:00] *** sena_kun left
[22:28] *** Aedil left
[23:29] *** yewscion left
[23:52] *** Chanakan left
[23:54] *** zetaaaa joined
[23:56] *** Chanakan joined
