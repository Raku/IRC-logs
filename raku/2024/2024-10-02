[00:22] *** gfldex left
[00:32] *** eseyman left
[00:33] *** eseyman joined
[00:35] *** guifa left
[00:43] *** gfldex joined
[01:25] *** guifa joined
[01:39] *** Aedil joined
[01:47] *** hulk joined
[01:49] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[04:22] *** guifa left
[04:32] *** floyza joined
[05:30] *** Sgeo left
[06:38] *** Tirifto left
[07:12] *** floyza left
[07:37] *** sena_kun joined
[08:02] *** wayland76 joined
[08:05] *** jjido joined
[08:19] *** dakkar joined
[08:53] *** jjido left
[09:21] *** Tirifto joined
[11:21] *** holyghost joined
[12:24] *** merp left
[12:29] *** merp joined
[13:38] *** guifa joined
[14:01] *** acidsys left
[14:25] *** acidsys joined
[14:47] *** guifa left
[14:54] *** guifa joined
[15:54] <guifa> huh

[15:54] <guifa> I got an interesting bug report

[15:56] <guifa> https://github.com/alabamenhu/TestInline/blob/master/lib/Test/Inline.pm6

[15:56] <guifa> fails because the subs don't have access to the @tests variable.  Declaring it with our makes it work

[16:35] <timo> does exporting a sub actually give it a different outer?

[16:35] *** dakkar left
[16:37] <timo> that would be surprising for sure

[16:45] <timo> guifa: the test in that repo succeeds for me locally. what's your rakudo version? can you share the code in which it breaks?

[16:55] <timo> maybe the test file in the repo is not similar enough to how it's going to end up being used? with a package inside that uses Test::Inline and the unit outside that uses Test::Inline :testing

[17:20] <guifa> timo: it's from a bug report, they said that the test was failing.  Going ahead and installing latest rakudo to see if I can recreate

[17:35] <guifa> huh yeah succeeds for me

[17:35] <guifa> also lol at my readme

[17:36] <guifa> "If no issues are found, I'll bump version to 1.0 at the end of 2020."

[17:36] * guifa checks calendar

[17:36] <discord-raku-bot> <nijmegenzuigt> yes?

[17:36] <discord-raku-bot> <nijmegenzuigt> it"s not the end of 2020 is it

[17:37] <discord-raku-bot> <nijmegenzuigt> programmer equivalent of starting a download and then checking if you have enough disk space, ez mistake ðŸ˜›

[17:46] *** Aedil left
[17:53] <patrickb> timo: All the meat of pty transformation in tmux is in https://github.com/tmux/tmux/blob/master/input.c. Haven't gone through it in detail, but what I have seen aligns with my expectency. I.e. chug through the input and modify some internal screen representaion accordingly.

[17:54] <patrickb> Terminal::Print already gives me a nice Grid datastructure that can afterwards be put anywhere on the screen. So I start to get the feeling that I know how the pieces should come together.

[17:55] <discord-raku-bot> <nijmegenzuigt> thats how ATi also started

[17:58] <timo> ATI, the graphics card manufacturer that's now part of AMD?

[18:00] <tbrowder> hi, i'm using Proc "run" with zef to query loaded module status and wonder if using Proc::Async might be faster.

[18:01] <lizmat> that feels like a micro-opt at the expense of maintainability

[18:14] *** guifa left
[18:33] <timo> have you considered "use Zef::Client" or something like that?

[18:39] <[Coke]> I use Zef::Client in https://github.com/coke/raku-zef-deps/blob/main/lib/App/Zef-Deps.rakumod, it's pretty easy.

[18:51] <tbrowder> i looked at that briefly and wasnâ€™t sure if it provided what i needed, but if i can use it to check a list of installed modules and their versions and uodate if required and remove if not, then itâ€™s good!

[18:51] <tbrowder> thanks!

[18:53] *** jjido joined
[19:12] *** jjido left
[21:05] <wayland76> Hi all.  In my module, the 5 links at the bottom of the page work on github ( https://github.com/wayland/Raku-TOP?tab=readme-ov-file ), but not on raku.land ( https://raku.land/zef:wayland/TOP ).  Does anyone have any tips on how to make them work on both?  

[21:33] <[Coke]> They're relative, and the relative links just don't exist on raku.land (even in another location, you can't view that source file there.)

[21:33] <[Coke]> You'll have to use absolute URLS in the readme for that to work.

[21:33] <[Coke]> e.g. https://github.com/wayland/Raku-TOP/blob/main/docs/Markdown/Class/CSV.md

[21:34] <[Coke]> Not ideal. Other suggestion is to maybe implement a fix on raku.land source that detects when urls are relative to the source code repository and IT corrects them. (probably the better solution but will no doubt take some time)

[21:36] *** Guest45 joined
[21:37] *** tailgate left
[21:39] *** tailgate joined
[21:42] *** thowe left
[21:43] *** thowe joined
[21:46] <wayland76> That's what I was afraid of.  Thanks for your help :) 

[21:48] <wayland76> Are we talking about https://gitlab.com/raku-land/raku-land that's written in Go?  

[21:56] <[Coke]> there's some go in there, i think, but i think it's primarily written in raku

[21:56] <[Coke]> But yes, that's the project URL for raku.land

[22:01] <El_Che> I see distribution files for raku, go and js :)

[22:20] <wayland76> OK.  It says that the HTML rendering step is called gmark, and uses goldmark and Chroma.  I look in the gmark directory, and the one file there is called main.go.  So it looks like that part of it is still written in go.  

[22:33] *** Sgeo joined
[23:04] *** wayland76 left
[23:16] *** guifa joined
[23:22] *** sena_kun left
