[01:22] *** SrainUser joined
[01:23] <SrainUser> How do I import a function from a local raku file?

[01:28] <SrainUser> I typed "unit module foo" and "is export" for the file to export the function. I typed "use foo" as an import statement for the other file. I get an error saying it could not find foo.

[01:37] <timo> if it's a local file, you'll need to tell rakudo to look locally, usually by supplying `-I folder` (which shouldn't be a huge folder, like your entire home directory, because it will be scanned)

[01:38] <timo> if you're in a module, meaning you have a META6.json, that's where you'd have to have an entry for your module foo in the "provides" section

[01:44] *** guifa joined
[01:44] <SrainUser> So a module in a file requires a META6.json file to tell raku to import from the current working directory?

[01:46] <timo> no, there's a third way which is `use lib ".";` or `use lib "thefolder";` in the raku script

[01:49] <timo> it will look for files named with .rakumod extension by default

[01:52] <timo> gnite!

[01:57] <SrainUser> It still does not find any module inside the ".rakumod" file. All I typed was "use lib ".";" and "use foo;"

[02:00] <timo> mkdir /tmp/srainmodule; cd /tmp/srainmodule; echo "unit module foo; sub footest() is export { say 'success'; }" > foo.rakumod; echo "use lib '.'; use foo; footest()" > main.raku; rakudo main.raku

[02:00] <timo> this one-liner works on my end

[02:00] <timo> i've got to go sleep now, maybe this helps

[02:02] <timo> if you set RAKUDO_MODULE_DEBUG=1 in the environment, rakudo will output debug lines related to module loading, it should have lines in it like "Successfully handled 'lib' as a pragma", "try-load source at ./foo.rakumod", and near the end "Performing imports for 'foo'" and "Imports for 'foo' done"

[02:02] <timo> if it doesn't, maybe seeing where the success runs out helps figure out what's wrong

[02:03] <SrainUser> Okay, Goodnight

[02:03] <timo> o/

[02:22] <SrainUser>   I figured it out. The filename of the ".rakumod" file must be the name of the module it contains.

[02:44] <guifa> xinming: I should make a module Token::IP-String

[02:44] <guifa> Would go nicely with a project I'm workin gon anyways

[02:55] *** kylese left
[02:56] *** kylese joined
[03:15] *** kylese left
[03:15] *** kylese joined
[04:44] *** Aedil joined
[05:24] <Xliff> Anybody out there? .... out there....... out there ....... out there

[05:25] <Xliff> How can I turn the integer 123456789012345 into its representative bytes?

[05:26] <Xliff> m: Bub.allocate(10).write-uint64(123456789012345).gist.say'

[05:26] <Xliff> m: Bub.allocate(10).write-uint64(123456789012345).gist.say

[05:26] <camelia> rakudo-moar ebecbeafa: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> ).write-uint64(123456789012345).gist.say<HERE>'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier…»

[05:26] <camelia> rakudo-moar ebecbeafa: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    Bub used at line 1. Did you mean 'Sub', 'Buf'?␤␤»

[05:26] <Xliff> m: Buf.allocate(10).write-uint64(123456789012345).gist.say

[05:26] <camelia> rakudo-moar ebecbeafa: OUTPUT: «Too few positionals passed; expected 3 or 4 arguments but got 2␤  in block <unit> at <tmp> line 1␤␤»

[05:26] <Xliff> m: Buf.allocate(10).write-uint64(123456789012345, 0).gist.say

[05:26] <camelia> rakudo-moar ebecbeafa: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 123456789012353 bytes␤»

[05:26] <Xliff> m: Buf.allocate(10).write-uint64(0, 123456789012345).gist.say

[05:26] <camelia> rakudo-moar ebecbeafa: OUTPUT: «Buf:0x<79 DF 0D 86 48 70 00 00 00 00>␤»

[05:26] <Xliff> Oh, nevermind.

[05:28] <Xliff> m: Buf.allocate(10).write-uint64(0, 123456789012345, BigEndian).gist.say # since intel is insane

[05:28] <camelia> rakudo-moar ebecbeafa: OUTPUT: «Buf:0x<00 00 70 48 86 0D DF 79 00 00>␤»

[06:05] *** guifa left
[06:42] *** samebchase joined
[06:46] *** Sgeo left
[08:38] <xinming> m: my $s = "hello"; (S/hel/aaa/ with $s).say; (S/hel/bbb/ given $s).say;

[08:38] <camelia> rakudo-moar e7f9223c5: OUTPUT: «aaalo␤bbblo␤»

[08:39] <xinming> In this example, they both work, So the only diff between 'with' and 'given' are, 'with' will try to test the definied'ness of the $s, 'given' will always do the S///   Is my understanding right?

[08:52] *** sena_kun joined
[08:57] <Xliff> Yep.

[08:57] <Xliff> my $a; (S/Aaa/bbb/ given $a).say

[08:57] <Xliff> m: my $a; (S/Aaa/bbb/ given $a).say

[08:57] <camelia> rakudo-moar e7f9223c5: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤(Any)␤  in block  at <tmp> line 1␤»

[09:05] *** Xliff left
[09:21] <xinming> got it, thanks.

[12:38] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/12/30/2024-53-mutant-pirate-rings/

[15:57] *** MoC joined
[16:18] <discord-raku-bot> <antononcube> Is there any Raku module that tells (computes or retrieves) what are sunrise and sunset times of certain city or time zone?

[17:54] <tbrowder> antononcube: see Astro::Sunrise

[18:01] <lucs> Module loading question: https://gist.github.com/lucs/911dec0edc4df4a262c5a400dd365ef1

[18:05] <ugexe> probably because you are running code that prints in the mainline of a module

[18:05] <ugexe> which would get run during precompilation

[18:05] <lucs> Hmm...

[18:06] <lucs> Ah.

[18:07] <lucs> I can avoid doing that doctor.

[18:07] <lucs> Shouldn't hurt anymore :)

[18:09] *** Altai-man joined
[18:11] *** bartolin left
[18:12] *** bartolin joined
[18:12] <lucs> Heh. When I first noticed it was doing that, I kept trying to modify the code to see what was going on, resulting in a new precomp each time, and the same result.

[18:12] <lucs> Running it as is, no duplication.

[18:12] *** sena_kun left
[18:12] *** rypervenche left
[18:13] *** rypervenche joined
[18:23] <discord-raku-bot> <antononcube> @tbrowder Thank you!

[18:45] *** MoC left
[19:23] *** Aedil left
[19:38] <xinming> Is it possible to die when var ia uniniailized?

[19:39] <timo> depending on where in your code it is you have multiple ways to do it

[19:39] <timo> you can have a :D type smiley on the type of the variable, then an assignment with an undefined value will throw an exception

[19:42] <xinming> It's not assignment, It's just when I try to print a string, the string has many vars, So it reports one of them uninitialized. I want the script to die with use of that var when print

[19:44] <timo> ah, your print is a long command with a bunch of variables in it, and any one of them might be undefined?

[19:44] <timo> you are currently getting an "use of uninitialized value in string context" error?

[19:45] <xinming> Yea

[19:45] <xinming> Use of uninitialized value element of type Any in string context

[19:46] <xinming> I want to die with the variable name, So I can dump context to see what happened

[19:47] <timo> ok not sure how exactly to get the variable name, but you can put `CONTROL { die "dieing because of this warning: $_" };` in front

[19:48] <ugexe> doesn't have to be in front

[19:49] <xinming> Thanks for the CONTROL phaser

[19:49] <xinming> Will try

[19:51] <timo> CONTROL runs when any warning is emitted in the dynamic context of your function, which may be more than you want

[19:51] <timo> also not just warnings are control exceptions

[19:51] <timo> you may want to match on the type in $_ being CX::Warn

[20:00] *** Altai-man left
[20:03] *** sena_kun joined
[20:31] *** Sgeo joined
[20:36] *** xinming left
[20:38] *** xinming joined
[20:45] *** xinming left
[21:20] *** guifa joined
[22:30] <tbrowder> yw

[22:30] <tbrowder> hope it works for your needs

[22:39] <discord-raku-bot> <antononcube> I am making a Doomsday Clock, in Raku.

[22:41] <discord-raku-bot> <antononcube> But, the clock gauges can be utilized for showing, say, the times at different capitals. I want to also indicate with the color of the clock-faces is it night or day.

[22:53] *** sena_kun left
[22:56] *** yewscion joined
[23:03] *** yewscion_ joined
[23:03] *** yewscion left
[23:39] <coleman> The only winning move is not to play

