[00:17] *** bdju left
[00:38] *** sorenson joined
[00:39] <sorenson> Does anyone here use NixOS and have suggestions on how to use Zef/Raku modules on NixOS? 

[00:43] <discord-raku-bot> <antononcube> ü§∑‚Äç‚ôÇÔ∏è

[01:28] *** kylese left
[01:29] *** kylese joined
[01:43] *** guifa left
[01:47] *** MasterDuke joined
[01:50] <tbrowder> i need to extract N items from an array into another array. i can do that with shift and push one item at a time.

[01:51] <MasterDuke> splice

[01:51] <tbrowder> ah, thnx.

[01:55] <tbrowder> yep, right at the end with prepend after shift and friends in the docs, i always stop reading too soon

[02:09] *** guifa joined
[02:13] *** Xliff left
[02:15] *** kylese left
[02:15] *** kylese joined
[03:10] *** guifa left
[03:12] *** Aedil joined
[05:30] *** Sgeo left
[05:53] *** derpydoo joined
[06:15] *** guifa joined
[06:19] *** guifa left
[07:43] *** sena_kun joined
[07:54] *** dakkar joined
[08:22] *** derpydoo left
[08:24] <lizmat> re splice: a pattern that I frequently use for "push this to an array, move the whole array to another array and clean out the original array, is:

[08:24] <lizmat> my @b := @a.push("foo").splice;

[08:35] *** derpydoo joined
[09:17] <ab5tract> also with the current splice implementation its worth pointing out that you have to be pretty verbose when splicing in arrays as elements

[09:17] <ab5tract> m: my @a = 1,2,3; @a.splice(1,1,[$[5,6],]); dd @a

[09:17] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, [5, 6], 3]‚ê§¬ª

[09:18] <ab5tract> working on cleaning this up for 6e

[09:31] *** sena_kun left
[09:50] *** derpydoo left
[10:50] <tbrowder> lizmat: thnx. the docs are confusing to me. i finally get how to remove elements, but it's not clear how to capture those removed. the docs do say returns but i can't do: @b = @a.splice(2); also the term is misleading: splice to me means join things, not remove things

[10:51] <lizmat> well, the name was inherited from Perl

[10:52] <lizmat> and the part of taking out is followed by a part of joining

[10:52] <tbrowder> m: my @a = 1,2,3; my @b := @a.splice(2);

[10:52] <camelia> rakudo-moar 24bc8f41e: ( no output )

[10:54] <lizmat> m: my @a = 1,2,3; my @b := @a.splice(2); dd @a, @b

[10:54] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2]‚ê§[3]‚ê§¬ª

[10:55] <lizmat> m: my @a = 1,2,3; my @b := @a.splice(2); dd @a, @b; @b.push(42)

[10:55] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2]‚ê§[3]‚ê§¬ª

[10:55] <lizmat> m: my @a = 1,2,3; my @b := @a.splice(2); dd @a, @b; @b.push(42); dd @b

[10:55] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2]‚ê§[3]‚ê§[3, 42]‚ê§¬ª

[10:55] <lizmat> m: my @a = 1,2,3,4,5; my @b := @a.splice(2,1); dd @a, @b; @b.push(42); dd @b

[10:55] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 4, 5]‚ê§[3]‚ê§[3, 42]‚ê§¬ª

[10:57] <tbrowder> m: my @a =1,2,3; my @b := @a.splice(2); dd @b; dd @a;

[10:57] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[3]‚ê§[1, 2]‚ê§¬ª

[11:00] <tbrowder> m: my @a = 1,2,3; my @b.push(@a.slice(2)); dd @a; dd @b:

[11:00] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 3]‚ê§No such method 'dd' for invocant of type 'Array'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:01] <lizmat> m: m: my @a = 1,2,3; (my @b).push(@a.slice(2)); dd @a; dd @b:

[11:01] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 3]‚ê§No such method 'dd' for invocant of type 'Array'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:01] <lizmat> m: m: my @a = 1,2,3; (my @b).push(@a.slice(2)); dd @a; dd @b;

[11:01] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 3]‚ê§[(3,).Seq,]‚ê§¬ª

[11:02] <lizmat> m: m: my @a = 1,2,3; (my @b).append(@a.slice(2)); dd @a; dd @b;

[11:02] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 3]‚ê§[3]‚ê§¬ª

[11:05] <tbrowder> m: my @a = 1,2,3; my @b = @a[0..^2];  @a.slice(2); dd @a; dd @b;

[11:05] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 3]‚ê§[1, 2]‚ê§¬ª

[11:06] <tbrowder> ??

[11:13] <lizmat> that's .slice, not .splice

[11:15] <tbrowder> erg...

[11:17] <tbrowder> m: my @a =1,2,3; my @b = @a[0..^2]; @a.splice(2); dd @a; dd @b;

[11:17] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2]‚ê§[1, 2]‚ê§¬ª

[11:20] <tbrowder> m: my @a=1,2"3; @a.slice(2); dd @a

[11:20] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> my @a=1,2‚èè"3; @a.slice(2); dd @a‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§        st‚Ä¶¬ª

[11:21] <tbrowder> m: my @a = 1,2,3; @a.slice(2); dd @a

[11:21] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[1, 2, 3]‚ê§¬ª

[11:27] <tbrowder> ok, tink i got it...

[11:28] <tbrowder> m: my @a=1,2,3; my @b = @a.splice(0,2); say @a.raku; say @b.raku

[11:28] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´[3]‚ê§[1, 2]‚ê§¬ª

[11:28] <lizmat> perhaps "eject" would be a better name than "splice"

[11:30] <tbrowder> fer sure!

[11:30] *** MasterDuke left
[11:30] <tbrowder> remove, extract

[11:31] <tbrowder> slice

[11:31] <tbrowder> pare

[11:32] <tbrowder> or add a number to pop and shift

[11:32] <lizmat> pop and shift only work from the end / start

[11:34] <tbrowder> yes, but that's my main use here. i'm given a list of names that need to be removed 8 at a time to make a sheet of name tags.

[11:34] <tbrowder> etc.

[11:36] <tbrowder> while @names.elems >= 8 { my @list = @names.shift(8); ...}

[11:39] <tbrowder> i'll bet a popsicle that would be a popular addition to Raku

[11:44] <tbrowder> seriously, it should be easy to do and be within the spirit of current core routine names

[11:50] <lizmat> @list.batch(8)   

[11:58] <lizmat> tbrowder: ^^

[12:18] <tbrowder> hm...ex

[12:21] <tbrowder> ok, but it doesn't remove the elements

[12:22] <tbrowder> didn't know about .batch

[12:24] <tbrowder> oh, i see...

[12:26] <tbrowder> that will work for me. just have to experiment a bit. thnx! (but i still like pop and shift with numbers)

[12:28] <tbrowder> for now i'll just use the splice 'cause it works better for my brain...

[12:35] <dutchie> is there an easy way to do something like `sub MAIN(Int $i)` and have it accept negative numbers? i think it's assuming they are option arguments and then complaining they aren't recognised

[12:39] <lizmat> sub MAIN(Int $i where $i < 0)

[12:46] *** jgaz joined
[13:04] <discord-raku-bot> <nahita3882> raku your_prog.raku -- -75 is an option; "--" is used to signal that flags are over, rest are positional direct arguments and particularly useful when your arg starts with a dash

[13:11] <discord-raku-bot> <antononcube> @lizmat The best ChatGPT model produces long and wrong answer of your splice-pattern stated above:

[13:11] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1277978781847523451/To-splice-or-not-well-not-working.png?ex=66cf21fd&is=66cdd07d&hm=b47147e41883ff4b7274854fa0acc3584a55fe04ebab70eed0078af20fab3bd5&

[13:11] <discord-raku-bot> <antononcube> Other of OpenAI's ChatGPT produce similiar non-working results.

[13:13] <dutchie> yeah, -- is an option but kind of annoying when I know the program doesn't accept any options at all, just a single numeric argument that might be positive or negative

[13:13] <lizmat> s/push/append would make it more correct

[13:14] <discord-raku-bot> <nahita3882> dutchie: you also have the option to supply a custom ARGS-TO-CAPTURE

[13:14] <lizmat> multi sub MAIN(Int $i where $i < 0)   ??

[13:14] <discord-raku-bot> <nahita3882> lizmat: constraint isn't the issue; it's that -12 is parsed as "12" => True as an argument, i.e., a flag

[13:14] <lizmat> aaah... ok

[13:14] <dutchie> I was wondering if ARGS-TO-CAPTURE was going to be the answer

[13:14] <discord-raku-bot> <nahita3882> dutchie: sub ARGS-TO-CAPTURE(&, @args) { \(@args.head.Int) } is an example

[13:15] <dutchie> mm, that looks plausible

[13:42] *** Geth joined
[14:06] <tbrowder> lizmat: on second thought, batch should work fine.

[14:07] <lizmat> also: if you have 8 items of information, you might want to consider creating a class for it  :-)

[14:07] <lizmat> .oO( what was the age field again: element 5 or 6? )

[14:10] <tbrowder> nah, each element is a string ‚Äúfirst last‚Äù for a label, 2 labels per row, 4 rows per Letter page

[14:11] <tbrowder> may be diff for A4

[14:12] <tbrowder> but, would you accept a raku issue to add pop/shift wit numeric args?

[14:13] <tbrowder> single positive int

[14:13] <tbrowder> not zero

[14:14] <lizmat> would be more like a problem solving issue I'd say, implementation would be trivial

[14:14] <tbrowder> ok

[14:16] *** silug left
[14:24] *** silug joined
[14:31] <discord-raku-bot> <librasteve> hi folks, I am trying to improve my functional style coding skills, but struggling with this (see code in this gist https://gist.github.com/librasteve/fb6b375259f28e36bb9a1f0a370d19f4)

[14:31] <[Coke]> whew. my m2 mac was only booting into recovery mode last night and I couldn't get it back - tried reinstalling the OS, disk fix, nothing. It rebooted cleanly today.

[14:32] <[Coke]> (-12) I have a similar issue with needing to support 'cal -3'

[14:33] <discord-raku-bot> <librasteve> the bit I would like a steer on is lines 47-49 ... seems like the cleanest I can do is to repeat the variable names three times ... maybe if there was an attribute pair syntax :$^name on same lines as :$!name for OO attrs I would be able to cut from 3x to 2x... any f/back very welcome

[14:34] *** mearp joined
[14:34] <mearp> \n

[14:34] <discord-raku-bot> <librasteve> [Coke] did you health check the SSD? was it running hot?

[14:35] <[Coke]> there was no way to check that from recovery screen that I could see.

[14:35] <discord-raku-bot> <librasteve> whew indeed - maybe a trip to the Apple store genius bar?

[14:35] <discord-raku-bot> <librasteve> well I meant after it came back

[14:35] <[Coke]> It did say that the root volume was encrypted, which I was suprised about

[14:35] <discord-raku-bot> <antononcube> @librasteve "I am trying to improve my functional style coding skills [...]" -- Start using Mathematica more often.

[14:35] <discord-raku-bot> <librasteve> hmmm a coding language you have to pay for

[14:36] <discord-raku-bot> <antononcube> No, not true, I keep correcting these kind of statements here.

[14:37] <discord-raku-bot> <antononcube> Wolfram Engine (https://www.wolfram.com/engine/) is free for developers. Requires developer registration with email.

[14:37] <lizmat> m: say "camelCase".subst( / <lower>+ )> <upper>/, {$/.tc ~ " "}) ~ ": "'

[14:37] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> wer>+ )> <upper>/, {$/.tc ~ " "}) ~ ": "‚èè'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§‚Ä¶¬ª

[14:38] <lizmat> m: say "camelCase".subst( / <lower>+ )> <upper> /, { $/.tc ~ " " }) ~ ": "

[14:38] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case: ‚ê§¬ª

[14:40] <lizmat> librasteve why use subst here?  $name.subst( /(.*)/, {"<.$0>"} );

[14:40] <lizmat> "<.$name>"  would do the trick, no ?

[14:41] <lizmat> also:

[14:41] <lizmat> @names.map: *.&camel2label;  can be written as:

[14:41] <lizmat> @names.map: &camel2label;

[14:41] <lizmat> aka, no need for the *.

[14:42] <discord-raku-bot> <librasteve> I think my small business counts as a business for Wolfram audit purposes ... anyway free as in birds not just free as in beer

[14:43] <discord-raku-bot> <antononcube> Sure. But we were talking about improving functional programming skills. (Not business products.)

[14:51] <discord-raku-bot> <librasteve> lizmat: thanks for the tips, the last two are good, the first mayhave been mangled by Discord

[14:52] <lizmat> https://gist.github.com/lizmat/baa0a17630da90a04d1df1f7bead1be7

[14:53] <discord-raku-bot> <librasteve> oh - looks up )>

[14:55] <discord-raku-bot> <librasteve> m:  say "camelCaseMoreBits".subst( / <lower>+ )> <upper> /, { $/.tc ~ " " }) ~ ": "

[14:55] <evalable6__> librasteve, rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel CaseMoreBits: ‚ê§¬ª

[14:55] <discord-raku-bot> <Raku eval>  Camel CaseMoreBits:  

[14:55] <discord-raku-bot> <librasteve> oh - the capture marker

[14:56] <lizmat> yup

[14:57] <discord-raku-bot> <librasteve> thanks!

[14:58] <lizmat> yw!

[14:58] <lizmat> m: say "camelCase".subst( / <.lower>+ )> <.upper> /, { $/.tc ~ " " }) ~ ": "

[14:58] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case: ‚ê§¬ª

[14:59] <lizmat> the lower / upper don't need capturing, so don't  :-)

[14:59] <lizmat> should help if this is in a hot loop

[14:59] <lizmat> m: say "camelCase".subst( / <.lower>+ )> <.upper> /, { "$/.tc() " }) ~ ": "

[14:59] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case: ‚ê§¬ª

[15:00] <lizmat> alternate subst body

[15:01] <ab5tract> m: say "camelCase".subst( / <.lower>+ )> <.upper> /, { "$/.tc() " }) ~ ": "

[15:01] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case: ‚ê§¬ª

[15:01] <ab5tract> m: say "camelCase".subst: / <.lower>+ )> <.upper> /, { "$/.tc() " } andthen .Str ~ ": "

[15:01] <camelia> rakudo-moar 24bc8f41e: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Camel Case‚ê§Useless use of "~" in expression ".Str ~ \": \"" in sink context (line 1)‚ê§¬ª

[15:02] <ab5tract> huh... well, the parentheses bother my eyes when reading it, but the above is cleary not the solution :)

[15:08] <discord-raku-bot> <antononcube> I am not sure what the goal is, but this code does convert camelCase into Title Case:  "camelCaseMoreBits".match(/ ([<.lower>+]?) ([<upper> <.lower>+ ])+ /).values¬ª.Str.tc.raku # "Camel Case More Bits" 

[15:11] <discord-raku-bot> <librasteve> nice!

[15:24] <discord-raku-bot> <librasteve> m: "camelCaseMany".match(/ ([<lower>+]?) ([<upper> <lower>+ ])+ /)>>.tc.join(" ")~":"

[15:24] <evalable6__> librasteve, rakudo-moar 24bc8f41e: OUTPUT: ¬´WARNINGS for /tmp/_jdD_aTl6T:‚ê§Useless use of "~" in expression ".join(\" \")~\":\"" in sink context (line 1)‚ê§¬ª

[15:24] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of "~" in expression ".join(\" \")~\":\"" in sink context (line 1) 

[15:24] <discord-raku-bot> <librasteve> m: say "camelCaseMany".match(/ ([<lower>+]?) ([<upper> <lower>+ ])+ /)>>.tc.join(" ")~":"

[15:24] <discord-raku-bot> <Raku eval>  Camel Case Many: 

[15:24] <evalable6__> librasteve, rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case Many:‚ê§¬ª

[15:28] <discord-raku-bot> <antononcube> I think .tc is doing the joining for you.

[15:28] <discord-raku-bot> <librasteve> .oO

[15:28] <discord-raku-bot> <librasteve> m: say "camelCaseMany".match(/ (<:Ll>+) (<:Lu><:Ll>+)+ /)>>.tc~":"

[15:28] <evalable6__> librasteve, rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case Many:‚ê§¬ª

[15:28] <discord-raku-bot> <Raku eval>  Camel Case Many: 

[15:29] <discord-raku-bot> <librasteve> looks like capture () do [] grouping anyway

[15:29] <discord-raku-bot> <antononcube> Right, of course.

[15:32] <discord-raku-bot> <librasteve> m: say "camelCaseMany".match(/ (<lower>+) (<upper><lower>+)+ /)>>.tc~":"

[15:32] <discord-raku-bot> <Raku eval>  Camel Case Many: 

[15:32] <evalable6__> librasteve, rakudo-moar 24bc8f41e: OUTPUT: ¬´Camel Case Many:‚ê§¬ª

[15:32] <discord-raku-bot> <librasteve> just seeing if upper / lower are less line-noisy

[15:40] <discord-raku-bot> <antononcube> That case-conversion of code was the easiest for me to write Raku. In Mathematica, R, or Python, I had to think of (or "research") the possible solution much longer.

[15:53] <discord-raku-bot> <librasteve> yeah - there are many areas where I think raku is =~= to other langs - I don't know Mathematica or R at all, but I guess that its a bit of a horse race in many areas and that in certain areas, eg R is a lot stronger for analytics - but raku is the child of perl and perl was already the killer regex tool even before raku made "PCRE 2.0"

[16:34] *** dakkar left
[16:38] *** mearp left
[16:52] <tbrowder> librasteve: i have an ancient (circa 2009) website still running, mostly static (apache latest, perl, cgi) and wonder if htmx (and raku) might help me improve it if i can work on it in reasonable chunks)

[17:35] *** sena_kun joined
[18:16] <discord-raku-bot> <librasteve> tbrowder: I am enjoying working on Raku Cro versions of the HTMX examples ... I you would like to get a feel for it, then I suggest you go to https://github.com/librasteve/raku-HTMX-Examples and follow the Getting Started ... if you are feeeling intrepid why not pick one of the python HTMX examples that I haven't yet done and try you hand on that?

[18:29] *** vrurg_ left
[18:30] *** vrurg joined
[18:31] <discord-raku-bot> <antononcube> Speaking of Python to Raku conversions -- I rather program in R than in Python.

[18:31] <discord-raku-bot> <antononcube> But in the last 10 days, I did a fair amount Python programming (for free.)

[18:33] *** Aedil left
[18:34] <discord-raku-bot> <antononcube> Hopefully, these kind of computations and plots would be soon (readily) available in Raku:

[18:34] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1278059982461603944/temperature-data-outliers.png?ex=66cf6d9d&is=66ce1c1d&hm=76d81895991073fc2344dd14c93533df4168e73b5aa25c7b8cde7c994e3c44c2&

[18:36] <discord-raku-bot> <antononcube> (That plot was made with a Python package I published a few days ago.)

[20:59] <[Coke]> nifty: I would expect "hotter than normal" to be red.

[21:18] <discord-raku-bot> <antononcube> @Coke Agh, right! It is "just" the template used, called "plotly_dark".

[21:44] <tbrowder> librasteve: good idea!

[21:47] <tbrowder> lizmat: .batch is not working as i thought it would. i've gone back to: my @b = @a.aplice(0,2) and that does work. when i get time i'm gonna try submitting a problem-solving issue

[21:47] *** jgaz left
[21:50] *** sena_kun left
[21:52] <tbrowder> *splice

[22:49] *** Sgeo joined
[23:35] *** human_blip left
