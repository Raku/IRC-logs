[00:00] *** jpn joined
[00:04] *** jpn left
[00:25] *** Manifest0 left
[01:26] *** hulk joined
[01:27] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:49] *** jpn joined
[02:54] *** jpn left
[05:24] *** jmcgnh left
[05:30] *** jmcgnh joined
[06:00] *** Sgeo left
[06:11] *** abraxxa joined
[06:12] *** jpn joined
[06:16] *** abraxxa left
[06:16] *** abraxxa joined
[06:25] *** kotrcka joined
[06:40] *** jpn left
[06:47] *** jpn joined
[06:54] *** abraxxa left
[06:56] *** abraxxa-home joined
[07:05] *** abraxxa-home left
[07:06] *** abraxxa-home joined
[07:30] *** haxxelotto joined
[07:47] *** Manifest0 joined
[08:03] *** gordonfish left
[08:09] *** gordonfish joined
[08:19] *** sena_kun joined
[08:38] *** ptc left
[09:03] *** abraxxa-home left
[09:27] *** sena_kun left
[09:29] *** sena_kun joined
[09:29] *** sena_kun left
[09:33] *** haxxelotto left
[09:33] *** sena_kun joined
[09:34] *** sena_kun left
[10:11] <gfldex> I just realised that 3 years ago Raku wasn't found "in the wild" anywhere on youtube. The userbase is clearly one step closer to critical mass. Sadly, I do not know how many steps are left. :->

[10:21] <discord-raku-bot> <dr.shuppet> I wonder how people first learn about Raku

[10:21] <discord-raku-bot> <dr.shuppet> I learned about its existence through exploring Perl back in around 2015

[10:44] *** kotrcka left
[11:29] <tbrowder> my 2 cents: get raku in the schools in place of python

[11:35] <discord-raku-bot> <holmdunc> Sequel to the OLPC programme: OCPPC - One Camelia Plushie Per Child

[11:42] <discord-raku-bot> <dr.shuppet> tbrowder: That could work, but IMO unrealistic. I don't think anyone is going to replace Python, the most popular programming language by several indexes which is also simple enough to be used for teaching programming, with Raku, who they probably never heard of

[11:43] <discord-raku-bot> <dr.shuppet> At most, it will be a niche, like some universities used Scheme in the past for teaching programming - that does not help that much

[12:04] <tbrowder> i hopefully disagree. not overnight but, to me, the begginer simplicity of raku over python should be a winner. just get it on windows easily and problem free along the way

[12:14] <teatime> british people delete the letter H from words it should remain in

[12:14] <teatime> then they stick them in weird places, like beginning of the name of the letter H

[12:14] <teatime> ... sorry wrong window

[12:16] <lizmat> .oO( teathyme )

[13:18] <discord-raku-bot> <antononcube> @tbrowder "my 2 cents: get raku in the schools in place of python" -- No, bad idea.

[13:19] <discord-raku-bot> <antononcube> Raku is "opinionated" and too "strangely consistent".

[13:20] <discord-raku-bot> <antononcube> And, frankly, with its current ecosystem of packages Raku is not that useful.

[13:29] <greenfork> @antononcube What is bad about being opinionated and consistent for teaching in schools?

[13:31] <[Coke]> improving the ecosystem is a good idea. (either directly or through improved Inline:: access)

[13:44] <discord-raku-bot> <antononcube> @greenfork "What is bad about being opinionated and consistent for teaching in schools?" -- 1) Most people won't "get it" regardless of the efforts put in. 2) The ones who get it won't find jobs with Raku. 3) Yes, some transfer of programming skills is in place, but that does not justify embarking on Raku's steep and convoluted learning curve. 4)  Many typical tasks are faster to start and finish with other

[13:44] <discord-raku-bot> programming languages. 5) Currently, LLMs do not know Raku that well.

[13:51] <greenfork> Okay, let me try to go through that one by one, relative to other languages. 1) What would be an example of "not getting" it, that wouldn't apply to Python?

[13:52] <greenfork> 2) Jobs is mostly a popularity context, here I agree. At the same time "teaching programming" is not necessarily about jobs, e.g. 13 year old is not bothered by not getting a job

[13:52] <greenfork> 3) That is mostly related to point (2) I presume?

[13:53] <greenfork> 4) Probably an ecosystem improvement is in place, totally agreed

[13:53] <greenfork> 5) This is an interesting point, again the popularity contest but from another perspective

[14:17] <discord-raku-bot> <antononcube> @greenfork Point 1. was/is mostly about the general Raky philosopy, syntax, and language structure. From that POV, Python is "deceptively simplistic", but still fairly straightforward for initial programming problems.

[14:18] <discord-raku-bot> <antononcube> That 13 year old would be better off doing programming with Python, Mathematica, or Scratch, not Raku.

[14:19] <greenfork> And why is that?

[14:20] <discord-raku-bot> <antononcube> Correct programming code results by LLMs can be seen as popularity contest, or as indicators of under-use or under-documentation. In general, though, obviously LLMs are and going to be intensively applied in programming education.

[14:25] <greenfork> @antononcube about LLMs, how do you see them applied in education? I think they can be great at generating tasks and assignments. But really bad when they write the code instead of a student

[14:26] <discord-raku-bot> <antononcube> @greefork "And why is that?" 1) No decent and helpful IDE support for Raku.  2) Hard to do interactive experimentation.  3) No useful libraries for doing graphics or image processing. 4) No obvious and easy ways to program games. 5) No documentation with rich collections of worked out examples. 6) Hard to import and ingest data. 7) Hard to grasp language logic, syntax, and general philosophy.

[14:29] <greenfork> 2) Interactive experimentation -- Raku has a REPL and can fairly easy run simple scripts. I also saw Jupyter notebooks. What is missing there in your opinion?

[14:29] <discord-raku-bot> <antononcube> @greenfork "[...] But really bad when they write the code instead of a student" -- Maybe, depends on the programming language and the problem area. In many cases, even wrong LLM-generated code can produce good initial version / approximation of what has to written. (After that the success depends on the student...)

[14:31] <greenfork> What I meant by saying that it is bad, is that it mostly steals the opportunity of learning. It's like copying from StackOverflow -- it works but you don't understand a thing about it

[14:32] <discord-raku-bot> <antononcube> @greenfork  1) Have used Jupyter notebooks?  2) How easy was for you to install Jupyter and get a notebook running with a Raku kernel?  3) What kind of interactive help do you get about the Raku functionalities in the notebook?  4) Is there useful code highlighting?

[14:33] <discord-raku-bot> <antononcube> @greenform "It's like copying from StackOverflow -- it works but you don't understand a thing about it" -- No, it is not. With LLMs you can easily ask for explanations and clarifications and step-by-step built-up narration of a proposed solution.

[14:33] *** Sgeo joined
[14:33] *** milky_ joined
[14:35] <greenfork> I haven't used Jupyter notebooks at all, can't comment on that. I suspect the experience can be improved a lot

[14:38] <greenfork> @antononcube about explaining the code step-by-step -- I haven't thought about it. It is interesting on one hand, on another hand I'm not fully convinced that it is going to be that much of deal

[14:38] <greenfork> It is nice to have it nevertheless. But there's still going to be a teacher

[14:40] <greenfork> I can also dream that with time it will become easier to create specialized assistive LLMs, maybe we will have one for Raku, would be nice

[14:41] *** milky_ left
[14:43] <teatime> I think it's kinda weird and maybe not a sign of quality curriculum if a CS program teaches in a popular commercial programming language

[14:48] <discord-raku-bot> <antononcube> @teatime Interesting point. Most European programmers would think that. Generally speaking, USA is much more know-how oriented when it comes to education.

[14:49] <teatime> I'm american.  in general it sounds like you expect a CS degree to be vocational training.  and some of them are to a large degree.  others aren't like that at all though.  I'm pretty sure I think the second way makes the most sense however that's an opinion and there's arguments either way.

[14:51] <teatime> there's some weird disconnects between the qualifications available and the jobs available.

[14:54] <teatime> I figure the biggest lack in a graduating CS student looking to take an industry development job, is experience with large codebases.  hard to fit that into the years tho.  but a lot of CS programs would have exposed the student to a bunch of different languages in different courses.  which is probably better preparation than an entire program in Java, say

[14:54] <greenfork> Sometimes good workers are not good programmers, just average. And they are fine with that, it's a lot of money. And there are advantages of employing them as an employer too

[14:56] <discord-raku-bot> <antononcube> @greenfork "about explaining the code step-by-step -- I haven't thought about it. [...]" -- See an example here : https://youtu.be/mI-oWLz5dYY?si=MLwxrI6nbUx1q7Ta&t=428

[15:01] <discord-raku-bot> <antononcube> @teatime "there's some weird disconnects between the qualifications available and the jobs available." -- It might be related to the desires of the Managerial Class for self-expression.

[15:01] <teatime> heh.  wdym?

[15:03] <discord-raku-bot> <antononcube> @teatime2000 Well, that is somewhat cryptic, I guess.

[15:03] <teatime> I think I get it

[15:04] <teatime> but if I get it you kinda misunderstood me I think

[15:04] <discord-raku-bot> <antononcube> I am referring to managersâ€™ short attention span and desires for cheap solutions and workforce.

[15:05] <discord-raku-bot> <antononcube> @teatime2000 Please see the section "Capitalistic SAFe" here: https://pythonforprediction.wordpress.com/2022/09/18/breakdown-of-python-people-and-projects/

[15:05] <teatime> mm.  well I was more referring to the room seemingly available for a vocational/craftsman track into programming that isn't heavy on academics.

[15:05] <teatime> I used to really think that was kinda missing from the world, though degreeless autodiadact programmers like me used to be common.

[15:05] <discord-raku-bot> <antononcube> Yeah, I am/was referring to that too.

[15:05] <teatime> in my old age though I've realized how the lack of CS knowledge holds me back from being a generalist

[15:06] <teatime> I can do really good work but not on arbitrary projects.

[15:06] <greenfork> @antononcube thank you for the video. I think my idea is that usually you want to use LLMs for things you don't understand, and usually it means saying WHY instead of WHAT the code does

[15:07] <greenfork> LLMs certainly can do that, but to a lesser degree. And this degree is very important in the decision whether they are going to be useful in teaching, in my opinion

[15:07] <discord-raku-bot> <antononcube> This can done to point too with some of the LLMs that allow larger input. (Large number or tokens.)

[15:10] <discord-raku-bot> <antononcube> @greefork Here is an example of figuring out the WHY from a large (â‰ˆ55 min) presentation: https://rakuforprediction.wordpress.com/2024/04/06/wisdom-of-integrating-large-language-models-with-raku/

[15:11] <discord-raku-bot> <antononcube> If that is too boring try the propaganda finding post: https://rakuforprediction.wordpress.com/2024/04/07/propaganda-in-integrating-large-language-models-with-raku/

[15:12] <greenfork> Thank you very much! I will take a look

[15:33] <teatime> antononcube, basically I think it makes more sense for BS degrees not to be vocational training, but the vocational training vaccuum and degree inflation put pressure for them to move in that direction

[15:42] <discord-raku-bot> <antononcube> @coffeebreak There is also the plug-and-play mentality when comes to "white-collar" jobs in USA. Hence, know-how education.

[15:43] <discord-raku-bot> <librasteve>  1) Yes 2) I went to https://github.com/librasteve/raku-Dockerfiles and followed the instructions [docker run -it --platform linux/amd64 -p 8888:8888 librasteve/rakudo:ipyjk andthen jupyter notebook --port=8888 --no-browser --allow-root --ip=0.0.0.0] ... err that's it 3) None - but then I get none for Python either (talking about jupyter scipy notebook) 4) No - but then Python code highlighting only arrived

[15:43] <discord-raku-bot> recently afaict (NB. I like the idea of running Jupyter in the IDE, but I don't think that this is the mainstream consumption - and I am trying it on IntelliJ) 

[15:45] <discord-raku-bot> <librasteve> btw that gets you the full Jupyter ScoPy notebokk with all the standard NumPy and so on build (that you can call from raku)

[15:48] <discord-raku-bot> <librasteve> Generally I agree that raku has some gaps with the dev tools and the ecosystem, but it is no worse than most nascent languages have been and in many respects it is better

[15:51] <discord-raku-bot> <aruniecrisps> Raku is an incredibly well designed and thought-out language, and I generally find myself liking Raku far more than Python or Ruby for what it's worth

[15:52] <discord-raku-bot> <librasteve> On the IDE front, (1) we have an IDE you can download and use today "Comma" - the Complete version is open source. and free as in beer too. I expect that this situation will last for a while but that bitrot will set in unless the community takes on this base. Per previous conversations, I favour we put all our effort into making a better LSP for VScode and IntelliJ (and vi and emacs) since that enables raku to be a

[15:52] <discord-raku-bot> "side-project". But the main point here is that "what we have today is adequate".

[15:53] <discord-raku-bot> <aruniecrisps> Probably the biggest thing that stings for me about Raku is the speed

[15:55] <discord-raku-bot> <aruniecrisps> Even though Cro has hot-reloading it's been an order of magnitude slower than other libraries/frameworks I've worked with

[15:57] <discord-raku-bot> <antononcube> Good to know!

[15:58] <discord-raku-bot> <librasteve> On the ecosystem front, (2) I think we are doing OK (B-) but that we have some way to go. There are 2312 and counting modules on raku.land and many bases are well covered (matrix math, PDF, JSON, XML, etc). With HB and Cro we have both ends of the web server covered (Cro is amazingly innovative! HB does the job for the less ambitious) ... and we have very strong NaticeCall and Inline::Perl5 and Inline::Python. I

[15:58] <discord-raku-bot> hear a lot of complaints about the latter two - but imo they are currently very solid and mean that (with a little effort) no coding situation cannot be covered. My personal ambition is to fill the Data Analytics requirement with Dan::Pandas (which is about 50% done) and in the meantime all of Pandas is available via Inline::Python (thus the Dockerfile)

[16:00] <discord-raku-bot> <antononcube> I have never been able to install "Inline::Perl5" and "Inline::Python" -- every time I try I give up thinking "what a waster of time." And they seem to be abandoned -- their issues are not tackled for years.

[16:03] <discord-raku-bot> <librasteve> @arun - there have been some comparisons to perl5 + Moose +++ all the other things that raku does and imo raku is OK ish for compile speed (Rust is a lot slower) - I know you are probably talking about execution speed, here I agree that we have work to do ... the RakuAST program is a massive undertaking and not ready ... but the long term goal is to give the VM more context to do a better job with JITting the code

[16:03] <discord-raku-bot> - I am not sure if that was the best decision in hindsight vs using LLVM or even JVM. So yes that is a negative that will only slowly ameliorate as machines in general get faster.

[16:03] <discord-raku-bot> <antononcube> @arun Do you have any observations of how fast is to query Web services via Cro? In general or in comparison to other systems.

[16:06] <discord-raku-bot> <librasteve> there are some wrinkles to install Inline::Python ... you can see the deps needed here https://github.com/librasteve/raku-Dockerfiles/blob/main/scipy/Dockerfile

[16:06] <discord-raku-bot> <librasteve> can't say I've ever had an issue with Inline::Perl5 ... happy to help debug your setup

[16:07] <discord-raku-bot> <librasteve> I know that niner had to stop work on the Inline:: modules and that there are some issues ... but I have happily run many Pandas examples that way with no trouble

[16:11] <discord-raku-bot> <librasteve> BUT - the goal of a language like raku (and early Python) is to make the developer faster, not necessarily to build the fastest code ... nowadays you would want Rust or Zig for that, right? And one cool thing about Raku is that there is excellent support for concurrency and no GIL so you do get to use all your cores ... like Python a glue language like raku must rely on native libraries for most of its speed.

[16:15] <discord-raku-bot> <librasteve> Anyway - I think that getting Raku to replace Python (eg in the classroom) is a challenge, but I do think (i) that there are a lot of Python folks and that (ii) a small fraction <<1% may be interested in a better alternative. So to interest and attract that small percentage, raku has some cool capabilities.... and we need to continue to improve how we get the word out there.

[16:15] <discord-raku-bot> <aruniecrisps> I generally agree, I love Cro, I think it's incredibly innovative and it makes a lot of things easier to do. It's just the reload times are painful, it takes like 5-7 seconds to reload any particular

[16:15] <discord-raku-bot> <librasteve> Oh and on the ecosystem front, raku has some very cool LLM modules I can recommend ;-)

[16:16] <discord-raku-bot> <antononcube> ðŸ’¯ ðŸ¤– ðŸ’¯ ðŸ¤– ðŸ’¯ ðŸ¤–

[16:20] <discord-raku-bot> <librasteve> I am curious whether the localized versions of raku (Welsh, Russian and so on) have any (niche) interest - maybe we should try and get Dragonu on BBC Wales?

[16:20] <discord-raku-bot> <librasteve> (or whatever it called)

[16:26] <greenfork> @librasteve I'm teching my wife programming, decided to go with Raku, I thought about Russian localization, the main problem is that in all languages that have more than 26 letters in the alphabet

[16:27] <greenfork> the keyboard doesn't have enough symbols for things like !@#$$%^&*. Programming would require a custom keyboard setup, which is presumably harder than just using English

[16:28] <discord-raku-bot> <antononcube> @greenfork Tell us if that brings vows renewal. (Or otherwise...)

[16:31] <greenfork> I will :^)

[16:33] <discord-raku-bot> <antononcube> Localization is of the programming language per se is not that important. But using LLMs with non-English languages to generate Raku code is something that has to be investigated and verified.

[16:38] <tbrowder> ref keyboards, can anyone recommend a good aux one for unicode? i would like to enter either hex or dec code and get the char on the terminal line (i can do it in emacs but...)

[16:40] <tbrowder> hm, just remembered i just learned how in vi, very easy

[17:09] <discord-raku-bot> <librasteve> vi >> emacs

[17:32] *** itaipu left
[17:37] *** itaipu joined
[18:12] *** jpn left
[18:13] *** jpn joined
[18:26] *** jpn left
[18:33] *** jpn joined
[18:37] *** jpn left
[18:40] <jdv> teatime: you dont think autodidcats still happen?

[18:44] *** Manifest0 left
[19:33] *** jpn joined
[19:33] *** Manifest0 joined
[19:40] <tbrowder> librasteve: i use vi only for remote use but should learn to use it more. what do you think about a graphical vi app?

[19:53] *** ericst joined
[19:57] *** ericst left
[20:04] <discord-raku-bot> <antononcube> @tbrowder "what do you think about a graphical vi app?" -- that is Jupyter. (And it is clunky and annoying.)

[20:18] *** haxxelotto joined
[20:38] <discord-raku-bot> <librasteve> vi ne Jupyter :)

[20:43] *** jpn left
[20:59] *** sena_kun joined
[21:05] *** Sgeo left
[22:43] *** bdju left
[22:45] *** bdju joined
[22:47] *** sena_kun left
[23:06] *** teatime left
[23:20] *** bdju left
[23:20] *** bdju joined
