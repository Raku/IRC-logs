[00:42] *** tadzik left
[00:52] <discord-raku-bot> <antononcube> @calma 1) hi; 2) ok; 3) no; 4) depends on your interests .

[01:22] *** tadzik joined
[01:57] *** calma joined
[01:57] *** hulk joined
[01:57] *** kylese left
[02:05] <discord-raku-bot> <scullucs> I'm so unhappy (refraining from swearing here) with all the "smart"  formatting helpers out there.

[02:06] <discord-raku-bot> <scullucs> Be it Markdown, Pod, whatever, they always get in the way of what I'm trying to do.

[02:15] *** hulk left
[02:15] *** kylese joined
[02:26] *** calma left
[02:30] *** kylese left
[02:35] *** kylese joined
[02:41] <discord-raku-bot> <scullucs> Maybe I'm just ignorant.

[02:42] <discord-raku-bot> <scullucs> Here's what I want to do:

[02:42] <discord-raku-bot> <scullucs> Paragraph reads:

[02:42] <discord-raku-bot> <scullucs> There are also variations of the methods where their name can be changed by either, or both:

[02:42] <discord-raku-bot> <scullucs> (doing Pod here)

[02:43] <discord-raku-bot> <scullucs> I want that to be followed by three indented paragraphs describing those variations.

[02:44] <discord-raku-bot> <scullucs> But if I indent the paragraphs in Pod, they get formatted as 'code' and all the C<baz> stuff appears literally.

[02:46] <discord-raku-bot> <scullucs> Can this be done?

[02:46] <discord-raku-bot> <scullucs> Indenting a paragraph?

[02:46] <discord-raku-bot> <scullucs> Just indenting a paragraph?

[03:20] <discord-raku-bot> <scullucs> Haha! Okay, ignorant I am. In desperation, I prefixed each paragraph with -  and they got indented (at least with the shell script that converts the Pod to Markdown then to HTML -- not sure how robust that all is).

[04:43] *** skyesoss joined
[05:08] *** wayland left
[05:08] *** wayland joined
[05:26] *** skyesoss left
[06:08] *** Aedil left
[07:01] *** sena_kun joined
[07:43] *** calma joined
[08:10] *** calma left
[08:19] *** Sgeo left
[08:23] *** Aedil joined
[08:32] *** Aedil left
[09:33] *** Aedil joined
[11:13] *** xinming left
[11:15] *** xinming joined
[13:00] <tbrowder> scullocs: the rendering from pod to Markdown is a basic translator and i don't think a random '-' is significant in pod so it doesn't get any special handling.

[13:02] <tbrowder> you should be able to indent =item blocks which is kind of like indenting paras

[13:06] <tbrowder> try:

[13:10] <tbrowder> following your intro para, skip a line and start your first subpara with "item blah blah", skip a line and start subpara "=item blah..." etc.

[13:18] <discord-raku-bot> <antononcube> @lizmat It did not occur to me to do a poll. And after you pointed that out, now I see the poll button... üôÇ

[13:19] <lizmat> TYL  :-)

[13:22] <discord-raku-bot> <antononcube> Thank You, Lord!

[13:22] <lizmat> Today You Learned ?

[13:23] <discord-raku-bot> <antononcube> Ten Years Later -- it did't take me that long...

[13:23] <discord-raku-bot> <antononcube> @lizmat üôÇ I figured  -- so, TYL on "TYL", also.

[13:24] <discord-raku-bot> <antononcube> @lizmat and @librasteve I deleted my previous post on Reddit -- thank you for your comments on it!

[13:25] <discord-raku-bot> <antononcube> My new Reddit post has a proper poll. (As prompted by lizmat.)

[13:25] <lizmat> :-)

[13:27] *** foxieze joined
[13:27] *** foxieze left
[14:15] *** hulk joined
[14:15] *** kylese left
[14:57] <lucs> tbrowder: Turns out that ‚Äπraku --doc=Markdown ‚ü®rakumod file‚ü©‚Ä∫ converts "=item Subpara..." to "  * Subpara...", but leaves "- Subpara..." unchanged.

[14:57] <lucs> But coincidentally, both forms get converted to "<li><p>Subpara‚Ä¶" in HTML produced by ‚Äπmarkdown-calibre ‚ü®Markdown file‚ü©‚Ä∫.

[14:57] <lucs> Not that I want "list item" indented paragraphs, but that will do.

[14:59] <lucs> (I'll use "=item ...", it's more meaningful than "- ..." -- thanks for the tip.)

[16:59] <tbrowder> lucs: can you show a gist of your pod file? something doesn't sound right.

[17:00] <[Coke]> ok, I like rak, but it definitely takes longer to install than ack. :)

[17:02] <tbrowder> and the second transformation is a different ballgame

[17:06] <tbrowder> with the =item you can create something like a titled subpara if you use =begin item followed immediately by a line with a subpara title, then a blank line, then paras separated by blank lines, finally a =end item closes it

[17:24] <lizmat> [Coke]: there's quite a lot tests, have you tried with --/test

[17:27] <[Coke]> I hesitate to do that, but yah, makes sense.

[17:28] <lizmat> BTW,  the next release of App::Rak will allow you to specify: "s:foo &!bar" as a search query

[17:28] <lizmat> the s: for split on spaces for multiple queries

[17:29] <lizmat> the & to indicate the next needle should be and-ed with the previous, instead of or-ed

[17:29] <lizmat> and the ! means: should not

[17:29] <lizmat> so in other works: give me all the lines that contain "foo" but not "bar"

[17:30] *** xinming left
[17:30] <lizmat> *words

[17:30] <discord-raku-bot> <antononcube> @lizmat Maybe a guide why using "App::rak" is more efficient than ack might convince Coke to rak it.

[17:32] *** xinming joined
[17:47] *** Sgeo joined
[17:47] *** eseyman left
[17:52] *** manu_ joined
[17:52] *** manu_ is now known as eseyman

[17:57] *** xinming left
[17:59] *** xinming joined
[18:47] *** tadzik left
[18:47] *** tadzik joined
[18:56] <[Coke]> a guide is not necessary

[18:56] <[Coke]> change is annoying. I'm still using ack v1 muscle memory

[18:59] <lizmat> [Coke]: with the --save feature you can adapt rak to match your ack muscle mempry

[18:59] <lizmat> *memory

[19:00] <lizmat> and if you do, please publish your list of aliases, I may well put that into rak as a feature

[19:01] <lizmat> e.g. --ack   : accept all following arguments with ack semantics

[19:01] <lizmat> hmmm...

[19:06] *** rypervenche left
[19:06] *** rypervenche joined
[19:11] <lucs> tbrowder: It's this file (er, I'd said it was a rakumod file, but it's actually a rakudoc): https://github.com/lucs/Debugging-Tool/blob/main/lib/Debugging/Tool.rakudoc

[19:11] <lucs> At line 101 is the first of three '=item'.

[19:12] <lucs> That file rendered to Markdown is https://github.com/lucs/Debugging-Tool/blob/main/README.md

[19:46] <discord-raku-bot> <antononcube> @Coke "a guide is not necessary",  "change is annoying." -- This means a guide to ease the change is necessary.

[19:56] <[Coke]> ... no

[19:56] <[Coke]> it's not annoying -because I don't have a guide-

[19:57] <[Coke]> having a guide -will not make it less annoying-. I already know how to use rak. :)

[19:57] <[Coke]> but I appreciate you trying to help me out. thank you

[19:58] <lizmat> https://github.com/lizmat/App-Rak/issues/53  [Coke] 

[19:59] <discord-raku-bot> <antononcube> @Coke Honestly, I am looking for an excuses to revisit and extend this post/work: https://rakuforprediction.wordpress.com/2023/08/15/tldr-llm-solutions-for-software-manuals/

[19:59] <lizmat> afk&

[20:07] <[Coke]> lizmat: You don't have to do that for me, I'm not sure I'd use that.

[20:07] <[Coke]> But again I appreciate you.

[20:21] *** donaldh joined
[20:22] *** donaldh left
[20:23] <discord-raku-bot> <librasteve> @antononcube I voted

[20:24] <discord-raku-bot> <antononcube> Yes, please ‚Äúvote often, and vote early.‚Äù

[20:31] *** Aedil left
[20:36] <tbrowder> lucs: are you happy with the results of the =items? they look okay to me. buit i do notice the later chunk of examples in the large code block need # in front of the internal comments.

[20:39] <lucs> tbrowder: Yes, I'm okay with the '=item' renderings.

[20:44] <lucs> The missing '#' are not accidental. The reader will have to think for half a second to realize that those lines are not code that should be commented out, but just comments.

[20:45] <tbrowder> ah, i see. did i help or hinder?

[20:46] <lucs> Suggesting '=item' helped, it makes my Pod better than the '- ' I had found to render similarly.

[20:47] <tbrowder> how do you actially generate the Markdown README?

[20:48] <tbrowder> *actually

[20:48] <lucs> I did 'raku -doc=Markdown .../Tool.rakudoc'

[20:50] <lucs> And I realized this afternoon that doing 'rakudoc Debugging::Tool' won't show the contents of the Tool.rakudoc file :-(

[20:51] <lucs> I'm guessing there's a good chance that can be arranged, but I have no idea how.

[20:51] <tbrowder> reason i ask is your code looks like using App::Mi6 would help you do that automatically. i started using it when it was introduced some years ago and love it. @lizmat does too!

[20:52] <tbrowder> i'll be happy to help if you'll accept a PR?

[20:52] <lucs> Um, I do it kind of automatically, I'm Perl-lazy, so I wrote shell scripts to do it for me :)

[20:52] <tbrowder> arg!!

[20:53] <lucs> No worries, it works fine.

[20:54] <lucs> But like I said I would like to know how to get that Tool.rakudoc file rendered when invoking 'rakudoc Debugging::Tool'.

[20:55] <tbrowder> ok, but you're missing out. among other things it make testing and publishing real easy. for instance, you want to rebuild all your docs: mi6 build

[20:56] <tbrowder> are your shell scripts in the repo?

[20:56] <lucs> I used to use mi6. I don't anymore, but I used to. (sorry Mitch Hedberg)

[20:57] <lucs> No, they're not.

[20:57] <lucs> I understand where you're leading, and you're probably correct.

[20:58] <tbrowder> do you mind saying why you quit mi6? it's improved a lot since skaji first released it

[20:58] <lucs> I can't remember. I should look at it again, it has been a while.

[21:01] <tbrowder> for instance, a one-liner in yr dist.ini file can turn the pod in one file to its own Markdown. add more one-liners for other inputs

[21:02] <tbrowder> more complex stuff can also be done

[21:04] <lucs> Yeah, it would make things better self-contained.

[21:20] *** sena_kun left
[21:57] <[Coke]> having trouble golfing this, but have a script that is erroring with:

[21:57] <[Coke]> No such method 'mutate' for string '`*%args`,'

[21:59] <[Coke]> (the code is:             $word = $word.mutate(:g, /<-alpha>+/, " ").words[0];

[22:09] <discord-raku-bot> <antononcube> @Coke Is subst doing what you want?

[22:10] <[Coke]> ... wait, mutate is just wrong, I had subst-mutate at one point and incorrectly updated it.

[22:11] <[Coke]> ... why is only dying after so many values of $word?! weird.

[22:11] <discord-raku-bot> <antononcube> I just read in the docs that subst-mutate is obsolete...

[22:13] <[Coke]> Yup, used it in a oneliner, tried to update it in the script, and ... what a strange failure mode.

[22:14] <[Coke]> (ah. maybe it was the first file being tested that met any of the conditions (but not literally the first file in the list))

[22:23] <discord-raku-bot> <antononcube> ü§∑‚Äç‚ôÇÔ∏è

[22:25] <[Coke]> that was it. sorry for the spam

[22:40] <[Coke]> weird. using subtest and in some case it's nesting the subtest instead of completing it

[22:42] <ab5tract> Maybe I'm holding things wrong, but this looks like a deeply insidious bug to me...

[22:42] <ab5tract> m: say from-json(to-json(%( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] ) ))<array>[0]

[22:42] <camelia> rakudo-moar 87065a329: OUTPUT: ¬´{d => {e => f}}‚ê§¬ª

[22:42] <ab5tract> that should be `%( i => "d", a => %( b => "c" ), d => %( e => "f" ))`

[22:43] <ab5tract> this also happens with JSON::Fast, I haven't checked other libraries yet

[22:44] <ab5tract> doesn't matter if you change things to `{ }` brackets, either

[22:46] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0]; 

[22:46] <camelia> rakudo-moar 87065a329: OUTPUT: ¬´{a => {b => c}, d => {e => f}, i => d}‚ê§¬ª

[22:48] <tbrowder> ref my roundtrip problems the other day, they seem to be solved.  using :bin on all pertinent files tested now seems to work. part of my badness was awkward use of slurp and spurt. i implememted subs slurp-file and spurt-file to have stricter control over the inputs.

[22:48] <ab5tract> sigh, I guess I'm holding it wrong, but it's late and the subtlety absolutely escpaes me...

[22:48] <ab5tract> m: my %h; %h<array>.push: %( i => "d", a => %( b => "c" ), d => %( e => "f" )); say from-json(to-json(%h))<array>[0];  say %h ~~ %( array => [ %( i => "d", a => %( b => "c" ), d => %( e => "f" ))] )

[22:48] <camelia> rakudo-moar 87065a329: OUTPUT: ¬´{a => {b => c}, d => {e => f}, i => d}‚ê§False‚ê§¬ª

[22:52] <[Coke]> <-alpha> is "not alpha". how to combine with <-digit> in the same class?

[22:56] <ugexe> <-alpha -digit> ?

[22:56] <ugexe> (i am indeed guessing)

[22:59] <ab5tract> into a single class, not sure (but also curious why that would be necessary?)

[22:59] <ab5tract> m: "9e" ~~ /<-alpha>&<-digit>/ ==> say()

[22:59] <camelia> rakudo-moar 87065a329: OUTPUT: ¬´Nil‚ê§¬ª

[23:02] <ab5tract> surprised this didn't work:

[23:02] <ab5tract> m: "9e" ~~ /<!:L+:!N>/ ==> say()

[23:02] <camelia> rakudo-moar 87065a329: OUTPUT: ¬´ÔΩ¢eÔΩ£‚ê§¬ª

[23:02] <ab5tract> but I'm frustrated enough at the moment so I'll avoid diving deeper

[23:02] <ab5tract> I hope you find a suitable solution [Coke]

[23:03] <ugexe> m: for " ", 1, "a" { say so $_ ~~ m/<-alpha -digit>/ }

[23:03] <camelia> rakudo-moar 87065a329: OUTPUT: ¬´True‚ê§False‚ê§False‚ê§¬ª

[23:03] <ab5tract> ugexe++

[23:38] *** modula joined
[23:38] *** defaultxr left
