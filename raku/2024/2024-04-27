[00:00] *** reportable6 left
[00:02] *** reportable6 joined
[00:02] <ab5tract> .seen nxadm

[00:02] <tellable6> ab5tract, I haven't seen nxadm around, did you mean nadim?

[00:02] <tellable6_> ab5tract, I haven't seen nxadm around, did you mean nadim?

[00:04] <MasterDuke> isn't that El_Che?

[00:05] <ab5tract> ah, could be

[00:06] <ab5tract> .tell El_Che is there any way I could contribute arm64 editions of rakudo-pkg?

[00:06] <tellable6> ab5tract, I'll pass your message to El_Che

[00:06] <tellable6_> ab5tract, Sorry kid, that's not my department.

[00:06] <ab5tract> tellable6_:  love you babe

[00:06] <tellable6> ab5tract, I haven't seen love around, did you mean olve?

[00:06] <tellable6_> ab5tract, I haven't seen love around, did you mean olve?

[00:08] <MasterDuke> heh. i think lizmat kicked the _ version from #raku-dev, don't know who can do that here/now

[00:08] <MasterDuke> oh, they all have _ versions right now

[00:27] *** ACfromTX joined
[01:08] *** xelxebar left
[01:09] *** xelxebar joined
[01:15] *** hulk joined
[01:15] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:29] *** jpn joined
[02:30] *** kylese left
[02:34] *** jpn left
[02:35] *** kylese joined
[02:36] <xinming> when we use rakubrew to upgrade the raku version, What is the best way to re-install all modules in old raku installation?

[02:41] <MasterDuke> you shouldn't *need* to

[02:43] <xinming> MasterDuke: ??

[02:43] <MasterDuke> installed modules should just continue to work

[02:43] <xinming> When I upgrade the raku version, the old script doesn't run at all?

[02:43] <xinming> hmm, I'll try again

[02:48] <xinming> MasterDuke: Here, after I switch the raku version, and run script which needs JSON::Fast, It seems I need to reinstall the JSON::Fast

[02:50] <MasterDuke> i'm pretty sure that's not supposed to happen. but i don't use rakubrew, so can't say for sure with it. might be worth filing an issue for rakubrew

[02:50] <xinming> MasterDuke: Alright, Yea, i think it's rakubrew's issue

[02:51] <xinming> https://stackoverflow.com/questions/64586605/install-modules-in-other-rakudo-versions-using-rakubrew     <--- got one sollution from here, But need to confirm this is the only way, Or there maybe other better ways to do things

[03:37] *** jpn joined
[03:42] *** jpn left
[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:40] *** Sgeo left
[07:31] *** jpn joined
[07:36] *** jpn left
[08:02] *** sena_kun joined
[08:24] *** jpn joined
[08:46] *** sena_kun left
[08:52] *** jpn left
[10:00] <ab5tract> hm, despite this fix (https://github.com/Raku/ake/commit/8490d63d1f1833a8a03b285f1ebe09a72c1d0d10), I got an test error due to PERL6LIB being set while handrolling a Blin docker image last night.. 

[10:00] <ab5tract> installing it locally worked just fine

[10:00] <ab5tract> :(

[10:06] <lizmat> perhaps RAKUDO_NO_DEPRECATIONS=1 could help?

[10:07] <ab5tract> ah, good idea.. I went a bit hamfisted and specified `--force-test`, but that option is way better

[10:09] <ab5tract> still, it's definitely a bit confusing.. the version specified is 0.1.2 and the auth is zef:raku-community-modules

[10:18] *** eseyman left
[10:49] *** jpn joined
[10:54] *** jpn left
[11:13] <ab5tract> lizmat++, that worked out perfectly

[11:14] <lizmat> :-)

[11:15] *** bdju left
[11:26] <tbrowder> hi, how can i apply a subset type on a named arg in a sub without requiring it to be defined? i'll try to do a simple demo here.

[11:29] <tbrowder> m: subset X of Str where { $_ = "x"}; sub f($a, X :$b) {}; f(4);

[11:29] <camelia> rakudo-moar 10ee220a7: OUTPUT: «assign requires a concrete object (got a Str type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[11:30] <lizmat> s/=/eq/  ??

[11:31] <tbrowder> m: sub f($a, :$b) {}; f(4);

[11:31] <camelia> rakudo-moar 10ee220a7: ( no output )

[11:33] <patrickb> In typical setups modules are not shared between versions in rakubrew.

[11:34] <tbrowder> actually the where block was too simple. i have to go but the real question is: is it possible to constrain a named but optional param?

[11:34] <patrickb> That's dependent on where zef installs the modules. By default they are put in the repos in the respective rakudo installations. Thus they are not shared.

[11:35] <patrickb> To make them available across installations one needs to install them into a shared repo. Typically into the home folder. (.zef/ ?)

[11:36] <lizmat> m: sub a(Str:D :$foo) { }; a :foo(42)

[11:36] <camelia> rakudo-moar 10ee220a7: OUTPUT: «Type check failed in binding to parameter '$foo'; expected Str but got Int (42)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:36] <patrickb> That can be done by adapting the zef config, or implicitly, by making the repos in the rakudo installations read only.

[11:36] <lizmat> tbrowder: the answer is: yes?

[11:49] <ab5tract> patrickb: Maybe a nice feature to add to rakubrew would be to optionally note existing installed packages and then install them into the new version

[11:52] <ab5tract> I’ve run into the same scenario as tbrowder, subset types turn optional nameds into required nameds

[11:56] <ab5tract> tbrowder: just add a truthiness check to the where clause

[11:56] <ab5tract> m: subset S where { !$_ || $_ > 0 }; sub s(S :$s) { dd $s }; s(:s(45)); s();

[11:56] <camelia> rakudo-moar 10ee220a7: OUTPUT: «45␤Any␤»

[12:00] *** reportable6 left
[12:00] <ab5tract> or add a compatible default value (could be a sentinel)

[12:00] <ab5tract> m: subset S where { $_ > 0 }; sub s(S :$s = 42) { dd $s }; s(:s(45)); s();

[12:00] <camelia> rakudo-moar 10ee220a7: OUTPUT: «45␤42␤»

[12:02] *** reportable6 joined
[12:10] <tbrowder> ah, i think i have solution: make the default values be zero:

[12:13] <tbrowder> m: subset X of Any where { $_ ~~ / 0 | a | b /}; sub f($a, :b(0)) { say $a} ; f(1)

[12:13] <camelia> rakudo-moar 10ee220a7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> re { $_ ~~ / 0 | a | b /}; sub f($a, :b(⏏50)) { say $a} ; f(1)␤»

[12:15] <tbrowder> oops, forgot sub f($a, X :b(0)){}

[12:17] <tbrowder> m: subset X of Any where { $_ ~~ 0 |a|b}; sub f($a, X :b(0)) { say $a}; f(1)

[12:17] <camelia> rakudo-moar 10ee220a7: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Invalid typename 'b' in parameter declaration.␤at <tmp>:1␤------> y where { $_ ~~ 0 |a|b}; sub f($a, X :b(⏏50)) { say $a}; f(1)␤»

[12:20] <tbrowder> m: subset X of Any where {$_ ~~ /0 |a/}; sub f($a, X :$b = 0) {say $a}; f(1)

[12:20] <camelia> rakudo-moar 10ee220a7: OUTPUT: «1␤»

[12:20] <tbrowder> eureka!

[12:20] <ab5tract> did you miss when I suggested this before? :)

[12:21] <tbrowder> did not see it

[12:21] <ab5tract> you can also do `where { !$_ || ... }`

[12:22] <ab5tract> though a better check would be `$_ ~~ Any:U || ...`

[12:22] <tbrowder> thnx!

[12:23] <tbrowder> bye

[12:23] <ab5tract> ciao o/

[12:35] <ab5tract> is there something like `callsame` but for invoking the next where clause (if any)? something like `subset Maybe where { $_ ~~ Any:U || nextconstraint }` might be nice to have, though it's just a random idea that popped up from this discussion so I'm not sure how feasible / sensible it might be

[12:41] <ab5tract> right now you can just `||` two subsets from with a third subset, so I guess it's really not unlocking anything particularly useful and probably would generally result in confusing subset hierarchies

[13:20] <discord-raku-bot> <librasteve> i run rakubrew and a new rakudo version also means a reinstall of all modules for me - i would love to hear if there’s a command / option to preserve the modules repo?

[13:24] <discord-raku-bot> <librasteve> zen install App::Crag is a simple way to bring in all the pieces of Physics::Measure etc

[13:26] <discord-raku-bot> <librasteve> .oO

[13:29] <discord-raku-bot> <librasteve> hmm - I could make a personal uber module with all my faves as META6 dependencies and then go zef install https://github.com/librasteve/my-uber.git

[14:06] *** sena_kun joined
[14:08] <ugexe> you could run `zef list --installed site vendor 2> /dev/null` to get a list of all the non-core modules installed, which can be fed to zef install

[14:21] <ab5tract> ugexe++

[14:21] <ab5tract> now we just need to roll that into a `rakubrew` flag

[14:33] <ugexe> m: for <site vendor> -> $repo-name { say $_ for CompUnit::RepositoryRegistry.repository-for-name($repo-name).installed().map({ CompUnit::Repository::Distribution.new($_).Str }) }

[14:33] <camelia> rakudo-moar 741e6eaf9: ( no output )

[14:33] <ugexe> that also works

[15:24] <xinming> ugexe++

[15:25] *** bdju joined
[15:46] <discord-raku-bot> <librasteve> something needs to persist over the rakubrew switch, this incantation is close (but it failedwhen I tried it)

[15:47] <discord-raku-bot> <librasteve>  zef list --installed site vendor 2> /dev/null > scum/zefs.txt rakubrew switch moar-2024.04 cat scum/zefs.txt | xargs zef install % 

[15:48] <patrickb> I'm a bit hesitant to turn that into a rakubrew function. Is this a problem rakubrew should solve? Related idea: Changing where modules are getting installed. I don't like rakubrew changing the zef config permanently. ugexe, what do you think?

[15:48] <discord-raku-bot> <librasteve> probably should write as a perl script (at last, a use for perl)

[15:50] <discord-raku-bot> <librasteve> I think ugexe comment in the SO question pertinent, there are no guarantees that zef internals will remain consistent from one version to another

[15:52] <discord-raku-bot> <librasteve> so the only official way needs to be a list, switch, reinstall - that seems at the meta level for rakubrew (also the current way means that all my modules are tested on the new version on the new zef install

[15:52] <discord-raku-bot> <librasteve> )

[15:56] <ab5tract> patrickb: it’s managing your Raku and zef installations… it seems like straightforward feature flag to me 🤷

[16:06] <ugexe> changing where modules get installed (i.e. a non-site or vendor repo) means CompUnit::Repository::Staging doesn't get used, and hence installing would precomp twice

[16:08] <ugexe> as to the question of is rakubrew should support it - i'd probably look at other existing *brew programs and see which ones also do that

[16:08] <ugexe> for example

[16:09] <ugexe> one might install a module that isnt in the ecosystem - for example they install from a local path

[16:09] <ugexe> i'm not sure how "reinstall" can work for that

[16:11] <ugexe> i think the advanced of users having to take a separate step to do it manually with zef is that they can probably reason about how to fix it

[16:11] *** jpn joined
[16:12] <ugexe> you can pass zef flags like --exclude=..., or just modify the list generated from the first step

[16:18] <ab5tract> That’s a good point. One easy option would be just emitting a list of what couldn’t be installed, assuming one “missing” package doesn’t stop the overall install invocation

[16:20] *** jpn left
[16:27] <ugexe> for the scenario where it is exactly one module that isn't a dependency of anything else yeah passing zef --force-resolve might be fine. but i would assume the more common case is that missing package is a dependency of other things, and those things of other things. So it not only has to skip multiple packages (even though only one is missing), it has to communicate all of that to the user while

[16:27] <ugexe> also communicate the parts that succeeded, and probably also have an option for users to disable that (since some users might not want their repo to be in such a state). there is a lot of nuance like that which makes it difficult to express without a fair bit of verbosity

[16:30] <ab5tract> fair enough. it's important to clarify that I am not suggesting making this a `rakubrew` default. I'm suggesting it as an option

[16:47] <tbrowder> abstract: yr solution i think is more than i need for my use case. i’ll point you to it later after i get that working. after i posted the msg you responded to i left before i noticed yrs.

[16:49] <tbrowder> ref yr solution for constraints on named params…

[16:50] <ab5tract> tbrowder: there were several workinig example solutions and one more or less wild idea. which are you referring to? :)

[16:51] <ab5tract> I think you are talking about the wild idea (`nextconstraint`)?

[16:54] <ugexe> i think my ideal verbose solution would be something like `rakubrew --use=moar-2024.01 exec zef list --installed | rakubrew --use=moar-2024.02 zef install -`, i.e. make rakubrew able to run a single command as a specific raku (one for getting the list from, one for installing to), and then adding something to zef for reading from stdin

[17:16] *** jpn joined
[17:29] *** jpn left
[17:50] *** jpn joined
[17:55] *** jpn left
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:30] *** jpn joined
[18:46] *** jpn left
[18:56] *** Sgeo joined
[19:53] <discord-raku-bot> <librasteve> chatGPT says this: Each Python version managed by pyenv is isolated from the others, meaning that they have their own separate set of installed modules and packages. When you install a new version of Python using pyenv, it's like installing a fresh copy of Python with no additional modules or packages. You'll need to install any modules or packages you need separately for each version of Python you have installed.

[20:20] *** jpn joined
[20:25] *** jpn left
[20:55] *** teatime left
[20:55] *** teatime joined
[21:16] *** jpn joined
[21:34] *** jpn left
[21:37] <ab5tract> ugexe: any idea what can cause this issue with `Whateverable`? https://gist.github.com/ab5tract/9e894ef17da3f74a58ee124e7ff56423

[21:38] <ab5tract> `Whateverable::Building` is listed as provided in `META6.json` but isn't findable .. but other modules provided by `Whateverable` are

[22:18] *** jpn joined
[22:48] *** linkable6_ left
[22:48] *** jpn left
[22:49] *** linkable6_ joined
[23:37] <[Coke]> did yuo install it?

[23:38] <[Coke]> if not you need a -I.

[23:38] <[Coke]> (are you sure others arwn't installed, e.g.)

[23:42] <ab5tract> As me

[23:43] <ab5tract> As mentioned, other modules provided by the distribution are available

[23:57] <ugexe> zef locate Whateverable::Building

[23:57] <ugexe> does that find it?

[23:58] <ugexe> I can’t think of how that could happen beyond installing some older version that doesn’t have it (if even exist)

[23:59] *** sena_kun left
