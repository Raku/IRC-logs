[01:29] *** nine left
[01:30] *** nine joined
[01:40] *** hulk joined
[01:41] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[03:39] *** Aedil joined
[03:43] *** guifa left
[05:08] *** phogg left
[05:08] *** phogg joined
[05:12] *** floyza joined
[05:22] *** dg left
[05:25] *** dg joined
[05:30] *** Sgeo left
[05:56] <ab5tract> Grok output reads as super try-hard

[05:57] <ab5tract> "Here's the spicy truth" ... seriously? why would anyone want a robot to write this way?

[06:00] <ab5tract> oh, it's "fun" mode, so at least the user asked for it

[06:30] *** floyza left
[06:47] *** teatime left
[07:16] *** teatime joined
[07:16] <teatime> huh, that's odd, where'd my irc go

[07:16] <teatime> wrong channel

[09:08] *** MasterDuke left
[09:37] *** sena_kun joined
[10:01] *** sena_kun left
[10:04] *** sena_kun joined
[10:04] *** sena_kun left
[10:52] *** doomlord joined
[10:53] <doomlord> timo, antononcube: I came to the conclusion that we should reimplement shaped arrays around Bufs

[10:53] <doomlord> Maybe in module space

[10:56] <doomlord> Either Buf or CArray

[10:56] *** doomlord left
[11:00] *** doomlord joined
[11:02] <doomlord> I mean, now it‚Äôs implemented in MultiDimArray.c. And it doesn‚Äôt use strides

[11:02] <doomlord> Meaning that many optimizations are precluded

[11:04] <doomlord> Im not sure if having it implemented in c gives significant performance boosts, if that is the case then one could modify the repr and the api to have strides in c

[11:05] <doomlord> But my guess is that the Buf or CArray implementation would also be fast thanks to the jit compiler

[11:06] *** doomlord left
[11:10] *** wayland76 joined
[11:13] *** doomlord joined
[11:20] *** doomlord left
[11:20] *** doomlord joined
[11:21] *** guifa joined
[11:24] *** doomlord left
[11:25] *** doomlord joined
[11:29] *** doomlord left
[11:52] *** doomlord joined
[11:54] *** doomlord left
[11:55] *** doomlord joined
[11:59] *** doomlord left
[12:35] <discord-raku-bot> <antononcube> @ab5tract It is an interesting question when I see LLMs with ‚Äúfun modes‚Äù how exactly their fun modes operate. 90% I suspect it is just a global, ‚Äúheader‚Äù prompt change or augmentation.

[12:38] <discord-raku-bot> <antononcube> But sometimes it seems an LLM is deliberately trained to be ‚Äúfun.‚Äù Alternatively, all LLMs are ‚Äúfun‚Äù, but kind of ugly too (because are trained with ‚ÄúThe Internet‚Äù). Hence, civil discourse conditioning global prompts are always needed.

[12:43] <discord-raku-bot> <antononcube> @doomlord ‚ÄúOh but that takes more mental effort than a reshape function for multidimensional arrays‚Äù ‚Äî I tried to ‚Äúfix‚Äù these kind of concerns in my DSL packages, and more concretely for data wrangling, with ‚ÄúDSL::English::DataQueryWorkflows‚Äù, https://raku.land/zef:antononcube/DSL::English::DataQueryWorkflows

[12:43] <discord-raku-bot> <antononcube> It supports multiple stride styles.

[12:43] <discord-raku-bot> <antononcube> I.e. specifications for array views.

[13:15] <discord-raku-bot> <antononcube> A package Ecosystem question:

[13:15] <discord-raku-bot> <antononcube> Before and during Milton üåÄ üå™Ô∏è passing here I was trying to track it using Raku functionalities. (It was, say, 1/3 to 1/2 successful endeavor.) One big obstacle, for me at least, was importing and parsing KML and KMZ files. So, what is the best approach for getting these packages?

[13:15] <discord-raku-bot> <antononcube> *"these packages" = "these packaged functionalities".

[13:18] <discord-raku-bot> <antononcube> 1) Making a dedicated package named, say, "Data::Geographics::KML" or just "Geo::KML". 2) Just using "Data::Importers" and making it to know how to deal with KML/KMZ files. 3) Extending an existing package with plugin, for example, the current "XML" with "XML::KML".

[13:26] <discord-raku-bot> <antononcube> @grenzo Ingesting KMZ files is a perfect application of "IO-Archive".

[13:28] *** wayland76 left
[13:31] *** wayland76 joined
[14:34] *** wayland76 left
[14:38] *** wayland76 joined
[14:40] *** teatwo joined
[14:43] *** teatime left
[14:50] *** Sgeo joined
[15:37] *** wayland joined
[15:37] *** wayland76 left
[15:45] *** Aedil left
[15:46] *** Aedil joined
[15:46] *** Aedil left
[17:42] *** sena_kun joined
[18:41] *** wayland76 joined
[18:42] *** wayland left
[20:13] *** wayland76 left
[22:05] *** sena_kun left
[22:19] *** sena_kun joined
[22:26] *** sena_kun left
