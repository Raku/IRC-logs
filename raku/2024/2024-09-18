[00:21] *** dgl is now known as dg

[00:43] *** kjp left
[00:44] *** kjp joined
[00:47] *** kjp left
[00:47] *** kjp joined
[00:48] *** [Coke]_ left
[01:05] *** hulk joined
[01:05] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:33] *** sena_kun joined
[02:56] *** sorenson left
[03:35] *** Aedil joined
[04:20] *** ilogger2 left
[04:20] *** ilogger2_ joined
[05:30] *** Sgeo left
[06:16] *** sorenson joined
[06:35] <ab5tract> ingy: is that script visible online somewhere? I’m curious what non-trivial yaml script looks like

[07:00] *** andinus left
[07:02] *** andinus joined
[07:38] *** sena_kun left
[08:16] <ab5tract> antononcube: congrats on the new module. I'll definitely give this a try sometime. Is there any way to extend it to storing "analyzed code output" in the vector db?

[08:20] *** dakkar joined
[08:26] <discord-raku-bot> <antononcube> Right, that is the “harder” use case. And it is an interesting question: should a certain code base be used “as is”, or be (LLM-)preprocessed to have comments.

[08:32] <discord-raku-bot> <antononcube> An article can be naturally split into paragraphs and then a vector embedding for each paragraph be obtained. With code the splitting is not that easy or natural. So, another interesting, related question is would partial code fragments be “reasonably” retrieved when using the embeddings.

[08:42] <discord-raku-bot> <antononcube> Obviously, Raku parsers/grammars or RakuAST can help splitting Raku code into reasonable chunks.

[08:45] <ab5tract> it's still fuzzy to me, but its coming into clearer focus

[09:15] *** wayland76 joined
[10:09] *** ecocode left
[10:14] *** ecocode joined
[11:06] *** wayland76 left
[12:47] *** sena_kun joined
[12:54] *** [Coke]_ joined
[13:45] <[Coke]> rak: Failed to open file /Volumes/deloitte/doc/doc/Type/Range.rakudoc: Too many open files

[13:45] <[Coke]> lizmat: https://gist.github.com/coke/913c4279578f91a069b575c8f55e4c68

[13:46] <lizmat> what am I looking at there ?

[14:17] <[Coke]> I just ran rak and got that error.

[14:17] <[Coke]> I can open a ticket and throw in version info if that'll help

[14:18] <[Coke]> ah. it's when I add $(git ls-files) on the command line

[14:19] <[Coke]> I do that in shell often if I just want version controlled files. looks like rak is performant enough without it, but if I add it, it complains 

[14:19] <lizmat> h.mmmm   anyways, there's a #raku-rak channel if you have specific rak issues  :-)

[14:31] <timo> [Coke]: what's your ulimit -n, aka "max open files"? it tends to be rather quite a bit low in normal systems nowadays

[14:31] <timo> i'm surprised to find mine is 1024 and i've not had anything explode yet

[14:31] <[Coke]> 256!

[14:31] <timo> holy shit

[14:32] <ab5tract> What is this, 1992? :)

[14:32] <[Coke]> yup, upping that to 1024 avoids the explosion.

[14:32] <[Coke]> m: Date.new.year.say

[14:32] <camelia> rakudo-moar dde756878: OUTPUT: «Cannot call Date.new with no parameters␤  in block <unit> at <tmp> line 1␤␤»

[14:32] <[Coke]> m: Date.today.year.say

[14:32] <camelia> rakudo-moar dde756878: OUTPUT: «2024␤»

[14:32] <[Coke]> nope!

[14:33] <timo> m: say [*] 1..256

[14:33] <camelia> rakudo-moar dde756878: OUTPUT: «85781777534284265411908227168123262515778152027948561985965565037726945255314758937744029136045140845037588534233658430615719683469369647532228928849742602567963733256336878644267520762679456018796886797152114330770207752664645146470918732610083287632…»

[14:34] <timo> that's a lot of open files you can have!

[14:36] <[Coke]> irssi question - when I do "/save" or "/layout save", my irssi config is not updated to reflect the current set of open windows. am I missing something?

[14:37] <timo> is it in a secondary or tertiary config file?

[14:37] <timo> i haven't used irssi in a decade, i've switched to weechat some time ago

[14:37] * [Coke] finds https://www.linode.com/docs/guides/advanced-irssi-usage/#save-state

[14:38] <[Coke]> add to add a script in an alias. whee.

[14:38] <[Coke]> *had*

[15:36] *** eseyman_ joined
[15:36] *** Voldenet_ joined
[15:36] *** tejr_ joined
[15:41] *** eseyman left
[15:41] *** Voldenet left
[15:41] *** BooK left
[15:41] *** Altreus left
[15:41] *** tib left
[15:41] *** tejr left
[15:41] *** destroycomputers left
[15:41] *** rjbs left
[15:41] *** ky left
[15:41] *** timo left
[15:41] *** tejr_ is now known as tejr

[15:41] *** Voldenet_ is now known as Voldenet

[15:43] *** BooK joined
[15:52] *** nine_ left
[15:52] *** nine joined
[16:39] *** dakkar left
[16:56] <lucs> Am I misunderstanding the string quoting  :f  adverb? :

[16:57] <lucs> m: sub baz { $^a }; print Q:f'&baz(123)<foo>'; # Expecting "123<foo>"

[16:57] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «Type Int does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[17:01] <lucs> (hungry; back later)

[17:15] <timo> i think the f, c, s, a, h adverbs are about what can start an interpolation, so as long as there are circumfixes later, it will chain? 

[17:23] <discord-raku-bot> <antononcube> weekly: https://youtu.be/JHO2Wk1b-Og

[17:23] <notable6__> antononcube, Noted! (weekly)

[17:38] *** jjido joined
[18:11] <discord-raku-bot> <librasteve> lucs: looks like you got 123<foo> except that 123 as an Int doesn’t take an associative index <foo> … maybe use parens to disambiguate further?

[18:11] <tellable6__> 2024-09-16T18:53:45Z #raku <ab5tract> librasteve: syntax highlighting should be fixed :)

[18:12] <discord-raku-bot> <librasteve> .oO

[18:14] <discord-raku-bot> <scullucs> @librasteve : not sure parens where...

[18:18] <discord-raku-bot> <librasteve> m: sub baz { $^a }; print Q:f'(&baz(123))<foo>';

[18:18] <evalable6> librasteve, rakudo-moar 1a7b8460b: OUTPUT: «(123)<foo>»

[18:18] <discord-raku-bot> <Raku eval>  (123)<foo>

[18:18] <discord-raku-bot> <librasteve> hmmm

[18:20] <discord-raku-bot> <librasteve> m: sub baz { $^a }; print Q:f'&baz(123) <foo>';

[18:20] <evalable6> librasteve, rakudo-moar 1a7b8460b: OUTPUT: «123 <foo>»

[18:20] <discord-raku-bot> <Raku eval>  123 <foo>

[18:20] <discord-raku-bot> <librasteve> with a space

[18:21] <discord-raku-bot> <librasteve> looks like we need a non space space

[18:21] <discord-raku-bot> <librasteve> at this point I would say use Q with curlies - ymmv

[18:25] <discord-raku-bot> <scullucs> Yeah, turns out curlies would be okay in what I'm actually doing, but I've been using the :f adverb successfully in with generated LaTeX code so much that the "Q:f:..." idiom has become my go to "interpolate only these things, absolutely nothing else" mechanism.

[18:26] <discord-raku-bot> <scullucs> And so I was wondering what was up with that, and the "chain circumfixes" thing makes sense.

[18:36] <discord-raku-bot> <librasteve> yeah - quoting is a gnarly thing ...

[18:36] <discord-raku-bot> <librasteve> m: sub baz { $^a }; sub nss {"\c[0020]"}; print Q:f'&baz(123)&nss<foo>';

[18:36] <discord-raku-bot> <Raku eval>  Exit code: 1 Type Sub does not support associative indexing.   in block <unit> at main.raku line 1  

[18:36] <evalable6> librasteve, rakudo-moar 1a7b8460b: OUTPUT: «(exit code 1) Type Sub does not support associative indexing.␤  in block <unit> at /tmp/fFh76Sdeob line 1␤␤»

[18:45] <ab5tract> I suspect the issue here is that `:f` specifies "function" calls, which somehow `.AT-KEY` (via `<>`) is being considered under

[18:46] <ab5tract> huh, but that's not actually true..

[18:46] <ab5tract> m: my %a = "a" => "Z"; say Q:f[  $a<a> ];

[18:46] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «  $a<a> ␤»

[18:47] <ab5tract> I think this is definitely worth reporting a GitHub issue over

[18:49] <ab5tract> (also broken in RakuAST)

[19:01] <timo> you can switch to a different quoting mode inside of a qq with \q

[19:05] *** jjido left
[19:14] <ab5tract> that's a useful feature, but is it usable here?

[19:15] <ab5tract> the RakuAST ouput shows that a `Postcircumfix::LiteralHashIndex` is generated for `<foo>`

[19:16] <ab5tract> that doesn't seem to be expected behavior for a quoting mode that is supposed to restrict itself to function calls 

[19:19] <timo> m: sub lol { "^$_^" }; say q'not: &lol(123) \q:f[&lol(321)]<543> :)'

[19:19] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> sub lol { "^$_^" }; say q'not: &lol(123)⏏ \q:f[&lol(321)]<543> :)'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        st…»

[19:20] <timo> m: sub lol { "^$_^" }; say q'not: &lol(123) \qq:f[&lol(321)]<543> :)'

[19:20] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> sub lol { "^$_^" }; say q'not: &lol(123)⏏ \qq:f[&lol(321)]<543> :)'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        s…»

[19:20] <timo> m: sub lol { "^$_^" }; say q'not: &lol \qq:f[&lol(321)]<543> :)'

[19:20] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> sub lol { "^$_^" }; say q'not: &lol⏏ \qq:f[&lol(321)]<543> :)'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statem…»

[19:20] <timo> not sure what i am doing wrong here tbh?

[19:20] <timo> m: sub lol { "^$_^" }; say q'not: &lol :)'

[19:20] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> sub lol { "^$_^" }; say q'not: &lol :⏏)'␤»

[19:21] <timo> oh, ' is allowed in identifiers

[19:22] <timo> so q' bla ' works but q'bla' doesn't

[19:26] <timo> m: sub lol { "^" ~ $^a ~ "^" }; say q 'not: &lol() \qq:f [&lol(123)]<321> haha'

[19:26] <camelia> rakudo-moar 1a7b8460b: OUTPUT: «not: &lol() ^123^<321> haha␤»

[19:34] <ab5tract> the `<321>` is supposed to be inside of the quote, iiuc

[19:34] <ab5tract> ah, nevermind, I see what you did there :)

[19:34] <ab5tract> it still feels like a bug to me though

[19:46] <ab5tract> which is to say, this seems inconsistent and I'm not sure how to reconcile the difference:

[19:46] <ab5tract> m: my %a = :1a; say Q:f[ %a<a> ]; sub h(%h) { %h }; say Q:f[ &h(%a)<a> ]

[19:46] <camelia> rakudo-moar 1a7b8460b: OUTPUT: « %a<a> ␤ 1 ␤»

[19:51] *** discord-raku-bot left
[19:51] *** discord-raku-bot joined
[20:12] <ab5tract> I guess it's this part (from the QAST output): `QAST::Op(call &postcircumfix:<{ }>)`

[20:21] <discord-raku-bot> <librasteve> m: sub baz { $^a }; say Q:c|{baz(123)}<foo>|;

[20:21] <evalable6> librasteve, rakudo-moar 1a7b8460b: OUTPUT: «123<foo>␤»

[20:21] <discord-raku-bot> <Raku eval>  123<foo> 

[20:21] <discord-raku-bot> <librasteve> m: sub baz { $^a }; say Q:f|&baz(123)<foo>|;

[20:21] <discord-raku-bot> <Raku eval>  Exit code: 1 Type Int does not support associative indexing.   in block <unit> at main.raku line 1  

[20:21] <evalable6> librasteve, rakudo-moar 1a7b8460b: OUTPUT: «(exit code 1) Type Int does not support associative indexing.␤  in block <unit> at /tmp/Kqyz5d_Iee line 1␤␤»

[20:22] <discord-raku-bot> <librasteve> ^^ in my view, these two alternatives should give the same result ... so seems like a bug to me too

[20:25] *** discord-raku-bot left
[20:26] *** discord-raku-bot joined
[20:29] *** Aedil left
[21:09] *** kylese left
[21:09] *** kylese joined
[22:03] *** sena_kun left
[23:06] *** Sgeo joined
