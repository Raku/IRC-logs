[00:05] *** librasteve_ left
[01:23] *** hulk joined
[01:25] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:45] *** Aedil joined
[03:17] <wayland> What *does* lizmat use instead of Comma?  

[03:21] <wayland> .tell antononcube Yeah, I should've probably said github instead of fez.  

[03:21] <tellable6> wayland, I'll pass your message to antononcube

[03:22] <wayland> .tell antononcube That sounds interesting.  But it also sounds like we have multiple names for a programming paradigm instead of just one, which is something I'm finding is common (ie. Table-Oriented Programming has had I think at least 2 other names).  

[03:22] <tellable6> wayland, I'll pass your message to antononcube

[03:37] <discord-raku-bot> <antononcube> @wayland lizmat (allegedly) uses "vi".

[03:37] <tellable6> 2024-09-01T03:21:20Z #raku <wayland> antononcube Yeah, I should've probably said github instead of fez.  

[03:37] <tellable6> hey antononcube, you have a message: https://gist.github.com/6e2669739a2c04f7b90689b0c6afd512

[03:38] <discord-raku-bot> <antononcube> Or at least, @lizmat consistenly puts message like this at the bottom of their GitHub files: > vim: expandtab shiftwidth=4

[04:40] *** Sgeo left
[04:47] *** Sgeo joined
[04:50] *** Aedil left
[05:25] *** kjp left
[05:27] *** kjp joined
[05:36] *** kjp left
[05:37] *** kjp joined
[05:46] *** kjp left
[05:47] *** kjp joined
[05:49] *** kjp left
[05:50] *** kjp joined
[05:50] *** kjp left
[05:51] *** kjp joined
[05:51] *** kjp left
[05:51] *** kjp joined
[06:12] *** thaewrapt left
[06:17] *** thaewrapt joined
[06:25] *** thaewrapt left
[06:29] *** thaewrapt joined
[06:43] *** thaewrapt left
[06:54] *** thaewrapt joined
[07:31] *** thaewrapt left
[07:43] *** thaewrapt joined
[07:48] *** thaewrapt left
[07:59] *** thaewrapt joined
[08:00] *** jaguart joined
[08:01] *** jaguart left
[08:01] *** jaguart joined
[08:06] *** thaewrapt left
[08:17] *** thaewrapt joined
[08:23] *** thaewrapt left
[08:41] * lizmat uses vim

[08:46] <discord-raku-bot> <jaguart.v1> once used edlin professionally for coding on a super-mini in cobol

[08:46] <lizmat> aah..  edlin, I remember it well  :-)

[08:47] <jaguart> but the word perfect program editor - mwah!

[08:47] <tellable6> 2024-08-29T13:38:06Z #raku <librasteve> jaguart: & @antononcube 'tis true I'm working on Cro stuff (also Xliff was looking at similar?)

[08:47] <tellable6> hey jaguart, you have a message: https://gist.github.com/8f6c9b215fe46d9f604b2403473ce735

[08:53] *** thaewrapt joined
[09:03] <lizmat> I would have used Comma if Comma had been able to work with the Rakudo core

[09:04] <jaguart> is there an LSP server under dev / in place?

[09:05] <jaguart> I know the Perl LSP available for VSCode is a bit pants (not sure if that's vscode or the lsp)

[09:06] <ab5tract> lizmat: that‚Äôs one of first cleanup goals

[09:07] <jaguart> when I sat that, I mean that the LSP is not great for code exploration - specifically OUTLINE misses important things and shows unimportant things

[09:08] *** thaewrapt left
[09:08] <ab5tract> jaguart: yes, the name eacapes me but I was under the impression it is listed under plugins for VS Code

[09:11] *** sena_kun joined
[09:11] <jaguart> doh - its there, and I'm using it - at least it's better thank the Perl one

[09:11] * jaguart been away from Raku too long

[09:14] <ab5tract> It‚Äôs a notoriously difficult family of languages to do this sort of thing for. RakuAST ought to make things easier in that regard, and it‚Äôs really getting close now

[09:17] <jaguart> to be fair to Perl - I'm moving to `use feature 'class'` and the LSP doesn't yet do Corrina

[09:19] *** thaewrapt joined
[09:25] *** thaewrapt left
[09:36] *** thaewrapt joined
[09:42] *** thaewrapt left
[09:53] *** thaewrapt joined
[10:04] *** thaewrapt left
[10:15] *** thaewrapt joined
[10:22] *** thaewrapt left
[10:23] *** Sgeo left
[10:35] *** thaewrapt joined
[10:40] *** thaewrapt left
[10:51] *** thaewrapt joined
[10:57] *** thaewrapt left
[11:03] <discord-raku-bot> <antononcube> I use VSCode with the Raku plug-in, but not often. Maybe, I use indirectly some of its functionalities in Jupyter.

[11:04] <discord-raku-bot> <antononcube> Any package development I do in CommaIDE.

[11:08] <discord-raku-bot> <antononcube> Now, for a certain PR for one of lizmat‚Äôs projects ‚Äî ‚ÄúApp::Rak‚Äù, I think ‚Äî CommaIDE could not handle the syntax highlighting of the code. I had to edit it as plain text. (Or, maybe, I did that editing in Emacs.)

[11:08] *** thaewrapt joined
[11:15] *** thaewrapt left
[11:26] *** thaewrapt joined
[11:28] <discord-raku-bot> <librasteve> I can imagine the code highlighting the Q-language is a b*stard

[11:31] *** Aedil joined
[11:32] *** thaewrapt left
[11:43] *** thaewrapt joined
[11:48] *** thaewrapt left
[11:59] *** thaewrapt joined
[12:11] *** wayland left
[12:11] *** wayland76 joined
[13:02] *** jrjsmrtn left
[13:05] *** jxnshi joined
[13:05] *** jxnshi left
[13:13] <discord-raku-bot> <antononcube> @librasteve Do you mean the Q-DSL in Raku? I think VSCode's plug-in just treats as two code lines and text.

[13:29] <discord-raku-bot> <librasteve> yeah - seems like Q-DSL syntax is pretty unusual

[14:01] *** jgaz joined
[14:30] *** kylese left
[14:34] *** kylese joined
[15:00] *** jrjsmrtn joined
[15:20] *** Aedil left
[15:38] *** xinming left
[15:41] *** xinming joined
[17:04] *** jgaz left
[17:19] <ab5tract> Alright, it‚Äôs not much in some ways but it still took a fair amount of work: All Comma source code refers to Raku where it used to refer to Perl6

[17:20] <ab5tract> Next up, trying to compile against the latest upstream of intellij-community

[18:06] *** jaguart left
[18:17] *** Aedil joined
[18:23] <discord-raku-bot> <librasteve> üç¨

[18:27] <[Coke]> I feel like this should work: raku -e 'sub MAIN(Rat $thing) { say $thing}' 3

[18:35] <discord-raku-bot> <librasteve> raku -e 'sub MAIN(Rat $thing) { say $thing}' 3.1    #3.1

[18:37] <discord-raku-bot> <librasteve> https://docs.raku.org/language/syntax#Rat_literals

[18:38] <discord-raku-bot> <librasteve> or go raku -e 'sub MAIN(Rat() $thing) { dd $thing}' 3    #3.0

[18:39] <[Coke]> eh, that's fair.

[19:11] *** xinming left
[19:11] *** thaewrapt left
[19:12] *** xinming joined
[19:17] *** thaewrapt joined
[19:21] *** Sgeo joined
[19:38] *** Aedil left
[19:48] *** tadzik left
[19:48] *** tadzik joined
[20:45] *** xinming left
[20:45] *** xinming joined
[20:46] <SmokeMachine> I think I might have found a bug?

[20:46] <SmokeMachine> m: use Test; class C { has $.a = 42 }; sub b(\c ( :$a )) { is $a, c.a }; b C.new

[20:46] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[20:47] <SmokeMachine> m: use Test; class C is Capture { has $.a = 42 }; sub b(\c ( :$a )) { is $a, c.a }; b C.new

[20:47] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# expected: '42'‚ê§#      got: (Any)‚ê§¬ª

[20:47] <SmokeMachine> ‚òùÔ∏è is this a bug?

[20:48] <SmokeMachine> if the class is a Capture, the signature doesn't work...

[20:52] <ab5tract> m: use Test; class C is Capture { has $.a = 42 }; sub b(\c ( :$a )) {  dd c.a ~~ $a }; b C.new

[20:52] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´Bool::True‚ê§¬ª

[20:53] <ab5tract> Looks like the order of the ACCEPTS is only valid in one direction when C is a Capture

[20:54] *** thaewrapt left
[20:54] <ab5tract> Not sure if it‚Äôs a bug or not, to be honest. Best to file one any I think

[21:07] <timo> i imagine if you subclass Capture and you don't change what the Associative bits return, you shouldn't expect things to change in how it is unpacked into signatures

[21:08] *** xinming left
[21:08] *** xinming joined
[21:11] <SmokeMachine> ok... I think I got it!!! it's using it as a hash's key, and not as a method name!!!

[21:12] <SmokeMachine> m: class C is Capture { has $.a = 42; }; sub b(\c ( :$a )) { dd $a }; b C.new: :hash{:13a}

[21:12] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´13‚ê§¬ª

[21:12] <timo> anything that is not Capture is coerced by calling .Capture on it first

[21:12] <timo> and by default, Any will give its attributes as keys to the created capture

[21:12] <timo> m: say <1/6>.Capture.raku

[21:12] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´\(:denominator(6), :numerator(1))‚ê§¬ª

[21:13] <timo> m: (-> \c ( :$denominator ) { dd $denominator } )(<1/6>)

[21:13] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´Unexpected named argument 'numerator' passed in sub-signature or parameter c‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:13] <timo> m: (-> \c ( :$denominator, :$numerator ) { dd $denominator, $numerator } )(<1/6>)

[21:13] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´6‚ê§1‚ê§¬ª

[21:13] <SmokeMachine> I think the case here is because it's treating it as a hash (captures do associative too, right)... that seems a correct behaviour...

[21:14] <timo> yeah Capture is both Positional and Associative

[21:15] <SmokeMachine> m: class C does Associativew { has $.a = 42; has %.b handles * }; sub b(\c ( :$a )) { dd $a }; my $c = C.new; $c<a> = 13;b $c

[21:15] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Invalid typename 'Associativew'. Did you mean 'Associative'?‚ê§at <tmp>:1‚ê§------> class C does Associativew‚èè { has $.a = 42; has %.b handles * }; su‚ê§¬ª

[21:18] <SmokeMachine> m: class C does Associative { has $.a = 42; method AT-KEY(|) {13} }; sub b(\c ( :$a )) { dd $a }; b C.new # it seems I was wrong...

[21:18] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´42‚ê§¬ª

[21:19] <timo> yeah i bet it still goes via .Capture there

[21:19] <SmokeMachine> it seems too...

[21:19] <timo> m: class C does Associative { has $.a = 42; method AT-KEY(|) {13}; method Capture { \( a => 99 ) } }; sub b(\c ( :$a ))

[21:19] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> re { \( a => 99 ) } }; sub b(\c ( :$a ))‚èè<EOL>‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[21:19] <timo> m: class C does Associative { has $.a = 42; method AT-KEY(|) {13}; method Capture { \( a => 99 ) } }; sub b(\c ( :$a )) { dd $a }; b C.new

[21:19] <camelia> rakudo-moar cd0e6ee60: OUTPUT: ¬´99‚ê§¬ª

[21:20] <SmokeMachine> thanks!

[21:20] <timo> YW

[21:41] *** thaewrapt joined
[22:00] <discord-raku-bot> <antononcube> weekly: https://youtu.be/pcGH6CeptJE

[22:00] <notable6> antononcube, Noted! (weekly)

[22:00] *** teatime joined
[22:03] *** sena_kun left
[22:22] *** sena_kun joined
[22:30] *** sena_kun left
[22:49] *** thaewrapt left
[22:50] *** thaewrapt joined
[23:27] *** wayland76 left
[23:45] <tbrowder> while y'all are talking Raku code you might take a look at my issuse on raku/problem-solving. i would like to see .pop and .shift take an integer to pop or shift more that one item at a time

[23:45] <tbrowder> *than

[23:47] <tbrowder> and i hope i'm not the Lone Ranger on that suggestion

[23:48] <tbrowder> lizmat confirms it's trivial to add that

[23:51] <[Coke]> are there other languages that have that feature?

