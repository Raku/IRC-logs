[00:01] *** Sgeo left
[00:14] *** Sgeo joined
[00:34] *** PotatoGim left
[00:39] *** PotatoGim joined
[01:27] <guifa> so I can think of two models for notifying folks of new devices for mDNS service discovery

[01:28] <guifa> $service-discovery.register($type, &callback) # call the method provided by clients wanting notifications

[01:29] <guifa> $service.discovery.notifications($type) --> taps a supply of said notifications

[01:36] <guifa> I guess functionally it's not going to be too different, the tap needs an emit value

[01:59] <discord-raku-bot> <antononcube> @timo After I deleted my local repository of "Jupyter::Chatbook" and clone it from GitHub the "BOOTException" no longer appears.

[02:05] <ab5tract> guifa: a supply sounds really appropriate tbh. A react block feels like a decent fit, at least from afar

[02:06] *** hulk joined
[02:07] *** kylese left
[02:21] <guifa> I'm still trying to figure out the in-practice bit of announcing

[02:22] <guifa> it seems part of my issue may be because my device already has a service discovery thing running on it, I'm getting some TTLs that indicate data isn't fresh, and I'm thinking to reduce network chatter some devices aren't responding because they think my computer already knows about them

[02:26] <guifa> OMG

[02:26] * guifa is a true absolute total dunce

[02:27] <guifa> I left a bitmask in as an actual value

[02:28] <guifa> so all the packets I thought were saying "Are you there?????" were saying "Are you there".  And no one was responding because they didn't see a question because one bit was off

[02:50] <ab5tract> “Your off by one is a bit in a uint. My off by one is a bit in a umask. We are not the same” :)

[03:15] <guifa> If a tap goes out of scope

[03:15] *** hulk left
[03:15] <guifa> does the supplier know it and stop trying to signal it?

[03:15] *** kylese joined
[03:15] <guifa> and if so, is it possible to know when there are no more taps ?

[03:19] *** Aedil joined
[03:20] <guifa> hmm okay when out of scope it does seem to just disappear unceremoniously.  

[03:36] <guifa> meh guess I'll just have a ton of supplies laying around that no one's subscribed to potentially

[07:29] *** Sgeo left
[08:41] <discord-raku-bot> <antononcube> My X-account is like that…

[08:58] *** Aedil left
[10:59] *** sena_kun joined
[11:01] <ab5tract> guifa: not 100% sure but I don’t know if that matters in terms of work being done? I’d have to check to be sure though. Also, I’d expect any truly useful tapping to not fall out of scope / be done in a react block

[12:14] *** sena_kun left
[12:20] *** sena_kun joined
[12:20] *** sena_kun left
[12:23] *** sena_kun joined
[12:45] <tbrowder> hi, guifa and ab5tract is there a good reference youcan recommend explaining yr usage. hypering and such. very useful, but a level above my head and experience. lizmat has helped me on a specific task, but...

[12:45] <tbrowder> i need a book...

[12:50] <tbrowder> multithreading with raku

[13:03] <tbrowder> ok, i just found lizmat's reference to @jnthn's excellent article...gotta get it printed

[13:07] <Geth> ¦ ecosystem/main: b8dffb4208 | (Elizabeth Mattijsen)++ | META.list

[13:07] <Geth> ¦ ecosystem/main: Remove Sparrowdo::Chef::Client

[13:07] <Geth> ¦ ecosystem/main: 

[13:07] <Geth> ¦ ecosystem/main: It also available from the CPAN ecosystem

[13:07] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/b8dffb4208

[13:10] <guifa> Actually, as anyone implemented an idle timer efficiently?

[13:10] <guifa> cue premature optrimization but Promise.in(...) camt be canceled

[13:13] <lizmat> $*SCHEDULER.cue(:in(5))  returns a Cancellation object

[13:14] <tbrowder> @jnthn's OO::Monitors module !!! it's wonderful for naive raku users

[13:17] <lizmat> m: my $c = $*SCHEDULER.cue({ say "idle" },:in(2)); sleep 1; sleep 3; say "done"

[13:17] <camelia> rakudo-moar f58bed9f6: OUTPUT: «idle␤done␤»

[13:17] <guifa> lizmat: bless you

[13:17] <lizmat> m: my $c = $*SCHEDULER.cue({ say "idle" },:in(2)); sleep 1; $c.cancel; sleep 3; say "done"

[13:17] <camelia> rakudo-moar f58bed9f6: OUTPUT: «done␤»

[13:17] <guifa> otherwise I was about have a gazillion Promises hanging around lol

[13:18] <guifa> (because mDNS traffic can be very chatty, and each one potentially can provide a new TTL value for some piece of data

[13:18] <lizmat> oddly enough this functionality does not appear to be documented

[13:18] <guifa> it's in role

[13:18] <guifa> https://docs.raku.org/type/Scheduler#method_cue

[13:19] <lizmat> aaah... yes  ok  :-)

[13:20] <guifa> This is currently the class guifa adventure.  I want X (advertise services that, e.g., a cro app provides), but to do X I need to generate moduels that do Y and Z and I might as well make them fully featured.  Eventually I'll get back to X 

[13:33] *** Aedil joined
[13:38] <tbrowder> lizmat: you're a sweetheart, i just saw that "like"

[13:44] <lizmat> yw  :-)

[13:46] <guifa> say $the-best.WHO eq 'lizmat'; # True

[13:50] *** itaipu joined
[13:52] <lizmat> afk&

[15:14] *** Aedil left
[15:22] <guifa> hmm, that enum trick lizmat gave unfortunately doesn't survive export'ing.  not sure if that's a bug or design (I'm guessing it's design, in that you're only exporting the enum symbol, and not the package itself)

[15:35] *** Sgeo joined
[15:43] <guifa> nm it does

[15:55] <discord-raku-bot> <antononcube> How can the Raku version be determined during runtime?

[15:56] <discord-raku-bot> <antononcube> The answers here are obsolete: https://stackoverflow.com/q/3018456

[15:56] <ugexe> s/$*PERL/$*RAKU/ seems like an obvious place to start

[15:57] <guifa> yeah pretty sure $*RAKU still has everything

[15:57] <discord-raku-bot> <antononcube> I tried that -- does not output anything.

[15:57] <guifa> m: $*RAKU.say

[15:57] <camelia> rakudo-moar f58bed9f6: OUTPUT: «Raku (6.d)␤»

[15:57] <ugexe> i think you should try again

[15:58] <guifa> m: $*RAKU.compiler.say; $*RAKU.compiler.version.say

[15:58] <camelia> rakudo-moar f58bed9f6: OUTPUT: «rakudo (2024.12.25.gf.58.bed.9.f.6)␤v2024.12.25.gf.58.bed.9.f.6␤»

[15:59] <discord-raku-bot> <antononcube> Ok, that works. But the equivalent of $*PERL.compiler .

[15:59] <ugexe> m: say $*RAKU.compiler

[15:59] <camelia> rakudo-moar f58bed9f6: OUTPUT: «rakudo (2024.12.25.gf.58.bed.9.f.6)␤»

[15:59] <ugexe> is that not equivalent?

[16:00] <discord-raku-bot> <antononcube> Ok. Yes it is!

[16:00] <discord-raku-bot> <antononcube> Basically, I exected to get a result without using say.

[16:02] <discord-raku-bot> <antononcube> In a WL notebook session. No say  is needed in the console or Jupyter.

[17:51] *** Aedil joined
[19:53] *** Aedil left
[20:47] *** bartolin left
[20:47] *** bartolin joined
[20:47] *** lizmat_ joined
[20:50] *** lizmat left
[20:51] *** broquaint left
[21:02] *** broquaint joined
[21:59] <discord-raku-bot> <aruniecrisps> hi everyone, i'm running into this issue again:   ❯ zef install DB::Pg --verbose ===> Searching for: DB::Pg ===> Found: DB::Pg:ver<1.1>:auth<cpan:CTILMES>:api<1> [via Zef::Repository::Ecosystems<rea>] ===> Searching for missing dependencies: LibUUID, pq:ver<5>:from<native> ===> Failed to find dependencies: pq:ver<5>:from<native> Failed to resolve some missing dependencies (use e.g. --exclude="pq" to skip)   i

[21:59] <discord-raku-bot> have libpq installed in /usr/local/lib from last time, but i'm not sure where DB::Pg is looking for it.

[22:03] <timo> i think zef just doesn't have an implementation for finding something from "native", so just put --exclude="pq" in the install command and it should work

[22:07] <discord-raku-bot> <aruniecrisps> i'm looking at my message history, i ran into this problem earlier and i seemed to have fixed it with symlinking, but the thing is even though libpq is symlinked, it's still giving me this problem

[22:17] <discord-raku-bot> <aruniecrisps> i also tried running zef install DB::Pg --exclude="pq" zef install --exclude="pq" DB::Pg and zef --exclude="pq" install DB::Pg, but it's still throwing that error

[22:56] <ab5tract> aruniecrisps: I wonder if it could be a versioning issue? `--exclude="pq"` _should_ work, but 

[22:58] <ab5tract> maybe using zef look and altering the META6.json dependency to match your installed version is worth a look?

[23:14] *** xinming left
[23:17] *** sena_kun left
[23:46] <guifa> can a hash both autovivify and autostore?  such that %hash<previously-unused-element>; results in that key now existing?

[23:47] <guifa> using %hash<foo> //= Foo.new right now but I feel like there ought to be a better way

