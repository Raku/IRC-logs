[00:00] <Xliff> guifa: Actually, the trait would apply a role which would contain bot an $!ast attribute and an .AST method. If detected, any callable will preserve it's AST in $!ast to be retrieved at runtime by .AST()

[00:00] <Xliff> s/any callable/any properly marked Callable/

[00:00] <guifa> yeah, what I mean is that I believe it's still undecided if a trait's sub will receive the callable itself or the AST of the trait

[00:01] <guifa> obviously, a LOT can be done with the latter

[00:01] <guifa> but as it's done now, all code assumes a compiled sub

[00:01] <guifa> if the decision is made to enable some way for a trait to get the AST

[00:01] <guifa> then it would be very easy, as the trait could mix in the role with that attribute

[00:01] <Xliff> My point exactly.

[00:02] <guifa> (obviously, I'm missing back story, I just saw your message to lizmat)

[00:02] <Xliff> That's part of a plan I have to take Raku code and output JS for web-based use cases.

[00:02] <Xliff> Take RakuAST and then transform the nodes to JavascriptAST for eventual .DEPARSE

[00:26] <Xliff> role ASTPreserved { has $!ast; method .AST { $!ast }; method Str { $!ast.DEPARSE } };

[00:26] <Xliff> Now.... where to put it..... Actions.nqp? But I want it exposed to Raku.

[00:43] * guifa wonders if what should be done is for trait_mod subs to themselves have traits to be either run at { or at }.  Right now it's always } 

[00:49] <tonyo> is that already started? the rakuast -> js ast?

[01:01] <Guest94> librasteve it does not change anything for me. When I use Timestamp grammar/parser I trust it to know what it is. I don’t know to worry about dedicating it some specific chunk.

[01:01] <Guest94> Timestamp already knows how to parse it.

[01:02] <Guest94> *I don’t want to worry about...

[01:03] <Guest94> What if it was parsing data like `2024-01-02T12:34+01:00GMT`

[01:03] <Guest94> Then `\w+` won’t work anymore.

[01:28] *** kylese left
[01:32] *** kylese joined
[01:36] *** Some-body_ joined
[01:39] *** DarthGandalf left
[01:39] *** Some-body_ is now known as DarthGandalf

[01:42] <guifa> Guest94: I believe both me and codesections had a discussion on this aobut a year or two ago

[01:42] <guifa> There's several different ways for integrating one grammar into another

[01:44] <Guest94> You mean apart from `is`?

[01:45] <Guest94> I would even say `is` is not integrating one grammar into another, it just inherits a bunch of tokens omitting the most important high-level one — TOP

[01:47] <Guest94> But nothing really works for my artificial simple example, and we’ve been discussing this quite a bit already here

[01:47] <Guest94> So I wonder if there is even one way that works

[01:48] <guifa> https://www.reddit.com/r/rakulang/comments/stpvft/grammatical_actions_further_thoughts_on/  Take a look at some of the comments

[01:48] <guifa> https://tio.run/##jVC9TsMwEN7zFKc2UhMTpYKBIQ1GMCA2GNiqDpfGTa3GcWSbAZU8e7AdR0Ri4STLtu77u@uZau/HRqEQqODZnmsEtoy8sA4@3t7hCiW2/RkpDNEQHVvU2uGejobLTge4YOYsa49P4m1qSQIvDFYk3pKVI45reGVYMwVc9FIZrwHY1QutKJpzvEj5N4f/76GsecMNhW8oT1Ix3nSF08gWQhQONx49LMMFtA0YbDKIcSI8usQe62ru5/qz6lFplmjWnnKpeJNBMXPss5d6ahmZprvgOERhSXaIfy0pnueglObC7mgSEV82Hjw4mdynKGBzi3fVxhqHCMmvhbXX6Bjz7ZV2sIY9QQKkIodx/AE

[01:49] <guifa> You can tweak that to make it more elegant for specific-case scenarios rather than the general case that it was designed for

[01:52] <Guest94> https://www.codesections.com/blog/grammatical-actions/ this page is 404

[01:52] <guifa> Note I said comments

[01:52] <Guest94> I noted

[01:52] <Guest94> But there might be some good context there too, right?

[01:53] <Guest94> There seems to be a web-archive snapshot from year 2022

[01:53] <guifa> eh potentially.  I don't know why that one 404s.  We were going back and forth a bit so he might have taken it down in favor of a newer article

[01:55] <tonyo> Guest94: what doesnt work in any of the given solutions

[01:56] <Guest94> tonyo It does not parse. Because <timestamp> is in the middle of the Filename TOP, not at the beginning. And there is also something after it.

[01:57] <tonyo> what do you mean not at the beginning?

[01:57] <guifa> https://tio.run/##jZDNTsMwEITveYqRiNSmrQKEn0N/IoEQ4gaH3lAP28S0UeM4so1QVfJk3HixYDtJG8EFX@zVrHe@nZLJ/LbeSOKcJB5IM6WJlzh4gBY7VmD5/IIDTAn48z0jGS9eMQ/TbJPpGKMRrletyEWht0bti1EnprS3H/FHrLzKS3JS6uR@l@hMFMpBAJzprUgdx9A/DwwMpx1z3WHBPqYYt1wT@2og3NNamun1GZ4YpUwi46WQWuHerEpFau/WyvO6CB6FaH1767vaHrM55eWWYnxirjPe8MZYjV1L1Qc@yl189hx3DNX7uiSp2FCx/C0UMttMMKUGZ/g7isBopVBNrxZBMGv9Kq8Nz3D/Kza/h/39FXITTDOG7@ETFnZQ6MCmGNA6iS6iq8souhn06E5ehkOR/djdbuCsrn8A

[01:57] <tonyo> also, how have you changed it and how is it failing?

[01:57] * guifa wonders why this isn't exactly what Guest94 wants

[01:58] <tonyo> i'm getting the sense that this is just crowd source guessing an acceptable solution

[01:58] <guifa> grammar Foo assumes no knowledge of the timestamp grammar, other than the identity of the actions class associated with it.  It integrates perfectly, with a controllable top level name

[01:58] <Guest94> tonyo you suggested this:

[01:58] <Guest94> grammar A { rule TOP { ^ "a"+ $ } }; grammar B { rule TOP { ^ <call-a-grammar> $ }; token b { "b"+ }; }; B.^add_method("call-a-grammar", -> *@_, *%_ { A.parse(@_[*-1].orig) }); dd B.parse("aaaa")

[01:58] <Guest94> Where <call-a-grammar> is at the beginning of the B::TOP

[01:58] <tonyo> yea, that was the least good as i stated then

[01:58] <Guest94> Based on that I tried to apply it to my artificial example: https://pastebin.com/8M25pvWm

[01:59] <Guest94> Where <call-a-grammar> is a <timestamp> in my case

[01:59] <Guest94> But it won’t work because @_[*-1].orig return the whole input string while the TOP rule looks like rule TOP { <name>'-'<timestamp>'.'<extension> }

[02:00] <Guest94> You can see there is `<name>'-'` in front of it and `'.'<extension>` after.

[02:00] *** DarthGandalf left
[02:01] <Guest94> Timestamp grammar won’t parse because it’s getting also `foo-` and `.bar` apart from it needs.

[02:01] *** evalable6 left
[02:02] <Guest94> I made it to parse by cutting off the beginning by reading the `.pos` of already parsed chunk and replacing parse to subparse so that it can consume partially:

[02:02] <Guest94> Timestamp.subparse(@_[*-1].orig.substr(@_[*-1].pos))

[02:03] <Guest94> But the fact this *method* consumed something does not seem to propagate properpy up to Filename grammar so it fails to parse when trying to parse `'-'<extension>` as far as I can see

[02:04] <Guest94> guifa that example could be what I’m looking for, I need to test first

[02:04] <guifa> Guest94: why are you using parse?  You should be using subparse

[02:04] <guifa> parse will tell TOP to assume ^ and $

[02:04] <Guest94> I took tonyo’s suggestion, and I actually did change it to subparse

[02:05] <guifa> ah ok, in the most recent pastebin it had parse, hence the question

[02:05] <Guest94> That’s just the only pastebin I dropped here. I only added in the chat here that I tried to do this: Timestamp.subparse(@_[*-1].orig.substr(@_[*-1].pos)) instead

[02:06] <Guest94> Which actually parses Timestamp, but it does not integrate properly with the higher-level Filename grammar

[02:39] *** kylese left
[02:40] *** kylese joined
[02:49] *** jpn joined
[02:50] <tonyo> dang, forgot about subparse

[02:50] <tonyo> you'll need to combine librasteve's thing in there

[02:51] <tonyo> err, something like it

[02:53] *** bartolin left
[02:53] *** bartolin joined
[02:54] *** jpn left
[03:15] *** kylese left
[03:17] *** kylese joined
[03:56] *** opus left
[04:39] <Guest94> Woah, this really works: https://pastebin.com/5k294nfZ this looks exactly how I was imagining. Thanks guifa

[04:40] <Guest94> Though the only big problem I see here is when the parsing fails. There are a lot of errors written to the log and the failure is actually masked.

[04:41] <Guest94> It does not fail the program, it only misbehaves later.

[04:42] <Guest94> It looks like this if I just add a space at the beginning of the string I try to parse: https://pastebin.com/4Xks0MEm

[04:52] <Guest94> Adding *defined* type helps to prevent the error masking Match:D

[04:55] <Guest94> What is the best way to handle parsing failures?

[04:58] <Guest94> Is checking for .defined good enough? Do grammars provide any extra info when parsing fails?

[04:58] <tonyo> that seems like a problem left up to the reader : ).  you could use a try 

[04:59] <tonyo> try { .subparse ... } // Nil

[04:59] <tonyo> or whatever they're supposed to return

[04:59] <tonyo> maybe it's Failure

[05:03] <Guest94> I actually don’t know if the problem is in that new method. Do the grammars throw exceptions on parsing by default?

[05:04] <Guest94> It doesn’t seem so. If the parsing fails it’s just Nil

[05:04] <Guest94> If if there are no nesting of other grammars, only tokens

[05:05] <Guest94> I’m fine with that, just wondering if maybe there is some relatively useful data obtainable for an error message

[05:08] <Guest94> Some Match object with partially consumed/parsed chunk could be useful for debugging for instance

[05:09] *** epony left
[05:21] <Guest94> Is there some way to validate an expression against some type without creating a variable?

[05:35] <Guest94> Can I somehow filter keys of a hash? Like apply a predicate that decides where to keep the key or omit it?

[05:53] *** Xliff_ joined
[05:53] <Xliff_> \o

[05:53] <Xliff_> antoncube: You around?

[06:12] *** Xliff_ left
[06:32] <Guest94> I assume I can use dummy variable for inline type-checking? Like this: my SomeType:D $ = someExpr

[06:36] <Guest94> What method or whatever would you suggest as .reduce but with an accumulator?

[06:37] <Guest94> I want to write an expression that would populate some value (e.g. an array or a hash)

[06:38] <Guest94> From what I can see unlike in other languages .reduce (aka fold) in Raku is not designed to take accumulator.

[06:38] <Guest94> It only applies some operation producing the same type?

[06:47] *** Aedil left
[06:50] *** Aedil joined
[07:06] *** notable6 left
[07:18] *** jpn joined
[07:22] *** jpn left
[08:29] *** abraxxa joined
[08:31] *** abraxxa1 joined
[08:35] *** abraxxa left
[08:41] *** DarthGandalf joined
[08:44] *** sena_kun joined
[08:55] *** maylay left
[08:58] *** maylay joined
[09:33] *** Sgeo left
[09:35] *** jpn joined
[09:41] *** jpn left
[09:48] <discord-raku-bot> <nemokosch> The "producing the same type" part is more just a semantic expectation than anything enforced

[09:50] *** jpn joined
[09:51] <discord-raku-bot> <nemokosch> And you are right, there is no dedicated accumulator, neither a dedicated direction. The operator decides. You'd have to add the initial value at the right position

[09:54] <discord-raku-bot> <nemokosch> Re filtering keys: grep works, it will take Pairs and produce a sequence of Pairs that you can convert back

[09:58] <discord-raku-bot> <nemokosch> m: my @lottery = (1..100).pick(10); dd @lottery; my %groups = @lottery.classify(* % 5); dd %groups; dd %groups.grep(.key > 2); %groups.=grep(.key > 2); dd %groups

[09:58] <discord-raku-bot> <Raku eval>  Array @lottery = [23, 83, 7, 56, 26, 18, 60, 19, 39, 86] Hash %groups = {"0" => $[60], "1" => $[56, 26, 86], "2" => $[7], "3" => $[23, 83, 18], "4" => $[19, 39]} ("3" => $[23, 83, 18], "4" => $[19, 39]).Seq Hash %groups = {"3" => $[23, 83, 18], "4" => $[19, 39]} 

[09:59] <discord-raku-bot> <nemokosch> Casually ate up a few asterisks

[09:59] <discord-raku-bot> <nemokosch> Of course it was *.key > 2

[10:07] *** jpn left
[10:17] *** jpn joined
[10:18] *** abraxxa1 left
[10:23] *** jpn left
[10:28] *** jpn joined
[10:34] *** mark22k left
[10:34] *** mark22k joined
[10:36] *** Xliff_ joined
[10:37] *** jpn left
[10:38] *** Some-body_ joined
[10:41] *** DarthGandalf left
[10:42] *** Some-body_ is now known as DarthGandalf

[11:09] <guifa> re grammars, no, they don't throw exceptions on fail.  There are ways to do it, for instance, in your Filename, if you want it to throw if the timestamp is invalid...

[11:10] <guifa> <name> '-' [ <timestamp> || <.bomb> ] '.' <extension>

[11:10] <guifa> and then have a method called <.bomb> which could throw an error and potentially output the current match tree

[11:10] <guifa> err

[11:11] <guifa> method bomb { die "There was a problem at " ~ self.to } 

[11:12] <discord-raku-bot> <nemokosch> in an eager and "voluntaristic" parser like this, the concept of parse error isn't very much established

[11:13] <discord-raku-bot> <nemokosch> at the end of the day, the only objective statement is that the parsing failed - why it failed requires certain assumptions about what was surely good

[11:16] <guifa> right.  At best we could do is have a bomb for each of the five components -- but that only tells us which component was bad, not what was bad about it

[11:16] <guifa> And given the idea that we can't introspect the timestamp since it's coming from someone else's module, that's pretty much as good as we can get

[11:30] *** Guest94 left
[11:48] *** jpn joined
[11:54] *** jpn left
[12:33] *** jpn joined
[12:38] *** jpn left
[12:42] *** abraxxa joined
[12:49] *** sjn left
[12:55] *** sjn joined
[12:58] <discord-raku-bot> <nemokosch> makes sense

[13:07] *** TieUpYourCamel left
[13:20] <lizmat> discord people: what would be a good URL to use to point to you people on Discord ?

[13:22] *** merp left
[13:24] <lizmat> nemokosch librasteve antononcube ^^

[13:26] *** timo left
[13:27] *** merp joined
[13:28] *** timo joined
[13:34] *** jpn joined
[13:39] *** jpn left
[14:01] <discord-raku-bot> <antononcube> @lizmat Hmm… do you mean individually?

[14:02] <lizmat> no, to the Raku community on Discord

[14:02] <lizmat> where people would go if they want to join

[14:02] <discord-raku-bot> <antononcube> Right — I used the link on raku.org .

[14:03] <discord-raku-bot> <antononcube> https://discord.gg/VzYpdQ6

[14:03] <lizmat> ah, good point  thanks both!

[14:21] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/01/02/2024-01-happy-2-9-map³-sum/

[14:33] <discord-raku-bot> <nemokosch> lizmat: the happier syntax sugar in python is not Konstantin Narkhov I think

[14:33] <lizmat> Indeed.. oops.

[14:34] <lizmat> Fixed, thanks for the headsup!

[14:35] *** jpn joined
[14:40] *** jpn left
[14:42] *** melezhik joined
[14:42] <melezhik> o/

[14:42] <melezhik> Happy new year

[14:43] <lizmat> melezhik: insgelijks!   (that's Dutch for "the same to you!"

[14:43] <melezhik> Just published a small article on new Sparky feature - https://dev.to/melezhik/sparky-self-hosted-task-runner-with-easily-customizable-ui-4m0n if someone is interested

[14:43] <melezhik> lizmat: thanks 😊

[14:44] <lizmat> you just missed the weekly: it will be in the next  :-)

[14:44] <melezhik> Have some free time on holidays , it's cold in here , so decided to write some stuff

[14:44] <melezhik> No worries Liz

[14:45] <lizmat> posted on Reddit and programming.dev

[14:50] *** melezhik left
[14:52] <discord-raku-bot> <antononcube> What is the proper way to refer to articles in the advent blog? The full name with  the "Day XX" prefix, or just the rest of the name?

[14:52] *** melezhik joined
[14:53] <melezhik> Thanks a lot,  Liz!

[14:54] <lizmat> antononcube depends a bit on context, either would be fine, I'd say

[14:54] <discord-raku-bot> <librasteve> .oO .subparse & method-as-token, eh?  nice one tonyo! tbh I was frustrated since it's easy to combine tokens (via is / does / maybe MOP method surgery) but quite a struggle to combine Grammars ... until you know the recipe

[14:55] <discord-raku-bot> <librasteve> pity this Q&A is not on StackOverflow as will be hard to find later when I need it

[14:55] <discord-raku-bot> <librasteve> Guest94: a good challenge - thans for your patience!!

[14:57] *** melezhik left
[15:12] <Geth> ¦ problem-solving: lizmat unassigned from codesections Issue TAP refers to Perl 6 https://github.com/Raku/problem-solving/issues/416

[15:28] *** jpn joined
[15:36] *** jpn left
[15:36] *** jpn joined
[15:42] <tonyo> hah, librasteve it was definitely a group effort

[15:42] *** jpn left
[15:56] *** abraxxa left
[16:20] *** jpn joined
[16:25] *** jpn left
[16:31] <[Coke]> If you include the "day" you should include the year, probably, otherwise it won't age well

[16:38] *** jpn joined
[16:42] *** jpn left
[16:47] *** jpn joined
[17:16] *** Guest94 joined
[18:07] <[Coke]> just opened raku REPL on my mac and getting tons of complains about Cannot locate native library '/var/folders/8n/rypl9_990b9578zd5435pgr40000gn/T/.zef/1702343732.20256/1702343741.20256.5645.427279618365/resources/5342239100523A11F35C47F949A6974841869956.dylib'

[18:07] <[Coke]> Haven't run the REPL in a week, but haven't touched rakubrew recently either.

[18:10] <El_Che> did you update the OS or homebrew?

[18:34] *** Guest94 left
[18:38] <[Coke]> Nope

[18:39] <El_Che> mm

[18:40] <[Coke]> had Terminal::LineEditor installed. Just did a download (not a build) of 2023.12 via rakubrew, will reinstall T::LE and see if it works.

[18:41] <[Coke]> yup.

[18:42] <[Coke]> weird. the folder it's complaining about seems like a zef temp folder, no?

[18:43] <[Coke]> is there a zef command to clean out any builds/downloads?

[18:45] <[Coke]> ok. with the new setup that works, if I delete $TMPDIR/.zef, it breaks again

[18:47] <[Coke]> ... I'm guessing the previous failure was due to a reboot and tmp cleanup, then

[18:47] <[Coke]> ugexe: ^^

[18:58] <[Coke]> once it generates this error, not sure how to get it back. Forcing a re-install doesn't fix it

[18:59] <[Coke]> uninstall/reinstall doesn't work..

[19:04] <[Coke]> ah, might be a bug in LineEditor itself: https://github.com/ugexe/zef/issues/546

[19:05] <[Coke]> (Though why it would persist over a re-install of the module, not sure)

[19:07] <[Coke]> japhb: ^^ Anyone else report this issue?

[19:12] <[Coke]> ah, it's Term::termios

[19:12] <[Coke]> Don't see the RESOURCES  .Str issue in particular there.

[19:15] *** abraxxa-home joined
[19:16] *** abraxxa-home left
[19:18] *** abraxxa-home joined
[19:32] <[Coke]> https://github.com/krunen/term-termios/issues/22

[19:32] <[Coke]> .seen krunen

[19:32] <tellable6> [Coke], I saw krunen 2016-01-09T16:24:27Z in #perl6: <krunen> [Coke]: (re moving Rakudo release tags) I thought I only said it was talked about at some point, but confused discussion happened. Sorry.

[19:36] *** jpn left
[19:40] <[Coke]> https://github.com/retupmoca/P6-LibraryMake/blob/0c77bfd6d730b9f7cc5990e53bade01817d84435/lib/LibraryMake.rakumod#L89 - is calling .absolute also going to cache the value?

[19:40] <[Coke]> (like .Str does in the zef issue above)

[19:46] <ugexe> uninstalling it and/or reinstalling it should fix it yeah. although if its a dependency causing it i'm not sure if you'd have to also reinstall any reverse dependencies

[19:47] <[Coke]> Does that .absolute call look sus?

[19:47] <jdv> is sus a word now?

[19:48] <ugexe> That .absolute call (or anything that stringifies %?RESOURCES) is arguably wrong. but what you linked is documentation, not actually using it

[19:59] *** jpn joined
[20:00] <ugexe> I suppose we should also deprecate Distribution::Resource .absolute and .relative

[20:06] *** jpn left
[20:08] <ugexe> [Coke]: I wonder if you have an older version of Term::termios installed? https://github.com/krunen/term-termios/commit/67af4093a18ec8d7c2001ffc3ba343894849e07d

[20:11] <ugexe> ah right, the depends of Terminal::LineEditor pin to Term::termios:ver<0.2> but the commit above is v0.2.7

[20:13] <ugexe> Apparently it pins to v0.2 because of bugs in the later 0.2, so just installing a newer Term::termios manually might not fix it

[20:27] *** jpn joined
[20:31] *** jpn left
[21:33] <[Coke]> jdv - it is here, for sure.

[21:36] *** Guest94 joined
[21:43] <Guest94> Is there some universal namespace wrapping in Raku? Like if I want to define multiple subroutines but put everything under a namespace.

[21:43] <Guest94> Something like: my \ns = namespace { sub foo {} sub bar {} }; ns.foo; ns.bar?

[21:45] <[Coke]> https://docs.raku.org/language/packages

[21:47] <guifa> package Foo { sub a { ... }; sub b { ... } }; Foo::a, Foo::b.  Just be aware that while subs are by default our-scoped, variables will not be.  If you want to my-scope a routine within a package (make it invisible to the outside world), just do `my sub c { ... }` to adjust the scope

[22:06] <jdv> ha

[22:18] <discord-raku-bot> <librasteve> m: package Foo { our sub a { 1 } our sub b { 2 } } say Foo::a, Foo::b;

[22:18] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus statement at /home/glot/main.raku:1 ------> package Foo { our sub a { 1 } o⏏ur sub b { 2 } } say Foo::a, Foo::b;     expecting any of:         whitespace 

[22:19] <discord-raku-bot> <librasteve> m: package Foo { our sub a { 1 }; our sub b { 2 } }; say Foo::a, Foo::b;

[22:19] <discord-raku-bot> <Raku eval>  12 

[22:19] <discord-raku-bot> <librasteve> m: package Foo { sub a { 1 }; sub b { 2 } }; say Foo::a, Foo::b;

[22:19] <discord-raku-bot> <Raku eval>  Exit code: 1 Could not find symbol '&a' in 'Foo'   in block <unit> at main.raku line 1  

[22:20] <discord-raku-bot> <librasteve> sub is my-scoped by default

[22:20] <Guest94> m: package Foo { sub a { 1 }; sub b { 2 } }; say a, b;

[22:20] <camelia> rakudo-moar 4e68b5387: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    b used at line 1␤␤»

[22:23] <discord-raku-bot> <librasteve> https://stackoverflow.com/questions/33788788/what-is-the-difference-between-my-class-and-our-class-in-rakuperl6

[22:23] <discord-raku-bot> <librasteve>  Subroutines default to lexical (my) scope Methods default to has scope (only visible through a method dispatch) Type (class, role, grammar, subset) and module declarations default to package (our) scope Constants and enumerations default to package (our) scope 

[22:23] <discord-raku-bot> <librasteve> also some good advice from jnthn when to do what (eg. use my scope with is export)

[22:43] <discord-raku-bot> <librasteve> m: package Foo {sub a is export {1}; sub b is export {2}}; import Foo; say a,b;

[22:43] <discord-raku-bot> <Raku eval>  12 

[22:43] <discord-raku-bot> <librasteve> https://stackoverflow.com/questions/34688662/how-can-i-declare-and-use-a-perl-6-module-in-the-same-file-as-the-program

[22:46] <discord-raku-bot> <librasteve> https://docs.raku.org/language/module-packages#Working_with_modules

[22:49] <discord-raku-bot> <librasteve> and https://docs.raku.org/language/modules#UNIT::EXPORT::* if you want to get fancy

[23:09] <discord-raku-bot> <nemokosch> well, this is not great... rakubrew fails with the error Steve already opened an issue for, and rakudo-pkg installs some horribly obsolete version

[23:09] <discord-raku-bot> <nemokosch> for the new VPS, Debian 12

[23:10] <discord-raku-bot> <nemokosch> eventually I just wget'd the deb file and installed it with dpkg

[23:11] *** Guest94 left
[23:19] *** sena_kun left
[23:22] *** Woodi left
[23:44] *** Sgeo joined
[23:58] *** abraxxa-home left
