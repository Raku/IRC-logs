[00:02] *** Sgeo joined
[00:47] *** ACfromTX left
[01:01] *** ACfromTX joined
[01:35] *** hulk joined
[01:35] *** kylese left
[01:43] *** MasterDuke joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:44] *** Aedil joined
[05:30] *** Sgeo left
[05:55] *** sftp joined
[06:47] *** sena_kun joined
[07:01] *** sena_kun left
[07:07] *** sena_kun joined
[07:16] *** dawids joined
[07:16] *** dawids left
[07:30] *** sena_kun left
[07:31] <discord-raku-bot> <librasteve> lucs: sorry, i was asleep - the div … label … input keywords in my example are imported subs from a new module I am working on … HTML::Functional … which helps you write HTML in a functional style inspired by elm-lang

[07:51] <discord-raku-bot> <scullucs> @librasteve Ah, cool. They looked like they may have been Raku builtins, but used in a strange way. Thanks.

[08:08] *** wayland joined
[08:12] *** dakkar joined
[08:15] *** ACfromTX left
[08:17] <discord-raku-bot> <nahita3882> you can chain colon-pairs without a comma to make a List of them but you need to wrap them in parens, e.g.,  >>> :2x :5y  # The :5y part is passed to the Pair.new as a keyword argument, and ignored x => 2  >>> Pair.new('x', 2, :5y)  # i.e., this is what happens for above x => 2  >>> (:2x :5y)  # now they are recognized separately (x => 2 y => 5)  >>> (:2x:5y)  # space optional (x => 2 y => 5)   When passing them to

[08:17] <discord-raku-bot> a function, same notion is in action but furthermore, you don't need the parens, so f :2x :5y or f :2x:5y works. and :$arg is short for 'arg' => $arg so it all works

[08:19] *** donaldh_ joined
[08:22] *** donaldh left
[08:22] <discord-raku-bot> <scullucs> @nahita3882 Thanks for the details.

[08:25] <discord-raku-bot> <nahita3882> (S/you don't need the parens/you don't write the parens/; # otherwise it's a 1 positional, List argument, not N keyword arguments)

[08:27] <discord-raku-bot> <scullucs> Gotcha.

[08:28] *** ACfromTX joined
[08:32] *** dustinm` left
[08:37] *** dustinm` joined
[10:21] <patrickb> m: grammar G { token TOP { :my $*s = "\""; \" [ <!$*s> . ]* \" } }; dd G.parse("\"a\"");

[10:21] <camelia> rakudo-moar 70059eb1a: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at /home/camelia/EVAL_0:1␤------> anon regex {  "}⏏<EOL>␤    expe…»

[10:21] <patrickb> Another bug?

[10:22] <patrickb> Any ideas how I could work around this?

[10:27] <wayland> Would qq{} help?  

[10:36] <patrickb> wayland: Can you make a code snippet?

[10:42] <wayland> patrickb: I don't even understand what you're doing :) .  But I'll try.  

[10:42] <wayland> m: grammar G { token TOP { :my $*s = "\""; \" [ <!$*s> . ]* \" } }; dd G.parse(qq{"a");

[10:42] <camelia> rakudo-moar 70059eb1a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Couldn't find terminator } (corresponding { was at line 1)␤at <tmp>:1␤------>  <!$*s> . ]* \" } }; dd G.parse(qq{"a");⏏<EOL>␤    expecting any of:␤        }␤»

[10:42] <wayland> m: grammar G { token TOP { :my $*s = "\""; \" [ <!$*s> . ]* \" } }; dd G.parse(qq{"a"});

[10:42] <camelia> rakudo-moar 70059eb1a: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at /home/camelia/EVAL_0:1␤------> anon regex {  "}⏏<EOL>␤    expe…»

[10:43] <wayland> m: grammar G { token TOP { :my $*s = qq{"}; \" [ <!$*s> . ]* \" } }; dd G.parse(qq{"a"});

[10:43] <camelia> rakudo-moar 70059eb1a: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at /home/camelia/EVAL_0:1␤------> anon regex {  "}⏏<EOL>␤    expe…»

[10:43] <wayland> m: grammar G { token TOP { :my $*s = qq{"}; '"' [ <!$*s> . ]* '"' } }; dd G.parse(qq{"a"});

[10:43] <camelia> rakudo-moar 70059eb1a: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at /home/camelia/EVAL_0:1␤------> anon regex {  "}⏏<EOL>␤    expe…»

[10:44] <wayland> m: grammar G { token TOP { :my $*s = qq{"}; '"' [ <!$*s> ]* '"' } }; dd G.parse(qq{"a"});

[10:44] <camelia> rakudo-moar 70059eb1a: OUTPUT: «===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at /home/camelia/EVAL_0:1␤------> anon regex {  "}⏏<EOL>␤    expe…»

[10:44] <wayland> Nope.  Maybe marginally more readable, but otherwise not helpful.  

[11:23] <patrickb> Oh well, thanks anyways.

[11:32] *** MasterDuke left
[11:39] <patrickb> m: grammar G { token TOP { :my $*s = "\""; \" [ <thing> ]* \" }; token thing { . <?{ $/ ne $*s }> } }; dd G.parse("\"a\"");

[11:39] <camelia> rakudo-moar aada362ff: OUTPUT: «Match.new(:orig("\"a\""), :from(0), :pos(3), :hash(Map.new((:thing([Match.new(:orig("\"a\""), :from(1), :pos(2))])))))␤»

[11:39] <patrickb> That works.

[11:43] <wayland> Nice!  

[11:45] <wayland> Where do I report bugs in Pod6 generation?  Please .tell me, because I'm about to go to bed.  Goodnight all :) 

[11:53] <[Coke]> If you mean 'raku --doc', then rakudo/rakudo on github

[12:58] <discord-raku-bot> <antononcube> I am working on Python packages in the last few days... (Not being payed for it!!)

[12:59] <discord-raku-bot> <antononcube> Those Python packages are related to Quantile Regression.  1) Is anyone here interested or used Quantile Regression (QR)?    2) Would you use or study QR in if it is in Raku?

[13:01] *** jgaz joined
[13:16] <discord-raku-bot> <librasteve> o/ ... I am in the process of making an HTML::Functional module and I notice on raku.land a cpan module called HTML::Lazy that already does this ... https://raku.land/cpan:SAMGWISE/HTML::Lazy

[13:17] <discord-raku-bot> <librasteve> rather than reinvent the wheel, I would like to keep (and improve) the HTML::Lazy module - is it destined for raku community modules (sorry I do not know if there has been any recent dialog withe the author - I note that there are two outstanding PRs by gfldex dated 2019

[13:17] <discord-raku-bot> <librasteve> ?

[13:19] <lizmat> the module author was not contacted, as that module resides on CPAN

[13:19] <lizmat> and as such was not on p6c

[13:20] <discord-raku-bot> <librasteve> oh forgive me I thought the plan was to deprecate CPAN and P6C modules

[13:21] <discord-raku-bot> <librasteve> HTML::Lazy has one dependency on HTML::Escape which is on CPAN and P6C ... author Moznion ...  has a future path been decided for this?

[13:21] <lizmat> well, yes, but so far only authors with modules on p6c have been contacted

[13:22] <discord-raku-bot> <librasteve> on HTML::Lazy what would be my best course of action?

[13:22] <lizmat> no

[13:23] <lizmat> ping the author of the modules with an issue, asking them how they feel about you taking over maint or moving it to raku-community-modules ?

[13:23] <discord-raku-bot> <librasteve> ok, I'll do that for HTML::Lazy and give a coupla days

[13:28] <discord-raku-bot> <librasteve> done

[13:28] <lizmat> librasteve++

[13:33] <discord-raku-bot> <librasteve> what is the the story for HTML::Escape? - did you contact moznion since they are on P6C?

[13:35] <lizmat> yes: https://github.com/moznion/p6-Backtrace-AsHTML/issues/13   no reply yet

[13:35] <lizmat> you might add a ping there  :-)

[13:36] <lizmat> they do appear to be active on Github still

[13:36] <lizmat> so maybe this issue was lost in all of the other mail they get from Github

[13:39] <discord-raku-bot> <librasteve> ok - have commented on the issue - I would like HTML::Escape to become raku community adopted if radio silence continues

[13:44] <discord-raku-bot> <librasteve> tx!

[13:53] <discord-raku-bot> <antononcube> I used "HTML::Escape" in "Markdown::Grammar" and I was adviced to remove it. (So, I did.)

[14:04] <discord-raku-bot> <librasteve> @antononcube - ok ... did you pick another modules for escaping HTML (one that we can all put weight behind)?

[14:05] <discord-raku-bot> <librasteve> I see it currently has 7 reverse dependencies App::MPD::Notify HTML::Lazy Oddmuse6 Pod::To::HTML::Section Sparky Task::Popular Text::Markdown

[14:07] <discord-raku-bot> <antononcube> @librasteve No, I think use(d) and ad-hoc escaping code. (Taken, say, from rosettacode.)

[14:07] <discord-raku-bot> <librasteve> what was the rationale for dropping it?

[14:10] <discord-raku-bot> <antononcube> I honestly do not know or remember -- Nemokosch used "Markdown::Grammar" and found some little problems with that due to that HTML-escaper. It is a small package, right. Here is the ad-hoc implementation : https://github.com/antononcube/Raku-Markdown-Grammar/blob/76c0e7bf975a3e3c4fe41143139aade981423d16/lib/Markdown/Actions/HTML.rakumod#L9

[14:13] <discord-raku-bot> <librasteve> yeah 78 loc including pod6 - probably we should be edging this functionality to community => '_' => rakudo-star (on proviso that it works correctly)

[14:14] <discord-raku-bot> <librasteve> tx!

[14:42] *** phogg left
[14:43] *** phogg joined
[14:51] *** xinming left
[14:51] *** xinming joined
[14:56] *** elcaro left
[14:57] *** elcaro joined
[15:53] *** donaldh_ left
[15:53] *** dakkar left
[15:53] *** jrjsmrtn left
[15:53] *** japhb left
[15:53] *** xelxebar left
[15:54] *** japhb joined
[15:54] *** jrjsmrtn joined
[15:54] *** xelxebar joined
[15:54] *** dakkar joined
[15:54] *** donaldh joined
[16:04] *** wayland76 joined
[16:04] *** wayland left
[16:37] *** dakkar left
[17:00] *** abraxxa-home joined
[17:20] *** abraxxa-home left
[17:53] *** GreaseMonkey left
[18:35] *** greaser|q joined
[19:17] *** Aedil left
[20:06] *** xinming left
[20:07] *** xinming joined
[20:34] *** greaser|q left
[20:34] *** greaser|q joined
[20:34] *** greaser|q is now known as GreaseMonkey

[21:13] <wayland76> Now that it's morning, let me reiterate -- Where do I report bugs in Pod6 generation?  

[21:23] *** kst joined
[21:25] *** sena_kun joined
[21:30] <[Coke]> If you mean 'raku --doc', then rakudo/rakudo on github

[21:31] <wayland76> That's the one!  Thanks!  Is there doco that suggests where to report bugs?  

[21:32] <[Coke]> https://raku.org/downloads/

[21:32] *** sftp left
[21:32] <[Coke]> "Reporting Bugs"

[21:32] <wayland76> Oh, lovely.  

[21:35] *** El_Che left
[21:36] *** El_Che joined
[22:35] <wayland76> I've found https://docs.raku.org/language/variables#The_=_twigil but how do I access the Pod in a different file?  I'm attempting to build a table of contents for all my Pod doco by reading the =NAME and the like -- if there's already something that does that well, let me know :) .  

[22:47] *** wayland76 left
[23:09] *** sena_kun left
