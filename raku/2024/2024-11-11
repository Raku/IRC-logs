[01:33] *** Manifest0 left
[02:10] *** kwolcott joined
[02:11] <kwolcott> Newbie here

[02:11] <kwolcott> Been learning/using Raku by exploring Rosetta Code.

[02:12] <kwolcott> I use MacPorts (obviously I'm on MacOS)

[02:12] <discord-raku-bot> <antononcube> To Raku or programming in general?

[02:12] <kwolcott> I've installed the Primesieve Library.

[02:13] <kwolcott> But I am unable to install the Raku Primesieve module even though I was able to install the Perl Primesieve module.

[02:13] <discord-raku-bot> <antononcube> Consider using rakubrew: https://rakubrew.org

[02:14] <kwolcott> I'm (re)learning Ada, learning Julia, (re)learning Perl, learning Raku, almost everything that I can do on my Mac that is open-source.

[02:15] <kwolcott> yes, I tried that once, perhaps I screwed it up :-)

[02:15] <kwolcott> I have a Raku from MacPorts and one that I installed from source.

[02:15] <discord-raku-bot> <antononcube> Installed from source!!

[02:16] <kwolcott> When using zef to install Raku packages, how does it know where to install them? I can specify with cpanm when using Perl.

[02:18] <discord-raku-bot> <antononcube> I kind of know that for rakubrew… But I think this question has been asked before.

[02:19] <discord-raku-bot> <antononcube> I.e, search IRC’s logs.

[02:20] <discord-raku-bot> <antononcube> The creator / maintainer of zef  @ugexe frequently is seen here, so might answer.

[02:20] <kwolcott> my Mac is using arm, not Intel/AMD, and I do not want Intel/ARM (or hybrid/universal) on the Mac, so I'll try the manual install and try going for the shell approach rather than the shim approach.  Learning as I go here :-)

[02:21] <discord-raku-bot> <antononcube> Hmmm… do you think it is faster ?

[02:22] <discord-raku-bot> <antononcube> I mean, Raku installed from sources on arm.

[02:24] <discord-raku-bot> <antononcube> I am not sure why would anyone learn Ada. Julia is worth knowing, but if one knows or uses R or Mathematica, Julia is (much) less interesting or needed.

[02:27] <kwolcott> Well, I started with BASIC, then Pascal, then C, then Ada (that was in college).  Then I used Perl.  I've always wanted to re-learn Ada and I'm getting better at it now. I'm also expermining with Maxima and Octave, as well as R.  I don't have  Mathematica.

[02:28] <kwolcott> Where is zef under rakubrew?

[02:36] <kwolcott> I tried ~/rakubrew build-zef which fails because it is trying to install zef where my raku is that I built from source; I'd like to have a zef based on the rakubrew.

[02:38] <kwolcott> I tried rakubrew available, how do I choose MoarVM? The most recent Raku version will be fine.  I guess I can't build zef until I have a local Raku installed under rakubrew :-)

[02:45] <kwolcott> ok, building a Mac raku for arm using rakubrew now...

[02:48] *** kylese left
[02:48] *** kylese joined
[02:55] *** leah2 left
[02:55] <kwolcott> So, how do I tell zef where to look for the Primesieve Library? zef help spews out lots of info, not grokking it (yet)

[03:05] <ab5tract> Why does anyone learn anything? Ada is a great language 

[03:07] <ab5tract> kwolcott: so did you install `Math::Primesieve`? (https://raku.land/github:CurtTilmes/Math::Primesieve)

[03:08] <ab5tract> you can configure where zef installs to by using either `--install-to` or via the env var `ZEF_INSTALL_TO`

[03:10] <ab5tract> I recommend using `rakubrew` with defaults

[03:15] *** kylese left
[03:15] *** kylese joined
[03:19] <kwolcott> not able to install it, zef complains about not being able to find the library; but cpanm had no problem finding it.

[03:20] <ab5tract> ah, I see

[03:20] <ab5tract> did you install `primesieve` via brew?

[03:21] <kwolcott> no, I use MacPorts, not brew

[03:21] <ab5tract> ah, ok. I think it's the same issue either way

[03:22] <ab5tract> if it's what I think it is, it is related to mac security settings for loading shared libraries

[03:22] <ab5tract> which makes the successful installation of perl's version interesting to note

[03:22] <kwolcott> MacPorts installs stuff under /opt/local

[03:23] <ab5tract> does the perl module work as expected in addition to installing successfully?

[03:24] <kwolcott> brief testing of the Perl Priemesieve module was successful, yes.

[03:33] <ab5tract> ok thanks for confirming that

[03:33] <ab5tract> I have a feeling that the problem is related to what this module is designed to solve: https://raku.land/zef:lizmat/MacOS::NativeLib

[03:34] <ab5tract> however I'm not getting it to work that way either :/

[03:37] *** guifa joined
[03:41] <ab5tract> ah! I found the problem

[03:41] <ab5tract> the version of primesieve installed by brew is 12

[03:42] <ab5tract> but `Math::Primesieve` is looking for versions v7, v8, and v9

[03:42] <kwolcott> ah but what version of Primesieve do I have from MacPorts? Looking...

[03:43] <kwolcott> port installed | grep primes

[03:43] <kwolcott>   primesieve @12.4_0 (active)

[03:45] <ab5tract> it seems weird to require a hardcoded list of versions for module loading

[03:46] <ab5tract> but I've never used the `NativeLibs` module that this code relies on

[03:46] <ab5tract> so, the fastest option to install is `git clone https://github.com/CurtTilmes/raku-primesieve.git` and adding `v12` to the for loop on line 7

[03:46] <ab5tract> then `zef install .`

[03:48] <kwolcott> ok, thanks for the debugging and hints; will try later tonight.

[03:52] <ab5tract> this is a more comprehensive solution (especially in case there is still an issue with the the macOS library loading) https://gist.github.com/ab5tract/8aad1605aeb120a006caec594c1cf58b

[03:57] <ab5tract> kwolcott: it bothered me enough to clone and fix here : https://github.com/ab5tract/raku-primesieve

[03:57] <ab5tract> it's not in the ecosystem yet though, so you will need to clone and do a `zef install .`

[03:57] <ab5tract> happy hacking!

[04:06] *** kwolcott left
[04:16] *** Xliff left
[04:54] *** japhb joined
[05:08] *** japhb left
[05:10] *** japhb joined
[05:12] *** zara left
[05:28] *** leah2 joined
[06:01] *** Aedil joined
[08:06] *** japhb left
[08:07] *** zara joined
[08:10] *** japhb joined
[08:11] *** Sgeo left
[08:17] *** zara left
[08:25] *** leah2 left
[08:41] *** leah2 joined
[08:47] *** sena_kun joined
[08:48] *** zara joined
[08:55] <SmokeMachine> m: 42.say: "!!!" # LTA Error message?

[08:55] <camelia> rakudo-moar dc0342502: OUTPUT: «Cannot resolve caller print(Int:D: BOOTStr); none of these signatures matches:␤    (Mu $:: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[08:55] <SmokeMachine> why is that giving a print error?

[08:56] <SmokeMachine> and shouldn't that work? `say 42, "!!!"`, shouldn't `42.say: "!!!"` also work?

[08:57] <SmokeMachine> m: say 42, "!!!"

[08:57] <camelia> rakudo-moar dc0342502: OUTPUT: «42!!!␤»

[09:05] <SmokeMachine> must be related to this: https://github.com/rakudo/rakudo/blob/dc03425027c42a7458f90f3ff68dd237b5a730b5/src/core.c/Mu.rakumod#L843-L845

[09:19] <SmokeMachine> m: augment class Cool { method say(**@args) is default {say self, |@args} }; 42.say: "!!!" # would something like this make sense?

[09:19] <camelia> rakudo-moar dc0342502: OUTPUT: «42!!!␤»

[09:25] *** Manifest0 joined
[09:42] <timo> SmokeMachine: i think 42.say: "!!!" should not work like say 42, "!!!"

[09:46] <SmokeMachine> timo: that's ok, I think... but the error should be better, no?

[09:47] <timo> you mean because your code calls say and it's complaining about print?

[09:48] <timo> and/or because BOOTStr is an odd detail

[09:58] <SmokeMachine> yes, because a call on "say" errs print...

[09:58] <SmokeMachine> BOOTStr also doesn't help... :)

[10:01] <timo> right, i'm not sure if we have anything for when one call mostly defers to something else, where we could have put the original thing in the error message. i guess a stack trace is kinda that haha

[10:12] *** sena_kun left
[10:30] <timo> maybe there should be a method more like AT-POS / BIND-POS for the purpose of outputting, that you can manually override instead of having to know you must pick "print" if you don't want to override print, put, as well as say

[10:31] <timo> but also i'm still not very happy about .say meaning "the invocant is a file handle and you want to output something into it" and "the invocant is an object that you want to output to $*OUT", but i can understand why it exists, and i don't have a good suggestion how to change it

[10:35] <SmokeMachine> why can't classes where .say will use self as the "where" to implement their own .say? speed wise or something like that?

[11:15] <lizmat> m: class A { method print(|c) { say "42" } }; A.say

[11:15] <camelia> rakudo-moar dc0342502: OUTPUT: «42␤␤»

[11:15] <lizmat> m: class A { method print(|c) { say "42" } }; A.say("foo")

[11:15] <camelia> rakudo-moar dc0342502: OUTPUT: «42␤»

[11:16] <lizmat> m: class A { method print(|c) { dd c; say "42" } }; A.say("foo")

[11:16] <camelia> rakudo-moar dc0342502: OUTPUT: «\("foo\n")␤42␤»

[11:28] <timo> can you rephrase that sentence? i'm not parsing it correctly

[11:36] <lizmat> Mu.say and Mu.put will call Mu.print

[11:37] <lizmat> so that a class would only need to provide a .print method

[11:37] <lizmat> m: class A { method print(|c) { dd c; say "42" } }; A.say("foo")

[11:37] <camelia> rakudo-moar dc0342502: OUTPUT: «\("foo\n")␤42␤»

[11:37] <lizmat> ^^^

[11:40] <lizmat> SmokeMachine: re "why can't classes where .say will use self as the "where" to implement their own .say? speed wise or something like that?"

[11:40] <lizmat> m: class A { method say(|c) { dd c; say "my own say" } }; A.say("foo")

[11:40] <camelia> rakudo-moar dc0342502: OUTPUT: «\("foo")␤my own say␤»

[11:41] <lizmat> m: class A { method say(|c) { dd c; say "my own say" } }; say A

[11:41] <camelia> rakudo-moar dc0342502: OUTPUT: «(A)␤»

[11:41] <lizmat> m: class A { method say(|c) { dd c; say "my own say" } }; A.say

[11:41] <camelia> rakudo-moar dc0342502: OUTPUT: «\()␤my own say␤»

[11:41] <lizmat> hmmmm

[11:43] <SmokeMachine> but it also "prepares" say for cases like when calling it on file handles... couldn't them have theres own say?

[11:44] <SmokeMachine> I mean this: https://github.com/rakudo/rakudo/blob/dc03425027c42a7458f90f3ff68dd237b5a730b5/src/core.c/Mu.rakumod#L859-L868

[11:44] <lizmat> I'm still not following what you mean *exactly*

[12:00] <SmokeMachine> I mean, why not, instead of this: https://github.com/rakudo/rakudo/blob/dc03425027c42a7458f90f3ff68dd237b5a730b5/src/core.c/Mu.rakumod#L843-L852 don't, we have a role with that that (for example) IO::Handle would "does"()?

[12:01] <SmokeMachine> (but of course I may be misunderstanding everything)

[12:02] <lizmat> and then remove the code that you just highlighted ?

[12:02] <lizmat> pretty sure that would have ecosystem fallout

[12:25] <SmokeMachine> my question was more about the reason that was made that way, not a request for changing...

[12:31] <lizmat> the reason was that if a class would like to provide its own output methods

[12:31] <lizmat> it would only need to provide a .print method

[12:32] <lizmat> and .put and .say would automatically be supported as well, with the expected semantics

[12:33] <lizmat> I'm not sure adding a Cool.print method would make sense to prevent the error that you saw

[12:33] <lizmat> the BootStr in that error is caused by nqp::concat, which is an optimization for infix ~ 

[12:38] <timo> nqp::concat and nqp::join and such "just" return a native str, what it's boxed to when being passed would be a choice of whatever dispatcher it goes through on the call path i think? maybe the dispatcher is hllizing / autoboxing the native string without the right type object from the raku hll, or maybe only the error reporting path doesn't know or something else

[12:48] <SmokeMachine> thanks

[13:32] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/11/11/2024-44-silly-ternaries/

[13:42] <SmokeMachine> Odd... I released ASTQuery yesterday and it is not listed at raku.land...

[13:45] <lizmat> SmokeMachine: the REA harvester didn't see it either, so I guess the upload didn't work ?

[13:46] <SmokeMachine> I didn't see any error (I may have missed...). I'll try to pay more attention on the next release...

[14:21] <SmokeMachine> I think I'm also going to release this module: https://usercontent.irccloud-cdn.com/file/uNyszG8T/image.png

[14:34] <El_Che> SmokeMachine: add mofo before the exclamation marks :)

[14:35] <SmokeMachine> mofo?

[14:36] <El_Che> SmokeMachine: short for mother f*

[14:36] <El_Che> something that people say when they overreact :)

[14:36] <SmokeMachine> :) I like it!

[14:37] <El_Che> you need a switch for profanity :)

[14:38] <SmokeMachine> There is a alias on that that only brazilians will understand... :)

[14:39] <SmokeMachine> because that function can accept an argument... usually $*CU, and that has a very distinctive meaning in portuguese...

[14:41] <discord-raku-bot> <librasteve> SmokeMachine: I usually go zef install My::Module --force-install immediately after a fez upload ... then sense check the the new version made it. Why? Well the fez upload works instantly to the zef repo - then the raku.land indexer will take a while to pick it up - but you know it's on the road.

[14:41] <SmokeMachine> and in brazilian portuguese we say that when someone is overreacting they are with "fogo no <bad word>"...

[14:42] <SmokeMachine> librasteve: thanks for the suggestion! I'll try that next time

[14:50] <discord-raku-bot> <librasteve> yw

[15:18] *** japhb left
[15:55] <tbrowder> howdy. this morning i was thinking about a modules i’m working on and i will need to add test files to check wrappers for system commands—ugh.

[15:58] <tbrowder> imho, we need a version of Raku’s built-in lives/dies test that auto-uses “run” and just tests the error code

[15:59] <tbrowder> without any special setup by the use

[15:59] <tbrowder> *user

[16:00] <tbrowder> unless i get a definite “not feasible” or “no” i will file an issue

[16:05] <[Coke]> Would a module that did that be acceptable?\

[16:05] <[Coke]> That seems like an easy module to implement.

[16:24] *** kjp left
[16:25] *** guifa left
[16:25] *** kjp joined
[16:32] *** tejr left
[16:34] *** tejr joined
[16:47] <lizmat> weekly: https://dev.to/lizmat/a-path-to-paths-21b5

[16:47] <notable6> lizmat, Noted! (weekly)

[16:52] *** orangebot joined
[16:56] <lizmat> tbrowder: t/packages/Test-Helpers/lib/Test/Helpers.rakumod might be a good source of inspirationm

[16:59] *** manu_ joined
[17:01] *** eseyman left
[17:01] *** manu_ is now known as eseyman

[17:07] *** guifa joined
[17:10] *** japhb joined
[17:16] <ab5tract> I don't understand our reticence to expose clearly usable and working implementations that already exist in core with the world

[17:22] <lizmat> ab5tract: fwiw, I don't either

[17:25] <ab5tract> glad I'm not the only one!

[17:31] <discord-raku-bot> <antononcube> @lizmat Is there an easy way to get the individual directory names of paths? I.e. using "IO:Paths" metho .parts that gives a list of the (sub-)directories and basename.

[17:31] <discord-raku-bot> <antononcube> Of course, I can split the directory path string with "/" (or similar) but maybe there is a more direct way.

[17:35] <guifa> ab5tract : the ENTER wouldn't work, because it'd be before the object itself existed.  You could probably move it to BUILD to beat the TWEAK, but then you're back to the problem of what if they override BUILD

[17:39] *** japhb left
[17:39] <guifa> I guess if COMPOSE were to get implemented it could catch that kind of thing

[17:42] <ab5tract> antononcube: what's IO::Path.parts not doing for you?

[17:44] <ab5tract> paths(".").map({ $_ => IO::Path.new($_).parts })

[17:44] <ab5tract> maybe I didn't understand correctly

[17:45] <ab5tract> guifa: ah, yeah makes sense. It would have been cool if it worked symmetrically like that, but at least your approach does the trick!

[17:45] <ab5tract> I wonder  if/what is a good location for this in the docs...

[17:46] *** japhb joined
[17:46] <guifa> I'm actually taking advance of Raku's async and it's really easy

[17:47] <guifa> basically my project ingests an article, and then has several modules that all need to run, some are not processor intensive and can be done simultaneously, others are (because launching multiple LLMs would fry my machine) and need to be loaded one at atime.  Meanwhile, want to give status updates for which ones are awaiting start, in progress, and finished.  And it's really surprisingly few lines of code to get all that logic

[17:48] <ab5tract> that sounds really awesome

[17:51] <discord-raku-bot> <antononcube> @ab5tract I want to get from the directory "/p/h/alf/" the list <p h alf>.  I can do that with string splitting, but I was hoping for some unknown to me option to speedup that.

[17:51] <discord-raku-bot> <antononcube> Or for the package "paths" (by @lizmat) to have some sort of related functionality.

[17:54] <lizmat> .say for paths>>.split("/")

[17:55] <discord-raku-bot> <antononcube> Right, of course.

[18:06] *** leah2 left
[18:10] *** leah2 joined
[18:10] <ab5tract> Isn't that roughly equivalent to: paths(".").map({ $_ => IO::Path.new($_).parts })

[18:11] <ab5tract> without using the original path as the key

[18:12] <lizmat> pretty much, but the paths>>.split("/") bypasses the creation of the IO::Path object completely

[18:12] <ab5tract> right, but in a non-portable manner

[18:13] <ab5tract> anyway, just wanted to make sure I wasn't as confused as I feared I was

[18:18] <lizmat> fwiw, I think on Windows paths are also reported with "/" instead of "\" nowadays

[18:19] <lizmat> sadly I haz no way to test, other than starting some stupid CI job :-)

[18:27] *** japhb left
[18:30] <ugexe> i dont think one can assume they can just split on /

[18:30] <ugexe> to show that in a CI you'd have to already know in which scenarios that is relevant

[18:32] <ugexe> otherwise it is trivial to show examples where it is fine

[18:34] * ab5tract missed the part where antononcube mentioned wanting a speedup, so splitting is probably the best option in that case

[18:35] <ugexe> i'd suggest saving yourself the trouble and using $*SPEC.splitdir("/p/h/alf")

[18:35] <discord-raku-bot> <antononcube> 👍

[18:37] <ugexe> as for an example of when it is relevant: windows long paths don't work with / as they bypass the internal windows api that otherwise does that conversion

[18:39] <ugexe> dont forget that windows paths often contain a volume e.g. C:\ when splutting

[18:40] *** sena_kun joined
[19:14] <discord-raku-bot> <antononcube> @ugexe Right, that is why I was asking for a more bureaucratic way of get the file parts than using split.

[19:17] * lizmat didn't realize that antononcube was of the windows persuasion  :-)

[19:27] *** guifa left
[19:33] *** japhb joined
[19:35] *** Aedil left
[19:36] *** abraxxa-home joined
[19:44] <discord-raku-bot> <antononcube> 🤣

[20:00] <tbrowder> antononcube:  i hear you’re a heavy Raku and Windows user. the chocolatey packager folks could sure use your talents!

[20:04] <discord-raku-bot> <antononcube> @tbrowder My talents a graphed for now...

[20:06] <discord-raku-bot> <antononcube> Or sparsed...

[20:30] *** guifa joined
[20:33] *** Guest64 joined
[21:11] *** zetaaaa joined
[21:16] *** Guest64 left
[22:01] *** Geth left
[22:06] *** orangebot left
[22:53] <tbrowder> lizmat: ref “inspiration” did you mean for a PR for core Raku or my own tests?

[22:54] *** abraxxa-home left
[22:57] *** Geth joined
[22:59] <lizmat> your own tests

[23:10] <tbrowder> ok

[23:11] <tbrowder> no interest in possible raku core use?

[23:13] *** sena_kun left
[23:44] *** yewscion joined
[23:54] *** yewscion left
[23:57] *** Sgeo joined
