[00:18] *** jpn joined
[00:23] *** jpn left
[01:11] <ab5tract> Graceful degradation is the idea that you don‚Äôt try to do something you are incapable of. Ie, colors should be gracefully ignored by readers that can‚Äôt handle them, rather than doing something ugly instead

[01:12] <ab5tract> It shouldn‚Äôt be the responsibility of the content to provide a worst-common-denominator experience

[01:13] <ab5tract> But as I said, I‚Äôm hardly surprised that it would be expected to

[01:22] <teatime> in particular in digital design, one can choose between two strategies, graceful degredation or progressive enhancement.  or mix the two sometimes.

[01:32] *** jpn joined
[01:37] *** jpn left
[01:37] *** guifa_ joined
[01:40] *** jpn joined
[01:44] *** jpn left
[02:00] *** hulk joined
[02:00] *** kylese left
[02:05] <coleman> I think I agree re: syntax highlighting in the ebook.

[02:05] <coleman> it might look bad on e-ink, too

[02:15] *** hulk left
[02:15] *** kylese joined
[02:28] *** jpn joined
[02:32] *** jpn left
[02:42] *** guifa_ left
[03:09] <teatime> dang I did the wrong window thing again, I've thought this was xkcd channel all day.  sigh.

[03:35] *** jpn joined
[03:37] *** stanrifkin joined
[03:39] *** stanrifkin_ left
[03:40] *** jpn left
[04:29] *** kst joined
[04:29] *** jpn joined
[04:34] *** jpn left
[04:36] *** eseyman left
[04:50] *** manu_ joined
[04:50] *** manu_ is now known as eseyman

[05:20] *** bdju left
[05:22] *** bdju joined
[05:33] *** bdju left
[05:33] *** bdju joined
[05:37] *** jpn joined
[05:42] *** jpn left
[06:25] *** jpn joined
[06:35] *** jpn left
[06:50] *** Manifest0 joined
[07:13] *** jpn joined
[07:32] *** jpn left
[07:37] *** jpn joined
[07:44] *** jpn left
[07:47] *** Sgeo left
[08:10] *** dakkar joined
[08:24] *** sena_kun joined
[09:27] *** jpn joined
[09:32] *** jpn left
[09:39] *** jpn joined
[10:13] *** teatime left
[10:14] *** teatime joined
[10:37] *** jpn left
[10:40] *** jpn joined
[10:43] *** guifa_ joined
[11:13] *** jpn left
[11:58] *** guifa_ left
[12:46] *** jpn joined
[12:51] *** jpn left
[13:25] *** abraxxa-home joined
[13:27] *** abraxxa-home left
[13:28] *** abraxxa-home joined
[13:33] <[Coke]> can someone grab all the feedback we see here and throw it in a gist somewhere, we can pull actionable tickets out of it

[13:33] <[Coke]> (I would prefer that over a single ticket with all feedback that we can never closer)

[13:34] <discord-raku-bot> <antononcube> @Coke I do have an ingester and parser of IRC channel messages -- I was planning to do some data science related article / presentation about them.

[13:35] <discord-raku-bot> <antononcube> @Coke I assume, it can be used for extracting particular feedback...

[13:46] <[Coke]> Sounds nifty if it works!

[13:54] <discord-raku-bot> <antononcube> @Coke Is this some sorf of micro-aggressive statement try to challenge me do it sooner that I want to?

[13:55] <discord-raku-bot> <antononcube> (Mmm... I just came back from reading the rules of Google's Gemini Discord server...)

[13:57] <discord-raku-bot> <librasteve>  for qqx|ip -6 addr show scope global|.lines {     say ~$0 if  / 'inet6 ' (<[0..9a..z:]>*) /  } 

[13:57] <evalable6> librasteve, rakudo-moar 335a0b0ce: OUTPUT: ¬´/bin/sh: 1: ip: not found‚ê§¬ª

[13:58] <discord-raku-bot> <librasteve> ^^ didn't mean to run, but to share for any *nix users who are wondering what their ipv6 addresses are

[14:03] <[Coke]> It was not intentionally aggressive, apologies.

[14:06] <discord-raku-bot> <antononcube> üôÇ It is fine!

[14:49] *** vrurg_ joined
[14:51] *** vrurg left
[15:05] *** jpn joined
[15:29] *** jpn left
[15:40] *** jpn joined
[15:42] <discord-raku-bot> <librasteve> o/

[15:42] <discord-raku-bot> <librasteve> wonders if a raku -e can be the receiver in a piped *nix command, something like:

[15:43] <discord-raku-bot> <librasteve> ip -6 addr show scope global | raku -e '.say'

[15:45] <dakkar> librasteve: raku -e '.say for $*IN.lines'

[15:46] <discord-raku-bot> <librasteve> üç¨

[15:47] <discord-raku-bot> <librasteve> ip -6 addr show scope global | raku -e 'say ~$0 if  /inet6 <ws> (<[0..9a..z:]>*)/ for $*IN.lines;'

[15:47] <discord-raku-bot> <librasteve> .oO

[15:48] <Voldenet> absolutely, I use it often

[15:48] <dakkar> if you want something closer to perl5's `-nl`, look at https://docs.raku.org/type/IO/CatHandle

[15:50] <Voldenet> > ls | raku -npe 's:g/<[uU]>/w/'

[15:50] <Voldenet> example

[15:51] <Voldenet> though the usefulness of n and p is limited

[15:51] <Voldenet> > ls | raku -e '.say for lines.map({S:g/<[uU]>/w/})'

[15:51] <Voldenet> this is a lot more useful

[15:52] <Voldenet> no need to say $*IN

[15:53] <dakkar> dammit, I had looked at the output of `raku -h` to see if `-n` or `-p` were there, and failed to see them!

[15:53] <dakkar> thank you for the correction

[15:54] <dakkar> (`-np` should be equivalent to `-p`)

[15:55] <Voldenet> ofc, that makes sense

[15:55] <Voldenet> still I prefer the form `raku -e 'for lines { .say }'`

[15:57] <Voldenet> since it lets you reuse the code and makes state management easier

[15:57] <Voldenet> `raku -e 'for qx/ls/.lines { .say }'`

[15:59] <discord-raku-bot> <librasteve> timtowdi!  I like ip -6 addr show scope global | raku -e 'say ~$0 if /inet6 <ws> (<[0..9a..z:]>*)/ for lines;'

[16:03] *** jpn left
[16:07] <discord-raku-bot> <librasteve> tx for all the guidance

[16:30] *** dakkar left
[16:34] *** Sgeo joined
[18:18] *** Geth left
[18:18] *** Geth joined
[18:23] *** jpn joined
[19:16] *** jpn left
[19:25] *** Sgeo left
[19:25] *** Sgeo_ joined
[20:25] *** abraxxa-home left
[21:13] *** guifa_ joined
[22:49] *** dustinm` left
[23:00] *** dustinm` joined
[23:24] *** sena_kun left
[23:55] *** Xliff_ joined
[23:55] <Xliff_> \o

[23:55] <Xliff_> This used to work...

[23:56] <Xliff_> m: my $a = "(b)"; my $b = $a.encode; $b.^name.say; use NativeCall; my $ca = CArray[uint8].new($b)

[23:56] <camelia> rakudo-moar dc172ab5e: OUTPUT: ¬´utf8‚ê§This representation (VMArray) does not support attribute storage (for type utf8)‚ê§  in method new at /home/camelia/rakudo-m-inst-1/share/perl6/core/sources/8A1789A97523B057340ADD4E705DFDA1F6CD45A7 (NativeCall::Types) line 410‚ê§  in block <uni‚Ä¶¬ª

[23:56] *** guifa_ left
[23:56] <Xliff_> This is done -all throughout- my code, over several projects where I can offer a variety of ways to convert Str to something usable by C

[23:57] <Xliff_> This is a HUGE deal. Someone please respond.

