[00:03] <discord-raku-bot> <antononcube> @ugexe Do you a think C-version of the subs in “Text::Levenshtein::Damerau” should be placed in that package, or it should be a new one? (“Text::Levenshtein::Damerau::C” or whatever._

[00:08] *** swaggboi left
[00:09] *** swaggboi joined
[01:06] *** skyesoss joined
[01:08] *** wayland left
[01:08] *** wayland76 joined
[01:14] *** bdju left
[01:34] *** [Coke] left
[01:48] *** bdju joined
[01:52] *** kylese joined
[01:52] *** skyesoss1 joined
[01:53] *** hulk left
[01:54] *** skyesoss left
[01:54] *** skyesoss1 is now known as skyesoss

[01:56] *** [Coke] joined
[02:01] *** PipStuart joined
[02:15] *** kylese left
[02:15] *** kylese joined
[02:59] *** Aedil joined
[02:59] *** wayland76 left
[03:02] *** wayland76 joined
[05:08] *** skyesoss1 joined
[05:11] *** skyesoss left
[05:11] *** skyesoss1 is now known as skyesoss

[05:32] *** skyesoss left
[05:38] *** skyesoss joined
[05:49] <pony> m: my $a = gather take $++ while 1; say $a[0];

[05:49] <camelia> rakudo-moar 87065a329: OUTPUT: «0␤»

[08:31] *** sena_kun joined
[09:01] <ab5tract> My frustrations last night are clearly related to the one argument rule.

[09:01] <ab5tract> But I do find it hard to justify this:

[09:01] <ab5tract> m: [ %( :a<b>, :c<d>, :d<e> ) ].elems.say

[09:01] <camelia> rakudo-moar 87065a329: OUTPUT: «3␤»

[09:01] <ab5tract> Surely if I wanted a list of pairs, I would t have put it into a hash?

[09:02] <ab5tract> m: [ $%( :a<b>, :c<d>, :d<e> ) ].elems.say

[09:02] <camelia> rakudo-moar 87065a329: OUTPUT: «1␤»

[09:04] <ab5tract> I guess it just is what it is, though.

[09:36] <lizmat> you have no idea how that has been a difficult decision: it's the waterbed all over

[09:36] <lizmat> at least it's consistent now

[10:08] *** Sgeo left
[10:17] <lizmat> m: Array.new( %(:a<b>, :c<d>, :d<e>) ).elems.say   # does that meet expectations ?

[10:17] <camelia> rakudo-moar 87065a329: OUTPUT: «3␤»

[10:18] <lizmat> m: .say for %(:a<b>, :c<d>, :d<e>)   # or this?

[10:18] <camelia> rakudo-moar 87065a329: OUTPUT: «d => e␤c => d␤a => b␤»

[10:18] <lizmat> m: .say for :a<b>, :c<d>, :d<e>   # or this?

[10:18] <camelia> rakudo-moar 87065a329: OUTPUT: «a => b␤c => d␤d => e␤»

[10:19] <lizmat> they're all example of the 1 argument role

[10:19] <lizmat> and that comma is the list builder, not parens

[10:21] <ab5tract> Ah, the Array.new approach does indeed match expectations

[10:22] <lizmat> well, that's what [ ] does under the hood

[10:24] <lizmat> https://github.com/rakudo/rakudo/blob/87065a329d79809a8ec6579acc51c8836f22058a/src/core.c/array_operators.rakumod#L7-L16 

[10:24] <ab5tract> m: [ %( :a<b>, :c<d>, :d<e> ) ]  ~~ Array.new( %( :a<b>, :c<d>, :d<e> ) ) ==> say()

[10:24] <camelia> rakudo-moar 87065a329: OUTPUT: «True␤»

[10:25] <ab5tract> I misread the output. I understand and appreciate that this was difficult to nail down

[10:27] <lizmat> before the GLR it was a mess that was even harder to understand / teach 

[10:30] *** thaewrapt left
[10:36] <ab5tract> Fair point. I guess for my taste hashes shouldn’t be auto-flattened in any case (that’s why |%h and %h.pairs are for). But the ship has sailed and in the light of day I see the source of and reasoning for what I was butting heads against yesterday

[10:55] <lizmat> well... fwiw, one of the reasons (and I repeat: one of them) was to meet Perl user expectations

[10:59] <lizmat> ab5tract: also, if you want to change semantics of { } lexically, you could do:

[10:59] <lizmat> m: sub circumfix:<{ }>(|c) { item %(|c) }; dd { foo => "bar" }

[10:59] <camelia> rakudo-moar 87065a329: OUTPUT: «${:foo("bar")}␤»

[11:00] <lizmat> versus:

[11:00] <lizmat> m: dd { foo => "bar" }

[11:00] <camelia> rakudo-moar 87065a329: OUTPUT: «{:foo("bar")}␤»

[11:01] <lizmat> m: sub circumfix:<{ }>(|c) { item %(|c) }; [ { :a<b>, :c<d>, :d<e>} ].elems.say

[11:01] <camelia> rakudo-moar 87065a329: OUTPUT: «Odd number of elements found where hash initializer expected:␤Only saw: $(:a("b"), :c("d"), :d("e"))␤  in sub circumfix:<{ }> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:01] <lizmat> meh  :-)

[11:02] <lizmat> anyways, you get the picture...

[11:08] <ab5tract> :)

[11:14] <ab5tract> Since one of my goals is to ease potential readers of the code into Raku as gently as possible, the best option may in fact be to just add a second hash to this test case :)

[11:20] *** abraxxa-home joined
[11:39] *** abraxxa-home left
[12:18] <discord-raku-bot> <antononcube> @ab5stract "My frustrations last night are clearly related to the one argument rule." -- It was late for me also, when I read your code about this and I planned to try investigate myself. But well you figured it out -- and it is "good to know."

[12:42] <tbrowder> any mac users have the binary fontconfig dev library working?

[12:43] * lizmat not

[12:43] <discord-raku-bot> <antononcube> LOL

[14:11] *** skyesoss left
[14:42] *** thaewrapt joined
[15:00] *** wayland joined
[15:00] *** wayland76 left
[15:46] <discord-raku-bot> <antononcube> Does anyone know / recommend a GitHub repository with a complete and minimal example of using NativeCall ?

[15:53] <lizmat> https://github.com/lizmat/P5localtime/blob/main/lib/P5localtime.rakumod   # as minimal as it gets

[15:57] <discord-raku-bot> <antononcube> @lizmat Yes, looks minimal. Thanks!

[15:58] <lizmat> no external library needed even :-)

[16:06] <discord-raku-bot> <antononcube> That is too minimal for me, but still instructive.

[16:34] *** skyesoss joined
[16:41] <lizmat> antononcube whar's too minimal about it ?

[16:41] <lizmat> *what

[16:41] <lizmat> no external library?

[16:42] <lizmat> https://raku.land/zef:lizmat/Unix::errno   simple external library

[16:43] *** japhb_ joined
[16:43] <lizmat> https://github.com/lizmat/Unix-errno/blob/115d6cc71f71c3134db674b8ed2d2e5a4e0bea0e/lib/Unix/errno.rakumod#L136-L172

[16:44] *** Some-body_ joined
[16:44] *** jrjsmrtn joined
[16:45] *** human_blip joined
[16:46] *** Ekho- joined
[16:47] *** itaipu left
[16:47] *** human-blip left
[16:47] *** jrjsmrtn_ left
[16:47] *** rjbs left
[16:47] *** ky left
[16:47] *** Ekho left
[16:47] *** DarthGandalf left
[16:47] *** BooK left
[16:47] *** japhb left
[16:47] *** ingy left
[16:47] *** timo left
[16:47] *** Some-body_ is now known as DarthGandalf

[16:48] *** rjbs joined
[16:48] *** ky joined
[16:48] *** BooK joined
[16:48] *** timo joined
[16:49] *** itaipu joined
[16:57] *** ingy joined
[17:19] <discord-raku-bot> <antononcube> @lizmat It seems I needed a more comprehensive example in order to make some faster string distance computations.

[17:20] <discord-raku-bot> <antononcube> https://github.com/antononcube/Raku-Math-DistanceFunctions-Edit

[17:26] <ugexe> not sure using `const char *s1` is ideal for an edit distance - what about wide characters?

[17:27] <ugexe> https://github.com/ugexe/Text--Levenshtein--Damerau--XS/blob/73bdf51ba0c683c02db8c3c3a7798f793f9d1d83/damerau-int.c#L69

[17:27] <ugexe> when i did a C library I still used perl to convert things to ords and compared those

[17:28] <discord-raku-bot> <antononcube> @ugexe Unfortunately, when I read your package documentation 4-5 years ago I was too ignorant about Raku, and missed that dld  has a 3rd argument.

[17:29] <discord-raku-bot> <antononcube> Meaning, did not understand how to use the output.

[17:30] <discord-raku-bot> <antononcube> My C-implementation is mostly for orientation how much faster it is. (If at all.)

[17:31] <ugexe> There is also StrDistance core raku class written in nqp (but only levenstein not damerau)

[17:31] <discord-raku-bot> <antononcube> Right, I tried that too.

[17:32] <discord-raku-bot> <antononcube> See here: https://github.com/antononcube/Raku-Math-DistanceFunctions-Edit/blob/main/examples/faster-word-distances.raku

[18:01] *** Sgeo joined
[19:45] *** Aedil left
[19:54] *** thaewrapt left
[20:39] <tbrowder> ugexe: in a module i'm working on (unpublished) i test it by installing it locally with "zef install . --debug"

[20:41] <tbrowder> when i do that, i get  ' perl5' directory generated in the module rep and it has a subdir of ' perl5/short'

[20:42] <tbrowder> i am using a Build.rakumod module in the process.

[20:47] <tbrowder> i have searched all the module's code and don't see any reference to such. any debugging suggestions?

[20:48] <tbrowder> note the ' perl5' and its subdir are empty

[20:49] <tbrowder> there are quite a few dependencies and they are already installed

[20:51] <tbrowder> ok i see some more zef options to try...

[21:22] <tbrowder> it appears in both of the repos where i use Build and do a zef install .

[21:28] *** sena_kun left
[21:33] <tbrowder> i can't pin it down, but no harm as far as i can tell...fingers crossed

[22:04] <[Coke]> where's your source?

[22:05] <discord-raku-bot> <antononcube> Cannot push to GitHub. 😦

[22:05] <discord-raku-bot> <antononcube> It looks like it is a global problem...

[23:07] *** teatime left
[23:08] *** teatime joined
[23:22] *** wayland left
