[01:30] *** nine left
[01:30] *** nine joined
[01:56] *** hulk joined
[01:58] *** kylese left
[02:08] *** m6locks left
[02:08] *** m6locks joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:38] *** tjr left
[03:28] *** simona24 left
[03:48] *** Aedil joined
[05:03] *** [Coke] left
[05:06] *** [Coke] joined
[05:30] *** Sgeo left
[06:25] <japhb> Awww timo, thank you!

[06:25] <japhb> Hi patrickb!

[07:46] *** sena_kun joined
[08:15] *** dakkar joined
[08:42] *** euandreh left
[08:44] *** euandreh joined
[08:52] *** kst left
[08:52] *** kst joined
[09:46] *** tjr joined
[14:35] *** jjido joined
[14:42] *** jjido left
[15:00] <tonyo> wjem we

[15:01] <tonyo> when we're writing pod6, is `=begin pod` necessary to distinguish between pod and 6 or is just getting into the pod itself in a rakumod file fine enough?

[15:06] <lizmat> lines that start with =foo will always be rakudoc, is that an answer ?

[15:40] <ugexe> Why does https://docs.raku.org/language/pod read "Every Pod6 document has to begin with =begin pod and end with =end pod. " then?

[15:41] <ugexe> i presumed this is because it distinguished POD from rakudoc

[15:41] <[Coke]> rakudoc (the new stuff) isn't in raku/doc yet.

[15:42] <[Coke]> I think that was waiting for the rakudoc-gamma work to be complete.

[15:42] <ugexe> let me rephrase then: is that be design or by coincidence

[15:44] <[Coke]> is what by design?

[15:44] <[Coke]> the docs?

[15:45] <ugexe> not requiring a begin/end ala =begin pod

[15:50] <ugexe> if it is be design then i could remove the e.g. =begin pod in my code

[15:51] <lizmat> fwiw, there is talk about the .rakudoc extension forcing an implicit =begin rakudoc  /  =end rakudoc around the contents of the file, to ensure no code can run

[15:52] <ugexe> makes sense. all my rakudoc is inline though

[16:06] *** dutchie left
[16:06] <lucs> I really don't like the idea in general of forcing a behaviour based on the name or extension of a file.

[16:06] *** dutchie joined
[16:34] *** dakkar left
[16:45] <tonyo> [Coke]: is the rakudoc grammar somewhere i can look at?

[16:45] <tonyo> assuming that's what rakudoc-gamma means

[16:50] <lizmat> src/Raku/Grammar.nqp

[16:56] <tonyo> dank

[17:01] <jdv> dank ipa by sierra nevada is not bad

[17:01] <jdv> mine wife appreciates it

[17:13] *** jjido joined
[17:26] *** jjido left
[17:33] <Xliff> m: say "Boo!" if DateTime.new(0)

[17:33] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: «Boo!␤»

[17:33] <Xliff> Hmmm... that looks like a thinko.

[17:33] <Xliff> I would suspect DateTime.new(0) would be falsey.

[17:34] <Xliff> Would this break things?

[17:35] <tonyo> why would that be falsey?

[17:36] <tonyo> it's jan 1, 1970

[17:37] <tonyo> m: say DateTime.new(0).yyyy-mm-dd;

[17:37] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: «1970-01-01␤»

[17:50] *** Aedil left
[18:16] <patrickb> https://github.com/Raku/RakuDoc-GAMMA/issues/48#issuecomment-2351867123

[18:17] <patrickb> tony-o: That's the issue about having rakudoc be pure RakuDoc.

[19:23] *** sena_kun left
[19:25] *** jjido joined
[19:39] <tonyo> ty

[20:40] <tonyo> are the rakudocs meant to be side by side the rakumods or in a `doc/` folder?

[20:58] <[Coke]> anyone have a good primer on dealing with saving datetimes with an arbitrary "author" timezone and then rendering correctly in an arbitrary "viewer" timezone that doesn't run afoul of DST issues for future events across the change point? I think the key has to be using the "generic" timezones on both ends and hoping your datetime library is smart.

[20:59] <[Coke]> tonyo: I don't think anything cares about that right now.

[20:59] <[Coke]> when we do start caring about it, raku/rakudoc will be much more useful.

[20:59] <[Coke]> (where a generic timezone is "ET" instead of being explicit about EDT/EST)

[21:00] <tonyo> every time i've needed to worry about TZ at work, i store it in UTC and convert to the user's TZ at render time

[21:05] <[Coke]> right - but if I am in EST now, and store an event that would occur in EDT in the future, my offset is probably off by on the UTC, yes?

[21:06] <[Coke]> (time zones suck)

[21:07] <tonyo> it depends on the future, if you are EST now and convert to UTC it'll be an offset of zero (1900 -> 2400). when you convert back to EDT it'll be 2000, which is what you'd expect if you went from EST to EDT 

[21:09] <tonyo> or are you meaning you'd want to handle it more generically, treating the offset in more of a America/New_York way where the offset is: `-4 - light saving status ? 1 : 0;`

[21:09] <tonyo> so it always comes back as 1900

[21:09] <[Coke]> if my offset is 5 now, and I save it for a date that is in EDT, the -5 doesn't know that it should be -4 then.

[21:10] <tonyo> store it as offset zero

[21:10] <tonyo> and convert back to _whatever the offset of the user is when needed_

[21:10] <[Coke]> ... I still have to *do the conversion* when I save it.

[21:11] <tonyo> it sounds like you want it to come back as 1900 regardless of the day light savings status ?

[21:11] <[Coke]> and that conversion is off by one at that point. let me write up a specific example with numbrs.

[21:11] <tonyo> (as long as you're in ET)

[21:11] <[Coke]> I want it to be *correct*. :)

[21:11] <[Coke]> let me write a specific example. Maybe I'm overthinking it.

[21:11] <tonyo> it is correct if it comes back as 1900 EST and 2000 EDT

[21:12] <tonyo> but seems wrong, i think is part of the problem

[21:14] *** jjido left
[21:17] <[Coke]> https://gist.github.com/coke/773740d69fbbe4bb38f3efaba6168ad5

[21:17] <[Coke]> Why should it change?

[21:17] <[Coke]> I am trying to record a specific time in the future.

[21:17] <[Coke]> oh, I see.

[21:17] <[Coke]> *(what you're saying)

[21:18] <[Coke]> but then you're using two different timezones for one event, that only has one time zone

[21:18] <[Coke]> it doesn't make sense to a human to say "show me this event that occurs during DST as if it were in Standard time"

[21:19] <tonyo> if you want it to restore to the *same* time when doing the conversion you need to convert to UTC and add the DST offset of the timezone

[21:19] <[Coke]> I don't want it to be the same for EST and EDT

[21:20] <tonyo> so if you're in EDT (offset of 1 hour) and you want to store a date in EST you'd convert 1900 -> UTC (0000, DST offset: 0100).  then in converting to EDT to EST you'd convert to local timezone + the difference in DST offset (0000 UTC -> EDT -> 2000 - (0000 - 0100) -> 1900)

[21:21] <tonyo> since some TZs have 15 minute or whatever offsets you need to keep track of what it was when the date was created but still store the date in UTC

[21:21] <[Coke]> Right, so you either need to manually track when DS/Non boundaries occur to do that, or: use the "generic" timezone and hope your library is smart.

[21:22] <tonyo> you only need to convert to UTC and keep track of the DST offset of the user's current TZ

[21:22] <tonyo> if you write up a gist of what the input -> output is expected i can help you go through it

[21:23] <[Coke]> worse: the legacy system I'm looking at just has "Eastern Standard Time" - whoever setup the original list of timezones this thing is using didn't use the generic ones, or DST.

[21:23] <tonyo> yikes

[21:24] <tonyo> if it's any consolation the company i work for now uses a broadcast calendar that is off by a week every quarter for a very similar reason.  it trips up almost everyone

[21:24] <tonyo> err DST trips up almost everyone

[21:25] <[Coke]> our company has a lot of staff in India, so I also get the fun "half the meetings I'm on shift by 30m" whenever we cross a boundary here in the US.

[21:25] <[Coke]> depends on who setup the call, US or India. 

[21:31] <[Coke]> hah. trying to setup my data, I use https://dateful.com/convert/utc - when I try to force it to do something stupid (which I think is the default code path that my project is heading towards), it says "Did you mean EST (Eastern Standard Time)?

[21:31] <[Coke]> The Eastern United States currently observes EST, not EDT.

[21:31] <[Coke]> "

[21:31] <[Coke]> (for the date in the future that I was trying to use EDT for. :)

[21:32] <tbrowder> once

[21:36] <tbrowder> :

[21:38] <tbrowder> check out my modue DateTime::US for use with Raku apps

[21:51] <tonyo> [Coke]: i think the difficulty in handling that (in either way i've put up above) is that some people think one is the correct way and others think the other is the correct way.  neither are correct from a math or usability perspective

[22:00] *** Sgeo joined
[22:13] *** itaipu left
[22:27] *** itaipu joined
[22:28] <tonyo> [Coke]: this thread has some good info in it about how to handle what you're wanting https://www.reddit.com/r/csharp/comments/tqxtp1/comment/i2jyjju/

[22:38] <[Coke]> tonyo: thanks

[23:40] *** euandreh left
[23:42] *** euandreh joined
