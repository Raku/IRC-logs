[01:15] *** kaskal left
[01:29] *** nine left
[01:30] *** nine joined
[01:39] *** kylese left
[01:39] *** kylese joined
[02:15] *** kylese left
[02:15] *** kylese joined
[04:56] *** nine left
[04:56] *** camelia left
[05:04] *** jpn joined
[05:30] *** Sgeo left
[05:33] *** nine joined
[05:42] <discord-raku-bot> <librasteve> m: my %foo := Stash.new; say %foo.^name

[05:42] <evalable6> librasteve, rakudo-moar 4a66ddd6c: OUTPUT: «Stash␤»

[05:42] <discord-raku-bot> <Raku eval>  Stash 

[05:48] <discord-raku-bot> <librasteve> ^^ this is just a guess, but I think you are probably looking for the response Associative to match the % sigil - knowing raku there's probably a way to introspect the name %foo in the actual Stash or Lexpad or whatever

[05:53] *** camelia joined
[07:11] *** jpn left
[07:55] *** jpn joined
[08:01] *** sena_kun joined
[08:03] *** dakkar joined
[08:18] *** sena_kun left
[08:26] *** beanbrain left
[08:27] *** thaewrapt joined
[09:06] *** fluca1978 joined
[09:06] <fluca1978> what does the "Q" in "QAST" stands for? <https://github.com/Raku/nqp/blob/master/docs/qast.markdown>

[09:06] <tellable6> 2020-02-08T12:13:00Z #moarvm <rba> fluca1978: pl6anet.org feeds are configured in https://github.com/perl6/pl6anet.org/blob/master/perlanetrc , so commit or PR

[09:11] <discord-raku-bot> <nahita3882> "Quisquous", says https://blogs.perl.org/users/damian_conway/2019/09/itchscratch.html

[09:12] <discord-raku-bot> <nahita3882> then says "Okay, that’s a joke. The ‘Q’ doesn’t actually stand for anything. The previous representation was called “PAST” and we just incremented the first letter. Though we probably should define a proper backronym for that ‘Q’: “Quasi” or “Quotidien” or “Quesited” or “Quicquidlibet” or “Quaquaversal” or “Quantulum” or “Qonvenient”"

[10:08] *** jpn left
[10:13] *** jpn joined
[11:36] *** jaguart left
[12:03] *** jpn left
[12:30] *** jpn joined
[12:35] *** jpn left
[12:38] <tbrowder> very cool. i forget about those Inline modules!

[12:44] *** [Coke] left
[12:56] *** jpn joined
[13:11] *** [Coke] joined
[13:21] *** xinming left
[14:18] *** soverysour joined
[14:18] *** soverysour left
[14:18] *** soverysour joined
[14:28] *** soverysour left
[14:28] <discord-raku-bot> <antononcube> @guifa Well, "Data::TypeSystem" recognizes Stash as an Assoc(iative), but it might give warning messages.

[15:27] <tbrowder> [Coke]: dwarring uses LibraryMake in some of his PDF packages for Windows. also i

[15:30] <tbrowder> *disregard

[15:31] <tbrowder> *disregard “also i”

[15:36] <tbrowder> i see cautions about use of $*CWD in the docs. is there a problem with doing this:

[15:37] *** soverysour joined
[15:37] *** soverysour left
[15:37] *** soverysour joined
[15:38] <tbrowder> m: my $d = $*CWD; chdir $d; # do some more stuff

[15:38] <camelia> rakudo-moar 4a66ddd6c: ( no output )

[15:40] *** beanbrain joined
[15:51] *** soverysour left
[15:51] *** jpn left
[15:56] *** soverysour joined
[16:01] *** soverysour left
[16:01] *** soverysour joined
[16:06] *** soverysour left
[16:19] *** soverysour joined
[16:37] *** dakkar left
[17:34] *** jpn joined
[17:41] *** cm left
[17:42] *** cm joined
[17:46] *** wlhn left
[17:49] *** sena_kun joined
[17:57] *** jpn left
[18:11] *** jpn joined
[18:11] <patrickb> [Coke]: There is also https://raku.land/zef:patrickb/BuildToolchainRepo

[18:23] *** beanbrain left
[18:37] <[Coke]> patrickb: I'm trying to see if anyone has any idea on https://github.com/krunen/term-termios/issues/22

[18:38] <[Coke]> (not sure termios is even using LibraryMake anymore, though)

[18:38] <[Coke]> tbrowder: I think you're fine, the concern in the docs is about *assigning* to it.

[19:27] *** jpn left
[19:34] *** jpn joined
[19:44] *** jpn left
[19:52] *** jpn joined
[19:57] <tbrowder> thnx, Coke; ref LibraryMake: ugexe can probabaly address betterm but I think adding the file  name to /resources and META6.json might do the trick

[20:09] *** jpn left
[20:26] <ugexe> [Coke]: it is fixed, but Terminal::LineEditor is pinned to an older version

[20:26] <ugexe> has it pinned^

[20:27] <ugexe> additionally, I think it is pinned to that older version because the newer version breaks something for Terminal::LineEditor

[20:29] <ugexe> it was fixed in https://github.com/krunen/term-termios/commit/67af4093a18ec8d7c2001ffc3ba343894849e07d

[20:37] *** soverysour left
[20:40] *** guifa joined
[20:41] *** xinming joined
[20:45] <guifa> is there an adverb for hash slices that returns a new hash?

[20:47] <guifa> m: my %foo = <a 1 b 2 c 3 d 4>;  say (%foo<a b>:p).WHAT

[20:47] <camelia> rakudo-moar 9ca6046e2: OUTPUT: «(List)␤»

[20:48] <guifa> m: my %foo = <a 1 b 2 c 3 d 4>;  say (%%foo<a b>:p).WHAT; # contextualizer is too tight here

[20:48] <camelia> rakudo-moar 9ca6046e2: OUTPUT: «(List)␤»

[20:48] <guifa> m: my %foo = <a 1 b 2 c 3 d 4>;  say (%(%foo<a b>:p)).WHAT; # feels too much

[20:48] <camelia> rakudo-moar 9ca6046e2: OUTPUT: «(Hash)␤»

[20:53] <discord-raku-bot> <librasteve> m: my %foo = <a 1 b 2 c 3 d 4>;  say %(%foo<a b>)

[20:53] <evalable6> librasteve, rakudo-moar 9ca6046e2: OUTPUT: «{1 => 2}␤»

[20:53] <discord-raku-bot> <Raku eval>  {1 => 2} 

[20:56] <discord-raku-bot> <librasteve> ^^ this feels too much too

[20:56] <discord-raku-bot> <librasteve> or

[20:57] <discord-raku-bot> <librasteve> my %foo = <a 1 b 2 c 3 d 4>;  say %foo<a b>.hash

[20:57] <evalable6> librasteve, rakudo-moar 9ca6046e2: OUTPUT: «{1 => 2}␤»

[20:58] <discord-raku-bot> <librasteve> oh - that's wrong - soz

[20:59] <guifa> just add :p and the .hash works

[20:59] <guifa> I wonder if we should have a :h option instead. in perl

[21:00] <guifa> $foo{a} gives 1, @foo{a,b} gives a list of 1,2, and %foo{a,b} gives a hash of a=>1, b=>2

[21:00] <guifa> only just realized this now as I'm writing my talk

[21:01] <discord-raku-bot> <librasteve> I thin you mean %foo{a,b}:h

[21:02] <discord-raku-bot> <librasteve> I guess this degradation to List/Seq is a consequence of a language that is list-functional at its heart

[21:03] <guifa> Well, there are times where getting the pairs as a list is useful

[21:03] <guifa> we can also do :k for keys as a list, :kv for keyvalues as a list, :p for pairs as a list

[21:05] <discord-raku-bot> <librasteve> I guess slice is something like %hash<@list> => @list (of values)  and @array<@list> => @list  (of elements) - kinda makes sense

[21:06] <guifa> Yeah

[21:07] <guifa> But then you get

[21:07] <guifa> ArraySlice --> Array

[21:07] <guifa> HashSlice --> NotHash

[21:07] <guifa> it does make since because we normally want just the value, so it's an appropriate default

[21:09] <discord-raku-bot> <librasteve> ++ on the :h adverb ... suggest a https://github.com/Raku/problem-solving/issues

[21:15] *** beanbrain joined
[22:05] *** sena_kun left
[22:10] *** guifa left
[22:15] *** Sgeo joined
[22:29] *** guifa joined
[22:29] *** guifa left
[22:41] *** thaewrapt left
[23:16] *** beanbrain left
[23:20] *** beanbrain joined
[23:49] *** lizmat_ joined
[23:52] *** lizmat left
