[00:15] *** swaggboi left
[00:17] *** swaggboi joined
[00:22] *** lichtkind left
[01:08] *** dg joined
[01:27] *** kylese left
[01:27] *** kylese joined
[02:15] *** kylese left
[02:15] *** kylese joined
[03:27] <Voldenet> librasteve: maybe exclude line numbers in the end of the article, because it's a bit tough to copy the code from it :P

[04:02] *** guifa left
[04:30] *** kylese left
[04:34] *** kylese joined
[05:03] *** abraxxa-home joined
[05:30] *** kylese left
[05:32] *** kylese joined
[05:42] *** stanrifkin joined
[06:04] *** merp left
[06:20] *** abraxxa-home left
[06:21] *** abraxxa-home joined
[06:27] *** abraxxa-home left
[06:28] *** abraxxa-home joined
[06:28] *** abraxxa-home left
[06:32] *** Sgeo left
[07:17] <discord-raku-bot> <librasteve> voldemort: good advice .. tx! … should be ok now

[07:21] <lizmat> that is a weird autocomplete librasteve  :-)

[07:54] *** melezhik joined
[07:55] *** melezhik left
[08:10] <Voldenet> it makes me feel more powerful, so I appreciate the typo :>

[08:11] *** sena_kun joined
[08:30] *** Aedil joined
[08:32] *** lichtkind joined
[08:41] *** Aedil left
[08:44] *** Aedil joined
[09:05] *** bdju left
[09:05] *** jpn joined
[09:07] *** bdju joined
[09:07] *** sena_kun left
[09:54] <timo> unfortunately you don't have a nose any more :(

[09:54] <discord-raku-bot> <librasteve> i blame it on my small checker

[10:44] *** mirHalel joined
[10:47] *** mirHalel left
[10:55] *** guifa joined
[11:05] <Voldenet> oh no : (

[11:05] <Voldenet> now I get why the code smell stopped bothering me

[11:39] *** jpn left
[11:47] <Voldenet> are those two pieces of code equivalent? I suspect they aren't:

[11:47] <Voldenet> m: my $x = ^10; my @y := $x; .say for @y;

[11:47] <camelia> rakudo-moar 7f0474c37: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[11:47] <Voldenet> m: my $x = ^10; say @$x;

[11:47] <camelia> rakudo-moar 7f0474c37: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤»

[11:47] <Voldenet> erm

[11:47] <Voldenet> m: my $x = ^10; .say for @$x;

[11:47] <camelia> rakudo-moar 7f0474c37: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[11:49] *** apac left
[11:49] <Voldenet> but I can't find docs for syntax on `@$x`

[11:52] *** jpn joined
[11:55] <timo> @$foo is like @($foo) is like $foo.list

[11:55] <Voldenet> Makes sense, I found docs for it https://docs.raku.org/type/Any#index-entry-@_list_contextualizer

[11:56] *** apac joined
[11:59] *** guifa left
[12:18] *** apac left
[12:22] *** apac joined
[12:23] *** bbkr joined
[12:24] <bbkr> m: "foo/../foo/file01.txt".IO.succ.say;

[12:24] <camelia> rakudo-moar 7f0474c37: OUTPUT: «"foo/../foo/file01.txt".IO␤»

[12:25] <bbkr> m: "foo/../foo/file01.txt".IO.basename.succ.say;

[12:25] <camelia> rakudo-moar 7f0474c37: OUTPUT: «file02.txt␤»

[12:26] <bbkr> ^ bug? happens only when path backtracks, basename is not bumped +1 despite being properly recognized.

[12:29] <Voldenet> m: "x01".succ.say

[12:29] <camelia> rakudo-moar 7f0474c37: OUTPUT: «x02␤»

[12:29] <Voldenet> m: ".x01".succ.say

[12:29] <camelia> rakudo-moar 7f0474c37: OUTPUT: «.x01␤»

[12:29] <Voldenet> this looks deliberate

[12:30] <bbkr> Why? Looks inconsistent with:

[12:30] <bbkr> m: "foo/file01.txt".IO.succ.say;

[12:30] <camelia> rakudo-moar 7f0474c37: OUTPUT: «"foo/file02.txt".IO␤»

[12:31] <Voldenet> eh, I'm not sure in which context it'd make sense

[12:32] <Voldenet> but it smells like bugfix for some special case

[12:33] <bbkr> succ() behavior on IO::Path is explicitly documented as "Returns a new IO::Path constructed from the invocant, with .basename changed by calling Str.succ on it.". So I'd expect foo/../foo/file01.txt successor to be foo/../foo/file02.txt.

[12:36] <bbkr> There is no exception in documentation that path cannot contain backtracking. I just discovered this by locking production code in infinite loop because directory in which code was looking for next free file name was relocated to backtracked path and suddenly succ() was no longer returning successor.

[12:38] *** merp joined
[12:39] <bbkr> I've created https://github.com/rakudo/rakudo/issues/5842

[12:52] <timo> sourceable6: "foo/../foo/file01.txt".IO.succ

[12:52] <sourceable6> timo, No build for revision “7f0474c”

[12:53] <timo> sourceable6: 2025.03 "foo/../foo/file01.txt".IO.succ

[12:53] <sourceable6> timo, No build for revision “316ddd2”

[12:53] <timo> linkable6: https://github.com/rakudo/rakudo/commit/305fc7bdfa8fe65f5fd9e46f036773a718ab1951

[12:54] <timo> "Make IO::Path use its own .succ / .pred logic" "So it no longer depends on the Str.succ / .pred logic"

[12:54] <timo> well, that might not actually matter

[12:57] <timo> ah, right, so the .. somewhere else in the path confusing it is the bug i think

[13:01] <timo> that really wants to have logic in it that properly resolves what part of the string is where the basename begins, and not look for any "." before that

[13:06] <timo> I don't think I'm the best candidate to attempt to fixt his

[13:13] <timo> m: say "/foo/bar/hi.01.bla/test01.txt".IO.succ # probably also not what you want or expect

[13:13] <camelia> rakudo-moar 7f0474c37: OUTPUT: «"/foo/bar/hj.01.bla/test01.txt".IO␤»

[13:13] <timo> m: say "/foo/bar/hi01.bla/test01.txt".IO.succ # it just uses the first dot it finds in the whole path, which is not what the docs say it should do

[13:13] <camelia> rakudo-moar 7f0474c37: OUTPUT: «"/foo/bar/hi02.bla/test01.txt".IO␤»

[13:16] <timo> i also put it in the ticket, apparently at the exact same time as oyu

[13:16] <bbkr> I've added this discovery of "first dot logic" to GH issue.

[13:16] <bbkr> :)

[13:16] *** JimmyZhuo joined
[13:17] <timo> in any case, "next free file name" is not a great thing to be doing for a few reasons

[13:25] <bbkr> agree. however in my use case with guaranteed single instance and controlled directory sizes this is justified - I get benefit of having sequential files without any race confitions or slowdown risks.

[13:27] <timo> any benefit over just counting the number of files in the dir to get the next number? there could be holes in the sequence?

[13:27] <timo> i guess it's nicely compact to write like ""file01.txt".IO ... !*.IO.d"

[13:28] <bbkr> in this tool user can refer to files using negative notation (--file-index=-1) because in this particular case this is super convenient.

[13:29] <bbkr> I've tripped on counting files once because stupid macOS filesystem added .DS_Store junk. So I'm leaning towards succ() method.

[13:30] *** lichtkind left
[13:31] <timo> right, you'd want dir() with a test that regexes only the filenames you're interested in

[13:31] <timo> m: "test99.txt".IO.succ.say

[13:31] <camelia> rakudo-moar 7f0474c37: OUTPUT: «"tesu00.txt".IO␤»

[13:32] <timo> ^- another thing that's probably not what you want

[13:32] <timo> m: "test_99.txt".IO.succ.say

[13:32] <camelia> rakudo-moar 7f0474c37: OUTPUT: «"test_100.txt".IO␤»

[13:36] <bbkr> True. i'm aware of it and it is already under control. However I think this quirk with "a99" vs "a_99" should be better documented n IO::Path. It's explainable but not DWIMy.

[13:39] <bbkr> To be fair it is documented in Str.succ, but from my experience users don't like to drill documentation if they think they already understood something from examples.

[13:48] <bbkr> https://github.com/Raku/doc/issues/4566 ^ this

[13:50] *** JimmyZhuo left
[14:01] <timo> good

[14:10] *** bbkr left
[14:30] *** ACfromTX left
[14:43] *** ACfromTX joined
[14:49] <lizmat> PSA: this week's Rakudo Weekly News will most likely be published tomorrow

[14:50] *** jpn left
[14:51] <[Coke]> lizmat++

[14:55] *** jpn joined
[15:22] *** apac left
[15:26] *** apac joined
[15:34] *** jpn left
[15:35] <[Coke]> Any idea how to satisfy this requirement on mac? 

[15:35] <[Coke]>                 "pq:from<native>:ver<5>"

[15:35] <[Coke]> apparently not with `brew install postgresql@15`

[15:36] <[Coke]> (libpq?)

[15:36] <[Coke]> nope.

[15:37] *** apa_c joined
[15:38] *** apac left
[15:38] *** lichtkind joined
[15:41] <discord-raku-bot> <holmdunc> libpq is apparently "keg-only" https://docs.brew.sh/FAQ#what-does-keg-only-mean

[15:42] <[Coke]> I tried running the zef command after that with an updated LDFLAGS, adding the path to .zshrc, etc.

[15:43] <[Coke]> (tried all the env vars in the brew info notes)

[15:43] <[Coke]> ... I'll do the testing on ubuntu, I guess.

[16:20] *** apa_c left
[16:26] *** jpn joined
[16:27] <jdv> linux is the way

[16:27] <jdv> well, the easier way:)

[18:35] <discord-raku-bot> <librasteve> [Coke]: I found a way to get it to work and documented here https://github.com/raku-community-modules/DBIish/issues/242

[18:36] *** MoC joined
[18:37] <[Coke]> thanks

[18:37] <discord-raku-bot> <librasteve> yw

[18:39] <discord-raku-bot> <librasteve> I didnt test adding the specific location to one of PATH, LD_LIBRARY_PATH, DYLD_LIBRARY_PATH or DYLD_FALLBACK_LIBRARY_PATH - which maybe easier, and clearer to explain...

[19:05] *** Guest53 joined
[19:07] *** Guest53 left
[19:31] *** jpn left
[19:51] *** abraxxa-home joined
[20:17] *** jpn joined
[20:21] *** jpn left
[20:47] *** MoC left
[20:51] *** Guest28 joined
[20:51] *** Guest28 left
[20:52] *** jpn joined
[20:57] *** guifa joined
[21:44] *** abraxxa-home left
[21:47] *** jpn left
[21:58] *** stanrifkin left
[22:13] *** sena_kun joined
[22:14] *** Sgeo joined
[22:18] *** jpn joined
[22:22] *** jpn left
[22:23] *** stanrifkin joined
[22:52] *** sena_kun left
[23:01] *** Guest92 joined
[23:03] *** Guest92 left
[23:43] *** jpn joined
[23:48] *** jpn left
[23:56] *** lichtkind left
[23:57] *** dgl joined
[23:57] *** dgl left
