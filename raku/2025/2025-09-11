[00:07] *** apac left
[00:07] *** itaipu joined
[01:12] *** oodani left
[01:12] *** oodani joined
[01:27] *** hulk joined
[01:27] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:16] *** lichtkind left
[02:41] *** dg left
[02:46] *** dg joined
[03:11] *** LainIwakura joined
[03:23] *** arkiuat left
[03:31] *** apogee_ntv left
[03:31] *** apogee_ntv joined
[03:36] *** arkiuat joined
[03:50] <patrickb> I've heard of the V language for the first time. https://vlang.io/ Seems pretty popular. Am I the only one that missed it so far?

[04:35] <Voldenet> vlang is too close to golang for my taste – if I wanted golang I'd just use golang

[04:50] <Voldenet> It's difficult to like golang – it feels very repetitive because of how error handling works and that extra : in assignment is ugly to look at

[04:55] <Voldenet> things like [][]string{} are also sufficiently weird, when it comes to compiled languages I prefer nimlang or ziglang – they just feel pleasant to look at in comparison

[05:08] <elcaro> perryprog: You can bench it for yourself -- https://pastebin.com/czca7sMW

[05:17] *** Aedil joined
[05:37] *** Pixi left
[05:45] *** melezhik joined
[05:47] *** Sgeo_ joined
[05:49] <Voldenet> without benching, I'd expect substr to be a lot faster and grammar be the slowest

[05:50] *** Sgeo left
[05:54] <Voldenet> I've benchmarked, rotor was surprisingly slow

[05:56] <Voldenet> I'm amazed but it seems that `sub { DateTime.new(year => .substr(0,4), month => .substr(4,2), day => .substr(6,2), hour => .substr(8,2), minute => .substr(10,2), second => .substr(12,2)) given $s }` is not significantly slower

[05:56] *** Pixi joined
[05:57] *** kaskal left
[05:58] *** kaskal joined
[06:09] <elcaro> Yeah, I wouldn't expect it to be. Anytime I need to cut up a string fast, I reach for substr :/

[06:14] <Voldenet> I mean, when you use named parameters vs positional parameters

[06:16] <Voldenet> .substr is plain allocate + copy part of the string, I doubt it can get any faster, the only fastest way would be if maybe no copy was done at all

[07:03] *** [Coke] left
[07:10] *** [Coke] joined
[07:29] *** Aedil left
[07:32] *** ynzoqn joined
[07:34] *** ynzoqn left
[07:55] *** melezhik left
[07:57] *** librasteve_ joined
[08:19] *** dakkar joined
[08:29] *** arkiuat left
[08:34] *** Sgeo_ left
[08:57] *** arkiuat joined
[09:02] *** arkiuat left
[09:30] *** arkiuat joined
[09:35] *** arkiuat left
[09:46] *** LainIwakura left
[09:51] <disbot1> <librasteve> I just noticed that Num.FatRat takes a 2nd argument to converts the number to a FatRat with the precision $epsilon.  Likely this is what I need - have closed the issue for now and will try it...

[10:03] *** LainIwakura joined
[10:05] *** arkiuat joined
[10:11] *** LainIwakura left
[10:15] *** arkiuat left
[10:24] *** LainIwakura joined
[10:29] *** lichtkind joined
[10:43] *** arkiuat joined
[10:47] *** arkiuat left
[11:01] *** arkiuat joined
[11:04] <disbot1> <simon_sibl> probably late to the party but the new Raku website looks amazing !

[11:08] *** arkiuat left
[11:20] *** arkiuat joined
[11:25] *** arkiuat left
[11:25] <disbot1> <librasteve> @simon_sibl ... thanks! all written in raku, of course (https://harcstack.org)

[11:37] *** crnlskn joined
[11:38] *** arkiuat joined
[11:43] *** lichtkind left
[11:44] *** LainIwakura left
[11:47] *** arkiuat left
[11:49] *** apac joined
[11:55] <disbot1> <simon_sibl> I'm not much of a web person but the harc stack looks pretty good I should try to learn and make a little project with it

[11:56] *** dgl joined
[11:58] *** dg left
[11:58] *** dgl is now known as dg

[12:00] *** arkiuat joined
[12:04] *** arkiuat left
[12:20] <mc2> ls 

[12:20] <mc2> oops sorry

[12:28] <sjn> ls: cannot open directory '.': Permission denied

[12:29] *** arkiuat joined
[12:34] *** arkiuat left
[12:51] *** Guest96 joined
[12:59] <disbot1> <simon_sibl> lmao, that happens to me also more than it should xD

[13:03] *** arkiuat joined
[13:06] *** stanrifkin joined
[13:08] *** arkiuat left
[13:23] <disbot1> <librasteve> ww?

[13:25] <crnlskn> bash: ww: command not found

[13:25] <crnlskn> scnr

[13:26] <disbot1> <librasteve> ww == 'wrong window' (I learned that from lizmat)

[13:26] <crnlskn> oh, I am aware, i was continuing the previous joke :)

[13:27] <disbot1> <librasteve> clear

[13:27] <crnlskn> also my fedora install here suggested 'w' as a valid command, which made me realize that 'ww?' could be read as a regex and then *would* math 'w'

[13:27] <crnlskn> er s/math/match

[13:30] *** arkiuat joined
[13:35] *** arkiuat left
[14:04] *** arkiuat joined
[14:10] *** arkiuat left
[14:16] *** Guest96 left
[14:16] *** Sgeo joined
[14:30] *** arkiuat joined
[14:34] *** arkiuat left
[14:58] *** melezhik joined
[14:58] <melezhik> .

[15:03] *** arkiuat joined
[15:47] <disbot1> <librasteve> o/

[15:47] <disbot1> <librasteve> Voldenet: you wrote

[15:52] <disbot1> <librasteve> sub tiniest-fat-rat($n = 2) { with $n / 2 { return $n if .FatRat == 0; samewith($n / 2); } }; say tiniest-fat-rat.FatRat.nude;  #(1 9223372036854775808)

[15:52] <evalable6> librasteve, rakudo-moar f56482941: OUTPUT: «(1 9223372036854775808)␤»

[15:52] <disbot1> <librasteve> which has had me scratching my head ... then I wrote:

[15:52] *** NucleusBiffBot joined
[15:52] *** NucleusBiffBot left
[15:54] <disbot1> <librasteve> say $n.WHAT; ... it's always a (Rat)

[15:54] <disbot1> <librasteve> then

[15:54] <disbot1> <librasteve> $*RAT-OVERFLOW = FatRat;

[15:55] <disbot1> <librasteve> and it recurses forever

[15:55] <disbot1> <librasteve> or you can go

[15:55] <disbot1> <librasteve> sub tiniest-fat-rat(FatRat $n = <2>.FatRat) {

[15:57] <perryprog> "tiniest fat rat" oh my goshhh you have to be doing this on purpose

[15:57] <disbot1> <librasteve> ;-)

[16:10] *** human-blip left
[16:12] <coleman> "fatrat" is the hostname of the server that serves raku.org and the docs :D

[16:12] *** human-blip joined
[16:13] <coleman> We don't have many hosts but I'm going to try and find another class name or type or role for the next one. I had to decomission "baggy". RIP baggy.

[16:14] *** LainIwakura joined
[16:19] <lizmat> PSA: it looks like irclogs.raku.org and Geth will be down on Mon 15 Sep from 0600 - 0800 UTC due to electricity works at their data center

[16:20] *** LainIwakura left
[16:32] *** dakkar left
[16:59] *** Aedil joined
[17:07] *** melezhik left
[17:30] *** crnlskn left
[17:52] <arkiuat> I still need to go to old.raku.org to find the information about the IRC channel bots, but I'm pretty sure someone already made an issue for that

[17:59] <arkiuat> Is there an instance of Commitable running at present? https://github.com/Raku/whateverable/wiki/Committable

[18:04] <arkiuat> m: for "2025-05-25T17:00:00" -> $d { for DateTime.new($d).in-timezone(-6*60*60), DateTime.new($d ~ "-06:00") { .julian-date.say } }

[18:04] <camelia> rakudo-moar a988e79f9: OUTPUT: «2460821.208333␤2460821.458333␤»

[18:04] <arkiuat> so it's not just that .julian-date was ignoring timezone information, but that it was only sometimes doing so, depending on how that information was supplied

[18:05] <arkiuat> I'm not sure how to run this again the fix that lizmat already put in

[18:07] <arkiuat> this goes back to a discussion on this channel back on May 25, and lizmat's fix I'm referring to is https://github.com/rakudo/rakudo/pull/5886

[18:08] <arkiuat> oh, never mind, I just figured out what I'm doing wrong.

[18:09] <arkiuat> m: for "2025-05-25T17:00:00" -> $d { for DateTime.new($d).in-timezone(-6*60*60), DateTime.new($d ~ "-06:00") { .say } }

[18:09] <camelia> rakudo-moar a988e79f9: OUTPUT: «2025-05-25T11:00:00-06:00␤2025-05-25T17:00:00-06:00␤»

[18:09] <arkiuat> One is at 11 AM in TZ-6 and the other is at 5pm in TZ-6

[18:13] <arkiuat> but while I'm doing blasts from the past, we also had a couple of discussions about [Z] where I expressed the opinion that it was the matrix-transpose operator, and it turns out there is a section in the Traps doc all about this particular issue: https://docs.perl6.org/language/traps#Using_%5B%E2%80%A6%5D_metaoperator_with_a_list_of_lists

[18:14] <arkiuat> weird, how did that "perl6" get in there? I meant https://docs.raku.org/language/traps#Using_[%E2%80%A6]_metaoperator_with_a_list_of_lists

[18:23] *** human-blip left
[18:25] *** human-blip joined
[18:40] *** crnlskn joined
[18:48] *** crnlskn left
[19:17] <[Coke]> https://docs.raku.org/language/traps#Using_%5B%E2%80%A6%5D_metaoperator_with_a_list_of_lists is the URL on the site.

[19:36] *** apac left
[19:41] <disbot1> <librasteve> arkiuat: yes the bot doc is an open issue …. PRs like that very simple to do and always welcome! (my proposal is a new box on the community page)

[19:49] *** melezhik joined
[19:49] <melezhik> .

[19:51] <melezhik> changed theme to light one and added systemd examples, also added some clarity on Sparrow essentials on the start page - https://sparrowhub.io

[19:58] *** melezhik left
[20:33] *** arkiuat left
[20:42] *** stanrifkin left
[20:44] *** stanrifkin joined
[20:44] *** stanrifkin left
[20:46] *** arkiuat joined
[20:50] *** arkiuat left
[20:52] *** mc2 left
[20:57] *** Aedil left
[21:05] *** arkiuat joined
[21:10] *** arkiuat left
[21:22] *** arkiuat joined
[21:27] *** arkiuat left
[21:33] *** arkiuat joined
[22:05] *** apac joined
[22:14] <Voldenet> >  perryprog │ "tiniest fat rat" oh my goshhh you have to be doing this on purpose

[22:14] <Voldenet> Yes. :D

[22:19] *** apac left
[22:19] <Voldenet> obviously the largest fat rat the more scary it becomes, so the tiniest one is the least scary

[22:21] <Voldenet> and "$*RAT-OVERFLOW" makes me imagine the pool of rats :)

[22:21] <Voldenet> back to the topic, you're absolutely right, when tested on Num it behaves differently

[22:21] <Voldenet> m: sub tiniest-fat-rat(Num() $n = 2) { with $n / 2 { return $n if .FatRat == 0; samewith($n / 2); } }; say tiniest-fat-rat.FatRat.nude; # roughly 1e-6 precision

[22:21] <camelia> rakudo-moar a988e79f9: OUTPUT: «(1 524288)␤»

[22:23] <Voldenet> and in fact changing the precision would let us store numbers with a lot higher precision due to how Num() actually works

[22:24] <Voldenet> m: my $p = 1e-300; sub tiniest-fat-rat(Num() $n = 2) { with $n / 2 { return $n if .FatRat($p) == 0; samewith($n / 2); } }; say tiniest-fat-rat.FatRat($p).nude;

[22:24] <camelia> rakudo-moar a988e79f9: OUTPUT: «(1 66969287949141707559276565566250113160087800731595850465234399273146940695308507655824898675980991132974667057347071676574196580355769627724903609841866092524591048592651443658881716281639819636737213638456540468647387132921242297244784649662981643…»

[22:25] <Voldenet> "arbitrary" as long as it's larger than 1e-308 of course

[22:28] <Voldenet> but I still think that parsing Str again in `NumStr -> FatRatStr/FatRat` conversion is a better idea

[23:31] *** arkiuat left
