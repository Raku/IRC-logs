[00:36] *** yewscion joined
[00:41] *** yewscion left
[01:08] *** yewscion joined
[01:14] *** yewscion left
[01:29] <SmokeMachine> Voldenet: Maybe something like this? (but it needs some improvements... Ill try to take a look at it...) https://usercontent.irccloud-cdn.com/file/ZZxXSs1g/image.png

[01:33] <SmokeMachine> (that's using this: https://raku.land/zef:whity/Logger)

[01:34] <Voldenet> that's not using DI, that's using magic

[01:35] <Voldenet> if X was a normal class, it shouldn't know about the DI at all

[01:35] <SmokeMachine> what do you mean?

[01:36] <SmokeMachine> X is the class where the logger is being injected...

[01:36] <Voldenet> DI should only emit some sub that'd let you write `my $x = $di.Get(X)` instead of `my $logger = Logger.new; my $x = X.new(logger => $logger)`

[01:36] <Voldenet> IMO ofc

[01:37] <Voldenet> it shouldn't alter classes anyhow

[01:37] <Voldenet> the reason is that libraries might use internal dependency injection container, not tied to the whole app

[01:38] <Voldenet> Entity framework core does this - it doesn't register all its internal classes in dotnet's DI, but has its own DI for internals

[01:38] <Voldenet> and when you have multiple models (one using mssql and one using sqlite), things work fine

[01:40] <SmokeMachine> you don't need to alter libraries... on that example, Logger is a external library not using Injector but it's being injected anyway...

[01:41] <SmokeMachine> a similar example with java/kotlin: https://medium.com/simars/inject-loggers-in-spring-java-or-kotlin-87162d02d068

[01:41] *** yewscion joined
[01:42] <Voldenet> SmokeMachine: what if X was in external library?

[01:43] <Voldenet> btw, @Autowiring in java is an antipattern

[01:43] <Voldenet> erm, @Autowired

[01:44] <Voldenet> current state of art is using Lombok's @RequiredArgsConstructor

[01:45] <Voldenet> ‚Ä¶ofc micronaut's author says not to use Lombok (because annotations don't work with each other), but I digress

[01:46] *** yewscion left
[01:51] <Voldenet> basic idea is that the application code should be written without knowing it will use any DI

[01:54] <SmokeMachine> I'm reading about @RequiredArgsConstructor, and if I'm reading it correctly, wouldn't it be the case to just add `is required` on your required attributes?

[01:54] <Voldenet> it'd be `is built`

[01:55] <Voldenet> you define private fields and tell lombok to generate constructor that would initialize all `private final` fields

[01:56] *** kylese left
[01:56] *** kylese joined
[01:56] <Voldenet> either way, a rough example of what I mean: https://0x0.st/8xe1.raku

[01:58] <Voldenet> ofc registered method accepts anything implementing `get and get-class`, perhaps it should be a role

[01:58] <Voldenet> s/method/callable/

[01:58] <Voldenet> so it can also accept scope

[01:59] <Voldenet> also, macros probably could be used to precompile resolved subs, so nearly no hash lookups are needed

[02:02] <Voldenet> the example only highlights how I'd expect DI to be used from javacentric point of view

[02:04] <SmokeMachine> do you really need defining that User::new?

[02:05] <Voldenet> No, it's just as an example of using the `multi method register(::T)`

[02:05] <Voldenet> the DI could be even simpler without it

[02:06] <Voldenet> otherwise there'd no need for anything special, just dumb hash

[02:06] <SmokeMachine> :+1

[02:06] <SmokeMachine> üëç

[02:08] <Voldenet> I think the container could probably know the dependencies from .^attributes alone

[02:08] <SmokeMachine> that instantiates a new object on every .get call but easily extensible to singleton and different lifecyles... is it going to be extended, or the intention is to be that way?

[02:08] <SmokeMachine> I suppose it could...

[02:08] <Voldenet> The intention is to have `class Scope { get(‚Ä¶) }` as well

[02:09] <Voldenet> and perhaps have registrations needing scope in separate hash

[02:09] <Voldenet> or maybe lifetime object could contain object instance tied to this lifetime

[02:11] <SmokeMachine> do you plan to have the container as a global singleton? Or should it be local and be possible to have multiple ones?

[02:12] <Voldenet> definitely there should be possibility to have multiple containers

[02:14] <Voldenet> I've been thinking that maybe lifetime should implement something like this `class Singleton { has $.x; method create(&fn) { $!x //= fn() }};` and every registration should have something like that

[02:14] *** yewscion joined
[02:14] <SmokeMachine> having multiple containers, it would be easy to make it store the object instances, and have one "global" that would work as singletons, have another one that would be created and destroyed per request, etc... and use that to control lifecycles...

[02:14] <Voldenet> aye, that'd work

[02:15] *** kylese left
[02:15] *** kylese joined
[02:15] <SmokeMachine> if you do that way I described, you would not need to implement anything lifecycle related...

[02:16] <Voldenet> but it'd require some hackery regarding multiple scopes support

[02:16] <Voldenet> for instance, you could have a Thread-based scope, a request based scope, a container scope

[02:16] <SmokeMachine> maybe some kind of a tree of contexts...

[02:17] <Voldenet> it doesn't have simple parent-child relation

[02:17] <SmokeMachine> s/contexts/containers/

[02:17] <Voldenet> since thread id might change during one request

[02:17] <Voldenet> when using react block or await

[02:18] <SmokeMachine> global -> request -> thread, no?

[02:18] <Voldenet> but one thread can handle multiple requests

[02:19] *** yewscion left
[02:19] <SmokeMachine> multiple requests could point to the same thread?

[02:19] <Voldenet> sure

[02:20] <SmokeMachine> I mean, multiple request containers could be parent of the same thread container.

[02:20] <Voldenet> but not all code will happen during the rpc request

[02:21] <SmokeMachine> (sorry, my english do not helpme... even worst at 3:20 am...)

[02:21] <Voldenet> np :D

[02:21] <Voldenet> if you do `start { cleanup-db(); }` that would remove stale things and try to have one connection per thread

[02:21] <SmokeMachine> s/do/does/

[02:22] <Voldenet> then some requests might share connection with this background job

[02:23] <Voldenet> I'm not sure how to solve that now, i'll think about it

[02:24] <SmokeMachine> so, if I got it correctly you are saying that we could break other requests if you do what I suggested?

[02:25] <Voldenet> yeah, other requests could get connections that aren't belonging to their current thread

[02:26] <Voldenet> it's a bit like the container itself should find the binding, then dispatch it to the proper lifetime

[02:27] <SmokeMachine> complex... :)

[02:27] <Voldenet> `class Singleton { has %.instances; method get-intsnces() { %.instances }}; class Thread { has @.threads; method get-instances() { @.threads[$*THREAD.id] //= {} } `

[02:27] <Voldenet> something like this‚Ä¶?

[02:28] <SmokeMachine> I think something like that should work...

[02:29] <SmokeMachine> class Request { has %.requests; method get-instances { %.instances } }

[02:29] <Voldenet> number of hashes sounds like performance nightmare, so maybe instances should be just array accessed by index

[02:30] <Voldenet> and then DI container should add idx to every binding

[02:30] *** yewscion joined
[02:30] <SmokeMachine> and probably `role Container { method get-instances {...} }`

[02:31] <Voldenet> more like `role ContainerLifetime { method get-instances {‚Ä¶} }`

[02:31] <SmokeMachine> that would make sense... but maybe that's a premature optimization?

[02:31] <SmokeMachine> yes

[02:31] <Voldenet> yes, I'm evil

[02:31] <Voldenet> I always do premature optimization :)

[02:34] <SmokeMachine> `role ContainerLifetime { has @.instances; method get-instances { @!instances } }; class Singleton does ContainerLifetime {...` if all of them will be arrays... it can be a single one, no?

[02:34] <Voldenet> hmm, but adding the idx could quickly overallocate large arrays for requests using only one instance

[02:35] *** yewscion left
[02:35] <Voldenet> Yes, and in fact I'd say Singleton should have some special support, but under the hood, it could be `class Container { has Singleton $.singletons; }`

[02:36] <Voldenet> that would then be accessed by all factories using singleton lifetime

[02:39] <Voldenet> so, the pseudocode for get would be `class Container { get($key) { my $bind = self.pick-binding($key); my $l = self.pick-lifetime($bind): $l.get-instances().create($bind) }`

[02:39] <SmokeMachine> what if you have a container merger? it wouldn't really merge the containers, but it would return a obj with all the containers you are using that time inside of it and it would know from where to get the binds you need?

[02:40] <Voldenet> I don't think that merging containers is something implemented explicitly

[02:41] <Voldenet> I'd implement apis like `add-binding(Binding) {‚Ä¶}; bindings () returns Array[Binding] {‚Ä¶}`

[02:41] <Voldenet> or `bindings () returns Iterable {‚Ä¶}` but maybe it should snapshot the bindings array

[02:42] <Voldenet> and maybe `has-binding` to let users write logic for that

[02:44] <Voldenet> `for $old-container.bindings { if $new-container.has-binding($_) { warn "oh no" } else { $new-container.add-binding($_); }}`

[02:47] <SmokeMachine> sorry, but I'm letting my imagination to travel now... what about: `class LayeredContainer { has $.parent; has %.binds; method push { ::?CLASS.new: :parent(self) }; method pop { $!parent }; method find($bind) { %!binds{$bind} // $!parent.find: $bind } }` (sorry for letting it go...)

[02:47] *** yewscion joined
[02:49] <SmokeMachine> that way, you would always have the last layer and could access all values you should have access to. event in multiple threads at the same time...

[02:52] *** yewscion left
[02:52] <SmokeMachine> something like a functional stack (https://github.com/FCO/Functional-Stack )

[02:52] <SmokeMachine> (I'm not suggesting you you to use that module)

[02:54] <SmokeMachine> but if it worked like that, immutably, you would not have problems accessing it concurrently...

[02:54] <SmokeMachine> and each thread/request would have it's own version of containers...

[02:55] <SmokeMachine> please let me know how it's going. I have to go to sleep now

[02:57] *** yewscion joined
[03:00] <SmokeMachine> Voldenet: have a good night

[03:02] *** yewscion left
[03:13] *** yewscion joined
[03:18] *** yewscion left
[03:20] *** yewscion joined
[03:25] *** yewscion left
[03:25] *** Aedil joined
[03:37] *** yewscion joined
[03:42] *** yewscion left
[03:45] *** kylese left
[03:47] *** kylese joined
[03:53] *** yewscion joined
[03:58] *** yewscion left
[04:10] *** yewscion joined
[04:18] *** yewscion left
[04:18] <Voldenet> SmokeMachine: thanks, but I was just doing chores before work - this layered container is actually how scopes should be implemented (so lifetimes that are explicitly started or ended) because scopes are hierarchical

[04:19] <Voldenet> SmokeMachine: after thinking a bit, I think that `resolve` (operation returning bind) and `get-instance { resolve(‚Ä¶)() }` should be separate

[04:20] <Voldenet> SmokeMachine: so unlike I wrote in my earlier example, emitting factories should attempt to resolve everything, also what should get register is the "resolve" method, not the create

[04:21] <Voldenet> which would let you do `my &handler = resolve(MyRpcMethod); route('/MyRpcMethod', { handler() })`

[04:22] <Voldenet> additionally, scopes shouldn't be fields, but they should use DI hash

[04:23] *** leah2 left
[04:23] <Voldenet> so the code I wrote earlier would be `class Container { resolve($key) { my $bind = self.pick-binding($key); my $l = self.resolve-class($bind.lifetime); return { $l.get-instances().create($bind) }} }`

[04:23] <Voldenet> since resolve would be a function, it could be late-bound in pessimistic cases

[04:24] <Voldenet> but in optimistic, all dependency resolving functions would be direct pointers

[04:32] *** DarthGandalf left
[04:32] *** DarthGandalf joined
[04:48] *** yewscion joined
[04:53] *** yewscion left
[05:06] *** leah2 joined
[05:58] *** yewscion joined
[06:11] *** yewscion left
[06:30] *** human-blip left
[06:31] *** yewscion joined
[06:32] *** human-blip joined
[06:36] *** yewscion left
[06:41] *** yewscion joined
[06:45] *** yewscion left
[06:51] *** human-blip left
[06:52] *** human-blip joined
[07:11] *** merp joined
[07:14] *** yewscion joined
[07:19] *** yewscion left
[07:31] *** yewscion joined
[07:36] *** yewscion left
[07:48] *** yewscion joined
[07:49] <disbot1> <librasteve> weekly: https://rakujourney.wordpress.com/2025/05/26/harc-stack-navigation/

[07:49] <notable6> librasteve, Noted! (weekly)

[07:53] *** yewscion left
[07:56] <Xliff> librasteve: Decent article. You might want expand a bit on how content() works. A before and after markup illustration would be sufficient.

[08:06] *** wayland76 joined
[08:16] *** yewscion joined
[08:26] *** arkiuat left
[08:27] *** yewscion left
[08:39] *** arkiuat joined
[08:40] <lizmat> librasteve:  why: do for @.items.map: *kv -> (Sname, $target) {   ?     why not:  @.items.map: *kv -> (Sname, $target) ?   (aka removing "do for")

[08:40] *** TheAthlete joined
[08:44] *** arkiuat left
[08:56] *** yewscion joined
[09:00] *** apac joined
[09:02] *** yewscion left
[09:02] <disbot1> <nijmegenzuigt> anyone out there making RakuMacs xD

[09:13] *** arkiuat joined
[09:16] *** guifa left
[09:17] *** yewscion joined
[09:18] *** arkiuat left
[09:18] * lizmat wonders why someone would use a nick offensive to people living in Nijmegen

[09:18] <disbot1> <nijmegenzuigt> we went through this before

[09:19] <disbot1> <nijmegenzuigt> dont you have to prepare for your 7 hour dinner? üòõ

[09:19] *** guifa joined
[09:19] <wayland76> Voldenet: Just checking whether I'm understanding Dependency Injection correctly, does Dependency Injection mean that you end up with Factory classes, and you ask them to make the objects you require for you?  

[09:21] <lizmat> *sigh*

[09:22] *** yewscion left
[09:25] <lizmat> whistlingzephyr do you have an opinion about behaviour of nijmegenzuigt here ?

[09:27] <disbot1> <nijmegenzuigt> people usually do, though its often negative üò¶

[09:31] <lizmat> it's a small consolation that Arnhem will lose all their speed

[09:32] <wayland76> nijmegenzuigt: What does RakuMacs mean in this context?  Or am I better off not asking?  

[09:34] *** yewscion joined
[09:34] <disbot1> <nijmegenzuigt> just emacs but in raku :p every other editor seems to jam LLMs into everything and turn them on without asking... even zed ;_;

[09:35] <wayland76> Haven't seen it in nano yet :p

[09:35] <disbot1> <nijmegenzuigt> and Vitesse has been close to ded so many times but if the stadium owner doesnt go it might be fully RIP

[09:37] <disbot1> <librasteve> Xliff: will do ‚Ä¶ afk right now

[09:38] <disbot1> <librasteve> lizmat: lemme test that when I‚Äôm back (likely red face)

[09:38] <disbot1> <librasteve> note to self ‚Ä¶. always triple check source that you post on the interweb

[09:38] <lizmat> m: dd do for <a b c>.map: *.succ

[09:38] <camelia> rakudo-moar 7783e28b8: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> dd do for <a b c>.map: *.succ<HERE><EOL>‚ê§    expecting any of:‚ê§        block or pointy block‚ê§¬ª

[09:39] <lizmat> m: dd do for <a b c>.map(*.succ)

[09:39] <camelia> rakudo-moar 7783e28b8: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> dd do for <a b c>.map(*.succ)<HERE><EOL>‚ê§    expecting any of:‚ê§        block or pointy block‚ê§¬ª

[09:39] <lizmat> meh

[09:39] *** yewscion left
[09:40] <wayland76> For those wondering about Dependency Injection, I'm finding the following useful: https://martinfowler.com/articles/injection.html

[09:47] *** arkiuat joined
[09:49] *** yewscion joined
[09:51] *** arkiuat left
[09:51] *** apac left
[09:54] <disbot1> <librasteve> good article ‚Ä¶ thanks for the link ‚Ä¶ HARC stack can do any raku DI tool you like. i just personally own to the DIY approach I linked to above - timtowdi

[09:54] *** yewscion left
[09:57] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/05/26/2025-21-harcigation/

[09:58] *** NijmegenRocks joined
[09:59] *** NijmegenRocks left
[10:04] *** apac joined
[10:06] *** yewscion joined
[10:13] *** yewscion left
[10:16] *** apac left
[10:19] *** yewscion joined
[10:22] *** Sgeo left
[10:23] *** arkiuat joined
[10:23] *** apac joined
[10:28] *** yewscion left
[10:32] *** arkiuat left
[10:34] <wayland76> librasteve: Can you give examples of existing "raku DI tools"?  

[10:39] *** yewscion joined
[10:44] <disbot1> <nijmegenzuigt> ChatGPT SteveTM

[10:45] *** yewscion left
[10:46] *** arkiuat joined
[10:50] *** arkiuat left
[10:58] *** yewscion joined
[11:01] <wayland76> Good idea.  https://chatgpt.com/share/683449ce-8088-8012-a0d1-bd540e3517f2

[11:03] *** yewscion left
[11:04] <wayland76> Although half of that is hallucination.  

[11:04] <Voldenet> wayland76: well, dependency injection means that the class requests specific classes/roles/interfaces, but something else specifies how those dependencies are created/provided - dependency injection container is a tool used to define that

[11:06] <wayland76> Does the DBIish model (an interface class, and a number of implementation classes, and you pass in the implementation name as a parameter to the Interface when creating it) count as Dependency Injection?  

[11:06] <Voldenet> but you don't have to end up with some central point, that's why Injector provided dependency injection but it did that very differently

[11:06] *** arkiuat joined
[11:10] <wayland76> Ah, a kind of "Object to help create the object" then?  

[11:11] <Voldenet> the main point is to not do .new on things, but instead have objects created always

[11:11] *** arkiuat left
[11:14] <Voldenet> so‚Ä¶ I'd say that DBIish doesn't do DI, you register some drivers, but ultimately it somehow picks the connection

[11:15] *** yewscion joined
[11:16] <Voldenet> without di connect method does .install-driver, with di, it would require driver as parameter

[11:18] <Voldenet> with DI it'd require you to use the proper class implementing driver  `DBIish.connect(DBIIsh::Pg.new(‚Ä¶))`

[11:19] <wayland76> So you're saying that, instead of requiring the name of the driver, it would require an actual object of the driver?  

[11:19] <Voldenet> yeah

[11:24] <Voldenet> I don't know if that would be useful in the context, but it isn't significantly different

[11:24] *** yewscion left
[11:25] <wayland76> I think that, in the DBIish case, we get most of the advantages without the disadvantage of having to create the objects.  

[11:27] *** topnep left
[11:28] <Voldenet> pure DI tries to push "I never create objects" to the limit of "container creates everything for me", though it mostly works with all the other creational patterns

[11:29] <Voldenet> so I often put abstract factories into DI and then request those factories to use somewhere else, without DI knowing

[11:30] <wayland76> Yep.  I can see that.  Hmm.  I wonder how they create Exceptions :p 

[11:30] <Voldenet> *sigh* Yes

[11:31] <Voldenet> `ExceptionProvider.createThing()` instead of `new Exception("thing")`

[11:32] <Voldenet> honestly it's too puristic for me - there are pros

[11:32] <Voldenet> like you can, depending on the creation context, know what kind of exception throw in the same place (with details or without)

[11:34] *** topnep joined
[11:34] <Voldenet> but imagine requesting ExceptionProvider and Logger every piece of code, it could become madness quick

[11:35] <wayland76> Yes.  I think the concept of easily interchangeable Implementations is a good idea, but DI is just one method of achieving that.  

[11:36] <Voldenet> what DI actually helps doing best is testing

[11:36] *** yewscion joined
[11:36] <Voldenet> you know what you need to mock, there's no providers or dynamic variables to register

[11:38] <Voldenet> imagine testing code, where someone liberally uses `my $dbh = DBIish.connect("Pg"` in 20 methods, a horror

[11:39] *** arkiuat joined
[11:40] *** yewscion left
[11:49] <wayland76> Agreed, but if they did `my $dbh = DBIish.connect($backend` in 20 methods, and the string in $backend got passed around the same way that the injected dependency did, it'd solve the same problem, I think.  

[11:51] <Voldenet> ‚Ä¶and the string $backend could be stored as dependency ;)

[11:52] <Voldenet> DI would deal with it entirely differently, it'd simply register factory method for DBDish::Connection and do the connect there

[12:00] <Voldenet> eh, but in that case it'd probably also need to do .dispose afterwards

[12:00] <wayland76> Yep.  I'm heading to bed.  Have a good day/night, everyone :) o/

[12:07] *** yewscion joined
[12:16] *** yewscion left
[12:26] *** yewscion joined
[12:26] <SmokeMachine> So bizarre! Chat GPT suggests copying Red to DI and ignores Injector‚Ä¶

[12:31] *** yewscion left
[12:32] <SmokeMachine> Voldenet: I was thinking‚Ä¶ how do you plan to pass the container around? I mean: what if a internal class needs it? Or it shouldn‚Äôt?

[12:34] <SmokeMachine> If they were using Red, they wouldn‚Äôt need to .connect on 20 methods (just a joke)

[12:34] <Voldenet> resolved factory should accept DI instance, but not provide its own imo

[12:35] <Voldenet> because resolved factories get only DI instance as an argument

[12:36] <Voldenet> so, everything only gets the container or scope (that should know its parent scope or container)

[12:38] <Voldenet> it's certainly possible to pass the original DI instance around, since returned factory can hold that object, but I'd rather do that as an exception

[12:39] <Voldenet> if it's ever needed

[13:05] <Xliff> m: my $a = Promise.in(10).then(-> { say "Boo" }

[13:05] <camelia> rakudo-moar 7783e28b8: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> a = Promise.in(10).then(-> { say "Boo" }<HERE><EOL>‚ê§    expecting any of:‚ê§‚Ä¶¬ª

[13:05] <Xliff> m: my $a = Promise.in(10).then(-> { say "Boo" })

[13:05] <camelia> rakudo-moar 7783e28b8: ( no output )

[13:05] <Xliff> m: my $a = Promise.in(10).then(-> { say "Boo" }); sleep 6

[13:05] <camelia> rakudo-moar 7783e28b8: ( no output )

[13:05] <Xliff> m: my $a = Promise.in(10).then(-> { say "Boo" }); await $a

[13:06] <camelia> rakudo-moar 7783e28b8: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    Too many positionals passed; expected 0 arguments but got 1‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[13:06] <Xliff> m: my $a = Promise.in(10).then({ say "Boo" }); await $a

[13:06] <camelia> rakudo-moar 7783e28b8: OUTPUT: ¬´Boo‚ê§¬ª

[13:06] <Xliff> m: my $a = Promise.in(5).then({ say "Boo" }); start { await $a }; $a.break

[13:06] <camelia> rakudo-moar 7783e28b8: OUTPUT: ¬´Access denied to keep/break this Promise; already vowed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:06] <Xliff> How could I abort the promise in $a?

[13:10] <lizmat> you can't

[13:10] <lizmat> but if you instead use $*SCHEDULER.cue, you can: https://docs.raku.org/routine/cue

[13:19] <Voldenet> you don't, you instead ask methods to cancel themselves when the bool is set

[13:19] <Voldenet> ‚Ä¶or use the second Promise

[13:20] <Voldenet> m: my $cancel = Promise.new; my $a = Promise.anyof(Promise.in(5), $cancel).then({ say "Boo" }); Promise.in(1).then({ $cancel.vow.break("timeout"); }); my $n = now; await $a; say now - $n

[13:20] <camelia> rakudo-moar bffe23777: OUTPUT: ¬´Boo‚ê§1.015403736‚ê§¬ª

[13:20] <Voldenet> (then gets executed after 1s instead of 5, but you can check the status of the promise)

[13:21] <disbot1> <librasteve> lizmat: i have reviewed my code do for @.items.map: *.kv -> ($name, $target) {} and I think it's right ... to paraphrase it's saying "take each pair in @.items, and map its .kv to $name, $target and then do something" ... so the for is iterating the @.items list and the map is iterating over the kv

[13:21] <disbot1> <librasteve> there may be better way to write that - but its not that I duplicated the iterator

[13:23] <Voldenet> m: my $cancel = False; my $p = Promise.new; my $x = $p.then({ die "cancelled" if $cancel; say "Boo" }); $cancel = True; $p.vow.keep(Any); await $x

[13:23] <camelia> rakudo-moar bffe23777: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    cancelled‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[13:23] <Voldenet> alternative - voluntary cancellation

[13:27] <disbot1> <librasteve> btw still not happy with what i wrote --- noodling

[13:31] <lizmat> librasteve @.items.kv -> $name,$target {    perhaps ?

[13:33] <lizmat> librasteve @.items.kv.map: -> $name,$target {    I meant  :-)

[13:33] <disbot1> <librasteve> i tried the first already - didn't work

[13:34] <lizmat> yeah, because it failed the .map

[13:35] <lizmat> or maybe I'm not grokking what you want to produce  :-(

[13:41] <lizmat> afk for a few hours&

[13:41] <disbot1> <nijmegenzuigt> üôÇ

[13:45] <disbot1> <librasteve> .ignore

[14:23] *** yewscion joined
[14:27] *** yewscion left
[14:29] *** wayland76 left
[14:29] *** wayland joined
[14:43] <disbot1> <melezhik.> o/

[14:44] <disbot1> <melezhik.> I have already asked . But one more time ))) if someone would review this Raku/Regexp guide for none Raku users I would appreciate it. https://git.resf.org/melezhik/sparrow_task_check_crash_course/src/branch/main/README.md

[14:44] <disbot1> <melezhik.> Starting from Raku regexps section

[14:45] <disbot1> <antononcube> Cannot open it...

[14:45] <disbot1> <melezhik.> One may disregard Sparrow specific

[14:46] <disbot1> <antononcube> Ok, it did open, after 20 seconds.

[14:46] <disbot1> <melezhik.> Yeah. Theirs server maybe abit slow

[14:47] <disbot1> <melezhik.> Starting actually from this - https://git.resf.org/melezhik/sparrow_task_check_crash_course/src/branch/main/README.md#regular-expressions

[16:24] <disbot1> <nijmegenzuigt> anton, I was about to say you dont have anything with voronoi diagrams but you have so many libraries to make them in your repos xD

[16:24] <disbot1> <nijmegenzuigt> math lord

[16:37] <disbot1> <antononcube> It is in my soon-TODO list implement Voronoi diagrams in Raku. (In order to use them in Geographics computations.)

[16:39] <disbot1> <antononcube> Mostly, I am not sure how to visualize them. "JavaScript::D3" needs a fair amount of work (both design and implementation) to make plots with collections of graphics primitives. (Points, segments, polygons, etc.)

[16:46] *** yewscion joined
[16:50] *** yewscion left
[16:50] <disbot1> <nijmegenzuigt> thats more how you want them to be rendered, no?

[16:52] <disbot1> <nijmegenzuigt> whether you start out with a grid and calculate a Voronoi grid out of that or you can let them expand in near distance

[16:52] *** Sgeo joined
[16:54] <disbot1> <nijmegenzuigt> I do remember trying to make a civ style globe with voronoi grid but that was beyond my skill level then

[16:54] <disbot1> <nijmegenzuigt> maybe stil is ü•≤

[16:56] <disbot1> <antononcube> The actual computations of voronoi-mesh and its dual delaunay-mesh is not that hard. What is hard for me to figure out is: (i) which package should have those implementations, (ii) how to visualize those meshes, using which packages.

[16:57] <disbot1> <nijmegenzuigt> ah ye

[16:57] <disbot1> <nijmegenzuigt> that makes more sense xD

[16:57] <disbot1> <antononcube> Since, delaunay-mesh is "just" a graph, it can be readily visualized with "JavaScript::D3" and "Graph".

[16:58] <disbot1> <antononcube> Also, I am not sure should I handle just 1D and 2D cases, or go higher 3D and nD.

[16:59] <disbot1> <nijmegenzuigt> I am used to more game-programming hackey ways; mathematically correct because It Just WorksTM but suboptimal

[16:59] <disbot1> <nijmegenzuigt> üòé

[17:00] <disbot1> <nijmegenzuigt> on a legit graph you have so many ways to do it :/

[17:01] <disbot1> <nijmegenzuigt> a 2D graph I mean

[17:06] <disbot1> <nijmegenzuigt> like you can have convexed shapes of Voronoi cells I guess

[17:06] <disbot1> <nijmegenzuigt> I avoid that like a plague

[17:07] <disbot1> <nijmegenzuigt> would love to see it if you did make do end up making it tho üôÇ

[17:13] <disbot1> <nijmegenzuigt> just like my countryman, I'll stick with the superior Mondrian diagram. Just rectangles ez.

[17:24] <disbot1> <antononcube> ü§∑‚Äç‚ôÇÔ∏è ü™ü

[17:24] <disbot1> <nijmegenzuigt> excuse me bro

[17:25] <disbot1> <nijmegenzuigt> üü•‚¨úüü¶üü•üüß

[18:10] <SmokeMachine> librasteve: I commented your PR: https://github.com/FCO/Cromponent/pull/12#pullrequestreview-2868836422

[19:34] *** TheAthlete left
[20:01] <disbot1> <librasteve> SmokeMachine: thanks - my comments to your comments are now done

[20:41] *** apac left
[20:50] *** apac joined
[20:59] *** Aedil left
[22:43] *** apac left
[23:38] *** yewscion joined
[23:44] *** yewscion left
[23:44] *** yewscion joined
[23:51] *** yewscion left
