[00:16] *** sena_kun left
[00:37] *** yewscion joined
[00:43] *** yewscion left
[01:13] *** yewscion joined
[01:18] *** yewscion left
[02:35] *** yewscion joined
[02:39] *** yewscion left
[02:49] *** wayland76 joined
[02:49] *** wayland left
[02:51] *** hulk joined
[02:52] *** kylese left
[02:53] *** yewscion joined
[02:58] *** yewscion left
[03:15] *** hulk left
[03:15] *** kylese joined
[04:59] *** Aedil joined
[05:00] *** Aedil left
[05:06] *** Aedil joined
[08:05] *** derpydoo joined
[08:09] *** Sgeo left
[08:10] *** Sgeo joined
[09:17] *** derpydoo left
[11:10] *** jpn joined
[11:15] *** human_blip left
[11:16] *** human_blip joined
[11:29] *** JimmyZhuo joined
[12:06] *** jjido joined
[12:10] *** jjido left
[12:12] *** bartolin left
[12:13] *** Sgeo left
[12:13] *** bartolin joined
[12:25] *** jpn left
[12:36] *** tjr joined
[12:38] *** jjido joined
[12:44] *** jpn joined
[12:49] *** jpn left
[13:12] *** jpn joined
[13:19] *** sena_kun joined
[13:27] *** jpn left
[14:05] *** JimmyZhuo left
[14:14] *** jpn joined
[14:34] *** jjido left
[14:41] *** jpn left
[15:35] *** jpn joined
[15:41] *** PipStuart joined
[16:07] *** derpydoo joined
[16:40] *** euandreh left
[16:52] *** jpn left
[17:18] <discord-raku-bot> <librasteve> SmokeMachine: I have seen your very nice Cromponent and P6-React (aka rakux) --- are there any more?

[17:22] *** librasteve_ joined
[17:30] *** derpydoo left
[17:32] <SmokeMachine> librasteve: yes, a few... let me find a list of them: https://github.com/FCO/Cromponent https://github.com/FCO/HTML-Component https://github.com/FCO/MemoizedDOM https://github.com/FCO/p6-react https://github.com/FCO/proact/blob/master/t/01-slang.t https://github.com/FCO/Cro-WebSocket-WebComponents-test (I feel like there are a few missing...)

[17:33] <SmokeMachine> I like MemoizedDOM a lot...

[17:33] <discord-raku-bot> <librasteve> .oO

[17:33] <SmokeMachine> https://fco.github.io/MemoizedDOM/todo6.html

[17:34] <SmokeMachine> I have to find some time to rebuild the MemoizedDOM example...

[17:36] <discord-raku-bot> <librasteve> yeah - just says loading... for me

[17:36] <SmokeMachine> it takes some time but loads... (at least here to me...)

[17:36] <SmokeMachine> on my firefox it works...

[17:37] <discord-raku-bot> <librasteve> maybe too impatient - lemme try ff

[17:38] <discord-raku-bot> <librasteve> ok ff works (takes about 20secs

[17:38] <discord-raku-bot> <librasteve> )

[17:38] <SmokeMachine> (it compiles the code on the browser... a code from 7 years ago...)

[17:38] <discord-raku-bot> <librasteve> safari (barf) is doa

[17:39] <SmokeMachine> if you open the page code, you will see raku code there... :)

[17:39] <discord-raku-bot> <librasteve> holy crap - it runs in the browser

[17:40] <SmokeMachine> (perl6 code... it was built before the renaming, I think...)

[17:40] <discord-raku-bot> <librasteve> also before WASM I guess

[17:42] <SmokeMachine> it uses this: https://webperl.zero-g.net/

[17:42] <SmokeMachine> https://webperl.zero-g.net/perl6.html

[17:43] <SmokeMachine> that if I remember it correctly uses this: https://perl6.github.io/6pad/

[17:46] <SmokeMachine> if you test it, you will see that even taking very long to compile/load, after that's done it does run on a decent speed...

[17:47] <discord-raku-bot> <librasteve> yeah i tried it - not sure I have a use case for it ;-)

[17:47] <SmokeMachine> and it used to work on all the browsers... I don't know what changed to make it not work in some browsers...

[17:47] <discord-raku-bot> <librasteve> bitrot

[18:00] <SmokeMachine> librasteve_: have you seen the other tries?

[18:06] <wayland76> Are you telling me I can run Raku on the client side as well?  

[18:06] <SmokeMachine> you kinda can... :)

[18:08] <SmokeMachine> wayland76: https://github.com/rakudo/rakudo/tree/e2ec3a2d09a1183cee37acc6517083c2cd882464/src/vm

[18:09] <wayland76> Crazy!  Well, I know what I'm going to want to use for my next UI projects :)

[18:10] <SmokeMachine> if I remember it well, on MemoizedDOM, you could do it the way the example shows, or you could also precompile it to js and not expand time compiling it on browser if I'm not mistaken...

[18:11] <discord-raku-bot> <librasteve> voldenet: I have been thinking about your suggestion to make a component tree - you mention that this will help static optimisation ... that got me thinking a bit about my Air module in the context of performance ... so I did a quick test with Chrome Performance. Basically for he trivial <bal ble bli> code on localhost its 0.16/0.12s to LCP of which 47/17 millisec is the localhost packet read (ie all the raku

[18:11] <discord-raku-bot> processing) - the first number is the first hit on the url after server start, the second number is subsequent hits on the same url - this is comparable to another remote site that uses Cro Template. Since Air is primarily aimed at HTMX, I think that small, dynamically populated payloads will be typical and that wrapping a bit of text via the .HTML calls is likely low overhead compared to real work such as DB dip. Anyway, I was

[18:11] <discord-raku-bot> pleasantly surprise that both the server build times <2sec and web response times (as above) are not too bad - I put this down to that almost all of the code is precomped (eg Air/Base.rakumod) and that the actual raku code to make a response is preloaded by the Cro server into memory.

[18:15] <SmokeMachine> librasteve_: does MemoizedDOM HTML looks like your module? example: https://github.com/FCO/MemoizedDOM/blob/master/examples/todo/Todo.pm6

[18:15] <SmokeMachine> another example: https://github.com/FCO/MemoizedDOM/blob/master/examples/todo/App.pm6

[18:16] <SmokeMachine> I think the biggest difference it that it uses blocks, right?

[18:30] <tbrowder> hi, does raku treat a string with a trailing subscript of integers as anything special?

[18:31] <lizmat> no

[18:31] <lizmat> but perhaps the question is not clear enough

[18:31] <SmokeMachine> this one (https://github.com/FCO/HTML-Component) also looks like that but uses methods... This one a=I was trying to make to not allow invalid HTML by only adding the tight methods in each "TAG"... so, if you are on <body>, for example, you would not be able to call .li, but you would if inside a <ol>

[18:32] <tbrowder> that confirms my suspicion, but i think i can treat it specially if desired with user code

[18:34] <tbrowder> my query/interest is interpreting such a string as a base indicator for the leading part

[18:35] <tbrowder> as a non-digital number

[18:35] <discord-raku-bot> <librasteve> I would say the coding style for the Todo App in MemoizedDOM is pretty much the same that I wrote in Air::Functional - that is with (i) functions (ie subs) for each HTML tag name, and (ii) the raku pair syntax for tag attrs - seems like you were on the right track back then ;-)

[18:36] <tbrowder> or even leading decimal digits (with zero or one radix points)

[18:39] <tbrowder> restrict the trailing subscripts to chars of range 0x2080 - 0x2089

[18:39] <discord-raku-bot> <librasteve> For the last 3 months I have been pulling together 3 ideas into the new Air module - Air::Functional for the tag coding style, Air::Base is a lib of tags and other things (eg class Nav, class Page, class Site) and Air::Component is basically Cromponent without Cro Templates

[18:41] <discord-raku-bot> <librasteve> it seems that many of these ideas you had already (and I may have reinvented indendently), or I used your code as a starting point - so fully appreciate and acknowledge your work

[18:44] <discord-raku-bot> <librasteve> anyway, Air leaked out last week before I have properly documented it - so I will do that next and a bit of a tidy up - also needs some more examples in Air::Play (that's kinda the playground for trying out different site examples)

[18:45] <SmokeMachine> librasteve_: Sorry, my intention is just to point out how interesting it is that 2 different code, written by 2 different people in 2 different times converge to some of the same ideas... my poor english might not have been enough to express that, sorry...

[18:45] <lizmat> .oO( it's hard to make things air-tight  :-)

[18:45] <discord-raku-bot> <librasteve> I am sure your English is better than my Portuguese

[18:46] <SmokeMachine> Ent√£o quer dizer que eu deveria estar falando em portugues aqui? :P

[18:47] <SmokeMachine> Sorry, just kidding...

[18:47] <SmokeMachine> But what I'm trying to say is that, it seems Air might be a good solution... :)

[18:48] <discord-raku-bot> <librasteve> yes - there is something remarkable that our ideas are the same - tbh with Air::Component I had the thought that I needed some way to componentize, but I was really struggling with how until I learned from Cromponent the main idea that methods could be routes

[18:50] <discord-raku-bot> <librasteve> my thinking for the Air::Functional side came originally from a liking for elmlang and the thought that raku is in fact a capable (but uncontrolling) functional language

[18:52] <discord-raku-bot> <librasteve> you are, of course, welcome to collaborate on Air - I am glad that you like it - but really it could use quite a lot of improvements (!)

[18:53] <discord-raku-bot> <librasteve> maybe if we ave the same ideas, they are good ones!

[18:53] <SmokeMachine> :)

[18:54] <SmokeMachine> thanks! I'll try to find some time to help on that... but now I'm very busy with Sourcing... and after that (talking about functional) I plan to go back to my functional data structures: https://github.com/FCO?tab=repositories&q=functional&type=&language=&sort=

[18:56] <SmokeMachine> and I also think I may find a way to merge EEL (https://github.com/FCO/EventExpressionLanguage) into Sourcing...

[18:57] <SmokeMachine> and also, at some point I'll need to migrate Red's map/grep/first blocks into RakuAST...

[18:57] *** shrewd left
[18:57] *** shrewd joined
[18:57] *** shrewd left
[18:57] *** shrewd joined
[18:57] <SmokeMachine> if anyoen would like to help on any of these... :)

[19:03] <tbrowder> lizmat: would a core mod to recognize trailing substrings as base indicators be feasible/considered?

[19:04] *** notna joined
[19:05] <lizmat> tbrowder: you mean something like https://raku.land/zef:lizmat/Slang::Subscripts ?

[19:08] <tbrowder> yes! i forgot about that! i haven‚Äôt looked at the code yet, but i‚Äôll bet a beer it could be in core

[19:16] <lizmat> for sure... but that's why it's a slang right now

[19:17] <tbrowder> after looking at it, i think my approach is less ‚Äúcorey@ but i would have to play with yr mod some‚Äîand will. i now mostly (nay, always) use ascii chars for input with the \x modifiers for non-ascii

[19:18] <discord-raku-bot> <melezhik.> o/ ‚Ä¶ I am going to write a post maybe on how Sparrow can replace sed/grep/awk - here is on of the things one can do with sparrow task checks - https://gist.github.com/melezhik/e7a3eee9dbb2ce58da8cdc58790131cb

[19:41] *** Sgeo joined
[19:48] <wayland76> melezhik: That sounds good!  Can you use the "tell" bot to send me the link when the time comes (if you happen to remember)?  

[19:50] *** MyNetAz left
[19:53] <discord-raku-bot> <librasteve> wayland76: just point your rss feed reader to https://planet.raku.org/

[19:55] <discord-raku-bot> <librasteve> SmokeMachine: I see that you are on a yak shave also ... don't forget to add Red Db migration ;-)

[19:59] <SmokeMachine> librasteve_: yes... there is also that...I have already spent so much time on that... I'm kinda taking a rest of that for now... :(

[20:00] <wayland76> Haha, I just categorised my projects according to step 1 at https://leaderforgood.com/never-finish-anything-syndrome/ but found I had to add another category (in addition to Dragons, Errands, and Mentors), and it was for Yak Shaving :) .  A lot of my projects seem to come back to Table/Tree oriented programming as the Yak Shave I need.  

[20:01] <wayland76> I also added a category for Mathoms -- projects I may get to someday, but may not.  

[20:01] <discord-raku-bot> <librasteve> i guess that's a pita - reason I mention is that when Cro + Red + Air goes viral, that will be important (wrt eg Django)

[20:05] *** MyNetAz joined
[20:06] <discord-raku-bot> <librasteve> wayland76: you have found your spiritual home

[20:07] <wayland76> I knew that when I was buying keyboards, and about 10 people here came out of the woodwork to discuss them :) 

[20:15] <jdv> i have a dygma defy

[20:15] <jdv> used to use a kinesis freestyle pro

[20:16] <wayland76> Thanks for proving my point :p 

[20:17] <SmokeMachine> about keyboards, I'm using this one: https://www.zsa.io/voyager with this map: https://configure.zsa.io/voyager/layouts/blKx7/latest/0

[20:17] <jdv> nice

[20:20] <[Coke]> i was super happy to get a keyboardio and I never use it. :|

[20:20] <jdv> used the kinesis for a decade or so then got frustrated with firmware limitations.  noticed the defy.  no regrets.  changed abput a year ago.

[20:20] <[Coke]> I should bring it to the con and offer it as a giveaway

[20:21] <wayland76> If we're doing this again, I have a ZSA Moonlander, but have discovered a) that I've never developed hand strain because I hold my hands in non-standard positions when using regular keyboards, and b) a lot of keyboards are designed for keyboard minimalists, and I'm a keyboard maximalist (ie. I want separate buttons for a) the infrequent but important keys, like "Play" and "Restore most recent closed tab", and for all the Raku symbols)

[20:21] <discord-raku-bot> <librasteve> maybe a golf trophy

[20:25] <jdv> i have 3 regular maps i toggle around.  and one special right hand only for palworld cause i mouse only left...

[20:26] <jdv> its fun.  not for everyone for sure.

[20:31] *** Aedil left
[20:34] *** notna left
[20:43] <Voldenet> librasteve: real benchmarks are useful only in case everything else is optimized, but the question is whether it's optimizable or not - in case of naive string concat tree, you're pretty much doing a lot more work compared to serving one static string

[20:44] <Voldenet> string allocation is cheap, but it's not free

[20:46] <Voldenet> and it's the sort of optimization that can be improved further

[20:47] <Voldenet> e.g. instead of transfering full strings, keep static references as polymer components, then instead of transferring 10kb of html, it's possible to serve something like `<static id=42><div>dynamic part</div><static id=43>`

[20:47] <Voldenet> or without polymer, htmx code can be slightly modified to support static fragments of html

[20:49] <discord-raku-bot> <librasteve> ... looks up polymer...

[20:50] <Voldenet> it would only work where instead of directly rendering `<div><div>blah</div></div>`, what would get rendered is `html("div", html("div", text({ "blah" }))`

[20:50] <Voldenet> more or less polymer lets you define html elements, so `static` becomes an actual element

[20:51] <Voldenet> that you can use

[20:52] <Voldenet> in fact, component tree would probably be something fairly simple at first: `class HtmlTag { has $.name; has %.attr; has @.inner; method HTML { ‚Ä¶ } }`

[20:52] <discord-raku-bot> <librasteve> okaay - my initial thoughts are (i) maybe someone wrote a lib for polymer and (ii) htmx and polymer compete for the same space, since I am "all in" on htmx not sure need two of these and (iii) look yes, I am cool with a lazy approach to rendering if preserves the API

[20:53] *** notna joined
[20:53] <Voldenet> defining components is not competing with htmx imo

[20:53] <Voldenet> since you can use both at the same time to reduce amount of js

[20:54] <Voldenet> htmx for reloading parts of the document, polymer for magic components missing in bare html

[20:54] *** notna left
[20:54] <discord-raku-bot> <librasteve> aha - lightbulb

[20:54] <discord-raku-bot> <librasteve> tx

[20:56] <discord-raku-bot> <librasteve> btw already have Air::Component with .id ...

[20:56] <Voldenet> if I understand Air::Base properly, the only thing that'd have to be changed

[20:57] <Voldenet> is that HTML should instead emit HtmlTag

[20:57] <Voldenet> that would have HTML method

[20:57] <discord-raku-bot> <librasteve> https://github.com/librasteve/Air/blob/9a505d979c0f1ee3fa56cc3a05d9d7fc3dea8291/lib/Air/Functional.rakumod#L32

[20:58] <Voldenet> the only thing I can't figure out yet is how raw text and dynamic should look in the template

[21:00] <Voldenet> so instead of `button( :class<hamburger>, :id<hamburger>, Safe.new: '&#9776;' );` there would be 

[21:00] <Voldenet> `button( :class<hamburger>, :id<hamburger>, raw('&#9776;') );`

[21:00] <Voldenet> and instead of `ul( :$!hx-target, :class<nav-links>, self.nav-items, do for @.widgets { li .HTML } );`

[21:01] <discord-raku-bot> <librasteve> yeah, but you are looking at the mezzanine level

[21:02] <Voldenet> and this is the part I can't figure out, it'd be nice to simply include the code, but it'd remove any further tree-level optimizations

[21:03] <Voldenet> react for example does map of elements with key, which is extremely slow and inelegant

[21:04] <discord-raku-bot> <librasteve> https://github.com/librasteve/Air-Play/blob/270467c93fd9e29877738040582fe2d0285c97c6/lib/Air/Play/Site03-Pages.rakumod#L41

[21:04] <discord-raku-bot> <librasteve> sorry I will write some docs tomorrow

[21:05] <Voldenet> Hmm, idk about `safe`, it could mean "this component adds safety layer to the text" or "consider this html safe"

[21:05] <Voldenet> raw would be more directly saying "this is a raw html"

[21:05] <discord-raku-bot> <librasteve> ^^ this wrt safe as a function (that does Safe.new...)

[21:06] <discord-raku-bot> <librasteve> yeah - i prefer raw ... guess too much rust

[21:06] <Voldenet> I know what it does though, maybe i'm nitpicking

[21:08] <Voldenet> hmm `ul( :$!hx-target, :class<nav-links>, self.nav-items, do for @.widgets { li .HTML } );`

[21:09] <Voldenet> could be `ul( :$!hx-target, :class<nav-links>, self.nav-items, map(@.widgets, li));` maybe

[21:09] <Voldenet> with custom multi sub map for components array

[21:09] <discord-raku-bot> <librasteve> anyway - I like the direction you have outlined - and i would like to rewrite to do that - but it would still be super helpful to see a short raku prototype of component tree you have in mind

[21:10] <Voldenet> I know, but I've realized that there's tons of edge cases I haven't thought of

[21:10] <Voldenet> and half-baked optimization that can't be applied in most common cases feels kind of sad

[21:10] <discord-raku-bot> <librasteve> yes multi sub makes sense .... so propagate callables up and then render all as one

[21:12] *** kylese left
[21:12] <Voldenet> what is also possible is to do something angular-like - emit a subroutine to call to mark piece of template as dynamic in relation to a variable

[21:13] <Voldenet> or rather, create that 'dynamic placeholder' for the template and pass it to the inner components, which would then be called as method

[21:13] *** jpn joined
[21:13] <Voldenet> but it sounds sufficiently complex

[21:14] <discord-raku-bot> <librasteve> sometimes code > english ;-)

[21:15] <Voldenet> and well, angular is fairly surprising compared to react before you get used to how weird it is to use

[21:15] <Voldenet> or solidjs, which uses similar concept

[21:17] *** kylese joined
[21:18] <discord-raku-bot> <librasteve> glad you know the ropes ... I have managed to avoid react/vue/angular ... but for Air to be interesting (as the anti-react) it needs to be good and pure

[21:18] *** kylese left
[21:20] <discord-raku-bot> <librasteve> sorry must sleep

[21:23] *** kylese joined
[21:29] *** jpn left
[21:32] <tbrowder> lizmat: Slang::Subscript is different from my use. my use add the subscripts to the number object itself (as part of th

[21:32] <tbrowder> *the string

[21:32] <SmokeMachine> So, are you planing to ‚Äúleak‚Äù air to client side, or have I misunderstood the conversation?

[21:33] <tbrowder> but i'm still working on its implementation

[21:35] <SmokeMachine> librasteve_, Voldenet: ^^

[21:37] <Voldenet> SmokeMachine: Not directly a plan, just a possibility to optimize things further

[21:39] <Voldenet> with components having id with static trees, there's no even need to re-render whole static trees of components

[21:39] <SmokeMachine> If doing that, I would try to do that with Raku itself on the browser‚Ä¶ :)

[21:40] <Voldenet> Hell, sufficiently described template ((‚Ä¶props) -> tree) could directly compile

[21:41] <SmokeMachine> If I remember it correctly, on MemoizedDOM I had done the separation of dynamic and static parts by memoizing the static one‚Ä¶

[21:41] <Voldenet> to any sort of component tree, including js

[21:46] <Voldenet> i'm not sure about running raku directly in the browser

[21:47] <SmokeMachine> Why not?

[21:47] <Voldenet> at least for html component tree rendering

[21:48] <Voldenet> because lag from conversing between raku and js might be substantial

[21:50] <SmokeMachine> I think, on memoizedDOM example, the only really slow part is the compiling part‚Ä¶ but if compiling it to js before deploying, I think it would be ok, no?

[21:51] <Voldenet> yeah, that's what I thought of

[21:53] <SmokeMachine> So, that could be written in Raku, right?

[21:53] <Voldenet> yeah, if it was precompiled js directly served, it wouldn't be any problem

[21:54] <SmokeMachine> Yes, That‚Äôs what I meant‚Ä¶ :)

[21:54] <Voldenet> of course, it'd still need some kind of templating system, because MemoizedDOM is using vanilla-js

[21:54] <Voldenet> or rather vanilla raku

[21:55] <Voldenet> but with proper templating, I can see that document.createElement could be used directly instead of rendering things to html

[21:55] <SmokeMachine> Why do you need a template system?

[21:55] <Voldenet> for complex applications, naturally

[21:56] *** jpn joined
[21:57] <SmokeMachine> If I remember it well, memoizeddom caches the elements and only changes the dynamic parts‚Ä¶

[21:57] <Voldenet> `map(@.users, div { text(.name) })` is sufficiently easier to write than `for @.users do { $!document.createElement("div"); ‚Ä¶`

[21:59] <SmokeMachine> Like this? https://github.com/FCO/MemoizedDOM/blob/master/examples/todo/App.pm6#L21

[22:00] <Voldenet> sort of, but `do for @!todos` implies that reference identity is being used

[22:01] *** jpn left
[22:01] <SmokeMachine> It could be a map too‚Ä¶

[22:03] <Voldenet> with MemoizedDOM the biggest problem is that with only ~100 items it'd start getting slow

[22:03] <Voldenet> so, for mapping it'd require additional special data structures

[22:03] <Voldenet> and it'd push the whole framework into vue direction

[22:04] <Voldenet> where you have observed arrays for handling .push

[22:05] <Voldenet> in htmx case, you probably wouldn't have such problem, because every item could have its route

[22:06] <SmokeMachine> Just to make it clear, I‚Äôm not suggesting using memoizeddom, but something similar‚Ä¶ it‚Äôs 7 years old‚Ä¶ but I think it has some interesting things in that that could be used‚Ä¶

[22:08] <Voldenet> yeah, it's the I'd prefer over htmx

[22:08] <Voldenet> s/the/the approach/

[22:09] <Voldenet> but htmx has good sides - you can have whole state in server's memory and security is not that big of a concern

[22:10] <Voldenet> it's faster to create something working in htmx, but maybe more pain to test and debug

[22:15] <Voldenet> either way, clear syntax for rendering tree and defining static/dynamic parts on the raku level is something that could be usable in tech-agnostic way

[22:15] <Voldenet> `class Element` wouldn't care if `sub JS-ELEMENT { $*document.createElement(‚Ä¶) }` or `sub HTML { ‚Ä¶ }` gets called

[22:16] *** euandreh joined
[22:17] <Voldenet> I suppose having one templating system for both cases would be pretty cool, but idk if it's realistic

[22:18] <SmokeMachine> I really like htmx‚Ä¶

[22:28] *** jpn joined
[22:33] *** jpn left
[22:50] *** wayland joined
[22:50] *** wayland76 left
[22:59] *** jpn joined
[23:01] *** human_blip left
[23:03] *** human_blip joined
[23:10] *** jpn left
[23:11] *** jpn joined
[23:19] *** stanrifkin joined
[23:22] *** librasteve_ left
