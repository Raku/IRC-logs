[00:18] *** kst left
[00:28] *** kst joined
[00:44] *** LainExperiments left
[00:56] *** dano6 joined
[00:58] *** xelxebar_ joined
[01:00] *** perryprog_ joined
[01:00] *** zupss joined
[01:01] *** ky2 joined
[01:04] *** dano left
[01:04] *** xelxebar left
[01:04] *** dano6 is now known as dano

[01:04] *** zups left
[01:04] *** perryprog left
[01:04] *** ky left
[01:04] *** dfarnsworth left
[01:04] *** dfarnsworth joined
[01:08] *** LainExperiments joined
[01:18] *** LainExperiments left
[01:47] <discord-raku-bot> <antononcube> @guifa Well, if you are presenting a different talk each time it won't be that bad...

[01:49] *** LainExperiments joined
[01:56] *** LainExperiments left
[10:51] <lizmat> melezhik: thanks, back online now...  apparently IRC::Client still has one failure mode it does not recover from  :-(

[11:00] *** melezhik joined
[11:00] <melezhik> lizmat: welcome 

[11:00] <melezhik> weekly: https://dev.to/melezhik/simple-find-in-source-code-with-tomtit-and-sparrow-312

[11:00] <notable6> melezhik, Noted! (weekly)

[11:01] <melezhik> yet another sparrow 1 minute read stuff )

[11:01] <melezhik> ups - wrong link

[11:01] <melezhik> weekly: https://dev.to/melezhik/useful-terminal-plugins-to-build-golang-code-gj0

[11:01] <notable6> melezhik, Noted! (weekly)

[11:01] <melezhik> here we go 

[11:02] <lizmat> he.. thanks  :-)

[11:03] <melezhik> weekly: https://dev.to/melezhik/developing-a-simple-sparrow-plugin-with-raku-and-bash-51g0

[11:03] <notable6> melezhik, Noted! (weekly)

[11:03] <melezhik> so three sparrows - are enough )))

[11:19] *** melezhik left
[14:04] *** ryoskzypu left
[14:05] *** ryoskzypu joined
[14:23] *** MoC left
[15:28] *** abraxxa-home joined
[15:35] *** Sgeo joined
[16:04] *** abraxxa-home left
[16:24] *** Xliff left
[17:47] <lucs> m: print ~"/baz/foo/..".IO.resolve

[17:47] <camelia> rakudo-moar 545c9e4e0: OUTPUT: «/baz/foo/..»

[17:47] <lucs> :(

[17:47] <lizmat> and if the path exists ?

[17:48] <lucs> Trying...

[17:48] <lucs> In that case it works.

[17:49] <lucs> (I'll rethink my usage.)

[17:49] <lizmat> "Returns a new IO::Path object with all symbolic links and references to the parent directory (..) resolved. This means that the filesystem is examined for each directory in the path, and any symlinks found are followed."

[17:49] <lizmat> from the docs

[17:50] <lizmat> lucs: perhaps you want https://docs.raku.org/routine/cleanup

[17:50] <lizmat> m: print ~"/baz/foo/..".IO.cleanup

[17:50] <camelia> rakudo-moar 545c9e4e0: OUTPUT: «/baz/foo/..»

[17:51] <lizmat> maybe not :-(

[17:53] <lucs> Interesting. I now understand why 'resolve' wouldn't work, but it appears that 'cleanup' should have...

[17:53] *** human-blip left
[17:55] *** human-blip joined
[17:55] <lizmat> I think cleanup is not supposed to remove ..   at appears from the doc

[17:57] <lucs> I wonder why not?

[17:57] * lizmat as well  :-)

[17:57] <lucs> :-)

[18:07] <ugexe> probably because you cant know what ../ points to

[18:08] <ugexe> and thus you dont know if it creates "a canonical representation of the invocant path"

[18:08] <ugexe> you can do that with ./

[18:10] <ugexe> the funny part is I think on Windows it actually would be fine to assume ../ means "remove the previous path part"

[18:16] <ugexe> essentially "foo/bar/../baz".IO.slurp must always return the same data as "foo/bar/../baz".IO.cleanup.slurp, and just removing path parts without checking them (i.e. resolve) would break that

[18:51] <lucs> Ah, makes sense.

[19:19] *** LainExperiments joined
[19:57] *** Aedil left
[20:07] *** yewscion joined
[21:21] *** LainExperiments left
[22:06] *** coleman left
[22:07] *** coleman joined
[22:30] *** jpn joined
[22:48] *** coleman left
[22:48] *** coleman joined
[22:51] *** nort joined
[22:59] *** jpn left
[23:28] *** nort left
[23:39] *** Xliff joined
[23:40] <Xliff> I'm trying to see if I can act on Cro internal exceptions when I am running a Cro server. Say an exception of type X::Cro::HTTP::Router::OnlyInHandler is thrown. Is there any way for me to act on that at the application level?

[23:41] <Xliff> Near as I can tell, it looks like Cro handles those internally and I can't even get a notice that such has occurred at the application logic level.

[23:44] <Xliff> *SMACK* -- there is Cro::UnhandledErrorReporter.... thanks anyways!

