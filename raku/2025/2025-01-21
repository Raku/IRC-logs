[01:41] *** guifa left
[01:53] *** zetaaaa joined
[02:28] *** Aedil joined
[02:31] *** hulk joined
[02:32] *** kylese left
[03:13] *** yewscion_ joined
[03:15] *** hulk left
[03:15] *** kylese joined
[03:15] *** yewscion left
[03:30] *** zetaaaa left
[04:26] *** yewscion_ left
[04:26] *** yewscion_ joined
[04:38] *** yewscion_ left
[06:43] *** cm joined
[06:44] *** cm left
[07:05] *** cm joined
[07:09] *** [Coke] left
[07:11] *** [Coke] joined
[07:18] *** Sgeo_ left
[07:19] *** cm left
[07:20] *** cm joined
[07:39] *** cm left
[07:39] *** cm joined
[09:04] *** human-blip left
[09:06] *** human-blip joined
[09:09] *** dakkar joined
[10:09] *** sena_kun joined
[10:33] *** ryoskzypu left
[10:49] *** ryoskzypu joined
[11:01] *** Inline joined
[12:35] <xinming> librasteve: I'm not sure when List will be flatten, So I had a habit add | at the front of Positional, Today, I read https://docs.raku.org/language/list again, When I read "list or arrays with a single element will be flattened", Now I found the answer.

[12:40] <lizmat> xinming: I wonder what you think about the semantics offered by >>>  in https://raku.land/zef:lizmat/OneSeq

[12:49] <xinming> I think the middle letter should be changed to more "list" relted op. :-)

[12:50] <xinming> One of the letter be   >>,  or  <<,

[12:50] <xinming> Or maybe  ,>> ,<< 

[12:50] <timo> (>^_^)> <(^_^<)

[12:50] <xinming> Everything  >>>  makes me feel it's like sending data to other var

[12:51] <xinming> timo: Your version is good too

[12:53] <timo> time to standardise support for animated "stickers" so we can have patrick take one variable and put it into another variable

[12:54] <xinming> It's something like,    my @merged = [@a1, @a2];    my $merged = @a1 <,< @a2;

[12:54] <timo> (animated stickers outside the standard set require a Raku Turbo subscription)

[12:55] <lizmat> thanks for your feedback  :-)

[12:57] <xinming> or   my $merged = @a1 <<, @a2;

[12:57] <lizmat> m: my @a = ^3; dd @a <<, @a

[12:57] <camelia> rakudo-moar b4d798329: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing << or >>‚ê§at <tmp>:1‚ê§------> my @a = ^3; dd @a <<,<HERE> @a‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[12:58] <xinming> But << is used for qutoed list construct

[12:58] <xinming> so  <,<  is the best bet

[12:58] <lizmat> m: my @a = ^3; sub infix:¬´<<,¬ª(|c) { dd c }; dd @a <<, @a

[12:58] <camelia> rakudo-moar b4d798329: OUTPUT: ¬´\([0, 1, 2], [0, 1, 2])‚ê§Nil  = Nil‚ê§¬ª

[12:59] <lizmat> hmmm

[12:59] <xinming> << is used as quoting construct already, So I personally think, <<,  should be "quoting" like actions

[13:01] <xinming> OneSeq is special version of concat for list, So need something to make it feel like Positional op

[13:01] <lizmat> but the whole point of OneSeq is that it does *not* produce a Positional, but a Seq

[13:02] <lizmat> (without caching, and hopefully without positional bindfailover

[13:02] <lizmat> :q

[13:07] <discord-raku-bot> <librasteve> lizmat: very nice OneSeq ... any plans to put that in core?

[13:10] <discord-raku-bot> <librasteve> on the name for the op, well I quite like >>> but I do have the feeling that it could be used for something more common, xinming idea of >,> seems pretty good to me (yes I know its not making a List, but the idea of involving the , and not getting too close to the double quotes is nice

[13:10] <discord-raku-bot> <librasteve> I am ashamed to say I wrote this line of code has $.url-path = ($!base ?? "$!base/" !! '') ~ "todo";

[13:11] <discord-raku-bot> <librasteve> I find it very ugly ... please can someone give me a hint on how to do this more elegantly?

[13:11] <lizmat> no plans as such, just testing the waters

[13:12] <lizmat> I recently separated the ops from the underlying functionality, to make it easier to select what you want

[13:37] *** guifa joined
[14:33] <discord-raku-bot> <nahita3882> how about less elegant üòê "{$!base || ""}/todo".substr(!$!base)

[14:34] <discord-raku-bot> <nahita3882> !$! appearing is kind of cool though

[14:54] <discord-raku-bot> <_____________________________._.> ($!base || Empty, "todo").join: "/" maybe?

[14:56] <discord-raku-bot> <librasteve> hmmm ‚Ä¶ both good ideas ‚Ä¶ i was also wondering if there is an IO path kind of operation (prepend parent or something)

[15:10] <discord-raku-bot> <librasteve> here's my new try do with $base {"$_/"} ~ 'todo'

[15:23] <ugexe> $url-path = join '/', $!base, 'todo';

[15:24] <ugexe> i guess that isn't sufficient either... needs a grep or some such

[15:26] <ugexe> $url-path = join '/', grep *.so, $!base, 'todo';

[15:49] *** lizmat left
[16:28] <discord-raku-bot> <librasteve> tricky

[17:34] *** dakkar left
[17:48] *** hudo__ joined
[17:48] *** sena_kun left
[17:49] *** sena_kun joined
[17:50] *** gabiruh left
[17:50] *** gabiruh joined
[17:51] *** ecocode left
[17:51] *** sivoais left
[17:51] *** lizmat joined
[17:51] *** tadzik left
[17:51] *** mst left
[17:51] *** hudo_ left
[17:51] *** broquaint left
[17:51] *** elcaro left
[17:51] *** avar left
[17:51] *** mst joined
[17:51] *** lizmat left
[17:52] *** avar joined
[17:52] *** tadzik joined
[17:52] *** sivoais joined
[17:52] *** broquaint joined
[17:52] *** elcaro joined
[17:53] *** lizmat joined
[17:56] *** ecocode joined
[18:19] *** tadzik left
[18:19] *** tadzik joined
[18:37] *** ramman left
[18:40] *** [Coke] left
[20:11] *** Aedil left
[21:21] *** cm left
[22:32] *** bdju left
[22:33] *** bdju joined
[23:04] *** sena_kun left
[23:20] *** Sgeo joined
