[00:00] *** Guest11 joined
[00:00] *** Guest11 left
[00:18] *** derpydoo left
[00:51] *** Aedil joined
[01:31] *** hulk joined
[01:32] *** kylese left
[01:49] <perryprog> I just found out about Draig! That's so frickin' awesome!!

[01:49] <perryprog> (For the unaware https://dev.to/finanalyst/creating-a-new-programming-language-draig-503p)

[02:15] *** hulk left
[02:15] *** kylese joined
[03:36] *** stanrifkin_ joined
[03:39] *** stanrifkin left
[03:45] *** kylese left
[03:48] *** kylese joined
[04:20] *** oodani left
[04:21] *** oodani joined
[04:47] *** crnlskn joined
[06:02] *** kylese left
[06:08] *** kylese joined
[07:31] *** wayland76 joined
[07:32] *** wayland left
[08:25] *** lichtkind joined
[08:30] *** andinus left
[08:32] *** andinus joined
[10:34] *** phogg left
[10:47] *** skyenet_ joined
[10:47] *** pierrot_ joined
[10:47] *** Geth left
[10:47] *** Geth joined
[10:52] *** wayland76 left
[10:52] *** oodani left
[10:52] *** ACfromTX left
[10:52] *** RakuIRCLogger left
[10:52] *** sorenson left
[10:52] *** skyenet left
[10:52] *** japhb_ left
[10:52] *** pierrot left
[10:52] *** lizmat left
[10:52] *** jdv left
[10:52] *** sorenson_ is now known as sorenson

[10:52] *** skyenet_ is now known as skyenet

[10:53] *** japhb joined
[10:53] *** jdv joined
[10:54] *** phogg joined
[10:57] *** lizmat_ left
[10:57] *** lizmat joined
[10:59] *** ACfromTX joined
[11:15] *** Sgeo left
[11:30] *** eseyman left
[11:40] *** manu_ joined
[11:41] *** manu_ is now known as eseyman

[13:14] <Voldenet> variants of translated raku are ok for reading, but it's going to be confusing to write real world code with this ‚Äì even if I wanted to use TLs for any given code I'd never know whether this particular part should be translated or not

[13:21] <Voldenet> like "is `say/print/await`" translated or not, and when using modules it could even cause collisions in sub names in the worst case

[13:39] <disbot> <librasteve> Voldenet: i agree ‚Ä¶ nevertheless I think there is fantastic educational value in getting kids to learn to code in their mother tongue ‚Ä¶ especially with non Latin char sets

[13:53] <disbot> <antononcube> @librasteve I am not sure. üôÇ There some experiments with that in Bulgaria and Russia during the socialistic times. For the children interested in programming that didn't matter.

[13:54] <disbot> <antononcube> Again, this was 40+  years ago. The current cohort of children (in those countries) might have different inclinations.

[13:58] <disbot> <antononcube> I meet similar feedback with my DSLs -- I thought using your native language to specify machine learning or data wrangling workflows would be preferable. Turned out the target DSL users would prefer English and are much more interested in cross-programming-language translations. (E.g. from Python to R or Raku.) These are "grown up" data scientists, though, not children.

[14:07] <tbrowder> hi, please tell me again how to use test "dies-ok" from a realistic sub inside a module. the docs example works with the "real" sub inside the test code. how do i "throw" the exception from a sub in a distri so it does the right thing? i still say that part of the docs is very misleading for us regular users. it needs to at least add a more realistic example.

[14:09] <tbrowder> if it's not possible, at least show the caveats.

[14:15] <Voldenet> the language used in programming is very synthetic anyway, perhaps translation is not that helpful

[14:17] <lizmat> Voldenet: please note that any code in localization X can be machine translated to localization Y using the RakuAST tree

[14:17] <tbrowder> and what's really mind-bogling is changing to lives-ok for the real test with a die statement. the whole try/catch thing is too complex for me to grok

[14:19] <tbrowder> *statement passes...

[14:20] <Voldenet> tbrowder: for real life use case i'd suggest using throws-like

[14:21] <Voldenet> m: class E is Exception { }; sub parse($str) { die E.new if $str ~~ "invalid" }; use Test; throws-like({ parse("invalid") }, E) # otherwise any exception will be "OK"

[14:21] <camelia> rakudo-moar a988e79f9: OUTPUT: ¬´# Subtest: did we throws-like E?‚ê§    1..2‚ê§    ok 1 - code dies‚ê§    ok 2 - right exception type (E)‚ê§ok 1 - did we throws-like E?‚ê§¬ª

[14:23] <Voldenet> m: class E is Exception { }; sub parse(Str $str) { die E.new if $str ~~ "invalid" }; use Test; throws-like({ my $n = 42; parse($n) }, E) # this doesn't throw right exception - dies-ok would not even call tested method

[14:23] <camelia> rakudo-moar a988e79f9: OUTPUT: ¬´# Subtest: did we throws-like E?‚ê§    1..2‚ê§    ok 1 - code dies‚ê§    not ok 2 - right exception type (E)‚ê§    # Failed test 'right exception type (E)'‚ê§    # at SETTING::src/core.c/Exception.rakumod line 65‚ê§    # Expected: E‚ê§    # Got:      ‚Ä¶¬ª

[14:23] <tbrowder> erg, that's part of the problem with the docs, the various tests seem to be listed in a random order without the *likes* in a logical sequence...

[14:25] <tbrowder> it's burned in my memory the 2: lives-ok, dies-ok

[14:27] <tbrowder> sorry: use-ok, dies-ok, lives-ok

[14:33] <tbrowder> in both and dies and lives it says does and does not throw an exception and uses "die" as the example of the example of the exception. am i wrong as a naieve user to expect my code's use of "die" to work in all cases?

[14:34] <tbrowder> *both cases...

[14:36] <[Coke]> 40+ years ago, most kids didn't have easy access to computers.

[14:37] <[Coke]> Hell, I was 13, was probably on my second computer at that time, and very few kids even when I was in HS had a computer. (me and some of my nerd friends)

[14:45] <tbrowder> i realize we probably can't change things now, but surely we could add two new standard tests to handle the simple die or no die case. maybe add an option to the existing ones or 2 new tests. something like "lives-always" (no "die" used anywhere) and "dies-always" (one "die" used during execution).

[14:50] <lizmat> antononcube  Raku localizations are not really intended for dyed in the wool people  :-)

[15:08] <tbrowder> i just filed a new problem-solving issue

[15:15] <disbot> <antononcube> @Coke Correct, that is why I mentioned ‚Äú40+ years.‚Äù We programmed on ‚Äúbig machines‚Äù using perfo-cards. We also had personal computers access in school.

[15:15] <disbot> <antononcube> Again, at the time being interested in programming was very self-selecting.

[15:16] <disbot> <antononcube> Hence, the actual keywords of the programming language did not matter much.

[15:18] <crnlskn> personally, without perl (around 2005 maybe?) i would have glanced off of programming; the "it's like a natural language" aspect did a lot for me, and while in my case it wasn't about the words but about the depth of grammar i can see newer generations having an easier time even earlier if the language is a native language

[15:18] <crnlskn> of course this might lead to some problems with some people who then struggle to learn the "canonical" languages, but as lizmat said, everything in the AST can be machine translated

[15:20] <disbot> <antononcube> Well, Perl & Raku are made by a linguist.

[15:22] <disbot> <antononcube> Let me invert the (paraphrased) statement of Larry Wall: ‚ÄúSo what of a programming language is complicated. You learn it and then you use it.‚Äù

[15:23] <disbot> <antononcube> If you smart enough to program the keywords of the programming language do not matter.

[15:24] <disbot> <antononcube> And agree, that last statement is more valid for earlier generations / cohorts.

[15:26] <disbot> <antononcube> And with LLMs it really doesn‚Äôt matter what is the natural language of the programming language. You can always get comments, explanations, or translations of whatever code fragments in whatever natural language.

[16:08] <disbot> <librasteve> Interesting fb on educational native language programming. From a naive pov, I would say this is a non existent "marketplace" right now. For most educators they don't offer it and for most students they dont want it. With any market you can Create, Disclocate, Participate, Adbicate. The only viable one for raku is to dislocate, since the others cost real $$$. - ie engage a new emerging sector such as native langugae coding as a

[16:08] <disbot> new segment of english language coding.

[16:09] <disbot> <librasteve> Since raku has some unique strengths in this area, I would say it is a long shot, but if we can identify some interest would be a good place to differentiate from Python.

[16:12] <disbot> <librasteve> Draig is probably a good bet since there is a lot of pride in Welsh and there is a government mandated minimum of Welsh language teaching. ANyway just a thought in the hunt for emerging market niches that raku could enter and defend.

[16:21] <disbot> <antononcube> Just saw that on LinkedIn: üôÇ ü§ñ

[16:21] <disbot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1413922066872270879/1757143981761.png?ex=68bdb10a&is=68bc5f8a&hm=0a80451c8e284a0f6efafcff94874ea7c58ead6822899f505811fd61144c12f1&

[16:31] *** crnlskn left
[16:44] <disbot> <jubilatious1_98524> s/of/if/

[16:45] *** stanrifkin_ left
[16:45] *** stanrifkin_ joined
[16:46] <disbot> <librasteve> lol - here it is in raku

[16:46] <disbot> <librasteve> https://cdn.discordapp.com/attachments/633753286209699870/1413928318398369803/Screenshot_2025-09-06_at_17.46.02.png?ex=68bdb6dc&is=68bc655c&hm=4172047e3dba7a5894414a985098f02b6bec2f193f933561cc9f81e5060d82f3&

[16:52] <Geth> ¬¶ raku.org: librasteve self-assigned Minor style nits on new site https://github.com/Raku/raku.org/issues/232

[16:54] *** crnlskn joined
[17:02] <disbot> <librasteve> the crag version is (of course) in a repl and applies physical units checking / coercion ... I can make a small improvemnet to crag [https://github.com/librasteve/raku-App-Crag/issues/17]

[17:03] <disbot> <librasteve> oddly I moved from inline code to the repl ... but maybe the zeitgeist is to do it inline

[17:06] *** human-blip left
[17:08] *** human-blip joined
[17:16] *** pierrot_ left
[17:16] *** pierrot joined
[17:39] <coleman> librasteve: new raku.org is live

[17:39] <perryprog> oh dang

[17:39] <perryprog> time to go post on HN

[17:39] <coleman> please no

[17:39] <perryprog> :P

[17:40] <coleman> wait for the newsletter lol

[17:40] <perryprog> but my imaginary internet points!

[17:40] <perryprog> also that butterfly background rules

[17:40] <perryprog> also the whole thing rules

[17:40] <perryprog> rare instance of background image that doesn't massively ruin text contrast

[17:41] <coleman> auto-deploy should work;

[17:43] <coleman> if something screws up, review container images correlated to builds in GH https://quay.io/repository/chroot.club/proto-25?tab=tags

[17:43] <coleman> container has a funny name right now. we can rename it later. Keep pushing to that repo.

[18:24] *** melezhik joined
[18:24] <melezhik> .

[18:31] <Geth> ¬¶ raku.org/dev: 520f9c7e21 | (Coleman McFarland)++ | scripts/cibuild.sh

[18:31] <Geth> ¬¶ raku.org/dev: Start pushing to quay.io/chroot.club/raku-org-website container repo

[18:31] <Geth> ¬¶ raku.org/dev: review: https://github.com/Raku/raku.org/commit/520f9c7e21

[18:43] <disbot> <librasteve> coleman: you rock!

[18:47] <disbot> <librasteve> perryprog: appreciate the feedback - no doubt some wrinkles - please post any issue at https://github.com/Raku/raku.org

[18:48] <perryprog> ah, was going to ask (then I forgot to). I do have a few thoughts. I assume you'd prefer separate issues for each?

[18:48] <Geth> ¬¶ raku.org/dev: 107f55bab9 | (Coleman McFarland)++ | 2 files

[18:48] <Geth> ¬¶ raku.org/dev: Update CI to only push on commits to main

[18:48] <Geth> ¬¶ raku.org/dev: review: https://github.com/Raku/raku.org/commit/107f55bab9

[18:49] <Geth> ¬¶ raku.org: dontlaugh++ created pull request #233: Promote new site to main branch

[18:49] <Geth> ¬¶ raku.org: review: https://github.com/Raku/raku.org/pull/233

[18:56] <disbot> <librasteve> yes please

[19:04] <perryprog> Sounds good!

[19:06] *** Sgeo joined
[19:12] <perryprog> librasteve, done, hope you don't mind the nitpicks! :)

[19:12] <Geth> ¬¶ raku.org/main: 22 commits pushed by librasteve++, (Coleman McFarland)++

[19:12] <Geth> ¬¶ raku.org/main: review: https://github.com/Raku/raku.org/compare/ce05807f1a64...b1eb89739e34

[19:13] <perryprog> Also I did a quick check with a screenreader and the code blocks felt a /little/ weird but not horribly so. Other than that it was very navigable. (I was using VoiceOver.) Props for that!

[19:14] <perryprog> (I also have no idea how the code blocks could be improved)

[19:14] *** apac joined
[19:16] *** apac left
[19:16] *** apac joined
[19:18] <disbot> <librasteve> no problem - will get to them shortly

[19:36] *** marcprux joined
[19:55] <disbot> <.landyacht.> Does anyone know if Buf is threadsafe? Specifically I'm looking to provide my own buf8 object to IO::Socket::Async.Supply() and wondering if shifting elements off the beginning while the socket is writing to that Buf will cause any weirdness

[19:56] <lizmat> yes, it would

[19:57] <lizmat> pushing to a buf / array may need to allocate more space for it, and thus move it in memory

[19:58] <lizmat> perhaps you need a Channel?  https://docs.raku.org/type/Channel

[19:59] <lizmat> or https://raku.land/zef:raku-community-modules/Concurrent::Queue

[19:59] <lizmat> or https://raku.land/zef:lizmat/Concurrent::PriorityQueue

[19:59] <disbot> <.landyacht.> Hm, yeah, Channel would probably work - tap the Supply and have the reactor just shove everything onto the Channel

[20:02] <Geth> ¬¶ raku.org: coke self-unassigned Perl¬†6 at a glance https://github.com/Raku/raku.org/issues/119

[20:05] *** jmcgnh left
[20:08] <Geth> ¬¶ raku.org: coke assigned to librasteve Issue bad urls https://github.com/Raku/raku.org/issues/240

[20:16] <Geth> ¬¶ raku.org/coke/readme: 8bb0004ed4 | (Will Coleda)++ | README.md

[20:16] <Geth> ¬¶ raku.org/coke/readme: Add git fsck warning to readme.

[20:16] <Geth> ¬¶ raku.org/coke/readme: 

[20:16] <Geth> ¬¶ raku.org/coke/readme: Closes #50

[20:16] <Geth> ¬¶ raku.org/coke/readme: review: https://github.com/Raku/raku.org/commit/8bb0004ed4

[20:16] <Geth> ¬¶ raku.org: coke++ created pull request #241: Add git fsck warning to readme.

[20:16] <Geth> ¬¶ raku.org: review: https://github.com/Raku/raku.org/pull/241

[20:19] <Geth> ¬¶ raku.org/coke/maths: a5b27f1e43 | (Will Coleda)++ | lib/Org/Home.rakumod

[20:19] <Geth> ¬¶ raku.org/coke/maths: Fix math typo

[20:19] <Geth> ¬¶ raku.org/coke/maths: 

[20:19] <Geth> ¬¶ raku.org/coke/maths: Part of # 232

[20:19] <Geth> ¬¶ raku.org/coke/maths: 

[20:19] <Geth> ¬¶ raku.org/coke/maths: jubilatious1++

[20:19] <Geth> ¬¶ raku.org/coke/maths: review: https://github.com/Raku/raku.org/commit/a5b27f1e43

[20:20] <Geth> ¬¶ raku.org: coke++ created pull request #242: Fix math typo

[20:20] <Geth> ¬¶ raku.org: review: https://github.com/Raku/raku.org/pull/242

[20:23] <Geth> ¬¶ raku.org: coke assigned to librasteve Issue README has sections leftover from dev https://github.com/Raku/raku.org/issues/243

[20:31] <Geth> ¬¶ raku.org: librasteve self-assigned Dashboard articles have weird header styling https://github.com/Raku/raku.org/issues/236

[20:34] *** melezhik left
[20:48] *** marcprux left
[21:24] *** DavidSch__ joined
[21:48] *** apac left
[22:48] *** crnlskn left
[23:00] *** DavidSch__ left
[23:02] *** wayland76 joined
[23:02] *** wayland left
[23:18] <tbrowder> .tell lizmat see my new repo with the "bad" dies-ok test at <https://githun

[23:18] <tellable6> tbrowder, I'll pass your message to lizmat

[23:19] <tbrowder> at <https://github.com/tbrowder/PB-Lottery/bad/>

