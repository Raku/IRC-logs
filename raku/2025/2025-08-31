[00:31] *** lichtkind left
[01:35] *** hulk joined
[01:36] *** kylese left
[01:37] *** RandalSchwartz joined
[01:37] *** RandalSchwartz left
[02:15] *** hulk left
[02:15] *** kylese joined
[03:50] *** stanrifkin joined
[03:52] *** stanrifkin_ left
[04:39] <disbot8> <simon_sibl> is there a more efficient way to do this ?

[04:39] <disbot8> <simon_sibl> my @jobs = @str_jobs.map({my %h; %h<title submit process priority> = .split(','); %h});

[04:39] <disbot8> <simon_sibl> basically splitting a string by "," and add the field in a hashmap

[05:09] *** Guest81 joined
[05:10] *** Guest81 left
[05:36] *** bd3i left
[05:36] *** bd3i joined
[05:39] *** Aedil joined
[05:41] *** kylese left
[05:42] *** kylese joined
[07:16] *** Aedil left
[07:21] *** japhb left
[07:21] *** japhb joined
[07:28] *** librasteve_ joined
[07:28] <disbot8> <librasteve> my first idea is to make a sub vv

[07:31] <librasteve_> https://www.irccloud.com/pastebin/wg6riNEj

[07:31] <tellable6> 2025-08-29T23:18:53Z #raku <wayland76> librasteve Where should I have logged this ticket?  https://github.com/Raku/doc-website/issues/463

[07:32] *** japhb left
[07:33] *** japhb joined
[07:34] <disbot8> <librasteve> then I put it back together like this (since map takes a Callable anyway)...

[07:34] <disbot8> <librasteve> my @jobs = @str_jobs.map: { <title submit process priority> Z=> .split(',') };

[07:35] <disbot8> <librasteve> oops - need %() to make the Hash

[07:35] <disbot8> <librasteve> my @jobs = @str_jobs.map: { %( <title submit process priority> Z=> .split(',') ) };

[07:36] <Voldenet> simon_sibl: don't make a hash in the first place, use the array directly

[07:36] <Voldenet> if by efficient you mean "fast"

[07:46] <disbot8> <simon_sibl> looks good thanks ! indeed cleaner xD

[07:47] <disbot8> <simon_sibl> I meant a cleaner way, easier to read xD üôè

[07:47] <disbot8> <simon_sibl> array are more efficient but not easy to follow in the code

[07:50] *** human-blip left
[07:52] *** human-blip joined
[08:00] *** Sgeo_ joined
[08:01] *** hudo_ joined
[08:01] <Voldenet> heh, not necessarily, there are ways around it

[08:02] <Voldenet> you could make a header first and then return object that would access header first and array later

[08:03] *** phogg` joined
[08:03] *** kjp left
[08:03] *** avar left
[08:03] *** phogg left
[08:03] *** jdv left
[08:03] *** hudo__ left
[08:04] *** Sgeo left
[08:04] *** broquaint left
[08:05] *** broquaint joined
[08:06] *** kjp joined
[08:07] *** rba_ joined
[08:07] *** rba left
[08:07] *** rba_ is now known as rba

[08:09] <Voldenet> m: my @str_jobs = <aaa,2,proc1,high bbb,3,proc2,low>; sub make-header(*@f) { my %i = @f.antipairs; class X { has $.v; method AT-KEY($k) { $!v[%i{$k}] }}; return -> *@v { X.new(:@v) } }; my &make-job = make-header <title submit process priority>; my @jobs = @str_jobs.map: { make-job(.split(',')) }; .<title>.say for @jobs;

[08:09] <camelia> rakudo-moar d370e0513: OUTPUT: ¬´aaa‚ê§bbb‚ê§¬ª

[08:10] *** avar joined
[08:10] <Voldenet> it may seem long, but array to job mapping is not that long

[08:10] <Voldenet> > my &make-job = make-header <title submit process priority>; my @jobs = @str_jobs.map: { make-job(.split(',')) };

[08:10] *** jdv joined
[08:11] <Voldenet> %(‚Ä¶ Z=> ‚Ä¶) solution is a lot easier to read though

[08:13] <Voldenet> you could get it shorter

[08:13] <Voldenet> my @jobs = @str_jobs.map: { %=<title submit process priority> Z .split(',') };

[08:15] <Voldenet> eh, nevermind, I've tested it and it doesn't work as I hoped

[08:18] <Voldenet> my @jobs = @str_jobs.map: { hash <title submit process priority> Z .split(',') };

[09:14] <disbot8> <librasteve> ok - I have added the US dollar Currency to Physics::Unit but tbh I think the first pass is suboptimal ... it uses sub postfix:<$> (Real:D $x) is export { do-postfix($x,'$') } so you can currently type 3.00$ --- just like you can type 4.2l BUT boy would that be nicer as $3.00

[09:16] <disbot8> <librasteve> at first I was hopeful that I could just go sub prefix:<$> (Real:D $x)...  with the idea that there is no valid raku (afaik) that combines the $ followed by a number literal - this didn't wok  - not suprising really since $ is used for quite a lot of stuff already

[09:17] <lizmat> librasteve_: the problem is that $1 is valid syntax for $/[1]

[09:17] <disbot8> <librasteve> is this the sort of thing that RakuAST would help with? any thoughts on how to make this workable?

[09:18] <disbot8> <librasteve> ah, I had forgotten match capture deref

[09:19] <disbot8> <librasteve> just have to stick to ‚Ç¨

[09:20] <lizmat> perphaps US$  CAN$  AUS$  ?

[09:20] <lizmat> as prefixes

[09:21] <lizmat> m: sub prefix:<US$>($a) { say $a }; US$ 42

[09:21] <camelia> rakudo-moar d370e0513: OUTPUT: ¬´42‚ê§¬ª

[09:21] <lizmat> seems to work ?

[09:21] <lizmat> m: sub prefix:<US$>($a) { say $a }; US$42   # works even without space inbetween

[09:21] <camelia> rakudo-moar d370e0513: OUTPUT: ¬´42‚ê§¬ª

[09:23] <disbot8> <librasteve> yeah - its just that typing US$ is a bit more work - let me mull

[09:24] <lizmat> I guess, in this geopolitical situation, it's good to be specific  :-)

[09:25] <disbot8> <librasteve> yeah - there is actually a need to distinguish when eg doing currency conversions

[09:27] <Voldenet> how about using iso codes for currencies

[09:28] <lizmat> m: sub prefix:<USD>($a) { say $a }; USD42 

[09:28] <camelia> rakudo-moar d370e0513: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    USD42 used at line 1‚ê§‚ê§¬ª

[09:28] <lizmat> m: sub prefix:<USD>($a) { say $a }; USD 42 

[09:28] <camelia> rakudo-moar d370e0513: OUTPUT: ¬´42‚ê§¬ª

[09:28] <lizmat> that would require spacing  :-(

[09:30] <disbot8> <librasteve> bear in mind that there are 2 ways to make a unit --- the general way is ^<value unit> (ie the ^ caret as prefix following by some quoting) and the shorthand way

[09:30] *** Geth left
[09:30] <disbot8> <librasteve> so 4.2l is another way to spell ^<4.2 l> or ^<4.2 liters>

[09:31] <Voldenet> ah, it's this kind of problem, imo using codes is necessary

[09:31] *** Geth joined
[09:31] <Voldenet> because some countries have multiple currencies

[09:31] <disbot8> <librasteve> I will use ISOP as the internal definition - like this Currency:   - {names: [USD, US$, $, dollar],            defn: 'USD' }

[09:32] <disbot8> <librasteve> (sorry YAML alert)

[09:32] <Voldenet> Venezuela has VEB (old) VED and VES

[09:33] <disbot8> <librasteve> so anything in the names list will match in the general ^ syntax - this question is what is the subset of shorthands to export as prefix/postfix

[09:34] <disbot8> <librasteve> Voldenet++ since I am thinking MAY be nice to auto select the home currency (ISO) from the locale [thats likely not to be in the first release]

[09:35] <Voldenet> some countries (like Poland) use postfix notation, so "15z≈Ç" is "PLN 15"

[09:35] <Voldenet> otoh eur would use prefix notation

[09:35] <Voldenet> m: sub prefix:<‚Ç¨>($n){ }; ‚Ç¨15

[09:35] <camelia> rakudo-moar d370e0513: ( no output )

[09:35] <disbot8> <librasteve> yes, so we can make the shorthands be quite colloquial

[09:35] <Voldenet> and it works, ootb, in fact $ is special

[09:36] <disbot8> <librasteve> (sadly can go with $)

[09:36] <Voldenet> m: sub prefix:<$>($n){ }; $20

[09:36] <camelia> rakudo-moar d370e0513: ( no output )

[09:36] <Voldenet> ‚Ä¶huh?

[09:36] <disbot8> <librasteve> I mean cant go without $

[09:37] <lizmat> Voldenet: $20 parses as $/[20]

[09:37] <Voldenet> m: sub prefix:<$>($n){ say "ah, I see" }; $20

[09:37] <camelia> rakudo-moar d370e0513: ( no output )

[09:37] <Voldenet> Right, of course

[09:37] <lizmat> Ôπ©ÔºÑüí≤   # or use one of the other dollar signs

[09:38] <lizmat> but that would just be even more difficult typing  :-)

[09:38] <Voldenet> but then usefulness of that is very limited, I guess

[09:38] <lizmat> indeed

[09:38] <disbot8> <librasteve> nah - this is for fast typing - had enough pain with ‚ôéÔ∏è

[09:39] <disbot8> <librasteve> https://chatgpt.com/share/68b41862-f328-8009-88bf-b81c60887009

[09:41] <Voldenet> > const prefix = colloquialMap[currency] || currency + "$";

[09:41] <Voldenet> EUR$ :>

[09:41] <disbot8> <librasteve> lol

[09:44] *** Sgeo_ left
[09:47] <Voldenet> though it's informative, Intl.NumberFormat in js is pretty amazing and it's built-in

[09:48] <disbot8> <librasteve> console.log(new Intl.NumberFormat("en-IN").format(number)); // "12,34,567.89" (Indian English)

[09:49] <Voldenet> it seems that ‚Ç¨ in it uses prefix notation for en-US locale but postfix for de-DE

[09:59] *** apac joined
[10:01] *** lichtkind joined
[10:03] *** cpli left
[10:03] *** cpli joined
[10:05] <Voldenet> btw, you need currency in js

[10:05] <Voldenet> > console.log(new Intl.NumberFormat("en-IN", { style: 'currency', currency: 'INR' }).format(24))

[10:05] <Voldenet> > ‚Çπ24.00

[10:06] <disbot8> <librasteve> Its interesting to see that JS is very complete in this regard ...  however, since App::Crag got the lizmat treatment, getting a nice, colloquial tool is my current focus - happy to backport to anything like Intl.Number that comes to raku land

[10:11] <disbot8> <librasteve> thanks for all the feedback...

[11:04] <Voldenet> the completness in js comes from here https://github.com/unicode-org/icu/tree/main/icu4c/source/data/curr

[11:06] <Voldenet> and here‚Ä¶ perhaps, I have no idea what these codes mean https://github.com/unicode-org/icu/blob/main/icu4c/source/data/misc/currencyNumericCodes.txt

[11:07] <lizmat> feels like indices into an array somewhere?

[11:08] <Voldenet> it says on top of some files that they were generated from cldr

[11:08] <Voldenet> that looks useful https://github.com/unicode-cldr/cldr-numbers-modern/blob/master/main/en/currencies.json

[11:08] <Voldenet> and not pain to parse too

[11:09] *** phogg` left
[11:11] <lizmat> sadly that is for cldr 37, we're at 64 now

[11:11] <lizmat> *46

[11:13] <Voldenet> ah, different repository is more up-to-date https://github.com/unicode-org/cldr-json/blob/main/cldr-json/cldr-numbers-full/main/en/currencies.json

[11:18] *** lichtkind_ joined
[11:18] *** lichtkind left
[11:21] *** phogg joined
[11:29] *** wayland left
[11:29] *** wayland76 joined
[12:18] *** apac left
[13:34] <disbot8> <simon_sibl> this is god sent: https://termbin.com/z3f3

[14:02] <guifa> librasteve: I will eventually be getting around to a currency formatting

[14:02] <guifa> you can get the raw data in Intl::CLDR tho

[14:06] <guifa> although I think I might have held off for some reason with putting in the string format for it --- not sure why it's not showing up atm

[14:07] <guifa> but `use Intl::CLDR; cldr<en><numbers><currencies><EUR><symbol>` for instance returns ‚Ç¨

[14:21] <guifa> aaah

[14:25] <guifa> cldr<en>.numbers.currency-formats.latin.standard.pattern , although for some reason I'm just getting an empty string back right now.  Will check my code

[14:26] <guifa> the result should be though `¬§#,##0.00` for standard, and `¬§#,##0.00;(¬§#,##0.00)` for accounting

[14:33] <guifa> I'll investigate and try to push out an Intl::Format::Currency 

[14:33] <disbot8> <librasteve> .oO

[14:40] <disbot8> <librasteve> guifa: the source link for Intl.CLDR on raku.land is broken (guess this comes from the META6.json)

[14:46] <disbot8> <librasteve> https://github.com/alabamenhu/Intl-CLDR/pull/6

[14:51] *** derpydoo joined
[14:53] <guifa> ugh def some stuff I need to update in there

[14:53] *** lichtkind_ left
[14:53] <guifa> I've been too involved lately in the C /Obj-C world trying to get UI::HTMLWindow working even better

[14:54] <disbot8> <librasteve> yeah - btw way I just zef installed Intl::CLDR on my macOS - the issue with 256 file limit did not arise, so I suggest to remove the cary warning in the README ;-)

[14:55] <librasteve_> s/cary/scary/

[14:57] <disbot8> <librasteve> for now, this is all that I need `raku -e 'use Intl::CLDR; cldr<en><numbers><currencies>.say'

[15:05] <guifa> thank the $DEITY

[15:05] <guifa> I finally properly forked off 

[15:06] * guifa is learning so much new stuff trying to create the html ui

[15:22] <guifa> a tricky one was getting the dylib executable path.  we've deprecated %?RESOURCE<foo>.absolute, but I need such a path for properly calling exec*.  And of course, macOS has to be special lol

[15:58] *** derpydoo left
[16:02] *** lichtkind joined
[16:25] *** elcaro left
[16:25] *** elcaro joined
[16:45] *** derpydoo joined
[17:10] *** Aedil joined
[17:10] *** apac joined
[17:22] *** librasteve_ left
[17:26] *** derpydoo left
[17:55] *** apac left
[18:57] *** guifa left
[19:19] *** Sgeo joined
[19:21] *** Aedil left
[19:31] *** melezhik joined
[20:04] <tbrowder> hi, how does one get the default srand number for an os?

[20:05] <tbrowder> the docs say the number depends on the os

[20:06] <tbrowder> ah, maybe this...

[20:07] <tbrowder> m: say Num.rand

[20:07] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´Invocant of method 'rand' must be an object instance of type 'Num', not‚ê§a type object of type 'Num'. Did you forget a '.new'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:08] <tbrowder> m: my $n = Num.new; say $n.rand

[20:08] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´0‚ê§¬ª

[20:12] <tbrowder> m: my $n = Num(10000000000000000000).rand

[20:12] <camelia> rakudo-moar d6dda7eb4: ( no output )

[20:15] <destroycomputers> m: say rand

[20:15] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´0.9184466250639097‚ê§¬ª

[20:16] <tbrowder> m: say (1..69).roll

[20:16] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´57‚ê§¬ª

[20:16] <tbrowder> that's the "ticket"

[20:17] <tbrowder> i just want some control over the srand, or at least see what the default is

[20:18] <tbrowder> m: say (1..69).roll; say (1..69).roll

[20:18] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´52‚ê§19‚ê§¬ª

[20:20] <tbrowder> m: for 1..5 {say (1...69).roll}

[20:20] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´69‚ê§54‚ê§2‚ê§7‚ê§58‚ê§¬ª

[20:21] <tbrowder> florida powerball is 1+ BILLION usd

[20:23] <tbrowder> draw tomorrow (1 sep) at 2300 EDT

[20:24] <tbrowder> m: for 1..5 {say (1..69).roll}; say (1..26).roll

[20:24] <camelia> rakudo-moar d6dda7eb4: OUTPUT: ¬´5‚ê§45‚ê§3‚ê§6‚ê§40‚ê§21‚ê§¬ª

[20:25] <tbrowder> the "21" at the end is the "power ball" pick

[20:26] <tbrowder> i üíó raku

[21:36] <El_Che> .

[21:36] <tellable6> 2025-08-28T22:16:42Z #raku-dev <jdv> El_Che 2025.08 happened

[21:37] <El_Che> damn, I need to be more active on irc

[21:37] <El_Che> I will release tomorrow

[21:41] *** melezhik left
[22:06] <tbrowder> [Coke]: see my comment on irc #raku.land

[22:06] <tbrowder> #raku-land that is...

[22:09] *** lichtkind left
[22:57] *** stanrifkin left
[22:58] *** wayland76 left
[23:25] *** sftp joined
[23:25] *** sftp left
[23:25] *** sftp joined
[23:26] *** arkiuat joined
[23:26] <arkiuat> tbrowder, for lotto games I think you want .pick, not .roll

[23:49] <[Coke]> tbrowder: I see no comment anywhere.

