[00:35] *** kst left
[01:33] *** codesections joined
[01:48] *** codesections left
[01:50] *** yewscion_ left
[02:03] *** hulk joined
[02:04] *** kylese left
[02:04] *** yewscion_ joined
[02:08] *** yewscion_ left
[02:13] *** codesections joined
[02:20] *** maylay left
[02:22] *** maylay joined
[02:28] *** kaskal- left
[02:29] *** kaskal joined
[02:32] *** derpydoo joined
[02:36] *** yewscion_ joined
[02:40] *** derpydoo left
[02:42] *** codesections left
[02:42] *** codesections1 joined
[02:44] *** yewscion_ left
[02:45] *** codesections1 is now known as codesections

[03:01] *** hulk left
[03:01] *** kylese joined
[03:02] *** codesections1 joined
[03:03] *** codesections left
[03:03] *** codesections1 is now known as codesections

[03:08] <Geth> ¦ docker: 918b44de4f | AntonOks++ | 4 files

[03:08] <Geth> ¦ docker: Bump to 2025.03 [skip workflow]

[03:08] <Geth> ¦ docker: review: https://github.com/rakudo/docker/commit/918b44de4f

[03:08] <perlbot> Geth: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[03:09] *** maylay left
[03:12] *** maylay joined
[03:15] *** kylese left
[03:15] *** kylese joined
[03:46] *** derpydoo joined
[03:48] *** Dominika is now known as sdomi

[03:57] *** maylay left
[04:00] *** maylay joined
[04:01] *** codesections1 joined
[04:01] *** codesections left
[04:01] *** codesections1 is now known as codesections

[04:12] *** codesections1 joined
[04:14] *** codesections left
[04:14] *** codesections1 is now known as codesections

[04:30] *** kylese left
[04:34] *** kylese joined
[04:51] *** codesections left
[04:52] *** derpydoo left
[04:53] *** ACfromTX left
[04:56] *** Aedil joined
[05:00] *** codesections joined
[05:03] *** jmcgnh left
[05:06] *** ACfromTX joined
[05:12] *** jmcgnh joined
[05:19] *** codesections left
[05:30] *** kylese left
[05:32] *** kylese joined
[05:47] *** derpydoo joined
[05:57] *** avuserow left
[05:59] *** avuserow joined
[06:04] *** Aedil left
[06:14] *** wayland76 joined
[06:31] *** yewscion left
[06:31] *** yewscion_ joined
[06:49] *** Aedil joined
[07:37] *** yewscion joined
[07:42] *** yewscion left
[08:00] *** maylay left
[08:02] *** maylay joined
[08:03] *** Sgeo left
[08:09] *** yewscion joined
[08:13] *** yewscion left
[08:23] *** lichtkind joined
[08:29] *** Fritz71 joined
[08:39] <Geth> ¦ ecosystem/main: 9b40fec9d8 | (Elizabeth Mattijsen)++ | META.list

[08:39] <Geth> ¦ ecosystem/main: Remove PKafka

[08:39] <Geth> ¦ ecosystem/main: 

[08:39] <Geth> ¦ ecosystem/main: It will either be maintained, or not.  That much is clear

[08:39] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/9b40fec9d8

[08:39] <perlbot> Geth: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[08:45] *** yewscion joined
[08:50] *** yewscion left
[09:20] *** dakkar joined
[09:29] *** maylay left
[09:30] *** maylay joined
[09:34] *** yewscion joined
[09:39] *** yewscion left
[10:10] <tadzik> disk cannot contain lizmat++'s karma :)

[10:10] <perlbot> tadzik: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[10:10] <tadzik> perlbot: I know :(

[10:10] <perlbot> tadzik: Error: DBI connect('dbname=perlbot;host=192.168.32.1','perlbot',...) failed: connection to server at "192.168.32.1", port 5432 failed: Connection refused 	Is the server running on that host and accepting TCP/IP connections? at ./plugins/factoids.pm line 84. 

[10:10] <lizmat> perlbot: help

[10:10] <perlbot> lizmat: Error: DBI connect('dbname=perlbot;host=192.168.32.1','perlbot',...) failed: connection to server at "192.168.32.1", port 5432 failed: Connection refused 	Is the server running on that host and accepting TCP/IP connections? at ./plugins/factoids.pm line 84.  Provides help text for a specific command. Try 'help echo'. See also the command 'plugins' to list all of the currently loaded plugins.

[10:11] <lizmat> so who is running that ?

[10:13] <lizmat> apparently perlbot only runs on #raku

[10:34] *** sena_kun joined
[10:44] *** yewscion joined
[10:51] <grondilu> so I used an enum for chess squares instead of a hash and apparently that decreased the performance :/

[10:51] *** yewscion left
[10:51] <grondilu> almost halved perf

[10:51] <grondilu> 37s to 55s

[10:54] <grondilu> I guess I should always check that before committing.

[10:54] <lizmat> intriguing...  

[10:54] <lizmat> could you golf this to a piece of code that we could check ?

[10:54] <grondilu> I mean I think that's the issue, again I should have checked before each commit.

[10:54] <grondilu> lizmat: I don't think I can do that easily.

[10:55] <lizmat> also: how do you move from a hash to using enums ?

[10:55] <lizmat> perhaps that will give is enough clues  :-)

[10:55] <grondilu> hang on.

[10:56] <grondilu> I had a %Ox88 hash that pointed squares as strings such as 'a5', 'e4' etc. to positive integer values.

[10:56] <grondilu> so instead I made the following enum:

[10:57] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat);

[10:57] <camelia> rakudo-moar 804603ab3: ( no output )

[10:57] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat); say e7

[10:57] <camelia> rakudo-moar 804603ab3: OUTPUT: «e7␤»

[10:57] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat); say +e7

[10:57] <camelia> rakudo-moar 804603ab3: OUTPUT: «20␤»

[10:57] <grondilu> FYI: https://en.wikipedia.org/wiki/0x88

[10:58] <grondilu> I suppose I should try to switch back to using %Ox88 and see if I gain the performance back.

[11:00] <grondilu> I do have to reverse the enum from times to times though, with something like `Square(e7)`.  Maybe that's expensive?

[11:00] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat); say Square(e6)'

[11:00] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------>  *) Z[X+] ^8 xx 8).flat); say Square(e6)<HERE>'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        st…»

[11:00] <perlbot> camelia: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[11:00] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat); say Square(e6)

[11:00] <camelia> rakudo-moar 804603ab3: OUTPUT: «e6␤»

[11:00] <grondilu> huh?

[11:00] <grondilu> oh my bad, I meant Square($some-uint-value);

[11:00] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat); say Square(57)

[11:00] <camelia> rakudo-moar 804603ab3: OUTPUT: «No value '57' found in enum Square␤  in block <unit> at <tmp> line 1␤␤»

[11:00] <grondilu> m: enum Square (([1..8] .reverse X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat); say Square(3)

[11:00] <camelia> rakudo-moar 804603ab3: OUTPUT: «d8␤»

[11:01] <lizmat> fwiw, it feels like using enums for this is a bit overkill

[11:01] <grondilu> I like being able to use square names literally, though.

[11:02] <grondilu> besides, this feels right to me.

[11:02] <lizmat> hmmm...  I wonder if generating constants rather than enums, would be better performing

[11:03] <grondilu> also I like having a "Square" type to use in signatures.

[11:03] <grondilu> although performance is important, I don't think it should trump strong typing.

[11:27] *** yewscion joined
[11:31] *** derpydoo left
[11:33] *** yewscion left
[11:40] *** maylay left
[11:42] *** maylay joined
[11:46] <grondilu> hum... although now that I think about it, one of the points of 0x88 is to use arithmetic operations for displacements.  That won't be easy if I turn squares into an enum.

[11:50] *** JimmyZhuo joined
[11:54] *** yewscion joined
[11:55] <discord-raku-bot> <librasteve> I just made a PR on DBIish https://github.com/raku-community-modules/DBIish/pull/243 and would appreciate a 2nd pair of eyes - perhaps someone with DB chops and a Mac who can fix the test failure rather than my brute force idea to just delete the test file mv 43-sqlite-threads.rakutest ../xt?

[11:59] *** yewscion left
[12:01] * grondilu can now confirm that switching back to using %Ox88 brings performance back to 37s

[12:02] <grondilu> I suppose I can define the square type as a subset of UInt.

[12:03] *** JimmyZhuo left
[12:04] <lizmat> grondilu: you want the identifier "a8" to mean 0, right ?

[12:05] *** JimmyZhuo joined
[12:10] <grondilu> lizmat: yes

[12:10] <lizmat> m: my %h = ([1..8] .reverse X[R~] "a".."h") Z=> ((0, 16 ... *) Z[X+] (^8 xx 8).flat).flat; say %h.sort(*.key).map( {"my constant $_.key() = $_.value();" }).join("\n");

[12:10] <camelia> rakudo-moar 804603ab3: OUTPUT: «my constant a1 = 896;␤my constant a2 = 768;␤my constant a3 = 640;␤my constant a4 = 512;␤my constant a5 = 384;␤my constant a6 = 256;␤my constant a7 = 128;␤my constant a8 = 0;␤my constant b1 = 913;␤my constant b2 = 785;␤my constant b…»

[12:10] <lizmat> would ^^ help ?

[12:11] <Voldenet> values are sorta wrong

[12:11] <Voldenet> a1 should be 70

[12:11] <grondilu> so you're thinking a macro would do?

[12:12] <grondilu> or you mean I would just paste the code?

[12:12] <lizmat> well, then grondilu's algorithm is wrong  :-)

[12:12] <lizmat> what I was thinking of a helper script that produces the constants, and copy-pasting that into your source

[12:12] <grondilu> I'm pretty sure my %Ox88 definition was fine.

[12:12] <grondilu> lizmat: that's very inelegant, tbh

[12:13] <Voldenet> m: sub from-sq($sq) { my $o = $sq.ords; $o[0] - 27 + 10 * (49 - $o[1]) }; say ("a".."h" X~ 0..8).map({ $_ => from-sq($_) })

[12:13] <camelia> rakudo-moar 804603ab3: OUTPUT: «(a0 => 80 a1 => 70 a2 => 60 a3 => 50 a4 => 40 a5 => 30 a6 => 20 a7 => 10 a8 => 0 b0 => 81 b1 => 71 b2 => 61 b3 => 51 b4 => 41 b5 => 31 b6 => 21 b7 => 11 b8 => 1 c0 => 82 c1 => 72 c2 => 62 c3 => 52 c4 => 42 c5 => 32 c6 => 22 c7 => 12 c8 => 2 d0 => 83 d…»

[12:13] <grondilu> I don't just want that code to run and to run fast, I also want it to look nice.

[12:13] <Voldenet> m: sub from-sq($sq) { my $o = $sq.ords; $o[0] - 27 + 10 * (49 - $o[1]) }; say ("a".."h" X~ 1..8).map({ $_ => from-sq($_) })

[12:13] <camelia> rakudo-moar 804603ab3: OUTPUT: «(a1 => 70 a2 => 60 a3 => 50 a4 => 40 a5 => 30 a6 => 20 a7 => 10 a8 => 0 b1 => 71 b2 => 61 b3 => 51 b4 => 41 b5 => 31 b6 => 21 b7 => 11 b8 => 1 c1 => 72 c2 => 62 c3 => 52 c4 => 42 c5 => 32 c6 => 22 c7 => 12 c8 => 2 d1 => 73 d2 => 63 d3 => 53 d4 => 43 d…»

[12:14] <Voldenet> ^^ a bit simpler approach, idk how fast .ords is, but it might not even need lookups

[12:14] <lizmat> well, one could also create a slang that would allow those identifiers, but I think generating the constants is an elegant way

[12:14] <grondilu> m: say ([1..8] .reverse) X[R~] 'a'..'h' Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat

[12:14] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Only identical operators may be list associative; since 'X[R~]' and 'Z=>' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> say ([1..8] .reverse) X[R~] 'a'..'h' …»

[12:14] <perlbot> camelia: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[12:15] <lizmat> fwiw, this approach is used at various places in the core

[12:15] <grondilu> m: say =([1..8] .reverse) X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat

[12:15] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> say =<HERE>([1..8] .reverse) X[R~] 'a'..'h') Z=> ((␤»

[12:15] <perlbot> camelia: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[12:15] <grondilu> m: say ([1..8] .reverse) X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat

[12:15] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> say ([1..8] .reverse) X[R~] 'a'..'h'<HERE>) Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat␤»

[12:15] <perlbot> camelia: Error: DBD::SQLite::db do failed: database or disk is full at ./plugins/karma_modify.pm line 68. 

[12:15] <grondilu> m: say (([1..8] .reverse) X[R~] 'a'..'h') Z=> ((0, 16 ... *) Z[X+] ^8 xx 8).flat

[12:15] <camelia> rakudo-moar 804603ab3: OUTPUT: «(a8 => 0 b8 => 1 c8 => 2 d8 => 3 e8 => 4 f8 => 5 g8 => 6 h8 => 7 a7 => 16 b7 => 17 c7 => 18 d7 => 19 e7 => 20 f7 => 21 g7 => 22 h7 => 23 a6 => 32 b6 => 33 c6 => 34 d6 => 35 e6 => 36 f6 => 37 g6 => 38 h6 => 39 a5 => 48 b5 => 49 c5 => 50 d5 => 51 e5 => …»

[12:15] <lizmat> ok, I'm thinking of bumping perlbot for now

[12:15] *** ChanServ sets mode: +o lizmat

[12:16] <grondilu> lizmat: it's ok for core developpers to have different priorities.

[12:16] <lizmat> and for non-core developers as well  :-)

[12:17] <grondilu> I mean I really don't want to have to copy paste code.

[12:17] <grondilu> tell me how to do it with a macro and that'd be a different story.

[12:17] *** human_blip left
[12:17] <lizmat> well... I don't either, that's why I usually create a helper script that both generates the code *and* paste it in the right place in the source

[12:18] <lizmat> so you only need to run the helper script

[12:18] <Voldenet> Shouldn't enums behave exactly like constants (or even define constants)?

[12:18] <lizmat> Voldenet: they should, afaik

[12:19] *** human_blip joined
[12:20] <Voldenet> it's very weird that constant-based code would be slower than hash-based one, maybe some specific computation is slower

[12:23] <grondilu> I think it was the calls to &Square before each arithmetic operation.

[12:23] <grondilu> because you can do arithmetic operations or enum entries, but you loose the type.

[12:25] <grondilu> m: my enum color <white black>; say (white + 1) ~~ color  # False

[12:25] <camelia> rakudo-moar 804603ab3: OUTPUT: «False␤»

[12:25] <grondilu> m: my enum color <white black>; say color(white + 1) ~~ color  # False

[12:25] <camelia> rakudo-moar 804603ab3: OUTPUT: «True␤»

[12:26] <grondilu> (meant # True above)

[12:28] <Voldenet> m: my $x = 0; my enum color <white black>; sub comp(color $c) { $x += $c }; for 0..1000000 { comp(black) }; say now - BEGIN now;

[12:28] <camelia> rakudo-moar 804603ab3: OUTPUT: «0.096396251␤»

[12:29] <Voldenet> m: my $x = 0; my enum color <white black>; sub comp(Int $c) { $x += $c }; for 0..1000000 { comp(1) }; say now - BEGIN now;

[12:29] <camelia> rakudo-moar 804603ab3: OUTPUT: «0.107494914␤»

[12:29] <Voldenet> enums don't seem significantly slower

[12:29] <Voldenet> m: my $x = 0; my enum color <white black>; sub comp(Int $c) { $x += $c }; for 0..1000000 { comp(white + 1) }; say now - BEGIN now;

[12:29] <camelia> rakudo-moar 804603ab3: OUTPUT: «0.093243744␤»

[12:29] <grondilu> I see

[12:30] <grondilu> I don't know then.

[12:30] <Voldenet> I mean, there's something specific about what gets done with the enum

[12:30] <Voldenet> some operator is slower perhaps

[12:31] <lizmat> m: use v6.*; my enum Foo <a1>; my int $a; my $then = nano; $a = $a + a1 for ^10000000; say nano - $then

[12:31] <camelia> rakudo-moar 804603ab3: OUTPUT: «1316328792␤»

[12:31] <lizmat> m: use v6.*; my constant a1 = 0; my int $a; my $then = nano; $a = $a + a1 for ^10000000; say nano - $then

[12:31] <camelia> rakudo-moar 804603ab3: OUTPUT: «1208219855␤»

[12:31] <lizmat> there *is* a difference somehow

[12:32] <grondilu> but not a 1 to 2 difference

[12:33] <grondilu> again I went from 37s to 55s

[12:33] <grondilu> ok not 1 to 2 but almost

[12:34] <lizmat> well, if this is not precomped code, then enums take additional CPU on creation, more than just constants

[12:35] <grondilu> but creation is not where I can lose tens of seconds.

[12:35] <lizmat> no, indeed not

[12:36] <grondilu> here is my latest commit, the one where I switch back to using %Ox88 : https://github.com/grondilu/chess/commit/0c8bf80c6e8c8a60e66f278046f0e4ada9ddfce9

[12:37] *** human_blip left
[12:39] *** human_blip joined
[12:39] <lizmat> OOC, why the 3 args loop, why not: for %Ox88<a8> .. %Ox88<h1> -> $i {  

[12:39] <lizmat> ?

[12:40] <Voldenet> m: use v6.*; my enum Foo <a1>; my int $a; my $then = nano; my $a1 = "a1"; $a = $a + Foo::{$a1} for ^10000000; say nano - $then

[12:40] <camelia> rakudo-moar 804603ab3: OUTPUT: «1665014047␤»

[12:40] <Voldenet> now that's significantly slower

[12:43] <Voldenet> m: use v6.*; my %foo = 'a1', 1; my int $a; my $then = nano; my $a1 = "a1"; $a = $a + %foo{$a1} for ^10000000; say nano - $then

[12:43] <camelia> rakudo-moar 804603ab3: OUTPUT: «2386414908␤»

[12:43] <Voldenet> nevermind, hashes seem a lot slower

[12:44] <Voldenet> m: use v6.*; constant %foo = 'a1', 1; my int $a; my $then = nano; my $a1 = "a1"; $a = $a + %foo{$a1} for ^10000000; say nano - $then

[12:44] <camelia> rakudo-moar 804603ab3: OUTPUT: «1666772312␤»

[12:44] <grondilu> didn't your examples show that enums are faster?

[12:45] <Voldenet> indeed, not by a lot, but they seem faster

[12:45] <Voldenet> the last example shows that parsing enums uses constant hash

[12:46] <Voldenet> the speed is about the same

[12:46] <grondilu> I see

[12:46] <grondilu> well I defined %Ox88 as a constant hash, precisely

[12:48] <Voldenet> So now I'm speculating that it's not about operators, which are as fast, but maybe about types returned

[12:49] <Voldenet> m: my constant %foo = "a1", 1; say %foo{$_}.WHAT for "a1","a2"

[12:49] <camelia> rakudo-moar 804603ab3: OUTPUT: «(Int)␤Nil␤»

[12:49] <Voldenet> m: my enum Foo <a1>, 1; say Foo::{$_}.WHAT for "a1","a2"

[12:49] <camelia> rakudo-moar 804603ab3: OUTPUT: «WARNINGS for <tmp>:␤(Foo)␤(Any)␤Useless use of constant integer 1 in sink context (lines 1, 1)␤»

[12:49] <Voldenet> m: my enum Foo <a1>; say Foo::{$_}.WHAT for "a1","a2"

[12:49] <camelia> rakudo-moar 804603ab3: OUTPUT: «(Foo)␤(Any)␤»

[12:50] <Voldenet> maybe Int gets optimized somewhat and Foo doesn't

[12:52] <grondilu> m: use v6.*; my enum Foo <a1>; my int $a; my $then = nano; $a += a1 for ^10000000; say nano - $then

[12:52] <camelia> rakudo-moar 804603ab3: OUTPUT: «1195904188␤»

[12:53] <grondilu> m: use v6.*; my %Ox88 = a1 => 0; my int $a; my $then = nano; $a += %Ox88{a1} for ^10000000; say nano - $then

[12:53] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    a1 used at line 1␤␤»

[12:53] <grondilu> m: use v6.*; my %Ox88 = a1 => 0; my int $a; my $then = nano; $a += %Ox88<a1> for ^10000000; say nano - $then

[12:53] <camelia> rakudo-moar 804603ab3: OUTPUT: «1984391066␤»

[12:53] <grondilu> m: use v6.*; constant %Ox88 = a1 => 0; my int $a; my $then = nano; $a += %Ox88<a1> for ^10000000; say nano - $then

[12:53] <camelia> rakudo-moar 804603ab3: OUTPUT: «1697558205␤»

[12:54] <grondilu> well, that's no help

[13:01] <Voldenet> m: use v6.*; const %Ox88 = a1 => 0; my int $a; my $then = nano; $a += %Ox88<a1> for ^10000000; say nano - $then

[13:01] <camelia> rakudo-moar 804603ab3: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '%Ox88' is not declared.  Perhaps you forgot a 'sub' if this␤was intended to be part of a signature?␤at <tmp>:1␤------> use v6.*; const <HERE>%Ox88 = a1 => 0; my int $a; my $then = n␤»

[13:01] <Voldenet> m: use v6.*; constant %Ox88 = a1 => 0; my int $a; my $then = nano; $a += %Ox88<a1> for ^10000000; say nano - $then

[13:01] <camelia> rakudo-moar 804603ab3: OUTPUT: «1348314157␤»

[13:02] <Voldenet> …wait a second, those microbenchmarks may be not very fair

[13:02] <Voldenet> m: use v6.*; constant %Ox88 = a1 => 0; my int $a; my $then = nano; $a += %Ox88<a1> for ^10000000; say nano - $then

[13:02] <camelia> rakudo-moar 804603ab3: OUTPUT: «1492261614␤»

[13:05] <Voldenet> ah, there is one operator I didn't check for

[13:07] <Voldenet> use v6.*; constant %Ox88 = a1 => 0; my int $a; my $then = nano; $a += (%Ox88<a1> == %Ox88<a1>) for ^10000000; say nano - $then

[13:07] <evalable6> Voldenet, rakudo-moar 804603ab3: OUTPUT: «3773525390␤»

[13:07] <Voldenet> use v6.*; my enum Foo <a1>; my int $a; my $then = nano; my $x = "a1"; $a += (Foo::{$x} == Foo{$x}) for ^10000000; say nano - $then

[13:08] <grondilu> talking about operators, maybe bitwise operators are the issue.  The move generation algorithm does use them.

[13:08] <Voldenet> m: use v6.*; my enum Foo <a1>; my int $a; my $then = nano; my $x = "a1"; $a += (Foo::{$x} == Foo::{$x}) for ^10000000; say nano - $then

[13:08] <camelia> rakudo-moar 804603ab3: OUTPUT: «2775934497␤»

[13:08] <grondilu> m: use v6.*; constant %Ox88 = a1 => 0; my int $a; my $then = nano; $a +&= %Ox88<a1> for ^10000000; say nano - $then

[13:08] <camelia> rakudo-moar 804603ab3: OUTPUT: «1730592311␤»

[13:09] <grondilu> m: use v6.*; my enum Foo <a1>; my int $a; my $then = nano; $a +&= a1 for ^10000000; say nano - $then

[13:09] <camelia> rakudo-moar 804603ab3: OUTPUT: «1519790446␤»

[13:09] <grondilu> doesn't look like it

[13:09] <Voldenet> there's one specific thing about current Enum implementation that adds === operator

[13:09] <Voldenet> https://github.com/rakudo/rakudo/blob/main/src/core.c/Enumeration.rakumod#L136

[13:09] <Voldenet> It could be relevant

[13:12] *** habere-et-disper joined
[13:17] <grondilu> I suppose I could create a version with both the enum and %Ox88 would be available, and I'll change what I used only one change at a time until I figure where the performance loss shows up.

[13:34] * grondilu realizes that wouldn't be as easy as he thought initially

[13:39] *** JimmyZhuo left
[13:48] *** Fritz71 left
[14:19] *** codesections joined
[14:40] *** habere-et-disper left
[14:45] *** codesections1 joined
[14:45] *** codesections left
[14:45] *** codesections1 is now known as codesections

[14:56] *** apac joined
[14:58] *** codesections1 joined
[15:00] *** codesections left
[15:00] *** codesections1 is now known as codesections

[15:01] *** maylay left
[15:03] *** maylay joined
[15:04] *** codesections left
[15:06] *** yewscion joined
[15:12] *** codesections joined
[15:15] *** yewscion left
[15:20] *** codesections left
[15:20] *** codesections joined
[15:31] *** codesections left
[15:31] *** codesections1 joined
[15:31] *** yewscion joined
[15:33] *** codesections1 is now known as codesections

[15:38] *** codesections1 joined
[15:39] *** codesections left
[15:39] *** codesections1 is now known as codesections

[15:44] *** yewscion left
[15:47] *** yewscion joined
[15:56] *** yewscion left
[16:12] *** yewscion joined
[16:13] *** Sgeo joined
[16:17] *** yewscion left
[16:25] *** codesections left
[16:26] *** codesections joined
[16:36] *** apac left
[16:37] *** codesections left
[16:44] *** codesections joined
[16:44] *** yewscion joined
[16:48] *** yewscion left
[16:51] *** wayland76 left
[16:51] *** wayland76 joined
[17:05] *** codesections1 joined
[17:07] *** codesections left
[17:07] *** codesections1 is now known as codesections

[17:21] *** lichtkind left
[17:25] *** yewscion joined
[17:30] *** dakkar left
[17:30] *** yewscion left
[17:41] *** codesections left
[18:01] *** avuserow left
[18:06] *** avuserow joined
[18:08] *** yewscion joined
[18:14] *** yewscion left
[18:46] *** apac joined
[18:54] *** yewscion joined
[18:59] *** yewscion left
[19:26] *** abraxxa-home joined
[19:47] *** codesections joined
[19:57] *** apac left
[19:58] *** codesections left
[20:32] *** Aedil left
[20:55] *** stanrifkin joined
[20:58] *** dawids_ joined
[21:00] *** dawids_ left
[21:04] *** dawids_ joined
[21:25] *** DarthGandalf left
[21:26] *** Some-body_ joined
[21:29] *** Some-body_ is now known as DarthGandalf

[21:32] *** maylay left
[21:34] *** maylay joined
[22:05] *** wayland76 left
[22:15] *** dawids_ left
[22:32] *** codesections joined
[22:41] *** yewscion joined
[22:48] *** kjp left
[22:49] *** kjp joined
[22:51] *** kjp left
[22:51] *** kjp joined
[23:20] *** sena_kun left
[23:20] *** codesections1 joined
[23:22] *** codesections left
[23:24] *** codesections1 left
[23:25] *** stanrifkin left
[23:28] *** codesections joined
[23:34] *** maylay left
[23:36] *** maylay joined
[23:43] *** codesections left
[23:57] *** abraxxa-home left
