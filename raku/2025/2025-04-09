[00:19] *** jpn joined
[00:20] <Xliff> SmokeMachine: Well... to start with: what methods must be implemented for a Red Database driver?

[00:21] <Xliff> That should get me started.

[00:22] *** Xliff left
[00:24] <SmokeMachine> Cliff: There are 2 examples of drivers on Red: https://github.com/FCO/Red/blob/master/lib/Red/Driver/Pg.rakumod and https://github.com/FCO/Red/blob/master/lib/Red/Driver/SQLite.rakumod

[00:24] *** jpn left
[00:25] <SmokeMachine> .tell Xliff There are 2 examples of drivers on Red: https://github.com/FCO/Red/blob/master/lib/Red/Driver/Pg.rakumod and https://github.com/FCO/Red/blob/master/lib/Red/Driver/SQLite.rakumod

[00:25] <tellable6> SmokeMachine, I'll pass your message to Xliff

[00:29] <SmokeMachine> .tell Xliff but basically, the main method that needs to be implemented it the `translate` one. But it’s implemented on CommonSQL driver.

[00:29] <tellable6> SmokeMachine, I'll pass your message to Xliff

[01:19] *** Aedil joined
[01:25] *** hulk joined
[01:26] *** kylese left
[01:37] *** undoencalma joined
[01:46] *** undoencalma left
[01:47] *** jpn joined
[01:53] *** jpn left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:39] *** jpn joined
[02:44] *** jpn left
[04:09] *** jpn joined
[04:14] *** jpn left
[04:29] *** stanrifkin joined
[04:30] *** kylese left
[04:34] *** kylese joined
[04:43] *** maylay left
[04:46] *** maylay joined
[05:12] *** jpn joined
[05:17] *** jpn left
[05:30] *** kylese left
[05:31] *** kylese joined
[06:11] *** undoencalma joined
[06:12] <undoencalma> i was thinking... nixos and raku maybe can do a good synergy? cause the common declaration nature of both

[06:23] *** undoencalma37 joined
[06:24] *** undoencalma37 left
[06:24] *** undoencalma left
[06:40] *** Sgeo left
[06:50] *** jpn joined
[06:55] *** jpn left
[07:14] <SmokeMachine> unde

[07:15] <SmokeMachine> undermine: I was studding about that when I got the idea for writing this: https://github.com/FCO/Configuration

[07:28] *** melezhik joined
[07:28] <melezhik> o/

[07:29] <melezhik> for people doing golang/GRPC beside raku, I've created sparrow plugin to parse/dump types from proto file - https://sparrowhub.io/plugin/proto-parser/0.000003

[07:33] *** Aedil left
[07:46] *** jpn joined
[07:54] *** jpn left
[08:00] *** dakkar joined
[08:06] *** bdju left
[08:08] *** bdju joined
[08:20] <discord-raku-bot> <melezhik.> .tell tonyo - I’ve got email from fez - Error reading META from your last upload, though my distro meta is valid and local zef run said no complaints when I did fez upload

[08:20] <tellable6> melezhik., I'll pass your message to tonyo

[08:20] <discord-raku-bot> <melezhik.> Module - Tomtit

[08:20] <discord-raku-bot> <melezhik.> 0.1.33

[08:21] <melezhik> zef -> fez 

[08:22] <melezhik> so with all being said, Tomtit new version has not yet showed up in rakuland - maybe i just need to wait a bit more ..

[08:28] *** jpn joined
[08:44] <melezhik> so I run fez upload second time

[08:44] <melezhik> let

[08:44] <melezhik> see

[08:46] <melezhik> .tell tonyo: ok - now i have got the same email from fez with the same error ... looks my distro is not being handled at the moment  

[08:46] <tellable6> melezhik, I'll pass your message to tonyo

[08:47] *** melezhik left
[08:59] *** lichtkind joined
[08:59] *** Aedil joined
[09:13] *** Aedil left
[09:16] *** Aedil joined
[09:26] <Voldenet> tbrowder: I was experimenting with something like this https://0x0.st/8_dF.raku but in that case the next "prompt" gets the contents of previous input, so it might be necessary to handle raw input instead

[09:32] <Voldenet> I think the most sane solution would be probably ncurses + nodelay + getch, but it'd be very non-portable I suppose

[09:36] <Voldenet> hm, I see that curses has "timeout" function, I've never used it though

[10:27] *** bbkr joined
[10:27] *** lichtkind left
[10:27] <bbkr> m: sub foo ( --> Hash of Str ) {  my %h = "foo" => "bar"; return %h }; foo();

[10:27] <camelia> rakudo-moar 211641a42: OUTPUT: «Type check failed for return value; expected Hash[Str] but got Hash ({:foo("bar")})␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:28] <bbkr> Is this a bug? I'm seriously confused by error message here...

[10:36] <tbrowder> Voldenet: thank you very much! a lot to digest. my module update needs releasing, so i'll keep that code to exper with later. i'll go back to a simple yes/no (or forced quit) for now.

[10:46] *** lichtkind joined
[11:27] <Voldenet> welp, I don't know if timeouting prompt is a good idea at all, I've seen it a few times and it was never nice

[11:35] <Voldenet> bbkr: the hash you're returning doesn't have Str as values, but Mu

[11:35] <Voldenet> m: sub foo ( –> Hash of Str ) {  my %h = "foo" => "bar"; say %h.of; return %h }; foo();

[11:36] <camelia> rakudo-moar 211641a42: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> sub foo ( <HERE>–> Hash of Str ) {  my %h = "foo" => "ba␤»

[11:36] <Voldenet> m: sub foo ( --> Hash of Str ) { my %h = "foo" => "bar"; say %h.of; return %h }; foo();

[11:36] <camelia> rakudo-moar 211641a42: OUTPUT: «(Mu)␤Type check failed for return value; expected Hash[Str] but got Hash ({:foo("bar")})␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:36] <Voldenet> you can solve this by specifying value type

[11:36] <Voldenet> m: sub foo ( --> Hash of Str ) { my Str %h = "foo" => "bar"; say %h.of; return %h }; foo();

[11:36] <camelia> rakudo-moar 211641a42: OUTPUT: «(Str)␤»

[11:49] <timo> bbkr: hey did you see my stackoverflow response to your question about gather/take + race? (i'm proud of it haha)

[11:50] <grondilu> Hello.

[11:51] <grondilu> I'm trying to use `shell` instead of `qx{}` and I'm having difficulties.  I only get the first line of the output?

[11:51] <grondilu> example: `say .out.slurp given shell "date |tac", :out`

[11:51] <grondilu> what am I missing?

[11:54] <grondilu> lol sorry I was thinking of 'cal', not 'date'

[11:54] <grondilu> my bad

[12:05] *** jpn left
[12:23] <bbkr> Voldenet: Thanks. Indeed I forgot that returned value must be declared with type. I think this deserves LTA error message GH issue, because for Arrays this is explicitly explained to user: "Type check failed for return value; expected Array[Str] but got Array (["foo"]).  You have to pass an

[12:23] <bbkr> explicitly typed array, not one that just might happen to contain".

[12:30] <bbkr> https://github.com/rakudo/rakudo/issues/5845

[12:32] <bbkr> timo: Wow, that is solid chunk of knowledge. I'll read it carefully after my $dayjob. Huge thanks!

[12:42] *** JimmyZhuo joined
[12:46] *** lichtkind left
[12:54] *** bbkr left
[13:21] *** jpn joined
[14:02] *** JimmyZhuo left
[14:26] *** lichtkind joined
[15:10] *** derpydoo joined
[15:32] <tonyo> melezhik: can you send me the dist and tell me, how are you bundling it?

[15:32] <tellable6> tonyo, I'll pass your message to melezhik

[16:51] <grondilu> m: print qq{2+2 = {2+2}}

[16:51] <camelia> rakudo-moar fd7d18088: OUTPUT: «2+2 = {2+2}»

[16:51] <grondilu> ^?

[16:51] <grondilu> m: print qq[2+2 = {2+2}]

[16:51] <camelia> rakudo-moar fd7d18088: OUTPUT: «2+2 = 4»

[17:00] <[Coke]> Nothing in the docs about { being special as bounding character.

[17:00] *** jpn left
[17:02] *** dakkar left
[17:18] *** derpydoo left
[17:21] *** Aedil left
[17:27] *** jpn joined
[17:59] *** Aedil joined
[18:01] *** sena_kun joined
[18:03] *** sena_kun left
[18:04] *** sena_kun joined
[18:06] *** sena_kun left
[18:07] *** sena_kun joined
[18:22] *** Aedil left
[18:39] *** jpn left
[19:09] <grondilu> how can I pass a slurpy list of pairs to a sub?

[19:10] <grondilu> without them being interpreted as named arguments, that is.

[19:14] <ugexe> i must not understand because the obvious thing does that

[19:14] <ugexe> m: sub foo(*@_, :$c) { say @_.raku; say $c.raku }; my @pairs = a => 1, b => 2, c => 3; foo(|@pairs)

[19:14] <camelia> rakudo-moar fd7d18088: OUTPUT: «[:a(1), :b(2), :c(3)]␤Any␤»

[19:48] <grondilu> but you can't pass them as literals, can you?

[19:48] <grondilu> m: print (:foo<bar>) ~~ :(*@)

[19:48] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[19:48] <grondilu> m: print (+:foo<bar>) ~~ :(*@)

[19:48] <camelia> rakudo-moar fd7d18088: OUTPUT: «Cannot resolve caller Numeric(Pair:D: ); none of these signatures matches:␤    (Mu:U \v:: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:49] <grondilu> m: print ((:foo<bar>,)) ~~ :(*@)

[19:49] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[19:49] <grondilu> isn't there an indempotent operator for pairs?

[19:49] *** lizmat_ left
[19:49] <grondilu> *idempotent

[19:49] *** lizmat joined
[19:50] *** jargan is now known as jast

[19:50] <grondilu> m: print (:foo<bar><>) ~~ :(*@)

[19:50] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[19:50] <grondilu> m: print ($(:foo<bar>)) ~~ :(*@)

[19:50] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[19:50] <grondilu> m: print ("foo") ~~ :(*@)

[19:50] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[19:51] <grondilu> damn it

[19:51] <grondilu> m: print ("foo",) ~~ :(*@)

[19:51] <camelia> rakudo-moar fd7d18088: OUTPUT: «True»

[19:51] <grondilu> m: print (:foo<bar><>,) ~~ :(*@)

[19:51] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[19:56] <[Coke]> m: sub foo(*@_, :$c) { say @_.raku; say $c.raku}; foo(|(:foo<bar>,:baz<frob>));

[19:56] <camelia> rakudo-moar fd7d18088: OUTPUT: «[:foo("bar"), :baz("frob")]␤Any␤»

[19:56] <[Coke]> literals like that? ^^

[19:58] *** Aedil joined
[20:00] <grondilu> well yes that works

[20:00] <grondilu> m: print (|(:foo<bar>,)) ~~ :(*@)

[20:00] <camelia> rakudo-moar fd7d18088: OUTPUT: «False»

[20:00] <grondilu> hum

[20:00] <grondilu> oh well

[20:07] <[Coke]> ah, you mean in a Signature Literal. Yes, I do not know the magic syntax there.

[20:08] <[Coke]> m: dd (:(|:foo<bar)).^name

[20:08] <camelia> rakudo-moar fd7d18088: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Invalid typename 'foo' in parameter declaration.␤at <tmp>:1␤------> dd (:(|:foo<HERE><bar)).^name␤»

[20:08] <[Coke]> m: dd (:(1,2,3).^name

[20:08] <camelia> rakudo-moar fd7d18088: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> dd (:(1,2,3).^name<HERE><EOL>␤    expecting any of:␤        sta…»

[20:08] <[Coke]> m: dd (:(1,2,3)).^name

[20:08] <camelia> rakudo-moar fd7d18088: OUTPUT: «"Signature"␤»

[20:09] <[Coke]> m: dd (:(:foo<bar>)).^name

[20:09] <camelia> rakudo-moar fd7d18088: OUTPUT: «"Pair"␤»

[20:09] <[Coke]> m: dd (:(|:foo<bar>)).^name

[20:09] <camelia> rakudo-moar fd7d18088: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Invalid typename 'foo' in parameter declaration.␤at <tmp>:1␤------> dd (:(|:foo<HERE><bar>)).^name␤»

[20:09] <[Coke]> I think the flatten only works when *calling*, not when declaring a literal sig

[20:10] <grondilu> anyway, unrelated :  I want to write initialization code with %?RESOURCES.  I thought I could put it in the INIT phaser but that does not seem to work.

[20:12] <grondilu> funny enough, it does work if I do `$ raku -I. -MFoo -e ''` but not if I do `$ raku -I. lib/Foo.rakumod`

[20:13] <grondilu> though maybe in the later case it just ignores the META file?

[20:18] <ugexe> correct

[20:18] <ugexe> er

[20:18] <ugexe> sorry i thought you said -I. vs -Ilib

[20:19] <ugexe> anyways one reason there might be a different in what you posted is the former is using precompiled Foo whereas the later is not

[20:25] <[Coke]> I wouldn't expect -I. lib/Foo.rakumod shouldn't work, no.

[20:26] <[Coke]> Be interested to see what the error is, though.

[20:27] <ugexe> unit module Foo;

[20:27] <ugexe> INIT my $got = %?RESOURCES<a.txt>.slurp(:close);

[20:27] <ugexe> say $got;

[20:27] <ugexe> seems to work for me

[20:28] <ugexe> (thats with `raku -I. -MFoo -e ''`)

[20:44] <grondilu> well, I have weird errors when trying to use INIT anyway.  I get "missing or wrong version" etc right after I try to add this phaser.

[20:45] <grondilu> or maybe it's %?RESOURCES inside the init.  I'll try with a simple INIT say "hi";

[20:45] <grondilu> yup, a simple `INIT say "hi"` does not cause any issue.

[20:47] <grondilu> unrelated:

[20:48] <grondilu> m: print sub { once { return rand } }() xx 3

[20:48] <camelia> rakudo-moar fd7d18088: OUTPUT: «0.8639341234891338 0.8276875716280019 0.8563044701468159»

[20:48] <ugexe> if you post all the actual code you'll get a better answer

[20:48] <grondilu> well it's not pushed yet

[20:48] <grondilu> and hard to golf

[20:49] <discord-raku-bot> <antononcube> I was dealing with INIT and %?RESOURCES while programming initialization cells and/or code for "Jupyter::Chatbook". Too much interesting behavior using INIT, so, I came up with a different solution.

[20:49] <ugexe> not asking for a golf

[20:51] <grondilu> well it's about this commit : https://github.com/grondilu/chess/commit/dae01d4f6b69f7b8578742b1e60fec48f2233cd4

[20:52] <grondilu> I wanted to put the code of &transmit-data into INIT.  Got weird.

[20:52] <grondilu> antononcube: noted

[20:52] <[Coke]> m: sub a { once { return rand} }; print a() xx 3;

[20:52] <camelia> rakudo-moar fd7d18088: OUTPUT: «Use of uninitialized value of type Mu in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤0.6045143707206804    in block <unit> at <tmp> line 1␤Use of uninitialized value of type Mu in st…»

[20:53] <[Coke]> m: sub a { once { return rand} }; dd a() xx 3;

[20:53] <camelia> rakudo-moar fd7d18088: OUTPUT: «(0.17864174774684594e0, Mu, Mu).Seq␤»

[20:53] <[Coke]> You might be getting 3 anonymous subs there?

[20:53] <grondilu> ah good catch

[20:54] <grondilu> m: print (state & = sub { once { return rand } })() xx 3

[20:54] <camelia> rakudo-moar fd7d18088: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Callable'␤  in block <unit> at <tmp> line 1␤␤»

[20:54] <grondilu> m: print (state $ = sub { once { return rand } }).() xx 3

[20:54] <camelia> rakudo-moar fd7d18088: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[20:54] <grondilu> hum

[20:55] <grondilu> anyhow so I can indeed use once to mean "run this but only once ever"

[20:55] <grondilu> it's not just for loops, then.

[20:56] <grondilu> that's going to be a substitute for INIT

[20:56] <ugexe> once does not mean use this only once ever

[20:56] <discord-raku-bot> <antononcube> @grondilu &transmit-data should work; I use similar construct in "LLM::Prompts".

[20:56] <ugexe> it is per closure clone

[20:57] <discord-raku-bot> <antononcube> You can have a package-private variable that has keeps the ingested resources data. (And if not Nil, return it.)

[20:57] <ugexe> it is also note thread safe

[20:57] <ugexe> not^

[20:57] <ugexe> state is not thread safe either, and thus cannot guarentee only-once

[20:58] <grondilu> antononcube: you're right. kind of weird, though.

[20:58] <discord-raku-bot> <librasteve> m: ({ once 42.say } xx 3).map: {$_(), $_()}; 

[20:58] <evalable6> librasteve, rakudo-moar fd7d18088: OUTPUT: «Cannot test fd7d18088c1141c4a3bd77ec05b7a7cc39e4acee (Commit exists, but an executable could not be built for it)»

[20:58] <linkable6> (2025-04-09) https://github.com/rakudo/rakudo/commit/fd7d18088c RakuAST: skip macro tests if running on RakuAST

[20:58] <discord-raku-bot> <Raku eval>  42 42 42 

[20:58] <discord-raku-bot> <librasteve> https://docs.raku.org/language/control#once

[20:58] <ugexe> it also seems wrong to put something with side effects (e.g. print) inside a INIT etc type phaser

[20:59] <grondilu> nope, "Missing or wrong version of dependency" again.  After just a small edit.

[21:00] <grondilu> ugexe: the side effect is loading image data into Kitty's terminal.  To me that's an initialization thing.

[21:01] <ugexe> missign or wrong version is precomp issues

[21:01] <grondilu> yeah everytime I get this message I have to remove my .precomp files.

[21:01] <grondilu> otherwise I can't run anything anymore.

[21:06] <discord-raku-bot> <librasteve> SmokeMachine: sorry I only have a couple of mins to dip in today - please can we continue our discussion over in the Discuss Issue I made? (also since its a public repo, this is open to all I guess)

[21:06] <ugexe> if you want the code to just run once then use a lock

[21:07] <SmokeMachine> librasteve: no! I did! There is a question for you there. :)

[21:08] <SmokeMachine> s/no/hi/

[21:08] <ugexe> my $foo-lock = Lock.new; my $foo-cache; sub foo() { $foo-lock.protect: { $foo-cache //= do { ... } } };

[21:08] <discord-raku-bot> <librasteve> lol

[21:08] <SmokeMachine> (Sorry, it was a typo or an autocorrection)

[21:26] *** Aedil left
[21:33] <discord-raku-bot> <librasteve> SmokeMachine: I replied on the Discuss/Issue ... as mentioned thats my top priority ... but I (like you) see that Cro::WebApp::Forms is the next prize and would be cool to figure that out in a way that Red traits can hang together

[21:35] <patrickb> \q

[21:36] <discord-raku-bot> <librasteve> huh?

[22:10] *** maylay left
[22:14] *** sena_kun left
[22:16] *** maylay joined
[22:19] *** donaldh_ joined
[22:22] *** donaldh_ left
[22:23] <grondilu> hurray! I managed to display the chessboard without relying on image magick!

[22:23] <grondilu> damn that was hard.

[22:24] <grondilu> it's now only relying on Kitty and control sequences.

[22:24] <grondilu> I hopefull that I'll be able to build a full chess app (like with mouse control and all) in the terminal.

[22:25] <[Coke]> neat

[22:28] <grondilu> it's gonna be the best terminal application ever :-)

[22:29] * grondilu pushed

[22:29] *** Leguy333 joined
[22:29] *** Leguy333 left
[22:53] *** Sgeo joined
[23:04] *** kst left
[23:26] *** lichtkind left
[23:44] <tbrowder> info: instead of bugging the ppl here about my Proc::Async problem i just got out my copy of brian d foy's excellent "Learning Perl 6." i wish our online docs had similar practical examples. some time ago i asked him about an update and he basically said something to the effect that wasn't feasible given the small size of the raku community. but note brian IS helping with producing raku modules for windows.

