[00:27] *** SmokeMachine left
[00:27] *** SmokeMachine joined
[01:17] *** ulipink joined
[02:27] *** hulk joined
[02:29] *** kylese left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:21] *** yewscion_ joined
[03:25] *** yewscion_ left
[03:30] *** kylese left
[03:34] *** kylese joined
[03:44] *** yewscion_ joined
[03:49] *** yewscion_ left
[03:59] *** yewscion_ joined
[04:01] *** yewscion left
[04:32] *** yewscion joined
[04:36] *** yewscion left
[07:01] *** PotatoGim left
[07:02] *** PotatoGim joined
[07:28] *** yewscion_ left
[07:30] *** yewscion_ joined
[07:30] *** yewscion_ left
[07:33] *** Aedil joined
[07:37] *** Aedil left
[07:40] *** kst left
[07:41] *** Aedil joined
[08:11] *** qesat60 left
[08:13] *** qesat60 joined
[09:17] *** dfarnsworth left
[09:17] *** dfarnsworth joined
[09:44] *** sena_kun joined
[09:50] *** abraxxa-home joined
[09:56] <patrickb> [Coke]: I believe I have fixed your module installation issue on Windows you recently sent a Gist about. It should go into the 2025.10 release.

[09:56] <lizmat> 01 I presume ?

[09:56] <patrickb> :-P

[09:56] <patrickb> Yes

[09:57] *** Guest55 joined
[10:08] *** Guest55 left
[11:03] *** abraxxa-home left
[11:03] *** abraxxa-home joined
[11:04] *** abraxxa-home left
[11:05] *** abraxxa-home joined
[11:23] *** Sgeo left
[11:32] *** ulipink left
[11:48] *** ulipink joined
[11:48] *** ulipink left
[11:48] *** ulipink joined
[13:28] *** jpn joined
[13:35] *** kjp left
[14:06] *** Guest39 joined
[14:12] *** ulipink left
[14:14] *** Guest39 left
[14:31] *** ulipink joined
[14:36] *** ulipink left
[14:49] *** ulipink joined
[14:49] *** ulipink left
[14:49] *** ulipink joined
[14:55] *** ulipink left
[15:02] *** guifa joined
[15:11] *** sena_kun left
[15:11] *** sena_kun joined
[15:14] *** Xliff left
[15:15] *** sena_kun left
[15:16] *** sena_kun joined
[15:23] *** ulipink joined
[15:27] *** ulipink left
[15:47] *** guifa left
[15:47] *** guifa joined
[15:51] *** ulipink joined
[15:56] *** ulipink left
[16:26] *** ulipink joined
[16:31] *** ulipink left
[16:50] *** ulipink joined
[16:54] *** ulipink left
[16:55] *** guifa left
[17:05] <discord-raku-bot> <librasteve> I am a bit surprised by this ...

[17:06] <discord-raku-bot> <librasteve> m: my %i = :one[1], :two[2]; class A { has $.one; has $.two }; A.new(|%i).raku.say;

[17:06] <evalable6> librasteve, rakudo-moar 545c9e4e0: OUTPUT: «A.new(one => $[1], two => $[2])␤»

[17:06] <discord-raku-bot> <Raku eval>  A.new(one => $[1], two => $[2]) 

[17:06] <discord-raku-bot> <librasteve> vs this...

[17:06] <discord-raku-bot> <librasteve> m: my %i = :one[1], :two[2]; class B { has @.one; has @.two }; B.new(|%i).raku.say;

[17:06] <discord-raku-bot> <Raku eval>  B.new(one => [[1],], two => [[2],]) 

[17:06] <evalable6> librasteve, rakudo-moar 545c9e4e0: OUTPUT: «B.new(one => [[1],], two => [[2],])␤»

[17:08] <discord-raku-bot> <librasteve> seems that if I put an Array as a Pair value, then I have to flatten somewhere to stick it into an Array attr ... I guess this is what is intended, but it seems kinda odd to have to remember to do that

[17:10] <timo> m: my %i = :one(1,), :two(2,); class B { has @.one; has @.two }; B.new(|%i).raku.say;

[17:10] <camelia> rakudo-moar 1fe089e36: OUTPUT: «B.new(one => [(1,),], two => [(2,),])␤»

[17:11] <timo> m: my %i = :one(1,), :two(2,); %i.raku.say

[17:11] <camelia> rakudo-moar 1fe089e36: OUTPUT: «{:one($(1,)), :two($(2,))}␤»

[17:11] <timo> m: my %i; %i<one> := [1]; %i<two> := [2]; %i.raku.say

[17:11] <camelia> rakudo-moar 1fe089e36: OUTPUT: «{:one([1]), :two([2])}␤»

[17:11] <timo> m: my %i; %i<one> := [1]; %i<two> := [2]; %i.raku.say; class B { has @.one; has @.two }; B.new(|%i).raku.say;

[17:11] <camelia> rakudo-moar 1fe089e36: OUTPUT: «{:one([1]), :two([2])}␤B.new(one => [1], two => [2])␤»

[17:12] <timo> m: my %i is Map = :one[1], :two[2]; %i.raku.say

[17:12] <camelia> rakudo-moar 1fe089e36: OUTPUT: «Map.new((:one([1]),:two([2])))␤»

[17:13] <timo> m: my %i is Map = :one[1], :two[2]; %i.raku.say; class B { has @.one; has @.two }; B.new(|%i).raku.say;

[17:13] <camelia> rakudo-moar 1fe089e36: OUTPUT: «Map.new((:one([1]),:two([2])))␤B.new(one => [1], two => [2])␤»

[17:13] <timo> you need something that doesn't put scalar containers in the values of %i if you want them to be assigned the way you wanted it to

[17:24] *** ulipink joined
[17:24] *** zupss is now known as zups

[17:29] *** ulipink left
[17:31] <discord-raku-bot> <librasteve> timo: yeah, I see --- most of the time I am impressed that the @ and % classes and literals dwim --- so I usually recommend that beginners go with @ and % sigils to start with before having to juggle containers ... I guess example lies beyond the sugar and you just have to know the underlying features

[17:32] *** guifa joined
[17:47] *** apac joined
[17:57] *** guifa left
[18:04] *** guifa joined
[18:19] <[Coke]> no fix going into the .01 release at this point.

[18:19] <[Coke]> Let's get it in a branch and CI tested, though

[18:24] *** ulipink joined
[18:24] *** ulipink left
[18:24] *** ulipink joined
[18:25] *** guifa left
[18:29] *** ulipink left
[18:36] *** ulipink joined
[18:36] *** ulipink left
[18:36] *** ulipink joined
[18:40] *** ulipink left
[18:44] *** jpn left
[19:02] <SmokeMachine> I think I understand why it isn’t… but should something like this be possible? https://glot.io/snippets/h40cui46g4

[19:08] <SmokeMachine> I mean, should FALLBACK validate the signature for the caller? I mean, should it also be called if the only method found expects the caller to be defined, the FALLBACK expects undefined and the caller is undefined? (Maybe too specific…)

[19:12] *** ulipink joined
[19:12] *** ulipink left
[19:12] *** ulipink joined
[19:16] *** ulipink left
[19:31] *** ulipink joined
[19:41] *** ulipink left
[19:55] *** ulipink joined
[19:59] *** ulipink left
[20:00] *** zetaaaa joined
[20:18] <xinming> Is there a better way to detect list contains certian element except using .first?

[20:19] <[Coke]> That's probably the best unless you can be working with another data structure like a Set

[20:27] <discord-raku-bot> <wambash> m: say so  9 == (1,2,3,4).any ** 2

[20:27] <discord-raku-bot> <Raku eval>  True 

[20:27] <evalable6> wambash, rakudo-moar 545c9e4e0: OUTPUT: «True␤»

[20:30] <xinming> Got it, thanks

[20:37] *** ulipink joined
[20:37] *** ulipink left
[20:37] *** ulipink joined
[20:42] *** ulipink left
[20:45] *** ramman joined
[21:04] *** kjp joined
[21:15] <ugexe> grep

[21:16] *** ulipink joined
[21:17] <ugexe> m: say so grep { 9 == $_ }, 1..Inf

[21:17] <camelia> rakudo-moar 81ddecc11: OUTPUT: «True␤»

[21:17] *** abraxxa-home left
[21:19] <ugexe> it is slightly better than first in that its return value in boolean context is explicitly if the element was there

[21:19] <ugexe> first returns the first element found, which you already know anyway

[21:30] *** Sgeo joined
[21:34] <timo> when the first element found by .first happens to falsish or undefined, it's not trivial to figure out if it was there or not, so you would most probably want `.first` with `:k` and `with` or `so ... .defined`

[21:39] <[Coke]> O_o; that seems counterintuitive to me.

[21:56] *** guifa joined
[22:03] *** Xliff joined
[22:03] <Xliff> .release

[22:04] *** ulipink left
[22:04] <jdv> .what

[22:05] *** kjp left
[22:05] *** Aedil left
[22:05] *** kjp joined
[22:09] <[Coke]> I'm working on it

[22:11] <Xliff> Working on what?

[22:11] <Xliff> I was just wondering if 2025.01 was going to be cut this weekend.

[22:12] <[Coke]> ... the release.

[22:12] <Xliff> Oh, cool! [Coke]++

[22:12] <[Coke]> I got about 90% of the way through and then realized I can't do it on a mac, so am switching to a linux box now.

[22:19] *** apac left
[22:24] <discord-raku-bot> <nahita3882> $val ∈ @list is also an option

[22:35] *** ulipink joined
[22:36] <timo> right! as well as nelem) if you prefer words

[22:39] *** ulipink left
[22:44] *** sena_kun left
[22:46] *** sftp left
[22:50] *** sftp joined
[22:54] *** ulipink joined
[22:59] *** ulipink left
[23:00] *** sftp left
[23:04] *** sftp joined
[23:30] *** ulipink joined
[23:30] *** ulipink left
[23:30] *** ulipink joined
