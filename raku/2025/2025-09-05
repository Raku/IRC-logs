[01:22] *** skyesoss is now known as skyenet

[01:32] *** hulk joined
[01:33] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:21] *** Guest38 joined
[02:22] <Guest38> hello i am a quite newbie for using raku. i have a question. is it a script language?

[02:24] *** Guest38 left
[03:58] <disbot> <jubilatious1_98524> @Guest38 Yes, Raku is a scripting language.

[04:04] *** Aedil joined
[05:46] *** elcaro joined
[06:05] <disbot> <simon_sibl> maybe I just havent found it yet, but I wish there is or will be a way to compile Raku script so that I can easily distribute them

[06:14] *** abraxxa joined
[06:24] <disbot> <simon_sibl> using App::MoarVM::Debug how can I display whats within an object ? (a scalar in this case)

[06:24] <disbot> <simon_sibl> I get the handle with all lexicals but then I dont find a command to display whats actually inside

[06:36] <disbot> <jubilatious1_98524> weekly: https://stackoverflow.com/a/79756465/7270649

[06:36] <notable6> jubilatious1_98524, Noted! (weekly)

[06:41] <disbot> <simon_sibl> in that example, I dont get the part where it keeps the right order ?

[06:42] <disbot> <simon_sibl> since hash keys are random order

[06:45] <disbot> <simon_sibl> (also not sure to understand why.head is necessary when accessing the value)

[06:48] <disbot> <jubilatious1_98524> @simon_sibl Thanks for the feedback. The hash is constructed with ++$ as value. This can be thought of as simply adding a line number as value.

[06:49] <disbot> <jubilatious1_98524> Because we .push onto the hash, values accumulate. So then we can 1). sort on the first value (i.e. *.value.head), and 2). select only keys where the number of elems equals one.

[06:50] <disbot> <jubilatious1_98524> (Note: this SO question isn't about de-duplicating lines within a file, it's about REMOVING all lines that appear in duplicate).

[06:52] <disbot> <jubilatious1_98524> (Also, the OP asks for the output to be in INPUT order, not numeric order. Hence the use of ++$ line numbers).

[06:54] <disbot> <simon_sibl> oooh

[06:54] <disbot> <simon_sibl> I get it

[06:55] <disbot> <simon_sibl> alright, I wasnt yet used to the push on hash

[06:55] <disbot> <simon_sibl> quite interesting

[06:55] <disbot> <simon_sibl> thanks for the explanation !

[06:59] <disbot> <simon_sibl> I am always confused with sort maybe because of how Perl does it

[07:00] <disbot> <simon_sibl> in Raku, how does it know if I want alphabetical order or numeric order ?

[07:00] <disbot> <simon_sibl> because in the doc it says by default it will use cmp which is for string right ? while <=> is for numeric

[07:00] <disbot> <simon_sibl> but when I do

[07:00] <disbot> <simon_sibl> m: (1, 4, 11, 6).sort.say

[07:00] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(1 4 6 11)␤»

[07:00] <disbot> <Raku eval>  (1 4 6 11) 

[07:00] <disbot> <simon_sibl> its the right order

[07:00] *** itaipu left
[07:01] <disbot> <simon_sibl> m: <a b ac c>.sort.say

[07:01] <disbot> <Raku eval>  (a ac b c) 

[07:01] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(a ac b c)␤»

[07:01] <disbot> <simon_sibl> here it does lexical order

[07:01] <disbot> <jubilatious1_98524> Good question. You can numify with + or stringify with ~.

[07:04] <disbot> <simon_sibl> indeed, but here with sorts it seems it can detect if its sorting numbers or strings, but I am not sure xD but with the two examples I just sent its what it seems

[07:04] <disbot> <simon_sibl> ah yes

[07:05] <disbot> <simon_sibl> m: (1, 11, 30, 20 205).sort.say

[07:05] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(exit code 1) ===SORRY!=== Error while compilin…»

[07:05] <disbot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> (1, 11, 30, 20⏏ 205).sort.say     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop 

[07:05] <evalable6> simon_sibl, Full output: https://gist.github.com/8a3548e4b89390dd71213a65c576fb57

[07:05] <disbot> <jubilatious1_98524> Here's the sorted output form the second input sample B => [1 5] A => [2 6] D => 3 C => 4 

[07:05] <disbot> <simon_sibl> m: (1, 11, 30, 20, 205).sort.say

[07:05] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(1 11 20 30 205)␤»

[07:05] <disbot> <Raku eval>  (1 11 20 30 205) 

[07:05] <disbot> <simon_sibl> m: <1, 11, 30, 20 205>.sort.say

[07:05] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(1, 11, 20 205 30,)␤»

[07:05] <disbot> <Raku eval>  (1, 11, 20 205 30,) 

[07:05] <disbot> <simon_sibl> makes sense makes sense

[07:06] <disbot> <simon_sibl> yep thank you ! I find your answer quite clever

[07:07] <disbot> <jubilatious1_98524>  ~ % raku -e '<1 11 30 20 205>.sort.say;' (1 11 20 30 205) 

[07:08] <disbot> <simon_sibl> what how

[07:09] <disbot> <jubilatious1_98524>  ~ % raku -e 'say <1 205 11 30 20 >.sort: *.Int;' (1 11 20 30 205) 

[07:09] <disbot> <jubilatious1_98524>  ~ % raku -e 'say <1 205 11 30 20 >.sort: *.Str;' (1 11 20 205 30) 

[07:10] <disbot> <simon_sibl> but here it should be as Str by default no ?

[07:10] <disbot> <simon_sibl> like here

[07:10] <disbot> <simon_sibl> oh wait I missed a ,

[07:10] <disbot> <simon_sibl> oh no shouldnt have ,

[07:10] <disbot> <jubilatious1_98524> Yeah, don't need commas within <>

[07:10] <disbot> <simon_sibl> m: <1 20 30 45 205>.sort.say

[07:10] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(1 20 30 45 205)␤»

[07:10] <disbot> <Raku eval>  (1 20 30 45 205) 

[07:11] <disbot> <simon_sibl> m: <1 20 d 30 aa 45 c 205 a >.sort.say

[07:11] <disbot> <Raku eval>  (1 20 30 45 205 a aa c d) 

[07:11] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(1 20 30 45 205 a aa c d)␤»

[07:11] <disbot> <simon_sibl> what

[07:11] <disbot> <simon_sibl> its half numeric and half lexical sorted ? xd

[07:11] *** wayland76 joined
[07:12] <disbot> <jubilatious1_98524> m: say <1 20 30 45 205>.sort: ~*

[07:12] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(1 20 205 30 45)␤»

[07:12] <disbot> <Raku eval>  (1 20 205 30 45) 

[07:12] <disbot> <simon_sibl> but yeah all this because I was worried when sorting files by created_date and was worried it would use lexical order instead of numeric

[07:12] <disbot> <simon_sibl> but now I know its a "smart" sort unlike in Perl5

[07:14] <disbot> <jubilatious1_98524> It's ASCII sort, right? numbers first, then uppercase then lowercase.

[07:14] <disbot> <jubilatious1_98524>  ~ % raku -e '<1 20 d 30 aa 45 c 205 a A AA >.sort.say' (1 20 30 45 205 A AA a aa c d) 

[07:15] <disbot> <jubilatious1_98524> (maybe not right term).

[07:15] <disbot> <simon_sibl> Oooh looks about right

[07:15] <disbot> <simon_sibl> But for 20 and 205 why not the same order ?

[07:19] <disbot> <jubilatious1_98524> I guess numbers in numeric (natural sort order), then ASCII rules, which must get extended to Unicode as well.

[07:21] <disbot> <jubilatious1_98524> m: say <àèéìòù>.flip.sort;

[07:21] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(ùòìéèà)␤»

[07:21] <disbot> <Raku eval>  (ùòìéèà) 

[07:21] *** itaipu joined
[07:22] <disbot> <jubilatious1_98524> m: <àèéìòù>.sort.say;

[07:22] <disbot> <Raku eval>  (àèéìòù) 

[07:22] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(àèéìòù)␤»

[07:22] <disbot> <jubilatious1_98524> Duh, no spaces.

[07:23] <disbot> <jubilatious1_98524> m: say <à è é ì ò ù>.flip.sort;

[07:23] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(ù ò ì é è à)␤»

[07:23] <disbot> <Raku eval>  (ù ò ì é è à) 

[07:25] <disbot> <simon_sibl> m: say <à è é ì ò ù>.sort

[07:25] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(à è é ì ò ù)␤»

[07:25] <disbot> <Raku eval>  (à è é ì ò ù) 

[07:25] <disbot> <simon_sibl> m: say <é à è ì ò ù>.sort;

[07:25] <disbot> <Raku eval>  (à è é ì ò ù) 

[07:25] <evalable6> simon_sibl, rakudo-moar f56482941: OUTPUT: «(à è é ì ò ù)␤»

[07:26] <disbot> <simon_sibl> Why the flip reverse the order ?

[07:26] <disbot> <jubilatious1_98524> Needs to be reverse, not flip

[07:26] <disbot> <jubilatious1_98524>   ~ % raku -e '<à è é ì ò ù>.reverse.sort.say;' (à è é ì ò ù) 

[07:27] <disbot> <jubilatious1_98524> m:  <à è é ì ò ù>.reverse.sort.say;

[07:27] <disbot> <Raku eval>  (à è é ì ò ù) 

[07:27] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(à è é ì ò ù)␤»

[07:27] <disbot> <jubilatious1_98524> flip is a mistake, will stringify into a single string. reverse is what's necessary to keep letters independent.

[07:28] *** Sgeo left
[07:29] <disbot> <jubilatious1_98524>  ~ % raku -e '(<à è é ì ò ù>.lc, <à è é ì ò ù>.uc).flat.say;' (à è é ì ò ù À È É Ì Ò Ù) 

[07:30] <disbot> <jubilatious1_98524>  ~ % raku -e '(<à è é ì ò ù>.lc, <à è é ì ò ù>.uc).flat.sort.say;' (À È É Ì Ò Ù à è é ì ò ù) 

[07:30] <disbot> <jubilatious1_98524> Yup, uppercase before lowercase.

[07:34] <disbot> <jubilatious1_98524> https://docs.raku.org/routine/sort

[07:35] <disbot> <jubilatious1_98524> m: <a aa aaa aaaa>.sort: *.chars

[07:35] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «»

[07:35] <disbot> <Raku eval>  

[07:35] <disbot> <jubilatious1_98524> m: say <a aa aaa aaaa>.sort: *.chars

[07:35] <disbot> <Raku eval>  (a aa aaa aaaa) 

[07:35] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(a aa aaa aaaa)␤»

[07:35] <disbot> <jubilatious1_98524> say <a aa aaa aaaa>.sort:  -*.chars

[07:35] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(aaaa aaa aa a)␤»

[07:36] <disbot> <jubilatious1_98524> m: say <a aa aaa aaaa>.sort:  -*.chars

[07:36] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(aaaa aaa aa a)␤»

[07:36] <disbot> <Raku eval>  (aaaa aaa aa a) 

[07:45] *** lichtkind joined
[08:20] *** crnlskn joined
[08:31] *** Geth joined
[09:43] <Voldenet> m: <1 20 d 30 aa 45 c 205 a A AA >.sort.say # this is using IntStr which is ridiculous for sorting

[09:43] <camelia> rakudo-moar a988e79f9: OUTPUT: «(1 20 30 45 205 A AA a aa c d)␤»

[09:44] <Voldenet> m: "1 20 d 30 aa 45 c 205 a A AA".split(" ").sort.say # this is using Str

[09:44] <camelia> rakudo-moar a988e79f9: OUTPUT: «(1 20 205 30 45 A AA a aa c d)␤»

[09:44] <Voldenet> m: <1 20 d 30 aa 45 c 205 a A AA >.map(*.Str).sort.say # also Str

[09:44] <camelia> rakudo-moar a988e79f9: OUTPUT: «(1 20 205 30 45 A AA a aa c d)␤»

[09:45] <Voldenet> m: say <205> cmp <45>

[09:45] <camelia> rakudo-moar a988e79f9: OUTPUT: «More␤»

[09:46] <Voldenet> m: say "205" cmp "45"

[09:46] <camelia> rakudo-moar a988e79f9: OUTPUT: «Less␤»

[09:46] <Voldenet> but it's especially ridiculous when you use <> which is rare in actual code

[09:47] <Voldenet> because actual code usually has input from user that's Str or Int

[10:14] *** crnlskn left
[10:20] *** stanrifkin joined
[10:45] <lizmat> fwiw, I've come to like:

[10:45] <lizmat> m: dd q:w/foo 42 bar/

[10:45] <camelia> rakudo-moar a988e79f9: OUTPUT: «("foo", "42", "bar")␤»

[10:45] <lizmat> as an alternative for:

[10:46] <lizmat> m: dd <foo 42 bar>

[10:46] <camelia> rakudo-moar a988e79f9: OUTPUT: «("foo", IntStr.new(42, "42"), "bar")␤»

[10:47] <Voldenet> m: dd q:w<foo 42 bar>

[10:47] <camelia> rakudo-moar a988e79f9: OUTPUT: «("foo", "42", "bar")␤»

[11:04] <lizmat> in the latter case < > are just interpreted as delimiters without special meaning

[11:29] *** apac joined
[11:31] *** wayland joined
[11:32] *** wayland76 left
[13:14] <disbot> <antononcube> Ha -- 620+ views, but some down-votes too. And I am curious why... 🙂

[13:14] <disbot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1413512623512752148/Raku-Agentic-AI-reddit-post-stats.png?ex=68bc33b7&is=68bae237&hm=c2c8a71513d8f199c33c8960e19502af0a8a13d672aabc478f7e4d565a282d9d&

[13:35] *** Geth left
[13:35] *** Geth joined
[13:45] *** crnlskn joined
[13:53] *** lichtkind left
[14:00] <disbot> <jubilatious1_98524> @Voldenet but you can sort on two criteria, so IntStr isn't so bad.

[14:02] <disbot> <jubilatious1_98524> m: say <a bb aaa cccc>.sort({ .chars, .Str})

[14:02] <disbot> <Raku eval>  (a bb aaa cccc) 

[14:02] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(a bb aaa cccc)␤»

[14:03] <disbot> <jubilatious1_98524> m: say <a cccc bb 42 aaa 1>.sort({ .chars, .Str})

[14:03] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(1 a 42 bb aaa cccc)␤»

[14:03] <disbot> <Raku eval>  (1 a 42 bb aaa cccc) 

[14:04] <disbot> <jubilatious1_98524> m: say <a bb aaa cccc>.sort({ .chars, .Int})

[14:04] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(a bb aaa cccc)␤»

[14:04] <disbot> <Raku eval>  (a bb aaa cccc) 

[14:05] <disbot> <jubilatious1_98524> m: say <a cccc bb 42 aaa 1>.sort({ .chars, .Int})

[14:05] <disbot> <Raku eval>  Exit code: 1 Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏bb' (indicated by ⏏)   in block <unit> at main.raku line 1  

[14:05] <evalable6> jubilatious1_98524, rakudo-moar f56482941: OUTPUT: «(exit code 1) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '<HERE>bb' (indicated by <HERE>)␤  in block <unit> at /tmp/ey6CRDMfK2 line 1␤␤»

[14:08] *** Sgeo joined
[14:14] *** crnlskn left
[14:14] *** crnlskn joined
[15:10] *** human-blip left
[15:12] *** human-blip joined
[15:19] *** human-blip left
[15:21] *** human-blip joined
[15:34] *** human-blip left
[15:36] *** human-blip joined
[15:37] *** crnlskn left
[15:49] <Voldenet> jubilatious1_98524: it can be used that way, but sorting on .Str will allocate a list with strings, sort that list and then construct sorted list of allomorphs - it has to work that way because you're sorting different objects that way

[15:49] <Voldenet> you preserve .Int that way though

[15:51] *** sorenson left
[15:52] *** apac left
[15:54] *** sorenson joined
[16:23] *** abraxxa left
[17:08] *** apac joined
[17:14] *** Geth left
[17:15] *** Geth joined
[17:26] <lizmat> PSA: the Raku IRC logs server is down because of some unexpected maint work  :-(

[17:26] <lizmat> logging is still running, so no discussions should be lost

[17:40] *** Geth left
[17:40] *** Geth joined
[18:00] <lizmat> PSA: IRC logs servers is up again

[18:17] *** apac left
[18:46] *** crnlskn joined
[18:47] *** ACfromTX left
[19:03] *** ACfromTX joined
[19:51] *** crnlskn left
[19:52] *** itaipu left
[20:05] *** apac joined
[20:08] *** itaipu joined
[20:15] *** crnlskn joined
[20:39] *** Aedil left
[20:49] *** crnlskn left
[21:02] *** kst joined
[21:55] *** phogg left
[21:56] *** phogg joined
[22:37] *** apac left
[22:46] <lizmat> PSA: the IRC log server continues to hang...  will need to look more in depth tomorrow: until then, the server is down, but logs *are* still being collected

[23:38] *** derpydoo joined
[23:38] *** derpydoo left
[23:43] *** derpydoo joined
