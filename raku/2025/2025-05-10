[00:09] *** lichtkind left
[01:06] *** hulk joined
[01:07] *** kylese left
[01:48] *** thowe joined
[02:06] <discord-raku-bot> <coranila> m: my \sig = :(Int $a, Str $b); proto f(*@, *%) { if (|@, |%).Capture ~~ sig { say "matched" } }; f 1, "foo"'

[02:06] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´(exit code 1) ===SORRY!=== Error while compilin‚Ä¶¬ª

[02:06] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> e ~~ sig { say "matched" } }; f 1, "foo"‚èè'     expecting any of:         infix         infix stopper         postfix         statement end         statement modifier         statement modifier loop 

[02:06] <evalable6> coranila, Full output: https://gist.github.com/935045a401f76f976616a469ff4ceddb

[02:06] <discord-raku-bot> <coranila> m: my \sig = :(Int $a, Str $b); proto f(*@, *%) { if (|@, |%).Capture ~~ sig { say "matched" } }; f 1, "foo" # hhh

[02:06] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´(exit code 1) ===SORRY!=== Error while compilin‚Ä¶¬ª

[02:06] <discord-raku-bot> <Raku eval>  matched 

[02:06] <evalable6> coranila, Full output: https://gist.github.com/2665ec59758d6a70217b8ae6b32c1ccf

[02:07] <Voldenet> m: my \sig = :(Int $a, Str $b); proto f(*@, *%) { if (|@, |%).Capture ~~ sig { say "matched" } }; f 1, "foo" # hhh

[02:07] <camelia> rakudo-moar bb0857c8b: ( no output )

[02:09] <discord-raku-bot> <coranila> Xliff: you gotta 1) have the signature accessible at compiile time and need a constant as timo said and 2) need to sidestep normal dispatch because Signatures are for introspection

[02:10] <discord-raku-bot> <coranila> Voldenet: you're throwing away the parameters in the proto and there's no candidate that cares about them

[02:10] <discord-raku-bot> <coranila> that's "in the proto signature" to be precise; :(@) as a placeholder only says "match this, don't bind"

[02:11] <discord-raku-bot> <coranila> or rather, <sigil> vs <sigil> <topic> is that distinction, between matching Capture shape and biniding Capture arguments

[02:12] <discord-raku-bot> <coranila> although i think maybe a functional interface to runtime Routine composition could be cool, not sure what that would look like though

[02:12] <Voldenet> it's the same code you've posted, but on irc, made me quite puzzled because I thought that this should compile

[02:13] <Voldenet> and it indeed compilec

[02:13] <Voldenet> copiled*

[02:14] <discord-raku-bot> <coranila> oh!

[02:14] <discord-raku-bot> <coranila> that confirms that discord strips _

[02:14] <discord-raku-bot> <coranila> in the bridge somewhere

[02:14] <discord-raku-bot> <coranila> I used *@_

[02:14] <discord-raku-bot> <coranila> and *%_

[02:14] <discord-raku-bot> <coranila> in the proto signature

[02:15] *** hulk left
[02:15] <discord-raku-bot> <coranila> but :(*@, *%)

[02:15] *** kylese joined
[02:15] <Voldenet> ah, probably because you used it not within code block, so that got interpreted as markdown

[02:16] <discord-raku-bot> <coranila> yep, i suppose that means i should use code blocks here and rely on the bridge to translate those properly for irc!

[02:16] <discord-raku-bot> <coranila> m: my \sig = :(Int $a, Str $b); proto f(*@_, *%_) { if (|@_, |%_).Capture ~~ sig { say "matched" } }; f 1, "foo" # ?

[02:16] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus statement at /home/glot/main.raku:1 ------> <BOL>‚èèmy \sig = :(Int $a, Str $b); proto f(     expecting any of:         prefix         statement list         term ```

[02:16] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´matched‚ê§¬ª

[02:16] <discord-raku-bot> <coranila> hmmm

[02:17] <discord-raku-bot> <coranila> so it's either one or the other

[02:17] <discord-raku-bot> <coranila> as in, either the bridge gets it right or discord gets it right

[02:17] <discord-raku-bot> <coranila> ...patches welcome? :-)

[02:18] <Voldenet> bridge does the correct thing, I guess, assuming it's text you're using

[02:19] <discord-raku-bot> <coranila> what else would i be using? speech? images?

[02:20] <Voldenet> I mean, uh, if you wanted to actually use markdown, then it translates things properly

[02:20] <Voldenet> but markdown collides with code and bridge has no way to know easily

[02:20] <discord-raku-bot> <coranila> ah but i dont have the choice of usiing markdown or not if i cannot use code blocks

[02:20] <discord-raku-bot> <coranila> and usinig code blocks means the discord side bot cant parse iit

[02:20] <Voldenet> indeed, I'd say that discord bot should understand that

[02:21] <discord-raku-bot> <coranila> and that's a severe flaw in parity between IRC and discord

[02:21] <discord-raku-bot> <coranila> maybe there's a format i dont know for the discord eval bot shrug

[02:22] <discord-raku-bot> <coranila> does feel a lot like generational friction, which is confusing because I'm almost 40, I'm an elder millennial, i dont belong to IRC or discord, where's my ICQ password :'-)

[02:22] <Voldenet> i think every irc and discord message should include content-type header, that'd solve it ;)

[02:26] <Voldenet> I bet the bot on `comp.lang.raku.misc` would've handled it better

[02:40] <discord-raku-bot> <coranila> no clue; usenet is part of a mysterious ancient past to me personally!

[03:45] *** kylese left
[03:48] *** kylese joined
[03:59] *** stanrifkin_ joined
[04:02] *** stanrifkin left
[05:45] *** Aedil joined
[05:58] <discord-raku-bot> <melezhik.> wayland: thanks for feedback .   I have updated the first diagram hopefully to make it more readable.   As for svg / UML stuff I intentionally wanted to keep things simple and not going into much details, so I thought that ascii graphics would be just enough  and some details are intentionally omitted , so those ‚Äúpictures‚Äù are just visual additions to the text.   I have split the first paragraph in the Sparrow

[05:58] <discord-raku-bot> section to separate sentences.

[06:49] *** apac left
[06:54] *** Aedil left
[07:11] *** razetime joined
[07:12] *** Guest85 joined
[07:19] <discord-raku-bot> <wayland76> Just while we're talking signatures, I realised that queries (generally, but especially in the Logic Programming sense) are the opposite of functions.  With a function, you provide definite data (a capture), and the one with the matching signature is returned.  With a query, you effectively provide a signature, and the matching data (a Capture) is returned.

[07:19] <discord-raku-bot> <wayland76> That's what I was going to try to do with signatures.

[07:20] <discord-raku-bot> <wayland76> (there's more to it than that, but that's a starter üôÇ )

[07:46] *** [Coke] left
[07:48] *** [Coke] joined
[07:50] *** razetime left
[07:53] *** lichtkind joined
[08:15] *** Guest85 left
[08:18] *** stanrifkin_ left
[08:39] <discord-raku-bot> <coranila> that sounds like given/gather/when/take to md

[08:39] <discord-raku-bot> <coranila> *me

[08:40] <discord-raku-bot> <coranila> maybe &categorize, &classify, or &rotor also can do things in that context?

[08:47] *** Aedil joined
[09:14] *** PaulW2U left
[09:23] <wayland> coranila: I was thinking that if you had a table called, say, "People", you could do People($name where * ~~ /^A/, $age where * > 30) or something.  

[09:27] <wayland> melezhik: Try this (you may want to tweak it more): Sparrow is a Raku automation framework that provides a full experience for Sparky job developers, without the need for a deep knowledge of Raku. Also, underlying tasks could be written in any of the many languages supported by the framework. The following is a simple diagram of Sparky-Sparrow integration:

[09:30] <discord-raku-bot> <coranila>  m: class Person { has $.age; has $.name }; given new Person: :39age, name => <crnl> -> $_ { when *.age > 35 && *.name eq "crnl" { say "hey thats me!" }; default { .say } } 

[09:30] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´hey thats me!‚ê§¬ª

[09:30] <discord-raku-bot> <coranila> wayland: that look about right?

[09:33] <discord-raku-bot> <coranila> there's also some unpacking syntax I don't remember right now that lets you put the results of *.name and *.age into a variable for the block directly

[09:34] <discord-raku-bot> <coranila> something like @($head, *@tail) i think, but maybe that doesn't generalize to arbitrary methods, or at least not easily; as i said, i don't recall the precise syntax :-)

[09:37] <wayland> coranila: Yes, but that's only one person; I'm thinking it would be a collection.  I have to admit, I'm kind of avoiding thinking about this until after I sort out Table-Oriented Programming more, because I don't really know Logic Programming (I've read about it, but not done much), and I think I still have more thinking to do about it.  

[09:37] <wayland> I'm wanting to get some of these declarative-type structures into Raku (ie. as Slangs), but haven't got my thoughts nailed down well enough to do it yet :) .  

[09:38] <discord-raku-bot> <coranila> well you can m %age-groups = @people.categorize({ $_.age div 5 }) or such

[09:38] <discord-raku-bot> <coranila> *my %age-groups

[09:39] <discord-raku-bot> <coranila> or is that &classify? i admit i'm not 100% on the semantics between those two!

[09:39] <wayland> Yeah, that might end up being the go.  

[09:39] <wayland> Thanks!  

[09:53] *** Sgeo left
[09:55] <Voldenet> the diff is that classify groups by single value, categorize puts elements in categories

[09:56] <Voldenet> so you can have item in multiple categories

[09:57] <discord-raku-bot> <coranila> ah, so classify({.age}) and categorize({ .age div 5 })?

[09:57] <Voldenet> e.g. my %groups = @people.categorize({ $_.age div 5, $_.income })

[09:58] <Voldenet> maybe some concrete example

[09:58] <Voldenet> m: say (^10).categorize({ ($_ %% 2 ?? "even" !! "odd"), ($_ %% 3 ?? |("div 3") !! |()) })

[09:58] <camelia> rakudo-moar bb0857c8b: OUTPUT: ¬´{div 3 => [0 3 6 9], even => [0 2 4 6 8], odd => [1 3 5 7 9]}‚ê§¬ª

[09:59] <Voldenet> m: say (^10).classify(*.is-prime)

[09:59] <camelia> rakudo-moar bb0857c8b: OUTPUT: ¬´{False => [0 1 4 6 8 9], True => [2 3 5 7]}‚ê§¬ª

[10:08] <discord-raku-bot> <coranila> m: my @ten = ^10; .say for @ten.classify(&so), @ten.classify(.&{+]);

[10:08] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´(exit code 1) ===SORRY!=== Error while compilin‚Ä¶¬ª

[10:08] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Prefix + requires an argument, but no valid term found. Did you mean + to be an opening bracket for a declarator block? at /home/glot/main.raku:1 ------> r @ten.classify(&so), @ten.classify(.&{+‚èè]);     expecting any of:         prefix 

[10:08] <evalable6> coranila, Full output: https://gist.github.com/62e8ef093577250624eb7cac9e1f5e51

[10:08] <discord-raku-bot> <coranila> ah of course not dotty, silly me ..

[10:09] <discord-raku-bot> <coranila> m: my @ten = ^10; .say for @ten.classify(&so), @ten.classify(&{+]);

[10:09] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Prefix + requires an argument, but no valid term found. Did you mean + to be an opening bracket for a declarator block? at /home/glot/main.raku:1 ------> or @ten.classify(&so), @ten.classify(&{+‚èè]);     expecting any of:         prefix 

[10:09] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´(exit code 1) ===SORRY!=== Error while compilin‚Ä¶¬ª

[10:09] <evalable6> coranila, Full output: https://gist.github.com/d0904e048bc32720addffbc82350ebd1

[10:09] <discord-raku-bot> <coranila> oh hm!

[10:11] <discord-raku-bot> <coranila> m: my @ten = ^10; .say for @ten.classify(&so), @ten.classify(&[+]); # there we go!

[10:11] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´{False => [0], True => [1 2 3 4 5 6 7 8 9]}‚ê§{0 => [0], 1 => [1], 2 => [2], 3 => [3], 4 => [4], 5 => [5], 6 => [6], 7 => [7], 8 => [8], 9 => [9]}‚ê§¬ª

[10:11] <discord-raku-bot> <Raku eval>  {False => [0], True => [1 2 3 4 5 6 7 8 9]} {0 => [0], 1 => [1], 2 => [2], 3 => [3], 4 => [4], 5 => [5], 6 => [6], 7 => [7], 8 => [8], 9 => [9]} 

[10:12] <discord-raku-bot> <coranila> that definitely clears up any clarity because i still don't understand the difference between categorize and classify!

[10:13] <discord-raku-bot> <coranila>  m: my @ten = ^10; .say for @ten.classify({$_ % 3 }), @ten.categorize({$_ % 3 }) # 

[10:13] <evalable6> coranila, rakudo-moar bb0857c8b: OUTPUT: ¬´{0 => [0 3 6 9], 1 => [1 4 7], 2 => [2 5 8]}‚ê§{0 => [0 3 6 9], 1 => [1 4 7], 2 => [2 5 8]}‚ê§¬ª

[10:22] <ab5tract> It boils down to the optional named args, I guess

[10:24] <ab5tract> lol, not really

[10:24] <ab5tract> I didn‚Äôt look super closely but they appear at first glance to take the same optional arguments‚Ä¶.

[11:19] <discord-raku-bot> <melezhik.> wayland: thanks - will use this

[11:46] *** floyza joined
[12:23] <discord-raku-bot> <librasteve> @coranila for discord m: operation, I recommend using backticks at start end of the code (ie after the m:)

[12:24] <discord-raku-bot> <librasteve> this seems to be not too annoying for IRC onlookers

[12:24] <discord-raku-bot> <librasteve> Discord is also good for multiline code with triple backticks ... but I suspect this could be painful over on IRC

[12:25] <discord-raku-bot> <coranila> this makes the bot on discord misunderstand the line, doesnt it?

[12:25] <discord-raku-bot> <coranila> at least under markdown edge cases

[12:26] <discord-raku-bot> <coranila> that's why i use `` at all after all

[12:26] <discord-raku-bot> <librasteve> m: say 'yo';

[12:26] <evalable6> librasteve, rakudo-moar bb0857c8b: OUTPUT: ¬´yo‚ê§¬ª

[12:26] <discord-raku-bot> <Raku eval>  yo 

[12:26] <discord-raku-bot> <librasteve> i've never seen that with backticks

[12:27] <discord-raku-bot> <librasteve> (iiuc)

[12:31] <discord-raku-bot> <coranila> here

[12:36] *** lichtkind left
[13:20] *** human-blip left
[13:22] *** human-blip joined
[14:00] *** lichtkind joined
[15:07] *** wayland76 joined
[15:08] *** wayland left
[15:23] *** lichtkind left
[15:25] <grondilu> .seen antoncube

[15:25] <tellable6> grondilu, I haven't seen antoncube around, did you mean antononcube?

[15:25] <grondilu> .seen antononcube

[15:25] <tellable6> grondilu, I saw antononcube 2025-05-06T16:33:34Z in #raku: <antononcube> @lizmat I was joking for the "wind direction." The use of "Map::Match" was suggested by you at some point when discussing the emojis package.

[15:26] <grondilu> antononcube uses raku through JupyterLabs I think.  Is that 'https://github.com/bduggan/raku-jupyter-kernel' or is there a better one?

[15:32] *** wayland76 left
[15:35] *** wayland76 joined
[15:39] *** AlexDaniel joined
[16:35] *** razetime joined
[16:42] <discord-raku-bot> <librasteve> yeah Jupyter::Kernel (bduggan) is the base code, @antononcube developed that to Jupyter::Chatbook and added lots of LLM prompt engineering goodies

[16:46] *** lizmat joined
[16:51] <Geth> ¬¶ ecosystem: c97f7c5e81 | (Elizabeth Mattijsen)++ | META.list

[16:51] <Geth> ¬¶ ecosystem: Brian Duggan's modules don't live here anymore

[16:51] <Geth> ¬¶ ecosystem: 

[16:51] <Geth> ¬¶ ecosystem: They are either on the zef or CPAN ecosystems

[16:51] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/c97f7c5e81

[17:15] *** apac joined
[17:28] *** stanrifkin joined
[18:15] *** lizmat left
[18:35] *** AlexDaniel left
[18:36] <grondilu> librasteve: noted

[18:48] *** lizmat joined
[18:49] *** lizmat left
[18:49] *** lizmat joined
[19:28] *** apac left
[19:32] *** Sgeo joined
[19:37] <Xliff> coranila: So Signatures are for a specific use case rather than a generic one. That seems like a waste of potential, but that explains alot.

[19:38] <Xliff> My whole point is that I would like sub definitions to be reusable for NativeCall function pointers. There is no usable way to say: "sub c_callback ( uint32, &func (uint32, gpointer, gpointer --> gboolean) ) is native..."

[19:38] <Xliff> You always have to specify that signature every time.

[19:39] <Xliff> It makes NativeCall's use in large callback-involving projects (which is every GUI toolbox out there) a lot more dicey than it needs to be.

[19:40] *** guifa joined
[19:59] *** lizmat_ joined
[19:59] *** lizmat left
[20:01] *** apac joined
[20:05] *** Xliff left
[20:31] *** lizmat_ left
[20:31] *** lizmat joined
[20:54] *** lizmat left
[20:54] *** MasterDuke joined
[20:55] *** lizmat joined
[21:35] *** Aedil left
[22:06] *** lizmat left
[22:09] *** MasterDuke left
[22:28] <discord-raku-bot> <coranila> Yeah, there's a bit of a pit around Routine and Callable and the type system and such

[22:29] <discord-raku-bot> <coranila> I'm not sure if Signature was planned to be constructive originally - i'd think so, but maybe not - from what I know, internally Signatures are for introspection and trial binding and not for object definition

[22:31] <discord-raku-bot> <coranila> This kind of relates to my thoughts about how the type system is missing a third bottom, but that's a completely different pile of what

[22:32] <discord-raku-bot> <coranila> I do reserve the right to sound overly confident and saying someting wrong because I did not verify in advance, in any case 0:-)

[22:56] *** floyza left
[23:12] *** silug7 joined
[23:12] *** floyza joined
[23:18] *** silug left
[23:18] *** oodani left
[23:18] *** sftp left
[23:18] *** dpk left
[23:18] *** atweedie left
[23:18] *** silug7 is now known as silug

[23:21] <discord-raku-bot> <coranila> made me think of &wrap vs &assuming, and how the latter seems to be irreversible such that we cannot decompose the priimed anon into the original Routine and arguments

[23:21] <discord-raku-bot> <coranila> which probably could be solved on the same layer, by extending Signature such that it functions as a functional interface for declaration as well?

[23:22] <discord-raku-bot> <coranila> which i think is what we're doing during trial bind anyway, but opaquely vis the HLL

[23:23] <discord-raku-bot> <coranila> hmm, that however does seem to lead back to the missing explicit bottom type for the &-space

[23:24] *** oodani joined
[23:24] *** dpk joined
[23:24] *** atweedie joined
[23:32] *** apac left
[23:41] <discord-raku-bot> <antononcube> @grondilu I was traveling‚Ä¶ Raku Jupyter notebooks can be used in JupyeterLabs, but since I cannot make JavaScript plots there, I use Jupyeter notebooks in VSCode.

