[00:30] <SmokeMachine> antononcube: if you’d like to use some kind of template, would you like to try Cromponent? It uses Cro templates…

[01:06] *** stanrifkin joined
[01:30] *** hulk joined
[01:31] *** kylese left
[01:41] *** ACfromTX left
[01:52] *** derpydoo joined
[01:54] *** ACfromTX joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:22] *** gabiruh_ joined
[02:23] *** gabiruh left
[02:50] *** wayland76 left
[02:50] *** wayland joined
[03:02] *** derpydoo left
[03:30] *** undoencalma joined
[03:42] *** stanrifkin_ joined
[03:45] *** stanrifkin left
[03:58] *** undoencalma left
[04:22] *** PipStuart joined
[04:30] *** kylese left
[04:34] *** kylese joined
[04:36] *** Aedil joined
[05:05] *** guifa left
[05:30] *** kylese left
[05:33] *** kylese joined
[05:37] *** Aedil left
[05:41] *** wayland left
[05:42] *** Aedil joined
[06:54] *** wayland joined
[06:54] *** wayland left
[06:54] *** wayland76 joined
[07:04] *** timo left
[07:07] *** timo joined
[07:09] <discord-raku-bot> <librasteve> MAsterDuke: thanks - now merged

[07:09] <tellable6> librasteve, I'll pass your message to MasterDuke

[07:44] *** apac joined
[08:05] *** apac left
[08:27] *** derpydoo joined
[08:54] *** yewscion_ left
[08:54] *** yewscion_ joined
[08:54] *** Xliff_ joined
[08:55] *** samebchase4 joined
[08:55] *** gfldex left
[08:55] *** samebchase left
[08:55] *** samebchase4 is now known as samebchase

[08:56] *** gfldex joined
[08:57] *** Xliff__ left
[09:03] *** wayland76 left
[09:03] *** wayland joined
[09:22] *** sena_kun joined
[09:41] *** Guest96 joined
[09:44] <Guest96> Hello, can somebody explain to me why `.say for 1..3;` will print the every number of the range, but if I put the range in variable like `my $myrange = 1 .. 3;` and then try to `.say for $myrange;` it prints 1..3 ?

[09:45] *** Guest96 left
[09:57] *** wayland76 joined
[09:57] *** wayland left
[10:00] <lizmat> because the range 1..3 is itemized in the container

[10:00] <lizmat> and items don't iterate

[10:10] <grondilu> is there such a thing as "alternation without repetition"?  Like I'd like to match a sequence of tokens <a>, <b>, <c> ... but with at most one occurence of each.  An arrangement, basically.

[10:12] * grondilu checks wikipedia for the word "arrangement"

[10:12] * grondilu learns it's just the French for "partial permutation" : https://en.wikipedia.org/wiki/Partial_permutation

[10:12] <lizmat> [ <a> | <b> | <c> ]?

[10:12] <lizmat> or:

[10:13] <lizmat> [ <.a> | <.b> | <.c> ]?

[10:13] <lizmat> if you're not interested in which token matched

[10:16] <grondilu> no, I'd like to match abc or bca, but not aab nor abb

[10:17] <grondilu> kind of tricky to do with regex, right?

[10:18] <lizmat> yeah, nothing comes to mind at the moment

[10:19] <discord-raku-bot> <wambash> m: my $ab = "ab"; say "1ab2".match: /<?after $ab> \d/; say "1ab2".match: /\d <?before $ab>/

[10:19] <evalable6> wambash, rakudo-moar 1a8c68136: OUTPUT: «Nil␤｢1｣␤»

[10:19] <discord-raku-bot> <Raku eval>  Nil ｢1｣ 

[10:21] <grondilu> I guess with code assertion !$++ in each subregex

[10:35] <grondilu> m: say "aab" ~~ /[ a <?{ !$++ }> | b | c]+/

[10:35] <camelia> rakudo-moar 1a8c68136: OUTPUT: «｢aab｣␤»

[10:37] <grondilu> m: say "aab" ~~ /[ a <?{ note $++; !$++ }> | b | c]+/

[10:37] <camelia> rakudo-moar 1a8c68136: OUTPUT: «0␤｢aab｣␤0␤»

[10:37] <grondilu> m: say "aab" ~~ /[ a <?{ !(state $)++ }> | b | c]+/

[10:37] <camelia> rakudo-moar 1a8c68136: OUTPUT: «｢aab｣␤»

[10:37] <grondilu> really?

[10:37] <grondilu> m: say "aab" ~~ /[ a <?{ note (state $n)++; !$++ }> | b | c]+/

[10:37] <camelia> rakudo-moar 1a8c68136: OUTPUT: «0␤｢aab｣␤0␤»

[10:37] <grondilu> m: say "aab" ~~ /[ a { note (state $n)++ } | b | c]+/

[10:37] <camelia> rakudo-moar 1a8c68136: OUTPUT: «0␤｢aab｣␤0␤»

[10:38] <grondilu> *

[10:39] <grondilu> m: my %cache; say "aab" ~~ /[ a <?{ !%cache<a>++ }> | b | c]+/

[10:39] <camelia> rakudo-moar 1a8c68136: OUTPUT: «｢a｣␤»

[10:39] <grondilu> m: my %cache; say "acb" ~~ /[ a <?{ !%cache<a>++ }> | b | c]+/

[10:39] <camelia> rakudo-moar 1a8c68136: OUTPUT: «｢acb｣␤»

[10:39] <lizmat> !@tokens.first( $string.comb($_, 2) == 2 )

[10:40] <lizmat> !@tokens.first({ $string.comb($_, 2) == 2 })

[10:41] <grondilu> that's not a regex though.  Initially I wanted something to put in a grammar.

[10:42] <lizmat> you could put this code in a token?   :-)

[10:43] <grondilu> meh

[10:43] <lizmat> I mean, the idea of having a regex syntax to do what you want, would be nice

[10:44] <lizmat> but under the hood, it would probably turn out to be something logically the same as the code I just posted

[10:59] *** Sgeo left
[11:30] <grondilu> unrelated : I need to sort chess move scores.  Problem is, forced mates should trump all other moves, regardless of their evaluation.

[11:30] <grondilu> so I guess I could use infinite ordinals or something.

[11:31] * grondilu considers writing an omega function

[11:31] <stanrifkin_> Engine evaluation scores?

[11:32] <stanrifkin_> This is in pawn units. And in case of forced mate with another notation. #2 for mate in two for example.

[11:32] <grondilu> there are three kinds : finite evaluation, lower and upper bounds, and forced mate.

[11:32] <grondilu> it'd be nice if I had a unique comparison for them all.

[11:33] <grondilu> thus my idea of using omega ordinals for forced mates.

[11:34] <grondilu> I could write an `Ordinals` module, I suppose

[11:35] <grondilu> lower and upper bounds can map to -Inf and +Inf, though.

[11:42] <grondilu> mate in 3 should be -3ω

[11:50] *** melezhik joined
[11:52] <melezhik> .tell grondilu: you may try Sparrow task check which is a sort of regex based engine - https://gist.github.com/melezhik/58cf7687acc54238bffc20d220cd9be2 , I am not however sure if this is exactly what's you looking for 

[11:52] <tellable6> melezhik, I'll pass your message to grondilu

[12:05] *** derpydoo left
[12:11] *** melezhik left
[12:26] <grondilu> (or rather ω-3)

[12:26] <tellable6> 2025-04-05T11:52:46Z #raku <melezhik> grondilu: you may try Sparrow task check which is a sort of regex based engine - https://gist.github.com/melezhik/58cf7687acc54238bffc20d220cd9be2 , I am not however sure if this is exactly what's you looking for 

[12:33] *** lichtkind joined
[12:43] *** apac joined
[13:22] *** Altai-man joined
[13:24] *** sena_kun left
[13:25] *** guifa joined
[13:31] <discord-raku-bot> <librasteve> @antononcube ...  initial knee jerk reaction to "Air as Shiny Apps Alternative" is (i) this is definitely the vision for Air ... a library of reusable web components like the slider widget in your example, (ii) I think we could do the example you shared with two new components - a slider and an SVG chart - both using HTMX for interactivitiy (iii) the slider would be straightforward with event stream done like the

[13:31] <discord-raku-bot> Search box here :hx-trigger<keyup changed delay:500ms, search>,  https://github.com/librasteve/Air-Play/blob/a042d7e240f4e49419c375d920f2e960eb29be7b/lib/Air/Play/Site.rakumod#L29, we would like need to wire up some raku Supplies and Taps to handle the event stream on the server side (iv) charts would be a bit trickier depending on the fatures needed ... I would lean toward an SVG / HTMX combination - do you have a favourite

[13:31] <discord-raku-bot> SNG chart library to start with(?) ... I would be happy to add this to the backlog but would like to get an idea of the MVP needed to make this viable surely the slider is one of several components that would be needed?

[13:32] <discord-raku-bot> <librasteve> ^^ this now in an issue here ... https://github.com/librasteve/Air/issues/11 for futher elaboration and nailing the MVP deliverables

[13:36] <discord-raku-bot> <librasteve> Guest96: I would just like to extend lizmat's answer, if you put your range in a raku @ variable, then it works as you wish:

[13:36] <discord-raku-bot> <librasteve> m: my @myrange = 1..3; .say for @myrange

[13:36] <evalable6> librasteve, rakudo-moar 1a8c68136: OUTPUT: «1␤2␤3␤»

[13:36] <discord-raku-bot> <Raku eval>  1 2 3 

[13:36] <lizmat> note that in that case, the array is filled with all of the elements in the range

[13:37] <lizmat> which could be a lot if you go 1 .. 10000000

[13:37] <lizmat> afk&

[13:40] <discord-raku-bot> <librasteve> well, yes - after a while you will get to know that ranges are lazy and that the array assignment expands them ... but as a newcomer to raku, likely from non lazy languages, then using the @ variable for many things and the $ variable for one thing  imo follows the principle of least surprise

[14:42] <grondilu> I'm trying to turn an array of pairs str => Real into the same array but with cummulated values sums.

[14:43] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 5; @a .= map: { .key => $sum += .value }

[14:43] <camelia> rakudo-moar 1a8c68136: ( no output )

[14:43] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 5; @a .= map: { .key => $sum += .value }; say @a;

[14:43] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[a => 3.481080901324969 b => 3.481080901324969 c => 3.481080901324969 d => 3.481080901324969 e => 3.481080901324969]␤»

[14:43] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 3; say @a .= map: { .key => $sum += .value };

[14:43] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[a => 1.7627324343330133 b => 1.7627324343330133 c => 1.7627324343330133]␤»

[14:43] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 3; say @a.map: { .key => $sum += .value };

[14:43] <camelia> rakudo-moar 1a8c68136: OUTPUT: «(a => 0.6534314562401136 b => 1.4464892627182224 c => 2.190641317438949)␤»

[14:44] <grondilu> what am I missing here?

[14:44] <grondilu> notice that it works fine if I'm not dealing with pairs but just numbers

[14:45] <grondilu> m: my $sum = 0; my @a = rand xx 3; say @a.=map: { $sum += $_ };

[14:45] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[0.43712039670076763 1.0023124961196177 1.4828298577032393]␤»

[14:46] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 3; say @a = @a.keys => [\+] @a.values;

[14:46] <camelia> rakudo-moar 1a8c68136: OUTPUT: «Cannot resolve caller Numeric(Pair:D: ); none of these signatures matches:␤    (Mu:U \v:: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[14:46] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 3; say @a = @a>>.key => [\+] @a>>.value;

[14:46] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[[a b c] => (0.9336132678748512 1.7509098305802246 2.1675409440551583)]␤»

[14:46] <grondilu> I guess I can do it like that

[14:47] <grondilu> but I don't get what was wrong in the command above.

[14:51] <discord-raku-bot> <antononcube> @librasteve "JavaScript::Google::Charts" provides (embeddable) HTML graphics and they can have sliders. I was thinking about finding a good non-Raku library that does SVG graphics and link to it in Raku in some way.

[14:53] <discord-raku-bot> <antononcube> Again, if "JavaScript::Google::Charts" can be used in "Air" and "HTMX" then that is much closer to ideal. (It will be at least "very good.")

[14:56] *** abraxxa-home joined
[14:56] *** abraxxa-home left
[14:58] *** abraxxa-home joined
[15:00] <discord-raku-bot> <nahita3882> grondilu: in the nonworking command all the values of your pairs "look at" the same container that $sum is associated with

[15:00] <discord-raku-bot> <nahita3882> therefore all have the last value $sum has

[15:01] <discord-raku-bot> <nahita3882> so much so that if you do, e.g., $sum = 72; after the fact, and then print @a, you'll see all 72s

[15:01] <discord-raku-bot> <nahita3882> so if you strip off the container when making the pairs, you'll have the desired effect

[15:01] <discord-raku-bot> <nahita3882> e.g., ($sum += .value).self or other N ways of decontainerization should work

[15:03] <grondilu> %

[15:04] <grondilu> ^sorry, typed by mistake

[15:05] *** stanrifkin_ left
[15:05] <grondilu> nahita3882: I really thought scalar variables were immune to that kind of tipfall

[15:05] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 5; say @a .= map: { .key => ($sum += .value)<> }

[15:05] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[a => 0.9763851204704463 b => 1.3078215989256017 c => 1.5478172090406122 d => 2.3583733374901206 e => 2.5680499796797016]␤»

[15:06] <grondilu> seems like you're right, though.

[15:06] <grondilu> baffles me tbh

[15:06] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 5; say @a .= map: { .key => +($sum += .value) }

[15:06] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[a => 0.945161305362382 b => 1.2269895564958269 c => 2.0093846507942326 d => 2.8348487689128192 e => 2.835551264392931]␤»

[15:06] <grondilu> for good measure:

[15:07] <grondilu> m: my $sum = 0; my @a = 'a'..* Z=> rand xx 5; say @a .= map: { .key => $sum += .value }

[15:07] <camelia> rakudo-moar 1a8c68136: OUTPUT: «[a => 2.6147597830886067 b => 2.6147597830886067 c => 2.6147597830886067 d => 2.6147597830886067 e => 2.6147597830886067]␤»

[15:07] <grondilu> damn

[15:10] *** stanrifkin joined
[15:20] <discord-raku-bot> <nahita3882> scalar variables are rather exactly the source of this, no?

[16:58] *** apac left
[16:58] *** Aedil left
[17:04] <discord-raku-bot> <librasteve> grondilu: its not too baffling if you look at it like this ... .key => $sum makes a Pair where the value is the scalar container $sum. Then you do some fiddling with the value in $sum via a repeated $sum += .value. But every time you are making a Pair with the same container $sum. So every Pair you have has the same container and this contains the last value you put in it.

[17:10] *** Aedil joined
[17:16] <discord-raku-bot> <antononcube> @librasteveWhen I try to install "Air" installing of "Data::Dump::Tree" fails. Had to insall it with zef install Data::Dump::Tree --/test : maybe that should be in the README of "Air".

[17:35] *** abraxxa-home left
[17:35] *** melezhik joined
[17:35] <melezhik> .

[17:36] <melezhik> here is another alternative solution for parsing netrc file, please vote IF you like it - https://stackoverflow.com/a/79557308/5147708 

[17:44] <discord-raku-bot> <librasteve> @antononcube tx - i will just rm it from the deps

[17:47] <discord-raku-bot> <librasteve> ok latest release 0.0.13 is solved

[17:53] *** melezhik left
[17:54] *** apac joined
[18:15] *** apac left
[18:51] *** Sgeo joined
[19:01] *** maylay left
[19:02] *** maylay joined
[19:36] *** apac joined
[20:15] *** Aedil left
[20:23] *** codesections joined
[20:25] *** codesections left
[21:34] *** apac left
[21:38] *** ACfromTX left
[21:52] *** ACfromTX joined
[22:25] <discord-raku-bot> <librasteve> made an issue for Data::Dump::Tree https://github.com/nkh/P6-Data-Dump-Tree/issues/65

[22:25] <discord-raku-bot> <librasteve> hopefully nhk will respond

[22:25] *** guifa left
[22:39] *** guifa joined
[22:43] *** Altai-man left
[22:48] <[Coke]> added some details - looks like the test is depending on something it shouldn't.

[22:49] *** wayland76 left
[22:50] *** wayland76 joined
[23:44] *** lichtkind left
