[00:23] *** topnep left
[00:26] *** topnep joined
[00:41] *** Sgeo joined
[01:04] *** yewscion joined
[01:09] *** yewscion left
[01:35] *** leah2 left
[01:46] *** kylese left
[01:46] *** kylese joined
[01:55] *** leah2 joined
[02:15] *** kylese left
[02:15] *** kylese joined
[02:23] *** yewscion joined
[02:27] *** yewscion left
[02:56] *** yewscion joined
[03:01] *** yewscion left
[03:45] *** kylese left
[03:49] *** kylese joined
[06:43] *** topnep left
[06:45] *** topnep joined
[07:07] *** Sgeo left
[07:14] *** Aedil joined
[07:22] *** librasteve_ joined
[07:47] *** Aedil left
[07:51] *** Aedil joined
[07:59] <patrickb> Xliff: I'm mostly on sourcehut as well ( https://sr.ht/~patrickb/ ). What's your nick?

[07:59] *** disbot1 left
[07:59] *** disbot1 joined
[08:12] *** dakkar joined
[08:24] * [Coke] waves from a train

[08:31] *** topnep_ joined
[08:32] <Xliff_> patrickb: xliff, of course! ;)

[08:32] *** lichtkind joined
[08:34] *** topnep left
[08:53] <Xliff_> Good morning. 

[08:54] <Xliff_> In this example: token a { 'A' }; token b { 'b' }; regexp ab { <a>+<b>* }; 

[08:54] <Xliff_> What would be the easiest way to get each of the above to run an associated sub?

[08:55] <Xliff_> Kinda like a Grammar with an Action class that does not need to match the whole string, and can match multiple times in said string (so no... not subparse)

[08:58] <Xliff_> Text::Subparser looks to be too specific for what I need.

[09:01] <lizmat> m: my token a { "A" { say "hi" } }; say "fAo" ~~ / <a> /

[09:01] <tellable6> 2025-06-04T20:30:35Z #raku-dev <japhb> lizmat Several terminal-related questions for you in #mugs

[09:01] <camelia> rakudo-moar e74d06944: OUTPUT: «hi␤｢A｣␤ a => ｢A｣␤»

[09:01] <lizmat> m: my token a { "A" { say "hi" } }; say "fAo" ~~ / <.a> /

[09:01] <camelia> rakudo-moar e74d06944: OUTPUT: «No such method 'a' for invocant of type 'Match'.  Did you mean 'at'?␤  in block <unit> at <tmp> line 1␤␤»

[09:01] <lizmat> heh

[09:04] <Xliff_> m: my token a { "A" }; &a.^name.say

[09:04] <camelia> rakudo-moar e74d06944: OUTPUT: «Regex␤»

[09:05] <dakkar> m: my token a { "A" { say "hi" } }; say "fAo" ~~ / <a> / # this works

[09:05] <camelia> rakudo-moar e74d06944: OUTPUT: «hi␤｢A｣␤ a => ｢A｣␤»

[09:06] <lizmat> m: say " a" ~~ / <ws> /   # this also captures "ws"

[09:06] <camelia> rakudo-moar e74d06944: OUTPUT: «｢ ｣␤ ws => ｢ ｣␤»

[09:06] <lizmat> m: say " a" ~~ / <.ws> /   # this doesn't

[09:06] <camelia> rakudo-moar e74d06944: OUTPUT: «｢ ｣␤»

[09:06] <lizmat> I sorta expected the same behaviour for <.a>

[09:07] <dakkar> outside of a grammar?

[09:07] <lizmat> well, wouldn't that makes sense?

[09:08] <dakkar> hmm. the invocant for that `.` is a Match, which doesn't have a `a` method

[09:08] <Xliff_> Regexp objects aren't called like normal subs, are they? CAN they be?

[09:08] <dakkar> (that's what the error message said)

[09:08] <lizmat> dakkar: yeah, I got that  :-)

[09:08] <dakkar> hmm

[09:09] <Xliff_> m: my token a { 'A'+ }; &a("AA").say

[09:09] <camelia> rakudo-moar e74d06944: OUTPUT: «No such method '!cursor_start' for string 'AA'.  Did you try to call a␤token / rule / regex directly?␤  in regex a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:09] <lizmat> anyways, looks like RakuAST has a compile-time issue with: my token a { "A" }; say "foo" ~~ / <.a> /

[09:09] <lizmat> Cannot stringify object of type QAST::Var

[09:10] <dakkar> aha! https://docs.raku.org/language/regexes#Subrules

[09:10] <dakkar> > If no capture is desired, a leading dot or ampersand will suppress it: <.named-regex> if it is a method declared in the same class or grammar, <&named-regex> for a regex declared in the same lexical context.

[09:10] <dakkar> m: my token a { "A" { say "hi" } }; say "fAo" ~~ / <&a> /

[09:10] <camelia> rakudo-moar e74d06944: OUTPUT: «hi␤｢A｣␤»

[09:10] <lizmat> TIL

[09:13] <Xliff_> So what would wrapping a Regex look like?

[09:19] <dakkar> m: my token a { 'A' }; my $b = &a.wrap( -> |x { say 'wrapped'; callsame }); 'AA' ~~ /<a>+/

[09:19] <camelia> rakudo-moar e74d06944: OUTPUT: «wrapped␤wrapped␤wrapped␤»

[09:19] <dakkar> something like that?

[09:26] <Xliff_> dakkar: Something like that...

[09:26] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( -> |x { my $r = callsame; say "wrapped"; $r }); 'AA' ~~ /<a>+/

[09:26] <camelia> rakudo-moar e74d06944: OUTPUT: «wrapped␤P6opaque: no such attribute '$!pos' on type Match in a Scalar when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[09:27] <Xliff_> So why didn't that work?

[09:27] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; say "wrapped"; $r }); 'AA' ~~ /<a>+/

[09:27] <camelia> rakudo-moar e74d06944: OUTPUT: «wrapped␤wrapped␤wrapped␤»

[09:28] <Xliff_> Ah! Wanted a sub

[09:28] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; say $r.^name.say; $r }); 'AA' ~~ /<a>+/

[09:28] <camelia> rakudo-moar e74d06944: OUTPUT: «Match␤True␤Match␤True␤Match␤True␤»

[09:28] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; $r.^name.say; $r }); 'AA' ~~ /<a>+/

[09:28] <camelia> rakudo-moar e74d06944: OUTPUT: «Match␤Match␤Match␤»

[09:28] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; $r.^name.say; $r }); 'B' ~~ /<a>+/

[09:28] <camelia> rakudo-moar e74d06944: OUTPUT: «Match␤Match␤»

[09:29] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; $r.gist.say; $r.^name.say; $r }); 'B' ~~ /<a>+/

[09:29] <camelia> rakudo-moar e74d06944: OUTPUT: «#<failed match>␤Match␤#<failed match>␤Match␤»

[09:29] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; $r.defined.say; $r }); 'B' ~~ /<a>+/

[09:29] <camelia> rakudo-moar e74d06944: OUTPUT: «True␤True␤»

[09:31] <Xliff_> m: my token a { 'A' }; my $b = &a.wrap( sub (|) { my $r = callsame; $r.so.say; $r }); 'B' ~~ /<a>+/

[09:31] <camelia> rakudo-moar e74d06944: OUTPUT: «False␤False␤»

[10:29] *** dakkar left
[10:33] *** dakkar joined
[10:35] *** topnep_ left
[10:36] *** topnep joined
[12:07] *** yewscion joined
[12:11] *** yewscion left
[12:40] *** topnep left
[12:42] *** topnep joined
[12:52] *** yewscion joined
[12:57] *** yewscion left
[13:17] *** apac left
[14:31] *** nine left
[14:31] *** camelia left
[14:36] *** camelia joined
[14:39] *** apac joined
[14:40] *** nine joined
[14:46] *** Sgeo joined
[15:14] *** camelia left
[15:14] *** nine left
[15:19] *** camelia joined
[15:23] *** nine joined
[15:54] *** bisectable6 left
[16:07] *** bisectable6 joined
[16:12] *** leedo left
[16:13] *** lizmat left
[16:17] *** leedo joined
[16:17] *** lizmat joined
[16:18] *** zostay left
[16:22] *** zostay joined
[16:30] *** dakkar left
[17:35] *** Guest71 joined
[17:35] <Guest71> hi

[17:35] <Guest71> anyone?

[17:39] <SmokeMachine> Hi!

[17:39] <Guest71> For the raku is used?

[17:40] <Guest71> What is the raku used for?*

[17:54] *** Guest71 left
[18:10] <disbot1> <librasteve> hi

[18:11] <disbot1> <librasteve> I use it for web sites

[18:11] <disbot1> <librasteve> others use for LLM promots

[18:12] <disbot1> <librasteve> Guest71: thanks for asking ... how did you hear about raku?

[18:36] <disbot1> <librasteve> .....

[18:38] <disbot1> <librasteve> i like it quiet

[18:39] <disbot1> <librasteve> means that the minions are busy coding

[18:40] <disbot1> <antononcube> Raku LLM functionalities are pretty good -- they provide uniform way of interacting with many LLM-providers and their different models. Raku chatbooks are one of the best ways to interact with LLMs in and merge them with other computations.

[18:41] <disbot1> <antononcube> (The other "best way" is to use Wolfram Language chatbooks.)

[18:43] <disbot1> <antononcube> BTW, the corresponding Python LLM functionalities I programmed work too, but only with OpenAI / ChatGPT. Google's PaLM and Gemini change(d) to much I have not had time to make the updates of corresponding Python packages.

[18:45] <disbot1> <antononcube> Back to Raku -- I find it fairly good of certain exploratory data analysis if the datasets a relatively small, say, less than 50k rows.

[18:46] *** stanrifkin joined
[18:46] <disbot1> <librasteve> how would youcharacterise raku in one sentence

[18:47] <disbot1> <antononcube> Using a the LLM prompt "SloganGenerate" or not?

[18:48] <disbot1> <librasteve> I already have the AI answer

[18:48] <disbot1> <antononcube> Hm... of course.

[18:50] <disbot1> <librasteve> "Raku: Do more, your way."

[18:50] <disbot1> <librasteve> thank god for AI

[18:51] <disbot1> <antononcube> "Raku: Seamless SLM and LLM interaction, powerful chatbooks, and smooth data exploration."

[18:51] <disbot1> <antononcube> SLM == Small Language Models (i.e. DSLs and grammars.)

[18:53] <disbot1> <librasteve> okaay - DSLLM

[18:53] <disbot1> <librasteve> not to be confused with DSLAM

[18:54] <disbot1> <antononcube> Digital Subscriber Line Access Multiplexer?

[18:55] <disbot1> <librasteve> yup

[18:55] <disbot1> <librasteve> cornerstone of ADSL

[18:55] <disbot1> <librasteve> (I said NOT to be confused)

[18:56] <disbot1> <antononcube> It would have never come to my mind...

[18:56] <disbot1> <librasteve> &afk

[19:10] *** arkiuat joined
[20:16] *** Aedil left
[21:06] *** arkiuat left
[21:08] *** arkiuat joined
[21:21] *** librasteve_ left
[21:36] *** yewscion joined
[21:46] *** yewscion left
[22:03] *** yewscion joined
[22:12] *** yewscion left
[22:45] *** stanrifkin left
[22:50] *** lichtkind left
[22:57] *** arkiuat left
[23:27] *** Xliff_ left
