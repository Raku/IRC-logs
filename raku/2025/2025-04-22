[00:52] *** jpn joined
[00:57] *** jpn left
[01:14] *** hulk joined
[01:14] *** kylese left
[01:18] *** derpydoo joined
[02:05] *** jpn joined
[02:10] *** jpn left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:51] *** human-blip left
[03:54] *** jpn joined
[03:59] *** jpn left
[04:30] *** kylese left
[04:32] *** kylese joined
[04:46] *** human-blip joined
[05:01] *** yeahitsme joined
[05:01] *** jpn joined
[05:06] *** jpn left
[05:29] *** Sgeo left
[05:30] *** kylese left
[05:31] *** kylese joined
[05:39] *** Aedil joined
[06:02] *** floyza left
[06:17] *** jpn joined
[06:22] *** jpn left
[07:02] <discord-raku-bot> <antononcube> Here uploaded the first version of “WWW::YouTube” : https://raku.land/zef:antononcube/WWW::YouTube

[07:17] *** jpn joined
[07:21] *** jpn left
[07:58] *** dakkar joined
[08:05] *** lichtkind joined
[09:20] *** wayland76 joined
[09:24] *** jpn joined
[09:39] <grondilu> m: proto foo($) { gather {*} }; multi foo(Int $x) { take $x + 1 }; multi foo(Str $x) { take $x.flip }; foo(35)

[09:39] <camelia> rakudo-moar 298fed53f: ( no output )

[09:39] <grondilu> ^didn't this use to work? 

[09:40] <grondilu> factorising the gather in the proto, that is

[09:41] <Voldenet> bisect: proto foo($) { gather {*} }; multi foo(Int $x) { take $x + 1 }; multi foo(Str $x) { take $x.flip }; foo(35)

[09:41] <bisectable6> Voldenet, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:41] <Voldenet> we can see if that used to work

[09:42] <bisectable6> Voldenet, ¦6c (90 commits): «»

[09:42] <bisectable6> Voldenet, Nothing to bisect!

[09:44] <Voldenet> right

[09:44] <Voldenet> bisect: proto foo($) { gather {*} }; multi foo(Int $x) { take $x + 1 }; multi foo(Str $x) { take $x.flip }; .say for foo(35)

[09:44] <bisectable6> Voldenet, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:44] <wayland76> I ran some code in a container on github, and it said: Function 'Resource::Distribution' needs parens to avoid gobbling block (or perhaps it's a class that's not declared or available in this scope?)

[09:45] <bisectable6> Voldenet, ¦6c (90 commits): «»

[09:45] <bisectable6> Voldenet, Nothing to bisect!

[09:45] <wayland76> So I tried "use Resource::Distribution", and it said: Could not find Resource::Distribution in

[09:46] <wayland76> Then I tried zef install Resource::Distribution, and it said: Could not find Resource::Distribution in:

[09:46] <wayland76> Any ideas?

[09:51] <Voldenet> grondilu: doesn't seem that it used to work ever, but I see no reason why it shouldn't

[09:53] <Voldenet> m: proto foo($) { CATCH { default { say 'foo'; }}; {*} }; multi foo(Int $x) { die; }; foo(42)

[09:53] <camelia> rakudo-moar 298fed53f: OUTPUT: «foo␤»

[10:02] <grondilu> it was at least discussed few years ago.  Can't recall if it worked at the time but I lean towards stating it did.

[10:02] *** derpydoo left
[10:03] <grondilu> I think it was used somewhere on rosettacode

[10:05] *** jpn left
[10:11] <Voldenet> m: proto foo($) { gather { take 1; {*}; take 5 }; }; multi foo(Int $x) { take $x + 1 }; multi foo(Str $x) { take $x.flip }; .say for foo(35)

[10:11] <camelia> rakudo-moar 298fed53f: OUTPUT: «1␤5␤»

[10:13] <Voldenet> m: proto foo($) { gather { take 1; take {*}; take 5 }; }; multi foo(Int $x) { $x + 1 }; multi foo(Str $x) { take $x.flip }; .say for foo(35)

[10:13] <camelia> rakudo-moar 298fed53f: OUTPUT: «1␤Nil␤5␤»

[10:13] <Voldenet> m: proto foo($) { my $n = {*}; gather { take 1; take $n; take 5 }; }; multi foo(Int $x) { $x + 1 }; multi foo(Str $x) { take $x.flip }; .say for foo(35)

[10:13] <camelia> rakudo-moar 298fed53f: OUTPUT: «1␤36␤5␤»

[10:14] <Voldenet> so it seems that {*} doesn't work within gather at all

[10:14] <Voldenet> m: proto foo($) { gather { take 1; take {*}; take 5 }; }; multi foo(Int $x) { say "called foo(Int)"; $x + 1 }; multi foo(Str $x) { take $x.flip }; .say for foo(35)

[10:14] <camelia> rakudo-moar 298fed53f: OUTPUT: «1␤Nil␤5␤»

[10:15] <Voldenet> m: proto foo($) { my $n = {*}; gather { take 1; take $n; take 5 }; }; multi foo(Int $x) { say "called foo(Int)"; $x + 1 }; multi foo(Str $x) { take $x.flip }; .say for foo(35)

[10:15] <camelia> rakudo-moar 298fed53f: OUTPUT: «called foo(Int)␤1␤36␤5␤»

[10:15] <Voldenet> eh, so, it isn't even called

[10:18] *** jpn joined
[10:22] <wayland76> To answer my question: It's Distribution::Resource, not Resource::Distribution :p 

[10:26] *** jpn left
[10:43] *** jpn joined
[10:51] *** jpn left
[10:52] *** jpn joined
[11:33] *** jpn left
[11:52] *** jpn joined
[11:57] *** jpn left
[12:26] *** wayland joined
[12:26] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/04/22/2025-16-grant-completion/

[12:26] *** wayland76 left
[12:42] *** jpn joined
[13:08] *** jpn left
[13:12] *** jpn joined
[13:16] *** jpn left
[13:20] *** human-blip left
[13:20] *** human-blip joined
[13:22] *** jpn joined
[13:24] <tbrowder> lizmat++

[13:27] <tbrowder> note the reddit comment about raku having great regexes, and the perl person said perl has it now. but they didn't give any time comparisons.

[13:27] *** jpn left
[13:30] <timo> do you mean in terms of performance?

[13:35] <discord-raku-bot> <antononcube> "JSON::Fast" cannot parse this: from-json('[23, 32, 31.]') . Is there a workaround?

[13:35] <discord-raku-bot> <antononcube> I will file an issue soon...

[13:36] *** jpn joined
[13:38] <timo> oh, are floating points without a digit after the . allowed?

[13:38] <timo> do you happen to have a link to the spec on hand?

[13:40] <discord-raku-bot> <antononcube> @timo Yeah, I should have clarified more.

[13:40] <tbrowder>  yes, i've just seen comps on debian which may not have latest perl with raku regexes

[13:40] <discord-raku-bot> <antononcube> @timo Wolfram Language (aka Mathematica) parses that JSON string. R and Python do not.

[13:41] <timo> JSON::Fast does have some standards-nonconformant options already, for NaN and Inf and -Inf IIRC

[13:42] <discord-raku-bot> <antononcube> @timo LLM services (e.g. Google's Gemini) occasionally return JSON vectors that that floating point without following digit.

[13:43] <tbrowder> m: perl

[13:43] <camelia> rakudo-moar 298fed53f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    perl used at line 1␤␤»

[13:43] <discord-raku-bot> <antononcube> I can replaces those with some regex matching/substitution, but then that has to be in done in all LLM packages. (Just in case...)

[13:43] *** jpn left
[13:45] <Voldenet> > '[23, 32, 31.]'

[13:45] <Voldenet> this is not proper json

[13:46] <discord-raku-bot> <antononcube> Ok. I still need it to be parsed. (Because LLMs return results in that form.)

[13:46] <tbrowder> latest perl is 5.40.2; my deb has perl 5.32.1 

[13:46] <tbrowder> :(

[13:47] <Voldenet> it is proper javascript

[13:48] <Voldenet> is there Inline::Javascript?

[13:48] <Voldenet> eh, nope :(

[13:51] <tbrowder> erg, latest is 5.41.12 per perl.org

[13:51] <Voldenet> `JSON.stringify([23, 32, 31.])` would solve the problem if you can get away with using nodejs

[13:51] <dakkar> m: '[10,12.4,13.]'.subst(/(\d+)\.<!before \d>/, {"{$0}.0"}, :g)

[13:51] <camelia> rakudo-moar 298fed53f: ( no output )

[13:51] <tbrowder> nope, 5.40.2

[13:51] <dakkar> m: say '[10,12.4,13.]'.subst(/(\d+)\.<!before \d>/, {"{$0}.0"}, :g)

[13:52] <camelia> rakudo-moar 298fed53f: OUTPUT: «[10,12.4,13.0]␤»

[13:52] <Voldenet> m: say (run <nodejs -e>, "console.log(JSON.stringify([23, 32, 31.]))", :out).out.slurp

[13:52] <camelia> rakudo-moar 298fed53f: OUTPUT: «␤»

[13:52] <Voldenet> yeah of course, there's no nodejs

[13:52] <dakkar> (it's not a real solution, but then you're getting random strings out of an LLM…)

[13:53] <discord-raku-bot> <antononcube> @dakkar Yes, that kind of solution I was going to put in the package for the most frequent offender. (Gemini.)

[13:54] <discord-raku-bot> <antononcube> LLM embeddings, though, are not random strings. They are supposed to reliably give vectors (in whatever format.)

[14:48] *** jpn joined
[14:57] *** jpn left
[15:12] *** jpn joined
[15:18] *** jpn left
[15:22] *** jpn joined
[15:27] *** jpn left
[15:30] <grondilu> m: my Set[Int] %stuff{Rat}; %stuff{355/113} (-)= Set[Int].new: 32;

[15:30] <camelia> rakudo-moar 298fed53f: OUTPUT: «Type check failed in assignment to element of %stuff; expected Set[Int] but got Set (set())␤  in block <unit> at <tmp> line 1␤␤»

[15:31] <grondilu> ^what's wrong with the above?

[15:31] <grondilu> m: my Set[Int] %stuff{Rat}; %stuff{355/113} = Set[Int].new: 32;

[15:31] <camelia> rakudo-moar 298fed53f: ( no output )

[15:31] <grondilu> m: my Set[Int] %stuff{Rat}; %stuff{355/113} (|)= Set[Int].new: 32;

[15:31] <camelia> rakudo-moar 298fed53f: ( no output )

[15:31] *** jpn joined
[15:31] <grondilu> is the empty set loosing its constraints or something?

[15:32] <grondilu> m: my Set[Int] %stuff{Rat}; %stuff{355/113} (|)= Set[Int].new: 32; %stuff{355/113} (-)= Set[Int].new: 32;

[15:32] <camelia> rakudo-moar 298fed53f: ( no output )

[15:33] <grondilu> m: my Set[Int] %stuff{Rat}; %stuff{355/113}.=new; %stuff{355/113} (|)= Set[Int].new: 32;

[15:33] <camelia> rakudo-moar 298fed53f: ( no output )

[15:33] <grondilu> hum... so I needed to instantiate it first

[15:34] <grondilu> kind of annoying, but ok

[15:35] <grondilu> FWIW I'm planning to use `has Set[square] %!pieces{Piece}` in my chess module to keep track of the location of various types of pieces.

[15:36] <grondilu> (hopefully improving moves generation speed)

[15:37] <grondilu> wow, trying to parse a bunch of games with this new addition I got:

[15:37] <grondilu> MoarVM panic: Internal error: zeroed target thread ID in work pass

[15:38] <grondilu> it seemed to fare well for a few dozen games until that happened.

[15:39] <grondilu> that's not going to be easy to debug lol

[15:42] *** jpn left
[16:08] *** human-blip left
[16:09] *** human-blip joined
[16:22] <grondilu> hard to reproduce too.  I've just tried again and this time it went through.

[16:23] <discord-raku-bot> <librasteve> i occasionally get the same MoarVM error in the Air project

[16:26] <grondilu> you can't reliably reproduce it either?

[16:40] *** human-blip left
[16:42] *** human-blip joined
[16:48] *** dakkar left
[16:54] <timo> it's an error that usually happens when you do stuff from multiple threads that's not thread-safe, or if you're somehow corrupting the memory of the process. or there's a moarvm bug, of course, always possible

[16:54] *** human-blip left
[16:55] <timo> i can whole-heartedly recommend recording execution of your program with rr and its "chaos mode" because even if you catch it in GDB with a breakpoint in MVM_oops or MVM_panic, it's extremely difficult to figure out from the end state what actually caused the issue

[16:55] *** human-blip joined
[16:56] <timo> grondilu: i can try to assist

[16:59] <grondilu> what's rr?

[16:59] <timo> mozilla's rr "record and replay"

[16:59] <timo> fast lightweight multi-process recording and forwards and backwards debugging

[17:00] <grondilu> I'm pretty sure this part of the code I was running was not multithreaded, though maybe rakudo creates threads automatically?

[17:00] <timo> there are cases, like using Proc::Async or asynchronous I/O in general, but that usually doesn't cause this particular problem

[17:01] <timo> i think precompilation might start threads

[17:02] <timo> anything involving NativeCall?

[17:03] <grondilu> nope

[17:05] <grondilu> I've had this failure after trying to implement the mixed representation of the board.  I can't quite push right now, but here is the relevant part for that mixed representation:  https://gist.github.com/grondilu/851c09ba5c8e7ffb566eb93c76c93ee4

[17:05] <grondilu> it's all the Set stufu

[17:05] <grondilu> *stuff

[17:07] <timo> are the chess games that you are parsing easy to download as well?

[17:07] *** [Coke] left
[17:08] <grondilu> https://www.pgnmentor.com/files.html

[17:08] <grondilu> also they are in the resources dir of my repo

[17:09] <timo> cool

[17:11] <grondilu> just tried again, got 'MoarVM panic: Internal error: invalid thread ID -1241305976 in GC work pass' this time

[17:11] <timo> great, a repro!

[17:12] <grondilu> but it's always happening at a different game

[17:13] <grondilu> and sometimes not happening at all

[17:13] <timo> right, as long as it does happen some high amount of the time it'll be useful

[17:13] <timo> that error happens when we encounter invalid data in memory during a run of the GC

[17:13] <timo> timing of GC runs can depend on different factors

[17:13] <grondilu> do you want me to push what I have now, even though it's quite messy?

[17:14] <timo> yeah, you can just put it in a throw-away branch

[17:14] <grondilu> I suck at dealing with git branches

[17:14] <timo> i can do it together with you

[17:14] <grondilu> rn I just have a master branch

[17:15] <grondilu> should I create a moarvm-error?

[17:15] <timo> for example, yeah. you can `git switch -c moarvm-error` to create a new branch of that name

[17:16] <timo> after switching you can then make your commit just like you're used to

[17:16] <grondilu> ok

[17:16] <timo> we can later go back to master and put all the changes from the commit into your working copy, so it will be as if you never committed

[17:17] <grondilu> how do I push to github, though?

[17:17] <timo> ok first of all you'll want to use `git push -n ...` for "dry-run" which will show you what it would do but doesn't do it, so you can be sure you got the command right

[17:17] <timo> it should be fine to just `git push origin moarvm-error`

[17:18] <grondilu> so first I try `git push -n origin moarvm-error`?

[17:18] <timo> yup

[17:18] <timo> i'd also like to have your exact `rakudo --version` just in case i can't reproduce it on my currently built version

[17:19] <grondilu> seems like the push went well

[17:19] <grondilu> Welcome to Rakudo™ v2025.03-242-ge494d4d80.

[17:19] <grondilu> Implementing the Raku® Programming Language v6.d.

[17:19] <grondilu> Built on MoarVM version 2025.03-13-gb405e940e.

[17:20] <grondilu> stand by for the command that produced the error

[17:20] <timo> ok cool i see a bunch of changes from the commit

[17:20] <grondilu> raku -Ilib -MChess{,::Games} -e 'say .moves>>.LAN for Chess::Games::load slurp' < resources/masters/Morphy.pgn

[17:21] <timo> wonderful, i get the crash

[17:21] <grondilu> cool, I hope that'll help

[17:22] <timo> i do have to go AFK for a bit before i can really get started

[17:22] <grondilu> no-worry

[17:27] *** [Coke] joined
[17:50] *** eseyman left
[18:12] *** abraxxa-home joined
[18:15] *** PipStuart left
[18:18] *** abraxxa-home left
[18:34] *** abraxxa-home joined
[18:34] *** abraxxa-home left
[18:36] *** abraxxa-home joined
[19:14] *** yeahitsme left
[19:30] <timo> grondilu: i think i have a patch for moarvm that fixes the bug you found

[19:30] <timo> congrats, that was a well hidden one :D

[19:31] <discord-raku-bot> <librasteve> timo ++

[20:00] <timo> can't come up with a short reproducer of the bug off hand

[20:00] *** abraxxa-home left
[20:32] *** jpn joined
[20:36] *** jpn left
[20:37] *** jpn joined
[21:04] *** manu_ joined
[21:04] *** manu_ is now known as eseyman

[21:12] *** jpn left
[21:22] *** jpn joined
[21:32] *** Aedil left
[22:04] *** tobs left
[22:05] *** tobs joined
[22:08] *** human-blip left
[22:11] *** human-blip joined
[22:12] *** jpn left
[22:33] <wayland> m:         	 3 + 2 :{ 4 + 5 }

[22:33] <camelia> rakudo-moar 298fed53f: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤You can't adverb :{ 4 + 5 }␤at <tmp>:1␤------> 3 + 2 :{ 4 + 5 }<HERE><EOL>␤»

[22:39] <wayland> m: 3 + 2 :asdf

[22:39] <camelia> rakudo-moar 298fed53f: OUTPUT: «Cannot resolve caller infix:<+>(Int:D, Int:D, :asdf); none of these signatures matches:␤    ( --> 0)␤    ($x)␤    (\a, \b)␤    (Real $a, Real $b)␤    (Int:D $a, Int:D $b --> Int:D)␤    (int $a, int $b --> int)␤    (uint $a, uint $b --> u…»

[22:40] <wayland> I was hoping to be able to adverb a block, and pass it into the operator as a third parameter.  

[22:44] <wayland> m: 3 + 2 :s{ 4 + 5 }

[22:44] <camelia> rakudo-moar 298fed53f: OUTPUT: «Cannot resolve caller infix:<+>(Int:D, Int:D, :s(Block)); none of these signatures matches:␤    ( --> 0)␤    ($x)␤    (\a, \b)␤    (Real $a, Real $b)␤    (Int:D $a, Int:D $b --> Int:D)␤    (int $a, int $b --> int)␤    (uint $a, uint $b -…»

[22:44] <wayland> Hmm.  Might be able to use less slang than I thought for the block operators.  Like, it's not amazing, but it could work.  

[22:47] *** Sgeo joined
[22:56] *** wayland left
[22:57] *** jpn joined
[23:01] *** jpn left
[23:06] <grondilu> timo: really cool.  It's not pushed yet though, is it?

