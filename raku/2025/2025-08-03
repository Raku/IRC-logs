[00:10] *** arkiuat joined
[00:15] *** arkiuat left
[00:24] *** arkiuat joined
[00:29] *** arkiuat left
[00:43] *** bingos left
[00:43] *** bingos_ joined
[00:47] *** arkiuat joined
[01:00] *** arkiuat left
[01:11] *** arkiuat joined
[01:17] *** arkiuat left
[01:25] *** kylese left
[01:25] *** hulk joined
[01:40] *** arkiuat joined
[02:15] *** hulk left
[02:15] *** kylese joined
[03:07] *** arkiuat left
[03:13] *** Aedil joined
[03:14] *** arkiuat joined
[03:18] *** arkiuat left
[03:46] *** arkiuat joined
[03:51] *** arkiuat left
[04:12] *** arkiuat joined
[04:50] *** kylese left
[04:50] *** kylese joined
[06:04] *** bingos joined
[06:05] *** bingos_ left
[06:09] *** bingos left
[06:11] *** bingos joined
[06:43] *** bingos left
[06:47] *** Sgeo left
[06:50] *** Sgeo joined
[06:56] *** modula left
[07:10] *** Aedil left
[07:14] *** derpydoo joined
[07:25] *** Sgeo left
[07:40] *** melezhik joined
[07:40] <melezhik> .

[07:40] <tellable6> 2025-08-02T02:05:10Z #raku <wayland> melezhik The Sparrowdo link at https://sparrowhub.io/ links to Sparky instead.  

[07:43] *** lichtkind joined
[07:50] *** lizmat left
[07:50] *** lizmat joined
[08:03] *** euandreh joined
[08:45] *** Sgeo joined
[09:14] *** arkiuat left
[09:43] *** arkiuat joined
[09:47] *** Sgeo left
[09:48] *** arkiuat left
[09:50] *** melezhik left
[09:57] *** apac joined
[10:17] <wayland> .

[10:17] *** arkiuat joined
[10:19] <wayland> Do we have any packages that are specialised for calling a JSON API, or do I just use a web request package and a JSON package, and roll my own?  

[10:22] *** arkiuat left
[10:23] <lizmat> doesn't Cro come with that built in ?

[10:23] *** euandreh left
[10:51] *** arkiuat joined
[10:53] *** apac left
[10:55] <wayland> Looks like it does!  Wasn't expecting Cro to be the answer for calling APIs, just for making them :) .  Thanks!  

[10:58] *** arkiuat left
[11:03] *** derpydoo left
[11:11] *** arkiuat joined
[11:16] *** arkiuat left
[11:20] <ab5tract> I'd like to request a sanity check on including a distribution within a distribution.

[11:20] <ab5tract> The use case is to provide a non-trivial example of Resource::Wrangler.

[11:21] <ab5tract> ie, examples/nontrivial/l{ib, META6.json, etc.} 

[11:29] *** librasteve_ left
[11:31] *** apac joined
[11:34] *** stanrifkin joined
[11:36] *** arkiuat joined
[11:40] *** arkiuat left
[11:42] <ab5tract> It seems to be fine ðŸ¤ž

[11:52] <lizmat> hehe

[11:56] *** arkiuat joined
[12:01] *** arkiuat left
[12:13] <Geth> Â¦ ecosystem/main: 385e74289e | (Elizabeth Mattijsen)++ | META.list

[12:13] <Geth> Â¦ ecosystem/main: Remove File::Directory::Tree

[12:13] <Geth> Â¦ ecosystem/main: 

[12:13] <Geth> Â¦ ecosystem/main: It now lives on as a Raku Community module

[12:13] <Geth> Â¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/385e74289e

[12:14] * wayland rolls 3D6 and ... fails sanity check.  And becomes catatonic!

[12:15] <wayland> https://cthulhuwiki.chaosium.com/rules/sanity.html#bouts-of-madness-table

[12:16] <lizmat> there's no mention of catatonic there ?

[12:20] *** arkiuat joined
[12:25] *** arkiuat left
[12:33] *** Aedil joined
[12:38] <wayland> Apologies!  I refernced it without checking!  My brain was running on 5th editing, and they're now up to 7th, and may well have removed it.  

[12:39] * wayland rolls 3D6 again, and narrowly avoids Physical Hysterics!  :)

[12:53] *** arkiuat joined
[12:57] *** apac left
[13:01] *** arkiuat left
[13:11] *** DarthGandalf left
[13:17] *** DarthGandalf joined
[13:31] *** arkiuat joined
[13:35] *** arkiuat left
[13:45] *** apac joined
[13:53] *** bingos joined
[13:57] *** bingos is now known as BinGOs

[13:58] *** arkiuat joined
[14:02] *** wayland left
[14:02] *** wayland joined
[14:02] *** arkiuat left
[14:26] *** melezhik joined
[14:32] *** arkiuat joined
[14:35] *** Guest11 joined
[14:36] *** Guest11 left
[14:37] *** arkiuat left
[14:59] *** arkiuat joined
[14:59] *** apac left
[15:03] *** arkiuat left
[15:17] *** apac joined
[15:32] *** arkiuat joined
[15:35] *** hvxgr left
[15:36] *** hvxgr joined
[15:37] *** arkiuat left
[15:41] *** hvxgr left
[16:00] *** arkiuat joined
[16:04] *** arkiuat left
[16:22] *** arkiuat joined
[16:27] *** arkiuat left
[16:41] *** arkiuat joined
[16:56] *** Guest3298 joined
[16:58] *** Guest3298 left
[17:11] *** Sgeo joined
[17:23] *** arkiuat left
[17:25] *** arkiuat joined
[17:30] *** arkiuat left
[17:50] *** librasteve_ joined
[17:50] <librasteve_> weekly: https://rakujourney.wordpress.com/2025/08/03/harc-stack-searching/

[17:50] <notable6> librasteve_, Noted! (weekly)

[17:59] <Voldenet> eh, dynamic search is pain and likely will not scale or work fine

[17:59] <Voldenet> for example when you do search, earlier requests could come later when you type text

[18:01] <Voldenet> and also, sql is really bad at searching, sadly

[18:02] *** arkiuat joined
[18:02] <disbot4> <librasteve> Voldenet: sorry to disappoint on the Forms side - that's coming next week

[18:04] <Voldenet> because it has to search the whole table, unless you use fulltext index of some sort

[18:04] <disbot4> <librasteve> this is a raku implementation of the HTMX Active Search example ... https://htmx.org/examples/active-search/#demo

[18:05] *** melezhik left
[18:06] <disbot4> <librasteve> I guess you are right about scalability ... I know sh*t about SQL search

[18:06] <disbot4> <librasteve> [just trusting that SmaokeMachine did it right]

[18:06] *** arkiuat left
[18:08] <Voldenet> the problem is that it isn't even ORM's fault if it doesn't do search text well

[18:08] <Voldenet> it's sql's fault

[18:11] <Voldenet> actually, I have no idea if htmx search has the problem I described, docs aren't precise on how hx-trigger works

[18:12] <Voldenet> but I've never seen any framework deal with it too well

[18:12] <Voldenet> worse part, searching for `ab` is going to return more results (and be slower) than `abc` so in practice this data race is easily reproducible with bigger db

[18:29] *** arkiuat joined
[18:34] <Voldenet> so, nevermind: I've checked how it works and it enqueues searches

[18:34] <Voldenet> so when you type in "ab" only one request is executed, "abc" is executed after "ab" is finished

[18:35] <Voldenet> not the best UI in the world, but it isn't buggy

[18:38] <Voldenet> or rather, when input is changed while things load, it sends another /search (even if it two queries are the same)

[19:30] <disbot4> <librasteve> sorry was &afk

[19:32] <disbot4> <librasteve> :hx-trigger<keyup changed delay:500ms, search>, yeah ... so listens for keyup in the input and only fires every 1/2 sec

[19:33] <disbot4> <librasteve> and I see from your note that will only fire again after the new fragment has loaded in the DOM

[19:35] <disbot4> <.landyacht.> it would appear docs.raku.org is down for me

[19:35] <disbot4> <.landyacht.> anybody else?

[19:35] <disbot4> <librasteve> I usually say "HTMX is good for smaller scale sites" - but actually I think the limit is more on the level of interactivity eg don't use HTMX to make Facebook or Google Maps

[19:35] <disbot4> <librasteve> @.landyacht. docs.raku.org is OK for me

[19:39] <disbot4> <librasteve> I can imagine (in the limit) a Cro::HTTP::Middleware handling only search route over many servers and employing some shared eventually consistent text cache (eg. no SQL sharded) --- I think that in that model HTMX is immaterial performance wise and that the Raku Cro middleware will be the hot path so likely need to use more servers per user than eg JS

[19:40] <disbot4> <.landyacht.> it's back for me

[19:40] <disbot4> <librasteve> ;-)

[19:41] <disbot4> <.landyacht.> I'd rather Google be down than my beloved rakudocs...

[19:42] <disbot4> <.landyacht.> Also I think there is a genuine bug in Buf's version of splice... What I'm seeing does not line up with the example in the docs, nor expectations

[19:42] <disbot4> <.landyacht.> I have to step away, but I'll make an issue when I get back

[20:00] *** MasterDuke joined
[20:20] *** arkiuat left
[20:33] *** arkiuat joined
[20:37] *** arkiuat left
[20:40] <Voldenet> well, on basic level htmx doesn't integrate with anything but html, so anything needing microservices will quickly need rewrite with htmx frontend - so you would end up implementing backend react

[20:42] <Voldenet> the other part about search is probably not a big deal - if you have large dataset you'll quickly find out that it's laggy and why you need n-grams in indexes

[20:42] <Voldenet> it will work for up to around 1000 records just fine

[20:47] <disbot4> <librasteve> interesting ... setting aside HTMX SSE, I suppose you are saying that it's somehow hard for microservices APIs to serve HTML fragments (I can believe this and that the tooling around react microservices is pretty substantive)

[20:47] *** melezhik joined
[20:50] <disbot4> <librasteve> I do recall that the naming idea all along was my Cro $service; and aiui Cro can serve HTML fragments and JSON and websockets ...

[20:59] *** arkiuat joined
[21:05] *** arkiuat left
[21:22] <Voldenet> actually you could kinda serve microservices html, but that'd very clearly go beyond htmx

[21:22] <Voldenet> since every microservice would need to introduce css scoping

[21:23] <Voldenet> it'd be a lot easier to have all rendering compiled into one file out of many

[21:34] *** arkiuat joined
[21:38] *** arkiuat left
[22:02] *** arkiuat joined
[22:06] *** arkiuat left
[22:13] *** apac left
[22:18] *** lichtkind left
[22:30] *** arkiuat joined
[22:34] *** arkiuat left
[23:02] *** arkiuat joined
[23:07] *** melezhik left
[23:10] *** wayland left
[23:24] *** MasterDuke left
