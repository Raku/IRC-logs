[00:23] *** arkiuat joined
[00:28] *** arkiuat left
[00:46] *** markong left
[00:52] *** deoac left
[00:53] *** arkiuat joined
[00:59] *** arkiuat left
[01:24] *** arkiuat joined
[01:28] *** arkiuat left
[01:41] *** kylese left
[01:41] *** kylese joined
[01:58] *** arkiuat joined
[02:03] *** arkiuat left
[02:15] *** kylese left
[02:15] *** kylese joined
[02:25] *** arkiuat joined
[02:30] *** arkiuat left
[02:48] *** arkiuat joined
[02:53] *** arkiuat left
[03:28] *** arkiuat joined
[03:30] *** lichtkind_ joined
[03:33] *** lichtkind left
[03:37] *** arkiuat left
[03:45] *** kylese left
[03:46] *** arkiuat joined
[03:47] *** guifa left
[03:48] *** kylese joined
[04:14] <Voldenet> hm, one link in weekly (to htmx-ws) doesn't work: https://dev.to/fco/cromponent-new-features-3bhf

[04:16] <Voldenet> well, not in weekly, but in blog that weekly links to

[04:16] <Voldenet> SmokeMachine: link to htmx-ws is wrong in https://dev.to/fco/cromponent-new-features-3bhf

[05:32] *** Aedil joined
[06:30] *** Sgeo left
[06:41] *** oodani left
[06:42] *** oodani joined
[07:00] <SmokeMachine> Voldenet: thanks for letting me know! Fixed!

[07:26] *** lichtkind joined
[07:28] *** lichtkind left
[07:30] *** jjido joined
[07:35] *** Guest86 joined
[07:42] *** arkiuat left
[07:58] *** wayland joined
[08:01] *** arkiuat joined
[08:05] *** Guest86 left
[08:07] *** arkiuat left
[08:08] *** jjido left
[08:10] *** dakkar joined
[08:36] *** arkiuat joined
[08:41] *** arkiuat left
[09:09] *** arkiuat joined
[09:13] *** arkiuat left
[09:18] <ab5tract> Voldenet: please  take another look at the andthen/orelse PR when you have a chance

[09:37] <Voldenet> ab5tract: hmm, idk if nested ternary op is a good thing (the thing in synchronous), also I still don't get why you use `$!result` and `self.cause` - use `self.result` and `self.cause` or `$!result` everywhere

[09:38] <Voldenet> otherwise it's some weird mixed style where you get some values directly and some not

[09:39] <Voldenet> $!result will contain cause or result depending on the $!status

[09:39] *** arkiuat joined
[09:42] <Voldenet> so I'd say to do `if $synchronous { …ternary… } else { …another ternary }`

[09:45] *** arkiuat left
[09:45] *** wayland76 joined
[09:45] *** wayland left
[09:49] <Voldenet> I'll copy those points to github too

[10:12] *** arkiuat joined
[10:13] <ab5tract> Voldenet: thanks. We tend to nest pretty heavily inside of core so I'm used to the style

[10:14] <ab5tract> I switched back and forth while updating the PR

[10:16] <Voldenet> > https://github.com/rakudo/rakudo/pull/5917#pullrequestreview-3019588031

[10:16] <Voldenet> I hate nested ifs, but nested ternaries are even worse

[10:17] *** arkiuat left
[10:18] <Voldenet> but if you use both, suddenly they're not nested, so that's my obviously preferred stlye :>

[10:18] <Voldenet> style*

[10:19] <El_Che> wtf

[10:19] <tellable6> 2025-06-27T21:58:34Z #raku-dev <jdv> El_Che the 2025.06 release happened

[10:19] <tellable6> 2025-06-30T19:10:39Z #raku-dev <jdv> El_Che 2025.06.1 point release done

[10:19] <El_Che> (sorry lucky mistype)

[10:19] <ab5tract> Well there is the benefit of avoiding a new scope and other setups, which is why we often go that route

[10:20] <ab5tract> I do agree that there is should be a line. And I was definitely wondering whether this was a case of crossing it

[10:21] <Voldenet> Yes, there is the benefit of avoiding a new scope _now_, but once it get optimized to certain point, it should only be style difference

[10:21] <Voldenet> and I'm always thinking that readability > clever performance tricks

[10:23] <Voldenet> or rather, usercode shouldn't really consider the performance of syntax, but theoretical performance of underlying code

[10:23] <Voldenet> especially when `?? !!` and `if else` could be optimized to exactly the same form

[10:24] <Voldenet> Oh, and I think synchronous now should work as designed

[10:26] <ab5tract> I am not against changing them

[10:26] <ab5tract> I'm explaining why I chose them

[10:27] <ab5tract> And why you will see them nested quite deep in RakuAST code, etc

[10:27] <Voldenet> Maybe one thing that's mind-boggling to me that I haven't said, couldn't this be used for all awaitables? `self.then({ final-result }, :$synchronous)

[10:27] *** guifa joined
[10:28] <ab5tract> the same approach of providing result/cause, you mean?

[10:29] <Voldenet> well, currently Promise has this `has $!result; method cause { $!result }; method result { $!result }`

[10:30] <Voldenet> …so this code is pretty weird: `{ $!status == Kept ?? $vow.keep($!result) !! do { …code(self.cause) }`

[10:31] *** librasteve_ joined
[10:31] <Voldenet> either do this: `{ $!status == Kept ?? $vow.keep($!result) !! do { …code($!result) }` or `{ $!status == Kept ?? $vow.keep(self.result) !! do { …code(self.cause) }`

[10:33] <Voldenet> `?? $vow.keep(self.then({ final-result }, :synchronous))`

[10:33] <Voldenet> Isn't this code, like… wrong?

[10:33] <Voldenet> final-result returns Promise, so then the Promise gets propagated instead of the result

[10:34] <Voldenet> `?? final-result.then( -> $p { $vow.keep($p.result) }, :synchronous)`

[10:34] <Voldenet> that would attach a continuation to the final-result

[10:35] <Voldenet> erm, a scheduled then, not a continuation

[10:36] <Voldenet> I'll add more comments after all

[10:40] *** arkiuat joined
[10:45] *** arkiuat left
[10:52] <Voldenet> ab5tract: So, I've figured out what :synchronous is expected to do - it's just sufficiently weird

[10:52] <Voldenet> m: sub huh { Promise.kept(1).then({ $^p.result + 42 }, :synchronous) }; huh.say

[10:52] <camelia> rakudo-moar f52cc9284: OUTPUT: «43␤»

[10:53] <Voldenet> m: sub huh { Promise.kept(1).then({ $^p.result + 42 }) }; huh.say # non-synchronous

[10:53] <camelia> rakudo-moar f52cc9284: OUTPUT: «Promise.new(scheduler => ThreadPoolScheduler.new(uncaught_handler => Callable), status => PromiseStatus::Planned)␤»

[10:53] <Voldenet> so it's not expected to execute synchronously, just that result should not be wrapped in the Promise

[10:54] <Voldenet> and to be honest, this seems like a bad idea, ngl

[11:00] *** guifa left
[11:11] *** tjr joined
[11:15] *** arkiuat joined
[11:19] *** lichtkind_ left
[11:21] *** arkiuat left
[11:27] *** lichtkind joined
[11:35] *** markong joined
[11:42] *** arkiuat joined
[11:47] *** arkiuat left
[12:15] *** arkiuat joined
[12:18] *** guifa joined
[12:20] *** arkiuat left
[12:44] *** arkiuat joined
[12:51] *** arkiuat left
[13:06] *** poisNada joined
[13:07] <disbot3> <melezhik.> o/

[13:17] *** arkiuat joined
[13:18] <ab5tract> Voldenet: this is the code for Promise.cause https://github.com/rakudo/rakudo/blob/f52cc9284d4ce722b821ebe8ae6dedc530e3ec0d/src/core.c/Promise.rakumod#L209

[13:18] <ab5tract> it's quite a bit more complex than $!result

[13:19] <ab5tract> And also weren't you the one who suggested the `then`?

[13:22] *** poisNada left
[13:22] *** arkiuat left
[13:26] *** poisNada joined
[13:45] <Voldenet> ab5tract: Promise.result is also a bit more complex than $! result, that's what I'm going on about - either use raw value, or use checked everywhere

[13:45] *** arkiuat joined
[13:47] <Voldenet> ab5tract: and yes, I did suggest using .then - but before I thought it's about performing the scheduled thens synchronously on the same thread, I didn't know it completely changed the result :/

[13:47] <Voldenet> I mean, the whole :synchronous is very similar to simply doing the `.&await` later

[13:48] <ab5tract> Voldenet: the original implementations used $!result, so I went with that

[13:48] <Voldenet> so… maybe it's just a silly api or some hyperoptimization

[13:48] *** poisNada97 joined
[13:48] <ab5tract> Anyway, it's irrelevant now

[13:48] <ab5tract> I'm sorry but I don't have the tuits to worry about the ternaries

[13:49] <ab5tract> feel free to adjust that PR however you prefer

[13:49] <Voldenet> np, it's just a style suggestion, I have no strong feelings about it

[13:50] <Voldenet> I'll see the code tomorrow, and I'll test those :synchronous cases, because auto-awaiting makes the code for it surprisingly complex (especially error handling)

[13:50] *** arkiuat left
[13:52] *** poisNada left
[13:54] <ab5tract> Voldenet++

[14:05] *** poisNada97 left
[14:14] *** arkiuat joined
[14:19] *** markong left
[14:19] *** poisNada joined
[14:19] *** arkiuat left
[14:35] *** arkiuat joined
[14:40] *** arkiuat left
[15:01] *** arkiuat joined
[15:06] *** arkiuat left
[15:21] *** poisNada left
[15:29] *** arkiuat joined
[15:34] *** arkiuat left
[15:38] *** arkiuat joined
[16:01] *** jgaz joined
[16:02] *** jgaz left
[16:02] *** Some-body_ joined
[16:02] *** DarthGandalf left
[16:03] *** gfldex left
[16:03] *** jgaz joined
[16:05] *** gfldex joined
[16:05] *** Some-body_ is now known as DarthGandalf

[16:37] *** dakkar left
[17:55] *** broquaint left
[17:56] *** broquaint joined
[18:07] *** arkiuat left
[18:08] *** arkiuat joined
[18:53] *** nicole left
[19:18] *** wayland76 left
[19:19] *** wayland76 joined
[21:28] *** jjido joined
[21:39] *** arkiuat left
[21:48] *** arkiuat joined
[21:53] *** arkiuat left
[22:07] *** arkiuat joined
[22:12] <Geth> ¦ problem-solving: lizmat assigned to codesections Issue Add a "use-targets" item to META6.json https://github.com/Raku/problem-solving/issues/485

[22:12] <Geth> ¦ problem-solving: lizmat unassigned from codesections Issue Add a "use-targets" item to META6.json https://github.com/Raku/problem-solving/issues/485

[22:30] *** librasteve_ left
[22:36] *** jjido left
[22:38] *** jjido joined
[22:39] *** swaggboi left
[22:42] *** swaggboi joined
[22:48] <tonyo> .

[22:49] *** lichtkind left
[22:51] *** Sgeo joined
[23:24] *** jjido left
[23:26] *** wayland76 left
[23:26] *** nicole joined
[23:28] *** kaskal- joined
[23:28] *** kaskal left
