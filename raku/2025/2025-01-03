[00:31] *** xinming joined
[02:19] *** pony joined
[02:51] *** hulk joined
[02:52] *** kylese left
[03:11] <discord-raku-bot> <antononcube> @timo Yes, " we don't have phi" !! üò±üö´üèÜüî™

[03:13] <discord-raku-bot> <antononcube> Andl, yes, polymod was recently discussed here, I read its docs, and apparently I forgot about it.

[03:15] *** hulk left
[03:15] *** kylese joined
[03:23] *** MyNetAz left
[03:38] *** MyNetAz joined
[05:20] *** SrainUser left
[05:33] *** Aedil joined
[07:55] *** Xliff joined
[07:56] <Xliff> \o

[07:56] <Xliff> Anyone awake?

[07:56] <Xliff> In c there is a long double type that aparently raku is unaware of. How difficult would that be to add?

[08:15] *** Sgeo left
[09:37] *** lizmat left
[10:46] <discord-raku-bot> <antononcube> You could give your long doubles to the fat rats.

[11:03] <discord-raku-bot> <antononcube> @timo I don‚Äôt think polymod works for conversion to a real number base. Even if it can be used it‚Äôs invocation is not trivial.

[11:30] <Xliff> antononcube: Not for native.

[11:31] <Xliff> antononcube: So if I need to put long doubles into a NativeCall CStruct, I have to use 2 gdoubles to get the right structure size. Even then, I have to hope that the C size has get and set support via a gdouble to access them.

[11:32] <Xliff> Either that or a way for C to push a long double into a FatRat via MoarVM.

[11:32] <Xliff> It's either that or adding num128 support to MoarVM, which would be the preferable mechanism, hence my question.

[11:39] <Xliff> Yeah...no long double support in MoarVM. See nqp/MoarVM/src/6model/reprs/P6num.c line 106

[11:40] <Xliff> And that looks like a pretty hefty set of changes to override change.

[11:40] <Xliff> s/override change/override/

[11:57] <timo> m: say pi.polymod(sin(e) xx *).head(10)

[11:57] <camelia> rakudo-moar e7f9223c5: OUTPUT: ¬´(0.26612362006943124 0.01671806145054955 0.15796708938073678 0.33265224021202755 0.0017089887989527597 0.2821637652954223 0.22587974285193013 0.17814066440359966 0.30887654092293815 0.05041693617022247)‚ê§¬ª

[11:57] <timo> antononcube, i haven't verified this result, but it looks like polymod can do what you ask

[11:59] <timo> m: say [\+] pi.polymod(sin(e) xx *).head(10) Z* (sin(e) >>**>> 1..*)

[11:59] <camelia> rakudo-moar e7f9223c5: OUTPUT: ¬´(0.10931860408542679 0.13290413239334 0.513728235987621 1.6483322731466838 1.6558702489667838 3.1825966710851086 4.630662300463871 5.950823803303825 8.54871683477373 9.023179594408939)‚ê§¬ª

[11:59] <timo> i think i probably did this wrong?

[12:00] <timo> oh, right, i understand what you meant by "not trivial", sin(e) xx * is not correct it has to be the same sin(e) >>**>> 1..* as the other one

[12:01] <timo> m: say [\+] pi.polymod(sin(e) Z** 0..*).head(10) Z* (sin(e) Z** 0..*)

[12:01] <camelia> rakudo-moar e7f9223c5: OUTPUT: ¬´(3.141592653589793)‚ê§¬ª

[12:01] <timo> m: say [\+] pi.polymod(sin(e) X** 0..*).head(10) Z* (sin(e) X** 0..*)

[12:01] <camelia> rakudo-moar e7f9223c5: OUTPUT: ¬´(3.141592653589793)‚ê§¬ª

[12:02] <timo> i guess there's no "remainder" when using reals?

[12:02] <timo> or our pi is too precise and/or sin(e) is too imprecise

[12:02] <timo> oh, no it's because my first number is 1

[12:02] <timo> so the result is just pi

[12:03] <timo> m: say [\+] pi.polymod(sin(e) X** 1..*).head(10) Z* (sin(e) X** 1..*)

[12:03] <camelia> rakudo-moar e7f9223c5: OUTPUT: ¬´(0.10931860408542678 0.12308923922099448 0.12547287998523385 0.12551934162408468 0.12562489374474925 0.12563269279019293 0.12563309429521047 0.12563371284592548 0.12563371284592548 0.12563371284592548)‚ê§¬ª

[12:03] <timo> yeah that doesn't seem right either

[12:07] <timo> doesn't help that i don't know what exactly we want it to do

[12:13] <Xliff> timo!

[12:13] <Xliff> Did you see the question I was asking, earlier?

[12:14] <Xliff> If not I'll repeat it: How hard would it be to implement a num128 (C long double)?

[12:24] <timo> good question. depends on the amount of integration you require i guess?

[12:26] <timo> like, i think making regular nqp::blah_n ops work with num128 would be a good chunk of work, since many places assume 64bits as "the size" for some things, like registers, and the P6num object is not "variable size" and i'm not sure what places exactly that touches if we need to change it

[12:27] <timo> on the other hand, if it's okay to be using nativecall for all the things, you can "just" malloc a 128bit piece of memory and pass a pointer to that around everywhere

[12:30] *** ACfromTX left
[12:30] <timo> and of course there's steps in between ... i assume :)

[12:59] <Xliff> Yeah.

[12:59] <Xliff> Really, all I want is a way to turn a proposed num128 into a FatRat

[13:01] <Xliff> Or even a CArray[uint8].alloc(16) to FatRat would work, as well.

[13:01] <Xliff> That could work until official support is added.

[13:17] <discord-raku-bot> <antononcube> @timo Thanks from trying things on the my real-digits question.

[13:18] <discord-raku-bot> <antononcube> I tried similar to yours code. Note, that it does not return ‚Äúdigits.‚Äù

[13:19] <discord-raku-bot> <antononcube> Here is page showing what I want to do: https://mathworld.wolfram.com/PhiNumberSystem.html

[13:20] <discord-raku-bot> <antononcube> And, now, again, I am thinking that real-digits should be in ‚ÄúMath::Sequences‚Äù.

[13:36] <discord-raku-bot> <antononcube> I will fork ‚ÄúMath:Sequences‚Äù and put in first real-digits implementation within an hour or two‚Ä¶

[13:46] <discord-raku-bot> <antononcube> This is @librasteve  and other people doing physics (with Raku or otherwise):

[13:46] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1324735591019053180/image_480.png?ex=67793ba9&is=6777ea29&hm=a6b21718e1c41af8cd920aaaeb87b46efbfb0cb80dfe1c93759d370687e2d083&

[14:31] *** Voldenet_ joined
[14:32] *** Voldenet left
[14:32] *** Voldenet_ is now known as Voldenet

[14:35] <discord-raku-bot> <librasteve> lol

[14:41] <discord-raku-bot> <librasteve> can anyone tell me the best wau to do a case insensitive grep in raku Red in example like this (from Red docs Getting Started)...

[14:41] <discord-raku-bot> <librasteve> for Person.^all.grep(*.name.starts-with('Jo')) -> $person { say $person }

[14:41] <discord-raku-bot> <librasteve> please

[14:49] *** vrurg joined
[14:53] *** vrurg_ left
[14:54] *** Sgeo joined
[15:12] *** vrurg_ joined
[15:14] *** vrurg left
[15:14] <discord-raku-bot> <nahita3882> *.name ~~ /:i ^ 'Jo'/ i think

[15:15] <discord-raku-bot> <nahita3882> :i for case, ^ for starting

[15:15] *** vrurg_ left
[15:15] *** vrurg joined
[15:16] <discord-raku-bot> <librasteve> tx! lemme try that...

[15:18] <discord-raku-bot> <librasteve> ok - it works as intended, but getting a warning

[15:18] <discord-raku-bot> <librasteve> falling back (to mute this message, please define the $*RED-FALLBACK variable): This type cannot unbox to a native string: P6opaque, Red::Column

[15:20] <discord-raku-bot> <librasteve> i have tried to suppress with my $*RED-FALLBACK = True; but no joy

[15:22] <discord-raku-bot> <librasteve> that's wierd, I can suppress the warning if I place the RED-FALLBACK line inside the method I call, but not if it is set where I define the model

[15:23] <discord-raku-bot> <librasteve> I also suspect that with RED-FALLBACK set, this is no longer using the DB to do the search via a WHERE SQL clause since that appears to want the Red specific checks like starts-with()

[15:58] *** lizmat joined
[15:59] *** lizmat left
[15:59] *** lizmat joined
[16:37] <SmokeMachine> Red does not accept regex (not yet)‚Ä¶ doesn‚Äôt .grep({ .column.lc.starts-with: ‚Äújo‚Äù }) work?

[16:40] <SmokeMachine> That error is because Red cannot translate regex to SQL yet‚Ä¶ so it breaks and then do the filtering in raku‚Ä¶ that‚Äôs not what you want

[16:42] <SmokeMachine> If .lc.strats-with does not work, I‚Äôll need to implement it‚Ä¶

[16:44] *** hvxgr left
[16:45] *** SrainUser joined
[16:57] <[Coke]> in general, use .fc instead of .lc for forcing case insensitivity for that approach

[16:57] <[Coke]> (more unicode-safe approach)

[17:00] <SmokeMachine> (I was not sure fc was implemented in Red... but it seems lc wasn't either)

[17:02] <[Coke]> ah, ok

[17:05] *** Sgeo left
[17:05] *** Sgeo joined
[17:10] <discord-raku-bot> <librasteve> thanks guys, I already tried

[17:12] <discord-raku-bot> <librasteve> for Person.^all.grep(*.name.lc.starts-with($needle.lc)) and the .fc option (as recommended by ChatGPT lol) ... both these seem to be doing the fallback thing, so I gather there is no way to do case insensitive grep in Red yet

[17:12] <SmokeMachine> I'm implementing lc/fc/uc now

[17:13] <discord-raku-bot> <librasteve> \o/ yay

[17:19] <SmokeMachine> Almost there... https://www.irccloud.com/pastebin/N6H1fedQ/

[17:35] <SmokeMachine> done

[17:35] <discord-raku-bot> <librasteve> fantastic - thanks!

[17:35] <discord-raku-bot> <librasteve> rebuilding now

[17:43] <Voldenet> in sql actually you may need that LOWER, depending on the collation

[17:44] <Voldenet> like mssql uses SQL_Latin1_General_CP1_CI_AS and mysql uses utf8mb4, meaning they're case insensitive by default

[17:45] <Voldenet> s/you may need/you may not need/

[17:46] <Voldenet> so `where Name like '%thing'` would match "SOMETHING" and "one more thing"

[17:49] <Voldenet> (I didn't include postgres or o**cle because they are case sensitive by default)

[17:50] <SmokeMachine> sadly Red has no MySQL driver... :(

[17:50] <discord-raku-bot> <librasteve> .oO - actually I have seen some odd results with SQLite .... I'll check a few things

[17:50] <Voldenet> sqlite is insensitive iirc

[17:51] <Voldenet> ofc you can make them all CS/CI but defaults are different

[17:51] <Voldenet> it's more important when making unique indexes on columns

[17:51] <discord-raku-bot> <librasteve> ChatGPT: SQLite is case-insensitive by default for text comparisons in SQL statements

[17:53] <SmokeMachine> but anyway, it has LOWER() and UPPER(), so, doing .fc on red will make the code able to use different DBs...

[17:54] <discord-raku-bot> <librasteve> cool

[17:54] <discord-raku-bot> <librasteve> appreciate the help!

[17:55] <SmokeMachine> did that work for you?

[17:56] <discord-raku-bot> <librasteve> yep - works fine

[17:56] <Voldenet> i checked and sqlite is indeed case insensitive

[17:57] <Voldenet> >create table foo(n text); insert into foo(n) values ("BAR"); select * from foo where n like 'b%'

[17:58] *** Xliff left
[18:02] *** SrainUser left
[19:36] *** Aedil left
[19:49] *** hvxgr joined
[21:44] <guifa> we don't have a module to parse ifconfig info do we?

[22:03] <discord-raku-bot> <librasteve> https://metacpan.org/pod/Net::Ifconfig::Wrapper plus Inline::Perl5 ?

[22:04] <timo> maybe it's time to stop using ifconfig and use ip instead, which has json output as a feature :)

[22:05] <timo> iproute2 i should say

[22:06] <timo> > Hence, our plans are to replace net-tools completely with iproute, maybe leading the route for other distributions to follow.

[22:06] <timo> ^- in a mail from 2009

[22:15] <guifa> ip isn't on Mac ha

[22:16] <discord-raku-bot> <librasteve> ~ > which ifconfig    ...  /sbin/ifconfig on macos

[22:17] <discord-raku-bot> <librasteve> also perl ;-)

[22:17] <guifa> I want to have a good module for handling determining network interfaces 

[22:19] <Voldenet> ip isn't on bsd too

[22:19] <Voldenet> iirc

[22:19] <timo> oh, right, iproute is called out as being able to expose all the features "of the linux kernel"

[22:19] <guifa> Voldenet yeah, bsd and mac both do something slightly weird things with the network interfaces

[22:19] <guifa> 1 - embedding their scope_id into the address itself

[22:20] <guifa> and 2 - not using 0 as the "default" one

[22:20] <discord-raku-bot> <librasteve> guifa: long term suggest you add that to the most wanted list ... short term looks like some kind of compromise ifaict

[22:20] <guifa> oh I'm going to go ahead and develop it

[22:20] <guifa> I need it for a module I'm working on, although that module will rely on some PRs I've submitted for MoarVM and one I'm about to submit for Rakudo

[22:21] <discord-raku-bot> <librasteve> guifa: nice (rolling your own was one compromise option)

[22:22] <guifa> I'm just going to call it Net::Interfaces with two commands -- one that gets all the interfaces and the other that tries to figure out the default one

[22:27] <discord-raku-bot> <antononcube> I made initial versions of real-digits  and phi-number-system in "Math::Sequences". See : https://github.com/antononcube/Raku-Math-Sequences

[22:28] <discord-raku-bot> <antononcube> So, @librasteve , are you interested in reviewing "numberphile" functions or subs? (In order to do a PR for "Math::Sequences".)

[22:31] <discord-raku-bot> <antononcube> @timo Please see the test file link I posted above. (Related to the polymod discussion earlier.)

[23:01] *** Tirifto_ left
[23:05] *** Tirifto joined
[23:07] <coleman> On mac... is netstat a builtin too? I use netstat -r for routes on mac, but I forget if I need to install it from brew

[23:09] <guifa> netstat is built in

[23:10] <coleman> The proper thing to do is unfortunately the most difficult, which is to use the low level and OS-dependent C/Obj-C APIs to query interfaces, routing table, etc.

[23:11] <coleman> And it doesn't help that Linux is always doing something goofy down there

[23:13] <coleman> Like, are we supposed to use netlink for everything now? https://www.kernel.org/doc/html/v6.7/userspace-api/netlink/index.html

[23:13] <coleman> Linux networking is confusing.

[23:15] <coleman> honestly, parse ifconfig like a boss.

[23:17] <guifa> yeah

[23:17] <guifa> I think just using various forms of OS / version checking

[23:34] <guifa> just frustrating because ifconfig doesn't have super nice output

[23:34] <guifa> apparently ip can output in json in some versions

