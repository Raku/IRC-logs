[01:34] *** hulk joined
[01:36] *** kylese left
[01:37] <Voldenet> m: role C {}; role R is C {}; say Any but R

[01:37] <camelia> rakudo-moar 65cda29b9: OUTPUT: «Could not build C3 linearization: ambiguous hierarchy␤  in block <unit> at <tmp> line 1␤␤»

[01:37] <Voldenet> you don't even need that add_parent for this error

[01:40] <Voldenet> m: role C {}; role R {  ::?CLASS.^add_role: C }; say Any but R # maybe?

[01:40] <camelia> rakudo-moar 65cda29b9: OUTPUT: «(Any+{R})␤»

[01:45] *** Guest4 joined
[01:46] *** Guest4 left
[02:01] <tbrowder> .tell jdv i just read what i replied and now i understand your confusion. what i was trying to say is that raku's class system encapsulates much of what Steven was showing us about closures in perl. and with much cleaner syntax.

[02:01] <tellable6> tbrowder, I'll pass your message to jdv

[02:05] *** arkiuat left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:16] *** arkiuat joined
[02:21] *** arkiuat left
[02:41] *** arkiuat joined
[02:47] *** arkiuat left
[02:53] *** arkiuat joined
[03:45] *** kylese left
[03:47] *** kylese joined
[04:03] *** Guest99 joined
[04:12] *** Guest99 left
[04:25] *** Aedil joined
[06:30] *** Sgeo left
[06:38] *** bdju left
[06:48] *** bdju joined
[08:01] *** wayland76 joined
[08:05] *** donaldh left
[08:16] *** arkiuat left
[08:17] <SmokeMachine> m: my @a; for ^10_000 { @a[$_] = $_ for ^500; $ = @a.sum }; say now - INIT now

[08:17] <camelia> rakudo-moar 65cda29b9: OUTPUT: «2.362096113␤»

[08:18] <SmokeMachine> m: use NativeCall; my @a; for ^10_000 { @a[$_] = $_ for ^500; $ = @a.sum }; say now - INIT now

[08:18] <camelia> rakudo-moar 65cda29b9: OUTPUT: «0.378976435␤»

[08:18] *** lichtkind joined
[08:19] <SmokeMachine> why is that difference on time... I thought `use`ing something that's not used should take longer... but it takes very very faster...

[08:21] <SmokeMachine> and still odd... If I use the NativeCall, it takes a time between both...

[08:21] <SmokeMachine> m: use NativeCall; my @a := CArray[uint16].new: 500; for ^10_000 { @a[$_] = $_ for ^500; $ = @a.sum }; say now - INIT now

[08:21] <camelia> rakudo-moar 65cda29b9: OUTPUT: «1.317238684␤»

[08:22] <SmokeMachine> Any idea?

[08:28] *** arkiuat joined
[08:32] *** arkiuat left
[08:38] *** arkiuat joined
[08:44] *** arkiuat left
[09:12] *** arkiuat joined
[09:17] *** arkiuat left
[09:22] <SmokeMachine> Why adding `use NativeCall` makes it faster? Should I alway add that?

[09:23] <disbot3> <frostcod> that looks like a bug...

[09:31] <SmokeMachine> frostcod: but what’s the buggy version? The one without NativeCall and slow, or the one with NativeCall and fast?

[09:45] *** arkiuat joined
[09:51] *** arkiuat left
[10:03] *** gordonfish left
[10:14] *** arkiuat joined
[10:14] *** wayland76 left
[10:17] *** melezhik joined
[10:17] <melezhik> .

[10:17] <tellable6> 2025-07-19T11:33:12Z #raku <wayland76> melezhik You might be interested in https://github.com/spitsh/spitsh :) 

[10:17] *** Sampersand joined
[10:19] *** arkiuat left
[10:21] <melezhik> wayland76: thanks for that.  Looks like spitsh is not maintained any more, I remember I even did something for this project few years ago. Anyways . With regards to your latest post “Raku: Pathways …” these are all reasonable thoughts - thanks and thanks for mentioning Sparrow by the way, yep it does not have a dedicated web site, but there is https://sparrowhub.io which provides some information

[10:21] <tellable6> melezhik, I'll pass your message to wayland76

[10:26] <SmokeMachine> It seems the problem is when setting an item…

[10:26] <SmokeMachine> m: use NativeCall; my @a; for ^10_000 { @a[$_] = $_ for ^500 }; say now - INIT now

[10:26] <camelia> rakudo-moar 65cda29b9: OUTPUT: «0.188701888␤»

[10:27] <SmokeMachine> m: my @a; for ^10_000 { @a[$_] = $_ for ^500 }; say now - INIT now

[10:27] <camelia> rakudo-moar 65cda29b9: OUTPUT: «2.049250717␤»

[10:27] <SmokeMachine> That’s too odd for me…

[10:29] <SmokeMachine> Any idea why this 20x time difference when using NativeCall and not using it? And why is it faster when uaing NativeCall??? Should I always use it?

[10:31] <SmokeMachine> (ok… around 10x)

[10:34] <timo> what :) :) :)

[10:35] <timo> "use Test" also makes it faster fwiw

[10:36] <SmokeMachine> Yes, it does… is that any module?

[10:37] <disbot3> <holmdunc> guifa: Rather, HTMLWindow, right? 🙂 https://raku.land/zef:guifa/UI::HTMLWindow

[10:37] <SmokeMachine> use Red seems to make it faster as well…

[10:37] <lizmat> my theory: using a module causes some hot core paths being optimized already before the benchmarked code is being run

[10:38] <lizmat> without using the module, that optimization would occur during the benchmarked code, making it slower

[10:38] <SmokeMachine> use v6 and use v6.e don’t…

[10:39] <SmokeMachine> lizmat: but if that optmization can be done earlier (as when using a module), shouldn’t it?

[10:40] *** arkiuat joined
[10:41] <lizmat> but that's the nature of spesh: it will only optimize stuff that is actually being run (a lot)

[10:41] <SmokeMachine> It seems “need” (instead of “use”) also makes it faster

[10:42] <lizmat> but having said that:  I see the same code with use Test also have a total wallclock less

[10:42] <SmokeMachine> lizmat: but it wasn’t run at all when using a module, right?

[10:42] <lizmat> m: my @a; for ^10_000 { @a[$_] = $_ for ^500; $ = @a.sum }; say now - BEGIN now

[10:42] <camelia> rakudo-moar 65cda29b9: OUTPUT: «2.233379327␤»

[10:42] *** Sampersand left
[10:42] <lizmat> m: use Test; my @a; for ^10_000 { @a[$_] = $_ for ^500; $ = @a.sum }; say now - BEGIN now

[10:42] <camelia> rakudo-moar 65cda29b9: OUTPUT: «0.35719743␤»

[10:42] *** Sampersand joined
[10:42] <lizmat> so there's *definitely* something fishy going on here

[10:44] *** arkiuat left
[10:48] <SmokeMachine> Something interesting is that, on my tests, using push didn’t get any difference using and not using a module…

[10:49] <SmokeMachine> m: use Test; my @a; for ^10_000 { @a.push: $_ for ^500; $ = @a.sum }; say now - BEGIN now

[10:49] <timo> could using a module cause a different core to become relevant?

[10:49] <camelia> rakudo-moar 65cda29b9: OUTPUT: «(timeout)»

[10:51] <SmokeMachine> m: use Test; my @a; for ^10_000 { @a.push: $_; $ = @a.sum }; say now - BEGIN now

[10:51] <camelia> rakudo-moar 65cda29b9: OUTPUT: «1.571824083␤»

[10:51] <SmokeMachine> m: my @a; for ^10_000 { @a.push: $_; $ = @a.sum }; say now - BEGIN now

[10:51] <camelia> rakudo-moar 65cda29b9: OUTPUT: «1.553995042␤»

[10:53] *** Sampersand left
[10:56] *** Sampersand joined
[10:58] <timo> turning spesh log on has the same effect of adding "use Test" in one of the test cases

[10:58] <timo> it's quite possible that timing of spesh runs has something to do with this

[10:59] <timo> in fact, i just had 4 fast runs followed by a slow run

[10:59] <melezhik> .

[11:00] *** arkiuat joined
[11:02] *** Sampersand left
[11:02] <timo> https://gist.github.com/timo/ac0718ed248af14acd256f52a11dcb8b

[11:04] *** arkiuat left
[11:05] *** Sampersand joined
[11:08] <lizmat> could the difference be hash order related ?

[11:08] *** Sampersand left
[11:19] *** jjido joined
[11:20] *** arkiuat joined
[11:24] *** arkiuat left
[12:00] *** arkiuat joined
[12:05] *** arkiuat left
[12:37] *** arkiuat joined
[12:41] *** arkiuat left
[12:53] *** arkiuat joined
[12:58] *** arkiuat left
[13:03] *** jjido left
[13:06] *** melezhik left
[13:18] *** arkiuat joined
[13:23] *** arkiuat left
[13:31] *** jjido joined
[13:32] *** jjido left
[13:35] *** arkiuat joined
[13:39] *** arkiuat left
[14:02] *** arkiuat joined
[14:07] *** arkiuat left
[14:23] *** arkiuat joined
[15:00] *** librasteve_ joined
[15:13] <guifa> disbot: twas tired when i typed but yeah haha

[15:13] <guifa> disbot3 ^^

[15:14] *** human-blip joined
[15:17] *** nine left
[15:18] *** nine joined
[15:26] *** jjido joined
[15:32] *** jjido left
[15:38] <[Coke]> 15 years ago today: Parrot VM 2.6.0 released

[15:39] <disbot3> <librasteve> weekly: 15 years ago today: Parrot VM 2.6.0 released

[15:45] <[Coke]> notable6: statuss

[15:45] <notable6> [Coke], No notes for “statuss”

[15:45] <[Coke]> releasable6: next

[15:45] <releasable6> [Coke], Next release in ≈38 days and ≈3 hours. There are no known blockers. Changelog for this release was not started yet

[15:45] <releasable6> [Coke], Details: https://gist.github.com/adc845964addceeb0c2c27dbb8696aa8

[15:45] <[Coke]> hey, everyone's back.

[15:45] <[Coke]> lizmat++, presumably

[15:46] <[Coke]> librasteve_: pulled that note from my FB history

[15:47] <disbot3> <antononcube> Got this cup from Amazon today; I am not sure should I use it or not...

[15:47] <disbot3> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1396881333912866887/I-dont-need-llms-my-wife-knows-everything-2-crop.jpg?ex=687fb29e&is=687e611e&hm=4566a2aa93f544684c1aedef26fe66ef37d8ffa935d14eaed73859231a582ee2&

[15:58] *** jjido joined
[16:03] *** jjido left
[16:09] <SmokeMachine> weekly: https://dev.to/fco/bringing-structural-protocols-to-raku-2ook

[16:09] <notable6> SmokeMachine, Noted! (weekly)

[16:24] <disbot3> <librasteve> \o/

[16:25] <librasteve_> notable6 weekly

[16:25] <librasteve_> notable6: weekly

[16:25] <notable6> librasteve_, 1 note: 2025-07-21T16:09:09Z <SmokeMachine>: https://dev.to/fco/bringing-structural-protocols-to-raku-2ook

[16:26] <librasteve_> notable6: weekly reset

[16:26] <notable6> librasteve_, Moved existing notes to “weekly_2025-07-21T16:26:13Z”

[16:43] <librasteve_> teases https://rakudoweekly.blog/2025/07/21/2025-29-just-sleeping/

[17:01] *** deoac joined
[17:47] *** jjido joined
[17:50] *** guifa left
[18:29] *** guifa joined
[18:29] <guifa> ab5tract : of course you could come out with a module that all but does what I hand coded in UI::HTMLWindow 

[18:29] <guifa> the exact same week

[18:32] *** releasable6 left
[18:32] *** releasable6 joined
[18:32] *** arkiuat left
[18:32] *** arkiuat joined
[18:34] *** deoac left
[19:06] *** human_blip joined
[19:06] <ab5tract> :)

[19:07] <ab5tract> Sorry I didn’t get that released sooner

[19:07] *** human-blip left
[19:07] *** rir left
[19:08] *** rir joined
[19:09] *** rir left
[19:09] *** rir joined
[19:10] * lizmat wonders what ab5tract's module is

[19:19] *** arkiuat left
[19:22] <disbot3> <melezhik.> Yes you do 😊

[19:22] *** rir left
[19:23] <disbot3> <antononcube> @melezhik. It seems that is a dare!

[19:24] <disbot3> <melezhik.> Oh, not with my wife LOL 😂

[19:25] <disbot3> <melezhik.> Oh I mean it won’t be an issue with my wife she knows everything

[19:29] <ab5tract> lizmat: Resource::Wrangler

[19:30] <lizmat> and that would be the same as UI::HTMLWindows ?

[19:31] <ab5tract> AIUI guifa hand rolled the same functionality for using resources in that distribution

[19:32] <lizmat> aaah.... ok

[19:41] *** jjido left
[19:50] *** arkiuat joined
[19:54] *** arkiuat left
[20:22] *** Aedil left
[20:27] *** arkiuat joined
[20:32] *** arkiuat left
[20:48] <guifa> basically I just grab a tmp directory and then add my own rando directory (each window will get one) and then push in whatever files someone needs

[20:49] <guifa> eventually I want to be able to allow adding in non-resource files, but the prefix situation gets a bit more complicated there (not unsolvable, just not sure what I want it to look like)

[20:54] *** arkiuat joined
[20:59] *** arkiuat left
[21:13] *** arkiuat joined
[21:46] *** lichtkind left
[21:55] <leont> Does anyone have an opinion on https://github.com/Leont/app-prove6/issues/22 ?

[21:57] *** dismae joined
[21:58] <ugexe> there are other tools that also only use t/. and then if we have t/ and test/ we have to figure out what happens when you have both. further, it wouldn't surprise me if some workflows still use the perl prove to run their tests which would (presumably) not be supporting such a directory

[22:01] <ugexe> using TIMTOWTDI seems like a bit of a stretch as well... i often see people using it to justify literally anything they want to add

[22:08] <ugexe> they are also mistaken on why the extension was changed from .t to .rakutest. it was not because .t wasn't descriptive enough, it was that tooling couldn't tell what language the test files were

[22:11] <ugexe> to be clear i agree with leont that using t/ wasn't a great decision on our part, i don't think adding another directory makes the situation better

[22:13] <guifa> agree

[22:14] <disbot3> <librasteve> i said (over on the issue) ... imho the downside (having multiple places to put tests) is larger than the upside (spell "t" a nicer way)

[22:14] <ugexe> something like https://github.com/Raku/problem-solving/issues/393 could work towards solving the problem since then tools could look at the meta data to see which tests to run, and those tests could be in any directory

[22:15] <lizmat> ugexe: good point: if someone would specify test files to be run, they could live anywhere

[22:22] *** dismae left
[23:05] *** Sgeo joined
