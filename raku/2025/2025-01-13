[00:01] *** jaguart joined
[00:01] *** jaguart left
[00:02] *** sena_kun left
[00:39] *** Sgeo left
[00:42] *** Sgeo joined
[00:44] *** ulipink joined
[00:44] *** ulipink left
[01:36] *** dg joined
[01:49] <ugexe> patrickb: you can use a file path as the mirror if you're consuming it with zef::repository::ecosystem

[01:50] <ugexe> also the wget thing does look wrong

[01:52] <ugexe> er, sorry. i mean you could use a file path for the source-url

[02:05] <ugexe> I dont remember if using a file path needs to be a directory with the extracted archive, or if you can pass a local path to a target.gz. I think it is supposed to work with both, but that there was a bug with using a local tar file path. One of them should work though 

[02:41] *** hulk joined
[02:41] *** kylese left
[02:47] *** Aedil joined
[03:15] *** hulk left
[03:15] *** kylese joined
[04:22] *** yewscion_ joined
[04:22] *** yewscion left
[05:57] *** yewscion joined
[05:58] *** yewscion_ left
[06:44] *** eseyman left
[06:46] *** manu_ joined
[06:46] *** manu_ is now known as eseyman

[07:00] *** Sgeo left
[09:02] *** dakkar joined
[09:58] *** Aedil left
[10:02] *** Aedil joined
[10:06] <xinming> Is there a operator to test  .DEFINITE ?

[10:06] <xinming> .so is for Bool

[10:06] <xinming> m: [0.DEFINITE, 0.so].raku.say

[10:06] <camelia> rakudo-moar a66b2e161: OUTPUT: «[Bool::True, Bool::False]␤»

[10:18] <lizmat> xinming: no, there's no operator for that

[10:18] <lizmat> for example:

[10:18] <lizmat> m: dd Failure.new.DEFINITE

[10:18] <camelia> rakudo-moar a66b2e161: OUTPUT: «Bool::True␤»

[10:18] <lizmat> m: dd Failure.new.defined

[10:18] <camelia> rakudo-moar a66b2e161: OUTPUT: «Bool::False␤»

[10:19] <lizmat> m: dd so Failure.new

[10:19] <camelia> rakudo-moar a66b2e161: OUTPUT: «Bool::False␤»

[10:45] <xinming> Ok, will use .DEFINITE then

[10:46] <lizmat> if you are already allowing for nqp ops, you could use nqp::concrete()

[10:47] <lizmat> .DEFINITE is basically a macro for wrapping the invocant in an nqp::concrete()

[10:53] * sjn has made a new Raku sticker \o/

[10:54] <sjn> I'll be bringing them to FOSDEM in two-ish weeks :-D

[10:55] <lizmat> sjn++

[11:01] <sjn> https://github.com/sjn/stickers/blob/main/raku-for-humans/raku-for-humans.png <- here it is

[11:02] * sjn hopes it isn't too bad :-D

[11:05] <lizmat> looks pretty nice and battle tested to me  :-)

[11:06] <sjn> yeah, it's similar to the "Compatible" and "O(fun) again" stickers, but now with an AI comment :-D

[12:19] <Geth> ¦ Papers/main: 05a2eed995 | (Elizabeth Mattijsen)++ | minutes/20250111.md

[12:19] <Geth> ¦ Papers/main: Add RSC meeting minutes for 2025-01-11

[12:19] <Geth> ¦ Papers/main: review: https://github.com/Raku-Steering-Council/Papers/commit/05a2eed995

[12:25] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/01/13/2025-02-ditana/

[12:43] <sjn> Ooh, I have a corner on Rakudo Weekly! \o/

[12:52] <El_Che> Hi sjn 

[12:56] <sjn> El_Che: heya!

[13:00] *** chenggong7788 joined
[13:01] *** chenggong7788 is now known as nil78

[13:09] *** nil78 left
[13:14] <lizmat> weekly: https://github.com/Raku/problem-solving/labels/RSC%20Review

[13:14] <notable6> lizmat, Noted! (weekly)

[13:15] <sjn> hey, quick question; How did https://github.com/raku-community-modules come into existence?

[13:16] <El_Che> magic :)

[13:16] <lizmat> I think it was moritz' original idea

[13:16] <sjn> nice. super useful

[13:17] <sjn> who is the current custodian of that list?

[13:17] <lizmat> anybody with access, and there are quite a few

[13:17] <sjn> right

[13:17] <lizmat> but lately, it was mostly /me

[13:20] <sjn> I've been spending some tuits on mapping out ecosystem metadata like this ("ADOPT-ME" etc.), and I'm wondering if lizmat (and/or anyone else who cares about meta-stuff like that) would be interested in spending a few moments exploring this topic with me. :-)

[13:21] <sjn> (this is mostly wrt. new EU legislation, but should be useful in general also, including for anyone who cares about Raku metadata & tooling)

[13:25] <lizmat> sjn: would be interested in that.. 

[13:25] <lizmat> but first I'm gonna be afk for a few hours  :-)

[13:25] <sjn> no hurries :)

[13:50] *** yewscion_ joined
[13:53] *** yewscion left
[14:02] <tbrowder> hi, i'm adding a sub to my Font::Utils module (no, lizmat, still unpublished, but Santa is using it at the North Pole), and need some advice on usage.

[14:04] <tbrowder> the routine is "pdf2pdf" which uses a Ghostscript setting to make PDF file generation reproducible. the routine will overwrite an existing file by default.

[14:07] <tbrowder> my current plan is to warn of that if a human uses if without a pdf inout as is typical. i have a warn option to require  the user to ok continuation. the setup is, in  my mind, so the default is ready for a

[14:08] <tbrowder> user's automatic pdf pipeline.

[14:11] <tbrowder> in summary: (1) no input file, give help, (2) input file only, overwrite as is in place, (3) add the :$warn option

[14:14] <tbrowder> looking at this in public, i think i lean toward warn by default, and require force for unattended use.

[14:19] <tbrowder> thanks for any thoughts

[14:19] <discord-raku-bot> <antononcube> @tbrowder What does "PDF file generation reproducible" mean?

[14:21] <tbrowder> when using machine genration, valid pdfs are required have input values of various kinds that change each time, such as UUIDs

[14:22] <tbrowder> date/time, etc.

[14:24] <tbrowder> the ps2pdf process can use a low-level option to use a /prepress setting to eliminate those

[14:28] <tbrowder> so the pdf2pdf process is something like this: "pdf2ps $pdfin $ps"; then "ps2pdf $ps -dPDFSETTINGS=/prepress $pffout": then "mv $pdfout $pdfin"

[14:30] <tbrowder> ^^ not exactly right, but i hope you get the idea.

[14:32] <tbrowder> anyway, most people would never need it, but if you have a git repo with a pdf file under version control (as i do), it would be very handy

[14:34] *** guifa joined
[14:36] <tbrowder> i think warn as default for cli use, require force for other use is the proper way to go.

[14:40] <tbrowder> gotta go for while (and bril! i just noticed what's been causing a glitch in the pipeline (using raku shell btw), i need to use "shell mv", not raku copy.

[14:41] <tbrowder> antononcube: thanks for the comment

[14:53] <discord-raku-bot> <antononcube> @tbrowder I do not use PDFs in my GitHub that much anymore, but I did a lot at some point. So, pdf2pdf is something I might use.

[15:39] <xinming> lizmat: There is no operator for .DEFINITE, is there is .defined opeator?

[15:39] *** orangebot joined
[15:45] <timo> is ~~ Mu:D acceptable?

[16:01] <timo> m: say Failure.new ~~ Any:D

[16:01] <camelia> rakudo-moar a66b2e161: OUTPUT: «True␤»

[16:12] <lizmat> xinming: there's // as a prefix in 6.e

[16:12] <lizmat> m: use v6.e.PREVIEW; say // 42

[16:12] <camelia> rakudo-moar a66b2e161: OUTPUT: «True␤»

[16:12] <lizmat> there's also an infix // of course

[16:13] <lizmat> m: say Any // 42

[16:13] <camelia> rakudo-moar a66b2e161: OUTPUT: «42␤»

[16:13] <lizmat> https://docs.raku.org/routine/%2F%2F

[16:28] <xinming> lizmat: thanks, I know the // infix, But never thought it can be used as prefix.

[16:29] <lizmat> people felt it made sense, instead of "so"

[16:30] <lizmat> it follows the same pattern as other infixes that have a prefix version, such as + - ~

[16:30] <xinming> I dont' feel  // prefix makes sense.

[16:30] <xinming> probably  ?/   will be more sensible to me.

[16:30] <xinming> or even /?

[16:30] <lizmat> it's hard to please everybody  :-)

[16:30] <xinming> But never mind, You guys decide.

[16:31] <lizmat> m: say // 42

[16:31] <camelia> rakudo-moar a66b2e161: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Null regex not allowed.  Please use .comb if you wanted to produce a␤sequence of characters from a string.␤at <tmp>:1␤------> say //<HERE> 42␤»

[16:31] <lizmat> it was a compilation error, so could be added without any interference

[16:32] <xinming> It's just there is ? for boolean  + for Numeric

[16:33] <xinming> So I think  ?/  is can be more sensiable, as  ? returns boolean,  / means defined'niss

[16:33] <xinming> for even  ?//

[16:33] <xinming> but // prefix is also acceptable, But looks conflict as comments like other language.

[16:33] <lizmat> well, it's still in e.PREVIEW, so technically it could still be removed  :-)

[16:34] <lizmat> but as a comment, it would be a postfix, no?

[16:34] <xinming> I don't think so, $var.defined is good enough

[16:34] <lizmat> also, conflicts with other languages also apply to infix //

[16:34] <xinming> ?// $var       $var.defined

[16:35] <lizmat> and that hasn't been an issue for the past 15 years at least :-)

[16:35] <xinming> Yea, the  ||  =>  //  conversion is understandable.

[16:35] <xinming> I think if we do   |/  for the first time,    |/  prefix version will be more sensible. :-)

[16:36] <xinming> or even /| 

[16:39] *** Inline joined
[16:40] *** guifa left
[17:07] *** Inline_ joined
[17:07] *** Inline is now known as Guest1981

[17:07] *** Guest1981 left
[17:07] *** Inline_ is now known as Inline

[17:18] *** Inline_ joined
[17:18] *** Inline is now known as Guest5268

[17:18] *** Guest5268 left
[17:18] *** Inline_ is now known as Inline

[17:39] *** dakkar left
[17:40] *** Inline_ joined
[17:40] *** Inline left
[17:40] *** Inline_ is now known as Inline

[17:41] *** Inline_ joined
[17:41] *** Inline left
[17:41] *** Inline_ is now known as Inline

[17:49] *** Inline left
[18:32] *** sena_kun joined
[18:46] <timo> |/.../ sounds like you're trying to slurpy a regex %)

[19:48] *** guifa joined
[19:53] *** guifa left
[21:08] *** Aedil left
[21:19] *** Inline joined
[21:44] *** Inline left
[23:13] *** Sgeo joined
[23:18] *** guifa joined
[23:29] <tbrowder> what's the status of release of v6.e?

[23:58] <tonyo> [Coke] tbrowder will take a look at data dump issues tomorrow night

[23:58] <tonyo> also, apologize for the delay.  i get thousands of GH notifications a day from work and don't typically read any of them

