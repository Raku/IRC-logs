[00:21] *** MyNetAz left
[01:28] *** guifa left
[01:40] *** ACfromTX joined
[02:40] *** Aedil joined
[02:50] *** kylese left
[02:50] *** hulk joined
[02:57] *** avuserow left
[03:15] *** hulk left
[03:15] *** kylese joined
[03:16] <discord-raku-bot> <antononcube> weekly: https://rakuforprediction.wordpress.com/2025/01/03/numeric-properties-of-2025/

[03:16] <notable6> antononcube, Noted! (weekly)

[03:17] <discord-raku-bot> <antononcube> Please, pay no attention to the Wolfram|Alpha image. (That is entirely WordPress doing, BTW...)

[03:18] *** lizmat left
[03:21] *** Aedil left
[03:26] *** Aedil joined
[03:30] *** kylese left
[03:35] *** kylese joined
[03:59] *** avuserow joined
[05:30] *** guifa joined
[06:36] *** guifa left
[07:31] *** [Coke] left
[08:52] *** sena_kun joined
[09:11] *** lizmat joined
[09:26] *** [Coke] joined
[09:37] *** abraxxa-home joined
[09:38] *** abraxxa-home left
[09:40] *** abraxxa-home joined
[10:20] *** sena_kun left
[12:26] *** Sgeo left
[12:39] <discord-raku-bot> <antononcube> TBH, I did not want to do that blog post. It is/was posted too late, i.e. after the New Year. And doing it felt more of a compulsion at some point.

[13:12] *** guifa joined
[14:09] *** Aedil_ joined
[14:10] *** Aedil left
[14:12] *** Aedil_ is now known as Aedil

[15:05] *** abraxxa-home left
[15:28] <guifa> Is there any way to obscure submatches but still be able to process them during match?

[15:28] <guifa> something like 

[15:29] <guifa> my $match = 'a' ~ / <alpha> { say $<alpha> } /; say $match<alpha> # no such key

[16:02] <discord-raku-bot> <antononcube> Shouldn't just // work?

[16:09] *** sena_kun joined
[16:38] <timo> you want ~~ instead of ~ as well, or you'll just match against $_ instead of "a"

[17:01] *** guifa left
[17:02] *** guifa joined
[17:28] <ab5tract> m: say "foo";

[17:28] <camelia> rakudo-moar e7f9223c5: OUTPUT: «foo␤»

[17:28] <ab5tract> m: dd my $ret = say "foo";

[17:28] <camelia> rakudo-moar e7f9223c5: OUTPUT: «foo␤$ret = Bool::True␤»

[17:28] <ab5tract> say $<alpha> is going to have the value of Bool::True 

[17:29] <ab5tract> or rather, the block containing `say $<alpha` will produce Bool::True

[17:40] <discord-raku-bot> <meltingwax> nice post! brings me back to taking number theory in college

[17:45] <discord-raku-bot> <antononcube> @meltingwax Thanks!

[17:46] <timo> guifa: depends on what the code around it looks like, you may be able to use a non-capturing submatch that has the code that does the processing inside of it?

[17:46] <discord-raku-bot> <antononcube> Number Theory is my "unshared love" -- I spent lots of time trying to figure out why, what, and how without much success.

[18:01] <guifa> timo: I could but it feels wasteful to do it twice

[18:03] <discord-raku-bot> <antononcube> @meltingwax I was aware of "Math::Sequences" existence, but I thought it "just" had sequences. I did not know or remembered that it had number theoretic functions. (totient, sigma, etc.)

[18:03] *** Aedil left
[18:10] <timo> guifa: since i don't know your exact needs, i'm not sure what to suggest. you can have a `:my $before; <?{ $before = $/.from; True }> <.alpha> <?{ bla bla }>` though i'm not sure if .from is correct there

[18:12] <guifa> I'm basically doing my standard overkill down the rabbit hol

[18:13] <guifa> "Oh, we just added multicast?  We need a way to get network interfaces.  Well, that means parsing ifconfig.  Well, wouldn't that be easier if we had an IPv4 and IPv6 and MAC address tokens?"

[18:13] <guifa> (there's also a further "Sure, but at that point we should probs have a standard class for them too"

[18:14] <guifa> "standard" = go to in module space

[18:15] <guifa> There's an IP::Parse but it kind of combines several pieces of the puzzle and not quite as modular as I'd like

[19:32] *** guifa left
[20:02] *** guifa joined
[20:19] *** sena_kun left
[20:36] *** Sgeo joined
[21:13] *** guifa left
[21:39] *** stackspace joined
[22:40] *** lizmat left
