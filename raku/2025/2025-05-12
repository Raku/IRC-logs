[00:49] *** SrainUser__ left
[01:05] *** kylese left
[01:05] *** kylese joined
[01:10] *** SrainUser__ joined
[02:06] *** Voldenet left
[02:08] *** Voldenet joined
[02:15] *** kylese left
[02:15] *** kylese joined
[03:17] <Voldenet> With freezer cgroups and suspended scripts the difference grows huge 

[03:18] <Voldenet> simple invocation: `0.99user 0.02system 0:00.70elapsed 145%CPU (0avgtext+0avgdata 185416maxresident)k` criu-restored invocation: `0.17user 0.04system 0:00.17elapsed 125%CPU (0avgtext+0avgdata 150884maxresident)k`

[03:40] <Voldenet> it's a bit messy (I'm not even sure if it will always work), but since it's a major performance boost, maybe someone will find that useful –  https://gist.github.com/voldenet/257fd64e0ade99bb91a237843af96ba1

[03:45] *** kylese left
[03:46] <Voldenet> I'm pretty sure that this can improved further into "run X to restore", but I leave this piece of code as an exercise for the reader ;)

[03:48] *** kylese joined
[03:48] <Voldenet> in which case it probably can be even packaged as a lib

[04:02] *** SrainUser__ left
[04:49] <discord-raku-bot> <coranila> oh that's awesome! i wonder if we could bootstrap on top of criu such that we get freeze/thaw on a thread basis; could be fun for optimization heuristics

[04:50] <discord-raku-bot> <coranila> though we can probably do it as-is by forking; with RakuAST we should even be able to isolate potentially divergent loops?

[05:00] *** Aedil joined
[05:36] <Voldenet> on thread basis - doubt, it's possible, but one would have to deep dive into criu

[05:43] <Voldenet> in fact if criu was invoked as a lib call (without all this parasitic code injection), it'd be probably a lot simpler, but the tool itself wasn't designed as a lib

[06:18] <discord-raku-bot> <coranila> right, that makes sense; as a proof of concept it's already impressive, delivering a NativeCall module that can be embedded during compiler compile time would be quite a feat indeed!

[06:31] *** Sgeo left
[07:35] <discord-raku-bot> <librasteve> weekly: https://rakujourney.wordpress.com/2025/05/12/harc-stack-semantic-time/

[07:35] <notable6> librasteve, Noted! (weekly)

[07:53] *** dakkar joined
[09:29] *** apac left
[10:51] *** apac joined
[11:17] *** apac left
[11:34] <Geth> ¦ ecosystem: 21852c526b | (Elizabeth Mattijsen)++ | META.list

[11:34] <Geth> ¦ ecosystem: Text::Diff::Sift4 now lives in zef ecosystem

[11:34] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/21852c526b

[11:37] *** apac joined
[11:59] *** apac left
[13:14] *** guifa left
[13:14] *** guifa joined
[13:19] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/05/12/2025-19-a-harc-in-time/

[13:29] *** guifa_ joined
[13:30] *** guifa left
[14:00] <discord-raku-bot> <melezhik.> lizmat: ++

[14:00] <tellable6> 2025-05-12T12:27:19Z #raku-dev <lizmat> melezhik looks like the link for the discord channel is incorrect

[14:01] <discord-raku-bot> <melezhik.> Let me check

[14:02] <discord-raku-bot> <melezhik.> lizmat: please check the link again, I have removed expiration bit

[14:03] <discord-raku-bot> <melezhik.> Ok , it did not work

[14:07] <discord-raku-bot> <melezhik.> lizmat: I have updated the link in the post

[14:07] <discord-raku-bot> <melezhik.> This one will never expire

[14:07] <discord-raku-bot> <melezhik.> https://discord.gg/YnqKj6g3Sx

[14:07] <discord-raku-bot> <melezhik.> For whoever cares ))

[14:11] *** SrainUser__ joined
[14:13] *** SrainUser__ left
[14:17] *** guifa_ left
[14:19] *** guifa joined
[15:07] <ab5tract> I liked what I read about Zulip

[16:35] *** dakkar left
[16:49] *** stanrifkin joined
[19:10] *** apac joined
[19:30] *** stanrifkin left
[19:38] *** Aedil left
[20:49] *** silug left
[21:55] *** apac left
[22:15] *** Sgeo joined
