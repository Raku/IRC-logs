[00:17] *** SrainUser joined
[00:26] <SrainUser> I passed an array of strings to a field of an object, then I printed that array from a method within that class, but the array printed is empty. Is there a certain syntax for accessing array attributes within classes?

[00:29] <guifa> 5rainUser: not really, it sounds like for some reason it's not binding during creation

[00:29] <guifa> can you post your code?

[00:30] <guifa> m: class Foo { has @.text; method print { say @!text.join } }; my $foo = Foo.new(text => <a b c d>); $foo.print

[00:30] <camelia> rakudo-moar e7f9223c5: OUTPUT: «abcd␤»

[00:31] <SrainUser> class Class {

[00:31] <SrainUser>     has @!arr;

[00:31] <SrainUser>     method yo() {

[00:31] <SrainUser>         say @!arr;

[00:31] <SrainUser>     }

[00:31] <SrainUser> }

[00:31] <SrainUser> my @array = ["hello", "goodbye", "what"];

[00:31] <SrainUser> my $example = Class.new(

[00:31] <SrainUser>     arr => @array

[00:31] <SrainUser> );

[00:31] <SrainUser> $example.yo();

[00:32] <ab5tract> @!arr is defined as a private instance variable

[00:32] <ab5tract> You can set it manually via a method new / submethod BUILD / submethod TWEAK

[00:33] <guifa> just change it to has @.arr (will make it by default settable via .new) or you can also use `has @!arr is built`, or you can do the adjustments as ab5tract notes in BUILD or TWEAK

[00:33] <ab5tract> but if you define it as @.arr it becomes public and the default new / BUILD implementations will make it work as you currently are creating the $example object

[00:34] <SrainUser> Thanks!

[00:43] *** tejr left
[01:40] <SrainUser> I this a bug?:

[01:41] <SrainUser> my @array1;

[01:41] <SrainUser> my @array2 = [["hello", "goodbye"], True];

[01:41] <SrainUser> @array1 = @array2[0];

[01:41] <SrainUser> say @array1;

[01:41] <SrainUser> Prints a list inside a list.

[01:44] *** Aedil joined
[01:59] <SrainUser> A temporary solution is:

[01:59] <SrainUser> my @array1;

[01:59] <SrainUser> my @array2 = [["hello", "goodbye"], True];

[01:59] <SrainUser> for @array2[0][0..*] -> $item {

[01:59] <SrainUser>     @array1.push($item);

[01:59] <SrainUser> }

[01:59] <SrainUser> say @array1;

[02:06] <phogg> I was porting a Perl module today and found myself missing wantarray. What do people do instead?

[02:06] *** guifa left
[02:09] *** guifa joined
[02:21] <SmokeMachine> m: my @array1; my @array2 [[“hello”, “goodbye”], True]; @array1 =@array2[0]; say @array1

[02:21] <camelia> rakudo-moar e7f9223c5: OUTPUT: «===SORRY!===␤Signatures as constraints on variables not yet implemented. Sorry.␤at <tmp>:1␤------>  my @array2 [[“hello”, “goodbye”], True]<HERE>; @array1 =@array2[0]; say @array1␤Other potential difficulties:␤    Literal values in s…»

[02:22] <SmokeMachine> m: my @array1; my @array2 = [[“hello”, “goodbye”], True]; @array1 =@array2[0]; say @array1

[02:22] <camelia> rakudo-moar e7f9223c5: OUTPUT: «[[hello goodbye]]␤»

[02:22] <SmokeMachine> That looks correct to me…

[02:24] <SmokeMachine> m: my @array1; my @array2 = [[“hello”, “goodbye”], True]; @array1 := @array2[0]; say @array1 # SrainUser is this what you want?

[02:24] <camelia> rakudo-moar e7f9223c5: OUTPUT: «[hello goodbye]␤»

[02:25] <SmokeMachine> m: my @array1; my @array2 = [[“hello”, “goodbye”], True]; @array1 = |@array2[0]; say @array1 # Or maybe this?

[02:25] <camelia> rakudo-moar e7f9223c5: OUTPUT: «[hello goodbye]␤»

[02:25] <SmokeMachine> m: my @array1; my @array2 = [[“hello”, “goodbye”], True]; @array1 = @array2[0][]; say @array1 # not sure about this one…

[02:25] <camelia> rakudo-moar e7f9223c5: OUTPUT: «[hello goodbye]␤»

[02:27] <SrainUser> Yes, although why would it not work with the assignment operator?

[02:28] <SmokeMachine> SrainUser: @array2[0] returns an item that in this case is an array, so it’s put as an item inside the other array

[02:29] <SmokeMachine> m: my @array = [[“bla”, “ble”], True]; dd @array[0]; dd @array[0][]

[02:29] <camelia> rakudo-moar e7f9223c5: OUTPUT: «@array = $["bla", "ble"]␤["bla", "ble"]␤»

[02:30] <SmokeMachine> SrainUser: compare the difference: ^^

[02:31] <ab5tract> In other words, @foo[] is a slice

[02:33] <ab5tract> m: my @a = [1,2], True; dd @a[0], @a[0][], @a[0][*]

[02:33] <camelia> rakudo-moar e7f9223c5: OUTPUT: «@a = $[1, 2]␤[1, 2]␤(1, 2)␤»

[02:33] <SmokeMachine> phogg: what was the case you needed the wantarray?

[02:40] <SrainUser> That is rediculous. I don't want a slice. I want the first element of the array.

[02:40] <phogg> SmokeMachine: a method returning a list of words or the same list joined on a string (in a scalar context)

[02:41] <phogg> it would be easy if return type was used as part of method dispatch

[02:46] *** ming joined
[02:47] *** hulk joined
[02:48] *** kylese left
[02:59] <SmokeMachine> What about something like `return <bla ble ble> but role { method Str { $.join } }`?

[03:00] <SmokeMachine> m: sub a {  <bla ble ble> but role { method Str { $.join } } }; say a; say “{ a }”

[03:00] <camelia> rakudo-moar e7f9223c5: OUTPUT: «(bla ble ble)␤blableble␤»

[03:01] <SmokeMachine> phogg: ^^

[03:08] <timo> SrainUser: when stuff is put into an array, every entry gets a scalar container, so when you take the first element out of @array2 you're getting back a single item that you're assigning to @array1. you'll want to .list, or <> to decont, or [], or something else to get rid of the container that protects it from being iterated while assigning to @array1. another thing you can do is bind instead of

[03:08] <timo> assign to @array1 with the := operator

[03:10] *** ming left
[03:11] <phogg> SmokeMachine: yeah that was what I was thinking, but it seems kind of hacky. Looking for best practice advice.

[03:13] <phogg> I will have a handful of similar methods and I don't like the look of all of that inline. When does it become reasonable to make a custom type instead?

[03:15] *** hulk left
[03:15] <SrainUser> So it doesn't copy the value of the item, it points to the item in the container (or array), or it creates a new container for the value of the item.

[03:15] *** kylese joined
[03:17] *** yewscion joined
[03:20] <timo> when you bind, yes you'll end up with the same item living inside @array2 that now has the "extra name" @array1

[03:20] <timo> when you assign an array to an array variable, you'll get fresh scalar containers for the elements in it, which is important to know

[03:21] <timo> i guess it would be quite surprising if it were different

[03:23] *** stackspace left
[03:27] <ab5tract> phogg: my recommendation would be to write two multi candidates and use a named argument to distinguish between the two

[03:28] <phogg> if I could I would

[03:28] <ab5tract> What do you mean?

[03:28] *** Aedil left
[03:28] <phogg> Doing that would change the API. I'm trying not to.

[03:29] <phogg> if I'm changing the API I can just use different method names

[03:30] <ab5tract> Sure, doing that versus adding an adverb is a matter of taste

[03:31] <ab5tract> I guess I don’t know enough about your use case to provide valuable input

[03:33] <ab5tract> That said, if I were stuck with an API I couldn’t change, I would probably just wrap it with a local sub.

[03:34] <ab5tract> Either way, if the call site knows what it wants, it can call a specialized version of the code to get what it expects. wantarray has been an anti pattern for a

[03:45] *** Aedil joined
[03:52] <ab5tract> * few decades already

[04:40] *** yewscion left
[04:42] *** yewscion joined
[04:45] *** yewscion left
[04:45] *** yewscion_ joined
[04:48] *** yewscion_ left
[04:49] *** yewscion joined
[05:22] *** SrainUser left
[06:15] *** yewscion left
[06:16] *** guifa left
[07:16] *** ulipink joined
[07:17] *** ulipink left
[07:18] *** ulipink joined
[07:18] *** ulipink left
[07:18] *** ulipink joined
[07:18] *** Sgeo left
[08:22] *** sorenson_ joined
[08:23] *** sorenson left
[08:23] *** sorenson_ is now known as sorenson

[09:11] *** dakkar joined
[09:54] *** sena_kun joined
[11:48] <patrickb> Is there a module to set up an ad hoc ecosystem from a local folder with a few module repos checked out?

[11:49] <patrickb> I have a few interdependent modules I'd like to test installation of. So only installing one of them won't work as it depends on the others.

[11:52] <lizmat> I usually bump the versions of the modules locally, and just install them locally when testing that one module

[11:53] <lizmat> one of the advent posts described a content management system

[11:54] <lizmat> https://raku-advent.blog/2024/12/13/day-13-content-storage-for-raku-distributions/

[11:57] <patrickb> But I'm concerned about the dependency specifications those I want to test. So I want zef to be able to resolve and install the dependencies.

[11:59] <patrickb> It should be pretty trivial to write a ecosystem generator, right? I basically only have to copy together all the META6.json files, right?

[12:01] <discord-raku-bot> <antononcube> Is using Docker an alternative ? Generating a dockerfile with the required packages and versions should be easy.

[12:01] <lizmat> hmmm.. create a CURFS with a standard prefix, install the dependencies to that with zef --to (I believe), and then use that standard prefix with -I always ?

[12:03] *** ulipink left
[12:04] <patrickb> Nah, I can just install to the default locations. That's fine. I'm only interested in the installation process itself, not the resulting installation.

[12:04] <patrickb> I think I'll just hack something up. Thanks everyone for chiming in.

[12:52] *** ulipink joined
[12:52] *** ulipink left
[12:52] *** ulipink joined
[12:57] *** ulipink left
[13:22] *** guifa joined
[13:26] <[Coke]> https://docs.raku.org/syntax/wantarray%20-%20perlfunc

[13:59] *** ulipink joined
[13:59] *** guifa left
[14:01] *** guifa joined
[14:04] *** ulipink left
[14:07] *** hudo_ left
[14:08] *** hudo joined
[14:08] *** hudo_ joined
[14:33] *** ulipink joined
[14:33] *** ulipink left
[14:33] *** ulipink joined
[14:38] *** ulipink left
[14:53] *** ulipink joined
[14:53] *** ulipink left
[14:53] *** ulipink joined
[14:57] *** ulipink left
[15:28] *** ulipink joined
[15:33] *** ulipink left
[16:07] *** ulipink joined
[16:12] *** ulipink left
[16:15] *** Manifest0 joined
[16:41] *** ulipink joined
[16:46] *** ulipink left
[16:47] *** SrainUser joined
[16:48] *** SrainUser left
[16:52] *** Simba111 joined
[17:28] *** yewscion joined
[17:29] *** ulipink joined
[17:29] *** ulipink left
[17:29] *** ulipink joined
[17:33] *** ulipink left
[17:37] *** dakkar left
[17:44] <ugexe> patrickb: I would look at these

[17:44] <ugexe> https://github.com/ugexe/zef/blob/main/xt/repository.rakutest

[17:44] <ugexe> https://github.com/ugexe/zef/blob/main/lib/Zef/Repository/Ecosystems.rakumod#L16-L34

[17:44] <ugexe> The slightly harder part is getting `zef` to see those type of custom repositories, but if the above links make sense it should be trivial for you to modify the synopsis code here to use instead `bin/zef`: https://github.com/ugexe/zef/blob/080304e1ec90de4b1bcdc5d2556e778bb52d8c82/lib/Zef/Client.rakumod#L26-L49

[17:45] <ugexe> alternatively you can add a Zef::Repository::Ecosystems entry in the config file similar to the fez one, and point the mirror at a file (instead of a url) that is an array of hash (an array of meta6.json data)

[17:49] <ugexe> there is also https://github.com/tony-o/raku-zeco being worked on (or rather more like waiting for me to review it more) which spins up a docker container with fez ecosystem software which could then be used as the mirror/url for an ecosystem in the zef config

[17:58] <lizmat> and there's https://raku.land/zef:lizmat/Zef::Configuration  :-)

[18:03] *** ulipink joined
[18:09] *** ulipink left
[18:24] *** ulipink joined
[18:28] *** ulipink left
[18:43] *** ulipink joined
[18:43] *** ulipink left
[18:43] *** ulipink joined
[18:45] <patrickb> ugexe: Thanks for the hints! I plan to create a tiny script that copies together a valid ecosystem.json and then add an entry to the zef config.

[18:47] *** ulipink left
[18:50] *** msiism joined
[18:51] <msiism> Is there a way to customize the Rakudo prompt?

[18:53] <jdv> the repl one?

[18:54] <msiism> Yes.

[18:54] <msiism> I'd like to disable the line count.

[18:58] <jdv> idk.  override interactive_prompt?

[18:58] <jdv> https://github.com/rakudo/rakudo/blob/6363b8e176912d240d42cd144c813b8f78276ae7/src/core.c/REPL.rakumod#L411

[19:01] <msiism> Hm… I was more looking for run-time configurability.

[19:03] <msiism> It not all that tragic to have the line numbers in there. It's just that I often copy examples from the REPL into my notes and then have to filter them out.

[19:03] *** ulipink joined
[19:03] <discord-raku-bot> <antononcube> Hmmm... this might mean, that you have to use different REPL.

[19:04] <discord-raku-bot> <antononcube> For example, notebooks.

[19:04] <jdv> you could submit a feature req or a pr but idk if itd get in

[19:04] <[Coke]> lizmat did some work to help customize the REPL previously - I think having something pull from an env var there might be worth considering.

[19:05] <msiism> Yeah, that's what I was thinking.

[19:06] * lizmat is thinking waterbed

[19:06] <[Coke]> msiism: https://github.com/Raku/problem-solving ? 

[19:07] <lizmat> the line numbers (actually result numbers) were added to be able to refer to previous values by means of $*0, $*1, etc

[19:07] <discord-raku-bot> <antononcube> For example, "Jupyter::Chatbook" notebooks take (i) a Raku file with initialization code, and (ii) a JSON file with LLM personas.

[19:07] *** ulipink left
[19:07] <msiism> [Coke]: Okay, I'll see what I can do.

[19:08] <discord-raku-bot> <antononcube> And notebooks support In[1] and Out[12] type of references for previous inputs and outputs.

[19:08] <msiism> lizmat: I see.

[19:08] <[Coke]> so that might correspond to %*ENV{RAKU_REPL_PROMPT} = '[{$N}] > ' as a default?

[19:08] <lizmat> [Coke]: possibly yes, issue / PR welcome

[19:09] <[Coke]> msiism: if you open that problem solving ticket, I can see about putting together a PR

[19:10] <msiism> Okay, nice. I won't be able to get to that today, but withing the next days should be possible.

[19:10] <lizmat> ++msiism 

[19:11] <discord-raku-bot> <antononcube> Using Raku file with initialization code is not in "Jupyter::Kernel" yet -- I have to file an issues so bduggan would implement it.

[19:37] *** Aedil left
[19:39] *** ulipink joined
[19:44] *** ulipink left
[20:26] *** yewscion left
[20:30] *** ulipink joined
[20:34] *** ulipink left
[20:41] *** yewscion joined
[20:49] <msiism> If `||` "returns the first argument that evaluates to True in Boolean context" and "otherwise returns the last argument", why does `'Alpha' || 'Beta'` return `Alpha`?

[20:49] <ugexe> because 'Alpha' evaluates to True in Boolean context

[20:49] <ugexe> m: say so 'Alpha'

[20:49] <camelia> rakudo-moar 8991173fc: OUTPUT: «True␤»

[20:50] <msiism> Okay, but why?

[20:51] <lizmat> because that was so decided

[20:51] <ugexe> https://docs.raku.org/syntax/Boolean%20context

[20:51] <ugexe> "In general, non-zero, non-empty will be converted to True; zero or empty will be equivalent to False. But .so can be defined to return any Boolean value we want, so this is just a rule of thumb."

[20:51] <msiism> I see, thanks.

[21:04] *** ulipink joined
[21:07] <Geth> ¦ ecosystem/main: b3f73ae412 | (Elizabeth Mattijsen)++ | META.list

[21:07] <Geth> ¦ ecosystem/main: Remove two of Kamil Kułaga's distributions

[21:07] <Geth> ¦ ecosystem/main: 

[21:07] <Geth> ¦ ecosystem/main: They have bitrotted, and one of them interferes with the new

[21:07] <Geth> ¦ ecosystem/main: Test::Coverage distribution

[21:07] <Geth> ¦ ecosystem/main: review: https://github.com/Raku/ecosystem/commit/b3f73ae412

[21:08] *** ulipink left
[21:39] *** ulipink joined
[21:43] *** ulipink left
[21:57] *** Xliff joined
[21:57] <Xliff> m: my \💩 = 69; say 💩

[21:57] <camelia> rakudo-moar 8991173fc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> my<HERE> \💩 = 69; say 💩␤»

[21:58] <Xliff> O_o .... NOoooooooo! Whyyyy! My hopes for this years April Fool's is dashed!

[21:58] <Xliff> No. Seriously. Why is that symbol not allowed?

[22:00] <Xliff> I mean, I know it loosely translates to "My crap is pr0n" but c'mon!!!

[22:02] <guifa> m: my term:<💩> = 69; say 💩

[22:02] <camelia> rakudo-moar 8991173fc: OUTPUT: «===SORRY!===␤Type 'term:<💩>' is not declared␤at <tmp>:1␤------> my term:<💩><HERE> = 69; say 💩␤Malformed my␤at <tmp>:1␤------> my term:<<HERE>💩> = 69; say 💩␤␤»

[22:02] <guifa> my sub term:<💩> = {69}; say 💩

[22:02] <guifa> m: my sub term:<💩> = {69}; say 💩

[22:02] <camelia> rakudo-moar 8991173fc: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> my sub term:<💩><HERE> = {69}; say 💩␤    expecting any of:␤        new name to be defined␤»

[22:02] <guifa> m: my sub term:<💩> {69}; say 💩

[22:02] <camelia> rakudo-moar 8991173fc: OUTPUT: «69␤»

[22:02] <guifa> there you go

[22:05] <Xliff> \o

[22:05] <Xliff> guifa: \o/ You've saved my 4/1 # I muzt troll!

[22:06] <guifa> I guess you could just do sub term without the my too

[22:06] <guifa> depends on the scope :) 

[22:06] <Xliff> Yah. Thanks!

[22:28] *** msiism left
[22:34] *** kjp left
[22:36] *** kjp joined
[22:38] *** kjp left
[22:38] *** kjp joined
[22:47] *** ulipink joined
[22:51] *** ulipink left
[23:19] *** sena_kun left
[23:22] *** ulipink joined
[23:22] *** ulipink left
[23:22] *** ulipink joined
[23:26] *** ulipink left
[23:41] *** Sgeo joined
