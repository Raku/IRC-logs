[00:15] *** yewscion joined
[00:17] *** yewscion left
[00:54] *** [Coke] left
[01:03] *** [Coke] joined
[01:20] <tbrowder> melezhik: thank you for the link

[01:20] <tellable6> tbrowder, I'll pass your message to melezhik

[01:33] *** Guest1 joined
[02:15] *** hulk joined
[02:15] *** kylese left
[02:25] *** Guest1 left
[02:44] *** yewscion joined
[02:47] *** yewscion left
[02:54] *** ulipink joined
[03:01] *** yewscion joined
[03:04] *** yewscion left
[03:08] *** ulipink left
[03:15] *** hulk left
[03:16] *** kylese joined
[03:20] *** yewscion joined
[03:24] *** yewscion left
[03:27] *** ulipink joined
[04:10] *** ulipink left
[04:22] *** yewscion joined
[04:24] *** yewscion left
[04:27] *** yewscion joined
[04:30] *** yewscion left
[05:03] *** yewscion joined
[05:06] *** yewscion left
[05:28] *** yewscion joined
[05:31] *** yewscion left
[06:23] *** yewscion joined
[06:27] *** yewscion left
[06:30] *** yewscion joined
[06:33] *** yewscion left
[07:39] *** yewscion joined
[07:42] *** yewscion left
[07:52] *** derpydoo joined
[08:11] *** jjido joined
[08:35] *** yewscion joined
[08:38] *** yewscion left
[08:53] *** yewscion joined
[08:55] *** dakkar joined
[08:55] *** yewscion left
[09:21] *** melezhik joined
[09:21] <melezhik> .

[09:21] <tellable6> 2025-02-06T01:20:37Z #raku <tbrowder> melezhik: thank you for the link

[09:24] <melezhik> tbrowder: yw

[09:30] *** melezhik left
[09:33] *** melezhik joined
[09:33] <melezhik> .

[09:38] *** melezhik left
[09:43] *** sena_kun joined
[09:46] *** jjido left
[09:58] *** jjido joined
[10:01] *** Sgeo left
[10:05] *** jjido left
[10:11] *** sena_kun left
[10:12] *** sena_kun joined
[10:21] *** swaggboi left
[10:44] *** jpn joined
[11:48] *** kjp left
[11:48] *** kjp_ joined
[11:51] *** jpn_ joined
[11:54] *** jpn left
[12:05] *** jpn_ left
[12:08] <discord-raku-bot> <librasteve> melezhik: thanks for these links ... I think that the template one is the bit of information that I was missing in my head ... now I see that the DSL is intended for remote actions via ssh to the target

[12:08] <tellable6> librasteve, I'll pass your message to melezhik

[12:11] <discord-raku-bot> <librasteve> is there a cookbook example of running docker-compose on the target ... for example this is my WP docker-compose.yaml https://github.com/librasteve/raku-CLI-Wordpress/blob/main/resources/wordpress/docker-compose.yaml

[12:11] <discord-raku-bot> <librasteve> (Currently I am most interested in running Cro instead of WP on the target so an example of that would be perfect)

[12:13] <discord-raku-bot> <librasteve> I am also considering Caddy instead of nginx to improve the letsenscrypt process

[12:23] *** jpn joined
[12:36] *** derpydoo left
[12:37] <tbrowder> librasteve: thnx for reminder of Caddy, but Apache has a module that also manages Let's Encrypt painlessly.

[12:39] <tbrowder> just have a cron job that reboots Apache weekly (for my sites) in the wee hours of the weekend.

[12:54] *** Aedil joined
[12:57] <timo> apache should support config file reloading without a reboot

[13:03] <tbrowder> not in this case because of the hands-off secure interaction required with lets encrypt. it takes a couple of two-way comms that i don't fully understand any more.

[13:04] <tbrowder> it's more than a config reload

[13:06] *** jpn left
[13:09] <tbrowder> if all sites have the same cert date, then a 60-day reboot should be optimal

[13:11] *** jpn joined
[13:16] *** jpn left
[13:31] *** melezhik joined
[13:31] <melezhik> .

[13:31] <tellable6> 2025-02-06T12:08:46Z #raku <librasteve> melezhik: thanks for these links ... I think that the template one is the bit of information that I was missing in my head ... now I see that the DSL is intended for remote actions via ssh to the target

[13:32] <melezhik> librasteve: right, just make it sure you've installed the latest version of Sparrowdo , I've fixed few bug recently and released

[13:33] <melezhik> also if you are into docker thins, sparrowdo could deploy things on docker via ssh as well

[13:34] <melezhik> things

[13:37] <tbrowder> it's tax time in the US and i just found a MIT licensed python program on GitHub that might be a good candidate for a Raku makeover for Raku marketing. it's called "tenforty" and can tie in with chatgpt and Jupyter notebooks. it is designed to test tax scenarios for ranges of tax inputs and choices. see <https://github.com/mmacpherson/tenforty>

[13:51] *** jpn joined
[14:02] *** jpn left
[14:06] *** jpn joined
[14:20] *** ulipink joined
[14:20] *** ulipink left
[14:20] *** ulipink joined
[14:20] *** melezhik left
[14:23] *** nil78 left
[14:23] *** nil78 joined
[14:25] *** melezhik joined
[14:26] <melezhik> what are popular template engine in Raku you might know?

[14:26] <melezhik> I am thinking using one of those for Sparrow DSL

[14:26] <jdv> raku?

[14:27] <melezhik> yes

[14:27] <jdv> no, i mean that can be a templating engine:)

[14:28] <melezhik> ah. )))

[14:28] <melezhik> I still need templates somewhere )))

[14:28] <melezhik> looking for this https://raku.land/?q=templater

[14:29] <jdv> just curious - why?

[14:29] <jdv> i've never done any real templating i guess in raku.  but i did write a xml etl tool once upon a time in raku and i used raku as the template lang

[14:30] <jdv> the nitty gritty of formatting was a little annoying but once figured out it was done and dusted

[14:30] *** ulipink left
[14:31] <melezhik> cause templates are convenient¬†pattern for some class of problems/systems

[14:31] <melezhik> for example in configuration management

[14:32] <jdv> ok.  one can create "templates" in raku.  maybe our definitions of templates are different

[14:32] <melezhik> I get that all could be done in Raku, but I am talking about a library, I don't want to create my own solution every time

[14:32] *** yewscion joined
[14:33] <melezhik> template is basically is DSL which is rendered by some underlying programming language , should it be Raku or anything else, the stress on DSL

[14:39] <[Coke]> search for "template" not "templater" ?

[14:41] <[Coke]> https://cro.raku.org/docs/reference/cro-webapp-template-syntax ?

[14:43] <melezhik> yup, I know that thanks, I am not sure if it's possible to reuse this module as is without cro ... ü§î

[14:44] *** ulipink joined
[14:44] <[Coke]> Template::Mustache?

[14:46] <melezhik> Template::Mustache looks good, the only concern it not actively maintained , judging by the last update date

[14:49] *** ulipink left
[14:53] *** yewscion left
[14:57] *** melezhik left
[14:58] <jdv> there's always inline::perl5 and the dozens of options over there:)

[14:58] <discord-raku-bot> <librasteve> yeah I have once used Template::Mustache for assembling up spam emails and sending them to LLM to fuzzify

[14:59] <discord-raku-bot> <librasteve> historically (ie with perl) I always leaned to Template::Toolkit

[15:04] *** ulipink joined
[15:04] *** ulipink left
[15:04] *** ulipink joined
[15:04] <[Coke]> https://github.com/raku-community-modules/template6 ?

[15:05] <patrickb> Most template engines are small to medium sized projects. I wouldn't worry much about being actively maintained. Usually such projects either do their job fine, or are easily fixed up.

[15:05] *** jjido joined
[15:05] <discord-raku-bot> <librasteve> ^^ ++ ... maybe a couple of the more obvious ones would be good candidates for community modules

[15:07] <discord-raku-bot> <librasteve> oh - I see already has been

[15:07] <discord-raku-bot> <librasteve> for Template6

[15:24] *** ulipink left
[15:29] *** jjido left
[15:30] *** yewscion joined
[15:54] *** ulipink joined
[15:54] *** ulipink left
[15:54] *** ulipink joined
[15:58] *** ulipink left
[16:23] *** vrurg left
[16:23] *** yewscion left
[16:33] *** vrurg joined
[16:37] *** ulipink joined
[16:44] *** ulipink left
[16:49] *** wafflus joined
[17:03] *** jpn left
[17:06] *** jpn joined
[17:09] <wafflus> what does $() do like why is $(5) an int but $(1,2) a scaler and not an int

[17:09] <tellable6> 2024-05-17T22:30:51Z #raku <ab5tract> wafflus: regex is not the approach to take for checking elements

[17:09] <tellable6> 2024-05-17T22:35:06Z #raku <ab5tract> wafflus: It‚Äôs like taking an entire type system and stringifying it :)

[17:11] <wafflus> i mean not a list

[17:11] *** swaggboi joined
[17:13] *** yewscion joined
[17:15] *** jpn left
[17:16] *** jpn joined
[17:16] *** ulipink joined
[17:16] *** ulipink left
[17:16] *** ulipink joined
[17:17] <wafflus> :m say "test"

[17:19] <discord-raku-bot> <librasteve> m: say "test"

[17:19] <evalable6> librasteve, rakudo-moar 736208dbb: OUTPUT: ¬´test‚ê§¬ª

[17:19] <discord-raku-bot> <Raku eval>  test 

[17:20] <discord-raku-bot> <librasteve> (the colon goes after the m ;-) )

[17:20] *** ulipink left
[17:21] <discord-raku-bot> <librasteve> to place a $ dollar sign before something is to itemize it (ie that places the thing into a Scalar container that can eg. be passed like a reference to a subroutine)

[17:23] <wafflus> yes but why is it sometimes the scaler and them sometimes an int

[17:23] <wafflus> and not the same for an array or a list

[17:23] <discord-raku-bot> <librasteve> can you share some example code please

[17:23] *** Sgeo joined
[17:23] *** jpn left
[17:23] <wafflus> k

[17:24] <wafflus> one minute

[17:24] <discord-raku-bot> <librasteve> tx

[17:26] <discord-raku-bot> <librasteve> m: say (1, 2, 3).VAR ~~ Scalar; 

[17:26] <evalable6> librasteve, rakudo-moar 736208dbb: OUTPUT: ¬´False‚ê§¬ª

[17:26] <discord-raku-bot> <Raku eval>  False 

[17:26] <discord-raku-bot> <librasteve> m: say $(1, 2, 3).VAR ~~ Scalar;

[17:26] <discord-raku-bot> <Raku eval>  True 

[17:26] <evalable6> librasteve, rakudo-moar 736208dbb: OUTPUT: ¬´True‚ê§¬ª

[17:27] <discord-raku-bot> <librasteve> .VAR is a special method that gives you back the container of something (if there is one) https://docs.raku.org/syntax/VAR

[17:28] <discord-raku-bot> <librasteve> Usually the container is transparent to operations, such as type checking (which is why I would like to see your code)

[17:29] <discord-raku-bot> <librasteve> m: say (1, 2, 3) ~~ List

[17:29] <discord-raku-bot> <Raku eval>  True 

[17:29] <evalable6> librasteve, rakudo-moar 736208dbb: OUTPUT: ¬´True‚ê§¬ª

[17:29] <discord-raku-bot> <librasteve> m: say $(1, 2, 3) ~~ List

[17:29] <evalable6> librasteve, rakudo-moar 736208dbb: OUTPUT: ¬´True‚ê§¬ª

[17:29] <discord-raku-bot> <Raku eval>  True 

[17:31] <wafflus> https://pastebin.com/6NcekJTm

[17:31] <wafflus> just based each section into the terminal

[17:31] <wafflus> sorry i wrote it in emacs and it doesnt paste so well

[17:33] <discord-raku-bot> <librasteve> tx!

[17:33] <wafflus> like for instance if this is a string $("pear") then should this not be an $([1,2]) array or should both not be scalars?

[17:35] <discord-raku-bot> <librasteve> you are asking .VAR.WHAT ...

[17:35] <wafflus> yes sorry

[17:37] <discord-raku-bot> <librasteve> what do you predict happens when you call .VAR on something without a container?

[17:39] <wafflus> well not tbh it seems to be both sometimes it hard to know

[17:39] *** ulipink joined
[17:39] *** ulipink left
[17:39] *** ulipink joined
[17:39] <discord-raku-bot> <librasteve> lets try it, here's something with a container...

[17:41] <wafflus> might have something to do with the brackets as well

[17:43] <discord-raku-bot> <librasteve> ...checking

[17:44] <wafflus> m: my \a = $(5); say a

[17:44] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´5‚ê§¬ª

[17:44] <wafflus> m: my \a = $(5); say a.VAR.WHAT

[17:44] *** ulipink left
[17:44] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´(Int)‚ê§¬ª

[17:45] <wafflus> i'm thinking it converts the values on the left to a scaler and then does the binding or assigment?

[17:45] <wafflus> when you use my(\a,\b)

[17:46] *** dakkar left
[17:46] <discord-raku-bot> <librasteve> ok - here's what i think is going on and causing confusion

[17:49] <wafflus> i am also not sure the difference between \a = and \a := i always thought they did the same thing

[17:49] <wafflus> taht they always bind

[17:49] <discord-raku-bot> <librasteve> if you go $(THING) then this does not itemize the THING if it is just a single thing - if its a list then is does get itemized

[17:50] <wafflus> ok

[17:50] <wafflus> so only a list will get converted?

[17:50] <wafflus> or an array

[17:50] <wafflus> etc

[17:50] <wafflus> ?

[17:53] <discord-raku-bot> <librasteve> I think that $() is shorthand for .item as documented here https://docs.raku.org/type/Mu#method_item

[17:54] <discord-raku-bot> <librasteve> that says Forces the invocant to be evaluated in item context and returns the value of it.

[17:55] <discord-raku-bot> <librasteve> since the exceptions you have shared are single items already such as Str or Int, then this is a null operation for them

[17:55] <wafflus> ah ok ty it just confusing when the literal is something and then when i bind to it it ends up as a scalar

[17:56] <discord-raku-bot> <librasteve> ok so now these single things (literals) can be bound or assigned to dollar or sigilless variables

[17:57] <discord-raku-bot> <librasteve> as you know, binding := simply associates the symbol on the left with the item on the right - no container is inserted

[17:58] <discord-raku-bot> <librasteve> and assignment to a dollar variable, my $x; $x=42; will make a copy of the rhs and place in the container on the left (so this is why when there is an assignment there is now a container)

[17:58] *** ulipink joined
[17:58] *** ulipink left
[17:58] *** ulipink joined
[17:59] <discord-raku-bot> <librasteve> BUT there is no such thing as assignment to a sigilless variable

[17:59] <discord-raku-bot> <librasteve> m: my \x = 42; x=43; say x

[17:59] <evalable6> librasteve, rakudo-moar 736208dbb: OUTPUT: ¬´(exit code 1) Cannot modify an immutable Int (42)‚ê§  in block <unit> at /tmp/CanfPw63Jv line 1‚ê§‚ê§¬ª

[17:59] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot modify an immutable Int (42)   in block <unit> at main.raku line 1  

[17:59] <wafflus> ok

[18:01] <discord-raku-bot> <librasteve> You can use = in a declaration however, but that means "evaluate the rhs and then set the symbol to point to it"

[18:01] *** jjido joined
[18:02] <discord-raku-bot> <librasteve> so I think that raku lets you make the container on the rhs with eg $(1) and then binds the symbol to the container when you do that

[18:03] *** ulipink left
[18:03] <wafflus> ah ok tyi

[18:03] <discord-raku-bot> <librasteve> got there in the end!

[18:04] <wafflus> i think the () brackets at the left of the assingment change it as well

[18:04] <discord-raku-bot> <librasteve> oh - lemme see

[18:07] <wafflus> i mean maybe non of this is of any importance i just like to be able to expalin what happaning even if it is just to my self

[18:07] <discord-raku-bot> <librasteve> I'm not sure ... this multiple declaration is like a sub routine call with a list on the right and a capture on the left - my initial tests suggest that there is no difference but I may have missed a wrinkle

[18:08] <discord-raku-bot> <librasteve> yeah - I know the feeling

[18:09] <discord-raku-bot> <librasteve> increasingly I think that raku is like those turtle pictures where most regular features on built on a set of composable primitives ("all the way down")

[18:09] <wafflus> :)

[18:10] <lizmat> m: dd 42.item.VAR

[18:10] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´42‚ê§¬ª

[18:10] <discord-raku-bot> <librasteve> in this case, you have the primitives of containers, of sigils, of assignment and of binding ... and now you can combine these in many ways to get the job done in the most efficient way

[18:10] <lizmat> m: dd Date.today.item.VAR

[18:10] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´Date.new(2025,2,6)‚ê§¬ª

[18:11] <wafflus> m:¬† my \ba = $(44) say ba.VAR.WHAT; my (\ta) = 5; say ta.VAR.WHAT ;

[18:11] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> my \ba = $(44)<HERE> say ba.VAR.WHAT; my (\ta) = 5; say ta.V‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚Ä¶¬ª

[18:11] <lizmat> hmmm

[18:11] <wafflus> m:¬† my \ba = $(44); say ba.VAR.WHAT; my (\ta) = 5; say ta.VAR.WHAT ;

[18:11] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´(Int)‚ê§(Scalar)‚ê§¬ª

[18:11] <discord-raku-bot> <librasteve> [now lizmat is going to come and explain what's really going on ;-)]

[18:12] <wafflus> big guns

[18:12] <wafflus> ty librasteve

[18:12] <lizmat> well, not really, I'm afraid

[18:13] <wafflus> btw its the same with $var binding will also bind to a scaler and not the int

[18:13] <lizmat> I vaguely remember a discussion before (even in Rakudo issues) as to why $(scalar value) doesn't return a container

[18:14] <lizmat> fact is that the item method:

[18:14] <lizmat> method item(Mu \item:) is raw { item }

[18:14] <lizmat> doesn't add a container (nor does it remove it

[18:15] <lizmat> and $(foo) codegens to foo.item

[18:15] <lizmat> however, the item sub *does* containerize

[18:15] <lizmat> m: dd (item 42).VAR

[18:15] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´42‚ê§¬ª

[18:15] <discord-raku-bot> <librasteve> say [1,2,3].item.raku;          # OUTPUT: ¬´$[1, 2, 3]‚ê§¬ª   <=== from the docs

[18:15] <lizmat> huh

[18:15] <lizmat> m: dd (item 42)

[18:15] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´42‚ê§¬ª

[18:16] <discord-raku-bot> <librasteve> oh - yes I see

[18:16] <lizmat> hmmm.. apparently it selects this candidate: multi sub item(Mu $a) { $a }

[18:17] <lizmat> which would actually de-containerize"

[18:17] <lizmat> m: my $a = 42; dd $a, item($a)

[18:17] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´$a = 42‚ê§42‚ê§¬ª

[18:17] <lizmat> yu[

[18:17] <lizmat> yup   weird  

[18:17] <lizmat> m: my $a = 42; dd $a.VAR, item($a).VAR

[18:17] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´42‚ê§42‚ê§¬ª

[18:17] *** ulipink joined
[18:18] <lizmat> m: my $a = 42; dd $a.VAR.^name, item($a).VAR.^name

[18:18] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´"Scalar"‚ê§"Int"‚ê§¬ª

[18:18] <lizmat> m: my $a = 42; dd $a.VAR.^name, $a.item.VAR.^name

[18:18] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´"Scalar"‚ê§"Scalar"‚ê§¬ª

[18:18] <lizmat> m: my $a = 42; dd $a.VAR.^name, 42.item.VAR.^name

[18:18] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´"Scalar"‚ê§"Int"‚ê§¬ª

[18:20] <lizmat> looks like commit b0caab5b reverted a change before

[18:21] <lizmat> https://github.com/rakudo/rakudo/commit/b0caab5b

[18:22] <lizmat> I don't recall why it was reverted, but judging from the day in the month, it could well be because of ecosystem breakage

[18:22] *** ulipink left
[18:23] <wafflus> kind of confusing for amateurs like me :)

[18:23] <lizmat> I completely agree, and maybe we should revisit that before the 2025.02 release

[18:23] <lizmat> [Coke] jdv what are your feelings / recollections about this ?

[18:24] <discord-raku-bot> <librasteve> .oO

[18:26] <wafflus> question are you guys more focused on backcompat or would you make changes and break back compat if it made the language more consitant?

[18:26] <lizmat> back compat is important!

[18:26] <lizmat> so most probably if we're going to fix this, it's probably in language version 6.e

[18:27] <lizmat> to which you would have to opt-in at the moment

[18:27] <wafflus> cool i think when you are smaller its easier to break compant if the change would be a benefit? but maybe a big language is is harder to break than compat?

[18:28] <wafflus> i image perl is different than raku it that regards?

[18:28] <lizmat> well, that's why we have language levels in Raku

[18:28] <lizmat> if you specify a certain language level in your code, you're guaranteed the same semantics as long as that language level is supported by Raku

[18:28] <discord-raku-bot> <librasteve> so does multi sub item(|c) {...} get selected on multiple arguments?

[18:29] <wafflus> cool just sometime i think you guys give too much ways to do things

[18:29] <lizmat> librasteve I think  ik does

[18:29] <lizmat> *it

[18:29] <lizmat> wafflus: yes, I agree...  that's the heritage I'm afraid

[18:29] <discord-raku-bot> <librasteve> its the anti python

[18:30] <lizmat> for example: I wouldn't be against having named arguments only be specifiable with the colon syntax

[18:30] <lizmat> and not with the fat comma syntax

[18:30] <wafflus> but it so wide!!

[18:30] <lizmat> and have the fat comma syntax generate positional Pair arguments *always*

[18:32] <discord-raku-bot> <librasteve> I think its nice to have options ... to the extent that raku is akin to a natural language, we humans are used to having many, many ways to say the same thing and then to select for nuance and emphasis

[18:33] <discord-raku-bot> <librasteve> lizmat: you would drop Thing.new: name => value; eh?

[18:33] <lizmat> yup, only Thing.new: :name(value)

[18:34] <lizmat> you see: Thing.new: "name" => value

[18:34] <lizmat> already produces a positional Pair

[18:34] <discord-raku-bot> <librasteve> fwiw... I think that having a bit fat arrow can help when there is a lot of data to ingest ... I agree that the colon syntax is neater

[18:34] <lizmat> m: sub a(|c) { dd c }; a foo => 42; a :foo(42); a "foo" => 42

[18:34] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´\(:foo(42))‚ê§\(:foo(42))‚ê§\("foo" => 42)‚ê§¬ª

[18:35] <wafflus> is there a way to write :foo(42) it without using the brackets?

[18:35] <lizmat> if it's a numeric value, you can write :42foo

[18:36] <lizmat> m: sub a(|c) { dd c }; a foo => 42; a :foo(42); a "foo" => 42; a :42foo

[18:36] <camelia> rakudo-moar 736208dbb: OUTPUT: ¬´\(:foo(42))‚ê§\(:foo(42))‚ê§\("foo" => 42)‚ê§\(:foo(42))‚ê§¬ª

[18:36] <discord-raku-bot> <librasteve> wafflus: now you do want another way - lol

[18:36] <wafflus> typing () annyoing

[18:36] <wafflus> :)

[18:36] <lizmat> the idea behind allowing :42foo is that you could have a :$th named argument, and write :5th

[18:37] <discord-raku-bot> <librasteve> kind of like a positional then

[18:37] <discord-raku-bot> <librasteve> ordinal vs cardinal

[18:39] <discord-raku-bot> <librasteve> here's the kind of code where imo a fat arrow helps: my \df = DataFrame.new( data => [[0..3] xx 6], index => (Date.new("2022-01-01"), *+1 ... *)[^6], columns => <A B C D> );

[18:39] *** ulipink joined
[18:39] *** ulipink left
[18:39] *** ulipink joined
[18:40] <lizmat> librasteve   the columns case could be shortened to :columns<A B C D>

[18:40] <lizmat> in any case, it doesn't feel like either solution for that code would help readability

[18:41] <lizmat> putting the data in a @data array first, and the index value in an index varlable, would allow you to do:

[18:41] <lizmat> my \df = DataFrame.new(:@data, :$index, :columns<A B C D>)

[18:42] <discord-raku-bot> <librasteve> btw this is not real code (phew) ... I wanted to exaggerate the fat arrow as a helper in a sea of brackets

[18:42] <lizmat> which may be a bit less efficient, but unless it's ultra-hot code, it shouldn't really matter

[18:43] <jdv> huh?  you're asking about something from 2021?

[18:43] <lizmat> yeah.. wonder if you by chance remember why that revert commit was done

[18:44] <jdv> didn't you do the revert?

[18:44] *** ulipink left
[18:44] <jdv> that was also before i was rel mgr

[18:45] <jdv> maby sena_kun barely remembers? :)

[18:45] <lizmat> jdv: I did... but I do a *lot* of commits, and only have a vague recollection of something that happened several 1000 commits ago  :-

[18:45] <lizmat> )

[18:46] <jdv> i don't remember anything about it, sorry.

[18:46] <lizmat> no worries!

[18:57] <[Coke]> lizmat,jdv: in general, if you have a "risky" change, get it in ASAP and I'll do a Blin run asap

[18:57] <[Coke]> If you're asking more "why did we revert this particular item"... I think you're right as to why

[18:58] <[Coke]> I've only used $2.50 of my azure resources this month so far. :)

[18:58] <lizmat> [Coke]: I was just thinking that maybe we should try to fix this weird discrepancy in 6.e maybe, not that we have revision-gated

[18:58] <[Coke]> +1

[18:59] *** jjido left
[19:16] *** ulipink joined
[19:16] *** ulipink left
[19:16] *** ulipink joined
[19:20] *** ulipink left
[19:25] *** ulipink joined
[19:27] *** Aedil left
[19:28] *** librasteve_ joined
[19:28] <librasteve_> https://www.irccloud.com/pastebin/hsBKPkGe

[19:30] *** ulipink left
[19:31] *** jjido joined
[19:53] *** wafflus left
[20:22] *** apac joined
[20:52] *** lizmat_ joined
[20:54] *** bisectable6 left
[20:54] *** evalable6 left
[20:54] *** sourceable6 left
[20:54] *** bisectable6 joined
[20:54] *** evalable6 joined
[20:55] *** ecocode left
[20:55] *** ecocode joined
[20:55] *** lizmat left
[20:57] *** sourceable6 joined
[21:08] *** apac left
[21:16] *** jpn joined
[21:17] *** kjp_ left
[21:17] *** kjp joined
[21:18] <ugexe> fat arrow provides a better multi-line alignment option

[21:18] <ugexe> one can still do e.g. :foo(     1) but that juts doesnt seem as nice as foo     => 1

[21:19] <ugexe> i would never write :1foo

[21:25] *** guifa joined
[21:52] *** yewscion_ joined
[21:53] *** yewscion left
[21:57] *** jjido left
[21:58] *** jpn left
[22:03] *** jpn joined
[22:15] *** ryoskzypu left
[22:17] *** ryoskzypu joined
[22:18] <sena_kun> jdv, what's the commit we're talking about? :)

[22:21] <ab5tract> Couldn‚Äôt the distinguishing feature be whether there are any candidate signatures that expect positional Pairs?

[22:22] <ab5tract> Eg, fat arrows will still be named args except in the case where they are sent to a signature that expects named args?

[22:25] <ab5tract> It‚Äôs more complicated than a 100% clear cut distinction, but at the same time positional Pairs are less common than named args.

[22:38] *** jpn left
[22:48] *** librasteve_ left
[22:48] *** sena_kun left
[22:55] *** sftp_ joined
[22:56] *** sftp left
[22:56] *** sftp_ is now known as sftp

[23:00] *** ryoskzypu left
[23:01] *** ryoskzypu joined
[23:15] *** wafflus joined
[23:25] *** ulipink joined
[23:25] *** ulipink left
[23:25] *** ulipink joined
[23:28] *** yewscion_ left
[23:30] *** yewscion joined
[23:41] *** sftp left
[23:42] *** sftp joined
[23:57] *** yewscion left
[23:58] *** yewscion joined
