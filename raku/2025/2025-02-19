[01:02] *** Manifest0 left
[01:23] *** ryoskzypu left
[01:24] *** ryoskzypu joined
[01:36] *** ryoskzypu left
[01:36] *** ryoskzypu joined
[01:41] *** nil78 left
[01:47] *** nil78 joined
[02:59] *** hulk joined
[02:59] *** kylese left
[03:06] *** mtj joined
[03:15] *** hulk left
[03:15] *** kylese joined
[04:15] *** wbooze joined
[04:39] *** jpn joined
[04:43] *** jpn left
[05:03] *** wbooze left
[05:19] *** wbooze joined
[05:37] *** Aedil joined
[06:10] *** Aedil left
[06:27] *** Aedil joined
[07:26] *** silug left
[07:53] *** silug joined
[08:25] *** ACfromTX left
[08:33] *** Sgeo left
[08:39] *** Manifest0 joined
[08:49] *** jpn joined
[09:01] *** jpn left
[09:12] *** jpn joined
[09:13] *** ACfromTX joined
[09:13] *** dakkar joined
[09:13] *** wayland76 joined
[09:14] <wayland76> Hi all!  

[09:17] *** jpn left
[09:25] *** jpn joined
[09:35] <discord-raku-bot> <librasteve> good morning

[09:39] <wayland76> I'm trying to implement a bunch of operators that will allow us to walk trees like XPath.  I've seen the .tree function (not well documented).  I think I'm going to have to make some custom iterators for them.  At the moment, I'm just trying to get .tree() to output each element separately instead of as an array.  

[09:40] <wayland76> m: <c b a>.tree(*.self.say)

[09:40] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´(c b a)‚ê§¬ª

[09:40] <wayland76> What am I doing wrong?  

[09:41] <wayland76> m: <c b a>.tree(*.say)

[09:41] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´(c b a)‚ê§¬ª

[09:47] <wayland76> Actually, I've figure I was getting over-fancy.  But I'm still going to want something that walks a tree and just selects the nodes that match a function (like grep, but walks a tree).  Any tips?  

[09:57] *** sena_kun joined
[10:09] *** wbooze left
[10:10] <discord-raku-bot> <antononcube> Look at Cases of Wolfram Language: https://reference.wolfram.com/language/ref/Cases.html

[10:18] <discord-raku-bot> <antononcube> I strongly suspect that RakuAST is the best way to do this. Also, there are recent discussions here about similar functionalities.

[10:21] <discord-raku-bot> <antononcube> See / search discussions around ‚Äútree-sitter‚Äù.

[10:27] *** sena_kun left
[10:32] <wayland76> antoncube: Interesting!  The Wolfram one I'm assuming was for inspiration.  The RakuAST stuff looks interesting, but I'm trying to a) make something that'll work at least somewhat on any nested data structure (which I'm not sure the RakuAST stuff does), and b) will call a "parent" method if available, to allow walking up the tree, or sideways, or whatever.  

[10:34] <wayland76> Anyway, I've got my operators for child, descendent, and self working, so I'll stop for the night (9:33pm here).  I think the next step will be to have it match against a LibXML document.  

[10:35] <wayland76> I'm hoping to have operators that do most of the tree walking that XPath axes can do (parent, ancestor, following-sibling, etc).  

[10:35] *** wbooze joined
[11:14] <lizmat> tbrowder: re Data::Dump::Tree  https://github.com/nkh/P6-Data-Dump-Tree/issues/60#issuecomment-2668321046

[11:39] <tbrowder> lizmat: thnx

[11:40] <tbrowder> m: say "\x[120]"; say "\c[100]"

[11:40] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´ƒ†‚ê§d‚ê§¬ª

[11:41] <tbrowder> m: say "\o[200]"

[11:41] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´¬Ä‚ê§¬ª

[11:42] <tbrowder> is there any way to use an octal number in the string to get a char?

[11:42] <tbrowder> i know you can in a pod string

[11:44] <tbrowder> postscript uses  \nnn  inside the string as a char refererenc, but i don't think that would work

[11:45] <tbrowder> m: say "\O[200]"

[11:45] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unrecognized backslash sequence: '\O'‚ê§at <tmp>:1‚ê§------> say "\<HERE>O[200]"‚ê§    expecting any of:‚ê§        argument list‚ê§        double quotes‚ê§        term‚ê§¬ª

[11:45] <lizmat> m: say "\o[101]"

[11:46] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´A‚ê§¬ª

[11:46] <lizmat> m: say "\o101"

[11:46] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´A‚ê§¬ª

[11:46] <lizmat> looks to me \o does what you want ?

[11:47] <lizmat> m: say 0o101

[11:47] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´65‚ê§¬ª

[11:47] <lizmat> m: say 0o101.chr

[11:47] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´A‚ê§¬ª

[11:47] <tbrowder> yes, i'm no sure that's in the docs. the two hex and dec forms are together

[11:47] <lizmat> if it's not in the docs, it should be :)

[11:48] <tbrowder> yes, for sure

[11:49] <tbrowder> thank you! it makes my old redbook very useful again

[11:51] <tbrowder> m: say "0d10"

[11:51] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´0d10‚ê§¬ª

[11:52] <tbrowder> m: say 0d10

[11:52] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´10‚ê§¬ª

[11:52] <tbrowder> m: say 0o101

[11:52] <camelia> rakudo-moar 65b2056e9: OUTPUT: ¬´65‚ê§¬ª

[13:21] *** wbooze left
[13:31] *** melezhik joined
[13:31] <melezhik> .

[13:31] <melezhik> weekly: https://sparrowdo.wordpress.com/2025/02/19/managing-multiple-ssh-hosts-using-inventory-files-in-sparrowdo/

[13:31] <notable6> melezhik, Noted! (weekly)

[13:35] *** melezhik left
[13:49] *** topnep left
[13:52] *** topnep joined
[13:52] *** topnep left
[13:55] *** topnep joined
[14:05] *** jpn left
[14:09] *** jpn joined
[14:12] *** apac joined
[14:35] <tbrowder> i just submitted a docs PR

[14:39] *** euandreh joined
[14:51] *** ryoskzypu left
[14:53] *** ryoskzypu joined
[15:25] *** euandreh1 joined
[15:27] *** euandreh left
[15:27] *** euandreh1 is now known as euandreh

[15:29] *** Aedil left
[15:43] *** Aedil joined
[16:10] *** Guest45 joined
[16:11] *** Guest45 left
[16:25] *** dawids_ joined
[16:38] <discord-raku-bot> <librasteve> wayland76: sorry went out for a bit, how about

[16:38] <discord-raku-bot> <librasteve> m: say [[1,2,3],[[4,5],6,7]].deepmap({$_ %% 2 ?? $_ !! Empty});

[16:38] <evalable6> librasteve, rakudo-moar 60a2d44b8: OUTPUT: ¬´[[2] [[4] 6]]‚ê§¬ª

[16:38] <discord-raku-bot> <Raku eval>  [[2] [[4] 6]] 

[16:39] <discord-raku-bot> <librasteve> (or duckmap)

[16:39] <discord-raku-bot> <librasteve> ?

[17:08] *** silug left
[17:11] *** dawids_ left
[17:11] *** silug joined
[17:13] *** Mrtophat joined
[17:15] <timo> is there something convenient that's like "zef look" but instead of extracting a release it "git clone"s a distro's source repo to a folder on my disk?

[17:16] *** Mrtophat left
[17:24] <discord-raku-bot> <melezhik.> timo: I am recalling I did some automation , but not exactly what you are asking , if you just need a source code from tarball you may use this - https://sparrowhub.io/plugin/zef-fetch/0.001000

[17:26] <discord-raku-bot> <melezhik.> Maybe I can adjust it a bit and return scm repo via state as well, as long as it is valid in META6.json file

[17:27] <discord-raku-bot> <melezhik.> You can try out passing identity as a git repo and see what it does , I am not however sure that git scm is a valid zef identity

[17:29] <timo> yeah i only want to clone the repo, only the latest - or specified - version that was released does not help me at all for what i want to do

[17:32] <discord-raku-bot> <melezhik.> I just checked zef docs , so identity could be an scm repo , so you could do this ‚Äúmy $state = task-run ‚Äòfetch thing‚Äô, ‚Äòzef-fetch‚Äô, %( identity => ‚Äòmodule git repo‚Äô); say $state<directory>;‚Äù

[17:33] <discord-raku-bot> <melezhik.> Does what you need to do

[17:33] <discord-raku-bot> <melezhik.> But you need to know scm repo

[17:34] <discord-raku-bot> <melezhik.> Or actually just - git clone repo , I dunno ü§∑))

[17:35] *** dakkar left
[17:37] <timo> yeah if i already have the scm url i don't need to do anything with zef. except the whole point is i don't want to find or type out the repo url, i want to have only the short-name of the distro and get a clone in a predictable place

[17:38] <timo> i want to "hack-on Zef" and it would do something like `mkdir -p ~/raku/ecosystem/ugexe/github/zef/`, git clone zef in there, and optionally cd me into it

[17:41] *** silug left
[17:42] *** silug joined
[17:44] <ugexe> i usually do `zef look Foo::bar` although that isn't quite what you asked for since it will download tar.gz files and not put it in a predicable place (it goes in some temp dir i think)

[17:44] <ugexe> you can do e.g. `zef browse zef source --/open` but that only works if they link the repo url in the support.source field of the metadata

[17:45] <ugexe> (`zef browse zef source --/open` would output the repo to fetch to be clear - you'd still need to pipe it to git to actually fetch)

[17:45] <ugexe> also sorry i didnt look back far enough to see you already mentioned zef look

[17:46] <timo> right

[17:46] <ugexe> i think `zef browse zef source --/open` fits the job, but most people probably dont fill out that field

[17:47] <ugexe> you can get rid of `--/open` and it'll open a browser window to the repo

[17:47] <timo> in the case of JSON::Fast, zef browse JSON::Fast source --/open will give 'browse' urls supported by JSON::Fast: source because the url is a git:// and therefore the check for http or https fails and zef considers it "not what you want"

[17:48] <timo> is Zef::Client meant to be easy to use in a custom script or one-liner? what I ended up with now looks like `use Zef::Client; use Zef::Config; my $confpath = Zef::Config::guess-path; my $conf = Zef::Config::parse-file($confpath); my $c = Zef::Client.new(config => $conf); $c.search(...)` which is a little bit wordy and maybe the guess-path + parse-file case could get a shortcut somehow

[17:50] <ugexe> i guess https://github.com/ugexe/zef/blob/080304e1ec90de4b1bcdc5d2556e778bb52d8c82/lib/Zef/CLI.rakumod#L900-L903 should also not fire if --/open is specified

[17:50] <timo> i could imagine a `zef script` with optional `--repl` that pre-initialises a Zef::Client with all the bells and whistles from the commandline arguments that zef has

[17:50] <timo> or alternatively a `use Zef::Client::DWIM;`

[17:50] <timo> but i have no idea if anyone else has needs to script with zef, so it could be a waste of time, too

[17:55] <ugexe> there needs to be a real Zef::Configuration class that contains the configuration and works with Zef::CLI and MAIN param config options and ENV options

[17:56] <ugexe> but yeah ideally Zef::Client would require less verbosity to use without providing a DWIM class that isnt otherwise used by any of the other code in Zef

[18:01] *** dawids_ joined
[18:01] *** dawids_ left
[18:04] *** apac left
[18:07] <timo> right, if it's not used by Zef itself, it is likely to bit-rot without anybody noticing. test cases can only do so much if nobody shows up to write down all the implicit assumptions

[18:09] *** apac joined
[18:16] *** apac left
[18:36] *** abraxxa-home joined
[18:39] *** abraxxa-home left
[18:41] *** sena_kun joined
[18:47] *** jpn left
[19:48] *** Aedil left
[20:00] *** apac joined
[20:00] *** nil78 left
[20:02] *** nil78 joined
[20:14] *** topnep left
[20:15] *** topnep joined
[20:33] <wayland76> librasteve: Interesting!  deepmap looks useful, but I'm really looking for a deepgrep.  

[20:57] <timo> you can use gather/take for that if you like

[20:59] <timo> m: my @in = [[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]]; dd deepmap-with-if => @in.deepmap({ $_ if .is-prime }), deepmap-with-gather-take => (do gather @in.deepmap({ take $_ if .is-prime })).list;

[20:59] <camelia> rakudo-moar 10040b980: OUTPUT: ¬´:deepmap-with-gather-take((2, 3, 5, 7, 11))‚ê§:deepmap-with-if([[[2, 3], [5]], [[7], [11]]])‚ê§¬ª

[20:59] <timo> depends on what you want, gather/take will give you a flat result, deepmap with if will keep the structure

[21:00] <timo> ah i see librasteve already showed how Empty can do that

[21:01] <wayland76> Nice!  I'm after the flat structure.  Thanks!  

[21:03] <timo> i've never actually used ** aka HyperWhatever before, but i did not expect this:

[21:03] <timo> m: dd [[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]][**]

[21:03] <camelia> rakudo-moar 10040b980: OUTPUT: ¬´(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12).Seq‚ê§¬ª

[21:03] <discord-raku-bot> <librasteve> .oO

[21:03] <timo> but what i did expect, after seeing that, was for postcircumfix:<[]> with ** would also allow :kv and :p and friends

[21:05] <discord-raku-bot> <librasteve> m: [[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]].flat(:hammer).say

[21:05] <evalable6> librasteve, rakudo-moar 10040b980: OUTPUT: ¬´(1 2 3 4 5 6 7 8 9 10 11 12)‚ê§¬ª

[21:05] <discord-raku-bot> <Raku eval>  ([[1 2 3] [4 5 6]] [[7 8 9] [10 11 12]]) 

[21:06] <timo> right, :hammer is also relatively new AFAIK

[21:07] <discord-raku-bot> <librasteve> yep - but I wonder if it plays nice with :kv | :p

[21:09] <timo> not sure flat is actually a place i'd expect those adverbs to apply

[21:10] <discord-raku-bot> <librasteve> not sure I understand what you meant with HyperWhatever playing nice with kv | p

[21:10] <discord-raku-bot> <librasteve> guess I need an example

[21:11] <timo> well, for the tree-ified numbers between 1 and 12 i was hoping for something like `(0,0,0) => 1, (0,0,1) => 2, (0,0,2) => 3, (0,1,0) => 4, ...`

[21:16] *** silug left
[21:16] <discord-raku-bot> <librasteve> well - can't help on that - but tx for introducing me to HyperWhatever ;-)

[21:16] <wayland76> I have a question.  I'm using the XML module by lizmat, and it says "Unless you are doing something that requires direct access of the @.nodes property, it's probably easier (and less noisy) to use the array access syntax.".  However, at some point (when passing to a function), I get the error "Type check failed in binding to parameter '@inputs'; expected Positional but got XML::Element ((my \XML::Element_44...)"

[21:18] <timo> it really feels like we should have an ecosystem module with an implementation of what i just described

[21:18] <timo> wayland76: that sounds like passing a single element to a constructor's argument that would want an array (or similar)

[21:19] *** silug joined
[21:21] <timo> what module is that exactly? i don't see one by liz in the ecosystems?

[21:21] <wayland76> Sorry, it's a community module and GitHub has her name on it.  

[21:21] <wayland76> https://raku.land/zef:raku-community-modules/XML

[21:22] <wayland76> https://github.com/raku-community-modules/XML/blob/main/lib/XML/Element.rakumod

[21:22] <timo> ah right, that's the last commit that changed the file

[21:24] <timo> i think what that message (comment?) you pasted is refering to is that you would use $my-element[3] for getting a node's fourth child node

[21:26] <wayland76> timo: agreed.  However, I have some code that's testing for that, and I've been using $item ~~ Positional, but now I'm going to have to start testing for .can('AT-POS') or whatever.  I'm of the opinion that XML::Element should also be marked "does Positional does Associative".  

[21:31] <timo> oh, yes it makes sense that if it has these methods it should also do that role

[21:35] <discord-raku-bot> <librasteve> since a community module, maybe a PR would help?

[21:35] *** apac left
[21:36] <wayland76> librasteve: Agreed; I hope to get to it, but for now, I've made an issue instead.  

[21:38] <discord-raku-bot> <librasteve> ++

[21:40] <discord-raku-bot> <librasteve> also a lot of raku is kinda stubs for more work ... I would love to see clean and simple primitives for tree walking in a module that could ultimately become part of the core

[21:47] <discord-raku-bot> <antononcube> I would love to see gcd on Rat‚Äôs. üôÇ

[21:48] <discord-raku-bot> <antononcube> Doing that later today‚Ä¶

[21:48] <discord-raku-bot> <librasteve> diy

[21:48] <discord-raku-bot> <librasteve> dont forget the gaussian complex no's

[21:49] <wayland76> Regarding a tree module, likewise.  

[22:00] <wayland76> If I get this done, it might be a step in the right direction; an inspiration/basis for the core tree-walking modules.  It seems achievable at the moment, if I don't run into too many more bugs.  

[22:00] <wayland76> Anyway, off to work.  Good $time-of-day to you all :) 

[22:05] *** wayland76 left
[22:16] <discord-raku-bot> <antononcube> @librasteve I implemented the GCD for Gaussian integers already. It is needed to factorize Gaussian integers, (also implemented, now.)

[22:19] *** topnep left
[22:19] <timo> randomly responded to two of the XML github issues

[22:20] *** topnep joined
[22:29] <discord-raku-bot> <antononcube> It turns out that Perl has a comprehensive Number theory package. And -- surprise, surprise -- that Perl package follows and mentions Mathematica a lot and often.

[22:30] <discord-raku-bot> <antononcube> I referring to "Math::Prime::Util::GMP".

[22:32] *** jpn joined
[22:36] <timo> here's a question / concern / bike shedding oportunity about a page in the docs: https://github.com/Raku/doc/pull/4555#issuecomment-2669915588 would be happy for some input

[22:36] *** silug left
[22:36] *** silug joined
[22:37] *** jpn left
[22:37] *** donaldh left
[23:53] *** sena_kun left
