[01:22] *** stanrifkin left
[02:01] *** apac joined
[02:58] *** derpydoo joined
[03:08] *** Aedil joined
[03:24] *** apac left
[03:25] *** Aedil left
[03:29] *** Aedil joined
[03:49] *** derpydoo left
[04:47] *** derpydoo joined
[05:43] *** abraxxa joined
[06:34] *** Sgeo_ left
[06:39] *** Some-body_ joined
[06:39] *** DarthGandalf left
[06:42] *** Some-body_ is now known as DarthGandalf

[07:07] *** melezhik joined
[08:03] *** dakkar joined
[08:04] *** ACfromTX left
[08:17] *** ACfromTX joined
[08:29] *** lichtkind joined
[08:59] *** apac joined
[09:01] *** ACfromTX left
[09:14] *** ACfromTX joined
[09:16] *** melezhik left
[10:07] *** justache joined
[10:16] <disbot2> <holmdunc> Homebrew's formula DSL has some bizarre stuff like ohai onoe opoo ü§î

[10:38] *** justache left
[10:44] *** justache joined
[11:08] *** derpydoo left
[11:20] *** apac left
[11:30] <disbot2> <simon_sibl> I apologize if thats not enough information but in my code, this line %profiles{$token}<rates_snapshot> = %LATEST_CURRENCY_RATES; binds instead of assign, I dont get the point of having = and := if sometimes = still binds ü•π  makes it so confusing, I simply wanna copy the value, but in my code after I modify %LATEST_CURRENCY_RATES it also changes in the %profile

[11:31] <disbot2> <simon_sibl> how can i force the copy

[11:37] <disbot2> <simon_sibl> %profiles{$token}<rates_snapshot> = {%LATEST_CURRENCY_RATES}; this worked adding {} but why ??

[11:54] <ab5tract> I agree that this is confusing. I think it‚Äôs designed this way to avoid excessive copying. Still, it feels wrong to me as well that you have to send the hash into a constructor in order get the assign semantics you are expecting

[11:55] <ab5tract> simon_sibl: do you have a GitHub account? It may be worth discussing in a problem solving ticket

[11:59] <disbot2> <librasteve> @simon_sibl good question, I was as suprised as you and tried to get a hint from ChatGPT regarding the why https://chatgpt.com/share/68da7480-5cd0-8009-b38a-3361f03b0b4e

[12:01] <disbot2> <librasteve> that goes part way to explaning, but then I realised also that %profiles{$token}<rates_snapshot> is itself a Scalar container (ie the value of any Hash element is held in a Scalar container, so your example is different to assigning a Hash to another Hash %a = %b

[12:03] <disbot2> <librasteve> so (yes I checked) %a = %b does do copy on assignment

[12:03] <disbot2> <librasteve> but you are doing the same as $x = %b

[12:05] <disbot2> <librasteve> and if you think of it that way, then it is natural for Raku (when you ask it to store a Hash in a Scalar) to store a reference to the Hash rather than to make a whoke new anonynous Hash

[12:07] <disbot2> <librasteve> one more point - just as in perl, {a => 0, b => 4} is a literal Hash - same as writing %(a => 0, b => 4), so the curlies make a new Hash from their innards (a slightly weird use of them to as them to make a Hash from another Hash (the normal contents is a list of Pairs) but seems that Raku DWIMs that OK

[12:09] <disbot2> <librasteve> ab5tract: don't know if you caught it but I made a reply to your point on HN - apologies

[12:38] <lizmat> librasteve_: it's more that when the left-hand side of an assignment is an iterable (such as an array or a hash), that the RHS is being iterated over and assigned to the LHS

[12:38] <lizmat> a scalar is not iterable, so assigning a hash to scalar just puts the Hash object into the scalar

[12:48] *** apac joined
[13:36] *** Sgeo joined
[13:40] *** apac left
[14:42] <Voldenet> m: my %x = :a(1); my %y; %y<x> = %x; %x<b> = 2; say (:%x, :%y); # this actually stores a scalar that points to %x

[14:42] <camelia> rakudo-moar 47746a84e: OUTPUT: ¬´(x => {a => 1, b => 2} y => {x => {a => 1, b => 2}})‚ê§¬ª

[14:42] <Voldenet> so it's akin to

[14:43] <Voldenet> m: my %x = :a(1); my %y; my $c = %x; %y<x> = $c; %x<b> = 2; say (:%x, :%y);

[14:43] <camelia> rakudo-moar 47746a84e: OUTPUT: ¬´(x => {a => 1, b => 2} y => {x => {a => 1, b => 2}})‚ê§¬ª

[14:46] <Voldenet> m: my %x = :a(1); my %y; %y<x> = %x; %x<b> = 2; say (%x.WHERE, %y<x>.WHERE, %x.WHERE == %y<x>.WHERE);

[14:46] <camelia> rakudo-moar 47746a84e: OUTPUT: ¬´(2609782467152 2609782467152 True)‚ê§¬ª

[14:52] <Voldenet> (the example to what was said above)

[14:53] <Voldenet> not cloning anything is actually common strategy in languages, usually it's difficult to make deep clone of nested collections

[14:54] <Voldenet> well, not too difficult, just that you have to ask for that explicitly

[14:54] <Voldenet> e.g. you have to recursively clone everything

[14:54] <Voldenet> using your own functions

[14:57] <Voldenet> m: my %x = :a(1); my %y; %y<x> = Hash.new(%x); %x<b> = 2; say (%x.WHERE, %y<x>.WHERE, %x.WHERE eq %y<x>.WHERE); say (:%x, :%y); # Hash.new is being used to explicitly do the shallow copy 

[14:57] <camelia> rakudo-moar 47746a84e: OUTPUT: ¬´(3168631941920 3168632024872 False)‚ê§(x => {a => 1, b => 2} y => {x => {a => 1}})‚ê§¬ª

[14:58] <Voldenet> what I'm a bit surprised about it the following

[14:58] <Voldenet> m: my %x = :a(1); my %y; %y<x> = %x.Hash; %x<b> = 2; say (%x.WHERE, %y<x>.WHERE, %x.WHERE eq %y<x>.WHERE); say (:%x, :%y); # .Hash on hash doesn't do anything?

[14:58] <camelia> rakudo-moar 47746a84e: OUTPUT: ¬´(2659745247152 2659745247152 True)‚ê§(x => {a => 1, b => 2} y => {x => {a => 1, b => 2}})‚ê§¬ª

[15:00] <Voldenet> However

[15:01] <Voldenet> m: my @n = [1]; my @m; @m[0] = @n.Array; @n[1] = 2; say (:@n, :@m)

[15:01] <camelia> rakudo-moar 47746a84e: OUTPUT: ¬´(n => [1 2] m => [[1]])‚ê§¬ª

[15:01] <Voldenet> soooo‚Ä¶ .Hash is not copying the hash, but .Array is copying the array - I'm not entirely sure if that's sane

[15:19] *** coleman left
[15:21] *** coleman joined
[15:26] *** apac joined
[15:41] <disbot2> <simon_sibl> Hey yes I have a Github account, sorry for the late reply, busy day T-T

[15:43] <disbot2> <simon_sibl> well as long as I got it to work with {} just makes no sense to me if Raku does the distinction between = and := = should be deep copy and := bind (ref) But I am far from being an expert so maybe what I am saying is a terrible idea, just thats what makes sense to me, or then to add an explicit .copy method ? idk

[16:00] *** Aedil left
[16:05] *** Aedil joined
[16:08] *** marcprux joined
[16:19] *** arkiuat joined
[16:20] <arkiuat> Voldenet: huh, that is weird. You'd think that .Hash in that context would do the same thing as .Array

[16:38] <disbot2> <antononcube> Please vote: https://news.ycombinator.com/item?id=45415790

[16:38] *** marcprux left
[16:41] *** apac left
[16:42] *** dakkar left
[16:47] *** simcop2387 left
[16:53] *** abraxxa left
[16:57] <ab5tract> antononcube: I only see ‚Äò[dead]‚Äô on that post, plus your commment

[16:57] <disbot2> <antononcube> Ha! Strange.

[16:58] <disbot2> <antononcube> This is what I see:

[16:58] <disbot2> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1422266362314883072/HW-post.png?ex=68dc0c45&is=68dabac5&hm=d9789d141c4576df7b8791c9a059333cd39efe860423a70a1af3d13db6cf3730&

[16:59] <disbot2> <antononcube> Maybe, someone at HW actively hates Raku or me. (I hope it is just me.)

[17:04] <librasteve_> notable6: weekly

[17:04] <notable6> librasteve_, 17 notes: https://gist.github.com/fa37e372f4855d30bd62ce47d3c21f15

[17:09] <[Coke]> librasteve_: There is no blog post, but a one liner about Snyk in there. let me know if you need/want more.

[17:22] *** simcop2387 joined
[17:24] <disbot2> <librasteve> Coke: I could use some more please ... is there a url to link to some context maybe?

[17:26] <disbot2> <librasteve> @antononcube I see dead also and the article does not appear in the new article sorted by time at 47 mins

[17:30] <disbot2> <antononcube> Damn! üôÇ

[17:35] <[Coke]> again, there is no blog post.

[17:35] <[Coke]> don't have time to write one today, apologies.

[17:43] <disbot2> <librasteve> m: no worries;

[17:43] <evalable6> librasteve, rakudo-moar 47746a84e: OUTPUT: ¬´¬ª

[17:44] *** marcprux joined
[17:54] <librasteve_> https://rakudoweekly.blog/2025/09/29/2025-39-inversion-of-control/

[17:59] <disbot2> <antononcube> - Don't call us, we'll call you. - Leave the driving to us.

[18:26] *** Sgeo_ joined
[18:29] *** Sgeo left
[19:34] *** marcprux left
[19:37] *** Aedil left
[19:37] *** arkiuat left
[19:50] *** arkiuat joined
[19:54] *** arkiuat left
[20:23] *** arkiuat joined
[20:37] *** cm left
[20:43] *** cm joined
[20:47] *** apac joined
[21:56] *** arkiuat left
[22:25] *** apac left
[23:17] *** lichtkind left
