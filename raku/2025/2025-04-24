[00:00] *** jpn left
[00:18] <tbrowder>  hi, is there a way to check github workflows files on one's on PC (at least for the appropriate OS)?

[00:18] *** lichtkind left
[00:18] <tbrowder> s/on/own/

[00:18] <timo> you're looking for something like "are there obvious errors in the file"?

[00:23] <tbrowder> not exactly. i'm getting failures on github for regular raku tests on my local linux box where they work fine. issues with missing deps are easy to see and fix, but others leave me pretty clueless. i've looked at detailed debug logs and sometimes that really helps, but not always.

[00:23] <tbrowder> and the debug loggs a

[00:23] <tbrowder> *logs are really long

[00:25] <timo> grondilu, first thought from looking at a profile, using "fail" may be costing surprisingly much. it creates a Backtrace for every failure object and Backtrace.new takes 350ms out of the 7,598ms total

[00:26] <timo> ah yes, debugging CI stuff is a difficult and arduous process in general i'm afraid

[00:26] <timo> i don't know if there is a runner that can run a github actions thing on your own PC

[00:34] <tbrowder> thnx

[00:51] *** jpn joined
[00:56] *** jpn left
[01:11] *** hulk joined
[01:12] *** kylese left
[01:13] *** oodani left
[01:17] *** oodani joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:40] *** jpn joined
[02:45] *** jpn left
[03:13] <Geth> ¦ docker: 9687c88020 | AntonOks++ | 4 files

[03:13] <Geth> ¦ docker: Bump to 2025.04 [skip workflow]

[03:13] <Geth> ¦ docker: review: https://github.com/rakudo/docker/commit/9687c88020

[03:20] *** stanrifkin_ joined
[03:23] *** stanrifkin left
[03:32] *** vrurg left
[03:44] *** oodani left
[03:44] *** vrurg joined
[03:53] *** oodani joined
[04:18] *** jpn joined
[04:23] *** jpn left
[04:23] *** discord-raku-bot left
[04:23] *** discord-raku-bot joined
[04:30] *** kylese left
[04:32] *** kylese joined
[04:37] *** thowe left
[04:48] *** thowe joined
[05:09] *** thowe left
[05:30] *** kylese left
[05:30] *** kylese joined
[05:44] *** thowe joined
[05:46] *** eseyman left
[05:50] *** manu_ joined
[05:50] *** manu_ is now known as eseyman

[05:55] *** jpn joined
[06:00] *** jpn left
[06:29] <grondilu> timo: but it's not normally running though.  I don't think I have that many "try" statements.

[06:32] * grondilu checks

[06:33] <grondilu> actually I use quite a few to check that a square index is still on the board

[06:38] *** wayland joined
[06:42] *** wayland76 joined
[06:42] *** wayland left
[06:51] *** jpn joined
[06:56] *** jpn left
[06:57] <grondilu> timo: you were right I could gain some perf by removing those try statements.

[07:02] *** jpn joined
[07:05] <wayland76> Does anyone know of a way of testing what the resources are for a module?  I have a module where I thought I'd specified everything in the config, but it's suddenly not working.  

[07:07] <grondilu> isn't META6.json the sole authority to specify resources?

[07:07] *** jpn left
[07:08] <wayland76> Yep, but it doesn't seem to be picking it up.  

[07:08] <wayland76> The fact that it's in docker may not be helping.  

[07:12] *** jpn joined
[07:16] *** stanrifkin_ left
[07:17] *** Aedil joined
[07:23] *** Sgeo_ left
[07:26] *** jpn left
[07:35] <discord-raku-bot> <coranila> m: mutli infix:<+>(Int $a, $b) { } # LTA

[07:35] <evalable6> coranila, rakudo-moar dc8db4f0c: OUTPUT: «(exit code 1) ===SORRY!=== Error while compilin…»

[07:35] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1) at /home/glot/main.raku:1 ------> mutli infix:<+>(Int⏏ $a, $b) { } # LTA     expecting any of:         infix         infix stopper 

[07:35] <evalable6> coranila, Full output: https://gist.github.com/d68b6edfd54a5d87b965e64d5c63e753

[07:36] <discord-raku-bot> <coranila> that's a rakudo issue I think? for clarity: mutli apparently doesn't get caught as a typo

[07:41] <wayland76> It's at the least a less-than-awesome error message.  

[07:44] <discord-raku-bot> <coranila> right; but getting the parse failure in the signature seems to imply the parser is also failing in the wrong way?

[07:44] <discord-raku-bot> <coranila> as in, we shouldn't be expecting a signature if we don't have a proper routine decl, no?

[07:46] <wayland76> Is it expecting a Signature though?  Or is it expecting an argument list for another reason?  It could be thinking that, rather than a function declaration, this is instead a function call.  

[07:47] <discord-raku-bot> <coranila> m: mutli ($x, $y) { ... } # expecting TTIA..

[07:47] <evalable6> coranila, rakudo-moar dc8db4f0c: OUTPUT: «(exit code 1) ===SORRY!=== Error while compilin…»

[07:47] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '$x' is not declared.  Perhaps you forgot a 'sub' if this was intended to be part of a signature? at /home/glot/main.raku:1 ------> mutli (⏏$x, $y) { ... } # expecting TTIA.. 

[07:47] <evalable6> coranila, Full output: https://gist.github.com/6467eae159289430823ba21c3c81d8e4

[07:48] <discord-raku-bot> <coranila> m: mutli ($, $) { .. } # actual TTIA...?

[07:48] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unexpected block in infix position (missing statement control word before the expression?) at /home/glot/main.raku:1 ------> mutli ($, $)⏏ { .. } # actual TTIA...?     expecting any of:         infix         infix stopper         postfix 

[07:48] <evalable6> coranila, rakudo-moar dc8db4f0c: OUTPUT: «(exit code 1) ===SORRY!=== Error while compilin…»

[07:48] <evalable6> coranila, Full output: https://gist.github.com/24966a258cb07b84174fea0b2b921ea8

[07:49] <wayland76> m: my ($a); my $b; protocho infix:<+>($a, $b) { }

[07:49] <camelia> rakudo-moar dc8db4f0c: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------>  ($a); my $b; protocho infix:<+>($a, $b)<HERE> { }␤    expecting any of:␤        infix␤ …»

[07:49] <discord-raku-bot> <coranila> well, it seems we agree that it's not particularly transparent what exactly is going on :)

[07:50] <wayland76> Yes.  I found that if I removed the "Int" from your original example, it started complaining about $a and $b being not declared.  

[07:50] <wayland76> So I still think it's trying to call infix:<+> as a function

[07:50] <discord-raku-bot> <coranila> oh, it gets funnier:

[07:51] <discord-raku-bot> <coranila> m: mutli ($, $)

[07:51] <evalable6> coranila, rakudo-moar dc8db4f0c: OUTPUT: «(exit code 1) ===SORRY!=== Error while compiling /tmp/8cj03c3Hof␤Undeclared routine:␤    mutli used at line 1␤␤»

[07:51] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Undeclared routine:     mutli used at line 1  

[07:51] <discord-raku-bot> <coranila> m: q[mutli ($, $)].AST.say

[07:51] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling  Undeclared routine:     mutli used at line -1. Did you mean ''?  

[07:51] <evalable6> coranila, rakudo-moar dc8db4f0c: OUTPUT: «(exit code 1) ===SORRY!=== Error while compiling EVAL_0␤Undeclared routine:␤    mutli used at line 1␤␤»

[07:52] <grondilu> what if someone actually wants to make a mutli sub, though?

[07:52] <discord-raku-bot> <coranila> m: sub mutli {}; mutli foo ($, $) {...} # hmm

[07:52] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unexpected block in infix position (missing statement control word before the expression?) at /home/glot/main.raku:1 ------> sub mutli {}; mutli foo ($, $)⏏ {...} # hmm     expecting any of:         infix         infix stopper         postfix 

[07:52] <evalable6> coranila, rakudo-moar dc8db4f0c: OUTPUT: «(exit code 1) ===SORRY!=== Error while compilin…»

[07:52] <evalable6> coranila, Full output: https://gist.github.com/edd5a8548d45b393960a25ccbfa8065b

[07:52] <wayland76> Not sure if grondilu is joking, but that'd be sub mutli(...) {...}

[07:52] <discord-raku-bot> <coranila> well, I don't know! thanks for the feedback :)

[07:53] <wayland76> You're welcome :) 

[07:53] <discord-raku-bot> <coranila> locally i get Routine 'mutli' is not declared.  Did you mean 'mutli '? btw which is definitely funny

[07:54] <wayland76> Does anyone know how %?RESOURCES gets populated?  Because I'm trying to use it in my tests, and I'm wondering if it's somehow not getting populated at all.  Or if there's a way to test it?  

[07:54] <wayland76> Oh, interesting!  Maybe a version difference then.  

[07:56] <discord-raku-bot> <coranila> most likely; I'm on 2025.03 via rakubrew!

[08:13] *** dakkar joined
[08:37] *** melezhik joined
[08:38] *** lichtkind joined
[08:41] <melezhik> o/

[08:43] <melezhik> i wonder if someone besides @sergot could look at io::socket::ssl licensing issue? https://github.com/sergot/io-socket-ssl/issues/26 I would really appreciate that, as me and Alpine linux guys are trying to create apk packages for my Sparky module

[08:46] <melezhik> and this license issue blocks the proccess )

[08:49] *** donaldh joined
[08:52] <lizmat> melezhik: maybe it's time we moved that module to raku-community-modules, and give it an MIT license there ?

[08:55] <melezhik> yeah, maybe I need to clarify if MIT license will work for alpine maintainers ... but that's good idea imho 

[08:56] *** melezhik left
[08:56] <lizmat> well, check with the alpine maintainers if MIT would be ok  ( I think it would, as it's the most permissive )

[09:03] <discord-raku-bot> <melezhik.> lizmat: yep, just did

[09:06] <lizmat> and it's acceptable to them?

[09:25] *** jpn joined
[09:38] *** MoC joined
[10:07] <discord-raku-bot> <melezhik.> Looks like that , asked them to follow up to the gh issue

[10:09] <discord-raku-bot> <melezhik.> They require a license to be in file in the repo so that an alpine Linux matter would pick it up and make it a part of apk archive , that’s an official alpine Linux requirement for packages

[10:10] <discord-raku-bot> <melezhik.> And by the way as a part of Spraky support they are packaging the latest version of Rakudo to be available in the bleed edge of Alpine

[10:11] <discord-raku-bot> <melezhik.> And eventually to be released for Alpine 3.22

[10:12] <discord-raku-bot> <melezhik.> And also this is quite interesting - “think Alpine 3.22 will also be the first version with a MoarVM that uses mimalloc.”

[10:12] <discord-raku-bot> <melezhik.> Any possible implications of this ? Just wonder …

[10:24] <dakkar> my gentoo has moarvm 2025.01 compiled with `--has-mimalloc`

[10:24] <dakkar> since 2024.10, actually

[10:30] *** melezhik joined
[10:30] *** melezhik left
[10:46] *** derpydoo left
[11:44] *** jpn left
[11:45] *** jpn joined
[11:50] *** jpn left
[12:21] *** jpn joined
[12:31] *** jpn left
[12:37] *** jpn joined
[12:42] *** jpn left
[12:45] *** jpn joined
[12:50] *** melezhik joined
[12:50] <melezhik> lizmat: can we move io socket ssl to the communtity repo and add licence file ?

[12:50] <melezhik> https://github.com/sergot/io-socket-ssl/issues/26

[12:51] <lizmat> we can fork it, and add a license file

[12:52] <melezhik> good

[12:53] <melezhik> anything I need to do from this point or you could reply to the gh issue?

[12:53] <lizmat> well, in a little while, you would need to adapt the dependency spec to IO::Socket::SSL perhaps

[12:55] <Geth> ¦ ecosystem: 2b81172aae | (Elizabeth Mattijsen)++ | META.list

[12:55] <Geth> ¦ ecosystem: Remove sergots distributions that have been archived

[12:55] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/2b81172aae

[12:55] *** jpn left
[12:55] <lizmat> I guess we will need to move OpenSSL as well

[12:55] *** melezhik left
[12:56] *** melezhik joined
[12:56] *** jpn joined
[12:56] <lizmat> hmmm... maybe ugexe has rights on the  IO::Socket::SSL repo

[12:56] <lizmat> I'll make a PR

[12:57] <melezhik> thanks a lot

[12:57] <melezhik> where should I adjust dependency - here? https://github.com/melezhik/sparky-job-api/blob/ca8d4717edf530fec093de23c766ca7f6872cb35/META6.json#L11

[12:58] <lizmat> if the dependency is like that, you don't have to

[12:58] <melezhik> ah, ok

[12:58] <melezhik> good then

[13:06] <lizmat> https://github.com/sergot/io-socket-ssl/pull/27 

[13:06] <lizmat> now, if ugexe could merge that, we'd be in business

[13:18] *** melezhik left
[13:58] *** apac joined
[14:33] <lizmat> .tell melezhik: IO::Socket::SSL has a LICENSE file

[14:33] <tellable6> lizmat, I'll pass your message to melezhik

[15:09] *** nine left
[15:10] *** nine joined
[15:14] *** Sgeo joined
[15:20] *** lichtkind left
[15:22] <discord-raku-bot> <sergot> hi all, just noticed someone is talking about IO::Socket::SSL and others, I can move them under the community modules, would that help?

[15:24] <discord-raku-bot> <sergot> hi lizmat <waves> I'd love to get back to maintaining the useragent/ssl modules actively in the future, but in the meantime I believe I can move them under the community repos? how do I do that?

[15:25] *** jpn left
[15:29] <discord-raku-bot> <sergot> should I simply 'transfer' the repos to raku-community-modules? 😉

[15:31] *** sergot joined
[15:32] *** jpn joined
[15:33] *** sergot left
[15:33] *** sergot joined
[15:44] <discord-raku-bot> <antononcube> @sergot I think it is a matter of authorization. The transfer can be done by the people who are maintainers of this repository: https://github.com/raku-community-modules .

[15:57] *** sergot left
[15:58] *** jpn left
[16:06] *** apac left
[16:15] *** sorenson left
[16:17] *** sorenson joined
[16:34] *** dakkar left
[16:41] <discord-raku-bot> <melezhik.> lizmat: after you’ve added the license file , should a new version be released to fez or alpine guys can just package from the main branch in git ?

[16:41] <tellable6> 2025-04-24T14:33:50Z #raku <lizmat> melezhik: IO::Socket::SSL has a LICENSE file

[17:27] <lizmat> melezhik: I also bumped the version, it's now https://raku.land/github:sergot/IO::Socket::SSL  0.0.4

[17:28] <lizmat> will check with sergot if they want to move to zef ecosystem (which I can now do for them)

[18:24] <timo> grondilu: do you have a rough estimation of how the perf improves from that?

[18:29] *** abraxxa-home joined
[18:40] <lizmat> sergot you should be able to transfer your modules to raku-community-modules now

[18:56] *** wayland joined
[18:56] *** wayland76 left
[19:21] <discord-raku-bot> <melezhik.> .tell lizmat: thanks 🙏 for all your help

[19:21] <tellable6> melezhik., I'll pass your message to lizmat

[19:56] *** MoC left
[19:57] *** MoC joined
[19:59] *** MoC left
[21:09] *** abraxxa-home left
[22:18] *** tejr left
[22:42] *** tejr joined
[23:02] <wayland> .tell tbrowder: This is why I've wrapped my github tests in a docker container, so that I can run the container on local when debugging these problems.  

[23:02] <tellable6> wayland, I'll pass your message to tbrowder

[23:07] <wayland> Should I expect $?DISTRIBUTION and %?RESOURCES to be available in my tests?  Does the module need to be installed, or will it run on my local?  Do I need to declare something first (such as "unit module"), or should it just work?  

[23:10] <ugexe> the documentation says

[23:10] <ugexe> The %?RESOURCES variable is only accessible inside of modules. If you want to access %?RESOURCES outside of a module, you'll need to expose that API yourself. One way to do that is to create a routine in the lib directory to return its value:

[23:11] <ugexe> your tests are not modules

[23:11] <wayland> Oh!  So I make a method on my class that returns a filehandle to the resource?  

[23:12] <ugexe> or you can make a method that just return $?DISTRIBUTION or %?RESOURCES 

[23:12] <wayland> OK, thanks, that helps with that then.  

[23:13] <wayland> And then, what's used to determine whether I'm "Inside a module"?  Does it absolutely require a "unit module" statement, or is it enough to be in a class?  

[23:14] <ugexe> if its in a .rakumod file

[23:14] <ugexe> anything that would be listed in `provides` of META6.json

[23:15] <wayland> OK, that works for me :) 

[23:15] <wayland> Thanks!  

