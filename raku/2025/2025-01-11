[00:05] *** msiism left
[00:40] <Geth> ¬¶ problem-solving/coke/repl: aeb6ffa26c | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[00:40] <Geth> ¬¶ problem-solving/coke/repl: Update Configurable-REPL.md

[00:40] <Geth> ¬¶ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/aeb6ffa26c

[01:57] *** yewscion left
[01:58] *** yewscion joined
[02:21] *** tjr left
[02:43] *** kylese left
[02:43] *** hulk joined
[03:15] *** hulk left
[03:15] *** kylese joined
[03:30] *** kylese left
[03:34] *** kylese joined
[03:43] *** yewscion left
[04:35] *** Aedil joined
[05:30] *** yewscion joined
[05:31] *** yewscion_ joined
[05:34] *** yewscion left
[06:17] *** yewscion joined
[06:19] *** yewscion_ left
[06:20] *** yewscion left
[07:51] *** ulipink joined
[08:23] *** apac joined
[09:05] <discord-raku-bot> <holmdunc> Something I've seen go wrong in other REPLs with configuration prompts is when the characters that make up the escape sequences for ANSI colours get counted towards the visible width of the prompt, and that screws up line-wrapping calculations etc

[09:15] *** apac left
[09:16] <discord-raku-bot> <holmdunc> In Bash, one can give it a helping hand and delimit such ANSI stuff explicitly https://www.gnu.org/software/bash/manual/html_node/Controlling-the-Prompt.html#:~:text=%5C%5B,into%20the%20prompt

[09:40] *** yewscion joined
[09:44] *** yewscion left
[09:47] *** abraxxa-home joined
[10:00] *** Sgeo left
[10:33] *** abraxxa-home left
[11:08] *** sena_kun joined
[11:18] <ab5tract> Ah nice, someone has written a decent Kotlin pros/cons blog post and now I don‚Äôt have to https://tylerrussell.dev/2025/01/10/my-thoughts-on-kotlin-perspectives-after-4-years/

[11:22] *** yewscion joined
[11:25] *** yewscion left
[11:40] *** bisectable6 left
[11:51] *** bisectable6 joined
[11:57] *** yewscion joined
[11:59] *** yewscion left
[12:16] *** yewscion joined
[12:19] *** yewscion left
[12:35] *** yewscion joined
[12:40] *** yewscion left
[12:55] <tbrowder> .seen codesections

[12:55] <tellable6> tbrowder, I saw codesections 2023-11-11T17:01:26Z in #raku: <codesections> The source for design.raku.org is at https://github.com/Raku/old-design-docs, if we really need it

[13:37] *** tjr joined
[14:21] *** yewscion joined
[14:24] *** yewscion left
[14:39] *** yewscion joined
[14:41] *** yewscion left
[14:57] *** apac joined
[15:03] *** yewscion joined
[15:03] <discord-raku-bot> <antononcube> > Pretty much every function should tell you the control flow result and the data result. That is why some people rave about monads.

[15:05] *** yewscion left
[15:13] <timo> right, "effect systems" where you can only cause some kind of effect (mutating some "global" state, causing output or generally interacting with a socket or file descriptor or whatever) if your caller passes in (or is annotated to be allowed to cause) the effect in question

[15:28] *** dakkar joined
[15:31] *** kylese left
[15:35] *** kylese joined
[15:46] *** kylese left
[15:51] *** kylese joined
[15:54] *** apac left
[16:00] *** ulipink left
[16:01] *** abraxxa-home joined
[16:04] *** yewscion joined
[16:06] *** yewscion left
[16:06] *** apac joined
[16:14] *** ulipink joined
[16:19] *** ulipink left
[16:35] <[Coke]> (repl line length) - i don't think we are doing any word wrapping calculations.

[16:47] *** yewscion joined
[16:49] *** ulipink joined
[16:50] *** yewscion left
[17:04] *** apac left
[17:08] *** ulipink left
[17:16] <discord-raku-bot> <nahita3882> somewhat unrelated but an extra newline after the output makes it feel less dense, e.g., IPython does this

[17:23] *** ulipink joined
[17:23] *** ulipink left
[17:23] *** ulipink joined
[17:27] *** ulipink left
[17:58] *** ulipink joined
[17:58] *** ulipink left
[17:58] *** ulipink joined
[18:03] *** Aedil left
[18:05] *** ulipink left
[18:15] <[Coke]> With RAKUDO_REPL_PROMPT you could customize this.

[18:15] <[Coke]> ... except I don't support \n yet, do i.

[18:16] *** abraxxa-home left
[18:16] <Geth> ¬¶ problem-solving/coke/repl: 35bb2b9555 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[18:16] <Geth> ¬¶ problem-solving/coke/repl: Update Configurable-REPL.md

[18:16] <Geth> ¬¶ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/35bb2b9555

[18:18] <[Coke]> (Done, added to POC)

[18:18] <Geth> ¬¶ problem-solving/coke/repl: 5af9ba5275 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[18:18] <Geth> ¬¶ problem-solving/coke/repl: Update Configurable-REPL.md

[18:18] <Geth> ¬¶ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/5af9ba5275

[18:20] <[Coke]> ^^ Anyone have any input on naming of env vars, suggested implementation, missing strftime items, if any of the future dev notes are required for this to get merged, etc. Comments welcome

[18:21] <[Coke]> I think changing /l to to /s was suggested by ugexe?

[18:32] <ugexe> i dont think that was me unless you were referring to me mentioning it would have been nice if we had referred to language version as std (standard) like e.g. C++ does. then the distinction might be more obvious 

[18:34] *** ulipink joined
[18:39] *** ulipink left
[18:40] <[Coke]> ah, thought it was trying to justify the /s with "our language is *like* the c++ standard..>"

[18:40] <[Coke]> OK. no change is easiest change. :)

[18:44] <coleman> Doesn't it cost like $500 to get a copy of the *real* C++ standard :)?

[18:57] *** dmvrtx_ left
[18:57] *** japhb joined
[18:57] <ab5tract> Hey now, it *is* a lot of pages ;)

[18:57] <ab5tract> Looks like it's around $240 for 2104 pages

[18:59] *** dmvrtx joined
[18:59] <Geth> ¬¶ problem-solving/coke/repl: 8ee014bdd3 | (Will Coleda)++ (committed using GitHub Web editor) | solutions/rakudo/Configurable-REPL.md

[18:59] <Geth> ¬¶ problem-solving/coke/repl: Update Configurable-REPL.md

[18:59] <Geth> ¬¶ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/8ee014bdd3

[19:00] <coleman> I suppose that's indeed a lot of pages

[19:01] <ab5tract> Doesn't exactly explain why they don't offer a PDF version for free, of course

[19:03] <[Coke]> I think if we were in that position, we'd want a nominal fee to support the foundation.

[19:07] <[Coke]> any thoughts on renaming \i to \! ?

[19:07] <[Coke]> (or \# , depending on what to be consistent with)

[19:08] <[Coke]> also for colors, if we supported them - \c{bold;red}\i\c{reset} ?

[19:09] <[Coke]> I would not be opposed to doing a minimal set of colors here and if we ever supported the full DB (or supported elsewhere in core), we could swap it out for that.

[19:10] <lizmat> "full DB" ?

[19:12] <[Coke]> cursor movement/manipulation, clearing portions of the screen, all the colors...

[19:13] <[Coke]> I'm thinking I could have a small bit here for "bright/dim/reset/italic/underline/blink/inverse/hidden/strikethrough" (or some subset) and black/red/green/blue/yellow/magenta/cyan/white

[19:14] <ab5tract> [Coke]: AFAIK that's the entire ANSI color set.

[19:15] <ab5tract> Unless there's one final one that allows you to provide a color value in hex

[19:17] <ab5tract> FWIW, I still more or less completely support putting everything that is available in Terminal::ANSIParser into core 

[19:17] <ab5tract> but even just the presentation side of things would be a good start

[19:21] <ab5tract> Also: thank you for pushing forward on this!

[19:26] *** Sgeo joined
[19:31] <tbrowder> m: my $f="afile.ps"; say $f.IO.basename.extension

[19:31] <camelia> rakudo-moar a66b2e161: OUTPUT: ¬´No such method 'extension' for string 'afile.ps'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:32] <ugexe> basename returns a string, but IO::Path has the extension method

[19:33] <ugexe> m: my $f="afile.ps"; say $f.IO.extension

[19:33] <camelia> rakudo-moar a66b2e161: OUTPUT: ¬´ps‚ê§¬ª

[19:34] <tbrowder> ah, thanks? hard to remember for me. it seems like i have seen .basename on a path, but maybe the path j

[19:35] <tbrowder> *had been stringified

[19:36] <tbrowder> m: my $f = "a.ps"; say $f.basename.IO.extension

[19:36] <camelia> rakudo-moar a66b2e161: OUTPUT: ¬´No such method 'basename' for string 'a.ps'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:38] <tbrowder> m: my $f="a.ps"; say $.IO.basename.IO.extension

[19:38] <camelia> rakudo-moar a66b2e161: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable $.IO used where no 'self' is available‚ê§at <tmp>:1‚ê§------> my $f="a.ps"; say $.IO<HERE>.basename.IO.extension‚ê§    expecting any of:‚ê§        argument list‚ê§        term‚ê§¬ª

[19:38] <tbrowder> arg, ff

[19:39] <timo> doesn't .extension already give you the extension of the file, no need to do basename first?

[19:39] <tbrowder> m: my $f="a.ps"; say $f.IO.basename.IO.extension

[19:39] <camelia> rakudo-moar a66b2e161: OUTPUT: ¬´ps‚ê§¬ª

[19:40] <tbrowder> wel, i'm writing tests for my module that does file conversions, so i need that ability

[19:41] <timo> OK

[19:44] *** ulipink joined
[19:44] *** ulipink left
[19:44] *** ulipink joined
[19:45] <tbrowder> speaking of raku, lizmat showed me how to get the file "stem" but i can't find my note. i think it's with one of the experimental things like use RakuAST or the like. can RakuAST be used with camelia?

[19:45] <lizmat> m: use v6.e.PREVIEW; say "foo.bar".IO.stem

[19:45] <tbrowder> m; use RakuAST; say "hi"

[19:45] <camelia> rakudo-moar a66b2e161: OUTPUT: ¬´foo‚ê§¬ª

[19:46] <lizmat> it's 6.e functionality

[19:46] <tbrowder> üëç

[19:46] <tbrowder> yeah, thanks!

[19:52] *** ulipink left
[19:53] <discord-raku-bot> <scullucs> Oooh! "Stem". I love it! I've been wondering what to call that part for years.

[19:56] <timo> hmm, what would a method called "sprout" do. add a new directory?

[19:57] <timo> there's a name for a piece of new growth on a tree or plant that i can't remember right now

[20:06] *** ulipink joined
[20:06] *** ulipink left
[20:06] *** ulipink joined
[20:10] *** ulipink left
[20:17] <timo> .sap.slurp to get the file contents :D

[20:37] *** dakkar left
[20:56] *** ulipink joined
[21:01] *** ulipink left
[21:48] *** ulipink joined
[21:52] *** ulipink left
[22:48] <[Coke]> how to specify background colors: \c{red} would be foreground. \c{bg:red} ?

[22:48] <[Coke]> (in a REPL prompt)

[22:52] <[Coke]> (would we want to force fg: on foreground colors?)

[22:56] <[Coke]> I have RAKUDO_REPL_PROMPT='[\c{red;bold;bg:green;italic}\i\c{reset}] > ' working

[23:14] <Geth> ¬¶ problem-solving/coke/repl: 4f1a3d7484 | (Will Coleda)++ | solutions/rakudo/Configurable-REPL.md

[23:14] <Geth> ¬¶ problem-solving/coke/repl: Add \c support

[23:14] <Geth> ¬¶ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/4f1a3d7484

[23:15] <[Coke]> again, feedback welcome, thanks!

[23:36] <Geth> ¬¶ problem-solving/coke/repl: 4f0c48c53d | (Will Coleda)++ | solutions/rakudo/Configurable-REPL.md

[23:36] <Geth> ¬¶ problem-solving/coke/repl: Add Solution for Configurable REPL

[23:36] <Geth> ¬¶ problem-solving/coke/repl: 

[23:36] <Geth> ¬¶ problem-solving/coke/repl: Fixes #459

[23:36] <Geth> ¬¶ problem-solving/coke/repl: review: https://github.com/Raku/problem-solving/commit/4f0c48c53d

[23:38] *** sena_kun left
[23:51] *** Manifest0 left
