[00:24] <tbrowder> good idea, thnx!

[00:25] *** jpn joined
[00:31] *** jpn left
[00:53] *** jpn joined
[00:57] *** jpn left
[01:07] *** wayland76 left
[01:07] *** wayland76 joined
[01:10] *** derpydoo joined
[01:18] *** hulk joined
[01:19] *** kylese left
[01:23] *** jpn joined
[01:28] *** jpn left
[01:32] *** guifa left
[01:34] *** guifa joined
[02:15] *** hulk left
[02:15] *** kylese joined
[02:17] *** jpn joined
[02:21] *** guifa left
[02:21] *** jpn left
[02:37] *** guifa joined
[02:41] *** wayland76 left
[02:41] *** wayland76 joined
[02:58] <guifa> hmmmm

[02:59] <guifa> m: class Foo { has $*bar } 

[02:59] <camelia> rakudo-moar bff242f6c: ( no output )

[03:00] <guifa> m: sub bar { say $*x }; class Foo { has $*x = 5; method hmm { bar } }; Foo.new.hmm

[03:00] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´Dynamic variable $*x not found‚ê§  in sub bar at <tmp> line 1‚ê§  in method hmm at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:44] *** wayland76 left
[03:44] *** wayland76 joined
[03:45] *** wayland76 left
[03:45] *** wayland76 joined
[03:45] *** wayland76 left
[03:45] *** wayland joined
[03:46] *** wayland left
[03:47] *** wayland joined
[03:49] *** wayland left
[03:49] *** wayland joined
[03:52] *** wayland left
[03:53] *** wayland joined
[03:57] *** wayland left
[03:57] *** wayland joined
[04:05] *** jpn joined
[04:08] *** guifa left
[04:08] *** wayland left
[04:08] *** wayland joined
[04:10] *** jpn left
[04:17] *** wayland left
[04:17] *** wayland joined
[04:24] *** wayland left
[04:24] *** wayland joined
[04:27] *** wayland left
[04:27] *** wayland76 joined
[04:30] *** kylese left
[04:33] *** kylese joined
[04:35] *** wayland76 left
[04:35] *** wayland76 joined
[04:47] <wayland76> Hi all!  I'm making actions for a Slang, and I've copy-pasted the method infixish into my Slang, but when I try to run the code, it says "Undeclared name: Nodify".  

[04:48] <wayland76> The Nodify sub is at https://github.com/rakudo/rakudo/blob/bff242f6c9a0846c3382a2d3f1dee04a47a3ea9a/src/Raku/Actions.nqp#L31  and the infixish method is at https://github.com/rakudo/rakudo/blob/bff242f6c9a0846c3382a2d3f1dee04a47a3ea9a/src/Raku/Actions.nqp#L1783

[04:49] <wayland76> Is this happening because Nodify is a sub, not a method?  

[04:51] <wayland76> I think I solved it.  I created a sub Nodify that just called Raku::Actions.Nodify(@todo);

[04:51] *** wayland76 left
[04:52] *** wayland76 joined
[05:01] *** jpn joined
[05:02] <wayland76> In my Slang, I added: method TOP(*@_, *%_) { say "Starting Slang"; parent::TOP(@_, %_); }

[05:03] <wayland76> Should that print out "Starting Slang" when it starts using the slang?  

[05:05] *** wayland76 left
[05:05] *** wayland76 joined
[05:06] *** jpn left
[05:14] *** Aedil joined
[05:18] <wayland76> I think I found the problem; don't put the following in your slang: unit module Slang::BlockOperators;

[05:26] <wayland76> OK, new error: method Perl6::Grammar+{Slang::BlockOperators::Grammar}.new-cursor not found

[05:27] <wayland76> I copy-pasted https://github.com/rakudo/rakudo/blob/bff242f6c9a0846c3382a2d3f1dee04a47a3ea9a/src/Raku/Grammar.nqp#L1944 and it can't find the method (the actual method is at https://github.com/rakudo/rakudo/blob/bff242f6c9a0846c3382a2d3f1dee04a47a3ea9a/src/Raku/Grammar.nqp#L94 ).  

[05:28] <wayland76> I'm not inheriting directly from the existing grammars, but using Slangify instead.  Do I need to be inheriting from the grammars for this kind of thing to work?  

[05:30] *** kylese left
[05:30] <wayland76> Nope, even when I inherit from RakuAST::Grammar, I still get the same error.  

[05:31] *** kylese joined
[06:07] *** wayland76 left
[06:08] *** wayland76 joined
[06:11] *** wayland76 left
[06:11] *** wayland76 joined
[06:13] *** wayland76 left
[06:14] *** wayland76 joined
[06:17] *** jpn joined
[06:22] *** jpn left
[06:34] *** stanrifkin joined
[06:59] <discord-raku-bot> <librasteve> guifa: in your request for flatten(:levels), I think this was requested added in June 2024 via this PR https://github.com/rakudo/rakudo/pull/5594

[06:59] <tellable6> librasteve, I'll pass your message to guifa

[07:01] *** jpn joined
[07:06] *** jpn left
[07:13] <wayland76> OK, so the new-cursor method is in the Raku::Common role, but if I say "does Raku::Common", it says "Invalid typename Raku::Common"

[07:19] *** Sgeo left
[07:23] <wayland76> So I guess my question is, "Does anyone know how I can add 'does Raku::Common' to my grammar without that error?  

[07:25] <discord-raku-bot> <librasteve> wayland76: sorry I don‚Äôt know slang stuff

[07:26] <wayland76> librasteve: No worries :) .  That's why I'm also writing the Slang doco :p 

[07:26] <wayland76> (because I don't know it either)

[07:26] <discord-raku-bot> <librasteve> üëç

[07:36] <wayland76> Also, I have a lurking suspicion that what I'm trying to do is particularly difficult, because I'm having to override EXPR, because, well, the comment above the EXPR rule (in the Rakudo source) says: The EXPR method implements an operator precedence parsing algorithm.  One needs a stack for that and there's not a neat way to express it within the rule language.

[07:36] <wayland76> So that method is over 150 lines of code.  

[07:37] <wayland76> I have a lurking feeling that the solution is going to be something like being able to reach into a namespace and pull out the role I want to inherit from, but I don't know how.  

[07:41] <wayland76> If it the solution ends up using $LANG.slang_grammar('MAIN') and maybe a .^WHAT I won't be surprised.  

[07:53] <lizmat> fwiw, EXPR is a beast  :-)

[07:58] *** yewscion joined
[07:58] *** yewscion_ left
[08:02] *** jpn joined
[08:59] *** wayland76 left
[08:59] *** wayland76 joined
[08:59] <wayland76> m: say $*LANG.^roles_to_compose($*LANG);

[08:59] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´Too many positionals passed; expected 1 or 2 arguments but got 3‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:00] <wayland76> It segfaulted on mine.  

[09:00] <wayland76> m: say $*LANG.^roles_to_compose();

[09:00] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´()‚ê§¬ª

[09:00] <lizmat> m: say $*LANG.HOW.roles_to_compose($*LANG);   # did you mean this?

[09:00] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´()‚ê§¬ª

[09:07] <wayland76> Good question.  

[09:08] <discord-raku-bot> <librasteve> lizmat: I am wondering if the flat(:levels) PR (link above) made it to production - why?

[09:09] <discord-raku-bot> <librasteve> m: say ($((1,2),(3,4)),(5,6)).flat;

[09:09] <evalable6> librasteve, rakudo-moar bff242f6c: OUTPUT: ¬´(((1 2) (3 4)) 5 6)‚ê§¬ª

[09:09] <discord-raku-bot> <Raku eval>  (((1 2) (3 4)) 5 6) 

[09:10] <wayland76> If I run that code directly, I get no output, but if I include it in my script, I get say $*LANG.HOW.roles_to_compose($*LANG);

[09:10] <discord-raku-bot> <librasteve> m: say ($((1,2),(3,4)),(5,6)).flat(:hammer);

[09:10] <discord-raku-bot> <Raku eval>  (((1 2) (3 4)) 5 6) 

[09:10] <evalable6> librasteve, rakudo-moar bff242f6c: OUTPUT: ¬´(1 2 3 4 5 6)‚ê§¬ª

[09:10] <wayland76> Anyway, if I could figure out how to add "does Raku::Common" to my class, I wouldn't be playing around with this :) 

[09:10] <discord-raku-bot> <librasteve> hmmm I gets (1 2 3 4 5 6) result of the hammer version on my local machine

[09:11] <discord-raku-bot> <librasteve> but I am struggling to get levels to do my bidding - seems like flat(:levels(1)) just ignores the named arg

[09:12] *** Aedil left
[09:12] <discord-raku-bot> <librasteve> oh, and hammer / levels do not seem to have made it to the doc ... I am happy to take a stab at a doc PR, but obviously would need examples to work first!

[09:14] *** lichtkind joined
[09:16] *** lizmat left
[09:16] *** lizmat_ joined
[09:17] *** lizmat_ left
[09:17] *** lizmat joined
[09:41] *** jpn left
[09:45] *** jpn joined
[09:56] <grondilu> japhb: Kitty graphics protocol

[10:02] <discord-raku-bot> <_elcaro_> Besides levels, which I'm only hearing about now... You can also control level with zen slice syntax perl [0] > my @a = [1, [2]], [[[3, [4]]], [[5, [6, 7]]]] [[1 [2]] [[3 [4]] [5 [6 7]]]] [1] > @a[*;*] (1 [2] [3 [4]] [5 [6 7]]) [2] > @a[*;*;*] (1 2 3 [4] 5 [6 7]) [3] > @a[*;*;*;*] (1 2 3 4 5 6 7) 

[10:15] *** stanrifkin left
[10:20] <grondilu> m: class Foo { method WHICH { "FOO!" } }; class { method AT-KEY($x) { $x.lc with $x } }.new{Foo};'

[10:20] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> T-KEY($x) { $x.lc with $x } }.new{Foo};'<HERE><EOL>‚ê§    expecting any of:‚ê§‚Ä¶¬ª

[10:20] <grondilu> m: class Foo { method WHICH { "FOO!" } }; class { method AT-KEY($x) { $x.lc with $x } }.new{Foo};

[10:20] <camelia> rakudo-moar bff242f6c: ( no output )

[10:20] <grondilu> I kind of expected foo!

[10:21] <grondilu> as I thought maybe AT-KEY would invoke WHICH

[10:22] <grondilu> though I suppose if it's named "AT-KEY" then it expects to get a key as paremeter, so WHICH is assumed to have already been invoked perhaps

[10:28] <wayland76> After doing some more looking around, is there a way I can inherit from Raku::Grammar?  

[10:29] <lizmat> wayland76: is Raku::Grammar ?

[10:29] <lizmat> ah, meh

[10:29] <wayland76> lizmat: 'Slang::BlockOperators::Grammar' cannot inherit from 'Raku::Grammar' because it is unknown.

[10:30] <lizmat> yeah...  :-(

[10:30] <wayland76> I do have use experimental :rakuast

[10:30] <lizmat> that just exposes the RakuAST:: classes

[10:30] <wayland76> Is there some other "use" I can add, or do something to cross a namespace or something?  

[10:31] <wayland76> (regarding RakuAST:: classes) Right.  That makes sense

[10:33] <lizmat> use nqp; my constant G = nqp::gethllsym('Raku', 'Grammar');

[10:33] <lizmat> grammar A is G { }

[10:33] <lizmat> that is a temp workaround

[10:34] <wayland76> Haha, well, I'd never have come up with that :)

[10:34] <wayland76> I'll try it.  Thanks!  

[10:37] <lizmat> wayland76: actually

[10:37] <lizmat> my constant G = $*LANG.grammar.WHAT;

[10:37] <lizmat> could be more portable  :-)

[10:37] <wayland76> OK, sounds good, and I was kind of close earlier then :) 

[10:41] <wayland76> m: my constant G = $*LANG.grammar.WHAT; grammar A is G { }

[10:41] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´===SORRY!===‚ê§Cannot find method 'method_order' on object of type NQPClassHOW‚ê§¬ª

[10:41] <wayland76> m: use nqp; my constant G = nqp::gethllsym('Raku', 'Grammar'); grammar A is G { }

[10:41] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´===SORRY!===‚ê§Cannot find method 'method_order' on object of type NQPClassHOW‚ê§¬ª

[10:43] <wayland76> They look great, but neither of them actually works, unfortunately.  

[10:49] <wayland76> If I declare it as "my role" instead of "grammar", it works better, but still self.new-cursor() doesn't work.  

[10:53] <wayland76> I tried using the gethllsym one on Raku::Common as well, with the same result.  

[10:53] <lizmat> wayland76: I was wondering, why do you want to inherit from Raku::Grammar?

[10:54] <wayland76> Well, I'm trying to make a modified version of EXPR, and it's doing things like calling new-cursor.  

[10:54] <wayland76> That is, self.new-cursor (which is defined in Raku::Common)

[10:54] <lizmat> why not use Slangify then?

[10:55] <wayland76> Oh, I'm using Slangify as well.  

[10:56] <wayland76> I have a lurking suspicion that, with Slangify, I can call anything that's part of the raku grammar, but not things in Raku::Common like .new-cursor

[10:56] <wayland76> If that's a bug in Slangify, I'm happy to put in a PR for a test on the Slangify module.  

[11:00] <lizmat> but... Raku::Common is done by Raku::Grammar

[11:00] <lizmat> grammar Raku::Grammar is HLL::Grammar does Raku::Common

[11:00] <lizmat> so all its functionality should already be inside Raku::Grammar ?

[11:04] <wayland76> Yeah, one would think so, but that doesn't explain why I can't call .new-cursor.  My current theory is that when the Slang grammar gets mixed in, maybe calls to the roles that are done aren't happening for some reason.  

[11:09] <discord-raku-bot> <antononcube> @librasteve The option hammer was proclaimed in one of lizmat‚Äôs posts.

[11:09] <discord-raku-bot> <antononcube> (Probably an advent one.)

[11:10] <discord-raku-bot> <antononcube> Agh, to clarify -- the named argument ‚Äúhammer‚Äù of „ÅàÔΩÄÔººflat.

[11:10] <lizmat> https://raku-advent.blog/2024/12/25/day-25-raku-2024-review/

[11:13] *** brone joined
[11:14] *** LainIwakura joined
[11:20] *** LainIwakura left
[11:20] *** brone left
[11:23] *** bro34 joined
[11:23] *** bro34 left
[11:25] <wayland76> Hi lizmat.  I've made you a test for Slangify that fails with the same error I'm getting.  https://github.com/lizmat/Slangify/pull/1

[11:28] <discord-raku-bot> <librasteve> the mystery deepens - seems that https://github.com/rakudo/rakudo/pull/5594 (with both hammer and levels) was merged to main Jun 2, 2024, yet levels does not seem to have survived - or maybe I misunderstand what levels does

[11:30] <lizmat> I guess the test needs an BEGIN %*ENV<RAKUDO_RAKUAST> = 1   in it?

[11:30] <lizmat> CI says: Method Perl6::Grammar+{Piersing}+{RakuCommonTest}.new-cursor not found

[11:31] *** broner joined
[11:33] <discord-raku-bot> <librasteve> (((1,2),(3,4)),(5,6)).flat(:levels(1)) expected ((1,2),(3,4),(5,6)) [or is that :levels(0)?] got (1 2 3 4 5 6)

[11:33] <wayland76> Same error if I add that after the "plan 1", and before the lives-ok.  

[11:34] <wayland76> (but yes, that's the error I get)

[11:34] *** jpn left
[11:38] <lizmat> wayland76: with Perl6::Grammar in the error message, not Raku::Grammar ?

[11:40] <wayland76> Yes, exactly that.  

[11:40] <wayland76> Does that mean that it's using the old grammar?  

[11:41] <lizmat> yes

[11:41] *** LainIwakura joined
[11:43] *** derpydoo left
[11:50] <wayland76> Hmm.  So I've changed the PR to be https://github.com/lizmat/Slangify/pull/1/files -- it's likely my mistake somewhere, but I was wondering, is there anything else I need to do to force it to use the new grammar?  

[11:55] *** broner62 joined
[11:55] *** LainIwakura71 joined
[11:55] *** LainIwakura left
[11:55] *** broner left
[11:56] *** LainIwakura54 joined
[11:58] *** LainIwakura54 left
[12:00] *** LainIwakura71 left
[12:00] *** broner62 left
[12:10] *** jpn joined
[12:15] *** jpn left
[12:18] *** guifa joined
[12:26] *** wayland76 left
[12:26] *** wayland76 joined
[12:27] *** wayland76 left
[12:27] *** wayland joined
[12:28] *** wayland left
[12:28] *** wayland joined
[12:37] * guifa is starting to dislike working with Sets lol

[12:37] <tellable6> 2025-04-18T06:59:21Z #raku <librasteve> guifa: in your request for flatten(:levels), I think this was requested added in June 2024 via this PR https://github.com/rakudo/rakudo/pull/5594

[12:38] <guifa> it gets old having to always right %set.keys.map or for %set.keys 

[12:39] <guifa> I know it's because the others bags/mixes will have values other than pure truthiness attached but still it's an extra step

[12:40] <lizmat> at one time I did make the iterator just produce the keys, but that was deemed too magic and a WAT

[12:40] <guifa> yeah -- I get it, it's sort of two different conflicting expectations

[12:41] <guifa> but frustating when you're in a fully Set-based codebase ha

[12:44] *** wayland left
[12:44] *** wayland76 joined
[12:46] <lizmat> guifa: you are aware of the .set / .unset methods on SetHashes ?

[12:47] <guifa> yeah

[12:47] <guifa> it's mainly for iteration that it's annoying, especially cause I have a few places in the current code I'm doing where I have a 

[12:48] <guifa> if %set == 1 { push %set.keys.head }

[12:48] <guifa> and that keys.head is just.... le sigh

[12:55] <lizmat> m: dd Set.new(1).head.key

[12:55] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´1‚ê§¬ª

[12:58] <guifa> golfing one char lol

[12:58] <guifa> but it's a tiny win I guess :-)

[12:59] <lizmat> well, it doesn't look like .head() is optimized for QuantHashes

[12:59] <lizmat> m: dd Set.new(1).iterator.pull-one

[12:59] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´1 => Bool::True‚ê§¬ª

[12:59] <lizmat> m: dd Set.new(1).iterator.pull-one.key

[12:59] <camelia> rakudo-moar bff242f6c: OUTPUT: ¬´1‚ê§¬ª

[12:59] <lizmat> it should be basically that

[13:08] *** guifa left
[13:30] *** jpn joined
[13:35] *** jpn left
[14:01] *** jpn joined
[14:09] *** Sgeo joined
[14:15] *** apac joined
[14:23] *** Aedil joined
[14:28] *** wayland76 left
[14:28] *** wayland joined
[14:29] *** wayland left
[14:29] *** wayland joined
[14:30] *** wayland left
[14:30] *** wayland joined
[14:32] *** wayland left
[14:32] *** wayland joined
[14:36] *** wayland left
[14:37] *** wayland joined
[14:40] *** wayland left
[14:41] *** wayland76 joined
[14:48] *** abraxxa-home joined
[14:54] *** wayland76 left
[14:54] *** wayland76 joined
[14:54] *** jpn left
[14:54] *** wayland76 left
[14:55] *** wayland76 joined
[15:00] *** wayland76 left
[15:00] *** wayland76 joined
[15:09] *** wayland76 left
[15:09] *** wayland76 joined
[15:09] *** wayland76 left
[15:10] *** wayland76 joined
[15:15] *** wayland76 left
[15:16] *** wayland76 joined
[15:24] *** wayland76 left
[15:25] *** wayland76 joined
[15:31] *** apac left
[15:31] *** wayland76 left
[15:32] *** wayland76 joined
[15:43] *** wayland76 left
[15:43] *** wayland76 joined
[15:52] *** wayland76 left
[15:52] *** wayland76 joined
[15:59] *** wayland76 left
[16:00] *** wayland76 joined
[16:03] *** wayland76 left
[16:03] *** wayland76 joined
[16:14] *** wayland76 left
[16:14] *** wayland76 joined
[16:22] *** abraxxa-home left
[16:22] *** wayland76 left
[16:22] *** wayland76 joined
[16:28] *** jpn joined
[16:32] *** jpn left
[16:34] *** wayland76 left
[16:35] *** wayland76 joined
[16:56] *** wayland76 left
[16:56] *** wayland76 joined
[16:57] *** jpn joined
[16:59] *** apac joined
[17:03] *** jpn left
[17:11] *** wayland76 left
[17:11] *** wayland76 joined
[17:11] *** wayland76 left
[17:11] *** wayland joined
[17:23] *** jpn joined
[17:51] *** apac left
[19:01] <SmokeMachine> weekly: https://dev.to/fco/introducing-mcp-a-protocol-for-modular-ai-assistants-and-rakus-potential-19gp

[19:01] <notable6> SmokeMachine, Noted! (weekly)

[19:02] <SmokeMachine> if anyone could gimme opinions about this (https://dev.to/fco/introducing-mcp-a-protocol-for-modular-ai-assistants-and-rakus-potential-19gp), I would be very thankful...

[19:08] <SmokeMachine> This is just an idea I‚Äôm implementing‚Ä¶ I‚Äôm only at the beginning‚Ä¶ but I think that can be interesting and can bring some interest to Raku‚Ä¶ MCP seems to be in the hype and seems to be very useful‚Ä¶ would anyone like to help on that?

[19:15] *** apac joined
[19:40] *** jpn left
[19:42] *** jpn joined
[19:47] *** jpn left
[19:59] *** Aedil left
[20:04] <SmokeMachine> Anyone?

[20:14] *** jpn joined
[20:20] *** jpn left
[20:46] *** jpn joined
[21:11] <discord-raku-bot> <antononcube> ü§î

[21:20] <SmokeMachine> antononcube: don‚Äôt you like it?

[21:29] *** apac left
[21:32] <wayland> lizmat: I figured it out; I had to set the environment variable RAKUDO_RAKUAST externally or it just wouldn't work at all; putting it in BEGIN didn't seem to be enough.  

[21:37] <lizmat> ah, duh  :-)

[21:38] <lizmat> yeah, the grammar is already selected then  :-(

[21:38] <lizmat> my cold appears to have taken quite a few IQ points from me  :-(

[21:39] <wayland> That's no good (that you have a cold).  I get that with colds too; I lose sight of the bigger picture.  

[21:41] <lizmat> yeah, it sucks: I thought yesterday was the worst, but in the end today was  :-(

[21:42] <lizmat> thought I was recovered enough to go out and cycle 20km    :-(

[21:54] *** apac joined
[21:55] *** lichtkind left
[21:55] <wayland> Ouch, yeah, that can do it.  

[21:56] *** guifa joined
[21:56] <wayland> Anyone know what's going on with the :dba() things in the grammar?  I'm getting: Unrecognized regex modifier :dba

[22:01] <lizmat> it's supposed to be meta info, dba == doing business as

[22:08] <lizmat> afk&

[22:18] *** jpn left
[22:26] <wayland> Right (thanks).  Is there something else I need to include/use that would fix that error?  

[22:34] *** jpn joined
[22:37] *** apac left
[22:40] *** jpn left
[23:27] *** derpydoo joined
[23:49] *** stanrifkin joined
[23:52] *** jpn joined
[23:56] *** jpn left
