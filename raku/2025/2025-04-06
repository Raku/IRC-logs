[01:28] *** hulk joined
[01:29] <lucs> Uh, which routines or operators should I be looking at to transform:

[01:29] <lucs> <a b c d e f ...> into <a-b c-d e-f ...>

[01:30] *** kylese left
[01:44] <ugexe> m: say <a b c d e f g>.rotor(2, :partial).tree(*.join(" "), *.join("-"))

[01:44] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «a-b c-d e-f g␤»

[01:45] <lucs> Oh wow, perfect.

[01:45] <lucs> Thanks!

[01:51] <ugexe> m: say <a b c d e f g>.rotor(2, :partial).tree(*.item, *.join("-"))

[01:51] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «(a-b c-d e-f g)␤»

[01:53] <ugexe> m: say <a b c d e f g>.rotor(2, :partial).tree(2).map(*.join("-"))

[01:53] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «(a-b c-d e-f g)␤»

[01:53] <ugexe> that is probably the better way

[01:54] <ugexe> er the tree isn't needed at all i suppose

[01:55] <ugexe> m: say <a b c d e f g>.rotor(2, :partial).map(*.join("-"))

[01:55] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «(a-b c-d e-f g)␤»

[01:57] <lucs> Yeah, guess not. Thanks for exploring for me :)

[02:03] *** wayland76 left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:18] *** maylay left
[02:31] *** Xliff_ left
[02:32] *** xinming joined
[02:38] *** maylay joined
[03:41] *** kst left
[03:41] *** stanrifkin_ joined
[03:44] *** stanrifkin left
[04:15] *** guifa left
[04:30] *** kylese left
[04:34] *** kylese joined
[04:48] *** xinming left
[04:49] *** Guest96 joined
[04:50] *** guifa joined
[04:52] *** Guest96 left
[05:30] *** kylese left
[05:31] *** kylese joined
[05:44] *** Aedil joined
[06:35] *** Aedil left
[06:39] *** Aedil joined
[07:04] *** derpydoo joined
[07:27] *** Aedil left
[08:01] *** sena_kun joined
[08:09] <grondilu> m: say (:foo) ~~ :(:$foo!)

[08:09] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «False␤»

[08:10] <grondilu> m: say (:foo) ~~ :(:$foo)

[08:10] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «False␤»

[08:11] <grondilu> oh, I need a list, right?

[08:11] <grondilu> m: say (:foo,) ~~ :(:$foo!)

[08:11] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «True␤»

[08:12] <grondilu> m: say (:foo,) ~~ :(:$foo)

[08:12] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «True␤»

[08:12] <grondilu> is there a nice way to specify :$foo where !* ?

[08:12] <grondilu> m: say (:foo,) ~~ :(:$foo where !*)

[08:12] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «False␤»

[08:12] <grondilu> m: say (:!foo,) ~~ :(:$foo where !*)

[08:12] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «True␤»

[08:13] <grondilu> I mean I guess that works but it's not as nead as :$foo!

[08:13] <grondilu> *neat

[08:15] <grondilu> m: say (:!foo,) ~~ :(:$foo!)

[08:15] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «True␤»

[08:15] <grondilu> m: say (:!foo,) ~~ :(:$foo! where False)

[08:15] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «Potential difficulties:␤    Smartmatch against False always fails; if you mean to test the topic for truthiness, use :!so or *.not or !* instead␤    at <tmp>:1␤    ------> say (:!foo,) ~~ :(:$foo! where <HERE>False)␤False␤»

[09:25] *** lichtkind joined
[09:33] *** abraxxa-home joined
[10:58] *** abraxxa-home left
[11:21] <Voldenet> m: say @(:foo) ~~ :(:$foo!)

[11:21] <camelia> rakudo-moar 7b0f03ea7: OUTPUT: «True␤»

[11:46] *** derpydoo left
[12:23] <discord-raku-bot> <melezhik.> .

[13:08] *** dg left
[13:42] *** apac joined
[14:31] *** apac left
[14:31] *** apa_c joined
[14:35] <ugexe> m: say :($foo) ~~ :($foo!)

[14:35] <camelia> rakudo-moar 5bd76f547: OUTPUT: «True␤»

[14:35] <ugexe> actually i guess you wouldn't want to do :($foo) 

[15:01] *** Aedil joined
[15:31] *** perias joined
[15:31] <perias> hello

[15:37] *** apa_c left
[16:15] *** apa_c joined
[16:39] *** sena_kun left
[16:49] <grondilu> in the example for `whenever` in the docs, why are $bread-supplier and $vegetable-supplier not used directly as whenever arguments?  Why instead $bread-supplier.Supply and $vegetable-supplier.Supply.  They are already Supply instances, aren't they? 

[17:06] <grondilu> also in the doc example here https://docs.raku.org/language/statement-prefixes#react, the output seems to show everything happening in the same thread.  This example looks odd.

[17:07] <grondilu> ah sorry my bad, several threads do show up.

[17:34] *** stanrifkin_ left
[17:39] *** maylay left
[17:59] <discord-raku-bot> <librasteve> hello

[17:59] <discord-raku-bot> <librasteve> (perias)

[18:00] *** maylay joined
[18:01] <discord-raku-bot> <librasteve> grondilu: can you provide a link to the doc page --- really if you are happy that the .Supply is not needed - ie you ave tested the examp,e and it works without on recent raku, then why not make a PR for the docs site?

[18:03] *** perias left
[18:07] *** Aedil left
[18:10] <grondilu> https://docs.raku.org/language/concurrency#whenever

[18:15] <discord-raku-bot> <librasteve> grondilu: tx fof the link - you are right that the .Supply is not needed ... I suppose someone in the past decided that it was helpful to show explicitly the .Supply call for eductaional purposes - but whenever does no need it ... my preference would be to remove the .Supply since it is wasted typing so please do make that PR on the docs

[18:16] *** apa_c left
[18:32] *** MoC joined
[18:33] *** stanrifkin joined
[19:04] *** egeanll joined
[19:34] <discord-raku-bot> <librasteve> teases https://rakujourney.wordpress.com/2025/04/06/harc-stack-shallow-dive/

[19:34] <discord-raku-bot> <librasteve> weekly: https://rakujourney.wordpress.com/2025/04/06/harc-stack-shallow-dive/

[19:34] <notable6> librasteve, Noted! (weekly)

[19:45] *** MoC left
[21:28] *** apac joined
[21:47] *** egeanll left
[21:51] *** sena_kun joined
[22:22] *** sena_kun left
[22:34] *** stanrifkin left
