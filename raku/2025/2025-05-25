[00:03] *** yewscion joined
[00:09] *** yewscion left
[00:17] *** yewscion joined
[00:19] <[Coke]> wayland: all fair game.

[00:23] *** yewscion left
[00:49] *** yewscion joined
[00:55] *** yewscion left
[01:11] *** coleman left
[01:12] *** coleman joined
[01:13] *** coleman left
[01:14] *** coleman joined
[01:19] *** notable6 left
[01:19] *** notable6 joined
[01:21] *** yewscion joined
[01:26] *** yewscion left
[01:43] *** jetchisel left
[01:53] *** yewscion joined
[01:57] *** hulk joined
[01:57] *** kylese left
[01:58] *** yewscion left
[02:09] *** yewscion joined
[02:13] *** stanrifkin joined
[02:14] *** yewscion left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:35] *** yewscion joined
[02:40] *** yewscion left
[02:51] <disbot1> <wayland76> Coke: how's the remake by finanalyst going, and what is it focusing on?

[02:53] <disbot1> <wayland76> The one thing I did notice is that the transition documents focus heavily on Perl, and I think Perl should have it's own subsection among them.

[02:56] <disbot1> <wayland76> Also, it might be useful to have transition documentation for more of the languages in the TIOBE top 20/50 (eg. PHP).  Some it would be better to ignore for now (ie. Ignore Delphi until we have a RAD IDE), but one of the HARC guys might be able to put together a document about transitioning from, say, PHP and Laravel.

[03:20] <Voldenet> I think what raku lacks the most to fight laravel is proper dependency injection

[03:20] <Voldenet> (and a lot of web stacks)

[03:21] <Voldenet> in laravel you can say `Route::get("/stuff", function (SomeDependency $dep) { })` and it will autowire dependencies

[03:22] <Voldenet> it's not really difficult to extract these from signatures, but it's something to work on probably

[03:26] <Voldenet> other thing I don't think I've seen is built-in csrf - this is usually done by middleware which checks whether post requests have specific field with some helper generating csrf field in forms

[03:33] <Voldenet> also, interacting with popular js frameworks may be useful (laravel doesn't directly do this, but some glue library exists for such use cases)

[03:44] *** stanrifkin_ joined
[03:45] *** kylese left
[03:47] *** stanrifkin left
[03:47] *** kylese joined
[04:13] <Xliff> Voldenet: What do you mean by that? 

[04:13] <Xliff> Voldenew: get -> '/stuff'

[04:13] <Xliff> D'oh

[04:14] <Xliff> get -> 'stuff', inject => [Dep1, Dep2, Dep3] { }

[04:14] <Xliff> That could be written, no?

[04:16] <Voldenet> well, I'd say something like `get -> 'some'', 'route', :$param1, :Thing $thing { … }` with autodetecting what needs to be injected

[04:17] <Voldenet> or

[04:17] <Voldenet> `get -> 'some', 'route', :$param1, :Thing $thing is injected { … }`

[04:17] <Xliff> That would be "..., Thing :$thing"

[04:17] <Xliff> So...

[04:17] <Voldenet> uh, right

[04:17] <Xliff> That would be "..., Thing :$thing is injected"

[04:18] <Xliff> OK. That makes sense.

[04:22] <Voldenet> though I'd say that DI should fundamentally let you do `di.Bind(Thing, -> OtherThing $x { Thing.new($x) }, :lifetime(Singleton))`, `di.Bind(Thing)`, `di.Bind(ThingRole, ThingImpl)` and `di.Get(Thing)`

[04:22] <Voldenet> and then it introduces some concepts like lifetime, so it gets more and more complex

[04:23] <Xliff> Right so .Bind does ...?

[04:24] *** yewscion joined
[04:24] <Voldenet> tells the container how to create given type

[04:25] <Xliff> So basically: { require ::('Type'); ::('Type'

[04:25] <Xliff> D'oh

[04:25] <Xliff> So basically: { require ::('Type'); ::('Type').new }

[04:26] <Voldenet> sort of, but DI needs to extract the dependencies required by class automatically

[04:26] <Xliff> Right, but I would expect those as "use" statements in Thing.rakumod

[04:27] <Xliff> And you're right... that would get messy. 

[04:27] <Voldenet> + sometimes you want to say "this class uses logger"

[04:27] <Voldenet> not "this class uses FileLogger"

[04:27] <Voldenet> and in some other place, you want to say what's logger, what config it has

[04:27] <Xliff> To prevent in-request loading, would you have a problem with pre-loading the dependenies via a config file?

[04:28] <Xliff> Voldenet: I get that. Baby steps! :)

[04:29] <Voldenet> well, config file (the .raku which has all the "bind x to y") is one way to go about it

[04:31] <Voldenet> other is annotation/attribute driven "this is a sub that creates Thing" or "this is a class that implements Thing and it's a singleton"

[04:34] <Voldenet> one thing that is a service with its key, so you can say "this implements Smtp when requesting internal service", "this implements Smtp when requesting external service", and in sub you'd have `Smtp :$smtp is injected("internal")`

[04:34] *** yewscion left
[04:35] <Voldenet> this is not something that's widely implemented, but implementing them later may be a bit of pain

[04:35] <Xliff> Well, I'm writing a app server, so feature ideas are welcome.... assuming I can wrap my head around the feature and have a decent use case.

[04:37] <Voldenet> all (or most) of these things can be done without DI

[04:39] <Voldenet> but it forces you to do `my $s1 = Service.new; my $t = Thing.new(:service1($s1), :service2($s2)); get -> { $t.Blah() }`

[04:40] <Voldenet> the more features you add, the bigger the initialization would need to be… and you need to assign variables, track dependencies and instantiate everything on app start

[04:42] <Voldenet> so ultimately the goal was: as long as your application doesn't have circular dependencies, you can just define `class Thing { has Service $.s1 }` and then request `Thing` without ever calling Thing.new

[04:47] <Voldenet> ofc, the hole can be deep - DI defines decorators, also could let you say `Thing :@t is injected` that would give you all possible implementations of Thing

[04:53] *** yewscion joined
[04:55] <Voldenet> the only sure thing is that most modern web frameworks implement DI, but there's hardly any pointers on how to even name things

[04:56] *** stanrifkin_ left
[04:58] *** yewscion left
[05:00] <Voldenet> > https://github.com/FCO/Injector

[05:02] <Voldenet> this implements a lot of things - I'm not sure about the need for `is injected` on attributes and variables, but it's a start

[05:11] *** notable6 left
[05:11] *** notable6 joined
[05:13] *** nativecallable6 left
[05:15] *** greppable6 left
[05:22] *** jetchisel joined
[05:24] *** yewscion joined
[05:24] *** kjp left
[05:25] *** committable6 left
[05:26] *** kjp joined
[05:28] *** kjp left
[05:29] *** kjp joined
[05:29] *** yewscion left
[05:34] *** yewscion joined
[05:35] <SmokeMachine> Voldenet: about csrf , it I’m not mistaken, cro’s Form does that natively.

[05:36] <SmokeMachine> Voldenet: and thank you for remembering Injector… I like that old piece of code…

[05:40] *** kst`` joined
[05:43] <Voldenet> cro's Form does, but i don't know how harc deals with it

[05:44] <wayland> I'm just now learning about dependency injection.  Would an example of where we need Dependency Injection be the DBIish classes?  

[05:44] *** yewscion left
[05:46] <SmokeMachine> I’ve been planning on adding Injector support on Red…

[05:48] <Voldenet> well - in java/C# world most frameworks support DI natively

[05:48] <Voldenet> because all you need to do is register proper dependencies

[05:48] <SmokeMachine> Voldenet: and I’m also working on CEO’s Form support for Cromponents…

[05:48] <wayland> CEO?  

[05:49] <SmokeMachine> Cro’s

[05:49] <Voldenet> typo I guess

[05:51] <SmokeMachine> Red, currently, needs a $*RED-DB with a connection… what I plan is to add a &*RED-DB is injected and the user will only need to bind connection…

[05:52] <Voldenet> Yeah, dynamic variables are pain to use, especially if you'd need multiple databases

[05:52] <SmokeMachine> Só, what meant is not add injector support on Red… but make use of injector on Red…

[05:53] <Voldenet> Ah, so make any DI approach usable, I get it

[05:56] <Voldenet> Regarding dynamic variables, they're quite scary in practice, C# has something called AsyncLocal (which pretty much lets you define sort of dynamic variable)

[05:57] <Voldenet> I've used them for a bit, but then got into problems when I had to support multiple logical variables at the same time :\

[05:59] <Voldenet> specifically, it was DI's scope, which is quite related to both topics

[06:00] <Voldenet> and all the logical problems went away after I passed the scope through a regular variable

[06:02] <japhb> Everyone: I'm going back through my various Raku module repos looking for bitrot or other out-of-date stuff.

[06:03] <japhb> Currently I'm looking at Serializer-Perf (a collection of performance and fidelity tests for data serializer codecs).

[06:03] <japhb> Does anyone know of additional codecs that should be added to the list in the README at https://github.com/japhb/App-SerializerPerf  ?

[06:05] <japhb> I suppose also if anyone knows one of the serializers have been considerably improved in the last couple years and thus should be reassessed in the results overview table ...

[06:10] <Voldenet> perhaps YAML::Parser::LibYAML, it's a wrapper for libyaml

[06:10] *** yewscion joined
[06:10] <Voldenet> but I'm not sure how fair it is to use native code in serializers

[06:13] <japhb> For this purpose, all's fair -- I'm trying to give people a decent way to tell what serializer they should choose for a particular purpose, and wrapping a native lib may actually be the right thing.

[06:13] <japhb> Though it does indicate that I'll probably need to add a column for "requires a native library"

[06:13] <Voldenet> maybe there's some way to use protobuf too, I can imagine that some people using grpc at some point

[06:14] <Voldenet> s/that//

[06:14] <japhb> It's been a really long time since I touched the protobuf code ... is it working well these days?

[06:15] *** yewscion left
[06:17] <Voldenet> protobuf itself is ok, in fact I've used criu not that long ago, it uses protobuf to serialize process into files

[06:19] <japhb> Oh sorry, I meant the protobuf *Raku module*

[06:19] <Voldenet> but I'm not sure how raku module works, I see there's something not ancient

[06:20] <Voldenet> if I read Protobuf's docs correctly, it only can parse protos, not deserialize/serialize things

[06:23] <japhb> OK, so I'll look into adding YAML::Parser::LibYAML to the suite.

[06:23] <japhb> Anyone have any other serializers they'd like to see included in the tests?

[06:24] *** Aedil joined
[06:32] <Xliff> japhb!!!

[06:32] <Xliff> Did you get my email?

[06:33] <Xliff> Ah! You did! And a response! :)

[06:40] <japhb> Xliff!!!  :-D

[06:41] <wayland> [Coke]: Another idea: If we look at the most starred/forked repos on GitHub, a number of them are tutorial-style documentation for eg. Python.  https://github.com/EvanLi/Github-Ranking and https://github.com/EvanLi/Github-Ranking .  Something of the kind could be useful for the doco endeavour.  

[06:42] *** yewscion joined
[06:44] <Xliff> japhb: Terminal::QuickCharts is not available for zef?

[06:45] <japhb> Gah, probably another repo I need to un-bitrot.  On it, thanks.

[06:50] <wayland> [Coke]: One more idea: https://github.com/codecrafters-io/build-your-own-x (one of the high-ranked repos) accepts links to "How to build your own X in language Y" items.  

[06:51] *** yewscion left
[06:52] <Xliff> japhb: Does ::QuickCharts::ChartStyle support RGB-Ansi colors?

[06:53] <japhb> Xliff: Anything that Terminal::ANSIColor supports, which should be everything, yes.  :-)

[06:54] <Xliff> Cool! Looking, then.

[06:55] <japhb> Oh sorry, misread.  ::ChartStyle doesn't do colors itself, it's for everything *but* the color.  The charting routines accept the color info.

[06:55] <japhb> Sorry about that

[06:56] <japhb> So it turns out that I never actually did a zef release of this code, even though I'd set up the dist.ini for it.  Ooooops.

[06:56] <japhb> Working to fix now.

[07:03] <japhb> OK, Terminal::QuickCharts is in zef now.  Bah.

[07:04] <Xliff> :)

[07:05] <japhb> Xliff: Join #mugs if you want to discuss improving the Terminal::* suite (among other topics).

[07:09] *** arkiuat left
[07:10] <japhb> Time for sleep, will look for 'japhb' mentions here tomorrow.  Or anything in #mugs because it's much lower traffic.  :-)

[07:11] *** yewscion joined
[07:14] <Xliff> japhb: for hpad(), would you mind if I added a :$char = ' ' so that I can do something like '░'

[07:16] <disbot1> <librasteve> good morning … from the HARC guy … Air::Form is about 90% done … it is a repackaging of cro Form and includes all the features in particular CSRF …

[07:16] <Xliff> Do you mean Cro::WebApp::Form?

[07:16] *** yewscion left
[07:16] <disbot1> <librasteve> … yep

[07:17] <Xliff> Interesting. I'll take a look at it later. Github?

[07:17] <disbot1> <librasteve> https://github.com/librasteve/Air-Play/blob/main/lib/Air/Play/Site11-Form.rakumod

[07:19] <disbot1> <librasteve> it may be a bit broken right now as i realised it needs to fully interact with Red for the purest expression of CRUD … and then I realised I should embrace latest FCO Cromponent for various reasons yada yada

[07:20] <disbot1> <librasteve> anyway good time to comment / weigh in and join the fun!!

[07:21] *** arkiuat joined
[07:23] <disbot1> <librasteve> on the wider topic of web frameworks, one big idea of HARC is that it is a synthesis of raku libraries that let you write a raku program to make a website … which is an extension of jnthns motif that it is a library not a framework

[07:25] <disbot1> <librasteve> this means that there is no preset application loop - that’s the bit you write … but the tools are at your fingertips to whip up a laravel or a django - ie a CRUD application - so we can use any raku method for dependency management or injection and just combine that

[07:26] <disbot1> <librasteve> use modules is the default way to integrate additional libraries

[07:26] *** arkiuat left
[07:33] <Voldenet> re DI: php used to not care about DI in the past and the apps worked, but using roles/interfaces instead of classes directly is just neat and makes specific components easier to test

[07:34] *** yewscion joined
[07:35] <Voldenet> it's not strictly required, just very useful tool that current stack could find useful

[07:39] *** yewscion left
[07:40] *** arkiuat joined
[07:42] *** yewscion joined
[07:43] <SmokeMachine> librasteve: are you going to use the latest Cromponent? Any feature you need in particular?

[07:44] *** arkiuat left
[07:48] *** yewscion left
[08:14] *** arkiuat joined
[08:14] *** yewscion joined
[08:18] *** arkiuat left
[08:19] *** yewscion left
[08:28] <disbot1> <librasteve> SmokeMachine - yes … realised I need the EVAL route approach so in process of doing that. Will be pinging in a PR for you to review when I get it working. :-)

[08:30] *** yewscion joined
[08:32] <disbot1> <librasteve> one concern I have figured out yet is that CREATE is a reserved raku method (alternate to new that do not try to initialise attrs) and is used by Cro::WebApp::Form to avoid triggering is required trait when making an empty form for initial display … maybe you could change the CREATE method name i. Cromponent? (i’m mentioning here since this may well be an issue with pure Cromponent working with Cro::WebApp::Form also

[08:34] *** arkiuat joined
[08:37] *** yewscion left
[08:38] *** arkiuat left
[09:04] *** yewscion joined
[09:05] *** arkiuat joined
[09:09] *** yewscion left
[09:10] *** arkiuat left
[09:19] *** notable6 left
[09:19] *** notable6 joined
[09:20] *** yewscion joined
[09:27] *** yewscion left
[09:42] *** arkiuat joined
[09:42] *** Aedil left
[09:47] *** yewscion joined
[09:52] *** yewscion left
[10:02] *** arkiuat left
[10:10] <disbot1> <librasteve> Voldenet: i just saw this on HN https://rednafi.com/go/di_frameworks_bleh/ lol

[10:10] *** yewscion joined
[10:15] <Voldenet> Yes, this whole DI topic might be just me being cargo culted into this

[10:15] *** Sgeo left
[10:15] *** yewscion left
[10:21] *** yewscion joined
[10:22] <Voldenet> and to be honest, constructing 300 lines of initialization code feels like pain, also manually crafting functions for lifetimes etc.

[10:23] <Voldenet> DI just automates the process, it's not magic

[10:25] <Voldenet> and it might not need automated, if the app only needs 6 singletons

[10:25] *** yewscion left
[10:28] <Voldenet> not need to be automated*

[10:33] *** arkiuat joined
[10:33] *** yewscion joined
[10:38] *** arkiuat left
[10:39] *** yewscion left
[10:51] *** arkiuat joined
[11:05] *** yewscion joined
[11:10] *** yewscion left
[11:12] *** bisectable6 left
[11:12] *** coverable6 left
[11:12] *** notable6 left
[11:12] *** benchable6 left
[11:13] *** quotable6 left
[11:13] *** sourceable6 left
[11:15] *** bloatable6 left
[11:27] *** nativecallable6 joined
[11:28] *** quotable6 joined
[11:28] *** greppable6 joined
[11:28] *** benchable6 joined
[11:28] *** evalable6 joined
[11:29] *** sourceable6 joined
[11:29] *** releasable6 joined
[11:29] *** linkable6 joined
[11:29] *** coverable6 joined
[11:29] *** committable6 joined
[11:29] *** bloatable6 joined
[11:30] *** shareable6 joined
[11:31] *** unicodable6 joined
[11:31] *** notable6 joined
[11:31] *** tellable6 joined
[11:34] *** apac joined
[11:35] *** bisectable6 joined
[11:36] *** yewscion joined
[11:41] *** yewscion left
[11:52] *** yewscion joined
[11:54] *** arkiuat left
[11:57] *** yewscion left
[12:22] *** yewscion joined
[12:23] *** arkiuat joined
[12:26] *** yewscion left
[12:27] *** arkiuat left
[12:50] *** arkiuat joined
[12:53] *** yewscion joined
[12:57] *** Aedil joined
[12:59] *** yewscion left
[13:14] <SmokeMachine> Voldenet: did you try using Injector? Did that help? Is something there you would like to change?

[13:14] <tellable6> hey SmokeMachine, you have a message: https://gist.github.com/b84f68ad44a54027b75d647af72f102b

[13:14] <tellable6> hey SmokeMachine, you have a message: https://gist.github.com/1999745879971fe9d86b52d70ffc8516

[13:15] <SmokeMachine> Librasteve: yes, I might change the name of that method… Any name suggestions?

[13:23] *** yewscion joined
[13:30] *** yewscion left
[14:27] *** apac left
[14:50] <Xliff> App::MI6 is no longer on zef?

[14:51] <disbot1> <antononcube> Try "App::Mi6".

[15:09] *** kjp left
[15:10] *** kjp joined
[15:27] *** yewscion joined
[15:36] *** yewscion left
[16:03] *** yewscion joined
[16:07] *** yewscion left
[16:16] *** stanrifkin joined
[16:19] *** yewscion joined
[16:24] *** yewscion left
[16:26] *** yewscion joined
[16:30] <disbot1> <librasteve> SmokeMachine: I would suggest ADD ... so LOAD, ADD, UPDATE, DELETE

[16:30] <disbot1> <librasteve> let me know if you are OK with that and I will include in the PR

[16:32] <SmokeMachine> librasteve: I think ADD is ok…

[16:32] <disbot1> <librasteve> ok - thanks!

[16:33] *** yewscion left
[18:18] *** librasteve_ joined
[18:29] *** wayland76 joined
[18:29] *** wayland left
[18:56] *** merp left
[18:58] *** AlexDaniel joined
[19:00] *** yewscion joined
[19:05] *** yewscion left
[19:16] *** Sgeo joined
[19:17] <disbot1> <antononcube> .weekly : https://rakuforprediction.wordpress.com/2025/05/25/collatz-conjecture-visualizations/

[19:17] <disbot1> <antononcube> .weekly https://rakuforprediction.wordpress.com/2025/05/25/collatz-conjecture-visualizations/

[19:19] <disbot1> <antononcube> weekly: https://rakuforprediction.wordpress.com/2025/05/25/collatz-conjecture-visualizations/

[19:21] <AlexDaniel> hmmm

[19:21] <AlexDaniel> notable6: help

[19:21] <notable6> AlexDaniel, Like this: notable6: weekly rakudo is now 10x as fast # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Notable

[19:22] <AlexDaniel> why is discord bot called disbot1?

[19:22] <AlexDaniel> is it the new name?

[19:22] <AlexDaniel> https://github.com/Raku/whateverable/blob/main/lib/Whateverable/Discordable.pm6#L28

[19:29] *** yewscion joined
[19:33] *** stanrifkin left
[19:36] *** yewscion left
[20:03] *** yewscion joined
[20:08] *** yewscion left
[20:26] *** yewscion joined
[20:37] <Xliff> AlexDaniel!!

[20:37] <Xliff> 'sup?

[20:38] <AlexDaniel> sup :)

[20:38] <Xliff> Howarya?

[20:39] <AlexDaniel> pretty good. Working, dancing, hacking. I would've preferred a slightly different balance of things (specifically work), but otherwise all good :)

[20:39] <Xliff> Nice! Good to see you haven't forgotten us butterflies.

[20:40] <AlexDaniel> of course not, I check the logs periodically

[20:40] *** yewscion left
[20:40] <AlexDaniel> do you know what's up with the discord bot?

[20:40] <AlexDaniel> is it a new permanent name? Should I commit a change for that?

[20:41] <Xliff> I have no idea if the name is permanent or not.

[20:41] <Xliff> I'm not the right person to ask, unfortunately.

[20:45] <Xliff> https://irclogs.raku.org/raku/2025-05-20.html#20:31-0002

[20:46] <AlexDaniel> first it was called raku-bridge, then it was called discord-raku-bot, and now it's disbot?

[20:46] <AlexDaniel> with 1 or not, that's not that importart

[20:46] <AlexDaniel> important*

[20:47] <AlexDaniel> OK I'll commit the change

[20:47] <Xliff> Doh! I don't see disbot1 on logs.liz.nl... turns out it italicizes the name if they are from there.

[20:47] <Xliff> AlexDaniel: If you can, I would assume the new name is "disbot" with a "disbot1" fallback. Might be better to use "disbot[ \d ]?"

[20:49] <Xliff> disbot[ \d+ ]? # Maybe better...

[20:51] <AlexDaniel> doesn't matter that much, hopefully the second fallback won't be needed :)

[20:54] *** shareable6 left
[20:54] *** linkable6 left
[20:54] *** releasable6 left
[20:54] *** committable6 left
[20:54] *** nativecallable6 left
[20:54] *** bloatable6 left
[20:54] *** greppable6 left
[20:54] *** bisectable6 left
[20:54] *** benchable6 left
[20:54] *** notable6 left
[20:54] *** tellable6 left
[20:54] *** sourceable6 left
[20:54] *** unicodable6 left
[20:54] *** quotable6 left
[20:54] *** coverable6 left
[20:54] *** evalable6 left
[20:56] <AlexDaniel> wow… impressive…

[20:57] *** linkable6 joined
[20:57] *** nativecallable6 joined
[20:57] *** quotable6 joined
[20:57] *** bloatable6 joined
[20:57] *** greppable6 joined
[20:58] *** coverable6 joined
[20:58] *** notable6 joined
[20:58] *** committable6 joined
[20:58] *** tellable6 joined
[20:58] *** unicodable6 joined
[20:58] *** evalable6 joined
[20:58] *** shareable6 joined
[20:59] *** bisectable6 joined
[20:59] *** benchable6 joined
[20:59] *** releasable6 joined
[21:00] *** sourceable6 joined
[21:01] *** apac joined
[21:04] <AlexDaniel> antononcube: can you try again please? :)

[21:06] <disbot1> <antononcube> Try what?

[21:07] <AlexDaniel> the weekly: command

[21:22] *** yewscion joined
[21:23] *** AlexDaniel48 joined
[21:23] <AlexDaniel48> .seen antononcube

[21:23] <tellable6> AlexDaniel48, I saw antononcube 2025-05-25T21:06:06Z in #raku: <antononcube> Try what?

[21:24] *** AlexDaniel left
[21:28] *** yewscion left
[21:31] *** yewscion joined
[21:35] *** yewscion left
[21:38] *** yewscion joined
[21:43] *** yewscion left
[21:57] *** AlexDaniel48 left
[22:07] *** librasteve_ left
[22:10] *** yewscion joined
[22:15] *** yewscion left
[22:21] *** apac left
[22:32] *** yewscion joined
[22:32] <wayland76> [Coke]: One more for the website.  It'd be nice if the IRC logs had the date floating at the top so we didn't have to scroll to see what date we're on.  

[22:37] *** yewscion left
[22:43] <wayland76> [Coke]: One more idea for the website.  One of the strengths of PHP early on was that it had discussion taking place directly on the documentation website.  I'm not necessarily suggesting we do the same, but if we had eg. some way of collating/linking the related StackOverflow questions (or relevant discussions on other sites) that might be nice.  

[22:45] <ugexe> stackoverflow should link to the docs, not the other way around

[22:46] <wayland76> I'm thinking the go would be: Automatic web scraper feeds database, (with URLs and tags).  Human reviews tags and confirms.  Database generates both Weekly News and a list of links for the doco pages.  

[22:47] <wayland76> ugexe: How about both directions?  And I'm thinking that this mainly belongs in eg. the parts of the docs that have a list of all functions called "split", and links to each in their context.  

[22:48] *** yewscion joined
[22:49] <ugexe> stackoverflow questions can be deleted, edited, etc. instead you can take stack overflow answers and put them into the docs (if it makes sense at all) and then just update the stackoverflow answer to point to those new docs

[22:51] *** Aedil left
[22:52] *** yewscion left
[22:54] <wayland76> ugexe: 3 reasons it'd still be handy to have the list of StackOverflow questions (even if it's "Click here to see a list of links to related StackOverflow questions).  a) So that we can go "What might need to be incorporated into the docs?"  b) I think sometimes it's handy to have more example code, but doesn't make sense to put it in the docs.  And c) sometimes someone has something handy and brilliant, but isn't integrated into the community well enough 

[22:54] <wayland76> to bother putting it in the docs; they just want to post it somewhere.  We should be enabling that to a certain extent.  

[22:56] <ugexe> anyone is free to take that post and put it into the docs

[23:05] <wayland76> ugexe: Yeah, but if it's not easy, they mostly won't.  

[23:09] *** wayland76 left
[23:11] <ugexe> it is pretty easy

[23:14] <ugexe> i also may not exactly like to find my stackoverflow answers linked in the documentation as some sort of authority or giving the impression i wrote it in the context of documentation

[23:25] <Voldenet> SmokeMachine: nope, the primary problem is that it needs the whole code to use DI, which obviously skips too many abstraction layers

[23:27] <Voldenet> SmokeMachine: given `class X { has Int $.n; }; class Y { has Y $.y };`, I'd like to do `bind :to(X) :obj(X.new(n => 42)); bind Y, :singleton; get X;`

[23:30] <Voldenet> It might even be possible, I just don't know where would I start - docs only say about `is injected` use cases, so if you want to add some library class to DI, you're out of luck

[23:44] <Voldenet> overall when I tried to accomplish what I wanted, I ended up creating either explicit constructor `method new(Logger :$logger!) { self.bless(:$logger); }`

[23:44] <Voldenet> or factory method, e.g.: `$container.register(SessionStorage, -> Logger :$logger { SessionStorage.new(:$logger) });`

[23:56] <Voldenet> the biggest hurdle is that you can't simply ask for dependencies from "BUILD"/"new", so you'll end up creating attribute injection, which is considered bad in some languages

[23:56] <Voldenet> but the cause is that the dependencies are treated as optional

