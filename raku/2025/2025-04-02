[00:16] *** yewscion joined
[00:21] *** yewscion left
[00:22] *** yewscion joined
[00:27] *** yewscion left
[01:32] *** hulk joined
[01:33] *** kylese left
[02:15] *** hulk left
[02:15] *** kylese joined
[02:41] *** Aedil joined
[04:30] *** kylese left
[04:34] *** kylese joined
[05:30] *** kylese left
[05:32] *** kylese joined
[06:28] *** Some-body_ joined
[06:29] *** DarthGandalf left
[06:32] *** Some-body_ is now known as DarthGandalf

[06:32] *** yewscion joined
[06:34] *** apac left
[06:37] *** yewscion left
[06:39] *** Sgeo left
[07:03] *** yewscion joined
[07:08] *** yewscion left
[08:01] *** sena_kun joined
[08:12] *** dakkar joined
[08:20] <discord-raku-bot> <melezhik.> antononcube: I see , interesting. You can use Sparrow as a dog folding )))

[08:21] <discord-raku-bot> <melezhik.> Fooding

[08:27] *** jpn joined
[08:49] <grondilu> here is an impressive error message :

[08:49] <grondilu> MoarVM panic: Internal error: Unwound entire stack and missed handler

[08:52] <grondilu> apparently Moar didn't like it when I put a `return` inside a `react`

[08:53] <grondilu> so instead of `sub () { given someprocess { react { whenever something { return this } } } }`

[08:54] <grondilu> I had to do `sub () { given someprocess { my $result; react { whenever something { $result = this } } }; return $this; }`

[08:55] <grondilu> I'll push it so I can show you actual code

[09:01] *** sena_kun left
[09:07] <grondilu> https://github.com/grondilu/chess/blob/8d7ecf50d81b29f6ef44e2005eb3377cd4f5b427/lib/Chess.rakumod#L362

[09:07] *** Guest48 joined
[09:08] <Guest48> ?

[09:11] *** Guest48 left
[10:25] *** ecocode left
[10:25] *** ecocode joined
[11:10] *** Aedil left
[11:18] *** yewscion joined
[11:23] *** JimmyZhuo joined
[11:27] *** yewscion left
[11:42] *** jpn left
[11:44] *** jpn joined
[11:49] *** jpn left
[12:10] <Xliff_> grondilu: Hmm... How are you exiting the react block?

[12:51] <grondilu> well the error showed up when I was exiting with return.  I guess it's bad to do that.

[12:59] *** Aedil joined
[13:03] <grondilu> unrelated:

[13:03] <grondilu> m: grammar { token TOP { '"' ~ '"' <+alpha-["]>* } }.parse: q{"foo"}, actions => class {}

[13:03] <camelia> rakudo-moar f5fa35164: ( no output )

[13:03] *** Aedil left
[13:03] <grondilu> m: grammar { token TOP { '"' ~ '"' <+print-["]>* } }.parse: q{"foo"}, actions => class {}

[13:03] <camelia> rakudo-moar f5fa35164: OUTPUT: «Cannot resolve caller print(<anon|2>:U: <anon|1>:D); none of these signatures matches:␤    (Mu $:: *%_)␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:03] <grondilu> m: grammar { token TOP { '"' ~ '"' <+print-["]>* } }.parse: q{"foo"}

[13:04] <camelia> rakudo-moar f5fa35164: ( no output )

[13:06] <grondilu> m: grammar { token TOP { '"' ~ '"' <+graph+space-cntrl-["]>* } }.parse: q{"foo"}, actions => class {}

[13:06] <camelia> rakudo-moar f5fa35164: ( no output )

[13:06] *** jpn joined
[13:18] *** jpn left
[13:18] *** Aedil joined
[13:19] *** jpn joined
[13:35] *** yewscion joined
[13:47] *** JimmyZhuo left
[14:04] *** yewscion left
[14:05] *** yewscion joined
[14:20] <discord-raku-bot> <antononcube> This a good read for all LLM enthusiasts (non-LLM, too): https://surfshark.com/research/chart/ai-chatbots-privacy

[14:20] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1356996756226965645/image_720.png?ex=67ee9936&is=67ed47b6&hm=f24330e2873833a10ed6d13f44f750a8a07c0ee99bb971d126171c6b47d617c3&

[14:30] <ugexe> i thought return inside a react would return a specific error

[14:31] <ugexe> as in not a weird moarvm error

[14:33] <ugexe> m: sub  { react { whenever Promise.in(0) {return} } }()

[14:33] <camelia> rakudo-moar fa13ca1bb: OUTPUT: «MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[14:33] <ugexe> from https://github.com/rakudo/rakudo/issues/2753

[14:34] <ugexe> grondilu: ^

[14:37] *** yewscion left
[14:47] *** yewscion joined
[15:51] *** jpn left
[16:24] *** codesections joined
[16:30] *** jpn joined
[16:36] *** yewscion__ joined
[16:37] *** dakkar left
[16:38] *** jpn left
[16:38] *** yewscion left
[16:43] *** codesections left
[16:52] *** codesections joined
[16:57] *** jpn joined
[17:08] *** codesections1 joined
[17:08] *** yewscion__ left
[17:09] *** codesections left
[17:09] *** codesections1 is now known as codesections

[17:10] *** yewscion joined
[17:15] *** codesections left
[17:44] *** [Coke] left
[17:44] *** [Coke] joined
[17:52] *** jpn left
[18:17] *** notna joined
[18:48] *** notna left
[18:52] *** jpn joined
[18:57] *** jpn left
[19:03] *** notna joined
[19:04] *** notna left
[19:37] *** yewscion left
[19:38] *** yewscion joined
[19:41] <Voldenet> m: sub x { react whenever $^x { return $_ } }; my $c = Channel.new; start { sleep 1; $c.send(42); }; say x($c);

[19:41] <camelia> rakudo-moar 37fbd041f: OUTPUT: «MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[19:41] <Voldenet> heh, fascinating bug

[19:42] *** yewscion left
[19:51] <Voldenet> and it doesn't happen in all cases

[19:51] <Voldenet> m: sub x { react whenever $^x { return $_ } }; say x("foo".Supply);

[19:51] <camelia> rakudo-moar 37fbd041f: OUTPUT: «foo␤»

[19:58] <Voldenet> m: sub x { say $*THREAD; react whenever $^x { say $*THREAD; return $_ } }; say x("foo".Supply);

[19:58] <camelia> rakudo-moar 37fbd041f: OUTPUT: «Thread #1 (Initial thread)␤Thread #1 (Initial thread)␤foo␤»

[19:58] <Voldenet> m: sub x { say $*THREAD: react whenever $^x { say $*THREAD; return $_ } }; my $c = Channel.new; start { sleep 1; $c.send(42); }; say x($c);

[19:58] <camelia> rakudo-moar 37fbd041f: OUTPUT: «Thread #4 (GeneralWorker)␤MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[19:59] <ugexe> m: sub x { start react whenever 1 { return 1 } }; await x()

[19:59] <camelia> rakudo-moar 37fbd041f: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    A react block:␤      in code  at <tmp> line 1␤␤    Died because of the exception:␤        Attempt to return outside of immediately-enclosing Ro…»

[20:00] <ugexe> i wonder if that is the error that should be getting thrown

[20:01] <Voldenet> I'm suspecting that nqp::const::CONTROL_RETURN for the sub is handled on the Thread#1, but not the #4

[20:03] <Voldenet> m: use nqp; sub x { react whenever $^x { nqp::throwpayloadlexcaller(nqp::const::CONTROL_RETURN, 42) }; }; my $c = Channel.new; start { sleep 1; $c.send(42); }; say x($c);

[20:03] <camelia> rakudo-moar 37fbd041f: OUTPUT: «A react block:␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Died because of the exception:␤    Attempt to return outside of any Routine␤      in block  at <tmp> line 1␤␤»

[20:03] <Voldenet> Hm, maybe it's a different error

[20:06] <Voldenet> but there's an error regarding missing "react" return handler, so it's kind of similar

[20:07] *** Aedil left
[20:07] <Voldenet> m: use nqp; sub x { react whenever $^x { die ":(" }; }; my $c = Channel.new; start { sleep 1; $c.send(42); }; say x($c); # wrong stack trace

[20:07] <camelia> rakudo-moar 37fbd041f: OUTPUT: «A react block:␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Died because of the exception:␤    :(␤      in block  at <tmp> line 1␤␤»

[20:07] *** maylay left
[20:07] <Voldenet> m: use nqp; sub x { react whenever $^x { die ":(" }; }; my $c = Channel.new; $c.send(42); say x($c); # right stack trace

[20:07] <camelia> rakudo-moar 37fbd041f: OUTPUT: «A react block:␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Died because of the exception:␤    :(␤      in sub x at <tmp> line 1␤      in block <unit> at <tmp> line 1␤␤»

[20:10] *** maylay joined
[20:17] *** ky left
[20:19] <Voldenet> m: sub x { my $n; react whenever $^x { CATCH { default { $n = $_; } }; die ":(" }; die $n if $n }; my $c = Channel.new; start { sleep 1; $c.send(42); $c.close() }; say x($c); # obvious workaround

[20:19] <camelia> rakudo-moar 37fbd041f: OUTPUT: «:(␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <Voldenet> similar thing had to be done in C# before catch could handle async code in async state machines

[20:23] <Voldenet> though there's going to be discontinuity in stack traces that way

[20:24] <Voldenet> m: sub blah { die ":("; }; sub x { my $n; react whenever $^x { CATCH { default { $n = $_; } }; blah; }; die $n if $n }; say x(Promise.in(1));

[20:24] <camelia> rakudo-moar 37fbd041f: OUTPUT: «:(␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:24] <Voldenet> m: sub blah { die ":("; }; sub x { my $n; react whenever $^x { blah; }; die $n if $n }; say x(Promise.in(1)); # wrong either way

[20:24] <camelia> rakudo-moar 37fbd041f: OUTPUT: «A react block:␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Died because of the exception:␤    :(␤      in sub blah at <tmp> line 1␤      in block  at <tmp> line 1␤␤»

[20:41] *** jpn joined
[20:53] *** kybr joined
[20:56] *** Xliff_ left
[21:09] *** yewscion joined
[21:14] *** yewscion left
[22:14] *** sena_kun joined
[22:17] *** jpn left
[23:24] *** sena_kun left
[23:25] *** Sgeo joined
[23:27] *** yewscion joined
[23:33] *** yewscion left
