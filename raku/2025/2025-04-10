[00:21] *** stanrifkin left
[01:25] *** maylay left
[01:25] *** kylese left
[01:25] *** kylese joined
[01:29] *** nine left
[01:30] *** maylay joined
[01:30] *** nine joined
[01:46] *** maylay left
[01:52] *** maylay joined
[02:15] *** kylese left
[02:15] *** kylese joined
[02:44] <discord-raku-bot> <antononcube> weekly: https://youtu.be/6uCIoonlybk

[02:44] <notable6> antononcube, Noted! (weekly)

[02:56] *** derpydoo joined
[03:41] *** Aedil joined
[03:48] *** derpydoo left
[04:30] *** kylese left
[04:34] *** kylese joined
[05:02] *** lichtkind joined
[05:30] *** kylese left
[05:32] *** kylese joined
[06:03] *** Aedil left
[06:44] *** Aedil joined
[07:06] *** tjr left
[07:41] *** Sgeo left
[07:59] *** lizmat left
[08:04] *** dakkar joined
[08:10] *** derpydoo joined
[08:19] *** jpn joined
[09:09] *** sena_kun joined
[09:36] *** jpn left
[09:41] *** jpn joined
[09:45] *** jpn left
[09:57] *** jpn joined
[10:44] *** stanrifkin joined
[11:01] *** derpydoo left
[11:07] <grondilu> what can I do to avoid circular module loading?  Seems to me that sometimes it's difficult to avoid.

[11:07] <grondilu> Like I made a module Chess::Graphics, and I really would like to use symbols in Chess, but Chess already loads Chess::Graphics.

[11:09] <timo> worst case, run-time loading. otherwise extract to a shared module if possible

[11:10] <grondilu> yeah maybe create a third module indeed.

[11:40] <Voldenet> alternative is putting everything in the same module

[11:42] <Voldenet> though logically Chess::Graphics is a module building on top of Chess

[11:44] <Voldenet> so maybe Chess should have scalar reference to rendering module and when Chess::Graphics loads, it'd register itself as provider when loading

[11:44] <Voldenet> and Chess would only have a role for rendering

[11:46] *** sena_kun left
[11:47] *** sena_kun joined
[11:47] <Voldenet> last solution sounds too convoluted, shared module sounds best

[11:52] *** sena_kun left
[11:53] *** sena_kun joined
[11:56] *** sena_kun left
[11:57] *** sena_kun joined
[12:07] *** JimmyZhuo joined
[12:12] <discord-raku-bot> <antononcube> Using roles is what I do often in those cases.

[12:15] <grondilu> turns out what I needed in Chess::Graphics was just board related symbols, like colors, squares, &rank and &file.  So I made Chess::Board, which I should have made sooner anyway.

[12:16] <discord-raku-bot> <antononcube> Right, that is the ‚Äúnormal‚Äù thing to do.

[12:16] *** sena_kun left
[12:17] *** sena_kun joined
[12:38] <tbrowder> librasteve:ref my async prob: i think the solution is in brian‚Äôs book with his answer to exercise 18.5

[12:39] <tbrowder> Voldenet: ^^

[12:43] <grondilu> m: print <foo bar> Z=> (^1_000_000).pick(*)

[12:43] <camelia> rakudo-moar fd7d18088: OUTPUT: ¬´foo     967707 bar      8845¬ª

[12:43] <grondilu> m: print <foo bar> Z=> (^1_000_000_000).pick(*)

[12:43] <camelia> rakudo-moar fd7d18088: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 71335936 bytes‚ê§¬ª

[12:43] <grondilu> that looks wrong to me

[12:44] <grondilu> on second thought maybe not

[12:45] <grondilu> on third thought I'm not sure

[12:46] <grondilu> m: print <foo bar> Z=> (^1_000_000_000).pick(2)

[12:46] <camelia> rakudo-moar fd7d18088: OUTPUT: ¬´foo     295507191 bar   498295973¬ª

[12:46] <discord-raku-bot> <antononcube> @grondilu For "Graph" it seems (seemed) that I had a lot of chicken-and-egg problems. For example, there is a class Graph that is generic and there are graph makers. Those makes could be just functions, but they benefited from knowing the Graph class. So, I used subclasses and roles. Also, there is big database of "well known" graphs (‚âà12K) which instead of being tucked-in into the "Graph::" namespace it would

[12:46] <discord-raku-bot> be better placed in "Data::Graph" (or similar.)

[12:47] <grondilu> well, for similar issues I could not put Chess::Position or Chess::Move in their own compunits

[12:48] <grondilu> maybe it'll be possible after everything is cleaned up, though.

[12:51] <discord-raku-bot> <antononcube> Thinking in terms of possible Web APIs for those might help. If you have a web service for these functionalities what would endpoints look like.

[12:53] <discord-raku-bot> <antononcube> In my graph data use cases there are two established designs I can follow: House of Graphs (web service), and Wolfram Language / Mathematica corresponding functions.

[13:15] *** tjr joined
[13:27] <tbrowder> on seventeenth though, exercises 19.2 and 19.3 look ‚ÄúPromising‚Äù üòé 

[13:27] <tbrowder> *thought

[13:30] <Voldenet> Promises don't solve the problem at all, main problem is how readline receives input line by line and buffers the line

[13:31] <Voldenet> so you can't say "discard whatever user has typed until now and abort the read" anyhow

[13:31] <Voldenet> tho when user starts typing before the timeout it gets messy

[13:32] *** atweedie_ joined
[13:32] *** greenfork_ joined
[13:32] *** oodani_ joined
[13:33] *** dustinm`_ joined
[13:35] <tbrowder> yes, seems to me i need the async, await, and a timer loop‚Ä¶

[13:35] *** facetious joined
[13:35] *** JimmyZhuo_ joined
[13:36] *** andinus2 joined
[13:37] <tbrowder> and i just take the first line and ignore all after, or abort if out of time

[13:39] <Voldenet> I don't know the use case, but there's also an option to not use time-based logic, but option-based "enable interactive mode"

[13:39] <Voldenet> that's what I usually prefer

[13:40] *** JimmyZhuo left
[13:40] *** oodani left
[13:40] *** greenfork left
[13:40] *** atweedie left
[13:40] *** dustinm` left
[13:40] *** andinus left
[13:40] *** acidsys left
[13:40] *** tailgate left
[13:40] *** greenfork_ is now known as greenfork

[13:40] *** atweedie_ is now known as atweedie

[13:41] <tbrowder> hm, ‚Äúenable‚Ä¶‚Äù which thingy provides that?

[13:42] <Voldenet> well, there's nothing like that in the language itself, but `sub MAIN(Bool :$interactive)`

[13:42] <Voldenet> or $*ENV<interactive>

[13:43] *** JimmyZhuo_ left
[13:44] *** synthmeat left
[13:44] <tbrowder> thnx. my simple use case is: ask user yes or no, wait x seconds for answer, eval answer or abort if no answer

[13:44] <Voldenet> I use the second form when I need debug shell using command pattern, I use the first when I want to handle prompt-based input instead of arg-based

[13:44] *** synthmeat joined
[13:46] <tbrowder> so it looks like first case then.

[13:47] *** acidsys joined
[13:47] <tbrowder> my sad lack of experience with sub MAIN may be my downfall here

[13:48] <Voldenet> I used to stay away from it for some time, but MAIN turned out to be surprisingly straightforward

[13:48] <tbrowder> i‚Äôve been rolling my own mostly since i started.

[13:50] <Voldenet> in all cases where args are complicated, i fall back to `Str :$thing = "sane default" #= some info about the format`

[13:51] <Voldenet> it's kinda manual still, but Bool and Int arguments are handled nicely

[13:51] <tbrowder> i‚Äôll check out the docs again. thank you for good advice.

[13:53] <tbrowder> p. 18 in brian‚Äôs book!

[13:54] <Voldenet> it doesn't mention `multi sub MAIN`, but it's handled nicely too

[13:55] <Voldenet> e.g.

[13:55] <Voldenet> m: multi sub MAIN("foo") { }; multi sub MAIN("bar") {}

[13:55] <camelia> rakudo-moar fd7d18088: OUTPUT: ¬´Usage:‚ê§  <tmp> foo‚ê§  <tmp> bar‚ê§¬ª

[13:56] <Voldenet> it's really nice when the app needs subcommands or multiple variations of arguments

[13:59] <Voldenet> now I thought about the very simple solution for timeouting prompt

[14:00] <Voldenet> read input in `start { loop { ‚Ä¶ }}` all the time, emit things to the channel

[14:00] <Voldenet> if something's attached to the channel, it gets the input

[14:01] <Voldenet> though it doesn't solve the "buffered things get into the next prompt" problem still

[14:04] <Voldenet> time-based input also doesn't consider things like heavy load preventing input from arriving in time

[14:04] *** apac joined
[14:05] <tbrowder> thnx, kinda what i‚Äôve been seeing in chaps 18 and 19. hard for me to wrap my head around it‚Ä¶my use does not involve heavy loads‚Ä¶bye for now

[14:14] <discord-raku-bot> <nahita3882> i did this with Python for Windows years ago using its msvcrt library. Raku has nativecall so i transported it, maybe it's useful https://paste.debian.net/1368690/

[14:16] <discord-raku-bot> <nahita3882> tested on 2021.07, Windows 10

[14:17] *** apac left
[14:33] <Voldenet> for linux Terminal::ReadKey would do similar thing

[14:33] <Voldenet> that _getch does

[14:34] <Voldenet> erm, _getche

[15:31] *** sena_kun left
[15:48] *** sena_kun joined
[16:03] *** jpn left
[16:05] *** sena_kun left
[16:13] <[Coke]> folks, any pointers on why this change throws a 'connect refused' ?

[16:14] <[Coke]> https://github.com/Raku/roast/commit/fb6d336e55d796e0f097436ead59789f60411689

[16:14] <[Coke]> er, *connection

[16:17] <[Coke]> (trying to clean up the test so it uses the dynamic port where it makes sense - but I think awaiting to get the port # back is causing an issue.

[16:19] <ugexe> maybe you cant get the port if its closed already

[16:22] <[Coke]> it is getting the port (I can diag it out)

[16:22] <[Coke]> the connection issue is on line 115 or so

[16:22] <[Coke]>     await client('u'.encode('utf-8'), "\c[COMBINING DOT ABOVE]\n".encode('utf-8'));

[16:23] * [Coke] wonders how this worked, as it's closing the tap before getting to the next client call. hurm.

[16:24] <[Coke]> does each new .tap get a new port? (that doesn't seem right)

[16:27] <[Coke]> Ugh, the port is changing.

[16:28] <[Coke]> fixable, anyway.

[16:31] *** dakkar left
[16:52] *** Sgeo joined
[17:30] *** jpn joined
[17:35] *** jpn left
[18:12] *** lizmat joined
[18:29] *** lizmat left
[20:15] *** lichtkind left
[20:35] *** lichtkind joined
[20:57] *** jpn joined
[21:52] *** jpn left
[21:58] *** maylay left
[22:01] *** guifa joined
[22:05] *** maylay joined
[22:17] *** lizmat joined
[22:29] *** stanrifkin left
[22:49] *** Aedil left
[22:53] *** lizmat_ joined
[22:56] *** lizmat left
[23:05] *** lichtkind left
[23:36] *** lizmat_ left
[23:43] *** MasterDuke joined
