[00:01] <wayland76> Hmm.  So my next question is, do we now need to make XML::Element do Iterator or something?  Or will Positional take care of that in theory?  

[00:31] *** topnep left
[00:33] *** topnep joined
[00:41] *** yewscion joined
[00:46] *** yewscion left
[01:02] *** jpn left
[01:22] <timo> should not do Iterator, it could in theory do Iterable, but i think positional might do that

[01:26] *** yewscion joined
[01:30] *** yewscion left
[01:36] *** Manifest0 left
[01:46] *** comborico1611 joined
[02:01] *** zetaaaa left
[02:36] *** nil78 left
[02:37] *** topnep left
[02:37] *** nil78 joined
[02:38] *** topnep joined
[02:46] *** nil78_ joined
[02:47] *** nil78 left
[02:57] *** kylese left
[02:57] *** kylese joined
[03:01] *** wbooze joined
[03:03] *** comborico1611_ joined
[03:04] *** comborico1611 left
[03:08] *** wbooze left
[03:09] *** comborico1611_ left
[03:11] *** ky2 left
[03:11] *** ky joined
[03:15] *** kylese left
[03:15] *** kylese joined
[03:18] *** wbooze joined
[03:30] *** kylese left
[03:34] *** kylese joined
[03:45] *** nil78_ left
[03:51] *** nil78 joined
[04:40] *** wbooze left
[04:49] *** wbooze joined
[05:03] *** Inline joined
[05:04] *** Aedil joined
[05:22] *** comborico1611 joined
[05:31] *** comborico1611 left
[05:43] <wayland76> timo: Thanks!  According to the inheritance diagram at https://docs.raku.org/type/Iterable#typegraphrelations Positional and Iterable are independent.  I think I might be able to pass through the Iterable.iterator method to the array that contains the XML children.  

[05:47] <wayland76> Yeah, that seems to fix the problem.  Thanks!  I'll put in a PR later today.  

[05:50] *** guifa left
[05:51] *** Aedil left
[05:52] <timo> I pulled the trigger on tbrowder's docs PR

[06:48] *** topnep left
[06:49] *** topnep joined
[06:50] *** Inline left
[07:35] *** jpn joined
[07:43] *** Aedil joined
[08:38] *** wbooze left
[08:38] *** wbooze joined
[09:07] *** oodani left
[09:07] *** oodani joined
[09:12] *** jpn left
[09:47] *** Manifest0 joined
[09:53] *** lichtkind joined
[10:18] *** Sgeo left
[10:20] *** nil78 left
[10:21] *** sena_kun joined
[10:24] *** nil78 joined
[10:27] *** wbooze left
[10:59] *** topnep left
[10:59] <wayland76> Hi!  Is there an easy way to borrow files from another module?  I'm making some tests that are dependent on the XML module, and I'd like to reuse some of the XML files that come in the "t" directory of the XML module in my own tests.  

[11:00] *** topnep joined
[11:00] <wayland76> (Decided to hold off on the Iterable PR for now, in case I discover any other bugs in the near future)

[11:03] <wayland76> Also, is it possible to define an operator that takes 3 parameters instead of 2?  Would I use a sub-signature for that?  

[11:04] <lizmat> sure, and not necessarily

[11:04] <lizmat> assuming you'd want to use it in a reduce ?

[11:04] <lizmat> but how would that be different from a sub with 3 args 

[11:04] <lizmat> ?

[11:08] <wayland76> I'm wanting to do something like the XPath, for example: htmlâªªbodyâªªh1{@id="red"}   -- the âªª operator will look for matching children, and the {} is just a block, and that part works, it's the part between the âªª and {} that I'm trying to figure out.  

[11:08] <wayland76> Sorry, that should've been ".id", not "@id"

[11:09] <wayland76> Let me rewrite the example: htmlâªªbodyâªªh1{.id eq "red"} 

[11:10] <wayland76> Going to bed now; will look at the answer next time I'm on (hopefully tomorrow, but otherwise the next day).  

[11:11] <wayland76> I'm happy if I have to make those things strings, and if necessary, I could put a comma before the {}.  

[11:11] <wayland76> What I currently have working is something like: @nodes âªª { .id eq 'red' }

[11:18] <lizmat> sleep well... I'll mull over it some more today

[11:27] *** wayland joined
[11:27] *** wayland76 left
[11:50] *** wbooze joined
[12:04] *** Guest93 joined
[12:13] *** Guest93 is now known as JimmyZ

[12:14] *** JimmyZ left
[12:15] *** Guest93 joined
[12:16] *** Guest93 is now known as JimmyZ

[12:39] *** nil78 left
[12:43] *** JimmyZ left
[12:45] *** nil78 joined
[13:37] <lizmat> weekly: https://dev.to/lizmat/repl-avalanche-45hh

[13:37] <notable6> lizmat, Noted! (weekly)

[13:51] *** nil78 left
[13:54] *** nil78 joined
[14:11] *** Opus left
[14:15] *** nil78 left
[14:22] *** nil78 joined
[14:26] *** Opus joined
[14:49] *** guifa joined
[15:18] *** wbooze_ joined
[15:21] *** wbooze left
[15:28] *** wbooze_ left
[15:34] *** wbooze joined
[15:58] <discord-raku-bot> <antononcube> @lizmat REPL crashes ðŸ˜­

[16:00] <discord-raku-bot> <antononcube> I will try to reproduce the crash and file an issue. (I think it was repeated use of =context.)

[16:03] <discord-raku-bot> <antononcube> Hmm... while trying to reproduce the crash it happened immediately with the message:  [0] >rakudo(12052,0x1f4b10840) malloc: Heap corruption detected, free list is damaged at 0x60000267c240 *** Incorrect guard value: 9600 rakudo(12052,0x1f4b10840) malloc: *** set a breakpoint in malloc_error_break to debug 

[16:03] <discord-raku-bot> <antononcube> After doing rakubrew rehash I cannot reproduce the crash.

[16:03] <discord-raku-bot> <antononcube> So, no issue filing for now.

[16:40] *** yewscion joined
[17:16] *** topnep left
[17:17] *** topnep joined
[17:26] *** nil78 left
[17:29] *** nil78 joined
[17:33] *** xinming joined
[17:58] <lizmat> antononcube the past months I've been suspecting that sometimes after an update, wrong bytecode files are being selected.  Which can cause all sorts of weird crashes

[17:58] <lizmat> this appears to confirm that suspicion

[18:11] *** wbooze left
[18:39] *** Aedil left
[18:52] *** yewscion left
[19:21] *** topnep left
[19:22] *** topnep joined
[19:39] *** apac joined
[19:39] *** apac left
[19:41] *** apac joined
[19:48] *** xinming left
[19:48] *** xinming joined
[19:58] *** guifa left
[20:04] *** apac left
[20:07] *** apac joined
[20:13] <timo> but that also looks like the crash you get with the not-updated-yet LineEditor module

[20:13] <timo> where the struct definition was too small

[20:13] <timo> so it literally immediately overwrites a pointer in the free list with bogus data

[20:16] *** Sgeo joined
[20:23] *** yewscion joined
[20:28] *** yewscion left
[20:56] *** yewscion joined
[21:01] *** yewscion left
