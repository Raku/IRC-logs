[00:28] *** PotatoGim left
[00:30] *** PotatoGim joined
[00:41] *** [Coke] left
[01:07] *** yewscion_ joined
[01:12] *** yewscion_ left
[01:39] *** silug left
[01:39] *** silug joined
[01:55] *** habere-et-disper joined
[02:06] *** hulk joined
[02:07] *** kylese left
[02:29] *** habere-et-disper left
[02:38] *** [Coke] joined
[02:40] *** yewscion_ joined
[02:49] *** yewscion_ left
[03:15] *** hulk left
[03:15] *** kylese joined
[04:20] *** Aedil joined
[04:30] *** kylese left
[04:33] *** kylese joined
[04:48] *** maylay left
[04:51] *** maylay joined
[05:30] *** kylese left
[05:31] *** kylese joined
[05:40] *** Aedil left
[05:45] *** Aedil joined
[06:19] *** Sgeo left
[06:32] <discord-raku-bot> <melezhik.> .

[06:43] *** maylay left
[06:46] *** maylay joined
[07:14] <Voldenet> grondilu: I think you're right - posted code should work

[07:15] *** apac left
[07:17] <Voldenet> m: class A { method !foo { "bar" }; class B { method x { A.new!foo } } }; A::B.new.x

[07:17] <camelia> rakudo-moar dd0b647d4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such private method '!foo' for invocant of type 'A::B'␤at <tmp>:1␤------> o { "bar" }; class B { method x { A.new!<HERE>foo } } }; A::B.new.x␤»

[07:25] <Voldenet> very similar code in C# works, so that is definitely sane behavior https://dotnetfiddle.net/GQiPxf

[07:25] <Voldenet> and also works in java

[08:00] <discord-raku-bot> <librasteve> Voldenet: (and grondilu), the docs are quite expansive on how raku differs from other languages … Unlike in some languages where private is an accessibility modifier on a method, in Raku "private methods" and "methods" are quite different things - that is to say, it's better to read "private method" as a compound noun rather than an adjective describing a noun.

[08:01] <discord-raku-bot> <librasteve> that is not to say that you are wrong, since I do not claim to understand the raku design well enough, or to know the reason why the docs say that

[08:07] <discord-raku-bot> <librasteve> I suspect it may boil down to “we need a way to do fully private things in raku since “my” variables cannot be hidden from outer scopes” or maybe “a module is a class, so we want to suppress lexical scoping across module boundaries” … as I say I don’t know and this is wild speculation… I’m not that deep into using private methods so I could live with changing/fixing this providing it is clear

[08:07] <discord-raku-bot> and simple either way :-)

[08:25] *** Guest52 joined
[08:26] *** Guest52 left
[08:47] <lizmat> you probably should think of private methods as lexically scoped subs that have an implicit invocant "self" specified as the first positional argument

[08:49] <Voldenet> librasteve: Well, hence "I think", I'm not very fixated on this - syntactically the class being inside of the other should have access to things on the same level IMO, but those details are not the same even in java/kotlin/C#

[08:50] <Voldenet> I feel like there's no single idea on what's the point of subclasses in the first place

[08:51] *** wayland joined
[08:53] <Voldenet> but it might be difficult to say (a'la C++): I want class B and C to be friends of A and have access to its private methods, but other parts of code should not have this access

[09:01] <grondilu> The thing is, even if I define the nested class inside the definition of a method of the outer class, the private call still fails.  This is odd to me.  The private call works, unless it's inside a local class?

[09:02] <grondilu> m: class A { method !foo {}; method bar { class B { method x { A.new!foo } } } };

[09:02] <camelia> rakudo-moar dd0b647d4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such private method '!foo' for invocant of type 'A::B'␤at <tmp>:1␤------> method bar { class B { method x { A.new!<HERE>foo } } } };␤»

[09:02] <grondilu> ^see?

[09:03] <grondilu> besides there is no reason raku should think the method is called by an invocant of type A::B and not A, is there?

[09:04] <grondilu> golfing it even more:

[09:04] <grondilu> m: class { method !foo {}; method bar { class{ method x { A.new!foo } } } };

[09:04] <camelia> rakudo-moar dd0b647d4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Whitespace required after keyword 'class'␤at <tmp>:1␤------> ass { method !foo {}; method bar { class<HERE>{ method x { A.new!foo } } } };␤»

[09:04] <grondilu> oops

[09:04] <grondilu> m: class { method !foo {}; method bar { class { method x { A.new!foo } } } };

[09:04] <camelia> rakudo-moar dd0b647d4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    A used at line 1␤␤»

[09:05] <grondilu> nevermind

[09:05] <grondilu> m: class A { method !foo {}; method bar { class { method x { A.new!foo } } } };

[09:05] <camelia> rakudo-moar dd0b647d4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such private method '!foo' for invocant of type '<anon|1>'␤at <tmp>:1␤------> ; method bar { class { method x { A.new!<HERE>foo } } } };␤»

[09:07] <grondilu> m: class A { method !foo {}; method bar { my &foo = { A.new!foo }; class { method x { foo } } } };

[09:07] <camelia> rakudo-moar dd0b647d4: ( no output )

[09:07] <grondilu> ^that would be a workaround, I guess.

[09:11] <grondilu> m: lass A { class B {...}; trusts B; method !foo {}; method bar { class B { method x { A.new!A::foo } } } }

[09:11] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤No such method 'add_trustee' for invocant of type␤'Perl6::Metamodel::PackageHOW'␤at <tmp>:1␤»

[09:11] <grondilu> m: class A { class B {...}; trusts B; method !foo {}; method bar { class B { method x { A.new!A::foo } } } }

[09:11] <camelia> rakudo-moar 0d2ab2452: ( no output )

[09:11] <grondilu> ^or this

[09:12] <Voldenet> oh, raku has "trusts", huh

[09:12] <patrickb> I think I'm facing a Native all bug. https://paste.sr.ht/~patrickb/1de35011b308ee0f43703361ef665d634f1739b1

[09:14] <patrickb> On Linux both the C and the Raku version work fine. On an ARM MacOS the C version works, but in the MacOS Version the ioctl call succeeds, but does not update the $size struct.

[09:14] *** melezhik joined
[09:15] <melezhik> .tell patrickb: you might be interested in this - https://sparky.sparrowhub.io/report/~patrickb-Terminal-API/24326 HTH

[09:15] <tellable6> melezhik, I'll pass your message to patrickb

[09:15] <patrickb> Any clues on how to best debug this? Any best guesses as to which component is the most potential offender?

[09:16] <melezhik> sorry you are talking about this? "[Terminal-API] get-config failed" ?

[09:17] <patrickb> No. This is about get-win-size and it only affects MacOS.

[09:17] <wayland> Hi all!  I asked a question about a month ago about operators that take multiple parameters.  I've written a short gist about what I'm trying to achieve at https://gist.github.com/wayland/2876a7c8efe5adfc0e210524ad9ed8c7 .  If anyone has ideas about how I could achieve these things, I'd be interested to hear about it :) 

[09:21] <Voldenet> patrickb: I'd build C library that'd set the struct's property without ioctl and see if that works

[09:23] <melezhik> sure, np

[09:23] <Voldenet> if not, then it's good test case, if it does, then it's ioctl-related somehow

[09:23] <patrickb> I'll have to verify, but I'm pretty sure that's covered by the native all tests. I suspect it's related to ioctl being a vararg function.

[09:24] <patrickb> but yes, creating an isolated test case is a good idea.

[09:25] *** melezhik left
[09:31] <Voldenet> wayland: you don't need an operator to take multiple parameters, `html⪪body⪪h1{.id eq "red"}` can be written as ((html⪪body)⪪h1).CALL-ME({ .id eq "red" })

[09:42] *** yewscion_ joined
[09:43] <lizmat> m: class A { method CALL-ME(|) { say "hi" } }; say A()

[09:43] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «(A(Any))␤»

[09:43] <lizmat> m: class A { method CALL-ME(|) { say "hi" } }; say A.new()

[09:43] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «A.new␤»

[09:43] <lizmat> m: class A { method CALL-ME(|) { say "hi" } }; say A.new()()

[09:43] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «hi␤True␤»

[09:44] <lizmat> Voldenet: is the .CALL-ME needed there ?

[09:46] *** librasteve_ joined
[09:46] <librasteve_> .

[09:47] *** yewscion_ left
[09:49] <Voldenet> hm

[09:51] <Voldenet> m: class h1 { method CALL-ME(&n) { n() } }; h1({ .say }) # I was expecting this to work without ()

[09:51] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «(Any)␤»

[09:51] <Voldenet> m: class h1 { method CALL-ME(&n) { n() } }; h1 { .say } # but it doesn't

[09:51] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> ss h1 { method CALL-ME(&n) { n() } }; h1<HERE> { .say } # but it doesn't␤    expecting any o…»

[09:54] <Voldenet> h1 would work as a sub

[09:57] *** melezhik joined
[09:57] <librasteve_> https://www.irccloud.com/pastebin/lv83BHqX

[09:59] <discord-raku-bot> <librasteve> ^^ I'm fixated on the grondilu thing and thus made a little snippet to try and get in my head what lizmat said in that context ... ultimately I think the thing that is confusing me is that grondilu original has a subclass that makes a new outer ... not sure that that would ever be something I would do (but then I guess there may be a reason like nested class trees)

[10:00] <discord-raku-bot> <librasteve> anyway must to $day-job

[10:00] <Voldenet> m: multi infix:<A>(&a, &b) {}; multi sub html() { -> {}; }; sub h1(&n) { -> { }; }; html A h1 { .id eq 'red' }

[10:00] <camelia> rakudo-moar 0d2ab2452: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    A used at line 1␤␤»

[10:00] <Voldenet> this doesn't quite work

[10:00] <Voldenet> m: multi infix:<A>(&a, &b) {}; multi sub html() { -> {}; }; sub h1(&n) { -> { }; }; (html) A h1 { .id eq 'red' }

[10:01] <camelia> rakudo-moar 0d2ab2452: ( no output )

[10:03] <wayland> Thanks Voldenet and lizmat.  It seems I've been unclear.  I've amended the gist to say "The elements such as body and h1 are supposed to be undeclared labels; you could equally well substitute in filenames if the tree in question happened to be a filesystem instead of a document."

[10:03] <wayland> That's why I said I could quote them if necessary.  HTH,

[10:09] <Voldenet> m: role N {}; multi infix:<A>(Str $a, Str $b) { N }; multi infix:<A>(N $a, Str $b) { N }; multi infix:<A>(N $a, Block $b) { N }; "html" A "head" A "h1" A { .id eq "red" }

[10:09] <camelia> rakudo-moar 0d2ab2452: ( no output )

[10:13] *** sena_kun joined
[10:13] <wayland> Voldenet: Thanks!  That looks like my least bad option at the moment.  

[10:14] <Voldenet> I'm not sure if for "xpath-like" operator it wouldn't be better to define some other operator

[10:15] <Voldenet> m: role N {}; multi infix:<A>(Str $a, Str $b) { N }; multi infix:<A>(N $a, Str $b) { N }; multi infix:<B>(N $a, Block $b) { N }; "html" A "head" A "h1" B { .id eq "red" }

[10:15] <camelia> rakudo-moar dfa806e6d: ( no output )

[10:16] <Voldenet> m: role N {}; multi infix:<A>(Str $a, Str $b) { N }; multi infix:<A>(N $a, Str $b) { N }; multi infix:<B>(N $a, Block $b) { N }; "html" A "head" A "h1" B { .id eq "red" } A "h2" B { .className eq "x1" }

[10:16] <camelia> rakudo-moar dfa806e6d: ( no output )

[10:16] <Voldenet> m: role N {}; multi infix:<A>(Str $a, Str $b) { N }; multi infix:<A>(N $a, Str $b) { N }; multi infix:<A>(N $a, Block $b) { N }; "html" A "head" A "h1" A { .id eq "red" } A "h2" A { .className eq "x1" } # it works either way, but with B i feel that it's more readable

[10:16] <camelia> rakudo-moar dfa806e6d: ( no output )

[10:17] <Voldenet> and after all, no CALL-ME was needed

[10:18] <wayland> Voldenet: Yes, agreed about the separate operator; was thinking the same.  

[10:29] *** jpn joined
[10:31] <Voldenet> wayland: btw, I read the second part after left join - RED was doing something similar and it leads to emitting proxies and making a lot of custom operators

[10:32] <Voldenet> however RakuAST might improve that https://dev.to/fco/the-future-of-red-orm-for-raku-44gf

[10:32] <SmokeMachine> It still is doing that… the RakuAST implementation of Red is still in very early stages

[10:33] <Voldenet> my overly positive news reporting style treats early stages as finishing touches ;P

[10:34] *** melezhik left
[10:36] <Voldenet> hm, thinking about how this could be passed this gives me an interesting idea, probably making xpath a lot simpler

[10:36] <Voldenet> m: sub xpath(*@n) {}; xpath "html", "head", "h1", { .id eq "red" }, "h2", { .className eq "x1" }

[10:36] <camelia> rakudo-moar dfa806e6d: ( no output )

[10:38] <Voldenet> wayland: ^ the style is easier and requires no custom operators at all

[10:39] <Voldenet> I have no idea which one is better, but second one has hardly any magic in it, which probably is good

[10:41] <Voldenet> bad part is that it has no magic :P

[10:44] *** lichtkind joined
[10:50] *** melezhik joined
[10:52] *** JimmyZhuo joined
[10:55] *** melezhik left
[11:02] <patrickb> I have it reproduced without ioctl. It's exactly as I guessed. It fails on MacOS when trying to modify a struct passed in via varargs.

[11:02] <patrickb> That specific thing is not covered by tests.

[11:03] <patrickb> This makes me think that the issue is probably with dyncall /libffi

[11:06] <SmokeMachine> m: class Node { has $.parent; has $.child; has @.tests; method AT-KEY(&code) { @!tests.push: &code; self }; method add($child) { without $!parent { $!parent = $!child; return self }; self.new: :parent(self), :$child }}; sub term:<html> { Node.new: :child<html> }; multi infix:<< <- >>(Node $parent, $child) is looser(&postcircumfix:<{ }>) { Node.new: :$parent, :$child }; say html <- "body" <- "h1"{ *.id eq "red" }

[11:06] <camelia> rakudo-moar dfa806e6d: OUTPUT: «Node.new(parent => Node.new(parent => Node.new(parent => Any, child => "html", tests => []), child => "body", tests => []), child => Failure.new(exception => X::AdHoc.new(payload => "Type Str does not support associative indexing."), backtrace => Back…»

[11:06] <SmokeMachine> Odd… locally that works…

[11:07] <Voldenet> there's no postcircumfix<{ }>

[11:12] <SmokeMachine> No, I got it wrong…. It does not work locally either… :(

[11:12] <SmokeMachine> But it works with ()…

[11:14] <SmokeMachine> https://glot.io/snippets/h5t1sg55xd

[11:34] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2025/03/25/2025-12-red-on-rakuast/

[12:05] *** librasteve_ left
[12:23] *** dakkar joined
[12:30] <leont> Hmmm, Air looks pretty cool

[12:32] *** dakkar left
[12:33] *** Voldenet_ joined
[12:34] *** Voldenet left
[12:34] *** Voldenet_ is now known as Voldenet

[12:51] *** maylay left
[12:53] *** maylay joined
[13:19] *** Xliff joined
[13:20] <Xliff> \o

[13:20] <tellable6> 2025-03-22T23:17:32Z #raku <lizmat> Xliff: if you're not using those routines, it's all good

[13:27] <Xliff> Was reading FCO

[13:27] <Xliff> D'oh

[13:28] <Xliff> Was reading FCO's post on Red's future and was wondering how  that would work. Are there plans on exposing a mechanism that will generate the AST for a classes methods (or at least selectively preserving the AST in stage parse?

[13:29] <Xliff> if not, it could be as simple as having a trait...let's say "ast-preserved" which will add a .AST method to a Callable which will emit the AST as presered during the parsing phase.

[13:30] <Xliff> I was working on something like that a while ago, but got sidetracked

[13:30] <Xliff> Would the core devs be interested in me reviving that work for a future PR?

[13:31] <lizmat> the idea is that a CHECK phaser would have access to the complete RakuAST tree

[13:32] <lizmat> so at that time, you would be able to do whatever you want to that tree, before it gets turned into QAST / bytecode

[13:40] *** JimmyZhuo left
[13:41] <SmokeMachine> My plan is, on CHECK time, replace all map/grep/first/etc to add a named parameter with the block ast…

[13:42] <lizmat> Xliff: so such a trait would only make sense if you'd like to be able to access the original AST **at runtime**

[14:02] *** librasteve_ joined
[14:02] <librasteve_> I was wondering how the AST would get applied … CHECK sounds cool

[14:03] <librasteve_> leont: appreciate the kind words … it’s still early days for Air so now is a great time to come in a shape things the way you want ;-)

[14:04] <leont> Getting form handling right is the main hard thing really. I think pretty much all the other things are obvious

[14:04] <leont> All the other things are just output, form handling is also handling input if done right.

[14:07] <librasteve_> I have done all the HTMX examples in raku crotmp already … https://github.com/librasteve/raku-HTMX-Examples

[14:07] <librasteve_> and I think that quite a lit of these are form-relavant and could/should be included in forms

[14:08] <librasteve_> (which I did not really do any examples / any Components or Tags for in Air yet)

[14:10] <librasteve_> one general question I have is whether there is “core Cro::WebApp” forms support currently used by Cro Template and if so how easy that would be to carve out and re-use… so I guess next step is to rootle around in there

[14:17] <librasteve_> leont: do you have a role model form implementation that you like (not necessarily in raku) … or maybe some words about do & donts?

[14:17] <librasteve_> s/do/dos/

[14:19] <leont> I've been trying to stay away from anything front-end for at least 15 years so I wouldn't really know what the good solutions are.

[14:47] <librasteve_> very wise

[14:48] *** liztormato joined
[14:48] *** maylay left
[14:50] <liztormato> Librasteve  do you think it would be feasible / make sense to rework irclogs.raku.org in hArc?

[14:51] *** maylay joined
[14:55] *** liztormato left
[15:16] *** sena_kun left
[15:16] *** sena_kun joined
[15:25] *** sena_kun left
[15:26] *** sena_kun joined
[15:27] <discord-raku-bot> <librasteve> feasible - yes. make sense - not really since quick glance at the code shows many lines of cro templates …. so I am not sure it makes sense to just rewrite something that works unless there is a need for big changes

[15:30] <discord-raku-bot> <librasteve> what I have in mind is a rework of raku.org … since tbh that is a bit in need of a more modern design and some of the content (raku example, and so on) looks very stale and also imo, there is about 10 times too much info than is needed to appeal to a potential raku wannabe to get started

[15:30] <discord-raku-bot> <librasteve> what do you think of that idea?

[15:30] <[Coke]> Folks - had to reload the MoarVM tarball into the release, and *create* the nqp tarball. both should be in place now.

[15:31] <[Coke]> the git repos were fine, but any tools that depended on the release would have had an issue (e.g. rakudo/star)

[15:33] *** sena_kun left
[15:33] *** sena_kun joined
[15:40] *** yewscion_ joined
[15:41] <Xliff> Oh! You can access the AST at CHECK time? How would that work? The .ast method?

[15:42] *** liztormato joined
[15:44] <Xliff> librasteve: Do you think a rework of raku.org to use Air might be more flexible and reliable than Cro templates?

[15:45] <liztormato> librasteve feels like we can use a restyling to coincide with a 6.e release

[15:45] <Xliff> I love Cro templates, but they have limitations that I suspect Air does not.

[15:45] *** yewscion_ left
[15:46] <Xliff> As long as coding styles enforce separation of display logic and module logic it could work well.

[15:46] *** vrurg left
[15:46] *** vrurg joined
[15:48] *** yewscion_ joined
[15:54] *** notable6 left
[15:54] *** linkable6 left
[15:54] *** shareable6 left
[15:54] *** evalable6 left
[15:54] *** tellable6 left
[15:54] *** coverable6 left
[15:54] *** unicodable6 left
[15:54] *** nativecallable6 left
[15:54] *** quotable6 left
[15:54] *** greppable6 left
[15:54] *** sourceable6 left
[15:54] *** benchable6 left
[15:54] *** bloatable6 left
[15:54] *** releasable6 left
[15:54] *** bisectable6 left
[15:54] *** committable6 left
[15:54] <librasteve_> I, also, love cro templates (so much that I added fragment support to them back in December) … they are the gold standard in terms of usability and syntax for templates (and there is even good syntax highlighting in the IntelliJ raku plugin v2) then I got into HTMX and I implemented the HTMX examples in Cro templates https://github.com/librasteve/raku-HTMX-Examples … then I got kinda frustrated since I had forgotten how mind 

[15:54] <librasteve_> numbing and restrictive coding a website in a template language can be and I missed all the cool stuff I could do with a full language and since I had been listening to some podcasts about elmlang, I realsed that the functional ness of raku is a fantastic way to bring HTML tags right into raku (my favourite coding medium) … this is the way

[15:54] <liztormato> Xliff: re CHECK time access. Probably a dynvar such as $*CU

[15:55] <SmokeMachine> Would that make sense to use Cromponents once it already uses Cro templates?

[15:56] *** coverable6 joined
[15:56] *** bloatable6 joined
[15:56] *** bloatable6 left
[15:56] *** coverable6 left
[15:57] <librasteve_> liztormato … good idea … I will make a prototype of a new design and share around for feedback … 6.e is due to release at Easter, right?

[15:58] <SmokeMachine> Xliff: what kind of limitations you see on Cro templates?

[15:59] *** liztormato left
[15:59] *** nativecallable6 joined
[15:59] *** committable6 joined
[15:59] *** sourceable6 joined
[16:00] *** greppable6 joined
[16:00] *** quotable6 joined
[16:00] *** evalable6 joined
[16:00] *** bisectable6 joined
[16:00] *** tellable6 joined
[16:00] *** coverable6 joined
[16:00] *** unicodable6 joined
[16:00] *** releasable6 joined
[16:01] *** bloatable6 joined
[16:01] *** shareable6 joined
[16:01] *** linkable6 joined
[16:01] *** notable6 joined
[16:01] *** benchable6 joined
[16:02] *** yewscion_ left
[16:03] <librasteve_> Xliff: the great thing about HTMX is that all the coding can be done in the back end (yes even for dynamic UX) … I have taken a lot of inspiration from the HTMX essays - I recommend htmx sucks first, then locality of behaviour and complexity budget are my favourites https://htmx.org/essays/#complexity-very-very-bad

[16:04] <Xliff> SmokeMachine: Ability to set constants. This is deliberate according to jnthn. Minor shortcomings to expression logic. LTA handing of objects that are not defined (particularly, if a template tries to evaluate Nil, it will crash the route

[16:04] *** yewscion_ joined
[16:05] <Xliff> librasteve: And yes, this is the way! :)

[16:05] <Xliff> liztomato: OK, so $*CU hasn't been implemented, yet?

[16:05] <SmokeMachine> Xliff: it does not fix that, but have you tried Cromponent?

[16:06] <Xliff> SmokeMachine: How could Air not support that? It's Raku!?

[16:06] <Xliff> SmokeMachine: No. I have not tried that yet. Link?

[16:06] <SmokeMachine> $*CU is implemented (I’m searching for my example using it) but it only exists índice a CHECK block

[16:07] <Xliff> Ah. OK.

[16:07] <Xliff> Can you modify $*CU at CHECK time?

[16:08] <SmokeMachine> Xliff: https://github.com/FCO/Cromponent

[16:08] <SmokeMachine> Yes, you can… I’m still searching my test/example

[16:08] *** yewscion_ left
[16:09] <Xliff> Dynamic variable $*CU not found

[16:10] *** Altai-man joined
[16:10] *** sena_kun left
[16:10] <Xliff> SmokeMachine: Huh! Looks interesting. I'll give it a spin and see if I can use it. Thanks!

[16:10] <SmokeMachine> Xliff: you need to set RAKUDO_RAKUAST=1 if I remember it well...

[16:11] <librasteve_> forgive me - what is it that Air does not support?

[16:11] <Xliff> Ah, THAT'S what I'm missing.

[16:11] <Xliff> Not Air. Cro templates.

[16:11] <librasteve_> phew

[16:12] *** yewscion_ joined
[16:14] *** Altai-man left
[16:16] *** sena_kun joined
[16:16] *** yewscion_ left
[16:17] *** yewscion_ joined
[16:22] *** yewscion_ left
[16:24] <SmokeMachine> Xliff: I finally found it: https://github.com/FCO/ACME-Overreact

[16:24] <Xliff> Thanks!

[16:25] <SmokeMachine> https://github.com/FCO/Acme-Overreact/blob/main/lib/Acme/Overreact.rakumod

[16:26] *** LainExperiments joined
[16:31] <SmokeMachine> That was one of my first tests to see if it would be possible to use RakuAST on Red…

[16:37] <grondilu> wasn't there a syntax for read-only variables?

[16:38] <grondilu> m: my $x is ro = pi

[16:38] <camelia> rakudo-moar 727b7281a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Can't use unknown trait 'is' -> 'ro' in  variable declaration.␤at <tmp>:1␤------> my $x is ro<HERE> = pi␤    expecting any of:␤        TypeObject␤        default␤        dynamic␤        export␤»

[16:38] <grondilu> sigilless variables won't do, as they'd bind to the variable, right?

[16:38] <grondilu> m: my $x = pi; my \var = $x; $x = 3; var

[16:38] <camelia> rakudo-moar 727b7281a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of var symbol in sink context (line 1)␤»

[16:39] <grondilu> m: my $x = pi; my \var = $x; $x = 3; say var

[16:39] <camelia> rakudo-moar 727b7281a: OUTPUT: «3␤»

[16:44] *** benchable6 left
[16:44] *** unicodable6 left
[16:44] *** bloatable6 left
[16:44] *** bisectable6 left
[16:44] *** evalable6 left
[16:44] *** greppable6 left
[16:44] *** releasable6 left
[16:44] *** quotable6 left
[16:44] *** tellable6 left
[16:44] *** notable6 left
[16:44] *** sourceable6 left
[16:44] *** linkable6 left
[16:44] *** nativecallable6 left
[16:44] *** committable6 left
[16:44] *** coverable6 left
[16:44] *** shareable6 left
[16:47] *** bloatable6 joined
[16:47] *** greppable6 joined
[16:47] *** bisectable6 joined
[16:47] *** unicodable6 joined
[16:48] *** notable6 joined
[16:48] *** evalable6 joined
[16:48] *** nativecallable6 joined
[16:48] *** linkable6 joined
[16:48] *** benchable6 joined
[16:48] *** releasable6 joined
[16:48] *** tellable6 joined
[16:48] *** coverable6 joined
[16:49] *** quotable6 joined
[16:49] *** shareable6 joined
[16:49] *** sourceable6 joined
[16:49] *** committable6 joined
[16:55] *** LainExperiments left
[17:00] <SmokeMachine> also, I was thinking... I don't know how macros are going... but I think that another way of solving the Red AST replacing would be if we could not only define macros that would be called like `macro($par1, $par2)` but also `$par1.macro($par2)` that way, Red could define a `map` macro for example that would do: `$par1.map: &par2, :raku-ast(&par2.ast)`

[17:02] <SmokeMachine> m: my $x = pi; my \var = $x<>; $x = 3; say var

[17:02] <camelia> rakudo-moar 727b7281a: OUTPUT: «3.141592653589793␤»

[17:02] <SmokeMachine> grondilu: ^^

[17:04] <SmokeMachine> when you do `my \var = $x` you are setting the container to `var`, if you remove it from the container, it will work the way I think you want...

[17:05] *** jpn left
[17:09] <SmokeMachine>  m: my $x = pi; given $x -> $var is copy { say $var; $x = 3; say $var }

[17:09] <camelia> rakudo-moar 727b7281a: OUTPUT: «3.141592653589793␤3.141592653589793␤»

[17:13] <lizmat> Xliff:  try: RAKUDO_RAKUAST=1 raku -e 'CHECK say $*CU; say "hello world"'

[17:16] *** jmcgnh left
[17:16] <Xliff> lizmat: Got it. Now I want to see if I can make it easier to obtain just the AST for methods rather than having to introspect the entire compunit.

[17:17] *** jmcgnh joined
[17:17] <lizmat> grep is your friend:   CHECK .say for $*CU.grep(RakuAST::StrLiteral); say "hello world"

[17:18] <grondilu> SmokeMachine: what does $x<> mean?

[17:18] <lizmat> $x deconted

[17:18] <Xliff> lizmat: Yeah? Try doing that to a full compunit with a few classes that contain a dozen methods apiece!

[17:19] <lizmat> so how would you select them then?

[17:19] <SmokeMachine> Xliff: Maybe this could help: https://github.com/FCO/ASTQuery

[17:20] <lizmat> or that  :-)

[17:20] <Xliff> Hmmm... $*CU.grep( RakuAST::Method ) actually works a treat.

[17:20] <lizmat> SmokeMachine++   slipped my mind

[17:20] <Xliff> FCO: Are you finished with that project or is there a future roadmap?

[17:21] * grondilu sees the so-called decont operator in the docs.  Assumes it's fairly new because he doesn't remember it at all.

[17:21] <Xliff> nqp::decont has been around for a while

[17:21] <SmokeMachine> Xliff: not finished, still working on that… when possible…

[17:22] <lizmat> grondilu: actually, <> is the zen slice.   and the zen slice will return its invocant decontainerized

[17:22] <lizmat> as all code blocks do, unless they have an "is raw"  :-)

[17:23] *** coverable6 left
[17:23] *** shareable6 left
[17:23] *** nativecallable6 left
[17:23] *** committable6 left
[17:23] *** greppable6 left
[17:23] *** notable6 left
[17:23] *** bisectable6 left
[17:23] *** linkable6 left
[17:23] *** quotable6 left
[17:23] *** unicodable6 left
[17:23] *** tellable6 left
[17:23] *** bloatable6 left
[17:23] *** releasable6 left
[17:23] *** benchable6 left
[17:23] *** evalable6 left
[17:23] *** sourceable6 left
[17:24] <grondilu> Oh, I see.  I was wondering if that notation would interfere with postfix:<> for hashes.

[17:24] <lizmat> it doesn't: it's the same thing  :-)

[17:24] <grondilu> I wonder if $$x would do the same

[17:24] <grondilu> m: my $x = pi; my \var = $$x; $x = 3; say var

[17:24] <camelia> rakudo-moar 727b7281a: OUTPUT: «3␤»

[17:24] <grondilu> nope

[17:25] *** coverable6 joined
[17:25] <lizmat> itemization makes sure that it only itemizes deconted value

[17:25] <lizmat> s

[17:26] <lizmat> m: my $x = 42;   say $x =:= $$$$$x

[17:26] *** greppable6 joined
[17:26] <camelia> rakudo-moar 727b7281a: OUTPUT: «True␤»

[17:26] *** linkable6 joined
[17:26] *** benchable6 joined
[17:26] <lizmat> it actually doesn't re-containerize

[17:26] *** nativecallable6 joined
[17:26] *** evalable6 joined
[17:26] *** tellable6 joined
[17:26] *** unicodable6 joined
[17:27] <grondilu> FYI I have just finished translating chess.js into raku.  It's seems to work, it's much faster than my previous code, but still much slower than javascript.

[17:27] *** releasable6 joined
[17:27] *** shareable6 joined
[17:27] <lizmat> grondilu: cool!  

[17:27] *** committable6 joined
[17:27] <grondilu> lots of room for optimization, though.  native types and so on.

[17:27] <lizmat> blog post ?

[17:27] *** quotable6 joined
[17:27] *** notable6 joined
[17:27] *** shareable6 left
[17:27] *** releasable6 left
[17:27] *** coverable6 left
[17:27] *** nativecallable6 left
[17:27] *** committable6 left
[17:27] *** benchable6 left
[17:27] *** notable6 left
[17:27] *** quotable6 left
[17:27] *** evalable6 left
[17:27] *** tellable6 left
[17:27] *** linkable6 left
[17:27] *** unicodable6 left
[17:27] *** greppable6 left
[17:27] * grondilu is not really a blog guy

[17:28] <grondilu> anyone can feel free to check out my repo, though : https://github.com/grondilu/chess

[17:30] <grondilu> I think all programming language should have a chess engine for performance tests.  IMHO.

[17:30] *** greppable6 joined
[17:30] *** quotable6 joined
[17:30] *** bisectable6 joined
[17:30] <[Coke]> grondilu: I think the example is slightly better with -I. instead of -Ilib

[17:31] *** nativecallable6 joined
[17:31] *** releasable6 joined
[17:31] <[Coke]> or, if someone is installing it, without the -I

[17:31] *** evalable6 joined
[17:31] *** committable6 joined
[17:31] *** sourceable6 joined
[17:31] <[Coke]> grondilu++

[17:31] *** linkable6 joined
[17:31] <[Coke]> didn't realize it had a gui. :)

[17:31] *** coverable6 joined
[17:32] <grondilu> it's not a GUI lol

[17:32] *** bloatable6 joined
[17:32] *** shareable6 joined
[17:32] *** benchable6 joined
[17:32] *** unicodable6 joined
[17:32] *** tellable6 joined
[17:33] *** notable6 joined
[17:34] *** jmcgnh left
[17:35] *** greppable6 left
[17:35] *** releasable6 left
[17:35] *** notable6 left
[17:35] *** unicodable6 left
[17:35] *** linkable6 left
[17:35] *** coverable6 left
[17:35] *** committable6 left
[17:35] *** evalable6 left
[17:35] *** benchable6 left
[17:35] *** bloatable6 left
[17:35] *** nativecallable6 left
[17:35] *** bisectable6 left
[17:35] *** tellable6 left
[17:35] *** shareable6 left
[17:35] *** sourceable6 left
[17:35] *** quotable6 left
[17:36] *** jmcgnh joined
[17:38] *** greppable6 joined
[17:38] *** releasable6 joined
[17:38] *** unicodable6 joined
[17:38] *** coverable6 joined
[17:39] *** committable6 joined
[17:39] <[Coke]> er, ui. :)

[17:39] *** evalable6 joined
[17:39] *** shareable6 joined
[17:40] *** quotable6 joined
[17:40] *** notable6 joined
[17:40] *** nativecallable6 joined
[17:40] *** linkable6 joined
[17:40] *** benchable6 joined
[17:41] *** bloatable6 joined
[17:41] *** sourceable6 joined
[17:41] *** bisectable6 joined
[17:41] *** sourceable6 left
[17:41] *** nativecallable6 left
[17:41] *** bloatable6 left
[17:41] *** benchable6 left
[17:41] *** quotable6 left
[17:41] *** evalable6 left
[17:41] *** coverable6 left
[17:41] *** greppable6 left
[17:41] *** bisectable6 left
[17:41] *** committable6 left
[17:41] *** notable6 left
[17:41] *** shareable6 left
[17:41] *** unicodable6 left
[17:41] *** linkable6 left
[17:41] *** releasable6 left
[17:42] <grondilu> in chess.js there is a perft method, with depth as argument.  I translated it to raku too.

[17:42] <grondilu> in javascript perft(4) takes about 100ms.  Guess how long it takes in raku.

[17:42] <SmokeMachine> Xliff: did you look at ASTQuery?

[17:44] *** coverable6 joined
[17:44] *** evalable6 joined
[17:44] *** shareable6 joined
[17:44] *** bisectable6 joined
[17:44] *** benchable6 joined
[17:45] *** tellable6 joined
[17:45] *** releasable6 joined
[17:45] *** notable6 joined
[17:45] *** quotable6 joined
[17:45] *** linkable6 joined
[17:46] <discord-raku-bot> <librasteve> 100s?

[17:46] *** greppable6 joined
[17:46] *** committable6 joined
[17:46] *** unicodable6 joined
[17:46] *** nativecallable6 joined
[17:46] *** bloatable6 joined
[17:46] *** sourceable6 joined
[17:47] <grondilu> less

[17:47] <discord-raku-bot> <librasteve> btw if its faster than raku, than alone is worthy of a blog

[17:47] <discord-raku-bot> <librasteve> less than 100s or 100ms?

[17:47] <discord-raku-bot> <nahita3882> π seconds

[17:48] <grondilu> less than 100s

[17:49] <discord-raku-bot> <librasteve> m: say e ** (i * π), 's';

[17:49] <evalable6> librasteve, rakudo-moar 921be1d83: OUTPUT: «-1+1.2246467991473532e-16is␤»

[17:49] <discord-raku-bot> <Raku eval>  -1+1.2246467991473532e-16is 

[17:49] <grondilu> anyway it's 37s against 122ms.  It's not too bad for a first draft, and a straightforward code translation with zero optimizations.

[17:50] <grondilu> it's much better than my own implementation anyway, which was ridiculously slow. 

[17:52] <Xliff> SmokeMachine: I remember when you started working on it! 

[17:53] <Xliff> SmokeMachine: Are you finished with it or is it still under development?

[17:57] *** El_Che left
[17:57] <SmokeMachine> Still under development… but it can already be useful…

[17:57] <grondilu> it's not finished, of course.  There are so many things to implement.

[17:58] *** El_Che joined
[17:59] <grondilu> I should add entries in the TODO, though.

[18:00] <grondilu> one of the most ambitious goal would be a fully-fledge, uci-capable chess engine.

[18:00] <grondilu> (https://www.chessprogramming.org/UCI)

[18:00] <grondilu> maybe a GUI one day?

[18:02] <grondilu> though I think if I could display the board and animate the moves in the terminal with Kitty's protocol, that'd be already pretty cool.

[18:03] <Xliff> Kitty?

[18:03] <Xliff> Is there a working Kitty for Linux?

[18:04] <grondilu> https://sw.kovidgoyal.net/kitty/

[18:37] *** jpn joined
[18:38] *** jpn left
[18:56] <discord-raku-bot> <holmdunc> https://github.com/vushu/raylib-raku would be good for making real graphical chess

[19:13] *** leah2 left
[19:26] *** leah2 joined
[19:32] *** bazzrrr0 joined
[19:37] *** silug left
[19:39] *** silug joined
[19:43] <discord-raku-bot> <antononcube> Hm... "Graphviz::DOT::Chessboard" is (most likely) much more convenient to use.

[19:44] <discord-raku-bot> <antononcube> It produces SVG images.

[19:45] <discord-raku-bot> <melezhik.> .tell librasteve: I look at https://github.com/librasteve/Air/tree/main/t and just for fun I am thinking to implement those one by using sparrow task checks . It’ll be interesting to compare . In the end of the day air generates a lot of html code which is essential to test … just a though 🤔

[19:45] <tellable6> melezhik., I'll pass your message to librasteve

[19:45] <discord-raku-bot> <antononcube> Also, "JavaScript::D3" can produce D3.js code of chess positions.

[19:47] <discord-raku-bot> <antononcube> The ability to make a chess-GUI with Raku is demonstrated here: https://www.youtube.com/watch?v=fwQrQyWC7R0

[19:58] *** yewscion_ joined
[20:05] *** librasteve_ left
[20:10] *** yewscion__ joined
[20:10] *** yewscion_ left
[20:26] <discord-raku-bot> <librasteve> melezhik: please do - but i am worried about the ease of installing the Air deps since I’m struggling on macOS with DBIish on pq with 2025.02

[20:26] <tellable6> librasteve, I'll pass your message to melezhik

[20:31] <Xliff> How can I get raku to run a command in the background and exit?

[20:31] <Xliff> (effectively daemonizing said program)

[20:33] <discord-raku-bot> <librasteve> Proc::Async maybe?

[20:33] <tellable6> hey librasteve, you have a message: https://gist.github.com/3624428b1f78b4fa660f348ce77c1685

[20:34] <discord-raku-bot> <librasteve> https://docs.raku.org/type/Proc::Async

[20:56] <[Coke]> I don't think you can daemonize it, but you could use proc::async, then have your code wait until it completes then exit

[20:57] * [Coke] googles and finds https://raku-knowledge-base.podlite.org/mods/all/UNIX::Daemonize/README.md - wtf is this?

[20:58] <[Coke]> ah, it's https://github.com/hipek8/p6-UNIX-Daemonize

[21:03] <ugexe> lol 

[21:03] <ugexe> it is using fork()?

[21:04] <ugexe> yeah no one should be using https://github.com/hipek8/p6-UNIX-Daemonize

[21:06] *** wayland left
[21:06] *** wayland joined
[21:07] <ugexe> we do not support forking in raku (even if there is a nqp::fork()), since moarvm itself cannot support forking past a certain point in the startup

[21:10] <[Coke]> Yah, it's only there, not published.

[21:27] <jdv> iirc brrt put real work into that

[21:37] *** apac joined
[21:39] *** Aedil left
[21:42] <Xliff> Could I use nohup and background that?

[21:44] <discord-raku-bot> <antononcube> @.xliff

[21:45] <discord-raku-bot> <antononcube> @.xliff See here:

[21:45] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/633753286209699870/1354209640136577184/Screenshot_2025-03-25_at_5.45.13_PM.png?ex=67e47582&is=67e32402&hm=a83217e9f6ab1a8c8e7d489a2a710f90d6a5586ec3b80fd94f7818b369e6dc3d&

[21:46] *** human_blip left
[21:48] *** human_blip joined
[21:52] <Xliff> antoncube: What model is that?

[22:10] <discord-raku-bot> <antononcube> OpenAI's "gpt-4o" with the prompt "CodeWriterX".

[22:11] <discord-raku-bot> <antononcube> See that prompt here : https://github.com/antononcube/Raku-LLM-Prompts/blob/b0fe51bdbc8ee78151d2cba7c11422c047ba0cf5/resources/prompts.json#L10658

[22:13] <discord-raku-bot> <antononcube> Actually, it might not be clear that the screenshot is of Raku chatbook, not the web interface of a certain LLM provider service.

[22:22] *** oodani left
[22:23] <ugexe> jdv: into nqp::fork yes, and the way it was used was within the early startup contain i mentioned earlier. early startup being before libuv initialization or some such

[22:23] *** oodani joined
[22:23] <ugexe> s/contain/constraint/

[22:24] *** Sgeo joined
[22:39] *** jargan joined
[22:39] *** jast left
[23:11] *** lichtkind left
[23:17] *** apac left
[23:17] *** sena_kun left
[23:26] *** ACfromTX left
[23:27] *** bdju left
[23:40] *** ACfromTX joined
[23:44] *** bdju joined
[23:47] *** bazzrrr0 left
