[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:10] *** holly left
[00:31] *** vrurg joined
[01:21] *** ecocode_ left
[01:35] *** frost joined
[01:48] *** kevin1 left
[01:58] *** dogbert11 joined
[01:59] *** kevin1 joined
[02:00] *** kevin1 is now known as kjp

[02:08] *** dogbert11 left
[02:08] *** dogbert11 joined
[03:08] *** linkable6 left
[03:08] *** evalable6 left
[03:08] *** releasable6 joined
[04:08] *** tellable6 left
[04:08] *** committable6 left
[04:08] *** greppable6 left
[04:08] *** reportable6 left
[04:08] *** shareable6 left
[04:08] *** nativecallable6 left
[04:08] *** coverable6 left
[04:08] *** benchable6 left
[04:08] *** releasable6 left
[04:08] *** squashable6 left
[04:08] *** quotable6 left
[04:08] *** notable6 left
[04:08] *** sourceable6 left
[04:08] *** statisfiable6 left
[04:08] *** bloatable6 left
[04:08] *** bisectable6 left
[04:08] *** nativecallable6 joined
[04:08] *** evalable6 joined
[04:09] *** shareable6 joined
[04:09] *** committable6 joined
[04:09] *** coverable6 joined
[04:09] *** benchable6 joined
[04:10] *** statisfiable6 joined
[04:10] *** releasable6 joined
[04:10] *** squashable6 joined
[04:10] *** tellable6 joined
[04:10] *** reportable6 joined
[04:11] *** quotable6 joined
[04:11] *** notable6 joined
[04:16] *** guifa joined
[04:16] <guifa> Is there any way during composition to reference the package that the object is being composed in?

[04:18] <guifa> I can *almost* do it by using method compose(\foo) { say foo.^name }, but that gives me a string reference, but I can't resolve that name into a reference 

[04:22] *** unicodable6 joined
[04:23] *** Jimav joined
[04:24] <Jimav> Hi, Does Raku have "version objects" like were description in P6 snopsis (forgot which)?  I see "class version" but the class description does not say anything about how alpha and numeric components are handled.

[04:25] <Jimav> The old P6 versions, I think, treated alphabetic terms as higher than any numeric term

[04:25] <Jimav> Just looking for documentation.

[04:28] <guifa> That's correct: alphabetic terms are higher.  I don't think it's documented since (I reckon) it's assumed folks won't mix them too often

[04:31] <guifa> err

[04:31] <guifa> Backwards, alphabetics are lower, explicitly, per Rakudo src

[04:32] <guifa> https://github.com/rakudo/rakudo/blob/4183cdaf37c842fb74eb5a08c2cf12075d4c55ec/src/core.c/Version.pm6#L249 

[04:32] <Jimav> There used to be a fairly thorough description of "version literals" but I could not find it now searching the doc

[04:34] <Jimav> The "mixing" is when e.g. v1.2alpha and v1.2 are compared.  In P6 (at least, probably still true in Raku) this was split into 1/2/0 and 1/2/alpha (the '0' being the default for missing terms) and the 'alpha' sorted first, so 1.2alpha would be before the "final release" 1.2

[04:36] <Jimav> If alphabetics sort lower than numbers, then 1.2alpha would be treated as more-recent than 1.2

[04:40] <Jimav> wrong, I got that backwards

[04:41] <guifa> The splitting (between the digits and alphas) is still true.

[04:41] <guifa> Basically, the regex /:r '*' || \d+ || <.alpha>+/ is used

[04:41] <Jimav> "alpha" < 0 is correct, and what the nqp code guifa linked to does (so the alpha release comes first)

[04:43] <Jimav> Ok, thanks.   What I really was looking for was documentation I could link to which describes versions, because I maintain a Perl 5 module which purports to do P6 version sorting.

[04:46] <guifa> Ah.  I can't think of any document that goes beyond either the description in docs.raku.org for Versions, the source code, and the roast at https://github.com/Raku/roast/blob/dffc2a4cec4a1b91a14289a88cead3ceecd5f5b4/S02-literals/version.t

[04:47] <guifa> We should probably boost the documentation on that to make things a bit clearer

[04:49] * guifa also realized that the roast doesn't have any non-numerics in there, that should probably get fixed too

[04:50] <Jimav> Well, thanks for the clarifications.   Best wishes.

[04:51] <guifa> I believe the idea to auto break between digits and alpha was to allow,e.g., use v6c and use v6d

[04:54] <guifa> There are a few more tests here: https://github.com/Raku/roast/blob/dffc2a4cec4a1b91a14289a88cead3ceecd5f5b4/S02-types/version.t (specifically revolving around the examples in synopsis 2, which as you note, states alphabetics before numerics).  Hope that those can be of help

[04:54] <Jimav> I found the old P6 Synopsis 2 here: https://design.raku.org/S02.html#Version_literals

[04:55] <Jimav> "each sorting position sorts numerically between numbers, alphabetically between alphas, and alphabetics in a position before numerics. "   so it looks like it was implemented the other way

[04:55] <Jimav> umph, scratch that comment

[04:59] <Jimav> I'm going to link to that.

[04:59] *** Jimav left
[05:00] <guifa> TIL the original point of :sym<…>

[05:01] <guifa> https://design.raku.org/S02.html#Grammatical_Categories !

[05:01] <guifa> I always wondered why :sym<…> was so important that it ended up getting reserved

[05:07] *** tellable6 left
[05:07] *** reportable6 left
[05:07] *** nativecallable6 left
[05:07] *** squashable6 left
[05:07] *** releasable6 left
[05:07] *** statisfiable6 left
[05:07] *** coverable6 left
[05:07] *** committable6 left
[05:07] *** shareable6 left
[05:07] *** evalable6 left
[05:09] *** Doc_Holliwood left
[06:01] *** xinming joined
[06:04] *** reportable6 joined
[06:04] *** Doc_Holliwood joined
[06:09] *** nativecallable6 joined
[06:09] *** linkable6 joined
[06:10] *** greppable6 joined
[06:10] *** statisfiable6 joined
[06:12] *** xinming left
[06:13] *** xinming joined
[06:24] *** frost left
[06:26] *** stoned75 left
[06:32] *** abraxxa joined
[06:36] *** frost joined
[06:37] *** abraxxa left
[06:37] *** abraxxa joined
[06:54] <tyil> does anyone know who set up the #raku:matrix.org room?

[06:58] *** dolmen joined
[07:04] *** bloatable6 joined
[07:10] *** committable6 joined
[07:11] *** evalable6 joined
[07:11] *** coverable6 joined
[07:12] *** tellable6 joined
[07:26] *** Doc_Holliwood left
[07:38] *** p6steve joined
[07:40] *** Altai-man_ joined
[07:53] *** frost left
[07:58] <CIAvash> That room doesn't seem to exist?

[08:11] *** shareable6 joined
[08:12] *** releasable6 joined
[08:12] *** Sgeo left
[08:14] *** bisectable6 joined
[08:22] *** morayj joined
[08:32] *** dolmen left
[08:34] *** ufobat joined
[08:34] *** dolmen joined
[08:36] *** frost joined
[08:36] *** frost left
[08:36] *** frost joined
[08:39] *** frost left
[08:39] *** frost joined
[08:39] *** frost left
[08:40] *** frost joined
[09:01] <ecocode> lizmat: I once was an Apple addict too ;)

[09:04] *** morayj left
[09:13] <El_Che> hi ecocode 

[09:14] <ecocode> El_Che: hello

[09:16] *** sono left
[09:17] *** Altai-man_ left
[09:19] <tyil> CIAvash: it still exists according to my client, but I can't join it becuase it's invite only, which is possible fallout from the freenode staff tryign to screw everyone over

[09:25] * CIAvash uploaded an image: (33KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/DtgWCrSnifKOSeFHMlBQExWT/2021-05-31_13-54.png >

[09:25] <tyil> huh

[09:26] <tyil> oh youre right, CIAvash, it's #freenode_#raku:matrix.org for me

[09:26] <tyil> I'm being dumb :<

[09:28] <CIAvash> yeah, new room is `#raku:libera.chat`

[09:34] *** dolmen left
[09:37] *** dolmen joined
[09:39] <CIAvash> Also for matrix users who are not aware, new appservice and NickServ rooms for libera.chat are @appservice:libera.chat and @NickServ:libera.chat

[09:40] *** tyil[m] joined
[09:52] *** stoned75 joined
[09:53] *** dolmen left
[10:02] *** stoned75 left
[10:03] *** dolmen joined
[10:03] <CIAvash> I created a Space(new & beta Matrix feature which will replace the Community feature), you should be able to join here: https://matrix.to/#/!afXnlmOXFxaJtpbVIR:matrix.org?via=matrix.org

[10:04] *** ComplYue[m] joined
[10:17] <p6steve> ecocode: feels good to de-Intel

[10:24] <frost> m: given 3|4 { when 3 {say "yes"} }

[10:24] <camelia> rakudo-moar 4183cdaf3: ( no output )

[10:24] <frost> m: given 3 { when 3|4 {say "yes"} }

[10:24] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «yes␤»

[10:25] <frost> m: say 1 ~~ 1|2, ' ', 1|2, ~~ 1

[10:25] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> 3say 1 ~~ 1|2, ' ', 1|2, ~~7⏏5 1␤»

[10:25] <frost> m: say 1 ~~ 1|2, ' ', 1|2 ~~ 1

[10:25] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «True True␤»

[10:31] *** ufobat left
[10:36] *** squashable6 joined
[10:45] *** dolmen left
[10:49] *** linkable6 left
[11:05] *** dakkar joined
[11:08] *** p6steve left
[11:13] *** sourceable6 joined
[11:22] *** p6steve joined
[11:29] *** Doc_Holliwood joined
[11:32] *** morayj joined
[11:34] *** morayj left
[11:47] *** dolmen joined
[11:52] <Doc_Holliwood> how do i elegantly remove only the first thing matching a condition from a list of things?

[11:52] <Doc_Holliwood> without using a variable if possible

[11:52] <Doc_Holliwood> grep with side effect is just ugly

[12:03] *** reportable6 left
[12:11] <dakkar> Doc_Holliwood: lists are immutable… do you mean array?

[12:13] <dakkar> m: my @a=(1..10);.splice(.first(*>4),1) with @a;say @a

[12:13] <camelia> rakudo-moar f83e55116: OUTPUT: «[1 2 3 4 5 7 8 9 10]␤»

[12:14] <dakkar> m: my @a=('a'..'z');.splice(.first(* gt 'f',:k),1) with @a;say @a

[12:14] <camelia> rakudo-moar f83e55116: OUTPUT: «[a b c d e f h i j k l m n o p q r s t u v w x y z]␤»

[12:14] <dakkar> Doc_Holliwood: something like that?

[12:15] *** ufobat joined
[12:16] <dakkar> `.splice` does the removal, `.first(&matcher, :k)` returs the first *index* (instead of the first element)

[12:17] <Doc_Holliwood> more like <a b c a d b a x x> to <a c a d b a x x>

[12:17] <Doc_Holliwood> (only the first "b" to be removed

[12:21] <lizmat> Doc_Holliwood: fwiw, I have recently been thinking of adding a :not named arg to .grep

[12:21] <lizmat> ah, but that wouldn't help because you only want to remove the first

[12:25] <Doc_Holliwood> lizmat: A callable for skip?

[12:26] <lizmat> ah, hmmm...

[12:26] <lizmat> intriguing

[12:26] <Doc_Holliwood> like <a b c a d b a x x>.skip(* eq 'b', 1) 

[12:27] <dakkar> m: my @a=<a b c a d b a x x>;.splice(.first(* eq 'b',:k),1) with @a;say @a

[12:27] <camelia> rakudo-moar f83e55116: OUTPUT: «[a c a d b a x x]␤»

[12:27] <dakkar> if you want it in place, of course

[12:30] <lizmat> m: dd <a b c d e f>.skip(*-4)   # skip(Callable) is already used

[12:30] <camelia> rakudo-moar f83e55116: OUTPUT: «("c", "d", "e", "f").Seq␤»

[12:31] *** dogbert11 left
[12:32] *** dogbert11 joined
[12:32] <Doc_Holliwood> <a b c a d b a b x b x>.skip( where => * eq 'b', at => 2..* ) # <a b c a d b a x x>

[12:33] <Doc_Holliwood> named args =)

[12:34] *** dogbert11 left
[12:34] *** dogbert11 joined
[12:37] <Doc_Holliwood> m: dd <a b c a d b a b x b x> (-) <a a>

[12:37] <camelia> rakudo-moar f83e55116: OUTPUT: «Set.new("b","d","c","x")␤»

[12:38] <Doc_Holliwood> darn

[12:41] <lizmat> m: dd <a b c a d b a b x b x>.grep: { $_ ne "b" || $++ }

[12:41] <camelia> rakudo-moar f83e55116: OUTPUT: «("a", "c", "a", "d", "b", "a", "b", "x", "b", "x").Seq␤»

[12:41] <lizmat> Doc_Holliwood ^^

[12:42] <Doc_Holliwood> cheating

[12:45] <jast> it's only cheating if someone else does it!

[12:45] <lizmat> <a b c a d b a b x b x>.skip( where => * eq 'b', :1st )

[12:47] <Doc_Holliwood> m: my @N = 4, 4, 1, 7, 6; my @n = sort @N; say join '', reverse flat @n.splice( @n.first({ $_ == (state $ = @N.grep(* %% 2).min) }, :k ), 1 ), @n

[12:47] <camelia> rakudo-moar f83e55116: OUTPUT: «76414␤»

[12:54] <Doc_Holliwood> m: my @N = 2,7,1,5,6; @N .= sort; say join '', reverse flat @N.splice( @N.first({ $_ == (state $ = @N.grep(* %% 2).min) }, :k ), 1 ), @N

[12:54] <camelia> rakudo-moar f83e55116: OUTPUT: «76512␤»

[13:22] *** dolmen left
[13:26] *** dolmen joined
[13:55] *** morayj joined
[13:59] *** morayj left
[14:08] *** linkable6 joined
[14:19] *** Doc_Holliwould joined
[14:19] *** Doc_Holliwood left
[14:26] *** kevin1 joined
[14:27] *** kjp left
[14:29] *** tyil[m] left
[14:31] *** vodkra left
[14:31] *** juanfra left
[14:31] *** xinming left
[14:32] *** vodkra joined
[14:32] *** xinming joined
[14:32] *** ufobat left
[14:36] *** Doc_Holliwould left
[14:38] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/05/31/2021-22-under-the-bus/

[14:39] <raydiak> lizmat++

[14:41] *** frost left
[14:41] *** abraxxa left
[14:41] *** guifa left
[14:43] *** Doc_Holliwood joined
[14:46] *** tyil[m] joined
[14:49] *** abraxxa joined
[14:49] *** guifa joined
[14:52] *** Shaeto joined
[15:03] <Shaeto> can't find official confirmation of @$x in the raku docs :)

[15:04] <Shaeto> m: my $x = (1,2,3); say "$_" for @$x;

[15:04] <camelia> rakudo-moar f83e55116: OUTPUT: «1␤2␤3␤»

[15:06] *** juanfra joined
[15:10] *** quipa joined
[15:16] *** Shaeto left
[15:23] *** Shaeto joined
[15:35] <quipa> Hello! I'm thinking of developing a gui desktop app using Raku using JVM as target and gui api/library, does anyone know of a tutorial or project using such an approach?

[15:35] *** dolmen left
[15:36] <moon-child> quipa: I do not

[15:36] <moon-child> it would probably function as a good stresstest of the jvm target

[15:36] <moon-child> I think most people doing gui in raku have used the gtk bindings

[15:36] <quipa> Yes I've seen the gtk::simple tutorials :), was just wondering if this is a possibility

[15:37] <quipa> since for my use case deploying something in a jar would be simpler

[15:37] <moon-child> can't think of any reason why it wouldn't be possible

[15:38] <quipa> Any bindings I could use to access say swing?

[15:38] <quipa> or any Java api for the matter

[15:40] <quipa> I haven't got a clue how rakudo works with JVM, but after trying to develop with a couple other JVM languages, I really wish I could do it in Raku

[15:41] <quipa> but JVM really is a convenient platform

[15:50] *** dolmen joined
[15:50] *** Shaeto left
[15:51] *** Shaeto joined
[15:52] <guifa> oh yay, people around now.  anyone know a way to grab the parent package during composition (e.g. a reference to the outer class during an inner class' composition)

[15:52] *** dakkar left
[15:53] <moon-child> guifa: no idea sorry

[15:54] <moon-child> quipa: no bindings afaik.  https://0x0.st/-23L.txt this seems to work, should be enough to get you started

[15:54] <quipa> ah cool

[15:55] <quipa> so you can just access the apis directly?

[15:55] <moon-child> yes

[15:56] <moon-child> jvm has introspection so you don't have to enumerate methods and parameters by hand like you do with c

[15:58] <guifa> oh sweet, Raku.land indexed my modules (top result when I googled it because it's faster normally than clicking through github ha)

[15:58] <quipa> @moo

[15:58] <quipa> moon-child thanks, this is what I needed :)

[15:59] *** Kaiepi left
[16:00] *** Doc_Holliwood left
[16:00] *** Kaiepi joined
[16:07] <raydiak> Shaeto: https://docs.raku.org/type/Any#index-entry-@_list_contextualizer

[16:10] <Shaeto> raydiak: Brevity is the soul of wit :) it is very hard to find, thank you

[16:11] *** holly joined
[16:11] <raydiak> you're welcome :)

[16:11] <holly> here's the start of the prolog (without tree building yet) I mentioned yesterday : http://github.com/zarathemage/zehpyr-prolog

[16:12] <holly> I am going to work some more on it tonight

[16:12] <holly> hi BTW

[16:13] <holly> does not compile yet

[16:14] <holly> machine learning for compilers/interpreters

[16:20] *** jess left
[16:20] <guifa> Altai-man: seems there's a bit more to fixing Fluent.  I've been in the midst of a fairly extensive rewrite, but seeing if I can get a hotfix working in the meantime

[16:20] *** jess joined
[16:20] * guifa is working to separate the srings processing from the localization manager so the latter can work with other formats

[16:21] <Altai-man> guifa, hi! No need to really hurry, it's just something I noticed during latest Blin run. Thanks for putting your time and efforts into those modules.

[16:22] <Altai-man> vrurg++ # for doing the Blin runs when I was unable to for some time

[16:23] <guifa> I kind of figured it might be something like that.  Nonetheless, I don't want someone to try to install and get errors.  Looking back though, it's kind of amazing just how many changes I've made in the intl namespace.  It's like looking at ancient relics or something right now ha

[16:24] <Altai-man> Indeed, that's a lo-ot of work, so you can be proud of yourself. :)

[16:27] <guifa> Oof, and in doing so I found another error in Intl::CLDR

[16:27] <guifa> my META6 generator was including .DS_Store in the required files so errored on install

[16:32] <raydiak> m: class A { class B { say OUTER::<::?PACKAGE> } } # guifa 

[16:32] <camelia> rakudo-moar f83e55116: OUTPUT: «(A)␤»

[16:33] <guifa> raydiak: unfortunately, I'm working inside of the metaobject, so OUTER doesn't work.  But maybe CALLER will 

[16:34] <raydiak> ah. can't help you with the MOP, don't know much about it

[16:34] <guifa> Oof, it was a good idea, but CALLER::<::?PACKAGE> returns Nil

[16:36] <raydiak> do you get anything in CALLER:: ? is this something you can reduce to a one-liner or gist? I'd toy with it as a puzzle if I understood more of what you were doing :)

[16:37] <guifa> CALLER::.keys doesn't get me anything.  Unfortunately golfing this results in three separate files =\

[16:37] <guifa> but basically, I'm trying to find a way to have an inner class report its existance to its outer class

[16:38] <guifa> or rather, to the HOW, at least

[16:38] *** sena_kun left
[16:39] <guifa> See, after the fact, it's easy to do compose(\type) { type.WHO.keys } to get a list of all of the symbols, and loop on those values to detect child classes of a certain type

[16:40] <guifa> Unfortunately, those are unordered (because hashy) and I'm trying to preserve the order (to make a declarative GUI syntax, basically)

[16:44] <raydiak> if you share the three files somewhere I'll play with it for fun and education, but I honestly don't know enough about the meta stuff to help without an example. also I have to go soon, so I might not answer until this afternoon (it's quarter to 10 AM here)

[16:45] <raydiak> though hopefully you'll figure it out or someone else more knowledgable will chime in before that

[16:45] <raydiak> if there's anyone in #raku-dev who isn't here, that might also be a good place to ask

[16:48] *** zacts joined
[16:54] *** quipa left
[16:55] <guifa> raydiak: I'll try to golf it but probably can't do it until later this week.  Altai-man just gave me a bunch of extra work to do today ;-)

[16:55] <guifa> and now my CPU is tied up for the next few hours: https://imgur.com/a/nhEChou 

[16:57] <raydiak> oh fun...reminds me of the old days of watching defrag run

[16:59] <guifa> only about 750 more files to go ha

[17:07] *** zacts left
[17:10] <raydiak> oh right, it's memorial day...guess I don't have anyting to do after all

[17:11] *** patrickb joined
[17:26] *** stoned75 joined
[17:33] *** dolmen left
[17:38] <holly> oh boy, parsing rule substrings :-/

[17:39] <holly> "( of ( and a b ) c)"

[17:53] <holly> s/of/or

[18:04] *** reportable6 joined
[18:06] <Shaeto> m: class a { method x() { say 'yes I can y' if self.can('y') }; method y() { 1 } }; a.new.x; say 'confirm it' if a.^can('yes he can y');

[18:06] <camelia> rakudo-moar f83e55116: OUTPUT: «yes I can y␤»

[18:06] <Shaeto> is self.can just imported metaobject ^can ?

[18:14] *** Shaeto_ joined
[18:16] *** Sgeo joined
[18:17] *** Shaeto left
[18:18] <guifa> yeah, it appears to be so, although it's un(der)documented 

[18:20] <Shaeto_> okay, now main question :)

[18:21] <Shaeto_> m: class a { method x() { say "1" if self.can('y'); say "2" if self.can('!y'); }; method !y() { } }; a.new.x;

[18:21] <camelia> rakudo-moar f83e55116: ( no output )

[18:21] *** Doc_Holliwood joined
[18:22] <Shaeto_> not sure how to "can" for private method

[18:23] <moritz> why would you need to do that?

[18:23] <moritz> presence of private methods is statically known

[18:24] <Shaeto_> for example i am implementing g-code execution machine and i have tens of private method like !G00() ... !G99()

[18:24] <Shaeto_> and i want to check on fly if my current implementation CAN execute this code

[18:25] <moritz> m: class A { method !x() { }; say A.^private_method_table().keys

[18:25] <camelia> rakudo-moar f83e55116: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 { }; say A.^private_method_table().keys7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[18:26] <moritz> m: class A { method !x() { }}; say A.^private_method_table().keys

[18:26] <camelia> rakudo-moar f83e55116: OUTPUT: «(x)␤»

[18:26] <moritz> Shaeto_: you could use that

[18:26] <Shaeto_> not so elegant as *can* but .. okay

[18:27] <moritz> not as often used either :D

[18:28] <Shaeto_> in c++ i just add config hash but i am in p6 :)

[18:28] <moritz> you know, raku also has hashes :D

[18:30] <guifa> I suppose there's a way you could wrap the ClassHOW can to include the private_method_table, but that has potential side effects

[18:31] *** abraxxa-home joined
[18:33] <moritz> it should be pretty cheap to option private_method_table once and then cache it; it would just miss run-time additions to it (but that tends to be OK, because private methods are already dispatched at compile time; if you want them to be dispateched at runtime, private methods are the wrong tool)

[19:11] <Shaeto_> just found it is not possible to call private methods by Str name

[19:16] * holly is going to play space quest 1

[19:30] *** donaldh joined
[19:30] <Shaeto_> so, private structures are not accessible for meta programming :(

[19:34] <guifa> m: class A { method !foo { say "bar" } }; my $a = A.new; $a.^find_private_method('foo').($a);

[19:34] <camelia> rakudo-moar f83e55116: OUTPUT: «bar␤»

[19:38] <guifa> sub call-private-method ($object, $name) { $object.^find_private_method($name).($object) }; class A { method !foo { say "bar" } }; A.new.&call-private-method('foo')

[19:38] <evalable6> guifa, rakudo-moar f83e55116: OUTPUT: «bar␤»

[19:38] <guifa> Shaeto_: ^^ see above

[19:40] <Shaeto_> guifa: interesting thank you, i have digged into Grammap.nqp/Actions.nqp and have found more interesting thing :)

[19:40] <Shaeto_> m: class a { method x() { my $n = 'y'; self!"$n"(); }; method !y() { say "god" } }; a.new.x;

[19:40] <camelia> rakudo-moar f83e55116: OUTPUT: «god␤»

[19:41] <guifa> yeah, that's the standard way to call methods by name (be they private or public) without needing to muck around in the HOW

[19:41] <guifa> I was thinking you were wanting to call from outside of the object

[19:41] <Shaeto_> no, from inside

[19:48] <guifa> ah, well, that's much easier :-)

[19:48] <Shaeto_> self!"$str"() is for private methods only

[19:48] <guifa> ."$str"() is for public

[19:49] <guifa> it's really ""() is a special way of calling methods based on string, and the . and ! indicate public/private accordingly

[19:49] <Shaeto_> yes i see grammar rules now

[19:49] <guifa> FWIW because it's just a string, all rules for string apply, so you can do, for instance

[19:50] <guifa> self!"{$str x 3}"()

[19:51] <guifa> (I'm not really sure *why* you'd want to, of course, but it's cool that it's not just a ." and "() circumfix, it really switches into the Q language

[19:53] *** dolmen joined
[19:53] <Shaeto_> well...i just trying to understand can i love p6 or not using the test project :)

[20:01] *** abraxxa left
[20:06] *** donaldh left
[20:22] *** abraxxa-home left
[20:40] *** dolmen left
[20:42] <guifa> 420 minutes later (there's a joke there somewhere), CLDR is now recompiled.  New release will go out in a bit and then I can fix Fluent hopefully

[20:44] <lizmat> guifa: the long re-compilation of many dependent modules is now also on my radar

[20:44] <lizmat> nowhere near as extreme as you're seeing it, but starting to annoy me :-)

[20:45] <guifa> lizmat: to be fair, this is not the same compilation as you're thinking of 

[20:45] <lizmat> ah?

[20:46] <guifa> s/compilation/parsing of xml files, manipulation thereof in Raku native data structures, and creation of binary files that can be speedily loaded/ ;-)

[20:47] <lizmat> ah, ok  *phew*

[20:48] <guifa> Based on my profiling, the bottle neck here is the module XML and its extensive use of mixins to keep everything technically a string (every XML object is really just a string that's had an XML role added to it, so getting child elements means rescanning the string to find that, the substring it, and then reapply the role, etc)

[20:52] <guifa> Since the process is all done once on my computer, admittedly, I've not tried too hard to be super efficient.  Focus has been on end user speed and when I get my hands on RakuAST .... 

[20:52] * guifa doees evil villian hand wringing 

[20:57] <gfldex> is there an equivalent for ^find_method for our-scoped subs?

[20:58] <lizmat> OUR::<&foo> ?

[20:58] <gfldex> Well, what I actually want to know is how to provide a FALLBACK for a package (so to speak).

[20:59] <guifa> .^add_fallback ? 

[20:59] *** Shaeto_ left
[21:00] <gfldex> That works on methods, I need the same for our scoped subs.

[21:00] *** sono joined
[21:00] <gfldex> Basically, I want to take control of the stash at runtime.

[21:01] <lizmat> aaah...  hmmm

[21:12] *** b2gills joined
[21:12] *** patrickb left
[21:29] <Xliff> lizmat: Oh, please tell me module recompiling speed is still on your radar.

[21:29] <Xliff> One of my biggest issues with Raku is module compile and recompile times.

[21:30] <holly> hi Xliff

[21:30] <Xliff> Heya, gnolly.

[21:30] <gfldex> Xliff: one of the goal of RakuAST is to make Rakudo itself faster.

[21:31] <gfldex> m: package p {}; dd p::.keys;

[21:31] <camelia> rakudo-moar f83e55116: OUTPUT: «().Seq␤»

[21:31] <holly> Xliff, it's not gfx but look at http://github.com/zarathemage/zephyr-*

[21:31] <gfldex> where does the .keys in this example actually comes from?

[21:31] <Xliff> gfldex: Yes, I am aware. I just would like to know how fast. I just compiled that branch and will play with it later.

[21:31] <Xliff> gfldex: I have So. Much. Code that I would like to optimize.

[21:32] <Xliff> As of this writing, over 560,000 lines of it.

[21:33] <Xliff> gnolly: Nice. Don't have much time for a deep dive, however. See above.

[21:33] <holly> np

[22:04] <Xliff> Is there a discord server for #raku?

[22:04] <gfldex> yes

[22:05] <gfldex> https://discord.gg/VzYpdQ6

[22:05] <Xliff> Thanks, gfldex++

[22:12] <raydiak> gfldex: Stash.keys is inherited from Map unless I've misunderstood the question again :)

[22:12] *** evalable6 left
[22:12] *** linkable6 left
[22:13] <gfldex> m: package p {}; dd p::.hash;

[22:13] <camelia> rakudo-moar f83e55116: OUTPUT: «Stash element = {}␤»

[22:13] <gfldex> m: package p {}; dd p::.hash.HOW;

[22:13] <camelia> rakudo-moar f83e55116: OUTPUT: «(Perl6::Metamodel::ClassHOW+{<anon>} without .raku or .perl method)␤»

[22:14] <gfldex> m: package p {}; dd p::.HOW;

[22:14] <camelia> rakudo-moar f83e55116: OUTPUT: «(Perl6::Metamodel::ClassHOW+{<anon>} without .raku or .perl method)␤»

[22:14] <gfldex> Looks like a nqp::hash under the hood to me.

[22:15] *** lgtaube joined
[22:19] <raydiak> it may be. I just know it's being inherited from Map

[22:19] <raydiak> m: say Stash.^find_method('keys') === Map.^find_method('keys')

[22:19] <camelia> rakudo-moar f83e55116: OUTPUT: «True␤»

[22:34] <raydiak> yes, it is ultimately an nqp::hash. https://github.com/rakudo/rakudo/blob/master/src/core.c/Map.pm6#L221 <== https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Iterator.pm6#L2486-L2499 <== https://github.com/rakudo/rakudo/blob/master/src/core.c/Rakudo/Iterator.pm6#L65-L69 <== https://github.com/rakudo/rakudo/blob/master/src/Perl6/bootstrap.c/BOOTSTRAP.nqp#L3484

[22:35] <Xliff> Hrm. I'm getting a "Messages Failed to Load" from discord

[22:39] <Xliff> Can someone send another re-invite link to Discord Raku?

[22:42] *** Doc_Holliwood left
[22:51] *** zostay joined
[22:51] *** kawaii_ joined
[22:51] *** peteretep joined
[23:19] *** evalable6 joined
[23:43] <holly> I can write smalltalk code for my interpreter now, project is at http://github.com/zarathemage/zephyr-smalltalk

[23:44] <holly> I still need to compile bu the core pragmas are in, declared

[23:44] <holly> s/bu/but

[23:44] <holly> now I can write the full smalltalk system, which is much higher level than C

[23:45] <holly> I have it stripped for writing games now

[23:46] <holly> e.g. space quest 2 :-)

[23:46] <moon-child> why do you have two 'README' files?

[23:47] <holly> for web and editor display separately

[23:48] *** guifa left
