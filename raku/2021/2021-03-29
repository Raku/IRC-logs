[00:00] *** hvxgr joined
[00:04] *** justsomeguy joined
[00:05] <justsomeguy> Does raku have something like pyenv+poetry (a build chain manager, and project-specific build tool that tracks dependencies and runs things in isolation of the system-wide build chain)?

[00:10] *** justsomeguy left
[00:17] <summerisle> leont: Str literal and .encode

[00:18] <summerisle> buf literals would be neat

[00:18] <leont> Yeah, that's what I'm currently doing

[00:18] <leont> Though that doesn't always play well with is-deeply (because that returns a utf8, not a buf8)

[00:18] <summerisle> i've just discovered the library i want to bind to uses templates. 

[00:18] * summerisle dies

[00:19] <summerisle> c++ is a cursed language

[00:19] <leont> And I haven't seen a way to convert one to the other

[00:19] * leont worked in C++ until a few months ago

[00:19] <summerisle> glad you got out

[00:19] <leont> A lot of things are nice about it TBH, but it doesn't play along with other languages much

[00:20] <summerisle> there are the nice bits but they are totally obscured by the problems imo

[00:21] <summerisle> i wish it wouldn't use C calling conventions by default so that people would be forced to provide sane interfaces

[00:21] <summerisle> instead of saying "just use the C++ interface from another language lol"

[00:22] <summerisle> so now i probably need to write a bunch of glue

[00:24] <summerisle> ah, and of course taglib has its own string wrapper as well

[00:24] <summerisle> how nice

[00:26] <summerisle> i wonder, does the C++ support in nativecall even make sure to call destructors?

[00:26] <summerisle> surely

[00:27] *** judd7 left
[00:29] *** mowcat left
[00:31] <leont> The whole idea of nativecall kind of falls flat with C++, IMO

[00:31] <leont> C++ hates FFI

[00:36] <leont> The other way around generally works better IME, letting C++ templates write the bindings to another language. It's also a way to lose sanity points :-p

[00:45] *** mowcat joined
[00:53] *** mowcat left
[01:08] *** andinus left
[01:08] <moon-child> yeah nativecall c++ is not really a sensible idea

[01:09] <moon-child> it barely works in d, and d is very similar to c++.  Even after they changed some language features to make it align more closely with c++ it doesn't really work

[01:10] *** HarmtH joined
[01:11] *** HarmtH_ left
[01:19] *** [Sno] joined
[01:21] *** sno left
[01:33] *** kvw_5 joined
[01:36] *** kvw_5_ left
[01:50] *** justsomeguy joined
[01:54] *** monkey__ joined
[01:55] *** aindilis` joined
[01:55] *** aindilis` left
[01:59] *** aindilis left
[02:17] *** monkey__ left
[02:27] *** wamba joined
[02:29] *** muffindrake left
[02:31] *** muffindrake joined
[02:32] *** judd7 joined
[02:44] *** guifa2_ joined
[02:45] *** guifa2 left
[02:45] *** guifa2_ is now known as guifa2

[02:47] *** neshpion joined
[02:59] *** dmc7z joined
[02:59] *** maggotbrain joined
[03:03] *** dmc7z left
[03:04] *** dmc7z joined
[03:08] *** HarmtH_ joined
[03:09] *** HarmtH left
[03:14] *** guifa2 left
[03:45] *** dataangel left
[03:54] *** dmc7z left
[04:02] <moon-child> why are there both constant Empty and no-argument slip?

[04:21] *** guifa2 joined
[04:31] *** wamba left
[04:58] *** neshpion left
[05:13] *** judd7 left
[05:15] *** judd7 joined
[05:19] *** xinming_ left
[05:20] *** xinming_ joined
[05:30] *** aindilis joined
[05:33] *** aindilis left
[05:34] *** aindilis joined
[05:44] *** kurahaupo_ joined
[05:47] *** kurahaupo left
[05:51] *** aluaces joined
[05:52] *** JX7P joined
[05:52] *** JX7P left
[05:59] *** parabolize left
[06:06] *** judd7 left
[06:18] *** kurahaupo_ left
[06:19] *** kurahaupo joined
[06:22] *** kurahaupo_ joined
[06:25] *** kurahaupo left
[06:26] *** guifa2 left
[06:33] *** Mithaldu left
[06:35] *** Mithaldu joined
[06:52] *** domidumont joined
[07:10] *** judd7 joined
[07:18] *** kurahaupo_ left
[07:20] *** kurahaupo joined
[07:23] *** xinming_ left
[07:25] *** xinming_ joined
[07:29] *** pecastro joined
[07:36] *** kurahaupo left
[07:37] *** kurahaupo joined
[07:46] *** abraxxa joined
[07:50] *** rindolf joined
[07:51] *** abraxxa left
[07:52] *** abraxxa joined
[07:58] *** sena_kun joined
[08:07] *** judd7 left
[08:09] *** abraxxa left
[08:12] *** aborazmeh joined
[08:12] *** Sgeo left
[08:14] *** fluca1978 joined
[08:15] <fluca1978> is there a smart way that allows me to process an array using sequentially adiacent elements, without having to use a for or a similar iteration? I mean for 0 ..^ @a.elems { # get $_, $_ + 1 and so on } 

[08:16] <moon-child> rotor

[08:16] <fluca1978> using map only allows me to get "couples", such as @a.map: { $^a, $^b } at every iteration

[08:16] *** aborazmeh left
[08:17] <moon-child> m: .say for <a b c d e>.rotor(2 => -1)

[08:17] <camelia> rakudo-moar 726a75e24: OUTPUT: «(a b)␤(b c)␤(c d)␤(d e)␤»

[08:18] <fluca1978> moon-child: I didn't know the => -1 trick

[08:18] <moon-child> k is batchsize, v is step.  So -1 means step back by 1

[08:42] *** abraxxa joined
[08:49] *** benkolera joined
[09:05] *** kurahaupo left
[09:51] *** wamba joined
[09:53] *** berber44 joined
[10:21] *** domidumont left
[10:50] *** berber44 left
[10:52] *** abraxxa left
[10:52] <tbrowder> hi, anyone interested in continuing discussion of Dateatime?

[10:52] <tbrowder> *DateTime

[10:54] *** abraxxa joined
[10:59] <moritz_> DateTeaTime? :D

[10:59] <tbrowder> .tell lizmat  i see that Dateish daycount is almost what is needed. except the MJD is correctly a Real number with the fractional part being the time of day as a fraction of 24 hours.

[10:59] <tellable6> tbrowder, I'll pass your message to lizmat

[11:00] <moritz_> that reeks of loss of precision

[11:00] <tbrowder> Ttime is also an alias for cocktail hour ;-D

[11:02] <lizmat> tbrowder: so, if I understand correctly, you would need a DateTime.from-julian-date method that would create a DateTime object using some value mangling

[11:02] <lizmat> you wouldn't need an extra attribute for that, would you ?

[11:02] <tbrowder> no i don't think so

[11:03] <lizmat> then I'd say: make a PR for that method  :-)

[11:03] *** PimDaniel joined
[11:04] <PimDaniel> o/

[11:04] <PimDaniel> How do we implement process in constructors?

[11:05] <tbrowder> ok, i'm on it. thnx, lizmat

[11:05] <PimDaniel> If we create/overload a new method, we can't modify any parameter at this step : so what can we do?

[11:06] *** k-man left
[11:06] <lizmat> PimDaniel: maybe you need a TWEAK method ?

[11:06] * PimDaniel lizmat : TWEAK?????

[11:06] <PimDaniel> is it an expression or something existing into Raku?

[11:07] <lizmat> https://docs.raku.org/language/objects#index-entry-TWEAK

[11:07] <PimDaniel> Ok i look at this... thank's...

[11:08] <lizmat> m: class A { has $.foo; method TWEAK() { $!foo = $!foo + 42 } }; say A.new(foo => 0).foo

[11:08] <camelia> rakudo-moar 726a75e24: OUTPUT: «42␤»

[11:09] <lizmat> m: class A { has $.foo; method TWEAK(:$bar) { $!foo = $bar + 42 } }; say A.new(bar => 21).foo

[11:09] <camelia> rakudo-moar 726a75e24: OUTPUT: «63␤»

[11:09] <lizmat> PimDaniel ^^ two common uses of TWEAK

[11:13] <PimDaniel> i wonder why i did not see that : i see BUILD everywhere and it does NOT, respond to my needs. I think reference is NOT very clear for this.

[11:13] <lizmat> PimDaniel: yeah, that section suffers from having been written *before* TWEAK was introduced into the language

[11:14] <tadzik> 3> If we create/overload a new method, we can't modify any parameter at this step

[11:14] <tadzik> yes you can :)

[11:14] <PimDaniel> BUILD forces me to pass all attributes from previous new overloaded subs.

[11:14] <tadzik> the BUILD/TWEAK confusion is what made me less afraid of overloading new() (and understanding it better)

[11:15] <tadzik> it also removes the temptation to add an attribute when what you really want is a constructor parameter

[11:15] <lizmat> also, nowadays you can have public attributes that don't build, and private attributes that do :-)

[11:15] <lizmat> $.foo is built(False)

[11:15] * PimDaniel tadzik : NO you can't modify an attribute $! into a new method.

[11:15] <lizmat> $!bar is built

[11:16] <tadzik> PimDaniel: I'm not suggesting to modify an attribute

[11:16] <tadzik> but you said "modify any *parameter*"

[11:16] <tadzik> you can then *set* the attribute to the right value in the first place

[11:16] <PimDaniel> Even to attrib it in any case: try it.

[11:16] <tadzik> that's the sane way to do it

[11:17] <PimDaniel> parameter attribute like you want : a class variable.

[11:17] <tadzik> parameters and attributes are completely distinct things, that's my point

[11:17] <tadzik> TWEAK encourages you to treat them as one which is an awful idea

[11:17] <PimDaniel> into a constructor : you cannot touch attributes of a class. 

[11:18] <PimDaniel> because they don't exist before bless

[11:18] <tadzik> m: class A { has $.b; sub new (%args) { self.bless(*, b => $args<b> * 2) } }; A.new(b=> 5).b.say

[11:18] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5===␤'self' used where no object is available␤at <tmp>:1␤------> 3class A { has $.b; sub new (%args) {7⏏5 self.bless(*, b => $args<b> * 2) } }; A␤Variable '$args' is not declared.  Did you mean '%args'?␤at <tmp>:1␤-----…»

[11:18] <tadzik> I'm not suggesting to touch attributes in new

[11:18] <tadzik> m: class A { has $.b; method new (%args) { self.bless(*, b => %args<b> * 2) } }; A.new(b=> 5).b.say # too much Perl

[11:18] <camelia> rakudo-moar 726a75e24: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:18] <tadzik> argh

[11:19] <tadzik> too much Perl Episode Two

[11:19] <tadzik> m: class A { has $.b; method new (%*args) { self.bless(*, b => %args<b> * 2) } }; A.new(b=> 5).b.say # fingers crossed

[11:19] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%args' is not declared.  Did you mean '%*args'?␤at <tmp>:1␤------> 3ethod new (%*args) { self.bless(*, b => 7⏏5%args<b> * 2) } }; A.new(b=> 5).b.say # ␤»

[11:19] <tadzik> I should've tried it somewhere else first

[11:20] <PimDaniel> Well i think i should say attribute instead of parameter : parameters are for subs and methods.

[11:21] <tadzik> it's my pet peeve so I may assume too much, but imho in the overwhelming majority of the cases you need TWEAK because you treat your attributes as if they were constructor parameters

[11:22] <tadzik> m: class A { has $.b; method new (*%args) { self.bless(b => %args<b> * 2) } }; A.new(b=>5).b.say # this finally works

[11:22] <camelia> rakudo-moar 726a75e24: OUTPUT: «10␤»

[11:22] <tadzik> if you want to modify new()'s input data to build your object, it makes the most sense to do it in new() imo

[11:23] <tadzik> otherwise you end up defining the structure *and* the interface of your objects because of you want your new() to look like, basically

[11:23] <PimDaniel> of course, we may modify constructor parameters and make process before bless but it is often weird because you'll need to attrib them afterward to class attributes.

[11:24] <tadzik> I think it's less weird than defining attributes that you don't need just to influence new()'s behaviour

[11:24] <PimDaniel> I have about 10 constructors to change since i know TWEAK().

[11:25] <tadzik> if you're interested in my rationale for this, here's my talk about this whole thing: https://www.youtube.com/watch?v=783CBT1r1DU

[11:25] <PimDaniel> Suppose you have a $!flag attribute:

[11:25] <tadzik> It's about Moose mostly, but Raku suffers from the same design problem imo

[11:26] <PimDaniel> This flag is a multi-bit action rised: common in C.

[11:27] <PimDaniel> If you need to rise a bit flag : you need process and it is really heavy to NOT act directly on the $!flag attribute itsef.

[11:28] <PimDaniel> Suppose the flag has 60 actions!

[11:28] <tadzik> yeah, I get you

[11:29] <PimDaniel> You can't do that into new, well you can but it will not be optimized.

[11:30] <tadzik> ...why?

[11:30] <tadzik> what's the difference between doing it in new() vs TWEAK?

[11:30] <tadzik> it's a method call either way

[11:30] <tbrowder> lizmat: back on the jd thing, i was thinking of mangling the DateTime.new(Str,...). is that what you had in mind?

[11:31] <tadzik> I may be misunderstanding what you're trying to do, but my impression was that you want to turn what the user gives you in new() into something that's actually useful for your object

[11:31] <PimDaniel> because often some process may be done as well during construction that after construction.

[11:31] <lizmat> tbrowder: no, I was thinking of adding a method ".from-julian-date"

[11:31] <tadzik> you wanted to implement processing in constructors. I suggest you to actually implement processing in a constructor

[11:31] <lizmat> tbrowder: *not* new

[11:32] <tadzik> sometimes you do need to do something after the construction, yes. That's what TWEAK is for. But this is for doing something on an *object*, and you asked about parameters and how to adjust them, if I remember correctly

[11:33] * PimDaniel tadzik : no my problem is not parameter, but class variables or attributes if you prefer.

[11:34] <tadzik> okay, again, what are you trying to do exactly? :)

[11:34] <PimDaniel> Exactly what i said: valorizate a bit flag : before and during construction.

[11:35] <tadzik> why do you need to do it twice?

[11:37] <PimDaniel> So i've a method setflag which makes : method setflag(Str $f) { $!flags = $!flags +| ::($f); + more process;}

[11:38] <PimDaniel> Now i cannot call setflag into a new sub which allready exists 

[11:39] <PimDaniel> and YES i can attrib $!flags directly into my constructor be i'll have to make the process externally which is weird.

[11:42] <PimDaniel> So i'll try TWEAK ... thank's for you help lizmat and tadzik.

[11:42] <tbrowder> um, i'm not sure that's worth the effort. i can just as easily go back to having a DateTime attr in my "subclass"

[11:44] <tbrowder> i'll have to think about my real use cases a bit more

[11:44] <lizmat> tbrowder: so what extra functionality should an object made with DateTime.from-julian-date(...)   have ?

[11:45] <tbrowder> outputs: juliandate, mjd

[11:46] *** PimDaniel left
[11:48] <tbrowder> but just by allowing the subclass to TWEAK DateTime parent's y,m,d,h,m,s would do the trick. then moi, the user, could add all the tricks i want at no xtra cost to anyone else

[11:48] <lizmat> tbrowder: you mean the .Str / .gist / .raku output should be different

[11:50] *** kurahaupo joined
[11:50] *** lizmat_ joined
[11:50] *** Doc_Holliwood joined
[11:50] <Doc_Holliwood> m: say -Inf + Inf

[11:50] <camelia> rakudo-moar 726a75e24: OUTPUT: «NaN␤»

[11:50] <Doc_Holliwood> m: say (-Inf) + Inf

[11:50] <camelia> rakudo-moar 726a75e24: OUTPUT: «NaN␤»

[11:50] <lizmat_> class JulianDate is DateTime { method new(...) { self.DateTime::new(...) } }

[11:50] <lizmat_> tbrowder ^^

[11:53] *** abraxxa left
[11:53] <tbrowder> hm, i'll give that a shot. remember in my defense to guifa2 i said that fancy construction techniques over my pay grade were needed!

[11:53] *** lizmat left
[11:53] <Doc_Holliwood> found a reason to use base-repeating =)

[11:53] <Doc_Holliwood> https://twitter.com/HrBollermann/status/1376501257091833866

[11:54] *** abraxxa joined
[11:54] <Doc_Holliwood> i had no idea the function exists but I found it within a minute

[11:54] <Doc_Holliwood> speaks for the docs methinks

[11:54] <tbrowder> lizmat: i will report back, thanks!

[11:56] *** lizmat_ is now known as lizmat

[12:07] *** raiph joined
[12:13] <m6locks_> might want to check the rakudo star build instructions

[12:13] <m6locks_> I can't find a Configure.pl in the rakudo dir after extracting the tarball

[12:14] <m6locks_> should I just cd into the src dirs and build rakudo, nqp and moarvm separately?

[12:14] <lizmat> tyil ^^

[12:15] <tyil> oh

[12:15] <tyil> m6locks_: download the tarbal, `./bin/rstar install`

[12:15] <tyil> or check the README.md

[12:15] <m6locks_> ok thx 

[12:16] <m6locks_> building now 

[12:17] <m6locks_> hmm build failed

[12:18] <m6locks_> cannot determine the brand of your make utility

[12:18] <m6locks_> this is on dragonflybsd

[12:23] <tyil> I have never even heard of dragonflybsd

[12:23] <tyil> so that might be related :p

[12:23] <tyil> I'm also not at home, so I don't have a machine to slap a VM on to try it out with either

[12:23] <tyil> m6locks_: do you have default compilation tools installed?

[12:24] <tyil> think gcc and make

[12:24] <m6locks_> yes

[12:26] <m6locks_> I just built firefox and chrome from ports sources

[12:30] <tyil> m6locks_: can you post the output of `./bin/rstar sysinfo`

[12:31] <m6locks_> aye

[12:31] <m6locks_> ./bin/rstar sysinfo

[12:31] <m6locks_> version         5.8-release

[12:31] <m6locks_> term            xterm-256color

[12:31] <m6locks_> key             dragonfly

[12:31] <m6locks_> os              dragonfly

[12:31] <m6locks_> arch            x86_64

[12:32] <tyil> ok

[12:32] <tyil> can you try this tarball https://dist.tyil.nl/raku/star/rakudo-star-2021.02.1-bsd1.tar.gz

[12:32] <tyil> (and post output of sysinfo again)

[12:33] <m6locks_> downloading

[12:34] <tyil> also, you can run `./bin/rstar sysinfo | nc tyil.nl 9999` to only have to post a link to the channel

[12:35] <m6locks_> https://p.tyil.nl/s61h

[12:36] <tyil> that looks good

[12:36] <tyil> you can retry building it from that tarball (https://dist.tyil.nl/raku/star/rakudo-star-2021.02.1-bsd1.tar.gz.asc for the PGP sig, if you want to verify it)

[12:36] <m6locks_> aye trying it now

[12:37] <tyil> if it doesn't work, I'll sadly have to try something tomorrow on a VM at home

[12:37] <m6locks_> yes

[12:37] <tbrowder> .tell lizmat it looks promising...continuing to flesh out details

[12:37] <tellable6> tbrowder, I'll pass your message to lizmat

[12:38] <lizmat> cool

[12:39] *** wamba left
[12:41] *** wamba joined
[12:56] *** __jrjsmrtn__ joined
[12:57] <tyil> m6locks_: is the lack of news a sign of good news? 

[12:57] *** PimDaniel joined
[12:57] *** _jrjsmrtn left
[13:00] *** PimDaniel left
[13:01] *** benkolera left
[13:06] *** raiph left
[13:08] *** DiffieHellman left
[13:11] *** lucasb joined
[13:25] <tbrowder> ok, i can round trip the juliandate inside/outside the subclass okay, but it looks like my to/from algorithm needs a leetle work.  :-(

[13:27] *** DiffieHellman joined
[13:27] <m6locks_> tyil: ah sorry no, it failed with the same error

[13:29] <m6locks_> I'm not sure if it's related to the locale warning where bash is complaining about LC_ALL that cannot be changed (C.UTF-8)

[13:29] <m6locks_> but in any case it's not building

[13:34] *** monkey__ joined
[13:38] <tyil> ah

[13:38] <tyil> well, I'll have to try tomorrow then

[13:44] *** raiph joined
[14:01] *** raiph left
[14:03] *** PimDaniel joined
[14:03] <PimDaniel> o/

[14:03] <PimDaniel> How to put down binary flag?

[14:04] <PimDaniel> I try -^ but it does not work as expected :(

[14:04] <PimDaniel> started with -| but it's worth.

[14:05] <PimDaniel> I can't see clear informations into reference about this or like it is often the case we don't know where to search.

[14:07] <ugexe> https://docs.raku.org/language/operators#infix_+^

[14:07] <ugexe> there is the docs for similar ops

[14:08] <ugexe> and https://docs.raku.org/language/operators#prefix_+^

[14:10] *** PimDaniel left
[14:11] *** PimDaniel joined
[14:14] <summerisle> cperl-mode is wild

[14:14] <summerisle> at the implementation level

[14:14] <summerisle> (yes, i'm back at it with raku-mode)

[14:15] <codesections> summerisle++ 

[14:15] * PimDaniel ugexe saw that many times. thank's.

[14:15] <codesections> which bit are you improving now?

[14:16] *** aluaces left
[14:17] * PimDaniel ugexe i want to put down one bit and the behavior is strange 

[14:18] <summerisle> i was losing sleep last night over the idea of completely scrapping SMIE and implementing a (better than SMIE, at least) lexer

[14:18] <PimDaniel> m: (0 -^ 0b0100).raku.say

[14:18] <camelia> rakudo-moar 726a75e24: OUTPUT: «-4␤»

[14:18] <PimDaniel> why that?

[14:19] <PimDaniel> m: (0 -^ 0b0100).base(2).say

[14:19] <camelia> rakudo-moar 726a75e24: OUTPUT: «-100␤»

[14:19] <summerisle> and as such i was looking at how cperl-mode had gone about things because if memory serves it does exactly that

[14:19] <summerisle> it is also a 6k+ LOC single-file emacs module

[14:19] <summerisle> with various levels of formatting quality...

[14:20] <summerisle> i found a comment in the perldb section about some hack to make it work with OS/2

[14:20] <PimDaniel> I did NOT expect to have negative values! What does this mean?

[14:20] <summerisle> i don't even know who is editing perl in emacs on OS/2

[14:20] <codesections> summerisle: wow

[14:20] <summerisle> unless i'm missing some overlapping terminology https://i.imgur.com/5r73yAq.png

[14:23] <summerisle> wow, cperl-find-pods-heres is quite the chunky lad

[14:24] <summerisle> i think (i hope) there is too much weird p5 cruft here to really take much away...

[14:25] <summerisle> when the code to find POD and heredoc spans 1k loc...

[14:25] *** silug left
[14:25] *** silug joined
[14:26] *** PimDaniel left
[14:28] *** silug left
[14:29] <codesections> tangent: my dream version of raku-mode would integrate heredocs with polymode or similar, so that I could write something like my $markdown = to:/§md/;  and then get markdown syntax highlighting for the heredoc

[14:29] <MasterDuke> m: (0b1100 +^ 0b0100).base(2).raku.say # PimDaniel is this what you wanted?

[14:29] <camelia> rakudo-moar 726a75e24: OUTPUT: «"1000"␤»

[14:30] <codesections> s/to ':'/q:to/

[14:31] * codesections spent too long deciding whether to add the single-quotes in that s///

[14:31] *** PimDaniel joined
[14:34] *** silug joined
[14:37] *** PimDaniel left
[14:38] *** monkey__ left
[14:38] *** wamba left
[14:40] *** silug left
[14:44] *** kurahaupo left
[14:45] *** PimDaniel joined
[14:46] *** silug joined
[14:46] <PimDaniel> Well to resume i can rise a bit flag value this way : $flags = ($flag +| $f); but how can i put the flag down? :( thank's.

[14:47] <PimDaniel> * Well to resume i can rise a bit flag value this way : $flags = ($flags +| $f); but how can i put the flag down? :( thank's.

[14:51] *** Sgeo joined
[14:51] <MasterDuke> https://docs.raku.org/language/operators#infix_+& right? OR is for setting flags, AND is for clearing them

[14:52] *** kurahaupo joined
[14:55] * PimDaniel Thank's MasterDuke but how can +& put down my bit flag?

[14:57] <PimDaniel> let's say i have 0b0010000; and want to lower only rised bit?

[14:57] <PimDaniel> *raised

[14:58] <PimDaniel> The only solution with +& would be to use the binary complement of the mask.

[14:59] <PimDaniel> but i thought there were a simpler solution.

[15:04] *** parabolize joined
[15:04] *** kurahaupo left
[15:04] *** abraxxa left
[15:04] <SmokeMachine> Have anyone ever suggested using IPFS to host Raku modules?

[15:05] <summerisle> that's an interesting idea. i need to check out ipfs again. last i used it, it was very slow

[15:05] <summerisle> but that was when it first became a thing

[15:06] *** kurahaupo joined
[15:06] *** abraxxa joined
[15:07] <SmokeMachine> I’ve been testing it recently (I just discovered about that last week) and it’s not seeming slow…

[15:09] <summerisle> that's good to hear

[15:09] <summerisle> i must have used it as early as 2014 if it was around then, if not then 2016

[15:09] <summerisle> 2015 then

[15:10] *** PimDaniel left
[15:22] <xinming_> IPFS module hosting + 1

[15:22] <xinming_> it depends on the nodes

[15:26] *** justsomeguy left
[15:41] *** xinming_ left
[15:42] *** xinming_ joined
[15:44] *** sena_kun left
[15:44] *** sena_kun joined
[15:46] <tonyo> smokemachine, anything wrong with the fez setup?

[15:46] *** lucasb left
[15:48] *** lucasb joined
[15:48] <SmokeMachine> tonyo: not at all! I just thought that could be one more possibility.

[15:49] <SmokeMachine> tonyo: I thought it would be cool to have the modules distributed in a distributed fashion... :)

[15:49] <ugexe> storing isnt a real issue, its recommendation / consensus engines

[15:50] <ugexe> IPFS does nothing for that, it just another backend for them to use

[15:54] *** jmerelo joined
[15:55] *** kurahaupo left
[15:57] <tonyo> the fez one is distributed : )

[16:04] *** kurahaupo joined
[16:09] *** abraxxa left
[16:11] *** abraxxa joined
[16:13] *** kurahaupo left
[16:15] *** kleb joined
[16:17] <kleb> hi folks! is there any way to use raku regex (in a grammar) to match on permutations or combinations of a set of rules?

[16:18] <kleb> for example, if i wanted to be able to match "static inline friend" "friend inline static" "friend static inline" "static friend" "inline friend", etc but nothing like "static static static"

[16:19] *** kurahaupo joined
[16:21] <kleb> something like:               [ 'static' | 'inline' | 'friend' ] ** 2..3

[16:21] <kleb> though i want to ignore when there are duplicates

[16:23] <codesections> hmm, interesting question

[16:25] <tonyo> yes

[16:25] *** bdju left
[16:26] <tonyo> you'd want to use a method to control what's available to match

[16:26] <tonyo> or, you can, rather

[16:27] *** bdju joined
[16:27] <tonyo> https://docs.raku.org/language/grammars#Methods_in_grammars

[16:27] <kleb> oh, bingo -- thank you! i know how to figure it out now.  that is an awesome feature

[16:27] <kleb> wow

[16:27] <kleb> that makes so many more things possible :)

[16:28] <kleb> just clicked

[16:28] *** mowcat joined
[16:28] <codesections> https://docs.raku.org/language/regexes#Recursive_Regexes might also be helpful here, I'm not positive 

[16:30] *** bdju left
[16:32] *** bdju joined
[16:32] <kleb> thanks everybody!

[16:37] *** [Sno] left
[16:38] *** kurahaupo left
[16:49] *** kurahaupo joined
[16:58] *** kleb left
[17:01] *** kurahaupo left
[17:04] *** kurahaupo joined
[17:08] *** patrickb joined
[17:11] *** b2gills joined
[17:19] *** asy joined
[17:19] *** asymptotically is now known as Guest59407

[17:19] *** asy is now known as asymptotically

[17:19] *** Guest59407 left
[17:21] *** guifa2 joined
[17:25] *** aluaces joined
[17:26] *** wamba joined
[17:26] *** patrickb left
[17:34] *** PimDaniel joined
[17:37] <PimDaniel> I'v found it myself; i forgoted i had to make the complement to low down a bit.  $!flags = $!flags  +& ( $mask +^ 255);   to lower down a bit. for a 8 bits wide $flags. 

[17:38] <PimDaniel> may be $!flags +&= would work too.

[17:39] <PimDaniel> It should be better to express things in binaray : $!flags = $!flags  +& ( $mask +^ 0b11111111);

[17:41] *** kurahaupo left
[17:42] <tonyo> a roll helps that readability without requiring you to fully write out binary .. $!flags +&= 1 <+ (whatever bit you want to set);

[17:44] * PimDaniel Yesss tonyo i mentionned it at 19:38

[17:44] <PimDaniel> thank's anyway!

[17:45] <PimDaniel> i'll earn 7 chars at each line.

[17:45] *** jmerelo left
[17:46] <tonyo> that should be +<, not <+

[17:46] <tonyo> you getting paid by the char?

[17:47] <PimDaniel> Yess true binary operators changed and we must care about syntax when we start.

[17:47] <PimDaniel> I mean changed compare to Perl5

[17:47] <El_Che> s/Perl5/Perl/

[17:48] <PimDaniel> El_Che: Non non non! 

[17:48] <El_Che> non,non,non, rien a changé

[17:48] <El_Che> ?

[17:49] *** kurahaupo joined
[17:49] <PimDaniel> Yé né pas changé, non : je suis toujours aussi empoté.

[17:50] <PimDaniel> who codes in Perl4? hum?

[17:50] <PimDaniel> and Perl1/2/3. :/

[17:51] <kurahaupo> PimDaniel: I very occasionally find p4 in embedded systems firmware that hasn't been updated in 20 years

[17:51] <kurahaupo> Even then, it's usually p4 scripts running on p5.002 or somesuch

[17:52] <PimDaniel> What Operating System?

[17:52] <PimDaniel> I do not even know when perl4 was running.

[17:52] <kurahaupo> 1994-ish

[17:53] <PimDaniel> Hum ok.

[17:53] <kurahaupo> Usually as perl-cgi running the embedded web server on some router

[17:54] <PimDaniel> Yess i undestand.

[17:54] <kurahaupo> The "if it ain't broke don't fix it" mentality is pretty strong in the hardware OEM community

[17:55] <PimDaniel> This is nearly software part of hardware.

[17:55] <PimDaniel> In 1994 there were still many non-oses embedded systems.

[17:55] <kurahaupo> PimDaniel: Êtes vous français(e)?

[17:56] <PimDaniel> But you are true.

[17:56] <PimDaniel> Ouais chui français mais juste parce qu'il faut bien être quelque-chose.

[17:57] * PimDaniel kurahaupo : sorry i must leave. See you later. 

[17:57] *** PimDaniel left
[18:00] *** patrickb joined
[18:08] *** aborazmeh joined
[19:05] *** sxmx left
[19:25] *** kurahaupo left
[19:25] *** abraxxa left
[19:26] *** abraxxa joined
[19:28] *** aborazmeh left
[19:34] *** kurahaupo joined
[19:36] *** londoed joined
[19:37] *** londoed left
[19:47] <tyil> m6locks_: I installed dragonflybsd on a vm, but it doesn't appear to even have a network connection by default

[19:48] <tyil> `/etc/rc.d/dhcpcd status` doesn't show anything, and exitcode is 0

[19:49] <tyil> so I'm not gonna be able to even get started on reproducing the issue

[19:49] <lizmat> .oO( at least it's secure :-)

[19:50] <tyil> I mean, I guess

[19:51] *** mowcat left
[19:51] <tyil> FreeBSD just works, and OpenBSD works more often than not (though it's a close call), but I don't seem to have anywhere near a usable system with DragonflyBSD

[19:51] *** mowcat joined
[19:51] <tyil> and it's late, so I don't really wanna get too deep into it right now

[19:52] <m6locks_> tyil: if you have intel drivers you can create the interface 

[19:52] <m6locks_> aye

[19:52] <tyil> I'm on a vm

[19:52] <tyil> I was hoping to not have to hunt random drivers just to get basic internet working :p

[19:52] <m6locks_> sudo kldload if_iwm && sudo ifconfig wlan0 create wlandev iwm0

[19:52] <tyil> wlan?

[19:52] <tyil> on a vm?

[19:53] <m6locks_> well if you don't see the wlan0 interface there you won't have a network connection

[19:53] <tyil> I think it's better to discuss this in pm, so as to not flood the channel with DragonflyBSD troubleshooting :>

[19:53] <m6locks_> aye

[20:03] *** mowcat left
[20:06] *** patrickb left
[20:18] *** rindolf left
[20:24] *** kurahaupo left
[20:27] *** silug left
[20:29] *** notlizmat joined
[20:30] *** notlizmat left
[20:34] *** kurahaupo joined
[20:35] *** silug joined
[20:45] *** tomaw left
[20:50] *** tomaw joined
[21:01] *** lichtkind joined
[21:09] * japhb considers Conservation of Bugs in relation to freehanding 4 modules and finding only one (thinko) syntax error ... the semantic mistakes are going to be BRUTAL, I can just feel it.

[21:09] *** mowcat joined
[21:09] *** El_Che left
[21:10] *** El_Che joined
[21:20] <lizmat> and another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/03/29/2021-13-games-pop/

[21:21] *** aluaces left
[21:24] *** kurahaupo left
[21:32] *** El_Che left
[21:33] *** El_Che joined
[21:34] *** sxmx joined
[21:35] *** kurahaupo joined
[21:35] <sxmx> since rakudo (targeted|targets) jvm, would it be possible to bring raku to grail?

[21:37] <MasterDuke> sxmx: there is a work-in-rather-slow-progress to do so

[21:37] <MasterDuke> well, not just graal, but implemented with truffle. https://github.com/Raku/nqp/tree/truffle

[21:44] *** wamba left
[21:48] <sxmx> cool thanks. just a thought that popped into my head

[21:50] <sxmx> has anything run yet or is it still too early>

[21:53] <MasterDuke> iirc, it can run some nqp code (and with very specific examples it can be faster than both the existing jvm backend and moarvm), but not all, so no rakudo code

[21:55] <MasterDuke> i think https://github.com/Raku/nqp/blob/truffle/src/vm/jvm/bin/run_tests.pl#L12 shows the nqp tests that pass

[22:00] <sxmx> That'd be cool if that becomes usable. I like the language, but the performance is less than great on my openbsd vps

[22:00] <lizmat> fwiw, which version of Rakudo are you using ?

[22:01] <sxmx> it's taking about two and a half minutes to regex search the words file

[22:01] <MasterDuke> unfortunately regexes/grammars are about the least optimized part of rakudo right now

[22:02] <sxmx> I'm using 2021.02.1 from packages

[22:02] <sxmx> 6.9 snapshot

[22:05] <lizmat> ok, so you're up to date, good to hear!

[22:05] <lizmat> so OOC what is the regex you use on words ??

[22:07] <sxmx> just something like /^rhy.*$/ finding words with certain clusters

[22:07] *** sena_kun left
[22:08] <lizmat> sxmx : then try "words".IO.lines.grep: *.starts-with("rhy")

[22:12] <sxmx> so string methods instead?

[22:14] <codesections> sxmx: also, when you do need a regex but don't need to backtrack, the :ratchet setting can help performance a lot (so, rx:r/…/ instead of /…/ )

[22:23] <codesections> also -- and you probably know this but it's a common enough issue to be worth mentioning anyway -- $ matches the end of the _input_ rather than the end of the line ($$ is the end of the line).

[22:27] *** lichtkind left
[22:28] *** Voldenet joined
[22:28] *** Voldenet left
[22:28] *** Voldenet joined
[22:34] *** guifa2 left
[22:35] *** guifa2 joined
[22:57] <Doc_Holliwood> m: say (1..Inf).reverse.first

[22:57] <camelia> rakudo-moar 726a75e24: OUTPUT: «Inf␤»

[22:57] <Doc_Holliwood> well play #raku. well played

[23:01] <codesections> m: say (1..∞).reverse.head(2)

[23:01] <camelia> rakudo-moar 726a75e24: OUTPUT: «(Inf Inf)␤»

[23:11] <moon-child> haha, that's amazing

[23:15] *** Garland_g[m] joined
[23:25] *** Voldenet left
[23:26] *** pecastro left
[23:30] *** Voldenet joined
[23:30] *** Voldenet left
[23:30] *** Voldenet joined
[23:39] *** skyheights joined
[23:39] *** skyheights left
[23:54] *** kurahaupo left
