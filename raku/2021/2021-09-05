[00:03] *** reportable6 left
[00:04] *** reportable6 joined
[01:04] *** sourceable6 left
[01:04] *** committable6 left
[01:04] *** shareable6 left
[01:04] *** reportable6 left
[01:04] *** statisfiable6 left
[01:04] *** greppable6 left
[01:04] *** bloatable6 left
[01:04] *** unicodable6 left
[01:04] *** squashable6 left
[01:04] *** benchable6 left
[01:04] *** releasable6 left
[01:04] *** notable6 left
[01:04] *** linkable6 left
[01:04] *** tellable6 left
[01:04] *** evalable6 left
[01:04] *** coverable6 left
[01:04] *** bisectable6 left
[01:04] *** quotable6 left
[01:04] *** nativecallable6 left
[01:05] *** shareable6 joined
[01:05] *** unicodable6 joined
[01:05] *** committable6 joined
[01:06] *** linkable6 joined
[01:06] *** releasable6 joined
[01:07] *** bisectable6 joined
[01:07] *** quotable6 joined
[01:07] *** statisfiable6 joined
[02:05] *** evalable6 joined
[02:06] *** sourceable6 joined
[02:06] *** notable6 joined
[02:58] *** xinming left
[02:59] *** xinming joined
[03:05] *** bloatable6 joined
[03:06] *** nativecallable6 joined
[03:06] *** reportable6 joined
[03:07] *** benchable6 joined
[03:07] *** xinming left
[03:08] *** xinming joined
[03:28] *** swaggboi left
[03:33] *** swaggboi joined
[03:47] *** squashable6 joined
[03:51] *** Sgeo_ joined
[03:54] *** Sgeo left
[04:07] *** greppable6 joined
[04:13] *** keutoi joined
[04:13] *** xinming left
[04:13] *** xinming joined
[04:34] *** xinming left
[04:34] *** xinming joined
[05:06] *** tellable6 joined
[06:02] *** reportable6 left
[06:02] *** reportable6 joined
[06:03] *** xinming left
[06:04] *** xinming joined
[06:43] *** jjido joined
[07:06] *** coverable6 joined
[07:40] *** eseyman left
[08:00] *** lichtkind joined
[08:31] *** eseyman joined
[08:44] *** eseyman left
[08:49] *** Sgeo_ left
[08:53] *** b2gills left
[09:27] *** jjido left
[09:52] <spacekookie> So I'm looking at RAKULIB as a search path and I'm wondering if there's a way to make rakudo look for module more recursively. i.e. I point it at something like lib/perl6/site_perl (similarly to perl5) in which are then different raku distributions

[09:53] <spacekookie> Not 100% sure how this is supposed to work from the raku modules docs

[09:56] <spacekookie> Or should I just set RAKULIB manually to include all paths to modules that a package requires?

[10:02] *** keutoi left
[10:04] *** keutoi joined
[10:40] *** jjido joined
[10:46] <lizmat> spacekookie: feels like you want to create your own REPO logic?

[10:48] <spacekookie> Is a REPO in Raku something special?

[10:49] <gfldex> m: say $*REPO;

[10:49] <camelia> rakudo-moar b451f89b6: OUTPUT: «inst#/home/camelia/.raku␤»

[10:49] <lizmat> when you want to load a module in Raku, it's basically asking whatever is in $*REPO if it knows about a given module

[10:49] <lizmat> if it does, then you'll be able to load it

[10:50] *** jjido left
[10:50] <lizmat> through the $*REPO logic

[10:50] <lizmat> in fact $*REPO is a chain of repo's

[10:50] <lizmat> if the first doesn't know about it, it can ask the second, etc.

[10:50] <lizmat> Raku comes standard with the "Installed modules" repo

[10:51] <lizmat> and the  "filesystem modules" repo

[10:51] <lizmat> (and a few other ones, but that's not important right now)

[10:51] <lizmat> the "installed modules" only knows about modules that you have installed with e.g. "zef install Foo::Bar"

[10:52] <lizmat> the "filesystem" one only knows about modules as files in a directory

[10:52] <lizmat> (which is much like Perl treats modules)

[10:52] <lizmat> when you say "use lib 'foo/bar'"

[10:53] <lizmat> you are in fact inserting a REPO at the front of the chain, that will look for modules in the "foo/bar" directory

[10:53] <lizmat> spacekookie: are you still with me?

[10:54] <spacekookie> Yea, that makes sense

[10:55] <spacekookie> The background to what I'm trying to build is that on NixOS there's no such thing as an "installed module". Each program has access to the modules it needs, but they are install at some path in /nix/store

[10:56] <spacekookie> So for any given program we wrap it in a script that sets RAKULIB to a path on where to find its dependencies

[10:56] <lizmat> and "use lib" is not cutting it for you?

[10:56] <spacekookie> But thinking about this for a bit longer, actually it makes total sense to have RAKULIB be a comma separated path for each of the dependencies

[10:56] <spacekookie> "use lib" has to look for the module somewhere though, right? Which is determined by the search path?

[10:56] <spacekookie> Or is it the filesystem one?

[10:57] <lizmat> use lib is the filesystem one

[10:57] <spacekookie> Ah

[10:57] <lizmat> it has the disadvantage that it does **NOT** know about versions

[10:57] <spacekookie> That works fine for includes _inside_ a module but to bundle an program together it's a bit inconvenient

[10:58] <lizmat> so if you do "use foo:auth<lizmat>:ver<0.0.2>" and the use lib repo finds a "foo.rakumod", it will use that *without* checking version or auth matching

[11:00] <spacekookie> Interesting

[11:00] <spacekookie> Anyway, I think I have a decent solution for this now (if you're interested: https://dev.spacekookie.de/kookie/nomicon/src/commit/4c47d49bdb160bb654573591a439076cb826284f/infra/libkookie/nixpkgs/unstable/pkgs/build-support/raku/default.nix#L17 -- currently in my own fork, but it'll be upstreamed soon(tm))

[11:02] <lizmat> ugexe tonyo El_Che might be better suited to judge that

[11:02] <lizmat> they're more into packaging / module installations than I am

[11:02] <spacekookie> So the general structure of a raku package is then $out/{bin,/lib/perl6/site_perl} with the latter containing the code shipped by the module. And the RAKULIB path is a set of $out/lib/perl6/site_perl and links to every other dependency that's required (and packaged at their own /nix/store/whatever/ paths

[11:02] <spacekookie> Well, thanks for your help anyway :)

[11:02] <lizmat> yw

[11:03] <spacekookie> fwiw it's also the first build support system I try to build for nixpkgs x)

[11:06] <lizmat> ah, an opportunity for double learning :-)

[11:50] *** evalable6 left
[11:50] *** linkable6 left
[11:57] *** keutoi left
[12:02] *** jjido joined
[12:02] *** reportable6 left
[12:26] <ugexe> use lib will know about versions if it points to a repo that knows about versions

[12:28] <ugexe> something like `use lib "lib"` might not similarly to `-I lib`, but thats why people should be using `use lib "."` or `-I .` (i.e. pointing at the base directory of the distribution where the META6.json resides, not its lib/ subdir)

[12:29] <lizmat> spacekookie ^^

[12:30] <lizmat> ugexe++  # reminding me about META6.json being used if found by use "lib"

[12:34] <ugexe> i wrote https://github.com/ugexe/Perl6-CompUnit--Repository--Lib years ago to do a recursive lib/ type structure like https://github.com/ugexe/Perl6-CompUnit--Repository--Lib/tree/master/t/test-libs

[12:34] <ugexe> but thats a prototype 

[12:50] *** linkable6 joined
[12:52] *** evalable6 joined
[13:52] *** bloatable6 left
[13:52] *** linkable6 left
[13:52] *** evalable6 left
[13:52] *** quotable6 left
[13:52] *** sourceable6 left
[13:52] *** statisfiable6 left
[13:52] *** squashable6 left
[13:52] *** shareable6 left
[13:52] *** releasable6 left
[13:52] *** nativecallable6 left
[13:52] *** committable6 left
[13:52] *** greppable6 left
[13:52] *** benchable6 left
[13:52] *** tellable6 left
[13:53] *** committable6 joined
[13:54] *** shareable6 joined
[13:54] *** releasable6 joined
[13:55] *** quotable6 joined
[13:55] *** benchable6 joined
[14:03] *** reportable6 joined
[14:12] *** monkey_ joined
[14:19] *** dg left
[14:35] *** squashable6 joined
[14:50] *** jjido left
[14:53] *** nativecallable6 joined
[14:53] *** greppable6 joined
[14:53] *** tellable6 joined
[15:18] *** sftp left
[15:28] *** TheAthlete joined
[15:34] <spacekookie> Hmm, why are there two separate keys in the p6c.json to get the repository url (support.source and source-url)? Are there semantic differences between them?

[15:36] *** jess left
[15:38] *** sftp joined
[15:43] <moritz_> I think one is new style, one is old style, and we never finished the transition, or something

[15:45] <spacekookie> Okay so I guess I'll start sending out some PRs x) 

[15:53] *** sourceable6 joined
[15:55] *** evalable6 joined
[16:07] <raydiak> I'm not entirely sure that one is meant to be deprecated. META6, which we link to from the docs on META files, uses both. zef uses only support.source in its META6.json but happily works with either one afaik. fez uses only source-url in it's META, not sure what it looks at when running. our docs have no mention of "support". S22 has no mention of "source-url".

[16:08] <raydiak> since we have no spec for meta files and don't consider either the docs or syns or anything else authoratative, it's just "whatever the prevailing tooling wants"

[16:12] *** monkey_ left
[16:12] <ugexe> source-url is more something defined by ecosystems. id say support.source is for humans to enter and source-url is more something that should be generated (even though that isnt the case for p6c)

[16:17] <ugexe> if zef was uploaded to cpan then its source-url would be a url to its cpan .tar.gz regardless of what its value was when it was uploaded, but the support.source would still point to whatever its value was (in this case the git repository)

[16:24] *** monkey_ joined
[16:37] <spacekookie> Hmm, okay. Is there a reason to actually have this be two fields? i.e. why not just use the "human" value for everything?

[16:38] *** a3r0 left
[16:46] <ugexe> who says you know what the value is before uploading?

[16:47] <ugexe> something like our cpan usage is going to overwrite source-url with the appropriate .tar.gz url which is generated. if we only use one of these values then there is no longer an linkage to the source

[16:48] <spacekookie> Hm, fair enough. I guess some modules are also just hosted on modules.raku.org and don't have a repo of their own somewhere?

[16:54] *** bloatable6 joined
[16:54] *** statisfiable6 joined
[16:59] <ugexe> they dont have to have a repo, no

[17:02] *** RandalSchwartz joined
[17:02] *** RandalSchwartz left
[17:15] *** monkey_ left
[17:53] *** jjido joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:12] *** Sgeo joined
[18:55] *** linkable6 joined
[18:58] *** discord-raku-bot left
[18:58] *** discord-raku-bot joined
[19:00] *** TheAthlete left
[19:49] *** pounce left
[19:56] *** pounce joined
[20:13] *** pounce left
[20:17] *** pounce joined
[20:30] *** squashable6 left
[20:35] *** jjido left
[20:42] *** neshpion joined
[20:51] *** jjido joined
[20:55] *** jjido left
[21:04] *** squashable6 joined
[21:17] *** Altai-man left
[21:18] *** Altai-man joined
[21:38] *** neshpion left
[21:42] <japhb> xinming: Missed your discussion yesterday, but not that the CBOR format is designed to be extensible for exactly things like Captures that you want to be able to roundtrip and can be described semantically, but may only be "native" in some languages.  CBOR::Simple (which I wrote) supports this conceptually, but I have not yet added Capture as an explicit extension.

[21:43] <japhb> xinming: Anything I should know about your use case that would imply something more advanced than "2-tuple of positional and associative tagged to roundtrip as a Capture object"?

[21:44] <japhb> *but note that

[21:44] <japhb> (I suspect that a similar concept is needed by Lua for tables, but I'm not a Lua expert)

[21:46] <japhb> Oh, I should also note that CBOR::Simple is *way* faster than .raku/EVAL for any data structure it supports.

[21:46] <japhb> (see https://github.com/japhb/serializer-perf for more details)

[22:49] <raydiak> Lua tables don't really distinguish between named and positional, it's all just a key lookup and positional is syntactic sugar. like our object hash, keys can be numbers or strings or whatever. as far as Lua functions go, there's no named params, you pass a table if you want to do that (at least in 5.1, when I learned it...don't think that's changed though)

[22:50] <raydiak> not very relevant, just FYI :)

[22:55] <raydiak> though now that I think about it like that...does CBOR::Simple support object hashes? you could theoretically just stuff the positional params into Int keys and the named into Str keys all in one hash. might be more compact. not sure about performance

[23:01] <raydiak> or maybe not more compact since you'd have to store the type of each key. idk, was just a thought

[23:53] *** linkable6 left
[23:53] *** evalable6 left
