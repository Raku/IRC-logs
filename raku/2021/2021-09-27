[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:04] *** evalable6 left
[01:04] *** linkable6 left
[01:07] *** evalable6 joined
[01:29] *** frost joined
[02:29] *** greppable6 left
[02:29] *** releasable6 left
[02:29] *** committable6 left
[02:29] *** statisfiable6 left
[02:29] *** nativecallable6 left
[02:29] *** benchable6 left
[02:29] *** bisectable6 left
[02:29] *** squashable6 left
[02:29] *** tellable6 left
[02:29] *** quotable6 left
[02:29] *** unicodable6 left
[02:29] *** sourceable6 left
[02:29] *** bloatable6 left
[02:29] *** evalable6 left
[02:29] *** shareable6 left
[02:29] *** reportable6 left
[02:29] *** coverable6 left
[02:29] *** notable6 left
[02:30] *** committable6 joined
[02:30] *** sourceable6 joined
[02:31] *** coverable6 joined
[02:31] *** shareable6 joined
[02:31] *** bisectable6 joined
[02:32] *** quotable6 joined
[02:32] *** Eddward joined
[03:29] *** unicodable6 joined
[03:30] *** squashable6 joined
[03:30] *** notable6 joined
[03:31] *** tellable6 joined
[03:31] *** releasable6 joined
[03:31] *** greppable6 joined
[03:56] *** Eddward left
[04:00] *** squashable6 left
[04:00] *** squashable6 joined
[04:15] *** squashable6 left
[04:18] *** squashable6 joined
[04:29] *** evalable6 joined
[04:30] *** nativecallable6 joined
[05:07] *** linkable6 joined
[05:29] *** statisfiable6 joined
[05:30] *** bloatable6 joined
[05:48] *** broquaint left
[05:48] *** renormalist left
[05:48] *** tonyo left
[05:48] *** esh left
[05:48] *** moritz_ left
[05:48] *** moritz joined
[05:48] *** renormalist joined
[05:48] *** esh joined
[05:48] *** broquaint joined
[05:49] *** tonyo joined
[05:54] *** mtj left
[05:54] *** patterner_ left
[05:54] *** nebuchadnezzar left
[05:54] *** juanfra__ left
[05:54] *** phogg left
[05:54] *** polettix left
[05:54] *** wanko left
[05:54] *** ingy left
[05:54] *** Juerd left
[05:54] *** gugod left
[05:54] *** wanko joined
[05:54] *** nebuchadnezzar joined
[05:54] *** patterner_ joined
[05:54] *** polettix joined
[05:55] *** mtj joined
[05:55] *** Juerd joined
[05:56] *** gugod joined
[05:56] *** phogg joined
[05:57] *** ingy joined
[06:00] *** djerius left
[06:02] *** djerius joined
[06:02] *** reportable6 joined
[06:02] *** Sgeo left
[06:14] *** abraxxa joined
[06:22] *** abraxxa left
[06:23] *** abraxxa joined
[06:24] *** jjido joined
[06:29] *** benchable6 joined
[07:22] *** jjido left
[08:11] *** dakkar joined
[08:48] *** patrickb joined
[08:50] *** Xliff left
[09:26] *** squashable6 left
[09:30] *** squashable6 joined
[09:59] *** lizmat_ joined
[10:03] *** lizmat left
[10:08] *** Xliff joined
[10:08] *** lizmat_ left
[10:09] *** lizmat joined
[10:17] <Xliff> Good mornign, #perl6
[10:17] <Xliff> s/#perl6/#raku/
[10:17] <Xliff> One of these days...
[10:19] <discord-raku-bot> <Nemokosch#9980> do these s// notations actually do something on the IRC?
[10:19] <discord-raku-bot> <Nemokosch#9980> or is it just a kind of inside joke
[10:20] <Xliff> Inside joke
[10:20] <Xliff> Although if you preceed anything with "m:", what follows is taken as evalable code by camelia and she'll try and run it.
[10:20] <discord-raku-bot> <Nemokosch#9980> It started being suspicious that there is some kind of bot there as well üòÑ
[10:21] <discord-raku-bot> <Nemokosch#9980> oh okay, that I can see
[10:21] <Xliff> m: say "Hi there!" ~~ m:g/[er]/
[10:21] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´(ÔΩ¢erÔΩ£)‚ê§¬ª
[10:28] *** immediate joined
[10:31] <immediate> hi, out of curiosity :d Is there any way to detect if a passed array is actually an attribute of an instance object?
[10:32] <immediate> *passed to a function
[10:34] <moritz> no, the array knows nothing about where it's referenced
[10:34] <lizmat> well, actually, you can with introspection:
[10:34] <lizmat> m: class A { has @.a }; sub b(\a) { dd a.VAR.name }; b A.new(a => (1,2,3)).a
[10:34] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´"\@!a"‚ê§¬ª
[10:35] <moritz> my experience with introspecting container names is that's not as reliable as you'd want it to be
[10:35] <lizmat> true
[10:35] <lizmat> in any case, that property is being used by "dd"
[10:36] <lizmat> m: class A { has @.a }; dd A.new(a => (1,2,3)).a
[10:36] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´Array @!a = [1, 2, 3]‚ê§¬ª
[10:36] <Xliff> lizmat: Have you played with RakuAST long enough to know which nodes are used in the creation of something like this: "sub a ( &b (Int, Str --> Num) ) { }"
[10:36] <lizmat> Xliff: it's been many months since I've done anything with rakuAST, so I wouldn't know offhand
[10:37] <lizmat> I suggest checking the tests, they all have the intended Raku equivalent source code in comments and/or tests
[10:39] <lizmat> immediate: you're probably better of mixing in a role into whatever values you want to be able to detect
[10:43] <lizmat> m: class A { has @.a = 1,2,3; method TWEAK() { @!a does role { method foo() { } } } }; sub b(\a) { say "{a} is a foo" if a.can("foo") }; b (1,2,3); b A.new.a
[10:43] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´1 2 3 is a foo‚ê§¬ª
[10:43] <lizmat> m: class A { has @.a = 1,2,3; method TWEAK() { @!a does role { method foo() { } } } }; sub b(\a) { say "{a} is a foo" if a.can("foo") }; b (4,5,6); b A.new.a  # clearer
[10:43] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´1 2 3 is a foo‚ê§¬ª
[10:45] <immediate> lizmat: thank you very much!
[10:47] <Xliff> lizmat: Looked. Doesn't seem to be there
[10:47] <Xliff> I'll try and catch jnthn.
[10:53] *** Altai-man joined
[10:59] *** frost left
[11:02] *** patrickb left
[11:14] *** immediate left
[11:18] *** frost joined
[11:32] <discord-raku-bot> <Anton Antonov#7232> What would be the most elegant way to rename the keys in a hash? For example, I have a hash `h0` and a hash `kk` with key-to-new-key mapping. I found the Perl5 module `Hash::Rename` something like that and it was not that hard to re-program it in Raku, (https://metacpan.org/pod/Hash::Rename). But I would rather use Raku "direct" code.
[11:33] <lizmat> %newhash = %hash.map: { %mapper{.key} => .value }
[11:34] <lizmat> you could even .race that if the hash is very big
[11:35] *** squashable6 left
[11:35] <discord-raku-bot> <Anton Antonov#7232> @lizmat Great, thanks!
[11:38] <lizmat> this of course assumes no clashes and no keys added while mapping
[11:38] <discord-raku-bot> <Anton Antonov#7232> @lizmat During the weekend I read the code of your packages `Hash::int`  and `Hash::Agnostic`. Is it a good idea to have a package `Hash::str`? And if yes, should `Hash::str`  it based on `Hash::int` or `Hash::Agnostic`?
[11:41] <lizmat> probably neither
[11:47] <discord-raku-bot> <Anton Antonov#7232> @lizmat Haha, ok!
[11:47] <lizmat> just give me a mo, it's basically just a cat license of Hash::int
[11:48] <discord-raku-bot> <Anton Antonov#7232> Sounds great!
[11:50] <lizmat> well... the speedup for the native str Hash would only be a few %
[11:51] <discord-raku-bot> <Anton Antonov#7232> @liszmat Any speed-up is welcome!
[11:52] <lizmat> nah, just benchmarking it a bit now, it is within noise
[11:52] *** squashable6 joined
[11:53] <discord-raku-bot> <Anton Antonov#7232> Do you think that is across all platforms / OS?
[11:53] <discord-raku-bot> <Anton Antonov#7232> I think it might instructive to see the code anyway...
[11:55] <discord-raku-bot> <Anton Antonov#7232> @lizmat FYI, my motivation for asking for `Hash::str` is to speed-up building of tries-with-frequencies. (Which is a favorite Machine Learning method/approach of mine.) My initial Raku implementation was 100 slower than my Java implementation and 5 times slower than my Mathematica implementation. I was able to reduces those factors by half (40 and 2.2 respectively) but that is still slow.
[12:02] *** reportable6 left
[12:04] <lizmat> Anton Antonov: Hash::str should be available now after a "zef update"
[12:05] *** reportable6 joined
[12:05] <discord-raku-bot> <Anton Antonov#7232> Great! Thank you!
[12:08] <discord-raku-bot> <Anton Antonov#7232> @lizmat And, yes, I found the code here: https://github.com/lizmat/Hash-str .
[12:14] <discord-raku-bot> <Anton Antonov#7232> @lizmat And, yes, I found the code here: https://github.com/lizmat/Hash-str .
[12:27] <Geth> ¬¶ raku-mode: 4ee9045eeb | Altai-man++ (committed using GitHub Web editor) | raku-mode.el
[12:27] <Geth> ¬¶ raku-mode: Bump version to have an update without pkg-info
[12:27] <Geth> ¬¶ raku-mode: 
[12:27] <Geth> ¬¶ raku-mode: @phikal++ for the suggestion.
[12:27] <Geth> ¬¶ raku-mode: review: https://github.com/Raku/raku-mode/commit/4ee9045eeb
[12:30] <Altreus> Having discarded the traditional regex grammar, I don't suppose Raku went a step further and discarded the traditional datetime formatting codes as well?
[12:31] <Altreus> I marvel at the use of many of these, and the logic behind many others
[12:33] <Altreus> %t - a tab character ... as if we can't put a tab character in a string already
[12:33] <lizmat> printf compatibility was rated high
[12:34] <Altreus> strftime not printf
[12:34] <lizmat> meanwhile, I think the rakuAST approach of printf shows how we can easily make something better and be performant (because it will generate code, rather than interpret stuff each time)
[12:34] <Altreus> printf generally has useful codes
[12:34] <lizmat> I don't think we have strftime support in Raku ?
[12:34] <Altreus> oh, then I approve
[12:34] <Altreus> :D
[12:35] <Altreus> ah it has a formatter object
[12:36] <Altreus> I do wish someone would formally name Y-m-dTH:M:S¬±z so we can create meaningful method names
[12:38] <lizmat> m: sub Y-m-dTH:M:S¬±z { }
[12:38] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub Y-m-dTH:M:S7‚èè5¬±z { }‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª
[12:38] <lizmat> m: sub Y-m-dTH:M:S { }
[12:38] <camelia> rakudo-moar ba15173fd: ( no output )
[12:39] <lizmat> too bad about the ¬±   :-)
[12:39] <Altreus> hey wait, you can put a colon in identifiers?
[12:39] <Altreus> Wouldn't it be seen as an adjective?
[12:40] <lizmat> m: sub Y-m-dTH:M:S { dd }; Y-m-dTH:M:S
[12:40] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´sub Y-m-dTH:M:S()‚ê§¬ª
[12:40] <Altreus> m: class Y-m-dTH:M:S {}
[12:40] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use adverb S on a type name (only 'ver', 'auth' and 'api' are understood)‚ê§at <tmp>:1‚ê§------> 3class Y-m-dTH:M:S7‚èè5 {}‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª
[12:40] <lizmat> I don't recall the exact semantics of that, but yes, you can
[12:40] <Altreus> ah
[12:40] <Altreus> that's where it's an adverb
[12:41] <Altreus> class identifiers have different rules :)
[12:41] <lizmat> yup
[12:41] <Altai-man> m: class YouCan't {}; say YouCan't.new;
[12:41] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´YouCan't.new‚ê§¬ª
[12:41] <lizmat> I think they're considered adverby on other identifiers as well
[12:43] <lizmat> https://raku.land/zef:lizmat/Acme::Don't   :-)
[12:44] <Altreus> oh good, Raku was feeling boring without acme
[12:44] <lizmat> https://raku.land/?q=Acme
[12:45] <Altreus> +1 for don't x unless y
[12:46] <Altreus> that's English!
[12:47] *** Eddward joined
[12:59] <Altreus> I have been informed the datetime format I want is in rfc3339
[12:59] <discord-raku-bot> <Anton Antonov#7232> @lizmat Your example here https://github.com/lizmat/Hash-int uses `Hash::str`  (not `Hash::int`.)
[13:00] <lizmat> Antonov: yeah a snafu, I guess I should make an update
[13:02] <Altreus> a thinko
[13:02] <discord-raku-bot> <Anton Antonov#7232> @lizmat Your example here https://github.com/lizmat/Hash-int uses `Hash::str`  (not `Hash::int`.)
[13:03] <Altreus> discord bot may be duplicating messags
[13:03] <lizmat> Antonov: should be fixed now
[13:07] *** jmcgnh left
[13:13] <discord-raku-bot> <Anton Antonov#7232> @lizmat Ok, thanks!
[13:15] *** frost left
[13:20] *** Altai-man left
[13:21] *** Altai-man joined
[13:21] *** jmcgnh joined
[13:26] *** immediate joined
[13:28] *** Altai-man left
[13:30] *** Altai-man joined
[13:53] <discord-raku-bot> <Anton Antonov#7232> @lizmat I programmed a benchmark for `Hash::str` and `Hash::int` -- both are 40-50% faster on my MacBookPro.
[13:54] <discord-raku-bot> <Anton Antonov#7232> @lizmat It looks like though I cannot use `push` on those structures. Is it something that has to be implemented? I.e. should I open issues on the corresponding GitHub repositories?
[14:01] <codesections> I found this surprising.  Any thoughts on whether it's a bug: 
[14:01] <codesections> m: class C {...}; say C.foo; say C.bar; my class C { my $n = 42; method foo { $n }; method bar { 42 }} 
[14:01] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´(Any)‚ê§42‚ê§¬ª
[14:02] <codesections> Specifically, the "this" I'm referring to is that local variables in a class are declared but not assigned in the time between a forward declaration of the class and the actual declaration 
[14:17] *** Sgeo joined
[14:25] *** justsomeguy joined
[14:32] *** justsomeguy left
[14:41] *** justsomeguy joined
[15:14] <lizmat> Antonov: please open issues  :-)
[15:15] *** justsomeguy left
[15:36] <raydiak> codesections: I don't have time to check docs for an explanation, but I for one do find that surprising
[15:37] <raydiak> autopunned roles don't seem to suffer from it, interestingly:
[15:37] <raydiak> m: role C { ... }; C.m; role C { my $foo = 42; method m { say $foo } }
[15:37] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´42‚ê§¬ª
[15:47] <codesections> raydiak, thanks.  If no one chimes up with a reason it's _not_ a bug, I'll open an issue later today
[15:54] <raydiak> if you wanted to check the docs yourself, I'd be searching for something about class composition time and compile vs run time, I strongly suspect it's something to do with those things
[15:55] <raydiak> codesections++ good at shaking out the bugs
[15:55] <raydiak> afk &
[16:12] *** Altai-man left
[16:26] *** tejr left
[16:26] *** tejr joined
[16:35] *** dakkar left
[16:52] <[Coke]> https://www.reddit.com/r/rakulang/comments/pwh3i3/reflections_on_a_decade_of_moarvm_a_runtime_for/ looks nifty. Wonder if there's enough other stuff to make the online attendance package worth it.
[17:35] *** evalable6 left
[17:35] *** linkable6 left
[17:37] *** linkable6 joined
[17:53] <codesections> That does look really interesting.  It looks like at least many of the talk recordings from the 2020 conference were posted online (https://2020.splashcon.org/).  I hope the same is true this year
[17:57] <[Coke]> (y)
[18:03] *** reportable6 left
[18:05] *** reportable6 joined
[18:18] *** peder left
[18:44] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/27/2021-39-programming-haku/
[18:44] *** peder joined
[19:44] *** linkable6 left
[19:57] *** vasko left
[20:04] *** vasko joined
[20:31] <raydiak> thank you lizmat++. if I may offer a correction, in "Jonathan Worthington saw a relative easy way to optimize subroutine calls" "relative" should be "relatively"
[20:35] *** evalable6 joined
[20:37] <[Coke]> wonder how much faster 'zef install HTML::Canvas --deps-only' would be on an M1 mac instead of this ancient beast.
[20:43] <ugexe> dont forget it could be slower depending on how much JIT affects it
[20:44] <ugexe> although when skipping tests everything was a bit faster in zef (presumably due to the extra cores of the m1 vs the previous gen intel i7 macbook)
[20:44] <tonyo> [Coke]: 23s on my m1
[20:44] <tonyo> it also failed
[20:44] <tonyo> ld doesn't have an arm for libfreetype
[20:45] <tonyo> arm arch
[20:50] *** jjido joined
[20:50] *** immediate left
[20:56] <[Coke]> 'zef look' doesn't respect my path. if I change my PATH, then do a 'zef look', I get my default raku, not the one first in my PATH.
[20:57] <tonyo> zef isn't a shell
[21:05] <[Coke]> zef launches a shell. I'm saying the env vars aren't being passed in to the invoked shell
[21:06] <[Coke]> sorry, "zef look" launches a shell.
[21:24] <jdv> why does zef look launch a shell?  weird.  i didn't know about that.
[21:27] <ugexe> cause thats what `panda look ...` did heh
[21:33] <ugexe> and i imagine panda did that  because cpanm does that
[21:33] <jdv> oh
[21:37] <[Coke]> ugexe: does it make sense to try to preserve existing shell env vars or should I not expect that? I no longer need it, but will open a ticket if you like
[21:43] <lizmat> raydiak++  # fixed
[21:46] <ugexe> [Coke]: i'm not sure how that wouldnt already be happening if raku sees it fine since shell passes along %*ENV and the zef look logic is essentially just a 1 liner -- https://github.com/ugexe/zef/blob/1809160b519f58d3586e8a6ec3525aa9cdb37f53/lib/Zef/CLI.rakumod#L881
[21:47] <ugexe> [Coke]: i'm not sure how that wouldnt already be happening if raku sees it fine since shell passes along %*ENV and the zef look logic is essentially just a 1 liner -- https://github.com/ugexe/zef/blob/1809160b519f58d3586e8a6ec3525aa9cdb37f53/lib/Zef/CLI.rakumod#L881
[21:55] <ugexe> for me it seems to work as you expect
[21:56] <ugexe> i.e. if i set `BAR=42` then do `zef look` i can still see BAR as 42
[22:00] <[Coke]> could have been user error, for sure.
[22:01] <[Coke]> my issue was that when I did "which raku" I got the rakubrew raku instead of the one I had first in my PATH before issuing zef look.
[22:01] <ugexe> ah well you probably have something like .bash_profile or some such auto setting that
[22:03] <[Coke]> ... D'oh
[22:05] *** jrjsmrtn left
[22:05] *** gugod left
[22:05] *** jrjsmrtn joined
[22:12] *** gugod joined
[22:16] <[Coke]> so yes, user error. :)
[22:33] *** jjido left
[22:37] *** djerius left
[22:39] *** djerius joined
[22:46] *** linkable6 joined
[22:51] *** vasko4 joined
[22:53] *** vasko left
[22:53] *** vasko4 is now known as vasko
[23:31] *** juanfra left
[23:31] *** AlexDaniel left
[23:32] *** demostanis[m] left
[23:32] *** cnx left
[23:32] *** happy-dude left
[23:47] *** AlexDaniel joined
[23:54] *** happy-dude joined
