[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:05] *** linkable6 joined
[00:13] *** discord-raku-bot left
[00:14] *** discord-raku-bot joined
[00:15] *** discord-raku-bot left
[00:16] *** discord-raku-bot joined
[00:32] *** berber44 joined
[00:46] *** berber44 left
[00:56] *** Xliff left
[01:56] *** linkable6 left
[01:56] *** evalable6 left
[01:57] *** evalable6 joined
[02:00] *** euandreh left
[02:14] *** ggoebel left
[02:33] *** pony left
[02:33] *** euandreh joined
[02:34] *** pony joined
[03:20] *** guifa left
[03:45] *** pony left
[03:46] *** pony joined
[04:08] *** frost joined
[04:31] *** ggoebel joined
[04:56] *** linkable6 joined
[05:00] *** ufobat joined
[06:00] *** notable6 left
[06:00] *** evalable6 left
[06:00] *** bloatable6 left
[06:00] *** linkable6 left
[06:00] *** bisectable6 left
[06:00] *** releasable6 left
[06:00] *** coverable6 left
[06:00] *** sourceable6 left
[06:00] *** reportable6 left
[06:00] *** statisfiable6 left
[06:00] *** shareable6 left
[06:00] *** nativecallable6 left
[06:00] *** squashable6 left
[06:00] *** unicodable6 left
[06:00] *** benchable6 left
[06:00] *** greppable6 left
[06:00] *** committable6 left
[06:00] *** quotable6 left
[06:00] *** tellable6 left
[06:01] *** releasable6 joined
[06:01] *** anser joined
[06:01] *** notable6 joined
[06:01] *** nativecallable6 joined
[06:01] *** unicodable6 joined
[06:01] *** shareable6 joined
[06:02] *** sourceable6 joined
[06:02] <mfiano> Hi. Newbie here, trying to figure out some problem with the repl.

[06:02] <mfiano> Works on 1 line, but not 2: https://i.lisp.cl/kpfZtk.png

[06:03] *** squashable6 joined
[06:03] *** benchable6 joined
[06:07] <elcaro> The REPL doesn't play with some of the more dynamic features of Raku, particulary it doesn't work very well with new operators

[06:07] <elcaro> unless it's all on one line, as you have found

[06:12] <mfiano> Unfortunate

[06:12] <mfiano> Thanks

[06:17] *** ufobat left
[06:27] *** Sgeo_ left
[07:01] *** tellable6 joined
[07:01] *** linkable6 joined
[07:01] *** committable6 joined
[07:02] <moon-child> m: say &[-](5)

[07:02] <camelia> rakudo-moar 40bf3f3e8: OUTPUT: «5␤»

[07:02] <moon-child> should ^^ not be -5?

[07:03] *** bisectable6 joined
[07:03] <moon-child> weirder is this

[07:03] <moon-child> m: say <1 2 3>.map(&[-]); say <1 2 3>.map(&[~])

[07:03] <camelia> rakudo-moar 40bf3f3e8: OUTPUT: «(-1 3)␤(1 2 3)␤»

[07:04] <moon-child> I understand each behaviour in isolation, but they seem inconsistent

[07:04] <gfldex> m: say prefix:<->(5)

[07:04] <camelia> rakudo-moar 40bf3f3e8: OUTPUT: «-5␤»

[07:05] <gfldex> m: say infix:<->(5)

[07:05] <camelia> rakudo-moar 40bf3f3e8: OUTPUT: «5␤»

[07:05] <moon-child> because:   multi sub infix:<->($x = 0) { $x.Numeric }

[07:06] <gfldex> &[-] defaults to infix by design

[07:06] <moon-child> yes.  The question is, why does infix - with one param not negate?

[07:06] <moon-child> and given it does not, why does infix ~ with one param stringify?

[07:08] <gfldex> Because, no matter the multicandidate, operators coerce and guarantee to return a specific type.

[07:09] <moon-child> neither &infix:<->'s proto nor &infix:<~>'s guarantee a specific return type; so it is purely conventional

[07:10] <gfldex> Roast demands them to.

[07:11] <moon-child> that's fine, but I want to know why?

[07:11] <moon-child> (also about the discrepancy between the map results)

[07:12] <gfldex> Because Larry said so, basically. It is a fundamental design principle not to confuse humans with overloading the same operator over and over again.

[07:13] <gfldex> If you see `~`, you know you gonna get a Str.

[07:13] <moon-child> I mean, why does &[-](5) != -5?

[07:14] <gfldex> Becaue [stuff] is a reduction operator and those are defined to take an infix as a function argument.

[07:14] <moon-child> yes, the question is why does &infix:<-> not negate when called with one parameter?

[07:15] <gfldex> Thus, even with higher order operator programming, you know what you gonna get.

[07:53] *** TempIRCLogger joined
[07:56] *** moon-child is now known as Mondenkind

