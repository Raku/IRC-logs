[00:02] *** guifa2 joined
[00:24] *** dogbert17 joined
[00:28] *** dogbert12 left
[00:30] *** marcusr left
[00:31] *** Garbanzo joined
[00:32] *** marcusr joined
[01:04] *** Garbanzo left
[01:26] *** MasterDuke left
[01:51] *** pecastro left
[02:05] *** kvw_5 joined
[02:08] *** kvw_5_ left
[02:36] *** gnufr33dom joined
[02:53] *** rindolf joined
[03:53] *** quotable6 left
[03:53] *** greppable6 left
[03:53] *** notable6 left
[03:53] *** bloatable6 left
[03:53] *** committable6 left
[03:53] *** bisectable6 left
[03:53] *** linkable6 left
[03:53] *** nativecallable6 left
[03:53] *** statisfiable6 left
[03:53] *** coverable6 left
[03:53] *** unicodable6 left
[03:53] *** shareable6 left
[03:53] *** evalable6 left
[03:53] *** benchable6 left
[03:53] *** squashable6 left
[03:53] *** releasable6 left
[03:53] *** tellable6 left
[03:53] *** sourceable6 left
[03:54] *** evalable6 joined
[03:54] *** committable6 joined
[03:54] *** nativecallable6 joined
[03:54] *** releasable6 joined
[03:54] *** bisectable6 joined
[03:54] *** sourceable6 joined
[03:54] *** tellable6 joined
[03:54] *** bloatable6 joined
[03:55] *** linkable6 joined
[03:55] *** coverable6 joined
[03:55] *** greppable6 joined
[03:55] *** shareable6 joined
[03:56] *** benchable6 joined
[03:56] *** squashable6 joined
[03:56] *** notable6 joined
[03:56] *** statisfiable6 joined
[03:56] *** unicodable6 joined
[03:56] *** quotable6 joined
[04:56] *** coverable6 left
[04:56] *** quotable6 left
[04:56] *** sourceable6 left
[04:56] *** unicodable6 left
[04:56] *** greppable6 left
[04:56] *** bloatable6 left
[04:56] *** nativecallable6 left
[04:56] *** committable6 left
[04:56] *** benchable6 left
[04:56] *** notable6 left
[04:56] *** statisfiable6 left
[04:56] *** tellable6 left
[04:56] *** squashable6 left
[04:56] *** bisectable6 left
[04:56] *** releasable6 left
[04:56] *** shareable6 left
[04:56] *** linkable6 left
[04:56] *** evalable6 left
[04:56] *** squashable6 joined
[04:57] *** shareable6 joined
[04:57] *** tellable6 joined
[04:57] *** linkable6 joined
[04:57] *** sourceable6 joined
[04:57] *** nativecallable6 joined
[04:57] *** greppable6 joined
[04:57] *** notable6 joined
[04:58] *** benchable6 joined
[04:58] *** committable6 joined
[04:58] *** unicodable6 joined
[04:58] *** statisfiable6 joined
[04:58] *** releasable6 joined
[04:59] *** quotable6 joined
[04:59] *** evalable6 joined
[04:59] *** bloatable6 joined
[04:59] *** coverable6 joined
[04:59] *** bisectable6 joined
[05:57] *** xinming joined
[05:59] *** mowcat left
[06:24] *** sno left
[06:27] *** wamba joined
[06:28] *** sortiz left
[06:28] <summerisle> getting some strange behaviour with the CLI features with a `sub MAIN( Str :@i ) { * }`. It only ever prints usage, even if any positionals are satisfied

[06:31] *** kaiwulf left
[06:36] *** __jrjsmrtn__ left
[06:36] *** __jrjsmrtn__ joined
[06:40] *** sno joined
[06:40] <guifa2> That signature doesn't have any positionals?

[06:49] *** jmerelo joined
[07:02] *** wamba left
[07:02] *** jmerelo left
[07:04] <moritz> summerisle: that's because the command line doesn't offer any way to provide typed arrays

[07:04] <moritz> $ raku  -e 'sub MAIN(  :@i) { say @i }' --i=foo --i=bar

[07:04] <moritz> [foo bar]

[07:04] <moritz> without the Str it works

[07:05] *** jmerelo joined
[07:06] <summerisle> interesting, thanks.

[07:21] <summerisle> next question is, i suppose, is there a way to get the command line to accept parameters as `-I <value>` as opposed to `-I=<value>` without implementing that functionality myself? i'm trying to implement a drop-in replacement for another command-line tool for reasons of laziness.

[07:22] <moritz> I'd not think you easily can; maybe take a look if there's a module for that?

[07:22] *** stoned75 joined
[07:27] *** domidumont joined
[07:32] *** parabolize left
[07:35] *** ufobat_ joined
[07:36] *** aborazmeh joined
[07:36] *** Sgeo left
[07:43] *** wamba joined
[07:54] *** aborazmeh left
[08:16] <El_Che> I wrote a module that does that, but it does not support enums yet

[08:17] <El_Che> https://github.com/nxadm/SuperMAIN

[08:18] <El_Che> (it's a drop-in, no new syntax or semantics, just add the functionality)

[08:19] <El_Che> (I didn't even know you could define enums for inputs :) )

[08:24] *** Discipulus joined
[08:50] *** Scimon joined
[08:57] *** dakkar joined
[09:07] *** pecastro joined
[09:09] *** patrickb joined
[09:31] *** cooper left
[09:32] *** ambs joined
[09:33] *** stux|RC joined
[09:33] *** cooper joined
[09:39] *** gnufr33dom left
[09:51] *** asymptotically left
[09:52] *** asymptotically joined
[09:53] *** wamba left
[09:57] *** wamba joined
[10:57] *** linkable6 left
[10:57] *** evalable6 left
[10:59] *** evalable6 joined
[11:00] *** linkable6 joined
[11:25] *** wamba left
[11:25] <El_Che> weekly: https://nxadm.wordpress.com/2021/02/11/rakudo-pkg-v2/

[11:25] <notable6> El_Che, Noted! (weekly)

[11:50] *** Black_Ribbon left
[12:04] *** MasterDuke joined
[12:16] *** squashable6 left
[12:16] *** squashable6 joined
[12:26] *** gabiruh left
[12:26] *** gabiruh joined
[12:29] *** leont joined
[12:33] *** wamba joined
[12:35] <Scimon> Looks great! :)

[12:39] *** Discipulus left
[12:41] <El_Che> Scimon: thx :)

[12:42] <El_Che> I am a bourne shell and Github Actions ninja now :P

[12:47] <Scimon> I need to take a look at the Actions. I've spent a lot of time doing gitlab pipelines recently.

[12:48] <El_Che> I spent a lot of time on travis trying to fit my kind-of-extreme use

[12:48] <El_Che> and at works Jenkinspipe on Groovy

[12:48] <El_Che> Github Action are very nice, but the info is all over the place

[12:49] *** Discipulus joined
[12:49] <Scimon> I have got a deeper appreciation of good documentation over the years.

[12:51] <El_Che> yeah, certainly

[13:00] <andinus> can i find a list of feeds pl6net fetches from?

[13:00] <andinus> s/a/the

[13:01] <El_Che> ping rba ==^

[13:02] <El_Che> (mm, maybe a good place for the rakudo-pkg-v2 post, so people know they need to change their repo config)

[13:03] <El_Che> (for now they won't receive new versions, and in may Bintray will kill the old repos)

[13:10] *** aluaces left
[13:14] *** aluaces joined
[13:16] <lizmat> andinus: https://github.com/Raku/planet.raku.org/blob/master/perlanetrc

[13:17] <El_Che> (no filtering on tag?)

[13:22] *** MitarashiDango[m joined
[13:32] *** AncientWizard joined
[13:37] <AncientWizard> I've come here to share difficulties using Raku as a replacement for Perl5. I'm hoping to find others that have solved the problems I've found. I've used the Raku doc's but failed to find the golden nugget

[13:39] <Scimon> What is the problem you're having? (I've found Stack Overflow can be a good place for questions too, there's some good answers to a lot of stuff and you can give longer explantions).

[13:39] <andinus> lizmat: thanks

[13:39] <AncientWizard> I'm attempting to replace a workplace pel5 app with one written in Raku.

[13:40] <Scimon> Ok. But there must be specific issues you're coming across? 

[13:40] <AncientWizard> I have looked online but no matches.

[13:42] <El_Che> (completely next to the point, but I find it more productive to write new apps for a new itch instead of replacing older ones that work)

[13:43] <Scimon> You can't just drop a Perl5 app into Raku and expect it to work. If you're VERY VERY lucky (and it's very simple) it will but there is no direct compatibility.

[13:43] <AncientWizard> It has to do with symbol lookups.Â  If appears that the only successful lookups are for symbols i locally called in using 'use Mod::B;'

[13:44] *** jmerelo left
[13:44] <AncientWizard> No worries it a code rewrite

[13:44] <lizmat> AncientWizard: you might be interested in these remastered blog posts from 2018: https://github.com/Raku/CCR/blob/main/Remaster/Elizabeth%20Mattijsen/Migrating-to-Raku-Series.md

[13:44] <El_Che> and this oldie: https://perl6advent.wordpress.com/2014/12/10/day-10-introspecting-the-symbol-tables/

[13:45] <Scimon> Raku's scoping and exports are more rigorous than Perls in a lot of places. `use`ing a module won't import all the symbol table. 

[13:45] <lizmat> and it will only import them in the lexical scope of the 'use- statement

[13:45] <Scimon> You may want to look at https://docs.raku.org/language/modules#index-entry-sub_EXPORT and https://docs.raku.org/language/modules#is_export 

[13:45] <Scimon> That.

[13:45] <AncientWizard> If mod a calls in mod b then b can do a use on a and then b can't lookups on a

[13:46] <AncientWizard> B cant

[13:46] <Scimon> So you want to make a circular dependency? 

[13:46] <AncientWizard> No

[13:46] <Scimon> A uses B and B uses A? 

[13:47] <Scimon> Sorry just trying to understand.

[13:47] <AncientWizard> But b need to test if a is there and call a sub

[13:48] <Scimon> So you got mdule B and it's used A and you then want to call a sub in A? 

[13:48] <AncientWizard> If not there then do nothing. I wat to us a features if a is in memory

[13:48] <Scimon> Ahhh... So you want to *try* and load A? 

[13:49] <AncientWizard> No not load

[13:49] <El_Che> import

[13:49] <MasterDuke> https://modules.raku.org/dist/if:github:github:FROGGS maybe?

[13:49] <AncientWizard> Symbol check

[13:49] <AncientWizard> This is like p5 eval for a sub

[13:50] <Scimon> See this is the kind of deep make Perl stuff I try and avoid most of the time so have never really looked into doing it in Raku. 

[13:52] <AncientWizard> My p5 app is about 280k lines of source. Very cool

[13:52] <Scimon> Nice :)

[13:53] <AncientWizard> Let me add a story this

[13:53] <AncientWizard> In this case mod b is a console builder but it cat be sure what features are built in to app

[13:54] <AncientWizard> Can't be

[13:55] <AncientWizard> So it tests for N known features and only calls those those it can find to add their bits to the console

[13:57] *** dakkar left
[13:58] <Scimon> So... you want to know if a given module exists to be loaded? 

[13:58] <AncientWizard> I use this same technique when doing DB writes. If a data producer does not want to wait for a DB write it can check for the mod that will bulk up and background that work. I.E. delegates it so it can move on to the next work item

[14:01] <AncientWizard> App is Event driven and manages 90+ security scans in parallel

[14:03] <Scimon> m: my $exists = ::("A");say $exists.?exception

[14:03] <evalable6> Scimon, rakudo-moar 3235f3e42: OUTPUT: Â«No such symbol 'A'â¤Â»

[14:04] <Scimon> So that looks to see if A is in the lexical scope. If not it returns a failure that I then look to see if it's got an exception method.

[14:04] <Scimon> https://docs.raku.org/language/packages#Interpolating_into_names Might help?

[14:04] <AncientWizard> If so :('Some::mod') ...

[14:05] <AncientWizard> Will always be false unless use Some::mod; is in the same file

[14:06] <Scimon> Yes. Because modules are lexically scoped not globally.

[14:07] <AncientWizard> Even if the use was already called in file a file read before this

[14:07] <Scimon> Yes because that use would be in that packages scope.

[14:07] <AncientWizard> But the symbol is an our class

[14:08] <AncientWizard> By default

[14:08] <Scimon> our defines a variable to be Package scoped. So it's not leaking out into Global scope. 

[14:10] <AncientWizard> Any chance I'm doing the lookup wrong

[14:10] *** dakkar joined
[14:11] <Scimon> m: module A { our $x = 5 }; module B { import A; our $ax = $A::x; };say $B::x;say $A::x;say $B::ax'

[14:11] <evalable6> Scimon, rakudo-moar 3235f3e42: OUTPUT: Â«(exit code 1) 04===SORRY!04=== Erâ¦Â»

[14:11] <evalable6> Scimon, Full output: https://gist.github.com/2a657ba758458b5f199a31b1d4f198e8

[14:11] <Scimon> m: module A { our $x = 5 }; module B { import A; our $ax = $A::x; };say $B::x;say $A::x;say $B::ax

[14:11] <evalable6> Scimon, rakudo-moar 3235f3e42: OUTPUT: Â«(Any)â¤5â¤5â¤Â»

[14:12] * lizmat plugs the CCR project by showing yours truly's list of remastered blog posts: https://github.com/Raku/CCR/blob/main/Remaster/Elizabeth%20Mattijsen/README.md

[14:12] <lizmat> https://github.com/Raku/CCR/blob/main/README.md

[14:13] <Scimon> lizmat++

[14:14] <Scimon> I think you might need to rethink how you're going about it AncientWizard.

[14:16] <AncientWizard> In case I confused things my mods are classes no actual units or module. class a::thing ...

[14:17] <Scimon> For me this feels like a perfect case for config files and runtime class loading with require. 

[14:20] <AncientWizard> Unfortunately its a long discussion about cutting dependencies and writing for test. It sometimes means more code but it has paid off

[14:21] <AncientWizard> I make every attempt to cut hard depends so testing can toss in adapters

[14:22] <Scimon> Hmmm. All I can think of is putting a more detailed example on Stack Overflow, there's a few of us there who may be able to help work out what to do.

[14:24] <AncientWizard> Agreed. Sadly I can't do that from work. Doing irc from phone is painful

[14:24] *** wamba left
[14:25] <Scimon> https://stackoverflow.com/questions/66155502/best-way-to-check-optional-module-availability : Was this the question?

[14:26] <AncientWizard> I still believe I should be able to look up any global or our scoped symbol so long as use was performed at least ones before I look

[14:29] <AncientWizard> Sorry not the solution. The module is on disk but its not this code responsibly to load it. Its more like is this feature in memory then run it otherwise move on

[14:42] *** AncientWizard left
[15:06] *** wamba joined
[15:15] *** gnufr33dom joined
[15:20] *** patrickb left
[15:24] *** Sgeo joined
[15:41] *** Sgeo left
[15:41] *** Sgeo joined
[15:45] *** wamba left
[15:46] *** gnufr33dom left
[15:51] *** parabolize joined
[15:51] *** shadowpaste joined
[15:52] *** codesections joined
[15:52] <codesections> o/

[15:57] *** patrickb joined
[15:58] *** jmerelo joined
[15:59] <tyil> \o

[16:07] <guifa2> doth mine eyes deceive me? codesections in IRC again? ;-)

[16:16] *** orinthe left
[16:21] *** orinthe joined
[16:27] *** orinthe9 joined
[16:29] *** orinthe left
[16:33] *** orinthe9 left
[16:34] <tonyo> Scimon: if he wants to look at whether it's installed first he can comb $*REPO using .candidates("X") and .next-repo

[16:40] *** vrurg joined
[16:40] *** kaiwulf joined
[16:42] *** orinthe joined
[17:03] <codesections> guifa2: haha, yeah, I kept not logging on â in part because I was down a screen and don't have a good client set up.  But I'm going to try to be around a bit more :D

[17:04] *** vrurg left
[17:06] *** vrurg joined
[17:06] <guifa2> so I was thinking that the pack/unpack functions have been experimental and not given much love.  They're also very confusing

[17:06] <guifa2> confusing = I have to look at the docs everytime to regrok what stuff does

[17:06] <guifa2> maybe we should consider a totally different approach, eg

[17:07] <Scimon> I don't think the original Perl pack or unpack are the easiest to understand. 

[17:07] <guifa2> well, that's also true 

[17:08] <Scimon> (I'm not disagreeing with you just making the point ;) )

[17:09] <guifa2> my $bin = pack {Â pack $foo :int8; pack $bar :int16; pack $str :str for @str-array }

[17:09] <guifa2> or

[17:10] <guifa2> my $bin = pack {Â store-int8 $foo; store-int16 $bar; store-str $str for @str-array }

[17:10] *** dakkar left
[17:11] <codesections> would there be a way to take inspiration from JSON::Fast?

[17:13] <guifa2> codesections: that just uses to-json and from-json; packing has a few more options that can't be quite so succinctly summed up I don't think

[17:13] <guifa2> In effect, it doesn't really do anything you can't do with buf operations, it was just supposed to âin theoryâ make it easier

[17:14] <guifa2> the cool power could be in the unpack.  Currently unpack just returns a list, so you'd do

[17:14] <guifa2> my ($a, $b, $c) = unpack(â¦);

[17:14] <guifa2> Using a block, assignment could be enabled

[17:15] <guifa2> unpack {Â $a = unpack :int; $b = unpack :int; }Â or something

[17:16] <guifa2> I'd definitely need to think through it carefully to consider all the possibilities, but I think something oculd be done to make it actually useful

[17:18] *** vrurg left
[17:20] <Discipulus> some interesting update on * glob expansion on cmd.exe at https://www.perlmonks.org/?node_id=11128174

[17:20] <codesections> maybe something like `my $bin = pack({ :foo(int8), :bar(int16), :str(Str) }, @str-array)` (where the first arg is a Hash, not a block)?

[17:21] *** sortiz joined
[17:21] <Discipulus> feel free to answer here or there

[17:25] *** Scimon left
[17:26] <sortiz> Discipulus: Yesterday I lost my internet connection. I will write down my findings later. 

[17:26] *** dakkar joined
[17:27] <Discipulus> soritz: great! irc you had different behaviours, no? If you read newer posts they can explain this weirdness

[17:30] *** vrurg joined
[17:33] *** dakkar left
[17:35] *** rindolf left
[17:51] *** stoned75 left
[17:56] <sortiz> Discipulus: I can confirm that, in Windows, the behavior depends of the libraries linked. A raku build with Microsoft tools don't expands, but one build with mingw tools does.

[18:00] *** aborazmeh joined
[18:01] <sortiz> With rakubrew is easy to reproduce as I can download some raku versions, all precompiled with MS tools, but can build others if you has strawberry perl installed.

[18:04] <Discipulus> sortiz: great! 

[18:06] *** DiffieHellman joined
[18:16] <Discipulus> so now it could interesting to try buildin perl with mingw tools to see if it expands! :)

[18:19] <sortiz> No, strawberry perl is build that way and don't expands.

[18:24] *** domidumont left
[18:40] <Discipulus> no way to build another perl?

[18:53] <sortiz> I commented in PerlMonks.

[18:54] <Discipulus> oh great!

[18:55] *** Sgeo left
[18:55] *** Sgeo joined
[18:57] *** squashable6 left
[18:58] *** jmerelo left
[18:58] *** squashable6 joined
[18:58] *** stoned75 joined
[19:05] *** wamba joined
[19:31] *** defaultxr joined
[19:54] *** ufobat__ joined
[19:58] *** ufobat_ left
[20:02] *** rindolf joined
[20:36] *** patrickb left
[20:36] *** rindolf left
[20:41] *** sortiz left
[20:49] *** ufobat__ left
[20:55] *** leah2 joined
[21:02] *** aindilis left
[21:48] <guifa2> vrurg: re Raku conf.  I'm crazy (academic) talking here, but maybe in lieu of (or inaddition to) sponsorships we could shortly afterwards publish a quick proceeds of the conference for people who want to fork over $X to donate to TPF/TRF to support grants and run it through a print-on-demand service.  Keepsake + reference material

[21:51] *** johann1 joined
[21:52] <vrurg> guifa2: one thing I'm certain about: what you say is beyond my English abilities. :) I hardly understand your point.

[21:53] <guifa2> I ramble sometimes, feel free to yell at me for it :-)

[21:53] <guifa2> Instead of (or in addition to) trying to get sponsorships for money, perhaps we could give incentives for someone to be a paid "attendee".

[21:53] <vrurg> Me too. Sometimes thinking runs fast and talking/writing lags behind. The outcomes are usually messy. :)

[21:54] <guifa2> People have an interest in Raku books, etc, so perhaps we could publish proceedings of the conference (basically, a short book[let]) so people could have a reference copy of the presentations.  

[21:54] <guifa2> A nice keepsake, basically, but functional

[21:56] <johann1> Where would I have to look to find a precise definition of what "\s" matches? Thinking of a list of code points.

[21:56] <vrurg> I think the best is to have all possible options here. Having choice is always the best. Though I'm not sure a print on demand service could produce any substantial outcome.

[21:56] <vrurg> johann1: It should be on Regex documentation page. I think I saw it there.

[21:57] <johann1> I looked at https://docs.raku.org/language/regexes#\s_and_\S but it does not give a definition just "a single whitespace character"

[21:58] *** Discipulus left
[21:59] <guifa2> johann1: it's anything that's defined in Unicode as a spacing character

[22:01] <guifa2> basically, it's equivalent to <:Z+[\r\n\t]>

[22:01] <guifa2> (because Unicode considers tab, CR and LF as control characters rather than spacing characters)

[22:02] <johann1> in other words everything marked as "White_Space" in this file https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt ?

[22:03] *** Garbanzo joined
[22:03] *** wamba left
[22:04] <guifa2> johann1: correct

[22:04] *** johann1 left
[22:05] *** aindilis joined
[22:07] <guifa2> vrurg: true.  FWIW, based on some quick quotes, we could print a 100-page, hardbound book for ~$10 each.  I dunno, I'm weird.  I like books :-P

[22:12] <vrurg> guifa2: We'll where it goes. Overall I like the idea.

[22:16] *** aborazmeh left
[22:16] *** Garbanzo left
[22:27] *** wamba joined
[22:36] <codesections> guifa2: the thing is though, at an academic conference, most of the presentations are of papers, and then the proceeding include those papers.  But it seems like we mostly write presentations from scratch (rather than, say, adapting a blog post).  So what would go in the proceedings? 

[22:36] <guifa2> codesections: it depends on the conference

[22:36] <guifa2> the ones i go to, proceedings are written after the fact

[22:38] <codesections> oh, interesting.  But still by each speaker?

[22:39] <guifa2> Yeah.  My thinking was a lot of us could adapt our presentations to a written form within two or three weeks of giving it.  I could then stitch it together in InDesign, and have it off to the printers shortly thereafer.

[22:40] *** kawaii left
[22:40] <guifa2> (in a lot of cases, it's copy paste stuff off of our slides, and add some connecting prose, really.  And if someone can't do theirs, I could probably speech-to-text them, and edit it togehter into something quick)

[22:41] *** mithaldu_ left
[22:41] *** mithaldu_ joined
[22:41] <codesections> Hmm, I do like that idea, but my concern is that people might not volunteer to give a talk if they don't have time to write it up after (or just don't like writing).  Even if it's technically optional, I'd worry that it could scare people off.

[22:41] *** kawaii joined
[22:43] <codesections> Here's a related idea I've been toying around with suggesting: what if we published a "best of Raku essays" out of lizmat's blog-post remastering project?  Maybe with quick intros to each one providing context?

[22:44] <guifa2> ^^^I was literally just thinking another thing could be a "Best of Raku 2020", "Best of Raku 2021" and each year do that with some of the blogs, posts, presentations, etc

[22:44] <codesections> (When I was imagining proposing it, I was thinking that I'd volunteer to be the editor and write the connective bits, but it could be any of us/multiple people)

[22:44] <lizmat> codesections: those are definitely ideas that one could work with

[22:44] *** wamba left
[22:46] <codesections> Ok, well I think I'll write up a few thoughts slightly more formally and open an issue on the repo for the blog project

[22:48] *** aluaces left
[22:49] <lizmat> codesections++

[23:20] <jdv79> is publicity a real issue?

[23:24] <jdv79> i used raku for one project professionally and like mr lembark it eats mem.  hard to advocate for a slowish lang that also eats mem:(

[23:32] *** xelxebar left
[23:33] *** xelxebar joined
[23:44] <MasterDuke> jdv79: can you create an issue? real code linked in it would be great

