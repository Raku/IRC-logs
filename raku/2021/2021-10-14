[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:10] *** swaggboi left
[00:14] *** linkable6 joined
[00:56] *** swaggboi joined
[00:56] *** frost joined
[01:10] <discord-raku-bot> <Petr#9247> i have troubles with Gumbo parser in Windows.

[01:10] <discord-raku-bot> <Petr#9247> Slowed ))

[01:12] <discord-raku-bot> <Petr#9247> problem solved

[01:28] *** pony left
[01:29] *** pony joined
[02:01] *** no-n joined
[02:04] *** pony left
[02:10] *** no-n left
[02:22] *** ggoebel left
[02:37] *** berber44 joined
[02:39] *** berber44 left
[03:39] *** linkable6 left
[03:39] *** quotable6 left
[03:39] *** greppable6 left
[03:39] *** statisfiable6 left
[03:39] *** reportable6 left
[03:39] *** evalable6 left
[03:39] *** squashable6 left
[03:39] *** bisectable6 left
[03:39] *** notable6 left
[03:39] *** sourceable6 left
[03:39] *** committable6 left
[03:39] *** nativecallable6 left
[03:39] *** benchable6 left
[03:39] *** coverable6 left
[03:39] *** shareable6 left
[03:39] *** tellable6 left
[03:39] *** unicodable6 left
[03:39] *** releasable6 left
[03:39] *** bloatable6 left
[03:39] *** nativecallable6 joined
[03:39] *** tellable6 joined
[03:39] *** benchable6 joined
[03:39] *** notable6 joined
[03:40] *** statisfiable6 joined
[03:40] *** sourceable6 joined
[03:40] *** committable6 joined
[03:42] *** reportable6 joined
[03:42] *** bisectable6 joined
[03:42] *** shareable6 joined
[03:44] *** jess left
[03:45] *** jess joined
[03:46] *** pony joined
[04:39] *** releasable6 joined
[04:39] *** evalable6 joined
[04:42] *** linkable6 joined
[04:42] *** coverable6 joined
[04:42] *** unicodable6 joined
[05:16] *** berber44 joined
[05:34] *** berber44 left
[05:35] *** anser joined
[05:39] *** bloatable6 joined
[05:40] *** MasterDuke left
[05:41] *** quotable6 joined
[05:41] *** squashable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:11] *** andinus left
[06:12] *** Sgeo left
[06:23] *** Doc_Holliwould left
[06:36] *** ufobat joined
[07:12] *** MasterDuke joined
[07:41] *** greppable6 joined
[08:16] *** ufobat left
[08:22] <discord-raku-bot> <Nemokosch#9980> hi, what does "moar-blead" mean at the backend options?

[08:25] <MasterDuke> HEAD of the three repos (rakudo, nqp, moarvm), instead of the version specified in the (MOAR|NQP)_REVISION files

[08:26] <MasterDuke> a pun on "the bleeding edge"

[08:28] *** tejr left
[08:29] <discord-raku-bot> <Nemokosch#9980> okay, thanks üëÄ

[08:29] *** tejr joined
[08:42] <_________> m: !!! !!

[08:42] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Prefix ! requires an argument, but no valid term found.‚ê§Did you mean ! to be an opening bracket for a declarator block?‚ê§at <tmp>:1‚ê§------> 3!!! !!7‚èè5<EOL>‚ê§    expecting any of:‚ê§        p‚Ä¶¬ª

[08:42] <_________> m: !!!

[08:42] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Stub code executed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:29] *** linkable6 left
[09:29] *** evalable6 left
[09:34] *** Kaiepi left
[09:34] *** Kaiepi joined
[10:11] <mfiano> Can someone point me to any style convention guide?

[10:14] *** tejr left
[10:16] <discord-raku-bot> <Nemokosch#9980> Is that even a thing in the Perl world? üòÇ

[10:17] <mfiano> I am unsure. I am new to Perl in general, but most languages have a recommendation of either tabs or spaces, how many to use for indentation, maximum number of columns, etc

[10:20] <discord-raku-bot> <Nemokosch#9980> https://raku.guide/ just found something

[10:21] <discord-raku-bot> <Nemokosch#9980> > 

[10:21] <discord-raku-bot> <Nemokosch#9980> > Naming conventions:

[10:21] <discord-raku-bot> <Nemokosch#9980> > 

[10:21] <discord-raku-bot> <Nemokosch#9980> >     Camel case: variableNo1

[10:21] <discord-raku-bot> <Nemokosch#9980> > 

[10:21] <discord-raku-bot> <Nemokosch#9980> >     Kebab case: variable-no1

[10:21] <discord-raku-bot> <Nemokosch#9980> > 

[10:21] <discord-raku-bot> <Nemokosch#9980> >     Snake case: variable_no1

[10:21] <discord-raku-bot> <Nemokosch#9980> > 

[10:21] <discord-raku-bot> <Nemokosch#9980> > You are free to name your identifiers as you like, but it is good practice to adopt one naming convention consistently.

[10:21] <discord-raku-bot> <Nemokosch#9980> lol thank you very much

[10:21] <discord-raku-bot> <Nemokosch#9980> üòÑ

[10:22] <MasterDuke> you could look at the rakudo source. it doesn't have any hard and fast rules, but you'll see mostly similar formatting/etc with some individual differences

[10:22] *** andinus joined
[10:22] <discord-raku-bot> <Nemokosch#9980> I have the impression that kebab case is popular for example

[10:23] <mfiano> I was mostly wondering about indentation space count and max line length. But fair enough if there is none

[10:24] * lizmat personally keeps at 4 and 80

[10:24] <mfiano> (currently configuring my editor so those are the only conventions needed right now)

[10:24] <lizmat> with 2 spaces for non-scoped things

[10:25] <mfiano> I see. Ok, thanks. I just believe code is read more than it is written, and some language communities feel strongly about these things.

[10:25] * MasterDuke uses 4 and ~120

[10:25] <discord-raku-bot> <Nemokosch#9980> My vague idea of the overall Perl community is that people aren't into these formalisms

[10:26] <lizmat> fwiw, I think internal consistency is most important

[10:26] <mfiano> Indeed.

[10:31] *** evalable6 joined
[10:33] *** ggoebel joined
[10:36] <Kaiepi> ditto MasterDuke 

[10:38] <Xliff_> does Raku have something similar to XML::Class, but for JSON?

[10:44] <lizmat> https://raku.land/?q=JSON  ??

[10:47] <mfiano> Nice. The stats link on that page suggests a nice yearly growth rate over the last couple years.

[11:01] <Xliff_> Huh. JSON::Class is there. Why didn't my initial search find it?

[11:05] *** ggoebel left
[11:10] *** pony left
[11:27] *** squashable6 left
[11:58] *** vasko left
[11:58] *** vasko joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:49] *** xinming_ left
[13:32] *** linkable6 joined
[13:41] *** squashable6 joined
[13:53] *** frost left
[13:58] *** anser left
[14:00] *** eseyman_ left
[14:28] *** Sgeo joined
[14:45] *** RaycatWhoDat joined
[14:46] <RaycatWhoDat> Man, I gotta say... Adding Array types to signatures or making types that use Array do not feel intuitive

[14:47] <RaycatWhoDat> I tried doing something to the tune of `subset IntArray of Array[Int] where * > 0; sub print(IntArray @numbers) { .say for @numbers; }`

[14:47] <RaycatWhoDat> What's the correct way to do something like this in Raku?

[14:47] *** melezhik joined
[14:47] <melezhik> .

[14:47] <tellable6> 2021-10-13T22:53:45Z #raku <tbrowder> melezhik a selection by language would be useful (don't forget Perl)

[14:48] <melezhik> tbrowder I will take a look at what I can do, thanks for suggestion 

[14:48] <melezhik> there is also https://github.com/melezhik/mybfio in case someone wants to drop an idea or a bug is found

[14:49] <melezhik> I have added small unicode icons for https://mybf.io rating page, so users can see the last action happened to projects ... 

[14:49] <Xliff_> RaycatWhoDat: What happens when you do that, do you have that piece of code on the web somewhere? (ala tio or repl.it)

[14:50] <RaycatWhoDat> Lemme get that 

[14:51] <MasterDuke> RaycatWhoDat: do you want that sub to take an array *of* IntArrays? or just one IntArray?

[14:52] <RaycatWhoDat> One Array of Ints where each element is greater than 0

[14:52] <RaycatWhoDat> glot.io/snippets/g3a7q50p6t

[14:52] <RaycatWhoDat> err

[14:52] <RaycatWhoDat> https://glot.io/snippets/g3a7q50p6t

[14:55] <Altreus> it complains even if you just say "subset IntArray of Array"

[14:56] <Altreus> RaycatWhoDat: if you do (IntArray $numbers) it works

[14:56] <RaycatWhoDat> ?

[14:56] <RaycatWhoDat> Why would it need to be a scalar there?

[14:56] <Altreus> no it doesn't

[14:56] <Altreus> cos it accepts 0 :D

[14:57] <discord-raku-bot> <Nemokosch#9980> wait what

[14:58] <RaycatWhoDat> I got it

[14:58] <discord-raku-bot> <Nemokosch#9980> got what?

[14:58] <RaycatWhoDat> https://glot.io/snippets/g3a7q50p6t

[14:59] <Altreus> that's the same

[14:59] <RaycatWhoDat> I don't like it but a combination of a coercion and changing the sigil worked

[14:59] <discord-raku-bot> <Nemokosch#9980> it's the same though

[14:59] <Altreus> I think you have to press save

[14:59] <discord-raku-bot> <Nemokosch#9980> it still doesn't work

[15:00] <RaycatWhoDat> https://glot.io/snippets/g3aa7ye8pk7

[15:00] <RaycatWhoDat> err

[15:00] <RaycatWhoDat> https://glot.io/snippets/g3a7ye8pk7

[15:01] <discord-raku-bot> <Nemokosch#9980> do realize that your for is iterating over one element

[15:01] <Altreus> RaycatWhoDat: but it still accepts 0

[15:01] <discord-raku-bot> <Nemokosch#9980> which is the whole array as one encapsulated element

[15:01] <RaycatWhoDat> drat

[15:01] <Altreus> that was the same problem I had :D

[15:02] <RaycatWhoDat> I feel like I'm missing some nuance of Arrays here

[15:04] <Altreus> agreed

[15:04] <Altreus> wait

[15:04] <Altreus> why not define NonNegativeInt and then just demand an array of that

[15:05] <discord-raku-bot> <Nemokosch#9980> that didn't work either

[15:05] <discord-raku-bot> <Nemokosch#9980> I can confirm üòÖ

[15:05] <Altreus> :D

[15:05] <Altreus> also I meant PositiveInt apparently

[15:06] <Altreus> cos > 0 not ‚â• 0

[15:07] <Altreus> basically I have no idea how to define the types of an array's elements

[15:07] <Altreus> ¬´Type @array¬ª seems intuitive but that doesn't seem to do it

[15:08] <discord-raku-bot> <Nemokosch#9980> it doesn't? I'm just reading about it

[15:09] <Altreus> need a grownup

[15:10] <discord-raku-bot> <Nemokosch#9980> and what is this "Positional" shit? where does it come from?

[15:11] <Xliff_> Actually, what you want is to use the subset in the type.

[15:11] <Xliff_> So...

[15:11] <Altreus> isn't Positional just a role that arrays do?

[15:11] <Xliff_> m: my subset PosInt of Int where * >= 0; my PosInt @a = (-1, -2, 0, 1, 2);

[15:11] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in assignment to @a; expected PosInt but got Int (-1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:11] <discord-raku-bot> <Nemokosch#9980> isn't `Positional[Array(PosInt)]` a big fat pleonasm then?

[15:11] <Xliff_> m: my subset PosInt of Int where * >= 0; my PosInt @a = ^10;;

[15:11] <camelia> rakudo-moar 8d1f24f9c: ( no output )

[15:12] <MasterDuke> m: sub foo(@n where {so all($_.map( -> $m {$m ~~ Int and $m > 0}))}) { dd @n }; foo([1, 2, -3])

[15:12] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Constraint type check failed in binding to parameter '@n'; expected anonymous constraint to be met but got Array ([1, 2, -3])‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:12] <Altreus> OK so Type @array is how you do it

[15:12] <Xliff_> m: my subset PosInt of Int where * >= 0; my PosInt @a = ^10; @a.gist.say;

[15:12] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´[0 1 2 3 4 5 6 7 8 9]‚ê§¬ª

[15:12] <Xliff_> Alreus: Yep.

[15:12] <MasterDuke> m: sub foo(@n where {so all($_.map( -> $m {$m ~~ Int and $m > 0}))}) { dd @n }; foo([1, 2, 3])

[15:12] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Array element = [1, 2, 3]‚ê§¬ª

[15:12] <discord-raku-bot> <Nemokosch#9980> > OK so Type @array is how you do it

[15:12] <discord-raku-bot> <Nemokosch#9980> except it really didn't work

[15:12] <discord-raku-bot> <Nemokosch#9980> not for signatures

[15:13] <Altreus> yeah

[15:13] <Xliff_> It's just syntacical sugar for Array[PosInt];

[15:13] <Xliff_> m: my subset PosInt of Int where * >= 0; my PosInt @a = ^10; @a.^of.^name.say

[15:13] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´No such method 'of' for invocant of type‚ê§'Perl6::Metamodel::ClassHOW+{<anon>}+{<anon>}+{<anon>}'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:13] <Xliff_> m: my subset PosInt of Int where * >= 0; my PosInt @a = ^10; @a.of.^name.say

[15:13] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´PosInt‚ê§¬ª

[15:13] <Xliff_> m: my subset PosInt of Int where * >= 0; my PosInt @a = ^10; @a.of.^name.say; @a.^name.say

[15:13] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´PosInt‚ê§Array[PosInt]‚ê§¬ª

[15:13] <discord-raku-bot> <Nemokosch#9980> now show a function

[15:13] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(PosInt @array) { .say for @array }; f([1,2,3,4,5]);

[15:13] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in binding to parameter '@array'; expected PosInt but got Array ([1, 2, 3, 4, 5])‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:13] <Altreus> Xliff_: why this no worky

[15:14] <Xliff_> You'd use the latter form for the signature.

[15:14] <Altreus> so like...

[15:14] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt] @array) { .say for @array }; f([1,2,3,4,5]);

[15:14] <discord-raku-bot> <Nemokosch#9980> exactly this error

[15:14] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in binding to parameter '@array'; expected Positional[Array[PosInt]] but got Array ([1, 2, 3, 4, 5])‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:14] <Altreus> Xliff_: this?

[15:14] <discord-raku-bot> <Nemokosch#9980> Positional[Array] again, thank you very much...

[15:14] <Xliff_> OK. I may be incorrect. One sec.

[15:15] <discord-raku-bot> <Nemokosch#9980> noone asked for this Positional

[15:15] <Xliff_> m: my subset PosInt of Int where * >= 0; sub f(PosInt @array) { .say for @array }; f([1,2,3,4,5]);

[15:15] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in binding to parameter '@array'; expected PosInt but got Array ([1, 2, 3, 4, 5])‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:15] <Altreus> hang on I'm going to swap...

[15:15] <Xliff_> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt] $array) { .say for @array }; f([1,2,3,4,5]);

[15:15] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@array' is not declared.  Did you mean any of these:‚ê§'$array', 'array', 'Array'?‚ê§at <tmp>:1‚ê§------> 3 sub f(Array[PosInt] $array) { .say for 7‚èè5@array }; f([1,2,3,4,5]);‚ê§¬ª

[15:15] <discord-raku-bot> <altreus‚Ñ¢#9000> Much easier to read IRC here than Discord there

[15:15] <Xliff_> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt] $array) { .say for $array[] }; f([1,2,3,4,5]);

[15:15] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in binding to parameter '$array'; expected Array[PosInt] but got Array ([1, 2, 3, 4, 5])‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:16] <MasterDuke> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt] $array) { .say for @$array }; f(Array[PosInt].new([1,2,3,4,5]));

[15:16] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[15:16] <MasterDuke> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt] $array) { .say for @$array }; f(Array[PosInt].new([1,2,3,4,-5]));

[15:16] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in assignment to ; expected PosInt but got Int (-5)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:16] <Xliff_> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt] $array) { .say for $array[] }; my PosInt @b = (1,2,3,4,5); f(@b);

[15:16] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[15:16] <discord-raku-bot> <altreus‚Ñ¢#9000> @Nemokosch#9980 the Positional part comes from the `@`, i.e. you've asked for an array-of-Array[PosInt]

[15:16] <discord-raku-bot> <Nemokosch#9980> but that wasn't the intention, right?

[15:16] <Xliff_> When you type an array, you can't pass it an untyped array.

[15:16] <discord-raku-bot> <altreus‚Ñ¢#9000> raku's typing is a mess, I have to say

[15:17] <discord-raku-bot> <Nemokosch#9980> man, this is like inverse TypeScript

[15:17] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt]() $array) { .say for @array }; f([1,2,3,4,5]);

[15:17] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@array' is not declared.  Did you mean any of these:‚ê§'$array', 'array', 'Array'?‚ê§at <tmp>:1‚ê§------> 3ub f(Array[PosInt]() $array) { .say for 7‚èè5@array }; f([1,2,3,4,5]);‚ê§¬ª

[15:17] <Xliff_> Array typing works, it's not intuitive, but it works.

[15:17] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt]() $array) { .say for @$array }; f([1,2,3,4,5]);

[15:17] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[15:17] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt]() $array) { .say for @$array }; f([0,1,2,3,4,5]);

[15:17] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[15:17] <Altreus> lmao

[15:17] <discord-raku-bot> <Nemokosch#9980> ngl you would expect more from a runtime dispatch

[15:18] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(PosInt() @array) { .say for @array }; f([0,1,2,3,4,5]);

[15:18] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in binding to parameter '@array'; expected Positional[PosInt(Any)] but got Array ([0, 1, 2, 3, 4, 5])‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:18] <Xliff_> Well hey! Look at t hat.

[15:18] <Altreus> m: my subset PosInt of Int where * >= 0; sub f(Array[PosInt()]() $array) { .say for @$array }; f([0,1,2,3,4,5]);

[15:18] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[15:18] <discord-raku-bot> <altreus‚Ñ¢#9000> I'd rather this stuff were intuitive than correct

[15:18] <discord-raku-bot> <Nemokosch#9980> what are the parantheses?

[15:19] <discord-raku-bot> <altreus‚Ñ¢#9000> Don't like feeling that Java is doing anything better

[15:19] <discord-raku-bot> <altreus‚Ñ¢#9000> Parens = coercion

[15:19] <discord-raku-bot> <Nemokosch#9980> I mean in C yes but how does this follow in this context...

[15:19] <discord-raku-bot> <altreus‚Ñ¢#9000> f(Str() $a) stringifies rather than complaining

[15:19] <discord-raku-bot> <altreus‚Ñ¢#9000> well I thought I'd make it coerce the provided array to an array of PosInt

[15:19] <discord-raku-bot> <altreus‚Ñ¢#9000> oh

[15:19] <discord-raku-bot> <altreus‚Ñ¢#9000> I just realised this one has >=

[15:20] <Altreus> m: my subset PosInt of Int where * > 0; sub f(Array[PosInt]() $array) { .say for @$array }; f([0,1,2,3,4,5]);

[15:20] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in assignment to ; expected PosInt but got Int (0)‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:20] <discord-raku-bot> <altreus‚Ñ¢#9000> eyy it works

[15:20] <discord-raku-bot> <Nemokosch#9980> That's okay, dumb carried weight üòÑ

[15:20] <discord-raku-bot> <altreus‚Ñ¢#9000> I thought it failed to apply the PosInt, but in fact it was defined slightly differently

[15:20] <discord-raku-bot> <Nemokosch#9980> Okay, that's actually reasonable behavior, gotta admit

[15:20] <discord-raku-bot> <Nemokosch#9980> Just the syntax is a little weird

[15:21] <discord-raku-bot> <Nemokosch#9980> As if someone wanted to supersede C++ at the use of all kind of crazy parentheses

[15:22] *** vrurg left
[15:23] <discord-raku-bot> <Nemokosch#9980> does this only work with the $ sigil?

[15:23] <Altreus> m: my subset PosInt of Int where * > 0; sub f(PosInt() @array) { .say for @array }; f([0,1,2,3,4,5]);

[15:23] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in binding to parameter '@array'; expected Positional[PosInt(Any)] but got Array ([0, 1, 2, 3, 4, 5])‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:23] <Altreus> yes

[15:23] <discord-raku-bot> <Nemokosch#9980> "Positional"

[15:24] <Altreus> cos you need to coerce the array itself

[15:24] <discord-raku-bot> <Nemokosch#9980> like duh, noone wants that

[15:24] <Altreus> well you could pass any class that does Positional :)

[15:24] <discord-raku-bot> <Nemokosch#9980> this kinda defeats the purpose of sigils

[15:25] <discord-raku-bot> <altreus‚Ñ¢#9000> do you reckon

[15:26] <discord-raku-bot> <altreus‚Ñ¢#9000> I feel like it would not harm the intuitiveness of raku if it unpacked arrays like that

[15:26] <Altreus> m: my subset PosInt of Int where * > 0; sub f(PosInt() *@array) { .say for @array }; f(0,1,2,3,4,5);

[15:26] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Slurpy positional parameters with type constraints are not supported‚ê§at <tmp>:1‚ê§------> 3 Int where * > 0; sub f(PosInt() *@array7‚èè5) { .say for @array }; f(0,1,2,3,4,5);‚ê§    expecting any o‚Ä¶¬ª

[15:26] <Altreus> what

[15:26] <discord-raku-bot> <altreus‚Ñ¢#9000> <:f7u12:740532507728150539>

[15:27] <discord-raku-bot> <altreus‚Ñ¢#9000> heh I wondered what IRC would make of that

[15:28] <discord-raku-bot> <Nemokosch#9980> Not sure who said it, maybe it was Bruce Gray but I wouldn't bet my life on it...

[15:28] <discord-raku-bot> <Nemokosch#9980> that an important feat of Raku is that gives you what's useful to you and not what's useful to the computer

[15:29] <discord-raku-bot> <altreus‚Ñ¢#9000> Can't say I find that's upheld too much

[15:29] <discord-raku-bot> <Nemokosch#9980> now this sigil hacking feels painfully the opposite

[15:30] <discord-raku-bot> <Nemokosch#9980> I don't feel strongly about the concept of sigils but sometimes it really feels like they are someone's obsession that couldn't really be rationalized

[15:31] <RaycatWhoDat> I personally didn't know they were anything other than convention

[15:31] <RaycatWhoDat> But, clearly, that's not right

[15:31] <discord-raku-bot> <Nemokosch#9980> oof xd

[15:32] <discord-raku-bot> <Nemokosch#9980> now you learned it the hard way!

[15:32] <discord-raku-bot> <Nemokosch#9980> in Perl5 they were even context-dependent

[15:33] <discord-raku-bot> <altreus‚Ñ¢#9000> I far prefer their purpose in Perl5

[15:33] <discord-raku-bot> <altreus‚Ñ¢#9000> sigilless raku is, thankfully, quite possible

[15:33] <Altreus> m: my subset PosInt of Int where * > 0; sub f(Array[PosInt]() \array) { .say for array }; f([0,1,2,3,4,5]);

[15:33] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´Type check failed in assignment to ; expected PosInt but got Int (0)‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:34] <discord-raku-bot> <Nemokosch#9980> I hope you don't mean that backslash stuff... oh no

[15:34] <discord-raku-bot> <Nemokosch#9980> too late xd

[15:34] <discord-raku-bot> <altreus‚Ñ¢#9000> right - let's just lose the backslash and make this the default :D

[15:34] <discord-raku-bot> <altreus‚Ñ¢#9000> it seems to work in every situation

[15:34] <Altreus> m: my subset PosInt of Int where * > 0; sub f(Array[PosInt]() \array) { .say for array }; f([1,2,3,4,5]);

[15:34] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[15:34] <discord-raku-bot> <altreus‚Ñ¢#9000> it even iterates the array ^

[15:34] <discord-raku-bot> <altreus‚Ñ¢#9000> if that were a scalar it wouldn't

[15:35] <Altreus> m: my subset PosInt of Int where * > 0; sub f(Array[PosInt]() $array) { .say for $array }; f([1,2,3,4,5]);

[15:35] <camelia> rakudo-moar 8d1f24f9c: OUTPUT: ¬´[1 2 3 4 5]‚ê§¬ª

[15:35] <discord-raku-bot> <Nemokosch#9980> the behavior is so fundamentally different though

[15:35] <discord-raku-bot> <Nemokosch#9980> like pure functional

[15:35] <discord-raku-bot> <altreus‚Ñ¢#9000> but like ... why not

[15:35] <discord-raku-bot> <altreus‚Ñ¢#9000> As you say, what do the sigils *do* other than confound things?

[15:35] <discord-raku-bot> <altreus‚Ñ¢#9000> if you don't use them it seems to always behave as expected

[15:36] <discord-raku-bot> <Nemokosch#9980> as long as you give up your choice to mutate, well, pseudo-variables that you have

[15:37] <mfiano> lizmat: Gave a talk on why you will love sigiling not too long ago

[15:37] <discord-raku-bot> <Nemokosch#9980> not gonna lie, I can't recall much of it

[15:38] <lizmat> https://conf.raku.org/talk/145

[15:38] <discord-raku-bot> <Nemokosch#9980> but I remember it happened

[15:38] <discord-raku-bot> <altreus‚Ñ¢#9000> I watched it and it helped me understand them, but now I'm wondering if I need to understand them

[15:38] <discord-raku-bot> <Nemokosch#9980> lol

[15:39] <discord-raku-bot> <Nemokosch#9980> you know, I just don't understand why they can't properly work with typing

[15:39] <melezhik> tbrowder I added customize icon, where you can choose language ( only one language, multiple selected is not supported right now )

[15:39] <discord-raku-bot> <Nemokosch#9980> the collection types in particular

[15:39] <melezhik> and then only rating for a chosen language will be in your browser

[15:40] <melezhik> the language setting sticks to a browser ( as a cookie )  and remains forever until you change it 

[15:40] <discord-raku-bot> <Nemokosch#9980> it feels like such a luxury to have dedicated sigils for essential collection types if they fail on something as mundane as a typed flat array

[15:41] <melezhik> Uploaded file: https://uploads.kiwiirc.com/files/c223f1d66ce6608570b7cc47eeb194b6/03714C6D-5394-4AA3-9839-83D67FAB6FF5.jpeg

[15:41] <discord-raku-bot> <Nemokosch#9980> that's by far not "hacking the language" imo

[15:42] <tbrowder> melezhik: the language selection feature works great. thanks!

[15:42] <melezhik> tbrowder ++, hopefully will be helpful for the community )))

[15:43] <melezhik> you can also checkout a new "release" feature )) to announce releases of one's modules 

[15:43] <discord-raku-bot> <altreus‚Ñ¢#9000> might go and learn rust ...

[15:44] <RaycatWhoDat> Rust is a language that doesn't get along with me

[15:44] <tbrowder> now we need a link to yr site on Raku.org (community?

[15:44] <tbrowder> )

[15:45] <melezhik> also on project badge page now there is "claim ownership" link so that a project author or maintainer could claim their ownership - reserved for the future

[15:45] <discord-raku-bot> <Nemokosch#9980> yeah ngl I just don't feel I care about Rust

[15:45] <melezhik> tbrowder , ++ )) I don't mind of course, will be honored !

[15:45] <discord-raku-bot> <Nemokosch#9980> it looks nice and all, just not here and now for sure

[15:46] <tbrowder> is your Cro implementation available publicly (at least partially)?

[15:49] <discord-raku-bot> <altreus‚Ñ¢#9000> Well I tried Haskell and it melted my brain so if I want consistent but strongly constrained typing I might as well try the modern answer to C

[15:49] <tbrowder> ref Rust: i took a look at it early on (even bought a book) but wasn't wild about the building and packaging system. guess i used Make for too long.

[15:51] <discord-raku-bot> <Nemokosch#9980> tbh I find type systems overrated. They can help at being lazy but that's about it

[15:52] <RaycatWhoDat> I'm a big fan of gradual typing

[15:52] <RaycatWhoDat> Just let me poke holes when I need to

[15:52] <tbrowder> also still $working and bosses didn't want the go that route ("clinging to the trailing edge of technology" was the company motto we in the trenches said, teasingly)

[15:53] <tbrowder> RaycatWhoDat: same here, and our fav lang is great for Dat

[15:55] *** melezhik left
[15:56] <discord-raku-bot> <Nemokosch#9980> in this regard I'm very pleased with Typescript. Almost feels like it made Node a solid ecosystem

[16:01] *** colemanx left
[16:08] *** juanfra left
[16:08] *** happy-dude left
[16:08] *** AlexDaniel left
[16:08] *** CIAvash left
[16:08] *** demostanis[m] left
[16:12] *** juanfra joined
[16:15] <RaycatWhoDat> tbrowder: I see what you've done and I despise you for it

[16:15] *** CIAvash joined
[16:15] *** AlexDaniel joined
[16:15] *** happy-dude joined
[16:15] *** demostanis[m] joined
[16:15] <lizmat> RaycatWhoDat: ??

[16:15] <RaycatWhoDat> He made a pun

[16:16] <lizmat> ah...  well...   that'd be ok on a #raku channel, though?   with a language that has a term called "punning"  :-)

[16:45] *** xinming_ joined
[16:48] *** melezhik joined
[16:48] <melezhik> https://twitter.com/melezhik2/status/1448687606326341638 - interesting question on Rakubrew ...

[17:04] <tbrowder> RaycatWhoDat: no offense intended, but you‚Äôve obviously not seen some of the punny stuff here ;-D

[17:06] <tbrowder> i should have said [[p|f] unny]

[17:07] <discord-raku-bot> <Nemokosch#9980> s\/.*\/\/

[17:13] <[Coke]> found a way to make my "call lots of git commands" faster, by skipping one call per branch, whee.

[17:20] *** vrurg joined
[17:56] <melezhik> tbrowder "is your Cro implementation available publicly (at least partially)?" - no, now the web app code is in private GH repo. For some reasons I din't want to make it public ... Still not sure .... Do you want to contribute?

[17:58] <tbrowder> not necessarily. i‚Äôm interested in using Cro in a reverse proxy on Apache and am always on the lookout for publicly available implementations.

[18:00] <melezhik> ah, ok I see , then you might be interested in this as well - https://github.com/croservices/cro-core/issues/31#issuecomment-940489635

[18:02] *** reportable6 left
[18:02] *** reportable6 joined
[18:07] <tbrowder> thanks!

[18:47] *** holyghost joined
[19:04] *** pony joined
[19:35] *** abraxxa left
[19:36] *** Geth left
[19:36] *** Geth joined
[19:42] <melezhik> sure

[19:44] <Xliff_> lizmat: They were just having pun.

[19:45] <Xliff_> Oh! I'm johny come lately... (whose name doesn't even start with 'J')

[19:45] <Xliff_> I'll shut up, now.

[19:45] <lizmat> tssskkkk   :-)

[19:45] <Xliff_> ]:>

[19:46] <gfldex> I would like to add that this channel is puntastic!

[19:47] <Xliff_> gfldex: It would be even better if the 'g' and 'd' in your nick were silent.

[19:47] <Xliff_> Then we'd be all about the muscles!

[19:47] * Xliff_ flees

[19:48] <El_Che> fleas

[19:50] <Xliff_> El_Che: Hey there! I'll have you know that all of my shots are up to date!

[19:51] <Xliff_> Just don't ask what they were shots of and we'll all be happy! :D

[19:51] <Xliff_> .oO( aaahhh... te-keeel-ya! )

[19:51] <El_Che> nothing to see here

[19:51] <El_Che> of everything twice

[19:51] <El_Che> or

[19:51] <Xliff_> El_Che: Are you trying to tell me to move on?

[19:52] <El_Che> or stick around

[19:52] <El_Che> just don't wake up the sleeping shells

[19:53] <lizmat> ooooooo

[19:54] <El_Che> there you go

[20:00] <melezhik> I am not sure if I follow all the jokes and slang ))) I hope it's fun ...

[20:06] *** holyghost left
[20:07] <El_Che> giving you the impression it's coherent and funny is part of the fun

[20:12] *** pony left
[20:12] *** pony joined
[20:20] <tbrowder> melezhik: for fun you should check out my Raku program that looks like a Christmas tree

[20:35] <melezhik> tbrowder++ ))) 

[20:49] <perryprog> This is a question I've always meant to ask‚Äîit's not Raku specific in the slightest, but I'm really curious what y'all's perspectives on it might be. How do you put into practice languages that you are teaching yourself? That is, how should one "come up with" projects/tools/scripts to write in with a language they're learning?

[20:52] <MasterDuke> i've done rosalind http://rosalind.info/ and project euler https://projecteuler.net/ problems 

[20:52] <perryprog> (Ugh that reminds me, I need to work on projecteuler again)

[20:53] <MasterDuke> synacore and matasano challenges also

[20:54] <perryprog> I suppose projecteuler and similar things are definitely nice, but I've often felt like a lot of the challenges lend themselves more towards small, self-contained problems that are encapsulated in single functions. They don't tend to be something you could call a "project", if that makes sense.

[20:56] <MasterDuke> yep. synacore and matasano are a little better in that regard

[20:56] <perryprog> MasterDuke, hmm https://www.vanbeeknaturalscience.com/products/companion/synacore

[20:57] <MasterDuke> https://challenge.synacor.com/

[21:01] <perryprog> Matasano looks /super/ interesting. Does it have a website? I just found the info from this git repo, but the link it has is dead: https://github.com/mteodoro/crypto_challenge

[21:02] <melezhik> I had some problems with posting my latest post about mybf.io principles on HN, hopefully this attempt will be more successful - https://news.ycombinator.com/item?id=28870006 

[21:03] <MasterDuke> huh. don't know, haven't looked at it in a long time

[21:04] <MasterDuke> https://cryptopals.com/ maybe a continuation of it?

[21:05] <perryprog> Ah, nice, looks like it

[21:12] *** linkable6 left
[21:12] *** evalable6 left
[21:14] *** evalable6 joined
[21:15] *** linkable6 joined
[21:30] <RaycatWhoDat> See, all these folks are able to do all these challenges and problems, and I'm just over here using Raku for glorified bash scripting

[21:52] <tbrowder> melezhik: see https://raku-advent.blog/2020/12/11/day-11-santa-claus-tweaks-with-a-class/

[22:11] *** cialandro joined
[22:14] *** cialandro left
[22:20] *** djerius left
[22:21] *** djerius joined
[22:50] *** berber44 joined
[23:06] <tbrowder> perryprog: also look at rosettacode.org

[23:06] <perryprog> Oh I do all the time

[23:12] *** pony left
[23:22] <[Coke]> how often does the examples site get regen'd?

[23:24] *** berber44 left
[23:28] <Geth> ¬¶ examples: 0c15ac220c | Coke++ | 22 files

[23:28] <Geth> ¬¶ examples: Remove all Euler samples > 100

[23:28] <Geth> ¬¶ examples: 

[23:28] <Geth> ¬¶ examples: See https://projecteuler.net/about (you may have to sign in)

[23:28] <Geth> ¬¶ examples: 

[23:28] <Geth> ¬¶ examples: Project Euler asks that solutions to problems > 100

[23:28] <Geth> ¬¶ examples: not be shared.

[23:28] <Geth> ¬¶ examples: 

[23:28] <Geth> ¬¶ examples: Resolve issue #79

[23:28] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/commit/0c15ac220c

[23:37] <Geth> ¬¶ examples: 26396e778d | Coke++ | TODO

[23:37] <Geth> ¬¶ examples: There's already a 'make test' target

[23:37] <Geth> ¬¶ examples: 

[23:37] <Geth> ¬¶ examples: ...which needs work, but in spirit covers this todo

[23:37] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/commit/26396e778d

[23:39] *** linkable6 left
[23:42] *** xinming_ left
[23:42] *** xinming_ joined
[23:51] <Geth> ¬¶ examples: 17f5c4ac11 | Coke++ | 2 files

[23:51] <Geth> ¬¶ examples: Several P6 -> Raku updates

[23:51] <Geth> ¬¶ examples: 

[23:51] <Geth> ¬¶ examples: including the IRC channel

[23:51] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/commit/17f5c4ac11

[23:52] <[Coke]> (regened) never, apparently. last updated on 2019-05-23

[23:53] <Geth> ¬¶ examples: 5cf55a3dba | Coke++ | template/footer.html

[23:53] <Geth> ¬¶ examples: P6 > Raku.

[23:53] <Geth> ¬¶ examples: 

[23:53] <Geth> ¬¶ examples: Remove "incomplete" text, which makes *some* sense for docs but not

[23:53] <Geth> ¬¶ examples: examples.

[23:53] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/commit/5cf55a3dba

[23:58] <perryprog> [Coke] nice changes

[23:58] <perryprog> (The raku examples have been kinda lacking in my opinion)

[23:59] <perryprog> They don't really compare to one of those full length "COBOL by example" things

[23:59] <[Coke]> it's not been updated for 2+ years, so... :)

[23:59] <perryprog> yeaaaah

[23:59] <perryprog> that too

