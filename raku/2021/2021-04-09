[00:01] <lucs> Instead of traversing a huge (for example) capture with  for $s ~~ m:g/.../ {...} , can I do something like  while $s ~~ /.../ {...} ?

[00:02] <lucs> s/can I/how can I/

[00:02] <lucs> A plain 'while' like that keeps hitting the first match all the time, not sure how to make it move along.

[00:11] <gfldex> lucs: if you want to act as the grammar is parsing, you have to put the code that reacts inside the grammar itself

[00:11] <gfldex> lucs: see example 4 in https://gfldex.wordpress.com/2021/03/11/raku-is-a-match-for/

[00:12] <lucs> gfldex: Will read that, thanks.

[00:20] *** mowcat left
[00:27] *** lizmat left
[00:39] <lucs> gfldex: If I understand your example, is it correct to say that the 'take' is evaluating to False?

[00:52] *** parabolize left
[00:55] *** parabolize joined
[01:06] *** swaggboi left
[01:09] *** MasterDuke left
[01:14] *** swaggboi joined
[01:20] *** kvw_5 joined
[01:20] *** kurahaupo_ joined
[01:23] *** kvw_5_ left
[01:23] *** kurahaupo left
[01:35] *** kurahaupo_ left
[01:35] *** kurahaupo joined
[01:41] *** Kaiepi joined
[01:59] *** dtb joined
[02:03] <dtb> does anyone know how to read from stdin. This is not easily findable at docs.raku.org

[02:07] *** lizmat joined
[02:08] <moon-child> dtb: get to read a single line.  words or lines to get a sequence of words or lines (respectively)

[02:11] <dtb> @moon-child Right, what's the RAKU equivalent of my $foo = <STDIN> ?

[02:12] <moon-child> I don't know what <STDIN> is

[02:12] <moon-child> to read everything, use slurp

[02:14] *** abraxxa left
[02:15] *** abraxxa joined
[02:21] <dtb> @moon-child OK, I see the get documentation in IO::CatHandle. Thanks;

[02:27] <raydiak> dtb: $*IN is what you're looking for. IO::Handle docs list the various ways to read from it. CatHandle is something different

[02:28] <moon-child> you don't need $*IN.  Plain get works implicitly on $*IN

[02:28] <dtb> @moon-child Yeah, my $foo = get; works.

[02:39] *** softmoth left
[02:49] *** _jrjsmrtn joined
[02:51] *** __jrjsmrtn__ left
[03:28] *** Doc_Holliwood joined
[04:20] *** sno left
[04:28] *** parv joined
[04:29] *** parv left
[04:29] *** parv joined
[04:29] *** parv left
[04:34] *** parv joined
[04:53] *** samebchase-6 is now known as samebchase-

[04:55] *** gordonfish left
[04:56] *** gordonfish joined
[05:06] *** jmcgnh left
[05:13] *** wamba joined
[05:13] *** jmcgnh joined
[05:15] *** neshpion left
[05:19] *** stoned75 joined
[05:19] *** Doc_Holliwood left
[05:23] *** sno joined
[05:46] *** wamba left
[06:08] *** ufobat_ joined
[06:29] *** frost-lab joined
[06:30] *** abraxxa left
[06:33] *** abraxxa joined
[06:34] <moon-child> it would be cool if there were shorthand T@ and T% (or something like that) for Positional[T] and Associative[T]

[06:34] <moon-child> so you could say, e.g., sub foo(--> Int@) instead of sub foo(--> Positional[Int])

[06:39] *** patrickb joined
[06:40] *** Sgeo_ joined
[06:41] *** Sgeo_ left
[06:43] *** Sgeo left
[06:44] *** wamba joined
[06:49] *** parabolize left
[06:53] <moritz_> I'm not sure that what Raku needs is more abbreviations :D

[06:55] <moon-child> maybe...

[06:56] <moon-child> it's just really weird that Int @x is so much shorter than Positional[Int] \x.  Latter seems stuffy and verbose

[06:57] *** jmerelo joined
[07:10] *** Geth left
[07:12] *** domidumont joined
[07:16] *** parvXirc joined
[07:16] *** parvXirc left
[07:47] <frost-lab> m: say Int(True); say True.Int

[07:47] <camelia> rakudo-moar 726a75e24: OUTPUT: «True␤1␤»

[07:58] *** jmcgnh left
[07:58] *** parv left
[07:58] *** swaggboi left
[07:58] *** dataangel left
[07:58] *** elcaro left
[07:58] *** xinming_ left
[07:58] *** PotatoGim left
[07:58] *** karupanerura left
[07:58] *** donaldh left
[07:58] *** vaskozl left
[07:58] *** spacekookie left
[07:58] *** camelia left
[07:58] *** takside left
[07:58] *** dylanwh left
[07:58] *** ssm left
[07:58] *** esh left
[07:58] *** caasih left
[07:58] *** rjeli left
[07:58] *** Ekho left
[07:58] *** Ulti_ left
[07:58] *** samcv left
[07:58] *** klapperl left
[07:58] *** domidumont left
[07:58] *** samebchase- left
[07:58] *** shadowpaste left
[07:58] *** releasable6 left
[07:58] *** tellable6 left
[07:58] *** statisfiable6 left
[07:58] *** notable6 left
[07:58] *** bisectable6 left
[07:58] *** evalable6 left
[07:58] *** benchable6 left
[07:58] *** guifa left
[07:58] *** aindilis left
[07:58] *** aik|onl left
[07:58] *** Manifest0 left
[07:58] *** pat_js left
[07:58] *** cxreg left
[07:58] *** [ptc] left
[07:58] *** gfldex left
[07:58] *** nebuchadnezzar left
[07:58] *** tomaw left
[07:58] *** DarthGandalf left
[07:58] *** uzl[m] left
[07:58] *** asymptotically left
[07:58] *** xelxebar left
[07:58] *** DiffieHellman left
[07:58] *** Tirifto[m] left
[07:58] *** draco100[m] left
[07:58] *** Benett left
[07:58] *** e left
[07:58] *** bonz060 left
[07:58] *** patrickbkr[m] left
[07:58] *** mtj left
[07:58] *** unclechu left
[07:58] *** wamba left
[07:58] *** dtb left
[07:58] *** kvw_5 left
[07:58] *** eater left
[07:58] *** wingfold left
[07:58] *** vrurg left
[07:58] *** dogbert17 left
[07:58] *** tonyo left
[07:58] *** cooper left
[07:58] *** nativecallable6 left
[07:58] *** bloatable6 left
[07:58] *** coverable6 left
[07:58] *** shareable6 left
[07:58] *** unicodable6 left
[07:58] *** committable6 left
[07:58] *** sourceable6 left
[07:58] *** squashable6 left
[07:58] *** quotable6 left
[07:58] *** greppable6 left
[07:58] *** mrsolo left
[07:58] *** skaji_ left
[07:58] *** codesections left
[07:58] *** kini left
[07:58] *** rba left
[07:58] *** summerisle left
[07:58] *** jcallen left
[07:58] *** spycrab0 left
[07:58] *** a3f left
[07:58] *** stux|RC-only left
[07:58] *** moon-child left
[07:58] *** AlexDaniel` left
[07:58] *** mojca left
[07:58] *** abraxxa left
[07:58] *** sxmx left
[07:58] *** renormalist left
[07:58] *** aluaces left
[07:58] *** rjbs left
[07:58] *** mightypork left
[07:58] *** grumble left
[07:58] *** benaiah left
[07:58] *** raydiak left
[07:58] *** tadzik left
[07:58] *** synthmeat left
[07:58] *** Mithaldu left
[07:58] *** _________ left
[07:58] *** robinsmidsrod left
[07:58] *** linkable6 left
[07:58] *** MilkmanDan left
[07:58] *** Grinnz left
[07:58] *** Garland_g[m] left
[07:58] *** jhill left
[07:58] *** Altreus left
[07:58] *** ugexe left
[07:58] *** zostay left
[07:58] *** perry left
[07:58] *** riatre left
[07:58] *** jmerelo left
[07:58] *** kurahaupo left
[07:58] *** timlegge left
[07:58] *** jast left
[07:58] *** bdju left
[07:58] *** mniip left
[07:58] *** masak left
[07:58] *** agentzh left
[07:58] *** hobbs left
[07:58] *** nine left
[07:58] *** brass left
[07:58] *** kst left
[07:58] *** patrickb left
[07:58] *** frost-lab left
[07:58] *** stoned75 left
[07:58] *** samebchase left
[07:58] *** maggotbrain left
[07:58] *** Black_Ribbon left
[07:58] *** cosimo left
[07:58] *** defaultxr left
[07:58] *** dustinm` left
[07:58] *** APic left
[07:58] *** db48x left
[07:58] *** literal left
[07:58] *** torbjorn left
[07:58] *** dotdotdot left
[07:58] *** ambs left
[07:58] *** leont left
[07:58] *** marcusr left
[07:58] *** japhb left
[07:58] *** Sir_Ragna left
[07:58] *** nicholatian left
[07:58] *** jjatria left
[07:58] *** epony left
[07:58] *** sno left
[07:58] *** gordonfish left
[07:58] *** Kaiepi left
[07:58] *** simcop2387 left
[07:58] *** Woodi left
[07:58] *** afresh1 left
[07:58] *** markmarkmark left
[07:58] *** tobs left
[07:58] *** Voldenet left
[07:58] *** silug left
[07:58] *** hvxgr left
[07:58] *** BinGOs left
[07:58] *** ufobat_ left
[07:58] *** _jrjsmrtn left
[07:58] *** sivoais left
[07:58] *** UukGoblin left
[07:58] *** demostanis[m] left
[07:58] *** pwr22 left
[07:58] *** tusooa left
[07:58] *** kiti_nomad[m] left
[07:58] *** CIAvash left
[07:58] *** lizmat left
[07:58] *** sena_kun left
[07:58] *** b2gills left
[07:58] *** El_Che left
[07:58] *** Maylay left
[07:58] *** telex left
[07:58] *** gugod left
[07:58] *** xkr47 left
[07:58] *** brown121407 left
[07:58] *** eseyman left
[07:58] *** moony left
[07:58] *** webstrand left
[07:58] *** stux|RC left
[07:58] *** lnx left
[07:58] *** |oLa| left
[07:58] *** albino_ left
[07:58] *** rypervenche left
[07:58] *** mendel left
[08:02] *** ThaEwat left
[08:03] *** juanfra__ left
[08:03] *** Nasrudin left
[08:06] *** kst joined
[08:06] *** brass joined
[08:06] *** nine joined
[08:06] *** hobbs joined
[08:06] *** agentzh joined
[08:06] *** masak joined
[08:06] *** mniip joined
[08:06] *** bdju joined
[08:06] *** jast joined
[08:06] *** timlegge joined
[08:06] *** jmerelo joined
[08:06] *** telex joined
[08:06] *** SmokeMachine joined
[08:06] *** daxim joined
[08:06] *** leah2 joined
[08:06] *** Grauwolf joined
[08:06] *** peteretep joined
[08:06] *** tbrowder joined
[08:06] *** riatre joined
[08:06] *** perry joined
[08:06] *** zostay joined
[08:06] *** ugexe joined
[08:06] *** Altreus joined
[08:06] *** Grinnz joined
[08:06] *** MilkmanDan joined
[08:06] *** linkable6 joined
[08:06] *** bonz060_ joined
[08:06] *** KotH joined
[08:06] *** avar joined
[08:06] *** mst joined
[08:06] *** robinsmidsrod joined
[08:06] *** _________ joined
[08:06] *** Mithaldu joined
[08:06] *** synthmeat joined
[08:06] *** tadzik joined
[08:06] *** raydiak joined
[08:06] *** benaiah joined
[08:06] *** grumble joined
[08:06] *** mightypork joined
[08:06] *** rjbs joined
[08:06] *** aluaces joined
[08:06] *** renormalist joined
[08:06] *** sxmx joined
[08:06] *** abraxxa joined
[08:06] *** torbjorn joined
[08:06] *** literal joined
[08:06] *** db48x joined
[08:06] *** APic joined
[08:06] *** dustinm` joined
[08:06] *** defaultxr joined
[08:06] *** cosimo joined
[08:06] *** Black_Ribbon joined
[08:06] *** maggotbrain joined
[08:06] *** samebchase joined
[08:06] *** stoned75 joined
[08:06] *** patrickb joined
[08:06] *** DarthGandalf joined
[08:06] *** dotdotdot joined
[08:06] *** ambs joined
[08:06] *** leont joined
[08:06] *** marcusr joined
[08:06] *** japhb joined
[08:06] *** Sir_Ragna joined
[08:06] *** nicholatian joined
[08:06] *** buffet joined
[08:06] *** jjatria joined
[08:06] *** nativecallable6 joined
[08:06] *** bloatable6 joined
[08:06] *** coverable6 joined
[08:06] *** shareable6 joined
[08:06] *** unicodable6 joined
[08:06] *** committable6 joined
[08:06] *** sourceable6 joined
[08:06] *** squashable6 joined
[08:06] *** quotable6 joined
[08:06] *** greppable6 joined
[08:06] *** skaji_ joined
[08:06] *** mrsolo joined
[08:06] *** codesections joined
[08:06] *** kini joined
[08:06] *** rba joined
[08:06] *** summerisle joined
[08:06] *** jcallen joined
[08:06] *** spycrab0 joined
[08:06] *** a3f joined
[08:06] *** stux|RC-only joined
[08:06] *** moon-child joined
[08:06] *** mojca joined
[08:06] *** mithaldu_ joined
[08:06] *** pnu__ joined
[08:06] *** charsbar joined
[08:06] *** bartolin_ joined
[08:06] *** jdv79 joined
[08:06] *** gabiruh joined
[08:06] *** ecocode joined
[08:06] *** ribasushi joined
[08:06] *** roguelazer joined
[08:06] *** dpk joined
[08:06] *** camelia joined
[08:06] *** spacekookie joined
[08:06] *** vaskozl joined
[08:06] *** donaldh joined
[08:06] *** karupanerura joined
[08:06] *** PotatoGim joined
[08:06] *** xinming_ joined
[08:06] *** elcaro joined
[08:06] *** dataangel joined
[08:06] *** swaggboi joined
[08:06] *** parv joined
[08:06] *** lucs joined
[08:06] *** [Coke] joined
[08:06] *** BinGOs joined
[08:06] *** tailgate joined
[08:06] *** jraspass joined
[08:06] *** pounce joined
[08:06] *** hvxgr joined
[08:06] *** silug joined
[08:06] *** Voldenet joined
[08:06] *** tobs joined
[08:06] *** markmarkmark joined
[08:06] *** afresh1 joined
[08:06] *** Woodi joined
[08:06] *** simcop2387 joined
[08:06] *** Kaiepi joined
[08:06] *** gordonfish joined
[08:06] *** sno joined
[08:06] *** ingy joined
[08:06] *** lnx joined
[08:06] *** webstrand joined
[08:06] *** moony joined
[08:06] *** eseyman joined
[08:06] *** brown121407 joined
[08:06] *** xkr47 joined
[08:06] *** Maylay joined
[08:06] *** El_Che joined
[08:06] *** b2gills joined
[08:06] *** sena_kun joined
[08:06] *** lizmat joined
[08:06] *** tinita joined
[08:06] *** mtj joined
[08:06] *** moritz_ joined
[08:06] *** wmoxam_ joined
[08:06] *** Grrrr joined
[08:06] *** spacebat2 joined
[08:06] *** fvox_ joined
[08:06] *** imcsk8 joined
[08:06] *** broquaint joined
[08:06] *** perlmaros joined
[08:06] *** perigrin joined
[08:06] *** m_athias joined
[08:06] *** mendel joined
[08:06] *** rypervenche joined
[08:06] *** albino_ joined
[08:06] *** Benett joined
[08:06] *** m6locks_ joined
[08:06] *** sjn joined
[08:06] *** krunen joined
[08:06] *** cooper joined
[08:06] *** tonyo joined
[08:06] *** dogbert17 joined
[08:06] *** vrurg joined
[08:06] *** wingfold joined
[08:06] *** eater joined
[08:06] *** kvw_5 joined
[08:06] *** dtb joined
[08:06] *** wamba joined
[08:06] *** pecastro joined
[08:06] *** klapperl joined
[08:06] *** samcv joined
[08:06] *** Ulti_ joined
[08:06] *** Ekho joined
[08:06] *** rjeli joined
[08:06] *** caasih joined
[08:06] *** esh joined
[08:06] *** ssm joined
[08:06] *** dylanwh joined
[08:06] *** takside joined
[08:06] *** holyghost joined
[08:06] *** e joined
[08:06] *** tomaw joined
[08:06] *** nebuchadnezzar joined
[08:06] *** gfldex joined
[08:06] *** [ptc] joined
[08:06] *** cxreg joined
[08:06] *** pat_js joined
[08:06] *** Manifest0 joined
[08:06] *** aik|onl joined
[08:06] *** aindilis joined
[08:06] *** guifa joined
[08:06] *** benchable6 joined
[08:06] *** evalable6 joined
[08:06] *** bisectable6 joined
[08:06] *** notable6 joined
[08:06] *** statisfiable6 joined
[08:06] *** tellable6 joined
[08:06] *** releasable6 joined
[08:06] *** shadowpaste joined
[08:06] *** samebchase- joined
[08:06] *** domidumont joined
[08:06] *** gordonfish left
[08:07] <moon-child> m: say Bool ~~ Int

[08:07] <camelia> rakudo-moar 726a75e24: OUTPUT: «True␤»

[08:07] *** frost-lab joined
[08:07] *** a6502 joined
[08:07] *** gugod joined
[08:07] *** epony joined
[08:08] *** asymptotically joined
[08:08] *** xelxebar joined
[08:08] *** DiffieHellman joined
[08:08] <frost-lab> Why is the former Boolean instead of 1

[08:08] *** rjeli left
[08:09] *** rjeli joined
[08:09] *** PotatoGim left
[08:09] *** kawaii joined
[08:10] *** jhill joined
[08:11] *** timeless joined
[08:12] *** PotatoGim joined
[08:12] <moon-child> frost-lab: because bools are already ints.  Bool.Int is special-cased https://docs.raku.org/routine/Int#enum_Bool

[08:12] *** DiffieHellman left
[08:14] *** DiffieHellman joined
[08:14] *** BuildTheRobots joined
[08:15] *** nige joined
[08:15] <frost-lab> moon-child It makes sense. Thanks.

[08:16] <nige> o/ just trying to get some evidence together for the EU trademark application

[08:17] <nige> lizmat, do you happen to have stats on the readership for the Raku Weekly?

[08:17] <nige> I understand that the weekly is branded  "Rakudo Weekly News - News about the Raku Programming Language on Rakudo" - it's still useful from the point of view 'about the Raku Programming language'

[08:17] *** jmcgnh joined
[08:19] <jjatria> guifa++ on the insane hatred for l10n and friends

[08:19] <jjatria> I don't like abbreviations that make me think _more_

[08:20] *** frost-lab left
[08:20] *** frost-lab joined
[08:20] *** rjeli left
[08:20] *** rjeli joined
[08:20] *** jhill left
[08:20] *** jhill joined
[08:20] *** PotatoGim left
[08:20] *** PotatoGim joined
[08:20] *** BuildTheRobots left
[08:20] *** BuildTheRobots joined
[08:26] <moon-child> wait, l10--ohh

[08:26] <moon-child> I don't like that

[08:27] <jraspass> i18n, k8s are the other two i know - https://en.wikipedia.org/wiki/Numeronym

[08:28] <moon-child> I think I've made my peace with i18n.  But I still don't _like_ it

[08:32] *** sena_kun left
[08:32] *** aborazmeh joined
[08:34] *** sena_kun joined
[08:35] *** squashable6 left
[08:36] *** kiti_nomad[m] joined
[08:36] *** squashable6 joined
[08:42] *** brtastic1 joined
[08:42] *** nige left
[08:42] *** nige joined
[08:43] *** ThaEwat joined
[08:43] *** juanfra__ joined
[08:43] *** AlexDaniel` joined
[08:43] *** tusooa joined
[08:43] *** patrickbkr[m] joined
[08:43] *** Tirifto[m] joined
[08:43] *** unclechu joined
[08:43] *** demostanis[m] joined
[08:43] *** Nasrudin joined
[08:43] *** pwr22 joined
[08:43] *** draco100[m] joined
[08:43] *** Garland_g[m] joined
[08:43] *** uzl[m] joined
[08:43] *** CIAvash joined
[08:47] *** nige left
[08:47] *** nige joined
[08:49] *** EXAABHZ9 joined
[08:49] *** ufobat_ joined
[08:49] *** _jrjsmrtn joined
[08:49] *** sivoais joined
[08:49] *** sftp joined
[08:49] *** cgfbee joined
[08:49] *** pierrot joined
[08:49] *** timotimo joined
[08:49] *** tyil joined
[08:49] *** UukGoblin joined
[08:49] *** pel joined
[08:49] *** dg joined
[08:49] *** cgfbee left
[08:49] *** tyil left
[08:51] *** tyilanmenyn joined
[08:54] *** sivoais left
[08:55] *** sivoais joined
[08:57] *** parv left
[08:59] *** cgfbee joined
[09:04] *** aborazmeh left
[09:10] *** Doc_Holliwood joined
[09:22] <db48x> my favorite is l20n

[09:23] <db48x> because it was localization 2.0

[09:24] *** brtastic1 left
[09:46] *** abraxxa left
[09:48] *** abraxxa joined
[09:50] <Altreus> i18n does have the benefit of not making me type the whole word out every time I need to reference it

[09:51] <Altreus> Modules that didn't shorten it that way tended to use the entire line width just to reference them

[09:52] *** Black_Ribbon left
[10:04] *** Doc_Holliwood left
[10:21] *** |oLa| joined
[10:54] <db48x> I wonder if we could shorten them further

[10:54] *** sno left
[10:58] *** stoned75_ joined
[11:02] *** stoned75 left
[11:02] *** DiffieHellman left
[11:12] *** nige left
[11:12] *** nige joined
[11:14] *** kurahaupo joined
[11:16] *** |oLa| left
[11:17] *** nige left
[11:17] *** nige joined
[11:21] <Altreus> you can have apostrophes in raku so yeah

[11:21] <Altreus> l'n

[11:32] *** nige left
[11:32] *** nige joined
[11:35] <db48x> lol. I was thinking of emoji, but that works too :)

[11:37] *** nige left
[11:37] *** nige joined
[11:39] *** wamba left
[11:40] *** wamba joined
[11:42] *** nige left
[11:42] *** nige joined
[11:46] *** shadowpaste left
[11:47] *** nige left
[11:47] *** nige joined
[11:49] *** frost-lab left
[12:03] *** tyilanmenyn is now known as tyil

[12:35] *** stux|RC joined
[12:43] *** db48x left
[12:44] *** db48x joined
[12:44] *** jmerelo left
[13:05] <guifa> Altreus: I think use statements are uncommon enough it’s not a huge concern — it’s in the exported subs for common use stuff.  But thankfully Raku can help out there by letting module authors give people options on how stuff get imported in

[13:12] *** nige left
[13:12] *** nige joined
[13:13] <Altreus> well I've not actually seen it in use since 2009 perl5 code

[13:13] <Altreus> :D

[13:16] <guifa> Most of the time we can lexically scope like lizmat++ said to avoid probelms, but when they have to be in the same scope, I think it might not be a bad idea to have either a :long option for the use statement, or a dummy .rakumod file (maybe lib/Foo/Bar/CrystalClear.rakumod) that imports a slightly longer version of things just in case

[13:16] * guifa is afk

[13:17] *** nige left
[13:17] *** nige joined
[13:22] *** nige left
[13:22] *** nige joined
[13:27] *** nige left
[13:27] *** nige joined
[13:43] *** softmoth joined
[13:47] *** Sgeo joined
[13:55] *** MilkmanDan left
[13:55] *** MilkmanDan joined
[13:55] *** parabolize joined
[13:59] *** wbiker joined
[14:08] *** wamba left
[14:23] *** wamba joined
[14:25] <lucs> I'm expecting to catch all here, but every second one is skipped:

[14:25] <lucs> p6: .say for "Ab Ac Ad Ae Af Ag" ~~ m:g/ A .*? )> [ A | $ ] /;

[14:25] <camelia> rakudo-moar 726a75e24: OUTPUT: «｢Ab ｣␤｢Ad ｣␤｢Af ｣␤»

[14:26] <lucs> Is my understanding of  )>  incorrect?

[14:28] <lucs> Or, how dow I make that work?

[14:28] <codesections> What do you intend `[ A | $ ]` to be doing?  (the A there is capturing the A's that aren't in your match)

[14:29] <lucs> codesections: My intention is to capture A followed by anything up to the next A.

[14:29] <lucs> And to capture all such groups.

[14:30] <lucs> So I'd like to get  «｢Ab ｣␤｢Ac ｣␤｢Ad ｣␤｢Ae ｣␤｢Af ｣␤｢Ag ｣␤

[14:31] <codesections> Ah.  In that case, I think you need a lookahead assertion: https://docs.raku.org/language/regexes#Lookahead_assertions

[14:31] <lucs> Dang, that's kind of what I thought )> did :)

[14:31] <lucs> Will read, thanks.

[14:31] <codesections> to express 'match up to the next A without consuming the next A'

[14:31] <lucs> Exactly

[14:32] <lucs> Aw, I knew that :/

[14:32] * lucs is more and more forgetful over the years :(

[14:32] *** ufobat__ joined
[14:33] <codesections> The )> is similar, but slightly different -- it limits what is part of the capture, but no what is matched (frequently that amounts to the same thing, but not here b/c of the :g)

[14:33] <lucs> codesections: Yep, now I understand.

[14:33] <codesections> :)

[14:36] *** ufobat_ left
[14:45] *** patrickb left
[14:54] *** gordonfish joined
[14:55] <softmoth> dtb, I've created an issue for documenting how to read from stdin. Thanks for reporting the problem. https://github.com/Raku/doc/issues/3867

[15:08] *** Sgeo left
[15:12] *** Sgeo joined
[15:16] <dtb> @softmouth Yeah, I found the get documentation in IO:Handle but the one line that called out reading from stdin was confusing.

[15:17] *** domidumont left
[15:18] <dtb> @softmouth After Hello World, this seems like a fairly common task for noobs so maybe an example in the Raku by Example 101.

[15:19] *** softmoth left
[15:25] <dpk> if i want to use Raku as grep with Raku regexes, how do i do that? raku -pe something or other?

[15:26] *** Sgeo_ joined
[15:27] <dpk> ah, raku -ne 'say $_ if $_ ~~ /some regex here/'

[15:27] *** rindolf joined
[15:28] *** Sgeo left
[15:32] *** Sgeo__ joined
[15:35] *** Sgeo_ left
[15:36] <dpk> remind me to create a proper rakugrep command-line tool some day

[15:37] *** mowcat joined
[15:39] *** Sgeo__ left
[15:47] *** Sgeo joined
[15:47] *** sno joined
[15:55] <lizmat> weekly: https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259770.html

[15:55] <notable6> lizmat, Noted! (weekly)

[15:58] <lucs> dpk: Port ack to Raku.

[16:02] <dpk> that would indeed be handy

[16:07] *** ufobat__ left
[16:08] *** Sgeo_ joined
[16:10] *** Sgeo left
[16:15] <lizmat> I have considered it

[16:16] <lizmat> and would support anybody who would take that on

[16:17] <[Coke]> probably would need to call it something else, but seems like a good plan!

[16:25] <El_Che> the competence will be hard now that ack has faster alternatives

[16:26] <tadzik> do any of these alternatives actually support Perl regexes?

[16:27] *** jmcgnh left
[16:28] <El_Che> pcre

[16:28] <El_Che> (I am an ack user)

[16:28] <El_Che> ag supports pcre

[16:28] <El_Che> pretty sure they all do

[16:28] <El_Che> (even grep supports pcre)

[16:29] <[Coke]> I imagine anyone using a raku regex command line tool is more interested in being able to use those specific regexes.

[16:30] <El_Che> I don't know

[16:30] <El_Che> the readability of raku regexes is a huge win for programs

[16:30] <El_Che> for a one liner it's less relevant

[16:31] <El_Che> they tend to be less complex, I would think

[16:36] <[Coke]> ... right, so if they *wanted* them, they're going to be more concerned about having the regexes than the speed. otherwise just use the variety of existing tools.

[16:36] *** jmcgnh joined
[16:39] <El_Che> it would be a cool dev tool to learn regexes on top

[17:09] *** abraxxa left
[17:12] *** abraxxa joined
[17:14] *** abraxxa left
[17:17] *** abraxxa joined
[17:24] *** b2gills left
[17:24] *** b2gills joined
[17:26] *** wamba left
[17:29] *** aborazmeh joined
[17:34] *** kleb joined
[17:39] <kleb> hi folks! why do I get "TTT" as output to this program?

[17:39] <kleb> #!/usr/bin/env raku

[17:39] <kleb> use v6;

[17:39] <kleb> my $a = False;

[17:39] <kleb> my $b = True;

[17:39] <kleb> my $c = False;

[17:39] <kleb> given ($a, $b, $c) {

[17:39] <kleb>     when (False, False, False) { say "FFF"; }

[17:39] <kleb>     when (False, False, True)  { say "FFT"; }

[17:39] <kleb>     when (False, True,  False) { say "FTF"; }

[17:39] <kleb>     when (False, True,  True)  { say "FTT"; }

[17:39] <kleb>     when (True,  False, False) { say "TFF"; }

[17:39] <kleb>     when (True,  False, True)  { say "TFT"; }

[17:39] <kleb>     when (True,  True,  False) { say "TTF"; }

[17:39] <kleb>     when (True,  True,  True)  { say "TTT"; }

[17:39] <kleb>     default {

[17:39] <kleb>         say "default";

[17:39] <kleb>     }

[17:39] <evalable6> kleb, rakudo-moar 5070ae3fc: OUTPUT: «default␤»

[17:40] <codesections> m: say $_ ~~ True

[17:40] <camelia> rakudo-moar 5070ae3fc: OUTPUT: «Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at <tmp>:1␤    ------> 3say $_ ~~ 7⏏5True␤True␤»

[17:40] <codesections> kleb: ^^^^ 

[17:40] <codesections> True always matches and False always doesn't 

[17:41] <kleb> ah, gotcha

[17:41] <kleb> interesting

[17:41] <lizmat> this allows you to e.g. use a condition in a grep, as grep just does a smartmatch on what it is given

[17:42] <[Coke]> if you had just "when True" or "when False" it would give you that same warning. I suspect the (T,T,T) hides it enough

[17:44] <kleb> i think i understand the root of the problem, but am still unclear as to how i can achieve the sort of behavior i am looking for

[17:46] <kleb> what is the cleanest way for me to select the FTF branch?

[17:47] <kleb> *if i have three booleans, and want to dispatch to a code snippet depending on their relative values

[17:47] <codesections> m: say (False, True, False) ~~ (:not, :so, :not)

[17:47] <camelia> rakudo-moar 5070ae3fc: OUTPUT: «True␤»

[17:48] <kleb> ah, bingo!

[17:48] <kleb> i didn't realize I could put the :not :so in those locations

[17:48] <kleb> thanks folks!

[17:48] <codesections> I _think_ that works.  I'm still getting my head around how smartmatching and destructuring (in signatures) interact/compare

[17:48] <kleb> it does! i just tried it

[17:49] <kleb> #!/usr/bin/env raku

[17:49] <kleb> use v6;

[17:49] <kleb> my $a = False;

[17:49] <kleb> my $b = True;

[17:49] <kleb> my $c = False;

[17:49] <kleb> given ($a, $b, $c) {

[17:49] <kleb>     when (:not, :not, :not) { say "FFF"; }

[17:49] <kleb>     when (:not, :not, :so)  { say "FFT"; }

[17:49] <kleb>     when (:not, :so,  :not) { say "FTF"; }

[17:49] <kleb>     when (:not, :so,  :so)  { say "FTT"; }

[17:49] <kleb>     when (:so,  :not, :not) { say "TFF"; }

[17:49] <kleb>     when (:so,  :not, :so)  { say "TFT"; }

[17:49] <kleb>     when (:so,  :so,  :not) { say "TTF"; }

[17:49] <kleb>     when (:so,  :so,  :so)  { say "TTT"; }

[17:49] <kleb>     default {

[17:49] <kleb>         say "default";

[17:49] <kleb>     }

[17:49] <evalable6> kleb, rakudo-moar 5070ae3fc: OUTPUT: «default␤»

[17:49] <kleb> }

[17:49] <lizmat> kleb: please use a gist for that  :-)

[17:50] <lizmat> pasting pieces of code of several lines

[17:50] <kleb> how is that done? sorry i am new to this functionality

[17:51] <kleb> m: say "Test";

[17:51] <camelia> rakudo-moar 5070ae3fc: OUTPUT: «Test␤»

[17:52] <lizmat> kleb: do you have a Github account ?

[17:52] <kleb> yes

[17:52] <lizmat> then go to: gist.github.com

[17:52] <lizmat> enter your code there in a gist, and then post the URL here

[17:53] <lizmat> https://gist.github.com/lizmat/5315ff935c7cbfd3858567248ca475ed

[17:54] <kleb> gotcha - is this preferred over pastebin?

[17:54] <lizmat> no, pastebin is also ok

[17:54] <kleb> i can do https://pastebin.com/raw/svAktZYF

[17:55] <lizmat> any type of pastebin

[17:55] <lizmat> yup

[17:55] <kleb> cool! thanks for the tips!

[17:55] <kleb> gtg!

[17:55] *** kleb left
[18:12] *** wamba joined
[18:13] *** PlayPause9 joined
[18:13] *** patrickb joined
[18:14] <PlayPause9> I'm new to Linux, I'm on Linux Mint Cinnamon and I want to uninstall and reinstall Comma. Does anyone know how I do this?

[18:16] <lizmat> sena_kun ^^

[18:16] <El_Che> do you use the standalone comma or the plugin for intellij?

[18:16] * sena_kun asks the same question

[18:17] <lizmat> :-)

[18:17] <PlayPause9> Each time I want to run Comma, I have to do "./bin/comma.sh" in the terminal. I think that's standalone.

[18:17] <El_Che> PlayPause9: just rm -rf the directory where you installed it

[18:17] <sena_kun> El_Che++

[18:19] <El_Che> PlayPause9: you had a problem I remember vaguely

[18:19] <PlayPause9> What does it mean to "rm -rf"? Can you give further details?

[18:20] <El_Che> yes

[18:20] <El_Che> rm is the remove file command in UNIX/Linux

[18:20] <El_Che> the option -r means recursive (== also remove directories)

[18:21] <El_Che> the option -f means force

[18:21] <El_Che> you can also use a file browser like nautilus to delete the directory by selecting it and pressing delete

[18:33] *** MilkmanDan left
[18:33] <PlayPause9> Ah, alright. Thanks. So, how do I use "rm -rf" when trying to uninstall Comma? What would the Terminal look like?

[18:34] *** MilkmanDan joined
[18:35] <El_Che> I use Ubuntu and the terminal shortcut is ctrl+shift+t

[18:36] <El_Che> look in applications, there should be a terminal there

[18:36] <dtb> How are unicode characters output with the say function?

[18:38] <PlayPause9> Oh sorry El Che, I wasn't clear. I mean, what do I put into the terminal?

[18:39] <El_Che> you type it, but first you need to make sure what the directory is

[18:39] <El_Che> otherwise you'll delete other stuff

[18:39] <El_Che> evalable6: say "😏"

[18:39] <evalable6> El_Che, rakudo-moar 5070ae3fc: OUTPUT: «😏␤»

[18:43] <raydiak> PlayPause9: they mean just delete the directory where Comma is. if you aren't familiar with the terminal, you may want to just use your file manager of choice to delete the directory. I wouldn't start learning the terminal with potentially disasterous commands like "rm -rf" if I were you

[18:45] <PlayPause9> raydiak I see. Thank you. Thank you too El Che for trying to help me.

[18:45] <PlayPause9> I assume it's okay that I use the file manager that comes with Linux Mint itself?

[18:46] <raydiak> yes, anything that can delete the directory should work fine

[18:46] <PlayPause9> Alright, thanks.

[18:46] *** MasterDuke joined
[18:47] <raydiak> just make sure you're comfortable with it and know that you're deleting the correct directory. you're welcome of course

[18:47] <dtb> @el_che say "U+1F600"

[18:47] <dtb> Doesn't work.

[18:48] <PlayPause9> How do I do file and/or folder searches on Linux btw?

[18:49] <raydiak> there's usually a search feature built in to the file manager, often a button that looks like a magnifying glass

[18:50] <El_Che> dtb: https://docs.raku.org/language/unicode#Entering_unicode_codepoints_and_codepoint_sequences

[18:50] <MasterDuke> 'grep' to search inside files, 'find' to find files by name/size/date/etc

[18:51] <tellable6> 2021-04-09T02:50:32Z #raku-dev <vrurg> MasterDuke I have updated https://gist.github.com/vrurg/d824dc212991b9a11f4e3645e5c2e7be with the last blin output. This time against a26ff40

[18:51] <El_Che> PlayPause9: the graphical programs should be pretty evident (e.g. nautilus on Ubuntu has a search bar on top)

[18:52] <dtb> @El_Che so if I read that right you specify the unicode by decimal \c or hex \x... Why no \u to just enter the unicode value?

[18:52] <El_Che> PlayPause9: I would suggest to read a base UNIX/LInux course for basic CLI actions.

[18:52] <El_Che> the invested time will be won many times

[18:53] <japhb> Looking for feedback on a design approach, any takers welcome.  I'm working on an interruptable input library (meaning, that real time events can interrupt the user's input, and the library will pause, handle the realtime event (which can include writing updates somewhere on the screen) and then return to the user's input in progress). The problem is that raw communication with a TTY has an underlying 

[18:53] <japhb> uniprocessing assumption -- querying the VT emulator involves printing a query string, then reading a query response and parsing it; this entirely breaks if you want to multitask TTY I/O.  So my thought is to have a TTY controller in its own thread, with a command channel to interface with other threads.  The command channel allows the rest of the program to say things like "read a raw character" or "print 

[18:53] <japhb> this string" or "perform this query" or what have you, as indivisible operations.  Operations that need a response can include a promise in the command packet that will be kept with the result.  Can anyone see problems with this approach?

[18:56] <PlayPause9> Thanks everyone. The Linux Mint start-menu bar doesn't have anything resembling a search feature (e.g. no magnifying glass) but nonetheless, I'll use find. Thanks for your patience.

[18:58] <raydiak> dtb: \u would be ambiguous as to whether you're specifying the codepoint in decimal (\c) or hex (\x)

[19:02] *** asymptotically left
[19:02] *** asymptotically joined
[19:03] <dtb> @raydiak but it wouldn't be ambiguous as to whether you're specifying the codepoint in unicode.

[19:04] <dtb> other languages provide the u+##### pathern

[19:05] <japhb> dtb: In Raku, it's all unicode.

[19:05] <raydiak> a unicode codepoint can be specified many ways. the hex representation you asked about initially is only one way to specify that same character

[19:06] <dtb> @japhb Ah, now I see. say "\x1F600" works

[19:07] <japhb> m: say "\c[BUTTERFLY]";  # dtb

[19:07] <camelia> rakudo-moar b4813bbdb: OUTPUT: «🦋␤»

[19:07] <dtb> @japhb yeah I'm not digging the named approach.

[19:07] <japhb> The entire unicode database is included in Rakudo.

[19:08] <raydiak> m: say "\c128512" eq "\x1f600"

[19:08] <camelia> rakudo-moar b4813bbdb: OUTPUT: «True␤»

[19:08] <dtb> @raydiak... Thanks, I see the pattern now.

[19:09] <raydiak> you're welcome

[19:10] <japhb> dtb: I find the numeric approach works well when I'm dealing with a series of codepoints where their relative sequence has meaning, like the 1/8th block characters.  But I prefer the named version when I just want to print some symbols/glyphs.

[19:11] *** linkable6 left
[19:11] <db48x> using the names really helps when you have to make some changes 6 months or a year after writing the code

[19:11] <japhb> It helps that I have a helper program for searching the unicode DB.  :-)

[19:11] <japhb> db48x: Oh yeah, definitely that too.

[19:12] *** linkable6 joined
[19:13] <db48x> as for your architecture question, having a thread that has sole responsibility for talking to the terminal seems entirely reasonable to me

[19:14] <db48x> I’ve not done much work in that area, but the one relevant program that I have worked on has developed more and more towards that design

[19:14] *** linkable6 left
[19:14] <japhb> db48x: Ah, thank you.

[19:14] *** lucs is now known as plucs

[19:14] *** linkable6 joined
[19:14] <db48x> some things still just call printf, but most of the output is done by sending messages to a thread

[19:15] <db48x> messages like “update my progress bar to 23%”

[19:16] <japhb> OK, my idea matches someone's reality at least.  :-)

[19:16] <db48x> the only complicated thing that it does is have a synchronization message

[19:17] <db48x> it’s just an empty message that expects an empty reply

[19:17] <japhb> db48x: Oh, so other parts can say "I want to know when the TTY thread is caught up with all my requests"?

[19:18] <db48x> and we just use it to ensure that all log messages have been printed out before we exit

[19:18] <db48x> exactly, yea

[19:18] <japhb> OK, that's a good thought, thanks.

[19:19] <db48x> but aside from that, it is very crude. just barely enough code to make things work

[19:21] <japhb> db48x: Honestly, I've been kinda working my way up from the bottom anyway.  "What's the minimum I need to change to support this feature?"  The jump to the architecture idea above came when my current code couldn't handle the case of a network message arriving asynchronously and needing to change the screen while the line edit routine was in its read loop.

[19:21] <PlayPause9> I want to report something very strange guys. I did a full search on my PC for "comma" and I never found anything that resembled a folder that Comma had been installed to. I then used the terminal to run the comma.sh file that was (amongst other stuff) extracted from the comma tarball that I'd already downloaded and then Comma loads my most recent project and file. It does seem like it is installed in some way, how else can it "remember" previous 

[19:21] <PlayPause9> work? I'm not running it out of the Start-Menu though so perhaps this really is the IntelliJ thing rather than a proper installation? If Comma is installed, I want to uninstall it so I can reinstall it but that might not be necessary.

[19:22] <japhb> (Or in particular, for this to happen on *multiple* network connections)

[19:22] <db48x> japhb: that’s my preference for how to do things as well

[19:24] <PlayPause9> My question then would be: do you think I installed Comma?

[19:24] <MasterDuke> PlayPause9: it puts config files and such in a file in your home directory. '.Comma<something something>version'

[19:25] <MasterDuke> it then looks for those to import settings from a previous version

[19:27] <PlayPause9> I see. I had to turn on "see hidden files" to find it but yeah, I found the .config folder and I found Comma. It's in an "Edument Central Europe" folder. I've never heard of Edument before but oh well. I believe I can just delete this and that'll be that.

[19:28] <lizmat> Edument Central Europe is the company making Comma

[19:29] <PlayPause9> Meanwhile, Comma is FOSS?

[19:29] <lizmat> many parts of it are

[19:30] *** linkable6 left
[19:30] <PlayPause9> I see. Despite this, Comma is still the preferred Raku IDE in the Raku community?

[19:30] *** linkable6 joined
[19:30] <lizmat> yes

[19:31] <lizmat> as it is created by the current Raku architect: Jonathan Worthington

[19:35] *** softmoth joined
[19:41] <raydiak> it's a very good tool, and not an evil company trying to strong-arm you into paying. I'm fairly certain that you won't find better Raku support in any other IDE in existence, free or otherwise

[19:47] *** aborazmeh left
[19:49] *** dogbert11 joined
[19:52] <PlayPause9> I see. Thanks for the responses guys. I just checked the Raku Wikipedia page and it had no mention of this "Jonathan Worthington" fellow. Larry Wall is mentioned as its creator so I was of the opinion that Mr. Wall was still the lead developer for the language (I believe such people are referred to as "Benevolent Dictators"). The Wiki page makes no mention of Mr. Wall stepping down. When did this happen and when did Mr. Worthington come into the 

[19:52] <PlayPause9> picture?

[19:53] *** dogbert17 left
[19:54] *** Black_Ribbon joined
[19:55] *** linkable6 left
[19:55] *** linkable6 joined
[19:57] *** dogbert11 left
[19:57] <lizmat> https://github.com/MoarVM/MoarVM/graphs/contributors    # I'd say around 2012 ?

[19:58] <lizmat> well, actually before that

[19:59] <lizmat> https://github.com/Raku/CCR/blob/main/Remaster/Jonathan%20Worthington/README.md

[19:59] <lizmat> first recovered blog post of Jonathan from 2006

[20:00] <lizmat> PlayPause9: Mr. Wall was never much involved in the actual implementations

[20:01] *** dogbert11 joined
[20:01] <lizmat> still listed as #6 at https://github.com/rakudo/rakudo/graphs/contributors

[20:05] *** aborazmeh joined
[20:06] <PlayPause9> I see. It's a bit strange that Mr. Wall is credited as the creator of Raku and yet, based off of your words, was mostly uninvolved with its development. There seems to be a bit more to this than I initially expected but nonetheless, I'm sure I can read about Raku's development some other time. Thanks lizmat.

[20:06] <lizmat> no, he was involved alright

[20:07] <PlayPause9> Then again, you said "implementation", rather than development. I think there's a nuance here that I'm not getting.

[20:07] <lizmat> just not directly in the implementations

[20:07] <PlayPause9> Right.

[20:07] <lizmat> https://design.raku.org

[20:07] <lizmat> that was mostly Mr. Walls work

[20:08] <lizmat> as were the apocalypses before that

[20:10] <PlayPause9> Alright. Thanks lizmat.

[20:10] <MasterDuke> he did STD.pm mostly by himself, right?

[20:10] <softmoth> "no mention of this 'Jonathan Worthington'" That is a major oversight in the Wikipedia page :)

[20:11] <softmoth> and viv, IIRC

[20:13] <lizmat> yes, he did

[20:13] <lizmat> a bit before my time, really  :-)

[20:13] <softmoth> Well, maybe not a major oversight. It's a pretty terse history. Damien is mentioned, but Audrey isn't, for example

[20:13] <lizmat> well, feel free to update those pages

[20:13] * lizmat is still being blocked because of ore new ISP  :-(

[20:13] <softmoth> :-/

[20:14] <lizmat> I mean, the 500Mbit is nice

[20:14] <lizmat> s/ore/our

[20:16] *** dogbert17 joined
[20:19] *** dogbert11 left
[20:20] *** xinming_ left
[20:20] *** xinming_ joined
[20:20] *** abraxxa left
[20:23] *** abraxxa joined
[20:44] *** stoned75_ left
[20:48] *** m6locks_ is now known as m6locks

[20:48] *** stoned75 joined
[20:48] *** linkable6 left
[20:50] *** linkable6 joined
[21:31] *** rindolf left
[21:31] *** stoned75 left
[21:42] <japhb> OK, I feel like there's a hole in my memory right now.  Is there a way to detect in a *cross-platform*, *non-Nativecall* way that a standard handle (not a socket) is ready to read or write, *without blocking*?  The best option I've seen so far is the epoll module, but that's not cross-platform.

[21:48] *** PlayPause9 left
[21:50] *** patrickb left
[21:55] <moon-child> japhb: possibly .Supply.Channel.poll?

[21:59] <japhb> moon-child: Hmmm, interesting idea.  Might require some work to do that with raw I/O, but I'll throw that idea in my mental blender.

[22:00] * japhb has a sinking feeling they're about to read a couple more chapters of Advanced Programming in the Unix Environment ...

[22:01] <moon-child> i mean if nativecall is ok it's literally just poll({fd, POLLOUT}, 1, 0)

[22:06] *** plucs is now known as lucs

[22:16] *** kurahaupo_ joined
[22:17] *** kurahaupo left
[22:18] *** no-n joined
[22:20] *** wamba left
[22:42] <japhb> moon-child: More to it than that ... I'm discovering that I have just crossed the threshold from "knowing a few things is good" to "not knowing All The Things will be a mess".

[23:00] *** aborazmeh left
[23:01] *** idiosyncrat2 joined
[23:11] *** DiffieHellman joined
[23:29] *** dogbert17 left
[23:31] *** dogbert17 joined
[23:43] *** pecastro left
[23:51] *** mowcat left
