[00:28] *** lucasb left
[00:34] *** dataangel left
[00:41] *** tejr left
[00:41] *** xelxebar left
[00:41] *** asymptotically left
[00:44] *** pecastro left
[00:53] *** sftp left
[00:54] *** sftp joined
[00:55] *** ssm__ joined
[01:00] *** guifa2 left
[01:00] *** tejr joined
[01:03] *** asymptotically joined
[01:03] *** xelxebar joined
[01:05] *** tejr left
[01:05] *** JRaspass left
[01:06] *** tejr joined
[01:11] *** squashable6 left
[01:12] *** gordonfish left
[01:13] *** squashable6 joined
[01:20] *** simcop2387 left
[01:32] *** simcop2387 joined
[01:32] *** simcop2387 left
[01:32] *** simcop2387 joined
[01:32] *** mowotter left
[01:36] *** sftp left
[01:37] *** guifa2 joined
[01:38] *** JRaspass joined
[01:41] *** MasterDuke left
[01:47] *** gordonfish joined
[01:55] *** gnufr33dom joined
[02:11] *** guifa2_ joined
[02:11] *** guifa2 left
[02:11] *** guifa2_ is now known as guifa2

[02:28] *** kvw_5 joined
[02:32] *** kvw_5_ left
[03:16] *** JRaspass left
[03:18] *** sftp joined
[04:18] *** evalable6 left
[04:18] *** greppable6 left
[04:18] *** benchable6 left
[04:18] *** statisfiable6 left
[04:18] *** unicodable6 left
[04:18] *** bisectable6 left
[04:18] *** linkable6 left
[04:18] *** quotable6 left
[04:18] *** shareable6 left
[04:18] *** coverable6 left
[04:18] *** notable6 left
[04:18] *** committable6 left
[04:18] *** bloatable6 left
[04:18] *** squashable6 left
[04:18] *** tellable6 left
[04:18] *** nativecallable6 left
[04:18] *** sourceable6 left
[04:18] *** releasable6 left
[04:19] *** bisectable6 joined
[04:19] *** notable6 joined
[04:19] *** nativecallable6 joined
[04:19] *** tellable6 joined
[04:20] *** statisfiable6 joined
[04:20] *** bloatable6 joined
[04:20] *** evalable6 joined
[04:20] *** squashable6 joined
[04:20] *** greppable6 joined
[04:20] *** releasable6 joined
[04:20] *** committable6 joined
[04:21] *** benchable6 joined
[04:21] *** squashable6 left
[04:21] *** quotable6 joined
[04:21] *** linkable6 joined
[04:21] *** unicodable6 joined
[04:21] *** coverable6 joined
[04:21] *** shareable6 joined
[04:21] *** sourceable6 joined
[04:22] *** squashable6 joined
[04:42] *** rindolf joined
[04:44] <kawaii> I'm working on a basic !uptime command for a bot I'm writing, is there some more Perly way to do this instead of my clunky if/else? And possibly some hack to also switch between 'minute' and 'minutes' if $mins == 1 or not? :) https://www.irccloud.com/pastebin/H5G7rEEp/

[04:47] <kawaii> ($start is defined way above at the... start... of my code) :)

[05:00] *** raku-bridge left
[05:00] *** raku-bridge joined
[05:11] *** k-man left
[05:13] *** k-man joined
[05:19] *** brtastic joined
[05:20] <elcaro> kawaii: it can be done, but I think it would less readable

[05:20] <elcaro> regarding pluralising words... i usually avoid golfing something like "you have { $n } thing{ 's' if $n ≠ 1 }"

[05:21] <elcaro> I would rather write "you have $n { $n == 1 ?? 'thing' !! 'things' }"

[05:21] <elcaro> even tho it's more typing

[05:21] <kawaii> elcaro: oh both of those are nice solutions, thanks!

[05:21] <elcaro> butbut with that caveat out of the way

[05:21] <elcaro> https://tio.run/##PY5bCoMwEEX/XcVFhCQlBPvyI9LuRWq0tsaImoKI/e8uurZuxGoNHRgYLmcOt1ZNGU2T7hHYuiu0wgn7KDzGnjdnNGjVxVQpR6CLynZqPq7GNmymHC8aY6tU1KbstUlpFHIsuzuwVRE4KZW/Tw75V0lnZ6IzeV4qKk2WcWzEIymtwhkhEzqp6eBhHn9Y8xGDuKseT1DSEhQZHP95vbFlo@@NTNxMUVHCQZYWbeJqxNP0BQ

[05:22] <elcaro> i think it's less readable that what you've got tho. could also use `when` instead of `if` so your blocks align more nicely

[05:23] <elcaro> but it's your code... do what you want... and "clever" code is usually ok in little scripts

[05:25] <kawaii> elcaro: your solution there is actually quite concise, and legible, thank you very much :)

[05:27] <elcaro> i had to rename your vars so I could build pairs out of them and just use the .key in a loop

[05:27] <elcaro> it's a nice little trick

[05:28] <elcaro> the toggle ensures we only ignore subsequent leading zero's

[05:28] <elcaro> so the case where you have > 0 hours and seconds - but 0 mins - is handled fine

[05:31] <elcaro> although it doesn't join the final 2 values with "and".

[05:32] *** kaiwulf left
[05:37] <sortiz> m: sub dur(:$s=0,:$m,:$h) { ($h ?? "$h hours, " !! '') ~ ($m ?? "$m minutes and " !! '') ~ "$s seconds" } say dur(:1s); say dur(:2s,:3m); say dur(:2m,:3h); # A basic approach with the same original semantic (Don't show zeros)

[05:37] <camelia> rakudo-moar 116c8e8e8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3$m minutes and " !! '') ~ "$s seconds" }7⏏5 say dur(:1s); say dur(:2s,:3m); say dur␤    expecting any of:␤       …»

[05:38] <sortiz> m: sub dur(:$s=0,:$m,:$h) { ($h ?? "$h hours, " !! '') ~ ($m ?? "$m minutes and " !! '') ~ "$s seconds" }; say dur(:1s); say dur(:2s,:3m); say dur(:2m,:3h); # A basic approach with the same original semantic (Don't show zeros)

[05:38] <camelia> rakudo-moar 116c8e8e8: OUTPUT: «1 seconds␤3 minutes and 2 seconds␤3 hours, 2 minutes and 0 seconds␤»

[05:38] <kawaii> elcaro: doing that is way more trouble than it's worth imho, here's an example of that with an array of terms, almost illegible; `@items.&{ .head(*-1).&{ .join(", ") if $_ }, .tail }.join: " and "`

[05:40] <kawaii> m: my @items = 'apple', 'peach', 'watermelon', 'lemon', 'lime'; say @items.&{ .head(*-1).&{ .join(", ") if $_ }, .tail }.join: " and ";

[05:40] <camelia> rakudo-moar 116c8e8e8: OUTPUT: «apple, peach, watermelon, lemon and lime␤»

[06:16] <moon-child> kawaii: no oxford comma ;-;

[06:17] <moon-child> sortiz: instead of  ($h ?? "$h hours, " !! '') you can use ("$h hours, " if $h)

[06:18] *** japhb left
[06:20] <moon-child> m: my @a = <apple peach watermelon lemon lime>; print "@a[0 .. *-2].map({"$_, "}).join()and @a[*-1]";

[06:20] <camelia> rakudo-moar 116c8e8e8: OUTPUT: «apple, peach, watermelon, lemon, and lime»

[06:20] <sortiz> moon-child++, you're right

[06:21] <moon-child> oh, no, even easier

[06:21] <moon-child> m: my @a = <apple peach watermelon lemon lime>; print "@a[0 .. *-2].join(', '), and @a[*-1]"

[06:21] <camelia> rakudo-moar 116c8e8e8: OUTPUT: «apple, peach, watermelon, lemon, and lime»

[06:21] <kawaii> moon-child: it's 06:21, let's not have this debate now ;3

[06:23] <moon-child> kawaii: why are you up so early??

[06:23] <moon-child> (though granted it's pretty late here...should sleep but eh)

[06:23] <kawaii> I do my best work at night, I'll go to sleep shortly

[06:25] <sortiz> Sweet dreams

[06:32] *** wamba joined
[06:38] *** ufobat__ joined
[06:52] *** rindolf left
[06:53] <elcaro> moon-child: your code fails with a list of 1 :D

[06:55] <moon-child> elcaro: tbf you probably wanna special-case both 1 and 2 anyway

[06:55] <moon-child> because for 3 items: a, b, and c.  For 2 items: a and b

[06:55] <elcaro> yeah, I'm fairly certain there's a Lingua::* module  for perl that does it

[06:56] <elcaro> oh wait... there's already a Raku port: Lingua::Conjunction

[07:16] *** aluaces joined
[07:22] *** sjm_uk joined
[07:26] *** telex left
[07:27] *** telex joined
[07:28] *** defaultxr left
[07:29] *** defaultxr joined
[07:30] *** domidumont joined
[07:31] *** parabolize left
[07:33] *** patrickb joined
[07:40] *** gnufr33dom left
[07:46] *** gnufr33dom joined
[07:49] *** jcarty joined
[07:52] *** Xliff left
[08:00] <jcarty> Hello, is there a way to add something like error reporting to rakus grammars? I have a kind of large grammar and finding errors in some of the things it tries to read is challenging

[08:01] *** gnufr33dom left
[08:04] <andinus> https://docs.raku.org/programs/01-debugging#Grammar::Debugger_(and_Grammar::Tracer_in_the_same_distribution)

[08:04] <andinus> docs link to Grammar::Debugger ^

[08:06] *** Garbanzo left
[08:08] *** krkini joined
[08:08] *** kini left
[08:09] <kiti_nomad[m]> Ask a very silly question, what does LWP mean

[08:10] <jcarty> I've used Grammar::Debugger before in the past but that's more for actively debugging right? I was looking for a way to try and report something during it's regular use rather than just saying the parser failed.

[08:10] <moon-child> kiti_nomad[m]: (l)ib(w)ww (p)erl?

[08:11] <moritz> jcarty: something like Grammar::ErrorReporting?

[08:11] <moritz> shill warning: that's my module :-)

[08:11] <moritz> there's also Grammar::PrettyError

[08:12] <jcarty> I think so I will take a look

[08:12] <moritz> *and* Grammar::Message, because two modules aren't enough :D

[08:12] <moritz> also, my parsing book has a chapter on error reporting

[08:16] <kiti_nomad[m]> right,thx

[08:16] <kiti_nomad[m]> moon-child 

[08:19] <jcarty> moritz where would I find Grammar::Message. I found ErrorReporting and Pretty Error on Raku land.

[08:21] <andinus> jcarty: it's in p6c ecosystem

[08:21] <andinus> github/ugexe/Perl6-ecosystems

[08:22] <moritz> jcarty: https://modules.raku.org/search/?q=Grammar%3A%3AMessage

[08:22] <jcarty> Ah thanks!

[08:28] *** abraxxa joined
[08:32] *** dotdotdot left
[08:33] *** abraxxa left
[08:34] *** abraxxa joined
[08:50] *** Scimon joined
[09:02] *** TheAthlete joined
[09:07] *** pecastro joined
[09:10] *** JRaspass joined
[09:12] *** Sgeo__ left
[09:14] *** CIAvash left
[09:15] *** CIAvash joined
[09:15] *** SmokeMachine joined
[09:18] *** CIAvash left
[09:18] *** matiaslina left
[09:20] *** PimDaniel joined
[09:21] *** MitarashiDango[m left
[09:21] *** Tirifto[m] left
[09:21] *** ThaEwat left
[09:21] *** unclechu left
[09:21] *** AlexDaniel` left
[09:21] *** JJAtria[m] left
[09:22] *** kiti_nomad[m] left
[09:30] *** sortiz left
[09:36] *** jmerelo joined
[09:36] <PimDaniel> Coke: thank's for the subset you published for me yesterday after i leaved!

[09:36] <tellable6> 2021-01-21T21:57:39Z #raku <[Coke]> pimdaniel https://gist.github.com/coke/53cf70ad3bc412d93f79757b8e2b336f - there's a subset variant.

[09:36] <jmerelo> releasable6: status

[09:36] <releasable6> jmerelo, Next release in ≈1 day and ≈9 hours. 1 blocker. 22 out of 74 commits logged

[09:36] <tellable6> 2021-01-20T00:47:30Z #raku <tony-o> jmerelo another article/bit of info on zef eco - https://deathbyperl6.com/faq-zef-ecosystem/

[09:36] <releasable6> jmerelo, Details: https://gist.github.com/f8693ea70005474438e2b1910241b81f

[09:36] <jmerelo> .tell tony-o thanks!

[09:36] <tellable6> jmerelo, I'll pass your message to tony-o

[09:37] <PimDaniel> I did not know the yet the subset keyword, so could not imagine it as a possibility.

[09:42] <PimDaniel> tellable6: thank's i saw i in the #raku logs i whatch each morning.

[09:42] <tellable6> PimDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Tellable

[09:45] *** sena_kun joined
[09:48] *** jcarty left
[09:48] *** TheAthlete left
[09:51] *** PimDaniel left
[09:55] *** abraxxa left
[10:06] *** ThaEwat joined
[10:10] *** abraxxa joined
[10:13] *** AlexDaniel` joined
[10:13] *** unclechu joined
[10:13] *** JJAtria[m] joined
[10:13] *** CIAvash joined
[10:13] *** matiaslina joined
[10:13] *** kiti_nomad[m] joined
[10:13] *** MitarashiDango[m joined
[10:13] *** Tirifto[m] joined
[10:13] *** MitarashiDango[4 joined
[10:24] *** donaldh joined
[10:49] *** wamba left
[10:52] *** jcarty joined
[10:52] <jcarty> moritz Pretty errors is just what I was looking for initially thanks

[10:59] *** dotdotdot joined
[11:38] *** natrys joined
[11:41] *** jcarty left
[11:41] *** wamba joined
[11:43] *** ufobat_ joined
[11:47] *** ufobat__ left
[11:52] *** patrickb left
[12:09] *** abraxxa left
[12:09] *** PimDaniel joined
[12:10] <PimDaniel> Hi \o

[12:10] <andinus> hi o/

[12:10] <PimDaniel> I see that defined/not defined works.

[12:10] <PimDaniel> like in Perl5

[12:12] <PimDaniel> but Is is the good way to check definition of a variable? Or should a boolean check with if suffice? if $var {...} ????

[12:12] <moritz> that depends on what you want to check

[12:12] <El_Che> $var.defined is a winner

[12:12] <moritz> if you have an Int variable, for example if $var { ... } will be false both for undefined and 0

[12:14] <PimDaniel> re 'my Int $i=0; say $i.defined'  ==> True

[12:14] <PimDaniel>  re 'my Int $i=Nil; say $i.defined' => False

[12:15] <PimDaniel> moritz: defined to 0 IS defined.

[12:16] *** a3r0 left
[12:16] *** a3r0 joined
[12:17] <PimDaniel> You meant : if i just check it with if.

[12:18] <elcaro> yes, `if $x` just checks "truthiness", and Int 0 is "falsy", as is the empty list

[12:18] <elcaro> m: my @a; say so @a;

[12:18] <camelia> rakudo-moar 7f90c71c3: OUTPUT: «False␤»

[12:19] <elcaro> btw, `so` is the opposite of `not`

[12:19] <elcaro> ie. a low precedence boolean coercer

[12:19] <PimDaniel>  re 'my Int $i=0; if $i {say "OK"} else {say "NO"}' ==> "NO"

[12:20] <PimDaniel> Ok thank's , this is logical!

[12:21] <elcaro> oh, there's also prefix `?` which is the opposite of prefix `!`

[12:21] <elcaro> m: my @a; say ?@a; say !@a;

[12:21] <camelia> rakudo-moar 7f90c71c3: OUTPUT: «False␤True␤»

[12:28] *** patrickb joined
[12:47] *** rindolf joined
[13:11] *** ufobat__ joined
[13:13] <PimDaniel> Just to remind : what is the remplacement for : (statement(true)) ? do something : do other thing; in Raku.

[13:13] *** ufobat_ left
[13:14] <PimDaniel> i mean : (expression)? do this : do that;

[13:14] *** aborazmeh joined
[13:14] *** aborazmeh left
[13:14] *** aborazmeh joined
[13:15] <guifa2> Statement ?? ifTrue !! ifFalse

[13:15] <PimDaniel> guifa2: YESS! thank's : https://docs.raku.org/routine/%3F%3F%20!!

[13:25] <PimDaniel> may submethod BUILD come with custom new method?

[13:27] <PimDaniel> and if YES : must signatures be different?

[13:28] <moritz> the two are pretty orthogonal

[13:28] <moritz> new() tends to call bless()

[13:28] <moritz> and bless in turn calss submethod BUILD

[13:28] <moritz> youc an use whatever arguments you like for new

[13:28] <moritz> but BUILD receives named arguments for each attribute to be initialized

[13:31] <PimDaniel> if i have a custom new with a special signature : when i call it with my special caller : ok

[13:33] <PimDaniel> I have a submethod BUILD with another signature and when i try to call it with another new caller : it complains that new sub has not good parameters.

[13:33] <PimDaniel> what dit i not understand?

[13:34] <moritz> show us the code (ideally condensed to the essential part)

[13:35] <PimDaniel> https://pastebin.com/RgJhgRAB

[13:36] *** aborazmeh left
[13:36] <PimDaniel> note  that method new alone works and method BUILD alone works too with good callers.

[13:38] <PimDaniel> may be shoud i make a multi new instead...

[13:38] <PimDaniel> caller for new instance : my $l = Line.new((33,22),(100,22), int-motif => 8364)

[13:39] <PimDaniel> caller for BUILD which should be the default caller : my $l = Line.new(a => Point.new(33,22),b => Point.new(100,22),motif => 'X');

[13:40] *** aborazmeh joined
[13:40] *** aborazmeh left
[13:40] *** aborazmeh joined
[13:43] *** Black_Ribbon left
[13:48] <PimDaniel> I'v found the error : in this case, new MUST be a multi method.

[13:49] <PimDaniel> ... which seams logical since BUILD is a constructor too. 

[13:50] <moritz> it must only be a multi if you want the default to work (with named arguments)

[13:51] *** JRaspass left
[13:52] <PimDaniel> Ok thank's moritz!

[14:02] *** aborazmeh left
[14:05] *** sena_kun left
[14:05] *** sena_kun joined
[14:06] *** PimDaniel left
[14:26] *** TheAthlete joined
[14:26] *** mowotter joined
[14:39] *** gnufr33dom joined
[14:50] *** mowotter left
[15:03] *** JRaspass joined
[15:13] *** Sgeo joined
[15:17] *** lucasb joined
[15:23] *** wamba left
[15:24] *** wamba joined
[15:27] *** aborazmeh joined
[15:27] *** aborazmeh left
[15:27] *** aborazmeh joined
[15:33] *** b2gills left
[15:44] *** parabolize joined
[16:00] *** MitarashiDango[m left
[16:03] *** JRaspass left
[16:10] *** aborazmeh left
[16:12] * [Coke] yawns.

[16:13] *** b2gills joined
[16:35] <lucasb> that is contagious

[16:37] <[Coke]> muahaha

[16:38] *** mowotter joined
[16:40] *** gnufr33dom left
[16:59] *** Scimon left
[17:00] <guifa2> Yeah in COVID times that's dangerous

[17:03] *** sortiz joined
[17:03] *** TheAthlete left
[17:05] *** JRaspass joined
[17:22] *** JRaspass left
[17:30] *** shiva joined
[17:32] *** shiva left
[17:36] *** APic joined
[17:51] *** domidumont left
[18:02] *** JRaspass joined
[18:02] *** ufobat__ left
[18:21] *** gdonald left
[18:40] <tony-o> patrickb: updating the faq now, ty

[18:40] <tellable6> 2021-01-22T09:36:53Z #raku <jmerelo> tony-o thanks!

[18:40] <patrickb> o/

[19:01] *** wamba left
[19:06] *** MasterDuke joined
[19:11] *** JRaspass left
[19:18] *** wamba joined
[19:29] *** JRaspass joined
[19:58] *** jmchael joined
[19:59] *** jmchael left
[19:59] *** jmerelo left
[20:06] *** asymptotically left
[20:06] *** asymptotically joined
[20:09] *** sortiz left
[20:10] *** asymptotically left
[20:11] *** asymptotically joined
[20:21] *** summerisle joined
[20:22] *** summerisle left
[20:23] *** summerisle joined
[20:24] *** summerisle left
[20:25] *** summerisle joined
[20:27] *** sjm_uk left
[20:43] *** squashable6 left
[20:43] *** squashable6 joined
[20:47] *** wamba left
[20:53] *** stoned75 joined
[21:01] *** MasterDuke left
[21:05] *** wamba joined
[21:09] *** natrys left
[21:17] *** rindolf left
[21:20] *** aborazmeh joined
[21:20] *** aborazmeh left
[21:20] *** aborazmeh joined
[21:27] *** cog_ joined
[21:28] *** cog left
[21:37] *** patrickb left
[21:38] <tbrowder>  \o

[21:40] *** kaiwulf joined
[21:42] <tbrowder> revisiting my prob yesterday with wrapping another sub (with help from dakkar, elcaro, and moritz), i think i may be able to use a Capture, if i read the docs correctly.

[21:47] <tbrowder> the wrapping sub: "sub foo($a, |c) {  # rearrange the capture contents as necessary; my @res = wrapped-sub($a, c.Capture)}"

[21:52] <tbrowder> no, maybe: "my $c = c.Capture; @res = wrapped-sub($a, |$c);"

[21:55] *** brtastic left
[22:05] <guifa2> Actually, c itself is a capture

[22:06] <guifa2> So you only need @res = wrapped-sub($a, |c); 

[22:14] *** stoned75 left
[22:16] *** bdju left
[22:17] *** bdju joined
[22:21] *** aborazmeh left
[22:29] *** stoned75 joined
[22:35] <Tirifto[m]> p6: map({ say $; $ }, map({ say $; $ }, (1, 2, 3)));

[22:35] <camelia> rakudo-moar 7f90c71c3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Name must begin with alphabetic character␤at <tmp>:1␤------> 3map({ say $7⏏5; $ }, map({ say $; $ }, (1, 2, 3)))␤    expecting any of:␤        infix␤        infix stopper␤        p…»

[22:36] <tbrowder> yes, but i need to modify it, so i took the hash "my %a = c.Hash;" modified the hash, and turned it into a new capture "my $d = %a.Capture" and fed it to my wrapped sub "my @res = wrapped $a, :$b, |$d"

[22:36] <Tirifto[m]> (My apologies; I didn’t realise my client would mess with the text.)

[22:38] *** Tirifto joined
[22:38] <tbrowder> i have a simple test prog that works. now i have to try it in the real mccoy!

[22:41] <guifa2> tbrowder: ah, okay.  If you are just using the hash values from the capture, then you can skip a step and just slip in the hash, e.g. wrapped $a, |%a

[22:41] <tbrowder> ok, cool, thnx

[22:53] <Tirifto[m]> p6: map({ say $_; $_ }, map({ say $_; $_ }, (1, 2, 3)));

[22:53] <camelia> rakudo-moar 7f90c71c3: OUTPUT: «1␤1␤2␤2␤3␤3␤»

[22:53] <Tirifto[m]> ^ Just wanted to say I found this pretty curious. 😸

[22:53] *** stoned75 left
[22:55] *** autark joined
[22:56] <Tirifto[m]> I wonder how the order was determined here? Does the inner function only get mapped to an element when the outer function asks for an element first?

[22:57] *** Black_Ribbon joined
[23:05] <guifa2> AFAIK map isn't lazy, but the order holds up when doing it a different way:

[23:05] <guifa2> sub slow($x) { sleep 1; $x };  (1,2,3).map({ .say; slow $_ }).map( *.say );

[23:05] <evalable6> guifa2, rakudo-moar 7f90c71c3: OUTPUT: «1␤1␤2␤2␤3␤3␤»

[23:07] <guifa2> And is different from

[23:08] <guifa2> m: sub slow($x) { sleep 1; $x };  (1,2,3)>>.&{ .say; slow $_ }>>.&{ .say };

[23:08] <camelia> rakudo-moar 7f90c71c3: OUTPUT: «1␤2␤3␤1␤2␤3␤»

[23:09] *** aluaces left
[23:10] <guifa2> Tirifto: actually, the docs state that .map on a List *is* lazy

[23:11] <Tirifto[m]> guifa2: Ohhh, okay, I see that part now.

[23:11] <Tirifto[m]> It says ‘lazily’, so I didn’t see it when I lazily searched for ‘lazy’. :-)

[23:12] <guifa2> Tirifto: same actually :-) 

[23:12] <guifa2> (and hey, I just learned one of the small differences between .map and >>. )

[23:14] <Tirifto[m]> I only remember that ». doesn’t provide a reliable order of function application. So technically it could also print «3␤1␤2␤1␤2␤3␤», right?

[23:15] <guifa2> Yeah.  Although presently it does always execute in order

[23:22] *** autark left
[23:23] <Tirifto[m]> Hmm… so is that likely the reason the order goes like that, guifa2? Because ». is not lazy like map is when it comes to Lists?

[23:25] *** sena_kun left
[23:26] <guifa2> Tirifto: Yeah, I believe so.  Note the difference too:

[23:26] <guifa2> say (1,2,3).map({$_}).WHAT; say (1,2,3)>>.&{$_}.WHAT

[23:26] <evalable6> guifa2, rakudo-moar 7f90c71c3: OUTPUT: «(Seq)␤(List)␤»

[23:26] <guifa2> also excuse me while I rinse my keyboard off after that line noise mess 

[23:27] <Tirifto[m]> Have a good rinse!

[23:28] *** wamba left
[23:29] <Tirifto[m]> And I see… My understanding is that sequences are inherently more lazy, so that would fit in. :-)

[23:31] <Tirifto[m]> Well, back to imperative style! I guess that was the right choice in the first place, given my care for side effects.

[23:34] <guifa2> m: sub slow($x) { sleep 1; $x };  (1,2,3).map({ .say; slow $_ }).eager.map( *.say );

[23:34] <camelia> rakudo-moar 7f90c71c3: OUTPUT: «1␤2␤3␤1␤2␤3␤»

[23:35] <guifa2> Tirifto: ^^ if you want to use the functional style still

[23:41] <Tirifto[m]> Ohh, eager!

[23:44] <Tirifto[m]> guifa2: Thanks! I’ll see where it would fit in. Might end up with a hybrid approach. That feels like a good way to go with Raku in general.

[23:52] *** Tirifto left
