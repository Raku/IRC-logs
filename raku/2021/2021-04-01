[00:02] *** b2gills joined
[00:05] *** rjeli joined
[00:06] *** caasih joined
[00:35] *** Kaeipi left
[00:35] *** Kaeipi joined
[00:43] *** dogbert17 left
[00:44] *** mowcat left
[01:12] *** tejr left
[01:13] *** tejr joined
[01:14] *** abraxxa left
[01:16] *** abraxxa joined
[01:29] *** kvw_5_ joined
[01:32] *** kvw_5 left
[01:33] *** dogbert17 joined
[01:40] *** aborazmeh joined
[02:08] *** aborazmeh left
[02:20] *** guifa2 left
[02:42] *** wamba joined
[02:45] *** sina joined
[02:46] *** sina left
[03:20] *** kurahaupo left
[03:51] *** wamba left
[03:53] *** neshpion left
[04:09] *** guifa2 joined
[04:20] *** parabolize left
[04:22] *** parabolize joined
[04:46] *** simcop2387 joined
[04:58] *** Doc_Holliwould joined
[05:04] *** Geth joined
[05:09] *** judd7 joined
[05:27] *** parabolize left
[05:31] *** judd7 left
[05:57] *** wamba joined
[06:02] *** judd7 joined
[06:21] *** guifa2 left
[06:23] *** jmerelo joined
[06:31] *** squashable6 left
[06:32] *** squashable6 joined
[06:43] *** Sgeo_ left
[06:43] *** domidumont joined
[06:56] *** HarmtH left
[06:57] *** HarmtH joined
[06:59] *** patrickb joined
[07:00] *** Doc_Holliwould left
[07:02] *** judd7 left
[07:03] *** judd7 joined
[07:09] *** frost-lab joined
[07:17] *** Doc_Holliwould joined
[07:24] *** rindolf joined
[07:26] *** abraxxa left
[07:28] *** abraxxa joined
[07:31] *** pecastro joined
[07:38] *** Doc_Holliwood joined
[07:38] *** Doc_Holliwould left
[07:39] * moon-child grumbles about enums starting at 0, meaning that the first member is falsy

[07:39] <Geth> ¦ doc: 67c17f38ab | (JJ Merelo)++ | doc/Type/Lock.pod6

[07:39] <Geth> ¦ doc: Reformat links to avoid errors.

[07:39] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/67c17f38ab

[07:39] <Geth> ¦ doc: 6554fe976f | (JJ Merelo)++ | 2 files

[07:39] <Geth> ¦ doc: Fixes spelling errors, reorgs files

[07:39] <Geth> ¦ doc: 

[07:39] <Geth> ¦ doc: Closes #3849

[07:39] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/6554fe976f

[07:39] <linkable6> Link: https://docs.raku.org/type/Lock

[07:40] *** linkable6 left
[07:41] *** linkable6 joined
[07:52] *** ManifestO left
[07:52] *** Doc_Holliwood left
[07:52] *** judd7 left
[07:53] *** Manifest0 joined
[07:56] *** Doc_Holliwood joined
[07:56] *** Kaeipi left
[07:58] *** Kaiepi joined
[08:05] *** sno left
[08:27] *** abraxxa left
[08:28] *** abraxxa joined
[08:54] <Geth> ¦ doc: 115fcfbf44 | (JJ Merelo)++ | doc/Type/Blob.pod6

[08:54] <Geth> ¦ doc: Adding candidates for subbuf

[08:54] <Geth> ¦ doc: 

[08:54] <Geth> ¦ doc: Trying to address #3744, but actually addressing #2694, which didn't list specifically subbuf.

[08:54] <Geth> ¦ doc: 

[08:54] <Geth> ¦ doc: As a matter of fact, now these candidates do not have any example.

[08:54] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/115fcfbf44

[08:54] <Geth> ¦ doc: 8e6056afb3 | (JJ Merelo)++ | doc/Type/IO/Path.pod6

[08:54] <linkable6> Link: https://docs.raku.org/type/Blob

[08:54] <Geth> ¦ doc: Adds missing candidate

[08:54] <Geth> ¦ doc: 

[08:54] <Geth> ¦ doc: Trying to address #3744.

[08:54] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/8e6056afb3

[08:54] *** linkable6 left
[08:55] *** linkable6 joined
[09:05] *** Doc_Holliwood left
[09:12] *** sno joined
[09:35] <Geth> ¦ doc: 07b527e7ed | (JJ Merelo)++ | doc/Type/IO/Path.pod6

[09:35] <Geth> ¦ doc: Eliminate deprecation notice

[09:35] <Geth> ¦ doc: 

[09:35] <Geth> ¦ doc: This one was added when [this](https://github.com/rakudo/rakudo/commit/6d2adb20f2529e36e32b50936281ef3f11f078b0) was merged, but apparently not removed when [it was reverted](https://github.com/rakudo/rakudo/commit/a65d5f922aeeff2c4dfd288f54a50a159f683aae)

[09:35] <Geth> ¦ doc: 

[09:35] <Geth> ¦ doc: Closes #3850

[09:35] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/07b527e7ed

[09:35] <linkable6> Link: https://docs.raku.org/type/IO::Path

[09:35] *** linkable6 left
[09:36] *** linkable6 joined
[09:45] *** aluaces left
[09:45] *** Leo31 joined
[09:56] *** Leo31 left
[10:01] *** judd7 joined
[10:04] *** retropikzel left
[10:14] *** abraxxa left
[10:15] *** abraxxa joined
[10:21] *** gfldex_ is now known as gfldex

[10:31] *** Doc_Holliwood joined
[10:37] *** aluaces joined
[10:40] <Geth> ¦ doc: 140d4326b2 | (JJ Merelo)++ | doc/Type/independent-routines.pod6

[10:40] <Geth> ¦ doc: Changes to match original

[10:40] <Geth> ¦ doc: 

[10:40] <Geth> ¦ doc: Also reflow. While checking #3744. None of the deprecated methods were actually included.

[10:40] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/140d4326b2

[10:40] <Geth> ¦ doc: 3e8d67b4ca | (JJ Merelo)++ | doc/Type/Iterator.pod6

[10:40] <Geth> ¦ doc: Mainly reflowhile checking #3744.

[10:40] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/3e8d67b4ca

[10:40] <linkable6> Link: https://docs.raku.org/type/independent-routines

[10:40] *** linkable6 left
[10:41] *** linkable6 joined
[10:41] *** jmerelo left
[10:51] *** Black_Ribbon left
[10:57] *** PimDaniel joined
[10:58] *** PimDaniel left
[10:59] *** PimDaniel joined
[11:01] *** frost-lab left
[11:01] *** frost-lab joined
[11:01] *** wamba left
[11:31] *** Doc_Holliwood left
[11:32] *** frost-lab left
[11:34] *** Doc_Holliwood joined
[11:44] <tbrowder> hi, all

[11:45] <tbrowder> anyone wanna discuss class DateTime ?

[11:46] <tbrowder> i'm trying to understand class Instant. docs say it is not tied to any epoch, but that doesn't make sense to me.

[11:47] <tbrowder> what does a zero Instant mean?

[11:48] <tbrowder> one can convert a posix timestamp to either an Instant or  a DateTime object and either object will then show the same Instant value.

[11:52] <tbrowder> also, docs don't say it but you can create a new DateTime obj from a fractional posix timestamp and the new obj will show fractional seconds (but only the integral part of the posix input).

[11:52] <tbrowder> that sounds like a bug to me

[11:54] *** judd7 left
[12:05] <gfldex> tbrowder: "not tied to any epoch" means: "Don't assume the unix epoc. In fact, don't assume anything."

[12:08] <PimDaniel> o/

[12:08] <tellable6> 2021-03-31T20:00:09Z #raku <ggoebel> PimDaniel: yes it looks like you can set breakpoints and debug step by step in the community editions

[12:08] *** judd7 joined
[12:09] <PimDaniel> ggoebel ok thank's!

[12:09] <tbrowder> but the docs should say a bit more than that, don't you think? at least say in general how the number is derived.

[12:11] <PimDaniel> Is this ugly: my @all_lines := (@!diagonales,@vertices,@mis_lines).flat? Could we write this more simple?

[12:12] <PimDaniel> I mean is there a simpler way to cat some list without using flat?

[12:13] *** wamba joined
[12:13] <tbrowder> surely there is a common zero, otherwise how could two Instants be compared?

[12:15] <tbrowder> so if there is a common zero on the same time scale, mustn't that zero be an epoch, even if it doesnt't have a commonly known name?

[12:17] *** sena_kun left
[12:17] *** sena_kun joined
[12:37] *** wingfold left
[12:43] <moritz_> PimDaniel: I don't think we have a list concat operator, much to my chargrin

[12:43] <tadzik> makes you miss Perl, eh? :)

[12:46] <tyil> `my @combined = (|@foo, |@bar)`? :p

[12:47] <tadzik> hmm

[12:47] <tadzik> m: my @a = 1,2,3; my @b = 2,3,4; my @combined = @a ,| @b; @combined.gist.say

[12:47] <camelia> rakudo-moar 726a75e24: OUTPUT: «[[1 2 3] 2 3 4]␤»

[12:47] <tadzik> gah, almost

[12:47] <tadzik> I wanted to dub `,|` a f(l)at comma :P

[12:48] *** wingfold joined
[12:53] *** wingfold left
[12:53] <gfldex> tbrowder: The common 0 is an implementation detail (that is not marked as such). 

[12:56] <tbrowder> fair enough, but i have glanced at the code and see reference to 'tai'  and that name rings a bell.

[12:57] <tbrowder> ah, International Atomic Time (TAI), abbr from the French name

[13:09] <gfldex> how about `my **@a = @b, @c, @d` ?

[13:10] *** monkey__ joined
[13:11] <gfldex> m: my @a = <a b c>; my @b = 1,2,3; for @a, @b -> **@c { dd @c; }

[13:11] <camelia> rakudo-moar 726a75e24: OUTPUT: «Array element = [["a", "b", "c"],]␤Array element = [[1, 2, 3],]␤»

[13:11] <gfldex> not quite DWIM

[13:17] <vrurg> gfldex: why? It is expected.

[13:18] <vrurg> for doesn't flatten, ** is explicitly non-flattening.

[13:25] <gfldex> m: my @a = <a b c>; my @b = 1,2,3; my @c := -> *@c { @c }(@a, @b); dd @c;

[13:25] <camelia> rakudo-moar 726a75e24: OUTPUT: «Array element = ["a", "b", "c", 1, 2, 3]␤»

[13:25] <gfldex> My point is that signatures can autoflatten but assignment can't. That's a little odd.

[13:35] *** berber44 joined
[13:47] <vrurg> As to the original PimDaniel question I'd say | is the best answer. But otherwise it's an interesting point. I wouldn't expect `*@a = ...` to work as there are possible side effects. But for `my` it would be an interesting point.

[13:47] *** esh left
[13:48] *** esh joined
[13:59] <PimDaniel> booowhh, i could not imagine my question was so .... 

[14:03] *** parabolize joined
[14:07] <PimDaniel> Well this is not clear to me since i've go many answers : Has i undestood, i tried : my @combined = (|@a,|@b,|@c,...) and it works too. But for now i do not mind to keep .flat.

[14:08] <PimDaniel> Thank you!

[14:09] *** esh left
[14:12] *** esh joined
[14:16] *** Doc_Holliwood left
[14:19] *** patrickb left
[14:26] *** monkey__ left
[14:26] *** abraxxa left
[14:29] *** abraxxa joined
[14:31] *** monkey__ joined
[14:31] *** Doc_Holliwood joined
[14:34] *** __jrjsmrtn__ left
[14:37] *** __jrjsmrtn__ joined
[14:38] *** mniip left
[14:44] *** __jrjsmrtn__ left
[14:46] *** __jrjsmrtn__ joined
[15:18] *** Sgeo joined
[15:19] *** RC joined
[15:21] *** jmerelo joined
[15:21] *** esh left
[15:21] <ggoebel> a comma ide question... trying to stub out a new module. created a t/00-sanity.rakutest file with the contents: use v6.d; use Test; use-ok 'MyModule:ver<0.1.0>'; done-testing;  -And Comma's code analysis is complaining that use-ok and done-testing subroutines are not declared. I.e. it isn't picking up on their being exported by Test.  Are these false-positives a known issue? Is there a fix or work-around?

[15:22] <jmerelo> ggoebel: can you post the code?

[15:22] <jmerelo> ggoebel: and the error message?

[15:22] <jmerelo> Ah, OK, that's all the code there is...

[15:23] <jmerelo> ggoebel: it might be the case that they're not "picking them up" since they are system libraries. Just add them to the META6.json file

[15:24] <ggoebel> will give that a try

[15:24] <jmerelo> ggoebel: It won't hurt, and will help comma find them and not complain about them. 

[15:28] <ggoebel> add Test, Test::META, and App::Prove6 to test-depends... no luck. The code analysis which runs before my initial git commit still shows the same "Error:(4,1) Subroutine use-ok is not declared" and similar for other Test imports.

[15:28] <ggoebel> guess I can tick the box to turn off code analysis on git commits

[15:31] <sena_kun> ggoebel, can you check in Project Structure what SDK is set?

[15:31] <sena_kun> ggoebel, File -> Project Structure.

[15:33] *** fluca1978 left
[15:33] <ggoebel> <No Project SDK> which if I read correctly should default to what it finds in the PATH... Raku v2021.03.22.gec.73.d.6.c.96

[15:34] <ggoebel> setting that explicitly, closing, and reopening project still results in same error in code analysis

[15:37] *** andinus joined
[15:38] *** Doc_Holliwood left
[15:42] <jmerelo> ggoebel: actually, you have to set that up explicitly for every project

[15:42] *** jmerelo left
[15:45] <ggoebel> Interesting. Just updated comma to latest available community edition. pretty sure it said if it wasn't set it would default to first raku found in path. but now that I've set it, I can't unset it.

[15:45] <ggoebel> s/just/I had just/

[15:53] <sena_kun> ggoebel, I think you misread the changelog about using the default. As for the symbols not found: the indexing is done? Can you do some typing in the file to re-trigger analysis?

[15:55] *** rindolf left
[15:57] <sena_kun> I cannot reproduce it, can you compare what you are seeing: https://ibb.co/mhTNLgJ ?

[16:01] *** mowcat joined
[16:02] *** RC left
[16:02] <ggoebel> here is what I get before renaming files from *.t to *.rakutest

[16:02] <ggoebel> https://ibb.co/cy6cyqP

[16:03] <sena_kun> ggoebel, are you using some plugins? Maybe like Perl5 support plugin?

[16:04] *** kurahaupo joined
[16:05] <sena_kun> It appears to me that this is likely true and given Perl 5 and Perl 6 shared `.t` extension for test files in past the Perl plugin is likely to take the control and thus Comma plays no role with it. But it will be better with using a non-ambiguous extension, *.rakutest as you noted.

[16:07] <ggoebel> And here after .pm6->.rakumod and .t->.rakutest

[16:07] <ggoebel> https://ibb.co/xjcb4Cr

[16:08] <sena_kun> ggoebel, can you please do File -> Invalidate Caches and restart?

[16:13] <ggoebel> no change

[16:16] <ggoebel> actually my bad... or color blindness... either that or turning off the perl6 plugin worked

[16:16] <ggoebel> thank you for your help!

[16:18] <sena_kun> ggoebel, you mean perl 5 plugin? Glad it worked for you. I still think having Perl 5 plugin enabled should not do such hindrances, so I'll try to investigate it some time.

[16:18] <ggoebel> yes sorry perl5 plugin

[16:20] <ggoebel> still works after turning perl5 plugin back on

[16:21] <ggoebel> In the future, I will remember to try File -> Invalidate Caches and restart

[16:21] <ggoebel> do you know what all gets cached?

[16:22] <ggoebel> there were enough project configuration variables that I'm not sure which one created the original problem

[16:23] <sena_kun> ggoebel, I would bet on 1)Perl plugin "overloaded" .t files, so they were not processed as Raku ones; 2)No SDK set in Project Structure, which is mandatory; When you fixed two of these and restarted it once or twice it started to work.

[16:24] <ggoebel> I appreciate you taking the time to help me. Thank you!

[16:24] <sena_kun> ggoebel, no problem, you are welcome!

[16:29] <jdv79> codesections: peeked at the MAIN issue a bit more - looks like all the binding machinery in bootstrap might be needed to do it correctly - oof.  hopefully there's an easier and still correct way.

[16:37] *** kleb joined
[16:37] *** MilkmanDan joined
[16:38] <kleb> hi folks! i have a project where i am using raku as a basic, project localized, code snippet transpiler from c++ to rust -- i have a performace problem with my codebase and i am wondering if somebody here might know something which will help me!

[16:38] <kleb> basically, the structure is as follows:

[16:39] <kleb> the main project lives in src/, while the raku stuff lives in u/

[16:39] *** guifa2 joined
[16:39] <kleb> we have u/{grammar,util,x1,x2,x3,x4,x5,x6,x7,...}.rakumod

[16:40] <kleb> where the x1.rakumod, x2.rakumod, etc all hold functions which take the parsed IR and turn it into text (they are essentially output functions)

[16:40] <kleb> grammar holds the full grammar required for all my parsing needs

[16:41] <kleb> util holds all the utility functions, used by the x1,x2,x3, etc so i dont have code duplication

[16:41] <kleb> there is also u/translate, which is my entrypoint, and u/typemap.rakumod, which is the file i am having problems with

[16:42] <kleb> basically, what typemap.rakumod is, is a running hash mapping c++ type names (many local to the project itself) to rust type names

[16:42] <kleb> when i say "running hash" what i really mean is that i continuously update it as i encounter new types (during the porting process)

[16:43] *** sno left
[16:43] <kleb> as far as code correctness goes, i know my algorithms are all working, for the most part.  the grammar is correct enough and fast, the utility functions do what i need them to do

[16:43] <kleb> however

[16:43] <kleb> util.rakumod relies on typemap.rakumod, because at several points in the utility functions, we need to convert from one type system to the other

[16:44] <kleb> each of the x1, x2, x3, etc rely on util.rakumod

[16:44] <kleb> and u/translate relies on each of the x1,x2,x3,etc

[16:44] <kleb> u/translate also relies on the grammar, and util

[16:45] <kleb> so it is basically a diamond (perhaps unfortunately

[16:45] <kleb> )

[16:46] <jdv79> what exactly is the perf issue?  you seem to have just said a bunch about not that.

[16:47] <kleb> the problem is that as it is currently structured, every time i update typemap.rakumod, the whole thing needs to recompile -- for some reason, that is taking sometimes a minute or two

[16:47] <jdv79> you could try the profiler though last i tried once the code involved gets trivially large it craps out

[16:47] <kleb> in my use case, this file typemap.rakumod is basically continually being updated

[16:48] <kleb> it actually seems to start with util.rakumod -- any time util.rakumod changes, i need to do a big recompile

[16:49] <kleb> everytime one of the x_i change, or the grammar change, or the toplevel translate entrypoint change, it actually doesnt cause such a  long compile cycle

[16:49] <kleb> just a few seconds

[16:49] <jdv79> well, precomp is based on the dep chain afaik - maybe try to organize so the changes so less of a chain's length...

[16:50] <jdv79> i think there's an env var that might help illuminate some of that stuff - can't remember...

[16:50] <kleb> thats what it seems like to me, too

[16:50] <kleb> the issue i think is that something which needs to be closest to the surface is the deepest

[16:50] <kleb> namely the typemap

[16:50] <kleb> i tried doing "require" instead of "use" but that hasnt seemed to work

[16:51] <kleb> the positive is that once it compiles once, it goes fast every time (as long as i dont trigger a recompile by editing typemap)

[16:52] <kleb> is there a way for me to instruct util to use the %typemap hash passed in somehow at runtime?

[16:52] <kleb> so that changes to the typemap.rakumod source file dont trigger a recompile?

[16:55] <kleb> or to *pass* typemap into util.rakumod as a whole somehow?

[16:56] <kleb> so that way i dont need to use u::typemap; at the top of util.rakumod

[16:57] <kleb> i considered changing every single function call in util.rakumod to take %typemap as a parameter, then just pass it in from the toplevel

[16:58] <kleb> but that seems somehow like a much inferior solution -- far too much visual noise and added complexity

[16:58] <kleb> i basically need to instruct util.rakumod to "use %typemap, but dont try to compile against it or worry what's in it.  just know about it.  it will be there (somehow) when you need it"

[16:59] <jdv79> require will still factor into precomp, right?  maybe a deferred require could help.

[16:59] <jdv79> i've done stuff like this in Perl but not Raku so i'm not sure...

[17:00] <kleb> ^thats what it seems like is happening

[17:00] <kleb> i just tried it a few seconds ago

[17:00] <kleb> without compiling, the program takes 1-2 seconds

[17:00] <kleb> but then, if i update one line of the typemap hash, it takes roughly 55 seconds

[17:01] <jdv79> yeah, compiling is still very slow cause regexes are still very slow:(

[17:01] <jdv79> maybe some day precomp won't be such a crutch and complication

[17:01] <kleb> exactly -- even though i am just updating a hash, there are regexes all over util.rakumod and grammar.rakumod

[17:02] <kleb> the issue is that these regexes are all recompiling as well when i trigger the update by updating a simple hashmap

[17:02] <kleb> the hash is just strings to strings, nothing complex in it

[17:02] <jdv79> i mean the raku compiler uses grammars to parse the raku code and that's a large part of why rakudo compilation is slow;)

[17:04] <kleb> understood

[17:04] <kleb> it seems tricky to parse without the parsing tools it provides :)

[17:05] <kleb> what is the "deferred require" you mentioned

[17:06] <kleb> it seems like i may as well bite the bullet and pass %typemap into everything

[17:06] <kleb> although, it seems likely that there is a workaround

[17:07] <sena_kun> kleb, if you don't want to pass something as an argument, maybe dynamic variables can be useful?

[17:08] <jdv79> odd that RAKUDO_LOG_PRECOMP seems to not work...  

[17:09] <jdv79> RAKUDO_MODULE_DEBUG may be of use though

[17:10] <kleb> ah, dynamic variables -- i have not tried or needed these before

[17:11] <kleb> i will read to see if i can use

[17:12] <kleb> how do they work with nested scopes?

[17:12] <lizmat> m: sub a() { say $*FOO };  my $*FOO = 42; a

[17:12] <camelia> rakudo-moar 726a75e24: OUTPUT: «42␤»

[17:12] <lizmat> m: sub a() { say $*FOO };  { my $*FOO = 42; a }

[17:12] <camelia> rakudo-moar 726a75e24: OUTPUT: «42␤»

[17:14] *** domidumont left
[17:27] *** neshpion joined
[17:31] *** monkey__ left
[17:32] <jdv79> kleb: i'm not saying this is a good idea but it might help - https://nopaste.linux-dev.org/?1335048

[17:33] *** PimDaniel left
[17:33] <jdv79> if i'm reading the RAKUDO_MODULE_DEBUG output right that maybe be a way to detach a dep like you were looking for

[17:35] *** aborazmeh joined
[17:40] *** MasterDuke left
[17:43] *** sno joined
[17:47] *** wingfold joined
[17:55] *** berber44 left
[17:55] *** wingfold left
[17:55] *** berber44 joined
[17:56] *** simcop2387 left
[17:58] *** moony left
[18:01] *** kleb left
[18:03] *** simcop2387 joined
[18:03] *** simcop2387 left
[18:03] *** simcop2387 joined
[18:03] *** moony joined
[18:09] *** grumble left
[18:09] *** grumble joined
[18:21] *** Doc_Holliwood joined
[18:32] *** wamba left
[18:43] *** aborazmeh left
[18:47] <[Coke]> Are there any installation instructions for the windows zip files on the rakudo.org site? Is it "unzip and add bin/ and whatever the deeper path for installed scripts is" ?

[18:47] *** HarmtH left
[18:48] *** wamba joined
[18:50] *** HarmtH joined
[18:50] <[Coke]> Eh. I have to install msvc anyway, might as well build from scratch

[18:58] *** smolck joined
[18:59] *** smolck left
[19:08] *** smolck joined
[19:10] *** smolck left
[19:10] *** smolck joined
[19:13] *** smolck left
[19:16] *** Black_Ribbon joined
[19:18] *** HarmtH_ joined
[19:18] *** HarmtH left
[19:41] *** mj41 joined
[19:48] *** HarmtH_ left
[19:49] *** natrys joined
[19:50] *** HarmtH joined
[19:53] *** mniip joined
[19:56] <mj41> hi, I need help how to setup t/lib/MyModuleForTestsOnly.rakumod ? Do you know about some example I can look at?

[20:15] <mj41> ouch, my fault. resolved, I hope

[20:18] *** smolck joined
[20:28] <smolck> Hello! So, I'm new to Raku, and quite intrigued by it so far; specifically, I'm interested in the JVM backend of Rakudo. There don't appear to be many examples of its usage as far as I've found (although if there are and I just missed them, I'd be happy to go read them given a link or links), and so I have some questions about it, the main one

[20:28] <smolck> being about interop. I know that it's possible to call Java functions, but I haven't seen anything about subclassing Java classes/interfaces/etc. Is that currently possible (and if not, will it be in the future), and if so, might I ask how it's done?

[20:40] *** berber44 left
[20:45] *** MasterDuke joined
[20:45] *** dogbert11 joined
[20:49] *** dogbert17 left
[20:51] *** wingfold joined
[20:53] <Geth> ¦ doc: tbrowder++ created pull request #3851: Correct the description of the epoch (posix) DateTime new method.

[20:53] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3851

[20:56] *** wingfold left
[21:05] <Geth> ¦ doc: 0b5d37330d | Coke++ | doc/Type/Dateish.pod6

[21:05] <Geth> ¦ doc: whitespace

[21:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0b5d37330d

[21:05] <linkable6> Link: https://docs.raku.org/type/Dateish

[21:07] *** mj41 left
[21:21] *** moony left
[21:22] *** vpcc42 joined
[21:23] *** kleb joined
[21:23] <vpcc42> Hi. Can somebody recommend me a good IDE or editor for raku? I've tried Comma / Intellij plugin, vim plugin and vscode, but none of them seem to offer autocompletion

[21:24] <lizmat> Comma should ?

[21:24] <vpcc42> Not the free edition at least

[21:25] *** moony joined
[21:25] <lizmat> vpcc42: according to the chart on https://commaide.com/features it should ?

[21:26] <codesections> vpcc42: that's the only version of Comma I've ever used, and it definitely had autocompletion 

[21:26] *** |oLa| joined
[21:26] <moritz_> sounds like a configuration/setup problem if it hasn't

[21:33] *** natrys left
[21:33] <vpcc42> oh, I just repeated the setup and chose "rakudo" instead of "raku" as the sdk

[21:33] <vpcc42> now it works

[21:34] <vpcc42> it's a shame that there doesn't seem to be a FLOSS IDE with similar capabilities though

[21:36] <[Coke]> m: dd CachedIterator.new

[21:36] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    CachedIterator used at line 1␤␤»

[21:36] <[Coke]> vpcc42: No doubt that it's a lot of work to implement.

[21:37] <codesections> vpcc42: Yeah, agreed. For whatever it's worth, though, I tend to write Raku without much editor support – I don't really use what's available.  Raku code tends to be concise enough that I haven't really felt the need for many IDE tools.  

[21:37] <[Coke]> If it's any help, I bought a subscription to Comma as soon as I could, even though I don't get to use Raku very often. Hopefully that helps the community version exist.

[21:39] <[Coke]> the docs for Seq have: 'multi method new(Seq: CachedIterator:D $iter)'

[21:40] <[Coke]> I don't see that in the rakudo src, and the bot here doesn't know about it. bug?

[21:41] *** stux|RC left
[21:41] <[Coke]> looks like JJ tried to skip the test, but it's not skipping.

[21:42] <[Coke]> but I have to ask why it's listed as type when that type doesn't seem to be real.

[21:43] *** Woodi left
[21:43] *** wamba left
[21:44] *** stux|RC joined
[21:44] <vpcc42> codesections: I'm totally new to perl and raku in general. Having a good IDE can help speed up the learning process imo.

[21:45] *** Woodi joined
[21:45] <codesections> Fair point

[21:45] <vpcc42> [Coke]: vscode and then coc.nvim support would be a blessing :)

[21:45] *** webstrand joined
[21:46] <vpcc42> but yeah, somebody has to do it

[21:46] <codesections> [Coke]: Looks like it is was a Role (added in 2019.07) https://github.com/rakudo/rakudo/blob/master/docs/announce/2019.07.md

[21:47] <[Coke]> codesections: where is it in the source?

[21:48] <codesections> a few months back, someone was talking about writing an LSP-server for Raku, which would help a lot with all those.  Not sure if there's been any progress, though

[21:48] <[Coke]> it *only* appears in the Changelog.

[21:48] <codesections> Yeah, that's why I said was

[21:49] <codesections> er, I guess I said 'is was', which makes no sense :D

[21:49] <[Coke]> :)

[21:52] <Geth> ¦ doc/master: 4 commits pushed by Coke++

[21:52] <Geth> ¦ doc/master: c6d749a921 | fix typo

[21:52] <Geth> ¦ doc/master: 98391ffaf9 | Remove reference to Perl

[21:52] <Geth> ¦ doc/master: 7e61373234 | fix typo

[21:52] <Geth> ¦ doc/master: 1406616157 | track new words

[21:52] <Geth> ¦ doc/master: review: https://github.com/Raku/doc/compare/0b5d37330dd2...14066161573a

[21:53] <codesections> [Coke]: aha, found it! reverted due to a regression blocking 2021.2: https://github.com/rakudo/rakudo/commit/971726075f5e9f2b476e5905066aeb976a2d5e86#diff-92ad20ef82ba3fe9481c04256049a99b01b70897bf6c552197164b3036348f20

[21:54] <codesections> so it previously existed, and will exist in the future (presumably) but doesn't right now

[22:02] <lizmat> yup

[22:02] *** Doc_Holliwood left
[22:02] *** Doc_Holliwould joined
[22:12] *** aluaces left
[22:12] *** wingfold joined
[22:12] *** wingfold left
[22:12] *** wingfold joined
[22:54] *** smolck left
[23:08] *** kleb left
[23:29] *** judd7 left
[23:34] *** aindilis left
[23:34] *** aindilis joined
[23:34] *** oneeggeach joined
[23:34] <moon-child> bit late, but: a while ago I started building a repl with context-sensitive autocomplete (among other things).  If I ever get around to finishing that properly, it'll be oss

[23:38] *** vpcc42 left
[23:41] <m6locks_> great

[23:47] *** judd7 joined
