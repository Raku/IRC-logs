[00:00] *** Doc_Holliwood joined
[00:31] *** pecastro left
[00:40] *** Doc_Holliwood left
[00:58] *** monkey__ joined
[01:03] *** Kaiepi joined
[01:04] *** modula joined
[01:05] *** bingos_ joined
[01:05] *** samcv_ joined
[01:05] *** webstran- joined
[01:06] *** bonz060_ joined
[01:06] *** [Coke]_ joined
[01:07] *** timlegge_ joined
[01:07] *** probablymoony joined
[01:07] *** pel_ joined
[01:07] *** ambs_ joined
[01:07] *** bdju_ joined
[01:07] *** Ulti joined
[01:08] *** [ptc]_ joined
[01:08] *** paraboli1e joined
[01:08] *** ensamvarg_ joined
[01:08] *** mst_ joined
[01:08] *** polettix_ joined
[01:08] *** cxreg2 joined
[01:09] *** Maylay_ joined
[01:11] *** sftp_ joined
[01:12] *** Kaiepi left
[01:12] *** ambs left
[01:12] *** gordonfish left
[01:12] *** parabolize left
[01:12] *** defaultxr left
[01:12] *** sftp left
[01:12] *** mst left
[01:12] *** webstrand left
[01:12] *** Maylay left
[01:12] *** timlegge left
[01:12] *** [Coke] left
[01:12] *** bdju left
[01:12] *** ensamvarg left
[01:12] *** BinGOs left
[01:12] *** [ptc] left
[01:12] *** polettix left
[01:12] *** cxreg left
[01:12] *** moony left
[01:12] *** samcv left
[01:12] *** bonz060 left
[01:12] *** Ulti_ left
[01:12] *** pel left
[01:12] *** modula is now known as defaultxr

[01:12] *** webstran- is now known as webstrand

[01:13] *** sftp_ is now known as sftp

[01:18] *** monkey__ left
[01:23] *** monkey__ joined
[01:37] *** bdju_ left
[01:37] *** bdju joined
[01:37] *** [Coke]_ is now known as [Coke]

[01:39] *** Kaiepi joined
[01:44] *** neshpion left
[01:48] *** xinming left
[01:48] *** xinming joined
[01:50] *** neshpion joined
[02:16] *** xinming left
[02:17] *** xinming joined
[02:18] *** kvw_5_ joined
[02:21] *** kvw_5 left
[02:22] *** neshpion left
[02:23] *** aindilis joined
[02:46] *** vrurg left
[03:09] *** kaiwulf left
[03:12] *** muffindrake left
[03:13] *** muffindrake joined
[03:17] *** paraboli1e is now known as parabolize

[03:23] *** vrurg joined
[03:23] *** rindolf joined
[03:36] *** monkey__ left
[03:37] *** dogbert11 left
[03:37] *** dogbert11 joined
[03:45] *** xinming left
[03:46] *** xinming joined
[03:50] *** synthmeat left
[03:53] *** gordonfish joined
[03:53] *** synthmeat joined
[03:55] *** bdju left
[03:55] *** bdju joined
[04:20] *** ensamvarg_ is now known as ensamvarg

[04:24] *** wamba joined
[04:25] *** wamba left
[04:27] *** xinming left
[04:28] *** xinming joined
[04:32] *** wamba joined
[04:43] *** dogbert17 joined
[04:45] *** xinming left
[04:46] *** xinming joined
[04:47] *** dogbert11 left
[04:57] *** parabolize left
[05:29] *** Doc_Holliwood joined
[05:31] *** a3r0 left
[05:32] *** a3r0 joined
[05:39] *** xinming left
[05:39] *** xinming joined
[06:01] *** benkolera left
[06:07] *** mowcat left
[06:53] *** brtastic joined
[06:59] *** ufobat joined
[07:01] *** jmerelo joined
[07:02] <jmerelo> m: my $a = True; say «a b \qq[$a]»

[07:02] <camelia> rakudo-moar 726a75e24: OUTPUT: «(a b True)␤»

[07:02] <jmerelo> m: my $a = True; say «a b \qq[$a]».raku

[07:02] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "True")␤»

[07:03] <jmerelo> m: my $a = True; say «a b \q[$a]».raku

[07:03] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "\$a")␤»

[07:03] <jmerelo> m: my $a = True; say «a b \Q[$a]».raku

[07:03] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\Q'␤at <tmp>:1␤------> 3my $a = True; say «a b \7⏏5Q[$a]».raku␤    expecting any of:␤        argument list␤        shell-quote words␤        term␤»

[07:09] <jmerelo> m: class A { has Bool $.foo; method Str { $.foo }; my $a = A.new( :foo(True) ); print ~$a

[07:09] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3; my $a = A.new( :foo(True) ); print ~$a7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[07:10] <jmerelo> m: class A { has Bool $.foo; method Str { $.foo }}; my $a = A.new( :foo(True) ); print ~$a

[07:10] <camelia> rakudo-moar 726a75e24: OUTPUT: «True»

[07:10] <jmerelo> m: class A { has Bool $.foo; method Str { $.foo }}; my $a = A.new( :foo(True) ); print «a b $a».raku

[07:10] <camelia> rakudo-moar 726a75e24: OUTPUT: «No such method 'WORDS_AUTODEREF' for invocant of type 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[07:10] <jmerelo> Hum

[07:11] <jmerelo> m: class A { has Bool $.foo; method Str { $.foo }}; my $a = A.new( :foo(True) ); say «a b $a».raku

[07:11] <camelia> rakudo-moar 726a75e24: OUTPUT: «No such method 'WORDS_AUTODEREF' for invocant of type 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[07:13] <jmerelo> m: class A { has $.foo; method Str { $.foo }}; my $a = A.new( :foo(True) ); say «a b $a».raku

[07:13] <camelia> rakudo-moar 726a75e24: OUTPUT: «No such method 'WORDS_AUTODEREF' for invocant of type 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[07:21] <jmerelo> m: say $*RAKU

[07:21] <camelia> rakudo-moar 726a75e24: OUTPUT: «Raku (6.d)␤»

[07:21] <jmerelo> m: say $*RAKU.raku

[07:21] <camelia> rakudo-moar 726a75e24: OUTPUT: «Raku.new(compiler => Compiler.new(id => "25D5FC253B23D0A685CA76DAC284BB450F18FA89", release => "", codename => "", name => "rakudo", auth => "The Perl Foundation", version => v2021.02.25.g.726.a.75.e.24, signature => Blob, desc => Str), name => "Raku"…»

[07:25] *** Sgeo_ left
[07:26] *** benkolera joined
[07:27] *** Doc_Holliwood left
[07:32] <jmerelo> m: class B { has $.bar; method WORDS_AUTODEREF { $.bar } }; class A { has $.foo; method Str { B.new( :bar($.foo)) }}; my $a = A.new( :foo(True) ); say «a b $a».raku

[07:32] <camelia> rakudo-moar 726a75e24: OUTPUT: «Value of type Bool uselessly passed to val()␤("a", "b", Bool::True)␤  in block <unit> at <tmp> line 1␤»

[07:32] *** domidumont joined
[07:34] <jmerelo> m: class B { has $.bar; method WORDS_AUTODEREF { $.bar } }; class A { has $.foo; method Str { B.new( :bar($.foo)) }}; my $a = A.new( :foo(True) ); say <a b $a>.raku

[07:34] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "\$a")␤»

[07:38] <jmerelo> m: class B { has $.bar; method WORDS_AUTODEREF { $.bar } }; class A { has $.foo; method Str { B.new( :bar($.foo)) }}; my $a = A.new( :foo(True) ); say qqw:!val «a b $a».raku

[07:38] <camelia> rakudo-moar 726a75e24: OUTPUT: «This type cannot unbox to a native string: P6opaque, B␤  in block <unit> at <tmp> line 1␤␤»

[07:39] <jmerelo> m: my $a = True; say qqw:!val «a b $a».raku

[07:39] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "True")␤»

[07:40] <jmerelo> m: my $a = True; say qqw:!val:!quotewords «a b $a».raku

[07:40] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "True")␤»

[07:40] *** brtastic left
[07:41] <jmerelo> m: class A { has $.foo; method Str { $.foo }}; my $a = A.new( :foo(True) ); say qqw:!val:!quotewords «a b $a»

[07:41] <camelia> rakudo-moar 726a75e24: OUTPUT: «This type cannot unbox to a native string: P6opaque, Bool␤  in block <unit> at <tmp> line 1␤␤»

[07:41] *** Kaiepi left
[07:41] <jmerelo> m: my $a = <3 4>; say qqw:!val:!quotewords «a b $a».raku

[07:41] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "3", "4")␤»

[07:41] <jmerelo> m: my $a = <3 4>; say qqw:!val «a b $a».raku

[07:41] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "3", "4")␤»

[07:42] <jmerelo> m: my $a = <3 4>; say «a b $a».raku

[07:42] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", IntStr.new(3, "3"), IntStr.new(4, "4"))␤»

[07:42] <jmerelo> m: my $a = <3 4>; say qqw:!val «a b $a».raku

[07:42] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "3", "4")␤»

[07:45] <jmerelo> m: my @a = 3, True; say qqw:!val «a b @a».raku

[07:45] <camelia> rakudo-moar 726a75e24: OUTPUT: «("a", "b", "\@a")␤»

[07:45] <jmerelo> m: my $a = 3, True; say qqw:!val «a b $a».raku

[07:45] <camelia> rakudo-moar 726a75e24: OUTPUT: «WARNINGS for <tmp>:␤("a", "b", "3")␤Useless use of constant integer True in sink context (line 1)␤»

[07:45] <japhb> jmerelo: Would you mind /msg'ing camelia instead?

[07:46] <jmerelo> japhb: the whole point of doing it here is (possibly) gathering insights from the rest of the people around. I could, for that matter, do it in my home computer

[07:47] <japhb> jmerelo: Erm, maybe do the exploration off-channel, and then come here for the questions/insight requests?  Better yet, post the weirdness you find as issues or gists for discussion?

[07:49] <japhb> I mean, clearly you're finding some odd stuff, but to make sure it all gets addressed it needs to be in a less transient form than in-channel.

[07:49] <jmerelo> japhb: I've already posted a couple of issues, in Rakudo and raku/docs. The questions/insight requests are all above. Can you help?

[07:52] <japhb> There aren't actually any questions there, just a mix of errors and non-errors.  It's not clear to me which things you're expecting, and which not.  I mean, my first reaction is that the errors you've found are LTA in most cases, but is there a deeper question there?

[07:54] *** aborazmeh left
[07:56] <jmerelo> japhb: well, just wondering about the serial coercions performed by quoting and how to turn them off, and if it's possible at all. The main context is this question https://stackoverflow.com/questions/66642634/interpolate-without-creating-a-string-context-in-raku in SO

[07:57] <jmerelo> Apparently what qqw is doing is, first, String context (which is the first thing I turned off), then "quotewords" context (which can also be turned off), and eventually, "val" (which can also be turned off). However, trying to skip some of these steps leaves the original thing in context that's not valid.

[07:58] <japhb> Ah, yeah, I read that question earlier today before you'd posted your answer.  I see what you're thinking about now.

[07:58] <jmerelo> Last one is "sink" context. Other path leave the variable in a state that should be converted to P6Opaque, but it's not.

[08:00] <jmerelo> Also, on the way I think that "unquoting" does not do exactly what it says it does. So maybe I should raise another issue there...

[08:01] <jmerelo> Also, today there are more [raku] questions in Stackoverflow than [perl] questions.

[08:01] <japhb> :-)

[08:03] <japhb> I've now seen the second person from EMEA timezones pop up in one of the Raku-related channels, so seems like as good a time as any:

[08:03] <japhb> 🎉‭🎉‭🎉‭ Earlier today I released MUGS 0.0.5 at https://github.com/Raku-MUGS (and uploaded into the fez/zef ecosystem).

[08:03] <japhb> You can see more discussion at https://colabti.org/irclogger/irclogger_log/raku?date=2021-03-15#l374

[08:03] <jmerelo> japhb: cool! Congrats!

[08:04] <japhb> The short of it is: I built a thing.  It is a platform for building gaming services, built in Raku, using Cro, Red, RPG::Base, and a cast of many individual modules.

[08:05] <japhb> I have a roadmap in progress at https://github.com/Raku-MUGS/MUGS/blob/main/docs/todo/release-roadmap.md

[08:06] <japhb> I'd love to talk with anyone interested in doing game dev on Raku (even if they're not planning to use MUGS!)

[08:07] <jmerelo> japhb++

[08:07] <japhb> I already have a Freenode channel over at #mugs dedicated to it, and the Raku-MUGS GitHub org hosting all the stuff I've made public so far (there's more to come, such as full-screen TUI and GTK+ interfaces, arcade and card games, etc. but those are all more primitive and will be worked on in the 0.2 release cycle)

[08:07] <japhb> Thanks jmerelo.  :-)

[08:08] <japhb> FWIW, this is the thing I want to build Docker images on a new Rakudo-Star for.  :-D

[08:08] <jmerelo> japhb: I could maybe help with that.

[08:08] <japhb> Also, contributors (MORE THAN!) WELCOME.

[08:09] <japhb> (y)

[08:09] *** bingos_ is now known as BinGOs

[08:09] *** BinGOs left
[08:09] *** BinGOs joined
[08:09] <japhb> Or rather 🖒‭

[08:11] <jmerelo> japhb: this looks neat https://github.com/Raku-MUGS/MUGS-Core/blob/main/Dockerfile Problem is the base image? Do you *really* need Rakudo Star?

[08:14] <japhb> I mean, I could manually build from raw ubuntu I suppose.  (I've already discovered it's non-trivial to build from alpine, they don't have some of the native prereqs packaged.  I hate the ubuntu bloat for docker images, but for now it's way easier.)

[08:15] <jmerelo> japhb: there's Debian slim too

[08:15] <japhb> I just want to get a newer Rakudo base image, because the R* image is missing some updates that make a difference.

[08:16] <japhb> jmerelo: What's the name of that one?

[08:16] <jmerelo> japhb: let me check

[08:16] <jmerelo> japhb: meanwhile, this is something I'm experimenting with https://github.com/JJ/docker-raku-test

[08:16] <jmerelo> It's pretty slim. But based on Alpine, so that might be a problem.

[08:17] <japhb> I actually looked at that! ... and yeah, that was why I couldn't just use that.  :-(

[08:17] <jmerelo> japhb: it's debian:(whatever version)-slim

[08:18] * japhb has been trying to avoid shaving the "learn how to create new alpine native packages" yak, but ...

[08:18] <jmerelo> japhb: well, it could theoretically be done with Debian slim. I could give it a try.

[08:19] <japhb> OK, worth a try.  I mean, I'm basically just using Ubuntu as a Debian anyway, so it's not that big a difference in effect, but if the base image is a lot smaller and it cleans out better on purge, I'm all for it.

[08:19] <jmerelo> No, wait, it's not that one...

[08:20] *** pecastro joined
[08:20] <jmerelo> This one https://github.com/JJ/docker-raku

[08:28] *** notagoodidea joined
[08:36] <japhb> japhb.sleep(*)  # Good night y'all, I'll backlog any MUGS comments tomorrow.  :-)

[08:44] <jmerelo> Good night!

[08:44] *** Kaiepi joined
[08:45] *** db48x left
[08:48] *** dakkar joined
[08:53] <tyil> huh, I can donate to the Python Software Foundation on humblebundle.com, wonder how much effort it would be to add a potential Raku (or Perl) foundation there

[08:56] *** sena_kun joined
[08:56] <MasterDuke> that would be nice. i haven't bought a bundle in a little while now, but i have spent a bunch over the years

[08:56] <tyil> it would be an incentive for me to check the site more regularly :>

[09:02] <notagoodidea> m: say "foo bar".words.lc;

[09:02] <camelia> rakudo-moar 726a75e24: OUTPUT: «foo bar␤»

[09:02] <notagoodidea> say "Foo Bar".words.lc.WHAT

[09:02] <evalable6> notagoodidea, rakudo-moar d525dbe33: OUTPUT: «(Str)␤»

[09:02] <notagoodidea> m: say "Foo Bar".words.map(*.lc).WHAT

[09:02] <camelia> rakudo-moar 726a75e24: OUTPUT: «(Seq)␤»

[09:12] *** frost-lab joined
[09:31] *** wamba left
[10:00] *** plvicente joined
[10:13] *** Doc_Holliwood joined
[10:24] *** xinming left
[10:24] *** xinming joined
[10:27] *** Kaiepi left
[10:46] *** xinming left
[10:46] *** wamba joined
[10:46] *** xinming joined
[10:48] *** plvicente left
[10:57] *** Doc_Holliwood left
[11:09] *** plvicente joined
[11:36] <CIAvash> weekly: https://blog.ciavash.name/2021/03/16/improved-raku-flycheck-melpa-emacs.html

[11:36] <notable6> CIAvash, Noted! (weekly)

[11:49] *** k-man left
[11:50] *** timlegge_ is now known as timlegge

[11:51] *** Kaiepi joined
[11:52] *** k-man joined
[11:58] *** Doc_Holliwood joined
[12:00] *** xinming left
[12:00] <codesections> CIAvash++ very cool.  That might be enough to get me to switch back to flycheck (from flymake)

[12:02] *** xinming joined
[12:02] <CIAvash> 🙂

[12:08] *** wamba left
[12:18] *** xinming left
[12:19] *** xinming joined
[12:19] *** Geth joined
[12:23] *** Black_Ribbon left
[12:24] *** xinming left
[12:24] *** xinming joined
[12:38] *** plvicente left
[12:40] *** wamba joined
[12:47] *** DiffieHellman_ joined
[12:48] *** DiffieHellman left
[12:48] *** sena_kun left
[12:50] *** DiffieHellman_ is now known as DiffieHellman

[12:52] *** sena_kun joined
[12:57] *** MasterDuke left
[12:57] *** MasterDuke joined
[12:59] *** guifa2 joined
[13:01] *** tejr left
[13:01] *** tejr joined
[13:05] *** jmerelo left
[13:07] *** mowcat joined
[13:14] *** wamba left
[13:23] * lizmat clickbaits https://rakudoweekly.blog/2021/03/15/2021-11-two-year-itch/

[13:25] <notagoodidea> \o/

[13:25] <guifa2> lizmat++ 

[13:25] <tellable6> 2021-03-12T14:55:58Z #raku <vrurg> guifa2 So far, I don't see any wrongdoing in Role() behavior. But can't be sure without more details.

[13:27] <guifa2> lizmat: I actually hadn't used App::Mi6 before, didn't realize that's how you were generating it, I'm gonna take a look at it to see how I might generate some of my documentation multilingually

[13:28] *** plvicente joined
[13:28] <guifa2> https://github.com/alabamenhu/IntlLanguageTagSimple <-- example of a localization per my mailing list message

[13:31] *** xinming left
[13:33] *** xinming joined
[13:41] *** plvicente left
[13:56] *** plvicente joined
[13:57] *** Sgeo joined
[14:00] *** parabolize joined
[14:10] *** plvicente left
[14:11] *** plvicente joined
[14:23] *** plvicente left
[14:25] *** plvicente joined
[14:41] *** plvicente left
[14:45] *** __jrjsmrtn__ left
[14:46] *** __jrjsmrtn__ joined
[14:47] *** frost-lab left
[15:17] *** pel_ is now known as pel

[15:24] *** plvicente joined
[15:26] *** wamba joined
[15:35] *** plvicente left
[15:48] <xinming> What is the right way to check process is running for Proc::Async instance?

[15:49] <xinming> https://docs.raku.org/type/Proc::Async  in this page, We have started and ready method, But doesn't seem to mean what I need.

[15:52] <lizmat> what do you need ?

[15:52] <xinming> I just thought we can use  "/proc/{$p.pid}".IO ~~ :d  to do what we want. Is there a standard way?

[15:52] <lizmat> that would maybe work on Linux, but not on MacOS or Windows, afaik

[15:56] <gfldex> xinming: you have to check if the symling /proc/$pid/exe points to the right thing. And even then there migth be cases where this can fail.

[15:57] <gfldex> xinming: the right way would be to hold and check a file descriptor to the child. But since that is hidden from Raku code, there is no reliable way to check if a "child" is still alive.

[15:58] <xinming> got it, thanks.

[15:59] <xinming> So, I think, this should be a reasonable feature request.

[15:59] <ugexe> not sure its possible

[15:59] <ugexe> not without race conditions that make its unsuitable for core feature

[16:00] <gfldex> xinming: if you control the child, you might be able to do something with a fifo.

[16:02] <ugexe> if you're using proc::async why cant you just set some flag like $no-longer-running = 1 whenever the proc finishes or errors (since the parent process can watch these inside an e.g. react block)?

[16:06] *** Doc_Holliwood left
[16:07] <ugexe> my $is-running = 0; my $promise = start react { my $proc = Proc::Async.new("raku","-e", "sleep(5)"); whenever $proc.start { $is-running = 1; so $_; $is-running = 0; } }; while $is-running != 1 { say "not finished" }

[16:08] <ugexe> of course $is-running should be protected but this is just a demonstration

[16:10] *** evalable6 left
[16:12] *** evalable6 joined
[16:13] *** b2gills left
[16:13] *** b2gills joined
[16:15] <[Coke]> raku

[16:16] <MasterDuke> gesundheit

[16:18] *** plvicente joined
[16:21] <xinming> ugexe: Thanks, I just now forgot that we can catch the exception to handle error

[16:24] *** muffindrake left
[16:28] *** plvicente left
[16:36] *** aborazmeh joined
[16:36] *** jmerelo joined
[16:42] *** bonz060_ left
[16:43] *** bonz060 joined
[16:43] *** wingfold joined
[16:50] *** mowcat left
[16:50] *** aborazmeh left
[16:56] *** aborazmeh joined
[17:10] *** brtastic joined
[17:16] <guifa2> is there a way to subclass List?  "is List" works but I can't figure out how to handle the self.bless

[17:18] <Geth> ¦ Raku-Steering-Council/main: 47b476f155 | (JJ Merelo)++ | papers/CoC.md

[17:18] <Geth> ¦ Raku-Steering-Council/main: Trying to see if it's a name problem

[17:18] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/47b476f155

[17:20] <Geth> ¦ Raku-Steering-Council/main: d77ad515f1 | (JJ Merelo)++ | README.md

[17:20] <Geth> ¦ Raku-Steering-Council/main: Linking the new web-only page

[17:20] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/d77ad515f1

[17:20] <Geth> ¦ Raku-Steering-Council/main: e42089092a | (JJ Merelo)++ | papers/CoC.md

[17:20] <Geth> ¦ Raku-Steering-Council/main: Adding note to the copy

[17:20] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/e42089092a

[17:35] *** plvicente joined
[17:39] *** dakkar left
[17:46] *** plvicente left
[18:19] *** notagoodidea left
[18:23] *** brtastic left
[18:29] *** domidumont left
[18:33] *** sno joined
[18:36] *** xinming left
[18:38] <leont> Why can I say %!monitors<>:v but not %!monitors:v

[18:39] *** xinming joined
[18:39] <leont> That zen slice there feels rather unfortunate

[18:43] *** wingfold left
[18:43] *** wingfold joined
[18:44] <codesections> leont: I don't know why it's needed, but isn't that a decont operator, not a zen slice?  (Not sure if that matters)

[18:46] <leont> Is there a difference?

[18:48] *** wingfold left
[18:49] *** wingfold joined
[18:50] *** jmerelo left
[18:51] <codesections> maybe not?  I always thought there was, but I can't think of what it'd be atm

[18:53] *** wingfold left
[18:56] *** lizmat_ joined
[19:00] *** lizmat left
[19:01] *** ufobat left
[19:06] *** wingfold joined
[19:11] *** monkey__ joined
[19:13] *** monkey__ left
[19:19] *** monkey__ joined
[19:21] *** mowcat joined
[19:26] *** abraxxa left
[19:27] *** Doc_Holliwood joined
[19:28] * [Coke] tries to make any of his windows shells happy to display UTF8 output from a raku app and fails

[19:28] <[Coke]> powershell, cmd, git bash - first two using chcp 65001 - everything garbled, not always the same way

[19:29] * [Coke] guesses the last issue is not having decent fallback fonts for emojis.

[19:29] <[Coke]> a tutorial on how to set this up would probably be very helpful for casual windows users.

[19:30] *** monkey__ left
[19:35] <Geth> ¦ ecosystem: 2ed06f1a3f | (David Warring)++ | META.list

[19:35] <Geth> ¦ ecosystem: css-raku org has movedf to CPAN

[19:35] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/2ed06f1a3f

[19:37] *** tejr left
[19:38] *** tejr joined
[19:53] *** wingfold left
[19:53] *** wingfold joined
[19:56] *** dreamdream joined
[19:57] *** dreamdream left
[19:58] *** wingfold left
[20:01] *** kaiwulf joined
[20:11] *** wingfold joined
[20:16] *** wingfold left
[20:16] *** plvicente joined
[20:25] <evalable6> ugexe, Full output: https://gist.github.com/2e7474650db53d2bef3fa9bef6f3feb7

[20:28] *** plvicente left
[20:30] *** wingfold joined
[20:37] *** brtastic joined
[20:38] <guifa2> leont / codesections: %!monitors:v is trying to adverb an object.  There's no operator to handle the :v adverb.  Zen slicing gives you an operator (even if it's often a noop) that can be adverbed

[20:58] *** plvicente joined
[21:03] *** londoed joined
[21:11] *** astik__ joined
[21:15] *** wingfold_ joined
[21:15] *** wingfold left
[21:20] *** wingfold_ left
[21:20] *** Black_Ribbon joined
[21:24] *** xinming left
[21:26] *** xinming joined
[21:28] *** lizmat_ is now known as lizmat

[21:29] *** wingfold joined
[21:31] *** plvicente left
[21:33] *** wingfold left
[21:41] *** Sgeo_ joined
[21:44] *** brtastic left
[21:44] *** Sgeo left
[21:47] *** wingfold joined
[21:50] *** wingfold left
[21:50] *** wingfold joined
[21:52] *** wingfold_ joined
[21:52] *** wingfold left
[21:53] *** wingfold joined
[21:53] *** wingfold_ left
[21:54] *** mst_ is now known as mst

[21:55] *** wingfold left
[21:55] *** wingfold joined
[21:55] *** wamba left
[21:55] *** rindolf left
[21:55] *** wingfold left
[21:56] *** wingfold joined
[21:57] *** wingfold_ joined
[21:57] *** wingfold left
[22:01] *** wingfold_ left
[22:03] *** wingfold joined
[22:04] *** wingfold_ joined
[22:04] *** wingfold left
[22:08] *** wingfold_ left
[22:24] *** vike left
[22:25] *** wingfold joined
[22:27] *** aindilis` joined
[22:30] *** wingfold left
[22:32] *** vike joined
[22:35] *** k-man left
[22:35] *** a3r0 left
[22:35] *** synthmeat left
[22:35] *** aindilis left
[22:37] *** wingfold joined
[22:38] *** wingfold left
[22:38] *** wingfold joined
[22:40] *** a3r0 joined
[22:42] *** k-man joined
[22:42] *** wingfold left
[22:42] *** wingfold joined
[22:42] *** synthmeat joined
[22:58] *** wingfold left
[22:59] *** wingfold joined
[23:00] *** monkey__ joined
[23:00] *** wingfold left
[23:00] *** wingfold joined
[23:01] *** wingfold left
[23:01] *** wingfold joined
[23:05] *** wingfold left
[23:13] <[Coke]> .seen jonathanstowe

[23:13] <tellable6> [Coke], I haven't seen jonathanstowe around

[23:13] <[Coke]> .seen stowe

[23:13] <tellable6> [Coke], I haven't seen stowe around, did you mean thowe?

[23:15] *** wingfold joined
[23:16] *** wingfold_ joined
[23:16] *** wingfold left
[23:19] *** xinming left
[23:21] *** xinming joined
[23:24] *** wingfold_ left
[23:24] *** Doc_Holliwood left
[23:27] *** wingfold joined
[23:31] *** wingfold left
[23:32] *** dogbert17 left
[23:33] *** dogbert17 joined
[23:41] *** eax joined
[23:47] *** wingfold joined
[23:48] *** dogbert17 left
[23:49] *** dogbert17 joined
[23:51] *** dogbert11 joined
[23:54] *** dogbert17 left
