[00:07] *** reportable6 left
[00:16] *** evalable6 joined
[00:20] *** morte_ left
[00:21] *** morte_ joined
[00:32] *** morte_ left
[00:33] *** morte_ joined
[00:56] *** morte_ left
[00:56] *** morte_ joined
[01:00] *** bd3i left
[01:01] *** linkable6 left
[01:01] *** linkable6 joined
[01:08] *** reportable6 joined
[01:22] *** frost joined
[01:32] *** frost left
[01:43] *** morte_ left
[01:43] *** morte_ joined
[01:46] *** frost joined
[02:46] *** benchable6 left
[02:46] *** releasable6 left
[02:46] *** nativecallable6 left
[02:46] *** greppable6 left
[02:46] *** evalable6 left
[02:46] *** committable6 left
[02:46] *** notable6 left
[02:46] *** bloatable6 left
[02:46] *** coverable6 left
[02:46] *** tellable6 left
[02:46] *** reportable6 left
[02:46] *** shareable6 left
[02:46] *** bisectable6 left
[02:46] *** unicodable6 left
[02:46] *** statisfiable6 left
[02:46] *** sourceable6 left
[02:46] *** squashable6 left
[02:46] *** quotable6 left
[02:46] *** linkable6 left
[02:47] *** linkable6 joined
[02:47] *** sourceable6 joined
[02:47] *** bisectable6 joined
[02:47] *** shareable6 joined
[02:49] *** squashable6 joined
[02:49] *** bloatable6 joined
[02:49] *** evalable6 joined
[02:49] *** tellable6 joined
[02:49] *** releasable6 joined
[02:51] *** morte_ left
[02:52] *** morte_ joined
[02:59] *** morte_ left
[03:00] <[Coke]> There isn't a named class for \v (see the table on the same page that has, e.g. <alnum>)

[03:00] *** morte_ joined
[03:30] *** morte_ left
[03:32] *** morte_ joined
[03:42] *** morte_ left
[03:43] *** morte_ joined
[03:47] *** greppable6 joined
[03:47] *** benchable6 joined
[03:48] *** notable6 joined
[03:48] *** statisfiable6 joined
[03:49] *** quotable6 joined
[03:49] *** reportable6 joined
[04:01] *** morte_ left
[04:01] *** morte_ joined
[04:03] <[Coke]> any prior art for a module that has a proto MAIN and sets up some data to be available (somehow, don't care how) in script's MAIN?

[04:12] <Voldenet> spacekookie: you're not far from the solution, you're only lacking `method keyword($/) { make ~$/ };` and `method payload($/) { make ~$/ }` in Actions

[04:13] <Voldenet> and $line<statement> is an array

[04:13] <Voldenet> this would work http://ix.io/3JIO

[04:15] <Voldenet> (see that kvp example has `method identifier($/) { make ~$/ }`)

[04:39] *** morte_ left
[04:41] *** morte_ joined
[04:47] *** committable6 joined
[04:47] *** morte_ left
[04:48] *** morte_ joined
[04:52] *** morte_ left
[04:53] *** morte_ joined
[05:09] *** morte_ left
[05:09] *** morte_ joined
[05:20] *** morte_ left
[05:21] *** morte_ joined
[05:30] *** [Coke] left
[05:33] *** [Coke] joined
[05:38] *** morte_ left
[05:39] *** morte_ joined
[05:42] *** morte_ left
[05:43] *** morte_ joined
[05:47] *** unicodable6 joined
[05:56] *** morte_ left
[05:57] *** morte_ joined
[05:59] *** morte_ left
[06:00] *** morte_ joined
[06:07] *** reportable6 left
[06:08] *** reportable6 joined
[06:36] *** guifa joined
[06:39] <guifa> hmmm

[06:42] <guifa> finishing up Timezones::ZoneInfo, and debating method names

[06:44] <guifa> I've got posix-from-calendar and calendar-from-posix; but thinking about having aliases of `calendar-to-posix` and `posix-to-calendar` 

[06:44] <guifa> I had `get-timezone-data($timezone-id)`, but now I'm thinking I should eschew the `get-` prefix there.

[06:47] *** nativecallable6 joined
[06:59] *** morte_ left
[07:00] *** morte_ joined
[07:03] *** morte_ left
[07:04] *** morte_ joined
[07:09] *** morte_ left
[07:09] *** morte_ joined
[07:17] *** morte_ left
[07:18] *** morte_ joined
[07:23] *** seednode left
[07:24] *** seednode joined
[07:40] *** morte_ left
[07:41] *** morte_ joined
[07:54] *** morte_ left
[07:54] *** morte_ joined
[08:00] *** morte_ left
[08:07] *** Sgeo_ left
[09:07] *** committable6 left
[09:07] *** reportable6 left
[09:07] *** unicodable6 left
[09:07] *** notable6 left
[09:07] *** sourceable6 left
[09:07] *** bisectable6 left
[09:07] *** statisfiable6 left
[09:07] *** greppable6 left
[09:07] *** squashable6 left
[09:07] *** linkable6 left
[09:07] *** nativecallable6 left
[09:07] *** quotable6 left
[09:07] *** bloatable6 left
[09:07] *** evalable6 left
[09:07] *** tellable6 left
[09:07] *** releasable6 left
[09:07] *** benchable6 left
[09:07] *** shareable6 left
[09:09] *** linkable6 joined
[09:09] *** quotable6 joined
[09:09] *** reportable6 joined
[09:09] *** sourceable6 joined
[09:09] *** statisfiable6 joined
[09:09] *** bloatable6 joined
[09:09] *** nativecallable6 joined
[09:10] *** bisectable6 joined
[09:10] *** notable6 joined
[09:10] *** committable6 joined
[09:11] *** releasable6 joined
[10:07] *** Skarsnik joined
[10:09] *** unicodable6 joined
[10:09] *** evalable6 joined
[11:02] *** finanalyst joined
[11:04] * lizmat clickbaits https://rakudoweekly.blog/2021/12/27/2021-52-jdv-released/

[11:09] *** shareable6 joined
[11:09] *** squashable6 joined
[11:11] *** sena_kun joined
[11:17] <spacekookie> Voldenet: Oh interesting! What do the >> do? I saw that in the documentation but wasn't really sure what it meant (especially because it was turned into a ligature by firefox or something)

[11:18] <moon-child> fwiw ligature version (Â», not really a ligature but) works just the same way

[11:18] <moon-child> but anyway see https://docs.raku.org/language/operators#index-entry-hyper_%3C%3C-hyper_%3E%3E-hyper_%C2%AB-hyper_%C2%BB-Hyper_operators

[11:19] *** Skarsnik left
[11:33] <spacekookie> Ah thank you!

[11:38] <spacekookie> Well this is exciting. I _think_ I understand this now but we'll see how things go once I add more complexity to the grammar

[11:38] <spacekookie> thanks to everyone who's been helping me <3

[11:54] *** finanalyst left
[12:08] *** reportable6 left
[12:09] *** benchable6 joined
[12:10] *** tellable6 joined
[12:11] *** reportable6 joined
[12:13] <discord-raku-bot> <Nemokosch#9980> this community is really awesome

[12:16] <El_Che> yes, I am... I mean, yes we are :)

[12:17] <moon-child> speak for yourself!

[12:19] *** MoC joined
[12:35] *** frost left
[12:45] *** finanalyst joined
[12:45] *** finanalyst left
[13:04] *** slowtyper joined
[13:21] <discord-raku-bot> <Anton Antonov#7232> ðŸ™‚ ðŸ™‚

[14:04] *** linkable6 left
[14:04] *** evalable6 left
[14:36] <guifa> what's the license name to use if we're releasing code into the public domain?

[14:38] <moon-child> cc0, maybe

[14:43] <guifa> I can only find CC-PDDC in the spdx database which I guess works.  It just feels weird eneeding to say anything beyond "it's public domain"

[14:44] * guifa is releasing this module in public domain because the code it was based on was also in the public domain and it feels right to pass it along

[14:44] <moon-child> some jurisdictions don't recognise public domain; cc0 tries to make allowance for that

[14:45] <moon-child> in principle, if you say 'this is in the public domain', that should indicate to people that they can use your code for w/e they want and you won't sue them

[14:45] <moon-child> but some companies refuse to use such code because ... lawyers

[15:05] *** linkable6 joined
[15:08] *** Sgeo joined
[15:10] <guifa> https://github.com/alabamenhu/TimezonesZoneInfo yay fully working.  now to teach the old DateTime::Timezones to use it

[15:16] *** djerius left
[15:17] *** djerius joined
[15:17] <lizmat> guifa++

[15:30] *** Sgeo_ joined
[15:33] *** Sgeo left
[15:38] *** monkey_ joined
[15:48] *** coverable6 joined
[15:53] *** monkey_ left
[16:07] *** evalable6 joined
[16:09] *** Timpany joined
[16:10] *** greppable6 joined
[16:26] <lizmat> El_Che: does Cro::HTTP::Client come with the rakudo package ?

[16:38] *** jjido joined
[16:53] <Od1n> hello raku team

[17:00] <guifa> good <morning afternoon evening>.pick ! 

[17:11] *** Timpany left
[17:14] <Od1n> .[2] with Od1n

[17:38] *** discord-raku-bot left
[17:39] *** discord-raku-bot joined
[17:43] *** discord-raku-bot left
[17:43] *** discord-raku-bot joined
[18:05] *** eseyman left
[18:08] *** reportable6 left
[18:08] *** reportable6 joined
[18:26] *** eseyman joined
[19:04] *** epony left
[19:05] *** epony joined
[19:06] <El_Che> lizmat: normanlly no, except if zef pulled it in as a dependency

[19:07] *** sena_kun left
[19:11] <El_Che> is there interest in linux arm64 rakudo packages? It would take considerable work because github actions does not support arm64 (besides a remote selfhosted runner). And there is not JIT for arm64

[19:36] *** squashable6 left
[19:36] *** squashable6 joined
[19:52] *** Skarsnik joined
[20:10] *** tejr left
[20:11] *** tejr joined
[20:13] *** [Coke] left
[20:16] *** [Coke] joined
[20:17] <japhb> I'm more interested in the arm64 JIT support ... but I'm biased.  :-)

[20:18] <[Coke]> IANAL, but having worked with them on OSS issues for $DAYJOB, I find that the MIT license is pretty minimal (from my standpoint) and pretty unobjectionable (from theirs).

[20:23] <jast> here's my personal (and not lawyerized) overview for some of the more popular licenses: https://jan-krueger.net/doc/opensource-licenses.html

[20:26] <jast> in short, MIT is one of the more minimal licenses, with several others having a similar number of (but slightly different) restrictions

[20:44] <lizmat> El_Che: that explains why I needed to wait so long when loading Cro::HTTP::Client for the first time after the update :-)

[20:45] <lizmat> El_Che: I think the advantage of arm64 packages is that one wouldn't need to compile Rakudo on those architectures

[20:45] <lizmat> and compiling Rakudo on those *is* a barrier when you have less than let's say 1.2G of RAM available

[20:46] <lizmat> let alone how long it takes  :-)

[20:47] <japhb> It is indeed slow as heck.  I'm curious what target audience you're thinking of, though.  RPi 3 users?

[20:48] <japhb> (It compiles just fine -- if slowly -- on a 4 GB RPi 4.  I don't think you can buy an RPi 4 smaller than 2 GB these days, but maybe it was possible in the past.)

[20:49] <japhb> Wikipedia says there was a 1 GB RPi 4 at one point

[21:06] *** seednode left
[21:08] *** seednode joined
[21:18] *** monkey_ joined
[21:18] <Skarsnik> my chromebook is an arm64 platform, could be nice to have a raku on it x)

[21:27] *** monkey_ left
[21:41] *** monkey_ joined
[21:44] <El_Che> japhb: cloud providers are starting to offer arm64 servers and VMs (aws, oracle) + roi users

[21:44] <El_Che> rpi

[21:45] <El_Che> 4

[21:48] <japhb> El_Che: Ah, and the cost (and time) of compiles before actively running a node could get prohibitive.

[21:52] <El_Che> how l9ng does it take on a rpi4?

[21:54] *** monkey_ left
[21:54] <japhb> El_Che: I don't have a time for just the bare MoarVM/NQP/Rakudo build -- my build script includes a fair number of big modules that I always want installed.

[21:54] <japhb> That said, we're talking hours for the full thing, but way less than a day.

[21:55] <El_Che> wow

[21:55] *** linkable6 left
[21:55] <lizmat> El_Che: yeah, so on those grounds already would a binary build be nice  :-)

[21:55] <El_Che> and I would run 20+ in parallel

[21:56] *** monkey_ joined
[21:56] <El_Che> it would tequire a different approach than amd64

[21:57] *** linkable6 joined
[21:58] <El_Che> does adding cpus make the buikd faster?

[22:03] <japhb> El_Che: I suspect the answer to that is "yes", but I normally don't widen my builds because on x64 the zef installs are the overall time limiter, and on arm64 I have heat disappation issues

[22:04] <El_Che> last wurstion: do rpi usets mainly run raspian or just regular distros? eg on oracle cloud you'd run arm64 ubuntu or oracle linux

[22:05] <japhb> Raspbian (32-bit) and Raspberry Pi OS (64-bit) are both desktop distros.

[22:05] <japhb> They're not very heavy, obviously, but they're certainly not intended for servers.

[22:05] <japhb> (Hmmm, unless Raspberry Pi OS has a server install option now, I haven't looked.)

[22:05] <El_Che> thx!

[22:06] <japhb> np

[22:16] *** MoC left
[22:18] <japhb> El_Che: BTW, as I was setting up for a 2021.12 build on the RPi 4, I remembered -- RPi 4 build performance is *STRONGLY* related to how fast the SD card is.  Early on I had to upgrade to a much faster SD card because the default cards shipped with most RPi kits is S-L-O-W.

[22:18] *** jjido left
[22:19] <japhb> I would *hope* that the data center RPi's are set up to do something like network mount their RW partition, but if you're just testing it locally, be aware.

[22:19] <japhb> :-)

[22:28] <El_Che> the idea would be running containers on arm64 servers

[22:28] <El_Che> or maybe a ci service

[22:29] <El_Che> to be investigated, because reaching timeouts is likely

[22:30] <japhb> Oh god yes

[22:53] *** tejr left
[23:03] *** guifa left
[23:03] <japhb> El_Che: Looks like about 35-40 minutes to build up through zef itself.

[23:20] <lizmat> yeah, we really need to look at that, and cut out at least one occurence of precompilation

[23:21] *** Skarsnik left
[23:36] *** Sgeo joined
[23:38] *** Sgeo_ left
[23:39] <japhb> zef authors: trying to figure out how to deal with intermittent network connectivity when building a huge mess of Raku modules -- at some point the network flakes out just as zef is trying to pull a tarball, and it blows up.

[23:39] <japhb> Is there a way to separate the phases and download the tarballs separately from trying to extract/test/install them?

[23:39] <japhb> And in particular, to be able to tell (via e.g. exit code) whether the tarball was retrieved successfully?

[23:40] <japhb> Because then I can wrap that download in a retry loop ... or batch download when I've got good connectivity, and build later when I'm offline.

[23:47] <lizmat> well, there's the --serial option, that tests / installs each module at a time ?

