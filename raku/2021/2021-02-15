[00:45] *** pecastro left
[00:58] *** gnufr33dom joined
[01:27] *** marcusr left
[01:28] *** marcusr joined
[01:34] *** marcusr left
[01:36] *** marcusr joined
[02:19] *** gnufr33dom left
[02:24] *** tejr left
[02:24] *** tejr joined
[02:27] *** monkey__ joined
[02:42] *** MasterDuke left
[02:57] *** kvw_5_ joined
[03:01] *** kvw_5 left
[03:08] *** monkey__ left
[03:10] *** eseyman left
[03:12] *** eseyman joined
[04:12] *** coverable6 left
[04:12] *** bisectable6 left
[04:12] *** quotable6 left
[04:12] *** benchable6 left
[04:12] *** releasable6 left
[04:12] *** nativecallable6 left
[04:12] *** tellable6 left
[04:12] *** evalable6 left
[04:12] *** unicodable6 left
[04:12] *** committable6 left
[04:12] *** bloatable6 left
[04:12] *** sourceable6 left
[04:12] *** greppable6 left
[04:12] *** linkable6 left
[04:12] *** statisfiable6 left
[04:12] *** shareable6 left
[04:12] *** notable6 left
[04:12] *** squashable6 left
[04:12] *** releasable6 joined
[04:12] *** committable6 joined
[04:13] *** bloatable6 joined
[04:13] *** squashable6 joined
[04:13] *** tellable6 joined
[04:13] *** unicodable6 joined
[04:13] *** evalable6 joined
[04:13] *** nativecallable6 joined
[04:13] *** sourceable6 joined
[04:13] *** benchable6 joined
[04:13] *** quotable6 joined
[04:14] *** bisectable6 joined
[04:14] *** notable6 joined
[04:14] *** greppable6 joined
[04:14] *** linkable6 joined
[04:15] *** statisfiable6 joined
[04:15] *** coverable6 joined
[04:15] *** shareable6 joined
[04:32] *** rindolf joined
[04:44] *** sampersand joined
[04:45] <sampersand> Hi. When specifying return types, if it's returning the same class as its declared in, should i return `::?CLASS`?

[04:45] <sampersand> for example, should I do this, or replace `::?CLASS` with `MyString` : `method add(Value $r, --> ::?CLASS) { ::?CLASS.new: ... }`

[04:46] <sortiz> Using ::?CLASS is safer if you ever change the class name.

[04:46] <sampersand> Yeah, same wieth Rust and `Self`. It just looks a bit ugly here, especially with `::?CLASS.new`

[04:47] <sampersand> What's the cleanest way to have strings behave like perl strings? eg `"1a" + 3` should give me 4

[04:48] <sampersand> I've done `$thing ~~ /^ <[\d]>* /; $<>.Int` , but im wondering if there's something cleaner

[04:56] <sortiz> For your method you can use $.new(... or self.new(..., that works too because self is the invocant.

[04:58] *** skaji_ joined
[04:58] *** jhill left
[04:59] *** jhill joined
[04:59] *** sftp left
[04:59] *** sftp joined
[05:03] <sampersand> oh right

[05:03] <sampersand> taht makes sense @soritz

[05:06] *** aindilis left
[05:11] *** mowcat left
[05:16] *** Doc_Holliwood joined
[05:22] *** sampersand left
[05:29] <sortiz> m: sub toint(Str $a) { my $res = 0; for $a.ords { given $_.unival { when $_ === NaN { last }; default { $res = $res * 10 + $_ } }}; $res }; say toint('321foo') + 20;

[05:29] <camelia> rakudo-moar 3235f3e42: OUTPUT: «341␤»

[05:35] *** xinming_ joined
[05:38] *** xinming left
[05:40] *** Froogal joined
[05:44] <guifa2> m: say IntStr.new('1a') + 3

[05:44] <camelia> rakudo-moar 3235f3e42: OUTPUT: «Too few positionals passed; expected 3 arguments but got 2␤  in block <unit> at <tmp> line 1␤␤»

[05:45] <guifa2> say "1a".comb(/d/).join.Int

[05:45] <evalable6> guifa2, rakudo-moar 3235f3e42: OUTPUT: «0␤»

[05:45] <guifa2> err

[05:46] <guifa2> m: say "1a".comb(/\d/).join.Int

[05:46] <camelia> rakudo-moar 3235f3e42: OUTPUT: «1␤»

[05:46] <guifa2> sampersand: ^^

[05:46] <tellable6> guifa2, I'll pass your message to sampersand

[05:49] *** sampersand joined
[05:50] <sampersand> is there a way i can set the program name so my `$*USAGE` doesn't give the full path?

[05:50] <tellable6> 2021-02-15T05:46:27Z #raku <guifa2> sampersand: ^^

[05:50] <sampersand> whoops i have no idea what that was in reference to

[05:52] <guifa2> sampersand: getting a string value perl style-ish

[05:52] <guifa2> m: say "1a".comb(/d/).join.Int

[05:52] <camelia> rakudo-moar 3235f3e42: OUTPUT: «0␤»

[05:52] <guifa2> err

[05:52] <guifa2> m: say "1a".comb(/\d/).join.Int

[05:52] <camelia> rakudo-moar 3235f3e42: OUTPUT: «1␤»

[05:53] <sampersand> but something like `"1a2"` will give me 12, not 1

[05:53] <sortiz> m: sub toint(Str $a) { my $res = 0; for $a.ords { given $_.unival { when $_ === NaN { last }; default { $res = $res * 10 + $_ } }}; $res }; say toint('321foo') + 20;

[05:53] <camelia> rakudo-moar 3235f3e42: OUTPUT: «341␤»

[05:53] <guifa2> ah I didn't realize perl stops at the first alpa.  it's been a while since i've tried doing stuff like that

[05:53] <sortiz> Try mine sampersand.

[05:54] <sampersand> that seems like a lot more trouble than my regex solution soritz

[05:54] <sampersand> `$!value ~~ /^ \d* /; $<>.Int`

[05:57] <sampersand> is there a way to get `MAIN` to accept arguments in the form `-e foo` not `-e=foo` ?

[05:59] <sortiz> Your regex fails to give zero for "foo" ;-)

[06:00] <sampersand> how so I have `\d*` ?

[06:00] <sortiz> For your other question, see https://github.com/nxadm/SuperMAIN

[06:02] <sampersand> oh cool, also disappointing its not builtin

[06:03] <Froogal> Hello! I'm having a problem with the raku site.  I keep getting an error "SSL_ERROR_RX_RECORD_TOO_LONG" does anyone else get this while trying to access the site?  It's really annoying while trying to read docs. loll

[06:04] <sampersand> I GOT THAT TOO

[06:05] <sampersand> i have no idea the cause, and one day it just started working again. i used the wayback machine as a stopgap though

[06:08] <sortiz> I don't have problems accessing raku.org nor docs.raku.org. (tested with chrome and firefox in linux)

[06:08] <sampersand> when i had the problem, i tried curling the website and still got the ssl error

[06:10] *** benkolera joined
[06:12] <sampersand> so to resolve my circrular imports, ive resorted to this. is there a better solution: `our &run = sub { require Knight::Parser '&parse-and-run'; ::('&parse-and-run').($^a) };`

[06:13] <sampersand> `Knight::Parser` depends on `Knight::Function` , which has a function called `eval` , which then needs to run that `&run` function, and thus circular import

[06:14] * guifa2  is currently also able to get to raku.org sites, testing on Chrome on macOS

[06:14] <summerisle> same heer

[06:14] <guifa2> sampersand: that is your best bet if you want to keep them in different files 

[06:15] <sampersand> really? requiring it _every time_ the function is run?

[06:15] <guifa2> it's not like it's calling the export code again multiple times

[06:15] <guifa2> it'll call it once during compilation

[06:16] <sampersand> oh

[06:16] <sampersand> well, if i move it outside the sub, it no longer works

[06:16] <guifa2> in fact, it's often seen as good practice in Raku to limit your use/require statements to the specific block you need them.  I only hoist things to the top of a module file if I'm going to use it all over the place

[06:16] <sampersand> hm ok

[06:17] <sampersand> how can i import methods with this?

[06:18] *** Froogal left
[06:22] <guifa2> you should just use "use" instead of "require".  REquire just gives you access to the package's namespace (via its our-scoped stuff)

[06:23] <guifa2> I'd probably write it as

[06:23] <guifa2> sub run ($code) { use ::('Knight::Parser'); parse-and-run $code }

[06:23] <guifa2> sub foo { … } is functionally identical to our &foo = sub { … }

[06:24] *** gnufr33dom joined
[06:32] *** Froogal joined
[06:32] <Froogal> Does Raku have something equal to system() in perl?

[06:36] <sortiz> Froogal, see https://docs.raku.org/type/Proc::Async

[06:37] <Froogal> sweet, thanks!  Wow so I'm feeling a lot of javascript vibes from raku lol

[06:37] <Froogal> Not a bad thing tho

[06:38] <sortiz> In raku almost everything is an object, even more than in JS.

[06:39] <sampersand> raku has `qqx<...>`

[06:39] <sampersand> i tried the `sub foo` thing guifa2 but i was getting errors for some reason

[06:40] <sampersand> yeah, when i replace the `our &foo` with a `sub foo` , i get `Could not find symbol '&run' in 'Knight'`

[06:41] <sampersand> and doing that `use` gives me circular imports guifa2

[06:42] <guifa2> Froogal: note a small difference between Proc::Async and Perl's system

[06:42] <guifa2> > raku -e 'Proc::Async.new("sleep 5"); print "foo"'

[06:43] <guifa2> will immediately print foo, while the sleep is still going on in the background 

[06:43] <guifa2> > perl -e 'system "sleep 5"; print "foo"'

[06:43] <guifa2> Will wait five seconds, and then print foo

[06:43] <Froogal> Because of Async?

[06:45] <sortiz> Yes, there is also the simple Proc (see https://docs.raku.org/type/Proc ) and 'run' sub.

[06:46] <sortiz> https://docs.raku.org/routine/run

[06:47] <Froogal> nice!  so many options

[06:50] * guifa2 sets up a new CLDR compile and heads to bed.  At least there will be an update in time for the weekly

[06:50] * guifa2 coughs in the direction of lizmat, but from a pandemic safe distance

[06:57] *** Froogal left
[07:00] <sampersand> is there a way to tell raku to tell me where it waas when i hit ctrl+c. i presume i have an infinite loop somewhere but idk where

[07:00] *** parabolize left
[07:05] <guifa2> perhaps you could do signal(SIGINT).tap( { say Backtrace.new.XXXXX; exit 0 } );

[07:05] <guifa2> or something of that sort

[07:05] <guifa2> where XXXXX is the degree oft race you want

[07:06] <guifa2> e.g. summary, concise, full, nice, gist

[07:06] <guifa2> errr

[07:06] <guifa2> whoa, that never exits!

[07:06] <guifa2> even after control Cing

[07:11] <guifa2> sampersand: Actually, what I have there works just fine.  Just don't test it with loop { }; my guess is something gets really mucked up with the stack there.  WheN I retried with loop { sleep 2 } it worked perfectly

[07:11] <sampersand> ok cool

[07:12] <sampersand> yup, just as i suspected. things arent workign as they should ;p

[07:16] *** aluaces joined
[07:20] <summerisle> is there any good literature on rakudo design philosophy, nqp, architecture, etc...?

[07:20] *** ufobat__ joined
[07:23] <guifa2> look up stuff by jnthn, he's probably written the more recent stuff

[07:23] *** holyghost joined
[07:23] <guifa2> Rakudo doesn't have the same degree of design docs as Raku does though

[07:30] *** Discipulus joined
[07:36] *** elcaro joined
[07:44] *** wamba joined
[07:47] *** abraxxa joined
[07:48] <sortiz> summerisle, see https://github.com/edumentab/rakudo-and-nqp-internals-course, IMHO the best entry point available.

[07:52] *** abraxxa left
[07:52] *** abraxxa joined
[07:52] *** Sgeo left
[07:58] *** cgfbee left
[07:59] <sortiz> Discipulus: I finally got to the end of the rabbit hole.

[08:00] <Discipulus> sortiz: me too! did you have seen my perlmonks post?

[08:00] <sortiz> No yet. Let me see...

[08:01] <Discipulus> https://www.perlmonks.org/index.pl?node_id=11128365

[08:01] <Discipulus> it's about perl but very related

[08:07] <sortiz> Okay, but do you know where that _CRT_glob goes?

[08:07] <Discipulus> for raku? no idea :)

[08:07] <Discipulus> I know nothing about raku

[08:08] *** gnufr33dom left
[08:08] <Discipulus> I suppose there are some .c files to modify for raku too

[08:09] <sortiz> In all cases it is handled by an internal MS CRT function! 

[08:12] *** Doc_Holliwood left
[08:13] <Discipulus> this sounds opposite to the observed beahviour of MinGW built rakus, no?

[08:16] *** finsternis left
[08:17] <sortiz> No, MinGW32 ang MinGW64 uses different mechanisms but deep inside both depends of msvcrt, in it the handling is done by __getmainargs

[08:20] <sortiz> In mingw64 you can control it linking CRT_glob.a or CRT_noglob.a that simply set its 'extern int _dowildcard' (the mingw _CRT_glob analogous)

[08:29] *** sampersand left
[08:32] <sortiz> And results that raku don't touch _CRT_glob (nor _dowildcard) so, if linked with mingw64 uses the default and expands.

[08:33] *** dakkar joined
[08:39] *** cgfbee joined
[08:47] *** Garbanzo left
[08:49] <Discipulus> sortiz: nice found.Did you plan to open an issue?

[08:53] *** Scimon joined
[09:00] <sortiz> Can be. I think that for moarvm is only a matter of call Configure.pl with the proper arguments. You do not need to modify the code. 

[09:17] *** MasterDuke joined
[09:18] *** dogbert11 left
[09:18] *** dogbert11 joined
[09:19] *** rba left
[09:19] *** rba joined
[09:20] *** dustinm` left
[09:20] *** dustinm` joined
[09:34] *** ab5tract joined
[09:53] *** domidumont joined
[10:05] *** domidumont left
[10:10] <sortiz> Discipulus: Confirmed, I can build raku with mingw64's gcc and the proper LDFLAGS to avoid the expansion.

[10:11] <Discipulus> sortiz: ++ so you are elegible to produce a patch too :)

[10:20] *** wamba left
[10:24] <sortiz> I made a post in the original perlmonks thread.

[10:28] *** aluaces left
[10:30] <sortiz> o/ Time for bed.

[10:34] *** sortiz left
[10:38] *** sortiz joined
[10:40] <sortiz> Discipulus: Btw, for MS tools see https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=msvc-160#wildcard-expansion

[10:41] <sortiz> g'night

[10:41] *** sortiz left
[10:54] *** wamba joined
[11:13] *** ab5tract left
[11:24] *** aluaces joined
[11:52] *** patrickb joined
[12:13] *** ab5tract joined
[12:30] *** pecastro joined
[12:31] *** sftp left
[12:32] *** sftp joined
[12:48] *** Discipulus left
[13:12] *** ab5tract left
[13:26] *** Discipulus joined
[13:52] *** imcsk8 left
[14:01] *** guifa2 left
[14:04] *** Sgeo joined
[14:20] *** telex joined
[14:21] *** xelxebar left
[14:21] *** xelxebar_ joined
[14:37] *** renormalist joined
[14:39] *** ab5tract joined
[14:46] *** ab5tract left
[14:47] *** lucasb joined
[15:05] *** Doc_Holliwood joined
[15:08] *** domidumont joined
[15:14] *** gnufr33dom joined
[15:43] *** wamba left
[15:48] *** Sgeo left
[15:57] *** wamba joined
[16:00] *** RaycatWhoDat joined
[16:00] <RaycatWhoDat> Ah, it's that time again.

[16:01] <RaycatWhoDat> That time where I feel just enough pain from speed and general libraries to be tempted to the Racket side.

[16:02] <RaycatWhoDat> But I have a love-hate relationship with parens so, I weep

[16:04] *** RaycatWhoDat left
[16:05] *** RaycatWhoDat joined
[16:05] <RaycatWhoDat>  I forgot that `quit` kills all of your channels

[16:08] *** parabolize joined
[16:17] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/02/15/2021-07-easy-hard/

[16:17] <tyil> lizmat++

[16:21] *** domidumont left
[16:35] <tonyo> hat general libs are you looking for RaycatWhoDat 

[16:36] <RaycatWhoDat> tonyo: GUI, mostly. Not for this use case but in comparison to Racket.

[16:37] <RaycatWhoDat> Or perhaps, this is all a perception issue and I should be treating Raku more like Haxe where the language consumes APIs/libraries from other places?

[16:42] <tonyo> raku is more of the consume libs style than having everything built into it

[16:43] <tonyo> if you need examples of it Nativecall docs are pretty decent to get started

[16:44] <tonyo> and then you have DB::Pg, libcurl, etc all use it

[16:50] *** Sgeo joined
[16:52] *** gnufr33dom left
[16:56] *** patrickb left
[17:02] <sjn> lizmat: about CCR; is there room for old videos in the project? (I know of two which still may have some value)

[17:17] <lizmat> hmmm...   you mean, copy into the repo ?

[17:18] <lizmat> sjn: not sure how Github (dis)likes that

[17:31] *** Garbanzo joined
[17:34] <codesections> sjn: one option for videos (which we might want to look into anyway if we do a RakuConf) is setting up a Raku peertube instance.  Then the CCR could link to that.

[17:35] <codesections> but it seems like a bigger discussion than just uploading a blog post.  Maybe you could open an issue in CCR?

[17:35] *** dakkar left
[17:39] *** Scimon left
[17:54] *** mowcat joined
[17:54] *** RaycatWhoDat left
[17:57] <db48x> avoid putting large binary files in a git repository

[17:58] <db48x> instead, make sure the videos are archived on archive.org

[17:58] <db48x> and put an index in the repository

[18:00] *** RaycatWhoDat joined
[18:00] *** wamba left
[18:01] *** jhill left
[18:01] *** skaji_ left
[18:02] *** skaji_ joined
[18:03] *** RaycatWhoDat left
[18:03] <codesections> huh, I didn't realize that archive.org handled arbitrary video.  I guess they do, but it sounds like they don't try to be particularly comprehensive and still sometimes have playback issues? ~https://www.reddit.com/r/DataHoarder/comments/ca3qtc/huh_interesting_apparently_youtube_videos_used_to/

[18:04] *** jhill joined
[18:05] <codesections> In general, I don't _love_ the idea of relying too much on them, both because I'd rather we keep control of our own content and because I'd hate to burden them more than we need to

[18:05] <codesections> but I agree it's better than nothing, obviously 

[18:28] *** domidumont joined
[18:32] <tonyo> how much data in video is it?

[18:33] *** mowcat left
[18:38] *** _jrjsmrtn joined
[18:38] *** __jrjsmrtn__ left
[18:38] <db48x> codesections: all the Raku videos ever recorded probably won't add up to much compared to the 50PB of data they already save

[18:39] <lizmat> ok, so it seems that uploading to archive.org and having a link in the CCR seems a viable solution

[18:39] <db48x> codesections: but it does make sense to have multiple backups. you can always ensure that everything is archived, plus also start your own peertube :)

[18:39] <lizmat> indeed... I will probably have a local copy of each

[18:39] <db48x> in fact, they don't even care if you hotlink the video files

[18:40] <lizmat> so: please create a PR for links to videos

[18:40] <lizmat> or ask for a commit bit  :-)(

[18:40] <db48x> your peertube could just be an interface that lets users find videos, while actually serving them from the archive

[18:40] <lizmat> afk for a few hours&

[18:44] *** domidumont left
[18:45] <tonyo> .tell jmerelo ty

[18:45] <tellable6> tonyo, I'll pass your message to jmerelo

[18:45] *** aborazmeh joined
[18:57] <codesections> yeah, all that makes sense (though I'm not sure about the peertube-as-an-InternetArchive frontend idea!)

[19:16] *** Garbanzo left
[19:20] <tonyo> is it intentional that setting %*SUB-MAIN-OPTS outside of the entry point for raku has no effect?  eg module X { my %*SUB-MAIN-OPTS = :; sub MAIN("l", :a($all)) is export {..} }; will only work if you call x -a l and not x l -a (if x is `using X`) 

[19:24] <db48x> codesections: why aren't you sure about it?

[19:27] <codesections> tonyo: s/:;/:named-anywhere;/ ?

[19:27] *** mowcat joined
[19:29] *** guifa2 joined
[19:31] <codesections> tonyo: I don't know the intent for sure, but the implementation at https://github.com/rakudo/rakudo/blob/master/src/core.c/Main.pm6#L17 makes that look pretty intentional to me

[19:34] <codesections> db48x: well, just that the IA gets a lot of traffic and has pretty tight funds.  There wouldn't be a *need* to develop a distributed, privacy respecting alternative to youtube if the answer to getting content of youtube was as simple as "create a frontend for the internet archive"

[19:41] *** aluaces left
[19:46] <guifa2> oooh, FOSDEM is prepping the videos for release

[19:51] <db48x> codesections: bandwidth is pretty cheap compare to the drives the data is stored on, and the motto at the archive is "access drives preservation"

[19:52] <db48x> that is, making the data available to people is what makes preserving it worthwhile

[19:55] *** ufobat_ joined
[19:58] *** ufobat__ left
[20:00] *** wamba joined
[20:01] <tonyo> yes to your sub ^

[20:35] <guifa2> lizmat++ for the weekly!

[20:54] *** asymptotically left
[20:54] *** asymptotically joined
[20:55] *** ufobat_ left
[21:09] *** aborazmeh left
[21:27] <guifa2> Thinking out loud here, but is there a way to extend enums in some way?  

[21:30] <guifa2> In CLDR, gender values are any of 7 different values.  That's in an enum, awesome.  But in one subsection of the CLDR, it can be any of those, or one or two special values. SO right now I'm having to store them as strings, which feels not as neat and tidy compared to enums

[21:34] *** leah2 left
[21:35] <codesections> guifa2: (probably an unhelpful answer, but...) you could always just make your own enums out of Roles https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/

[21:43] *** leah2 joined
[21:51] <guifa2> codesections: hmm something like that might work

[21:52] <codesections> yeah, it'd work – I was guessing it would be more refactoring than you were interested in, but maybe I'm wrong about that

[21:52] <codesections> I guess it depends on how much you use the enum

[21:53] <guifa2> eh, not often but when I do it get used a decent bit and the integral values are important

[21:53] <guifa2> this is kind of where I wish I could just do a C union or something

[21:53] <tbrowder> can i pls get a commit bit for planet.raku.org?

[22:04] *** Black_Ribbon joined
[22:06] *** wamba left
[22:15] *** Discipulus left
[22:38] *** aindilis joined
[23:52] *** linkable6 left
[23:52] *** evalable6 left
[23:53] *** evalable6 joined
[23:55] *** linkable6 joined
