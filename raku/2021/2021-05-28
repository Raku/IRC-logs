[00:13] *** p6steve left
[00:26] *** p6steve joined
[00:31] *** p6steve left
[00:56] *** lichtkind left
[00:58] <codesections> m: class A { my atomicint $n = 0; has Int $.id=$n⚛++ }; say A.new; dd A.new;

[00:58] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «A.new(id => 0)␤A.new(id => 1)␤»

[00:58] <codesections> is ^^^ correct/threadsafe, or does $.id need to be an atomicint too?

[00:59] *** p6steve joined
[01:00] <moon-child> correct wrt what?

[01:01] <moon-child> if $.id is never mutated concurrently then that's fine

[01:02] <codesections> ok, thanks, that's what I was asking

[01:02] <codesections> (And what I thought)

[01:04] *** p6steve left
[01:05] <codesections> (And with that API, it can't be mutated – concurrently or otherwise.  Though of course it could be it more methods were added)

[01:17] *** p6steve joined
[01:21] *** p6steve left
[01:29] *** colomon joined
[01:31] *** colomon left
[01:49] *** p6steve joined
[01:52] *** rbt left
[01:53] *** rbt joined
[01:54] *** p6steve left
[02:04] <Xliff> codesections: New advent PR up! :)

[02:04] <Xliff> Day 19 was a bit evil.

[02:05] <codesections> Merged!

[02:05] <Xliff> Thanks

[02:08] *** p6steve joined
[02:13] *** p6steve left
[02:14] <japhb> advent of what?

[02:14] <codesections> https://github.com/codesections/advent-of-raku-2020

[02:34] *** ggoebel joined
[02:42] *** p6steve joined
[02:46] <moon-child> m: say (√5)

[02:46] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3say (7⏏5√5)␤    expecting any of:␤        prefix␤        term␤»

[02:46] <moon-child> thoughts on prefix:<√> = &sqrt ?

[02:47] <moon-child> (and infix:<√>(\b, \x) = x ** (1/b))

[02:48] *** p6steve left
[02:59] *** p6steve joined
[03:03] <codesections> m: say "what's wrong with { 5¯² }?" 

[03:03] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «what's wrong with 0.04?␤»

[03:04] *** p6steve left
[03:05] <moon-child> well, nothing's _wrong_ with it.  One might as easily say: why have map, what's wrong with for?

[03:05] <moon-child> TIMTOWTDI :)

[03:06] <codesections> Fair :)

[03:07] <moon-child> (also, your example doesn't work and I don't think there's a superscript / or ., so there's no concise way to do it atm)

[03:07] <GreaseMonkey> Python philosophy of "There should be one-- and preferably only one --obvious way to do it" leads me to believe that the obvious way to implement a switch block is to use a dict which may or may not consist of callables

[03:07] <moon-child> hmm, should 5 ** (1/3) be written 3√5 or ³√5?

[03:07] <GreaseMonkey> i really need to learn the second part of tim toady bicarbonate because that sounds like the right philosophy

[03:07] <moon-child> that is, should the latter syntax be enforced?

[03:08] <moon-child> GreaseMonkey: I believe it goes 'but sometimes consistency can be a good thing', or something to that effect

[03:09] <GreaseMonkey> i'm surprised that prefix:<√> doesn't exist, but the ¯² thing does

[03:09] <codesections> I'd say so 3√5 looks too much like 3 x √5 (especially given the math context)

[03:09] <GreaseMonkey> good point

[03:10] <moon-child> truue

[03:11] <moon-child> while we're dreaming can we get log₂8 = log(8,2)?

[03:12] <GreaseMonkey> sub log₂8() { 2 }

[03:13] <GreaseMonkey> wait that should be 3, not 2, whoops

[03:14] <codesections> m: my %h is default(42); say %h<foo>

[03:14] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «42␤»

[03:14] <codesections> is there any way to do ^^^^ with a $-sigiled Map?

[03:14] *** ggoebel left
[03:14] <codesections> m: my Map $m is default(42)

[03:14] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Default value '42' will never bind to a parameter of type Map␤at <tmp>:1␤------> 3my Map $m is default(42)7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[03:32] *** p6steve joined
[03:33] <raydiak> m: my % is Map is default(42)

[03:33] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Map not yet implemented. Sorry.␤at <tmp>:1␤------> 3my % is Map is default(42)7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[03:33] <raydiak> ^ not sure that default works on Map at all atm

[03:34] <codesections> Ah, makes sense.

[03:36] <raydiak> or else that syntax confuses it...

[03:36] <raydiak> m: my % is Hash is default(42)

[03:36] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Hash not yet implemented. Sorry.␤at <tmp>:1␤------> 3my % is Hash is default(42)7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[03:36] <raydiak> but...

[03:36] <raydiak> m: dd my % is default(42)

[03:36] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Hash % = {}␤»

[03:36] *** p6steve left
[03:37] <raydiak> not sure which part of that it thinks is a shape declaration :)

[03:38] <raydiak> anyway, if you could do with a Hash, you could at least write

[03:38] <raydiak> m: my $h = (my % is default(42)); say $h<foo>

[03:38] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «42␤»

[03:39] <moon-child> m: my %a; my %b is Hash; say %a eqv %b

[03:39] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «True␤»

[03:40] <codesections> m:  my Map() $h = (my % is default(42)); say $h<foo>

[03:40] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «42␤»

[03:40] <codesections> m:  my Map() $h = (my % is default(42)); say $h<foo>; say $h.WHAT

[03:40] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «42␤(Hash)␤»

[03:41] <raydiak> rememeber that Hash is a Map, so it does pass your type constraint :)

[03:41] <codesections> ...oh, right

[03:42] <codesections> that one still seems backwards to me

[03:42] <codesections> m: say SetHash ~~ Set; say Set ~~ SetHash

[03:42] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «False␤False␤»

[03:42] <raydiak> dinner &

[03:46] *** guifa joined
[03:47] *** guifa left
[03:49] *** dogbert17 joined
[03:50] *** dogbert11 joined
[03:53] *** dogbert17 left
[04:06] *** p6steve joined
[04:11] *** p6steve left
[04:20] *** dogbert17 joined
[04:23] *** dogbert11 left
[04:24] *** p6steve joined
[04:28] *** p6steve left
[04:30] *** coverable6 joined
[04:40] *** p6steve joined
[04:45] *** p6steve left
[04:58] *** p6steve joined
[05:02] *** p6steve left
[05:05] *** hankache joined
[05:16] *** p6steve joined
[05:20] *** reportable6 joined
[05:20] *** p6steve left
[05:32] *** p6steve joined
[05:36] *** p6steve left
[05:49] *** p6steve joined
[05:49] *** p6steve left
[06:02] *** reportable6 left
[06:11] *** muffindrake joined
[06:11] <muffindrake> Hey, where can I get the raku docs on one page or one file?

[06:12] <muffindrake> The one-page view on the website is a 404

[06:28] *** stoned75 joined
[06:47] <raydiak> yes the docs have grown some wrinkles over the years that we're working on ironing out. it looks like you can still find that at https://docs.raku.org/perl6.html though some of the anchor links here and there seem to be broken

[06:51] <muffindrake> That'll work nicely, thanks!

[06:51] <raydiak> happy to help

[06:54] <moon-child> m: +"-²"

[06:54] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "+" in expression "+\"-²\"" in sink context (line 1)␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3-⏏5²' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[06:54] <moon-child> whyn't?

[06:56] <moon-child> given

[06:56] <moon-child> actually, forget the -; why doesn't +"²" evaluate to 2?

[07:10] *** dolmen joined
[07:15] *** reportable6 joined
[07:16] *** raydiak joined
[07:17] <raydiak> m: say (+"²").backtrace.full

[07:17] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «  in block  at SETTING::src/core.c/allomorphs.pm6 line 290␤  in sub parse-int-frac-exp at SETTING::src/core.c/allomorphs.pm6 line 349␤  in sub parse-simple-number at SETTING::src/core.c/allomorphs.pm6 line 525␤  in sub parse-real at SETTING::src…»

[07:17] <raydiak> definitely a bug, that's what I'm following to try to track it down

[07:28] <raydiak> near as I can tell so far, the problem is likely somewhere in https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L1581-L1731

[07:28] <raydiak> .u ²

[07:28] <unicodable6> raydiak, U+00B2 SUPERSCRIPT TWO [No] (²)

[07:32] <raydiak> I suppose the other question is why it works outside of a string...maybe we're handling that before it gets passed to moar through nqp, like in the grammar/actions or something

[07:43] <MasterDuke> it's an operator, it doesn't have a numeric value. see src/Perl6/Actions.nqp:8072

[07:44] <raydiak> but

[07:44] <raydiak> m: say ²

[07:44] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «2␤»

[07:44] <raydiak> m: say ².WHAT

[07:44] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «(Int)␤»

[07:46] *** Doc_Holliwood left
[07:49] <raydiak> seems like val() ought to reflect that, no?

[07:51] <dpk> m: say '²'

[07:51] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «²␤»

[07:51] <dpk> oh, i see why

[07:52] <dpk> m: say ५ + ४

[07:52] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «9␤»

[07:55] <raydiak> yes we support any unicode numeric chars. but the superscripts like ² have dual meaning. it can be used as a term, or as a postfix exponentiation operator

[07:56] <raydiak> m: say ²; say 2²

[07:56] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «2␤4␤»

[07:59] <moon-child> m: say ²²

[07:59] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «4␤»

[08:00] <moon-child> another thing--should "2²" == 4?

[08:00] <moon-child> imo yes, but

[08:01] <raydiak> idk about expecting that string to numify by itself. ² is an operator in that context, not part of the term

[08:01] <ecocode-> lizmat: is logs.liz.nl running on your laptop?

[08:01] <moon-child> - is also an operator, but "-2" == -2

[08:04] <raydiak> val() handles negative numbers, decimals, scientific notation, and radixes. that is all. not operators. yes prefix - parses as an op in raku, but that is a different semantic than what val() does

[08:04] <dpk> personally it seems like a bad idea to me to give special behaviours to characters that will change if a source code file gets saved in NFKC or NFKD

[08:05] <raydiak> you can only directly numify strings that look like some form of a number, not whole mathematical operations. you'd have to EVAL for full math op functionality, and that is expected and good (for performance)

[08:06] <moon-child> why does 1e2 look like some form of a number, but 10² does not?

[08:06] <moon-child> obviously I wouldn't expect to numify e.g. 5×10 or x² or anything like that

[08:07] <moon-child> dpk: afaik raku normalizes everything, so I don't think it would make a difference?

[08:09] <raydiak> I'd guess it's just a typical convention we carried over from most programming languages. most of them treat scientific notation as a single term, not an operator. sci notation is allowed in all kinds of places where you can't put operators. like json, for one out of countless examples

[08:09] <dpk> regardless of what Raku does, my editor might perform a compatibility normalization when i save

[08:09] <dpk> if i paste source code onto some website, that website might do compatibility normalization, etc

[08:09] <dpk> (the 'K' in the normalization forms)

[08:10] <dpk> ² normalizes in those forms to a normal 2

[08:11] <raydiak> I don't know enough about the nitty-gritty of unicode to have anything intelligent to offer about that. hopefully more people will chime in soon here. it's morning in europe, so maybe...

[08:12] *** ecocode joined
[08:19] <raydiak> if you want a logical argument for why e notation is a term and not an op, I can't give you one because I really don't agree with it. it's just been like that in tech for longer than I've been alive. if you ask me, anything other than nonnegative integers should be an op. not e, not negative, not decimals. I even wrote a toy parser which works that way

[08:20] <moon-child> that's fair

[08:21] <Altreus> sounds like implementation details

[08:22] <Altreus> I suppose if they leak through in val() that's worthy of a debate before raku properly solidifies

[08:22] <raydiak> well we got here talking about val("²")

[08:23] <raydiak> m: say ²

[08:23] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «2␤»

[08:23] <raydiak> m: say +"²"

[08:23] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5²' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[08:23] *** rbt left
[08:23] *** rbt joined
[08:24] <Altreus> m: say val("1+2")

[08:24] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «1+2␤»

[08:24] <Altreus> m

[08:24] <raydiak> m: say +"1+2"

[08:24] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Cannot convert string to number: imaginary part of complex number must be followed by 'i' or '\i' in '031+2⏏' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[08:25] <Altreus> m: say +"1+2i"

[08:25] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «1+2i␤»

[08:25] <raydiak> heh, didn't even know cal handled complex...

[08:25] <raydiak> s/cal/val/

[08:25] <Altreus> That's another not-operator construct then

[08:25] <Altreus> At least there's not just one

[08:25] <raydiak> seems so

[08:26] *** ecocode_ joined
[08:27] <moon-child> hmmm, that is also handled inconsistently

[08:27] <moon-child> m: say -2.abs; say -2 .abs; say (-2).abs; say 1+i.abs; say 1+i .abs; say (1+i).abs

[08:27] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «-2␤2␤2␤2␤2␤1.4142135623730951␤»

[08:29] <Altreus> binding I guess

[08:30] <Altreus> I'm starting to think that I disagree with raydiak and I'd prefer things *not* to be operators!

[08:30] <Altreus> nah that's not logically sound

[08:30] <Altreus> But mathematical operators should probably bind tighter to numbers than other language constructs

[08:30] <Altreus> cos it seems quite likely that you intended to apply the maths to the number

[08:30] <moon-child> apl goes that way.  monadic - is negation, but ¯ is used for negative literals.  j joins the real and imaginary parts of complex numbers (so 1j2 in apl is 1+2i in raku)

[08:31] <Altreus> Sure, but if raku did everything as operators and normalised maths at compile time then 1+2i is the same as x+yi

[08:31] <Altreus> instead of a specially-parsed string

[08:32] <raydiak> but if you make it bind tighter to numbers, then when you substitute in $n, the behavior becomes inconsistent with literals

[08:32] <moon-child> yeah.  That's why apl uses different symbols for each

[08:32] <moon-child> e.g. you can't say ¯x, only ¯5

[08:33] <raydiak> interesting

[08:33] <moon-child> (-5 and -x are both ok, though there's no very good reason to write -5)

[08:33] *** rbt left
[08:33] <Altreus> raydiak: that makes sense, but then unary minus seems like it should bind tighter than method calls anyway

[08:33] <Altreus> -$x.foo always means (-$x).foo in my reading

[08:34] <Altreus> ah but what of the others

[08:34] <moon-child> I think the current precedence is better

[08:34] <Altreus> $x+$y.foo

[08:34] <moon-child> most methods are not on numbers, but many methods on non-numbers may return numbers.  so -($x.foo) is more common than (-$x).foo

[08:34] <Altreus> this is hard, let's go shopping

[08:35] <raydiak> I can also see an argument for parsing prefix - as part of the term instead of an op at all

[08:36] <Altreus> Is it bad that literals are treated differently from variables?

[08:36] * Altreus question everything

[08:36] <moon-child> yes, and also you have problems with $x -1

[08:37] <Altreus> cos an expression containing entirely literals can be entirely collapsed at compile time anyway

[08:37] <Altreus> Ah, now we're talking

[08:37] <Altreus> See in my head I've always liked the idea that spacing matters

[08:37] <moon-child> really?  I _hate_ that

[08:37] <Altreus> -1 is a number so $x -1 is $x * -1

[08:38] <moon-child> and raku agrees with me--whitespace is insignificant in regexes, unlike in literally every other languages' regex

[08:38] <moon-child> also raku doesn't multiply adjacent terms, which would be a _big_ change

[08:38] <raydiak> we don't have implicit multiplication because it leads to even more rabbit holes. I considered it in math::symbolic and...went shopping instead :)

[08:38] <Altreus> true, I'm talking a bit more abstract than the language allows

[08:39] <Altreus> But I think that's exactly why we can get away with no significant whitespace

[08:39] <Altreus> Because there's no other interpretation of $x -1

[08:39] <moon-child> til math::symbolic

[08:39] <Altreus> although it wouldn't pass code review

[08:39] <moon-child> that is cool

[08:40] <Altreus> speaking of code review I should do $work work

[08:43] <raydiak> e.g. I couldn't figure out which way people would expect x√y to work, things like that. and it has named vars, so is ab "ab" or "a*b"? all kinds of nasty business

[08:46] <moon-child> I think the ultimate evolution of any cas is towards mathematica.  Where you write something like nth-root(x, y), and it is rendered with a superscript x

[08:46] <moon-child> i.e. syntax is not super important, and input and display need not be completely commensurate

[08:48] <raydiak> m::s does that in places. e.g. x^2 will become x². it has a separate root op from exponentiation, though

[08:48] <evalable6> raydiak, rakudo-moar 4183cdaf3: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»

[08:48] <evalable6> raydiak, Full output: https://gist.github.com/c07d2e69cce1da6398adb1029894a49d

[08:49] <raydiak> heh oops. wasn't talking to you, evalable6 

[08:49] <moon-child> the mathematica cli renders x^2 as

[08:49] <moon-child>  2

[08:49] <moon-child> x

[08:50] <moon-child> which is kinda ugly on the one hand, but also more consistent (if you have, e.g. x^x)

[08:50] <raydiak> true. I just revert to ^ in that case. but the strings it outputs are all usable as inputs, so keeping it all concisely on one line has its advantages

[08:52] <raydiak> not that m::s is anything to compare with a serious cas like mathematica. it was a fun project, would need heavy refinement, expansion, and optimization to be a serious thing

[08:54] <raydiak> it has bugs too, in places which are hard to track down and work with because I was too clever back then, wrote some really dense knots

[08:56] <raydiak> passes all its tests and everything, but sometimes when I try to shove longer more complex stuff through, it chokes

[08:56] <moon-child> well it still does more than my abandoned cas :)

[08:57] <raydiak> the whole thing actually started as just a fun way to learn raku grammars...

[08:59] <raydiak> I didn't even know actions yet so for a long time it just did this instead: https://github.com/raydiak/Math-Symbolic/blob/cce8d65f56d2d72a56b090e6c9ce742ba66a9eef/lib/Math/Symbolic.pm6#L918-L1007 :D

[09:00] *** Kaiepi left
[09:01] <raydiak> one of many things I mean by "too clever"

[09:02] *** hankache left
[09:02] *** hankache joined
[09:06] <raydiak> oh yeah and I forgot all about the MultiHash...it represents e.g. 2*x^2+3*x+4 internally as a hash keyed by hash like { { x => 2 } => 2, { x => 1 } => 3, {} => 4 } .  just a variety of really "interesting" stuff going on in there

[09:07] <lizmat> ecocode: no, I use my laptop for development, and an old iMac for "production" :-)

[09:07] <tellable6> 2021-05-27T22:04:09Z #raku-dev <[Coke]> lizmat you said you were going to close https://github.com/rakudo/rakudo/issues/3748 a year ago, please consider again

[09:11] <moon-child> apl has a 'decode' primitive that can represent polynomials.  5⊥2 3 4 ←→ 2*5^2 + 3*5 + 4.  So ⊥∘2 3 4 ←→ -> x { 2*x^2 + 3*x + 4 }

[09:11] <moon-child> probably that's an easier representation to do logic on polynomials.  Though it gets less attractive when you have stuff like x^2 + xy + y^2

[09:14] *** Kaiepi joined
[09:16] <raydiak> I can certainly see advantages to that

[09:16] <moon-child> how come there's no complex rat?

[09:17] <raydiak> in raku?

[09:17] <moon-child> yeah

[09:18] <raydiak> m: dd val("1.2+3.4i") # isn't that what this is?

[09:18] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «ComplexStr.new(<1.2+3.4i>, "1.2+3.4i")␤»

[09:19] <moon-child> m: say (i/2).im.WHAT

[09:19] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «(Num)␤»

[09:19] <moon-child> m: say (1/2).WHAT

[09:19] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «(Rat)␤»

[09:20] <raydiak> hm. dunno

[09:20] <moon-child> I guess complex will mostly come out of (and go into) trig and sqrt, and so likely won't be rational anyway?

[09:21] <moon-child> or maybe it's to allow a stronger ordering of the numeric tower?

[09:23] <Altreus> a rat king?

[09:23] <raydiak> probably a lot easier to implement representation of the parts as one static type than changing under different circumstances

[09:23] <raydiak> m: say i.im.WHAT # not Int

[09:23] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «(Num)␤»

[09:23] <moon-child> interestingly the re and im methods return Real, but the Real method returns a Num

[09:23] <moon-child> (though as you point out they in practice return Num even when they don't have to)

[09:25] <raydiak> well also, Real is a role, not a class

[09:26] <moon-child> yes, but Int does Real

[09:26] <moon-child> and i.im could be an Int without loss of precision

[09:27] <raydiak> oh I see what you mean. again, it probably comes down to preserving the implementer's sanity, if I had to guess. or performance maybe

[09:28] <raydiak> and what you said about "where does this thing fit into the class heirarchy" maybe has something to do with it

[09:31] <raydiak> especially if you start manipulating it. raku doesn't magically change a Rat to an Int if you manipulate it into something with a denominator of 1, for instance. so you'd have to coerce it to do other non-Int operations on it

[09:31] <raydiak> m: say (.5+.5).WHAT

[09:31] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «(Rat)␤»

[09:34] <raydiak> I'd bet your excellent point about commonly getting irrational complex numbers out of trig ops and roots and other things has a lot to do with why they just picked Num and stuck with it

[09:42] <Altreus> I'm sure I understand these concepts but I feel like the conversation skipped over a lot

[09:42] <Altreus> This is what happens when knowledgeable people converse; they don't fill in the shared knowledge

[09:44] <raydiak> I feel more like I'm just used to only having half a clue what I or anyone else is talking about :D

[09:46] <raydiak> like my last point about Int...was probably toally wrong, because you can just take an Int and do whatever with it, and it'll gradually type to whatever is necessary for precision

[09:46] <raydiak> in my defense, I can feel my brain getting squishy from fatigue

[09:46] <moon-child> 'only having half a clue what I or anyone else is talking about' can definitely relate

[09:46] <moon-child> and I am definitely somewhat incoherenent from lack of sleep

[09:46] <moon-child> incoherent

[09:47] <Altreus> y'all should get some rest before you start using terms like y'all

[09:47] <raydiak> I lived in Texas for a couple years...y'all is a hard habit to break

[09:52] <Altreus> why thank you sah

[09:53] *** tejr joined
[09:54] *** rbt joined
[09:54] *** rbt left
[09:54] *** rbt joined
[09:56] <raydiak> went shooting a couple times while I was there too. and got hit by a car. moved back home after 2 years with better aim, three missing teeth, and saying y'all. talk about going native...

[09:57] <raydiak> though to be fair, I was in Austin, which is actually a really progressive college town

[09:57] <lizmat> Austin is nice

[09:57] <lizmat> rest of Texas, meh

[09:58] <lizmat> loved the Ethiopian vegan restaurant in Austin

[09:58] <raydiak> I went to several vegan restaurants, but don't recall an ethiopian one

[09:59] <lizmat> https://www.foodrepublic.com/wp-content/uploads/2015/10/Ethiopian-spread_credit-the-Perennial-Plate-2.jpg

[09:59] *** rbt left
[10:00] *** rbt joined
[10:01] <raydiak> looks nice, I'd try it. I'm not vegan any more, but I gave it a shot for half a year while I was there

[10:02] <raydiak> lost a noticable of strength, but had way more energy

[10:03] <raydiak> noticable *amount* of

[10:03] <raydiak> noticeable

[10:03] <raydiak> I always get that one wrong

[10:04] <lizmat> https://www.tripadvisor.com/Restaurant_Review-g30196-d810605-Reviews-Aster_s_Ethiopian-Austin_Texas.html   # hmmm..., appears they're just vegetarian friendly

[10:06] *** sono left
[10:08] <raydiak> ah, maybe that's why I never noticed it in my searches. I was pretty strict about the vegan thing

[10:10] <raydiak> the prices don't look bad for that area though

[10:10] <lizmat> yeah, the housing of that restaurant is definitely "studentesque", almost under the highway

[10:11] <lizmat> and it definitely has a bit of a "shanty-town" feel

[10:12] <raydiak> I miss the freeway frontage roads, that's a great idea. can't imagine why we don't have them up here in WA

[10:17] *** sacomo left
[10:20] *** synthmeat joined
[10:24] *** sgrs joined
[10:28] <raydiak> alright, I'm going to attempt sleep. was nice chatting moon-child, Altreus, lizmat, #raku. y'all have a good * now, ya hear? \o

[10:29] <lizmat> sleep well!

[10:30] <Altreus> why thank you sah

[10:30] <Altreus> hmm strange lag

[10:30] <Altreus> nn :)

[10:39] *** morayj joined
[10:39] *** sacomo joined
[10:55] *** muffindrake left
[11:05] *** rbt left
[11:05] *** rbt joined
[11:05] *** rbt left
[11:05] *** rbt joined
[11:08] *** RaycatWhoDat joined
[11:20] *** dolmen left
[11:24] *** lichtkind joined
[11:35] *** morayj left
[11:35] *** patrickb joined
[11:37] *** dolmen joined
[11:39] *** Doc_Holliwood joined
[11:45] *** ecocode_ left
[11:56] *** ggoebel joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:09] *** Summer joined
[12:19] *** CIAvash[m] joined
[12:19] *** morayj joined
[12:21] *** morayj left
[12:22] <lizmat> Changed the layout on the daily pages on https://logs.liz.nl/raku/today in preparation for a more final design

[12:27] <lizmat> hope people will like it

[12:36] *** CIAvash[m] is now known as CIAvash

[12:38] <lizmat> afk for a few hours&

[12:40] <Summer> its a bit information dense for me, and it doesn't feel like the username boxes own the chat line boxes

[13:10] *** dolmen left
[13:21] *** dolmen joined
[13:25] <vrurg> lizmat: I'd join Summer on his note. It's rather hard to follow the current way.

[13:27] <Summer> It'd take a whole rework to do this, but i usually find starting with raw-ish irc logs and then using spans to hide and show parts of each line or whatever, the best option (mainly because then it allows people to copy paste from the log)

[13:27] <jdv> needs "current" for me

[13:28] <jdv> the formatting isnt unusable, to me.

[13:29] <jdv> i think moritz's copy even had some sort of tailing ability unlike vanilla collabti, iirc.

[13:35] *** rbt left
[13:56] <Altreus> Agree with the names thing. Feels like they should be side-by-side with the message box

[14:02] <cognominal> lizmat: So nice a toot but he trafic of people joining and leaving should be opt in. And now that username are specially hiligthed they could go with  the first of consecutive messages.

[14:10] *** vrurg_ joined
[14:12] *** vrurg left
[14:12] *** sena_kun joined
[14:13] *** Summer left
[14:17] *** dolmen left
[14:17] <codesections> as a Mastodon user, I found the typo about it being a "nice toot" briefly very confusing 

[14:18] <codesections> (mastodon calls it's micro posts "toots" rather that "tweets")

[14:18] <codesections> s/it's/its

[14:21] *** Sgeo joined
[14:25] *** guifa joined
[14:28] *** guifa left
[14:41] *** dolmen joined
[15:12] *** b2gills joined
[15:17] *** stoned75 left
[15:21] *** jmcgnh left
[15:37] *** dolmen left
[15:43] *** jmcgnh joined
[15:44] *** vrurg joined
[15:44] *** vrurg_ left
[15:48] *** dolmen joined
[16:07] *** jmcgnh left
[16:10] *** jmcgnh joined
[16:44] *** dolmen left
[16:52] *** squashable6 left
[16:55] *** squashable6 joined
[17:09] <codesections> Do you think we can/should have a warning for this: I ran into a bug in my code because, when I should have done this (or, honestly, should have used an if/else)

[17:10] <codesections> m: say (1 ?? do {my $a = 0; $a+1} !! 'false')

[17:10] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «1␤»

[17:10] <codesections> I instead had:

[17:11] <codesections> m: say (1 ?? (my $a = 0; $a+1) !! 'false')

[17:11] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «(0 1)␤»

[17:12] <codesections> (that's golfed, obviously, which makes it much more obvious).  It took me quite a bit to realize that the ; was being parsed as the same as a comma, rather than as a statement terminator 

[17:16] *** rbt joined
[17:17] <codesections> checking the docs, I see that I could also have validly written:

[17:17] <codesections> m: say (1 ?? $(my $a = 0; $a+1) !! 'false')

[17:17] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «1␤»

[17:19] <gfldex> QAST::Stmts <wanted> :multislice<?> my $a = 0; $a+1

[17:20] <gfldex> That's what Rakudo thinks it is given.

[17:21] <raydiak> I can see why you'd want some feedback there, but I don't see how we could catch it without throwing false positives when people actually mean:

[17:21] <raydiak> m: say (1,2; 3,4)

[17:21] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «((1 2) (3 4))␤»

[17:22] <codesections> I guess one option would be to warn if that expression contains a ; but no ,

[17:22] <gfldex> m: say (1 ?? {my $a = 0; $a+1}() !! 'false')

[17:22] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «1␤»

[17:24] <codesections> yeah, there are plenty of ways to do it correctly: $(…), do {…}, {…}() all work

[17:24] <raydiak> m: m: say (1 ?? (my $a = 0)+1 !! 'false')

[17:24] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «1␤»

[17:25] <raydiak> I supposed I could see an argument for that

[17:25] <raydiak> warning on ; with no , I mean

[17:26] <gfldex> m: my @a{1;2} = 42; dd @a;

[17:26] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The {} shape syntax with the @ sigil is reserved␤at <tmp>:1␤------> 3my @a{1;27⏏5} = 42; dd @a;␤    expecting any of:␤        statement end␤        statement modifier␤        statement…»

[17:26] <gfldex> m: my @a; @a{1;2} = 42; dd @a;

[17:26] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Type Array does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[17:26] <gfldex> m: my @a; @a[1;2] = 42; dd @a;

[17:26] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Array @a = [Any, [Any, Any, 42]]␤»

[17:26] <gfldex> A multislice can show up in plenty of spots.

[17:27] <moon-child> m: my @a; @a[my $x = 1;$x+1] = 424; dd @a

[17:27] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Array @a = [Any, [Any, Any, 424]]␤»

[17:28] <raydiak> ah, right

[17:30] <codesections> Hmm, I don't know the QAST internals as well as I want to, but couldn't we annotate that we're inside a ternary?

[17:31] <gfldex> And how deep do you wont to go there? You might actually have a multi-dim slice inside a grouped expression.

[17:32] <gfldex> I burned my fingers on () inside a tenery and my code got better.

[17:33] <gfldex> Programmers are smart and tend to prefer education over bans.

[17:33] <codesections> Yeah, fair.  Though on the other hand, it's just a warning – I don't know that people needing `quietly` in some edge cases is _that_ high a price 

[17:34] <patrickb> m: my @a = 'a', 'b'; my @b = 'c', 'd'; my (@c, @d) = @a, @b;

[17:34] <camelia> rakudo-moar 4183cdaf3: ( no output )

[17:34] <gfldex> A litte warning in the docs in the right places would be nice tho.

[17:34] <patrickb> m: my @a = 'a', 'b'; my @b = 'c', 'd'; my (@c, @d) = @a, @b; say @c; say @d;

[17:34] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «[[a b] [c d]]␤[]␤»

[17:35] <patrickb> How can I make the above assign @a to @c and @b to @d?

[17:36] <gfldex> m: my @a = 'a', 'b'; my @b = 'c', 'd'; my (@c, @d) := @a, @b; say @c; say @d;

[17:36] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «[a b]␤[c d]␤»

[17:36] <ugexe> m: my @a = 'a', 'b'; my @b = 'c', 'd'; my (@c, @d) := @a, @b; say @c; say @d;

[17:36] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «[a b]␤[c d]␤»

[17:36] <ugexe> heh

[17:37] <patrickb> :-)

[17:37] <patrickb> Thanks!

[17:37] <codesections> gfldex: Raku currently is pretty free with its warnings, though: there are plenty of times I *want* to use a undefined value in Str context, and thus either get a warning, use quietly, or use //

[17:48] *** zostay joined
[17:57] <raydiak> I don't think there is a definitive reason that it can't/shouldn't warn, more of a judgement call. big shaded region, not a sharp line. though fwiw, I don't find "I already stumble over false positive warnings all the time so let's add another" to be a persuasive argument :)

[17:59] <raydiak> I like the undef in str warning though, personally. that really commonly does mean something has gone wrong, in the cases of my own code

[18:00] <codesections> ha! :D   I was more trying to say that, given the number of warnings we currently get, users might expect warnings for softening like this (there's some value in consistency) 

[18:02] <codesections> re: string warning – yeah, I agree.  I get it as a false positive a fair bit, but mostly in debugging code (I might do something like `note "the current foo: $bar"`).  But I don't mind a bit of extra noise in the debug output

[18:02] <gfldex> This warning feels more like a target for a linter to me.

[18:02] *** reportable6 left
[18:03] *** hankache left
[18:04] *** reportable6 joined
[18:04] <raydiak> sure consistency, I just mean the same idea could be inverted to say that we should back off some of the warnings. like this one I hit the other day:

[18:04] <raydiak> m: 0 ==> say

[18:04] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 030 ==> say7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say".  In Raku please use: .say if you meant␤    to call it as a method on $…»

[18:04] <raydiak> and yet

[18:05] <raydiak> m: sub sayQuietly ($_) {.say}; 0 ==> sayQuietly

[18:05] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «0␤»

[18:06] <codesections> but that's not a warning – that's an error.  Which seems like a higher bar/more like something we should back off from

[18:07] <raydiak> the error is something else. maybe a special case in the parser or idk what. but the warning is the part after other potential difficulties

[18:08] <codesections> I don't think they're unrelated, though

[18:08] <gfldex> m: multi sayQuietly ($_) {.say}; 0 ==> sayQuietly

[18:08] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «0␤»

[18:08] <codesections> m: 0 ==> say()

[18:08] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «0␤»

[18:08] <raydiak> I can certainly see the case you're making for wanting (;) to warn. I guess a lot of the decision would just come down to how often we suspect it would be intentional or not

[18:08] <raydiak> yes, doing it with () works. but with something that isn't "say", you don't need the ()

[18:09] <gfldex> m: multi sayQuietly {}; multi sayQuietly ($_) {.say}; 0 ==> sayQuietly

[18:09] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «0␤»

[18:10] *** sono joined
[18:10] <raydiak> now that we're raku instead of perl 6 I almost want to rip out all the P5ism warnings. but that's probably going a bit far

[18:11] <codesections> raydiak: yeah, agreed that it's something with say.  I just think it's the same thing that makes say throw the error 

[18:11] <gfldex> `0 ==> say` not working is a bug

[18:11] <codesections> yeah, agreed

[18:12] <codesections> and I think that bug is also what causes the spurious warning (it's one issue, not two)

[18:15] <El_Che> raydiak: I don't think p5 centrism has a case today as it did when it was the "previous" version.

[18:26] <raydiak> looks like it actually does that same error and warning both, for all of: say print abs chomp chop chr cos defined exp lc log mkdir ord reverse rmdir sin split sqrt uc unlink fc

[18:27] <raydiak> for consistency, I'd rather see it do the same dispatch error you get for e.g.:

[18:27] <raydiak> m: abs()

[18:27] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling abs() will never work with signature of the proto ($, *%)␤at <tmp>:1␤------> 3<BOL>7⏏5abs()␤»

[18:27] <raydiak> instead of

[18:27] <raydiak> m: 0 ==> abs

[18:27] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5===␤Argument to "abs" seems to be malformed␤at <tmp>:1␤------> 030 ==> abs7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "abs".  In Raku please use: .abs if you meant␤    to call it as a method on $…»

[18:29] <raydiak> though again, doing it in a feed is probably a bug like codesections already pointed out

[18:29] <raydiak> should just work

[18:30] <raydiak> and I wonder why we chose those ones in particular. thought there were a lot more than that which operated on $_ in p5

[18:32] <raydiak> for that matter, I sometimes kinda miss being able to do all those on $_ without a . in front. guess it's in the name of self-clocking or somesuch

[18:32] *** hankache joined
[18:32] *** vodkra joined
[18:36] <raydiak> or gfldex pointed out. the person with the nick, you know who you are

[18:37] <gfldex> Most of the time I do know who I am. :)

[18:38] <raydiak> ha :)

[18:50] *** demostanis[m] joined
[18:50] <demostanis[m]> Libera chat!!1

[18:53] *** hankache left
[18:55] <raydiak> demostanis[m]!!1 :D

[18:55] <raydiak> oh, hey...we have working matrix bridge now?

[18:56] <dpk> libera chat, Domine, de Koreae principe, in die illa tremenda …

[18:57] <demostanis[m]> Since yesterday

[18:57] <raydiak> nice!

[18:59] <raydiak> heh dpk, agreed

[18:59] <juanfra> the matrix bridge is not stable yet. they are testing all the thing.

[19:00] <juanfra> write a direct message to @appservice:libera.chat if you want to use it

[19:00] <juanfra> "!help" will give you the instructions

[19:01] <raydiak> some day I should try this matrix thing everyone's talking about

[19:04] <vodkra> raydiak: Matrix is very nice to put some animated stickers and pretty emojis :D

[19:06] <raydiak> *facepalm*

[19:07] <vodkra> raydiak: But it has one big backward. There's no reference server coded in Raku as I know :X

[19:08] <raydiak> I remember when people complained that color support in mIRC was annoying. now we can't get enough animated stickers and emojis?

[19:08] <raydiak> vodkra: so you're gonna fix that for us? :)

[19:08] *** m6locks left
[19:08] <juanfra> they want to remove all the "pretty" things for the irc bridges, so irc users don't see the weird messages

[19:10] <juanfra> a raku client lib for matrix would be really nice

[19:12] <raydiak> but if they filter them out how do I get my daily fix of winking grinning yellow circles dancing to and fro?

[19:12] <raydiak> with their tongues sticking out

[19:14] <vodkra> raydiak: Errr... Depends on available time I have to work on this unofficial project about the server side :V

[19:19] <raydiak> c'mon you know you'd rather be writing Raku :D

[19:26] <raydiak> that's the ticket, expand the community and ecosystem through peer pressure. I double dog dare you to write some Raku!

[19:34] <demostanis[m]> <juanfra "write a direct message to @appse"> What do you mean? I didn't have to do that

[19:35] <demostanis[m]> There's a hidden service too now!!1

[19:37] <juanfra> you will need to send your nick and password to appservice or your user will not receive private messages from IRC users

[19:39] <juanfra> and your user will not be able to join channels only available for registered users

[19:55] <raydiak> wrt my earlier bug:

[19:55] <raydiak> m: 0 ==> say

[19:55] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 030 ==> say7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say".  In Raku please use: .say if you meant␤    to call it as a method on $…»

[19:55] <raydiak> interestingly, adding a trailing ; fixes the first error

[19:55] <raydiak> m: 0 ==> say;

[19:55] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»

[19:55] <raydiak> and this does work:

[19:55] <raydiak> m: use isms <Perl5>; 0 ==> say

[19:55] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «0␤»

[19:56] <gfldex> Please file an issue.

[19:57] <raydiak> I will, I'm just still digging at it for a complete understanding. or maybe a PR instead depending on where the digging ends up

[19:58] <gfldex> I'm still contemplating https://www.reddit.com/r/rakulang/comments/njjmgc/whats_everyone_working_on_this_week_2021_week_21/gz7uwcw/?utm_source=reddit&utm_medium=web2x&context=3

[19:59] <gfldex> I know there is a bug but I can't quite tell which part is wrong.

[20:01] <raydiak> off the top of my head, I'd vote that an error should be thrown when you try to define OUTER

[20:03] <raydiak> though I don't know much about how labels are implemented, tbh. didn't even know it was an actual object and goes in the lexpad, thought maybe it was just a syntactic construct

[20:03] *** vodkra is now known as VendrediOuLeTrol

[20:03] <gfldex> I'm not so sure. One might pull in a module with `use` that, after having a new version released, introduces a new package. So shadowing a label with a package might cause future bugs.

[20:04] *** VendrediOuLeTrol is now known as vodkra

[20:04] <gfldex> I had to query my blog too. Found it at https://gfldex.wordpress.com/2021/01/17/introspective-labeling/

[20:05] <codesections> Won't that be true for anything that's shadowed by a psudopackage?

[20:05] <codesections>   m: constant DYNAMIC = 42; sub f { dd DYNAMIC } f

[20:05] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3stant DYNAMIC = 42; sub f { dd DYNAMIC }7⏏5 f␤    expecting any of:␤        infix␤        infix stopper␤     …»

[20:05] <codesections>   m: constant DYNAMIC = 42; sub f { dd DYNAMIC }; f

[20:05] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «DYNAMIC␤»

[20:06] <gfldex> I can highly recommend writing a blog. Having a search-button on your own past thoughts saves a ton of time. :)

[20:07] <raydiak> isn't that always a chance anyway? any change to exports could potentially interfere with existing user code. not just packages and labels, but literally anything you can export

[20:07] <moon-child> gfldex: sounds more like a diary than a blog

[20:07] <moon-child> like what's the point of making it public?

[20:07] <raydiak> I usually just grep my irc logs, but a blog would be somewhat more organized

[20:08] <raydiak> oh right, thoughts I don't write on irc...those are scattrered across a bazillion text files :)

[20:08] <gfldex> raydiak: That's why there is a strong emphases on lexical-stuff in Raku. To help mitigate the perils of dynamic languages. So the shadowing without a warning is rather surprising.

[20:09] <gfldex> moon-child: other ppl can hit the search button too. When you die, what do you plan to leave behind?

[20:09] <moon-child> gfldex: eh, raku is one of the few modern languages that has dynamic scope at all!

[20:09] <moon-child> gfldex: jack shit :)

[20:14] <raydiak> interesting it should come up, I've been considering writing a lot more english, starting with journaling. was kicking around the idea of writing a book, and journaling seemed like a nice, approachable start to getting the ideas expressed concretely so I can then organize them into some sensical order instead of a big interconnected jumble in my head

[20:16] <codesections> raydiak: yeah, I think the bug/issue here is that the user wouldn't expect anything to come between the declaration's lexical scope and the lexical scope it's used in.  If I didn't know the names of psudopackages, I'd be pretty certain that `constant OUTER = 0; (sub {say OUTER})()` would print 0 - there's so `use` or anything!

[20:18] <codesections> s/so/no

[20:19] <raydiak> I see now, package names seem to violate lexical scoping expectations

[20:21] <codesections>  sort of.  I mean, they follow the rules.  It's just that pseudo packages are declared in lexical scopes that users might not be thinking of

[20:24] <Xliff> juanfra: Where are the API docs for Matrix?

[20:25] <raydiak> istr something about any and all all-caps package names being considered reserved, which implies you're just better off not using those names, at least for anything without a sigil

[20:27] <Xliff> I take it we have a lot of people here that use Matrix. Please elnighten me as to what it is?

[20:27] <Xliff> Linky?

[20:28] <juanfra> https://matrix.org/docs/spec/client_server/latest

[20:28] <gfldex> True. At the other hand, we like to use CALLCAPS for control structures that change the flow of a program. That's why I used OUTER for that label.

[20:28] <juanfra> i don't know if they have something more simple

[20:28] <Xliff> Oh. Looks like Matrix::Client already exists.

[20:28] <Xliff> https://github.com/matiaslina/Matrix-Client

[20:29] <codesections> and all the labels in the docs are in caps too: https://docs.raku.org/language/control#LABELs

[20:30] <raydiak> yeah I've seen people use it for constants, too

[20:30] <gfldex> It's a C-ism I believe.

[20:35] <raydiak> so if I understand, we're trying to decide (1) which one should shadow the other, (2) whether to warn/die/silently proceed, and (3) what pattern to suggest instead in the docs and error messages if any?

[20:37] <raydiak> if the label were to shadow the package, could you still get at the package with OUTER:: or ::('OUTER') or something along those lines?

[20:38] <gfldex> Pseudo packages must shadow. I'm unsure if there should be a warning or ===SORRY===.

[20:42] <raydiak> I'd vote for the sorry, between those two. why proceed if you're clearly defining things that can't possibly be used?

[20:47] *** espadrine joined
[20:50] <raydiak> even right there where you defined it it's already useless, there's always an OUTER everywhere afaik

[20:52] <codesections> No, in the scope where you defined it, the label shadows the pseudopackage, not the other way around

[20:53] <raydiak> m: LABEL: dd LABEL

[20:53] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Label LABEL = Label.new␤»

[20:53] <raydiak> m: OUTER: dd OUTER

[20:53] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «OUTER␤»

[20:55] <codesections> ...oh, that surprises me.  I thought pseudopackages were (notionally) declared at the top of the scope

[20:55] <raydiak> I obviously have no idea which is the *intended* behavior

[21:00] <codesections> m: OUTER: dd callframe(0).my<OUTER>

[21:00] <camelia> rakudo-moar 4183cdaf3: OUTPUT: «Label OUTER = Label.new␤»

[21:00] <codesections> ^^^^ so it *is* installed in the lexical scope, but shadowed (as we've been saying)

[21:03] <raydiak> just ooc, why must the pseudopackage always shadow as gfldex said? internal reasons, or it's a decision long set in stone, or some reason of consistency I'm not seeing?

[21:04] <gfldex> It's a grammar level thing the same way as .WHAT is. The compiler is cheating.

[21:04] *** rbt left
[21:06] <raydiak> ah

[21:06] <gfldex> That's an implementation detail ofc. A future Rakudo might not have to cheat.

[21:11] <Xliff> juanfra: Did you look into Matrix::Client?

[21:15] <juanfra> Xliff: i'm still learning the raku basics. when i discovered the raku grammars the last year, i though that raku would be perfect for a personal bot. the problem of the most of matrix libs (not only for raku) is the lack of e2e support.

[21:18] <juanfra> i don't remember if i looked at Matrix::Client at the time

[21:20] <juanfra> i gave up on raku because there was not a binary package for archlinux but recently someone create a new aur package (rakudo-bin) and i'm trying to start again with raku

[21:20] <juanfra> created*

[21:20] *** wingfold joined
[21:23] *** wingfold left
[21:28] *** Doc_Holliwood left
[21:36] <Xliff> OK. I'm looking at it now (at least trying to)

[21:36] <Xliff> Is there an interactive version of DDT?

[21:56] *** juanfra left
[21:56] *** demostanis[m] left
[21:56] *** CIAvash left
[21:56] *** CIAvash joined
[21:57] *** demostanis[m] joined
[21:57] *** juanfra joined
[22:10] *** espadrine left
[22:38] *** jmcgnh left
[22:40] *** jmcgnh joined
[22:47] *** rbt joined
[22:48] *** patrickb left
[23:36] *** bd3i joined
[23:49] <raydiak> bisectable6: 0 ==> say

[23:49] <bisectable6> raydiak, Will bisect the whole range automagically because no endpoints were provided, hang tight

[23:49] <bisectable6> raydiak, Output on all releases: https://gist.github.com/a4929ed486581532d63f20cb2984835a

[23:49] <bisectable6> raydiak, Bisecting by output (old=2020.06 new=2020.07) because on both starting points the exit code is 1

[23:50] <bisectable6> raydiak, bisect log: https://gist.github.com/47390fc821382a766fbdbadcce80e7f9

[23:50] <bisectable6> raydiak, (2020-07-05) https://github.com/rakudo/rakudo/commit/56e5f7dc433520ed0cf98d4e20f24758c6d381d8

[23:50] <bisectable6> raydiak, Bisecting by output (old=2019.11 new=2020.01) because on both starting points the exit code is 1

[23:50] <bisectable6> raydiak, bisect log: https://gist.github.com/95bbc1acc7a52e8f5ca5a4dc870a8a0d

[23:50] <bisectable6> raydiak, (2019-12-31) https://github.com/rakudo/rakudo/commit/604ca34a499866047a2193a1ee401c7981133493

[23:51] <bisectable6> raydiak, Bisecting by output (old=2017.02 new=2017.03) because on both starting points the exit code is 1

[23:51] <bisectable6> raydiak, bisect log: https://gist.github.com/478b6da6d472e9faf4d2f3003e8b94ea

[23:51] <bisectable6> raydiak, (2017-02-27) https://github.com/rakudo/rakudo/commit/6cb9be294de91c1210560f586ab1e03807239dc9

[23:51] <bisectable6> raydiak, ⚠ New output detected, please review the results manually

[23:51] <bisectable6> raydiak, Output on all releases and bisected commits: https://gist.github.com/a30a80e2ce30af207d2f2f31e4111e74

