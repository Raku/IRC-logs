[00:02] *** RobRaku left
[00:25] *** shan left
[00:31] *** pecastro left
[00:34] <SmokeMachine> .tell niner it‚Äôs probably not that helpful, but I had played with libgccjit before, if it‚Äôs somehow helpful... https://github.com/FCO/bernalang/blob/machine-code/lib/GccJit.pm6

[00:34] <tellable6> SmokeMachine, I haven't seen niner around, did you mean nine?

[00:38] *** cydf left
[01:25] *** shan joined
[01:39] *** shan left
[01:40] *** marcusr left
[01:41] *** marcusr joined
[02:17] *** kvw_5 joined
[02:19] *** JRaspass left
[02:20] *** kvw_5_ left
[03:20] *** bisectable6 left
[03:20] *** nativecallable6 left
[03:20] *** shareable6 left
[03:20] *** coverable6 left
[03:20] *** greppable6 left
[03:20] *** tellable6 left
[03:20] *** benchable6 left
[03:20] *** unicodable6 left
[03:20] *** squashable6 left
[03:20] *** evalable6 left
[03:20] *** sourceable6 left
[03:21] *** benchable6 joined
[03:21] *** bisectable6 joined
[03:22] *** squashable6 joined
[03:22] *** sourceable6 joined
[03:22] *** evalable6 joined
[03:22] *** tellable6 joined
[03:22] *** coverable6 joined
[03:23] *** greppable6 joined
[03:23] *** nativecallable6 joined
[03:23] *** unicodable6 joined
[03:23] *** shareable6 joined
[03:24] *** rindolf joined
[04:24] *** benchable6 left
[04:24] *** bisectable6 left
[04:24] *** sourceable6 left
[04:24] *** releasable6 left
[04:24] *** coverable6 left
[04:24] *** evalable6 left
[04:24] *** shareable6 left
[04:24] *** greppable6 left
[04:24] *** nativecallable6 left
[04:24] *** tellable6 left
[04:24] *** unicodable6 left
[04:24] *** squashable6 left
[04:24] *** quotable6 left
[04:24] *** notable6 left
[04:24] *** linkable6 left
[04:24] *** bloatable6 left
[04:24] *** committable6 left
[04:24] *** statisfiable6 left
[04:24] *** squashable6 joined
[04:24] *** shareable6 joined
[04:25] *** tellable6 joined
[04:25] *** committable6 joined
[04:25] *** sourceable6 joined
[04:25] *** coverable6 joined
[04:25] *** greppable6 joined
[04:26] *** quotable6 joined
[04:26] *** bloatable6 joined
[04:26] *** linkable6 joined
[04:26] *** evalable6 joined
[04:26] *** bisectable6 joined
[04:27] *** benchable6 joined
[04:27] *** nativecallable6 joined
[04:27] *** statisfiable6 joined
[04:27] *** unicodable6 joined
[04:27] *** notable6 joined
[04:27] *** releasable6 joined
[04:29] *** _jrjsmrtn joined
[04:31] *** __jrjsmrtn__ left
[04:53] *** epony left
[05:27] *** kaiwulf left
[05:39] *** parabolize left
[06:01] *** db48x left
[06:03] *** aindilis` joined
[06:05] *** aindilis left
[06:10] *** aindilis` left
[06:56] *** ufobat joined
[07:01] *** brtastic joined
[07:01] *** jmerelo joined
[07:15] *** wamba joined
[07:25] *** domidumont joined
[07:32] *** ilhud9s joined
[07:33] *** stoned75 joined
[07:36] *** ilhud9s left
[07:59] *** sjm_uk joined
[08:02] *** ufobat left
[08:06] *** Garbanzo left
[08:09] *** Garbanzo joined
[08:14] *** abraxxa joined
[08:15] *** jmerelo left
[08:15] *** jmerelo joined
[08:16] *** Garbanzo left
[08:21] *** abraxxa left
[08:24] *** abraxxa joined
[08:29] *** gnufr33dom left
[08:31] *** Altai-man_ left
[08:31] *** jmerelo left
[08:37] *** vike left
[08:40] *** gnufr33dom joined
[08:44] *** Sgeo left
[08:47] *** jmerelo joined
[08:56] *** vrurg_ joined
[08:58] *** vrurg left
[09:00] *** fluca1978 joined
[09:00] <fluca1978> I'm getting an error I cannot understand: I try to insert an element in ordered array of integers

[09:00] <fluca1978>     given @N.grep: { $_ >= $N }, :k { @N = |@N[ 0 .. $_ - 1 ], $N, |@N[ $_ .. * ]; @N.say; exit; }

[09:00] <fluca1978> but I got "Seq objects are not valid endpoints for Ranges"

[09:01] <fluca1978> so I suspect I cannot change @N while `given`ing it, but I don't understand the error.

[09:02] *** ufobat joined
[09:04] *** vike joined
[09:07] *** sena_kun joined
[09:09] <fluca1978> got it, it was simple: `grep` is returning a list, so I need to get the very first element by means of adding .first

[09:19] <jmerelo> fluca1978: great you found it. I would encourage you to post questions also in StackOverflow. It's quieter than it should be...

[09:21] *** gnufr33dom left
[09:22] *** JRaspass joined
[09:25] <fluca1978> jmerelo: I will try but I'm not a great stack overflow fan

[09:28] *** aindilis joined
[09:31] *** MasterDuke joined
[09:40] <elcaro> fluca1978: instead of @N.grep(EXPR).first, in most cases you can just do @N.first(EXPR)

[09:44] *** avar joined
[09:48] *** Scimon joined
[09:49] *** dakkar joined
[09:50] <fluca1978> elcaro: thanks, I think I'm addicted to grep!

[10:10] *** pecastro joined
[10:10] *** MasterDuke left
[10:19] <lizmat> fluca1978: alternately, you can do "last" in a .grep

[10:20] *** MasterDuke joined
[10:25] *** wamba left
[11:06] *** wamba joined
[11:09] *** avar left
[11:09] *** avar joined
[11:12] *** cydf joined
[11:15] *** PimDaniel joined
[11:15] <PimDaniel> \o

[11:17] <PimDaniel> What's the hell to export constants or variables when they are into a module, i mean without writing 'is export' but with EXPORT sub?

[11:18] <PimDaniel> I need to export and/or export_ok like it was done in p5.

[11:19] <PimDaniel> I'v observe it works when there's no module i mean no module mymodule {  nor unit module mymodule;

[11:20] <PimDaniel> but i do need a module just to preserve namespaces

[11:26] <jmerelo> Hi, PimDaniel 

[11:26] <lizmat> the most common gotcha with writing an EXPORT sub, is that it needs to be in the compunit's namespace

[11:27] <lizmat> class A { sub EXPORT { } } won't cut it

[11:27] <lizmat> it would need to be

[11:27] <lizmat> class A { }  sub EXPORT { }

[11:28] <jmerelo> PimDaniel: additionally to what lizmat says, check out the documentation https://docs.raku.org/language/modules#index-entry-sub_EXPORT

[11:30] <PimDaniel> I'v allway look at this doc and it does not help me.

[11:31] <PimDaniel> s/allway/allready/

[11:32] <PimDaniel> Theses cases do not work for what i want to do.

[11:34] <jmerelo> PimDaniel: I'd appreciate if you raised that issue in the documentation repo

[11:35] <lizmat> PimDaniel: this may be overkill for you, but maybe it could help: https://github.com/lizmat/List-AllUtils/blob/master/lib/List/AllUtils.pm6

[11:35] <lizmat> it;s an example of a module re-exporting symbols from other modules

[11:37] <PimDaniel> :lizmat thank's for your help!

[11:37] <PimDaniel> :jmerelo , thank's tooo!

[11:39] <PimDaniel> Reference is not really well organize but it think the problem is Raku. Really that part is not easy at all and i really wonder why.

[11:41] <PimDaniel> In perl5 it was yet bullshit, sorry but... it is still.

[11:50] <elcaro> PimDaniel: For selective exporting of subs (like EXPORT_OK) there's Exportable on the ecosystem 

[11:50] <elcaro> full disclosure: I wrote that module. 

[11:51] <elcaro> Exportable needs to be imported outside of the class you're using it in (probably for the same namespacing issues lizmat mentioned)

[11:51] <elcaro> but unfortunately won't help you exporting constants/vars

[11:52] <elcaro> but yes, I feel writing an EXPORT sub is low-level plumbing. It could probably be improved... and you're welcome to dig your teeth into it

[11:53] <elcaro> you could try writing some sugar around exporting vars (like Exportable does for subs)

[11:59] <elcaro> supporting selecting imports should be made easier in general. unfortunately, the path of least resistence is just doing `is export` and polluting the importers namespace

[12:00] <elcaro> Sorry... diggin' up old wounds :D I complained about this a couple years back https://0racle.info/articles/exportation_exploration

[12:04] *** epony joined
[12:08] <PimDaniel> elcaro: Thanks! I look at your article.

[12:10] <elcaro> I should go back through all my old blog posts and change Perl 6 to Raku

[12:29] <lizmat> elcaro: I've been meaning to do this more generally

[12:34] <lizmat> glad to see more people having the same idea

[12:43] <elcaro> at the very least, it should provide more "Raku" hits for the Google spider

[12:43] <lizmat> indeed

[12:44] <lizmat> something like a "remastered" edition of these blog posts

[12:44] <lizmat> not unlike the re-issue of Wendy Carlos' work  :-)

[12:45] <lizmat> or The Hype -> U2  :-)

[12:51] *** brtastic left
[12:52] *** cydf left
[13:35] *** MasterDuke left
[13:35] *** MasterDuke joined
[13:45] *** PimDaniel left
[13:48] *** dakkar left
[13:48] *** dakkar joined
[13:48] *** PimDaniel joined
[13:48] <PimDaniel> why \o

[13:48] <PimDaniel> \o

[13:49] <lizmat> 42

[13:50] <PimDaniel> where can i found many example on "str".match method. And why does "MSTR".match(/^[A-Z]$/) does not work?

[13:51] <MasterDuke> that's looking for exactly one character

[13:51] <PimDaniel> Where is doc about regexes with exhausted  examples in ordre to understand something?

[13:51] <MasterDuke> m: "MSTR".match(/^[A-Z]+$/)

[13:51] <evalable6> MasterDuke, rakudo-moar f627ccb90: OUTPUT: ¬´(exit code 1) 04===SORRY!04===‚ê§Un‚Ä¶¬ª

[13:51] <evalable6> MasterDuke, Full output: https://gist.github.com/1e398b56d9718f9224b8b8f4a35196e6

[13:52] <Scimon> m: "MSTR".match( /^ [A .. Z]+ $/ )

[13:52] <evalable6> Scimon, rakudo-moar f627ccb90: OUTPUT: ¬´¬ª

[13:52] <PimDaniel> moi@DebianMsrv64:~/raku$ moi@DebianMsrv64:~/raku$ 

[13:52] <Scimon> m: "MSTR".match( /^ <[A .. Z]>+ $/ )

[13:52] <evalable6> Scimon, rakudo-moar f627ccb90: OUTPUT: ¬´¬ª

[13:52] <PimDaniel> re '"MSTR".match(/^[A-Z]+$/)' ------> "MSTR".match(/^[A‚èè-Z]+$/) : BANG!

[13:53] <PimDaniel> Unable to parse expression in metachar:sym<[ ]>; couldn't find final ']' (corresponding starter was at line 1)

[13:53] <Scimon> You don't use `-` in a Raku regex. 

[13:53] *** brtastic joined
[13:53] <MasterDuke> "Searching and Parsing with Perl 6 Regexes" by moritz is good

[13:54] <PimDaniel> so re '"MSTR".match(/^[AZ]+$/).say' -> Nil

[13:54] <PimDaniel> Does NOT match.

[13:54] <Scimon> m: "MSTR".match( /^ <[A .. Z]>+ $/ ).say

[13:54] <evalable6> Scimon, rakudo-moar f627ccb90: OUTPUT: ¬´ÔΩ¢MSTRÔΩ£‚ê§¬ª

[13:56] <PimDaniel> works but , tell me : spaces are no more take in account?

[13:56] <PimDaniel> *taken

[13:56] <PimDaniel> And character classes are suppressed?

[13:56] <MasterDuke> not by default. it's like the /x modifier in perl5 regexes

[13:57] <PimDaniel> Ok so flag /x is enable by default? 

[13:57] <MasterDuke> yeah

[13:57] <PimDaniel> ok ok

[13:57] <Scimon> https://docs.raku.org/language/regexes#Enumerated_character_classes_and_ranges : Sorry. Meeting can't handle more.

[13:58] <PimDaniel> :Scimon thank's...

[13:58] *** JRaspass left
[14:01] <JJAtria[m]> m: my %a = gather with "foo" { take "literal" => $_ }; dd %a

[14:01] <evalable6> JJAtria[m], rakudo-moar f627ccb90: OUTPUT: ¬´Hash %a = {:literal("foo")}‚ê§¬ª

[14:01] <JJAtria[m]> m: my %a = gather with "foo" { take literal => $_ }; dd %a

[14:01] <evalable6> JJAtria[m], rakudo-moar f627ccb90: OUTPUT: ¬´(exit code 1) Unexpected named argument 'literal' passed‚ê§  in code  at /tmp/kjdTKk5MfD line 1‚ê§  in block <unit> at /tmp/kjdTKk5MfD line 1‚ê§‚ê§¬ª

[14:01] <JJAtria[m]> ^ Any idea why this is? It took me by surprise

[14:11] <moritz> you've called take() with named arguments, but it doesn't like that

[14:11] <MasterDuke> it's something about how the unquoted version creates a Pair

[14:11] <moritz> correct

[14:11] <moritz>  m: my %a = gather with "foo" { take (literal => $_) }; dd %a

[14:11] <evalable6> moritz, rakudo-moar f627ccb90: OUTPUT: ¬´Hash %a = {:literal("foo")}‚ê§¬ª

[14:11] <moritz> another way to avoid it being interpreted as a named arg

[14:12] <JJAtria[m]> I guess what took me by surprise was that quoting the key would make the pair not be a named argument for "take" but the pair that needs to be taken

[14:12] <JJAtria[m]> I wouldn't have expected it to have an effect

[14:14] <JJAtria[m]> And I'm not sure I can justify why it does make a difference

[14:29] <PimDaniel> Hi :

[14:30] <lizmat> I think in a future language version, we should consider making a difference between named parameters and Pair syntax

[14:31] <lizmat> and force :foo(value) for named parameters

[14:31] <PimDaniel> Hi! what is IRC command that you use and makes my Nick appear Highlighted?, Thanks!

[14:31] <lizmat> PimDaniel: start the line with "/me" ?

[14:32] <PimDaniel> lizmat: thank's!

[14:33] <PimDaniel> .beer lizmat

[14:34] <PimDaniel> doesn't work :(! No beer : sorry!

[14:35] * PimDaniel thank's 

[14:35] <PimDaniel> hum i suppose it works. 

[14:38] *** aindilis left
[14:40] *** PimDaniel left
[14:40] <lizmat> it's really a function of the IRC client that you use

[15:03] *** gnufr33dom joined
[15:17] *** wamba left
[15:17] *** Sgeo joined
[15:23] *** RaycatWh` joined
[15:23] *** RaycatWh` is now known as Raycat|Work

[15:34] *** JRaspass joined
[15:43] *** parabolize joined
[15:57] *** wamba joined
[16:09] *** b2gills left
[16:18] <lizmat> yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/02/01/2021-05-gsoc-proposing/

[16:23] <sjn> yay!

[16:24] *** Raycat|Work left
[16:29] <jmerelo> lizmat++

[16:33] *** rindolf left
[16:44] *** b2gills joined
[16:54] *** [Coke] joined
[17:08] *** PimDaniel joined
[17:09] <PimDaniel> \o

[17:09] <PimDaniel> what is the default tag for is import?

[17:10] <PimDaniel> The problem is when i import things on the use Line, all is import things are not imported anymore. :(.

[17:10] <PimDaniel> use TestImports :DEFAULT , <TOTITOTO INTER WANDER>;

[17:11] <PimDaniel> The things into list are module constants.

[17:12] <PimDaniel> The problem is when i import things on the use Line, all "is import" things are not imported anymore. :(

[17:14] <PimDaniel> Undeclared routine: bar used at line 11. :(

[17:19] <PimDaniel> hooo sorry : it works! tests are difficult to do anyway!

[17:28] *** domidumont left
[17:37] *** dakkar left
[17:44] *** MasterDuke left
[17:48] *** natrys joined
[17:49] *** domidumont joined
[17:56] *** PimDaniel left
[18:05] *** domidumont left
[18:08] *** perry left
[18:08] *** perryprog joined
[18:09] *** daxim left
[18:09] *** perryprog is now known as perry

[18:21] *** aindilis joined
[18:22] *** daxim joined
[18:23] *** rindolf joined
[18:24] *** Scimon left
[18:27] <[Coke]> "has anyone seen Perry?"

[18:27] <perry> Noooo

[18:27] <[Coke]> (/phinneas-and-ferb)

[18:28] <[Coke]> oops, phineas.

[18:33] *** Garbanzo joined
[18:35] *** PimDaniel joined
[18:36] <PimDaniel> \o

[18:36] <PimDaniel> Yet another problem that stucks me.

[18:38] * PimDaniel lizmat: i watched your examples of code.

[18:40] <PimDaniel> Here is my question : How could i export 50 Constant living into a module calling a TAG on the script side?

[18:41] <PimDaniel> i mean without writing is export(:mytag) on each constant.

[18:41] <PimDaniel> Oh sorry : the day is Monday. i'v forgotten. 

[18:43] *** _jrjsmrtn left
[18:43] *** stoned75 left
[18:47] <[Coke]> Are you not allowed to ask questions on Monday? :)

[18:48] <[Coke]> PimDaniel: so, if you want your export to follow your rules and not "is export", then you can create a sub EXPORT in your module (https://docs.raku.org/language/modules#index-entry-sub_EXPORT)

[18:49] <[Coke]> (er, it's in the compunit of your module, not the module itself, I think)

[18:50] *** mowcat joined
[18:50] <[Coke]> so then you can either put the constants in there by name, or dynamically get the list of constants somehow. If you are exporting all constants, that's probably straightforward - if you want to discriminate... 'is export' may be just as much typing.

[18:52] *** stoned75 joined
[18:54] <PimDaniel> Thank's Coke. I allready know how to bind variables with EXPORT sub.

[18:54] <PimDaniel> what i want is group them into tags because thez are many.

[18:54] <PimDaniel> and i want to group them.

[18:56] *** __jrjsmrtn__ joined
[18:56] <PimDaniel> but without is export(':TAG') which is silly. Anyway all export will allways be bullshit in all Perl/Raku versions.

[18:57] <PimDaniel> I think those that made it like masturbation.

[18:57] <PimDaniel> You need to write lines of code just to export: silly tricky!

[19:02] <PimDaniel> I should say that thinks are still more complicated than in p5.

[19:07] *** xelxebar_ left
[19:12] *** xelxebar joined
[19:19] *** RaycatWhoDat joined
[19:19] <RaycatWhoDat> QQ: Is there a more succinct version of this: https://glot.io/snippets/fvh9phcmda

[19:20] <RaycatWhoDat> I know it's pretty close right now but I just wanna make sure there's no Raku magic I can use in lieu of this.

[19:23] *** vrurg_ is now known as vrurg

[19:24] *** vrurg left
[19:25] *** __jrjsmrtn__ left
[19:31] *** __jrjsmrtn__ joined
[19:31] *** MasterDuke joined
[19:32] <tonyo> RaycatWhoDat: is `E` not the next grade?

[19:32] *** gnufr33dom left
[19:32] <RaycatWhoDat> tonyo: probably

[19:33] <RaycatWhoDat> I'm just guessing at the prompt from a glance in an email, lol

[19:36] *** jmerelo left
[19:38] *** MasterDuke left
[19:41] *** MasterDuke joined
[19:42] *** gurmble joined
[19:45] *** gurmble is now known as grumble

[19:51] <tonyo> m: sub grade(Int() $a) { qw<E E E E E E D C B A A>[max(min(100, $a),0)/10]; }; grade(5000).say; # this is a more succinct way of getting a letter grade

[19:51] <evalable6> tonyo, rakudo-moar 0f5272cdc: OUTPUT: ¬´A‚ê§¬ª

[19:51] <tonyo> RaycatWhoDat: ^

[19:53] *** ufobat_ joined
[19:53] *** sjm_uk left
[19:55] *** natrys left
[19:57] *** ufobat left
[20:00] *** vrurg joined
[20:00] *** vrurg left
[20:05] *** neshpion joined
[20:08] <tonyo> m: sub grade(Int() $a) { qw<E D C B A>[(max(min(90, $a),59)-50)/10]; }; grade(100).say; # even better RaycatWhoDat 

[20:08] <evalable6> tonyo, rakudo-moar 0f5272cdc: OUTPUT: ¬´A‚ê§¬ª

[20:10] <neshpion> wouldn't it be <F D C B A>

[20:14] *** tejr left
[20:17] *** tejr joined
[20:19] *** Some-body_ joined
[20:22] <tonyo> not if you grew up somewhere that knows the order of the alphabet

[20:23] *** PimDaniel left
[20:23] *** vrurg joined
[20:26] *** releasable6 left
[20:26] *** notable6 left
[20:26] *** statisfiable6 left
[20:26] *** nativecallable6 left
[20:26] *** bisectable6 left
[20:26] *** linkable6 left
[20:26] *** quotable6 left
[20:26] *** greppable6 left
[20:26] *** shareable6 left
[20:26] *** squashable6 left
[20:26] *** DarthGandalf left
[20:26] *** BarrOff[m] left
[20:26] *** Some-body_ is now known as DarthGandalf

[20:32] *** ufobat_ left
[20:35] *** BarrOff[m] joined
[20:47] <[Coke]> seeing a very slow module 'use' time for a not-very-complicated module of about 30 lines. https://gist.github.com/coke/7d6cac113a7fa46cb1e67b9b9a38c023

[20:47] *** rindolf left
[20:48] <[Coke]> I get that time with multiple runs of the .t file - so the .pm should already be compiled.

[21:01] *** finsternis left
[21:03] *** mowcat left
[21:14] *** Garbanzo left
[21:14] *** Garbanzo joined
[21:15] *** shareable6 joined
[21:16] *** greppable6 joined
[21:16] *** bisectable6 joined
[21:16] *** squashable6 joined
[21:16] *** releasable6 joined
[21:16] *** nativecallable6 joined
[21:17] *** linkable6 joined
[21:17] *** quotable6 joined
[21:17] *** notable6 joined
[21:17] *** statisfiable6 joined
[21:22] *** Celelibi joined
[21:48] *** marcusr left
[21:48] *** MasterDuke left
[21:50] *** marcusr joined
[21:54] *** brtastic left
[22:01] *** kaiwulf joined
[22:10] <[Coke]> nine guessed "too many files in lib", and yes, there were over 9K due to a cache of compiled POD files.

[22:11] <[Coke]> moved the cache out of lib, all is well

[22:36] *** wamba left
[23:14] <neshpion> why is $HOSTNAME defined in my shell but is uninitialized under raku and returns (Any) ?

[23:14] <neshpion> i thought it would inherit all environment variables D:

[23:16] <neshpion> and apparenlty i can't `say "{shell "hostname"}";` either because it returns "Proc<\d+>` D: reee i just want to simulate my $PS1

[23:18] <neshpion> fwiw i installed via rakubrew i don't know if it uses a shim that nukes my env before executing or something

[23:23] *** Garbanzo left
[23:23] *** Garbanzo joined
[23:41] *** Garbanzo left
[23:57] *** Black_Ribbon joined
[23:57] *** neshpion left
