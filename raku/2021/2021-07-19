[08:26] *** Geth joined
[08:32] <moon-child> ways, so the empty string is whitespace?  I find that counterintuitive

[08:35] <SmokeMachine> no...

[08:36] <SmokeMachine> but <ws> matches 0, 1 or more white spaces, that's matching 0 spaces

[08:36] <moon-child> right

[08:43] <SmokeMachine> and because it matches 0 spaces it do not move forward... so it will match for ever...

[09:03] *** charsbar left
[09:04] *** charsbar joined
[09:12] *** jmcgnh left
[09:41] <mykhal> But it's just a pattern. Either should match or not, and not try to match forever

[09:43] <mykhal> is perl -e 'print "" =~ /^^/' should also nahg ?

[09:43] <moon-child> what do you think "" ~~ /[.*]*/ should do?

[09:43] <mykhal> s/is//; s/nahg/hang/

[09:48] <mykhal> initiallly i'd think that special meaning would be switched to literary in []

[09:49] *** jmcgnh joined
[09:50] <mykhal> i'll think more afte ma after-vacc sleep

[09:55] *** lealnie joined
[10:13] *** hankache joined
[10:36] *** silug2 joined
[10:36] *** silug left
[10:36] *** silug2 is now known as silug

[10:39] *** rba[m] joined
[10:56] *** hankache left
[11:01] *** sena_kun joined
[11:06] <raydiak> imo, a quantified construct matching nothing should only match once in a particular string position. this also seems to be how p5 behaves. that said, not everyone agrees, and this is a known behavior with a closed issue: https://github.com/rakudo/rakudo/issues/4438

[11:17] <Geth> ¬¶ problem-solving/master: 5 commits pushed by (Daniel Sockwell)++, (Juan Juli√°n Merelo Guerv√≥s)++, (Elizabeth Mattijsen)++

[11:17] <Geth> ¬¶ problem-solving/master: e43a7a59a4 | clarify PS process in README 

[11:17] <Geth> ¬¶ problem-solving/master: fe9d5ca876 | Address some comments.

[11:17] <Geth> ¬¶ problem-solving/master: a91a274442 | Resolve remaining comments

[11:17] <Geth> ¬¶ problem-solving/master: e84670523f | :pencil2:

[11:17] <Geth> ¬¶ problem-solving/master: 8de09b2f29 | Merge pull request #289 from Raku/clarify-readme

[11:17] <Geth> ¬¶ problem-solving/master: review: https://github.com/Raku/problem-solving/compare/72008265ffb5...8de09b2f29c8

[11:19] * abraxxa is watching Liz FOSDEM talk on sets. Is there really no ascii equivalent of the negated set operators?

[11:20] <lizmat> !(elem)

[11:20] <lizmat> prefix with !

[11:21] <lizmat> I guess we could consider something like (!elem)

[11:22] <abraxxa> I see, thanks! Junst wondered because you didn't include them in the slides

[11:23] <lizmat> m: sub infix:<(!elem)>(\a,\b) { !(a (elem) b) }; dd 42 (!elem) ^10

[11:23] <camelia> rakudo-moar a2faac4bd: OUTPUT: ¬´Bool::True‚ê§¬ª

[11:23] <abraxxa> why does a union of two arrays not return an array but a set?

[11:23] <abraxxa> I prefer the negation before the operator instead of another operator

[11:24] <lizmat> because it is a *set* operator, which always at least returns a Set

[11:24] <abraxxa> is there an operator for joining arrays too?

[11:24] <lizmat> define joining ?

[11:24] <abraxxa> concatenate

[11:26] <lizmat> m: my @a = ^5; my @b = 42,666; @a .= append: @b; dd @a

[11:26] <camelia> rakudo-moar a2faac4bd: OUTPUT: ¬´Array @a = [0, 1, 2, 3, 4, 42, 666]‚ê§¬ª

[11:26] <abraxxa> like append does

[11:26] <lizmat> or just .append  :-)

[11:27] <abraxxa> so no operator, only the method?

[11:28] <lizmat> well, depends...

[11:29] <abraxxa> what Bruce Gray said in his 'Raku, the Big' talk is what I'm thinking since years: there needs to a best practise guide for what way to use when

[11:30] <abraxxa> why operators when there a methods for all those things? They are just hard to remember, I guess hard to suggest for a text editor and aren't as easy to understand for novices

[11:32] <abraxxa> what helped me in Perl 5 to remember the sigils when I learned it back then was the explanation why the characters where chosen:  like % looks like key / value

[11:32] <lizmat> m: sub infix:<@>(\a,\b) { slip(|a,|b) }; .say for 42,666 @ ^10

[11:32] <camelia> rakudo-moar a2faac4bd: OUTPUT: ¬´42‚ê§666‚ê§0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[11:32] <sena_kun> I don't think operators are not easy to understand for novices, people are just ok with "5 + 5" and it is far easier to them than "5.add(5)".

[11:32] <abraxxa> (|) for union seems weird to me, I would have expected to be (~) because ~ is used to join strings

[11:33] <abraxxa> sena_kun: for mathematics everybody is used to it

[11:33] <sena_kun> I do agree there is a place for the tool and when the syntax complexity goes overboard, that's a bad thing in general

[11:33] <lizmat> abraxxa: | is "or", so it indicates elems that are either on left *or* right 

[11:33] <abraxxa> yes, I was also thinking  

[11:33] <lizmat> (&) indicates elems that are on both sides, as & is "and"

[11:34] <abraxxa> 'or' when I've seen it but couldn't find an explanation as what an or has to do with joining

[11:34] <abraxxa> lizmat: that explanation absolutely makes sense, thank you! Can it be included in the docs?

[11:41] <lizmat> abraxxa: probably, if someone (you?) makes a PR for that? https://github.com/Raku/doc/pulls

[11:51] *** juanfra left
[11:51] *** happy-dude left
[11:51] *** demostanis[m] left
[11:51] *** AlexDaniel left
[11:51] *** cnx left
[11:51] *** CIAvash left
[11:51] *** aolko[m] left
[11:51] *** littlebenlittle[ left
[11:51] *** rba[m] left
[11:53] *** juanfra joined
[11:57] *** demostanis[m] joined
[11:57] *** AlexDaniel joined
[11:57] *** cnx joined
[11:57] *** happy-dude joined
[11:58] *** littlebenlittle[ joined
[11:58] *** aolko[m] joined
[11:58] *** CIAvash joined
[11:58] *** rba[m] joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:23] *** MasterDuke left
[12:38] *** Eddward_ joined
[12:56] *** TempIRCLogger joined
[13:08] *** dogbert17 left
[13:09] *** TempIRCLogger left
[13:12] *** dogbert17 joined
[13:16] *** MasterDuke joined
[13:17] *** lealnie left
[13:38] *** Sgeo joined
[13:55] *** Kaiepi left
[13:55] *** Kaiepi joined
[14:31] <abraxxa> how is the Whatever * different from $_? Your example at 41:47 includes .sort(-*.value), .sort(-$_.value) would also make sense for me as $_ is the topic variable which gets set to each element of the array

[14:31] <Altreus> I'm pretty sure that has to be .sort({-$_.value})

[14:31] <sena_kun> abraxxa, `$_` won't work, as it is not a block

[14:32] <abraxxa> or asking differently: why was * necessary in addition to $_ for such constructs?

[14:32] <lizmat> what Altreus and sena_kun said :-)

[14:32] <Altreus> which is then .sort({ - .value })

[14:32] <Altreus> * becomes $_ /and makes a block/

[14:32] <Altreus> FSVO "becomes $_"

[14:33] <Altreus> I think of it more as "becomes $^a" ... or $^b or whatever Raku thinks makes sense

[14:33] <abraxxa> FSVO?

[14:34] <abraxxa> {} is a pointy block, right? what type is it when you pass -*.value to sort? I guess sort is a multi-sub?

[14:38] <Altreus> for some values of

[14:38] <Altreus> There's a WhateverCode I think?

[14:38] <Altreus> Ah, it's called Whatever-currying https://docs.raku.org/type/Whatever

[14:39] <Altreus> > which is actually a Block that can be used wherever Callables are accepted

[14:46] <abraxxa> so each literal text becomes a Whatever object?

[14:46] <abraxxa> how can I view pod6?

[14:48] <abraxxa> ah, rakudoc needs to be installed separately...

[14:49] <abraxxa> zef install rakudoc fails tests

[14:52] <abraxxa> lizmat: docs are hard. I've forked the docs repo. Will add some lines but it will need a review.

[14:52] <Altreus> hah, that's a fun one!

[14:53] <Altreus> What tests does it even have? :o

[14:55] *** linkable6 left
[14:55] *** evalable6 left
[14:56] <perlbot> abraxxa pasted a new file at https://perl.bot/p/er7c6f - rakudoc test failure

[14:57] *** linkable6 joined
[14:58] <Altreus> looks like /site became /store perhaps?

[14:58] *** evalable6 joined
[14:58] <ugexe> no, tests would not be assuming the directory of the zef cache directory

[14:59] <ugexe> (also more importantly is no such directory change has every occured in zef, so that couldnt be what they were doing)

[14:59] <ugexe> looks like rakudoc is incorrectly trying to see if modules are installed

[14:59] <ugexe> in rakudo itself

[14:59] <ugexe> which it should also not be doing

[15:00] *** discord-raku-bot left
[15:00] <ugexe> in this case the test is written with the assumption the test dependencies are installed, but they dont have to be (they can be, and are, linked via -I/path/to/lib)

[15:01] *** discord-raku-bot joined
[15:01] <ugexe> t/04-compunit.t should be deleted entirely

[15:01] <Geth> ¬¶ doc: abraxxa++ created pull request #3919: add Set operator character explanations

[15:01] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3919

[15:10] <SmokeMachine> m: my &a = *.self; say &a.^name

[15:10] <camelia> rakudo-moar a2faac4bd: OUTPUT: ¬´WhateverCode‚ê§¬ª

[15:17] <Altreus> surely that is not the way you determine whether a module is installed, whether it needs to or not

[15:38] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/07/19/2021-29-scheduled-to-3/

[15:39] <sena_kun> lizmat++

[15:40] <Altreus> a survey!

[15:40] <Altreus> But the first question is hard

[15:43] <Altreus> kind of weirdly worded throughout tbh

[15:43] <mykhal>  SmokeMachine, moon-child : maybe there shuld be at least some detection and warning for such infinite regex bombs

[15:51] <lizmat> Altreus: you can leave your comments at the end of the survey :-)

[15:51] *** melezhik joined
[15:56] <Altreus> I saw this, but I couldn't articulate them

[16:21] <mykhal> so is there a reson why Raku should explode on /(.*)*/ and Perl not ?

[16:23] <Altreus> empirically, yes, otherwise it wouldn't

[16:25] <mykhal> i mean SHOULD as in e.g. RFC

[16:25] <mykhal> kind of

[16:25] <Altreus> like is it defined in such a way that it would do that?

[16:26] <Altreus> tu m'as pos√© un colle

[16:31] <mykhal> mr armrer, mr cncn

[16:33] <mykhal> Altreus: see several hours above

[16:51] *** evalable6 left
[16:51] *** linkable6 left
[16:52] *** evalable6 joined
[16:53] *** linkable6 joined
[17:05] *** dakkar left
[17:08] <melezhik> .

[17:08] *** melezhik left
[17:45] *** ufobat left
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:21] *** sena_kun left
[18:23] *** Xliff left
[18:44] <gfldex> m: my &b = { ‚Ä¶ }; my &wc = * - 1 + *; my &p = -> { ‚Ä¶ }; (&b, &wc, &p)¬ª.signature¬ª.say;

[18:44] <camelia> rakudo-moar a2faac4bd: OUTPUT: ¬´(;; $_? is raw = OUTER::<$_>)‚ê§(;; $whatevercode_arg_1 is raw, $whatevercode_arg_2 is raw)‚ê§()‚ê§¬ª

[18:45] <gfldex> abraxxa: ^^^ the main difference between Block, pointy block and WhateverCode is the generates Signature. 

[18:45] *** linkable6 left
[18:47] *** linkable6 joined
[19:00] *** notna joined
[19:26] *** dogbert11 joined
[19:27] *** dogbert17 left
[19:27] *** sono joined
[19:28] *** archenoth left
[19:33] *** notna left
[19:43] *** archenoth joined
[19:54] <timo> https://twitter.com/DeepSchneider/status/1417195426877431811

[19:57] <lizmat> yuck  :-)

[20:02] *** archenoth left
[20:03] *** archenoth joined
[20:06] <gfldex> m: constant yES‚ÄæwE‚ÄæcAN = True;

[20:06] <camelia> rakudo-moar e777fc4fc: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing initializer on constant declaration‚ê§at <tmp>:1‚ê§------> 3constant yES7‚èè5‚ÄæwE‚ÄæcAN = True;‚ê§¬ª

[20:06] <gfldex> :-(

[20:06] <gfldex> m: constant term:<yES‚ÄæwE‚ÄætERM> = True;

[20:06] <camelia> rakudo-moar e777fc4fc: ( no output )

[20:07] <gfldex> :-)

[20:07] *** dogbert17 joined
[20:09] *** dogbert11 left
[20:11] *** linkable6 left
[20:11] *** linkable6 joined
[21:11] *** evalable6 left
[21:11] *** linkable6 left
[21:13] *** evalable6 joined
[21:13] *** linkable6 joined
[21:21] *** Manifest0 left
[21:21] *** Manifest0 joined
[21:22] *** MasterDuke left
[21:48] *** jgaz joined
[22:00] *** Doc_Holliwood joined
[22:00] <Doc_Holliwood> any idea why this bugs out?

[22:00] <Doc_Holliwood> m: dd map { .value / .key }, 1 .. * Z=> [\+] 10, 20 ... 90

[22:00] <camelia> rakudo-moar 853dc3936: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing comma after block argument to map‚ê§at <tmp>:1‚ê§------> 3 / .key }, 1 .. * Z=> [\+] 10, 20 ... 907‚èè5<EOL>‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[22:01] *** jgaz left
[22:01] <Doc_Holliwood> i can fix it with parens, i just don't see why they are neccessary here

[22:03] <leont> I guess because the whatever consumes the entire expression on the right hand side

[22:03] <Doc_Holliwood> m: dd map { .value / .key }, 1 .. Inf Z=> [\+] 10, 20 ... 90

[22:03] <camelia> rakudo-moar 853dc3936: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing comma after block argument to map‚ê§at <tmp>:1‚ê§------> 3 .key }, 1 .. Inf Z=> [\+] 10, 20 ... 907‚èè5<EOL>‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[22:03] <Doc_Holliwood> nope

[22:05] <leont> No, it consumes too much on the left side

[22:05] <leont> The entire thing is the whatever expression?

[22:06] <leont> Yeah, if you remove the map you just get a whatever expression, so that conclusion must be correct

[22:07] <leont> No, it's a normal block. I don't know anymore.

[22:29] *** dogbert11 joined
[22:29] *** dogbert17 left
[22:42] *** jmcgnh left
[22:45] <Doc_Holliwood> it seems to think the comma belongs to the list

[22:46] <Doc_Holliwood> m: dd map { .value / .key }, foo => bar, 1 .. Inf Z=> [\+] 10, 20 ... 90

[22:46] <camelia> rakudo-moar 853dc3936: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing comma after block argument to map‚ê§at <tmp>:1‚ê§------> 3 => bar, 1 .. Inf Z=> [\+] 10, 20 ... 907‚èè5<EOL>‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[22:47] *** jmcgnh joined
[23:01] *** archenoth left
[23:07] *** Juerd left
[23:08] *** Doc_Holliwood left
[23:16] *** Juerd joined
[23:33] *** Juerd left
[23:35] *** DocHolliwould joined
[23:40] * DocHolliwould attempts installing Comma on the new M1

