[00:02] *** reportable6 left
[00:09] *** Manifest0 left
[00:27] *** melezhik joined
[00:28] *** melezhik left
[00:46] *** patrickb left
[01:05] *** reportable6 joined
[02:05] *** evalable6 left
[02:05] *** linkable6 left
[02:07] *** linkable6 joined
[02:32] *** frost joined
[03:01] *** jrjsmrtn left
[03:05] *** jrjsmrtn joined
[03:06] <tonyo> tbrowder: you still need someone on a mac to tell you if there's a tls problem?

[04:05] *** linkable6 left
[04:06] *** linkable6 joined
[04:08] *** evalable6 joined
[04:25] *** sftp left
[04:47] *** ajr joined
[04:47] *** ajr left
[04:52] *** MoC_ joined
[04:52] *** MoC left
[05:12] *** ajr joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:41] *** ajr left
[07:22] *** seednode left
[07:23] *** seednode joined
[07:38] *** sftp joined
[07:43] *** abraxxa joined
[07:47] *** tejr joined
[07:47] *** abraxxa left
[07:48] *** abraxxa joined
[07:56] *** Sgeo left
[08:03] *** dogbert17 left
[08:04] *** dogbert17 joined
[08:04] *** frost left
[08:07] *** frost joined
[08:12] *** djerius left
[08:12] *** djerius joined
[09:12] *** linkable6 left
[09:12] *** evalable6 left
[09:34] *** Manifest0 joined
[10:03] *** MasterDuke left
[10:06] *** MasterDuke joined
[10:14] *** linkable6 joined
[10:15] *** evalable6 joined
[10:34] * lizmat clickbaits https://rakudoweekly.blog/2021/11/15/2021-46-cro-once-again/

[10:38] *** sftp left
[11:17] *** xinming__ left
[11:18] *** xinming__ joined
[11:43] <tbrowder>  tonyo: thnx, i'm ok for now, but maybe down the road a ways

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:07] *** gugod left
[12:07] *** gugod joined
[12:10] *** sftp joined
[12:18] *** sm2 left
[12:22] *** stanrifkin joined
[12:23] <stanrifkin> how can i flush or read EOF after prompt call? i've got a loop with "next unless $line"; after a prompt which works. But when i input a EOF the input buffer seems not to be flushed and i've got an infinite loop.

[12:26] <stanrifkin> to be clear: loop { my $line = prompt "input"; next unless $line; ... }

[12:27] <stanrifkin> when i enter ctrl-d -> endless loop

[12:34] <lizmat> and what about "next without $line" ?

[12:34] *** squashable6 left
[12:37] <stanrifkin> same behavior

[12:40] <MasterDuke> or something like `next unless $line or $*IN.eof`?

[12:43] <stanrifkin> same with "uninitialized value" message now

[12:43] <stanrifkin> i tried it with normal perl

[12:43] <stanrifkin> there it works 

[12:45] <stanrifkin> i mean i want a simple input loop which can handle EOF

[12:45] <lizmat> last without $line ?

[12:46] <stanrifkin> lizmat: yes tried that. does also endless prompt loop

[12:46] <lizmat> loop { last without prompt }

[12:46] <lizmat> stops with ctrl-d for me

[12:46] <lizmat> are you on windows by any chance ?

[12:46] <stanrifkin> lizmat: moment...

[12:47] <lizmat> loop { with prompt() { .say } else { last } }

[12:47] <evalable6> lizmat, rakudo-moar 92c490ee4: OUTPUT: ¬´‚ô•ü¶ã Ííõ„é≤‚Çä‚º¶üÇ¥‚ßø‚åü‚ìú‚âπ‚Ñª‚ÄÖ‚Ä¶¬ª

[12:47] <stanrifkin> lizmat: last without $line works

[12:47] <evalable6> lizmat, Full output: https://gist.github.com/cb3c7241d9446d91927825f982f30d14

[12:48] <lizmat> *phew*  :-)

[12:49] <stanrifkin> lizmat: somewhat i need both now. last without and next unless line

[12:50] <stanrifkin> lizmat: in the right order also :)

[12:50] <lizmat> well, check in if you need more eyes  :-)

[12:50] *** Kaiepi left
[12:53] <stanrifkin> lizmat: https://bpa.st/SM3A

[12:54] <lizmat> so what if someone enters "foo" ?

[12:55] <stanrifkin> lizmat: that's ok. i get an runtime type error

[12:55] <lizmat> that's not very user friendly  :-)

[12:55] <stanrifkin> lizmat: i am playing around

[12:56] <lizmat> loop { with prompt -> $guess { if $guess ~~ Int { ... } else { say "a number please" } } else { last }

[12:59] *** Kaiepi joined
[12:59] *** Kaiepi left
[13:00] *** Kaiepi joined
[13:00] *** Kaiepi left
[13:00] *** Kaiepi joined
[13:00] <stanrifkin> with "if $guess ~~ Int" i can check if the input is type conform?

[13:02] *** Kaiepi left
[13:02] *** Kaiepi joined
[13:03] *** Kaiepi left
[13:03] *** Kaiepi joined
[13:04] <lizmat> yes...  prompt will returns an alllomorph IntStr if the string can be evaluated as an Int

[13:04] <lizmat> and that type matches with Int

[13:05] *** Kaiepi left
[13:26] *** Kaiepi joined
[13:50] *** A26F64 joined
[14:08] *** linkable6 left
[14:10] *** linkable6 joined
[14:15] *** linkable6 left
[14:17] *** linkable6 joined
[14:18] *** stanrifkin left
[14:22] *** linkable6 left
[14:24] *** frost left
[14:25] *** linkable6 joined
[15:08] *** gordonfish- joined
[15:09] *** monkey_ joined
[15:10] *** avar left
[15:10] *** gordonfish left
[15:15] *** avar joined
[15:17] *** dogbert17 left
[15:26] *** dogbert17 joined
[15:29] *** ajdplaysalto joined
[15:30] *** ajdplaysalto is now known as Guest9850

[15:34] *** Guest9850 left
[15:36] *** squashable6 joined
[15:41] *** Guest18 joined
[15:41] *** gordonfish- left
[15:43] *** Guest18 left
[15:46] *** Kaiepi left
[15:47] *** Kaiepi joined
[16:00] *** patrickb joined
[16:03] *** gordonfish joined
[16:05] *** monkey_ left
[16:25] *** rypervenche left
[16:32] *** rypervenche joined
[16:59] *** xinming__ left
[17:01] *** xinming__ joined
[17:02] <MasterDuke> codesections: re https://stackoverflow.com/questions/69919007/how-can-i-stop-raku-collapsing-a-list-containing-a-single-list, wouldn't making print_lists's signature `**@input` also be a solution?

[17:12] <[Coke]> I thought the "fix" there was that OP wasn't passing in a list of lists anyway.

[17:13] *** gordonfish left
[17:13] *** gordonfish joined
[17:14] <[Coke]> https://docs.raku.org/language.html - some of the Raku's on this list have TMs, others don't.

[17:14] <[Coke]> lizmat/codesections ^^

[17:15] <lizmat> [Coke]: could you make a doc issue for that ?

[17:15] <MasterDuke> yeah, solution was the wrong word/idea. more like something to point out as relevant

[17:16] <codesections> I don't think we need a ‚Ñ¢ everywhere, though 

[17:17] <[Coke]> https://github.com/Raku/doc/issues/3982

[17:17] <[Coke]> codesections: I'm complaining it's inconsistent, not missing. :)

[17:17] <[Coke]> if there's a method to the usage there, I dont see it.

[17:17] <codesections> from a legal perspective, I think we're fine (not legal advice, etc.) ‚Äì but yeah, visually it's odd/worth fixing :)

[17:18] <[Coke]> 58 instances of Raku, 5 instances of the TM

[17:19] <[Coke]> (2 of those in the menus, so skip those)

[17:24] <lizmat> dinner&

[17:58] *** abraxxa left
[18:02] *** reportable6 left
[18:59] *** tejr left
[19:00] *** tejr joined
[19:03] *** reportable6 joined
[19:25] <Geth> ¬¶ ecosystem: e7141a1e97 | thundergnat++ (committed using GitHub Web editor) | META.list

[19:25] <Geth> ¬¶ ecosystem: Add Math::Root

[19:25] <Geth> ¬¶ ecosystem: 

[19:25] <Geth> ¬¶ ecosystem: Add https://github.com/thundergnat/Math-Root to the ecosystem

[19:25] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/e7141a1e97

[19:43] *** ajr joined
[19:50] <[Coke]> log viewer, how do I search for Tux? if I go to raku-dev, click gear, enter [Tux] in nick(s) and hit submit, I get 2 entries from May & July, nothing from today.

[19:51] *** notna joined
[19:54] <lizmat> https://logs.liz.nl/search.html?query=csv-ip5xs&type=starts-with&nicks=&channel=raku-dev&message-type=&entries-pp=50&from-yyyymmdd=2019-10-13&to-yyyymmdd=2021-11-16

[19:55] <lizmat> that looks like it went fro 1.41 to 1.14 , and from 14.99 to 6.24 ??   for ip5xs ??

[19:56] <lizmat> m: say 6.24 / 14.99

[19:56] <camelia> rakudo-moar 505ffbfa1: OUTPUT: ¬´0.416278‚ê§¬ª

[19:56] <lizmat> m: say 14.99 / 6.24

[19:56] <camelia> rakudo-moar 505ffbfa1: OUTPUT: ¬´2.402244‚ê§¬ª

[19:56] <MasterDuke> i think that's about what nine was expecting

[19:56] <lizmat> 2.4x as fast    nine !!!

[19:59] <[Coke]> lizmat: that URL is searching for text - looks like I can search for the nick 'lizmat' but not '[Tux]'

[19:59] <[Coke]> [Coke] is also empty, Geth has results. Guessing the []'s are being treated specially somehow.

[20:00] <MasterDuke> i think it treats the string as a regex, what if you \ the []?

[20:02] <[Coke]> \[Tux\] also empty

[20:03] <[Coke]> his nick is [Tux], but the hits include "Tux is now known as |Tux|""

[20:03] <[Coke]> will open a ticket.

[20:05] *** ajr left
[20:07] <[Coke]> https://github.com/lizmat/App-Raku-Log/issues/28

[20:10] <lizmat> https://logs.liz.nl/search.html?query=&type=starts-with&nicks=Tux&include-aliases=True&channel=raku-dev

[20:11] <lizmat> [Coke] ^^

[20:14] <[Coke]> lizmat: .. ok. What is a "nick alias" ?

[20:14] <[Coke]> I was searching for exactly the nick I wanted, so didn't think to check that.

[20:14] <lizmat> lizmat_ for lizmat  for instance

[20:15] <[Coke]> ok, but [Coke] is my nick.

[20:15] <[Coke]> not Coke

[20:15] <[Coke]> (unfortunately)

[20:17] *** ajr joined
[20:22] <[Coke]> Thanks for helping me get the search working - added a note to the ticket, but if you close it, no worries. Thanks.

[20:22] *** ajr left
[20:22] <lizmat> yeah, there's something amiss somehow

[20:22] <lizmat> will look at it in depth when my current refactor is done  :-)

[20:33] *** Xliff joined
[20:34] <Xliff> m: my $a; without $a { say 'Unset' } else { 'Set' 

[20:34] <camelia> rakudo-moar 505ffbfa1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§"without" does not take "else", please rewrite using "with"‚ê§at <tmp>:1‚ê§------> 3my $a; without $a { say 'Unset' } else7‚èè5 { 'Set'‚ê§¬ª

[20:41] <codesections> m: say "\t$?TABSTOP"

[20:41] <camelia> rakudo-moar 505ffbfa1: OUTPUT: ¬´        8‚ê§¬ª

[20:42] <codesections> since $?TABSTOP is marked as compile-time, does that mean that expressions like ^^^ might print with a different number of spaces?

[20:42] <codesections> or is it "compile time" in some sort of nested way that means it still has the correct value?

[20:43] <lizmat> good question

[20:43] <lizmat> the current implementation is pretty straightforward in the setting:

[20:43] <lizmat> my constant $?TABSTOP = 8;

[20:44] <lizmat> m: my constant $?TABSTOP = 4;

[20:44] <camelia> rakudo-moar 505ffbfa1: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Constants with a '?' twigil not yet implemented. Sorry.‚ê§at <tmp>:1‚ê§------> 3my constant $?TABSTOP = 47‚èè5;‚ê§¬ª

[20:44] <lizmat> and there's no way to override that at

[20:44] <lizmat> m

[20:44] <codesections> interesting, thanks. 

[20:45] <[Coke]> m: $?TABSTOP=4; #BOOM

[20:45] <camelia> rakudo-moar 505ffbfa1: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:45] <[Coke]> (showing the other end)

[20:45] <lizmat> I'm not sure what the speculation says about that

[20:46] <[Coke]> also: who picked 8, you monster.

[20:47] <codesections> :) agreed 

[20:47] <[Coke]> https://www.emser.com/products/raku?variant=39331898458225

[20:49] *** ajr joined
[20:49] <lizmat> Looks like it was moritz_ in https://github.com/rakudo/rakudo/commit/fa2d53c30c

[20:49] <lizmat> :-)

[20:49] <lizmat> almost 10 years ago now  :-)

[20:53] *** ajr left
[21:03] <Xliff> So... why not $*TABSTOP?

[21:03] <Xliff> So it can be modified, accordingly.

[21:04] <Xliff> I mean... the wrong value could start a centuries long flame-war.

[21:04] <Xliff> :)

[21:05] <lizmat> m: my $*TABSTOP = 4;  # there you go

[21:05] <camelia> rakudo-moar 505ffbfa1: ( no output )

[21:05] *** notna left
[21:06] <Xliff> LOL...

[21:06] <Xliff>  That doesn't affect $?TABSTOP though, which I am assuming is the default expansion for '\t'?

[21:07] <lizmat> I don't think we have tab expansion other than with .indent ?

[21:07] <Xliff> Ah!

[21:11] *** ajr joined
[21:12] <moon-child> should be @*TABSTOPS

[21:18] <[Coke]> lizmat: "\t" ?

[21:18] <[Coke]> *whoops*

[21:41] <moritz_> 9.5 years ago, aw man

[22:09] *** A26F64 left
[22:11] *** sm2 joined
[22:35] *** ajr left
[22:43] *** gcd joined
[22:47] *** ajr joined
[22:58] *** vrurg_ joined
[23:01] *** vrurg left
[23:24] <discord-raku-bot> <Nemokosch#9980> yesterday I posted something in the <#538420565980086273> channel on discord, long story short, there is something weird when using junctions to construct paths

[23:25] <discord-raku-bot> <Nemokosch#9980> I did a check essentially like $object-path.extension('cpp'|'c'|'pcc') ~~ :f

[23:26] <discord-raku-bot> <Nemokosch#9980> and sometimes, under pretty random conditions (e.g this code has run for many files, I ran `git commit` from the script), it threw a warning that during the DESTROY phase, an unhandled exception happened for a .f method call

[23:26] <MasterDuke> Nemokosch: there's currently some debate about whether to disallow junctions on the left-hand side of a smartmatch. i'd suggest trying to rework it so the junction is on the right if possible and see if that's better

[23:27] <MasterDuke> ah, though the unhandled exception business is probably a bug

[23:27] <discord-raku-bot> <Nemokosch#9980> and it would tell me about paths that actually don't exist but could have been tested

[23:28] <discord-raku-bot> <Nemokosch#9980> but yeah I didn't even call .f so I couldn't even catch it üòÑ

[23:28] *** vrurg_ left
[23:28] *** vrurg joined
[23:29] <MasterDuke> well, `~~ :f` is actually calling .f under the hood

[23:29] <discord-raku-bot> <Nemokosch#9980> so are left-hand side junctions known to be troublesome already?

[23:30] <MasterDuke> how much do you want to read? https://github.com/Raku/problem-solving/issues/297

[23:30] <discord-raku-bot> <Nemokosch#9980> uh-oh

[23:30] <discord-raku-bot> <Nemokosch#9980> I mean the syntax itself looks neat but today I surely suspected the problem was related to it...

[23:30] <discord-raku-bot> <Nemokosch#9980> because I had to extend the code in a way that uses nested loops anyway

[23:30] <discord-raku-bot> <Nemokosch#9980> and bang, no more suspicious warnings

[23:31] <MasterDuke> i would guess that the problem you're running into is not necessarily because a junction is on the left, but probably just junction-related in general, but that's just a guess

[23:32] <MasterDuke> do you have a golf so i can try to repro it?

[23:37] *** sm2 left
[23:40] <discord-raku-bot> <Nemokosch#9980> what is a golf when not that Tiger Woods sport?

[23:41] *** Sgeo joined
[23:41] <MasterDuke> short(est) code that demonstrates the problem

[23:42] <MasterDuke> from code golf, solving a problem in the fewest characters

[23:42] <MasterDuke> but no worries, i have something that does get those unhandled failures

[23:43] <discord-raku-bot> <Nemokosch#9980> oh nice üòÑ

[23:48] <MasterDuke> so yeah, the fact that you're using a junction is what's causing them, though not necessarily because it's on the left (i think)

[23:49] <MasterDuke> .f creates a Failure if the file doesn't exist

[23:49] <discord-raku-bot> <Nemokosch#9980> I was just wondering whether this is known/expected behavior as I got more suspicious about the fundamental cause

[23:50] <MasterDuke> which is normally handled by something like `if $file.f`, i.e., the if puts it in boolean "context" and the Failure evaluates to False

[23:50] <discord-raku-bot> <Nemokosch#9980> I can very much sympathise with vrurg's takes under that issue fwiw

[23:52] <MasterDuke> but the junction means you get multiple Failures, (at least some of) which aren't being handled

[23:52] <discord-raku-bot> <Nemokosch#9980> especially with the point that if one wants faster `switch`, maybe it shouldn't be based on a flexible but slow operation - rather than making that operation less flexible and faster universally...

[23:52] <MasterDuke> i go back and forth with each new comment

[23:52] <discord-raku-bot> <Nemokosch#9980> oh okay, it makes some sense

[23:53] <discord-raku-bot> <Nemokosch#9980> the funny thing about this junction smartmatching is that it doesn't seem very deterministic

[23:53] <discord-raku-bot> <Nemokosch#9980> so for example when I made the git commit call in the meantime, it always threw failures

[23:53] <discord-raku-bot> <Nemokosch#9980> but sometimes it also threw without

