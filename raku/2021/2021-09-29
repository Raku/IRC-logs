[00:02] *** reportable6 left
[00:14] *** pierrot left
[00:14] *** pierrot_ joined
[00:29] *** bdju left
[00:54] *** jjido left
[01:05] *** reportable6 joined
[01:48] *** bdju joined
[02:24] *** frost joined
[02:38] *** unixcat647 left
[02:40] *** hyperreal joined
[03:03] *** frost left
[03:28] *** Xliff left
[04:28] *** evalable6 left
[04:28] *** linkable6 left
[05:19] *** xinming left
[05:20] *** xinming joined
[05:24] *** Eddward left
[05:29] *** linkable6 joined
[05:30] *** evalable6 joined
[05:33] *** dwarring left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:10] *** abraxxa joined
[06:15] *** abraxxa left
[06:15] *** abraxxa joined
[07:15] *** nativecallable6 left
[07:15] *** benchable6 left
[07:15] *** linkable6 left
[07:15] *** reportable6 left
[07:15] *** sourceable6 left
[07:15] *** evalable6 left
[07:15] *** squashable6 left
[07:15] *** releasable6 left
[07:15] *** bisectable6 left
[07:15] *** notable6 left
[07:15] *** bloatable6 left
[07:15] *** unicodable6 left
[07:15] *** committable6 left
[07:15] *** greppable6 left
[07:15] *** shareable6 left
[07:15] *** quotable6 left
[07:15] *** tellable6 left
[07:15] *** coverable6 left
[07:15] *** statisfiable6 left
[07:16] *** quotable6 joined
[07:16] *** bisectable6 joined
[07:16] *** coverable6 joined
[07:16] *** linkable6 joined
[07:16] *** evalable6 joined
[07:16] *** releasable6 joined
[07:17] *** tellable6 joined
[07:17] *** nativecallable6 joined
[07:18] *** unicodable6 joined
[07:18] *** bloatable6 joined
[07:18] *** reportable6 joined
[07:56] *** Sgeo left
[08:14] *** dakkar joined
[08:16] *** statisfiable6 joined
[08:17] *** greppable6 joined
[08:17] *** squashable6 joined
[08:22] *** CIAvash left
[08:22] *** AlexDaniel left
[08:22] *** demostanis[m] left
[08:22] *** juanfra left
[08:22] *** cnx left
[08:22] *** happy-dude left
[08:26] *** juanfra joined
[08:37] *** gordonfish left
[08:43] *** gordonfish joined
[08:47] *** AlexDaniel joined
[08:47] *** cnx joined
[08:47] *** happy-dude joined
[08:47] *** demostanis[m] joined
[08:48] *** CIAvash joined
[08:49] *** gordonfish- joined
[08:50] *** gordonfish left
[08:53] *** gordonfish- left
[09:16] *** sourceable6 joined
[09:18] *** committable6 joined
[09:22] *** silug left
[09:22] *** silug7 joined
[09:26] *** silug7 left
[09:28] *** silug joined
[09:32] *** silug left
[09:33] *** silug joined
[09:37] *** silug left
[09:37] *** silug joined
[09:44] *** wz joined
[09:48] *** wz left
[09:50] *** wz joined
[09:50] *** wz left
[10:17] *** jjido joined
[10:17] *** notable6 joined
[10:27] *** Altai-man joined
[10:31] *** jjido left
[11:17] *** benchable6 joined
[11:18] *** shareable6 joined
[11:32] *** squashable6 left
[11:34] *** squashable6 joined
[11:54] *** whatnext joined
[11:55] <whatnext> hello everybody :)  today's question: any idea what would cause this error: "Error while compiling... Cannot find method 'EXISTS-KEY' on 'BOOTHash': no method cache and no .^find_method" ?
[11:56] <whatnext> I have a module that is identical apart from name (boilerplate classes which don't yet have anything much in them) which seems to compile just fine
[11:57] <whatnext> ?
[12:01] *** Xliff joined
[12:02] <[Coke]> No idea, but is your program small enough to show a gist of it?
[12:02] *** reportable6 left
[12:07] <whatnext> actually not really - but hang on I am concocting a snippet
[12:09] <[Coke]> m: 'something small enough to show here?'.say
[12:09] <camelia> rakudo-moar ba15173fd: OUTPUT: «something small enough to show here?␤»
[12:14] <whatnext> https://gist.github.com/whatnext/87c22a266f05d6f799ab5d2b01b610d3
[12:16] <[Coke]> there are multiple 'unit class' in that file?
[12:17] <[Coke]> there are multiple 'unit class' in that file?
[12:17] <[Coke]> (or is that a concat of multiple files?)
[12:18] <lizmat> whatnext: can you run with --ll-exception and gist the backtrace ?
[12:18] <whatnext> they are in separate files - I just put them inline for the gist
[12:22] <whatnext> lizmat I commented the backtrace on the gist 
[12:23] <[Coke]> if you use --ll-exception you'll get a bigger trace.
[12:23] <[Coke]> you *should*, I mean.
[12:23] <lizmat> feels like an issue in Inline::Python ?
[12:24] <whatnext> bigger than the one I posted?
[12:25] *** wz joined
[12:25] <[Coke]> Try it and see.
[12:25] <[Coke]> (but yes)
[12:25] <[Coke]> it reports on things that are "internal"
[12:26] <whatnext> I did use --ll-exception - that's the output I got from doing that
[12:27] <whatnext> lizmat I would be happy to believe it was Inline::Python - but it doesn't seem to throw an error the first time around
[12:27] <lizmat> hmmm
[12:28] <lizmat> must admit I'm too distracted atm to look at it deeper  :-(
[12:28] <whatnext> no worries
[12:28] <whatnext> was just asking in case anyone had seen it before
[12:37] <whatnext> will post a solution if I find one :)
[12:39] <lizmat> m: use nqp; nqp::hash.EXISTS-KEY("a")   # the ultimate golf
[12:39] <camelia> rakudo-moar ba15173fd: OUTPUT: «Cannot find method 'EXISTS-KEY' on 'BOOTHash': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»
[12:39] <lizmat> now, the error is legit: an nqp::hash does not have an EXISTS-KEY method
[12:39] <lizmat> so somewhere an nqp::hash is not being hllized to a Raku Hash object
[12:42] *** clarkema joined
[12:46] *** Eddward joined
[12:53] <wz> We are conducting a research on image label generation on the docker hub platform. We apply natural language processing technology and text mining technology to implement our method.
[12:53] <wz> In order to be able to give a reasonable evaluation to the tags generated by our method, we sincerely hope that you, as the developers of rakudo-star, can make an evaluation. Your evaluation is very important to us.
[12:53] <wz> The tags for rakudo-star are as follows:
[12:53] <wz> compiler, apline, rakudo, perl, development tools, small, virtual machine, linux
[12:53] <wz> If the tags are reasonable or not, please reply in form of, "Good tags: ***, ***; Bad tags: ***, ***"
[12:54] <wz> If the tags are reasonable or not, please reply in form of, "Good tags: ***, ***; Bad tags: ***, ***"
[12:54] <wz> It will be a great help if you can give us a feedback
[12:54] <wz> Thank you so much for you precious time.
[12:57] <lizmat> Bad tags: perl, small
[12:57] <wz> thank you so much
[12:57] <lizmat> wtf is apline ?
[12:57] <whatnext> so lizmat... I'm just trying to understand what that means 
[12:58] <whatnext> so lizmat... I'm just trying to understand what that means 
[12:58] <whatnext> not really being familiar with what's going on under the hood
[12:58] <wz> Damn algorithm generated
[12:59] <lizmat> Good tags: raku, programming language, ecosystem
[13:00] <lizmat> whatnext: something is being naughty using nqp, and has been caught  :-)
[13:00] <lizmat> afk for a few hours&
[13:00] <whatnext> yeah i understood that much
[13:00] <wz> Ha ha
[13:01] <whatnext> but nqp is part of the compiler correct - so just means something went wrong somewhere in the compiler?
[13:02] <wz> maybe
[13:03] *** wz left
[13:09] *** jjido joined
[13:10] *** cnx left
[13:11] *** whatnext left
[13:12] *** jjido left
[13:22] *** patrickb joined
[13:23] *** whatnext joined
[13:27] <[Coke]> I'm guessing a 3rd party module you're using is using nqp internals that it should not be.
[13:28] <[Coke]> m: use nqp; nqp::say(3);
[13:28] <camelia> rakudo-moar ba15173fd: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»
[13:28] <[Coke]> as an example of something you can do from rakudo, using NQP directly, that someone might expect to work but doesn't.
[13:39] *** whatnext left
[14:02] *** Sgeo joined
[14:24] *** gordonfish joined
[14:54] *** xinming left
[14:56] *** xinming left
[14:56] *** xinming joined
[15:05] *** reportable6 joined
[15:08] *** discord-raku-bot left
[15:10] *** discord-raku-bot joined
[15:16] *** patrickb left
[15:18] <ugexe> im guessing its more that they seen to be using `use lib ...` along with dynamically loading modules
[15:18] <ugexe> not that you shouldnt (of course i never `use lib ...`), just that that combination + the stack trace makes it seem like it
[15:25] <discord-raku-bot> <avuserow#1203> lizmat: apline is presumably a typo for alpine, a linux distro that's popular in making minimal docker images
[15:27] *** zacts joined
[15:57] *** ufobat joined
[15:57] *** ufobat left
[16:23] <[Coke]> anyone building from master, new-disp just dropped.
[16:42] *** gordonfish left
[16:44] *** gordonfish joined
[16:49] *** nige joined
[16:49] *** nige left
[16:49] *** nige joined
[16:54] *** dakkar left
[17:01] *** nige left
[17:01] *** nige joined
[17:06] *** nige left
[17:06] *** nige joined
[17:08] <tonyo> new disp?
[17:09] <Altai-man> new disp!
[17:11] <[Coke]> https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/
[17:14] <lizmat> weekly: https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/
[17:14] <notable6> lizmat, Noted! (weekly)
[17:49] <Juerd> So I checked out blead hoping to see some improvements in the regex heavy benchmark that I've been doing
[17:49] <Juerd> But it's really really slow :(
[17:50] <Juerd> 7 seconds with 2021.04 that I had, 43 seconds with current :(
[17:51] <Juerd> Code: https://github.com/Juerd/p6-mqtt/blob/master/t/regex.t
[17:58] *** Altai-man left
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:11] <lizmat> Juerd: that's... disappointing
[18:12] <lizmat> ah...  EVAL $_ ???
[18:13] <Juerd> It's slow all over, not just line 146
[18:13] <lizmat> well... indeed...
[18:14] <lizmat> but what I would do, is set up a list of Captures and pass that to pattern_test ?
[18:14] <Juerd> Oh, there are a gazillion ways to improve the code to make it faster I'm sure
[18:15] <Juerd> But this is a near literal port of Perl code, which makes it suitable for comparisons
[18:16] <lizmat> well... that's debatable...  :-)
[18:16] <Juerd> I'm not saying the Perl original or this port is good code, but it has been my go-to thing to check whether Raku is "ready" yet, for years
[18:17] <Juerd> Because I write many one-offs that do make use of generated regexes, eval, etc, to then process lots of data. That's something I can't do with raku yet :|
[18:17] <Juerd> Well I could perhaps, but I'd have to do everything completely differently
[18:17] <Juerd> In any case, if the regression by itself is not interesting, feel free to ignore it :)
[18:19] <Juerd> This code is basically frozen anyway, I'm probably not going to improve anything ever, since leont's Protocol::MQTT does everything this does, and much more.
[18:19] <Juerd> I haven't tested whether his port of the same tests has improved with new dist - https://github.com/Leont/raku-protocol-mqtt/blob/master/t/01-filter.rakutest
[18:31] *** nige left
[18:31] *** nige joined
[18:35] <lizmat> Juerd: looking at filter-as-regex code: that's basically screaming RakuAST to me  :-)
[18:36] *** nige left
[18:36] *** nige joined
[18:37] <Juerd> Yes, it does
[18:37] <Juerd> But I'm not really interested in fixing this code, no matter how hard it screams
[18:38] <Juerd> For me, it serves a good purpose of being a benchmark, and it's showing a regression
[18:39] *** nige left
[18:40] <lizmat> indeed it does  :-)
[18:40] <lizmat> Juerd: are you aware of the Str.subst method ?
[18:41] <Juerd> I know it exists
[18:42] <lizmat>         $str ~~ s:g[\W+] = "'$/'";
[18:42] <lizmat>         return $str;
[18:42] <lizmat> could be rewritten as: return $str.subst(/\W+/, { "'$/'" }, :global)
[18:42] <Juerd> Look, I'm into timtowtdi, not really into the "there are 15 ways to do this, but only one performs well so I guess you'll have to use that one" :)
[18:43] <Juerd> That's kinda why I'm not using Raku for anything real yet.
[18:45] <lizmat> well, true.  It's just that a lot of worn in Perl habits are counter intuitive wrt performance in Raku
[18:45] <lizmat> like using hashes instead of proper classes
[18:45] <Juerd> I'm hoping it will get there at some point, but I note that whether on irc or reddit or stackoverflow, if someone complains that naively written code performs worse than similar code on another platform, people jump to providing help to improve the code. That's nice, and community wise really cool, but it won't ever scale to anything that can be used in production. No programming language's community
[18:45] <Juerd> can ever scale to fixing everyone's code.
[18:46] <lizmat> that is true...
[18:47] <lizmat> we're all trying to learn to go with the flow of Raku, rather than trying to go upstream with it because of old habits :-)
[18:47] <Juerd> Dumb code has to perform reasonably well too
[18:48] <Juerd> If I have to write int instead of Int to come close to what Perl or Python does, I'm not saving much time by using the fancy new thing, and I can just as well keep using the old tools. I know Raku's improving all the time, which is why I keep trying from time to time.
[18:48] <lizmat> indeed... but e.g. using a Real type in a recent floating point benchmark, rather than just a num, is like...  well....  
[18:49] <lizmat> I mean, it's a "floating point" benchmark...
[18:49] <lizmat> why would you want to use Reals ?
[18:49] <Juerd> I saw that one and was amused too
[18:50] <Juerd> But tbh, it speaks to an issue with naming that exists in Raku
[18:50] <lizmat> yeah, num should probably have been called "float"  I have no idea why num was chosen
[18:50] <Juerd> I've ranted about the names of numeric types before so I won't repeat that, as it's set in stone anyway :)
[18:51] <lizmat> in any case, looks like the MQTT::Client code is triggering some megamorphic callsite mitigation code
[18:51] <lizmat> in the new dispatcher logic
[18:51] <Juerd> If only I had some clue what megamorphic meant :)
[18:51] <lizmat> the test will be a good case for improving that
[18:53] <lizmat> Juerd: https://www.google.com/search?rls=en&q=megamorphic+call+site 
[18:53] <lizmat> :-)
[19:02] *** jjido joined
[19:10] *** jjido left
[19:16] *** jjatria left
[19:16] *** jjatria joined
[19:17] *** Scotteh left
[19:17] *** Scotteh joined
[19:28] <codesections> Juerd this is totally speculative, but I'm (cautiously) *very* optimistic about RakuAST helping with the performance cliff between the 15 different ways of saying the same thing.   
[19:28] <codesections> (in the medium/long term, I mean, not on the day it's merged)
[19:28] <Juerd> That would be nice
[19:30] <codesections> If two (or 15) statements have exactly the same semantics, then in theory out static optimizer ought to be able to pick the best-performing one.  Theory isn't practice, and that sort of transform can be hard,  especially Raku's dynamism 
[19:33] <codesections> But rAST will make it easier.  Personally, I'm hopping we can at least optimize things like $some-string ~~ /^foo/  to have the same performance as $some-string.starts-with('foo')
[19:59] *** jjido joined
[19:59] *** spacekookie left
[20:00] *** spacekookie joined
[20:39] <tbrowder> ref num, etc., names: can't we add aliases for better names?
[20:41] <tbrowder> (e.g., "float" as the "real" name and "num" as its aliad)
[20:42] <tbrowder> s/aliad/alias/
[20:42] *** squashable6 left
[20:43] <lizmat> m: my constant float = num; dd my float $a = 42e0   # alias done
[20:43] <camelia> rakudo-moar dd2b274fd: OUTPUT: «42e0␤»
[20:43] <lizmat> now the documentation :-)
[20:46] <leont> lizmat: yeah, it is screaming RakuAST :-)
[20:52] <tonyo> m: my \float = num; dd my float $a = 42e0;
[20:52] <camelia> rakudo-moar dd2b274fd: OUTPUT: «===SORRY!===␤No compile-time value for float␤»
[20:52] <tonyo> m: my \float := num; dd my float $a = 42e0;
[20:52] <camelia> rakudo-moar dd2b274fd: OUTPUT: «===SORRY!===␤No compile-time value for float␤»
[20:53] <lizmat> tonyo: needs to be compile time, hence the constant
[20:53] <lizmat> m: BEGIN my float := num; dd my float $a = 42e0 
[20:53] <camelia> rakudo-moar dd2b274fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my (did you mean to declare a sigilless \float or $float?)␤at <tmp>:1␤------> 3BEGIN my float7⏏5 := num; dd my float $a = 42e0␤»
[20:54] <lizmat> m: BEGIN my float := num; my float $a = 42e0; dd $a
[20:54] <camelia> rakudo-moar dd2b274fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my (did you mean to declare a sigilless \float or $float?)␤at <tmp>:1␤------> 3BEGIN my float7⏏5 := num; my float $a = 42e0; dd $a␤»
[20:54] <lizmat> m: BEGIN my \float = num; dd my float $a = 42e0 
[20:54] <camelia> rakudo-moar dd2b274fd: OUTPUT: «===SORRY!===␤No compile-time value for float␤»
[20:54] <lizmat> he
[20:59] <leont> Juerd, lizmat: that code is slow because it does a string-to-regex conversion every time you use the regex. If it got slower, it's probably because that conversion got slower
[21:00] <tonyo> m: use experimental :macros; macro float() { quasi {"float"}; }; dd my float() $a = 42e0;
[21:00] <camelia> rakudo-moar dd2b274fd: OUTPUT: «5===SORRY!5===␤Type 'float' is not declared.  Did you mean any of these: 'Num', 'num'?␤at <tmp>:1␤------> 3loat() { quasi {"float"}; }; dd my float7⏏5() $a = 42e0;␤Malformed my␤at <tmp>:1␤------> 3acro float() { quasi {"float"};…»
[21:00] <lizmat> leont: yeah, the reason for the slowdown appears clear: lost of types created and not being properly cached in an attempt to handle megamorphic call sites
[21:00] *** t3nj1n left
[21:08] <lizmat> *lots
[21:44] *** jjido left
[21:59] *** tejr left
[22:00] *** tejr joined
[22:00] <codesections> Is there a way for my module to tell that it's being `use`ed from a REPL session?  I thought the REPL would set an env var/ $*dyn-var or something, but I'm not seeing one right off
[22:03] <japhb> codesections: That sounds a bit like an XY question.  What is your actual use case?
[22:05] <codesections> japhb not much of one at the moment.  I use'ed a module that I'm working on to test it out interactively, and it didn't behave itself well (i.e., an `await` in WIP code hung the REPL) and I got curious. 
[22:07] <codesections> It's something I'd think we'd need if we ever go further down the interactive/REPL-driven development path, but that's probably a long way off (if we even pursue that goal) 
[22:07] <codesections> (I'd like to, but I don't know how widely held that view is)
[22:10] <japhb> Well, given that a Jupyter kernel was actually a relatively early module
[22:10] <japhb> ... I'd say there's definite interest
[22:10] <japhb> But if that's what you're looking for, maybe $*PROGRAM or $*PROGRAM-NAME?
[22:10] <japhb> m: .say for $*PROGRAM, $*PROGRAM-NAME;
[22:10] <camelia> rakudo-moar dd2b274fd: OUTPUT: «"<tmp>".IO␤<tmp>␤»
[22:11] <codesections> That does the trick, thanks :)
[22:11] <japhb> np
[22:13] *** melezhik joined
[22:13] <melezhik> .
[22:14] <melezhik> hi raku people!
[22:14] <moon-child> melezhik: sup
[22:15] <melezhik> i am looking for a raku module that would convert int numbers into picture (png/jpeg)
[22:15] <moon-child> I think there were some imagemagick bindings
[22:15] <melezhik> i am pretty sure there are some modules that binds to image libraries
[22:16] <melezhik> imagemagick - i thought about it, will it requite Inline::Perl5 ?
[22:17] <moon-child> https://modules.raku.org/dist/MagickWand:cpan:AZAWAWI  nativecall, not perl5
[22:17] <melezhik> yep, just have found it as well ...
[22:28] *** melezhik left
[22:37] *** Eddward left
[22:48] <tbrowder>  i find it easier to use Inline::Perl5 with GraphicsMagick's Perl modules
[22:50] <tbrowder> and GraphicsMagick is the preferred code according to my research
[23:37] <tbrowder> .tell melezhik try Inline::Perl5 with Perl modules from GraphicsMagick
[23:37] <tellable6> tbrowder, I'll pass your message to melezhik
[23:37] *** evalable6 left
[23:37] *** linkable6 left
[23:43] *** squashable6 joined
