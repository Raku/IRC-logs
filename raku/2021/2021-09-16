[00:02] *** reportable6 left
[00:06] *** lucerne left
[00:06] *** lucerne joined
[00:29] *** simcop2387 joined
[00:30] *** perlbot joined
[01:30] *** bloatable6 left
[01:30] *** linkable6 left
[01:30] *** unicodable6 left
[01:30] *** sourceable6 left
[01:30] *** coverable6 left
[01:30] *** quotable6 left
[01:30] *** greppable6 left
[01:30] *** committable6 left
[01:30] *** bisectable6 left
[01:30] *** nativecallable6 left
[01:30] *** notable6 left
[01:30] *** tellable6 left
[01:30] *** benchable6 left
[01:30] *** shareable6 left
[01:30] *** statisfiable6 left
[01:30] *** evalable6 left
[01:30] *** releasable6 left
[01:30] *** squashable6 left
[01:31] *** notable6 joined
[01:31] *** bisectable6 joined
[01:31] *** linkable6 joined
[01:32] *** tellable6 joined
[01:32] *** unicodable6 joined
[01:32] *** coverable6 joined
[01:33] *** bloatable6 joined
[02:05] <Geth> ¦ problem-solving: coke assigned to codesections Issue Consider renaming default branch from master to main https://github.com/Raku/problem-solving/issues/298
[02:30] *** sourceable6 joined
[02:31] *** nativecallable6 joined
[02:31] *** releasable6 joined
[02:33] *** shareable6 joined
[02:33] *** benchable6 joined
[03:05] *** reportable6 joined
[03:15] *** tejr joined
[03:31] *** squashable6 joined
[03:31] *** quotable6 joined
[03:31] *** greppable6 joined
[03:32] *** statisfiable6 joined
[04:32] *** quotable6 left
[04:32] *** bloatable6 left
[04:32] *** unicodable6 left
[04:32] *** bisectable6 left
[04:32] *** notable6 left
[04:32] *** reportable6 left
[04:32] *** statisfiable6 left
[04:32] *** nativecallable6 left
[04:32] *** sourceable6 left
[04:32] *** releasable6 left
[04:32] *** benchable6 left
[04:32] *** greppable6 left
[04:32] *** linkable6 left
[04:32] *** tellable6 left
[04:32] *** coverable6 left
[04:32] *** shareable6 left
[04:32] *** squashable6 left
[04:32] *** evalable6 joined
[04:32] *** nativecallable6 joined
[04:32] *** linkable6 joined
[04:32] *** squashable6 joined
[04:33] *** coverable6 joined
[04:34] *** releasable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** benchable6 joined
[04:34] *** bisectable6 joined
[04:35] *** tellable6 joined
[04:35] *** sourceable6 joined
[05:26] <Geth> ¦ doc: b00ffb3476 | (Daniel Sockwell)++ (committed by Juan Julián Merelo Guervós) | doc/Language/objects.pod6
[05:26] <Geth> ¦ doc: Document attribute aliases
[05:26] <Geth> ¦ doc: 
[05:26] <Geth> ¦ doc: Part of the spec in Roast S12-class/attributes.t  
[05:26] <Geth> ¦ doc: https://github.com/Raku/roast/blob/master/S12-class/attributes.t#L23-L33
[05:26] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/b00ffb3476
[05:26] <linkable6> Link: https://docs.raku.org/language/objects
[05:32] *** shareable6 joined
[05:34] *** unicodable6 joined
[05:34] *** notable6 joined
[06:34] *** unicodable6 left
[06:34] *** shareable6 left
[06:34] *** linkable6 left
[06:34] *** notable6 left
[06:34] *** benchable6 left
[06:34] *** releasable6 left
[06:34] *** tellable6 left
[06:34] *** bisectable6 left
[06:34] *** nativecallable6 left
[06:34] *** statisfiable6 left
[06:34] *** evalable6 left
[06:34] *** coverable6 left
[06:34] *** sourceable6 left
[06:34] *** squashable6 left
[06:34] *** abraxxa joined
[06:35] *** bloatable6 joined
[06:35] *** nativecallable6 joined
[06:36] *** linkable6 joined
[06:36] *** benchable6 joined
[06:37] *** shareable6 joined
[06:37] *** squashable6 joined
[06:37] *** notable6 joined
[06:37] *** coverable6 joined
[06:41] *** abraxxa left
[06:42] *** abraxxa joined
[07:03] *** reportable6 joined
[07:32] *** greppable6 joined
[07:33] *** quotable6 joined
[07:43] *** Sgeo left
[08:14] *** dakkar joined
[08:28] *** lichtkind joined
[08:31] *** committable6 joined
[08:35] *** releasable6 joined
[08:35] *** bisectable6 joined
[08:37] *** statisfiable6 joined
[08:37] *** tellable6 joined
[08:37] *** evalable6 joined
[08:37] *** unicodable6 joined
[09:13] *** pounce left
[09:18] *** frost joined
[09:19] *** pounce joined
[09:42] *** pounce left
[09:43] *** pounce joined
[10:04] *** immedlate joined
[10:05] <grondilu> "fooooooo" ~~ /o+/; # how do I get the number of 'o's from $/  ?
[10:07] <grondilu> $/.chars won't work if there was no o
[10:07] <grondilu> m: "" ~~ /o+/; say $/.chars
[10:07] <camelia> rakudo-moar 10b327292: OUTPUT: «Use of Nil.chars coerced to empty string␤␤  in block <unit> at <tmp> line 1␤»
[10:08] <grondilu> m: "ooooo" ~~ /o+/; say $/.chars
[10:08] <camelia> rakudo-moar 10b327292: OUTPUT: «5␤»
[10:11] *** lizmat_ joined
[10:12] *** TempIRCLogger left
[10:12] *** Geth left
[10:13] *** RakuIRCLogger left
[10:13] *** lizmat left
[10:19] <immedlate> What about `$/.defined ?? $/.chars !! 0`
[10:19] <immedlate> m: "" ~~ /o+/;  say $/.defined ?? $/.chars !! 0
[10:19] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»
[10:19] <immedlate> "oOo" ~~ /o+/;  say $/.defined ?? $/.chars !! 0
[10:19] <evalable6> immedlate, rakudo-moar 10b327292: OUTPUT: «1␤»
[10:20] <immedlate> or with `with`: `($/.chars with $/) or 0`
[10:20] <immedlate> similarly `with $/ { $/.chars } else { 0 }`
[10:21] <immedlate> or `without $/ { 0 } else { $/.chars }`
[10:21] <grondilu> that's quite verbose
[10:22] <grondilu> it's a bit of a hassle to have to deal with the special case of 0
[10:22] <raydiak> could always just change the + to *
[10:23] <grondilu> damb
[10:23] <grondilu> *damn
[10:23] <Altreus> or you could use the fact it didn't match   "foooo" ~~ /o+/ ?? $/.chars !! 0;
[10:24] <Altreus> in case your case is more complex
[10:26] <grondilu> of course with * it works, I'm dumb, sorry
[10:28] <raydiak> don't be too hard on yourself. with so many tools in reach it's easy to overlook one
[10:32] <Altreus> We had a similar question the other day when the answer was to change the question :D
[10:32] <Altreus> easily overlooked
[10:59] <gfldex> m: "" ~~ /o+/; say +$/.?chars
[10:59] <camelia> rakudo-moar 10b327292: OUTPUT: «Use of Nil.chars coerced to empty string␤0␤  in block <unit> at <tmp> line 1␤»
[11:00] <gfldex> m: "" ~~ /o+/; say +($/.?chars // 0)
[11:00] <camelia> rakudo-moar 10b327292: OUTPUT: «Use of Nil.chars coerced to empty string␤0␤  in block <unit> at <tmp> line 1␤»
[11:00] <gfldex> m: "" ~~ /o+/; say ($/ // "").chars.Int
[11:00] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»
[11:00] <gfldex> m: "ooo" ~~ /o+/; say ($/ // "").chars.Int
[11:00] <camelia> rakudo-moar 10b327292: OUTPUT: «3␤»
[11:02] <gfldex> There may be a simple way to handle that in the Regex directly.
[11:05] <gfldex> m: Nil.^methods.grep(*.name eq 'FALLBACK').say;
[11:05] <camelia> rakudo-moar 10b327292: OUTPUT: «(FALLBACK)␤»
[11:05] <gfldex> ok, .? on Nil is silly
[11:13] *** linkable6 left
[11:13] *** evalable6 left
[11:15] <grondilu> iteration over a hash is undeterministic or something?
[11:16] <gfldex> order of keys are randomised by design
[11:16] <grondilu> ok, noted
[11:17] <Altreus> kawaii_: by design!
[11:21] *** timo left
[11:41] *** lizmat_ left
[11:42] *** lizmat joined
[11:48] <grondilu> I tried to count the number of leading zeros in a list with `+(@a ...^ +*)` but this hangs if @a is full of zeros.  Any suggestion?
[11:48] <grondilu> no loop please ;)
[11:50] <grondilu> m: +((0, 0) ...^ +*)
[11:51] <camelia> rakudo-moar 10b327292: OUTPUT: «(timeout)WARNINGS for <tmp>:␤»
[11:51] <grondilu> m: say +((0, 0, 1) ...^ +*)
[11:51] <camelia> rakudo-moar 10b327292: OUTPUT: «2␤»
[11:55] <Altreus> ok I can't parse that. What's going on there :D
[11:56] <grondilu> again, I'm just trying to count the number of leading zeros in a list.
[11:57] <grondilu> I bet there is a simple, nice way to do it but I don't see it.
[11:57] <Altreus> yeah but I don't understand what the magic spell you wrote actually does
[11:58] <Altreus> leading zeroes implies strings, no
[11:58] <Altreus> oh
[11:58] <Altreus> do you mean the number of zeroes in a list before the first nonzero
[11:58] <grondilu> yes
[11:58] <Altreus> gotcha
[11:59] <grondilu> I don't want to write a loop.  That would be lame.
[12:00] <Altreus> is it just @a.first({ * != 0 }, :k)
[12:00] <Altreus> i.e. the index of the first nonzero value
[12:00] <Altreus> ... plus one
[12:00] <Altreus> no not plus one :D
[12:01] <grondilu> m: say +(0, 0, 1).first: +*
[12:01] <camelia> rakudo-moar 10b327292: OUTPUT: «1␤»
[12:01] <grondilu> m: say +(0, 0, 0, 1).first: +*
[12:01] <camelia> rakudo-moar 10b327292: OUTPUT: «1␤»
[12:01] <grondilu> m: say +(0, 0, 0, 1).first: +*, :k
[12:01] <camelia> rakudo-moar 10b327292: OUTPUT: «3␤»
[12:02] <grondilu> m: say +(0, 0, 0).first: +*, :k
[12:02] <camelia> rakudo-moar 10b327292: OUTPUT: «Use of Nil in numeric context␤0␤  in block <unit> at <tmp> line 1␤»
[12:02] <Altreus> aha!
[12:02] <Altreus> so it's that or the length of the list
[12:02] *** reportable6 left
[12:07] <grondilu> couldn't I do that with a grep and a flip flop?
[12:08] *** Geth joined
[12:08] *** RakuIRCLogger joined
[12:11] *** TempIRCLogger joined
[12:12] <grondilu> m: say <0 0 0 1 2 0>.grep({ 0 ff none(0)})
[12:12] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 0 0 1 0)␤»
[12:12] <grondilu> m: say <0 0 0 1 2 0>.grep({ 0 fff none(0)})
[12:12] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 0 0 1 0)␤»
[12:16] <grondilu> m: say <0 0 0 1 2 0>.grep({ (state $ = 1) &&= !$_ })
[12:17] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 0 0)␤»
[12:18] <grondilu> I guess I'll use .first
[12:25] <gfldex> grondilu: Do you mind if I qoute you on "I don't want to write a loop.  That would be lame." ? :->
[12:28] <grondilu> well not sure I want to be quoted on that tbh ;)
[12:29] <grondilu> I do hate writing loops though
[12:29] <Altreus> explicit loops are rare in my experience
[12:29] <Altreus> they're usually maps in disguise
[12:30] <Altreus> raku certainly makes it a lot easier to avoid them
[12:31] <Altreus> plus there's new structures like react-whenever, which I'm not sure whether they count as loops or not
[12:32] *** immedlate left
[12:43] <gfldex> m: multi sub prefix:«+\c[COMBINING RING ABOVE]»(\r) { r.defined ?? +r !! 0 }; say +̊(0, 0, 0).first: +̊*, :k;
[12:43] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»
[12:44] <gfldex> And no, my terminal can display that operator correctly either.
[12:45] * gfldex Adds an item to the mischief list.
[12:45] <gfldex> s/can/can't/
[12:46] <grondilu> I'm confused by the ring above the opening parenthesis
[12:47] <grondilu> the one above the * I get (I think)
[13:05] *** reportable6 joined
[13:10] *** immedlate joined
[13:11] <gfldex> grondilu: not even Firefox is displaying that one correctly
[13:12] <gfldex> the circly is above the + but not centered
[13:13] <gfldex> so the +̊( looks like a ligature
[13:13] <gfldex> I don't think I'm gonna do that again…
[13:13] *** linkable6 joined
[13:14] <immedlate> what terminal do you use gfldex if you dont mind sharing
[13:14] <gfldex> Putty+screen right now
[13:15] *** evalable6 joined
[13:15] <gfldex> immedlate: here is the complete setup https://gfldex.wordpress.com/2016/08/31/one-line-of-unicode-at-you-fingertips/
[13:16] <Altreus> looks fine for me
[13:16] <Altreus> :)
[13:16] <Altreus> so you did it right, at least :D
[13:16] <Altreus> "No, it's the children who are wrong"
[13:17] <gfldex> I'm not sure if I want to be right on your screen but not on mine.
[13:18] <Altreus> Well I mean at least there's nothing for *you* to fix
[13:26] <grondilu> gfldex: do you ssh from windows?
[13:26] <gfldex> yes
[13:27] <grondilu> do you know that the Windows terminal has a native ssh client now?
[13:29] <grondilu> and the Windows terminal is actually good, with full unicode support for instance.
[13:30] <grondilu> https://github.com/Microsoft/Terminal  Microsoft has been quite open-source friendly lately.
[13:30] <gfldex> grondilu: Does it work well with GNU Screen on the other end?
[13:31] <grondilu> gfldex: I don't know about screen but I was using tmux with no issue.
[13:31] *** Sgeo joined
[14:08] <discord-raku-bot> <Slaytanical#9737> i found: https://github.com/rakudo/rakudo/blob/master/docs/running.pod and:  https://github.com/ugexe/zef#more-cli are there more sources of environment variables i'd have to make myself aware of to isolate a raku environment to a USB drive?
[14:09] <discord-raku-bot> <Slaytanical#9737> or am i better off still compiling from source in something like msys2?
[14:12] <Xliff> Hi!
[14:13] <Xliff> Will a % parameter accept an Associative $?
[14:13] <Xliff> m: sub a (%h) { say 'hash' }; my $a = 1 but Associative; a($a)
[14:13] <camelia> rakudo-moar 10b327292: OUTPUT: «hash␤»
[14:13] <Xliff> Hah!
[14:26] <discord-raku-bot> <Slaytanical#9737> nevermind on the msys2 bit, i forgot it's not an isolated environment really.
[14:30] * [Coke] wonders how quickly after a new set of unicode emojis is announced that they are available on win & mac.
[14:30] <[Coke]> (some nifty/funny ones in emoji/14)
[14:31] *** evalable6 left
[14:31] *** linkable6 left
[14:32] *** evalable6 joined
[14:35] *** sourceable6 joined
[14:38] *** jess left
[14:41] *** cnx left
[14:41] *** cnx joined
[14:48] <codesections> is there a good way to check the exit status of a command run with qx { }?  I know I could add ; echo "$?" } to the end, but that feels a bit sloppy
[14:49] <codesections> (or just use &shell)
[14:56] <ugexe> even if there was an e.g. $! for "last ran process exit status" it would be just as sloppy due to its inherit race condition
[14:58] <codesections> m: say shell("invalid").exitcode
[14:58] <camelia> rakudo-moar 10b327292: OUTPUT: «/bin/sh: invalid: command not found␤127␤»
[14:59] <codesections> ugexe: I'm not sure I understand?  I was thinking of something like ^^^ but for qx.  There's no race condition there, right?
[15:00] <ugexe> if you want the Proc itself then why would you use qx?
[15:00] <ugexe> so yes there is no race condition there
[15:02] <codesections> fair enough.  I guess I just like qx -- it feels less like I'm just passing strings around.  But it isn't really, so I should probably just use shell
[15:06] <jdv> even in the same thread it couldn't be fetched in a non-racy way?
[15:08] <codesections> (it looks like the source for qx is at https://github.com/rakudo/rakudo/blob/master/src/core.c/Proc.pm6#L261-L265  In my ideal world, I think I'd have that return an IntStr that numifies to the exit code, the way Procs do)
[15:10] <jdv> that seems like unnecessary magic but it might be easier than trying to get it to work if you fetched it in the next instruction or something like that
[15:10] <ugexe> jdv, maybe but even then im not sure since i believe it uses async processes under the hood
[15:11] <jdv> yeah, right...
[15:15] <jdv> forgot its built on async
[15:15] <Xliff> codesections: https://gist.github.com/Xliff/b9d290cc5262dae05c0738111434d7e9
[15:19] *** squashable6 left
[15:20] <codesections> Xliff :)  But that loses the ability to use arbitrary unicode pairs as the delimiter for qx, which is a big part of its appeal vs &shell, imo 
[15:20] <ugexe> and i guess even if it was in the same thread you'd then have to have the equiv of `my $!;` to keep processes spawned in other unrelated threads (not just reentrant ones) from setting it
[15:26] <gfldex> codesections: do you get a non-0 exit code to indicate failure? If so, there is a module for that.
[15:31] <codesections> gfldex oh?
[15:33] *** melezhik joined
[15:33] <melezhik> :m sub foo ($a) {}
[15:33] <melezhik> m: sub foo ($a) {}
[15:33] <camelia> rakudo-moar 10b327292: ( no output )
[15:33] <melezhik> m: sub foo ($a) {}; foo(1);
[15:33] <camelia> rakudo-moar 10b327292: ( no output )
[15:33] <melezhik> m: sub foo ($a) {}; my $a; foo($a);
[15:33] <camelia> rakudo-moar 10b327292: ( no output )
[15:34] <melezhik> how can deal with this error - `Type check failed in binding to parameter '$user'; expected Any but got Mu (Mu)` ?
[15:34] <melezhik> my function declared as `foo ($user) {}`
[15:34] *** linkable6 joined
[15:34] <melezhik> however if a $user is not defined and calls `foo($user)` I get this error
[15:35] <codesections> the brute-force way is to declare it as `foo(Mu $user) {}`, but you might want to deal with the Mu before the callsite
[15:35] *** frost left
[15:36] <melezhik> I wonder why my function complains about this at all
[15:36] <melezhik> for example it works fine when I do this: `my $user; foo($user)`
[15:37] <codesections> well, the default constraint for params is Any.  And the default type for $-sigiled vars is Any
[15:37] <codesections> so that works fine
[15:37] <melezhik> https://github.com/melezhik/mybutterflies/blob/master/app.raku#L99
[15:38] <melezhik> here $user and $token get passed by cro as cookes
[15:38] <melezhik> cookies
[15:38] *** timo joined
[15:38] <melezhik> and get this `mbf Type check failed in binding to parameter '$user'; expected Any but got Mu (Mu)`
[15:40] <melezhik> changed the signature
[15:40] <codesections> I suspect you want `get -> 'project', $project, 'edit-review', :$user! is cookie, :$token! is cookie` for that signature
[15:40] <Xliff> codesections: Hmmm... good point. Would have to write a module with an included slang to get that working. :/
[15:40] <melezhik> https://github.com/melezhik/mybutterflies/commit/82148b815f05964c91baba5053f867d1f23be1a6
[15:40] <melezhik> works fine nw
[15:40] <melezhik> now
[15:41] <melezhik> thanks codesections
[15:42] <codesections> but note the difference between `:$user` and `:$user!` for Cro.  The first matches *regardless* of whether the client has a user cookie (which is why it's sometimes Mu).  The second only matches if the have a user cookie 
[15:43] <codesections> melezhik ^^^
[15:43] <melezhik> yes, I am aware
[15:43] <melezhik> cookies might not be set
[15:43] <codesections> Ok, just making sure :)
[15:49] *** melezhik left
[16:12] *** Woodi left
[16:13] <gfldex> codesections: see: https://github.com/gfldex/raku-shell-piping#error-handling
[16:21] *** squashable6 joined
[16:22] *** Woodi joined
[16:42] *** dakkar left
[17:03] *** melezhik joined
[17:05] <melezhik> hi Raku people! I've launched a better version of "My Butterflies" - a place where one can rate software they like. I'd appreciate for feedback from community. Eventually I am going to get a DSN and whatnots. But I am very interested to get a feedback before - http://161.35.115.119/mbf/
[17:06] <melezhik> if someone wants to bragg about their projects - feel free - let me know and I put them to list. Raku projects are priority ... ))))
[17:08] <melezhik> also please be nice, even though you review python stuff , ha-ha :') 
[17:15] <daxim> evalable6:  subset List5 of List where .elems == 5;  my @foo = List5.new: <q w e r t>;   # how is this supposed to work?  my List5 @bar = <q w e r t>??
[17:15] <evalable6> daxim, rakudo-moar 10b327292: OUTPUT: «(exit code 1) You cannot create an instance of this type (List5)␤  in block <unit> at /tmp/LaV96KsfdJ line 1␤␤»
[17:17] *** melezhik left
[17:21] <japhb> subset List5 of List where .elems == 5;  my @foo is List5 .= new: <q w e r t>
[17:21] <japhb> m: subset List5 of List where .elems == 5;  my @foo is List5 .= new: <q w e r t>
[17:21] <camelia> rakudo-moar 10b327292: OUTPUT: «You cannot create an instance of this type (List5)␤  in block <unit> at <tmp> line 1␤␤»
[17:21] <japhb> Oh interesting
[17:22] <japhb> m: subset Array5 of Array where .elems == 5;  my @foo := Array5.new: <q w e r t>
[17:22] <camelia> rakudo-moar 10b327292: OUTPUT: «You cannot create an instance of this type (Array5)␤  in block <unit> at <tmp> line 1␤␤»
[17:23] <japhb> hum
[17:32] *** melezhik joined
[17:32] <melezhik> weekly: https://www.reddit.com/r/rakulang/comments/pphxmy/my_butterflies_independent_software_reviews/
[17:32] <notable6> melezhik, Noted! (weekly)
[17:32] <Altreus> melezhik: interesting idea but is there any moderation on what counts as software?
[17:32] <Altreus> like, maybe you get raku and then maybe you get modules and then maybe you get ... functions?! I dunno
[17:33] <Altreus> deduplication seems like a task as well
[17:38] <melezhik> Altreus , that's the very idea of dog fooding, not only check the web site, but also test the idea itself. I am flexible, it could be any software and I have not yet decided on the level of granularity ...
[17:39] <melezhik> I just think - it's cool to have a place where engineers write about software, honest, in depth reviews, instead of smarmy marketing stuff ...
[17:40] <melezhik> and I like to check it with raku community first, before expand to other languages/communities ... 
[17:46] <Geth> ¦ doc: 2faaff0c55 | Coke++ | xt/word-variants.t
[17:46] <Geth> ¦ doc: whitespace
[17:46] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2faaff0c55
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:17] *** silug4 joined
[18:17] *** silug left
[18:17] *** silug4 is now known as silug
[18:22] *** abraxxa left
[18:25] *** abraxxa-home joined
[18:49] <grondilu> you know, I wish there was a $*MODULUS environment variable to set up modular arithmetics.  Wouldn't that be neat for crypto stuff?
[18:50] <grondilu> Could this be done in user/module space?
[18:50] <lizmat> m: PROCESS:<$FOO> := 42; say $*FOO    # yes ?
[18:50] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix := instead.␤at <tmp>:1␤------> 3PROCESS:<$FOO> :=7⏏5 42; say $*FOO    # yes ?␤»
[18:50] <lizmat> m: PROCESS::<$FOO> := 42; say $*FOO    # yes ?
[18:50] <camelia> rakudo-moar 10b327292: OUTPUT: «42␤»
[18:51] *** melezhik left
[18:51] <grondilu> I know setting the variable can be done, but could it be made to affect Int arithmetics?
[18:52] <lizmat> ah. that?  not without affecting performance of *all* Int arithmetic
[18:52] *** abraxxa-home left
[18:55] <grondilu> what about changing the interpretation of literal integers?  That could be done, right?
[18:56] <grondilu> from user code, I mean.
[18:56] <grondilu> with macros or something?
[18:56] <lizmat> possibly
[18:57] <moon-child> grondilu: what are you trying to do?
[18:59] <grondilu> use Mod13; say 12 + 1; # 0
[19:01] <lizmat> use Mod13 could export a proto infix:<+> with all new candidates
[19:01] <lizmat> so you *can* do that in a module
[19:02] <grondilu> indeed, not sure why I didn't see it that way.
[19:03] <grondilu> hang on
[19:04] <lizmat> it will *only* affect that lexical scope, yes
[19:04] <grondilu> I can't override core candidates, can I?
[19:04] <lizmat> sure you can,  by exporting a proto
[19:05] <grondilu> ok but inside that candidate how would I call the core ones?
[19:05] <moon-child> lizmat: I thought operator overloads sometimes had dynamic scope, at least conceptually
[19:05] <moon-child> there was a pr not long ago to make sort respect overridden &[cmp]
[19:07] <lizmat> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { 42 }; say 999 + 42e0
[19:07] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling infix:<+>(Int, Num) will never work with any of these multi signatures:␤    (Int \a, Int \b)␤at <tmp>:1␤------> 3nfix:<+>(Int \a,Int \b) { 42 }; say 999 7⏏5+ 42e0␤»
[19:08] <lizmat> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { 42 }; say 999 + 666
[19:08] <camelia> rakudo-moar 10b327292: OUTPUT: «42␤»
[19:08] <lizmat> moon-child: yeah, but the problem is that &[cmp] is that List.sort *lexically* only sees the &cmp of the core
[19:09] <lizmat> and the question is: should it only look lexically for that, or also dynamically
[19:09] <lizmat> and that's what the PR is about
[19:10] <grondilu> m: dd &COMPUNIT::infix:<+>
[19:10] <camelia> rakudo-moar 10b327292: OUTPUT: «Any element{'&infix:<+>'} = Any␤»
[19:11] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { &COMPUNT::infix<+>(a, b) mod 13; }; say 12 + 1
[19:11] <camelia> rakudo-moar 10b327292: OUTPUT: «Cannot resolve caller infix:<mod>(List:D, Int:D); none of these signatures match:␤    (Real $a, Real $b)␤  in sub infix:<+> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[19:11] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { &COMPUNIT::infix<+>(a, b) mod 13; }; say 12 + 1
[19:11] <camelia> rakudo-moar 10b327292: OUTPUT: «Cannot resolve caller infix:<mod>(List:D, Int:D); none of these signatures match:␤    (Real $a, Real $b)␤  in sub infix:<+> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[19:12] <grondilu> see what I mean?
[19:12] <moon-child> hmm, there may be an easier way
[19:12] <moon-child> one moment
[19:13] <grondilu> maybe with the routine form of the operators.  Not sure what it is though
[19:15] <moon-child> hmm, no.  I thought you might be able to say:  augment class Int { method new(\x) { self.bless(x mod 13) } }.  But apparently it has to be a multi, and that candidate never gets selected
[19:20] <grondilu> I could make a role of course
[19:20] *** vrurg left
[19:22] <grondilu> like, my $n = 7 but Modular(13); or somethinp
[19:22] <grondilu> but I think I had tried that before and I still didn't like it.  Too verbose.
[19:23] <moon-child> you could just overload == and leave all the other operators the same
[19:24] <grondilu> well that would be inefficient.   And that wouldn't work for modular inverse.
[19:25] <grondilu> making a role was kind of messy too because of the possibility of having several modulus in an expression.
[19:26] <grondilu> like what to do with (5 but Modulo(13)) + (6 but Modulo(7)) 
[19:27] <grondilu> thus me thinking of having a single modulus as an environment variable.
[19:31] <grondilu> oh wait isn't there a keyword to delegate a method to the next candidate or something?
[19:32] <moon-child> nextsame?
[19:33] <grondilu> yeah, under "re-dispatching" in the docs
[19:33] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { callsame mod 13; }; say 12 + 1
[19:33] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    mod used at line 1␤␤»
[19:33] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { callsame() mod 13; }; say 12 + 1
[19:33] <camelia> rakudo-moar 10b327292: OUTPUT: «Cannot resolve caller infix:<mod>(Nil:U, Int:D); none of these signatures match:␤    (Real $a, Real $b)␤  in sub infix:<+> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[19:35] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { callsame(); }; say 12 + 1
[19:35] <camelia> rakudo-moar 10b327292: OUTPUT: «Nil␤»
[19:35] <grondilu> m: proto infix:<+>(|) {*}; multi sub infix:<+>(Int \a,Int \b) { return callsame(); }; say 12 + 1
[19:35] <camelia> rakudo-moar 10b327292: OUTPUT: «Nil␤»
[19:35] * grondilu whispers
[19:36] <moon-child> because the builtin &[+] isn't a candidate for the new proto you just made
[19:36] <grondilu> oh yeah makes sense
[19:39] <grondilu> so I overwrite everything or nothing, I guess.  That's not very useful.
[19:42] <lizmat> note that you *can* override all and still access the old
[19:44] <grondilu> Maybe I should just define a 'm' suffix.
[19:44] <lizmat> m: BEGIN my &old = &infix:<+>; proto sub infix:<+>(|) {*}; multi sub infix:<+>(\a, \b) { old(a,b) };  say 42 + 666
[19:44] <camelia> rakudo-moar 10b327292: OUTPUT: «708␤»
[19:44] <lizmat> m: BEGIN my &old = &infix:<+>; proto sub infix:<+>(|) {*}; multi sub infix:<+>(\a, \b) { old(a,b) };  my $a = 42; say $a + 666
[19:44] <camelia> rakudo-moar 10b327292: OUTPUT: «708␤»
[19:45] <grondilu> neat trick
[19:45] <lizmat> grondilu: ^^ between the proto and the catchall, you can insert your own candidates
[19:46] <grondilu> m: BEGIN my &old = &infix:<+>; proto sub infix:<+>(|) {*}; multi sub infix:<+>(\a, \b) { old(a,b) mod 13 }; say 12 + 1
[19:46] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»
[19:46] <grondilu> nice
[19:48] <grondilu> so it's feasible
[19:49] *** bgran joined
[19:50] <grondilu> I'm so going to write a secp256k1 module now ;)
[19:59] <lizmat> ++grondilu 
[20:30] *** immedlate left
[21:19] *** melezhik joined
[21:19] <melezhik> how can I remove cookies using cro ?
[21:23] <melezhik> I have very strange bug when my cookies works fine when tested with safari and I see random issues with working with another browsers, like Mozilla
[21:23] <melezhik> for mbf - http://161.35.115.119/mbf/
[21:24] <melezhik> I don't think that cookies format is specific to browsers?
[21:24] <melezhik> basically I use standard cro function - https://github.com/melezhik/mybutterflies/blob/master/app.raku#L232
[21:24] <melezhik> to set cookies on server side ...
[21:24] <melezhik> that is it
[21:28] <melezhik> duck duck go browser works fine as well ...
[21:31] <melezhik> yeah, just checked things, looks like does not work properly in Firefox ((
[21:39] *** [Coke] left
[21:50] <melezhik> https://github.com/croservices/cro-http/issues/155
[21:55] *** melezhik left
[22:05] *** melezhik joined
[22:15] <melezhik> if cro caches GET requests? if so, how to disable this cache?
[22:24] *** melezhik left
[22:47] *** lichtkind left
[23:47] *** linkable6 left
[23:47] *** evalable6 left
[23:50] *** linkable6 joined
[23:50] *** squashable6 left
[23:51] *** squashable6 joined
