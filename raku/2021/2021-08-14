[00:12] *** jast joined
[01:12] *** committable6 left
[01:12] *** coverable6 left
[01:12] *** bloatable6 left
[01:12] *** nativecallable6 left
[01:12] *** unicodable6 left
[01:12] *** linkable6 left
[01:12] *** releasable6 left
[01:12] *** sourceable6 left
[01:12] *** shareable6 left
[01:12] *** statisfiable6 left
[01:12] *** quotable6 left
[01:12] *** bisectable6 left
[01:12] *** greppable6 left
[01:12] *** squashable6 left
[01:12] *** notable6 left
[01:12] *** tellable6 left
[01:12] *** evalable6 left
[01:12] *** benchable6 left
[01:13] *** committable6 joined
[01:13] *** greppable6 joined
[01:13] *** benchable6 joined
[01:13] *** linkable6 joined
[01:13] *** quotable6 joined
[01:14] *** sourceable6 joined
[01:14] *** bloatable6 joined
[01:14] *** statisfiable6 joined
[01:15] *** nativecallable6 joined
[01:29] *** mjgardner joined
[01:30] *** swaggboi left
[01:40] *** swaggboi joined
[01:53] *** neshpion left
[01:54] *** neshpion joined
[02:12] *** notable6 joined
[02:13] *** bisectable6 joined
[02:13] *** unicodable6 joined
[02:13] *** shareable6 joined
[02:16] <vrurg> greppable6: Cache::Async

[02:16] <greppable6> vrurg, 40 lines, 1 module: https://gist.github.com/bdeaaa12b890556adf2a651d36de3fef

[02:17] <vrurg> So, unless it's used in private projects...

[03:13] *** linkable6 left
[03:13] *** tellable6 joined
[03:14] *** squashable6 joined
[03:14] *** linkable6 joined
[03:15] *** releasable6 joined
[04:02] *** neshpion left
[04:03] *** neshpion joined
[05:03] *** bloatable6 left
[05:03] *** squashable6 left
[05:03] *** unicodable6 left
[05:03] *** tellable6 left
[05:03] *** nativecallable6 left
[05:03] *** sourceable6 left
[05:03] *** greppable6 left
[05:03] *** statisfiable6 left
[05:03] *** releasable6 left
[05:03] *** committable6 left
[05:03] *** quotable6 left
[05:03] *** benchable6 left
[05:03] *** notable6 left
[05:03] *** bisectable6 left
[05:03] *** shareable6 left
[05:03] *** linkable6 left
[05:04] *** releasable6 joined
[05:05] *** bisectable6 joined
[05:05] *** shareable6 joined
[05:15] *** evalable6 joined
[05:29] *** neshpion left
[06:03] *** quotable6 joined
[06:04] *** linkable6 joined
[06:04] *** committable6 joined
[06:04] *** benchable6 joined
[06:05] *** squashable6 joined
[06:05] *** sourceable6 joined
[06:05] *** tellable6 joined
[06:05] *** notable6 joined
[06:06] *** statisfiable6 joined
[07:04] *** greppable6 joined
[07:05] *** nativecallable6 joined
[07:15] *** coverable6 joined
[07:46] *** kylese joined
[08:00] *** squashable6 left
[08:02] *** reportable6 joined
[08:05] *** bloatable6 joined
[08:06] *** xinming left
[09:04] *** unicodable6 joined
[09:09] <Geth> ¬¶ flycheck-raku: eca94662ac | (Siavash Askari Nasr)++ | flycheck-raku.el

[09:09] <Geth> ¬¶ flycheck-raku: Add project root to include path, instead of `lib` directory

[09:09] <Geth> ¬¶ flycheck-raku: review: https://github.com/Raku/flycheck-raku/commit/eca94662ac

[09:09] <Geth> ¬¶ flycheck-raku: 50ac228e65 | (Siavash Askari Nasr)++ | flycheck-raku.el

[09:09] <Geth> ¬¶ flycheck-raku: Bump version to 0.6

[09:09] <Geth> ¬¶ flycheck-raku: review: https://github.com/Raku/flycheck-raku/commit/50ac228e65

[10:00] *** lizmat left
[10:00] *** TempIRCLogger left
[10:03] *** Sgeo left
[10:12] *** wanko joined
[10:12] *** lizmat joined
[10:13] <wanko> hi, I was wondering, does raku support multi-parameter typeclasses? I checked https://docs.raku.org/language/haskell-to-p6#Typeclasses but well "TODO"

[10:15] *** TempIRCLogger joined
[10:15] <lizmat> you mean something like Rational[Int,Int] ?

[10:16] <moritz> my knowledge of haskell is pretty rusty and incomplete, but I think roles are the closes thing in raku

[10:16] <moritz> and those can be parameterized

[10:16] <moritz> though in general, my feeling is that if you want to super-strong typing (a la haskell), raku is going to disappoint you

[10:21] <wanko> oh, I think I see, thanks both of you. so Rational takes 2 parameters and by doing class Positive does Rational[UInt] you basically supply Positive as the second argument, right?

[10:22] *** keutoi joined
[10:22] <moritz> not quite

[10:22] <moritz> Rational wants two parameters, so trying to write Rational[UInt] is an error

[10:23] <moritz> (ok, Rational has a default, iirc, so it's not actually an error, but if there was no default...)

[10:24] <moritz> (just to be clear, a Rational in raku is a fraction of two integers)

[10:28] <wanko> I think I get it now, thank you!

[10:51] <SmokeMachine_> Hi you all! I have a question: Match objects has submaches that you can access as $match<submatch>, isn‚Äôt it an Associative way of accessing/storing it? So, wouldn‚Äôt it make sense to Match ‚Äúdoes‚Äù Associative?

[10:54] <SmokeMachine_> m: say Match ~~ Associative

[10:54] <camelia> rakudo-moar 548803393: OUTPUT: ¬´False‚ê§¬ª

[11:00] *** squashable6 joined
[11:42] *** frost-lab joined
[11:54] <moritz> SmokeMachine_: Match used to be Associative when I was last very active in raku land, so it has changed since then

[11:54] <moritz> maybe because Associative has certain expectations of what happens if you call .list, which clash with the expectations of the Positional aspects

[11:54] <moritz> likewise with .keys, .pairs etc

[12:03] *** reportable6 left
[12:12] <andinus`> ,ping

[12:12] *** andinus` left
[12:13] *** andinus joined
[12:13] <andinus> m: put "ping"

[12:13] <camelia> rakudo-moar 548803393: OUTPUT: ¬´ping‚ê§¬ª

[12:34] *** Xliff joined
[12:43] <SmokeMachine_> moritz: thanks! But Mach does have .keys, .pairs, etc like Associative, doesn‚Äôt it?

[12:44] <SmokeMachine_> m: say (‚Äúbla ‚Äù ~~ /<ws>/).keys

[12:44] <camelia> rakudo-moar 548803393: OUTPUT: ¬´(ws)‚ê§¬ª

[12:44] <SmokeMachine_> m: say (‚Äúbla ‚Äù ~~ /<ws>/).pairs

[12:44] <camelia> rakudo-moar 548803393: OUTPUT: ¬´(ws => ÔΩ¢ÔΩ£)‚ê§¬ª

[12:45] <SmokeMachine_> m: say (‚Äúbla ‚Äù ~~ /<ws>/).kv

[12:45] <camelia> rakudo-moar 548803393: OUTPUT: ¬´(ws ÔΩ¢ÔΩ£)‚ê§¬ª

[12:45] <SmokeMachine_> m: say (‚Äúbla ‚Äù ~~ /<ws>/).antipairs

[12:45] <camelia> rakudo-moar 548803393: OUTPUT: ¬´(ÔΩ¢ÔΩ£ => ws)‚ê§¬ª

[12:47] <andinus> i 'm writing something to parse call logs, i was thinking of an interactive program  that displays charts/graphs for each number if the user chooses it

[12:48] <andinus> should i try ncurses or is there a better way to do this?

[13:04] *** reportable6 joined
[13:21] <Xliff> https://replit.com/@Xliff/GiantChocolateSpools#main.raku

[13:21] <Xliff> Why the differing results between the two grammars?

[13:21] <Xliff> Thanks.

[13:31] <Xliff> andinus: Yes, you can use curses, or a GUI lib. Raku does have GTK bindings.

[13:32] <Xliff> If you want simple plotting, there is SVG::Plot, but that is for generating SVGs, not displaying them.

[13:43] <andinus> which GUI lib is recommended? i haven't wroked with any before

[13:44] <andinus> i was thinking of using curses to provide menu based interface and generating plots with svg::plot and displaying them with feh 

[14:04] *** linkable6 left
[14:04] *** evalable6 left
[14:17] *** tejr left
[14:19] *** tejr joined
[15:08] *** ens joined
[15:27] *** dogbert11 joined
[15:28] <Xliff> If I have an arbitrary prefix string, that may change. How can I use a regular expression to match any character up to that string?

[15:28] <Xliff> So....

[15:29] *** dogbert17 left
[15:34] <moritz> .*? <?before $string<

[15:34] <moritz> .*? <?before $string>

[15:34] <Xliff> moritz++!

[15:37] <Xliff> Is there a way to do that where "$string" is a scalar or an array? Or is that what you meant by "$string"?

[15:44] <Xliff> Moritz: So something like this seems to work: https://replit.com/@Xliff/GiantChocolateSpools#main.raku

[15:51] <Xliff> Working version of reusable parser: https://replit.com/@Xliff/GiantChocolateSpools#main.raku

[15:51] <Xliff> moritz: Thanks AGAIN!

[15:54] *** frost-lab left
[15:58] *** frost-lab joined
[15:58] *** frost-lab left
[16:01] *** keutoi left
[16:02] *** keutoi joined
[16:06] *** linkable6 joined
[16:39] <Juerd> I love that I can just use  ¬Ω * tau * ($d/2)¬≤

[16:43] <cnx> m: put œÑ

[16:43] <camelia> rakudo-moar 548803393: OUTPUT: ¬´6.283185307179586‚ê§¬ª

[17:06] *** dogbert11 left
[17:09] *** keutoi left
[17:10] *** keutoi joined
[17:24] *** dogbert11 joined
[17:30] *** dogbert17 joined
[17:30] *** dogbert11 left
[17:32] *** keutoi left
[17:35] *** dogbert17 left
[17:43] *** dogbert17 joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:06] *** Shaeto joined
[18:09] <Shaeto> hmm, can't download the latest community commaide, mac os link is broken... and no information how to contact authors

[18:22] <moon-child> ping jnthnwrthngtn

[18:23] <nine> moon-child: on vacation

[18:24] <moon-child> right

[18:35] *** kylese left
[18:51] *** tejr left
[18:52] *** kawaii_ left
[18:54] *** pjlsergeant left
[18:55] *** mjgardner left
[18:55] *** zostay left
[18:56] *** PotatoGim left
[18:56] *** tejr joined
[18:57] *** mjgardner joined
[18:59] *** patterner_ left
[18:59] *** patterner_ joined
[19:00] *** tbrowder left
[19:00] *** tejr left
[19:01] *** tbrowder joined
[19:01] *** tejr joined
[19:02] *** PotatoGim joined
[19:06] *** zostay joined
[19:11] *** pjlsergeant joined
[19:12] *** Shaeto left
[19:13] *** Shaeto joined
[19:14] *** kawaii_ joined
[19:15] *** xinming joined
[19:16] <MasterDuke> Altai-man and timo are also involved with comma development

[19:18] * Altai-man thinks what to do

[19:21] <Altai-man> Shaeto, hi. Alas, it's a known problem, for the time being it's not possible to build an OSX build for the latest version. Tomorrow I'll update the link to download 7.0 instead, I guess. It goes with some unfortunate bugs, so I am not sure what's the best way to proceed.

[19:22] <Shaeto> Altai-man: thank you!

[19:22] <Altai-man> I can ship the buggy 7.0 for OSX or we can wait some days until it'll be possible to ship 7.1 properly.

[19:23] <Shaeto> stable 7.1 is more interesting :)

[19:31] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; $a.gist.say

[19:31] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§(1 2 3)‚ê§¬ª

[19:31] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; $a.gist.say; $a.gist.say

[19:31] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§(1 2 3)‚ê§(1 2 3)‚ê§¬ª

[19:32] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; .say for $a; .say for $a

[19:32] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§(1 2 3)‚ê§(1 2 3)‚ê§¬ª

[19:32] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; $a.^name.say; .say for $a; .say for $a

[19:32] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§Seq‚ê§(1 2 3)‚ê§(1 2 3)‚ê§¬ª

[19:32] <Xliff> Why isn't that Seq complaining about it being used up?

[19:34] <moon-child> Seq is an Iterable, not an Iterator

[19:37] *** Sgeo joined
[19:45] *** neshpion joined
[19:53] *** mattil joined
[19:57] <mjgardner> Can someone explain `first` and smartmatch (`~~`) to me? I‚Äôm trying to use them in the attached script that uses Perl‚Äôs WWW::Mechanize, and although I can do a regular `eq` in `first` I can‚Äôt see how to check against a list (`$rss_types` in the example). https://www.irccloud.com/pastebin/lmQ7jGHc

[19:58] *** juanfra__ joined
[20:00] <lizmat> m: dd "a" ~~ <a b c d>   # mjgardner smartmatch won't work that way

[20:00] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Bool::False‚ê§¬ª

[20:00] <lizmat> m: dd "a" (elem) <a b c d>   # mjgardner perhaps this will?

[20:00] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Bool::True‚ê§¬ª

[20:00] *** clarjon1 left
[20:01] <[Coke]> https://docs.raku.org/routine/ACCEPTS - this shows what smartmatch does with a list, btw.

[20:01] *** Shaeto left
[20:01] <[Coke]> elem should work, an explicit junction should work  ~~ any($rss_types)

[20:02] <mjgardner> lizmat: (elem) works üôÇ

[20:05] <mjgardner> [Coke]: `say $alt_links.first(*.attrs<type> ~~ any($rss_types)).url;` gets me a compiler error: Function "any" may not be called without arguments (please use () or whitespace to denote arguments, or &any to refer to the function as a noun, or use .any if you meant to call it as a method on $_)

[20:06] <mjgardner> But (elem) works so I‚Äôll go with that.

[20:06] <[Coke]> try 'eq' instead of ~~ there.

[20:08] <mjgardner> Nope, that gets me Nil.

[20:11] <MasterDuke> what if you give $rss_types a `@` sigil?

[20:12] <MasterDuke> m: my $a = <a b ab abc d>; say "abc" ~~ any($a); my @b = <a b ab abc d>; say "abc" ~~ any(@b)

[20:12] <camelia> rakudo-moar 548803393: OUTPUT: ¬´False‚ê§True‚ê§¬ª

[20:14] <[Coke]> Apologies for the bad advice, always trust lizmat. :)

[20:18] <mjgardner> MasterDuke: That only works if I do `.first( {$_.attrs<type> ~~ any(@rss_types) } )`, but that‚Äôs a bit noisier than lizmat‚Äôs (elem), so I‚Äôm going with the latter.

[20:20] <MasterDuke> sure. elem going to be faster anyway, just showing how it could/would work

[20:23] <mjgardner> Thanks for the help all.

[20:24] *** mattil left
[20:32] *** codesections joined
[20:33] *** Xliff left
[20:41] *** dogbert11 joined
[20:41] *** dogbert17 left
[20:46] *** dogbert17 joined
[20:49] *** Xliff joined
[20:49] *** dogbert11 left
[20:55] *** dogbert17 left
[20:55] *** dogbert17 joined
[21:00] *** dogbert17 left
[21:18] *** clarjon1 joined
[21:22] <japhb> andinus: There's some rough stuff in https://github.com/japhb/Terminal-QuickCharts, but that's more for making a CLI output a chart, than to have live charts going in a TUI app.  There's also https://github.com/ab5tract/Terminal-Print which is relatively low level.  (It has the underlying code to do animatable widgets, but it has NO widget library.  Just the low-level bits.)

[22:07] *** evalable6 joined
[22:20] *** dogbert17 joined
[23:20] *** reportable6 left
[23:20] *** statisfiable6 left
[23:20] *** notable6 left
[23:20] *** squashable6 left
[23:20] *** benchable6 left
[23:20] *** evalable6 left
[23:20] *** bloatable6 left
[23:20] *** coverable6 left
[23:20] *** quotable6 left
[23:20] *** sourceable6 left
[23:20] *** greppable6 left
[23:20] *** nativecallable6 left
[23:20] *** tellable6 left
[23:20] *** unicodable6 left
[23:20] *** bisectable6 left
[23:20] *** shareable6 left
[23:20] *** releasable6 left
[23:20] *** linkable6 left
[23:20] *** committable6 left
[23:20] *** evalable6 joined
[23:20] *** sourceable6 joined
[23:21] *** unicodable6 joined
[23:21] *** tellable6 joined
[23:22] *** nativecallable6 joined
[23:22] *** bloatable6 joined
[23:22] *** statisfiable6 joined
[23:23] *** benchable6 joined
[23:23] *** coverable6 joined
[23:23] *** notable6 joined
