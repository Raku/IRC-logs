[00:00] <[Coke]> also works if b starts with "unit module b;", e.g.

[00:00] <tech_hutch> hm, okay...I think I understand that

[00:01] <tech_hutch> is RAKULIB an env var?

[00:01] <El_Che> yes

[00:04] <tech_hutch> what does it do?

[00:04] *** thdrmz left
[00:05] <tech_hutch> I don't have to do this in other langs, just to use multiple files...

[00:06] <El_Che> you don't have to if the library is in a default location

[00:07] <El_Che> running libs from pwd by default is a security issue

[00:07] <tech_hutch> I don't want to make a library tho, I just want to have multiple files in my project

[00:09] <tech_hutch> is what I'm doing unidiomatic somehow?

[00:11] *** thdrmz joined
[00:13] <El_Che> several files not structured as a project somewhat, yes.

[00:13] <El_Che> there are 3 ways to spicify a modules path

[00:13] <El_Che> 1. RAKULIB env variable

[00:14] <El_Che> 2. run raku with the -I option (e.g raku -Ilib or raku -I.)

[00:14] <El_Che> 3. use lib in your script source

[00:14] <tech_hutch> #3 sounds the simplest, how do you do that?

[00:15] <El_Che> use lib 'your dir here';

[00:15] <El_Che> use lib '.'

[00:16] <El_Che> https://docs.raku.org/language/pragmas#index-entry-lib__pragma

[00:16] *** lucasb left
[00:16] <El_Che> bbl

[00:16] <El_Che> bye

[00:16] <tech_hutch> okay thank you!

[00:17] <tech_hutch> it worked! thanks gain

[00:17] <tech_hutch> again*

[00:17] *** mowcat left
[00:50] *** melezhik joined
[00:50] <melezhik> .tell tony-o I create a sparrow plugin to automate fez login, could be useful in fez automation / testing - http://sparrowhub.io/plugin/fez-login/0.000001

[00:50] <tellable6> melezhik, I'll pass your message to tony-o

[00:52] *** hvxgr joined
[00:54] *** pecastro left
[01:32] *** melezhik left
[01:40] *** melezhik joined
[01:41] <melezhik> .tell tony-o this is how `fez login` automation looks like using `fez-login` sparrow plugin - http://161.35.142.50/report/fez-test/203 

[01:41] <tellable6> melezhik, I'll pass your message to tony-o

[01:47] *** melezhik left
[01:52] <Xliff> JRasPass: So it sounds like that might be better off as its own header. :)

[01:53] <JRaspass> that still feels icky though, since its not part of the req, its just info i want to pass through the app, like go context or dancer stash

[01:53] <Xliff> I think I want to adjust Cro::HTTP::Log::File to accept an array of destinations for both :$logs and :$errors

[01:53] *** saveNexit joined
[01:53] <saveNexit> hello, I am trying to install perl6 jupyter kernel, but I am getting this error: https://paste.debian.net/hidden/46220973/

[01:53] <Xliff> JRaspass: Hey, isn't that what custom headers are for?

[01:54] <saveNexit> I tried another github package for the same, and got the same error, too

[01:54] <Xliff> saveNexit: That's a missing dependency.

[01:54] <Xliff> zef install File::Find # Do this, then try again

[01:54] *** tech_hutch left
[01:54] <JRaspass> `--\test` if you're impatient like me ;-)

[01:55] <saveNexit> Xliff, I'll do so, thank you very much

[01:55] <Xliff> saveNexit: You might also be using an older version of zef. 

[01:55] <Xliff> Consider "zef self-upgrade"

[01:55] <Xliff> ... or not... (man, I'm batting 1000, tonight!)

[01:55] <Xliff> One sec.

[01:57] <Xliff> saveNexit: What's your `zef --version`?

[01:59] <JRaspass> there we go, i did a good deed, ta for the reminder Zliff - https://github.com/croservices/cro-http/pull/121

[02:00] <JRaspass> *Xliff, /me also batting 1k tonight

[02:01] <Xliff> :)

[02:01] <JRaspass> its 2am here, probably should stop coding :-P

[02:01] <saveNexit>  hmm, after "File::Find" I still get the same error... "zef --version" rejects the parameter

[02:02] <Xliff> OK. Then it's too old.

[02:02] <saveNexit> self-upgrade doesnt work, either

[02:02] <JRaspass> where does your raku/zef come from?

[02:02] <Xliff> Do this:

[02:03] <saveNexit> I installed "perl6-zef" from debian repos

[02:03] <JRaspass> im going to guess that's old just based on the perl6 name :-P

[02:03] <Xliff> sudo dpkg --purge perl6-zef; mkdir <dir of your choice>; cd <dir of your choice>; git clone https://github.com/ugexe/zef.git; cd zef; raku -Ilib bin/zef install .

[02:04] <JRaspass> 0.6.2 in buster, 0.9.4 in bullseye

[02:04] <saveNexit> thank you for the all-in-one command :)

[02:04] <JRaspass> rakudo 2018.12 in deb, damn deb likes it old/stable :-(

[02:05] <JRaspass> if you get fed up with the distro raku, i personally use https://rakudup.github.io

[02:08] <Xliff> I use rakubrew

[02:08] <Xliff> https://rakubrew.org/

[02:08] <JRaspass> TIMTOWTDI :-P

[02:09] *** berber44 joined
[02:09] <Xliff> %-D

[02:09] <Xliff> OK. Gotta step away from work for the night.

[02:09] <Xliff> Have a great one!

[02:10] *** Xliff left
[02:10] <saveNexit> Xliff, thank you :)

[02:10] <saveNexit> the last part didnt work

[02:12] <JRaspass> use perl6 instead of raku, deb is old enough to have the old name

[02:12] <JRaspass> so perl6 -Ilib bin/zef install .

[02:13] <JRaspass> at least according to https://packages.debian.org/buster/amd64/rakudo/filelist

[02:16] <saveNexit> JRaspass, yeah, noticed that, installing raku instead :)

[02:16] <JRaspass> cool

[02:17] <saveNexit> installed, but still error with the command

[02:17] *** berber44 left
[02:18] <saveNexit> "bash: raku: command not found"

[02:18] <JRaspass> what did you install exactly?

[02:19] <saveNexit> this one here; https://paste.debian.net/plainh/9644e152

[02:21] <JRaspass> hmm, that looks like it should've worked

[02:21] *** Kaeipi left
[02:21] <JRaspass> oh its in opt

[02:21] <saveNexit> ah, indeed

[02:21] <JRaspass> $ /opt/rakudo-pkg/bin/add-rakudo-to-path https://github.com/nxadm/rakudo-pkg#set-the-path

[02:21] *** Kaiepi joined
[02:23] <saveNexit> hmm, I did, but still the command gives the above error

[02:24] *** Kaiepi left
[02:25] *** Kaiepi joined
[02:28] <saveNexit> maybe it requires logout-login..some installs do so

[02:30] *** brtastic left
[02:31] <saveNexit> for the moment I ran the command as you recommended, with perl6

[02:31] <saveNexit> seems working

[02:33] <saveNexit> yes, installed

[02:33] <JRaspass> cool beans

[02:34] <saveNexit> just waiting to see if the original error appears again

[02:38] <saveNexit> yeah, the error persists

[02:40] <JRaspass> poo

[02:41] <JRaspass> i have to crash now, hopefully someone else can help, sorry

[02:50] <saveNexit> sure, thank you very much, good night ;)

[02:52] *** guifa joined
[02:54] <guifa> .tell lizmat Dunno if you remember, but a while back I had a crazy BOOTHASH error when trying to do a slang.  I finally figured it out.  use nqp doesn’t import QAST classes anymore (it seems it used to), so I needed a use QAST:from<nqp> at the top et violà, error free compile

[02:54] <tellable6> guifa, I'll pass your message to lizmat

[02:55] *** Doc_Holliwood left
[02:58] *** tech_hutch joined
[03:05] *** Kaiepi left
[03:08] *** notagoodidea left
[03:15] *** frost-lab joined
[03:28] *** tech_hutch left
[03:34] *** Kaiepi joined
[03:48] *** jmchael left
[03:59] *** guifa2 joined
[04:07] *** Kaiepi left
[04:50] *** saveNexit left
[04:53] *** JRaspass left
[05:05] <brass> Is there any way to trick something into thinking it's not in a sink context?

[05:06] <tellable6> 2021-01-06T15:00:29Z #raku <tyil> brass if you still want to look into mac builds of rakudo star, you might be able to get some automated builds working with github actions, I just made it work (I think?) for GNU+Linux tarballs

[05:06] <brass> Oh interesting 

[05:14] *** parabolize left
[05:18] <guifa2> brass: are you just trying to supress the warning?

[05:21] <guifa2> Err I read that backwards.

[05:21] <guifa2> Maybe just a quick 'my $ = {something otherwise in sink}'

[05:25] <brass> guifa2: I'm doing a benchmark for fun and I'm trying to do something like `for ^100_000 { .is-prime(); }`

[05:25] <brass> To test out methods of using threads

[05:26] <brass> But it completes pretty much instantly no matter how large the number since it knows I'm not using the value 

[05:26] <brass> Which is pretty clever btw, nice job compiler

[05:27] <brass> `my $ = .is-prime` seems to work, I just wanted to know if there's a syntax trick for special cases like this :p 

[05:29] <moon-child> brass: wait'll the compiler gets fancier and knows to optimize out my $ = .is-prime :P

[05:29] <moon-child> usually when I'm benchmarking c programs I'll keep around a variable and xor the result of a computation with it.  Then return that variable at the very end

[05:31] <guifa2> For loops, just my @foo = do for { … }; say +@foo

[05:31] <guifa2> Then it's gotta keep stuff around

[05:31] <moon-child> yeah but then you're also measuring the performance of the allocator and of memcpy

[05:37] <guifa2> true, but it might be inconsequential depending on the inner runtime, especially since it should be mostly the same regardless the inner content

[05:51] <guifa2> also brass, curious that you would ask this question just now

[05:53] <guifa2> I'm trying to benchmark some stuff that's a bit tricky to do too 

[05:54] <brass> guifa2: What are you benchmarking?

[05:54] <guifa2> brass: my number formatter

[05:55] <brass> Oh neat

[05:59] <guifa2> I.... have to be doing something wrong

[05:59] <guifa2> there's no way I should be doing things basically at the same speed as the built in

[06:00] <brass> How do you mean?

[06:00] <guifa2> it kept saying both runs were taking the same time.  But… I'm an idiot and forgot to reset the start time ^_^

[06:01] <guifa2> Yeeesh.  16.3662375 vs 0.0032281

[06:03] <brass> LOL

[06:04] <guifa2> huh

[06:05] <guifa2> there must be something else there

[06:05] <guifa2> When I run it limiting myself to only NaN and Inf (which are special cased and immediately returned), my results are basically the same

[06:06] <guifa2> aha!

[06:06] <guifa2> 0.2118852 vs 0.0039411 — I was calling user-language *every single iteration*

[06:06] <guifa2> And that involves parsing a shell call

[06:14] *** linkable6 left
[06:14] *** evalable6 left
[06:15] <guifa2> I know the JS in browser passes things off to C, but it's still disheartening to see it go in 0.035.  I need to find other efficiencies

[06:15] <brass> Comparing to JS now?

[06:16] <brass> I mean JS engines only have massive teams of engineers at some of the wealthiest companies on earth optimizing them :p

[06:16] *** linkable6 joined
[06:16] <guifa2> Well, Intl.NumberFormat is just a wrapper for C code

[06:17] *** evalable6 joined
[06:17] <brass> Just wait until raku gets JIT in 2030

[06:17] <moon-child> ? raku has jit

[06:17] <brass> Actually it already has it doesn't it

[06:18] <brass> Oops don't I look like a fool

[06:18] <moon-child> but yes fewer engineer-hours thrown at it than js; and it's more difficult to optimize in some ways.  (Easier in others, but on the whole harder)

[06:20] <brass> I've still yet to understand how Raku's compiler works and how it's separated into rakudo/nqp/moarvm

[06:20] <guifa2> So I'm really just using JS as a proxy for C's performance. I know I won't get that fast, but I'd like to be closer to an order of magnitude slower, and not aiming for breaking two orders

[06:26] *** notandinus joined
[06:38] *** Altai-man joined
[06:38] *** rindolf joined
[06:39] *** rindolf left
[07:25] *** squashable6 left
[07:27] *** squashable6 joined
[07:31] *** cpan-raku left
[07:32] *** cpan-raku joined
[07:32] *** cpan-raku left
[07:32] *** cpan-raku joined
[07:40] <Geth> ¦ doc: 11c53e7af7 | tonyo++ (committed by Juan Julián Merelo Guervós) | doc/Language/modules.pod6

[07:40] <Geth> ¦ doc: mention fez in the dist ecosystem contribution

[07:40] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/11c53e7af7

[07:40] <linkable6> Link: https://docs.raku.org/language/modules

[08:04] *** brtastic joined
[08:11] *** Doc_Holliwood joined
[08:16] *** Kaiepi joined
[08:31] <guifa2> ooooh, here's a potential speed up

[08:40] <Geth> ¦ doc: 961c543952 | (JJ Merelo)++ | doc/Type/Whatever.pod6

[08:40] <Geth> ¦ doc: Indexes * more extensively

[08:40] <Geth> ¦ doc: 

[08:40] <Geth> ¦ doc: Closes #3728

[08:40] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/961c543952

[08:40] <Geth> ¦ doc: 4b4160aaec | (JJ Merelo)++ | doc/Language/variables.pod6

[08:40] <Geth> ¦ doc: Indexes %?RESOURCES

[08:40] <Geth> ¦ doc: 

[08:40] <linkable6> Link: https://docs.raku.org/type/Whatever

[08:40] <Geth> ¦ doc: Closes #3732

[08:40] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/4b4160aaec

[08:40] <linkable6> DOC#3728 [closed]: https://github.com/Raku/doc/issues/3728 [docs] Searching for '*' does not show 'Whatever' in the results

[08:40] <linkable6> Link: https://docs.raku.org/language/variables

[08:40] <linkable6> DOC#3732 [closed]: https://github.com/Raku/doc/issues/3732 [docs][search] Searching for 'resources' does not give '%?RESOURCES'

[09:04] <Geth> ¦ doc: 279df97341 | (JJ Merelo)++ | doc/Language/quoting.pod6

[09:04] <Geth> ¦ doc: Indexes "Unquoting"

[09:04] <Geth> ¦ doc: 

[09:04] <Geth> ¦ doc: Closes #3668

[09:04] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/279df97341

[09:04] <linkable6> Link: https://docs.raku.org/language/quoting

[09:04] <linkable6> DOC#3668 [closed]: https://github.com/Raku/doc/issues/3668 [docs] Unquoting is not indexed

[09:16] *** linkable6 left
[09:16] *** evalable6 left
[09:17] *** linkable6 joined
[09:17] *** evalable6 joined
[09:24] *** aluaces joined
[09:48] *** sjm_uk joined
[10:20] *** sena_kun joined
[10:21] *** Altai-man left
[10:24] <stoned75> Hello

[10:32] *** stoned75 left
[10:33] *** eseyman joined
[10:39] *** Sgeo left
[10:53] *** sno left
[11:29] *** JRaspass joined
[11:33] *** stoned75 joined
[11:40] <xinming> SmokeMachine: is it ok to rebless model to different classes?

[11:42] <xinming> SmokeMachine: something like   Model::User, if we check they are Model::User, we rebless it to Model::Admin, I know we can use roles mixin to objects. But I wish that we can have the objects directly rather than wrapping around these.

[12:07] *** pecastro joined
[12:12] *** Black_Ribbon left
[12:13] *** sjm_uk left
[12:26] *** aluaces left
[12:41] *** wamba joined
[12:43] *** aluaces joined
[12:53] *** sjm_uk joined
[13:00] *** JRaspass left
[13:32] <SmokeMachine> xinming: I’ve never tried

[13:36] *** frost-lab left
[13:39] *** xelxebar left
[13:39] *** stoned75 left
[13:40] *** xelxebar joined
[13:51] *** jmchael joined
[14:00] *** wamba left
[14:14] *** notagoodidea joined
[14:18] *** stoned75 joined
[14:19] *** Altai-man joined
[14:20] *** mowcat joined
[14:21] *** sena_kun left
[14:42] *** brtastic left
[15:04] *** ggoebel left
[15:09] *** JRaspass joined
[15:12] *** b2gills left
[15:19] *** notagoodidea left
[15:22] *** notagoodidea joined
[15:24] *** probablymoony left
[15:26] *** moony joined
[15:44] *** brtastic joined
[15:46] *** parabolize joined
[16:02] *** wamba joined
[16:05] *** mowcat left
[16:10] *** notagoodidea left
[16:13] *** xinming_ joined
[16:16] *** xinming left
[16:20] *** __jrjsmrtn__ left
[16:20] *** _jrjsmrtn joined
[16:34] *** sno joined
[16:41] *** eery left
[16:42] *** stoned75 left
[16:47] *** sjm_uk left
[16:48] *** stoned75 joined
[16:49] *** notagoodidea joined
[16:50] *** b2gills joined
[16:57] <SmokeMachine> is there any way of dynamically merge Supplies?

[17:01] <stoned75> may be https://docs.raku.org/type/Supply#method_merge

[17:08] *** Xliff joined
[17:14] <Geth> ¦ doc/printf: 0f60eb1a89 | (Stoned Elipot)++ | doc/Type/independent-routines.pod6

[17:14] <Geth> ¦ doc/printf: Remove references to Str.sprintf

[17:14] <Geth> ¦ doc/printf: 

[17:14] <Geth> ¦ doc/printf: While here minor rewriting of {s,}printf's descriptions, including the

[17:14] <Geth> ¦ doc/printf: acknowledgment that this document's sprintf section holds the reference

[17:14] <Geth> ¦ doc/printf: to printf format description :-)

[17:14] <Geth> ¦ doc/printf: review: https://github.com/Raku/doc/commit/0f60eb1a89

[17:15] <Geth> ¦ doc: stoned++ created pull request #3775: Remove references to Str.sprintf

[17:15] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3775

[17:16] <Geth> ¦ doc: d6ffb796ec | (Stoned Elipot)++ | 2 files

[17:16] <Geth> ¦ doc: Fix references to sprintf routine

[17:16] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d6ffb796ec

[17:19] *** domidumont joined
[17:25] *** sjm_uk joined
[17:28] <guifa> How would I create a sub given a QAST::Block ?

[17:44] *** kensanata joined
[17:54] <Xliff> guifa: That's a good question. :)

[17:54] *** Sgeo joined
[17:54] <guifa2> ALthough it might be best for me to wait until RakuAST and leave it as the EVAL code for now

[17:55] <Xliff> Yes, but wait how long? I'm trying to be patient.

[17:55] <SmokeMachine> stoned75: but using merge you can't change after done, right? you can't add new supplies

[17:56] <stoned75> merge again ?

[17:56] <SmokeMachine> but that would create a new supply...

[17:57] <guifa2> Xliff: I don't know.  I know it's one of those things that needs to be done right, and obviously we're in Raku, we don't mind the long road to perfection ha

[17:57] <Xliff> Ha, indeed

[17:57] <guifa2> But in the meantime I am trying to eek out what I can with things written in pure Raku

[17:57] <Xliff> And you are correct, sir. It needs to be done right.

[17:57] <Xliff> So what's the use case for what you are trying?

[17:57] <guifa2> Number formatter

[17:57] <Xliff> Ah.

[17:58] <Xliff> I think lizmat was trying to do the same thing with the sprintf-refactor.

[17:58] <lizmat> actually, sprintf *is* already refactored in the rakuAST branch

[17:58] <tellable6> hey lizmat, you have a message: https://gist.github.com/4d9050b15027838cff26c488bf781d53

[17:58] <Xliff> lizmat++

[17:59] <SmokeMachine> I wanted something like a migrate (https://docs.raku.org/type/Supply#method_migrate) but merging instead of substituting...

[17:59] <Xliff> soruceable: "%d".sprintf(1)

[17:59] <sourceable6> Xliff, https://github.com/rakudo/rakudo/blob/65a5cce/src/core.c/Cool.pm6#L391

[17:59] <Xliff> LOL!

[18:00] <lizmat> yep, that's because, well... 

[18:00] <lizmat> probably should make that a multi?

[18:00] * guifa2 goes and peaks at lizmat's algorithm to see if there's something he can do better for generating numbers

[18:01] <lizmat> guifa2: please!

[18:01] <Xliff> lizmat: Where is it?

[18:01] <Xliff> Rakudo::Internals.initialize-sprintf-handler?

[18:01] <lizmat> somewhere in src/core.e if I recall correctly

[18:03] <lizmat> src/core.e/Formatter.pm6

[18:03] <Xliff> Formatter.pm6

[18:03] <guifa2> lizmat: to be clear, I'm meaning I need to steal your code ;-) I highly doubt what I have is faster

[18:03] <lizmat> yeah, but please note that that code only works on the rakuast branch

[18:04] *** melezhik joined
[18:05] <Xliff> lizmat: Maybe you can help me. I'm getting weird errors when trying to use dynamics to simplify some database code.

[18:05] <lizmat> there's also a newer-sprintf branch that runs on string EVAL

[18:05] <lizmat> guifa2 ^^

[18:05] <Xliff> Please see - https://gist.github.com/Xliff/fcf214158ad5d9da0bf5ae25b9b72dc0

[18:06] <melezhik> .

[18:06] <guifa2> hmm I'll check it out

[18:07] <melezhik> tony-o I send you a email with Sparky CICD for zef brief description, will be interested to see your thoughts ... maybe anything else we may add to this?

[18:07] <Xliff> Would a better alternative to $m be \m?

[18:07] <melezhik> zef -> fez

[18:07] <Xliff> melezhik: Would that the zef from Bizarro-world?

[18:08] <Xliff> That would make it a distr uninstaller, wouldn't it? 

[18:08] * Xliff whistles innocently...

[18:08] <guifa2> right now basically I'm taking the number, and calculating each $digit manually (flooring the result of dividing by the current order of magnitude, and then subtract the digit * the current order of magnitude), and then using $string-result ~= @digits[$digit].  I'm not sure a more efficient algorithm though.

[18:08] <Xliff> .oO( I wonder how long it will take for him to cop that I'm not at all being serious... )

[18:08] * lizmat only has some Steely Dan images with "fez"

[18:08] <melezhik> Xliff I mean this https://github.com/tony-o/raku-fez

[18:09] <Xliff> Ah! Nice.

[18:09] <melezhik> and I made a CICD for that - http://161.35.142.50/report/fez-test/257

[18:09] <Xliff> I will have to use that when (one of these days) I can start releasing all of this stuff I've been working on.

[18:10] <lizmat> https://www.youtube.com/watch?v=KCdKBHdPz30   # tune to fez  :-)

[18:11] *** hungrydonkey joined
[18:11] <lizmat> Xliff: have you tried using :$default-query! instead ?

[18:11] *** melezhik left
[18:12] *** hungrydonkey left
[18:12] *** hungrydonkey joined
[18:14] <stoned75> for me fez is the city

[18:14] *** hungryd71 joined
[18:14] *** hungrydonkey left
[18:16] <Geth> ¦ doc: 2c82005c95 | (Stoned Elipot)++ (committed by Juan Julián Merelo Guervós) | doc/Type/independent-routines.pod6

[18:16] <Geth> ¦ doc: Remove references to Str.sprintf

[18:16] <Geth> ¦ doc: 

[18:16] <Geth> ¦ doc: While here minor rewriting of {s,}printf's descriptions, including the

[18:16] <Geth> ¦ doc: acknowledgment that this document's sprintf section holds the reference

[18:16] <Geth> ¦ doc: to printf format description :-)

[18:16] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2c82005c95

[18:16] <linkable6> Link: https://docs.raku.org/type/independent-routines

[18:19] <Xliff> lizmat: I can try. However isn't that the same thign?

[18:19] <Xliff> s/thign/thing/

[18:19] <lizmat> yeah, but I know that Cro does some things that cause it to need EVAL

[18:19] *** sena_kun joined
[18:19] <lizmat> (which is also one of the reasons jnthn is working on rakuAST)

[18:20] <lizmat> and it feels to me that it's not expecting "is required" as oppossed to !  and not handling it correctly

[18:21] *** Altai-man left
[18:29] <Xliff> lizmat++

[18:29] <Xliff> I'm rewriting things, now. Thanks!

[18:30] <lizmat> yw

[18:30] <lizmat> you might want to file a cro issue for that

[18:31] <Xliff> It's not a Cro issue, unfortunately.

[18:31] <Xliff> It's a raku one. 

[18:32] <Xliff> Just finished rewriting and took Cro out of the equation and I'm still getting the error.

[18:32] <Xliff> Keeps saying "Lexical with name $m does not exist in this frame'

[18:32] <Xliff> Even though it's clearly in the parameter list.

[18:32] *** Doc_Holliwood left
[18:33] <Xliff> O M G

[18:34] <lizmat> gist without cro ?

[18:34] *** rindolf joined
[18:35] <Xliff> Sure, one sec.

[18:35] <Xliff> Well... assigning $m to a lexical $r still doesn't work.

[18:35] <Xliff> https://gist.github.com/Xliff/fcf214158ad5d9da0bf5ae25b9b72dc0

[18:36] <Xliff> The compunit in its entirety is in a comment.

[18:38] <lizmat> Could not find Bizzell::Roles::Template   :-(

[18:38] *** hungryd71 left
[18:39] *** hungrydonkey joined
[18:39] *** hungrydonkey left
[18:41] <guifa2> aha! I think I found an optimization.  ** always coerces to a real, right?

[18:41] <MasterDuke> guifa2: for large numbers there are more efficient algorithms. i implemented barrett reduction in pure-raku and it was faster than libtommath's stringification around 2**600

[18:42] <lizmat> m: dd (42 ** 2).^name

[18:42] <camelia> rakudo-moar 65a5cce11: OUTPUT: «"Int"␤»

[18:42] <Xliff> lizmat: You can remove Bizzell::Roles::Template.

[18:42] *** sjm_uk left
[18:42] <lizmat> then it compiles for me 

[18:43] <Xliff> Really?

[18:43] <Xliff> \o/

[18:44] <Xliff> WTH is that compunit doing to mess the other one up, I wonder.

[18:44] <MasterDuke> guifa2: but there are simpler divide-and-conquer algorithms that should come into play at slightly smaller numbers

[18:45] <Xliff> lizmat: Updated to include B::R::T code

[18:46] <Xliff> lizmat: The only active bit there would be the TWEAK...

[18:47] <guifa2> MasterDuke: I'm also not sure if it's the math that's slow, tbh.  I could be running into an issue of having multiple string concats.  I tried doing a list and join() but that was actually slower, and profiling isn't working on this machine for some reason

[18:47] <Xliff> Just a 'use B::R::T' is enough to cause the issue.

[18:48] <MasterDuke> profiling isn't working? how's that?

[18:49] <guifa2> I dunno.  It's greyed out in Comma.  

[18:50] <Xliff> lizmat: ODD... the error is triggered by something in method render()

[18:50] <Xliff> I can comment out that method and the error goes away.

[18:51] <lizmat> |$ast.compile   ??

[18:51] <lizmat> you need to slip the result of a compile?

[18:52] <Xliff> Yes, that returns a hash.

[18:52] <Xliff> I lifted that from Cro

[18:53] *** Doc_Holliwood joined
[18:53] <Xliff> Oddly enough, after uncommenting bits of B::R::T out in stages, I've got it to compile with everything enabled....

[18:53] <Xliff> So odd...

[19:02] *** domidumont left
[19:06] *** brtastic left
[19:06] *** brtastic joined
[19:07] <Xliff> *sigh* -- OK. So things work without B::R::T

[19:07] <Xliff> That's progress at least. I'll have to see what in that compunit is triggering the problem. 

[19:08] <Xliff> It all looks like valid Raku, so I'm having a hard time seeing what the issue could be.

[19:08] *** jmchael left
[19:09] *** mowcat joined
[19:10] <MasterDuke> timotimo, sena_kun: know why profiling would be greyed out in comma?

[19:17] *** Sam69 joined
[19:19] <Sam69> commit: HEAD say (1,2).sort eqv (1,2)

[19:19] <committable6> Sam69, ¦HEAD(65a5cce): «False␤»

[19:20] <Sam69> commit: releases say (1,2).sort eqv (1,2)

[19:20] <guifa2> MasterDuke: https://gist.github.com/alabamenhu/0667eb234edd433e3b513601b99e7d54 <-- that's the algorithm I'm using right now, and it's about 20x slower than Int.Str, any ideas what could speed it up?

[19:20] <committable6> Sam69, https://gist.github.com/b0003adcb31e6ddc302d25012560e230

[19:22] <Sam69> commit:  2017.02 say (1,2).sort.perl

[19:22] <committable6> Sam69, ¦2017.02: «(1, 2).Seq␤»

[19:23] <Sam69> commit:  2016.02 say (1,2).sort.perl

[19:23] <committable6> Sam69, ¦2016.02: «(1, 2)␤»

[19:36] <Sam69> commit:  2016.02 say (1,2).perl

[19:36] <committable6> Sam69, ¦2016.02: «(1, 2)␤»

[19:36] <Sam69> commit:  2016.02 say (1,2).gist

[19:36] <committable6> Sam69, ¦2016.02: «(1 2)␤»

[19:36] <Sam69> commit:  2016.02 say (1,2).WHAT

[19:36] <committable6> Sam69, ¦2016.02: «(List)␤»

[19:36] <Sam69> commit:  2016.02 say (1,2).sort.WHAT

[19:36] <committable6> Sam69, ¦2016.02: «(List)␤»

[19:36] <Sam69> commit:  2017.02 say (1,2).sort.WHAT

[19:36] <committable6> Sam69, ¦2017.02: «(Seq)␤»

[19:37] <Sam69> commit:  2017.02 say (1,2).WHAT

[19:37] <committable6> Sam69, ¦2017.02: «(List)␤»

[19:37] <Sam69> commit:  2017.02 say LIST eqv Seq

[19:37] <committable6> Sam69, ¦2017.02: «04===SORRY!04=== Error while compiling /tmp/OTnnqIc7ew␤Undeclared name:␤    LIST used at line 1. Did you mean 'List'?␤Undeclared routine:␤    eqv used at line 1␤␤ «exit code = 1»»

[19:37] <Sam69> commit:  2017.02 say List eqv Seq

[19:37] <committable6> Sam69, ¦2017.02: «Cannot look up attributes in a Seq type object␤  in block <unit> at /tmp/5uljJFDgI_ line 1␤␤ «exit code = 1»»

[19:38] <timotimo> MasterDuke: what does your launch/run configuration look like?

[19:39] <MasterDuke> not me, guifa2

[19:41] <Sam69> commit:  HEAD say LIST eqv Seq

[19:41] <committable6> Sam69, ¦HEAD(65a5cce): «04===SORRY!04=== Error while compiling /tmp/WXbJ_v2f29␤Undeclared name:␤    LIST used at line 1. Did you mean 'List'?␤Undeclared routine:␤    eqv used at line 1␤␤ «exit code = 1»»

[19:41] <Sam69> commit:  HEAD say List eqv Seq

[19:41] <committable6> Sam69, ¦HEAD(65a5cce): «False␤»

[19:41] *** kensanata left
[19:51] *** mark[m]2 joined
[19:53] <guifa2> MasterDuke: yeah, I'm looking at other algorithms like libc's itoa, and that's about a simple as I can get it. I reduced it down to just "sub (--> 'NaN') { } " and tried running it with that, and I *still* can't beat .Str'ing a 15-digit integer.  There must just be some crazy call optimization going on for .Str

[19:56] <guifa2> And I'm beating .base(10) for long fractionals by a healthy margin so I think I should stop trying to optimize for now :-)

[20:06] *** JRaspass left
[20:10] *** xelxebar left
[20:15] *** xelxebar joined
[20:20] <sena_kun> MasterDuke, grayed out like what?

[20:20] <sena_kun> MasterDuke, the menu item, you mean?

[20:29] <Geth> ¦ doc/lastcall: 2197ec2ea4 | (Stoned Elipot)++ | 2 files

[20:29] <Geth> ¦ doc/lastcall: lastcall is an independent routine ref #3767

[20:29] <Geth> ¦ doc/lastcall: review: https://github.com/Raku/doc/commit/2197ec2ea4

[20:29] <Geth> ¦ doc: stoned++ created pull request #3776: lastcall is an independent routine ref #3767

[20:29] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3776

[20:29] *** Black_Ribbon joined
[20:29] <linkable6> DOC#3767 [open]: https://github.com/Raku/doc/issues/3767 [docs] lastcall is most probably in the wrong place

[20:30] <guifa> sena_kun: yeah, that’s what’s happening to me, I can run tests / debug / coverage, but timeline and profiling are greyed out

[20:31] <stoned75> https://github.com/Raku/doc/pull/3776 result in a surprisingly titled page

[20:37] <sena_kun> guifa, what run configuration type do you use?

[20:38] <guifa2> test file

[20:40] <guifa2> Is that all it is? I just need to put it in a script file rather than a test file?

[20:40] <guifa2> wow. I feel like a fool now

[20:40] <guifa2> sena_kun++ ty

[20:43] <sena_kun> guifa2, glad I could help. :)

[20:43] <Xliff> sena_kuuuuun!

[20:43] <Xliff> sena_kun: Have you ever needed to use Cro::WebApp::Templates with the template data in a Str rather than a file?

[20:44] <Xliff> See second comment, here: https://gist.github.com/Xliff/fcf214158ad5d9da0bf5ae25b9b72dc0

[20:44] <sena_kun> Xliff, never, I guess. If you really want, can workaround with a temporary file, I guess? But compiling each time will be, ahem, slow.

[20:44] <Xliff> That role is causing weird compile errors, but if used in isolation, it works.

[20:44] *** cpage joined
[20:45] <Xliff> sena_kun: So is that role a close approximation of what I need?

[20:45] <sena_kun> Xliff, rakudo ocmpilation-level errors are not really in my field of expertise, I'm afraid.

[20:45] <Xliff> :(

[20:46] <Xliff> When does jnthn come off sabatical?

[20:57] *** matiaslina joined
[21:07] *** Sam69 left
[21:09] <guifa> Alright, code analyzed.  Looks like the bulk of my time is spent with div and .[ ], so that’s probably about as fast as I can get

[21:28] *** Xliff left
[21:38] *** sena_kun left
[21:48] *** sam48 joined
[21:48] <sam48> commit:  HEAD say (1,2) Z (3,4)

[21:48] <committable6> sam48, ¦HEAD(65a5cce): «((1 3) (2 4))␤»

[21:49] <sam48> commit:  HEAD for (1,2) Z (3,4) -> $a, $b { say $a,$b}

[21:49] <committable6> sam48, ¦HEAD(65a5cce): «(1 3)(2 4)␤»

[21:53] <sam48> commit:  HEAD for (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0, Inf) Z (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0, Inf) -> $a, $b { say $a,$b}

[21:53] <committable6> sam48, https://gist.github.com/5c7924591de5a11c52b95fc8f6387921

[21:55] <sam48> commit:  HEAD for (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0) Z (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0) -> $a, $b { say $a,$b}

[21:55] <committable6> sam48, ¦HEAD(65a5cce): «(0.005 0.005)(0.01 0.01)␤(0.025 0.025)(0.05 0.05)␤(0.075 0.075)(0.1 0.1)␤(0.25 0.25)(0.5 0.5)␤(0.75 0.75)(1 1)␤(2.5 2.5)(5 5)␤(7.5 7.5)(10 10)␤»

[21:58] <sam48> commit:  2017.02 for (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0, Inf) Z (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0, Inf) -> $a, $b { say $a,$b}

[21:58] <committable6> sam48, https://gist.github.com/56f116c901128e08f352f98bfa15c601

[22:02] <sam48> commit:  HEAD for (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0,11,12) Z (.005, .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 2.5, 5.0, 7.5, 10.0,11,12) -> $a, $b { say $a,$b}

[22:02] <committable6> sam48, ¦HEAD(65a5cce): «(0.005 0.005)(0.01 0.01)␤(0.025 0.025)(0.05 0.05)␤(0.075 0.075)(0.1 0.1)␤(0.25 0.25)(0.5 0.5)␤(0.75 0.75)(1 1)␤(2.5 2.5)(5 5)␤(7.5 7.5)(10 10)␤(11 11)(12 12)␤»

[22:09] *** sam48 left
[22:56] *** notagoodidea left
[23:16] *** brtastic left
[23:20] *** shlomif joined
[23:22] *** rindolf left
[23:23] *** shlomif is now known as rindolf

