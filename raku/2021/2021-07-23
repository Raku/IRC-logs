[00:03] *** reportable6 left
[00:03] *** Doc_Holliwood left
[00:53] *** RandalSchwartz left
[01:13] *** RandalSchwartz joined
[01:13] *** RandalSchwartz left
[02:13] *** bisectable6 left
[02:13] *** squashable6 left
[02:13] *** statisfiable6 left
[02:13] *** releasable6 left
[02:13] *** unicodable6 left
[02:13] *** notable6 left
[02:13] *** shareable6 left
[02:13] *** bloatable6 left
[02:13] *** benchable6 left
[02:13] *** coverable6 left
[02:13] *** committable6 left
[02:13] *** tellable6 left
[02:13] *** quotable6 left
[02:13] *** greppable6 left
[02:13] *** sourceable6 left
[02:13] *** nativecallable6 left
[02:14] *** bloatable6 joined
[02:15] *** benchable6 joined
[02:15] *** squashable6 joined
[02:15] *** bisectable6 joined
[02:15] *** greppable6 joined
[02:15] *** tellable6 joined
[02:15] *** sourceable6 joined
[02:16] *** coverable6 joined
[02:16] *** statisfiable6 joined
[02:16] *** unicodable6 joined
[02:16] *** quotable6 joined
[02:26] *** frost joined
[03:03] *** canw joined
[03:04] <canw> How to read password from keyword not displaying it in Raku?

[03:08] *** Xliff left
[03:17] *** canw left
[03:20] *** canw joined
[03:25] *** frost left
[03:42] *** nativecallable6 joined
[03:50] *** shareable6 joined
[03:52] *** melezhik left
[03:54] *** frost joined
[03:55] <Util> m:say <1 1.1 1.10  2 2.1 2.3 2.30>.sort({ .comb(/\d+/)».Int });

[03:56] <Util> m: say <1 1.1 1.10  2 2.1 2.3 2.30>.sort({ .comb(/\d+/)».Int });

[03:56] <camelia> rakudo-moar b4d33982a: OUTPUT: «(1 1.1 1.10 2 2.1 2.3 2.30)␤»

[03:56] <Util> tbrowder: Is this what you wanted? ^^^

[03:57] <Util> It is from http://rosettacode.org/wiki/Sort_a_list_of_object_identifiers#Raku (which can have multiple dots), 

[03:57] <Util> and works because when Raku compares two lists, it compares first elements, then goes to 2nd elements only if 1st were a tie, etc.

[03:57] <Util> So, making Numerics into lists of 1 or 2 elements (depending on pure-Int vs has-a-frac-part) works,

[03:57] <Util> provided we turn all the .comb'ed bits back into numbers with hyper .Int.

[04:40] *** evalable6 joined
[04:41] *** canw left
[04:42] *** canw joined
[05:12] *** Guest9 joined
[05:22] *** ufobat_ joined
[05:28] *** releasable6 joined
[05:56] *** canw left
[06:03] *** reportable6 joined
[06:17] *** linkable6 joined
[06:23] *** Guest9 left
[06:49] *** Doc_Holliwood joined
[06:52] *** Sgeo left
[06:59] *** Nahita joined
[07:03] *** ufobat__ joined
[07:03] *** committable6 joined
[07:06] *** ufobat_ left
[07:14] *** Eddward__ left
[07:15] *** abraxxa left
[07:25] <mykhal> Util: nice. also behaves the same like version sort for debatable cases like -2, 1.04

[07:28] *** Doc_Holliwood left
[07:30] <MasterDuke> canw: you'll have to use something like https://modules.raku.org/dist/Terminal::Readsecret:github:titsuki or https://modules.raku.org/dist/Terminal::Getpass:cpan:TITSUKI

[07:30] <tellable6> MasterDuke, I'll pass your message to canw

[07:39] *** patrickb joined
[07:56] <mykhal> moon-child: ok, these :$_ 's are mentioned at least in https://docs.raku.org/language/operators#term_{_} , not very explicit though

[08:39] *** evalable6 left
[08:39] *** linkable6 left
[08:41] *** linkable6 joined
[08:47] <raydiak> pair forms (including :$) are also covered or mentioned in https://docs.raku.org/type/Pair https://docs.raku.org/language/syntax#Adverbial_pairs_(colon_pairs) https://docs.raku.org/language/glossary#Colon_pair_and_colon_list https://docs.raku.org/language/glossary#Adverbial_pair https://docs.raku.org/type/Signature#Positional_vs._named_arguments and https://docs.raku.org/type/Capture

[08:51] <mykhal> raydiak: tanks. i was adressing special case with $_ , where i feel _ is not supposed to me exactly "name"

[08:52] <mykhal> .. s/me/be/

[08:52] *** patrickb left
[08:52] <raydiak> gotcha. it's just another variable, works the same way as usual :$whatever

[08:56] <mykhal> m: say :$  # .. i have spotted even standalone $

[08:56] <camelia> rakudo-moar b4d33982a: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 :$  # .. i have spotted even standalone␤Confused␤at <tmp>:1␤------> 3say :$7⏏5  # .. i have spotted even standalone $␤    expecting any of:…»

[08:56] <mykhal> m: say :($)

[08:56] <camelia> rakudo-moar b4d33982a: OUTPUT: «($)␤»

[08:56] *** patrickb joined
[08:57] <raydiak> that's a placeholder. it truly has no name

[08:57] <lizmat> it's also the nameless state variable

[08:58] <lizmat> m: sub a() { say $++ }; a for ^10

[08:58] <camelia> rakudo-moar b4d33982a: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[08:59] <raydiak> that's cool, I didn't know that worked

[09:02] <raydiak> I've written (state $)++ to do that in the past

[09:02] <mykhal> m: say ( ++$ for ^5 )

[09:02] <camelia> rakudo-moar b4d33982a: OUTPUT: «(1 2 3 4 5)␤»

[09:02] <mykhal> m: say ( -$ for ^5 )

[09:02] <camelia> rakudo-moar b4d33982a: OUTPUT: «Use of uninitialized value of type Any in numeric context␤(0 0 0 0 0)␤  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context…»

[09:04] *** Nahita left
[09:09] *** patrickb left
[09:13] <raydiak> m: say $ += $++ for ^5 # triangular numbers

[09:13] <camelia> rakudo-moar b4d33982a: OUTPUT: «0␤1␤3␤6␤10␤»

[09:14] <raydiak> kinda fun, even if it is a bit illegible

[09:15] <Altreus> I just discovered that sort is sort-by if the sub has chirality of 1

[09:16] <Altreus> Signatures make so much magic possible!

[09:16] <mykhal> m: say ( !$ for ^2 )  # ??

[09:16] <camelia> rakudo-moar b4d33982a: OUTPUT: «(True True)␤»

[09:17] <Altreus> oh I missed that someone actually exemplified it in here so actually I didn't need to discover it

[09:17] <mykhal> Altreus: i wonder what chitality means in this non-geometry, non-physics, non-chemistry context ...

[09:17] <moon-child> arity, probably

[09:17] *** patrickb joined
[09:17] <mykhal> :)

[09:21] <Altreus> arity yes

[09:21] <Altreus> I knew it was one of those

[09:21] <Altreus> chirality ... arity ... charity ... something like that

[09:22] <Altreus> Anyway, a language that easily supports different options for the same procedure really speaks to me after more than a decade of perl5

[09:32] <mykhal> Altreus: ok, i now get that you were probably referring to Util's sort post

[09:33] <mykhal> (with unwanted language associations)

[09:37] <mykhal> m: say !(Any)

[09:37] <camelia> rakudo-moar b4d33982a: OUTPUT: «True␤»

[09:37] <mykhal> m: say +(Any)

[09:37] <camelia> rakudo-moar b4d33982a: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[09:51] <mykhal> m: say +()

[09:51] <camelia> rakudo-moar b4d33982a: OUTPUT: «0␤»

[10:17] *** linkable6 left
[10:18] <Altreus> a sort post?

[10:20] *** linkable6 joined
[10:25] *** sena_kun joined
[10:25] <mykhal> Altreus: a post on sorting, or, just a post (or multiple consecutive ones), there are no other posts of him/her in a couple of days

[10:27] <mykhal> m: say (0+0, [+], 0 gcd 0)

[10:27] <camelia> rakudo-moar b4d33982a: OUTPUT: «(0 0 0)␤»

[10:27] <mykhal> m: say ( [gcd], )

[10:27] <camelia> rakudo-moar b4d33982a: OUTPUT: «No zero-arg meaning for infix:<gcd>␤  in block <unit> at <tmp> line 1␤␤»

[10:29] <Altreus> I was referring to the discussion in which you pointed out we were sorting things like version numbers

[10:30] <Altreus> i.e. you can just pass *.Version to sort and it will DTRT

[10:31] <Altreus> probably some sort of schwartzian thing

[10:31] <MasterDuke> yeah, it'll do a schwartzian transform for that case

[10:33] <mykhal> Altreus: ah, ok. but there, variadicity is no as obvious as in Util's .sort({ .comb/\d+/>>.Int })

[10:34] <mykhal> .. plus parens around regexp

[10:51] *** Nahita joined
[11:17] *** Doc_Holliwood joined
[11:26] *** sono left
[11:47] *** notable6 joined
[12:02] *** reportable6 left
[12:03] *** Doc_Holliwood left
[12:20] *** yewscion joined
[12:20] *** Doc_Holliwood joined
[12:25] *** yewscion left
[13:11] *** linkable6 left
[13:33] *** Sgeo joined
[13:53] *** Eddward__ joined
[14:12] *** Doc_Holliwood left
[14:20] *** melezhik joined
[14:20] <melezhik> .

[14:28] *** reportable6 joined
[14:32] *** Doc_Holliwood joined
[14:49] <Altreus> ;

[15:04] <mykhal> m: say <,>

[15:04] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «,␤»

[15:16] *** linkable6 joined
[15:34] *** Doc_Holliwood left
[15:54] *** silug left
[16:00] *** silug joined
[16:03] <mykhal> m: say { $_ ?? &?BLOCK($_-1) * $_ !! 1 }(10)

[16:03] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «3628800␤»

[16:09] *** silug left
[16:12] *** silug joined
[16:21] *** Nahita left
[16:45] *** Kaiepi left
[16:51] *** Kaiepi joined
[16:52] *** Kaipi joined
[16:52] *** Kaiepi left
[16:57] *** Kaipi left
[16:58] *** Kaipi joined
[17:01] *** Kaipi left
[17:02] *** Merfont joined
[17:02] *** Merfont left
[17:03] *** Merfont joined
[17:08] *** Nahita joined
[17:08] *** Merfont left
[17:10] *** ufobat__ left
[17:11] *** Kaiepi joined
[17:14] *** Kaipi joined
[17:16] *** Kaiepi left
[17:18] *** Kaipi left
[17:18] *** Kaiepi joined
[17:39] *** sena_kun left
[18:02] *** reportable6 left
[18:03] *** Nahita left
[18:05] *** reportable6 joined
[18:14] *** Nahita joined
[18:19] *** Doc_Holliwood joined
[18:25] *** Nahita left
[18:35] *** archenoth joined
[18:37] *** Oshawott left
[18:38] *** Oshawott joined
[18:40] *** archenoth left
[18:40] *** Kaiepi left
[18:41] *** Kaiepi joined
[18:56] <mykhal> fignting with Match object, getting an excessive space somehow, minimal example:

[18:56] <mykhal> say: "x12x3".subst(:g, /['x'(\d+)]+/, { $/.caps>>.value })

[18:56] <mykhal> m: say "x12x3".subst(:g, /['x'(\d+)]+/, { $/.caps>>.value }).raku

[18:56] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «"12 3"␤»

[19:00] <mykhal> .. i need that [...]+ s better example would be this (and expected result is "0zzz123" :

[19:01] <mykhal> m: say "x0zzzx12x3".subst(:g, /['x'(\d+)]+/, { $/.caps.grep(*.key == 0)>>.value }).raku

[19:01] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «"0zzz12 3"␤»

[19:02] <mykhal> this Match object is somewhat chunky

[19:04] <moon-child> m: say S:g/'x' (\d+)/$0/ given 'x0zzzx12x3'

[19:04] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «0zzz123␤»

[19:05] <mykhal> nice, however I want to beat this { $/ } code solution

[19:05] <moritz> don't use the outer + in your subsitution regex

[19:06] <moon-child> mykhal: then

[19:06] <moon-child> say "x0zzzx12x3".subst(:g, /['x'(\d+)]+/, { $/.caps.grep(*.key == 0)>>.value.join }).raku

[19:06] <moritz> the problem is that that  $/.caps>>.value returns a list of two values, because the + made it match twice

[19:06] <moon-child> m: say "x0zzzx12x3".subst(:g, /['x'(\d+)]+/, { $/.caps.grep(*.key == 0)>>.value.join }).raku

[19:06] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «"0zzz123"␤»

[19:06] <moritz> and subst wants a string, so it joins the two values, which defaults to inserting a space

[19:06] <moritz> m: say ~<a bc>

[19:06] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «a bc␤»

[19:07] <moritz> or you can use $/.caps>>.value.join('')

[19:07] <moritz> that should also get rid of that space

[19:08] <moon-child> no need for (''), can just use .join as in my example above

[19:08] <moritz> aye, but it makes the difference less obvious

[19:08] <moon-child> ne, fair enough

[19:11] <mykhal> moon-child, moon-child : thanks, i was panicking of seeing miltiple "0" keys in hash

[19:11] <mykhal> during debugging

[19:12] <mykhal> or maybe in list of pairs

[19:16] <mykhal> i think i will continue using perl -pe / -ne for quick text filtering and processing, for some time :)

[19:18] *** cooper left
[19:22] <moon-child> startup time has gotten better, but is still a reason to prefer perl over raku for those sorts of pipelines

[19:22] <moon-child> e.g. over 100 runs I get perl -e exit is 66x faster than raku -e exit

[19:24] <mykhal> did you try jvm instead of m ? :)

[19:27] <moon-child> no

[19:27] <moon-child> I don't even build jvm rakudo anymore; it takes forever to build and doesn't work properly

[19:29] <ugexe> i built it on a raspberry pi 2 running net-bsd like 8 years ago... it took like 4 days

[19:29] <mykhal> but perl then might be even 666x faster

[19:31] <mykhal> i tries on js, but failed, and it's not even listed in raku.org/compilers

[19:33] <moon-child> yeah js requires a really old version of node

[19:55] <mykhal> moon-child, moritz: reason for such complicated regex was, taht I was "hot-fixing" note entirely correct Rosettacode URL decoding example. It's already added as improved variant. https://rosettacode.org/wiki/URL_decoding#Raku

[19:56] <mykhal> i guess it can be yet simpler

[20:12] *** Nahita joined
[20:12] *** Nahita left
[20:12] *** sono joined
[20:31] <moon-child> that red code snippet seems somewhat suspect

[20:31] <moon-child> I might as easily say 'use URI::Encode; uri_decode whatever'

[20:33] <mykhal> you mean red $url string? these are from test cases at page top

[20:35] <mykhal> but agree, for comparison, that Red (lang) example below is too short. 

[20:36] <mykhal> i saw it forst time while ago and saw it's wrong for multibyte char.

[21:06] <mykhal> moon-child: oh you meant Red :)

[21:07] <moon-child> yes

[21:10] <mykhal> well, not only Raku has strangely named functions (like take for yield), here Red has dehex which does nothing with "deadbeef", but un-urlquotes

[21:12] *** linkable6 left
[21:14] <japhb> Naming is hard, let's do quantum physics instead.

[21:14] *** linkable6 joined
[21:15] <mykhal> m: say "".^method_names.grep: /hex/

[21:15] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «()␤»

[21:16] <moritz> m: say 255.base(16)

[21:16] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «FF␤»

[21:16] <moritz> m: say :16('FF')

[21:16] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «255␤»

[21:16] <moon-child> gather/take is from mathematica

[21:17] <moritz> somehow I am reminded of a quote in one of my favorite books, "Those that yield are not always weak"

[21:17] *** evalable6 joined
[21:17] <moon-child> (or, at least, it also appears in mathematica.  I don't know if that's where it originates, nor if it's where raku got the names)

[21:22] *** xkr47 left
[21:22] *** xkr47 joined
[21:24] <mykhal> so Raku is not always weak as well, can yield too according to doc, I meant Python's yield

[21:27] *** Doc_Holliwood left
[21:38] *** cognominal joined
[21:39] <mykhal> moon-child: i meat hex as in (un)hexlify, i see it can be dobe with experimental pack

[21:39] *** leedo joined
[21:41] *** cognominal_ left
[21:41] *** leedo_ left
[21:46] *** patrickb left
[21:47] <mykhal> m: use experimental :pack; say pack("H*", "01cafe").contents

[21:47] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «(1 202 254)␤»

[21:52] *** yewscion joined
[21:58] <mykhal> m: say "01cafe".comb(2)>>.parse-base(16)

[21:58] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «(1 202 254)␤»

[22:01] <moon-child> m: say 5.base('camel')

[22:01] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «🐫🐪🐫␤»

[22:07] *** yewscion left
[22:19] <mykhal> nice eggs

[22:22] <mykhal> m: say 4.base("beer")

[22:22] <camelia> rakudo-moar f26a1bcd2: OUTPUT: «🍻🍺🍺␤»

[22:31] *** frost left
[22:39] *** codesections joined
[22:40] <codesections> .

[22:40] <tellable6> 2021-06-27T01:32:36Z #raku <avuserow> codesections yeah, that only tends to be an issue when I'm subscripting without an intermediate variable, like `for %a<b>.keys {}` vs `my %b := %a<b>; for %b.keys {}`

[22:50] <mykhal> moon-child: but i will need some emo terminal, changing from urxvt to termite isn't enough to see these (had to map uninames or copy to firefox data:text/html,<html contenteditable> )

[23:22] *** Oshawott left
[23:23] *** Oshawott joined
