[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:13] *** tejr left
[00:14] *** tejr joined
[00:53] *** tejr left
[00:54] *** tejr joined
[01:28] *** frost joined
[02:12] *** xinming left
[02:14] *** xinming joined
[02:26] *** colemanX joined
[02:49] *** monkey_ left
[03:06] *** tejr left
[03:06] *** tejr joined
[03:47] *** ProperN[out] left
[03:48] *** ProperNoun joined
[03:52] *** ProperNoun left
[03:52] *** ProperNoun joined
[04:26] *** tejr left
[04:27] *** tejr joined
[05:33] *** nativecallable6 left
[05:33] *** evalable6 left
[05:33] *** quotable6 left
[05:33] *** squashable6 left
[05:33] *** bloatable6 left
[05:33] *** greppable6 left
[05:33] *** notable6 left
[05:33] *** benchable6 left
[05:33] *** linkable6 left
[05:33] *** releasable6 left
[05:33] *** statisfiable6 left
[05:33] *** reportable6 left
[05:33] *** unicodable6 left
[05:33] *** sourceable6 left
[05:33] *** tellable6 left
[05:33] *** coverable6 left
[05:33] *** committable6 left
[05:33] *** shareable6 left
[05:33] *** bisectable6 left
[05:34] *** nativecallable6 joined
[05:34] *** greppable6 joined
[05:35] *** coverable6 joined
[05:35] *** notable6 joined
[05:42] *** gordonfish- joined
[05:44] <Geth__> ¦ Raku-Steering-Council/main: 8db193d8a0 | (Geoffrey Broadwell)++ | minutes/20211211.md

[05:44] <Geth__> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2021-12-11

[05:44] <Geth__> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/8db193d8a0

[05:44] *** gordonfish left
[05:46] *** Geth__ left
[05:46] *** Geth joined
[06:03] *** reportable6 joined
[06:34] *** squashable6 joined
[06:34] *** unicodable6 joined
[06:34] *** tellable6 joined
[06:34] *** linkable6 joined
[06:34] *** bisectable6 joined
[06:34] *** bloatable6 joined
[06:35] *** quotable6 joined
[06:35] *** statisfiable6 joined
[06:36] *** benchable6 joined
[06:36] *** evalable6 joined
[06:36] *** shareable6 joined
[06:49] *** tejr left
[06:50] *** tejr joined
[07:21] *** seednode left
[07:22] *** seednode joined
[07:25] *** abraxxa joined
[07:31] *** abraxxa left
[07:32] *** abraxxa joined
[07:34] *** sourceable6 joined
[07:35] *** committable6 joined
[08:00] *** Sgeo left
[08:56] *** jjido joined
[08:59] *** dakkar joined
[09:01] *** jjido left
[09:27] *** qorg11 left
[09:31] *** qorg11 joined
[09:35] *** releasable6 joined
[10:17] <mykhal> hi, can cone do cross-apply like ('a'..'c') op (&lc, &uc) == <a b c A B C> ?  (op I thought could be X. or >>.>> )

[10:20] <moon-child> huh I thought you could do variadic map in cl but apparently not

[10:20] <moon-child> otherwise you could  map 

[10:20] <moon-child> oh, wait

[10:21] <moon-child> yea here ya go

[10:21] <moon-child> m: say map &map.assuming(*, 'a'..'c'), (&uc,&lc)

[10:21] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «((A B C) (a b c))␤»

[10:22] <mykhal> interesting.. btw, i really wanted flattened (which X<infixop> is used for)

[10:23] <moon-child> m: say map &slip∘&map.assuming(*, 'a'..'c'), (&uc,&lc)

[10:23] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(A B C a b c)␤»

[10:23] <mykhal>  .. and wanted also some identity rather than lc on already lowcase ')

[10:24] <moon-child> I am not sure why there is no sub id.  But if that's what you want then why not just (|x.uc) , |x?

[10:33] <mykhal> not sure of "sub id", and exact usage of |x syntax

[10:34] <mykhal> and really hoper for cross-op or hyper

[10:35] <moon-child> m: say [&uc,&lc] X[&map] ('a'..'c')

[10:35] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «((A) (B) (C) (a) (b) (c))␤»

[10:35] *** evalable6 left
[10:35] *** linkable6 left
[10:35] <moon-child> not really sure why you've your heart set on X though

[10:36] *** evalable6 joined
[10:37] *** linkable6 joined
[10:38] <mykhal> moon-child++ rather nice, and ok, i'll use RX

[10:48] <mykhal> m: say ('a'..'c') RX[&map] [&(*~''), &uc]  # still not perfect

[10:48] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «((a) (b) (c) (A) (B) (C))␤»

[10:49] <moon-child> replace &(*~'') with &[~]

[11:01] <mykhal> cool, but shouldn't this rather work like that instead of assuming confusion with perlish . concat ?

[11:01] <mykhal> m: say ('a'..'c') X. (&[~], &uc)

[11:01] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of .  to concatenate strings.  In Raku please use: ~.␤at <tmp>:1␤------> 3say ('a'..'c') X.7⏏5 (&[~], &uc)␤»

[11:01] <moon-child> why should X. work that way?

[11:10] <mykhal> very cnvenience; and i don't see hard philosophical problems with it, yet

[11:21] <mykhal> and . is (infix operator)-ish

[11:23] *** Altai-man joined
[12:02] *** reportable6 left
[12:19] *** ProperNoun left
[12:20] *** ProperNoun joined
[12:45] <mykhal> oh..

[12:45] <mykhal> m: say 'a' . &uc

[12:45] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of .  to concatenate strings.  In Raku please use: ~.␤at <tmp>:1␤------> 3say 'a' .7⏏5 &uc␤»

[12:45] *** gabiruh left
[12:46] <mykhal> now i see the philosophical problem

[12:50] <Altai-man> mykhal, (whispers) haskell

[12:53] *** mscha joined
[12:53] <mscha>  my @a = [1,2], [3,4]; dd @a.map(*.Str); # OK

[12:53] <evalable6> mscha, rakudo-moar 343a7861d: OUTPUT: «("1 2", "3 4").Seq␤»

[12:53] <mscha> my @a = [1,2], [3,4]; dd @a».Str; # Huh?

[12:53] <evalable6> mscha, rakudo-moar 343a7861d: OUTPUT: «Array element = [["1", "2"], ["3", "4"]]␤»

[12:54] <mscha> Why aren't those equivalent?  » goes one level deeper than I expected.

[12:56] *** gabiruh joined
[13:08] *** atroxaper joined
[13:08] <atroxaper> Hello, #raku

[13:09] <Altai-man> o/

[13:10] <mykhal> mscha: because of nodality "issues", it's doing rather deepmap

[13:16] <atroxaper> codesections: Hello. I have a question about lowbar and decided to not create the new issue for now. Is it final decision about using 'note' in Dbg package but not 'say' or 'put'? I, for example, do not use 'dd' for debug because it's output are messed with app's output.

[13:18] *** dextercd joined
[13:24] *** Zero_Dogg left
[13:37] <SmokeMachine> m: say <a e i o u> X[andthen] (*.lc, *.uc)

[13:37] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(a A e E i I o O u U)␤»

[13:37] <SmokeMachine> m: say <a e i o u> X[andthen] (*.&lc, *.&uc)

[13:37] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(a A e E i I o O u U)␤»

[13:39] <mykhal> m: say <a e i o u> X[andthen] (~*, *.uc) #  SmokeMachine++

[13:39] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(a A e E i I o O u U)␤»

[13:42] <SmokeMachine> but:

[13:43] <SmokeMachine> say <<a e i o u "">> X[andthen] (*.lc, *.uc)

[13:43] <evalable6> SmokeMachine, rakudo-moar 343a7861d: OUTPUT: «(a A e E i I o O u U  )␤»

[13:43] <SmokeMachine> say <<a e i o u "" 0>> X[andthen] (*.lc, *.uc)

[13:43] <evalable6> SmokeMachine, rakudo-moar 343a7861d: OUTPUT: «(a A e E i I o O u U   0 0)␤»

[13:43] <SmokeMachine> :)

[14:03] *** Colt joined
[14:03] *** reportable6 joined
[14:05] *** jjido joined
[14:06] *** Zero_Dogg joined
[14:21] <mykhal> ok, is't natural, can be then .uniq'd ..

[14:23] <mykhal> but i'm inspecting mscha's nodality issue, thought to get expected result with

[14:23] <mykhal> m: my @a = [[1, 2], [3, 4]]; my method strn (Array --> Str) is nodal { self.Str }; say @a>>.strn.raku

[14:23] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «No such method 'strn' for invocant of type 'Int'.  Did you mean any of␤these: 'Str', 'atan', 'sign', 'sin', 'sort', 'sqrt', 'tan'?␤  in block <unit> at <tmp> line 1␤␤»

[14:38] *** Sgeo joined
[14:43] *** perlbot left
[14:43] *** simcop2387 left
[14:45] *** jjido left
[14:47] <gfldex> hohohoibloggedalittle: https://gfldex.wordpress.com/2021/12/13/recursive-caves/

[14:52] <gfldex> It's a shame that the AoC got only very small datasets to work with. Very little chance to use threading and show those Pythonists who is boss!

[15:19] *** simcop2387 joined
[15:20] *** perlbot joined
[15:26] *** slowtyper left
[15:26] *** slowtyper joined
[15:48] <SmokeMachine> m: my @a = [[1, 2], [3, 4]]; my method strn (Array: --> Str) is nodal { self.Str }; say @a>>.&strn.raku

[15:48] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «("1 2", "3 4")␤»

[15:49] <SmokeMachine> m: my @a = [[1, 2], [3, 4]]; my method strn (Array: --> Str()) is nodal { }; say @a>>.&strn.raku

[15:49] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «Use of Nil in string context␤("", "")␤  in method strn at <tmp> line 1␤Use of Nil in string context␤  in method strn at <tmp> line 1␤»

[15:49] <SmokeMachine> m: my @a = [[1, 2], [3, 4]]; my method strn (Array: --> Str()) is nodal { self }; say @a>>.&strn.raku

[15:49] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «("1 2", "3 4")␤»

[16:05] *** whatnext joined
[16:15] <tbrowder> fyi: i’m working on my Mi6::Helper module to make it easier to transform an mi6-created library for cpan to the Zef repo. should be available in a few days. the curr ver is basically a place holder showing planned features (outdated now)

[16:55] *** TheAthlete joined
[17:06] *** amenonsen left
[17:08] *** amenonsen joined
[17:12] <Geth> ¦ doc: f101423ab5 | Coke++ | util/update-and-test

[17:12] <Geth> ¦ doc: more diagnostics

[17:12] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f101423ab5

[17:12] *** Geth left
[17:12] *** Geth joined
[17:28] *** mathias[m] left
[17:29] *** mathias[m] joined
[17:42] *** dakkar left
[17:48] *** mscha left
[17:56] *** colemanX left
[18:00] *** Xliff left
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:13] *** Altai-man left
[18:18] *** abraxxa left
[18:45] *** whatnext left
[18:49] *** Xliff joined
[18:57] *** lichtkind joined
[18:58] <Xliff> gfldex: I have a lot of troubles with node walking algorithms. What materials would you suggest I read to bone up on 'em?

[19:25] <gfldex> Xliff: I don't really have any recommendations. I either recurse with a recursive function or I recurse with Iterators and build the stack myself.

[19:26] <gfldex> There are plenty of graphs where this will fail and I leave those to folk who are paid to worry about them. :)

[19:51] *** TheAthlete left
[19:57] *** monkey_ joined
[20:26] *** Geth left
[20:26] *** Geth joined
[20:27] *** atroxaper left
[20:44] *** monkey_ left
[20:59] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/12/13/2021-50-_-for-micros/

[20:59] *** gordonfish joined
[21:00] *** gordonfish- left
[21:04] *** Geth left
[21:04] *** Geth joined
[21:11] <moritz_> lizmat++

[21:16] *** gordonfish left
[21:16] *** gordonfish joined
[21:49] *** lichtkind_ joined
[21:51] *** lichtkind left
[22:05] *** monkey_ joined
[22:06] <tonyo> codesections: not sure if you're more active here than GH but if you'd like to continue the chorum stuff here (or in privmsg) that's okay by me

[22:06] <tellable6> 2021-12-11T09:33:59Z #whateverable <MasterDuke> tonyo: https://gist.github.com/Whateverable/3e29bc72553e8143db12499f343b364f

[22:07] <tonyo> ?

[22:19] <MasterDuke> tonyo: you'd tried to run benchable6, i was just showing you the output

[22:26] *** eseyman left
[22:43] *** eseyman joined
[22:59] *** monkey_ left
[23:04] *** slowtyper left
[23:04] *** slowtyper joined
[23:17] *** dextercd left
