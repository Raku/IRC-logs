[00:00] *** Doc_Holliwood left
[00:05] *** vrurg joined
[00:08] *** JRaspass left
[00:09] *** vrurg left
[00:10] *** MasterDuke left
[00:29] *** pecastro left
[00:46] *** leont left
[01:03] *** vrurg joined
[01:22] *** xinming_ left
[01:24] *** xinming_ joined
[01:30] *** vike joined
[01:42] *** JRaspass joined
[01:43] *** xinming_ left
[01:45] *** xinming_ joined
[01:54] *** aborazmeh_ left
[01:55] *** JRaspass left
[02:10] *** grumble left
[02:14] *** grumble joined
[02:19] *** gnufr33dom joined
[02:28] *** lnx joined
[02:32] *** simcop2387 left
[02:36] *** kvw_5_ joined
[02:39] *** kvw_5 left
[02:40] *** mowotter joined
[02:41] *** mowotter left
[02:42] *** mowcat left
[02:47] <vrurg> .

[02:52] *** mowcat joined
[02:52] *** Garbanzo joined
[02:54] *** mowcat left
[03:01] *** klapperl left
[03:01] *** klapperl joined
[03:04] *** Bucciarati left
[03:04] *** avar left
[03:16] *** Bucciarati joined
[03:16] *** avar joined
[03:16] *** avar left
[03:16] *** avar joined
[03:22] *** jmcgnh left
[03:30] *** lnx left
[03:31] *** lnx joined
[03:52] *** xinming_ left
[03:53] *** xinming_ joined
[03:59] *** jmcgnh joined
[04:02] *** DiffieHellman left
[04:03] *** bartolin left
[04:04] *** xelxebar left
[04:15] *** xinming_ left
[04:15] *** xinming_ joined
[04:15] *** simcop2387 joined
[04:15] *** simcop2387 left
[04:15] *** simcop2387 joined
[04:16] *** xelxebar joined
[04:16] *** DiffieHellman joined
[04:17] *** bartolin joined
[04:20] *** DiffieHellman left
[04:22] *** DiffieHellman joined
[04:57] *** xinming_ left
[04:58] *** xinming_ joined
[05:29] *** xinming_ left
[05:29] *** xinming_ joined
[05:49] *** xinming_ left
[05:50] *** xinming_ joined
[05:57] *** kaiwulf left
[06:04] <summerisle> i have to write a bunch of basic python for this stupid entry-level course i'm doing for giggles, and my god is it really the fortran of the 21st century. it's so prescriptive and bland.

[06:07] *** jmerelo joined
[06:33] *** frost-lab joined
[06:36] <parabolize> schools seem to abuse python alot

[06:41] *** ufobat_ joined
[06:52] *** xinming joined
[06:55] *** xinming_ left
[07:20] *** Discipulus joined
[07:31] *** parabolize left
[07:34] *** aborazmeh joined
[07:35] *** Garbanzo left
[07:41] *** stoned75 joined
[07:46] <summerisle> i've always disliked python's intentionally restrictive design. i suppose its merits are reflected in the fact that it's popular in the scientific computing community (e.g. lots of people that don't know how to write good code but need to write code)

[07:48] *** aborazmeh left
[07:49] <summerisle> hence my calling it 21st century fortran. 

[07:49] *** wamba joined
[07:49] <summerisle> of course, one can make an absolute butchery of python or fortran

[07:51] <summerisle> i'd be fine if it would just stay confined to that community, but would really appreciate it if the linux world could distance itself from python a little more

[07:56] *** stoned75 left
[07:58] *** domidumont joined
[08:11] *** pecastro joined
[08:25] *** Sgeo left
[08:26] *** patrickb joined
[08:31] *** MasterDuke joined
[08:51] *** Doc_Holliwood joined
[08:52] *** dakkar joined
[08:57] *** sortiz left
[08:59] *** sena_kun left
[09:02] *** sena_kun joined
[09:07] *** leont joined
[09:12] *** Geth joined
[09:20] * lizmat clickbaits https://rakudoweekly.blog/2021/03/01/2021-09-best-of-raku/

[09:30] <kawaii> I'm looking at `head` and `tail` methods on the Array type but maybe there's an easier way - I have an array with x number of items, I'd like to split it into @array1 with the first 2 items, and all the remaining into @array2, but I don't know how many are remaining so I don't think I can just use `tail`, can I?

[09:33] *** JRaspass joined
[09:35] *** abraxxa left
[09:35] <El_Che> lo

[09:39] <kawaii> o/

[09:39] <tyil> \o

[09:42] <MasterDuke> kawaii: maybe destructuring?

[09:44] <lizmat> kawaii: does the original array need to be untouched?

[09:44] <lizmat> if not, then something simple like:

[09:44] <lizmat> m: my @a = ^10; my @b = @a.shift xx 2; dd @a, @b'

[09:44] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 = ^10; my @b = @a.shift xx 2; dd @a, @b7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[09:44] <lizmat> Array @a = [2, 3, 4, 5, 6, 7, 8, 9]

[09:45] <lizmat> m: my @a = ^10; my @b = @a.shift xx 2; dd @a, @b

[09:45] <camelia> rakudo-moar 726a75e24: OUTPUT: «Array @a = [2, 3, 4, 5, 6, 7, 8, 9]␤Array @b = [0, 1]␤»

[09:46] <lizmat> if you just need to iterate

[09:46] <lizmat> m: my @a = ^10; .say for @a.head(2); .say for @a.tail(*-2)

[09:46] <camelia> rakudo-moar 726a75e24: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[09:46] <lizmat> hmmm

[09:47] <lizmat> m: my @a = ^10; .say for @a.head(2); say "SWITCH"; .say for @a.tail(*-2)

[09:47] <camelia> rakudo-moar 726a75e24: OUTPUT: «0␤1␤SWITCH␤2␤3␤4␤5␤6␤7␤8␤9␤»

[09:48] <kawaii> lizmat: let me try some of these, thanks :)

[09:50] <kawaii> works perfectly, thanks liz

[09:57] *** xinming left
[09:59] *** abraxxa joined
[10:00] *** xinming joined
[10:01] *** frost-lab left
[10:03] *** abraxxa left
[10:04] *** abraxxa joined
[10:13] *** frost-lab joined
[10:15] *** mniip left
[10:17] <kawaii> I never understand these Seq errors, surely  it's not in use because I'm just reading it, not mutating it? https://www.irccloud.com/pastebin/tMaMzKm9/

[10:17] <kawaii> (error in reference to the head and tail methods)

[10:19] <lizmat> with filters => foo.map you're effectively binding the Seq to the hash

[10:20] <lizmat> you could follow the suggestion of the error, and add .cache to the expression you put in %assets<filters>

[10:21] <lizmat> otoh, I wonder if we could get Hash.STORE do that automatically for you

[10:22] *** mniip joined
[10:22] <lizmat> m: my $a = ^10 .map(*.Str); dd $a.head(2); dd $a.tail(2)

[10:22] <camelia> rakudo-moar 726a75e24: OUTPUT: «("0", "1").Seq␤The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[10:22] <lizmat> is basically the issue

[10:22] <lizmat> m: my $a = ^10 .map(*.Str).cache; dd $a.head(2); dd $a.tail(2)

[10:22] <camelia> rakudo-moar 726a75e24: OUTPUT: «("0", "1").Seq␤("8", "9").Seq␤»

[10:23] <lizmat> kawaii: does that make sense?

[10:23] <kawaii> lizmat: yes, thank you for the examples :)

[10:24] <lizmat> BTW, looking at your code, it feels you could be better off creating an Assets object

[10:24] <lizmat> with defaults/ filters / pandoc-version / warp-version / etc. attributes

[10:24] <lizmat> and handle the logic in a TWEAK method

[10:25] <lizmat> you could then use @.filters as the attribute name, and then you wouldn't have the Seq issues

[10:25] <kawaii> Maaaaaybe, this is what I could get working with Cro's template system, which seems to only allow you to pass one "thing" into it for use

[10:25] <lizmat> m: my @a = ^10 .map(*.Str); dd @a.head(2); dd @a.tail(2)

[10:25] <camelia> rakudo-moar 726a75e24: OUTPUT: «("0", "1").Seq␤("8", "9").Seq␤»

[10:26] <lizmat> pretty sure Cro's template system also allows methods to be called on the one thing you pass ?

[10:27] <kawaii> Oh right, yeah 

[10:27] *** xinming left
[10:27] <kawaii> So I have an assets object and call stuff like `.version` etc on it

[10:28] *** xinming joined
[10:30] <lizmat> class Assets { has @.defaults; has @.filters, has $.pandoc-version, has $.warp-version; method filter-pre() { @!filters.head(2) } ... 

[10:35] *** frost-lab left
[10:42] *** berber44 joined
[10:46] *** patrickb left
[10:59] *** Doc_Holliwood left
[11:01] *** xelxebar left
[11:01] *** xelxebar joined
[11:15] <leont> m: my &foo = -> { return 42 }; sub bar() { foo(); }; bar();

[11:15] <camelia> rakudo-moar 726a75e24: OUTPUT: «Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[11:15] <leont> I thought that would be legal

[11:15] <leont> Is there any way for me to achieve such a thing?

[11:16] <dakkar> pointy blocks aren't routines

[11:16] <dakkar> m: my &foo = -> { 42 }; sub bar() { foo(); }; say bar();

[11:16] <camelia> rakudo-moar 726a75e24: OUTPUT: «42␤»

[11:16] <dakkar> (otherwise `for @a -> $a { return 2 }` would be a bit surprising)

[11:17] *** xinming left
[11:17] <leont> I know

[11:17] <leont> I should have been more specific

[11:17] <leont> I *want* to return from &bar by doing so in &foo

[11:18] <dakkar> ah! hmmm

[11:19] *** xinming joined
[11:20] <leont> Then again, I can use last instead, and catch the CX::Last in a CONTROL. Might even look better in my particular case.

[11:25] <lizmat> hmmm...  I wonder what the optimization implications are of catching CX::Last control exceptions

[11:26] <dakkar> if I run that code in the repl, it says "Control flow commands not allowed in toplevel"

[11:30] *** hythm joined
[11:33] *** xinming left
[11:35] *** hythm left
[11:35] *** xinming joined
[11:36] *** hythm joined
[11:37] <xinming> What is the idiom to append blob to a file?

[11:38] <lizmat> "file".IO.spurt(blob, :append) ?

[11:38] <lizmat> if that doesn't work, maybe it should ?

[11:38] <xinming> lizmat: This way, It'll always open-close the file,

[11:38] <lizmat> well, you did say "file" not "handle" ?

[11:39] <xinming> What I mean is something like,  given $fh { ...; .append(...); ... }

[11:40] <xinming> But we need to open the $fh before hand

[11:40] <lizmat> "file".IO.open(:append).spurt(Blob) ?

[11:40] <xinming> lizmat: Thanks, this is what I want.

[11:41] <lizmat> my $h = "file".IO.open(:append); $h.spurt(Blob) ?

[11:41] <lizmat> :q

[11:41] <lizmat> oops  :-)

[11:41] <xinming> thanks, the .IO.open(:append) is what I want. Will try.

[11:42] *** PimDaniel joined
[11:42] <PimDaniel> \o

[11:43] <PimDaniel> What is a constant in raku?

[11:43] <lizmat> my constant FOO = 42;

[11:43] <xinming> PimDaniel: my \a = 42;

[11:43] <xinming> I never thought we have   my constant :-)

[11:43] <lizmat> xinming 

[11:44] <PimDaniel> Ok now : How may we express a constant in a hash key?

[11:44] <lizmat> my constant FOO = 42 is equivalent to:

[11:44] <lizmat> my \FOO = BEGIN 42

[11:44] <dakkar> m: my constant foo=1;foo=3;

[11:44] <camelia> rakudo-moar 726a75e24: OUTPUT: «Cannot modify an immutable Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[11:44] <dakkar> m: my constant $foo=1;$foo=3;

[11:44] <camelia> rakudo-moar 726a75e24: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[11:45] <dakkar> interesting difference in error message (reflecting the extra container, I guess)

[11:45] <PimDaniel> ok may we express constant directly into a hash key?

[11:45] <lizmat> he...intriguing

[11:45] <lizmat> %foo<bar> # PimDaniel?

[11:46] <lizmat> m: my \FOO = 42; BEGIN say FOO   # xinming 

[11:46] <camelia> rakudo-moar 726a75e24: OUTPUT: «(Mu)␤»

[11:46] <lizmat> m: my constant FOO = 42; BEGIN say FOO   # xinming 

[11:46] <camelia> rakudo-moar 726a75e24: OUTPUT: «42␤»

[11:46] <hythm> Hello, anyone knows of an article or a blog post that explains compile time and runtime in a Raku program? sometimes I see people refering to some parts in code, that it will be executed at compile time or at runtime, and I wonder how could they tell. so I wonder if there is an article that is discussing a Raku program line by line and explaining why this piece of code is executed at compile while this one at runtime.

[11:47] * PimDaniel lizmat : bar will NOT be the value of the constant but the string 'bar'

[11:49] <PimDaniel> for now i must do Str $MYCONST = bar; and insert $MYCONST into hash definition.

[11:49] <lizmat> PimDaniel: not quite sure I follow, could you create a gist ?

[11:49] <dakkar> m: my constant THEKEY='bar'; my %hash; %hash{THEKEY}=1; %hash

[11:49] <camelia> rakudo-moar 726a75e24: OUTPUT: «WARNINGS for <tmp>:␤Useless use of %hash in sink context (line 1)␤»

[11:49] <dakkar> m: my constant THEKEY='bar'; my %hash; %hash{THEKEY}=1; say %hash

[11:49] <camelia> rakudo-moar 726a75e24: OUTPUT: «{bar => 1}␤»

[11:49] <dakkar> PimDaniel: that?

[11:50] <dakkar> postfix braces contain an expression, postfix angle-brackets work like quotes

[11:50] <PimDaniel> I must precise: i use positionals : key => val,keynext => nextval, ...

[11:51] <PimDaniel> and it's a new method entry.

[11:52] <lizmat> m: my \FOO = "foo"; my %h = (FOO) => "bar"; dd %h

[11:52] <camelia> rakudo-moar 726a75e24: OUTPUT: «Hash %h = {:foo("bar")}␤»

[11:52] <dakkar> yes but…

[11:53] <lizmat> :w

[11:53] <lizmat> argh  :-)

[11:53] <dakkar> m: my \KEY='foo';sub x(:$foo) {}; x( KEY => 1 )

[11:53] <camelia> rakudo-moar 726a75e24: OUTPUT: «Unexpected named argument 'KEY' passed␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:53] <dakkar> m: my \KEY='foo';sub x(:$foo) {}; x( (KEY) => 1 )

[11:53] <camelia> rakudo-moar 726a75e24: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:53] <dakkar> looks like the parser behaves differently in an arglist

[11:53] *** xinming left
[11:54] *** xinming joined
[11:54] <lizmat> yeah, only bareword fatcomma is interpreted as named argument, I believe purposely so

[11:55] <PimDaniel> I try parentesis...

[11:56] <PimDaniel> It seams to work for what i'm doing.

[11:57] <PimDaniel> May be :A,:B,... whould be better? No?

[11:58] <PimDaniel> Hum , No, i's anothe way to write positionals.

[11:58] <PimDaniel> Ok thank's i will try this way for now.

[11:59] <PimDaniel> back later...

[11:59] *** PimDaniel left
[12:05] <hythm> oh, I dound this helpful slides here https://archive.fosdem.org/2015/schedule/event/perl6_beyond_dynamic_vs_static/attachments/slides/724/export/events/attachments/perl6_beyond_dynamic_vs_static/slides/724/2015_fosdem_static_dynamic.pdf (Don't know why cdidn't see it the first time I searched about that subject)

[12:07] <hythm> s/dound/found/

[12:09] <Geth> ¦ ecosystem/finanalyst-patch-4: 2549a34142 | (Richard Hainsworth)++ (committed using GitHub Web editor) | META.list

[12:09] <Geth> ¦ ecosystem/finanalyst-patch-4: Add Collection-Raku-Documentation 

[12:09] <Geth> ¦ ecosystem/finanalyst-patch-4: 

[12:09] <Geth> ¦ ecosystem/finanalyst-patch-4: Creates a Collection version of Raku Documentation. https://github.com/finanalyst/collection-raku-documentation

[12:09] <Geth> ¦ ecosystem/finanalyst-patch-4: Currently, static files generated with this system can be seen at http://raku.finanalyst.org

[12:09] <Geth> ¦ ecosystem/finanalyst-patch-4: review: https://github.com/Raku/ecosystem/commit/2549a34142

[12:10] <Geth> ¦ ecosystem: finanalyst++ created pull request #584: Add Collection-Raku-Documentation

[12:10] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/584

[12:10] <Geth> ¦ ecosystem: 2549a34142 | (Richard Hainsworth)++ (committed using GitHub Web editor) | META.list

[12:10] <Geth> ¦ ecosystem: Add Collection-Raku-Documentation 

[12:10] <Geth> ¦ ecosystem: 

[12:10] <Geth> ¦ ecosystem: Creates a Collection version of Raku Documentation. https://github.com/finanalyst/collection-raku-documentation

[12:10] <Geth> ¦ ecosystem: Currently, static files generated with this system can be seen at http://raku.finanalyst.org

[12:10] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/2549a34142

[12:10] <Geth> ¦ ecosystem: 29a61464b1 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[12:11] <Geth> ¦ ecosystem: Merge pull request #584 from Raku/finanalyst-patch-4

[12:11] <Geth> ¦ ecosystem: 

[12:11] <Geth> ¦ ecosystem: Add Collection-Raku-Documentation

[12:11] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/29a61464b1

[12:53] *** patrickb joined
[13:13] *** vike left
[13:15] *** jmerelo left
[13:28] *** wamba left
[13:29] *** vike joined
[13:44] *** xinming left
[13:45] *** xinming joined
[14:07] <dakkar> PimDaniel: lizmat: this works, to pass a named argument whose name is in a constant (or any expression, for that matter): `my constant KEY="foo";sub x(:$foo) { say $foo};x(|{ (KEY) => 3 })`

[14:07] <tellable6> dakkar, I'll pass your message to PimDaniel

[14:07] <dakkar> m: my constant KEY="foo";sub x(:$foo) { say $foo};x(|{ (KEY) => 3 })

[14:07] <camelia> rakudo-moar 726a75e24: OUTPUT: «3␤»

[14:08] <dakkar> it's pretty ugly, but I guess it's a weird enough use case

[14:22] *** kaiwulf joined
[14:37] <codesections> dakkar: you could (slightly) beautify that expression by changing the last bit to x |%(KEY, 3)

[14:38] <dakkar> but then it no longer looks like a pair… it's odd either way, though

[14:39] <codesections> fair

[14:54] <vrurg> The ugliness is a way to protect from unexpected behaviors. Just imagine all kinds of 'side effects' if there is a key in the code and a module starts exporting a constant of the same way at some point.

[14:55] * vrurg doesn't see why a named parameter name should be in a constant?

[15:00] <dakkar> vrurg: I'm not sure, I'm just answering the question ☺

[15:01] <vrurg> dakkar: not your code?

[15:01] <dakkar> no

[15:02] <dakkar> I mean, the "solution" is mine, the question was PimDaniel's

[15:05] <codesections> On reflection, I might actually go with `x |(«KEY» => 3)` if faced with this (admittedly very odd!) use case

[15:05] <codesections> Though I'd also give some serious thought to the design decisions that brought me to that point :D

[15:14] <dakkar> codesections: that wouldn't do what was requested, though: double quotes (and double angle brackets) don't interpolate sigil-less names

[15:20] <codesections> oh, shoot, you're right.  That's what I get for giving the question more reflection without giving it any more testing!

[15:22] *** linkable6 left
[15:22] *** evalable6 left
[15:22] *** xelxebar left
[15:22] *** xelxebar joined
[15:22] *** linkable6 joined
[15:24] *** evalable6 joined
[15:35] *** patrickb left
[15:37] *** patrickb joined
[16:04] *** rindolf joined
[16:08] *** parabolize joined
[16:09] *** sortiz joined
[16:10] <sortiz> \o #raku

[16:11] *** Sgeo joined
[16:12] *** vike left
[16:18] *** jmerelo joined
[16:23] <sortiz> codesections: Still interested in cheap tuples?

[16:29] *** vike joined
[16:31] <summerisle> sortiz: i might be

[16:32] *** PimDaniel joined
[16:32] <sortiz> A declarative style subset works

[16:33] <sortiz> m: subset XY of List where (Int:D, Int:D); sub pointM(XY \a, Int $e --> XY) { a »*» $e }; pointM (1,2), 3;

[16:33] <camelia> rakudo-moar 726a75e24: ( no output )

[16:33] <sortiz> m: subset XY of List where (Int:D, Int:D); sub pointM(XY \a, Int $e --> XY) { a »*» $e }; say pointM (1,2), 3;

[16:33] <camelia> rakudo-moar 726a75e24: OUTPUT: «(3 6)␤»

[16:33] <PimDaniel> \o again.

[16:33] <tellable6> 2021-03-02T14:07:31Z #raku <dakkar> PimDaniel: lizmat: this works, to pass a named argument whose name is in a constant (or any expression, for that matter): `my constant KEY="foo";sub x(:$foo) { say $foo};x(|{ (KEY) => 3 })`

[16:34] *** vike left
[16:35] *** rir joined
[16:35] <PimDaniel> I try to use https://modules.raku.org/dist/Term::ReadKey:cpan:JKRAMER Module. But i can't really understand how it works. I tried to implement the given example but i cannot seriously capture keys. Are there other real live examples? Thanks. 

[16:35] *** xinming left
[16:36] <jmerelo> PimDaniel: did you try to use GitHub search to look for other examples? Or check out the tests?

[16:37] * PimDaniel jmerelo, NO, i often don't even know where to search. 

[16:37] *** xinming joined
[16:38] <PimDaniel> On the other hand, I looked at the module code and i see it uses concepts that i do not know yet like Supplier obj.

[16:38] <jmerelo> PimDaniel: Let me compose the search for you

[16:39] * PimDaniel jemerelo : You'r friendly

[16:40] <jmerelo> PimDaniel: there are a few false positives, but this search returns some of them "in the wild" https://github.com/search?q=%22use+Term%3A%3AReadkey%22+language%3ARaku&type=Code&ref=advsearch&l=&l=Raku

[16:41] <jmerelo> PimDaniel:3rd and 4th are definitely Rakulang

[16:41] *** aindilis left
[16:41] <sortiz> summerisle, In particular can be used for complex "returns" constraints. 

[16:42] * PimDaniel jemerelo: ok thank's i'll look at it. My code nearly works but in some situations the loop goes forever so i think my code is bad. 

[16:43] <rir> Is there sugar for the transform:  ( 0 ^..^1), (2, 3), [4,5]  to [ 0,1,2,3,4,5]?

[16:43] <rir> or a list?

[16:44] *** wamba joined
[16:44] <lizmat> 0^..^1 ??

[16:45] <lizmat> m: dd flat ( 0..1), (2, 3), [4,5]

[16:45] <camelia> rakudo-moar 726a75e24: OUTPUT: «(0, 1, 2, 3, 4, 5).Seq␤»

[16:45] <jmerelo> PimDaniel: It might, but it might also be some misunderstanding in the instructions... or its lack thereof.

[16:45] <lizmat> m: dd flat ( 0..1), (2, 3), [4,5]   # rir

[16:45] <camelia> rakudo-moar 726a75e24: OUTPUT: «(0, 1, 2, 3, 4, 5).Seq␤»

[16:52] * PimDaniel jemerelo: for pertinents examples, we would search 'key-pressed' i think.

[16:54] *** patrickb left
[16:56] <jmerelo> PimDaniel: right... Also you might try StackOverflow if everything fails... Either search, or, something that works way better than search, starting to create a question and check out the "related questions" that appear below

[16:57] * PimDaniel jmerelo: thank you very much, i think i'll be ok!

[16:59] *** vike joined
[17:01] <jmerelo> PimDaniel: sure :-)

[17:03] <rir> Thanks lizmat, now I see a tree in the forest.

[17:03] <rir> I guess a P5ish prejudice against lists isn't helpful here.

[17:04] <lizmat> indeed.... that's one of the false friends

[17:05] <lizmat> as is the idea how using a hash instead of a class to get better performance: in Raku, a class is faster, because it can be better optimized

[17:06] *** PimDaniel left
[17:06] <rir> Would that pertain to classes without behavior? 

[17:06] <lizmat> you mean something like:

[17:07] <lizmat> class Point { has $.x; has $.y }    vs

[17:07] <lizmat> %h<x>  and %h<y> ?

[17:07] <rir> Yes

[17:07] <lizmat> most definitely

[17:08] <lizmat> https://github.com/Raku/CCR/blob/main/Remaster/Elizabeth%20Mattijsen/How-to-make-it-more-classy.md

[17:08] <lizmat> dinner&

[17:09] <rir> Nice to know.  I don't try to pre-optimize but being efficent by habit is good.

[17:09] <rir> I'll check the link.

[17:10] <rir> And its sisters

[17:26] *** rindolf left
[17:32] <andinus> how do i make --help|-h print my custom usage text

[17:32] <andinus> its just a few lines appended to $*USAGE

[17:38] *** rindolf joined
[17:39] <andinus> hmm & i also have a sub USAGE() it doesnt get called for some reason

[17:41] *** ufobat__ joined
[17:41] <andinus> hmm the docs say they'll get called if no multi candidate of MAIN matches

[17:41] <andinus> so that makes sense

[17:42] <andinus> is there a way i can force --help|-h to call USAGE?

[17:45] *** ufobat_ left
[17:47] *** dakkar left
[17:50] *** berber44 left
[17:54] *** aluaces left
[18:00] <codesections> andinus: I'm pretty sure that --help (though not -h) is supposed to call USAGE (and to print it on STDOUT and exit with 0)

[18:00] <codesections> so I'd say it's a bug if it doesn't (imo)

[18:05] <codesections> hmm, actually, I'm not sure I'd say that after all.  Let me think about that some more... 

[18:05] <codesections> but, I do have a way that you can call USAGE:

[18:10] <codesections> have MAIN be a multi and add this line:

[18:10] <codesections> multi MAIN(Bool :$help, |) { say &*GENERATE-USAGE(&MAIN) }

[18:10] <evalable6> codesections, rakudo-moar 7cdb4fbb9: OUTPUT: «Usage:␤  /tmp/bN5G3pCtCe [--help] <Any>␤»

[18:11] <codesections> (or GENERATE-USAGE instead of &*GENERATE-USAGE if you defined a custom fn)

[18:19] *** aborazmeh joined
[18:24] *** aluaces joined
[18:33] *** xinming left
[18:33] *** xinming joined
[18:36] *** ufobat__ left
[18:46] *** _jrjsmrtn joined
[18:46] *** __jrjsmrtn__ left
[18:47] *** ufobat__ joined
[18:59] *** jmerelo left
[19:06] *** Garbanzo joined
[19:09] *** abraxxa left
[19:20] *** Garbanzo left
[19:30] *** aborazmeh left
[19:32] *** aborazmeh joined
[19:33] *** domidumont left
[19:35] *** Garbanzo joined
[19:35] *** xinming left
[19:36] *** xinming joined
[19:50] *** mowcat joined
[19:51] *** wamba left
[20:03] *** eax joined
[20:16] *** brtastic joined
[20:16] *** Garbanzo left
[20:16] *** Garbanzo joined
[20:21] *** sxmx left
[20:21] *** ufobat__ left
[20:29] *** Doc_Holliwood joined
[20:38] *** sxmx joined
[20:48] *** brtastic left
[21:03] *** Doc_Holliwood left
[21:06] *** pounce left
[21:06] *** fvox_ left
[21:06] *** KotH left
[21:06] *** KotH joined
[21:07] *** fvox joined
[21:08] *** pounce joined
[21:16] *** Doc_Holliwood joined
[21:18] *** eax left
[21:32] *** rir left
[21:41] *** xinming left
[21:42] *** xinming joined
[21:43] *** rindolf left
[21:54] *** aborazmeh left
[22:10] *** gugod left
[22:17] *** Doc_Holliwood left
[22:17] *** Doc_Holliwould joined
[22:26] <vrurg> .tell tyil Trying to get use of Config module. It feels wrong to me that `.read` overrides environment variables; and that there is no way to only read a single custom file with `.new`.

[22:26] <tellable6> vrurg, I'll pass your message to tyil

[22:28] <tyil> vrurg: hmm, I think the second one would be easier to fix than the first in the current way it's working

[22:28] <tyil> to fix the first one, I would need to keep track of which values were gathered from the environment

[22:29] <tyil> (doable, for sure, though)

[22:30] <vrurg> tyil: I would make a single method of importing values and use it everywhere. The method then would have support for :from-xdg, and :from-env. It could be read itself.

[22:31] <vrurg> And then it could in turn call a private !read-from-file.

[22:32] *** gugod joined
[22:34] <tyil> can you write a small sample of how you would like to use it in that manner?

[22:34] <tyil> might give me a better idea of the interface I could work towards

[22:35] <tyil> my current goal with Config is that I never actually need to manually read from additional files, but I can see how that might not be beneficial for everyone

[22:36] <vrurg> What I currently do requries exactly one config in the only posssible location. So, my choice would be Config.new(:$file, :!from-xdg).

[22:39] <vrurg> tyil: But it feels to me that something like `$cfg.read($file, :!from-xdg, :from-env)` could also be sometimes useful. Say, somebody would like to update the existing config in the middle of app lifetime.

[22:39] <tyil> yeah, that sounds reasonable

[22:39] *** Discipulus left
[22:40] <tyil> I'm contemplating if I should use `:@files` instead of `:$file`, to allow one or more files

[22:41] <vrurg> tyil: the magic words: multi dispatch ;)

[22:41] <tyil> true

[22:41] <tyil> I can't make any guarantee on when I have time to add it, but I will add it to my todo list :>

[22:42] <vrurg> tyil: Basically, as I looked into the module, I'd introduce a public .read-data method wich would do all the work and return %data. Make it a class method and it would open more ways to use the module.

[22:44] <vrurg> So far, I'm anyway at the most early stage of the project. It can certainly wait.

[22:49] *** kerframil joined
[22:52] *** xinming left
[22:53] *** xinming joined
[22:58] *** xinming left
[22:59] *** xinming joined
[23:10] *** Kaiepi left
[23:10] *** Garbanzo left
[23:11] *** Kaiepi joined
[23:17] *** aindilis joined
[23:24] *** Black_Ribbon joined
[23:32] <moon-child> is there a more concise way to ensure a regex matches an entire string than putting ^ and $ at the beginning and end?

[23:47] <MasterDuke> i think that's the most concise way

[23:52] *** agentzh joined
[23:52] *** agentzh left
[23:52] *** agentzh joined
