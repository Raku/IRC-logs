[00:01] *** kaiwulf joined
[00:21] *** neshpion joined
[00:40] *** mowcat left
[00:49] <tbrowder> .ask vrurg please look at pr #4 at https://github.cm/Raku/planet.raku.org

[00:49] <tellable6> tbrowder, I'll pass your message to vrurg

[00:57] *** pecastro left
[00:59] *** lucasb left
[01:00] *** gnufr33dom left
[01:05] <vrurg> tbrowder: why me? What shall I check?

[01:05] <tellable6> 2021-02-07T00:49:15Z #raku <tbrowder> vrurg please look at pr #4 at https://github.cm/Raku/planet.raku.org

[01:12] *** eseyman left
[01:14] *** eseyman joined
[01:41] *** MasterDuke left
[02:04] *** stoned75 left
[02:10] *** kvw_5 joined
[02:13] *** kvw_5_ left
[02:31] *** guifa joined
[02:48] <tbrowder> it looks like you were one of the last to make an entry. read the README and see if you can add any details for what your entry lines mean. thnx

[02:51] *** gnufr33dom joined
[02:54] *** JRaspass left
[02:58] *** Garbanzo joined
[03:58] *** coverable6 left
[03:58] *** nativecallable6 left
[03:58] *** committable6 left
[03:58] *** statisfiable6 left
[03:58] *** greppable6 left
[03:58] *** benchable6 left
[03:58] *** unicodable6 left
[03:58] *** quotable6 left
[03:58] *** squashable6 left
[03:58] *** releasable6 left
[03:58] *** shareable6 left
[03:58] *** bisectable6 left
[03:58] *** linkable6 left
[03:58] *** bloatable6 left
[03:58] *** evalable6 left
[03:58] *** tellable6 left
[03:58] *** sourceable6 left
[03:58] *** notable6 left
[03:58] *** evalable6 joined
[03:58] *** benchable6 joined
[03:58] *** statisfiable6 joined
[03:58] *** shareable6 joined
[03:58] *** coverable6 joined
[03:58] *** notable6 joined
[03:59] *** bloatable6 joined
[03:59] *** quotable6 joined
[03:59] *** tellable6 joined
[03:59] *** linkable6 joined
[04:00] *** releasable6 joined
[04:00] *** greppable6 joined
[04:00] *** committable6 joined
[04:00] *** nativecallable6 joined
[04:00] *** squashable6 joined
[04:00] *** unicodable6 joined
[04:00] *** bisectable6 joined
[04:01] *** sourceable6 joined
[05:01] *** quotable6 left
[05:01] *** notable6 left
[05:01] *** releasable6 left
[05:01] *** greppable6 left
[05:01] *** evalable6 left
[05:01] *** bloatable6 left
[05:01] *** linkable6 left
[05:01] *** shareable6 left
[05:01] *** unicodable6 left
[05:01] *** statisfiable6 left
[05:01] *** squashable6 left
[05:01] *** benchable6 left
[05:01] *** sourceable6 left
[05:01] *** tellable6 left
[05:01] *** committable6 left
[05:01] *** coverable6 left
[05:01] *** nativecallable6 left
[05:01] *** bisectable6 left
[05:01] *** evalable6 joined
[05:01] *** bisectable6 joined
[05:01] *** benchable6 joined
[05:01] *** linkable6 joined
[05:01] *** greppable6 joined
[05:01] *** notable6 joined
[05:02] *** committable6 joined
[05:02] *** squashable6 joined
[05:02] *** bloatable6 joined
[05:02] *** coverable6 joined
[05:02] *** unicodable6 joined
[05:02] *** nativecallable6 joined
[05:02] *** quotable6 joined
[05:03] *** releasable6 joined
[05:03] *** sourceable6 joined
[05:03] *** tellable6 joined
[05:03] *** shareable6 joined
[05:04] *** statisfiable6 joined
[05:08] *** kaiwulf left
[05:14] *** simcop2387 left
[05:15] *** rindolf joined
[05:32] *** brtastic joined
[05:37] *** neshpion left
[05:47] *** [Sno] left
[06:07] *** coldpress left
[06:20] *** [Sno] joined
[06:21] *** coldpress joined
[06:24] *** [Sno] left
[06:26] *** brtastic left
[06:33] *** simcop2387 joined
[06:46] *** simcop2387 left
[06:52] *** simcop2387 joined
[06:52] *** gnufr33dom left
[06:54] *** gnufr33dom joined
[07:38] *** jmerelo joined
[07:44] *** parabolize left
[08:03] *** simcop2387 left
[08:04] *** Garbanzo left
[08:05] *** aborazmeh joined
[08:07] *** simcop2387 joined
[08:17] *** gnufr33dom left
[08:21] *** [Sno] joined
[08:22] *** stoned75 joined
[08:26] *** [Sno] left
[08:30] *** wamba joined
[08:39] *** aborazmeh left
[08:51] *** simcop2387 left
[09:03] *** db48x joined
[09:03] *** simcop2387 joined
[09:05] *** aborazmeh joined
[09:13] *** aborazmeh left
[09:18] <krako[m]> Mornin' everyone !

[09:26] *** kini left
[09:27] *** kini joined
[09:30] *** bonz060 joined
[09:34] <moritz> hi there

[09:37] *** MasterDuke joined
[09:41] <jmerelo> hi!

[09:41] <jmerelo> Finished my talk @fosdem, https://jj.github.io/raku-patterns

[09:42] *** aborazmeh joined
[09:49] <krako[m]> jmerelo: cool, thanks for the link !

[09:49] <jmerelo> Sure :-)

[09:59] <krako[m]> jmerelo this talk ? "Let me tell you about Raku On why syntax is not so important, with an introduction to the emerging language Raku"

[09:59] *** aborazmeh left
[09:59] <jmerelo> krako[m]:that's the one I gave last year in the same devroom

[10:00] <jmerelo> krako[m]: that one is here https://jj.github.io/hablando-p6/fosdem20.html#/ The Fosdem video has also been published, I can dig it up if you want.

[10:12] <db48x> what do folks usually use for debugging regexes and grammars?

[10:16] <krako[m]> I tend to use regex101.com for regexes but I'm just learning Raku since yesterday so I don't know how to test grammars.

[10:17] <krako[m]> jmerelo: I don't want to be annoying but I don't find the talk video related to https://jj.github.io/raku-patterns...

[10:17] <krako[m]> Could you put the link here, please ?

[10:18] *** kini left
[10:22] *** [Sno] joined
[10:22] *** kini joined
[10:24] *** brtastic joined
[10:27] <CIAvash> db48x: I haven't used it, but probably https://github.com/jnthn/grammar-debugger

[10:29] <krako[m]> This slide is gold : "But I knew the concepts Because I code in Raku" (from https://jj.github.io/hablando-p6/fosdem20.html#/13/2)

[10:35] <db48x> CIAvash: I've tried it briefly

[10:35] <db48x> sadly it only tells you what the named regexes are doing

[10:35] <db48x> but it has helped

[10:37] <jmerelo> krako[m]: it's gold because it's true :-)

[10:37] <jmerelo> krako[m]: that is this year's talk, it's not been published yet... 

[10:38] <db48x> also, the ideal tool would show you what part of the input a failed regex was trying to match against

[10:38] <jmerelo> Just to be clear. This year: "Raku patterns", no video. Last year: "let me tell you about Raku", link above, video here https://www.youtube.com/watch?v=7Ivoh-fzDw8&t=150s

[10:43] <jmerelo> krako[m]: you can use Comma to debug grammars. It works pretty well.

[10:44] <krako[m]> As I'm new to Raku(/pPerl), I didn't tried Comma yet. (I mainly use neovim or emacs)

[10:45] *** aluaces left
[10:45] *** aluaces joined
[10:46] <krako[m]> <jmerelo "Just to be clear. This year: "Ra"> Ok understood ! Thanks !

[10:59] *** Sgeo left
[10:59] <jmerelo> krako[m]: sure :-)

[11:03] *** brtastic left
[11:11] *** wamba left
[11:12] *** wamba joined
[11:22] <krako[m]> I've just installed the Comma Community IDE and created a new script project.

[11:22] <krako[m]> In the script file, I see this shebang `#!/usr/bin/env perl6` and as the `perl6` and `raku` executables are the same, I'm wondering wich one is preferred or generally advised ?

[11:24] <lizmat> if your version supports "raku", then "raku" is the best choice moving forward

[11:24] <lizmat> the "perl6" is just to support older versions (pre 2019.11)

[11:25] <lizmat> and that will be removed at some point in the fuyure

[11:25] <lizmat> *future

[11:25] <krako[m]> Actually, I have the same kind of questions for the scripts file extension, is this better to use `*.pl6`, `*.p6` or `*.raku` ?

[11:25] <krako[m]> ok, thanks lizmat !

[11:25] <krako[m]> *question

[11:25] <lizmat> use the new extensions if you can be sure that your deployment situations allows using them

[11:26] <lizmat> e.g. all of my modules in the ecosystem still use .pm6 as I want to be sure they can be used in Raku versions before the 2019.11 release

[11:31] <krako[m]> I check if there is a way to change the default shebang in `Comma`.

[11:32] <krako[m]> I'm just starting to use and learn Raku so it might not be a problem with "deployment situations". Right ?!

[11:32] <krako[m]> *`I check` --> `I'll check`

[11:34] *** mahafyi joined
[11:46] <lizmat> krako[m]: right  :-)

[12:19] *** QhpAptyj9hj0RQwM left
[12:21] *** kini left
[12:22] *** kini joined
[12:33] *** pecastro joined
[12:40] *** MasterDuke left
[12:40] *** mahafyi left
[13:07] *** mahafyi joined
[13:13] <db48x> I'm confused

[13:14] <lizmat> This is the Raku IRC channel

[13:14] <db48x> I have a regex that is supposed to match everything up to the end of the line, using $$

[13:15] <db48x> works great on a short string, where the end of the line is also the end of the string

[13:15] <db48x> but as soon as I have two lines, it doesn't work

[13:16] <lizmat> can you create a gist ?

[13:18] <db48x> https://pastebin.com/6gc6UdX2

[13:20] <lizmat> feels to me the .* is too greedy?

[13:22] <lizmat> hmmm

[13:22] <db48x> could be

[13:22] <lizmat> so what is your expectation ?

[13:23] <db48x> could be

[13:23] <db48x> I just want to grab everything up to the end of the line

[13:23] <lizmat> that's what your example does for me

[13:23] <db48x> but only on test1

[13:23] <lizmat> which version of raku are you using ?

[13:24] <db48x> 2019.03.1

[13:24] <lizmat> ah, ok, I see what you're saying

[13:28] <lizmat> I'm sorry, I appear to draw a blank

[13:29] <lizmat> maybe moritz will be able to help

[13:29] <db48x> if .* is too greedy, then \N* seems like it ought to work

[13:29] <db48x> same result though

[13:38] <masak> I can't easily see the pastebin, but -- as a general rule, `.*` is almost never the right answer :)

[13:39] <masak> m: say "abc\ndef\n" ~~ / \N* $$ /

[13:39] <evalable6> masak, rakudo-moar 1b45d0ad1: OUTPUT: «｢abc｣␤»

[13:39] <masak> m: say "abc\ndef\n" ~~ m:2nd/ \N* $$ /

[13:39] <evalable6> masak, rakudo-moar 1b45d0ad1: OUTPUT: «｢｣␤»

[13:40] <moritz> \N* should be enough

[13:40] <masak> um. I might be rusty on the syntax.

[13:40] <moritz> possibly followed by \n? if you want to gobble up the trailing newline as well

[13:40] <CIAvash> `say $test2 ~~ /[^^ '='+ .* $$]+/;` works

[13:40] <masak> m: say "abc\ndef\n" ~~ rx:2nd/ \N* $$ /

[13:40] <evalable6> masak, rakudo-moar 1b45d0ad1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/jD24Ks8AcS␤Adverb nd not allowed on rx␤at /tmp/jD24Ks8AcS:1␤------> 03say "abc\ndef\n" ~~ rx:2nd/ \N* $$ /08⏏04<EOL>␤»

[13:40] <moritz> masak: no, it's just that the first match of \N* $$ matches the first line

[13:40] <moritz> and the second match of it matches the empty string before the first newline

[13:41] <masak> ah, of course

[13:41] <masak> the Curse of the Zero-Width Match

[13:42] <masak> m: say "abc\ndef\n" ~~ m:2nd/ \N* \n? /

[13:42] <evalable6> masak, rakudo-moar 1b45d0ad1: OUTPUT: «｢def␤｣␤»

[13:42] <moritz> m: .say for "abc\ndef\n".match: :g, /\N* \n?/

[13:42] <evalable6> moritz, rakudo-moar 1b45d0ad1: OUTPUT: «｢abc␤｣␤｢def␤｣␤｢｣␤»

[13:42] <masak> there ya go :D

[13:42] <masak> moritz: we're not as much in sync as we used to be :P

[13:42] <moritz> m: .say for "abc\ndef\n".match: :g, /\N* )> \n?/

[13:42] <evalable6> moritz, rakudo-moar 1b45d0ad1: OUTPUT: «｢abc｣␤｢def｣␤｢｣␤»

[13:42] *** leont joined
[13:42] <moritz> masak: I blame your reduced activity here... though mine has dropped as well

[13:43] <lizmat> it's not too late to come back  :-)

[13:44] <db48x> ok, changing the $$ to \n? does "fix" it

[13:44] <masak> moritz: that's fair

[13:44] <CIAvash> but why does it work as a simple regex match?

[13:44] <masak> db48x: the essential bit is that $$ matches an end-of-line, but consumes nothing

[13:47] <masak> moritz: I'm still thinking about extensible parsers, by the way. it's a tough nut to crack.

[13:49] <masak> moritz: today I thought, maybe if in the derived grammar you're forced to re-state the rule you're overriding, that would help fix the "fragile base grammar problem"

[13:49] *** lichtkind joined
[13:50] <masak> but I'm not sure of the ergonomics of that

[13:50] <CIAvash> m:  say "abc\ndef\n" ~~ /[^^ .* $$]+/

[13:50] <evalable6> CIAvash, rakudo-moar 1b45d0ad1: OUTPUT: «｢abc␤def｣␤»

[13:50] <masak> CIAvash: there's the issue with .*

[13:50] <masak> CIAvash: which I stated above, mind, is almost never the solution

[13:51] <CIAvash> the same regex doesn't work in a grammar

[13:52] <masak> m: grammar G { regex TOP { ^^ .* $$ } }; say G.parse("abc\ndef\n")

[13:52] <evalable6> masak, rakudo-moar 1b45d0ad1: OUTPUT: «Nil␤»

[13:52] <CIAvash> yeah, .* is eating everything

[13:52] <masak> hm. at first blush, so it seems

[13:54] <masak> m: grammar G { regex TOP { ^^ .* $$ } }; say G.parse("abc\ndef")

[13:54] <evalable6> masak, rakudo-moar 1b45d0ad1: OUTPUT: «｢abc␤def｣␤»

[13:55] <masak> on top of what a regex matches, a grammar also wants to match end-of-string

[13:55] <masak> that's why

[13:55] <CIAvash> masak++

[13:56] <masak> haven't had an increment in ages :D

[13:57] <tadzik> .karma masak

[13:57] <tadzik> :(

[13:57] <stoned75> ~.

[13:57] *** stoned75 left
[13:57] <masak> tadzik: the big IRC server in the sky can track the karma :P

[13:58] <El_Che> For people thinking wat niche Raku can fill: https://www.oreilly.com/radar/where-programming-ops-ai-and-the-cloud-are-headed-in-2021/

[13:58] <tadzik> masak: we could solve it with a blockchain ;)

[14:00] <masak> tadzik: this does not even dignify a response

[14:05] <moritz> and yet, you gave one, masak :D

[14:05] *** MasterDuke joined
[14:09] * leont forgot about codesections' presentation, hopes it will be uploaded soon

[14:09] <leont> (it sounded like it would have a lot of overlap with his Zen of Raku blogposts, which I rather liked)

[14:16] <leont> Ah, found the slides :-)

[14:18] *** brtastic joined
[14:21] *** wamba left
[14:26] * db48x rubs his eyes

[14:26] <db48x> now that I'm successfully matching up to the end of the line and consuming those newlines, my grammar goes into an infinite loop at the end of the string

[14:27] *** patrickb joined
[14:31] *** kaiwulf joined
[14:35] <moritz> that likely means that you have quantified somthing that matches zero characters

[14:38] <andinus> how would i match : either a space or end of sentence with regex?

[14:39] <andinus> i have "\n\ntest \n\na* b c d\ne f g h" and i'm using / \n\n [(\w \*?) \s*?]+ /

[14:39] <andinus> and i want <a* b c d>, <e f g h>

[14:40] <andinus> removing the *? from \s works (oh that * is an error, i just meant to place '?')

[14:40] <andinus> ^ but that matches "test""

[14:40] <andinus> m: "\n\ntest \n\na* b c d\ne f g h"  ~~ / \n\n [(\w \*?) \s?]+ /

[14:40] <evalable6> andinus, rakudo-moar 1b45d0ad1: OUTPUT: «»

[14:41] <andinus> m: "\n\ntest \n\na* b c d\ne f g h"  ~~ / \n\n [(\w \*?) \s]+ / 

[14:41] <evalable6> andinus, rakudo-moar 1b45d0ad1: OUTPUT: «»

[14:41] <andinus> hmm, i'll just paste the actual data

[14:43] <andinus> m: my $desc = "Test\n\nHint\n\nA R C E\nN E D L\nI* J* A I" ;say $desc ~~ / \n\n [(\w \*?) \s]+ /;

[14:43] <evalable6> andinus, rakudo-moar 1b45d0ad1: OUTPUT: «｢␤␤A R C E␤N E D L␤I* J* A ｣␤ 0 => ｢A｣␤ 0 => ｢R｣␤ 0 => ｢C｣␤ 0 => ｢E｣␤ 0 => ｢N｣␤ 0 => ｢E｣␤ 0 => ｢D｣␤ 0 => ｢L｣␤ 0 => ｢I*｣␤ 0 => ｢J*｣␤ 0 => ｢A｣␤»

[14:43] <andinus> there ^,  it doesn't match the last "I" though, i also want that

[14:45] <andinus> hmm nvm i figured it, [\s|$] works fine

[14:46] *** kini left
[14:47] *** kini joined
[14:53] <andinus> so i ended up with this: / \n\n ([(\w \*?) [\s|$]]+ [\n|$])+ /

[14:53] <andinus> but it's not able to seperate those strings in different lists, it gives me a single flat list of chars

[15:10] <andinus> hmm if something causes raku to allocate memory endlessly then is it a bug?

[15:14] *** mowcat joined
[15:19] *** gnufr33dom joined
[15:23] *** wamba joined
[15:23] <andinus> i ended up with this: / \n\n (  [(\w \*?) \s?] ** 4  [\n|$]    )+ /

[15:23] <andinus> ^ it works but i've hardcoded "4" in there

[15:25] <andinus> instead of "\s?" i want something like: either \s or \n, if it's \n then add this to next array 

[15:28] <guifa> “hmm if something causes raku to allocate memory endlessly then is it a bug?”  Not necessary.  while (1) { Foo *foo = malloc(sizeof(Foo)) }  (or whatever the exact syntax is, been a while since I’ve done C) is not a bug in C, but will cause endless allocation

[15:29] <andinus> i had a regex that caused that, does it apply then?

[15:29] <guifa> I’m still trying to grok what your goal is, are you wanting to get ARCE in one list, NEDL in another, and I*J*AI in another?

[15:29] <andinus> guifa: yes, right

[15:29] <guifa> You don’t have anything delimiting the three groups in your regex

[15:31] <andinus> i see, i'm not sure what delimiting is 

[15:31] <guifa> something that separates things

[15:31] <andinus> like () []?

[15:32] <guifa> Your regex delimits the letters using a space

[15:32] <andinus> oh and those groups must be delimited by \n

[15:33] <andinus> hmm, i'm not sure how i would achieve that

[15:34] <guifa> Try to build regex up from the smallest element and go up from there

[15:35] <andinus>  / \n\n [ ( [(\w \*?) \s?]+ ) \n ]+  / <-- \n should act like a delimiter in this right?

[15:35] <andinus> guifa: i see, thanks

[15:35] <andinus> i havent read much on it, i'll read up first

[15:35] <guifa> Smallest element here is the letter.  Lots of ways to represent it, but I’d go with \S+

[15:35] <guifa> The next smallest is the group of letters

[15:36] <guifa> Which is what you just got with spaces in between it

[15:36] <guifa> so you get (\S+)+ % \h

[15:36] <guifa> Next you want to grab individual lines with that pattern in it so

[15:37] <guifa> ( (\S+)+ % \h )+ \n

[15:37] *** jmerelo left
[15:37] <guifa> And lastly, you want to start the pattern after a double return

[15:37] <guifa> \n \n ( (\S+)+ % \h )+ \n

[15:39] <guifa> err sorry missing a %

[15:39] <guifa> \n \n ( (\S+)+ % \h )+ % \n

[15:40] *** parabolize joined
[15:40] *** coldpress left
[15:41] <guifa> The only problem here is that this technically does match Hint.  So to limit things more, you can either be stricter about the inner bit (using \S \*? instead of \S+), explicitly putting “Hint\n\n” in the regex start, or requiring more than one inner match (\S+) ** 2..* % \h

[15:42] <andinus> i see, thanks for the explaination

[15:42] <andinus> yeah i added \*?

[15:43] <andinus> this is also capturing the whole thing in a single array 

[15:43] <andinus> m: "\n\ntest \n\na* b c d\ne f g h"  ~~ / \n\n ( (\S \*?)+ % \s? ) ** 2..* % \n $ /;

[15:43] <evalable6> andinus, rakudo-moar 1b45d0ad1: OUTPUT: «»

[15:44] <andinus>  m: "\n\ntest \n\na* b c d\ne f g h"  ~~ / \n\n (   (\S \*?)+ % \h ) ** 2..* % \n $ /; 

[15:44] <evalable6> andinus, rakudo-moar 1b45d0ad1: OUTPUT: «»

[15:44] <andinus> hmm yeah this was the wrong $desc, i'll paste the correct one

[15:45] <andinus>  my $desc = "Test\n\nHint\n\nA R C E\nN E D L\nI* J* A I" ;say $desc ~~ / \n\n ((\S \*?)+ % \h ) ** 2..* % \n $ /;

[15:45] <evalable6> andinus, rakudo-moar 1b45d0ad1: OUTPUT: «｢␤␤A R C E␤N E D L␤I* J* A I｣␤ 0 => ｢A R …»

[15:45] <evalable6> andinus, Full output: https://gist.github.com/f1f1827fae911257774159befdd71cd8

[15:46] <andinus> oh wait

[15:46] <andinus> this works

[15:47] <andinus> hmm i hadn't changed that \s to \h locally

[15:47] <guifa> But you might consider breaking things out into tokens

[15:47] <guifa> https://tio.run/##TY5BC4JAEIXv/oqH5GUDjQ5dNENKyIgO1a31ELWUZKO4dojIv77talIwMPC@7zFTiiqfKHV/YnAW8oQp7L2QNSdOy4zaHWGLOWJOG8RYYM0pYVgxREhs@Jalu3VxE4SMSFTAC3wHzmZ4/1CekYBBQSuFYAxj12VwwK//4qUqHqU0oqmEQyOQFix57F9sGng60xN0duj5HXf6oCsfRun3nFIf

[15:49] <andinus> guifa: makes sense, thanks

[15:50] <andinus> it was easy to understand and read maybe i just dont put much thought when writing it

[15:54] <guifa> I think a lot of times people try to write regex left to right, when they need to make it small to big

[15:54] <guifa> That’s part of the reason you have the grammars in Raku — it really pushes you to think of things that way

[15:58] <andinus> i see, yeah it was easier when going small to big

[16:03] <andinus> how much of a difference should 1.5GHz vs 2.5GHz bring for rakudo?

[16:04] <andinus> i ran a thing on both systems and the difference was ~10x -- calculating factorial of a large number

[16:04] <andinus> by difference i mean the time taken

[16:05] <db48x> andinus: it depends on the program you're running

[16:05] <guifa> Also if you’re just teseting a single number, there’s a lot of other factors that throw things off by that much.  (that’s why most performance tests will run things many times, often in the thousands for microbenchmarks like that)

[16:06] <andinus> yeah i tried it ~4-5 times and the results were consistent

[16:06] <db48x> there are also other factors besides clock frequency to consider, such as IPC

[16:07] <db48x> cache sizes

[16:07] <andinus> i also tried calculations for calculating e (euler's constant) -- from the blogpost on perl.org 

[16:07] <db48x> memory bandwidth

[16:07] <andinus> hmm i see

[16:08] <db48x> also the specific features that are enabled in the two cpus

[16:08] <andinus> ^ those calculations for e pulished their timings, mine were 10x slow, i ran it on a 2.5GHz machine and they were at par with post's speed

[16:09] *** notagoodidea joined
[16:09] <andinus> i see, ah it might be that, both are on different oses

[16:09] <andinus> i'm running openbsd which disables SMT and maybe other thigns too that i don't know about

[16:10] <db48x> the OS can also have a big effect, especially on some types of benchmarks

[16:10] <notagoodidea> Is there somewhere to file an issue for Comma?

[16:10] <tellable6> 2021-01-29T00:26:11Z #raku <guifa2> notagoodidea RakuAST will let me create compiled-ish code without using EVAL, and interact much better with existing pblocks, etc, 

[16:10] <andinus> i see, i remember trying with SMT enabled but that didn't have much of an effect

[16:10] <andinus> http://blogs.perl.org/users/damian_conway/2019/09/to-compute-a-constant-of-calculusa-treatise-on-multiple-ways.html

[16:10] <andinus> ^ this was the post i was talking about

[16:11] <db48x> you also have to consider how much cooling is available, and how the motherboard shapes the power delivered to the cpu

[16:14] <andinus> notagoodidea: i see only [email@hidden.address] given on their page

[16:14] <andinus> db48x: i see, i'll tyr looking those up

[16:14] <notagoodidea> Yep found that too, mail sent, will see :) (it's a minor issue so)

[16:18] *** neshpion joined
[16:20] <andinus> most of the time is spend on compiling the module after i change it 

[16:21] <andinus> so this thing takes 44s without precomp, and 20s with precomp, so i guess 20s is taken for compiling it

[16:21] <andinus> the code is not really huge, <70 lines

[16:25] <guifa> That feels very strange.   70 lines should compile very quickly

[16:25] <guifa> I have modules with tens of thousands of lines of code and they fresh compile in <10

[16:26] <lucs> Um, who manages the colabti.org irclogger bot?

[16:31] *** stoned75 joined
[16:33] *** mahafyi left
[16:33] *** MasterDuke left
[16:33] *** MasterDuke joined
[16:33] <MasterDuke> defining new operators can slow down parsing *considerably*

[16:34] <MasterDuke> lucs: i think AlexDaniel` mentioned a name recently

[16:35] *** aborazmeh joined
[16:36] <lucs> I'm thinking it's Moritz, but my memory is crap.

[16:36] *** ab5tract joined
[16:37] <lucs> Oh, I know, I'll search the logs :)

[16:40] *** ab5tract left
[16:40] <MasterDuke> moritz ran the old logger, but not colabti

[16:41] <MasterDuke> lucs: "AlexDaniel`     if you see any issues, let feb know on #irclogger"

[16:41] <lucs> Aha, thanks MasterDuke

[16:42] <MasterDuke> np

[16:44] <guifa> MasterDuke: it shouldn’t slow somethign down that much for just 70 lines though

[16:46] *** xelxebar left
[16:46] *** xelxebar joined
[16:53] <MasterDuke> that does seem a bit excessive, but https://github.com/Raku/old-issue-tracker/issues/4429 and https://github.com/Raku/old-issue-tracker/issues/5496 have some examples of the kind of slowdown i mean

[16:54] *** [Coke] left
[16:55] *** jmerelo joined
[16:59] *** aborazmeh left
[17:03] *** aborazmeh joined
[17:05] *** domidumont joined
[17:08] <lizmat> Introducing the Raku Collect, Conserve and Remaster Project: https://www.reddit.com/r/rakulang/comments/leqi6u/introducing_the_raku_collect_conserve_and/

[17:10] <andinus> yes it really is too slow for everything i do on here, 

[17:11] <andinus> hmm actually this is not the normal state, `time raku -e ""` says 2s, usually it says 1s

[17:12] <andinus> ok its down to 0.9s now, i ran the precomp code right after this and it took 12s

[17:13] <andinus> and without precomp it took 30s

[17:14] <andinus> MasterDuke: i'm not defining any new operator, it's just bunch of string parsing

[17:16] <andinus> https://github.com/andinus/octans/blob/master/lib/Octans/Puzzle.rakumod

[17:16] <andinus> ^ there is the code that i'm changing

[17:17] <andinus> it's not fetching the web, i'm testing the local file part

[17:17] <perry> lizmat, that is /awesome/. The sort of "code rot" in rapidly developing programming languages has always been a real pain.

[17:18] <andinus> when i run it after adding a new line in between it takes ~40s, after comp is done, it takes ~12s to run with precomp

[17:18] <notagoodidea> lizmat: This great! Does pushing the blogpost to archive.org for conservation is an option also?

[17:19] <lizmat> well, not initially I would think

[17:19] <lizmat> I can see archive.org being a *source* of blog posts lost in the mists of time

[17:26] *** natrys joined
[17:28] *** aborazmeh left
[17:31] <notagoodidea> I understand why. I was thinking with the collect script that is just a call away to push the page to archive.org with `curl https://web.archive.org/save/{URL}`, it just act as a double back-up.

[17:39] <MasterDuke> andinus: you must be on some slow hardware. `time raku -e ''` is 0.1s for me

[17:40] <notagoodidea> 462 millis (i5/8Go)

[17:42] <El_Che> real0m0,146s user0m0,146s sys0m0,024s

[17:42] <andinus> hmm yeah this is the 1.5GHz thing i was talking about, 

[17:43] <andinus> but raku particularly runs slower, perl even with loading modules like DateTime take less than 0.2s

[17:44] <andinus> and simply perl -e "" takes 0.04s

[17:48] <guifa> If you run Perl with one of the OO modules, the start up time is roughly the same, though.

[17:51] <andinus> like Moose?

[17:51] <notagoodidea> yep

[17:51] <andinus> i see, i'll try that 

[17:53] *** kensanata joined
[17:53] <andinus> you were right, it takes 0.8 real

[17:53] <andinus> 0m00.76s real     0m00.57s user     0m00.14s system

[17:53] <andinus> ^ perl with use Moose

[17:53] <andinus>  0m00.89s real     0m00.63s user     0m00.25s system

[17:53] <andinus> ^ raku

[17:55] <guifa> Basically, Raku includes a lot of the stuff that Perl woul dneed imported in, though at a small cost to start up time

[17:56] <andinus> i see, makes sense

[18:13] *** kensanata left
[18:45] <jmerelo> Just a reminder we're still looking for ideas for the Google Summer of Code https://perl-foundation-outreach.github.io/gsoc-2021-ideas/

[18:46] <perry> "Fix typos in one line comments"? (Sorry, couldn't help myself.)

[18:54] <jmerelo> I'm looking for something, not totally sure if it exists or not (probably not): A markdown parser that captures document structure. That is, instead of separated or embedded tags, it would put the text after a heading as part of the heading, and so on.

[18:55] <jmerelo> What I'm looking for is a way of indexing text in markdown so that I can return the anchor to the closest header.

[19:02] <El_Che> hi jmerelo: how were the 2 talks? I wasn't at home, so I'll watch the recoring

[19:03] <El_Che> recording

[19:03] <jmerelo> El_Che: lightning talks? The first one about Perl left people a bit cold, the second one about CI/CD did elicit some reaction.

[19:04] <jmerelo> El_Che:the first one about Raku, mostly OK. Hope to raise some awareness and/or enthusiasm outside.

[19:04] <El_Che> ClassOps :)

[19:07] <jmerelo> Yep, ClassOps was the one... Initially all written in Perl, now there are parts in TypeScript and all.

[19:08] *** kaiwulf left
[19:08] <guifa> jmerelo: shouldn’t be too hard to make.  

[19:13] <jmerelo> guifa: yep, but I'm afraid to start the yak shaving. I might end up with a full-tex-indexing-multi-threaded framework that serves questions via XMPP. Or nothing.

[19:13] *** domidumont left
[19:13] <guifa> Ha

[19:13] <El_Che> or a new JS web framework

[19:14] <jmerelo> guifa: final intention is to create a Telegram bot that the students can use to query class material. As in /whereis REST API and get back a list of links to class material that talks about it.

[19:14] * guifa has thought there might be some utility in maintaining a set of modules that do just structured document parsing with grammars, specifically designed with the idea of folks creating custom actions

[19:14] <jmerelo> Closest subsection header, that is.

[19:15] <jmerelo> guifa: that wouldn't be a bad idea.

[19:21] <guifa> I was thinking it because the other day a friend sent me some subtitles for a documentary they did and I couldn’t find anything to open it up

[19:21] <guifa> Was some weird Euro format haha

[19:25] <jmerelo> May I interest you in sending some stuff to this conference? https://extra.codemotion.com/onlineconfspa-spring-2021-cfp/ We should try and spread the word abour Raku

[19:26] *** aborazmeh joined
[19:27] *** aborazmeh left
[19:30] <El_Che> "We are looking forward to proposals related to the following topics: @hip_stuff"

[19:31] <guifa> Hmm, I dunno what to talk about, but if I can figure out a topic happy to do it.

[19:32] <guifa> Although April does smash right into when I’ve got to give finals lol

[19:33] <guifa> From the Spanish version of the page: “Conviértete en speaker” — jmerelo should I trust a conference that doesn’t know Spanish? ;-)

[19:42] <krako[m]> Reading the first output of https://raku.guide/#_functions_and_mutators, I see the array printed with `[ ]` but when using `say @numbers.sort;`, the array is printed with `( )`.

[19:42] <krako[m]> Why is there this difference in outputs ?

[19:42] *** stoned75 left
[19:42] *** stoned75_ joined
[19:45] <guifa> krako[m]: sort produces a Seq

[19:45] <guifa> for the fourth example there where it’s reassigned, the Seq is consumed by assignment

[19:45] <guifa> and is now an Array

[19:46] <krako[m]> oh ok ! I guess I have to read further to know the diffs between array and sequence...

[19:46] <krako[m]> Thanks guifa !

[19:46] <guifa> (that’s not 1000% how it works in the background, but I think should make enough sense)

[19:48] <guifa> A seq isn’t really stored in memory — it’s Iterable, but not Positional

[19:49] <guifa> Imagine you have a 1000000 item array and you want to call something like reverse on it

[19:49] <guifa> One way is to create a new array, copying all of the values over, but that requires allocating all of that memory

[19:50] <guifa> But if you’re doing for @foo.reverse { … }, that’s a waste: we only ever need one value at a time

[19:51] <guifa> A Seq just provides a new value when needed (so in memory you might only store a position and a reference to the original array)

[19:52] <guifa> But it’s one directional, you can’t scan backwards because the efficiency means it’ll have forgotten old values

[19:53] <krako[m]> quite like `range()` in Python. `range(1_000_000_000)` won't create the list with all elementes once but only "on demand" (e.g. for iteration)

[19:55] <jmerelo> guifa: who knows...

[19:55] <krako[m]> (sorry if Python is not liked here but that's the main language I use)

[19:56] <jmerelo> krako[m]: we love _all_ languages, bar none. Which is why we use Raku :-)

[19:56] <notagoodidea> jmerelo: Do you have an idea where the ClassOp talks may be uploaded to the Fosdem archives or if it is available somewhere? (I was not available to look at it but it touch something I worked a bit on when I was a TA)

[19:56] *** jmerelo left
[19:57] <notagoodidea> That's... an answer :D

[19:57] <notagoodidea> krako[m]: If I do not say something really wrong, you can think of it a bit like a generator in python, kind of.

[19:59] <guifa> generators in Raku produces Seq so … not bad

[19:59] <krako[m]> that's was what I had in mind but not all languages have this concept

[20:01] *** guifa left
[20:11] <jdv79> looks like raku is ~4x slower on some miro benches on a rpi4 vs a modernish i7 box.  wonder how much of that diff is jit based...

[20:12] <jdv79> i imagine the jit support for arm64 might have a better chance of happening thanks to apple, right?

[20:17] *** neshpion left
[20:26] <krako[m]> Wait `slurp` an `spurt` to read and write a file ??? neven seen before !

[20:26] <krako[m]> *an --> and

[20:29] <El_Che> add "in one go"

[20:32] *** tejr left
[20:32] *** tejr joined
[20:32] <krako[m]> ?

[20:33] <El_Che> you don't read them line by line

[20:33] <El_Che> but at once in memory

[20:33] <krako[m]> oh ok ! 

[20:35] *** brtastic left
[20:38] <El_Che> so, you may or may not want that

[20:42] *** aborazmeh joined
[20:47] <notagoodidea> krako[m]: If you want a file line by line, there is `IO.lines` https://docs.raku.org/routine/lines

[20:48] *** MasterDuke left
[20:48] <krako[m]> thanks notagoodidea ! I start learning Raku by reading the Raku guide but sure, after this I'll read the Raku doc.

[20:51] <notagoodidea> krako[m]: Doing the same (but i tend to be bad at following a book so I am always nerd-snipped by the documentation and what-if question) :D

[20:56] *** Ven_de_Thiel joined
[20:56] <Ven_de_Thiel> o/

[20:57] <Ven_de_Thiel> m: my %h; %h<x>:delete; %h<x> = start 1;

[20:57] <evalable6> Ven_de_Thiel, rakudo-moar 1b45d0ad1: OUTPUT: «»

[20:58] <Ven_de_Thiel> m: my %h; %h<x> = start 1;%h<x>:delete;

[20:58] <evalable6> Ven_de_Thiel, rakudo-moar 1b45d0ad1: OUTPUT: «»

[20:59] <krako[m]> In the last snippet from https://raku.guide/#_returning_values, the code doesn't work.

[20:59] <krako[m]> Is the snippet just informational or is it supposed to work ?

[21:00] <krako[m]> the snippet where `:D` is added. (`Int:D`)

[21:01] <notagoodidea> It is normal.

[21:01] *** MasterDuke joined
[21:02] <notagoodidea> You expect an Int as a return value (defined) and the return value provided is a Rat

[21:03] <notagoodidea> The "lightbulb" box want to explain that you can also test if the return value is defined or not. 

[21:04] <notagoodidea> If you do `squared 3` it will work as the 3**2 = 9.

[21:05] <krako[m]> Actually I've wrote the wrong question. By reading without executing the code first, I would assume that `:D` will make the code work.

[21:05] <krako[m]> I think that's ambiguous. 

[21:05] <notagoodidea> I agree.

[21:06] <krako[m]> That's why I like to run some code examples while reading doc !

[21:07] <krako[m]> By just reading the code, you tend to make assumptions that are sometime wrong

[21:07] <notagoodidea> Just remember that :D/:U/:_ are constraints on the argument/return definiteness.

[21:07] <notagoodidea> You may open an issue or submit a change if you want : https://github.com/hankache/rakuguide/issues

[21:09] *** rindolf left
[21:10] <krako[m]> Actually, I didn't understood this first. When first reading, I asked myself "why it's used for the `return` because, if function return something it's defined."

[21:10] <krako[m]> But I think it's more useful when you don't know the return value in advance and a function might return something like `(Any)` after a computation.

[21:10] <krako[m]> Am I right ?

[21:11] <krako[m]> ...I hope the previous message wasn't too long and turned into link...

[21:11] <notagoodidea> nope :)

[21:11] <notagoodidea> And I could be a return to Nil also

[21:12] *** ilogger2 joined
[21:12] <krako[m]> yeah also !

[21:12] <krako[m]> yeah also !

[21:12] <krako[m]> That wasn't clear for me on first read

[21:12] <krako[m]> That wasn't clear for me on first read

[21:13] <notagoodidea> If you force the definiteness of your return, you could let your function fails instead of getting an undefined value of the return type.

[21:13] <notagoodidea> If you force the definiteness of your return, you could let your function fails instead of getting an undefined value of the return type.

[21:13] <notagoodidea> m: my Int $x; say $x.defined; 

[21:13] <notagoodidea> m: my Int $x; say $x.defined; 

[21:13] <evalable6> notagoodidea, rakudo-moar 1b45d0ad1: OUTPUT: «False␤»

[21:13] <evalable6> notagoodidea, rakudo-moar 1b45d0ad1: OUTPUT: «False␤»

[21:13] <krako[m]> to be clear : Any is kind of undefined value and Nil is absence of value, right ?!

[21:13] <krako[m]> to be clear : Any is kind of undefined value and Nil is absence of value, right ?!

[21:14] <notagoodidea> Any is the almost mother of type object and most of built-in type objects are children of it.

[21:14] <notagoodidea> Any is the almost mother of type object and most of built-in type objects are children of it.

[21:14] <notagoodidea> (almost because on top of Any, you have Mu)

[21:14] <notagoodidea> (almost because on top of Any, you have Mu)

[21:15] *** Sgeo joined
[21:15] <krako[m]> yes, I've read this

[21:15] <krako[m]> yes, I've read this

[21:15] <notagoodidea> Nil is the absence of value or a benign failure yes.

[21:15] <notagoodidea> Nil is the absence of value or a benign failure yes.

[21:15] <Ven_de_Thiel> m: my Promise %h; %h<x>:delete; %h<x> = start 1;

[21:15] <Ven_de_Thiel> m: my Promise %h; %h<x>:delete; %h<x> = start 1;

[21:15] <evalable6> Ven_de_Thiel, rakudo-moar 1b45d0ad1: OUTPUT: «»

[21:15] <evalable6> Ven_de_Thiel, rakudo-moar 1b45d0ad1: OUTPUT: «»

[21:18] <lizmat> a kind of a DBI for structured documents ?

[21:18] <lizmat> a kind of a DBI for structured documents ?

[21:19] <lizmat> oops... that was for guifa2 ^^

[21:19] <lizmat> oops... that was for guifa2 ^^

[21:25] *** Ven_de_Thiel left
[21:30] *** aborazmeh left
[21:34] <mst> krako[m]: oh, dude, if you're enjoying the grammar stuff, the book "A recursive descent into parsing" is amazing

[21:34] <mst> krako[m]: oh, dude, if you're enjoying the grammar stuff, the book "A recursive descent into parsing" is amazing

[21:34] <mst> krako[m]: I bought a copy at YAPC::EU glasgow and basically read the entire thing on the train home and don't regret it

[21:34] <mst> krako[m]: I bought a copy at YAPC::EU glasgow and basically read the entire thing on the train home and don't regret it

[21:36] <krako[m]> Grammars are one of the reasons which made me choose learning Raku instead of Perl.

[21:36] <krako[m]> Grammars are one of the reasons which made me choose learning Raku instead of Perl.

[21:36] <krako[m]> But I'm still beginner and still reading the Raku guide. I'll see later for grammars

[21:36] <krako[m]> But I'm still beginner and still reading the Raku guide. I'll see later for grammars

[21:36] <notagoodidea> haha bought a copy at FOSDEM 2 years ago :D

[21:36] <notagoodidea> haha bought a copy at FOSDEM 2 years ago :D

[21:36] <notagoodidea> When i was not learning raku yet -_-

[21:36] <notagoodidea> When i was not learning raku yet -_-

[21:37] *** abraxxa joined
[21:37] <mst> grammars are -why- on #perl a couple days ago I suggested you learned raku :D

[21:37] <mst> grammars are -why- on #perl a couple days ago I suggested you learned raku :D

[21:37] <mst> (people who claim the perl community hates raku are simply liars)

[21:37] <mst> (people who claim the perl community hates raku are simply liars)

[21:40] <krako[m]> Sorry mst but I was asking on #perl, #raku (IRC) and Raku on discord.

[21:40] <krako[m]> Sorry mst but I was asking on #perl, #raku (IRC) and Raku on discord.

[21:40] <krako[m]> I don't remember the name of people that answered, sorry !

[21:40] <krako[m]> I don't remember the name of people that answered, sorry !

[21:41] *** abraxxa left
[21:46] <krako[m]> Wow the introduction of OOP in #9.1 is very clear ! (https://raku.guide/#_classes_objects)

[21:46] <krako[m]> Wow the introduction of OOP in #9.1 is very clear ! (https://raku.guide/#_classes_objects)

[21:46] <krako[m]> I already know what's OOP because I use it in Python and PHP but I think even for people who never programmed before, it's might be very clear too !

[21:46] <krako[m]> I already know what's OOP because I use it in Python and PHP but I think even for people who never programmed before, it's might be very clear too !

[21:47] <krako[m]> * it's --> it

[21:47] <krako[m]> * it's --> it

[21:48] <mst> krako[m]: that's ok, just wanted to say I recommended it, and therefore my book recommendation is an extension of that :)

[21:48] <mst> krako[m]: that's ok, just wanted to say I recommended it, and therefore my book recommendation is an extension of that :)

[21:49] <mst> there's the odd idiot who still wants perl vs. raku to be a fight and I object to that concept

[21:49] <mst> there's the odd idiot who still wants perl vs. raku to be a fight and I object to that concept

[21:51] <mst> admittedly, the book is currently supporting my tablet to sit at a better angle, but that's at least in part so I don't forget where I put it next time I wanna write a grammar :D

[21:51] <mst> admittedly, the book is currently supporting my tablet to sit at a better angle, but that's at least in part so I don't forget where I put it next time I wanna write a grammar :D

[21:51] <mst> moritz: ^^ I am very glad I bought your book and I hope it amuses you that it's an integral part of my lager lung lockdown computing setup while I'm not reading it :D

[21:51] <mst> moritz: ^^ I am very glad I bought your book and I hope it amuses you that it's an integral part of my lager lung lockdown computing setup while I'm not reading it :D

[21:53] <summerisle> is it possible to reference a token from a grammar, e.g. `'my-string' ~~ MyGrammar.my-token`?

[21:53] <summerisle> is it possible to reference a token from a grammar, e.g. `'my-string' ~~ MyGrammar.my-token`?

[21:57] *** xelxebar left
[21:57] *** leont left
[21:58] *** xelxebar joined
[21:59] *** patrickb left
[22:15] *** notagoodidea left
[22:17] *** neshpion joined
[22:22] *** natrys left
[22:33] *** aborazmeh joined
[22:37] *** kaiwulf joined
[22:49] *** aindilis left
[22:56] *** aborazmeh left
[23:00] *** neshpion left
[23:01] *** neshpion joined
[23:01] <summerisle> i have a class that `does Iterable`; however, when an instance is given to `for`, `.iterator` is not called. thoughts?

[23:01] <summerisle> i have a class that `does Iterable`; however, when an instance is given to `for`, `.iterator` is not called. thoughts?

[23:45] *** mowcat left
