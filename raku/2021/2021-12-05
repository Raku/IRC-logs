[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:09] *** squashable6 left
[00:11] *** squashable6 joined
[00:28] <Geth> ¦ doc/codesections-eager-sub: 97761a036b | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Type/List.pod6
[00:28] <Geth> ¦ doc/codesections-eager-sub: Remove &eager sub form
[00:28] <Geth> ¦ doc/codesections-eager-sub: 
[00:28] <Geth> ¦ doc/codesections-eager-sub: This removes the &eager sub, which does not seem to exist.
[00:28] <Geth> ¦ doc/codesections-eager-sub: 
[00:28] <Geth> ¦ doc/codesections-eager-sub: (There's an .eager method and an eager statement prefix, but no sub)
[00:28] <Geth> ¦ doc/codesections-eager-sub: review: https://github.com/Raku/doc/commit/97761a036b
[00:29] <Geth> ¦ doc: codesections++ created pull request #3994: Remove &eager sub form
[00:29] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3994
[01:01] *** patrickb left
[01:11] *** japhb left
[01:11] *** japhb joined
[01:23] *** gordonfish- is now known as gordonfish
[01:25] *** ProperNoun joined
[01:30] <Geth> ¦ doc/master: 4 commits pushed by Coke++
[01:30] <Geth> ¦ doc/master: b1475019ce | prefer american spelling
[01:30] <Geth> ¦ doc/master: 9cf1aba142 | new words
[01:30] <Geth> ¦ doc/master: 8ef295d1e0 | whitespace
[01:30] <Geth> ¦ doc/master: be4282d1b8 | typo
[01:30] <Geth> ¦ doc/master: review: https://github.com/Raku/doc/compare/c712268b89af...be4282d1b8bd
[01:48] *** kjp left
[01:55] *** Skarsnik left
[02:04] *** ProperNoun left
[02:10] *** ProperNoun joined
[02:14] *** ProperNoun left
[02:15] *** jgaz joined
[02:17] *** ProperNoun joined
[02:17] *** monkey_ left
[02:20] *** monkey_ joined
[03:16] <[Coke]> ended up avoiding the need for the clone entirely by making the object a tad smarter.
[03:20] *** evalable6 left
[03:20] *** linkable6 left
[03:20] *** monkey_ left
[03:22] *** evalable6 joined
[03:24] *** dmc00 joined
[03:27] *** monkey_ joined
[04:22] *** linkable6 joined
[05:22] *** quotable6 left
[05:22] *** nativecallable6 left
[05:22] *** reportable6 left
[05:22] *** sourceable6 left
[05:22] *** tellable6 left
[05:22] *** committable6 left
[05:22] *** shareable6 left
[05:22] *** notable6 left
[05:22] *** unicodable6 left
[05:22] *** linkable6 left
[05:22] *** coverable6 left
[05:22] *** benchable6 left
[05:22] *** evalable6 left
[05:22] *** bisectable6 left
[05:22] *** releasable6 left
[05:22] *** bloatable6 left
[05:22] *** greppable6 left
[05:22] *** squashable6 left
[05:22] *** statisfiable6 left
[05:22] *** small_petit joined
[05:23] *** coverable6 joined
[05:24] *** shareable6 joined
[05:24] *** reportable6 joined
[05:24] *** statisfiable6 joined
[05:25] *** linkable6 joined
[05:25] *** nativecallable6 joined
[05:25] *** quotable6 joined
[05:25] *** evalable6 joined
[05:28] <small_petit> I don't know if this is the right place.... Please when is Raku supporting mobile applications? It's just a shame that the language that has got things right does not support android, ios, desktop apps as at now. I just keep getting sad every other day. Thanks.
[05:38] *** small_petit left
[05:40] *** monkey_ left
[06:03] *** reportable6 left
[06:04] *** frost joined
[06:23] *** notable6 joined
[06:24] *** benchable6 joined
[06:24] *** tellable6 joined
[06:25] *** sourceable6 joined
[07:03] *** reportable6 joined
[07:23] *** greppable6 joined
[07:25] *** unicodable6 joined
[07:25] *** bisectable6 joined
[07:26] *** squashable6 joined
[07:35] *** seednode left
[07:36] *** seednode joined
[07:37] *** gabiruh_ left
[07:37] *** gabiruh joined
[07:57] *** frost left
[08:01] <Geth> ¦ doc: 7648392313 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Type/List.pod6
[08:01] <Geth> ¦ doc: Remove &eager sub form (#3994)
[08:01] <Geth> ¦ doc: 
[08:01] <Geth> ¦ doc: This removes the &eager sub, which does not seem to exist.
[08:01] <Geth> ¦ doc: 
[08:01] <Geth> ¦ doc: (There's an .eager method and an eager statement prefix, but no sub)
[08:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/7648392313
[08:02] <linkable6> Link: https://docs.raku.org/type/List
[08:02] *** linkable6 left
[08:05] *** linkable6 joined
[08:06] *** small_petit joined
[08:13] *** small_petit left
[08:24] *** releasable6 joined
[08:24] *** committable6 joined
[09:01] *** jgaz left
[09:43] *** silug left
[09:44] *** silug joined
[10:24] *** atroxaper joined
[10:24] <atroxaper> Hello, #raku
[10:24] <atroxaper> m: multi trait_mod:<is>(Mu:D $m, :$name!) {}; class A is name {}
[10:24] <camelia> rakudo-moar d7152ea59: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'A' cannot inherit from 'name' because it is unknown.␤Did you mean 'Same'?␤␤at <tmp>:1␤»
[10:24] <atroxaper> How can I write a trait for a class?
[10:31] *** Sgeo left
[10:40] <discord-raku-bot> <Nemokosch#9980> Hi
[10:41] <discord-raku-bot> <Nemokosch#9980> Thanks for codesections for even caring about my complaint with (@a, @b) on the LHS, also vrurg for the answer under the issue I opened for it
[10:42] <discord-raku-bot> <Nemokosch#9980> However, to be honest, I'm a bit disappointed by the lack of attention this draws when this behavior is a top 1 WAT candidate in Raku I have seen so ar
[10:42] <discord-raku-bot> <Nemokosch#9980> However, to be honest, I'm a bit disappointed by the lack of attention this draws when this behavior is a top 1 WAT candidate in Raku I have seen so far
[10:42] <discord-raku-bot> <Nemokosch#9980> And so far the arguments have been anything but convincing
[10:44] <discord-raku-bot> <Nemokosch#9980> If there are other arguments than "it is already common to do in certain situations", please go ahead and say it
[10:48] <atroxaper> Never mind about my question. It's just Mu:U parameter type.
[10:56] *** atroxaper left
[10:58] *** MoC joined
[11:08] *** jjido joined
[11:23] *** bloatable6 joined
[11:26] *** abraxxa-home joined
[11:54] *** mscha joined
[11:55] <mscha> Is there a way to specify a two-dimensional array of Ints, without fixed boundaries?
[11:56] <mscha> E.g.: my Int @foo[*;*] 
[11:56] <mscha> m: my Int @foo[*;*]
[11:56] <camelia> rakudo-moar d7152ea59: OUTPUT: «Jagged array shapes not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»
[11:57] <mscha> I can do simply: my @foo
[11:57] <lizmat> no, not yet, as the message implied :-)
[11:57] <mscha> That works, but I can't declare it as Int then.
[11:58] <mscha> OK, thanks, lizmat.  I'll stick to "my @foo" then.
[12:02] *** reportable6 left
[12:02] *** reportable6 joined
[12:34] *** jjido left
[12:59] *** mscha left
[13:02] *** jjido joined
[13:08] *** Zero_Dogg joined
[13:10] <Zero_Dogg> Is there any quick way to get a filehandle for a Blob object? (usecase: have a Blob from LWP::Simple.get() that I need to pass to Compress::Zlib for decompression, Compress::Zlib throws `No such method 'eof' for invocant of type 'Buf'.`if I provide it with a Buf)
[13:11] *** jjido left
[13:12] <lizmat> hmm... doesn't LWP::Simple provide you with a method to get an IO::Handle compatible object ?
[13:18] <Zero_Dogg> lizmat: not that I'm aware of (and not that I was able locate by skimming through the source)
[13:21] <lizmat> I'm usually using Cro::HTTP::Client nowadys: https://cro.services/docs/reference/cro-http-client
[13:22] <lizmat> I think that has support for decompression built in
[13:28] <Zero_Dogg> Thanks, I'll give that a go. Has something changed with zef recently? It's failing to locate CBOR::Simple (which is an indirect dependency of Cro::HTTP::Client apparently)
[13:28] <lizmat> japhb ^^  ??
[13:29] <lizmat> Zero_Dogg: perhaps do a "zef upgrade zef", there's been a new release with a lot of fixes
[13:30] <Zero_Dogg> Already have the latest
[13:31] <lizmat> oki
[13:31] <lizmat> I'd suggest first installing CBOR::Simple 
[13:31] <Zero_Dogg> (or so zef says, anyway)
[13:31] <lizmat> $ zef --version
[13:31] <lizmat> v0.13.4
[13:31] <lizmat> is what I have
[13:32] *** monkey_ joined
[13:32] <Zero_Dogg> Okay so that's a lot newer than I have
[13:40] *** Skarsnik joined
[13:43] <Zero_Dogg> Outdated distro-provided zef (I thought I had it installed from rakudo-pkg). Replacing it with shiny new one did the trick.
[13:51] *** aoeuidhtns joined
[13:52] <lizmat> cool
[13:56] <Zero_Dogg> Looks like it doesn't decompress though, and also returns a Blob for binary data.
[14:01] <Zero_Dogg> Solved it with Libarchive::Filter :)
[14:02] <Zero_Dogg> It accepts blobs
[14:12] <Skarsnik> m: my Array of Int @foo; say @foo.WHAT
[14:12] <camelia> rakudo-moar d7152ea59: OUTPUT: «(Array[Array[Int]])␤»
[14:15] *** aoeuidhtns left
[14:38] *** jgaz joined
[14:45] *** monkey_ left
[14:59] *** monkey_ joined
[15:18] <timo> m: my @foo is Array of Int; say @foo.WHAT
[15:18] <camelia> rakudo-moar d7152ea59: OUTPUT: «(Array[Int])␤»
[15:18] *** monkey_ left
[15:28] <Skarsnik> I wonder if there could be a nice way to tell the method FALLBACK to not be called when you misscall something in it (so it's not called again)
[15:29] *** jgaz left
[15:32] *** atroxaper joined
[15:33] <atroxaper> lizmat: Hello. I've write the new blog. I'm thinking to proposal it to the advent. But, as you know, i'm not a native English. Could somebody to edit a google translate version and make the text be more Christmas?
[15:34] <corwin> atroxaper: I bet there are folks here that could help with that! Post your translation here, and let's see!
[15:36] <atroxaper> https://rakurs-atroxaper-net.translate.goog/2021-12-05-java-annotations?cda&_x_tr_sl=ru&_x_tr_tl=en&_x_tr_hl=ru
[15:37] <merryprog> Ack. Russian to English google translate is /really/ bad.
[15:38] <atroxaper> Not always, actually.
[15:38] <sienet_ja_LSD[m]> have you tried this, https://www.deepl.com/translator
[15:42] <atroxaper> Now. As I see, it a little bit better. Anyway, could somebody help me with it? I agree to gift the authorship and the idea of the post :)
[15:45] *** vodkra left
[15:52] *** vodkra joined
[15:55] *** monkey_ joined
[16:01] <SmokeMachine> Will it be called if you “disallow” it on signature?
[16:03] <SmokeMachine> m: class A { method FALLBACK(“test”) { say “fallback”; 42 }; A.test; A.something-else
[16:03] <camelia> rakudo-moar d7152ea59: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3allback”; 42 }; A.test; A.something-else7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier l…»
[16:04] <SmokeMachine> m: class A { method FALLBACK(“test”) { say “fallback”; 42 }}; A.test; A.something-else
[16:04] <camelia> rakudo-moar d7152ea59: OUTPUT: «fallback␤Constraint type check failed in binding to parameter '<anon>'; expected "test" but got "something-else"␤  in method FALLBACK at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[16:20] <tbrowder> atroxaper: you could make a provisional entry in the Raku/advent title list for 2021 with a link to the article and need for help.
[16:21] *** atroxaper left
[16:21] *** atroxaper joined
[16:23] *** mathias[m]12 joined
[16:27] <Skarsnik> m:  class A { method FALLBACK($name) { say $name; self.foo }; A.new.hello;
[16:27] <camelia> rakudo-moar d7152ea59: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3e) { say $name; self.foo }; A.new.hello;7⏏5<EOL>␤»
[16:27] <Skarsnik> m:  class A { method FALLBACK($name) { say $name; self.foo }}; A.new.hello;
[16:28] <camelia> rakudo-moar d7152ea59: OUTPUT: «(timeout)hello␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤foo␤…»
[16:28] <Skarsnik> m:  class A { method FALLBACK($name) { say $name; self.foo(42, 11) }}; A.new.hello;
[16:28] <camelia> rakudo-moar d7152ea59: OUTPUT: «hello␤Too many positionals passed; expected 2 arguments but got 4␤  in method FALLBACK at <tmp> line 1␤  in method FALLBACK at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[16:29] <Skarsnik> I am more talking about this, kinda confusing since the error point to FALLBACK again. x)
[16:31] *** jgaz joined
[16:39] *** monkey_ left
[16:42] *** euandreh joined
[16:48] *** monkey_ joined
[16:58] <Skarsnik> I am more talking about this, kinda confusing since the error point to FALLBACK again. x)
[16:58] <Skarsnik> oops x)
[17:00] <Skarsnik> Is there a more clever way to get an enum value from a Str representing the key name than ASM65816::AddressingMode(ASM65816::AddressingMode.enums{$/[1]}[0]) ?
[17:00] <Skarsnik> $/[1] contains the enum entry name
[17:03] *** Woodi left
[17:10] <MasterDuke> does ASM65816::AddressingMode("string") work?
[17:11] *** djerius left
[17:12] <MasterDuke> m: enum A <B C>; say A("B")  # huh, i thought this worked
[17:12] <camelia> rakudo-moar d7152ea59: OUTPUT: «No value 'B' found in enum A␤  in block <unit> at <tmp> line 1␤␤»
[17:12] <Skarsnik> A() expect the value, not the key x)
[17:13] *** djerius joined
[17:15] <MasterDuke> m: enum A <B C>; my $b = "B"; say A::<<$b>>.value
[17:15] <camelia> rakudo-moar d7152ea59: OUTPUT: «0␤»
[17:21] *** monkey_ left
[17:26] <Skarsnik> Oh thanks :)
[17:28] *** jgaz left
[17:35] *** monkey_ joined
[17:46] *** monkey_ left
[17:46] *** jjido joined
[17:55] *** squashable6 left
[17:57] *** squashable6 joined
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:08] *** Woodi joined
[18:26] *** jjido left
[18:26] *** jgaz joined
[18:31] *** monkey_ joined
[18:56] *** jgaz left
[19:10] *** avar left
[19:10] *** Skarsnik_ joined
[19:12] *** TempIRCLogger left
[19:12] *** jjido joined
[19:12] *** Geth left
[19:13] *** abraxxa-home left
[19:14] *** Skarsnik left
[19:15] *** abraxxa-home joined
[19:16] *** avar joined
[19:17] *** vasko left
[19:20] *** monkey_ left
[19:22] *** vasko joined
[19:36] *** atroxaper left
[19:53] *** ggoebel joined
[19:55] <ggoebel> I must be missing something obvious, but I can't see it. Anyone willing to look at my nearly identical solutions to today's Advent Of Code puzzles in raku and perl and tell me why the raku one gives incorrect answers?
[19:55] <ggoebel> raku: https://gist.github.com/ggoebel/f06857bd3b856f7bc055ac433f1e2c1f
[19:55] <evalable6> ggoebel, rakudo-moar 925d0bef8: OUTPUT: «(exit code 1) Failed to open file /home/bisectable/git/whateverable/input: No such file or directory␤  in block <unit> at ./sandbox/05.raku line 3␤␤»
[19:55] <ggoebel> perl: https://gist.github.com/ggoebel/0dff89aa09ff88e0eb49046a4a4110f3
[19:57] <vasko> I'd look but I haven't done challenge 5 yet myself :P
[19:57] <[Coke]> style note, you don't have to () the for or if params.
[19:58] <ggoebel> coke: perl habits die hard :-)
[19:59] <gfldex> style note, %grid{$x1}{$y} is equivalent to %grid{$x1;$y}
[20:00] <vasko> gfldex Is the same true for arrays?
[20:00] <gfldex> yes
[20:00] <ggoebel> noted thx
[20:01] <vasko> Cool, I only found out about multi-dim arrays yesterday and thought they were a different beast.
[20:01] <vasko> I'm eagerly anticipating the addition of ragged arrays and views.
[20:01] <gfldex> A SemiList is a general concept in Raku.
[20:02] <gfldex> m: @a = (1,2;3,4); dd @a;
[20:02] <camelia> rakudo-moar d7152ea59: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5@a = (1,2;3,4); dd @a;␤»
[20:02] <[Coke]> multi dim is different, yes
[20:02] <gfldex> m: my @a = (1,2;3,4); dd @a;
[20:02] <camelia> rakudo-moar d7152ea59: OUTPUT: «Array @a = [(1, 2), (3, 4)]␤»
[20:02] <vasko> Btw, I'm learning raku with AoC and am wondering how to make my $verbose arg from main global neatly. Anything better than `my $VERBOSE; sub MAIN(Bool :v(:$verbose)) { $VERBOSE = $verbose }`?
[20:03] <gfldex> call it $*VERBOSE
[20:03] <ggoebel> m: my @a = (1,2;3,4); @a[0;0]=5; .raku.say
[20:03] <camelia> rakudo-moar d7152ea59: OUTPUT: «Cannot modify an immutable List ((1 2))␤  in block <unit> at <tmp> line 1␤␤»
[20:03] *** monkey_ joined
[20:05] <ggoebel> so I guess I couldn't have used ++%grid{$x1;$y}
[20:05] <gfldex> that works because $x1 and $y are containers.
[20:07] <ggoebel> Cannot resolve caller prefix:<++>(List:D); the following candidates
[20:07] <ggoebel> match the type but require mutable arguments:
[20:07] <ggoebel>     (Mu:D $a is rw)
[20:07] <gfldex> vasko: if you want to go fancy on dynvars, this might help: https://gfldex.wordpress.com/2020/08/17/defined-or-dynvar/
[20:07] <[Coke]> so, the bug is in the second half (answers for part 1 are correct)
[20:08] <ggoebel> I don't get the correct answer for part one when using my input... I do when using the example input
[20:08] <ggoebel> just a sec, I'll share my input
[20:09] <vasko> gfldex: Thanks! I think `say $foo if $*verbose;` is quite neat. :)
[20:09] <ggoebel> input: https://gist.github.com/ggoebel/d0417c4100df80ae822c69942c6547c5
[20:10] <[Coke]> er, sorry.
[20:10] <gfldex> vasko: I would stuff the check against $*verbos into a `sub debug(|c) { say(|c) if $*verbose }` .
[20:10] <[Coke]> if you print out the "diag" coordinates it's looping over, they don't look right.
[20:11] <[Coke]> on the real input, first line, it swaps the coordinates, then is incrementing x by 10?
[20:12] <[Coke]> try making sure you're working with numbers and not strings, I think.
[20:12] <gfldex> ggoebel: did you consider to have a type constraint in line 10? `my (Int:D $x1, Int:D $y1, Int:D $x2, Int:D $y2)` might catch mistakes.
[20:12] <[Coke]> afk
[20:13] *** Sgeo joined
[20:15] <vasko> gfldex: What's the most idiomatic way to make it support calls as`debug 2, "Only print if -v 2 is set"`?
[20:15] <vasko> I can't find the docs for the `|c` annotation.
[20:15] <ggoebel> I changed line 10 to:     my ($x1, $y1, $x2, $y2) = .split(/\D+/, :skip-empty).map({+$_});
[20:15] <gfldex> vasko: https://docs.raku.org/type/Signature#Capture_parameters
[20:15] <ggoebel> and that fixed it...
[20:16] <ggoebel> thanks! 
[20:16] <vasko> Thanks, can I combine that with an optional `Int` infront of it?
[20:16] <vasko> I guess the multi signatures is what I want.
[20:16] <gfldex> well, you have to do a sub signature then.
[20:17] <ggoebel> Still a bit surprised $x1 .. $x2 was incrementing x by 10  
[20:20] <ggoebel> hmm... $x1 .. $x2 -> $x was not incrementing x by 10. So I'm still not understanding how forcing numeric context fixed it.
[20:21] <gfldex> vasko: https://gist.github.com/9c317047a1cabafcdc9d2298a76425e7
[20:23] <gfldex> vasko: you just made me find an ENODOC :)
[20:23] <gfldex> two ENODOCs acutally
[20:23] <gfldex> well, I better check roast before I accuse to docs of incompleteness …
[20:28] <ggoebel> what is perl automagically doing that I take for granted that raku is not?
[20:29] <vasko> Thanks, I got that bit, but I want to have it take a level as well.
[20:30] <vasko> I guess I can just check `|c` is a Seq and then test if `|c[0]` is an Int, then `say(|c[1..]) if $*VERBOSE >= |c[0]`?
[20:32] <ggoebel> vasko: not sure if this is what you're looking for... https://docs.raku.org/language/operators#prefix_|
[20:35] <vasko> I think I'll settle for `sub verbose(:$n = 1, |c) { say(|c) if $*verbose >= $n }` so I can do `verbose :n(3), 'Only print this if the program is called with -v=3 or more'`
[20:50] <gfldex> vasko: you can have a `sub MAIN(:v($*VERBOSE), :D(:debuglevel(*$DEBUG-LEVEL)) = 1) {}`
[20:52] <MasterDuke> .tell atropaxer https://gist.github.com/MasterDuke17/b9ff1efd4057e1bd62da77a70ef2eca7 is a lightly edited version, it really didn't need a whole lot
[20:52] <tellable6> MasterDuke, I haven't seen atropaxer around, did you mean atroxaper?
[20:52] <MasterDuke> .tell atroxaper https://gist.github.com/MasterDuke17/b9ff1efd4057e1bd62da77a70ef2eca7 is a lightly edited version, it really didn't need a whole lot
[20:52] <tellable6> MasterDuke, I'll pass your message to atroxaper
[20:59] *** discord-raku-bot left
[21:00] *** discord-raku-bot joined
[21:06] *** jjido left
[21:14] *** nebuchadnezzar left
[21:26] *** jjido joined
[21:29] <vasko> ggoebel I just ran into the same problem :D
[21:29] <vasko> > ("123".."234").map: *.say
[21:29] <vasko> 123
[21:29] <vasko> 124
[21:29] <vasko> 133
[21:29] <vasko> 134
[21:29] <vasko> 223
[21:29] <vasko> 224
[21:29] <vasko> 233
[21:29] <vasko> 234
[21:30] <vasko> Is why it was failing. I personally went for `.map: *.Int` I feel your way is to perly :P
[21:44] *** jjido left
[21:52] <ggoebel> vasko: thanks! So raku supports str ranges. Though I have to say, I don't understand how they work.
[21:52] <ggoebel> m: ("12".."21").flat.say
[21:52] <camelia> rakudo-moar d7152ea59: OUTPUT: «(12 11 22 21)␤»
[21:52] <ggoebel> m: ("12".."19").flat.say
[21:52] <camelia> rakudo-moar d7152ea59: OUTPUT: «(12 13 14 15 16 17 18 19)␤»
[21:54] <MasterDuke> ranges operated by calling .succ https://docs.raku.org/routine/succ#(Str)_method_succ
[21:55] <gfldex> vasko: Why so verbose? `».Int` will cut it! :->
[22:01] <vasko> gfldex I'm still learning. Cool, any time I would want to use `.map` over `»`?
[22:02] <gfldex> It's a hyper ans as such a candiate for auto-threading. Beside that, it's just shorter for simple cases. 
[22:02] <ggoebel> MasterDuke: thanks for the link to the relevant docs. Maybe I'm being dim, but I still don't understand how "12".."21" increment steps result in (12 11 22 21)
[22:03] <ggoebel> "Ranges always go from small to larger elements; if the start point is bigger than the end point, the range is considered empty."
[22:03] <gfldex> m: say ('filename-aaa.txt' .. 'filename-zzz.txt')[1..10, 900..910];
[22:03] <camelia> rakudo-moar d7152ea59: OUTPUT: «((filename-aab.txt filename-aac.txt filename-aad.txt filename-aae.txt filename-aaf.txt filename-aag.txt filename-aah.txt filename-aai.txt filename-aaj.txt filename-aak.txt) (filename-biq.txt filename-bir.txt filename-bis.txt filename-bit.txt filename-…»
[22:03] <ggoebel> how is "11" a larger element than "12"
[22:03] <gfldex> that's what it's meant to be used for
[22:04] <MasterDuke> m: say "12".succ
[22:04] <camelia> rakudo-moar d7152ea59: OUTPUT: «13␤»
[22:04] <MasterDuke> m: .say for "12".."21"
[22:04] <camelia> rakudo-moar d7152ea59: OUTPUT: «12␤11␤22␤21␤»
[22:04] *** jjido joined
[22:04] <MasterDuke> that's...interesting
[22:04] <gfldex> You are iteration over a subset of ASCII, so to speak.
[22:06] <MasterDuke> well, it's been that was since the initial christmas release. raku does str incrementing/ranges differently than perl, but i can't quite explain that result right now
[22:08] *** RakuIRCLogger left
[22:08] *** Geth joined
[22:08] *** RakuIRCLogger joined
[22:10] *** TempIRCLogger joined
[22:12] <ggoebel> per Coke and gfldex's suggestions, I'll just have to remember coerce things into Ints to avoid character ranges.
[22:14] <ggoebel> I think I prefer changing line 10 to: my (Int(Str) $x1, Int(Str) $y1, Int(Str) $x2, Int(Str) $y2) = .split(/\D+/, :skip-empty);
[22:15] <ggoebel> more verbose, but hard to get confused about what's going on
[22:15] <ggoebel> thanks for all the help
[22:25] *** jjido left
[22:34] *** MoC left
[22:36] <tbrowder> why not use 12..21 if that’s what you intend?
[22:37] <gfldex> He does now. That's where the bug was.
[22:58] *** monkey_ left
[23:19] *** ggoebel left
[23:35] *** ggoebel joined
[23:40] *** Skarsnik_ left
