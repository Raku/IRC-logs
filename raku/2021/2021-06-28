[00:02] *** _ed left
[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:50] <tbrowder> yo, does anyone have a practical use for raku routine 'round'?

[00:51] <tbrowder> if i were king, i would change it to round a number to x decimal places.

[00:52] <tbrowder> perl POSIX round also seems not very useful

[00:59] <japhb> tbrowder: I use it every so often.  I like the way it works, actually, because I often need to have routines that work in either base-1000 or base-1024/

[01:00] <japhb> Or want to graph something and round to the step size of exactly one row on the screen.

[01:00] <tbrowder> the posix round, or raku round?

[01:00] <japhb> Raku

[01:01] <japhb> Essentially, I often want to round to multiples of an arbitrary Rat, for which it works well.

[01:02] <tbrowder> hm, can you show an example? i don't grok the ones in the docs

[01:02] *** xinming_ is now known as xinming

[01:05] <japhb> tbrowder: First couple routines in https://github.com/japhb/Terminal-QuickCharts/blob/master/lib/Terminal/QuickCharts/Pieces.pm6 would be one

[01:21] <tbrowder> i think i get it, but it seems like the routine should be called 'scale' instead of 'round', just saying...

[01:26] <tbrowder> when creating charts i'm used to 'scaling' all values by a factor based on the largest value, not rounding them.

[01:32] <tbrowder> hm, i see the difference in yr use, and i'll have to play with it a bit. and study docs some more

[01:32] <tbrowder> japhb: thanks for the help

[02:02] *** linkable6 left
[02:02] *** evalable6 left
[02:05] *** linkable6 joined
[02:05] *** evalable6 joined
[02:14] <japhb> tbrowder: No worries

[03:05] *** linkable6 left
[03:05] *** evalable6 left
[03:08] *** evalable6 joined
[03:08] *** linkable6 joined
[03:44] *** _ed joined
[03:49] *** _ed left
[03:53] *** RandalSchwartz left
[04:08] *** ttubrian left
[04:34] *** frost joined
[05:21] *** Eddward_ left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:41] *** Doc_Holliwood left
[06:45] *** Doc_Holliwood joined
[06:57] *** ufobat joined
[07:27] *** abraxxa joined
[07:32] *** abraxxa left
[07:33] *** abraxxa joined
[07:41] *** Sgeo left
[07:51] <nine> Seems like we regressed t/08-performance/99-misc.t: Failed test 'hypered .grep .is-prime is not hugely slower than plain grep'

[07:52] *** dakkar joined
[07:52] <nine> vrurg: you have worked on .hyper recently, haven't you?

[07:58] *** discord-raku-bot left
[08:00] *** discord-raku-bot joined
[08:02] *** discord-raku-bot left
[08:02] *** discord-raku-bot joined
[08:05] *** discord-raku-bot left
[08:05] *** discord-raku-bot joined
[08:05] <gfldex> bridge test

[08:10] <lizmat> weekly: https://perlweekly.com/archive/518.html

[08:10] <notable6> lizmat, Noted! (weekly)

[08:13] *** discord-raku-bot left
[08:16] *** discord-raku-bot joined
[08:17] <gfldex> bridge test

[08:17] <lizmat> In the US, that phrase would make me nervous, if I would be on a bridge :-)

[08:19] <gfldex> Did you imagine a crowd of ppl junking around on a bridge?

[08:25] <lizmat> yeah, pretty much  :-)

[08:26] <lizmat> https://www.youtube.com/watch?v=XggxeuFDaDU

[08:29] <gfldex> Come on! For just $6M it was a true bargain!

[08:35] *** tyil left
[08:47] *** discord-raku-bot left
[08:48] *** discord-raku-bot joined
[08:48] *** discord-raku-bot left
[08:50] *** discord-raku-bot joined
[08:51] *** discord-raku-bot left
[08:51] *** discord-raku-bot joined
[08:51] <discord-raku-bot> <gfldex#8222> reverse bridge test

[08:52] <discord-raku-bot> <gfldex#8222> This

[08:52] <discord-raku-bot> <gfldex#8222> is

[08:52] *** discord-raku-bot left
[08:53] *** discord-raku-bot joined
[08:53] <discord-raku-bot> <gfldex#8222> does this loop?

[08:53] <gfldex> Seams not so!

[08:54] <discord-raku-bot> <gfldex#8222> This is now a 2-way bridge.

[09:42] *** aaxwsed joined
[09:43] *** aaxwsed left
[10:11] <lizmat> gfldex++  # for a non-undulating bridge

[10:30] *** Doc_Holliwood left
[10:32] *** _ed joined
[10:36] *** _ed left
[11:14] <lizmat> PSA: the Rakudo Weekly News will appear tomorrow

[11:15] <lizmat> afk&

[12:01] *** frost left
[12:02] *** reportable6 left
[12:05] *** frost joined
[12:05] *** reportable6 joined
[12:59] *** RandalSchwartz joined
[13:05] *** _ed joined
[13:08] *** rassoc joined
[13:08] <rassoc> m: say i ** 3

[13:08] <camelia> rakudo-moar dba9f56af: OUTPUT: «-0-1i␤»

[13:09] <rassoc> sweet, fixed in a more recent release

[13:10] *** _ed left
[13:26] *** _ed joined
[13:40] *** _ed left
[13:41] *** Sgeo joined
[13:41] *** _ed joined
[13:48] *** _ed left
[13:50] *** _ed joined
[13:55] *** _ed left
[13:59] *** Eddward_ joined
[14:04] *** slu left
[14:39] *** patrickb joined
[14:45] *** sgrs left
[14:45] *** oodani joined
[14:50] <oodani> hi! i'm trying to set up rakudo on a macos 11.4 system right now. installing rakudo with `brew install rakudo` works and gives me the compiler itself, but i don't have a line editor, and running `zef install Readline` as recommended led me to realise i don't have the zef command at all. what's the recommended way to add zef to a homebrew-managed rakudo? is it supposed to be included in the rakudo homebrew formula? i noticed that the precompiled builds at

[14:50] <oodani>  https://rakudo.org/downloads *do* include zef, which suggests the homebrew formula probably should too

[14:51] <El_Che> oodani: git is probably the easiest way in the short term

[14:55] <oodani> aha, gave the commands at the top of https://github.com/ugexe/zef a shot. it looks like it installed into /usr/local/share/perl6/site/bin, which isn't already on my path, but that's easy enough to fix for now c:

[14:57] <oodani> aaand now i have a line editor! yay!

[14:57] <oodani> cool, thank you c: in the long run the homebrew formula probably should include zef? but this workaround is cool for the time being

[15:04] *** _ed joined
[15:09] *** monkey_ joined
[15:10] *** _ed left
[15:12] <nine> vrurg: disregard that about t/08-performance/99-misc.t. I had some MoarVM debug options enabled without noticing

[15:19] <rassoc> oodani: you can also `brew install rlwrap` and define an alias `raku="rlwrap raku"`

[15:19] <rassoc> that's what i am doing atm

[15:19] *** ufobat left
[15:20] <oodani> oh yeah, rlwrap would also work! i was thinking ahead and figured i'd probably need zef for doing other things though ;)

[15:21] *** patrickb left
[15:28] <El_Che> `raku="rlwrap raku"`

[15:28] <El_Che> that sounds bad

[15:29] <El_Che> alias reval="rlwrap raku"

[15:29] <El_Che> maybe

[15:30] <tonyo> oodani: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/rakudo.rb <- this is the brew file for rakudo

[15:30] <tonyo> did you install rakudo-star or rakudo ?

[15:32] <tonyo> rakudo-star contains zef, rakudo is the bare bones

[15:33] <El_Che> 9/10 is rakudo star not what I want. What's needed is maybe a brew formula for zef

[15:34] <El_Che> I don't use macos enough to have the energy to create that

[15:35] <rassoc> "that sounds bad" -- how so? no problems so far

[15:35] *** _ed joined
[15:36] <El_Che> most of the rime raku is not an interactive program

[15:36] <El_Che> you don't want to use rlwrap in non interactive programs

[15:37] <rassoc> as said, no problems so far, even with non-interactive programs

[15:37] <tonyo> i never want rakudo star either but i always manually install zef too

[15:38] <El_Che> rassoc: my suggestion is use another alias for the rlwrapper raku

[15:38] <El_Che> like rakue

[15:38] <El_Che> for raku eval

[15:39] <rassoc> example of what might not work?

[15:40] <El_Che> raku foo.pl

[15:40] <El_Che> raku foo.raku

[15:40] <El_Che> (old habbits :) )

[15:40] <rassoc> i say it again: no problem so far. that works just fine

[15:41] <El_Che> ok, just keep it in your mind if you have a problem :)

[15:41] <rassoc> sure

[15:43] *** _ed left
[15:44] <tbrowder> tonyo: is fez reliable enough now to replace cpan?

[15:46] <tonyo> i think so, the only bug reports i have outstanding are related to (specifically) openBSD tar and it's not a blocker just an annoyance.

[15:46] <tonyo> i'd say yes.  i can get some stats on downloaded modules (one sec)

[15:49] *** _ed joined
[15:53] *** rassoc left
[15:57] *** _ed left
[15:58] *** rassoc joined
[16:04] <tonyo> as of a few days ago, there's been around 6k downloads of modules

[16:05] <tonyo> the logs only go back to april

[16:37] *** melezhik joined
[16:37] <melezhik> .

[16:38] *** _ed joined
[16:38] *** dakkar left
[16:43] *** _ed left
[16:45] *** _ed joined
[16:50] * [Coke] is pleasantly surprised to find a recent rakudo on macports.

[16:51] *** monkey_ left
[16:51] *** _ed left
[16:54] *** Eddward_ left
[16:54] <tbrowder> tonyo: thanks. i just upgraded Fez, and also got a key to reset my password. i'll be trying a new module with it today.

[16:56] *** Eddward_ joined
[16:56] *** Eddward_ left
[17:00] *** abraxxa left
[17:18] *** abraxxa joined
[17:30] <tonyo> tbrowder: as always, let me know if you have any issues

[17:31] <tbrowder> i just filed two on yr repo

[17:33] *** Doc_Holliwood joined
[17:34] <tbrowder> tonyo: one confusion, will the auth id be  ":auth<zef:name>" or ":auth<fez:name>"?

[17:34] <tonyo> zef:name

[17:35] <tbrowder> and is the "name" case insensitive like cpan?

[17:36] <tonyo> it is not

[17:37] <tonyo> i'll add a -q flag to meta so you can retrieve your meta info from fez. fez doesn't actually manage your META json for your pkg, the meta info fez has is only available to raku land so you can have profile info like on cpan

[17:38] <tonyo> if you change your email address in fez, it doesn't muck around with your uploaded modules to change their METAs

[17:39] <tonyo> tbrowder: what does this question mean? `What are the valid author-defining keys?`

[17:43] <tbrowder> not very good wording for sure, but mainly stuff about how fez account data are used and applied as you've been telling me about. the auth requirements (zef:case-sensitive), etc.

[17:45] <tbrowder> so we have to manually ensure the META6 auth data are correct for zef? even though it's not changed by fez.

[17:45] <tonyo> gotcha

[17:46] <tonyo> fez has a command `checkbuild` that you can run that should make you reasonably sure your meta is OK for both zef and fez uploading

[17:47] <tbrowder> i hope skaji releases his fez-compatible soon. japhb has been looking for him--hope he is okay

[17:47] <tbrowder> .seen skaji

[17:47] <tellable6> tbrowder, I saw skaji 2021-04-17T12:47:58Z in #raku: <skaji_> lizmat: Thanks. I'm not in a hurry. It can wait.

[17:51] <tbrowder> ok, the checkbuild i assumed was look only, but i'm ocd sometimes. oh, well, i'm ready to take the plunge

[17:55] <tbrowder> i see a possible problem when using checkbuild.

[17:55] <japhb> oh?

[17:56] <tbrowder> using a module created with mi6 fez reported the zef missing on auth

[17:57] <tbrowder> i changed to zef in both Meta and the rakumod file

[17:57] <japhb> That's kinda odd, if you've changed it in both places

[17:58] <tbrowder> ok, next checkbuild fez reported name mismatch (upper case vs lower case registered)

[17:59] <tbrowder> i changed to lower case in Meta but left upper case in rakumod but zef didn't complain.

[17:59] <japhb> tbrowder: Oh, I remembered something that may be useful to you, I dunno.  My releaser script for MUGS: https://github.com/Raku-MUGS/MUGS-Core/blob/main/lib/MUGS/App/Releaser.rakumod

[17:59] <japhb> Ah, gotcha

[18:00] <tbrowder> so fez doesn't use auth data in the module name?

[18:01] <tbrowder> how about version info?

[18:02] <tbrowder> tonyo: that was my concern--what data are definitive when we now have three ecosystems?

[18:02] *** reportable6 left
[18:03] <japhb> You log in with fez.  (That's also true of CPAN, except that lots of people have their CPAN auth in a file.)

[18:03] <tbrowder> for raku, not counting japhb's others

[18:03] <japhb> My others?

[18:04] <tbrowder> at a quick glance yr prog handles multiple ecosystems, i assumed there were others

[18:05] *** reportable6 joined
[18:05] <japhb> But generally speaking, for great justice, fez login should equal META auth (with a leading zef: prepended) should equal rakumod auth (exact match for META auth)

[18:05] <tbrowder> yes, but checkbuild doesn't see that yet

[18:06] <japhb> tbrowder: Ah.  Really it's mostly to save me some work until fez-compatible mi6 is out

[18:06] <japhb> tbrowder: PR time?  :-)

[18:07] <tbrowder> i'm not smart enough for fez or mi6 PRs--there be dragons

[18:08] <tbrowder> let me try an mi6 check with my auth changes...

[18:11] <tonyo> tbrowder: give me a moment, i have meetings for the next few hours and can answer more in depth afterwards

[18:13] *** simcop2387 left
[18:13] *** perlbot left
[18:14] <tbrowder> ok, i'll try to take good notes

[18:20] *** perlbot joined
[18:22] *** simcop2387 joined
[18:27] *** rassoc left
[18:30] *** RandalSchwartz left
[18:37] <tonyo> fez uses the auth data in the META for the full module name, it doesn't use what you put in `fez meta`.  fez does verify that the META and your username match when you upload, eg if you force upload a module with auth zef:XYZ and you're using zef:tbrowder's key then fez won't index.  when you run `fez checkbuild` it should tell you whether the meta matches, when you run `fez upload` it'll run a checkbuild 

[18:37] <tonyo> _against_ the created tar.gz.  if you're using git and your git supports `archive` then you may end up with whatever is in the META committed to the repo and not what you see when you `cat META`.  

[18:39] <tonyo> fez is the only eco that forces your username and `auth:` in your meta to match.  on cpan i can uploading anything and spoof your auth info to make it look like you made the module.

[18:53] *** _ed joined
[18:58] *** _ed left
[19:13] *** ufobat joined
[19:26] *** slu joined
[19:27] *** Altai-man joined
[19:30] *** Altai-man left
[19:39] *** _ed joined
[19:43] *** nirnam joined
[20:11] *** ufobat left
[20:26] *** monkey_ joined
[20:43] *** _ed left
[20:49] *** RandalSchwartz joined
[21:09] <nirnam> I'm surprised that '→' didn't work as '->' for for by default

[21:10] <tbrowder> tonyo: my module is ready to publish...bon voyage...

[21:14] <leont> nirnam: yeah, I ran into that as well recently

[21:14] *** _ed joined
[21:15] <tbrowder> it reports it's uploaded, but i got an error message about version number problems...

[21:15] <japhb> tbrowder: did you use '*' in your version?  That's a no-no ...

[21:15] <nirnam> leont: pretty sure → can work as -> by just line of raku

[21:16] <leont> You can't really add it as an extension, I think it would have to go into the main grammar

[21:16] <tbrowder> no, just what mi6 provided: 0.0.1

[21:16] <leont> It's not merely an operator, it's actual syntax

[21:18] <japhb> tbrowder: Huh, what was your error?

[21:20] <tbrowder> unfortunately i didn't capture it.

[21:20] *** _ed left
[21:20] <tbrowder> it looks like i will have to manually increase the version info,

[21:21] <tbrowder> for the next release, is that correct?

[21:22] *** monkey_ left
[21:23] <tbrowder> also, fez did not update the Changes file as mi6 does. that kind of info needs to be in the Fez README

[21:24] *** Sgeo_ joined
[21:28] *** chronon joined
[21:28] *** Sgeo left
[21:29] <tbrowder> huzzah! new module 'Modf' shows up on the modules list and it links to the repo ok

[21:31] *** chronon left
[21:32] *** chronon joined
[21:38] <moon-child> you can't use ⇒ for => either

[21:40] <nirnam> → ⇒ in vim write the same way as -> => just begin <C-K> too

[21:40] <moon-child> ?

[21:40] <nirnam> vim?

[21:40] <moon-child> oic

[21:41] <moon-child> I use compose for ⇒ and apl keymap for →

[21:41] <nirnam> oh, just saying in vim there are basically same thing

[21:42] <nirnam> would be nice to have apl keymap as second layer tho, there're so many unicode commonly use in math in there

[21:43] <nirnam> J programming took a hard left and make it ascii to me it just make it more confusing

[22:42] <moon-child> m: say [<a b>, <c d>].map(&infix:«=>»∘&slip).Hash

[22:42] <camelia> rakudo-moar dba9f56af: OUTPUT: «{a => b, c => d}␤»

[22:42] <moon-child> is there a more concise way to do ^^?

[22:43] <moon-child> (turn a list of kv pairs into a hash)

[22:58] <Juerd> m: Hash.new(@kv)

[22:58] <camelia> rakudo-moar dba9f56af: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@kv' is not declared.  Did you mean '&kv'?␤at <tmp>:1␤------> 3Hash.new(7⏏5@kv)␤»

[22:58] <Juerd> m: my @kv = [<a b>, <c d>]; Hash.new(@kv)

[22:58] <camelia> rakudo-moar dba9f56af: ( no output )

[22:58] <Juerd> meh.

[22:58] <Juerd> Oh, duh

[22:59] *** Sgeo_ left
[22:59] *** Sgeo joined
[23:08] <Juerd> Hash.new: @kv.map: { [=>] @$_ }  is the cleanest I can come up with but I think we're missing something really obvious.

[23:09] <Juerd> hash @kv.map: { [=>] @$_ }  is slightly shorter

[23:09] <Juerd> But the map/reduce/@ is fugly.

[23:09] <moon-child> m: say hash [<a b>, <c d>].map(&slip)

[23:09] <camelia> rakudo-moar dba9f56af: OUTPUT: «{a => b, c => d}␤»

[23:09] <Juerd> Doable

[23:10] <moon-child> ehh

[23:10] <moon-child> tacit is better than explicit, but map(&slip) just feels wrong

[23:36] *** tejr left
[23:42] *** tejr joined
[23:54] <nirnam> what the raku equivalent to perl <<~ operator?

[23:56] *** andinus` joined
[23:56] *** dg left
[23:57] *** andinus left
[23:57] *** dg joined
[23:57] *** Ulti left
[23:58] *** Ulti joined
