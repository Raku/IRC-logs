[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:17] *** MasterDuke47 joined
[01:17] *** linkable6 left
[01:20] *** linkable6 joined
[01:57] *** a3r0 joined
[02:04] *** vrurg joined
[02:16] *** vrurg left
[02:44] *** unixcat64 left
[02:45] *** unixcat64 joined
[02:49] *** evalable6 joined
[03:19] *** frost joined
[03:19] *** unixcat64 left
[03:19] *** unixcat64 joined
[03:31] *** frost left
[04:07] *** lucs left
[04:28] *** vrurg joined
[04:41] *** vrurg_ joined
[04:41] *** vrurg left
[05:40] *** vrurg_ left
[05:41] <xinming> releasable6: status

[05:41] <releasable6> xinming, Next release in ≈1 day and ≈13 hours. There are no known blockers. Changelog for this release was not started yet

[05:41] <releasable6> xinming, Details: https://gist.github.com/979bb3007e0eac871425be93f6373636

[05:41] *** vrurg joined
[05:46] *** vrurg left
[06:02] *** reportable6 left
[06:04] *** abraxxa joined
[06:05] *** reportable6 joined
[06:09] *** abraxxa left
[06:09] *** abraxxa joined
[06:12] *** vrurg joined
[06:28] *** vrurg left
[06:29] *** Kaiepi left
[06:40] *** vrurg joined
[06:45] *** vrurg left
[06:55] *** immedlate joined
[06:56] *** vrurg joined
[07:02] *** vrurg left
[07:05] *** lizmat left
[07:05] *** Sgeo left
[07:05] *** Sgeo joined
[07:05] *** lizmat joined
[07:13] *** vrurg joined
[07:16] *** immedlate left
[07:20] *** Kaiepi joined
[07:25] *** vrurg left
[07:29] *** Sgeo left
[07:34] *** patrickb joined
[07:38] *** vrurg joined
[07:40] *** patrickz joined
[07:41] *** patrickb left
[07:43] *** vrurg left
[08:10] *** bdju left
[08:17] <SmokeMachine> I was wondering about the assuming issue... would it make any sense to make something like this: `my &func = -> $a -> $b, $c -> $d { "$a $b $c $d" }` be equivalent to `my &func = -> $a { -> $b, $c { -> $d { "$a $b $c $d" } } }` and make the `[]` post circunfix operator on Callable work like getting as many arguments as the function expects from the list and passing the rest for the returning function? like: `fun[1, 2, 3, 4]` would 

[08:17] <SmokeMachine> be equivalent to `fun(1).(2, 3).(4)`. Would that make any sense?

[09:01] *** immedlate joined
[09:26] <xinming> SmokeMachine: I personally would think it's a good api call. :-)

[09:27] <xinming> `fun(1).assuming(3,4).()`    <--- This to me will be more clear example.

[09:28] <xinming> something like,  admin-task-for-user($user-id).assuming('add-credit', 3).();

[09:29] <xinming> my &add-user-credit = admin-task-for-user($user-id).assuming('add-credit'); add-user-credit(3);

[09:29] <xinming> just illustration

[09:30] <CIAvash> SmokeMachine: well, the `func[1,2,3,4]` part would not be compatible with the language I think, because `[1,2,3,4]` gets called on the return value of `func`.

[09:31] <SmokeMachine> CIAvash: I meant a new multi for .[]... but it could be any postcircunfix operator...

[09:32] <CIAvash> That would be confusing, and against the rule of different operators for different things.

[09:39] *** vrurg joined
[09:40] <CIAvash> But maybe Raku functions could act like in Haskell? I don't know if it is possible or how complicated it is(considering multi dispatch), otherwise they wouldn't add the `assuming` method if they could do it, I don't know.

[09:41] <CIAvash> Also there is no need for dots in function call, `func(1)(2,3)(4)`

[09:43] *** vrurg left
[09:44] *** vrurg joined
[09:45] *** immedlate left
[09:49] *** vrurg left
[09:49] <Altreus> I had to read to the end of that to remember the dot was not concatenation

[09:49] <Altreus> :O

[09:49] <grondilu> while developping a module raku seems to keep using the precomp version and ignore my changes in the source code.  What am I doing wrong?

[09:50] <grondilu> I do 'raku -Ilib t/test.t' to test

[09:50] <grondilu> and yes I did save the changes on disk beforehand.

[09:53] <CIAvash> Also signatures in Raku are more complicated, there are optional arguments, named arguments, captures, ...

[09:53] <lizmat> grondilu: what does the use statements inside test.t say ?

[09:53] <lizmat> *do

[09:55] <grondilu> just use Test; use MyModule::Path;

[09:55] <SmokeMachine> CIAvash: but that would work as well, wouldn't it? `-> $a? -> *@b -> :$c {...}` being equivalente to `-> $a? { -> *@b { -> :$c {...} } }` right?

[09:56] <SmokeMachine> (I'm talking more on how to create the function returning functions than the way to call it...)

[09:58] <grondilu> I do have the same module installed with zef, so maybe it's using this instead on the one on lib/

[09:58] <CIAvash> Yeah, the calling is the more complicated part.

[09:58] <SmokeMachine> because you will be able to do something like: `my &add = -> $a -> $b { $a + $b }; my &incr = add 1; say incr 41`

[09:59] <SmokeMachine> (I mean, call like that, that would already be useful)

[09:59] * grondilu uninstalls it to be sure

[10:02] <SmokeMachine> (and it would be much more readable IMHO)

[10:24] *** immedlate joined
[10:26] *** vrurg joined
[10:31] *** vrurg left
[10:36] *** Maylay left
[10:43] *** vrurg joined
[10:44] *** Maylay joined
[10:54] *** vrurg left
[11:06] <grondilu> any idea why 'my uint @a; @a = @b;' would give a different result than 'my uint @a; @a = my uint @ = @b;' ?

[11:08] *** leah2 left
[11:25] *** frost joined
[11:27] *** leah2 joined
[11:28] *** abraxxa left
[11:36] <grondilu> found it.  @b was actually referencing @a so that was bad.   It was something like @a = @a[1], @a[0]

[11:36] <grondilu> m: my 

[11:36] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> 3my7⏏5<EOL>␤»

[11:36] <grondilu> m: my @a = (1, 2); @a = 

[11:36] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3my @a = (1, 2); @a =7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[11:37] <grondilu> sorry fat finger

[11:37] <grondilu> m: my @a = (1, 2); @a = @a[1], @a[0]; say @a

[11:37] <camelia> rakudo-moar 10b327292: OUTPUT: «[2 1]␤»

[11:38] <grondilu> hum that works though.  I don't get it.

[11:48] *** bdju joined
[11:55] *** immedlate left
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:45] <grondilu> m: my uint32 ($x, $y, $z) = <3397201341 1759006370 581115732>; say $y +^ ($x +| +^$z)

[12:45] <camelia> rakudo-moar 10b327292: OUTPUT: «-1213881571␤»

[12:46] <grondilu> why would a bitwise expression of unsigned integers ever return a signed integer?

[12:50] *** vrurg joined
[12:52] <grondilu> m: say +^my uint32 $ = 581115732

[12:52] <camelia> rakudo-moar 10b327292: OUTPUT: «-581115733␤»

[12:53] <grondilu> m: say +^my uint8 $ = 1

[12:53] <camelia> rakudo-moar 10b327292: OUTPUT: «-2␤»

[12:55] *** vrurg left
[12:55] *** [Coke] joined
[12:56] * grondilu searches roast to see if that is specced

[13:03] * grondilu doesn't find anything relevant

[13:04] <grondilu> whatever that's too weird, I'm posting an issue

[13:08] *** vrurg joined
[13:09] <CIAvash> SmokeMachine: I wrote a little function for calling functions that return functions, if you are interested: https://gist.github.com/CIAvash/686114e5b4b3dedff74c398d725fcf3b

[13:10] <codesections> grondilu I'm pretty sure that is a bug, and is related to https://github.com/rakudo/rakudo/issues/3429

[13:13] *** vrurg left
[13:13] <grondilu> well maybe it's not, I've just checked in C and it returns 2 too.

[13:14] <grondilu> which is baffling to me.

[13:15] <timo> our uint support is .. a little "weak"

[13:16] <SmokeMachine> CIAvash: it looks great! Maybe it could accept the named parameters anywhere instead of only on the "right place"... maybe testing the named ones on every function...

[13:22] <timo> gasp

[13:22] <timo> this is like reverse currying?

[13:22] <timo> or i guess how function application works in a language that curries everything, like haskell

[13:29] <SmokeMachine> CIAvash: of course it could be much improved, but I was thinking into something like this (I mean the named param being able tube used anywhere...): https://gist.github.com/FCO/58f648cb9df26fa127519358f81d9f03

[13:30] <SmokeMachine> I really think the `my &sum = -> $a -> $b { $a + $b }` is a good idea, and this currying operator would make it even better...

[13:31] *** very joined
[13:31] *** vrurg joined
[13:36] *** vrurg left
[13:43] *** vrurg joined
[13:44] *** Sgeo joined
[14:18] *** xinming left
[14:19] <Geth> ¦ App-Rakubrew/master: 8 commits pushed by (Patrick Böker)++

[14:19] <Geth> ¦ App-Rakubrew/master: aef19b15a1 | Fix setting the local version

[14:19] <Geth> ¦ App-Rakubrew/master: 394182f812 | Remove some dead code

[14:19] <Geth> ¦ App-Rakubrew/master: ed5582573f | Deal with empty version files more gracefully

[14:19] <Geth> ¦ App-Rakubrew/master: fdb768a933 | Detect broken versions

[14:19] <Geth> ¦ App-Rakubrew/master: 87847c039a | Clean up version path search logic a bit

[14:19] <Geth> ¦ App-Rakubrew/master: 1ea95f401e | Fix `shell` command in env mode

[14:19] <Geth> ¦ App-Rakubrew/master: 1238f64294 | Document changes

[14:19] <Geth> ¦ App-Rakubrew/master: c913e6c123 | Version 20

[14:19] <Geth> ¦ App-Rakubrew/master: review: https://github.com/Raku/App-Rakubrew/compare/dc2b6b9bd2fb...c913e6c12354

[14:20] *** xinming joined
[14:25] *** Maylay left
[14:33] *** Maylay joined
[14:37] *** vrurg left
[14:45] *** jess joined
[14:45] *** very left
[14:49] *** xinming left
[14:51] *** xinming joined
[15:00] *** frost left
[15:04] *** xinming left
[15:04] *** xinming joined
[15:33] *** lucs joined
[15:57] *** daxim left
[16:09] *** vrurg joined
[16:14] *** vrurg left
[16:30] *** gordonfish- joined
[16:32] *** gordonfish left
[16:32] *** sena_kun joined
[16:36] <Geth> ¦ doc: ca2e03ab16 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[16:36] <Geth> ¦ doc: Update faq.pod6

[16:36] <Geth> ¦ doc: 

[16:36] <Geth> ¦ doc: Various language tweaks.

[16:36] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ca2e03ab16

[16:36] <linkable6> Link: https://docs.raku.org/language/faq

[16:41] <Geth> ¦ doc: e2d8bdacce | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[16:41] <Geth> ¦ doc: Update faq.pod6

[16:41] <Geth> ¦ doc: 

[16:41] <Geth> ¦ doc: Add missing question marks.

[16:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e2d8bdacce

[16:41] <linkable6> Link: https://docs.raku.org/language/faq

[16:45] *** vrurg joined
[16:45] *** vrurg left
[17:08] *** MasterDuke47 left
[17:21] *** clarjon1 joined
[18:00] *** archenoth joined
[18:02] *** reportable6 left
[18:03] *** Oshawott left
[18:04] *** reportable6 joined
[19:01] *** patrickz left
[19:21] *** randy88 joined
[19:30] *** randy88 left
[19:34] *** randy100 joined
[19:34] *** randy100 left
[20:00] *** sftp left
[20:10] *** sftp joined
[20:16] *** bgran left
[21:16] *** evalable6 left
[21:17] *** evalable6 joined
[22:04] *** jess left
[23:04] *** linkable6 left
[23:04] *** releasable6 left
[23:04] *** evalable6 left
[23:05] *** linkable6 joined
[23:06] *** evalable6 joined
[23:07] *** releasable6 joined
