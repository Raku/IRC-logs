[00:02] *** reportable6 left
[01:02] *** sourceable6 left
[01:02] *** squashable6 left
[01:02] *** statisfiable6 left
[01:02] *** quotable6 left
[01:02] *** nativecallable6 left
[01:02] *** coverable6 left
[01:02] *** bisectable6 left
[01:02] *** unicodable6 left
[01:02] *** releasable6 left
[01:02] *** notable6 left
[01:02] *** tellable6 left
[01:02] *** evalable6 left
[01:02] *** committable6 left
[01:02] *** benchable6 left
[01:02] *** shareable6 left
[01:02] *** linkable6 left
[01:02] *** bloatable6 left
[01:02] *** greppable6 left
[01:03] *** coverable6 joined
[01:04] *** shareable6 joined
[01:04] *** statisfiable6 joined
[01:04] *** squashable6 joined
[01:04] *** releasable6 joined
[01:04] *** nativecallable6 joined
[01:05] *** unicodable6 joined
[01:05] *** reportable6 joined
[01:05] *** sourceable6 joined
[01:05] *** tellable6 joined
[01:05] *** notable6 joined
[01:06] <[Coke]> lizmat: throwing an exception inside a STORE seems to get eaten.

[01:07] <[Coke]> m: sub x() is rw { Proxy.new( FETCH => method () { 3 }, STORE => method ($new) { die "EEK" }) } my $x = x(); say $x; $x = 4;

[01:07] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 STORE => method ($new) { die "EEK" }) }7⏏5 my $x = x(); say $x; $x = 4;␤    expecting any of:␤        infix␤  …»

[01:07] <[Coke]> m: sub x() is rw { Proxy.new( FETCH => method () { 3 }, STORE => method ($new) { die "EEK" }) }; my $x = x(); say $x; $x = 4;

[01:07] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «3␤»

[01:07] <[Coke]> (was trying to implement the "only set x times" logic, and it never failed)

[01:10] <moon-child> m: sub x() is rw { Proxy.new( FETCH => method () { 3 }, STORE => method ($new) { die "EEK" }) }; my $x := x(); say $x; $x = 4; 

[01:10] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «3␤EEK␤  in method <anon> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:11] <moon-child> need to bind

[01:37] *** zacts joined
[01:44] *** zacts left
[01:45] *** zacts joined
[01:48] *** zacts47 joined
[01:50] *** zacts left
[01:50] *** zacts47 is now known as zacts

[02:01] *** zacts left
[02:01] *** zacts joined
[02:03] *** benchable6 joined
[02:03] *** bloatable6 joined
[02:03] *** zacts left
[02:03] *** greppable6 joined
[02:04] *** quotable6 joined
[02:04] *** bisectable6 joined
[02:04] *** linkable6 joined
[02:05] *** committable6 joined
[02:06] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:14] *** stoned75 left
[02:16] *** stoned75 joined
[03:16] *** coverable6 left
[03:16] *** linkable6 left
[03:16] *** bloatable6 left
[03:16] *** greppable6 left
[03:16] *** unicodable6 left
[03:16] *** nativecallable6 left
[03:16] *** bisectable6 left
[03:16] *** shareable6 left
[03:16] *** sourceable6 left
[03:16] *** notable6 left
[03:16] *** squashable6 left
[03:16] *** tellable6 left
[03:16] *** committable6 left
[03:16] *** benchable6 left
[03:16] *** statisfiable6 left
[03:16] *** releasable6 left
[03:16] *** quotable6 left
[03:16] *** reportable6 left
[03:16] *** xinming_ joined
[03:17] *** quotable6 joined
[03:17] *** linkable6 joined
[03:17] *** greppable6 joined
[03:18] *** reportable6 joined
[03:18] *** statisfiable6 joined
[03:18] *** benchable6 joined
[03:18] *** tellable6 joined
[03:19] *** releasable6 joined
[03:19] *** shareable6 joined
[03:19] *** committable6 joined
[03:20] *** xinming left
[04:18] *** sourceable6 joined
[04:19] *** nativecallable6 joined
[04:56] *** Doc_Holliwood joined
[05:05] *** evalable6 joined
[05:14] *** monkey_ joined
[05:17] *** coverable6 joined
[05:17] *** squashable6 joined
[05:17] *** bloatable6 joined
[05:18] *** unicodable6 joined
[05:31] *** Doc_Holliwood left
[05:36] *** monkey_ left
[05:53] <mykhal> m: say try { "zzz".Int }

[05:53] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «Nil␤»

[05:53] <mykhal> m: say try { 0xd800.chr }

[05:53] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «Error encoding UTF-8 string: could not encode Unicode Surrogate codepoint 55296 (0xD800)␤  in block <unit> at <tmp> line 1␤␤»

[05:57] <moon-child> the error is coming from say, not try

[05:57] <moon-child> m: try { 0xd800.chr }

[05:57] <camelia> rakudo-moar 54f1b7a5f: ( no output )

[05:57] <moon-child> also interesting to note that:

[05:58] <moon-child> m: say 1; try { "\xd800" }; say 2

[05:58] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «1␤2␤»

[05:58] <moon-child> eh?

[05:58] <moon-child> that behaves differently locally (not repl).  I should recompile

[06:01] <mykhal> c: revisions  say try { 0xd800.chr }

[06:01] <committable6> mykhal, ¦revisions: «Cannot find this revision (did you mean “releases”?)»

[06:02] <mykhal> c: releases  say try { 0xd800.chr }

[06:02] <committable6> mykhal, https://gist.github.com/b405b75d362b285b4cd7df9c2381b887

[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:04] <moon-child> hmm, aboutext for 'whateverable' says 'Having fun on #perl6 on freenode' which is doubly wrong now!

[06:04] <moon-child> and also links to https://github.com/perl6/whateverable/, which is also no longer current

[06:13] <mykhal> m: say try { my $x = "zzz".Int; CATCH { default { say "ERR {.Str}" } } }

[06:13] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «ERR Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5zzz' (indicated by ⏏)␤Nil␤»

[06:14] <mykhal> m: say try { my $x = 0xd800.chr; CATCH { default { say "ERR {.Str}" } } }

[06:14] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «Nil␤»

[06:17] <mykhal> m: try { CATCH { default { say "ERR {$_.raku}" } }; my $x = "zzz".Int; }

[06:17] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «ERR X::Str::Numeric.new(source => "zzz", pos => 0, reason => "base-10 number must begin with valid digits or '.'")␤»

[06:17] <mykhal> m: try { CATCH { default { say "ERR {$_.raku}" } }; my $x = 0xd800.chr; }

[06:17] <camelia> rakudo-moar 54f1b7a5f: ( no output )

[06:19] *** notable6 joined
[06:19] <mykhal> m: try { CATCH { default { say "ERR {$_.raku}" } }; my $x = 0xd800.chr; say $x.uniname; }

[06:19] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «<surrogate-D800>␤»

[06:24] <mykhal> moon-child: oh, i finally came to the same conclusin as you last hour:57 which i spotted just now :)

[06:41] <mykhal> c: releases  say (0..0x10FFFF)>>.chr.grep(*.uniprop('Numeric_Value').isNaN.:<!>).grep({Nil === try { +"$_"}}).join

[06:49] <committable6> mykhal, https://gist.github.com/c802d82e5009f739eb81918e7e92e573

[07:19] *** linkable6 left
[07:19] *** evalable6 left
[07:21] *** linkable6 joined
[08:05] *** Frozenset joined
[08:17] *** bisectable6 joined
[08:35] *** Frozenset left
[09:31] *** Sgeo left
[09:51] *** tirnanog left
[10:23] *** Doc_Holliwood joined
[10:28] *** Frozenset joined
[10:28] *** sono left
[10:43] *** justsomeguy left
[10:54] *** justsomeguy joined
[11:02] *** MoC joined
[11:18] *** patrickb joined
[11:59] *** Doc_Holliwood left
[12:02] *** reportable6 left
[12:21] *** evalable6 joined
[12:34] *** pat_js joined
[12:34] *** Doc_Holliwood joined
[12:46] <vasko> Since around when did lists and arrays stop flattening by default? I'm getting confused with a bunch of old blog posts which snippet code where there seems to be some old Perl5 like flattening behaviour.

[12:47] <ugexe> 2015ish

[12:56] <vasko> Thanks, there so many old blog posts, it's quite cool. Anything else one should look out for?

[13:03] *** reportable6 joined
[13:11] *** justsomeguy left
[13:35] *** Doc_Holliwood left
[13:35] *** justsomeguy joined
[13:41] *** Doc_Holliwood joined
[13:44] <moritz> look out for those written by me, they are the best! :-)

[13:45] <moritz> (just the most out-of-date, I guess)

[14:12] *** MoC left
[15:12] *** evalable6 left
[15:12] *** linkable6 left
[15:21] *** Frozenset left
[15:25] *** stoned75_ joined
[15:29] *** stoned75 left
[15:36] *** Frozenset joined
[15:37] *** Doc_Holliwood left
[15:47] *** monkey_ joined
[16:15] *** evalable6 joined
[16:19] *** Kaiepi left
[17:07] *** Manifest0 left
[17:07] *** Manifest0 joined
[17:11] *** monkey_ left
[17:24] *** Kaiepi joined
[17:49] *** jess left
[17:51] *** squashable6 left
[17:51] *** squashable6 joined
[17:56] *** codesections left
[18:02] *** reportable6 left
[18:20] *** Frozenset left
[18:30] *** justsomeguy left
[18:34] *** Frozenset joined
[18:34] *** Frozenset left
[18:49] *** Doc_Holliwood joined
[18:49] *** Geth left
[18:49] *** Geth joined
[18:51] <Doc_Holliwood> m: my \x₁ = 0;

[18:51] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3my \x7⏏5₁ = 0;␤»

[18:51] <Doc_Holliwood> shouldn't that work?

[18:56] <MasterDuke> "regular" identifiers are restricted to certain types of unicode characters. terms are allowed to use a larger set of unicode types

[18:57] <MasterDuke> m: sub term:<x₁>(--> 42) {}; say x₁

[18:57] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «42␤»

[19:14] *** linkable6 joined
[19:18] <CIAvash> Doc_Holliwood: https://github.com/lizmat/Slang-Subscripts

[19:21] *** juanfra__ joined
[19:37] <lizmat> ooh, wow, I completely forgot about that one

[19:43] <AlexDaniel> moon-child: whateverable fixed

[19:53] *** Sgeo joined
[20:01] *** Doc_Holliwood left
[20:01] *** eseyman left
[20:01] *** Doc_Holliwood joined
[20:05] *** reportable6 joined
[20:08] *** eseyman joined
[20:12] *** MoC joined
[20:45] *** MoC left
[20:53] *** Gruber is now known as Grrrr

[21:31] *** patrickb left
[21:36] *** rivers joined
[22:02] *** justsomeguy joined
[23:02] *** linkable6 left
[23:02] *** evalable6 left
[23:03] *** evalable6 joined
[23:12] *** Doc_Holliwood left
[23:13] <Geth> ¦ doc: 58db9e7bc5 | Coke++ | xt/pws/words.pws

[23:13] <Geth> ¦ doc: add 'nullish'

[23:13] <Geth> ¦ doc: 

[23:13] <Geth> ¦ doc: described here:

[23:13] <Geth> ¦ doc: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator

[23:13] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/58db9e7bc5

[23:13] <Geth> ¦ doc: 1c11f70d7a | Coke++ | doc/Language/modules.pod6

[23:13] <Geth> ¦ doc: whitespace

[23:13] *** Doc_Holliwood joined
[23:13] <Geth> ¦ doc: 

[23:13] <Geth> ¦ doc: pass xt/links-not-links.t

[23:13] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1c11f70d7a

[23:17] <moon-child> what is 'words.pws'?

[23:17] *** monkey_ joined
[23:17] <moon-child> oh--word list for a spellchecker?

[23:26] <[Coke]> moon-child: yes

[23:26] <[Coke]> we're doing the bare minimum to avoid introducing spelling errors in the dods

[23:26] <[Coke]> *docs

[23:29] <[Coke]> you can run it with xt/aspell.t (and pass it filenames to check or use TEST_FILES env var)

[23:34] *** rivers left
[23:35] <moon-child> how do I make a self-modifying grammar?

[23:56] *** Manifest0 left
