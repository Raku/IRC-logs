[00:07] *** reportable6 left
[00:09] *** reportable6 joined
[00:17] <thowe> Well, yeah, that's what I was thinking.  Will the version denoted be something newer versions will/should be able to understand and execute, or will is the thinking that there will be warnings?

[00:19] *** swaggboi joined
[00:28] <guifa> yes, the idea is that upon encountering use v.6.c, the interpretation will switch to 6.c mechanics

[00:30] <guifa> I know there was some issue a while back with changes to one where if you created the "same" core class under 6.c and 6.e guarded code, but I forget the exact details and I think vrurg mostly solved it all

[00:33] *** Skarsnik left
[00:44] *** frost joined
[00:44] *** frost left
[01:06] *** jgaz left
[01:40] *** Colt left
[01:41] *** Colt joined
[01:58] <vrurg> The biggest userland problem with 6.e is about roles which are incompatible with 6.c/d classes. Basically it means 'use v6.e; my $v = 42 but role { ... }' is an error now. This restriction can be lifted as the incompatibility is in handling of submethods only, but I would need to get back to it someday later.

[01:58] <guifa> vrurg: ah okay.  i knew it was something there but didn't want to misidentify the issue

[02:12] *** ggoebel left
[02:12] *** ggoebel joined
[02:42] <kybr> is zef just really slow? should i be using zef or is there a different thing now?

[02:49] *** japhb joined
[02:52] <moon-child> kybr: as far as I know, yes

[03:00] *** ggoebel left
[03:02] *** nine left
[03:02] *** nine joined
[03:54] <vrurg> kybr: most likely it is not zef itself, but tests which are taking most of the installation time.

[04:02] *** linkable6 left
[04:02] *** evalable6 left
[04:49] <Xliff> \w

[04:49] <Xliff> What's the best way to rotate an array? So if I have (0...5) and I rotate it 2 steps, I get (2, 3, 4, 5, 0, 1)

[04:50] <moon-child> m: say (0...5).rotate(2)

[04:50] <camelia> rakudo-moar 1b840ec37: OUTPUT: «(2 3 4 5 0 1)␤»

[04:50] <moon-child> Xliff: like that?

[04:51] <Xliff> Oh! LOLOL!!

[04:51] <Xliff> moon-child++

[04:52] <moon-child> :)

[05:01] <guifa> grr

[05:01] <guifa> "Missing serialize REPR function for REPR MVMContext (BOOTContext)"

[05:03] *** evalable6 joined
[05:03] *** linkable6 joined
[05:24] <guifa> seems to be caused by a shaped array

[05:39] <guifa> (in situations where module A uses module B, and module B has a shaped array in it)

[05:40] <Xliff> https://github.com/Xliff/p6-GDA/commit/3516084c9c8d706c1409f03c6ae69fc4d7c9ba60 # Thanks, everyone!

[05:47] *** frost joined
[05:54] *** qorg11 left
[06:06] *** qorg11 joined
[06:08] *** reportable6 left
[06:10] *** reportable6 joined
[06:17] *** solitario left
[06:17] *** solitario joined
[07:16] *** Colt left
[07:16] *** Colt joined
[07:26] *** synthmeat joined
[07:29] *** seednode left
[07:30] *** seednode joined
[08:13] *** solitario left
[08:13] *** solitario joined
[08:17] *** holyghost joined
[08:39] *** TheAthlete joined
[08:40] <holyghost> Hi TheAthlete 

[08:43] <TheAthlete> Hello!

[08:54] *** Sgeo left
[08:57] *** Skarsnik joined
[09:34] <Voldenet> m: my @a; %a.push({ :b(1) :c(2) }); %a.push(%( :b(3) :c(4) )); say %a

[09:35] <camelia> rakudo-moar 1b840ec37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '%a' is not declared.  Did you mean '@a'?␤at <tmp>:1␤------> my @a; ⏏%a.push({ :b(1) :c(2) }); %a.push(%( :b(␤»

[09:35] <Voldenet> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3) :c(4) )); say @a

[09:35] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3}]␤»

[09:35] <Voldenet> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3), :c(4) )); say @a

[09:35] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»

[09:35] <Voldenet> this behaviour is a little surprising

[09:36] <moon-child> yeah, that definitely seems wrong to me

[09:37] <moon-child> nothing to do with arrays fwiw

[09:37] <Voldenet> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3) :c(4) )); @a.push(( :b(5) :c(6) )); say @a

[09:37] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3} (b => 5 c => 6)]␤»

[09:37] <moon-child> m: say %( :3b :4c )

[09:37] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{b => 3}␤»

[09:37] <moon-child> the :4c should definitely not be silently dropped

[09:40] <Voldenet> especially puzzling:

[09:40] <Voldenet> m: my $l = (:2b :3c); say %$l

[09:40] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{b => 2, c => 3}␤»

[09:54] <SmokeMachine> m: my @a; my %b = :3b, :4c; @a.push({ :b(1) :c(2) }); @a.push(%b); say @a

[09:54] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»

[09:54] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(% =  :b(3) :c(4) ); say @a

[09:54] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3}]␤»

[09:54] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(% =  (:b(3) :c(4)) ); say @a

[09:54] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»

[09:55] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(( :b(3) :c(4) ).Hash); say @a

[09:55] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»

[09:55] <SmokeMachine> odd

[09:56] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3), :c(4) )); say @a

[09:56] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»

[09:56] <SmokeMachine> the comma!

[09:57] <moon-child> yes

[09:57] <SmokeMachine> m: say %(:1a :2b); say %(:1a, :2b)

[09:57] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{a => 1}␤{a => 1, b => 2}␤»

[09:57] *** linkable6 left
[09:57] *** evalable6 left
[09:57] <SmokeMachine> m: say %(:1a :2b :3c :4d);

[09:57] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{a => 1}␤»

[09:58] <moon-child> m: say %(:1a 2b, :3c :4d)

[09:58] <camelia> rakudo-moar 1b840ec37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say %(:1a⏏ 2b, :3c :4d)␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        …»

[10:00] *** archenoth joined
[10:03] *** Oshawott left
[10:29] *** ggoebel joined
[10:32] *** dakkar joined
[10:48] <dakkar> TIL: List instances are not value objects

[10:48] <dakkar> so trying to use lists as keys for a map / hash won't work

[10:48] <lizmat> yeah, sadly so

[10:49] <lizmat> https://raku.land/zef:lizmat/Tuple

[10:50] <dakkar> (in addition to the slightly surprising bit where `%hash{@thing}` is interpreted as something like `@thing.map: $hash{$_}`)

[10:50] <lizmat> that's just a slice ?

[10:50] <lizmat> coming from Perl it may be a WAT  :-)   but that's just Stockholm Syndrome  :-)

[10:50] <dakkar> yes, I (now) know

[10:51] <lizmat> the general rule in Raku is that anything between {    } is code

[10:52] <dakkar> if I want to avoid the slice, I have to pass the list via a scalar container (which still doesn't do what I need because lists aren't values)

[10:52] <lizmat> indeed

[10:52] <lizmat> $@thing

[10:52] <lizmat> @thing.item  # more verbose

[10:52] <dakkar> I keep getting surprised by sensible-in-retrospect choices ☺

[10:54] <dakkar> https://www.thenautilus.net/cgit/media-control/tree/ this is the thing I'm making

[10:54] <dakkar> it's a (very minimal, very insecure) web ui to lirc + vlc, to control my "home theatre"

[10:58] *** linkable6 joined
[10:58] <lizmat> nice!   one of my longer term projects is to get rid of Apple TV and replace it with a Raspberry Pi with a Raku app on it

[10:59] <lizmat> where would you be running this ?

[10:59] *** evalable6 joined
[11:04] <dakkar> it's running on a microITX fanless pc

[11:05] <dakkar> bit overpowered, maybe, but it makes sense to me ☺

[11:06] <lizmat> yeah... you gotta work with what you got...  :-)

[11:06] <dakkar> (a user gets automatically logged in, its .bashrc starts X, which starts vlc)

[11:29] *** abraxxa joined
[11:29] *** abraxxa left
[11:49] *** sena_kun left
[11:50] *** sena_kun joined
[12:07] *** dakkar left
[12:08] *** reportable6 left
[12:08] *** reportable6 joined
[12:39] <Geth> ¦ doc: 632dc9c197 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/classtut.pod6

[12:39] <Geth> ¦ doc: Change 'method' to 'sunmethod' for TWEAK

[12:39] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/632dc9c197

[12:39] <linkable6> Link: https://docs.raku.org/language/classtut

[12:47] <nine> [HTTP::Status] Testing with plugin: Zef::Service::TAP+{<anon|1>}

[12:47] <nine> ===> Testing [FAIL]: HTTP::Status:ver<0.0.3>:auth<zef:lizmat>

[12:47] <nine> Aborting due to test failure: HTTP::Status:ver<0.0.3>:auth<zef:lizmat> (use --force-test to override)

[12:47] <nine> Is there any way to get more output from zef here? Like the actual test output

[12:53] <lizmat> ugexe ^^

[12:53] <lizmat> this is why I use my custom test script: it is silent if all ok, but has all the goods (including --ll-exception stacktraces) if it goes wrong

[13:08] *** evalable6 left
[13:08] *** linkable6 left
[13:08] *** evalable6 joined
[13:13] <Xliff> nine: Hmmm.... so only output something if a test fails and only output the failure messages or somesuch?

[13:16] <nine> Xliff: I'd be happy to see any output at all. Currently on this machine all tests fail with no indication of why.

[13:16] <lizmat> https://gist.github.com/lizmat/a860b3364b6994269b3c291e59186394  # typical ok output

[13:17] <lizmat> https://gist.github.com/lizmat/2f44864fa9002e0533c532305de4ec68  # typical failure output

[13:18] <lizmat> (after adding a "die 'just to show'" statement at the end of the test file

[13:18] <lizmat> )

[13:21] <sena_kun> jdv, o/

[13:22] <sena_kun> releasable6, status

[13:22] <releasable6> sena_kun, Next release will happen when it's ready. There are no known blockers. 198 out of 198 commits logged

[13:23] <sena_kun> Just wanted to ensure you know the ignored commits should be specified in the commit message during release. :)

[13:45] *** mathias[m] left
[13:45] *** mathias[m] joined
[13:53] *** discord-raku-bot left
[13:53] *** discord-raku-bot joined
[14:11] *** linkable6 joined
[14:14] *** getimiskon joined
[14:23] *** frost left
[14:42] *** monkey_ joined
[14:52] <jdv> wut now?

[14:53] <jdv> sena_kun: oh, i had noticed that somewhere.  whether i remember at the actual time, eh...

[14:54] <sena_kun> jdv, like this: https://github.com/rakudo/rakudo/pull/4529/commits/ae35c32f1628300c9be3d3d68fd1500267e1dccd

[14:54] <sena_kun> here is the PR: https://github.com/rakudo/rakudo/pull/4529

[14:55] <sena_kun> when I did it, a nice heuristic is to look at the previous release and monkey see, monkey do it, so the chance of forgetting something is less.

[14:55] <jdv> that's what i've been doing.  takes forever but whatever.

[14:55] <jdv> there were only 8 ignored commits for you?

[14:56] *** holyghost left
[14:58] *** Sgeo joined
[14:59] <sena_kun> jdv, it varies from release to release.

[14:59] <sena_kun> more for the next one: https://github.com/rakudo/rakudo/pull/4585/commits/ea0f8067bccfa900f1e72e729d38c03bc8ec13cd

[15:02] <jdv> i forget - what it the purpose there?  the list is already in the changelog.

[15:07] <sena_kun> jdv, AFAIK it is for releasable6 bot to know what commits from the past should not be prompted as "need to log those". It gives you list of commits that are not logged and on release you either have them directly in the changelog or in this form in a commit message.

[15:07] <sena_kun> see https://github.com/Raku/whateverable/blob/master/xbin/Releasable.p6#L42-L53 for the implementation

[15:09] <El_Che> if there are no candidates to take over rakudo start, I would suggest making the project less visible (rakudo site) or archived (issues on github). 2c etc

[15:10] <lizmat> El_Che: PRs welcome: https://github.com/Raku/raku.org

[15:11] <El_Che> lizmat: no, this is not a technical discussion, but more of a political one, e.g. rsc

[15:11] <lizmat> A draft PR is a good source of discussion :-)

[15:12] <MasterDuke> should we consider bundling zef in rakudo releases?

[15:12] <jdv> sena_kun: anyway - this is this release's list - https://gist.github.com/jdv/68a3ae15138eb7e16315e2d0053723af

[15:13] <lizmat> MasterDuke: that is definitely an option, at least for me :-)

[15:13] <El_Che> MasterDuke: I include it in my packages bacause without it is "no batteries included and we won´t tell which ones you need" :)

[15:13] <MasterDuke> yep, El_Che++

[15:14] <El_Che> it's less straight forward thant it sounds, though, raku going for the home install

[15:14] <lizmat> TIL El_Che's distributions have zef  :-)

[15:17] <sena_kun> jdv, looks alright to me.

[15:18] <jdv> i mean 93 is a lot more:)

[15:18] <jdv> cool

[15:20] <jdv> i'm honestly not sure why the bot picked up a bunch of those but i didn't look why yet

[15:21] <sena_kun> jdv, I think that's because we skipped 2021.11, so there was more time for people to do changes.

[15:21] <jdv> seems buggy as a bunch of the commits don't even exist in my repo or they aren't in master's ancestry

[15:21] <jdv> maybe i'll peek later

[15:21] <jdv> but, yeah the sheer volume is likely partly cause that

[15:22] <MasterDuke> there was a force push at one point

[15:22] <MasterDuke> maybe the bot needs a refreshed rakudo clone to work from

[15:23] <lizmat> yeah, there was a force push  :-(

[15:23] <MasterDuke> or something like `git reset --hard`

[15:26] <jdv> i imagined it was some form of git shenanigan

[15:26] <jdv> s

[15:28] <lizmat> the shenanigan was all of my making  :-(

[15:38] <jdv> it made the changelog figuring a challenge:)

[15:39] <lizmat> sorry, should have remembered and mentioned it :-(

[15:39] <ugexe> nine: you can run --/prove. the prove plugin itself just needs someone to wire zefs --verbose flag up to it

[15:41] <jdv> lizmat: oh there was no missing it, thanks

[15:43] <ugexe> nine: oh wait, thats using the TAP::Harness plugin. so `--/prove --/tap-harness`

[15:43] <ugexe> the TAP::Harness plugin could use better integration

[15:48] *** ggoebel left
[15:50] <El_Che> lizmat: https://github.com/rakudo/rakudo.org/pull/75

[15:52] *** mcmillhj joined
[15:53] <jdv> for some reason i'm getting t/spec/S12-construction/destruction.t failures.  anyone else see that.

[15:54] <lizmat> jdv: I've seen them occasionally

[15:54] <jdv> odd cause i didn't rebuild since last night - right on head and i swear it was fine 

[15:54] <jdv> ignoreable?

[15:57] <MasterDuke> that's a flapper

[15:59] <mcmillhj> I am trying to update an Array with a response from a sub but it seems like an extra level of `[]` are being added. What's actually going on here so I can understand and avoid in the future: https://gist.github.com/mcmillhj/3ac9edc27423dfb71e4108da89274c7e ?

[15:59] <tellable6> 2021-12-22T17:43:55Z #raku <[Coke]> mcmillhj - it's the parens around ($should-continue, @buffer) - remove the parens and it works as you expect.

[15:59] <tellable6> 2021-12-22T18:14:25Z #raku <SmokeMachine> mcmillhj it seems if you replace the List `()` with a signature `:()` and the `=` with a `:=` you get what you want: https://glot.io/snippets/g5eg08jvxz

[15:59] <jdv> ok

[16:03] <mcmillhj> SmokeMachine: I am confused as to why that works. What is the difference between the Signature and a normal Capture?

[16:06] *** [Coke] left
[16:09] <guifa> lizmat: data has been successfully pulled apart.  Currently working on deciding the best way API to expose "determine-stuff-based-on-calendrical-inputs" and "determine-stuff-based-on-posix-time-stamp", but I should have that figured out by tonight and integrated back into DateTime::Timezones for your loggable profit.  https://github.com/alabamenhu/TimezonesZoneInfo

[16:09] <lizmat> guifa++

[16:10] <guifa> also advantage of this: I can update the timezone data without needing to update the DateTime::Timezones module anymore (which is basically why I did the same thing with CLDR)

[16:10] <guifa> lizmat++ for putting the idea in my heda

[16:23] *** kjp left
[16:24] *** monkey_ left
[16:24] *** holyghost joined
[16:48] *** slowtype- joined
[16:48] *** slowtyper left
[16:59] *** kjp joined
[17:08] *** morte_ joined
[17:29] *** mcmillhj left
[17:50] *** mcmillhj joined
[17:50] *** mcmillhj left
[18:00] *** ggoebel joined
[18:07] *** reportable6 left
[18:15] *** holyghost left
[18:15] *** holyghost joined
[18:19] *** holyghost left
[18:23] *** holyghost joined
[18:52] *** holyghost left
[18:54] *** holyghost joined
[19:04] *** holyghost left
[19:08] *** reportable6 joined
[20:08] *** linkable6 left
[20:10] *** linkable6 joined
[20:17] *** holyghost joined
[20:22] <Skarsnik> hm, how do I use a 'module' defined in the same file that has a name like 'Foo::MyModule'?

[20:24] <tonyo> Skarsnik: if it's already in scope then no need to `use` it

[20:24] <tonyo> also, haven't seen your name in a long time

[20:28] <Skarsnik> pff, obviously trying to insolate a segfault from a big projet into a single file make it not segfault ><

[20:30] <Skarsnik> I still have one of the weird bug from this code

[20:45] <Skarsnik> my %h = (a => 1, b => 2, c => 3, d => 4); for %h.keys -> $k {say $k; if %h{$k} % 2 == 0 {%h<e> = 5; %h{$k}:delete}}. This can output 4 or 5 values

[20:49] <Skarsnik> I think it's because we insert and remove in the hash it has issue seeing a change in the hash?

[20:54] <Skarsnik> was there a bot to run some code x time?

[20:55] <merryprog> m: say "yup"

[20:55] <camelia> rakudo-moar 1b840ec37: OUTPUT: «yup␤»

[20:55] <merryprog> oh, multiple times

[20:55] <Skarsnik> !help

[20:55] <Skarsnik> evalable6, help

[20:55] <evalable6> Skarsnik, Like this: evalable6: say ‘hello’; say ‘world’ # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Evalable

[20:55] <merryprog> That'd be https://github.com/Raku/whateverable/wiki/Benchable

[20:56] *** getimiskon left
[21:01] <Skarsnik> m: my $cpt = 0; for 0..20 {my %h = (a => 1, b => 2, c => 3, d => 4); for %h.keys.sort -> $k {$cpt++; if %h{$k} % 2 == 0 {%h<e> = 5; %h{$k}:delete}}}; say $cpt

[21:01] <camelia> rakudo-moar 1b840ec37: OUTPUT: «84␤»

[21:01] <Skarsnik> should be like 80 or 100 if this was stable I think

[21:02] <Skarsnik> err, need to remove the sort

[21:03] <Skarsnik> not even sure why it's always 84 with the sort 

[21:04] <Skarsnik> oh because 0..20 is  21 loop

[21:13] <SmokeMachine> m: my $cpt = 0; for 0..20 {my %h = (a => 1, b => 2, c => 3, d => 4); for %h.keys -> $k {$cpt++; if %h{$k} % 2 == 0 {%h<e> = 5; %h{$k}:delete}}}; say $cpt

[21:13] <camelia> rakudo-moar 1b840ec37: OUTPUT: «89␤»

[21:14] <Skarsnik> m:my $cpt = 0; for ^20 {my %h = (a => 1, b => 2, c => 3, d => 4); for %h.keys -> $k {$cpt++; if %h{$k} % 2 == 0 {%h<e> = 5; %h{$k}:delete}}}; say $cpt

[21:14] <evalable6> Skarsnik, rakudo-moar 0cb621eac: OUTPUT: «86␤»

[21:14] <Skarsnik> m:my $cpt = 0; for ^20 {my %h = (a => 1, b => 2, c => 3, d => 4); for %h.keys -> $k {$cpt++; if %h{$k} % 2 == 0 {%h<e> = 5; %h{$k}:delete}}}; say $cpt

[21:14] <evalable6> Skarsnik, rakudo-moar 0cb621eac: OUTPUT: «87␤»

[21:14] <Skarsnik> fun time...

[21:14] *** TheAthlete left
[21:14] <Skarsnik> I will fill an issue x)

[21:15] <SmokeMachine> m: my %a = :1a, :2b, :3c; for %a.keys { .say; %a<a b c>:delete; say %a }

[21:15] <camelia> rakudo-moar 1b840ec37: OUTPUT: «a␤{}␤b␤{}␤»

[21:17] <SmokeMachine> m: my %a = :1a, :2b, :3c; for %a.keys { .say; %a<d e f> = 1 xx *; say %a }

[21:17] <camelia> rakudo-moar 1b840ec37: OUTPUT: «c␤{a => 1, b => 2, c => 3, d => 1, e => 1, f => 1}␤b␤{a => 1, b => 2, c => 3, d => 1, e => 1, f => 1}␤d␤{a => 1, b => 2, c => 3, d => 1, e => 1, f => 1}␤a␤{a => 1, b => 2, c => 3, d => 1, e => 1, f => 1}␤»

[21:19] <SmokeMachine> m: @a = ^10; for @a { .say; @a = () }

[21:19] <camelia> rakudo-moar 1b840ec37: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> <BOL>⏏@a = ^10; for @a { .say; @a = () }␤»

[21:19] <SmokeMachine> m: my @a = ^10; for @a { .say; @a = () }

[21:19] <camelia> rakudo-moar 1b840ec37: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[21:20] <SmokeMachine> m: my @a = ^10; for @a { .say; FIRST @a.push: 99 }

[21:20] <camelia> rakudo-moar 1b840ec37: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤99␤»

[21:21] <Skarsnik> I think it's because I insert and delete something in the hash, so like the size stay the same

[21:24] <SmokeMachine> It seems to me deletion is not reflected in the iterative but addition is… what makes sense…

[21:24] *** djerius left
[21:26] *** djerius joined
[21:31] *** monkey_ joined
[21:46] *** morte_ left
[21:47] *** morte_ joined
[22:12] *** [Coke] joined
[22:12] * [Coke] wonders why irssi didn't reconnect on its own

[22:13] <[Coke]> new internet definitely seems to drop out more often. :|

[22:30] <Geth> ¦ doc: 867454075b | Coke++ | doc/Language/classtut.pod6

[22:30] <Geth> ¦ doc: Revert "Change 'method' to 'sunmethod' for TWEAK"

[22:30] <Geth> ¦ doc: 

[22:30] <Geth> ¦ doc: This reverts commit 632dc9c1978fb8a98139bea8c00181f7f580aaa6.

[22:30] <Geth> ¦ doc: 

[22:30] <Geth> ¦ doc: The new code doesn't compile, so this change needs rework.

[22:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/867454075b

[22:30] <linkable6> Link: https://docs.raku.org/language/classtut

[22:39] *** Voldenet left
[22:41] *** Xliff left
[22:52] <[Coke]> tbrowder: ^^ the example test failed, and the code fails the same way when run against rakudo directly

[22:55] *** morte_ left
[22:58] <tbrowder> hm, did i originally contribute the code? shouldn’t TWEAK be a submethod?

[23:01] <tbrowder> ah, i think the rhs needs  an ! vice .

[23:01] <tbrowder> $!

[23:04] <[Coke]> if it should or not, that was not quite the right solution. I figured this was the easiest way to push it back. :)

[23:05] <tbrowder> if it were my example i think i would have used a prefix ++

[23:06] <tbrowder> i can probably fix it tomorrow. i’m surprised docs are being regenerated so soon

[23:11] <Geth> ¦ doc: 49bf7a2718 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/classtut.pod6

[23:11] <Geth> ¦ doc: TWEAK is a submethod, use ! in twigid

[23:11] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/49bf7a2718

[23:11] <linkable6> Link: https://docs.raku.org/language/classtut

[23:12] *** Voldenet joined
[23:12] <tbrowder> ok, i tweaked the TWEAK again  ;-D

[23:14] <tbrowder> twigid, twigil, “whatever” my granddaughter would say

[23:19] <tbrowder> well, shoot, the postfix ++ operator looks to be the intended one, but the prefix should work. i’ll change it back if the twigil change works

[23:24] <[Coke]> "if it works" - you ran the test, right?

[23:24] <[Coke]> you can use TEST_FILES env var or pass in file names as a command line arg to an individual test.

[23:24] <[Coke]> It fails.

[23:25] <[Coke]> I'll let you revert or fix it; but you can run the test without me. "make xtest" does every test every file. if you have a local change, you can do 'TEST_FILES=doc/Language/classtut.pod6 make xtest' e.g.

[23:30] *** Skarsnik left
[23:33] * [Coke] sends an email to various TPF folks about the selection of Houston for the conference and how that has negatively impacted his decision to attend this year. (If you do the same, please be kind).

[23:34] <[Coke]> I'll let folks know if I hear anything back. (best I am hoping for at this point is a donation to a charity or something to compensate.)

[23:58] <tbrowder> what’s the prob with houston?

