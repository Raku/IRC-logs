[00:01] *** RaycatWhoDat joined
[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:23] *** RaycatWhoDat left
[00:34] *** guifa left
[01:34] *** bloatable6 left
[01:34] *** committable6 left
[01:34] *** notable6 left
[01:34] *** linkable6 left
[01:34] *** greppable6 left
[01:34] *** squashable6 left
[01:34] *** evalable6 left
[01:34] *** reportable6 left
[01:34] *** nativecallable6 left
[01:34] *** benchable6 left
[01:34] *** releasable6 left
[01:34] *** shareable6 left
[01:34] *** sourceable6 left
[01:34] *** coverable6 left
[01:34] *** bisectable6 left
[01:34] *** tellable6 left
[01:34] *** unicodable6 left
[01:34] *** statisfiable6 left
[01:34] *** quotable6 left
[01:35] *** quotable6 joined
[01:35] *** sourceable6 joined
[01:35] *** bisectable6 joined
[01:35] *** committable6 joined
[01:35] *** unicodable6 joined
[01:35] *** linkable6 joined
[01:35] *** squashable6 joined
[01:35] *** benchable6 joined
[01:35] *** statisfiable6 joined
[01:36] *** coverable6 joined
[01:36] *** reportable6 joined
[01:36] *** releasable6 joined
[01:36] *** bloatable6 joined
[01:36] *** evalable6 joined
[01:36] *** notable6 joined
[01:37] *** shareable6 joined
[01:37] *** nativecallable6 joined
[01:38] *** greppable6 joined
[01:38] *** tellable6 joined
[01:59] *** guifa joined
[02:17] *** frost joined
[03:17] *** coverable6 left
[03:17] *** squashable6 left
[03:17] *** bisectable6 left
[03:17] *** releasable6 left
[03:17] *** greppable6 left
[03:17] *** committable6 left
[03:17] *** evalable6 left
[03:17] *** quotable6 left
[03:17] *** reportable6 left
[03:17] *** sourceable6 left
[03:17] *** notable6 left
[03:17] *** shareable6 left
[03:17] *** tellable6 left
[03:17] *** bloatable6 left
[03:17] *** linkable6 left
[03:17] *** unicodable6 left
[03:17] *** statisfiable6 left
[03:17] *** nativecallable6 left
[03:17] *** benchable6 left
[03:17] *** Doc_Holliwood joined
[03:17] *** reportable6 joined
[03:17] *** notable6 joined
[03:17] *** tellable6 joined
[03:18] *** committable6 joined
[03:18] *** shareable6 joined
[03:18] *** linkable6 joined
[03:18] *** releasable6 joined
[03:18] *** benchable6 joined
[03:18] *** statisfiable6 joined
[03:19] *** bloatable6 joined
[03:19] *** squashable6 joined
[03:19] *** coverable6 joined
[03:19] *** quotable6 joined
[03:19] *** sourceable6 joined
[03:19] *** nativecallable6 joined
[03:19] *** bisectable6 joined
[03:19] *** unicodable6 joined
[03:20] *** greppable6 joined
[03:20] *** evalable6 joined
[03:23] *** RandalSchwartz left
[03:41] *** yewscion left
[03:55] *** swaggboi left
[04:10] *** swaggboi joined
[04:16] *** guifa left
[04:18] *** guifa joined
[04:34] *** squashable6 left
[04:34] *** squashable6 joined
[04:37] *** alarix joined
[04:47] *** AlexDaniel left
[04:47] *** demostanis[m] left
[04:47] *** juanfra left
[04:47] *** ComplYue[m] left
[04:47] *** CIAvash left
[04:47] *** tyil[m] left
[04:47] *** juanfra joined
[04:48] *** guifa left
[04:48] *** guifa joined
[04:49] *** demostanis[m] joined
[04:49] *** AlexDaniel joined
[04:50] *** tyil[m] joined
[04:50] *** ComplYue[m] joined
[04:50] *** CIAvash joined
[05:05] *** guifa left
[05:08] *** guifa joined
[05:17] *** Doc_Holliwood left
[05:19] *** guifa left
[05:31] *** jmcgnh left
[05:33] *** jmcgnh joined
[05:36] *** Sgeo left
[06:04] *** reportable6 left
[06:06] *** reportable6 joined
[06:28] *** stoned75_ left
[06:30] *** stoned75 joined
[06:32] *** ufobat_ joined
[07:09] *** alarix left
[07:39] *** stoned75 left
[07:54] *** morayj joined
[08:01] *** stoned75 joined
[08:10] *** Doc_Holliwood joined
[08:49] *** patrickb joined
[09:05] <lizmat> weekly: https://p6steve.wordpress.com/2021/06/09/can-raku-replace-html/

[09:05] <notable6> lizmat, Noted! (weekly)

[09:06] <sjn> title hints about a category error :-|

[09:07] <Altreus> that's a useful term

[09:08] <Altreus> I feel like I'm constantly spotting logical errors in things people do, and I'm always sure I'm not the first one to see this sort of thing but I have no idea how to express it!

[09:32] <lizmat> I'd suggest reading the article

[09:33] <lizmat> I guess a better title would have been: "Can writing Raku replace writing HTML"

[09:33] <lizmat> do you agree?

[09:36] *** Woodi_ is now known as Woodi

[09:37] <Altreus> Feels like one of several recent articles that are certainly interesting from an academic/learning exercise perspective, but I'm not sure I'd want to combine these worlds

[09:38] <Altreus> TBH this is largely because whenever I write HTML it always turns out to be way more complex than I expected

[09:39] <lizmat> Well, fwiw, Cro and specifically Cro::WebApp::Template *are* combining these worlds

[09:40] <lizmat> I guess, starting with Computer Based Training in the late 70s, has made me more aware of the frontend aspects of programs than of the backend :-)

[09:43] <Altreus> I have yet to find a templating system that I actually find helps me to write HTML!

[09:43] <Altreus> But this is because most of them are actually *text* processing systems

[09:43] <Altreus> and none of them acknowledges the structure of HTML and works with it

[09:43] *** stoned75 left
[09:43] <Altreus> This HTML-in-Raku concept could definitely address that

[09:43] *** Doc_Holliwood left
[09:45] <moon-child> I did a little lisp-syntax-ish html templating thing at one point

[09:45] <moon-child> unlike other similar things, it didn't have a concept of interpolation.  Instead, everything was represented using functions

[09:46] <lizmat> What I like about Cro::WebApp::Template, is that it actually all becomes executable code at some point

[09:46] *** Doc_Holliwood joined
[09:46] <moon-child> e.g.: [p this [em is] text].  That calls the function 'em' with the word 'is' as an argument, then argues the words 'this ' '<em>is</em>' ' text' to 'p'

[09:46] <moon-child> so you can also call normal (computational) functions, but it's completely uniform

[09:47] <lizmat> this is essentially what the § term does in the article

[09:47] *** stoned75 joined
[09:47] <moon-child> yes but it's ugly, you have to put quotation marks around everything :)

[09:48] <lizmat> you mean the <html> part ?

[09:49] <moon-child> §<p>(:id<demoFont>, 'Your Message (required)').  There are quotation marks around 'Your Message (required)'

[09:50] <moon-child> which makes it more of a pain to e.g. emphasize a single word in long-form prose

[09:52] <lizmat> well, you could e.g. apply markdown semantics on strings in the § handler

[09:53] <lizmat> §<p>(:id<demoFont>, 'Your Message (*required*)').

[09:53] <lizmat> or just do:

[09:53] <lizmat> §<p>(:id<demoFont>, 'Your Message (<em>required</em>)').

[09:53] <lizmat> perhaps ?

[09:57] *** patrickb left
[10:02] <Altreus> lizmat: Does that mean there is, in theory, scope for Cro::WebApp::Template to have a "Skip this tag" function? Such that, if you've already started a tag, and later you find it's not required, you can bail on the whole thing?

[10:02] <Altreus> This is one of two features I really need any HTML template language to offer me

[10:02] <Altreus> The other one is a wrap-this-tag-if-condition sort of feature

[10:03] <lizmat> well, Cro::WebApp has <?$variable> ... </?> 

[10:04] <lizmat> but for wrapping something, you'd need two of them atm

[10:04] <lizmat> afaik

[10:05] <lizmat> Altreus: could you give an example, so we're on the same page ?

[10:08] <Altreus> well basically what you said

[10:09] <Altreus> I never want to have to do something like [% IF link %]<a ...>[% END %] <whatever> [% IF link %]</a>[% END %]

[10:09] <Altreus> I would MUCH rather do <whatever>[% IF link %]wrap <a ...>[% END %]</whatever>

[10:10] <Altreus> tt2 syntax cos I'm not familiar enough with cro's :)

[10:10] <Altreus> But if your template language is for HTML and not just text in general, you can make use of the fact that you can assume a DOM

[10:12] <Altreus> A good example would be something like: <foreach page><div><span><if page != current_page>wrap <a href="link-to-$page"></if><= page ></span></div></foreach>

[10:12] <Altreus> then you get <a><span>page_number</span></a> except for the current page, as is common on many pagination navs

[10:13] <lizmat> where does the <a> come from ?

[10:13] <lizmat> or did you mean s/a/div ?

[10:14] *** holly_ left
[10:15] <lizmat> fwiw, I could envision something like:

[10:16] <lizmat> <§div $condition>foobar</§>

[10:16] <lizmat> generating "<div>foobar</div>" if $condition is true, and "foobar" if it is false

[10:20] <moritz> another common thing is: generate an <ul> with a list of <li>s only if my @array is non-empty

[10:20] <Altreus> <div><a><span> really, yeah

[10:20] <Altreus> lizmat: yes perfect, except this section sign is something I've been holding my tongue about

[10:21] *** sena_kun joined
[10:21] <lizmat> that would be <§ul @choices><@choices><li><$_></li></@></§>

[10:21] <Altreus> The first blog post said "it's up there in the <wherever> on your keyboard" and I've not been able to tactfully say "Yeah on your nonstandard Mac layout"

[10:21] <Altreus> moritz: at least with that, there's only one if wrapping it

[10:21] <lizmat> and then only on a standard US Mac layout :-)

[10:21] <Altreus> I just have a pet peeve for languages that make me repeat the if to close the tag

[10:22] <Altreus> <?$variable <ul ...>>  # would this look as horrible as I feel it would?

[10:22] <Altreus> or, worse, make parsing hard

[10:22] <Altreus> I'd proritise keeping the parser simple 

[10:23] <lizmat> moritz: perhaps even better: <§ul @choices><@choices li><$_></@></§>

[10:23] <lizmat> making the wrapping of each iteration with <li> </li> more automatics

[10:23] <lizmat> *s

[10:24] <Altreus> <@choices? ul><@choices<> li>

[10:24] <Altreus> This <> was a quick placeholder

[10:24] <Altreus> But the "unpack" idiom from raku felt nice in this context

[10:24] <Altreus> is that the right term? unpack?

[10:24] <lizmat> <@choices></@> is already idiom in CWT for iterationg on @choices

[10:25] <lizmat> setting $_ on each iteration

[10:25] <Altreus> is there any existing meaning for <$VARIABLE-HERE WORDS HERE>?

[10:25] <lizmat> don't think so

[10:28] *** frost left
[10:29] <Altreus> If not then we wouldn't be treading on anything, and the basic meaning would always be to "use WORDS HERE as the HTML tag, and act on it based on VARIABLE"

[10:31] <Altreus> I'll ask

[10:33] *** holly_ joined
[11:01] *** aca joined
[11:14] *** Doc_Holliwood left
[11:15] *** holly_ left
[11:26] *** aca left
[11:38] *** yewscion joined
[11:40] *** patrickb joined
[11:45] *** holly_ joined
[11:47] *** yewscion left
[11:55] *** morayj left
[12:00] *** frost joined
[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[12:04] <stoned75> n

[12:04] *** sono left
[12:08] <MasterDuke34> n+1

[12:10] <Altreus> .. *

[12:14] <holly_> o.o

[12:24] <holly_> :o|

[12:35] *** holly_ left
[12:37] *** holly_ joined
[12:40] *** abraxxa left
[12:48] <Geth> ¦ ecosystem: stuart-little++ created pull request #592: Add RakuRename to ecosystem

[12:48] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/592

[12:55] <Geth> ¦ ecosystem: eed3caa44f | chirvasitua++ | META.list

[12:55] <Geth> ¦ ecosystem: Add RakuRename to ecosystem

[12:55] <Geth> ¦ ecosystem: 

[12:55] <Geth> ¦ ecosystem: See https://github.com/stuart-little/RakuRename

[12:55] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/eed3caa44f

[12:55] <Geth> ¦ ecosystem: 766c4adbb9 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[12:55] <Geth> ¦ ecosystem: Merge pull request #592 from stuart-little/RakuRename

[12:55] <Geth> ¦ ecosystem: 

[12:55] <Geth> ¦ ecosystem: Add RakuRename to ecosystem

[12:55] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/766c4adbb9

[12:59] *** abraxxa joined
[13:02] *** Xliff left
[13:21] *** patrickb left
[13:30] *** RandalSchwartz joined
[13:39] *** morayj joined
[13:46] <Geth> ¦ doc: 54b178d544 | (Stoned Elipot)++ | doc/Type/Num.pod6

[13:46] <Geth> ¦ doc: Add missing 'method' words

[13:46] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/54b178d544

[13:46] <linkable6> Link: https://docs.raku.org/type/Num

[14:00] *** sena_kun left
[14:07] *** Sgeo joined
[14:11] *** sena_kun joined
[14:19] *** morayj left
[14:31] *** frost left
[14:38] *** ufobat__ joined
[14:42] *** ufobat_ left
[15:12] *** kylese joined
[15:18] *** cnx joined
[15:26] *** holly_ left
[15:30] *** stoned75 left
[15:37] *** holly_ joined
[15:41] <cnx> hi, could sb remind me how to call a method with functional syntax?

[15:43] *** holly_ left
[15:50] <cnx> nvm i found it, it's call indirect invocant syntax, but why doesn't `add $*HOME: '.cache'` work?

[16:26] <moritz> how does it not work? what does it do? what did you expect it to do?

[16:33] *** japhb left
[16:37] *** eseyman_ is now known as eseyman

[16:41] *** ingy joined
[16:45] *** monkey_ joined
[16:54] *** kst left
[17:03] *** lucerne joined
[17:04] *** greyrat joined
[17:05] <greyrat> Is the perf of raku better than perl?

[17:15] <moritz> it always depends on what you do

[17:16] <moritz> there are cases where rakudo is faster than perl 5 (like tight loops with natively typed variables), and things where perl5 wins out hands down, like regexes

[17:24] <greyrat> I was thinking of simple one-liners for data processing (`perl -lpe`)

[17:24] <greyrat> It seems perl5 is still best there?

[17:34] <MasterDuke34> probably, raku's startup time is a bit slower than perl's

[17:34] <Altreus> I would expect (he says, carefully) that you are more likely to run across unoptimised Raku than unoptimised Perl5 given an arbitrary thing

[17:35] <Altreus> program

[17:39] *** Raycat|Work joined
[17:52] *** monkey_ left
[17:53] *** ufobat__ left
[17:54] *** monkey_ joined
[17:55] <jdv> compilation and relatedly regexes tend to be slow

[17:56] *** ufobat__ joined
[18:02] <m6locks> https://www.youtube.com/watch?v=Kba9HqqBopA

[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:23] *** Doc_Holliwood joined
[18:30] *** sono joined
[18:32] *** colomon joined
[18:33] <colomon> o/

[18:33] <colomon> hi gang, I’m trying to figure out if the behavior I’m seeing in Hash.append is intentional or a bug

[18:35] <colomon> m: my %a = a => [1, 2, 3]; my %b = a => [4, 5, 6], b => [7, 8, 9]; %a.append(%b); say %a; %b<a>.push: 100; %b<b>.push: 200; say %a;

[18:35] <camelia> rakudo-moar 919fe7b85: OUTPUT: «{a => [1 2 3 4 5 6], b => [7 8 9]}␤{a => [1 2 3 4 5 6], b => [7 8 9 200]}␤»

[18:37] <colomon> basically, when you do the append, if the original hash already has a member, then the values from the appended version are just pushed onto the existing array in the original.  But if the original doesn’t have a member, the new member you get is just the original array.

[18:38] <colomon> I think I can work around it by prestaging, just wondering if I should have to or not; to me, the current behavior feels very inconsistent.

[18:39] <Altreus> I guess the worst part of that is that the b array is copied by ref

[18:40] <codesections> I'm not sure I followed, but aren't you describing the difference between .push and .append?

[18:41] <colomon> @codesections nope

[18:41] <codesections> m: say ^10 .grep: (:is-prime)

[18:41] <camelia> rakudo-moar 919fe7b85: OUTPUT: «(2 3 5 7)␤»

[18:41] <colomon> well, actually I think with push it would explicitly be a ref in both cases?

[18:41] <codesections> rw

[18:42] <Altreus> colomon: I guess I'm not sure what you want it to do

[18:43] <colomon> I don’t want to have some of the arrays add their values and others a ref to the array

[18:44] <Altreus> so the ref thing is the problem, not the recursive append?

[18:44] <colomon> I don’t think it’s recursive?

[18:44] <colomon> Let me see if I can make a gist example which is clearer.

[18:45] <colomon> (we can still use evalbot with gists, right?)

[18:46] <colomon> m: https://gist.github.com

[18:46] <camelia> rakudo-moar 919fe7b85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3https:7⏏5//gist.github.com␤    expecting any of:␤        colon pair␤»

[18:46] <colomon> m: https://gist.github.com/colomon/1588c66596f21cfb7d827583ab135fdf

[18:46] <camelia> rakudo-moar 919fe7b85: OUTPUT: «{a => [1 2 3 4 5 6], b => [7 8 9]}␤{a => [1 2 3 4 5 6], b => [7 8 9 200]}␤»

[18:47] *** Shaeto joined
[18:47] <colomon> The point being, even though I’ve done apparently the samy thing to %b<a> and %b<b>, only the change to %b<b> is reflected in %a, because %b<a> is added by values to %a, while %b<b> is added by ref.

[18:48] <colomon> obviously can be worked around by getting all the keys from %b and making sure they are also there in %a

[18:49] <colomon> but I can’t think of why you’d ever want append to behave the way it does?

[18:52] *** monkey_ left
[19:01] <codesections> Interesting; I see what you mean

[19:04] *** kylese left
[19:07] <lizmat> colomon: I think that qualifies as a bug

[19:14] <nine> I think the displayed behaviour is consistent both internally and with the specification

[19:35] <codesections> Without weighing in on whether it's a bug, I think you could get the behavior you want with %a.append: %b».clone

[19:36] *** patrickb joined
[19:36] <codesections> (which is easier than fooling with checking the keys is %a)

[19:36] <codesections> S/is/in/

[19:36] <lizmat> afk again&

[20:01] *** swaggboi left
[20:05] <raydiak> do we have a way to search for modules by dependency? or any other way to know how much our modules are being used? noticed one of mine in some code in a conference talk, makes me wonder if I should pay more attention to some of them

[20:08] <raydiak> I generally operate under the assumption that I'm off in a corner doing my own thing. If I thought any of it was being used by other people, I'd put more focus in those areas

[20:09] *** swaggboi joined
[20:09] *** stoned75 joined
[20:15] <MasterDuke34> jmerelo has created river diagrams before

[20:18] <raydiak> any idea where I can see that, or the thing which generates it? even if it's outdated it'd at least be one data point

[20:19] <[Coke]> be nice to get dependency searching on the web interface

[20:19] <MasterDuke34> i think it was in one of his personal repos. maybe just try looking in github

[20:23] <raydiak> https://github.com/jmerelo shows zero public repos or even activity. maybe he'll see the mention here and chime in the next time he's around

[20:24] <raydiak> oh wait, zef has rdepends. is that for installed modules, or the whole ecosystem?

[20:24] *** Shaeto left
[20:24] <[Coke]> cd

[20:25] *** Shaeto joined
[20:26] <raydiak> seems to be for the whole ecosystem, cool

[20:27] <Geth> ¦ doc: 31bad392f4 | (Stoned Elipot)++ | doc/Type/Num.pod6

[20:27] <Geth> ¦ doc: Add Num.Num

[20:27] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/31bad392f4

[20:27] <linkable6> Link: https://docs.raku.org/type/Num

[20:29] <m6locks> MasterDuke34: what about here https://github.com/JJ

[20:29] <MasterDuke34> yep, https://github.com/JJ/raku-river

[20:30] <raydiak> cool, thank you

[20:31] <SmokeMachine> Hi there! it seems Perl6::TypeGraph is required by Documentable, but ref can't find it...

[20:32] <SmokeMachine> https://usercontent.irccloud-cdn.com/file/sIPYqmpk/image.png

[20:33] *** ufobat__ left
[20:35] <m6locks> aye getting the same error

[20:35] <raydiak> it was renamed: https://github.com/JJ/Raku-Doc-TypeGraph/commit/929eba9de9fbf8e90f5a0de5d6af3a517cffe0e5

[20:38] <raydiak> and there is an issue: https://github.com/Raku/Documentable/issues/155

[20:55] *** thundergnat joined
[20:59] *** thundergnat left
[21:15] *** thundergnat joined
[21:18] <thundergnat> radiak: I use Image::Png::Portable quite a bit. I originally added the Barnsley fern example from Util's talk.

[21:19] *** patrickb left
[21:19] <thundergnat> So it's out in the wild.

[21:19] <Util_> thundergnat++

[21:20] <thundergnat> Oh! hi Util++ Enjoyed your talk.

[21:21] <Util_> thundergnat: Thanks! I owed you a heads-up that I would be showing your code. I can only plead personal chaos for the failure.

[21:23] <thundergnat> No problem, it's public  code on a public site. I'm just glad there wasn't too much to dislike about it. 

[21:24] <thundergnat> It was pretty much just a direct translation of the Perl entry.

[21:27] <[Coke]> Util_: Hi there!

[21:27] <[Coke]> Looking forward to the next con where I can buy you a coffee or something. :)

[21:29] <Geth> ¦ doc/real-coercers: 9fc1402f43 | (Stoned Elipot)++ | 2 files

[21:29] <Geth> ¦ doc/real-coercers: Add Real.{Int,Num,Rat} coercers ref #3782

[21:29] <Geth> ¦ doc/real-coercers: 

[21:29] <Geth> ¦ doc/real-coercers: ... and remove non-existent Numeric.{Int,Num,Real} ones

[21:29] <Geth> ¦ doc/real-coercers: review: https://github.com/Raku/doc/commit/9fc1402f43

[21:30] <Geth> ¦ doc: stoned++ created pull request #3896: Add Real.{Int,Num,Rat} coercers ref #3782

[21:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3896

[21:31] <raydiak> thundergnat: thanks for the feedback! I'll have a look at it, make sure it's current, start versioning it properly, all that. Let me know if you have any requests

[21:31] *** linkable6 left
[21:31] <thundergnat> radiak++

[21:32] <raydiak> Util++ good talk, I enjoyed it

[21:32] *** linkable6 joined
[21:32] <thundergnat> err raydiak++ (on mobile )

[21:33] <[Coke]> someone have a link to the talks?

[21:33] <[Coke]> (are they on YT yet?)

[21:34] <domm> https://www.youtube.com/yapcna

[21:34] <codesections> They were/are streamed live (the last set of lightning talks is going on now)

[21:35] <[Coke]> ... that seems like an obvious link now that I see it. Thanks. :)

[21:35] <codesections> and then are posted with a bit of a delay

[21:40] <[Coke]> I think we need to agree to pronounce it like R(https://www.youtube.com/watch?v=gX13o7sovaY)

[21:58] *** stoned75 left
[21:59] *** hankache joined
[22:08] <SmokeMachine> @codesections is there a link to épée?

[22:08] <raydiak> hah, I like it

[22:08] <SmokeMachine> that's not slack... sorry...

[22:08] <SmokeMachine> codesections: is there a link to épée?

[22:10] *** xinming left
[22:12] *** xinming joined
[22:12] *** Shaeto left
[22:12] <codesections> There isn't yet.  I hope to release an alpha version soon – I had a usable version, but it required you to write too much JS, and I decided to re-do a portion of the API before presenting it in public

[22:12] <codesections> (which is why I wasn't planning to talk about it at the conference)

[22:15] *** hankache left
[22:16] *** Shaeto joined
[22:21] *** linkable6 left
[22:21] *** Shaeto left
[22:22] <Util_> raydiak: thanks!

[22:23] *** linkable6 joined
[22:34] *** Shaeto joined
[22:38] *** Shaeto left
[22:40] <leont> Released the Raku version of my module 30 minutes before my lightning talk, JIT conference-oriented programming 😅

[22:43] *** Shaeto joined
[22:48] *** Shaeto left
[22:52] *** Shaeto joined
[22:55] *** sena_kun left
[22:57] *** Shaeto left
[23:00] *** samcv left
[23:01] *** swaggboi left
[23:01] *** Shaeto joined
[23:02] <raydiak> m: say Int.does: Numeric; say int.does: Int; say int.does: Numeric;

[23:02] <camelia> rakudo-moar 9433d0f93: OUTPUT: «True␤True␤False␤»

[23:02] <raydiak> is that right?

[23:03] *** samcv joined
[23:06] *** Shaeto left
[23:09] <codesections> Hmm, that doesn't look right.

[23:09] <codesections> m: say int.does: Cool; say int.does: Real

[23:09] <camelia> rakudo-moar 9433d0f93: OUTPUT: «True␤False␤»

[23:10] *** thundergnat left
[23:11] *** Shaeto joined
[23:11] <raydiak> I thought maybe it's because Numeric (and Real) are roles composed into parent classes of int, but that shouldn't be it either because this works:

[23:11] <raydiak> m: role R {}; class A does R {}; class B is A {}; say B.does: R

[23:11] <camelia> rakudo-moar 9433d0f93: OUTPUT: «True␤»

[23:11] <moon-child> a guess: some cheating going on with native types

[23:11] <codesections> Maybe it's something to do with the auto boxing for natives 

[23:11] <codesections> yeah, that

[23:12] <codesections> m: my int $i = 1; say $i.does: Numeric

[23:12] <camelia> rakudo-moar 9433d0f93: OUTPUT: «True␤»

[23:12] <raydiak> ah...hm

[23:13] <raydiak> m: my int $i = 1; say $i.WHAT

[23:13] <camelia> rakudo-moar 9433d0f93: OUTPUT: «(Int)␤»

[23:14] *** swaggboi joined
[23:14] <raydiak> m: my int $i = 1; say $i.VAR.WHAT

[23:14] <camelia> rakudo-moar 9433d0f93: OUTPUT: «(IntLexRef)␤»

[23:15] <raydiak> m: my Int $i = 1; say $i.VAR.WHAT

[23:15] <camelia> rakudo-moar 9433d0f93: OUTPUT: «(Scalar)␤»

[23:15] <raydiak> now I'm in over my head :)

[23:15] *** Shaeto left
[23:20] *** yewscion joined
[23:29] *** Shaeto joined
[23:33] *** Shaeto left
[23:38] *** Shaeto joined
[23:42] *** Shaeto left
[23:53] *** Doc_Holliwood left
[23:56] *** Shaeto joined
