[00:03] *** reportable6 left
[00:03] *** reportable6 joined
[00:17] *** Kaiepi left
[00:18] *** Kaiepi joined
[00:27] *** simcop2387 left
[00:27] *** simcop2387 joined
[00:27] *** perlbot joined
[00:49] *** lgtaube left
[01:17] *** holly left
[01:35] *** linkable6 joined
[02:17] *** lgtaube joined
[02:48] *** cbk__ joined
[03:38] *** frost joined
[04:38] *** greppable6 left
[04:38] *** tellable6 left
[04:38] *** evalable6 left
[04:38] *** committable6 left
[04:38] *** squashable6 left
[04:38] *** coverable6 left
[04:38] *** linkable6 left
[04:38] *** bisectable6 left
[04:38] *** shareable6 left
[04:38] *** notable6 left
[04:38] *** benchable6 left
[04:38] *** sourceable6 left
[04:38] *** quotable6 left
[04:38] *** statisfiable6 left
[04:38] *** nativecallable6 left
[04:38] *** bloatable6 left
[04:38] *** releasable6 left
[04:38] *** reportable6 left
[04:38] *** unicodable6 left
[04:38] *** releasable6 joined
[04:38] *** bisectable6 joined
[04:39] *** squashable6 joined
[04:40] *** greppable6 joined
[04:40] *** statisfiable6 joined
[04:41] *** benchable6 joined
[04:41] *** quotable6 joined
[05:12] *** Doc_Holliwood joined
[05:31] *** dogbert11 left
[05:35] *** dogbert17 joined
[05:39] *** coverable6 joined
[05:40] *** bloatable6 joined
[05:41] *** evalable6 joined
[05:41] *** reportable6 joined
[05:41] *** notable6 joined
[05:42] *** linkable6 joined
[05:42] *** shareable6 joined
[05:43] *** sourceable6 joined
[05:43] *** tellable6 joined
[05:44] *** unicodable6 joined
[05:44] *** nativecallable6 joined
[05:49] *** committable6 joined
[05:55] *** Xliff joined
[05:56] <Xliff> o

[05:56] <Xliff> Who maintains the Atom plugin for Raku?

[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:54] *** abraxxa joined
[06:59] *** abraxxa left
[06:59] *** p6steve left
[07:00] *** p6steve joined
[07:00] *** abraxxa joined
[07:26] *** Shaeto joined
[07:29] *** Doc_Holliwood left
[07:43] *** dakkar joined
[07:46] *** stoned75 left
[08:02] *** dolmen joined
[08:04] *** stoned75 joined
[08:07] *** Sgeo left
[08:08] *** Kaiepi left
[08:08] *** Kaipi joined
[08:36] *** dolmen left
[08:37] *** dolmen joined
[09:40] *** Kaipi left
[09:40] *** Kaipi joined
[10:26] * lizmat clickbaits https://rakudoweekly.blog/2021/05/31/2021-22-under-the-bus/

[10:28] *** sena_kun joined
[10:29] *** sena_kun left
[10:29] *** sena_kun joined
[10:33] *** dolmen left
[10:50] *** patrickb joined
[11:28] *** morayj joined
[11:34] *** dolmen joined
[11:34] *** dolmen left
[11:41] *** morayj left
[11:50] *** holly joined
[11:54] *** morayj joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:04] *** abraxxa left
[12:06] *** sono left
[12:06] *** abraxxa joined
[12:11] *** abraxxa left
[12:12] *** abraxxa joined
[12:16] <stoned75> ~

[12:16] <stoned75> oops

[12:18] *** Doc_Holliwood joined
[13:14] *** dogbert11 joined
[13:15] *** dogbert11 left
[13:15] *** dogbert11 joined
[13:16] *** dogbert17 left
[13:23] *** jberkel joined
[13:26] *** Od1n joined
[13:26] <Od1n> hello

[13:28] <jberkel> hi, i'm trying to write a simple regex but it's already failing. I want to match a single hash (#) sign: my regex hash { \# };   => Malformed regex

[13:29] <jberkel> does hash need to be escaped in some other way?

[13:32] <Altreus> quote it

[13:33] <Juerd> It works with '#' but shouldn't \# work too?

[13:34] <Altreus> that's one for the grown ups

[13:34] <Altreus> I just know non-alnum strings need quoting

[13:35] <jberkel> https://docs.raku.org/language/regexes mentions: / \# /;             # matches the hash metacharacter literally 

[13:35] <jberkel> so i assumed that's the way to do it

[13:37] <jberkel> it looks like the # is interpreted as end of line comment, leaving a single \

[13:43] *** dakkar left
[13:46] <Altreus> ah, regex foo { ... } doesn't trigger the same parsing rules as / ... / then I guess

[13:50] <Shaeto> what does meat *@ and *% in parameters definition ?

[13:52] <tyil[m]> Shaeto: https://docs.raku.org/type/Signature#index-entry-slurpy_argument

[13:54] <jberkel> ok, it works with quoting, so i'm already a bit further. thanks

[13:54] <Shaeto> single * or double ** or + is slurpy :( or my god

[13:54] <Shaeto> ty

[13:56] *** dakkar joined
[14:11] *** Doc_Holliwood left
[14:19] *** Doc_Holliwood joined
[14:29] *** frost left
[14:30] *** jberkel left
[14:30] *** SmokeMachine left
[14:30] *** SmokeMachine joined
[14:38] *** morayj left
[14:40] *** p6steve left
[14:42] *** p6steve joined
[14:44] *** Sgeo joined
[14:45] *** Od1n left
[14:46] *** p6steve left
[14:55] *** p6steve joined
[14:59] *** Doc_Holliwood left
[15:02] *** Doc_Holliwood joined
[15:08] *** Kaipi left
[15:11] *** Kaipi joined
[15:16] *** jmcgnh left
[15:19] *** masak_ joined
[15:21] *** jmcgnh joined
[15:24] <holly> http://github.com/theholyghost2/Solstice should be more compilable except for SDL2::Raw system. I will debug some more later on

[15:25] <holly> Solstice is an old NES game, see google images or something

[15:26] <holly> It's easy to RPG elements now

[15:26] <holly> s/to/to add

[15:32] *** stoned75 left
[15:44] *** eseyman joined
[16:02] <lizmat> m: react whenever supply emit "hello" { .say }    # a roundabout way of saying "hello"  :-)

[16:02] <camelia> rakudo-moar f83e55116: OUTPUT: «hello␤»

[16:05] *** stoned75 joined
[16:05] <moritz> how async of you :D

[16:21] <holly> ok, Solstice compiles :-)

[16:21] <holly> now to coerce it

[16:22] <holly> I want it in the ecosystem later on

[16:26] <lizmat> holly: would be nice if it had tests before you put it in the ecosystem :-)

[16:27] <holly> sure, I'll paint a Solstice-o-matic :-)

[16:27] <holly> tests are for after debugging the game

[16:27] <holly> it's more or less difficult to test

[16:28] <holly> but I'll see what I can do

[16:29] <holly> Later on I'll make an adventure game out of it

[16:30] <holly> from back in the day, problem is I'm not too good at graphics

[16:32] *** stoned75 left
[16:32] <holly> Maybe we can make one with us designing the storyline

[16:33] <holly> PRs or something

[16:36] *** dakkar left
[16:37] <holly> anyway, SFY

[17:04] *** patrickb left
[17:06] *** patrickb joined
[17:14] *** guer joined
[17:19] *** guifa joined
[17:19] <guifa> o/

[17:20] <holly> hi

[17:24] *** jmcgnh left
[17:24] *** SmokeMachine left
[17:24] *** sourceable6 left
[17:24] *** shareable6 left
[17:24] *** linkable6 left
[17:24] *** notable6 left
[17:24] *** evalable6 left
[17:24] *** bloatable6 left
[17:24] *** coverable6 left
[17:24] *** peteretep left
[17:24] *** kawaii_ left
[17:24] *** kevin1 left
[17:24] *** ComplYue[m] left
[17:24] *** silug left
[17:24] *** camelia left
[17:24] *** guer left
[17:24] *** codesect` joined
[17:24] *** kawaii_ joined
[17:24] *** daxim joined
[17:24] *** sourceable6 joined
[17:24] *** linkable6 joined
[17:24] *** bloatable6 joined
[17:24] *** shareable6 joined
[17:24] *** evalable6 joined
[17:24] *** notable6 joined
[17:24] *** coverable6 joined
[17:24] *** cognominal joined
[17:24] *** silug joined
[17:24] *** samebchase joined
[17:24] *** charsbar joined
[17:24] *** peteretep joined
[17:24] *** kevin1 joined
[17:24] *** guer joined
[17:25] *** SmokeMachine joined
[17:25] *** moon-child joined
[17:27] *** codesect` left
[17:28] *** guer left
[17:28] *** jmcgnh joined
[17:30] *** guer joined
[17:31] *** codesections joined
[17:36] *** p6steve left
[17:44] *** dogbert11 left
[17:44] *** dogbert11 joined
[17:45] *** dogbert11 left
[17:46] *** ComplYue[m] joined
[17:47] *** dogbert11 joined
[17:53] *** p6steve joined
[18:03] *** reportable6 left
[18:04] <Xliff> Good morning.

[18:04] <Xliff> How hard would this be to implement?

[18:05] <Xliff> Heredoc quoting construct is q:to/END/ right?

[18:05] *** reportable6 joined
[18:05] <Xliff> WVCards, markup their ilk are becoming more popular and they include their own ending delimiter?

[18:06] <Xliff> So why not a heredoc that has the ending inclusive so one can do....

[18:06] <Xliff> q:TO/END:VCARD/?

[18:06] <Xliff> Would this be better served on problem-solving?

[18:07] <codesections> I kind of like that.  Proposed syntax: q:thru/VCARD/ 

[18:08] <codesections> but yeah, I think that'd probably need a problem-solving issue, since it'd be a new language feature 

[18:08] <holly> maybe use delimiter problem solving

[18:08] <holly> e.g. theorem prover

[18:10] <codesections> Would it only work for a delimiter that is the only thing on its line?  Or any line-terminal delimiter?

[18:10] <Xliff> codesections: Only thing on its line.

[18:10] <Xliff> I will move to problem-solving. Thanks!

[18:11] <Xliff> codesections++  # Better syntax

[18:17] <Xliff> Done.

[18:17] <Xliff> https://github.com/Raku/problem-solving/issues/282

[18:29] <codesections> Anyone interested in a Birds of a Feather session at the Perl & Raku conf? https://www.reddit.com/r/rakulang/comments/nq0wcz/birds_of_a_feather_perl_raku_conf/

[19:05] *** linkable6 left
[19:05] *** evalable6 left
[19:05] *** evalable6 joined
[19:06] *** stoned75 joined
[19:07] *** linkable6 joined
[19:12] *** stoned75 left
[19:17] <guifa> Xliff++ that sounds like a pretty nice proposal

[19:18] <guifa> I don't think it would be too hard, it's probably just setting a boolean during parsing and then adjusting the cut off point for the string somewhere along the way

[19:18] <guifa> (although it's crossing language boundaries, so that may complicate it a bit but not too badly)

[19:21] <Xliff> guifa: I don't think it will be too hard to implement. I am just seeking thoughts on the matter, so if you can comment on the issue, I'd appreciate it.

[19:25] <guifa> Xliff: will do.  your stray space actually causd jnthn to make a really good point (although he didn't expound on it)

[19:26] <guifa> The location of END in a normal q:to/END/ lets the parser know how many spaces on each line to strip out

[19:27] <guifa> since it's on its own line, that doesn't really cause any issues at all.  But for, e.g., an XML end tag that may be on the same line as one or more other tags, it's not clear how to apply the indent-stripping functionality

[19:28] <lizmat> guifa: the end string needs to be the only thing apart from whitespace, no>

[19:28] <lizmat> ?

[19:29] <guifa> in a traditional heredoc yeah.

[19:29] <codesections> Yeah, I asked about that ^^^ and Xliff confirmed that would still be true in this proposal

[19:29] <guifa> err whoa, I totally missed that,  apologies

[19:30] <codesections> But yeah, absent that it'd get ... tricky

[19:30] <codesections> (That'd be nice in many use cases, but much harder to implement)

[19:31] <guifa> I guess you could always allow for an extra modifier, but that does complicate it more.  Like q:thru:4indent/</xml>/;

[19:32] <guifa> (and so I'd probably not recommend it ha)

[19:36] *** stoned75 joined
[19:43] *** tejr joined
[19:43] *** tejr left
[19:44] *** Shaeto left
[19:44] * leont still has some conference driven development to do for conf next week

[19:48] <codesections> I wonder how many values have been used in "$_ driven development"

[19:50] *** colomon joined
[19:50] <holly> YARH :-)

[19:50] <colomon> o/

[19:56] <colomon> Having a really weird show-stopper problem in my Raku script.  I have a class which "has %.files".  When I try to look at %.files, Raku hangs.  Hoping this rings a bell for someone...

[19:57] <gfldex> codesections: I'm still waiting for "QA driven development".

[19:57] <lizmat> colomon: how do you "look" ?

[19:58] <colomon> lizmat -- pretty much any way I've tried fails.   For sure dd %.files 

[19:58] <lizmat> could you do a dd %!files ?

[19:59] <colomon> oh!  That does work.  

[19:59] <colomon> Tried it earlier, but still hung because I had another %.files later, and I didn't notice it ran further before hanging

[20:00] <Xliff> codesections: LOL! That's a bug I just found in my code. Hah!

[20:00] <lizmat> colomon: also realize that %.files is just short for self.files     could that explain something ?

[20:01] <colomon> ARGH

[20:01] <colomon> that's it -- idiot me also defined a files method, which of course calls itself

[20:02] <colomon> okay, I can fix this no problem.  Thank you for helping me sort things out.

[20:02] <holly> so %!, %. problem

[20:03] <Xliff> Class Attribute doesn't have a .private ? Can I ask why?

[20:04] <Xliff> So instead I have to do $attr.name.starts-with('$!') which seems LTA

[20:04] <colomon> lizmat++

[20:05] <Xliff> Actually, $attr.name.substr(1, 1)

[20:05] <Xliff> Check that against '!'

[20:05] <lizmat> attributes always have the private name, no?

[20:06] *** patrickb left
[20:06] <Xliff> lizmat: With '!' as a part of their sigil?

[20:06] <Xliff> lizmat: Yes, but as part of the public API, I would rather have a method than a check on attribute name.

[20:06] <lizmat> m: class A { has $.a }; dd A.^attributes.head.name

[20:06] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «"\$!a"␤»

[20:07] *** tejr joined
[20:07] <Xliff> lizmat: Would a PR adding a .is-private be worthwhile?

[20:07] <japhb> Xliff: You're wanting to know if there was an auto-generated accessor created for the attribute?

[20:08] <Xliff> japhb: Sure. But also if its considered private!

[20:08] <Xliff> :)

[20:08] <Xliff> Consider: "$attr.name.substr(1, 1) eq '!';" vs "$attr.is-private" in code.

[20:08] <Xliff> I would prefer the latter.

[20:08] <japhb> But that first one is broken is what lizmat++ I think was trying to say.

[20:09] <Xliff> Yeah. It was.

[20:09] <Xliff> Moved on from that.

[20:09] <japhb> All attributes are created with a ! twigil ... it's just a question of whether an accessor was generated.

[20:09] <Xliff> japhb: OK. How would one check for an accessor?

[20:10] *** tejr left
[20:10] <japhb> But of course you can create your own accessor, so I think we have a similar problem to knowing if a sequence is infinite

[20:10] <lizmat> m: class A { has $.a }; dd A.^attributes.head.has_accessor

[20:10] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «Bool::True␤»

[20:10] <lizmat> m: class A { has $!a }; dd A.^attributes.head.has_accessor

[20:10] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «Bool::False␤»

[20:10] <Xliff> m: class A { has $.a; has $!b }; A.^attributes.map( *.name ).sa

[20:10] <evalable6> Xliff, rakudo-moar f83e55116: OUTPUT: «(exit code 1) No such method 'sa' for invocant of type 'Seq'.  Did you mean any of␤these: 'isa', 'say', 'so'?␤  in block <unit> at /tmp/_gRyyg7081 line 1␤␤»

[20:10] <Xliff> m: class A { has $.a; has $!b }; A.^attributes.map( *.name ).gist.say

[20:10] <evalable6> Xliff, rakudo-moar f83e55116: OUTPUT: «($!a $!b)␤»

[20:10] <lizmat> Xliff ^^

[20:10] <lizmat> has_accessor is what you want

[20:10] <Xliff> lizmat++

[20:11] <Xliff> Thank you.

[20:11] <holly> cool

[20:11] <holly> lizmat++

[20:11] <lizmat> m: class A { has $!a; method a() { "foo" } }; dd A.^attributes.head.has_accessor

[20:11] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «Bool::False␤»

[20:12] <lizmat> it really is the flag that indicates  whether an accessor should be made automatically

[20:12] <Xliff> m: class A { has $!a; method a { $!a } }; dd A.^attributes.head.has_accessor

[20:12] <evalable6> Xliff, rakudo-moar f83e55116: OUTPUT: «Bool::False␤»

[20:12] <Xliff> heh

[20:12] <lizmat> m: class A { has $!a; method a() { "foo" } }; dd A.^attributes.head.has_accessor && !A.^find_method("a")

[20:12] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «Bool::False␤»

[20:13] <lizmat> m: class A { has $!a; method a() { "foo" } }; dd A.^find_method("a")

[20:13] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «Method a = method a (A: *%_) { #`(Method|94155151744592) ... }␤»

[20:13] <lizmat> m: class A { has $!a }; dd A.^find_method("a")

[20:13] <evalable6> lizmat, rakudo-moar f83e55116: OUTPUT: «Mu␤»

[20:13] <lizmat> Xliff: I guess you can do something with that to your liking ?

[20:14] <Xliff> lizmat: No. .has_accessor is what I was looking for. Just checking for a gotcha.

[20:17] *** camelia joined
[20:18] *** japhb left
[20:20] *** japhb joined
[20:23] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/06/01/low-profile-quoting/

[20:26] *** colomon left
[20:26] <raydiak> bisectable6: regex { \# }

[20:26] <bisectable6> raydiak, Will bisect the whole range automagically because no endpoints were provided, hang tight

[20:27] <bisectable6> raydiak, Output on all releases: https://gist.github.com/16efbe386bbb47055c13dbf00bc17a5f

[20:27] <bisectable6> raydiak, Nothing to bisect!

[20:30] * guifa thanks himself for providing lots of test files for Fluent.  Makes tracking down issues in the Intl reorganization *much* easier

[20:30] *** stoned75 left
[20:30] *** stoned75_ joined
[20:32] <codesections> gfldex: wow, I'd never thought of implementing bare strings like that.  I can't decide if I love it, hate it, or both!

[20:38] <codesections> (er, nvm actually, I read that too quickly/got over-excited – I thought you meant something more by "bare strings".  Still very cool, but not quite as wild as I first thought)

[20:39] <guifa> codesections: that said, it would be not too difficult to implement a php-esque DSL starter

[20:39] <guifa> imaging doing <html> and </html> as the equivalent of “ and ” 

[20:40] <guifa> But that could also interpolate variables AND then generate a non-Str object as the result (instead of a Str, though presumably would have a .Stringy method)

[20:42] <codesections> You mean as a slang?

[20:43] <guifa> Yup

[20:45] <guifa> The only issue I've had so far with my slangs is enabling handing control back to the other (Quote / Core / Regex) languages.  I *think* I can figure that out but since the project I've been doing it with will rely heavily on RakuAST, I've not looked too far into it

[20:47] <Xliff> Hrm. Looking at Perl6::Grammar, I may have to revise my opinion on implementation.

[20:47] <Xliff> Even knowing the rule name, I can't see where I'd add q:thru...

[20:48] <Doc_Holliwood> is there any writing on why we use @a[*-1] instead of @a[-1] like Perl does?

[20:50] <Doc_Holliwood> $a[-1] rather

[20:51] <gfldex> Doc_Holliwood: I'm not sure if it is written down already. It's quite easy tho. *-1 is a WhateverCode what is a Callable.

[20:51] <Doc_Holliwood> i know

[20:51] <Xliff> Doc_Holliwood: Better written now as @a.tail

[20:51] <Doc_Holliwood> i just wonder what's wrong with negative indexes?

[20:52] <gfldex> It's easy to get wrong by simply typos/thinkos.

[20:52] <gfldex> my $index = 10; say @a[$index-1]; # and here you forget to type $index

[20:53] <gfldex> The result is valid code that will may even work for a 1 element list.

[20:53] <gfldex> Raku can complain with out-of-bounds.

[20:54] <Doc_Holliwood> m: say (.[0], .[1..*-2].pick(*), .[*-1])[*;*].join with 'AbcdefgH'.comb

[20:54] <camelia> rakudo-moar f83e55116: OUTPUT: «AfcgebdH␤»

[20:54] <Doc_Holliwood> neat trick there

[20:55] <Geth> ¦ doc/allomorph: aa95971fd2 | (Stoned Elipot)++ | doc/Type/Allomorph.pod6

[20:55] <Geth> ¦ doc/allomorph: Document Allomorph class

[20:55] <Geth> ¦ doc/allomorph: 

[20:55] <Geth> ¦ doc/allomorph: ref #3653 #3888 #3346

[20:55] <Geth> ¦ doc/allomorph: review: https://github.com/Raku/doc/commit/aa95971fd2

[20:55] <Geth> ¦ doc/allomorph: 6bada45c2d | (Stoned Elipot)++ | 4 files

[20:55] <Geth> ¦ doc/allomorph: Adapt allomorph classes documentation for Allomorph class

[20:55] <Geth> ¦ doc/allomorph: 

[20:55] <Geth> ¦ doc/allomorph: - Condense the introduction and link to the Allomorph class documentation

[20:55] <Geth> ¦ doc/allomorph: - Remove documentation for methods inherited from the Allomorph class

[20:55] <Geth> ¦ doc/allomorph: - While here document the === operator for the allomorph classes

[20:55] <Geth> ¦ doc/allomorph: review: https://github.com/Raku/doc/commit/6bada45c2d

[20:55] <Doc_Holliwood> m: (.[0], .[1..^*-1].pick(*), .[*-1]).flat.join with 'AbcdefgH'.comb

[20:55] <camelia> rakudo-moar f83e55116: ( no output )

[20:55] <Doc_Holliwood> m: say (.[0], .[1..^*-1].pick(*), .[*-1]).flat.join with 'AbcdefgH'.comb

[20:55] <camelia> rakudo-moar f83e55116: OUTPUT: «AbcdgefH␤»

[20:55] <codesections> Xliff: I thought I remember .tail and .[*-1] having subtly different semantics -- but I can't remember how

[20:56] <Doc_Holliwood> m: say (.[0], .[1..^*-1].pick(*).[*-1]).flat.join with 'AbcdefgH'.comb

[20:56] <camelia> rakudo-moar f83e55116: OUTPUT: «Ag␤»

[20:56] <Doc_Holliwood> m: say (.[0], .[1..^*-1].pick(*), .[*-1]).flat.join with 'AbcdefgH'.comb

[20:56] <camelia> rakudo-moar f83e55116: OUTPUT: «AdfgbecH␤»

[20:56] <Geth> ¦ doc: stoned++ created pull request #3893: Document Allomorph class and adjust documentation for ComplexStr, IntStr, NumStr and RatStr classes

[20:56] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3893

[20:56] <Doc_Holliwood> like in these ranges, the whatever looks out of place imho

[20:57] *** raydiak joined
[20:58] <codesections> (Maybe I'm just thinking of )

[20:59] <codesections> m: my @a = (1, 2); dd @a[*-2 .. *]; dd @a.tail: 2

[20:59] <camelia> rakudo-moar f83e55116: OUTPUT: «(1, 2)␤(1, 2).Seq␤»

[20:59] <codesections> but that doesn't apply to @a.tail()

[20:59] *** guifa left
[20:59] *** guifa joined
[20:59] <gfldex> Doc_Holliwood: there where a lot of things that looked out of place to me when I started with the language. Getting used to stuff helps. :)

[21:00] *** guifa left
[21:00] *** guifa joined
[21:01] <Xliff> Can you eval a QAST tree?

[21:01] * guifa can't seem to send regular messages for some reason

[21:01] <guifa> But /me work okay

[21:01] <guifa> er, maybe it's something weird in what I was typing out to Xliff 

[21:02] <guifa> Anywyas, Xliff: I found where the quote modifiers are being done, but for the life of me I can't find the quote language's definition.  In NQP it's defined directly in the grammar

[21:03] <guifa> Nevermind, I'm an idiot: https://github.com/rakudo/rakudo/blob/f83e551163915eaa63f7d3e482d98fd03787ca26/src/Perl6/Grammar.nqp#L5387

[21:06] <Xliff> guifa: I'm ahead of you. I think it's here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L167

[21:06] <Xliff> However I can't decipher that into a rule that parses the string "q:to"….

[21:06] <Xliff> Trying to compile some test code into RakuAST and it is SLOW.

[21:07] *** tejr joined
[21:07] <guifa> I have to head out for the afternoon, but I'll take a look at it tommorrow and see if I can't figure out more (nuless you make some more progress)

[21:09] *** sono joined
[21:10] <Xliff> No worries. Thanks for your help, guifa++

[21:15] *** b2gills left
[21:19] *** Doc_Holliwould joined
[21:20] *** Doc_Holliwood left
[21:21] *** dustinm` joined
[21:30] *** muriloreis joined
[21:33] *** Doc_Holliwould left
[21:34] *** muriloreis left
[21:34] *** guer left
[21:40] *** abraxxa left
[21:44] *** abraxxa joined
[21:59] *** guer joined
[22:12] *** Tirifto joined
[22:30] *** cbk__ left
[22:31] *** cbk joined
[22:33] *** Tirifto left
[22:38] *** guer left
[22:55] *** guer joined
[23:00] *** guer left
[23:04] <Xliff> Is CALLER:: documented?

[23:05] <codesections> Just with https://docs.raku.org/language/packages#index-entry-CALLER_(package) afaik

[23:11] *** dogbert17 joined
[23:16] *** dogbert11 left
[23:18] *** cbk left
[23:28] *** dogbert17 left
[23:29] *** dogbert11 joined
[23:39] *** gfldex left
[23:42] <guifa> Xliff: I'm going to guess you're running into one of the gotchas that I had with CALLER, perhaps.  CALLER can only see stuff that's dynamic 

[23:45] *** gfldex joined
[23:46] <Xliff> Um. Hah. Not really. Sorry to give you that impression.

[23:46] *** b2gills joined
[23:49] <guifa> Xliff: was worth a shot haha

