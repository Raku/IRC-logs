[00:01] <tech_hutch> if the ints are contiguous, I imagine you could use an array

[00:02] <tech_hutch> well, if you want to run arbitrary code, it'd need to contain blocks

[00:07] *** sortiz left
[00:08] <notagoodidea> an hash with the keys as int and block as value?

[00:10] <tech_hutch> or that, but would that be more efficient than using `given`?

[00:10] <tech_hutch> constructing a whole hash, plus the hashing to retrieve the block

[00:11] <notagoodidea> I don't think it could be faster than given/when. Time to benchmark it :D

[00:11] <timotimo> true, there's a "jumplist" op that's being used in the grammar engine already

[00:12] <timotimo> it requires numbers on the input side to be consecutive and start at 0, though

[00:12] <timotimo> and there's no way i know of to reach it from p6 or nqp code

[00:13] <tech_hutch> what's the grammar engine?

[00:13] *** faisal_javed left
[00:15] <timotimo> the thing that powers regexes in rakudo

[00:17] <tech_hutch> I see

[00:18] <timotimo> i wouldn't recommend it to a beginner probably, but you could look at how the regex compiler does its thing ;)

[00:18] *** Doc_Holliwood left
[00:18] <tech_hutch> Maybe sometime ;)

[00:19] <timotimo> you'd have to learn how a regex engine do as well as moar bytecode at the same time

[00:20] <tech_hutch> Can you use `¬≤` to mean `** 2`? when I try it in the repl, it says "Bogus postfix", but according to https://docs.raku.org/language/py-nutshell#Scope it should work

[00:20] *** Black_Ribbon joined
[00:21] <timotimo> https://gist.github.com/timo/8cae0f69fa05fc9ed6eb7fefb085f1a0

[00:21] <timotimo> you should be able to, yeah. what context are you trying it in? the repl can be weird sometimes

[00:21] *** JRaspass left
[00:21] <timotimo> m: say 99¬≤; my $y = 5; say $y¬≤

[00:21] <camelia> rakudo-moar 4d40e23e0: OUTPUT: ¬´9801‚ê§25‚ê§¬ª

[00:22] <timotimo> m: <1 2 3 4 5>.map(*¬≤).say

[00:22] <camelia> rakudo-moar 4d40e23e0: OUTPUT: ¬´(1 4 9 16 25)‚ê§¬ª

[00:22] <notagoodidea> timotimo: Not for a beginner but I remember than I get my first interest in Perl6/Raku at Fosdem with a talk about the grammar (even bought the book of Moritz Lenz on Regexes and Grammar that edition).

[00:23] <timotimo> cool

[00:23] <tech_hutch> I've tried it multiple ways. Your example throws bogus postfix at `say 99<HERE>; my $y = 5; say $y`

[00:23] <timotimo> welp, this compiled output is probably not very helpful, it's 75% setup and teardown :D

[00:24] <timotimo> do you happen to be on windows?

[00:24] <tech_hutch> yep

[00:24] <timotimo> did you do the thing to make the terminal switch to utf8?

[00:24] <notagoodidea> got 99 <HERE> but a ¬≤ ain't one.

[00:24] <timotimo> chcp something something

[00:24] <timotimo> %)

[00:25] <timotimo> if you want you can put this in: say uninames("¬≤")

[00:25] <tech_hutch> I set Windows to use utf8. When starting rakudo, it properly shows the "Raku" and "Rakudo" text

[00:25] <timotimo> m: say uninames("¬≤")

[00:25] <camelia> rakudo-moar 4d40e23e0: OUTPUT: ¬´(SUPERSCRIPT TWO)‚ê§¬ª

[00:25] <timotimo> would surely be interesting to see what it spits out

[00:25] *** frost-lab joined
[00:25] <tech_hutch> it says `(<control-0000>)`

[00:25] <tech_hutch> so it's replaced with a nul? O.o

[00:25] <timotimo> oh, a null byte? is it being inputted as utf16 maybe?

[00:26] <tech_hutch> chcp (in the terminal) says I'm on code page 65001

[00:27] <timotimo> well, trying to support cmd.exe is a fool's errand i imagine

[00:27] *** thdrmz joined
[00:27] <timotimo> Comma also has a REPL

[00:27] <timotimo> it doesn't do full ANSI escapes either, but neither does cmd.exe

[00:28] <tech_hutch> I'm using PowerShell in Windows Terminal

[00:28] <tech_hutch> not cmd.exe

[00:28] <timotimo> the powershell isn't able to fix things i think?

[00:28] <tech_hutch> dang

[00:28] <timotimo> oh is windows terminal the thing they made just two or three years ago for windows 10?

[00:28] <timotimo> the one that has like tabs and stuff?

[00:28] <tech_hutch> yeah

[00:28] <timotimo> ok then i have no idea why things are going wrong

[00:29] <timotimo> but also, why do you still have to chcp in Windows Terminal to get utf8

[00:29] <tech_hutch> 65001 is supposed to be uff8 ü§∑‚Äç‚ôÄÔ∏è https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers

[00:29] <timotimo> they're still keeping backwards compatibility to MS Dos 3.11?

[00:29] <tech_hutch> uhh

[00:29] *** abraxxa1 joined
[00:29] <tech_hutch> I guess, it was something primitive by default lol, before changing the setting for it

[00:29] <timotimo> anyway, i'm heading to bed

[00:29] <tech_hutch> thanks for your help

[00:29] <thdrmz> is it possible to define a "class Bla::Blub" inside a "unit module Bla::Blub" ?

[00:34] *** thdrmz left
[00:39] *** mowcat left
[00:42] *** thdrmz joined
[00:42] *** mowcat joined
[00:44] *** frost-lab left
[00:48] <thdrmz> Hi, is it possible to define a class which uses the name of the unit module ? unit module Bla::Blub; class Bla::Blub{};  

[00:50] <notagoodidea> thdrmz: For what I know, the call path will be BLa::Blub::Bla:Blub, I suppose then no?

[00:52] <notagoodidea> I is not possible, to `unit module Bla; class Blub{}`?

[00:52] <notagoodidea> -I

[00:54] <thdrmz> then I've got to define all classes Bla::* inside that module file.

[00:55] <notagoodidea> outside* inside the module, file you will not prepend Bla::* to your classes. (maybe I am wrong there but I don't think so).

[00:56] *** frost-lab joined
[00:57] *** pecastro left
[01:02] <thdrmz> sure but I can't create multiple files which defines the same unit module. So if I want the classes Bla::A, Bla::B, Bla::C ‚Ä¶ if I declare "unit module Bla;" I have to put the class defs into one file. But I'd like to put those class defs into separate files.

[01:04] <notagoodidea> mm, Can you have differents rakumod files with the differents classes (B.rakumod, C.rakumod) and in A.rakumod : unit module MyModule; use B ; use C ; class A{}; ?

[01:08] <notagoodidea> thdrmz: If you look at this module : https://github.com/pdf-raku/PDF-raku

[01:11] <notagoodidea> It seems like the practice to have a lib/ with Foo.rakumod and Foo folder with the rest of the classes. you call them with  Bar::Foo::B in Foo.rakumod

[01:12] *** notagoodidea left
[01:13] <thdrmz> it is the same I use to do currently, no "unit module" declaration

[01:13] <thdrmz> thx

[01:14] <guifa> Thdrmz, you could instead declare ‚Äòunit class‚Äô

[01:15] <guifa> so if you have lib/Foo/Bar.rakumod

[01:15] <guifa> your Bar file begins with ‚Äúunit class Bar;‚Äù

[01:16] <guifa> Then when you want to use that class, you just say ‚Äúuse Foo::Bar‚Äù;  Note that the symbol will be imported as Bar, so if you want to force the Foo::Bar, you‚Äôd use ‚Äúunit class Foo::Bar‚Äù inside of your Bar.rakumod file

[01:16] *** tech_hutch left
[01:17] <thdrmz> ok I'll check it, thx

[01:33] *** mowcat left
[02:04] *** Kaeipi joined
[02:52] *** jmchael left
[03:00] <guifa> any examples of an extra operator precedence (say, > 8 operators, no parentheses) I can use for my FOSSDEM presentation?

[03:32] *** xelxebar left
[03:32] *** xelxebar joined
[04:11] *** MasterDuke left
[04:13] *** coldpress_ joined
[04:20] *** __jrjsmrtn__ joined
[04:21] *** _jrjsmrtn left
[05:11] *** parabolize left
[05:30] <xinming> Is it possible that we get object attribute slot by variable name? Let's say,  $!attr  then  we have `my $name = "attr"`; How do we use $name to select the object attr?

[05:37] <guifa> If calling form outside, foo.‚Äù$name‚Äù(), but it will only work for attributes with accessor methods

[05:38] <xinming> my $attr = self.^attributes.first({ .name eq q{$!a}  }); $attr.set_value($obj, "blabla");'

[05:38] <xinming> This is what I mean.

[05:38] <xinming> I'm trying to restore the object from json.

[05:48] <guifa> This should work: https://tio.run/##pY1LCsIwFEXnXcUtBJqKZOikOHAjSlpfP5D4SVJBSl2La3FjsanU4Ng3uo/LPedCRm28r5S0FjsMCdBKC5bK4hvLGKsQNbn2fIQlx9lJalqD3aTqKccAfQeTzhlsp17VYh@eruwdWVF3xjqOlQgj0BUZSzM8MEPy4jMUE/Yw43gARPYYzc1izrHc8Hr@r25@1BE@JqP3bw

[05:50] <xinming> guifa: Yea, thanks. :-)

[06:05] *** guifa2 left
[06:20] *** jmerelo joined
[06:20] <jmerelo> releasable6: status

[06:20] <releasable6> jmerelo, Next release in ‚âà15 days and ‚âà12 hours. 1 blocker. Changelog for this release was not started yet

[06:20] <releasable6> jmerelo, Details: https://gist.github.com/7b459169a9bb5532424438b7461ea95a

[06:25] *** cpan-raku left
[06:30] <Geth> ¬¶ doc: 0efc01dd62 | (Stoned Elipot)++ | writing-docs/EXAMPLES.md

[06:30] <Geth> ¬¶ doc: Add a note about code block initial indentation

[06:30] <Geth> ¬¶ doc: 

[06:30] <Geth> ¬¶ doc: ... and be consistent about it in the given examples

[06:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/0efc01dd62

[06:30] <Geth> ¬¶ doc: a0324e776c | stoned++ (committed using GitHub Web editor) | writing-docs/EXAMPLES.md

[06:30] <Geth> ¬¶ doc: Merge pull request #3770 from Raku/writing-docs-indent

[06:30] <Geth> ¬¶ doc: 

[06:30] <Geth> ¬¶ doc: Add a note about code block initial indentation

[06:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a0324e776c

[06:36] *** sjm_uk joined
[06:37] *** cpan-raku joined
[06:37] *** cpan-raku left
[06:37] *** cpan-raku joined
[06:42] *** Doc_Holliwood joined
[07:03] *** ajdplaysalto joined
[07:07] *** jargan joined
[07:08] *** jargan is now known as jast

[07:09] *** earenndil joined
[07:11] *** earenndil is now known as moon-child

[07:19] *** brtastic joined
[07:28] *** ajdplaysalto left
[07:29] *** squashable6 left
[07:30] *** squashable6 joined
[07:45] *** ufobat_ joined
[07:48] *** Doc_Holliwood left
[07:50] *** Sgeo left
[07:54] *** domidumont joined
[07:57] *** wamba joined
[08:02] *** Altai-man joined
[08:13] *** jmchael joined
[08:24] *** aborazmeh joined
[08:24] *** aborazmeh left
[08:24] *** aborazmeh joined
[08:48] *** pecastro joined
[08:48] *** rindolf joined
[08:49] *** JRaspass joined
[08:52] *** aborazmeh left
[08:53] *** abraxxa1 left
[08:54] *** abraxxa1 joined
[08:54] *** jmchael left
[09:08] *** brtastic left
[09:08] *** Doc_Holliwood joined
[09:10] *** aluaces joined
[09:42] *** sena_kun joined
[09:44] *** Altai-man left
[10:08] *** squashable6 left
[10:09] *** squashable6 joined
[10:15] *** wamba left
[10:16] *** brtastic joined
[11:16] *** jmchael joined
[11:19] *** wamba joined
[11:32] *** ufobat_ left
[11:58] *** ufobat joined
[12:01] *** zxcvz joined
[12:03] *** notagoodidea joined
[12:18] *** wamba left
[12:19] *** Black_Ribbon left
[12:23] *** Doc_Holliwood left
[12:41] <notagoodidea> Anyone knows what it is used to make the highlighting of code in Pod::To::HTML (or what provide the output seen in the Raku documentation?)

[13:05] <moritz> it used to be done with pygmentize (python); I think nowadays it's something JS based

[13:08] <notagoodidea> Because I don't see any call to a JS lib on the client side, it seems to be something that output the CSS/HTML to make it static.

[13:19] <jmerelo> notagoodidea: it's based on the Atom highlighter, and done in a coffeescript module Sam McVey wrote a long time ago.

[13:20] <jmerelo> notagoodidea: it's purely CSS based, I think. The node module generates the HTML tags that then are used by CSS.

[13:20] <jmerelo> notagoodidea: but this was something that was created way before I came in and the only thing we have done is to try and keep it running into the new doc generator, Documentable

[13:21] <jmerelo> notagoodidea: any idea to change/improve it will be welcome. Even more so if it's solely Raku (or maybe Perl) based.

[13:23] *** notagoodidea left
[13:23] *** abraxxa1 left
[13:29] *** cgfbee joined
[13:37] <tbrowder> anyone have an idea how long it takes from a cpan upload (and its email acknowledgement) until its public facing indexes are updated?

[13:38] <tbrowder> *any

[13:38] <tbrowder> idea

[13:39] <tbrowder> m: say "impatient tom!"

[13:39] <camelia> rakudo-moar 4d40e23e0: OUTPUT: ¬´impatient tom!‚ê§¬ª

[13:40] *** defaultxr left
[13:41] *** Altai-man joined
[13:44] *** sena_kun left
[13:44] *** defaultxr joined
[13:45] *** cgfbee left
[13:52] *** notagoodidea joined
[13:58] <notagoodidea> jmerelo: Sorry was log out+away, nice to know! I am waiting to see what skylighting can do with the new raku syntax for the HTML outputed.

[13:58] <notagoodidea> exit

[13:59] *** notagoodidea left
[14:00] *** notagoodidea joined
[14:01] *** wamba joined
[14:04] <jmerelo> tbrowder: shouldn't take very long. In most cases, less than 1 hour.

[14:05] <tbrowder> seem *forever* when an error is fixed! thnx

[14:06] <jmerelo> yep... You can always upload it also to the Raku/ecosystem; that takes 2 hours at most to update, too, anyway.

[14:06] <jmerelo> tbrowder: great job with the PDF modules, BTW

[14:08] *** jmerelo left
[14:12] *** brtastic left
[14:15] *** aluaces left
[14:16] <[Coke]> stoned75: have a test locally in docs that is checking for leading whitespace on code blocks. seems to be working, will fix all the instances and get the test/updates committed.

[14:17] *** aluaces joined
[14:22] <[Coke]> thing I've found - test correctly handles if the =begin code/=end code itself is indented, along with the code (the resulting code is not indented). but if you have an indented "=for code", that *does* indent the code.

[14:24] *** cgfbee joined
[14:25] *** cosimo left
[14:32] *** parabolize joined
[14:34] *** brtastic joined
[14:42] *** frost-lab left
[14:46] *** v661 joined
[14:55] *** domidumont left
[14:55] *** domidumont joined
[15:04] *** Sgeo joined
[15:09] *** b2gills joined
[15:21] *** patrickb joined
[15:46] *** notagoodidea left
[16:02] <Geth> ¬¶ doc: dcb4426ee2 | Coke++ | 21 files

[16:02] <Geth> ¬¶ doc: Add test to avoid extra code indentation

[16:02] <Geth> ¬¶ doc: 

[16:02] <Geth> ¬¶ doc: Fix all instances found with new test.

[16:02] <Geth> ¬¶ doc: Add note about code formatting to writing-docs

[16:03] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/dcb4426ee2

[16:03] <[Coke]> stoned75: ^^

[16:04] <[Coke]> I did hand-check a few of the cases, and they are showing extra indents on the website.

[16:09] *** guifa2 joined
[16:12] <[Coke]> m: my method private_method_table(Metamodel::PrivateMethodContainer: $obj)

[16:12] <camelia> rakudo-moar ca7bc91e7: OUTPUT: ¬´===SORRY!===‚ê§Cannot find method 'coercive' on object of type Archetypes‚ê§¬ª

[16:12] *** hungrydonkey joined
[16:13] <[Coke]> bisectable6: my method private_method_table(Metamodel::PrivateMethodContainer: $obj)

[16:13] <bisectable6> [Coke], Will bisect the whole range automagically because no endpoints were provided, hang tight

[16:13] <bisectable6> [Coke], Output on all releases: https://gist.github.com/f3ebf1cb5a2652a4145ae853314618a3

[16:13] <bisectable6> [Coke], Bisecting by output (old=2020.11 new=2020.12) because on both starting points the exit code is 1

[16:13] <bisectable6> [Coke], bisect log: https://gist.github.com/006627d5b440d537a60302c44bc74d21

[16:13] <bisectable6> [Coke], (2020-12-02) https://github.com/rakudo/rakudo/commit/ed16d6c1098bb21b86cf205950f61dc0d72cbb1f

[16:13] <bisectable6> [Coke], Output on all releases and bisected commits: https://gist.github.com/68c5c4fdb1a2b168437329a6dbfd36bb

[16:17] *** hungryd32 joined
[16:17] *** hungrydonkey left
[16:19] <[Coke]> This looks like a recent breakage, starting in 202012

[16:19] <[Coke]> .tell jmerelo - good catch on your comment about the metamodel tests, it's probably a recent rakudo bug.

[16:19] <tellable6> [Coke], I'll pass your message to jmerelo

[16:21] <Geth> ¬¶ doc: 7324789ab5 | Coke++ | doc/Type/Metamodel/PrivateMethodContainer.pod6

[16:21] <Geth> ¬¶ doc: Undo skip-test

[16:21] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/7324789ab5

[16:21] <linkable6> Link: https://docs.raku.org/type/Metamodel::PrivateMethodContainer

[16:24] *** hungryd32 left
[16:24] *** hungrydonkey joined
[16:24] <[Coke]> so in the docs, there's a lot of explicitly type invocants in the metamodel roles... but in the rakudo source, they are not explicitly typed.

[16:25] <[Coke]> recently, a change in rakudo makes these examples stop compiling with the error shown above.

[16:25] <[Coke]> regardless of whether or not this is a rakudo bug... should we be showing the types explicitly? e.g.:

[16:25] <[Coke]> https://docs.raku.org/type/Metamodel::AttributeContainer

[16:26] <[Coke]> vs. https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/AttributeContainer.nqp#L10

[16:32] *** notagoodidea joined
[16:36] <tony-o> .tell jmerelo should be able to reset your password now 

[16:36] <tellable6> tony-o, I'll pass your message to jmerelo

[16:40] <lizmat> [Coke]: does nqp even have type constraints like that ?

[16:41] <lizmat> I don't think so?

[16:42] *** vike left
[16:43] <[Coke]> Looks like that type constraint has been in the docs since day 1

[16:43] <[Coke]> (6+years)

[16:44] <[Coke]> Should we remove it (and similar) from the various Metamodel roles in the docs, lizmat?

[16:45] <[Coke]> And you can decide if the compile time error there is a DIHWIDT.

[16:45] <lizmat> $ nqp -e 'class A { }; sub a(A $a) { nqp::say($a) }; a(42)'

[16:45] <lizmat> 42

[16:46] <lizmat> looks like you can specify, but there's no actual checking it looks like

[16:47] <[Coke]> ok. the docs are implying that all the method sigs we're showing are Raku (not nqp), so I would say let's not show them

[16:48] <[Coke]> Even if it weren't defined in NQP, not sure the extra verbosity of declaring the invocant type is helpful.

[16:50] <lizmat> I would tend to agree, yes

[16:51] <[Coke]> ok.

[16:54] <[Coke]> lizmat: do we need to bug the change in behavior above?

[16:56] *** hungrydonkey left
[16:57] <Geth> ¬¶ doc: 1438ae4302 | Coke++ | 8 files

[16:57] <Geth> ¬¶ doc: Remove explicit invocant typing in Metamodel roles

[16:57] <Geth> ¬¶ doc: 

[16:57] <Geth> ¬¶ doc: In rakudo, these roles are defined in NQP,

[16:57] <Geth> ¬¶ doc: where this typing isn't part of the method definition.

[16:57] <Geth> ¬¶ doc: We can add back if determined that this is part of the spec,

[16:57] <Geth> ¬¶ doc: and not just an implementaiton detail.

[16:57] <Geth> ¬¶ doc: 

[16:57] <Geth> ¬¶ doc: Additionally, these tests now fail to compile under rakudo

[16:57] <Geth> ¬¶ doc: which is not by itself reason enough to remove them.

[16:57] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1438ae4302

[16:58] <lizmat> [Coke]  I'd say yes, to be sure vrurg didn't miss anything :)

[16:58] <lizmat> afk&

[16:58] <[Coke]> vrurg: ^^

[16:59] <[Coke]> .tell vrurg:  my method private_method_table(Metamodel::PrivateMethodContainer: $obj) # this is now a compile time error in rakudo, is this change a bug?

[16:59] <tellable6> [Coke], I'll pass your message to vrurg

[17:00] *** mue joined
[17:01] *** mue left
[17:01] *** mowcat joined
[17:03] *** cpan-raku left
[17:05] *** cpan-raku joined
[17:05] *** cpan-raku left
[17:05] *** cpan-raku joined
[17:10] *** guifa2 left
[17:31] *** vike joined
[17:33] *** kini joined
[17:42] *** sena_kun joined
[17:43] *** Altai-man left
[17:44] *** domidumont left
[17:46] *** lucasb joined
[17:47] <tony-o> tbrowder: emails are a thing for fez now - currently only sending for password reset bc it's limited to 5k/mo

[17:48] <tbrowder> thnx! slammed right now but i will check fez closer eventually

[18:01] *** JRaspass left
[18:09] <guifa> m: my $a; {¬†my $b; {¬†my $c; {¬†my $d; say OUTERS::.keys }¬†}¬†}

[18:09] <camelia> rakudo-moar ca7bc91e7: OUTPUT: ¬´($c $*DISPATCHER $_)‚ê§¬ª

[18:09] <guifa> ^^ isn‚Äôt that incorrect?

[18:14] <guifa> Hmm, they seem to work when you actually call them (e.g. OUTERS::<$a>) but I‚Äôd think those symbols would be available no?

[18:16] *** v661 left
[18:19] *** ggoebel joined
[18:20] <ggoebel> trying to use DBIish to connect to a mysql (mariadb) database... DBIish.connect('mysql', ...) throws an exception: DBIish: DBDish::mysql needs '', not found  Any ideas what I've done wrong?

[18:22] <ggoebel> arch linux... /usr/lib/libmysqlclient.so is symbolic link to libmariadb.so.3

[18:25] <tony-o> ggoebel: i'd recommend using db::mysql 

[18:27] <ggoebel> I'm working with someone elses code... changing from DBIish to db::mysql isn't an option...

[18:27] <ggoebel> will file that away from my own reference thought. thx

[18:29] <tony-o> do you have a gist?

[18:31] <ggoebel> https://gist.github.com/ggoebel/dfd60a11b3bb60040853e743a957fe04

[18:32] <ggoebel> I can connect from the command line using the same host, user, password, and database

[18:32] <tony-o> JJAtria[m]: can we merge #3?

[18:33] <tony-o> ggoebel: do you have DBIISH_MYSQL_LIB set? https://github.com/raku-community-modules/DBIish#required-client-c-libraries

[18:34] <ggoebel> yes. but per something I found on google, that is no longer used... let me see if I can find the reference

[18:34] <tony-o> it seems to be used here: https://github.com/raku-community-modules/DBIish/blob/44f49c3de5697951828e5500ae4acfb092ac4bed/lib/DBDish/mysql.pm6#L37

[18:36] <ggoebel> https://github.com/raku-community-modules/DBIish/commit/9bc4191e64a24496031dbb5fe05ef92e25af0f28#diff-10a816f8f24557614d8349eb80e2751e

[18:36] <tony-o> that also looks like if your sym link doesn't end with .\d then it dbiish won't find it

[18:37] <ggoebel> okay... I say someone mentioning creating a symlink with .\d but they didn't say why. I'll give that a try

[18:37] <tony-o> that commit is from 2016

[18:38] *** leah2 joined
[18:38] <tony-o> the override from DBIISH_MYSQL_LIB is still in master

[18:42] <ggoebel> DBIISH_MYSQL_LIB=mariadb worked thank you!

[18:59] *** notagoodidea left
[19:15] *** agentzh joined
[19:15] *** agentzh left
[19:15] *** agentzh joined
[19:27] *** brtastic left
[19:27] *** Doc_Holliwood joined
[19:31] *** sjm_uk left
[19:35] *** MasterDuke joined
[19:45] *** stoned75 left
[19:45] *** stoned75 joined
[19:46] *** JRaspass joined
[19:49] *** melezhik joined
[19:49] *** notagoodidea joined
[19:54] *** notagoodidea left
[19:55] *** guifa left
[20:11] *** guifa2 joined
[20:20] *** guifa2 left
[20:32] *** ufobat_ joined
[20:36] *** ufobat left
[20:40] *** rindolf left
[20:43] <JJAtria[m]> tony-o: I was just trying out your change locally, and I'm wondering about the auths that we use for URLs

[20:44] <JJAtria[m]> So far we've been using ones that look like `cpan:JDOE`, which means we don't confuse auths with our internal URLs (like raku.land/prolific)

[20:45] <JJAtria[m]> That URL would break with a user called "prolific", for example

[20:46] <JRaspass> and any other single word routes, i presumed each user would have a ecosystem:name arangement

[20:47] <tony-o> 2they do have that with the zef eco but it isn't guaranteed with the free formness that exists in gi repo arrangement

[20:48] <tony-o> in p6c *

[20:48] <tony-o> you could write `cpan:something` in the p6c stuff

[20:48] <JRaspass> i would presume github:xxx and gitlab:xxx

[20:49] <tony-o> there is nothing to enforce that.  the zef eco system does enforce a zef:auth 

[20:49] <tony-o> but the zef eco is relatively new

[20:53] <tony-o> iirc there isn't anything that enforces that on the cpan side, either.  the dist info could mismatch with the auth .. eg if i upload a module with auth: "tonyo" to cpan with user oynoto then your scripts will report cpan:oynoto but the dist will be Something:auth<tonyo>

[20:54] <tony-o> (one of the many reasons cpan is ill suited for the way raku does distributions)

[20:54] <JRaspass> ah interesitng, i presumed it would be bad if the dist lied about the auth

[20:55] <JRaspass> i find the raku approach to auth overly complicated compared to perl

[20:55] <JJAtria[m]> Maybe we don't need to work on the assumption that `raku.land/foo:bar/baz` means you can install `baz:auth<foo:bar>`

[20:55] <tony-o> i do too but it does alleviate some other issues, like authors giving up maintenance without a successor to take up orienteering

[20:56] <JRaspass> co-maint to adoptme and stuff kinda works, but yeah

[20:56] <JRaspass> okay looks like cpan rocks is built on some incorrect assumptions :-(

[20:56] <JRaspass> *raku land

[20:56] <JRaspass> (ETOOMANYSITES)

[20:56] <JJAtria[m]> We default the identifier used in the URL to the auth when possible, and if not display it in the dist page?

[20:57] <JJAtria[m]> It could all just be wrong too :)

[20:58] <tony-o>   it likely should take a look at the META in the tarball for the auth string

[20:58] <tony-o> i wouldn't be surprised if there are mismatches in there

[20:58] <JJAtria[m]> There's also dists with no auth in META

[20:58] *** Xliff joined
[20:58] <tony-o> my p6c clone doesn't index those

[20:59] <tony-o> cpan behaves like a tar repo for raku, though so it doesn't surprise me

[21:00] <JJAtria[m]> I'd be fine with that, to be honest. The ecosystem suffers a bit from too much variability in some aspects

[21:00] <JRaspass> tbh the rsync approach really won me over from working on this, its an elegant solution

[21:00] <JJAtria[m]> It's also super fast

[21:02] <tony-o> you could do the same thing with the fez repo too, it's running on s3 

[21:02] <tony-o> zef*

[21:02] <tony-o> just need something that can rsync from s3

[21:02] <JJAtria[m]> Anyway, the thing is, if auths are basically free-form, then I'm not so keen on using them in URLs

[21:03] <tony-o> likely better as query string

[21:03] <JJAtria[m]> If for no other reason that it'd be nice to have canonical URLs that are not ugly as sin

[21:04] <JRaspass> i dunno if we want to take this somewhere else to avoid filling up this room?

[21:04] <tony-o> sure

[21:08] <JRaspass> no idea what...

[21:08] <JJAtria[m]> How do we do it then? We have a Telegram room if you are into that sort of thing

[21:11] <tony-o> no idea what telegram is

[21:12] *** ufobat_ left
[21:12] <JJAtria[m]> Then I'm open to suggestions :)

[21:13] <tony-o> j #raku-land ?

[21:14] <JRaspass> oh that would work, can we just make channels like that? (irc noob)

[21:23] <phogg> joining a non-existing channel creates it

[21:30] *** Black_Ribbon joined
[21:30] *** brtastic joined
[21:30] <melezhik> here is some question vrurg is asking about what Sparrow is and why - https://github.com/melezhik/Sparrow6/issues/2 if someone is interested ... any feedback is welcome ...

[21:31] <melezhik> ^^ tib

[21:35] *** probablymoony joined
[21:35] *** moony left
[21:36] *** maggotbrain left
[21:39] *** aluaces left
[21:41] *** Altai-man joined
[21:41] *** aluaces joined
[21:42] *** wamba left
[21:42] *** melezhik left
[21:43] *** sena_kun left
[22:00] *** patrickb left
[22:03] *** Altai-man left
[22:06] <Geth> ¬¶ doc: tony-o++ created pull request #3771: mention fez in the dist ecosystem contribution

[22:06] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3771

[22:08] <Geth> ¬¶ doc: 331e39cac3 | (Stoned Elipot)++ | doc/Type/independent-routines.pod6

[22:08] <Geth> ¬¶ doc: Fix level of heading

[22:08] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/331e39cac3

[22:08] <linkable6> Link: https://docs.raku.org/type/independent-routines

[22:11] *** brtastic left
[22:11] *** notagoodidea joined
[22:21] <tony-o> .tell jmerelo https://github.com/Raku/doc/pull/3771/commits/9b94ae7c27dd5f4a6a5be4429bbc23c8454bf76a

[22:21] <tellable6> tony-o, I'll pass your message to jmerelo

[22:30] *** pecastro left
[22:30] *** brtastic joined
[22:33] *** thdrmz left
[22:35] <[Coke]> also OT - anyone here play MTGArena?

[22:43] *** thdrmz joined
[22:44] <notagoodidea> .tell notandinus another way to call USAGE with the empty parameters is to use proto in this fashion `proto MAIN (|) {unless so @*ARGS {say $*USAGE; exit;}; {*}}` 

[22:44] <tellable6> notagoodidea, I'll pass your message to notandinus

[22:48] *** pecastro joined
[22:59] *** melezhik joined
[22:59] <[Coke]> codesections: any progress on xt/check-signature?

[23:03] *** brtastic left
[23:05] *** Black_Ribbon left
[23:08] *** maggotbrain joined
[23:11] *** eery left
[23:14] *** Black_Ribbon joined
[23:16] *** eery joined
[23:19] *** brtastic joined
[23:28] *** aluaces left
[23:29] *** melezhik left
[23:49] *** tech_hutch joined
[23:50] <tech_hutch> Hi

[23:52] <tech_hutch> I'm trying to call a function in one file from another. How is that usually done? I looked through the guides and tutorials, but they didn't quite seem to explain it

[23:52] <tech_hutch> I've tried `use ModuleName;`, but it could not find it. (It's in the same directory as the script I'm calling it from)

[23:53] <tony-o> make sure your sub has an `is export` on it

[23:54] <tech_hutch> hm, okay, I added that. but how do I call it?

[23:58] <[Coke]> a.raku: "use b; foo;" b.rakumod: "sub foo() is export { say "eek"}"

[23:58] <[Coke]> invoke with RAKULIB=. raku a.raku

