[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:52] *** [Coke] left
[00:52] *** [Coke] joined
[00:53] *** tejr joined
[01:03] *** chloekek left
[01:41] *** oodani left
[01:42] *** oodani joined
[03:35] *** reportable6 left
[03:35] *** coverable6 left
[03:35] *** statisfiable6 left
[03:35] *** quotable6 left
[03:35] *** linkable6 left
[03:35] *** shareable6_ left
[03:35] *** bisectable6 left
[03:35] *** tellable6 left
[03:35] *** committable6_ left
[03:35] *** benchable6 left
[03:35] *** notable6_ left
[03:35] *** bloatable6 left
[03:35] *** squashable6 left
[03:35] *** evalable6 left
[03:35] *** greppable6 left
[03:35] *** sourceable6 left
[03:35] *** releasable6 left
[03:35] *** nativecallable6 left
[03:35] *** unicodable6 left
[03:35] *** shareable6 joined
[03:36] *** benchable6 joined
[03:37] *** tellable6 joined
[03:37] *** bloatable6 joined
[03:37] *** quotable6 joined
[03:37] *** evalable6 joined
[03:37] *** greppable6 joined
[03:37] *** sourceable6 joined
[03:37] *** unicodable6 joined
[03:37] *** nativecallable6 joined
[03:37] *** reportable6 joined
[04:03] *** tejr left
[04:05] *** tejr joined
[04:10] *** tejr_ joined
[04:12] *** tejr left
[04:13] *** tejr_ is now known as tejr

[04:36] *** notable6 joined
[04:37] *** bisectable6 joined
[04:37] *** squashable6 joined
[04:38] *** linkable6 joined
[05:14] *** swaggboi left
[05:27] *** swaggboi joined
[05:30] *** swaggboi left
[05:36] *** committable6 joined
[05:37] *** statisfiable6 joined
[05:38] *** releasable6 joined
[05:42] *** swaggboi joined
[05:53] *** anser joined
[06:02] *** reportable6 left
[06:34] *** Summer left
[06:34] *** Summer joined
[06:36] *** coverable6 joined
[07:39] *** swagg_boi joined
[07:39] *** swagg_boi left
[08:03] *** reportable6 joined
[08:44] *** anser left
[09:55] *** swaggboi left
[09:55] *** swaggboi joined
[09:57] *** Sgeo left
[10:12] *** chloekek joined
[10:20] *** anser joined
[10:44] *** anser left
[11:40] *** jjido joined
[11:55] *** jjido left
[12:01] *** abraxxa-home joined
[12:02] *** reportable6 left
[12:08] *** sena_kun left
[12:36] *** abraxxa-home left
[12:37] *** gugod_ is now known as gugod

[12:41] *** sena_kun joined
[12:59] *** Debate2021 joined
[13:01] *** Debate2021 left
[14:01] *** linkable6 left
[14:01] *** evalable6 left
[14:01] *** linkable6 joined
[15:01] *** linkable6 left
[15:01] *** committable6 left
[15:02] *** evalable6 joined
[15:04] *** reportable6 joined
[15:06] *** jjido joined
[15:56] *** jjido left
[16:02] *** linkable6 joined
[16:07] <lizmat> ...

[16:08] *** tejr left
[16:08] <japhb> ???

[16:08] *** tejr joined
[16:08] <lizmat> I just realized that nobody had said anything on this channel today yet... so I used that to try something on my new log server :-)

[16:17] <El_Che> shut up

[16:17] <El_Che> :)

[16:17] <El_Che> maybe you put everyone in /ignore :P

[16:18] <perryprog> shhh this is a library

[16:19] <El_Che> nom that's #rakumod

[16:19] <El_Che> *no

[16:26] *** casaca left
[16:30] *** casaca joined
[16:45] *** perlbot left
[16:45] *** simcop2387 left
[17:35] <discord-raku-bot> <Anton Antonov#7232> Assume that 1) I execute a script multiple times without changing it, and 2) the script starts with a call to `srand` , say  `srand(332)` . Does 2) guarantee that the subsequent calls of random commands in the script (using `roll`, `pick`, or  `rand`) and Hash-objects creation commands would produce the same results during each execution of the script?

[17:36] <discord-raku-bot> <Anton Antonov#7232> I strongly suspect that Hash-objects creation is not influenced by `srand`.

[17:36] <lizmat> Indeed, I don't think that's the case either

[17:37] <discord-raku-bot> <Anton Antonov#7232> (I asked the above question few days ago in <#768511641758466088> ‚Ä¶ )

[17:37] <discord-raku-bot> <Anton Antonov#7232> @lizmat Thanks!

[17:39] <discord-raku-bot> <Anton Antonov#7232> @lizmat My question above is actually related to profiling `Hash::int` and `Hash::str`.

[17:39] *** Guest2385 joined
[17:40] *** Guest2385 left
[17:41] <discord-raku-bot> <Anton Antonov#7232> @lizmat I am going to ‚Äúofficially‚Äù ask for your profiling code on GitHub. (After I finish watching ‚ÄúSquid Game‚Äù‚Ä¶)

[18:02] *** reportable6 left
[18:04] *** jjido joined
[18:36] <MasterDuke> @Anton Antonov: the next release should introduce an environment variable to enable you turn off hash randomization at runtime

[18:38] <discord-raku-bot> <Anton Antonov#7232> @MasterDuke Thanks! Great info!

[18:46] <discord-raku-bot> <Anton Antonov#7232> @lizmat Here is the GitHub issue I promised: https://github.com/lizmat/Hash-int/issues/2

[18:46] *** Sgeo joined
[19:00] *** justsomeguy joined
[19:03] *** reportable6 joined
[19:04] *** committable6 joined
[19:18] <discord-raku-bot> <Anton Antonov#7232> @lizmat Here is the GitHub issue I promised: https://github.com/lizmat/Hash-int/issues/2

[19:23] *** Guest75 joined
[19:27] *** jjido left
[19:33] *** Guest75 left
[19:40] *** gcd left
[19:54] <Geth> ¬¶ problem-solving/JJ-patch-1: 9039f9e69a | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | solutions/meta/TheRakuFoundation.md

[19:54] <Geth> ¬¶ problem-solving/JJ-patch-1: Communicating the effective establishment

[19:54] <Geth> ¬¶ problem-solving/JJ-patch-1: 

[19:54] <Geth> ¬¶ problem-solving/JJ-patch-1: The Raku Foundation exists, so this closes #263

[19:54] <Geth> ¬¶ problem-solving/JJ-patch-1: review: https://github.com/Raku/problem-solving/commit/9039f9e69a

[19:55] <Geth> ¬¶ problem-solving: JJ++ created pull request #300: Communicating the effective establishment of the Raku foundation

[19:55] <Geth> ¬¶ problem-solving: review: https://github.com/Raku/problem-solving/pull/300

[19:57] *** euandreh joined
[20:18] *** justsomeguy left
[20:26] *** colemanx joined
[20:29] *** jjido joined
[20:40] *** immediate joined
[20:41] *** immediate left
[21:46] *** greyrat left
[21:46] *** greyrat joined
[22:12] <codesections> lizmat said "so I used that to try something on my new log server :-)".  Wait, so you used `...` as a stub IRC message?  I see what you did there 

[22:13] <lizmat> hehe

[22:17] <Geth> ¬¶ Raku-Steering-Council: vrurg++ created pull request #45: Added 'Call For Volunteers' announcement

[22:17] <Geth> ¬¶ Raku-Steering-Council: review: https://github.com/Raku/Raku-Steering-Council/pull/45

[22:22] *** chloekek left
[22:29] *** jjido left
[22:37] <raydiak> it's a step up from the hazardous pin-dropping that silence tends to evoke around here. although ... does look like three marbles on the ground

[22:39] <moon-child> |||

[22:40] <moon-child> ^ pins dropped onto the ground.  Standing on end.  Somehow.  (Probably because of all the angels)

[22:42] * raydiak rolls a magnet rake around the room

[22:44] <raydiak> just between #perl6 and #raku, I count somewhere around 31 dropped pins in lizmat's log, and around 21 of them are from lizmat...

[23:06] <raydiak> lizmat: have you considered exposing a public api to the chat logs? seems like mostly it'd just be having it respond at a different url with json templates instead of html

[23:08] <raydiak> from looking at the get params, I'd change how the paging controls are exposed, but everything else seems pretty straightforward

[23:15] <raydiak> I mean the paging controls and cgi params in the search results. the browsing urls are pretty straightforward

[23:29] *** evalable6 left
[23:29] *** linkable6 left
[23:31] *** linkable6 joined
[23:42] <timo> ohey raydiak have you continued measuring performance of your ray tracer? new-disp just landed, after all, so that could be interesting

[23:42] <raydiak> lizmat: nevermind, it looks like you already have a facility for it in place, except at .json urls I get a 404 with no content

[23:43] <raydiak> timo: hi! no, I haven't but that's a good idea. last time I checked, many years ago, all the time was mainly spent creating and destroying objects

[23:50] <timo> ah, interesting. the already-existing work in PEA, partial escape analysis, will be able to get around building short-lifetime objects

[23:52] <raydiak> I thought it's probably a flaw of my design, since I wasn't thinking much about optimization when I initially wrote it. considered refactoring it to reduce as much as possible to a vector pipeline, so I could "compile" the scene file into a routine or few before rendering, maybe using math::symbolic

[23:53] <raydiak> but yes even if it's not optimal, in some ways that just makes it a better stress test, so doing a little comparison might be cool

[23:56] <raydiak> new-disp landed on master? and 2021.09 is right before we did that, right?

[23:58] <raydiak> and does new-disp still require a env var set, or will it use the new compiler front end by default now?

