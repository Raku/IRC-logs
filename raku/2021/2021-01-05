[00:06] *** ufobat_ left
[00:11] *** cpan-raku left
[00:12] *** cpan-raku joined
[00:12] *** cpan-raku left
[00:12] *** cpan-raku joined
[00:13] *** leont left
[00:25] *** thdrmz1 joined
[00:26] *** thdrmz left
[00:26] *** thdrmz1 is now known as thdrmz

[00:42] *** RaycatWhoDat joined
[00:55] *** JRaspass left
[00:55] *** notagoodidea left
[01:07] *** pecastro left
[01:11] *** hungrydonkey joined
[01:13] *** hungrydonkey left
[01:24] *** abraxxa joined
[01:51] *** jmchael left
[02:00] *** Doc_Holliwood left
[02:19] *** stoned75 joined
[02:48] *** hungrydonkey joined
[02:48] <Geth> ¦ doc/nextsame-and-friends: 4a0b621a34 | (Stoned Elipot)++ | doc/Type/Method.pod6

[02:48] <Geth> ¦ doc/nextsame-and-friends: Broaden link to nextsame and friends

[02:48] <Geth> ¦ doc/nextsame-and-friends: review: https://github.com/Raku/doc/commit/4a0b621a34

[02:48] <Geth> ¦ doc: stoned++ created pull request #3766: Broaden link to nextsame and friends

[02:48] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3766

[02:49] <hungrydonkey> m:say '#'  ~~ /^\#/

[02:49] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «｢#｣␤»

[02:49] <hungrydonkey> m:say '#'  ~~ /^  \#/

[02:49] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «(exit code 1) 04===SORRY!04===␤Re…»

[02:50] <evalable6> hungrydonkey, Full output: https://gist.github.com/91782153fa075f96337fc7cb221f34d6

[02:51] <hungrydonkey> m:say '#'  ~~ /^  \#  $/

[02:51] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «(exit code 1) 04===SORRY!04===␤Re…»

[02:51] <evalable6> hungrydonkey, Full output: https://gist.github.com/ca985990602c656847bd61c8d4622001

[02:53] *** perryprog_ joined
[02:53] <hungrydonkey> m:say "#  "  ~~ /^\#/

[02:53] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «｢#｣␤»

[02:54] <hungrydonkey> m:say " # "  ~~ /^ \s \#/

[02:54] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «(exit code 1) 04===SORRY!04===␤Re…»

[02:54] *** perryprog_ is now known as perryprog

[02:54] <evalable6> hungrydonkey, Full output: https://gist.github.com/f4431c66862c17c4cf8713233e4dadd0

[02:54] *** fvox left
[02:54] <hungrydonkey> m:say " # "  ~~ /\s \#/

[02:54] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «(exit code 1) 04===SORRY!04===␤Re…»

[02:54] <evalable6> hungrydonkey, Full output: https://gist.github.com/ec904c9a1f4d9cc9d47af425403944c2

[02:55] <hungrydonkey> m:say "# "  ~~ /\#/

[02:55] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «｢#｣␤»

[02:55] *** ingy joined
[02:56] <hungrydonkey> m:say " # "  ~~ /\s\#/

[02:56] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «｢ #｣␤»

[02:56] <hungrydonkey> m:say " # "  ~~ /\s \#/

[02:56] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «(exit code 1) 04===SORRY!04===␤Re…»

[02:56] <evalable6> hungrydonkey, Full output: https://gist.github.com/957595fc3941a0ce250df5fd145deb62

[02:56] *** fvox joined
[02:56] <hungrydonkey> m:say " ' "  ~~ /\s \' \s/

[02:56] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «｢ ' ｣␤»

[02:57] *** stoned75 left
[02:57] <hungrydonkey> m:say " ' "  ~~ /\s \' /

[02:57] <evalable6> hungrydonkey, rakudo-moar 4d40e23e0: OUTPUT: «｢ '｣␤»

[02:57] *** markmarkmark joined
[03:00] *** hungrydonkey left
[03:25] *** marcusr joined
[04:10] *** frost-lab joined
[04:20] *** __jrjsmrtn__ joined
[05:16] *** sortiz left
[05:17] *** MitarashiDango[4 joined
[06:04] *** parabolize left
[06:09] *** brtastic joined
[06:37] *** jmcgnh left
[06:46] *** jmcgnh joined
[07:08] *** kanopis joined
[07:10] *** jmerelo joined
[07:19] *** ufobat_ joined
[07:21] *** ufobat_ is now known as ufobat

[07:33] <Geth> ¦ doc: fe2ce3601c | (Stoned Elipot)++ (committed by Juan Julián Merelo Guervós) | doc/Type/Method.pod6

[07:33] <Geth> ¦ doc: Broaden link to nextsame and friends

[07:33] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/fe2ce3601c

[07:34] <linkable6> Link: https://docs.raku.org/type/Method

[07:37] *** sjm_uk joined
[07:46] *** v_m_v joined
[07:50] <notandinus> so i'm writing a cli util, it used a dispatch table in perl, it's called like: `util <action> <file>`

[07:50] <notandinus> currently i've just defined a single MAIN sub with $action annd $file var and then used a given/when block on $action

[07:51] <notandinus> i could use a multi MAIN for different actions instead of given/when but then there are some flags that i want to include in all of them (like --verbose, --quiet) how do i achieve this?

[07:52] <notandinus> like if i use a multi MAIN then i'll have to include 'Bool $verbose' in all multis, how do i avoid that?

[07:53] <El_Che> I don't see much the point in multiple mains if the signature is the sam

[07:53] <El_Che> action and file are both strings

[07:53] <El_Che> put the swich/handling in a separate function?

[07:54] *** rindolf joined
[07:54] <notandinus> i see, so i'll keep the current structure, i was just wondering if there was a better way to do this

[07:54] <notandinus> also how do i accept a list from stdin?

[07:55] <notandinus> say `<action> <file1> <file2> ...`

[07:57] *** brtastic left
[07:58] <El_Che> yes, using an array

[07:58] <El_Che> or slurpy at the end

[07:58] <El_Che> main is a regular function signature wise as far as I know

[08:01] <notandinus> m: unit sub MAIN(Str $a, Array @t);

[08:01] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Usage:␤  <tmp> <a> <t>␤»

[08:01] <notandinus> ^^ like this ?

[08:04] <El_Che> not type Array

[08:04] <El_Che> wait

[08:07] *** stoned75 joined
[08:08] <MasterDuke> you might be able to put the shared flags and such in the proto?

[08:11] <notandinus>  i don't know about proto, i'll check it out

[08:11] <notandinus> i was looking at how zef is written but it's huge

[08:12] <MasterDuke> https://docs.raku.org/syntax/proto

[08:13] <El_Che> https://gist.github.com/nxadm/207cfa75d3d561dd0247dde7e341ea6c

[08:14] <MasterDuke> a lot of times you just end up using the one automatically created when you declare a couple multis. but if you want to implement some shared functionality between the multis an explicitly created proto can sometimes be used

[08:18] *** Sgeo left
[08:31] *** domidumont joined
[08:37] *** Doc_Holliwood joined
[08:41] *** pecastro joined
[08:41] *** stoned75 left
[08:42] *** stoned75 joined
[08:44] *** jmchael joined
[08:44] *** abraxxa left
[08:46] *** abraxxa joined
[08:54] *** brtastic joined
[09:18] *** brtastic left
[09:19] *** Altai-man joined
[09:19] *** brtastic joined
[09:20] *** v_m_v left
[09:20] *** v_m_v joined
[09:24] *** v_m_v left
[09:29] *** kanopis left
[09:29] *** aborazmeh joined
[09:29] *** aborazmeh left
[09:29] *** aborazmeh joined
[09:41] *** wamba joined
[09:42] *** vike1 left
[09:42] *** JRaspass joined
[09:46] *** xelxebar_ joined
[09:47] <notandinus> i see, thanks

[09:48] <notandinus> is zef + META6.json the equivalent of Make? i was wondering how to distribute this simple script

[09:49] <jmerelo> notandinus: it's not a task runner, it's not a building tool

[09:49] <jmerelo> notandinus: you might want to use Ake as a substitute for Make

[09:50] <jmerelo> (I meant a build-instructions tool above)

[09:50] <notandinus> i just use make for installating binaries and manuals,

[09:50] <notandinus> oh i see, i'll checkout Ake

[09:51] <jmerelo> notandinus: it's a whole task manager. it's amazing, once you get to know all it's got. Anyway, closest to make is Ake, which is a proper task manager where you can specify tasks and what needs to be done to achieve them

[09:51] <notandinus> i see, what is the ideal way of distributing Raku programs to others?

[09:52] <Geth> ¦ doc: 3256bb001d | (JJ Merelo)++ | doc/Language/syntax.pod6

[09:52] <Geth> ¦ doc: Separate angular parens to avoid them being gobbled.

[09:52] <Geth> ¦ doc: 

[09:52] <Geth> ¦ doc: Closes #3763

[09:52] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/3256bb001d

[09:52] <linkable6> Link: https://docs.raku.org/language/syntax

[09:52] <linkable6> DOC#3763 [closed]: https://github.com/Raku/doc/issues/3763 [bug][docs] <<<>>> on Syntax page isn't rendered

[09:53] <jmerelo> notandinus: one thing is distributing, other thing is building them. You're good to go with META6.json, though. You can then use zef to build/install locally.

[09:53] <notandinus> i see, i'm using zef. can i make it install the manual too in desired location?

[09:54] <notandinus> it does install all binaries and libraries correctly

[09:55] <jmerelo> notandinus: I don't think zef has any kind of provision in that sense, if what you want is your pod6 rendered to groff (which is the manual format) and installed to the usual manual pages (/usr/man). Also depends on the format you're using for the manual

[09:56] <jmerelo> If you use pod6, and your manual pages are in lib/ just like the rest, those pages are precompiled and installed and you should be able to check them with rakudoc

[09:56] <jmerelo> Anyway, there's no single of standard way of dealing with manual pages that I know of.

[09:57] <notandinus> hmm i haven't written it in pod6 format, it's mandoc format written manually, just need to place the tool.1 file in /usr/local/man

[09:57] <notandinus> i see, thanks

[10:01] *** v_m_v joined
[10:03] <kawaii> Hi, I have a module which has a hash structure declared like; `our %documentation is export`, and my main script is `use`'ing this module, when my main script does `if %documentation{$arg}:exists { ... }` it never returns True, even when I know `$arg` is a valid key inside that hash.

[10:04] <kawaii> Is this because my hash is contained within the module? It works when I move it into the main script but I wanted to tidy it away whilst still referencing it

[10:06] *** asymptotically joined
[10:07] *** v_m_v left
[10:08] <tyil> kawaii: try `%Module::documentation`, where Module is the name of the module

[10:08] *** v_m_v joined
[10:12] *** v_m_v left
[10:13] <kawaii> tyil: that works, thanks! :D

[10:15] *** maggotbrain left
[10:17] *** aborazmeh left
[10:17] *** maggotbrain joined
[10:19] *** v_m_v joined
[10:24] *** vike joined
[10:32] *** v_m_v left
[10:32] *** v_m_v joined
[10:36] *** v_m_v left
[10:39] *** notagoodidea joined
[11:01] <Geth> ¦ doc: 373de7c403 | (JJ Merelo)++ | doc/Language/syntax.pod6

[11:01] <Geth> ¦ doc: Revisions and reflows.

[11:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/373de7c403

[11:01] <Geth> ¦ doc: 4f10478825 | (JJ Merelo)++ | doc/Type/Associative.pod6

[11:01] <Geth> ¦ doc: Clarifications and some examples

[11:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/4f10478825

[11:01] <Geth> ¦ doc: 7a406bb060 | (JJ Merelo)++ | doc/Type/Method.pod6

[11:01] <Geth> ¦ doc: Improve structure and adds clarifications.

[11:01] *** v_m_v joined
[11:01] <linkable6> Link: https://docs.raku.org/language/syntax

[11:01] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/7a406bb060

[11:02] <linkable6> Link: https://docs.raku.org/type/Associative

[11:02] <linkable6> Link: https://docs.raku.org/type/Method

[11:02] <tbrowder> hi, all

[11:02] <tbrowder> i'm having a problem with zef and how it selects a module

[11:04] <tbrowder> with different authors and versions. does it select for highest version or alpha order on author or number on api?

[11:07] <Geth> ¦ doc: 360220433b | (JJ Merelo)++ | doc/Language/syntax.pod6

[11:07] <Geth> ¦ doc: Clarify where whitespace can't be removed, @Altai-man++

[11:07] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/360220433b

[11:08] <linkable6> Link: https://docs.raku.org/language/syntax

[11:14] *** ilogger2 joined
[11:15] <tbrowder> also, i see a need for some kind of module version cancellation list. the situation is with my new module with same name as david warring's older module. the both have some of the same dependencies which have also had version bumps to disambiguate them. unless the two (or more) older modules are retired, zef's default search appears to not work properly.

[11:26] *** v_m_v joined
[11:27] *** asy joined
[11:31] *** asy is now known as asymptotically

[11:33] *** v_m_v left
[11:33] *** v_m_v joined
[11:38] *** v_m_v left
[11:38] *** yonnybg joined
[11:39] <tbrowder> .tell ugexe ^^^

[11:39] <tellable6> tbrowder, I'll pass your message to ugexe

[11:39] <tyil> tbrowder: isn't :auth<> ment to disambiguate between different authors using the same name for a module?

[11:45] <kawaii> Hi, when running this `map` operation on one of the arrays which only contains a single hash, I end up with a malformed `fields` array which contains a second item out of nowhere (https://github.com/kawaii/raku-mimi/blob/master/lib/Mimi/Documentation.rakumod#L32) - `fields => [{name => Install, value => https://docs.mybb.com} {name => (Any), value => https://docs.mybb.com/1.8/install/}]` instead of the expected single item array

[11:45] *** yonnybg left
[11:46] <kawaii> note how one item has the correct name, and the other the correct value

[11:46] <kawaii> when testing with one of the documentation arrays containing multiple items, it works perfectly

[11:48] <tbrowder> yes, but a basic request without versions should get the higher number i thought. but it looks like that is not the case.

[11:49] <tyil> tbrowder: I'm not sure how zef resolves this, but I can tell you for sure that you should always use the most specific unitspec in your deps, so always include a :auth<> :p

[11:50] <tyil> leave nothing to chance or implementation of the particular module installer

[11:50] <tbrowder> david has updated the older dependencies' version numbers, and my module has a higher version number than david's old module of the same name, but zef doesn't find them without specifying the version number.

[11:50] <tyil> (I would generally also recommend pinning your deps to a specific version, fwiw)

[11:51] <tbrowder> i have done that in my module.

[11:53] <tbrowder> given what david and i have done version-wise, the ver<0.4.5+> style specs should work.

[11:54] <tbrowder> i agree the auth shoudld

[11:55] <tbrowder> *should be used in certain cases, but this is a coordinated rename so the version only should be fine.

[11:55] <tyil> it's generally safer to make sure only a single release can match in my experience

[11:56] <elcaro> kawaii: single-arg rule is kicking in, your array doesn't contain a single Hash, it contains a Pair

[11:57] <tbrowder> and that is what we have (unless of course we have overlooked something)

[11:58] <tyil> tbrowder: show me your META6.json

[11:58] *** sena_kun joined
[11:58] <tbrowder> it will take a few minutes...

[11:58] <El_Che> buy him dinner first

[11:59] <tyil> lol

[11:59] <kawaii> elcaro: ah I wasn't aware of this at all! Do I need to change the syntax for the single items to %() instead of {} to explicitly say they're hashes?

[12:01] <elcaro> kawaii: i'm not sure that will help... i've constructed a minimal reproducable test, and that doesn't seem to help

[12:02] <elcaro> so far the only thing that help is putting a commma after the pair, eg, topic => [{ key => val },]

[12:02] <elcaro> but that is not really a good solution

[12:02] <elcaro> trying to figure a better way

[12:03] <kawaii> I mean that sounds cleaner than the hack I was going to do of checking the `.elems` in each array and just doing something else entirely if it's `= 1` :P

[12:03] *** animalmother2 joined
[12:04] <elcaro> tbh, i dunno how your constructing %documentation in the first place, i didn't look that far

[12:04] <elcaro> if it's easy to throw a comma in there, then do it! :)

[12:04] <kawaii> elcaro: https://github.com/kawaii/raku-mimi/blob/master/lib/Mimi/Documentation.rakumod#L8

[12:04] <kawaii> it's manually written, so no problem :)

[12:04] <elcaro> i'm sure there's probably a "cleaner" way, but i'm tired and it's not coming to me atm

[12:05] <kawaii> no problem, thanks for your help and explanation of the issue!

[12:06] <tbrowder> see gist https://gist.github.com/tbrowder/b6eb1452771a48fc0170ceff5317635a

[12:07] <animalmother2> question: How come I need a ':' in `.say for (^10).map: { $_ * $_ };` but not in `.say for map { $_ * $_ }, (^10);`?

[12:08] <elcaro> animalmother2: short answer is the first example calls map as a method, the second is map as a function (with 2 args)

[12:08] <elcaro> ie. second example is really `map({ $_ * $_ }, (^10))

[12:09] <elcaro> but just calling as a function without parens

[12:09] <animalmother2> sure. and I see that `(^10).map({$_ * $_})` also works. So : is necessary when.. calling methods without parens?

[12:09] <elcaro> methods can be called without parens, but require a colon, eg. @array.push: 'this'

[12:10] <animalmother2> ok. where is this documented? 

[12:10] <animalmother2> Can't exactly google for ":"... 

[12:11] <elcaro> yeah, not sure... it is briefly mentioned here: https://docs.raku.org/language/syntax#Implied_separator_rule_(for_statements_ending_in_blocks)

[12:11] <elcaro> i'm sure it's elsewhere, just not sure where

[12:12] <elcaro> you can call methods with parens too, ie: (^10).map({ $_ * $_ })

[12:12] <notagoodidea> animalmother2: https://docs.raku.org/language/syntax#Subroutine_calls

[12:12] <animalmother2> also found this: "Similarly, multiple arguments can be specified by placing a colon after the method and separating the argument list with a comma" https://docs.raku.org/language/objects#Methods

[12:13] <animalmother2> thanks guys. I'm not sure if I just know perl 5 too well or if raku has even more syntax to learn lol

[12:14] <elcaro> animalmother2: typically i prefer parens, but i might drop them inside a map to avoid too many parens, eg. @lines.map(*.split: '-')

[12:14] <notagoodidea> I don't know perl but raku has a lot of alternative syntax (beginner pov)

[12:15] <elcaro> or, if my map is multi-line (or long enough to go on it's own line) i will `map: { `. this has the added benefit of not requiring a semi-colon

[12:15] <elcaro> because closing brace acts as statement terminator

[12:16] <elcaro> (erm, providing there's nothing after the closing brace on the same line)

[12:17] <notagoodidea> animalmother2: like you example can skip map with `^10 [Z*] ^10` (I love the Z and R operators :D)

[12:18] <codesections> another trick to avoiding parens (that I'm still not sure I fully understand is to use a combo of , and ; in an argument list)

[12:18] <codesections> s/understand/understand)/

[12:19] <codesections> m: <codesections> same, except that I don't have the "close the tab" step  [11:09]

[12:19] <codesections> <[Coke]> I tend to have under a half dozen windows open longer than a day or

[12:19] <codesections>          two. my kid regularly has 100 for weeks. I don't understand it.

[12:19] <codesections> <codesections> hence the need for bankruptcy 

[12:19] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3<codesections>7⏏5 same, except that I don't have the "clo␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤     …»

[12:19] <codesections> <notagoodidea> codesections: One day I will be able to dot that one day. I

[12:19] <codesections>                hoard tab with the group manager plugin based on context. Like

[12:19] <codesections>                my "Job hunt" group have LinkedIn and a few applications I have

[12:19] <codesections>                to answer too now or later, some group are contextualized by

[12:19] <codesections>                activity, if I want to look at Chess stuff, I want to have X

[12:19] <codesections>                websites at hand.                                        [11:10]

[12:19] <codesections> <notagoodidea> I don't have find a good way to do it yet. Containers don't

[12:19] <codesections>                help to not hoard tabs.                                  [11:11]

[12:19] <codesections> <tadzik> the fact that hoarding tabs like this is a common theme makes me

[12:19] <codesections>          think that there's an enormous room for improvement in bookmark

[12:19] <codesections>          managers                                                       [11:12]

[12:20] <codesections> <codesections> agreed

[12:20] <codesections> <notagoodidea> agreed

[12:20] <codesections> <tadzik> if my home page had a section for "bookmarked last week" and another

[12:20] <codesections>          for "bookmarked last year" I'll be likely to actually click on them,

[12:20] <codesections>          or just remove them once I forget what I wanted them for

[12:20] <codesections> <codesections> and browser UI in general 

[12:20] <codesections> <tadzik> I still wonder if we'd ever get browser tabs if window managers were

[12:20] <codesections>          better in the IE6 days                                         [11:13]

[12:20] <codesections> <tadzik> though most of the mainstream ones still aren't :P

[12:20] <codesections> <notagoodidea> If I good group-bookmark and reopen the all group that will

[12:20] <tadzik> ouch

[12:20] <codesections>                reduce a lot of hoarding.

[12:20] <codesections> <tadzik> but instead all the browsers are trying to reimplement window

[12:20] <notagoodidea> Ouch that paste :/

[12:20] <codesections>          managers, poorly                                               [11:14]

[12:20] <codesections> <notagoodidea> s/good/could

[12:20] <codesections> <tadzik> notagoodidea: I'm sure there are browser extensions for that,

[12:20] <codesections>          actually

[12:20] <codesections> <notagoodidea> Kind of, there is a few with different trade-off, tried a few,

[12:20] <codesections>                I am using Simple Tab Group rigth now but meh.           [11:16]

[12:20] <animalmother2> apparently pastes are throttled lol

[12:20] <codesections> <tadzik> yeah, native stuff tends to work better when it's available. I'm yet

[12:20] <codesections>          to see a Speed Dial as good as the one from old Opera          [11:18]

[12:21] <codesections> <tadzik> or new Opera, for that matter

[12:21] <El_Che> kick to poor bastard so he can rejoin afterwards

[12:21] <codesections> *** chovy (~chovy@pdpc/supporter/active/chovy) has left channel #raku: #raku

[12:21] <elcaro> kawaii: `topic => [ ${ ... } ]` also forces item context and makes a Hash (or `[{ ... }.item]`) 

[12:21] <codesections>                                                                         [11:20]

[12:21] <codesections> <notagoodidea> Trying to make it play nice with Containers in Firefox is a

[12:21] <codesections>                chore too.

[12:21] <codesections> <El_Che> I love firefox containers                                      [11:21]

[12:21] <codesections> <tadzik> they're a lifesaver

[12:21] <codesections> <El_Che> certainly as cookie autodelete works well with them            [11:22]

[12:21] <codesections> <notagoodidea> I tend to use more more fo thematic grouping than anything so

[12:21] <codesections>                lots of friction on the way.                             [11:27]

[12:21] <codesections> <El_Che> notagoodidea: you can sort tabs by container                   [11:29]

[12:21] <codesections> *** kanopis (~kanopis@p548878b7.dip0.t-ipconnect.de) has quit: Ping timeout:

[12:21] <codesections>     260 seconds                                                         [11:30]

[12:21] <codesections> *** melezhik (62c662c5@c-98-198-98-197.hsd1.tx.comcast.net) has joined channel

[12:21] <codesections>     #raku                                                               [11:32]

[12:21] <notagoodidea> animalmother2: In fact `^10 Z* ^10` works too

[12:21] <codesections> <melezhik> .tell tony-o - please let me know if you need any help with new eco

[12:21] <codesections>            system / sparrow testing things ... I'd glad to help ...

[12:21] <codesections> <tellable6> melezhik, I'll pass your message to tony-o

[12:21] <codesections> <melezhik> is it a bug in raku.land? Sparky should 0.0.29, but it's still

[12:21] <codesections>            0.0.26 - https://modules.raku.org/dist/Sparky:cpan:MELEZHIK VS

[12:22] <codesections>            https://raku.land/cpan:MELEZHIK/Sparky                       [11:37]

[12:22] <codesections> <JRaspass> Looks like the version in the META6.json wasn't updated, it shows

[12:22] <codesections>            0.0.26 in the 29 tarball for me                              [11:39]

[12:22] <codesections> <JRaspass> we generally trust the json file, not the filename

[12:22] <codesections> <codesections> unrelated: there's a global Slack outage at the moment.  [11:40]

[12:22] <codesections> *** patrickb (~quassel@55d467ab.access.ecotel.net) has joined channel #raku

[12:22] <codesections> <patrickb> .

[12:22] <codesections> <tellable6> hey patrickb, you have a message:

[12:22] <codesections>             https://gist.github.com/5e56fc6d95ab0b4d0f22b94cf5bd87f2

[12:22] <codesections> * codesections smug IRC user 

[12:22] <codesections> <jdv79> nobody knows who runs the irc logger?                           [11:43]

[12:22] <codesections> <melezhik> codesections ++ we see at our \@job                          [11:44]

[12:22] <codesections> <jdv79> i just realized its down.  it looked ok until i tried to send a msg.

[12:22] <codesections>                                                                         [11:45]

[12:22] <codesections> <melezhik> JRaspass,  -

[12:22] <codesections>            https://github.com/melezhik/sparky/blob/master/META6.json#L38 , oh

[12:22] <codesections>            , interesting ...                                            [11:46]

[12:22] <codesections> <MasterDuke> the colabti website was (still is?) down also

[12:22] <codesections> *** patrickb (~quassel@55d467ab.access.ecotel.net) has quit: Ping timeout: 246

[12:22] <codesections>     seconds

[12:23] <codesections> <melezhik> I use http://sparrowhub.io/plugin/raku-utils-mi6/0.000003 to

[12:23] <codesections>            release new versions ... I wonder if it's mi6 issue ...

[12:23] <codesections> <JJAtria[m]> I've had similar issues with mi6 occasionally not updating a

[12:23] <codesections>              version number. I've made it a point to manually check before

[12:23] <codesections>              uploading nowadays                                         [11:47]

[12:23] <codesections> *** hungrydonkey (~frost@59.71.244.250) has joined channel #raku        [11:48]

[12:23] <notagoodidea> No chan op around?

[12:23] <codesections> <JJAtria[m]> Although I think in my case it was not the META file that was not

[12:23] <codesections>              bumped, but the version in one of the modules

[12:23] <codesections> <JRaspass> i like the image in the markdown though, looks good on the site :-)

[12:23] <codesections>                                                                         [11:49]

[12:23] <codesections> <melezhik> JRaspass, yeah, thanks , looks good for me to )))            [11:50]

[12:23] <codesections> *** brtastic (~Thunderbi@2a02:a315:413a:7580:879e:25b4:92ae:7858) has quit:

[12:23] <codesections>     Ping timeout: 264 seconds                                           [11:53]

[12:23] <codesections> <jdv79> moritz: you ran the first irc logger, right?                    [12:04]

[12:23] <codesections> *** leont (~leont@86-87-152-242.fixed.kpn.net) has quit: Quit: Leaving  [12:07]

[12:23] <codesections> *** Kaiepi (~Kaiepi@47.54.252.148) has quit: Ping timeout: 260 seconds  [12:17]

[12:23] <codesections> *** aluaces (~aluaces@144.178.134.249) has quit: Excess Flood

[12:23] <codesections> *** aluaces (~aluaces@144.178.134.249) has joined channel #raku         [12:28]

[12:23] <codesections> *** rindolf (~rindolf@inkscape/contributor/rindolf) has quit: Quit: Shlomi

[12:23] <codesections>     Fish ("Rindolf") has left the server. “Some people grow older and

[12:24] <codesections>     wiser. Not I. I grow older and more foolish.”                       [12:35]

[12:24] <codesections> <tony-o> 2.                                                             [12:36]

[12:24] <codesections> <tellable6> 2021-01-04T16:32:46Z #raku <melezhik> tony-o - please let me know

[12:24] <codesections>             if you need any help with new eco system / sparrow testing things

[12:24] <codesections>             ... I'd glad to help ...

[12:24] <rindolf> wtf?

[12:24] <codesections> *** notagoodidea (~notagoodi@ip-213-127-99-21.ip.prioritytelecom.net) has

[12:24] <codesections>     quit: Ping timeout: 264 seconds

[12:24] <codesections> <tony-o> .tell melezhik start uploading with fez would help me identify some

[12:24] <codesections>          issues with it

[12:24] <codesections> <tellable6> tony-o, I'll pass your message to melezhik

[12:24] <codesections> <melezhik> tib started a lot of issues/feature requests for Sparky -

[12:24] <codesections>            https://github.com/melezhik/sparky/issues , if someone is

[12:24] <kawaii> ?

[12:24] <codesections>            interested in participating, please let us know )))          [12:40]

[12:24] <tadzik> poor guy is probably apologizing already, but we won't see it until the paste finishes

[12:24] <codesections> <melezhik> or just comments would be useful ...                         [12:41]

[12:24] <codesections> *** domidumont (~dodu@91-175-103-119.subs.proxad.net) has joined channel #raku

[12:24] <codesections>                                                                         [12:43]

[12:24] <codesections> <tib> hey melezhik \o

[12:24] <codesections> <melezhik> hey!                                                         [12:44]

[12:24] <codesections> <tib> @all or just come to drop a star or leave a smiley on an issue ! :)

[12:24] <codesections>                                                                         [12:48]

[12:25] <codesections> <melezhik> Sparky CI is written on Raku, here is a discussion for people who

[12:25] <codesections>            think about try it out -

[12:25] <codesections>            https://github.com/melezhik/sparky/discussions/43            [12:54]

[12:25] <aukkras> AlexDaniel`: ^ can you do something about codesections 

[12:25] <codesections> *** Kaiepi (~Kaiepi@47.54.252.148) has joined channel #raku             [13:13]

[12:25] <codesections> *** domidumont (~dodu@91-175-103-119.subs.proxad.net) has quit: Ping timeout:

[12:25] <codesections>     256 seconds                                                         [13:16]

[12:25] *** jess joined
[12:25] <codesections> *** ggoebel (~ggoebel@c-73-82-150-51.hsd1.ga.comcast.net) has joined channel

[12:25] <codesections>     #raku                                                               [13:19]

[12:25] <codesections> *** abraxxa (~abraxxa@tsa-tc-flod-1.t-systems.at) has quit: Read error:

[12:25] <codesections>     Connection reset by peer                                            [13:28]

[12:25] <codesections> *** notagoodidea (~notagoodi@ip-213-127-99-21.ip.prioritytelecom.net) has

[12:25] <codesections>     joined channel #raku                                                [13:31]

[12:25] <codesections> *** wamba (~wamba@193-194.moravanet.cz) has quit: Ping timeout: 260 seconds

[12:25] <codesections>                                                                         [13:39]

[12:25] <codesections> *** wamba (~wamba@193-194.moravanet.cz) has joined channel #raku        [14:03]

[12:25] <notagoodidea> tadzik: hoping that the past does cover the last 24h.

[12:25] <codesections> *** brtastic (~Thunderbi@89-64-2-152.dynamic.chello.pl) has joined channel

[12:25] <codesections>     #raku                                                               [14:11]

[12:25] <codesections> *** leont (~leont@86-87-152-242.fixed.kpn.net) has joined channel #raku

[12:25] <notagoodidea> does not*

[12:25] <codesections>                                                                         [14:13]

[12:25] <codesections> *** ufobat (~martin@dynamic-095-114-131-237.95.114.pool.telefonica.de) has

[12:26] <codesections>     quit: Ping timeout: 260 seconds                                     [14:28]

[12:26] <codesections> <Geth> ¦ doc: 5cad6f55bf | (Stoned Elipot)++ | doc/Type/Associative.pod6

[12:26] <aukkras> ... 

[12:26] *** mori017 joined
[12:26] <codesections>                                                                         [14:29]

[12:26] <codesections> <Geth> ¦ doc: Fix whitespace

[12:26] <codesections> <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/5cad6f55bf

[12:26] <jess> how long's this been happening

[12:26] <codesections> <linkable6> Link: https://docs.raku.org/type/Associative

[12:26] <kawaii> :)

[12:26] <codesections> <moritz> jdv79: yes, I did                                              [14:49]

[12:26] <codesections> *** SqrtNegInf (~SqrtNegIn@c-73-53-5-92.hsd1.wa.comcast.net) has joined

[12:26] <jess> the codesections stuff i mean

[12:26] <codesections>     channel #raku                                                       [14:50]

[12:26] <codesections> *** Altai-man (~sena_kun@94.153.23.94) has joined channel #raku         [14:57]

[12:26] <kawaii> few minutes now jess 

[12:26] *** ChanServ sets mode: +o jess

[12:26] <codesections> *** Doc_Holliwood (~holli@dslb-084-059-122-250.084.059.pools.vodafone-ip.de)

[12:26] *** jess sets mode: +q codesections!*@*

[12:26] <codesections>     has joined channel #raku                                            [15:00]

[12:26] *** jess sets mode: -o jess

[12:26] <tadzik> codesections: may I recommend weechat, which warns you if you're about to paste more than one line at a time?

[12:26] <tadzik> jess++

[12:27] <jess> codesections: toss me a message when you can and i'll pull the +q

[12:27] *** brtastic joined
[12:34] *** aborazmeh joined
[12:34] *** aborazmeh left
[12:34] *** aborazmeh joined
[12:34] <frost-lab> Too many messages:] 

[12:35] <frost-lab> ：）

[12:35] *** mori017 left
[12:35] <animalmother2> just curious, can you define custom junctions? like, can you write an `any2` junction?

[12:36] <moritz> not easily at least

[12:37] *** Deadly_Alive joined
[12:37] *** cpan-raku joined
[12:37] *** cpan-raku left
[12:37] *** cpan-raku joined
[12:38] <animalmother2> gotcha, I'll stop thinking about it for now 

[12:38] *** codesections joined
[12:38] *** ChanServ sets mode: +o jess

[12:38] *** jess sets mode: -q codesections!*@*

[12:38] <jess> codesections: all good?

[12:39] <codesections> I believe so

[12:39] *** jess sets mode: -o jess

[12:39] <jess> fantastic

[12:39] <codesections> very sorry about that

[12:39] <jess> no bother, accidents happen

[12:40] <codesections> I recently switched from WeeChat to Erc, and must not have it configured correctly 

[12:41] <codesections> I have a non-nil value for `erc-accidental-paste-thresholld-seconds`, which I _thought_ was all I needed…

[12:49] <MasterDuke> fyi, looks like colabti is back

[12:51] <codesections> And here I was hoping it didn't capture that flood.  Oh well

[12:52] *** Deadly_Alive left
[12:59] *** cog joined
[12:59] <tadzik> hah

[12:59] <tadzik> codesections: that thresholld sounds like a typo

[13:00] <cog> In Perl, refaddr can be used to create a key in a hash. What would be the Raku equivalent ? The port of Scalar::Util says : Returns the internal memory address of the object as a plain integer. Please note that Raku implementations do not require the memory address of an object to be constant: in fact, with MoarVM as a back end, any longer living object will have its memory address changed over its lifetime.

[13:02] <codesections> tadzik: yeah, but it's correct in my config/the variable I checked.  I just tested an over-large paste in a msg to myself, and I was properly protected/warned.  So truly no idea why it didn't save me (us?) here

[13:04] <cog> Maybe it is good enough for that use. Or we may potentially have a problem similar to the ABA problem, here manifesting  as not having the guarantee of the unicity of a key.

[13:05] <Geth> ¦ doc: e9d0b234cf | (JJ Merelo)++ | doc/Language/operators.pod6

[13:05] <Geth> ¦ doc: Tries to reorganize metaoperators ("compound" operators)

[13:05] <Geth> ¦ doc: 

[13:05] <Geth> ¦ doc: So that they're easier to find, if not exactly responding to #3768

[13:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e9d0b234cf

[13:05] <linkable6> Link: https://docs.raku.org/language/operators

[13:05] <linkable6> DOC#3768 [open]: https://github.com/Raku/doc/issues/3768 [docs] built-in compound assignment operators like "~=" are not searchable

[13:07] <MasterDuke> cog: you can create object hashes and use the object directly as the key. if you really want some some of unique string representation. use `.WHICH`

[13:07] <MasterDuke> m: my @a = [1,2]; my @b = [1,2]; say @a.WHICH; say @b.WHICH

[13:07] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Array|72633944␤Array|73518832␤»

[13:08] <cog> So WHICH is guaranteed not to change over time ?

[13:10] <cog> Anyway, object as its own key is good enough, thx MasterDuke 

[13:12] <MasterDuke> cog: yeah. .WHERE is the memory address, which can change, but .WHICH is a unique id (though "different" value objects may have the same id)

[13:13] <MasterDuke> m: my $a = 1; my $b = 1; say $a.WHICH; say $b.WHICH

[13:13] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Int|1␤Int|1␤»

[13:15] <MasterDuke> m: my @a = [1,2]; my @b = [1,2]; say @a.WHICH; say @b.WHICH; say @a.WHERE; say @b.WHERE; my $c; for ^100_000 { my @a = ^10; $c = @a.tail }; $*VM.request-garbage-collection; $*VM.request-garbage-collection; say $c; say @a.WHICH; say @b.WHICH; say @a.WHERE; say @b.WHERE

[13:15] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Array|71206384␤Array|71469864␤139732949255424␤139732949255368␤9␤Array|71206384␤Array|71469864␤71206384␤71469864␤»

[13:27] *** aborazmeh left
[13:27] *** notagoodidea joined
[13:30] *** tomasmu joined
[13:35] *** berber44 joined
[13:43] *** MorayJ joined
[13:46] *** animalmother2 left
[13:57] *** berber44 left
[14:03] *** Doc_Holliwood joined
[14:06] *** Tirifto joined
[14:24] *** aborazmeh joined
[14:24] *** aborazmeh left
[14:24] *** aborazmeh joined
[14:26] <kawaii> what's the correct capture for `!d`, `!doc` and `!docs`? I have `/ ^ '!' d 'oc'? s? /` at the moment but I don't think this is right and it also captures `!ds` ;(

[14:31] <vrurg_> m: say '!doc' ~~ / ^ '!d' ['oc' 's'?]? $/;

[14:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!doc｣␤»

[14:31] <tellable6> 2020-12-29T00:51:49Z #raku <melezhik> vrurg finally I got your example working - http://rakudist.raku.org/sparky/report/RakuPlay-1/8889

[14:31] <vrurg_> m: say '!docs' ~~ / ^ '!d' ['oc' 's'?]? $/;

[14:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!docs｣␤»

[14:31] <vrurg_> m: say '!ds' ~~ / ^ '!d' ['oc' 's'?]? $/;

[14:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Nil␤»

[14:31] <vrurg_> kawaii: I'd do it like this unless there is another requirement.

[14:31] <vrurg_> m: say '!d' ~~ / ^ '!d' ['oc' 's'?]? $/;

[14:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!d｣␤»

[14:33] *** aborazmeh left
[14:33] <kawaii> vrurg: that seems to match !do also when I test

[14:33] <vrurg> m: say '!do' ~~ / ^ '!d' ['oc' 's'?]? $/;

[14:33] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Nil␤»

[14:33] <vrurg> No, it doesn't.

[14:33] <kawaii> hmmm

[14:34] <kawaii> ah see, I don't have the ending anchor 

[14:34] <vrurg> And it can't because 'oc' is an atom.

[14:34] <kawaii> which I guess is the 'other requirement' 

[14:34] <kawaii> since I have arguments after it

[14:34] <vrurg> m: say '!do' ~~ / ^ '!d' ['oc' 's'?]? /;

[14:34] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!d｣␤»

[14:34] <Altreus> do we need all that?

[14:34] <vrurg> It does match without $ but it it only matches the part you need.

[14:34] <Altreus> m: say '!do' ~~ / ^ '!d' [ ocs? ]? /;

[14:34] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!d｣␤»

[14:35] <Altreus> wait, that's not how I expect regex to work

[14:35] <Altreus> I guess it's allowed

[14:35] <vrurg> Altreus: in your case 'ocs' is an atom.

[14:35] <Altreus> so the ? applies to the string, not the s?

[14:35] <vrurg> Altreus: ? applies to atoms. 

[14:36] <Altreus> inneressin

[14:36] <Altreus> so I could do [ oc s? ] ?

[14:36] <vrurg> Altreus: apparently, you can.

[14:37] * vrurg is back to the main job...

[14:38] <Altreus> :)

[14:41] <Altreus> m: say '!do' ~~ / ^ '!d' [ oc s? ]? >> /;

[14:41] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Nil␤»

[14:41] <Altreus> m: say '!d' ~~ / ^ '!d' [ oc s? ]? >> /;

[14:41] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!d｣␤»

[14:41] <Altreus> m: say '!docs' ~~ / ^ '!d' [ oc s? ]? >> /;

[14:41] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!docs｣␤»

[14:42] <Altreus> m: say '!doc' ~~ / ^ '!d' [ oc s? ]? >> /;

[14:42] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!doc｣␤»

[14:42] <Altreus> kawaii: it work

[14:42] <Altreus> m: say '!doc holiday' ~~ / ^ '!d' [ oc s? ]? >> /;

[14:42] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «｢!doc｣␤»

[14:42] <kawaii> Thanks guys :)

[14:46] *** Sgeo joined
[14:53] *** lucasb joined
[14:56] *** Doc_Holliwood left
[15:09] *** bazzaar joined
[15:11] <bazzaar> m: if 1 {loop (my $i = 0; $i < 5; $i++) { 1 };loop (my $i = 0; $i < 5; $i++) { 2 }}

[15:11] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$i'.␤    at <tmp>:1␤    ------> 3 $i = 0; $i < 5; $i++) { 1 };loop (my $i7⏏5 = 0; $i < 5; $i++) { 2 }}␤WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)…»

[15:13] <xinming_> SmokeMachine: I think we should split the code handling with table name and table-col reference. now, I just tried with `temp Model.^table = "sql_function()"`, and found the col reference which will be something like  sql_function().col1

[15:14] <bazzaar> not sure why the Redeclaration message, don't the loops have different scopes?

[15:14] <xinming_> SmokeMachine: So, As initial support for future migration to sql_function() table expression, We can support something like  `temp Model.^table = "sql_function()"` initially

[15:14] <tyil> bazzaar: isn't the scope inside the { }, not the ( )

[15:16] <bazzaar> tyil: good point. Though isn't the signature tied to the following block?

[15:17] <tyil> that's too deep for my knowledge

[15:17] <tyil> I only 'member that a new scope is started in { }, not ( )

[15:17] <tyil> same happens in (most?) other languages

[15:18] <SmokeMachine> xinming_: probably use that as: `temp Model.^table = "sql_function()"; .say for Model.^as("bla").^all`

[15:18] <bazzaar> tyil: thanks for your help :-)

[15:20] <SmokeMachine> xinming_: maybe that would work...

[15:21] <xinming_> SmokeMachine: doesn't

[15:22] <xinming_> Too many positionals passed; expected 2 arguments but got 3   <--- This is the error, and I read the source, the .^as call is aliased to call .^table

[15:22] <xinming_> where when we try to use ".^alias", We need to manually pass 3 named args, which I haven't figured out yet.

[15:31] <SmokeMachine> sorry, no args to .^as

[15:35] *** notagoodidea left
[15:53] *** parabolize joined
[15:57] *** Altai-man joined
[15:59] *** sena_kun left
[16:05] *** Tirifto left
[16:09] *** notagoodidea joined
[16:12] *** xinming joined
[16:46] *** melezhik joined
[16:47] *** guifa2 joined
[16:47] <guifa2> o/

[16:48] <[Coke]> \

[16:48] <[Coke]> \o

[16:49] <[Coke]> (ow, that looks painful)

[16:49] <guifa2> When doing multi subs, it's possible to leave constants in positional arguments to help direct dispatching, e.g. "multi sub is-pos-neg(0) { die "0 is neither and both" )

[16:49] <guifa2> Is there a way to do that with named ones?

[16:51] *** MorayJ left
[16:51] *** MorayJ joined
[16:52] <codesections> busting out the controversial mathematical claim in example code; I like it!

[16:53] <melezhik> vrurg on https://github.com/Raku/problem-solving/issues/5#issuecomment-754707417 , you can start with https://dev.to/melezhik/informal-introduction-into-sparrow6-40pa and https://raku-advent.blog/2020/12/07/mixing-bash-and-raku-using-sparrow/ 

[16:53] <codesections> (more seriously: I'm not sure of a way, but I'll think about it a bit more; I agree it'd be handy)

[16:53] <melezhik> let me know if this what you're looking for ... imho they are quite beginners friendly introductions to Sparrow 

[16:54] <[Coke]> m: multi sub test(:$a where $a == 3) { say 4 }; multi sub test(:$a) { say $a }; test(:a(3)); test(:a(5))

[16:54] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «4␤5␤»

[16:54] <[Coke]> ^^ not as nice as a constant.

[16:54] <melezhik> vrurg also on how to use Sparrow in testing you might read this - https://dev.to/melezhik/simple-blackbox-testing-with-raku-and-sparrow6-g32

[16:55] <moon-child> you can shorten to just :$a where 3

[16:56] <melezhik> I personally don't Sparrow difficult to learn  :-)  , it's just versatile ... and could apply to many areas, but they are all about automation ...

[16:56] <melezhik> don't -> don't find 

[16:59] <codesections> along the same lines as what [Coke] said, you could also make a constant Subset (something like Subset Three where * == 3)

[17:00] <codesections> and then have something like: multi test(Three :$a) { say 4 }

[17:00] <codesections> but I don't know if that's an improvement on what moon-child suggested 

[17:02] <[Coke]> m: multi sub test(3 :$a) { say 4 }; multi sub test(:$a) { say $a }; test(:a(3)); test(:a(5))

[17:02] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «4␤5␤»

[17:02] <[Coke]> oh.

[17:03] <[Coke]> I didn't expect that to work. :)

[17:04] <codesections> [Coke]++ oh, that's really nice!  This language, man 

[17:05] <codesections> guifa2: ^^^^ (in case you didn't see coke's answer )

[17:21] *** v_m_v joined
[17:22] <AlexDaniel`> aukkras: sorry, I was asleep

[17:22] <aukkras> np, it's solved ;)

[17:23] <codesections> yeah, and I've learned a lesson :)

[17:24] <codesections> (or, sort of; I still don't really know why the accidental paste prevention feature in my client didn't save me)

[17:25] *** dwarring joined
[17:25] <notagoodidea> [Coke]: how it even work the `multi sub test(3 :$a)`?

[17:26] <notagoodidea> 3 is treated as a type?

[17:27] *** v_m_v left
[17:27] *** v_m_v joined
[17:28] <codesections> notagoodidea: yeah.  And, now that I think about it, that's the same thing that happens with positionals 

[17:28] <notagoodidea> m: sub test(3 :$a); say test.signature;

[17:28] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form. If you did not mean to declare a unit-scoped sub,␤perhaps you accidentally placed a semicolon after routi…»

[17:28] <notagoodidea> m: sub test(3 :$a){4}; say test.signature;

[17:28] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Constraint type check failed in binding to parameter '$a'; expected 3 but got Int␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:29] <notagoodidea> m: multi sub test(3 :$a){*}; say &test.signature;

[17:29] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(;; Mu |)␤»

[17:31] *** tomasmu left
[17:31] <codesections> m: multi sub test(3 :$a){*}; say &test.candidates.map(*.signature)

[17:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((Int :$a where { ... }))␤»

[17:31] <notagoodidea> Ah

[17:31] <codesections> m: multi sub test(3){*}; say &test.candidates.map(*.signature)

[17:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((3))␤»

[17:32] *** v_m_v left
[17:32] <codesections> hmm, I'm kind of surprised the positional signature doesn't have a where block too

[17:34] <notagoodidea> m: multi sub test(3 $a){*}; say &test.candidates.map(*.signature)

[17:34] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((Int $a where { ... }))␤»

[17:37] <codesections> interesting.  I thought sub f(3) was nothing more than syntactic sugar for sub f(3 $), but it looks like they have different signatures 

[17:38] <codesections> m: multi sub f(3 $){*}; say &f.candidates.map(*.signature)

[17:38] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((3))␤»

[17:38] <codesections> m: multi sub f(3 $a){*}; say &f.candidates.map(*.signature)

[17:38] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((Int $a where { ... }))␤»

[17:39] <codesections> oh, I see: the parameter name is part of the signature 

[17:39] <notagoodidea> m: multi sub f("foo" $a){*}; say &f.candidates.map(*.signature);

[17:39] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((Str $a where { ... }))␤»

[17:39] <codesections> m: multi sub f(3 :$){*}; say &f.candidates.map(*.signature)

[17:39] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((Int :$ where { ... }))␤»

[17:41] <codesections> but the one literal that pattern won't work for is Bools

[17:41] <codesections> m: multi sub f(True){*}; say &f.candidates.map(*.signature)

[17:41] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Potential difficulties:␤    Literal values in signatures are smartmatched against and smartmatch with `True` will always succeed. Use the `where` clause instead.␤    at <tmp>:1␤    ------> 3multi sub f(True7⏏5){*}; say &f.candidates.map(*.s…»

[17:42] <notagoodidea> yep, but it work for Int/Str. What else?

[17:43] *** MorayJ left
[17:45] <moon-child> m: class Foo { has Int $.x }; multi sub f(Foo.new(x => 7)) {*}

[17:45] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3ass Foo { has Int $.x }; multi sub f(Foo7⏏5.new(x => 7)) {*}␤    expecting any of:␤        constraint␤        formal parameter␤»

[17:51] *** patrickb joined
[17:51] *** patrickb left
[18:01] <notagoodidea> How can I "delete" a subset?

[18:03] *** sortiz joined
[18:10] *** wamba joined
[18:11] <cog> Is there a more idiomatic to write                 %info = %info, %inc_info;    which recreates %info from scratch

[18:18] *** notagoodidea left
[18:18] <dwarring> %info ,= %inc_info

[18:18] <tellable6> 2020-04-12T10:48:02Z #raku <tbrowder> dwarring +++ excellent, david!

[18:18] <tellable6> 2020-08-18T16:48:13Z #raku <melezhik> dwarring: I've added "patch" for LibXSLT - https://github.com/melezhik/RakuDist/commit/3ee8d26b90ed6ffd2e189fe31a39c2b8c95cb192 , now it successfully tests on RakuDist - http://rakudist.raku.org/sparky/report/debian/655

[18:19] <xinming> dwarring: he wants to recraete it from scractch

[18:19] *** cxreg joined
[18:21] * dwarring drinks coffee

[18:22] <cog> Thx dwarring, indeed I want to add entries in the hash, and avoid the costs of recreating from scratch. Not that it matters in this particular example.

[18:24] <cog> m: my @a = < a b >; my @b = < c d >; @a ,= @b # just curious

[18:24] <camelia> rakudo-moar 4d40e23e0: ( no output )

[18:24] <cog> m: my @a = < a b >; my @b = < c d >;  say(@a ,= @b) # just curious

[18:24] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(\Array_58809352 = [Array_58809352 [c d]])␤»

[18:31] <xinming>  m: my @a = < a b >; my @b = < c d >;  say(@a ,= |@b)

[18:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(\Array_80184152 = [Array_80184152 c d])␤»

[18:31] <xinming>  m: my @a = < a b >; my @b = < c d >;  (@a ,= |@b).raku.say;

[18:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((my @Array_68968408) = [@Array_68968408, "c", "d"])␤»

[18:31] <xinming>  m: my @a = <a b >; my @b = <c d >;  (@a ,= |@b).raku.say;

[18:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «((my @Array_65170152) = [@Array_65170152, "c", "d"])␤»

[18:32] <xinming> Why won't the @Array_65170152 print the content of @a?

[18:32] *** melezhik left
[18:38] *** sno joined
[19:01] <[Coke]> m: my @a = <a b >; my @b = <c d >;  (@a ,= |@b); dd @a[0]; # it's not just .raku or dd here.

[19:01] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Array @a = ((my @Array_85009224) = $[@Array_85009224, "c", "d"])␤»

[19:01] <[Coke]> m: my @a = <a b >; my @b = <c d >;  (@a ,= |@b); dd @a; # it's not just .raku or dd here.

[19:01] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Array @a = ((my @Array_64788216) = [@Array_64788216, "c", "d"])␤»

[19:06] <[Coke]> m: my @a = < a b >; my @b = < c d >;  (@a ,= |@b); dd @a[0][0][0][0][0]

[19:06] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Array @a = ((my @Array_69386488) = $[@Array_69386488, "c", "d"])␤»

[19:06] <[Coke]> ^^ it's recursive, so it's doing the best it can.

[19:10] *** melezhik joined
[19:11] <[Coke]> m: my @a = < a b >; my @b = < c d >;  (@a ,= |@b); dd @a[0][0][0][0][0][2]

[19:11] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Str @a = "d"␤»

[19:15] <[Coke]> so if you printed the contents, it'd be infinite.

[19:22] <melezhik> funny, I am browsing irc logs from colabti now. they all over the place right now. for example - https://colabti.org/irclogger/irclogger_log/raku?date=2021-01-05

[19:23] <melezhik> you may find my really old comments "made" by others :-)

[19:24] *** msiism joined
[19:24] <melezhik> https://colabti.org/irclogger/irclogger_log/raku?date=2021-01-05#l320 according to this codesections "started" to use Sparrow HA-HA :')  I don't mind

[19:25] <melezhik> looks like started after the last colabti outage ... 

[19:27] <msiism> Does anyone happen to know of a comparison of Raku against Tcl? I mean somehting like a little table or some such?

[19:28] <melezhik> msiism what are you using Tcl for?

[19:29] *** Doc_Holliwood joined
[19:29] <El_Che> you'll have more luck with Perl comparison

[19:29] <El_Che> s

[19:29] <[Coke]> I don't think anyone has done that comparision, but tcl is better for embedding.

[19:30] <El_Che> nice

[19:31] <msiism> Currently I'm writing a find(1) wrapper. A while back I created a "run dialog" with Tcl/Tk. (That thing that you (used to) get when typing Alt+F2 in Linux desktop environments to start programs by typing a command.) I'm not working in the embedded field.

[19:31] <melezhik> my tcl associations is command line / desktop automation utilities ... this is why I am asking ... If we compare by this domain you might be interested in Sparrow which is written on Raku 

[19:32] <melezhik> sparrowhub.io/ .... but it does not do any desktop / GUI things

[19:32] <El_Che> there isn't something as integrated as Tcl/Tk

[19:32] <melezhik> however I can think about having Sparrow plugins that Tcl scripts and so on ...

[19:33] <msiism> Hm… I think I'm really just looking for a general-purpose programming language, one that does have some sort of usable bindings to a few GUI libraries, if possible.

[19:33] <El_Che> msiism: there are gtk bindings

[19:33] <msiism> Okay, well, there's probably a list of all current such bindings for Raku. So I can look that up.

[19:33] <El_Che> but GUI is problematic even with more popular languaes like perl, go or java

[19:34] <melezhik> yeah ...

[19:34] <moon-child> java has good gui.  perl and go, not so much

[19:34] <msiism> I don't know that. What's the reason, in general?

[19:34] <msiism> I mean for GUI being problematic.

[19:35] <El_Che> msiism: native look and feel is hard

[19:35] <El_Che> java has a *terrible* UI native wise

[19:36] <msiism> El_Che: Okay, my target platform is solely Unix. I should have mentioned that earlier.

[19:37] <msiism> And by Unix I mean Linux/BSD/illumos.

[19:38] * [Coke] wonders if a rakuTk binding would be used.

[19:38] <El_Che> msiism: https://modules.raku.org/search/?q=gtk

[19:39] <msiism> Thanks, I'll look into that.

[19:40] <msiism> Maybe it's best for me to put together a set of specific questions I have about Raku and then go hunting for answers in the documentation. (Or ask here if I can't find any.)

[19:41] <msiism> [Coke]: I've just learned there is P6TK.

[19:41] <[Coke]> msiism: ah, nifty.

[19:45] <codesections> Hmm, this feels very basic, but apparently I don't understand what "package scope" means.  Why doesn't this work? 

[19:45] <codesections> m: for <1 2> { our $bar = 42 }; say $bar

[19:45] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$bar' is not declared␤at <tmp>:1␤------> 3for <1 2> { our $bar = 42 }; say 7⏏5$bar␤»

[19:58] *** sena_kun joined
[20:00] *** Altai-man left
[20:02] *** lucasb left
[20:02] <CIAvash> https://docs.raku.org/syntax/our

[20:05] * [Coke] wonders what the default package is.

[20:06] <[Coke]> codesections: that our is still scoped to the block it's in, I think.

[20:06] <[Coke]> and it's all in the same package anyway (the default one), so the alias you get in the symbol table isn't really doing anything for you in that snippet.

[20:07] <codesections> [Coke]: agreed.  But isn't that just lexical scoping?  What's it doing that `my` doesn't?  

[20:08] <codesections> Is my/our just irrelevant to non-module scopes?

[20:09] <[Coke]> per the docs, adding an alias to the symbol table, so you can look it up in the package.

[20:10] <melezhik> .tell tony-o I've found one issue with fez - https://github.com/tony-o/raku-fez/issues/9

[20:11] <tellable6> melezhik, I'll pass your message to tony-o

[20:11] <[Coke]> m: package foo { our $bar = 3; my $baz = 4; }; say $foo::bar; say $foo::baz;

[20:11] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «3␤(Any)␤»

[20:11] <[Coke]> even if you refer to $foo::baz in that block, you get the Any (because there's no alias)

[20:12] <codesections> m: for <1 2> { our $bar = 42 }; say $::bar

[20:12] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$bar' is not declared␤at <tmp>:1␤------> 3for <1 2> { our $bar = 42 }; say 7⏏5$::bar␤»

[20:12] <[Coke]> m: package foo { our $bar = 3; my $baz = 4; dd $bar, $baz, $foo::bar, $foo::baz}; say $foo::bar; say $foo::baz;

[20:12] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Int $bar = 3␤3␤(Any)␤Int $baz = 4␤Int $bar = 3␤Any element{'$baz'} = Any␤»

[20:12] <[Coke]> m: package foo { our $bar = 3; my $baz = 4; dd $bar, $baz, $foo::bar, $foo::baz}; dd $foo::bar, $foo::baz; # all with dd

[20:12] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Int $bar = 3␤Int $baz = 4␤Int $bar = 3␤Any element{'$baz'} = Any␤Int $bar = 3␤Any element{'$baz'} = Any␤»

[20:13] <[Coke]> m: package foo { {our $bar = 3; my $baz = 4; } dd $bar, $baz, $foo::bar, $foo::baz}; dd $foo::bar, $foo::baz; # all with dd

[20:13] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3kage foo { {our $bar = 3; my $baz = 4; }7⏏5 dd $bar, $baz, $foo::bar, $foo::baz}; d␤    expecting any of:␤       …»

[20:13] <codesections> right.  I get all that; I just expected it to apply to other scopes

[20:13] <[Coke]> m: package foo { {our $bar = 3; my $baz = 4; }; dd $bar, $baz, $foo::bar, $foo::baz}; dd $foo::bar, $foo::baz; # all with dd

[20:13] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$bar' is not declared␤at <tmp>:1␤------> 3foo { {our $bar = 3; my $baz = 4; }; dd 7⏏5$bar, $baz, $foo::bar, $foo::baz}; dd $f␤»

[20:13] <[Coke]> m: package foo { {our $bar = 3; my $baz = 4; }; dd $foo::bar, $foo::baz}; dd $foo::bar, $foo::baz; # all with dd

[20:13] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «Int $bar = 3␤Any element{'$baz'} = Any␤Int $bar = 3␤Any element{'$baz'} = Any␤»

[20:13] <codesections> not just the ones declared with `package` or `module`.

[20:13] <msiism> So, if there's more than one way to do it, would I be able to write Raku largely without using the <thing>.<method> syntax, and instead use something looking like <method>(<thing> <more stuff following a generally defined scheme>)?

[20:14] <codesections> is that just wrong?

[20:14] <CIAvash> m: { our $test = 1 }; say $OUR::test

[20:14] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «1␤»

[20:14] <codesections> O.o

[20:15] <[Coke]> ah. CIAvash++ from the docs, "OUR" is current scope, not empty. :)

[20:15] <[Coke]> er, current package.

[20:15] <codesections> msiism: If I understand what you're asking, yes

[20:16] <[Coke]> m: for <1 2> { our $bar = 42 }; say $OUR::bar;

[20:16] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «42␤»

[20:17] <[Coke]> so, the variable in the block is lexical, but the our adds an alias to the package, and once you know where it is, you can find it.

[20:18] <msiism> codesections: Okay, that sounds interesting. I mean like split($str ':'); or some such instead of $str.split(':');

[20:18] <[Coke]> Many core routines are also methods on common objects, but that doesn't mean everything is.

[20:20] <[Coke]> e.g. .split is, but .succ isn't.

[20:21] <codesections> msiism: as [Coke] said, many are defined both ways, including .split.  So those work automatically.  For the others, you just need to mark the invocant with a :

[20:22] <msiism> codesections: Could you give a simple example of the latter?

[20:22] <codesections> m: say( succ('aa':))

[20:22] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «ab␤»

[20:23] <msiism> I see. Thanks.

[20:24] <codesections> (that's not the best example, since it just takes one arg.  But so many methods have been defined as functions as well that there aren't a ton of examples to pick from)

[20:25] <codesections> m: say polymod(120: 10) # slightly better 

[20:25] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(0 12)␤»

[20:26] <msiism> Okay, I get now what invocant means. Is an invocant not the same as an operand?

[20:28] <codesections> similar, but not quite the same.  Operands are for operators and there can be more than one. (e.g., in 1 + 2)

[20:29] <codesections> invocants are for methods, and there's always just one

[20:30] <msiism> Okay, but there are also unary operators, right? Would that be sort of the same then? I mean, if you think of methods and operators as just functions?

[20:31] * [Coke] hurls https://docs.raku.org/language/objects#index-entry-indirect_invocant_syntax

[20:31] <MasterDuke> in raku operators are just subs

[20:31] <msiism> [Coke]: Okay, having a look.

[20:31] <codesections> yeah.  I mean, since both are just functions, both operands and invocants are a type of argument 

[20:33] <Geth> ¦ problem-solving/solution-250: c38c72d1ff | Altai-man++ | solutions/documentation/search-categories.md

[20:33] <Geth> ¦ problem-solving/solution-250: Provide a solution document for https://github.com/Raku/problem-solving/issues/250

[20:33] <Geth> ¦ problem-solving/solution-250: 

[20:33] <Geth> ¦ problem-solving/solution-250: "Documentation search categories are not standartized"

[20:33] <Geth> ¦ problem-solving/solution-250: 

[20:33] <Geth> ¦ problem-solving/solution-250: Fixes https://github.com/Raku/problem-solving/issues/250

[20:33] <Geth> ¦ problem-solving/solution-250: review: https://github.com/Raku/problem-solving/commit/c38c72d1ff

[20:33] <MasterDuke> m: sub infix:<(|)>($a, $b) { say "$b )|( $a" }; 4 (|) "123";

[20:33] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «123 )|( 4␤»

[20:34] <msiism> So, is it always safe to put the ':' mark after the invocant, even for things like split? Or would I have to watch out for that?

[20:35] <[Coke]> if you use the invocant mark on split, you're calling a different routine.]

[20:36] <[Coke]> m: dd split "what the":, 't'

[20:36] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3dd split "what the":7⏏5, 't'␤    expecting any of:␤        colon pair␤»

[20:36] <codesections> it's always "safe", but might change the order of the arguments.

[20:36] <[Coke]> m: dd split("what the":, 't')

[20:36] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3dd split("what the":7⏏5, 't')␤    expecting any of:␤        c…»

[20:36] <codesections> m: dd split("what the": 't')

[20:36] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «("wha", " ", "he").Seq␤»

[20:37] <codesections> (the : replaces the ,)

[20:37] <[Coke]> ... thank you.

[20:37] <msiism> Okay, good to know.

[20:37] <MasterDuke> m: class Foo { method bar($a) { say $a + 4 } }; my $b = Foo.new; bar($b: 3) # works for generic user-defined stuff too

[20:37] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «7␤»

[20:39] <codesections> yep.  And you can go the other way (call a sub as a method by having .& instead of just . )

[20:42] *** melezhik left
[20:43] <msiism> codesections: How did split("what the": 't') change the order of arguments, though? I didn't really get what you meant by that.

[20:49] <codesections> sorry, I'd stepped away.  I just meant that they might expect arguments in different order.  https://docs.raku.org/routine/split

[20:49] <msiism> Okay, thanks.

[20:50] <codesections> m: split('	', "the quick brown fox" )

[20:50] <camelia> rakudo-moar 4d40e23e0: ( no output )

[20:50] <codesections> m: say split(' ', "the quick brown fox" )

[20:50] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(the quick brown fox)␤»

[20:50] <codesections> m: say split("the quick brown fox": " " )

[20:50] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(the quick brown fox)␤»

[20:51] <msiism> I see.

[20:51] <msiism> This is all pretty nice. :)

[20:59] *** hankache joined
[20:59] <hankache> hello #raku

[21:00] *** wamba left
[21:06] <sortiz> \o hankache 

[21:07] <cog> o/ hankache, I hope things are better in Beyrouth

[21:10] *** eax joined
[21:13] <hankache> hi sortiz

[21:13] <hankache> hi cog. How are you? Long time no speak. Things are not that great but getting better.

[21:14] <cog> I hope 2021 will be better for everyone

[21:15] <hankache> hopefully

[21:23] <hankache> what's the technical difference between zef uninstall X and zef nuke X?

[21:37] *** eax left
[21:46] *** msiism left
[22:13] *** dwarring left
[22:14] *** sena_kun left
[22:16] *** notagoodidea joined
[22:24] *** hankache left
[22:26] *** melezhik joined
[22:27] <melezhik> I've create my very first Sparrow plugin written on golang -:) - https://github.com/melezhik/sparrow-plugins/tree/master/sparky-db

[22:28] <melezhik> I find "sparrowgo" is really attractive name for anything Sparrow/Go related ... ha-ha . I like how the word sounds ...

[22:29] <El_Che> melezhik: you forgot to "go fmt" :)

[22:29] <melezhik> the thing is you can create all-dependecies-included go utulities and run it using Sparrow/raku  ..

[22:29] <melezhik> El_Che bear with me :-)  , this is probably my very first go program ... though written in Sparrow way . ha-ha!

[22:30] <melezhik> once I make it a plugin you can run it as `s6 --plg-run sparky-db` or even now on my mac `cd sparky-db && s6 --task-run .`

[22:30] <El_Che> melezhik: you should take some code out of main and put it in an other function

[22:31] <El_Che> why go?

[22:31] <melezhik> El_Che why?

[22:31] <El_Che> go users are very anal on short func length

[22:31] <El_Che> and separarion of duties

[22:31] <melezhik> El_Che just for the sake it's self-contained all dependencies in binary, you don't need any sqlite bindings

[22:32] <El_Che> if selfcontained is the objective maybe vendoring is an option

[22:32] <melezhik> "go users are very anal on short func length" - I don't that care, this is not for go users ...

[22:32] *** ajdplaysalto joined
[22:32] <El_Che> don't you see how anal I am with my comments :)

[22:32] <melezhik> this is for Sparrow users, that will either run it as `s6` or as Raku function using Sparrow6::DSL

[22:33] <melezhik> El_Che  ))) I am a head to kill as well ha-ha ,

[22:34] <melezhik> btw , what do you mean by "vendoring is an option"?

[22:34] <El_Che> go mod vendor

[22:34] *** ajdplaysalto left
[22:34] <El_Che> you get the libs in a vendor directory in the source repo

[22:34] <El_Che> so you can build without Internet

[22:35] <melezhik> more or less the same idea - use go so not bother with dependencies on target host 

[22:35] <melezhik> but still in high-level run is as Raku function or s6 cli thing

[22:36] <El_Che> melezhik: https://golang.org/ref/mod#vendoring

[22:36] <melezhik> in that case it will work without even need of any DB::SQLite

[22:36] <melezhik> El_Che++

[22:37] <El_Che> with recent go versions vendoring is less important because google provides now a write-once module proxy

[22:37] <El_Che> so you get the reprodubility without the need of vendoring

[22:37] <melezhik> ok, I see. I will test it and see how it goes, thanks for info

[22:38] <El_Che> but, like I said,  if you need to build without internet, vendoring is a good way to include all the dependencies

[22:38] <El_Che> I don't know how the binary will be created or retrieved

[22:39] <El_Che> will it be compiles on a client machine? will it be downloaded from github? will it be packaged?

[22:39] <El_Che> depending on the answer you'll get a different answer

[22:39] <El_Che> but big plus for using modules

[22:39] <El_Che> even for a small program

[22:43] <melezhik> sorry, I thought that the whole idea behind distribution of go programs -- is you build them once and you don't build anything on target machine

[22:43] <melezhik> all the dependencies are already included statically in binary file 

[22:44] <El_Che> yes, of course

[22:44] <El_Che> (as long you don't have C dependencies)

[22:46] <melezhik> yes I am aware ...

[22:47] <melezhik> and here the case with https://github.com/melezhik/sparrow-plugins/blob/master/sparky-db/go.mod#L5 - it's pure go implementation for sqlite3

[22:47] <melezhik> at least I expect that ... ))

[22:47] <El_Che> it is

[22:48] <melezhik> yeah, so the idea is to use pure go things to avoid hassle with dependencies on target server ... it's all of course at coast of coding on go some things ...

[22:48] <melezhik> but Sparrow already take cares about many others - like input parameters handling and configuration

[22:49] <melezhik> for example like here - https://github.com/melezhik/sparrow-plugins/blob/master/sparky-db/task.bash

[22:56] <melezhik> coast -> cost 

[22:57] *** gordonfish joined
[22:58] *** brtastic left
[23:12] *** bazzaar left
[23:15] *** tobs joined
[23:15] <notagoodidea> Is there another way to check if a substring appears in an array of string than :

[23:16] <notagoodidea> m: my @foo = ["foo bar", "baz lala"]; .say if $_ ~~ /foo/ for @foo;

[23:16] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «foo bar␤»

[23:19] <codesections> m: my @foo = ["foo bar", "baz lala"]; say @foo.grep: /foo/

[23:19] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «(foo bar)␤»

[23:19] <codesections> same basic idea, but slightly more readable, imo

[23:24] <notagoodidea> agreed, thanks! 

[23:26] <sortiz> m: ["foo bar", "baz lala"].first(/foo/).Bool.say; #Ready for your "if"

[23:26] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «True␤»

[23:27] <sortiz> m: ["foo bar", "baz lala"].first(/gol/).Bool.say;

[23:27] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «False␤»

[23:28] <notagoodidea> first only try on the first item of the array no?

[23:30] <sortiz> Nop, returns the first match if any or nil

[23:31] <notagoodidea> m: ["foo bar", "baz lala"].first(/baz/).Bool.say;

[23:31] <camelia> rakudo-moar 4d40e23e0: OUTPUT: «True␤»

[23:31] <sortiz> So, I you only want to check if the substring appears, it stop early

[23:47] <notagoodidea> That answered another question, I had :D

[23:50] <melezhik> El_Che here is the final implementation of the idea, if you're interested - http://sparrowhub.io/plugin/sparky-db/0.000001

[23:51] <melezhik> .tell tib I've create a simple Sparrow plugin tom list sparky builds, it's built on go and does not require any dependencies . It's very simple but illustrate the idea - http://sparrowhub.io/plugin/sparky-db/0.000001 

[23:51] <tellable6> melezhik, I'll pass your message to tib

[23:55] *** Doc_Holliwood left
[23:58] *** melezhik left
[23:59] *** Xliff joined
