[00:00] *** Doc_Holliwood left
[00:00] *** TempIRCLogger joined
[00:00] *** Doc_Holliwood joined
[00:00] *** discord-raku-bot joined
[00:00] *** Summer joined
[00:00] *** Maylay joined
[00:00] *** timo joined
[00:00] *** unixcat64 joined
[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:11] *** jmcgnh joined
[00:27] *** Doc_Holliwood left
[00:41] <tbrowder> tonyo: thank you very much!
[00:41] <tellable6> 2021-09-03T15:45:56Z #raku <tonyo> tbrowder a PR would be great - i like the idea of using env vars to override defaults and leaving the defaults as is
[00:42] <tbrowder> .tell tonyo thanks, i'll work on the PR
[00:42] <tellable6> tbrowder, I'll pass your message to tonyo
[01:03] *** quotable6 joined
[01:04] *** melezhik left
[01:15] *** keutoi joined
[01:22] *** melezhik joined
[01:23] <melezhik> how can I catch exceptions withing cro routers?
[01:23] <melezhik> looks like things like CATCH do not work for me
[01:24] <melezhik> or try {} ... - https://github.com/melezhik/sparky/blob/cro/bin/sparky-web.raku#L291-L298
[01:25] <melezhik> an error is not cached and propagated to  cro itslef
[01:27] *** justsomeguy joined
[01:27] <melezhik> for example - https://gist.github.com/melezhik/73a4bc5418492094d11f65a3b78b6d65 , when broken yaml is rendered - https://github.com/melezhik/sparky/blob/cro/bin/sparky-web.raku#L291
[01:30] *** melezhik left
[01:42] *** justsomeguy left
[01:44] <ugexe> what does your catch example look like?
[01:48] <ugexe> raku -MCro::HTTP::Router -MCro::HTTP::Server -MYAMLish -e 'my $application = route { get -> { my %y; my $err; try { %y = load-yaml("asdf"); CATCH { default { $err = $_.Str; say "error:$err"; } } }; content "text/plain", $err } }; my Cro::Service $s = Cro::HTTP::Server.new: :host<localhost>, :port<10000>, :$application; $s.start; react whenever signal(SIGINT) { $s.stop; exit; }'
[01:49] <ugexe> it wasnt showing the error to the connecting client until i changed  `$err = $_` to `$err = $_.Str`
[01:50] <ugexe> might try $!.Str
[01:51] <ugexe> well i guess you already do that with "$!"
[01:56] <ugexe> raku -MCro::HTTP::Router -MCro::HTTP::Server -MYAMLish -e 'my $application = route { get -> { my %y; try { %y = load-yaml("!") }; content "text/plain", "$!" } }; my Cro::Service $s = Cro::HTTP::Server.new: :host<localhost>, :port<10000>, :$application; $s.start; react whenever signal(SIGINT) { $s.stop; exit; }'
[01:56] <ugexe> that works as expected for me
[02:02] *** skaji left
[02:02] *** skaji joined
[02:17] *** rakuUser left
[02:51] *** melezhik joined
[02:51] <melezhik> .
[02:52] <moon-child> ..
[02:53] <melezhik> ugexe thanks, could you try add cro template to your example?
[03:03] *** melezhik left
[04:03] *** quotable6 left
[04:03] *** notable6 left
[04:03] *** nativecallable6 left
[04:03] *** evalable6 left
[04:03] *** statisfiable6 left
[04:03] *** tellable6 left
[04:03] *** squashable6 left
[04:03] *** bloatable6 left
[04:03] *** greppable6 left
[04:03] *** unicodable6 left
[04:03] *** linkable6 left
[04:03] *** coverable6 left
[04:03] *** committable6 left
[04:03] *** benchable6 left
[04:03] *** sourceable6 left
[04:03] *** reportable6 left
[04:03] *** bisectable6 left
[04:03] *** releasable6 left
[04:03] *** shareable6 left
[04:04] *** evalable6 joined
[04:04] *** benchable6 joined
[04:05] *** committable6 joined
[04:05] *** coverable6 joined
[04:05] *** statisfiable6 joined
[04:05] *** linkable6 joined
[04:06] *** bloatable6 joined
[04:06] *** unicodable6 joined
[04:06] *** nativecallable6 joined
[04:06] *** tellable6 joined
[04:06] *** greppable6 joined
[04:06] *** releasable6 joined
[04:30] *** Doc_Holliwood joined
[05:00] *** keutoi left
[05:04] *** shareable6 joined
[05:07] *** reportable6 joined
[05:45] *** yjh joined
[05:50] *** yjh left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:04] *** notable6 joined
[06:05] *** bisectable6 joined
[06:06] *** squashable6 joined
[06:09] *** squashable6 left
[06:11] *** squashable6 joined
[06:32] *** Doc_Holliwood left
[07:14] *** keutoi joined
[07:27] *** holyghost joined
[07:31] *** frost joined
[07:42] <xinming> When I use $obj.raku to dump the object, What is the right way to load the data again?
[07:43] <xinming> trying to find data format which can exchange data which is like json, but also supports Capture in raku, failed, So sticking with the raku itself. :-)
[08:06] *** sourceable6 joined
[08:27] *** Sgeo left
[08:42] <keutoi> I'm not sure of any idomatic way to do it but, EVALFILE gives the result of the last expression in a file, so that might work.
[08:47] <xinming> well, I know the EVAL function, But I wish we can have some better way to handle it
[08:55] *** ufobat joined
[09:06] <keutoi> I think EVAL might be the only option. Most docs for the `raku` method just state: Returns an implementation-specific string that produces an equivalent object when given to EVAL.
[09:11] <holyghost> PHP has a vardump function
[09:12] <holyghost> which is non-meta info
[09:13] <holyghost> so vardump($v) in PHP ---> '2'
[09:14] <holyghost> in your browser to debug
[09:14] <holyghost> so mbe have a $obj.dump, #obj.dump-meta
[09:14] <holyghost> sorry let me rephrase that : $obj.dump, $obj.dump-meta
[09:15] <holyghost> meta info can be used as in a C++ exception (or other such languages)
[09:16] <holyghost> just given as an example
[09:18] <holyghost> exceptions are stack based, so can be th meta info. I don't know about raku exceptions though
[09:20] <holyghost> print, dump, eval
[09:20] <holyghost> or say
[09:23] <holyghost> intelligent stack-based meta info
[09:24] <holyghost> so your compiler fetches more information from its runtime
[09:27] <holyghost> It's just a C++ thing
[09:29] <holyghost> and maybe scheme/LISP for the eval functionality
[09:55] *** evalable6 left
[09:55] *** linkable6 left
[09:56] *** linkable6 joined
[10:10] <keutoi> Is rakudocs.github.io still being used?
[10:21] <raydiak> PHP doesn't have the concept of a Capture, so serializing it is a non-issue for them. that said, I'm personally not aware of any serialization formats which support Captures. though rolling your own might not be so bad, just an array and a hash would be a good start. several serialization formats in the ecosystem support arrays and hashes ofc. if you're looking for something in core, then yes you're left with
[10:21] <raydiak> only EVAL. .raku and .EVAL are meant to round-trip with each other
[10:22] <raydiak> though personally if I found myself tring to serialize Captures, in most cases I'd first stop and ask myself if my design ought to be rethought
[10:23] <holyghost> np, just feeding the features
[10:24] <tbrowder> .tell tonyo i'm confused. it looks like you have already implemented the env var, thank you very much!
[10:24] <tellable6> tbrowder, I'll pass your message to tonyo
[10:27] <tbrowder> ok, i see, you called my issue a feature request and completed it. thanks again!
[10:28] <raydiak> though it does bring up the idea of raku-centric serialization. a format which can round-trip all/most raku data structures without EVAL would be a pretty cool thing
[10:28] *** frost left
[10:30] <raydiak> though apparently "though" is my word of the day though :)
[10:38] *** jjido joined
[10:42] *** linkable6 left
[10:44] *** linkable6 joined
[10:55] *** evalable6 joined
[11:06] *** quotable6 joined
[11:08] *** lichtkind joined
[11:10] <lizmat> raydiak: a Raku version of Sereal maybe  :-)
[11:32] *** ufobat left
[11:33] <xinming> raydiak: Because it's cool to serialize Capture. :-)
[11:33] <xinming> jsonrpc has some forms of args passing, but it's not as powerful as Capture
[11:34] <xinming> If we can serialize capture, We can be more "specific" about what we want for the RPC.
[11:40] *** jjido left
[11:49] *** jjido joined
[12:02] *** reportable6 left
[12:36] *** Doc_Holliwood joined
[12:48] *** eseyman left
[13:05] *** reportable6 joined
[14:17] *** b2gills left
[14:18] *** b2gills joined
[14:45] <raydiak> lizmat: I haven't used Sereal, only have a vague recollection of some work with Storable close to 20 years ago...but from what I'm reading about Sereal, yes, some approximation of that
[14:47] <raydiak> xinming: I'm certainly not against such a thing existing and don't want to dissuade you, but imo an external API should usually be simple and language-agnostic...seems like this wouldn't be either of those things if I understand correctly?
[14:51] <raydiak> if Capture is specifically what you want, perhaps you could rip some relevant parts of the grammar straight out of the rakudo parser...
[14:58] *** eseyman joined
[15:01] *** monkey_ joined
[15:17] *** Doc_Holliwood left
[15:17] *** holyghost left
[15:45] *** jjido left
[15:50] *** jjido joined
[15:51] *** monkey_ left
[15:56] *** keutoi left
[16:04] *** xkr47 left
[16:04] *** xkr47 joined
[16:09] *** whatnext joined
[16:12] *** jrjsmrtn left
[16:14] *** jrjsmrtn joined
[16:36] <spacekookie> I'd be curious if people here have favourite programs written in Raku I could try first to see if my packaging tools work :)
[16:36] <spacekookie> It's gonna be more challenging (and useful) than my tiny scripts
[16:58] *** whatnext left
[17:03] <discord-raku-bot> <Anton Antonov#7232> I want like to write a Raku package that provides a grammar / parser for Mathematica aka Wolfram Language (WL). I am considering several package names: 1)  `Grammar::Mathematica`  2) `Mathematica::Grammar` 3) `WL::Grammar` 4) `Grammar::WolframLanguage` 5) `FoxyGoat`. Which one do you think it is bests?
[17:04] <discord-raku-bot> <Anton Antonov#7232> Looking at https://modules.raku.org/search/?q=Grammar I see both `Grammar::<name>` and `<name>::Grammar` to be equally represented.
[17:04] *** jjido left
[17:05] <raydiak> spacekookie: Not sure about "favorite" but you could try App::Pray. Still works last time I checked. Not popular or useful or anything, but it's fairly extensive and also has a few dependencies, so might be a decent test of packaging tools
[17:07] <raydiak> I haven't done serious work on it in years, so there's some anachronisms especially in the META6.json, but you're going to see that all over the ecosystem anyway. main thing off the top of my head that it wouldn't test is %?RESOURCES (they didn't exist when I wrote it)
[17:10] <spacekookie> Thanks! I'll have a look at it
[17:11] <spacekookie> I'm not very experienced with raku anyway, so it'll be a good thing to learn these things too. I'm currently mostly trying to improve the tooling in NixOS so I have a nicer time playing with the language down the road ;P
[17:13] <raydiak> that's a cool way to go about it, not just learning by doing but also paving the way at the same time
[17:16] <raydiak> Anton: my vote would be for Grammar:: instead of ::Grammar, unless you plan to develop a collection of related things which would be grouped together under Mathematica::
[17:20] <discord-raku-bot> <Anton Antonov#7232> @raydiak Thanks! And good point -- I have to decide do I want to implement "other things" under `Mathematica::`. I am undertaking this because I want to convert a bunch of unit tests from Mathematica to Raku. Hence, I might have additional `Mathematica::*`  packages / modules.
[17:22] *** neither joined
[17:27] <neither> hi, if I want to alias a method of a class, should I write another method and directly call the other one? e.g., `$obj.very-long-name` and `$obj.vln` where `method vln() { self.very-long-name}`? Or is this better done another way?
[17:27] *** Sgeo joined
[17:28] <moritz_> there are other methods, like installing it with a new name through the metaclass. Is that "better"? depends on what you optimize for
[17:28] <moritz_> m: class A { method x { say 42 } }; A.^add_method("y", A.^find_method("x")); A.y
[17:28] <camelia> rakudo-moar b451f89b6: OUTPUT: «42␤»
[17:29] <moritz_> ah, you should also throw in A.^compose(); after you are done introducing new methods (it works without it in this specifici case, but it's more robust to include it)
[17:39] <raydiak> Anton: sounds like a fun project. and you're welcome, of course
[17:44] <neither> Thank you moritz_, by better I meant conventional|idiomatic because I'm new to the language
[17:45] <neither> sorry for not being clear in the first place
[17:54] *** neither left
[17:54] <moritz_> neither: nothing easier to read than a method that calls another method
[17:54] <tellable6> moritz_, I'll pass your message to neither
[17:56] *** neither joined
[18:00] <raydiak> imma paste this because your connection flaked out for a minute and you missed it:
[18:00] <raydiak> 17:54:15    moritz_ | neither: nothing easier to read than a method that calls another method
[18:02] *** reportable6 left
[18:24] *** Doc_Holliwood joined
[18:25] <neither> Thanks
[18:25] <tellable6> 2021-09-04T17:54:16Z #raku <moritz_> neither: nothing easier to read than a method that calls another method
[18:36] <MasterDuke> neither: there's also https://raku.land/cpan:ELIZABETH/Method::Also
[18:46] *** monkey_ joined
[18:59] *** jjido joined
[19:04] *** reportable6 joined
[19:19] <neither> thank you MasterDuke, that's very readable
[19:36] *** Doc_Holliwood left
[19:40] *** monkey_ left
[20:18] *** monkey_ joined
[20:20] <discord-raku-bot> <klebs#2209> hi folks! am wondering about whether there is a way to (within a grammar rule) match a token and some suffix, without having the suffix appear when expanding the rule itself
[20:20] <discord-raku-bot> <klebs#2209> specifically, I have some rule for "numeric" values
[20:21] <discord-raku-bot> <klebs#2209> actually, it is a token
[20:21] <discord-raku-bot> <klebs#2209> ```raku
[20:21] <discord-raku-bot> <klebs#2209> token numeric-value {
[20:21] <discord-raku-bot> <klebs#2209>         [ '+' | '-' | '~' ]? <[ 0..9 ]>+ [ '.' <[ 0..9 ]>+ ]? [ 'e' <.numeric> ]?
[20:21] <discord-raku-bot> <klebs#2209>     }
[20:21] <discord-raku-bot> <klebs#2209>     token numeric-suffix {
[20:21] *** discord-raku-bot left
[20:22] <perryprog> pfft
[20:22] *** discord-raku-bot joined
[20:22] <discord-raku-bot> <klebs#2209> but then, as can be seen in "array-dimension" and "expression", my grammar currently uses <.numeric> to gobble numerics without regard for what is inside them
[20:22] <moon-child> @klebs, part of your message got cut off here, but I expect you want lookahead
[20:23] <discord-raku-bot> <klebs#2209> thanks @moon-child -- i think I *almost* want lookahead, but I want the parsing to gobble the lookahead somehow so it goes away later in the parsing
[20:24] *** xinming left
[20:24] <moon-child> oh.  In that case, just nest the token in another, and only look at the inner token
[20:25] <discord-raku-bot> <klebs#2209> in other words, i want numerics, when they are used as <.numeric> to always just return their <numeric-value> with *no* suffix
[20:25] *** Xliff joined
[20:25] <Xliff> \o
[20:25] * Xliff just purchased the parts for a new rig.
[20:25] <Xliff> Threadripper arrives in 10 days! :q
[20:25] *** xinming joined
[20:25] <moon-child> threadrippers are nice!
[20:26] <Xliff> moon-child: Have one?
[20:26] <Xliff> Will be my first AMD build...
[20:26] <discord-raku-bot> <klebs#2209> the trouble is,  I have a quite large codebase which unfortunately assumes everywhere that it can directly use numerics naked as they are
[20:26] <moon-child> Xliff: yea.  Work-provided, so I didn't have to foot the bill, too
[20:27] <Xliff> https://www.newegg.com/amd-ryzen-9-5950x/p/N82E16819113663?Item=N82E16819113663
[20:27] <discord-raku-bot> <klebs#2209> so doing that nesting would be a breaking change in perhaps many locations
[20:27] <discord-raku-bot> <klebs#2209> im looking for some way of hooking it somewhere so i can specify in one single place what i want to happen
[20:28] <discord-raku-bot> <klebs#2209> which is for something like "18.05f" to parse successfully as "numeric", but come back as "18.05" when we ask for <.numeric> within another rule
[20:28] <discord-raku-bot> <klebs#2209> is that possible?
[20:28] <Xliff> moon-child: Hah! Nice. Unfortunately, I have to take matters into my own hands.
[20:29] <discord-raku-bot> <klebs#2209> perhaps i could edit the match object somehow? unfamiliar with the nuances of this
[20:34] <discord-raku-bot> <klebs#2209> what about something like this? ```raku
[20:34] <discord-raku-bot> <klebs#2209> #!/usr/bin/env raku
[20:34] <discord-raku-bot> <klebs#2209> use v6;
[20:34] <discord-raku-bot> <klebs#2209> grammar Numerics {
[20:34] <discord-raku-bot> <klebs#2209>     rule TOP {
[20:34] <discord-raku-bot> <klebs#2209>         <.ws> <array-dimension>
[20:34] <discord-raku-bot> <klebs#2209>     }
[20:34] <discord-raku-bot> <klebs#2209>     token numeric-value {
[20:34] <discord-raku-bot> <klebs#2209>         [ '+' | '-' | '~' ]? <[ 0..9 ]>+ [ '.' <[ 0..9 ]>+ ]? [ 'e' <.numeric> ]?
[20:34] <discord-raku-bot> <klebs#2209>     }
[20:34] <discord-raku-bot> <klebs#2209>     token numeric-suffix {
[20:34] <discord-raku-bot> <klebs#2209>         | 'f'
[20:34] *** RandalSchwartz joined
[20:34] *** RandalSchwartz left
[20:34] <moritz_> please use a pastebin for code
[20:36] <discord-raku-bot> <klebs#2209> https://pastebin.com/raw/PZKtLesP
[20:38] <discord-raku-bot> <klebs#2209> oh, moritz!! I bought and read your book! thank you so much! I will remember to write you an amazon review 🙂
[20:38] <discord-raku-bot> <klebs#2209> it was great!
[20:38] <Xliff> m: my token numeric { <numeric-value> <numeric-suffix>? { $/ = $/<numeric-value>; say "edited: $/" }; }
[20:38] <camelia> rakudo-moar b451f89b6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at <tmp>:1␤------> 3 = $/<numeric-value>; say "edited: $/" }7⏏5; }␤    expecting any of:␤        horizontal whitespac…»
[20:38] <discord-raku-bot> <klebs#2209> super helpful to me
[20:38] <Xliff> m: my token numeric { <numeric-value> <numeric-suffix>? { $/ = $/<numeric-value>; say "edited: $/" } }
[20:38] <camelia> rakudo-moar b451f89b6: ( no output )
[20:38] <Xliff> m: my token numeric { <numeric-value> <numeric-suffix>? { $/ = $/<numeric-value>; say "edited: $/" } }; say "18.04" ~~ &numeric
[20:38] <camelia> rakudo-moar b451f89b6: OUTPUT: «No such method 'numeric-value' for invocant of type 'Match'␤  in regex numeric at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[20:39] <moritz_> assigning to $/ doesn't make much sense; using make() is better for extracting values and storing them in match objects
[20:39] *** neither left
[20:39] <Xliff> moritz: Would that code block be better served as <{ ... }>
[20:39] <Xliff> Or does it matter?
[20:40] <moritz_> <{ ... }> is when you want to change the regex behaviour; { ... } is for pure side effects
[20:40] <Xliff> Ah, thanks!
[20:41] <moritz_> to be precise, the regex engine interprets the result of <{ ... }> as a regex, and matches that
[20:41] <Xliff> Why am I getting "Messages Failed to Load" on Discord every time I try to use it?
[20:41] <discord-raku-bot> <klebs#2209> i basically want to insert some sort of shim, because I unfortunately use <.numeric> all over the place in the grammar (which is quite large by now)
[20:41] <discord-raku-bot> <klebs#2209> i want to gobble any numeric-suffix without ever passing it upstream
[20:41] <moritz_> maybe try to use )> then to limit the match object?
[20:42] <moritz_> m: say 'abc' ~~ /a )> ../
[20:42] <camelia> rakudo-moar b451f89b6: OUTPUT: «｢a｣␤»
[20:42] <moritz_> it matches the whole string, but only includes the a in the match object
[20:44] <discord-raku-bot> <klebs#2209> oh, that does seem to be what i am looking for -- however it doesn't seem to be working when I try it within the grammar
[20:45] <discord-raku-bot> <klebs#2209> in that same pastebin, when i insert it in between numeric-value and numeric-suffix
[20:45] <discord-raku-bot> <klebs#2209> token numeric { <numeric-value> )> <numeric-suffix>? }
[20:45] <moritz_> then I really recommend going with { make +$<numeric-value> } and using $/<numeric>.made
[20:46] <moritz_> shouldn't be too hard to find the usages with your editor's search function
[20:46] <Xliff> Can I get an invite for the raku discord, please?
[20:48] <discord-raku-bot> <klebs#2209> <@742445366489645080> it is here:  https://www.raku.org/community/
[20:48] <discord-raku-bot> <klebs#2209> @moritz_ I am wondering why )> works for the example you gave but not within the grammar I have
[20:49] <discord-raku-bot> <klebs#2209> ie, https://pastebin.com/raw/2Ni0f5qR
[20:50] <moritz_> probably because the rest of the regex engine also thinks that the regex has only consumed the numeric part, not the letter after it
[20:51] <discord-raku-bot> <klebs#2209> i see
[20:52] <discord-raku-bot> <klebs#2209> is that a bug? that seems the same as lookahead, no?
[20:57] <moritz_> I don't know if it's a bug or a feature. Could go either way.
[20:58] <discord-raku-bot> <klebs#2209> fair enough 🙂
[20:58] <discord-raku-bot> <klebs#2209> that is a useful trick i didn't know though (at least for individual matches)
[20:58] <discord-raku-bot> <klebs#2209> thanks!
[20:58] <moritz_> you're welcome
[20:58] <discord-raku-bot> <klebs#2209> your book was great 🙂
[20:59] <moritz_> thanks :D
[20:59] <moritz_> always happy about ratings on amazon... (hint, hint) :-)
[20:59] <discord-raku-bot> <klebs#2209> i will write you a glowing review for sure!
[21:00] <moritz_> thanks :D
[21:01] <discord-raku-bot> <klebs#2209> what i liked about it the most was that it was basically 100% useful information, with an extraordinarily high ratio of information which was not obvious and unlocked higher usages of the skill itself
[21:03] <discord-raku-bot> <klebs#2209> in fact, i i might use that sentence in my review 🙂
[21:04] *** jjido left
[21:09] <discord-raku-bot> <klebs#2209> is there a way to edit the global match tree from within a { } block inside a token?
[21:24] <Xliff> m: %h = ( a => 1, b => 2, c => 3 ); my $a = 'a'; %h{$a}:exists.say
[21:24] <camelia> rakudo-moar b451f89b6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%h' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5%h = ( a => 1, b => 2, c => 3 ); my $a =␤»
[21:24] <Xliff> m: my %h = ( a => 1, b => 2, c => 3 ); my $a = 'a'; %h{$a}:exists.say
[21:24] <camelia> rakudo-moar b451f89b6: OUTPUT: «True␤»
[22:04] *** evalable6 left
[22:04] *** linkable6 left
[22:05] *** linkable6 joined
[22:55] *** jast joined
[22:57] *** monkey_ left
[22:59] *** xinming left
[22:59] *** xinming joined
[23:06] *** evalable6 joined
[23:10] *** lichtkind left
