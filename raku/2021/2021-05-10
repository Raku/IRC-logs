[00:00] <oddp> calling foo('12') for this recurses endlessly: multi sub foo($x) { foo($x) }; multi sub foo(Int $x) { $x };

[00:00] <oddp> back to 'where /\d+/' it is i guess

[00:02] *** reportable6 left
[00:02] *** reportable6 joined
[00:04] <moon-child> I wonder if multi sub foo(Int() $x) would work

[00:05] <moon-child> m: multi sub foo($x) { say 1 }; multi sub foo(Int() $x) { say 2 }; say foo '5';

[00:05] <camelia> rakudo-moar 8d37210ee: OUTPUT: ¬´Ambiguous call to 'foo(Str)'; these signatures all match:‚ê§  ($x)‚ê§  (Int(Any) $x)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:05] <moon-child> nope

[00:15] *** rindolf joined
[00:16] <ugexe> multi sub foo($x) { foo($x) };

[00:16] <ugexe> where could this dispatch to with foo("12")?

[00:18] <ugexe> you could use `multi sub foo($x) { nextwith($x) };` but again... what would it dispatch to when the only other candidate requires Int (12) not Str ("12")?

[00:50] <oddp> man, just realized that your example from above works with <1 0> because that produces a IntStr list where as i am using regular str lists

[00:51] *** lucasb left
[00:52] <oddp> well, well, sorry for wasting everyone's time, but i guess i better stick to ruby for now. my brain simply hasn't enough folds for raku

[00:55] *** oddp left
[00:55] <moon-child> eh ruby doesn't even have multiple dispatch, does it? :P

[00:55] <moon-child> could just avoid multis

[01:37] *** |Sno| joined
[01:37] *** db48x left
[01:38] *** [Sno] left
[01:39] *** kvw_5_ joined
[01:42] *** kvw_5 left
[02:02] *** frost-lab joined
[02:29] *** dataange` left
[02:34] *** clarjon1 left
[03:16] *** parv joined
[04:16] *** bisectable6 left
[04:16] *** bloatable6 left
[04:16] *** statisfiable6 left
[04:16] *** unicodable6 left
[04:16] *** benchable6 left
[04:16] *** shareable6 left
[04:16] *** committable6 left
[04:16] *** squashable6 left
[04:16] *** coverable6 left
[04:16] *** greppable6 left
[04:16] *** notable6 left
[04:16] *** releasable6 left
[04:16] *** linkable6 left
[04:16] *** quotable6 left
[04:16] *** tellable6 left
[04:16] *** sourceable6 left
[04:16] *** reportable6 left
[04:16] *** nativecallable6 left
[04:16] *** evalable6 left
[04:16] *** bloatable6 joined
[04:17] *** bisectable6 joined
[04:17] *** benchable6 joined
[04:17] *** evalable6 joined
[04:17] *** squashable6 joined
[04:17] *** unicodable6 joined
[04:17] *** tellable6 joined
[04:17] *** quotable6 joined
[04:18] *** committable6 joined
[04:18] *** releasable6 joined
[04:18] *** greppable6 joined
[04:18] *** notable6 joined
[04:18] *** sourceable6 joined
[04:18] *** shareable6 joined
[04:18] *** statisfiable6 joined
[04:19] *** reportable6 joined
[04:19] *** coverable6 joined
[04:19] *** nativecallable6 joined
[04:19] *** linkable6 joined
[04:51] *** pounce_ is now known as pounce

[05:34] *** parabolize left
[05:45] *** neshpion left
[06:01] *** reportable6 left
[06:03] *** reportable6 joined
[06:30] *** Sgeo_ left
[06:38] *** ufobat_ joined
[06:39] *** domidumont joined
[06:39] *** dogbert17 left
[06:41] *** dogbert17 joined
[06:44] *** dogbert11 joined
[06:45] *** mtsd joined
[06:46] *** abraxxa1 joined
[06:47] *** dogbert17 left
[06:51] *** abraxxa1 left
[06:51] *** abraxxa1 joined
[06:53] *** squashable6 left
[06:54] *** brtastic joined
[06:55] *** pat_js left
[06:57] *** squashable6 joined
[07:11] *** mtsd left
[07:17] *** brtastic left
[07:18] *** brtastic joined
[07:27] *** ufobat joined
[07:29] *** epony left
[07:52] *** wamba joined
[07:54] *** dakkar joined
[08:11] *** DiffieHellman left
[08:12] *** DiffieHellman joined
[08:18] *** pecastro joined
[08:35] *** aindilis left
[08:35] *** aindilis joined
[08:45] *** brtastic left
[08:49] *** brtastic joined
[08:51] *** rindolf left
[08:55] *** Altai-man_ left
[08:57] *** sena_kun joined
[09:09] *** epony joined
[09:11] *** dogbert17 joined
[09:15] *** dogbert11 left
[09:16] *** |oLa| joined
[09:18] *** |oLa| left
[09:28] *** brtastic left
[09:28] *** brtastic joined
[09:55] *** wamba left
[09:58] *** wamba joined
[10:01] *** |oLa| joined
[10:04] *** |oLa| left
[10:17] *** dogbert11 joined
[10:19] *** squashable6 left
[10:20] *** squashable6 joined
[10:20] *** dogbert17 left
[10:25] *** dogbert17 joined
[10:28] *** dogbert11 left
[10:41] *** |oLa| joined
[10:42] *** |oLa| left
[10:48] *** rindolf joined
[11:02] *** MasterDuke joined
[11:07] *** dogbert17 left
[11:07] *** dogbert17 joined
[11:31] <Geth> ¬¶ doc: 4cb25dbd56 | (Suman Khanal)++ (committed using GitHub Web editor) | doc/Language/py-nutshell.pod6

[11:31] <Geth> ¬¶ doc: Example in raku not working as expected

[11:31] <Geth> ¬¶ doc: 

[11:31] <Geth> ¬¶ doc: The last example 

[11:31] <Geth> ¬¶ doc: 

[11:31] <Geth> ¬¶ doc: ```

[11:31] <Geth> ¬¶ doc:     my $list1 = (1, "two", 3, "hat");

[11:31] <Geth> ¬¶ doc:     my $list2 = (5, 6, "seven");

[11:31] <linkable6> Link: https://docs.raku.org/language/py-nutshell

[11:31] <Geth> ¬¶ doc: <‚Ä¶commit message has 22 more lines‚Ä¶>

[11:31] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/4cb25dbd56

[11:42] <Altreus> Was there any further discussion on my ancient question about why we have "multi" when its omission unnecessarily restricts extension?

[11:43] <Altreus> Can it not be inferred/

[11:44] *** MasterDuke left
[11:44] *** MasterDuke joined
[11:46] <moritz> requiring "multi" allows to catch accidental re-definition of only subs

[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:19] <Altreus> then why not require only instead?

[12:20] <Altreus> it also prevents you from intentionally re-defining subs that were not set up to do so

[12:20] <Altreus> Which is a problem when you don't own the original

[12:21] <Altreus> Adding another option for a procedure is good design, in my opinion, and should be encouraged

[12:21] <Altreus> Therefore, preventing it by default is bad

[12:21] <Altreus> multi should be the default

[12:25] <codesections> Altreus: IMO, there's a bit of a library/application distinction.  When writing _library_ code, I agree that it's best to default to multi for the reasons you say.  But in end-user code (esp. scripts) it seems like "only" is a good default (it simplifies the mental model and restricting extension is less of an issue)

[12:26] <codesections> and since library authors tend to be more experienced, I'm ok with having the literal default be the one that fits application code, and asking library authors to opt in

[12:27] <moritz> also, only subs are easier to learn for the beginner

[12:27] <codesections> (esp. since `multi f` is only slightly longer than `sub f` -- though that doesn't apply to methods)

[12:28] <codesections> moritz: yeah, that's a more direct way of putting what I meant by "it simplifies the mental model" :D

[12:42] <Altreus> So can you add a multi method to a subclass of a class that doesn't define the original as multi?

[12:42] <Altreus> Maybe you can override the multi-ness of the existing one?

[12:43] <Altreus> m: class A { sub a ($x) {} }; class B isa A { multi sub a ($x, $y) {} };

[12:43] <camelia> rakudo-moar 8d37210ee: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse class definition‚ê§at <tmp>:1‚ê§------> 3class A { sub a ($x) {} }; class B is7‚èè5a A { multi sub a ($x, $y) {} };‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª

[12:43] <Altreus> er

[12:43] <Altreus> m: class A { sub a ($x) {} }; class B is A { multi sub a ($x, $y) {} };

[12:43] <camelia> rakudo-moar 8d37210ee: ( no output )

[12:44] <Altreus> m: class A { sub a ($x) { say $x } }; class B is A { multi sub a ($x, $y) { say "$x ... $y"} }; my $b = B.new; $b.a("A"); $b.a("A", "B")

[12:44] <camelia> rakudo-moar 8d37210ee: OUTPUT: ¬´No such method 'a' for invocant of type 'B'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:44] <Altreus> m: class A { method a ($x) { say $x } }; class B is A { multi method a ($x, $y) { say "$x ... $y"} }; my $b = B.new; $b.a("A"); $b.a("A", "B")

[12:44] <camelia> rakudo-moar 8d37210ee: OUTPUT: ¬´Cannot resolve caller a(B:D: Str:D); none of these signatures match:‚ê§    (B: $x, $y, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:44] <Altreus> you what

[12:44] <codesections> you'd need to add a bit of code to re-dispatch to parent when it doesn't match

[12:45] <Altreus> OK then I object to that :)

[12:45] <Altreus> this is anti-DWIM

[12:45] <codesections> fair

[12:52] <Altreus> I'm happy it let me redefine it - I expected an error there

[12:52] <Altreus> Although the actual error is worse :D

[13:02] <lizmat> m: class A { method foo() { dd } }; class B is A { proto method foo(|) {*}; multi method foo() { dd; nextsame } }; B.foo

[13:02] <camelia> rakudo-moar 8d37210ee: OUTPUT: ¬´method foo(B: *%_)‚ê§¬ª

[13:02] <lizmat> you can use a proto

[13:03] <lizmat> however, the proto will prevent you from doing nextsame and friends

[13:03] <lizmat> Altreus: is that a problem ?

[13:03] <lizmat> if so, you could do something like;

[13:05] <lizmat> class A { method foo() { dd } }; class B is A { my constant &a = B.^find_method("foo");  proto method foo(|) {*}; multi method foo() { dd; a(self) } }; B.foo

[13:05] <evalable6> lizmat, rakudo-moar 8d37210ee: OUTPUT: ¬´method foo(B: *%_)‚ê§method foo(A: *%_)‚ê§¬ª

[13:06] <lizmat> aka, save the previous dispatch chain in a constant (at compile time) *before* the new proto is added

[13:06] <lizmat> and refer to that to go up the dispatch chain again

[13:06] <lizmat> hmmm...self.&a() instead of a(self) probably

[13:07] <codesections> and that foo method could be `multi method foo(|)` to come after all your own foos, right?

[13:08] <lizmat> if I understand your question correctly, yes :-)

[13:08] *** mowcat joined
[13:21] <Altreus> I dunno if that's a problem because I'm yak shaving

[13:21] <Altreus> But it does seem like a problem if someone provides a class and I have to jump through hoops to extend it

[13:21] <Altreus> Raku has enough gotchas

[13:22] <lizmat> well, most of them in the core have been fixed I think for the publicly accessible methods

[13:22] <lizmat> but please correct me if I'm wrong  :-)

[13:23] <Altreus> I was more thinking about community modules

[13:23] <Altreus> Everyone would have to make everything multi just in case

[13:23] <lizmat> in any case, I think this was a deliberate decision at one point by @Larry

[13:23] <lizmat> yeah, that's the consequence of this

[13:23] <Altreus> I wonder what the rationale is

[13:23] <lizmat> I wonder if newdisp / RakuAST would make changes to this more easy

[13:23] <Altreus> Because the outcome is heckin' inconvenient

[13:24] <codesections> yeah.  But my argument is that it's easier to have best practices for modules than user code

[13:24] <lizmat> moritz was around then, maybe he can shed some light

[13:25] <codesections> it feels like it's in the spirit of "torture the implementer", in that it puts a little extra burden on module authors to simplify things for end users

[13:25] *** parabolize joined
[13:26] <Altreus> Seems like a pull request engine to me

[13:26] <Altreus> Although with a workaround at least it's not showstopping

[13:27] <lizmat> also: with B.can("foo").head it's less meta-oppy

[13:27] <lizmat> instead of .^find_method

[13:30] <lizmat> afk for a few hours&

[13:30] <Geth> ¬¶ doc: sumanstats++ created pull request #3882: Fix tuple-like structure in Raku

[13:30] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3882

[13:30] *** frost-lab left
[13:46] *** dogbert17 left
[13:47] *** dogbert17 joined
[13:52] <Geth> ¬¶ doc: 1fe9282577 | (Suman Khanal)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/py-nutshell.pod6

[13:52] <Geth> ¬¶ doc: Fix tuple-like structure in Raku

[13:52] <Geth> ¬¶ doc: 

[13:52] <Geth> ¬¶ doc: Do a minimal change as suggested in https://github.com/Raku/doc/commit/4cb25dbd56256a67c36c479ad2649936b73da106

[13:52] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/1fe9282577

[13:52] <linkable6> Link: https://docs.raku.org/language/py-nutshell

[14:10] *** squashable6 left
[14:12] *** squashable6 joined
[14:17] *** DiffieHellman left
[14:18] *** DiffieHellman joined
[14:18] *** wamba left
[14:24] *** Sgeo joined
[14:32] *** dogbert17 left
[14:32] *** dogbert17 joined
[14:35] *** ufobat__ joined
[14:39] *** ufobat_ left
[14:39] *** ufobat left
[14:39] *** ufobat_ joined
[14:41] *** parv left
[14:43] *** antononcube joined
[14:45] <antononcube> HI! I asked this question yesterday, but got disconnected, so I do not know about any responses... I wonder should I use Math::Matrix or Math::Libgsl::LinearAlgebra. Has anyone used Math::Matrix for non-trivial matrix computation workflows?

[14:53] *** kini left
[14:57] *** brtastic left
[14:58] *** kini joined
[15:07] *** wamba joined
[15:14] *** antononcube left
[15:23] *** neshpion joined
[15:27] *** lucasb joined
[15:37] <codesections> I haven't, sorry (I know that's not helpful, but I wanted to make sure you know that we're not ignoring the question!)

[15:38] *** antononcube joined
[15:42] *** wamba left
[15:46] *** dogbert11 joined
[15:50] *** dogbert17 left
[15:53] *** neshpion_ joined
[15:55] *** neshpion left
[15:55] *** neshpion_ left
[15:56] <lizmat> antononcube: I think I would investigate using Math::Libgsl::LinearAlgebra girst

[15:56] *** neshpion_ joined
[15:56] <lizmat> *first

[15:56] *** neshpion_ is now known as neshpion

[16:03] *** antononcube left
[16:34] *** dakkar left
[17:00] *** finsternis left
[17:03] *** dogbert11 left
[17:04] *** dogbert11 joined
[17:08] *** domidumont left
[17:24] *** brtastic joined
[17:34] *** dogbert11 left
[17:35] *** dogbert11 joined
[17:42] *** dogbert11 left
[17:46] *** Kaiepi left
[17:46] *** Kaiepi joined
[17:46] *** dogbert11 joined
[17:48] *** dogbert17 joined
[17:50] *** |Sno| left
[17:51] *** dogbert11 left
[17:57] *** dogbert17 left
[17:58] *** rindolf left
[17:58] *** dogbert17 joined
[18:00] *** brtastic left
[18:02] *** reportable6 left
[18:04] *** ufobat_ left
[18:04] *** reportable6 joined
[18:04] *** ufobat__ left
[18:11] <lizmat> .

[18:23] *** ufobat__ joined
[18:23] *** ufobat_ joined
[18:26] *** dogbert11 joined
[18:28] *** dogbert17 left
[18:36] *** patrickb joined
[18:38] *** dogbert17 joined
[18:39] *** wamba joined
[18:40] <Geth> ¬¶ doc: 294096359d | Coke++ | doc/Language/py-nutshell.pod6

[18:40] <Geth> ¬¶ doc: whitespace

[18:40] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/294096359d

[18:40] <linkable6> Link: https://docs.raku.org/language/py-nutshell

[18:41] *** dogbert11 left
[18:53] *** aluaces left
[18:56] *** Kaiepi left
[18:56] *** Kaiepi joined
[19:02] *** brtastic joined
[19:03] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/05/10/2021-19-out-of-beta-pod/

[19:07] *** aluaces joined
[19:12] <eseyman> No!!!! Not another one!

[19:27] *** ufobat_ left
[19:27] *** ufobat__ left
[19:39] <patrickb> lizmat++

[19:54] *** |Sno| joined
[21:04] *** patrickb left
[21:15] *** parv joined
[21:16] *** neshpion left
[21:31] *** MasterDuke left
[21:32] *** MasterDuke joined
[21:42] *** abraxxa1 left
[21:48] *** abraxxa1 joined
[21:50] <Geth> ¬¶ doc: da1f28ba08 | (Stoned Elipot)++ | doc/Type/Num.pod6

[21:50] <Geth> ¬¶ doc: Use code formatting

[21:50] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/da1f28ba08

[21:50] <linkable6> Link: https://docs.raku.org/type/Num

[21:57] *** abraxxa1 left
[21:58] *** abraxxa1 joined
[22:21] *** abraxxa1 left
[22:21] *** wamba left
[22:22] *** brtastic left
[22:22] *** brtastic joined
[22:29] *** |Sno| left
[22:33] *** abraxxa1 joined
[22:37] *** abraxxa1 left
[22:38] *** abraxxa1 joined
[22:42] *** dogbert11 joined
[22:46] *** dogbert17 left
[22:54] *** pecastro left
[23:03] *** |Sno| joined
[23:11] *** brtastic left
[23:12] *** |Sno| left
[23:13] *** abraxxa1 left
[23:19] *** Kaiepi left
[23:20] *** Kaiepi joined
[23:23] *** b2gills left
[23:29] *** |Sno| joined
[23:44] *** b2gills joined
