[00:01] *** a3r0 joined
[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:09] *** lucerne left
[00:30] *** Tirifto left
[00:31] *** Tirifto joined
[00:39] *** lucerne joined
[00:46] *** Tirifto left
[00:47] *** Tirifto joined
[00:49] *** Eddward joined
[01:01] *** monkey_ joined
[01:24] *** Doc_Holliwood left
[01:27] *** Eddward_ joined
[01:30] *** Eddward left
[01:34] *** monkey_ left
[02:34] *** greppable6 left
[02:34] *** coverable6 left
[02:34] *** committable6 left
[02:34] *** reportable6 left
[02:34] *** sourceable6 left
[02:34] *** linkable6 left
[02:34] *** bloatable6 left
[02:34] *** benchable6 left
[02:34] *** evalable6 left
[02:34] *** quotable6 left
[02:34] *** nativecallable6 left
[02:34] *** squashable6 left
[02:34] *** bisectable6 left
[02:34] *** unicodable6 left
[02:34] *** shareable6 left
[02:34] *** releasable6 left
[02:34] *** statisfiable6 left
[02:34] *** tellable6 left
[02:34] *** notable6 left
[02:34] *** shareable6 joined
[02:34] *** linkable6 joined
[02:35] *** quotable6 joined
[02:35] *** bisectable6 joined
[02:35] *** releasable6 joined
[02:35] *** notable6 joined
[02:35] *** greppable6 joined
[02:35] *** bloatable6 joined
[02:35] *** tellable6 joined
[02:36] *** committable6 joined
[02:36] *** benchable6 joined
[02:36] *** reportable6 joined
[02:36] *** sourceable6 joined
[02:36] *** statisfiable6 joined
[02:37] *** squashable6 joined
[02:37] *** coverable6 joined
[02:37] *** unicodable6 joined
[02:37] *** nativecallable6 joined
[02:37] *** evalable6 joined
[02:37] *** utfntf98776 joined
[02:37] *** guest39843 joined
[02:55] *** guest39843 left
[03:41] *** jmcgnh left
[03:44] *** jmcgnh joined
[03:51] *** utfntf98776 left
[03:58] *** jmcgnh left
[04:00] *** Sgeo_ joined
[04:02] *** [dpk] joined
[04:02] *** Altai-man joined
[04:04] *** a3r0_ joined
[04:04] *** jmcgnh joined
[04:04] *** esh_ joined
[04:05] *** chronon_ joined
[04:09] *** unicodable6 left
[04:09] *** coverable6 left
[04:09] *** sourceable6 left
[04:09] *** committable6 left
[04:09] *** bloatable6 left
[04:09] *** notable6 left
[04:09] *** shareable6 left
[04:09] *** a3r0 left
[04:09] *** Sgeo left
[04:09] *** chronon left
[04:09] *** esh left
[04:09] *** sena_kun left
[04:09] *** dpk left
[04:10] *** lucerne left
[04:33] *** jmcgnh left
[04:36] *** jmcgnh joined
[04:59] *** lucerne joined
[04:59] *** notable6 joined
[04:59] *** unicodable6 joined
[04:59] *** sourceable6 joined
[04:59] *** committable6 joined
[05:00] *** bloatable6 joined
[05:00] *** coverable6 joined
[05:00] *** shareable6 joined
[05:41] *** jmcgnh left
[05:41] *** frost joined
[05:45] *** jmcgnh joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:07] *** Eddward_ left
[06:18] *** [dpk] is now known as dpk

[06:28] *** Doc_Holliwood joined
[06:31] *** abraxxa joined
[06:33] *** lucerne left
[06:34] *** abraxxa left
[06:37] *** abraxxa joined
[06:41] *** ufobat joined
[06:41] *** frost left
[06:44] *** abraxxa left
[06:45] *** abraxxa joined
[06:54] *** chronon_ left
[07:05] *** frost joined
[07:35] *** lucerne joined
[07:36] *** dakkar joined
[07:52] *** chronon joined
[07:58] *** lucerne left
[08:18] *** Doc_Holliwood left
[08:18] *** Sgeo_ left
[08:19] *** linkable6 left
[08:22] *** linkable6 joined
[09:09] *** simcop2387 left
[09:12] *** simcop2387 joined
[09:27] *** tejr left
[09:32] *** tejr joined
[10:32] *** linkable6 left
[10:32] *** evalable6 left
[10:33] *** linkable6 joined
[10:34] *** evalable6 joined
[11:06] *** Doc_Holliwood joined
[11:16] *** samebchase left
[11:16] *** samebchase joined
[11:18] *** holyghost joined
[11:29] *** razetime2 joined
[11:41] *** razetime2 left
[11:50] *** frost left
[11:57] *** Razetime joined
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:25] *** Razetime left
[12:32] *** sftp joined
[13:06] *** RandalSchwartz left
[13:09] *** RandalSchwartz joined
[13:35] *** rassoc joined
[13:37] <rassoc> What's the rational behind implementing the safe call operator in such a way that you can't chain them? Aren't we missing a Nil overload for cases like these? Any.?comb.?comb

[13:39] <rassoc> Ruby just returns nil for: nil&.chars&.digits

[13:40] <dakkar> looks like it's a `comb` issue…

[13:40] <dakkar> m: Any.?foo.?bar

[13:40] <camelia> rakudo-moar 8f6e41ea2: ( no output )

[13:41] <dakkar> m: Any.?foo.?comb

[13:41] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Use of Nil.comb coerced to empty string␤  in block <unit> at <tmp> line 1␤»

[13:41] <dakkar> m: Any.?comb.?comb

[13:41] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Use of Nil.comb coerced to empty string␤  in block <unit> at <tmp> line 1␤»

[13:42] <dakkar> (oh, I'm running an old raku…)

[13:42] <dakkar> rassoc: what did you expect to happen?

[13:43] <dakkar> m: say Any.?comb.?comb

[13:43] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Use of Nil.comb coerced to empty string␤␤  in block <unit> at <tmp> line 1␤»

[13:43] <dakkar> (I hope that's a warning…)

[13:43] <ugexe> m: say Any.?comb.WHAT; say Nil.comb;

[13:43] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Nil␤Use of Nil.comb coerced to empty string␤␤  in block <unit> at <tmp> line 1␤»

[13:43] <rassoc> Hm, might be the old compiler again, but i am seeing:

[13:43] <rassoc> Cannot resolve caller comb(Nil:U: ); none of these signatures match ...

[13:43] <dakkar> yep, 2021.02 here prints that error

[13:44] <dakkar> so yes, Nil.comb died, now warns

[13:46] <rassoc> alright, thanks!

[13:47] *** Tirifto_ joined
[13:49] *** Tirifto left
[13:58] <dakkar> (let's ignore that `.comb.comb` doesn't do anything useful…)

[13:58] <dakkar> m: say "'$_'" for 'abc'.comb.comb

[13:58] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «'a'␤' '␤'b'␤' '␤'c'␤»

[14:23] *** Doc_Holliwood left
[14:28] *** holyghost left
[14:43] *** Sgeo joined
[14:44] *** Doc_Holliwood joined
[14:48] *** just_testing joined
[14:49] *** just_testing left
[14:56] *** raydiak joined
[15:06] <raydiak> rba: I got to digging again, and it turns out that SSL error a few of us in the US get on the docs site, is a likely symptom of being blocked (in a rather bizarre way) by Comcast "Xfi Advanced Security". :P I know some affected users were on Cox, but it turns out that Cox licenses various tech from Comcast, so probably the same issue. Comcast has a web form specifically for this nonsense, so I sent them a

[15:06] <raydiak> (somewhat pointed) unblocking request. I'll let you know if/when it gets fixed or I hear anything back.

[15:07] <raydiak> From my searches, there appears to be a substantial number of random sites affected by this, it's nothing we actually did wrong afaik.

[15:09] <raydiak> In the mean time if anyone else asks you about it, tell them they can disable Xfi Advanced Security screwery from somewhere in their Xfinity account settings (according to what I read; I haven't tried it)

[15:24] *** Eddward_ joined
[15:31] <MasterDuke> fwiw, recently it's been blocked for me. Sky Broadband Shield thinks not suitable for teens or adults. i've emailed them saying it's a miss-categorization (and manually added it as allowed for my account), but i have no idea how long that request will take to process

[15:31] <MasterDuke> just docs.raku.org, raku.org itself is not blocked

[15:32] <Altreus> this censorship nonsense is taking the piss

[15:43] *** Doc_Holliwood left
[16:09] <El_Che> It's crazy how the country with the biggest IT industry is so backwards regarding technology

[16:20] *** gordonfish- is now known as gordonfish

[16:21] <lizmat> there's some politics involved as well, surely ?  :-)

[16:23] <El_Che> hoe the champions of free enterprise is the champion of monoploies

[16:23] <El_Che> monopolies

[16:24] <El_Che> Ok, i'll leave my self out :)

[16:43] <jdv> idk how that's "backwards".  i'd guess its a mix of politics and less regulated capitalism

[16:44] <El_Che> I see it more as hypocresy

[16:57] <guifa> is it safe to assume that an nqp method like nqp::islt_i($foo, $bar) will always handle an Int (assuming it's small enough for int)?  Or should we make sure to call nqp::unbox?  

[16:59] *** MoC joined
[17:03] <lizmat> this is really backend specific

[17:03] <lizmat> I'm 100% sure you don't need to do that for the MoarVM backend

[17:04] <lizmat> sorta 100% sure you don't need to do that on the JVM backend anymore (usev6++)

[17:04] <lizmat> for the JS backend: no idea...

[17:05] <lizmat> if the Int is not small enough, it *will* bomb, and not silently truncate

[17:10] <guifa> Alright.  So I'm probably overkilling by doing the unbox

[17:11] *** Tirifto_ left
[17:11] <lizmat> I usually don't bother anymore  :-)

[17:11] <dakkar> (usual plea to avoid as much as possible to use `nqp` in ecosystem modules… because `nqp` is not part of Rakudo)

[17:11] <guifa> dakkar: this isn't for a module :-) 

[17:12] <dakkar> then use all the nqp to your heart's content ☺

[17:12] <guifa> well, it is, but only for testing.  Then into core assuming RSC approves of my proposal

[17:13] <dakkar> it would be nice to have a way to mark modules as "rakudo" modules instad of "raku" modules, or something like that

[17:13] <dakkar> (also I notice I used the wrong name before, dammit)

[17:14] *** Tirifto joined
[17:16] *** dogbert17 joined
[17:17] <jdv> it would be nice if there wasn't a way to do that since a common retort is to "do it in a module first"

[17:18] <ugexe> "depends" : ["rakudo:from<bin>"]

[17:25] <dakkar> my thinking was to minimise the risk of rakudo/raku/nqp being like Perl/perl/xs, where a non-perl implementation of Perl is essentially not viable because a large part of CPAN depends on XS

[17:30] <lizmat> dakkar: I think that XS is the drug that keeps Perl from moving to a multi-processor world

[17:34] *** dakkar left
[17:41] <jdv> i'm not sure nqp and xs is a fair comparison, in more than one way

[17:44] <rjbs> XS is definitely a big ball and chain.

[17:50] <tbrowder> raydiak: nice debugging on the dns thing. any hope for cox users?

[17:53] <tbrowder> i'll try elevating the info you found to cox tech support (i'm not real optimistic)

[18:02] *** ufobat_ joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:05] *** ufobat left
[18:06] <demostanis[m]> `[*] grep { first * + any(@values) + $_ == 2020, @values }, @values

[18:06] <demostanis[m]> `

[18:06] <demostanis[m]> This code has been running since 3 minutes already

[18:07] <demostanis[m]> With 200 @values

[18:07] <demostanis[m]> https://adventofcode.com/2020/day/1/input

[18:07] <demostanis[m]> It works well with 4 values tho

[18:07] <demostanis[m]> Is my code just not optimized at all or is Raku just slow?

[18:08] *** MoC left
[18:09] <demostanis[m]> Oh my god it finally completed

[18:09] <demostanis[m]> It only took like 5 minutes.

[18:10] <codesections> demostanis[m]: a bit of both, I think.  Junctions are a particularly slow point as of yet (if I understand correctly )

[18:11] <demostanis[m]> Junctions are so great to use tho

[18:11] <codesections> yeah, agreed

[18:12] <codesections> https://github.com/codesections/advent-of-raku-2020 has a bunch of different Raku solutions for day 1, if you want to compare performance 

[18:15] <codesections> (Thinking through the time complexity of the code you posted, it does seem like a fairly un-optimized way to get there)

[18:15] *** codesect` joined
[18:18] *** codesections left
[18:25] *** codesect` left
[18:26] *** codesections joined
[18:29] <codesections> demostanis[m]: I got curious and decided to double check, and that solution is definitely O(n²), which explains a big chuck of the slowness.

[18:30] <codesections> m: my $i=0; my @v = 42 xx 5; [*] grep -> $a { @v.first({ $i++; $_ + any(@v) + $a == 2020})}, @v; say $i

[18:30] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Potential difficulties:␤    Useless use of [*] in sink context␤    at <tmp>:1␤    ------> 3my $i=0; my @v = 42 xx 5; 7⏏5[*] grep -> $a { @v.first({ $i++; $_ + a␤25␤»

[18:30] <codesections> m: my $i=0; my @v = 42 xx 10; [*] grep -> $a { @v.first({ $i++; $_ + any(@v) + $a == 2020})}, @v; say $i

[18:30] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Potential difficulties:␤    Useless use of [*] in sink context␤    at <tmp>:1␤    ------> 3my $i=0; my @v = 42 xx 10; 7⏏5[*] grep -> $a { @v.first({ $i++; $_ + a␤100␤»

[18:30] *** perryprog joined
[18:34] <codesections> m: note 1; #`(( a valid comment )) note 2

[18:34] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «1␤2␤»

[18:34] <codesections> m: note 1; #`(( a typo'ed comment ) note 2

[18:34] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Starter (( is immediately followed by a combining codepoint. Please use ( without a combining glyph ((( was at line 1)␤at <tmp>:1␤------> 3note 1; #`(( a typo'ed comment ) note 27⏏5<EOL>␤   …»

[18:34] <samebchase> lizmat: Happy Birthday!! 🎂

[18:34] <codesections> ^^^ that seems like a LTA error msg

[18:35] <codesections> Oh, is it Liz's birthday?  Happy birthday!

[18:35] *** MoC joined
[18:36] <codesections> (er, and I wasn't saying that "Happy Birthday!! 🎂" was a LTA error message.  Though, come to that, I can't really think of an error where that *would* be an awesome error msg!)

[18:36] *** Doc_Holliwood joined
[18:37] <perryprog> Happy birthday Liz, and hello #raku for the first time in a while!

[18:47] *** MoC left
[19:15] *** MoC joined
[19:17] *** sono joined
[19:24] <moritz> lizmat++

[19:35] <lizmat> thank you :-)

[19:36] <lizmat> PSA: due to this and other stuff happening, the Rakudo Weekly News will be published tomorrow

[19:54] <raydiak> oh, cool! happy birthday lizmat, I'm glad you were born :)

[19:59] <codesections> m: say (1, 2)».:<->

[19:59] <camelia> rakudo-moar 8f6e41ea2: OUTPUT: «Type check failed in binding to parameter '&code'; expected Callable but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[19:59] <raydiak> tbrowder: I read that cox leases some of its tech from comcast, and the very strange behavior is exactly the same for both. so I'm hoping they're pulling from the same block list such that if one unblocks it, it'll also be unblocked on the other.

[19:59] <codesections> is that a bug ^^^

[20:01] <tbrowder> raydiak: thnx!

[20:02] <raydiak> tbrowder: yw, happy to help! for now, you could try disabling what cox calls "advanced security", as mentioned at the end of this thread: https://forums.cox.com/forum_home/internet_forum/f/internet-forum/27241/what-is-safebrowse-io-and-how-do-i-get-rid-of-it/106753 . there's likely a web interface for it too if you don't have/want the app installed, probably the one at https://login.cox.com/ if I had to guess

[20:04] *** Doc_Holliwood left
[20:07] <tbrowder> ok, i don’t have the fancy panoramic wi-fi but that safebrowse sounds familiar from a deep dive when we all found we had similar dns probs. i think it was not on, but i’ll look again.

[20:08] <tbrowder> lizmat: Happy Birthday!

[20:09] *** Doc_Holliwood joined
[20:11] <raydiak> yeah I get that safebrowse.io page sometimes if I try taking out the s from the https. let me know if it works, I doubt my girlfriend remembers her password for me to try it myself :D I suspect it's all the same comcast stuff, just with rebranded wrappings. wikipedia mentioned that cox leased the xfinity x1 platform from comcast and sold it under their existing product name. I don't know what all "x1" is/means,

[20:12] <raydiak> or how much else they might have licensed that wasn't mentioned in that article, but since the behavior is identical and they're known to use comcast stuff, it seems probable

[20:14] *** Doc_Holliwood left
[20:16] *** Doc_Holliwood joined
[20:17] <bartolin_> lizmat++  # happy birthday

[20:18] <raydiak> tbrowder: also, if you want ideas for your message to cox, here's what I put in the comment box of comcast's unblock request form: https://gist.github.com/raydiak/c29ce56cd942a38851a9d695bc80f76a

[20:31] <demostanis[m]> Why can't I find a way to get a string slice in Rust? Or at least get char at index in some string?

[20:31] <demostanis[m]> Shit I wrote Rust instead of Raku lol

[20:32] <codesections> m: say "foobar".comb[3]

[20:32] <camelia> rakudo-moar 37dd25f68: OUTPUT: «b␤»

[20:32] <codesections> m: say "foobar".comb[3..5]

[20:32] <camelia> rakudo-moar 37dd25f68: OUTPUT: «(b a r)␤»

[20:32] <codesections> m: say "foobar".substr(3..5)

[20:32] <camelia> rakudo-moar 37dd25f68: OUTPUT: «bar␤»

[20:32] <demostanis[m]> Thanks

[20:33] <codesections> (depending on whether you want a Seq of chars or a Str)

[20:38] *** MoC left
[20:47] <raydiak> codesections: my vote would be yes, that is a bug. so far I can't find a solid irrefutable statement to cite from docs or anything, but I also don't see any reason it couldn't or shouldn't work. even if there were such a reason, at the very least the error is certainly LTA

[20:47] *** nirnam joined
[20:47] <codesections> raydiak++ I guess I'll open an issue :)

[20:53] *** bd3i joined
[20:53] <raydiak> codesections++ you're the one who found and reported it! I get karma for being more opinionated than educated? wfm :D

[20:53] <codesections> here's another maybe-bug, while I'm at it: 

[20:54] <raydiak> (didn't even remember .: was a thing, had to look it up)

[20:55] <rassoc> "had to look it up" -- where? search didn't help. also curious what that does

[20:56] <codesections> m: sub f(|c) { dd c }; sub g(|c) { f(1, |c)}; sub h(|c) { 1 [&f] |c}; say g(1); say h(1)

[20:56] <camelia> rakudo-moar 37dd25f68: OUTPUT: «\(1, 1)␤Nil␤Nil␤\(1, slip(1,))␤»

[20:56] <raydiak> rassoc: in the operators doc, under the language tab on the docs site: https://docs.rakulang.site/language/operators#methodop_.:%3Cprefix_operator%3E

[20:57] <codesections> shouldn't &g and &h be the same? (and both do what &g does?)

[20:57] <guifa> Ah, so it's really .:<>, rather than just .:  :-) 

[20:58] <rassoc> raydiak: thanks for that!

[20:58] <guifa> (or I guess you could do .:«» to add some extra arrows lol)

[20:58] <codesections> oh, there already is a bug for it.  Oops. https://github.com/rakudo/rakudo/issues/1592

[20:59] <raydiak> oh good, my poor brain was still digesting all the punctuation :)

[21:00] <codesections> oh, I meant for the first one (with :<-> )

[21:00] <rassoc> yeah, as a noob, [...].map: -* is way easier to parse than the above ;)

[21:00] <raydiak> ah, I'll keep digesting, then

[21:01] *** ufobat_ left
[21:01] <raydiak> (I'm sure the whole channel needs to hear about my digestion :D)

[21:01] <guifa> Got butterflies in your stomach?

[21:01] * guifa will see himself out

[21:01] <codesections> better than hearing about someones indigestion 

[21:03] <raydiak> well we haven't seen what my brain spits that out as on the other end yet

[21:06] <codesections> maybe I can clarify a bit: you can call a function &f with infix form: $a [&f] $b, which is supposed to be the same as f($a, $b  

[21:06] <raydiak> my first thought is that the difference is that a slip in a list (as in &g) will flatten into the surrounding list, but in &h the slip isn't in a list, syntactically speaking

[21:06] <codesections> S/f($a,b/f($a,$b)/

[21:07] <codesections> hmm, interesting 

[21:08] <codesections> I'm not sure if that means its not a bug, or if tells us where the bug is.  Isn't the slip still put into &f's argument list?

[21:10] <tbrowder>  raydiak: got the note. are you a lawyer? if not, you write like one ;-D

[21:10] <raydiak> tbrowder: no, but comcast doesn't have to know that :)

[21:10] <tbrowder> yepper!

[21:12] <raydiak> codesections: I'm not sure either. I'm looking it up, but I think | in an argument list to a function is a different syntax than | constructing a slip

[21:12] <codesections> sub f(|c) { dd c }; say 1 [&f] |(2); say f 1, |(2) # much simpler example

[21:12] <evalable6> codesections, rakudo-moar 37dd25f68: OUTPUT: «\(1, slip(2,))␤Nil␤Nil␤\(1, 2)␤»

[21:13] <guifa> codesections: I'm fairly certain what's happening is that the [&f] is scalarizing(ish) the two sides

[21:14] <codesections> raydiak: yeah, that's definitely right.  I guess the question is whether the syntax $a [&f] $b is supposed to treat $a, $b as an argument list

[21:15] <codesections> maybe it's not.

[21:15] <codesections> m: say 1 + |(99); say &infix:<+>(1, |(99))

[21:15] <camelia> rakudo-moar 37dd25f68: OUTPUT: «2␤100␤»

[21:16] <ugexe> using (2).Slip doesnt hit you with the 65535 argument limit like |(2) fwiw

[21:16] <ugexe> (or like (1..65536) rather)

[21:17] <codesections> what camelia just returned surprises me, but I guess is intended — or at least consistent 

[21:17] <ugexe> m: sub foo(*@_) { say @_.elems }; foo( (1..65536).Slip ); foo( |(1..65536) );

[21:17] <camelia> rakudo-moar 37dd25f68: OUTPUT: «65536␤Too many arguments (65536) in flattening array, only 65535 allowed.␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:17] <guifa> m: my $a := |(99); say &infix:<+>(1, $a) 

[21:17] <camelia> rakudo-moar 37dd25f68: OUTPUT: «2␤»

[21:20] <raydiak> codesections: I'm tending towards the idea that it's an entirely different syntax by design. the fact that | flattens into a capture, and that | constructs a slip, is just incidental. syntactically, operators don't have captures

[21:22] <raydiak> now you could make the argument that a slip ought to flatten into an argument list (semantically, not syntactically), but that's obviously not how it works now. I'm assuming that's intentional

[21:23] <codesections> so, the statement that $a + $b is syntactic sugar for infix:<+> $a, $b is not correct?

[21:24] <CIAvash> rakudo-bin 2021.06 for AUR is now available https://aur.archlinux.org/packages/rakudo-bin/

[21:24] <codesections> in that they're similar, but the second captures its arguments into an argument list, but the first doesn't?

[21:24] <codesections> CIAvash++

[21:26] <raydiak> m: sub f (|c) { dd c }; f 1.Slip; f |1; # |1 here is *not* making a Slip object, it's a syntactic construct

[21:26] <camelia> rakudo-moar 37dd25f68: OUTPUT: «\(slip(1,))␤\(1)␤»

[21:26] <guifa> codesections: I think it's more that the arguments are already bound, which prevents the slip expansion

[21:26] <guifa> sub f(|c) { dd c }; my $a := 1; my $b := |(2,3); f $a, $b;

[21:26] <evalable6> guifa, rakudo-moar 37dd25f68: OUTPUT: «\(1, slip(2, 3))␤»

[21:28] <guifa> in $a + $b, there's no list context where the slip would expand.  But it's easy enough to make that.  Same code, but with an extra assignment:

[21:28] <guifa> sub f(|c) { dd c }; my $a := 1; my $b := |(2,3); f $a, $b; my @c = $a, $b; dd @c;

[21:28] <evalable6> guifa, rakudo-moar 37dd25f68: OUTPUT: «\(1, slip(2, 3))␤Array @c = [1, 2, 3]␤»

[21:29] <codesections> guifa: so, the more technically accurate thing to say about $a + $b is that it's syntactic sugar for something like my $pos1 := $a; my $pos2 := $b; infix:<+> $pos1, $pos2 .  Am I following that correctly?

[21:31] <guifa> Eh, probably even more succinctly

[21:31] <guifa> m: sub f(|c) { dd c }; f( (1), (|(2,3)) );

[21:31] <camelia> rakudo-moar 37dd25f68: OUTPUT: «\(1, slip(2, 3))␤»

[21:32] <guifa> Just binding was a way to prevent the evaluation without the parentheses 

[21:32] <guifa> so you could say that $a + $b is sugar for infix:<+>( ($a), ($b) )

[21:36] <codesections> guifa: I agree that's an accurate description of the current behavior.  But I'm not sure it's intended.

[21:36] <codesections> > $y [&atan2] $x        # same as atan2($y, $x)

[21:36] <codesections>  https://design.raku.org/S03.html#Turning_a_binary_function_into_an_infix

[21:37] <codesections> (I know that's not Roast, but still)

[21:37] <ugexe> those design docs are from before the GLR

[21:38] <guifa> ugexe: it is, but I think what it says still holds true.  An infix operator pretty much by definition will have two (and exactly two) arguments.

[21:39] <guifa> (although IIRC chaining operators can be written to take more, but that's a bit different)

[21:41] <guifa> If you were to expand a slip, you'd be opening yourself up to potentially two or more arguments: 

[21:41] <guifa> sub f($a, $b) { dd $a, $b }; f 1, |(2,3);

[21:43] <codesections> which doesn't work in sub form.  But right now, that *does* work in [&f] form, which seems incorrect?

[21:44] <guifa> sure it works in sub form: 

[21:44] <guifa> sub f($a, $b) { dd $a, $b }; f (1), (|(2,3));

[21:44] <evalable6> guifa, rakudo-moar 37dd25f68: OUTPUT: «1␤$(slip(2, 3))␤»

[21:44] <codesections> well, yeah, *if* you wrap it like that :D

[21:45] <raydiak> imo, the main thing to understand is that the syntax inside an argument list is not entirely the same as the syntax outside of it, even though it mostly looks similar. doesn't matter that the things being written will get passed as args eventually, it matters whether it's written in an argument list or not. here's another example of something that looks the same but isn't:

[21:45] <raydiak> m: sub f (*@a, *%h) { (@a, %h).raku }; say f(a => 1) eq f("a" => 1); say (a => 1).raku eq ("a" => 1).raku

[21:45] <camelia> rakudo-moar 37dd25f68: OUTPUT: «False␤True␤»

[21:47] <codesections> m: sub f (*@a, *%h) { (@a, %h).raku }; say f(a => 1) eqv f("a" => 1); say (a => 1).raku eq ("a" => 1).raku

[21:47] <camelia> rakudo-moar 37dd25f68: OUTPUT: «False␤True␤»

[21:48] *** abraxxa left
[21:48] <raydiak> outside of an arg list, the quotes make no difference, it's the same Pair either way. inside, the syntactic rules are different, it's the difference between being taken as a named arg or a Pair as a positional arg

[21:49] <codesections> yeah, I get all that.  I just think that $a + $b ought to be a different syntax for constructing an argument list to &infix:<+>

[21:49] <guifa> codesections: I guess it just makes sense to me that by definition the left hand side is packaed up and passed as argument 0, and right side hand side is packaged up and passed as argument 1.  The parentheses just reinforce the packaging up aspect.

[21:49] * guifa is afk

[21:52] <raydiak> but then you couldn't have special syntax for arg lists, because the same rules would apply anywhere in any expression

[21:54] <codesections> raydiak: I don't know enough about Raku's compilation process to understand why that would follow.  Do you mind explaining? (I thought ops were basically a special case anyway)

[21:55] <codesections> if that's correct (and I'm not doubting it; I really don't know) then yeah, the current treatment of $a + $b has to be right

[21:57] *** nirnam left
[21:59] <raydiak> well you're saying all operators should have argument syntax. but the difference between ops and subs is exactly the syntax

[22:00] <raydiak> I'm trying to think up a good example to make this less abstract (but failing atm)

[22:01] <codesections> hmm.  I guess you've convinced me, even without one :D.  1 other question re: operators, though, while we're here:

[22:02] <codesections> m: my &f = {$^a ~ $^b}; say [[&f]] <a b c>;

[22:02] <camelia> rakudo-moar 37dd25f68: OUTPUT: «abc␤»

[22:02] <codesections>  m: ; say [[&{$^a ~ $^b}]] <a b c>;

[22:02] <camelia> rakudo-moar 37dd25f68: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3; say [[&{$^a ~ $^b}]] <a b c>7⏏5;␤    expecting any of:␤        prefix␤        term␤»

[22:03] <codesections> Is there a reason for the second version not to work?

[22:05] <raydiak> I didn't even know it allowed routine literals there :D where do you come up with this stuff?

[22:06] *** b2gills left
[22:06] <codesections> :D :D our docs are *really* good!  https://docs.raku.org/language/operators#Reduction_metaoperators

[22:06] *** b2gills joined
[22:07] <codesections> err, wait.

[22:07] <codesections> from the page I just linked: “The argument list is iterated without flattening. This means that you can pass a nested list to the reducing form of a list infix operator”

[22:08] <codesections> doh.  I guess *that* answers my earlier question!

[22:08] <codesections> oops

[22:09] <MasterDuke> does anyone here use the DUMP sub/method?

[22:09] <raydiak> I'm still not sure it allows that. I'm trying to figure out what it's attempting to parse as

[22:10] <codesections> (I mean, technically that's just talking about the reduction meta operator, but it's not too much of a stretch to say it apples to others)

[22:10] <raydiak> m: say [[&{ say $^a }]] 1 # doesn't seem to work

[22:10] <camelia> rakudo-moar 37dd25f68: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say [[&{ say $^a }]]7⏏5 1 # doesn't seem to work␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement en…»

[22:11] <codesections> MasterDuke: I haven't

[22:13] <japhb> MasterDuke: I worked on it, once upon a time.  But even I don't use it much anymore.  dd is usually enough.  Why do you ask?

[22:13] <MasterDuke> it's not it roast, greppable6 doesn't seem to see any instances of it in use. i'd say it's a candidate for removal

[22:13] <japhb> It was always a part of Rakudo, not Raku.

[22:13] <MasterDuke> yeah, not sure what it does that dd doesn't

[22:14] <codesections> m: say [[&{say $^a}]] <1 2>

[22:14] <camelia> rakudo-moar 37dd25f68: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say [[&{say $^a}]] <17⏏5 2>␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement…»

[22:14] <japhb> Show you whether there's a container around each element or not, and pretty-prints the structure.

[22:14] <codesections> m: say [[&{say $^a}]] <a b>

[22:14] <camelia> rakudo-moar 37dd25f68: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say [[&{say $^a}]] <a b>7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[22:14] <codesections> not sure why those two get different msgs, though 

[22:14] <japhb> s/element/node/

[22:15] <codesections> japhb: oh, I didn't realize it did pretty printing.  I might find that useful.  

[22:15] <MasterDuke> m: dd %*ENV; say DUMP %*ENV

[22:15] <camelia> rakudo-moar 37dd25f68: OUTPUT: «Hash element = {:HOME("/home/camelia"), :LC_CTYPE("en_US.UTF-8"), :LOGNAME("evalbot"), :MAIL("/var/mail/evalbot"), :PATH("/usr/bin:/bin:/usr/sbin:/sbin"), :SHELL("/bin/bash"), :SUDO_COMMAND("/home/camelia/rakudo-m-inst/bin/perl6-m --setting=RESTRICTED…»

[22:15] <MasterDuke> m: say DUMP %*ENV

[22:15] <camelia> rakudo-moar 37dd25f68: OUTPUT: «Hash<1>(␤    :$!descriptor(ContainerDescriptor::Untyped<2>(...)),␤    :$!storage(BOOTHash<3>(...))␤)␤»

[22:16] <japhb> MasterDuke: To be clear, I have *no* problem with just merging those capabilities with dd, or ripping it out into a module at this point.  It existed before dd, and was the best we had in core at the time.

[22:16] <ugexe> ive used it in the past for dumping ast and stuff i was making with Perl6::World / Perl6::Actions

[22:16] <japhb> Generally the high-level to low-level list has gist higher than dd higher than DUMP

[22:17] <MasterDuke> i just discovered it today (happened to notice messages from its test fly by during a `make m-test`) and didn't know if dd was (meant as) a complete replacement

[22:17] <japhb> (Which, BTW, is why it's all in uppercase.  IF you have to pull out DUMP, you're having to look at pretty low level stuff)

[22:19] <japhb> The key thing is that it needs to be able to look at container descriptor stuff, so it's relatively tied to a Rakudo version in principle ... we just haven't changed that stuff in a while.

[22:19] <MasterDuke> well, i don't think it's ever held back some wanted changed in the rakudo development history i'm aware of, so i guess no urgent need to remove it

[22:19] <raydiak> codesections: I really don't think it lets you write literal blocks of code in there, pretty sure each of those is trying to parse as something else. e.g.:

[22:20] <raydiak> m: say [[&{say $^a}]] <1# 2>

[22:20] <camelia> rakudo-moar 37dd25f68: OUTPUT: «False␤»

[22:20] <raydiak> m: dd [[&{say $^a}]]

[22:20] <camelia> rakudo-moar 37dd25f68: OUTPUT: «Array element = [-> $a { #`(Block|63954096) ... }]␤»

[22:20] <japhb> MasterDuke: That was kinda my feeling too.  I figured, leave it there if the other core folks use it (even occasionally), but if there was strong sentiment to move it, I'm sure we can work something out.

[22:21] <japhb> For me the big thing is that it's explicitly a Rakudo feature, not a Raku one.

[22:21] <codesections> Ok, *that* first one mystifies me.  What is that parsing as?

[22:21] <japhb> In a similar way to the B:: modules in Perl land, I suppose.

[22:22] <ugexe> m: use Perl6::Grammar:from<NQP>; use Perl6::Actions:from<NQP>; my $source = q|{ say 42 }|; my $*LINEPOSCACHE; my $p6g = Perl6::Grammar.parse($source, :actions(Perl6::Actions)); say $p6g.ast.dump

[22:22] <camelia> rakudo-moar 37dd25f68: OUTPUT: «- QAST::CompUnit  :W<?> :UNIT<?> :CAN_LOWER_TOPIC<?>␤  [pre_deserialize]␤    - QAST::Stmt ␤      - QAST::Stmt ␤        - QAST::Op(loadbytecode) ␤          - QAST::VM ␤            [moar]␤              - QAST::SVal(ModuleLoader.moarvm) ␤…»

[22:22] <ugexe> i was wrong, i was using .dump

[22:22] <raydiak> codesections: an array with a code block in it, coerced to a num and compared with 1 via &infix:«<»

[22:24] <raydiak> that's why you get TTIAR, because it's seeing `[...] <1`, then `2 >`

[22:24] <raydiak> well, ` 2>`. you know what I mean :)

[22:24] <MasterDuke> yeah, i've used .dump

[22:25] <MasterDuke> anyway, off to sleep

[22:25] <codesections> Ok, you've 100% convinced me that it's not even trying to parse [[&{…}]] as a code block.  But that still leaves the question of whether that's intentional or a bug

[22:27] <raydiak> I see no mention of it ever being designed to take anonymous literal blocks of code in there, only names

[22:29] <codesections> hmm, fair point.  Is there anywhere else in Raku where you can't use a lambda in place of a named fn, though?

[22:32] <raydiak> probably several?

[22:33] <raydiak> m: 1 [&say] 2 # ignore the warning :)

[22:33] <camelia> rakudo-moar 37dd25f68: OUTPUT: «WARNINGS for <tmp>:␤12␤Useless use of &say in sink context (line 1)␤»

[22:36] <raydiak> or that .: thing from earlier

[22:36] <moon-child> that warning feels wrong

[22:36] <moon-child> I guess it's triggering on all infixes, but it should only happen for pure ones

[22:37] <codesections> m: say 1 [&(&{$^a ~ $^b})] 2 # Can too put a block there :D

[22:37] <raydiak> agreed

[22:37] <camelia> rakudo-moar 37dd25f68: OUTPUT: «12␤»

[22:39] <raydiak> what the heck is that monstrosity!?

[22:39] <codesections> not the prettiest syntax, I admit 

[22:40] <codesections> &(…) is fn context (just like @(…), $(…), and %(…))

[22:44] <raydiak> the good news is, one of those & are redundant, which makes it an iota less offensive. the bad news is that you are a derranged individual. seek help.

[22:45] <codesections> :D Maybe *that* should be the title for my raku-conf talk!

[22:47] <codesections> but my point stands: that syntax works for 1 [&({…})] 2 ( and with « », for that matter) but not with [&({…})] 1, 2 – and that seems like a bug, imo

[22:51] *** rassoc left
[22:55] <raydiak> I'm not entirely sure it's even *supposed* to work

[22:55] *** bd3i left
[22:56] <codesections> here's something that feels related from the docs: 

[22:56] <codesections> By default, only the final result of the reduction is returned. Prefix the wrapped operator with a \, to return a lazy list of all intermediate values instead. This is called a "triangular reduce". If the non-meta part contains a \ already, quote it with [] (e.g. [\[\x]]).

[22:56] <codesections> when is [\[x]] ever valid syntax, currently?

[22:58] <codesections> m: my \x = { $^a ~ $^b}; say [\[\x]] 1, 2

[22:58] <camelia> rakudo-moar 37dd25f68: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my \x = { $^a ~ $^b}; say [\[\x]]7⏏5 1, 2␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤   …»

[22:59] <codesections> S/'when is [\[x]]'/when is [\[\x]]/

[23:04] <raydiak> m: say [\+] ^3

[23:04] <camelia> rakudo-moar 37dd25f68: OUTPUT: «(0 1 3)␤»

[23:04] <codesections> right, sorry; I corrected the typo

[23:05] <codesections> I'm asking about the *inner* \

[23:05] <raydiak> ah, right

[23:06] <raydiak> m: sub infix:<\\+> { $^a + $^b }; say [\[\+]] ^5

[23:06] <camelia> rakudo-moar 37dd25f68: OUTPUT: «(0 1 3 6 10)␤»

[23:07] <codesections> ah

[23:07] <raydiak> acutally, s/\\\\/\\/

[23:07] <raydiak> m: sub infix:<\+> { $^a + $^b }; say [\[\+]] ^5

[23:07] <camelia> rakudo-moar 37dd25f68: OUTPUT: «(0 1 3 6 10)␤»

[23:11] <raydiak> if you want to file your monstrosity as an issue, maybe someone else can tell you definitively if it should or shouldn't work and why or how. I really don't know what to tell you about that. obviously it *does* work in the [] infix case. still not convinced it *should*, but it does

[23:12] <codesections> here's something that will surprise you, then:

[23:12] <codesections> m: say [[[&({$^a~$^b})]]] 1, 2

[23:12] <camelia> rakudo-moar 37dd25f68: OUTPUT: «12␤»

[23:12] <codesections> m: say [[[&({$^a ~ $^b})]]] 1, 2

[23:12] <camelia> rakudo-moar 37dd25f68: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say [[[&({$^a ~ $^b})]]]7⏏5 1, 2␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        stat…»

[23:13] <codesections> I think I'm going to file an issue.  At this point, I don't know what the correct behavior is, but the intent can't **possibly** be to allow code blocks if and only if they don't contain whitespace!

[23:14] <raydiak> it also works with one less set of []

[23:14] <codesections> just figured that out too

[23:16] <raydiak> and yeah, no idea if that's by design. possibly relying on some unintentional quirk of the internals. it's over my head for the moment

[23:20] <raydiak> it does explicitly expect no space in there: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L3874

[23:20] <codesections> oh, thanks, I'll mention that in the issue.

[23:21] <codesections> Oh, looks like I found a vaguely similar issue that got fixed sometime without us noticing 

[23:22] <codesections> bisectable6: reduce &[<=], (23, 5, 46)

[23:22] <bisectable6> codesections, Will bisect the whole range automagically because no endpoints were provided, hang tight

[23:22] <bisectable6> codesections, ¦6c (55 commits): «»

[23:22] <bisectable6> codesections, Nothing to bisect!

[23:30] <raydiak> I'm trying to trace down how it works through the grammar and actions, but I'm not great at those kinds of details these days

[23:53] *** Eddward_ left
[23:55] <raydiak> I *think* it has to do with https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L1854 allowing arbitrary sequences of statements

[23:59] <codesections> hmm, I don't know the Grammar well enough to have a sense whether that's true.  Feel free to add it to the issue I opened if you'd like/think it'd help

[23:59] <codesections> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L1854

[23:59] <codesections> er

