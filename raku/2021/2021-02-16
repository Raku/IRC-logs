[00:00] *** dogbert17 joined
[00:02] *** rindolf left
[00:02] *** dogbert11 left
[00:48] *** maggotbrain left
[00:49] *** maggotbrain joined
[00:50] *** pecastro left
[01:32] *** Doc_Holliwood left
[01:37] *** guifa2 left
[01:51] *** dogbert17 left
[01:51] *** dogbert17 joined
[01:56] *** mowcat left
[02:09] *** gnufr33dom joined
[02:16] <codesections> .ask lizmat I ran across a code comment you left that reads ` # 'hlfix`.  Do you happen to know what that means/does it indicate that the line is in need of "fixing" in some way?  (It was a few years ago, so no worries if you don't remember)

[02:16] <tellable6> codesections, I'll pass your message to lizmat

[02:26] *** lucasb left
[02:54] *** Garbanzo joined
[02:55] *** kvw_5 joined
[02:57] *** guifa2 joined
[02:59] *** kvw_5_ left
[03:10] *** vike left
[03:19] *** vike joined
[03:28] *** guifa2 left
[03:37] <summerisle> i feel like i've asked this before, but i'm having a moment with Iterable/Iterator. if i have `class Something does Iterable` with a method `iterator` that returns something that `does Iterator`, given `my $something-instance = Something.new`,  `.say for $something-instance` will emit 'Something.new' rather than calling `$something-instance.iterator`. 

[03:37] <summerisle> looking at the docs it appears I am doing this as intended

[03:37] <summerisle> though it may be worth noting that this class has a different REPR (CStruct)

[03:38] <summerisle> actually CPointer

[03:57] *** guifa2 joined
[04:11] *** rindolf joined
[04:27] *** Doc_Holliwood joined
[04:30] <summerisle> nope, still happening after it's been modified to be normal REPR

[04:46] <moon-child> summerisle: try declaring it as @something-instance

[04:46] <moon-child> summerisle: alternately, use $something-instance.map(&say)

[04:48] <summerisle> well, that definitely invoked .iterator, though I would like to be able to hand off to `for`. I had also tried @$something to no end 

[04:48] <summerisle> (e.g. for @$something)

[04:48] <moon-child> @$x

[04:49] <moon-child> hmm

[04:49] <moon-child> summerisle: not @$, just @

[04:49] <moon-child> in the decl

[04:50] <summerisle> nope, still treats it like a single-element list and complains if i try to bind instead of assign

[04:54] <moon-child> http://ix.io/2PAo/perl6 this prints out 1 followed by 2 for me

[05:03] *** aborazmeh joined
[05:07] <summerisle> i realised that i was still treating it as a scalar in a helper method (from-file) which changed semantics of the `my @something = Something.from-file: $file`. With that having been said, there are some semantics with the array container i'll have to work around but this gets the job done more or less.

[05:31] *** gnufr33dom left
[05:50] *** aborazmeh left
[06:04] *** sampersand joined
[06:05] <sampersand> Oh boy im now getting the ssl cert too logn too fro the docs

[06:13] <guifa2> oh this is cool

[06:13] <guifa2> say format-unit 45678.324, :unit<solar-radius-cubic-yottaliter-per-pound-square-millimeter>;

[06:13] <guifa2> Result: 45,678.324 R☉⋅YL³/lb⋅mm²

[06:14] <guifa2> (I have no idea why anyone would want to use that unit, but hey, it can be formatted!)

[06:16] *** vrurg left
[06:17] *** vrurg joined
[06:19] *** cog joined
[06:19] *** cog__ left
[06:20] <sampersand> lol

[06:22] <sampersand> So right now i have a list of functions defined as `my %FUNCS = ('R" => { (^0xffff_ffff).pick }, '+' => { $^a.run + $^b.run }, ...);` I thought it might be interesting to abstract this out, and instead have a `register` function that lets me add functions myself. However, `register 'R', { ... }` isn't ideal, as it looks kinda ugly. any suggestions?

[06:23] <guifa2> Looks okay to me.  But maybe you could

[06:23] <guifa2> register R => { … }

[06:23] *** orinthe left
[06:23] <sampersand> howd i do that

[06:23] <sampersand> ie what would the signature look like

[06:23] <guifa2> foo => bar is just a Pair

[06:23] *** orinthe joined
[06:24] *** aborazmeh joined
[06:25] <sampersand> sorry, still dont follow. in other languages, i would just take the equivalent of `*%x`, and then just raise an exception if not a single argument was given

[06:27] <guifa2> https://tio.run/##TY/LDoIwEEX3/Yq7EKME3InGBhIfP4J20MZHzVA1hPTbqxYN7GbOPZnHnfiSeX9tEDEddW25kULUjz26lniCOLImLZXC60RMqA3iKVoBVIbxy2bnJ9ICI63oZnWliROMD0ZRENFPbweKwyrvLPmRnHBC/LdijbxAO3eyR5uAsiHaBrRwCXahWrrv9eXgG@/f

[06:27] <guifa2> take a look at that

[06:28] <sampersand> (btw, why `so *` not `?*` ?)

[06:28] <guifa2> personal preference lol

[06:29] <sampersand> hm that seems decent

[06:29] <sampersand> ah

[06:29] <guifa2> so * and ?* are equivalent, but so has a looser precedence

[06:30] <sampersand> kinda like `not`/`and` vs `!` and `&&`?

[06:30] <guifa2> exactly the same idea

[06:30] <sampersand> nice

[06:30] <sampersand> is there oen for string and integer conversions?

[06:31] <guifa2> nope.  Just + and ~ as prefix

[06:31] <guifa2> But………

[06:31] <guifa2> You could make one :-)

[06:31] <sampersand> lol yeah!

[06:31] <moritz> well, .Numeric and and .Str

[06:32] <sampersand> also, if a statement ends with `}`, is `;` not required?

[06:32] <sampersand> eg `register A => { ... }`

[06:32] <moritz> if it ends with }\n

[06:32] <sampersand> should i add the `;` just to be safe? or should i not do that

[06:33] <guifa2> Totally up to you.  

[06:33] <sampersand> aight

[06:33] <moritz> I haven't seen anybody who puts a ; after the closing curly of an `if` or `for` block

[06:33] <guifa2> If all of your registers are one liners, I probably would because it feels like actual statements, rather than control blocks

[06:34] <sampersand> most of them are one lines, but not all

[06:39] <sampersand> most of them are one lines, but not all

[06:41] <sampersand> Is there an "identity" function? I couldn't find it anywhere on the docs

[06:41] <guifa2> identity as in?

[06:41] <sampersand> `sub f(\x) { x }`

[06:44] <guifa2> I don't think.  What would it be used for?

[06:44] <summerisle> fp

[06:45] <sampersand> ^

[06:45] <sampersand> Eg ruby has `.itself`

[06:47] *** aborazmeh left
[06:48] *** aborazmeh joined
[06:50] <sampersand> Gotta say, i like `grammar`

[06:50] <guifa2> so the example I saw on ruby to use that was

[06:50] <guifa2> [1,2,3,4,5,1,2,2,3].group_by(&:self)

[06:50] <guifa2> In Raku, that'd be

[06:51] <guifa2> m: say (1,2,3,4,5,1,2,2,3).categorize( * )

[06:51] <camelia> rakudo-moar 3235f3e42: OUTPUT: «Doesn't make sense to categorize with itself␤  in block <unit> at <tmp> line 1␤␤»

[06:51] <guifa2> ^_^

[06:51] <guifa2> Most functions will let you use a Whatever to replace for the invocant in arguments

[06:51] <guifa2> in this case though, Raku's being a bit too smart ;-)

[06:51] <sampersand> it's more like one of the functions im registering is simply an identity function: `register 'B' => { $_ }`

[06:52] <guifa2> m: say (1,2,3,4,5,1,2,2,3).categorize( {$_} )

[06:52] <camelia> rakudo-moar 3235f3e42: OUTPUT: «{1 => [1 1], 2 => [2 2 2], 3 => [3 3], 4 => [4], 5 => [5]}␤»

[06:52] <sampersand> is `$_` considered a perlism, and `$^a` should be preferred?

[06:53] *** cog_ joined
[06:53] <guifa2> $_ is a topicalizer.  It's quite useful to be able to do .foo without needing to put an explicit invocant

[06:53] <guifa2> in your case, I'd probably use { $^self } 

[06:54] <guifa2> or { $^identity }

[06:54] <guifa2> Just for code clarity

[06:54] <sampersand> fair

[06:55] <guifa2> oh well whaddaya know

[06:55] <guifa2> https://docs.raku.org/type/Mu#method_self

[06:55] <guifa2> m: say (1,2,3,4,5,1,2,2,3).categorize( *.self )

[06:55] <camelia> rakudo-moar 3235f3e42: OUTPUT: «{1 => [1 1], 2 => [2 2 2], 3 => [3 3], 4 => [4], 5 => [5]}␤»

[06:55] <guifa2> TIL

[06:55] <sampersand> so i could do `{ .self }` ?

[06:56] *** ufobat_ joined
[06:56] <guifa2> Correct

[06:56] <sampersand> nice

[06:56] <sampersand> what about for `!$_`, is there a shortcut for that?

[06:56] <sampersand> `.!` doesn't work

[06:56] *** cog left
[06:56] <guifa2> But why use braces?  You can also do

[06:57] <guifa2> register A => *.self;

[06:57] <sampersand> oh right. when i was doing the list version of it, things got weird with `=>`

[06:57] <guifa2> *.not or { .not }

[06:57] <sampersand> eg `A => *.Str` didnt work but `A, *.Str` did. no idea

[06:58] <sampersand> so let's say i have `register 'E', { Knight::run .Str };` . Is there a way to make this use whatevercode?

[06:59] <sampersand> i tried `==>`, but i got some weird errors with `.push` not being defined or something

[07:00] <moritz> .Str calls the Str method on $_ immediately

[07:00] *** parabolize left
[07:00] <moritz> *.Str returns a callable that will call the Str method on its argument

[07:01] <sampersand> yeah, i realized that

[07:01] <sampersand> I then thought it might be cool to do function composition, but at that point am i just doing too much and should just do what im doing now?

[07:01] <sampersand> the reason i didnt use whatevercode is because it'd only be applicable in like two places

[07:03] <moritz> so use it in those two placesß

[07:03] <moritz> s/ß/?/

[07:03] <sampersand> Another question. Should i be using `:D` for my type definitions? eg `multi method eql(::?CLASS $rhs, --> Bool) { $.run.cmp: $rhs }` should i do `::?CLASS:D` and `--> Bool:D` ?

[07:05] *** wamba joined
[07:05] <guifa2> Meh.  I don't use it most of the time unless it's critical (or I need to have a multi that distinguishes the two)

[07:05] <sampersand> wdym critical?

[07:06] <guifa2> Where I know a function should never, ever be called with the value being undefined.  For class methods, that can happen more often than you might think, because if you have a typed array, an out of bounds access returns a type object

[07:07] <sampersand> ah

[07:07] <sampersand> yeah, raku's out of boundsness is a little weird for me, eg `.substr` dies whereas arary indexing does not

[07:08] *** aborazmeh left
[07:09] <sampersand> Weird. So for some reason `$rhs.Int` is working, whereas `+$rhs` is telling me my signatures dont match. is the `+` trick just for builtin types

[07:10] <guifa2> + calls .Numeric

[07:10] <guifa2> which may or may not be an Int

[07:10] <guifa2> moritz: you're a native German-speaker, ja?

[07:10] <sampersand> ah ok that makes sense

[07:13] <moritz> guifa2: yes

[07:13] *** ufobat_ left
[07:14] <guifa2> moritz: okay.  lesse see how unit formatting works in German. (it and French are the only ones to have fancy gender/declension information included so far by complex units)

[07:14] <guifa2> ^_^

[07:15] <guifa2> ooof 

[07:15] <guifa2> definitely see abug

[07:15] <guifa2> 45.678,232 Sonnenradius⋅KubikYottaLiter pro Pfund⋅QuadratMilliMeter

[07:16] <moritz> shouldn't that ben "Sonnenradien" (plural)? :D

[07:16] <sampersand> So im getting this: `Type check failed in assignment to &!func; expected Callable[Callable] but got Block (-> $a, $b { #`(Block...)`. I thought blocks _were_ callable?

[07:16] <moritz> *be

[07:18] <guifa2> That's odd.  It should just be "Expected Callable".  What's it paramterized/mixed in with?

[07:18] <guifa2> moritz: perhaps… in theory it should be handling that.  Lemme pick through the German rules they have

[07:18] <sampersand> `has Callable &!func is built;` then just my register function

[07:19] <sampersand> this: <https://github.com/sampersand/knight/blob/raku/raku/lib/Knight/Function.rakumod#L15>

[07:20] <guifa2> moritz: per the Unicode rules, it says that the Sonnenradius should be singular, and Kubikyottaliter should be plural

[07:21] <guifa2> ah, it seems in German there's no number distinction for Liter in the nominative

[07:21] <moritz> well, I can only offer you my intuition as a German speaker (who also happened to have a Physics master), but I haven't checked the rules

[07:24] <guifa2> Nice :-) The units with complex compounding is in a very early stage in CLDR

[07:24] *** gnufr33dom joined
[07:24] <guifa2> They only just released the data in December so Raku will be very ahead of the curve.  It just might be that the data has some issues 

[07:26] <guifa2> Unfortunately, they don't give much advice on how to handle capitalization, etc (they just say "lowercase if no space, but I know Irish and some Bantu languages happily put capital letters in the middle of words so …)

[07:50] *** ufobat joined
[07:50] *** squashable6 left
[07:51] *** squashable6 joined
[07:52] *** Garbanzo left
[08:23] *** abraxxa left
[08:24] *** abraxxa joined
[08:26] *** mightypork_ joined
[08:27] *** guifa2 left
[08:27] *** Sgeo left
[08:29] *** abraxxa left
[08:29] *** Doc_Holliwould joined
[08:30] *** abraxxa joined
[08:30] *** mightypork left
[08:32] *** Doc_Holliwood left
[08:33] *** krkini joined
[08:34] *** kini left
[08:44] *** gnufr33dom left
[08:46] *** krkini left
[08:48] *** dakkar joined
[08:52] *** kini joined
[08:54] *** aluaces joined
[08:57] *** wamba left
[08:58] *** pecastro joined
[08:59] *** jmerelo joined
[09:14] *** sampersand left
[09:33] <jmerelo> releasable6: status

[09:33] <releasable6> jmerelo, Next release in ≈4 days and ≈9 hours. 2 blockers. 22 out of 129 commits logged

[09:33] <tellable6> 2021-02-15T18:45:05Z #raku <tonyo> jmerelo ty

[09:33] <releasable6> jmerelo, Details: https://gist.github.com/858af08ab0e77a0a9a272f65f9a49355

[09:33] *** Discipulus joined
[09:44] *** Scimon joined
[09:57] *** Discipulus_ joined
[10:00] *** Discipulus_ left
[10:00] *** Discipulus left
[10:14] *** aluaces left
[10:21] *** Kaiepi left
[10:24] *** Kaiepi joined
[10:40] * lizmat clickbaits https://rakudoweekly.blog/2021/02/15/2021-07-easy-hard/

[10:40] <tellable6> hey lizmat, you have a message: https://gist.github.com/040e6d88b9d4ac621ab7629a4d6da8a3

[10:41] <lizmat> .tell codesections 'hlfix indicates an extra ' to fix syntax highlighting in some editors

[10:41] <tellable6> lizmat, I'll pass your message to codesections

[10:41] <lizmat> .tell it may be superfluous by now

[10:41] <tellable6> lizmat, I haven't seen it around, did you mean hi?

[10:41] <lizmat> .tell codesections it may be superfluous by now

[10:41] <tellable6> lizmat, I'll pass your message to codesections

[10:44] *** aluaces joined
[10:59] *** ab5tract joined
[11:16] *** Discipulus joined
[11:25] *** Black_Ribbon left
[11:27] *** rindolf left
[11:57] *** kini left
[11:59] *** kini joined
[12:17] *** aluaces left
[12:19] *** aluaces joined
[12:36] *** Discipulus left
[12:44] *** rindolf joined
[12:48] <tbrowder> hi, folks. i want to add a wiki to one of my websites, and i want to make any edit access restricted to approved users. i want it to use raku or perl. any suggestions?

[12:53] <eseyman> tbrowder: ikiwiki is the first thing that comes to mind

[12:53] <eseyman> https://ikiwiki.info/

[12:58] *** Discipulus joined
[13:20] <tbrowder> eseyman: thanks!

[13:34] *** jmerelo left
[13:39] <codesections> thanks.  I've definitely still run into cases where # 'hlfix or similar would have helped

[13:39] <tellable6> 2021-02-16T10:41:12Z #raku <lizmat> codesections 'hlfix indicates an extra ' to fix syntax highlighting in some editors

[13:39] <tellable6> 2021-02-16T10:41:32Z #raku <lizmat> codesections it may be superfluous by now

[13:59] *** Summertime joined
[14:02] *** ingy joined
[14:13] *** Ulti joined
[14:14] *** yguillemot joined
[14:17] <yguillemot> Hi all! I write a module for binding to Qt GUI and I wonder how to name it.

[14:17] <vrurg> tbrowder: if not too late, look at foswiki.

[14:18] <yguillemot> I hessitate between Qt::QtWidgets, RaQt::QtWidgets and Qt::RaQt::QtWidgets

[14:18] <Scimon> I'd go with Qt::QtWidgets myself. 

[14:18] <yguillemot> Is it the rifht place to ask ?

[14:18] <Scimon> Don't see why not.

[14:19] <moritz> why not just Qt::Widgets?

[14:19] <tadzik> if you're binding to Qt GUI, why not Qt::GUI? :)

[14:19] <moritz> tadzik: too easy :-)

[14:19] <tadzik> one day Qt is going to release Qt Widgets and the problem will be even funnier :P

[14:20] <Scimon> That too. 

[14:22] <moritz> or you take extra care to build a cute API, and call it Qt::Cute :D

[14:22] <yguillemot> Qt Widgets is the Qt name so Qt::Widgets seems the better but I read on CPAN hight level names should not be used

[14:23] <lizmat> yguillemot: that is not so important for Raku

[14:23] <MasterDuke> or figure out some backronym for PIE and call it Qt::Pie

[14:23] <lizmat> as you can specify of which author you would like to use a module

[14:23] <yguillemot> Qt::Cute was the reason of RaQt (like PyQt)

[14:24] <perry> Cutie cute?

[14:24] <lizmat> yguillemot: if it follows the PyQt API, then RaQt would be a good name as well

[14:24] <lizmat> imho

[14:26] <yguillemot> lismat: not sure it follows PyQt API. It follows Qt API and I presume PyQt is doing the same.

[14:27] <lizmat> well, if you don't know for sure, I guess RaQt would not be a good name then  :-)

[14:28] <yguillemot> lismat: So if there is no problem I'll choose Qt::QtWidgets

[14:29] <yguillemot> Thanks everybody

[14:32] <Scimon> Thanks for writing it :)

[14:34] <tadzik> yguillemot: so why the double Qt? :)

[14:38] <yguillemot> tadzik: Qt has several modules. QtWidgets is related to #include <QtWidgets> in Qt C++. Later Qt::Widget may be used for composite widgets written in Raku

[14:39] <tadzik> yguillemot: so I may publish a Qt::Widget::Calendar myself? That doesn't conflict with Qt::Widgets though, or even with Qt::Widget afaik :)

[14:40] <ab5tract> You could also use: Native::QtWidgets

[14:40] <yguillemot> tadzik: exactly

[14:40] <tadzik> the point of :: is namespacing. If you want things to be similar to C++ without taking advantage of namespacing you may as well publish a module called "QtWidgets"

[14:40] <ab5tract> GUI::Qt would also be a decent option

[14:41] <ab5tract> naming things is often surprisingly difficult

[14:44] <codesections> ab5tract: "two hard things", right?  In theory, I like the GUI::Qt option, but none of the raku gtk libraries use GUI::*, so that seems confusing 

[14:44] <ab5tract> codesections, indeed. if names are hard, namespacing is far worse

[14:45] *** ab5tract left
[14:46] <tadzik> GUI::Qt would get awkward the moment you start binding the other, non-GUI-related Qt libraries

[14:53] <codesections> m: dd my $f = True but False;

[14:53] <camelia> rakudo-moar 3235f3e42: OUTPUT: «Bool+{<anon|1>} $f = Bool::False␤»

[14:54] <codesections> that ^^^ is the same as False, right?  (that is, the <anon|1> constraint isn't adding anything extra?)

[14:54] <codesections> camelia: welcome back!  You were gone yesterday :D

[14:55] *** Sgeo joined
[14:56] *** ufobat left
[14:56] <MasterDuke> m: my $f = True but False; say so $f  # looks like it

[14:56] <camelia> rakudo-moar 3235f3e42: OUTPUT: «False␤»

[14:58] <codesections> yeah, I knew to expect that much equivalence.  Just wanted to make sure there wasn't something more subtle I was overlooking

[15:10] <tbrowder> vrurg: thanks, i will

[15:10] *** gnufr33dom joined
[15:15] *** xinming_ left
[15:15] *** xinming_ joined
[15:26] *** ufobat joined
[15:28] *** yguillemot left
[15:33] *** leont joined
[15:36] <leont> lizmat: it seems FOSDEM published your presentation https://mirror.as35701.net/video.fosdem.org/2021/D.perl/raku_sets_without_borders.mp4

[15:46] <lizmat> leont++   # that is an URL I can tweet  :-)

[15:49] <lizmat> hmmm...... that URL doesn't have any video?

[15:49] <lizmat> whereas the one I approved did?

[15:49] <lizmat> *sigh*

[15:51] *** dotdotdot joined
[15:51] <leont> There's also a webm version, they both work for me

[15:53] <codesections> Oh, mine is up too http://bofh.nikhef.nl/events/FOSDEM/2021/D.perl/programming_lang_for_free_software.webm

[15:56] <codesections> er, maybe https://video.fosdem.org/2021/D.perl/programming_lang_for_free_software.webm is the more official link?

[15:56] *** jmerelo joined
[15:58] <vrurg>  lizmat: there is no you in the video, but the presentation is there.

[16:00] <Scimon> I like the bit in Lizmat's talk about "Use Objects" I think that's a big thing to get into Perl devs heads. 

[16:00] *** gnufr33dom left
[16:05] <lizmat> the webm version only allows me to download the video, not play it

[16:09] <codesections> lizmat: try https://video.fosdem.org/2021/D.perl/raku_sets_without_borders.mp4 (or the same URL with .webm); both of those work for me

[16:11] <codesections> I think FOSDEM may be doing something funny with load-balancing and redirects, but that scheme seems to redirect to wherever they want me to be

[16:15] <lizmat> as I said, on Safari, I only get audio with the .mp4 link

[16:15] <lizmat> and the .webm link only allows me to download it

[16:15] <jmerelo> It's been served as text/html

[16:16] <jmerelo> No, wait, it's redirected to video/mp4

[16:17] <codesections> oh, ok.  I thought the mirror.as35401.net link might have been part of the problem; I guess not.

[16:17] <lizmat> the download *does* have the video

[16:17] <jmerelo> Header contains this link http://bofh.nikhef.nl/events/FOSDEM/2021/D.perl/raku_sets_without_borders.mp4

[16:17] <lizmat> ah, but it opens it up in chromium

[16:18] *** guifa2 joined
[16:18] <lizmat> ok, I guess as Mac user, I'm persona non-grata at FOSDEM  :-(

[16:19] *** parabolize joined
[16:20] <vrurg> lizmat: Big Sur Safari opens the video.

[16:21] <vrurg> I just clicked the link on https://video.fosdem.org/2021/D.perl/

[16:22] <vrurg> Webm is offered for download. I guess it's Safari which doesn't support it natively.

[16:22] <codesections> lizmat: that seems a *little* harsh -- yeah, it seems like they didn't do enough testing against Safari.  But many Mac users don't use Safari, and I imagine the lack of safari support (in some versions?) was an oversight, not an intentional choice

[16:24] <codesections> (Also, I'm watching your talk now – I caught the end of it live, but missed the first bit.  Great talk, just as I'd expect!)

[16:24] <tbrowder> vrurg: foswiki is just the ticket! i remember looking at it years ago and pretty much decided to use it after i knew enough to be not too dangerous to my hosts ;-D

[16:39] <guifa2> That reminds me I need to OK my video — I had a lot of silence in the Q&A and wasn't sure if I should keep it all or just clip it out

[16:42] <jdv79> vrurg: ha.  i wouldn't call not wanting to officially endorse something an "attitude"

[16:43] <jmerelo> guifa2: IIRC, there's a small edition interface, although it only allows trimming at both ends.

[16:44] <guifa2> jmerelo: yeah, that's why I've been slow on deciding what to do :-)  BAsically, I'd either need to killl the Q&A entirely or leave in lots of dead time.

[16:45] <tonyo> jmerelo: you have access to logs on modules.raku.org?

[16:46] <tonyo> ah nvm, seems to be working fine now

[16:47] <MasterDuke> dead time is easy to skip through

[16:47] <perry> Hey, Safari is my favorite browser :(

[16:51] * guifa2 went ahead and upped the whole thing so his video should be available soon

[16:53] <codesections> yeah, not supporting (pre-Big Sur versions of?) Safari was definitely an error/testing failure on their end.  But they've had to do so much with so little that I'm willing to cut them a bit of slack 

[16:54] <jmerelo> tonyo: I'm afraid not

[16:54] <jmerelo> tonyo: you probably want to talk to Roman Baumer, rba

[16:56] *** mowcat joined
[16:57] <lizmat> codesections: sorry if I seemed a bit harsh

[16:58] <lizmat> I guess I have a hard time forgetting they managed to lose Larry's talk at FOSDEM 2015 where he announced the release of what is now Raku

[16:58] <codesections> lizmat: no worries at all :)  I understand the frustration 

[16:58] <codesections> oh wow, I didn't know that backstory

[16:59] <lizmat> fun fact:: they paid for Larry to be there

[17:09] *** aborazmeh joined
[17:12] *** [Sno] left
[17:15] *** sno joined
[17:16] *** domidumont joined
[17:27] *** Discipulus left
[17:27] *** dakkar left
[17:28] *** dakkar joined
[17:38] *** dakkar left
[17:45] *** natrys joined
[17:47] *** Scimon left
[17:51] *** xinming_ left
[17:52] *** xinming_ joined
[17:57] *** m_athias2 left
[17:57] *** m_athias joined
[18:03] *** patrickb joined
[18:06] *** cetjs2 joined
[18:06] <cetjs2> hello

[18:07] <cetjs2> I'm student interesred this gsoc project https://github.com/perl-foundation-outreach/gsoc-2021-ideas/blob/main/raku/gRPC.md

[18:08] <cetjs2> how I do participate in this?

[18:09] <cetjs2> jmerelo, cast

[18:10] <guifa2> cetjs2: if jmerelo doesn't respond to you on here, definitely shoot him an e-mail — he's very good at responding to e-mails 

[18:12] *** aborazmeh left
[18:13] <cetjs2> guifa2,ok but I think walt a bit

[18:15] *** aindilis left
[18:18] <lizmat> cetjs2: if you do twitter, you can also contact JJ at @jjmerelo

[18:19] *** dataangel left
[18:20] <cetjs2> lizmat,  me not in twitter,

[18:24] *** Maylay left
[18:24] *** Maylay joined
[18:25] * guifa2 is finally getting to watch lizmat's presentation

[18:25] <leont> cetjs2: this twitter thread may be relevant then: https://twitter.com/jjmerelo/status/1355948890500042762

[18:25] <jmerelo> Hey

[18:26] <jmerelo> cetjs2: thanks for your interest. We're right now at the phase in which we're still asking Google for money. We don't know yet if we will be funded.

[18:27] <jmerelo> cetjs2: so it's probably wise to wait a bit. Anyway, if you send me an email (jjmerelo at gmail) we'll ping you when it's funded

[18:27] *** Maylay left
[18:31] *** Maylay joined
[18:32] *** neshpion joined
[18:36] *** Doc_Holliwould left
[18:37] <cetjs2> jmerelo, I sent mall

[18:37] *** sortiz joined
[18:37] <sortiz> \o #raku

[18:38] <cetjs2> sortiz, hi

[18:41] *** tejr left
[18:41] *** tejr joined
[18:59] <tyil> cetjs2: I'm sure people will be willing to mentor you in here too on the project even if it doesn't go through gsoc, fwiw :>

[19:01] *** Doc_Holliwould joined
[19:02] *** xelxebar_ left
[19:02] *** xelxebar joined
[19:14] <codesections> cetjs2++ for not being on twitter :)

[19:15] *** aindilis joined
[19:16] <guifa2> codesections: did you see my crazy unit format tests from last night?

[19:16] <codesections> no, I missed that.  Is it in the backlog here?

[19:17] <guifa2> Eh maybe.  suffice it to say

[19:17] <guifa2> format-unit 12345.6789 :unit<solar-radius-cubic-yottaliter-per-pound-square-millimeter>;

[19:18] <guifa2> outputs '12,345.6789 R☉⋅Yl³/lb⋅mm²'

[19:19] <codesections> ha!

[19:19] <codesections> reminds me of m.xkcd.com/687/

[19:19] <guifa2> but of course it's fancier than that :-) It can also spell out the units

[19:20] <guifa2> format-unit 12345.6789, :unit<solar-radius-cubic-yottaliter-per-pound-square-millimeter>, :language<ar>, :length<long>

[19:21] <guifa2> ١٢٬٣٤٥٫٦٧٨٩ نصف قطر شمسي⋅يوتالتر مكعّب لكل رطل⋅ملّيمتر مربّع

[19:21] <guifa2> Which I'm just going to have to take it from Unicode that that's accurate ;-)

[19:21] <codesections> wow

[19:23] *** domidumont left
[19:23] <guifa2> English yields "12,345.6789 solar radius-cubic yottaliter per pound-square millimeter"

[19:23] <neshpion> i thought our numerals were already arabic

[19:23] *** Garbanzo joined
[19:23] <guifa2> neshpion: There's three different sets of digits that called Arabic

[19:24] <codesections> and the one most commonly called that, isn't

[19:25] <guifa2> Wikipedia has a good table here of the differences: https://en.wikipedia.org/wiki/Eastern_Arabic_numerals

[19:27] <guifa2> If you include a country code, the formatter should handle that. 

[19:27] <guifa2> eg

[19:27] <guifa2> format-unit 12345.6789, :unit<meter>, :language<ar-MA>

[19:27] <guifa2> 12.345,6789 متر

[19:28] <guifa2> (Morocco prefers Western style digits)

[19:35] <codesections> m: say عبّرم رتميلّم⋅لطر لكل بعّكم رتلاتوي + 0

[19:35] <camelia> rakudo-moar 3235f3e42: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say عبّرم رتميلّم7⏏5⋅لطر لكل بعّكم رتلاتوي + 0␤    expecting any of:␤        infix␤        infix stopper␤        postf…»

[19:35] <codesections> wow, switching from LTA to RTL in a single line is confusing...

[19:36] <guifa2> Yup :-)

[19:37] <guifa2> m: say 0 + ١٢٣٤٥٦٧٨٩

[19:37] <camelia> rakudo-moar 3235f3e42: OUTPUT: «123456789␤»

[19:37] <guifa2> err, I guess I should have only dleeted the thousands separator, meh.  You get the idea

[19:38] <codesections> it's a bit tempting to start pointing to the previous line in IRC with ٨٨٨٨

[19:39] <codesections> I guess I could just do ↑↑↑↑↑, but somehow that seems like less fun :D

[19:40] <guifa2> I had a few places in my dissertation where I quoted multiline RTL text.  It's still kind of weird that you start from the left on one line in English, then when the quote starts, you skip to the end of the line, read toward the start quote, then for the NEXT line start on the right, read the whole line, then the NEXT line start at the end quote, read to the start of the line, then skip to the end quote, and continue reading to the end

[19:40] <guifa2> the line

[19:41] <codesections> oh.

[19:41] <guifa2> Even worse though is when I'm writing tests

[19:41] <guifa2> If you include text in <> brackets

[19:41] <codesections> I would be *very* tempted to turn those into block quotes

[19:42] <guifa2> Most operating systems will display <arabictext>.  But what you see as < is actually probably internally encoded as >, and vice versa, and will change based on the surrounding text

[19:42] *** Froogal joined
[19:42] *** Black_Ribbon joined
[19:44] * codesections wonders whether Acme::Anguish could add RTL shenanigans 

[19:47] <guifa2> I'm assuming yes, but accessing a Hash in multithreaded stuff shouldn't cause any problems, right?

[19:48] <MasterDuke> reading should be fine. writing is not safe

[19:48] <Froogal> hi!  I'm using the WWW module to grab data off the web, however I'm using the Json::Fast module for JSON parsing and processing but the data I get back is a Str.  The Str is [{"some_key": "some_value"}].  The JSON processor isn't working because of the leading and trailing square brackets i think.  How can I trim these off?

[19:49] <summerisle> i think the bigger issue is that if it is actually the case that it's giving back a string, it's not handling valid JSON

[19:49] <summerisle> conventionally you don't see bare arrays often, but afaik they are permissible

[19:49] <Froogal> I checked the type its a Str

[19:50] <summerisle> well, a quick fix would be to extract everything between the opening and closing brackets using a regex

[19:50] <summerisle> but that's not ideal

[19:50] <Froogal> XD  Ive been trying to use regex to match the first and last bracket but I'm bad at them

[19:50] <summerisle> if you are 100% certain that the brackets will always be there, you could trim the first and last chars off the str 

[19:51] <summerisle> well, there is https://docs.raku.org/type/Str#routine_substr

[19:53] <Froogal> sweet thanks!

[19:53] *** Froogal left
[19:55] *** ufobat_ joined
[19:59] *** ufobat left
[20:32] *** Discipulus joined
[20:36] *** rindolf left
[20:39] *** xinming_ left
[20:39] *** xinming_ joined
[20:55] *** Discipulus_ joined
[20:55] *** Garbanzo left
[20:57] *** Discipulus left
[21:21] *** patrickb left
[21:41] *** aborazmeh joined
[21:47] *** Garbanzo joined
[21:55] *** Froogal joined
[21:56] <Froogal> So would the Perl docs be a good place to get info on how to use s/// or tr/// for find and replace on a string?

[21:56] <Froogal> It says they work pretty much the same on Raku.org

[21:57] *** epony left
[21:57] <guifa2> To some extent.  JUst be aware of course that Raku's regex language is different from Perl's

[21:59] <Froogal> I see, guess I should start there.

[22:05] <guifa2> for s/// it's pretty straight forward.  S/X/Y/ shorthand-ish for $string.subst(/X/, /Y/)

[22:05] <guifa2> s/X/Y/ is shorthand is for $string .= subst(/X/, Y)

[22:06] <guifa2> but s/// and S/// act on the topic ($_) 

[22:08] <codesections> Froogal: is there something missing from the raku docs on s///? https://docs.raku.org/language/regexes#Substitution

[22:08] <Froogal> guifa2 thanks!

[22:10] <Froogal> codesections I'm sure you know that sometimes docs just don't cut it.  You need actual input from other people with more experience or a fresher prospective than yours.

[22:10] *** ufobat_ left
[22:14] *** Froogal left
[22:15] *** Froogal joined
[22:18] <codesections> yeah of course :)  I just was surprised to hear you mention resorting to the docs for a different language 

[22:19] <Froogal> codesections Gotcha lol so far so good with it I think lol.  Just getting used to the differences.

[22:29] <guifa2> And of course we're here for any other Qs 

[22:30] *** japhb joined
[22:32] <Froogal> say S/R// with $catStr; doesn't seem to work/  R is a named regex obj.  $catStr is a Str, I want to replace the matched characters with nothing, essentially removing them.  Where am I going wrong?

[22:33] <Froogal> I'm trying to use s/// and I"m following this ex:say S/o .+ d/new/ with 'old string';      # OUTPUT: «new string»

[22:34] <Froogal> I bet its my regex since its different in Raku.

[22:34] <japhb> Those of you who enter characters not directly on your keyboard, composed of a base character and a combining mark, what do you expect when you've just entered such a pair and now hit backspace?  (I'm in the middle of writing a pure-Raku replacement for Linenoise because I'm frustrated with all the things it does wrong, and among those is basically anything having to do with any part of Unicode more complex 

[22:34] <japhb> than needed for latin-1 emulation.)

[22:35] <guifa2> japhb: the norm is to delete the whole character

[22:35] <guifa2> Generally even for languages where the composed character is made of several sub elements (like Korean)

[22:36] <japhb> OK, so effectively as soon as you add a combining mark, the buffer is re-normalized and acts as if the combined character was input as a single unit?

[22:37] <japhb> OK, I can work with that, and it fits my intuitive expectation, but I don't have much experience with non-US keyboards.

[22:37] <japhb> So I figured I'd ask.  ;-)

[22:37] <guifa2> correct.  That's also how many libraries around text input work.  When I wrote spell checking stuff, if someone used a dead key, I wouldn't get the letter until the next letter was hit

[22:37] *** Discipulus_ left
[22:38] <japhb> Yeah, I'm discovering all sorts of "interesting" bits -- like what happens when you use ^T to swap two characters and they're not the same visual width.

[22:38] *** Froogal left
[22:39] <japhb> Thanks, guifa2.

[22:40] <guifa2> The crazy ones would be something like Japanese

[22:41] <guifa2> Whereas my Spanish keyboard will hold the dead key in a temporary buffer of sorts, it's possible for an entire sentence to be held onto 

[22:41] <japhb> guifa2: How so?  You mean just multiple keystrokes to produce each character? ... Oh, yeah, that's ... huh.

[22:41] <guifa2> as they'll type it phonetically and then it'll try to break it down into the Kanji, and then when it's the right set, they "commit" it so to speak

[22:41] <japhb> Why would it hold that much?  Is there long-distance character agreement to worry about?

[22:42] <guifa2> yea.  Every kanji has multiple readings, and since you type phonetically normally, there are multiple resolution paths

[22:42] <japhb> Oh joy.  Wait, how does e.g. xterm get this right?  I can't imagine it has that complex input logic in it ....

[22:43] <guifa2> It might be handled by the OS's IME 

[22:43] <guifa2> and then dropped into xterm almost C&P style.  

[22:43] <japhb> (Though to be fair, they are pretty pedantic about compatibility with ancient hardware, so maybe they're pedantic about this too.)

[22:43] <japhb> Oh!  That's an interesting case.

[22:43] <japhb> So for some languages, I may not actually get raw editing control.  Hmmmm.

[22:44] <guifa2> I think if you treat things at a glyph level you should be okay.  

[22:44] <codesections> I wouldn't be sure about xterm.  That codebase is big, and harry.  I wouldn't be shocked if it handled some pretty obscure edge cases

[22:44] <japhb> I think I basically need to do an NFG renormalization after each insert.

[22:44] <guifa2> I think languages like ones based on devanagari script split things into two glyphs, but then have the font do the ligaturing.  I'd need to double check

[22:47] <japhb> Hmmm.  OK, I think if I can even get basic expectations right, it will already be strictly better than Linenoise is now, and by then I might even know the right questions to ask to figure out what else is LTA in my implementation.

[22:49] <japhb> guifa2: Something that you said: "dead key" -- do you mean that you enter combining marks *first*, before the base character, and it buffers the combining mark waiting for something to put it on?  Or am I misunderstanding?

[22:54] *** natrys left
[22:54] <guifa2> Correct.  It comes from the old typewriter days.  To do accents back then,  you'd hit, e.g., ´ (acute), and then typewriter would slam down the metal with the acute accent on it, but it wouldn't move the printhead forward.  Then when you typed a, it would type the a over top of the acute, and you'd have á.  

[22:54] *** natrys joined
[22:54] <guifa2> But it also depends on language.  Some languages have the accented keys prebuilt onto the keyboard (like French)

[22:56] <guifa2> Nonetheless, in Unicode, it's stored in the opposite direction.  IIRC that's why in Raku you can't get a fully live buffer, because when someone enters in "E" it's theoretically possible for there to be 1 or more combining diacritics

[22:56] <japhb> Hmmm, I wonder what happens when I NFG a buffer that has combining characters in it before the base characters.

[22:57] <guifa2> it should apply them to the next character

[22:57] <guifa2> Not sure exactly your architecture, but perhaps you could place combiners on top of a PUA code point.  

[22:58] <japhb> guifa2: I meant, I wonder what MoarVM's Unicode handling will do with that.  As you said, there seems to be an assumption of reading input in Unicode with marks after, but I haven't dived into the MoarVM code to look at it.

[22:59] <japhb> Huh, that's an interesting idea.

[22:59] <guifa2> I'm fairly certain most IMEs won't ever give you the raw combining diacritic, though, so you might be looking at an edge case to an edge case

[23:00] <japhb> Basically (at the moment at least) I'm setting $*IN to raw mode using Term::termios, then reading bytes one at a time until I get a decodable character, and then interpreting that character as either (part of) a control sequence, or a request to insert/append the character to the result buffer.

[23:01] <japhb> I'm not stuck on that implementation, but I'm not sure what to replace it with (aside from our discussion above putting some constraints on it)

[23:02] <guifa2> Actually, the reason that an IME probably won't let you get a raw combining diacritic is because unless it's the first character in a string, by definition it will always combine with the nearest (going backwards) base character

[23:03] <guifa2> if $*IN has A, B, C, E+acute -> ABCÉ.

[23:03] <guifa2> if you get acute again

[23:04] <guifa2> per Unicode it should be ABCÉ́

[23:04] <guifa2> which may not show the second accent lol

[23:04] <japhb> I can see it in the IRC window, but it's a good question what a raw-mode terminal will send me in that case ...

[23:06] *** xinming_ left
[23:08] *** xinming_ joined
[23:11] <guifa2> I'd just try playing around.  Different OSs will probably drop stuff in there differently.  

[23:12] <codesections> is shows up fine in my (emacs -nw) IRC client

[23:12] <codesections> (running inside Alacritty, which has somewhat amazing Unicode support, afaict)

[23:14] *** Manifest0 left
[23:15] *** Manifest0 joined
[23:20] *** aluaces left
[23:45] *** natrys left
[23:47] *** dogbert11 joined
[23:51] *** dogbert17 left
[23:56] *** sortiz left
[23:57] *** tusooa joined
[23:57] *** sortiz joined
