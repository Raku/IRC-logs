[00:02] *** sno left
[00:03] *** sno joined
[00:07] *** sno left
[00:09] *** solitario joined
[00:15] *** aborazmeh left
[00:36] *** clarjon_1 joined
[00:36] *** clarjon1 left
[00:45] *** epony left
[00:58] *** DiffieHellman left
[00:58] *** DiffieHellman joined
[01:01] *** oneeggeach left
[01:03] *** kvw_5_ joined
[01:06] *** kvw_5 left
[01:11] *** epony joined
[01:58] *** ggoebel left
[02:05] *** Name joined
[02:09] *** clarjon_1 left
[02:12] *** Name left
[02:27] <raydiak> demostanis[m]: I know it's several hours after the fact, but maybe you'll see this in the scrollback. 12m34s on a ryzen 5 2500u laptop (4 smt2 cores @ 2ghz/3.6ghz turbo) running manjaro...but I forgot to pass -j so that's single-threaded :P

[02:38] <raydiak> actually I don't know how to parallel build rstar where you don't call make yourself, -j is a make thing. summerisle got any tips?

[02:39] *** neshpion joined
[02:45] <moon-child> I don't think it's possible.  I usually build the components individually myself

[02:46] <moon-child> (though nqp and rakudo builds don't seem to be particularly parallel.  Mvm is)

[02:46] <moon-child> (well, nqp and rakudo probably _could_ be built in parallel, but the makefile isn't set up in such a way that make knows how to do that)

[02:49] <raydiak> just came across this, gonna try export MAKEFLAGS="-j<whatever number>"

[02:50] <raydiak> sounds reasonable that the makefile would have to take special care for it to even work in parallel, but idk what summerisle must have meant by "56 threads" if it's not possible

[02:55] *** epony left
[02:55] <raydiak> looks like it will run that way for moar, but the bulk of everything else just runs in serial anyway. guess that explains why my 2019 low-mid-range laptop only took 6x as long as some 64-core monster...

[03:02] <raydiak> and yes I agree, I don't use rstar myself. the question just made me curious. I use rakubrew, unless I'm trying to hack on rakudo (which never happened much and hasn't happened at all in a very long time)

[03:04] <raydiak> -j8 only dropped me to 10m55s, so around a 10-15% time savings

[03:06] <raydiak> hard to say anything specific with a laptop anyway, the room is cooling off now that the sun is down, some parts could have still been a bit heat-soaked from the run before it, yada yada

[03:06] *** epony joined
[03:07] *** monkey__ joined
[03:27] *** gabiruh left
[03:27] *** gabiruh joined
[03:29] *** monkey__ left
[04:17] *** dotdotdot left
[04:24] *** dotdotdot joined
[04:38] *** pecastro joined
[05:09] *** Sgeo left
[05:13] *** Sgeo joined
[05:36] *** wamba joined
[05:42] *** gordonfish left
[05:43] *** gordonfish joined
[05:48] *** softmoth left
[05:48] *** neshpion left
[06:09] *** stoned75 joined
[06:22] *** parabolize left
[06:45] *** stoned75 left
[06:50] *** kurahaupo_ joined
[06:51] *** kurahaupo left
[06:56] *** jmerelo joined
[07:03] *** asymptotically joined
[07:29] *** __jrjsmrtn__ left
[07:32] *** __jrjsmrtn__ joined
[07:37] *** sftp joined
[07:57] *** kurahaupo joined
[07:57] *** linkable6 left
[07:58] *** linkable6 joined
[08:00] *** kurahaupo_ left
[08:02] *** guifa2 left
[08:02] *** brtastic joined
[08:08] *** Geth joined
[08:26] *** kurahaupo left
[08:26] *** kurahaupo joined
[08:28] *** brtastic left
[08:34] *** kurahaupo left
[08:38] *** ggoebel joined
[08:40] <demostanis[m]> <summerisle "demostanis: if it's any help (it"> That's so fast... 

[08:41] <demostanis[m]> Well I made a small Perl script which can do pretty much like Rakudo Star but with support for GPG verification, fetching through git, and parallel installation for modules

[08:42] <demostanis[m]> I'm sure it's faster than R*

[08:44] <El_Che> if you want fast, use a pkg :)

[08:45] <demostanis[m]> Rakudo Star isn't much packaged... it's not even in Arch repos, and in AUR it's a very very very outdated version

[08:46] <El_Che> If you're compiling stuff I completely miss the use case of star

[08:46] <El_Che> as you can build modules yourself

[08:47] <demostanis[m]> The goal is to then package this new version

[08:47] <El_Che> package rakudo and zef

[08:47] <El_Che> modules are of of date the day you package them

[08:48] <demostanis[m]> But my script also installs some modules

[08:48] <El_Che> so like dist do, I would package modules separately

[08:48] <demostanis[m]> "of of date"?

[08:48] <El_Che> yes, r is not release often and modules have new versions in the meanwhile

[08:49] <El_Che> modules have a different release cycle (whenever they want to release a bug release or feature) than rakudo (monthly) or star (varies, last time I checked yearly)

[08:49] <demostanis[m]> My script isn't only for speed

[08:50] <El_Che> go ahead with the script, no problems about it

[08:50] <El_Che> just saying that assuming the 3 release cycles are related is a common error

[08:50] <demostanis[m]> But yeah, probably one should package Raku modules for distros

[08:51] <El_Che> for me at this stage of the ecosystem is a packaged raku + zef the way to go

[08:51] <El_Che> once it's more mature distros version will be good enough

[08:52] <demostanis[m]> And R* will become useless?

[08:53] *** aluaces left
[08:53] <El_Che> no, there is a use case for many people I think eg windows

[08:53] <El_Che> there isn't any use case for my usecase

[08:53] <El_Che> (I use Linux and containers)

[08:56] <El_Che> I understand "with batteries" as a great stdlib of a language and raku delivers on that

[08:59] <demostanis[m]> You mean that packaging additional modules like R* does might be useless for most users as Raku already has "batteries included"?

[09:00] <demostanis[m]> packaging in the default install*

[09:00] <El_Che> no, I mean distribution of the compile with a list of modules

[09:00] <El_Che> I think the best scenario is like how all languages are packages

[09:01] <El_Che> a package for the compiler/runtime and separate packages for modules that are updates on their own schedule

[09:02] <El_Che> that's what most dist already do for raku

[09:03] <El_Che> however, for my own use case I prefer packaged rakudo + zef and I'll retrieve my own modules. In the future I would love to see these modules in directory of my project, e.g. vendored

[09:06] <El_Che> (afk)

[09:14] *** Sgeo left
[09:29] *** brtastic joined
[09:44] *** aluaces joined
[10:00] *** asymptotically left
[10:00] *** mahafyi joined
[10:02] *** asymptotically joined
[10:05] *** aborazmeh joined
[10:06] *** jmerelo left
[10:08] *** kurahaupo_ joined
[10:42] *** rindolf joined
[10:44] *** Geth left
[10:44] *** Geth joined
[10:56] *** Kaiepi left
[10:57] *** Kaiepi joined
[11:02] *** aborazmeh left
[11:18] *** Black_Ribbon left
[11:45] <moritz> an approach similar to python's virtualenv would be nice, yes

[11:46] *** bmbee joined
[11:52] *** bmbee left
[11:52] <masak> lizmat: on second thought, I think it might very well work if you just say "savoring a nice Chateau 4573562 right now"

[11:52] *** Kaiepi left
[11:53] *** Kaiepi joined
[11:53] <lizmat> that would be *very* futuristic

[11:53] <masak> yes, but when has that ever stopped us

[11:53] <lizmat> but yeah, give or take a few miliion years from now

[11:53] <lizmat> true

[11:54] * masak .oO( the future is already digitized, we just got to wines much sooner than we expected )

[11:54] <lizmat> Raku, the programming language for the aeons

[11:55] <masak> ok, so what I'm hearing is: ditch hierarchical CPAN-style module names, and rename all modules according to the naming scheme "Chateau 4573562"

[11:55] <masak> I hope I got that right; it's being turned into law as we speak

[11:56] <lizmat> .oO( good thing we tend to be law breakers )

[12:04] *** Kaiepi left
[12:04] *** epony left
[12:12] *** kurahaupo_ is now known as kurahaupo__

[12:14] *** kurahaupo__ is now known as CurriedHippo

[12:15] *** CurriedHippo is now known as CurlyHippo

[12:15] *** CurlyHippo left
[12:15] *** kurahaupo joined
[12:17] *** kurahaupo is now known as kurahaupo_

[12:17] *** kurahaupo_ is now known as kurahaupo___

[12:17] *** kurahaupo___ is now known as kurahaupo

[12:21] *** Kaiepi joined
[12:30] *** epony joined
[12:32] *** aborazmeh joined
[12:47] *** natrys joined
[12:55] *** epony left
[13:01] *** aborazmeh left
[13:09] <El_Che> masakm, lizmat: soundtrack for your discussion https://www.youtube.com/watch?v=L397TWLwrUU

[13:10] *** Kaiepi left
[13:10] *** Kaiepi joined
[13:17] *** defaultxr left
[13:19] *** domidumont joined
[13:37] *** Kaiepi left
[13:37] *** Kaiepi joined
[13:41] *** wamba left
[14:10] *** Kaiepi left
[14:12] *** Kaiepi joined
[14:13] *** Kaiepi left
[14:13] *** Kaiepi joined
[14:23] *** xinming left
[14:25] *** xinming joined
[14:28] *** aborazmeh joined
[14:29] *** aborazmeh left
[14:31] *** aborazmeh joined
[14:41] *** epony joined
[14:43] *** b2gills left
[14:44] *** b2gills joined
[14:49] *** stoned75 joined
[15:00] *** parabolize joined
[15:07] *** titsuki joined
[15:13] *** epony left
[15:16] *** stoned75 left
[15:17] *** stoned75 joined
[15:29] *** mahafyi left
[15:33] *** aborazmeh left
[15:35] *** titsuki left
[15:36] *** titsuki joined
[15:57] *** epony joined
[15:57] *** abraxxa joined
[16:03] *** e left
[16:13] *** domidumont left
[16:16] *** kiti_nomad[m] joined
[16:18] *** domidumont joined
[16:20] *** pwr22 joined
[16:30] *** aborazmeh joined
[16:33] *** brtastic left
[16:38] *** defaultxr joined
[16:43] <Geth> Â¦ doc: a26ad28489 | (Stoned Elipot)++ | doc/Type/Range.pod6

[16:43] <Geth> Â¦ doc: Correct wording

[16:43] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/a26ad28489

[16:43] <Geth> Â¦ doc: 0c478083eb | (Stoned Elipot)++ | doc/Type/Range.pod6

[16:43] <Geth> Â¦ doc: Refer to List.fmt for Range.fmt

[16:43] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/0c478083eb

[16:43] <linkable6> Link: https://docs.raku.org/type/Range

[16:45] <Geth> Â¦ doc/range-cmp: c02da92dc7 | (Stoned Elipot)++ | doc/Type/Range.pod6

[16:45] <Geth> Â¦ doc/range-cmp: Rewording and completion for Range infix:<cmp>

[16:45] <Geth> Â¦ doc/range-cmp: review: https://github.com/Raku/doc/commit/c02da92dc7

[16:45] <Geth> Â¦ doc: stoned++ created pull request #3873: Rewording and completion for Range infix:<cmp>

[16:45] <Geth> Â¦ doc: review: https://github.com/Raku/doc/pull/3873

[16:46] <raydiak> m: use MONKEY-SEE-NO-EVAL; my @a; @a[1] = 1; say @a.raku; say @a[0]:exists; my @b := EVAL @a.raku; say @b.raku; say @b[0]:exists;

[16:46] <camelia> rakudo-moar ea102883d: OUTPUT: Â«[Any, 1]â¤Falseâ¤[Any, 1]â¤Trueâ¤Â»

[16:54] <raydiak> not only does .raku throw away sparse array information, I don't think we even have a syntax which could properly represent it as an expression without a do block. list assignment to a slice could work to construct it, but as an expression it would return the list of values on the right of the assignment instead of the sparse array, so you'd still have to wrap it in a do block so you can name the array and

[16:54] <raydiak> return it without exposing the temporary name to the surrounding context

[16:54] *** bloatable6 joined
[17:03] *** Sgeo joined
[17:03] *** aborazmeh left
[17:23] *** notable6 joined
[17:25] *** natrys left
[17:31] *** Xliff joined
[17:34] *** aborazmeh joined
[17:44] *** domidumont left
[17:55] *** wamba joined
[18:00] *** Kaiepi left
[18:01] *** Kaiepi joined
[18:02] *** Geth left
[18:08] *** kiti_nomad[m] left
[18:10] <xinming> releasable6: status

[18:10] <releasable6> xinming, Next release will happen when it's ready. 2 blockers. 191 out of 191 commits logged

[18:10] <releasable6> xinming, Details: https://gist.github.com/bc1759028b69acb4922db2a92e0fbb06

[18:10] *** epony left
[18:15] *** kiti_nomad[m] joined
[18:16] *** aborazmeh left
[18:17] *** MasterDuke left
[18:19] *** Kaiepi left
[18:25] *** MasterDuke joined
[18:30] *** Kaiepi joined
[18:34] *** Kaeipi joined
[18:35] *** Kaiepi left
[18:40] <lizmat> raydiak: [,1] *could* be such a thing I guess

[18:41] <lizmat> m: dd "use nqp; [nqp::null,44]".EVAL.raku   # alas, not the same

[18:41] <camelia> rakudo-moar ea102883d: OUTPUT: Â«"[Mu, 44]"â¤Â»

[18:46] *** sno joined
[18:48] <lizmat> raydiak: care to create a problem-solving issue for that ?

[18:49] *** aborazmeh joined
[18:52] *** stoned75 left
[18:55] <raydiak> lizmat: sure thing

[18:56] <lizmat> I guess we need some special value of Mu to indicate a hole

[18:56] <lizmat> similar to IterationEnd

[18:56] *** Kaeipi left
[18:57] *** Kaeipi joined
[18:57] <Tirifto[m]> Hello! If I have a mutable object Iâd like to make immutable while the program runs, should I just coerce it to a similar immutable type (e.g. Array â List), or is there a nicer mechanism to arrive at something similar?

[19:05] *** stoned75 joined
[19:05] <lizmat> Array.List *won't* make the entries immutable

[19:05] <raydiak> lizmat: that was the first thing I thought, but now I'm not sure an actual value is necessary. we already have :exists for logical tests, and your ",1" proposal gives us a syntax to indicate where something shouldn't :exist

[19:06] <lizmat> Tirifto[m] but why do you want to do that?  To make it a value type ?

[19:06] <lizmat> raydiak: I'm pretty sure there have been huge discussions about ,, in lists

[19:06] <lizmat> and I think the consensus was that they *should* be a syntax error

[19:07] <lizmat> as there is ambiguity

[19:07] <raydiak> do you recall what sort of ambiguity?

[19:07] <lizmat> and lack of clarity, e.g. when the first comma is on the end of a line, and the next line starts with whitespace and a comma

[19:08] <lizmat> that's an easy mistake to make

[19:09] *** aborazmeh left
[19:10] <raydiak> I suppose I could see that, fair enough. I still like ,, more than another value/type/thing, but I'm certainly no language designer

[19:12] <lizmat> it's one of the lessons learned from Perl, like not wanting sigil variance

[19:12] <lizmat> in Perl ,, is just the same as , if I recall correctly

[19:14] <lizmat> otoh, the result of such a discussion could be that existedness of an Array element is just not roundtrippable

[19:15] <lizmat> as supporting a special value would definitely affect parsing performance

[19:15] <lizmat> afk for half an hour or so

[19:17] <raydiak> I definitely agree that ,, shouldn't just collapse to ,

[19:19] <raydiak> but I wonder if sparse arrays were considered in the previous discussions. I think using ,, to skip an element is totally reasonable (and probably does exactly that in some other languages, though I can't cite them off the top of my head)

[19:23] <raydiak> as far as just saying "sparse arrays can't round-trip"...I don't like that at all. afaik, .raku is definitely intended to be an EVALable thing to produce an identical data structure, and existence is definitely part of the data structure. otherwise we're basically conceding "Raku doesn't support sparse arrays. Use a hash instead."

[19:30] <Tirifto[m]> lizmat: If âvalue typeâ means what I think it does, then probably. I just thought that immutability might make the intention behind the code clearer and improve performance, although I donât really know if the latterâs true. :P

[19:39] <raydiak> lizmat: https://github.com/Raku/problem-solving/issues/279

[19:49] *** Xliff left
[19:51] <raydiak> Tirifto[m]: I just tested, and it appears that coercing an Array to a List actually does make the entries immutable (at some point in the past, that wasn't the case)

[19:52] <raydiak> though I'm uncertain of the performance impact, and personally I doubt that sprinkling coercions around in your code will actually make it clearer from a readability standpoint, though I do understand what you're saying about conveying the semantic intention

[19:54] *** brtastic joined
[19:57] *** neshpion joined
[20:07] *** asymptotically left
[20:13] <Tirifto[m]> raydiak: Thanks for testing! It might very well be the case that it wonât be much help. I also didnât think about it too deeply, but I might give it a try and see how it goes. :-)

[20:16] *** aborazmeh joined
[20:17] *** Kaeipi left
[20:29] <lizmat> raydiak: interesting...   but it doesn't make the List a ValueType  :-(

[20:29] <raydiak> Tirifto[m]: happy to help! TIMTOWTDI, definitely. if you like it and it does what you want, go for it. the only other thought I have is premature optimization. if this isn't in a hot path, the argument could be made that your time and the verbosity of the code would be better allocated elsewhere. and if it is in a hot path, also keep in mind that the coercion itself probably has some runtime cost

[20:31] <raydiak> lizmat: are Lists usually value types? I never really thought about trying to compare lists by identity...

[20:31] <lizmat> no, because Lists *can* contain mutable elements

[20:32] <lizmat> m: my $a = 42; my $b = 666; ($a,$b) = ($b,$a); dd $a, $b

[20:32] <camelia> rakudo-moar ea102883d: OUTPUT: Â«Int $a = 666â¤Int $b = 42â¤Â»

[20:32] <lizmat> ^^ examples of lists with mutable elements

[20:34] <raydiak> huh

[20:34] <raydiak> m: my ($a, $b, $c) = ^3; my @a = $a, $b, $c; @a := @a.List; say @a; @a[0] = 1;

[20:34] <camelia> rakudo-moar ea102883d: OUTPUT: Â«(0 1 2)â¤Cannot modify an immutable List ((0 1 2))â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[20:37] <raydiak> coercion from an Array to a List seems to be special-cased to unbox all the elements. if there's no intermediate array, it's mutable:

[20:37] <raydiak> m: my ($a, $b, $c) = ^3; my @a := ($a, $b, $c); say @a; @a[0] = 1; say @a;

[20:37] <camelia> rakudo-moar ea102883d: OUTPUT: Â«(0 1 2)â¤(1 1 2)â¤Â»

[20:37] <lizmat> well, as you said, coercing an array to a List apparently deconts

[20:41] <sena_kun> .weekly https://twitter.com/koto_san_kana/status/1386057691617976324

[20:41] <sena_kun> .note https://twitter.com/koto_san_kana/status/1386057691617976324

[20:41] <sena_kun> weekly https://twitter.com/koto_san_kana/status/1386057691617976324

[20:42] <sena_kun> haha, pathetic

[20:42] * sena_kun off

[20:45] <raydiak> sena_kun++ thank you!

[20:45] <lizmat> sena_kun++   # retwat

[20:45] *** ggoebel left
[20:47] <lizmat> notable6: weekly https://twitter.com/koto_san_kana/status/1386057691617976324

[20:47] <notable6> lizmat, Noted! (weekly)

[20:47] <lizmat> ^^ sena_kun 

[20:47] *** Kaiepi joined
[20:48] <raydiak> lizmat: do we have a deeply immutable compound/"listy" value type?

[20:48] <lizmat> not in core

[20:49] <lizmat> https://modules.raku.org/dist/Tuple:cpan:ELIZABETH

[20:50] <raydiak> ah...how many datatype modules do you have? that's the third of yours I've encountered today :)

[20:50] <lizmat> Let's just say I'm more a backend than a frontend person :-)

[20:51] <raydiak> that sounds dirty...

[20:51] *** stoned75 left
[20:51] <lizmat> meh

[20:51] <lizmat> I guess a dirty mind is a joy forever :-)

[20:52] <raydiak> haha good point

[20:57] <raydiak> could Tuple implement type constraints or is default()? or would that mess up its usability/performance for core purposes?

[21:00] <raydiak> I'm not even sure if those are things implemented by the class itself, or if that happens elsewhere. maybe it just works as is?

[21:02] <lizmat> interesting idea...  hmmm

[21:03] <lizmat> it was developed to be as fast as possible given the situation... hence it is directly using VMArrays under the hood

[21:04] <lizmat> and those don't know about types

[21:06] <lizmat> raydiak: please create an issue for that... to prevent this notion from falling through the cracks

[21:06] <lizmat> in the Tuple repo please :-)

[21:06] <raydiak> okay :)

[21:09] <raydiak> done

[21:09] *** aborazmeh left
[21:10] <lizmat> thanks!

[21:10] *** epony joined
[21:11] <raydiak> of course, happy to help

[21:12] <raydiak> basically makes it a Blob for higher level non-native value types

[21:15] <lizmat> Hmm... maybe it should therefore be incorporate this into the Blob role

[21:15] <lizmat> m: Blob[Any] = "foo", 21

[21:15] <camelia> rakudo-moar 94f966d18: OUTPUT: Â«Could not instantiate role 'Blob':â¤Can only parameterize with native int types, not 'Any'.â¤  in any protect at gen/moar/stage2/NQPCORE.setting line 1216â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[21:16] *** __jrjsmrtn__ left
[21:16] *** pecastro left
[21:16] *** agentzh left
[21:16] *** maggotbrain left
[21:16] *** CIAvash left
[21:16] *** kini left
[21:16] *** codesections left
[21:16] *** Grinnz left
[21:16] *** kurahaupo left
[21:16] *** aluaces left
[21:16] *** HobGoblin left
[21:16] *** db48x left
[21:16] *** bdju left
[21:16] *** stux|RC-only left
[21:16] *** wamba left
[21:16] *** notable6 left
[21:16] *** bloatable6 left
[21:16] *** linkable6 left
[21:16] *** swaggboi left
[21:16] *** skaji_ left
[21:16] *** nativecallable6 left
[21:16] *** leont left
[21:16] *** committable6 left
[21:16] *** quotable6 left
[21:16] *** statisfiable6 left
[21:16] *** benchable6 left
[21:16] *** releasable6 left
[21:16] *** bisectable6 left
[21:16] *** spycrab0 left
[21:16] *** b2gills left
[21:16] *** dogbert11 left
[21:16] *** LizBot left
[21:16] *** sena_kun left
[21:16] *** eseyman left
[21:16] *** kst left
[21:16] *** doconthe2ocks left
[21:16] *** neshpion left
[21:16] *** DiffieHellman left
[21:16] *** tejr left
[21:16] *** xelxebar left
[21:16] *** MasterDuke left
[21:16] *** pwr22 left
[21:16] *** simcop2387 left
[21:16] *** greppable6 left
[21:16] *** tellable6 left
[21:16] *** jhill left
[21:16] *** unicodable6 left
[21:16] *** abraxxa left
[21:16] *** sftp left
[21:16] *** PotatoGim left
[21:16] *** rba left
[21:16] *** zostay left
[21:16] *** kawaii left
[21:16] *** peteretep left
[21:16] *** epony left
[21:16] *** rindolf left
[21:16] *** gabiruh left
[21:16] *** tinita left
[21:16] *** finsternis left
[21:16] *** HarmtH left
[21:16] *** kybr left
[21:16] *** stux|RC left
[21:16] *** telex left
[21:16] *** Woodi left
[21:16] *** sno left
[21:16] *** defaultxr left
[21:16] *** kvw_5_ left
[21:16] *** solitario left
[21:16] *** grumble left
[21:16] *** ComputerTech left
[21:16] *** kiti_nomad[m] left
[21:16] *** juanfra__ left
[21:16] *** albino left
[21:16] *** rypervenche left
[21:16] *** Kaiepi left
[21:16] *** gordonfish left
[21:16] *** dotdotdot left
[21:16] *** wingfold left
[21:16] *** webstrand left
[21:16] *** perigrin left
[21:16] *** japhb left
[21:16] *** rjbs left
[21:16] *** eater left
[21:16] *** tonyo left
[21:16] *** cooper left
[21:16] *** krunen left
[21:16] *** m6locks left
[21:16] *** sjn left
[21:16] *** leah2 left
[21:16] *** takside left
[21:16] *** dylanwh left
[21:16] *** ssm left
[21:16] *** esh left
[21:16] *** Ekho left
[21:16] *** Ulti_ left
[21:16] *** samcv left
[21:16] *** klapperl left
[21:16] *** samebchase- left
[21:16] *** pat_js left
[21:16] *** cxreg left
[21:16] *** nebuchadnezzar left
[21:16] *** tomaw left
[21:16] <lizmat> m: my Blob[Any] $foo = "foo", 21

[21:16] *** sno joined
[21:16] *** defaultxr joined
[21:16] *** kvw_5_ joined
[21:16] *** solitario joined
[21:16] *** grumble joined
[21:16] *** ComputerTech joined
[21:16] *** cosimo joined
[21:16] *** Maylay joined
[21:16] *** xkr47 joined
[21:16] *** brown121407 joined
[21:16] *** moony joined
[21:16] *** lnx joined
[21:16] *** ingy joined
[21:17] *** wamba joined
[21:17] *** notable6 joined
[21:17] *** bloatable6 joined
[21:17] *** b2gills joined
[21:17] *** kurahaupo joined
[21:17] *** aluaces joined
[21:17] *** linkable6 joined
[21:17] *** __jrjsmrtn__ joined
[21:17] *** pecastro joined
[21:17] *** swaggboi joined
[21:17] *** dogbert11 joined
[21:17] *** LizBot joined
[21:17] *** skaji_ joined
[21:17] *** sena_kun joined
[21:17] *** nativecallable6 joined
[21:17] *** kst joined
[21:17] *** leont joined
[21:17] *** committable6 joined
[21:17] *** quotable6 joined
[21:17] *** statisfiable6 joined
[21:17] *** benchable6 joined
[21:17] *** releasable6 joined
[21:17] *** bisectable6 joined
[21:17] *** agentzh joined
[21:17] *** HobGoblin joined
[21:17] *** CIAvash joined
[21:17] *** kini joined
[21:17] *** db48x joined
[21:17] *** codesections joined
[21:17] *** bdju joined
[21:17] *** stux|RC-only joined
[21:17] *** doconthe2ocks joined
[21:17] *** eseyman joined
[21:17] *** maggotbrain joined
[21:17] *** spycrab0 joined
[21:17] *** Grinnz joined
[21:17] *** pierrot joined
[21:17] *** MitarashiDango[m joined
[21:17] *** mtj joined
[21:17] *** summerisle joined
[21:17] *** d_t_b joined
[21:17] *** demostanis[m] joined
[21:17] *** shadowpaste joined
[21:17] *** timeless joined
[21:17] *** gugod joined
[21:17] *** tyil joined
[21:17] *** a6502 joined
[21:17] *** nine joined
[21:17] *** hobbs joined
[21:17] *** masak joined
[21:17] *** mniip joined
[21:17] *** jast joined
[21:17] *** timlegge joined
[21:17] *** charsbar joined
[21:17] *** pnu__ joined
[21:17] *** mojca joined
[21:17] *** moon-child joined
[21:17] *** a3f joined
[21:17] *** jcallen joined
[21:17] *** mrsolo joined
[21:17] *** jjatria joined
[21:17] *** buffet joined
[21:17] *** nicholatian joined
[21:17] *** Sir_Ragna joined
[21:17] *** marcusr joined
[21:17] *** ambs joined
[21:17] *** DarthGandalf joined
[21:17] *** SmokeMachine joined
[21:17] *** daxim joined
[21:17] *** Grauwolf joined
[21:17] *** tbrowder joined
[21:17] *** riatre joined
[21:17] *** perry joined
[21:17] *** ugexe joined
[21:17] *** Altreus joined
[21:17] *** bonz060 joined
[21:17] *** KotH joined
[21:17] *** avar joined
[21:17] *** robinsmidsrod joined
[21:17] *** _________ joined
[21:17] *** Mithaldu joined
[21:17] *** synthmeat joined
[21:17] *** tadzik joined
[21:17] *** raydiak joined
[21:17] *** benaiah joined
[21:17] *** mightypork joined
[21:17] *** renormalist joined
[21:17] *** torbjorn joined
[21:17] *** literal joined
[21:17] *** dustinm` joined
[21:17] *** samebchase joined
[21:17] *** jmcgnh left
[21:17] *** MasterDuke joined
[21:17] *** neshpion joined
[21:17] *** tejr joined
[21:17] *** xelxebar joined
[21:18] *** xelxebar left
[21:18] *** kiti_nomad[m] joined
[21:18] *** juanfra__ joined
[21:18] *** patrickbkr[m] joined
[21:18] *** rjeli joined
[21:18] *** albino joined
[21:18] *** rypervenche joined
[21:18] *** mendel joined
[21:18] *** m_athias joined
[21:18] *** perlmaros joined
[21:18] *** fvox_ joined
[21:18] *** spacebat2 joined
[21:18] *** Grrrr joined
[21:18] *** wmoxam_ joined
[21:18] *** moritz joined
[21:18] *** oftl joined
[21:18] *** samebchase- joined
[21:18] *** pat_js joined
[21:18] *** cxreg joined
[21:18] *** nebuchadnezzar joined
[21:18] *** tomaw joined
[21:18] *** leah2 joined
[21:18] *** Juerd joined
[21:18] *** uzl[m] joined
[21:18] *** draco100[m] joined
[21:18] *** AlexDaniel` joined
[21:18] *** tusooa joined
[21:18] *** takside joined
[21:18] *** dylanwh joined
[21:18] *** ssm joined
[21:18] *** esh joined
[21:18] *** Ekho joined
[21:18] *** Ulti_ joined
[21:18] *** samcv joined
[21:18] *** klapperl joined
[21:19] *** Kaiepi joined
[21:19] *** gordonfish joined
[21:19] *** wingfold joined
[21:19] *** webstrand joined
[21:19] *** perigrin joined
[21:19] *** japhb joined
[21:19] *** rjbs joined
[21:19] *** cgfbee joined
[21:19] *** brass joined
[21:19] *** Util joined
[21:19] *** eater joined
[21:19] *** tonyo joined
[21:19] *** cooper joined
[21:19] *** krunen joined
[21:19] *** sjn joined
[21:19] *** m6locks joined
[21:19] *** demostanis[m] left
[21:19] *** pwr22 joined
[21:19] *** simcop2387 joined
[21:19] *** greppable6 joined
[21:19] *** tellable6 joined
[21:19] *** jhill joined
[21:19] *** Nasrudin joined
[21:19] *** Garland_g[m] joined
[21:19] *** Tirifto[m] joined
[21:19] *** xi- joined
[21:19] *** a3r0 joined
[21:19] *** Bucciarati joined
[21:19] *** unicodable6 joined
[21:19] *** roguelazer joined
[21:19] *** jdv79 joined
[21:19] *** bartolin_ joined
[21:19] *** pwr22 left
[21:19] *** Tirifto[m] left
[21:19] *** Ekho left
[21:19] *** cgfbee left
[21:19] *** gordonfish left
[21:19] *** kiti_nomad[m] left
[21:19] *** juanfra__ left
[21:19] *** draco100[m] left
[21:19] *** uzl[m] left
[21:19] *** tusooa left
[21:19] *** CIAvash left
[21:19] *** MitarashiDango[m left
[21:20] *** AlexDaniel` left
[21:20] *** abraxxa joined
[21:20] *** sftp joined
[21:20] *** rba joined
[21:20] *** zostay joined
[21:20] *** kawaii joined
[21:20] *** peteretep joined
[21:20] *** elcaro joined
[21:20] *** karupanerura joined
[21:20] *** vaskozl joined
[21:20] *** spacekookie joined
[21:20] *** camelia joined
[21:20] *** Nasrudin left
[21:20] *** kawaii left
[21:21] *** stux|RC joined
[21:22] *** gabiruh joined
[21:22] *** tinita joined
[21:22] *** finsternis joined
[21:22] *** HarmtH joined
[21:22] *** kybr joined
[21:22] *** telex joined
[21:22] *** Woodi joined
[21:22] *** gfldex joined
[21:22] *** APic joined
[21:22] *** andinus joined
[21:22] <raydiak> that was a pretty big split

[21:22] *** finstern1s joined
[21:22] *** finsternis left
[21:22] *** patrickbkr[m] left
[21:23] *** dotdotdot joined
[21:23] *** kawaii joined
[21:24] *** Garland_g[m] left
[21:24] *** PotatoGim joined
[21:24] *** jhill left
[21:26] <lizmat> yeah...  :-)

[21:26] <raydiak> not sure about making it a Blob formally. Blob is pretty binary-focused. it has methods like .bytes, .decode, .unpack, all that stuff

[21:27] <lizmat> true...  but it *is* immutable, contrary to Buf

[21:27] *** BuildTheRobots joined
[21:27] <lizmat> but yeah... maybe not

[21:27] *** cgfbee joined
[21:29] *** brtastic left
[21:29] <raydiak> my vote would be Tuple does Positional, and is more of a sibling of Blob

[21:29] *** jhill joined
[21:29] <lizmat> well, Tuple does already do Positional  :-)

[21:31] <raydiak> heh I assumed. I was just looking at the type graph for Blob and thinking in those terms

[21:33] <japhb> FWIW, CBOR::Simple will treat basic Positional as generic "holds anything, every item may be different".  Blob is already special cased (making it quite fast indeed), as will the other native typed arrays once I implement the appropriate extension that allows avoiding endian swaps.

[21:36] <raydiak> oh japhb, I was meaning to ask...can you add your benchmark script to the CBOR::Simple repo? like in a tools subdir or something?

[21:38] *** Manifest0 left
[21:38] <raydiak> I had some thoughts about performance improvements, and even if nothing I try ends up working out it'd be an interesting/educational real-life test case anyway

[21:45] <MasterDuke> japhb: wouldn't it make sense to handle Iterable same as Positional?

[21:48] *** dogbert11 left
[21:49] *** dogbert11 joined
[21:51] *** demostanis[m] joined
[21:52] *** aborazmeh joined
[21:59] *** sno left
[22:01] *** aborazmeh left
[22:08] *** pecastro left
[22:10] *** webstrand left
[22:14] <raydiak> I have a couple questions about the current state of META files. The first is version. I've seen different places say version is optional, it's required but '*' is okay, or it's required and must be an actual version number. which is correct? where do I find authoratative information on this (couldn't find it in roast the last time I tried)? What do I do if a module is in a nascent state and incrementing a

[22:14] <raydiak> version number for every breaking change is a burden? if an actual number is required, can I just leave it at e.g. "0" or "0.0.1" and keep making changes or will that cause something to misbehave in some external tool or ecosystem or package manager or whatever? kinda wonder if I shouldn't just somehow use the git commit hash, or "major.minor." prepended to an incrementing number for every commit like an index

[22:14] <raydiak> into the commit history since the last major/minor tag or along those lines...

[22:15] <raydiak> or are we just really trying hard to strong-arm people into doing versioning correctly even at the earliest alpha stages of development?

[22:18] <raydiak> also, what if people explicitly ask for an older version from their use statement? it can be available in the git repo and tagged and everything, but the META only declares the latest version

[22:24] *** MitarashiDango[m joined
[22:24] *** Tirifto[m] joined
[22:24] *** juanfra__ joined
[22:24] *** ThaEwat joined
[22:24] *** kiti_nomad[m] joined
[22:24] *** uzl[m] joined
[22:24] *** tusooa joined
[22:24] *** patrickbkr[m] joined
[22:24] *** AlexDaniel` joined
[22:24] *** pwr22 joined
[22:24] *** Nasrudin joined
[22:24] *** CIAvash joined
[22:24] *** Garland_g[m] joined
[22:24] *** draco100[m] joined
[22:27] <raydiak> my other question atm is about "auth". is github: or zef: or cpan: or whatever really necessary? does it get functionally used for anything? what if I migrate from one to another, won't that break people's existing use statements if they're explicit about auth? or have a same-named account on multiple and don't personally consider any particular one "more authoratative"? wouldn't it just be better to use my

[22:27] <raydiak> handle without tying it to one specific service, which seems like a potential failure point out of my own control? also what if I want the authority to be something tied to my own domain/server? just write whatever I want in there? then what's the point of the service: prefix at all?

[22:28] *** dogbert17 joined
[22:29] *** juanfra__ is now known as Guest6079

[22:29] *** xelxebar joined
[22:30] <japhb> raydiak: In reverse order, the ones that I can answer:

[22:31] *** DiffieHellman joined
[22:31] *** aluaces left
[22:31] * lizmat is glad that japhb is around to answer questions while she hits the sack

[22:31] <japhb> The name needs to be unique within some naming authority, and that naming authority has to be the one that controls access to that data store.  We just have some recognized naming authorities already, but there's no reason you couldn't define/enforce some other one.

[22:32] <japhb> Have a good night, lizmat!  :-)

[22:32] *** finstern1s is now known as finsternis

[22:32] <raydiak> g'night lizmat! it was nice chatting with you

[22:32] <japhb> raydiak: When you upload packages to zef or cpan, you are uploading a snapshot tarball of a particular version.  So they can keep all the versions they want.

[22:33] *** dogbert11 left
[22:33] <japhb> :api<0> is explicitly saying "I've thought about it, and I can tell you right now the API is still liquid."

[22:34] <japhb> Version '*' turns out to be a problem; its interpretation causes issues, so don't use it.  fez won't even let you.

[22:34] <japhb> Yeah, I can add the benchmark script; I was planning to at some point, but kept forgetting.  :-)

[22:36] *** jmcgnh joined
[22:36] *** wamba left
[22:36] *** aborazmeh joined
[22:36] <japhb> MasterDuke: Iterable also includes Associative and Seq, and those both need some care to get right.  Associative is already handled, Seq I'm not sure if I'll .cache in order to enforce writing only definite lists, or if I'll consider that a clue that the user wants indefinite-length array output.

[22:37] <japhb> Did I miss anything?

[22:37] <MasterDuke> i suspected something like that, makes sense

[22:39] *** epony joined
[22:41] <raydiak> afaik, Iterable means you can loop over it. e.g. Associative (actually, Map) does Iterable. doesn't mean all Iterables have to implement Map. e.g. Lists are also Iterable

[22:42] <japhb> Hmmm, should the benchmark script go in tools/ or examples/?

[22:43] <japhb> raydiak: Yes, I know, I meant that Associative has to be handled separately in CBOR than other types of Iterables, since it has a special encoding and special rules about key order and such.

[22:43] *** Ekho joined
[22:44] <japhb> Which is to say an Associative and an Iterable containing Pairs is NOT the same in CBOR.

[22:44] <japhb> I guess benchmarking is more of a tool thing than an example ...

[22:45] <raydiak> hmmm...I could see a good justification for either. if it has facilities for repetition and timing and outputting that kind of data, put that part in a script in tools, and the actual data and usage in examples?

[22:47] <raydiak> I could also see an argument for refactoring the part I suggested go in examples into tests in t, and have the benchmark tool run certain specific test files in loops with timing

[22:50] *** webstrand joined
[22:50] <japhb> raydiak: Interesting idea.  I don't think I'd want t/ scripts to be slow enough to actually give good performance measurements (though that might be useful for xt/), because it would slow down the edit/run/debug loop

[22:50] <japhb> Anyway, I just pushed it.

[22:51] <japhb> As the comment at the top says, you'll need a medium-large JSON file to test with (to compare against JSON::Fast on its "home turf"), and I just used the zef ecosystem data for that.

[22:51] <raydiak> good point

[22:51] <raydiak> thanks!

[22:52] *** dogbert11 joined
[22:52] *** dogbert12 joined
[22:55] *** dogbert17 left
[22:56] <raydiak> wonder if there'd be much difference using a different dataset, especially one more deeply nested, or more numbers instead of strings, etc. if you were wanting to use this for MUGS, I'd expect many games to use a lot more numbers

[22:56] *** dogbert11 left
[23:01] *** dogbert17 joined
[23:02] *** dogbert12 left
[23:03] *** abraxxa left
[23:05] <raydiak> japhb: also, I was just curious for my own education, what factors made you choose CBOR over e.g. BSON or UBJSON or whatever else (whether JSON-inspired/related or not)?

[23:10] <japhb> raydiak: The fact that it was self-describing and self clocking, the number of IETF specs that refer to it, the fact that it was explicitly designed to have a relatively simple codec in most languages, the (actively used) extensibility, the richer data model, the fact that it didn't require extra encoding for utf8 or blob (both just slot right in with a leading bytecount), ...

[23:11] <japhb> raydiak: I'm still working on filling out more different scenarios in the perf-test, especially once I start doing packed structures more complex than 8-bit uints.  But I spent yesterday more working on the unnecessarily slow bits that I'd already found.  :-)

[23:13] <japhb> I've got an idea for a restructuring of the decoder that I *think* will be an across-the-board improvement (faster for decoding any non-trivial structure), but I have no idea whether it will be a few % or a speed doubling.

[23:13] <japhb> We shall see.  :-)

[23:14] <raydiak> sounds like it's off to a great start! have you tried it under the moar profiler yet?

[23:15] *** dogbert11 joined
[23:16] <japhb> Nope, haven't done that yet.  I wish we had a good per-line profiler, like NYTProf is for perl5, because the routines here are HUGE with big branching structures, so per-call statistics are too rough.  :-/

[23:16] <japhb> OTOH, the Moar profiler does per-block, doesn't it?  That might work out.

[23:17] <raydiak> I don't recall, haven't tried it in many years, I mostly just remember that it exists

[23:17] <japhb> nodnod

[23:18] <raydiak> that was one of my optimization thoughts: I was under the impression that these days, multis are often faster than long sets of conditionals

[23:19] *** dogbert17 left
[23:20] *** gordonfish joined
[23:21] <kawaii> which operator would I use to do three-way string comparison of three different variables?

[23:23] <raydiak> leg for strings specifically

[23:24] <kawaii> oh I didn't know about leg!

[23:24] <kawaii> lemme try!

[23:29] <raydiak> or coll/unicmp may be more correct depending on your intention. and sort/collate may be easier and/or faster if you're sorting a list of strings

[23:31] <raydiak> I don't actually know much about these things, just look at https://docs.raku.org/language/operators and search the page for "three-way"

[23:41] <raydiak> so in retrospect, it would have been more accurate to say for strings specifically: leg by codepoint, unicmp by default lexographic order, or coll by lexographic order customizable via $*COLLATION

[23:44] <japhb> m: given 5 { when * % 2 { say "Odd"; &?BLOCK(6) }; when * %% 2 { say "Even" }}

[23:44] <camelia> rakudo-moar 94f966d18: OUTPUT: Â«Oddâ¤Evenâ¤Â»

[23:44] <japhb> ^^ Why does that even work?  Why does &?BLOCK go to the given and not to the when?

[23:44] <raydiak> heh, even that isn't right. leg is also lexographic; cmp (not string-specific) is by codepoint, and coll is something I don't fully understand yet

[23:46] *** aborazmeh left
