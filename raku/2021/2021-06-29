[00:03] *** reportable6 left
[00:04] *** reportable6 joined
[00:14] *** slu left
[00:18] *** avuserow left
[00:18] *** avuserow joined
[00:36] *** sono joined
[00:38] <discord-raku-bot> <Hydrazer#4827> probably like this or something

[00:38] <discord-raku-bot> <Hydrazer#4827>  $x +< (+^$y)

[00:39] <discord-raku-bot> <Hydrazer#4827> well you don't really need to brackets but it's more clear

[00:39] *** rassoc joined
[00:41] <rassoc> m: (<a 1>, <b 2>).flat.Hash.say # moon-child

[00:41] <camelia> rakudo-moar dba9f56af: OUTPUT: «{a => 1, b => 2}␤»

[00:41] <rassoc> shame .flat isn't working for arrays :(

[00:41] <rassoc> .List.flat is just as ugly as .map(&slip)

[00:47] *** monkey_ joined
[00:51] *** melezhik left
[01:03] <moon-child> huh, why doesn't Array.flat work the same way?

[01:22] <rassoc> who knows. another one of those raku mysteries i'm facing coming from ruby

[01:23] <rassoc> it's even smoother there: kv.to_h # => {:a=>1, :b=>2}

[01:25] <Juerd> It's pretty smooth in Raku if you have actual pairs to begin with, or a single list of alternating keys and values.

[01:25] <Juerd> m: hash <a b c d>

[01:25] <camelia> rakudo-moar dba9f56af: ( no output )

[01:25] <Juerd> m: say hash <a b c d>

[01:25] <camelia> rakudo-moar dba9f56af: OUTPUT: «{a => b, c => d}␤»

[01:25] <Juerd> m: say hash :a<b>, :c<d>

[01:25] <camelia> rakudo-moar dba9f56af: OUTPUT: «{a => b, c => d}␤»

[01:26] <Juerd> Now, transforming a 2 element list to a pair is just unnecessarily complicated.

[01:27] <Juerd> As is flattening something beyond the outermost list.

[01:31] *** thundergnat joined
[01:31] <thundergnat> m: say hash [<a b>, <c d>]».map: &flat

[01:31] <camelia> rakudo-moar dba9f56af: OUTPUT: «{a => b, c => d}␤»

[01:32] <rassoc> still not quite sure why this has to hold, as specified in roast:

[01:32] <rassoc> cmp-ok $x.flat,  '===', $x, 'Array:U.flat is identity';

[01:37] *** thundergnat left
[01:39] *** cornett left
[01:45] <moon-child> Array:U or Array:D?

[01:45] *** _ed joined
[01:48] *** rassoc left
[01:50] *** _ed left
[02:06] *** monkey_ left
[02:07] *** abraxxa left
[02:18] *** _ed joined
[02:43] *** _ed left
[03:15] *** wtwt5237 joined
[03:17] <wtwt5237> hi, all. I have been keeping a runtime benchmark for the raku language for every release in the past two years. In the past few months, I see a large increase in runtime for the same task performed with newly released versions

[03:17] <tellable6> 2020-06-23T07:14:28Z #raku <MasterDuke> wtwt5237: i get fluctuating numbers on repeated runs. as low as 5.9s and as high as 7.2s. you might just have gotten a lucky 2020.02 and an unlucky 2020.0(5|6)

[03:17] <wtwt5237> https://github.com/wtwt5237/raku-for-bioinformatics/blob/master/README.md

[03:18] <wtwt5237> I want to bring this to the attention of the developers, so they may look into why

[03:22] <moon-child> wtwt5237: if you want to get dev eyes on that, better places are probably #raku-dev and #moarvm

[03:25] <moon-child> that said, if you are looking to make code performant, regex are probably not the way to go.  You might also want to look into nqp.  But (assuming MasterDuke's hypothesis is not correct) performance regressions are still worth looking into

[03:26] *** _ed joined
[03:28] <wtwt5237> thx!

[03:29] *** wtwt5237 left
[03:29] *** monkey_ joined
[03:30] *** _ed left
[03:52] *** RandalSchwartz left
[04:12] *** monkey_ left
[04:35] *** whati joined
[04:36] *** whati left
[05:36] *** greppable6 left
[05:36] *** statisfiable6 left
[05:36] *** coverable6 left
[05:36] *** squashable6 left
[05:36] *** notable6 left
[05:36] *** linkable6 left
[05:36] *** reportable6 left
[05:36] *** shareable6 left
[05:36] *** nativecallable6 left
[05:36] *** committable6 left
[05:36] *** tellable6 left
[05:36] *** bloatable6 left
[05:36] *** evalable6 left
[05:36] *** quotable6 left
[05:36] *** bisectable6 left
[05:36] *** sourceable6 left
[05:36] *** benchable6 left
[05:36] *** releasable6 left
[05:36] *** unicodable6 left
[05:37] *** bloatable6 joined
[05:37] *** sourceable6 joined
[05:37] *** releasable6 joined
[05:37] *** squashable6 joined
[05:37] *** unicodable6 joined
[05:37] *** bisectable6 joined
[05:38] *** evalable6 joined
[05:38] *** coverable6 joined
[05:38] *** reportable6 joined
[05:38] *** greppable6 joined
[05:38] *** tellable6 joined
[05:38] *** notable6 joined
[05:38] *** committable6 joined
[05:39] *** statisfiable6 joined
[05:39] *** shareable6 joined
[05:39] *** benchable6 joined
[05:39] *** nativecallable6 joined
[05:40] *** quotable6 joined
[05:40] *** linkable6 joined
[05:52] *** gordonfish- joined
[05:54] *** gordonfish left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:10] *** Kaiepi left
[06:12] *** Kaiepi joined
[06:32] *** abraxxa joined
[06:33] *** abraxxa1 joined
[06:37] *** abraxxa left
[07:09] *** parv joined
[07:29] *** Sgeo left
[07:50] *** dakkar joined
[08:09] *** juanfra left
[08:09] *** demostanis[m] left
[08:09] *** AlexDaniel left
[08:09] *** cnx left
[08:09] *** tyil[m] left
[08:09] *** CIAvash left
[08:09] *** littlebenlittle[ left
[08:09] *** ComplYue[m] left
[08:33] *** linkable6 left
[08:34] *** linkable6 joined
[08:35] *** linkable6 left
[08:38] *** linkable6 joined
[08:51] *** parv left
[09:03] *** patrickb joined
[09:07] *** dakkar left
[09:08] *** dakkar joined
[09:09] *** kawaii_ is now known as kawaii

[09:16] *** _ed joined
[09:21] *** _ed left
[09:38] *** dakkar left
[09:38] *** dakkar joined
[10:09] *** rassoc joined
[10:22] <discord-raku-bot> <gfldex#8222> m:```use v6.*; say 3```

[10:22] *** sono left
[10:22] <discord-raku-bot> <gfldex#8222> m:```use v6.*; say 4```

[10:23] <tbrowder> m: use Modf

[10:23] <camelia> rakudo-moar eab780f38: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find Modf in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/raku…»

[10:24] *** dakkar_ joined
[10:24] *** dakkar_ left
[10:24] <tbrowder> m: use Text::Utils

[10:24] <camelia> rakudo-moar eab780f38: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find Text::Utils in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camel…»

[10:24] <tbrowder> m: use JSON::Fast

[10:24] <camelia> rakudo-moar eab780f38: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find JSON::Fast in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/cameli…»

[10:25] <tbrowder> m: use Test

[10:25] <camelia> rakudo-moar eab780f38: ( no output )

[10:25] <tbrowder> g'day, all

[10:27] *** discord-raku-bot left
[10:27] *** discord-raku-bot joined
[10:38] *** ufobat joined
[10:50] *** Xliff left
[10:52] *** Ven_de_Thiel joined
[10:52] <Ven_de_Thiel> o/

[11:02] *** linkable6 left
[11:05] *** linkable6 joined
[11:11] <lizmat> And another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/06/29/2021-26-r3/

[11:12] <moritz> and another one hits, and another hits, another one htis the net!

[11:14] <rassoc> lizmat: thanks!

[11:15] <rassoc> moon-child: the Array.flat issue seems to go back a fair bit: https://github.com/rakudo/rakudo/pull/834#issuecomment-238749080

[11:16] *** linkable6 left
[11:16] <rassoc> even zoffix thought it should be changed

[11:17] *** linkable6 joined
[11:49] *** abraxxa1 left
[11:52] *** abraxxa joined
[11:57] *** dogbert11 joined
[11:57] *** dogbert17 left
[12:02] *** reportable6 left
[12:04] *** abraxxa left
[12:05] *** reportable6 joined
[12:05] *** abraxxa joined
[12:08] *** colomon left
[12:33] *** frost left
[12:49] *** _ed joined
[12:56] *** _ed left
[13:02] *** RandalSchwartz joined
[13:03] *** kawaii left
[13:20] <nirnam> ever will cached and hyper gonna play nice together?

[13:21] <nirnam> is there a road map for that?

[13:21] *** kawaii_ joined
[13:21] *** _ed joined
[13:22] <dakkar> nirnam: how do they break? (never used them together, I'd like to know of problems beforehand)

[13:23] <nirnam> how do they break? interestingly

[13:26] <dakkar> can you show me an example?

[13:26] *** _ed left
[13:26] <perlbot> nirnam pasted a new file at https://l.perl.bot/p/3rkd92 - 

[13:27] <nirnam> ofcourse, dakkar 

[13:28] <dakkar> oooh, I had completely mis-understood/read, I thought you were talking about the `.cache` method on Seq

[13:28] <nirnam> the same thing can be write in perl 5 with thread and thread::shared as cache (I think, never tried)

[13:29] <nirnam> oh, sorry I mean sub cache

[13:29] <dakkar> yeah yeah, if `is cached` doesn't lock, that code will produce pretty weird results/errors

[13:29] <dakkar> ($work meeting, brb)

[13:41] <Doc_Holliwood> m: say grep *.contains( none <b c d> ), <a b c d e>

[13:41] <camelia> rakudo-moar eab780f38: OUTPUT: «(a e)␤»

[13:41] <Doc_Holliwood> how do none junctions work?

[13:41] <Doc_Holliwood> feels like spooky action to me

[13:49] <moritz> basically just like not(any(...))

[13:54] *** nirnam left
[13:54] *** nirnam joined
[14:14] *** _ed joined
[14:18] *** Sgeo joined
[14:19] *** _ed left
[14:29] *** _ed joined
[14:34] *** _ed left
[14:53] *** Shaeto joined
[15:15] *** _ed joined
[15:16] *** patrickb left
[15:19] *** _ed left
[15:31] *** _ed joined
[15:37] *** _ed left
[15:39] *** abraxxa left
[15:49] *** abraxxa joined
[15:58] *** neshpion joined
[15:59] *** ufobat left
[16:03] *** abraxxa left
[16:04] *** abraxxa joined
[16:09] <tonyo> tbrowder: fez isn't a module creator, just a utility for making your module show up in the ecosystem

[16:09] <tonyo> it produces as few side effects as possible

[16:09] <tbrowder> gotcha, thnx

[16:14] <tbrowder> so the fez user needs to manually ensure the data in META6 are consistent with what zef knows about the release. is that a true statement?

[16:14] <tonyo> yea

[16:14] <tonyo> it makes no changes to files, no version bumps, no auth changes in the META etc

[16:16] <tonyo> mi6 already does that stuff so i didn't see the need to reinvent (i do everything manually anyway), there is a PR on mi6 to integrate with fez

[16:16] <tbrowder> ok, so should i remove any adverbs on the module file’s unit name line?

[16:16] <tonyo> in what sense?

[16:18] <tbrowder> i think mi6 puts it there, e.g.: unit module foo:auth<zef:tb>:ver<0.2.3>;

[16:19] <tbrowder> i think mi6 doesn’t care if i remove all

[16:20] <tbrowder> i’ll check mi6 some more, though.

[16:20] <tonyo> oh, that's fine - fez makes sure the resources claimed in the meta actually exist and vice versa but doesn't parse or make sure they load or anything

[16:21] <tbrowder> gotcha! looking good, thnx

[16:29] <tonyo> i see modf up there, lookin good

[16:32] *** _ed joined
[16:37] *** dakkar left
[16:39] *** _ed left
[16:44] *** Ven_de_Thiel left
[16:53] *** bd3i joined
[17:24] *** _ed joined
[17:35] *** _ed left
[17:45] *** _ed joined
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:05] *** rassoc left
[18:17] *** _ed left
[18:21] *** RaycatWhoDat joined
[18:23] *** gordonfish- is now known as gordonfish

[18:36] *** Shaeto left
[18:36] *** parv joined
[18:36] *** parv left
[18:36] *** parv joined
[18:44] *** nirnam left
[18:46] *** nirnam joined
[18:46] *** RandalSchwartz left
[18:54] *** RaycatWhoDat left
[18:55] *** _ed joined
[18:57] *** abraxxa-home joined
[19:08] *** _ed left
[19:31] <[Coke]> nirnam: if you haven't already, please open a ticket for that hyper/cached issue. (note that cached is experimental, but this definitely needs to be fixed if it's going to go mainstream)

[19:34] <[Coke]> https://github.com/rakudo/rakudo/blob/master/lib/experimental.rakumod#L3-L19 - there's no locking going on there.

[19:35] <nirnam> I tried manual caching, give similar error, and switch hyper with thread same error, there's something more going here

[19:35] <MasterDuke> manual caching with locking?

[19:36] <nirnam> nope

[19:38] * [Coke] thinks https://docs.raku.org/type/Lock::Async might be enough?

[19:40] <nirnam> If it break the way I think it break, just not let each hyper modipy the same caches at the same time would be enough

[19:40] <MasterDuke> you have to have some sort of locking, modifying an array or hash isn't thread-safe. currently you'll get segfaults and such, though eventually we hope to made it higher-level errors

[19:40] <nirnam> But I just ficking up raku from perl5 recently, I'm not sure if I can make that happen

[19:40] <nirnam> picking*

[19:41] <[Coke]> for now, I'd skip the cached then until we can fix this bug.

[19:43] <[Coke]> trying to add a simple lock to :cached...

[19:43] * MasterDuke is trying the same thing

[19:43] <nirnam> :cached and .hyper would speed up that snippet code, especially if it that easy this would be a sole for me

[19:45] <nirnam> alway apreciate a tool that have parallelism in the design, except js async there not much I can think off

[19:46] <[Coke]> MasterDuke: worse here: MoarVM oops: MVM_str_hash_entry_size called with a stale hashtable pointer

[19:47] <[Coke]> er, whoops it threw out my change.

[19:47] <[Coke]> one sec. :)

[19:48] <[Coke]> ok, doesn't crash but is always returning Nil...

[19:48] *** dvergin joined
[19:50] <[Coke]> MasterDuke: https://gist.github.com/coke/e70575dd882c0b0a28a9f475d6c75b03 is not quite right

[19:51] <MasterDuke> yeah, i'm not sure why (haven't done much locking code myself)

[19:51] <[Coke]> ... don't need the ternary if we're only locking the callsame...

[19:51] <MasterDuke> i have almost the identical change locally

[19:52] *** dvergin left
[19:53] <[Coke]> I think the callsame might need changing.

[19:55] <[Coke]> https://gist.github.com/coke/e70575dd882c0b0a28a9f475d6c75b03 has my current version, which fails to crash, but returns Nil

[19:56] <[Coke]> I bet the callsame is confused because now it's in the protect.

[19:57] <[Coke]> oh. don't need to protect the callsame.

[19:58] <nirnam> the thread & manual cache version does run sometimes, the other times is just blow up

[20:01] <[Coke]> I imagine sometimes you can get lucky

[20:01] <perlbot> nirnam pasted a new file at https://l.perl.bot/p/8tgl1v - 

[20:02] <[Coke]> MasterDuke: my current version dies with 999936 47

[20:02] <[Coke]> MoarVM oops: MVM_str_hash_fetch_nocheck called with a stale hashtable pointer

[20:03] <nirnam> that doesn't seem right, starting point 47 doesn't generate that long of a chain

[20:04] <[Coke]> updated gist. have to take a call

[20:04] <nirnam> oh it bolloc it other way round, sorry

[20:04] <[Coke]> Yes, it means my cache implementation is completely screwed up. :)

[20:04] <nirnam> the out put is correct

[20:07] <nirnam> do raku have formatter in the same vein as perl::tidy? every spaces and tabs trigger my ocd now aday

[20:08] *** Tirifto left
[20:09] *** Tirifto joined
[20:10] *** RandalSchwartz joined
[20:11] <MasterDuke> not really. i thought drforr had one in the works before he died that was transferred to the community modules repo, but i don't see it there

[20:12] <RandalSchwartz> drforr died? :(

[20:12] <nirnam> I'm sorry to hear that

[20:13] <MasterDuke> year or two ago, scuba accident on a cruise

[20:14] <nirnam> since raku have proper grammer and parser build in I thought that could be one already

[20:15] <nirnam> I really hope this isn't 'only perl can parse perl' situation

[20:15] <MasterDuke> https://conf.raku.org/talk/147 has some relevant info

[20:17] <MasterDuke> https://github.com/raku-community-modules/Raku-Parser is what drforr was working on, but i'm not sure how complete it is (or if the next step of implementing a ::Tidy was started)

[20:18] <MasterDuke> but as jnthn will explain in his talk, RakuAST should make such things much easier

[20:23] <nirnam> "This year, it takes place online on August 7, 2021"

[20:24] <nirnam> also Food freference in profile/edit

[20:24] <nirnam> how does that work?

[20:26] <MasterDuke> maybe they'll mail people a snack

[20:28] <nirnam> I watched most of damian conway and bruce gray talk for perl & raku conf on youtube, this is gonna be my first live conference

[20:37] *** AntonOks joined
[20:40] *** AntonOks left
[20:53] *** zoli73 joined
[20:54] *** zoli73 left
[21:01] <MasterDuke> nirnam: ok, i have it safely using `.hyper` and `is cached`, but i'm not sure how much faster it is

[21:01] <nirnam> can I see the patch? so I can test it out

[21:03] <MasterDuke> https://gist.github.com/MasterDuke17/c2769796f3a693ee5d836c5a5f73788e

[21:03] <MasterDuke> oh, that should be Lock::Async

[21:04] <MasterDuke> btw, there are some micro-optimizations you could do to your code

[21:04] *** _ed joined
[21:05] *** m6502 joined
[21:06] <MasterDuke> wait, maybe it shouldn't be Lock::Async

[21:10] <MasterDuke> ooo, i just got a MoarVM oops. maybe the whole thing needs to be protected

[21:12] *** m6502 left
[21:17] *** abraxxa-home left
[21:17] <nirnam> rakumod supposed so be in /usr/share/perl6 right? because gentoo doesn't give me any of it

[21:17] <nirnam> gonna have to build from git hub

[21:17] <MasterDuke> yeah

[21:19] *** _ed left
[21:19] <nirnam> I have .moarvm but not .rakumod, I didn't even know how this happened nor does how my rakudo even work in the first place

[21:20] <MasterDuke> those are the pre-compiled bytecode

[21:24] *** bd3i left
[21:26] *** bd3i joined
[21:26] *** _ed joined
[21:30] *** _ed left
[21:45] <nirnam> it is no longer crashed

[21:47] *** _ed joined
[21:54] <nirnam> annd id died

[21:55] <nirnam> right about when it gonna be mostly cache hit

[22:02] *** juanfra joined
[22:03] *** Doc_Holliwood left
[22:04] <nirnam> the run that does survived, hyper with :cached is about 1.16 times faster

[22:04] *** tyil[m] joined
[22:04] *** CIAvash joined
[22:05] *** ComplYue[m] joined
[22:05] *** demostanis[m] joined
[22:05] *** AlexDaniel joined
[22:05] *** cnx joined
[22:05] *** littlebenlittle[ joined
[22:11] *** juanfra left
[22:11] *** demostanis[m] left
[22:12] *** AlexDaniel left
[22:12] *** Doc_Holliwood joined
[22:13] *** tyil[m] left
[22:14] *** CIAvash left
[22:14] *** ComplYue[m] left
[22:14] *** cnx left
[22:15] *** littlebenlittle[ left
[22:18] *** Doc_Holliwould joined
[22:21] *** Doc_Holliwood left
[22:27] *** juanfra joined
[22:32] *** bd3i left
[22:33] *** demostanis[m] joined
[22:33] *** AlexDaniel joined
[22:33] *** cnx joined
[22:33] *** m6502 joined
[22:33] *** littlebenlittle[ joined
[22:33] *** tyil[m] joined
[22:33] *** ComplYue[m] joined
[22:34] *** CIAvash joined
[22:36] *** m6502 left
[22:36] *** jgaz joined
[22:41] *** _ed left
[22:58] *** jgaz left
[23:29] *** _ed joined
[23:33] *** _ed left
[23:42] *** _ed joined
[23:47] *** _ed left
[23:49] *** _ed joined
[23:52] *** neshpion left
[23:56] *** _ed left
[23:59] *** _ed joined
