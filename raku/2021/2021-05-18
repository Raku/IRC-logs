[00:01] *** reportable6 left
[00:02] *** reportable6 joined
[00:27] *** mowcat left
[00:51] *** Black_Ribbon joined
[01:09] *** tejr left
[01:16] *** Doc_Holliwood left
[01:27] *** [Sno] joined
[01:27] *** kvw_5_ joined
[01:30] *** |Sno| left
[01:31] *** kvw_5 left
[02:12] *** marcusr left
[02:13] *** marcusr joined
[02:18] *** QhpAptyj9hj0RQwM left
[03:18] *** bisectable6 left
[03:18] *** bloatable6 left
[03:18] *** statisfiable6 left
[03:18] *** quotable6 left
[03:18] *** sourceable6 left
[03:18] *** linkable6 left
[03:18] *** committable6 left
[03:18] *** evalable6 left
[03:18] *** releasable6 left
[03:18] *** reportable6 left
[03:18] *** tellable6 left
[03:18] *** coverable6 left
[03:18] *** shareable6 left
[03:18] *** squashable6 left
[03:18] *** unicodable6 left
[03:18] *** greppable6 left
[03:18] *** nativecallable6 left
[03:18] *** benchable6 left
[03:18] *** notable6 left
[03:18] *** committable6 joined
[03:18] *** linkable6 joined
[03:18] *** shareable6 joined
[03:18] *** nativecallable6 joined
[03:19] *** bisectable6 joined
[03:19] *** greppable6 joined
[03:19] *** coverable6 joined
[03:19] *** quotable6 joined
[03:19] *** squashable6 joined
[03:20] *** reportable6 joined
[03:20] *** bloatable6 joined
[03:20] *** tellable6 joined
[03:20] *** unicodable6 joined
[03:20] *** benchable6 joined
[03:20] *** squashable6 left
[03:20] *** statisfiable6 joined
[03:20] *** releasable6 joined
[03:21] *** notable6 joined
[03:21] *** evalable6 joined
[03:21] *** squashable6 joined
[03:21] *** sourceable6 joined
[03:40] *** a3r0 joined
[04:00] *** MasterDuke left
[04:23] <tonyo> anyone interested in a talk about fez for raku conf?  trying to figure out what might be interesting about it to people?  the benefits over cpan? how it actually works? the technologies behind it and what goes into an upload?  

[04:23] <tonyo> something else?

[04:44] *** frost-lab joined
[04:46] *** maggotbrain joined
[04:50] *** wamba joined
[05:21] *** wamba left
[05:22] *** wamba joined
[05:25] *** Sgeo left
[05:27] *** wamba left
[05:28] *** wamba joined
[05:29] *** defaultxr left
[05:30] *** defaultxr joined
[05:45] *** wamba left
[05:49] *** parabolize left
[05:50] *** brtastic joined
[06:00] *** brtastic1 joined
[06:02] *** brtastic left
[06:02] *** brtastic1 is now known as brtastic

[06:02] *** reportable6 left
[06:02] *** reportable6 joined
[06:03] *** Black_Ribbon left
[06:10] <ecocode[m]1> maybe an intro on how to create a new module for upload to raku modules ?  which tools to use; setup of the repo; necessary files; integration with git; what about NativeCall libraries; tests; module metadata ...

[06:13] *** ecocode_ joined
[06:14] *** ecocode_ left
[06:14] *** ecocode_ joined
[06:16] *** ufobat joined
[06:22] *** wamba joined
[06:32] *** abraxxa joined
[06:33] *** patrickb joined
[06:33] <patrickb> o/

[06:33] <tellable6> 2021-05-12T21:18:03Z #moarvm <MasterDuke> patrickb you said something a little while ago about windows vms?

[06:36] *** abraxxa left
[06:38] *** abraxxa joined
[06:38] *** stoned75 joined
[06:40] <patrickb> tony-o: I'd like to see a talk about fez. It should include: A joke about the naming (fez vs zef), some history including the limitations of p6c and cpan, a technical overview of how the server works and why (scalability, ...), instructions of how to use it in practice, outlook including a nod toward raku.land. The talk should have slides, then it

[06:40] <patrickb> can serve as a resource to point interested people at.

[06:41] <patrickb> MasterDuke: I can't remember talking about Windows VMs. Can you recall what I wrote about?

[06:41] <tellable6> patrickb, I'll pass your message to MasterDuke

[06:42] *** patrickb90 joined
[06:46] *** patrickb left
[06:54] *** patrickb90 left
[06:56] *** domidumont joined
[07:08] *** frost-lab left
[07:15] *** wamba left
[07:18] *** ecocode_ left
[07:21] *** stoned75 left
[07:35] *** patrickb joined
[07:44] *** dakkar joined
[07:47] *** wamba joined
[07:50] *** frost-lab joined
[07:58] *** MasterDuke joined
[08:00] *** frost-lab left
[08:09] *** pecastro joined
[08:17] *** frost-lab joined
[08:20] *** wamba left
[08:37] *** holli joined
[08:40] *** stoned75 joined
[09:40] *** evalable6 left
[09:40] *** linkable6 left
[09:42] *** linkable6 joined
[09:42] *** evalable6 joined
[09:47] *** wamba joined
[09:55] *** wamba left
[10:11] *** mowcat joined
[10:32] *** Elvin joined
[10:39] *** kini left
[10:40] *** kini joined
[10:44] *** donaldh left
[10:48] *** Guest67 joined
[10:49] *** Guest67 left
[10:50] *** Guest67 joined
[10:51] *** Elvin left
[10:56] *** unclechu joined
[10:57] <unclechu> hey, is there any “autodie” thing for `run` command?

[10:58] <unclechu> for instance if i write something like this: `run(«foo bar», :out).out.slurp(:close).chomp` it does not fail if `foo` program is not found

[10:58] <unclechu> instead it silently continues returning empty string as a result

[11:13] <timotimo> you'll need to sink the object you're currently calling .out on, rather than discarding it

[11:22] <lizmat> but if you sink it, then you won't be able to get at its :out ?

[11:33] *** wingfold joined
[11:38] *** wingfold left
[11:53] <unclechu> timotimo: what do you mean by “sinking”?

[11:54] <unclechu> the only solution that comes to mind is to add a subroutine wrapper that would just check for `.exitcode` at the end and throw an exception if it’s not 0

[11:54] <unclechu> but the lack of error messages is sad. nothing is telling me what the problem is (missing `foo` in `PATH`)

[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:06] *** MasterDuke left
[12:11] *** MasterDuke joined
[12:14] *** patrickb left
[12:21] <lizmat> unclechu: run(...) without putting it into a variable

[12:22] <lizmat> "void context" in other languages

[12:23] <lizmat> but I see your point: maybe we need a :throw named argument to "run" to have it throw if something went wrong

[12:24] <unclechu> lizmat: yeah, i have the same question then. how do i slurp the `out` then?

[12:24] <lizmat> right, indeed

[12:24] <lizmat> what you *could* do as a workaround is to actually call .sink yourself

[12:24] <lizmat> my $proc = run(....); $proc.sink; # will throw if something went wrong

[12:25] <lizmat> "sinking" is really just calling .sink on an object

[12:25] <unclechu> lizmat: that should work i think, thanks. though it wouldn’t be a one-liner anymore

[12:25] <lizmat> in most cases, it won't do anything

[12:25] <unclechu> would be happy to see `:throw` or something like this in the future

[12:26] <lizmat> I'll make a PR in a moment

[12:28] *** linkable6 left
[12:31] *** linkable6 joined
[12:43] *** linkable6 left
[12:46] *** linkable6 joined
[12:47] *** patrickb joined
[12:59] *** linkable6 left
[13:01] *** linkable6 joined
[13:08] *** xelxebar left
[13:09] *** xelxebar joined
[13:20] *** asymptotically joined
[13:20] <lizmat> unclechu: https://github.com/rakudo/rakudo/pull/4368

[13:22] <unclechu> thanks

[13:22] *** Nasrudin left
[13:23] *** uzl[m] left
[13:23] *** Garland_g[m] left
[13:23] <unclechu> for now i did it like this: `do with run(«foo bar», :out) { .sink; .out.slurp(:close).chomp }`

[13:23] *** GeekRuthie left
[13:23] *** sienet_ja_LSD[m] left
[13:24] <unclechu> though i’m not sure if it’s a correct way of doing it. `.sink` waits for the end of the program, right?

[13:24] <unclechu> what if the output does not fit the buffer for `out`?

[13:24] <unclechu> or it is okay?

[13:25] <unclechu> does raku has its own way of buffering?

[13:27] *** mowcat left
[13:27] *** Garland_g[m] joined
[13:28] * lizmat clickbaits https://rakudoweekly.blog/2021/05/17/2021-20-cro-nodelayed/

[13:28] *** sienet_ja_LSD[m] joined
[13:29] *** timeless left
[13:30] *** uzl[m] joined
[13:30] *** caasih left
[13:33] *** rjeli left
[13:35] <stoned75> hi. I cannot convience myself that substr-rw method works on allomorph types. Any example to give to me ?

[13:36] *** Nasrudin joined
[13:36] <lizmat> m: my $a = <42>; $a.substr-rw(0,2) = 666; dd $a

[13:36] <camelia> rakudo-moar 21a60e17e: OUTPUT: «Too many positionals passed; expected 1 to 3 arguments but got 4␤  in block <unit> at <tmp> line 1␤␤»

[13:36] <lizmat> hmmm

[13:36] <lizmat> afk for a bit&

[13:37] *** caasih joined
[13:37] <stoned75> I meant with current rakudo. and yes I'm seeing exactly that lizmat. I feedled around without any luck

[13:38] *** rjeli joined
[13:41] *** asymptotically left
[13:41] *** asymptotically joined
[13:41] *** asy joined
[13:42] <stoned75> *fiddled

[13:44] *** timeless joined
[13:49] *** holli left
[13:49] *** [Sno] left
[13:50] *** holli joined
[13:50] *** [Sno] joined
[13:50] *** ufobat left
[13:50] *** ufobat joined
[13:50] *** cog joined
[13:57] *** asy left
[13:59] *** [Sno] left
[13:59] *** vrurg left
[13:59] *** vrurg_ joined
[14:00] *** [Sno] joined
[14:00] *** perigrin left
[14:00] *** perigrin joined
[14:00] *** brass left
[14:00] *** eater left
[14:00] *** brass joined
[14:01] *** samcv_ joined
[14:01] *** Kaiepi left
[14:01] *** Kaiepi joined
[14:01] *** patrickb left
[14:01] *** samcv left
[14:01] *** eaterof joined
[14:02] *** patrickb joined
[14:04] *** APic left
[14:07] *** wingfold joined
[14:09] <lizmat> stoned75: looks like a thinko on my part, care to create an issue for it ?

[14:10] <stoned75> sure. And I could look into adding a couple of tests in roast if that can help ?

[14:11] *** wingfold left
[14:12] *** Sgeo joined
[14:12] <lizmat> yes, please!

[14:14] *** wingfold joined
[14:20] *** b2gills left
[14:20] <spacebat2> is there a raku equivalent of ruby's tap or yield_self methods? a method just about every object has, that expects a lambda and calls it with self as the argument

[14:21] *** b2gills joined
[14:21] *** brtastic1 joined
[14:22] *** brtastic left
[14:22] *** brtastic1 is now known as brtastic

[14:24] *** tomasz7 joined
[14:24] <lizmat> you don't need that

[14:25] <lizmat> m: sub twice($a) { $a ~ $a }; say "foobar".&twice()

[14:25] <camelia> rakudo-moar 21a60e17e: OUTPUT: «foobarfoobar␤»

[14:25] <lizmat> the .&methodname() syntax allows you to call a sub as a method on any object

[14:26] <lizmat> spacebat2  ^^  is that what you meant ?

[14:26] *** wingfold left
[14:26] <spacebat2> that might do yes

[14:27] *** wingfold joined
[14:27] <tomasz7> hi, has raku got into any linux distribution as a standard?

[14:27] <lizmat> only really old versions

[14:28] <lizmat> but El_Che manages a lot of Linux packages for Raku

[14:29] <lizmat> https://nxadm.github.io/rakudo-pkg/   # tomasz7 

[14:29] <tomasz7> i can easily find and install it on my Debian, but I wonder if it's getting any popular

[14:31] *** wingfold left
[14:31] <tomasz7> perl5 is installed by default and many standard tools are in p5

[14:32] <tomasz7> that's what i'm asking about raku - has any distribution reached for it so far?

[14:36] <El_Che> tomasz7: most distributions ship raku

[14:36] *** ufobat_ joined
[14:37] <tomasz7> ok but do they use it?

[14:39] *** ufobat left
[14:40] <El_Che> internally? probably not, I think that only python and perl are used that way

[14:40] <El_Che> it's a blessing and a curse

[14:41] <El_Che> for modern languages you are better off leaving system $lang to the system and install a recent version yourself

[14:43] <tomasz7> ruby too

[14:50] <tomasz7> tx

[14:50] *** tomasz7 left
[14:51] *** parabolize joined
[14:59] *** linkable6 left
[15:02] *** linkable6 joined
[15:03] *** APic joined
[15:06] <stoned75> lizmat: saw your fix. that's strange I'm pretty sure I tried that without luck :-} I must have been confused

[15:10] <stoned75> ok that's what I thought after I read your commit log. And yes I had tried that but decided against it because after the substr-rw the allomorph is no more. is that really ok with you ?

[15:11] <stoned75> well that was the behaviour before the introduction of the Allomorph class if I am not mistaken

[15:21] *** reario joined
[15:23] *** reario left
[15:30] <stoned75> ok, according to your commit ba814fde4fc46607eb143ebddeaa9ecdba85a036 we do want substr-rw to return a Str

[15:30] <stoned75> so be it :)

[15:30] *** linkable6 left
[15:31] *** linkable6 joined
[15:33] *** jmerelo joined
[16:10] <tonyo> ecocode[m]1: patrickb: those are good suggestions, thanks

[16:27] *** [Sno] left
[16:34] *** dakkar left
[16:36] *** Guest67 left
[16:42] *** domidumont left
[17:03] *** stoned75 left
[17:10] *** ecocode[m]1 left
[17:16] *** [Sno] joined
[17:22] *** patrickb left
[17:31] *** stoned75 joined
[17:39] *** stoned75_ joined
[17:39] *** stoned75 left
[17:42] *** samcv_ is now known as samcv

[17:42] *** samcv left
[17:42] *** samcv joined
[17:44] *** jmerelo left
[17:46] *** swaggboi left
[17:55] *** swaggboi joined
[17:59] *** mowcat joined
[18:00] *** aborazmeh joined
[18:02] *** reportable6 left
[18:02] *** ErgoXX______ joined
[18:03] <ErgoXX______> Is this where one comes to be reborn into a perl god

[18:03] *** reportable6 joined
[18:04] <lizmat> ErgoXX______ : probably not ?

[18:05] *** flouncy joined
[18:25] *** ufobat_ left
[18:38] *** holli left
[18:43] *** aborazmeh left
[18:46] *** MasterDuke left
[19:01] *** ufobat_ joined
[19:15] <unclechu> is there a way to find a full path to an executable from `PATH` environment variable? like what `which` command does?

[19:15] *** camelia left
[19:15] <kybr> i think i found a minor error in the docs; i thought i might confirm. i'm curious

[19:15] <kybr> https://docs.raku.org/language/5to6-perlfunc#quoting

[19:16] <kybr> qw/.../; # is more commonly rendered as C<< <...> >> in Raku. 

[19:16] *** nine left
[19:16] <kybr> it's line 1444 of the 5to6-perlfunc.pod6

[19:16] <unclechu> kind of equivalent to builtin `type -P` in Bash. for instance `type -P cat` would return `/usr/bin/cat` (the path would depend on OS)

[19:17] <kybr> the line uses C<< <...> >> to code-quote, but it does so within a =for code :lang<perl>

[19:18] *** MasterDuke joined
[19:19] <kybr> so we see the C<< <...> >> whereas i think we want to see <...>

[19:19] <stoned75_> kybr: you're quite right

[19:22] *** japhb left
[19:23] <Geth> ¦ doc: kybr++ created pull request #3884: minor fix: code quote within code quote

[19:23] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3884

[19:24] *** japhb joined
[19:34] *** camelia joined
[19:37] *** camelia left
[19:38] *** nine joined
[19:39] *** nine left
[19:43] *** nine joined
[19:45] *** camelia joined
[19:48] *** stoned75_ left
[19:49] *** stoned75 joined
[20:34] *** linkable6 left
[20:37] *** linkable6 joined
[20:47] <tusooa> <unclechu "kind of equivalent to builtin `t"> why not just traverse the PATH variable?

[20:49] <unclechu> tusooa: because maybe there already is a simpler solution?

[20:51] <unclechu> tusooa: traversing `PATH` would take splitting string by `:` (this separator i believe also depends on OS), and checking each item for executable permission

[20:52] <unclechu> this should be a lot of code but already too noisy comparing to something like `'some-executable-name'.expand-path`

[20:52] <unclechu> don’t want to reinvent the wheel if it’s already invented

[20:52] <tusooa> i can understand

[20:53] <unclechu> this should not be

[20:53] <tusooa> i guess it could be a nice to have

[20:53] <tusooa> maybe there are modules for it?

[20:55] <unclechu> maybe, but in my standalone script i’m looking for a builtin solution. so i would probably end up with traversing `PATH` instead of using some dependency

[20:55] <flouncy> hi

[20:58] <ugexe> no there is no built in solution because its not an easy problem to solve in a cross platform way

[20:58] <ugexe> what gets executed on a given system when you type 'some-command' is not just/always based on PATH depending on your system

[20:58] *** flouncy left
[20:59] *** gordonfish- joined
[20:59] <tusooa> well, on some shells it could be hashed

[21:00] <tonyo> it's really not even a system thing but a shell thing

[21:01] *** gordonfish left
[21:05] *** rir joined
[21:19] *** ufobat_ left
[21:27] *** asymptotically left
[21:44] *** mowcat left
[21:46] *** Zaid joined
[21:58] <gfldex> unclechu: here is an example of how to scan $PATH: https://github.com/gfldex/raku-shell-piping/blob/master/lib/Shell/Piping.rakumod#L342

[22:01] *** dogbert17 joined
[22:03] <ugexe> that can be simplified further with `$*SPEC.path`

[22:04] <ugexe> (as well as be slightly more cross platform)

[22:06] *** dogbert11 left
[22:12] <unclechu> gfldex: yeah, i kind of did the same:

[22:12] <unclechu> `my List:D \paths = %*ENV{'PATH'}.split(':').cache;`

[22:12] <unclechu> `{ with IO::Path.new: e, :CWD($_) { return .absolute if .e } } for paths;`

[22:13] <unclechu> ugexe: good to know that `$*SPEC.path` exists

[22:16] <tonyo> : won't work on windows

[22:20] <ugexe> https://github.com/ugexe/zef/blob/602c54f1069631fd527473f4028451e5c47bc42c/lib/Zef/Utils/FileSystem.rakumod#L170-L181 this is what zef uses

[22:21] <unclechu> tonyo: yeah, that i was worried about too. that it depends OS

[22:21] <ugexe> $*SPEC.path handles the OS-specific path seperator 

[22:22] <ugexe> but there is still PATHEXT to worry about

[22:22] <unclechu> changed to this: `{ with IO::Path.new: e, :CWD($_) { return .absolute if .e } } for $*SPEC.path;`

[22:22] <unclechu> and error throwing after this line if it passes without `return`ing anything

[22:24] <ugexe> because on windows there is no e.g. `git`, there is `git.exe` or `git.bat`

[22:24] <ugexe> hence utilizing PATHEXT

[23:06] *** evalable6 left
[23:06] *** linkable6 left
[23:07] *** evalable6 joined
[23:08] *** linkable6 joined
[23:15] *** thundergnat left
[23:16] *** brtastic left
[23:25] *** AlexDaniel` left
[23:26] *** patrickbkr[m] left
[23:27] *** juanfra__ left
[23:30] *** daxim left
[23:34] *** daxim joined
[23:41] *** pecastro left
[23:43] *** AlexDaniel` joined
[23:46] *** patrickbkr[m] joined
[23:51] *** juanfra__ joined
