[00:03] *** reportable6 left
[00:04] *** reportable6 joined
[00:53] *** evalable6 joined
[00:55] *** linkable6 joined
[00:58] *** gordonfish- joined
[01:00] *** gordonfish left
[01:15] *** swaggboi left
[01:15] *** swaggboi joined
[01:24] *** gordonfish- is now known as gordonfish
[01:43] *** Eddward joined
[01:44] <Eddward> m: 3**2
[01:44] <camelia> rakudo-moar ba15173fd: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "**" in expression "3**2" in sink context (line 1)␤»
[01:44] <Eddward> m: day 3**2
[01:44] <camelia> rakudo-moar ba15173fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    day used at line 1. Did you mean 'say'?␤␤»
[01:44] <Eddward> m: say 3**2
[01:44] <camelia> rakudo-moar ba15173fd: OUTPUT: «9␤»
[01:44] <Eddward> m: say [1, {$_*2} ... 10]
[01:44] <camelia> rakudo-moar ba15173fd: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 1355392 bytes␤»
[01:44] <Eddward> m: say [1, { $_ * 2 } ... 10]
[01:44] <camelia> rakudo-moar ba15173fd: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 1355392 bytes␤»
[01:45] <Eddward>  5, { $_ * 2 } ... 40
[01:45] <Eddward> m: say  5, { $_ * 2 } ... 40
[01:45] <camelia> rakudo-moar ba15173fd: OUTPUT: «(5 10 20 40)␤»
[01:45] <Eddward> m: say  [ 5, { $_ * 2 } ... 40 ]
[01:45] <camelia> rakudo-moar ba15173fd: OUTPUT: «[5 10 20 40]␤»
[01:45] <Eddward> m: say  [ 5, { $_ * 2 } ... 10 ]
[01:45] <camelia> rakudo-moar ba15173fd: OUTPUT: «[5 10]␤»
[01:46] <Eddward> m: say  [ 1, { ($_+1) * 2 } ... 10 ]
[01:46] <camelia> rakudo-moar ba15173fd: OUTPUT: «[1 4 10]␤»
[01:46] <Eddward> m: say  [ 1, { ($_+1) ** ($_+1) } ... 10 ]
[01:47] <camelia> rakudo-moar ba15173fd: OUTPUT: «(timeout)»
[01:53] *** benchable6 joined
[02:47] <gfldex> m: my &min-prime = -> $_, *%_ { .first(&is-prime, |%_) }; say min-prime [10..42], :end;
[02:47] <camelia> rakudo-moar ba15173fd: OUTPUT: «41␤»
[02:47] <gfldex> codesections: ^^^
[02:52] *** keutoi joined
[03:52] *** benchable6 left
[03:52] *** nativecallable6 left
[03:52] *** sourceable6 left
[03:52] *** unicodable6 left
[03:52] *** greppable6 left
[03:52] *** shareable6 left
[03:52] *** bloatable6 left
[03:52] *** tellable6 left
[03:52] *** coverable6 left
[03:52] *** reportable6 left
[03:52] *** quotable6 left
[03:52] *** bisectable6 left
[03:52] *** statisfiable6 left
[03:52] *** notable6 left
[03:52] *** evalable6 left
[03:52] *** linkable6 left
[03:52] *** committable6 left
[03:52] *** releasable6 left
[03:52] *** tellable6 joined
[03:53] *** releasable6 joined
[03:53] *** notable6 joined
[03:53] *** benchable6 joined
[03:53] *** greppable6 joined
[03:53] *** bisectable6 joined
[03:54] *** reportable6 joined
[03:55] *** quotable6 joined
[03:55] *** shareable6 joined
[04:16] <codesections> gfldex, yeah, I know.  Or even better with &first instead of .first:my &min-prime = -> |c {first(&is-prime, |c)}; say min-prime [10..42], :end 
[04:16] <codesections> m: my &min-prime = -> |c {first(&is-prime, |c)}; say min-prime [10..42], :end 
[04:16] <camelia> rakudo-moar ba15173fd: OUTPUT: «41␤»
[04:17] <codesections> but, still, that's not quite as nice as Whatever currying
[04:17] <codesections> (imo)
[04:19] <codesections> m: my &min-prime = &first ∘ ->|c {\(&is-prime, |c)}; say min-prime [10..42], :end  # also works, and a bit clearer (again, imo)
[04:19] <camelia> rakudo-moar ba15173fd: OUTPUT: «41␤»
[04:53] *** statisfiable6 joined
[04:53] *** committable6 joined
[04:53] *** linkable6 joined
[04:54] *** coverable6 joined
[04:55] *** bloatable6 joined
[04:55] *** sourceable6 joined
[05:13] *** squashable6 joined
[05:52] *** nativecallable6 joined
[05:53] *** unicodable6 joined
[05:55] *** evalable6 joined
[06:03] *** reportable6 left
[06:19] *** abraxxa-home joined
[06:29] *** squashable6 left
[06:42] *** Eddward left
[07:34] *** Sgeo left
[07:39] *** squashable6 joined
[08:25] *** lizmat_ joined
[08:26] *** RakuIRCLogger left
[08:26] *** TempIRCLogger left
[08:26] *** Geth left
[08:28] *** lizmat left
[09:05] *** reportable6 joined
[09:08] *** holyghost joined
[09:13] *** lizmat_ left
[09:13] *** lizmat joined
[09:13] *** RakuIRCLogger joined
[09:14] *** Geth joined
[09:15] *** TempIRCLogger joined
[09:55] *** gcd joined
[10:55] *** reportable6 left
[10:55] *** sourceable6 left
[10:55] *** evalable6 left
[10:55] *** greppable6 left
[10:55] *** coverable6 left
[10:55] *** bisectable6 left
[10:55] *** benchable6 left
[10:55] *** bloatable6 left
[10:55] *** releasable6 left
[10:55] *** committable6 left
[10:55] *** shareable6 left
[10:55] *** tellable6 left
[10:55] *** quotable6 left
[10:55] *** linkable6 left
[10:55] *** squashable6 left
[10:55] *** unicodable6 left
[10:55] *** statisfiable6 left
[10:55] *** notable6 left
[10:55] *** nativecallable6 left
[10:56] *** shareable6 joined
[10:56] *** notable6 joined
[10:56] *** statisfiable6 joined
[10:57] *** immediate joined
[10:57] *** reportable6 joined
[10:57] *** bisectable6 joined
[10:58] *** quotable6 joined
[10:58] *** committable6 joined
[10:58] *** coverable6 joined
[11:08] <immediate> I make typos and pass unwanted named arguments to methods. Because of `%_` I don't get errors as I would with a subroutine. I write `die "..." if %_` to the beginnings of each method. Is there a way I can automate this for each method defined in a class
[11:20] *** immediate left
[11:21] *** immediate joined
[11:56] *** greppable6 joined
[11:56] *** squashable6 joined
[11:56] *** linkable6 joined
[11:58] *** tellable6 joined
[11:58] *** unicodable6 joined
[12:02] *** reportable6 left
[12:18] *** charsbar left
[12:24] *** charsbar joined
[12:28] *** Guest92 joined
[12:30] *** Guest92 left
[12:43] *** holyghost left
[12:43] *** holyghost joined
[12:47] <gfldex> immediate: https://raku.land/github:nxadm/StrictNamedArguments
[12:49] <immediate> oh thanks a lot
[12:54] <holyghost> immediate, as gfldex says, I only use them in my sub method BUILD. Didn't understand your question.
[12:56] *** benchable6 joined
[12:56] *** bloatable6 joined
[12:56] *** releasable6 joined
[12:57] <holyghost> I am on vacation tomorrow, I am going to make some AI agent system out of  my module AI-Agent, probably client-serverwise
[12:57] <holyghost> So you can send out intelligent agents from phone to phone for example
[12:57] <holyghost> The sky's the limit :-)
[12:59] <holyghost> So one just automates searches of agents on your phone and invites them etc without use input then you get e.g. mails/messages what others have of freeware or music (e.g. from your friends) etc
[12:59] <holyghost> S/use/user/
[12:59] <holyghost> The system should be fully automated
[12:59] <holyghost> AI as if it were 
[13:00] <phogg> this works as expected: my $s = "<[ of ]>"; "foolish".match(/ ^ <$s> + /); but...
[13:00] <phogg> m: my $s = "of"; "foolish".match(/ ^ <[ <$s> ]>  + /)
[13:00] <camelia> rakudo-moar ba15173fd: ( no output )
[13:00] <holyghost> I guess there's raku for android/iPhone/nokias. Needs e.g. a binary which can be run as a server or client
[13:01] <phogg> where am I going wrong here?
[13:01] <MasterDuke> you can't interpolate into character classes
[13:02] <phogg> I noticed. Supposing I want to, how can I get around that?
[13:02] <phogg> I can dump my chars into a string "<[ $s ]>" first, but then they are not escaped properly
[13:02] <MasterDuke> you'd have to build the regex and then EVAL it
[13:03] <phogg> Makes sense.
[13:04] *** reportable6 joined
[13:38] <discord-raku-bot> <Anton Antonov#7232> @holyghost I am using Raku to translate natural language specifications of computational workflows into executable code (mostly R and Mathematica, sometimes Raku and Python.) I assume I should be able to hook up that to the AI-Agent client-server idea you describe?
[13:40] <discord-raku-bot> <Anton Antonov#7232> @holyghost Or maybe your AI-Agent framework is more "specialized", for some industry standard agents, say, from gaming?
[13:41] <holyghost> It can be used for all of that, yes
[13:41] <holyghost> OO and AI generally
[13:41] <holyghost> OO <-> OOP
[13:42] <holyghost> It was brought to me for making actor-objects in Scheme and LISP (without CLOS)
[13:54] <discord-raku-bot> <Anton Antonov#7232> @holyghost I looked into the AI-Agent GitHub repositories — I think more explanations and/or links are needed.(Sorry, if that seems too negative of a feedback…)
[13:56] <holyghost> I will take care of it next week, I am going to do real AI agents with it then
[13:56] <holyghost> Should be easy enough
[13:57] *** sourceable6 joined
[13:58] <holyghost> discord-raku-bot, take a look at : https://scsh.net/resources/sunterlib.html, there's the same things programmed in Scheme in some of the packages
[13:59] <discord-raku-bot> <Anton Antonov#7232> @holyghost  Sounds good, thanks!
[14:05] *** tejr left
[14:06] *** tejr joined
[14:14] *** immediate left
[14:19] <codesections> m: my $s = "of"; say "foolish".match(/ ^ <{"<[ $s ]>"}>  + /)
[14:20] <camelia> rakudo-moar ba15173fd: OUTPUT: «｢foo｣␤»
[14:20] <codesections> phogg ^^^ I think that might do what you want
[14:20] <codesections> see https://docs.raku.org/language/regexes#Regex_interpolation
[14:21] *** immediate joined
[14:22] <discord-raku-bot> <Anton Antonov#7232> @codesections You might be interested to see this Raku package `ML::TriesWithFrequencies` : https://github.com/antononcube/Raku-ML-TriesWithFrequencies .
[14:24] <phogg> codesections: seems to work!
[14:30] <discord-raku-bot> <Anton Antonov#7232> @codesection This is a great read: https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku
[14:31] <phogg> codesections: it's not quite perfect, though. I still need to escape each char of $s to avoid breaking on e.g. $s = ']>'; Still nicer than EVAL.
[14:31] *** immediate left
[14:41] <codesections> phogg, good point.  Here's a different approach with slightly different semantics: 
[14:41] <codesections> m: my $s = "of]"; say "foolish".match(/ ^ @($s.comb) + /)       
[14:41] <camelia> rakudo-moar ba15173fd: OUTPUT: «｢foo｣␤»
[14:43] <codesections> It uses https://docs.raku.org/language/regexes#Quoted_lists_are_LTM_matches and gets the same result in these cases, but technically expands to /^ [ o | f | ']' ]+ /
[14:43] <codesections> instead of /^ <[of\]]>+ / 
[14:53] <phogg> I don't think that matters
[14:57] *** nativecallable6 joined
[14:58] *** evalable6 joined
[15:31] *** Tirifto left
[15:33] *** Tirifto joined
[16:33] *** quotable6 left
[16:33] *** linkable6 left
[16:33] *** coverable6 left
[16:33] *** reportable6 left
[16:33] *** squashable6 left
[16:33] *** statisfiable6 left
[16:33] *** committable6 left
[16:33] *** shareable6 left
[16:33] *** bisectable6 left
[16:33] *** notable6 left
[16:33] *** benchable6 left
[16:33] *** tellable6 left
[16:33] *** greppable6 left
[16:33] *** unicodable6 left
[16:33] *** sourceable6 left
[16:33] *** nativecallable6 left
[16:33] *** evalable6 left
[16:33] *** bloatable6 left
[16:33] *** releasable6 left
[16:33] *** nativecallable6 joined
[16:33] *** greppable6 joined
[16:33] *** committable6 joined
[16:33] *** benchable6 joined
[16:34] *** squashable6 joined
[16:34] *** tellable6 joined
[16:34] *** releasable6 joined
[16:35] *** statisfiable6 joined
[16:36] *** bisectable6 joined
[16:56] *** Sgeo joined
[17:28] *** keutoi left
[17:34] *** shareable6 joined
[17:35] *** notable6 joined
[17:35] *** coverable6 joined
[17:35] *** linkable6 joined
[17:44] *** eseyman left
[17:46] *** holyghost left
[17:46] *** holyghost joined
[17:46] *** holyghost left
[17:49] *** eseyman joined
[18:35] *** evalable6 joined
[18:35] *** quotable6 joined
[18:35] *** unicodable6 joined
[19:03] *** reportable6 joined
[19:18] *** jjido joined
[19:34] *** sourceable6 joined
[19:45] *** justsomeguy joined
[20:00] *** clarkema left
[20:00] *** clarkema joined
[20:01] *** abraxxa-home left
[20:03] *** clarkema left
[20:03] *** clarkema joined
[21:22] *** evalable6 left
[21:22] *** linkable6 left
[21:24] *** evalable6 joined
[21:28] *** swaggboi left
[21:34] *** jjido left
[21:42] *** swaggboi joined
[22:06] *** holyghost joined
[22:36] *** bloatable6 joined
[22:37] *** holyghost left
[22:49] *** slu left
[23:09] *** justsomeguy left
[23:24] *** linkable6 joined
[23:28] *** guifa left
