[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[01:03] *** evalable6 left
[01:03] *** linkable6 left
[01:05] *** evalable6 joined
[01:06] *** linkable6 joined
[01:55] *** xinming joined
[02:28] *** a3r0 joined
[02:28] *** a3r0 left
[02:29] *** a3r0 joined
[03:08] *** melezhik left
[03:42] *** bd3i joined
[04:01] *** RandalSchwartz left
[04:11] *** bd3i left
[05:11] *** quotable6 left
[05:11] *** benchable6 left
[05:11] *** linkable6 left
[05:11] *** releasable6 left
[05:11] *** reportable6 left
[05:11] *** bisectable6 left
[05:11] *** coverable6 left
[05:11] *** evalable6 left
[05:11] *** statisfiable6 left
[05:11] *** greppable6 left
[05:11] *** sourceable6 left
[05:11] *** committable6 left
[05:11] *** bloatable6 left
[05:11] *** shareable6 left
[05:11] *** tellable6 left
[05:11] *** nativecallable6 left
[05:11] *** squashable6 left
[05:11] *** unicodable6 left
[05:11] *** notable6 left
[05:11] *** shareable6 joined
[05:11] *** sourceable6 joined
[05:11] *** tellable6 joined
[05:12] *** notable6 joined
[05:12] *** squashable6 joined
[05:12] *** statisfiable6 joined
[05:12] *** reportable6 joined
[05:12] *** coverable6 joined
[05:12] *** benchable6 joined
[05:12] *** greppable6 joined
[05:12] *** bloatable6 joined
[05:12] *** evalable6 joined
[05:13] *** nativecallable6 joined
[05:13] *** releasable6 joined
[05:13] *** linkable6 joined
[05:14] *** committable6 joined
[05:14] *** bisectable6 joined
[05:14] *** quotable6 joined
[05:14] *** unicodable6 joined
[05:45] *** ufobat__ joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[07:03] *** evalable6 left
[07:03] *** linkable6 left
[07:04] *** linkable6 joined
[07:04] *** evalable6 joined
[07:10] *** patrickb joined
[07:19] *** Sgeo left
[07:55] *** Eddward_ left
[08:06] *** Kaiepi left
[08:11] *** Kaiepi joined
[08:51] *** patrickb left
[09:51] *** evalable6 left
[09:51] *** linkable6 left
[09:52] *** evalable6 joined
[09:54] *** linkable6 joined
[10:02] *** sono left
[11:02] *** linkable6 left
[11:02] *** evalable6 left
[11:05] *** linkable6 joined
[11:05] *** evalable6 joined
[11:23] *** MasterDuke left
[11:32] *** ufobat_ joined
[11:36] *** ufobat__ left
[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[12:34] *** MasterDuke joined
[12:52] *** RandalSchwartz joined
[13:18] *** Sgeo joined
[13:22] <[Coke]> Wonder how many times I will be bitten by "random commands via run() don't output utf8"

[13:24] <[Coke]> (Easy enough for me to write a wrapper here, which I think I will do; have an arg that indicates output is expected to be utf8-clean, otherwise use utf8-c8 under the covers.)

[13:33] *** Eddward_ joined
[13:59] <[Coke]> I don't think Raku is doing anything wrong here, just a trap of my own devising I keep falling into. :)

[14:02] *** frost left
[14:15] <Altreus> guifa: I'd expect "class" to imply instantiable and thus to override the trait of the role

[14:15] <Altreus> if it were another role, then yeah I'd expect it also to be uninstantiable

[14:24] *** abraxxa left
[14:33] <jdv> [Coke]: what is the symptom?

[14:38] <[Coke]> raku explodes because I tried to put non-utf8 output in a string.

[14:39] <[Coke]> so typically: I'll do work on a small sample size that is utf8-ok. then I run it on everything, hit the one piece of data that isn't, and the script explodes.

[14:41] *** abraxxa joined
[14:44] <jdv> at least its not silent

[14:45] <jdv> wonder if it'd be valuable to have some way to detect that, warn, and auto re-decode or something

[15:29] <[Coke]> ... I also finally got bit by assuming the CSV data I was generating didn't need to use Text::CSV :) (someone had a branch name with a comma in it!)

[15:45] *** linkable6 left
[15:45] *** evalable6 left
[15:46] *** guifa left
[15:47] *** linkable6 joined
[15:48] *** evalable6 joined
[16:14] *** ufobat_ left
[16:19] *** Juerd left
[16:29] <Altreus> naming-it-like-this,-to-see-if-it-breaks-anyone

[16:29] <Altreus> feature/

[16:41] * moritz recommends single quotes in branch names, just to annoy everyone

[16:43] <Altreus> yes I like this

[16:43] <Altreus> feature/i\'m-trying,-ok\?

[16:57] <[Coke]> is there a way to ask git what the default branch is, or is that something you need the hosting service to verify?

[16:57] <[Coke]> I have a dump of master vs. main for a bunch of git repos, but am wondering if a git command line can find the answer.

[16:59] <tonyo> [Coke]: git remote show origin | sed -n '/HEAD branch/s/.*: //p'

[17:01] <[Coke]> tonyo++

[17:01] <Altreus> assuming origin is on default-branch

[17:03] <tonyo> yes

[17:03] <tonyo> if you only have one remote set up then you can use substitution too: git remote show $(git remote show) | sed -n '/HEAD branch/s/.*: //p'

[17:03] <tonyo> i imagine it's fairly uncommon to have multiple remotes

[17:07] <Altreus> ~

[17:07] <Altreus> I often have at least one other because I don't trust github to do PRs properly

[17:08] <Altreus> origin is, however, usually the right one to use

[17:12] <[Coke]> in this case, it's all a single remote, I've a list of repos, clone them just so I can work with a local copy.

[17:17] <tonyo> Altreus: do you ever have a different default branch on them?

[17:18] <Altreus> fair point, no

[17:18] <tonyo> i suppose piping that interpolated git remote show |head -n 1 would be safer

[17:19] *** evalable6 left
[17:19] *** linkable6 left
[17:20] *** linkable6 joined
[17:20] *** Manifest0 left
[17:21] *** Averna joined
[17:21] *** evalable6 joined
[17:25] *** jrjsmrtn left
[17:26] *** Manifest0 joined
[17:26] *** Averna left
[17:33] *** [Coke] left
[17:39] *** [Coke] joined
[17:53] <[Coke]> yay, now UPS is not only here, but in use.

[18:02] *** reportable6 left
[18:02] *** Kaiepi left
[18:03] *** Kaiepi joined
[18:05] *** reportable6 joined
[18:06] *** Kaiepi left
[18:06] *** Kaiepi joined
[18:08] *** RandalSchwartz left
[18:33] *** stoned75 joined
[18:35] *** jrjsmrtn joined
[18:38] *** jmcgnh left
[18:38] *** jmcgnh joined
[18:38] *** holyghost left
[19:28] *** melezhik joined
[19:31] <melezhik> .tell patrickb: I am looking at https://github.com/rakudo/rakudo/blob/master/azure-pipelines.yml, are you satisfied with this approach? I mean somehow we could start using sparrow instead of having scattered scripts gets called from the pipeline. if the goes grows it could helps to have more maintainable solution 

[19:31] <tellable6> melezhik, I'll pass your message to patrickb

[19:40] <melezhik> .tell patrickb: I am just no sure what kind of challenges you might have right now, but I see this as following - https://gist.github.com/melezhik/f3afb994cbf8941088cd64f43ad4465e , so to move all the complexity from azure devops pipelines  to docker jobs with sparrow

[19:40] <tellable6> melezhik, I'll pass your message to patrickb

[19:40] *** ufobat_ joined
[19:40] <melezhik> .tell patrickb:  just a thoughts ... ))

[19:40] <tellable6> melezhik, I'll pass your message to patrickb

[19:46] <melezhik> .tell patrickb: just from my experience of coding ci/cd with azure devops pipelines and all yaml based tool, in the long run I keep them as simple as possible moving all the logic into low level libraries, avoiding and emperical  constructions, like conditions in the high level. See for example how Sparrow could take care of distro dependent

[19:46] <melezhik> scenarios - https://github.com/melezhik/Sparrow6/blob/master/documentation/development.md#recognizable-os-list   https://github.com/melezhik/sparrow-plugins/blob/master/git-base/hook.pl6

[19:46] <tellable6> melezhik, I'll pass your message to patrickb

[19:47] <melezhik> .tell patrickb: avoiding AND emperical  constructions -> avoiding ANY emperical  constructions

[19:47] <tellable6> melezhik, I'll pass your message to patrickb

[20:05] *** RandalSchwartz joined
[20:07] *** dogbert17 left
[20:19] *** Kaiepi left
[20:19] *** Kaiepi joined
[20:50] *** jess joined
[21:33] *** ufobat_ left
[21:40] *** melezhik left
[22:23] *** sono joined
[22:47] *** Xliff joined
[22:47] <Xliff> \o

[22:47] <Xliff> Does Raku still NOT support passing CStructs to C-routines by value?

[22:48] <Xliff> IIRC, currently NativeCall only passes structs by reference. I was wondering if that had changed.

[22:59] <moon-child> Xliff: yes, it is not supported

[23:00] <moon-child> that's a dyncall limitation

[23:00] <moon-child> abis make passing structs by value a complete pain

[23:47] *** linkable6 left
[23:47] *** evalable6 left
[23:47] *** linkable6 joined
[23:50] *** evalable6 joined
