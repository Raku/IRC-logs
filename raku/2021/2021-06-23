[00:00] *** _ed left
[00:02] *** reportable6 left
[00:03] *** _ed joined
[00:04] *** reportable6 joined
[00:07] *** _ed left
[00:09] <tonyo> m: say S:g/ $<a> = <:Lu> || $<b> = <:!Lu> /{$<a>??$/.lc!!$/.uc}/ given "AbCd"

[00:09] <camelia> rakudo-moar 772711ad3: OUTPUT: «aBcD␤»

[00:10] <tonyo> there ya go

[00:10] <codesections> :-) so much better 

[00:14] <guifa> Actually if yyou're doing that, there's no reason to check for <:!Lu>, you can just do $<b> = .

[00:15] <guifa> m: say S:g/ $<a> = <:Lu> || $<b> = . /{$<a>??$/.lc!!$/.uc}/ given "AbCd"

[00:15] <camelia> rakudo-moar 772711ad3: OUTPUT: «aBcD␤»

[00:16] <guifa> m: say S:g/<:L>/{$/ eq $/.lc??$/.uc!!$/.lc}/ given "AbCd"

[00:16] <camelia> rakudo-moar 772711ad3: OUTPUT: «aBcD␤»

[00:19] <guifa> Golfing further (at the cost of perf)

[00:20] <guifa> m: say S:g/./{$/eq$/.lc??$/.uc!!$/.lc}/ given "AbCd"

[00:20] <camelia> rakudo-moar 772711ad3: OUTPUT: «aBcD␤»

[00:21] * guifa points out that after codesections 's last reddit post, he's not allowed to complain about line noise in the last time

[00:21] <moon-child> one char longer, infinitely classier:

[00:22] <moon-child> m: say S:g/./{[&lc,&uc][$/eq$/.lc]($/)}/ given "AbCd"

[00:22] <camelia> rakudo-moar 772711ad3: OUTPUT: «aBcD␤»

[00:22] <guifa> ^_^

[00:22] <codesections> Agreed 

[00:26] *** sono joined
[00:26] *** _ed joined
[00:30] <guifa> Also, I think I finished up Dateish.fmt … I think the formatters' code isn't too ugly

[00:30] <guifa> Thoughts? https://github.com/alabamenhu/DateTimeFmt/blob/main/lib/DateTimeFmt.pm6

[00:38] *** _ed left
[00:47] *** _ed joined
[00:51] *** _ed left
[00:53] *** Doc_Holliwood left
[00:55] *** lucerne joined
[00:57] *** japhb left
[00:59] <SmokeMachine> Does anyone know a fix for this? https://github.com/raku-community-modules/Test-Output/issues/6

[01:01] *** japhb joined
[01:02] <moon-child> probably the api should be redesigned to take an array of lines for 'expected' and call .lines on the result of the function

[01:05] *** _ed joined
[01:10] *** _ed left
[01:24] *** _ed joined
[01:29] *** _ed left
[01:29] *** linkable6 left
[01:30] *** linkable6 joined
[01:39] *** m6502 left
[01:40] <codesections> guifa: that looks like about the most readable nqp I've seen :D

[01:42] *** _ed joined
[01:46] *** _ed left
[01:50] *** _ed joined
[01:55] *** _ed left
[01:56] <rassoc> noob question regarding that code: why bother with nqp::if when the regular if would be more readable? perf seems to be the same, according to this answer: https://stackoverflow.com/questions/55107267/what-is-the-difference-between-nqpif-and-if-in-an-nqp-file/55107548#55107548

[02:00] *** _ed joined
[02:03] *** lucerne left
[02:03] *** lucerne joined
[02:04] *** _ed left
[02:08] <codesections> Wait, I think I'm missing something, rassoc.  What in that answer tells us that there's no perf difference? 

[02:10] <rassoc> wouldn't perf be listed under notable differences if it was significant?

[02:12] *** _ed joined
[02:16] <codesections> Hmm, I'm not sure.  That seems like some evidence, but not 100%.  In particular, I thought that some (all?) of the perf cost of an `if` came from building a new lexical scope, which is the second bullet 

[02:17] <codesections> (the perf cost of it versus other conditionals, I mean – obviously branching code is going to lead to branch prediction misses/less optimized code in general, but that goes for any branching/condititioal)

[02:24] *** _ed left
[02:25] <rassoc> well, what the heck do i know. all my raku stuff runs like arse, not yet qualified to contribute on that front ;)

[02:26] <codesections> well, don't take my word for it, that's for sure!

[02:57] *** _ed joined
[03:02] *** _ed left
[03:12] *** rassoc left
[03:15] *** _ed joined
[03:17] <moon-child> I want to pass a Buf into a nativecall function.  Is there a way to do that?

[03:18] <moon-child> looks like nativecast(Pointer) will do it

[03:20] *** _ed left
[03:44] *** gordonfish- joined
[03:46] *** gordonfish left
[04:01] *** lucerne left
[04:02] *** _ed joined
[04:03] <moon-child> m: use NativeCall; my Pointer $x; say nativecast(size_t, $x)

[04:03] <camelia> rakudo-moar 2a13c31b8: OUTPUT: «(signal SEGV)»

[04:03] *** frost joined
[04:03] <moon-child> ^ is that right?  Shouldn't it print 0?

[04:07] *** _ed left
[04:20] *** _ed joined
[04:24] *** sono left
[04:24] *** _ed left
[04:47] *** lucerne joined
[04:51] *** _ed joined
[04:56] *** _ed left
[05:13] <tonyo> what is your Buf of?

[05:13] <tonyo> Buf[uint8] ?

[05:14] <moon-child> yeah

[05:15] <tonyo> you likely just want to pass uint8[] and the size

[05:16] <tonyo> whatever func(unsigned int xs[], int xl) 

[05:17] <tonyo> or whatever your actual compiler type is func(uint8_t xs[] ..)

[05:17] <moon-child> no, it's a string

[05:17] <moon-child> Str on raku side, buffer (not nul-terminated) on c side

[05:18] <tonyo> buffer of unsigned chars, then?

[05:18] <tonyo> or wide chars?

[05:18] <moon-child> regular size chars

[05:19] <moon-child> nativecast(Pointer) seems to do the job

[05:19] <tonyo> oh, those fools. you can cast pointer but you'll still want the length

[05:19] <tonyo> unless it's always fixed

[05:19] <moon-child> well, yeah, but that's easy

[05:20] <tonyo> not if you can't count

[05:20] *** codesections left
[05:38] *** ufobat__ joined
[05:43] *** ufobat__ left
[05:49] <guifa> oof

[05:49] <guifa> I did something that's slowing down my dateish.fmt code.  Suddenly got to be an order of magnitude slower =\

[05:51] *** _ed joined
[05:55] *** _ed left
[05:58] *** Doc_Holliwood joined
[05:59] <guifa> But … I'm a good 50% faster than sprintf generating a similar string, so I guess it's not terrible then given I'm handling all the same padding features.

[06:01] <moon-child> maybe you should submit a patch to improve sprintf's performance!

[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:07] <guifa> moon-child: there's probably a little bit more going on under the hood with sprintf

[06:07] <guifa> but lizmat has been working on optimizing sprintf via caching the formatters, I don't think that's in the master branch just yet

[06:09] *** _ed joined
[06:10] <guifa> I'll do the same to my code once that's done and given that doing .&{ .year ~ '-' ~ .month ~ '-' .day } is currently about 30x faster than .fmt('%Y-%m%d') and about 60x faster than sprintf('%d-%d-%d', $date.year, $date.month, $date.day), I'd imagine the cached method will bear some pretty substantially improvements

[06:10] <guifa> s/once that's done/once RakuAST is done

[06:14] *** _ed left
[06:15] *** _ed joined
[06:20] *** _ed left
[06:24] *** lucerne left
[06:28] *** Eddward left
[07:03] *** _ed joined
[07:08] *** _ed left
[07:11] *** Sgeo left
[07:17] *** leah2 left
[07:18] *** Doc_Holliwood left
[07:20] *** lucerne joined
[07:20] *** ufobat joined
[07:20] *** leah2 joined
[07:31] *** _ed joined
[07:45] *** _ed left
[07:56] *** dakkar joined
[08:04] *** _ed joined
[08:08] *** _ed left
[08:15] *** lucerne left
[08:20] *** _ed joined
[08:25] *** _ed left
[08:36] *** _ed joined
[08:40] *** _ed left
[09:07] *** _ed joined
[09:12] *** _ed left
[09:12] *** lucerne joined
[09:33] *** lucerne left
[09:33] *** rassoc joined
[09:33] *** lucerne joined
[09:36] *** squashable6 left
[09:37] *** _ed joined
[09:37] *** squashable6 joined
[09:42] *** _ed left
[10:10] *** b2gills left
[10:10] *** gfldex is now known as gfldex_

[10:10] *** gfldex_ is now known as gfldex

[10:11] *** gfldex is now known as gfldex_

[10:12] *** gfldex_ is now known as gfldex

[10:13] *** gfldex is now known as gfldex_

[10:14] *** gfldex_ is now known as gfldex

[10:17] *** Doc_Holliwood joined
[10:25] *** _ed joined
[10:26] *** squashable6 left
[10:27] *** lucerne left
[10:29] *** squashable6 joined
[10:29] *** discord-raku-bot joined
[10:29] <gfldex> Discord bridge test.

[10:30] *** _ed left
[10:35] *** _ed joined
[10:36] *** patrickb joined
[10:40] *** _ed left
[10:43] *** _ed joined
[10:43] *** discord-raku-bot left
[10:43] *** linkable6 left
[10:45] *** Doc_Holliwood left
[10:46] *** linkable6 joined
[10:46] *** discord-raku-bot joined
[10:49] *** Doc_Holliwood joined
[10:53] *** _ed left
[10:54] *** discord-raku-bot left
[10:55] *** linkable6 left
[10:56] *** discord-raku-bot joined
[10:58] *** linkable6 joined
[11:01] *** dogbert17 left
[11:07] *** _ed joined
[11:09] *** dogbert17 joined
[11:12] *** _ed left
[11:13] *** _ed joined
[11:17] *** _ed left
[11:24] *** lucerne joined
[11:32] *** Doc_Holliwood left
[11:49] *** patrickb left
[11:51] *** _ed joined
[11:56] *** _ed left
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:04] *** RandalSchwartz joined
[12:11] *** lucerne left
[12:12] *** lucerne joined
[12:14] *** _ed joined
[12:17] *** Doc_Holliwood joined
[12:17] *** MasterDuke left
[12:20] *** _ed left
[12:30] *** jdporter joined
[12:32] *** _ed joined
[12:34] *** discord-raku-bot left
[12:37] *** _ed left
[12:37] *** frost left
[12:41] *** jdporter left
[12:41] *** nirnam joined
[12:48] *** nirnam left
[13:01] *** Eddward joined
[13:07] *** _ed joined
[13:14] *** jast left
[13:15] *** timo left
[13:16] *** _ed left
[13:17] *** timo joined
[13:17] *** discord-raku-bot joined
[13:20] *** jast joined
[13:23] *** b2gills joined
[13:59] *** gordonfish- is now known as gordonfish

[13:59] *** smarton left
[14:02] *** smarton joined
[14:11] *** discord-raku-bot left
[14:13] *** Sgeo joined
[14:26] *** rassoc left
[14:29] *** _ed joined
[14:34] *** _ed left
[14:36] *** suman joined
[14:37] <suman> m:my $num = 20129201828;my @arr= 2018..2020;if $num ~~/@arr.any/ { say "Matches"}

[14:37] <evalable6> suman, rakudo-moar ad94ef1d6: OUTPUT: «»

[14:39] <suman> m:my $num = 2012920128282020;my @arr= 2018..2020;if $num ~~/2018|2019|2020/ { say "Matches"}

[14:39] <evalable6> suman, rakudo-moar ad94ef1d6: OUTPUT: «Matches␤»

[14:40] <suman> m: my $num = 2012920128282020;my @arr= 2018..2020;if $num ~~/{2018..2020}/ { say "Matches"}

[14:40] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «Matches␤»

[14:42] <suman> m: my $num = 2012920128;if $num ~~/{2018..2020}/ { say "Matches"}

[14:42] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «Matches␤»

[14:42] *** Doc_Holliwood left
[14:42] <suman> Why is this code matching? Isn't it supposed to not match?

[14:42] <suman> m: my $num = 2012920128;if $num ~~/{2018..2020}/ { say "Matches"}

[14:42] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «Matches␤»

[14:52] *** _ed joined
[14:53] <moritz> you never told raku that you want to match a full string

[14:53] <moritz> so it searches for a substring

[14:54] <moritz> m: my $num = 20129201828; my @range = 2018...2020; say $/ if $num ~~ /^@range$/

[14:54] <camelia> rakudo-moar ad94ef1d6: ( no output )

[14:54] <moritz> m: my $num = 20129201828; my @range = 2018...2020; say $/ if $num ~~ /^@range/

[14:54] <camelia> rakudo-moar ad94ef1d6: ( no output )

[14:54] <moritz> m: my $num = 2029201828; my @range = 2018...2020; say $/ if $num ~~ /^@range/

[14:54] <camelia> rakudo-moar ad94ef1d6: ( no output )

[14:54] <moritz> m: my $num = 2019201828; my @range = 2018...2020; say $/ if $num ~~ /^@range/

[14:54] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «｢2019｣␤»

[14:54] <moritz> m: my $num = 2019201828; my @range = 2018...2020; say $/ if $num ~~ /^@range$/

[14:54] <camelia> rakudo-moar ad94ef1d6: ( no output )

[14:54] <moritz> but if you just want to check a number, no need to go for a regex

[14:55] <moritz> m: say 2019 ~~ 2018..2020

[14:55] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «True␤»

[14:55] <moritz> m: say 201933 ~~ 2018..2020

[14:55] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «False␤»

[14:55] *** Doc_Holliwood joined
[14:58] *** _ed left
[15:03] <suman> m: my $num = 2019201828; my @range = 2018...2020; say $/ if $num ~~ /@range/;

[15:03] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «｢2019｣␤»

[15:03] <suman> m: my $num = 2019201828; say $/ if $num ~~ /{2018...2020}/;

[15:03] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «｢｣␤»

[15:04] <suman> Is it possible to keep raku expression within regex?

[15:04] <suman> m: my $num = 2019201828; say $/ if $num ~~ /{2018...2020}/;

[15:04] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «｢｣␤»

[15:04] <suman> in this example range within regex directly

[15:11] *** _ed joined
[15:12] <moritz> m: my $num = 2019201828; say $/ if $num ~~ /<{2018...2020}>/

[15:12] <camelia> rakudo-moar ad94ef1d6: OUTPUT: «｢2019｣␤»

[15:13] <moritz> see https://docs.raku.org/language/regexes#Regex_interpolation

[15:19] *** discord-raku-bot joined
[15:19] *** discord-raku-bot left
[15:19] *** _ed left
[15:20] *** discord-raku-bot joined
[15:21] *** discord-raku-bot left
[15:30] *** discord-raku-bot joined
[15:31] <gfldex> Discord bridge test.

[15:32] <RandalSchwartz> seriously?  I can get rid of adium and just use discord?

[15:32] <gfldex> not quite yet

[15:32] <gfldex> For now I only implemented IRC -> Discord. IRC <-> Discord needs more thinking.

[15:33] <gfldex> Those Dicord Inc folk really like their rate limiting. :-/

[15:46] *** Doc_Holliwood left
[15:55] *** suman left
[16:03] *** amishpa joined
[16:09] *** amishpa left
[16:21] *** _ed joined
[16:23] *** ufobat left
[16:26] *** _ed left
[16:36] *** _ed joined
[16:40] *** _ed left
[16:45] *** dakkar left
[16:51] *** _ed joined
[16:55] *** _ed left
[16:59] *** discord-raku-bot left
[17:03] *** discord-raku-bot joined
[17:04] *** discord-raku-bot left
[17:04] *** discord-raku-bot joined
[17:10] *** _ed joined
[17:12] *** notzmv joined
[17:15] *** _ed left
[17:20] *** squashable6 left
[17:23] *** squashable6 joined
[17:27] *** _ed joined
[17:31] *** _ed left
[17:37] *** MoC joined
[17:47] *** RandalSchwartz left
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:13] *** discord-raku-bot left
[18:25] *** Doc_Holliwood joined
[18:36] *** discord-raku-bot joined
[18:37] *** discord-raku-bot left
[18:40] *** _ed joined
[18:44] *** _ed left
[18:50] *** discord-raku-bot joined
[18:51] *** discord-raku-bot left
[18:52] *** discord-raku-bot joined
[18:52] *** MasterDuke joined
[18:52] *** discord-raku-bot left
[18:57] *** _ed joined
[19:01] *** discord-raku-bot joined
[19:01] <gfldex> TIL sub EXPORT can be a multi

[19:02] *** discord-raku-bot left
[19:02] *** _ed left
[19:02] *** discord-raku-bot joined
[19:03] *** discord-raku-bot left
[19:06] *** discord-raku-bot joined
[19:07] *** abraxxa-home joined
[19:11] *** discord-raku-bot left
[19:12] *** discord-raku-bot joined
[19:12] *** discord-raku-bot left
[19:12] *** discord-raku-bot joined
[19:38] *** sono joined
[19:48] *** discord-raku-bot left
[19:49] *** discord-raku-bot joined
[19:50] *** discord-raku-bot left
[19:50] *** discord-raku-bot joined
[19:54] *** hankache joined
[19:57] *** melezhik joined
[19:57] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/06/23/being-pragmat-ish/

[20:06] *** slu joined
[20:13] *** hankache left
[20:17] *** MoC left
[20:17] *** _ed joined
[20:22] *** _ed left
[20:32] *** discord-raku-bot left
[20:34] *** discord-raku-bot joined
[20:41] *** RandalSchwartz joined
[20:41] <Geth> ¦ doc: 2de140bc33 | Coke++ | 7 files

[20:41] <Geth> ¦ doc: Remove unneeded 'use v6' from util/

[20:41] <Geth> ¦ doc: 

[20:41] <Geth> ¦ doc: Part of #3905

[20:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2de140bc33

[20:42] *** linkable6 left
[20:43] <Geth> ¦ doc: f8251bedf0 | Coke++ | 2 files

[20:43] <Geth> ¦ doc: rename to .raku extension

[20:43] <Geth> ¦ doc: 

[20:43] <Geth> ¦ doc: Part of #3905

[20:43] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f8251bedf0

[20:44] *** linkable6 joined
[20:51] <[Coke]> "oh, a doc commit, c... oh, that was me."

[20:51] <gfldex> you are very commited to the docs :)

[20:53] *** discord-raku-bot left
[20:53] *** discord-raku-bot joined
[21:07] *** _ed joined
[21:11] *** _ed left
[21:12] *** squashable6 left
[21:14] *** squashable6 joined
[21:17] *** _ed joined
[21:25] *** _ed left
[21:26] *** Bob joined
[21:27] *** Bob left
[21:42] *** MasterDuke left
[22:01] *** MasterDuke joined
[22:32] *** abraxxa-home left
[22:40] *** Eddward left
[23:40] *** quotable6 left
[23:40] *** shareable6 left
[23:40] *** tellable6 left
[23:40] *** notable6 left
[23:40] *** linkable6 left
[23:40] *** bloatable6 left
[23:40] *** nativecallable6 left
[23:40] *** coverable6 left
[23:40] *** committable6 left
[23:40] *** bisectable6 left
[23:40] *** reportable6 left
[23:40] *** statisfiable6 left
[23:40] *** releasable6 left
[23:40] *** greppable6 left
[23:40] *** sourceable6 left
[23:40] *** benchable6 left
[23:40] *** evalable6 left
[23:40] *** squashable6 left
[23:40] *** unicodable6 left
[23:41] *** committable6 joined
[23:41] *** squashable6 joined
[23:41] *** releasable6 joined
[23:41] *** bloatable6 joined
[23:42] *** greppable6 joined
[23:42] *** evalable6 joined
[23:42] *** reportable6 joined
[23:42] *** tellable6 joined
[23:42] *** nativecallable6 joined
[23:42] *** notable6 joined
[23:42] *** shareable6 joined
[23:42] *** linkable6 joined
[23:42] *** sourceable6 joined
[23:43] *** statisfiable6 joined
[23:43] *** coverable6 joined
[23:43] *** quotable6 joined
[23:43] *** bisectable6 joined
[23:43] *** unicodable6 joined
[23:43] *** benchable6 joined
[23:48] <Geth> ¦ doc: coke self-assigned error when binding variables https://github.com/Raku/doc/issues/3908

[23:48] <Geth> ¦ doc: a254a27d09 | Coke++ | 14 files

[23:48] <Geth> ¦ doc: Rename util/*p6 to util/*.raku

[23:48] <Geth> ¦ doc: 

[23:48] <Geth> ¦ doc: Update references to old file names

[23:48] <Geth> ¦ doc: 

[23:48] <Geth> ¦ doc: Closes #3905

[23:48] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a254a27d09

[23:49] *** linkable6 left
[23:49] *** linkable6 joined
[23:51] <Geth> ¦ doc: coke self-unassigned error when binding variables https://github.com/Raku/doc/issues/3908

[23:54] *** Doc_Holliwood left
[23:56] *** slu left
[23:58] *** m6502 joined
