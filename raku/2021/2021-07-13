[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:03] *** jgaz joined
[01:11] *** jgaz left
[01:47] *** frost joined
[02:47] *** linkable6 left
[02:47] *** evalable6 left
[02:49] *** linkable6 joined
[02:50] *** evalable6 joined
[03:05] *** RandalSchwartz left
[03:51] *** Xliff joined
[04:51] *** evalable6 left
[04:51] *** linkable6 left
[04:52] *** linkable6 joined
[04:54] *** evalable6 joined
[05:32] *** bd3i left
[05:35] *** ufobat_ joined
[05:57] *** Eddward_ left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:45] *** Sgeo left
[07:02] <Geth> ¬¶ examples: mykhal++ created pull request #78: Update 01-00introduction.raku

[07:02] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/pull/78

[07:02] *** patrickb joined
[07:09] *** mykhal joined
[07:52] <Ulti> https://gist.github.com/MattOates/c5879a07b1ef2c013097 if you check out the comments you can see the difference in numerical performance of Raku from 2016 and now

[07:54] <Ulti> I think more important is the standard deviation really showing that things are consistent and predictable in how they perform 

[08:09] *** linkable6 left
[08:09] *** evalable6 left
[08:10] *** evalable6 joined
[08:11] *** linkable6 joined
[08:13] *** archenoth joined
[08:16] *** Oshawott left
[08:28] *** Juerd left
[08:52] *** Juerd joined
[09:12] <Geth> ¬¶ examples: 2fd79e0298 | (Michal Bozon)++ (committed using GitHub Web editor) | categories/cookbook/01strings/01-00introduction.raku

[09:12] <Geth> ¬¶ examples: Update 01-00introduction.raku

[09:12] <Geth> ¬¶ examples: 

[09:12] <Geth> ¬¶ examples: mistaken variable

[09:12] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/commit/2fd79e0298

[09:12] <Geth> ¬¶ examples: 1cbfc20b33 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | categories/cookbook/01strings/01-00introduction.raku

[09:12] <Geth> ¬¶ examples: Merge pull request #78 from mykhal/patch-1

[09:12] <Geth> ¬¶ examples: 

[09:12] <Geth> ¬¶ examples: Update 01-00introduction.raku

[09:12] <Geth> ¬¶ examples: review: https://github.com/Raku/examples/commit/1cbfc20b33

[09:38] *** sono left
[09:39] <lizmat> trivia question of the day: what's so special about the number 129419 ?

[10:05] <sjn> nothing? :)

[10:08] <sjn> I pretty much has to be more interesting than 12407, at least, so there's that.

[10:20] <lizmat> m: say chr(129419)

[10:20] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´ü¶ã‚ê§¬ª

[10:33] <pony> hehe

[10:33] <pony> :)

[10:33] <Xliff> m: 129419.sqrt.say

[10:33] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´359.74852327702473‚ê§¬ª

[10:33] <Xliff> Well...darn

[10:58] *** sena_kun joined
[10:59] <Xliff> m: use NativeCall; constant CARD8 = uint8; class AA { has CARD8 $!aa is rw };

[10:59] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´Potential difficulties:‚ê§    useless use of 'is rw' on $!aa‚ê§    at <tmp>:1‚ê§    ------> 3ARD8 = uint8; class AA { has CARD8 $!aa 7‚èè5is rw };‚ê§¬ª

[10:59] <Xliff> ?? Why useless use?

[11:02] <Xliff> ... /o\ # Oh!

[11:14] <kawaii_> can the contents of a subset be overridden/extended? at the moment I have `subset TerminationPoint of Str where * eq any(<system transfer reward penalty>);` but ideally users of my lib would be able to add their own termination points to that list

[11:17] <Xliff> m: sub myRoutine (\v) { True }; subset TerminationPoint of Str where *.&myRoutine;

[11:17] <camelia> rakudo-moar 5ecc8308f: ( no output )

[11:17] <Xliff> Huh! That worked...

[11:20] <Xliff> m: my %conditions; sub myRoutine (\v) { for %conditions.keys { return False unless %conditions{$_}(v) }; True }; subset TerminationPoint of Str where *.&myRoutine; %conditions<even> = -> $v { $v eq 'Even' }; sub testCondition(TerminationPoint $a) { say 'Terminated!' }; testCondition('Even'); testCondition(42);

[11:20] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´Unhandled exception: Failed to write 184 bytes to filehandle: No space left on device‚ê§ from gen/moar/stage2/NQPHLL.nqp:2117  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:command_eval)‚ê§ from gen/moar/stage2/NQPHLL.nqp:2036  (/home/cam‚Ä¶¬ª

[11:20] <Xliff> rut roh!

[11:32] *** ufobat__ joined
[11:34] <kawaii_> oh dear :D

[11:34] *** patrickb left
[11:35] *** patrickb joined
[11:36] *** patrickb left
[11:37] *** patrickb joined
[11:37] *** ufobat_ left
[11:39] <Altreus> Can you use a class method in a subset I wonder

[11:39] <Altreus> not sure how I would write it...

[11:40] <Altreus> class A { subset X of Str where * eq any ( ??? ); }

[11:40] <Altreus> &!foo?

[11:43] *** patrickb left
[11:44] *** patrickb joined
[11:44] *** squashable6 left
[11:45] *** squashable6 joined
[11:47] *** patrickb left
[11:48] *** patrickb joined
[11:49] *** patrickb left
[11:50] *** patrickb joined
[11:51] *** patrickb left
[11:52] *** patrickb joined
[11:53] *** patrickb left
[11:54] *** patrickb joined
[11:54] *** patrickb left
[11:58] <Altreus> nope

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:28] *** smarton left
[12:28] *** smarton joined
[12:33] *** MasterDuke joined
[12:40] *** Eddward_ joined
[12:46] *** bd3i joined
[12:47] *** xinming left
[12:56] <tbrowder> ugexe: i think you said once that a bin/prog for one zef-installed module will not conflict with another module's bin/prog with the same name for installation, thus both will be available, is my memory correct?

[12:58] <tbrowder> if so, how does the user disambiguate them? (oops, i'll go check zef docs)

[13:00] *** sena_kun left
[13:01] <ugexe> technically they are available, but it doesnt mean your shell lets you launch them by seeing them in PATH

[13:03] <ugexe> https://github.com/rakudo/rakudo/pull/4153 this would solve your issue but i never merged it doh

[13:04] <ugexe> oh i left a comment on something saying it wasnt sufficient 

[13:15] <tbrowder> so at the moment it looks like dup names will overwrite in my .raku/bin dir, correct? at least for the same module

[13:17] <tbrowder> on another zef topic, did i see a convo recently about speeding up zef by cleaning up somehow (removing old versions helps i'm sure)?

[13:18] <tbrowder> afk for awhile &

[13:18] <ugexe> your bin scripts dont get installed to .raku/bin

[13:19] <ugexe> that is just a shim which is capable of loading some version of the actual bin script of the same name

[13:19] <ugexe> zef locate bin/zef

[13:19] <ugexe> ===> From Distribution: zef:ver<0.11.7>:auth<github:ugexe>:api<0>

[13:19] <ugexe> bin/zef => /Users/ugexe/.rakubrew/versions/moar-blead/install/share/perl6/site/resources/9835BBA3FD98CC55CD826918B064F8A13616C14B

[13:20] <ugexe> like that is the actual bin file of zef

[13:21] <ugexe> if i run `raku /Users/ugexe/.rakubrew/versions/moar-blead/install/share/perl6/site/resources/9835BBA3FD98CC55CD826918B064F8A13616C14B --help` it will show zef help

[13:30] *** sena_kun joined
[13:31] *** patrickb joined
[13:33] *** Sgeo joined
[13:33] *** MasterDuke left
[13:40] *** timo left
[13:40] *** MasterDuke joined
[13:40] *** timo joined
[13:42] *** Juerd left
[13:51] *** RandalSchwartz joined
[13:55] *** Juerd joined
[13:57] *** bd3i left
[14:01] *** guifa joined
[14:02] *** guifa left
[14:16] *** patrickb left
[14:16] *** patrickb joined
[14:18] *** patrickb left
[14:18] *** patrickb joined
[14:20] *** patrickb left
[14:20] *** patrickb joined
[14:22] *** patrickb left
[14:22] *** patrickb joined
[14:26] *** patrickb left
[14:26] *** patrickb joined
[14:28] *** littlebenlittle[ left
[14:28] *** Manifest0 left
[14:28] *** dogbert17 left
[14:28] *** synthmeat left
[14:28] *** RaycatWhoDat left
[14:28] *** dogbert17 joined
[14:28] *** Manifest0 joined
[14:28] *** RaycatWhoDat joined
[14:29] *** synthmeat joined
[14:30] *** patrickb left
[14:31] *** patrickb joined
[14:32] *** patrickb left
[14:33] *** patrickb joined
[14:34] *** patrickb left
[14:35] *** patrickb joined
[14:35] *** patrickb left
[14:40] <tbrowder> ok, forgot that, thnx

[14:49] <tbrowder> role question: i am creating a role that will be shared by two classes acting as a parent and children, say A and B (but no actual inheritance). in defining the role, in order to restrict the role's mehods to one or the other, is creating its signature similar to this a good practice:to use

[14:49] <tbrowder> (A:D: $arg) # restricted to class A

[14:56] *** Juerd left
[15:09] <vrurg> tbrowder: Not sure I'm getting you right, but do you mean `method foo(::?CLASS:D:) {}` or `method foo(::?ROLE:D:) {}`?

[15:11] <tbrowder> kinda, but usage only by a particular class, say A

[15:12] <tbrowder> before the role defintion i precede all the using class defs with stubs, class A {...}

[15:14] <tbrowder> so i can use in the role: method foo(A:D:) so class B can't use it

[15:15] <tbrowder> *definition

[15:17] <tbrowder> so far i get no compilation errors, but i haven't yet tried to cause a problem, just investigating best practice

[15:18] <tbrowder> i saw similar syntax in class DateTime

[15:18] <tbrowder> but of course that was core...

[15:19] *** Juerd joined
[15:21] <tbrowder> i'll try it here, take me some time, patience...

[15:26] *** Kaiepi left
[15:28] <tbrowder> m: class A {...}; class B {...}; role Foo { method bar(A:D:) { say "bar"}; method baz {say "baz};}; class A does Foo {}; class B does Foo {}; my $a = A.new; my $b = B.new; $a.bar; $a.baz; $b.baz; $b.bar;

[15:28] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3 A does Foo {}; class B does Foo {}; my 7‚èè5$a = A.new; my $b = B.new; $a.bar; $a.ba‚ê§¬ª

[15:28] *** Kaiepi joined
[15:29] <tbrowder> arg, missed a "

[15:30] *** Kaiepi left
[15:30] <tbrowder> trying offline...

[15:34] *** Kaiepi joined
[15:36] *** Kaiepi left
[15:39] * lizmat clickbaits https://rakudoweekly.blog/2021/07/12/2021-28-track-splitting/

[15:39] * Altreus is baited

[15:39] <tbrowder> ok, works as expected

[15:40] *** Kaiepi joined
[15:41] <tbrowder> got a type check error when B tried to access method bar

[15:41] <tbrowder> lizmat++

[15:44] <tbrowder> if you add the missing " in say "baz" above that should dup my offline attempt

[15:44] <Xliff> rut roh!

[15:44] <Xliff> m: my %conditions; sub myRoutine (\v) { for %conditions.keys { return False unless %conditions{$_}(v) }; True }; subset TerminationPoint of Str where *.&myRoutine; %conditions<even> = -> $v { $v eq 'Even' }; sub testCondition(TerminationPoint $a) { say 'Terminated!' }; testCondition('Even'); testCondition(42);

[15:44] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´Terminated!‚ê§   at SETTING::src/core.c/Exception.pm6:527  (/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.c.setting.moarvm:print_exception)‚ê§ from SETTING::src/core.c/Exception.pm6:583  (/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE‚Ä¶¬ª

[15:49] *** Xliff left
[15:59] *** Juerd left
[16:05] *** Juerd joined
[16:22] *** patrickb joined
[16:30] *** RandalSchwartz left
[16:33] *** RandalSchwartz joined
[16:47] *** MasterDuke left
[17:01] *** sena_kun left
[17:12] *** jess left
[17:14] *** RandalSchwartz left
[17:17] *** RandalSchwartz joined
[17:52] *** MasterDuke joined
[18:03] *** reportable6 left
[18:05] *** reportable6 joined
[18:06] *** RandalSchwartz left
[18:22] *** Juerd left
[18:57] *** guifa joined
[19:08] *** jess joined
[19:25] <guifa> To what extent are traits supposed to be pervasive across composition and subclassing?

[19:25] <tellable6> 2021-07-12T06:10:48Z #raku <raydiak> guifa "self" there is referring to the autopunned class, not the role itself. that's why .WHICH is different. e.g. try `role A { method new { say self.HOW; say A.HOW; } }; A.new`

[19:30] *** cnx left
[19:30] *** CIAvash left
[19:30] *** happy-dude left
[19:30] *** demostanis[m] left
[19:30] *** juanfra left
[19:30] *** aolko[m] left
[19:30] *** AlexDaniel left
[19:32] <lizmat> a trait is nothing more / less than a piece of code that will get run during compilation time

[19:33] <lizmat> with the (meta-)object as the invocant

[19:33] <lizmat> what it does, who knows?  so you cannot answer that question like that in general

[19:34] <lizmat> m: sub trait_mod:<is>(Mu, :$foo!) { say "foo" }; sub bar is foo { }

[19:34] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´foo‚ê§¬ª

[19:38] <guifa> lizmat: okees, I guess then the question is more specific to particular traits ha

[19:39] <guifa> m: role Foo is repr('Uninstantiable') {¬†}; class Bar does Foo {¬†}; Bar.new.say;

[19:39] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´Bar.new‚ê§¬ª

[19:40] <guifa> This actually works *exactly* how I'd like it to (so yay), but it also feels like I'd expect the repr('Uninstantiable') trait to compose into the Bar class 

[19:41] <guifa> (you know me, always doing weird things)

[20:01] *** MasterDuke left
[20:13] *** melezhik joined
[20:13] <melezhik> .

[20:17] *** Guest1 joined
[20:19] *** patrickb left
[20:20] *** patrickb joined
[20:23] *** sono joined
[20:49] *** RandalSchwartz joined
[20:52] *** juanfra joined
[20:55] *** AlexDaniel joined
[20:55] *** demostanis[m] joined
[20:55] *** cnx joined
[20:55] *** happy-dude joined
[20:56] *** aolko[m] joined
[20:56] *** littlebenlittle[ joined
[20:56] *** CIAvash joined
[21:00] *** RandalSchwartz left
[21:02] *** RandalSchwartz joined
[21:26] *** linkable6 left
[21:27] *** linkable6 joined
[21:31] *** ufobat__ left
[21:39] *** patrickb left
[22:36] *** Guest1 left
[23:29] *** Juerd joined
[23:30] <japhb> (torch and pitchfork)  DO ALLL THE WEIRD THINGS!

[23:43] *** MasterDuke joined
[23:44] *** jess left
