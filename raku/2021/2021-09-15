[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:20] *** lichtkind left
[00:36] *** Xliff joined
[01:13] *** frost joined
[01:28] *** swaggboi left
[02:25] *** swaggboi joined
[02:52] *** codesections joined
[03:52] *** nativecallable6 left
[03:52] *** coverable6 left
[03:52] *** sourceable6 left
[03:52] *** benchable6 left
[03:52] *** linkable6 left
[03:52] *** evalable6 left
[03:52] *** greppable6 left
[03:52] *** squashable6 left
[03:52] *** tellable6 left
[03:52] *** committable6 left
[03:52] *** unicodable6 left
[03:52] *** shareable6 left
[03:52] *** statisfiable6 left
[03:52] *** bisectable6 left
[03:52] *** notable6 left
[03:52] *** reportable6 left
[03:52] *** quotable6 left
[03:52] *** bloatable6 left
[03:52] *** releasable6 left
[03:53] *** shareable6 joined
[03:53] *** tellable6 joined
[03:53] *** committable6 joined
[03:53] *** notable6 joined
[03:53] *** bisectable6 joined
[03:53] *** evalable6 joined
[03:54] *** sourceable6 joined
[03:54] *** coverable6 joined
[03:54] *** releasable6 joined
[03:55] *** reportable6 joined
[03:55] *** linkable6 joined
[04:09] *** jcallen left
[04:18] *** jcallen joined
[04:52] *** unicodable6 joined
[04:53] *** nativecallable6 joined
[04:53] *** bloatable6 joined
[04:55] *** greppable6 joined
[04:55] *** statisfiable6 joined
[04:55] *** benchable6 joined
[05:01] *** keutoi joined
[05:54] *** quotable6 joined
[06:03] *** reportable6 left
[06:06] *** abraxxa joined
[06:11] *** abraxxa left
[06:12] *** abraxxa joined
[06:22] *** abraxxa left
[06:22] *** abraxxa joined
[06:24] *** abraxxa left
[06:26] *** abraxxa joined
[06:31] *** abraxxa left
[06:32] *** abraxxa joined
[07:32] *** notable6 left
[07:32] *** coverable6 left
[07:32] *** statisfiable6 left
[07:32] *** releasable6 left
[07:32] *** benchable6 left
[07:32] *** committable6 left
[07:32] *** evalable6 left
[07:32] *** sourceable6 left
[07:32] *** tellable6 left
[07:32] *** bloatable6 left
[07:32] *** linkable6 left
[07:32] *** shareable6 left
[07:32] *** bisectable6 left
[07:32] *** unicodable6 left
[07:32] *** nativecallable6 left
[07:32] *** greppable6 left
[07:32] *** quotable6 left
[07:33] *** nativecallable6 joined
[07:33] *** notable6 joined
[07:33] *** greppable6 joined
[07:33] *** benchable6 joined
[07:34] *** tellable6 joined
[07:34] *** Sgeo left
[07:35] *** bisectable6 joined
[07:35] *** committable6 joined
[07:35] *** coverable6 joined
[07:54] *** squashable6 joined
[08:00] *** dakkar joined
[08:32] *** unicodable6 joined
[08:32] *** evalable6 joined
[08:33] *** sourceable6 joined
[08:45] *** lichtkind joined
[09:05] *** immediate joined
[09:16] *** SmokeMachine__ is now known as SmokeMachine

[09:33] *** statisfiable6 joined
[09:33] *** shareable6 joined
[09:35] *** immediate left
[09:51] *** dogbert11 left
[09:52] *** dogbert17 joined
[10:00] *** immediate joined
[10:04] *** reportable6 joined
[10:34] *** quotable6 joined
[10:34] *** bloatable6 joined
[10:53] *** Xliff left
[11:33] *** releasable6 joined
[11:33] *** linkable6 joined
[11:53] *** abraxxa left
[11:57] *** abraxxa joined
[12:02] *** reportable6 left
[12:03] *** abraxxa left
[12:04] *** abraxxa joined
[12:04] *** reportable6 joined
[12:30] *** immediate left
[12:52] *** Xliff joined
[12:52] <Xliff> \o

[12:54] <Altreus> vrurg: saw your post on reddit :) glad something grew out of that

[12:55] <Altreus> apparently it's an ADHD trait to only realise some time later that you weren't saying what you actually intended to say

[13:17] *** immediate joined
[13:34] *** dogbert17 left
[13:38] <vrurg> Altreus: I wouldn't say I was intended to say that. :) But really, it was a productive discussion and not only on that aspect.

[13:39] <Altreus> vrurg: I mean I failed to realise what I was trying to say :D

[13:40] <vrurg> Ah, ok... :D

[13:59] <tbrowder> g'day all

[14:00] <tbrowder> i'm getting a when using mi6 that reports Tap is using deprecated code

[14:01] <tbrowder> but zef says the module isn't installed!

[14:02] <tbrowder> any idea what i should do, if anything? thnx

[14:02] <tbrowder> *a msg when...

[14:03] <lizmat> perhaps zef is using one internally ?

[14:04] <tbrowder> hm

[14:04] *** Sgeo joined
[14:06] <tbrowder> i think you're right, thnx, lizmat, nick has been very busy lately  :-)

[14:10] *** dogbert17 joined
[14:28] *** frost left
[14:28] *** guifa left
[15:05] <tbrowder> modules.raku shows Tap but zef can't find it...

[15:07] <tbrowder> ok, it must be parent of Tap::Harness, Raku.land shows that

[15:07] <tbrowder> bye

[15:08] <ugexe> its TAP not Tap

[15:15] *** mtj left
[15:18] *** patrickb joined
[15:19] <patrickb> tonyo: I'm wondering about https://raku.land/cpan:SEGOMOS/fez Is SEGOMOS your CPAN handle?

[15:22] *** discord-raku-bot left
[15:22] *** discord-raku-bot joined
[15:23] *** discord-raku-bot left
[15:23] *** discord-raku-bot joined
[15:27] *** abraxxa left
[15:29] *** mtj joined
[15:38] *** patrickb left
[15:49] *** abraxxa-home joined
[16:00] <tbrowder> yes, TAP

[16:02] <discord-raku-bot> <Slaytanical#9737> I'm going to be giving all the documentation i can find a good read tonight, but I'm going to attempt to setup "rakudo on a (usb) stick" where everything related to it (including zef stuff) stays on the usb stick. Any pointers? or has someone done this in the past and can point me to the instructions? Ty in advance (:

[16:22] *** keutoi left
[16:39] *** melezhik joined
[16:39] <melezhik> how can I do http redirect in cro , after processing post request?

[16:39] <tellable6> 2021-09-15T15:12:34Z #raku-dev <lizmat> melezhik you might find this interesting: https://raku.land/zef:lizmat/Rakudo::Options

[16:40] <melezhik> lizmat++

[16:41] <melezhik> this is not good - https://github.com/melezhik/topsdevops/blob/master/app.raku#L121 as it redirect user to "/" with POST method

[16:41] <melezhik> but I need to redirect with GET

[16:48] *** dakkar left
[16:50] *** melezhik left
[16:51] *** patrickb joined
[16:51] *** patrickb left
[16:52] *** patrickb joined
[16:52] *** patrickb left
[16:52] *** patrickb joined
[16:52] *** patrickb left
[16:52] *** patrickb joined
[16:53] *** patrickb left
[17:12] <Altreus> I don't think redirect specifies a method at all

[17:12] <Altreus> you can use redirect :see-other to give it a 303

[17:13] <Altreus> oh they went

[17:13] <Altreus> I think the answer is to use created, not redirect

[17:22] *** abraxxa-home left
[17:41] <tonyo> .tell patrickb that is a cpan test account i have, fez is there in reference to:  https://github.com/ugexe/zef/issues/410

[17:41] <tellable6> tonyo, I'll pass your message to patrickb

[17:45] *** patrickb joined
[17:54] *** patrickb left
[18:00] *** squashable6 left
[18:02] *** reportable6 left
[18:03] <grondilu> how do I reverse an array?  from <a b> how do I get { "a" => 0, "b" => 1 }  ?  I thought .pairs.invert.hash would work but apparently not

[18:04] *** reportable6 joined
[18:05] <[Coke]> m: my @a=<a b>; dd @a.kv.reverse.Hash

[18:05] <camelia> rakudo-moar 10b327292: OUTPUT: «Hash % = {:a(0), :b(1)}␤»

[18:06] <[Coke]> kv is probably faster/cheaper than doing pairs. 

[18:06] <immediate> m: say <a b>.antipairs.Hash

[18:06] <camelia> rakudo-moar 10b327292: OUTPUT: «{a => 0, b => 1}␤»

[18:06] <[Coke]> even better. :)

[18:06] <grondilu> nice, never seen .antipairs before

[18:06] <[Coke]> if you wanted to manually do the pairs, you'd need to invert the pairs themselves, you're inverted the list of paris.

[18:07] <[Coke]> *you've

[18:10] <grondilu> unrelated: wasn't there a `=finished` directive to comment everything from here to EOF?

[18:14] <lizmat> =finish

[18:15] <lizmat> which oddly does not appear to findable on docs.raku.org

[18:18] <[Coke]> not documented on https://docs.raku.org/language/pod

[18:18] <[Coke]> https://github.com/Raku/doc/issues/2284

[18:20] <[Coke]> (That ticket also notes the current state (as of last year) about various pod features.

[18:42] *** patrickb joined
[18:56] <grondilu> damn I think I will never understand grammars :(

[18:57] <grondilu> m: say "000" ~~ /0*<digit>+/

[18:57] <camelia> rakudo-moar 10b327292: OUTPUT: «｢000｣␤ digit => ｢0｣␤»

[18:57] <grondilu> ^this I understand, but then...

[18:57] <codesections> does anyone have access to a Windows install handy?  This SO question (https://stackoverflow.com/questions/69191917/how-to-get-a-help-functionality-in-repl ) makes me think that `$PATH` might not be set properly in Windows

[18:57] <grondilu> m: ay grammar { token TOP { <leading-zeros><digit>+ }; token leading-zeros { 0* } }.parse: "000"

[18:57] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ay used at line 1␤␤»

[18:58] <grondilu> m: say grammar { token TOP { <leading-zeros><digit>+ }; token leading-zeros { 0* } }.parse: "000"

[18:58] <camelia> rakudo-moar 10b327292: OUTPUT: «Nil␤»

[18:58] <grondilu> isn't it supposed to be the same thing?

[18:59] <codesections> m: say grammar { regex TOP { <leading-zeros><digit>+ }; regex leading-zeros { 0* } }.parse: "000"

[18:59] <camelia> rakudo-moar 10b327292: OUTPUT: «｢000｣␤ leading-zeros => ｢00｣␤ digit => ｢0｣␤»

[19:00] <grondilu> ok, can you explain to me why it doesn't work with tokens?

[19:02] <grondilu> oh I see

[19:02] <grondilu> "Regex methods are slow but thorough, they will look back in the string and really try."

[19:02] <codesections> grondilu: yep! token { 'some pattern' } is like regex { :ratchet 'some pattern' } see https://docs.raku.org/language/regexes#Named_regex_definition_syntax

[19:02] <grondilu> so tokens don't backtrack.  got it.

[19:04] <codesections> which means the token version matches "0001" just fine

[19:04] <grondilu> it's really not a token that I'm parsing, now that I think about it.

[19:19] *** djerius joined
[19:23] <grondilu> hum...  wasn't there a way to cut a long sequence of method calls into several lines?  I can't make it work anymore.

[19:24] <grondilu> do I have to backslash the newlines?

[19:25] <lizmat> you can put whitespace between the invocant and the method nowadays

[19:26] <lizmat> m: dd 42    .Str

[19:26] <camelia> rakudo-moar 10b327292: OUTPUT: «"42"␤»

[19:26] <moon-child> lizmat: I have had problems with doing that in the (recent) past

[19:26] <lizmat> grondilu ^^

[19:26] <grondilu> but no newlines apparently

[19:26] <lizmat> yes, they can be newlines, afaik

[19:26] <moon-child> however you can use ==> instead in some cases

[19:27] <gfldex> grondilu: in doubt you can use \ to quote the newline

[19:27] <grondilu> but that is very ugly

[19:28] <grondilu> it used to work fine and was very nice

[19:30] <gfldex> still work if you do `42␤.say` but not for `42.␤say`

[19:30] <lizmat> grondilu: please provide an example where it doesn't work

[19:30] <lizmat> then we can submit a bug report  :-)

[19:34] <codesections> A backslash is also required in *any* "method" in the chain is really a sub being called *as* a method.

[19:35] <codesections> m: sub add1 {$_ + 1}; 5.5.round.&add1.say; # doesn't work with newlines/spaces without \

[19:35] <camelia> rakudo-moar 10b327292: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub add1 at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:35] <codesections> m: sub add1($_) {$_ + 1}; 5.5.round.&add1.say; # doesn't work with newlines/spaces without \

[19:35] <camelia> rakudo-moar 10b327292: OUTPUT: «7␤»

[19:39] <immediate> What is the meaning of a twigil-less variable that is declared with `has` in a class?

[19:39] <immediate> e.g., `class A { has $val }`

[19:40] <immediate> This answer is where I saw it: https://stackoverflow.com/a/62969222

[19:46] <xinming> releasable6: status

[19:46] <releasable6> xinming, Next release in ≈2 days and ≈23 hours. There are no known blockers. Changelog for this release was not started yet

[19:46] <releasable6> xinming, Details: https://gist.github.com/fdb6dacf285b68e53f6cf1eb0e958666

[19:52] <grondilu> https://gist.github.com/grondilu/b35ede989a6bfbe335d43d8c84c99a7b

[19:53] <grondilu> I could probably trim it more but oh well

[19:54] <gfldex> m: class C { has $a; }; say C.^attributes;

[19:54] <camelia> rakudo-moar 10b327292: OUTPUT: «(Mu $!a)␤»

[19:54] <gfldex> immediate: ^^^

[19:56] <codesections> gfldex: I noticed that too, but it left me more confused rather than less.  Are you saying that `has $a` is an exact synonym for `has $!a`?   If so, I've sure been writing a lot of needless !s 

[19:57] <gfldex> codesections: I didn't check Roast but the docs don't mention this form, so this might be an artifact.

[19:58] <moon-child> roast has it

[19:58] <codesections> hmm, so it's just missing from the docs?

[19:58] <moon-child> S12-attributes/instance.t, S12-class/attributes.t, S03-binding/attributes.t

[19:59] <gfldex> looks like it

[20:00] <gfldex> And it's likely not the last ENODOC. Raku is BIG!

[20:01] *** squashable6 joined
[20:06] <grondilu> m: say <foo bar>.antipairs.hash<foo>;

[20:06] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»

[20:07] <grondilu> ^this fails if I put a newline after bar>

[20:07] <grondilu> in fact:

[20:07] <grondilu> m: say <foo bar> .antipairs.hash<foo>;

[20:07] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say <foo bar> .antipairs.hash<foo>7⏏5;␤    expecting any of:␤        prefix␤        term␤»

[20:08] <grondilu> just a space is enough

[20:09] <grondilu> m: say <foo bar> .elems.perl;

[20:09] <camelia> rakudo-moar 10b327292: OUTPUT: «2␤»

[20:10] <grondilu> m: say (<foo bar> .antipairs.hash)<foo>;

[20:10] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»

[20:10] <grondilu> hum I guess using a postcircumfix messes things

[20:13] * grondilu vaguely remembers something about this

[20:18] <Geth> ¦ doc/attribute-alias: 6fd14c79a5 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[20:18] <Geth> ¦ doc/attribute-alias: Document attribute aliases

[20:18] <Geth> ¦ doc/attribute-alias: 

[20:18] <Geth> ¦ doc/attribute-alias: Part of the spec in Roast S12-class/attributes.t  

[20:18] <Geth> ¦ doc/attribute-alias: https://github.com/Raku/roast/blob/master/S12-class/attributes.t#L23-L33

[20:18] <Geth> ¦ doc/attribute-alias: review: https://github.com/Raku/doc/commit/6fd14c79a5

[20:18] <Geth> ¦ doc: codesections++ created pull request #3963: Document attribute aliases

[20:18] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3963

[20:26] <codesections>  grondilu: I agree, that *is* pretty odd

[20:26] <codesections> m: say <foo bar> .antipairs.hash<note> 1;

[20:26] <camelia> rakudo-moar 10b327292: OUTPUT: «Noted␤False␤»

[20:28] <immediate> gfldex: thanks what is ENODOC, cant find in the glossary

[20:28] <immediate> and should one use $val instead of $!val 

[20:28] <codesections> it's jargon/slang for ERROR: Not Documented

[20:29] <gfldex> immediate: ENODOC is a not overly serious reference to http://www.virtsync.com/c-error-codes-include-errno

[20:31] *** lichtkind left
[20:35] <[Coke]> ENOTLA

[20:35] <[Coke]> ENOCOFFEE

[20:35] <[Coke]> ENOBEER #actually timezone appropriate

[20:46] *** justsomeguy joined
[20:55] *** patrickb left
[20:58] *** immediate left
[20:59] *** MasterDuke26 joined
[21:03] *** silug left
[21:18] *** silug joined
[21:56] *** justsomeguy left
[22:08] *** MasterDuke26 left
[22:52] *** Polyinsecure joined
[23:15] *** Polyinsecure left
[23:15] *** simcop2387 left
[23:15] *** perlbot left
