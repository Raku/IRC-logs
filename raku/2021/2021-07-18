[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:24] *** jgaz left
[00:29] *** bdju left
[00:29] *** bdju joined
[01:12] *** guifa left
[01:19] *** xinming_ joined
[01:21] <japhb> Is there any way to speed up parsing of code (test files, in this case) that use custom circumfix operators?
[01:21] <japhb> If it was library code, I'd probably not worry too much -- that's what precomp is for -- but for tests it slows down the edit-test cycle
[01:22] *** xinming left
[01:26] *** MasterDuke joined
[01:28] *** monkey_ left
[02:05] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:14] <Xliff> Is there a way alias class attributes?
[02:15] <Xliff> Something like "has $.a is rw is also<able>"
[02:16] <Xliff> Currently, I'm going with a raw method like "method able is rw { Proxy.new: FETCH => -> $ { $!a }, STORE => -> $, \v { $!a = v }; }"
[03:05] *** evalable6 left
[03:05] *** linkable6 left
[03:06] *** evalable6 joined
[03:07] *** linkable6 joined
[03:09] *** keutoi joined
[03:12] <keutoi> Are channel logs available somewhere?
[03:19] *** monkey_ joined
[03:34] *** monkey_ left
[03:53] <raydiak> Xliff: you could bind it
[03:53] <raydiak> m: class C { has $.a is rw; has $.b is rw; submethod TWEAK () { $!a := $!b; } }; my $o = C.new; $o.b = 1; say $o.a; $o.a = 42; say $o.b;
[03:53] <camelia> rakudo-moar d668d9929: OUTPUT: «1␤42␤»
[03:53] <raydiak> you'd have to do a little more to support either name in the constructor I think
[03:55] <raydiak> keutoi: we're kinda in a transitional period between logging solutions, but a temporary interface exists at https://logs.liz.nl/
[04:00] <Xliff> radiak: Hi! Nice thought, but this is for repr<CStruct> where you can't have extraneous members. Hence the method.
[04:01] <raydiak> hi :) and I see...
[04:01] <raydiak> maybe a FALLBACK?
[04:02] <raydiak> m: class C { has $.a; method FALLBACK ($m) is raw { $!a if $m eq "b" } }; my $o = C.new; $o.b = 42; say $o.a
[04:02] <camelia> rakudo-moar d668d9929: OUTPUT: «42␤»
[04:02] <Xliff> keutoi: https://colabti.org/irclogger/irclogger_logs/perl6
[04:02] <raydiak> not sure if that's any better than your proxy tbh, or if it works on a CStruct, but just another thought
[04:02] <Xliff> ^^ Historical
[04:03] <Xliff> keutoi: Current - https://colabti.org/irclogger/irclogger_logs/raku
[04:03] <Xliff> rakiak: LOL. I prefer the procy. I am very FALLBACK() adverse.
[04:05] <raydiak> yeah, you mnight be stuck with the proxy. I'm out of tricks off the top of my head, unless you want to wrap the whole CStruct within something else
[04:06] <raydiak> and just returning the attribute doesn't work with a CStruct? like the fallback example but with a normal method...
[04:06] <Xliff> Hmmm... that's an option, but an expensive one and would require delegation.
[04:06] <raydiak> m: class C { has $.a; method b is raw { $!a } }; my $o = C.new; $o.b = 42; say $o.a
[04:06] <camelia> rakudo-moar d668d9929: OUTPUT: «42␤»
[04:07] <Xliff> Huh! Oh, I like that.
[04:07] <raydiak> never tried it with a CStruct though
[04:07] <Xliff> Should also be less expensive than the Proxy.
[04:07] <Xliff> It should be fine, since it's a method.
[04:09] <raydiak> note that perticular implementation doesn't enforce read-only, it makes the private attribute directly accessible from outside, for better or for worse
[04:10] <raydiak> that's why $.a isn't rw in that example, but I could assign a value to .b anyway and it still ends up in .a
[04:11] <raydiak> iow, this would actually be more correct:
[04:11] <raydiak> m: class C { has $.a is rw; method b is raw { $.a } }; my $o = C.new; $o.b = 42; say $o.a
[04:11] <camelia> rakudo-moar d668d9929: OUTPUT: «42␤»
[04:11] <keutoi> raydiak: Xliff: thank you for the links
[04:12] <raydiak> m: class C { has $.a; method b is raw { $.a } }; my $o = C.new; $o.b = 42; say $o.a # fails as it should without `is rw`
[04:12] <camelia> rakudo-moar d668d9929: OUTPUT: «(Any)␤»
[04:13] <raydiak> uh, hmmm...that throws under 2021.06, but fails silently on master
[04:13] <Xliff> radiak: That's a regression. Bug it.
[04:14] <Xliff> bisectable: class C { has $.a; method b is raw { $.a } }; my $o = C.new; $o.b = 42; say $o.a
[04:14] <bisectable6> Xliff, Will bisect the whole range automagically because no endpoints were provided, hang tight
[04:14] <keutoi> mykhal: So that was a bug? I came across it when using emacs to load a buffer line by line.
[04:14] <bisectable6> Xliff, Output on all releases: https://gist.github.com/d6a3e683e6672427a120eead28da9e2f
[04:14] <bisectable6> Xliff, Bisecting by exit code (old=2021.06 new=d668d99). Old exit code: 1
[04:14] <bisectable6> Xliff, bisect log: https://gist.github.com/490302694a875b1fb3e489b3d7ce7a4e
[04:14] <bisectable6> Xliff, (2021-06-26) https://github.com/rakudo/rakudo/commit/dba9f56afa95ef078a5d0eb1cadd516e098d3987
[04:14] <bisectable6> Xliff, Bisecting by output (old=2018.10 new=2018.11) because on both starting points the exit code is 1
[04:15] <bisectable6> Xliff, bisect log: https://gist.github.com/fb02d9e1c78ea418c30943d0d1b54eae
[04:15] <bisectable6> Xliff, (2018-11-06) https://github.com/rakudo/rakudo/commit/e67584929f4ff2d753d9aa1603ad66962b3f0e96
[04:15] <bisectable6> Xliff, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1
[04:15] <bisectable6> Xliff, bisect log: https://gist.github.com/74385d0d350a27a262c20a8a97f63eb0
[04:15] <bisectable6> Xliff, (2017-05-26) https://github.com/rakudo/rakudo/commit/0c16bb2b017d311a342bb22e2a67b2f1a759afee
[04:15] <bisectable6> Xliff, Output on all releases and bisected commits: https://gist.github.com/0662a4b7e37afa6e5a14269a69255e25
[04:15] <raydiak> Xliff: agreed
[04:16] <Xliff> Funny, bisectable can't find it working on any of its tests
[04:17] <Xliff> Out for a nap !!!
[04:17] <raydiak> rest well o/
[04:17] <raydiak> or do you mean bisectable?
[04:19] <raydiak> it shows the lack of error in some of its output, but doesn't seem to be doing a good job of actually noticing it and bisecting
[04:21] <raydiak> looks like probably https://github.com/rakudo/rakudo/commit/dba9f56afa95ef078a5d0e
[04:34] *** evalable6 left
[04:34] *** linkable6 left
[04:34] *** linkable6 joined
[04:34] *** evalable6 joined
[04:40] *** gordonfish- is now known as gordonfish
[05:38] *** jmcgnh joined
[05:44] <mykhal> keutoi: really not sure what causes that misleading claim "Package 'B' already has a method 'b'" in your raku repl screenshot imgur.com/a/Pi17pLg 
[05:48] <mykhal> keutoi: at least i verified it does not depend on chosen names, happens for A, a; B, b; but also for ABC, def, GHI, jkl. :)
[05:52] <moon-child> oh, wow, that is bizarre
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:31] <moon-child> m: say 1 ** i
[06:31] <camelia> rakudo-moar d668d9929: OUTPUT: «1+0i␤»
[06:31] <moon-child> m: say 1ⁱ
[06:31] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 17⏏5ⁱ␤»
[06:31] <moon-child> LITERALLY unusable
[06:34] <moon-child> amazingly this works
[06:34] <moon-child> m: say 2²⁺²
[06:34] <camelia> rakudo-moar d668d9929: OUTPUT: «16␤»
[06:34] <moon-child> m: say 2⁸¯⁴
[06:34] <camelia> rakudo-moar d668d9929: OUTPUT: «0.00000000023␤»
[06:34] <pony> I don't have those little numbers on my keyboard ;o
[06:35] <moon-child> hmm, I don't think that's right
[06:35] <moon-child> I guess it's interpreted as (2 ** 8) ** -4 ?
[06:36] <pony> 2 ** 8 ** -4
[06:36] <pony> m: 2 ** 8 ** -4
[06:36] <camelia> rakudo-moar d668d9929: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "**" in expression "2 ** 8 **" in sink context (line 1)␤»
[06:36] <moon-child> but ⁺ seemed to do the right thing...
[06:37] <moon-child> another thing that would be cool:
[06:37] <moon-child> m: my \n = 4; say 2ⁿ
[06:37] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my \n = 4; say 27⏏5ⁿ␤»
[06:51] <mykhal> m: say <¯> eq <⁻>
[06:51] <camelia> rakudo-moar d668d9929: OUTPUT: «False␤»
[07:03] *** linkable6 left
[07:04] *** linkable6 joined
[07:45] *** Eddward_ left
[08:05] <Xliff> m: my \ⁿ = 4; say 2ⁿ
[08:05] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my \ⁿ = 4; say 27⏏5ⁿ␤»
[08:05] <Xliff> Huh
[08:06] <moon-child> well, that part actually makes sense, because
[08:06] <moon-child> m: my \ⁿ = 4; say 2**ⁿ
[08:06] <camelia> rakudo-moar d668d9929: OUTPUT: «16␤»
[08:07] <moon-child> so it's just two consecutive tokens
[08:07] <moon-child> I mean, I think it would be cool if it were supported, but it's technically a compat break
[08:45] *** linkable6 left
[08:45] *** evalable6 left
[08:46] *** evalable6 joined
[08:48] *** linkable6 joined
[08:50] <raydiak> and for whatever reason, this doesn't work either
[08:50] <raydiak> m: my \n = 4; sub postfix:<ⁿ> ($base) { $base ** n }; say 2ⁿ
[08:50] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3ostfix:<ⁿ> ($base) { $base ** n }; say 27⏏5ⁿ␤»
[08:50] <raydiak> even though this works:
[08:51] <raydiak> my \n = 4; sub postfix:<n> ($base) { $base ** n }; say 2n
[08:51] <evalable6> raydiak, rakudo-moar d668d9929: OUTPUT: «16␤»
[09:06] <Xliff> radiak: I think that endpoint needs to be hardcoded into Raku as a proper identifier.
[09:39] *** Guest77 joined
[09:56] *** Sgeo left
[09:59] <raydiak> maybe you know something I don't, but as I understand it that definitely should not be the case. ⁿ counts as a word character, and works as a term or a sub name. all kinds of other characters work with postfix:<>, including other word characters. this one behaves differently for whatever reason. I just don't honestly care enough to investigate further, was just something I happened to notice
[10:00] *** squashable6 left
[10:03] *** squashable6 joined
[10:07] <raydiak> my guess would be there's probably something about the unicode category or other properties which causes it to fall through in the grammar
[10:16] <raydiak> it even works as a prefix (if you add a space to prevent it from being parsed all as one identifier). just not postfix (whether with a space or without)
[10:16] <raydiak> m: sub prefix:<ⁿ> ($a) { say "works" }; ⁿ 2
[10:16] <camelia> rakudo-moar d668d9929: OUTPUT: «works␤»
[10:16] <raydiak> m: sub infix:<ⁿ> ($a, $b) { say "works" }; 1 ⁿ 2
[10:17] <raydiak> m: sub infix:<ⁿ> ($a, $b) { say "works" }; 1 ⁿ 2
[10:17] <camelia> rakudo-moar d668d9929: OUTPUT: «works␤»
[10:17] <raydiak> m: sub postfix:<ⁿ> ($a) { say "works" }; 1 ⁿ
[10:17] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3sub postfix:<ⁿ> ($a) { say "works" }; 17⏏5 ⁿ␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statem…»
[10:17] <raydiak> m: sub postfix:<ⁿ> ($a) { say "works" }; 1ⁿ
[10:17] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3sub postfix:<ⁿ> ($a) { say "works" }; 17⏏5ⁿ␤    expecting any of:␤        whitespace␤»
[10:19] <raydiak> and again if you use n instead of ⁿ, then postfix does work (without a space)
[10:19] <raydiak> sub postfix:<n> ($a) { say "works" }; 1n
[10:19] <evalable6> raydiak, rakudo-moar d668d9929: OUTPUT: «works␤»
[10:19] <raydiak> m: sub postfix:<n> ($a) { say "works" }; 1 n
[10:19] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3sub postfix:<n> ($a) { say "works" }; 17⏏5 n␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement …»
[10:22] <raydiak> m: say uniprop "n"; say uniprop "ⁿ";
[10:22] <camelia> rakudo-moar d668d9929: OUTPUT: «Ll␤Lm␤»
[10:23] <raydiak> something about that difference is likely the cause
[10:25] <raydiak> anyway, it doesn't bother me if someone has to write a slang to do that :) just a curiosity
[11:03] *** linkable6 left
[11:05] *** linkable6 joined
[11:22] <mykhal> m: say "{ (2**1000).log2 }, { (2**1024).log2 }"
[11:22] <camelia> rakudo-moar d668d9929: OUTPUT: «1000.0000000000001, Inf␤»
[11:23] *** lucerne left
[11:24] *** lucerne joined
[11:25] *** greyrat_ joined
[11:26] *** greyrat left
[11:28] <pony> m: say (2**1024).Str.chars
[11:28] <camelia> rakudo-moar d668d9929: OUTPUT: «309␤»
[11:29] <pony> nite
[11:48] *** holyghost joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:20] *** lizmat_ joined
[12:21] *** cognominal_ joined
[12:22] *** TempIRCLogger left
[12:23] *** lizmat left
[12:25] *** cognominal left
[12:27] *** lizmat_ left
[12:27] *** lizmat joined
[12:29] *** sono left
[13:15] *** monkey_ joined
[13:23] *** guifa joined
[14:07] *** monkey_ left
[14:09] *** guifa left
[14:17] *** keutoi left
[14:19] *** keutoi joined
[14:37] *** abraxxa-home joined
[14:44] *** keutoi left
[14:58] *** dg left
[15:00] *** guifa joined
[15:02] *** monkey_ joined
[15:41] *** keutoi joined
[15:45] *** Eddward_ joined
[15:53] *** keutoi left
[16:05] *** algorev joined
[16:06] <algorev> hello
[16:06] <algorev> weird question but
[16:07] <algorev> is there any chance raku _parses_ the received text when you use Socket::INET.recv?
[16:07] <algorev> i have this code:
[16:08] <algorev> my $sock = IO::Socket::INET.new(:host<google.com>, :port(80));
[16:08] <algorev> $sock.print("GET" ~ " / HTTP/1.1\r\n\r\n");
[16:08] <algorev> .say for $sock.lines;
[16:08] <algorev> .
[16:08] <algorev> it fails the following way
[16:09] <algorev> <response from google> malformed utf-8 near bytes 67 65 f6
[16:09] <algorev> in block <unit> at .\gutenberg.raku line 3
[16:10] <algorev> so is it caused by the length of google's response?
[16:10] <algorev> or just an invalid character that's being printed?
[16:10] <algorev> what confuses me is that the error makes it sound like it's my code that doesn't parse
[16:10] <algorev> so i don't know
[16:11] <guifa> malformed utf-8 means something was off in the byte stream  as it tried to convert to a Str
[16:12] <algorev> i see
[16:12] <algorev> so it's the conversion to Str in '.say'?
[16:13] <algorev> so the malformed character would be in the server's response?
[16:14] <guifa> Likely.  You might try reading it in binary mode and manually decoded as UTF-8, and then you can set a replacement character
[16:14] <algorev> i see. thanks a lot!
[16:14] *** algorev left
[16:14] <ugexe> well at the very least thats going to forward you to https and you'll need IO::Socket::SSL for that
[16:15] <ugexe> (not that that would cause your issue)
[16:23] <ugexe> while (my $output = $sock.get) { say $output } # this works instead of $sock.lines although i would expect them to both work similarly
[16:24] <ugexe> ah no it doesnt
[16:26] <ugexe> my $sock = IO::Socket::INET.new(:encoding<utf8-c8>, :host<google.com>, :port(80)); $sock.print("GET" ~ " / HTTP/1.0\r\n\r\n"); say $_ for $sock.lines
[16:26] <evalable6> ugexe, rakudo-moar b0caab5bf: OUTPUT: «HTTP/1.0 200 OK␤Date: Sun, 18 Jul 2021 16:26:21…»
[16:26] <evalable6> ugexe, Full output: https://gist.github.com/c51abccd0f91269990fcf4ecd7d7627f
[16:27] <ugexe> adding the :encoding that won't crap out on invalid utf8 allows it to run. note though that i also switched your example to http 1.0 since 1.1 will have chunked transfer encoding which you may not be expecting
[16:53] *** abraxxa-home left
[17:00] *** guifa left
[17:17] *** monkey_ left
[17:55] *** Sgeo joined
[18:03] *** reportable6 left
[18:03] *** reportable6 joined
[18:06] *** Guest77 left
[18:17] *** RakuIRCLogger left
[18:18] *** jgaz joined
[18:36] *** jgaz left
[18:59] *** monkey_ joined
[19:16] *** guifa joined
[19:29] *** monkey_ left
[19:35] *** Sgeo left
[19:35] *** Xliff left
[19:38] *** Sgeo joined
[20:36] *** guifa left
[20:40] *** vodkra left
[20:46] *** vodkra joined
[21:06] *** perlbot left
[21:06] *** simcop2387 left
[21:27] *** monkey_ joined
[21:40] *** simcop2387 joined
[21:41] *** perlbot joined
[21:46] *** perlbot left
[21:46] *** simcop2387 left
[21:48] *** Geth left
[21:49] *** lizmat left
[21:50] *** lizmat joined
[21:51] *** simcop2387 joined
[21:52] *** perlbot joined
[22:17] *** monkey_ left
[22:23] <japhb> logs.liz.nl unresponsive for anyone else?
[22:25] *** squashable6 left
[22:27] *** squashable6 joined
[22:35] *** squashable6 left
[22:37] *** squashable6 joined
[22:38] *** squashable6 left
[22:39] *** squashable6 joined
[23:27] *** phogg left
[23:27] *** phogg joined
[23:49] <raydiak> working here
[23:54] <raydiak> though I don't see any updates for the past 5 or 6 hours on #raku, and it is quite sluggish to respond to requests (don't recall if it's slower than usual)
