[00:26] *** coverable6 joined
[00:26] *** quotable6 joined
[00:26] *** evalable6 joined
[00:57] *** Altai-man_ joined
[01:00] *** Altai-man left
[01:04] *** reportable6 joined
[01:14] *** frost joined
[01:25] *** lichtkind left
[01:26] *** tellable6 joined
[01:27] *** statisfiable6 joined
[02:26] *** squashable6 joined
[02:35] *** frost left
[02:39] *** frost joined
[03:14] *** frost left
[03:20] *** frost joined
[04:20] *** coverable6 left
[04:20] *** committable6 left
[04:20] *** squashable6 left
[04:20] *** statisfiable6 left
[04:20] *** releasable6 left
[04:20] *** reportable6 left
[04:20] *** tellable6 left
[04:20] *** bloatable6 left
[04:20] *** unicodable6 left
[04:20] *** notable6 left
[04:20] *** greppable6 left
[04:20] *** shareable6 left
[04:20] *** sourceable6 left
[04:20] *** linkable6 left
[04:20] *** quotable6 left
[04:20] *** evalable6 left
[04:20] *** benchable6 left
[04:20] *** nativecallable6 left
[04:20] *** linkable6 joined
[04:21] *** committable6 joined
[04:21] *** nativecallable6 joined
[04:22] *** reportable6 joined
[04:22] *** bloatable6 joined
[04:22] *** squashable6 joined
[04:22] *** benchable6 joined
[04:22] *** evalable6 joined
[04:22] *** statisfiable6 joined
[05:20] *** shareable6 joined
[05:20] *** notable6 joined
[05:21] *** quotable6 joined
[05:21] *** tellable6 joined
[05:22] *** releasable6 joined
[05:23] *** sourceable6 joined
[05:52] *** ufobat_ joined
[05:57] *** abraxxa-home joined
[05:57] *** abraxxa-home left
[05:59] *** abraxxa-home joined
[06:01] *** abraxxa-home left
[06:02] *** reportable6 left
[06:02] *** abraxxa-home joined
[06:03] *** reportable6 joined
[06:21] *** unicodable6 joined
[06:27] *** bisectable6 joined
[06:29] <xinming> !paste
[06:29] *** jjido joined
[06:32] <xinming> linkable6: https://pastebin.com/33maUDJi  <--- With this example script, When I provide the small arg which is like 1000, it works pretty fine. But when I specify larger number, which is like 4000, It'll report  `Cannot call method 'fully-reified' on a null object`
[06:32] <xinming> oops
[06:32] <xinming> lizmat: https://pastebin.com/33maUDJi  <--- With this example script, When I provide the small arg which is like 1000, it works pretty fine. But when I specify larger number, which is like 4000, It'll report  `Cannot call method 'fully-reified' on a null object`
[06:34] <xinming> I think there is a small bug where sync is out of sync, I don't know if it's a bug, as IIRC, the auto-vivification doesn't work within hyper.
[06:35] <xinming> BTW, this code is just for illustration about the bug, Not what I really do, this is the early version, now, I don't use List in the result.
[06:36] <xinming> japhb: I don't need it yet, What I was thinking is, if we can have some json-like format which also supports capture, then the json-rpc will be more "neat"
[06:45] <moon-child> xinming: sounds like an mvm bug
[06:52] *** andrzejku joined
[07:01] *** Sgeo left
[07:49] *** patrickb joined
[08:07] *** patrickb left
[08:08] *** dakkar joined
[08:17] <japhb> xinming: Ah, understood.  I'm currently reading up on the current CBOR extensions to figure out whether there's an existing construct to reuse for Capture, or if I should spec a new one.
[08:22] *** coverable6 joined
[08:38] *** jjido left
[09:18] *** lichtkind joined
[09:39] *** discord-raku-bot left
[09:40] *** discord-raku-bot joined
[10:08] *** sono is now known as Guest3787
[10:08] *** Guest3787 left
[10:09] *** Guest3787 joined
[10:11] *** squashable6 left
[10:51] *** sena_kun joined
[11:04] *** Guest3787 left
[11:13] *** abraxxa-home left
[11:26] *** keutoi joined
[11:54] <sena_kun> releasable6, status
[11:54] <releasable6> sena_kun, Next release in ≈10 days and ≈7 hours. There are no known blockers. Changelog for this release was not started yet
[11:54] <releasable6> sena_kun, Details: https://gist.github.com/a165046135da78dba5dc024f9b4e74ff
[12:01] *** lichtkind left
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:11] *** frost left
[12:12] *** neither joined
[12:13] *** lichtkind joined
[12:14] *** squashable6 joined
[12:32] *** neither left
[12:41] *** jjido joined
[13:05] *** neither joined
[13:07] *** jjido left
[13:22] *** sena_kun left
[13:23] *** sena_kun joined
[13:38] *** ufobat_ left
[13:56] *** Sgeo joined
[14:56] *** evalable6 left
[14:56] *** linkable6 left
[15:18] *** homura left
[15:21] *** greppable6 joined
[15:26] *** andrzejku left
[15:58] *** keutoi left
[15:58] *** keutoi joined
[16:01] *** andrzejku joined
[16:39] *** dakkar left
[16:50] *** zacts joined
[16:50] <zacts> hi, must I know C to contribute to core raku?
[16:51] <zacts> (just curious)
[16:51] *** lizmat_ joined
[16:51] *** RakuIRCLogger left
[16:52] *** RakuIRCLogger joined
[16:52] <lizmat_> zacts: depends how core you wanna go
[16:53] <lizmat_> a large part of Raku is written in Raku, with some nqp sprinkled in
[16:53] <lizmat_> see src/core.*/* files in the distribution
[16:53] <zacts> cool
[16:53] <zacts> like if I wanted to change synatx would I need to know C?
[16:53] <zacts> or is C mainly needed for optimization and other core tasks?
[16:54] <zacts> I would probably be most interested in extending the language itself
[16:54] <lizmat_> depends on what syntax you want to change: some modules in the ecosystem change syntax with Raku code only
[16:54] <zacts> ok
[16:54] <lizmat_> m: sub postfix:<!>(\a) { "the answer" }; say 42!
[16:54] <camelia> rakudo-moar b451f89b6: OUTPUT: «the answer␤»
[16:55] <lizmat_> ^^ syntax changing :-)
[16:55] <zacts> cool
[16:55] *** lizmat left
[16:56] *** lizmat_ left
[16:56] *** lizmat joined
[16:57] <Altreus> fly-by lizmat
[17:00] <codesections> I thought there was some way to interpolate *into* pod6, but all I'm seeing in the docs is using pod6 values in Raku.  Did I just imagine that there's a way to do something like
[17:00] <codesections> =begin pod
[17:00] <codesections> This is $*PROGRAM-NAME
[17:01] <codesections> =end pod
[17:02] <Util> xinming: trying https://pastebin.com/33maUDJi , I can reproduce your `fully-reified on a null object` error on Mac with Rakudo v2020.10 .
[17:02] <Util> On FreeBSD with Rakudo v2021.04, I get no error, even with a change from 4000 to 8000. Can you reproduce on v2021.04 or newer?
[17:04] <gfldex> codesections: if there is anything, then in https://design.raku.org/S26.html
[17:09] <xinming> Util: I'm using the newest 2021.08
[17:09] <xinming> not master branch though
[17:09] <xinming> Util: BTW, it's random, It may happen, if you lower the 4000 to 1000, it'll work pretty fine
[17:10] <xinming> Util: BTW, it's random, It may happen, if you lower the 4000 to 1000, it'll work pretty fine
[17:10] <xinming> with the List grow large, the chances will be higher
[17:10] <xinming> I use gentoo BTW
[17:11] <Util> xinming: About the randomness, yes, when I can make it crash, it is from running it 10-20 times in a row.
[17:11] <xinming> so the hyper may lose sync in some cases
[17:13] <Util> codesections: Closest things I see are https://design.raku.org/S26.html#Placement_links , https://design.raku.org/S26.html#Alias_placements , and https://design.raku.org/S26.html#Aliases , but I don't see any of those having made it into production.
[17:13] <xinming> Util: in your test, you get harder to trigger the bug, Could you please try to compile a large project in the background, and load up all cpus, then try the script again?
[17:14] <Util> xinming: will do
[17:15] <xinming> I test this within a qemu-vm, with 4000, and host is busy doing something, It's high likely the load will cause the bug appear often
[17:16] <codesections> thanks, Util, that's what I'm concluding too.  I *guess* there's the nuclear option of just EVALing $=pod, but that would have its own set of issues! 
[17:23] <gfldex> codesections: POD is part of the AST. RakuAST might become helpful.
[17:27] *** sena_kun left
[17:29] *** jjido joined
[17:32] <neither> hello how would you write an `all` function that applies a predicate to each values of an Iterable and has a short-circuiting behaviour? Returns True if all are True under predicate, False otherwise.
[17:32] <neither> my attempt with de morgan is
[17:32] <neither> m: my &oll = { not $^vals.grep(!*.&^pred) }; say oll(* < 177, 8..1_500_000)
[17:32] <camelia> rakudo-moar b451f89b6: OUTPUT: «False␤»
[17:33] <codesections> are you wanting to avoid the builtin all?
[17:33] <neither> But that doesn't short-circuit does it?
[17:34] <neither> constructs the entire junction no matter what, if I understand correctly
[17:35] <neither> # ($_ < 177 for 8..1_500_000).all
[17:35] <neither> ^this takes time
[17:35] <codesections> Well, (if I have it right) it has semantics that would *allow* for short circuiting – or at least returning when one parallel branch is false.  But that's NYI anyway, so I take your point
[17:36] <neither> (I meant with so at the end `($_ < 177 for 8..1_500_000).all.so`)
[17:36] <neither> In boolean context right?
[17:36] <neither> Like `grep` does
[17:37] *** andrzejku left
[17:40] <Util> m: sub oll ( &pred, $iter ) { not defined $iter.first(*.&pred.not) }; say oll(* < 177, 8..1_500_000);
[17:40] <camelia> rakudo-moar b451f89b6: OUTPUT: «False␤»
[17:40] <Util> neither: ^^^
[17:51] <Util> I expect `say ?((8..1_500_000).all < 177)` will short-circuit someday. (but not today)
[17:52] <codesections> agreed.  This is a little longer, but I might be tempted to go with
[17:53] <codesections> m:  sub oll(&pred, @vals) { for @vals { return False if !pred($_)}; True}; say oll * < 177, 8..1_500_000
[17:53] <camelia> rakudo-moar b451f89b6: OUTPUT: «False␤»
[17:53] <Util> Oh! Perhaps even better:
[17:53] <Util> m: sub oll ( &pred, $iter ) { not defined $iter.race.first(*.&pred.not) }; say oll(* < 177, 8..1_500_000);
[17:53] <camelia> rakudo-moar b451f89b6: OUTPUT: «False␤»
[17:57] <codesections> in 6.e.PREVIEW, there might be a nice way to do it with &last returning a value: https://github.com/rakudo/rakudo/pull/4415
[17:58] *** evalable6 joined
[17:59] <neither> Util: Thank you. With `first`, what if a value in the iterable itself wasn't DEFINITE?
[17:59] <neither> e.g.:
[17:59] <neither> m: sub oll ( &pred, $iter ) { not defined $iter.first(*.&pred.not) }; say oll(*.defined, [5, Int, 12]);
[17:59] <camelia> rakudo-moar b451f89b6: OUTPUT: «True␤»
[17:59] <neither> should we go with :k adverb or something?
[18:00] <neither> (by the way, why is `&defined ~~ Callable` is False?)
[18:00] <neither> m: say &defined ~~ Callable
[18:00] <camelia> rakudo-moar b451f89b6: OUTPUT: «True␤»
[18:00] <neither> Oh it's True?
[18:02] <neither> I tried with 2020.05.1 and it gives False..
[18:02] *** reportable6 left
[18:04] <neither> m: $*RAKU.compiler.say
[18:04] <camelia> rakudo-moar b451f89b6: OUTPUT: «rakudo (2021.08.22.gb.451.f.89.b.6)␤»
[18:05] *** reportable6 joined
[18:12] *** tejr left
[18:20] *** jess left
[18:21] <[Coke]> 2020.05 is pretty old.
[18:21] <tellable6> 2021-09-07T18:59:32Z #raku <tbrowder> [Coke] i think yr relevant chgs are fixed in my doc PR, but pls ck it when you get a chance
[18:33] *** keutoi left
[18:38] <ugexe> ximming: i also reproduced your error but also got this to pop up once
[18:38] <ugexe> raku(2746,0x70000b6bf000) malloc: Double free of object 0x7fdf72168010
[18:38] <ugexe> raku(2746,0x70000b6bf000) malloc: *** set a breakpoint in malloc_error_break to debug
[18:48] <Geth> ¦ doc: 076ce1dbbf | (Silvio Mayolo)++ | doc/Language/rb-nutshell.pod6
[18:48] <Geth> ¦ doc: Corrected Ruby nutshell typo
[18:48] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/076ce1dbbf
[18:48] <Geth> ¦ doc: fcd90780a2 | (Will Coleda)++ (committed using GitHub Web editor) | doc/Language/rb-nutshell.pod6
[18:48] <Geth> ¦ doc: Merge pull request #3956 from Mercerenies/master
[18:48] <Geth> ¦ doc: 
[18:48] <Geth> ¦ doc: Corrected Ruby nutshell typo
[18:48] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/fcd90780a2
[19:06] <xinming> ugexe: yea, I use that error because that error is more easy to produce.
[19:07] <xinming> easier to produce, the `double free` error sometimes will let the program exit silently.
[19:07] <xinming> So, this bug is reproducable, and I think will be a bug hard to debug. :-)
[19:08] <xinming> Hope we can have this bug fixed in next stable release.
[19:24] <[Coke]> . ask tbrowder didn't see the PR when I just checked, can you ping me the link if you still need me to review it? if it was related to xtest failures, just ship it and we'll fix it in post.
[19:24] <[Coke]> .ask tbrowder didn't see the PR when I just checked, can you ping me the link if you still need me to review it? if it was related to xtest failures, just ship it and we'll fix it in post.
[19:24] <tellable6> [Coke], I'll pass your message to tbrowder
[19:33] *** Maylay left
[19:41] *** Maylay joined
[19:43] *** jjido left
[19:50] *** neither left
[20:34] *** squashable6 left
[20:59] *** linkable6 joined
[21:42] *** greaser|q left
[21:42] *** greaser|q joined
[21:42] *** greaser|q is now known as GreaseMonkey
[21:45] *** Xliff left
[21:58] *** jjido joined
[22:16] <tbrowder> [Coke] new PR was #3955 merged and closed
[22:16] <tellable6> 2021-09-08T19:24:50Z #raku <[Coke]> tbrowder didn't see the PR when I just checked, can you ping me the link if you still need me to review it? if it was related to xtest failures, just ship it and we'll fix it in post.
[22:17] *** zacts left
[22:17] <tbrowder> .tell [Coke] new doc PR is #3955, merged and closed, i think it is fine
[22:17] <tellable6> tbrowder, I'll pass your message to [Coke]
[22:18] *** lizmat left
[22:18] *** lizmat joined
[22:19] *** TempIRCLogger left
[22:20] *** RakuIRCLogger left
[22:37] *** RakuIRCLogger joined
[22:39] *** TempIRCLogger joined
[23:01] *** tejr joined
