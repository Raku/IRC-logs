[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:05] <moon-child> the same applies to \n

[00:05] <moon-child> in a string literal, it's an lf, but in a regex, it matches a logical newline

[00:06] <moon-child> and \v seems like an analogous case; in regex, it matches logical vertical whitespace, so why shouldn't it be the prototypical vertically white character in a string literal?

[00:09] <mykhal> good counterarg.

[00:11] *** Garlandg joined
[00:13] <mykhal> i think it's rather uncommon char

[00:18] *** neshpion joined
[00:36] *** Xliff joined
[00:40] *** squashable6 left
[00:43] <Xliff> \o

[00:43] <tellable6> 2021-08-04T22:34:34Z #raku <dwarring> Xliff 'use LibXML::Raw imports xmlNs as class native xmlNs

[00:43] <tellable6> 2021-08-04T22:38:12Z #raku <dwarring> Xliff constructor is xmlNs.new: :$URI, :$prefix

[00:43] <Xliff> .tell dwarring Thanks!

[00:43] <tellable6> Xliff, I'll pass your message to dwarring

[00:44] <Xliff> Is there a way to get available and free disk space through Raku without parsing something from the command line?

[00:47] <japhb> Xliff: https://raku.land/github:ramiroencinas/System::Stats::DISKUsage  ?

[00:50] <japhb> Xliff: Looks like that author did a few different system stats modules (some of which work on Windows also): https://github.com/ramiroencinas

[01:00] <Xliff> japhb: Thanks. Was looking at that. Was hoping to NOT need a supplementary module.

[01:00] <Xliff> Maybe I should write the spec for %*MOUNTS or something?

[01:40] *** evalable6 left
[01:40] *** linkable6 left
[01:41] *** linkable6 joined
[01:42] *** evalable6 joined
[02:08] *** neshpion left
[02:42] *** squashable6 joined
[03:10] <japhb> Why avoid the external module?  I have over 60 that I always keep installed at this point.

[03:16] *** Doc_Holliwood left
[03:16] *** Doc_Holliwood joined
[03:30] *** squashable6 left
[03:32] *** squashable6 joined
[04:26] *** justsomeguy joined
[04:38] *** dwarring left
[05:02] <Xliff> japhb: One less thing to "zef install".

[05:03] <Xliff> I don't think something like %*MOUNTS is a bad idea

[05:15] *** Sgeo left
[05:17] *** Sgeo joined
[05:32] *** casaca left
[05:32] *** justsomeguy left
[05:35] *** Sgeo_ joined
[05:36] *** Sgeo left
[05:38] *** casaca joined
[05:39] *** casaca left
[05:42] *** casaca joined
[06:02] *** Sgeo_ left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:22] *** Doc_Holliwood left
[06:22] *** Doc_Holliwood joined
[06:30] *** Doc_Holliwood left
[06:38] *** ilogger2 left
[06:39] *** ilogger2 joined
[06:40] *** patrickb joined
[07:00] *** patrickb left
[07:16] *** Xliff left
[07:29] *** ufobat joined
[07:33] *** frost joined
[07:35] *** MoC joined
[07:36] *** Garlandg left
[08:04] *** linkable6 left
[09:04] *** evalable6 left
[09:05] *** evalable6 joined
[09:07] *** linkable6 joined
[09:27] <Altreus> hmm, raku has already rewritten so many things to avoid cross-discipline ambiguity that I'm kind of surprised backslash escapes exist at all in raku regex

[09:28] <Altreus> logical newline didn't have to be spelled the same in regex as LF is in strings

[09:32] <lizmat> Altreus: well, you could think of them as leftovers from the time that Raku was supposed to be the next Perl

[09:33] <Altreus> Not to be unduly critical, but it kinda feels bad that Raku already has historical reasons, and it's not even dry yet

[09:36] <Altai-man> Altreus, one cannot escape historical reasons since day 0 when creating anything, nothing can be created out of "nothing", without some history before that. :)

[09:38] *** Xliff joined
[09:38] <lizmat> Altreus: the paint may not be completely dry yet, but there's 20 year of history there

[09:38] <lizmat> also: this implementation of Raku could be considered the 3rd attempt from scratch, basically

[09:51] <Altreus> Yeah, I mean you can't replace everything, and it's only 20 years later when someone in IRC goes "This seems weird" that you get the benefit of hindsight

[09:53] * Xliff checks his scrollback

[09:54] <Xliff> One cannot account for Raku without the history of its Perl roots.

[10:10] *** sono left
[10:46] *** Doc_Holliwood joined
[10:47] *** sena_kun joined
[11:00] *** Scotteh_ is now known as Scotteh

[11:02] *** Xliff left
[12:02] *** reportable6 left
[12:05] *** Xliff joined
[12:07] <Xliff> lizmat: What's the progress on log inspection for channels like #cro.

[12:07] <Xliff> s/\./?/

[12:07] <lizmat> you mean: https://logs.liz.nl/cro/2021-08-05.html

[12:07] <lizmat> ?

[12:14] *** stoned75_ left
[12:16] *** stoned75 joined
[12:39] <Xliff> Thanks!

[12:48] *** Doc_Holliwood left
[13:05] *** reportable6 joined
[13:19] *** Doc_Holliwood joined
[13:59] <[Coke]> irssi inside tmux on an ssh session from my iPhone surprisingly usable

[14:07] <jdv> s/tmux/screen/ && ditto

[14:08] <Altreus> what are you using for ios ssh?

[14:10] <ugexe> i switched from irssi to weechat years ago since it seemed similar enough while allowing me to use glowing-bear.org as a web based irc client that connects to that weechat instance

[14:10] <jdv> oh, right.  android here.  connectbot iirc.

[14:12] <Altreus> I switched to weechat because of that very same relay thing, and there's a weechat app for android that connects directly to it

[14:12] <Altreus> (Although I seem to have screwed mine up somehow and it's very reluctant to output diagnostics)

[14:12] <Altreus> But there's no such client for ios

[14:12] <Altreus> I do like that glowingbear works on any weechat instance so you don't have to actually run your own

[14:19] *** evalable6 left
[14:19] *** linkable6 left
[14:19] *** evalable6 joined
[14:28] <[Coke]> Altreus: Termius

[14:31] <Altreus> looks swish

[14:33] *** jrjsmrtn_ joined
[14:35] *** jrjsmrtn left
[14:35] *** frost left
[14:55] *** Doc_Holliwood left
[15:02] *** Sgeo joined
[15:09] <tbrowder> .tell CIAvash i used yr emacs config line and, so far, no problems with unicode fonts! thnx!

[15:09] <tellable6> tbrowder, I'll pass your message to CIAvash

[15:20] *** linkable6 joined
[15:21] *** Garlandg joined
[15:50] *** ufobat left
[16:22] <tbrowder> anyone heard of c static analysis tool frama-c (https://frama-c.com)?

[16:27] <moon-child> verifast is cool

[16:41] <[Coke]> using HTTP::UserAgent... getting a hard "Could not receive data from socket

[16:42] <[Coke]> exception that isn't caught; I can put in a wrapper here, but wondering if this is something that should be caught by H:UA

[16:43] <[Coke]> if we were java, the get method would declare it could throw an IOException, or somesuch.

[16:50] *** linkable6 left
[16:50] *** evalable6 left
[16:58] *** ufobat joined
[17:02] *** Sgeo left
[17:08] *** Sgeo joined
[17:16] *** sena_kun left
[17:29] <Xliff> Can you get the current invocant from a Method?

[17:52] *** linkable6 joined
[17:52] <moritz> the current invocant is a property of the method invocation, not of the method

[17:52] <moritz> what are you trying to achieve?

[17:53] *** evalable6 joined
[17:54] <moritz> m: my $method = Num.^find_method('sqrt'); say $method # that method has no invocation going on currently

[17:54] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «sqrt␤»

[17:54] <moritz> so no way to extract any invocant

[17:55] *** Guest12 joined
[18:01] *** ufobat left
[18:01] *** Sgeo left
[18:02] *** reportable6 left
[18:04] *** Sgeo joined
[18:05] *** reportable6 joined
[18:07] *** Sgeo_ joined
[18:11] *** Sgeo left
[18:20] *** Altai-man left
[18:20] *** Altai-man joined
[18:30] *** Guest12 left
[18:38] *** Doc_Holliwood joined
[18:46] *** Sgeo_ left
[18:46] *** Sgeo joined
[19:08] *** sono joined
[19:27] *** sono left
[19:58] <Util> .

[19:58] <tellable6> 2021-07-29T10:03:37Z #raku <lizmat> Util ttps://github.com/rakudo/rakudo/pull/4484

[20:07] <Util> lizmat: thanks for writing pull #4484. I will revisit after the conference.

[20:07] <lizmat> sure...  :-)

[20:07] <lizmat> the PR is not going away :-)

[20:15] *** SmokeMachine_ left
[20:16] *** skaji left
[20:25] <JRaspass> m: require ::($_) for "JSON::Fast"

[20:25] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «===SORRY!===␤Cannot invoke this object (REPR: Null; VMNull)␤»

[20:25] <tellable6> 2021-07-08T12:57:00Z #raku-dev <tbrowder> JRaspass ^^^

[20:25] <JRaspass> m: $_ = "JSON::Fast"; require ::($_)

[20:25] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «Could not find JSON::Fast in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/core␤    ap#␤  …»

[20:25] <JRaspass> is require not meant to work inside a for loop/

[20:26] <JRaspass> if so, "Cannot invoke this object (REPR: Null; VMNull)" aint a great message

[20:30] *** sono joined
[20:42] *** skaji joined
[20:42] *** SmokeMachine_ joined
[20:49] <Xliff> If a compunuit is spending alomost 4 seconds in stag mbc, is there a possibility that it is not being precompiled?

[21:11] <ugexe> i think you are misunderstanding your example JRaspass

[21:11] <ugexe> m: for <Test NativeCall> { say try require ::($_) }

[21:11] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «(Test)␤(NativeCall)␤»

[21:12] <JRaspass> It's just postfix it doesn't like, interesting

[21:12] <ugexe> oh wait i misunderstood... i didnt even see the `for`

[21:15] <JRaspass> m: for "Test" { require ::($_) }

[21:15] <camelia> rakudo-moar 2c0343b5b: ( no output )

[21:15] <JRaspass> yeah block for is fine, postfix dies, this smells like a bug

[21:16] <ugexe> yeah unfortunately i think `require` escapes lexical scope

[21:16] <ugexe> or maybe fortunately if you want to look at it like that

[21:16] <ugexe> unfortunately because `use` statements are lexical

[21:17] <ugexe> require leaks out

[21:18] <ugexe> hmmm thats not strictly true either

[21:19] <ugexe> it is true in one case or another... i just forget which one :)

[21:19] *** jess is now known as j

[21:22] <JRaspass> So is it a bug? For now I'll use a block loop

[21:24] <ugexe> if its a bug its probably more a compile time thing with postfix instead of specifically e.g. require

[21:28] <ugexe> er no that wouldnt make sense, its require no compile time heh

[21:30] <JRaspass> I don't really grok why the variable has to be so dynamic either

[21:30] <JRaspass> The docs say "The compunit name can be in a runtime variable if you put it inside an indirect lookup.", but not really why

[21:31] <JRaspass> dynamic is the wrong word but you know what i mean

[21:32] *** MoC left
[21:32] *** discord-raku-bot left
[21:32] *** discord-raku-bot joined
[21:39] <ugexe> if you mean why cant you just use a string, probably because its just too ambiguous as to what it could represent

[21:41] <ugexe> i.e. module name, a path, some other spec for theoretical curs like http urls

[21:41] <ugexe> thats not the greatest reason though so maybe thats less likely than i implied

[21:43] <JRaspass> require by path would actually be pretty useful for my purposes, im dynamically trying to load all the modules in a dir

[21:43] <gfldex> Maybe require tries to turn it's argument into Package unless it already is one?

[21:43] <ugexe> you can require by path

[21:45] <JRaspass> I can!? ooo

[21:45] <ugexe> raku -I. -e 'require "lib/Zef.rakumod"; say "ok"'

[21:45] <ugexe> ok

[21:46] <JRaspass> Hah, I really went the long way around then

[21:46] <JRaspass> I have: for dir 'lib/Local/Routes', :test(*.ends-with: '.rakumod') { require ::("Local::Routes::{.extension('').basename}"); }

[21:47] <ugexe> that dir code isnt for an installable distribution though right?

[21:48] <gfldex> m: require :file<foo.rakumod>;

[21:48] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «No such method 'IO' for invocant of type 'Pair'.  Did you mean 'so'?␤  in block <unit> at <tmp> line 1␤␤»

[21:50] <JRaspass> Nah this is just a cro app trying to load some libs, i am being a bit evil and assuming lib is in the cwd

[21:50] <JRaspass> I didn't know what the raku equiv of @INC was

[21:52] <ugexe> something like `$?DISTRIBUTION.meta<provides>.grep({ $_.key.starts-with("lib/Local/Routes") }).map({ require $_.value; ::($_.key) })`

[21:53] <ugexe> might work

[21:53] <JRaspass> Ah none of this is in the meta

[21:53] <JRaspass> this is an app rather than a dist

[21:53] <ugexe> yeah but you still are putting your app files in a lib/

[21:53] <JRaspass> sure

[21:54] <JRaspass> What does `-I` and `RAKUDOLIB` influence? There must be an array of lib paths somewhere?

[21:54] <ugexe> m: say $*REPO.repo-chain

[21:54] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «(inst#/home/camelia/.raku inst#/home/camelia/rakudo-m-inst-2/share/perl6/site inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-2/share/perl6/core ap# nqp# perl5#)␤»

[21:55] <JRaspass> Ah ta

[21:55] <ugexe> where inst# file# ap# tell it what type of CUR to load it with

[21:55] <ugexe> s/load it with/it is/

[21:55] <gfldex> m: use lib <./>; require Foo;

[21:55] <camelia> rakudo-moar 2c0343b5b: OUTPUT: «Could not find Foo in:␤    file#/home/camelia␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/c…»

[21:56] <gfldex> `use lib <./>` points to the $CWD .

[21:59] <JRaspass> ah require by file is slower right? looks like its not being pre-compiled?

[21:59] <gfldex> aye

[22:05] <ugexe> https://github.com/tony-o/perl6-pluggable/blob/master/lib/Pluggable.pm6#L123-L135 the comment i left here is what i was talking about earlier about it leaking out

[22:11] *** juanfra__ left
[22:12] <ugexe> should probably make CURI work with relative paths... no reason it shouldnt afaict

[22:12] <ugexe> i.e. `require "lib/Test.rakumod";` might as well just work

[22:13] *** juanfra__ joined
[22:14] <ugexe> at the very least it would require a slow path though since we wouldnt have the sha1 of the module name itself

[22:14] <ugexe> i dunno maybe not

[22:45] <JRaspass> Thanks for all the help gfldex and ugexe , I shipped my raku.land change with dynamic loading of all routes :-)

[22:57] *** gordonfish- joined
[22:59] *** gordonfish left
[23:11] *** j is now known as jess

[23:38] *** Doc_Holliwood left
