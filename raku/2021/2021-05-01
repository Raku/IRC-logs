[00:13] *** db48x left
[00:58] *** wamba left
[01:26] *** rindolf left
[01:29] *** b2gills left
[01:29] *** b2gills joined
[01:54] *** kvw_5 left
[01:56] *** kvw_5 joined
[02:11] *** Sgeo left
[02:12] *** titsuki joined
[02:17] *** Sgeo joined
[02:25] *** Sgeo left
[02:31] *** Sgeo joined
[02:45] *** dataangel left
[02:55] *** tejr left
[03:00] *** tejr joined
[03:08] *** moon-child left
[03:19] *** moon-child joined
[03:44] *** Sgeo left
[03:47] *** Sgeo joined
[04:47] *** tellable6 left
[04:47] *** evalable6 left
[04:47] *** greppable6 left
[04:47] *** unicodable6 left
[04:47] *** releasable6 left
[04:47] *** statisfiable6 left
[04:47] *** committable6 left
[04:47] *** notable6 left
[04:47] *** sourceable6 left
[04:47] *** sourceable6 joined
[04:47] *** notable6 joined
[04:49] *** unicodable6 joined
[04:50] *** committable6 joined
[05:03] *** Altai-man_ joined
[05:05] *** spycrab0_ joined
[05:05] *** peteretep_ joined
[05:08] *** bdju_ joined
[05:13] *** parabolize left
[05:13] *** sena_kun left
[05:13] *** marcusr left
[05:13] *** xi left
[05:13] *** spycrab0 left
[05:13] *** peteretep left
[05:13] *** japhb left
[05:13] *** stux|RC left
[05:13] *** HobGoblin left
[05:13] *** bdju left
[05:13] *** ambs left
[05:13] *** Sir_Ragna left
[05:13] *** nicholatian left
[05:13] *** buffet left
[05:13] *** jjatria left
[05:13] *** peteretep_ is now known as peteretep

[05:13] *** spycrab0_ is now known as spycrab0

[05:17] *** stux|RC joined
[05:23] *** parabolize joined
[05:23] *** marcusr joined
[05:23] *** xi joined
[05:23] *** japhb joined
[05:23] *** HobGoblin joined
[05:23] *** ambs joined
[05:23] *** Sir_Ragna joined
[05:23] *** nicholatian joined
[05:23] *** buffet joined
[05:23] *** jjatria joined
[06:21] *** parabolize left
[06:25] *** sno joined
[06:37] *** asymptotically joined
[07:06] *** jmerelo joined
[07:13] *** pecastro joined
[07:46] *** wamba joined
[07:48] *** brtastic joined
[07:51] *** brtastic left
[07:59] *** DiffieHellman left
[08:01] *** DiffieHellman joined
[08:14] *** domidumont joined
[09:01] <Geth> ¬¶ doc/frithnanth-patch-6: a97a5fae3e | (Fernando Santagata)++ (committed using GitHub Web editor) | doc/Type/Map.pod6

[09:01] <Geth> ¬¶ doc/frithnanth-patch-6: Correct a link to Hash

[09:01] <Geth> ¬¶ doc/frithnanth-patch-6: 

[09:01] <Geth> ¬¶ doc/frithnanth-patch-6: Hash ‚Üí /type/Hash

[09:01] <Geth> ¬¶ doc/frithnanth-patch-6: review: https://github.com/Raku/doc/commit/a97a5fae3e

[09:02] <Geth> ¬¶ doc: frithnanth++ created pull request #3879: Correct a link to Hash

[09:02] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3879

[09:07] <Geth> ¬¶ doc/frithnanth-patch-6: c5efe1771b | (Fernando Santagata)++ (committed using GitHub Web editor) | doc/Type/Map.pod6

[09:07] <Geth> ¬¶ doc/frithnanth-patch-6: Small correction

[09:07] <Geth> ¬¶ doc/frithnanth-patch-6: review: https://github.com/Raku/doc/commit/c5efe1771b

[09:11] *** Sgeo left
[09:19] *** finsternis left
[09:30] *** Tirifto[m] left
[09:30] *** kiti_nomad[m] left
[09:30] *** draco100[m] left
[09:30] *** caasih left
[09:37] *** Tirifto[m] joined
[09:37] *** kiti_nomad[m] joined
[09:37] *** draco100[m] joined
[09:37] *** caasih joined
[09:38] *** brtastic joined
[10:02] *** bdju_ is now known as bdju

[10:02] <Geth> ¬¶ doc: de76ddd4f7 | (Fernando Santagata)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Type/Map.pod6

[10:02] <Geth> ¬¶ doc: Correct a link to Hash

[10:02] <Geth> ¬¶ doc: 

[10:02] <Geth> ¬¶ doc: Hash ‚Üí /type/Hash

[10:02] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/de76ddd4f7

[10:02] <Geth> ¬¶ doc: fe86b23f0d | (Fernando Santagata)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Type/Map.pod6

[10:02] <Geth> ¬¶ doc: Small correction

[10:02] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/fe86b23f0d

[10:31] *** jmerelo left
[10:36] <andinus> i'm trapping SIGINT & exiting with `exit 0` but for some reason the program continues execution even after that

[10:37] <andinus> https://paste.debian.net/hidden/ceeadba2/ 

[10:38] <andinus> i want it to stop execution after it catches SIGINT & executes that block

[10:43] <andinus> wait, it's working fine now, didn't change anything

[10:48] <codesections> yeah, that code looks generally fine to me (your paste doesn't have enough context that I can test it, but it looks generally fine).  No idea why it wasn't working at first, though

[10:52] <andinus> can i make it so that it exits the loop if SIGINT is caught?

[10:53] <andinus> i have to print some things after the loop exists, currently the loops goes on printing things and what i'm printing gets mixed with that

[10:53] <codesections> yep.  Use &last: https://docs.raku.org/language/control#last

[10:53] <lizmat> make the tap set a variable that gets checked in the loop end lasts if it is true ?

[10:53] <lizmat> *and

[10:55] <andinus> here is the entire thing: https://paste.debian.net/hidden/92c7c227/

[10:56] <andinus> i cant use last because the signal thing is outside the loop, is it okay if i put it in?

[10:56] <andinus> lizmat: i see, that'll do it

[11:00] <andinus> oh now the loop exits fine but the program terminates soon after

[11:00] <andinus> i believe its because the MAIN sub ends there

[11:01] <lizmat> from your gist, that looks like it is to be expected?

[11:01] <andinus> no, i'm printing a scorecard after the loop exits

[11:02] <andinus> it doesnt get printed because MAIN exits, adding a sleep() fixes it, is there a better way?

[11:02] <lizmat> updated gist?

[11:03] <andinus> updated: https://paste.debian.net/hidden/250c3fce/

[11:03] <lizmat> take the signal out of MAIN, and put it at the top

[11:04] <lizmat> define $end-loop just before that

[11:04] <lizmat> are you supposed to show the score card on normal exit?

[11:04] <andinus> and also @players then

[11:05] <andinus> yes, score card on both SIGINT and when it normally ends

[11:05] <lizmat> no, the tap should *only* set $end-loop to true and do nothing else

[11:05] <andinus> i see, then how do i print the scorecard?

[11:05] <andinus> oh, i just check $end-loop and print it there?

[11:05] <lizmat> where you now have the sleep(2)

[11:05] <lizmat> *20

[11:06] <andinus> ah, that'll make it print on normal exit too

[11:06] <lizmat> and you may need some more "last if $end-loop" checks

[11:06] <lizmat> yup

[11:09] <andinus> i see, that fixes everything, thanks

[11:26] <El_Che> lizmat: change the topic to "ü¶ã Welcome to the MAIN() IRC channel of the Raku Programming Language..."

[11:26] <lizmat> subliminal advertising, eh?

[11:27] *** ChanServ sets mode: +o lizmat

[11:27] <El_Che> the curse of my life: if I see a joke, I have to go with it

[11:27] *** lizmat changes topic to: ü¶ã Welcome to the MAIN() IRC channel of the Raku Programming Language (https://raku.org).  This channel is logged for the purpose of keeping a history about its development | evalbot usage: 'm: say 3;' or /msg camelia m: ... | Logs can be inspected at https://colabti.org/irclogger/irclogger_log/raku

[11:27] <lizmat> El_Che++

[11:28] *** ChanServ sets mode: -o lizmat

[11:43] *** natrys joined
[12:04] *** reportable6 joined
[12:09] <m6locks> grand

[12:25] *** Black_Ribbon left
[12:49] *** rindolf joined
[12:56] *** parabolize joined
[13:03] *** brtastic left
[13:42] *** unicodable6 left
[13:42] *** notable6 left
[13:42] *** notable6 joined
[13:43] *** linkable6 joined
[13:44] *** releasable6 joined
[13:49] *** linkable6 left
[13:49] *** committable6 left
[13:49] *** sourceable6 left
[13:49] *** notable6 left
[13:49] *** reportable6 left
[13:49] *** releasable6 left
[13:52] *** evalable6 joined
[13:52] *** nativecallable6 joined
[13:52] *** quotable6 joined
[13:52] *** bloatable6 joined
[13:52] *** coverable6 joined
[13:52] *** notable6 joined
[13:52] *** benchable6 joined
[13:53] *** sourceable6 joined
[13:53] *** releasable6 joined
[13:53] *** statisfiable6 joined
[13:54] *** linkable6 joined
[13:54] *** committable6 joined
[13:54] *** squashable6 joined
[13:54] *** reportable6 joined
[13:55] *** bisectable6 joined
[13:55] *** greppable6 joined
[13:55] *** unicodable6 joined
[13:56] *** shareable6 joined
[13:56] *** tellable6 joined
[14:31] *** tejr left
[14:33] *** tejr joined
[14:49] *** dogbert17 left
[14:50] *** dogbert17 joined
[14:53] *** natrys left
[14:54] *** natrys joined
[15:06] *** mniip left
[15:09] *** HarmtH joined
[15:11] *** brtastic joined
[15:17] *** wamba left
[15:42] *** wamba joined
[15:43] *** bdju left
[16:03] *** linkable6 left
[16:05] *** linkable6 joined
[16:06] *** brtastic left
[16:32] *** bdju joined
[16:46] *** linkable6 left
[16:47] *** domidumont left
[16:48] *** linkable6 joined
[17:03] *** asymptotically left
[17:06] *** wl20 joined
[17:07] <wl20> HI :)

[17:10] *** vaskozl2 joined
[17:12] *** vaskozl left
[17:12] *** vaskozl2 is now known as vaskozl

[17:40] *** softmoth joined
[17:47] *** aluaces left
[18:01] *** reportable6 left
[18:02] *** reportable6 joined
[18:16] *** wamba left
[18:20] *** aluaces joined
[18:21] <andinus> hello o/

[18:22] <codesections> \o

[18:26] *** dataangel joined
[18:52] *** Sgeo joined
[19:13] *** brtastic joined
[19:36] *** _jrjsmrtn joined
[19:37] *** __jrjsmrtn__ left
[19:38] *** dakkar joined
[19:39] <dakkar> m: for 1..1 { say FIRST 13; say ENTER 45 }

[19:39] <camelia> rakudo-moar bb069a99c: OUTPUT: ¬´Nil‚ê§45‚ê§¬ª

[19:39] <tellable6> 2021-04-27T18:30:43Z #raku <Xliff> dakkar: ^^ That, but in a way that will work for different environments.

[19:44] *** wamba joined
[19:45] <dakkar> m: for 1..1 { say INIT 1; say FIRST 2; say ENTER 3 }

[19:45] <camelia> rakudo-moar bb069a99c: OUTPUT: ¬´1‚ê§Nil‚ê§3‚ê§¬ª

[19:46] *** dakkar left
[19:47] <kybr> just curious, has anyone tried to make a slang that adds ruby-like function arguments? -> $foo, bar {...} becomes {|$foo, $bar|...}

[19:51] <El_Che> what is de advantage of that notation?

[20:00] <kybr> none, generally.

[20:02] <kybr> but slangs show the versatility of raku. i think i read somewhere the idea that you can write C in any language, but you can write any language in raku.

[20:04] <kybr> i'm experimenting with "faking" language X in raku where faking means not having to write an actual grammar, only making the minimal set of tweaks to make piece of language X pass.

[20:06] <kybr> for what it's worth, i prefer the pointy blocks.

[20:09] <El_Che> I am not a fan of slangs

[20:09] <El_Che> raku syntax is complex emough

[20:10] <El_Che> the balkanisation of that means unreadable code

[20:10] <El_Che> If you're talking DSL, that something else

[20:10] <codesections> fwiw, I strongly disagree 

[20:11] <codesections> I think Racket has blazed a pretty good trail with their view on LOP (https://en.wikipedia.org/wiki/Language-oriented_programming)

[20:12] <codesections> and, done well, it can make code more readable.  (Done poorly, it's a disaster, but most things are)

[20:12] <El_Che> counterpoint: I think the biggest advantage of languages at go is that I can quick glance and have a good idea what the code does

[20:12] <El_Che> at => like

[20:13] *** titsuki left
[20:13] <El_Che> if you throw funny syntax at me, I'll get lost even if I know the language

[20:13] <codesections> 100% agree.  But I think Raku is already about as far away from Golang as it's possible to get

[20:13] <El_Che> I write some Ruby and until today the | | notation is weird to me :)

[20:14] <codesections> (I like both languages, but think they have *radically* different goals)

[20:14] <kybr> (i'm following all this.)

[20:14] <El_Che> yes, but what you loose in syntax, you win with builtin batteries

[20:14] <El_Che> so, that's makes raku readable to me

[20:15] <El_Che> not a zillion of functions to do simple things, so the code stays small

[20:15] <kybr> El_Che: you follow a "way" of writing raku? link?

[20:15] <El_Che> I mean the std syntax without slangs

[20:15] <El_Che> I know that and raku has many built-in functions

[20:16] <codesections> (my conference talk at FOSDEM was basically exactly about this/about how Go and Raku have totally different design goals: https://fosdem.org/2021/schedule/event/programming_lang_for_free_software/)

[20:16] <El_Che> they do, I agree on that

[20:20] <kybr> El_Che: when you say that a DSL is something else, you mean writing a grammar and evaluating strings?

[20:21] <El_Che> I mean like creating something like the Puppet language in Raku

[20:21] <El_Che> so you're not writing Raku, but powerfull Puppet manifests

[20:21] <El_Che> so not just parsing strings. but also use Raku features

[20:22] <El_Che> (I am in the process of moving everything off from things like Puppet, so it's an academical discussion for me :) )

[20:25] <kybr> I'm thinking of ways to make it easy for users of language X to move to raku by mimicking syntax as much as possible. I'd rather not have to use a slang, but i might. i'm already using MONKEY-TYPING and augment.

[20:25] <El_Che> in that case they could keep writing what ever they write

[20:25] <kybr> hahahh. yes. of course.

[20:26] <El_Che> consistency is important and very often importing stuff break that

[20:26] <El_Che> stealing idea's, that's different ;)

[20:34] <kybr> codesections: i like the idea of LOP, but i have not really tried to use it. i am not a racket user. i think that Red also uses this idea: https://www.red-lang.org/

[20:36] <kybr> (i think/hope the "take the red pill" shirt in the video is an unfortunate blunder)

[20:38] <wl20> ;) 

[20:44] *** spycrab0 left
[20:44] *** BuildTheRobots left
[20:44] *** caasih left
[20:45] *** BuildTheRobots joined
[20:45] *** Black_Ribbon joined
[20:46] *** peteretep left
[20:47] *** caasih joined
[20:47] *** spycrab0 joined
[20:50] *** peteretep joined
[20:51] *** timeless left
[20:54] *** timeless joined
[20:54] *** leont left
[20:54] *** tbrowder left
[20:55] *** tbrowder joined
[20:55] *** leont joined
[20:56] *** mrsolo left
[20:57] *** mrsolo joined
[20:57] <codesections> kybr: yeah, agreed (on both counts).  I really ought to spend more time with Red ‚Äì I really like what I've seen, but I just am not a huge fan of ORMs in general so I've not yet used it as much as I should

[21:03] <tonyo> i was looking at making a lisp slang that can actually work with the context of the running program

[21:03] <tellable6> 2021-04-29T07:10:35Z #raku <andinus> tonyo was away

[21:04] *** aborazmeh joined
[21:07] <Geth> ¬¶ doc: Altai-man self-unassigned A lot of TODOs in Any https://github.com/Raku/doc/issues/1494

[21:12] <kybr> El_Che: i'll think about what you said. i'm still trying to work out where to draw the line. i think i will not go so far as a slang, but i will definately need augment. 

[21:48] *** aborazmeh left
[21:49] <raydiak> kybr: while I'm not sure that the easiest way to move to a new language is by using tools to not learn the new language, I think what you're doing is kinda cool anyway from a creative and postmodern standpoint. using rakudo to parse and execute other languages besides raku is an interesting thought

[21:51] *** reach_satori joined
[21:59] *** natrys left
[22:08] <kybr> right now it is just a dubious, academic experiment to figure out how similar these two languages are in terms of syntax.

[22:09] *** cooper left
[22:11] *** cooper joined
[22:13] *** brtastic left
[22:19] <kybr> anyway, i'm not trying make something that keeps people from learning raku! i'm trying to do the opposite. i am toying with making a thing that would allow users to reuse documentation and examples from another system. 

[22:21] <raydiak> of course, I'm not speaking ill of it. I like your idea. It's just easier (for me at least) to learn a new language by jumping in head-first from scratch, so I like it for reasons other than your intended use case :)

[22:21] <kybr> i'm trying to determine where to draw the line on how far i bend raku. i think 'augment class Block' yes, slang no... er maybe a tiny bit.

[22:22] <raydiak> being the author of Inline::Lua, I have no philosophical objections to mixing other languages into raku

[22:25] <raydiak> I'd say it depends on your intended uses. An educational on-ramp can afford to be much more liberal than general-use production stuff

[22:29] <kybr> perhaps i've misled y'all. here's a thing: https://github.com/kybr/SuperCollider i work on creative/musical systems in academic settings.

[22:35] <raydiak> looks like a cool project

[22:40] *** wamba left
[22:42] <kybr> thanks. now i know that raku has the flexibility to bend toward SuperCollider syntax. i'm still deciding how much to bend. it's also a learning exercise for me.

[22:47] <raydiak> you'll certainly learn a lot. and yes, it can bend as much as you want. as long as you don't intend to be able to run existing SC code but just want to replicate the functionality in a rakuish way, I'd personally be inclined to just export some subs or a class from your module, no need to change the language at all that I can see

[22:47] <raydiak> thats arguably a lot less fun though

[22:58] <codesections> I hadn't really focused on Inline::Lua.  Would it give you compatibility with languages that have a Lua runtime (I'm thinking of Fennel, but there are several) or would that be an entirely separate project?

[23:01] <raydiak> heh, I haven't the slightest idea tbh. if it's something that embeds a lua interpreter within itself and makes use of that, probably not. if it's something you can call from within plain lua code and acts more like a library, then...possibly

[23:03] *** dataangel left
[23:03] *** dataangel joined
[23:04] <codesections> To be fair, I can't really think why I'd _want_ to do that.  It just sounds like fun, mostly

[23:04] <tonyo> if you _could_ write python in raku then you'd have all of the disgusting pypi open to you as modules

[23:04] <raydiak> we do have Inline::Python by nine++

[23:04] <tonyo> or lua, or clojure, or go

[23:06] <codesections> ouch, the idea of a program that needs to pay the startup times of _both_ Raku and Clojure...

[23:07] <tonyo> you're missing the point

[23:08] <tonyo> inline::python is rad.gov

[23:08] <tonyo> but if raku parsed and then ran python or clojure etc, then it wouldn't require those runtimes/libs to be installed

[23:09] <tonyo> you wouldn't pay clojure start up time, it'd be directly in the raku runtime/language

[23:09] <japhb> tonyo: That's assuming that existing libraries don't assume they are running on a "real" python and expect its behavior.

[23:09] <tonyo> no jvm to spin up, etc

[23:10] <tonyo> it wouldn't be a good slang if it deviated drastically from the behavior of the original language

[23:10] <japhb> tonyo: Not the language behavior, CPython's behavior.

[23:10] <codesections> unless you're running Raku on the jvm, of course.

[23:11] <tonyo> even if it gives you 90% of the libraries that don't do weird stuff then you're gaining quite a bit

[23:11] <codesections> (I'm mostly joking, but isn't that part of the pitch for things like Gradle?  One runtime to rule them all, or something likei that)

[23:12] <codesections> er, graal, I mean

[23:14] <tonyo> it's less about what vm it's running on

[23:14] <raydiak> the reason I wanted to be able to mix lua into raku was less for the ecosystem and more because it's pretty much the opposite of raku, what made it seem quite complementary to me...minimal syntax makes for verbose code, but it runs like lightning. so you could use it in e.g. hot paths of games or other performance-sensitive stuff, without requiring a C compiler and so forth

[23:16] <codesections> raydiak: that makes sense.  My general hope is to be able to use Rust for that sort of niche, which _seems_ promising -- but I haven't put that to the test yet

[23:18] <tonyo> forth has pretty minimal syntax and is pretty succinct

[23:18] *** metacookie joined
[23:19] <codesections> ha.  that's putting it mildly 

[23:21] *** rindolf left
[23:22] <raydiak> codesections: I don't know much about rust beyond the fact that everyone seems to think it's a great thing

[23:23] *** metacookie left
[23:24] <codesections> it's the language I write most often, apart from Raku.  There's a lot to like, but right now I'm thinking of the fact that it has an `extern C` functionality very similar to NativeCall and getting its build tooling setup is painless

[23:24] *** webstrand left
[23:28] *** mniip joined
[23:29] *** dataangel left
[23:29] *** dataangel joined
[23:30] <raydiak> sounds slick. would be a cool project if you decide to pursue it

[23:31] <raydiak> I had a lot of fun writing Inline::Lua; this conversation kinda makes me want to dust it off

[23:35] *** pecastro left
[23:49] *** metacookie joined
[23:58] *** metacookie left
