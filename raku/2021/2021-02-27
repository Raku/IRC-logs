[00:02] *** japhb left
[00:02] *** japhb joined
[00:12] *** brtastic joined
[00:24] *** JRaspass left
[00:27] *** japhb left
[00:27] *** japhb joined
[00:37] *** squashable6 left
[00:39] *** squashable6 joined
[00:49] *** neshpion left
[00:53] *** frost-lab joined
[00:58] *** pecastro left
[01:11] *** guifa joined
[01:15] *** lucasb left
[01:54] *** mowcat left
[01:54] *** gnufr33dom joined
[01:55] *** frost-lab left
[02:03] *** sortiz left
[02:07] *** ________1 joined
[02:09] *** _________ left
[02:16] *** timlegge_ left
[02:17] *** timlegge joined
[02:20] *** kst joined
[02:21] *** kst left
[02:22] *** kst joined
[02:39] *** brtastic left
[02:41] *** kvw_5 joined
[02:43] *** kvw_5_ left
[03:11] *** Garbanzo joined
[03:49] *** squashable6 left
[03:51] *** wamba joined
[03:52] *** squashable6 joined
[04:17] *** wamba left
[05:17] *** notable6 left
[05:17] *** statisfiable6 left
[05:17] *** bloatable6 left
[05:17] *** squashable6 left
[05:17] *** quotable6 left
[05:17] *** bisectable6 left
[05:17] *** linkable6 left
[05:17] *** tellable6 left
[05:17] *** sourceable6 left
[05:17] *** evalable6 left
[05:17] *** committable6 left
[05:17] *** benchable6 left
[05:17] *** unicodable6 left
[05:17] *** nativecallable6 left
[05:17] *** coverable6 left
[05:17] *** releasable6 left
[05:17] *** shareable6 left
[05:17] *** greppable6 left
[05:18] *** evalable6 joined
[05:18] *** quotable6 joined
[05:18] *** committable6 joined
[05:18] *** linkable6 joined
[05:19] *** notable6 joined
[05:19] *** bloatable6 joined
[05:19] *** releasable6 joined
[05:19] *** bisectable6 joined
[05:20] *** statisfiable6 joined
[05:20] *** shareable6 joined
[05:20] *** coverable6 joined
[05:20] *** sourceable6 joined
[05:20] *** tellable6 joined
[05:20] *** nativecallable6 joined
[05:20] *** squashable6 joined
[05:20] *** benchable6 joined
[05:20] *** unicodable6 joined
[05:20] *** greppable6 joined
[05:40] *** Benett joined
[05:52] *** rindolf joined
[05:53] <japhb> Is there an idiom for calling 'submethod TWEAK' for all *roles* composed into a class?  Right now I've got a hack role that I compose into some class in my inheritance hierarchy -- role RoleTweaking { method TWEAK_ROLES(|c) { for self.^roles { my $method = .^lookup("TWEAK"); self.$method(|c) if $method; } } } -- and then call self.TWEAK_ROLES from that class's submethod TWEAK.

[05:54] <japhb> But that feels like a workaround for something I would expect to Just Work.

[05:55] <japhb> Plus there's no guarantee that I will remember to only call TWEAK_ROLES from *one* class in the hierarchy, unless I make some convention like only ever calling it from the base class -- but that means it will be called before any other class TWEAKs in the inheritance tree, even if the TWEAKed roles are only composed into a leaf class.

[05:56] <japhb> (Only ever calling it from *leaf* classes has the problem that leaf classes don't always stay that way -- inherit from one and forget it was once a leaf that called TWEAK_ROLES, and suddenly you're likely to call it twice again.)

[05:58] *** frost-lab joined
[06:03] <japhb> Ugh, it occurs to me that RoleTweaking has yet another problem -- it assumes that no class in the hierarchy only composed *ONE* other role, and thus called its TWEAK normally because it was composed in without conflict.

[06:03] <japhb> GAH

[06:15] *** frost-lab left
[06:25] *** ________1 is now known as _________

[06:41] *** frost-lab joined
[07:00] *** kaiwulf left
[07:03] *** db48x left
[07:09] <japhb> After some more thought, it occurs to me that there's no conflict if role submethods have a name extension based on the role name.  So for example: role Foo { submethod TWEAK-Foo { ... } }; role Bar { submethod TWEAK-Bar { ... } }.  Then it is certain that these TWEAK-related submethods will not be called automatically, which means they can be called from a TWEAK_ROLES that looks up methods to call as 

[07:09] <japhb> follows: for self.^roles { my $method = .^lookup('TWEAK-' ~ .^name); ... }

[07:11] <japhb> I suppose you could even do that with the class-defined TWEAK submethods, and then walk the .^mro and .^roles(:local) from each to force the whole thing to happen in C3 order.

[07:11] <japhb> Still really feel like I'm overthinking this though ....

[07:15] *** frost-lab left
[07:22] *** berber44 left
[07:39] *** parabolize left
[07:58] *** k-man left
[08:13] *** frost-lab joined
[08:26] *** berber44 joined
[08:33] *** gnufr33dom left
[08:39] *** jmerelo joined
[08:51] *** k-man joined
[09:10] *** frost-lab left
[09:13] *** epony left
[09:24] *** wbiker joined
[09:25] *** Discipulus joined
[09:40] *** Doc_Holliwood joined
[09:42] *** elcaro left
[09:44] *** elcaro joined
[09:45] *** jmerelo left
[09:45] <wbiker> Hello all

[09:45] <wbiker> Anyone familiar with Test::Mock? I want to use a mock of a class where a method is called twice from the code under test. Is there a way to configure the returning that for each method call another string is given back?

[09:45] <wbiker> This returns an array instead:

[09:45] <wbiker> my $mock = mocked MyClass::Client, returning => { get => "Return String One", "Return String Two" };

[09:56] *** epony joined
[10:01] *** brtastic joined
[10:04] *** jmcgnh left
[10:22] *** Sgeo left
[10:22] *** ensamvarg left
[10:25] *** ensamvarg joined
[10:35] *** nine_ is now known as nine

[10:47] *** brtastic left
[11:27] *** domidumont joined
[11:35] *** wamba joined
[11:46] <CIAvash> wbiker: in that line your'e saying that method `get` on `MyClass::Client` returns list `"(Return String One", "Return String Two") ` (should be in parens)

[11:47] <CIAvash> wbiker: I don't know what you're doing or how you're testing but you can do `my $strings = ("Return String One", "Return String Two").iterator; my $mock = mocked MyClass::Client, computing => { get => { $strings.pull-one }};`

[11:49] <wbiker> Cool. Thanks @CIAvash I think that it what I was looking for. Using a iterator here!

[12:00] *** leont joined
[12:15] *** Black_Ribbon left
[12:43] *** pecastro joined
[12:45] *** xelxebar_ left
[12:47] *** xelxebar joined
[12:53] *** shlomif joined
[12:55] *** rindolf left
[12:58] *** shlomif2 joined
[12:59] *** shlomif left
[13:08] *** wamba left
[13:19] *** mowcat joined
[13:35] *** rindolf joined
[13:43] *** wamba joined
[13:52] *** mowcat left
[14:03] *** xinming_ left
[14:06] *** xinming_ joined
[14:43] *** Doc_Holliwood left
[14:46] *** a3r0 left
[15:12] *** patrickb joined
[15:39] <uzl[m]> m: .say for &comb.candidates>>.signature

[15:39] <camelia> rakudo-moar 726a75e24: OUTPUT: «(Regex $matcher, Cool $input, $limit = *, :$match)␤(Str $matcher, Cool $input, $limit = *)␤(Int:D $size, Cool $input, $limit = *)␤»

[15:40] <tellable6> 2020-05-30T08:15:37Z #raku-dev <JJMerelo> uzl[m] OK, done, but please include closing statements in the PRs and/or commits you're doing for them in the future.

[15:40] <uzl[m]> m: .say for &base.candidates>>.signature

[15:40] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    base used at line 1␤␤»

[15:40] <uzl[m]> How do I get a method's candidates' signatures?

[15:41] *** parabolize joined
[15:43] *** gnufr33dom joined
[15:43] *** vike left
[15:44] <uzl[m]> m: .say for Real.^methods.first(*.name eq 'base').candidates>>.signature

[15:44] <camelia> rakudo-moar 726a75e24: OUTPUT: «($?CLASS: Int:D $base, $digits? is copy, *%_)␤»

[15:44] <uzl[m]> Oh found it haha

[15:50] *** Doc_Holliwood joined
[16:01] <codesections> can anyone explain these results?  I'm confused:

[16:01] <codesections> m: use nqp; my int $a = 0; say nqp::isint(nqp::unbox_i($a)); say nqp::isint($a)

[16:01] <camelia> rakudo-moar 726a75e24: OUTPUT: «0␤0␤»

[16:20] *** vike joined
[16:23] *** neshpion joined
[16:33] *** maggotbrain left
[16:35] *** maggotbrain joined
[16:54] *** Doc_Holliwood left
[16:57] *** natrys joined
[16:59] *** epony left
[17:02] *** epony joined
[17:23] <MasterDuke> it only work in real nqp-land

[17:23] <MasterDuke> nqp: my int $a := 0; say(nqp::isint(nqp::unbox_i($a))); say(nqp::isint($a))

[17:23] <camelia> nqp-moarvm: OUTPUT: «1␤1␤»

[17:34] *** JRaspass joined
[17:39] *** sena_kun left
[17:40] *** sena_kun joined
[17:52] *** gnufr33dom left
[17:57] *** Altai-man_ joined
[17:57] *** sena_kun left
[18:09] *** Doc_Holliwood joined
[18:14] *** berber44 left
[18:18] <xinming_> m: (<x y> => "test").raku.say;

[18:18] <camelia> rakudo-moar 726a75e24: OUTPUT: «("x", "y") => "test"␤»

[18:19] <xinming_> m: Pair.new(:key(<x y>), :value<test>).raku.say;

[18:19] <camelia> rakudo-moar 726a75e24: OUTPUT: «$("x", "y") => "test"␤»

[18:19] <xinming_> How can we use Pair.new syntax to create a pair which the key is a List?

[18:20] <xinming_> I mean, without the $()

[18:20] <summerisle> m: Pair.new(:key<x y> :value<z>).key.WHAT

[18:20] <camelia> rakudo-moar 726a75e24: ( no output )

[18:20] <summerisle> m: Pair.new(:key<x y> :value<z>).key.WHAT.say

[18:20] <camelia> rakudo-moar 726a75e24: OUTPUT: «(List)␤»

[18:21] <summerisle> m: Pair.new(:key<x y> :value<z>).key.say

[18:21] <camelia> rakudo-moar 726a75e24: OUTPUT: «(x y)␤»

[18:21] <summerisle> m: Pair.new(:key(<x y>) :value<z>).key.WHAT.say

[18:21] <camelia> rakudo-moar 726a75e24: OUTPUT: «(List)␤»

[18:21] <summerisle> m: Pair.new(:key(<x y>) :value<z>).key.say

[18:21] <camelia> rakudo-moar 726a75e24: OUTPUT: «(x y)␤»

[18:21] <summerisle> seems fine to me

[18:25] *** domidumont left
[18:25] *** xinming_ left
[18:25] *** xinming_ joined
[18:26] <xinming_> summerisle: What I mean is, the output should be the same as  ("x", "y") => "test"  :-)

[18:26] *** Sgeo joined
[18:27] <uzl[m]> m: Pair.new(:key(<x y>) :value<z>).key.raku.say

[18:27] <camelia> rakudo-moar 726a75e24: OUTPUT: «("x", "y")␤»

[18:27] <uzl[m]> m: Pair.new(:key(<x y>) :value("test")).key.say

[18:27] <camelia> rakudo-moar 726a75e24: OUTPUT: «(x y)␤»

[18:27] <summerisle> on rakudo v2021.02, :key(<x y>) and :key<x y> (which should be directly equivalent) both seem to create a pair with a non-scalar key, so

[18:27] <summerisle> i'd say it's working as you expect

[18:28] <codesections> xinming_: you can use positional args:

[18:28] <codesections> m: Pair.new(<x y>, 'z').raku.say

[18:28] <camelia> rakudo-moar 726a75e24: OUTPUT: «("x", "y") => "z"␤»

[18:29] <codesections> MasterDuke: Thanks.  I'd forgotten about *real* nqp land :D

[18:45] *** __jrjsmrtn__ left
[18:46] *** __jrjsmrtn__ joined
[19:02] *** mowcat joined
[19:05] *** maggotbrain left
[19:07] *** maggotbrain joined
[19:17] *** eseyman left
[19:18] *** maggotbrain left
[19:19] *** maggotbrain joined
[19:21] *** eseyman joined
[19:25] *** aborazmeh joined
[19:31] *** jmcgnh joined
[19:34] *** MasterDuke left
[19:37] *** MasterDuke joined
[19:47] *** MasterDuke left
[19:50] *** MasterDuke joined
[20:38] *** rindolf left
[20:50] *** Doc_Holliwould joined
[20:50] *** Doc_Holliwood left
[20:51] *** Objective_Releas joined
[20:51] *** aborazmeh left
[20:52] *** Objective_Releas left
[21:00] *** natrys left
[21:03] *** neshpion left
[21:03] *** neshpion joined
[21:04] <codesections> m: sub f( --> (Int, Int)) { 42, 47 }

[21:04] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed return value␤at <tmp>:1␤------> 3sub f( -->7⏏5 (Int, Int)) { 42, 47 }␤»

[21:04] *** aindilis left
[21:04] <codesections> is there any way to dwim ^^^^?  

[21:06] *** pierrot_ is now known as pierrot

[21:06] *** pierrot left
[21:06] *** pierrot joined
[21:06] *** patrickb left
[21:08] <codesections> Or is that the usecase that needs to wait for lizmat's work on tuples?

[21:13] *** xinming_ left
[21:14] *** xinming_ joined
[21:24] <gfldex> m: subset ListOfInt of List where { .all ~~ Int }; sub f( --> ListOfInt ) { 42, 47 }

[21:24] <camelia> rakudo-moar 726a75e24: ( no output )

[21:24] <gfldex> m: subset ListOfInt of List where { .all ~~ Int }; sub f( --> ListOfInt ) { 42, 47 }; f;

[21:24] <camelia> rakudo-moar 726a75e24: ( no output )

[21:24] <gfldex> m: subset ListOfInt of List where { .all ~~ Int }; sub f( --> ListOfInt ) { 42, 47 }; say f;

[21:24] <camelia> rakudo-moar 726a75e24: OUTPUT: «(42 47)␤»

[21:24] <gfldex> codesections: ^^^ you can make the subset as strict as you need

[21:29] <codesections> Hmmm, yeah.  But that's not really in the spirit of what I want -- `f(--> Int)` is a constraint, but it's also using types as concise API documentation that &f always returns a single Int.  I'd like to be able to say "f always returns a pair of two Ints" in the type system, but that's only worth doing if the syntax is there to say it naturally 

[21:31] <codesections> but thanks, gfldex, that's helpful & appreciated 

[21:42] <gfldex> codesections: subsets can be exported. That way you can allow the user of your API to use them in their code. This can be quite helpful to avoid typos and bad copy pasta.

[21:42] <codesections> Yeah, I get that :-)  And I like and use subsets

[21:43] <codesections> But that's a different usecase than "function signature as documentation"

[21:43] <codesections> (though with some overlap, to be sure)

[21:52] *** kaiwulf joined
[21:53] *** xinming_ left
[21:54] *** xinming_ joined
[22:02] *** tejr left
[22:03] *** tejr joined
[22:09] *** neshpion left
[22:10] *** neshpion joined
[22:28] *** finsternis joined
[22:30] *** gnufr33dom joined
[22:38] *** aindilis joined
[22:39] *** kerframil joined
[22:45] *** xinming_ left
[22:45] <lizmat> codesections: I don't think this has anything to do with my Tuple module ?

[22:46] *** xinming_ joined
[22:49] <codesections> Oh, ok.  I wasn't sure/haven't followed that module closely.  In some languages, you'd say that a function with the signatur of f(Int --> (Str, Int)) "takes an Int and returns a Tuple of one Str and one Int".  So I was wondering if better support for tuples would be related somehow.  But I guess my guess was wrong :)

[22:54] <lizmat> I guess my Rake module gets closer to that

[22:55] <lizmat> https://modules.raku.org/dist/Rake

[22:55] *** dogbert17 joined
[22:56] *** dogbert11 left
[23:03] *** zolferino joined
[23:03] *** zolferino left
[23:17] <guifa> Oof

[23:17] <guifa> One good thing about me now creating all of these moduels based around the CLDR is I’m finding how some of my earlier modules sucked :-)

[23:17] <guifa> Namely the LanguageTag which needs … a lot of work

[23:25] *** neshpion left
[23:30] *** Altai-man_ left
[23:30] *** xinming_ left
[23:31] *** xinming_ joined
[23:33] *** sena_kun joined
[23:46] <codesections> .tell vrurg I just had my first occasion to use the new COERCE method, and it's *really* nice.  Thanks for your work adding that :)

[23:46] <tellable6> codesections, I'll pass your message to vrurg

[23:46] *** neshpion joined
[23:46] <vrurg> codesections: you're welcome! :)

[23:46] *** gnufr33dom left
[23:47] * vrurg can't still believe it all started as a fix for an old github issue...

[23:50] *** pecastro left
