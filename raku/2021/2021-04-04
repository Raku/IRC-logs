[00:23] *** grayrider left
[00:26] *** frost-lab joined
[00:27] *** oneeggeach joined
[00:31] *** oneeggeach left
[00:41] <leont> Is there any way of controlling how declarator blocks render in raku --doc?

[00:41] *** sxmx left
[00:41] <leont> I like their idea, but the default behavior is entirely unusable for my purposes

[00:41] *** mowcat left
[00:43] <leont> I like that the information exists in the code, but without control over where it renders, that's all kind of moot.

[00:58] *** sxmx joined
[01:05] *** mniip left
[01:16] *** Doc_Holliwould left
[01:16] *** Doc_Holliwood joined
[01:24] *** kvw_5_ joined
[01:27] *** kvw_5 left
[01:41] *** Doc_Holliwould joined
[01:41] *** Doc_Holliwood left
[01:47] *** Sgeo_ joined
[01:49] *** Sgeo left
[02:03] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:08] <tbrowder> leont: there is, somewhat, but i notice somehow my env var to help the situation a bit has gotten lost in  the docs...let me see if i can find the reference.

[02:08] *** monkey__ joined
[02:11] *** dataangel left
[02:18] <tbrowder> it's BURIED in the section on pod, try setting env var RAKUDO_POD_DECL_BLOCK_USER_FORMAT. then run raku with the '--doc' option

[02:21] <summerisle> i'm doing something a little bit insane with raku-mode. does can someone point me to a raku syntax torture test?

[02:21] <summerisle> or might there be one in rakudo?

[02:22] *** wamba joined
[02:22] <japhb> summerisle: torture test in what sense?  If you're just looking for "really damn big", the setting would do that.

[02:22] <tbrowder> .tell leont check docs pod for env var RAKUDO_POD_DECL_BLOCK_USER_FORMAT

[02:22] <tellable6> tbrowder, I'll pass your message to leont

[02:23] <summerisle> japhb: exhuastive use of syntax

[02:23] <summerisle> within reason

[02:23] <japhb> summerisle: And of course, the Raku grammar would use quite a lot in that particular braid.

[02:23] <codesections> well, I'm not sure exactly what you're looking for, but all/most of the S02 tests in Roast might be along those lines

[02:23] <codesections> e.g., https://github.com/Raku/roast/tree/master/S02-literals 

[02:24] <summerisle> roast definitely has it, i was just hoping that there would be some mother-of-all-tests out there. 

[02:24] *** spacekookie left
[02:24] *** camelia left
[02:24] *** skaji_ left
[02:24] *** mightypork left
[02:24] *** pat_js left
[02:24] *** dylanwh left
[02:24] *** Grinnz left
[02:24] *** mrsolo left
[02:25] *** literal joined
[02:25] *** renormalist joined
[02:25] *** xkr47 joined
[02:25] *** mightypork joined
[02:25] *** spacekookie joined
[02:25] *** dylanwh joined
[02:25] <japhb> summerisle: The problem is that any such "every syntax ever" file has a decent chance to either succeed or crash and burn without giving you a lot of info about what went wrong.

[02:25] *** pat_js joined
[02:25] *** mrsolo joined
[02:25] *** skaji_ joined
[02:25] *** Grinnz joined
[02:25] <japhb> I mean, the Raku grammar being what it is, it would try to point out the problem.  Good luck getting that kind of feedback from an editor mode.

[02:25] <japhb> But perhaps I'm being too cynical.  :-)

[02:27] *** gugod left
[02:27] <summerisle> in this case it's feasible to figure out where things are halting

[02:29] *** wamba left
[02:29] *** camelia joined
[02:29] <codesections> japhb: I think you are.  In some ways, editor modes can give *more* info, if built right: they're not tasked with trying to check whether the syntax in 100% guaranteed to be valid, and can afford to hold more context about the state of the file

[02:30] *** gugod joined
[02:30] <codesections> Said differently, they can (/should) keep parsing after finding an error, because the file they deal with will be invalid 99% of the time they see it

[02:30] <summerisle> ^

[02:31] <summerisle> the gist of what i'm doing is exploring the feasibility of reworking raku's syntax propertizer around lower level parsing rather than using syntax-propertize-rules, which hides a lot behind the scenes. as it stands, certain aspects of the current propertizer are pretty iffy (e.g. inserting POD before the end of the file can often completely throw off indentation and highlighting past that point) and i'm looking for an excuse to write some elisp

[02:34] <codesections> summerisle: as an aside, have you looked at all at integrating between raku-mode and a raku process via JSON?  Between emacs 27 and JSON::Fast, both sides of that seem snappy enough to make that practical, and I keep meaning to investigate

[02:34] <summerisle> that just came to mind actually

[02:34] <summerisle> and i may prefer to go that route

[02:34] <codesections> (but maybe I'm just looking for an excuse *not* to write some elisp)

[02:34] <summerisle> there would still be plenty

[02:34] <codesections> yeah

[02:35] <summerisle> i need to figure out how to get that data out of raku - what's most important though is being able to correlate that data with character positions in the buffer

[02:35] <summerisle> the other thing is that emacs' propertizers work on chunks rather than the whole file, or are expected to at least

[02:42] <summerisle> really it's the working on chunks bit that makes things... interesting

[02:44] *** frost-lab left
[02:45] <summerisle> ah, i just realized what you were suggesting - i thought you meant to suggest that rakudo would emit json and i would consume it

[02:46] <summerisle> i think the idea of a highly responsible language server is not a bad one

[02:46] <summerisle> it would need to be performant enough but capable of handling weird situations (e.g. chunk contains the end of a heredoc but not the beginning)

[02:46] <summerisle> i feel like at that point things become difficult though

[02:46] <summerisle> these things work really well when you don't need a lot of surrounding context

[02:50] <codesections> Yeah.  There's definitely a continuum.  A full-scale LSP-complient server would be a _lot_ of work (though awesome if someone could pull it off).  At the other end, having Rakudo emit some json for emacs to consume would be a lot easier, but not nearly as powerful/interactive.  I've been wondering if there's a sweet spot in the middle somewhere, but mostly that's just been idle speculation on my part (so far, anyway)

[02:52] <summerisle> well, what i need to teach emacs about in particular is proper (not inferred) nesting level (in some cases), heredocs, line continuations in prec drop method calls, `-->` in single-element argument lists when on separate lines, and some other things that don't come to mind now

[02:53] <summerisle> having used raku for a while I think it's an extremely good programming language (minus current speed issues in the parse stage), and would like better editing support for it

[02:54] <summerisle> the extremely blurred line between runtime and language is beautiful

[02:56] <codesections> another item for that list: Q-lang support for custom delimiters.  `Q @'@;` is a fast way to break highlighting for the rest of the file atm

[03:27] *** monkey__ left
[03:54] *** tejr left
[04:17] *** dotdotdot left
[04:20] *** neshpion left
[04:21] *** dotdotdot joined
[04:22] *** mtj_ joined
[04:26] *** squashable6 left
[04:28] *** oneeggeach joined
[04:29] *** squashable6 joined
[04:33] *** dotdotdot left
[04:33] *** oneeggeach left
[04:40] *** dotdotdot joined
[04:44] *** dotdotdot left
[04:47] *** dotdotdot joined
[04:55] *** dotdotdot left
[04:55] *** dotdotdot joined
[05:03] *** dotdotdot left
[05:07] *** dotdotdot joined
[05:16] *** frost-lab joined
[05:29] *** berber44 joined
[05:32] *** wbiker joined
[05:32] *** berber44 left
[06:24] *** Doc_Holliwould left
[06:28] *** Sgeo_ left
[06:32] *** Doc_Holliwood joined
[06:42] *** Sgeo joined
[06:52] <Geth> ¦ doc: f414ff665c | (Richard Hainsworth)++ (committed by Juan Julián Merelo Guervós) | doc/Language/numerics.pod6

[06:52] <Geth> ¦ doc: related to #3841

[06:52] <Geth> ¦ doc: 

[06:52] <Geth> ¦ doc: This is not an obvious mistake. From the link it seems to point at a different file. Since this is a judgment call, I'm flagging my correction for review.

[06:52] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f414ff665c

[06:52] <Geth> ¦ doc: 4486bd6328 | (Richard Hainsworth)++ (committed by Juan Julián Merelo Guervós) | doc/Language/numerics.pod6

[06:52] <Geth> ¦ doc: Update numerics.pod6

[06:52] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/4486bd6328

[06:52] <linkable6> Link: https://docs.raku.org/language/numerics

[06:53] *** linkable6 left
[06:54] *** linkable6 joined
[06:54] *** Doc_Holliwood left
[06:55] *** Doc_Holliwood joined
[07:02] <Geth> ¦ doc: 1ee3ded883 | (Richard Hainsworth)++ (committed by Juan Julián Merelo Guervós) | doc/Language/operators.pod6

[07:02] <Geth> ¦ doc: Related #3841

[07:02] <Geth> ¦ doc: 

[07:02] <Geth> ¦ doc: Removing B<..> **inside** a X<> for $*COLLATION .  

[07:02] <Geth> ¦ doc: The problem is that there is no specification for a corresponding `L<>` in another file. As the present, the link author has to know how the target will be rendered. So `B<>` could be rendered as `<b> ... </b>` or `<strong>...</strong>` in HTML. **BUT** if this were to be rendered in some other output format (pdf? epub? latex?), the link would fail. This has already happened in `Language/Operators`, where the link author did not include `<strong>...</stro

[07:02] <Geth> ¦ doc: 

[07:02] <Geth> ¦ doc: So, I have removed B<> inside the X<>, and simplified the X<>, and corrected the link in Operators.

[07:02] <Geth> ¦ doc: If this has a knock-on effect in other documents, it will be picked up in `Collection` tests when the documentation files are re-rendered.

[07:02] <linkable6> Link: https://docs.raku.org/language/operators

[07:02] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1ee3ded883

[07:03] *** linkable6 left
[07:03] <Geth> ¦ doc: a14b1a2d36 | (Richard Hainsworth)++ (committed by Juan Julián Merelo Guervós) | doc/Type/Any.pod6

[07:03] <Geth> ¦ doc: See #3841 #3857

[07:03] <Geth> ¦ doc: 

[07:03] <Geth> ¦ doc: simplify the X<> for $*COLLATION

[07:03] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a14b1a2d36

[07:03] *** kurahaupo_ joined
[07:04] *** linkable6 joined
[07:05] *** kurahaupo left
[07:06] *** parabolize left
[07:21] *** oneeggeach joined
[07:24] *** Geth left
[07:26] *** oneeggeach left
[07:29] *** domidumont joined
[07:46] *** wamba joined
[07:55] *** frost-lab left
[08:11] *** domidumont left
[08:17] *** domidumont joined
[08:23] *** domidumont left
[08:23] *** tejr joined
[08:41] *** domidumont joined
[08:44] *** domidumont left
[08:57] *** aluaces left
[09:30] *** oneeggeach joined
[09:34] *** Sgeo left
[09:35] *** oneeggeach left
[09:37] *** pecastro joined
[09:45] *** aluaces joined
[09:55] *** Xliff joined
[09:56] <Xliff> What would be the best way to take an IO::Path and get its path fragments?

[09:56] <Xliff> There doesn't seem a method for it in the docs.

[09:56] <Xliff> m: "/a/b/c/d/e".IO.parts.gist.say

[09:56] <camelia> rakudo-moar 726a75e24: OUTPUT: «IO::Path::Parts.new("","/a/b/c/d","e")␤»

[09:58] *** wingfold_ joined
[09:58] *** wingfold left
[09:59] <Xliff> m: sub fragments ($p) { $p.dirname.split($p.SPEC.dir-sep) }; "/a/b/c/d/e".IO.&fragments.gist.say

[09:59] <camelia> rakudo-moar 726a75e24: OUTPUT: «( a b c d)␤»

[09:59] <Xliff> ^^ Ah! That works!

[09:59] <Xliff> Is there any reason this isn't a method?

[09:59] <Xliff> What is the likelyhood a PR implementing such would be accepted?

[10:04] <lizmat> I'd say, pretty good, unless we missed something and that functionality *is* already available somehow, in which case we would need better documentation ?

[10:13] <Xliff> lizmat: Well, I'll continue looking for it. Already discovered a minor flaw: Simple case works for Unix, not Windows.

[10:13] <Xliff> Not sure how I'd handle that.

[10:14] <Xliff> Particularly when a drive is involved.

[10:15] <Xliff> sub fragments ($p) { $p.dirname.split($p.SPEC.dir-sep) }; "g:/a/b/c/d/e".IO.&fragments.gist.say

[10:15] <evalable6> Xliff, rakudo-moar bebc82f38: OUTPUT: «(g: a b c d)␤»

[10:15] <Xliff> Actually, that's not bad

[10:19] <lizmat> m: dd $*SPEC.splitpath("/a/b/c/d/e".IO)

[10:19] <camelia> rakudo-moar 726a75e24: OUTPUT: «("", "/a/b/c/d/", "e")␤»

[10:20] <lizmat> m: dd $*SPEC.splitdir("/a/b/c/d/e".IO)   # Xliff 

[10:20] <camelia> rakudo-moar 726a75e24: OUTPUT: «("", "a", "b", "c", "d", "e")␤»

[10:20] <lizmat> m: dd $*SPEC.splitdir("c:/a/b/c/d/e".IO)

[10:20] <camelia> rakudo-moar 726a75e24: OUTPUT: «("c:", "a", "b", "c", "d", "e")␤»

[10:22] <Xliff> lizmat: The only problem is that's not on the IO::Path.

[10:22] <Xliff> I knew we did have that somewhere though. Thanks.

[10:23] <lizmat> well, yeah, but I'm not going to touch that part of Rakudo ever again: got burned a little too much on that, technically wise

[10:23] <Xliff> sub fragments ($p) { $p.SPEC.splitdir($p.absolute) }; "g:/a/b/c/d/e".IO.&fragments.gist.say

[10:23] <evalable6> Xliff, rakudo-moar bebc82f38: OUTPUT: «( home bisectable git whateverable g: a b c d e)␤»

[10:24] <Xliff> sub fragments ($p) { $p.SPEC.splitdir($p.absolute) }; "g:/a/b/c/d/e".IO.absolute.say

[10:24] <evalable6> Xliff, rakudo-moar bebc82f38: OUTPUT: «/home/bisectable/git/whateverable/g:/a/b/c/d/e␤»

[10:24] <Xliff> Ah.

[10:24] *** Black_Ribbon left
[10:25] <Xliff> lizmat: So the implementation is even easier!

[10:33] <sena_kun> m: my \a = "\{\"state\":\"HOM\",\"comment\":\"test\"}"; say \(a); say (\(a));

[10:33] <camelia> rakudo-moar 726a75e24: OUTPUT: «\("\{\"state\":\"HOM\",\"comment\":\"test\"}")␤\("\{\"state\":\"HOM\",\"comment\":\"test\"}")␤»

[10:33] <sena_kun> m: my \a = "\{\"state\":\"HOM\",\"comment\":\"test\"}"; (-> (:$state, *%rest) {}).signature.ACCEPTS(\(a));

[10:33] <camelia> rakudo-moar 726a75e24: OUTPUT: «Cannot unpack or Capture `{"state":"HOM","comment":"test"}`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(…»

[10:33] <sena_kun> Can anyone please explain to me what's the difference?

[10:34] <sena_kun> m: my \a = "foo"; say \(a); say (\(a));

[10:34] <camelia> rakudo-moar 726a75e24: OUTPUT: «\("foo")␤\("foo")␤»

[10:34] <sena_kun> m: my \a = "foo"; (-> (:$state, *%rest) {}).signature.ACCEPTS(\(a));

[10:34] <camelia> rakudo-moar 726a75e24: OUTPUT: «Cannot unpack or Capture `foo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block <unit> a…»

[10:34] *** aborazmeh joined
[10:34] <sena_kun> to simplify the input

[10:36] <sena_kun> m: my \a = "\{\"state\":\"HOM\",\"comment\":\"test\"}"; (-> :$state, *%rest {}).signature.ACCEPTS(\(a));

[10:36] <camelia> rakudo-moar 726a75e24: ( no output )

[10:36] <sena_kun> work ok

[10:38] <lizmat> m: dd \().^name

[10:38] <camelia> rakudo-moar 726a75e24: OUTPUT: «"Capture"␤»

[10:38] <lizmat> \() is special syntax for creating a Capture ?

[10:39] <sena_kun> yes

[10:39] <sena_kun> I am not getting why when it does not match the signature without parens it just says "Ok, this capture doesn't fit, return False and fine", but when the signature has parens it throws.

[10:40] <sena_kun> Or, hmm.

[10:40] <sena_kun> Maybe it is normal to throw here, I am starting to get it. It tries to remove a level of () from bare string and fails to do so.

[10:41] <sena_kun> It's just me expecting ACCEPTS to be silent and just return False when something is not going well.

[10:42] <lizmat> well, maybe it should ?

[10:43] <sena_kun> Hard to tell, honestly. On the one hand it's a nice thing to know you screwed a signature somewhere instead of it silently not saying anything with you scratching a head.

[10:43] <sena_kun> Anyway, I got it now, thank you. :)

[10:44] <lizmat> glad to have been able to rubber duck  :-)

[10:47] *** andinus joined
[10:51] *** natrys joined
[10:52] *** Geth joined
[10:58] *** linkable6 left
[10:59] <Geth> ¦ doc: ba217999a0 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/newline.pod6

[10:59] <Geth> ¦ doc: newline.pod6 correct ref see #3841

[10:59] <Geth> ¦ doc: 

[10:59] <Geth> ¦ doc: In link \n

[10:59] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ba217999a0

[11:01] *** linkable6 joined
[11:17] *** aborazmeh left
[11:47] <leont> tbrowder: that just affects formatting. It doesn't allow me actually process them

[11:47] <tellable6> 2021-04-04T02:22:56Z #raku <tbrowder> leont check docs pod for env var RAKUDO_POD_DECL_BLOCK_USER_FORMAT

[11:48] <tbrowder> what is it you expect Raku to do?

[11:48] <tbrowder> or would like it to do?

[11:50] <tbrowder> i'm going to go back and try to bring my wip pod change to leading declarator blocks into a PR, and maybe i could help.

[11:52] <tbrowder> if the author's format is respected, then you can use pod formatting in the decl block, extract it, and then process it as pod in a subprocess is what i think Damian was visualizing.

[11:55] <tbrowder> my words, not his. see his comments ref decl blocks on the rakudo github site

[12:10] *** maggotbrain joined
[12:17] <leont> Main difficulty is that there's already a default handling

[12:18] <leont> Declarator docs are added to the method's docs, and to the compilation unit docs

[12:18] <leont> The former works as I'd want, the latter I want more control over.

[12:19] <leont> 1) because I want precise control over where it ends up, and now my best way of doing that is to put certain pieces before and other after my code (which I don't like)

[12:25] <leont> I can't weave it

[12:26] <leont> 2) it doesn't easily allow me to inherit docs. Stuff like "these are the methods class Bar inherited from class Foo." Doing this sort of stuff is way more difficult than it should be.

[12:28] <leont> I'm currently playing with a DOC INIT phaser, and I think I'm able to munge it, but it's all much more difficult than it should be

[12:36] *** mniip joined
[12:39] <leont> It doesn't allow me to add docs for generated methods (new, or handles methods) the same way as hand written ones either

[12:42] *** spacekookie left
[12:43] *** spacekookie joined
[12:45] *** oneeggeach joined
[12:46] *** natrys left
[12:53] *** Doc_Holliwould joined
[12:57] *** oneeggeach left
[12:57] <Xliff> If I have a .pause document and want to encrypt it with gpg. How would I go about doing that?

[12:57] *** oneeggeach joined
[13:00] *** oneeggeach left
[13:00] <Doc_Holliwould> m: dd 0.100000000000000006e0

[13:00] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.1e0␤»

[13:00] <Doc_Holliwould> m: dd 0.100000000000000006

[13:00] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.100000000000000006␤»

[13:00] <Doc_Holliwould> is that a bug? it seems to lose precision when using the exponential form

[13:03] <lizmat> m: dd 0.100000000000000006e0.^name

[13:03] <camelia> rakudo-moar 726a75e24: OUTPUT: «"Num"␤»

[13:03] <lizmat> m: dd 0.100000000000000006.^name

[13:03] <camelia> rakudo-moar 726a75e24: OUTPUT: «"Rat"␤»

[13:03] <lizmat> Num have limited precision

[13:03] <lizmat> *Nums

[13:03] <lizmat> Doc_Holliwould ^^

[13:05] <lizmat> the "exponential" form is really the "Num" form

[13:18] <Doc_Holliwould> it should fit into a 64 bit float though=

[13:19] <Doc_Holliwould> ?

[13:25] <Xliff> JSON::Fast is failing to deserialize JSON that passes jsonlint.com

[13:27] <Xliff> JSON data is here: https://replit.com/@Xliff/FrequentSplendidOutlier#META6.json

[13:28] <leont> That doesn't show any JSON for me

[13:31] *** Geth left
[13:35] <lizmat> m: printf("%.20f",0.100000000000000006e0)

[13:35] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.10000000000000000000»

[13:36] <lizmat> m: printf("%.30f",0.100000000000000006e0)

[13:36] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.100000000000000000000000000000»

[13:36] <lizmat> hmmm

[13:38] <Xliff> leont: Shows fine for me.

[13:38] <Xliff> Try this: https://replit.com/join/vgttffvw-xliff

[13:43] <ugexe> parsed it for me fine

[13:50] <codesections> .tell leont re: documenting with declarator blocks -- I agree the current implementation leaves a fair bit to be desired.  FWIW, I think some of the issue is that parts of the design are just NYI (see this issue for example: https://github.com/rakudo/rakudo/issues/3804#issuecomment-683174352)

[13:50] <tellable6> codesections, I'll pass your message to leont

[14:05] <Xliff> Hmmm...

[14:05] <Xliff> Lost a full 10 minutes in p6-GLib compiles.

[14:06] <Xliff> 400 seconds on the parallel compile. Wow

[14:10] <Xliff> See https://github.com/Xliff/p6-GLib/blob/master/doc/Perl6%20Projects%20Line%20Counts.ods

[14:10] <Xliff> You will need to download and open the file to see the data.

[14:10] <Xliff> Also need OpenOffice

[14:16] <lizmat> afk for a few hours&

[14:22] *** Xliff left
[14:44] *** vaskozl joined
[14:47] *** _jrjsmrtn joined
[14:48] *** __jrjsmrtn__ left
[14:51] *** parabolize joined
[15:12] *** monkey__ joined
[15:13] *** monkey__ left
[15:52] <leont> codesections: I don't think the problem is NYI

[15:52] <tellable6> hey leont, you have a message: https://gist.github.com/88d13c22cd046f3e0f79f3ad15ffcf3a

[15:54] *** sena_kun left
[16:00] *** sena_kun joined
[16:07] *** kurahaupo_ left
[16:07] *** kurahaupo joined
[16:23] *** Doc_Holliwood left
[16:30] *** rindolf joined
[16:34] *** samebchase-6 is now known as samebchase-

[16:49] *** defaultxr left
[16:53] *** Geth joined
[16:57] <lucs> If @foo.elems is 42, is there a @foo.｢method｣ that gives 41?

[17:12] *** rindolf left
[17:14] <lucs> Um, Happy Easter everyone, I guess :/

[17:16] <[Coke]> m: my @a=1..42; say @.kv[*-1]

[17:16] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable @.kv used where no 'self' is available␤at <tmp>:1␤------> 3my @a=1..42; say @.kv7⏏5[*-1]␤    expecting any of:␤        argument list␤        term␤»

[17:16] <[Coke]> m: my @a=1..42; say @a.kv[*-1]

[17:16] <camelia> rakudo-moar 726a75e24: OUTPUT: «42␤»

[17:16] <[Coke]> m: my @a='A'..'Z'; say @a.kv[*-2]

[17:16] <camelia> rakudo-moar 726a75e24: OUTPUT: «25␤»

[17:16] <[Coke]> (second one, first is wrong.)

[17:17] <lucs> [Coke]: Right, but still, I'd use ...elems - 1 instead of that.

[17:17] <codesections> or just @foo - 1

[17:18] <lucs> Oh, right, in scalar context.

[17:18] <codesections> if you don't mind the coercion being implicit

[17:20] *** draco100[m] joined
[17:22] <codesections> (you could also call it as `@foo.&infix:<->(1)` if you need it as part of a method chain)

[17:24] <[Coke]> :)

[17:27] *** neshpion joined
[17:28] <CIAvash> @foo.elems.pred?

[17:30] <summerisle> hot idea: raku-flavored-lisp, a lisp built around the MOP

[17:30] *** mowcat joined
[17:32] <codesections> that'd pair well with https://examples.p6c.dev/categories/interpreters/lisp.html

[17:32] <summerisle> and do it as a slang

[17:38] <codesections> oh, or a variant on what [Coke] suggested: @foo[]:k.end

[17:41] <Geth> ¦ doc: 24ca149966 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/packages.pod6

[17:41] <Geth> ¦ doc: packages / interpolation #3841

[17:41] <Geth> ¦ doc: 

[17:41] <Geth> ¦ doc: Change reference to Glossary entry

[17:41] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/24ca149966

[17:41] <linkable6> Link: https://docs.raku.org/language/packages

[17:41] *** linkable6 left
[17:42] *** linkable6 joined
[18:03] <Geth> ¦ doc: d8f23ec421 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[18:03] <Geth> ¦ doc: Regexes / backtracking 2 see #3841

[18:03] <Geth> ¦ doc: 

[18:03] <Geth> ¦ doc: More than one occurrence of backtracking.

[18:03] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d8f23ec421

[18:03] <linkable6> Link: https://docs.raku.org/language/regexes

[18:03] *** linkable6 left
[18:06] *** linkable6 joined
[18:08] <Geth> ¦ doc: d7f7dfbef4 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/structures.pod6

[18:08] <Geth> ¦ doc: structure / lines see #3841

[18:08] <Geth> ¦ doc: 

[18:08] <Geth> ¦ doc: method_lines -> routine_lines

[18:08] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d7f7dfbef4

[18:08] <linkable6> Link: https://docs.raku.org/language/structures

[18:08] *** linkable6 left
[18:09] *** linkable6 joined
[18:15] *** softmoth joined
[18:15] <softmoth> tbrowder, perl6-pod-to-markdown #26 is fixed. Let me know if you have any issues.

[18:16] <tbrowder> okay, thanks so much, Tim!

[18:18] <softmoth> You're welcome! By the way, do you know the status of Rakudo #2863 (getting Rakudo to actually parse table elements as Pod)? AFAIK a few people have tried to fix it and given up, but it seems like it shouldn't be that hard. I don't know why it's been unfixed for a decade....

[18:20] *** bdju left
[18:21] *** bdju joined
[18:31] <Geth> ¦ doc: 542729c220 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[18:31] <Geth> ¦ doc: traps change || to %7C%7C

[18:31] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/542729c220

[18:31] <linkable6> Link: https://docs.raku.org/language/traps

[18:42] *** Sgeo joined
[19:02] *** tejr left
[19:02] *** tejr joined
[19:08] *** wamba left
[19:14] *** simcop2387 left
[19:18] *** wamba joined
[19:22] *** simcop2387 joined
[19:24] *** Sgeo left
[19:26] *** Sgeo joined
[19:36] *** simcop2387 left
[19:37] <Geth> ¦ doc: 90bb3e635d | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[19:37] <Geth> ¦ doc: typesystem errors, see #3841

[19:37] <Geth> ¦ doc: 

[19:37] <Geth> ¦ doc: - section title was changed  -> Constraining_argument_definiteness

[19:37] <Geth> ¦ doc: - reference for where clause

[19:37] <Geth> ¦ doc: - with/orwith section title was changed

[19:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/90bb3e635d

[19:37] <linkable6> Link: https://docs.raku.org/language/typesystem

[19:38] *** linkable6 left
[19:40] *** linkable6 joined
[19:43] <Geth> ¦ doc/finanalyst-patch-1: 34c45046b6 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[19:43] <Geth> ¦ doc/finanalyst-patch-1: Reference error to .^ 

[19:43] <Geth> ¦ doc/finanalyst-patch-1: 

[19:43] <Geth> ¦ doc/finanalyst-patch-1: Part of  #3841 . But I'm flagging this error because the orginal documentation calls `.^` a postfix op, but in `

[19:43] <Geth> ¦ doc/finanalyst-patch-1: language/operators` it is called a metamethod. So I have also change 'postfix' to 'metamethod' to be consistent.

[19:43] <Geth> ¦ doc/finanalyst-patch-1: review: https://github.com/Raku/doc/commit/34c45046b6

[19:43] <Geth> ¦ doc: finanalyst++ created pull request #3863: Reference error to .^

[19:43] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3863

[19:51] <Geth> ¦ doc: 3d53e92933 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/unicode_entry.pod6

[19:51] <Geth> ¦ doc: unicode entry #3841 error

[19:51] <Geth> ¦ doc: 

[19:51] <Geth> ¦ doc: from set/bag operators -> Operators_with_set_semantics

[19:51] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/3d53e92933

[19:51] <linkable6> Link: https://docs.raku.org/language/unicode_entry

[19:51] *** linkable6 left
[19:52] *** linkable6 joined
[19:52] *** simcop2387 joined
[19:58] *** simcop2387 left
[20:00] <Geth> ¦ doc/finanalyst-patch-3: 18 commits pushed by (Richard Hainsworth)++

[20:00] <Geth> ¦ doc/finanalyst-patch-3: review: https://github.com/Raku/doc/compare/4beefb972769...1a6ea16afb24

[20:01] *** simcop2387 joined
[20:06] <Geth> ¦ doc/finanalyst-patch-2: bf894b50e8 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/packages.pod6

[20:06] <Geth> ¦ doc/finanalyst-patch-2: interpolate using wikipedia

[20:06] <Geth> ¦ doc/finanalyst-patch-2: 

[20:06] <Geth> ¦ doc/finanalyst-patch-2: There was discussion of this and I caused a conflict by editing twice. Here it is again

[20:06] <Geth> ¦ doc/finanalyst-patch-2: review: https://github.com/Raku/doc/commit/bf894b50e8

[20:06] <Geth> ¦ doc: finanalyst++ created pull request #3864: interpolate using wikipedia link (resubmission)

[20:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3864

[20:08] *** simcop2387 left
[20:10] *** simcop2387 joined
[20:17] <Geth> ¦ doc: 6f06c4d972 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[20:17] <Geth> ¦ doc: variables #3841

[20:17] <Geth> ¦ doc: 

[20:17] <Geth> ¦ doc: Change to a valid reference

[20:17] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/6f06c4d972

[20:17] <linkable6> Link: https://docs.raku.org/language/variables

[20:18] *** linkable6 left
[20:20] *** linkable6 joined
[20:30] *** Froogal joined
[20:33] *** Sgeo left
[20:35] *** Sgeo joined
[20:56] *** moon-child joined
[21:00] <Geth> ¦ doc: db1e19fd51 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Any.pod6

[21:00] <Geth> ¦ doc: Any #3841 errors

[21:00] <Geth> ¦ doc: 

[21:00] <Geth> ¦ doc: - prepend method -> routine

[21:00] <Geth> ¦ doc: - join Any.list is a method not a routine

[21:00] <Geth> ¦ doc: - categorise is a routine not a method

[21:00] <Geth> ¦ doc: - map is a routine

[21:00] <Geth> ¦ doc: - title changed to Destructuring_arguments

[21:00] <linkable6> Link: https://docs.raku.org/type/Any

[21:00] <Geth> ¦ doc: - hyper ref corrected to methodop_%C2%BB._/_methodop_%3E%3E.

[21:00] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/db1e19fd51

[21:01] *** linkable6 left
[21:03] *** linkable6 joined
[21:04] <Geth> ¦ doc: 714af7fdd1 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Dateish.pod6

[21:04] <Geth> ¦ doc: Dateish #3841

[21:04] <Geth> ¦ doc: 

[21:04] <Geth> ¦ doc: missing _ in method later

[21:04] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/714af7fdd1

[21:04] <linkable6> Link: https://docs.raku.org/type/Dateish

[21:05] *** linkable6 left
[21:06] *** linkable6 joined
[21:10] <Geth> ¦ doc: 0bace98f51 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Distribution/Locally.pod6

[21:10] <Geth> ¦ doc: Distribution::Locally #3841

[21:10] <Geth> ¦ doc: 

[21:10] <Geth> ¦ doc: method_prefix is in the same file (::Locally), not in the parent class file.

[21:10] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0bace98f51

[21:10] <linkable6> Link: https://docs.raku.org/type/Distribution::Locally

[21:10] *** linkable6 left
[21:13] *** linkable6 joined
[21:13] <Geth> ¦ doc: e2f159eadc | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Hash.pod6

[21:13] <Geth> ¦ doc: Hash #3841 error

[21:13] <Geth> ¦ doc: 

[21:13] <Geth> ¦ doc: Postional vs named. lower-case and add extra from header

[21:13] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e2f159eadc

[21:13] <linkable6> Link: https://docs.raku.org/type/Hash

[21:14] *** linkable6 left
[21:15] *** linkable6 joined
[21:19] <Geth> ¦ doc: 849b2c502f | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/IO/Handle.pod6

[21:19] <Geth> ¦ doc: IO::Handle #3841

[21:19] <Geth> ¦ doc: 

[21:19] <Geth> ¦ doc: - get is routine not method

[21:19] <Geth> ¦ doc: - filehandles not file Handles

[21:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/849b2c502f

[21:19] <linkable6> Link: https://docs.raku.org/type/IO::Handle

[21:20] *** linkable6 left
[21:20] *** linkable6 joined
[21:24] *** aluaces left
[21:26] <Geth> ¦ doc: a253f3b806 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[21:26] <Geth> ¦ doc: Path #3841

[21:26] <Geth> ¦ doc: 

[21:26] <Geth> ¦ doc: open is a method not a routine

[21:26] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a253f3b806

[21:26] <linkable6> Link: https://docs.raku.org/type/IO::Path

[21:26] *** linkable6 left
[21:28] *** linkable6 joined
[21:30] <Geth> ¦ doc: f7f36763e2 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/IO/Special.pod6

[21:30] <Geth> ¦ doc: Special #3841

[21:30] <Geth> ¦ doc: 

[21:30] <Geth> ¦ doc: extra > in ref

[21:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f7f36763e2

[21:30] <linkable6> Link: https://docs.raku.org/type/IO::Special

[21:31] *** linkable6 left
[21:32] *** linkable6 joined
[21:47] <Geth> ¦ doc: 53c21f3267 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Signature.pod6

[21:47] <Geth> ¦ doc: Signature #3841

[21:47] <Geth> ¦ doc: 

[21:47] <Geth> ¦ doc: Extra chars in ref to where clause

[21:47] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/53c21f3267

[21:47] <linkable6> Link: https://docs.raku.org/type/Signature

[21:47] *** linkable6 left
[21:49] <Geth> ¦ doc: 2878d0305e | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Iterable.pod6

[21:49] <Geth> ¦ doc: Iterable #3841

[21:49] <Geth> ¦ doc: 

[21:49] <Geth> ¦ doc: Extra chars in reference

[21:49] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2878d0305e

[21:49] *** linkable6 joined
[22:03] *** e left
[22:10] *** donaldh joined
[22:12] *** wamba left
[22:28] *** e joined
[22:29] *** Froogal left
[22:29] *** CodeCanna joined
[22:42] <Geth> ¦ ecosystem: softmoth++ created pull request #587: Pod::To::Markdown has moved to CPAN

[22:42] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/587

[23:05] *** Doc_Holliwould left
[23:05] *** CodeCanna left
[23:12] *** CodeCanna joined
[23:30] *** CodeCanna left
[23:43] <tbrowder> softmoth: excellent! my new table is much better with proper math symbols. see it in the README at github/tbrowder/Math-FractionalPart

[23:44] <tbrowder> thanks, Tim

[23:45] <Geth> ¦ ecosystem: 85bc52beda | (Tim Siegel)++ | META.list

[23:45] <Geth> ¦ ecosystem: Pod::To::Markdown has moved to CPAN

[23:45] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/85bc52beda

[23:45] <Geth> ¦ ecosystem: cc5e0b1f66 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[23:45] <Geth> ¦ ecosystem: Merge pull request #587 from softmoth/pod-to-markdown-cpan

[23:45] <Geth> ¦ ecosystem: 

[23:45] <Geth> ¦ ecosystem: Pod::To::Markdown has moved to CPAN

[23:45] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/cc5e0b1f66

[23:52] *** pecastro left
[23:54] <softmoth> tbrowder, You're welcome. Thanks for letting me know.

