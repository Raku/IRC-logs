[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:14] *** DarthGandalf left
[00:35] *** DarthGandalf joined
[01:10] *** RandalSchwartz left
[02:10] *** benchable6 left
[02:10] *** nativecallable6 left
[02:10] *** notable6 left
[02:10] *** coverable6 left
[02:10] *** reportable6 left
[02:10] *** quotable6 left
[02:10] *** unicodable6 left
[02:10] *** releasable6 left
[02:10] *** shareable6 left
[02:10] *** linkable6 left
[02:10] *** committable6 left
[02:10] *** squashable6 left
[02:10] *** bisectable6 left
[02:10] *** sourceable6 left
[02:10] *** statisfiable6 left
[02:10] *** evalable6 left
[02:10] *** greppable6 left
[02:10] *** tellable6 left
[02:10] *** bloatable6 left
[02:11] *** sourceable6 joined
[02:11] *** benchable6 joined
[02:11] *** nativecallable6 joined
[02:12] *** bloatable6 joined
[02:12] *** shareable6 joined
[02:12] *** linkable6 joined
[02:12] *** reportable6 joined
[02:12] *** squashable6 joined
[02:12] *** tellable6 joined
[02:12] *** bisectable6 joined
[02:13] *** evalable6 joined
[02:13] *** unicodable6 joined
[02:13] *** releasable6 joined
[02:13] *** statisfiable6 joined
[02:13] *** coverable6 joined
[02:13] *** quotable6 joined
[02:13] *** greppable6 joined
[02:13] *** committable6 joined
[02:14] *** notable6 joined
[02:16] <lucs> When I do ÔΩ¢‚ñ∏ rakubrew availableÔΩ£, some versions are prefixed with 'D', what does it mean?
[02:53] *** frost joined
[02:58] *** MasterDuke left
[03:58] *** committable6 left
[03:58] *** bloatable6 left
[03:58] *** bisectable6 left
[03:58] *** unicodable6 left
[03:58] *** quotable6 left
[03:58] *** evalable6 left
[03:58] *** notable6 left
[03:58] *** coverable6 left
[03:58] *** shareable6 left
[03:58] *** benchable6 left
[03:58] *** greppable6 left
[03:59] *** committable6 joined
[03:59] *** shareable6 joined
[03:59] *** greppable6 joined
[03:59] *** quotable6 joined
[04:00] *** benchable6 joined
[04:01] *** bisectable6 joined
[04:01] *** unicodable6 joined
[04:01] *** coverable6 joined
[04:01] *** evalable6 joined
[04:01] *** notable6 joined
[04:01] *** bloatable6 joined
[05:01] *** notable6 left
[05:01] *** evalable6 left
[05:01] *** bloatable6 left
[05:01] *** unicodable6 left
[05:01] *** quotable6 left
[05:01] *** nativecallable6 left
[05:01] *** linkable6 left
[05:01] *** greppable6 left
[05:01] *** coverable6 left
[05:01] *** releasable6 left
[05:01] *** tellable6 left
[05:01] *** committable6 left
[05:01] *** sourceable6 left
[05:01] *** shareable6 left
[05:01] *** reportable6 left
[05:01] *** statisfiable6 left
[05:01] *** bisectable6 left
[05:01] *** squashable6 left
[05:01] *** benchable6 left
[05:02] *** releasable6 joined
[05:02] *** nativecallable6 joined
[05:02] *** reportable6 joined
[05:02] *** benchable6 joined
[05:02] *** unicodable6 joined
[05:02] *** notable6 joined
[05:02] *** sourceable6 joined
[05:03] *** statisfiable6 joined
[05:03] *** evalable6 joined
[05:03] *** tellable6 joined
[05:03] *** quotable6 joined
[05:04] *** greppable6 joined
[05:04] *** committable6 joined
[05:04] *** linkable6 joined
[05:04] *** bloatable6 joined
[05:04] *** coverable6 joined
[05:04] *** bisectable6 joined
[05:04] *** shareable6 joined
[05:04] *** squashable6 joined
[05:10] *** andinus` is now known as andinus
[05:14] *** Kaiepi left
[05:33] *** Kaiepi joined
[05:38] *** Kaiepi left
[05:43] *** Kaiepi joined
[05:51] *** Kaiepi left
[05:53] *** Kaiepi joined
[05:58] *** Kaiepi left
[06:00] *** Kaiepi joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:14] *** Tirifto left
[06:23] *** Kaiepi left
[06:23] *** Kaipi joined
[06:30] *** Kaipi left
[06:30] *** Kaiepi joined
[06:31] *** Eddward_ left
[06:47] *** Kaiepi left
[06:53] *** Kaiepi joined
[07:01] <pony> can you include regexes, rules, and tokens from one grammar into another? (to avoid having very large ones)?
[07:03] <pony> e.g. include number grammar in calculator grammar in compiler grammar :)
[07:04] <japhb> Inheritance works; grammars are classes
[07:04] <moon-child> m: my token x { h }; grammar G { token TOP { <x> } }; grammar H { token TOP { <x> } }
[07:04] <camelia> rakudo-moar 5ecc8308f: ( no output )
[07:04] <japhb> And as moon-child points out, lexical scope works too.  :-)
[07:06] <pony> COOL
[07:06] <pony> cool (sorry caps)
[07:07] <pony> m: grammar A { TOP { 'a' } }; grammar B is A { TOP { <A::TOP> } }; say B.parse('a')
[07:07] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    TOP used at line 1‚ê§‚ê§¬ª
[07:08] <pony> m: grammar A { TOP { 'a' } }; grammar B is A { token TOP { <A::TOP> } }; say B.parse('a')
[07:08] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    TOP used at line 1‚ê§‚ê§¬ª
[07:08] <pony> m: grammar A { token TOP { 'a' } }; grammar B is A { token TOP { <A::TOP> } }; say B.parse('a')
[07:08] <camelia> rakudo-moar 5ecc8308f: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§ A::TOP => ÔΩ¢aÔΩ£‚ê§¬ª
[07:21] *** Sgeo left
[07:44] *** patrickb joined
[07:49] <patrickb> lucs: Re `rakubrew list-availiable`. The "D" marks versions for which a precompiled archive is available. This means you can use `rakubrew download` to set up such a version, which is an aweful lot faster than `rakubrew build`. I just noticed, that the docs over on rakubrew.org are stale in that respect. Will update this evening.
[07:49] <tellable6> 2021-07-14T19:40:56Z #raku <melezhik> patrickb:  just a thoughts ... ))
[07:49] <tellable6> hey patrickb, you have a message: https://gist.github.com/0d7a53c265b37a86adf48549d4294a16
[07:49] <tellable6> hey patrickb, you have a message: https://gist.github.com/001b4e7872d54f3131609ce7ddec8acb
[07:49] <tellable6> 2021-07-14T19:47:46Z #raku <melezhik> patrickb: avoiding AND emperical  constructions -> avoiding ANY emperical  constructions
[07:49] <tellable6> hey patrickb, you have a message: https://gist.github.com/e02f10f78b3a701e3137fa3b60dee1f9
[07:58] <patrickb> lucs: Also, did you know you can do `rakubrew help list-available`?
[07:59] *** Kaiepi left
[08:00] *** Kaiepi joined
[08:39] *** Kaipi joined
[08:40] *** Kaiepi left
[08:42] <Geth> ¬¶ doc: mykhal++ created pull request #3915: fix Python (dict key string) syntax
[08:42] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3915
[08:58] <Geth> ¬¶ doc: ba3bbf749e | (Michal Bozon)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/py-nutshell.pod6
[08:58] <Geth> ¬¶ doc: fix Python (dict key string) syntax
[08:58] <Geth> ¬¶ doc: 
[08:58] <Geth> ¬¶ doc: was wrong Python syntax, or, dict() definition in fact tried to use (non-existent) variables instead of string literals
[08:58] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/ba3bbf749e
[08:58] <linkable6> Link: https://docs.raku.org/language/py-nutshell
[09:20] *** ufobat_ joined
[10:20] *** linkable6 left
[10:20] *** evalable6 left
[10:20] *** linkable6 joined
[10:22] *** evalable6 joined
[10:26] *** ufobat_ left
[10:28] <Xliff> moon-child: Thanks for that
[10:29] *** Xliff left
[10:30] *** Xliff joined
[11:11] <lucs> patrickb: Ah, thanks for the 'D' explanation, and also for reminding me that command line help is available (I happened to be looking at the web page, and didn't think about doing a 'help').
[11:26] *** sono left
[11:32] *** dogbert17 joined
[11:33] *** MasterDuke joined
[12:02] *** reportable6 left
[12:02] *** guifa joined
[12:03] *** reportable6 joined
[12:19] <mykhal> oh duck, raku makes you butter(fly)
[12:20] * mykhal would have more doc fixes, but doesn't want to cause Geth commit report flood
[12:37] *** guifa left
[12:39] <mykhal> s/(\w+)\(\w+\)/($1)$2/
[12:39] <Altreus> it is quite a verbose report isn't it
[12:47] <mykhal> Altreus: may be subjective, I'm here for few days. I mind more that I don't know yet why my regex is incorrect in raku, it's something with escaped \( 's
[12:48] <mykhal>  .. ok, missing additional () pair :/ sorry
[12:55] <MasterDuke> mykhal: geth report floods are welcome, because that means things are getting better
[13:01] <Geth> ¬¶ doc: mykhal++ created pull request #3916: operator doc: (value, syntax) error fix
[13:01] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/pull/3916
[13:05] *** MasterDuke left
[13:06] *** MasterDuke joined
[13:40] <[Coke]> weird. I have two scripts that use 'use lib '../foo'; use MY::MODULE' - one works, the second says No such method 'CALL-ME' for invocant of type 'Str'
[13:40] <[Coke]> ... and it used to work. wtf.
[13:41] *** Eddward_ joined
[13:42] <[Coke]> weird. rm -rf ../foo/.precomp - now it works.
[13:42] <[Coke]> (on windows, using git bash)
[13:47] *** patrickb left
[13:48] *** patrickb joined
[13:51] *** patrickb left
[13:52] *** patrickb joined
[13:53] *** patrickb left
[13:54] *** patrickb joined
[13:55] *** patrickb left
[13:56] *** patrickb joined
[13:57] *** patrickb left
[13:58] *** patrickb joined
[14:02] *** patrickb left
[14:02] *** patrickb joined
[14:06] *** abraxxa left
[14:14] *** Tirifto joined
[14:16] *** patrickb left
[14:17] *** frost left
[14:17] *** patrickb joined
[14:17] *** MasterDuke77 joined
[14:18] *** MasterDuke left
[14:20] *** Sgeo joined
[14:20] *** dogbert11 joined
[14:20] *** dogbert17 left
[14:23] *** patrickb left
[14:23] *** patrickb joined
[14:24] *** melezhik joined
[14:24] <melezhik> .
[14:26] <[Coke]> -bash: .: filename argument required
[14:26] *** Xliff left
[14:27] *** Xliff joined
[14:27] *** abraxxa joined
[14:27] <[Coke]> m: e.IO.IO
[14:27] <camelia> rakudo-moar 5ecc8308f: ( no output )
[14:27] * [Coke] sensibly chuckles.
[14:32] *** patrickb left
[14:32] *** patrickb joined
[14:34] *** patrickb left
[14:34] *** patrickb joined
[14:38] *** patrickb left
[14:39] *** patrickb joined
[14:41] <mykhal> m: $*PERL.compiler
[14:41] <camelia> rakudo-moar 5ecc8308f: ( no output )
[14:43] *** patrickb left
[14:43] *** patrickb joined
[14:45] *** Juerd joined
[14:45] <Xliff> Is there a write-up on how to dynamically create a class and add it to a compunit?
[14:46] <Xliff> Is this possible in current Raku, or would this need RakuAST?
[14:49] *** patrickb left
[14:49] <moritz> what do you mean by "add it to a compunit"?
[14:50] <Xliff> Wouldn'
[14:50] *** patrickb joined
[14:50] <Xliff> I would want to have the dynamically created class become a part of the compunit it is defined in.
[14:50] <Xliff> Or could I just assign that class to a constant, couldn't I?
[14:51] <moritz> yes
[14:51] *** cbk joined
[14:51] <Xliff> moritz: So how do I go about creating a class type?
[14:52] <Xliff> And then creating the constant that goes with it
[14:53] <moritz> see https://docs.raku.org/type/Metamodel::ClassHOW if you want to create a class
[14:53] <moritz> call new_type to create the class
[14:53] <moritz> add_method to add methods
[14:53] <moritz> etc
[14:53] <moritz> in the end, call compose
[14:54] <Xliff> OK.
[14:54] <moritz> and assing it to a constant just  constant MyClass = do { code that generates the class goes here }
[14:54] <moritz> and have the class be the last expression
[14:54] <moritz> or
[14:54] <Xliff> Yes, but the constants are also created dynamically.
[14:54] <Xliff> Which means their names are going to come from a string
[14:55] <Xliff> And I want it to behave as if they were statically defined.
[14:55] <moritz> then you probably need to add them to the symbol table
[14:55] <Xliff> Which means no sigil.
[14:55] <moritz> not with the "constant" declarator
[14:55] <Xliff> Is there another way?
[14:55] <moritz> why do you want another way?
[14:55] <Xliff> Can I dynamically create a sigil-less identifier and package that with a compunit?
[14:56] <moritz> ::{$name} = 42
[14:56] <Xliff> So I want to dynamically create "myType" from data. And then use it in code like "my myType $a .= new"
[14:57] <moritz> that's how I understood your question
[14:57] <Xliff> OK. Thanks. I appreciate the advice. I just need that last piece, I think.
[14:57] <moritz> the thing is, the code that wants to use myType needs to know myType at *its* compile time
[14:57] <moritz> so you could have at the top of the usage a "use TypeGenerator;"
[14:58] <moritz> and that uses and compiles TypeGenerator, which could dynamically generate the types
[14:58] <moritz> (the nesting of run time and compile time can be confusing at times)
[14:58] <Xliff> Actually, I was hoping I could create these at BEGIN time, serialize them in .precomp, then use them like regular types at runtime.
[14:59] <moritz> that might work as well
[14:59] <Xliff> All of the data required to create these types exists at compile time.
[14:59] <Xliff> I just don't want to have to break them down and create them by hand, if possible.
[15:00] <moritz> caveat: all my meta model hacking days are years in the past, so stuff might have changed (but probably not for the worse :D)
[15:00] <Xliff> Take this for example. I have this exemplar class as: "class DialogClassPart is repr<CStruct> is export { has XtPointer $.extension; }"
[15:01] <lucs> patrickb: As documented, I placed in .zshrc the ÔΩ¢eval "$(/shome/lucs/rakubrew/bin/rakubrew init Zsh)"ÔΩ£ line, but unfortunately, .zshrc is not sourced when a shell is launched from a script, so in that case, the PATH is not adjusted and raku is not found.
[15:01] <Xliff> However there are more distinct classes that look exactly the same, just with a different name.
[15:01] <Xliff> So there's: GripClassPart, ListClassPart, MenuButtonClassPart, PannerClassPart, etc...
[15:01] <lucs> patrickb: Any special reason that line wouldn't be better placed in .zshenv?
[15:01] *** Juerd left
[15:01] <Xliff> All with the same definition.
[15:01] <lucs> (Appears to work when it's there.)
[15:02] <Xliff> Is there a way I can create all of those classes from the first one via nqp or meta programming?
[15:03] *** Juerd joined
[15:04] <melezhik> how can I refer to `#` in regexp by code?
[15:04] <moritz> Xliff: I have too little up-to-date experience to tell
[15:04] <moritz> melezhik: I don't understand the question
[15:05] <melezhik> I want to say `"# hello" ~~ /'#'/` but I can't use `#` in regexp literally 
[15:05] <Xliff> moritz: OK, fair enough. Still, your advice has been invaluable. Have any idea who else I should ask?
[15:05] <moritz> m: say '# hello' ~~ /'#'/
[15:05] <camelia> rakudo-moar 5ecc8308f: ( no output )
[15:05] <patrickb> lucs: I'm not that familiar with zsh and when which of those files is sourced. rakubrew is fine with being initialized multiple times. So it doesn't hurt to put it in a script that is potentially sourced more than once.
[15:06] <moritz> melezhik: the bot seems to be b0rked, /'#'/ seems to work just fine for me
[15:06] <melezhik> I'd like to have an equivalent  regexp detention without `#` sign
[15:06] <moritz> \c[NUMBER SIGN] ?
[15:07] <moritz> \c[NUMBER SIGN] ?
[15:07] <melezhik> yeah,  something like that, thanks!
[15:07] <patrickb> IIRC The docs now say to use .bashrc instead of .bash_profile for the same reason. (I think .bashrc is called on every new (sub)shell, while .bash_profile is called less often. Or something along those lines.)
[15:08] <patrickb> lucs: So .zshenv is called more often than .zshrc?
[15:08] *** Juerd left
[15:10] *** patrickb left
[15:10] *** patrickb joined
[15:12] <lucs> It's called when a script shells out, contrary to .zshrc.
[15:12] <patrickb> lucs: Ah, so it might actually make sense to add it to both?
[15:12] <patrickb> have to leave for a bit...
[15:13] *** patrickb left
[15:15] <lucs> patrickb: I believe having it only in .zshenv is sufficient (like perlbrew does), but I'm not sure how to test it adequately.
[15:15] <tellable6> lucs, I'll pass your message to patrickb
[15:16] <Xliff> moritz: TMTOWTDI -- I used this to solve the use case I mentioned to you...
[15:16] <Xliff> grep ClassPart Structs.pm6 | grep has | cut -d\  \-f2 | sort | uniq | raku -ne 'print "class { $*IN.lines[0].chomp } is repr<CStruct> is export \{\n  has XtPointer \$.extension;\n\}\n\n"'
[15:20] *** lucasb joined
[15:23] *** lucasb left
[15:26] *** patrickb joined
[15:30] <lucs> patrickb: From my notes: https://gist.github.com/lucs/c321819d1cc126501f6b41a63b6cf0d0
[15:32] <patrickb> lucs: OK. So .zshenv seems like the file to aim for.
[15:32] <tellable6> 2021-07-15T15:15:35Z #raku <lucs> patrickb: I believe having it only in .zshenv is sufficient (like perlbrew does), but I'm not sure how to test it adequately.
[15:32] <lucs> Yeah, pretty sure that's the ticket.
[15:33] *** Juerd joined
[15:34] *** stoned75 left
[16:16] *** phogg left
[16:16] *** squashable6 left
[16:17] *** Juerd left
[16:18] *** squashable6 joined
[16:18] *** Juerd joined
[16:21] <Geth> ¬¶ rakubrew.org: 763db71315 | (Patrick B√∂ker)++ | 2 files
[16:21] <Geth> ¬¶ rakubrew.org: Provide instructions for how to work around MacOS' security limitations
[16:21] <Geth> ¬¶ rakubrew.org: 
[16:21] <Geth> ¬¶ rakubrew.org: Fixes #34
[16:21] <Geth> ¬¶ rakubrew.org: review: https://github.com/Raku/rakubrew.org/commit/763db71315
[16:21] <Geth> ¬¶ rakubrew.org: b12b294f33 | (Patrick B√∂ker)++ | Containerfile
[16:21] <Geth> ¬¶ rakubrew.org: Bump Raku to 2021.04
[16:21] <Geth> ¬¶ rakubrew.org: review: https://github.com/Raku/rakubrew.org/commit/b12b294f33
[16:21] <Geth> ¬¶ rakubrew.org: e9eda7412a | (Patrick B√∂ker)++ | resources/homepage.md.tmpl
[16:21] <Geth> ¬¶ rakubrew.org: Add/update the documentation for `home` and `list-available`
[16:21] <Geth> ¬¶ rakubrew.org: review: https://github.com/Raku/rakubrew.org/commit/e9eda7412a
[16:23] *** stoned75 joined
[16:24] *** MasterDuke77 left
[16:26] <patrickb> vrurg: Can you confirm, that putting the rakubrew initialization in `.zshenv` makes more sense compared to the current `.zshrc`?
[16:31] *** Juerd left
[16:38] <Geth> ¬¶ App-Rakubrew: dc2b6b9bd2 | (Patrick B√∂ker)++ | 2 files
[16:38] <Geth> ¬¶ App-Rakubrew: By suggesting to add the hook to `.zshenv` instead of `.zshrc`.
[16:38] <Geth> ¬¶ App-Rakubrew: 
[16:38] <Geth> ¬¶ App-Rakubrew: It seems as `.zshenv` is available even in scripts, while
[16:38] <Geth> ¬¶ App-Rakubrew: `.zshrc` things are unavailable to scripts.
[16:38] <Geth> ¬¶ App-Rakubrew: 
[16:38] <Geth> ¬¶ App-Rakubrew: See https://web.archive.org/web/20210226033246/https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/
[16:38] <Geth> ¬¶ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/dc2b6b9bd2
[16:43] *** stoned75 left
[17:12] *** jess left
[17:15] *** Juerd joined
[17:32] *** MasterDuke joined
[17:50] *** patrickb left
[17:54] *** cbk left
[17:56] *** patrickb joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:11] *** MasterDuke left
[18:12] *** cbk joined
[18:16] *** MasterDuke joined
[18:19] *** cbk left
[18:20] *** cbk joined
[18:30] *** cbk left
[18:32] *** cbk joined
[18:37] <Geth> ¬¶ doc: bbb7c27854 | (Michal Bozon)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/operators.pod6
[18:37] <Geth> ¬¶ doc: operator doc: (value, syntax) error fix
[18:37] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/bbb7c27854
[18:37] <Geth> ¬¶ doc: 76e29aa76c | (Michal Bozon)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Language/operators.pod6
[18:37] <Geth> ¬¶ doc: .. fixed excesive space
[18:37] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/76e29aa76c
[18:37] <linkable6> Link: https://docs.raku.org/language/operators
[18:47] *** cbk left
[18:47] *** cbk joined
[18:57] *** notna joined
[18:58] *** linkable6 left
[18:58] *** linkable6 joined
[19:05] <mykhal> one can wonder if infix methodop can be done, stackoverflow.com/q/68399295
[19:27] *** squashable6 left
[19:27] *** squashable6 joined
[19:30] <Geth> ¬¶ Raku-Steering-Council/main: d6e69053a3 | (Elizabeth Mattijsen)++ | README.md
[19:30] <Geth> ¬¶ Raku-Steering-Council/main: Add current members to README
[19:30] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/d6e69053a3
[19:33] <Geth> ¬¶ Raku-Steering-Council/main: c854b84113 | (Elizabeth Mattijsen)++ | README.md
[19:33] <Geth> ¬¶ Raku-Steering-Council/main: Oops, fixed copy-pasto
[19:33] <Geth> ¬¶ Raku-Steering-Council/main: 
[19:33] <Geth> ¬¶ Raku-Steering-Council/main: Sorry, Daniel  :-)
[19:33] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/c854b84113
[19:34] *** Geth left
[19:35] *** Geth joined
[20:16] *** cbk left
[20:19] *** Xliff left
[20:19] *** notna left
[20:24] *** cbk joined
[20:56] *** cbk left
[20:57] *** linkable6 left
[20:59] *** linkable6 joined
[21:06] *** patrickb left
[21:20] *** RandalSchwartz joined
[22:20] *** committable6 left
[22:20] *** greppable6 left
[22:20] *** notable6 left
[22:20] *** releasable6 left
[22:20] *** bloatable6 left
[22:20] *** tellable6 left
[22:20] *** shareable6 left
[22:20] *** sourceable6 left
[22:20] *** benchable6 left
[22:20] *** evalable6 left
[22:20] *** statisfiable6 left
[22:20] *** coverable6 left
[22:20] *** bisectable6 left
[22:20] *** linkable6 left
[22:20] *** squashable6 left
[22:21] *** quotable6 left
[22:21] *** unicodable6 left
[22:21] *** reportable6 left
[22:21] *** nativecallable6 left
[22:21] *** benchable6 joined
[22:21] *** coverable6 joined
[22:21] *** statisfiable6 joined
[22:21] *** bisectable6 joined
[22:22] *** squashable6 joined
[22:22] *** greppable6 joined
[22:22] *** notable6 joined
[22:22] *** unicodable6 joined
[22:22] *** bloatable6 joined
[22:22] *** evalable6 joined
[22:23] *** tellable6 joined
[22:23] *** sourceable6 joined
[22:23] *** releasable6 joined
[22:23] *** quotable6 joined
[22:23] *** linkable6 joined
[22:23] *** reportable6 joined
[22:23] *** nativecallable6 joined
[22:23] *** shareable6 joined
[22:24] *** committable6 joined
[22:31] <lucs> Problem installing Inline::Perl5 :
[22:31] <lucs> https://gist.github.com/lucs/9fdbad93fcbc9e0deb33efd62b5d5a17
[22:34] <[Coke]> lucs: do you have perl5 installed?
[22:34] <lucs> Yep
[22:34] <[Coke]> if so: maybe it's too old. Or maybe you don't have the dev version installed if you installed it with a package.
[22:34] <lucs> In the PATH
[22:34] <lucs> Um, I perlbrewed a 5.34.0.
[22:35] <[Coke]> Did you: perlbrew install perl-stable -Duseshrplib ?
[22:35] <[Coke]> (ish)
[22:35] <lucs> Installed with the -Duseshrplib, yes
[22:36] <[Coke]> ok. That's all the help I have, sorry. :)
[22:36] <lucs> Ok, thanks.
[22:37] <lucs> ‚ñ∏ $PERLBREW_ROOT/bin/perlbrew install perl-5.34.0 -Duseshrplib -Dusemultiplicity
[22:41] <lucs> And I installed a 2021.06 rakudo/moar. 
[22:44] <lucs> (followed by a  ‚ñ∏ rakubrew build-zef )
[22:46] *** phogg joined
[23:46] *** linkable6 left
[23:46] *** evalable6 left
[23:47] *** linkable6 joined
[23:48] *** evalable6 joined
[23:52] *** jgaz joined
