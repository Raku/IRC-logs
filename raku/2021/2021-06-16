[00:02] *** reportable6 left
[00:06] *** reportable6 joined
[00:36] <Geth> ¬¶ ecosystem: stuart-little++ created pull request #593: Add Data::Tree to ecosystem
[00:36] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/pull/593
[00:37] *** pierrot_ is now known as pierrot
[00:37] <xinming> m: 
[00:37] <xinming> class C is Supplier { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } } C.new(:sources[1,2,3]);
[00:37] <xinming> m: class C is Supplier { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } } C.new(:sources[1,2,3]);
[00:37] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3D (:@!sources) { @!sources.raku.say; } }7‚èè5 C.new(:sources[1,2,3]);‚ê§    expecting any of:‚ê§        infix‚ê§       ‚Ä¶¬ª
[00:37] <xinming> m: class C is Supplier { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } }; C.new(:sources[1,2,3]);
[00:37] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´[]‚ê§¬ª
[00:38] <xinming> m: class A { }; class B is A { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; }; B.new(:sources[1,2]);
[00:38] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3urces.raku.say; }; B.new(:sources[1,2]);7‚èè5<EOL>‚ê§¬ª
[00:38] <xinming> m: class A { }; class B is A { has @.sources; submethod BUILD (:@!sources) { @!sources.raku.say; } }; B.new(:sources[1,2]);
[00:38] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´[1, 2]‚ê§¬ª
[00:39] <xinming> So, In these 2 examples, why will the class inherited from Supplier doesn't receive the @!sources, but classes we created manually work, is this a bug?
[00:44] <guifa> codesections: that‚Äôs effectively recreating the old wantarray from the perl era, just on steroids :-)
[00:47] <guifa> xinming: not all classes will call BUILD / TWEAK for subclasses.  I forget exactly why but I remember having some issues with that when trying to subclass Hash
[00:48] <guifa> Err, no, that‚Äôs with it not being called.  Yours is definitely being called
[00:49] <xinming> yea, seems args are removed when calling subclasses.
[00:49] <xinming> so, I'd think it's a bug.
[00:49] <guifa> m: class C is Supplier { has @.sources; submethod BUILD (|c) { c.raku.say; } }; C.new(:sources[1,2,3]);
[00:49] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´\(:taplist(Supplier::TapList.new))‚ê§¬ª
[00:49] <xinming> Ok, so we know the reason.
[00:50] <guifa> should be an easy fix then.  /me checks out the code
[00:51] <guifa> https://github.com/rakudo/rakudo/blob/168da39ae24b84f78525280a8d6750dd3cf1a176/src/core.c/Supplier.pm6#L99
[00:51] <guifa> I suppose that should be changed to something like
[00:52] <xinming> guifa: another question
[00:52] <xinming> guifa: https://dpaste.org/KHKW#L16,19,20,21
[00:53] <xinming> Yea, I just figured it's a bug
[00:53] <xinming> my latter question is, do we really need the `$!promise = ` part?
[00:54] <xinming> method new (\c) { self.bless(taplist => ..., |c) }
[00:54] <xinming> But I'm not sure wether it's a bug in Supplier code or designed to be like this
[00:55] <guifa> method new (:$taplist = TapList.new, |c) { self.bless: :$taplist, |c }¬†or something similar
[00:57] <xinming> guifa: could you please clarify the other questoin?
[01:00] <guifa> I admit, I don‚Äôt play around with asynch code as much.  Does the react block continue working even after the BUILD method has completed?  If so, and if you don‚Äôt really care about getting any other information (like when ‚Äîif ever ‚Äî¬†the react block finishes) then it‚Äôs probably not necessary
[01:04] <xinming> The reason I'm curious is, it worked without storing the promise into a var, so I'm afraid of it'll be gc'ed in the long run, or it'll probably be mem-leak in long run, that's why I got confused.
[01:06] <guifa> Alas, GC/mem management is also not a fort√© of mine
[01:09] *** holly_ left
[01:12] *** holyghost joined
[01:13] *** holly_ joined
[01:13] <xinming> Ok, thx anyway, will trouble someone else.
[01:13] <xinming> :-)
[01:13] <xinming> guifa: do you think the Supplier thing is a bug?
[01:13] <xinming> if so, I'll report it, or write patch?
[01:35] <guifa> xinming: it *might* be.  I think the problem is that the taplist uses a private class, so the question would be what to do when someone passes in a :taplist argument
[01:36] <guifa> Probably Supplier needs its own BUILD method that sets that property independently (which is effectively what it does).  I‚Äôd submit a ticket, and see what someone like jnthn thinks is the better fix to allow easier subclasses
[01:45] *** GoneDomattps is now known as domattps
[01:50] <xinming> guifa++
[01:56] *** holly_ left
[01:56] *** holly_ joined
[01:59] *** tejr left
[02:02] *** tejr joined
[02:07] *** holly_ left
[02:11] *** japhb joined
[02:23] *** frost joined
[02:28] *** frost left
[02:39] *** frost joined
[02:40] *** frost left
[02:40] *** frost joined
[02:40] *** frost left
[02:43] *** frost joined
[02:52] *** domattps is now known as GoneDomattps
[02:57] *** GoneDomattps is now known as domattps
[03:21] *** [1]holyghost joined
[03:21] *** [1]holyghost is now known as holly_
[03:25] *** Xliff joined
[03:44] <holly_> Hi Xliff, still busy on gtk ?
[03:54] * holly_ is writing the hollybot
[03:57] *** RandalSchwartz left
[04:27] *** abraxxa left
[04:32] *** vrurg joined
[04:34] *** vrurg_ left
[04:36] *** holyghost left
[04:55] *** Xliff left
[05:24] *** nebuchadnezzar joined
[05:24] *** domattps is now known as GoneDomattps
[05:29] *** GoneDomattps is now known as domattps
[05:38] <Geth> ¬¶ doc: a2e8cada00 | (Stoned Elipot)++ (committed by Juan Juli√°n Merelo Guerv√≥s) | doc/Type/Num.pod6
[05:38] <Geth> ¬¶ doc: Document Num.Str
[05:38] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/a2e8cada00
[05:38] <linkable6> Link: https://docs.raku.org/type/Num
[05:39] *** domattps is now known as GoneDomattps
[05:41] *** Doc_Holliwood joined
[05:45] *** tejr left
[05:45] *** tejr joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:06] *** xinming left
[06:06] *** xinming joined
[06:10] *** holly_ left
[06:30] *** xinming left
[06:30] *** xinming joined
[06:38] *** ufobat_ joined
[07:03] *** abraxxa joined
[07:08] *** abraxxa left
[07:08] *** abraxxa joined
[07:20] *** Doc_Holliwood left
[07:21] *** GreaseMonkey left
[07:25] *** greaser|q joined
[07:33] *** ufobat_ is now known as ufobat
[07:51] *** Sgeo left
[07:57] *** dakkar joined
[07:59] *** holyghost joined
[07:59] *** dakkar left
[07:59] *** dakkar joined
[08:11] *** synthmeat left
[08:13] *** synthmeat joined
[08:40] *** linkable6 left
[08:42] *** linkable6 joined
[08:45] *** greaser|q left
[08:45] *** greaser|q joined
[08:46] *** greaser|q is now known as GreaseMonkey
[09:01] *** kylese joined
[09:06] <Geth> ¬¶ ecosystem/master: 4 commits pushed by chirvasitua++, (Juan Juli√°n Merelo Guerv√≥s)++
[09:06] <Geth> ¬¶ ecosystem/master: f4dc1bc5af | Add Data::Tree to ecosystem
[09:06] <Geth> ¬¶ ecosystem/master: 3bb3cb56ba | initialize PR redo
[09:06] <Geth> ¬¶ ecosystem/master: 09fdb68960 | Add Data::Tree to ecosystem
[09:06] <Geth> ¬¶ ecosystem/master: b9098c6e65 | Merge pull request #593 from stuart-little/raku-data-tree
[09:06] <Geth> ¬¶ ecosystem/master: review: https://github.com/Raku/ecosystem/compare/766c4adbb9af...b9098c6e6548
[09:11] *** gordonfish- joined
[09:11] *** gordonfish left
[09:15] *** dogbert17 joined
[09:20] *** squashable6 left
[09:21] *** squashable6 joined
[09:22] *** abraxxa left
[09:27] *** abraxxa joined
[09:31] *** juanfra left
[09:31] *** RakuIRCLogger joined
[09:31] *** demostanis[m] left
[09:32] *** abraxxa left
[09:33] *** juanfra joined
[09:38] *** demostanis[m] joined
[09:38] *** AlexDaniel joined
[09:38] *** cnx joined
[09:38] *** tyil[m] joined
[09:38] *** ComplYue[m] joined
[09:38] *** CIAvash joined
[10:10] *** xinming_ joined
[10:12] *** xinming left
[10:13] <xinming_> in an object, we have  `start react { ... }`  block, and that async event handler worked fine, but I'm curious will this cause memory leak?
[10:14] <xinming_> IIRC, I thought that `start react { ... }` returns a promise, when that promise go out of scope, it should be gc'ed
[10:16] <codesections> I haven't done a whole lot in that area, but that sounds correct to me
[10:16] <codesections> m: my $p = start { react { }}; say $p; say $p.status
[10:16] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Kept)‚ê§Kept‚ê§¬ª
[10:30] <xinming_> codesections: something like.
[10:31] <xinming_> m: sub t () { start react { }; "hello"; }; t().say;
[10:31] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´hello‚ê§¬ª
[10:32] <xinming_> You see, the `start react { };` here is not stored in var, but it will work in background, So I'm quite curious wether it'll cause mem-leak, or in the long run, the code will be gc'ed, and cause unexpected behavior.
[10:35] <moon-child> it will be gc'd
[10:36] <moon-child> whether you store it in a variable or not has no bearing on that
[10:36] <moon-child> (actually, storing it in a variable can only cause it to _not_ be GCed)
[10:36] <xinming_> moon-child: then, the code in `start react { }` will result unexpected behavior, so we shouldn't do this, right?
[10:37] <xinming_> We store the `start react { }` in a block somewhere
[10:41] <moon-child> start react {} is fine
[10:41] <moon-child> nothing wrong with it
[10:43] <Voldenet> `start react {}` is a fine way to mess up error handling
[10:45] <Voldenet> but otherwise it will work
[10:47] *** Doc_Holliwood joined
[10:51] <Voldenet> `start react {}` will cause memleaks in cases like `my \s = Supplier.new; start react { whenever s.Supply {} };`
[10:54] <codesections> How do type captures for return values work?  I expected the below to compile: 
[10:54] <codesections> m: sub f(::T $a --> T) { $a } f 42
[10:54] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3sub f(::T $a --> T) { $a }7‚èè5 f 42‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statemen‚Ä¶¬ª
[10:54] <codesections> m: sub f(::T $a --> T) { $a }; f 42
[10:54] <camelia> rakudo-moar 168da39ae: OUTPUT: ¬´Type check failed for return value; expected T but got Int (42)‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[10:55] <lizmat> I think there's an issue for this already, I sorta expect this to be fixed in the RakuAST branch
[10:55] <codesections> lizmat++ Thanks, I thought I was just missing something 
[10:56] <lizmat> actually, I think the error message is also wrong, or it could be an indication of the issue
[10:59] <xinming_> Voldenet: if it's not referenced, how will raku know the `start react { }` thing is still in "use"? is `start react { }` block won't be removed?
[11:02] *** tejr left
[11:02] *** tejr joined
[11:03] <lizmat> xinming_: please realize that start react whenever and friends are just syntactic sugar for setting up a bunch of internal objects using UPPERCASE is implementation-detail subs and setting up various dynamic variables
[11:04] <lizmat> pretty sure there's something in there that will keep things alive even though from the syntax you might think it doesn't
[11:04] *** sono left
[11:05] *** abraxxa joined
[11:10] *** abraxxa left
[11:10] *** abraxxa joined
[11:20] *** squashable6 left
[11:21] *** squashable6 joined
[11:41] *** kylese left
[11:43] *** esh left
[11:45] *** esh joined
[11:45] *** Ulti_ is now known as Ulti
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:17] *** yewscion_ left
[12:21] *** ctilmes joined
[12:23] <ctilmes> alpine linux 3.14.0 released, includes rakudo 2021.05, just 'apk add rakudo'
[12:24] <El_Che> ctilmes++
[12:33] <lizmat> whee!  :-)
[12:51] *** kakadzhun joined
[12:53] <tyil> nice
[12:58] *** Doc_Holliwould joined
[13:00] *** RandalSchwartz joined
[13:02] *** Doc_Holliwood left
[13:09] <xinming_> lizmat: I understand that, that's why I feel, if we have bunch of internal objects out there, Does it mean the memory will leak over time? as I'm trying to do something that may dynamically call `start react { ... }` over time.
[13:22] <lizmat> it shouldn't  :-)
[13:22] <moritz> there will be memory and CPU used for every task you start with 'start'. Do these tasks terminate, eventually?
[13:33] *** lizmat left
[13:34] *** lizmat joined
[13:37] <xinming_> moritz: It will, the react will finally have `done();` be called, I just got worried about without var, the promise will be gc'ed, and so will react block, then in the long run, the react will stop working.
[13:37] <xinming_> well, I'll use it anyway, ram is cheap.
[13:45] *** Guest81 joined
[13:50] *** jrjsmrtn_ joined
[13:52] *** Guest81 left
[13:54] *** gordonfish- is now known as gordonfish
[14:02] *** jrjsmrtn_ is now known as _jrjsmrtn
[14:04] *** Henry151 left
[14:09] *** Henry151 joined
[14:10] *** Henry151 left
[14:11] *** Henry151 joined
[14:15] *** GoneDomattps is now known as domattps
[14:29] *** cbk joined
[14:32] *** Sgeo joined
[14:34] *** Xliff joined
[14:39] *** ufobat_ joined
[14:42] *** ufobat left
[14:51] *** Henry151 left
[14:52] *** Henry151 joined
[14:53] *** Henry151 left
[14:55] *** Henry151 joined
[14:56] *** morayj joined
[14:59] *** Henry151 left
[14:59] *** Henry151 joined
[14:59] *** Henry151 left
[15:03] *** Henry151 joined
[15:15] *** b2gills left
[15:19] *** kakadzhun left
[15:28] *** swaggboi left
[15:45] <Xliff> m: my $a = Mu; say "Hi" unless $a =:= Mu
[15:45] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Hi‚ê§¬ª
[15:45] <Xliff> Hun?!?
[15:45] <Xliff> m: my $a = Mu; say "Hi" unless Mu =:= $a
[15:45] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Hi‚ê§¬ª
[15:45] <Xliff> m: my $a = Mu; say "Hi" unless Mu === $a
[15:45] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[15:46] <cnx> what is =:=?
[15:46] <Xliff> container equality
[15:46] <cnx> thanks
[15:46] <Xliff> Which... in the case of Mu, doesn't seem to work.
[15:47] <Xliff> m: my $a = Any; say $a =:= Any
[15:47] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´False‚ê§¬ª
[15:47] <Xliff> m: my $a = Any; say ($a =:= Any)
[15:47] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´False‚ê§¬ª
[15:47] <Xliff> m: my $a = Any; say ($a === Any)
[15:47] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´True‚ê§¬ª
[15:47] <Xliff> m: my $a = Mu; say ($a === Mu)
[15:47] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[15:49] *** Doc_Holliwould left
[15:49] <codesections> m: my $a := Mu; say $a =:= Mu; # Is it just the Scalar getting in the way?
[15:49] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´True‚ê§¬ª
[15:50] *** Xliff left
[15:50] *** swaggboi joined
[15:51] <codesections> the docs say "Returns True if both arguments are _bound_ to the same container" (https://docs.raku.org/routine/=:=), so I think that's it
[15:52] <dakkar> codesections: I guess so
[15:53] <dakkar> m: my \a := Mu; say a =:= Mu
[15:53] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´True‚ê§¬ª
[15:53] <dakkar> then again, it said "true" in your case as well‚Ä¶
[15:53] <dakkar> m: my \a := Mu; say a =:= Int
[15:53] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´False‚ê§¬ª
[15:53] <dakkar> (just to check‚Ä¶)
[15:54] <codesections> (fyi, `my \a := Mu` is redundant ‚Äì \a binds by default, so `my \a = Mu` is the same thing.  But $a assigns by default, so you need the := bind operator to bind)
[15:55] <codesections> m: my \a = Mu; say a =:= Mu
[15:55] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´True‚ê§¬ª
[15:55] <dakkar> thank you! that's a bit of raku I haven't needed yet, so I'm not familiar
[16:04] <dakkar> ok, now I've actually read the whole conversation‚Ä¶
[16:04] <dakkar> the error message for `== Mu` is LTA, though
[16:05] <dakkar> m: 1==Mu
[16:05] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "==" in expression "1==Mu" in sink context (line 1)‚ê§Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[16:05] <dakkar> m: say 1==Mu
[16:05] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[16:05] <dakkar> m: say 1===Mu
[16:05] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[16:05] <dakkar> (I know why it does that, still LTA)
[16:05] *** holly_ joined
[16:08] <codesections> The fix for that would be pretty easy, if you're interested: just add a multi infix:<===>(Mu \a, Mu \b) candidate in ./core.c/Mu.pm6 that dies with an error (similar to how List.push does).  I'm sure a PR like that would be appreciated :D
[16:13] <Altreus> now it's getting to the time I'm feeling overextended today :/
[16:13] <moritz> it also kills autothreading
[16:13] <Altreus> might try a nap and see how I feel
[16:13] <dakkar> moritz: I suspected that
[16:13] <dakkar> (also, shouldn't Mu===Mu be True?)
[16:13] <codesections> even if it doesn't match?
[16:16] <moritz> autothreading works as a fallback to regular dispatch
[16:16] <moritz> since Junction ~~ Mu, a dispatch to (Mu, Mu) works, and so there is no fallback
[16:17] <moritz> m: multi a($x, $y) { say "($x, $y)" }; a(any(1, 2), 5)
[16:17] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´(1, 5)‚ê§(2, 5)‚ê§¬ª
[16:17] <codesections> oh, I didn't realize that. Hmm... nvm, not as easy as I was thinking.  Sorry about that!
[16:17] <moritz> m: multi a($x, $y) { say "($x, $y)" }; multi a(Mu, Mu) { say "moooh"};  a(any(1, 2), 5)
[16:17] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´moooh‚ê§¬ª
[16:18] <dakkar> moritz: so there's no decent way to have 1==Mu and 1===Mu be False, and Mu===Mu be True? (plus all the other relational ops)
[16:18] <dakkar> (short of special-casing in the dispatcher)
[16:20] <moritz> not if you want === to autothread
[16:20] <moritz> (I still think that === shouldn't autothread, as I thought when we first discussed this. Sadly I couldn't convince Larry)
[16:21] <dakkar> I can argue it both ways‚Ä¶
[16:24] <dakkar> this is one case where a *rakudo* (not raku) documentation suite would be useful
[16:24] <dakkar> so we could document this apparent weirdness
[16:24] <dakkar> (which, technically, is a side-effect of the way rakudo works, not exactly required/implied by the raku spec)
[16:26] <moritz> === not autothreading and the way the dispatcher works are very much part of raku, and tested to the death in roast
[16:26] <moritz> (at least that was the case back in the days...)
[16:27] <dakkar> yes
[16:27] <dakkar> I mean, 1===Mu throwing instead of returning False, is *probably* not in roast ‚ò∫
[16:28] <dakkar> (and it could be made to return False, it's just a bad idea to do so in rakudo's dispatcher, AIUI)
[16:29] <dakkar> (yes, that "just" is doing a lot of work there)
[16:31] <dakkar> anyway, that's the end of my workday, I'm disconnecting now
[16:36] *** dakkar left
[16:36] *** swaggboi left
[16:50] *** swaggboi joined
[16:51] <[Coke]> o/
[16:52] <codesections> \o
[16:54] <guifa> o/
[16:55] <guifa> \o/ (o) (o( /o\
[16:55] <guifa> lizmat: any tips on making nqp code not look ‚Ä¶¬†ugly as sin?
[16:58] <codesections> guifa: I'm not liz (obviously!) but I found that thinking of it as a Lisp helped a bit
[16:58] * guifa doesn‚Äôt have any lisp experience haha
[16:59] *** ufobat_ left
[17:00] <guifa> Do you just do lots of extra line breaks with indentation to make relations easier?  
[17:03] <codesections> yeah, and with more horizontal alignment between expressions. Somewhat like https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org#sequencep, though not 100%
[17:03] <guifa> Is there any clean way to mimic a
[17:04] <guifa> while my $foo = some-call {¬†‚Ä¶¬†} ?
[17:05] *** morayj left
[17:06] *** morayj joined
[17:06] *** stoned75 left
[17:06] <[Coke]> (rakudo docs) not sure what JJ's thoughts are, but it seems reasonable to me to have [rakudo] only blocks in the docs to describe things that rakudo is doing that may not be "canon", but are nonetheless expected. I'm sure there are some ad hoc ones scattered through the docs already
[17:07] <[Coke]> but if there's a need, put together a list on a wiki page on the rakudo/rakudo repo to start.
[17:09] <guifa> Actually, the more I‚Äôm working on this, the more I‚Äôm curious just how complex I should go with DateTime formatting
[17:09] <codesections> m: use nqp; my @a = ^5; nqp::while(nqp::stmts((my $foo = @a.pop)), say "foo was $foo") # Does something like this work?
[17:09] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´foo was 4‚ê§foo was 3‚ê§foo was 2‚ê§foo was 1‚ê§¬ª
[17:10] <guifa> codesections:  huh, I swear I tried that last night and it didn‚Äôt work. But in my defense it was late
[17:10] <codesections> (That's a hybrid of nqp and Raku -- in a pure nqp setting, it'd be a bit more verbose)
[17:12] <guifa> The other thing I miss is if chaining / given/when
[17:15] <guifa> I‚Äôve got a value that can be anything from, say, 0-8, and I‚Äôve tried doing sequential checks with returns, and also divide and conquer style if < 4, if < 2, if == 0, and that just gets ugly fast, even if more optimal.  
[17:16] <guifa> I thought about just making an array of subs to act as a jump table of sorts, but I dunno, maybe that‚Äôs overly complicating it
[17:18] <codesections> Yeah, I've noticed that a lot of the nqp in Rakudo uses nested ternary operators, though ymmv on how readable that is (and I think there might have been a perf. reason for that as well?)
[17:19] <codesections> e.g., https://github.com/rakudo/rakudo/blob/master/src/core.c/traits.pm6#L333-L344
[17:19] <guifa> Ah that is a good bit more readable
[17:19] <guifa> I should have thought of that
[17:22] <codesections> well, I know some people hate nested ternaries, but I agree that it's easier to follow here
[17:23] <guifa> One GNU variant also has an interesting modifier for formatting: flip casing.
[17:23] <ugexe> ternary doesnt have to create a new lexical scope so id expect it to be faster than any construct using blocks
[17:24] <guifa> ugexe++ makes sense, I know that‚Äôs one of the reason‚Äôs that postfix loops are a smidgen faster, right?
[17:25] <ugexe> i cant say for sure thats why, but i would expect it to contribute yeah
[17:26] <guifa> also F whoever in Gnu thought it would be a good idea for a flipped-case modifier.  
[17:28] <codesections> I admit that I've used it
[17:28] <guifa> Really?
[17:28] * guifa is legit interested, can‚Äôt think of when Foo -> fOO makes much sense
[17:30] <ugexe> easily create namespace collisions on case insensitive file systems
[17:32] <codesections> my current desktop displays the date with
[17:32] <codesections> m: say qx{date '+%a, %b %e %l:%M %#Z'}
[17:32] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Wed, Jun 16  7:32 cest‚ê§‚ê§¬ª
[17:32] <lucs> codesections: I don't indent those subsequent ternaries; it would like be indenting each new "elsif" in a series of such.
[17:33] <codesections> (actually, with the lowercase timezone flush against the hour)
[17:33] <guifa> codesections: yeah, that‚Äôs actually where it specifies the use.  But that makes more sense to have a lowercase modifier, than a flip case modifier
[17:34] <codesections> yeah, that's fair.  Someone over designed it -- I bet the goal was to avoid having two modifiers (for lower and upper), but they needlessly introduced state into _formatting_  
[17:34] <ugexe> maybe useful for a naive almost-right password detector. i think facebook uses something similar where you can enter your password but slightly wrong and it will work
[17:35] <guifa> Well, there *is* an upper case one though :-)
[17:35] <codesections> wait, really?  Ok, that's just bonkers 
[17:35] <guifa> m: say qx{date ‚Äò+%^a, %b %e %l:%M %#Z'}
[17:35] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´/bin/sh: -c: line 0: unexpected EOF while looking for matching `''‚ê§/bin/sh: -c: line 1: syntax error: unexpected end of file‚ê§‚ê§¬ª
[17:35] <ugexe> i think it was for entering passwords using T9 or some such
[17:35] <guifa> ugexe: yikes, does that still exist?  That sounds like it really opens up a potential space for guessing passwords
[17:36] *** holyghost left
[17:37] <guifa> m: say qx{date '+%a, %^b' }
[17:37] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´Wed, JUN‚ê§‚ê§¬ª
[17:37] <guifa> m: say qx{date '+%#a, %^b' }
[17:37] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´WED, JUN‚ê§‚ê§¬ª
[17:37] <ugexe> at facebook im not sure... T9 has sort of gone away. but many banking systems also did this (they would just store the T9 number of the password, so multiple passwords would work) but those are legacy systems and many might still do this crap
[17:38] <ugexe> i.e. if your password was just "a" then "a" "b" or "c" would all work
[17:38] <guifa> codesections: ^^ what's worse is that there's a lot of format commands that are semi-special cased, and it looks like # is one of them.  I might just say screw it, # is lower case, and make my life easier.  It's an extension of the standard, so I suppose I'm not obligaited to do it like everyone else if their way is stupid :-) 
[17:39] *** swaggboi left
[17:41] <codesections> wow. So, despite all that complexity, there isn't a way to get 'jun' as the output!
[17:45] <guifa> Yup.  Kind of crazy.  I think just using # for lc is probably best and just document it as a difference with GNU
[17:48] *** frost left
[17:50] *** swaggboi joined
[17:51] *** stoned75 joined
[18:02] *** holyghost joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:05] <Altreus> ok plan b since today is crap - gonna do the stream tomorrow instead and hopefully I'll feel better
[18:06] <Altreus> Gives me a bit more time to set this pesky environment up too
[18:06] <holly_> Altreus : take care
[18:07] <Altreus> :)
[18:23] *** eseyman left
[18:25] *** melezhik joined
[18:26] <melezhik> Colorizable started to produce a lot of warning under latest Rakudo version - https://gitlab.com/uzluisf/raku-colorized/-/issues/4 I wonder if this relates to Rakudo itself?
[18:27] *** Doc_Holliwood joined
[18:29] *** eseyman joined
[18:32] <MasterDuke> the warning is correct, doing .contains on a map is risky, https://gitlab.com/uzluisf/raku-colorized/-/blob/master/lib/Colorizable.rakumod#L154 and https://gitlab.com/uzluisf/raku-colorized/-/blob/master/lib/Colorizable.rakumod#L160 should be changed
[18:39] <melezhik> yeah, this is for the modules's author, I just use it ... thanks
[18:43] *** stoned75 left
[18:58] <melezhik> I golfed it - raku -e 'use Colorizable; my $s = "hello" but Colorizable; sat $s.yellow.bold '
[18:59] <melezhik> it happens only for this style of method invocation
[18:59] <melezhik> but not for `raku -e 'use Colorizable; my $s = "hello" but Colorizable; say $s.colorize(:fg(yellow), :mo(bold)) '`
[19:22] *** lgtaube left
[19:25] *** stoned75 joined
[19:38] *** lgtaube joined
[19:41] *** holly_ left
[19:58] *** holyghost left
[20:05] *** ctilmes left
[20:08] *** stoned75 left
[20:08] *** stoned75 joined
[20:10] <SmokeMachine> m: my $a = Mu; my $b := Mu; my \c = Mu; say $a =:= Mu; say $b =:= Mu; say c =:= Mu; say Mu =:= Mu
[20:10] <camelia> rakudo-moar db074a8bc: OUTPUT: ¬´False‚ê§True‚ê§True‚ê§True‚ê§¬ª
[20:13] *** stoned75_ joined
[20:13] *** stoned75 left
[20:13] *** stoned75_ is now known as stoned75
[20:15] *** sono joined
[20:18] <Geth> ¬¶ doc: 33c390bbcc | (Stoned Elipot)++ | doc/Type/Real.pod6
[20:18] <Geth> ¬¶ doc: Document Real.Str
[20:18] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/33c390bbcc
[20:18] <linkable6> Link: https://docs.raku.org/type/Real
[20:53] *** cbk left
[21:06] *** morayj left
[21:46] *** lgtaube left
[21:46] *** lgtaube joined
[22:09] *** abraxxa left
[22:30] *** holly_ joined
[22:31] *** Doc_Holliwould joined
[22:33] *** Doc_Holliwood left
[22:38] *** tyilanmenyn joined
[22:39] *** tyil left
[22:41] *** tyilanmenyn is now known as tyil
[23:05] *** Doc_Holliwould left
[23:55] *** Util_ left
