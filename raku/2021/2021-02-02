[00:16] *** JRaspass left
[00:25] <[Coke]> why not use %*ENV?

[00:25] <[Coke]> m: say %*ENV{HOSTNAME}

[00:25] <evalable6> [Coke], rakudo-moar 0a25b1260: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/rDetAVQbhA‚ê§Undeclared name:‚ê§    HOSTNAME used at line 1‚ê§‚ê§¬ª

[00:25] <[Coke]> m: say %*ENV<HOSTNAME> #oops

[00:25] <evalable6> [Coke], rakudo-moar 0a25b1260: OUTPUT: ¬´(Any)‚ê§¬ª

[00:25] <[Coke]> so, no hostname there, but that should work for you.

[00:28] <[Coke]> I may be misundestanding a sublety of your request, though

[00:31] *** squashable6 left
[00:35] *** squashable6 joined
[00:35] *** pecastro left
[00:42] <[Coke]> m: run('hostname', :out).out.slurp(:close) # getting hostname from command

[00:42] <evalable6> [Coke], rakudo-moar 0a25b1260: OUTPUT: ¬´¬ª

[00:42] <[Coke]> m: say run('hostname', :out).out.slurp(:close) # getting hostname from command

[00:42] <evalable6> [Coke], rakudo-moar 0a25b1260: OUTPUT: ¬´superserver‚ê§‚ê§¬ª

[00:42] <[Coke]> (you have to capture the output, get the IO object, and slurp the data (waiting for it to close first)

[00:47] *** aindilis left
[00:47] <elcaro> FWIW, on my CentOS server, when I type `env` at the shell, I see HOSTNAME, and `raku -e 'say %*ENV<HOSTNAME>'` works

[00:47] <elcaro> on my Ubuntu server, no HOSTNAME seen in `env` output, and hence no 'hostname' in %*ENV

[00:49] <elcaro> so it "works on my machine"... maybe check where your HOSTNAME var is being exported? is it under /etc/profile.d/* or /etc/bashrc or ~/.profile?

[00:50] <elcaro> if you can find out where it's being exported, maybe that will point towards why Raku isn't seeing it (or reveeal a bug)

[00:51] <elcaro> m: say qx[env].match(/HOSTNAME\S*/)

[00:51] <evalable6> elcaro, rakudo-moar 0a25b1260: OUTPUT: ¬´Nil‚ê§¬ª

[01:47] *** evalable6 left
[01:47] *** linkable6 left
[01:47] *** linkable6 joined
[01:48] *** evalable6 joined
[01:56] *** rindolf joined
[02:16] *** kvw_5_ joined
[02:18] *** rindolf left
[02:18] *** rindolf joined
[02:19] *** kvw_5 left
[02:22] *** Celelibi left
[02:36] *** gnufr33dom joined
[03:36] *** releasable6 left
[03:36] *** unicodable6 left
[03:36] *** bloatable6 left
[03:36] *** coverable6 left
[03:36] *** notable6 left
[03:36] *** tellable6 left
[03:36] *** sourceable6 left
[03:36] *** committable6 left
[03:36] *** evalable6 left
[03:36] *** bisectable6 left
[03:36] *** quotable6 left
[03:36] *** greppable6 left
[03:36] *** shareable6 left
[03:36] *** benchable6 left
[03:36] *** nativecallable6 left
[03:36] *** statisfiable6 left
[03:36] *** squashable6 left
[03:36] *** linkable6 left
[03:36] *** shareable6 joined
[03:36] *** benchable6 joined
[03:36] *** bisectable6 joined
[03:37] *** sourceable6 joined
[03:37] *** notable6 joined
[03:37] *** bloatable6 joined
[03:37] *** nativecallable6 joined
[03:38] *** quotable6 joined
[03:38] *** tellable6 joined
[03:38] *** evalable6 joined
[03:38] *** committable6 joined
[03:38] *** statisfiable6 joined
[03:38] *** coverable6 joined
[03:38] *** releasable6 joined
[03:38] *** unicodable6 joined
[03:39] *** linkable6 joined
[03:39] *** greppable6 joined
[03:39] *** squashable6 joined
[03:58] *** Garbanzo joined
[05:00] *** pilne left
[05:05] *** maggotbrain left
[05:06] *** maggotbrain joined
[05:06] *** aindilis joined
[05:06] *** brtastic joined
[05:06] *** maggotbrain left
[05:08] *** maggotbrain joined
[05:25] *** rindolf left
[05:46] *** tejr left
[05:46] *** tejr joined
[05:58] *** parabolize left
[06:13] *** xinming joined
[06:17] *** xinming_ left
[06:28] *** dudz joined
[06:29] *** rindolf joined
[06:31] *** __jrjsmrtn__ left
[06:31] *** _jrjsmrtn joined
[06:50] *** jmerelo joined
[06:55] *** ufobat_ joined
[07:09] *** wamba joined
[07:10] *** mightypork left
[07:10] *** ufobat_ left
[07:10] *** Garbanzo left
[07:10] *** mightypork joined
[07:16] *** eseyman joined
[07:29] *** ufobat joined
[07:43] *** Sgeo left
[07:46] <andinus> m: say "perl\nraku"

[07:46] <evalable6> andinus, rakudo-moar 0a25b1260: OUTPUT: ¬´perl‚ê§raku‚ê§¬ª

[07:46] <andinus>  m: say "perl\nraku".comb

[07:46] <evalable6> andinus, rakudo-moar 0a25b1260: OUTPUT: ¬´(p e r l ‚ê§ r a k u)‚ê§¬ª

[07:46] <andinus> how can i ask comb to not consider newline as a characters?

[07:47] <andinus> i just want <p e r l r a k u>

[07:48] *** sjm_uk joined
[07:49] <tyil> m: "perl\nraku".comb(/\w/).say

[07:49] <evalable6> tyil, rakudo-moar 0a25b1260: OUTPUT: ¬´(p e r l r a k u)‚ê§¬ª

[07:52] *** webstrand joined
[07:53] <andinus> m: "perl\nraku\n1234  \n0".comb(/\w/).say

[07:53] <evalable6> andinus, rakudo-moar 0a25b1260: OUTPUT: ¬´(p e r l r a k u 1 2 3 4 0)‚ê§¬ª

[07:53] <andinus> i see, thanks tyil

[08:04] *** aluaces left
[08:08] *** stoned75 left
[08:23] *** MasterDuke joined
[08:27] <andinus> i have defined a sub, can i add tests within the script for it?

[08:27] <andinus> so that i'm able to call it with : ./bin --test my-sub

[08:36] <MasterDuke> you can always manually do that by handling the --test flag in your script. you may also find https://www.codesections.com/blog/raku-unit-testing-with-conditional-compilation/ useful

[08:36] <gfldex> Is yellow considered the colour of warnings in most cultures?

[08:37] *** domidumont joined
[08:39] <andinus> i think so, yellow bg with black text

[08:39] <andinus> MasterDuk_e: i see, thanks

[08:43] *** Scimon joined
[08:45] *** dakkar joined
[08:49] *** aindilis left
[08:56] *** MasterDuke92 joined
[09:00] *** JRaspass joined
[09:00] *** MasterDuke left
[09:04] *** aluaces joined
[09:07] *** PimDaniel joined
[09:09] *** PavelB joined
[09:10] <PimDaniel> .tell Hi lizmat! How can i install locally your code  https://github.com/lizmat/List-AllUtils with dependencies?  , i need to play with it. Thank's in advance.

[09:10] <tellable6> PimDaniel, I'll pass your message to hi

[09:11] <PimDaniel> .tell lizmat! How can i install locally your code  https://github.com/lizmat/List-AllUtils with dependencies?  , i need to play with it. Thank's in advance.

[09:11] <tellable6> PimDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Tellable

[09:11] <PimDaniel> .tell lizmat Hi lizmat! How can i install locally your code  https://github.com/lizmat/List-AllUtils with dependencies?  , i need to play with it. Thank's in advance.

[09:11] <tellable6> PimDaniel, I'll pass your message to lizmat

[09:12] <Scimon> PimDaniel : Have you tried zef install List::AllUtils ? 

[09:12] * PimDaniel Scimon: YES : does not found anything. :(

[09:13] <Scimon> I'm running that now and it seems to be working fine.

[09:13] <Scimon> Just installed the dependencies.

[09:13] <PimDaniel> Not possible :)

[09:13] <PimDaniel> :)

[09:14] <Scimon> Yup it's worked maybe your zef install needs updated?

[09:14] <PimDaniel> I try again and give you the error!

[09:14] <PimDaniel> zip update?

[09:16] <Scimon> Good luck.

[09:16] <PimDaniel> Scimon: is there a way to install it into my user land?

[09:16] <MasterDuke92> PimDaniel: if you want to make modifications to https://github.com/lizmat/List-AllUtils and test them, you'll need to clone it, and then in the clone directory, run `zef install .`

[09:16] <PimDaniel> Because i need to play with it.

[09:17] <jmerelo> PimDaniel: maybe it's not yet in Modules.raku.org

[09:17] <MasterDuke92> or run whatever code you're using with -I path/to/your/clone's/lib

[09:17] <PimDaniel> MasterDuke : you reply to my question befor i ask! Goog guy!

[09:17] <Scimon> What MasterDuke92 said. Clone the repo (I'd fork it) then you can install it locally.

[09:19] <PimDaniel> I partially cloned it into /tmp dir but i cannot find the List-Util package on Github? 

[09:19] *** sena_kun left
[09:20] <Scimon> If you do `zef install --deps-only .` in the folder it should get the dependencies for you.

[09:20] <Scimon> Unless you want to modify List::Util as well?

[09:22] <PimDaniel> > if you do `zef install --deps-only .` in the folder : let us be clear into List-AllUtils cloned dir? f

[09:23] <Scimon> Yup

[09:23] *** sena_kun joined
[09:23] <Scimon> This should install all the dependencies.

[09:23] <PimDaniel> Scimon: Ok thank's , i give a try!

[09:24] <PimDaniel> zef install --deps-only => usage: .... :(

[09:25] <MasterDuke92> did you put ` .` at the end?

[09:25] <PimDaniel> Hooo nooooooo.  :( Sorry!

[09:29] <PimDaniel> It worked but Question: i see theses modules dependencies into .zef is it the place and the only place it installed it?

[09:30] <tyil> not a zef dev, but iirc it stores the dist in ~/.zef, but installs into ~/.raku

[09:31] <MasterDuke92> i believe that's the default. there is an option, something like '--install-to' if you want to change it

[09:32] <tyil> the only thing that saddens me about this is that neither raku nor zef respect XDG basedirs

[09:32] <PimDaniel> tyil and MasterDuke92 thank's. Yes look inside dirs, that's just curiosity because i do not really want to work on them.

[09:33] *** dakkar left
[09:33] <PimDaniel> Thank's to all of you, i'm less crazy than yesterday, i come back in one minute because i'm sure i'll be stucked since. :)

[09:34] *** dakkar joined
[09:38] *** PimDaniel left
[09:43] *** PimDaniel joined
[09:45] *** pecastro joined
[09:45] <PimDaniel> I have many modules installed into ~/.zef but i cannot use them : what is the operation to do for it?

[09:46] <PimDaniel> for sure i could use lib but  no :( RAKULIB nor because there are many PATHS!

[09:52] <MasterDuke92> if they've been installed then you shouldn't need to modify RAKULIB or your PATH. a simple `use foo;` should work

[09:56] <PimDaniel> MasterDuke: which path exactly? : i have a tree of libraries into .zef and i'll put my module main module into another local lib to play with it.

[09:57] <PimDaniel> if i had $HOME/.zef to rakulib is it sufficiant?

[09:57] <MasterDuke92> that shouldn't be necessary

[09:58] <PimDaniel> of is it $HOME/.zef/store ?

[09:58] <PimDaniel> s/of/or/

[09:58] <PimDaniel> or is it $HOME/.zef/store/<module1>:$HOME/.zef/store/<module2>, etc...?

[09:59] <MasterDuke92> if i understand what you're trying to do, you want to modify a module, and then use that modified module in some script? but the module you're modifying has some dependencies? if zef has installed those dependencies, you don't need to do anything with RAKULIB or PATH to use them

[10:00] <dakkar> also, installed modules go into ~/.raku/, not ~/.zef/

[10:00] <dakkar> in ~/.zef/ you have zef's own working space

[10:01] <PimDaniel> So why doesn't it work on my system?

[10:01] <dakkar> please read what I just wrote

[10:01] <dakkar> ~/.zef/ is *not* where installed modules go

[10:01] <dakkar> don't look there

[10:01] <dakkar> look it ~/.rake/

[10:01] <dakkar> sorry, ~/.raku/

[10:01] *** a3f joined
[10:01] <PimDaniel> i tried use File::Find and it hangs!

[10:01] <dakkar> or even better, `zef list --installed`

[10:02] <MasterDuke92> what isn't working? using the module you modified? or is it complaining that the dependencies aren't installed?

[10:02] <dakkar> PimDaniel: we don't have enough information to really help you

[10:02] <MasterDuke92> maybe it's just taking a long time to precompile the module, if it's the first time you're using it

[10:03] <dakkar> "first time after upgrading rakudo", because zef pre-compiles on installation

[10:03] <PimDaniel> zef list --installed returns File::Find:ver<0.1.1>, how do i import it?

[10:04] <dakkar> `use File::Find;`

[10:04] <PimDaniel> Doesn't work!

[10:04] <dakkar> please describe exactly what you do, and what happens

[10:04] <dakkar> "doesn't work" is rarely useful to people trying to help you

[10:05] <tyil> PimDaniel: take a step back, show an example of some code you're trying to run, and show us the error you're seeing

[10:05] <tyil> you can do this on StackOverflow too, if you want more space to properly outline your issue

[10:08] <PimDaniel> here is what i do : https://pastebin.com/A13QUBHM

[10:10] <MasterDuke92> is your ~/.perl6 a symlink to ~/.raku? or vice versa

[10:10] <dakkar> ok, that's a bug in zef

[10:11] <dakkar> it should list ~/.perl6 if rakudo doesn't look there

[10:11] <dakkar> I think you can `mv ~/.perl6 ~/.raku`

[10:11] <PimDaniel> NO my ~/.perl6 is a dir

[10:12] <PimDaniel> with thinks into it

[10:12] <dakkar> PimDaniel: have you noticed that rakudo shows you where it's looking for modules, and it's very clearly *not* looking in ~/.perl6 ?

[10:12] <dakkar> try renaming that directory to .raku

[10:14] <PimDaniel> but i yet have a .raku dir too

[10:15] <dakkar> oh joy

[10:15] <dakkar> only suggestion I have: delete ~/.perl6, re-install the modules you need

[10:15] <PimDaniel> so i'll rename .perl6 temporarily to nimportequoi and make a link to try...

[10:16] <dakkar> no

[10:16] <dakkar> *DELETE* it

[10:16] <dakkar> it's not used by anything, it confuses zef, and it confuses you

[10:16] <dakkar> get rid of it

[10:16] <PimDaniel> which one i delete? .perl6?

[10:16] <dakkar> yes

[10:16] <PimDaniel> ok for now i move it into /tmp/

[10:17] <dakkar> do whatever you want

[10:18] <PimDaniel> I'v got the same problem with simlink applied and .perl6 dir desapeared! :(

[10:19] <dakkar> I don't understand what that sentence means

[10:19] <dakkar> what symlink?

[10:19] <dakkar> nobody told you to create a symlink

[10:20] <PimDaniel> i made a simlink : ln -s .perl6  .raku like MasterDuke92 proposed to me.

[10:20] <MasterDuke92> PimDaniel: how did you install raku and zef?

[10:20] <dakkar> no, that symlink must not be there

[10:20] <dakkar> there must not be anything named ~/.perl6

[10:20] <PimDaniel> MasterDuke: dont't remenber how.

[10:20] <dakkar> MasterDuke92 *asked* if it was there, didn't tell you to create it

[10:21] <PimDaniel> Ok i remove it.

[10:21] <PimDaniel> Same problem :(

[10:21] <dakkar> have you re-installed all the modules you need?

[10:21] <dakkar> as I told you to?

[10:21] <PimDaniel> dakkar: YES. 

[10:21] <dakkar> ok

[10:22] <dakkar> I can't see what you're doing, so you have to tell me

[10:22] <dakkar> can you re-run `zef list --installed` and show us the output?

[10:23] <PimDaniel> The result is here : https://pastebin.com/A13QUBHM posted half an hour ago.

[10:23] <dakkar> ys

[10:23] <dakkar> but that was before you deleted ~/.perl6 and re-installed modules

[10:23] <dakkar> the output must be different now

[10:24] <PimDaniel> YES : only 2 lines. :(

[10:24] <dakkar> can you please show that output?

[10:25] <PimDaniel> https://pastebin.com/z0ETd6wY

[10:25] <dakkar> now install File::Find

[10:25] <dakkar> `zef install File::Find`

[10:26] <dakkar> (that's what I meant by "reinstall the modules you need")

[10:27] <PimDaniel> OK I don't need any perl6 seemlink? 

[10:27] <dakkar> no

[10:28] <dakkar> there must be nothing named ~/.perl6

[10:32] <PimDaniel> I installed File::Find zef install created a .perl6 dir.

[10:33] <dakkar> ugh

[10:33] <PimDaniel> I think i found the problem : my version of zef is Debian package one i thing not custom install raku.

[10:33] <Scimon> Ahhhh....

[10:33] <dakkar> yeah, I was going to ask what version of zef you were running

[10:33] <PimDaniel> i check that.

[10:33] <Scimon> It may not include cpan support.

[10:33] <dakkar> probably ancient, if it's the standard Debian stable package

[10:34] <PimDaniel> OK that's it!

[10:34] <dakkar> mixing system packages and self-compiled bits is always a bad idea

[10:36] <MasterDuke92> yeah, you should uninstall that zef package

[10:37] <PimDaniel> dakkar: yes but i discovering things, now how do i get zef for my custom installation?

[10:37] <dakkar> https://github.com/ugexe/zef follow these instructions

[10:37] <dakkar> *after* you uninstall the system zef

[10:38] <dakkar> (ignore the `rakubrew` bit on that page if you are not already using rakubrew to build your rakudo)

[10:38] *** brtastic left
[10:38] <PimDaniel> ok  thank's!

[10:40] *** vike left
[10:47] *** PimDaniel left
[10:53] *** vike joined
[10:55] *** PimDaniel joined
[10:55] <PimDaniel> \o

[10:55] <PimDaniel> zef works!

[10:58] <PimDaniel> Sorry for the noise.

[10:59] <Scimon> Glad it's working :)

[10:59] <PimDaniel> but i'v lost my installed modules list :(

[10:59] *** MasterDuke joined
[11:01] *** MasterDuke92 left
[11:05] <PimDaniel> Confused

[11:06] <PimDaniel> Now back to the beginning where are installed so i can modify one of them just to play with it?

[11:06] <PimDaniel> * where are modules installed?

[11:10] *** MasterDuke53 joined
[11:12] *** MasterDuke left
[11:12] *** PimDaniel left
[11:13] <MasterDuke53> you can't modify modules that have been installed via `zef install Foo::Bar`. the source is copied to your system so you can see it, but raku actually loads the immutable bytecode

[11:14] <MasterDuke53> so if you want to test modifications you have to clone the repo (probably fork it first), make your modifications, then do `zef install .` (or just override the zef installed one with `-I path/to/the/modified/module/lib`)

[11:24] *** wamba left
[11:26] *** MasterDuke53 left
[11:27] *** gnufr33dom left
[11:27] *** MasterDuke joined
[11:29] *** PimDaniel joined
[11:29] <PimDaniel> \o

[11:30] *** El_Che left
[11:30] *** vike left
[11:31] <PimDaniel> MasterDuke53: Like told me somebody here (you may be) i  gitcloned the main package, went in the directory, then zef installed only its dependencies. Now i can play with the main package.

[11:31] <tellable6> PimDaniel, I'll pass your message to MasterDuke53

[11:31] *** El_Che joined
[11:33] <PimDaniel> Now i can play with the module because i just want to understand its code and adapt some part of code for myself.

[11:34] <PimDaniel> I had to add the RAKULIB PATH on the main package of course 

[11:34] *** PimDaniel left
[11:44] *** vike joined
[12:00] *** tejr left
[12:05] *** tejr joined
[12:07] *** JRaspass left
[12:15] *** Black_Ribbon left
[12:15] *** Black_Ribbon joined
[12:29] *** PavelB left
[12:29] *** PimDaniel joined
[12:29] <PimDaniel> \o , Hi!

[12:30] <PimDaniel> my new question is here : https://pastebin.com/haixwFJv

[12:30] <PimDaniel> I feel there's a kind of cache to manage the Module imports in Raku.

[12:31] <lizmat> PimDaniel: BEGIN blocks are run at *compile* time

[12:32] <lizmat> the first time you call it, the module gets (pre-)compiled, and runs the BEGIN blocks

[12:32] <PimDaniel> Ok i see!

[12:32] <lizmat> the second time, it is already compiled, so the BEGIN blocks are *not* run

[12:32] <lizmat> s/BEGIN/INIT/

[12:33] <PimDaniel> and INIT behavec like BEGIN except it will rune each time?

[12:33] <sjn> PimDaniel: https://docs.raku.org/language/phasers <- here's the full overview of BEGIN and other phasers :)

[12:33] <lizmat> INIT is run every time execution is started

[12:33] <PimDaniel> Yes but it must be run first!

[12:33] <PimDaniel> Ok thank's!

[12:34] <lizmat> Ah, you mean to set up the stuff to EXPORT ?

[12:34] <lizmat> that'd be too late for that

[12:35] <sjn> .o(Should EXPORT be mentioned in the phasers docs?)

[12:36] <PimDaniel> lizmat: since yesterday morning i'm looking for a simple way to export_ok like in Perl5 into a :TAG some constants!

[12:36] <PimDaniel> what you mean too  late?

[12:37] *** Black_Ribbon left
[12:37] <lizmat> the module's EXPORT is run at compile time of the "use"ing code

[12:37] <lizmat> which would be before any INIT of the module

[12:37] *** aluaces left
[12:38] *** brtastic joined
[12:38] <PimDaniel> So you mean INIT would not do the stuff!

[12:38] <lizmat> the code in INIT will run *after* compilation of the code that does the -use-

[12:39] <PimDaniel> ok

[12:39] <lizmat> and that will have run the EXPORT sub of the module already

[12:39] <PimDaniel> Ok now i understand too late!

[12:40] <lizmat> in any case: so "is export(:TAG)" is not something you want to do

[12:40] <PimDaniel> I try to adapt your code so that i can into a loop export_ok some of my CONSTANTS into a some :TAGS, is it the good way to proceed?

[12:41] <lizmat> I would say, yes

[12:41] <lizmat> please note that the EXPORT sub can be a multi

[12:41] <lizmat> so you can use multiple dispatch on a tag 

[12:41] <lizmat> sub EXPORT(:$TAG!) {   }

[12:41] <lizmat> multi sub EXPORT(:$TAG!) {   }

[12:43] *** Black_Ribbon joined
[12:43] <PimDaniel> But are there not yet some exporters written in Raku? That can to that?

[12:43] *** Black_Ribbon left
[12:43] <PimDaniel> On the other hand, it not lost time because it helps me to understand things.

[12:45] <PimDaniel> What is the ! after the positional $TAG? The 1st time i see that!

[12:47] <moritz> it marks the argument as required

[12:47] <moritz> named args are optional by default

[12:47] *** wamba joined
[12:47] <PimDaniel> moritz: thanks!

[12:47] <PimDaniel> I'm learning: sorry!

[12:48] <lizmat> hmmm... looks like :$TAG! *will* look at the standard mechanism

[12:48] *** aluaces joined
[12:48] <lizmat> I have this in a module:

[12:48] <lizmat> constant A = 42; constant B = 666; multi sub EXPORT('TAG') { (A,B).Set.list.Map }

[12:49] <lizmat> in a file lib/Foo.rakumod

[12:49] <lizmat> and I can call it with:

[12:49] <lizmat> raku -Ilib -e 'use Foo <TAG>; dd A,B

[12:49] <PimDaniel> Hooo! So simple!

[12:49] <lizmat> PimDaniel: would that do what you want ?

[12:50] *** grayrider left
[12:50] <lizmat> before long, you should be able to the ".list" in there

[12:51] <PimDaniel> lizmat: I think it is what i need but  i MUST test your solution.

[12:52] <lizmat> sure  :-)   you should never believe what you're being told just by someone

[12:52] <lizmat> or hesitate to tell them that they're wrong

[12:52] <lizmat> just because of perceived seniority

[12:53] <lizmat> such behaviour was responsible for the greatest airline disaster of all time  :-(

[12:53] <PimDaniel> No problem : I never believe others and i never test my own code because i'm too proud for this!

[12:54] *** dataangel left
[12:54] <lizmat> https://en.wikipedia.org/wiki/Tenerife_airport_disaster

[12:55] <lizmat> "the KLM flight engineer expressed his concern about the Pan Am not being clear of the runway by asking the pilots in his own cockpit, "Is he not clear, that Pan American?" Veldhuyzen van Zanten emphatically replied "Oh, yes" and continued with the takeoff"

[12:55] <lizmat> but enough of history  :-)

[12:55] *** JRaspass joined
[12:57] <PimDaniel> I know what you tell about, i saw all plane disasters, it's very fun, and i remember it.

[12:59] <PimDaniel> well very fun. Hum :/

[13:02] <lizmat> sometimes learning things can be fun, even if they are not funny in of themselces

[13:02] <lizmat> *selves

[13:03] <lizmat> in this particular case, the junior officer did not dare to go against the most senior officer, and it got them killed

[13:04] *** JRaspass left
[13:10] *** PimDaniel left
[13:10] *** sjm_uk left
[13:12] * lizmat clickbaits https://rakudoweekly.blog/2021/02/01/2021-05-gsoc-proposing/

[13:14] *** PimDaniel joined
[13:16] <PimDaniel> lizmat: Your solution does not seam to work. :(

[13:19] <PimDaniel> hooo wait: The problem is My constants are into a module.

[13:24] *** PimDaniel left
[13:27] *** PimDaniel joined
[13:27] <PimDaniel> I works only when my constant are out of my package but i do not want that. :(

[13:27] <PimDaniel> I works only when my constants are out of my package but i do not want that. :(

[13:29] *** PimDaniel left
[13:36] *** PimDaniel joined
[13:38] *** xelxebar left
[13:38] *** xelxebar joined
[13:39] * PimDaniel  lizmat: 1/ echo 'constant A = 42; constant B = 666;' > lib/Foo.rakumod

[13:41] * PimDaniel lizmat: raku -Ilib -e 'use Foo <TAG>; dd A,B , works without export sub,NO? But nothing is tagged and protected thought. :(

[13:41] <lizmat> constants are by default "our", and thus part of default exporting

[13:43] <lizmat> should have made them "my"  :-)

[13:46] <lizmat> argh,.. of course, it's taking the values, not the names: must not have been awake yet

[13:46] <PimDaniel> Notice that to complicate things : i have them under an  "unit module <name>;" , but i can change for a module <name> { } if necessary.

[13:49] <PimDaniel> I also whatched  code  with loops around "MY::" but don't worry too mutch for me... i'll find a workarround for now if needed like use constant Foo is export(':tag') = 'TRUC';

[13:50] <PimDaniel> on each of them.

[13:50] <lizmat> my constant A = 42; my constant B = 666; multi sub EXPORT('TAG') { <A B>.map({ $_ => ::($_) }).Map }

[13:50] <lizmat> this will create the mapping you need for the given lexical constants

[13:51] *** wamba left
[13:51] <PimDaniel> does ::($_) looks into the inner module?

[13:52] <lizmat> it does a lexical lookup

[13:52] <PimDaniel> Ok but no, i did not well express my need:

[13:52] <PimDaniel> hoo wait...

[13:53] <PimDaniel> ok you declare each constants my but where?

[13:55] <PimDaniel> heres's the stucture of my package : package Foo { my constant A= 42 ; my constant B= 666} thez are inner , or unit module Foo; my constant ... etc...

[13:56] *** wamba joined
[14:00] <lizmat> PimDaniel: if that is in a module to be loaded, then you should put the constants *outside* of the package Foo() for visibility

[14:01] <lizmat> so: my constant A = 42; package Foo { .... }; multi sub EXPORT('TAG') { ... }

[14:03] <PimDaniel> why cannot we export them by some trick like if we would do that : unit module MyModule; constant A is export(":tag") = 42; in that case , use Module :DEFAULT,':tag' works.

[14:04] <PimDaniel> and then A.say.raku; on the script side.

[14:05] <PimDaniel> what i wonder is what trick make raku on the constants to make them visible.

[14:06] <PimDaniel> raku is powefull but that part seams really obscure. :(

[14:07] <PimDaniel> i must leave a few time : thanks lizmat, see you later...

[14:07] <lizmat> later!

[14:08] *** PimDaniel left
[14:23] <lizmat> afk&

[14:32] *** k-man joined
[14:51] *** MasterDuke left
[14:55] *** parabolize joined
[14:57] *** MasterDuke joined
[15:12] *** finsternis joined
[15:14] *** Sgeo joined
[15:17] *** mowcat joined
[15:22] *** JRaspass joined
[15:22] *** sno left
[15:32] *** Scimon left
[15:42] *** sno joined
[15:49] *** guifa joined
[15:50] <guifa> o/

[15:55] <guifa> our %foo is export := Map.new(‚Ä¶); is supposed to work no problem, right?  Or is there a known bug with precompilation of it?

[15:56] <guifa> I‚Äôve been getting this weird bug where when I pull it into a module file, %foo is empty, but if I just C&P back into the main script, it‚Äôs got what I expect.  The values are Callables, though, and I know there are some issues with precompilation and callables

[15:56] <guifa> s/there are issues/there were (are?) issues/

[15:59] <vrurg> guifa: doesn't look like it's something about callables. You either get %foo exported or not. But it being empty is something different.

[16:08] <guifa> vrurg: yeah, I‚Äôm going to do some golfing today to try to track it down further

[16:16] <lizmat> I think the main issue is here that %foo is getting exported before it is getting initialized

[16:16] <lizmat> our %foo is export := BEGIN Map.new(...)

[16:18] <guifa> confirmed, actually, with and without BEGIN.  Just did a quick module with my %foo is export := [BEGIN] Map.new: ‚Äòa‚Äô, 1, ‚Äòb‚Äô, 2, ‚Äòc‚Äô, 3; and %foo.keys returns an empty list

[16:18] <vrurg> guifa: try replacing := with assignment. If it fixes the problem then this is the export/initialization race.

[16:19] <guifa> vrurg: it does

[16:19] <vrurg> lizmat: BEGIN before Map would not help because the actual binding takes place after is export picks the container.

[16:20] <vrurg> guifa: then see my note for lizmat. Not sure if `BEGIN our $foo is export := ...` will work, but you could try.

[16:21] <lizmat> our %foo is export *is* already compile tim

[16:21] <lizmat> e

[16:21] <guifa> vrurg: BEGIN our %foo ‚Ä¶¬†gets the same result.  

[16:21] <guifa> I can use plain old assignment here no problem

[16:22] <vrurg> lizmat: that's why I doubted `BEGIN ...` will work. :)

[16:22] <vrurg> Ok, I have to go now...

[16:22] <guifa> I just instinctively use binding for array-to-array and hash-to-hash assigning so it never really occured to me to use plain assignment

[16:23] *** sjm_uk joined
[16:23] <lizmat> well, if you use assignment, %foo won't be a Map

[16:25] <lizmat> m: my %foo is Map = a => 42; dd %foo

[16:25] <evalable6> lizmat, rakudo-moar 297cba1a1: OUTPUT: ¬´Map.new((:a(42)))‚ê§¬ª

[16:25] <lizmat> m: our %foo is Map = a => 42; dd %foo

[16:25] <evalable6> lizmat, rakudo-moar 297cba1a1: OUTPUT: ¬´(exit code 1) ===SORRY!===‚ê§First child of a 'bind' op must be a QAST::Var, got QAST::Op‚ê§¬ª

[16:25] <lizmat> that is definitely LTA and a bug

[16:26] <lizmat> need to go afk again&

[16:26] <guifa> found a decent enough work around (this is going in a submodule file, so I don‚Äôt mind a bit of boilerplate for cleaner code elsehwere).  

[16:26] <guifa> my \foo = Map.new: ‚Ä¶¬†; sub EXPORT {¬†Map.new: ‚Äò%foo‚Äô => foo };

[16:45] *** neshpion joined
[16:49] <JRaspass> Writing a graphical program in Raku and I'd like to change the name that appears in the gnome top bar, atm it's just "rakudo". I presumed I would write to $*PROGRAM-NAME like you'd write to $0 in Perl, but that's readonly now :-( Is there a supported way?

[16:50] <tadzik> what are you using for that graphical program? Gtk?

[16:50] <JRaspass> sdl

[16:50] <JRaspass> i've changed the window name

[16:50] <tadzik> is the gnome top bar showing something else than a window name?

[16:50] <tadzik> sounds weird

[16:51] <JRaspass> yeah, just "rakudo"

[16:57] *** PimDaniel joined
[16:58] <PimDaniel> \o, Look at that piece of code : https://pastebin.com/CsFXUW3b, the question is the last one : TODO, thank's!

[16:58] <JRaspass> tbf it's probably a gnome thing, i suspect a .desktop file would fix it

[17:00] <JRaspass> (am slightly surprised we can't rename our processes anymore though)

[17:00] <JRaspass> the perl way used to affect what htop/ps etc showed

[17:01] <PimDaniel>  The question is the last *LINE , #TODO:

[17:03] <PimDaniel> Juste for information : this is not my code, I grabed this code somewhere,  and adapted it but i did not change many things.

[17:08] *** Scimon joined
[17:09] *** domidumont left
[17:09] <PimDaniel> I'm disappointed to find that my problem is of no interest. :(

[17:09] <PimDaniel> Ohhh sorry: Tea time probably. :/

[17:11] *** andrzejku joined
[17:11] <andrzejku> hello

[17:11] <PimDaniel> \o

[17:12] <andrzejku> what's current raku status?

[17:13] * PimDaniel andrezjku: are you talking to me?

[17:15] <PimDaniel> for myself : status is 0 and the posted code works, but there's a question at the end of it.

[17:18] <andrzejku> PimDaniel, yes you can answer

[17:18] <andrzejku> I meant more globally

[17:19] *** PimDaniel left
[17:22] *** PimDaniel joined
[17:23] <guifa> andrzejku: in what sense do you mean?

[17:24] <guifa> (there are a lot of ways to answer the question ha)

[17:25] <andrzejku> guifa, I mean if it is production ready

[17:28] <guifa> I would say it is ‚Äî¬†there are a lot of us that are using it now in production.

[17:30] <guifa> I think the only issues people have right now with it are speed (which is constantly being improve step by step) and ecosystem (which has made a lot of strides over the past year, in large part because 6.d is more production ready)

[17:30] *** Garbanzo joined
[17:30] <PimDaniel> Sorry andrzejku : I think it has been released as a stable one but i'm not an expert of the subject.

[17:33] <PimDaniel> guifa: where are speed problems? particularly?

[17:34] <guifa> PimDaniel: there‚Äôs not any one single area, but for one example, run time type checking is done a lot where it might not strictly be necessary

[17:36] <PimDaniel> Ok i see... well for now and for myself and what i need to do , learn Raku at most, it is not yet a problem.

[17:36] <guifa> Because Raku is written in Raku, optimizations can thankfully have a compounding effect :-) 

[17:36] <PimDaniel> ok ok : je comprends! :)

[17:39] <PimDaniel> but the time you loose at running your programs will be earn in programming because it is a really most powerfull langage, no? ;)

[17:39] *** dakkar left
[17:40] <guifa> Indeed ‚Äî that‚Äôs generally the trade off you have with most languages

[17:40] <guifa> C can be made to be very fast ‚Äî¬†but it requires a lot more work to develop in

[17:41] <PimDaniel> True: We often loose compilation time and test time.

[17:42] <PimDaniel> so i can say all languages i use are very fast because i never make tests. 

[17:42] <PimDaniel> we ofter *forget ...

[17:42] <PimDaniel> *often

[17:43] <El_Che> PimDaniel: that's a silly statement, the never test one

[17:43] <guifa> The amount of code that is *really* speed critical in the world is probably fairly limited.

[17:44] <guifa> Heck, Python is the most popular language for ML, and you‚Äôd really think for training massive datasets and stuff you‚Äôd want to use insanely optimized C for that.

[17:46] <PimDaniel> Sorry : what is ML?

[17:46] <JRaspass> machine learning

[17:47] <PimDaniel> Ok the new fashion. 

[17:47] <tadzik> I think all python modules for ML are actually using insanely optimized C(++) under the hood, merely exposing a python interfaec

[17:47] *** gnufr33dom joined
[17:49] <PimDaniel> but When we use NaviveCall with raku, is it as fast as C? I mean if you do not do many calls into a loop?

[17:51] <PimDaniel> Even in Perl5, for some Modules,  the underhood was compiled libraries, no?

[17:51] <guifa> tadzik: are they? I‚Äôve seen a number of them that list the Python API as the fullest, with the C (and other) APIs as incomplete, so I just assumed that  they were written in python and were being ported slowly

[17:52] <guifa> NativeCall has a little bit of overhead when you call it, but I don‚Äôt use it enough to tell yo how bad it is

[17:52] <PimDaniel> Or how good is it, no?

[17:53] <PimDaniel> you seam to have an advice.

[17:54] <PimDaniel> Well these thinks are interesting but not the most important for me now. I like the language anyway!

[17:57] <El_Che> If your main concert is speed, I would pick another language. But most use case, there are external factors that make speed relative like IO or network

[17:57] <PimDaniel> Damn : my pastebin disapeared :(! 

[17:58] <PimDaniel> hooo no, here it is my i post it again? https://pastebin.com/CsFXUW3b

[17:59] *** Black_Ribbon joined
[17:59] * guifa does a dance

[17:59] <guifa> Skeleton patterns are now (mostly) supported in Intl::Format::DateTime

[18:00] <guifa> format-datetime DateTime.now, :language<es> :skeleton<HHmmB> ‚Äî> 13:00 de la tarde

[18:01] <guifa> now I just need to figure out some decent named options to make the skeleton less‚Ä¶ cryptic (I‚Äôll see myself out)

[18:01] <PimDaniel> me gusta la mentequilla , me gusta!

[18:02] <PimDaniel> back later ...

[18:02] *** PimDaniel left
[18:09] *** aindilis joined
[18:09] *** Scimon left
[18:14] *** mowcat left
[18:31] *** ufobat left
[18:36] *** neshpion_ joined
[18:36] *** neshpion left
[18:40] *** PavelB joined
[18:51] *** sjm_uk left
[18:53] *** andrzejku left
[18:53] *** MasterDuke left
[18:56] *** jmerelo left
[19:03] *** andrzejku joined
[19:06] *** neshpion_ is now known as neshpion

[19:06] *** xelxebar left
[19:07] *** xelxebar joined
[19:09] *** gnufr33dom left
[19:12] *** patrickb joined
[19:17] *** MasterDuke joined
[19:18] *** kaiwulf left
[19:55] *** Sgeo left
[19:56] *** wamba left
[19:58] *** Sgeo joined
[20:14] *** Sgeo left
[20:19] *** Sgeo joined
[20:20] *** rindolf left
[20:25] *** sjn left
[20:33] *** sjn joined
[20:53] *** thundergnat joined
[20:56] <thundergnat> .tell JRaspass  > "I'd like to change the name that appears in the gnome top bar" If you are using SDL2, take a look in https://github.com/thundergnat/Raku-SDL2-applets and see if anything there helps. (polyspiral.raku is my favorite)

[20:56] <tellable6> thundergnat, I'll pass your message to JRaspass

[20:57] <JRaspass> ta, without running them it looks like they do the same, just name the window, but thanks

[21:00] *** PavelB left
[21:13] *** PimDaniel joined
[21:13] <PimDaniel> \o

[21:17] <PimDaniel> I need to valorize a part of   package name with a loop variable : MAINPACKAGE::NAME::$loopvar:: , what is the solution to do this? when i write a valid value in place of $loopvar it works but not with the variable this way.

[21:17] <tyil> ::("MainPackage::Name::$foo")

[21:18] <tyil> iirc

[21:19] <PimDaniel> tyil: ok thank's i'll try this.

[21:24] *** PimDaniel left
[21:26] *** PimDaniel joined
[21:30] <PimDaniel> tyil: no it does not work this way. :(.

[21:31] <tyil> can you send me the code you're working on for context?

[21:32] <MasterDuke> https://docs.raku.org/language/packages#Interpolating_into_names

[21:33] <tonyo> m: class A { our $loop = 0; method inc-loop { $loop++; } }; say A::<$loop>; A.inc-loop; say A::<$loop>;

[21:33] <evalable6> tonyo, rakudo-moar 110343d28: OUTPUT: ¬´0‚ê§1‚ê§¬ª

[21:36] <PimDaniel> :MasterDuke i was just reading this part of the reference.

[21:37] <PimDaniel> Thank's tyil but not for now, not sure it is usefull.

[21:37] <tonyo> PimDaniel: ^

[21:43] *** PimDaniel left
[21:44] *** andrzejku left
[21:48] *** brtastic left
[22:05] <guifa> Is there anyway we could provide hints to comma what exported symbols might be for modules that use EXPORT?

[22:17] *** Garbanzo left
[22:18] *** Garbanzo joined
[22:19] *** Garbanzo left
[22:19] *** Garbanzo joined
[22:20] *** Garbanzo left
[22:21] *** Garbanzo joined
[22:21] *** Garbanzo left
[22:22] *** Garbanzo joined
[22:22] *** Garbanzo left
[22:24] <gfldex> guifa: if you stick metadata into &EXPORT.WHY Comma should be able to retrieve it. If that works it's just a matter of defining a protocol for Comma to learn.

[22:26] <guifa> That actually could be a pretty simple way.  OBviously, for non-static exports, doesn‚Äôt help, but for all the rest it should be fairly simple enough.

[22:26] *** kaiwulf joined
[22:28] <guifa> #| foo bar $scalar @array; sub EXPORT {¬†Map.new: foo => ‚Ä¶, bar => ‚Ä¶, ‚Äò$scalar‚Äô => ‚Ä¶, ‚Äò@array‚Äô => ‚Ä¶ }

[22:29] * guifa . o O ( maybe even a regex in the WHY if they‚Äôre predictable )

[22:34] <mst> so, #raku needs to decide whether n*gg*r is an acceptable thing for the channel to upload to cpan

[22:34] <mst> http://hermit1.scsys.co.uk/~matthewt/raku

[22:34] <gfldex> guifa: Or mix a role into &EXPORT to provide something that is specific to Comma. After all .WHY is for human consumption. If I would set it to anything then to a URL for the docs of that module.

[22:35] <mst> lizmat forced me to allow this becuase apparently "it's just a word" is an acceptable response to 'n*gg*r'

[22:35] <mst> but here's a full explanation

[22:35] <mst> I recommend you work out whether you actually give a shit about having a code of conduct or not

[22:35] <mst> if you don't, I will happily step down as freenode group contact

[22:36] <mst> but I'

[22:36] <mst> but I'm done with having such behaviour defended and being attacked for criticing it

[22:36] <mst> HTH, HAND

[22:37] *** donaldh joined
[22:37] <mst> nine: ^^

[22:38] *** HaraldJoerg joined
[22:41] *** HarmtH joined
[22:41] *** donaldh left
[22:43] *** patrickb left
[22:45] <guifa> mst: reading over the conversation, I have to agree with what El_Che says in it: ‚ÄúI think the story is to confusing to make much sensen to a third party reading it now‚Äù 

[22:45] <mst> guifa: I've had to keep it confusing

[22:45] <mst> guifa: because lizmat attacked me in a way I can't defend myself without attacking somebody who doesn't even like me

[22:46] <mst> guifa: just because she insists on doing thatr doesn't mean I won't avoid it

[22:46] <tyil> how is creating drama on #raku making things better?

[22:46] *** mowcat joined
[22:46] <mst> tyil: you kept attacking volunteer conference organisers by yelling them about having a code of conduct

[22:46] <tyil> kept?

[22:47] <tyil> and "attacking" seems rather strong

[22:47] <mst> tyil: because you believe that a code of conduct is evil because you should be allowed to say n*gg*r because it's "just a word"

[22:47] <MasterDuke> is this recent? the references to #perl6 make it seem not so

[22:47] <tyil> that's not the reasoning, but eh...

[22:47] <mst> tyil: nah, not strong at all based on your behaviour in person or on mailing lists repeatedly

[22:47] <tyil> MasterDuke: unless he made up a new account of it, about half a year to a year ago

[22:47] <[Coke]> Not this again. I thought we hashed this out years ago.

[22:48] <mst> [Coke]: no, because liz continued to say she wouldn't attack -me-, instead she was going to attack perl people who were nothing to do with me

[22:48] <[Coke]> mst: Where's the upload?

[22:48] <mst> [Coke]: after she deleted all her cpan modules without warning and trashed lots of perl5 people's dependency chains

[22:48] <mst> [Coke]: I am so done with people defending this

[22:48] <mst> all I wanted was people to attack -me-

[22:49] <mst> rather than treating other people as acceptable collateral damage

[22:49] <mst> but apparently that was too hard

[22:49] *** kline joined
[22:50] <MasterDuke> if you really want to be attacked...your mother was a hamster and your father smelt of elderberries

[22:51] <mst> MasterDuke: go away, or I shall taunt you a second time!

[22:51] <kline> hey guys, is everything ok?

[22:51] <kline> i got reports of racist language or something

[22:51] *** spurdo joined
[22:51] <MasterDuke> silly english knigget!

[22:52] <kline> MasterDuke: im not sure what the context is but i think we should stay well clear of anything that could be misconstrued

[22:52] <mst> kline: don't worry about it

[22:53] <mst> kline: we're discussing internally a possible mistake that happened a while back

[22:53] <MasterDuke> oh, ha, whoops. shouldn't have spelled that phonetically

[22:53] <mst> kline: the reports are either people who're confused or people being knobheads

[22:53] * [Coke] steps away from IRC for a bit and will review.

[22:53] <kline> mst: if thats the case im sure it can probably be discussed without trigger words?

[22:53] <kline> since thats i think whats the issue

[22:54] <mst> kline: uh, if 'n*gg*r' is a trigger word then I dunno how to avoid it when having such conversations

[22:54] <mst> kline: cos nobody in this entire conversation has used that word without the asterisks

[22:54] *** throwaway joined
[22:55] <spurdo> ******

[22:55] <kline> mst: i think if people find it objectionable you might want to find some other way of talking about the expression

[22:56] <kline> im sure everyone how "needs to know" and is relevant to the discussion is already aware of the word without it being repeated

[22:56] <Grinnz> "the n-word" is sufficiently descriptive at least to americans

[22:56] * guifa notes that ‚Äúthe N-word‚Äù is the most common way to refer to the word itself

[22:56] <kline> thats not to say its not an important issue, im just wondering if people need to be as explicit as has been the case so far, since its upsetting people

[22:56] <mst> kline: if people are bitching about the asterisked version that's new to me

[22:57] <mst> kline: is that really what's happened?

[22:57] <kline> yes

[22:57] *** spurdo is now known as Ny

[22:57] *** Ny is now known as Nyx

[22:57] <mst> kline: jeez, ok, I'll switch to saying that tyil nearly uploaded a module to cpan using the N-word as a directory name\

[22:57] <mst> sorry about that

[22:58] <tyil> I'm incredibly sure that issue was supposed to be buried at least twice now

[22:58] <tyil> and you promised twice now to stop bringing it up

[22:58] <tyil> care to hold you to your own promise?

[22:58] <kline> mst: is there anyone involved/relevant who is unaware of the language used?

[22:58] <mst> tyil: I did, and then liz decided to bring it back up repeatedly

[22:58] <mst> kline: tyil's argument continues to be "it's just a word"

[22:59] <kline> mst: im just trying to get to the nub of this. if its not necessary to repeat it, i think its the case that you shouldnt

[22:59] <mst> kline: and "I don't understand why I'm supposed to be sorry about this"

[22:59] <tyil> no, my argument at this point is "why bring it up again when it has been delt with countless times now"

[22:59] <tyil> at the very least, be honest

[22:59] <mst> tyil: this isn't your fault this time mate

[22:59] <tyil> it was only the first time

[22:59] <mst> it's because liz is insisting on attacking other people

[22:59] <tyil> the other times it wasn't me bringing it up to stir up some channel drama

[23:00] <mst> because she knows that attacking other people will silence me

[23:00] <tyil> if you have a problem with liz, pm her

[23:00] <tyil> if you have a problem with me, pm me

[23:00] <mst> tyil: look at the thing I linked

[23:00] <mst> tyil: I never menti8oned your name at all

[23:00] <tyil> starting a shitshow in a public channel is a surefire way to get people against you

[23:00] <mst> tyil: you're the one who brought -you- up

[23:00] <mst> tyil: maybe don't do that if you don't want mentioning when I was careful not to

[23:01] <tyil> (especially since you yourself promised you wouldn't, and are breaking this promise a second time)

[23:01] <mst> tyil: no, I'm not, you broke it yourself, son

[23:01] <tyil> you got less careful when kline asked you to stop being racist

[23:01] <tyil> so while you were careful, you at least strongly imply you were talking about me

[23:01] <mst> maybe you shouldn't've summoned kline then

[23:02] <tyil> what are you accusing me of, exactly?

[23:02] <tyil> it isn't your first false accusation with no proof whatsoever

[23:02] <tyil> so don't hold back

[23:02] <mst> whine whine whine

[23:02] <kline> mst: since this is clearly between the two of you 1) it wasnt tyil who brought me here (but its not important to go into that further) and 2) perhaps it could be done in a query between the two of you

[23:02] <El_Che> mst: the discussion of not getting clearer if the problem is not tyil or the past action itself

[23:02] <kline> without having to disrupt a channel

[23:03] <El_Che> s/of/is/

[23:03] <mst> kline: yes sorry

[23:03] <mst> I didn't mention tyil until tyil started stropping about it though\

[23:03] <mst> and yet somehow it's me that started it?

[23:03] <mst> lol

[23:04] <kline> im not sure i really care or that its relevant, but i dont think either of you need to do this in public when nominally there is raku related discussion that could happen

[23:04] <tyil> I can literally see the evidence of that not being true without scrolling

[23:04] <tyil> but eh, as always, being decent isn't going to change the course of the story

[23:04] <kline> tyil: cmon, you dont need to white knight yourself, can you just call each other out in private

[23:05] <tyil> kline: nah, I'll put him back on ignore

[23:05] <tyil> mst has yet to prove he can uphold a single word of what he promises

[23:05] <kline> that would be sensible, thanks

[23:05] <tyil> no point in trying to argue anything with such a person

[23:08] *** throwaway left
[23:09] <mst> kline: I agreed to leave it be

[23:09] <kline> thanks

[23:09] <mst> then tyil decided to keep attacking community organisers and conference orgaminsers

[23:09] <mst> he broke the deal and so I reminded people of his mistakes

[23:09] <mst> if he'll stop it, I'll drop it

[23:09] <mst> I've always been happy with that

[23:10] <kline> mst: i just want to be clear that i dont really want to be involved or to judge project-internal matters

[23:10] <mst> tyil doesn't seem to be capable of it

[23:10] <mst> kline: course you can't

[23:10] <mst> kline: you can hold no opinion about this at all

[23:10] <kline> i just want people to not use any language that can cause friction unless its absolutely necessary

[23:10] <kline> and as far as i can tell thats not been the case tonight

[23:10] <mst> of course, and I accused nobody of using such language tonight

[23:11] <kline> ace, then i think this topic is probably done

[23:12] <mst> really, I never accussed anybody of using such language during this convewrsation

[23:12] <kline> please

[23:12] <kline> stop

[23:12] <El_Che> mst: once you and lizmat both calm down, we may have a calm talk if you both want it. It's too soon now. The discussion about the attack by proxy is difficult to grasp because you need to stay vague to respect someone elses privacy. The previous discussion with the racist name seems closed some time ago, and conflating the whole raku community with it seems counter-productive.

[23:13] <mst> El_Che: I've requested this repeatedly.

[23:13] <El_Che> mst: I honestly don't think you nor lizmat are there yet

[23:13] <mst> kline: fair enough

[23:17] *** aluaces left
[23:17] *** squashable6 left
[23:19] *** squashable6 joined
[23:33] *** MasterDuke left
[23:33] *** MasterDuke joined
