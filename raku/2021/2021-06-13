[00:03] *** reportable6 left
[00:06] *** reportable6 joined
[00:29] *** Kaipi joined
[00:29] *** Kaipi left
[00:43] *** swaggboi joined
[01:02] *** RandalSchwartz joined
[01:55] *** monkey_ joined
[02:03] *** monkey_ left
[02:03] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:50] *** monkey_ joined
[03:42] *** swaggboi left
[03:45] *** swaggboi joined
[03:56] *** monkey_ left
[04:56] *** squashable6 left
[04:56] *** benchable6 left
[04:56] *** evalable6 left
[04:56] *** statisfiable6 left
[04:56] *** greppable6 left
[04:56] *** linkable6 left
[04:56] *** notable6 left
[04:56] *** nativecallable6 left
[04:56] *** tellable6 left
[04:56] *** quotable6 left
[04:56] *** sourceable6 left
[04:56] *** coverable6 left
[04:56] *** unicodable6 left
[04:56] *** releasable6 left
[04:56] *** bloatable6 left
[04:56] *** bisectable6 left
[04:56] *** shareable6 left
[04:56] *** committable6 left
[04:56] *** reportable6 left
[04:56] *** nativecallable6 joined
[04:56] *** committable6 joined
[04:56] *** tellable6 joined
[04:57] *** coverable6 joined
[04:57] *** shareable6 joined
[04:57] *** notable6 joined
[04:57] *** squashable6 joined
[04:57] *** unicodable6 joined
[04:57] *** sourceable6 joined
[04:58] *** quotable6 joined
[04:58] *** benchable6 joined
[04:58] *** releasable6 joined
[04:59] *** statisfiable6 joined
[04:59] *** evalable6 joined
[04:59] *** bisectable6 joined
[04:59] *** bloatable6 joined
[04:59] *** greppable6 joined
[04:59] *** linkable6 joined
[04:59] *** reportable6 joined
[05:33] *** squashable6 left
[05:34] *** squashable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:20] *** frost joined
[06:32] *** RandalSchwartz left
[06:38] *** guifa left
[07:03] *** frost left
[07:09] *** frost joined
[08:09] *** coverable6 left
[08:09] *** unicodable6 left
[08:09] *** sourceable6 left
[08:09] *** benchable6 left
[08:09] *** squashable6 left
[08:09] *** tellable6 left
[08:09] *** greppable6 left
[08:09] *** bisectable6 left
[08:09] *** quotable6 left
[08:09] *** linkable6 left
[08:09] *** nativecallable6 left
[08:09] *** notable6 left
[08:09] *** shareable6 left
[08:09] *** statisfiable6 left
[08:09] *** evalable6 left
[08:09] *** committable6 left
[08:09] *** releasable6 left
[08:09] *** bloatable6 left
[08:09] *** reportable6 left
[08:09] *** releasable6 joined
[08:09] *** statisfiable6 joined
[08:09] *** sourceable6 joined
[08:10] *** unicodable6 joined
[08:10] *** notable6 joined
[08:10] *** evalable6 joined
[08:10] *** shareable6 joined
[08:10] *** committable6 joined
[08:11] *** quotable6 joined
[08:11] *** bisectable6 joined
[08:11] *** reportable6 joined
[08:11] *** nativecallable6 joined
[08:11] *** linkable6 joined
[08:11] *** greppable6 joined
[08:11] *** squashable6 joined
[08:11] *** tellable6 joined
[08:11] *** benchable6 joined
[08:12] *** bloatable6 joined
[08:12] *** coverable6 joined
[09:04] *** MasterDuke34 left
[09:11] *** MasterDuke joined
[09:19] *** MasterDuke left
[09:29] *** MasterDuke joined
[09:33] *** Sgeo left
[10:05] *** stoned75 joined
[10:09] *** Manifest0 left
[10:13] *** Manifest0 joined
[10:26] *** holly_ joined
[10:33] *** stoned75 left
[10:52] *** stoned75 joined
[11:10] *** stoned75 left
[11:13] *** domm left
[12:03] *** reportable6 left
[12:05] *** reportable6 joined
[12:14] *** yewscion joined
[12:46] *** leah2 left
[12:47] *** leah2 joined
[12:52] *** stoned75 joined
[12:52] *** stoned75 left
[13:34] *** b2gills left
[13:44] *** domm joined
[14:00] *** antononcube joined
[14:08] <antononcube> Hi! I want to define left and right "word" boundary assertions that for which "word" consist of alpha-numeric characters _and_ punctuation characters. E.g. I want to have word boundaries for words like ".net" or "c++" and parse a list of such words. I want to parse a list of 

[14:08] <antononcube> This left boundary definition seems to work together with >> : regex wbpl { <!after [ <alnum> | <punct> ]> <?before [ <alnum> | <punct> ]> }

[14:08] <antononcube> The parsing stops working when I try to use this right boundary defintion: regex wbpr { <?after [ <alnum> | <punct> ]> <!before [ <alnum> | <punct> ]> }

[14:08] <antononcube> Any suggestions?

[14:09] <moritz> antononcube: what's an example of where you want it to match and where it doesn't match?

[14:10] <antononcube> '.net framework, c++, java, and software architect'

[14:11] <antononcube> @moritz Thank you for replying! Please, take a look in these definitions: https://github.com/antononcube/Raku-DSL-Entity-Jobs/blob/main/lib/DSL/Entity/Jobs/Grammar/EntityNames.rakumod 

[14:13] <moritz> antononcube: http://perlpunks.de/paste/show/60c61269.6e90.d6 your word boundary regex seems to work for me

[14:14] <moritz> http://perlpunks.de/paste/show/60c612d3.6e90.3b3 this one illustrates all the position where it matches

[14:15] <antononcube> @moritz Ok, good to know!

[14:15] <antononcube> I am trying it out now.

[14:26] *** yewscion left
[14:28] *** holly_ left
[14:29] <antononcube> @moritz Thank you! You comment really helped -- I found a mistake in another part of my program...

[14:34] <antononcube> I have another question -- it is about using Raku in Babel org mode. (https://orgmode.org/worg/org-contrib/babel/)

[14:35] <antononcube> Does someone here use Babel org-mode and Raku? I read somewhere that Raku is supposed to supported in Babel, but I do not think it is.

[14:39] <antononcube> I found this emacs-Lisp  definition: https://mail.gnu.org/archive/html/emacs-devel/2020-03/msg00636.html . And with some little tweaking I made it work in Aquamacs. It looks like though the author, Tim Van den Langenbergh, has abandoned any efforts in that direction and deleted / removed the corresponding files from hist GitHub repository. 

[14:39] *** holly_ joined
[14:42] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/06/13/teaching-on-a-waterbed/

[14:43] *** RandalSchwartz joined
[14:47] *** yewscion joined
[14:48] <gfldex> moritz: I'm on page 40 of "Parsing with Perl 6" and I already learned a few new tricks. :)

[14:51] *** yewscion left
[14:56] *** frost left
[14:57] <moritz> gfldex: glad you're getting something out of it :D

[14:57] <antononcube> @gfldex Yes, it is a good book -- I learned a lot about Raku grammars from it.

[14:57] * moritz bows and blushes

[14:57] *** b2gills joined
[14:59] <Altreus> Perl 6‚êõb6xA Raku <- this puts Perl  Raku

[14:59] <Altreus> </pedantry>

[15:00] * Altreus would use FPCRaku

[15:00] <Altreus> oh, no it doesn't because you didn't put a space after the 6!

[15:00] <gfldex> I tried to shoehown a 6 into that vim command.

[15:01] <Altreus> :)

[15:02] *** domattps joined
[15:04] <antononcube> I do not like this vim-direction in the discussion. I am interested in using Raku in Emacs... :/

[15:04] <Altreus> gfldex: you've put where instead of were a couple of times btw

[15:05] <gfldex> Thanks for the denitting.

[15:25] *** domattps is now known as GoneDomattps

[15:27] *** GoneDomattps is now known as domattps

[15:41] *** antononcube left
[15:53] *** lgtaube left
[15:58] *** domattps is now known as GoneDomattps

[16:02] *** GoneDomattps is now known as domattps

[16:09] *** lgtaube joined
[16:12] *** domattps is now known as GoneDomattps

[16:18] *** Sgeo joined
[16:19] *** tobs left
[16:21] *** tobs joined
[16:29] *** Manifest0 left
[16:29] *** Manifest0 joined
[16:34] *** antononcube joined
[16:35] *** antononcube left
[16:36] *** Manifest0 left
[16:36] *** Manifest0 joined
[16:47] *** holly_ left
[16:48] *** Manifest0 is now known as testingstuff

[16:49] *** testingstuff is now known as Manifest0

[17:04] <SmokeMachine> I've started writing this module to test my Pod code snippets, does anyone have any advice of a better way of doing that? Or would like to help me on evolving that? (Sorry, there is no good README yet...) https://github.com/FCO/Pod-Test-Code

[17:49] *** evalable6 left
[17:49] *** linkable6 left
[17:49] *** evalable6 joined
[17:50] *** linkable6 joined
[17:54] *** abraxxa-home joined
[18:03] *** reportable6 left
[18:04] *** reportable6 joined
[18:28] *** cbk joined
[18:56] *** cbk left
[19:01] *** squashable6 left
[19:02] *** squashable6 joined
[19:14] *** abraxxa-home left
[19:27] *** Xliff joined
[19:27] <Xliff> Hello!

[19:27] <Xliff> I am now getting this error: 

[19:27] <Xliff> Cannot modify an immutable Block (-> |c { #`(Block|948...)

[19:27] <Xliff> at /home/cbwood/Projects/p6-GIO/lib/GIO/Roles/AppInfo.pm6 (GIO::Roles::AppInfo):429

[19:29] <Xliff> That error points here: https://github.com/Xliff/p6-GIO/blob/master/lib/GIO/Roles/AppInfo.pm6#L429

[19:29] <Xliff> This is a regression from last week's Raku.

[19:30] <Xliff> This error was not reported in g0de28ae72.

[19:31] <Xliff> Can someone take a quick load at that code and see if they can find an eror. Note I have used this code in previous raku, no proble.

[19:35] *** RandalSchwartz left
[19:43] <Xliff> This error appears again, here:

[19:43] <Xliff> Cannot modify an immutable Block (-> |c { #`(Block|941...)

[19:43] <Xliff>     at /home/cbwood/Projects/p6-GUPnP/lib/GUPnP/Roles/ACL.pm6 (GUPnP::Roles::ACL):124

[20:05] <lizmat> could you golf this to something bisectable, or do you know the offending commit already?

[20:06] <lizmat> ah, I should drop the g  :-)

[20:06] <lizmat> Xliff: can you provide a full stack trace ?

[20:07] <Xliff> lizmat: This is over 500,000 lines of code. Where do you golf?

[20:07] <Xliff> Am attempting to find the commit, but that is time-consuming and might not finish, today.

[20:07] <Xliff> Full stack trace incoming

[20:08] <lizmat> ah, you're saying that 0de28ae72 is not it 

[20:08] <lizmat> ?

[20:08] *** linkable6 left
[20:08] <Xliff> No. Checked that one and it produced the same error.

[20:08] <Xliff> It's within the last 3 weeks. Thought last week had a no error week.

[20:09] <Xliff> I'll have to check the stat files.

[20:09] <Xliff> I might need to install bot code to get this one.

[20:10] <lizmat> ++Xliff

[20:11] *** linkable6 joined
[20:12] <raydiak> generally you would golf it by making a copy of the project, then rippinng out giant chunks one at a time, checking if the failure still exists after each one. repeat until the only thing left is the failing code, then reduce that to the shortest possible thing you can write which still triggers the bug

[20:15] <Xliff> radiak: Yep. I get the gist of that, but what happens when you are 3 projects into a dependency chain?

[20:16] <raydiak> start by removing the dependencies. if you're lucky, the bug will still exist without them

[20:17] <Xliff> Can't remove the dependencies and expect the code to compile! 

[20:17] <raydiak> remove the part that won't compile without them

[20:17] <Xliff> Unfortunately that is most of the code

[20:18] <Xliff> So I have to show examples from the code. Golfing doesn't work with what I have.

[20:18] <Xliff> Especially this part. It's more types than anything else.

[20:18] <Xliff> If you use a type from a previous dependency (which is all over the code.... see GObject) 

[20:18] <raydiak> remove the type constraints

[20:18] <Xliff> You have to include the dependencies

[20:18] <Xliff> Humm.... I'll think about that.

[20:19] <lizmat> Xliff: full stack trace ?

[20:19] <Xliff> But what if the dependencies are a part of the issue?

[20:19] <Xliff> lizmat: Still working on dependency installs.

[20:19] <raydiak> then you at least know that, which is a start

[20:19] <lizmat> ok, whenever you have one  :-)

[20:20] <raydiak> then you start ripping apart the dependencies too

[20:20] <lizmat> raydiak: I think Xliff gets the concept of golfing :-)

[20:21] <raydiak> he asked. I answered.

[20:21] <Xliff> radiak: At that point, it's probably just easier for someone to download the code and look at it.

[20:22] <raydiak> I looked. didn't see anything obvious. if it's 500,000 lines and the error is elsewhere, that's going to be a tall order

[20:23] <raydiak> anyway, apparently I'm not being helpful. going to move on with my morning. good luck, I hope someone can help you

[20:23] <Xliff> Now you feel my pain.

[20:23] <Xliff> Fortunately at the GIO level it's not over 100k

[20:27] <Xliff> lizmat: stack trace generated. Creating a gist.

[20:28] <Xliff> lizmat: https://gist.github.com/Xliff/b9067702a014a9beee2a9f98ee8f3f79

[20:31] <lizmat> Ah, looks like Method::Also is involved

[20:33] <lizmat> does it happen at compile time ?

[20:34] <Xliff> Looks like it.

[20:34] <Xliff> And o crap. I think I know why. I made recent changes.

[20:34] <Xliff> Will the use of "but" modify a block?

[20:35] <Xliff> If that is true, then I will need to wrap the block in a sub. *sigh*

[20:36] <lizmat> yup  :-(

[20:37] <Xliff> Maybe this: 

[20:37] <Xliff> my \me = -> |c { o."{ $p.value.name }"( |c.list.skip(1), |c.hash ) };

[20:37] <Xliff>               me = me but Method::Also::AliasedMethod;

[20:37] <Xliff> So could that be wrapped in a sub?

[20:38] <Xliff> m: role Subby { }; my $a = sub { say "Hi!" } but Subby; $a.^name.say

[20:38] <camelia> rakudo-moar 750c5d04a: OUTPUT: ¬´Sub+{Subby}‚ê§¬ª

[20:38] <Xliff> Cool!

[20:38] <vrurg> Xliff: the error rather points at an attempt to assign to a non-Scalar.

[20:38] <Xliff> vrurg: Then wouldn't \me count?

[20:39] <vrurg> Xliff: sure it will.

[20:39] <vrurg> \me becomes a binding to a Block.

[20:39] <vrurg> You don't need a sub, perhaps. Just use $me =

[20:40] <Xliff> Hah! OK. Then changing it to $me should fix it. Checking.

[20:41] <vrurg> As a matter of fact, you can still use \me, but then `me := me but ...`

[20:42] <vrurg> Ah, pardon me, `me := ` won't work. :( Though I always expect it to be ok.

[20:43] <vrurg> m: my $r := { say "foo" }; role R { }; $r := $r but R

[20:43] <camelia> rakudo-moar 750c5d04a: ( no output )

[20:43] <vrurg> Anyway, the above is faster and more memory-efficient.

[20:47] <Xliff> vrurg: What about "my $me := -> |c { o."{ $p.value.name }"( |c.list.skip(1), |c.hash ) } but Method::Also::AliasedMethod;"

[20:48] <vrurg> Xliff: Then just `\me = ` will do too, if you prefer this form.

[20:48] <Xliff> I attempted that version of \me and it still generated the error.

[20:49] <vrurg> Xliff: I'd say an attempt to assign into `me` is lurking somewhere.

[20:49] <moritz>  m: my $r := { say "foo" }; role R { }; $r does R; say $r

[20:49] <camelia> rakudo-moar 750c5d04a: OUTPUT: ¬´-> ;; $_? is raw = OUTER::<$_> { #`(Block+{R}|79142800) ... }‚ê§¬ª

[20:50] <vrurg> m: role R { }; my \me = -> |c { } but R;

[20:50] <camelia> rakudo-moar 750c5d04a: ( no output )

[20:50] <vrurg> m: role R { }; my \me = -> |c { } but R; say me

[20:50] <camelia> rakudo-moar 750c5d04a: OUTPUT: ¬´-> |c { #`(Block+{R}|87593896) ... }‚ê§¬ª

[20:53] <Xliff> cd

[20:53] <Xliff> LOL!

[20:54] <raydiak> Xliff last note before I'm afk: I hope you understand I'm never trying to be counterprodocutive. I've golfed bugs out of codebases twice as large. it does take some time and thought, but it does work if you do it right. I only wanted to point out that a tool you already have in your belt can work even here. I hope you don't feel like I'm picking on you. that is never my intention

[20:56] <Xliff> raydiak: I understand that. Thanks for your input. It's just when I come to my p6-GLib projects, golfing is not an easy or quick way to reach a problem. --ll-exception is almost faster.

[20:56] *** monkey_ joined
[20:59] *** yewscion joined
[21:01] <raydiak> for the cases where it works, it definitely is. sometimes the cause is not obvious in the current stack

[21:01] <raydiak> did this work when you originally made the change? I wonder what the difference is

[21:03] *** Xliff_ joined
[21:03] *** yewscion_ joined
[21:04] *** cnx left
[21:04] *** ComplYue[m] left
[21:04] *** juanfra left
[21:04] *** demostanis[m] left
[21:04] *** AlexDaniel left
[21:04] *** tyil[m] left
[21:04] *** CIAvash left
[21:05] *** juanfra joined
[21:05] *** Xliff left
[21:05] *** yewscion left
[21:05] *** monkey_ left
[21:05] *** MasterDuke left
[21:06] *** monkey_ joined
[21:06] *** Xliff joined
[21:09] *** demostanis[m] joined
[21:09] *** AlexDaniel joined
[21:09] *** cnx joined
[21:09] *** gabiruh_ joined
[21:09] *** ComplYue[m] joined
[21:09] *** tyil[m] joined
[21:09] *** samcv_ joined
[21:09] *** CIAvash joined
[21:09] *** andinus` joined
[21:11] *** pierrot_ joined
[21:11] *** sivoais_ joined
[21:12] *** broquain1 joined
[21:12] *** Ulti_ joined
[21:12] *** bartolin_ joined
[21:12] *** Xliff_ left
[21:12] *** gfldex_ joined
[21:14] *** RandalSchwartz joined
[21:14] *** jjatria_ joined
[21:14] *** linkable6 left
[21:14] *** unicodable6 left
[21:14] *** squashable6 left
[21:14] *** benchable6 left
[21:14] *** tellable6 left
[21:14] *** notable6 left
[21:14] *** LizBot left
[21:14] *** jjatria left
[21:14] *** bisectable6 left
[21:14] *** quotable6 left
[21:14] *** committable6 left
[21:14] *** shareable6 left
[21:14] *** Ekho left
[21:14] *** Ulti left
[21:14] *** monkey_ left
[21:14] *** samcv left
[21:14] *** gfldex left
[21:14] *** bartolin left
[21:14] *** sivoais left
[21:14] *** cognominal_ left
[21:14] *** gabiruh left
[21:14] *** broquaint left
[21:14] *** pierrot left
[21:14] *** andinus left
[21:14] *** Sgeo_ joined
[21:15] *** jjatria_ is now known as jjatria

[21:16] *** Xliff_ joined
[21:17] *** vrurg_ joined
[21:18] *** Ekho- joined
[21:18] *** cognominal joined
[21:18] *** samcv joined
[21:19] *** ecocode_ joined
[21:19] *** SmokeMachine left
[21:19] *** leont left
[21:19] *** vrurg left
[21:19] *** ecocode left
[21:19] *** moon-child left
[21:19] *** childlikempress joined
[21:20] *** SmokeMachine joined
[21:21] *** leont joined
[21:22] *** tonyo left
[21:22] *** charsbar left
[21:22] *** charsbar_ joined
[21:22] *** charsbar_ is now known as charsbar

[21:23] *** perlbot_ joined
[21:23] *** gfldex_ is now known as gfldex

[21:24] *** perlbot left
[21:24] *** jercos left
[21:24] *** jdv left
[21:24] *** samcv_ left
[21:24] *** Xliff left
[21:24] *** Sgeo left
[21:24] *** jdv joined
[21:25] *** vrurg_ is now known as vrurg

[21:25] *** perlbot_ is now known as perlbot

[21:25] *** tonyo joined
[21:25] *** m6locks left
[21:25] *** GoneDomattps is now known as domattps

[21:26] *** jercos joined
[21:26] *** m6locks joined
[21:30] *** raydiak left
[21:39] *** monkey_ joined
[21:47] *** monkey_ left
[21:49] *** MasterDuke joined
[21:49] *** childlikempress is now known as moon-child

[21:51] <MasterDuke> Xliff_: are you using rakudo at HEAD? if so, have you noticed any compilation speedup in the past day or so?

[21:57] *** sivoais_ left
[21:57] *** sivoais joined
[22:01] *** yewscion_ left
[22:07] *** committable6 joined
[22:07] *** squashable6 joined
[22:07] *** bisectable6 joined
[22:07] *** tellable6 joined
[22:07] *** benchable6 joined
[22:08] *** quotable6 joined
[22:08] *** notable6 joined
[22:09] *** unicodable6 joined
[22:09] *** linkable6 joined
[22:13] *** shareable6 joined
[22:58] <Xliff_> MasterDuke: Just compiled at like midnight.

[22:58] <Xliff_> Or slightly after.

[22:58] <Xliff_> Won't know overall until the singular job completes

[22:58] <Xliff_> That'll be a while

[22:59] *** Xliff_ is now known as Xliff

[23:59] *** linkable6 left
[23:59] *** evalable6 left
[23:59] *** releasable6 left
