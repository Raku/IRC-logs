[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[00:26] *** squashable6 left
[00:36] *** jjido left
[00:38] *** squashable6 joined
[00:46] *** squashable6 left
[00:49] *** squashable6 joined
[01:49] *** greppable6 left
[01:49] *** evalable6 left
[01:49] *** quotable6 left
[01:49] *** tellable6 left
[01:49] *** squashable6 left
[01:49] *** bloatable6_ left
[01:49] *** releasable6 left
[01:49] *** coverable6 left
[01:49] *** notable6 left
[01:49] *** reportable6 left
[01:49] *** linkable6 left
[01:49] *** nativecallable6 left
[01:49] *** bisectable6_ left
[01:49] *** statisfiable6 left
[01:49] *** shareable6_ left
[01:49] *** unicodable6_ left
[01:49] *** committable6_ left
[01:49] *** benchable6 left
[01:49] *** sourceable6_ left
[01:49] *** evalable6 joined
[01:49] *** shareable6 joined
[01:50] *** quotable6 joined
[01:50] *** nativecallable6 joined
[01:51] *** reportable6 joined
[01:51] *** statisfiable6 joined
[01:52] *** committable6 joined
[02:49] *** greppable6 joined
[02:49] *** bloatable6 joined
[02:49] *** linkable6 joined
[02:50] *** unicodable6 joined
[02:50] *** tellable6 joined
[02:50] *** bisectable6 joined
[02:51] *** sourceable6 joined
[02:51] *** benchable6 joined
[02:52] *** notable6 joined
[02:52] *** squashable6 joined
[03:49] *** releasable6 joined
[03:51] *** coverable6 joined
[04:00] *** pierrot_ is now known as pierrot

[04:07] <Geth> ¦ doc: 924afafd02 | (Stoned Elipot)++ | doc/Language/subscripts.pod6

[04:07] <Geth> ¦ doc: whitespace fix

[04:07] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/924afafd02

[04:07] <linkable6> Link: https://docs.raku.org/language/subscripts

[04:17] *** squashable6 left
[04:19] *** squashable6 joined
[04:20] *** squashable6 left
[04:22] *** squashable6 joined
[04:22] *** gordonfish left
[04:24] *** gordonfish joined
[04:37] *** gordonfish- joined
[04:37] *** gordonfish left
[04:41] *** gordonfish- left
[04:51] *** gordonfish joined
[04:55] *** squashable6 left
[05:02] *** gordonfish left
[05:33] *** gordonfish joined
[05:53] *** anser joined
[05:57] *** squashable6 joined
[06:02] *** reportable6 left
[06:13] *** abraxxa joined
[06:19] *** abraxxa left
[06:20] *** abraxxa joined
[06:37] *** Manifest0 joined
[06:44] *** jjido joined
[06:45] *** Sgeo left
[07:19] *** ufobat joined
[07:29] *** jjido left
[07:44] *** moon-child left
[07:44] *** moon-child joined
[07:51] *** jjido joined
[08:05] *** dakkar joined
[08:32] *** jjido left
[08:57] <lizmat> PSA: the Rakudo Weekly News will be published on Tuesday this week due to circumstances

[09:03] *** reportable6 joined
[09:08] *** jjido joined
[09:18] <sjn> happy circumstances, I hope

[09:18] <lizmat> indeed  :-)

[09:27] *** jjido left
[09:33] <sjn> good to know :)

[09:35] <samebchase9> How do I ensure that a command that has colorized output, does the same when called inside a qqx{} block? 

[09:38] *** eseyman left
[09:39] *** samebchase9 is now known as samebchase

[09:45] <dakkar> samebchase: it depends on the command

[09:46] <dakkar> some commands (e.g. `ls`) accept options to force colours (`ls --color=always`)

[09:46] <dakkar> some only produce colour output when their stdout is a tty (`qqx` sets the sub-process's stdout to a pipe)

[09:47] <dakkar> (I haven't seen a raku module to set up a tty/pty)

[09:47] <dakkar> oh, of course it also depends if you're on windows or not (as usual, windows is different)

[09:48] <samebchase> dakkar: okay, I was trying to get `git show` to force colorized output

[09:49] <samebchase> let me try with `ls --color=always` and see if that has any impact

[09:49] <samebchase> or perhaps if there is some env variable that could be set

[09:51] <dakkar> `git show --color=always` should work, according to the man page

[09:51] <dakkar> remember that there's no general standard, every command is different

[09:54] <samebchase> thanks so much dakkar!

[09:54] <samebchase> I was searching for 'escape' in the `git show` man page, I guess I should have searched for `--color=always`

[10:37] *** sena_kun joined
[11:25] *** jjido joined
[11:25] *** jjido left
[11:39] *** KotH left
[11:39] *** KotH joined
[12:03] *** reportable6 left
[12:06] *** reportable6 joined
[12:17] <discord-raku-bot> <Anton Antonov#7232> "PSA: the Rakudo Weekly News will be published on Tuesday this week due to circumstances" -- FYI : it is usually published on Monday. (Well, the last dozen times at least...)

[12:20] <lizmat> yeah... doing other stuff today

[12:25] <discord-raku-bot> <Anton Antonov#7232> @lizmat Good luck!

[12:52] *** ufobat left
[13:21] <Tirifto> Is there a way I can have code or variables interpolated into a string dynamically (at runtime) that does not involve EVAL?

[13:22] <Altreus> What are you trying to do that "{ this }" doesn't do?

[13:28] <[Coke]> m: say "{3**2}"

[13:28] <camelia> rakudo-moar 21271aa5f: OUTPUT: «9␤»

[13:39] <Tirifto> I found a way that sort of allows me to do what I want, with caveats… I’ll try and explain my intent as well as I can.

[13:46] *** Sgeo joined
[13:50] *** anser left
[13:53] *** DuckBill joined
[13:54] <Tirifto> I have a class, and I want every one of its object to return a custom string with custom variations based on the object’s state. In other words, when the object is asked for the string, I want it to be able to read its own attributes and decide what string to build based on that; but what attributes it checks and how they affect the string should be customisable for every object. The most elegant (hypothetical) way to do this tha

[13:54] <Tirifto> t I thought of was giving each object a custom block which returns a string that holds interpolated pieces of code which check for the object’s internal state. (E.g. { $!money > 10 ?? “This person is also rich.” !! “” }.) But it seems I can’t access those or ‘self’ directly outside of the class declaration. I can refer to the variable that holds the object instead, which works provided the variable doesn’t change, bu

[13:54] <Tirifto> t doesn’t feel nearly as neat.

[13:56] <Tirifto> What also works (and feels neater) is mixing an anonymous role into each object that overrides the appropriate method with one that builds a custom string for the given object. The role’s method can’t access attributes directly, but can refer to ‘self’ and call methods on it, which is good enough. But it doesn’t feel as elegant as just passing a string (or a block with a string) to &new would, when creating new objects.

[13:56] *** DuckBill left
[13:57] *** DuckBill joined
[14:03] *** DuckBill left
[14:04] <Tirifto> To summarise, $!attribute and self.attribute both work in class declaration, but I want to do something different for every object. Giving the class a code block attribute and passing different code blocks to every object doesn’t work because I can use neither $!attribute nor self.attribute in those blocks. (I can do $object.attribute, though.) Role mixins work because I can do self.attribute in them.

[14:05] <Tirifto> So really I guess my question should be: Is there any way I can make a string with {$!attribute} outside of a class declaration, but have it interpolated later, inside of that class’s object?

[14:06] <Altreus> Tirifto: are you running that code block like $code()?

[14:06] <Altreus> Tirifto: You can do self.$code and now it's got a self inside it

[14:07] <Altreus> m: class B { has $.cat = "cat"; has $!format = { "{ .cat }" }; method format { self.$!format } }; my B $b .= new; $b.format

[14:07] <camelia> rakudo-moar 21271aa5f: ( no output )

[14:07] <Altreus> er that worked for me!

[14:08] <Altreus> m: class B { has $.cat = "cat"; has $!format = { "{ .cat }" }; method format { self.$!format } }; my B $b .= new; say $b.format

[14:08] <camelia> rakudo-moar 21271aa5f: OUTPUT: «cat␤»

[14:08] <Altreus> the REPL auto-says :)

[14:08] <Altreus> Tirifto: does that fit your situation?

[14:11] *** ufobat joined
[14:11] <Tirifto> Mmm… I don’t think so; I’ll try to write a representative example.

[14:21] <Tirifto> Altreus: All right, here is an example that does not work (as stated above), but should illustrate the use case.

[14:21] <Tirifto> m: class Cat { has $.flea is rw; has $!description; }; my Cat $felix .=new(description => “This is Felix, a handsome bicolor cat. {$!flea ~~ “Amelia” ?? “He is now carrying Amelia, his best friend.” !! “”}”);

[14:21] <camelia> rakudo-moar 21271aa5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $!flea used where no 'self' is available␤at <tmp>:1␤------> 3s Felix, a handsome bicolor cat. {$!flea7⏏5 ~~ “Amelia” ?? “He is now carrying Amel␤»

[14:22] <Tirifto> Err, in this case, it should have been $.description (read allowed), because it’s a string.

[14:24] <Altreus> Ah!

[14:24] <Altreus> Well, what you could do is accept a code for description, and in TWEAK, if description is a code, run it on self and set the real value to that

[14:25] <Tirifto> Making $!description code was my next step, but I haven’t messed around with TWEAK!

[14:26] <Tirifto> That said, what I really want is for the description to be dynamic: for the string to be rebuilt/re-interpolated every time it’s being asked for.

[14:26] <Altreus> hrm it won't let me

[14:27] <Altreus> it complains about $!flea even though it's in a block and isn't being run yet

[14:27] <Tirifto> In this example, Felix could be carrying Amelia at one moment, but later on, Amelia might hop off. So the description should always reflect the actual state of the cat.

[14:27] <Altreus> ah, in that case you should definitely have method description, and has Callable $!describer

[14:29] <Altreus> seems like the simplest way

[14:29] <Altreus> basically a format method, and a formatter property, just like DateTime

[14:29] <Altreus> (ish

[14:29] <Altreus> )

[14:32] <Tirifto> Hmm… how would that work in practice? The method &description gets its string $!describer, which holds the actual logic?

[14:33] <Altreus> yeah basically ... method description { $!describer ~~ Callable ?? self.$!describer !! $!describer }

[14:33] <Altreus> This way you don't have to wrap a static string in a block :)

[14:34] <Altreus> I guess the other way is to have « has Callable $!describer » and in TWEAK (or something) turn a raw string into a callable

[14:34] <Altreus> oh it would probably have to be BUILD cos it'll already be wrong by TWEAK time

[14:36] <Tirifto> Hmm… but will that stop Raku from interpolating the string when I pass it to &new?

[14:38] <Tirifto> For the record, here is an example showing the anonymous role solution:

[14:38] <Tirifto> m: class Cat { has $.flea is rw; }; my Cat $felix = Cat.new() but role { method description() {“This is Felix, a handsome bicolor cat. {self.flea ~~ “Amelia” ?? “He is now carrying Amelia, his best friend.” !! “”}”} }; $felix.description.say;

[14:38] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. ␤»

[14:40] <Tirifto> Or better yet, showing the dynamic side:

[14:40] <Altreus> m: role Describable { has Callable $!describer; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => -> { "This is Felix, a handsome bicolor cat. {self.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); $c.description

[14:40] <Tirifto> m: class Cat { has $.flea is rw; }; my Cat $felix = Cat.new() but role { method description() {“This is Felix, a handsome bicolor cat. {self.flea ~~ “Amelia” ?? “He is now carrying Amelia, his best friend.” !! “”}”} }; $felix.description.say; $felix.flea = “Amelia”; $felix.description.say;

[14:40] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. ␤This is Felix, a handsome bicolor cat. He is now carrying Amelia, his best friend.␤»

[14:40] <camelia> rakudo-moar 21271aa5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> 3This is Felix, a handsome bicolor cat. {7⏏5self.flea ~~ "Amelia" ?? "He is now carr␤    expecting any of:␤        term␤»

[14:40] <Altreus> again

[14:41] <Altreus> I need a grownup

[14:41] <Altreus> oh wait

[14:41] <Altreus> m: role Describable { has Callable $!describer; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => -> { "This is Felix, a handsome bicolor cat. { .flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! "" }" }); $c.description

[14:41] <camelia> rakudo-moar 21271aa5f: OUTPUT: «Impossible coercion from 'Cat' into 'Callable': no acceptable coercion method found␤  in method description at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:42] <Altreus> m: role Describable { has Callable $!describer; method description { self.$!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => -> { "This is Felix, a handsome bicolor cat. { .flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! "" }" }); $c.description

[14:42] <camelia> rakudo-moar 21271aa5f: OUTPUT: «Impossible coercion from 'Cat' into 'Callable': no acceptable coercion method found␤  in method description at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:44] <Tirifto> # Maybe we should have used a Dog; they usually respond to calls a bit better. :-)

[14:44] *** jjido joined
[14:48] <Altreus> why did this work? class B { has $.cat = "cat"; has $!format = { "{ .cat }" }; method format { self.$!format } };

[14:49] <Altreus> oh!

[14:49] <Altreus> private properties need 'is built' :D

[14:50] <Tirifto> Ohh!

[14:51] <Altreus> yeah it works if you do that xD

[14:51] <Altreus> role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => -> { "This is Felix, a handsome bicolor cat. {self.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); $c.description;

[14:51] <Altreus> oh I need a say I think

[14:51] <Altreus> role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => -> { "This is Felix, a handsome bicolor cat. {self.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[14:52] <Altreus> and an m ... sorry for spam :(

[14:52] <Altreus> m: role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => -> { "This is Felix, a handsome bicolor cat. {self.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[14:52] <camelia> rakudo-moar 21271aa5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> 3This is Felix, a handsome bicolor cat. {7⏏5self.flea ~~ "Amelia" ?? "He is now carr␤    expecting any of:␤        term␤»

[14:52] <Altreus> m: role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Bono", describer => { "This is Felix, a handsome bicolor cat. {.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[14:52] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. ␤»

[14:52] <Altreus> m: role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Amelia", describer => { "This is Felix, a handsome bicolor cat. {.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[14:52] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. He is now carrying Amelia, his best friend.␤»

[14:53] <Altreus> these things were needed: 1. is built; 2. don't use ->

[14:53] <Altreus> 3. use .flea not self.flea nor $!flea

[14:56] <Tirifto> Altreus: Seems to work! Now I just need to read it over more carefully to grasp it. xP

[15:03] <Altreus> self.&code is a useful trick that works in Perl5 too :)

[15:03] *** gordonfish- joined
[15:04] *** gordonfish left
[15:10] <Tirifto> Altreus: Okay, so I’m still far from wrapping my head around all of this, but this has definitely answered my question and taught me something new; thanks a lot!

[15:14] <Tirifto> The way this works is that the code (describer) gets called on the object as a method, so the object becomes an argument and implicitly falls into $_, so the .flea gets called on it… did I get that right?

[15:17] *** gordonfish joined
[15:19] *** gordonfish- left
[15:22] *** gordonfish left
[15:22] <Altreus> Ah that's where it's unclear to me, because I can't tell whether it goes into $_ or what

[15:23] <Altreus> But yes, however it ends up there, it basically acts as a pseudo-method

[15:28] *** gordonfish joined
[15:31] *** Kaipi left
[15:40] *** gordonfish left
[15:51] <SmokeMachine> yes, that's it... `$obj.&func` is the same as calling `func($obj)` the same for `self.&!describer` being the same as `&!describer(self)`

[15:51] <SmokeMachine> m: role Describable { has &!describer is built; method description { &!describer(self) } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Amelia", describer => { "This is Felix, a handsome bicolor cat. {"He is now carrying Amelia, his best friend." if .flea ~~ "Amelia"}" }); say $c.description; # for example

[15:51] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. He is now carrying Amelia, his best friend.␤»

[15:53] <Altreus> SmokeMachine: but that means it's passed as the first argument, and not that special `self` that normal methods get?

[15:53] <Altreus> SmokeMachine: that is to say, it looks like code($_) rather than code(Any:)

[15:53] <Altreus> that explains why -> broke it; it needs to be -> $obj for that to work

[15:58] *** jjido left
[15:59] <SmokeMachine> that's not self, that's `$_`

[16:00] <SmokeMachine> m: sub bla($_) { .say }; 42.&bla

[16:00] <camelia> rakudo-moar 21271aa5f: OUTPUT: «42␤»

[16:02] <SmokeMachine> m: &bla = { .say }; 42.&bla; bla(42)

[16:02] <camelia> rakudo-moar 21271aa5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bla used at line 1␤␤»

[16:03] <SmokeMachine> m: my &bla = { .say }; 42.&bla; bla(42)

[16:03] <camelia> rakudo-moar 21271aa5f: OUTPUT: «42␤42␤»

[16:04] *** Kaiepi joined
[16:04] <SmokeMachine> m: my &bla = { MY::.say }; 42.bla

[16:04] <camelia> rakudo-moar 21271aa5f: OUTPUT: «No such method 'bla' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[16:04] <SmokeMachine> m: my &bla = { MY::.say }; 42.&bla

[16:04] <camelia> rakudo-moar 21271aa5f: OUTPUT: «PseudoStash.new(($_ => 42))␤»

[16:05] <SmokeMachine> Altreus: ^^

[16:06] *** melezhik joined
[16:06] <melezhik> .

[16:06] <SmokeMachine> m: my &bla = { MY::.say }; bla; sub ble { MY::.say }; my &bli = -> { MY::.say }; bli

[16:06] <camelia> rakudo-moar 21271aa5f: OUTPUT: «PseudoStash.new(($_ => (Any)))␤PseudoStash.new(($_ => (Any)))␤»

[16:07] <SmokeMachine> m: my &bla = { MY::.say }; bla; sub ble { MY::.say }; ble; my &bli = -> { MY::.say }; bli

[16:07] <camelia> rakudo-moar 21271aa5f: OUTPUT: «PseudoStash.new(($_ => (Any)))␤PseudoStash.new(($! => Nil, $/ => Nil, $_ => (Any), $¢ => Nil))␤PseudoStash.new(($_ => (Any)))␤»

[16:07] <SmokeMachine> m: my &bla = { MY::.say }; bla 42; sub ble { MY::.say }; ble 42; my &bli = -> { MY::.say }; bli 42

[16:07] <camelia> rakudo-moar 21271aa5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling ble(Int) will never work with declared signature ()␤at <tmp>:1␤------> 3::.say }; bla 42; sub ble { MY::.say }; 7⏏5ble 42; my &bli = -> { MY::.say }; bli 4␤»

[16:07] <SmokeMachine> m: my &bla = { MY::.say }; bla 42; sub ble { MY::.say }; ble; my &bli = -> { MY::.say }; bli 42

[16:07] <camelia> rakudo-moar 21271aa5f: OUTPUT: «PseudoStash.new(($_ => 42))␤Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤PseudoStash.new(($! => Nil, $/ => Nil, $_ => (Any), $¢ => Nil))␤»

[16:07] <SmokeMachine> m: my &bla = { MY::.say }; bla 42; sub ble { MY::.say }; ble; my &bli = -> { MY::.say }; bli

[16:07] <camelia> rakudo-moar 21271aa5f: OUTPUT: «PseudoStash.new(($_ => 42))␤PseudoStash.new(($! => Nil, $/ => Nil, $_ => (Any), $¢ => Nil))␤PseudoStash.new(($_ => (Any)))␤»

[16:16] *** melezhik left
[16:35] <raydiak> note that self does work if you use a method as the callable:

[16:35] <raydiak> m: role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Amelia", describer => method { "This is Felix, a handsome bicolor cat. {self.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[16:35] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. He is now carrying Amelia, his best friend.␤»

[16:37] *** dakkar left
[16:48] <Tirifto> Thank you, SmokeMachine & raydiak;

[16:49] <Altreus> raydiak: oh that's neat, I wondered how to do that!

[16:51] <Tirifto> I guess that also makes intuitive sense, since you can have an attribute (that you can set) that literally is a method. :-)

[16:53] <raydiak> we have first-class anonymous methods, detached from any class. you can pass them around, put them into a my variable or whatever just like anonymous subs

[16:53] <raydiak> m: my &m = method { .say }; 42.&m

[16:53] <camelia> rakudo-moar 21271aa5f: OUTPUT: «(Any)␤»

[16:53] <raydiak> m: my &m = method { self.say }; 42.&m

[16:53] <camelia> rakudo-moar 21271aa5f: OUTPUT: «42␤»

[16:55] <Tirifto> Raku is like the wings of Camelia: beautiful and elaborate.

[16:56] <raydiak> glad you like it :)

[16:56] *** synthmeat1 is now known as synthmeat

[16:56] <raydiak> personally I think the block how you had it was a bit more readable than an anonymous method, but just wanted to throw it out there for educational purposes

[16:57] <SmokeMachine> m: my &m = method { self.say }; m 42

[16:57] <camelia> rakudo-moar 21271aa5f: OUTPUT: «42␤»

[16:57] <Altreus> I did play with sub x(Any:) but it complained - now I know why

[16:57] <SmokeMachine> It also works the same way ^^

[16:58] <raydiak> heh nice SmokeMachine, I never thought to try that

[17:02] <Tirifto> So the reason I can’t use $!attribute or self.attribute in an ordinary block is not that Raku is trying to interpolate them on sight (it apparently doesn’t), but rather that self and the $! twigil are special and it only allows them to appear in the appropriate context (e.g. class definition or method)?

[17:04] <Tirifto> (Or evaluate, rather. I was thinking of blocks in strings in blocks, but I guess it goes for any block.)

[17:08] <raydiak> correct

[17:09] <Tirifto> Thanks again! ^ ^

[17:09] <raydiak> you're welcome of course, happy to help :)

[17:11] <SmokeMachine> 17:35 <raydiak> m: role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Amelia", describer => method { "This is Felix, a handsome bicolor cat. {$.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[17:12] <SmokeMachine> m: role Describable { has Callable $!describer is built; method description { $!describer ~~ Callable ?? self.$!describer !! $!describer } }; class Cat does Describable { has $.flea is rw }; my Cat $c .= new( flea => "Amelia", describer => method { "This is Felix, a handsome bicolor cat. {$.flea ~~ "Amelia" ?? "He is now carrying Amelia, his best friend." !! ""}" }); say $c.description;

[17:12] <camelia> rakudo-moar 21271aa5f: OUTPUT: «This is Felix, a handsome bicolor cat. He is now carrying Amelia, his best friend.␤»

[17:12] <SmokeMachine> You can use $.attr instead of self.attr

[17:15] <Tirifto> Ah right, that also works with the method method. Can ‘$.attr’ be regarded as a (perhaps a slightly more descriptive) alias for ‘self.attr’?

[17:17] *** jdv left
[17:18] *** jdv joined
[17:26] *** sena_kun left
[17:36] <raydiak> I believe that's correct. technically it doesn't even have to be an attribute:

[17:36] <raydiak> m: class { method a { 42 }; method m { say $.a } }.m

[17:36] <camelia> rakudo-moar 21271aa5f: OUTPUT: «42␤»

[17:37] *** gordonfish joined
[17:44] *** jjido joined
[17:51] *** linkable6 left
[17:53] *** linkable6 joined
[18:01] *** vrurg_ joined
[18:02] *** reportable6 left
[18:02] *** vrurg left
[18:31] *** jjido left
[18:42] *** vrurg_ is now known as vrurg

[18:44] *** synthmeat left
[18:52] <casaca> CIAvash: thanks for `Curry`! 

[18:52] *** ufobat left
[19:00] *** patrickb joined
[19:02] <CIAvash> casaca: you're welcome!

[19:05] *** synthmeat joined
[19:07] *** jjido joined
[19:08] <casaca> hope it's included in core someday

[19:12] *** discord-raku-bot left
[19:14] *** discord-raku-bot joined
[19:20] *** jjido left
[19:28] *** childlikempress joined
[19:28] *** moon-child left
[19:33] *** cbk joined
[19:37] *** Xliff_ left
[20:03] *** jjido joined
[20:05] *** reportable6 joined
[20:07] *** vasko left
[20:09] *** monochromec joined
[20:09] *** vasko joined
[20:10] *** monochromec left
[20:37] *** patrickb left
[20:51] *** childlikempress is now known as moon-child

[20:52] <Geth> ¦ Raku-Steering-Council/main: ad0130ccd5 | (Geoffrey Broadwell)++ | minutes/20211002.md

[20:52] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2021-10-02

[20:52] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/ad0130ccd5

[20:53] *** cbk left
[21:30] <Geth> ¦ Raku-Steering-Council/main: 5 commits pushed by (Vadim Belman)++

[21:30] <Geth> ¦ Raku-Steering-Council/main: bf5e611ac1 | Added 'Call For Volunteers' announcement

[21:30] <Geth> ¦ Raku-Steering-Council/main: edd54d0941 | Errata fixes

[21:30] <Geth> ¦ Raku-Steering-Council/main: 5265a8828c | One more overlooked fix

[21:30] <Geth> ¦ Raku-Steering-Council/main: 284a548c83 | Addressed corrections from @JJ and @tbrowder

[21:30] <Geth> ¦ Raku-Steering-Council/main: b0ed130ce7 | Merge pull request #45 from vrurg/call-for-volunteers

[21:30] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/compare/ad0130ccd53f...b0ed130ce77d

[21:53] *** evalable6 left
[21:53] *** linkable6 left
[21:55] *** linkable6 joined
[21:56] *** evalable6 joined
[22:01] *** jjido left
[22:15] *** berber44 joined
[22:23] *** berber44 left
[22:25] *** berber44 joined
[22:35] *** berber44 left
[23:35] *** evalable6 left
[23:35] *** linkable6 left
