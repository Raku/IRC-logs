[00:02] *** reportable6 left
[00:05] *** Xliff left
[00:05] *** reportable6 joined
[01:05] *** coverable6 left
[01:05] *** reportable6 left
[01:05] *** notable6 left
[01:05] *** evalable6 left
[01:05] *** linkable6 left
[01:05] *** sourceable6 left
[01:05] *** tellable6 left
[01:05] *** benchable6 left
[01:05] *** squashable6 left
[01:05] *** quotable6 left
[01:05] *** unicodable6 left
[01:05] *** bloatable6 left
[01:05] *** statisfiable6 left
[01:05] *** shareable6 left
[01:05] *** committable6 left
[01:05] *** releasable6 left
[01:05] *** nativecallable6 left
[01:05] *** bisectable6 left
[01:05] *** greppable6 left
[01:06] *** coverable6 joined
[01:06] *** shareable6 joined
[01:06] *** reportable6 joined
[01:07] *** nativecallable6 joined
[01:08] *** tellable6 joined
[01:08] *** greppable6 joined
[01:32] *** frost joined
[01:43] *** gabiruh left
[01:43] *** gabiruh joined
[01:49] *** gordonfish- is now known as gordonfish

[02:01] *** nine left
[02:01] *** nine joined
[02:06] *** releasable6 joined
[02:06] *** bisectable6 joined
[02:06] *** sourceable6 joined
[02:06] *** statisfiable6 joined
[02:07] *** evalable6 joined
[02:07] *** unicodable6 joined
[02:07] *** committable6 joined
[02:07] *** benchable6 joined
[02:08] *** linkable6 joined
[03:06] *** bloatable6 joined
[03:07] *** notable6 joined
[03:08] *** quotable6 joined
[03:33] *** jess left
[04:06] *** bdju left
[04:06] *** Altreus left
[04:06] *** perryprog left
[04:06] *** Ekho left
[04:06] *** greyrat left
[04:06] *** [Coke] left
[04:06] *** tobs left
[04:06] *** [Coke] joined
[04:06] *** tobs joined
[04:06] *** squashable6 joined
[04:07] *** perryprog joined
[04:07] *** greyrat joined
[04:07] *** Altreus joined
[04:11] *** bdju joined
[04:15] *** Ekho joined
[04:19] *** xkr47 left
[04:19] *** demostanis[m] left
[04:19] *** happy-dude left
[04:19] *** mtj left
[04:19] *** ugexe left
[04:19] *** dpk left
[04:19] *** samebchase left
[04:19] *** tib left
[04:19] *** samcv left
[04:19] *** mykhal left
[04:19] *** corwin left
[04:19] *** eof left
[04:19] *** xkr47_ joined
[04:19] *** tib_ joined
[04:19] *** [dpk] joined
[04:19] *** tib_ is now known as tib

[04:19] *** summerisle joined
[04:19] *** samebchase joined
[04:19] *** ugexe joined
[04:19] *** xkr47_ is now known as xkr47

[04:19] *** mplsCorwin joined
[04:19] *** mtj joined
[04:20] *** mplsCorwin left
[04:20] *** mplsCorwin joined
[04:20] *** samcv joined
[04:22] *** amenonsen joined
[04:27] *** mplsCorwin is now known as corwin

[04:30] *** demostanis[m] joined
[04:32] *** happy-dude joined
[05:03] *** [dpk] is now known as dpk

[05:54] *** abraxxa joined
[06:00] *** abraxxa left
[06:01] *** abraxxa joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:41] *** abraxxa left
[06:41] *** abraxxa joined
[06:42] *** jjido joined
[07:18] *** Sgeo left
[07:31] *** lichtkind joined
[07:46] *** dakkar joined
[08:20] *** squashable6 left
[08:22] *** squashable6 joined
[08:28] *** jjido left
[08:45] *** squashable6 left
[09:48] *** squashable6 joined
[09:48] <discord-raku-bot> <Anton Antonov#7232> Yesterday I was experimenting with regex extractions from a large set

[09:48] <discord-raku-bot> <Anton Antonov#7232> of files. I found that using a regex with 3 captions is ~20 slower

[09:48] <discord-raku-bot> <Anton Antonov#7232> than using a version of it with only 1 caption. Is this expected

[09:48] <discord-raku-bot> <Anton Antonov#7232> and/or documented somewhere? E.g. `XMLSearch0` is ~20 times slower than

[09:48] <discord-raku-bot> <Anton Antonov#7232> `XMLSearch1`:

[09:48] <discord-raku-bot> <Anton Antonov#7232> ```

[09:48] <discord-raku-bot> <Anton Antonov#7232> my regex XMLSearch0 {

[09:48] <discord-raku-bot> <Anton Antonov#7232>     <header>=('<FactData>')

[09:48] <discord-raku-bot> <Anton Antonov#7232>     $<data>=(<-[<>]>*)

[09:48] <discord-raku-bot> <Anton Antonov#7232>     <ender>=('</FactData>')

[09:48] <discord-raku-bot> <Anton Antonov#7232> }

[09:48] <discord-raku-bot> <Anton Antonov#7232> my regex XMLSearch1 {

[09:53] <moritz_> well, captures do require the regex engine to keep more data around, and there's an overhead to extracting it. I don't know if 20% is reasonable, but it cannot be zero cost

[09:54] <discord-raku-bot> <Anton Antonov#7232> @mortiz_ It is not 20% slower, it is 20 times slower.

[10:00] <Geth> ¦ raku-mode: fd286b2d1a | (Philip Kaludercic)++ | 2 files

[10:00] <Geth> ¦ raku-mode: Remove pkg-info dependency

[10:00] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/fd286b2d1a

[10:00] <Geth> ¦ raku-mode: 20610a83b5 | (Tom Browder)++ (committed using GitHub Web editor) | 2 files

[10:00] <Geth> ¦ raku-mode: Merge pull request #53 from phikal/master

[10:00] <Geth> ¦ raku-mode: 

[10:00] <Geth> ¦ raku-mode: Remove pkg-info dependency

[10:00] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/20610a83b5

[10:32] <grondilu> raku: class A {}; class B is A {}; say B.bless: A.new

[10:32] <evalable6> grondilu, rakudo-moar 10b327292: OUTPUT: «(exit code 1) Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/Y1_TWp4g_f line 1␤␤»

[10:32] <grondilu> I think that used to work

[10:32] <grondilu> long time ago though

[10:33] <lizmat> grondilu: what should that do ?

[10:34] <lizmat> bless only takes named parameters

[10:34] <grondilu> couldn't it take an instance too?

[10:35] <grondilu> and bless it to a Class

[10:35] <grondilu> I vaguely recall a similar mechanism in P5

[10:35] <lizmat> why not do B.new ?

[10:36] <grondilu> well that does not work

[10:36] <grondilu> I want to build a new B instance from a A one

[10:36] <lizmat> m: class A {}; class B is A {}; say B.new

[10:36] <camelia> rakudo-moar 10b327292: OUTPUT: «B.new␤»

[10:37] <dakkar> grondilu: in general, "build a subclass instance from a superclass instance" is not a well-defined thing to do

[10:38] <grondilu> Oh I guess I should use a role for B instead

[10:38] <dakkar> probably

[10:39] <lizmat> and then use but: https://docs.raku.org/routine/but

[10:39] <grondilu> yeah that seems sensible

[10:39] <dakkar> (if you're coming from perl5, and thinking of the "re-blessing" practice… raku doesn't do that, because it's nasty and there's better ways now)

[10:40] <dakkar> (and I have perl5 production code that reblesses happily)

[10:48] *** evalable6 left
[10:48] *** linkable6 left
[10:49] *** linkable6 joined
[10:51] <lizmat> notable6: weekly

[10:51] <notable6> lizmat, No notes for “weekly”

[10:52] <grondilu> lol I'm digging into some old code and I'm reminded that there used to be a standard module called "MONKEY_TYPING"

[10:53] <lizmat> it's now built in  :-)

[10:54] <grondilu> it was to augmont core classes, right?

[10:54] <grondilu> *augment

[10:55] <lizmat> https://docs.raku.org/language/pragmas#index-entry-MONKEY__pragma

[10:55] <lizmat> https://docs.raku.org/syntax/augment

[10:56] *** sena_kun joined
[10:56] <grondilu> again I'm pretty sure I should use roles instead

[10:56] <lizmat> yeah, augment is *really* a last resort

[10:57] <lizmat> as it messes with all sorts of things, and breaks optimizations

[10:57] <grondilu> I think I wrote this code before I knew about roles, or before they were supported

[10:57] <lizmat> yeah, that's quite possible

[10:58] * grondilu checks latest commit date

[10:58] <grondilu> "30 May 2012" 

[10:59] <grondilu> might as well say prehistory

[11:00] <grondilu> this code will need lots of rewriting

[11:08] <lizmat> yeah, pre GLR code might need some close inspection

[11:10] <grondilu> can you remind me what GLR is?  Google did not help much.

[11:11] <grondilu> Great List Refactor

[11:12] <grondilu> I've just recalled

[11:16] <Altreus> clickbait when?

[11:16] <Altreus> :)

[11:18] <grondilu> on the other hand my Digest library is fairly old too but seems to be running fine : https://github.com/grondilu/libdigest-perl6

[11:19] <grondilu> still I bet I could modernize it though

[11:22] <grondilu> like all these .AT-POS calls, are they still needed for better performance?

[11:23] <lizmat> no, they're not

[11:23] <lizmat> these will pretty quickly be optimized away

[11:23] <lizmat> once a process runs for a bit

[11:27] <lizmat> compare:

[11:28] <lizmat> m: my @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now

[11:28] <camelia> rakudo-moar 10b327292: OUTPUT: «0.375355557␤»

[11:28] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS(0) for ^1000 }; say now - INIT now

[11:28] <camelia> rakudo-moar 10b327292: OUTPUT: «0.238405566␤»

[11:28] <lizmat> huh?

[11:28] <lizmat> m: my @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now

[11:28] <camelia> rakudo-moar 10b327292: OUTPUT: «0.375450081␤»

[11:28] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS(0) for ^1000 }; say now - INIT now

[11:28] <camelia> rakudo-moar 10b327292: OUTPUT: «0.240822734␤»

[11:28] <lizmat> intriguing, I don't see a difference on my MacOS box  

[11:29] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now   # fuh

[11:29] <camelia> rakudo-moar 10b327292: OUTPUT: «0.346554665␤»

[11:29] <lizmat> *duh

[11:30] <lizmat> m: my @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now

[11:30] <camelia> rakudo-moar 10b327292: OUTPUT: «0.365621664␤»

[11:30] <lizmat> m: my @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now   # fuh

[11:30] <camelia> rakudo-moar 10b327292: OUTPUT: «0.336668571␤»

[11:30] <lizmat> m: my int @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now

[11:30] <camelia> rakudo-moar 10b327292: OUTPUT: «0.398720313␤»

[11:30] <lizmat> m: my int @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now

[11:30] <camelia> rakudo-moar 10b327292: OUTPUT: «0.454114283␤»

[11:30] <lizmat> m: my int @a = ^1000; for ^10000 { @a.AT-POS($_) for ^1000 }; say now - INIT now

[11:30] <camelia> rakudo-moar 10b327292: OUTPUT: «0.449291634␤»

[11:30] <lizmat> m: my int @a = ^1000; for ^10000 { @a[$_] for ^1000 }; say now - INIT now

[11:30] <camelia> rakudo-moar 10b327292: OUTPUT: «0.376347564␤»

[11:31] <lizmat> grondilu: I'd say, stick with postcircumfix []  :-)

[11:34] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/13/2021-37-receding/

[11:36] <Altreus> there it is!

[11:40] <lizmat> yup :-)

[11:40] <Altreus> I like Flavio's blogs

[11:41] <Altreus> polettix: I like your blogs :D

[11:46] <Altreus> The point about "all but the last one" for a slurpy argument is interesting - it immediately makes me think of prolog

[11:46] <Altreus> Is raku introspective enough to even have this ability?

[11:50] <Altreus> lizmat: your first twitter item has the wrong link :)

[11:50] <moritz_> counting lists from the end is a bad idea if you have lazy lists

[11:55] <Altreus> ah yes lazy

[11:55] <Altreus> can we have "isn't"?

[11:55] <Altreus> sub x (List isn't lazy \x)

[11:56] *** linkable6 left
[11:58] *** linkable6 joined
[12:04] *** reportable6 left
[12:23] *** keutoi joined
[12:55] <guifa> lizmat++ (you've been pushing these out much earlier these days haha I used to have to wait until the end of work to read them!)

[12:58] <grondilu> degenerate cases are so annoying.  Like if I want to turn an integer into a blob8, I can usually write blob8.new: $n.polymod(256 xx *), but that doesn't work for $n == 0

[12:59] <grondilu> raku: say blob8.new: 0.polymod(256 xx *)

[13:00] <grondilu> m: say blob8.new: 0.polymod(256 xx *)

[13:00] <camelia> rakudo-moar 10b327292: OUTPUT: «Blob[uint8]:0x<>␤»

[13:00] <grondilu> Am I supposed to not use polymod for this?

[13:07] *** reportable6 joined
[13:10] *** avar left
[13:14] *** avar joined
[13:34] <Altreus> lizmat: also your first list item of Core Developments appears to have a font colour override

[13:41] <Util> grondilu: polymod is what I would use. I had not thought about that degenerate case; I would use `|| 0` to solve it, but I agree that it is annoying to have to remember to do so.

[13:42] <Util> m: for 258,42,0 { say Blob.new( .polymod(256 xx *) || 0) }

[13:42] <camelia> rakudo-moar 10b327292: OUTPUT: «Blob:0x<02 01>␤Blob:0x<2A>␤Blob:0x<00>␤»

[13:42] <Util> Now that I think about it, `0.polymod($any_positive_integer)` should return `0`, not the empty list, IMHO.

[13:42] <Util> Maybe this is a bug.

[13:44] <Util> Roast does not test it: https://github.com/Raku/roast/blob/master/S32-num/polymod.t

[13:46] <Altreus> is there a bot to show docs?

[13:46] <Altreus> or, reframed: I'm too lazy to open a new browser tab when I'm already in IRC

[13:53] <Altreus> when you give polymod a list n xx *, what is the *?

[13:55] <grondilu> Util: I don't think this is a bug.  As written in the doc : "The last non-zero value will be the last remainder."

[13:55] <grondilu> so if the first value is zero, then you get nothing.

[13:56] <Altreus> the "implementation" in the doc also implies that, because it's described in terms of a for loop

[13:56] <Altreus> eh, no, wait

[13:57] <Altreus> the implementation implies you get something because it should iterate over your integer

[13:57] <Altreus> m: say 0 mod 10

[13:57] <camelia> rakudo-moar 10b327292: OUTPUT: «0␤»

[13:57] <grondilu> though it's a bit confusing, since polymod doesn't only give remainders, but also quotients

[13:58] <Altreus> in fact the docs show that if you keep giving it a bunch of things that mod to 0 you still get them:   say 120.polymod:      1, 10, 10², 10³, 10⁴;  # OUTPUT: «(0 0 12 0 0 0)␤»

[13:58] <Altreus> so 0.polymod(list) should give you n+1 zeroes

[13:58] <Altreus> "The number of remainders will be always one more item than the number of given divisors"

[13:58] <Altreus> zero shouldn't have any special behaviour at all, as far as I can see

[13:59] <grondilu> yes but : "If the divisors are given as a lazy list, runs until the remainder is 0 or the list of divisors is exhausted."

[13:59] <Altreus> ah

[13:59] <Altreus> but do you get at least one 0?

[13:59] <grondilu> nope

[13:59] <Altreus> m: say 10.polymod(10 xx *)

[13:59] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 1)␤»

[13:59] <Altreus> oh

[14:00] <grondilu> m: say blob8.new: 0.polymod(256 xx *)

[14:00] <camelia> rakudo-moar 10b327292: OUTPUT: «Blob[uint8]:0x<>␤»

[14:00] <Altreus> that's not how maths works

[14:00] <Altreus> :D

[14:00] <Altreus> m: say 10.polymod(1 xx *)

[14:00] <camelia> rakudo-moar 10b327292: OUTPUT: «(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)␤»

[14:00] <Altreus> !

[14:00] <Altreus> I've been lied to

[14:00] <grondilu> that's not right

[14:01] <grondilu> or rather, LTA

[14:02] <grondilu> also arguably that's a degenerate case too

[14:02] <Altreus> hrm

[14:07] <grondilu> .../src/core.c/Real.pm6#L74

[14:07] <grondilu> "last if $lazy and not $more;"

[14:08] <grondilu> when divisor is 1, $more is constant

[14:10] <Altreus> right, div 1 - makes sense

[14:10] <Altreus> Except that's not how you check that the remainder is not 0 ;)

[14:11] <Altreus> I guess it has to be a lazy list *entirely* of 1s

[14:11] <grondilu> I don't think so

[14:12] <Altreus> I mean if it's not then it'll end due to the list, so it's a very edge case

[14:12] <grondilu> 1 cannot be a remainder in this case

[14:13] <grondilu> an infinite list of zeros actually makes some sense

[14:14] *** justsomeguy joined
[14:14] <grondilu> it is, however, very much a degenerate case, and maybe the function should fail instoad

[14:14] <Altreus> except that the doc says it should stop

[14:14] <Altreus> I'll pop an issue in and see what people think

[14:14] <grondilu> I think the issue is with the doc, not the function.

[14:15] <Altreus> this will give people the option to decide which :)

[14:15] *** Sgeo joined
[14:15] <grondilu> fair point

[14:19] *** leont left
[14:19] *** leont joined
[14:20] <Altreus> https://github.com/rakudo/rakudo/issues/4523 :)

[14:24] <Altreus> lizmat: perhaps the weekly could also highlight GH issues that turn into discussions? Unless it already does and I've not remembered :)

[14:26] <moritz_> Altreus: if you notice an issue turning into a weekly-worthy discussion, just write "weekly: " and then the URL to the issue in here. There's a bot that collects those links

[14:26] *** rjbs left
[14:27] *** rjbs joined
[14:34] <grondilu> I think ideally polymod should be written with &infix:mod and some clever FP tricks.  Not necesserarily in the core, but as part of the documentation, to clarify what polymod does.

[14:35] <grondilu> so that we can better assess what the degenerate cases should be.

[14:36] <dakkar> https://github.com/rakudo/rakudo/blob/b14d404a195e08a0a12486d0c4ac0d53d77a1ac5/src/core.c/Int.pm6#L119-L149 it's definitely written using `mod`

[14:38] <Util> Altreus: `256 xx *` is an infinite list of 256, 256, 256....  (Answering the q from 45 minutes ago)

[14:39] <grondilu> Isn't there a way to write it with reduce and zip or something?

[14:40] <dakkar> maybe? /me tries

[14:40] <Geth> ¦ raku-mode: 095b8666e3 | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md

[14:40] <Geth> ¦ raku-mode: Bump version for PR #59

[14:40] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/095b8666e3

[14:41] <Geth> ¦ raku-mode: 155b0b7a4a | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md

[14:41] <Geth> ¦ raku-mode: Update CHANGELOG.md

[14:41] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/155b0b7a4a

[14:42] <Geth> ¦ raku-mode: ef229addc0 | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md

[14:42] <Geth> ¦ raku-mode: Update CHANGELOG.md

[14:42] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/ef229addc0

[14:46] <Geth> ¦ raku-mode: eaac071f17 | (Tom Browder)++ (committed using GitHub Web editor) | CHANGELOG.md

[14:46] <Geth> ¦ raku-mode: Correct PR merge date

[14:46] <Geth> ¦ raku-mode: review: https://github.com/Raku/raku-mode/commit/eaac071f17

[14:53] *** frost left
[14:56] <Altreus> Util: that's what I thought, but the docs say it can't be infinite!

[14:57] <Altreus> grondilu: the docs *do* show it in terms of mod and div=

[14:57] <Altreus> from which one would expect 0.polymod(anything) would return a single 0

[14:58] *** justsomeguy left
[14:58] <Util> grondilu, dakkar: This is the closest I got to zip/reduce. AFK now.

[14:58] <Util> m: say 3 + 5* 256 + 7*256*256;

[14:58] <camelia> rakudo-moar 10b327292: OUTPUT: «460035␤»

[14:58] <Util> m: sub pm ($acc is copy) {return (256 xx *).produce({ sink $^a; my $x = $acc mod $^b; $acc div= $^b; last if !$x; $x; }).skip.head(12); }; say pm(460035);

[14:59] <camelia> rakudo-moar 10b327292: OUTPUT: «(3 5 7)␤»

[14:59] <dakkar> the gather/for/take way is clearer to me

[15:00] <dakkar> (especially the way it's written for Real; the Int one is essentially the same but split in lazy/not-lazy maybe for performance reasons)

[15:04] <Altreus> the gather/take for Int also fails to stop at the documented time

[15:05] <dakkar> the docs are wrong ☺

[15:05] <Altreus> well it should be documented that they're wrong ;)

[15:05] <dakkar> (roast says so: `is 86400.polymod(60), (0,1440)`

[15:07] <Altreus> I meant that a lazy list should stop when the mod is zero

[15:08] <dakkar> yes, sorry, wrong line

[15:08] <dakkar> https://github.com/Raku/roast/blob/master/S32-num/polymod.t#L11

[15:09] <Altreus> oh but wait that means the doc was right

[15:09] <Altreus> which means the infinite-ones behaviour is wrong :)

[15:09] <Altreus> I note that zero is not part of that list

[15:09] <Altreus> the output I mean

[15:10] <dakkar> sure is, it's the first element

[15:10] <Altreus> ah it's the first part, not the last

[15:10] <dakkar> 123456780 mod 10 == 0

[15:10] *** linkable6 left
[15:11] <Altreus> hmm

[15:12] <Altreus> my brain is failing to grasp at a point related to this "base conversion" example in the docs

[15:13] <Altreus> But it's along the lines of, if you can use polymod to do a base conversion it stands to reason it should be able to return multiple zeroes in a row

[15:13] <Altreus> yes

[15:13] <Altreus> m: say 65.polymod(2 xx *)

[15:13] <camelia> rakudo-moar 10b327292: OUTPUT: «(1 0 0 0 0 0 1)␤»

[15:14] <dakkar> yes

[15:14] <Altreus> ^ polymod cannot possibly stop when it gets a zero in a lazy list

[15:14] <Altreus> I'll add it to my issue

[15:14] <Altreus> oh it has been noted

[15:15] <dakkar> and I've added the link to roast

[15:15] <dakkar> re: infinite list of 1s, the current behavious looks good to me

[15:16] <dakkar> (base-1 is a degenerate case and should not be catered to)

[15:17] <dakkar> otoh, `0.polymod(@anything)` should probably return `(0,)` instead of `()`…

[15:17] <Altreus> yes, with an example of returning multiple zeroes in a row it's clear the docs are misworded

[15:17] <Altreus> my maths brain doesn't come up with such conclusions as quickly as people more knee-deep in the knowledge!

[15:17] <dakkar> that's why there's more than one person building this whole thing 😁

[15:34] <Altreus> oh I thought it was entirely jnthn

[16:09] *** keutoi left
[16:11] *** linkable6 joined
[16:40] *** dakkar left
[17:21] *** melezhik joined
[17:21] <melezhik> .

[17:26] <Altreus> .

[17:27] *** sena_kun left
[17:49] *** pjlsergeant left
[17:49] *** pjlsergeant joined
[18:02] *** reportable6 left
[18:04] *** zostay left
[18:05] *** zostay joined
[18:09] *** Maylay left
[18:13] *** perlbot left
[18:13] *** simcop2387 left
[18:16] *** xinming joined
[18:26] *** Maylay joined
[18:26] *** kjp left
[18:28] *** kjp joined
[18:34] <melezhik> when I upload my module to zef should I remove (eventually) it from PAUSE index?

[18:34] <melezhik> I have 2 Sparky listed now on rakuland - https://raku.land/?q=Sparky which is confusing ...

[18:44] *** Maylay left
[18:51] *** evalable6 joined
[18:54] *** Maylay joined
[18:55] <tonyo> melezhik: if you'd like to.  there's been a lot of discussion on how to de-dupe (or whether to) in #raku-land

[18:55] <tonyo> it seems like it shouldn't be on the consumer side to dedupe but up to the author on how they're presented because they are _technically_ different dists

[19:00] *** Maylay left
[19:02] *** Maylay joined
[19:05] *** reportable6 joined
[19:13] *** kawaii_ left
[19:13] *** kawaii_ joined
[19:16] <El_Che> you "technically" won :)

[19:17] <tonyo> technically is the best kind of ally

[19:17] <El_Che> it's like winning a boxing match by points

[19:18] <El_Che> just playing with words here, technically not making a point

[19:56] *** perlbot joined
[19:59] *** simcop2387 joined
[20:03] *** squashable6 left
[21:03] *** reportable6 left
[21:03] *** statisfiable6 left
[21:03] *** linkable6 left
[21:03] *** sourceable6 left
[21:03] *** committable6 left
[21:03] *** evalable6 left
[21:03] *** bisectable6 left
[21:03] *** nativecallable6 left
[21:03] *** unicodable6 left
[21:03] *** benchable6 left
[21:03] *** shareable6 left
[21:03] *** greppable6 left
[21:03] *** notable6 left
[21:03] *** quotable6 left
[21:03] *** bloatable6 left
[21:03] *** releasable6 left
[21:03] *** tellable6 left
[21:03] *** coverable6 left
[21:03] *** releasable6 joined
[21:03] <melezhik> tonyo , i see, thanks. i will probably remove my old versions from pause then ...

[21:04] *** sourceable6 joined
[21:04] *** linkable6 joined
[21:04] *** benchable6 joined
[21:04] *** coverable6 joined
[21:05] *** squashable6 joined
[21:05] *** quotable6 joined
[21:06] *** evalable6 joined
[21:06] *** nativecallable6 joined
[21:14] *** melezhik left
[22:03] *** unicodable6 joined
[22:04] *** tellable6 joined
[22:05] *** greppable6 joined
[22:05] *** notable6 joined
[22:06] *** shareable6 joined
[22:06] *** bloatable6 joined
[22:11] *** Xliff joined
[22:12] <Xliff> Is there a MetaModel call that can find a method candidate if given a capture?

[22:12] <Xliff> Ah! Cando

[22:42] *** squashable6 left
[22:44] *** squashable6 joined
[22:47] *** sftp_ joined
[22:48] *** sftp left
[22:48] *** sftp_ is now known as sftp

[23:04] *** bisectable6 joined
[23:05] *** committable6 joined
[23:05] *** statisfiable6 joined
[23:28] *** monkey_ joined
[23:40] *** monkey_ left
