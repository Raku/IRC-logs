[00:03] *** reportable6 left
[00:14] *** dogbert11 joined
[00:14] *** dogbert17 left
[00:14] *** Skarsnik left
[00:43] *** monkey_ joined
[01:05] *** reportable6 joined
[01:42] *** evalable6 joined
[01:46] *** melezhik joined
[01:46] <melezhik> I've dropped some thoughts on mybfio current state - https://www.reddit.com/r/rakulang/comments/qktfn7/considerations_on_mybfio_future/ I'd appreciate for feedback, thanks ))

[01:56] *** melezhik left
[02:15] *** frost joined
[02:16] *** Sgeo_ joined
[02:18] *** Sgeo left
[02:42] *** monkey_ left
[03:21] *** Voldenet_ joined
[03:22] *** Voldenet left
[03:22] *** Voldenet_ is now known as Voldenet

[04:13] *** kjp left
[04:15] *** kjp joined
[04:41] *** linkable6 joined
[04:59] <Geth> ¦ Raku-Steering-Council/main: 5035dc5fe0 | (Geoffrey Broadwell)++ | resolutions/README.md

[04:59] <Geth> ¦ Raku-Steering-Council/main: Stub a resolutions/ dir and README

[04:59] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/5035dc5fe0

[04:59] <Geth> ¦ Raku-Steering-Council/main: ce7bfd9c7c | (Geoffrey Broadwell)++ | minutes/20211030.md

[04:59] <Geth> ¦ Raku-Steering-Council/main: Add RSC meeting minutes for 2021-10-30

[04:59] <Geth> ¦ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/ce7bfd9c7c

[05:41] *** evalable6 left
[05:41] *** linkable6 left
[05:44] *** evalable6 joined
[05:47] *** tejr left
[05:47] *** tejr joined
[05:54] *** juanfra left
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:17] *** seednode4 left
[06:18] *** seednode4 joined
[07:18] *** unicodable6 left
[07:18] *** sourceable6 left
[07:18] *** releasable6 left
[07:18] *** bloatable6 left
[07:18] *** benchable6 left
[07:18] *** statisfiable6 left
[07:18] *** bisectable6 left
[07:18] *** notable6 left
[07:18] *** evalable6 left
[07:18] *** quotable6 left
[07:18] *** reportable6 left
[07:18] *** shareable6 left
[07:18] *** squashable6 left
[07:18] *** greppable6 left
[07:18] *** committable6 left
[07:18] *** nativecallable6 left
[07:18] *** tellable6 left
[07:18] *** coverable6 left
[07:18] *** squashable6 joined
[07:18] *** tellable6 joined
[07:19] *** unicodable6 joined
[07:19] *** quotable6 joined
[07:19] *** sourceable6 joined
[07:19] *** bloatable6 joined
[07:19] *** greppable6 joined
[07:21] *** shareable6 joined
[07:23] *** Sgeo_ left
[07:35] *** seednode4 left
[07:35] *** seednode4 joined
[07:42] *** linkable6 joined
[08:19] *** benchable6 joined
[08:19] *** releasable6 joined
[08:20] *** committable6 joined
[08:20] *** notable6 joined
[08:21] *** statisfiable6 joined
[08:21] *** reportable6 joined
[08:25] *** tejr left
[08:25] *** tejr joined
[08:33] *** abraxxa joined
[08:34] *** pony left
[08:34] *** pony joined
[08:38] *** abraxxa left
[08:39] *** abraxxa joined
[09:11] *** rabbitisle joined
[09:14] *** dakkar joined
[09:20] *** evalable6 joined
[09:54] *** gordonfish- joined
[09:56] *** gordonfish left
[10:19] *** coverable6 joined
[10:19] *** bisectable6 joined
[11:05] <SmokeMachine> m: say [1, 2, "a", "b", 3].any ~~ { $_ ~~ Int && .?is-prime } # should this break?

[11:05] <camelia> rakudo-moar 580b3ba79: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[11:05] <SmokeMachine> ok, I got it... $_ is the junction

[11:06] <SmokeMachine> m: say [1, 2, "a", "b", 3].any ~~ -> Any $a { $a ~~ Int && $a.?is-prime }

[11:06] <camelia> rakudo-moar 580b3ba79: OUTPUT: «any(False, True, False, False, True)␤»

[11:19] *** evalable6 left
[11:19] *** linkable6 left
[11:20] *** nativecallable6 joined
[11:22] <Geth> ¦ doc: c867f164ba | (Elizabeth Mattijsen)++ | doc/Language/variables.pod6

[11:22] <Geth> ¦ doc: Some elaboration about pre-defined lexical variables

[11:22] <Geth> ¦ doc: 

[11:22] <Geth> ¦ doc: - add scope column

[11:22] <Geth> ¦ doc: - only $_ is defined for every block

[11:22] <Geth> ¦ doc: - $/ and $! are defined per sub / method

[11:22] <Geth> ¦ doc: - add section on thread safety with regards to $/

[11:22] <Geth> ¦ doc: - fix default value of $! (it's Nil, not Any)

[11:22] <Geth> ¦ doc: <…commit message has 6 more lines…>

[11:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/c867f164ba

[11:22] *** evalable6 joined
[11:37] <Geth> ¦ doc: 9b7d8fedc0 | (Elizabeth Mattijsen)++ | doc/Language/variables.pod6

[11:37] <Geth> ¦ doc: Refer to more general "routine" concept

[11:37] <Geth> ¦ doc: 

[11:37] <Geth> ¦ doc: - instead of sub and method

[11:37] <Geth> ¦ doc: - also mention potential thread safety issues with $!

[11:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/9b7d8fedc0

[12:02] *** reportable6 left
[12:22] *** linkable6 joined
[13:03] *** reportable6 joined
[13:23] *** perryprog left
[13:24] *** perryprog joined
[13:42] *** MasterDuke left
[14:09] *** MasterDuke joined
[14:14] *** andrea[m]123 left
[14:14] *** andrea[m]123 joined
[14:37] *** Sgeo joined
[14:40] *** vrurg left
[14:42] *** vrurg joined
[14:43] <Xliff_> https://gist.github.com/Xliff/77534ec98cfbd32d1298457d2145149e

[15:00] *** frost left
[15:09] *** Sgeo_ joined
[15:10] <jdv> is a pointy block considered a sub then?

[15:12] *** Sgeo left
[15:15] <jdv> that's interesting.  so what i thought was a bug in code i wrote last year is actually not.  its just a trap, sadly

[15:41] <timo> m: say -> {} ~~ Sub

[15:41] <camelia> rakudo-moar 665adc06c: OUTPUT: «False␤»

[15:41] <timo> m: say -> {} ~~ Block

[15:41] <camelia> rakudo-moar 665adc06c: OUTPUT: «True␤»

[15:41] <timo> m: say sub a {} ~~ Sub

[15:41] <camelia> rakudo-moar 665adc06c: OUTPUT: «True␤»

[15:41] <timo> m: say sub a {} ~~ Block

[15:41] <camelia> rakudo-moar 665adc06c: OUTPUT: «True␤»

[15:49] <timo> pointy blocks and blocks are transparent to return, for example, that's an important detail. what was the difference that tripped you up?

[16:03] <timo> Xliff_: is there anything interesting in the Failure's exception? can you turn on RAKUDO_MODULE_DEBUG for a veritable flood of "information"?

[16:12] *** evalable6 left
[16:12] *** linkable6 left
[16:12] *** evalable6 joined
[16:20] <Xliff_> timo: Hmm... let me look.

[16:22] <Xliff_> LOL! "No such symbol <x>".

[16:22] <Xliff_> Which is wrong because it works in the second variation of the loop.

[16:22] <Xliff_> Trying with RAKUDO_MODULE_DEBUG

[16:24] *** rabbitisle left
[16:35] <Xliff_> timo: RAKUDO_MODULE_DEBUG output now added as comments to gist.

[16:36] <timo> *browser immediately crashes*

[16:38] <Xliff_> Eep!

[16:38] <Xliff_> Want me to mail you the output?

[16:38] <timo> no i was just kidding :)

[16:39] <timo> it's hard to see anything useful in this, it's mostly the same stuff over and over, and you can't really tell where the failures are, right?

[16:47] <Xliff_> Exactly

[16:47] <Xliff_> To whit: There are no real failures. Just failutes that occur as more compunits are loaded.

[16:49] <Xliff_> And the failure's exception doesn't make much sense. Why is there "No such symbol" in the large version when that symbol loads fine in the isolated one?

[16:49] <Xliff_> Both loads should behave the same!

[16:49] <Xliff_> Resource corruption?

[17:03] <ugexe> i doubt it has anything to do with the number of compunits loaded

[17:04] <ugexe> if i were to take a wild guess i would say one of the recent jit changes like getcurhllsym  seems potentially related

[17:05] <MasterDuke> hm. then any difference with MVM_JIT_DISABLE=1 ?

[17:06] <ugexe> i imagine it would be nice to know if it happens on other releases as well

[17:06] <ugexe> i was assuming it did not

[17:09] <Xliff_> Masterduke: No difference with MVM_JIT_DISABLE

[17:10] *** djerius left
[17:10] <Xliff_> Nor with MVM_SPESH_DISABLE and the combinations therein

[17:11] *** djerius joined
[17:11] *** nine left
[17:13] *** linkable6 joined
[17:14] *** nine joined
[17:15] *** nine left
[17:15] *** nine joined
[17:21] *** abraxxa left
[17:22] <tonyo> why are you not checking if the require fails.. that will most likely give you the error message you need to fix it.

[17:22] <tonyo> m: say ::("Test").^name;

[17:22] <camelia> rakudo-moar 665adc06c: OUTPUT: «Failure␤»

[17:35] *** dakkar left
[17:36] *** abraxxa joined
[18:02] *** reportable6 left
[18:15] <jdv> timo: i think i was wrong.  i thought the recent $/ scoping behaviour that liz was working with was the cause of a problem i had

[18:15] <jdv> but i think its different

[18:17] <jdv> i basically have a hyper map with a few "when ($foo~~//) {$0}" and i had to add a my $/; in the map block.  i don't remember the specific symptom.

[18:19] <timo> that could actually have been the same issue

[18:23] <jdv> hmm.  that's a quite unfortunate poor composability type deal.

[18:46] <lizmat> yes, that's the same issue

[18:46] <lizmat> that's exactly the issue

[18:47] <lizmat> I've added some documentation for that, which alas is not live yet

[18:49] *** Bitterflieable joined
[18:49] <Bitterflieable> Test ButterflyBot

[18:50] <Bitterflieable> Test ButterflyBot

[18:50] *** melezhik joined
[18:50] *** Bitterflieable left
[18:50] <melezhik> sorry for a little noise ... I have tested my Butterfliable bot )))

[18:51] <melezhik> btw can I have a channel to test? probably I can just create a my one?

[18:52] <tonyo> just create your own with ##whatever

[18:53] <melezhik> sure, already created the one ))) thanks tonyo

[18:56] <melezhik> using https://github.com/lizmat/IRC-Client it's just a matter a couple of minutes to create a new bot, cool! cc lizmat

[18:56] <lizmat> melezhik: please note that I'm just the current maintainer...

[18:56] <melezhik> yeah, I got that ... 

[18:56] <lizmat> Zoffix Znet has done 99% of the work on that one

[18:57] <melezhik> sure, sure

[18:57] <melezhik> I can't thanks him, at least here )) as he won't probably see this, but thanks Zoffix Znet )))

[19:01] <lizmat> Zoffix++ indeed

[19:12] *** melezhik left
[19:22] *** melezhik joined
[19:39] <Xliff_> tonyo: The failure message is non-sensical. If I rerun the code with just the failed modules. They work. No change.

[19:50] * lizmat clickbaits https://rakudoweekly.blog/2021/11/01/2021-44-1000-rakoons/

[19:51] <Xliff_> lizmat++ - Great weekly this time 'round.

[19:52] <Xliff_> Now if someone could help me with my issues with CURI, I'd really have something to add to it.

[19:52] <lizmat> I wish I could  :-(

[19:53] <Xliff_> What would it take to add output hooks to CURI that could be exposed via META6.json?

[19:53] <Xliff_> Who is the best person to talk to about all issues CURI?

[19:54] <lizmat> ugexe nine I'd say

[19:54] <Xliff_> Is this something for problem-solving?

[19:54] <Xliff_> Both of those I've pinged.

[19:54] <lizmat> Xliff_: then it's a difficult one

[19:54] <lizmat> wrt output hooks, what are you thinking about?

[19:55] <Xliff_> lizmat: All I need is something to keep the user aware that the install process is running. Generally something helpful, rather than fluff.

[19:55] <lizmat> try running it with --stagestats ?

[19:55] <Xliff_> Also need install strategies for large-scale projects. I don't think a large scale app has been attempted with Raku

[19:55] <Xliff_> lizmat: While installing?

[19:56] <lizmat> ah... while installing ...

[19:56] <lizmat> hmm

[19:56] <Xliff_> lizmat: See installation instructions for https://github.com/Xliff/p6-GLib

[19:56] <lizmat> it feels more that the install process should have some hooks, that you could activate with parameters to e.g. zef ?

[19:57] <lizmat> feels to me that repo needs a README.md  :)

[19:57] <Xliff_> Inside META6.json as... as ugexe puts it... this is not a "zef" issue

[19:57] <lizmat> what file should I look at ?

[19:57] <Xliff_> No. It does NOT need a README.md for the installation issues.

[19:58] <lizmat> no, but that could tell me where to find the install instructions :-)

[19:58] <Xliff_> Oh. Good point. I haven't written them.

[19:58] <Xliff_> One moment.

[19:58] <Xliff_> Well. There's a reason for no install instructions.

[19:58] <Xliff_> These projects are NOT INSTALLABLE VIA CURI!!!

[19:59] <Xliff_> Hence no README.md

[19:59] <Xliff_> Which is what I want to fix.

[19:59] <Xliff_> You couold try "zef install ." and see how far it gets.\

[19:59] <Xliff_> And how long it takes.

[19:59] <Xliff_> And how many times you think it's not working coz of no proper output to the user.

[19:59] <Xliff_> To locally precompile: "zef install --serial --deps-only .'

[20:00] <Xliff_> rr you could run "./install-prereqs.sh"

[20:00] <Xliff_> s/rr/or/

[20:00] <ugexe> there is an env var to give that output from rakudo

[20:01] <Xliff_> RAKUDO_MODULE_DEBUG, right?

[20:01] <ugexe> `to install run RAKUDO_LOG_PRECOMP zef install .`

[20:01] <Xliff_> I said "something useful" whcih that aint.

[20:01] <ugexe> =1

[20:01] <Xliff_> s/whcih/which/

[20:01] <lizmat> yeah, that's it, but that's developer focused, *not* user focused

[20:02] <ugexe> so what exaclty is proper output

[20:02] <Xliff_> ugexe: I need something on the order of "Precompiling A::B  ..."

[20:02] <Xliff_> Preferbly with a percentage counter on the end of it.

[20:03] *** reportable6 joined
[20:03] <ugexe> ===> Installing: CSV::Parser:ver<0.1.2>:auth<zef:tony-o>

[20:03] <lizmat> *that's* going to be near impossible for the foreseeable future

[20:03] <ugexe> Precompiling F0AE75F664644ED02D28D6A0E284ED1A9D4EBDA3 (CSV::Parser)

[20:03] <ugexe> literally the output

[20:03] <lizmat> the percentage I mean

[20:03] <lizmat> ugexe: and then some ?

[20:03] <Xliff_> And! To add more gas to the fire... latest rakudo is throwing this out from previously working compunits: 

[20:03] <Xliff_> ===SORRY!=== Error while compiling /home/cbwood/Projects/p6-GIO/lib/GIO/ThreadedSocketService.pm6 (GIO::ThreadedSocketService)

[20:03] <Xliff_> Type check failed for return value; expected Seq:D but got Seq (Seq)

[20:03] <Xliff_> at /home/cbwood/Projects/p6-GIO/lib/GIO/ThreadedSocketService.pm6 (GIO::ThreadedSocketService):3

[20:04] <Xliff_> If I run that singularly, it compiles just fine, which means it's not an issue with the code.

[20:06] <lizmat> Xliff_: is that still happening after today's MoarVM bump ?

[20:06] <Xliff_> lizmat: I generally compile on Sundays. I will see.

[20:08] *** perlbot left
[20:09] *** simcop2387 left
[20:09] *** melezhik left
[20:12] *** sena_kun left
[20:15] *** Doc_Holliwould joined
[20:15] <Doc_Holliwould> news

[20:16] *** sena_kun joined
[20:17] <Doc_Holliwould> tellable?

[20:25] *** jess joined
[20:44] *** simcop2387 joined
[20:45] *** Doc_Holliwould left
[20:47] *** perlbot joined
[20:52] <Xliff_> lizmat: Yes. Problem is still occurring

[20:52] <lizmat> ok, too bad...

[20:52] <Xliff_> ===SORRY!=== Error while compiling /home/cbwood/Projects/p6-GIO/lib/GIO/ThreadedSocketService.pm6 (GIO::ThreadedSocketService)

[20:52] <Xliff_> Type check failed for return value; expected Seq:D but got Seq (Seq)

[20:52] <Xliff_> at /home/cbwood/Projects/p6-GIO/lib/GIO/ThreadedSocketService.pm6 (GIO::ThreadedSocketService):3

[20:53] <lizmat> in the mean time I'm working on making something that will make you happy  :-)

[20:56] <Xliff_> lizmat: Ooh! Thanks! Looking forward to it.

[20:56] <lizmat> it's something that I've also wanted for a while, thanks for nudging :-)

[20:57] <El_Che> fedora 35 is out, building a package for it

[20:58] <gfldex> I'm getting a 404 on https://docs.raku.org/03-environment-variables .

[20:59] <lizmat> https://docs.raku.org/programs/03-environment-variables should be the link

[21:00] <gfldex> then the link near the bottom of https://docs.raku.org/programs/04-running-raku needs fixing

[21:00] <lizmat> https://github.com/Raku/doc/blob/master/CONTRIBUTING.md#reporting-bugs   :-)

[21:02] <Geth> ¦ doc: gfldex++ created pull request #3976: Update 04-running-raku.pod6

[21:02] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3976

[21:05] <Geth> ¦ doc: ebbb2496cd | (Wenzel P. P. Peppmeyer)++ (committed using GitHub Web editor) | doc/Programs/04-running-raku.pod6

[21:05] <Geth> ¦ doc: Update 04-running-raku.pod6

[21:05] <Geth> ¦ doc: 

[21:05] <Geth> ¦ doc: Revice a dead internal link to 03-environment-variables.

[21:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ebbb2496cd

[21:05] <Geth> ¦ doc: 88c6847935 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | doc/Programs/04-running-raku.pod6

[21:05] <Geth> ¦ doc: Merge pull request #3976 from gfldex/patch-19

[21:05] <Geth> ¦ doc: 

[21:05] <Geth> ¦ doc: Update 04-running-raku.pod6

[21:05] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/88c6847935

[21:05] <lizmat> gfldex: thanks!

[21:07] <lizmat> Xliff_: how do you think this looks: https://gist.github.com/lizmat/acbe0cdfc42a9123511fce4a99d1b11d

[21:15] <Xliff_> Looking

[21:15] <El_Che> weekly: fedora 35 linux package released to the rakudo-pkg repo

[21:15] <notable6> El_Che, Noted! (weekly)

[21:15] <Xliff_> lizmat: Not bad at all!

[21:17] <lizmat> Xliff_: https://github.com/rakudo/rakudo/commit/d88d1cc0e4

[21:37] <Xliff_> lizmat++ # Thanks for the stopgap! :)

[21:37] <[Coke]> crud, my macports install on osx 11.6 is messed up. complaining about the dev tools (but they seem to be installed)

[21:37] <[Coke]> (missing an SDK?)

[21:37] <lizmat> Xliff_: I don't see it as a stopgap...  I think it has its uses

[21:37] <lizmat> note that you can force this behaviour in your module itself by doing:

[21:38] <lizmat> BEGIN %*ENV<RAKUDO_PRECOMP_PROGESS> = 1

[21:38] <lizmat> *PROGRESS

[21:45] <El_Che> [Coke]: I have seen people on twitter complaining about updates of dev tools

[21:47] *** linkable6 left
[21:47] *** evalable6 left
[21:47] <[Coke]> I threw xcode in the trash, re-downloading.

[21:47] <[Coke]> \\

[21:50] <Xliff_> lizmat: No output when doing "zef install". Something must be grabbing the output.

[21:51] *** line joined
[21:51] <lizmat> yeah... that's quite possible

[21:51] <Xliff_> And if its doing what I think it is doing, this is a 10 MINUTE execution.

[21:51] *** line left
[21:51] <Xliff_> That is a strict failure from a UX point of view.

[21:52] <Xliff_> And this is witout testing, which means the precompilation process happens TWICE.

[21:52] <Xliff_> Huh! That didn't take as long as I expected

[21:52] <Xliff_> 3 minutes?!

[21:52] <lizmat> Xliff_: I'm pretty sure that if you skip tests, it won't precompile twice

[21:54] <Xliff_> Well, that's the first time this code has ever been -installed- 

[21:54] <Xliff_> Wow. A milestone.

[21:54] <Xliff_> lizmat++ ugexe++

[21:54] <Xliff_> Now to get tests and support code properly working.

[22:01] *** AntonOks joined
[22:02] *** AntonOks left
[22:17] *** melezhik joined
[22:23] *** AntonOks joined
[22:27] <AntonOks> hi again. same question as yesterday... is there anyone around who has the permission and is willing to review and merge rakudo/star pulls?

[22:28] <AntonOks> and if I look at the repo activity in the last months it seems "Star" is a dead horse....https://github.com/rakudo/star/graphs/contributors?from=2019-12-31&to=2021-11-02&type=c

[22:31] <MasterDuke> i don't think star ever was terribly active (which isn't all that surprising, it was just packaging rakudo plus some modules), but it's definitely been de-emphasized over the medium-term past

[22:31] <AntonOks> someone should decide if "Star" should be (somehow) maintained / supported .... or it should be removed from the raku.org and GitHub organization once and forever :|

[22:33] <MasterDuke> now that rakudo is more stable and zef is easily obtained, there isn't quite the same need for star any more

[22:33] <El_Che>  AntonOks: I am under the impression that once in a while a new maintener shows up

[22:34] <El_Che> for some time

[22:34] <lizmat> AntonOks: would you like to be a maintainer ?

[22:35] *** sena_kun left
[22:36] *** melezhik left
[22:36] <AntonOks> well... as far as I know https://github.com/Tyil was the last one... but he was banned from Raku for reasons you man ask Google for...  

[22:36] <AntonOks> lizmat: I doubt I have the knowledge and to time...

[22:36] <lizmat> AntonOks: well. that goes for many of us

[22:36] <lizmat> afk&

[22:38] *** sena_kun joined
[22:38] <AntonOks> lizmat: Ok, fair enough.. but then remove it from everywhere... because like it is now, it just adds confusion and a bad reputation on Rakudo itself, right?!

[22:39] <El_Che> yeah, the issues stay open for a few years, it seems

[22:42] <AntonOks> just to get everyone on the same page... and as far as I was somehow involved in related discussions... you can find some arguments (or only one?!) pro-Star in https://github.com/rakudo/rakudo/issues/4001

[22:44] <AntonOks> as a summary I'd say, especially the MSI package is helpful in some areas where no internet connection is possible and/or "enterprise IT"... 

[22:45] <El_Che> taking stuff over can be surprising. I took a small abandoned lib over that was not used directly by many projects (I used it). Now github tells me 20K repos depends on it and I am very carefull not to break it :)

[22:45] <El_Che> so, I get your "I don't have the time argument"

[22:48] <AntonOks> El_Che: yeap, truly scary ;)

[22:49] <El_Che>  :)

[22:50] *** linkable6 joined
[22:50] *** evalable6 joined
[22:51] <AntonOks> anyhow, I'll wait if someone ever will merge my pull before I consider to send more to finally have all the Star builds automated with GH Actions as already done in https://github.com/AntonOks/star

[22:52] *** AntonOks left
[22:52] <discord-raku-bot> <Nemokosch#9980> What is Rakudo Start actually?

[22:53] <discord-raku-bot> <Nemokosch#9980> What is Rakudo Star actually?

[22:54] *** sena_kun left
[22:56] <El_Che> so there is https://github.com/rakudo/star and https://github.com/Raku/rakudo-star? confusing

[22:58] <El_Che> Nemokosch#9980: it a bundle of rakudo and some modules

[23:05] *** AntonOks joined
[23:10] <AntonOks> El_Che: yeap, thats another confusion I complained about 1-2 years ago ;)  ... as far as I remember https://github.com/Raku/rakudo-star lived in the previous "perl6" GH organization... but as it is anyhow even more / longer unmaintained, it should be deleted from the Rakudo GH org anyhow...

[23:11] <AntonOks> just my 5 ct's ;)

[23:12] <El_Che> I am not a star users, but indeed, even from the outside it looks confusin

[23:12] <El_Che> g

[23:13] <AntonOks> Nemokosch#9980: well, what Star is... at least this is very well documented, see https://rakudo.org/star

[23:13] <AntonOks> it says.. Rakudo Star Bundle

[23:13] <AntonOks> The Rakudo Star Bundle contains the Rakudo Compiler, a collection of modules from the Raku ecosystem, and the language documentation. It is released roughly quarterly and is the most thoroughly tested release.

[23:14] <AntonOks> btw., the "most thoroughly tested release" is a joke by now ;)

[23:17] <El_Che> AntonOks: there is certainly a target audience that like Star. The project needs a maintainer to serve them, otherwise they will stay with old releases. 2021.07 is not that old.

[23:17] *** melezhik joined
[23:20] <El_Che> I wonder where the 2021.07 was built. One repo was last updated in 2020, the other in april 2021.

[23:24] *** melezhik left
[23:25] <AntonOks> El_Che: The MSI was build at https://github.com/AntonOks/rakudo-star-win at that time (was my first Start step... and once the MSI build worked here, I added those MSI build things and also started to extend the "RSTAR" bash thing in https://github.com/AntonOks/star

[23:25] <AntonOks> Patrick copied the MSI package from my repo to the "raku.org" at that time...

[23:26] <El_Che> ah you did that

[23:26] <El_Che> you touch it, you keep it :)

[23:28] <El_Che> I see you used actions

[23:28] <AntonOks> ehm, and before I confuse you guys even more... Patrick Boecker copied the MSI.. not Patrick Spek :O

[23:28] <El_Che> that's nice

[23:28] <El_Che> I'll have a look how you did it; it could be a useful addition to rakudo-pkg

[23:32] <AntonOks> to be honest... I love rakudo-pkg and I thought about talking to you and asking if you just could add some "zef" lines into your build tools / scripts to ship those "Star modules" per default with your *UX* packages

[23:33] <El_Che> I originally though the selling point of star was providing a fixed version of modules known to be stable, but that was not the case

[23:34] <AntonOks> I had a discussion with Patrick (Boecker) about what I do in the PowerShell script to add those modules

[23:34] <El_Che> therefor just providing zef, seems to be enough. Or are you thinking native dependencies?

[23:35] <AntonOks> no, many of those modules (look into the modules.txt or the like) are build ontop of the "master" GH versions :|

[23:35] <lizmat> are they?  hmmmm

[23:36] *** sena_kun joined
[23:37] <AntonOks> ok, what I do in the MSI build is https://github.com/AntonOks/star/blob/94249c7d0e3846fa54ea75c2deb62495253d01a7/tools/build/binary-release/Windows/build-with-choco.ps1#L89

[23:37] <AntonOks> the modules installation with "zef" happens here https://github.com/AntonOks/star/blob/94249c7d0e3846fa54ea75c2deb62495253d01a7/tools/build/binary-release/Windows/build-with-choco.ps1#L96

[23:38] <AntonOks> so simple, right?!?

[23:38] <AntonOks> everyone could do this before a "package" is build... wherever and however ;)

[23:40] <AntonOks> lizmat: well, look into https://github.com/rakudo/star/blob/master/etc/modules.txt .. you see where releases are used and where it's just '"master"

[23:43] <lizmat> hmmm... I hadn't realized that

[23:44] <ugexe> id probably just create a rakudo star meta distribution and list all those modules in the depends

[23:45] <AntonOks> El_Che: having ZEF included in any Rakudo package is a "must" from my point of view anyhow... but in some environments the clients / servers / containers (wherever we want Raku to be used ;)  ) do not have internet access and therfore cannot just install any module a dev needs... so any Rakudo installation there needs some helpful everydays modules

[23:45] <AntonOks> ;)  ... and documentation ;)

[23:45] <ugexe> META6.json -> {"name":"Rakudo::Star", "provides":{}, "depends":["Zef","HTTP::UserAgent:ver<0.1>", ...]}

[23:46] <ugexe> then install that via `zef install .`

[23:48] <AntonOks> ugexe: would that work in (IT) environments where no internet access is possible / allowed?

[23:48] <lizmat> AntonOks: that would be the build process of which to make a R Star I guess ?

[23:48] <lizmat> ugexe ?

[23:50] <AntonOks> don't get me wrong... everywhere where internet access is possible / available, everyone should just use ZEF to get the desired working environment.. new modules and so on.

[23:52] <AntonOks> the question is, do we want to support Raku in "other" areas.. and do we want to support enterprise IT environments and organizations with their needs for pre-packaged, tested and approved "inslattaions packages", which then can be deployed there..

[23:53] *** sena_kun left
[23:54] <AntonOks> need to drop off... close to midnight here... but THANKS for all your thought and ideas...

[23:54] <japhb> AntonOks: Well, when you're specifically talking about R*, I think you're asking not "Do we want to support this use case?" but rather "Do we want to support this use case *this way*?"  You could satisfy (a fair portion of) that use case by providing docker images (which we do) or snaps (which we don't) or MSIs

[23:56] <El_Che> I don't thing the "no internet" scenario is as widespread as it used to be. I think people use local mirrors and the like if needed

[23:56] <El_Che> AntonOks: funny enough the original use case of rakudo-pkg was containers, where you want to keep the size down

[23:57] *** squashable6 left
[23:57] <El_Che> ugexe's meta distribution idea looks interesting to me

[23:58] *** squashable6 joined
[23:59] <El_Che> although it will probably end up as a Task::Kensho of Perl, where module are grouped by area

[23:59] <El_Che> https://metacpan.org/search?q=task+kensho

[23:59] <japhb> El_Che: Is that (no internet) one of the use cases for lizmat's Ecosystem::Archive?  Or is there a different tool we expect end users to apply?

