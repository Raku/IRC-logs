[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:07] *** linkable6 left
[00:08] *** linkable6 joined
[00:22] *** jgaz left
[00:27] <raydiak> I just tried and encountered the same problem. It worked after a `sudo ln -s /usr/lib/perl5/5.34/core_perl/CORE/libperl.so /usr/lib/`. perhaps there is a way to specify an additional path to check for native libs?
[00:29] <moon-child> one way is LD_LIBRARY_PATH, but...
[00:33] <raydiak> could that be an indication that I need to do something special with ldconfig or fiddle with ld.so.conf or whatever? should there already be a symlink to libperl in a standard location? do I have to remember to fuss with this every time my distro updates perl?
[01:22] *** linkable6 left
[01:22] *** evalable6 left
[01:24] *** linkable6 joined
[01:24] *** evalable6 joined
[02:02] <moon-child> more likely is that libperl.so is hiding away because it doesn't want to be linked against
[02:04] <japhb> .oO( NO LINKING FOR YOU! )
[02:04] <moon-child> nah is just shy
[02:21] *** frost joined
[02:23] <lucs> I need the Inline::Perl5 :(
[02:24] <lucs> Anything I can do to help?
[02:32] *** frost left
[02:34] * lucs & # ZZ
[02:36] *** MasterDuke left
[02:36] *** MasterDuke joined
[02:43] *** melezhik left
[03:07] *** Kaiepi joined
[03:08] *** Kaipi left
[03:45] *** clarjon1 joined
[04:16] *** clarjon1 left
[04:18] <elcaro> I think there's a bug with ~& (yes, yes... stringy bitwise-AND... very popular operator!)
[04:18] <elcaro> doc says: Coerces each argument to a non-variable-encoding string buffer type (e.g. buf8, buf16, buf32) and then performs a numeric bitwise AND on corresponding integers of the two buffers, padding the shorter buffer with zeroes.
[04:18] <elcaro> but it doesn't look like any padding is occuring
[04:18] <elcaro> m: say 'foo' ~& 'bar'; say 'foo' ~& 'barssssss'
[04:18] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «bab␤bab␤»
[04:19] <elcaro> I'm guessing should look like this...
[04:19] <elcaro> m: say Blob.new(|(0 xx 5), |('foo'.encode) Z+& ('barssssss'.encode)).decode
[04:19] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «␀␀␀␀␀bcc␤»
[04:19] <elcaro> or... something
[04:20] <elcaro> Raku just punts directly to nqp::bitand_s
[04:20] <elcaro> so my question is... should the paddding be happening in rakudo or in nqp?
[04:20] <elcaro> nqp tests for bitand_s only tests for equal length strings
[04:22] <elcaro> m: say Blob.new(|(0 xx 6), |('foo'.encode) Z+& ('barssssss'.encode)).decode # I missed a zero before
[04:22] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «␀␀␀␀␀␀bcc␤»
[04:23] <elcaro> and maybe "padding" means after... and maybe that depends on Endianess of the system... I dunno
[04:27] <moon-child> elcaro: honestly that looks like a doc bug to me
[04:27] <moon-child> padding with ones feels more correct, as they're the identity element for and
[04:27] <moon-child> I'm guessing that string was pasted from the doc for or, which does use 0
[04:28] <moon-child> ah...hmmm
[04:29] <moon-child> roast has a test:  "aaaaa".encode ~& "aa".encode eqv "aa\0\0\0".encode
[04:29] <moon-child> m: say "aaaaa".encode ~& "aa".encode
[04:29] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «utf8:0x<61 61 00 00 00>␤»
[04:29] <moon-child> m: say "aaaaa" ~& "aa"
[04:29] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «aa␤»
[04:29] <moon-child> m: say ("aaaaa".encode ~& "aa".encode).decode
[04:29] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «aa␀␀␀␤»
[04:30] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «aa␀␀␀␤»
[04:31] *** sono joined
[04:31] <elcaro> moon-child: changing the docs is _easier_... but the bitwise AND should pad the shorter buffer. it's more useful that way
[04:31] <elcaro> i will raise an issue anyways
[04:33] <moon-child> r: say "aaaaa" ~& "aa"
[04:33] <camelia> rakudo-jvm 08b449e1a, rakudo-moar 5ecc8308f: OUTPUT: «aa␤»
[04:33] <moon-child> curiouser and curiouser
[04:57] *** RandalSchwartz left
[05:57] *** evalable6 left
[05:57] *** bisectable6 left
[05:57] *** nativecallable6 left
[05:57] *** releasable6 left
[05:57] *** quotable6 left
[05:57] *** linkable6 left
[05:57] *** squashable6 left
[05:57] *** coverable6 left
[05:57] *** greppable6 left
[05:57] *** benchable6 left
[05:57] *** statisfiable6 left
[05:57] *** unicodable6 left
[05:57] *** committable6 left
[05:57] *** tellable6 left
[05:57] *** sourceable6 left
[05:57] *** shareable6 left
[05:57] *** notable6 left
[05:57] *** reportable6 left
[05:57] *** bloatable6 left
[05:57] *** reportable6 joined
[05:57] *** evalable6 joined
[05:58] *** releasable6 joined
[05:58] *** notable6 joined
[05:58] *** bisectable6 joined
[05:58] *** tellable6 joined
[05:58] *** sourceable6 joined
[05:58] *** nativecallable6 joined
[05:58] *** greppable6 joined
[05:58] *** coverable6 joined
[05:58] *** squashable6 joined
[05:59] *** bloatable6 joined
[05:59] *** committable6 joined
[05:59] *** statisfiable6 joined
[05:59] *** unicodable6 joined
[06:00] *** linkable6 joined
[06:00] *** shareable6 joined
[06:00] *** quotable6 joined
[06:00] *** benchable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:28] *** stoned75 joined
[06:32] *** ufobat_ joined
[06:50] *** Sgeo left
[06:56] *** Eddward_ left
[07:08] *** patrickb joined
[07:22] *** abraxxa left
[07:22] *** Kaiepi left
[07:23] *** Kaiepi joined
[07:54] *** dumarchie joined
[07:57] *** dumarchie left
[08:26] *** Kaiepi left
[08:31] *** Kaiepi joined
[08:41] <raydiak> .tell lucs apparently zef is not the best way to get it running (though you can make it work with the symlink workaround I mentioned earlier). I just tested building with the instructions at https://github.com/niner/Inline-Perl5#building and that worked flawlessly without workarounds
[08:41] <tellable6> raydiak, I'll pass your message to lucs
[09:20] *** Kaiepi left
[09:22] *** frost joined
[09:23] *** Kaiepi joined
[10:00] <mykhal> m: say "\x1D00\x2329".comb.map({$_.ord.base(16)})
[10:00] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «(1D00 3008)␤»
[10:03] <mykhal> (.. i guess it's bad, new issued new rakudo #4457 )
[10:04] * lizmat feels strangely distracted by massive amounts of water
[10:07] <moritz> lizmat: hope they aren't getting too close to you
[10:09] <lizmat> the coming 3 hours we should have the highest point around here
[10:09] <lizmat> most problems are on the Belgian side of the river now
[10:10] <lizmat> was just watching water coming over a wall intended to keep the river out
[10:12] <lizmat> https://www.vrt.be/vrtnws/nl/2021/07/16/liveblog-noodweer-vrijdag/
[10:12] <lizmat> that is a picture of one of the roads we frequently cycle on  
[10:18] <moritz> ugh, stay safe!
[10:18] <moritz> I guess the wild horses have retreated a bit :D
[10:19] <lizmat> we're about 10m higher here  :-)
[10:19] <lizmat> yes, they have been moved to higher grounds a few days ago already
[10:21] <lizmat> https://www.vrt.be/vrtnws/nl/2021/07/16/liveblog-noodweer-vrijdag/   # more normal situation
[10:22] <lizmat> oops, wrong lonk
[10:22] <lizmat> https://images.vrt.be/width1280/2021/07/16/b7f4d255-e61c-11eb-b07d-02b7b76bf47f.jpg
[10:23] <lizmat> the right hand side of the river here is the Dutch side
[10:23] *** evalable6 left
[10:23] *** linkable6 left
[10:23] <lizmat> the road to the bridge (on the Dutch side) is closed due to flooding
[10:25] *** evalable6 joined
[10:25] *** linkable6 joined
[10:25] <lizmat> to give you an idea of volume: 3700 m3 / sec
[10:25] *** sono left
[10:27] *** Kaiepi left
[10:27] *** Kaiepi joined
[10:32] *** sena_kun joined
[10:34] * lizmat feels the urge to get on her bike and go see for herself, but decides there are probably too many watchers getting in the way there already
[10:44] *** keutoi joined
[10:44] <lizmat> weird to realize that one of the roads I cycled on yesterday, is now under .5m of water
[10:46] <sjn> Time for a swim! :-)
[10:46] <lizmat> eh...   no!
[10:47] <lizmat> too much debris in the river, whole trees and other big things
[10:47] <lizmat> saw a refrigerator float by yesterday
[10:48] <lizmat> and then the water was still 2m lower than it is now
[10:48] <sjn> Toys in the water! :-D
[10:48] * sjn is a practicioner of blind and uncritical optimism. Yay! o/
[10:48] * sjn is a practicioner of blind and uncritical optimism. Yay! \o/
[10:50] <lizmat> :-)
[11:05] *** Kaiepi left
[11:07] *** Kaiepi joined
[11:33] *** ufobat__ joined
[11:36] *** ufobat_ left
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:12] <gfldex> When I check the map yesterday I could see the number of failed cell towers to more then doubled over night. I shall write to the government to have electrical conductivity of water removed!
[12:12] <keutoi> m: (False, False, True).reduce(&infix:<&&>)
[12:12] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»
[12:12] <keutoi> Why is this an error?
[12:13] <keutoi> :m (1, 2, 3).reduce(&infix:<+>)
[12:13] <keutoi> and this is not?
[12:14] <moritz> m: say (1, 2, 3).reduce(&infix:<+>)
[12:14] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «6␤»
[12:14] <moritz> keutoi: infix:<&&> is special because it short-circuits
[12:14] <moritz> m: 0 && say 42
[12:14] <camelia> rakudo-moar 5ecc8308f: ( no output )
[12:14] <gfldex> m: say &infix:<&&>(True, False);
[12:14] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «False␤»
[12:15] <moritz> and that messes up some things internally
[12:15] <moritz> m: say &infix:<&&>.candidates
[12:15] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «(&infix:<&&> &infix:<&&> &infix:<&&>)␤»
[12:15] <moritz> m: say &infix:<&&>.candidates.map: *.signature
[12:15] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «((Mu $x = Bool::True) (Mu \a, &b) (Mu \a, Mu \b))␤»
[12:15] *** ufobat__ left
[12:16] <moritz> though why &reduce tries to pass three arguments to it? no idea
[12:16] *** patrickb left
[12:17] <keutoi> :m say (False, False, True).reduce(-> $a, $b {$a && $b})
[12:17] <keutoi> m: say (False, False, True).reduce(-> $a, $b {$a && $b})
[12:17] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «False␤»
[12:17] <keutoi> Thank you, seems to work if i wrap it.
[12:17] <keutoi> Is this a bug?
[12:18] <moritz> yes
[12:21] <gfldex> keutoi: are you filing the issue?
[12:21] *** patrickb joined
[12:23] <keutoi> No, can someone familiar with relevant repos do it?
[12:26] <moritz> yes, I'll do it
[12:27] <keutoi> Thank you
[12:32] <moritz> https://github.com/rakudo/rakudo/issues/4458 there you go
[13:06] *** frost left
[13:10] *** ufobat__ joined
[13:12] *** a3r0_ joined
[13:12] *** stoned75_ joined
[13:12] *** Util_ joined
[13:12] *** Gruber joined
[13:13] *** Woodi_ joined
[13:13] *** jdv_ joined
[13:13] *** avarab joined
[13:14] *** gfldex_ joined
[13:14] *** nullheroes joined
[13:15] *** [Coke]_ joined
[13:18] *** stoned75 left
[13:18] *** [Coke] left
[13:18] *** a3r0 left
[13:18] *** gfldex left
[13:18] *** dvu left
[13:18] *** Grrrr left
[13:18] *** Woodi left
[13:18] *** Util left
[13:18] *** avar left
[13:18] *** jdv left
[13:27] <lucs> .
[13:27] <tellable6> hey lucs, you have a message: https://gist.github.com/950200490e208b85e26d3462e7af768e
[13:29] <lucs> raydiak: Soryy, I'd missed your comment about linking to the lib. Also, I'll go read the build instructions on the github page. Thanks!
[13:52] <lucs> Hmm... So, wondering how/if Inline::Perl5 handles possible multiple Perl installations (from perlbrew for example).
[13:54] <Altreus> TIAS?
[13:55] <Altreus> :)
[13:55] <Altreus> I'm interested too, but only because you brought it up
[13:57] <lucs> I TIAFailed :)
[14:01] <moritz> lucs: I would expect that Inline::Perl5 uses the Perl 5 that was active when it was compiled
[14:05] <lucs> moritz: I got this error when I tried that with a perlbrewed 5.34.0 (with the -Duseshrplib option, yes): https://gist.github.com/lucs/9fdbad93fcbc9e0deb33efd62b5d5a17
[14:06] <lucs> Uh, the error was not even being able to install it.
[14:07] <moritz> I don't know how Distribution::Builder searches for its perl :(
[14:07] <ugexe> zef does that search
[14:07] <ugexe> from the message just posted
[14:07] <ugexe> https://github.com/ugexe/zef/blob/ef2157c799b24056ee4a31d1584b81d4c0204af7/lib/Zef/Client.rakumod#L1086-L1095
[14:07] <ugexe> basically just shoves it into a `is native(...)` and sees if it works
[14:13] <ugexe> use NativeCall; sub is_installed is native("perl") { }()
[14:17] *** linkable6 left
[14:17] *** linkable6 joined
[14:17] <gfldex_> keutoi: fix incomming: https://github.com/rakudo/rakudo/pull/4460
[14:17] *** gfldex_ is now known as gfldex
[14:29] *** Sgeo joined
[14:30] *** keutoi left
[14:31] *** keutoi joined
[14:32] <keutoi> gfldex: looking at your fix this bug might affect (<||>) too
[14:32] <keutoi> m: (True, False, False).reduce(&infix:<||>)
[14:32] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «Too many positionals passed; expected 0 to 2 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»
[14:34] <gfldex> There is more work to be done in Bool.pm. infix:<^^> can return a non-boolean value but only when used in reduce. see: https://github.com/rakudo/rakudo/blob/master/src/core.c/Bool.pm6#L127
[14:35] *** vrurg_ joined
[14:36] <gfldex> This feels like a good usecase for macros post RakuAST.
[14:36] *** vrurg left
[14:38] *** b-bar joined
[14:47] *** lucasb joined
[14:49] <b-bar> Might I ask why Raku has adopted 𝑒 (U+1D452) as the Unicode symbol for natural exponent?
[14:49] <b-bar> According to the Unicode standard, U+1D452 has no special meaning[1], rather U+2147 (ⅇ) may represent natural exponent[2].
[14:49] <b-bar> [1] https://unicode.org/charts/beta/nameslist/n_1D400.html#1D452
[14:49] <b-bar> [2] https://unicode.org/charts/beta/nameslist/n_2100.html#2147
[14:50] *** vrurg_ is now known as vrurg
[14:51] <Geth> ¦ doc: mykhal++ created pull request #3918: Opener chars doc unicode mismatch fix
[14:51] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3918
[14:52] <vrurg> b-bar: 1D452	 𝑒 	Mathematical Italic Small E – I think 'mathematical' is the answer. 
[14:53] <vrurg> b-bar: and for 2147 the comment says: "_sometimes_ used for the natural exponent"
[14:54] *** masak_ is now known as masak
[15:03] <b-bar> Thank you @vrurg. But if the word "mathematical" is the key, wouldn't the appropriate symbol for pi be U+1D70B instead of U+03C0?
[15:07] <vrurg> b-bar: good point. I think it can be an alias. But then again, for 03c0 it is also clearly stated in the comment: "math constant 3.141592..."
[15:09] <vrurg> I think 1D70B can be made an alias. I also like the look of it more than 03C0. :)
[15:25] *** keutoi left
[16:09] *** patrickb left
[16:11] *** Maylay left
[16:19] *** Maylay joined
[16:25] *** dogbert17 joined
[16:27] *** dogbert11 left
[16:32] *** dogbert11 joined
[16:34] *** dogbert17 left
[16:35] *** Gruber is now known as Grrrr
[16:39] *** patrickb joined
[16:57] *** lucasb left
[17:12] *** sena_kun left
[17:13] *** patrickb left
[17:15] *** patrickb joined
[17:16] *** sono joined
[17:27] *** Kaiepi left
[17:32] *** Kaiepi joined
[17:32] *** Kaiepi left
[17:33] *** [Coke]_ is now known as [Coke]
[17:36] *** Kaiepi joined
[17:38] *** spydox joined
[17:38] *** Kaipi joined
[17:39] *** Kaiepi left
[17:39] <spydox> hello , Im a newbie can I ask a couple of questions?
[17:41] *** spydox left
[17:41] *** spydox joined
[17:42] <spydox> hi
[17:43] <sjn> of course, feel free to ask anything about Raku :)
[17:47] <spydox> Im trying to get started. I wrote a little helloworld.pl and tried run in comma.. All I get is unexpected EOF. It does run at the linux prompt. I *think* it thinks Im trying to run a "prolog" file .pl ?
[17:47] *** clarjon1 joined
[17:48] <spydox> it runs /usr/bin/swipl -t halt -q /home/me/CommaProjects/one/two.pl
[17:48] <spydox> seems like it SHJOULD run like /usr/bin/perl6 ....
[17:48] <spydox> I went thru every comma menu I dont see where it determines the compiler based on file type
[17:49] <spydox> I even tried a she-bang which was ignored
[17:52] *** justsomeguy joined
[17:52] <MasterDuke> well, .pl isn't recommended for raku scripts, you could try .raku
[17:52] <spydox> wilco, Im on it! ty
[17:56] <sjn> yeah, .pl is traditionally perl5 scripts; we used .pl6 before the name change, today it's .raku as MasterDuke says
[17:57] <spydox> TYVM sir and sir!
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:07] *** ufobat__ left
[18:09] <mykhal> m: 0x3030.base(33).lc.&[R~]: <f>~q/o/x 2
[18:09] <camelia> rakudo-moar 5ecc8308f: ( no output )
[18:09] <mykhal> m: say 0x3030.base(33).lc.&[R~]: <f>~q/o/x 2
[18:09] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «foobar␤»
[18:17] *** dogbert17 joined
[18:17] *** dogbert11 left
[18:18] *** Eddward_ joined
[18:33] *** dogbert11 joined
[18:36] *** dogbert17 left
[18:41] *** dogbert11 left
[18:45] <mykhal> say 35.&{(2..36).map($^a + *)}  # works
[18:45] <evalable6> mykhal, rakudo-moar 6eea26213: OUTPUT: «(37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71)␤»
[18:45] <mykhal> say 35.&{(2..36).map($^a.base(*))}  # not :/
[18:46] *** spydox left
[18:50] *** dogbert11 joined
[18:50] <MasterDuke> you can't use a whateverstar as an argument like that
[18:51] <moritz> it doesn't curry inside a method call
[18:52] <moritz> otherwise things like @list.pick(*) couldn't work
[18:56] *** dogbert11 left
[18:57] *** dogbert11 left
[18:58] *** justsomeguy left
[18:59] *** dogbert11 joined
[18:59] <mykhal> say 35.&{(2..36).map({$_.base($^a)})}  # aha
[18:59] <evalable6> mykhal, rakudo-moar 6eea26213: OUTPUT: «(100011 1022 203 120 55 50 43 38 35 32 2B 29 27 25 23 21 1H 1G 1F 1E 1D 1C 1B 1A 19 18 17 16 15 14 13 12 11 10 Z)␤»
[19:03] *** jdv_ is now known as jdv
[19:08] *** squashable6 left
[19:09] *** squashable6 joined
[19:31] <mykhal> moritz: .pick(*) is interesting, seems to work like .permutations.pick , I don't grasp the syntax if it does not empty the @list
[19:37] <mykhal> .. if it does not pick randomly (allowing duplicates), than one would expect these were pop()-ed
[19:44] <mykhal> .. well, ok, my interpretation has holes, if .pick arg must be <= .elems
[19:47] <mykhal> .. (kind of must)
[19:53] <mykhal> ( (0..*).pick is funny and nice, not trying to be biased picking near 0 rather than near Inf/2 :) )
[20:09] *** evalable6 left
[20:09] *** linkable6 left
[20:10] *** evalable6 joined
[20:12] *** linkable6 joined
[20:20] <mykhal> ( .. if overthinked again, maybe it should return Inf rather than Nil )
[20:41] *** spydox joined
[20:43] <spydox> snap I cant get comma to use a raku compiler
[20:46] <Altai-man> spydox, how are you setting SDK?
[20:46] <spydox> how can I find trhat
[20:47] <Altai-man> spydox, File -> Project Settings.
[20:47] <spydox> Raku v2019.11
[20:47] <spydox> its odd if I say RUN the only thing there is edit config
[20:48] <spydox> and if I go in there all my files are under "prolog"
[20:48] <spydox> yet a bunch of sources show up on the left..
[20:50] <spydox> if I do + on config, all the files are under "Prolog" 
[20:51] <spydox> evem though there is no prol;og in the disk path
[20:54] <Altai-man> spydox, can you show a screenshot?
[20:54] <spydox> ok
[21:00] <spydox> Uploaded file: https://uploads.kiwiirc.com/files/726b6007c7bc7119231201e8db188388/posed.png
[21:02] <spydox> my first file was a .pl I guess it thinks this is a prolog project!
[21:05] <Altai-man> spydox, no, I don't think so. can't you select "Raku" in "Add New Configuration"? Then you can specify a script to run and run it using the SDK you specified in Project Settings.
[21:06] <spydox> if I do that it says UNEXPECTED EOF and it tries to run it as PROLOG
[21:06] <spydox> let me try again
[21:07] <Altai-man> spydox, are you using standalone Comma or a plugin for IntelliJ?
[21:07] <spydox> standalone in ubuntu
[21:08] <spydox> hello
[21:08] <spydox> Process finished with exit code 0
[21:08] <spydox> THANKS sir much better
[21:08] <Altai-man> spydox, and you have prolog plugin installed?
[21:08] <spydox> well - I didnt MEAN to install that but I guess so
[21:08] <Altai-man> hmm, alright, thanks
[21:09] <spydox> I thjink Ill start over I dont like that PROLOG thing in there!
[21:17] <spydox> tyvm !
[21:17] *** spydox left
[21:40] *** melezhik joined
[21:40] <melezhik> .
[21:41] <melezhik> hi patrickb! you owe me a feedback on azure devops pipeline thoughts  :] 
[22:24] *** dogbert17 joined
[22:28] *** dogbert11 left
[22:34] *** dogbert11 joined
[22:36] *** squashable6 left
[22:36] *** dogbert17 left
[22:39] *** squashable6 joined
[22:46] *** patrickb left
[22:48] *** linkable6 left
[22:49] *** linkable6 joined
[22:59] <lucs> How should I prompt the user for non-echoed terminal input? (for a password for example)
[22:59] <ugexe> need to use a nativecall module
[23:00] <ugexe> https://github.com/titsuki/p6-Terminal-Readsecret
[23:00] <lucs> Thanks!
[23:01] <ugexe> oh that points to https://github.com/titsuki/raku-Terminal-Getpass but yeah
[23:01] <lucs> Ha. deprecated even, in favor of Terminal::Getpass :)
[23:01] <lucs> Right
[23:27] *** sortiz joined
[23:30] *** sortiz left
[23:32] <japhb> Dang it, I need to finish the work on my Linenoise replacement.  These questions would get much easier.
[23:54] *** Merfont joined
[23:54] *** Kaipi left
