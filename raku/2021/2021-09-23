[00:00] *** linkable6 joined
[00:00] *** evalable6 joined
[00:02] *** reportable6 left
[00:49] *** lichtkind left
[00:52] *** oodani left
[00:53] *** oodani joined
[00:55] *** Xliff left
[01:43] *** frost joined
[01:44] *** justsomeguy joined
[02:44] *** linkable6 left
[02:44] *** evalable6 left
[02:49] *** [Coke] left
[02:51] *** [Coke] joined
[03:22] *** zacts left
[03:34] *** justsomeguy left
[03:45] *** linkable6 joined
[03:47] *** evalable6 joined
[04:00] *** holyghost left
[05:00] *** notable6 left
[05:00] *** benchable6 left
[05:00] *** nativecallable6 left
[05:00] *** committable6 left
[05:00] *** bisectable6 left
[05:00] *** squashable6 left
[05:00] *** releasable6 left
[05:00] *** quotable6 left
[05:00] *** bloatable6 left
[05:00] *** unicodable6 left
[05:00] *** evalable6 left
[05:00] *** statisfiable6 left
[05:00] *** greppable6 left
[05:00] *** coverable6 left
[05:00] *** shareable6 left
[05:00] *** sourceable6 left
[05:00] *** tellable6 left
[05:00] *** linkable6 left
[05:00] *** linkable6 joined
[05:00] *** sourceable6 joined
[05:00] *** tellable6 joined
[05:01] *** coverable6 joined
[05:01] *** squashable6 joined
[05:01] *** unicodable6 joined
[05:01] *** evalable6 joined
[05:02] *** benchable6 joined
[05:02] *** nativecallable6 joined
[05:19] *** stoned75 left
[05:19] <tonyo> codesections: that seems fine to me .. it's not re-binding 'nope' and 'yep'.  it's rebinding something currently pointing at 'yep' to 'nope'.

[05:35] *** codesections left
[05:36] *** codesections joined
[05:58] *** ufobat_ joined
[06:01] *** releasable6 joined
[06:01] *** statisfiable6 joined
[06:05] *** reportable6 joined
[06:06] <moritz_> but aren't function params supposed to be ready-only by default?

[06:06] <moritz_> putting an "Any" in front should not change that

[06:09] <moon-child> m: sub f(Any $x) { $x := 5 }; f my $x = 6; say $x

[06:09] <camelia> rakudo-moar ba15173fd: OUTPUT: «6␤»

[06:10] <moon-child> I do not understand why Any changes things, though

[06:14] <moritz_> it shouldn't, and that's a bug

[07:00] *** quotable6 joined
[07:00] *** notable6 joined
[07:02] *** committable6 joined
[07:13] *** Sgeo left
[07:24] *** sena_kun joined
[07:46] *** lichtkind joined
[07:57] *** dogbert17 left
[08:00] *** greppable6 joined
[08:01] *** bisectable6 joined
[08:07] *** dakkar joined
[08:16] <MasterDuke> committable6: releases sub f(Any $x) { $x := 5 }; f my $x = 6; say $x

[08:16] <committable6> MasterDuke, ¦releases (58 commits): «6␤»

[08:17] <MasterDuke> committable6: releases sub f($x) { $x := 5 }; f my $x = 6; say $x

[08:17] <committable6> MasterDuke, ¦releases (58 commits): «04===SORRY!04=== Error while compiling /tmp/Bdk9j60ANy␤Cannot use bind operator with this left-hand side␤at /tmp/Bdk9j60ANy:1␤------> 03sub f($x) { $x := 5 08⏏04}; f my $x = 6; say $x␤ «exit code = 1»»

[08:25] *** dogbert17 joined
[08:31] *** discord-raku-bot left
[08:32] *** discord-raku-bot joined
[09:00] *** bloatable6 joined
[09:04] *** abraxxa left
[09:06] *** abraxxa joined
[10:01] *** shareable6 joined
[11:01] *** linkable6 left
[11:01] *** evalable6 left
[11:02] *** linkable6 joined
[11:39] *** TheAthlete joined
[11:55] *** Guest28 joined
[11:58] *** Guest28 left
[12:02] *** reportable6 left
[12:03] *** evalable6 joined
[12:11] *** whatnext joined
[12:12] <whatnext> hello all - quick question about classes and required attributes

[12:15] <whatnext> in the docs for the "required" trait here: https://docs.raku.org/language/typesystem#trait_is_required it seems to include `submethod BUILD` and pass `$attr` to `$!attr` - I am guessing this is in order to prevent the error message "attr is required but not provided"

[12:17] <whatnext> however, this seems a bit ugly (e.g. when compared to Moose). If there are 10 required params then this needs to be done with all 10 (?) Is there a way to avoid having to include that `BUILD` method?

[12:17] <whatnext> (ie and still pick up the required param from the input)

[12:18] <whatnext> ?

[12:18] *** TheAthlete left
[12:19] <lizmat> why do you need BUILD?

[12:23] <tbrowder> yep, that looks like a bad example

[12:23] <whatnext> to be honest I don't know that I do

[12:24] <whatnext> I assumed I could just pass the param in `.new( attr => $attr )` without needing BUILD, but that seems to produce the error "attr required but not provided"

[12:24] <whatnext> possibly I have something else wrong

[12:26] <MasterDuke> m: class A { has $.b is required }; say A.new(b=>3)

[12:26] <camelia> rakudo-moar ba15173fd: OUTPUT: «A.new(b => 3)␤»

[12:26] <MasterDuke> m: class A { has $.b is required }; say A.new(b=>3).b

[12:26] <camelia> rakudo-moar ba15173fd: OUTPUT: «3␤»

[12:27] <Geth> ¦ doc: 0a01431977 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[12:27] <Geth> ¦ doc: Update typesystem.pod6

[12:27] <Geth> ¦ doc: 

[12:27] <Geth> ¦ doc: BUILD not required in that example.

[12:27] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0a01431977

[12:27] <linkable6> Link: https://docs.raku.org/language/typesystem

[12:29] <whatnext> wait I think I got it - I need to define it as `$.attr` not `$!attr`

[12:31] <lizmat> m: class A { has $.a is required }; A.new

[12:31] <camelia> rakudo-moar ba15173fd: OUTPUT: «The attribute '$!a' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[12:31] <lizmat> m: class A { has $.a is required }; dd A.new(a => 42)

[12:31] <camelia> rakudo-moar ba15173fd: OUTPUT: «A.new(a => 42)␤»

[12:31] <lizmat> whatnext ^^  must be something else?

[12:32] <lizmat> oops, should backlog before writing :-)

[12:32] <whatnext> yes I think you would need `BUILD` if you want to keep the attribute private

[12:32] <tbrowder> m: class A { has $!a is required}; A.new

[12:32] <camelia> rakudo-moar ba15173fd: OUTPUT: «The attribute '$!a' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[12:33] <whatnext> ok its a relief that this isn't needed! Thanks

[12:33] <MasterDuke> m: class A { has $!b is required }; say A.new(b=>3)

[12:33] <camelia> rakudo-moar ba15173fd: OUTPUT: «The attribute '$!b' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[12:35] <lizmat> also, if you want an attribute to not be specifiable with .new, but you want it to have an accessor

[12:35] <lizmat> you can use "is built(False)"

[12:35] <MasterDuke> tbrowder: your commit was correct, since the example given used `$.attr`, but it might be good to add an example with `$!attr` and show that it errors unless you have the BUILD

[12:35] <lizmat> m: class A { has $.a is built(False) = 42 }; dd A.new.a

[12:35] <camelia> rakudo-moar ba15173fd: OUTPUT: «42␤»

[12:36] <lizmat> m: class A { has $.a is built(False) = 42 }; dd A.new(a => 666).a

[12:36] <camelia> rakudo-moar ba15173fd: OUTPUT: «42␤»

[12:36] <tbrowder> good point (but TWEAK instead...)

[12:36] <codesections> and `is built` is doc'ed at https://docs.raku.org/type/Attribute#index-entry-trait_is_built_(Attribute)-trait_is_built

[12:36] <lizmat> vice-versa, if you want something to be specifiable but *not* have an accessor:

[12:37] <lizmat> m: class A { has $!a is built = 42; method b() { $!a } }; dd A.new(a => 666).b

[12:37] <camelia> rakudo-moar ba15173fd: OUTPUT: «666␤»

[12:37] <MasterDuke> tbrowder: no, it has to be BUILD, TWEAK is too late

[12:38] <tbrowder> are you sure?

[12:40] <MasterDuke> m: class A { has $!b is required; submethod TWEAK(:$b) { $!b = $b } }; say A.new(b=>3)

[12:40] <camelia> rakudo-moar ba15173fd: OUTPUT: «The attribute '$!b' is required, but you did not provide a value for it.␤  in block <unit> at <tmp> line 1␤␤»

[12:40] <MasterDuke> m: class A { has $!b is required; submethod BUILD(:$b) { $!b = $b } }; say A.new(b=>3)

[12:40] <camelia> rakudo-moar ba15173fd: OUTPUT: «A.new␤»

[12:40] *** marmayr joined
[12:42] *** marmayr left
[12:54] *** whatnext left
[13:02] <tbrowder> ok  :-)

[13:04] *** reportable6 joined
[13:05] *** frost left
[13:11] *** eseyman left
[13:19] <Geth> ¦ doc: fe13e801de | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[13:19] <Geth> ¦ doc: Update typesystem.pod6

[13:19] <Geth> ¦ doc: 

[13:19] <Geth> ¦ doc: Add an example with a private attribute.

[13:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/fe13e801de

[13:19] <linkable6> Link: https://docs.raku.org/language/typesystem

[13:24] <tbrowder> not finished yet...

[13:28] <[Coke]> I wonder if we should disallow doc edits through the web. :|

[13:28] <Geth> ¦ doc: 7c6e458d51 | Coke++ | doc/Language/typesystem.pod6

[13:28] <Geth> ¦ doc: class keyword is case sensitive; missing }

[13:28] <Geth> ¦ doc: 

[13:28] <Geth> ¦ doc: whitespace cleanup

[13:28] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/7c6e458d51

[13:28] <linkable6> Link: https://docs.raku.org/language/typesystem

[13:30] <tbrowder> [Coke]: i agree with that! it's too inviting or shooting from the hip

[13:30] <tbrowder> *for

[13:32] <MasterDuke> can you make web edits be allowed, but only mergeable via PR?

[13:33] <[Coke]> We could encourage it, not sure if we could enforce it.

[13:34] <[Coke]> Eh. probably more interesting to consider switching to a regular release schedule on docs (so that edits aren't immediately pushed out)

[13:34] <[Coke]> (maybe on the same schedule as the release of the software)

[13:55] <codesections> I make doc edits through the web UI.  I'm happy to stop, but that'd probably mean I'm less inclined to make minor fixes

[13:55] <codesections> (I do usually open a PR, though)

[14:00] <codesections> re: a docs release schedule, I thought nothing is currently pushed out automatically – that it all waited on JJ to cut a release.  Did that change?

[14:04] *** linkable6 left
[14:05] *** linkable6 joined
[14:24] <tbrowder> no complaint here, i *usually* do the same (see PR to fix my mess shortly)

[14:25] *** Sgeo joined
[14:25] <Geth> ¦ doc: tbrowder++ created pull request #3967: Clarify effect of 'is required' on a private attribute

[14:25] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3967

[14:29] <tbrowder> i think it would help to add a following note about using a BUILD in either case would quell the error even though the user does not enter an explicit value with new.

[14:31] <tbrowder> m: class A { has $.a is required; submethod BUILD(:$a) { $!a = $a } }; A.new

[14:31] <camelia> rakudo-moar ba15173fd: ( no output )

[14:39] *** whatnext joined
[14:40] <whatnext> next question :)  : why would I get "Cannot look up attributes in a My::Class type object" ?

[14:41] <MasterDuke> you need an instance of the class

[14:42] <MasterDuke> m: class A { has $.a = 4 }; say A.new.a; say A.a

[14:42] <camelia> rakudo-moar ba15173fd: OUTPUT: «4␤Cannot look up attributes in a A type object␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:42] <Altreus> whatnext: this confused me for ages. It's a "type object" of My::Class, not a My::Class-type object

[14:43] <codesections> m: my Rat $r = 1/3; say $r.denominator 

[14:43] <camelia> rakudo-moar ba15173fd: OUTPUT: «3␤»

[14:43] <MasterDuke> i wonder why that error doesn't suggest 'are you missing a .new?'? which error does that...?

[14:43] <codesections> m: say Rat.denominator 

[14:43] <camelia> rakudo-moar ba15173fd: OUTPUT: «Cannot look up attributes in a Rat type object␤  in block <unit> at <tmp> line 1␤␤»

[14:46] <whatnext> hm... that would make sense, though I can't seem to make it fit with my situation

[14:48] <MasterDuke> m: class A { has $.a = 4; method foo(A:D:) { say "hi" } }; A.new.foo; A.foo

[14:48] <camelia> rakudo-moar ba15173fd: OUTPUT: «hi␤Invocant of method 'foo' must be an object instance of type 'A', not a␤type object of type 'A'.  Did you forget a '.new'?␤  in method foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:48] <MasterDuke> ^^^ that's what i was thinking of

[14:52] <whatnext> I think I do have an instance of the class. I am trying to access e.g. `self.filename` from within a `load` method in an instance of the class

[14:54] <whatnext> hm.. it's a good clue though, thanks :)

[14:54] <codesections> you need to use $!filename to access an attribute from inside the class

[14:59] <whatnext> I was wondering about that - so `self.filename` is not a good idea?

[15:02] <Altreus> m: class A { has $.a = 4; method foo { say self.a } }; A.new.foo

[15:02] <camelia> rakudo-moar ba15173fd: OUTPUT: «4␤»

[15:02] <Altreus> shrug

[15:02] <Altreus> m: class A { has $!a = 4; method foo { say self.a } }; A.new.\foo

[15:02] <camelia> rakudo-moar ba15173fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3= 4; method foo { say self.a } }; A.new.7⏏5\foo␤»

[15:03] <Altreus> pardon me I'm sure

[15:04] <codesections> self.a (or $.a) call the `a` public method on A.  Which works when there _is_ an `a` public method (including an auto-generated one)

[15:04] <codesections> and when A has been fully built

[15:06] <Altreus> m: class A { has $!a = 4; };

[15:06] <camelia> rakudo-moar ba15173fd: ( no output )

[15:06] <Altreus> ok it was probably that \ I put in by accident

[15:06] <Altreus> m: class A { has $!a = 4; method}; A.new.foo

[15:06] <camelia> rakudo-moar ba15173fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3class A { has $!a = 4; method7⏏5}; A.new.foo␤»

[15:06] <Altreus> ?? where did my method body go

[15:06] <Altreus> stupid IRC client

[15:06] <Altreus> anyway

[15:19] *** holyghost joined
[15:25] *** abraxxa left
[15:30] <whatnext> ok thanks for the clarification :)

[15:54] *** whatnext left
[16:02] *** happy-dude left
[16:02] *** juanfra left
[16:02] *** demostanis[m] left
[16:02] *** AlexDaniel left
[16:02] *** cnx left
[16:02] *** CIAvash left
[16:04] *** juanfra joined
[16:25] *** AlexDaniel joined
[16:25] *** cnx joined
[16:25] *** happy-dude joined
[16:25] *** demostanis[m] joined
[16:25] *** CIAvash joined
[16:36] *** dakkar left
[16:36] *** Altai-man joined
[16:37] *** Altai-man left
[17:11] *** Xliff joined
[17:31] <holyghost> hi Xliff

[17:44] <Xliff> \o

[18:02] *** reportable6 left
[18:05] *** clarjon1 joined
[18:05] *** reportable6 joined
[18:42] * [Coke] chuckles at https://github.com/rottytooth/rot8000

[18:59] <holyghost> lol, elvish rot13

[19:05] *** linkable6 left
[19:05] *** evalable6 left
[19:06] *** evalable6 joined
[20:04] *** stoned75 joined
[20:14] <[Coke]> codesections: in https://www.codesections.com/blog/raku-lisp-impression/ (nice article!) you say IFFE when I think you mean IIFE.

[20:41] *** stoned75 left
[20:47] <codesections> [Coke] ah, yes, the more obscure Inherently Fabulous Function Expression.  (thanks; fixed)

[21:29] *** Oshawott joined
[21:30] *** tejr left
[21:33] *** archenoth left
[21:34] *** eseyman joined
[21:37] *** jgaz joined
[21:59] *** djerius left
[21:59] *** ufobat_ left
[21:59] *** djerius joined
[22:11] *** jgaz left
[22:15] *** jgaz joined
[22:19] *** jgaz left
[22:36] *** tejr joined
[22:43] <[Coke]> :)

[23:07] *** linkable6 joined
