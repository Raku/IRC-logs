[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:16] *** stoned75_ joined
[00:19] *** Doc_Holliwood left
[00:19] *** stoned75 left
[00:58] *** Kaiepi left
[00:58] *** Kaipi joined
[01:05] *** Kaiepi joined
[01:05] *** Kaipi left
[01:36] *** Kaiepi left
[01:39] *** Kaiepi joined
[01:59] *** squashable6 left
[02:00] *** squashable6 joined
[02:03] *** frost joined
[02:11] *** tejr left
[02:12] *** tejr joined
[02:25] *** rassoc left
[02:54] *** teteet joined
[02:54] <teteet> uhhh

[02:54] <teteet> uhh

[02:54] <teteet> hi?

[02:54] <teteet> uhh

[02:54] <teteet> help?

[02:54] *** neshpion joined
[02:55] <teteet> f

[02:55] <moon-child> hello

[02:55] <moon-child> what seems to be the problem?

[02:56] <teteet> hello?

[02:56] <teteet> help ?

[02:56] <moon-child> what do you need help with?

[02:56] <teteet> so....

[02:56] <teteet> raku

[02:56] <teteet> helpoPP?

[02:57] <teteet> X) 

[02:57] <teteet> Uploaded file: https://uploads.kiwiirc.com/files/2618839a01f61483b34ea83eddfd0fec/cam-1625540242135.jpg

[02:58] *** teteet left
[03:02] <neshpion> uh ok

[03:58] *** evalable6 left
[03:58] *** linkable6 left
[03:59] *** evalable6 joined
[04:01] *** linkable6 joined
[04:05] *** casaca joined
[05:02] *** Doc_Holliwood joined
[05:36] *** razetime joined
[05:48] *** ufobat joined
[05:51] *** razetime left
[06:00] *** neshpion left
[06:03] *** reportable6 left
[06:04] *** reportable6 joined
[06:36] *** Raycat|Home left
[06:40] *** Eddward left
[06:55] *** ufobat left
[07:16] *** RaycatWhoDat joined
[07:16] *** Sgeo left
[07:25] *** ufobat joined
[07:29] *** patrickb joined
[07:32] *** patrickb left
[07:33] *** patrickb joined
[07:44] *** Doc_Holliwood left
[07:55] *** dakkar joined
[08:43] <frost> X) 

[08:55] *** evalable6 left
[08:55] *** linkable6 left
[08:57] *** linkable6 joined
[08:58] *** evalable6 joined
[09:10] *** RandalSchwartz left
[09:44] *** Kaiepi left
[09:54] *** Kaiepi joined
[10:54] *** linkable6 left
[10:54] *** evalable6 left
[10:55] *** evalable6 joined
[10:56] *** linkable6 joined
[11:00] *** patrickb left
[11:22] *** Doc_Holliwood joined
[11:48] *** squashable6 left
[11:49] *** squashable6 joined
[12:01] *** Doc_Holliwood left
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:07] *** rassoc joined
[12:11] *** patrickb joined
[12:29] *** sono left
[12:40] *** RandalSchwartz joined
[12:43] *** jess left
[12:45] *** jess joined
[13:30] *** Eddward joined
[13:32] *** linkable6 left
[13:33] *** linkable6 joined
[13:34] *** stoned75_ left
[13:36] *** stoned75 joined
[13:46] *** stoned75 left
[13:56] *** Sgeo joined
[14:14] *** squashable6 left
[14:15] *** frost left
[14:16] <Geth> ¬¶ problem-solving/clarify-readme: fe9d5ca876 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | README.md

[14:16] <Geth> ¬¶ problem-solving/clarify-readme: Address some comments.

[14:16] <Geth> ¬¶ problem-solving/clarify-readme: review: https://github.com/Raku/problem-solving/commit/fe9d5ca876

[14:17] *** squashable6 joined
[14:52] *** linkable6 left
[14:55] *** linkable6 joined
[14:55] *** zubeida joined
[14:59] *** Doc_Holliwood joined
[15:00] *** linkable6 left
[15:01] *** linkable6 joined
[15:10] *** cbk joined
[15:13] *** linkable6 left
[15:15] *** linkable6 joined
[15:23] *** linkable6 left
[15:25] *** linkable6 joined
[15:29] *** zubeida left
[15:31] *** patrickb left
[15:40] *** Doc_Holliwood left
[15:57] *** ufobat left
[15:59] *** linkable6 left
[16:00] *** linkable6 joined
[16:02] <[Coke]> is there a browser preference when working with the generated HTML profiles? (Chrome is taking a very long tiem to process this one...)

[16:03] <[Coke]> ... d'oh. that was edge.

[16:04] <[Coke]> (Chrome not doing any better so far)

[16:07] <lizmat> they all have trouble processing the sometimes massive profiles

[16:07] <lizmat> in my experience

[16:09] <[Coke]> do we need to switch to a sampling instead to reduce the size of the data?

[16:10] <[Coke]> I have some slow running code at $DAYJOB, can't speed it up if I can't figure out where it's slow. :|

[16:10] <lizmat> I think timo has basically shifted to using the SQL version for any sizeable profile

[16:14] * [Coke] digs through the profile page on docs, thanks for the hint.

[16:15] * [Coke] wonders if moarperf will work on windows.

[16:17] * [Coke] gets a response from a stripped down run, and is spending 20% of his time in IO.Str??

[16:18] <[Coke]> er, IO::Path.Str

[16:18] <lizmat> that feels...  meh?

[16:18] <lizmat> but yeah, that's an expensive one, if I recall correctly

[16:18] <lizmat> reminds me of my attempts to simplify IO, and I start to shudder :-(

[16:22] <timo> whoof, yeah

[16:22] <timo> [Coke]: moarperf should work on windows, if it doesn't please ping me again

[16:23] <rassoc> do we have a more elegant way to extract the same chars of two strings? 

[16:23] <rassoc> m: zip("abc".comb, "axc".comb).map({ .head if .head eq .tail }).join.say

[16:23] <camelia> rakudo-moar 6dbe45eee: OUTPUT: ¬´ac‚ê§¬ª

[16:23] <rassoc> keeping the order

[16:24] <[Coke]> also 368976 seems like a LOT of BOOTHash allocations for the work I'm doing.

[16:24] <[Coke]> timo: can't install deps.

[16:24] <[Coke]> Digest::SHA1::Native:ver<0.04> fails.

[16:24] <lizmat> [Coke]: that's probably a lot of method calls and allocations for %_ ?

[16:25] <[Coke]> I'm on a repo build from 2020.11 era.

[16:28] <[Coke]> doing a fresh build of rakudo

[16:31] *** leah2 left
[16:34] *** leah2 joined
[16:36] *** dakkar left
[16:51] <timo> hm, does Digest::SHA1::Native have a "download pre-built dll from the internets" thing or does it try to compile from source?

[17:15] <CIAvash> m: say "abc".comb.grep(* eq 'axc'.comb[$++]).join

[17:15] <camelia> rakudo-moar 6dbe45eee: OUTPUT: ¬´ac‚ê§¬ª

[17:16] <CIAvash> rassoc: another solution ‚Üë

[17:23] <timo> m: say ("abc".comb X "axc".comb).grep({ .[0] eq .[1] }).join

[17:23] <camelia> rakudo-moar 6dbe45eee: OUTPUT: ¬´a ac c‚ê§¬ª

[17:23] <timo> m: say ("abc".comb Z "axc".comb).grep({ .[0] eq .[1] }).join

[17:23] <camelia> rakudo-moar 6dbe45eee: OUTPUT: ¬´a ac c‚ê§¬ª

[17:24] <timo> hm, no, not quite .. at all

[17:25] <rassoc> CIAvash: newbie perspective: shorter, but less straightforward

[17:26] <rassoc> is $ reset upon scope enter?

[17:26] <rassoc> seems so

[17:26] <timo> m: say ("abc".comb Z "axc".comb).grep({ .[0] eq .[1] }).map(*.[0]).join

[17:26] <camelia> rakudo-moar 6dbe45eee: OUTPUT: ¬´ac‚ê§¬ª

[17:26] <timo> $ is syntax for getting an anonymous state variable

[17:27] <rassoc> yeah, but i need compare multiple words in a row; was worried about that state being retained

[17:27] <timo> so it "survives" leaving its scope and re-entering it, but entering the scope one outer from that will create a new closure clone and that means the state var gets "reborn"

[17:27] <rassoc> m: say ("abc".comb Z "axc".comb).map({ .[0] if .[0] eq .[1] }).join

[17:27] <camelia> rakudo-moar 6dbe45eee: OUTPUT: ¬´ac‚ê§¬ª

[17:28] <timo> ah, not bad

[17:28] <rassoc> hm, like .head and .tail a bit better

[17:29] <rassoc> getting the docs for some magical ¬ª syntax. maybe there's something short

[17:29] <rassoc> checking*

[17:32] *** xinming left
[17:33] <rassoc> guess the above is as good as it gets for now. alright, thanks everyone!

[17:33] *** sono joined
[17:36] * [Coke] walked away from the rakudo build, comes back... nothing, it hung on "building nqp ..."

[17:36] <[Coke]> killed it and restarted... it's fine. wtf

[17:45] <[Coke]> build failed with the "include file 'uv.h' error.

[17:45] *** Xliff joined
[17:45] <Xliff> \o

[17:46] <Xliff> vrurg: My apologies. I've updated the replication steps for #4440. Please update your p6-GtkPlus directory and try again.

[17:47] *** Xliff left
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:06] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/07/06/the-next-fast-thing/

[18:29] <rassoc> how does `sub prefix:<‚ô•> { c }` work? the c part specifically. where is this coming from?

[18:29] <rassoc> missing param?

[18:29] <gfldex> yes, wordpress eating stuff again :-/

[18:31] *** RandalSchwartz left
[18:32] <rassoc> but yeah, that's really irking me about raku. you can never quite tell what's going to be fast. even more pronounced with nested loops. `for (@x X @y) -> ($a, $b)` is sooo much slower than nested loops the last time i tried

[18:32] <rassoc> but yeah, that's really irking me about raku. you can never quite tell what's going to be fast. even more pronounced with nested loops. `for (@x X @y) -> ($a, $b)` is sooo much slower than nested loops the last time i tried

[18:33] <rassoc> but yeah, that's really irking me about raku. you can never quite tell what's going to be fast. intuition from other langs doesn't carry over. even more pronounced with nested loops in this case. `for (@x X @y) -> ($a, $b)` is sooo much slower than nested loops the last time i tried

[18:33] <rassoc> but yeah, that's really irking me about raku. you can never quite tell what's going to be fast. intuition from other langs doesn't carry over. even more pronounced with nested loops in this case. `for (@x X @y) -> ($a, $b)` is sooo much slower than nested loops the last time i tried

[18:33] <rassoc> crap, sorry

[18:33] <El_Che> you put it in a loop?

[18:33] <El_Che> :)

[18:35] <rassoc> had trouble with my connection the last few days, wondering why the goddamn msg wasn't going through. bottom part just scrolled off screen -.-

[18:35] <rassoc> goddamn window manager

[18:36] *** Doc_Holliwood joined
[18:36] *** discord-raku-bot joined
[19:30] <[Coke]> Anyone else having trouble with the 'uv.h' missing file bug?

[19:30] *** xinming joined
[19:35] <[Coke]> (workaround: re-try the build?)

[19:37] <timo> that seems to be very new

[19:37] <timo> you can try an older moarvm commit

[19:46] *** MasterDuke joined
[19:47] <MasterDuke> [Coke]: try removing msinttypes.h from your <install>/include directory

[19:48] <MasterDuke> See https://github.com/MoarVM/MoarVM/commit/42bbff95ed280213b96801bf35decccb6ab9cdbd

[19:49] *** MasterDuke left
[20:13] <lizmat> [Coke]: I had the same...   I rebuilt all the intermediate commits, and it seemed to fix itself

[20:14] <lizmat> also, I dud a "git submodule update" somewhere along the way, but I doubt that had anything to do with it

[20:36] *** RandalSchwartz joined
[20:36] *** patrickb joined
[20:57] *** cbk left
[21:01] <timo> gfldex: can you try changing in what order the lines in your latest blogpost are run to see if that changes the timing any?

[21:12] *** kjk joined
[21:31] *** Doc_Holliwood left
[21:43] *** patrickb left
[21:59] <m6locks> what should I pass as a null value if I have a method that expects an instance of a class but there's a certain case where a null would need to be passed? 

[21:59] <m6locks> getting an error expecting xxx but got Nil

[21:59] <timo> you'd want to pass the type object

[21:59] <timo> this is how NativeCall handles null in any case

[22:00] <m6locks> what would I check within the method?

[22:00] <m6locks> if (...)

[22:00] *** neshpion joined
[22:01] <m6locks> I can't check if it's Nil, and the type object is clearly an object right?

[22:01] <timo> check for whether it's defined, using the "with" or "without" keywords

[22:01] <m6locks> ah ok, thanks

[22:06] <m6locks> can I combine it with an if? sort of like without $var or if ($obj.method() == 0)

[22:06] <m6locks> comma says that subroutine if is not declared

[22:08] <japhb> m6locks: `unless $var.defined && $obj.method {`

[22:08] <timo> are you writing stuff like "if($a, $b)"?

[22:08] <m6locks> yea

[22:08] <timo> er, not with a comma

[22:08] <m6locks> japhb: thanks

[22:08] <timo> well, that's a subroutine call, you don't put () with if and friends in raku

[22:25] <gfldex> timo: the order does change the execution time a good bit. Do you suspect the GC to successfully fooly me?

[22:30] <rassoc> m6locks: you can always do `if !$var.defined || $obj.method() == 0 { ... }` in case you absolutely want to keep them together

[22:31] <timo> not GC, i'd suspect dynamic optimization

[22:33] <gfldex> m: my $s1 = Str; my $s2 = "42"; sub s(|c) { when c ~~ :(Str:D $) { say 'defined' }; when c ~~ :(Str:U $) { say 'undefined' }; }; ($s1, $s2)¬ª.&s;

[22:33] <camelia> rakudo-moar 1e6d93c29: OUTPUT: ¬´undefined‚ê§defined‚ê§¬ª

[22:33] <gfldex> m6locks: if you like functional you can use the power of Signature. ^^^ (also see: https://gfldex.wordpress.com/2021/04/21/reusing-a-wheel/)

[22:34] <timo> the different pieces of code surely have a few methods in common, so during the first piece's run time, those would be warmed up and optimized, which the following pieces would be able to take advantage of from the very start

[22:39] <timo> you can run every code once up front so that the optimizer has had a chance to see everything already when you're doing the actual timing, or you do everything in isolation with a whole new process, which makes each timing individually slower, since they all start out cold, but it'll be "fairer"

[22:39] <timo> but a fully warmed-up process may be more representative of "real world" use cases, if you're considering long-running processes more likely than one-off scripts

[22:42] <rassoc> why not just pick one of the benchmark modules for that?

[22:42] <timo> also possible, yeah

[22:45] <gfldex> m: my $s = Str; given $s { when Str:U { say 'undefined' }; when Str:D { say 'defined' }; }

[22:45] <camelia> rakudo-moar 1e6d93c29: OUTPUT: ¬´undefined‚ê§¬ª

[22:45] <gfldex> m6locks: type smilies work with given/when too

[22:46] <gfldex> rassoc: I try to keep external deps out of my blog posts. That way I don't rely on the reader to know to module, nor do I have to explain what they do.

[22:47] <gfldex> I don't think I could explain what my readers do. :)

[22:47] * gfldex .oO( English is odd )

[22:48] <rassoc> but benchmarking is hard, and these modules at least get you a tiny bit closer to the truth ;)

[22:49] *** swaggboi left
[22:50] <timo> gfldex: ping me when/if you update the blog post based on the "new" timings?

[22:51] <gfldex> will do

[22:55] *** swaggboi joined
[23:09] *** neshpion left
[23:10] *** neshpion joined
[23:22] *** Doc_Holliwood joined
