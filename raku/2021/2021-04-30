[00:01] *** kurahaupo left
[00:04] *** kurahaupo joined
[00:05] *** Kaiepi joined
[00:11] *** swaggboi left
[00:13] *** kurahaupo left
[00:18] *** moony left
[00:19] *** kurahaupo joined
[00:19] *** swaggboi joined
[00:23] *** kurahaupo left
[00:24] *** kurahaupo joined
[00:30] *** rindolf left
[00:38] *** Kaiepi left
[00:40] *** moony joined
[00:41] *** kurahaupo left
[00:49] *** kurahaupo joined
[01:06] *** netrino left
[01:14] *** moony left
[01:21] *** camelia_ joined
[01:27] *** b2gills joined
[01:52] *** kvw_5 joined
[01:54] *** lizmat joined
[01:55] *** kvw_5_ left
[02:02] *** moony joined
[02:02] *** camelia_ left
[02:21] *** solitario left
[02:22] *** bloatable6 joined
[02:25] *** solitario joined
[02:36] <xinming> m: my %a = :a(1), :b(2); my %b = %a<>:p.map({ .value => .key }); %b.raku.say;

[02:36] <camelia> rakudo-moar bb069a99c: OUTPUT: «{"1" => "a", "2" => "b"}␤»

[02:37] <xinming> Can we have shorter version of this?

[02:37] <xinming> the   %a<>:p.map({ .value => .key })   thing

[02:39] *** Util joined
[02:49] <raydiak> m: say {:a(1), :b(2)}.antipairs

[02:49] <camelia> rakudo-moar bb069a99c: OUTPUT: «(1 => a 2 => b)␤»

[03:19] *** stoned75 left
[03:21] *** stoned75 joined
[03:25] <xinming> thx

[03:25] <xinming> :-)

[03:40] *** guifa2 joined
[03:42] <raydiak> you're welcome :)

[03:49] *** kurahaupo left
[03:49] *** kurahaupo joined
[03:51] *** Kaiepi joined
[04:01] *** wamba joined
[04:19] *** guifa2 left
[04:19] *** kurahaupo left
[04:23] *** guifa2 joined
[04:36] *** kurahaupo joined
[04:40] *** kurahaupo left
[05:12] *** guifa2 left
[05:24] *** kurahaupo joined
[05:47] *** kurahaupo_ joined
[05:51] *** kurahaupo left
[05:59] *** parabolize left
[06:11] *** sivoais left
[06:11] *** eseyman left
[06:14] *** eseyman joined
[06:39] *** sivoais joined
[06:50] *** patrickb joined
[07:04] *** abraxxa joined
[07:05] *** abraxxa1 joined
[07:08] *** abraxxa left
[07:16] *** asymptotically joined
[07:26] *** ufobat joined
[07:27] *** aborazmeh joined
[07:32] *** db48x left
[07:34] *** _jrjsmrtn left
[07:35] *** __jrjsmrtn__ joined
[07:39] *** lizmat left
[07:43] *** db48x joined
[07:51] *** aborazmeh left
[07:53] *** sena_kun left
[07:53] *** lizmat joined
[07:56] *** wingfold left
[07:57] *** wingfold joined
[07:59] *** sena_kun joined
[08:05] *** jmerelo joined
[08:06] *** LizBot joined
[08:07] *** Manifest0 left
[08:09] *** Manifest0 joined
[08:23] *** Sgeo left
[08:28] *** abraxxa1 left
[08:32] *** Black_Ribbon left
[08:34] *** abraxxa joined
[08:38] *** aborazmeh joined
[08:38] *** aborazmeh left
[08:38] *** aborazmeh joined
[08:39] *** pecastro joined
[08:45] *** mniip left
[08:51] *** aborazmeh left
[09:28] *** frost-lab joined
[09:36] <patrickb> o/

[09:40] <patrickb> Assuming RakuAST would already be a thing. If I'd try to create a binding generator for some API that provides machine consumable API  descriptions, would I better generate plain text source files with loads of NativeCall stubs in it, or better directly generate bytecode via RakuAST? What would be the tradeoffs of the two approaches?

[09:40] *** mniip joined
[09:41] <patrickb> I guess the RakuAST approach would be more difficult to distribute, as I'd either have to distribute only the bytecode, or have the user run the generator on installation.

[09:54] *** ukine left
[09:54] <lizmat> I would go for the source file with stubs in it

[09:54] <lizmat> EVAL is still the most versatile parser :-)

[09:55] *** domidumont joined
[09:55] <lizmat> another approach could be a DSL, but why would you ?

[09:56] <El_Che> wouldn't ast be more portable than nativecall?

[09:58] * leont would prefer AST too, but RakuAST hasn't been merged yet so that means waiting

[09:59] <lizmat> having worked a little bit with RakuAST for a printf implementation

[09:59] <lizmat> I know that people might underestimate a. the ease of working with RakuAST, and b. the readability

[10:00] <El_Che> so it's easier to work with than expected, but less readable?

[10:00] <El_Che> (trying to parse your statement :) )

[10:04] <lizmat> https://github.com/rakudo/rakudo/blob/rakuast/src/core.e/Formatter.pm6#L690  

[10:05] <lizmat> El_Che  leont an example of creating AST's in code

[10:06] <lizmat> I've put the equivalent Raku code above every time, because *I* needed that to be able to easily read the code

[10:07] *** rindolf joined
[10:11] <patrickb> Hm. So RakuAST is good for live code generation (e.g. generating a Route handler in Cro, database code some SQL slang / ORM and similar), but no good fit if the result is to be persisted and / or distributed as in an API wrapper.

[10:11] <patrickb> Or do I miss a good reason to use RakuAST for something like that?

[10:12] <lizmat> I would say that is a correct assessment

[10:12] <lizmat> Raku code or a DSL would be better for that, I'd say

[10:13] <lizmat> and the Raku code could be a pre-compiled (generated) module ?

[10:13] *** samcv left
[10:13] <patrickb> Then my intuition was right. Thanks for giving opinions everyone!

[10:13] *** samcv joined
[10:14] <lizmat> basically, any situation where you would now create Raku source code to be used directly in an EVAL

[10:14] <lizmat> will benefit from RakuAST

[10:14] *** aluaces left
[10:15] <lizmat> anything else, I would say, is not a good fit

[10:15] * leont has code that generates a regex, that should be made easier too

[10:16] <lizmat> yes, it would, because now you're basically using EVAL for that (under the hood but still )

[10:18] <leont> Regex concatenation is a nasty thing to do

[10:19] <leont> @elements.reduce({ /$^a$^b/ })

[10:19] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core.c/INTERPOLATE.pm6   # read and shudder  :-)

[10:42] *** frost-lab left
[11:06] *** wamba left
[11:12] *** kurahaupo_ left
[11:17] *** kurahaupo joined
[11:44] *** patrickb left
[11:46] *** DiffieHellman left
[11:47] *** DiffieHellman joined
[11:54] *** wingfold left
[11:55] *** wingfold joined
[11:57] *** MasterDuke left
[11:59] *** tejr left
[11:59] *** natrys joined
[12:00] *** tejr joined
[12:02] *** domidumont left
[12:02] *** aluaces joined
[12:03] *** ufobat left
[12:36] *** jmerelo left
[12:51] <Xliff> \o

[12:51] <Xliff> Does raku have a built in clamp-like function?

[12:54] * leont had wanted to port Crypt::Passphrase to Raku, but he may have to adopt Crypt::Argon2 and Crypt::Bcrypt for that to be viable

[12:55] *** titsuki joined
[13:08] <lizmat> wonders what clamp-like is

[13:11] <El_Che> https://developer.mozilla.org/en-US/docs/Web/CSS/clamp()

[13:11] <El_Che> soen languages take a compare function as a parameter

[13:13] <lizmat> looks like an easy ecosystem function to make

[13:18] *** Nornie28 joined
[13:19] *** Nornie28 left
[13:24] *** LizBot left
[13:25] *** wingfold left
[13:33] <Xliff> lizmat: sub clamp($a, Range() $r) { max( $r.min, max($a, $r.max) )

[13:33] <Xliff> m: sub clamp($a, Range() $r) { max( $r.min, max($a, $r.max) ); 10.&clamp(0..5).say

[13:33] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3, max($a, $r.max) ); 10.&clamp(0..5).say7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loo…»

[13:34] <Xliff> m: sub clamp ($a, Range() $r) { max( $r.min, max($a, $r.max) ); 10.&clamp(0..5).say

[13:34] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3, max($a, $r.max) ); 10.&clamp(0..5).say7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loo…»

[13:34] <Xliff> m: sub clamp ($a, Range() $r) { max( $r.min, max($a, $r.max) }; 10.&clamp(0..5).say

[13:34] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3ge() $r) { max( $r.min, max($a, $r.max) 7⏏5}; 10.&clamp(0..5).say␤»

[13:34] <Xliff> m: sub clamp ($a, Range() $r) { max( $r.min, max($a, $r.max) ) }; 10.&clamp(0..5).say

[13:34] <camelia> rakudo-moar bb069a99c: OUTPUT: «10␤»

[13:34] <Xliff> Huh.

[13:34] <Xliff> Glad I checked that.

[13:35] <Xliff> That second max should be a min.

[13:35] <Xliff> m: sub clamp ($a, Range() $r) { max( $r.min, min($a, $r.max) ) }; 10.&clamp(0..5).say

[13:35] <camelia> rakudo-moar bb069a99c: OUTPUT: «5␤»

[14:05] *** wingfold joined
[14:07] *** domidumont joined
[14:10] *** wingfold left
[14:23] *** guifa2 joined
[14:24] *** codesect` left
[14:24] *** codesections left
[14:25] *** codesections joined
[14:31] *** rindolf left
[14:43] *** guifa2 left
[14:46] *** guifa2 joined
[14:48] *** guifa2 left
[14:50] *** guifa2 joined
[14:52] *** guifa2 left
[14:54] *** parabolize joined
[14:54] *** guifa2 joined
[14:55] *** guifa2 left
[14:55] *** telex left
[14:56] *** telex joined
[15:09] *** natrys left
[15:14] *** Sgeo joined
[16:01] *** jmerelo joined
[16:02] *** wingfold joined
[16:07] *** domidumont left
[16:22] *** domidumont joined
[16:34] *** stoned75 left
[16:36] *** stoned75 joined
[16:56] <moritz_> m: sub clamp($a, Range() $r) { $.min max ($r min $r.mx ) }; say clamp -4, 0..5

[16:56] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $.min used where no 'self' is available␤at <tmp>:1␤------> 3sub clamp($a, Range() $r) { $.min7⏏5 max ($r min $r.mx ) }; say clamp -4, 0.␤    expecting any of:␤        term␤»

[16:56] <moritz_> m: sub clamp($a, Range() $r) { $r.min max ($r min $r.mx ) }; say clamp -4, 0..5

[16:56] <camelia> rakudo-moar bb069a99c: OUTPUT: «No such method 'mx' for invocant of type 'Range'.  Did you mean any of␤these: 'max', 'Mix'?␤  in sub clamp at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:56] <moritz_> m: sub clamp($a, Range() $r) { $r.min max ($r min $r.max ) }; say clamp -4, 0..5

[16:56] <camelia> rakudo-moar bb069a99c: OUTPUT: «0..5␤»

[16:56] <moritz_> not quite what I expected

[17:06] *** lizmat left
[17:13] <gfldex> m: sub clamp($min is raw , $target is raw, $max is raw) { ($min max $target) min $max }; say clamp 0, -5, 10; say clamp 0, 5, 10; say clamp 0, 15, 10;

[17:13] <camelia> rakudo-moar bb069a99c: OUTPUT: «0␤5␤10␤»

[17:14] <gfldex> I believe Raku does not have a clamp function because we got properly working min/max operators.

[17:16] *** lizmat joined
[17:18] *** domidumont left
[17:21] <codesections>   gfldex: I thought that there was general agreement-in-principle to adding clamp to CORE if someone is willing to do the implementation? https://github.com/Raku/problem-solving/issues/4#issuecomment-475871264

[17:24] *** LizBot joined
[17:50] *** jmerelo left
[17:51] *** wamba joined
[17:56] *** Xliff left
[18:02] *** kurahaupo left
[18:02] *** kurahaupo joined
[18:04] *** mniip left
[18:04] *** db48x left
[18:04] *** kvw_5 left
[18:04] *** b2gills left
[18:04] *** dogbert17 left
[18:04] *** aindilis left
[18:04] *** m_athias left
[18:04] *** cooper left
[18:04] *** webstrand left
[18:04] *** Ekho left
[18:07] *** mniip joined
[18:07] *** db48x joined
[18:07] *** kvw_5 joined
[18:07] *** b2gills joined
[18:07] *** dogbert17 joined
[18:07] *** aindilis joined
[18:07] *** m_athias joined
[18:07] *** cooper joined
[18:07] *** webstrand joined
[18:08] *** LizBot left
[18:08] *** LizBot joined
[18:10] *** Ekho joined
[18:11] <kurahaupo> gfldex: is inserting parentheses into $min max $target max $min actually required? What's the associativity of min & max?

[18:12] <kurahaupo> *what're

[18:21] <[Coke]> m: say 3 min 5 max 10

[18:21] <camelia> rakudo-moar bb069a99c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since 'min' and 'max' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3say 3 min 57⏏5 max 10␤  …»

[18:22] <[Coke]> ^^

[18:22] <[Coke]> m: say 3 min 5 min 10

[18:22] <camelia> rakudo-moar bb069a99c: OUTPUT: «3␤»

[18:22] <[Coke]> m: say [min](3,5,10) # aka

[18:22] <camelia> rakudo-moar bb069a99c: OUTPUT: «3␤»

[18:34] <codesections> isn't `[min](3,5,10)` just `min(3,5,10)` with extra typing?

[18:36] <raydiak> seems weird. that precedence level in the docs is listed as "|| ^^ // min max". but || and // can be freely mixed, and act as if they were left associative instead of list associative. I don't understand why that entire precedence level shouldn't act the same

[18:38] <gfldex> m: say &[max].WHAT, &max.WHAT;

[18:38] <camelia> rakudo-moar bb069a99c: OUTPUT: «(Sub+{is-pure}+{Precedence})(Sub+{is-pure})␤»

[18:39] <gfldex> codesections: ^^^ yes, right now they are quite close. But I would assume the compiler to cheat with operators but not with subs.

[18:42] <codesections> gfldex: why's that?  If we stick to the idea that "operators are just subroutines with funny names", then I'd expect the compiler to cheat equally with both

[18:44] *** dataangel joined
[18:44] <gfldex> For user defined operators that is surly true. But we want our nice language to become a nice fast language. If your name is Rakudo, cheat away!

[18:45] <codesections> well, sure.  But surely that applies to built-in subs too, right?

[18:50] <gfldex> .wrap

[18:51] <codesections> hmm, I was thinking about raydiak's question and wondered if the docs were right about the assoc. of ||, ^^, and //.  Is there a way to introspect the associativity of an operator?  I expected to find a method on the Method, but I don't see one

[18:51] <gfldex> Well, to some degree that is true. But I see subs as more dynamicly then operators. Raku is a lot less dynamic that it looks on the surface. And we need it to be to get the speed we want.

[18:51] <codesections> (I know I can just check the source; just curious, though )

[18:52] <gfldex> Sub+{is-pure}+{Precedence} there must be a role somewhere

[18:53] <gfldex> m: say &[min].prec;

[18:53] <camelia> rakudo-moar bb069a99c: OUTPUT: «{assoc => list, prec => k=}␤»

[18:53] <gfldex> :D

[18:53] <gfldex> codesections: see: src/core.c/traits.pm6

[18:54] <codesections> m: say &infix:<||>.prec

[18:54] <camelia> rakudo-moar bb069a99c: OUTPUT: «{assoc => list, prec => k=, thunky => .t}␤»

[18:54] <lizmat> note that on the rakuast branch, all that knowledge lives in OperatorProperties.pm6

[18:54] <gfldex> That made me chuckle because I used introspection to find more introspection. :)

[18:54] <codesections> :)

[19:06] *** natrys joined
[19:26] *** mattfly joined
[19:31] *** stux|RC-only left
[19:31] *** titsuki left
[19:34] *** stux|RC-only joined
[19:40] *** stux|RC-only left
[19:42] *** stux|RC-only joined
[19:44] *** dylanwh left
[19:53] *** brtastic joined
[19:54] <brtastic> Cro::Websocket tests are failing for me, version 0.8.4, should I be concerned or force the installation?

[19:57] *** stux|RC-only left
[20:02] *** Anton joined
[20:04] <Anton> Hi! I asked the following question on the raku Discord channel, but I did not get sufficient feedback. I hope whoever sees this question again won't be too annoyed...

[20:06] <Anton>  I am working on a package for parsing numeric word forms, e.g. say from-numeric-word-form('one thousand and twenty three') that should give 1023. Here is the repository of the package: https://github.com/antononcube/Raku-Lingua-NumericWordForms . At this point I have not added that many languages (only nine) but maybe that is enough to submit

[20:06] <Anton> that package to https://modules.raku.org/ ?

[20:06] <Anton> Also, as I have mentioned in the README.md, instead of submitting a new package, maybe I should request to be merged with Lingua::Number ?

[20:11] <codesections> Anton: I don't think there's any minimum size for a module to be worth submitting to the ecosystem (even informally/as a common practice)

[20:11] <El_Che> Anton: discuss the merge with the author, is (s)he wants to merge or not, if the api is similar

[20:11] <El_Che> Anton: but you can submit modules, just be clear in your documentation what the state is

[20:12] <lizmat> also, some modules on the ecosystem just export a single sub

[20:12] <lizmat> eigenstates being such an example

[20:13] <Anton> lizmat So, your advice is to make a module with just one function? (I am looking at eigenstates right now.)

[20:14] <lizmat> well, not in general: if functions share  common idea, they could be in one module

[20:14] <lizmat> e.g. Array::Sorted::Util

[20:15] <Anton> codesections El_Che Thanks, I will make a submission soon.

[20:16] <El_Che> Anton++

[20:16] <codesections> Anton: also, if you're interested in the area/colaborating with others, you might want to talk with guifa (IRC nick)

[20:16] <Anton> @lizmat Ok, I think I have a reasonable set of three related functions: to-numeric-word-form(), from-numeric-word-form(), and translate-numeric-word-form() .

[20:16] <lizmat> there you go!

[20:17] <codesections> (aka alabamenhu (github)/ mateu (module directory))

[20:18] <Anton> My "problem" is that Lingua::Number has a version of to-numeric-word-form(), but I think it is buggy, and I think that it is Lingua::Number is under-document.

[20:18] <lizmat> check it out with guifa2   

[20:18] <lizmat> I'm quite sure they're willing to work things out and make things better

[20:18] <Anton> My "problem" is that Lingua::Number has a version of to-numeric-word-form(), but I think it is buggy, and I think that Lingua::Number is under-document.

[20:18] <codesections> (Yeah, I mention guifa because they have a number of modules in a somewhat similar vein: https://modules.raku.org/search/?q=intl)

[20:19] <Anton> codesections Yes, I think that too. I looked/browsed those packages at some point.

[20:20] <codesections> Anton++

[20:21] *** stux|RC-only joined
[20:22] <Anton> codesections El_Che lizmat Thanks for the advice on Lingua::NumericWordForms!

[20:23] <lizmat> ++Anton

[20:26] <Anton> I have another set of questions related to resource ingestion. (1) Are resource files ingested during installation and/or package load? (2) Does the design of Raku envision the ingestion of large resource files? Say, a few CSV files with 100K rows each. (3) I think it is better to use the Singleton Design Pattern to ingest larger resource files. Am

[20:26] <Anton> I correct?

[20:29] *** Anton left
[20:29] <lizmat> the %RESOURCES hash just points to the resources...

[20:29] *** Anton joined
[20:29] <lizmat> it's up to the developer when to use them

[20:29] *** Anton left
[20:30] *** Anton3 joined
[20:30] <Anton3> Here is a repository that exemplifies my questions above: https://github.com/antononcube/Raku-DSL-Entity-English-Geographics . The goal of that repository is to provide parser-interpreters of geographic locations that can be used in other grammars or roles. So, the repository has a few CSV files that map geographical names and adjective to

[20:30] <Anton3> corresponding IDs.

[20:31] *** ecocode left
[20:31] <Anton3> @lizmat "it's up to the developer when to use them" -- Ok. This means -- I think -- that using Singleton is the right approach.

[20:31] <lizmat> [22:29:23]  <lizmat>	the %RESOURCES hash just points to the resources...

[20:31] <lizmat> I guess you missed that

[20:34] *** ecocode joined
[20:35] <Anton3> @lizmat " %RESOURCES hash just points to the resources" -- I understand that. My questions are not clear. I will try to clarify...

[20:40] <Anton3> If I have this code in "main" module file:

[20:40] <Anton3> use v6;

[20:40] <Anton3>  use DSL::Shared::Roles::English::PipelineCommand;

[20:40] <Anton3>  use DSL::Shared::Utilities::FuzzyMatching;

[20:40] <Anton3>  #-----------------------------------------------------------

[20:40] <Anton3>  my $fileName = %?RESOURCES<CountryAdjectiveToName.csv>;

[20:40] <Anton3>  my Str @adjNamPairs = $fileName.lines;

[20:40] <Anton3>  my Str %countryAdjectiveToName{Str} = @adjNamPairs.map({ $_.lc.split(',') }).flat;

[20:40] <Anton3>  my Set $knownCountryAdjectives = Set(%countryAdjectiveToName);

[20:40] <Anton3>  my Set $knownCountryAdjectiveWords = Set(%countryAdjectiveToName.keys.map({ $_.split(/h+/) }).flat);

[20:41] <Anton3> I assume that the resource files content is read only once -- at module installation and/or load.

[20:42] <lizmat> if you code it like that, it will be read every time the module is loaded

[20:43] *** MasterDuke joined
[20:44] <Anton3> Unfortunately, with the approach in the code above I did not figure out how to use/access the sets $knownCountryAdjectives  and $knownCountryAdjectiveWords in the other files of the project. So, I implemented the Singleton pattern instead, which will guarantee that the resource data is read/ingested only once per session.

[20:44] <Anton3> @lizmat "if you code it like that, it will be read every time the module is loaded" -- Ok, thanks.

[20:45] <lizmat> I wonder if it wouldn't make sense to actually generate Raku code from the csv

[20:46] *** stux|RC-only left
[20:46] <lizmat> put that in a submodule, and use that: then it *would* be precompiled

[20:47] <MasterDuke> .tell Xliff what about `for ^5 { once say "first"; .say }`? i.e., `once` instead of `FIRST`

[20:48] *** stux|RC-only joined
[20:48] *** natrys left
[20:48] <Anton3> @lizmat Yes, I agree I tried something like that. I simply generate the code for a very large role. Here is (much smaller) example: https://github.com/antononcube/Raku-DSL-English-FoodPreparationWorkflows/blob/main/lib/DSL/English/FoodPreparationWorkflows/Grammar/FoodEntities.rakumod

[20:50] <lizmat> yup, looks like

[20:50] <Anton3> And yes I have seen examples of generating rules and tokens in role objects.

[20:50] *** unicodable6 left
[20:50] <lizmat> fwiw , I always also generate some comments to indicate how the code was generated, when and which parts shouldn't be touched as they will be overwritten the next time you generate

[20:50] *** tellable6 joined
[20:51] *** evalable6 joined
[20:51] <Anton3> @lizmat I completely agree. I simple abandoned that approach, but I kept that file in the repository as an example.

[20:51] *** brtastic left
[20:51] *** greppable6 left
[20:51] *** abraxxa left
[20:51] *** releasable6 left
[20:51] *** committable6 joined
[20:52] *** shareable6 joined
[20:52] <lizmat> well, parts of the Raku core are generated, and parts of some of my modules are generated that way

[20:52] *** sourceable6 joined
[20:52] *** asymptotically left
[20:53] *** bisectable6 joined
[20:53] <Anton3> The thing is that very familiar with Mathematica, so I generate the code using Mathematica packages. For example, this one: https://github.com/antononcube/ConversationalAgents/blob/master/Packages/WL/RakuGrammarClassesGeneration.m . Then my Mathematica notebook describe the process for the Raku code generation.

[20:53] *** statisfiable6 left
[20:53] <MasterDuke> .tell Xliff what about `for ^5 { once say "first"; .say }`? i.e., `once` instead of `FIRST`

[20:53] <tellable6> MasterDuke, I'll pass your message to Xliff

[20:54] *** statisfiable6 joined
[20:55] *** unicodable6 joined
[20:55] <Anton3> @lizmat But closer to your point probably this example of Raku tests generated with Mathematica: https://github.com/antononcube/Raku-Lingua-NumericWordForms/blob/main/t/Worded-number-specs-parsing-English.t

[20:55] *** stux|RC-only left
[20:55] <Anton3> @lizmat Thank you again for your feedback!

[20:56] <lizmat> you're welcome!

[20:56] *** tellable6 left
[20:57] *** releasable6 joined
[20:58] *** Anton3 left
[20:59] *** stux|RC-only joined
[21:03] <[Coke]> [min]() and min() work out the same, but in general you could have a sub that only takes two args, so the foo(1,2,3) form isn't always guaranteed to work

[21:04] *** Black_Ribbon joined
[21:05] <MasterDuke> the infix form is a lot faster (at least used to be a while ago)

[21:05] *** sourceable6 left
[21:05] *** benchable6 left
[21:05] *** sourceable6 joined
[21:05] *** bloatable6 left
[21:06] *** HarmtH left
[21:07] *** nativecallable6 joined
[21:07] *** tellable6 joined
[21:07] *** bloatable6 joined
[21:07] *** greppable6 joined
[21:10] *** stux|RC-only left
[21:16] *** mattfly left
[21:16] <codesections> [Coke]: fair point

[21:18] *** stux|RC-only joined
[21:24] *** stoned75 left
[21:32] *** aborazmeh joined
[21:49] *** evalable6 left
[21:49] *** shareable6 left
[21:49] *** statisfiable6 left
[21:49] *** bisectable6 left
[21:49] *** unicodable6 left
[21:49] *** committable6 left
[21:49] *** sourceable6 left
[21:49] *** bloatable6 left
[21:49] *** tellable6 left
[21:49] *** releasable6 left
[21:49] *** coverable6 left
[21:49] *** greppable6 left
[21:49] *** nativecallable6 left
[21:51] *** unicodable6 joined
[21:51] *** sourceable6 joined
[21:52] *** notable6 joined
[21:52] *** greppable6 joined
[21:52] *** releasable6 joined
[21:52] *** statisfiable6 joined
[21:52] *** committable6 joined
[21:53] *** evalable6 joined
[21:53] *** tellable6 joined
[22:32] *** rindolf joined
[22:36] *** Kaiepi left
[22:40] *** aborazmeh left
[23:11] *** pecastro left
[23:15] *** Kaiepi joined
[23:24] *** cpage joined
[23:29] *** cpage left
[23:32] *** cpage joined
