[00:01] *** reportable6 left
[00:03] *** reportable6 joined
[00:29] *** softmoth left
[00:37] *** epony joined
[00:41] *** Sgeo_ joined
[00:42] *** Sgeo left
[00:51] <codesections> there isn't a method that returns a list of all subscribers to a Tap, is there?

[01:07] *** titsuki joined
[01:22] *** titsuki left
[01:31] *** frost-lab joined
[01:40] *** elcaro left
[01:41] *** elcaro joined
[01:49] *** kvw_5 joined
[01:50] <[Coke]> isn't the tap *the* subscription?

[01:50] <[Coke]> So you'd want all the objects returned when someone called .tap on a Supply?

[01:51] <codesections> er, no, sorry all subscribers to a Supply

[01:52] <[Coke]> I think you'd have to wrap a supply's tap to get that.

[01:52] *** kvw_5_ left
[01:54] <codesections> that makes sense.  I guess by default/with `$supply.tap`, a subscriber isn't even given a name in the calling code

[01:58] <[Coke]> I'm not sure you can .wrap the tap method. You could add another method that tracked and called, but then you're missing anyone you're sharing the object with

[01:59] <[Coke]> m: my $s = Supply.from-list(1, 2, 3); my $tapper = $s.^methods.grep({$_.name eq 'tap'}).map({$_.wrap(-> {say 'hi'})}); my $a = $s.tap; dd $a;

[01:59] <camelia> rakudo-moar 877fdd775: OUTPUT: «Tap $a = Tap.new␤»

[02:00] <[Coke]> that looks like it was just ignored. not sure if possible.

[02:01] <codesections> yeah, it may not be.  I wonder if there's a deeper reason to make sure it's _not_ possible, for concurrency safety or something 

[02:01] <codesections> unrelated question: is it possible to have a dynamic parameter for a block/sub?  

[02:02] <codesections> m: for (1, 2, 3) -> $*a { say $*a.VAR.dynamic }

[02:02] <camelia> rakudo-moar 877fdd775: OUTPUT: «False␤False␤False␤»

[02:02] <codesections> m: for (1, 2, 3) -> $*a is dynamic { say $*a.VAR.dynamic }

[02:02] <camelia> rakudo-moar 877fdd775: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is' -> 'dynamic' in a parameter declaration.␤at <tmp>:1␤    expecting any of:␤        rw␤        readonly␤        copy␤        required␤        raw␤        leadi…»

[02:52] *** linkable6 left
[02:52] *** evalable6 left
[02:53] *** evalable6 joined
[02:54] *** linkable6 joined
[03:54] *** greppable6 left
[03:54] *** nativecallable6 left
[03:54] *** committable6 left
[03:54] *** notable6 left
[03:54] *** reportable6 left
[03:54] *** sourceable6 left
[03:54] *** bisectable6 left
[03:54] *** squashable6 left
[03:54] *** coverable6 left
[03:54] *** evalable6 left
[03:54] *** quotable6 left
[03:54] *** releasable6 left
[03:54] *** benchable6 left
[03:54] *** statisfiable6 left
[03:54] *** bloatable6 left
[03:54] *** unicodable6 left
[03:54] *** shareable6 left
[03:54] *** tellable6 left
[03:55] *** benchable6 joined
[03:55] *** tellable6 joined
[03:55] *** releasable6 joined
[03:55] *** sourceable6 joined
[03:55] *** greppable6 joined
[03:56] *** bloatable6 joined
[03:56] *** committable6 joined
[03:56] *** quotable6 joined
[03:56] *** notable6 joined
[03:56] *** coverable6 joined
[03:56] *** evalable6 joined
[03:56] *** squashable6 joined
[03:56] *** statisfiable6 joined
[03:57] *** bisectable6 joined
[03:57] *** reportable6 joined
[03:57] *** nativecallable6 joined
[03:57] *** shareable6 joined
[03:57] *** unicodable6 joined
[04:20] *** wamba joined
[04:25] *** xinming_ joined
[04:28] *** Sgeo_ left
[04:28] *** xinming left
[04:42] *** Sgeo joined
[04:51] *** rindolf joined
[05:20] *** gordonfish left
[06:01] *** reportable6 left
[06:02] *** reportable6 joined
[06:03] *** sno left
[06:05] *** sno joined
[06:29] *** domidumont joined
[06:29] *** jmerelo joined
[06:35] *** sno left
[06:41] *** Sgeo left
[06:41] *** sno joined
[06:47] *** sno left
[06:50] *** sno joined
[06:53] *** brtastic joined
[06:57] *** sno left
[06:59] *** sno joined
[07:04] *** sno left
[07:05] *** sno joined
[07:12] *** sno left
[07:15] *** sno joined
[07:22] *** sno left
[07:24] *** sno joined
[07:29] *** sno left
[07:32] *** abraxxa1 joined
[07:36] *** __jrjsmrtn__ joined
[07:37] *** _jrjsmrtn left
[07:39] *** pecastro joined
[07:42] *** abraxxa1 left
[07:43] *** abraxxa1 joined
[07:49] *** kurahaupo_ joined
[07:50] *** kurahaupo left
[08:03] *** Altai-man_ left
[08:07] *** wamba left
[08:18] *** kurahaupo joined
[08:21] *** kurahaupo_ left
[08:48] *** wamba joined
[09:10] *** dogbert11 left
[09:10] *** dogbert11 joined
[09:22] *** parabolize left
[09:28] *** sena_kun joined
[09:38] *** wamba left
[09:49] *** sno joined
[09:51] *** wamba joined
[10:07] *** ecocode left
[10:12] *** ecocode joined
[10:18] *** ecocode left
[10:20] *** ecocode joined
[10:21] *** jmerelo left
[10:21] *** jmerelo joined
[10:28] *** frost-lab left
[10:43] *** rindolf left
[11:09] *** Xliff joined
[11:15] *** linkable6 left
[11:16] *** linkable6 joined
[11:28] *** wl20 left
[11:29] *** wl20 joined
[11:33] *** Kaiepi left
[11:38] *** timlegge left
[11:39] *** LizBot left
[11:43] *** domidumont left
[12:01] *** reportable6 left
[12:02] *** wingfold left
[12:03] *** reportable6 joined
[12:05] *** wingfold joined
[12:14] <Xliff> Is there any way to get the list of types from a subset?

[12:16] <tyil> .map(*.WHAT)?

[12:17] <Xliff> m: my subset A where Int | Str | Num; A.map(*.WHAT).say

[12:17] <camelia> rakudo-moar 877fdd775: OUTPUT: «Cannot map a A using 'Whatever'␤Did a * (Whatever) get absorbed by a list?␤  in block <unit> at <tmp> line 1␤␤»

[12:18] <tyil> ah

[12:19] <tyil> hm

[12:19] <Xliff> Yeah. I think everything after the where code is turned into a block of code.

[12:19] <MasterDuke> m: my subset A where Int | Str | Num; A.map({.WHAT}).say

[12:19] <camelia> rakudo-moar 877fdd775: OUTPUT: «((A))␤»

[12:19] <Xliff> So you can't introspect a subset as it stands today.

[12:20] <MasterDuke> maybe the eigenstates module might help, but i'd not bet a lot on it

[12:20] <Xliff> m: my @types = (Str, Int, Num); our subset A where @types.any; say Str ~~ A

[12:20] <camelia> rakudo-moar 877fdd775: OUTPUT: «True␤»

[12:20] <Xliff> ^^ That might be the best way to get what I want, for now.

[12:21] <Xliff> I just introspect @types.

[12:21] <brtastic> If I'm making a Grammar rule, can I have a named capture group and refer to that capture later in the same rule?

[12:22] <moritz> yes

[12:26] <tobs> m: subset A where Int | Str; say A.^refinement; say A.^refinement.($_) for Int, Str, Blob

[12:26] <camelia> rakudo-moar 877fdd775: OUTPUT: «-> ;; $_ { #`(Block|71081904) ... }␤True␤True␤False␤»

[12:27] <tobs> apparently the junction is even wrapped in a block, so I don't see how you could get at the types, even if you're guaranteed that the subset's where clause is just a junction of types.

[12:27] <lizmat> yeah, that's a thunk, a block without its own scope

[12:28] <lizmat> and we can't inspect code

[12:28] <kawaii> is it not possible to apply traits to submethods? I'm using the Red ORM and trying to make exposing it's $*RED-DB variable a bit easier, but the compiler says what I'm doing isn't allowed (https://github.com/shuppet/raku-mint/blob/main/lib/Mint.rakumod#L9-L14). I tried to do `submethod TWEAK() is red-method {}` but got greeted with `Can't use unknown trait 'is' -> 'red-method' in a submethod declaration.`, I assume this is because my trait 

[12:28] <kawaii> doesn't exist yet because TWEAK triggers before the object is fully created?

[12:28] <lizmat> make sure the trait exists ?

[12:32] <kawaii> is there more to defining a trait than what I linked? the current page on traits in the documentation lead me to believe so

[12:45] <Xliff> m: say "bleah" ~~ *.ends-with('eah')

[12:45] <camelia> rakudo-moar 877fdd775: OUTPUT: «True␤»

[12:45] <Xliff> m: say "blea" ~~ *.ends-with('eah')

[12:45] <camelia> rakudo-moar 877fdd775: OUTPUT: «False␤»

[12:46] <lizmat> m: say "foo" ~~ True

[12:46] <camelia> rakudo-moar 877fdd775: OUTPUT: «Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at <tmp>:1␤    ------> 3say "foo" ~~ 7⏏5True␤True␤»

[12:47] <lizmat> m: say "foo" ~~ False

[12:47] <camelia> rakudo-moar 877fdd775: OUTPUT: «Potential difficulties:␤    Smartmatch against False always fails; if you mean to test the topic for truthiness, use :!so or *.not or !* instead␤    at <tmp>:1␤    ------> 3say "foo" ~~ 7⏏5False␤False␤»

[12:47] <lizmat> Xliff ^^

[12:47] <lizmat> m: no worries; say "foo" ~~ False

[12:47] <camelia> rakudo-moar 877fdd775: OUTPUT: «False␤»

[12:47] <lizmat> m: no worries; say "foo" ~~ True

[12:47] <camelia> rakudo-moar 877fdd775: OUTPUT: «True␤»

[12:48] <Xliff> lizmat: I don't understand your caveat.

[12:48] <Xliff> The test cases worked as expected.

[12:48] <lizmat> yeah, but the smartmatch is not needed ?

[12:49] <Xliff> Actually, I was testing if a smartmatch would match against Whatever code.

[12:49] <Xliff> Which it does... 

[12:49] *** brtastic left
[12:49] <Xliff> So I can: use File::Find; .say for find(dir => "lib/Evolution", name => *.ends-with(".pm6"))

[12:49] <Xliff> And not use a regex... :)

[12:50] <Xliff> But now I need multiple tests, so I now need a block. *sigh*

[12:51] <Xliff> m: say "blea" ~~ { .starts-with("b") && *.ends-with('eah') }

[12:51] <camelia> rakudo-moar 877fdd775: OUTPUT: «WhateverCode.new␤»

[12:51] <Xliff> :(

[12:51] <Xliff> The name argument is smartmatched against all IO::Path elements.

[12:52] <Xliff> So now I need to drop back to regexes....

[12:52] <leont> m: say "blea" ~~ { .starts-with("b") && .ends-with('eah') }

[12:52] <camelia> rakudo-moar 877fdd775: OUTPUT: «False␤»

[12:53] <Xliff> leont: oops!

[12:53] <Xliff> m: say "blea" ~~ { .starts-with("b") && .ends-with('ea') }

[12:53] <camelia> rakudo-moar 877fdd775: OUTPUT: «True␤»

[12:53] <Xliff> m: say "clea" ~~ { .starts-with("b") && .ends-with('ea') }

[12:53] <camelia> rakudo-moar 877fdd775: OUTPUT: «False␤»

[12:53] <Xliff> \o/

[13:01] *** jmerelo left
[13:06] <Xliff> m: say "subroutine" ~~ /«'sub'»/

[13:06] <camelia> rakudo-moar 877fdd775: OUTPUT: «Nil␤»

[13:06] <Xliff> m: say "subroutine" ~~ /«sub»/

[13:06] <camelia> rakudo-moar 877fdd775: OUTPUT: «Nil␤»

[13:06] <Xliff> Huh

[13:10] *** lucasb joined
[13:31] *** Black_Ribbon left
[13:34] *** b2gills left
[13:40] *** timlegge joined
[13:41] *** gordonfish joined
[13:59] *** b2gills joined
[14:00] <MasterDuke> aren't << and >> word boundaries? like \b in pcre?

[14:05] <moritz> correct

[14:05] *** doconthe2ocks left
[14:06] *** doconthe2ocks joined
[14:12] *** doconthe2ocks left
[14:12] *** doconthe2ocks joined
[14:22] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/05/03/2021-18-double-comma/

[14:27] <lizmat> afk for a few hours&

[14:28] *** wl20 left
[14:30] *** wl20 joined
[14:36] *** Sgeo joined
[15:00] *** Xliff left
[15:05] *** brtastic joined
[15:10] *** wamba left
[15:13] *** parabolize joined
[15:19] *** ens joined
[16:06] *** wingfold left
[16:18] <brtastic> how can I express a newline in a character class? <-[\n]> does not seem to work

[16:25] *** wingfold joined
[16:26] <codesections> m: say "ln1\nln2" ~~ /<-[\n]>*/

[16:26] <camelia> rakudo-moar 877fdd775: OUTPUT: «｢ln1｣␤»

[16:26] <codesections> brtastic: <-[\n]> seems to work? ^^^

[16:29] <brtastic> codesections: I must be doing something else wrong. I also found :Zl which seems to serve the same purpose but it also doesn't work for my case

[16:29] <brtastic> :!Zl to be exact

[16:32] <raydiak> "it doesn't work" with no code example is very difficult to diagnose :)

[16:38] <brtastic> yeah I'm not asking you to diagnose right now, I wanted to know why my character class isn't working, and it was diagnosed already ;)

[16:38] <brtastic> I'll figure it out eventually

[16:40] <brtastic> by the way, is <:Zl> like vertical whitespace, or am I getting a wrong idea here?

[16:42] <raydiak> hmmm

[16:43] <raydiak> m: say "\x0B" ~~ /<:Zl>/

[16:43] <camelia> rakudo-moar 877fdd775: OUTPUT: «Nil␤»

[16:43] <raydiak> not the same, apparently

[16:47] <raydiak> just tested everything listed in the docs under \v, looks like U+2028 LINE SEPARATOR is the only character that matches both \v and <:Zl>

[16:48] <brtastic> ahh I've got CR LF line endings, thats why I'm having all these trouble :P

[16:49] <raydiak> ah ha. I was just thinking about that nightmare last night...wondering if I've written anything that breaks under windows because of that

[16:51] <brtastic> $$ seem to help, but it makes rakudo take all my memory if I place it in some weird places

[16:53] <raydiak> odd

[16:53] <raydiak> sometimes I've used \r?\n for portability

[17:02] <codesections> Odd, way the docs talk about \n, I wouldn't have thought CRLF endings would be a problem: https://docs.raku.org/language/regexes#\n_and_\N

[17:03] <codesections> (no personal experience with Raku + Windows, though)

[17:05] <codesections> m: say ("ln1\r\nln2" ~~ /<[\n]>/).Str.raku

[17:05] <camelia> rakudo-moar 877fdd775: OUTPUT: «"\r\n"␤»

[17:11] *** brtastic left
[17:16] <raydiak> that's more in line with what I thought I remembered reading somewhere. though I also recall having to use \r?\n somewhere. don't know when or where or why, though

[17:39] *** wamba joined
[18:01] *** reportable6 left
[18:03] *** reportable6 joined
[18:18] *** dogbert11 left
[18:23] *** pat_js left
[18:24] *** patrickb joined
[18:26] *** linkable6 left
[18:26] *** dogbert17 joined
[18:27] *** linkable6 joined
[18:29] *** natrys joined
[18:37] *** buffet left
[18:38] *** buffet joined
[18:47] *** wamba left
[18:59] *** sno left
[19:00] *** sno joined
[19:21] *** natrys left
[19:21] *** wamba joined
[19:27] *** pat_js joined
[19:36] <patrickb> I'm searching for someone with access to a MacOS machine with Big Sur installed to perform some (trivial) tests to help with solving a ticket (https://github.com/Raku/App-Rakubrew/issues/34). Does this apply to anyone?

[19:37] <ugexe> i cant atm, but im on Big Sur and use rakubrew without any issue

[19:38] <ugexe> although i believe it was installed prior to installing Big Sur

[19:39] *** mowcat joined
[19:42] *** mowcat left
[19:44] <raydiak> whenever you have time, we'd appreciate help filling out the blanks in the testing matrix in the last comment on that issue. should only take a single-digit number of minutes.

[19:53] *** elcaro left
[19:53] *** moony left
[19:53] *** bdju left
[19:53] *** m_athias left
[19:55] *** elcaro joined
[19:55] *** moony joined
[19:55] *** bdju joined
[19:55] *** m_athias joined
[19:55] *** moony left
[19:57] *** moony joined
[20:13] <ugexe> i renamed ~/.rakubrew to ~/.rakubrew.bak/, then ran `curl https://rakubrew.org/install-on-macos.sh | sh` and it worked and so did raku -v

[20:13] <ugexe> is there a point to doing the rest of the matrix?

[20:14] <raydiak> yes. some people are uncomfortable blindly executing a script from a url, or are otherwise confused, so they download the script to a file first. this causes other issues

[20:15] <ugexe> im not clear what /path/to/rakubrew is

[20:15] <ugexe> is that ~/.rakubrew or ~/.rakubrew/bin/rakubrew

[20:16] <raydiak> download the script through a browser instead of curling and piping. that should actually be the path to the install script, not rakubrew. my mistake

[20:18] <raydiak> actually, that's not right. the original person who encountered the error downloaded https://rakubrew.org/macos/rakubrew and tried to run it

[20:18] <raydiak> so d/l https://rakubrew.org/macos/rakubrew from a browser, then try the other things

[20:21] <raydiak> either way should give the same behavior, if I'm not mistaken. would also be curious what happens if you curl it to a file instead of download through a browser. I'm betting anything in a terminal (e.g. curl) won't show the quarantine problems but idk for sure

[20:27] <patrickb> raydiak: Thanks for explaining more.

[20:27] *** HobGoblin left
[20:27] *** HobGoblin joined
[20:27] <patrickb> I'll be off to bed soon...

[20:27] *** HobGoblin is now known as UukGoblin

[20:28] *** cooper left
[20:29] *** wl20 left
[20:29] <raydiak> patrickb: you're welcome, happy to help. I'll update the matrix in my comment as we get more information. sleep well :)

[20:29] *** cooper joined
[20:31] *** wl20 joined
[20:32] <patrickb> Thank you, raydiak and ugexe as well!

[20:32] * patrickb is off to bed

[20:32] <patrickb> o/

[20:32] *** patrickb left
[20:32] <raydiak> \o

[20:35] <ugexe> i downloaded that file through firefox, had to chmod +x the file, then cntrl + click + open (which is how you have to open files from the internet) which gives a warning that you can click OK. that created the ~/.rakubrew directory but there is nothing in ~/.rakubrew/bin. Its all frustratingly more difficult than using curl (and if you are checking the checksums and stuff you probably dont care about

[20:35] <ugexe> downloading things from you rbrowser)

[20:37] <raydiak> so it does run, at least through the gui, just with a warning and for some reason still doesn't actually work correctly

[20:38] <raydiak> what about doing the things in the matrix to the file before you run it? does it work in that case?

[20:40] <raydiak> so far I'm leaning towards just adding a note like '"curl | sh" is the only method known to work reliably on Big Sur'

[20:44] *** cooper left
[20:44] <ugexe> if i run `./rakubrew` from the Downloads directory it does the same thing

[20:44] <ugexe> codesign command -> ./rakubrew: main executable failed strict validation

[20:45] <ugexe> xattr -c /path/to/rakubrew didnt error but didnt fix it

[20:45] <ugexe> xattr -d com.apple.quarantine /path/to/rakubrew complained about com.apple.quarantine not existing or something

[20:46] <ugexe> xattr: ./rakubrew: No such xattr: com.apple.quarantine

[20:48] <ugexe> echo 'eval "$(/Users/ugexe/Downloads/rakubrew init Zsh)"' >> ~/.zshrc

[20:48] <ugexe> its telling me to do that, which cant be right

[20:48] <ugexe> it should be suggesting the non-existing ~/.rakubrew/bin/rakubrew

[20:49] <raydiak> awesome, thanks for the data. I don't think in the direct download case that it's expected to install itself to ~/.rakubrew/bin, it just creates ~/.rakubrew to store the rakudos in, but you're responsible for putting the rakubrew script in your $PATH yourself. does it build a working raku if you do e.g. "Downloads/rakubrew build moar"?

[20:50] <raydiak> the installer script should install like that, but the direct download instructions just say "put it in your path"

[20:51] <ugexe> PATH="$PWD:$PATH" ./rakubrew build moar

[20:51] <ugexe> The shell hook required to run rakubrew in either 'env' mode or with the 'shell' command seems not to be installed.

[20:52] <ugexe> Run 'rakubrew init' for installation instructions if you want to use those features,

[20:52] <ugexe> or run 'rakubrew mode shim' to use 'shim' mode which doesn't require a shell hook.

[20:53] <raydiak> try the shim?

[20:54] <raydiak> I don't even recall exactly what that does, I'm just reading the instructions on rakubrew.org under "bare bones"

[20:55] *** HarmtH joined
[21:14] <raydiak> If you're out of time to play with it, np. I think we have enough information to clarify the instructions at this point. Thanks a ton for your help!

[21:27] *** mowcat joined
[21:29] *** wl20 left
[21:30] *** wl20 joined
[21:33] *** wmoxam_ left
[21:33] *** wmoxam joined
[21:36] *** skipnow joined
[21:36] *** Black_Ribbon joined
[21:40] *** [Coke] left
[21:44] *** skipnow left
[21:45] *** skipnow joined
[21:46] *** skipnow__ joined
[21:46] *** skipnow left
[21:47] *** skipnow__ left
[21:49] *** skipnow joined
[21:50] *** skipnow left
[21:50] *** skipnow_ joined
[21:52] *** skipnow_ left
[21:54] *** skipnow joined
[21:56] *** skipnow left
[21:56] *** skipnow joined
[21:57] *** skipnow left
[22:02] *** skipnow joined
[22:04] *** skipnow left
[22:04] *** skipnow50 joined
[22:08] *** skipnow50 left
[22:10] *** softmoth joined
[22:17] *** pecastro left
[22:22] *** wamba left
[22:29] <ingy> o/

[22:30] *** mowcat left
[22:31] <softmoth> hi, ingy

[22:32] <tadzik> \o

[22:42] *** cooper joined
[22:52] *** dataangel joined
[22:56] *** rindolf joined
[23:11] <softmoth> Hello! Would anyone please run: zef update && zef install rakudoc; and let me know if it works for you, and how you like it. I'm curious primarily to ensure that it finds your installed modules. The formatting is rudimentary but I do find it very handy already.

[23:11] *** edds joined
[23:11] <edds> X)

[23:16] <softmoth> m6locks, I've removed the external Documentable dependency from rakudoc, and it should be trivial to install now

[23:18] <edds> where this language used?

[23:26] <softmoth> edds, it's largely used by hobbyists, people interested in language design, and in the Rakudo compiler itself. There are many modules available at https://modules.raku.org, and resources for learning more about Raku at https://raku.org/community

[23:27] <edds> softmoth what interesting in this lang?

[23:28] <raydiak> edds: also read towards the bottom of raku.org homepage, "Successfully use in production at"

[23:29] <softmoth> https://docs.raku.org/language/faq#Why_should_I_learn_Raku?_What's_so_great_about_it?

[23:29] <edds> raydiak i not familliar with this logos

[23:31] <raydiak> me neither mostly :)

[23:31] <softmoth> It depends on what interests you, but for me personally I like the built-in Grammars for parsing, and the way it makes both functional and object-oriented programming first class paradigms. It is both lazy and eager at the same time, mostly done behind the scenes. It has multi-threading features everywhere.

[23:32] <softmoth> Unicode support is better than any other language, probably.

[23:33] <edds> you are responsive :)

[23:33] <softmoth> rarely, but you caught me at a good time :-)

[23:33] <edds> what you doing now?

[23:34] <softmoth> I just finished an improvement to the long-abandoned 'rakudoc' program, and I was hanging out here looking for feedback from others

[23:35] <softmoth> My wife is a bit late getting home from work, so I'm just hanging out until she arrives....

[23:35] <edds> hah

[23:35] <softmoth> What's your interest in Raku? Where did you hear about it?

[23:36] <edds> on weird russian forum

[23:36] <edds> linux.org.ru

[23:37] <edds> from some news post on habr

[23:37] <edds> guys tell that this language is slow

[23:38] <edds> what is MoarVM

[23:40] <edds> title was 'Racudo released' and im like :what is this

[23:41] <softmoth> MoarVM is a virtual machine designed specifically to run Raku on. That is, its abstractions match the needs of Raku well. So when you run Rakudo, it generates MoarVM bytecode. And running a Raku program is done by the moarvm program. (Or, Rakudo can also generate Java VM bytecode, to run on the jvm instead of MoarVM.)

[23:42] <raydiak> for some things, it's true we aren't the fastest. but we're improving performance in various areas with every monthly releaese, often multiplying the speed of some functions by several times in one release

[23:43] <edds> so you need moarvm to run raku?

[23:43] <softmoth> Hmm, yes, maybe if you're interested in languages you heard a long time ago about Perl 6, a sister language to Perl. Raku is the language that came out of the Perl 6 effort, and its main compiler is called Rakudo.

[23:44] <softmoth> edds, yes, you need the `moar` interpreter. The JVM output works, too, although with less features. There used to be .NET and Javascript backends also, but I don't think they're maintained anymore.

[23:46] <edds> its works only in special vm

[23:46] <edds> its can be used for some computing, ai ?

[23:47] <softmoth> Yes, it needs to run in the VM, similar to many dynamic languages.

[23:48] <softmoth> Yes, it is a very capable, expressive language.

[23:48] <edds> may be its cool to show power of lang in example thats alive and usable project

[23:48] <softmoth> You might look at https://cro.services/

[23:48] <japhb> edds: Cro? Red? MUGS?

[23:49] <edds> and its  open possibilities to be in focus

[23:49] <edds> japhb im dont understand

[23:51] <japhb> edds: You were asking for projects that might show the power of the language?

[23:52] <japhb> Here's an early example, one of the first JSON parsers for Raku: https://github.com/moritz/json/tree/master/lib/JSON

[23:52] <softmoth> edds, Red:  https://modules.raku.org/dist/Red:cpan:FCO#red ; MUGS: https://modules.raku.org/dist/MUGS:zef:zef:japhb#name

[23:52] <edds> japhb im just imagine this, like you are put your passion in cooperative-project may be like ai algorithms

[23:53] <japhb> https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm is a good example of how nice and succinct Raku Grammars can be

[23:53] <japhb> edds: Are you asking if I have put energies into an open source project, or whether Raku is good for AI, or something else?

[23:54] <edds> japhb sprry i cant agree with you because im not understand anything what i see on that page

[23:54] <edds> mm yes)

[23:55] <edds> not engineers may be work with

[23:55] <edds> what are you interest? may be space

[23:56] <edds> i tell stranger things

[23:56] <japhb> edds: If you mean the Grammar page, it's pretty much a direct translation of the official JSON grammar.  But fair enough.  :-)

[23:56] *** clarjon1 joined
[23:57] <japhb> In the Raku world, I'm often a "mantle" developer -- writing things that sit on top of the core and support people doing things at the outer layers.  Libraries and frameworks and such.

[23:58] <softmoth> japhb, would you be able to test `zef update; zef install rakudoc` and see if it works for you?

[23:58] <japhb> Sometimes I dip down lower, sometimes I build something for the top level.

