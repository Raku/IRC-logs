[00:01] *** SystemFFan left
[00:01] *** lichtkind left
[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:41] *** Maylay left
[00:44] *** Maylay joined
[00:55] <Xliff> Can rakudo do Twig?

[01:25] <[Coke]> would you expect the code in the twig templates to be raku?

[01:26] <[Coke]> https://modules.raku.org/search/?q=template has a few templating options.

[01:28] <[Coke]> https://cro.services/docs/reference/cro-webapp-template also may be of interest.

[01:44] *** evalable6 left
[01:44] *** linkable6 left
[02:18] *** Xliff_ joined
[02:19] *** Xliff left
[02:21] *** simcop2387 left
[02:21] *** perlbot left
[02:23] *** frost joined
[02:27] *** Xliff_ left
[02:36] *** perlbot joined
[02:38] *** simcop2387 joined
[02:45] *** evalable6 joined
[03:08] *** aleksb joined
[03:13] *** rakuUser left
[03:29] *** keutoi left
[03:31] *** keutoi joined
[03:36] *** clarjon1 joined
[04:36] *** committable6 left
[04:36] *** nativecallable6 left
[04:36] *** coverable6 left
[04:36] *** squashable6 left
[04:36] *** benchable6 left
[04:36] *** bisectable6 left
[04:36] *** shareable6 left
[04:36] *** unicodable6 left
[04:36] *** notable6 left
[04:36] *** releasable6 left
[04:36] *** evalable6 left
[04:36] *** sourceable6 left
[04:36] *** quotable6 left
[04:36] *** bloatable6 left
[04:36] *** statisfiable6 left
[04:36] *** greppable6 left
[04:36] *** reportable6 left
[04:36] *** tellable6 left
[04:36] *** bloatable6 joined
[04:36] *** nativecallable6 joined
[04:37] *** reportable6 joined
[04:37] *** quotable6 joined
[04:37] *** Xliff joined
[04:37] *** greppable6 joined
[04:38] *** evalable6 joined
[04:38] *** squashable6 joined
[04:38] *** unicodable6 joined
[04:38] *** notable6 joined
[04:38] *** statisfiable6 joined
[04:39] *** homura joined
[04:39] *** tellable6 joined
[04:47] *** linkable6 joined
[04:53] *** kjp left
[04:55] *** kjp joined
[05:17] *** homura left
[05:17] *** homura joined
[05:36] *** committable6 joined
[05:37] *** bisectable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:18] *** Sgeo left
[06:34] *** Summer left
[06:34] *** Summer joined
[06:35] *** Altai-man joined
[06:36] *** Altai-man left
[06:37] *** sourceable6 joined
[06:38] *** shareable6 joined
[06:39] *** Altai-man joined
[07:01] *** keutoi left
[07:11] *** lichtkind joined
[07:13] *** keutoi joined
[07:35] *** yggdrasil63 joined
[07:38] *** benchable6 joined
[07:39] *** releasable6 joined
[07:40] *** aleksb left
[07:47] *** keutoi left
[08:42] *** holyghost joined
[08:54] *** MoC joined
[08:56] <yggdrasil63> m: say 13.^methods;

[08:56] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «(new Capture Int sign Num Rat FatRat abs Bridge sqrt base polymod expmod is-prime floor ceiling round lsb msb narrow Range conj rand sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh tanh atanh sech asech cosech…»

[08:57] <yggdrasil63> m: say "z1".succ;

[08:57] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «z2␤»

[08:57] <yggdrasil63> m: say "/".succ;

[08:57] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «/␤»

[08:58] <yggdrasil63> m: say "?".succ;

[08:58] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «?␤»

[08:58] <yggdrasil63> m: say "..".succ;

[08:58] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «..␤»

[09:01] <yggdrasil63> m: say $*DISTRO;

[09:01] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «opensuse-leap (15.2)␤»

[09:22] *** lizmat left
[09:23] *** lizmat joined
[09:23] *** TempIRCLogger__ joined
[09:25] *** TempIRCLogger left
[09:28] <yggdrasil63> m: say "z1".succ.succ;

[09:28] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «z3␤»

[09:29] <yggdrasil63> m: say "a".prev;

[09:29] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «No such method 'prev' for invocant of type 'Str'.  Did you mean any of␤these: 'grep', 'pred', 'tree'?␤  in block <unit> at <tmp> line 1␤␤»

[09:29] <yggdrasil63> m: say "a".pred;

[09:29] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «Decrement out of range␤  in block <unit> at <tmp> line 1␤␤»

[09:29] <yggdrasil63> m: say "/".pred;

[09:29] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «/␤»

[09:35] <lizmat> yggdrasil63: "/" is not magical

[09:35] <lizmat> m: say "B".prev

[09:35] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «No such method 'prev' for invocant of type 'Str'.  Did you mean any of␤these: 'grep', 'pred', 'tree'?␤  in block <unit> at <tmp> line 1␤␤»

[09:35] <lizmat> m: say "B".pred

[09:35] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «A␤»

[09:35] <lizmat> :-)

[09:38] *** coverable6 joined
[09:39] <yggdrasil63> lizmat: I was just wondering what would happen for symbols when you call .succ or .pred

[09:40] <yggdrasil63> m: say "B".pred;

[09:40] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «A␤»

[09:40] <yggdrasil63> m: say "&".pred;

[09:40] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «&␤»

[09:40] <lizmat> m: say "&".ord.pred.chr

[09:40] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «%␤»

[09:41] <lizmat> that would be more general :-)

[09:47] <yggdrasil63> Interesting

[09:48] <yggdrasil63> m: say "«".ord.prev.chr

[09:48] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «No such method 'prev' for invocant of type 'Int'.  Did you mean any of␤these: 'grep', 'pred', 'tree'?␤  in block <unit> at <tmp> line 1␤␤»

[09:48] <yggdrasil63> m: say "«".ord.pred.chr

[09:48] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «ª␤»

[09:48] <yggdrasil63> Ha!

[09:48] <yggdrasil63> Very interesting language.

[09:48] <lizmat> thank you :-)

[09:49] <yggdrasil63> m: say "«".ord.succ.chr

[09:49] *** Nih joined
[09:49] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «¬␤»

[09:49] *** Nih left
[09:51] <yggdrasil63> m: subset zero-integer of Int where * = 0; my zero-integer i = 1; say i ;

[09:51] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multiple prefix constraints not yet implemented. Sorry.␤at <tmp>:1␤------> 3er of Int where * = 0; my zero-integer i7⏏5 = 1; say i ;␤»

[09:53] <yggdrasil63> Does where support multiple clauses?

[10:01] <yggdrasil63> x`

[10:07] <frost> m: subset zero-integer of Int where * = 0; my zero-integer $i = 1; say $i ;

[10:07] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «Cannot modify an immutable Whatever (*)␤  in block <unit> at <tmp> line 1␤␤»

[10:07] <frost> m: subset zero-integer of Int where * == 0; my zero-integer $i = 1; say $i ;

[10:07] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «Type check failed in assignment to $i; expected zero-integer but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[10:07] <frost> m: subset zero-integer of Int where * == 0; my zero-integer $i = 0; say $i ;

[10:07] <camelia> rakudo-moar 3ebbcee23: OUTPUT: «0␤»

[10:10] *** keutoi joined
[10:12] <raydiak> yggdrasil63: you can compare against multiple values with junctions, or you can do more complex logic using the block form instead of the whatever star

[10:15] <raydiak> e.g. `where * == 0|1`, or `where { $_ == 0 || $_ == 1 }`

[10:17] <Xliff> /j #cro

[10:18] *** lichtkind left
[10:43] <keutoi> I am not sure how `sub MAIN` is being dispatched, but why doesn't this work `sub MAIN(@a)` while `sub MAIN(*@a)` works?

[10:46] <lizmat> keutoi: you cannot specify an array on the commandline

[10:46] <lizmat> you *can* specify multiple named arguments on the command line

[10:47] <lizmat> so something like sub MAIN(:@foo)   would work with --foo=a --foo=b

[10:48] <lizmat> you *can* specify (unnamed) arguments on the command line, but they'd be interpreted as multiple single values

[10:48] <lizmat> so sub MAIN($a,$b) for two values

[10:48] <lizmat> if you don't know the number of values you're going to get, you need a slurpy array

[10:49] <keutoi> So there is no situation in which `sub MAIN(@a)` definition actually works, right?

[10:50] <lizmat> I don't think so, but would gladly be proven wrong :-)

[10:52] <keutoi> We might need that clarification in language/create-cli.

[10:58] <Geth> ¦ doc: k3ut0i++ created pull request #3949: passing indeterminate number of parameters to MAIN

[10:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3949

[11:18] *** linkable6 left
[11:18] *** evalable6 left
[11:19] *** evalable6 joined
[11:21] *** avar left
[11:22] *** jaguart left
[11:44] <yggdrasil63> :frost :raydiak thanks for the clarification.

[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:10] *** yggdrasil63 left
[12:14] <tbrowder> hi, all

[12:15] *** rakuUser joined
[12:17] *** keutoi left
[12:17] *** keutoi joined
[12:20] *** linkable6 joined
[12:21] <tbrowder> not quite raku related, but is there a mac user here who has installed user TLS/SLS certificate for use in accessing private areas of websites who would be willing to help a friend of mine (located in us mountain time zone) with his problem?

[12:22] <tbrowder> i don't have access to a mac so it's difficult to debug over the phone and we don't have a way to see his screen.

[12:23] <tbrowder> pls contact me by private msg if interested, thanks.

[12:26] <tbrowder> but re raku, i am using raku in creating web maps on my websites using tomtom maps SDK

[12:28] *** avar joined
[12:33] *** Doc_Holliwood joined
[12:33] <Doc_Holliwood> Would it be possible to modify the regex engine so that it operates on lists of characters as input instead of strings?

[12:42] *** frost left
[13:09] <moritz_> with enough work put in, that would be possible

[13:14] *** PotatoGim left
[13:15] *** PotatoGim joined
[13:23] *** tbrowder left
[13:23] *** tbrowder joined
[14:02] *** Sgeo joined
[14:03] <tib> Hello, a tentative planning for the ephemeral miniconf: https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-tentative-planning-aom normal slots are full, still looking for lightning talks speakers :)

[14:09] <codesections> are `my @l := (1, 2, 3)` and `my @l is List = (1, 2, 3)` exactly the same, or is there a semantic difference that I'm missing?

[14:15] <ugexe> seems that way for the most part, but for instance:

[14:15] <ugexe> m: my @a := (1,2,3); my @b is List = (1,2,3); @a := 1

[14:15] <camelia> rakudo-moar ea8a95e56: OUTPUT: «Type check failed in binding; expected Positional but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[14:15] <ugexe> m: my @a := (1,2,3); my @b is List = (1,2,3); @b := 1

[14:15] <camelia> rakudo-moar ea8a95e56: OUTPUT: «Type check failed in binding; expected List but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[14:16] *** b2gills left
[14:16] *** b2gills joined
[14:17] <codesections> Interesting 

[14:18] <ugexe> that comment does help me internalize golangs := a bit better though

[14:20] *** Doc_Holliwood left
[14:23] *** keutoi left
[14:24] *** neither joined
[14:25] *** keutoi joined
[14:39] *** MoC left
[14:47] *** Doc_Holliwood joined
[14:58] *** doconthe1ocks left
[14:59] *** keutoi left
[15:02] *** homura left
[15:08] <Geth> ¦ doc/rx-adverbs: 5e54c056ff | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[15:08] <Geth> ¦ doc/rx-adverbs: Clarify where rx declarator allows adverbs

[15:08] <Geth> ¦ doc/rx-adverbs: 

[15:08] <Geth> ¦ doc/rx-adverbs: A regex declared with `rx` allows adverbs both before the delimiter (`rx:s/pattern/`) and 

[15:08] <Geth> ¦ doc/rx-adverbs: after (`rx/:s pattern/`), but the docs only mentioned the first option.  This fixes that, and

[15:08] <Geth> ¦ doc/rx-adverbs: brings the rx section of the page into alignment with the adverb section.

[15:08] <Geth> ¦ doc/rx-adverbs: review: https://github.com/Raku/doc/commit/5e54c056ff

[15:08] *** neither left
[15:08] <Geth> ¦ doc: codesections++ created pull request #3951: Clarify where rx declarator allows adverbs

[15:08] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3951

[15:44] *** holyghost left
[15:46] <Geth> ¦ doc: e223f5e11a | keutoi++ (committed by Juan Julián Merelo Guervós) | doc/Language/create-cli.pod6

[15:46] <Geth> ¦ doc: passing indeterminate number of parameters to MAIN

[15:46] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/e223f5e11a

[15:46] <linkable6> Link: https://docs.raku.org/language/create-cli

[15:54] *** Doc_Holliwood left
[16:22] *** archenoth joined
[16:25] *** keutoi joined
[16:28] *** Guest59 joined
[16:34] *** Guest59 left
[16:35] *** Guest20 joined
[16:35] *** Guest20 left
[16:51] *** Guest92 joined
[16:51] *** Guest92 left
[17:21] *** Doc_Holliwood joined
[17:31] *** Guest26 joined
[17:33] *** Guest26 left
[18:02] *** neither joined
[18:02] *** reportable6 left
[18:08] *** patrickb joined
[18:22] *** keutoi left
[18:32] *** neither64 joined
[18:33] *** neither64 left
[18:34] *** Doc_Holliwood left
[18:38] *** lichtkind joined
[18:45] *** Doc_Holliwood joined
[18:47] *** neither31 joined
[18:58] <neither31> hi, is `$obj.WHAT.new` an idiomatic way to make a new object as the same type as `$obj`?

[18:59] <MasterDuke> seems like a decent way to me

[19:00] <codesections> I don't think I've ever needed to do that, so I'm not sure…

[19:00] <lizmat> I think for most core classes, you can leave out the .WHAT

[19:00] <codesections> but wouldn't $obj.new also work unless it's a very strangely constructed object?

[19:01] <lizmat> for custom classes: if a new does does something different if the invocant is an instance, 

[19:01] <lizmat> then who knows

[19:01] <lizmat> most classes I know of, don't make the distinction

[19:01] <codesections> yeah, that's what I meant by "very strangely constructed" :D 

[19:07] <ugexe> .WHAT.clone is another option although i dont see why it would be better than the other options

[19:07] <lizmat> cloning a type object ??

[19:08] <moon-child> neither31: you can just use $obj.new

[19:08] <moon-child> oh, already suggested

[19:08] <ugexe> cloning a type object is the first example shown for https://docs.raku.org/routine/clone#class_Mu

[19:09] <moon-child> 'Note that .clone does not go the extra mile to shallow-copy @. and %. sigiled attributes'  should that not be 'deep-copy'?

[19:10] <codesections> ugexe yeah, but that example dies…

[19:10] <ugexe> because its being passed incorrect arguments

[19:10] <ugexe> m: say Num.clone

[19:10] <camelia> rakudo-moar ea8a95e56: OUTPUT: «(Num)␤»

[19:11] <codesections> m: say Num.clone(4)

[19:11] <camelia> rakudo-moar ea8a95e56: OUTPUT: «Cannot resolve caller clone(Num:U: Int:D); none of these signatures match:␤    (Mu:U: *%twiddles)␤    (Mu:D: *%twiddles)␤  in block <unit> at <tmp> line 1␤␤»

[19:11] <codesections> m: say Num.clone.new(4)

[19:11] <camelia> rakudo-moar ea8a95e56: OUTPUT: «4␤»

[19:11] <codesections> but why not just do Num.new ?

[19:14] <ugexe> well i did say i dont see why it would be better than .new

[19:14] <codesections> fair :)

[19:14] <neither> Oh I didn't even think of `$obj.new` as I was looking for a class method

[19:15] <neither> But still, with WHAT intent is more clear IMHO

[19:15] <neither> Thanks

[19:16] *** patrickb left
[19:19] <MasterDuke> yeah, i rarely prefer something longer over shorter, but i think i would in this case

[19:43] *** Xliff left
[20:23] *** squashable6 left
[20:24] *** squashable6 joined
[20:29] *** neither left
[20:29] *** neither31 left
[21:02] *** Doc_Holliwood left
[21:19] *** melezhik joined
[21:19] <melezhik> .

[21:19] <melezhik> .

[21:25] *** melezhik left
[21:27] <moon-child> m: gather { ^5 .map: &take }

[21:27] <camelia> rakudo-moar 57841911f: ( no output )

[21:27] <moon-child> m: say gather { ^5 .map: &take }

[21:27] <camelia> rakudo-moar 57841911f: OUTPUT: «(0 1 2 3 4)␤»

[21:48] <moon-child> m: say [[1, 2, 3], [4, 5, 6], [7, 8, 9]][;0]

[21:48] <camelia> rakudo-moar 57841911f: OUTPUT: «Use of Nil.Int coerced to empty string␤(1)␤  in block <unit> at <tmp> line 1␤»

[21:48] <moon-child> why doesn't ^^ work?

[21:48] <moon-child> m: say [[1, 2, 3], [4, 5, 6], [7, 8, 9]][*;0]

[21:48] <camelia> rakudo-moar 57841911f: OUTPUT: «(1 4 7)␤»

[21:49] <moon-child> can do ^^ instead, but it's less pretty

[22:24] <moon-child> m: say [[1], ['1'], [4]].unique(:as(&map.assuming(&[~])), :with(&[eqv]))

[22:24] <camelia> rakudo-moar 57841911f: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq (you␤might solve this by adding .cache on usages of the Seq, or by assigning␤the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[22:24] <moon-child> why??

[22:25] *** evalable6 left
[22:25] *** linkable6 left
[22:26] *** evalable6 joined
[22:36] *** codesections left
[22:36] <ugexe> if there is a problem with code that uses 'assuming' then 'assuming' is probably the problem

[22:36] *** lichtkind left
[22:37] <ugexe> the implementation is... well you can look for yourself

[22:40] <moon-child> m: say [[1], ['1'], [4]].unique(:as(*.map(&[~]), :with(&[eqv]))

[22:40] <camelia> rakudo-moar 57841911f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3].unique(:as(*.map(&[~]), :with(&[eqv]))7⏏5<EOL>␤»

[22:40] <moon-child> m: say [[1], ['1'], [4]].unique(:as(*.map(&[~])), :with(&[eqv]))

[22:40] <camelia> rakudo-moar 57841911f: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq (you␤might solve this by adding .cache on usages of the Seq, or by assigning␤the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[22:40] <moon-child> ugexe: same result without assuming

[22:40] <ugexe> i should have known i was wrong when it didnt rhyme

[22:42] <moon-child> lol

[22:42] <moon-child> and yeah, I noticed the implementation of assuming was ... shoddy.  But doesn't seem to be the problem in this case!

[23:03] *** reportable6 joined
[23:08] <gfldex> m: sub foo { "Good &:greeting(now.DateTime.hour) $:name!" }; say foo :name<Paul>, :greeting{$_ < 12 ?? 'morning' !! 'day'}; say &foo.signature;

[23:08] <camelia> rakudo-moar 57841911f: OUTPUT: «Good day Paul!␤(:&greeting!, :$name!)␤»

[23:08] <gfldex> I think that's an ENODOC.

[23:21] <gfldex> At least &: is not in the index. And I can't find named &-sigiled placeholder vars.

[23:21] <gfldex> &^ is not in the index either.

[23:27] *** linkable6 joined
