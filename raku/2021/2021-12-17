[00:07] *** reportable6 left
[00:07] *** jmcgnh left
[00:17] *** jmcgnh joined
[00:25] *** getimiskon left
[01:25] *** sourceable6 left
[01:25] *** quotable6 left
[01:25] *** greppable6 left
[01:25] *** committable6 left
[01:25] *** linkable6 left
[01:25] *** shareable6 left
[01:25] *** bisectable6 left
[01:25] *** tellable6 left
[01:25] *** squashable6 left
[01:25] *** benchable6 left
[01:25] *** bloatable6 left
[01:25] *** nativecallable6 left
[01:25] *** statisfiable6 left
[01:25] *** coverable6 left
[01:25] *** notable6 left
[01:25] *** evalable6 left
[01:25] *** unicodable6 left
[01:25] *** releasable6 left
[01:25] *** unicodable6 joined
[01:26] *** bisectable6 joined
[01:26] *** bloatable6 joined
[01:26] *** coverable6 joined
[01:26] *** nativecallable6 joined
[01:26] *** shareable6 joined
[01:27] *** benchable6 joined
[01:27] *** tellable6 joined
[01:27] *** squashable6 joined
[01:27] *** releasable6 joined
[01:27] *** linkable6 joined
[01:27] *** notable6 joined
[01:46] *** bdju left
[02:04] *** bdju joined
[02:08] *** reportable6 joined
[02:26] *** greppable6 joined
[02:26] *** committable6 joined
[02:26] *** sourceable6 joined
[02:50] *** ecocode__ left
[02:51] *** ecocode__ joined
[02:57] *** mjgardner left
[02:58] *** mjgardner joined
[03:27] *** quotable6 joined
[03:28] *** statisfiable6 joined
[03:46] *** frost joined
[04:19] *** ggoebel left
[04:26] *** evalable6 joined
[05:26] *** greppable6 left
[05:26] *** sourceable6 left
[05:26] *** statisfiable6 left
[05:26] *** coverable6 left
[05:26] *** releasable6 left
[05:26] *** shareable6 left
[05:26] *** unicodable6 left
[05:26] *** notable6 left
[05:26] *** linkable6 left
[05:26] *** committable6 left
[05:26] *** quotable6 left
[05:26] *** bisectable6 left
[05:26] *** reportable6 left
[05:26] *** benchable6 left
[05:26] *** evalable6 left
[05:26] *** tellable6 left
[05:26] *** nativecallable6 left
[05:26] *** bloatable6 left
[05:26] *** squashable6 left
[05:27] *** quotable6 joined
[05:27] *** releasable6 joined
[05:28] *** sourceable6 joined
[05:28] *** committable6 joined
[06:09] *** reportable6 joined
[06:26] *** linkable6 joined
[06:27] *** greppable6 joined
[06:27] *** benchable6 joined
[06:27] *** statisfiable6 joined
[06:28] *** tellable6 joined
[06:29] *** nativecallable6 joined
[06:29] *** shareable6 joined
[06:29] *** bisectable6 joined
[07:27] *** seednode left
[07:27] *** unicodable6 joined
[07:28] *** evalable6 joined
[07:28] *** bloatable6 joined
[07:28] *** notable6 joined
[07:28] *** seednode joined
[07:29] *** coverable6 joined
[08:27] *** squashable6 joined
[08:56] *** Sgeo_ left
[09:56] *** benchable6 left
[09:56] *** quotable6 left
[09:56] *** sourceable6 left
[09:56] *** coverable6 left
[09:56] *** linkable6 left
[09:56] *** statisfiable6 left
[09:56] *** reportable6 left
[09:56] *** bisectable6 left
[09:56] *** squashable6 left
[09:56] *** bloatable6 left
[09:56] *** unicodable6 left
[09:56] *** nativecallable6 left
[09:56] *** evalable6 left
[09:56] *** committable6 left
[09:56] *** releasable6 left
[09:56] *** notable6 left
[09:56] *** tellable6 left
[09:56] *** greppable6 left
[09:56] *** shareable6 left
[09:56] *** nativecallable6 joined
[09:56] *** unicodable6 joined
[09:56] *** statisfiable6 joined
[09:57] *** releasable6 joined
[09:57] *** squashable6 joined
[09:57] *** tellable6 joined
[09:57] *** bisectable6 joined
[09:58] *** sourceable6 joined
[09:58] *** committable6 joined
[09:59] *** shareable6 joined
[10:57] *** evalable6 joined
[10:57] *** reportable6 joined
[10:58] *** coverable6 joined
[11:10] *** lichtkind__ joined
[11:26] *** MoC joined
[11:32] *** silug left
[11:32] *** silug joined
[11:37] *** ggoebel joined
[11:46] *** Altai-man joined
[11:57] *** linkable6 joined
[11:57] *** greppable6 joined
[11:58] *** benchable6 joined
[12:03] *** MoC left
[12:07] *** reportable6 left
[12:09] *** reportable6 joined
[12:56] *** quotable6 joined
[12:57] *** notable6 joined
[12:57] *** bloatable6 joined
[13:33] *** TempIRCLogger left
[13:37] *** TempIRCLogger joined
[13:41] *** TempIRCLogger left
[13:41] *** TempIRCLogger joined
[13:45] *** TempIRCLogger left
[13:46] *** TempIRCLogger joined
[13:57] *** frost left
[14:09] *** monkey_ joined
[15:00] *** perlbot left
[15:00] *** simcop2387 left
[15:11] *** monkey_ left
[15:22] *** simcop2387 joined
[15:23] *** perlbot joined
[15:33] <tbrowder> hi, anyone know Kamil Kutaga (teodozjan on github), author of Raku module PerlStore?

[15:33] <tellable6> 2021-12-16T16:34:29Z #raku <melezhik> tbrowder I decided to keep https://mybf.io a little bit longer ( for some reasons ). No promise to keep it forever though ))) You may also merge some recent changes from my branch to yours ... thanks

[15:34] <tbrowder> .tell melezhik thanks

[15:34] <tellable6> tbrowder, I'll pass your message to melezhik

[15:35] *** Sgeo joined
[15:35] <tbrowder> PerlStore need rakuizing, and it hasn't been touched in 5 years. no email, i'll file issue.

[15:36] *** patrickb joined
[15:38] *** Zero_Dogg left
[15:46] *** squashable6 left
[16:04] *** p6steve joined
[16:09] *** vrurg_ joined
[16:12] *** vrurg left
[16:16] *** ggoebel left
[16:21] *** Zero_Dogg joined
[16:23] *** MoC joined
[16:38] *** lichtkind__ left
[16:43] *** MoC left
[16:46] *** p6steve left
[16:56] *** merryprog is now known as perryprog

[16:57] *** perryprog is now known as merryprog

[17:22] *** p6steve joined
[17:25] <tbrowder> *needs

[17:28] *** p6steve left
[18:07] *** reportable6 left
[18:07] *** HrBollermann joined
[18:08] <HrBollermann> i think i found a bug

[18:08] <lizmat> Oh dear

[18:08] <HrBollermann> my $dx=10;  dd ( [0], { [ @$_ Z+ ( $dx -= 1 ) ] } ... * )[^3]

[18:08] <evalable6> HrBollermann, rakudo-moar 5873a8c50: OUTPUT: «([0], [9], [17])␤»

[18:09] <HrBollermann> my $dx=10;  dd ( [0], { ( @$_ Z+ ( $dx -= 1 ) ) } ... * )[^3]

[18:09] <evalable6> HrBollermann, rakudo-moar 5873a8c50: OUTPUT: «([0], (8,).Seq, (16,).Seq)␤»

[18:09] <HrBollermann> See? the only difference is that the latter uses a list instead of an array, yet the values are different

[18:10] <HrBollermann> doesn't happen without the Z

[18:10] <HrBollermann> m: my $dx=10; dd ( [0], { ( $_[0] + ( $dx -= 1 ), ) } ... * )[^3]

[18:10] <camelia> rakudo-moar ca4f003bc: OUTPUT: «([0], (9,), (17,))␤»

[18:11] <HrBollermann> I got bitten by this badly today trying to solve the advent puzzle

[18:22] *** Altai-man left
[18:26] *** getimiskon joined
[18:33] *** guifa joined
[18:33] * guifa is alive

[18:36] <lizmat> guifa !!

[18:36] <guifa> I'm currently updating everything on my machine and getting ready to fix timezones for you ^_^

[18:37] <guifa> (first time in three months I'm opening up Comma =\ )

[18:48] *** squashable6 joined
[18:55] * lizmat hopes for a speedy recovery :-)

[18:58] <guifa> it's been a rough semester.  I'm never taking on that much work again

[18:58] <lizmat> and there you are starting up Comma again  :-)

[18:58] <guifa> haha programming is relaxing for m

[18:59] <guifa> and now I get to play with all the new dispatch stuff that should make so much stuff Just Work™

[19:04] <guifa> lizmat: tbh btw, I didn't realize I could *do* `class DateTime is DateTime { … }`.  That is much cleaner than mucking with MOP to keep the name stable. Still going to wrap CORE::DateTime's stuff though.  I know I also need to fix some of the timezone calculation code, there was a bug or two in there causing some big issues and I think I only pushed a quick fix that would still bomb on some dates, especially ones beyond a zone's fi

[19:04] <guifa> transition date (which may be what hit you). Basically gotta go through the C code again line by painful line

[19:05] <lizmat> meh....  but am looking forward to the result

[19:05] <lizmat> you'll have at least IRC::Log::Textual as a client  :-)

[19:06] <lizmat> (stupid Textual used to log just [HH:MM:SS] on log files divided by midnight local time)

[19:06] <lizmat> and I wants log files divided by midnight UTC

[19:10] <guifa> that kinda makes me think I should also have a way to access when the next timezone offset transition will occur.   I'd have to think how to code it though and how I'd want it accessed

[19:10] <lizmat> but why would you need that ?

[19:11] <lizmat> DateTime objects are ValueTypes... so once created, they never change ?

[19:16] <guifa> it might be in a different module entirely

[19:19] <guifa> But basically, sub when-is-next-dst(DateTime.now) would pop back 2022-03-27 at 01:00:00  for Europe timezones and 2022-03-13 at 02:00:00 for us in the states

[19:20] <lizmat> that's a nice feature to have, independent of DateTime::Timezones, is what you're saying ?

[19:23] <guifa> Yeah.  Kind of going along codesections' post, I've been (okay, had been, ignoring the past three months) a lot of thought as to just how much to cram into each module and how much to keep them separate

[19:25] <guifa> so I have User::Timezone to be one-stop shop to determine the time zone.  At the moment, timezone calculations are included inside of DateTime::Timezones, but I think I could reasonably down the road pull out all of the data/calculations into a separate module, and leave DateTime::Timezone to just handle adding the extra attributes and calling the calculation routines

[19:26] <lizmat> yeah, I was thinking along similar lines

[19:27] <guifa> doing that for CLDR made life sooo much easier

[19:28] <guifa> also, sidenote, how is the RakuAST branch?  do you think it's stable / complete enough I could start working from it to prep the formatter modules?

[19:29] <lizmat> my feeling is that it would be stable enough for that: I did the printf formatter logic already

[19:29] <lizmat> but I also think it will be well into the next year before it's merged, as jnthn will be focussing more on performance using newdisp and reviving a lot of pea work

[19:30] * guifa nods

[19:31] <guifa> I've got plenty of other stuff to work on in the meantime 

[19:32] *** abraxxa joined
[19:39] *** abraxxa left
[19:40] *** abraxxa joined
[19:57] *** hsiao joined
[19:57] <hsiao> hi

[19:58] <hsiao> I try to compile a file with rakudo --target=moar file, but it says: Cannot dump this object, no dump method

[19:59] <hsiao> rakudo --help doesn't seem to mention anything about dump methods

[19:59] *** hsiao is now known as hsiao2

[20:00] <lizmat> hsiao: 1st: what is the code you're trying to compile, and 2nd: why would you do that?  It's more  core debugging aid than anything else ?

[20:00] <tellable6> lizmat, I'll pass your message to hsiao

[20:01] <hsiao2> lizmat: the code is just `print "hello";`

[20:01] <tellable6> 2021-12-17T20:00:22Z #raku <lizmat> hsiao: 1st: what is the code you're trying to compile, and 2nd: why would you do that?  It's more  core debugging aid than anything else ?

[20:02] <hsiao2> since running with raku is so slow I was wondering if compiling could help

[20:02] <hsiao2> I takes 700ms to run the hello program on my computer

[20:02] <MasterDuke> if you do in fact need/want to do that, you have to use `--output=file.name` with the --dump command

[20:03] <MasterDuke> oop, i mean with the --target=moar option

[20:03] <lizmat> hsiao2: your program is just: print "hello"   ??

[20:04] <hsiao2> yes

[20:04] <lizmat> are you by any chance using -I ?

[20:04] <hsiao2> no

[20:04] *** hsiao2 left
[20:04] <lizmat> time raku -e 'print "hello"'

[20:05] <tonyo> <forever>

[20:05] *** hsiao2 joined
[20:05] <hsiao2> sorry I might have missed some messages

[20:05] <tonyo> hsiao2: what version of raku?

[20:05] <lizmat> for me:

[20:05] <lizmat> $ time raku -e 'print "hello"'

[20:05] <lizmat> hello

[20:05] <lizmat> real	0m0.175s

[20:05] <lizmat> user	0m0.212s

[20:05] <lizmat> sys	0m0.028s

[20:05] <hsiao2> v2021.10

[20:06] <hsiao2> time raku -e 'print "hello";'

[20:06] <hsiao2> hello

[20:06] <hsiao2> real    0m0.804s

[20:06] <hsiao2> user    0m0.834s

[20:06] <hsiao2> sys     0m0.234s

[20:06] <lizmat> what hardware are you running on ?

[20:06] <tonyo> uname ?

[20:06] <hsiao2> raspberry pi 4

[20:07] *** stoned75 joined
[20:07] <hsiao2> aarch64 linux

[20:09] <hsiao2> how do I compile again? Sorry I missed the message

[20:10] *** reportable6 joined
[20:10] <MasterDuke> the way you were trying isn't really meant for end users (though you can successfully do it if you use `--output=file.name` with the `--target=moar` option)

[20:11] <MasterDuke> to compile something you would put it in a module and then just `use` the module

[20:11] <lizmat> hsiao2: also, sadly, there's no JIT for ARM architectures, so it will probably run slower than on an Intel of comparable performance

[20:11] <hsiao2> ok, I guess raku is not for me at the moment

[20:12] <tonyo> the m1 runs raku way faster

[20:12] <tonyo> wonder if jit could get raspi runtimes significantly faster

[20:13] <hsiao2> I can do everything with rpi4, browsing just fine, perl5 hello world takes only 7ms

[20:13] <MasterDuke> it's not as big a difference as it used to be a couple years ago now that spesh does much more, which does work on all architectures

[20:14] <hsiao2> what's spesh?

[20:15] *** HrBollermann left
[20:16] <MasterDuke> the dynamic optimizer in moarvm. "spesh" is sort of a pun on "specialize", since one of the things it does it create specialized version of code seen at runtime based on the types it actually sees being used in the code

[20:17] <MasterDuke> it's similar to a jit, but doesn't actually produce native code, it just sends better optimized bytecode for the jit to then turn into native code

[20:17] <hsiao2> thank you MasterDuke. Anyway I'm going now, I'll give raku another chance christmas 2022, happy holidays

[20:18] <MasterDuke> np

[20:18] *** hsiao2 left
[20:26] *** ggoebel joined
[21:08] <tbrowder> guifa: look at my DateTime::US for some TZ stuff i did i think is pretty clever, at least for my use ;-D (couldn't have done it until lizmat showed me how to subclass a built-in class!) 

[21:26] *** linkable6 left
[21:26] *** evalable6 left
[21:27] *** linkable6 joined
[21:28] *** evalable6 joined
[22:37] *** patrickb left
[22:56] <tonyo> tbrowder: did you end up writing a fez article for me to add on the README?

[23:01] <tbrowder> well, it was the gist of my 14 dec advent article. it will need some work to turn it in to a README. maybe link to the article until i can get a round toit?

[23:02] <tonyo> no worries on converting it, i'll add the link to fez's readme

[23:02] <tonyo> about to publish `fez org`s

[23:03] <tbrowder> ok, i will try to do a proper README later...

[23:04] <tbrowder> the group membership is gonna be very useful--how goes it?

[23:04] <tonyo> need to implement allowing admins to change other's roles

[23:04] <tonyo> but invites, accepts, etc all work

[23:08] <tonyo> beta is on master in the fez repo

[23:15] *** squashable6 left
[23:18] *** tejr left
[23:19] *** tejr joined
[23:24] *** djerius left
[23:24] *** djerius joined
[23:31] <tonyo> ping lizmat 

[23:35] *** abraxxa left
[23:37] *** djerius left
[23:40] *** djerius joined
