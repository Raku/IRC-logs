[00:01] *** guifa left
[00:07] *** reportable6 left
[00:07] *** guifa joined
[00:08] *** reportable6 joined
[00:46] *** bloatable6 joined
[00:46] *** releasable6 joined
[00:47] *** bisectable6 joined
[00:47] *** coverable6 joined
[00:47] *** linkable6 joined
[00:48] *** committable6 joined
[00:48] *** shareable6 joined
[01:25] *** vrurg_ joined
[01:27] *** vrurg left
[01:33] *** lichtkind__ left
[01:42] *** swaggboi left
[01:44] *** frost joined
[01:45] *** ugexe left
[01:46] *** tellable6 joined
[02:06] *** monkey_ joined
[02:08] *** ugexe joined
[02:10] *** ugexe left
[02:11] *** ugexe joined
[02:46] *** greppable6 joined
[03:04] *** ggoebel left
[03:07] *** Xliff_ left
[03:30] *** monkey_ left
[03:47] *** statisfiable6 joined
[03:47] *** benchable6 joined
[04:47] *** evalable6 left
[04:47] *** linkable6 left
[04:58] *** Xliff_ joined
[06:04] *** releasable6 left
[06:04] *** benchable6 left
[06:04] *** greppable6 left
[06:04] *** statisfiable6 left
[06:04] *** shareable6 left
[06:04] *** bloatable6 left
[06:04] *** unicodable6 left
[06:04] *** reportable6 left
[06:04] *** notable6 left
[06:04] *** nativecallable6 left
[06:04] *** coverable6 left
[06:04] *** committable6 left
[06:04] *** sourceable6 left
[06:04] *** squashable6 left
[06:04] *** bisectable6 left
[06:04] *** quotable6 left
[06:05] *** guifa left
[06:05] *** bloatable6 joined
[06:05] *** committable6 joined
[06:05] *** benchable6 joined
[06:05] *** squashable6 joined
[06:05] *** nativecallable6 joined
[06:06] *** sourceable6 joined
[06:06] *** bisectable6 joined
[06:06] *** reportable6 joined
[06:06] *** quotable6 joined
[06:06] *** coverable6 joined
[06:07] *** shareable6 joined
[06:07] *** notable6 joined
[06:07] *** releasable6 joined
[06:44] <Geth> ¦ doc: 1e216133f1 | (Christian Bartolomäus)++ | doc/Language/nativecall.pod6

[06:44] <Geth> ¦ doc: Minor cleanup for section "Getting started"

[06:44] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1e216133f1

[06:51] <elcaro> I'm getting `No such method 'with-export' for invocant of type 'CompUnit::Handle+{<anon|1>}'` when I `use SomeModule:from<Perl5>` after `use v6.e.PREVIEW`

[06:51] <elcaro> I couldn't find an existing issue... before I bug it... can someone confirm it's not just me

[07:01] *** djerius left
[07:03] *** djerius joined
[07:05] *** statisfiable6 joined
[07:08] *** unicodable6 joined
[07:21] *** seednode left
[07:22] *** seednode joined
[07:49] *** evalable6 joined
[07:53] *** abraxxa joined
[07:56] <MasterDuke> elcaro: same here

[07:58] *** abraxxa left
[07:59] *** abraxxa joined
[08:44] *** Sgeo left
[09:06] *** greppable6 joined
[09:17] *** frost left
[09:18] *** frost joined
[09:49] <Geth> ¦ ecosystem: 83705f8b22 | (Elizabeth Mattijsen)++ | META.list

[09:49] <Geth> ¦ ecosystem: It appears that github.com/palapitta has disappeared

[09:49] <Geth> ¦ ecosystem: 

[09:49] <Geth> ¦ ecosystem: This affects the Aria, Bencode, Movieinfo and Weather distributions.

[09:49] <Geth> ¦ ecosystem: 

[09:49] <Geth> ¦ ecosystem: The latest available versions of these modules *are* available in the

[09:49] <Geth> ¦ ecosystem: Raku Ecosystem Archive at https://github.com/lizmat/REA/

[09:49] <Geth> ¦ ecosystem: 

[09:49] <Geth> ¦ ecosystem: - Aria      blob/main/archive/A/Aria/Aria:ver<0.1.4>:auth<github:palapitta>.tar.gz

[09:49] <Geth> ¦ ecosystem: - Bencode   blob/main/archive/B/Bencode/Bencode:ver<0.1.1>:auth<github:palapitta>.tar.gz

[09:49] <Geth> ¦ ecosystem: - Movieinfo blob/main/archive/M/Movieinfo/Movieinfo:ver<0.1.2>:auth<github:palapitta>.tar.gz

[09:49] <Geth> ¦ ecosystem: - Weather   blob/main/archive/W/Weather/Weather:ver<0.2.1>:auth<github:palapitta>.tar.gz

[09:49] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/83705f8b22

[09:49] *** linkable6 joined
[10:00] *** lichtkind__ joined
[10:07] <lizmat> I guess we could consider moving these modules to raku-community-modules

[10:07] <lizmat> well, re-instating would be a better word, I guess

[10:18] <frost> Just out of curiosity, in raku, the C style loop `loop (my $i = 0; $i < 10; $i++)`， why is $l outside the scope here

[10:20] <moon-child> context?

[10:20] <moon-child> what is $l?

[10:22] *** p6steve left
[10:24] *** p6steve joined
[10:37] <lizmat> frost generally people expect the counter to be available *after* a C-style loop ?

[10:38] <lizmat> otherwise you would just use for ^10 -> $i { }

[10:38] <moon-child> oh, I see.  I definitely find that behaviour surprising

[10:38] <moon-child> in c: for (int i = 0; i < 10; i++); //i is no longer in scope

[10:39] <moon-child> if you want it to remain in scope, then declare it externally, as in  int i; for (i = 0; i < 10; i++); //i remains in scope

[10:40] <moon-child> However it is somewhat consistent, given you can say e.g. '3 + (my $x = 2)' and $x will be visible outside

[10:51] *** p6steve left
[10:52] *** p6steve joined
[11:09] <frost> sorry, J=just dealt with something

[11:10] <frost> yeah, moon-child, it is different from C

[11:13] <holyghost> e.g. my $I = 0; BTW (undef)

[11:15] <holyghost> I didn't drink for 2 days, so it's going better for me (doctor's orders), I don't know if I want to take vacation

[11:15] <holyghost> Just saying for old time's sake

[11:16] *** stoned75 joined
[11:26] <frost> lizmat: I see, but for me, I am more familiar with C.

[11:27] <lizmat> well, I guess that's a behaviour inherited from Perl then

[11:27] <frost> In C, I can use the same loop statement `for (int i = 0; i < 10; i++)` many time in the same  scope

[11:28] <frost> In raku, if i use the C style loop, i have to define differet counter

[11:28] <lizmat> in Raku, idiomatically you'd use:   for ^10 -> int \i { }

[11:28] <frost> yeah, it's so nice

[11:28] <frost> i ask this just for curiosity

[11:29] <frost> lizmat thanks

[11:29] *** p6steve left
[11:29] <moon-child> I don't really know perl, but in a basic test it does not seem to behave that way eitehr

[11:29] <moon-child> either

[11:29] <lizmat> frost: sure, but the "bleeding into outer scope" is the reason we have a "loop" in Raku, afaik

[11:30] <lizmat> well, then I'd say @LARRY changed their mind on that  :-)

[11:30] <frost> wow

[11:30] <frost> interesting ;)

[11:30] <lizmat> but really, the C-style loop exists in Raku *because* of the bleeding of the counter

[11:31] <lizmat> I can't really see another really valid reason for it

[11:34] *** Altai-man joined
[11:36] *** Xliff_ left
[11:38] *** p6steve joined
[11:42] <stoned75> hi

[11:44] <frost> stoned75 hello

[11:47] <stoned75> I was looking after documenting IO::Path.add(@list), cf. https://github.com/rakudo/rakudo/pull/4472, then I was wondering about what is planned for IO::Path.child(), which right now is documented as "alias for .add", when it is not anymore ':)

[11:47] <stoned75> and considering https://github.com/rakudo/rakudo/commit/8b94d8d27985c604c87c9730735c14ca565646e7

[11:47] <Voldenet> compare HEAD my $n = 0; for ^10 -> \i { $n += i }; ||| my $n = 0; for ^10 -> $i { $n += $i }

[11:48] <lizmat> stoned75: I'm not touching that anymore

[11:48] <Voldenet> benchable6: compare HEAD my $n = 0; for ^10 -> \i { $n += i }; ||| my $n = 0; for ^10 -> $i { $n += $i }

[11:48] <benchable6> Voldenet, starting to benchmark the 1 given commit

[11:48] <stoned75> arf ':)

[11:48] <benchable6> Voldenet, https://gist.github.com/4a59f84f2d529c858e46c29c5ac64547

[11:50] <Voldenet> \i seems significantly slower than $i in this context

[12:04] *** squashable6 left
[12:06] *** squashable6 joined
[12:06] <holyghost> for (my $i = 0; $i < 1024; $i++) {}

[12:07] <lizmat> Voldenet: that's because the standard way of `for Range` is highly statically optimised

[12:08] *** reportable6 left
[12:09] <Voldenet> Oh, so it isn't the case for every iterable

[12:10] *** reportable6 joined
[12:19] <holyghost> scsi, loop (my $i = 0; $i < 1024; $i ++) {}

[12:38] *** ggoebel joined
[13:20] *** monkey_ joined
[13:24] *** monkey_ left
[13:25] *** getimiskon joined
[13:27] *** monkey_ joined
[13:31] *** [Coke] left
[13:34] *** [Coke] joined
[13:35] *** getimiskon left
[13:55] *** getimiskon joined
[13:59] *** guifa joined
[14:10] *** lichtkind__ left
[14:11] *** frost left
[14:23] *** Guest26 joined
[14:23] *** Guest26 left
[14:37] *** monkey_ left
[14:46] *** jgaz joined
[14:47] *** ggoebel left
[14:57] *** getimiskon left
[15:06] *** euandreh left
[15:17] *** getimiskon joined
[15:27] *** Sgeo joined
[15:32] *** monkey_ joined
[15:48] *** monkey_ left
[15:50] *** monkey_ joined
[16:01] *** monkey_ left
[16:07] *** euandreh joined
[16:15] *** ggoebel joined
[16:21] *** jgaz left
[17:10] <thowe> Hi Raku folks.  How are you today?

[17:11] <tonyo> lizmat: did you checkout the fez orgs stuff?

[17:12] <lizmat> tonyo: didn't get around to it yet... almost ready with the Weekly, then one more advent post to finish before tomorrow...

[17:13] <lizmat> too many things to do, not enough time :-(

[17:21] *** evalable6 left
[17:21] *** linkable6 left
[17:24] <thowe> I love the advent calendar; I appreciate what goes into it.

[17:30] *** dg left
[17:31] <guifa> lizmat: I'm almost done recoding timezones.  Pulled out the data/calculations, but still finishing up the last bit of C code conversion

[17:31] <guifa> they made a lot of changes since i last ported it

[17:36] *** jgaz joined
[18:07] *** reportable6 left
[18:09] *** reportable6 joined
[18:15] *** Altai-man left
[18:21] *** linkable6 joined
[18:30] *** djerius left
[18:31] <tonyo> .notable https://deathbykeystroke.com/articles/20211220-fez-orgs-a-winter-solstice-miracle.html

[18:31] *** djerius joined
[18:31] <lizmat> tonyo: talk about JIT publishing  :-()

[18:31] <tonyo> weekly: https://deathbykeystroke.com/articles/20211220-fez-orgs-a-winter-solstice-miracle.html

[18:31] <notable6> tonyo, Noted! (weekly)

[18:31] <lizmat> :-)) rather

[18:31] <lizmat> notable6: weekly reset

[18:31] <notable6> lizmat, Moved existing notes to “weekly_2021-12-20T18:31:56Z”

[18:31] <tonyo> haha

[18:32] <tonyo> hard to keep track of the bots

[18:32] <tonyo> JJ asked me to do a `how to get started with fez` for the advent

[18:33] <lizmat> so, do you want me to import that into the Advent Calendar?

[18:33] <tonyo> i think tomorrow i'll write up a quick tut, may have to download mi6 and figure that out

[18:33] <lizmat> ok, gotcha

[18:33] <tonyo> the org one? nah, i'll just link it from the one i'm going to write tonight or tomorrow

[18:33] <lizmat> ok

[18:35] <[Coke]> raku -MFile::Temp -e1; # is there a way to do this that doesn't complain about sink?

[18:36] <lizmat> -e''

[18:36] <[Coke]> -e'' gives help usage.

[18:36] <[Coke]> -eNil works.

[18:37] <lizmat> -e ''

[18:37] <lizmat> note the whitespace

[18:37] <[Coke]> lizmat++

[18:38] * [Coke] uses File::Temp for something, duff++

[18:42] <guifa> I find it so weird that it's quite difficult to make natives constants

[18:43] *** mcmillhj joined
[18:43] <lizmat> guifa: I don't think you can atm

[18:43] <lizmat> the problem is that a native is a piece of memory that is not an object by itself

[18:43] <guifa> lizmat: my work around is to put them into a module called "Constants"

[18:43] <guifa> and then

[18:44] <lizmat> and pre-compilation needs objects, and constant are compile time construcrts

[18:44] <guifa> sub EXPORT { my int $FOO = 0; Map: :$FOO }

[18:44] <lizmat> that would not make $FOO a constant: assigning to it would work

[18:44] <guifa> Right

[18:45] <guifa> It's not a true constant

[18:45] <lizmat> why do you need it to be a native ?

[18:45] <guifa> but where I 'use Constants'; the term "FOO" would appear, sans sigils

[18:45] <guifa> lizmat: porting C code that is designed with wrapping in mind. 

[18:47] <mcmillhj> Can someone explain the semantics of what is happening with `$depth` here? I kind of expected the _value_ of `$depth` to be copied into my array, not a reference.

[18:47] <mcmillhj> https://topaz.github.io/paste/#XQAAAQCjAQAAAAAAAAA2nkADArW+r3sfODmUvOztfOwXhQLylWzy+voFdzRPf3T8u2dynKyfu+ju+kSd7+TU1mNbt54nhgv59xW0p09mdN175mHU5ggz+mlGM1LVAt/TnMP9ptZeKDnOlpU5mMt4zDG8dOs1Qh7NqxvGnLnL3USnhj/jkRsNpLUrfb4lPL0obwvlqoTJoaA7iYsSx+TIt9aUC25N2VZZ6sVkzQi+9c5DEhe3wvbOyVWCySXFm0ElqSVSebbtNxGRZ3GeZGCF/Zr90DZH6ztgW8ABO6Gi/9g76wiiktr6HGP8BnUA

[18:47] <guifa> as much as I'd love to rewrite the code to be super Raku-ish, I had to rewrite stuff from scratch (in a very C-accented Raku) because it's nigh impossible to track the changes in the C code in my Rakuish version =\

[18:49] <guifa> mcmillhj: I believe it's because you've used push: (List)

[18:49] <guifa>     @snailfish.append: $c.Int, $depth;

[18:49] <guifa> that gives me [4, 4, 3, 4, 4, 3, 4, 2, 7, 2, 8, 4, 4, 4, 9, 3, 1, 2, 1, 2] as a result

[18:50] <mcmillhj> I actually want it to be a subarray, `push: [$c.Int, $depth]` appears to work. That is just confusing to me for some reason.

[18:52] <guifa> ah, you want to keep them in the subaray.  push: (+$c, +$depth) seems to work.

[18:53] <guifa> but the list doesn't copy values or anything

[18:53] <guifa> m: my $a = 0; my @b is List = $a, $a, $a; $a++; say @b;

[18:53] <camelia> rakudo-moar b5fb3628b: OUTPUT: «(1 1 1)␤»

[18:53] <guifa> m: my $a = 0; my @b is Array = $a, $a, $a; $a++; say @b;

[18:53] <camelia> rakudo-moar b5fb3628b: OUTPUT: «[0 0 0]␤»

[18:57] *** vodkra left
[18:58] *** vodkra joined
[18:58] <mcmillhj> thanks guifa

[18:59] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/12/20/2021-51-transiting/

[18:59] <guifa> lizmat++

[19:00] *** vodkra left
[19:00] *** vodkra joined
[19:11] <thowe> In the code at https://gist.github.com/bduggan/a929bd7a063a74f896507955dcb7b316 on lines 9 and 10, what does the *.f and *.d mean?  Are those globs of file names (seems not) or do those have special meaning to multi or IO::Path ?

[19:15] <thowe> or am I trying to bite off too much at once?  there's a lot going on there I don't quite get.

[19:19] <guifa> thowe: the * is a Whatever 

[19:19] <guifa> in this case, it refers to $f

[19:20] *** atroxaper joined
[19:20] <thowe> OK, but what is it doing?  how do *.f and *.d differ?  What are those?  How does it know which version of the function to run?

[19:20] <guifa> files(IO::Path $f where *.d) === subroutine "files" with a first argument of type IO::Path named $f, where it (* or $f) is a directory (.d) 

[19:21] <atroxaper> Hello, #raku

[19:21] <guifa> $file.d = is $file a directory?   $file.f = is $file a file ?

[19:22] * holyghost takes a few days of vacation

[19:23] <guifa> m: multi sub size (Int $a where $a < 10) { say "small" }; multi sub size (Int $a where * ≥ 10) { say "big" }; size 5; size 15; size 1;

[19:23] <camelia> rakudo-moar b5fb3628b: OUTPUT: «small␤big␤small␤»

[19:23] <guifa> that might make it a bit clearer what's going on

[19:32] *** tejr left
[19:33] *** tejr joined
[19:35] <thowe> OK, so those are something specific to IO::Path then?  Just trying to figure out where to look at docs to understand them.

[19:37] <thowe> Ah I see, method f and method d...

[19:39] <thowe> wild

[19:44] <guifa> yup, exactly.  You wouldn't be able to use .d/.f on most other things

[19:50] <holyghost> Here's the best I wrote in 5 years chosen by my admin, I put it online here : http://sf.net/projects/bubblesrc. The user login features later projects

[19:50] <holyghost> 5 years, 5 years ago :-)

[19:50] <holyghost> We posted links back in the day at WF, so there you go

[19:52] *** daxim left
[20:01] *** seednode left
[20:01] *** seednode joined
[20:05] *** daxim joined
[20:08] <thowe> guifa++

[20:20] *** patrickb joined
[20:20] *** atroxaper left
[20:21] *** evalable6 joined
[20:33] *** japhb left
[20:44] *** Guest70 joined
[20:45] *** Guest70 left
[20:45] *** Guest70 joined
[20:45] *** Guest70 left
[20:46] *** daxim left
[20:54] *** eseyman left
[20:59] *** eseyman joined
[21:09] *** MasterDuke left
[21:10] *** daxim joined
[21:16] *** daxim left
[21:16] *** abraxxa left
[21:21] *** MasterDuke joined
[21:21] *** jgaz left
[21:21] *** Zero_Dogg left
[21:22] <lizmat> tonyo: so "fez org list" shows up empty, which means I would have to create an org from scratch, right ?

[21:30] <tonyo> yea lizmat 

[21:31] <lizmat> any limitations as to the org name ?

[21:32] <tonyo> as long as there is no user or group with that name existing

[21:34] <lizmat> ok

[21:38] <lizmat> tonyo should I get a mail after creating an org?

[21:38] <tonyo> nope, just on invites

[21:39] *** mcmillhj left
[21:39] <lizmat> and I guess the auth of a module should then be zef:org-name right ?

[21:39] <tonyo> yea

[21:40] <lizmat> ok, lemme take one then as a test case  :-)

[21:40] *** daxim joined
[21:46] *** dg joined
[21:49] <tonyo> which one you uploading?

[21:49] <lizmat> well, I am looking at Die

[21:49] <lizmat> simple, straightforward :-)

[22:04] *** Zero_Dogg joined
[22:06] <lizmat> tonyo: hmmm.. it appears that mi6 will need some tweaking before this gets straigtforward

[22:14] <lizmat> yeah, will need some work on App::Mi6

[22:15] <lizmat> auth 'zef:raku-community-modules' in META6.json does not match auth 'zef:lizmat' in ~/.fez-config.json  

[22:26] *** guifa left
[22:46] *** patrickb left
[22:53] <lizmat> tonyo: Die:auth<zef:community-modules> should now be a thing

[22:54] <lizmat> tonyo: Die:auth<zef:raku-community-modules> 

[22:54] <lizmat> rather

[22:54] <Xliff> I'm trying to put a custom trait on a class definition. Which trait mod can I use for that?

[22:54] <Xliff> trait_mod:<is> will not work for classes, since it is used for inheritance.

[22:54] <lizmat> sub trait_mod:<is> probably?

[22:55] <lizmat> make sure the name of the trait is a *required* named argument

[22:55] <lizmat> sub trait_mod:<is>(Any:U $class, :$foo!) { dd }; class A is foo { }

[22:55] <lizmat> m: sub trait_mod:<is>(Any:U $class, :$foo!) { dd }; class A is foo { }

[22:55] <camelia> rakudo-moar b5fb3628b: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Type check failed in binding to parameter '$class'; expected Any but got A (A)␤at <tmp>:1␤»

[22:56] <lizmat> m: sub trait_mod:<is>(Mu:U $class, :$foo!) { dd }; class A is foo { }

[22:56] <camelia> rakudo-moar b5fb3628b: OUTPUT: «sub trait_mod:<is>(Mu:U $class, :$foo!)␤»

[22:56] <lizmat> Xliff ^

[22:57] <Xliff> Ooh! Let me try.

[23:00] <Xliff> And I take it roles cannot be punned on to type objects?

[23:00] <gfldex> m: multi sub trait_mod:<is>(Mu:U $c, :$foo) { say $c.^mro; }; class C is Any is foo<42> { }

[23:00] <camelia> rakudo-moar b5fb3628b: OUTPUT: «((C) (Any) (Mu))␤»

[23:01] <gfldex> Looky like you need to add Any by hand in this case.

[23:10] *** getimiskon left
[23:11] *** daxim left
[23:12] *** daxim joined
[23:33] <Xliff> Hum...

[23:33] <Xliff> m: use NativeCall; class A is repr<CStruct> { has uint32 $.a }; A.REPR.say

[23:33] <camelia> rakudo-moar b5fb3628b: OUTPUT: «CStruct␤»

[23:33] <Xliff> m: use NativeCall; class A is repr<CStruct> { has uint32 $.a }; A.REPR.say; ::("A").REPR.say

[23:33] <camelia> rakudo-moar b5fb3628b: OUTPUT: «CStruct␤CStruct␤»

[23:36] <tonyo> lizmat: looks good

[23:36] <tonyo> the first RCM module in fez

[23:37] <Xliff> Hum.

[23:37] <Xliff> I think we haz problem.

[23:37] <Xliff> If i use a module with a struct, I get the right .REPR value

[23:37] <Xliff> However if I late-load AND late-bind, said .REPR is now P6opaque

[23:38] <Xliff> ./p6gtkexec -e 'require ::("GDA::Raw::Structs"); ::("GdaTimestamp").REPR.say' # P6opaque

[23:38] *** djerius left
[23:38] <Xliff> ./p6gtkexec -e 'use GDA::Raw::Structs; GdaTimestamp.REPR.say' # CStruct

[23:38] <lizmat> Xliff: is repr() needs to be done on the very first mention of a class, even if it is a stub

[23:39] <lizmat> that's a known issue afaik

[23:39] <Xliff> lizmat: This did not happen prior to new-disp.

[23:39] <Xliff> Even late bound references returned the right REPR

[23:39] *** djerius joined
[23:39] <Xliff> And this is not about "is repr" on first mention. I know this.

[23:39] <lizmat> hmmm... well, then please make an issue and make sure jnthn is pinged on it

[23:40] <Xliff> This is about retrieving the REPR at run-time

[23:40] <Xliff> lizmat: OK. Will do.

[23:42] <Geth> ¦ ecosystem: fe27c24133 | (Elizabeth Mattijsen)++ | META.list

[23:42] <Geth> ¦ ecosystem: Die now lives in the zef ecosystem

[23:42] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/fe27c24133

[23:48] *** xinming left
