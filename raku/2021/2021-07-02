[00:03] *** reportable6 left
[00:03] *** reportable6 joined
[00:11] *** frost joined
[00:36] *** xinming_ left
[00:38] *** xinming_ joined
[00:49] *** Doc_Holliwood left
[01:01] *** curioususer joined
[01:02] *** curioususer left
[01:10] *** xinming_ left
[01:12] *** xinming_ joined
[02:00] *** _ed joined
[02:05] *** _ed left
[02:13] *** _ed joined
[02:15] *** frost left
[02:16] *** MasterDuke left
[02:21] *** _ed left
[02:22] *** _ed joined
[02:26] <japhb> Is there a module already for an ordered hash (in the sense that iterating over it will return keys/values/pairs in exactly the order they were inserted)?  I see lizmat has Map::Ordered but not Hash::Ordered, FCO has an OrderedHash but it seems to care about either sorting or specifying the order of keys (rather than depending on insertion order), and there appear to be lots of modules in the Hash::* 
[02:26] <japhb> namespace, but none look like a match for what I'm looking for.
[02:28] <japhb> (Unless of course I just missed it.)
[02:30] *** _ed left
[02:33] *** xinming_ left
[02:34] *** xinming_ joined
[02:41] *** _ed joined
[02:42] *** rassoc left
[02:51] *** _ed left
[03:06] *** _ed joined
[03:10] *** tyil[m] left
[03:10] *** littlebenlittle[ left
[03:10] *** juanfra left
[03:10] *** AlexDaniel left
[03:11] *** CIAvash left
[03:11] *** demostanis[m] left
[03:11] *** cnx left
[03:11] *** juanfra joined
[03:13] *** _ed left
[03:14] *** _ed joined
[03:15] *** AlexDaniel joined
[03:15] *** demostanis[m] joined
[03:15] *** cnx joined
[03:15] *** tyil[m] joined
[03:15] *** littlebenlittle[ joined
[03:15] *** CIAvash joined
[03:18] *** _ed left
[03:33] *** demostanis[m] left
[03:33] *** juanfra left
[03:34] *** stoned75 left
[03:35] *** AlexDaniel left
[03:36] *** stoned75 joined
[03:39] *** cnx left
[03:40] *** tyil[m] left
[03:40] *** littlebenlittle[ left
[03:40] *** CIAvash left
[04:01] *** _ed joined
[04:01] *** neshpion left
[04:06] *** _ed left
[04:21] *** RandalSchwartz left
[04:22] *** Doc_Holliwood joined
[05:22] *** coverable6 left
[05:22] *** greppable6 left
[05:22] *** notable6 left
[05:22] *** statisfiable6 left
[05:22] *** benchable6 left
[05:22] *** shareable6 left
[05:22] *** bisectable6 left
[05:22] *** unicodable6 left
[05:22] *** quotable6 left
[05:22] *** committable6 left
[05:22] *** bloatable6 left
[05:22] *** linkable6 left
[05:22] *** releasable6 left
[05:22] *** reportable6 left
[05:22] *** evalable6 left
[05:22] *** nativecallable6 left
[05:22] *** sourceable6 left
[05:22] *** tellable6 left
[05:22] *** squashable6 left
[05:22] *** sourceable6 joined
[05:22] *** releasable6 joined
[05:22] *** notable6 joined
[05:22] *** benchable6 joined
[05:22] *** quotable6 joined
[05:22] *** squashable6 joined
[05:22] *** linkable6 joined
[05:22] *** committable6 joined
[05:23] *** unicodable6 joined
[05:23] *** reportable6 joined
[05:23] *** coverable6 joined
[05:24] *** tellable6 joined
[05:24] *** statisfiable6 joined
[05:24] *** bloatable6 joined
[05:24] *** nativecallable6 joined
[05:25] *** evalable6 joined
[05:25] *** shareable6 joined
[05:25] *** greppable6 joined
[05:25] *** bisectable6 joined
[05:26] *** squashable6 left
[05:28] *** squashable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:18] *** notna joined
[06:35] *** Sgeo left
[06:51] *** ufobat joined
[07:05] *** patrickb joined
[07:25] *** juanfra joined
[07:28] *** demostanis[m] joined
[07:28] *** AlexDaniel joined
[07:28] *** cnx joined
[07:28] *** littlebenlittle[ joined
[07:28] *** tyil[m] joined
[07:28] *** CIAvash joined
[07:45] *** juanfra left
[07:46] *** demostanis[m] left
[07:49] *** AlexDaniel left
[07:58] *** tyil[m] left
[07:58] *** cnx left
[07:59] *** littlebenlittle[ left
[07:59] *** CIAvash left
[07:59] *** juanfra joined
[08:03] *** demostanis[m] joined
[08:03] *** AlexDaniel joined
[08:03] *** cnx joined
[08:03] *** littlebenlittle[ joined
[08:03] *** tyil[m] joined
[08:03] *** CIAvash joined
[08:20] *** juanfra left
[08:20] *** demostanis[m] left
[08:23] *** AlexDaniel left
[08:32] *** tyil[m] left
[08:32] *** cnx left
[08:32] *** littlebenlittle[ left
[08:32] *** CIAvash left
[08:33] *** juanfra joined
[08:36] *** demostanis[m] joined
[08:36] *** AlexDaniel joined
[08:36] *** cnx joined
[08:36] *** littlebenlittle[ joined
[08:36] *** tyil[m] joined
[08:36] *** CIAvash joined
[08:40] *** littlebenlittle[ left
[08:40] *** CIAvash left
[08:40] *** demostanis[m] left
[08:40] *** tyil[m] left
[08:40] *** cnx left
[08:40] *** AlexDaniel left
[08:40] *** juanfra left
[08:59] *** MoC joined
[09:00] *** frost joined
[09:02] *** _ed joined
[09:05] *** juanfra joined
[09:07] *** _ed left
[09:09] *** demostanis[m] joined
[09:09] *** AlexDaniel joined
[09:09] *** cnx joined
[09:09] *** tyil[m] joined
[09:09] *** littlebenlittle[ joined
[09:09] *** CIAvash joined
[09:59] <patrickb> polettix_: Did you notice https://www.reddit.com/r/rakulang/comments/o841lu/default_member_values_flavio_poletti/h3jk1ug/?context=3 
[09:59] <tellable6> hey patrickb, you have a message: https://gist.github.com/8503b4fd5eae8e2cd0127226d550c237
[10:00] <CIAvash> m: say .chars == .comb.unique given 'abcd'
[10:00] <camelia> rakudo-moar afab892db: OUTPUT: «True␤»
[10:01] <patrickb> polettix_: I fear I have tried leaving that comment in *three* different ways, only to not be seen and you finding out about object construction separately. Grrr. I'm grumpy on Disqus now.
[10:09] *** linkable6 left
[10:09] *** evalable6 left
[10:11] *** evalable6 joined
[10:11] *** linkable6 joined
[10:22] *** Kaiepi left
[10:23] *** Kaiepi joined
[10:30] *** Doc_Holliwood left
[10:38] *** rassoc joined
[10:42] *** discord-raku-bot left
[10:56] *** discord-raku-bot joined
[10:58] *** sono left
[11:14] *** neula joined
[11:33] *** _ed joined
[11:37] *** _ed left
[11:44] <SmokeMachine> sorry, yesterday I said `Model.WHAT` meaning `Model.HOW`
[11:50] <rassoc> m: "a1b2\nc3\nd4e5".lines.comb(/\d/)
[11:50] <camelia> rakudo-moar 917d674bc: ( no output )
[11:51] <rassoc> m: "a1b2\nc3\nd4e5".lines.comb(/\d/).say
[11:51] <camelia> rakudo-moar 917d674bc: OUTPUT: «(1 2 3 4 5)␤»
[11:51] <rassoc> oh, interesting comb behaviour; never knew that
[11:52] <lizmat> you're combing for numeric characters... or is that not what you meant ?
[11:52] <rassoc> that it considers multiple elements, separate lines in this case. usually incorporated a map of some kind while processing lines
[11:54] <SmokeMachine> m: say <a1 b2 c3>.comb: /\d+/
[11:54] <camelia> rakudo-moar 917d674bc: OUTPUT: «(1 2 3)␤»
[11:54] <SmokeMachine> m: say <0a1 b2 3c4>.comb: /\d+/
[11:54] <camelia> rakudo-moar 917d674bc: OUTPUT: «(0 1 2 3 4)␤»
[12:01] <gfldex> m: "a1b2\nc3\nd4e5".lines».comb(/\d/)
[12:01] <camelia> rakudo-moar 917d674bc: ( no output )
[12:01] <gfldex> m: "a1b2\nc3\nd4e5".lines».comb(/\d/).say
[12:01] <camelia> rakudo-moar 917d674bc: OUTPUT: «((1 2) (3) (4 5))␤»
[12:01] <gfldex> rassoc: .comb coerces to Str
[12:02] <lizmat> rassoc: what gfldex says, so you would get the same result without the .lines
[12:02] *** reportable6 left
[12:02] <lizmat> m: "a1b2\nc3\nd4e5".comb(/\d/)
[12:02] <camelia> rakudo-moar 917d674bc: ( no output )
[12:03] *** reportable6 joined
[12:03] <lizmat> m: "a1b2\nc3\nd4e5".comb(/\d/).say
[12:03] <camelia> rakudo-moar 917d674bc: OUTPUT: «(1 2 3 4 5)␤»
[12:03] <lizmat> m: "a1b2\nc3\nd4e5".lines>>.comb(/\d/).say
[12:03] <camelia> rakudo-moar 917d674bc: OUTPUT: «((1 2) (3) (4 5))␤»
[12:11] <rassoc> i do realize that now, but it never occurred to me before that i could utilize it in such a way
[12:31] <rassoc> gfldex: recently, i ran into a situation where i deadlocked the scheduler by .receiving on various interdependent channels. stumbled upon one of your blog posts on await and it really saved me. the docs mention that it utilizes .receive internally, but the impl is actually using .polling and supplies. so, thanks a bunch for your frequent blogging!
[13:03] *** linkable6 left
[13:03] *** evalable6 left
[13:03] *** Doc_Holliwood joined
[13:05] *** perlbot left
[13:05] *** perlbot joined
[13:06] *** linkable6 joined
[13:06] *** evalable6 joined
[13:07] *** RandalSchwartz joined
[13:09] *** abraxxa left
[13:19] *** frost left
[13:27] <cnx> <CIAvash "m: say .chars == .comb.unique gi"> I'm aware of this, but I'm still curious of a regex solution (apologies to IRC people for the quote)
[13:37] *** Doc_Holliwood left
[13:44] <rassoc> regex solution for what? verifying that a str has no repeated chars?
[13:44] <rassoc> m: say "abc" !~~ /(.).*$0/
[13:44] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «True␤»
[13:44] <rassoc> m: say "abca" !~~ /(.).*$0/
[13:44] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «False␤»
[13:45] *** Sgeo joined
[13:49] <cnx> is it possible for a possive match?
[13:50] <cnx> e.g. of only 4 to 20 unique alphanumerics
[14:10] <rassoc> cnx: in a single regex? not quite sure what you are trying to do. is this what you are after?
[14:10] <rassoc> m: my &small-uniq = { !/(.) .* $0/ ?& /<alpha> ** 4..20/ }; "abc".&small-uniq.say; "abcd".&small-uniq.say; "abcdd".&small-uniq.say;
[14:10] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «False␤True␤False␤»
[14:16] <cnx> yes, in a single regex, I'm just wondering if it's possible to forbid duplication using capture groups
[14:16] *** Eddward joined
[14:16] <Eddward> m: say "test"
[14:16] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «test␤»
[14:16] <Eddward> m: my $y = -> $n { say "hi $n" } ; $y(3)
[14:16] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «hi 3␤»
[14:17] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «hi 3␤»
[14:17] <Eddward> m: my $y = -> $n { say "hi $n" } ; for 1..5 $y
[14:17] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3my $y = -> $n { say "hi $n" } ; for 1..57⏏5 $y␤    expecting any of:␤        block or pointy block␤        infix␤        infix stopper␤»
[14:18] <Eddward> m: my $y = -> $n { say "hi $n" } ; $y.perl
[14:18] <camelia> rakudo-moar 7cf3927d3: ( no output )
[14:18] <Eddward> m: my $y = -> $n { say "hi $n" } ; $y.raku
[14:18] <camelia> rakudo-moar 7cf3927d3: ( no output )
[14:19] <Eddward> m: my $y = -> $n { say "hi $n" } ; say $y.perl
[14:19] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «-> $n { #`(Block|91879296) ... }␤»
[14:24] *** melezhik joined
[14:24] <melezhik> .
[14:25] <melezhik> .
[14:34] <Eddward> sub x($n) { say "hi $n" } ; for 1..5 &x
[14:35] <Eddward> sub x($n) { say "hi $n" } ; &x.perl.say
[14:35] <evalable6> Eddward, rakudo-moar 7cf3927d3: OUTPUT: «sub x ($n) { #`(Sub|94922466683104) ... }␤»
[14:35] <Eddward> my $x = ->($n) { say "hi $n" } ; $x.perl.say
[14:35] <evalable6> Eddward, rakudo-moar 7cf3927d3: OUTPUT: «-> $ ($n) { #`(Block|94632884115120) ... }␤»
[14:36] <Eddward> my $x = -> $n { say "hi $n" } ; $x.perl.say
[14:36] <evalable6> Eddward, rakudo-moar 7cf3927d3: OUTPUT: «-> $n { #`(Block|93854853147912) ... }␤»
[14:37] <Eddward> my $x = -> $n { say "hi $n" } ; for 1..5 { $x($_) }
[14:37] <evalable6> Eddward, rakudo-moar 7cf3927d3: OUTPUT: «hi 1␤hi 2␤hi 3␤hi 4␤hi 5␤»
[14:38] <Eddward> my $x = -> $n { say "hi $n" } ; for 1..5 $x
[14:38] <Eddward> m: my $x = -> $n { say "hi $n" } ; for 1..5 $x
[14:38] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3my $x = -> $n { say "hi $n" } ; for 1..57⏏5 $x␤    expecting any of:␤        block or pointy block␤        infix␤        infix stopper␤»
[14:39] <Eddward> ¯\_(ツ)_/¯
[14:45] <rassoc> m: my &x = -> $n { say "hi $n" }; .&x for 1..5 # Eddward
[14:45] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «hi 1␤hi 2␤hi 3␤hi 4␤hi 5␤»
[14:47] <Eddward> rassoc:  Thanks.  I was inspired by an article that I didn't think did what it thought it did.
[14:48] <Eddward> https://jcoterhals.medium.com/what-not-to-do-how-to-mess-up-for-loops-in-raku-rakulang-e594121ab30c
[14:49] <Eddward> I thought `A($_) for ^3` was the same as `for ^3 { A($_) }`
[14:50] <lizmat> Eddward: it has the same effect, but the for ^3 {   }  case has an extra level of indirection
[14:51] <Eddward> right
[15:18] *** notna left
[15:57] <m6locks> can has more exercises in https://exercism.io/my/tracks/raku ?
[16:18] *** linkable6 left
[16:18] *** evalable6 joined
[16:18] *** evalable6 left
[16:19] *** evalable6 joined
[16:19] <rassoc> m6locks: you can try https://theweeklychallenge.org/challenges/ or https://adventofcode.com/ while waiting for some more content on exercism
[16:19] *** linkable6 joined
[16:20] <rassoc> latter has a collection of solutions for comparison here: https://github.com/codesections/advent-of-raku-2020
[16:30] *** MoC left
[16:30] *** RandalSchwartz left
[16:34] *** RandalSchwartz joined
[16:50] *** stoned75 left
[16:50] <perlmaros> hi, i'm running a raku application in a systemd unit and no ~/.raku/precomp files are being written. whenever i start it manually/directly via shell they are created. any suggestions what might be needed to coerce rakudo into creating these files?
[16:51] *** stoned75 joined
[16:52] <perlmaros> strace shows that it looks for these files, but it does not try to create them
[17:18] *** ufobat left
[17:37] <moritz> permission problems, maybe?
[17:37] <moritz> systemd unit files have an option to disable access to home directories, IIRC
[17:38] <ugexe> note just because it looks and doesn't find them there doesn't mean it didnt find them somewhere else
[17:39] <ugexe> m: say $*REPO.repo-chain.map(*.?prefix).grep(*.so).map(*.absolute)
[17:39] <camelia> rakudo-moar 7cf3927d3: OUTPUT: «(/home/camelia/.raku /home/camelia/rakudo-m-inst-1/share/perl6/site /home/camelia/rakudo-m-inst-1/share/perl6/vendor /home/camelia/rakudo-m-inst-1/share/perl6/core)␤»
[17:40] <ugexe> run your script with `RAKUDO_MODULE_DEBUG=1` and you'll get some more details
[18:02] *** reportable6 left
[18:04] *** melezhik left
[18:05] *** reportable6 joined
[18:32] *** RandalSchwartz left
[18:57] *** neula left
[19:01] *** sono joined
[19:12] *** jess left
[19:20] <perlmaros> not sure if i can get anything helpful from RAKUDO_MODULE_DEBUG=1 ... it just prints where it tries to load the precomp files from, but it doesn't say anything about where/when/if it tries to write them
[19:25] <lizmat> it should say something like "Precompiled /foo/bar into /foo/baz"
[19:25] <lizmat> and "Writing dependencies and byte code to foo for source checksum: 765372657362
[19:59] <raydiak> permissions and env vars are common stumbling blocks I've read about wrt systemd units. https://unix.stackexchange.com/a/339645 gives a good list of various differences between running from a shell and running from systemd. also if you're running selinux/apparmor, make sure that's not causing an issue
[20:00] *** Doc_Holliwood joined
[20:24] *** jess joined
[20:24] *** [Coke] left
[20:24] *** [Coke] joined
[21:03] *** clarjon1 left
[21:04] *** clarjon1 joined
[21:05] *** tejr left
[21:06] *** tejr joined
[21:06] *** clarjon1 left
[21:06] *** clarjon1 joined
[21:23] *** xinming_ left
[21:32] *** jess left
[21:39] *** patrickb left
[21:41] *** zostay left
[21:42] *** kawaii_ left
[21:42] *** pjlsergeant left
[21:52] *** kawaii_ joined
[21:52] *** pjlsergeant joined
[21:53] *** zostay joined
[21:56] <Geth> ¦ problem-solving/clarify-readme: e43a7a59a4 | (Daniel Sockwell)++ (committed using GitHub Web editor) | README.md
[21:56] <Geth> ¦ problem-solving/clarify-readme: clarify PS process in README 
[21:56] <Geth> ¦ problem-solving/clarify-readme: 
[21:56] <Geth> ¦ problem-solving/clarify-readme: This is an attempted solution to #272 as described in that issue.  In particular, it is intended to clarify the existing process without adding any substantive changes.
[21:56] <Geth> ¦ problem-solving/clarify-readme: review: https://github.com/Raku/problem-solving/commit/e43a7a59a4
[21:57] <Geth> ¦ problem-solving: codesections++ created pull request #289: Clarify Problem Solving process description in README
[21:57] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/pull/289
[22:41] *** Raycat|Home joined
[22:42] <Raycat|Home> Howdy. Two questions: How do I create a subset of a fixed array containing a particular class? I wanna do `subset Board of Array[Square] where .elems > 9;` but this doesn't work.
[22:43] <Raycat|Home> Hmm. I've forgotten the second question. So, just the one then.
[22:45] *** xinming joined
[22:55] *** Eddward left
[22:55] *** Eddward joined
[23:16] *** logix34 joined
[23:16] *** logix34 is now known as javor
[23:19] *** guifa joined
[23:19] <guifa> lizmat: are you still working on a redo of the sequence operator mechanics?  (I seem to recall that being in your long list of todos)
[23:21] *** javor left
[23:43] *** cognominal left
