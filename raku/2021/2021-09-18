[00:02] *** reportable6 left
[01:02] *** bloatable6 left
[01:02] *** quotable6 left
[01:02] *** benchable6 left
[01:02] *** committable6 left
[01:02] *** statisfiable6 left
[01:02] *** shareable6 left
[01:02] *** bisectable6 left
[01:02] *** tellable6 left
[01:02] *** nativecallable6 left
[01:02] *** greppable6 left
[01:02] *** sourceable6 left
[01:02] *** unicodable6 left
[01:02] *** coverable6 left
[01:02] *** notable6 left
[01:02] *** squashable6 left
[01:02] *** evalable6 left
[01:02] *** releasable6 left
[01:02] *** linkable6 left
[01:03] *** bloatable6 joined
[01:03] *** shareable6 joined
[01:03] *** quotable6 joined
[01:03] *** nativecallable6 joined
[01:04] *** unicodable6 joined
[01:04] *** reportable6 joined
[01:04] *** releasable6 joined
[01:04] *** squashable6 joined
[01:05] *** coverable6 joined
[01:05] *** greppable6 joined
[01:05] *** bisectable6 joined
[01:05] *** evalable6 joined
[01:05] *** linkable6 joined
[01:28] *** gordonfish- is now known as gordonfish

[02:28] *** greppable6 left
[02:28] *** linkable6 left
[02:28] *** quotable6 left
[02:28] *** bisectable6 left
[02:28] *** releasable6 left
[02:28] *** evalable6 left
[02:28] *** shareable6 left
[02:28] *** squashable6 left
[02:28] *** coverable6 left
[02:28] *** bloatable6 left
[02:28] *** nativecallable6 left
[02:28] *** reportable6 left
[02:28] *** unicodable6 left
[02:29] *** shareable6 joined
[02:30] *** bisectable6 joined
[02:30] *** quotable6 joined
[02:30] *** coverable6 joined
[02:30] *** unicodable6 joined
[02:30] *** bloatable6 joined
[02:31] *** reportable6 joined
[02:31] *** evalable6 joined
[02:31] *** nativecallable6 joined
[03:03] *** benchable6 joined
[03:03] *** tellable6 joined
[03:04] *** statisfiable6 joined
[03:04] *** frost joined
[03:04] *** sourceable6 joined
[03:29] *** linkable6 joined
[03:30] *** releasable6 joined
[03:31] *** greppable6 joined
[03:59] *** bdju left
[04:01] *** bdju joined
[04:05] *** committable6 joined
[04:08] *** squashable6 joined
[05:08] *** benchable6 left
[05:08] *** committable6 left
[05:08] *** releasable6 left
[05:08] *** tellable6 left
[05:08] *** linkable6 left
[05:08] *** statisfiable6 left
[05:08] *** sourceable6 left
[05:08] *** greppable6 left
[05:08] *** squashable6 left
[05:08] *** quotable6 left
[05:08] *** coverable6 left
[05:08] *** shareable6 left
[05:08] *** unicodable6 left
[05:08] *** nativecallable6 left
[05:08] *** bloatable6 left
[05:08] *** evalable6 left
[05:08] *** bisectable6 left
[05:08] *** reportable6 left
[05:08] *** evalable6 joined
[05:08] *** statisfiable6 joined
[05:08] *** benchable6 joined
[05:08] *** bloatable6 joined
[05:08] *** squashable6 joined
[05:09] *** shareable6 joined
[05:09] *** nativecallable6 joined
[05:09] *** greppable6 joined
[05:09] *** bisectable6 joined
[05:09] *** reportable6 joined
[05:09] *** committable6 joined
[05:10] *** linkable6 joined
[05:11] *** coverable6 joined
[05:47] *** codesections left
[06:02] *** reportable6 left
[06:08] *** sourceable6 joined
[06:08] *** quotable6 joined
[06:09] *** unicodable6 joined
[06:10] *** releasable6 joined
[07:02] *** reportable6 joined
[07:26] *** frost left
[07:31] *** frost joined
[07:32] *** sena_kun left
[07:33] *** sena_kun joined
[08:00] *** Manifest0 left
[08:04] *** notable6 joined
[08:20] *** sena_kun left
[08:23] *** sena_kun joined
[09:23] *** benchable6 left
[09:23] *** committable6 left
[09:23] *** quotable6 left
[09:23] *** shareable6 left
[09:23] *** coverable6 left
[09:23] *** greppable6 left
[09:23] *** bisectable6 left
[09:23] *** evalable6 left
[09:23] *** statisfiable6 left
[09:23] *** sourceable6 left
[09:23] *** unicodable6 left
[09:23] *** notable6 left
[09:23] *** releasable6 left
[09:23] *** bloatable6 left
[09:23] *** reportable6 left
[09:23] *** squashable6 left
[09:23] *** nativecallable6 left
[09:23] *** linkable6 left
[09:24] *** bisectable6 joined
[09:24] *** evalable6 joined
[09:24] *** quotable6 joined
[09:25] *** linkable6 joined
[09:25] *** benchable6 joined
[09:25] *** notable6 joined
[09:25] *** squashable6 joined
[09:26] *** committable6 joined
[09:37] *** Sgeo left
[09:41] *** squashable6 left
[09:42] *** squashable6 joined
[10:14] *** squashable6 left
[10:16] *** squashable6 joined
[10:17] *** squashable6 left
[10:22] <grondilu> wasn't there such a thing as a 'parsed' trait to define terms constrained by a Grammar/regex?

[10:25] *** reportable6 joined
[10:25] *** sourceable6 joined
[10:26] *** nativecallable6 joined
[10:26] <lizmat> not in current core

[10:27] <lizmat> doesn't ring a bell with me, maybe with moritz_ ?

[10:32] <grondilu> found it.  It's discussed in S06

[10:33] <grondilu> however : "This trait and the following are likely to be deprecated in favor of slang macros that are aware of the grammar and category in which they are installed, and that therefore already know how to parse like normal grammar rules. "

[10:33] <grondilu> so macro it is I guess

[10:34] * grondilu is not sure how that would work though

[10:35] * lizmat neither

[11:18] *** squashable6 joined
[11:24] *** greppable6 joined
[11:24] *** bloatable6 joined
[11:26] *** coverable6 joined
[11:26] *** unicodable6 joined
[11:26] *** releasable6 joined
[11:26] *** statisfiable6 joined
[11:39] <grondilu> say I hawe a module Foo that uses an other module Bar.  How can I have Foo export all the symbols that Bar exports?

[11:40] <grondilu> with heritage maybe?

[11:40] <lizmat> by playing EXPORT tricks

[11:40] <lizmat> see e.g. P5built-ins that imports / exports all of the other P5xxx modules

[11:41] <lizmat> https://github.com/lizmat/P5built-ins/blob/main/lib/P5built-ins.rakumod

[11:50] *** bdju left
[11:50] *** bdju joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:08] *** frost left
[12:12] <tbrowder> m: my $fh = $*OUT

[12:12] <camelia> rakudo-moar 10b327292: ( no output )

[12:13] <tbrowder> m: my $s="howdy"; my $fh=$*OUT; $fh.say: $s

[12:13] <camelia> rakudo-moar 10b327292: OUTPUT: «howdy␤»

[12:14] <tbrowder> just checking to see if i can use a shorthand for writing to stdout

[12:15] <tbrowder> m: my $fh = $*OUT; $fh.say("foo"); $fh.close

[12:15] <camelia> rakudo-moar 10b327292: OUTPUT: «foo␤»

[12:17] <tbrowder> m: my $fh=$*OUT; my $s="bar";$fh.say($s);$fh.close; say $s

[12:17] <camelia> rakudo-moar 10b327292: OUTPUT: «bar␤Cannot do 'print' on a closed handle␤  in block <unit> at <tmp> line 1␤␤»

[12:20] <tbrowder> so, using the alias in a program, i think the "close open file handles when done with them" rule should generally not be followed for std* handles

[12:21] <tbrowder> rakuing down the river...bye

[12:25] *** shareable6 joined
[12:40] <grondilu> there is no such thing as a parametric module, is there?

[12:42] <lizmat> grondilu: ? what do you mean by that?

[12:43] <grondilu> 'use Foo(:param(value));'

[12:44] <grondilu> I guess I can do 'use Foo; $Foo::param = value;'

[12:44] <lizmat> that'd be passing :param(value) to its EXPORT SUB

[12:45] <lizmat> grondilu *sub, no?

[12:45] <lizmat> you could use that to parameterize, I guess

[12:45] <grondilu> wrong syntax then

[12:45] <lizmat> but it feels better to just export a parameterizable role

[12:45] <lizmat> and parameterize that

[12:46] <grondilu> I don't want to compose it though so it's not a role I want.

[12:47] <lizmat> you can also have a class with a ^parameterize method ?

[12:48] <grondilu> I don't want to instanciate it either.  Nevermind I think I just have to assign a our variable.

[12:49] <grondilu> setting it during in the use statement would feel convenient, though.

[12:50] <grondilu> syntax would have been rather 'use Foo[param];' or something I guess

[12:50] <discord-raku-bot> <Anton Antonov#7232> "but it feels better to just export a parameterizable role" -- we can see modules as classes, hence switching from a module to a role is not that far fetched conceptually.

[12:52] <discord-raku-bot> <Anton Antonov#7232> This SO discussion is related to my statement above: https://stackoverflow.com/q/67564394

[12:52] <lizmat> m: role Foo { $.a = 42 };  dd Foo.new.a   # and there's role punning

[12:52] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $.a used where no 'self' is available␤at <tmp>:1␤------> 3role Foo { $.a7⏏5 = 42 };  dd Foo.new.a   # and there's r␤    expecting any of:␤        term␤»

[12:52] <lizmat> m: role Foo { has $.a = 42 };  dd Foo.new.a   # and there's role punning

[12:52] <camelia> rakudo-moar 10b327292: OUTPUT: «42␤»

[13:25] *** linkable6 left
[13:25] *** evalable6 left
[13:27] *** evalable6 joined
[13:43] *** djerius left
[13:43] *** djerius joined
[13:48] *** djerius left
[13:52] *** djerius joined
[14:17] *** adm joined
[14:19] *** adm left
[15:19] *** evalable6 left
[15:20] *** evalable6 joined
[15:25] *** linkable6 joined
[15:34] *** squashable6 left
[15:36] *** squashable6 joined
[15:41] *** Skarsnik joined
[15:42] <Skarsnik> Hello, I am confused by some block syntax/error?

[15:42] <Skarsnik> m: try {say "hello"; die "piko"; True} or say "plop"

[15:42] <camelia> rakudo-moar 10b327292: OUTPUT: «hello␤plop␤»

[15:42] <Skarsnik> try {say "hello"; die "piko"; True} or {say "plop"}

[15:42] <evalable6> Skarsnik, rakudo-moar 10b327292: OUTPUT: «hello␤»

[15:43] <Skarsnik> I am not sure to understand why the second run does say plop

[15:45] <ugexe> m: my $a = {say 42}; say $a

[15:45] <camelia> rakudo-moar 10b327292: OUTPUT: «-> ;; $_? is raw = OUTER::<$_> { #`(Block|74802872) ... }␤»

[15:45] <ugexe> m: my $a = {say 42}; say $a()

[15:45] <camelia> rakudo-moar 10b327292: OUTPUT: «42␤True␤»

[15:46] <Skarsnik> *does not

[15:48] <ugexe> because you didnt use `do`

[15:51] <Skarsnik> Was there a command to run on old rakudo version?

[15:52] <Skarsnik> I dit a PR with code like this to fix a bug in Test and it does not work x)

[15:52] <Skarsnik> !whateverable

[15:54] <Skarsnik> commit: 2020.01 try {say "hello"; die "piko"; True} or {say "plop"

[15:54] <committable6> Skarsnik, https://gist.github.com/937d23dfa33d6ad65d23b58b13b4db1d

[15:54] <Skarsnik> commit: 2020.01 try {say "hello"; die "piko"; True} or {say "plop"}

[15:54] <committable6> Skarsnik, ¦2020.01: «hello␤»

[16:02] <ugexe> i suspect your PR did not work the way you think then

[16:05] <Skarsnik> not sure why the test did not caught it

[16:11] <Skarsnik> Oh, I did not write a test for the input x)

[16:14] <Skarsnik> I wonder if there are other case where it could be useful to maybe have a class doing her own test failure output.

[16:14] <Skarsnik> # expected: Buf.new(22,25)

[16:14] <Skarsnik> #      got: Buf.new(22,255)

[16:15] <Skarsnik> having the number in hex is more useful

[16:16] <Skarsnik> especially if like the diff is at the 15 bytes, not easy to see if the expected & got string does not make them match

[16:28] *** djerius left
[16:28] *** djerius joined
[16:29] <Skarsnik> Can I call a non exported sub from a Module? Like I writing my own is sub in my code x)

[16:32] <Skarsnik> Or can I directly make part of a my code being part of the Test module?

[16:39] <timo> nice to see you Skarsnik :3

[16:39] <timo> the Test module would probably want to get some kind of API for this purpose

[16:40] <Skarsnik> Whenever I propose a new API it stay 4 years without answers! (just kidding)

[16:43] <Skarsnik> timo, any news on your profiler? :)

[16:46] <timo> i just resumed work on it actually

[16:46] <timo> i made the mistake of just running "npm update" and hoping it would continue working

[16:46] <timo> it did not :D

[16:47] <Skarsnik> I will try do run some benchmark when the new release is out. I am curious of the gain on Gumbo benchmark

[16:48] <timo> well, new-disp isn't merged yet, and nativecall is also not yet integrated with it in even the most basic form

[16:48] <timo> so it's likely not going to be much better immediately

[16:48] <Skarsnik> What is new-disp in summary?

[16:50] <timo> well, there's an excellent jnthn presentation about it, and i'll likely not do it justice with just a short summary

[16:51] <timo> one part of it is about generalising a bunch of systems into just one. for example, the method cache is gone now

[16:51] <timo> AFK for a moment

[17:04] <timo> ok, so we've now got a mechanism that lets the programmer (probably only core developers mostly, though) write in code how different kinds of "dispatch" work

[17:05] <timo> where dispatch encompasses pretty much everything where "a bunch of arguments go in, a decision what to call or return is made, and that is then acted upon"

[17:07] <timo> so this is for stringifying things (do we have a built-in C function? do we call .Str on the thing?), deconting things (is it a simple container so we just have to take an attribute? is it a Proxy where we need to invoke a FETCH method?), of course calling raku methods (is there a wrapper? is the proto sub complex? what decides what multi to invoke? are there "where" clauses?) and also this has a way

[17:07] <timo> to program "resumption"

[17:07] <timo> resumption is for things like nextsame/callsame/samewith/callwith

[17:11] *** tellable6 joined
[17:28] *** Tirifto left
[17:29] *** Tirifto joined
[17:48] <timo> Skarsnik: anyway, with moarvm being "in the know" about all these more complex mechanisms, we can have the optimizer understand things better and do inlining and optimization in many more cases than before :)

[17:48] <Skarsnik> interesting ^^

[17:48] <timo> absolutely give jnthn's talk a shot

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:12] <Skarsnik> Now you need to profile the choice the optimiser made? x)

[18:24] *** immedlate joined
[18:27] *** Manifest0 joined
[18:29] *** Sgeo joined
[18:52] *** Manifest0 left
[19:01] <timo> well, we'll get to see deoptimization counts, and we'll see the inlining decisions

[19:01] *** Manifest0 joined
[19:01] <timo> apart from that we see the generated guards and such in the spesh log

[19:44] *** xinming left
[19:44] *** xinming joined
[20:05] *** TempIRCLogger left
[20:05] *** TempIRCLogger joined
[20:06] *** TempIRCLogger left
[20:07] *** TempIRCLogger joined
[21:07] *** linkable6 left
[21:07] *** evalable6 left
[21:08] *** linkable6 joined
[21:14] *** immedlate left
[21:42] *** vrurg joined
[22:00] *** vrurg_ joined
[22:00] *** vrurg_ left
[22:00] *** vrurg left
[22:08] *** evalable6 joined
[22:34] *** colemanx joined
[23:11] *** squashable6 left
[23:11] *** perlbot left
[23:12] *** perlbot joined
[23:35] *** MasterDuke left
[23:51] *** Skarsnik left
