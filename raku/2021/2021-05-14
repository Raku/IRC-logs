[00:00] <canbenshanlo> take-while doesn't

[00:01] <codesections> m: say gather for [3, 5, 1, 2, 3] { $_ !%% 2 ?? .take !! last } 

[00:01] <camelia> rakudo-moar 816281b91: OUTPUT: «(3 5 1)␤»

[00:01] <ugexe> grep can work lazily

[00:02] <gfldex> m: say [3,5,1,2,3].grep(* !%% 2).unique;

[00:02] <camelia> rakudo-moar 816281b91: OUTPUT: «(3 5 1)␤»

[00:02] *** reportable6 left
[00:03] <ugexe> oh i misunderstood what you meant by evaluate the whole list

[00:03] <canbenshanlo> codesections: thanks, 'last' is the piece that i was missing

[00:04] <gfldex> m: my \l := [3,5,1,2,3].grep({say 'lazy'; $_ !%% 2}).unique; say l[^2];¶

[00:04] <camelia> rakudo-moar 816281b91: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3ay 'lazy'; $_ !%% 2}).unique; say l[^2];7⏏5¶␤    expecting any of:␤        prefix␤        term␤»

[00:04] <gfldex> m: my \l := [3,5,1,2,3].grep({say 'lazy'; $_ !%% 2}).unique; say l[^2];

[00:04] *** reportable6 joined
[00:04] <camelia> rakudo-moar 816281b91: OUTPUT: «lazy␤lazy␤(3 5)␤»

[00:05] <ugexe> gfldex: it needs to be a grep that stops once it sees an even number

[00:05] <canbenshanlo> gfldex: sure, but i don't know in advance how many items i will need

[00:05] <canbenshanlo> actual problem involves 200mil combinations, picking the front while a certain condition applies

[00:06] <gfldex> there are always Exceptions to deal with exceptional control flow

[00:07] <codesections> m: say [3, 5, 1, 2, 3].map: { $_ !%% 2 ?? $_ !! last } # last also works with map

[00:07] <camelia> rakudo-moar 816281b91: OUTPUT: «(3 5 1)␤»

[00:08] <moon-child> the grep solution doesn't have the correct behaviour

[00:09] <moon-child> m: sub odd($i) { $i !%% 2 }; say [3, 5, 1, 2, 7].grep(&odd).unique

[00:09] <camelia> rakudo-moar 816281b91: OUTPUT: «(3 5 1 7)␤»

[00:09] <canbenshanlo> gfldex: is take-while really exceptional for a hundred-year multi-paradigm lang supporting other similar functional constructs?

[00:09] <moon-child> 7 shouldn't show up in the output

[00:10] <gfldex> m: say [3, 5, 1, 2, 7].map: { $_ !%% 2 or last }

[00:10] <camelia> rakudo-moar 816281b91: OUTPUT: «(True True True)␤»

[00:10] <gfldex> m: say [3, 5, 1, 2, 7].grep: { $_ !%% 2 or last }

[00:10] <camelia> rakudo-moar 816281b91: OUTPUT: «(3 5 1)␤»

[00:11] <canbenshanlo> or last is elegant, thanks!

[00:11] <moon-child> gfldex: ooh, nice

[00:12] <gfldex> last fires a control exception, so my argument still stands :)

[00:12] <codesections> I mean, I think &last technically throws a control exception under the hood.  (a control exception, CX::Last)

[00:37] *** b2gills joined
[00:57] *** marcusr left
[00:58] *** marcusr joined
[01:29] *** reach_satori left
[01:33] *** kvw_5_ joined
[01:33] *** canbenshanlo left
[01:37] *** kvw_5 left
[02:02] *** clarjon1 left
[02:04] *** rindolf joined
[02:25] *** DiffieHellman left
[02:26] *** DiffieHellman joined
[03:26] *** squashable6 left
[03:26] *** sourceable6 left
[03:26] *** shareable6 left
[03:26] *** reportable6 left
[03:26] *** nativecallable6 left
[03:26] *** bloatable6 left
[03:26] *** unicodable6 left
[03:26] *** committable6 left
[03:26] *** releasable6 left
[03:26] *** quotable6 left
[03:26] *** statisfiable6 left
[03:26] *** linkable6 left
[03:26] *** tellable6 left
[03:26] *** greppable6 left
[03:26] *** evalable6 left
[03:26] *** bisectable6 left
[03:26] *** coverable6 left
[03:26] *** benchable6 left
[03:26] *** notable6 left
[03:26] *** benchable6 joined
[03:26] *** tellable6 joined
[03:26] *** evalable6 joined
[03:26] *** quotable6 joined
[03:26] *** statisfiable6 joined
[03:27] *** coverable6 joined
[03:27] *** sourceable6 joined
[03:27] *** greppable6 joined
[03:28] *** bisectable6 joined
[03:28] *** linkable6 joined
[03:28] *** shareable6 joined
[03:28] *** notable6 joined
[03:28] *** unicodable6 joined
[03:28] *** committable6 joined
[03:28] *** reportable6 joined
[03:28] *** squashable6 joined
[03:28] *** bloatable6 joined
[03:29] *** nativecallable6 joined
[03:29] *** releasable6 joined
[03:44] *** DiffieHellman left
[03:55] *** DiffieHellman joined
[03:58] *** lucasb left
[04:47] *** dotdotdot left
[04:48] *** rindolf left
[04:53] *** dotdotdot joined
[05:40] *** parabolize left
[05:44] *** wamba joined
[05:45] *** rindolf joined
[06:02] *** reportable6 left
[06:02] *** aluaces left
[06:03] *** reportable6 joined
[06:06] *** ufobat joined
[06:18] *** brtastic joined
[06:38] *** aluaces joined
[06:39] *** stoned75 joined
[06:49] *** wamba left
[06:53] *** pecastro joined
[06:56] *** abraxxa joined
[07:03] *** abraxxa left
[07:04] *** abraxxa joined
[07:14] *** asymptotically joined
[07:15] *** Sgeo left
[07:32] *** brtastic1 joined
[07:32] *** brtastic left
[07:32] *** brtastic1 is now known as brtastic

[07:47] <japhb> 🎉‭🎉‭🎉‭ v0.1.2 has been released and is uploaded to fez/zef!  Now with higher performance, CBOR serialization, many more docs, and many bug fixes!  See https://github.com/Raku-MUGS/MUGS/blob/main/docs/announce/v0.1.2.md for details.  :-)

[07:48] <japhb> To be precise, that's *MUGS* 0.1.2.  (oops)

[07:53] *** tejr left
[07:57] *** tejr joined
[08:03] *** Altai-man_ joined
[08:04] *** sena_kun left
[08:07] *** abraxxa left
[08:14] *** Altai-man_ left
[08:16] *** sena_kun joined
[08:27] *** wamba joined
[08:37] *** AlexDaniel` left
[08:38] *** ServerStatsDisco left
[08:40] *** AlexDaniel` joined
[08:44] *** ServerStatsDisco joined
[09:23] *** eseyman left
[09:28] *** eseyman joined
[09:40] *** pecastro left
[09:48] *** cpage left
[09:52] *** pecastro joined
[10:01] *** canbenshanlo joined
[10:11] *** cgfbee left
[10:26] *** mowcat joined
[10:29] *** wingfold left
[11:03] *** sftp left
[11:15] *** mowcat left
[11:24] *** aborazmeh joined
[11:27] *** __jrjsmrtn__ left
[11:28] *** __jrjsmrtn__ joined
[11:31] *** mowcat joined
[11:40] *** aborazmeh left
[11:43] *** yacatuco joined
[11:48] *** stoned75 left
[11:50] <tbrowder> m: my @a=<cc bb aa c b a>; @a.append(<dd d>).sort

[11:50] <camelia> rakudo-moar c7a078dec: ( no output )

[11:52] <tbrowder> m: my @a=<cc bb c b>; @a.=append(<aa a>).sort; say @a

[11:52] <camelia> rakudo-moar c7a078dec: OUTPUT: «[cc bb c b aa a]␤»

[11:53] <tbrowder> m: my @a=<aa a>; say @a.sort

[11:53] <camelia> rakudo-moar c7a078dec: OUTPUT: «(a aa)␤»

[11:55] <tbrowder> m: my @a; @a.=append(<b a>).sort; say @a

[11:55] <camelia> rakudo-moar c7a078dec: OUTPUT: «[b a]␤»

[11:56] <tbrowder> hi, all. why doesn't the chained sort work on the array?

[11:58] <tbrowder> m; my @a; @a.=append(<b a>); @a.=sort; say @a

[11:58] <tbrowder> arg

[11:59] <tbrowder> m: my @a; @a.=append(<b a>); @a.=sort; say @a

[11:59] <camelia> rakudo-moar c7a078dec: OUTPUT: «[a b]␤»

[12:02] *** reportable6 left
[12:02] <tbrowder> is it because the .= operator negates any chaining? if not, wouldn't a warning be appropriate?

[12:02] <Altreus> I'm into this sort of question

[12:03] <Altreus> I was trying to see the obvious answer but you'd assume it would translate into @a = @a.append(<b a>).sort

[12:03] <tbrowder> Altreus: good day!

[12:03] <Altreus> hallo

[12:03] *** reportable6 joined
[12:04] <Altreus> m: my @a = <c d>; @a = @a.append(<b a>).sort; say @a

[12:04] <camelia> rakudo-moar c7a078dec: OUTPUT: «[a b c d]␤»

[12:04] <tbrowder> i ran into the issue while building some tests and being lazy. i also got bit by another nit on arrays

[12:04] <Altreus> m: my @a = <c d>; @a .= append(<b a>).sort; say @a

[12:04] <camelia> rakudo-moar c7a078dec: OUTPUT: «[c d b a]␤»

[12:05] <Altreus> My assumption is it is parsed as (@a .= append(<b a>)).sort

[12:05] <Altreus> i.e. the sort is sunk

[12:05] <tbrowder> weird! it's not just me

[12:05] <tbrowder> let me try to show another unexpected thingy...

[12:07] <tbrowder> m: my @a=<a>; say @a; my @b = @a.append(<b>); say @b; say @a

[12:07] <camelia> rakudo-moar c7a078dec: OUTPUT: «[a]␤[a b]␤[a b]␤»

[12:07] <tbrowder> weird!

[12:08] *** stoned75 joined
[12:08] <tbrowder> bugs?

[12:08] <Altreus> that seems right; append mutates the array and returns the new array

[12:09] <Altreus> still feels like programming culture is sitting on the fence between mutable and immutable

[12:10] <tbrowder> but i can see that if i had enclosed the @a.append in parens

[12:10] <Altreus> not sure I'm following, sorry

[12:11] <Altreus> exempli gratia?

[12:11] <tbrowder> @b = (@a.append(<b>))

[12:12] <Altreus> I don't think that is substantially different

[12:13] <tbrowder> ok, i think i see. thnx

[12:17] <Altreus> m: my @a = <a>; say @a.append(<b>);

[12:17] <camelia> rakudo-moar c7a078dec: OUTPUT: «[a b]␤»

[12:17] <Altreus> is return value of append that goes into @b

[12:20] <tbrowder> i understand that, but shouldn't the chained sort example also affect the first example?

[12:26] <Altreus> I think the append example definitely lends credence to your expectations from the sort example

[12:27] <Altreus> append definitely returns the correct data to then be sorted

[12:27] <Altreus> .= must therefore bind more tightly than .

[12:27] <Altreus> hmm

[12:27] <Altreus> m: my @a = <c d>; @a .= (append(<b a>).sort); say @a

[12:27] <camelia> rakudo-moar c7a078dec: OUTPUT: «Cannot call 'append' on an immutable 'List'␤  in block <unit> at <tmp> line 1␤␤»

[12:28] <Altreus> grumble

[12:28] <Altreus> wait what

[12:28] <Altreus> now that makes no sense :D

[12:29] <raydiak> . and .= are equal precedence, left associative

[12:31] <raydiak> m: my @a; append @a, 1; say @a; # it thinks this is what you're asking for, but <b a> is not mutable

[12:31] <camelia> rakudo-moar c7a078dec: OUTPUT: «[1]␤»

[12:32] <Altreus> oh

[12:32] <tbrowder> i just stepped away and i think i know where i was going wrong...

[12:32] <Altreus> you left perl5 for pastures green?

[12:32] <tbrowder> you said the clue, too: sink

[12:33] <Altreus> what are you sinking about

[12:33] <tbrowder> yes, but i was reading the chain order the wrong way...

[12:34] * Altreus patiently awaits m example :)

[12:34] <raydiak> m: my @a=<cc bb c b>; @a.append(<aa a>).=sort; say @a

[12:34] <camelia> rakudo-moar c7a078dec: OUTPUT: «[a aa b bb c cc]␤»

[12:35] <Altreus> O_o

[12:35] <Altreus> that is unintuitive

[12:35] <lizmat> why?  the return value of @a.append is @a

[12:35] <Altreus> hold up, is sort a mutator or an adapter?

[12:36] <Altreus> that's exactly why it's unintuitive

[12:36] <lizmat> adapter

[12:36] <lizmat> but .= sort makes it a mutator

[12:36] <Altreus> or rather it's unintuitive that the *other* thing didn't work

[12:37] <Altreus> It's also unintuitive that append and sort work differently

[12:37] <Altreus> the language is equally imperative but the semantics are different

[12:38] <tbrowder> m: my @a=<a>; my @b=<b>; say @a;say @b; @b.=.sort.append(<f e>); say @b

[12:38] <camelia> rakudo-moar c7a078dec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3y @a=<a>; my @b=<b>; say @a;say @b; @b.=7⏏5.sort.append(<f e>); say @b␤    expecting any of:␤        dotty method or postfix␤»

[12:38] <tbrowder> well barf

[12:39] <Altreus> too many dots?

[12:39] <Altreus> I love the use of the eject symbol in Raku errors

[12:39] <Altreus> so much better than perl5 just complaining about a line somewhere in the vicinity

[12:39] <tbrowder> m: my @b; @b.=sort.append(<b a>); say @b

[12:39] <camelia> rakudo-moar c7a078dec: OUTPUT: «[b a]␤»

[12:40] <Altreus> at least that makes sense

[12:40] <tbrowder> ah, well, at least i know what not to try :-D

[12:50] <raydiak> basically what's confusing here is that sort returns a sorted copy of the array, while append mutates the array and returns it. append is similar to p5 push in that it requires an actual mutable array, and sort is similar to p5 sort, which can sort any list even if it's not in an array.

[12:50] <raydiak> which is why append is a method of Array, and sort is a method of List

[12:52] <tbrowder> ah, i should read (and understand) the docs on types more! thnx

[12:56] <raydiak> yw :)

[13:08] *** evalable6 left
[13:08] *** linkable6 left
[13:09] *** linkable6 joined
[13:10] *** evalable6 joined
[13:11] *** PimDaniel joined
[13:11] <PimDaniel> \o Hi.

[13:12] <PimDaniel> What is a Seq?

[13:12] <sienet_ja_LSD[m]> it's a thing you loop over

[13:13] <lizmat> m: dd <a b c>.map( *.succ }

[13:13] <camelia> rakudo-moar c7a078dec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3dd <a b c>.map( *.succ 7⏏5}␤»

[13:13] <lizmat> m: dd <a b c>.map( *.succ )

[13:13] <camelia> rakudo-moar c7a078dec: OUTPUT: «("b", "c", "d").Seq␤»

[13:14] <lizmat> m: dd <a b c>.map( { last if $_ eq "b"; .succ })

[13:14] <camelia> rakudo-moar c7a078dec: OUTPUT: «("b",).Seq␤»

[13:14] <PimDaniel> Ok so a list is a Seq?

[13:15] <PimDaniel> Or a Seq is a List?

[13:15] <lizmat> m: dd Seq ~~ List

[13:15] <camelia> rakudo-moar c7a078dec: OUTPUT: «Bool::False␤»

[13:15] <lizmat> m: dd List ~~ Seq

[13:15] <camelia> rakudo-moar c7a078dec: OUTPUT: «Bool::False␤»

[13:15] <lizmat> m: dd List ~~ Iterable

[13:15] <camelia> rakudo-moar c7a078dec: OUTPUT: «Bool::True␤»

[13:15] <lizmat> m: dd Seq ~~ Iterable

[13:15] <camelia> rakudo-moar c7a078dec: OUTPUT: «Bool::True␤»

[13:15] <stoned75> have a look the the fine documentation "Lists, sequences and array" https://docs.raku.org/language/list

[13:15] <lizmat> m: dd List ~~ Positional

[13:15] <camelia> rakudo-moar c7a078dec: OUTPUT: «Bool::True␤»

[13:15] <stoned75> *arrays

[13:15] <lizmat> m: dd Seq ~~ Positional

[13:15] <camelia> rakudo-moar c7a078dec: OUTPUT: «Bool::False␤»

[13:17] <PimDaniel> All theses types are very confused to me and are hard to learn. Seq Array List Positionnal :/

[13:17] <sienet_ja_LSD[m]> A sequence, Seq , knows how to make a future List . It’s similar to a List but it’s lazy.

[13:17] <sienet_ja_LSD[m]> It knows where its values will come from and defers producing them until you

[13:17] <sienet_ja_LSD[m]> actually need them.

[13:18] <PimDaniel> The problem with the reference documentation is you do not know where to search what you need.

[13:19] <sienet_ja_LSD[m]> perl 6 book and think perl 6 are also nice

[13:19] *** asymptotically left
[13:21] <PimDaniel> sienet_ja_LSD is Perl 6 book sold? Where may we have it?

[13:21] <lizmat> afk for a few hours&

[13:22] <PimDaniel> Thank all of you for your help.

[13:22] <sienet_ja_LSD[m]> PimDaniel: https://github.com/Raku/book

[13:23] <lizmat> sienet_ja_LSD[m]: that's pretty out of date

[13:23] <lizmat> https://greenteapress.com/wp/think-perl-6/

[13:24] <lizmat> allows you to download as PDF

[13:24] <sienet_ja_LSD[m]> aye that one 

[13:27] <PimDaniel> sienet_ja_LSD[m] It does NOT build because : where does this module come from :  Pod::PseudoPod::LaTeX ? And what is it? Thank you!

[13:28] <PimDaniel> sienet_ja_LSD It does NOT build because : where does this module come from :  Pod::PseudoPod::LaTeX ? And what is it? Thank you!

[13:29] <sienet_ja_LSD[m]> it looks like a perl5 module

[13:29] <sienet_ja_LSD[m]> cpan Pod::PseudoPod::LaTeX

[13:32] <PimDaniel> sienet_ja_LSD Could  NOT build raku book because : where does this module come from :  Pod::PseudoPod::LaTeX ? And what is it? Thank you!

[13:32] <PimDaniel> sienet_ja_LSD Could NOT build raku book because  where does this module come from :  Pod::PseudoPod::LaTeX ? And what is it? Thank you!

[13:33] <sienet_ja_LSD[m]> it is a perl5 module 

[13:33] <PimDaniel> sienet_ja_LSD Could NOT build raku book because  where does this module come from  Pod/seudoPod/LaTeX ? And what is it? Thank you!

[13:33] <sienet_ja_LSD[m]> you need to use cpan to install it

[13:33] <PimDaniel> what

[13:33] *** PimDaniel left
[13:33] *** PimDaniel joined
[13:33] *** yacatuco left
[13:34] *** Sgeo joined
[13:34] <PimDaniel> sienet_ja_LSD Could NOT build raku book because  where does this module come from  Pod/PseudoPod/LaTeX.pm ? And what is it? Thank you!

[13:34] <PimDaniel> I've not it in Debian i think!

[13:35] <sienet_ja_LSD[m]> this is probably a better resource that gives the same info than the book you are trying to build https://greenteapress.com/wp/think-perl-6/

[13:40] <PimDaniel> Well now 2 questions:

[13:41] <PimDaniel> 1 transform a word into it's letters list.

[13:41] <PimDaniel> How can we do that?

[13:45] <PimDaniel> m: my @lst = "Interview".split(''); @lst.raku.say

[13:45] <stoned75> m: "hello".comb

[13:45] <camelia> rakudo-moar c7a078dec: OUTPUT: «["", "I", "n", "t", "e", "r", "v", "i", "e", "w", ""]␤»

[13:45] <camelia> rakudo-moar c7a078dec: ( no output )

[13:45] <stoned75> m: "hello".comb.say

[13:45] <camelia> rakudo-moar c7a078dec: OUTPUT: «(h e l l o)␤»

[13:46] <PimDaniel> stoned75 this is still a reference search problem : how could i know a .comb method did what i searched. :(

[13:47] <PimDaniel> stoned75 Thank You!

[13:48] <stoned75> :) and you're welcome

[13:50] <PimDaniel> thank's and the second questions is resolved.

[13:54] <PimDaniel> sienet_ja_LSD I could download the pdf raku book here  https://greenteapress.com/wp/think-perl-6/ , thank you.

[14:02] *** parabolize joined
[14:21] *** PimDaniel left
[14:24] *** wamba left
[14:29] *** thundergnat joined
[14:36] *** ufobat_ joined
[14:39] *** ufobat left
[14:40] *** thundergnat left
[15:14] *** brtastic left
[15:20] *** ufobat_ left
[15:35] *** jmerelo joined
[15:35] *** epony left
[16:11] *** epony joined
[16:11] *** Black_Ribbon joined
[16:34] *** PimDaniel joined
[16:34] <PimDaniel> \o

[16:35] <PimDaniel> How to delete values into a list : i've allready do that but i do not remenber.

[16:37] <PimDaniel> This time it is a list of Int : my Int @numbrs = ( 1,8,9,33,2); want to delete 8 and 33, how? thank you!

[16:39] *** kaun_ joined
[16:40] *** kaun_ left
[16:41] <tonyo> PimDaniel: cpan is in debian by default

[16:42] <lizmat> m: my Int @numbrs = ( 1,8,9,33,2 ); say @numbrs.grep( { ! ($_ ~~ 8|33) } )   # PimDaniel: a way to do it

[16:42] <camelia> rakudo-moar c7a078dec: OUTPUT: «(1 9 2)␤»

[16:43] <lizmat> sometimes I think we need a :negate or so named for .grep

[16:43] <lizmat> then you could write that as:

[16:43] <stoned75> .grep:v() ;-)

[16:43] <stoned75> .grep:-v() ;-)

[16:44] <lizmat> m: my Int @numbrs = ( 1,8,9,33,2 ); say @numbrs.grep( 8|33, :negate ) 

[16:44] <camelia> rakudo-moar c7a078dec: OUTPUT: «Unexpected adverb 'negate' passed to grep on '@numbrs'.␤  in block <unit> at <tmp> line 1␤␤»

[16:44] <lizmat> stoned75: yeah, but :v is already taken

[16:44] <stoned75> indeed

[16:44] <stoned75> or a  .reject()

[16:44] <lizmat> m: my Int @numbrs = ( 1,8,9,33,2 ); say @numbrs.grep( 8|33 ) 

[16:44] <camelia> rakudo-moar c7a078dec: OUTPUT: «(8 33)␤»

[16:45] <stoned75> or .grep-v()

[16:45] <tonyo> .grep:Ʌ()

[16:47] <stoned75> gah... Real, Real.Bridge, and methods .Int, .Rat, .Num in classes which do Real have me confused

[16:49] <PimDaniel> Yeah! that's even more than i expected! thank you , stoned75 i like the .grep:-v but where are datas exactly ? you meant @newlist := @numbrs.grep:-v(8,33)?

[16:49] <canbenshanlo> m: say (1,8,9,33,2).grep(none 8 | 9)

[16:49] <camelia> rakudo-moar c7a078dec: OUTPUT: «(1 33 2)␤»

[16:49] <stoned75> PimDaniel: ah sorry grep:-v() does not exist :-}

[16:49] <stoned75> go for what lizmat said

[16:50] <stoned75> or rather suggested

[16:50] <PimDaniel> stoned75: Ok, no problem! You'r welcome!

[16:51] <PimDaniel> m: my Int @numbrs = ( 1,8,9,33,2); say @numbrs.grep( { ! ($_ ~~ 8|33) } ) 

[16:51] <camelia> rakudo-moar c7a078dec: OUTPUT: «(1 9 2)␤»

[16:53] <lizmat> m: say (1,8,9,33,2).grep(none(8,9))

[16:53] <camelia> rakudo-moar c7a078dec: OUTPUT: «(1 33 2)␤»

[16:54] <lizmat> canbenshanlo's version is also pretty good  :-)

[16:54] <canbenshanlo> ruby's .reject is still better ;)

[16:54] <PimDaniel> lizmat less tricky syntax

[16:55] <PimDaniel> canbenshanlo i do not know ruby but i agree that even Raku syntax is often heavy

[16:56] <PimDaniel> It thought it would be one of the things to resolve in Raku. :(

[16:56] <PimDaniel> *I  thought it would be...

[16:58] <PimDaniel> and if i remenber it was one of the goal when Perl6 occured... do not wanna blame because it is powerfull for many things but...

[16:59] <lizmat> well, fwiw, .grep is one of the things that were more or less taken verbatim from Perl  :-)

[16:59] <PimDaniel> lizmat I agree this kind of thing @numbrs.grep( { ! ($_ ~~ 8|33) } )  ressemble to Perl

[16:59] <lizmat> 8|33, :reject

[16:59] <lizmat> would have been clearer :-)

[17:00] <lizmat> still:   none(8.33)   is also pretty clear I's day ?

[17:00] <lizmat> *none(8,33) 

[17:00] <lizmat> *I'd say  :-)

[17:01] *** aluaces left
[17:01] <PimDaniel> I'll be clear enought for me.

[17:02] *** clarjon1 joined
[17:06] <codesections> relatedly, is there any particular reason we don't have an operator for .none?  It's the only junction without one

[17:06] *** swaggboi left
[17:06] <lizmat> codesections: ran out of easy memorizable symbols ?

[17:06] <codesections> ha, fair

[17:07] <canbenshanlo> "powerfull for many things" -- it really is. need multi-sort just today and was glad that raku has me covered on that front via .sort({ -.value, .key })

[17:07] <canbenshanlo> needed*

[17:08] *** PimDaniel left
[17:10] <canbenshanlo> say, where do discussions regarding new operators and functions for inclusion into the stdlib happen? kinda lost with all these different raku repos on github.

[17:11] *** swaggboi joined
[17:11] <canbenshanlo> or is it just a matter of someone writing up a PR for the test suite and it either gets merged or rejected?

[17:11] <codesections> m: say ((1,8,9,33,2) (-) (8,33)).keys # Also works, if you don't mind the parens

[17:11] <camelia> rakudo-moar c7a078dec: OUTPUT: «(1 9 2)␤»

[17:12] <canbenshanlo> already gone

[17:13] *** PimDaniel joined
[17:14] *** PimDaniel left
[17:19] *** aluaces joined
[17:31] <lizmat> canbenshanlo   the latter

[17:32] <canbenshanlo> kk, i see, thanks

[17:37] <[Coke]> ran "zef update" and it showed 3 urls as updating/updated... and now is just sitting there.

[17:37] <[Coke]> (top shows it using most of a CPU)

[17:40] <tonyo> it's mining bitcoins

[17:41] <Altreus> hallelujah

[17:43] *** MasterDuke joined
[17:50] *** sftp joined
[17:50] <[Coke]> still running...

[17:51] <[Coke]> (it's also using up 7% of the memory on the box)

[17:51] *** jmerelo left
[17:53] <[Coke]> (and leaking)

[17:54] <[Coke]> ugexe: any diagnostics I can run on this that would be helpful or should I just kill it and re-run?

[17:55] <tonyo> [Coke]: is there a curl or wget process running under zef?

[17:56] <tonyo> might be timing out on a url

[17:57] <[Coke]> more like not timing out

[17:58] <[Coke]> wouldn't be chewing a CPU at that point, I don't think.

[17:58] <[Coke]> also, based on output, it has fetched the 3 urls it was working on

[18:00] <ugexe> i'd just kill and rerun

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:06] <[Coke]> ok. quickly got through "updated" on all 3 urls...

[18:06] <[Coke]> now using 1.5 CPUs and 2% memory

[18:07] <[Coke]> (and growing)

[18:32] <[Coke]> yup, just froze again.

[18:32] <[Coke]> 2/3 CPU, 7.1% MEM

[18:34] *** wamba joined
[18:35] *** wamba left
[18:36] * [Coke] just goes on to do the upgrade he was trying to do

[18:36] <ugexe> the only thing i can think of is the ~/.zef getting too big and somehow causing an issue

[18:36] <ugexe> so `zef nuke RootDir`

[18:38] <ugexe> `zef update --/cached` would also work to test it without deleting the dir

[18:40] <[Coke]> .zef is 4.9G

[18:42] <[Coke]> the nuke command expected to be slow? 

[18:43] <[Coke]> (should I just rm -rf ~/.zef ?)

[18:44] <ugexe> `rm -rf ~/.zef` is the same thing, but without iterating over everything

[18:46] <[Coke]> ok. removed, reran 'zef update', and it finished in (about) 10s instead.

[18:46] <[Coke]> ugexe++

[18:46] <ugexe> it was taking all that time building that table at the end

[18:46] <ugexe> but for the cache

[18:47] <codesections> [Coke]: Out of curiosity, how did you wind up with a ~5 gig .zef?  I just checked mine, and it's sitting at ~200 mb

[18:47] <[Coke]> is there a threshold where maybe we suggest users run the nuke or otherwise cleanup?

[18:47] <[Coke]> codesections: I've been using zef since it was released and didn't realize I had to clean it up?

[18:47] <codesections> and I haven't really been restrained :D

[18:48] <[Coke]> ugexe: or maybe silently clean up stuff older than <x> ?

[18:48] <codesections> fair, I guess I haven't had it quite as long.  And I did --nuke it once (to clean up user error)

[19:00] *** aluaces left
[19:02] <ugexe> well technically the cache is an ecosystem. just a local one

[19:02] <ugexe> so suggesting to delete seems alright, but im not sure about silently deleting things

[19:15] <[Coke]> the suggestion is fine; just a rough thing to sit for 30 minutes waiting.

[19:16] <[Coke]> codesections: after nuking it and upgrading MUGS, I'm already at 335M

[19:24] <tonyo> my dir is a year or so old and 48M

[19:40] <japhb> OK, loving that your test was upgrading MUGS, [Coke].  :-)

[21:09] *** wamba joined
[21:40] *** wamba left
[21:43] *** aluaces joined
[21:51] *** Xliff joined
[21:52] <Xliff> \o

[21:52] <Xliff> Can someone tell me why this isn't outputting <a b c d e f>?

[21:52] <Xliff> https://replit.com/join/pvfzblor-xliff

[21:54] <moon-child> Xliff: I apparently need to register for a service to read that, can you post it somewhere else?

[21:54] <Xliff> Is there another online Raku REPL?

[21:55] <moon-child> I don't know.  But you can just paste the source code by itself, no?

[21:55] <Xliff> Hmm... try TIO?

[21:55] <Xliff> https://tio.run/##fY/bCoJAFEXf5ys2UVAQQtcHxVBf@4SIsGZM0Sw8hkn57dNcCCKqp1mzz5m1mYuoiqWUhyImQog7A04tBjHnlSASBB9DlQEx/BUmY8N7zVPLB80zhSOP6ceiTs8cuWgJ9zePY5KOdYzZrgjZ/0KuxXNbIjQvLCealz8KzYbyBbnyfLR7Zkhxi97aVbtB7hwzqtH17ETdL1dKXfR3SM4Vho9S3Oomq9PRZvtaUYf5ROiUojFaI3GU1mPRl1DKJw

[21:56] <Xliff> That's an obnoxious link....

[21:59] <moon-child> nextwith isn't a regular function call, it _switches_ to the next candidate

[21:59] <moon-child> so B.keys transfers control to A.keys, and A.keys returns directly to the top level

[21:59] <moon-child> try callwith

[21:59] <moon-child> (or callsame, which I think is clearer though it doesn't make a difference in this case)

[22:00] <Xliff> LOL! I keep forgetting that.

[22:01] <gfldex> Xliff: https://glot.io/new/raku does not need a registration

[22:01] * moon-child wonders why there is no samesame

[22:02] <moon-child> I guess for pure functions it would always cause an infinite loop.  But who needs purity?

[22:02] <Xliff> gfldex: Thanks!

[22:03] <Xliff> OK, TIO updated. Is there a way this can be done without the for?

[22:03] <gfldex> moon-child: german brewers, see: https://www.youtube.com/watch?v=o8eOribA6qI

[22:03] <moon-child> making the whole function body be '|%addresses.keys, |callsame' should work

[22:04] <moon-child> gfldex: what?

[22:04] <codesections> there's actually a whole bunch of code sandboxes that support Raku https://www.reddit.com/r/rakulang/comments/kj63dq/glotio_now_supports_raku/

[22:04] <gfldex> you asked who needs purity. German brewers are mandated by law to purity.

[22:05] <moon-child> lol

[22:15] <Xliff> moon-child++ 

[22:35] <canbenshanlo> i have a few bots communicating through channels. given these heavily reduced examples, any ideas why the second version blocks forever while the first one finishes eventually? am i missing something fundamental about raku's channels?

[22:35] <canbenshanlo> start { my $x = $c.receive; my $y = $c.receive; sort($x, $y) }

[22:35] <canbenshanlo> start { sort($c.receive, $c.receive) }

[22:36] *** xelxebar left
[22:37] *** xelxebar joined
[22:41] <moon-child> canbenshanlo: I don't really know, but a couple of ideas: what type are $x and $y?  What happens if you change the first version to sort($y, $x)?  What if you change the second version to sort({$c.receive}(), {$c.receive}())?

[22:42] <canbenshanlo> just regular Ints

[22:43] <canbenshanlo> no difference

[22:45] <canbenshanlo> hm, guess i'll will recheck first thing in the morning with a fresh mind.

[22:46] <canbenshanlo> prolly overlooking something stupid

[22:46] *** aluaces left
[23:11] <raydiak> m: my $c = Channel.new; my $p = start { sort $c.receive, $c.receive }; $c.send: 2; $c.send: 1; say $p.result;

[23:11] <camelia> rakudo-moar c7a078dec: OUTPUT: «(1 2)␤»

[23:11] <raydiak> seems to work

[23:11] <gfldex> canbenshanlo: the 1th version is slower and that gives wiggle room for the scheduler. If you starve the scheduler, you should get the race condition in both cases.

[23:12] <gfldex> canbenshanlo: see: https://gfldex.wordpress.com/2020/07/24/awaiting-a-bugfix/

[23:16] <canbenshanlo> hm, interesting. yeah, i'm hammering the scheduler, starting hundreds of the above blocks while reading from a file. will take another look tomorrow morning. thanks for the link!

[23:46] *** linkable6 left
[23:46] *** evalable6 left
[23:48] *** linkable6 joined
[23:49] *** evalable6 joined
[23:59] *** pecastro left
