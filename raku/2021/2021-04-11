[00:08] *** oneeggeach left
[00:12] *** neshpion left
[00:16] *** sxmx joined
[00:24] *** abraxxa left
[00:25] *** abraxxa joined
[00:38] *** oneeggeach joined
[00:40] *** squashable6 left
[00:40] *** squashable6 joined
[00:42] *** oneeggeach left
[00:42] *** oneeggeach joined
[00:42] *** monkey__ joined
[01:15] *** monkey__ left
[01:18] *** kvw_5 joined
[01:21] *** kvw_5_ left
[01:22] *** squashable6 left
[01:24] *** Util joined
[01:24] *** mowcat left
[01:24] *** squashable6 joined
[01:30] *** Juerd joined
[01:32] <Juerd> put($x) is almost twice as fast as $x.put; is that expected?

[01:38] <Juerd> (And the whole silly benchmark oneliner is still 10x faster in Perl than Raku with the sub put...)

[01:51] *** [Sno] joined
[01:53] *** sno left
[02:03] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:23] *** perigrin left
[02:23] *** perigrin joined
[02:27] *** vike left
[02:29] *** abraxxa left
[02:31] *** abraxxa joined
[02:34] <moon-child> Juerd: I guess $x.put will have to do a method lookup.  (Though I also think jnthn was working on something to make those faster?)

[02:34] <Juerd> Ah, of course. Makes sense

[02:34] *** abraxxa left
[02:37] *** abraxxa joined
[02:39] <moon-child> aside: would be cursious to see the benchmark

[02:40] <Juerd> time raku -e'for ^10_000_000 { put($_) }' >/dev/null

[02:51] *** bdju left
[02:51] *** bdju joined
[03:10] *** parv joined
[03:20] *** oneeggeach left
[03:23] *** oneeggeach joined
[03:24] <codesections> with that benchmark, 99% of the difference you're seeing between Raku and Perl is the startup time (Perl's startup time rounds to 0; ours is ~100-120ms)

[03:24] <Juerd> Something's really wrong with my raku if the startup time depends heavily on the number of iterations though ;)

[03:25] <codesections> ha, very true it doesn't

[03:26] <Juerd> I'm getting <2 seconds for perl, 18 seconds for raku

[03:26] <Juerd> That 100 ms for startup isn't very relevant in that much of a difference, I'd say

[03:28] *** oneeggeach left
[03:30] <codesections> yeah, very true.  I'm kind of surprised by that, but I was able to reproduce the issue – maybe even more so: I got 19s for $put($_) and 47 for .put

[03:35] *** abraxxa left
[03:38] *** abraxxa joined
[03:51] *** oneeggeach joined
[03:55] *** oneeggeach left
[04:19] *** oneeggeach joined
[04:19] *** oneeggeach left
[04:55] *** summerisle left
[04:56] *** summerisle joined
[04:58] *** parabolize left
[05:02] *** nige joined
[05:11] *** softmoth left
[05:28] *** epony left
[05:29] *** epony joined
[05:45] *** abraxxa left
[05:48] *** abraxxa joined
[06:00] *** mtj left
[06:03] *** mtj joined
[06:23] <summerisle> before i afk - quick picture from the raku-mode syntaxification rewrite project i'm doing: https://i.imgur.com/uhlRUvR.png

[06:32] *** DiffieHellman left
[06:43] *** rindolf joined
[07:04] *** nige left
[07:19] *** donaldh_ joined
[07:21] *** donaldh left
[07:30] *** DiffieHellman joined
[07:31] *** aborazmeh joined
[08:01] *** mahafyi left
[08:11] *** aluaces left
[09:11] *** benchable6 left
[09:11] *** bloatable6 left
[09:11] *** committable6 left
[09:11] *** shareable6 left
[09:11] *** nativecallable6 left
[09:11] *** sourceable6 left
[09:11] *** quotable6 left
[09:11] *** bisectable6 left
[09:11] *** evalable6 left
[09:11] *** greppable6 left
[09:12] *** coverable6 left
[09:12] *** unicodable6 left
[09:12] *** linkable6 left
[09:12] *** squashable6 left
[09:12] *** notable6 left
[09:12] *** statisfiable6 left
[09:12] *** tellable6 left
[09:12] *** releasable6 left
[09:12] *** bisectable6 joined
[09:12] *** sourceable6 joined
[09:12] *** shareable6 joined
[09:13] *** linkable6 joined
[09:13] *** quotable6 joined
[09:13] *** nativecallable6 joined
[09:13] *** committable6 joined
[09:14] *** greppable6 joined
[09:14] *** statisfiable6 joined
[09:14] *** unicodable6 joined
[09:14] *** coverable6 joined
[09:14] *** releasable6 joined
[09:14] *** notable6 joined
[09:14] *** tellable6 joined
[09:14] *** squashable6 joined
[09:14] *** benchable6 joined
[09:14] *** evalable6 joined
[09:15] *** bloatable6 joined
[09:27] *** Sgeo left
[09:33] <lizmat> Juerd codesections put defers to IO::Handle.put

[09:34] <lizmat> Mu.put is much more involved

[09:34] <lizmat> it first needs to find out if the class of the object actually has its own "print" method, and use that

[09:35] <lizmat> and I'm pretty sure that currently does not optimize at all

[09:38] <lizmat> hmmm... actually, it does: wow

[09:38] <lizmat> but the problem is really the lookup of $*OUT for each .put

[09:38] <lizmat> that's at the top taking 1/3 of the CPU

[09:40] <lizmat> encoding takes about 10%

[09:41] *** aborazmeh left
[09:44] <lizmat> BTW, you might want to try my unprint module

[09:44] <lizmat> https://modules.raku.org/dist/unprint:cpan:ELIZABETH

[09:44] <lizmat> $ time raku -e'for ^10_000_000 { put($_) }' >/dev/null

[09:44] <lizmat> real	0m20.817s

[09:44] <lizmat> $ time raku -Munprint -e'for ^10_000_000 { put($_) }' >/dev/null

[09:44] <lizmat> real	0m5.583s

[09:57] *** cosimo left
[10:01] *** cosimo joined
[10:07] <El_Che> it looks like it should be the default? the 80% rule?

[10:09] <lizmat> well, you can't make it the default, because that would break code that modifies $*OUT and friends

[10:12] <El_Che> <insert a breake everything meme here> :)

[10:29] *** wamba joined
[10:30] *** aborazmeh joined
[10:30] <El_Che> maar de beste verbinding in .be is precies 1000/40 ofzo

[10:35] <lizmat> El_Che: ww ?

[10:37] <El_Che> oops

[11:18] *** Black_Ribbon left
[12:12] *** aborazmeh left
[12:35] *** aborazmeh joined
[12:36] <Juerd> lizmat: Don't both $_.put and put($_) both need to lookup that $*OUT then?

[12:38] <Juerd> lizmat: unprint is nice!

[12:39] *** thundergnat joined
[12:40] <thundergnat> m: say $*VM

[12:40] <camelia> rakudo-moar c715b5cbe: OUTPUT: «moar (2021.03.39.gba.124.ad.12)␤»

[12:40] <thundergnat> m: my ($whole, $frac) = < -1000.1 >.split('.'); say $whole.abs;

[12:40] <camelia> rakudo-moar c715b5cbe: OUTPUT: «Can only perform big integer operations on concrete objects␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <thundergnat> ^^^ This only started failing recently.

[12:41] <thundergnat> bisect: old=2021.02 new=HEAD my ($whole, $frac) = < -1000.1 >.split('.'); say $whole.abs;

[12:42] <bisectable6> thundergnat, Bisecting by exit code (old=2021.02 new=a68d257). Old exit code: 0

[12:42] <bisectable6> thundergnat, bisect log: https://gist.github.com/b3b9b96e65699227dd11d95402b81b44

[12:42] <bisectable6> thundergnat, (2021-04-10) https://github.com/rakudo/rakudo/commit/c5057e86adc17c3fcdf400edc6df9d5be3877e87

[12:43] <thundergnat> lizmat ^^^

[12:54] <thundergnat> See #R4315

[13:03] *** abraxxa left
[13:04] *** abraxxa joined
[13:14] *** safinaskar joined
[13:15] <safinaskar> p6: s/[[:space:]]/a

[13:15] <camelia> rakudo-moar a68d2579f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex modifier :space␤at <tmp>:1␤------> 3s/[[:7⏏5space:]]/a␤»

[13:15] <safinaskar> why this doesn't work?

[13:15] <safinaskar> p6: s/[[:space:]]/a/

[13:15] <camelia> rakudo-moar a68d2579f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex modifier :space␤at <tmp>:1␤------> 3s/[[:7⏏5space:]]/a/␤»

[13:28] <thundergnat> safinaskar: For the most part the POSIX regex classes have been replaced with built-in rules. 

[13:29] <safinaskar> i have a big regex written for "grep -E" and "sed -E". how to use it in raku? that regex contains [[:space:]]

[13:29] <safinaskar> p6: s:P5/[[:space:]]/a/

[13:29] <camelia> rakudo-moar a68d2579f: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[13:32] <safinaskar> p6: my $a = " "; say "ok" if $a ~~ s:P5/[[:space:]]/b/

[13:32] <camelia> rakudo-moar a68d2579f: ( no output )

[13:32] <safinaskar> as you can see there is no "ok" output even with :P5

[13:32] <safinaskar> so [[:space:]] is not supported even in :P5 mode?

[13:33] <thundergnat> It doesn't appear so.

[13:33] <thundergnat> m: my $a = "hello world\ngoodbye world"; $a ~~ s:g/<[\h\v]>/a/; say $a

[13:33] <camelia> rakudo-moar a68d2579f: OUTPUT: «helloaworldagoodbyeaworld␤»

[13:33] <thundergnat> You may need to convert it to use a Raku character class.

[13:34] <MasterDuke> P5 mode isn't not 100% feature complete, and it is/was only targeting ~5.10 or something like that

[13:35] <safinaskar> ok, thanks

[13:38] *** safinaskar left
[13:41] *** patrickas joined
[13:42] <patrickas> Hello... when I do the following

[13:42] <patrickas> raku -e '.say for (1..10000)' | head

[13:42] <patrickas> I get an error Failed to write bytes to filehandle: Broken pipe

[13:42] <patrickas>   in block <unit> at -e line 1

[13:42] <patrickas> Unhandled exception: Failed to write bytes to filehandle: Broken pipe

[13:42] <patrickas>    at SETTING::src/core.c/Exception.pm6:568

[13:43] <patrickas> Is that something known? Am I doing something wrong?

[13:43] <patrickas> $ raku -v

[13:43] <patrickas> Welcome to Rakudo(tm) v2021.03.

[13:43] <patrickas> Implementing the Raku(tm) programming language v6.d.

[13:43] <patrickas> Built on MoarVM version 2021.03.

[13:43] *** aborazmeh left
[13:44] <MasterDuke> pretty sure that's a known thing

[13:45] <MasterDuke> https://github.com/rakudo/rakudo/issues/4214 and https://github.com/rakudo/rakudo/issues/3004 seem relevant

[13:45] <patrickas> ok cool... Thanks

[13:48] <thundergnat> bisect: old=2021.02 new=HEAD my $r = trim < 4 >; say $r.abs

[13:48] <bisectable6> thundergnat, Bisecting by output (old=2021.02 new=a68d257) because on both starting points the exit code is 0

[13:48] <bisectable6> thundergnat, bisect log: https://gist.github.com/84dcdd2ed8d2689b968eaf5ecb08198b

[13:48] <bisectable6> thundergnat, (2021-04-10) https://github.com/rakudo/rakudo/commit/ffcda8457dd502babfa006691bade2c3854308da

[14:01] <thundergnat> Issue filed: https://github.com/rakudo/rakudo/issues/4316 

[14:20] *** MitarashiDango[m joined
[14:20] *** wamba left
[14:28] *** wamba joined
[14:33] *** aborazmeh joined
[14:37] *** parabolize joined
[15:08] *** abraxxa left
[15:11] *** abraxxa joined
[15:30] *** domidumont joined
[15:35] *** aborazmeh left
[15:49] *** aborazmeh joined
[16:13] *** ufobat__ joined
[16:13] *** abraxxa left
[16:14] *** aborazmeh left
[16:16] *** abraxxa joined
[16:17] *** softmoth joined
[16:18] *** abraxxa left
[16:24] *** abraxxa joined
[16:36] *** aluaces joined
[16:40] *** |oLa| left
[16:46] *** neshpion joined
[17:06] *** pecastro joined
[17:14] *** ufobat__ left
[17:17] *** softmoth_ joined
[17:19] *** softmoth left
[17:23] *** domidumont left
[17:31] *** nursery joined
[17:33] *** aborazmeh joined
[17:45] *** nursery left
[17:46] *** mowcat joined
[17:47] *** Sgeo joined
[17:47] *** mowcat left
[17:52] *** patrickas left
[18:05] *** b2gills left
[18:12] <demostanis[m]> examples.perl6.org returns Connection timed out, someone should check

[18:13] *** wamba left
[18:15] <codesections> demostanis[m]: I can reproduce the issue (specifically, I get a cloudflare error with the text:  Error 522 Ray ID: 63e630938f9c03ac • 2021-04-11 18:13:35 UTC)

[18:33] *** mowcat joined
[18:33] *** finsternis joined
[18:34] *** mowcat left
[18:37] *** mowcat joined
[18:41] *** mowcat left
[18:42] *** webstrand left
[18:43] *** dataangel left
[18:45] *** mowcat joined
[18:49] *** mowcat left
[18:52] *** mowcat joined
[18:59] *** stoned75 joined
[19:02] *** neshpion left
[19:02] *** neshpion joined
[19:08] <jdv79> leont: i'm not sure what you mean in your comment on #4278

[19:09] <leont> jdv79: TBH, I suspect my analysis is wrong, and I should update my comment

[19:10] <jdv79> ok:)  i was struggling to understand how using signature defaults and coercions in MAIN like that would be "wrong".

[19:11] <jdv79> if there's a better way to "impedance match" the type system to cli args i'm all ears though

[19:25] *** wamba joined
[19:49] *** parv left
[19:54] *** parabolize left
[19:56] *** parabolize joined
[20:05] <Altreus> the PDF::IO::Reader class has only "open" methods, which take either a Str or an IO::Path, but I have a Buf of binary PDF data from an HTTP POST. Can I lie to PDF::IO::Reader by pretending this buf is a file?

[20:07] *** tejr joined
[20:20] <ugexe> i doubt pretending would be sufficient since its almost certainly expecting to use methods a IO::Path has

[20:20] <Altreus> It immediately does $input-path.IO.slurp

[20:21] <ugexe> but does it tomorrow?

[20:21] <ugexe> you get to rely on the type signature, not the implementation details

[20:21] <Altreus> fair enough, but can I make an IO::Path that resolves to a virtual file? :D

[20:23] <ugexe> i dont think so

[20:23] <ugexe> you could use augment but why not just send a PR with a new multi candidate for Bufs

[20:28] *** squashable6 left
[20:31] *** squashable6 joined
[20:34] *** stoned75 left
[20:35] *** b2gills joined
[20:56] *** rindolf left
[21:05] *** abraxxa1 joined
[21:09] *** aborazmeh left
[21:09] *** clarjon1 left
[21:10] *** webstrand joined
[21:41] *** wamba left
[21:45] *** xelxebar left
[21:45] *** xelxebar joined
[22:45] *** evalable6 left
[22:48] *** evalable6 joined
[22:54] *** parv joined
[23:12] *** pecastro left
[23:38] *** abraxxa1 left
[23:39] *** mowcat left
