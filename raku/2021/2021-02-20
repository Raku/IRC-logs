[00:02] <summerisle> oh man, the raku indent rules and lexers are basically 1:1 identical to css-mode

[00:02] <summerisle> honestly, it isn't even indentation that I have the biggest issues with in raku-mode, it's werid fontlock bugs

[00:02] <summerisle> like not realizing that some text is POD

[00:03] <summerisle> until you go mess with it

[00:17] *** rindolf joined
[00:21] *** mowcat joined
[00:54] *** pecastro left
[01:22] *** hythm_ left
[01:36] *** aindilis` left
[01:37] *** aindilis joined
[01:39] *** gordonfish left
[01:40] *** sortiz left
[01:42] *** gordonfish joined
[01:51] *** gordonfish left
[01:51] *** gnufr33dom joined
[01:56] *** gordonfish joined
[01:57] *** guifa left
[01:58] *** guifa2 left
[02:16] *** gordonfish left
[02:33] *** nevore joined
[02:38] *** wamba joined
[02:42] *** gnufr33dom left
[02:45] *** gnufr33dom joined
[02:48] <db48x> really good indentation and syntax highlighting requires writing a full and complete parser for the language

[02:48] *** gnufr33dom left
[02:49] <db48x> most language modes in Emacs don't go that far

[02:50] *** kvw_5_ joined
[02:53] *** kvw_5 left
[02:53] <db48x> or in any editor, for that matter

[02:54] *** mad_hatter joined
[02:54] *** mad_hatter left
[02:55] *** mad_hatter joined
[02:58] *** gnufr33dom joined
[03:01] *** mowcat left
[03:01] *** mowcat joined
[03:07] *** mowcat left
[03:09] *** nevore left
[03:11] *** nevore joined
[03:16] <summerisle> eh, it just needs to be good enough. CPerl mode has good indentation, c-mode has good indentation, and ruby-mode has good indentation

[03:26] *** nevore left
[03:36] *** gordonfish joined
[03:51] *** nevore joined
[04:16] *** nevore left
[04:22] *** nevore joined
[04:24] *** nevore left
[04:25] *** aindilis left
[04:26] *** aindilis joined
[04:33] *** nevore joined
[04:36] *** nevore left
[04:42] *** nevore joined
[04:46] *** nevore left
[04:57] *** wamba left
[05:01] *** marcusr left
[05:02] *** marcusr joined
[05:20] *** guifa2 joined
[05:28] *** Doc_Holliwood joined
[05:43] *** parabolize left
[05:59] *** leont_ left
[06:36] *** aborazmeh joined
[06:41] *** ensamvarg195 joined
[06:41] *** ensamvarg195 left
[06:42] *** ensamvarg joined
[06:56] *** wamba joined
[07:25] *** guifa2 left
[07:38] *** jmerelo joined
[07:59] *** DiffieHellman left
[08:01] *** DiffieHellman joined
[08:09] *** Garbanzo left
[08:12] *** aindilis left
[08:16] <jmerelo> releasable6:status

[08:16] <releasable6> jmerelo, Next release in ≈10 hours. 1 blocker. 22 out of 134 commits logged

[08:16] <releasable6> jmerelo, Details: https://gist.github.com/d5fc22e3b0ac56be09f1c5cd06c0c9da

[08:19] *** ufobat__ joined
[08:30] <jmerelo> The deadline for Google Summer of Code applications has passed, our application is in. You can still propose new projects, or join one as a mentor https://perl-foundation-outreach.github.io/gsoc-2021-ideas/

[08:32] *** Doc_Holliwood left
[08:43] <sena_kun> \o/

[08:43] <sena_kun> jmerelo++

[08:59] *** synthmeat left
[09:00] *** synthmeat joined
[09:00] *** synthmeat left
[09:01] *** synthmeat joined
[09:03] *** aborazmeh left
[09:07] <cetjs2> мяу

[09:17] *** gnufr33dom left
[09:33] *** Scimon joined
[09:52] *** ufobat__ left
[09:59] <jmerelo> sena_kun: let's see if we're luckier this year than last one...

[09:59] <jmerelo> We will know by March 9th.

[10:07] *** aluaces left
[10:07] *** Sgeo left
[10:10] *** bdju left
[10:10] *** bdju joined
[10:14] *** Boo3161 joined
[10:14] *** Boo3161 left
[10:16] *** aborazmeh joined
[10:22] *** natrys joined
[10:30] *** jmerelo left
[10:40] *** linkable6 left
[10:42] *** linkable6 joined
[10:50] *** aluaces joined
[11:04] *** pecastro joined
[11:16] *** Discipulus joined
[11:25] *** aborazmeh left
[11:28] *** Doc_Holliwood joined
[11:29] *** Kaiepi left
[11:32] *** Kaiepi joined
[11:32] *** aborazmeh joined
[11:33] *** Kaeipi joined
[11:33] *** Kaiepi left
[11:44] *** wamba left
[12:10] *** Kaeipi left
[12:10] *** Kaeipi joined
[12:13] *** ab5tract joined
[12:16] *** wamba joined
[12:19] *** leont joined
[12:20] *** Doc_Holliwood left
[12:35] *** aborazmeh left
[12:48] *** aborazmeh joined
[12:54] *** Black_Ribbon left
[12:59] *** squashable6 left
[13:01] *** squashable6 joined
[13:30] *** aborazmeh left
[13:36] <xinming_> releasable6:

[13:36] <releasable6> xinming_, I cannot recognize this command. See wiki for some examples: https://github.com/Raku/whateverable/wiki/Releasable

[13:36] <xinming_> releasable6: help

[13:36] <releasable6> xinming_, status | status link # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Releasable

[13:36] <xinming_> releasable6: status

[13:36] <releasable6> xinming_, Next release in ≈5 hours. 2 blockers. 22 out of 134 commits logged

[13:36] <releasable6> xinming_, Details: https://gist.github.com/cb2e0f63f1bbae674c598eb63a402d66

[13:44] *** xelxebar left
[13:44] *** xelxebar joined
[13:52] *** DiffieHellman_ joined
[13:52] *** DiffieHellman left
[13:55] *** DiffieHellman_ is now known as DiffieHellman

[13:56] *** ab5tract left
[14:11] *** domidumont joined
[14:20] *** Scimon left
[14:20] *** masak_ is now known as masak

[14:21] *** brtastic joined
[14:23] <masak> summerisle: I think I agree with db48x on this one. you kind of need to have a faithful parser to do it right.

[14:24] <masak> well, hm. I guess it depends what losses you consider to be acceptable

[14:25] <masak> there's something to be said for a syntax that's so easy to parse that getting it right is almost automatic. but Perl and Raku were never such languages.

[14:25] <masak> it's hard to be such a language unless you really try. Lisps and Forths often are. maybe Smalltalks too.

[14:43] *** ajdplaysalto joined
[14:44] *** ajdplaysalto left
[14:45] *** aborazmeh joined
[14:51] *** ab5tract joined
[14:54] *** parabolize joined
[14:56] *** domidumont left
[14:57] *** guifa2 joined
[14:57] *** domidumont joined
[15:10] *** ab5tract left
[15:43] *** Doc_Holliwood joined
[15:43] *** wamba left
[15:53] <guifa2> arg

[15:54] *** domidumont left
[15:56] *** domidumont joined
[15:56] <guifa2> when you have sub MAIN (@files, :$extra) { … } you *have* to use "--extra fileA fileB" and can't use "fileA fileB --extra"

[16:03] *** domidumont left
[16:04] *** domidumont joined
[16:20] <codesections> guifa2: is that controlled by :named-anywhere, or is it always true?

[16:21] <guifa2> it's always undefined.  *@files (meant to type the slurpy there) gobbles it up as an array element

[16:21] <guifa2> so `raku script.raku fileA fileB --extra` gives me @files = <fileA fileB --extra>

[16:22] <codesections> Oh, yeah.  I think that's pretty much unavoidable, unless you guess 

[16:23] <codesections> which then gets very bad if you have pathological filenames 

[16:23] <codesections> ./--extra

[16:24] <codesections> (iirc, Python's argparse guesses, which is very nice right until it isn't)

[16:25] *** dataangel joined
[16:25] *** zxcvz joined
[16:28] <guifa2> Yeah, in this case, there's no guess work to worry about, all the real files start with <alpha> ** 2

[16:29] <guifa2> is there any way to control the threading with hyper for @foo { … } ?

[16:29] <codesections> I just meant for argument parsers in general, though

[16:29] <guifa2> @foo.hyper(:1batch, :4degree).map: { … } feels a bit less declarative I guess 

[16:30] <MasterDuke> add an e.g, `.hyper(:4batch)`

[16:30] <xinming_> releasable6: status

[16:30] <releasable6> xinming_, and I oop! Backtrace: https://gist.github.com/9a93ea0796c12b3c26ec9252a6f19152

[16:31] *** wamba joined
[16:31] <AlexDaniel`> interesting?

[16:32] <AlexDaniel`> sena_kun: ↑ do you know why that may be?

[16:33] <AlexDaniel`> or is it just a bug in the bot?

[16:33] <MasterDuke> because https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft has two `New in 2021.02:`?

[16:33] <guifa2> MasterDuke: for serializes HyperSeqs. 

[16:34] <guifa2> m:  my $time = now; for (1..4).hyper(:1batch, :4degree) { sleep 1 }; say now - $time;

[16:34] <camelia> rakudo-moar 3235f3e42: OUTPUT: «4.0098883␤»

[16:35] <MasterDuke> yeah, you need `hyper for`, but then the extra .hyper if you want to set parameters

[16:35] <guifa2> m:  my $time = now; hyper for (1..4).hyper(:1batch, :4degree) { sleep 1 }; say now - $time;

[16:35] <camelia> rakudo-moar 3235f3e42: OUTPUT: «1.070058␤»

[16:35] <guifa2> oooooh

[16:35] <guifa2> the double hyper is … inelegant but it works lol

[16:36] <cetjs2> what do I debugging raku programs?

[16:37] <MasterDuke> there is a debugger. the comma ide makes it a bit easier to use

[16:38] <cetjs2> MasterDuke, What ide for raku is it?\

[16:39] <MasterDuke> https://commaide.com/

[16:54] *** domidumont left
[16:56] <andinus> whats the difference between #= and #| ?

[16:56] <andinus> sub MAIN ( #= doc and #|doc

[16:56] <guifa2> #= sets the doc to the previous declarator

[16:56] <guifa2> #| to the next

[16:57] <andinus> ah i see, what's recommended ?

[16:57] <guifa2> (maybe we should have gone with #← and #↓ haha)

[16:57] <guifa2> I use both actually

[16:57] <guifa2> #| A sub that does X

[16:58] <guifa2> sub foo ( 

[16:58] <guifa2>   $a #= the first

[16:58] <guifa2> $b #= the second

[16:58] <guifa2> ) 

[16:58] <guifa2> + a comma after $a for proper syntax

[16:59] <andinus> hmm this approach looks better

[16:59] <andinus> emacs doesnt re-organize #= properly though, #| it does well

[17:00] <andinus> i mean re-indent

[17:01] <guifa2> At the end of the day, whatever reads cleanest is what's best.  And that can change sometimes for different things

[17:01] <guifa2> grrrr.  $lock.protect: { callsame } seems to call … actually I don't know what it's calling but it's not working :-(

[17:11] <sena_kun> oops

[17:11] <sena_kun> releasable6, status

[17:11] <releasable6> sena_kun, Next release in ≈1 hour. 1 blocker. 134 out of 134 commits logged

[17:11] <releasable6> sena_kun, Details: https://gist.github.com/5fb036b4c4b087ef08d9ec2859cece86

[17:32] *** squashable6 left
[17:33] *** squashable6 joined
[17:41] *** Kaeipi left
[17:42] <codesections> wait, why in the world does IO::Spec::QNX exist?  Was someone putting Raku in a _car_? 

[17:42] * masak .oO( still preferable to putting it in a cdr )

[17:42] <codesections> (If so, they're my kind of crazy)

[17:43] *** Kaiepi joined
[17:45] <masak> m: say "I just realized I don't even remember what 'm:' stands for, and yet it's still ingrained"

[17:45] <camelia> rakudo-moar 3235f3e42: OUTPUT: «I just realized I don't even remember what 'm:' stands for, and yet it's still ingrained␤»

[17:45] *** aborazmeh left
[17:45] <masak> maybe it stands for 'moar'

[17:46] * masak .oO( siempre maz )

[17:48] <tadzik> alpha: say "are you still there?"

[17:48] <tadzik> :')

[17:52] <masak> tadzik \o/

[17:53] <masak> and... what the heck is an alpha? :P

[17:53] <tadzik> masak! \o/

[17:53] <masak> besides the Bad Guy (kinda) in Dollhouse?

[17:53] <tadzik> hmm, maybe I misremember the name. But before nom there was the previous rakudo, and the one before had a grammar engine that did things that the pre-nom rakudo did not, iirc

[17:54] <tadzik> maybe it was called differently

[17:54] <masak> no, that sounds right

[17:54] <tadzik> https://github.com/rakudo/rakudo/tree/alpha

[17:54] <codesections> and nom is New Object Model?

[17:54] <masak> the price of constant progress is premature obsolescence, I guess

[17:54] <masak> codesections: yep

[17:54] <masak> codesections: pro tip: never call anything "new"

[17:54] <tadzik> :P

[17:55] <masak> you'll end up regretting it

[17:55] <tadzik> you can just keep adding -er postfix forever 

[17:55] <codesections> (it took me a while to figure out what a nom_regression was the other day)

[17:55] <tadzik> like with the power efficiency ratings, that go up to A but then there's A+, A++, A+++...

[17:55] <masak> case in point: the "New York Times". should've just gone with the "York Times"

[17:55] <masak> I coulda told them that

[17:55] <codesections> Or more news on the front 

[17:56] <masak> codesections: second series Doctor Who

[17:56] <AlexDaniel`> the actual pro tip is “never change the default branch to something else, wtf”

[17:56] <masak> 19 'New's

[17:56] <codesections> plenty of novels have had a New New York

[17:56] *** aluaces left
[17:56] <masak> AlexDaniel`: ah, you mean like changing `master` to `main`...

[17:56] <tadzik> AlexDaniel`: to be fair these days a valid question is "something else than what?" :>

[17:57] <tadzik> I'm glad I never did my master's degree, that would've been so awkward to rename now

[17:57] * masak .oO( just tell me plain: are you against slavery, or what? )

[17:57] <masak> tadzik: clearly should've been called a "main degree"

[17:57] <codesections> what college is it that has a the New School that's very old?

[17:57] <AlexDaniel`> does github still default to main, or whatever it is?

[17:58] <tadzik> it might. I remember opting in to remaining on 'master'

[17:58] <masak> AlexDaniel`: GitHub, and Git as well

[17:58] <AlexDaniel`> ooooh

[17:58] <tadzik> hmm

[17:58] <masak> it's a fairly wide-reaching change

[17:58] <AlexDaniel`> interesting

[17:58] <masak> I'm actually not opposed to it as much as... rolling my eyes

[17:58] <masak> look

[17:58] <AlexDaniel`> if they called it “develop” it would've been a bit easier :')

[17:58] <tadzik> my git creates 'master' but warns

[17:59] <tadzik> hint: Using 'master' as the name for the initial branch. This default branch name is subject to change.

[17:59] <masak> tadzik: ah, that might be it. about to change.

[17:59] <codesections> it seems like an easy enough default to change for new repos

[17:59] <AlexDaniel`> new repos.

[17:59] <masak> here's the thing. I believe in not making people uncomfortable. needlessly.

[18:00] <tadzik> I'm glad that will never be a problem for me

[18:00] <AlexDaniel`> tadzik: haha

[18:00] <codesections> (I went ahead and changed my default for creating new ones)

[18:00] <tadzik> because since github uses the world "collaborator", and in my cultural circle "collabolator" historically means "collaborates with nazis" so I cannot be a github collaborator without my ancestors rolling in their graves

[18:00] <masak> I'm even fine with staying away from using words that tend to make people uncomfortable.

[18:01] <masak> ok, tadzik is faster on the trigger :)

[18:01] <tadzik> I've practiced this rant :P

[18:01] <masak> tadzik: you sir, are an enabler. shame on you :P

[18:02] * masak .oO( if your ancestors were alive right now, they'd be rolling in their graves )

[18:02] <tadzik> :o

[18:02] <AlexDaniel`> nah, I don't mind at all, let it be main. It's just that changing it for existing repos is hard, and having both at the same time in different repos is annoying because muscle memory and ctrl+r

[18:03] <codesections> m: { say now - ENTER now }

[18:03] <camelia> rakudo-moar 3235f3e42: OUTPUT: «0.00073259␤»

[18:03] <masak> AlexDaniel`: I'm even willing to let my muscle memory take a hit if it genuinely makes some people of color less uncomfortable in IT

[18:03] <masak> but I am a little bit sad it had to come to this

[18:04] <codesections> my muscle memory is honestly m<TAB> anyway

[18:04] <masak> something about it feels more like "pattern matching" and less like solving genuine issues, if you see what I mean

[18:04] <tadzik> I honestly find it hard to believe that this is anything else than virtue signalling

[18:04] <AlexDaniel`> it'd also be a constant reminder for the next 10 years if not more :)

[18:05] <tadzik> a culture that never dealt with their racist past (and present!) and so it resorts to empty gestures to pretend that they're trying

[18:05] <codesections> m: sub foo() { say now - ENTER now }; foo

[18:05] <camelia> rakudo-moar 3235f3e42: OUTPUT: «0.0007199␤»

[18:05] <AlexDaniel`> codesections: what? m<TAB> expands into `git switch main`? how is that possible?

[18:05] <masak> tadzik: even giving it the benefit of the doubt, it feels like mostly an empty gesture. the only thing about words is that they're common goods, so it's something everyone can join in on

[18:06] <AlexDaniel`> codesections: ctrl+r mai on the other hand does, depending on your usage

[18:06] <codesections> no, git switch m<tab>

[18:06] <AlexDaniel`> yes but you really want to type git switch?

[18:06] <AlexDaniel`> :)

[18:06] <AlexDaniel`> that's the point

[18:06] <codesections> or, really, git co m<tab>, because I have an alias

[18:06] <masak> just do what TimToady does, create a lot of one-letter aliases

[18:07] <AlexDaniel`> nah, just use ctrl+r, it's essentially dynamic aliases

[18:07] <codesections> or magit 

[18:07] <masak> TimToady: when you're around, I have a question about unquotes and parsing

[18:08] <AlexDaniel`> ctrl+r is all commands you have used in your lifetime, not just git :P

[18:08] <masak> AlexDaniel`: I've often said -- repeatedly -- that if I ever give a course on bash, it'll just be 2 days of constant repetition of the Ctrl+R key binding

[18:08] <tadzik> :)

[18:08] <AlexDaniel`> and then a week telling people to quote stuff, and they still won't

[18:08] <codesections> yes, I know what Ctrl-r is

[18:09] <masak> I figure I'd have time to go through it about 300 times in 2 days

[18:09] <codesections> and what fzf is

[18:09] <codesections> and other history search options

[18:09] <codesections> none have really grabed me, though

[18:09] <masak> that's allowing for breaks

[18:10] <AlexDaniel`> codesections: do you have infinite history set up?

[18:10] <AlexDaniel`> could be the reason why

[18:11] <AlexDaniel`> without it ctrl+r is pretty useless

[18:11] <codesections> I don't think I do atm.  I have in the past

[18:11] <masak> disagree. I don't have infinite history, and Ctrl+R is still very useful.

[18:12] <codesections> I also have fish-style history-based auto complete, which plays a similar role

[18:12] <codesections> (though I don't actually use fish)

[18:13] <masak> about quoting stuff: bash is clearly a dead end, but it just so happens to be "worse is better" good enough

[18:13] <masak> so.. though

[18:13] <masak> I've seen some pretty impressive alternatives be proposed. none of them will ever catch on.

[18:14] <masak> the people who care will use something like fish. they will always be in a minority.

[18:14] <masak> I think if I could be bothered, I would use something like a Scheme shell instead of bash

[18:14] *** aborazmeh joined
[18:14] <masak> https://scsh.net/

[18:15] <codesections> yeah.  But, I mean, I use yash, emacs/eshell, void linux, ... and raku.  I'm pretty ok with tech choices that put me in the minority 

[18:15] <masak> sure. but that wasn't my point.

[18:16] <masak> I'm ok with such tech choices too.

[18:16] <masak> I'm one of the few Bel users in the world :P

[18:16] <codesections> (there's also the guile shell, gash)

[18:16] <masak> and yes, I do use Emacs regularly, and I enjoy Linux. considering BSD.

[18:17] <masak> I want to write a GUI-based shell for Bel just so that I can use it on my Android phone

[18:17] <codesections> wait, the paul graham lisp Bel?  I didn't know there was an implementation 

[18:17] <masak> I have some good news for you today, sir

[18:17] <tadzik> :)

[18:17] <masak> or madam

[18:18] <masak> https://github.com/masak/bel/

[18:18] <tadzik> masak: I'd argue zsh has caught on really well as a bash alternative

[18:18] <tadzik> with some niche distros shipping it as a default too

[18:18] <masak> codesections: basically feature-complete

[18:18] <masak> slow as all that, but I have a plan. it involves compilation.

[18:18] <masak> tadzik: well, yes

[18:19] <masak> tadzik: for all the good that does it

[18:19] <masak> tadzik: zsh is the Linux of shells :P

[18:19] <masak> technically very dominant, but still very much a hidden number two

[18:19] <db48x> masak: some languages are certainly easier to parse

[18:20] <perry> I was a former zsh fan, but I gotta say I like fish better now.

[18:20] <masak> ok, so we're doin' this

[18:20] <tadzik> fish is the nixos of shells :P

[18:20] <tadzik> or whatever

[18:20] * masak .oO( nixos...? )

[18:21] <perry> Look, I don't need POSIX compliance in my daily shell, dangit!

[18:21] <codesections> masak very interesting!  I remember Paul Graham saying his goal with Bel was to let people write as concisely as possible.  how's it compare to Raku?

[18:21] <masak> codesections: I gotta tell you

[18:21] *** brtastic left
[18:21] <masak> codesections: I was super-stoked since the day this came out, man

[18:21] <masak> codesections: I still think there's something in there, something genuinely interesting

[18:22] <masak> what pg wants to do is to _widen_ the metacircular loop, to include not just the evaluator, but the reader, printer, even the numeric tower

[18:23] <masak> the problem is that "layers of abstraction" == slow

[18:23] <masak> which is why you need compilation

[18:24] <masak> codesections: to answer your question more directly, Bel is still mostly untested

[18:24] <masak> codesections: I've come to realize that I thrive with languages that are in the "early alpha" stage, like Bel is now, or like Raku was back in 2008

[18:25] <masak> where there's lots of potential, and most of the energy goes into finding ways to realize that potential

[18:25] <masak> people like jnthn are much better at the "late beta" stage, where you need to commit to the long haul and build a VM or something :)

[18:26] <codesections> :)

[18:27] <masak> as part of my semi-involuntary research into PL history in 2020, I've found that basically all the Scheme people built a VM

[18:27] <masak> because that's what you do

[18:28] <masak> Bel is more of a Scheme in denial than a Lisp, I'd say

[18:28] <masak> well. it's a Scheme with gensyms.

[18:28] <codesections> but, setting aside the "stage" issue, I'm fascinated by Bel vs Raku because both languages prioritize expressiveness, pretty much above all else.  But Bel wants to get there through minimalist syntax, Raku through maximalist 

[18:29] <db48x> how does it put the reader and printer into the metacircular loop?

[18:30] <masak> codesections: this is true. but the difference might be smaller than you think. I don't see Bel as being all that minimalist in the _amount_ of built-ins -- only in the token length of their definitions.

[18:30] <masak> db48x: the reader and printer are the easy ones.

[18:30] <masak> db48x: it's the evaluator that's a bother to bootstrap :P

[18:30] <codesections> like you, I was *very* excited by Bel when it first came out (in fact, I'm actually still squatting on the r/bellang subreddit, which I should probably transfer at some point...)

[18:30] <masak> codesections: didn't even know there was a subreddit

[18:31] <codesections> there isn't

[18:31] <masak> codesections: I believe at this point I'm in possession of the most complete implementation. but I still want to make it fast.

[18:31] <codesections> I just registered the name, but never did anything with it

[18:32] <masak> codesections: there's been precious little interest in Bel from both HN and the Arc forum

[18:32] <masak> codesections: if you want to team up and do something... let me know

[18:32] <codesections> masak: but re syntax, I'm not talking about builtins, so much as number of operators.

[18:32] <masak> codesections: please be more specific

[18:32] <masak> I'm definitely in a position to understand your point

[18:34] <codesections> Raku uses every key on the keyboard other (other than `) and has fairly baroque precedence rules to let you combine them in all sorts of ways (plus things like circumflex, etc)

[18:34] <masak> codesections: by the way, I'm kind of squatting the https://github.com/bel-language organization. I want to put some documentation there.

[18:34] <masak> oh yeah. point taken.

[18:35] *** gnufr33dom joined
[18:35] <masak> "circumfix", but yes :)

[18:35] <codesections> ha, thanks 

[18:35] <db48x> oh, I see; all of those items are self-hosted

[18:35] <masak> well, Lisp ditches precedence/associativity right out of the gate

[18:36] <codesections> yeah

[18:36] <masak> that's what the parentheses are about, in the end. they're about explicitly delimiting expressions.

[18:36] <codesections> or enforces it super strongly, depending on your POV

[18:36] <masak> it's not that you couldn't do it with precedence; it's just that it's a fairly ingrained not-default

[18:36] <masak> right

[18:37] <masak> I think what you should focus on is the liberal stance Lisps have towards what can go into a symbol

[18:37] <codesections> right.  But the perl/raku take is that you can be a lot more expressive when you can change word order

[18:37] <masak> like, if you have something like a * in Raku, the parser goes "ah! that must be an operator!"

[18:37] <masak> but in Scheme, and Bel, it's just a symbol

[18:38] <codesections> fair

[18:38] <masak> the only vaguely Algol-like language I know which got that brilliant idea from Lisp, is Dylan

[18:38] <masak> we should all write more Dylan code :)

[18:40] <masak> codesections: I dunno about "change word order". one thing I've been struggling with, both during my Alma phase (2014-2019) and my current Bel phase (2019-) is that in languages like Raku, a lot of effort is spent on "syntax"

[18:41] <masak> and Lisp doesn't really have that kind of thing, it just has nested lists, basically.

[18:41] <codesections> yeah

[18:41] <masak> in Bel, you can write an entire `if` statement without degrading yourself with baroque keywords like `else` or `else if`

[18:41] <masak> it's basically all just argument order

[18:41] <codesections> that's kind of what I mean by maximalist vs minimalist approach to syntax 

[18:42] <masak> and that just makes things a whole lot easier -- seemingly -- for macros to act on the code

[18:42] <codesections> both are firmly convinced that there way will lead to the most expressive, concise code

[18:42] <codesections> but they're opposite! 

[18:43] <masak> it doesn't help that I've recently found Kernel, and I kind of like that approach very much too. but Kernel is just so entirely different from basically everything that it's hard to know how to even relate it to the rest

[18:43] *** eseyman left
[18:44] <masak> codesections: well, I can say this with some confidence: if you opt for the Raku/Alma approach to ASTs, you'll end up with some kind of object-oriented AST API, and it's definitely a bit more complex than just S-expressions

[18:44] <masak> for better and worse

[18:44] <masak> you can mitigate, sure, to a point

[18:45] <masak> but you won't ever compete with the utter simplicity of nested lists

[18:45] <codesections> yeah.  That's true

[18:45] <guifa2> https://stackoverflow.com/questions/66295222/lock-protect-and-callsame <-- fun new SO question 

[18:46] *** eseyman joined
[18:46] *** Sgeo joined
[18:47] <masak> codesections: quasiquoting helps a bit, too. then you can "just write code" instead of describing it indirectly.

[18:47] <masak> but in a way, that's still hiding complexity instead of reducing it.

[18:48] <codesections> indeed.  But Raku will get quasiquoting (and probably soon, with the AST work, right?)

[18:48] <masak> for example, in Alma/Raku (unlike in Lisps) interesting questions arise about what the relative precedence/associativity is of an unquote

[18:49] <masak> m: macro moo($x) { quasi { {{{$x}}} } }; say moo(42)

[18:49] <camelia> rakudo-moar 3235f3e42: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Use of macros is experimental; please 'use experimental :macros'␤at <tmp>:1␤------> 3macro7⏏5 moo($x) { quasi { {{{$x}}} } }; say moo␤»

[18:49] <masak> m: use experimental :macros; macro moo($x) { quasi { {{{$x}}} } }; say moo(42)

[18:49] <camelia> rakudo-moar 3235f3e42: OUTPUT: «42␤»

[18:49] <masak> codesections: yes. :)

[18:49] <masak> implemented, by me, around 2012.

[18:50] <masak> what it will get soon, hopefully, is proper hygiene.

[18:50] <codesections> yeah.  Which helps a lot

[18:50] <masak> spearheaded by Alma in 2015-2019.

[18:51] <codesections> most of the macros I've written have been in Racket or Rust

[18:51] <codesections> (basically the same macro system)

[18:51] <masak> much of taht hygiene actually works in Alma today.

[18:51] <masak> that*

[18:51] <masak> the other day I realized that most of it comes down to "respect static bindings"

[18:51] <masak> Raku happens to have static bindings. not every language does

[18:52] <masak> and so macros need to preserve those. occasionally that means putting variables through unusual contortions.

[18:52] <codesections> yeah.  I really think it'll be _possible_ for us to build a truly top-notch macro system 

[18:53] <masak> agreed.

[18:53] <masak> jnthn has been doing some impressive groundwork there, too. keeping his eye on the ball.

[18:53] <codesections> yep

[18:54] <masak> Alma is a little bit more of a "research project". unfettered by in-production concerns, more thinking about what's possible.

[18:55] <codesections> yeah.  That's part of what draws me to Raku -- it has _really_ lofty goals _without_ being a research project

[18:57] <masak> I'm a synopses guy, and (I guess) an apolcalypses guy. I see a really marvellous vision in there, one that's still unrealized in some ways.

[18:57] *** sortiz joined
[18:57] <masak> the clearest part of that (to me) is that, in order to really be a 100-year language, Raku, needs to be syntax-entensible.

[18:57] <codesections> yeah.  Getting closer every $time-period, though, hopefully 

[18:57] <masak> that means not just macros, but slangs too.

[18:58] <codesections> agreed.

[18:58] <masak> and extensible grammars, and meta-circular grammars.

[18:58] <codesections> the foundations seem to be there for slangs

[18:58] <masak> Alma is kind of the vanguard of that vision.

[18:58] <codesections> more so than Racket/PLT? 

[18:58] <masak> haha

[18:59] <masak> Alma is definitely the closest thing to Racket, starting from Raku

[18:59] <masak> not sure how close it gets in practice ;)

[18:59] <masak> I always feel I should spend more effort looking into Racket

[19:00] <masak> I think the biggest inspiration I've taken from Racket so far into Alma is that... a "slang" is something temporary, that you can snap back out of, but a "lang" is permanent, for the rest of the compunit

[19:01] <codesections> ooh, interesting 

[19:02] <codesections> oh, I need to step away for a bit.  Very interesting chat, though -- thanks :)

[19:02] <masak> talk soon :)

[19:02] * masak sleeps

[19:08] *** zxcvz left
[19:08] *** zxcvz joined
[19:15] *** Black_Ribbon joined
[19:17] *** mowcat joined
[19:35] *** Doc_Holliwood left
[19:40] *** zxcvz left
[19:40] *** MasterDuke left
[19:44] *** Doc_Holliwood joined
[19:55] *** rindolf left
[19:57] <El_Che> lizmat: there?

[19:57] <lizmat> yes, I'm here

[20:00] <El_Che> I posted the question in #raku-dev

[20:00] <El_Che> regarding your answer to a post on reddit regarding a bug

[20:02] *** mowcat left
[20:11] *** Kaiepi left
[20:11] *** natrys left
[20:13] *** Kaiepi joined
[20:29] *** brtastic joined
[20:33] *** berber44 left
[20:40] *** faisal_javed joined
[20:46] *** faisal_javed left
[20:55] *** aluaces joined
[21:13] *** brtastic left
[21:20] *** Kaeipi joined
[21:20] *** Kaiepi left
[21:22] *** Kaeipi left
[21:23] *** Kaeipi joined
[21:24] *** Kaeipi left
[21:34] *** kerframil joined
[21:44] *** wamba left
[21:44] *** silug joined
[21:52] *** mowcat joined
[21:53] *** marcusr left
[21:54] *** marcusr joined
[21:59] *** gnufr33dom left
[22:01] *** MasterDuke joined
[22:07] *** Geth joined
[22:13] *** Doc_Holliwood left
[22:31] *** brtastic joined
[22:44] *** Discipulus left
[22:59] *** brtastic left
[23:19] *** mowcat left
[23:20] *** mowcat joined
[23:23] *** mowcat left
[23:23] *** mowcat joined
[23:37] *** tejr left
[23:38] *** japhb left
[23:38] *** DiffieHellman left
[23:40] *** DiffieHellman joined
[23:41] *** tejr joined
[23:42] *** brtastic joined
[23:45] *** tejr left
[23:46] *** tejr joined
[23:46] *** aborazmeh left
[23:57] *** aindilis joined
