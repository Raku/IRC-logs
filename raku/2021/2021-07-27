[00:02] *** reportable6 left
[00:46] *** Henry151 is now known as NotHenry151

[00:47] *** NotHenry151 is now known as Henry151

[00:50] *** frost joined
[00:56] *** frost left
[01:04] *** reportable6 joined
[01:58] *** phogg left
[02:39] *** frost joined
[02:54] *** frost left
[03:54] *** unicodable6 left
[03:54] *** reportable6 left
[03:54] *** bisectable6 left
[03:54] *** linkable6 left
[03:54] *** tellable6 left
[03:54] *** squashable6 left
[03:54] *** evalable6 left
[03:54] *** sourceable6 left
[03:54] *** greppable6 left
[03:54] *** releasable6 left
[03:54] *** bloatable6 left
[03:54] *** shareable6 left
[03:54] *** notable6 left
[03:54] *** nativecallable6 left
[03:54] *** coverable6 left
[03:54] *** quotable6 left
[03:54] *** statisfiable6 left
[03:54] *** benchable6 left
[03:54] *** committable6 left
[03:54] *** squashable6 joined
[03:54] *** unicodable6 joined
[03:54] *** reportable6 joined
[03:55] *** quotable6 joined
[03:55] *** statisfiable6 joined
[03:55] *** notable6 joined
[03:55] *** greppable6 joined
[03:56] *** tellable6 joined
[04:46] *** Tirifto left
[04:49] *** Tirifto joined
[04:54] *** releasable6 joined
[04:55] *** evalable6 joined
[04:55] *** sourceable6 joined
[04:55] *** linkable6 joined
[04:55] *** shareable6 joined
[04:57] *** bloatable6 joined
[05:20] *** Doc_Holliwood joined
[05:54] *** coverable6 joined
[05:55] *** benchable6 joined
[05:56] *** committable6 joined
[05:56] *** bisectable6 joined
[06:02] *** Sgeo left
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:19] *** Doc_Holliwood left
[06:20] *** Eddward_ left
[06:20] *** Doc_Holliwood joined
[06:21] <mykhal> gfldex: timtowdi, howewer requirement was rather to avid variables, than to have "this"

[06:24] *** Doc_Holliwood left
[06:26] <mykhal> .. s/avid/avoid/

[06:54] *** nativecallable6 joined
[07:05] *** nahita joined
[07:10] *** ufobat joined
[07:50] *** dakkar joined
[08:11] <nahita> hi! i wonder why `+flat $(12, 84)` gives 2 but not 1... 

[08:12] <nahita> m: say +flat $(12, 84);

[08:12] <camelia> rakudo-moar 74d7ff771: OUTPUT: «2␤»

[08:13] <nahita> m: .say for flat $(12, 84)

[08:13] <camelia> rakudo-moar 74d7ff771: OUTPUT: «12␤84␤»

[08:50] *** linkable6 left
[08:50] *** evalable6 left
[08:50] *** linkable6 joined
[08:50] <mykhal> nahita: hi. i wonder why would you expect 1. List in numeric context gives its length

[08:56] <nahita> I expected it not to be flattened since it's itemized and therefore gave 1. 

[08:57] <nahita> m: .say for flat ($(12, 84),)

[08:57] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[08:58] <nahita> `flat` respects it when in a list but why not above?

[09:01] <mykhal> i probably miss something

[09:01] <mykhal> m: say $(12, 84).elems

[09:01] <camelia> rakudo-moar 74d7ff771: OUTPUT: «2␤»

[09:02] <nahita> m: .say for $(12, 84)

[09:02] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[09:04] <nahita> m: .say for ($(12, 84),)

[09:04] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[09:05] <mykhal> so you see

[09:05] <nahita> no :)

[09:05] <mykhal> m: say ((1, 2), 3).flat

[09:05] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(1 2 3)␤»

[09:07] <mykhal> m: say ($(1, 2), 3).flat

[09:07] <camelia> rakudo-moar 74d7ff771: OUTPUT: «((1 2) 3)␤»

[09:08] <mykhal> interesting.

[09:08] <mykhal> m: say $(1, 2).^name eq (1, 2).^name

[09:08] <camelia> rakudo-moar 74d7ff771: OUTPUT: «True␤»

[09:09] <mykhal> well, ok, it's somewhat more complicated than i thoughtd, will comment no more :)

[09:09] *** Manifest0 left
[09:11] *** Manifest0 joined
[09:15] <mykhal> .. only that i think its meant not to flatten being item, not a whole "container"

[09:19] <mykhal> m: say ( +flat( [1, 2] ),  +flat( [[1, 2], 3] ) )

[09:19] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(2 2)␤»

[09:33] <nahita> not sure I follow *"its meant not to flatten being item, not a whole "container"*; can you please elaborate?

[09:35] <mykhal> "When you have a list that contains sub-lists, but you only want one flat list, you may flatten the list to produce a sequence of values as if all parentheses were removed. This works no matter how many levels deep the parentheses are nested.", from docs. It's talking about sub-lists

[09:39] <nahita> I see; but itemized sublists are immune to flattening, right? But behaviour seems to change when passed directly to `flat` as `flat $(12, 84)` and I'm unable to see why...

[09:52] *** evalable6 joined
[09:54] <mykhal> it does not treat the same the outer list-ish, "Interprets the invocant as a list, flattens non-containerized Iterables into a flat list, and returns that list."

[09:55] <mykhal> i wouldn't like/expect flatteing [[1, 2], 3] to ( [[1, 2], 3], )

[09:59] <mykhal> but frankly i initially wouldn't expect different treatment of innter list vs arrays as well :)

[10:12] <nahita> So it first calls `.List` on the argument and then flattens?

[10:13] <nahita> (or `.list`; i don't know the difference)

[10:22] *** Kaipi joined
[10:24] *** Kaiepi left
[10:30] <mykhal> nahita: something like that.. if it's an iterable, it iterates it, Iterable.pm6: method flat(Iterable:D:) { Seq.new(Rakudo::Iterator.Flat(self.iterator)) }

[10:30] *** olve__ left
[10:31] *** Olve_ left
[10:32] <nahita> Thx; I also reached that and Rakudo::Iterator.Flat has some nqp stuff that I don't understand. What confuses me is:

[10:32] <nahita> m: .say for $(12, 84)

[10:32] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[10:32] <nahita> iterates once...

[10:33] <mykhal> i can see 2 elems

[10:33] <lizmat> but they're in a container  :-)

[10:33] <lizmat> m: .say for (12,84)

[10:33] <camelia> rakudo-moar 74d7ff771: OUTPUT: «12␤84␤»

[10:33] <lizmat> m: .say for $(12,84)

[10:33] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[10:33] <lizmat> well, I should say, they're itemized

[10:34] <mykhal> i thout we were talking about the outer iterable

[10:36] <mykhal> these items ate treated different weay than the original iterable

[10:38] * mykhal did not notice lizmat speaking now

[10:38] <nahita> I understand/expect `.say for $(12, 84)` to iterate once. What I don't understand/expect is why `.say for flat $(12, 84)` iterates twice but not once? How can `flat` flattens an itemized list?

[10:39] <lizmat> that's the idea of flat ?

[10:39] <nahita> But it respects when `$(12, 84)` is in a list

[10:40] <nahita> m: .say for ($(12, 84),)

[10:40] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[10:41] <nahita> m: .say for flat ($(12, 84),)

[10:41] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12 84)␤»

[10:43] <mykhal> m: say $(12, 84).raku;  say ($(12, 84),).raku

[10:43] <camelia> rakudo-moar 74d7ff771: OUTPUT: «$(12, 84)␤($(12, 84),)␤»

[10:44] <mykhal> crap

[10:44] <mykhal> m:  say $(12, 84).flat.raku;  say ($(12, 84),).flat.raku

[10:44] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(12, 84).Seq␤($(12, 84),).Seq␤»

[10:47] <mykhal> consistent, if one does not expect flat to be classical recursive function

[10:47] <nahita> it is recursive though, isn't it

[10:49] <mykhal> yes, but starting in top of items, not the whole arg

[10:49] <mykhal> .. but that is also misleading statement

[10:53] *** sena_kun joined
[11:10] <mykhal> it does recursively flatten the items, but flat is not flatten

[11:13] <mykhal> and Raku is not Haskell :)

[11:35] *** holyghost left
[11:50] *** alex16 joined
[11:50] <alex16> Uploaded file: https://uploads.kiwiirc.com/files/232a733b2418a8b0bd1550b1cfd4ba3f/Screenshot_2021-07-27-18-29-13-16.png

[11:50] <alex16> Help brother 

[11:55] <MasterDuke> alex16: it looks like whatever os your phone is running doesn't have the dev package for openssl. i don't know if there's a way to exclude packages and/or modules with rstar, but you could always just install rakudo by itself, then manually install zef + modules

[11:58] *** alex16 left
[11:59] *** alex79 joined
[12:00] <alex79> Help me failed build

[12:00] <alex79> Uploaded file: https://uploads.kiwiirc.com/files/889fcc5dac2b74a4beab50a7552768de/pasted.txt

[12:00] <MasterDuke> alex79: i'd suggest downloading https://rakudo.org/dl/rakudo/rakudo-2021.07.tar.gz instead of rakudo-star and trying that first

[12:00] <alex79> Android 6.0 aarch64

[12:01] <MasterDuke> people have built rakudo on other aarch64 systems (e.g., rpi4), so it's likely possible

[12:02] <MasterDuke> you'll probably need something like `apt install build-essentials` first (i don't know what the actual package name is)

[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:07] *** Doc_Holliwood joined
[12:08] <alex79> what is the command to install it, I have extracted the file?

[12:09] <MasterDuke> something like `perl Configure.pl --backends=moar --gen-moar --make-install`

[12:10] <MasterDuke> you can add a `--prefix=path/to/somewhere` if you want to install it to a particular directory

[12:16] <alex79> fatal: not in a git directory

[12:20] <MasterDuke> but it should still start building, right?

[12:23] <alex79> currently installing moarvm

[12:23] *** Doc_Holliwood left
[12:24] *** Doc_Holliwood joined
[12:25] <alex79> MasterDuke currently installing moarvm

[12:26] <MasterDuke> it'll probably take a while

[12:26] <alex79> Updating submodules .................................... warning: Cannot protect .git/config on this file system - do not store sensitive information here.

[12:27] <alex79> Uploaded file: https://uploads.kiwiirc.com/files/fc647552dad7338d7582ad980a861571/pasted.txt

[12:27] <alex79> How? 

[12:31] <Util> alex79: Sanity check - Are you able to create+compile+run a C program in the directories where you are trying to build Rakudo?

[12:31] <Util> Good example to try: http://rosettacode.org/wiki/Hello_world/Newbie#C

[12:34] *** Eddward_ joined
[12:42] *** alex79 left
[12:45] *** Eddward_ left
[12:45] *** alex67 joined
[12:46] <alex67> MasterDuke How? 

[12:47] *** alex67 left
[12:49] *** alex80 joined
[13:20] <alex80> someone help me how to install rakudo in termux i've been trying since morning looking for a solution

[13:35] *** alex80 left
[13:35] *** alex67 joined
[13:35] *** alex67 left
[13:38] *** rypervenche joined
[13:38] *** justsomeguy joined
[13:56] *** codesections left
[14:03] *** Doc_Holliwood left
[14:32] *** Doc_Holliwood joined
[14:35] <tonyo> does your excellent termux have perl?

[14:40] <MasterDuke> i was helping them a bit, i believe their latest problem is that where they were trying to build was mounted noexec

[14:50] *** codesections joined
[14:51] *** Sgeo joined
[14:56] *** RandalSchwartz joined
[15:30] *** ufobat left
[15:50] <nahita> mykhal: if it's already flat, `flat` doesn't flatten in effect yes. But `$(12, 84)` isn't flat on its own, right? And it also doesn't get flatten if it is an element of a list instead of directly supplying to `flat`.

[16:05] <nahita> s/isn't flat on its own/is flat on its own/ 

[16:10] *** Doc_Holliwood left
[16:16] *** gordonfish- joined
[16:16] *** nahita left
[16:16] *** Oshawott left
[16:16] *** gordonfish left
[16:17] *** Oshawott joined
[16:24] *** RandalSchwartz left
[16:25] *** kylese joined
[16:49] *** dakkar left
[16:58] <mykhal> tonyo: my termux (not sure if excellent) has perl 5.34. after installing perl.

[17:01] <tonyo> what's the output of running the perl Configure.pl stuff in the readme?

[17:28] *** m_athias left
[17:34] *** kylese left
[17:42] *** swaggboi left
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:06] *** swaggboi joined
[18:07] *** gordonfish- is now known as gordonfish

[18:09] *** swaggboi left
[18:11] *** sena_kun left
[18:14] *** swaggboi joined
[18:50] *** Doc_Holliwood joined
[19:22] *** justsomeguy left
[19:45] *** Summer joined
[19:46] <Summer> is doing /<$userinput>/; equiv to doing an eval on user input, in terms of potential damage?

[19:48] <gfldex> m: my $input = '{ say "hello haxor!" }'; say 'ohai' ~~ /<$input>/;

[19:48] <camelia> rakudo-moar 74d7ff771: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Prohibited regex interpolation (use the MONKEY-SEE-NO-EVAL pragma to␤override this error but only if you're VERY sure your data contains no␤injection attacks).␤at /home/camelia/EVAL…»

[19:48] <gfldex> Summer: not quite on its own

[19:49] *** tejr left
[19:49] <Summer> thats fairly neato

[19:49] *** tejr joined
[20:23] *** polettix left
[20:23] *** polettix joined
[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: 1f990b6fed | (Trey Harris)++ (committed using GitHub Web editor) | doc/Language/py-nutshell.pod6

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: py-nutshell: Add how to enumerate in iteration

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: 

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: Resolves #3924.

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: 

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: Modified from suggestion in issue to include `kv()`’s other use case in maps,

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: matching Python’s `dict.items()`.

[20:41] <Geth> ¦ doc/py-nutshell-enumerate-patch: review: https://github.com/Raku/doc/commit/1f990b6fed

[20:42] <Geth> ¦ doc: treyharris++ created pull request #3925: py-nutshell: Add how to enumerate in iteration

[20:42] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3925

[21:25] *** evalable6 left
[22:25] *** linkable6 left
[22:28] *** linkable6 joined
[22:28] *** evalable6 joined
[23:22] <japhb> tbrowder: JSON::Hjson added as a decoder-only module to https://github.com/japhb/serializer-perf -- it's a lot slower than JSON::Fast at decoding the JSON subset of Hjson, but that's to be expected from JSON::Hjson's idiomatic Grammar-driven design; probably would be more fair to compare to JSON::Tiny than JSON::Fast.

[23:23] <japhb> (Where "a lot slower" was 5-30x slower on my particular JSON test cases.)

[23:26] <tbrowder> japhb: thanks, and i'm not surprised. i do find it useful for config files.

[23:28] *** linkable6 left
[23:28] *** evalable6 left
[23:29] *** linkable6 joined
