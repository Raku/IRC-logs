[00:01] *** chrysanthematic joined
[00:02] *** reportable6 left
[00:03] *** jess joined
[00:03] *** reportable6 joined
[00:04] *** chrysanthematic left
[01:04] *** nativecallable6 left
[01:04] *** bloatable6 left
[01:04] *** evalable6 left
[01:04] *** benchable6 left
[01:04] *** notable6 left
[01:04] *** reportable6 left
[01:04] *** squashable6 left
[01:04] *** unicodable6 left
[01:04] *** greppable6 left
[01:04] *** linkable6 left
[01:04] *** shareable6 left
[01:04] *** releasable6 left
[01:04] *** tellable6 left
[01:04] *** coverable6 left
[01:04] *** bisectable6 left
[01:04] *** quotable6 left
[01:04] *** committable6 left
[01:04] *** sourceable6 left
[01:04] *** statisfiable6 left
[01:05] *** sourceable6 joined
[01:05] *** quotable6 joined
[01:05] *** bisectable6 joined
[01:05] *** shareable6 joined
[01:05] *** coverable6 joined
[01:05] *** notable6 joined
[01:05] *** releasable6 joined
[01:05] *** greppable6 joined
[01:06] *** nativecallable6 joined
[01:06] *** squashable6 joined
[01:06] *** linkable6 joined
[01:06] *** bloatable6 joined
[01:06] *** tellable6 joined
[01:07] *** committable6 joined
[01:07] *** evalable6 joined
[01:07] *** unicodable6 joined
[01:07] *** benchable6 joined
[01:07] *** statisfiable6 joined
[01:07] *** reportable6 joined
[02:07] *** notable6 left
[02:07] *** unicodable6 left
[02:07] *** bisectable6 left
[02:07] *** linkable6 left
[02:07] *** nativecallable6 left
[02:07] *** quotable6 left
[02:07] *** bloatable6 left
[02:07] *** shareable6 left
[02:07] *** committable6 left
[02:07] *** reportable6 left
[02:07] *** sourceable6 left
[02:07] *** evalable6 left
[02:07] *** tellable6 left
[02:07] *** benchable6 left
[02:07] *** statisfiable6 left
[02:07] *** releasable6 left
[02:07] *** coverable6 left
[02:07] *** greppable6 left
[02:07] *** squashable6 left
[02:08] *** releasable6 joined
[02:08] *** committable6 joined
[02:08] *** tellable6 joined
[02:08] *** linkable6 joined
[02:08] *** sourceable6 joined
[02:08] *** quotable6 joined
[02:08] *** statisfiable6 joined
[02:09] *** coverable6 joined
[02:09] *** benchable6 joined
[02:09] *** unicodable6 joined
[02:09] *** nativecallable6 joined
[02:09] *** greppable6 joined
[02:09] *** bloatable6 joined
[02:09] *** shareable6 joined
[02:10] *** evalable6 joined
[02:10] *** notable6 joined
[02:10] *** reportable6 joined
[02:10] *** squashable6 joined
[02:10] *** bisectable6 joined
[02:59] *** melezhik left
[03:22] <xinming> releasable6: status
[03:22] <releasable6> xinming, Next release in ≈15 hours. There are no known blockers. 1 out of 37 commits logged
[03:22] <releasable6> xinming, Details: https://gist.github.com/1a717b1779cb3d0e1b3c2fb36fe781b2
[03:59] *** evalable6 left
[03:59] *** linkable6 left
[04:01] *** linkable6 joined
[04:02] *** evalable6 joined
[05:02] *** benchable6 left
[05:02] *** statisfiable6 left
[05:02] *** linkable6 left
[05:02] *** tellable6 left
[05:02] *** committable6 left
[05:02] *** coverable6 left
[05:02] *** bisectable6 left
[05:02] *** releasable6 left
[05:02] *** quotable6 left
[05:02] *** evalable6 left
[05:02] *** reportable6 left
[05:02] *** squashable6 left
[05:02] *** nativecallable6 left
[05:02] *** shareable6 left
[05:02] *** sourceable6 left
[05:02] *** greppable6 left
[05:02] *** notable6 left
[05:02] *** unicodable6 left
[05:02] *** bloatable6 left
[05:02] *** greppable6 joined
[05:02] *** statisfiable6 joined
[05:02] *** reportable6 joined
[05:03] *** nativecallable6 joined
[05:03] *** tellable6 joined
[05:03] *** unicodable6 joined
[05:03] *** quotable6 joined
[05:04] *** coverable6 joined
[05:04] *** releasable6 joined
[05:04] *** notable6 joined
[05:04] *** benchable6 joined
[05:04] *** evalable6 joined
[05:04] *** bisectable6 joined
[05:04] *** linkable6 joined
[05:04] *** committable6 joined
[05:04] *** squashable6 joined
[05:05] *** sourceable6 joined
[05:05] *** bloatable6 joined
[05:05] *** shareable6 joined
[05:14] *** RandalSchwartz left
[05:18] <guifa>  codesections: lol @ reddit post
[05:19] <codesections> :D I've been listening to https://www.arraycast.com/ and was feeling inspired 
[05:19] <codesections> Why should APL have all the fun?
[05:20] <moon-child> lol
[05:20] <moon-child> once we get user-defined metaoperators, it'll be possible to implement the entirety of apl syntax in raku
[05:21] <codesections> well, sort of.  You'd need to change the language semantics quite a bit to _really_ support the full syntax.
[05:22] <codesections> (And are user-defined metaoperators on the roadmap/in the synopses?)
[05:22] <moon-child> well, you wouldn't get stranding, but you can just define new multis for the existing +-×÷
[05:23] <moon-child> I guess no trains either
[05:23] <moon-child> my understanding is that user-defined metaoperators are desired, but no one has done the work to make them happen; and that rakuast is perhaps a bridge in that direction
[05:26] <codesections> Unless your multis totally overide the existing +-×, etc, you wouldn't get pure right-to-left order of operations either
[05:27] <moon-child> good point
[05:28] <codesections> and I don't think there's any way to make our functions infix-by-default (though we do have the [&fn] form)
[05:31] *** Xliff left
[05:33] *** Doc_Holliwood joined
[05:39] * moon-child thinks about making an apl implementation in raku
[05:40] <moon-child> I don't think you could ever make it fast, even with nqp.  But you could probably get a quite nice, clear expression of semantics
[05:42] <guifa> I think I'm the only one who's theorized about custom metaops
[05:42] <guifa> but I also don't know what said metaop would do
[05:44] <guifa> like we have them for crossing, zipping, reducing (two ways!), reversing, assigning, inverting, and mapping. What else is there really?
[05:46] <moon-child> apl operators: key, commute, at, atop, beside/bind, over, power, rank, stencil
[05:46] <moon-child> all the metaops are just higher-order functions which are implemented elsewhere, so you could say: why bother with metaoperators at all?
[05:47] <moon-child> or, conversely: every higher-order function could be a metaoperator
[05:47] <codesections> moon-child: I was thinking about that list too, but I think many of those could be regular Raku operators (rather than meta, I mean)
[05:48] <codesections> e.g., https://stackoverflow.com/questions/67346926/implementation-of-a-function-object-power-operator-in-raku
[05:48] <guifa> I guess I'd need to look up how those modify an operator
[05:50] <guifa> Um, wow.  NQP lists are crazy faster than Raku arrays
[05:51] <moon-child> codesections: yeah, but then you'd only be able to pass functions to them.  (Or &[stuff].)  I mean, you can do everything with functions; that's numpy
[05:51] <moon-child> guifa: buf is also fast if you're working with packed ints
[05:52] <guifa> I actually tried doing some work with buf once but I don't remember it feeling too terribly much faster.  But maybe at the NQP level it will get similar speed bumps
[05:52] <guifa> compare
[05:52] <guifa> m: my @a; my $b = DateTime.now; for ^1000000 { push @a,$b }; say @a[999999]; say now - BEGIN now;
[05:52] <camelia> rakudo-moar ca8dea277: OUTPUT: «2021-06-19T07:52:37.717169+02:00␤0.197872629␤»
[05:53] <guifa> whoa, did something get changed?  TIO has that taking a solid 10 seconds
[05:53] <guifa> m: use nqp; my $a := nqp::list(); my $b = DateTime.now; for ^10000000 { nqp::push($a,$b) }; say nqp::atpos($a,9999999); say now - BEGIN now;
[05:53] <camelia> rakudo-moar ca8dea277: OUTPUT: «2021-06-19T07:53:34.796108+02:00␤0.187050531␤»
[05:54] * guifa recalls… was it lizmat? doing something with speeding up arrays.  I guess that's the effect of it
[05:54] <codesections> moon-child: You mean "only functions" as opposed to "functions & operators"?  You'd be able to pass Str, List, etc just fine to the non-meta versions, right?
[05:55] <moon-child> yeah
[05:58] <moon-child> eh...this is strange.  http://ix.io/3qpx  the raku version takes 4.1s; the nqp version 1.5s; and the buf version 2.5s
[06:01] <guifa> try mixing up the order: when I've done perf tests like that, the order can be significant (first one is almost always the slowest, for instance)
[06:02] *** kylese joined
[06:02] <moon-child> reversed them; the specific numbers change, but the order stays the same
[06:03] <moon-child> (actually buf gets faster)
[06:03] *** reportable6 left
[06:05] *** reportable6 joined
[06:35] <moon-child> why is there no write-num32 for buf32, nor write-num64 for buf64?
[06:36] <moon-child> I guess ieee has undefined endianness, completely aside from byte order
[07:05] *** evalable6 left
[07:05] *** linkable6 left
[07:06] *** linkable6 joined
[07:06] *** evalable6 joined
[07:19] *** Doc_Holliwood left
[08:19] *** shareable6 left
[08:19] *** greppable6 left
[08:19] *** benchable6 left
[08:19] *** sourceable6 left
[08:19] *** committable6 left
[08:19] *** bloatable6 left
[08:19] *** notable6 left
[08:19] *** linkable6 left
[08:19] *** reportable6 left
[08:19] *** squashable6 left
[08:19] *** quotable6 left
[08:19] *** nativecallable6 left
[08:19] *** bisectable6 left
[08:19] *** tellable6 left
[08:19] *** statisfiable6 left
[08:19] *** coverable6 left
[08:19] *** unicodable6 left
[08:19] *** evalable6 left
[08:19] *** releasable6 left
[08:19] *** reportable6 joined
[08:19] *** nativecallable6 joined
[08:20] *** notable6 joined
[08:20] *** unicodable6 joined
[08:20] *** committable6 joined
[08:20] *** sourceable6 joined
[08:20] *** evalable6 joined
[08:20] *** tellable6 joined
[08:21] *** quotable6 joined
[08:21] *** bisectable6 joined
[08:21] *** coverable6 joined
[08:21] *** greppable6 joined
[08:21] *** shareable6 joined
[08:21] *** benchable6 joined
[08:21] *** linkable6 joined
[08:21] *** bloatable6 joined
[08:22] *** statisfiable6 joined
[08:22] *** releasable6 joined
[08:22] *** squashable6 joined
[08:46] *** MoC joined
[08:48] *** lizmat left
[08:50] *** LizBot_ joined
[08:51] *** lizmat joined
[08:51] *** RakuIRCLogger_ joined
[08:52] *** LizBot left
[08:52] *** RakuIRCLogger left
[08:53] *** RakuIRCLogger_ left
[08:53] *** RakuIRCLogger joined
[09:20] *** Manifest0 left
[09:21] *** Manifest0 joined
[09:25] *** Sgeo left
[09:30] <Manifest0> Morning.
[09:30] <Manifest0> How can i find my local ip address and if i'm under NAT using raku?
[10:21] *** sono left
[10:24] <El_Che> parse the output of the OS netwerktool like ipconfig or parse /proc and then check if the ip is of a private range?
[10:24] <El_Che> NAT is something done on the router machine, not on the machine itsel
[10:24] <El_Che> f
[10:26] *** supersecant joined
[10:33] *** slu joined
[10:36] *** supersecant left
[10:37] *** supersecant joined
[10:38] *** supersecant left
[10:49] *** neula joined
[11:08] *** neula left
[11:16] *** chrysanthematic joined
[11:18] *** guifa left
[11:22] *** guifa joined
[11:24] *** kylese left
[11:34] *** Doc_Holliwood joined
[12:02] *** reportable6 left
[12:03] *** reportable6 joined
[12:19] *** rassoc joined
[12:21] *** yewscion_ joined
[12:22] <rassoc> Oi! newbie question: how do i coerce and assign a bunch of ints of ints to this type upon initialization? `my Array[Array[Complex]] @a = ...`. Nothing works, can't figure out the syntax.
[12:37] <Geth> ¦ doc: michaelruigrok++ created pull request #3903: clarify sentence, fix typo
[12:37] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3903
[12:39] <CIAvash> m: my Array[Complex(Int)]() @a = [[1, 2, 3], [4, 5, 6]]; dd @a;
[12:40] <camelia> rakudo-moar 57070f059: OUTPUT: «Array[Array[Complex(Int)](Any)] @a = Array[Array[Complex(Int)](Any)].new(Array[Complex(Int)].new(<1+0i>, <2+0i>, <3+0i>), Array[Complex(Int)].new(<4+0i>, <5+0i>, <6+0i>))␤»
[12:40] <CIAvash> rassoc: is this what you want? ↑
[12:43] <rassoc> If i try to do that locally, i'm getting hit with: "Coercion 'Array[Complex(Int)](Any)' is insufficiently type-like to qualify a variable. Did you mean 'class'?"
[12:43] <rassoc> Guess i'll have to wait for a compiler update then. thanks
[12:47] <lizmat> rassoc: yeah, that looks like you're before the coercion protocol changes
[12:49] *** cognominal joined
[12:52] <rassoc> seem like it. still on 2020.07. will prolly install a more recent version by hand
[13:00] *** lucerne left
[13:00] *** RandalSchwartz joined
[13:00] *** chrysanthematic left
[13:01] *** lucerne joined
[13:04] <lizmat> rassoc: yup, that's too old for doing that  :-)
[13:05] *** Doc_Holliwood left
[13:06] *** Doc_Holliwood joined
[13:28] *** yewscion_ left
[13:58] <codesections> m: use variables :U; my $a = 42;
[13:58] <camelia> rakudo-moar 57070f059: OUTPUT: «Type check failed in assignment to $a; expected Any:U but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»
[13:59] *** njm joined
[13:59] <codesections> ha, that would be awful, and I'm kind of surprised the pragma lets you create an _un_defined constraint
[14:00] *** njm left
[14:10] *** monkey_ joined
[14:26] <Geth> ¦ doc: 24c0b55cdd | Coke++ | 3 files
[14:26] <Geth> ¦ doc: add description to modules
[14:26] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/24c0b55cdd
[14:26] <Geth> ¦ doc: c236309a1e | Coke++ | META6.json
[14:26] <Geth> ¦ doc: remove provides list
[14:26] <Geth> ¦ doc: 
[14:26] <Geth> ¦ doc: These libs are only intended for internal use for testing & utils, and should
[14:27] <Geth> ¦ doc: not be installed.
[14:27] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/c236309a1e
[14:27] <Geth> ¦ doc: f4e8731098 | Coke++ | 6 files
[14:27] <Geth> ¦ doc: Use preferred rakumod extension.
[14:27] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f4e8731098
[14:42] <[Coke]> does "raku --doc" theoretically do more work than "raku -c --doc" ?
[14:42] <[Coke]> (if nothing else, it outputs the POD, wondering if it does anything else extra)
[14:51] *** Altai-man_ joined
[14:52] <codesections> [Coke]: well, there's a DOC INIT phaser -- if there's any code in it, that'd be run with --doc but not -c --doc.  https://docs.raku.org/language/phasers#DOC
[14:52] <codesections> not sure I've seen one of those in the wild, though
[15:02] <masak> back in the day, there was a really interesting discussion about how to make Pod processing not-fully-Turing-complete. not sure if that ever led to something conclusive, though
[15:03] <masak> (hi, #r)
[15:19] <[Coke]> apparently it was slow enough over 400+ instances that adding the -c got the test runtime down to 3m from 5m+
[15:20] <[Coke]> er, to 4m.
[15:20] <[Coke]> so, 20% savings
[15:20] <Geth> ¦ doc: d2fd3ddb96 | Coke++ | t/02-pod-valid.t
[15:20] <Geth> ¦ doc: add more diagnostic output
[15:20] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d2fd3ddb96
[15:20] <Geth> ¦ doc: 10f5588d8a | Coke++ | t/02-pod-valid.t
[15:20] <Geth> ¦ doc: Do less work
[15:20] <Geth> ¦ doc: 
[15:20] <Geth> ¦ doc: With this change, test runs in 4m instead of 5m locally, still catches pod errors
[15:20] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/10f5588d8a
[15:34] *** Doc_Holliwood left
[15:37] *** holyghost joined
[15:38] <Geth> ¦ doc: 0a87972362 | Coke++ | META6.json
[15:38] <Geth> ¦ doc: Add prereq for 'make bigpage'
[15:38] <Geth> ¦ doc: 
[15:38] <Geth> ¦ doc: Without this, this make target fails immediately.
[15:38] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0a87972362
[15:49] <gfldex> weekly: Discord was joined by an eval bot prototype ready for testing.
[15:49] <notable6> gfldex, Noted! (weekly)
[15:50] <[Coke]> is there a way in META6.json to say "This isn't meant to be installed" other than having an empty "provides" ?
[15:54] <[Coke]> (for example raku-doc is not currently installable. Trying to install it will basically just get you the pre-reqs needed for the build - but we still want the META6.json to list those pre-reqs so we can work on it)
[15:54] <codesections> m: say &[-]; # there's not a similar shorthand for prefix/other operators, right?
[15:54] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «&infix:<->␤»
[15:56] <ugexe> give instructions to run `zef install Foo --deps-only`. Having a META6.json implies its meant to be installed, so there is no such way to say otherwise
[15:56] <[Coke]> So how does one manage their requirements if they don't want to be installed?
[15:57] <[Coke]> by hand?
[15:57] <ugexe> does `zef install Foo --deps-only` not work?
[15:57] <[Coke]> I can do that, yes. I'm concerned about someone else not working on the project. I suppose the answer is, "remove it from the modules list"
[15:58] <[Coke]> and then there's no confusion. (raku-docs was on the modules list from ages ago because it did install things. then the install broke for the docs and was left for the bin. and then the bin was removed.)
[15:58] <ugexe> ah yeah, if its not intended to be installed there is little reason for it to be in the module list 
[15:58] <[Coke]> should just remove it from the ecosystem, at this point.
[15:58] <[Coke]> ugexe++
[16:00] <[Coke]> added a comment to docs#3819
[16:01] *** linkable6 left
[16:03] *** linkable6 joined
[16:08] <Geth> ¦ doc: 198ab0c230 | Coke++ | util/missing-methods.p6
[16:08] <Geth> ¦ doc: Remove broken script
[16:08] <Geth> ¦ doc: 
[16:08] <Geth> ¦ doc: Needed p6doc which is no longer part of this repo.
[16:08] <Geth> ¦ doc: 
[16:08] <Geth> ¦ doc: Superseded by xt/check-signatures.t
[16:08] <Geth> ¦ doc: 
[16:08] <Geth> ¦ doc: Resolves #3812
[16:08] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/198ab0c230
[16:08] *** Altai-man_ left
[16:08] *** linkable6 left
[16:11] *** linkable6 joined
[16:17] *** chrysanthematic joined
[16:19] *** chrysanthematic left
[16:23] *** chrysanthematic joined
[16:23] *** Altai-man left
[16:26] *** sena_kun joined
[16:26] <codesections> m: say map {[×] $_}, ^5; # works
[16:26] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «(0 1 2 3 4)␤»
[16:27] <codesections> m: say map [×] *, ^5; # doesn't work
[16:27] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»
[16:27] <[Coke]> yup, I wouldn't expect that to work.
[16:27] <codesections> is there a reason why ^^^^ doesn't produce a WhateverCode?  That seems like term position to me
[16:28] <codesections> why's that?
[16:29] <[Coke]> if you want a grammar-based explanation, I can't help there. :)
[16:29] <codesections> m: dd + *
[16:29] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «WhateverCode.new␤»
[16:30] <[Coke]> m: [×] *, ^5
[16:30] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «Potential difficulties:␤    Useless use of [×] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[×] *, ^5␤Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp>…»
[16:30] <[Coke]> m: say [×] *, ^5
[16:30] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»
[16:30] <[Coke]> I think the map is a red herring there.
[16:30] <Geth> ¦ doc: 0f80469f59 | Coke++ | util/xt-recent.sh
[16:30] <Geth> ¦ doc: Add .t files & update overview
[16:30] <Geth> ¦ doc: 
[16:30] <Geth> ¦ doc: Part of #3906
[16:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/0f80469f59
[16:31] <codesections> I thought a prefix op and a * created a WhateverCode?  And that [×] is a prefix op (or produces one)
[16:31] <codesections> ok, set the map aside, then
[16:31] *** linkable6 left
[16:31] <codesections> m: my &f = [×] *;
[16:31] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»
[16:31] <codesections> I'd expect that to be the same as
[16:32] <codesections> m: my &f = {[×] $_}
[16:32] <camelia> rakudo-moar 99e4cf8df: ( no output )
[16:34] *** linkable6 joined
[16:37] <masak> my &f = - *;
[16:37] <masak> m: my &f = - *;
[16:37] <camelia> rakudo-moar 99e4cf8df: ( no output )
[16:38] <masak> codesections: well, it _parses_. yours, I mean.
[16:38] <masak> it just doesn't seem to behave like you want. it wants to numify the `*`
[16:40] *** Sgeo joined
[17:09] <guifa> codesections: what's going on is the […] metaop expects a list after it.  So [+] * is parsed as op=[+], arg=[list(*)]
[17:10] <guifa> And then it's just a plain old whatever
[17:12] *** lgtaube left
[17:28] *** monkey_ left
[17:30] *** holyghost left
[17:30] <codesections> guifa: Thanks, that's helpful.  But doesn't | expect a list too?  This works:
[17:31] <codesections> m: my &f = |*; dd f (1, 2)
[17:31] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «slip(1, 2)␤»
[17:32] <sena_kun> m: EVAL("1", :lang<Perl5>)
[17:32] <camelia> rakudo-moar 99e4cf8df: OUTPUT: «Could not find Inline::Perl5 in:␤    inst#/home/camelia/.raku␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/core␤    ap#…»
[17:33] <sena_kun> can anyone with not so recent rakudo run https://github.com/Raku/roast/blob/master/S01-perl-5-integration/roundtrip.t please?
[17:33] *** pragma- joined
[17:41] *** chrysanthematic left
[17:48] <rassoc> sure! getting this on 2020.07:
[17:48] <rassoc> not ok 4 - 
[17:48] <rassoc> # Failed test at roundtrip.t line 37
[17:48] <rassoc> # expected: $("foo", "hate")
[17:48] <rassoc> #      got: $("ARRAY(0x5621674d0310)",)
[17:50] *** Altai-man joined
[17:58] *** Altai-man left
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:11] <sena_kun> rassoc, thank you!
[18:19] *** Doc_Holliwood joined
[18:37] *** Altai-man joined
[18:40] *** Altai-man left
[18:50] *** m6locks joined
[18:53] *** chrysanthematic joined
[18:56] <guifa> No, see:
[18:57] <guifa> my @a = 1,2,3; my @b= 4, 5, 6; say |@a, @b
[18:57] <evalable6> guifa, rakudo-moar 99e4cf8df: OUTPUT: «123[4 5 6]␤»
[18:57] <guifa> codesections: ^^ | is a prefix operator, just takes a single value
[18:57] <guifa> or maybe better put, it's a higher precedence than the list up
[18:57] <guifa> […] is a lower precedence than list op
[18:59] <codesections> aha!  That's the key I was missing. ty guifa++
[19:06] *** b2gills left
[19:06] *** rassoc left
[19:08] <guifa> codesections: any thoughts on my Datish.fmt module/code?  I need to finish the test files that would go into roast and try a few more ways to break it, but otherwise, if the RSC approved on it, it'd be basically ready to go.
[19:17] *** holyghost joined
[19:36] *** holyghost left
[19:45] <Geth> ¦ doc: 3f9ed6d81a | Coke++ | doc/HomePage.pod6
[19:45] <Geth> ¦ doc: Remove link to currently broken bigpage.
[19:45] <Geth> ¦ doc: 
[19:45] <Geth> ¦ doc: We can add it back once we fix that feature.
[19:45] <Geth> ¦ doc: 
[19:45] <Geth> ¦ doc: Remove text about reporting issues/submitting patches; this is in the footer,
[19:45] <Geth> ¦ doc: and, IMO, doesn't need to be emphasized.
[19:45] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/3f9ed6d81a
[19:45] <guifa> I was just thinking: with RakuAST, it should be possible for Callables to potentially survive serialization, assuming they've got their own lexical variables and/or dynamic variables.
[19:51] <Geth> ¦ problem-solving: coke assigned to JJ Issue Separate Community Resource pages https://github.com/Raku/problem-solving/issues/286
[19:52] <Geth> ¦ problem-solving: coke unassigned from JJ Issue Separate Community Resource pages https://github.com/Raku/problem-solving/issues/286
[19:59] <Geth> ¦ doc: a34b1bdbd5 | Coke++ | doc/Language/faq.pod6
[19:59] <Geth> ¦ doc: Remove references to .perl
[19:59] <Geth> ¦ doc: 
[19:59] <Geth> ¦ doc: .raku is mentioned already in both places, and we don't need
[19:59] <Geth> ¦ doc: to clutter the FAQ with an aliased method name when the
[20:00] <Geth> ¦ doc: preferred version is listed.
[20:00] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a34b1bdbd5
[20:00] <Geth> ¦ doc: eddff45a99 | Coke++ | doc/Language/faq.pod6
[20:00] <linkable6> Link: https://docs.raku.org/language/faq
[20:00] <Geth> ¦ doc: remove unneeded use v6
[20:00] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/eddff45a99
[20:02] <Geth> ¦ doc: c651c61df6 | Coke++ | writing-docs/EXAMPLES.md
[20:02] <Geth> ¦ doc: clarify
[20:02] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/c651c61df6
[20:08] <[Coke]> lizmat: looks like you did a conversion of ":ok-test<perl>" to raku in the docs and changed the sample from perl to raku as well... but the ok-test exception is to allow .perl, specifically.
[20:08] <[Coke]> Will remove all the ok-test's that are not needed now.
[20:09] <lizmat> [Coke]++  
[20:10] <[Coke]> m: say 3.perl
[20:10] <camelia> rakudo-moar cd0170621: OUTPUT: «3␤»
[20:15] <Geth> ¦ doc: bab14801aa | Coke++ | 8 files
[20:15] <Geth> ¦ doc: Remove ok-test<raku>
[20:15] <Geth> ¦ doc: 
[20:15] <Geth> ¦ doc: The original was to allow .perl to be mentioned; .raku is the recommended
[20:15] <Geth> ¦ doc: method, so no care needs to be taken; none of these samples mention
[20:15] <Geth> ¦ doc: perl anymore.
[20:15] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/bab14801aa
[20:17] <[Coke]> https://github.com/Raku/doc/blob/master/writing-docs/SQUASHATHONS.md - does this still happen monthly?
[20:20] <Doc_Holliwood> can we have a $*TAKEN variable which points to the taken values of the current gather block?
[20:20] *** cbk joined
[20:22] *** cbk left
[20:22] <Geth> ¦ doc: 134cc2fe01 | Coke++ | writing-docs/SQUASHATHONS.md
[20:22] <Geth> ¦ doc: Show actual oldest.
[20:22] <Geth> ¦ doc: 
[20:22] <Geth> ¦ doc: (Previous link was page 8 of 20...)
[20:22] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/134cc2fe01
[20:24] <[Coke]> Doc_Holliwood: what's the use case?
[20:33] <Doc_Holliwood> every piece of code that would use an intermediate @result array 
[20:39] <[Coke]> Would you expect to be able to un-take values by manipulating the array? add more without using take?
[20:40] <[Coke]> I get that you want it "in the middle", still don't get why
[20:42] <[Coke]> (depending on what you want it for, it'd have to be thread safe)
[20:46] *** MoC left
[20:47] *** holyghost joined
[21:02] <[Coke]> (not trying to shoot down the idea, just curious)
[21:12] <ugexe> seems like a nightmare considering gather is creating a sequence and that would more easily allow users to try and iterate over things more than once
[21:13] <lizmat> feels like something in module space overriding "take" :-)
[21:13] <Juerd> I've had one use case where I wanted to access the previous thing, basically for a reduce-like solution, but that was easily fixed by actually using reduce :)
[21:14] * lizmat calls it a day on the last day of her 65th year
[21:14] <Juerd> Gefeliciteerd!! :)
[21:15] <ugexe> or use rotor with appropriate backtracking and consider the last value the current value
[21:16] <ugexe> well i guess that isnt equivilent 
[21:16] <ugexe> since you could very well transform the values before taking them
[21:17] <Doc_Holliwood> just one of the random ideas that pop up in my head, really
[21:17] <Doc_Holliwood> Coke
[21:22] *** silug left
[21:22] *** silug joined
[21:23] *** esh left
[21:24] *** chrysanthematic left
[21:25] *** esh joined
[21:31] <[Coke]> Happy Juneteenth to our US hackers.
[21:36] <El_Che> lizmat: gelukkige verjaardag
[21:37] <Manifest0> El_Che: thanks for the reply.
[21:38] <Manifest0>  What's the equivalent to getsockname() in raku?
[21:38] <El_Che> Manifest0: is there is no module, nativecall should be pretty straightforward for that kind of calls
[21:58] <guifa> lizmat: Happy birthday!
[22:01] *** b2gills joined
[22:17] <m6locks> is there a way to read keyboard input without any Term:: * module?
[22:20] <MasterDuke> m6locks: if you just want text input there's prompt(), if you want to read keystrokes and such you'll probably need/want a module
[22:20] <m6locks> thanks, prompt will probly do just finr
[22:42] <holyghost> lizmat++
[23:01] *** evalable6 left
[23:01] *** linkable6 left
[23:01] *** linkable6 joined
[23:03] *** evalable6 joined
[23:42] *** holyghost left
