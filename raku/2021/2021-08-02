[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:28] *** Doc_Holliwood left
[01:28] *** notable6 left
[01:28] *** evalable6 left
[01:28] *** greppable6 left
[01:28] *** squashable6 left
[01:28] *** committable6 left
[01:28] *** quotable6 left
[01:28] *** bisectable6 left
[01:28] *** releasable6 left
[01:28] *** coverable6 left
[01:28] *** shareable6 left
[01:28] *** bloatable6 left
[01:28] *** reportable6 left
[01:28] *** tellable6 left
[01:28] *** sourceable6 left
[01:28] *** benchable6 left
[01:28] *** nativecallable6 left
[01:28] *** unicodable6 left
[01:28] *** statisfiable6 left
[01:28] *** squashable6 joined
[01:29] *** sourceable6 joined
[01:29] *** releasable6 joined
[01:29] *** evalable6 joined
[01:30] *** bisectable6 joined
[01:30] *** notable6 joined
[01:30] *** unicodable6 joined
[01:31] *** benchable6 joined
[02:29] *** gugod left
[02:30] *** reportable6 joined
[02:30] *** quotable6 joined
[02:30] *** nativecallable6 joined
[02:30] *** shareable6 joined
[02:30] *** coverable6 joined
[02:30] *** greppable6 joined
[02:31] <[Coke]> can someone explain to me what this C is doing: https://github.com/MoarVM/MoarVM/blob/new-disp/src/disp/syscall.c#L326-L334? (Not the specifics, the syntax)

[02:35] <[Coke]> ah, that's a struct. (windows is unhappy with several instances of that syntax in that file)

[02:38] *** perlbot left
[02:39] *** simcop2387 left
[02:41] <moon-child> I think that '.expected_kinds = { }' is not standard

[02:43] <moon-child> (supported by gcc but not msvc, I assume)

[02:43] <moon-child> should be .expected_kinds = {0}.  (Or just leave it out; it will be zero-initialized by default)

[02:53] *** monkey_ left
[02:54] <[Coke]> Yup, that seems to avoid the issue. Thanks.

[03:01] <[Coke]> moon-child++

[03:03] *** jess joined
[03:05] *** simcop2387 joined
[03:05] *** linkable6 joined
[03:06] *** perlbot joined
[03:12] *** monkey_ joined
[03:27] *** monkey_ left
[04:27] *** releasable6 left
[04:27] *** coverable6 left
[04:27] *** quotable6 left
[04:27] *** reportable6 left
[04:27] *** notable6 left
[04:27] *** shareable6 left
[04:27] *** sourceable6 left
[04:27] *** evalable6 left
[04:27] *** greppable6 left
[04:27] *** nativecallable6 left
[04:27] *** linkable6 left
[04:27] *** bisectable6 left
[04:27] *** squashable6 left
[04:27] *** benchable6 left
[04:27] *** unicodable6 left
[04:27] *** quotable6 joined
[04:28] *** unicodable6 joined
[04:29] *** tellable6 joined
[04:29] *** coverable6 joined
[04:29] *** committable6 joined
[04:29] *** nativecallable6 joined
[04:29] *** linkable6 joined
[04:29] *** sourceable6 joined
[04:29] *** notable6 joined
[04:30] *** reportable6 joined
[04:30] *** shareable6 joined
[04:45] *** stoned75_ left
[04:46] *** stoned75 joined
[05:27] *** releasable6 joined
[05:28] *** greppable6 joined
[05:29] *** statisfiable6 joined
[05:30] *** bisectable6 joined
[05:30] *** benchable6 joined
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:18] *** Sgeo left
[06:25] *** ufobat joined
[06:28] *** evalable6 joined
[06:50] *** Manifest0 joined
[07:28] *** squashable6 joined
[07:48] *** dakkar joined
[09:17] *** tejr left
[09:30] *** bloatable6 joined
[09:31] *** tejr joined
[10:03] *** lizmat left
[10:22] <vasko> > '/media-pv/linksr/movies'.IO.dir.map: *.e

[10:22] <vasko> (False False False False False False False False False False False False False ...

[10:23] <vasko> I'm finding that symlinks, mounted over NFS return false when testing them with the method `.e`

[10:23] <vasko> Seems to work fine with the same version of raku (2021.04) directly on the NFS host (sans nfs).

[10:27] <vasko> Checking for a file directory fails as well: > '/media-pv/linksr/movies'.IO.dir.map: *.f

[10:27] <vasko> Failed to find '/media-pv/linksr/movies/My.Movie.mkv'

[10:37] *** ufobat left
[10:43] *** sena_kun joined
[10:50] *** lizmat joined
[10:59] *** ufobat joined
[11:06] <gfldex> lolibloggedalittlejustbeforeirantowork: https://gfldex.wordpress.com/2021/08/02/only-infinite-elements/

[11:59] *** linkable6 left
[11:59] *** evalable6 left
[11:59] *** evalable6 joined
[12:03] *** reportable6 left
[12:21] *** frost joined
[12:22] *** Doc_Holliwood joined
[12:31] <elcaro> gfldex: No love for toggle? ie. (1..6).roll(*).toggle(* > 2)

[12:37] <elcaro> tho `* ≥ 3` might convey intent better

[12:57] <frost> hello, everyone =D 

[13:04] *** reportable6 joined
[13:15] <elcaro> hi frost

[13:20] *** frost left
[13:23] *** Sgeo joined
[13:23] <Altreus> > If no more tester Callables are available, the switch will remain in its current state until the end of iteration.  -- is toggle therefore smart enough to terminate an infinite list when it runs out of testers in an off state?

[13:26] <lizmat> toggle runs on an iterator: if the iterator produces IterationEnd, it's done

[13:26] <lizmat> if it doesn't, it will run forever indeed?

[13:27] <elcaro> Altreus: I think... it does?

[13:27] <elcaro> m: (1..Inf).toggle(:off)

[13:27] <camelia> rakudo-moar 54f1b7a5f: ( no output )

[13:27] <elcaro> m: say (1..Inf).toggle(:off)

[13:27] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «()␤»

[13:27] <Altreus> But if it knows that it will not produce any more values (because it's off) why would it continue to iterate?

[13:27] <Altreus> aha, a test

[13:27] <Altreus> empiricism ftw

[13:29] <elcaro> I replied to the Reddit post. I've always had a soft spot of toggle because of how it generalised the (drop|take)(until|while) functions into one

[13:30] <elcaro> but unfortunately not well known, because it's not a common name for this feature (though it's a fine name)

[13:30] <elcaro> maybe there is some way docs could point to it when someone searches `takewhile`... that might help a little

[13:36] *** frost joined
[13:40] *** frost left
[14:40] *** evalable6 left
[15:00] *** linkable6 joined
[15:13] *** justsomeguy left
[15:41] *** Doc_Holliwood left
[15:43] *** evalable6 joined
[16:21] *** ufobat left
[16:39] *** LarryNB joined
[16:40] <LarryNB> I've downloaded  the source and the .asc file; however, I don't know how to verify the downloaded source.

[16:43] <LarryNB> More specifically, I've downloaded https://rakudo.org/dl/rakudo/rakudo-2021.07.tar.gz.asc and run Kleopatra to verify the corresponding file; however, the Kleopatra response included "could not be verified".

[16:52] *** dakkar left
[16:52] <sena_kun> LarryNB, you can use the gpg tool to verify it. assuming the both files are in the same directory, run `gpg --verify rakudo-2021.07.tar.gz.asc`.

[16:54] <sena_kun> LarryNB, I see Kleopatra is a GUI for Gpg4Win, am I correct you are on Windows?

[16:55] <LarryNB> Yes, I'm on Windows10.  But the response from Kleopatra says "could not be verified".

[16:56] <sena_kun> LarryNB, can you please show a screenshot, for example?

[16:57] <LarryNB> Let me see if I can figure how to create one.

[16:57] <sena_kun> I just downloaded both files and gpg says:

[16:57] <sena_kun> gpg: assuming signed data in 'rakudo-2021.07.tar.gz'

[16:57] <sena_kun> gpg: Good signature from "Alexander Kiryuhin <alexander.kiryuhin@gmail.com>" [ultimate]

[16:57] <sena_kun> So something is apparently insufficient.

[16:58] <Altreus> LarryNB: super+shift+s

[16:59] <LarryNB> Uploaded file: https://uploads.kiwiirc.com/files/e9940938d1e2fbbf3d5c6abc2381d404/Capture.PNG

[17:00] <LarryNB> I must have Kleopatra misconfigured somehow.  I'll just have to remember to use gpg.

[17:01] <LarryNB> Sorry for bother, and thanks for the help.

[17:01] <MasterDuke> no, i think you just need to add that key

[17:03] <LarryNB> OK, I'll need to study how gpg and kleo work more closely. I'd assumed it would add any key it found on any keyserver.

[17:04] <LarryNB> It seems like an obvious thing the app should do.

[17:05] <Altreus> like gpg does? :D

[17:05] <Altreus> where "any keyserver" is "next to the file"

[17:05] <MasterDuke> LarryNB: https://colabti.org/irclogger/irclogger_log/raku?date=2021-07-24#l137 for reference

[17:09] <LarryNB> OK, thanks MasterDuke, for the reference.  I'll add the key.  Thanks again for the help.

[17:09] <LarryNB> Bye now.

[17:09] *** LarryNB left
[17:25] *** sena_kun left
[17:27] <lizmat> moritz: care to comment on https://twitter.com/juliawritescode/status/1421784635172925444 ?

[17:44] *** melezhik joined
[17:45] <melezhik> what is a Raku  replacement for perl's ` /a/ ... /b/ ` diapason operator? 

[17:49] <[Coke]> ff ?

[17:50] <[Coke]> fff?

[17:50] <[Coke]> just looked up "diapason" and only found musical references.

[17:51] <[Coke]> https://docs.raku.org/language/5to6-perlop#Range_operators

[17:51] <moritz> lizmat: thank, I#ve answered

[17:52] <melezhik> [Coke] thanks, I just forgot where to find in the docs

[18:00] *** stoned75 left
[18:01] *** stoned75 joined
[18:02] *** reportable6 left
[18:03] *** MoC joined
[18:06] *** sono joined
[18:13] *** jess left
[18:31] *** Doc_Holliwood joined
[18:37] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/08/02/2021-31-counting-down/

[18:52] <El_Che> not again!

[18:52] <El_Che> (jk)

[19:05] *** reportable6 joined
[19:08] *** MoC left
[19:18] <nine> It's....like this happens every week :D

[19:29] *** MoC joined
[19:40] *** MoC left
[19:49] <lizmat> almost like magic!

[19:49] <lizmat> .oO( I wish )

[19:53] <lizmat> m: say "\c[femal sign]"  # wonder if we could get a levenshtein feedback on this one

[19:53] <camelia> rakudo-moar 54f1b7a5f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name [femal sign]␤at <tmp>:1␤------> 3say "\c[femal sign7⏏5]"  # wonder if we could get a levenshte␤»

[19:55] <[Coke]> Seems a reasonable ask

[19:57] <moon-child> there are quite a lot of unicode characters, it might take a while

[19:57] <MasterDuke> hm. does rakudo know all the valid names?

[19:57] <moon-child> I wonder if there's some kind of precomputation you can do on a set of names (like some kind of hashing) that lets you quickly identify close levenshtein matches?

[19:57] <MasterDuke> yep

[19:58] <MasterDuke> levenshtein automata

[19:58] <lizmat> could be a nice project for someone  :-)

[19:59] <moon-child> MasterDuke: hmm, that looks like clearly an improvement but not an escape from pathological performance

[19:59] <moon-child> you're still linear in the number of unicode character names, which is quite large

[20:00] <[Coke]> yah, but it's on error, so it's OK if its a little slow.

[20:00] <MasterDuke> yeah. you might be able to do something with a trie

[20:40] *** linkable6 left
[20:40] *** linkable6 joined
[21:02] *** melezhik left
[21:03] <El_Che> lizmat: Wendy is mentioned https://dev.to/smonff/why-am-i-giving-up-on-perl-4ni6/

[21:04] <El_Che> (or even addressed)

[21:04] *** melezhik joined
[21:05] <melezhik> if someone is into linux server state verification, I've recently resumed one of my old project which is called Bird - https://github.com/melezhik/bird

[21:06] <melezhik> it allows one to write dsl based rules to check servers states, an alternative to existing tools like chef inspec and goss

[21:06] <melezhik> written on Raku

[21:16] *** melezhik left
[21:31] *** Altai-man left
[21:36] *** neshpion joined
[21:55] *** Altai-man joined
[22:41] <lizmat> weekly: https://dev.to/smonff/why-am-i-giving-up-on-perl-4ni6/

[22:41] <notable6> lizmat, Noted! (weekly)

[23:22] *** tobs left
[23:32] *** tobs joined
