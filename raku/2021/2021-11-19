[00:02] *** reportable6 left
[00:06] *** colemanx joined
[00:12] <Od1n> method col:sym<quoted> ($/) { make S:g/'""'/'"'/ with ~$/ }
[00:13] <Od1n> hello people.
[00:13] <Od1n> i just copied https://docs.raku.org/language/regexes#index-entry-S$SOLIDUS$SOLIDUS$SOLIDUS_non-destructive_substitution
[00:13] <Od1n> and adapted it for what i think will make my <quoted> by replacing "" by "
[00:14] <Od1n> "Cannot assign to a readonly variable or a value" 
[00:14] <Od1n> i don't get it: wasn't ~$/ a new string that is made from $/ ?
[00:20] <discord-raku-bot> <Nemokosch#9980> what did you copy actually?
[00:20] <discord-raku-bot> <Nemokosch#9980> it doesn't scroll there
[00:29] <Od1n> say S/o .+ d/new/ with 'old string';
[00:29] <evalable6> Od1n, rakudo-moar 5a6d1ee3a: OUTPUT: ¬´new string‚ê§¬ª
[00:29] <Od1n> I just adapted it, I guess
[00:32] <discord-raku-bot> <Nemokosch#9980> üòÇ
[00:32] <discord-raku-bot> <Nemokosch#9980> and what exactly went wrong?
[00:33] <discord-raku-bot> <Nemokosch#9980> oh
[00:33] <discord-raku-bot> <Nemokosch#9980> now I see it
[00:34] *** ajr left
[00:35] <discord-raku-bot> <Nemokosch#9980> Od1n: did it not complain about using $/ as the parameter?
[00:35] <Od1n> well. raku don't want to assign a readonly
[00:35] *** Colt joined
[00:35] <Od1n> i guess not: i copied it in another variable explicitly. still doesn't work 
[00:36] <discord-raku-bot> <Nemokosch#9980> I don't know this sym thing but assuming it's basically still a method, this seems like a bad idea
[00:36] <discord-raku-bot> <Nemokosch#9980> I mean using a magic variable as your parameter
[00:36] <Od1n> <sym> is an alternative for a term in a grammar
[00:37] <Od1n> when you declare a action class, you have to keep the same name for the rule and the method
[00:40] <Od1n> i just want to transform ""hello"" in "hello"
[00:42] *** patrickb left
[00:43] *** patrickz joined
[00:48] <Od1n> i'll write the question on the mailing list
[00:54] *** squashable6 left
[00:58] <discord-raku-bot> <Nemokosch#9980> If you aren't sure about using $/ as a parameter, I'd say don't
[00:59] <Od1n> this also is a copy-paste from the grammar documentation
[01:01] *** squashable6 joined
[01:01] <Od1n> https://docs.raku.org/language/grammars#index-entry-Actions
[01:02] <discord-raku-bot> <Nemokosch#9980> well that's an oof
[01:03] <Od1n> oof ?
[01:06] <Od1n> https://www.urbandictionary.com/define.php?term=oof ?
[01:07] <discord-raku-bot> <Nemokosch#9980> xdd
[01:09] <Od1n> (as xml declarative description ?)
[01:10] <Od1n> thanks for helping. i'm going to sleep now
[01:10] <Od1n> bye everyone 
[01:15] <discord-raku-bot> <Nemokosch#9980> you are funny
[01:15] <discord-raku-bot> <Nemokosch#9980> üòÑ
[01:15] <discord-raku-bot> <Nemokosch#9980> good night
[01:41] *** patrickz left
[01:55] *** frost joined
[02:06] *** reportable6 joined
[02:18] *** chronon left
[02:20] *** chronon joined
[02:41] *** colemanx left
[02:42] *** colemanx joined
[03:42] *** squashable6 left
[03:42] *** linkable6 left
[03:42] *** reportable6 left
[03:42] *** benchable6 left
[03:42] *** quotable6 left
[03:42] *** greppable6 left
[03:42] *** evalable6 left
[03:42] *** nativecallable6 left
[03:42] *** sourceable6 left
[03:42] *** statisfiable6 left
[03:42] *** committable6 left
[03:42] *** notable6 left
[03:42] *** bloatable6 left
[03:42] *** bisectable6 left
[03:42] *** unicodable6 left
[03:42] *** shareable6 left
[03:42] *** tellable6 left
[03:42] *** coverable6 left
[03:42] *** releasable6 left
[03:43] *** linkable6 joined
[03:43] *** tellable6 joined
[03:43] *** reportable6 joined
[03:43] *** benchable6 joined
[03:44] *** unicodable6 joined
[03:44] *** notable6 joined
[03:44] *** statisfiable6 joined
[03:44] *** bisectable6 joined
[03:44] *** greppable6 joined
[03:44] *** shareable6 joined
[03:45] *** coverable6 joined
[03:45] *** bloatable6 joined
[04:43] *** squashable6 joined
[04:44] *** committable6 joined
[04:45] *** evalable6 joined
[04:45] *** releasable6 joined
[04:45] *** nativecallable6 joined
[05:43] *** quotable6 joined
[05:44] *** sourceable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[07:03] *** unicodable6 left
[07:03] *** nativecallable6 left
[07:03] *** linkable6 left
[07:03] *** bisectable6 left
[07:03] *** reportable6 left
[07:03] *** coverable6 left
[07:03] *** bloatable6 left
[07:03] *** releasable6 left
[07:03] *** committable6 left
[07:03] *** sourceable6 left
[07:03] *** evalable6 left
[07:03] *** benchable6 left
[07:03] *** shareable6 left
[07:03] *** greppable6 left
[07:03] *** statisfiable6 left
[07:03] *** squashable6 left
[07:03] *** tellable6 left
[07:03] *** notable6 left
[07:03] *** quotable6 left
[07:04] *** tellable6 joined
[07:04] *** linkable6 joined
[07:04] *** bisectable6 joined
[07:04] *** greppable6 joined
[07:05] *** coverable6 joined
[07:05] *** unicodable6 joined
[07:05] *** benchable6 joined
[07:05] *** evalable6 joined
[07:05] *** shareable6 joined
[07:06] *** quotable6 joined
[07:30] *** seednode left
[07:31] *** seednode joined
[07:41] *** Sgeo left
[07:52] *** Xliff joined
[08:05] *** statisfiable6 joined
[08:05] *** nativecallable6 joined
[08:06] *** releasable6 joined
[08:06] *** reportable6 joined
[08:07] *** frost left
[08:20] *** frost joined
[08:46] *** jess left
[08:46] *** jess joined
[08:49] *** abraxxa joined
[08:58] *** abraxxa left
[08:59] *** abraxxa joined
[09:01] *** kylese joined
[09:03] *** bloatable6 joined
[09:11] *** squashable6 joined
[09:16] *** abraxxa-home joined
[09:17] *** linkable6 left
[09:58] <frost> hello all.
[09:59] <frost> when i install a module using zef, i got an error "Type check failed for return value; expected IO::Path but got Any (Any)"
[10:00] <frost> what does that mean?
[10:04] *** sourceable6 joined
[10:12] <elcaro> It sounds like the module you're trying to install is failing one of it's test
[10:13] <elcaro> You can tell zef to skip tests, but there's a risk the module won't work properly.
[10:13] <elcaro> zef should tell you which module it's testing before the failure occurs
[10:20] *** synthmeat left
[10:20] <discord-raku-bot> <frost#6297> Hey, @elcaro,  it stops with that error message even not starting to install:(
[10:20] *** linkable6 joined
[10:38] <El_Che> elcaro: what version of raku/zef are you running? I remember zef breakage with a raku change some time ago
[10:44] <elcaro> El_Che: It's not me having the issue, it's frost (or frost#6297 via the discord bot)
[10:44] <elcaro> frost: What OS are you on?
[10:45] <elcaro> and yeah, as El_Che asked...  what version of Raku (and zef) are you using?
[10:54] <tbrowder> .tell ugexe zef is noticeably faster now, nice!
[10:54] <tellable6> tbrowder, I'll pass your message to ugexe
[10:59] <frost> El_Che i'm running it on manjaro with linux 5.14 and the zef is from the 2021.10 bin release of linux
[10:59] *** KotH left
[11:00] <El_Che> that's recent, then
[11:01] <frost> It may also be a specific module problem, since I can install other modules successfully
[11:02] <frost> I'm not going to try any more now, thanks elcaro El_Che
[11:05] *** committable6 joined
[11:08] <El_Che> np
[11:29] *** synthmeat joined
[11:56] <tbrowder> frost: it might be helpful if the module author knew about your problem
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:21] *** slu joined
[12:22] *** patrickb joined
[12:25] *** abraxxa left
[12:29] <frost> @tbr
[12:31] <frost> tbrowder thanks, i know why it fails, since there is no META6.json, now I try to add one
[12:32] <tbrowder> frost: you should investigate using App::Mi6 for module creation and maintenance--saves a lot of work
[12:33] <discord-raku-bot> <RaycatWhoDat#0001> When making a grammar, what is the correct way to look for delimited block if the delimiters are on separate lines?
[12:33] <tbrowder> lizmat uses it, and i too, and many others
[12:34] <frost> tbrowder thank you, but i haven't learn how to make a module, i‚Äòll try later
[12:36] <tbrowder> okey dokey
[12:56] *** tejr left
[12:57] *** tejr joined
[13:05] <El_Che> okey donkey?
[13:06] *** notable6 joined
[13:50] <patrickb> Do people consider the following a WAT?
[13:50] <patrickb> m: try run("nonexisting")
[13:51] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´The spawned command 'nonexisting' exited unsuccessfully (exit code: 1, signal: 0)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[13:51] <patrickb> In contrast to:
[13:51] <patrickb> m: run("nonexisting").so
[13:51] <camelia> rakudo-moar 254a9cb33: ( no output )
[13:54] <tbrowder> El_Che: okey dokey, kind of country or southern friendly slang for "okay"
[13:59] *** frost left
[13:59] <tbrowder> patrickb: pls remind me what does WAT mean
[14:03] <tbrowder> m: say run("nonexisting").so
[14:03] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´False‚ê§¬ª
[14:03] <tbrowder> that's my choice
[14:06] <patrickb> WAT means an unexpected behavior that negatively surprises the programmer: "WAT?! That's how it behaves?!?"
[14:07] *** samcv left
[14:07] *** samcv joined
[14:13] *** Colt left
[14:14] <nine> Everyone: please reset your local rakudo master branches to the current origin/master. We had a confusion in the repository that required a force push. Sorry for the inconvenience!
[14:16] *** KotH joined
[14:32] *** synthmeat left
[14:44] *** Sgeo joined
[14:59] <CIAvash> patrickb: https://github.com/rakudo/rakudo/issues/1590
[15:01] <patrickb> CIAvash: That's not optimal. But my point was not about the program not existing, but the `try` being uneffective.
[15:09] <ugexe> the process errors when it gets sunk
[15:09] <tellable6> 2021-11-19T10:54:07Z #raku <tbrowder> ugexe zef is noticeably faster now, nice!
[15:10] <ugexe> if you avoid sinking it it wont error 
[15:11] <ugexe> m: my $a = try run("nonexisting"); say $a.exitcode
[15:11] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´1‚ê§¬ª
[15:13] <patrickb> but then I can leave the try off just as well
[15:13] <patrickb> is this an error vs exception thing?
[15:13] <ugexe> yep, you'd `try` around whatever would sink it
[15:13] <tbrowder> patrickb: thnx for the reminder. i assume it‚Äôs WAT instead of WHAT due to raku mop and it‚Äôs also comedic and phonetic!
[15:14] <patrickb> Ah, so the error (aka a contact bomb) passes through the try untouched as it's not a live exception and then gets sunk which triggers it?
[15:15] <ugexe> yea, although it might be a failure not an exception (i forget)
[15:16] <patrickb> thanks for explaining!
[15:16] <patrickb> tbrowder: I guess so.
[15:44] *** linkable6 left
[15:44] *** evalable6 left
[15:46] *** linkable6 joined
[15:47] *** evalable6 joined
[15:51] <El_Che> tbrowder: don't destruy my silly puns :P
[15:57] *** lizmat_ joined
[15:58] *** Geth left
[15:59] *** TempIRCLogger left
[15:59] *** sm1 joined
[15:59] *** RakuIRCLogger left
[15:59] *** lizmat left
[15:59] *** dextercd joined
[16:00] *** slu left
[16:11] <tbrowder> El_Che: sorry, i forgot you're the SNL wannabe :-D
[16:39] *** sm1 left
[16:52] *** xinming__ left
[16:53] *** xinming__ joined
[16:58] *** xinming__ left
[17:00] *** xinming__ joined
[17:13] *** lizmat_ left
[17:13] *** lizmat joined
[17:14] *** Geth joined
[17:14] *** RakuIRCLogger joined
[17:15] *** A26F64 joined
[17:22] <japhb> WAT is from a talk on JavaScript foibles that got rapidly adopted by other programming language communities.
[17:25] *** abraxxa-home left
[17:48] <[Coke]> thouoght it was related to https://knowyourmeme.com/memes/wat
[18:03] *** reportable6 left
[18:06] <[Coke]> does Audrey have a minister-blog?
[18:10] <tonyo> are you people on windows using the WSL to run raku or compiling directly?
[18:17] <[Coke]> i''m compiing directly
[18:20] <japhb> [Coke]: I'd forgotten, it's JavaScript *and* Ruby: https://www.destroyallsoftware.com/talks/wat
[18:42] *** a3r0 left
[19:04] *** reportable6 joined
[19:43] *** Skarsnik joined
[19:47] <Xliff_> Waht determines order of INIT blocks?
[19:48] <[Coke]> m: INIT {say 2}; INIT { say 1};
[19:48] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´2‚ê§1‚ê§¬ª
[19:48] <[Coke]> Guessing it's source order.
[19:51] <[Coke]> (my sample is unhelpful, sorry. ;)
[19:53] <Xliff_> [Coke]: Kinda hard to determine that when you are using multiple compunits. ;)
[19:54] <Skarsnik> Any idea why raku can't find my module in ./ ? I have a SNES-SLANG.rakumod and when I do raku -I ./ -M SNES-SLANG -e 'some code' it can't find the module :(
[19:57] <Skarsnik> copying it to another dir and doing -I dir work x)
[19:57] <tbrowder> ref WAT: i think [Coke] is on to the truth...
[19:58] *** Colt joined
[19:59] *** Xliff_ left
[20:00] <ugexe> is there a META6.json in ./ ?
[20:01] <ugexe> if so then that module would needed to be listed in it
[20:02] <Skarsnik> hoo
[20:02] <Skarsnik> Since when META6.json is used by something else than zef xD
[20:03] <ugexe> rakudo has used it for 5+ years
[20:03] <ugexe> its used it in this specific way for ~3 years
[20:05] <Skarsnik> maybe should clarify the error message?
[20:06] <ugexe> im pretty sure it tells you exactly what the issue is
[20:06] <ugexe> "Please note that a 'META6.json' file was found in '.', of which the 'provides' section was used to determine if a dependency is available or not.  Perhaps you need to add 'AdADL' in the <provides> section of that file?  Or need to specify a directory that does *not* have a 'META6.json' file?
[20:06] <ugexe> at -e:1"
[20:07] *** TempIRCLogger joined
[20:07] <ugexe> did you read the whole error message?
[20:08] <Skarsnik> skarsnik@DESKTOP-UIA12T1:/mnt/f/Project/QUsb2snes/tests/usb2snes-tests/raku-tests$ raku -v
[20:08] <Skarsnik> This is Rakudo version 2020.08.2 built on MoarVM version 2020.08
[20:08] <Skarsnik> This is probably why?
[20:09] <ugexe> probably, the newer error message is newish but i thought it was older than that. guess not
[20:11] <Skarsnik> Doing a SLANG is tricky, it's hard to tell if your grammar is called or not :(
[20:17] <[Coke]> Always reminds me of meeting Raku folks in Germany.... got a case of shrinkwrapped stroopwafel today. (nowhere near as good as the fresh stuff)
[20:22] <Skarsnik> I am not sure what is wrong with my slang. https://gist.github.com/Skarsnik/b6ada1e5249106024bc3bb373d8f1e8c using with like raku -M SNES-SLANG -e 'SNES lda $42:sta $69:rtl:;' does not work
[20:27] <Skarsnik> I realise the say "export" does not happen
[20:27] <[Coke]> here it hangs.
[20:29] <Skarsnik> let update raku x)
[20:32] <[Coke]> I'm on 2021.10 here
[20:33] <Skarsnik> the first token is probably missing something to not mess up with raku grammar?
[20:36] <Skarsnik> github is sloowww today
[20:47] *** colemanx left
[20:51] *** Xliff_ joined
[20:58] *** [Coke] left
[20:59] *** colemanx joined
[21:04] <Skarsnik> the say in my export sub does not run, I just get a compile error x)
[21:07] *** gcd left
[21:15] *** [Coke] joined
[21:17] *** colemanx left
[21:31] <patrickb> m: sub s(List :@l, Str :$a) { }; s(:a(1));
[21:31] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '@l'; expected Positional[List] but got Array ([])‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[21:31] <patrickb> Is this a rakudobug?
[21:35] <japhb> patrickb: Are you wanting to say "a Positional that contains a bunch of Lists"?
[21:35] <japhb> (Er, because that's what you are currently saying)
[21:35] <patrickb> Actually I think the signature is bogus and should be corrected. But the error is about an optional param I'm not passing...
[21:36] <patrickb> wait
[21:36] <patrickb> positional?
[21:36] <japhb> The '@' sigil indicates that a type `does Positional`
[21:36] <[Coke]> first has a : so not a positional, I think.
[21:36] <patrickb> ah you are refering to the variable, not the signature
[21:37] <japhb> [Coke]: It's a named argument whose value is a Positional containing Lists
[21:37] <patrickb> agreed
[21:38] <patrickb> That is bogus, I agree, but the error it throws is wrong, right?
[21:38] <japhb> I'm guessing the problem is that the default value for an optional Positional is an empty Array
[21:38] <patrickb> It should complain that $a is not a string, but instead complains about an optional I didn't pass.
[21:38] <japhb> Are you asking if the default should change to be Array[List]?
[21:39] <japhb> First argument caused a binding failure, so had already errored.
[21:39] <patrickb> If I turn the `1` into a `"1"` the error goes away.
[21:39] <japhb> m: sub s(Str :$a, List :@l) { }; s(:a(1));
[21:39] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '$a'; expected Str but got Int (1)‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[21:39] <patrickb> m: sub s(List :@l, Str :$a) { }; s(:a("1"));
[21:39] <camelia> rakudo-moar 254a9cb33: ( no output )
[21:40] <japhb> I think the fact that it complains about the @l binding when the *other* argument doesn't match, but not when it does, is goofy.
[21:40] <japhb> So yeah, there's a bug there I think.
[21:40] <patrickb> I'm not convinced that it should be possible to get type missmatch errors for optionals I didn't pass.
[21:41] <japhb> patrickb: Since you didn't supply a default for @l, either Raku should intuit the type for the "default default", or it should error.  I think you're arguing for the former.
[21:42] <japhb> Er ... am I understanding you correctly?
[21:42] <patrickb> I think you understand correctly.
[21:43] <patrickb> m: my List @l; dd @l;
[21:43] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Array[List] @l = Array[List].new()‚ê§¬ª
[21:43] <patrickb> default working fine, or is this something different?
[21:44] <japhb> m: sub s(List @l?, Str :$a) { }; s(:a("1"));
[21:44] <camelia> rakudo-moar 254a9cb33: ( no output )
[21:44] <japhb> m: sub s(List @l?, Str :$a) { dd @l }; s(:a("1"));
[21:44] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Array[List] element = Array[Mu].new()‚ê§¬ª
[21:44] <patrickb> m: sub s(List @l?, Str :$a) { }; s(:a(1));
[21:44] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '@l'; expected Positional[List] but got Array ([])‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[21:44] <japhb> Yeah, I think that's a bug
[21:44] * patrickb rakudobugs
[21:54] <patrickb> m: sub s(Str :@l, Str :$a) { }; s(:a(1));
[21:54] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '@l'; expected Positional[Str] but got Array ([])‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[21:54] <patrickb> Does it even for the more common Str list.
[22:05] *** A26F64 left
[22:55] <Kaiepi> i can get the correct error to throw locally by modifying &handle_optional in the signature binder to consider the type parameters of @/%s
[22:55] <Kaiepi> let's see what roast thinks...
[22:57] <Kaiepi> m: sub s(Str @l?, Str :$a) { }; s(:a(1))
[22:58] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '@l'; expected Positional[Str] but got Array ([])‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:58] <Kaiepi> m: sub s(Str %h?, Str :$a) { }; s(:a(1))
[22:58] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '%h'; expected Associative[Str] but got Hash ({})‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:58] <Kaiepi> m: sub s(Str :%h, Str :$a) { }; s(:a(1))
[22:58] <camelia> rakudo-moar 254a9cb33: OUTPUT: ¬´Type check failed in binding to parameter '%h'; expected Associative[Str] but got Hash ({})‚ê§  in sub s at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[23:05] *** evalable6 left
[23:05] *** linkable6 left
[23:08] *** evalable6 joined
[23:14] *** Xliff left
[23:19] *** ProperN[out] joined
[23:19] *** ProperNoun left
[23:48] *** djerius left
[23:48] *** djerius joined
[23:51] *** dextercd left
[23:52] *** dextercd left
[23:54] <Kaiepi> ok so far
[23:56] <Kaiepi> ok so far
[23:56] *** kylese left
[23:59] *** kylese left
