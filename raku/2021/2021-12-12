[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:18] *** lichtkind left
[00:53] *** dextercd left
[01:06] *** djerius left
[01:09] *** djerius joined
[01:18] *** Geth__ joined
[01:19] *** monkey_ joined
[01:19] *** TempIRCLogger left
[01:19] *** Geth left
[01:19] *** lizmat left
[02:28] *** monkey_ left
[02:38] *** monkey_ joined
[02:49] *** monkey_ left
[02:52] *** monkey_ joined
[03:13] *** HrBollermann left
[03:57] <[Coke]> yo

[04:13] *** linkable6 left
[04:13] *** evalable6 left
[04:13] *** evalable6 joined
[04:15] *** monkey_ left
[05:15] *** squashable6 left
[05:15] *** committable6 left
[05:15] *** shareable6 left
[05:15] *** evalable6 left
[05:15] *** releasable6 left
[05:15] *** unicodable6 left
[05:15] *** quotable6 left
[05:15] *** bloatable6 left
[05:15] *** bisectable6 left
[05:15] *** notable6 left
[05:15] *** nativecallable6 left
[05:15] *** benchable6 left
[05:15] *** coverable6 left
[05:15] *** reportable6 left
[05:15] *** greppable6 left
[05:15] *** sourceable6 left
[05:15] *** tellable6 left
[05:15] *** statisfiable6 left
[05:16] *** committable6 joined
[05:16] *** frost joined
[05:17] *** notable6 joined
[05:17] *** nativecallable6 joined
[05:17] *** benchable6 joined
[05:17] *** releasable6 joined
[05:17] *** greppable6 joined
[05:18] *** statisfiable6 joined
[05:18] *** bloatable6 joined
[05:18] *** tellable6 joined
[05:18] *** unicodable6 joined
[05:19] *** sourceable6 joined
[05:21] *** tejr left
[05:22] *** tejr joined
[06:16] *** squashable6 joined
[06:17] *** evalable6 joined
[07:04] *** reportable6 joined
[07:14] *** frost left
[07:14] *** linkable6 joined
[07:15] *** frost joined
[07:17] *** quotable6 joined
[07:17] *** bisectable6 joined
[07:18] *** shareable6 joined
[07:26] *** seednode left
[07:27] *** seednode joined
[07:38] *** frost left
[08:05] <El_Che> ma

[08:17] *** coverable6 joined
[08:42] *** patrickb joined
[08:58] *** jjido joined
[09:23] *** lichtkind joined
[09:29] *** jjido left
[09:47] *** lizmat_ left
[09:48] *** lizmat joined
[09:51] *** jjido joined
[10:05] *** squashable6 left
[10:11] *** jjido left
[11:11] *** coverable6 left
[11:11] *** evalable6 left
[11:11] *** bisectable6 left
[11:11] *** shareable6 left
[11:11] *** notable6 left
[11:11] *** linkable6 left
[11:11] *** committable6 left
[11:11] *** releasable6 left
[11:11] *** unicodable6 left
[11:11] *** nativecallable6 left
[11:11] *** reportable6 left
[11:11] *** sourceable6 left
[11:11] *** benchable6 left
[11:11] *** statisfiable6 left
[11:11] *** tellable6 left
[11:11] *** greppable6 left
[11:11] *** bloatable6 left
[11:11] *** quotable6 left
[11:12] *** benchable6 joined
[11:12] *** reportable6 joined
[11:12] *** shareable6 joined
[11:13] *** sourceable6 joined
[11:13] *** notable6 joined
[11:13] *** committable6 joined
[11:14] *** bisectable6 joined
[11:21] *** Sgeo left
[11:48] *** riffraff joined
[12:02] *** whatnext joined
[12:02] *** reportable6 left
[12:04] <whatnext> Hello all :)  quick (quite basic) question: say I have a method I want to `wrap`, I can do `&mymethod.wrap({ ... })` - but how do I write this if `mymethod` is stored in `$variable` ?

[12:07] *** squashable6 joined
[12:12] *** tellable6 joined
[12:13] *** bloatable6 joined
[12:14] *** unicodable6 joined
[12:16] <El_Che> m: sub foo() {say "FOO"}; my $bar = sub {print "BAR"; foo()}; $bar.wrap(&foo); bar

[12:16] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bar used at line 1. Did you mean 'bag', 'VAR'?␤␤»

[12:16] <El_Che> it works here :)

[12:16] <El_Che> m: sub foo() {say "FOO"}; my $bar = sub {print "BAR"; foo()}; $bar.wrap(&foo); bar()

[12:16] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bar used at line 1. Did you mean 'VAR', 'bag'?␤␤»

[12:18] <El_Che> m: sub foo() {say "FOO"}; my $bar = sub {print "BAR"; foo()}; $bar.wrap(&foo); $bar()

[12:18] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «FOO␤»

[12:18] <El_Che> \o/

[12:22] <whatnext> hm ok thanks El_Che - but how about if I don't want to write `my $bar = sub { ... }` but instead refer to an existing method

[12:23] <whatnext> I mean the name of the method is stored in the variable, rather than the method itself

[12:23] <whatnext> this is really a question about how to write `&{$method}` (except this doesn't work)

[12:25] *** lichtkind left
[12:26] <whatnext> any ideas? :)

[12:29] *** whatnext left
[12:29] *** whatnext joined
[12:30] *** riffraff left
[12:30] *** riffraff joined
[12:35] *** riffraff left
[12:39] *** riffraff joined
[12:41] <El_Che> m: sub foo() {say "FOO"}; sub bar () {print "BAR"; foo()}; &<bar>.wrap(&foo); bar()

[12:41] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «BARFOO␤»

[12:42] <whatnext> ah wow brilliant... angle brackets eh? :)

[12:42] <whatnext> thanks!

[12:44] <whatnext> wait... isn't `&<bar>` same as `&bar` ie a literal?

[12:44] <El_Che> it's quoted

[12:48] <El_Che> m: sub foo() {say "FOO"}; sub bar () {print "BAR"}; my $baz = &bar; $baz.wrap(&foo); bar()

[12:48] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «FOO␤»

[12:48] <El_Che> lizmat is the one liner wizzard :)

[12:55] <whatnext> m: sub foo(){ say "hello" }; my $bar = 'foo'; my $baz = &$bar; $baz.wrap({ say "bye"; callsame }); foo();

[12:55] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «No such method 'wrap' for invocant of type 'Str'.  Did you mean any of␤these: 'Map', 'Rat', 'WHAT', 'grep', 'map'?␤  in block <unit> at <tmp> line 1␤␤»

[12:55] <whatnext> it's the `$baz = &$bar` part that I can't work out

[12:56] <El_Che> one layer of indirection too many :)

[13:00] <El_Che> I personally tend to use a dispatch table for that kind of stuff:

[13:00] <El_Che> m: sub foo(){ say "hello" }; my %dtable = 'foo' => &foo; my $baz = 'foo'; %dtable{$baz}.wrap({say "bye"; callsame }); foo();

[13:00] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «bye␤hello␤»

[13:02] <whatnext> that still involves writing the method as a literal though. Thanks for your help anyway El_Che :)

[13:03] <El_Che> one can try

[13:03] <El_Che> wait for the wizzard

[13:03] <El_Che> s

[13:04] *** reportable6 joined
[13:12] *** riffraff left
[13:13] *** coverable6 joined
[13:14] *** greppable6 joined
[13:14] *** evalable6 joined
[13:26] *** monkey_ joined
[13:46] *** jjido joined
[13:51] *** whatnext left
[14:12] *** dextercd joined
[14:14] *** releasable6 joined
[14:17] *** riffraff joined
[15:10] *** riffraff left
[15:10] *** whatnext joined
[15:10] *** riffraff joined
[15:11] *** riffraff left
[15:12] *** riffraff joined
[15:14] *** quotable6 joined
[15:14] *** linkable6 joined
[15:19] *** riffraff left
[15:21] *** whatnext left
[16:07] <discord-raku-bot> <Anton Antonov#7232> Is there are a "standard" name for the last evaluated result in REPL? (Something like `_` in Python or `%` in Mathematica.)

[16:10] *** jjido left
[16:12] *** statisfiable6 joined
[16:32] *** jjido joined
[16:33] <tbrowder> g'day, rakuuns

[16:34] <tbrowder> how do i programmatically check for an installed 'fez'?

[16:34] <tbrowder> i've tried 'try require fez'

[16:35] <tbrowder> and 'try require Fez'

[16:35] <El_Che> discord-raku-bot: Anton Antonov#7232: not that I know off, it's called a sink context in raku

[16:36] <El_Che> https://docs.raku.org/language/contexts#Sink

[16:43] <tbrowder> never mind, just found solution in docs i think (as i eat humble pie once more)...

[16:59] <discord-raku-bot> <Anton Antonov#7232> El_Che, Thank you!

[17:03] <tbrowder> back again, it didn't work as expected. the library's name is 'fez' and provides several modules named Fez::*.

[17:10] <tbrowder> bummer, fumble fingers again...disregard all above...

[17:21] <tbrowder> ok, success. i tested for: try require ::("Fez::CLI"); die if ::("Fez::CLI") ~~ Failure;

[17:22] <tbrowder> whew!

[17:32] *** evalable6 left
[17:32] *** linkable6 left
[17:34] *** linkable6 joined
[17:48] *** marcbr joined
[17:48] *** bars0 joined
[17:49] *** bars0 left
[17:52] <marcbr> Hi Raku developers . At first, I would like to congratulate for the great work. I would like to know what are advantages of Raku over Python mainly if Raku has GIL like python. Do you think that Rku could have a good numerical library as numpy for scientific application such as AI/ML?

[17:52] <marcbr> I main job is work with ML/DL in python. I would like to see more Raku in the area. What d  you think? It is work while?

[17:57] <codesections> Huh, another day, another Raku Advent calendar post on the hacker news front page.  Congrats, pheix!

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:06] <El_Che> (s)he left :)

[18:30] <discord-raku-bot> <Anton Antonov#7232> I have a list of arrays, say, `$dfGrouped` and join them into one array with ` $dfGrouped.reduce( -> $x, $y { [|$x, |$y] } )`. Is there are shorter, more elegant way of doing that?

[18:32] *** marcbr left
[18:35] *** evalable6 joined
[18:35] *** dogbert17 left
[18:40] *** squashable6 left
[18:41] *** squashable6 joined
[18:43] <codesections> [$dfGrouped.flat]

[18:56] *** ggoebel joined
[18:57] <ggoebel> marcbr: raku does not have a GIL like python. It has parallelism, concurrency, and asynchrony baked in. https://www.youtube.com/watch?v=JpqnNCx7wVY

[18:57] <tellable6> ggoebel, I'll pass your message to marcbr

[19:00] *** abraxxa-home joined
[19:03] *** dogbert17 joined
[19:03] <tbrowder> marcbr: but there is a thread on per6users about getting some raku ppl together to work on something similar

[19:03] <tellable6> tbrowder, I'll pass your message to marcbr

[19:06] *** ggoebel left
[19:08] *** Sgeo joined
[19:12] *** nativecallable6 joined
[19:31] *** squashable6 left
[20:05] <discord-raku-bot> <Anton Antonov#7232> codesections Thank you!

[20:11] <discord-raku-bot> <Anton Antonov#7232> codesections -- `[$dfGrouped.flat]` actually, this does not work for me.

[20:20] *** jjido left
[20:32] *** squashable6 joined
[20:44] *** abraxxa-home left
[21:31] *** jjido joined
[21:44] *** jjido left
[21:57] *** slowtyper left
[21:58] *** slowtyper joined
[22:58] *** linkable6 left
[22:58] *** evalable6 left
[23:01] *** linkable6 joined
[23:13] *** ggoebel joined
[23:15] *** patrickb left
[23:15] <ggoebel> m: [[0,1],[2,3],[4,5]>>.List.flat.say

[23:15] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in array composer; couldn't find final ']' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3[[0,1],[2,3],[4,5]>>.List.flat.say7⏏5<EOL>␤    expecting any o…»

[23:15] <ggoebel> m: [[0,1],[2,3],[4,5]]>>.List.flat.say

[23:15] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(0 1 2 3 4 5)␤»

[23:16] <merryprog> you'd think a flat list would have square brackets, not parentheses...

[23:16] <merryprog> (Sorry)

[23:31] <ggoebel> m: my $dfGrouped = [[0,1],[2,3],[4,5]]; $dfGrouped>>.List.flat.say

[23:31] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «(0 1 2 3 4 5)␤»

[23:32] *** discord-raku-bot left
[23:32] *** dextercd left
[23:32] *** discord-raku-bot joined
[23:32] <gfldex> dd [[0,1],[2,3],[4,5]].duckmap: |*;

[23:32] <gfldex> m: dd [[0,1],[2,3],[4,5]].duckmap: |*;

[23:32] <camelia> rakudo-moar b5a71ab2a: OUTPUT: «Array element = [0, 1, 2, 3, 4, 5]␤»

[23:36] <ggoebel> nice

[23:58] *** evalable6 joined
