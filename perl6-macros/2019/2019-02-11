[09:00] *** Ven`` joined
[09:49] <Ven``> masak: feels to me like assoc levels should be constants, not strings

[09:50] <Ven``> have we ever discussed this(?)

[09:50] <Ven``> .oO( TMTM; Too Minor To Matter )

[09:51] <Ven``> surprised by this change of traits=>decorators

[09:51] <Ven``> well, I know it's in a branch for now.

[09:52] <Ven``> I recall a talk about adding decorators to Ruby (it featured 2 other nice features), masak: does that ring a bell?

[10:04] <Ven``> https://www.youtube.com/watch?v=ZjYgNnCtpg4

[10:35] <masak> no, not really

[10:36] <masak> I'm in a region right now where I can not easily consume YouTube videos; however, I will add it to my list of things to watch

[10:37] <masak> Ven``: agree about constants, by the way

[10:37] <Ven``> oh! I know this kind of list. It's an append-only list, it never shrinks :P

[10:37] <masak> here's what happened: I made the straightforward change in that branch, and then immediately saw that with decorators, it can't be "spelled" the same way as traits

[10:37] <Ven``> my "Watch Later: Prog" is at 166 videos now :-(

[10:38] <masak> I don't remember if I made an issue about that, or if I only dreamed doing so

[10:41] <masak> `is tighter(infix:<+>)` looks fine, but `@tighter(infix:<+>)` looks dodgy

[10:42] <masak> I think I ended up wanting `@prec.tighter(infix:<+>)`

[10:43] <Ven``> why does it look dodgy?

[10:43] <masak> without the `is`, I think there isn't enough contextual information about what's tighter than what exactly

[10:44] <masak> it could mean (as intended) "this thing I'm declaring is tighter than infix:<+>", or "here's infix:<+>, which is tighter"

[10:44] <masak> hm, so maybe `@prec.tighterThan(infix:<+>)` would be preferable

[10:47] <Ven``> while I understand your point, I wouldn't think this matter would be the one to sway you for/against decorators or traits.

[10:48] <masak> no, not at all

[10:49] <masak> but what swayed me wasn't one single thing, I think

[10:50] <masak> to some extent whether it's spelled `is` and sits after the parameter list, or spelled `@` and sits before the entire declaration, doesn't matter all that much

[10:51] * Ven`` nods

[10:52] <masak> I think I enjoy the decorators more, esthetically

[10:57] <Ven``> I like flat, I dislike "unjoined/separated"

[13:04] <masak> `is assoc` being flat and `@assoc` being separated? not sure I can connect those descriptions to something.

[13:12] *** lucasb joined
[14:06] <Ven``> no, @ is both flat and separated. flat on the screen (it's aligned with the function) but separated because it's on a different line

[14:13] <masak> I've toyed around with writing `@set has someAttr;` in some places. that seems to work. but for the longer things like @prec and @assoc, it pushes the `func` keyword too far off to the right.

[14:17] <Ven``> like P6's `class X { does Y; }`?

[14:21] <masak> no, the Perl 6 equivalent would be something like `has $.someAttr is set;`

[14:24] <Ven``> ah, OK

[22:22] *** lucasb left
