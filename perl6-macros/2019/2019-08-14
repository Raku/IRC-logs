[12:03] *** lucasb joined
[14:10] *** Ven`` joined
[14:12] <Ven``> masak: you understand the question clearly. The interesting distinction is not actually invoke or define, it's: is foo a macro or a function?

[14:12] <Ven``> in one case, this kind of code makes sense, in the other case, it doesn't

[14:14] <masak> hmmm

[14:14] <masak> I'll need to run this through the analytical parts of my brain, but this sure seems related to the "`return` is lexical" vs "`return` is late-bound" discussion that we've had

[14:15] <Ven``> yes, for sure :)

[14:16] <Ven``> did you push any version of the pseudo-code we wrote for the walker?

[14:16] <Ven``> well, and we need to finish that discussion someday...

[14:16] <masak> aye, it's in a branch

[14:21] <masak> https://github.com/masak/007/tree/masak/succinct

[14:28] <Ven``> ?

[14:28] <Ven``> I don't see the pseudo-007 code

[14:29] <masak> oh! I believe I closed that one, but I can recreate it if you want

[14:29] <masak> it was only a few lines

[14:44] <Ven``> (defsuccint f (a b)

[14:44] <Ven``>    (let ((tmp a)) 

[14:44] <Ven``>      (setq a b)

[14:44] <Ven``>      (setq b tmp)))

[14:45] <Ven``> does that seem Good Enough™️ to try and make work?

[14:49] <masak> yes, that captures it, methinks

[14:50] <masak> note that we still don't have locations in 007/Alma, and we can't get @succinct to be entirely correct before we do

[14:50] <masak> and I still don't consider the whole theory of how @succinct interacts with data flow to be Fully Worked Out

[14:50] <Ven``> (installation of the name `f` here is gonna be without any regards to hygiene because I don't think it matters)

[14:52] <masak> right

[15:00] <Ven``> wow, it's really interesting. as I suspected, phase separation is an issue

[15:02] <Ven``> well, makes this non-obvious

[15:06] <Ven``> ...and once again, the ',' pattern surfaces...

[15:07] <Ven``> well, ', is pretty much what 007 does for you

[15:07] <Ven``> ',x is "bring x to this phase level, but re-quote it because I need it quoted"

[15:08] <masak> I did not fully understand that latter part

[15:13] <masak> (and I suspect it's related to what I didn't understand when we talked about it last week)

[15:13] <Ven``> OK, example:

[15:13] <Ven``> > (let ((a (list 1 2 3))) `(loop for i in ,a sum i))

[15:13] <Ven``> (LOOP FOR I IN (1 2 3) SUM I)

[15:14] <Ven``> the " ,a " did bring "a" from the "outer context" to " `'s context"

[15:14] <Ven``> but now since it's not quoted anymore, the code here doesn't work: (1 2 3) is an invalid funcall

[15:15] <Ven``> compare with:

[15:15] <Ven``> > (let ((a (list 1 2 3))) `(loop for i in ',a sum i))

[15:15] <Ven``> (LOOP FOR I IN '(1 2 3) SUM I)

[15:15] <Ven``> now that's legal

[15:15] <masak> nodnod

[15:17] <Ven``> but here it's *really important* that we use '

[15:17] <Ven``> > (let ((a (list 1 2 3))) `(loop for i in `,a sum i))

[15:17] <Ven``> (LOOP FOR I IN `,A SUM I)

[15:17] <Ven``> we do not have quoting in 007

[15:18] <Ven``> `quote { {{{ a }}} };` would just generate Q::Unquote(...);

[15:18] <Ven``> it makes sense to have unquotes inside of a quote

[15:18] <Ven``> here, that's pretty much what I figured out since we last talked.

[15:19] <masak> I need to come back and re-read all this when I have more brainpower

[15:20] <masak> "we do not have quoting in 007" -- I need to understand this better. I take it you don't see a quote then as just a quasiquote with zero unquotes?

[15:21] <Ven``> ok -- no real quoting. We can't have a non-interpreted quote.

[15:22] <Ven``> which would be the only place where an unquoted would make sense. Like here in lisp

[15:24] <masak> we have things like `new Q.Identifier { name: "foo" }` :)

[15:33] <Ven``> yeah hygiene means it's more complex in 007

[15:43] *** Ven`` left
