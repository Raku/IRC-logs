[00:34] *** lucasb left
[13:52] *** lucasb joined
[16:32] *** Ven`` joined
[16:35] <Ven``> masak: I'm glad you like me sometimes :P

[16:36] <Ven``> I think we'll never need to generate unquotes. After all, we can just make an II"M"E (Immediately Invocated Macro Expression) and nest them if needs be.

[16:38] <Ven``> and I think I'm starting to *like* that Alma's hygiene doesn't require unquotes all over the place

[16:38] <Ven``> At least I still haven't found an issue with it. But I'm sure "no hygiene" is the reason CL doesn't want to do that.

[16:40] <Ven``> Also I'm often wondering "will that even work", and, well, declaring the name isn't, but otherwise...

[17:07] *** Ven`` left
[17:09] *** Ven`` joined
[17:13] *** Ven`` left
[17:17] *** lucasb left
[18:21] *** lucasb joined
[19:42] *** Ven`` joined
[21:08] <masak> :)

[21:10] <masak> Ven``: I'm curious; in CL, is there a programmatic way to generate a comma/unquote?

[21:11] <Ven``> masak: no, not really:

[21:11] <masak> I suspected not

[21:11] <Ven``> * ,1

[21:11] <Ven``> debugger invoked [...]:  Comma not inside a backquote.

[21:11] <masak> right

[21:12] <masak> but I don't mean syntax

[21:12] <masak> I mean a way to create a (quoted) piece of code with a comma in it

[21:12] <Ven``> did you imply lisp has syntax? ..:) just joking

[21:12] <masak> like, if you wanted to build an unquote but for some reason can't type it out

[21:12] <Ven``> er, I guess ``,,1 technically?

[21:12] <Ven``> gives `,1

[21:14] <Ven``> no, I don't think so. ' is (quote), but I'm not sure about the rest

[21:14] <masak> I think I mean something that *isn't* a comma itself

[21:14] <masak> like, ' means (quote ...)

[21:14] <masak> ` means, um, (quasiquote ...) ?

[21:14] <masak> does , expand into some list-y expression?

[21:16] <Ven``> no, there's no (quasiquote)-like

[21:16] <masak> (and secretly, I'm hoping the answer is "no, there isn't because it doesn't even make *sense*, because the comma makes a *hole* in the syntax, it isn't syntax in itself...")

[21:16] <Ven``> probably because the semantics are very removed from everything else

[21:17] <masak> because the above

[21:17] <Ven``> yup

[21:22] <masak> maybe it makes sense to say that the comma is implicitly parameterized on/connected to its surrounding backtick

[21:23] <Ven``> which, tbh, is probably one of the things that have convinced me

[21:28] <masak> interestingly, this mechanism is also the deciding characteristic of slangs -- although even so, quasiquotes are a bit special because they riff off of the language they are _in_, adding holes

[21:33] <Ven``> I guess

[21:33] <Ven``> rather they create a version of the language where everything is quoted, except for those holes

[21:34] <masak> hmmm -- I'll have to think about whether I think that's true for Perl 6/Alma

[21:34] <masak> well, obviously, we're in a quasiquote, so everything's quoted

[21:34] <masak> but as you said yourself, we also have more/easier access to the surrounding unquoted scope

[21:34] <masak> than does CL

[21:38] <Ven``> I don't think that's important

[21:38] <Ven``> data vs code is

[21:38] <masak> well

[21:38] <masak> in that case

[21:38] <Ven``> 1 + 1 vs Q.Infix.new(Q.LitInt.new, Q.LitInt.new)

[21:38] <masak> a quasi language definitely produces data, not code

[21:38] <masak> I think I see clearly what you mean now

[21:38] <Ven``> :)

[21:39] <masak> and that's also a way to see why unquotes don't make sense out in the code language

[21:39] <masak> there's nothing to unquote from if we're not already quasiquoted

[21:39] <Ven``> right, you can go from data to code, but nowhere outside from that

[21:42] <Ven``> well, I should probably get some sleep

[21:42] <masak> code takes itself to seriously. you give it some stuff, and it actually _executes_ it. so gauche.

[21:42] <masak> too*

[21:42] <Ven``> very french

[21:42] <masak> anyway, sleep well

[21:43] <masak> but it's also very French to be abstract, like data :)

[21:43] <Ven``> I need to take a look at how far from reality my gist is

[21:43] <Ven``> well, `macro {{{foo}}} {}` most probably is...:)

[21:45] <masak> that one should be fine

[21:45] <Ven``> oh?

[21:45] <masak> if we want, we can even make it exactly that

[21:45] <masak> I've been thinking about whether to allow that kind of thing

[21:45] <Ven``> I didn't realize.

[21:45] <masak> similarly `1 {{{op}}} 2` could be made to work, I think

[21:46] <masak> we could put defaults aside from "term" in various places

[21:46] <masak> it's mostly a question of how complicated we want to make the rule for that

[21:46] <masak> this is the part that is not at all like Lisp :) because we actually have syntax, and grammatical categories

[21:46] <Ven``> well the question was more about installing names to outside-of-the-macro

[21:47] <masak> oh, ok

[21:47] <masak> well

[21:47] <Ven``> *especially a macro*

[21:47] <masak> there's now Q.Identifier (used mostly for naming things) and Q.Term.Identifier (used mostly for lookup)

[21:47] <masak> the thing in `{{{foo}}}` would be the former

[21:47] <masak> but if it's the latter, I don't think that's a big problem, because we can convert silently

[21:48] <Ven``> ok, but how do you call it? `defsuccinct(my swap, ...)`?

[21:48] <masak> oh, ok

[21:49] <masak> I need to look a little bit at how Python does its annotations, and then decide how much of that we can use (given we have macros and Python doesn't)

[21:49] <masak> but `@succinct macro swap(` is what I have in mind

[21:49] <Ven``> yeah, annotations are a special case

[21:49] <Ven``> I didn't really mean that

[21:49] <masak> that is, `@succinct` is the macro-macro here

[21:50] <Ven``> those can cheart

[21:50] <Ven``> -r

[21:51] *** Ven`` left
