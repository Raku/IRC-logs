[04:21] *** Ven` joined
[04:26] *** Ven` left
[06:52] *** Ven` joined
[11:11] *** Ven` left
[11:55] *** Ven` joined
[13:28] <Ven`> https://perl6.org/archive/rfc/309.pod

[13:29] <Ven`> that rings a bell

[13:44] <masak> interesting.

[13:44] <masak> it reminds Cozens of TeX. it reminds me of Smalltalk.

[13:44] <masak> I guess it reminds you Ven` of that mixfix stuff.

[13:50] <Ven`> it does :P.

[13:57] <Ven`> it also reminds me of is parsed, obviously

[13:58] <masak> I think it's significant that Perl 6 didn't get this in the main language

[13:58] <masak> instead it got named arguments/parameters

[13:59] <masak> which are slightly less "wild" (by having colons as obvious markers) but fill the same "visual" need

[14:00] <Ven`> adverbs!!!!

[14:01] <masak> adverbs are named arguments' wild cousin, yes

[14:01] <Ven`> adverbs are to named args what perl is to ruby :P 

[14:01] <Ven`> the free-form, insane version

[14:01] <masak> did you know we almost got Manhattan distance as an integral part of how multimethod dispatch works in Perl 6?

[14:02] <masak> what we got instead was less powerful, but also much more tractable/reasonable

[14:02] <masak> I'm afraid I can't say the same about adverbs

[14:03] <masak> they seem much more to me like they expect the user to do calculations in their head of a difficulty similar to that of Manhattan distance

[14:03] <Ven`> .oO( CommaIDE will fix it ) :P

[14:04] <masak> my go-to example: `if %h<foo> :exists { ... }`

[14:04] <masak> how do you negate this?

[14:04] <masak> well, you change the `if` to `unless`, of course

[14:04] <Ven`> either :! or not

[14:04] <masak> or you add a simple `!`: `if !%h<foo> :exists { ... }`

[14:04] <Ven`> certainly not ! :D

[14:05] <masak> no, certainly not

[14:05] <masak> because now your code is broken

[14:05] <masak> let's just say I love features that are "orthogonal" enough so that simple refactors that you expect to have no change on the program actually have no change

[14:05] <masak> adverbs are not orthogonal in that sense

[14:06] <masak> they ride up and down the AST like a boat in a storm

[14:07] <Ven`> except the sea is lava

[14:07] <masak> and I claim that in order to even understand what just went wrong in the above case, the developer must have a clear-enough understanding of how operators are lifted into an AST

[14:08] <Ven`> no, I disagree with that

[14:08] <masak> whereas in reality most users program at a level of familiarity somewhere around a vague understanding of precedence

[14:09] <masak> I mean, no-one would be happier than I if there's a perfectly trivial way to explain how adverbs work

[14:09] <Ven`> "well, when a term and a colon love each other very much, .."

[14:10] <Ven`> yeah understanding precedence is very necessary

[14:10] * masak .oO( the adverbs and the bees )

[14:10] <Ven`> that's for sure

[14:11] <masak> I'm pretty sure I understand how precedence works. I've *still* made the above mistake in earnest -- and immediately understood where I went wrong, but still felt that the *way* I understand it shouldn't really have to come into play.

[14:12] <masak> precedence is one of these features where it's only really exposed when it breaks people's expectations

[14:12] <masak> like with ! and instanceof in Java

[14:12] <masak> because the natural tendency is to not want to swap in all the intricacies of precedence

[14:13] <masak> it's less about proficiency actually and more about cognitive load

[14:39] *** Ven` left
[14:40] *** Ven` joined
[16:30] *** Ven` left
