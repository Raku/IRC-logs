[07:30] <masak> Ven: ok -- for some reason that's what I expected you to say

[07:30] <masak> Ven: I mean, it is a re-packaging of the idea of "watcher macros", so I basically already got your reaction once

[07:31] <masak> Ven: I dunno, I'm not betting on the idea being viable or anything. but it does feel like it solves a bunch of related use cases

[07:31] <masak> two or three are linked from #349, but maybe it's only clear in my head how it'd work :)

[07:32] <masak> I *definitely* prefer the `is context` trait to all the strange ideas I had about an `inside` block

[08:36] <masak> Ven: I wrote out a concrete example for you with & and | in #349

[11:22] *** Ven`` joined
[11:33] <Ven``> masak: I certainly find it saner than watch macros :)

[11:40] <masak> good :) that's all I could hope for

[11:40] <Ven``> feels like it's missing some parentheses to me, in the examples, btw

[11:41] <masak> why? `==` is tighter than `&&` and `||`

[11:41] <Ven``> what guarantees context.root.op is ==?

[11:41] <Ven``> ah, in this case it doesn't matter

[11:41] <masak> the `is context`

[11:41] <masak> it only captures a root of that prec level

[11:42] <masak> note that the macros also hinge on a (not yet in 007) distinction between *ops* and *op applications*, which I think you'll like

[11:42] <Ven``> I don't understand how that works in practice

[11:45] <Ven``> when/how is opLhs set?

[11:45] <Ven``> also, you use context.root.op but the key is called "level", hence why I got confused I think

[11:46] <masak> the macro triggers when the context root has finished parsing -- that is, when the `==` and its rhs/lhs are all parsed

[11:46] <masak> perhaps realistically the macro will trigger somewhat later, when the whole expression has finished parsing

[11:48] <Ven``> ah so it's not so much saner than watch macros

[11:48] <masak> haha

[11:48] <masak> ...no, guess not

[11:48] <masak> it's still done with two "players" -- the deeper macro and the shallowed context root

[11:50] <Ven``> I still feel uneasy about inside-out macros

[11:55] *** Ven`` left
[11:55] <masak> is there some way to express those reservations, aside from the emotional aspect? (which I get, kinda)

[11:55] *** Ven`` joined
[11:56] <masak> 1 backlog

[11:56] <Ven``> damn it, train

[11:57] <Ven``> well, I think I explained better than the text yesterday. I thought the idea was more akin to... help build DSL, like we talked about a long time ago, by declaring that some macro can only exist in the context of another (we used transaction/commit as an example). I think I mixed both.

[11:57] <Ven``> Inside-out macros make me uneasy because this is the opposite order of how it usually goes: a macro runs as soon as it itself is complete

[11:58] <masak> agreed.

[11:58] <Ven``> A macro that runs only when whatever contains it finishes parsing instead makes me feel very uneasy because I can think about many situations of when that could be problematic (but maybe it's not actually)

[11:58] <masak> let's see if the following helps:

[11:58] <Ven``> for "contextual" macros, I don't like that it feels like declaring a global, I don't like that it feels like... something is "shared" between & and ^, when really, it's just using the same mechanism to trigger

[11:59] <masak> (a) I expect a contextual macro should either *eventually* run when its context is parser, or *immediately* throw a parse error about being outside its context

[11:59] <Ven``> that's why "(a & b) == c" makes me uneasy :)

[11:59] <masak> (b) I expect a macro invocation that survives until runtime should throw an exception, because calling that macro at runtime doesn't do anything useful

[12:00] <masak> oh damn, `(a & b) == c`...

[12:00] <masak> yeah, my test implementation is definitely wrong :(

[12:01] <masak> it assumes the junction ops are on the rhs of the `==`, which is not at all guaranteed

[12:01] <masak> I blame lack of coffee

[12:01] <masak> or possibly too much coffee

[12:02] <Ven``> so, really, we have == that's actually a DSL

[12:02] <Ven``> and is context is a tool to help build a DSL by adding "sublexical grammar" to it

[12:02] <masak> that's one way of putting it, yes

[12:03] <masak> but it's not so much a DSL that it brings a completely new evaluation semantics to `==`

[12:03] <masak> just an augmented one

[12:03] <Ven``> my only point with that was, that it's really pretending == is a macro, that treewalks to find ^, & and rewrite itself if they are found

[12:04] <Ven``> the idea of composability is certainly an interesting one

[12:05] <Ven``> macros aren't usually composable, er, augmentable like the point you're making here

[12:06] <Ven``> (well, here it isn't a macro that's augmented, but...)

[12:06] <masak> https://github.com/masak/007/issues/349#issuecomment-409551778

[12:07] <masak> the .cloneAndSubstitute thing seems like a common thread through all the use cases

[12:07] <masak> maybe a better name is called for -- .template, perhaps?

[12:08] <masak> it's kind of the opposite of a quasi block in a way, in that you're not interested in specifying all the unchanging bits, you just want to find an unquote slot to stick your varying part in

[12:09] <Ven``> the way I see it, in a current lisp-ish macro-ish way, would be to define `==` as a template where you look for & and ^, like I wrote earlier

[12:09] <Ven``> which might be template-ish

[12:09] <Ven``> in the scheme/racket/nim template sense

[12:09] <Ven``> "syntax rules"

[12:10] <masak> aye

[12:10] <masak> I'll just say for now that I'd like to understand template rules a bit better

[12:10] <masak> and Racket in general, I guess

[12:11] <Ven``> I'd like a bit more info on cloneAndSubstitute ;)

[12:34] <masak> it's basically the logical conclusion of what I'm trying to do here: https://github.com/masak/007/issues/158#issuecomment-304233756

[12:44] <Ven``> how very inside-out of you

[12:44] <Ven``> let me re-read that one!

[12:44] <masak> well, the `inside` idea is a dead end

[12:44] <masak> the important bit is the line with `return statement_ast.clone().find(...).replace(expr_ast);`

[12:45] <masak> it feels to me that's a recurring pattern with these contextual macros

[12:45] <masak> "in the grander context, I'd like to be replaced with..."

[12:45] <Ven``> I enjoy the jquery analogy

[12:46] <masak> yup

[12:53] *** Ven`` left
[12:57] *** Ven`` joined
[12:58] <Ven``> ok, so:

[12:59] <Ven``> $("infix:<==>").on("infix:<&>", sub (lhs, rhs, eqOp) { ... })

[13:05] <masak> yeah, something like that

[13:06] <Ven``> bind(&infix:<==>, sub infix:<&>(lhs, rhs, context/* this argument added by the bind macro */) {

[13:06] <Ven``>   context.replaceWith(...);

[13:06] <Ven``> });

[13:07] <Ven``> we can look at such a high-level API first, for sure

[13:07] * masak nods vaguely

[13:07] <Ven``> my first gut feeling is that the sub should return a new AST for the toplevel (infix:<==>) one, not for a infix:<&> (otherwise just write macro infix:<&>)

[13:08] <Ven``> I kind of want to talk to cog++ about this, too, this feels reminescent of a project he worked on

[13:10] <masak> agree about the gut feeling

[13:10] <masak> actually my first instinct was that context macros wouldn't return new ASTs but rather mutate the ASTs it was given, but... with something like .cloneAndSubstitute it looks like returning might be enough

[13:11] <Ven``> I don't believe in mutating ASTs :P

[13:11] <Ven``> feels wayyy too scary

[13:11] <masak> I can only agree fully

[13:12] <Ven``> I know of some "simple" langs that did, one in particular called OOC, and it was hell

[13:12] <masak> it's not that I *don't* want to do scary things, but rather that sometimes I don't spot the simpler option right away

[13:12] <masak> if I wanted to avoid scary things, I wouldn't have developed a macro-friendly language in the first place :P

[13:13] <Ven``> macro-"friendly", huh. As if not to scare them away :P

[13:13] <masak> heeeere, macro macro

[13:57] *** AlexDaniel` left
[13:57] *** AlexDaniel` joined
[14:50] *** Ven`` left
[22:43] *** Ven`` joined
[22:43] *** Ven`` left
