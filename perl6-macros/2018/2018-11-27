[06:34] *** ilogger2 joined
[10:43] <lucasb> so, "to keep an overall resemblance with Perl 6" is not one of the goals, right?

[10:47] <lucasb> the None value looks like the regular unitary null value I would expect from other languages, like P5's undef, Python's None, Ruby and Common Lisp's nil. Is that correct? I mean, it's different from P6 Nil which acts like a "control value" that tells the containers to reset themselves. do you agree with this statement? :)

[10:48] <masak> "resemblance with Perl 6" is neither a goal nor a non-goal

[10:49] <masak> the important thing is to let the needs of macros (and slangs) set the terms of the design

[10:49] <masak> with the implicit expectation that Perl 6 might have to do the same later as we re-integrate

[10:50] <masak> I agree with that statement. `None` in 007 is basically Python's `None`. there are no magic side effects during assignment, etc.

[10:50] <masak> on the other hand, I don't consider that to be an "essential" part of Perl 6. bet nqp doesn't have it, for example.

[10:51] <lucasb> I asked if resemblance was a goal because I wanted to ask you what are the chances of convincing you to change (True, False, None) into (true, false, nil) ? Zero? :-)

[10:52] <lucasb> I mean, "lowercase". Sure, not a important detail... but to me it matters :-)

[10:53] <lucasb> I was surprised to see True and False in P6. It looks like Python and Haskell, while JavaScript and Ruby, which have a much closer relationship with Perl, have lowercase literal boolean values, instead of Capitalized ones

[10:58] <lucasb> and if P5 had boolean values from start, I think it would obviouly have being lowercase, and P6 would have inherited that, and I wouldn't be talking about this in 2018 :-)

[11:19] <masak> chances are nonzero. I'm still thinking about that one

[11:19] <masak> see https://github.com/masak/007/issues/390

[11:19] <masak> it's closed on Github but still open for discussion

[11:22] <masak> I can totally see the argument for all-lowercase (or rather lower camelcase, but that's not used for those single words) -- the argument being that `true` and `false` (and `none`) are really *instances* of the enum, and if they were variables, that's how we'd write them

[11:23] <masak> the case for `nil` instead of `none` is harder to make, I think. (a) Python has it as `None`, and Python is one of the "parent languages" of 007; (b) `nil` to me has connotations of "empty list" and "the false value" which I don't feel apply to 007's `None` value

[11:57] <lucasb> with regard nil, ok I can see it reminds people of the empty list. I meant the "itemized" nil.

[11:58] <masak> https://github.com/masak/007/issues/390#issuecomment-442033343

[11:58] <lucasb> I would hope for "my @a = nil" to be a 1-element array containing the single value nil

[11:58] <lucasb> not the empty list

[11:59] <lucasb> wait!

[11:59] <masak> :)

[11:59] <lucasb> no! don't come to any conclusion yet! I'm not finished :D

[12:00] <lucasb> j/k

[12:00] <masak> fine

[12:00] <masak> but you should know I *am* ready to open an issue about `True False None` -> `true false none`

[12:01] <lucasb> I like capitalized enums like 'enum Color <Red Blue Green>', and so, makes sense 'enum Bool <True False>'. I like the symmetry

[12:01] <lucasb> I like that it endeds up as Bool::False, Bool::True

[12:01] <masak> me too.

[12:02] <lucasb> but I just think that booleans are *so* special that they deserver the *exception* of being called lowercase 'true' and 'false' for the convenience

[12:02] <masak> hm, there's another issue right there. should probably expose them like that already, since we can.

[12:02] <masak> lucasb: that's what I mean. we should be consistent across the board.

[12:03] <masak> lucasb: or at least endorse a small number of convensions, like maybe `enum Color <red blue green>` and `enum Color <RED BLUE GREEN>`

[12:03] <masak> I do like the argument though that if `red blue green` are in essence instances, then they should be lower camelcase for that reason

[12:04] * masak feels there's a distinct lack of reasons behind the current set of enum value capitalization practices in different languages

[12:04] <masak> in all fairness, most languages also probably don't insist that `true` and `false` be enum values

[12:10] <lucasb> to be honest, I don't feel 100% confortable with that fact that booleans are enums, but I accept it

[12:11] <lucasb> as we can see, every thing is the same: class Bit {...}; class Bool {...}; my Bit b = 0|1; my Bool b = True|False; 

[12:11] <lucasb> enum Bit <0 1>; enum Bool <True False>;

[12:14] <lucasb> The same way 'nil' is the only "singleton" value of the NilType, so is 'true' and 'false' the only "doubletons" of the Bool type. (?)

[12:16] <lucasb> https://en.wiktionary.org/wiki/doubleton hehe it really is a word

[12:16] <lucasb> (mathematics, rare) A set containing precisely two elements.

[12:16] <lucasb> precisely definition is precisely

[12:20] <lucasb> enums usually maps to integers... but 007 doesn't coerce True and False to 1 and 0

[13:17] <masak> see (forcefully opinionated) discussion in https://github.com/masak/007/issues/157

[13:25] <masak> I'm... willing to listen to reason, but I don't really see why `None` and `True False` *wouldn't* be booleans

[13:25] <masak> it's like, if they weren't already in the language from the start, they'd be defined as booleans

[13:26] <masak> er, "be enums" and "as enums" -- sorry, must be tired :)

[13:39] <lucasb> "Ditto None". Sorry, is None a unitary enum value?

[13:40] <masak> meant to be, yes

[13:41] <masak> basically, `enum NoneType { None }` right now

[13:41] <lucasb> ah, got it. thanks

[13:50] <masak> 007 has this poetic idea that everything that's in the language should be at least in principle definable on the user level

[13:54] <lucasb> and enums is the most easy way to define user-definable entities (correct?)

[13:54] <lucasb> in this case:

[13:54] <lucasb> enum NoneType <None>

[13:54] <lucasb> enum Bool <True False>

[13:55] <lucasb> if there was a "data" keyword instead of a "enum", it would be:

[13:55] <lucasb> data NoneType = None

[13:55] <lucasb> data Bool = True | False

[13:56] <lucasb> so... "enum Foo <A B C>" is similar to "data Foo = A | B | C". would you agree?

[13:57] <lucasb> but, doesn't enums implies coercibility to integers? whereas the "data" constructor doesn't say anything about coercing to ints

[13:59] <lucasb> +True == 1 and +False == 0   # <-- I want that!

[13:59] <lucasb> but I feel that "+None == 0" is strange

[14:01] <masak> :)

[14:01] <masak> I dunno. it's a strong-opinion-loosely-held, but I don't believe either of those make sense.

[14:03] <masak> I might be convinced that 1 and 0 respectively are the "obvious" values for True and False to convert to

[14:03] <masak> but I don't like the idea of those conversions being implicit anywhere in the language (like the `array[myBool]` example)

[14:04] <masak> and I'm borderline-willing to force everyone to be explicit (with `myBool ?? 1 !! 0`) just to make a point about the to-integer conversion not being an obvious thing

[14:05] <masak> I dunno :) like the last comment says, it's a tradeoff between purity and convenience

[16:57] <lucasb> https://github.com/masak/007/blob/master/lib/_007/Runtime.pm6#L407-L409

[16:58] <lucasb> hmm, contains returns an Int or Bool?

[17:24] <lucasb> https://github.com/masak/007/pull/440

[18:18] <lucasb> https://github.com/lucasbuchala/007/commit/f8f7e61c42c6cf4eeca120f5fc47219ba3d95777  All tests successful :)

[18:54] *** AlexDaniel` left
[19:14] *** AlexDaniel` joined
[19:56] *** AlexDaniel` left
[20:06] *** AlexDaniel` joined
[22:41] <lucasb> dunno how to use git :-D

[22:42] <lucasb> I trie to amend, but ended up creating multiple commits

[22:43] <lucasb> is it possible to squash all into one? I can start over with a single commit if you wish

[22:48] <AlexDaniel`> if you didn't push yet, then rebase is what you need

[22:49] <lucasb> I'm trying to fix :-)

[22:53] <lucasb> done :)

[22:54] <lucasb> I resetted locally then "git push --force"

[22:57] <AlexDaniel`> O_O

