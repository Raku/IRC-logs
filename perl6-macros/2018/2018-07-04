[08:06] *** Ven` joined
[10:13] *** Ven` left
[10:32] *** Ven` joined
[10:59] *** Ven` left
[11:39] *** Ven` joined
[12:18] * Ven` still wants to learn Simula `at some point

[12:19] <masak> :)

[12:20] <masak> I just discovered by accident that Simula used the "parameter list to class" syntax

[12:20] <masak> I'm in fact not so sure we ought to adopt that syntax -- I prefer to err on the side of boring/predictable/tried and true rather than opinionated/edgy

[12:21] <Ven`> My comment disappeared. Wtf, weechat.

[12:21] <Ven`> Anyway, yeah. Scala `case class`, Kotlin `data class`, C#8, ..

[12:21] <Ven`> Oh, C#7 even it seems.

[12:22] <masak> I would need to check out all of those

[12:22] <Ven`> I think TypeScript wanted to do the same (that is... Copy C#) but I'm not sure if they went through.

[12:24] <Ven`> In LiveScript (and previously in CoffeeScript), you could do `class then (@a, @b) ->` that is, the "constructor" is an anonymous function in the body (and generally the class body is executable)

[12:25] <masak> I think we talked about Julia having an executable body with some quasiquoting tendencies

[12:26] <Ven`> Maybe Julia, I admit to not really knowing the language. I do know Elixir has that tendency (but has no "classes").

[12:26] <masak> I mean, I'm not ready to do that exactly, but I do recognize the macro use case that people will want to "construct" their class using macros

[12:26] <Ven`> .oO( I very often wish learning natural languages were as easy as learning computer languages )

[12:26] <masak> it's the kind of thing that you can definitely do with a MOP... but maybe also with an ergonomic-enough macro system

[12:26] <Ven`> I do think we have an issue about MOP and macros interactions.

[12:27] <masak> no, me neither

[12:27] <masak> oh, you *do* think :)

[12:27] <Ven`> you don't?

[12:27] <Ven`> I think we talked aobut it in the context of Crystal, mhh

[12:27] <masak> well, my latest thought on the matter is that the class syntax should maybe desugar to MOP calls, like in Perl 6

[12:27] <masak> and then there is not much of a conflict

[12:27] * Ven` nods

[12:28] <masak> again, it mostly comes down to whether you want to macro-syntax it or MOP it

[12:28] <Ven`> If you're forced to use your own tools, they tend to suck less :).

[12:28] <masak> I have a weak point for bootstrapping

[12:28] <Ven`> Bootstrapping has a week point for bootstrapping...

[12:28] <Ven`> s/ee/ea/

[12:29] <masak> :P

[12:29] <masak> s/point/spot/

[12:29] <masak> no, I've been thinking about "007 is metacircular, but with a much bigger metacircularity loop than Lisp" in the past few days

[12:30] <masak> largely this is because parsing is trivial in Lisp, and so mostly is evaluation

[12:31] <masak> expressing them is "elegant" simply because there isn't much impedance mismatch between the data, the syntax, and the semantics

[12:31] <Ven`> the syn-what? :-P

[12:31] <masak> hehe

[12:31] <Ven`> .oO( I only ever write my Lisp as array literals )

[12:32] <masak> but a modern Algoloid (with macros) doesn't have that elegance. instead it favors things like precedence/associativity, lots of special forms, and in general lots of specialized syntax for different things

[12:33] <masak> it's an active choice, somehow. where Lisp radically favors a kind of consistency, modern Algoloids favor a kind of comfort

[12:34] <Ven`> well special form can mean most everything and anythin, as Dylan shows I think.

[12:34] <Ven`> A friend of mine is working on a lisp where you can use a syntax like ## x y to wrap the rest of the expression with (x y ...), which removes layers of parens

[12:34] <Ven`> it's just a tiny special form for people who think the issue iwth Lisp is the parens :P

[12:36] * masak should definitely look more at Dylan

[12:36] * Ven` too

[12:36] <masak> any suggestions for resources?

[12:37] <Ven`> https://github.com/vendethiel/read/issues/13, https://github.com/vendethiel/read/issues/1 is all I see to have.

[12:38] * Ven` looks at all the macros-related papers in that repo and sighs

[12:41] <masak> ooh, a 'read' repository. that's a good idea! <3

[12:42] <Ven`> Yeah, alas not enough things get closed...

[12:42] <Ven`> The "metaprog" tag is probably one for your interest

[12:45] <masak> noted.

[12:47] <Ven`> To say those papers I've been intending to read since like... 2013...

[12:48] <Ven`> Back when I wanted to add a macro system to LiveScript :P.

[12:50] <Ven`> yes, yes, famous last words and back to the drawing board.

[13:01] <masak> ;)

[13:10] <Ven`> Certainly, one thing I did not have to worry about is syntax: You can't make syntax overridable if there's pretty much never any syntax errors already :P.

[13:14] <masak> when I hear "pretty much never any syntax errors", the connotations are not all that positive ;)

[13:14] <Ven`> Says the Perlist!

[13:14] <Ven`> Well, it certainly wasn't meant to sound positive.

[13:14] <masak> _reformed_ Perlist, if you please ;)

[13:15] <Ven`> Sorry, I forgot you were a Java guy now ;)

[13:15] <masak> no, but, seriously, being a Perl 6 user is already an improvement on being a Perlist in that regard

[13:15] <masak> "this language takes any input you give it and attempts to make sense of it" is a dictum I can see *might* make sense to a certain mindset

[13:16] <masak> s/input/program/

[13:16] <Ven`> I need to re-read Programming Perl now that I've used 5 a bit. I read it only knowing Perl 6, and it certainly explained some choices, but I want to know more now.

[13:16] <Ven`> .oO( I guess that given/when Perl 5 explanation in the book might not be useful to me any further :P )

[13:16] <masak> being a Perl 6 user made me want to understand Perl 5 better too

[13:17] <masak> you might enjoy reading the Apocalypses, by the way

[13:17] <Ven`> Yeah, I certainly should. I do want to re-re-read the synopsis first.

[13:17] <Ven`> Wait, weren't they the exogeneses? My memory is failing me

[13:17] <masak> the Apocalypses are much more personal than the Synopses

[13:18] <Ven`> Not sure where they were moved now...

[13:18] <masak> the Apocalypses are authored by TimToady

[13:18] <masak> the Exigeses by TheDamian

[13:18] <Ven`> ohhh, right!

[13:19] <masak> https://perl6.org/archive/doc/apocalypse.html

[13:19] <Ven`> TimToady had a talk about the RFCs a few months back, I wonder if the data is there now...

[13:20] <Ven`> s/there/available publicly on the internet/

[13:21] <masak> https://perl6.org/archive/doc/exegesis.html

[13:21] <Ven`> thanks

[13:22] <Ven`> how should I read them? A1, E1, A2, E2, ..? :P

[13:22] <masak> sure, that makes sense

[13:23] <masak> in general, the A documents are TimToady going through the RFCs and "integrating" them into a design, and the E documents are TheDamian taking that design and "implementing" it as an example program

[13:23] <masak> of course, what I see when I read those nowadays is all the things we learned since then

[13:23] <masak> YMMV

[13:23] <Ven`> Yes, I see. Asked TimToady++ in #perl6, I'll see when he does drop by

[13:25] <Ven`> > Therefore one thing we must implement in Perl 6 is the ability to write meta-use statements that look like ordinary use statements but turn around and declare other things on behalf of the user

[13:25] <Ven`> More meta is always the solution!

[13:26] <masak> where was that from?

[13:26] <Ven`> A01

[13:26] <masak> it seems highly relevant to my musings in the `import` issue

[13:27] <Ven`> oh, I should fidn the RFCs list to go along.

[13:27] <Ven`> https://perl6.org/archive/rfc/ it is

[13:28] <masak> that particular RFC (16) is interesting because TimToady basically accepts it, but in practice it's been rejected by real-world Perl 6 usage

[13:29] <masak> Perl 6 in all its usages is much more similar to Perl 5 with `use strict;` and `use warnings;` switched _on_ by default

[13:29] <Ven`> And I like it that way

[13:29] <masak> and I can't really remember when I last saw someone dropped down to `v6;` slacker mode

[13:29] <masak> I certainly never do that

[13:29] <Ven`> Oh, that's how you do it?

[13:30] <masak> I... I *think* so

[13:30] <Ven`> I've long known there was *a way* to do that, but I've never used it

[13:30] <masak> I mean, I'm not sure, because I actively don't care, because it's, um, condtraindicated

[13:30] <masak> contra*

[13:30] * masak went for a term that's not offensive to anyone

[13:30] * masak mistyped the term, like a pro

[13:31] <Ven`> I'm offended by (cond)

[13:31] <masak> haha

[13:32] <masak> I learned the other day that LISP pioneered the `if` statement

[13:32] <Ven`> Wait, the E02 is actually for the A01?

[13:32] <masak> though since it must've looked like (IF A B C), I wonder which language it was that invented the words "then" and "else"

[13:33] <masak> Ven`: no, there just isn't an E01 for A01

[13:33] <Ven`> I seem to find BASIC to be the answer, but from wikipedia with no source

[13:34] <masak> could very well be true. BASIC is old.

[13:34] <Ven`> I'm not sure when COBOL got its -else

[13:34] <masak> but, hm, does BASIC really predate Algol 60?

[13:35] <Ven`> 1964

[13:35] <Ven`> probably not

[13:35] <Ven`> (when I tell people that LISP was basically invented within a year of COBOL, they tend to give me a weird look)

[13:35] <Ven`> > So there should be nothing preventing someone from writing a lexer regex that handles them, provided we make the lexer sufficiently mutable. Which we will.

[13:35] <Ven`> he he he he he.

[13:36] <masak> "the lexer"?

[13:36] <masak> ah, we were so young

[13:37] <masak> we still believed in lexers

[13:37] <Ven`> well, considering how much the lexer does in 5-land...

[13:37] <Ven`> if it quacks like a deity...

[13:37] <Ven`> .oO( and demands as many sacrifices as a deity )

[13:38] <masak> yes, that's the other thing

[13:38] <masak> back in the days of Axx and E0x, Perl 6 looked a *lot* like Perl 5

[13:39] <masak> you can see how the people who wrote it were mired in Perl 5 syntax and semantics

[13:39] <masak> I find that *fascinating*, and I also enjoy how far we've come since then

[13:39] <Ven`> what does `length @a` do in 5?

[13:40] <Ven`> oh, funny, A02 mentions "Unicode support level", something we discussed less than a month ago

[13:41] <masak> Ven`: `length @a` in Perl 5 is list length. `length $a` is string length.

[13:42] <Ven`> erm... isn't list length `scalar @a`?

[13:42] <Ven`> oh wow, `length @a` is actually the length of the size of @a, as in `length scalar @a`

[13:42] <masak> yes, but only because the latter delegates to the former, I believe

[13:43] <masak> er, no

[13:43] <Ven`> well, so it's list length's length

[13:43] <Ven`> it's not list length

[13:43] <masak> huh. it appears you're right.

[13:44] <masak> I was probably thinking of `reverse`

[13:44] <Ven`> ah, I think I read something about reverse

[13:46] <masak> http://strangelyconsistent.org/blog/the-taming-of-the-newbie-a-comedy-on-irc

[13:49] <Ven`> Perl 5 prototypes are... well beyond insane

[13:49] <Ven`> Oh, right, you speak mandarin, was it?

[13:50] <Ven`> My IRC client really doesn't like ??????.

[13:59] <Ven`> [Update: No, this confuses two different meanings of boolean. Use for =$*IN {...} instead.]

[13:59] <Ven`> haha

[14:01] <masak> yep, we used to have prefix:<=>

[14:01] <masak> the mandarin just means "haha"

[14:06] <Ven`> "school of fish, fish's mouth moving, exhaling sound"

[14:07] <Ven`> oh, japanese kinda-sorta stole it only. No japanese reading. (sorry, no cn dictionary on hand)

[14:07] <Ven`> seems like it only stole it for names...

[14:08] <masak> well, "exhaling sound" sounds like it could be "ha"

[14:08] <Ven`> yes, definitely

[14:09] <masak> I still feel "haha" looks very silly but "哈哈" looks extremely onomatopoetic

[14:09] <Ven`> well, in my term, "??" looks mostly... cryptic.

[14:09] <Ven`> Ah, unicode... tis a silly place.

[14:09] <masak> "UTF-8 is your friend!" as #perl6 says

[14:10] <masak> oh, or "our friend". apparently not yours

[14:10] <Ven`> >    print $data{key is NoteToSelf('gotta get a better name for this key')};

[14:10] <Ven`> that one is... gorgeous

[14:12] <masak> but whyyyy

[14:12] <masak> just use a comment

[14:12] <Ven`> well we *did* ban inline comments :P

[14:13] <masak> we... did?

[14:13] <Ven`> oh, yes, see A02 - RFC 102

[14:14] <masak> if you mean Perl 6, it resisted them for a long time, but then relented after badgering from perl6-lang

[14:14] <masak> now we have #`[ ... ]

[14:14] <Ven`> well, that bit is at the end of A02. it did ban them earlier in the document

[14:15] <Ven`> > La propri??t?? c'est le vol

[14:15] <Ven`> Damian speaks french, huh? or doesn't

[14:19] * masak .oO( tout le monde ne le fait pas? )

[14:19] <masak> it's called "lingua franca", after all :P

[14:22] <Ven`> Offensichtlich spricht niemand franzosisch!

[14:23] <masak> ;)

[14:31] <Ven`> > First: Larry is insane. This means more to me than anything in the language itself. I prefer my heroes to have a firm grasp on sanity. I was never a fan of Don Quixote. Larry says God talks to him, and tells him that He hates non-Perl programmers.

[14:31] <Ven`> some people...

[14:33] <masak> that's stevey, right?

[14:33] <Ven`> yes

[14:33] <masak> :(

[14:33] <Ven`> is he "known"?

[14:34] <masak> somewhat

[14:34] <masak> what I like about his writings is that he writes frankly about language issues that not many others writes about

[14:35] <masak> the above example somewhat excluded, though. I don't like that post, although it makes a handful of fair points

[14:35] <masak> again, the above point excluded

[14:38] <masak> I don't feel an urge to knee-jerk defend TimToady's sanity, but... I still consider STD.pm6 to be not only ground-breaking, but a thorough atonement for toke.c

[14:39] <Ven`> hahahha

[14:39] <masak> though I imagine Jeffrey Kegler would disagree about the "ground-breaking" part

[14:42] <Ven`> oh, interesting question I'm getting from a bit of code.

[14:42] <Ven`> Why didn't 5 keep its sigils-are-return-contexts for OO? 

[14:42] <Ven`> @foo->bar(), %f->g()

[14:43] <masak> I think you need to ask a core p5er that question

[14:43] <masak> but (fwiw) my "Perl 5 brain" tells me that code looks "wrong"

[14:43] <masak> I think because I expect a reference before the `->` part

[15:06] *** Ven` left
[15:10] *** Ven` joined
[15:20] <Ven`> It's always interesting to read the explanation of a feature you yourself wrote a few years back...

[15:21] * Ven` writes down: "remove `content` from perl6inyminutes at some point"

[15:21] <Ven`> contend*

[16:14] *** AlexDaniel left
[16:39] *** Ven` left
[20:16] *** AlexDaniel joined
