[01:01] *** Ven` joined
[01:06] *** Ven` left
[04:19] *** Ven` joined
[04:24] *** Ven` left
[08:04] *** Ven` joined
[11:34] *** Ven` left
[11:51] *** Ven` joined
[12:12] *** Ven` left
[12:16] *** Ven` joined
[12:17] <masak> I'm (slowly) writing a syntax highlighter for the 007 code in the documentation

[12:17] <masak> I'm writing it in 007, which is a fun exercise

[12:18] <masak> it scans the input twice (in the first step it finds the 007 code blocks, and in the second it does some kind of half-hearted tokenization)

[12:19] <masak> I find myself wanting to write a version that scans the input once -- maybe I'll write out an implementation of that using a Perl 6 grammar, and then try to "port" it to a handwritten state machine in 007

[12:19] <masak> or maybe a not-handwritten state machine in 007

[12:52] <Ven`> where's your markdown parser at? :P

[13:01] <masak> hehe, no no

[13:02] <masak> just interested in parsing the 007 parts for syntax highlighting here

[13:02] <Ven`> a declarative state machine does sound like an interesting idea for a macro

[13:02] <masak> yes, eventually

[13:03] <masak> related to that, I was mulling about whether there'd need to be like a "factory object" for building switch statements programmatically, or whether that could be easily-enough expressed through the Qtree API

[13:03] <Ven`> .oO( just let me put that idea in my proxy drawer )

[13:05] <masak> er, I meant that #perl6 question to be here :)

[13:05] <masak> Ven`: did you manage to catch https://github.com/masak/007/issues/410 ? :)

[13:05] <Ven`> .oO( just let me put that idea in my proxy drawer )

[13:05] <Ven`> oops, backwards key doesn't work like I thought it did

[13:05] <masak> oh, you read it

[13:06] <masak> I might publish it as a blog post, but time for blogging has been scarce of late

[13:06] <masak> is it, um, readable?

[13:06] <masak> I never quite know these days

[13:06] <Ven`> my end-of-studies test/presentation is this friday, so that's pretty much all I'm doing this week/did the past week

[13:06] <masak> oh, I see

[13:10] <Ven`> to give my opinion on it: that's something sweetjs had a bit of an issue with, only for readability sake though. It generated i.e. `var myvar123;` instead of `var myvar` for this exact reason, and sometimes that was a bit hard to read

[13:10] <Ven`> but really, if I write `my foo;` in 007, there's no technical reason the runtime has to remember the name of the variable. It could be renamed "1"

[13:10] <masak> yes, agreed

[13:10] <masak> in fact, I'm not proposing we do any alpha-rewriting

[13:10] <Ven`> (except debuggability, etc)

[13:11] <masak> my current best-effort view of what a variable use *is*, data-structure-wise, is a tuple (a, b) where a is the number of scopes up and b is a slot index in the resulting outer scope

[13:11] <Ven`> https://www.sweetjs.org/browser/editor.html# (just type in `var a = 1;` and compile for an example)

[13:12] <masak> (the linked gist goes into detail about that tuple convention)

[13:12] <Ven`> linked..?

[13:12] <masak> yeah, I get a_4

[13:12] <masak> linked from the issue

[13:12] <masak> https://gist.github.com/masak/4c1807775f60b86294e27c950f33dfd6

[13:12] <Ven`> I somehow missed it. Found it now.

[13:13] <masak> anyway, having to put numbers on the names of the variables is a problem that those who still cling to the textual/name nature of variables will run into, yes :)

[13:14] <masak> the tuple nature kind of avoids that, and (as a nice side effect) it leads to making a language where variable names are not allowed to have any runtime footprint

[13:15] * Ven` disagrees with the term:reduce macro

[13:15] <Ven`> at least the "parsed" block wouldn't look like that

[13:15] * masak listens

[13:17] <Ven`> I mean, no, but: the way <infix> is captured is wrong

[13:17] <Ven`> or: {{{op.identifier}}} is wrong

[13:17] <Ven`> because that seems to sacrifice hygiene

[13:17] <masak> mm

[13:17] <Ven`> er, I suppose not "sacrifice" but it's a violation. we're looking it up by name

[13:18] <masak> not really, but I see what you mean. it works under the *current* model of identifiers because identifiers are way overpowered

[13:19] <masak> but, op.identifier should probably be refactored to be op.routine (either a func or a macro) -- since referring directly to the routine and not via an identifier is totally kosher, and one layer of indirection less

[13:19] <Ven`> definitely

[13:19] <masak> then we wouldn't even need the {{{ }}}

[13:19] <Ven`> age-old...

[13:20] <Ven`> nope, not entering this debate again

[13:20] <masak> ;)

[13:22] <Ven`> I should write that quasiquoter I've been meaning to for a while, that should be interesting

[13:24] <Ven`> certainly for this issue looking at racket isn't going to prove *too* interesting, but looking at sweetjs might be

[13:24] * Ven` dislikes Perl 6 containers

[13:26] <masak> today I've been mulling over how the Location API ought to interact with object properties, specifically something like Python's descriptors

[13:26] <masak> it feels like there's a neat unification in there somewhere. basically, a descriptor is like a Location for an object property.

[13:27] <masak> I know you don't like Perl 6 containers, but... I believe 007 Locations are slightly less bad :)

[13:28] <masak> we could even forbid them for ever being exposed in runtime code, but I'm not sure I can be bothered -- maybe, if it turns out to have disastrous optimization losses not to

[13:28] <masak> https://github.com/masak/007/issues/413

[13:35] <Ven`> I think I've mentioned it already, but outside of the "co-op fatigue" (juggling between work and school), I've not felt like working on 007 for a while, because the goals are a bit too unclear for me. I thought the `is parsed` bit would be its end-all be-all, and now that it's clearly not, I'm feeling a bit... not sure.

[13:37] <Ven`> (it's a bit unfair because I'm known to bikeshed *heavily* but I've not been feeling it that much recently)

[13:52] *** Ven` left
[13:53] *** Ven` joined
[17:02] *** Ven` left
[20:06] <masak> yes, I understand

[20:58] <masak> for what it's worth, I still would like to come back and focus on `is parsed` in the not too distant future. many macros depend on it.

[20:59] <masak> but I also think, realistically, that the current parser isn't going to be flexible enough to accommodate what we want out of `is parsed`

[20:59] <masak> that's why I have a stalled PR for the simplest possible `is parsed` statement macro

[21:17] *** tbrowder___ left
[21:18] *** tbrowder___ joined
