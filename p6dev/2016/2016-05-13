[00:35] *** jnthn joined
[02:22] *** DrForr joined
[02:39] *** skids joined
[05:02] <bartolin> morning, #p6dev

[05:02] <bartolin> could someone bump the nqp version, so we get the shiny new loadbytecodebuffer op on JVM, too?

[05:03] <bartolin> nine++ for the continued procomp work

[05:05] <bartolin> *precomp even

[05:19] *** TimToady joined
[06:00] *** sno joined
[06:57] <dalek> rakudo/nom: a5540ee | niner++ | tools/build/NQP_REVISION:

[06:57] <dalek> rakudo/nom: Bump NQP revision for loadbytecodebuffer on JVM

[06:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5540ee5f0

[07:58] *** RabidGravy joined
[08:00] <dalek> rakudo/js: 130a92b | (Pawel Murias)++ | src/vm/js/ (3 files):

[08:00] <dalek> rakudo/js: [js] Implement a bunch of p6* ops.

[08:00] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/130a92b95d

[08:07] *** travis-ci joined
[08:07] <travis-ci> Rakudo build failed. Stefan Seifert 'Bump NQP revision for loadbytecodebuffer on JVM'

[08:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/129922374 https://github.com/rakudo/rakudo/compare/1dca2d8f38cc...a5540ee5f08a

[08:07] *** travis-ci left
[08:35] *** pmurias joined
[08:35] <dalek> nqp: a4d08e6 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[08:35] <dalek> nqp: [js] Cloning and a reprname for captures.

[08:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a4d08e62b0

[08:35] <dalek> nqp: 39989e9 | (Pawel Murias)++ | t/nqp/76-capture.t:

[08:35] <dalek> nqp: Test that captures can be cloned.

[08:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/39989e9408

[08:35] <dalek> nqp: 4b6a274 | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[08:35] <dalek> nqp: [js] Implement $context<$variable> := $value.

[08:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4b6a274a34

[09:52] *** dalek joined
[09:57] <lizmat> good *, #p6dev

[09:58] <lizmat> after building and pulling, I ran my own CSV test again, and it went up from 1.5 to 2.1 seconds

[09:58] <lizmat> I wonder what [Tux]'s benchmark will show

[10:03] * |Tux| builds …

[10:04] <lizmat> ok, this is weird: I ran the same test with --profile

[10:04] <lizmat> the profile info states the program ran for 815ms

[10:06] <lizmat> whereas the time output states it ran for 2700 msecs

[10:07] <|Tux|> failed to load library 'dynext/libperl6_ops_moar.so'

[10:07] <|Tux|> at gen/moar/m-BOOTSTRAP.nqp:1066  (<ephemeral file>:)

[10:07] <|Tux|> I'll start from scratch

[10:08] <lizmat> yeah, needs a configure

[10:08] <lizmat> looking at the RAKUDO_MODULE_DEBUG output, that accounts for 698msec

[10:08] <lizmat> of which 411 are for:  411 41027 RMD: dependency: 2D67050B4AAC60FFA064BA058F0D62CF8A36F158 site#sources/2D67050B4AAC60FFA064BA058F0D62CF8A36F158 Slang::Tuxic

[10:09] <lizmat> and this appears to be repeatable

[10:11] <moritz> .oO( maybe rename it Slang::Toxic::ForPerformance? )

[10:14] <|Tux|> https://gist.github.com/Tux/c0430e073e4cf45c91203fd647bcb77f :(

[10:15] <jnthn> lizmat: That's pretty normal (--profile showing less) because it excludes compilation time and also the time to take the profile data and turn it into JSON and stick it into the HTML template.

[10:19] <lizmat> jnthn: but a *normal* run (without profile) takes 2100 msecs

[10:19] *** ZoffixWin left
[10:19] <lizmat> jnthn: so there's 1300 msecs "missing"

[10:21] <lizmat> jnthn: define MVM_NURSERY_SIZE 4194304   # is this the correct "production" nuresery size ?

[10:21] <jnthn> m: say 4194304.base(16)

[10:21] <camelia> rakudo-moar a5540e: OUTPUT«400000␤»

[10:21] <jnthn> Yes

[10:21] <lizmat> ok, just checking  :-)

[10:21] <jnthn> 4MB

[10:22] <jnthn> On "missing": try --stagestats to see how long compilation takes

[10:22] <jnthn> Note that module loading happens at compile time

[10:22] <lizmat> Stage parse      :   1.405

[10:22] <jnthn> There's your missing time :)

[10:23] <lizmat> yeah, but that's like it was in complete time before

[10:23] <jnthn> --profile is only runtime of the program after its compiled

[10:23] <jnthn> OK, so compilation got slower rather than runtime.

[10:23] <lizmat> so something messed up parsing

[10:23] <|Tux|> I cannot build, as my gist shows. is my local situation to blame?

[10:24] <jnthn> Well, parse is really parsing + actions + world (including module loading)

[10:24] <lizmat> [Tux] could be, I had no problem building, perhaps a side-effect of blead

[10:25] <dalek> nqp: 7a7d0ab | jnthn++ | tools/build/MOAR_REVISION:

[10:25] <dalek> nqp: Bump MOAR_REVISION for callframe changes.

[10:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7a7d0abfc5

[10:25] <jnthn> [Tux]: Did you build MoarVM HEAD against Rakudo HEAD? :)

[10:25] <|Tux|> yes

[10:25] <dalek> rakudo/nom: 8b6a4f1 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[10:25] <dalek> rakudo/nom: Sync with MoarVM API changes.

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b6a4f1fc8

[10:25] <dalek> rakudo/nom: 925336a | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[10:25] <dalek> rakudo/nom: Add an MVMROOT on ctx, now frames are GCable.

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/925336ab25

[10:25] <dalek> rakudo/nom: 743e7a3 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[10:25] <dalek> rakudo/nom: Chase MoarVM reframe branch changes.

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/743e7a3dc9

[10:25] <dalek> rakudo/nom: cebcdd5 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[10:25] <dalek> rakudo/nom: Ensure we don't read out-dated pointer.

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cebcdd5031

[10:25] <dalek> rakudo/nom: 260d5bd | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[10:25] <dalek> rakudo/nom: Merge branch 'moar/reframe' into nom

[10:25] <|Tux|> rakudobrew build  moar-blead

[10:26] <jnthn> |Tux|: Yeah, that won't end well when I'm in the middle of merging in a batch of changes that need commits over 3 repos ;)

[10:26] <jnthn> Try again now, the above push to the Rakudo repo was the final piece :)

[10:26] <jnthn> Was just waiting for my spectest run to finish

[10:26] <|Tux|> already building

[10:26] * |Tux| follows dalek

[10:28] <jnthn> Also: the MoarVM change that just went in is a fairly notable internals refactor. It's been stress-tested to the point that I ended up shaking out and fixing bugs that were totally unrelated to the refactor along the way, so I'm hopeful there will be little fallout from this.

[10:28] <lizmat> --output=gen/moar/stage1/nqpmo.moarvm gen/moar/stage1/nqpmo.nqp

[10:28] <lizmat> make: *** [gen/moar/stage1/nqpmo.moarvm] Segmentation fault: 11

[10:29] <jnthn> It's probably only an immediate performance win for compute-bound parallel programs and for giving lower GC times on programs that keep thousands and thousands of closures in memory

[10:29] <lizmat> hmmm...

[10:29] * lizmat nukes install

[10:30] <lizmat> jnthn: Moar doesn't build for me anymore  :-(

[10:30] <jnthn> ?

[10:30] <lizmat> --output=gen/moar/stage1/nqpmo.moarvm gen/moar/stage1/nqpmo.nqp

[10:30] <lizmat> make: *** [gen/moar/stage1/nqpmo.moarvm] Segmentation fault: 11

[10:31] <lizmat> actually:

[10:31] <lizmat> --output=gen/moar/stage1/nqpmo.moarvm gen/moar/stage1/nqpmo.nqp

[10:31] <lizmat> make: *** [gen/moar/stage1/nqpmo.moarvm] Segmentation fault: 11

[10:31] <lizmat> /Users/liz/Github/rakudo.moar/install/bin/moar --libpath=src/vm/moar/stage0 src/vm/moar/stage0/nqp.moarvm --bootstrap --setting=NULL --no-regex-lib --target=mbc \

[10:32] <jnthn> How did you build?

[10:32] <jnthn> 'cus that's exactly the failure mode I got from a mis-merge earlier on

[10:33] <lizmat> https://gist.github.com/lizmat/ad2ee6979838c63b3a16910ef2d1cf9f

[10:33] <lizmat> perhaps I should nuke nqp as well ?

[10:34] <jnthn> could try

[10:34] <jnthn> 799a0bda284c is indeed MoarVM HEAD

[10:34] <jnthn> So that part looks right

[10:36] <jnthn> /Users/liz/Github/rakudo.moar/install/bin/moar --version is worth a try just to be really sure

[10:36] <jnthn> Failing that, try a build with MVM_JIT_DISABLE=1

[10:37] <lizmat> same fail after nuking nqp dir

[10:38] <jnthn> Darn OSX. :/

[10:38] * jnthn just noticed that our Travis build for Moar only has Linux builds

[10:38] <lizmat> builds ok with MVM_JIT_DISABLE=1

[10:39] *** ZoffixWin joined
[10:40] <jnthn> https://travis-ci.org/rakudo/rakudo/builds/129961395 has OSX though

[10:40] <jnthn> But still running

[10:42] <lizmat> jnthn: does building with MVM_JIT_DISABLE=1 mean there will be no jit at all ?

[10:42] <jnthn> lizmat: Yes, though still the rest of spesh

[10:42] <lizmat> ok

[10:42] <jnthn> lizmat: Oh, it means it's only disabled provided that env var is set

[10:42] <|Tux|> This is Rakudo version 2016.04-180-g1100877 built on MoarVM version 2016.04-124-g799a0bd

[10:42] <|Tux|> test            20.251

[10:42] <|Tux|> test-t          13.065

[10:42] <|Tux|> csv-parser      34.776

[10:43] <jnthn> lizmat: It's Not Just You: https://travis-ci.org/rakudo/rakudo/jobs/129961401

[10:43] <jnthn> It's seemingly the intersection of OSX and JIT changes.

[10:43] <lizmat> yup, that's the one

[10:43] <lizmat> perhaps some of the compilation warnings have a clue?

[10:43] <lizmat> I mean, there seem to be more than before

[10:44] <jnthn> None of them are near the JIT, alas.

[10:44] <jnthn> There is one worth fixing, but if it were a problem we'd know about it in non-JIT builds too

[10:45] <jnthn> Most of them are stylistic whining

[10:45] <lizmat> src/profiler/heapsnapshot.c:681:25: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]

[10:46] <lizmat> seems at least indicating some real isse ?

[10:46] <jnthn> Yeah

[10:46] <jnthn> But can't be that

[10:46] <jnthn> (Since that code only runs if you --profile=heap)

[10:47] <jnthn> lizmat: Don't suppose you could cd into the nqp directory and run the failing command with gdb?

[10:47] <lizmat> $ gdb

[10:47] <lizmat> -bash: gdb: command not found

[10:47] <jnthn> o.O

[10:48] <jnthn> oh...clang

[10:48] <jnthn> lldb? :)

[10:51] <lizmat> trying

[10:53] <lizmat> * thread #1: tid = 0x8f7e61, 0x000000010001b81d libmoar.dylib`MVM_interp_run + 67773, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x7fff0000036b)

[10:53] <lizmat> frame #0: 0x000000010001b81d libmoar.dylib`MVM_interp_run + 67773

[10:53] <lizmat> libmoar.dylib`MVM_interp_run:

[10:53] <lizmat> ->  0x10001b81d <+67773>: movq   -0x48(%rbp), %rcx

[10:53] <lizmat> 0x10001b821 <+67777>: movzwl (%rcx), %eax

[10:53] <lizmat> 0x10001b824 <+67780>: addq   $0x2, %rcx

[10:53] <lizmat> 0x10001b828 <+67784>: movq   %rcx, -0x48(%rbp)

[10:54] <lizmat> jnthn: does that help?

[10:55] <jnthn> Also could you try at the prompt typing "bt" and pressing enter?

[10:55] <jnthn> I *think* that works on lldb but I've not used it in ages

[10:55] <jnthn> Though I can guess what the stack trace for there is anyway really

[10:58] <jnthn> lizmat: And the build without JIT completed, yes?

[10:59] <lizmat> yup

[11:00] <lizmat> (lldb) bt

[11:00] <lizmat> * thread #1: tid = 0x8f7e61, 0x000000010001b81d libmoar.dylib`MVM_interp_run + 67773, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x7fff0000036b)

[11:00] <lizmat> * frame #0: 0x000000010001b81d libmoar.dylib`MVM_interp_run + 67773

[11:01] <jnthn> OK, thanks.

[11:03] <jnthn> lizmat: I've disabled JIT at Configure time on OSX while we deal with this; if you could test for me building Moar HEAD and it's OK, then I'll bump NQP/MOAR revisions after lunch, so not to inconvenience anyone while we get it sorted out. :)

[11:03] <jnthn> bbi20

[11:18] *** travis-ci joined
[11:18] <travis-ci> Rakudo build failed. jnthn 'Bump NQP_REVISION for latest MoarVM.

[11:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/129961395 https://github.com/rakudo/rakudo/compare/a5540ee5f08a...110087706494

[11:18] *** travis-ci left
[11:51] *** pmurias joined
[12:22] *** Hotkeys joined
[12:45] *** cognominal joined
[12:50] *** tomboy65 joined
[12:55] <dalek> rakudo/nom: 0a3b426 | lizmat++ | src/core/ (3 files):

[12:55] <dalek> rakudo/nom: Introduce .Map coercer

[12:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a3b426e7f

[12:57] <dalek> rakudo/nom: d31495f | lizmat++ | src/core/Enumeration.pm:

[12:57] <dalek> rakudo/nom: Fix RT #128138

[12:57] <dalek> rakudo/nom:

[12:57] <dalek> rakudo/nom:   $ 6 'enum Foo <a b>; dd Foo.enums'

[12:57] <dalek> rakudo/nom:   Map.new((:a(0),:b(1)))

[12:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128138

[12:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d31495ff87

[12:59] <[Coke]> I saw that os x was broken in backlog, but I thought a workaround had been put in. I just tried to build rakudo, it updated moar, I get a segfault.

[13:00] <lizmat> if you use moar HEAD, it has JIT disabled and you should be able to build

[13:00] * [Coke] wipes install/ and tries again.

[13:00] <lizmat> perhaps I should just bump NQP and Rakudo

[13:00] <[Coke]> any reason why we can't bump NQP to use moar head then?

[13:00] <[Coke]> right.

[13:00] <lizmat> yeah, I'll do it

[13:00] <[Coke]> lizmat++

[13:01] <[Coke]> also, glad hoelzro is doing the release this month, then. :)

[13:01] <[Coke]> Is this a blocker for the May release?

[13:01] <[Coke]> I would lean towards yes.

[13:01] <dalek> nqp: 6ef30d3 | lizmat++ | tools/build/MOAR_REVISION:

[13:01] <dalek> nqp: Bump Moar to get JIT disable on OS X

[13:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6ef30d352d

[13:02] <lizmat> [Coke]: definitely a blocker  :-)

[13:04] <[Coke]> added an RT

[13:04] <dalek> rakudo/nom: 70e444a | lizmat++ | tools/build/NQP_REVISION:

[13:04] <dalek> rakudo/nom: Bump NQP to get JIT disable on OS X

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/70e444a27d

[13:28] <jnthn> Thanks for bumping; was tied up with a meeting :)

[13:28] <jnthn> Now it's bumped, and if it's working, do we need an RT?

[13:32] <dalek> nqp: 08e121c | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[13:32] <dalek> nqp: [js] Better message for uncaught exceptions.

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/08e121ce22

[13:32] <dalek> nqp: f069115 | (Pawel Murias)++ | src/vm/js/nqp-runtime/s (2 files):

[13:32] <dalek> nqp: [js] Serialize modeFlags.

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f0691158ae

[13:32] <dalek> nqp: f968c27 | (Pawel Murias)++ | src/vm/js/nqp-runtime/serialization.js:

[13:32] *** pmurias joined
[13:32] <dalek> nqp: [js] Remove TODO that were done.

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f968c27a5e

[13:32] <dalek> nqp: 4ab2963 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (4 files):

[13:32] <dalek> nqp: [js] Serialize and deserialize parameteric types.

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4ab2963aaa

[13:35] <lizmat> jnthn: surely we want to fix the JIT on OS X ?

[13:35] <lizmat> the RT is for that

[13:36] <jnthn> lizmat: Hopefully we'll get it working again before the next MoarVM release, but I won't be backing out the frame refactors just for it.

[13:36] <lizmat> well, that would just mean it's not a release blocker

[13:36] <DrForr> lizmat: When are you getting in to Austin?

[13:36] <lizmat> still something that would need to be fixed

[13:36] <jnthn> Yes, completely agree it wants to be fixed. :)

[13:37] <jnthn> And we've the better part of a week to do so.

[13:37] <lizmat> DrForr: should be arriving in Houston around 1pm, expect to be in Austin around 6pm

[13:37] <jnthn> Also, I'm fighting with Travis to try and get OSX builds in the MoarVM travis so we'd have spotted this sooner

[13:37] <lizmat> DrForr: we'll be driving from Houston to Austin

[13:37] <DrForr> Ah, you're just one flight behind me then, I get in at 2:30 local to Austin.

[13:38] <lizmat> DrForr: no, not flying from Houston

[13:38] <DrForr> yeah, just caught that. I think I get to Houston about an hour before that.

[13:38] <lizmat> those small jumps are not worth the waiting, hassle of re-checking your luggage

[13:39] <lizmat> and cost: usually renting a car is cheaper (especially if you intend to rent one anyway)

[13:40] <DrForr> Yeah.

[13:42] <dalek> roast/6.c-errata: e6cd197 | lizmat++ | S02-types/WHICH.t:

[13:42] <dalek> roast/6.c-errata: JSONPrettyActions should never been in here

[13:42] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/e6cd197fb5

[13:44] <nine> Aw packaging sucks

[13:45] <nine> Somewhere between January and now precompilation of NativeCall broke because it can't load NQPHLL anymore but I'm quite certain that noone even got near nqp's module loading code.

[13:46] *** cognominal joined
[13:47] <jnthn> nine: When packaged, or just generally?

[13:47] <lizmat> fwiw, RAKUDO_MODULE_DEBUG=1 6 'use NativeCall' seems to indicate it is loading precomp

[13:47] <nine> jnthn: trying to update my openSUSE packages, i.e. MoarVM, nqp and rakudo packaged separately

[13:48] <nine> and building as unpriviledged user into a separate BUILDROOT directory

[13:50] *** travis-ci joined
[13:50] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Introduce .Map coercer'

[13:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/129989717 https://github.com/rakudo/rakudo/compare/110087706494...0a3b426e7f23

[13:50] *** travis-ci left
[13:56] <dalek> rakudo/nom: ec1f7c1 | (Tom Browder)++ | src/Perl6/Compiler.nqp:

[13:56] <dalek> rakudo/nom: remove false statement until it is made true

[13:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec1f7c1db9

[13:56] <dalek> rakudo/nom: a5389db | lizmat++ | src/Perl6/Compiler.nqp:

[13:56] <dalek> rakudo/nom: Merge pull request #766 from tbrowder/rakudo-man

[13:56] <dalek> rakudo/nom:

[13:56] <dalek> rakudo/nom: remove false statement until it is made true

[13:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5389db1b5

[14:09] <dalek> rakudo/nom: 4b1acbb | lizmat++ | src/core/Process.pm:

[14:09] <dalek> rakudo/nom: Fix for RT #128099

[14:09] <dalek> rakudo/nom:

[14:09] <dalek> rakudo/nom: Also for .Str and .Numeric

[14:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b1acbb214

[14:09] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128099

[14:10] *** brrt joined
[14:28] *** travis-ci joined
[14:28] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix RT #128138

[14:28] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/129989961 https://github.com/rakudo/rakudo/compare/0a3b426e7f23...d31495ff87ef

[14:28] *** travis-ci left
[14:28] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128138

[14:45] <nine> oooooooooooooh! tools/build/install-core-dist.pl is simply missing the NQP repo

[14:45] <nine> How on earth can that ever work?!

[14:46] <timotimo> :D :D

[14:46] <psch> how would that go missing..? oO

[14:46] <psch> oh

[14:46] <psch> nevermind, i read an "in" there

[14:47] <nine> The script completely replaces the repo-chain

[14:47] <nine> Oh, it does so only if the DESTDIR directory passed as argument is not in the standard repo-chain. If it is, then we keep the rest of the chain intact as we just move the head.

[14:48] <[Coke]> t/spec/S17-supply/syntax.t

[14:48] <[Coke]> er, seems to be flapping as normal here on os x.

[14:48] <lizmat> [Coke]: yeah, flapping for me now as well again

[14:49] <jnthn> [Coke]: Yeah, that's still on the "needs attention soon" list :)

[14:49] <[Coke]> I'll remove the JIT as a blocker for the may release. :sadface: :)

[14:49] <jnthn> Uh, *my* needs attentin soon list even :)

[14:50] <timotimo> that sentence made zero sense until i saw the sentence it was meant to apply a correction to

[14:50] <lizmat> [Coke]: fwiw, brrt is looking at it now on an OS X machine

[14:50] <jnthn> heh, and I did a typo :)

[14:50] <nine> YES YES YES!

[14:50] <lizmat> afk for a few hours&

[14:50] <nine> Loading precompiled /usr/share/perl6/precomp/469EC6236B55837D5F1435D042DB5322F043BD0B.1463150080.44484/C7/C712FE6969F786C9380D643DF17E85D06868219E

[14:51] <nine> It loads the precomp file generated during packaging :)

[14:51] <timotimo> urgh, those miles-long filenames :o

[14:51] <timotimo> other than that: awesome! \o/

[14:56] *** hankache joined
[14:57] <dalek> rakudo/nom: 3b39d0b | niner++ | tools/build/Makefile- (2 files):

[14:57] <dalek> rakudo/nom: Create precomp directories of standad repos during installation

[14:57] <dalek> rakudo/nom:

[14:57] <dalek> rakudo/nom: Fixes unnecessary "Cannot create directory .../perl6/site/precomp" like

[14:57] <dalek> rakudo/nom: errors when installing rakudo system wide.

[14:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b39d0bbd3

[15:09] <dalek> rakudo/nom: 385f28b | niner++ | tools/build/install-core-dist.pl:

[15:09] <dalek> rakudo/nom: Fix "Could not find NQPHLL" when building with DESTDIR

[15:09] <dalek> rakudo/nom:

[15:09] <dalek> rakudo/nom: When building with $DESTDIR the repository is not one of the standard

[15:09] <dalek> rakudo/nom: repositories, so by replacing $*REPO with it, we also lose the rest of the

[15:09] <dalek> rakudo/nom: repo chain and with it the NQP repository.

[15:09] <dalek> rakudo/nom: Fix by always using the standard 'perl' repo's next-repo.

[15:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/385f28b78f

[15:10] <jnthn> nine++

[15:12] <[Coke]> does that resolve ShimmerFairy's recent ticket?

[15:12] <nine> [Coke]: yes, I think we're finally through that now :)

[15:13] <nine> Building a new set of rpms with these commits to confirm

[15:13] *** travis-ci joined
[15:13] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Bump NQP to get JIT disable on OS X'

[15:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/129991572 https://github.com/rakudo/rakudo/compare/d31495ff87ef...70e444a27d22

[15:13] *** travis-ci left
[15:15] <psch> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L8219 that's the bit i think is missing to bring that into the jvm slow path binder

[15:15] <psch> i'm not quite sure how to replicate it...

[15:27] <nine> And indeed the rpms work just fine :)

[15:28] <nine> So, we should be good for building as unpriviledged user and installing system wide now.

[15:29] <[Coke]> RT: 1291; CONC: 7; GLR: 6; JVM: 70; LHF: 2; LTA: 69; NYI: 27; OSX: 4; PERF: 15; POD: 3; PRECOMP: 3; RFC: 16; SEGV: 19; STAR: 1; TESTNEEDED: 25; TODO: 10; UNI: 5; WEIRD: 2

[15:32] <[Coke]> OSX: 7, after fixing the platform tracker to look at the real field, too.

[15:56] *** travis-ci joined
[15:56] <travis-ci> Rakudo build failed. lizmat 'Merge pull request #766 from tbrowder/rakudo-man

[15:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130004538 https://github.com/rakudo/rakudo/compare/70e444a27d22...a5389db1b5a2

[15:56] *** travis-ci left
[16:06] *** skids joined
[16:09] <psch> well, i did get Buf.push(Buf) working on r-j, but i get a parse failure in NativeCall::Compiler::GNU

[16:09] <psch> because it doesn't recognize NativeCall::Types::void as a type

[16:32] *** travis-ci joined
[16:32] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for RT #128099

[16:32] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130007971 https://github.com/rakudo/rakudo/compare/a5389db1b5a2...4b1acbb21456

[16:32] *** travis-ci left
[16:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128099

[17:14] *** travis-ci joined
[17:14] <travis-ci> Rakudo build failed. Stefan Seifert 'Create precomp directories of standad repos during installation

[17:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130020724 https://github.com/rakudo/rakudo/compare/4b1acbb21456...3b39d0bbd36f

[17:14] *** travis-ci left
[17:33] <timotimo> well, "void" is a pointer, and java doesn't have pointers

[17:37] *** brrt joined
[17:42] *** ZoffixWin joined
[17:55] *** sno joined
[18:02] *** travis-ci joined
[18:02] <travis-ci> Rakudo build failed. Stefan Seifert 'Fix "Could not find NQPHLL" when building with DESTDIR

[18:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130024281 https://github.com/rakudo/rakudo/compare/3b39d0bbd36f...385f28b78fa1

[18:02] *** travis-ci left
[18:11] *** TimToady joined
[19:01] <psch> timotimo: i don't think that's the problem, considering NativeCall::Types::void maps to repr Uninstantiable

[19:02] <psch> i mean, i recognize there's a bit of "haha only serious" in there, but it still seems to me that it's more likely that my changes just broke something else, instead of uncovering a fundamental incompatability between NC and the JVM... :)

[19:03] <nine> psch: have you pushed your fix yet?

[19:04] <psch> nine: the only fix i have that i haven't pushed is for getattr

[19:04] <psch> nine: i don't have a fix for the broken install-core-dist.pl, i only have a patch that shifts the problem somewhere else

[19:04] <nine> maybe there are actually two problems?

[19:09] <psch> there's probably a few more than two problems somewhere inside nqp-j... :/

[19:10] <psch> anyway, the patch i do have doesn't solve #126493, so i'm thinking there's still something wrong there

[19:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126493

[19:12] <psch> https://gist.github.com/peschwa/e82fac05cb2382a044bddb6687a15aa1 is my attempt to replicate https://gist.github.com/peschwa/e82fac05cb2382a044bddb6687a15aa1 in the jvm Binder

[19:12] <psch> err

[19:12] <psch> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L8188 is the second link

[19:12] <psch> not the gist... :)

[19:13] <psch> because, afaiu, the slow path Binder on r-m doesn't really happen that often, which mean usually we run through Actions.nqp to do param binding

[19:13] <psch> and r-j always uses its VM-level Binder

[19:14] <psch> and, yeah, it solves Buf.push(Buf), which means it solves "this type does not support positional" or whatsit

[19:14] <psch> but it still dies during install-core-dist.pl

[19:14] <psch> with "Function 'NativeCall::Types::void' needs parens to avoid gobbling block (or perhaps it's a class that's not declared or available in this scope?)"

[19:15] <psch> in NativeCall::Compiler::GNU:32

[19:15] <psch> NC::T:void is scoped 'our' and is imported before, so i'd think it's something about topicalization in a given-block

[19:15] <psch> but e.g. "given Int { when Int { say 'ok' } }" still works, so i'm out of ideas :)

[19:16] <psch> ...although that might change tomorrow or so vOv

[19:17] <psch> in any case, i don't think pushing that half-fix is particularly useful.  it doesn't feel atomic to me, more like sub-atomic, which is why i don't want to put it into a commit

[19:17] <nine> Yep, time will probably help. Took me weeks to fully understand the BEGIN time EVAL thing and I was often at a point where I didn't have any idea anymore.

[19:20] *** brrt joined
[19:38] <dalek> nqp: 618c6be | lizmat++ | tools/build/MOAR_REVISION:

[19:38] <dalek> nqp: Bump Moar to get JIT fixes

[19:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/618c6bed97

[19:47] <lizmat> nine: https://gist.github.com/lizmat/2311c751663d213967de4b99176d935f  # Inline::Perl5 test/install failure

[19:55] <dalek> rakudo/nom: dcf6e44 | lizmat++ | tools/build/NQP_REVISION:

[19:55] <dalek> rakudo/nom: Bump NQP to get JIT back on OS X

[19:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dcf6e446cb

[20:00] <bartolin> btw, the build was broken on FreeBSD, too (using clang). seems to work again with the latest fixes :-)

[20:10] <lizmat> :-)

[20:11] <lizmat> the build was broken everywhere, only the BSD's were anal enough to complain about it

[20:22] *** sortiz joined
[20:25] <sortiz> With latest: t/spec/S17-supply/syntax.t .................................... Failed 8/60 subtests # spectest still running...

[20:25] *** ZoffixWin left
[20:25] <lizmat> sortiz: known flapper

[20:25] <lizmat> varies between builds as well  :-(

[20:34] <sortiz> Well, but today it fails consistently, after ok 52 with 'Aborted (core dumped)'

[20:35] <dalek> rakudo/nom: e39b21c | lizmat++ | src/core/Process.pm:

[20:35] <dalek> rakudo/nom: Simplify $*USER/$*GROUP initialization

[20:35] <dalek> rakudo/nom:

[20:35] <dalek> rakudo/nom: The whole IdFetch class is no longer necessary with the new way of

[20:35] <dalek> rakudo/nom: registering PROCESS:: dynamic variables.  Also make creation of IdName

[20:35] <dalek> rakudo/nom: objects faster with dedicated .new (although one could argue that for

[20:35] <dalek> rakudo/nom: the two objects that will ever exist for this, this isn't needed).

[20:35] <dalek> rakudo/nom:

[20:35] <dalek> rakudo/nom: Unless of course, we're going to make the IdName class public as a

[20:35] <dalek> rakudo/nom: more generic "dualvar" class.

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e39b21c669

[20:36] <sortiz> On the bright side: t/spec/S32-num/power.rakudo.moar: TODO passed:   13-15, 68-70

[20:36] <lizmat> sortiz: it only fails for me if PERL6LIB=lib is set

[20:36] <lizmat> (which it is when run with make)

[20:37] <lizmat> a bare perl6 t/spec/S17-supply/syntax.t doesn't fail for me

[20:39] <sortiz> Yep, after a make install and running by hand, it succeed.

[20:39] <sortiz> Will investigate...

[20:40] <lizmat> sortiz: this problem may go away when all of jnthn's work in Moar lands

[20:41] <lizmat> I wouldn't spend too much time on it now

[20:41] <lizmat> but if you have in itch there, scratch it!

[20:43] <sortiz> I have other itches. :-)

[20:45] <sortiz> btw, thanks for the enums fix, indeed a Map coercer was needed.

[20:47] <lizmat> yeah, that seemed as the most generic solution: might be needed in other places

[20:52] *** travis-ci joined
[20:52] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Bump NQP to get JIT back on OS X'

[20:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130093728 https://github.com/rakudo/rakudo/compare/385f28b78fa1...dcf6e446cb18

[20:52] *** travis-ci left
[21:12] <lizmat> m: class A is IntStr { method gist { "foo" } }; say A.new(42,"bar")   # expected "foo" here

[21:12] <camelia> rakudo-moar e39b21: OUTPUT«bar␤»

[21:13] <timotimo> hm, un-subclassable problem?

[21:13] <lizmat> the reason we don't see "foo" here, is that "say" has a candidate for Str:D which matches the IntStr:D

[21:13] <lizmat> m: class A is IntStr { method gist { "foo" } }; say A.new(42,"bar").gist

[21:13] <camelia> rakudo-moar e39b21: OUTPUT«bar␤»

[21:13] <lizmat> huh?

[21:13] <psch> m: class A is IntStr { method gist { "foo" } }; put A.new(42,"bar").gist

[21:13] <camelia> rakudo-moar e39b21: OUTPUT«bar␤»

[21:14] <psch> m: class A is IntStr { method gist { "foo" } }; print (A.new(42,"bar").gist)

[21:14] <camelia> rakudo-moar e39b21: OUTPUT«bar»

[21:14] <psch> allomorphs are weird vOv

[21:14] <timotimo> ah, hehe.

[21:14] <timotimo> it makes sense to me that we'd directly print a Str-derived thing

[21:14] <lizmat> m: say IntStr ~~ Str

[21:14] <camelia> rakudo-moar e39b21: OUTPUT«True␤»

[21:15] <lizmat> m: sub a(Str:D $a) { dd $a }; a(IntStr.new(42,"foo"))

[21:15] <camelia> rakudo-moar e39b21: OUTPUT«IntStr.new(42, "foo")␤»

[21:16] <psch> m: class A is IntStr { method gist { "foo" } }; my $x = A.new(42,"bar").gist; say $x

[21:16] <camelia> rakudo-moar e39b21: OUTPUT«bar␤»

[21:16] <psch> how does that make sense..?

[21:16] <lizmat> m: class A is IntStr { method gist { "foo" } }; my $x = A.new(42,"bar").gist; say $x.gist

[21:16] <camelia> rakudo-moar e39b21: OUTPUT«bar␤»

[21:17] <psch> m: class A is IntStr { method gist { "foo" } }; say A.new(42,"bar").gist eq 'foo'

[21:17] <camelia> rakudo-moar e39b21: OUTPUT«False␤»

[21:17] <psch> m: class A is IntStr { method gist(A:D:) { "foo" } }; say A.new(42,"bar").gist eq 'foo'

[21:17] <camelia> rakudo-moar e39b21: OUTPUT«False␤»

[21:17] <psch> m: class A is IntStr { method gist(A:U:) { "foo" } }; say A.gist eq 'foo'

[21:17] <camelia> rakudo-moar e39b21: OUTPUT«True␤»

[21:19] <lizmat> m: class A is IntStr { multi method gist(A:D:) { "foo" } }; say A.new(42,"bar").gist

[21:19] <camelia> rakudo-moar e39b21: OUTPUT«bar␤»

[21:19] <lizmat> aaah....

[21:19] <dalek> rakudo/nom: b0254d5 | lizmat++ | src/core/allomorphs.pm:

[21:19] <dalek> rakudo/nom: Allow subclassing of IntStr

[21:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0254d521d

[21:20] <lizmat> had already fixed this locally

[21:21] <lizmat> ok, I guess we don't want to make the Str:D say candidate any more involved

[21:26] <dalek> rakudo/nom: 02e6b35 | (Salvador Ortiz)++ | lib/NativeCall.pm6:

[21:26] <dalek> rakudo/nom: NativeCall: Add ssize_t to $type_map

[21:26] <dalek> rakudo/nom:

[21:26] <dalek> rakudo/nom: Needed to by usable as an argument

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02e6b35936

[21:26] <dalek> rakudo/nom: 91f31ac | lizmat++ | lib/NativeCall.pm6:

[21:26] <dalek> rakudo/nom: Merge pull request #767 from salortiz/patch-3

[21:26] <dalek> rakudo/nom:

[21:26] <dalek> rakudo/nom: NativeCall: Add ssize_t to $type_map

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91f31ac51c

[21:33] <nine> lizmat: I though jnthn++'s fixes have landed already?

[21:34] <lizmat> all of the reframe ones?

[21:34] <nine> I think so

[21:34] <lizmat> I only thought some fixes made it ?

[21:34] <nine> Also I can reproduce those Inline::Perl5 failures. Will fix tomorrow

[21:34] <lizmat> ++nine  :-)

[21:34] <nine> Well I don't really know any better than you

[21:35] <nine> Oh, those failures are segfaults

[21:35] <nine> Maybe they're actually reframe regressions.

[21:35] <nine> segfaults in MVM_gc_root_temp_push_slow

[21:36] <nine> jnthn: https://gist.github.com/niner/5397c59cbc449075e104017443142ef1

[21:37] <dalek> rakudo/nom: 3614487 | lizmat++ | src/core/Process.pm:

[21:37] <dalek> rakudo/nom: Get rid of internal IdName class altogether

[21:37] <dalek> rakudo/nom:

[21:37] <dalek> rakudo/nom: Since we now have IntStr, we actually don't need it anymore.

[21:37] <dalek> rakudo/nom:

[21:37] <dalek> rakudo/nom: Small incompatibility change: before, .gist would return

[21:37] <dalek> rakudo/nom:

[21:37] <nine> Yep, all 3 test files segfault with the same backtrace

[21:37] <dalek> rakudo/nom:   "$!name ($!id)"

[21:37] <dalek> rakudo/nom:

[21:37] <dalek> rakudo/nom: but since IntStr:D is a Str:D, it will use the Str.gist, which would

[21:37] <dalek> rakudo/nom: just be the name.  This does not cause any spectest breakage.

[21:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3614487bda

[21:38] <nine> This ain't right:

[21:38] <nine> (gdb) p tc->num_temproots

[21:38] <nine> $2 = 4294967294

[21:38] <nine> temproot count underflow I dare say :)

[21:38] <nine> jnthn: ^^^

[21:39] <jnthn> nine: Hm. In src/moar/roots.h, there's a MVM_TEMP_ROOT_DEBUG that can be set to 1

[21:39] <nine> Happens with MVM_SPESH_DISABLE=1, too and is 100 % reproducable. This should actually be somewhat simple to figure out

[21:40] <jnthn> Yeah, though sensitive to a few things, so try to leave everything unchanged except building a MoarVM that way

[21:40] <jnthn> And then breakpoint in MVM_panic

[21:40] <nine> Have to watch some Married with Children now though. So will work on this tomorrow  :)

[21:40] <jnthn> And we should easily find the guilty party

[21:40] <jnthn> Though the backtrace is a good clue too

[21:41] *** travis-ci joined
[21:41] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Simplify $*USER/$*GROUP initialization

[21:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130101842 https://github.com/rakudo/rakudo/compare/dcf6e446cb18...e39b21c669b9

[21:41] *** travis-ci left
[21:42] <jnthn> Hm, really odd

[21:42] <jnthn> The MVMROOT macro is used throughout the caller

[21:43] <nine> Illegal attempt to pop empty temporary root stack

[21:43] <nine> Is the only new output

[21:43] <jnthn> Right, so it was indeed underflow

[21:44] <nine> Ok, my girlfriend gently pushes me towards relaxation :) Good night!

[21:44] <jnthn> nine: 'night...if I can't spot it myself, guess we continue debugging later :)

[21:45] <lizmat> night nine!

[21:46] <jnthn> Darn it, it really looks from the code that said problem should be "impossible"...

[21:51] <psch> ah, one of those "this should never happen" that actually happens? :)

[21:51] <lizmat> good night, #p6dev!

[21:51] <psch> 'night lizmat, nine o/

[21:51] <jnthn> 'night, lizmat

[21:52] <jnthn> psch: Well, we have a macro MVMROOT(tc, object, {...}); that runs the block, rooting first and unrooting after it.

[21:52] <jnthn> psch: You can in theory screw it up if you were to do, for example, flow control that takes you out of that, but that's result in leaving too much on the stack rather than too little...

[21:54] <psch> jnthn: "rooting" means "mark as non-collectable" i assume?

[21:55] <dalek> nqp: 3c4f0ff | peschwa++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:55] <dalek> nqp: Make getattr mostly work like it does on moar.

[21:55] <dalek> nqp:

[21:55] <dalek> nqp: Well, mostly, hopefully.  There might be a case where we have multiple Fields

[21:55] <dalek> nqp: that could take the attr we got, and we wrongly assign to the first we find.

[21:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3c4f0ff8cc

[21:55] <psch> ...that was lying around for a bit, thought i might as well push it

[22:01] <jnthn> psch: That together with "and update the pointer if the object moves"

[22:03] <jnthn> psch: I wrote some explanation in https://6guts.wordpress.com/2016/04/30/refactoring-and-torture/ if you're curious :)

[22:04] <psch> yeah, i might have a look later

[22:05] <psch> still, it's somewhat peripheral to what i'm usually working on...

[22:06] <jnthn> Yes, unless you're interested in hacking on MoarVM you can easily not know about it :)

[22:10] <psch> it's not that i'm not interested in hacking on MoarVM, it's just that's i'm more interested in keeping two backends working ;)

[22:11] <TimToady> psch++

[22:14] <jnthn> psch: Yeah, this piece won't help you in that mission, so you can skip it :)

[22:14] <jnthn> And psch++ indeed

[22:17] <psch> oh, i don't doubt that it's still interesting and educational.  it's just not immediately useful :)

[22:20] <jnthn> aye :)

[22:41] *** travis-ci joined
[22:41] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Allow subclassing of IntStr'

[22:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130110921 https://github.com/rakudo/rakudo/compare/e39b21c669b9...b0254d521dd1

[22:41] *** travis-ci left
[23:59] *** travis-ci joined
[23:59] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Get rid of internal IdName class altogether

[23:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/130114582 https://github.com/rakudo/rakudo/compare/91f31ac51c71...3614487bdab3

[23:59] *** travis-ci left
