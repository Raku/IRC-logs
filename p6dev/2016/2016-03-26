[01:38] *** colomon joined
[02:21] *** colomon joined
[02:46] *** geekosaur joined
[09:01] <[Tux]> test            21.861

[09:01] <[Tux]> test-t          12.330

[09:01] <[Tux]> csv-parser      25.651

[09:15] *** RabidGravy joined
[10:09] <masak> slightly better than yesterday

[10:56] <lizmat> yeah, but without any significant changes, means it is within noise?

[11:19] <masak> probably

[11:32] <dalek> rakudo/nom: 1d12563 | lizmat++ | src/core/operators.pm:

[11:32] <dalek> rakudo/nom: Fix for RT #127777

[11:32] <dalek> rakudo/nom:

[11:32] <dalek> rakudo/nom: By basically giving it the same treatment as with combinations()

[11:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d12563b6c

[11:51] <lizmat> m: say "z" before "aa"   # shouldn't this be True ??

[11:51] <camelia> rakudo-moar 1d1256: OUTPUT«False␤»

[11:53] <lizmat> masak: ^^^ opinion ?

[11:56] <timotimo> i think even though we have the magical behavior in the .. operator, i'd prefer the before/after operators to behave like lt and gt in general

[11:59] <masak> lizmat: no, I think you're confusing the order postfix:<++> and .succ produces, with lexical order

[11:59] <masak> I'd much prefer `before` to produce lexical order, just like `lt` does

[12:00] <lizmat> then we have a great thinko in Range.iterator for strings  :-)

[12:04] * lizmat looks at fixing this (instigated by RT #127753

[12:10] <timotimo> ah, so that's what busted the order of ranges

[12:10] <lizmat> yeah...

[12:10] <lizmat> it's been like that for a while  :-(

[12:10] <timotimo> seems like a big oversight to not have that tested by roast :S

[12:11] <lizmat> m: .print for ":" .. "?" # should this work at all ???

[12:11] <camelia> rakudo-moar 1d1256: OUTPUT«:;<=>?»

[12:12] <lizmat> afaik, we only define .succ for a certain set of magical chars

[12:12] <lizmat> (and .pred)

[12:13] <lizmat> perhaps we should disallow and ranges in which the endpoints are not within the set of magical chars ?

[12:13] <lizmat> *any

[12:16] <timotimo> no, i want ranges like that

[12:17] <dalek> nqp: 28b7689 | (Pawel Murias)++ | src/vm/js/nqp-runtime/deserialization.js:

[12:17] <dalek> nqp: [js] Remove dead code.

[12:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/28b768906f

[12:17] <dalek> nqp: afa5dbf | (Pawel Murias)++ | src/vm/js/nqp-runtime/deserialization.js:

[12:17] <dalek> nqp: [js] Remove code that support an old serialization version format.

[12:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/afa5dbfeb3

[12:17] <dalek> nqp: bb7b097 | (Pawel Murias)++ | src/vm/js/ (2 files):

[12:17] <dalek> nqp: [js] Implement nqp::{shift,unshift}_{s,i}. Remove legacy raw array support.

[12:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bb7b0979b9

[12:17] <dalek> nqp: 8f2c3db | (Pawel Murias)++ | t/nqp/59-nqpop.t:

[12:17] <dalek> nqp: Test nqp::{unshift, shift}_{s,i}.

[12:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8f2c3db7b1

[12:18] <lizmat> timotimo: ok, so if both endpoints are in a magical range, we use the .succ magic

[12:19] <lizmat> else, we can only have 1 char as endpoints, and then we do this based on ord()

[12:20] <timotimo> i'd expect that

[12:20] <dalek> nqp: a58284d | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (4 files):

[12:20] <dalek> nqp: [js] Run fixjsstyle.

[12:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a58284df2d

[12:23] <timotimo> an oversight it may be to haven't tested this, but it's also surprising nobody stumbled upon the bug in such a long time

[12:26] <lizmat> yeah...  :-(

[12:26] <lizmat> the .succ / .pred logic is heavily embedded in Str

[12:27] <lizmat> it would have to be moved to e.g. Rakudo::Internals to make it accesible in Range

[12:27] * timotimo imagines a tightly-packed yarnball

[12:27] <lizmat> yeah...

[12:27] * sortiz "long time" now three months!

[13:20] *** colomon joined
[13:21] * lizmat goes cycling while contemplating a solution that is both correct and order of magnitudes faster  :-)

[13:24] *** Skarsnik joined
[13:47] *** skids joined
[15:48] <TimToady> .. turns into ... semantics when evaluated as a list, so you're proably better off optimizing ... for known endpoints

[16:03] <TimToady> in particular, magical ranges come into play *only* if the two strings are of unequal length (or if the right endpoint is *)

[16:05] <TimToady> so ｢.print for ":" .. "?"｣ has nothing whatsoever to do with Str.succ, only Int.succ

[16:06] <TimToady> and hence it has nothing to do with magical ranges either

[16:41] <timotimo> ah, of course

[19:30] *** FROGGS joined
[19:40] *** geekosaur joined
[20:15] <dalek> rakudo/nom: e7a09e7 | lizmat++ | src/core/Bool.pm:

[20:15] <dalek> rakudo/nom: Make sure Bool can also .enums like any other Enum

[20:15] <dalek> rakudo/nom:

[20:15] <dalek> rakudo/nom: The Bool refactor seems to have missed this particular method.

[20:15] <dalek> rakudo/nom: Spotted while investigating RT #127789

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7a09e753e

[20:19] <lizmat> m: say "9".succ   # sorta expected Str "00" instead of Int 10  ??

[20:19] <camelia> rakudo-moar 1d1256: OUTPUT«10␤»

[20:22] <lizmat> m: dd "9".succ   # hmmm...  it's a Str after all ??

[20:22] <camelia> rakudo-moar 1d1256: OUTPUT«"10"␤»

[20:25] <lizmat> ah, I finally grok the reason for the carrydigit hash

[21:01] *** colomon joined
[21:25] <nine> lizmat: oh, indeed, I didn't even know .enums. Thanks for fixing :)

[21:26] <lizmat> yw  :-)

[21:28] <masak> m: say "silly-image-of-cat-9.jpg".succ

[21:28] <camelia> rakudo-moar e7a09e: OUTPUT«silly-image-of-cat-10.jpg␤»

[21:28] <masak> lizmat: that's probably why "9".succ is "10"

[21:30] <lizmat> yeah, I figured it out  :-)

[21:30] <masak> :)

[21:34] <dalek> rakudo/nom: ccc38a0 | lizmat++ | / (2 files):

[21:34] <dalek> rakudo/nom: Refactor the templating logic for native arrays

[21:34] <dalek> rakudo/nom:

[21:34] <dalek> rakudo/nom: Before using it in other places.

[21:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ccc38a045e

[22:04] *** geekosaur joined
[22:25] <dalek> rakudo/nom: 47d21b8 | lizmat++ | tools/build/makeMAGIC_INC_DEC.pl6:

[22:25] <dalek> rakudo/nom: WIP on generating hashes for .succ/.pred

[22:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47d21b8873

[22:26] <lizmat> good night, #p6dev!

[22:26] <timotimo> gnite lizmat!

[22:27] <lizmat> .oO( it's going to be a short night )
