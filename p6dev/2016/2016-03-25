[00:46] *** sortiz joined
[01:01] <timotimo> i hate when Configure.pl forbids me from using my branched nqp or moarvm _<

[01:03] <timotimo> at least git rebase exists

[02:13] *** colomon joined
[03:19] *** dalek joined
[05:50] *** dalek joined
[06:07] *** dalek joined
[07:11] <dalek> nqp: c4743fe | (Pawel Murias)++ | src/vm/js/nqp-runtime/io.js:

[07:11] <dalek> nqp: [js] Fix a bug in printf.

[07:11] <dalek> nqp:

[07:11] <dalek> nqp: Was unnoticed before due to positional writes in append mode being ignored on linux in node.js.

[07:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c4743fe61c

[07:11] <dalek> nqp: 88f4603 | (Pawel Murias)++ | t/nqp/19-file-ops.t:

[07:11] <dalek> nqp: Test multiple nqp::printfh calls on a file opended in 'w' mode.

[07:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/88f4603f9a

[07:42] <dalek> nqp: 86d6fed | (Pawel Murias)++ | src/vm/js/SerializeOnce.nqp:

[07:42] <dalek> nqp: [js] Unbitrot after 5232c5e99086ecffcd888e23f22e01f31b91057

[07:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/86d6fed388

[08:18] *** dalek joined
[08:29] *** dalek joined
[09:03] <[Tux]> test            22.502

[09:03] <[Tux]> test-t          12.656

[09:03] <[Tux]> csv-parser      25.642

[09:42] <masak> [Tux]++ # persistence

[09:43] <[Tux]> I can automate the testing without the posts here, so the graphs are always up-to-datre, but that would mean less eyes to check if the tests were successful

[09:43] <masak> no, I like seeing the daily reports here.

[09:44] <masak> please do keep them.

[09:44] * [Tux] will be away the first week of april, so no reports in that period

[09:50] *** Woodi_ joined
[10:08] *** FROGGS joined
[10:28] *** RabidGravy joined
[10:43] *** Ven joined
[13:11] *** skids joined
[13:13] <dalek> rakudo/nom: f220a5e | lizmat++ | src/core/List.pm:

[13:13] <dalek> rakudo/nom: Fix RT #127778 by limiting to 32bit values

[13:13] <dalek> rakudo/nom:

[13:13] <dalek> rakudo/nom: We could probably go for a non-native combinations implementation

[13:13] <dalek> rakudo/nom: for larger values in the future if we see a too large value of n or k,

[13:13] <dalek> rakudo/nom: but I think we will need a lot of performance enhancements to make

[13:13] <dalek> rakudo/nom: that really workable.

[13:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f220a5edc0

[13:15] <lizmat> jnthn: nqp::isbig_I seems to limit to 32 bit values, even on a 64 bit build.  Is that intentional ?

[13:17] *** pmurias joined
[13:17] <dalek> nqp: 87595f1 | (Pawel Murias)++ | src/QAST/C (2 files):

[13:17] <dalek> nqp: Dump the main and load for CompUnits.

[13:17] <dalek> nqp:

[13:17] <dalek> nqp: Report errors while dumping better and relax the expectations on extra_children().

[13:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/87595f1455

[13:17] <dalek> nqp: bcbc07f | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:17] <dalek> nqp: [js] Handle QAST::BVal more properly, make the setting available when blocks are run statically.

[13:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bcbc07f301

[13:17] <dalek> nqp: 8870fe4 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[13:17] <dalek> nqp: [js] Update hack.

[13:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8870fe4a5c

[13:17] <dalek> nqp: c6e2dcd | (Pawel Murias)++ | src/vm/js/nqp-runtime/serialization.js:

[13:19] <lizmat> jnthn: RT #127782 seems to refer to a nice small example of a MoarVM rope bug (on StackOverflow)

[13:19] <jnthn> lizmat: I think so, though I can't remember the whole history on that

[13:25] <lizmat> afk for a few hours&

[14:03] <[Coke]> https://stackoverflow.com/questions/36208514/perl6-why-does-substr-rw-behave-this-way

[14:49] * masak refreshes jnthn's memory: https://rt.perl.org/Public/Bug/Display.html?id=123602

[14:49] <masak> via http://strangelyconsistent.org/blog/youre-in-a-space-of-twisty-little-mazes-all-alike

[14:50] <jnthn> masak: I remembered that, I was answering the isbig_I history

[14:50] <masak> oh, I see.

[17:52] *** colomon joined
[18:36] *** AlexDaniel joined
[18:41] *** colomon joined
[20:14] <dalek> rakudo/nom: 81558b8 | moritz++ | src/core/Signature.pm:

[20:14] <dalek> rakudo/nom: RT #127223: Fix smartmatching an (or against) and empty signature

[20:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/81558b86fd

[20:14] <dalek> roast: 1f2ad00 | moritz++ | S03-smartmatch/signature-signature.t:

[20:14] <dalek> roast: RT #127223: smart matching and empty signatures

[20:14] <dalek> roast: review: https://github.com/perl6/roast/commit/1f2ad001a9

[20:21] <moritz> that was easy :-)

[20:25] <moritz> having a fast laptop reall makes rakudo hacking more fun :-)

[20:28] <RabidGravy> yay!

[20:32] <moritz> how do I check from NQP if an object is invocable?

[20:33] <moritz> ah, nqp::isinvokable

[20:39] <masak> almost too easy

[20:39] <masak> we should rename that to something less obvious

[20:39] <masak> otherwise who knows who might contribute

[20:45] <moritz> doesn't help me though: https://rt.perl.org/Ticket/Display.html?id=106932#txn-1393486

[22:35] *** skids joined
[22:50] <timotimo> oh lord. here an instance of =:= is being speshed into a call into find_best_dispatchee (after a multicachefind on the dispatcher cache, at least)

[22:51] <timotimo> but really, that operator should really want to be ridiculously fast

[22:51] <timotimo> i wonder if it's also weird like that when used by our infrastructure for iteration and such

[22:54] <lizmat> timotimo: =:= is basically an nqp::iseqaddr or so?

[22:57] <timotimo> yes

[22:58] <timotimo> i don't understand why we don't spesh directly to that
