[02:49] *** FROGGS__ joined
[03:02] *** colomon joined
[04:21] *** colomon joined
[05:00] *** colomon joined
[05:17] *** colomon joined
[06:56] *** colomon joined
[09:24] <[Tux]> test            21.004

[09:24] <[Tux]> test-t          13.355

[09:24] <[Tux]> csv-parser      48.868

[09:44] *** RabidGravy joined
[09:46] <[Tux]> cpupower frequency-set -g performance

[09:46] <[Tux]> test            20.612

[09:46] <[Tux]> test-t          13.008

[09:46] <[Tux]> csv-parser      49.729

[09:47] * [Tux] realized I rebooted after a power failure recently

[11:04] <masak> why does QAST::VM have the three pieces [jvm], [moar], and [loadlibs]

[11:04] <masak> one of those is not like the others

[11:04] <masak> :)

[12:16] <lizmat> good *, #perl6!

[12:16] <lizmat> did I miss a memo about the release being delayed?

[12:49] <dalek> roast: b7507b8 | lizmat++ | S09-typed-arrays/native-int.t:

[12:49] <dalek> roast: Add tests for int @a.append|prepend

[12:49] <dalek> roast: review: https://github.com/perl6/roast/commit/b7507b801f

[12:57] <dalek> roast/6.c-errata: 266882d | lizmat++ | S09-typed-arrays/native-int.t:

[12:57] <dalek> roast/6.c-errata: Make two more tests for failure less specific

[12:57] <dalek> roast/6.c-errata:

[12:57] <dalek> roast/6.c-errata: This is currently a WIP across releases, the semantics of the check

[12:57] <dalek> roast/6.c-errata: doesn't change: it's an error, and it stays an error  :)

[12:57] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/266882d666

[13:16] <dalek> roast: 5541d6e | lizmat++ | S09-typed-arrays/native-num.t:

[13:16] <dalek> roast: Add num @a.append|prepend tests

[13:16] <dalek> roast: review: https://github.com/perl6/roast/commit/5541d6e21c

[13:45] <lizmat> Newbie code segfaults: RT #127748

[13:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127748

[14:07] <dalek> roast/6.c-errata: ea25fa5 | lizmat++ | S06-signature/introspection.t:

[14:07] <dalek> roast/6.c-errata: Sigs with "where { ... }" in them can never eqv

[14:07] <dalek> roast/6.c-errata:

[14:07] <dalek> roast/6.c-errata: Previously, .perl output was taken for eqv, which was both wrong

[14:07] <dalek> roast/6.c-errata: and very CPU intensive for different signatures.  This was since then

[14:07] <dalek> roast/6.c-errata: fixed in 2016.03, so tests asking for equivalence are wrong here.

[14:07] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/ea25fa5d4a

[14:12] <dalek> roast/6.c-errata: 960fde0 | lizmat++ | integration/advent2009-day20.t:

[14:12] <dalek> roast/6.c-errata: Untodo passing test

[14:12] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/960fde03bd

[14:49] <dalek> rakudo/nom: 1ad9175 | coke++ | docs/announce/2016.03.md:

[14:49] <dalek> rakudo/nom: Add first pass at release announcement

[14:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ad91754cf

[15:02] <[Coke]> anyone have any last minute updates to the ChangeLog?

[16:03] *** Begi joined
[16:04] *** stmuk joined
[16:04] *** awwaiid joined
[16:09] *** Begi left
[16:09] <psch> just to have this here, in case someone wants to chime in later:

[16:09] <psch> r-j currently doesn't build, because of commit 93d597f40

[16:09] <psch> the problem comes during serialization of the BOOTStrArray type object

[16:10] <psch> nqp-m: say(nqp::elems(nqp::what(nqp::list_s())))

[16:10] <camelia> nqp-moarvm: OUTPUT«-4294967287␤»

[16:10] <psch> $ ./nqp-j -e'say(nqp::elems(nqp::what(nqp::list_s)))'

[16:10] <psch> org.perl6.nqp.sixmodel.TypeObject$AggregateRTE: Cannot do aggregate operation on a type object

[16:11] <psch> the exception type is just a debugging aid

[16:11] *** colomon joined
[16:11] <psch> i kind of want to say that moar is not taking this serious enough, but i do recognize that putting concreteness checks or similar there makes it (probably noticably) slower

[16:12] <psch> afaict right now it's just following a pointer

[16:19] *** skids joined
[16:20] <psch> so, the obvious solution would be having a sixmodel.TypeObject return a long instead of dieInternal

[16:20] <psch> while the more involved solution involved adapting the serialization code for VMArray to take TypeObjects into account

[16:20] <psch> ...while nqp-m keeps cheating :S

[16:23] <skids> m: [Coke]: WRT Changelog ".reverse on ranges returns Seq now, not List"

[16:23] <camelia> rakudo-moar 1ad917: OUTPUT«===SORRY!=== Error while compiling /tmp/TFTyXP60fS␤Confused␤at /tmp/TFTyXP60fS:1␤------> [Coke]:⏏ WRT Changelog ".reverse on ranges retur␤    expecting any of:␤        colon pair␤»

[16:23] <skids> ergh reflex m:

[16:35] <dalek> rakudo/nom: 6ef16ca | coke++ | src/core/List.pm:

[16:35] <dalek> rakudo/nom: Revert "Don't bother creating native str array if possible"

[16:35] <dalek> rakudo/nom:

[16:35] <dalek> rakudo/nom: This reverts commit 93d597f4075cfc13aa925a662bc3ee6e4986bda0.

[16:35] <dalek> rakudo/nom:

[16:35] <dalek> rakudo/nom: 12:29 < liztormato> [Coke]: please revert the commit that is causing the jvm buid failure

[16:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ef16cac1d

[16:38] <dalek> rakudo/nom: 468d431 | coke++ | docs/announce/2016.03.md:

[16:38] <dalek> rakudo/nom: Pull in some changelog

[16:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/468d4312e0

[16:38] <dalek> rakudo/nom: f6c45b8 | coke++ | tools/build/NQP_REVISION:

[16:38] <dalek> rakudo/nom: [release] bump NQP revision

[16:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6c45b817a

[16:38] <dalek> rakudo/nom: 5eaa15d | coke++ | VERSION:

[16:38] <dalek> rakudo/nom: [release] bump VERSION

[16:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5eaa15df31

[16:40] <dalek> nqp: d2e5dad | coke++ | tools/build/MOAR_REVISION:

[16:40] <dalek> nqp: bump moar revision

[16:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d2e5dadcdb

[16:40] <dalek> nqp: d6fadbd | coke++ | VERSION:

[16:40] <dalek> nqp: bump version to 2016.03

[16:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d6fadbdbf1

[16:45] <[Coke]> make test failure on nom.

[16:45] <[Coke]> Test Summary Report

[16:45] <[Coke]> -------------------

[16:45] <[Coke]> t/04-nativecall/13-union.t             (Wstat: 65280 Tests: 26 Failed: 0)

[16:47] <[Coke]> it's actually the use v6 causing the failure here.

[16:47] <[Coke]> [6~[6~

[16:48] <[Coke]> Doesn't appear to be impacting any of the other files, though. Just that one.

[16:49] <[Coke]> My plan will be to remove the use there. I have to run out to the store; if someone has a better idea before I get back, great. :)

[16:58] *** AlexDaniel joined
[17:47] *** Ben_Goldberg joined
[18:05] <[Coke]> oh. no, it just fails *sometimes*. :P

[18:12] <[Coke]> yah, I can get it to fail every few times running make test.

[18:22] *** geekosaur joined
[20:23] * lizmat is back

[20:34] <timotimo> with spesh_disable set i get 10 out of 10 non-crashes

[20:36] <lizmat> just double checked it: still fails with it:

[20:36] <lizmat> $ MVM_SPESH_DISABLE=foo perl6 2

[20:36] <lizmat> Segmentation fault: 11

[20:36] <timotimo> 6b85e65d08ce8b5d59027dc2ed799f68f1b25d38  segv.pl6

[20:36] <timotimo> ^- sha1sum

[20:36] <timotimo> to be sure

[20:37] <lizmat> $ perl6 --optimize=2 2

[20:37] <lizmat> 360360

[20:37] <lizmat> fails with --optimize=0 and --optimize=1

[20:37] <lizmat> anything above 2 it works

[20:37] <lizmat> what's the default again ?

[20:38] <timotimo> i think it's 3 for the core setting and 2 otherwise?

[20:39] <timotimo> aye, 2 is the default

[20:39] <timotimo> anyway. i know where to put the check for a null value so we can get a panic instead of a segfault

[20:39] <timotimo> that's not a good improvement

[20:40] <timotimo> i'll be AFK for a bit to prepare dinner and such, after that i'll have a look at the generated bytecode and why that MVMContext's body ends up containing a null pointer

[20:40] <lizmat> argh: I had removed the () around True

[20:40] <timotimo> hehe

[20:40] <lizmat> so, with that put back, it segfaults on 3 also

[20:41] <lizmat> and on 2, but not on 0 and 1

[20:42] <timotimo> how about spesh disable?

[20:43] <lizmat> still segfaults

[20:43] <lizmat> This is my SHA1: $ 6 'use nqp; say nqp::sha1("2".IO.slurp)'

[20:43] <lizmat> 38C3A8A7984CAD0DE5868D91B5716255EA8013FA

[21:02] <lizmat> fwiw, I can't get t/04-nativecall/13-union.t to fail with "prove -v -e 'perl6 --ll-exception' t/04-nativecall/13-union.t"

[21:03] <lizmat> it fails 3/4 times using make

[21:23] <dalek> rakudo/nom: 1bbef98 | lizmat++ | t/harness:

[21:23] <dalek> rakudo/nom: We don't need "lib" and "." anymore

[21:23] <dalek> rakudo/nom:

[21:23] <dalek> rakudo/nom: As a side effect, this also seems to fix the spurious errors as

[21:23] <dalek> rakudo/nom: discussed in RT #127750.  Although technically, this is a workaround,

[21:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127750

[21:23] <dalek> rakudo/nom: having always a "use lib lib, ." for each test was a fossil from

[21:23] <dalek> rakudo/nom: older days when we still had @*INC (aka pre-CURLI)

[21:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1bbef98941

[21:24] <dalek> roast: c8ee946 | lizmat++ | S11-modules/require.t:

[21:24] <dalek> roast: Fix only test file that broke because of 1bbef98

[21:24] <dalek> roast: review: https://github.com/perl6/roast/commit/c8ee94664c

[21:25] <lizmat> so I think we can safely say there are still some dragons in the precomp department  :-(

[21:27] <timotimo> ;(

[21:38] <lizmat> hmmm... looks like my last change had a significant effect on spectest runtime

[21:38] <lizmat> Files=1106, Tests=51998, 265 wallclock secs (13.73 usr  4.18 sys + 1653.57 cusr 146.87 csys = 1818.35 CPU)

[21:39] <timotimo> is that good?

[21:40] <lizmat> from a few days ago, with almost 300 fewer tests:

[21:40] <lizmat> Files=1106, Tests=51726, 280 wallclock secs (14.32 usr  4.32 sys + 1654.18 cusr 158.33 csys = 1831.15 CPU)

[21:41] <timotimo> *nice*

[22:03] *** BenGoldberg_ joined
[23:54] <[Coke]> ok. I have to now 'make install' before make test or lots of failures.

[23:55] <[Coke]> but even if I do that, that test from before still fails.

[23:59] <timotimo> huh, it does?

[23:59] <timotimo> but you've already Configure.pl'd?
