[00:02] *** Skarsnik joined
[00:21] *** [Tux] joined
[00:28] *** skids joined
[03:00] *** japhb joined
[03:02] *** lizmat_ joined
[03:26] *** japhb joined
[03:32] *** geekosaur joined
[03:56] *** geekosaur joined
[06:44] *** geekosaur joined
[07:30] *** RabidGravy joined
[08:10] <[Tux]> test            21.761

[08:10] <[Tux]> test-t          12.156

[08:10] <[Tux]> csv-parser      25.390

[08:10] <[Tux]> 12.210 on a second run

[08:27] *** lizmat joined
[09:48] <RabidGravy> :-\

[09:48] <RabidGravy> wasn't it below 10 at some point earlier in the year?

[09:48] <timotimo> http://tux.nl/Talks/CSV6/speed4.html

[09:49] <timotimo> it hasn't dipped below 11.9 or something

[09:49] <RabidGravy> yeah, false memory

[09:50] <[Tux]> $ grep 'test-t 1[01]\.' *log

[09:50] <[Tux]> 2016-01-22 16:09:12 test-t 11.937

[09:50] <[Tux]> 2016-02-09 11:28:24 test-t 11.750

[09:50] <[Tux]> 2016-02-10 08:35:50 test-t 11.839

[09:50] <[Tux]> 2016-02-11 08:38:52 test-t 11.884

[09:50] <[Tux]> 2016-02-15 18:20:21 test-t 11.776

[09:50] <[Tux]> 2016-02-19 11:55:51 test-t 11.672

[09:50] <[Tux]> 2016-02-21 11:07:21 test-t 11.956

[09:50] <[Tux]> 2016-02-23 08:34:45 test-t 11.934

[09:50] <[Tux]> 2016-02-25 08:23:23 test-t 11.828

[09:50] <[Tux]> 2016-02-26 09:15:45 test-t 11.889

[09:50] <timotimo> not bad!

[09:50] <timotimo> we'll get back there soon.

[09:51] * [Tux] hopes that that info is not perceived as throttle

[09:51] <RabidGravy> it would be an interesting if somewhat tedious endeavour for someone with a lot of time on their hands to bisect through the timings

[09:52] <[Tux]> unlikely I will be posting new timeings this week

[09:52] <[Tux]> want me to automate the graphs for the upcoming week?

[09:52] <RabidGravy> :)

[09:52] <timotimo> i thought they were already automated, huh.

[09:53] <[Tux]> nope. all manual

[09:53] <[Tux]> the graphs *are* automated from the manual commands though

[09:53] <timotimo> okay!

[09:56] * [Tux] tests automated build …

[09:59] <RabidGravy> [Tux]++

[10:01] * lizmat will be doing a 20 minute ad-hoc Q&A session at the NLPW this afternoon at 16:00

[10:07] <jnthn> lizmat: Cool :)

[10:08] <jnthn> Hope NLPW is being a nice time so far

[10:09] <RabidGravy> nice weather for it

[10:09] <jnthn> hah, not here :P

[10:09] <lizmat> being at the registration desk, I haven't seen a single presentation yet

[10:09] <jnthn> lizmat: aww

[10:09] <lizmat> but people seem happy and having fun...

[10:09] <RabidGravy> sunny and quite mild in London

[10:09] <lizmat> the Hallway++ track is also quite busy with some ad-hoc hacking going on (not perl 6 though :-( )

[10:10] <lizmat> RabidGravy: same here, but tomorrow and Sunday are going to be the first 20C+ days here this year, so we're good  :-)

[10:11] <[Tux]> cron job wil now refresh timings and graphs every day at 09:09 Europe/Amsterdam

[10:11] <RabidGravy> ooh, almost outside drinking weather

[10:12] <jnthn> We had really nice sunny weather yesterday. Today is overcast and damp.

[10:12] <jnthn> So, I have most of the rest of the day to work on Perl 6 things... :)

[10:13] <jnthn> And like months worth of things folks want me to do with it :P

[10:13] <RabidGravy> cool

[10:13] <timotimo> https://github.com/search?q=This+should+never+happen&type=Code&utf8=%E2%9C%93 <3

[10:14] <lizmat> https://github.com/search?utf8=✓&q=%22This+should+never+happen%22&type=Code&ref=searchresults

[10:14] <lizmat> gives significantly fewer results, but still a lot  :-)

[10:14] <timotimo> ah

[10:14] <RabidGravy> while there are some semi-awake people here, any feelings why a  .wrap() might contribute to an SCRef getting leaked (and compilation failing as a result?)

[10:15] <lizmat> RabidGravy: feels like an RT to me with the proper golfing :-)

[10:15] <timotimo> shouldn't an SCRef actually be serializable? i mean, shouldn't it just add a proper dependency and things work out fine?

[10:16] <[Tux]> refresh speed4.html: the timing log is now available to all

[10:16] <timotimo> maybe we're missing a repossession barrier in some operation that's related to .wrap

[10:19] <RabidGravy> the circumstances are quite convoluted, there's a "class trait" which adds a role that over-rides the compose to wrap the methods

[10:20] <RabidGravy> it only fails for "explicit" methods and not attribute accessors if that helps

[10:47] <dalek> nqp: 8bea1eb | jnthn++ | src/vm/jvm/ (3 files):

[10:47] <dalek> nqp: Implement nqp::setdebugtypename on JVM.

[10:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8bea1eb605

[10:47] <dalek> nqp: 5cb3a0b | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[10:47] <dalek> nqp: Move setdebugtypename op to be with object ops.

[10:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5cb3a0b2d8

[10:47] <dalek> nqp: 24789b4 | jnthn++ | src/vm/jvm/stage0/ (10 files):

[10:47] <dalek> nqp: Update JVM stage0.

[10:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/24789b4893

[10:48] <dalek> nqp: e400d72 | jnthn++ | src/vm/moar/stage0/ (11 files):

[10:48] <dalek> nqp: Update MoarVM stage0 bootstrap.

[10:48] <dalek> nqp:

[10:48] <dalek> nqp: This means we'll be able to use the nqp::setdebugtypename op in NQP's

[10:48] <dalek> nqp: MOP.

[10:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e400d72a8a

[10:48] <dalek> nqp: 77005fc | jnthn++ | src/how/NQP (5 files):

[10:48] <dalek> nqp: Scatter various nqp::setdebugtypename.

[10:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/77005fc915

[10:48] <dalek> nqp: 2632192 | jnthn++ | src/ (16 files):

[10:48] <dalek> nqp: Merge branch 'use-setdebugtypename'

[10:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2632192a04

[11:00] <dalek> rakudo/nom: 34942c8 | jnthn++ | tools/build/NQP_REVISION:

[11:00] <dalek> rakudo/nom: Bump NQP_REVISION for nqp::setdebugtypename.

[11:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34942c8597

[11:00] <dalek> rakudo/nom: ae43baa | jnthn++ | src/Perl6/Metamodel/Naming.nqp:

[11:00] <dalek> rakudo/nom: Remove `#?if moar` that we no longer need.

[11:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae43baa964

[11:00] <jnthn> sortiz: In https://rt.perl.org/Ticket/Display.html?id=127813 I assume you missed the $s off the parameter vars? :)

[11:35] <sortiz> jnthn, indeed. I can reproduce it trivially if more info is needed.

[11:45] <jnthn> sortiz: I suspect the is repr golfs away too? And it probably even golfs to a sub call?

[11:50] *** lizmat joined
[11:50] <sortiz> Umm, dunno, Need to do more testing.

[11:57] <timotimo> jnthn: do you know something about it being unsafe to remove Want nodes if we find them in sink context in the optimizer?

[11:58] <sortiz> jnthn, if I change that parameter to positional, works with and without the constraint, so is named related.

[11:59] <jnthn> timotimo: Well yeah, anything can carry a flatten/named, including a Want node

[11:59] <timotimo> oh!

[11:59] <jnthn> timotimo: So can be that.

[11:59] <timotimo> that sounds like a good hint

[11:59] <jnthn> sortiz: Interesting...

[11:59] <jnthn> sortiz: It's probably a code-gen bug

[12:02] <sortiz> jnthn, Another fact: Only fail if the constraint is a native int type, Int works.

[12:02] <timotimo> that'd make a big difference in the underlying code

[12:03] <jnthn> sortiz: And only if it's unsigned, by any chance?

[12:05] <sortiz> The type and operand change, but fails: "operand type 32 does not match register type 24"

[12:06] <sortiz> But with [u]int64 works!

[12:11] <timotimo> wait. if a Want node has nameds or flattening, it wouldn't ever be in $!void_context, would it?

[12:11] <timotimo> i was only going to build a "if the void context is known, replace the want node with its third child"

[12:13] <jnthn> timotimo: Ah, true

[12:13] <jnthn> Hm

[12:13] <timotimo> i might start work on a star release

[12:13] <timotimo> (out of nowhere)

[12:13] <sortiz> jnthn, not method related, same problem calling as a sub.

[12:13] <jnthn> OK, so that's another golf too

[12:21] <sortiz> m: use NativeCall; sub Foo(uint32 :$bar) { say $bar }; Foo(:bar(4));

[12:21] <camelia> rakudo-moar ae43ba: OUTPUT«Bytecode validation error at offset 40, instruction 6:␤operand type 160 does not match register type 152␤  in block <unit> at /tmp/MJZ3yGoxGX line 1␤␤»

[12:21] <dalek> nqp: 52fb397 | jnthn++ | t/nqp/19-file-ops.t:

[12:21] <dalek> nqp: Fix broken skip count.

[12:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/52fb397d17

[12:23] <jnthn> heh, spelling switch wrong is a good way to confuse a C compiler, and yourself until you spot it... :)

[12:23] <sortiz> m: sub Foo(uint32 :$bar) { say $bar }; Foo(:bar(4)); # btw don't need NativeCall.

[12:23] <camelia> rakudo-moar ae43ba: OUTPUT«Bytecode validation error at offset 40, instruction 6:␤operand type 160 does not match register type 152␤  in block <unit> at /tmp/5nZ_TgBdbq line 1␤␤»

[12:24] <sortiz> jnthn, minimal golf ^^^

[12:29] <jnthn> sortiz: Thanks; please drop it into the RT :)

[12:31] <sortiz> jnthn, done. Thanks.

[12:52] <[Coke]> (april fool's day) No. No we are not.

[12:55] <[Coke]> someone in -toolchain wants the public key used to sign the tarballs.

[12:56] <[Coke]> Where should we put such things?

[12:56] <timotimo> um, is it wise to hand around a single key, rather than having a chain of trust instead?

[12:56] <[Coke]> timotimo: It's my key. I'm signing the releases.

[12:56] <timotimo> we probably also sign rakudo-star releases?

[12:57] <timotimo> how long are you going to be around today? :)

[12:57] <[Coke]> I assume if someone else ever does a release and they have a key, they'll sign it on their own.

[12:57] <[Coke]> I just got into work.

[12:58] <timotimo> Multiple exceptions were thrown by LEAVE/POST phasers

[12:58] <timotimo> Attempt to read past end of string heap when locating string

[12:58] <timotimo> well, this is pretty fantastic %)

[13:00] <jnthn> timotimo: Corrupt bytecode file of some kind?

[13:00] <timotimo> i wonder how

[13:00] <jnthn> Dunno

[13:01] <timotimo> happened close to the end of install-modules

[13:03] <timotimo> could be because i've asked it to install Shell::Command again, after it was already in there from panda installing it

[13:05] *** skids joined
[13:08] <timotimo> i ran make modules-install a second time and it worked

[13:08] <timotimo> *shrug*

[13:21] *** lizmat joined
[13:30] <[Coke]> RT: 1301; PERF: 13

[13:43] <[Coke]> mentioned in perlchain, but repeating here: https://rakudo.org is very broken.

[13:44] <[Coke]> we need SSL working so we can host the keys we use to sign the tarballs.

[14:04] *** lizmat joined
[14:41] <dalek> nqp: 1e4a73a | (Pawel Murias)++ | src/vm/js/ (3 files):

[14:41] <dalek> nqp: [js] Make nqp-js-on-js handle native call stuff.

[14:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1e4a73adf6

[14:41] <dalek> nqp: 3598599 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[14:41] <dalek> nqp: [js] Support using P6num and P6str as REPRs in nqp-js-on-js.

[14:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3598599017

[14:41] <dalek> nqp: 66da2a2 | (Pawel Murias)++ | docs/qast.markdown:

[14:41] <dalek> nqp: Document typevar.

[14:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/66da2a28b6

[14:41] <dalek> nqp: 9959496 | (Pawel Murias)++ | README.pod:

[14:41] <dalek> nqp: [js] Document how to build nqp-js-on-js.

[14:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/99594966d0

[16:39] *** geekosaur joined
[17:28] <dalek> nqp: 512c9a1 | jnthn++ | tools/build/MOAR_REVISION:

[17:28] <dalek> nqp: Bump MOAR_REVISION for fixes, improvements.

[17:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/512c9a1484

[17:29] <dalek> rakudo/nom: ecb7f70 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[17:29] <dalek> rakudo/nom: use_capture can allocate; add MVMROOT.

[17:29] <dalek> rakudo/nom:

[17:29] <dalek> rakudo/nom: This fixes a crash/memory corruption that was most likely to show up

[17:29] <dalek> rakudo/nom: in any hot-path code that did a lot of deferral (nextsame et al).

[17:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ecb7f700d0

[17:29] <dalek> rakudo/nom: 507acf1 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[17:29] <dalek> rakudo/nom: Avoid an allocation on an error path.

[17:29] <dalek> rakudo/nom:

[17:29] <dalek> rakudo/nom: Doesn't fix anything, just a bit neater.

[17:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/507acf1135

[17:32] <dalek> rakudo/nom: a87fb43 | jnthn++ | tools/build/NQP_REVISION:

[17:32] <dalek> rakudo/nom: Bump to get lastest MoarVM, NQP fixes.

[17:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a87fb43b6c

[17:33] <dalek> roast: be1b7fe | jnthn++ | S32-str/utf8-c8.t:

[17:33] <dalek> roast: Test for RT #126756.

[17:33] <dalek> roast: review: https://github.com/perl6/roast/commit/be1b7fe0c7

[17:33] <dalek> roast: 8516c62 | jnthn++ | integration/weird-errors.t:

[17:33] <dalek> roast: Test for RT #127748.

[17:33] <dalek> roast: review: https://github.com/perl6/roast/commit/8516c62ada

[17:36] <jnthn> There we go, two SEGVs down.

[17:47] <[Coke]> \o/

[20:49] <RabidGravy> Harr!

[21:42] *** AlexDaniel joined
[21:52] *** perlpilot joined
[22:03] *** lizmat joined
[22:24] <dalek> nqp: 1168dac | (Stéphane Payrard)++ | README.pod:

[22:24] <dalek> nqp: supress section about nqp-rx. dead since 6 years

[22:24] <dalek> nqp:

[22:24] <dalek> nqp: Maybe the same should be done for Parrot? Not sure.

[22:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1168dac77b

[22:24] <dalek> nqp: ed2d728 | lizmat++ | README.pod:

[22:24] <dalek> nqp: Merge pull request #278 from cognominal/patch-1

[22:24] <dalek> nqp:

[22:24] <dalek> nqp: supress section about nqp-rx. dead since 6 years

[22:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ed2d728bf2
