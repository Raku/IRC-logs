[00:06] *** skids joined
[00:24] <[Coke]> (hesi

[00:26] <timotimo> he what?

[00:40] <geekosaur> ...hesiod?

[01:08] <[Coke]> weird.

[01:18] *** stmuk_ joined
[01:20] <geekosaur> (for maximum confusion that probably should have been "odd." :p )

[01:25] <[Coke]> he!

[02:11] *** lizmat_ joined
[07:11] *** FROGGS joined
[07:59] <[Tux]> test            21.727

[07:59] <[Tux]> test-t          12.210

[07:59] <[Tux]> csv-parser      25.203

[08:57] *** RabidGravy joined
[12:55] <dalek> roast: 4626476 | lizmat++ | S03-operators/buf.t:

[12:55] <dalek> roast: Add some Blob/Buf.allocate/reallocate tests

[12:55] <dalek> roast: review: https://github.com/perl6/roast/commit/4626476a8d

[13:51] <dalek> roast: 90c27df | lizmat++ | S03-operators/buf.t:

[13:51] <dalek> roast: Also check Blob.reallocate failure

[13:51] <dalek> roast:

[13:51] <dalek> roast: And some better messaging

[13:51] <dalek> roast: review: https://github.com/perl6/roast/commit/90c27df975

[13:56] *** RabidGravy joined
[14:07] <lizmat> afk for the next 10 hours or so&

[15:04] *** skids joined
[15:26] <[Coke]> I'll get the release out the door tomorrow; sorry, busy day or three at work.

[16:54] <perlpilot> [Coke]++

[17:39] <jnthn> m: say 1.87 / 69.83

[17:39] <camelia> rakudo-moar 54ce66: OUTPUT«0.026779␤»

[17:39] <jnthn> m: say 1.87 R/ 69.83

[17:39] <camelia> rakudo-moar 54ce66: OUTPUT«37.342246␤»

[17:39] <jnthn> wow :)

[17:48] <timotimo> i really want to see what that wow is for now :)

[17:48] *** geekosaur joined
[17:49] <timotimo> .o( maybe the size of a heap dump vs the size of a program that doesn's dump )

[17:49] <perlpilot> whatever it is is 37 times better/faster/stronger  ;)

[17:49] <jnthn> No, nothing to do with heap dumps directly

[17:50] <jnthn> More that I'm going to write my heap dump analyzer in Perl 6.

[17:50] <timotimo> what, really?

[17:50] <jnthn> And checked one thing I thought would bottleneck it

[17:50] <jnthn> And now am fixing it somewhat

[17:50] * timotimo impressed

[17:50] <jnthn> timotimo: Yes, because we really need to be able to handle this size of data.

[17:51] <timotimo> yeah, we do have to

[17:51] <jnthn> And since I'm working on performance stuff, it makes sense that I bang my own head against the places we're just too slow

[17:52] <timotimo> aye

[17:52] <timotimo> so this ratio was one thing you tried in your script vs another thing, eh?

[17:52] <jnthn> Will push soon when spectest is done...provided it comes out ok :)

[17:52] <[Coke]> jnthn: better you than most other people, for sure. ;)

[17:55] <dalek> nqp: 034121e | jnthn++ | src/vm/moar/HLL/Backend.nqp:

[17:55] <dalek> nqp: Put "my" heap snapshot output in place.

[17:55] <dalek> nqp:

[17:55] <dalek> nqp: This replaces the timotimo++ work on this with the format I had in

[17:55] <dalek> nqp: mind and was still putting together locally.

[17:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/034121ef04

[17:55] <dalek> nqp: 0a8327f | jnthn++ | tools/build/MOAR_REVISION:

[17:55] <dalek> nqp: Bump MOAR_REVISION for heap snapshot support.

[17:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0a8327f5df

[17:55] <jnthn> timotimo: If there's anything you're unhappy about in my run of it, let me know :)

[17:56] <timotimo> only if i get to also change your analyzer script at the same time :)

[17:57] <psch> m: .say for $*ARGFILES

[17:57] <camelia> rakudo-moar 54ce66: OUTPUT«write string requires an object with REPR MVMOSHandle␤  in block <unit> at /tmp/HYZGP9ziKa line 1␤␤»

[17:58] <psch> happens locally with or without a file as @*ARGS[1]

[17:58] <timotimo> too optimized, eh?

[17:58] <psch> not even sure what it wants to write there...

[17:58] <timotimo> well, you're calling .say on a file handle

[17:58] <timotimo> m: .say("hi") for $*ARGFILES

[17:58] <camelia> rakudo-moar 54ce66: OUTPUT«write string requires an object with REPR MVMOSHandle␤  in block <unit> at /tmp/WD1_JfyQjX line 1␤␤»

[17:58] <psch> hm, still at 2016.02-194-g5eaa15d locally

[17:58] <dalek> rakudo/nom: 72ba5a1 | jnthn++ | src/core/Str.pm:

[17:58] <dalek> rakudo/nom: Add a fast-path for simples cases of Str.Int.

[17:58] <dalek> rakudo/nom:

[17:58] <dalek> rakudo/nom: This gets a factor of 37 speedup for things like '100'.Int.

[17:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/72ba5a17f9

[17:59] <jnthn> As you might imagine, the heap analyzer will need the .Int a lot of Strs :)

[17:59] <timotimo> *neat*

[18:00] <timotimo> we recently had a little benchmark in the channel that read a file of an-int-per-line and sorted that

[18:00] <[Coke]> jnthn: doesn't Perl 6 need that also?

[18:00] <timotimo> i imagine that becomes a bit faster now

[18:00] <timotimo> but it'll not handle a - at the beginning

[18:00] <jnthn> [Coke]: Need what also?

[18:00] <[Coke]> the ability to convert a string to an int when parsing perl 6.

[18:01] <[Coke]> Just wondering if that speeds up the compiler itself.

[18:01] <timotimo> hm, the compiler will go via nqp's built-in

[18:01] <jnthn> [Coke]: I think the parser already figures out what it's looking at and manages to do the same thing already. :)

[18:02] <jnthn> (So, it already has the win.)

[18:04] <timotimo> jnthn: you don't get all the warnings from the heap compiler about incompatible pointer types?

[18:04] <jnthn> Nope

[18:04] <timotimo> src/profiler/heapsnapshot.c:15:13: note: expected ‘void **’ but argument is of type ‘MVMHeapSnapshotCollectable ** {aka struct MVMHeapSnapshotCollectable **}’

[18:04] <timotimo> static void grow_storage(void **store, MVMuint64 *num, MVMuint64 *alloc, size_t size) {

[18:04] <timotimo> ^- this times ten or twenty :)

[18:04] <jnthn> wtf

[18:04] <jnthn> I thought the point of a void pointer was to not bitch :/

[18:05] <jnthn> MSVC doesn't :)

[18:05] <jnthn> Wonder if void ** doesn't count

[18:06] <timotimo> that's a possibility

[18:06] <jnthn> Guess we could try taking that and casting to ** :)

[18:06] <jnthn> But then you lose the wrong indirection warnings which are useful :/

[18:06] <timotimo> taking void * and casting to void **?

[18:06] <jnthn> Yeah

[18:08] <jnthn> Anyways, time for a break :)

[19:03] *** sortiz joined
[19:22] *** FROGGS joined
[19:43] <nine> Oh, it seems like I've made it through compilation of the EVAL itself and it's now dieing on serializing the outer comp unit

[19:53] <[Coke]> progress?

[20:12] *** synopsebot6 joined
[20:14] <nine> I like to think so :)

[20:43] <[Coke]> \o/

[22:49] *** AlexDaniel joined
[23:11] *** Woodi joined
[23:55] *** Ben_Goldberg joined
