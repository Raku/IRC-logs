[00:38] *** colomon joined
[01:06] *** colomon joined
[01:21] *** vendethiel joined
[02:11] *** vendethiel joined
[02:41] <awwaiid> I'm tracing through to understand how eval in the REPL works, via some nqp::say statements in nqp/src/HLL/Compiler.nqp method eval. I'm just modifying the one that rakudo grabbed for me when it built itself. But my changes don't seem to be sticking, even when I do a make inside of nqp/ and then one in the main rakudo/ dir. Any tips?

[02:42] <awwaiid> I tried make clean in both and that didn't help

[03:19] *** geekosaur joined
[03:26] <skids> awwaid: maybe cd into the nqp subdir and git commit?

[03:26] <skids> Also, delete the nqp binary

[04:02] *** vendethiel joined
[04:25] *** geekosaur joined
[04:43] *** vendethiel joined
[06:10] <nine> awwaiid: did you do a "make install" in the nqp/ dir?

[06:43] *** vendethiel joined
[06:59] <Woodi> about ForeignCode things nine++ described: is such system a good-one ? or is there from historical research/development reasons ?  anyway, got idea: what about internal (p6 comunity) "blog" for such findings ? :)  or some more permament then logs medium

[07:47] *** RabidGravy joined
[08:56] <jnthn> ForeignCode just means "this thing didn't have a Perl 6 code object, so we faked one up so you can use it a bit like a Perl 6 code object"

[08:57] <jnthn> Just a part of the usual hllize thing.

[08:58] <psch> Woodi: permanence isn't something i'd worry about wrt the clog, structure is

[08:59] <psch> Woodi: but that's also again time that someone has to spend on blogging instead of hacking

[08:59] <psch> sure, a p6dev weekly (or maybe monthly, or maybe just interesting discussion summarized and structured) would be neat, but who's gonna write it..? :)

[09:00] <psch> fwiw, for the jvminterop i had wondered if attaching a more meaningful signature to a ForeignCode would be feasible

[09:02] <psch> because we then could use the Binder a bit more meaningfully when trying to call Java methods

[10:13] *** btyler joined
[10:26] <Woodi> psch: belive me, devs time is my looking-stupid-ramblings priority. also not forcing them to artificial or rigid or non-voluntary schemas. just seeing that some unobtrusive, almoust no time taking bag of notes could be usefull. you have something interesting and what ? ignore: possibly; docs: no; blog: no; faq: no; irc logs: grepping years of text isn't. so something can be invented :)  also ignored until

[10:26] <Woodi> not invented...

[10:26] * Woodi shuts up

[10:31] <psch> Woodi: as i said, i think the idea has merit.  someone just has to actually do it :)

[10:39] <jnthn> One of the few times a large amount of internals docs got written was for the Rakudo/NQP internals course

[10:44] <nine> (conference driven documenting)++

[10:44] <nine> All Inline::Perl5 examples were written for conference talks.

[10:45] <jnthn> nine: Actually, that was a case of "generous sponsor hired me (through $dayjob) to write and deliver the course"

[10:46] <nine> sponsor++

[10:46] <timotimo> sponsor++ # again and again

[10:46] <jnthn> Had that not been the case then it would likely not have happened, or woulda come at the cost of me having time for no Perl 6 development work for at least a month 'cus I was spending it all writing the tutorial.

[10:47] <jnthn> I've done my share of conference driven dev also, of course ;-)

[10:48] <jnthn> Though it's often for live demos... :)

[11:20] <dalek> nqp: 64e50da | (Pawel Murias)++ | src/vm/js/ (2 files):

[11:20] <dalek> nqp: [js] Implement nqp::setdebugtypename.

[11:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/64e50daac4

[11:29] *** pmurias joined
[11:30] <pmurias> jnthn: if I implement nqp::p6* ops directly in nqp-js will it cause trouble?

[11:38] <jnthn> pmurias: Why do that, ooc?

[11:38] <jnthn> It'd probably not be a *technical* problem, but it would make a change that currently only needs changes in the Rakudo repo also need changes in the NQP one

[11:39] <jnthn> lunch, bbi20

[12:17] *** pmurias joined
[12:25] <awwaiid> nine: make install helps, thanks!

[13:01] <dalek> rakudo/nom: cb27a19 | hoelzro++ | src/core/REPL.pm:

[13:01] <dalek> rakudo/nom: REPL6: Disable REPL6 on JVM

[13:01] <dalek> rakudo/nom:

[13:01] <dalek> rakudo/nom: Currently, trying to initialize the compiler object in the REPL

[13:01] <dalek> rakudo/nom: causes a java.lang.StackOverflowError.

[13:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb27a19eb7

[13:01] <dalek> rakudo/nom: 600eb53 | hoelzro++ | docs/line-editor.pod:

[13:01] <dalek> rakudo/nom: Add some docs on the REPL and line editors

[13:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/600eb5351e

[13:10] *** geekosaur joined
[13:24] *** pmurias joined
[13:24] *** [Tux] joined
[13:27] *** |Tux| joined
[13:28] *** skids joined
[15:24] *** teatime joined
[15:29] *** vendethiel joined
[16:09] *** lizmat joined
[16:29] *** pmurias joined
[17:00] <dalek> nqp: 875e3ad | (Pawel Murias)++ | src/vm/js/RegexCompiler.nqp:

[17:00] <dalek> nqp: [js] Fix compiling a pass regex node with a dynamic name.

[17:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/875e3ad9d0

[17:00] <dalek> nqp: f0939b3 | (Pawel Murias)++ | t/nqp/66-pararole.t:

[17:00] <dalek> nqp: Test token ::($method) {...}.

[17:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f0939b3984

[17:29] *** lizmat_ joined
[17:29] *** _z joined
[18:35] <lizmat> http://irclog.perlgeek.de/perl6/2016-04-05#i_12290598

[18:35] <lizmat> making Hash.gist give {} breaks a few spectests that depend on .gist

[18:36] <lizmat> unrelated to Hash per se

[18:36] <lizmat> before I commit this patch, do we agree that Hash.gist should have {} like Array.gist has [] ?

[18:37] <lizmat> m: say []; say {}

[18:37] <camelia> rakudo-moar 600eb5: OUTPUT«[]␤␤»

[18:38] *** FROGGS joined
[18:38] <lizmat> masak: ^^^  ??

[18:39] *** vendethiel joined
[18:40] <sortiz> lizmat, +1  # My 2¢

[18:41] <[Coke]> m: my %a; say %a;

[18:41] <camelia> rakudo-moar 600eb5: OUTPUT«␤»

[18:41] <[Coke]> yah, seems reasonable to me to add.

[18:43] <lizmat> m: dd ¾

[18:43] <camelia> rakudo-moar 600eb5: OUTPUT«0.75␤»

[18:54] <masak> I am happy about how much of https://github.com/masak/data-pretty is now done by vanilla Rakudo.

[18:54] <masak> {} for hashes (though I don't seem to have included that as something to fix in data-pretty) would be a step in that same, right direction

[18:55] <masak> if you're looking for prior art, Python already has it that way

[18:55] <masak> though it is an interesting question whether this constitutes a breaking API change, and requires some sort of deprecation

[18:55] <skids> -errata maybe?

[18:56] <lizmat> well, having tests depend on the behaviour of .gist, is just a red flag to me, really

[18:56] <jnthn> Well, given it regresses spectests, we should be a bit cautious

[18:57] <jnthn> Tests depending on .perl output is fairly clear-cut

[18:57] <jnthn> Whereas "say" is used a lot for actual output.

[18:57] <lizmat> so, I would then change the tests to use .perl instead of .gist

[18:57] <lizmat> ?

[18:57] <btyler> masak: all the way to Python for prior art? what about good old Data::Dumper? :P

[18:58] <jnthn> lizmat: Uh...no :P

[18:58] <jnthn> lizmat: I'm saying we have to be careful *because* the tests test .gist

[18:58] <jnthn> lizmat: And that means we claimed that gist working this was is something we support

[18:58] <masak> btyler: Data::Dumper is another good example, though the Perl 6 analogue to that would be .perl, not .gist

[18:58] <btyler> fair point, given the eval-ability

[18:58] <jnthn> So it's on the "can we get away with it" territory

[18:59] <jnthn> I somewhat suspect we can

[18:59] <masak> btyler: in Python, they don't have .gist -- instead all data structures just stringify to something sensible already :P

[18:59] <lizmat> well, if I thought we shouldn't do this, I wouldn't have tried it, or bring it up here  :-)

[18:59] <jnthn> masak: uh... __str__ vs __repr__? :)

[19:00] <masak> jnthn: I stand corrected

[19:00] <jnthn> lizmat: I guess we can see what ecosystem fallout there is :)

[19:00] <masak> jnthn: though overall I still feel that Python wins in terms of sensible stringifications

[19:01] <jnthn> lizmat: I mean, I like the change...I just want a little caution on such things so we don't end up in a position where people are like "gah they said the language was stable then busted my code" :)

[19:01] <jnthn> If I had to guess, the fallout of this one will be rather low, though.

[19:02] <jnthn> So I think, let's try it and see if the ecosystem should get annoyed with us. :)

[19:02] * masak .oO( TO THE ECOSYSTEM-COMPILER! )

[19:22] *** teatime joined
[19:29] *** hankache joined
[19:38] <dalek> rakudo/nom: c12d407 | (Salvador Ortiz)++ | src/Perl6/Metamodel/DefiniteHOW.nqp:

[19:38] <dalek> rakudo/nom: Add .shortname to DefiniteHOW

[19:38] <dalek> rakudo/nom:

[19:38] <dalek> rakudo/nom: Since DefiniteNOW don't "does" Metamodel::Naming. it needs a shortname

[19:38] <dalek> rakudo/nom: method, unconditionally used by Mu.gist

[19:38] <dalek> rakudo/nom:

[19:38] <dalek> rakudo/nom: See http://irclog.perlgeek.de/perl6/2016-02-01#i_11970457

[19:38] <dalek> rakudo/nom: Test:

[19:38] <dalek> rakudo/nom: <sortiz> m: Int:D.gist

[19:38] <dalek> rakudo/nom: <camelia> rakudo-moar a5fe34: OUTPUT«Method 'shortname' not found for invocant of class 'Perl6::Metamodel::DefiniteHOW'␤  in block <unit> at /tmp/3vJXmqV_i_ line 1␤␤»

[19:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c12d407e15

[19:38] <dalek> rakudo/nom: a331b5b | moritz++ | src/Perl6/Metamodel/DefiniteHOW.nqp:

[19:38] <dalek> rakudo/nom: Merge pull request #701 from salortiz/Definite-shortname

[19:38] <dalek> rakudo/nom:

[19:43] <dalek> roast: e7fb85a | moritz++ | S12-coercion/coercion-types.t:

[19:43] <dalek> roast: RT #127841: .gist on coercion type objects

[19:43] <dalek> roast: review: https://github.com/perl6/roast/commit/e7fb85a521

[19:43] <dalek> rakudo/nom: 6a2ff75 | lizmat++ | src/core/Hash.pm:

[19:43] <dalek> rakudo/nom: Curlify Hash.gist, like Array.gist is bracketed

[19:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a2ff75a61

[20:04] <b2gills> lizmat: I fixed PR #686 so that it cleanly applies

[20:15] <dalek> rakudo/nom: 0fafd86 | (Brad Gilbert)++ | src/core/operators.pm:

[20:15] <dalek> rakudo/nom: Fix permutations(1) with early IterationEnd

[20:15] <dalek> rakudo/nom:

[20:15] <dalek> rakudo/nom: If the loop is run it would try to produce a second value

[20:15] <dalek> rakudo/nom: causing it to attempt to access @!a[-1]

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fafd860b2

[20:15] <dalek> rakudo/nom: c8ec5ac | lizmat++ | src/core/operators.pm:

[20:15] <dalek> rakudo/nom: Merge pull request #686 from b2gills/patch-4

[20:15] <dalek> rakudo/nom:

[20:15] <dalek> rakudo/nom: Fix permutations(1) with early IterationEnd

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c8ec5aca8b

[20:15] <dalek> roast: ff44772 | (Brad Gilbert)++ | S32-list/permutations.t:

[20:15] <dalek> roast: Test permutations(1) and (1,).permutations

[20:15] <dalek> roast:

[20:15] <dalek> roast: This is an edge case that regularly gets overlooked

[20:15] <dalek> roast: review: https://github.com/perl6/roast/commit/ff44772ed2

[20:15] <dalek> roast: d64d2eb | (Brad Gilbert)++ | S32-list/permutations.t:

[20:15] <dalek> roast: Test permutations(0) and ().permutations

[20:20] <skids> Hrm, could someone look at PR#732 and roast PR#110 if permutations/combinations are about to be touched?

[20:24] *** pmurias joined
[20:26] <lizmat> good night, #perl6!

[20:26] <skids> o/

[21:16] *** travis-ci joined
[21:16] <travis-ci> Rakudo build errored. lizmat 'Merge pull request #686 from b2gills/patch-4

[21:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/120990156 https://github.com/rakudo/rakudo/compare/6a2ff75a61fd...c8ec5aca8bb4

[21:16] *** travis-ci left
[21:16] *** awwaiid joined
[21:45] <psch> as a heads up, the travis failure is about github being on maintenance

[22:24] *** _z joined
[22:34] *** skids joined
[22:45] <b2gills> I can finally remove the workaround in this code golf: https://codegolf.stackexchange.com/posts/70405/revisions

[23:04] *** lizmat joined
