[00:01] <dalek> rakudo/nom: 5d514af | coke++ | docs/release_guide.pod:

[00:01] <dalek> rakudo/nom: release in progress...

[00:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d514af801

[00:01] <dalek> rakudo/nom: c766094 | coke++ | tools/build/NQP_REVISION:

[00:01] <dalek> rakudo/nom: [release] bump NQP revision

[00:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c766094265

[00:01] <dalek> rakudo/nom: c067957 | coke++ | VERSION:

[00:01] <dalek> rakudo/nom: [release] bump VERSION

[00:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c06795730d

[00:01] <dalek> rakudo/nom: 8e0b56b | coke++ | docs/release_guide.pod:

[00:01] <dalek> rakudo/nom: warn about perl6 vs. ./perl6

[00:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e0b56b018

[00:06] *** lizmat joined
[00:08] <dalek> rakudo/nom: b8302b3 | coke++ | docs/release_guide.pod:

[00:08] <dalek> rakudo/nom: fix shell typo

[00:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8302b3c01

[00:18] <dalek> rakudo/nom: 816a2c4 | coke++ | docs/release_guide.pod:

[00:18] <dalek> rakudo/nom: Test the Inline::Perl5 tests in roast

[00:18] <dalek> rakudo/nom:

[00:18] <dalek> rakudo/nom: as part of the official release process.

[00:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/816a2c4038

[00:26] <dalek> rakudo/nom: bb40720 | coke++ | docs/release_guide.pod:

[00:26] <dalek> rakudo/nom: Warn about stresstest warnings

[00:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb407206a4

[00:51] <dalek> rakudo/nom: 9f3ec1a | coke++ | docs/release_guide.pod:

[00:51] <dalek> rakudo/nom: clarify stresstest in the tarball build

[00:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f3ec1a023

[00:59] <dalek> rakudo/nom: 4461719 | coke++ | CREDITS:

[00:59] <dalek> rakudo/nom: combine identical emails

[00:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4461719979

[01:03] <dalek> rakudo/nom: 0c6c1c1 | coke++ | docs/ChangeLog:

[01:03] <dalek> rakudo/nom: one or two more changelogs

[01:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0c6c1c137a

[01:07] <dalek> rakudo/nom: ec2b6b2 | coke++ | docs/announce/2016.04.md:

[01:07] <dalek> rakudo/nom: expand people

[01:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec2b6b2b65

[01:07] <dalek> rakudo/nom: d941e62 | coke++ | docs/ChangeLog:

[01:07] <dalek> rakudo/nom: remove dupe, whoops

[01:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d941e62d71

[01:07] <dalek> rakudo/nom: 3a606a1 | coke++ | docs/announce/2016.04.md:

[01:07] <dalek> rakudo/nom: add notes from Changelog

[01:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a606a1beb

[01:07] <dalek> rakudo/nom: c37939c | coke++ | docs/announce/2016.04.md:

[01:07] <dalek> rakudo/nom: remove early adopter language

[01:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c37939cdbe

[01:10] <[Coke]> release tagged and tarballed.

[02:15] *** geekosaur joined
[03:29] *** vendethiel joined
[04:56] <stmuk> w00t!

[07:20] *** RabidGravy joined
[07:46] <[Sno]> nine_: in case you want to destroy one more bubble, take a look at https://www.lrde.epita.fr/~adl/autotools.html

[07:47] <[Sno]> in doubt, skip the macro explanations, just read reasons and consequences

[07:51] *** lizmat joined
[08:11] <masak> [Coke]++ # release

[08:45] *** brrt joined
[09:04] <jnthn> [Coke]++ # release

[09:18] <RabidGravy> [Coke]++ # Woah the Okey cokey!

[09:19] <jnthn> [Sno]: Was too tied up yesterday with other tasks to read the slides properly. Now I did, and my notes/questions are here: https://gist.github.com/jnthn/7843dadbe45e3f56f02f6a679c21f407

[09:19] <[Sno]> jnthn: thanks, will check them

[09:20] <[Sno]> jnthn: your comment to slide 9 is why I yesterday said "NQP is platform-agnostic" is true and wrong

[09:22] <jnthn> [Sno]: I don't get the "and wrong" bit at all

[09:23] <[Sno]> it is the reason for the mail from Feb 298th to you, liz and a few others - caused by a build error of IIRC rakudo

[09:23] <jnthn> How do you handle cross-compilation of, say, a pure Perl module?

[09:23] <jnthn> Or maybe a better example, a Java library that's pure JVM bytecode?

[09:23] <[Sno]> jnthn: the compilation isn't always the problem - it is prereqs and post-compile processes at well

[09:25] <[Sno]> jnthn: see eg. https://github.com/rehsack/meta-jens/blob/jethro-next-perl6/recipes-devtools/rakudo-star/rakudo-star-2016.01/Never-run-target-bin.patch

[09:27] <[Sno]> jnthn: regarding prereqs - when you cross-compile a pure-perl but use data from build host to do that (simple example: INT_MAX), it might cause hard to find issues on target

[09:27] <[Sno]> for a typical developer - that's all "compile" (for you, it's probably packaging)

[09:28] <psch> hrm

[09:28] * psch lacks thinking yet, apparently

[09:29] <psch> not related to the cross-building stuff, sorry for potential interruption... :)

[09:29] <jnthn> [Sno]: OK, so (for the pure Perl case) how is that resolved?

[09:30] <jnthn> Though maybe it's "not an issue" in that compiling modules doesn't really happen...

[09:30] <[Sno]> jnthn: depends - for recent Perl6 build's it resolved, I still stuck in find the location where the target artifact is executed

[09:31] <[Sno]> that heavily depends on the particular problem if, and when, how to solve

[09:33] <[Sno]> jnthn: s/for recent Perl6 build's it resolved/for recent Perl6 build's it not resolved/

[09:34] <[Sno]> I talked with lizmat regarding the issue and showed her the build logs and we decided I first do this talk and send it around to "educate" some people and then we look again

[09:35] <[Sno]> it is not a business-critical situation but when we can avoid mistakes made for other languages in Perl6 in early versions, we can become No°1 in IoT ;)

[09:35] *** synopsebot6 joined
[09:36] <jnthn> nine_: https://github.com/rakudo/rakudo/commit/efe73eb9decfec23b5447e2a379d799ede4aa8ab#diff-934b2f4bf4300d4256d450c3372330fcR2119 - if I understand, in nested mode we always immediately run a code object we just produced?

[09:36] <[Sno]> jnthn: regarding comment to slide 14 - I didn't dig really deep - I realized that a found lua without lua-jit causes Configure.PL to fail

[09:38] <jnthn> nine_: What happens if the `EVAL` contains a role or defines a class or itself has a BEGIN block? I'm worrying if https://github.com/rakudo/rakudo/commit/efe73eb9decfec23b5447e2a379d799ede4aa8ab#diff-934b2f4bf4300d4256d450c3372330fcR2303 has bad consequences...

[09:38] <[Sno]> jnthn: for cross-compiling Rakudo*, my recipe first builds a build version (runable on build-host), then cross-compiles for target (specifying build with --sdkroot)

[09:39] *** sortiz joined
[09:39] <[Sno]> jnthn: my first goal is to make you, moritz, froggs, nine etc. being aware of the situation (even of wrong PATH's because of build sysroots and DESTDIR -- both, and unusual for normal developers)

[09:40] <jnthn> nine_: https://github.com/rakudo/rakudo/commit/efe73eb9decfec23b5447e2a379d799ede4aa8ab#diff-934b2f4bf4300d4256d450c3372330fcR4089 - this looks moar-specific?

[09:40] <[Sno]> maybe when you next time visit liz and wendy, I come around or you three come to my house and I can demonstrate all of that in practice

[09:41] <jnthn> nine_: I should probably have made those comments on the commit, d'oh :)

[09:42] <jnthn> [Sno]: Yeah, I see the issue a little better now, at least.

[09:44] <[Sno]> jnthn: if I'm allowed to clarify - I packaged a lot for a cross-build, most languages are weird and Perl6 is (likely because of split into (Moar|J)VM, NQP, Rakudo*) beside really simple ones as lua the one with fewest crap in the build system

[09:49] <jnthn> [Sno]: Having the clean separation helps quite a lot architecturally in other ways too...good to know it also has build benefits.

[09:52] <jnthn> m: role Foo::Bar { }; say (42 but Foo::Bar).^shortname

[09:52] <camelia> rakudo-moar c37939: OUTPUT«Bar}␤»

[09:54] <psch> hm, nqp-j VMNull compiles, mostly... except stage2 wants to do aggregate operations on it, apparently

[09:55] <psch> well, stage2 compilation... :)

[09:55] <psch> that's minor, right? :P

[09:56] <jnthn> Odd

[09:56] <nine_> jnthn: we do not run the code object immediately but the compiler_thunk that replaces the stub with the compile_in_context'ed code object.

[09:56] <psch> jnthn: the role shortname?

[09:57] <psch> jnthn: seemed obvious how, functionally, it occurs, but why it only happens for runtime mixins i didn't get into

[09:58] <jnthn> psch: Probably because Mixins.nqp computes the name

[09:59] <jnthn> psch: And I don't think we have anything else

[09:59] <jnthn> uh, anything else that does that

[09:59] <nine_> jnthn: it's unfortunate that the EVALed code doesn't get access to the lexical symbols for now, but I figured it's still better than having no EVAL at all. Do you think it could cause back compat issues when we do fix this?

[09:59] <jnthn> Other things like coercion types will, iirc, call shortname on the two types in order to implement its own shortname

[10:00] <jnthn> m: BEGIN EVAL 'say 42'

[10:00] <camelia> rakudo-moar c37939: OUTPUT«42␤»

[10:00] <jnthn> It'd break that, no?

[10:00] <psch> m: use nqp; role Foo::Bar { }; my $x = Any.^generate_mixin(nqp::list(Foo::Bar)); say $x.WHAT

[10:00] <camelia> rakudo-moar c37939: OUTPUT«(Bar})␤»

[10:00] <psch> ah, neat

[10:00] <jnthn> psch: Anyways, I left a fix suggestion on the ticket :)

[10:01] <psch> jnthn: yeah, i might stash the nqp-j VMNull for now and do that instead

[10:02] <nine_> jnthn: I'd be surprised if it did as BEGIN EVAL 'CompUnit::DependencySpecification.new(:short-name<Foo>)' works just fine. Will test.

[10:02] <jnthn> nine_: About running the compiler thunk: how does that work out with, say, `sub foo() { if 1 { 2 } }`, where there's code-objects nested within each other?

[10:02] <nine_> Also it passes all spectests

[10:02] <jnthn> That is, do we compile the { 2 }, then again compile it as part of sub foo's block, and those two again as part of the outermost block?

[10:04] <jnthn> Passing the spectests is good, though I'm guessing this area is woefully undertested (guess it'll be improving as we add tests for the RT this stuff fixes, though)

[10:05] <nine_> BEGIN EVAL 'say 42' does indeed work just fine. It prints 42 during precompilation.

[10:05] <jnthn> Hm, OK. I wonder how it finds the `say`...

[10:06] <jnthn> Maybe just late binding... :)

[10:06] <jnthn> nine_: Oh, I got the wrong example

[10:06] <jnthn> m: BEGIN EVAL 'BEGIN say 42'

[10:06] <camelia> rakudo-moar c37939: OUTPUT«42␤»

[10:06] <jnthn> How about that one? :)

[10:07] <nine_> That blows up :)

[10:07] <nine_> Cannot invoke this object

[10:08] <jnthn> Right

[10:09] <psch> uh, how far through do i have to hand the shortname optional..?

[10:09] <jnthn> m: BEGIN EVAL 'my role R { }; my class C does R { }; say C'

[10:09] <camelia> rakudo-moar c37939: OUTPUT«(C)␤»

[10:09] <nine_> Well now that I've established a working base line, it should be much easier to try out different approaches.

[10:09] <psch> i mean, from generate_mixin it'd go to new_type, which depends on *what* we're mixin into afaict..?

[10:09] <jnthn> psch: Oh, hmm

[10:10] <nine_> Could not instantiate role 'R': No lexical found with name '$_'

[10:10] <jnthn> :(

[10:10] <jnthn> Yeah, feared that might break

[10:10] <psch> jnthn: so, probably parse the mixed in long name properly in Metamodel::Naming i guess

[10:11] <nine_> jnthn: well technically the patch doesn't break it. It errors only if run during precompilation where previously EVAL was not usable at all.

[10:11] <nine_> jnthn: normal compilation/run time is still just fine

[10:11] <jnthn> nine_: But does it break it in the non-precomp case also?

[10:12] <jnthn> psch: That sounds fragile

[10:12] <nine_> jnthn: no. Nesting is only activated during precompilation as there's no need to fix anything outside precomp.

[10:13] <jnthn> nine_: OK, then it's not a regression :)

[10:13] <nine_> https://github.com/rakudo/rakudo/commit/efe73eb9decfec23b5447e2a379d799ede4aa8ab#diff-d3980092fdbde9a1dd4a30438f8dba19R447

[10:13] <jnthn> psch: In Mixins.nqp: "# Work out a type name for the post-mixed-in role."

[10:13] <jnthn> psch: We should calculate the shortname there too

[10:14] <psch> jnthn: right, but then i have to touch every new_type, no?

[10:14] <psch> +method

[10:14] <jnthn> psch: If you take that root - only those that happen to compose Perl6::Metamodel::Mixins

[10:14] <jnthn> psch: Which is, afaik, only ClassHOw

[10:14] <jnthn> *ClassHOW

[10:14] <jnthn> psch: But there's an easiser option

[10:15] <jnthn> psch: Which is to update the Naming role to have a set_shortname

[10:15] <jnthn> And just tweak it *after* the new_type call

[10:15] <psch> ah, right

[10:15] <psch> yeah, i'll do that

[10:22] *** dalek joined
[10:27] <psch> oh shucks

[10:28] <psch> apparently a role isn't guaranteed to have a method shortname during stage parse..?

[10:32] <jnthn> psch: Possibly not...probably means it's an NQP role

[10:32] <jnthn> Or something else :)

[10:32] <jnthn> Maybe we really are missing a shortname method somewhere?

[10:38] <psch> hm, Callable[Int:D] is what doesn't have it apparently

[10:39] *** brrt joined
[10:49] <psch> m: Callable[Int:D].new.^shortname.say

[10:49] <camelia> rakudo-moar c37939: OUTPUT«Callable[Int:D]␤»

[10:50] <jnthn> m: Callable[Int:D].^shortname.say

[10:50] <camelia> rakudo-moar c37939: OUTPUT«Method 'shortname' not found for invocant of class 'Perl6::Metamodel::CurriedRoleHOW'␤  in block <unit> at /tmp/yRgw4ACgsr line 1␤␤»

[10:50] <jnthn> Indeed

[10:50] <psch> oh, of course

[10:50] <jnthn> .new will pun it

[10:50] * psch checks if "CurriedRoleHOW does Naming " is enough...

[10:54] *** cognominal joined
[10:55] <psch> heh, almost

[10:55] <psch> $ ./perl6-m -e'role F::B { }; say (5 but F::B).^shortname'

[10:55] <psch> +{}

[10:55] <psch> ...

[10:56] <dalek> rakudo/moar/reframe: 89f35fa | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[10:56] <dalek> rakudo/moar/reframe: Sync with MoarVM API changes.

[10:56] <dalek> rakudo/moar/reframe: review: https://github.com/rakudo/rakudo/commit/89f35fa93f

[10:58] <jnthn> heh :)

[11:05] *** skids joined
[11:09] <psch> right, so the solution for that was not removing the bit that sets the shortname in set_name

[11:09] <psch> and i think that's fine 'cause we only have that problem with mixins and generate_mixin calls set_shortname shortly after..?

[11:16] <dalek> rakudo/nom: 60550d1 | peschwa++ | src/Perl6/Metamodel/ (3 files):

[11:16] <dalek> rakudo/nom: Fix RT #127916.

[11:16] <dalek> rakudo/nom:

[11:16] <dalek> rakudo/nom: jnthn++ for the hints.

[11:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/60550d1533

[11:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127916

[11:17] <jnthn> psch: Yeah, the default in set_name is a fine enough default, I think

[11:18] <jnthn> psch: Just not right for this case

[11:18] <jnthn> (the mixin case)

[11:24] * psch grmbls at git diff not showing added but uncommited files

[11:25] <psch> guess i'll have to squash when i get it working instead :/

[11:25] <psch> 'cause i was about to gist the nqp-j VMNull attempt, which dies with a complaint about aggregate operations on a type object

[11:25] <jnthn> git diff --staged :)

[11:25] <jnthn> lunch &

[11:27] <timotimo> git lunch --staged

[11:27] <psch> ...but --staged shows *only* those files /o\

[11:28] <timotimo> then you can apply that in reverse, then you'll be left with the opposite

[11:28] <timotimo> and then you can restore it again from the .patch on disk

[11:28] <psch> ...what

[11:28] <psch> i just want to gist it so i can realize where i'm being stupid after i ask for help... ;)

[11:28] <timotimo> oh!

[11:29] <timotimo> well, then you can apply that in reverse, and gist the output of "git diff"?

[11:29] <psch> why do i have to apply anything?  i have a new file in the repo and just want a git diff that shows the content of the new file plus the changes in existing files... :/

[11:29] <timotimo> oh?

[11:29] <psch> also i am in somewhat of a sour mood, so sorry if i'm sounding whine or anything

[11:30] <psch> *whiny

[11:30] <timotimo> so git add the new file and you'll get it in --staged, too, i think

[11:30] <psch> ahh

[11:30] <psch> the actual trick to --staged is to *actually stage* the changed files as well!

[11:30] <psch> as in, git add them as well

[11:31] <timotimo> %)

[11:32] <psch> https://gist.github.com/peschwa/7fddd658584f9c89cf874521ae455596 there

[11:32] <psch> i'm doing something else for a bit i think...

[11:32] <psch> if there is an obvious hint for why that breaks as it does feel free to share :P

[12:26] <[Coke]> btw, met Brian Duggan in baltimore, loved his presentation on making a web app in Perl 6 (slides not (yet?) available). on hackathon day he was looking in the Perl 6 Grammar for some p6doc oddities. (multi #|'s not being captured, IIRC)

[12:26] <[Coke]> Also let out a WOOT at John Anderson's "Moderl Perl for the Unfrozen Paleolithic Perl Programmer" when he said he had had to remove the slide about P6 not being released yet.

[12:30] <[Coke]> BTW, the last release I didn't do was 2015-07-25

[12:30] <[Coke]> (and then we skipped August because of the GLR)

[12:34] <dalek> rakudo/nom: 6df7ff8 | coke++ | docs/release_guide.pod:

[12:34] <dalek> rakudo/nom: reflect actual (not planned) date

[12:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6df7ff8d9c

[12:56] <moritz> stmuk: is there an RC tarball for the star release somewhere?

[13:01] <timotimo> there's the one i made earlier, not sure about the one stmuk made

[13:15] <psch> so i had an idea why i get the aggregate op error

[13:15] <psch> which was "probably because isnull doesn't check for VMNull"

[13:15] <timotimo> ah!

[13:15] <psch> and then i tried to correct that, but isnull needs a TC for that

[13:15] <timotimo> yeah, moar has an MVM_is_null(tc, obj) for that

[13:15] <psch> so i added that the coreop mapping

[13:15] <psch> and now stage0 can't build stage1

[13:16] <psch> 'cause Ops.isnull now needs a TC, but stage0 calls an isnull without a TC

[13:16] <psch> ...i think

[13:16] *** perlpilot_ joined
[13:16] <timotimo> ah!

[13:16] <timotimo> yes, changing stuff like that will require a stage0 upgrade

[13:16] <timotimo> with make j-bootstrap-files or what'?s it called

[13:17] <psch> that has the same error

[13:17] <psch> oh, but i didn't clean

[13:17] <psch> ...well, not that it helped vOv

[13:20] <timotimo> it's ... complicated

[13:21] <psch> yeah, i think it's because of the bootstrapping

[13:21] <psch> i heard that makes bootstrapping complicated vOv

[13:22] <timotimo> yeah, the bootstrapping does that to the bootstrapping

[13:22] <timotimo> OK, let's think this through

[13:23] <timotimo> i think if you build an nqp to completion, then change that isnull needs :tc, then make the bootstrap files, you'll have a stage0 that gives a tc to isnull

[13:23] <timotimo> with java overloading, you should be able to make the same .jar with the ops work with both definitions

[13:24] <psch> so i build HEAD now, unstash, and then make j-bootstrap-files

[13:26] <timotimo> i hope that actually works :S

[13:26] <psch> me too!

[13:30] <psch> hrm, nope

[13:38] <timotimo> uh oh

[13:38] <timotimo> how does it b0rks?

[13:38] <psch> Unhandled exception: java.lang.NoSuchMethodError: org.perl6.nqp.runtime.Ops.isnull(Lorg/perl6/nqp/sixmodel/SixModelObject;)J

[13:39] <psch> i'd guess stage0 still has bytecode that wants to call that method

[13:39] <psch> which seems sensible

[13:39] <timotimo> well, did you try giving it both alternatives?

[13:39] <psch> but it doesn't exist anymore in what's to become stage1

[13:39] <timotimo> remember, java has method overloading

[13:39] <psch> oh, right, i don't need an overloaded mapping

[13:40] <timotimo> we don't support overloaded mappings in the QAST compiler anyway

[13:40] <psch> i mean, it's already bytecode, so we don't need to translate the nqp op anymore

[13:41] <psch> yeah, that's why i didn't try it... :)

[13:41] <timotimo> there's a few ops that can handle different amounts of arguments, but they just compile to one of multiple different ops using QAST or something like that

[13:43] <psch> hm, now i'm back to the error before.  apparently isnull wasn't to blame after all :S

[13:45] <timotimo> oh no :|

[13:46] *** skids joined
[13:53] <stmuk> moritz: http://pl6anet.org/drop/rakudo-star-2016.04-RC0.tar.gz

[13:53] <timotimo> neat

[13:54] <[Coke]> RT: 4 [PATCH]es. might be nice to see if those even still apply.

[13:54] <[Coke]> And we might want to update our contributor notes to push people towards github PRs.

[13:54] <moritz> stmuk: thanks, testing now...

[14:11] <stmuk> I get a test fail on the embedded version of Shell::Command in panda with OS X

[14:11] <stmuk> maybe panda needs a Shell::Command version bump

[14:13] *** brrt joined
[14:58] *** lizmat joined
[15:06] <stmuk> yes it does .. if someone can panda/update-subtree.pl I'll build a RC1 later

[15:14] *** [TuxCM] joined
[15:15] <[TuxCM]> This is Rakudo version 2016.04-2-g6df7ff8 built on MoarVM version 2016.04

[15:15] <[TuxCM]> test            22.996

[15:15] <[TuxCM]> test-t          13.032

[15:15] <[TuxCM]> csv-parser      26.103

[15:15] <[TuxCM]> # Failed test 'Data'

[15:15] <[TuxCM]> # at 88.t line 27

[15:15] <[TuxCM]> # expected: Buf.new(61,171,79,74,34,210,39,46,232,113,247,205,246,38,73,24,50,147,169,107,195)

[15:15] <[TuxCM]> #      got: Buf.new(61,171,79,74,34,210,39,46,232,113,247,205,246,38,73,24,50,147,169,107,195,0)

[15:15] <[TuxCM]> utf8-c8 decode/encode still not 100%

[15:16] <timotimo> right, that's "the bug" i saw

[15:24] *** geekosaur joined
[15:31] <dalek> rakudo/moar/reframe: 85e3302 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[15:31] <dalek> rakudo/moar/reframe: Add an MVMROOT on ctx, now frames are GCable.

[15:31] <dalek> rakudo/moar/reframe: review: https://github.com/rakudo/rakudo/commit/85e3302d3f

[15:34] <stmuk> https://github.com/tadzik/panda/pull/308

[16:01] <TimToady> [Coke]: so, basically, you'll keep doing the releases until we appoint you permanent release manager, and then you'll quit?  :)

[16:02] *** vendethiel joined
[16:03] <[Coke]> TimToady: mmheheh!

[16:04] <[Coke]> I think it would be really good if neither jnthn nor I did a release in May. :)

[16:06] <lizmat> m: dd Buf.new(195).decode("utf8-c8")   # golf of problem Tux found

[16:06] <camelia> rakudo-moar 6df7ff: OUTPUT«"􏿽xC3\0"␤»

[16:19] *** awwaiid joined
[16:27] <stmuk> http://pl6anet.org/drop/rakudo-star-2016.04-RC1.tar.gz

[16:47] <[Coke]> if I run "perl Configure --gen-moar --gen-nqp --backends=moar" in that dir, it's trying to download something via git.

[16:47] <[Coke]> shouldn't everything be pre-bundled?

[17:27] <ugexe> probably easier to lean on github as a CDN doing it that way for now

[17:28] <timotimo> but we *are* supposed to make rakudo star release tarballs installable without an internet connection

[17:33] <[Coke]> and I thought we already had bene

[17:33] <[Coke]> *been

[17:33] <[Coke]> if it's an old issue, that's fine. just wanted to make sure I mentioned it

[18:16] <stmuk> I don't think it's a new issue .. I suspect the --gen-nqp flag

[18:17] <timotimo> so if you only --gen-moar but not --gen-nqp it'll work OK?

[18:17] <stmuk> yes which is what I usually type

[18:19] <stmuk> I did notice "make rakudo-spectest" gave some strange warnings about roast (which it does checkout via git)

[18:19] <stmuk> but assume those are roast issues (missing files) rather than R* ones

[18:20] <[Coke]> stmuk: see this :

[18:21] <[Coke]> ... crap. you can't link to an annotated line of an .md file in github?

[18:21] <[Coke]> here, try this; https://github.com/rakudo/rakudo/commit/bb407206a405d6404e8eab539ff312b713d01d5d

[18:22] <[Coke]> so if you're using the 2016.04 compiler tarball, you have 6.c-errata branch of spec, but nom t/spectest.data, so...

[18:23] <stmuk> ah

[18:25] <stmuk> you can link to lines via blame view of .md file I think likehttps://github.com/rakudo/star/blame/master/docs/announce/2016.04.md#L65

[18:25] <stmuk> https://github.com/rakudo/star/blame/master/docs/announce/2016.04.md#L65

[18:45] <[Coke]> stmuk: ahah! thanks.

[19:06] *** awwaiid joined
[19:08] *** skids joined
[19:25] *** brrt joined
[20:28] *** hankache joined
[22:22] *** skids joined
