[01:16] *** astj joined
[02:01] <dalek> rakudo/nom: 778b10b | (Salvador Ortiz)++ | Configure.pl:

[02:01] <dalek> rakudo/nom: Configure.pl: s/PERL/PERL5/

[02:01] <dalek> rakudo/nom:

[02:01] <dalek> rakudo/nom: 'PERL' was removed from Makefile-common-macros.in by c066434

[02:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/778b10b753

[02:01] <dalek> rakudo/nom: 1c1e06d | hoelzro++ | Configure.pl:

[02:01] <dalek> rakudo/nom: Merge pull request #759 from salortiz/patch-2

[02:01] <dalek> rakudo/nom:

[02:01] <dalek> rakudo/nom: Configure.pl: s/PERL/PERL5/

[02:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c1e06d871

[06:17] *** sno joined
[06:19] <[Tux]> This is Rakudo version 2016.04-43-g1c1e06d built on MoarVM version 2016.04

[06:19] <[Tux]> test            22.261

[06:19] <[Tux]> test-t          13.125

[06:19] <[Tux]> csv-parser      24.058

[06:38] *** tomboy64 joined
[06:49] *** TimToady joined
[07:00] *** TimToady joined
[07:16] *** RabidGravy joined
[07:32] *** RabidGravy joined
[07:40] <dalek> roast: a423ec2 | (Philippe Bruhat (BooK))++ | S02-types/version-stress.t:

[07:40] <dalek> roast: Add a stress test for Version

[07:40] <dalek> roast:

[07:40] <dalek> roast: This test uses the same values as S02-types/version.t, but tests all comparison

[07:40] <dalek> roast: operators in all possible combinations, which produces 2035 tests instead of 36.

[07:40] <dalek> roast: review: https://github.com/perl6/roast/commit/a423ec280f

[07:40] <dalek> roast: cdd4e09 | lizmat++ | S02-types/version-stress.t:

[07:40] <dalek> roast: Merge pull request #117 from book/master

[07:40] <dalek> roast:

[07:40] <dalek> roast: Add a stress test for Version

[07:40] <dalek> roast: review: https://github.com/perl6/roast/commit/cdd4e0964e

[08:09] *** tomboy65 joined
[08:28] *** tomboy65 joined
[08:43] *** [TuxCM] joined
[08:48] *** tomboy65 joined
[08:58] *** tomboy65 joined
[10:47] *** pmurias joined
[12:02] *** ilbot3 joined
[12:09] <lizmat> Is there a reason why the Mu candidates for != == < > <= >= are not expressed as special cases of <=> ?

[12:09] <lizmat> like they are now for Version:D ?

[12:14] <jnthn> Any cases, or Mu?

[12:14] <jnthn> (I thought we didn't define those for Mu to let auto-threading work)

[12:15] <dalek> rakudo/nom: 3cab7c2 | timo++ | docs/ops.markdown:

[12:15] <dalek> rakudo/nom: explain a few more p6 ops

[12:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cab7c25f6

[12:18] <jnthn> In principle it could be a good idea, though I guess it'd need to use CALLER::infix:<< <=> >> to do the right thing

[12:19] <lizmat> why ?

[12:21] <jnthn> So that it considers the candidates in scope at the point of the operator

[12:22] <lizmat> but if a module has exported an infix:<< <=> >> in that scope, it should just DWIM, no ?

[12:23] <timotimo> not when their data goes through another layer of code that uses <=> for that

[12:23] <timotimo> like the <=, >= operators if they use <=>

[12:26] <lizmat> hmmmm so, if infix:<< < >>(Any:D \a,Any:D \b) is defined as { a <=> b }, and I export an infix:<< <=> >> into that scope, it wouldn't DWIM ?

[12:28] <moritz> if the import happens at compile time, it should work, no?

[12:29] <lizmat> so that a module only needs to export an infix:<< <=> >> and have all the other < > <= >= == != work automagically >

[12:29] <lizmat> ?

[12:33] <lizmat> I guess I should try  :-)

[12:34] <dalek> nqp: eee1e6a | (Pawel Murias)++ | src/ (2 files):

[12:34] <dalek> nqp: [js] Make QAST::VM support :js.

[12:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eee1e6a34d

[12:34] <dalek> nqp: 193db47 | (Pawel Murias)++ | src/NQP/Actions.nqp:

[12:34] <dalek> nqp: [js] QAST::VM variations for the js backend.

[12:34] *** dalek joined
[13:20] *** skids joined
[13:26] *** |Tux| joined
[16:10] *** cognominal joined
[17:36] <dalek> roast: 24c8b2f | coke++ | S02-lexical-conventions/unicode.t:

[17:36] <dalek> roast: Unskip passing test

[17:36] <dalek> roast:

[17:36] <dalek> roast: This was intended to be part of 6.c and is now functioning.

[17:36] <dalek> roast: review: https://github.com/perl6/roast/commit/24c8b2fac3

[17:37] <dalek> roast/6.c-errata: 800783f | coke++ | S02-lexical-conventions/unicode.t:

[17:37] <dalek> roast/6.c-errata: Unskip passing test

[17:37] <dalek> roast/6.c-errata:

[17:37] <dalek> roast/6.c-errata: This was intended to be part of 6.c and is now functioning.

[17:37] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/800783f770

[17:38] <dalek> rakudo/js: 1a79284 | (Pawel Murias)++ | src/Perl6/ (3 files):

[17:38] <dalek> rakudo/js: Workarounds to allow running anything with --setting=NULL.

[17:38] <dalek> rakudo/js:

[17:38] <dalek> rakudo/js: Should be reverted once the js backend is past the point it can load an acceptable setting.

[17:38] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/1a79284ab2

[17:38] <dalek> rakudo/js: 01d8c16 | (Pawel Murias)++ | src/Perl6/World.nqp:

[17:38] <dalek> rakudo/js: QAST::VM variant for the js backend.

[17:38] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/01d8c166b1

[17:38] <dalek> rakudo/js: 293a3bd | (Pawel Murias)++ | src/Perl6/Metamodel/ (2 files):

[17:38] <dalek> rakudo/js: HACK to work around the lack of support for uncached methods on the js backend.

[17:38] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/293a3bd48e

[17:38] <dalek> rakudo/js: cf606ff | (Pawel Murias)++ | src/Perl6/ (2 files):

[17:38] <dalek> nqp: 61f245b | (Pawel Murias)++ | src/vm/js/ (2 files):

[17:38] <dalek> nqp: [js] When are generating code that will be executed in this process don't serialize.

[17:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/61f245be2c

[18:15] *** sno joined
[18:56] <dalek> roast: 32db982 | usev6++ | S02-lexical-conventions/unicode.t:

[18:56] <dalek> roast: Skip test for RT #122340 for rakudo-j

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/32db982d70

[18:56] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122340

[19:33] *** tomboy64 joined
[19:49] *** tomboy64 joined
[20:03] *** tomboy64 joined
[20:31] *** sortiz joined
[20:44] *** vendethiel joined
[21:13] *** cognominal joined
[21:28] *** cognominal joined
[21:41] *** cognominal joined
[22:13] *** vendethiel joined
[23:27] *** geekosaur joined
[23:32] *** cognominal joined
