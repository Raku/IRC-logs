[00:38] <japhb> I remembered that MUGS-UI-CLI doesn't flush the import buffer when it starts up, so you can get real timing for the "adventure startup benchmark" with:

[00:38] <japhb> time (echo quit | mugs-cli adventure)

[00:38] <japhb> real	0m1.765s

[00:38] <japhb> user	0m1.586s

[00:38] <japhb> sys	0m0.280s

[00:53] <japhb> Looks like a bit under 1.8s.  I forgot to account for my slow-ass keyboard when considering the ^C delay.  (For ergonomics, it's fantastic.  For input latency, not so much ...)

[07:20] <greenfork> real	0m4.161s

[07:20] <greenfork> user	0m4.867s

[07:20] <greenfork> sys	0m0.598s

[07:21] <greenfork> This is for me with time (echo quit | mugs-cli adventure)

[07:22] <greenfork> I will then ask someone who understands --profile, maybe I will be able to debug that. I thought about inter-thread communication too as a source

[07:22] <greenfork> By the way, when I run mugs-cli without specifying a server, the server is run in a thread or in a process?

[07:23] <greenfork> I assume that UI+Client are run together? Or it is also no the case

[07:24] <greenfork> And thanks on the primer for the private variables, I have a much better understanding of them now, regarding the general philosophy too

[17:18] <japhb> :+1:

[17:19] <japhb> Yeah, UI and Client outbound run together, though Client *inbound* (just like Server inbound) runs in its own listener thread.

[17:21] <japhb> When you run mugs-cli and it spawns its own server, it does so using a separate thread and avoids using TCP/IP (it uses inter-thread communication instead) *but* it still uses the same encoding/decoding for the data packets, to ensure that that doesn't get broken, and to make it easier to analyze performance of that in isolation from the network.

[17:23] <japhb> $ faster 4.161 1.765

[17:23] <japhb>     57.58% less time

[17:23] <japhb>      2.36  times faster

[17:23] <japhb> Ouch

[17:23] <japhb> That just doesn't seem reasonable to me.

[17:25] <japhb> Makes me wonder if Rakudo Star was compiled with optimizations turned off or for generic (two decade old) CPUs or something

[17:26] <greenfork> I will soon try out the newer version, will see if this is connected to the Star distribution

[17:27] <japhb> Sounds good, thank you!

[17:27] <greenfork> One more about MUGS: when there's some error in my server code for a new game, and I run it with mugs-cli <my-game-name>, I get an error like this

[17:27] <greenfork> Died with the exception: Request invalid: Game type 'rrp' is unknown

[17:28] <greenfork> And several stack traces pointing to MUGS::App::LocalUI

[17:28] <greenfork> Can I improve error reporting somehow? This one happened because I referenced a variable that was not defined in my server code

[17:28] <japhb> Oh, syntax errors in the game code?  That may be causing a failure to load the plugin.

[17:29] <japhb> I'm using a plugin-loader module as a dependency.  I'll have to take a look at what can be done about the failure mode there.

[17:30] <japhb> But for myself, I usually have a t/00-use.rakutest that consists of just use'ing all the modules in my distro in dependency order, and I run that test *often*, with verbose test output.  It's a canary for "oops, you broke one of the modules not actually involved in startup".

[17:31] <greenfork> Sounds nice, I will do that too

[17:54] <japhb> If you have an editor that can run tests on file save, that's probably a good thing to hook up to at least the use test.

[18:01] <greenfork> Hmm this is an interesting idea

