[00:41] *** timo joined
[00:41] <timo> ohai

[00:43] <timo> it'd be cool if Terminal::LineEditor could offer some hooks or mechanism to allow "cooperation" with other systems asynchronously. for example, if i have some code that i evaled and ran in liz's REPL that did somethinglike `Promise.in(1).then({ say "hi" });` that will of course mess up my editor line. so ideally, I could give the code I'm running after evaling it a special $*OUT and $*ERR that would

[00:43] <timo> ask Terminal::LineEditor to handle the outputting for it

[00:45] <timo> also, it'd be cool if I could change the "prefix" of the editor asynchronously, for example to put a counter of active work items in the ThreadPoolScheduler (which there could be a separate one for the evaled code too) in front of the input

[00:45] <timo> maybe it'd be helpful / easier to put a second line above the Terminal::LineEditor's input line? where I can put stuff manually, and then above that anything being printed "to the scrollback buffer"

[00:49] <timo> also, building a cooperative $*IN that allows the user to switch between inputting into the REPL's own Prompt which is backed by Terminal::LineEditor (optionally), and every $*IN.get or $*IN.prompt or whatever

[01:51] <japhb> timo: These are all great ideas!  Would you mind turning them into T::LE issues?

[01:52] <japhb> I've definitely thought that it might be nice for async updates to the input line, the prompt, or other surrounds.  That opens up a ton of capabilities

[01:52] <timo> and a lot of headaches :)

[01:53] <japhb> Some of these things would be best as part of patrickb's TLI debugger, but I'm all for more capabilities in the base library if they benefit the Raku REPL.

[01:53] <japhb> timo: Well, yes.  But I'm an implementor willing to be tortured, or I wouldn't have written half the Terminal::* code that I have.  ;-A)

[01:54] <timo> i'm thinking it'd be nice to have something a little bit more powerful than just the single line (or later a multi-line instead of scrolling input field) that's not a full TUI widget library / framework

[01:55] <timo> i got half of this stuff because the array of completions ended up with a Nil inside it which caused a warning to be spat out during raw mode

[01:55] <japhb> timo: Well we need a multi-line text box input as a widget anyway, so that was definitely on the list 

[01:55] <timo> yeah i remember that that was on the to-do already

[01:57] <japhb> timo: That's broken behavior, AKA a bug.  The code shouldn't just crash with weird data from the app (or REPL, in this case); that's not helpful to the user.

[02:00] <timo> yes. well, it didn't crash, it just warned.

[02:00] <timo> oh, wait

[02:00] <timo> actually it did throw an exception, because Nil was coming into a parameter that was typed Str:D

[02:00] <timo> Died because of the exception:

[02:00] <timo>     Type check failed in binding to parameter '$content'; expected Str but got Nil (Nil)

[02:00] <timo>       in method replace at /var/home/timo/raku/ecosystem/REPL/../Terminal-LineEditor/lib/Terminal/LineEditor/EditableBuffer.rakumod (Terminal::LineEditor::EditableBuffer) line 209

[02:01] <japhb> Yeah, feels like the code should protect against its API being used badly and at the very least give an error that the user might actually be able to do something with.

[02:02] <japhb> The error you pasted is LTA from the point of view of the library's user trying to figure out what they got wrong with their use of it.

[02:02] <japhb> Also ... the security side of me says "Naughty japhb, you didn't sanitize inputs you don't control!"

[09:18] *** lizmat_ joined
[09:21] *** lizmat left
[09:21] *** lizmat_ left
[09:21] *** lizmat joined
[10:02] *** greenfork left
[10:02] *** greenfork joined
[23:09] *** japhb left
[23:32] *** japhb joined
