[00:56] <japhb> Might have found a workaround.  Trying it against Rakudo HEAD now ...

[01:47] <Geth> ¦ Terminal-Widgets/main: 66121cb6ff | (Geoffrey Broadwell)++ | lib/Terminal/Widgets/StandardWidgetBuilder.rakumod

[01:47] <Geth> ¦ Terminal-Widgets/main: Work around change in object hash semantics

[01:47] <Geth> ¦ Terminal-Widgets/main: 

[01:47] <Geth> ¦ Terminal-Widgets/main: Object hash parameterization changed in Rakudo 2025.03-27-g8f8b95866f .

[01:47] <Geth> ¦ Terminal-Widgets/main: This works around that change, and should work both before and after.

[01:47] <Geth> ¦ Terminal-Widgets/main: review: https://github.com/japhb/Terminal-Widgets/commit/66121cb6ff

[01:48] <japhb> Xliff: You should be able to pull T-W and be less frustrated now ^^

[01:55] <japhb> lizmat: OOC, was that effect of the object hash change intentional?

[05:36] <Geth> ¦ Terminal-Widgets/main: a594260252 | (Geoffrey Broadwell)++ | lib/Terminal/Widgets/Widget.rakumod

[05:36] <Geth> ¦ Terminal-Widgets/main: Greatly expand and clarify comments in draw-line-spans

[05:36] <Geth> ¦ Terminal-Widgets/main: review: https://github.com/japhb/Terminal-Widgets/commit/a594260252

[05:36] <Geth> ¦ Terminal-Widgets/main: 9d09d19b3c | (Geoffrey Broadwell)++ | lib/Terminal/Widgets/Widget.rakumod

[05:36] <Geth> ¦ Terminal-Widgets/main: Fix draw-line-spans bugs found by patrickb++

[05:36] <Geth> ¦ Terminal-Widgets/main: 

[05:36] <Geth> ¦ Terminal-Widgets/main: Also further improve clarity and comments while in that code.

[05:36] <Geth> ¦ Terminal-Widgets/main: review: https://github.com/japhb/Terminal-Widgets/commit/9d09d19b3c

[05:40] <japhb> patrickb: The above two commits include your fixes from PR #21, so closed that one.

[05:41] <japhb> Need to be up early tomorrow, so will have to leave PR #20 review for later.

[07:17] *** Xliff joined
[07:53] *** wayland76 joined
[07:55] *** wayland76 left
[08:03] <Xliff> Think I found a bug. Ping me when you get this. I should be around.

[08:06] *** wayland76 joined
[14:35] <japhb> Xliff: Bug?

[14:48] <Xliff> Well... oversight.

[14:49] <Xliff> First off.. I ran into this gem...

[14:49] <Xliff> diff --git a/lib/Terminal/Print/Grid.pm6 b/lib/Terminal/Print/Grid.pm6

[14:49] <Xliff> index ae2a4c4..7766d59 100644

[14:49] <Xliff> --- a/lib/Terminal/Print/Grid.pm6

[14:49] <Xliff> +++ b/lib/Terminal/Print/Grid.pm6

[14:49] <Xliff> @@ -117,7 +117,8 @@ method cell-string($x, $y) {

[14:49] <Xliff>  #| Return the escape string necessary to move to (x1, y) and output every cell (with color) on that row from x1..x2

[14:49] <Xliff>  method span-string($x1, $x2, $y) {

[14:49] <Xliff>      my $row = @!grid[$y];

[14:49] <Xliff> -    move-cursor($x1, $y) ~ $row[$x1..$x2].join.subst("\e\e[", "\e[0;", :g);

[14:49] <Xliff> +    move-cursor($x1, $y) ~

[14:49] <Xliff> +      $row[$x1..$x2].map({ $_ // '' }).join.subst("\e\e[", "\e[0;", :g);

[14:49] <Xliff>  }

[14:50] <Xliff> And I'm wondering if that's the correct solve... because while that stopped Nil errors, I am getting weird behavior with my progress bar example. Gist incoming.

[14:52] <Xliff> https://gist.github.com/Xliff/548e2177bc8c58ab2e8f18ff503a7651

[14:57] <japhb> You shouldn't end up with a case where a cell contains an undefined value ... that would usually only happened if you tried to access a location not actually on the grid.

[14:58] <japhb> For performance, T::P::Grid doesn't do coordinate clipping ... calling code should do that.

[14:58] <japhb> I have to be AFK for a bit, but I'll go over your gist when I get back.

[14:59] <Xliff> kk

[14:59] <ab5tract> Also, there should be no need to wrap the printing in a lock. That’s what the OO::Monitors dependency on T::P is for

[16:05] <japhb> BAK

[16:06] <japhb> I agree with ab5tract, a T::P::Grid is already locked as a monitor, and this is relied on by lots of code in T::P itself and in other Terminal::* modules that depend on it.

[16:08] <japhb> The labels are so far over because you are doing `for $!lb-rendered`, which is treating the two-item array as a single item, which stringifies to a join of its members.

[16:09] <japhb> You can change that to `for $!lb-rendered.list` or `for @!lb-rendered` (changing the sigil on the member variable of course)

[16:11] <japhb> You don't need to `print T.current-grid`, since the draw methods in ProgressLine already print themselves.  This is itself redundant, but also wasteful because in a full-screened terminal with the drawing area in the upper left, you're drawing mostly empty space on the right and bottom.

[16:14] <japhb> The reaction of the progress bars to MAX being changed seems slow because it's only happening at each bar's next cue'd time.

[16:15] <japhb> Changing `print T.current-grid;` in check-redraw-threads to `.head.set-value($v, :draw) for @threads;` will get them reacting much more in step.

[16:16] <Xliff> ooh!

[16:20] <japhb> There's still the inefficiency of treating every bar as its own hbar-chart, rather than treating the entire thing as a single chart with all of the progress bars in it, but that's a larger change with less effect than the above.

[17:46] <japhb> I commented on PR #20 as well, but for those not following that:

[17:48] <japhb> patrickb has pointed out that improvements to the role selection we have need either hackish workarounds or 6.e semantics.

[17:48] <japhb> (Sorry, where 'we' is 'people working on Terminal::Widgets')

[17:49] <japhb> Since 6.e roles can only be consumed by 6.e or later objects, that implies that we'll need to switch T-W *and any user code based on it* to `use 6.e.PREVIEW;`

[17:50] <japhb> Unless I hear any objections, I'll be going through and making those changes in T-W itself and the various examples.

[18:05] <patrickb> This is limiting, but I believe an ok thing to do, since T-W is still pretty much beta-ware and 5.e is coming soon.

[18:13] <japhb> Limiting in what way?  Incompatibility with 6.d code?

[18:33] <japhb> Added an additional question to PR #20

[21:51] <patrickb> Incompatibility with older Rakudos mostly.

[21:51] <patrickb> Answered

[21:53] <patrickb> On a different note, I just now finally got PTYs working on Windows. \o/

[21:54] <patrickb> It'll be more work to finish up all the loose ends, but the difficult problems are now all tackled. (I hope I don't regret saying this...)

[22:26] <japhb> Yeah, that was pretty much jinxing yourself.  :-P

[22:28] <japhb> The PR #20 conversation continues.  :-D

[23:00] *** wayland76 left
