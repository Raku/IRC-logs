[01:37] *** [Coke]_ joined
[01:37] *** [Coke]_ is now known as [Coke]
[14:50] *** jjatria joined
[15:16] <[Coke]> So, if I wanted to implement a game, where would I start?
[15:17] <[Coke]> Also: any thoughts on "certified" randomness? (Seen for a few online games I play)
[16:06] <japhb> [Coke]: I'm not even sure how one would go about certifying someone else's server's randomness.
[16:07] <japhb> I mean, for stuff like poker and casino games, I can see the reason customers would want to know that things were (within the limits of the games in question) relatively "fair", but hmmm ...
[16:07] <japhb> Maybe just having auditors review the code and confirm that it's doing the right things, and run statistical tests on the results of e.g. shuffles?
[16:09] <japhb> As for implementing a game ... you'll want to decide if you want to create a new game within an existing genre, or an entirely new genre (which is to say, one not yet implemented in MUGS-Games).
[16:10] <japhb> mugs-tool will let you create stubs for new genres, new games, and new UIs, but it hasn't been updated since I split the one private repo into multiple public repos, so it wants to put everything in the current tree.  I'll have to fix that.
[16:13] <japhb> The next thing is to separate out the three main layers: the Server implementation, which handles the game semantics and is the point of truth for the state of the game; the Client, which basically knows how to package up player actions into requests for the server, unpack the responses, handle in-game push data from the Server, and do basic validity checks; and the UIs, which really should just handle user
[16:13] <japhb> input, display the game output, and e.g. handle help requests.
[16:14] <japhb> If you've already done that separation, great!  It's a matter of mapping your existing API onto the MUGS APIs.
[16:14] <japhb> I can help with that.  :-)
[18:56] *** lizmat_ joined
[19:00] *** lizmat left
[22:39] <[Coke]> cannot run 'zef install MUGS', errors out
[22:40] <[Coke]> oops. nevermind.
[22:41] <[Coke]> (that was from a leftover 'zef test .' in a checkout, running a standalone install now)
[23:09] <[Coke]> instead, it dies on a dep: https://github.com/jonathanstowe/Crypt-SodiumPasswordHash/issues/1
[23:09] <[Coke]> Trying to update raku...
[23:18] <japhb> libsodium(-dev) possibly not installed?
[23:19] <japhb> Sorry for the slow response.
[23:19] * japhb is alternating hacking on MUGS-Core tests and helping $offspring with forms
[23:22] <japhb> Every time I write 'plan 9;' in a test file, I can't stop my brain from immediately going "... from outer space!"