[01:47] *** frost joined
[02:36] *** frost left
[04:34] *** gfldex left
[04:34] *** discord-raku-bot left
[06:18] *** elcaro left
[08:47] *** frost joined
[10:58] *** discord-raku-bot joined
[11:42] *** gfldex joined
[12:42] *** jgaz joined
[13:11] *** otpv joined
[13:11] *** otpv left
[14:12] *** frost left
[14:24] <discord-raku-bot> <masukomi> thanks <@724421839924756480>  that's.... kinda nasty. I figured i must be missing something obvious since that's a problem that has been _well known_ for a _very_ long time now in other languages. I don't think any newb could be expected to come up with that =my %foo = do { ... }= workaround.

[14:24] <discord-raku-bot> <masukomi> thanks <@724421839924756480>  that's.... kinda nasty. I figured i must be missing something obvious since that's a problem that has been _well known_ for a _very_ long time now in other languages. I don't think any newb could be expected to come up with that `my %foo = do { ... }` workaround.

[14:31] <discord-raku-bot> <elcaro> Yeah, in one sense it's a little ugly, in another sense it's pretty cool that imports are lexical, and it's consistent with how the language works, but yeah, I  with `is export` did what my module does by default. 

[14:31] <discord-raku-bot> <elcaro> People wanting the current behaviour could still do `is export(:DEFAULT)`. Funnily enough, this is the behaviour Damian Conway opted for when he wrote `Perl6::Export` for  Perl

[14:31] <discord-raku-bot> <elcaro> Yeah, in one sense it's a little ugly, in another sense it's pretty cool that imports are lexical, and it's consistent with how the language works, but yeah, I  wish `is export` did what my module does by default. 

[14:31] <discord-raku-bot> <elcaro> People wanting the current behaviour could still do `is export(:DEFAULT)`. Funnily enough, this is the behaviour Damian Conway opted for when he wrote `Perl6::Export` for  Perl

[14:36] *** jgaz left
[14:39] <discord-raku-bot> <masukomi> the `my &foo = do { ... }` hack makes me wonder if it'd be possible to write a module that was used to import other modules, figure out what methods & classes they provided, and then... exported _those_ instead of the originals.  like `use-prefixed Some::Module, "my-prefix"`

[14:44] <discord-raku-bot> <masukomi> the `my &foo = do { ... }` hack makes me wonder if it'd be possible to write a module that was used to import other modules, figure out what methods & classes they provided, make prefixed versions and then... exported _those_ instead of the originals.  like `use-prefixed Some::Module, "my-prefix"`

[14:44] <discord-raku-bot> <Nemokosch> I mean... you do know that exports _can_ have a symbol assigned to them, for importing them one-by-one?

[14:44] <discord-raku-bot> <Nemokosch> just to make sure

[14:45] <discord-raku-bot> <masukomi> sure, but that doesn't solve the problem if i need the `color`  method from 2 packages.

[14:45] <discord-raku-bot> <elcaro> Possibly you could query the Stash, but it might depend  on how the module is structioned

[14:45] <discord-raku-bot> <Nemokosch> I'm pretty sure it does

[14:45] <discord-raku-bot> <masukomi> how so?

[14:46] <discord-raku-bot> <masukomi> my newbish understanding was that the symbol was just for easily specifying groups of things to import, not that it changed how you called them.

[14:46] <discord-raku-bot> <Nemokosch> well, it's a pair, with a key and a value, so I'd assume if you specify the value, that's where the imported thing will end up

[14:46] <discord-raku-bot> <Nemokosch> tbh I don't use this a lot

[14:46] <discord-raku-bot> <elcaro> Well, again, it's easy if the subs are `our` scoped.

[14:46] <discord-raku-bot> <elcaro> Given this module

[14:46] <discord-raku-bot> <elcaro> ```

[14:46] <discord-raku-bot> <elcaro> unit module Foo;

[14:46] <discord-raku-bot> <elcaro> our sub foo is export { 'foo' }

[14:46] <discord-raku-bot> <elcaro> our sub bar is export { 'bar' }

[14:46] <discord-raku-bot> <elcaro> our sub baz is export { 'baz' }

[14:46] <discord-raku-bot> <elcaro> ```

[14:46] <discord-raku-bot> <elcaro> You could do this in the importing code

[14:46] <discord-raku-bot> <elcaro> ```

[14:46] <discord-raku-bot> <elcaro> use Foo;

[14:46] <discord-raku-bot> <elcaro> say Foo::.keys

[14:46] <discord-raku-bot> <elcaro> ```

[14:46] <discord-raku-bot> <elcaro> Which would output `(EXPORT &bar &foo &baz)`

[14:47] <discord-raku-bot> <Nemokosch> but it came up a few weeks ago

[14:47] <discord-raku-bot> <elcaro> There might be a better way, but I've used Stash lookup inside modules to  dynamically generate exports before

[14:49] <discord-raku-bot> <elcaro> I wrote a blog post years ago (my aforementioned "complaining at length" about implicit  exports) that has some useful info around Exports.

[14:49] <discord-raku-bot> <elcaro> https://0racle.info/articles/exportation_exploration

[14:49] <discord-raku-bot> <elcaro> Like I said, it's years old, so might be some errors

[14:50] <discord-raku-bot> <elcaro> I rarely have time to update my blog these days, but I think I at least updated most "Perl 6" references to "Raku"

[14:51] <discord-raku-bot> <masukomi> so, ignoring the fact that many modules don't use `our` ... if `module Foo` and `module Bar` both had an `our sub thingy is export {...}`  then you did `use Foo` and `use Bar`  .... what happens if i call `thingy` in the code that imported it. Would it blow up?

[14:51] <discord-raku-bot> <masukomi> so, ignoring the fact that many modules don't use `our` ... if `module Foo` and `module Bar` both had an `our sub thingy is export {...}`  then you did `use Foo` and `use Bar`  .... what happens if i call `thingy` in the code that imported it? Would it blow up?

[14:51] <discord-raku-bot> <elcaro> If they both export `thingy`, yes, it will blow up at compile time, pretty sure

[14:51] <discord-raku-bot> <Kaiepi> `use Bar` should error over a symbol collision

[14:52] <discord-raku-bot> <elcaro> yeah, just confirmed, compile time error

[14:53] <discord-raku-bot> <Rog> There’s some way to rename symbols to get around that isn’t there?

[14:53] <discord-raku-bot> <Rog> Or am I misremembering

[14:53] <discord-raku-bot> <Rog> Rename on import, that is

[14:53] <discord-raku-bot> <Rog> Obviously if you changed the module it would fix it

[14:53] <discord-raku-bot> <elcaro> I  posted a snippet earlier, the `my &foo := do  { use &Foo; &thingy }` trick

[14:53] <discord-raku-bot> <elcaro> I  posted a snippet earlier, the `my &foo := do  { use Foo; &thingy }` trick

[14:54] <discord-raku-bot> <Rog> Ah, very nice

[14:54] <discord-raku-bot> <masukomi> the key problem i'm concerned with is 2 modules that i don't control that are "normal" but coincidentally overlap and haven't done anything special that'd mitigate this.

[14:54] <discord-raku-bot> <masukomi> i like the workaround, but ... i mean, it's a gross hack no-one should have to do.

[14:54] <discord-raku-bot> <Rog> Agree

[14:54] <discord-raku-bot> <Rog> I am wondering if there are some adverbs to control that behavior

[14:55] <discord-raku-bot> <Rog> Maybe it shouldn’t blow up unless you actually try to call something with a naming conflict

[14:58] <discord-raku-bot> <Nemokosch> I still wonder

[14:58] <discord-raku-bot> <elcaro> The whole exports/compunits thing is mostly black-magic  to me. Maybe it's possibly to change this behaviour with an Env var, but it's probably not easy, and there's probably more important things the small set of core developers are working on, so I've learned to accept it.

[14:58] <discord-raku-bot> <Nemokosch> :bar is a pair

[14:58] <discord-raku-bot> <Nemokosch> what is the point of it being a pair, if you cannot specify where you want your import to end up?

[15:00] <discord-raku-bot> <masukomi> > Maybe it shouldn’t blow up unless you actually try to call something with a naming conflict

[15:00] <discord-raku-bot> <masukomi> that feels like something that you'd want to be able to make a call about if it failed at runtime or compile  time. i can see good arguments for both.

[15:00] <discord-raku-bot> <elcaro> I think I know where your headed...  keep scrolling

[15:00] <discord-raku-bot> <Nemokosch> like you know

[15:00] <discord-raku-bot> <Nemokosch> named function arguments

[15:00] <discord-raku-bot> <elcaro> Like... this?

[15:02] <discord-raku-bot> <elcaro> I was just playing around... but it proves this functionality is possible

[15:04] <discord-raku-bot> <Nemokosch> yeah, I got to this

[15:04] <discord-raku-bot> <Rog> Great demonstration

[15:04] <discord-raku-bot> <Rog> Would be nice to see that functionality integrated into the core language

[15:04] <discord-raku-bot> <Rog> Or something similar

[15:05] <discord-raku-bot> <Rog> You’d want the “simple” option still

[15:05] <discord-raku-bot> <Nemokosch> so this relies on your particular EXPORT sub provided?

[15:06] <discord-raku-bot> <masukomi> yeah, that was the problem i kept hitting... it relies on the library you're importing having taken special meausers.

[15:06] <discord-raku-bot> <masukomi> yeah, that was the problem i kept hitting... it relies on the library you're importing having taken special measures.

[15:06] <discord-raku-bot> <elcaro> yeah, the &EXPORT receives that list, and I just iterate through it

[15:06] <discord-raku-bot> <Nemokosch> okay, then the situation is a bit worse than I initially thought xD

[15:06] <discord-raku-bot> <elcaro> haha

[15:06] <discord-raku-bot> <masukomi> i feel like we could almost get around this is we could somehow `use Foo :nothing`  have it compile, but have it not let you invoke anything without the `Foo::` prefix

[15:06] <discord-raku-bot> <Nemokosch> not only the default is dubious but there is no elegant built-in way to make it right

[15:08] <discord-raku-bot> <masukomi> the `use Foo qx(bar);`  is so close as it does it for all methods _except_ the one specified

[15:08] <discord-raku-bot> <Nemokosch> now that you mentioned Python

[15:08] <discord-raku-bot> <Nemokosch> does Python break away from this value resolution vs namespace resolution schizophrenia completely?

[15:11] <discord-raku-bot> <elcaro> Dubious,  yes.  Deal breaker, not so much. I reiterate that Raku has a small _volunteer_ dev team.

[15:11] <discord-raku-bot> <elcaro> I wrote that blog post years ago in mild hope that the community would rally around the idea of fixing import/export while the language was relatively young. That didn't happen, and I didn't push for change. The language had other more important deficiencies at the time.

[15:11] <discord-raku-bot> <elcaro> Importantly, there are viable workarounds.. with the only issue being that the are "ugly". Maybe RakuAST will allow syntax transformations to help make the work arounds less "ugly".

[15:12] <discord-raku-bot> <Nemokosch> Look, there are pros and cons and we could go on for days. The reason I'm still here is that I value the pros over the cons.

[15:12] <discord-raku-bot> <elcaro> exactly

[15:13] <discord-raku-bot> <masukomi> ok poking in the repl. given this:

[15:13] <discord-raku-bot> <masukomi> ```

[15:13] <discord-raku-bot> <masukomi> unit module Foo;

[15:13] <discord-raku-bot> <masukomi> sub bar() is export { say 'bar' }

[15:13] <discord-raku-bot> <masukomi> sub baz() is export { say 'baz' }

[15:13] <discord-raku-bot> <masukomi> ```

[15:13] <discord-raku-bot> <masukomi> what's happening when i do `use Foo < >;`  Was hoping i'd be able to call `Foo::bar()` but i can't and i can't call `bar()` either.

[15:14] <discord-raku-bot> <Nemokosch> However, I still have to say that sometimes, I found that the _willingness to do the right thing_ is the biggest wall in front of the right thing

[15:14] <discord-raku-bot> <elcaro> you want to do `our sub ...` to be able to call `Foo::bar()`

[15:15] <discord-raku-bot> <Nemokosch> some things would have been either dead simple or at least reasonably simple to fix, if the approximately 3 people who know the implementation didn't insist that the behavior is understandable xD

[15:15] <discord-raku-bot> <masukomi> well that feels... silly. Kinda assumed you'd be able to call `Foo::bar()` by default (even without my weird invocation).

[15:16] <discord-raku-bot> <masukomi> hey, that kinda works! 

[15:16] <discord-raku-bot> <masukomi> ```

[15:16] <discord-raku-bot> <masukomi> [0] > use lib '.'; use Foo < >;

[15:16] <discord-raku-bot> <masukomi> Nil

[15:16] <discord-raku-bot> <masukomi> [1] > Foo::bar();

[15:16] <discord-raku-bot> <masukomi> bar

[15:16] <discord-raku-bot> <masukomi> [1] > bar()

[15:16] <discord-raku-bot> <masukomi> ===SORRY!=== Error while compiling:

[15:16] <discord-raku-bot> <masukomi> Undeclared routine:

[15:16] <discord-raku-bot> <masukomi>     bar used at line 1. Did you mean 'VAR', 'bag'?

[15:16] <discord-raku-bot> <masukomi> ```

[15:16] <discord-raku-bot> <Nemokosch> when this came up a couple of weeks ago, I phrased this as "`our` doesn't mean private to package but public to package"

[15:17] <discord-raku-bot> <elcaro> yeah I can see... there might be some way to dig into the guys  of `Foo` and get access to unexported lexicals, but I'm not aware of one right now.

[15:17] <discord-raku-bot> <Nemokosch> and that brought me inner peace xd

[15:17] <discord-raku-bot> <elcaro> yeah I can see... there might be some way to dig into the guts  of `Foo` and get access to unexported lexicals, but I'm not aware of one right now.

[15:18] <discord-raku-bot> <masukomi> i like the `use Foo < >` hack, but it's dependent upon people using `our` which doesn't seem to be common.

[15:18] <discord-raku-bot> <masukomi> i like the `use Foo < >`; hack, but it's dependent upon people using `our` which doesn't seem to be common.

[15:18] <discord-raku-bot> <masukomi> i like the `use Foo < >;` hack, but it's dependent upon people using `our` which doesn't seem to be common.

[15:18] <discord-raku-bot> <Nemokosch> I have the feeling that it's not even known enough that `our` does this

[15:18] <discord-raku-bot> <elcaro> well, the good news on that front is it can be added without breaking much... so  start submitting PR's 😀

[15:19] <discord-raku-bot> <Nemokosch> what does use Foo do in that example?

[15:19] <discord-raku-bot> <masukomi> > when this came up a couple of weeks ago, I phrased this as "our doesn't mean private to package but public to package"

[15:19] <discord-raku-bot> <masukomi> that.... is non-obvous, and helpful. thanks.

[15:19] <discord-raku-bot> <elcaro> it's actually not a bad idea

[15:19] <discord-raku-bot> <masukomi> yeah, just... that's gonna be a LOT of PRs 😉

[15:20] <discord-raku-bot> <masukomi> under the covers? i have no idea. In practice... makes it so that you're forced to use the fully qualified name it seems.

[15:21] <discord-raku-bot> <Nemokosch> does it not work without?

[15:22] <discord-raku-bot> <masukomi> correct. if i `use Foo < >;` i can only invoke `bar` via `Foo::bar`  BUT it only works if i've done `our sub bar() is export {...}`

[15:22] <discord-raku-bot> <masukomi> correct. if i `use Foo < >;` i can only invoke `bar` via `Foo::bar`  BUT it only works if i've done `our sub bar() is export {...}`. Without the `our` it doesn't work so... not a general solution.

[15:23] <discord-raku-bot> <Nemokosch> okay, next experiment

[15:23] <discord-raku-bot> <Nemokosch> what if you don't use `is export`, only `our`?

[15:25] <discord-raku-bot> <masukomi> no difference.. i added `our sub fum() { say 'fum' }` and it worked just like `our sub bar() is export { say 'bar' }`

[15:25] <discord-raku-bot> <Nemokosch> "superglobal"

[15:27] <discord-raku-bot> <Nemokosch> for managing imports, there is also https://raku.land/zef:lizmat/from

[15:34] *** Nemokosch joined
[15:37] <discord-raku-bot> <masukomi> i think it might be possible to hack that to support prefixing.

[15:37] <discord-raku-bot> <masukomi> i think it might be possible to hack that to support prefixing.... like combine it with <@724421839924756480> 's `my &foo...` hack.

[15:37] <discord-raku-bot> <Nemokosch> > # use Foo, but don't import anything

[15:37] <discord-raku-bot> <Nemokosch> is this essentially what you'd like to see?

[15:37] <discord-raku-bot> <masukomi> well, yes, but the problem is i can't actually call `Foo::bar` after that. Not sure what exactly it's doing.

[15:39] <discord-raku-bot> <masukomi> ```

[15:39] <discord-raku-bot> <masukomi> [0] > use lib '.'; use from "Foo";

[15:39] <discord-raku-bot> <masukomi> Nil

[15:39] <discord-raku-bot> <masukomi> [1] > Foo::bar();

[15:39] <discord-raku-bot> <masukomi> Could not find symbol '&bar' in 'GLOBAL::Foo'

[15:39] <discord-raku-bot> <masukomi>   in block <unit> at <unknown file> line 1

[15:39] <discord-raku-bot> <masukomi> ```

[15:39] <discord-raku-bot> <masukomi> <--- currently attempting to satisfy PR feedback at work so only half able to focus on understanding liz's module with my newb raku understanding.

[15:51] <discord-raku-bot> <elcaro> I figured this was possible, and of course lizmat's already done it.

[15:51] <discord-raku-bot> <elcaro> Sleepy, time for bed.  G'night

[15:52] <discord-raku-bot> <Nemokosch> land down under?

[15:52] <discord-raku-bot> <Nemokosch> good night

[15:52] <discord-raku-bot> <masukomi> thanks for the education <@724421839924756480>

[15:53] <discord-raku-bot> <elcaro> You're welcome.

[15:55] *** Nemokosch left
[16:33] *** Kaiepi left
[16:34] *** Kaiepi joined
[17:14] *** razetime joined
[17:20] *** razetime left
[19:58] <tbrowder> why don't you folks put those thoughts into a detailed Rakudo issue?

[20:05] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/08/29/2022-35-reworkout/

[22:45] *** archenoth left
[23:03] *** deadmarshal left
[23:05] *** Guest10 joined
[23:05] <Guest10> help

[23:06] <Guest10> i am looking for a healer

[23:10] *** Guest10 left
[23:28] *** archenoth joined
[23:49] *** deadmarshal joined
