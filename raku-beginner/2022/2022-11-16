[00:05] *** deoac joined
[00:11] <deoac> Given `class C { has $.x; method y { ; } }; ` I can get a list of its methods with `say C.^methods;` .¬† Is there a similar way to get a `package`s "contents"?

[00:11] <deoac> package P {

[00:11] <deoac> ¬† ¬† class C { has $.x; method y { ; } };

[00:11] <deoac> ¬† ¬† enum E <foo bar baz>;

[00:11] <deoac> ¬† ¬† sub S { say 'Hello'; };

[00:11] <deoac> }

[00:12] <deoac> Given `P`, how could I learn about `C`, `E`, and `S`?

[00:16] *** Kaipei is now known as Kaiepi

[00:19] <discord-raku-bot> <Kaiepi> like a `Stash`? `P::` or `P.WHO` will contain them in one, being a `Hash` of sorts

[00:21] <discord-raku-bot> <Kaiepi> it's where `our`-scoped symbols in types that allow for them ggo

[00:21] <discord-raku-bot> <Kaiepi> it's where `our`-scoped symbols in types that allow for them go

[01:24] <deoac> Thanks, I didn't know about Stashes.¬† From the documentation:

[01:24] <deoac> ¬† ¬† "Lexicals and methods are not included in a Stash, since they do not live in the package table. Lexicals live in a separate lexical pad, which is only visible from inside the scope."

[01:24] <deoac> how can I access that Lexical pad?

[01:28] <deoac> Also, how can I find out that `C` is a class, `E` is an enum?¬† `.^name` only returns `Stash`

[01:29] *** frost joined
[02:37] *** frost left
[03:23] *** razetime joined
[03:48] *** deoac left
[03:58] *** Kaiepi left
[04:51] *** Heptite left
[06:55] *** Kaiepi joined
[07:46] <jaguart> Anyone have recommends for AES encryption in Raku? Wrapper around openss libraries etc? Looking for some reasonable private-on-disk storage.

[07:52] <razetime> OpenSSL bindings are at https://raku.land/github:sergot/OpenSSL

[07:53] <razetime> OpenSSL:CryptTools seems to have what you want, jaguart

[08:22] *** razetime left
[08:28] *** Kaiepi left
[08:43] *** razetime joined
[09:19] *** dakkar joined
[10:30] *** Kaiepi joined
[10:33] *** frost joined
[10:34] *** razetime left
[11:00] *** razetime joined
[11:06] *** frost left
[11:09] *** frost joined
[12:44] *** frost left
[13:23] *** razetime left
[13:37] *** razetime joined
[14:00] <discord-raku-bot> <Kaiepi> i was hoping there would be libsodium bindings for this üò¶

[14:00] <discord-raku-bot> <Kaiepi> openssl would be my next pick

[14:06] <discord-raku-bot> <Kaiepi> deoac, i'm not sure there's a pretty way to go about getting the lexical symbols within a package. you could refer to `OUTER::LEXICAL` from an `our`-scoped block within one i guess

[14:06] <discord-raku-bot> <Kaiepi> `C` and `E` differ as types not by their type, but by their `.HOW`

[14:07] <discord-raku-bot> <Kaiepi> so you can see what's what with `.HOW.^name`

[14:07] <discord-raku-bot> <Kaiepi> damn they're not here

[14:21] *** frost joined
[15:03] *** deoac joined
[15:04] <deoac> Thank you, Kaiepi.¬† You've given me a lot to think about as I learn the Metamodel.

[15:04] *** razetime left
[15:13] *** razetime joined
[15:23] *** frost left
[17:36] *** dakkar left
[17:48] *** Heptite joined
[18:18] *** razetime left
[19:51] *** jgaz joined
[19:57] <jgaz> Is there a read-only version of the := operator?

[20:05] <discord-raku-bot> <Kaiepi> there is mention of a `::=` operator in the design docs but there are complications with implementing it afaik?

[20:06] <discord-raku-bot> <Nemokosch> exactly

[20:08] <jgaz> Interesting... I wonder what the difficulty is. Is the nature of the complication documented somewhere? It might make for interesting reading.

[20:09] <jgaz> I'm legitimately curious.

[20:12] <discord-raku-bot> <Nemokosch> https://docs.raku.org/routine/::= perhaps complications is a strong word, the docs only say that it's "not yet implemented in Rakudo"

[20:14] <jgaz> Nemokosch, thanks

[20:14] <jgaz> That feature would strengthen Raku's already good FP chops.

[20:14] <discord-raku-bot> <Kaiepi> i'm having trouble finding logs to do with `::=`, so i'm not sure where i get that idea from. i did find the design for it though https://design.raku.org/S03.html#line_2407

[20:15] <jgaz> I keep pointing Haskell programmers I know who are looking to scratch their FP itch with a scripting language towards Raku with good results.

[20:34] <jgaz> Kaiepi: would a GitHub issue inquiring about it be out of line?

[20:56] <discord-raku-bot> <Kaiepi> a feature request wouldn't hurt i don't think

[21:05] *** nicole left
[21:07] *** nicole joined
[21:54] <discord-raku-bot> <Nemokosch> to be honest, I'm not sure how the "read-only binding operator" would work

[21:54] <discord-raku-bot> <Nemokosch> like, what it would do in the first place

[22:00] *** jgaz left
[22:28] <lizmat> my interpretation:  my $a = 42; my $b ::= $a;  $b = 666  # error

[22:29] <lizmat> my $b ::= $a    would be equivalent to:  my $b := $a<>

[23:05] *** habere-et-disper joined
[23:07] <habere-et-disper> Hi all! Why can I initialize separately:

[23:07] <habere-et-disper> m: my UInt $foo = 3; my UInt @bar = [14]; say $foo, @bar;

[23:07] <camelia> rakudo-moar 17062c32f: OUTPUT: ¬´3[14]‚ê§¬ª

[23:07] <habere-et-disper> But not together:

[23:07] <habere-et-disper> m: my UInt ( $foo,¬† @bar ) = ( 3, [14] ); say $foo, @bar;

[23:07] <camelia> rakudo-moar 17062c32f: OUTPUT: ¬´Type check failed in assignment to @bar; expected UInt but got Array ([14])‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

