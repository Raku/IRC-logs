[00:01] <thowe> The Raku docs seem to indicate that blocks do, in fact, return "The last statement".  Though it does say they are "transparent to return " whatever that means.

[00:02] <thowe> Did this behavior change since the book was written?

[00:08] <discord-raku-bot> <Nemokosch#9980> it would be good to see what it says exactly

[00:09] <thowe> "A subroutine can return a value (a Block can’t)."

[00:10] <thowe> http://pizza.deschutesdigital.com:9088/file/1/HhR7W9tSJglDwQxn

[00:10] <thowe> dammit

[00:10] <thowe> http:/file/1/BBx04PmCM4CVw955

[00:10] <SmokeMachine> m: sub a($should-return) { my $b = { return “returned” if $should-return; “b” }; say $b; “last value” }; a True; a False

[00:10] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «-> ;; $_? is raw = OUTER::<$_> { #`(Block|43082528) ... }␤-> ;; $_? is raw = OUTER::<$_> { #`(Block|43083104) ... }␤»

[00:10] <thowe> the helll

[00:11] <thowe> http:/file/1/sjP0pUAQgRA2LFgF

[00:11] <SmokeMachine> 00:10 <SmokeMachine> m: sub a($should-return) { my $b = { return “returned” if $should-return; “b” }.(); say $b; “last value” }; a True; a False

[00:11] <SmokeMachine> m: sub a($should-return) { my $b = { return “returned” if $should-return; “b” }.(); say $b; “last value” }; a True; a False

[00:11] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «b␤»

[00:12] <SmokeMachine> m: sub a($should-return) { my $b = { return “returned” if $should-return; “b” }.(); say $b; “last value” }; say a True; say a False

[00:12] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «returned␤b␤last value␤»

[00:12] <thowe> apparently convos won't let me paste in the next couple sentences, but the way I use put in the example is what it says can only be done with a sub...  "Previously the blocks handled output"

[00:13] <thowe> I can only assume Brian De Foy was very confused, or blocks are different now?

[00:13] <SmokeMachine> thowe: transparent to return: 👆

[00:14] <discord-raku-bot> <Nemokosch#9980> I don't think this helps a lot

[00:14] <discord-raku-bot> <Nemokosch#9980> does this mean that `return` inside a block still belongs to the sub?

[00:14] <SmokeMachine> Calling return from a block inside a sub will return the sub and not the block

[00:15] <thowe> in the code example I pasted, I do "put $maxofthree($n1, $n2, $n3);"  put is printing the returned value of the block.  The following examples and text in the book explain that one must use a sub to be able to do that.

[00:15] <SmokeMachine> Nemokosch#9980: yes

[00:16] <SmokeMachine> You must use a sub to be able to use the return keyword

[00:16] <discord-raku-bot> <Nemokosch#9980> $maxofthree works for me btw

[00:17] <SmokeMachine> m: { return 42 }

[00:17] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[00:17] <thowe> Transparent to return is not explained there.  He says that previous examples in the book showed the block handling the output.  However I look back and they don't all do so.  I think this is a result of bad editing or something.

[00:18] <SmokeMachine> A block being transparent to return mean that if you call return from inside a block, it will return from the outside sub and not from the block

[00:18] <discord-raku-bot> <Nemokosch#9980> SmokeMachine has explained what transparent to return means and I think it makes sense

[00:18] <discord-raku-bot> <Nemokosch#9980> just like the block of an if statement is "transparent to break/continue", a raku block is "transparent to return"

[00:19] <thowe> OK, thanks for that.  but that is not the issue that is confusing me in the book.

[00:20] <thowe> "tranparent to return" is clearly not what is being discussed in the book.  I think I point that out clearly above.

[00:20] <SmokeMachine> I haven’t read the book, but isn’t it explaining that you can’t use return on the block itself? Like this:

[00:20] <thowe> No.

[00:20] <SmokeMachine> m: { return 42 }

[00:20] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[00:21] <discord-raku-bot> <Nemokosch#9980> then I'm afraid you also aren't explaining well enough 😅

[00:21] <discord-raku-bot> <Nemokosch#9980> anyways, what you posted works just fine for me

[00:21] <discord-raku-bot> <Nemokosch#9980> m: my $maxofthree := { ($^a, $^b, $^c).max } put $maxofthree(4,5,2)

[00:21] <thowe> It is saying that the block would have to have the put statement in it instead of being able to do what I do in my code example I pasted.  It works fine for me too.  I didn't say it didn't work.

[00:22] <thowe> But the book is saying it wouldn't work...  It says I would need a sub to do that.  I'm saying the book is wrong.

[00:23] <discord-raku-bot> <Nemokosch#9980> okay, missing semicolon...

[00:23] <discord-raku-bot> <Nemokosch#9980> m: my $maxofthree := { ($^a, $^b, $^c).max }; put $maxofthree(4,5,2)

[00:23] <discord-raku-bot> <Nemokosch#9980> we don't have the book so we can't check that 🤷‍♂️

[00:23] <thowe> a screenshot would be fair use, right?

[00:25] <discord-raku-bot> <Nemokosch#9980> I think so but don't bother, it was uploaded somewhere and I looked it up

[00:27] <discord-raku-bot> <Nemokosch#9980> my first impression is that the author doesn't really know/pay attention to the fact that implicit returns exist

[00:27] <discord-raku-bot> <Nemokosch#9980> and hence mistakenly concludes from the "transparency of return" that blocks can't return a value

[00:27] <discord-raku-bot> <Nemokosch#9980> I see no behavior that contradicts the current status quo

[00:28] <discord-raku-bot> <Nemokosch#9980> the only thing I can imagine is that implicit returns didn't exist at that time but I wouldn't know that as a newbie to the language

[00:29] <discord-raku-bot> <Nemokosch#9980> moreover

[00:29] <discord-raku-bot> <Nemokosch#9980> ```perl

[00:29] <discord-raku-bot> <Nemokosch#9980> my $subroutine := sub {

[00:29] <discord-raku-bot> <Nemokosch#9980> return do if now.Int %% 2 { 'Even' }

[00:29] <discord-raku-bot> <Nemokosch#9980> else { 'Odd' }

[00:29] <discord-raku-bot> <Nemokosch#9980> };

[00:29] <discord-raku-bot> <Nemokosch#9980> put $subroutine();

[00:29] <discord-raku-bot> <Nemokosch#9980> ```

[00:29] <discord-raku-bot> <Nemokosch#9980> this already contradicts this narrative

[00:29] <thowe> Yes, you are describing exactly my thoughts.

[00:29] <discord-raku-bot> <Nemokosch#9980> the guy doesn't seem to be trying to use implicit returns with pointy blocks

[00:30] <thowe> but if you go back, the block examples given also contradict this.  I think the return transparency thing was previously misunderstood by him, and then he went back and made changes, but never fixed the text.

[00:31] <thowe> anyway, at least the third big error I have found in the book.  Starting to annoy me.

[00:31] <discord-raku-bot> <Nemokosch#9980> ```perl

[00:31] <discord-raku-bot> <Nemokosch#9980> my $block := -> Numeric $b, Numeric $a { $a / $b };

[00:31] <discord-raku-bot> <Nemokosch#9980> put $block( 1, 2 );

[00:31] <discord-raku-bot> <Nemokosch#9980> ```

[00:33] <discord-raku-bot> <Nemokosch#9980> this for one is a good way of "return" from a pointy block

[00:34] <SmokeMachine> In that case I would prefer like this:

[00:35] <SmokeMachine> my &block := -> Numeric $b, Numeric $a { $a / $b }; say block 1, 2

[00:35] <SmokeMachine> m: my &block := -> Numeric $b, Numeric $a { $a / $b }; say block 1, 2

[00:35] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «2␤»

[00:38] <thowe> What learning materials are others using?

[00:47] <discord-raku-bot> <Nemokosch#9980> I mean, indeed, & is the right sigil for something meant to be called all along

[00:47] <discord-raku-bot> <Nemokosch#9980> I was taking the example from the book

[00:48] <discord-raku-bot> <Nemokosch#9980> thowe: I basically just use the docs and lurk around on the discord server, in case I have a question or someone posts something clever 🙂

[05:06] <discord-raku-bot> <stevied#8273> I got this:

[05:06] <discord-raku-bot> <stevied#8273> ```

[05:06] <discord-raku-bot> <stevied#8273> multi apps(Str $dir) is export(:MANDATORY) { apps [$dir] }

[05:06] <discord-raku-bot> <stevied#8273> multi apps(Str @dirs?) is export(:MANDATORY) {

[05:06] <discord-raku-bot> <stevied#8273> ```

[05:06] <discord-raku-bot> <stevied#8273> I call it with this: `@apps = apps @path`

[05:06] <discord-raku-bot> <stevied#8273> i get this error:

[05:06] <discord-raku-bot> <stevied#8273> ```

[05:06] <discord-raku-bot> <stevied#8273> Cannot resolve caller apps(Array:D); none of these signatures match:

[05:06] <discord-raku-bot> <stevied#8273>     (Str $dir)

[05:06] <discord-raku-bot> <stevied#8273>     (Str @dirs?)

[05:06] <discord-raku-bot> <stevied#8273> ```

[05:06] <discord-raku-bot> <stevied#8273> how do I fix this?

[05:07] <discord-raku-bot> <stevied#8273> the @path has a string in it.

[05:11] <discord-raku-bot> <stevied#8273> so I'm not sure why it doesn't match the signature

[05:15] <discord-raku-bot> <stevied#8273> oh, I guess at @path has to be typed as Str. hmmm.

[08:24] <MasterDuke> how to use typed arrays is a common trap in raku

[08:25] <MasterDuke> m: my Str @a = <a b c>; dd @a

[08:25] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Array[Str @a = Array[Str].new("a", "b", "c")␤»

[08:25] <MasterDuke> but

[08:25] <MasterDuke> m: sub foo(Str @a) { dd @a }; foo(<a b c>)

[08:25] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Str] but got List (("a", "b", "c"))␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:25] <MasterDuke> and

[08:25] <MasterDuke> m: my Str @a := <a b c>; dd @a

[08:25] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Type check failed in binding; expected Positional[Str] but got List (("a", "b", "c"))␤  in block <unit> at <tmp> line 1␤␤»

[08:28] <MasterDuke> the `<a b c>` is not something that's explicitly been typed to only contains Strs, it just happens to do so. in the first assignment example i showed, it works because assignment does copying, it kind of creates a typed array and then copied each individual element into it, and they all fit the type

[08:29] <MasterDuke> but the binding example (and that's how the sub argument passing is done) doesn't do that copying, and the types don't match

[08:30] <MasterDuke> m: sub foo(@a where @a.all ~~ Str) { dd @a }; foo(<a b c>)

[08:30] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «("a", "b", "c")␤»

[08:31] <MasterDuke> in that case the sub just wants any kind of array, as long as every element is a Str

[08:32] <MasterDuke> m: sub foo(@a where @a.all ~~ Str) { dd @a }; foo(("a", "b", "c", 3))

[08:32] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Constraint type check failed in binding to parameter '@a'; expected anonymous constraint to be met but got List (("a", "b", "c", 3))␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:35] <MasterDuke> m: sub foo(Str @a) { dd @a }; foo(Array[Str]("a", "b", "c"))

[08:35] <camelia> rakudo-moar 1b5c0b951: OUTPUT: «Array[Str].new("a", "b", "c")␤»

[10:20] *** discord-raku-bot left
[10:20] *** discord-raku-bot joined
[13:18] <discord-raku-bot> <stevied#8273> I'm going through book at https://arnesom.github.io/Beginning-v1.00.pdf

[13:18] <discord-raku-bot> <stevied#8273> has this code example: `my Int %$hash; say %hash.of;  # -> (Int)`

[13:18] <discord-raku-bot> <stevied#8273> why does it have %$hash? the book offers no explanation. I'm thinking it's a typo as the book is full of other errors.

[13:49] <discord-raku-bot> <Nemokosch#9980> I also think so... %$hash does exist as a kind of conversion but not as a variable on its own

[13:49] <discord-raku-bot> <Nemokosch#9980> from what I know

[13:49] <discord-raku-bot> <Nemokosch#9980> and it surely won't work like that example

[13:49] <discord-raku-bot> <Nemokosch#9980> maybe the other way around

[15:29] *** discord-raku-bot left
[15:29] *** [Coke] left
[15:29] *** Manifest0 left
[15:29] *** MasterDuke left
[15:29] *** camelia left
[15:29] *** SmokeMachine left
[15:29] *** mjgardner left
[15:29] *** gfldex left
[15:29] *** thowe left
[15:29] *** sivoais left
[15:29] *** TempIRCLogger left
[15:29] *** tbrowder left
[15:29] *** Util_ left
[15:29] *** codesections left
[15:29] *** guifa left
[15:29] *** samebchase left
[15:29] *** qorg11 left
[15:29] *** lizmat left
[15:32] *** codesections joined
[15:32] *** Util_ joined
[15:32] *** tbrowder joined
[15:32] *** camelia joined
[15:32] *** SmokeMachine joined
[15:32] *** MasterDuke joined
[15:32] *** Manifest0 joined
[15:32] *** [Coke] joined
[15:32] *** discord-raku-bot joined
[15:32] *** guifa joined
[15:32] *** samebchase joined
[15:32] *** mjgardner joined
[15:32] *** TempIRCLogger joined
[15:33] *** qorg11 joined
[15:33] *** lizmat joined
[15:33] *** gfldex joined
[15:33] *** thowe joined
[15:33] *** sivoais joined
[15:43] <lizmat> I think Arne Sommer would appreciate PR's for errors that you find

[16:20] *** discord-raku-bot left
[16:21] <thowe> I didn't know about that pdf...  I'll check that out

[16:21] *** discord-raku-bot joined
[16:21] *** getimiskon joined
[16:26] <thowe> raku people sure do like Docker...

[16:29] <thowe> Re: Beginning Raku by Sommer: I had seen that but thought it was a print book.  I'll def check out.

[16:30] <lizmat> thowe: I think that's really to get around the fact that Raku isn't in that many standard Linux distributions (yet)

[16:34] <thowe> ah.  I find rakubrew a treat

[16:34] <thowe> but then I am used to perlbrew

[16:34] <thowe> I rememeber the Ruby equiv being less friendly

[16:35] <discord-raku-bot> <Nemokosch#9980> rakubrew is nice

[16:37] *** discord-raku-bot left
[16:38] *** discord-raku-bot joined
[22:29] <discord-raku-bot> <stevied#8273> Looking at: https://docs.raku.org/language/mop

[22:31] <discord-raku-bot> <stevied#8273> it's got this sample code:

[22:31] <discord-raku-bot> <stevied#8273> ```

[22:31] <discord-raku-bot> <stevied#8273> my $arr = [1, 2];

[22:31] <discord-raku-bot> <stevied#8273> say $arr.^name;   # OUTPUT: «Array␤» 

[22:31] <discord-raku-bot> <stevied#8273> ```

[22:31] <discord-raku-bot> <stevied#8273> but REPL shows: 

[22:31] <discord-raku-bot> <stevied#8273> ```

[22:31] <discord-raku-bot> <stevied#8273> say $arr.^name

[22:31] <discord-raku-bot> <stevied#8273> Array

[22:31] <discord-raku-bot> <stevied#8273> ```

[22:31] <discord-raku-bot> <stevied#8273> any reason why?

[22:41] <discord-raku-bot> <Nemokosch#9980> hey, what's the difference?

[22:46] <discord-raku-bot> <stevied#8273> the funny symbols around Array are in docs, not in REPL

[22:47] <discord-raku-bot> <stevied#8273> I keep seeing those funny symbols and have no idea what they are

[23:04] *** getimiskon left
[23:10] <MasterDuke> french quotes i believe

