[03:28] <guifa> MasterDuke indeed. I wonder if a grammar by default should avoid the more Raku-y ones like <identifier>.  <digit> makes sense (and can even be usefully overridden with <[0..9]> )

[05:32] <guifa> actually, nm.  They aren't included (I think I've been in slang world too long).  There shouldn't be a problem with identifier or token, etc, in a normal grammar.

[08:50] *** TempIRCLogger left
[08:51] *** lizmat left
[08:51] *** RakuIRCLogger left
[08:59] *** dakkar joined
[09:00] *** lizmat_ left
[09:00] *** lizmat joined
[11:39] *** frost left
[12:35] <discord-raku-bot> <Nemokosch#9980> Hello

[12:35] <discord-raku-bot> <Nemokosch#9980> yes, I'm thinking about 154-2...

[12:36] <discord-raku-bot> <Nemokosch#9980> is there a nice way to remove duplicates from a Seq?

[13:17] <MasterDuke> .unique

[13:24] <discord-raku-bot> <Nemokosch#9980> wow thanks, this is good to know

[13:24] <discord-raku-bot> <Nemokosch#9980> what is the runtime cost of using it? I guess it needs to store the elements of the sequence?

[13:32] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/core.c/Any-iterable-methods.pm6#L1846-L1882

[13:34] <MasterDuke> so yeah, just checked against a hash it creates

[15:07] *** frost joined
[15:36] *** frost left
[17:40] *** dakkar left
[18:07] *** Hello16 joined
[18:08] *** Hello16 left
[19:26] <discord-raku-bot> <gfldex#8222> <@297037173541175296> .squish might work too

[19:28] <discord-raku-bot> <Nemokosch#9980> Oh?

[19:28] <discord-raku-bot> <Nahita#3882> if sequential

[19:28] <discord-raku-bot> <Nahita#3882> m: [12, 12, 4, -1, 12].squish.say

[19:28] <discord-raku-bot> <Nemokosch#9980> Yeah, that is for something else, right?

[19:28] <discord-raku-bot> <Nahita#3882> yeah, they did say \*might\*

[19:32] <discord-raku-bot> <Nemokosch#9980> It's more effective but tbh I wouldn't want to depend on a "trivial detail" like this

[20:41] <discord-raku-bot> <gfldex#8222> @Nemokosch#9980 do you care to share your 154-2 solution?

[20:45] <discord-raku-bot> <Nemokosch#9980> <https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-154/2colours/raku/ch-2.raku>

[20:46] <discord-raku-bot> <gfldex#8222> here is mine: https://gfldex.wordpress.com/2022/03/01/pushing/

[20:52] <discord-raku-bot> <Nemokosch#9980> Nice :)

[20:53] <discord-raku-bot> <Nemokosch#9980> I see you love containerless stuff

[20:55] <discord-raku-bot> <Nahita#3882> `×` instead of 1 more `*` could be better to avoid confusion IMHO, while you're using ∞

[20:55] <discord-raku-bot> <Nahita#3882> so many *s

[20:59] <discord-raku-bot> <gfldex#8222> m:```

[20:59] <discord-raku-bot> <gfldex#8222>     use experimental :cached;

[20:59] <discord-raku-bot> <gfldex#8222>     proto P(Int $n) is cached { * }

[20:59] <discord-raku-bot> <gfldex#8222>     multi sub P ($n where * == 0|1|2) { 1 }

[20:59] <discord-raku-bot> <gfldex#8222>     multi sub P ($n where * ≥ 3) { P($n - 2) + P($n - 3) }

[20:59] <discord-raku-bot> <gfldex#8222>     (0..*).map(&P).grep(&is-prime).unique.head(10).say;

[20:59] <discord-raku-bot> <gfldex#8222> ```

[20:59] <discord-raku-bot> <gfldex#8222> @Nemokosch#9980 is cached works for multis too

[21:01] <discord-raku-bot> <Nemokosch#9980> I know but I preferred given when here

[21:01] <discord-raku-bot> <gfldex#8222> Sadly, we can't use junctions as literals in signatures.

[21:05] <discord-raku-bot> <Nemokosch#9980> I suspected so

[21:07] <discord-raku-bot> <Nemokosch#9980> I thought if I couldn't use the constant value elegantly, why even bother with the multi

[21:15] <discord-raku-bot> <gfldex#8222> I like to use containerless symbols for lazy lists because they act rather like functions.

[22:48] *** codesections5 joined
[22:50] *** codesections left
[22:50] *** codesections5 is now known as codesections

