[00:14] <discord-raku-bot> <stevied#8273> having some trouble figuring out how to do a search and replace on text in an array. Tried this:

[00:14] <discord-raku-bot> <stevied#8273> ```

[00:14] <discord-raku-bot> <stevied#8273>         for @subsections[1..*-1] -> $text is rw {

[00:14] <discord-raku-bot> <stevied#8273>             $text ~~ s/^^ '#' \s* /''/;

[00:14] <discord-raku-bot> <stevied#8273>         }

[00:14] <discord-raku-bot> <stevied#8273> ```

[00:16] <discord-raku-bot> <stevied#8273> throws: `Cannot assign to a readonly variable or a value`

[00:34] *** Kaiepi left
[00:34] *** Kaipei joined
[00:47] *** frost joined
[01:37] <discord-raku-bot> <stevied#8273> nvm, figured it out

[01:43] <discord-raku-bot> <stevied#8273> is there a way to get `say` to return the actual string instead of a boolean?

[01:45] <discord-raku-bot> <stevied#8273> ok, I can just use .gist

[06:52] *** frost left
[07:48] *** dakkar joined
[08:24] *** frost joined
[09:00] <discord-raku-bot> <Nemokosch#9980> Is there a more idiomatic way to "flat-zip" than simply applying flat after zipping?

[09:04] *** frost left
[09:33] *** lizmat_ joined
[09:35] *** lizmat left
[09:35] *** lizmat_ is now known as lizmat

[10:48] *** frost joined
[11:06] *** frost left
[11:13] *** frost joined
[11:25] *** frost left
[11:36] *** frost joined
[11:58] *** frost left
[11:58] *** frost joined
[12:17] *** frost left
[12:25] *** frost joined
[13:00] *** frost left
[13:09] <discord-raku-bot> <Util#9950> m: say (<a b c> Z <m n o>).flat;

[13:09] <Util> m: say (<a b c> Z <m n o>).flat;

[13:09] <camelia> rakudo-moar f2546b446: OUTPUT: ¬´(a m b n c o)‚ê§¬ª

[13:10] <discord-raku-bot> <Util#9950> m: say flat <a b c> Z <m n o>;

[13:10] <discord-raku-bot> <Util#9950> m: say flat [Z] <a b c>, <m n o>;

[13:11] <discord-raku-bot> <Util#9950> <@297037173541175296> : I tried using `Z|`, to turn everything into a Slip as it was zipped, but `Z` interprets `|` as the infix op that creates a Junction, instead of the prefix op that Slips/flattens.

[13:11] <discord-raku-bot> <Util#9950> That third form, `flat [Z] list_of_arrays`, clusters the commands to flatten and zip away from the lists-to-be-zipped, so I favor it in my own code, but I recognize that others might reserve `[Z]` for 3+ lists and always use infix-`Z` when there are only 2 lists.

[13:13] <Util> Hmmm. That was meant to notify Nemokosch#9980 . I am working out how to best juggle IRC, Discord, and Bot-interactions.

[13:13] <discord-raku-bot> <Nemokosch#9980> why did [Z] work though?

[13:13] <discord-raku-bot> <Nemokosch#9980> that be me so you did right, lol

[13:15] *** jgaz joined
[13:15] <discord-raku-bot> <Util#9950> Do you know about the [op] reduction meta-operator?

[13:15] <discord-raku-bot> <Util#9950> https://docs.raku.org/language/operators#Reduction_metaoperators

[13:16] <discord-raku-bot> <Nemokosch#9980> yes

[13:19] <discord-raku-bot> <Util#9950> `[Z] @m, @n, @o` is the same as `@m Z @n Z @o`, so I don't know why it *wouldn't* work. Can you clarify your point of confusion? Perhaps I have mis-understood your original question.

[13:30] <discord-raku-bot> <Nemokosch#9980> okay nevermind I just missed flat in front of it lol

[13:31] <discord-raku-bot> <Nemokosch#9980> so yeah here it's the same as infix:<Z> <a b c>, <m n o>

[13:43] *** frost joined
[14:06] *** frost left
[15:57] <discord-raku-bot> <Anton Antonov#7232> How can declare a proto for a function that takes 0 or 1 arguments?

[16:02] <guifa> Anton: huh.  You might not be able to actually.

[16:03] <guifa> You'll probably just have to use the general proto sub foo (|) {¬†‚Ä¶¬†}¬†

[16:09] <discord-raku-bot> <Anton Antonov#7232> Yeah, that is what I am doing now. (Using |.)

[16:32] <discord-raku-bot> <stevied#8273> is there a shorter way to write this: `say $block-meta<explanation> if $block-meta<explanation>;`

[16:36] *** dakkar left
[16:38] <discord-raku-bot> <Nemokosch#9980> m: .say if $_ given $block-meta<explanation>;

[16:38] <discord-raku-bot> <Nemokosch#9980> well okay...

[16:39] <discord-raku-bot> <Nemokosch#9980> m: .say if $_ given 0

[16:40] <discord-raku-bot> <Nemokosch#9980> gee gee

[16:40] <discord-raku-bot> <Nemokosch#9980> m: .say if $_ given True

[16:40] <discord-raku-bot> <Nemokosch#9980> <@563790557831495691> do you not want definedness instead by any chance? ü•∫

[16:41] <discord-raku-bot> <stevied#8273> yeah, I think i should probably switch to definedness. I'm using an empty string if there's nothing to print but probably shouldn't do that

[16:42] <discord-raku-bot> <Nemokosch#9980> with definedness, suddenly there are choices

[16:42] <discord-raku-bot> <Nemokosch#9980> `with`, `andthen`, the `//` operator...

[16:42] <discord-raku-bot> <stevied#8273> right, i can use with/when

[16:44] <discord-raku-bot> <stevied#8273> thanks.

[16:44] <discord-raku-bot> <Nemokosch#9980> although I'd say the `.say if $_ given $something` is still a win for logic value

[16:44] <discord-raku-bot> <Nemokosch#9980> `if $_` is a bit noisy but one doesn't have to repeat the actual term

[16:44] <discord-raku-bot> <stevied#8273> interesting

[16:44] <discord-raku-bot> <gfldex#8222> m: my $block-meta = explanation => 42; $block-meta<explanation> andthen .say;

[16:44] <discord-raku-bot> <stevied#8273> jesus, the are a million tiny details with raku. you really have to be coding in it for a while to get proficient

[16:46] <discord-raku-bot> <Nemokosch#9980> this is what I feel, too üòÖ

[16:46] <discord-raku-bot> <stevied#8273> there's lots of nifty little efficiencies but you really have to dig deep to take advantage of them

[16:46] <discord-raku-bot> <Nemokosch#9980> but I'm using these "scripty" shortcuts regularly, while I never started with OO for example

[16:46] <discord-raku-bot> <gfldex#8222> <@563790557831495691> not as hard as this: https://cdn.abcotvs.com/dip/images/5294602_051019-kgo-castro-organ-img.jpg?w=1600

[16:46] <discord-raku-bot> <stevied#8273> heh

[16:48] <discord-raku-bot> <gfldex#8222> I wouldn't mind food pedals for typing unicode operators tho.

[16:48] <discord-raku-bot> <Nemokosch#9980> and you know, if there are features, you are tempted to use them

[16:48] <discord-raku-bot> <stevied#8273> https://gfycat.com/celebratedforsakencowrie

[16:49] <discord-raku-bot> <Nemokosch#9980> ```perl

[16:49] <discord-raku-bot> <Nemokosch#9980>   my %repo-path <== <esko kako> Z ($esko-repo-path, $kako-repo-path)>>.IO andthen .flat;

[16:49] <discord-raku-bot> <Nemokosch#9980> ```

[16:49] <discord-raku-bot> <Nemokosch#9980> and I did nail the precedence, lol

[16:49] <discord-raku-bot> <Nemokosch#9980> I hope you do, too üòÇ

[16:54] <discord-raku-bot> <stevied#8273> It appears I have a lot to learn from that examples. jesus

[16:54] <discord-raku-bot> <stevied#8273> I don't recognize most of those operators

[16:55] <discord-raku-bot> <stevied#8273> alright, so I guess the lesson is to avoid the empty string `''` with raku.

[16:55] <discord-raku-bot> <Nemokosch#9980> in what regard?

[16:56] <discord-raku-bot> <stevied#8273> to convey that a string should be treated as kind of a NULL value

[16:56] <discord-raku-bot> <Nemokosch#9980> yeah well it is a fully valid value afaik

[16:57] <discord-raku-bot> <stevied#8273> right, I mean, you can still use it, but it's better to use definedness

[16:57] <discord-raku-bot> <Nemokosch#9980> not even the default value of a string variable

[16:58] <discord-raku-bot> <Nemokosch#9980> Frankly I don't even like howthe empty string converts to false in most languages I've come across

[16:58] <discord-raku-bot> <stevied#8273> so instead of passing a `''` to a function, pass a `Str`

[16:58] <discord-raku-bot> <Nemokosch#9980> having it convert into 0 is even worse

[17:01] <discord-raku-bot> <Nemokosch#9980> for example, if you have an Str $variable

[17:01] <discord-raku-bot> <Nemokosch#9980> it's (Str) by default

[17:01] <discord-raku-bot> <Nemokosch#9980> $variable = Nil resets it to this default

[17:01] <discord-raku-bot> <Nemokosch#9980> idk if there is some dedicated way to reset it to default

[17:01] <discord-raku-bot> <Nemokosch#9980> my '' rant is unrelated to this haha

[17:05] <discord-raku-bot> <stevied#8273> well, anyway, I now have `.say with $block<explanation>;` now and all is right with the world

[17:05] <discord-raku-bot> <Nemokosch#9980> that's pretty nice imo

[17:18] <guifa> the if / with distinction is one that should probably be emphasized a bit more for early Raku tutorials

[17:25] <discord-raku-bot> <Nemokosch#9980> I have yet another seq manipulation task that may not be a one-liner or at least I don't know how

[17:26] <discord-raku-bot> <Nemokosch#9980> I want to be able "batch" based on some predicate, rather than a fixed amount of items

[17:27] <discord-raku-bot> <Nemokosch#9980> like perhaps the number of digits üòÑ

[17:27] <discord-raku-bot> <Nemokosch#9980> so the output should be like ((0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12 ...... 99), (100, 101, .....

[17:54] *** Nemokosch joined
[17:57] *** thundergnat joined
[17:57] <thundergnat> Nemokosch: categorize perhaps?

[17:58] <thundergnat> m: print .value[^5].gist for sort (^50000).categorize: *.chars

[17:58] <camelia> rakudo-moar f2546b446: OUTPUT: ¬´(0 1 2 3 4)(10 11 12 13 14)(100 101 102 103 104)(1000 1001 1002 1003 1004)(10000 10001 10002 10003 10004)¬ª

[17:58] <Nemokosch> Doesn't work on infinite sequences

[17:58] <thundergnat> Ah. No, it wouldn't...

[18:01] <discord-raku-bot> <Nemokosch#9980> right now I know nothing better than a stateful map

[18:09] *** Nemokosch left
[18:11] <discord-raku-bot> <stevied#8273> i got another little problem Im stuck on:

[18:11] <discord-raku-bot> <stevied#8273> ```

[18:11] <discord-raku-bot> <stevied#8273>         for $section<code>.Array {

[18:11] <discord-raku-bot> <stevied#8273>             $_>>.trim;

[18:11] <discord-raku-bot> <stevied#8273>             das-new $_[0], $_[1], $_[2];

[18:11] <discord-raku-bot> <stevied#8273>         }

[18:11] <discord-raku-bot> <stevied#8273> ```

[18:12] <thundergnat> Maybe List::Divvy would be usable? (Shameless plug)

[18:12] <thundergnat> won't work in Camelia but: use List::Divvy; my $list = ^‚àû; print $list.&bounded(10**($_-1), 10**$_)[^5].gist for 1..6;

[18:12] <thundergnat> yields: (1 2 3 4 5)(10 11 12 13 14)(100 101 102 103 104)(1000 1001 1002 1003 1004)(10000 10001 10002 10003 10004)(100000 100001 100002 100003 100004) locally

[18:13] <discord-raku-bot> <stevied#8273> how do I send that last line without having to send separate args?

[18:13] <discord-raku-bot> <stevied#8273> I tried .flat but that sends a sequence

[18:13] <thundergnat> https://raku.land/zef:thundergnat/List::Divvy

[18:14] <thundergnat>  das-new .[0,1,2]; maybe?

[18:15] <discord-raku-bot> <Nemokosch#9980> is it 3 long?

[18:15] <discord-raku-bot> <stevied#8273> for now, but would be nice to be able to grow it to accept additional elements if necessary

[18:15] <discord-raku-bot> <Nemokosch#9980> okay but you want them all, right?

[18:17] <discord-raku-bot> <Nemokosch#9980> seems to me |$_ would do the trick

[18:18] <discord-raku-bot> <stevied#8273> tried that, gives me an error: `Type check failed in binding to parameter '$code'; expected Str but got Slip (slip("1, 2;", "This ...)`

[18:19] <discord-raku-bot> <stevied#8273> oh, maybe because the .trim does something I'm not expecting

[18:19] <discord-raku-bot> <stevied#8273> nope, taking out .trim doesn't work

[18:19] <discord-raku-bot> <Nemokosch#9980> well, what is this das-new?

[18:19] <discord-raku-bot> <Nemokosch#9980> because `say |$_` worked for me as expected

[18:19] <discord-raku-bot> <stevied#8273> `sub das-new(Str:D $code, Str $description = Str, Str $explanation = Str ) `

[18:20] <thundergnat> If das-new wants a string you have to give it a string

[18:20] <thundergnat> try das-new .gist;

[18:21] <discord-raku-bot> <Nemokosch#9980> okay but it could take it out from that slip, lol

[18:21] <discord-raku-bot> <stevied#8273> it is a string

[18:21] <discord-raku-bot> <Nemokosch#9980> "1, 2;"

[18:22] <discord-raku-bot> <stevied#8273> I don't get it. `das-new $_[0], $_[1], $_[2];` works

[18:22] <discord-raku-bot> <Nemokosch#9980> I noticed that .Slip and | don't behave the same

[18:22] <discord-raku-bot> <Nemokosch#9980> but | seemed to work for function calls, unlike .Slip

[18:22] <thundergnat> or maybe  das-new .flat;

[18:23] <discord-raku-bot> <stevied#8273> tried it

[18:23] <discord-raku-bot> <Nemokosch#9980> that won't unpack for sure

[18:23] <discord-raku-bot> <stevied#8273> ok, got it working by removing the parens: `das-new !$_`

[18:23] <discord-raku-bot> <stevied#8273> huh

[18:23] <discord-raku-bot> <Nemokosch#9980> not with the exclamation mark I hope...

[18:23] <discord-raku-bot> <Nemokosch#9980> üòÑ

[18:23] <discord-raku-bot> <stevied#8273> oh, whoops

[18:24] <discord-raku-bot> <Nemokosch#9980> that would be harsh

[18:24] <discord-raku-bot> <stevied#8273> ok, got it working by removing the parens: `das-new |$_`

[18:24] <discord-raku-bot> <stevied#8273> ugh, ok, it was the space between the function name and the parens

[18:24] <discord-raku-bot> <Nemokosch#9980> that's important indeed

[18:25] <discord-raku-bot> <Nemokosch#9980> blah(x) and blah (x) aren't the same call..

[18:25] <discord-raku-bot> <stevied#8273> works with parens and no space: das-new(|$_);

[18:25] <discord-raku-bot> <stevied#8273> right

[18:25] <discord-raku-bot> <Nemokosch#9980> I mean maybe with one argument they are but yes

[18:25] <discord-raku-bot> <Nemokosch#9980> the first type of paren is for the function call, the second is just for the data

[18:25] <discord-raku-bot> <Nemokosch#9980> these features are like double-edged swords tbh

[18:26] <discord-raku-bot> <Nemokosch#9980> you need to be really wary of whitespace

[18:26] <discord-raku-bot> <Nemokosch#9980> like what I noticed half an hour ago

[18:27] <discord-raku-bot> <Nemokosch#9980> if 0 { say 'End of the world'; } say 'Just kidding';

[18:27] <discord-raku-bot> <Nemokosch#9980> will fail

[18:27] <discord-raku-bot> <stevied#8273> yeah, one of those things that I'm focused on solving one problem I didn't think of the obvious problem

[18:27] <discord-raku-bot> <Nemokosch#9980> because that damn block actually wants a semicolon, like in shell...

[18:27] <discord-raku-bot> <Nemokosch#9980> so a non-terminal block will almost certainly be ugly

[18:29] <discord-raku-bot> <Nemokosch#9980> a related thing: blocks will imply the semicolon at the end of the line, even if they are inside a method call...

[18:29] <discord-raku-bot> <Nemokosch#9980> @stuff.map: -> $a, $b { $a + $b }

[18:29] <discord-raku-bot> <Nemokosch#9980>       .say

[18:29] <discord-raku-bot> <Nemokosch#9980> will not be what you wanted

[18:30] <discord-raku-bot> <Nemokosch#9980> if you add `andthen` inbetween, you will get an error that the statement starts with `andthen` out of the blue

[18:32] <discord-raku-bot> <Nemokosch#9980> so I think if somebody doesn't want to spend too much time on these nuisances, it's better to use some mainstream convention

[18:32] <discord-raku-bot> <Nemokosch#9980> function calls with parens immediately after the function name

[18:32] <discord-raku-bot> <Nemokosch#9980> method calls similarly

[18:32] <discord-raku-bot> <Nemokosch#9980> blocks on end of lines

[19:40] <jgaz> I have two arrays, a really big one and a smaller one of 5 or 10 elements. How can I easily check to see if the small array exists inside the big array?

[20:28] <discord-raku-bot> <Nemokosch#9980> what counts as "exist inside"?

[20:29] <discord-raku-bot> <Nemokosch#9980> the elements are present? one is a slice of the other?

[20:32] <discord-raku-bot> <Nemokosch#9980> for the former: @small (<=) @big

[20:33] <SmokeMachine> jgaz: something like this? https://glot.io/snippets/gapahyqhto

[20:34] <discord-raku-bot> <Nemokosch#9980> subset operator

[20:34] <discord-raku-bot> <Nemokosch#9980> for the latter, I would pick

[20:34] <discord-raku-bot> <Nemokosch#9980> `@big ~~ (**, |@small, **)`

[20:34] <discord-raku-bot> <Nemokosch#9980> put it into backticks because markdown is triggering me xd

[20:36] <discord-raku-bot> <Nemokosch#9980> hm... is there something wrong with the smartmatch here?

[20:36] <discord-raku-bot> <Nemokosch#9980> it seems so much simpler it's overwhelming üòÖ

[20:36] <jgaz> Thanks, Nemokosch, I'll give that a try.

[20:36] <SmokeMachine> Great solution Nemokosch!

[20:37] <Util> Easy but inefficient: 

[20:37] <jgaz> I assume `()` gives everything a List context. What do the two pairs of asterisks and the pipe do?

[20:37] <Util> @big.join("\0").contains( @small.join("\0") );

[20:37] <Util> Easier but still inefficient, and also buggy if elements can contain spaces: 

[20:37] <Util> @big.Str.contains( ~@small );

[20:37] <Util> Better:

[20:37] <Util> my List $L = @small.List;

[20:37] <Util> my Pair $size = @small.elems => (1 - @small.elems);

[20:37] <Util> @big.rotor($size).first(* eqv $L).defined;

[20:37] <Util> # May be much more efficient, depending on how many places the first element of @small occurs in @big.

[20:37] <Util> @big.grep(:k, { $_ eq @small[0] }).first({ @big.skip($_).head(+@small).cache eqv $L }).defined

[20:44] <discord-raku-bot> <Nemokosch#9980> I would be curious how the smartmatch is implemented

[20:44] <discord-raku-bot> <Nemokosch#9980> jgaz: the parens actually account for the right precedence and pretty much that's about it

[20:45] <discord-raku-bot> <Nemokosch#9980> the pipe unpacks the elements

[20:46] <jgaz> Ah

[20:46] <discord-raku-bot> <Nemokosch#9980> and ** is the so-called HyperWhatever here

[20:46] <discord-raku-bot> <Nemokosch#9980> https://docs.raku.org/type/HyperWhatever

[20:46] <discord-raku-bot> <Nemokosch#9980> basically it says "some random elements" in smartmatching context

[20:48] <discord-raku-bot> <Nemokosch#9980> whereas the single asterisk Whatever would mean exactly one element

[20:57] <discord-raku-bot> <gfldex#8222> <@297037173541175296> my shot at a fancy `batch`: https://gist.github.com/e28992d7d85451ed669e7942f0b27e30

[20:59] <jgaz> Nemokosch: I can confirm that works and it's reasonably performant against an array 8kB in length.

[21:00] <discord-raku-bot> <Nemokosch#9980> ü•≥

[21:01] <jgaz> Thanks a lot for the help. It was driving me a little crazy.

[21:19] *** jgaz left
[21:28] <discord-raku-bot> <stevied#8273> anyone know how I can list files in the `resources` directory in a module? is it possible?

[21:39] <guifa> No, it's not

[21:39] <guifa> The idea is that all resources should be known at compile time

[21:39] <guifa> Or rather, not at compile time, but at development time

[21:42] <discord-raku-bot> <stevied#8273> ok. so what's a good way to store text files? Each text file in the module will contain a "lesson". The number of lesson will grow over time and I want to gradually add them to the module.

[21:42] <discord-raku-bot> <stevied#8273> should I just dump them into a directory in lib?

[21:44] <discord-raku-bot> <stevied#8273> and then I would use the $?DISTRIBUTION hash to find and load them?

[21:46] <discord-raku-bot> <stevied#8273> ok, yeah, looks like that works

[22:01] <guifa> That's one way.  I just have a script for Intl::CLDR that processes each one, creates resources/languages.txt that's a newline delimited file that I can use to know which languages are available

[22:03] <guifa> actually, I take that back.  I don't think that $?DISTRIBUTION is supposed to provide introspectable IO::Path directories

[22:42] *** Nemokosch joined
[22:55] *** Nemokosch left
[22:55] <discord-raku-bot> <stevied#8273> when you say "not supposed to provide," what do you mean exactly?

[22:56] <discord-raku-bot> <stevied#8273> it seems to work fine.

[23:05] *** thundergnat left
[23:38] <discord-raku-bot> <Util#9950> <@195453211409121280> I am late to the conversation, but I am confused by the use of Iterator in that Gist. Am I missing some corner-case? Any of these three look simpler, to my eye:  https://gist.github.com/Util/efc065591a31156afca70ccc474c9959

