[00:51] *** jaguart joined
[01:16] <discord-raku-bot> <jsef5#7993> Quick question, is there a way to make a global variable between files

[01:16] <discord-raku-bot> <jsef5#7993> ```perl

[01:16] <discord-raku-bot> <jsef5#7993> use lib ‚Äú.‚Äù;

[01:16] <discord-raku-bot> <jsef5#7993> use BL;

[01:16] <discord-raku-bot> <jsef5#7993> use BLActions;

[01:16] <discord-raku-bot> <jsef5#7993> sub MAIN($program-name) {

[01:16] <discord-raku-bot> <jsef5#7993>     my $code = $program-name.IO.slurp();

[01:16] <discord-raku-bot> <jsef5#7993>     $code = $code.subst(/\n/, " ", :g);

[01:16] <discord-raku-bot> <jsef5#7993>     my @tokens = split(' ', $code);

[01:16] <discord-raku-bot> <jsef5#7993>     loop (my $idx = 0; $idx < (elems @tokens); $idx++) {

[01:16] <discord-raku-bot> <jsef5#7993>         my $cword = @tokens[$idx];

[01:16] <discord-raku-bot> <jsef5#7993>         my $res = BL.parse($cword, :actions(BLActions));

[01:16] <discord-raku-bot> <jsef5#7993>         say BLActions.$sp;

[01:16] <discord-raku-bot> <jsef5#7993>         if ! $res and $cword != '' {

[01:16] <discord-raku-bot> <jsef5#7993>             say "\nError occured on parsing word '$cword'";

[01:45] <discord-raku-bot> <Rogue#2017> declare it with `our` instead of `my`

[01:59] <discord-raku-bot> <jsef5#7993> One more thing, how would i match spaces in tokens?

[01:59] <discord-raku-bot> <jsef5#7993> ```perl

[01:59] <discord-raku-bot> <jsef5#7993> token str_ {

[01:59] <discord-raku-bot> <jsef5#7993>         \"^\w+( +\w+)\"

[01:59] <discord-raku-bot> <jsef5#7993>     }

[01:59] <discord-raku-bot> <jsef5#7993> ```

[01:59] <discord-raku-bot> <jsef5#7993> this doesnt seem to work

[01:59] <discord-raku-bot> <jsef5#7993> quantifier quantifies nothing

[01:59] <discord-raku-bot> <jsef5#7993> One more thing, how would i match something in between quotes including spaces spaces in tokens?

[01:59] <discord-raku-bot> <jsef5#7993> ```perl

[01:59] <discord-raku-bot> <jsef5#7993> token str_ {

[01:59] <discord-raku-bot> <jsef5#7993>         \"^\w+( +\w+)\"

[02:04] <discord-raku-bot> <Nemokosch#9980> this seems weird enough

[02:05] <discord-raku-bot> <Nemokosch#9980> what are you using the caret for?

[02:06] <discord-raku-bot> <jsef5#7993> not sure actually, found that online, settled on this which i wrote 

[02:06] <discord-raku-bot> <jsef5#7993> ```perl

[02:06] <discord-raku-bot> <jsef5#7993>     token str_ {

[02:06] <discord-raku-bot> <jsef5#7993>         \"([^\"]*)\"

[02:06] <discord-raku-bot> <jsef5#7993>     }

[02:06] <discord-raku-bot> <jsef5#7993> ```

[02:07] <discord-raku-bot> <Nemokosch#9980> okay, so basically: a quotation mark, than zero or more something else, then a quotation mark

[02:07] <discord-raku-bot> <Nemokosch#9980> okay, so basically: a quotation mark, then zero or more something else, then a quotation mark

[02:07] <discord-raku-bot> <jsef5#7993> yes

[02:08] <discord-raku-bot> <jsef5#7993> using it for this kind of use case

[02:08] <discord-raku-bot> <jsef5#7993> ```

[02:08] <discord-raku-bot> <jsef5#7993> "Hello world!" print

[02:08] <discord-raku-bot> <jsef5#7993> ```

[02:08] <discord-raku-bot> <jsef5#7993> im working on parsing ``"Hello world!"``

[02:08] <discord-raku-bot> <Nemokosch#9980> seems fair enough; I think it could work with non-greedy asterisk as well

[02:09] <discord-raku-bot> <jsef5#7993> Now im having another issue

[02:09] <discord-raku-bot> <jsef5#7993> ```

[02:09] <discord-raku-bot> <jsef5#7993> Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èè\"Hello' (indicated by ‚èè)

[02:09] <discord-raku-bot> <jsef5#7993>   in sub MAIN at bl.raku line 13

[02:09] <discord-raku-bot> <jsef5#7993>   in block <unit> at bl.raku line 4

[02:10] *** discord-raku-bot left
[02:10] *** discord-raku-bot joined
[02:10] <discord-raku-bot> <Nemokosch#9980> m: dd "hello world!" ~~ / \" (.*) \" /

[02:10] <discord-raku-bot> <Nemokosch#9980> bruh

[02:12] <discord-raku-bot> <Nemokosch#9980> I forgot the frugal marker itself

[02:12] <discord-raku-bot> <Nemokosch#9980> m: dd "hello world!" ~~ / " (.*?) " /

[02:12] <discord-raku-bot> <Nemokosch#9980> m: dd "hello world!" ~~ / \" (.*?) \" /

[02:12] <discord-raku-bot> <jsef5#7993> lol

[02:12] <discord-raku-bot> <Nemokosch#9980> now that should be more like it

[02:12] <discord-raku-bot> <Nemokosch#9980> oh okay, now only the input was wrong

[02:13] <discord-raku-bot> <Nemokosch#9980> m: dd '"hello world!"' ~~ / \" (.*?) \" /

[02:14] <discord-raku-bot> <Nemokosch#9980> oh yeah

[02:14] <discord-raku-bot> <Nemokosch#9980> ```/ \" (.*?) \" /```

[02:14] <discord-raku-bot> <Nemokosch#9980> $cword != ""

[02:14] <discord-raku-bot> <Nemokosch#9980> suspicious

[02:14] <discord-raku-bot> <jsef5#7993> yea...

[02:14] <discord-raku-bot> <Nemokosch#9980> != converts to numeric

[02:14] <discord-raku-bot> <Nemokosch#9980> I doubt that's what you want

[02:16] <discord-raku-bot> <jsef5#7993> it does??

[02:16] <discord-raku-bot> <Nemokosch#9980> yep

[02:16] <discord-raku-bot> <jsef5#7993> woopsies

[02:16] <discord-raku-bot> <Nemokosch#9980> I wish the compiler at least complained when one of the operands is a hardcoded string constant

[02:16] <discord-raku-bot> <Nemokosch#9980> I actually don't like the empty string to zero conversion, I know it's common but it's still bad

[02:17] <discord-raku-bot> <Nemokosch#9980> for string comparison, you would use ne

[02:17] <discord-raku-bot> <jsef5#7993> ```perl

[02:17] <discord-raku-bot> <jsef5#7993>         if not $res and $cword ne "" {

[02:17] <discord-raku-bot> <jsef5#7993>             say "\nError occured on parsing word '$cword'";

[02:17] <discord-raku-bot> <jsef5#7993>             exit 1;

[02:17] <discord-raku-bot> <jsef5#7993>         }

[02:17] <discord-raku-bot> <jsef5#7993> ```

[02:17] <discord-raku-bot> <Nemokosch#9980> eq and ne are the string operators

[02:18] <discord-raku-bot> <jsef5#7993> also

[02:18] <discord-raku-bot> <jsef5#7993> when splitting, how would i exclude the things in the quotes

[02:18] <discord-raku-bot> <Nemokosch#9980> what would that mean ü§î

[02:18] <discord-raku-bot> <jsef5#7993> cause yknow like

[02:18] <discord-raku-bot> <jsef5#7993> ```perl

[02:18] <discord-raku-bot> <jsef5#7993> my @tokens = split(' ', $code);

[02:18] <discord-raku-bot> <jsef5#7993> ```

[02:18] <discord-raku-bot> <jsef5#7993> I would not like to split 

[02:18] <discord-raku-bot> <jsef5#7993> "Hello world"

[02:18] <discord-raku-bot> <jsef5#7993> into ``"Hello`` and ``world"``

[02:18] <discord-raku-bot> <Nemokosch#9980> üò¨

[02:20] <discord-raku-bot> <Nemokosch#9980> I'm not familiar with Raku grammars but the feature could be useful here

[02:20] <discord-raku-bot> <Nemokosch#9980> also, maybe comb is more useful for you here

[02:20] <discord-raku-bot> <jsef5#7993> how would i use comb in this situation

[02:20] <discord-raku-bot> <Nemokosch#9980> split operates like "what are the separators", comb operates like "what do I want to get"

[02:21] <discord-raku-bot> <jsef5#7993> like, ```^(\"([^\"]*)\")``` exlude that

[02:21] <discord-raku-bot> <jsef5#7993> and split by w+

[02:22] <discord-raku-bot> <Nemokosch#9980> I think there are word markers

[02:24] <discord-raku-bot> <Nemokosch#9980> so I'm thinking of something like

[02:25] <discord-raku-bot> <Nemokosch#9980> match a) either <<words>> that don't start with a quotation mark

[02:26] <discord-raku-bot> <Nemokosch#9980> b) or quoted strings

[02:26] <discord-raku-bot> <Nemokosch#9980> and comb them all

[02:26] <discord-raku-bot> <Nemokosch#9980> I don't actually know how " is treated, like is it a part of the word or not

[02:26] <discord-raku-bot> <Nemokosch#9980> hopefully it is

[02:28] <discord-raku-bot> <Nemokosch#9980> okay, seems like word boundaries just drop quotation marks, then we have to make a little change

[02:28] <discord-raku-bot> <Nemokosch#9980> rather than going for <<words>>, we should go for stuff that is preceded and followed by a space

[02:29] <discord-raku-bot> <Nemokosch#9980> so lookarounds <?after //> and <?before //>

[02:29] <discord-raku-bot> <jsef5#7993> Why would i need that

[02:29] <discord-raku-bot> <jsef5#7993> the code language is similar to forth

[02:30] <guifa> okay lemme make sure I get what you want to match

[02:30] <guifa> given a string, you want to stuff between quotes?

[02:30] <discord-raku-bot> <Nemokosch#9980> that's what you said you wanted

[02:30] <discord-raku-bot> <Nemokosch#9980> xd

[02:30] <discord-raku-bot> <jsef5#7993> wait, but why would i need to check for spaces

[02:30] <discord-raku-bot> <jsef5#7993> is there a way to make word boundries not drop quotes

[02:30] <discord-raku-bot> <Nemokosch#9980> maybe that's why?

[02:32] <guifa> you can have word boundries not drop quotes by adjustng the definition for the <wb> token

[02:32] <discord-raku-bot> <jsef5#7993> guifa: I want to split everything by a space, except for quoted strings something like this

[02:32] <discord-raku-bot> <jsef5#7993> ```

[02:32] <discord-raku-bot> <jsef5#7993> "Hello world" top print

[02:32] <discord-raku-bot> <jsef5#7993> ```

[02:32] <discord-raku-bot> <jsef5#7993> Would split into ["\"Hello world\"", "top", "print"]

[02:34] <guifa> okay, for that you'll need to use an alternation

[02:34] <guifa> <quoted> || <not-quoted>

[02:34] <discord-raku-bot> <Nemokosch#9980> am I cool? okay, I decided that I am

[02:34] <discord-raku-bot> <Nemokosch#9980> :DD

[02:34] * guifa has to go afk but will be back

[02:35] <discord-raku-bot> <jsef5#7993> you are very cool

[02:36] <discord-raku-bot> <Nemokosch#9980> discord has this filthy tendency of hiding backslashes from messages in the name of escaping (but the bot can see them)

[02:36] <discord-raku-bot> <Nemokosch#9980> m: dd '"Hello world" top print'.comb: /[<?after ^^|' '> .+? <?before ' '|$$>]|[\" .*? \"]/

[02:38] <discord-raku-bot> <Nemokosch#9980> and now I need to go to sleep

[02:39] <discord-raku-bot> <Nemokosch#9980> bb

[02:41] <discord-raku-bot> <jsef5#7993> bb

[02:53] <discord-raku-bot> <Jaguart#5082> @jsef5#7993 what does the text you are parsing look like? You change  \n to space and then split by space, to extract words and quoted phrases... and you want to change the loop $idx in another module... it's hard to figure out advice when we don't know what your input  or goal is. Also the BL grammar is not clear. One thing to note is that some of your snippets look like Perl regex syntax - Raku rege

[02:53] <discord-raku-bot> <Jaguart#5082> m: dd 'this is wordy "and quoted" with "other things too" tadah"' ~~ m:g/ \" .*? \" || \w+ /

[02:55] <discord-raku-bot> <Jaguart#5082> m: say ('this is wordy "and quoted" with "other things too" tadah"' ~~ m:g/ \" .*? \" || \w+ /).gist;

[03:06] <discord-raku-bot> <Jaguart#5082> so the left is your input data, and the numbers on the right are the output?

[03:08] <discord-raku-bot> <jsef5#7993> yea

[03:08] <discord-raku-bot> <jsef5#7993> i put comments to explain what was being outputted

[03:08] <discord-raku-bot> <jsef5#7993> im writing a small stack based language

[03:12] <discord-raku-bot> <Jaguart#5082> why do you collapse all the \n - dont they have meaning too?

[03:12] <discord-raku-bot> <jsef5#7993> no

[03:12] <discord-raku-bot> <jsef5#7993> it is all split into "words"

[03:12] <discord-raku-bot> <jsef5#7993> similar to forth

[03:12] <discord-raku-bot> <Jaguart#5082> ok - well regex dont care about \n so you dont need to replace them with space - \s+ means spaces or newlines

[03:14] <discord-raku-bot> <Jaguart#5082> this regex would work on a string even when it contains \n

[03:14] <discord-raku-bot> <Jaguart#5082> m:  say ('this is wordy "and quoted" with "other things too" + tadah"' ~~ m:g/ \" .*?  \" ||  <[\w+-]>+ /).gist

[03:14] <discord-raku-bot> <Jaguart#5082> You can identify strings - they start and end with \" - you can use $str.chars-2 to get the length

[03:14] <discord-raku-bot> <jsef5#7993> ah ok

[03:16] <discord-raku-bot> <Jaguart#5082> the bit that says <[ \w + - ]>+ means 1-or-more word characters, or + or - characters

[03:16] <discord-raku-bot> <Jaguart#5082> you can add in any other non-alpha chars you need inside the [ ]

[03:20] <discord-raku-bot> <jsef5#7993> alright thanks

[03:24] <discord-raku-bot> <Jaguart#5082> you can use raku style loops too like this:

[03:25] <discord-raku-bot> <Jaguart#5082> m: for 'this is wordy "and quoted" with "other things too" + tadah"' ~~ m:g/ \" .*?  \" ||  <[\w+-]>+ / -> $m {  say $m.Str; }

[03:26] <discord-raku-bot> <Jaguart#5082> just replace the string before the ``~~`` with your ``slurp``

[03:32] <discord-raku-bot> <Jaguart#5082> let me know if you want a detailed breakdown of the regex

[04:11] <discord-raku-bot> <jsef5#7993> mk

[04:57] <discord-raku-bot> <Jaguart#5082> oh - wanting to do some simple stuff in parallel  ``race`` - be still my beating heart - fantastic üôÇ

[04:59] <discord-raku-bot> <Jaguart#5082> this on concurrency üëèüèº  - http://jnthn.net/papers/2018-conc-par-8-ways.pdf

[05:22] <discord-raku-bot> <jsef5#7993> That reminds me, is there a way to compile raku to an object file so i can link it with asm and write on os :)

[07:18] <discord-raku-bot> <jsef5#7993> ```

[07:18] <discord-raku-bot> <jsef5#7993> 5 declare fnum

[07:18] <discord-raku-bot> <jsef5#7993> 10 declare snum

[07:18] <discord-raku-bot> <jsef5#7993> fetch snum get top

[07:18] <discord-raku-bot> <jsef5#7993> fetch fnum get top

[07:18] <discord-raku-bot> <jsef5#7993> / top

[07:18] <discord-raku-bot> <jsef5#7993> declare fnum

[07:18] <discord-raku-bot> <jsef5#7993> fetch fnum get top

[07:18] <discord-raku-bot> <jsef5#7993> ```

[07:18] <discord-raku-bot> <jsef5#7993> got something like this to work

[07:24] <discord-raku-bot> <jsef5#7993> this displays

[07:24] <discord-raku-bot> <jsef5#7993> ```

[07:24] <discord-raku-bot> <jsef5#7993> 10 5 2 2

[07:24] <discord-raku-bot> <jsef5#7993> ```

[07:24] <discord-raku-bot> <jsef5#7993> as it should

[08:24] <discord-raku-bot> <Jaguart#5082> Is there a Hash implementation in Raku that maintains the declaration order, like PHP associative arrays?

[09:23] <CIAvash> Jaguart: there is https://raku.land/zef:lizmat/Hash::Ordered

[10:11] <jaguart> @CIAvash - thank you

[10:15] *** frost joined
[11:36] *** frost left
[12:18] *** frost joined
[12:52] *** frost31 joined
[12:52] *** frost left
[13:20] *** razetime joined
[14:16] *** frost31 left
[14:26] *** frost joined
[14:26] *** frost left
[14:39] <SmokeMachine> m: say '"Hello world" top print' ~~ /['"' ~ '"' .* || \w+]*/

[14:39] <camelia> rakudo-moar 967a130ff: OUTPUT: ¬´ÔΩ¢"Hello world"ÔΩ£‚ê§¬ª

[14:42] <SmokeMachine> m: say '"Hello world" top print' ~~ /['"' ~ '"' .* || \w+]* %% <.ws>/

[14:42] <camelia> rakudo-moar 967a130ff: OUTPUT: ¬´ÔΩ¢"Hello world" top printÔΩ£‚ê§¬ª

[15:01] *** A26F64 joined
[16:58] <A26F64> A question about using exceptions defined in `use`d modules.¬† I `use JSON::Tiny;`, which will throw JSON::Tiny::X::JSON::Tiny::Invalid (according to `.^name`).¬† That exception is defined within JSON-Tiny-1.0/.../lib/JSON/Tiny.pm.¬† If I `CATCH { when JSON::Tiny::X::JSON::Tiny::Invalid { ... } }` Raku doesn't recognize it: "Function

[16:58] <A26F64> 'JSON::Tiny::X::JSON::Tiny::Invalid' needs parens to avoid gobbling block (or perhaps it's a class that's not declared or available in this scope?)".¬† Trying to `use` that exception namespace or variations on it also fails (Raku cannot find it anywhere, even though it does find `JSON::Tiny` itself).¬† Is there a way to catch that particular

[16:58] <A26F64> exception?

[17:01] <MasterDuke> well, you should be able to do something like `when .^name eq 'JSON::Tiny::X::JSON::Tiny::Invalid' { ... }`

[17:05] <A26F64> That does work; thank you.¬† I hadn't considered that indirect route: it does seem like we should be able to identify the exception directly, though, doesn't it?¬† Though I notice that JSON::Tiny's META6 does not `provide` that exception. . . .

[17:06] <MasterDuke> i wonder if you can do something like `when ::('JSON::Tiny::X::JSON::Tiny::Invalid')`, which is still indirect, but maybe one step less hacky

[17:07] <A26F64> That method doesn't catch that exception.

[17:08] *** razetime left
[17:09] *** razetime joined
[17:10] <MasterDuke> yeah...by .^name is all i'm coming up with right now

[17:13] *** razetime left
[17:14] *** razetime joined
[17:14] *** razetime left
[17:14] *** razetime joined
[17:15] *** razetime left
[17:15] <A26F64> No problem.¬† I said that the META6 doesn't `provide` that exception; am I correct in thinking that it should be available since it is defined as a class within JSON-Tiny-1.0/.../lib/JSON/Tiny.pm, which is of course `provide`d?¬† Of course it's apparently not but I'd assume that it's just brought in with Tiny.pm.

[17:28] <MasterDuke> it might need to have an `is export` to be automatically available

[19:31] *** A26F64 left
[21:14] *** discord-raku-bot left
[21:14] *** discord-raku-bot joined
[23:30] <jaguart> I though the FQN was X::JSON::Tiny::Invalid - i.e. not prefixed as you have it?

[23:30] <jaguart> It's declared in JSON::Tiny.pm

[23:32] <jaguart> So don't you mean ``CATCH { when X::JSON::Tiny::Invalid { ... } }``

