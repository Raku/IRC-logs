[01:30] *** m_athias left
[01:31] *** m_athias joined
[03:19] *** deoac left
[06:42] *** kjp left
[06:47] *** kjp joined
[09:44] <jaguart> argh - I've just discovered that the conference day1 was yesterday! I thought is was Sat-Sun, and the email arrived saying 15:00 UTC... so I assumed Sat 16:00BST for me. :( will have to watch it on rewind

[09:45] <jaguart> oh wait - today is already Sunday :o

[09:45] <jaguart> I think I'm lost in time...

[09:50] <discord-raku-bot> <Nahita> :p

[09:59] <jaguart> m: say Version.new('1.2.3').Str

[09:59] <camelia> rakudo-moar 10feda116: OUTPUT: «1.2.3␤»

[09:59] <jaguart> m: say Version.new('1.2.3').gist

[09:59] <camelia> rakudo-moar 10feda116: OUTPUT: «v1.2.3␤»

[10:00] <jaguart> m: say Version.new('1.2.3')

[10:00] <camelia> rakudo-moar 10feda116: OUTPUT: «v1.2.3␤»

[10:00] <jaguart> this confused me for a while

[10:01] <jaguart> m: say Version.new('v1.2.3')

[10:01] <camelia> rakudo-moar 10feda116: OUTPUT: «vv.1.2.3␤»

[10:01] <jaguart> m: say Version.new('v1.2.3').parts.join: ' '

[10:01] <camelia> rakudo-moar 10feda116: OUTPUT: «v 1 2 3␤»

[10:29] <lizmat> jaguart: hope you're in sync again now  :-)

[10:30] <jaguart> extra coffee - catching up, 16:00 BST for the next zoom 

[10:31] <discord-raku-bot> <Nemokosch> imma fix your delorean if that helps

[10:41] <jaguart> what would I use in a function signature for Int or Str-that-looks-like-Int, e.g. 0 or '0'

[10:46] <lizmat> m: sub a(Cool:D $a) { dd +$a }; a 42; a "666"

[10:46] <camelia> rakudo-moar 10feda116: OUTPUT: «42␤666␤»

[10:46] <lizmat> jaguart ^^

[10:46] <jaguart> That's Cool ;) thanks 

[10:47] <lizmat> this will also cover Num / Rat / Complex 

[10:49] <discord-raku-bot> <Nahita> also Lists and Hashes right

[10:49] <discord-raku-bot> <Nahita> but `Int:D()` also accepts Lists and Hashes

[10:51] <jaguart> nice :)

[10:51] <jaguart> m:  sub x(Cool $a){ say $a,' is ',$a.^name };x(1);x('1');x('1.1.1');

[10:51] <camelia> rakudo-moar 10feda116: OUTPUT: «1 is Int␤1 is Str␤1.1.1 is Str␤»

[10:51] <discord-raku-bot> <Nahita> maybe `sub f($arg where * %% 1) { ... }`

[10:53] <discord-raku-bot> <Nahita> maybe `sub f($arg where * %% 1) { ... }` but this also accepts lists and hashes

[10:55] <discord-raku-bot> <Nahita> ok my overkill is `sub f(Int:D() $arg where {($_ ~~ Str|Int) && ($_ %% 1)}) { $arg.say }`

[10:58] <discord-raku-bot> <Nahita> in an attempt to "need an Int or Str which in numeric context equals to itself when decimals are removed; then coerce to integer"

[11:05] <jaguart> Nahita - thanks 😮

[11:10] <discord-raku-bot> <Nahita> ok my overkill is `sub f($arg where {($_ ~~ Str|Int) && ($_ %% 1)}) { $arg.say }`

[11:10] <discord-raku-bot> <Nahita> in an attempt to "need an Int or Str which in numeric context equals to itself when decimals are removed"

[11:10] <jaguart> I asked yesterday about Moo lazy builders -> and was pointed to raku.land(Attribute::Lazy) - which is fab, so...

[11:11] <jaguart> was hoping for the Moo handles -> qw/ list of methods /; - is there sugary syntax to proxy/delegate methods in Raku?

[11:12] <jaguart> e.g. has $meta will lazy { META6.new( file => './META6.json' ) } handles qw/ version /;

[11:14] <jaguart> which lazy-builds self.$meta and then passes calls to self.version through to $meta.version

[11:15] <jaguart> Moo also does method aliasing by using a hash instead of a list - e.g. handles { version => ver, major => primary, } etc.

[11:15] <SmokeMachine> m: class C { has Int $.a handles < is-prime >= 42 }; say C.new.is-prime

[11:15] <camelia> rakudo-moar 10feda116: OUTPUT: «False␤»

[11:16] <jaguart> Smokin! thank you

[11:16] <CIAvash> https://docs.raku.org/language/typesystem#index-entry-handles_trait-handles

[11:16] <jaguart> sorry - will search docs first next time!

[11:19] <CIAvash> it's not a problem, there are just more examples there

[12:46] <jaguart> I got caught by Attribute::Lazy being in raku.land and searched there, without thinking to go back to the docs.

[12:48] <jaguart> Anyone know about latest spec for META6.json - I see that https://github.com/jonathanstowe/META6 talks about 'raku-version' but that the META6 package in zef has slightly tweaked key 'raku', and the docs all talk about 'perl'...

[12:48] <lizmat> I just go by with what App::Mi6 gives me on a new module

[12:48] <lizmat> :-)

[12:49] <jaguart> Yeah - I've been using that too - but if I use META6 to load, read and write the META6.json I get a key-change

[12:49] <lizmat> ah, intriguing

[12:50] <lizmat> maybe skaji-san and rabidgravy should get in touch with each other :-)

[12:50] <jaguart> hmmm - does that imply that all jonathanstowes like gravy?

[12:51] <lizmat> you would need to ask them  :-)

[12:52] <jaguart> btw - a huge thank you for all you do for raku - everywhere I look I see your hands 🙏

[13:05] <deadmarshal> What is the equivalent of Perl's ntheory module in Raku?

[13:05] <deadmarshal> https://metacpan.org/pod/ntheory

[13:08] <lizmat> jaguart: you're welcome :-)

[13:08] <lizmat> deadmarshal: I don't think there is a 1-to-1 translation

[13:09] <deadmarshal> lizmat: ok thank u

[13:10] <lizmat> looks like it's no XS, so should be portable relatively easy, I'd say

[13:16] <deadmarshal> What is the reason behind %% operator? cuz one can simply do for example num1 % num2 == 0. 

[13:17] <lizmat> well, the community wanted an operator to represent "is divisible by", and %% is just that

[13:22] <deadmarshal> Seems useless xD

[13:24] <lizmat> usefulness is in the eye of the beholder :-)

[13:24] <CIAvash> I'm sure you write `$x = $x + 1` instead of `$x++`, because you can simply do that

[13:27] <deadmarshal> $x++ situation is different because ++$x and $x++ makes huge difference. but %% not so much

[13:35] <CIAvash> Then I guess you can also go and tell the Go community that their `x++` is useless because there is no `++x` in Go 😀

[13:43] <CIAvash> then there is `+=`, `~=`, `[op]=`, `<=`, `>=` and other useless stuff

[13:43] <discord-raku-bot> <Nahita> m: my @arr = 1..50; (@arr X[%%] (3, 5)).rotor(2).kv.map({($^val<> RZx ("fizz", "buzz")).join or @arr[$^idx]}).say

[13:43] <discord-raku-bot> <Nahita> seems useful to me :p

[13:46] <discord-raku-bot> <Nemokosch> Insane stuff

[13:47] <discord-raku-bot> <Nemokosch> Anyway, if you do anything with arithmetics, you'll appreciate %%

[13:47] <discord-raku-bot> <Nemokosch> Literally, why would you refuse a gift like this

[13:49] <lizmat> m: my @arr = 1..50; (@arr X[%%] (3, 5)).rotor(2).kv.map({($^val<> RZx ("fizz", "buzz")).join or @arr[$^idx]}).say

[13:49] <camelia> rakudo-moar 10feda116: OUTPUT: «(1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizzbuzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizzbuzz 46 47 fizz 49 buzz)␤»

[13:53] <discord-raku-bot> <Nemokosch> Why is the reduction needed?

[14:04] <discord-raku-bot> <Nahita> uh, it's not actually, i guess i tend to write operators in square brackets as normally we do to refer them shortly like `&[*]` instead of `&infix:<*>` so...

[14:04] <discord-raku-bot> <Nahita> to my defense, `X[%%]` looks better than `X%%` :p

[14:26] <discord-raku-bot> <Nemokosch> You can very well be right, I'm not actually sure if it is a reduction in that position

[14:58] *** andm joined
[15:00] <andm> hello, i have string

[15:00] <andm> '[["03","18","1","731","97"],["06","17.6","2","730","97"],["09","18.4","2","730","98"],["12","23.3","4","730","83"],["15","27.6","5","729","60"],]'

[15:01] <andm> is there a way to make raku think it's a raku code?

[15:15] *** deoac joined
[15:16] <guifa_> andm: you can use EVAL (with, of course, all of the security implications that that involves)

[15:16] <guifa_> m: use MONKEY-SEE-NO-EVAL; my $string = '[["03","18","1","731","97"],["06","17.6","2","730","97"],["09","18.4","2","730","98"],["12","23.3","4","730","83"],["15","27.6","5","729","60"],]'; say EVAL $string;

[15:16] <camelia> rakudo-moar 10feda116: OUTPUT: «[[03 18 1 731 97] [06 17.6 2 730 97] [09 18.4 2 730 98] [12 23.3 4 730 83] [15 27.6 5 729 60]]␤»

[15:18] <guifa_> You're required to use `use MONKEY-SEE-NO-EVAL` because of those security implications.

[15:21] <andm> guifa_, yes, it's works, thanks

[15:40] <deadmarshal> CIAvash: that is becuz go itself is useless Xd

[15:42] *** Kaiepi left
[16:26] <CIAvash> deadmarshal: I thought you would like Go, 'cause they share your way of thinking, "why X when you can simply do Y?"

[16:30] <deadmarshal> I like Oberon :D

[16:39] *** Kaiepi joined
[17:00] *** andm left
[18:14] <discord-raku-bot> <Nemokosch> which reiteration of Oberon?

[18:15] <deadmarshal> 07

[18:19] <discord-raku-bot> <Nemokosch> Tbh it looks worse than contemporary Pascal dialects at first sight

[18:19] <deoac> ```

[18:19] <deoac> class Foo {

[18:19] <deoac>     has Int @.bar[5,5];

[18:19] <deoac> }

[18:19] <deoac> ```

[18:19] <deoac> my $x = Foo.new;

[18:19] <deoac> $x.bar[0;0] = 42

[18:20] <discord-raku-bot> <Nemokosch> 😅

[18:20] <deoac> How can I write a postcircumfix operator so

[18:20] <deoac> $x[[0;5]]

[18:20] <deoac> does the same thing

[18:20] <deoac> ?

[18:25] <discord-raku-bot> <Nemokosch> first off, I'd hope if you can do it, you can do it without overriding the operator itself, just overriding the method doing the access

[18:26] <discord-raku-bot> <Nemokosch> AT-KEY that is, had to check

[18:30] <discord-raku-bot> <Nemokosch> do you mind if [0;5] is eventually [0,5] ?

[18:30] <discord-raku-bot> <Nemokosch> I mean, they are literals for the same data

[18:36] <lizmat> only superficially so

[18:36] <lizmat> m: dd [0,1,2,3]

[18:36] <camelia> rakudo-moar 10feda116: OUTPUT: «[0, 1, 2, 3]␤»

[18:36] <lizmat> m: dd [0,1;2,3]

[18:36] <camelia> rakudo-moar 10feda116: OUTPUT: «[(0, 1), (2, 3)]␤»

[18:49] <discord-raku-bot> <Nemokosch> I know I know

[18:49] <discord-raku-bot> <Nemokosch> with this particular data, they are the same, not that , and ; are interchangable

[18:56] <lizmat> oki  :-)

[18:57] <discord-raku-bot> <Nemokosch> do you think I'm in the right with the general idea? 😛

[18:58] <discord-raku-bot> <Kaiepi> the evil way would be to parse `qw`

[19:00] <deoac> No, I don't mind using either a comma or semi-colon

[19:01] <deoac> But when I've used a comma, I get an error: "Partially dimensioned views of shaped arrays not yet implemented. Sorry."

[19:02] <discord-raku-bot> <Nemokosch> no worries, I think it can be "implemented"

[19:16] <discord-raku-bot> <Nemokosch> m: class Foo {    has Int @.bar[5,5];  method AT-KEY(\key) { @.bar[||key] } }; my $x = Foo.new; $x[[0;5]] = 42; dd $x.bar;

[19:16] <discord-raku-bot> <Nemokosch> aaalmost

[19:18] <discord-raku-bot> <Nemokosch> okay, I'm getting an error that I cannot immediately comprehend 😅

[19:22] <discord-raku-bot> <Nemokosch> okay... yes, this would be with {} outside, not []

[19:25] <discord-raku-bot> <Nemokosch> m: use 6.e.PREVIEW; class Foo {    has Int @.bar[5,5];  method AT-KEY(\key) is rw { @.bar[||key] } }; my $x = Foo.new; my @idx = 0;5; $x{@idx} = 42; dd $x.bar;

[19:26] <discord-raku-bot> <Nemokosch> m: use v6.e.PREVIEW; class Foo {    has Int @.bar[5,5];  method AT-KEY(\key) is rw { @.bar[||key] } }; my $x = Foo.new; my @idx = 0;5; $x{@idx} = 42; dd $x.bar;

[19:27] <discord-raku-bot> <Nemokosch> okay, let me dream big...

[19:28] <discord-raku-bot> <Nemokosch> m: use v6.e.PREVIEW; class Foo {    has Int @.bar[5,5];  method AT-KEY(@key) is rw { @.bar[||@key] } }; my $x = Foo.new; $x{[1; 2]} = 42; dd $x.bar;

[19:31] <discord-raku-bot> <Nemokosch> Expected Positional but got Int

[19:31] <discord-raku-bot> <Nemokosch> well, rip me. I have no clue why an Int got passed...

[19:32] <discord-raku-bot> <Nemokosch> my best guess is that some sort of "single argument rule" applies, I don't know though

[19:33] <discord-raku-bot> <Nemokosch> m: use v6.e.PREVIEW; class Foo {    has Int @.bar[5,5];  method AT-KEY(@key) is rw { @.bar[||@key] } }; my $x = Foo.new; $x{([1; 2], )} = 42; dd $x.bar;

[19:34] <discord-raku-bot> <Nemokosch> annoying

[19:34] <discord-raku-bot> <Nemokosch> so the last one worked but it also got quite ugly

[19:34] <discord-raku-bot> <Nemokosch> m: use v6.e.PREVIEW; class Foo {    has Int @.bar[5,5];  method AT-KEY(@key) is rw { @.bar[||@key] } }; my $x = Foo.new; $x{$[1; 2]} = 42; dd $x.bar;

[19:35] <discord-raku-bot> <Nemokosch> deoac: my best attempt probably

[19:35] <discord-raku-bot> <Nemokosch> gotta wait for pros

[19:45] *** Nemokosch joined
[19:45] *** Nemokosch left
[20:10] <discord-raku-bot> <Kaiepi> m:```

[20:10] <discord-raku-bot> <Kaiepi> only postcircumfix:<⟦ ⟧>(Mu \topic, @values is raw) { @values }

[20:10] <discord-raku-bot> <Kaiepi> dd 1⟦[ 2, 3; 4, 5 ]⟧;

[20:10] <discord-raku-bot> <Kaiepi> dd 1⟦( 2, 3; 4, 5 )⟧;

[20:10] <discord-raku-bot> <Kaiepi> ```

[20:10] <discord-raku-bot> <Kaiepi> something along these lines?

[20:12] <discord-raku-bot> <Kaiepi> not sure on how to do it w/o unicode without making it 6 characters

[20:12] <discord-raku-bot> <Kaiepi> something with a signature along these lines?

[20:12] <discord-raku-bot> <Nemokosch> so this is a brand new operator?

[20:13] <guifa_> AT-KEY is for hashy stuff

[20:13] <guifa_> AT-POS is for listy

[20:13] <lizmat> Associative actually

[20:14] <guifa_> hence the -y ;-) 

[20:14] <discord-raku-bot> <Kaiepi> partly. it wraps `[ ]`/`( )`, which does the dirty work with `;`

[20:14] <guifa_> Associative is like.... 6 letters more or something

[20:14] <lizmat> hehe

[20:14] <discord-raku-bot> <Nemokosch> yes, it was associative

[20:14] <discord-raku-bot> <Nemokosch> but I don't think it would have worked with positional

[20:14] <discord-raku-bot> <Nemokosch> hence with []

[20:18] <discord-raku-bot> <Kaiepi> oh i see

[20:18] <discord-raku-bot> <Kaiepi> hold on

[20:32] <discord-raku-bot> <Kaiepi> oh that's cryptic

[20:32] <discord-raku-bot> <Kaiepi> m:```

[20:32] <discord-raku-bot> <Kaiepi> use v6.e.PREVIEW;

[20:32] <discord-raku-bot> <Kaiepi> class Foo does Positional {

[20:32] <discord-raku-bot> <Kaiepi>     has Int @.bar[5;5];

[20:32] <discord-raku-bot> <Kaiepi>     method ASSIGN-POS(+@dimensions) {

[20:32] <discord-raku-bot> <Kaiepi>         @!bar.ASSIGN-POS: |my @[3] = @dimensions

[20:32] <discord-raku-bot> <Kaiepi>     }

[20:32] <discord-raku-bot> <Kaiepi> }

[20:32] <discord-raku-bot> <Kaiepi> my Foo $x .= new;

[20:32] <discord-raku-bot> <Kaiepi> $x[0;0] = 1;

[20:32] <discord-raku-bot> <Kaiepi> say $x;

[20:32] <discord-raku-bot> <Kaiepi> ```

[20:33] <discord-raku-bot> <Kaiepi> it wants dimensioned arguments

[20:34] <discord-raku-bot> <Nahita> m:`​``

[20:34] <discord-raku-bot> <Nahita> class F {

[20:34] <discord-raku-bot> <Nahita>     has @.arr[2;3];

[20:34] <discord-raku-bot> <Nahita>     submethod TWEAK {

[20:34] <discord-raku-bot> <Nahita>         @!arr :=  [[1, 3], [4, 5], [6, -1]];

[20:34] <discord-raku-bot> <Nahita>     }

[20:34] <discord-raku-bot> <Nahita> }

[20:34] <discord-raku-bot> <Nahita> multi sub postcircumfix:<[; ]>(F $obj, @indices) is raw {

[20:34] <discord-raku-bot> <Nahita>     callwith($obj.arr, @indices);

[20:34] <discord-raku-bot> <Nahita>         }

[20:34] <discord-raku-bot> <Nahita> my $f = F.new;

[20:34] <discord-raku-bot> <Nahita>     

[20:34] <discord-raku-bot> <Nahita> say $f[1;1];

[20:34] <discord-raku-bot> <Nahita> say $f[2;0] **= 3;

[20:34] <discord-raku-bot> <Nahita> say $f;

[20:34] <discord-raku-bot> <Nahita> `​``

[20:34] <discord-raku-bot> <Nahita> m: `​``

[20:34] <discord-raku-bot> <Nahita> class F {

[20:34] <discord-raku-bot> <Nahita>     has @.arr[2;3];

[20:34] <discord-raku-bot> <Nahita>     submethod TWEAK {

[20:35] *** discord-raku-bot left
[20:35] *** discord-raku-bot joined
[20:35] <discord-raku-bot> <Nahita> m:```

[20:35] <discord-raku-bot> <Nahita> class F {

[20:35] <discord-raku-bot> <Nahita>     has @.arr[2;3];

[20:35] <discord-raku-bot> <Nahita>     submethod TWEAK {

[20:35] <discord-raku-bot> <Nahita>         @!arr :=  [[1, 3], [4, 5], [6, -1]];

[20:35] <discord-raku-bot> <Nahita>     }

[20:35] <discord-raku-bot> <Nahita> }

[20:35] <discord-raku-bot> <Nahita> multi sub postcircumfix:<[; ]>(F $obj, @indices) is raw {

[20:35] <discord-raku-bot> <Nahita>     callwith($obj.arr, @indices);

[20:35] <discord-raku-bot> <Nahita>         }

[20:35] <discord-raku-bot> <Nahita> my $f = F.new;

[20:35] <discord-raku-bot> <Nahita>     

[20:35] <discord-raku-bot> <Nahita> say $f[1;1];

[20:35] <discord-raku-bot> <Nahita> say $f[2;0] **= 3;

[20:35] <discord-raku-bot> <Nahita> say $f;

[20:35] <discord-raku-bot> <Nahita> ```

[20:37] <discord-raku-bot> <Kaiepi> (shouldn't have `does Positional`)

[20:37] <discord-raku-bot> <Nahita> can these be done with `handles` i'm not sure

[20:38] <discord-raku-bot> <Nahita> i.e., i don't know :p

[20:38] <discord-raku-bot> <Kaiepi> i think that winds up an awkward `FALLBACK`

[20:39] <discord-raku-bot> <Kaiepi> it needs a method name

[20:39] <discord-raku-bot> <Kaiepi> it needs a method name to dispatch to generically

[20:39] <discord-raku-bot> <Kaiepi> a method would need to take a method name to dispatch to generically

[21:43] <deoac> How can you return an l-value?

[21:44] <deoac> That is, I want to modify the variable that's being returned.

[21:45] <discord-raku-bot> <Nemokosch> my code had an example for that as well

[21:45] <discord-raku-bot> <Nemokosch> Nahita's code as well

[21:45] <discord-raku-bot> <Nemokosch> define the function as "is rw" (if its always an lvalue) or "is raw" (if it should be kept as-is)

[21:47] <gfldex> deoac: see: https://docs.raku.org/language/control#index-entry-control_flow__return-rw-return-rw

[21:47] <discord-raku-bot> <Nemokosch> the way I understand it: if you pass a bare value to "is rw", it fails; if you pass it to "is raw", it won't fail but obviously you will only get the bare value back, without a container

[21:51] <deoac> ah, thank you

[22:00] <discord-raku-bot> <Nemokosch> Well we didn't use return so... yeah. 😄 There are two ways now, at least

