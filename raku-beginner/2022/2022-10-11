[01:12] *** jgaz left
[01:32] *** frost joined
[03:02] *** frost left
[03:15] *** razetime joined
[07:26] *** MasterDuke left
[07:45] *** habere-et-disper joined
[07:59] *** dakkar joined
[08:00] *** frost joined
[08:06] <habere-et-disper> Hello everyone \o/

[08:06] <habere-et-disper> I have a working recursion whose implicit base case I don't understand. Too much DWIM -- but then that kind of magic is why I adore raku. Would a rakoon care to unravel it for me? I can post a link or we can try here. :)

[08:42] *** razetime left
[08:58] *** razetime joined
[09:04] <dakkar> habere-et-disper: we can try ☺ give us the link

[09:26] <habere-et-disper> How does this recursion terminate?

[09:26] <habere-et-disper> ~~~raku

[09:26] <habere-et-disper> sub to-roman ( $deca, @units = <

[09:26] <habere-et-disper>     1000 M  900 CM  500 D  400 CD  100 C   90 XC

[09:26] <habere-et-disper>       50 L   40 XL   10 X    9 IX    5 V    4 IV

[09:26] <habere-et-disper>        1 I

[09:26] <habere-et-disper>          >.pairup ) is export {

[09:26] <habere-et-disper>             .value x $deca div .key

[09:26] <habere-et-disper>           ~ to-roman $deca mod .key, @units.skip

[09:26] <habere-et-disper>                                 with @units.head

[09:26] <habere-et-disper> }

[09:26] <habere-et-disper> ~~~

[09:26] <habere-et-disper> The final call I think looks something like `to-roman( 0, () )`. This in turn appears to give us:

[09:26] <habere-et-disper> ~~~raku

[09:26] <habere-et-disper> ().head.value x 0 div ().head.key

[09:26] <habere-et-disper> ~

[09:26] <habere-et-disper> to-roman 0 mod ().head.key, ().skip

[09:26] <habere-et-disper> ~~~

[09:26] *** discord-raku-bot left
[09:26] *** discord-raku-bot joined
[09:27] <dakkar> ().head is Nil

[09:27] <dakkar> therefore, the `with` doesn't execute

[09:28] <dakkar> that whole body is `something-something with @units.head`

[09:28] <lizmat> also, please use a gist  :)

[09:28] <dakkar> if there's no head, nothing happens

[09:28] <discord-raku-bot> <Nemokosch> which makes it work but I'm not sure if I like this design, once again

[09:29] *** frost left
[09:30] <discord-raku-bot> <Nemokosch> the whole type object/Nil/Empty polemy

[09:32] <habere-et-disper> Thanks @dakkar!

[09:33] <discord-raku-bot> <Nemokosch> you know the funny thing is

[09:34] <discord-raku-bot> <Nemokosch> the function itself returns Empty on the terminating call xD

[09:34] <discord-raku-bot> <Nemokosch> that's why you don't get some horrible warning

[09:37] <habere-et-disper> Thank you all for the clarity. I had started to think of `with` as more a nautral language word than having an underlying `if`-like construct.

[09:42] <discord-raku-bot> <Nemokosch> `with` is like `if defined` plus `given`

[09:45] <habere-et-disper> That's helpful. Thank you discord-raku-bot. :)

[09:47] <dakkar> discord-raku-bot is the name of the… bot, that bridges IRC with Discord

[09:48] <dakkar> the person's name (in this case) is Nemokosch

[09:55] <habere-et-disper> I learnt something -- thanks @dakkar. So is there a discord recommendation for raku then?

[09:55] <dakkar> there's a discord server that is bridged here

[09:56] <dakkar> https://raku.org/community/

[10:13] <habere-et-disper> Are there any builtin aliases for the topic variable?

[10:14] <lizmat> no

[10:15] <lizmat> but you can create your own lexically

[10:15] <lizmat> for @a -> $foo { }

[10:27] <dakkar> also `with $something -> $whatever { say $whatever }`, or `given`, or `if`…

[10:30] <dakkar> (also `my $something := $_` may be useful in some cases?)

[10:39] <habere-et-disper> I seem to be able to only do it one way round. I take it this is intentional to avoid double parsing?

[10:39] <habere-et-disper> `with @foo -> $bar { $bar-available }`

[10:39] <habere-et-disper> `$bar-unavailable with @foo -> $bar`

[10:40] <discord-raku-bot> <Nemokosch> it is intentional

[10:41] <discord-raku-bot> <Nemokosch> the former is a pointy block, the latter would be weird as one

[11:00] <dakkar> different explanation: `with $foo` wants a block

[11:01] <dakkar> the block may declare parameters (`{…}` is a block, `-> $thing {…}` is a "pointy block" that declares a single scalar positional parameter)

[11:01] <dakkar> if the block wants a parameter, the topic gets bound to that

[11:01] <dakkar> `with` as a statement modifier (the one you write *after* the statement) does not take a block at all

[11:01] <dakkar> so, there's nowhere to declare parameters, in that case

[11:02] <dakkar> (same for all other constructs that use the same keyword for their block form and their modifier form)

[11:12] <discord-raku-bot> <Nemokosch> same thing, elaborated a bit better 🙂

[11:14] <habere-et-disper> Thank you dakkar. So why do I need the final `given` here:

[11:14] <habere-et-disper> `$phone .= substr: 1 if .chars == 11 and .starts-with: 1 given $phone;`

[11:14] <habere-et-disper> Should it not be able to know from the `.=` what I'm dealing with?

[11:16] <discord-raku-bot> <Nemokosch> no - `.=` doesn't set the topic variable. Syntactically, it's mo

[11:16] <discord-raku-bot> <Nemokosch> re like a "mutating method call"

[11:18] <discord-raku-bot> <Nemokosch> however, since that is the case, you may drop `$phone` from the beginning of the line, as tonyo pointed out a while ago

[11:18] <discord-raku-bot> <Nemokosch> `.= substr: 1 if .chars == 11 and .starts-with: 1 given $phone;`

[11:20] <discord-raku-bot> <Nemokosch> I think you need to omit the whitespace in this case

[11:20] <discord-raku-bot> <Nemokosch> `.=substr: 1 if .chars == 11 and .starts-with: 1 given $phone;`

[11:20] <discord-raku-bot> <Nemokosch> for whatever reason; I think this does qualify as a bug rather than a feature

[11:21] <habere-et-disper> What's the term again for significant whitespace?

[11:24] <discord-raku-bot> <Nemokosch> I don't know but that sounds good enough for a name 😄

[11:24] <habere-et-disper> (I think it's free-form or non free-form.)

[11:29] *** razetime left
[11:40] *** razetime joined
[12:50] *** habere-et-disper left
[12:50] *** frost joined
[13:08] *** jgaz joined
[13:10] *** razetime left
[13:23] *** frost left
[14:05] *** habere-et-disper joined
[14:28] *** dakkar left
[14:34] *** habere-et-disper left
[14:42] *** dakkar joined
[14:54] *** razetime joined
[16:37] *** dakkar left
[17:41] *** razetime left
[20:23] *** lizmat left
[21:23] *** habere-et-disper joined
[21:26] <habere-et-disper> The up-to operator has me sometimes confused. Compare:

[21:26] <habere-et-disper> m: my @array = [ 1, 2, 3 ]; say @array[ 0 .. * ]

[21:26] <habere-et-disper> m: my @array = [ 1, 2, 3 ]; say @array[ 0 ..^ * ]

[21:26] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(1 2 3)␤»

[21:26] <habere-et-disper> I was expecting (1 2) on the later, no?

[21:26] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(1 2 3)␤»

[21:29] <gfldex> m: my @array = [ 1, 2, 3 ]; say @array[ 0 ..^ ∞ ]

[21:29] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(1 2 3)␤»

[21:29] <gfldex> does that help? :->

[21:32] <habere-et-disper> That exhibits the same confusion for me. I was wanting the whole array except the last item and I thought the upto operator was nicer than [ 0 .. *-2 ]

[21:34] <gfldex> `Whatever` is tricky indeed. The linguist was stronger then the computer scientist.

[21:38] *** lizmat joined
[21:40] <gfldex> That postcircumfix doesn't produce an infinite list when given `0..Inf` makes it useful.

[21:41] *** jgaz left
[21:45] <habere-et-disper> It seems that to get the upto operator to behave as I expected, you have to first put a limit on the whatever:

[21:45] <habere-et-disper> m: my @array = [ 1, 2, 3 ]; say @array[ 0 ...^ * > .elems ]

[21:45] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(1 2)␤»

[21:48] <discord-raku-bot> <Nemokosch> I think * in ranges is always just Inf

[21:51] <discord-raku-bot> <Nemokosch> regarding the trickyness: as we have come this far, you may notice that `*-1` is not actually... * minus 1, no matter how strange this sounds

[21:51] <discord-raku-bot> <Nemokosch> that is, it's not Inf - 1

[21:51] <discord-raku-bot> <Nemokosch> `*-1` is a WhateverCode, basically a very simple function

[21:53] <discord-raku-bot> <Nemokosch> the size of the list is substituted into that function, hence `[0 ..^ *-1]` actually works

[21:55] <discord-raku-bot> <Nemokosch> similarly, I think `* > .elems` is also a function - a predicate

[21:55] <discord-raku-bot> <Nemokosch> by the way, does `.elems` really work in that context? seems surprising to me

[21:56] <habere-et-disper> It did for the little test I did. I find this slightly more readable:

[21:56] <habere-et-disper> m: my @array = [ 1, 2, 3 ]; say @array[ 0 ..^ @array.end ]

[21:56] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(1 2)␤»

[21:57] <discord-raku-bot> <Nemokosch> I think `.elems` is actually a gotcha

[21:57] <discord-raku-bot> <Nemokosch> it acts on the (possibly) unset topic variable, and here is where things go painfully wrong to my taste

[21:59] <discord-raku-bot> <Nemokosch> the unset topic variable is `(Any)`, right? Now, when you call `.elems`, it's converted into a list...

[21:59] <discord-raku-bot> <Nemokosch> if you hope that list is at least an empty list, you are wrong

[21:59] <discord-raku-bot> <Nemokosch> It's a one-element list of the `Any` type object...

[21:59] <discord-raku-bot> <Nemokosch> m: dd .list

[21:59] <discord-raku-bot> <Nemokosch> > (Any,)

[21:59] <discord-raku-bot> <Nemokosch> and consequently

[22:00] <discord-raku-bot> <Nemokosch> m: .elems.say

[22:01] <discord-raku-bot> <Nemokosch> that's right... 1

[22:08] <habere-et-disper> Wow! :0

[22:08] <habere-et-disper> I must remember to be more careful with .elems!

[22:10] <lizmat> hm... number of elems being one, is correct I feel

[22:11] <lizmat> but that it auto-converts...   feels wrong

[22:11] <lizmat> m: dd .elems; dd $_

[22:11] <camelia> rakudo-moar feb04dbe9: OUTPUT: «1␤Any $_ = Any␤»

[22:11] <lizmat> Nemokosch: cannot reproduce what you're seeing

[22:12] <lizmat> m: dd .list   # that's explicitely asking for it to become a list

[22:12] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(Any,)␤»

[22:12] <lizmat> m: dd .list; dd $_

[22:12] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(Any,)␤Any $_ = Any␤»

[22:12] <lizmat> but that still doesn't change the variable   *phew*

[22:16] *** habere-et-disper left
[22:29] *** MasterDuke joined
[22:30] *** habere-et-disper joined
[22:50] <discord-raku-bot> <Nemokosch> .elems is not too explicit

[22:50] <discord-raku-bot> <Nemokosch> anyway, why would something that isn't even `defined` have elems? and if it doesn't, any non-zero answer cannot be right

[22:53] <[Coke]> m: say 3.list

[22:53] <camelia> rakudo-moar feb04dbe9: OUTPUT: «(3)␤»

[22:53] <[Coke]> m: say 3.list.elems

[22:53] <camelia> rakudo-moar feb04dbe9: OUTPUT: «1␤»

[22:59] <discord-raku-bot> <Nemokosch> https://docs.raku.org/routine/elems#(Any)_method_elems

[22:59] <discord-raku-bot> <Nemokosch> that's the gotcha itself

[23:01] <discord-raku-bot> <Nemokosch> even Nil.elems is 1

