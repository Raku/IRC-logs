[01:54] *** Kaiepi left
[02:13] *** deoac left
[02:24] *** frost91 joined
[02:57] *** frost91 left
[04:27] *** Heptite left
[04:40] *** [Coke]_ joined
[04:42] *** [Coke]__ left
[05:39] *** razetime joined
[06:27] *** frost53 joined
[06:42] *** kjp left
[06:43] *** kjp joined
[06:59] *** razetime left
[07:59] *** habere-et-disper joined
[08:02] *** Kaiepi joined
[08:03] <habere-et-disper> To reference a hash index, one can do `%hash{ $index }`

[08:03] <habere-et-disper> Can it be done somehow the other way round with the `$index` part first?

[08:11] <discord-raku-bot> <Nemokosch> I suppose it doesn't count if you define an operator for yourself?

[08:14] <habere-et-disper> I was just thinking about the flexibility of composition and wondering if I had missed something obvious...

[08:18] <discord-raku-bot> <Kaiepi> if just the single key variant of `&postcircumfix:{ }` is fine, you can define an operator that delegates to `AT-KEY` on the hash

[08:18] <discord-raku-bot> <Kaiepi> if just the single key variant of `&postcircumfix:<{ }>` is fine, you can define an operator that delegates to `AT-KEY` on the hash

[08:21] <discord-raku-bot> <Kaiepi> multiple looks a bit awkward, but adverbs are the main thing that makes this tricky normally

[08:22] <discord-raku-bot> <Nemokosch> `$index ==> &postcircumfix:<{ }>(%hash)` does work, by the way

[08:22] <discord-raku-bot> <Nemokosch> not sure how fun that is, lol

[08:26] <discord-raku-bot> <Kaiepi> that shouldn't be terribly different from a normal postcircumfix call, surprisingly

[08:29] <discord-raku-bot> <Nemokosch> by the way, is there a shorter way to refer to this operator?

[08:29] <discord-raku-bot> <Nemokosch> like &[>] for the infix >

[08:30] <habere-et-disper> Thanks!

[08:30] <habere-et-disper> I got lost at:

[08:30] <habere-et-disper> m: my %letters = pairs 'a'..'z'; say 12.map: %letters{ $_ }

[08:30] <camelia> rakudo-moar 4d43bbf95: OUTPUT: «Use of uninitialized value $_ of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Use of uninitialized value $_ of type Any in string context…»

[08:31] <discord-raku-bot> <Kaiepi> `*{ }` is valid i guess

[08:31] <discord-raku-bot> <Kaiepi> `$_` wants a block around it there habere-et-disper

[08:33] <discord-raku-bot> <Nemokosch> what Kaiepi said: it's not a callable but a bare value this way

[08:33] <discord-raku-bot> <Nemokosch> a bare %letters{ Any } value

[08:33] <habere-et-disper> Still unhappy?

[08:33] <habere-et-disper> m: my %letters = pairs 'a'..'z'; say 12.map: %letters{ { $_ } }

[08:33] <camelia> rakudo-moar 4d43bbf95: OUTPUT: «Block object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Block object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Cannot map a Int using 'Any'␤Did …»

[08:34] <habere-et-disper> Okay, I got it!

[08:34] <habere-et-disper> m: my %letters = pairs 'a'..'z'; say 12.map: { %letters{ $_ } }

[08:34] <camelia> rakudo-moar 4d43bbf95: OUTPUT: «(m)␤»

[08:35] <discord-raku-bot> <Nemokosch> no, not that way...

[08:35] <discord-raku-bot> <Nemokosch> bingo

[08:35] <habere-et-disper> Yay! Thanks Kaiepi & discord-raku-bot :-)

[08:37] <discord-raku-bot> <Nemokosch> <@210313526928080896> I don't think `*{ }` does what it should

[08:38] <discord-raku-bot> <Nemokosch> or better said, I'm not sure if it means what we wished it would

[08:39] <discord-raku-bot> <Kaiepi> yeah...

[08:41] <discord-raku-bot> <Nemokosch> I wonder, though, what `*{*}` is

[08:41] <discord-raku-bot> <Nemokosch> I thought it would be like `{ $^a{$^b} }`

[08:41] <discord-raku-bot> <Nemokosch> apparently it isn't

[08:43] *** CIAvash left
[08:43] *** andrea[m] left
[08:43] <discord-raku-bot> <Kaiepi> one of the `*` makes a `WhateverCode:D`, but i think the one on the rhs would just be a literal `Whatever:D`, not any argument that can be given

[08:43] <discord-raku-bot> <Nemokosch> seems like you are right

[08:43] <discord-raku-bot> <Nemokosch> it's a tricky way to write .values, lol

[08:51] *** CIAvash joined
[09:45] *** andrea[m] joined
[10:08] <guifa> Rule of thumb: whatevers as *arguments* are always whatevers, and don't interpolate

[10:10] <discord-raku-bot> <Nemokosch> okay but the second * in `*{*}` is not really more of an argument than the second * would be in `* + *`

[11:00] *** equinox joined
[11:08] *** equinox left
[11:27] *** habere-et-disper left
[12:09] *** equinox joined
[12:32] *** frost53 left
[12:42] *** equinox left
[12:45] *** Kaiepi left
[12:50] *** archenoth joined
[12:53] *** Kaiepi joined
[13:32] *** jgaz joined
[14:02] *** Newbie21 joined
[14:37] *** Heptite joined
[15:31] <discord-raku-bot> <Rog> Hm, yeah, the Whatever-currying docs don’t mention hash indexing as a special case

[15:31] <discord-raku-bot> <Rog> So one would imagine it to be what Nemokosch suggested above

[15:31] <discord-raku-bot> <Rog> I don’t know whether that’s a bug or intentional behavior but at this point we’re well beyond the scope of the “beginner” channel :P

[17:20] *** equinox joined
[18:14] *** jgaz left
[19:24] *** equinox left
[20:12] *** equinox joined
[20:46] *** equinox left
[21:23] *** Newbie21 left
