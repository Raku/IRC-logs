[00:28] *** Oshawott joined
[00:31] *** arch left
[02:00] *** Kaiepi left
[02:23] *** frost joined
[03:27] *** Guest35_ left
[08:05] *** jaguart joined
[08:33] *** Kaiepi joined
[08:38] *** jaguart left
[10:20] *** kueppo joined
[10:24] <kueppo> Morning, I've a problem with the '^' twigil, idk how the order btw these positional parameters works and how to name them

[10:24] <kueppo> Like this example from the rakudoc

[10:24] <kueppo> my @powers-of-three = 1,3,9…100;

[10:24] <kueppo> say reduce { $^b - $^a }, 0, |@powers-of-three;

[10:25] <kueppo> after reading through it I still don't understand

[10:26] <kueppo> thanks in advance

[10:29] <lizmat> m: say (* / *)(4,2)   # kueppo: do you understand that?

[10:29] <camelia> rakudo-moar 214366a13: OUTPUT: «2␤»

[10:30] <lizmat> m: say (* / *)(6,2)   # perhaps better

[10:30] <camelia> rakudo-moar 214366a13: OUTPUT: «3␤»

[10:30] <lizmat> m: say (-> $a, $b { $a / $b })(6,2)

[10:30] <camelia> rakudo-moar 214366a13: OUTPUT: «3␤»

[10:30] <lizmat> m: say ({ $^a / $^b })(6,2)

[10:30] <camelia> rakudo-moar 214366a13: OUTPUT: «3␤»

[10:31] <lizmat> m: say ({ $^b / $^a })(6,2)

[10:31] <camelia> rakudo-moar 214366a13: OUTPUT: «0.333333␤»

[10:31] *** kueppo left
[10:43] *** razetime joined
[10:52] <discord-raku-bot> <Nemokosch#9980> Are the variable names magic names, then?

[10:59] <lizmat> nope

[11:00] <lizmat> m: say (-> $foo, $bar{ $foo / $bar })(6,2)

[11:00] <camelia> rakudo-moar 214366a13: OUTPUT: «===SORRY!===␤Shape declaration is not yet implemented; please use whitespace if you meant something else␤at <tmp>:1␤------> say (-> $foo, $bar⏏{ $foo / $bar })(6,2)␤Variable '$bar' is not declared.  Perhaps you forgot a 'sub' if…»

[11:00] <lizmat> m: say (-> $foo, $bar { $foo / $bar })(6,2)

[11:00] <camelia> rakudo-moar 214366a13: OUTPUT: «3␤»

[11:00] <lizmat> m: say ({ $^bar / $^foo })(6,2)

[11:00] <camelia> rakudo-moar 214366a13: OUTPUT: «3␤»

[11:01] <lizmat> because "bar" is alphabetically before "foo"

[11:01] <lizmat> m: say ({ $^foo / $^bar })(6,2)

[11:01] <camelia> rakudo-moar 214366a13: OUTPUT: «0.333333␤»

[11:01] <lizmat> m: say (-> $bar, $foo { $foo / $bar })(6,2)

[11:01] <camelia> rakudo-moar 214366a13: OUTPUT: «0.333333␤»

[11:16] <discord-raku-bot> <Nemokosch#9980> This is a point block though

[11:18] <lizmat> point blocks are just syntactic sugar to create a block

[11:18] <lizmat> they're all Callables

[11:19] <lizmat> it's just that WhateverCodes such as |* + 3" are a bit simpler blocks, because they can never have phasers

[11:19] <lizmat> * + 3

[11:19] <lizmat> :-)

[11:20] <lizmat> there is internally no difference between the Callable part of a sub / method / pointy block / block of an if / elsif / for / loop etc.

[11:21] <lizmat> it's just that subs have a name, and that blocks can have phasers

[12:01] <discord-raku-bot> <Nemokosch#9980> That's besides the point (pun not intended)

[12:02] <lizmat> ok, then what is the point ?

[12:02] <discord-raku-bot> <Nemokosch#9980> How does the compiler know which value is $^a and which is $^b

[12:03] <lizmat> variables of the form $^foo *generate* the signature of the block in which they occur

[12:03] <lizmat> m: -> $foo { $^bar }

[12:03] <camelia> rakudo-moar 214366a13: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Placeholder variable '$^bar' cannot override existing signature␤at <tmp>:1␤------> <BOL>⏏-> $foo { $^bar }␤»

[12:03] <lizmat> m: dd ({ $^bar }).signature

[12:03] <camelia> rakudo-moar 214366a13: OUTPUT: «:($bar)␤»

[12:04] <lizmat> m: dd ({ $^foo + $^bar }).signature

[12:04] <camelia> rakudo-moar 214366a13: OUTPUT: «:($bar, $foo)␤»

[12:04] <lizmat> the compiler alphabetically sorts the names to create the signature

[12:16] <discord-raku-bot> <Nemokosch#9980> > alphabetically sorts the names

[12:16] <discord-raku-bot> <Nemokosch#9980> 👏

[13:14] *** razetime left
[13:45] *** Guest35 joined
[14:05] *** kueppo joined
[16:14] *** kueppo left
[17:30] *** kueppo joined
[17:32] <kueppo> trying to learn this ':' twigil

[17:32] <kueppo> { $:add; $add.say } :add<3>

[17:32] <kueppo> for the above snippet, raku say "You can't adverb { $:add; $add.say }"

[17:32] <kueppo> but this works and I would like to know why

[17:32] <kueppo> { $:add; $add.say }() :add<3>

[17:33] <kueppo> and also the meaning of the error message

[17:41] <discord-raku-bot> <Nemokosch#9980> are you sure you meant $:add and not :$add?

[17:43] <discord-raku-bot> <Nemokosch#9980> oh no, actually $: exists, didn't know it

[17:43] <discord-raku-bot> <Nemokosch#9980> my best guess would be that it's a parsing problem

[17:44] <discord-raku-bot> <Nemokosch#9980> try :3add instead of :add<3>

[17:44] <kueppo> I meant to use add => 3

[17:45] <kueppo> I was trying to declare $:variable

[17:47] <kueppo> I'm passing a named parameter to the block but it doesn't work without this '()' and as you said it might be a parsing problem :]

[17:48] <discord-raku-bot> <Nemokosch#9980> :3add actually means add => 3

[17:49] <kueppo> ah okay :]

[17:58] <discord-raku-bot> <Nemokosch#9980> this is a shorthand when the value is a number

[17:58] <discord-raku-bot> <Nemokosch#9980> probably inspired by units of measure or something

[18:00] <kueppo> very cool

[18:02] <discord-raku-bot> <Nemokosch#9980> it would still be good to know why the supposedly equivalent forms don't seem to work

[18:10] <kueppo> would also like to know why there's no comma after (4, 5) is to a norm for named parameters?

[18:10] <kueppo> say { $:add ?? $^a + $^b !! $^a - $^b }( 4, 5 ) :!add

[18:10] <kueppo> *is it a norm ....

[18:13] <kueppo> infact, I mean why is :!add even outside (4, 5)? it's also a parameter

[18:15] <discord-raku-bot> <Nemokosch#9980> asking the right questions, my man, I have no clue

[18:15] <discord-raku-bot> <Nemokosch#9980> this isn't the first structure I've heard of that takes parameters outside of the parens

[18:16] <discord-raku-bot> <Nemokosch#9980> the feed operator also has this habit

[18:23] <kueppo> feed operator? some of these names are confusing, what is it if I may ask?

[18:23] *** frost left
[18:24] <kueppo> okay found it

[18:27] <discord-raku-bot> <Morfent#9811> `CALL-ME` has adverbs

[18:27] <discord-raku-bot> <Morfent#9811> like `:k` in `@xs[*]:k`

[18:29] <discord-raku-bot> <Morfent#9811> m:```

[18:29] <discord-raku-bot> <Morfent#9811> say (1,2,3)[*, :k] # should be equally valid

[18:29] <discord-raku-bot> <Morfent#9811> ```

[18:29] <discord-raku-bot> <Morfent#9811> welp

[18:31] <discord-raku-bot> <Nemokosch#9980> why "method Int"?

[18:31] <discord-raku-bot> <Morfent#9811> it's being interpreted as a positional position instead of a named argument

[18:31] <discord-raku-bot> <Morfent#9811> m:```

[18:31] <discord-raku-bot> <Morfent#9811> say (1,2,3)[|\(*, :k)] # OK

[18:31] <discord-raku-bot> <Morfent#9811> ```

[18:33] <discord-raku-bot> <Morfent#9811> m:```

[18:33] <discord-raku-bot> <Morfent#9811> say (1,2,3)[*]:k # Maybe not

[18:33] <discord-raku-bot> <Morfent#9811> ```

[18:35] *** kueppo left
[18:37] <discord-raku-bot> <Morfent#9811> anyway, point i'm trying to make  is `CALL-ME` and the various kinds of operators all support this syntax

[18:37] <discord-raku-bot> <Morfent#9811> anyway, point i'm trying to make  is `CALL-ME` and the various kinds of operators all support the adverb syntax

[18:39] <discord-raku-bot> <Morfent#9811> though they're not strictly identical

[19:15] <discord-raku-bot> <Nemokosch#9980> This is sort of crazy territory

[19:16] <discord-raku-bot> <Nemokosch#9980> { $:add; $add.say }() :3add

[19:16] <discord-raku-bot> <Nemokosch#9980> is this "adverb syntax" or not?

[19:16] <discord-raku-bot> <Ardal#9915> Hello!! Does zef have a command to automate scaffolding modules as described here (https://docs.raku.org/language/modules#Preparing_the_module) ?

[19:16] <discord-raku-bot> <Ardal#9915> In other words, does zef have anything like `npm init` / `cargo new`

[19:16] <discord-raku-bot> <Ardal#9915> ?

[19:16] <discord-raku-bot> <Ardal#9915> Hello!! Does zef have a command to automate scaffolding modules as described here (https://docs.raku.org/language/modules#Preparing_the_module) ?

[19:16] <discord-raku-bot> <Ardal#9915> In other words, does zef have anything like `npm init` / `cargo new`?

[19:20] <lizmat> no, but App::Mi6 does

[19:20] <lizmat> which is what I use  :-)

[19:25] <discord-raku-bot> <Morfent#9811> that's `CALL-ME`, so yes

[19:26] <discord-raku-bot> <Nemokosch#9980> hmmm

[19:27] <discord-raku-bot> <Nemokosch#9980> how does this relate to the fact that the same thing didn't work with :add{3} ?

[19:29] <discord-raku-bot> <Morfent#9811> this? `{ $:add; $add.say } :add<3>`

[19:31] <discord-raku-bot> <Morfent#9811> `:add{3}` would pass a block returning `3`

[19:33] <discord-raku-bot> <Nemokosch#9980> yuck

[19:35] <discord-raku-bot> <Nemokosch#9980> okay... so it seems like both `{ $:add; $add.say }(:add<3>)` and `{ $:add; $add.say }() :add<3>` work

[19:37] <discord-raku-bot> <Nemokosch#9980> but it won't work without the parens

