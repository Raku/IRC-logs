[00:15] <discord-raku-bot> <stevied#8273> ok, had to do IO::Spec::Unix.splitpath for some reason

[00:18] <SmokeMachine> %h{ ||@k } wasn‚Äôt implemented yet, right?

[00:21] <guifa> SmokeMachine oh right! I forgot all about that!

[00:21] <SmokeMachine> m: my %h; %h{‚Äúa‚Äù; ‚Äúb‚Äù; ‚Äúc‚Äù} = 1; dd %h; my @k = <x y z>; %h{ ||@k } = 2; dd %h

[00:21] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´Hash %h = {:a(${:b(${:c(1)})})}‚ê§Hash %h = {:a(${:b(${:c(1)})}), :x(2), :y(Any), :z(Any)}‚ê§¬ª

[00:21] * guifa will go to the corner and put on his dounce cap

[00:21] <SmokeMachine> Yes, not implemented yet‚Ä¶ :(

[00:45] <SmokeMachine> It seems I was wrong!

[00:45] <SmokeMachine> m: use v6.e.PREVIEW; my %h; %h{‚Äúa‚Äù; ‚Äúb‚Äù; ‚Äúc‚Äù} = 1; dd %h; my @k = <x y z>; %h{ ||@k } = 2; dd %h

[00:45] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´Hash %h = {:a(${:b(${:c(1)})})}‚ê§Hash %h = {:a(${:b(${:c(1)})}), :x(${:y(${:z(2)})})}‚ê§¬ª

[00:45] <SmokeMachine> \o/

[00:46] <SmokeMachine> guifa: üëÜ

[01:50] *** frost joined
[02:27] *** frost left
[02:30] *** frost joined
[08:14] *** dakkar joined
[13:23] *** Kaiepi joined
[13:24] *** jgaz joined
[13:41] <discord-raku-bot> <stevied#8273> why does 0 ... Inf create an infinite loop while 0 ... * does not?

[13:42] <lizmat> there shouldn't be any difference?   please make an issue if you can provide code showing the difference  :-)

[13:45] <discord-raku-bot> <stevied#8273> ah, ok. this was only happening in code that was getting .EVAL'd

[13:45] <discord-raku-bot> <stevied#8273> ah, ok. this was only happening in code that was getting  .EVAL'd

[13:45] <discord-raku-bot> <stevied#8273> thanks

[13:47] <discord-raku-bot> <stevied#8273> not sure why my code didn't throw an error. said "stub code" executed. anyway, ok.

[13:55] <discord-raku-bot> <Anton Antonov#7232> @guifa I think what you suggested should be put in a package named, say. `Hash::DeepLookup`.

[13:55] <discord-raku-bot> <Anton Antonov#7232> @guifa I think what you suggested should be put in a package named, say, `Hash::DeepLookup`.

[13:58] *** jgaz left
[14:24] *** frost left
[15:20] *** jgaz joined
[15:51] *** johnjaye left
[16:10] *** jgaz left
[16:32] *** dakkar left
[16:36] <discord-raku-bot> <stevied#8273> this code stops after the first for iterations: `(loop (my $i = 0; $i < 10; $i++) { say $i; })[3]`

[16:37] <discord-raku-bot> <stevied#8273> but this code does not:  `(for 1,2,3,4,5 { .say })[2];`

[16:37] <discord-raku-bot> <stevied#8273> anyone know why?

[16:38] <discord-raku-bot> <stevied#8273> this code stops after the first few iterations: `(loop (my $i = 0; $i < 10; $i++) { say $i; })[3]`

[16:43] <discord-raku-bot> <Nemokosch#9980> do you mean that the first one is lazy?

[16:43] <discord-raku-bot> <stevied#8273> that's what I'm actually trying to learn about. laziness. So i'm fiddling with code examples to try to get a good handle on it

[16:44] <guifa> huh, that's strange that it's lazy there

[16:45] <discord-raku-bot> <stevied#8273> so a `loop` is lazy

[16:45] <discord-raku-bot> <Nemokosch#9980> I'm not sure if this is a bug or a feature

[16:45] <discord-raku-bot> <Nemokosch#9980> even $i stopped at 3 so the loop definitely didn't terminate on the condition

[16:45] <guifa> per docs

[16:45] <guifa> "Unlike a for loop, one should not rely on whether returned values are produced lazily. It would probably be best to use eager to guarantee that a loop whose return value may be used actually runs:"

[16:46] <guifa> m: (eager loop (my $i = 0; $i < 10; $i++) { say $i; })[3]

[16:46] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[16:47] <discord-raku-bot> <stevied#8273> yeah, so here's where I'm confused: https://docs.raku.org/language/list#Sequences

[16:47] <discord-raku-bot> <Nemokosch#9980> so this is "undefined behavior" lol

[16:47] <discord-raku-bot> <Nemokosch#9980> and indeed, lazy for also works, vice versa

[16:47] <discord-raku-bot> <stevied#8273> says "As it so happens, loops return Seqs."

[16:47] <discord-raku-bot> <stevied#8273> so `for` is a loop, right?

[16:49] <discord-raku-bot> <Nemokosch#9980> `for` is a loop but `for` is not a `loop`

[16:49] <discord-raku-bot> <Nemokosch#9980> question is, which one they meant xD

[16:49] <discord-raku-bot> <Nemokosch#9980> first I read it as `loop`s but idk if it was meant that way

[16:49] <discord-raku-bot> <stevied#8273> it just says "loops". Does it mean `loops`s

[16:49] <discord-raku-bot> <stevied#8273> it just says "loops". Does it mean `loops`s?

[16:51] <discord-raku-bot> <stevied#8273> let me see if I can throw an is lazy on the for loop

[16:51] <discord-raku-bot> <Nemokosch#9980> you can say `lazy for` I tried that

[16:51] <discord-raku-bot> <stevied#8273> ok, yeah. huh.

[16:51] <guifa> There something that could be cleaned up there for sure.

[16:51] <guifa> A lazy for returns Seq, an eager returns List

[16:52] <discord-raku-bot> <stevied#8273> so I guess for loops are "eager" by default and a loop is "lazy" be default

[16:52] <discord-raku-bot> <Nemokosch#9980> the return types differ for sure

[16:53] <guifa> a while loop also produces a Seq

[16:53] <discord-raku-bot> <Nemokosch#9980> a simple `for` returns a List

[16:53] <discord-raku-bot> <Nemokosch#9980> while a simple `loop` returns a Seq

[16:53] <discord-raku-bot> <Nahita#3882> > Unlike a for loop, one should not rely on whether returned values are produced lazily

[16:53] <discord-raku-bot> <Nahita#3882> Can someone translate this again in English? Does this mean, I can rely on returned values being produced lazily in case of "for" loops?

[16:53] <discord-raku-bot> <stevied#8273> ok, I see. and a List is not lazy

[16:53] <discord-raku-bot> <Nahita#3882> but it's not the case, is it

[16:53] <discord-raku-bot> <Nemokosch#9980> apparently it is the opposite but I think it can be read as the opposite as well

[16:53] <discord-raku-bot> <stevied#8273> yeah, I read that a few times and could not tell what it was saying

[16:53] <discord-raku-bot> <Nemokosch#9980> it says "whether", not "that"

[16:53] <guifa> so basically, the only time you'll get a List is on an eager for

[16:53] <discord-raku-bot> <Nemokosch#9980> you should not rely on the outcome - which is apparently false?

[16:53] <discord-raku-bot> <Nemokosch#9980> xD

[16:53] <discord-raku-bot> <Nahita#3882> :p

[16:55] *** Kaiepi left
[16:55] <discord-raku-bot> <Nemokosch#9980> anyway, there are multiple sources of confusion here

[16:55] <discord-raku-bot> <Nemokosch#9980> even if this is the intended behavior, it could be described more clearly

[16:55] <discord-raku-bot> <Nemokosch#9980> or even stated at all

[16:55] <discord-raku-bot> <Nahita#3882> oh, as in "whether returned values are produced lazily *or not*"

[16:55] <discord-raku-bot> <Nemokosch#9980> "I can really on _whether_ a for loop is eager or not"

[16:55] <discord-raku-bot> <Nahita#3882> but then it's not saying anything in effect, i suppose...

[16:55] <discord-raku-bot> <Nemokosch#9980> like this only states consistency for me

[16:55] <discord-raku-bot> <Nemokosch#9980> not an actual behavior xD

[16:56] <guifa> "you should not rely on" means different compilers and different versions may result in a different behavior (with respect to laziness).  This will only affect you if you have a loop with side effects

[16:56] <discord-raku-bot> <Nemokosch#9980> and indeed

[16:57] <discord-raku-bot> <Nemokosch#9980> (for 1..* { .say }) is a reactor melting

[16:57] <discord-raku-bot> <Nemokosch#9980> it does try to generate it all

[16:57] <discord-raku-bot> <Nemokosch#9980> is this surely not some syntax trickery?

[16:57] <discord-raku-bot> <stevied#8273> ok, so basically, the for loop is an exception and will do eager

[16:58] <discord-raku-bot> <stevied#8273> other loops will be lazy, but it can be compiler dependent. does that sound right?

[16:58] <guifa> But basically, all loops return Seq *except* an eager for (and eager is the default for for)

[16:59] <discord-raku-bot> <Nemokosch#9980> pfff

[16:59] <discord-raku-bot> <Nemokosch#9980> does Roast have something about this?

[16:59] <discord-raku-bot> <Nemokosch#9980> I guess it should

[17:05] *** jgaz joined
[17:24] *** Kaiepi joined
[17:34] <discord-raku-bot> <stevied#8273> ```

[17:34] <discord-raku-bot> <stevied#8273> my $incremented = 0;

[17:34] <discord-raku-bot> <stevied#8273> my $var = do for <1 2 3 4> -> $d { };

[17:34] <discord-raku-bot> <stevied#8273> say $var.^name;

[17:34] <discord-raku-bot> <stevied#8273> my $incremented = 0;

[17:34] <discord-raku-bot> <stevied#8273> my $var = lazy for <1 2 3 4> -> $d { };

[17:34] <discord-raku-bot> <stevied#8273> say $var.^name;

[17:34] <discord-raku-bot> <stevied#8273> ```

[17:34] <discord-raku-bot> <stevied#8273> that spell it out nicely. first return List and second returns Seq

[19:20] *** MasterDuke left
[19:34] *** MasterDuke joined
[20:45] <discord-raku-bot> <stevied#8273> I'm unable to retrieve a file in my module that is in the resource directory:

[20:45] <discord-raku-bot> <stevied#8273> ```

[20:45] <discord-raku-bot> <stevied#8273> my $blah = %?RESOURCES<examples/Lists/somefile>;

[20:45] <discord-raku-bot> <stevied#8273> say $blah;

[20:45] <discord-raku-bot> <stevied#8273> ```

[20:45] <discord-raku-bot> <stevied#8273> this just returns (Any)

[20:45] <discord-raku-bot> <stevied#8273> the file exists and it's in my meta file

[20:48] <sienet_ja_LSD[m]> what if you add use lib $?FILE.IO.dirname; in the beginning?

[20:48] <sienet_ja_LSD[m]> umm, with the appropriate dir of course

[20:51] <discord-raku-bot> <stevied#8273> like this? `use lib $?FILE.IO.examples/Lists;`

[20:51] <SmokeMachine> m: (do for 1,2,3,4,5 { .say })[2]

[20:51] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[20:54] <sienet_ja_LSD[m]> FILE.IO.dirname gives you the current working directory, but you may add to it with .add, so: use lib $?FILe.IO.dirname.add("examples/Lists");

[20:55] <sienet_ja_LSD[m]> might need .resolve.relative

[20:56] <sienet_ja_LSD[m]> like there https://docs.raku.org/type/IO::Path#method_add

[20:57] <discord-raku-bot> <stevied#8273> doesn't work. just get "coud not evaluate arguments"

[20:58] *** jgaz left
[20:58] <sienet_ja_LSD[m]> use lib $?FILE.IO.dirname.add("examples/Lists").resolve.relative; 

[21:00] <discord-raku-bot> <stevied#8273> same error

[21:23] <sienet_ja_LSD[m]> hmm I'm getting that error too

[21:54] <discord-raku-bot> <Morfent#9811> `$?FILE.IO.sibling(...)`?

[22:00] <sienet_ja_LSD[m]>  %?RESOURCES should produce a Distribution::Resources object based on META6.json, but it's not doing it 

[22:05] <discord-raku-bot> <stevied#8273> does the module have to be run through make first?

[22:08] <sienet_ja_LSD[m]> not sure, but at least here it says that you should be able to run it with -Ilib directly from the source dir https://docs.raku.org/type/Distribution::Resource

[22:10] <discord-raku-bot> <stevied#8273> This variable will work with the current repository chain structure, and will give you the right way to get to the resource independently of it being installed or not;

[22:18] <discord-raku-bot> <stevied#8273> this has got to be a bug

[22:19] <sienet_ja_LSD[m]> aye something's up

[22:22] <discord-raku-bot> <stevied#8273> ok, got it working from a module

[22:22] <discord-raku-bot> <stevied#8273> but it does not work from t/sometest.t

[22:22] <discord-raku-bot> <stevied#8273> weird

[22:22] <discord-raku-bot> <stevied#8273> https://github.com/rakudo/rakudo/issues/4173#issuecomment-762925099

[22:24] <sienet_ja_LSD[m]> well nice if it works at least half

[22:45] <lizmat> sienet_ja_LSD[m]: you must use -I. and have the META6.json correctly set up

[22:46] <sienet_ja_LSD[m]> I used, but I didn't do it like they told in that github discussion (write it in a sub)

