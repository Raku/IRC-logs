[01:10] *** Guest41 joined
[01:15] *** Guest41 left
[02:20] *** razetime joined
[04:07] *** Guest35 left
[06:35] *** yolo joined
[06:35] *** yolo left
[06:48] *** razetime left
[07:22] *** razetime joined
[09:31] *** TempIRCLogger__ joined
[09:31] *** TempIRCLogger__ left
[09:32] *** TempIRCLogger__ joined
[09:32] *** RakuIRCLogger left
[09:32] *** lizmat left
[09:33] *** TempIRCLogger left
[09:34] *** TempIRCLogger__ left
[09:34] *** TempIRCLogger joined
[09:34] *** lizmat_ left
[09:34] *** lizmat joined
[09:38] *** TempIRCLogger left
[09:38] *** TempIRCLogger joined
[10:33] <discord-raku-bot> <piotrklibert#0328> What do you mean? Could you elaborate? Sounds intriguing... üôÇ

[10:41] <discord-raku-bot> <Nemokosch#9980> let's say I have a 5x5 table _for some reason_

[10:41] *** Nemokosch joined
[10:43] <discord-raku-bot> <Nemokosch#9980> the bridge doesn't work now üòê

[10:43] <discord-raku-bot> <Nemokosch#9980> so I can index this with 1;2 for example

[10:45] <discord-raku-bot> <Nemokosch#9980> it would be good if this worked backwards as well

[10:45] <discord-raku-bot> <Nemokosch#9980> I want h and get 1;2 as the index, rather than nest loops or something

[10:47] <Nemokosch> bruh

[10:47] <discord-raku-bot> <Nemokosch#9980> oh it does work, I'm just stupid

[10:48] <Nemokosch> m: dd ('a'..'z').rotor(5).List.[1;2]

[10:48] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´"h"‚ê§¬ª

[10:51] <discord-raku-bot> <piotrklibert#0328> Yeah, another fun thing to try: `.[*;2]`

[10:51] <discord-raku-bot> <Nemokosch#9980> Indeed

[11:02] *** Nemokosch left
[11:03] <discord-raku-bot> <gfldex#8222> <@297037173541175296> you need a `.deepantipair`. There may be a blogpost shortly.

[11:06] <discord-raku-bot> <Nemokosch#9980> üòÆ

[11:06] <discord-raku-bot> <Nemokosch#9980> sounds very cool

[11:06] <discord-raku-bot> <Nemokosch#9980> I planned to rather deal with a flat array, that's also manageable

[11:10] <discord-raku-bot> <piotrklibert#0328> I was just checking, thinking that maybe deepmap could be used with `:kv` - and then abused to do the search - but it doesn't seem to be possible üôÇ

[11:23] *** razetime left
[11:59] *** frost joined
[12:08] *** razetime joined
[12:24] <discord-raku-bot> <gfldex#8222> <@297037173541175296> https://gfldex.wordpress.com/2022/05/01/antipairing/

[12:35] <discord-raku-bot> <gfldex#8222> Another way to do this would be to flatten the array and transform the indice with modulo. Modulo is kind of `.batch` for Ints.

[13:50] *** Guest35 joined
[14:48] *** frost left
[15:05] <discord-raku-bot> <Nemokosch#9980> Is this a standalone thing or just %?

[15:10] *** razetime left
[15:20] <discord-raku-bot> <piotrklibert#0328> Probably something like this: ```

[15:20] <discord-raku-bot> <piotrklibert#0328> my $l = ('a'..'z').batch(4);

[15:20] <discord-raku-bot> <piotrklibert#0328> my $pos = $l.flat.first('y', :k);

[15:20] <discord-raku-bot> <piotrklibert#0328> $l[floor($pos/4); $pos % 4]

[15:20] <discord-raku-bot> <piotrklibert#0328> # y

[15:20] <discord-raku-bot> <piotrklibert#0328> ```

[15:22] <discord-raku-bot> <piotrklibert#0328> In Python there's a utility called `divmod`, which combines integer division and modulo into a single call. It's trivial to write one in Raku, but I wasn't able to find an implementation in stdlib.

[15:22] <discord-raku-bot> <piotrklibert#0328> In Python there's a utility called `divmod`, which combines integer division and modulo into a single call (returning 2 values). It's trivial to write one in Raku, but I wasn't able to find an implementation in stdlib.

[15:25] *** razetime joined
[15:41] <discord-raku-bot> <Nemokosch#9980> I mean yeah, it just sounded ("transform the indice with modulo; modulo is ...") as if "modulo" were an established thing for this particular problem and not just usual remainder calculation (which I'm well aware of)

[17:06] *** razetime left
[23:55] *** discord-raku-bot left
[23:57] *** discord-raku-bot joined
