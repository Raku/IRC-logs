[00:03] *** CodeTortoise left
[00:44] <newuserofraku> p6steve okay thank you, i don't have/use docker on this system, but will try the other solution

[01:21] *** CodeTortoise joined
[01:50] *** CodeTortoise left
[02:15] <jaguart> can't get the role mixin syntax for two roles with initialiser :(

[02:15] <jaguart> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but R("Aha"); say $i, " is ", $i.ahr;

[02:15] <camelia> rakudo-moar ddecbe687: OUTPUT: «5 is Aha␤»

[02:15] <jaguart> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R("Aha"),S); say $i, " is ", $i.ahr;

[02:15] <camelia> rakudo-moar ddecbe687: OUTPUT: «Impossible coercion from 'Str' into 'R': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[02:16] <jaguart> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R,S); say $i, " is ", $i.ahr;

[02:16] <camelia> rakudo-moar ddecbe687: OUTPUT: «5 is (Any)␤»

[02:17] <jaguart> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R("Aha"),S("Shh")); say $i, " is ", $i.ahr;

[02:17] <camelia> rakudo-moar ddecbe687: OUTPUT: «Impossible coercion from 'Str' into 'R': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[02:17] <discord-raku-bot> <Nemokosch> Why did R("Aha") work in the first place?

[02:17] <jaguart> role with single value can be initialised using parens

[02:17] <jaguart> https://docs.raku.org/language/objects#Mixins_of_roles

[02:18] <jaguart> says: If the role supplies exactly one attribute, an initializer can be passed in parentheses:

[02:18] <discord-raku-bot> <Nemokosch> What if you add spaces inside the parens?

[02:19] <discord-raku-bot> <Nemokosch> Btw this whole feature sounds kinda like an unfeature imo

[02:19] <jaguart> spaces don't help...

[02:20] <jaguart> what does this mean: Impossible coercion from 'Str' into 'R

[02:20] <jaguart> it's trying to turn the arg into the role??

[02:20] <discord-raku-bot> <Nemokosch> This is probably a syntax barrier

[02:21] <discord-raku-bot> <Nemokosch> Something like that

[02:21] <discord-raku-bot> <Nemokosch> Or worst case, a weird type constraint

[02:22] <discord-raku-bot> <Nemokosch> Ngl I'd rather see this one-argument hack removed altogether. It's "strangely inconsistent" which is the worst of the 4 possibilities

[02:24] <jaguart> I can do it in two assignments :(

[02:24] <jaguart> which is a bit naff

[02:24] <jaguart> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but R( "aha" ); $i =  $i but S("shh"); say $i, " is ", $i.ahr, " and ", $i.ess;

[02:24] <camelia> rakudo-moar ddecbe687: OUTPUT: «5 is aha and shh␤»

[02:25] <jaguart> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but R( "aha" ); $i =  $i but S("shh"); say $i, " is ", $i.ahr, " and ", $i.ess; say $i.WHAT

[02:25] <camelia> rakudo-moar ddecbe687: OUTPUT: «5 is aha and shh␤(Int+{R}+{S})␤»

[02:26] <discord-raku-bot> <Nemokosch> What if you wrap the role in a one- element list?

[02:26] <discord-raku-bot> <Nemokosch> My hypothesis is that if would break

[02:28] <jaguart> one element list is ok

[02:29] <jaguart> but needs parens though otherwise you get a warning about the last role being in sink

[02:29] <discord-raku-bot> <Nemokosch> m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R( "aha" ),); $i =  $i but (S("shh"),); say $i, " is ", $i.ahr, " and ", $i.ess; say $i.WHAT

[02:29] <jaguart> it feels naff - but I can live with chaining assignments

[02:30] <discord-raku-bot> <Nemokosch> It did fail

[02:30] <jaguart>  m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R( "aha" ),); $i = $i but (S("shh"),); say $i, " is ", $i.ahr, " and ", $i.ess; say $i.WHAT

[02:30] <camelia> rakudo-moar ddecbe687: OUTPUT: «Impossible coercion from 'Str' into 'R': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[02:30] <jaguart>  m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R( "aha" ),); $i = $i but S("shh"),; say $i, " is ", $i.ahr, " and ", $i.ess; say $i.WHAT

[02:30] <camelia> rakudo-moar ddecbe687: OUTPUT: «Impossible coercion from 'Str' into 'R': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[02:31] <jaguart>  m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but R( "aha" ), ; say $i.WHAT

[02:31] <camelia> rakudo-moar ddecbe687: OUTPUT: «(Int+{R})␤»

[02:31] <jaguart>  m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R( "aha" ),) ; say $i.WHAT

[02:31] <camelia> rakudo-moar ddecbe687: OUTPUT: «Impossible coercion from 'Str' into 'R': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[02:31] <jaguart>  m: role R { has $.ahr }; role S { has $.ess }; my $i = 5 but (R( "aha" )) ; say $i.WHAT

[02:31] <camelia> rakudo-moar ddecbe687: OUTPUT: «Impossible coercion from 'Str' into 'R': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[02:32] <jaguart> so looks like parens kicks but

[02:32] <jaguart> I didnt think parens created list?

[02:34] <jaguart> on a sep note - how to you initialise a role if if has more than one field?

[02:38] <discord-raku-bot> <Nemokosch> Good question. Have you tried the same way as default constructors?

[02:40] <jaguart> you can assign defaults - but what if you want non-default values

[02:41] <discord-raku-bot> <Nemokosch> I meant default constructors of classes though

[02:43] <discord-raku-bot> <Nemokosch> By the way, in this case "you just don't" also seems acceptable for an answer. After all, it's a far stretch to mix in *non*-commonalities with a mixin

[02:45] <jaguart> ah - parameterised roles using []

[02:46] <jaguart> m: role R[$a] { has $.ahr = $a }; role S[$s] { has $.ess=$s }; my $i = 5 but (R["a"],S["b"]); say $i, " ", $i.ahr, " ",$i.ess, " is ", $i.WHAT;

[02:46] <camelia> rakudo-moar ddecbe687: OUTPUT: «5 a b is (Int+{R[Str],S[Str]})␤»

[02:46] <jaguart> and this works with the butt list

[02:47] <jaguart> to summarise: parens kick but unless you're square --> but (R[1],S[2])

[02:53] <jaguart> and you can use capture args: nice :)

[02:54] <jaguart> m: role R[|c] { has $.a = c<a>; has $.b=c<b>; }; my $i = 5 but (R[:a("x"),:b("y")]); say $i.WHAT; say ($i,$i.a,$i.b).map(*.gist).join(" ")

[02:54] <camelia> rakudo-moar ddecbe687: OUTPUT: «(Int+{R})␤5 x y␤»

[02:59] <jaguart> is there a nice way to separate say elements? like Perl $, ?

[03:00] <jaguart> actually I mean $"

[03:01] <jaguart> no - I do mean $, doh

[03:02] <jaguart> oh :( https://docs.raku.org/language/5to6-perlvar#$OUTPUT_FIELD_SEPARATOR,_$OFS,_$,

[03:02] <jaguart> Currently no obvious equivalent.

[03:23] *** Kaiepi left
[05:25] *** CodeTortoise joined
[05:37] *** CodeTortoise left
[05:48] <jaguart> this suprised me

[05:49] <jaguart> m: class C { method x ( :$all ) { my @m;  |@m; } }; for C.new.x() -> $y { say "got: ", $y }

[05:49] <camelia> rakudo-moar ddecbe687: ( no output )

[05:49] <jaguart> m: class C { method x ( :$all ) { my @m;  return |@m; } }; for C.new.x() -> $y { say "got: ", $y }

[05:49] <camelia> rakudo-moar ddecbe687: OUTPUT: «got: Nil␤»

[05:49] <jaguart> return statement vs last expression - argh

[09:43] <discord-raku-bot> <Nemokosch> re $,: yeah, tbh it's more or less intentional probably. Lots of magic variables were eliminated

[09:44] <discord-raku-bot> <Nemokosch> and that really seems like such a minimal sugar when you can do join on any sort of list

[10:34] *** Kaiepi joined
[14:49] *** jgaz joined
[15:16] *** rf joined
[15:17] <rf> Where can I find more information on generics in Raku, I thought they'd be with the class stuff in the docs but I can't seem to find much

[15:22] <discord-raku-bot> <Nemokosch> I think it runs under a term like "type parameters" somewhere

[15:23] <discord-raku-bot> <Nemokosch> having said that... hm, well, how do I put it. There should be some disclaimer that the type system is overrated

[15:24] <rf> That's fair! I'm writing a Result monad right now and I think keeping it dynamic is fine, but just wanted to dabble a little bit with Generics

[15:25] <discord-raku-bot> <Nemokosch> granted, it *is* a real type system, not just some linter sugar. But you will hit yourself a lot of times probably. Simply saying this because of the kind of discussions that have happened e.g here

[15:26] <rf> I come from Haskell and OCaml, so it's probably my past holding me back trying to type everything :P

[15:26] <discord-raku-bot> <Nemokosch> Some questions seem desperately legitimate, for example: why can't List, of all types, take parameters

[15:26] <discord-raku-bot> <Nemokosch> Array can, for example

[15:26] <rf> Yeah, I was wondering about that

[15:27] <discord-raku-bot> <Nemokosch> oh right, and then obviously literals of compound types usually won't be typed the way you wished them to

[15:30] <rf> Is there any reason that Lists can't be typed? I feel like that should be relatively simple. But I'm no compiler hacker

[15:31] <discord-raku-bot> <Nemokosch> I also don't know. Don't @ me at this but this seems like a situation where there probably is a reason and if we learned it, we would probably say it's an invalid reason 😅

[15:34] <rf> Are there many other languages on Moar/NQP? Maybe some of them have managed it lol 

[15:37] <discord-raku-bot> <Nemokosch> absolutely not. I think, even if it's theoretically possible to build a language on top of MoarVM, it was created exactly for Raku (Perl6 at that time)

[15:40] <discord-raku-bot> <Nahita> "not quite python" <https://github.com/arnsholt/snake>

[15:42] <discord-raku-bot> <Nahita> it's interesting i think, rf

[15:46] <rf> Cool

[15:46] <rf> One more quick question, what's the difference between f(x) and f: x if any?

[15:58] <discord-raku-bot> <Nemokosch> does f: x work for bare functions as well?

[15:58] <discord-raku-bot> <Nemokosch> for functions, I have only seen f x

[15:59] <discord-raku-bot> <Nemokosch> I'm pretty sure all the differences are solely related to syntax implications

[15:59] <discord-raku-bot> <Nemokosch> like precedence

[16:00] <discord-raku-bot> <Nahita> rf: `:` allows less parantheses in method calls

[16:01] <discord-raku-bot> <Nahita> `$obj.meth($a, $b);` can be written as `$obj.meth: $a, $b;`

[16:01] <discord-raku-bot> <Nahita> or `meth $obj: $a, $b`

[16:02] <discord-raku-bot> <Nahita> if not a method, "f" in `f: x` is interpreted as a label

[16:02] <rf> What about a block, does the same apply for &f: ?

[16:03] <discord-raku-bot> <Nahita> & is not only for blocks, also usable to refer to functions

[16:04] <discord-raku-bot> <Nahita> and &f: seems to be not interpreted as a label but a syntax error

[16:05] <rf> Cool, thanks for this :D

[16:06] <discord-raku-bot> <Nahita> np

[16:25] *** jgaz left
[16:28] <rf> How can I get around the lexical scoping of modules? I have a sub `ok` in my Module, and I want to test it. Since Test::ok is a thing I get errors. Can I alias somehow?

[16:29] <discord-raku-bot> <Nemokosch> perhaps it's better to make your sub our-scoped

[16:29] <discord-raku-bot> <Nemokosch> so that you can access it with ::

[16:39] <rf> That did the trick thank you!

[16:39] <discord-raku-bot> <Nemokosch> 🍬

[17:03] *** jgaz joined
[17:31] *** jgaz left
[18:11] *** newuserofraku left
[18:53] *** Kaipei joined
[18:57] *** Kaiepi left
[19:03] *** Kaipei left
[19:04] *** Kaipei joined
[19:28] *** Kaipii joined
[19:32] *** Kaipei left
[20:12] *** CodeTortoise joined
[20:13] <CodeTortoise> Quick dumb question. You know how Rust programmers are called rustaceans... are we Rakoons?

[20:14] <discord-raku-bot> <Nemokosch> Seems like that became the de-facto term 🙂

[20:16] <CodeTortoise> Neat. I knew it would be something obvious like that.

[20:16] <CodeTortoise> Or like, Rakunteurs.

[20:41] *** CodeTortoise left
[22:37] *** CodeTortoise joined
[23:15] *** jgaz joined
[23:29] *** CodeTortoise left
