[01:46] <discord-raku-bot> <stevied#8273> where can I find a good example of a module that has both a functional and OO interface?

[03:13] *** discord-raku-bot left
[03:13] *** discord-raku-bot joined
[03:17] *** discord-raku-bot left
[03:17] *** discord-raku-bot joined
[05:35] *** discord-raku-bot left
[05:38] *** RakuIRCLogger left
[05:39] *** stevied left
[05:40] *** discord-raku-bot joined
[05:40] *** TempIRCLogger joined
[08:04] *** dakkar joined
[10:24] *** frost joined
[10:35] *** frost left
[10:53] *** frost joined
[11:55] *** frost left
[12:19] *** frost joined
[12:26] *** frost left
[12:42] *** frost joined
[13:13] *** dakkar left
[13:14] *** dakkar joined
[14:52] <discord-raku-bot> <stevied#8273> Hi, the doc at  https://docs.raku.org/routine/run suggests doing this to prevent getting an error: `run('false').so; # OK. Evaluates Proc in Bool context; no sinking`

[14:52] *** frost left
[14:53] <discord-raku-bot> <stevied#8273> but this does not accord with my experience. I'm still getting an error on my mac

[14:55] *** discord-raku-bot left
[14:55] *** discord-raku-bot joined
[14:56] <MasterDuke> on linux, without the `.so` i get `The spawned command 'false' exited unsuccessfully (exit code: 1, signal: 0) in block <unit> at -e line 1`. with `.so` i don't get any error

[14:56] <discord-raku-bot> <stevied#8273> i'm running this in a test. let me paste my output

[14:57] <discord-raku-bot> <stevied#8273> https://paste.debian.net/1226858/

[14:58] <MasterDuke> looks like you're doing `run(...).so.exitcode`, or something like that

[14:58] <discord-raku-bot> <stevied#8273> i guess it's just the test summary report showing the errors

[14:59] <discord-raku-bot> <stevied#8273> ah, maybe that's it

[14:59] <discord-raku-bot> <stevied#8273> forgot to change the line below

[14:59] <discord-raku-bot> <stevied#8273> hmm

[15:00] <discord-raku-bot> <stevied#8273> here's my test file: https://paste.debian.net/1226859/

[15:00] <discord-raku-bot> <stevied#8273> how do I fix that?

[15:03] <discord-raku-bot> <Nemokosch#9980> m: my $squares = (0..*).map: * ** 2; dd (1..*).map({ $squares.head: $_ });

[15:03] <discord-raku-bot> <Nemokosch#9980> I wonder of there is an easier/ better way to do this

[15:03] <discord-raku-bot> <Nemokosch#9980> ... or a working way 😆

[15:03] <discord-raku-bot> <stevied#8273> i guess I can just catch the error

[15:04] <MasterDuke> as it is you're definitely calling .exitcode on the result of .so, which is a Bool

[15:05] <discord-raku-bot> <Nemokosch#9980> It's not nice of head that it mutates the iterator in place

[15:05] <discord-raku-bot> <stevied#8273> right. but how do I run that command and test the exitcode?

[15:06] <discord-raku-bot> <stevied#8273> without a bunch of errors?

[15:07] <MasterDuke> you could just check the result of the .so. should be False if there was an error and True if not

[15:09] <discord-raku-bot> <stevied#8273> Yeah, just figured that out. so run('blah').exitcode.so

[15:09] <discord-raku-bot> <stevied#8273> thanks

[15:09] <MasterDuke> you don't even need the .exitcode then, but yeah, should be the same

[15:11] <discord-raku-bot> <stevied#8273> i really don't understand why that's considered to be a "SUNK" context if I'm assigning the right hand side to a value

[15:12] <MasterDuke> i guess because you're not "using" it

[15:13] <MasterDuke> but for me, `my $a = run("false")` doesn't give any error

[15:13] <discord-raku-bot> <stevied#8273> huh

[15:13] <discord-raku-bot> <stevied#8273> let me try outside of a test

[15:15] <discord-raku-bot> <stevied#8273> yeah, no error for me either

[15:15] <discord-raku-bot> <stevied#8273> hmm

[15:15] <discord-raku-bot> <stevied#8273> i wonder why that would be

[15:17] <discord-raku-bot> <stevied#8273> must have something to do with the guts of test harness. beyond my paygrade. but seems like a bug

[15:34] *** RakuIRCLogger left
[15:36] <discord-raku-bot> <Nemokosch#9980> m: dd (1..*).map({ (0..*).map(* ** 2).head: $_ });

[15:38] <discord-raku-bot> <Nemokosch#9980> is there a better way to take longer and longer parts of a sequence?

[15:39] <discord-raku-bot> <Nemokosch#9980> and, asking for the eventual purpose: is there a simple way to Descartes-multiply infinite sequences without going to straight to infinity on one side?

[15:40] <discord-raku-bot> <Nemokosch#9980> or at least do this for the same sequence on both sides

[15:40] <discord-raku-bot> <Nemokosch#9980> as if you were to generate all rational numbers or something

[15:49] *** TempIRCLogger joined
[15:56] <guifa> I'm not sure if .map is eager, but if they were lazy sequences it shouldn't cause a problem

[15:57] *** guifa left
[16:07] <discord-raku-bot> <Nemokosch#9980> oh, this is what _produce_ is for

[16:07] <discord-raku-bot> <Nemokosch#9980> m: dd ^Inf.map(* ** 2).produce(&[,]).head(10);

[16:07] <discord-raku-bot> <Nemokosch#9980> precedence be like

[16:07] <discord-raku-bot> <Nemokosch#9980> dd (^Inf).map(* ** 2).produce(&[,]).head(10);

[16:09] <discord-raku-bot> <Nemokosch#9980> m: dd (^Inf).map(* ** 2).produce(&[,]).head(10);

[16:11] *** discord-raku-bot left
[16:12] *** discord-raku-bot joined
[16:20] <discord-raku-bot> <Nemokosch#9980> m: dd [\,] (1..^Inf) andthen .map({ .[*-1] X @$_ }) andthen .head(10)

[16:21] <discord-raku-bot> <Nemokosch#9980> almoost xd

[16:21] <discord-raku-bot> <Nemokosch#9980> m: [,] (1..^Inf) andthen .map({ .[*-1] X @$_ }) andthen .head(10) andthen .&dd

[16:21] <discord-raku-bot> <Nemokosch#9980> bruh moment

[16:22] <discord-raku-bot> <Nemokosch#9980> oh, it ate the backslash

[16:22] <discord-raku-bot> <Nemokosch#9980> m: [\\,] (1..^Inf) andthen .map({ .[*-1] X @$_ }) andthen .head(10) andthen .&dd

[16:23] <discord-raku-bot> <Nemokosch#9980> then

[16:23] <discord-raku-bot> <Nemokosch#9980> m: [\,] (1..^Inf) andthen .map({ .[*-1] X @$_ }) andthen .head(10) andthen .&dd

[16:23] <discord-raku-bot> <Nemokosch#9980> should have worked

[16:23] <discord-raku-bot> <Nemokosch#9980> no timeout

[16:23] <discord-raku-bot> <Nemokosch#9980> now THIS is cool

[16:29] <discord-raku-bot> <Nemokosch#9980> m: [\,] (1..^Inf) andthen .skip.map({ .[*-1] X .[0..^*-1] andthen .Slip}).head(10) andthen .say

[16:29] <discord-raku-bot> <Nemokosch#9980> I think you are starting to get the idea...

[16:42] *** dakkar left
[17:47] <discord-raku-bot> <Anton Antonov#7232> @Nemokosch#9980  I am getting errors with the last code you posted. Is that (un-)expected?

[17:48] <discord-raku-bot> <Nemokosch#9980> no, it's discord being discord, haha

[17:48] <discord-raku-bot> <Nemokosch#9980> it ate some characters

[17:48] <discord-raku-bot> <Nemokosch#9980> it turned *-1 to -1

[17:48] <discord-raku-bot> <Nemokosch#9980> and \\, to ,

[17:50] <discord-raku-bot> <Nemokosch#9980> btw it seems to me that no matter how clever this looks, it's actually too slow

[17:51] <discord-raku-bot> <Anton Antonov#7232> Ok, good to know -- is running for more than 20 sec on my machine...

[17:52] <discord-raku-bot> <Nemokosch#9980> that's probably because of some syntax problem though

[17:52] <discord-raku-bot> <Nemokosch#9980> the example I posted was still okay but when I tried to use it for the actual problem, it was too slow

[17:52] <discord-raku-bot> <Nemokosch#9980> or we will see, I'm rewriting it with simple nested loops

[17:54] *** [Coke] left
[17:58] *** [Coke] joined
[17:58] <discord-raku-bot> <Anton Antonov#7232> Ok

[18:03] <discord-raku-bot> <Nemokosch#9980> No... it's slow either way...

[18:03] <discord-raku-bot> <Nemokosch#9980> ngl I'm starting to not like this certain "weekly challenge"

[18:13] <discord-raku-bot> <Nemokosch#9980> it does work but it takes almost a minute to run

[18:17] <discord-raku-bot> <Nemokosch#9980> the "clever nesting" starts to blow up around 500

[18:17] <discord-raku-bot> <Nemokosch#9980> the other doesn't really blow up, after all, it's a nothing special O(n^2) thing

[18:24] <discord-raku-bot> <Nemokosch#9980> something shocks me though

[18:35] *** SmokeMachine left
[18:35] *** lizmat left
[18:35] *** Manifest0 left
[18:35] *** gfldex left
[18:35] *** thowe left
[18:35] *** sivoais left
[18:35] *** mjgardner left
[18:35] *** samebchase left
[18:35] *** TempIRCLogger left
[18:35] *** tbrowder left
[18:35] *** Util_ left
[18:35] *** [Coke] left
[18:35] *** discord-raku-bot left
[18:35] *** qorg11 left
[18:35] *** codesections left
[18:39] *** SmokeMachine joined
[18:39] *** [Coke] joined
[18:39] *** TempIRCLogger joined
[18:39] *** lizmat joined
[18:39] *** qorg11 joined
[18:39] *** Manifest0 joined
[18:39] *** codesections joined
[18:39] *** sivoais joined
[18:39] *** thowe joined
[18:39] *** gfldex joined
[18:39] *** mjgardner joined
[18:39] *** samebchase joined
[18:39] *** Util_ joined
[18:39] *** tbrowder joined
[18:40] *** discord-raku-bot joined
[18:40] <discord-raku-bot> <Nemokosch#9980> like I literally made the Python based on the Raku

[18:40] <discord-raku-bot> <Nemokosch#9980> and there is a solid magnitude difference

[19:13] <discord-raku-bot> <gfldex#8222> @Nemokosch#9980 Profiler reports one nasty:bind_cap_to_sig

[19:13] <discord-raku-bot> <gfldex#8222> gen/moar/BOOTSTRAP/v6c.nqp:1016     2345715     

[19:13] <discord-raku-bot> <gfldex#8222> 35.73% (17093.77ms)

[19:13] <discord-raku-bot> <gfldex#8222>     

[19:13] <discord-raku-bot> <gfldex#8222> 5.43% (2595.95ms)

[19:14] <discord-raku-bot> <Nemokosch#9980> what does that mean?

[19:15] <discord-raku-bot> <gfldex#8222> The following is the main culprit: my ($bigger-p, $smaller-p) := P($bigger), P($smaller);

[19:15] <discord-raku-bot> <gfldex#8222> That is a known problem. The compiler wont optimise that one.

[19:16] <discord-raku-bot> <Nemokosch#9980> my ($bigger-p, $smaller-p) = P($bigger), P($smaller);

[19:16] <discord-raku-bot> <Nemokosch#9980> is still slow like hell

[19:17] <discord-raku-bot> <gfldex#8222> just splitting that one makes it 3x faster:

[19:17] <discord-raku-bot> <gfldex#8222>         my $bigger-p = P($bigger);

[19:17] <discord-raku-bot> <gfldex#8222>         my $smaller-p =  P($smaller);

[19:17] <discord-raku-bot> <gfldex#8222> The rest will be Int vs float.

[19:19] <discord-raku-bot> <lakmatiol#8020> I rewrote the raku to Ints only using `div` and it's still 10s vs 1s

[19:19] <discord-raku-bot> <Nemokosch#9980> ^this

[19:19] <discord-raku-bot> <Nemokosch#9980> is it sqrt then? or what?

[19:19] <discord-raku-bot> <lakmatiol#8020> oh, 4s now

[19:19] <discord-raku-bot> <Nemokosch#9980> anyway, what is to optimize about     my ($bigger-p, $smaller-p) := P($bigger), P($smaller);

[19:19] <discord-raku-bot> <Nemokosch#9980> in the first place?

[19:20] <discord-raku-bot> <lakmatiol#8020> well, it shouldn't construct, then deconstruct, two objects. Even python optimizes it into 2 assignments

[19:21] <discord-raku-bot> <Nemokosch#9980> indeed it shouldn't xD

[19:23] <discord-raku-bot> <lakmatiol#8020> I remember having some issues with raku arithmetic performance before

[19:24] <[Coke]> Is there a gist somewhere with the code?

[19:24] <[Coke]> the formatting from discord to IRC makes me think it's incomplete.

[19:25] <discord-raku-bot> <Nemokosch#9980> even if performance doesn't have to be the biggest priority, I don't think losing to Python by a magnitude is acceptable...

[19:27] <discord-raku-bot> <Nahita#3882> Curious: you can `last` the outer loop right away in Raku right, i.e., without needing a `$found`?

[19:27] <gfldex> [Coke]: https://gist.github.com/449b64b8f4954c2fa51c40007254727f

[19:29] <discord-raku-bot> <Nemokosch#9980> yes, you can

[19:29] <discord-raku-bot> <Nemokosch#9980> I just removed it because I found it suspicious

[19:29] <discord-raku-bot> <Nemokosch#9980> but it wasn't a problem

[19:29] <discord-raku-bot> <Nemokosch#9980> I dumbified the loop as well

[19:29] <discord-raku-bot> <Nemokosch#9980> from for 1..^Inf -> $bigger

[19:31] <discord-raku-bot> <Nemokosch#9980> But apparently the more basic things were more problematic

[19:31] <discord-raku-bot> <Nemokosch#9980> and sadly those are harder to help

[19:32] <discord-raku-bot> <Nemokosch#9980> like can I do float arithmetics and still get a good enough result?

[19:32] <discord-raku-bot> <gfldex#8222> m:```

[19:32] <discord-raku-bot> <gfldex#8222> #! /usr/bin/env -S raku --profile=pentathing-profile.html

[19:32] <discord-raku-bot> <gfldex#8222> sub is-pentagon($c is raw) { (1+sqrt(1+24*$c))%%6 }

[19:32] <discord-raku-bot> <gfldex#8222> sub P($n is raw) { $n*(3*$n-1) div 2 }

[19:32] <discord-raku-bot> <gfldex#8222> my int $bigger = 1;

[19:32] <discord-raku-bot> <gfldex#8222> BAIL: loop {

[19:32] <discord-raku-bot> <gfldex#8222>     $bigger++;

[19:32] <discord-raku-bot> <gfldex#8222>     for 1..^$bigger -> $smaller is raw {

[19:32] <discord-raku-bot> <gfldex#8222>         my $bigger-p := P($bigger);

[19:32] <discord-raku-bot> <gfldex#8222>         my $smaller-p := P($smaller);

[19:32] <discord-raku-bot> <gfldex#8222>         if is-pentagon($bigger-p + $smaller-p) && is-pentagon($bigger-p - $smaller-p) {

[19:32] <discord-raku-bot> <gfldex#8222>             say "$bigger $smaller";

[19:32] <discord-raku-bot> <gfldex#8222>             last BAIL;

[19:32] <discord-raku-bot> <gfldex#8222>         }

[19:33] <discord-raku-bot> <gfldex#8222> That's how far I got, without a rewrite.

[19:33] <discord-raku-bot> <Nemokosch#9980> What about using the for 1..^Inf loop?

[19:34] <[Coke]> Guessing you'd do better with more explicit types.

[19:35] <discord-raku-bot> <Nemokosch#9980> This is definitely a big deal though

[19:35] <discord-raku-bot> <gfldex#8222> Well, I'm at a point where I would need to understand the algorithm but can't, because I'm really hungry. :)

[19:35] <discord-raku-bot> <Nemokosch#9980> and it seems to me that it's known

[19:36] <discord-raku-bot> <gfldex#8222> Pizza Time! \o/

[19:36] <discord-raku-bot> <Nemokosch#9980> 4 vs 1 is still big but let's say it's not a show-stopper

[19:36] <discord-raku-bot> <Nemokosch#9980> 30 vs 1 is a show-stopper

[19:45] <[Coke]> https://gist.github.com/coke/5b519056a5ab64e78f7f15dff9c33339

[19:46] <discord-raku-bot> <gfldex#8222> m:```

[19:46] <discord-raku-bot> <gfldex#8222> sub is-pentagon(Int $c --> Bool) { (1+sqrt(1+24*$c))%%6 }

[19:46] <discord-raku-bot> <gfldex#8222> sub P(int $n --> Int) { ($n*(3*$n-1)/2).Int }

[19:46] <discord-raku-bot> <gfldex#8222> my int $bigger = 1;

[19:46] <discord-raku-bot> <gfldex#8222> BAIL: loop {

[19:46] <discord-raku-bot> <gfldex#8222>     $bigger++;

[19:46] <discord-raku-bot> <gfldex#8222>     for 1..^$bigger -> \smaller {

[19:46] <discord-raku-bot> <gfldex#8222>         my Int $bigger-p = P($bigger);

[19:46] <discord-raku-bot> <gfldex#8222>         my Int $smaller-p = P(smaller);

[19:46] <discord-raku-bot> <gfldex#8222>         if is-pentagon($bigger-p + $smaller-p) && is-pentagon($bigger-p - $smaller-p) {

[19:46] <discord-raku-bot> <gfldex#8222>             say $bigger, smaller;

[19:46] <discord-raku-bot> <gfldex#8222>             last BAIL;

[19:46] <discord-raku-bot> <gfldex#8222> Didn't help. :(

[19:46] <discord-raku-bot> <Nemokosch#9980> rippers

[19:47] <[Coke]> the original version you had ran in 9+ seconds here, the version at my gist (faster+1) is running in 7.3s

[19:48] <[Coke]> m: say 7.3/9.4

[19:48] <camelia> rakudo-moar 186bd0b02: OUTPUT: «0.776596␤»

[19:48] <lizmat> runs in 4.35 secs for me

[19:49] <[Coke]> (my version has mostly "int" vs. "Int" which may help; there's one Int left that is doing an explicit cast on the result of P(), not sure if we can eliminate that... oh, yah, if we do it with int math instead of Rat math.

[19:54] <lizmat> -> int $smaller also helps a bit for me

[19:57] <lizmat> also: P and is-pentagon are getting inlined pretty quickly, so no real point inlining them menually

[19:57] <lizmat> *manually

[19:58] <discord-raku-bot> <Nemokosch#9980> is there a point in caching P?

[20:01] *** discord-raku-bot left
[20:01] *** discord-raku-bot joined
[20:07] <discord-raku-bot> <gfldex#8222> m:```

[20:07] <discord-raku-bot> <gfldex#8222> use v6.*;

[20:07] <discord-raku-bot> <gfldex#8222> sub is-pentagon($c is raw) { (1+sqrt(1+24*$c))%%6 }

[20:07] <discord-raku-bot> <gfldex#8222> sub P($n is raw) { $n*(3*$n-1) div 2 }

[20:07] <discord-raku-bot> <gfldex#8222> my atomicint $bail = 0;

[20:07] <discord-raku-bot> <gfldex#8222> (^∞).hyper(:batch(64)).map( -> \b {

[20:07] <discord-raku-bot> <gfldex#8222>     last if $bail;

[20:07] <discord-raku-bot> <gfldex#8222>     for (1..^b) -> \s {

[20:07] <discord-raku-bot> <gfldex#8222>         my \bp = P(b);

[20:07] <discord-raku-bot> <gfldex#8222>         my \sp = P(s);

[20:07] <discord-raku-bot> <gfldex#8222>         if is-pentagon(bp + sp) && is-pentagon(bp - sp) {

[20:07] <discord-raku-bot> <gfldex#8222>             say [b, s];

[20:07] <discord-raku-bot> <gfldex#8222>             $bail⚛++;

[20:07] <discord-raku-bot> <gfldex#8222>             say now - BEGIN now;

[20:07] <discord-raku-bot> <gfldex#8222> That runs with 1.277238915s on my box but does not terminate.

[20:07] <discord-raku-bot> <gfldex#8222> And I think it should terminate indeed.

[20:09] <discord-raku-bot> <Nemokosch#9980> pff

[20:09] <discord-raku-bot> <gfldex#8222> https://gist.github.com/7b2f312317dc7a598c2627367a05f3fd

[20:09] <discord-raku-bot> <gfldex#8222> The speed gain isn't that fast because we stop way way before we hit ^∞ .

[20:13] <lizmat> gfldex: there's no guarantee you'll see the first bail?

[20:13] <lizmat> hmmm... I guess with hyper you would  :-)

[23:00] <discord-raku-bot> <stevied#8273> is there a way to generate numbered lists with pod? https://docs.raku.org/language/pod#Lists

[23:48] <discord-raku-bot> <gfldex#8222> That's up to the renderer.

