[00:14] *** jgaz left
[00:43] *** jgaz joined
[01:10] *** jgaz left
[02:56] *** frost joined
[06:20] *** tirnanog joined
[14:14] <discord-raku-bot> <Anton Antonov#7232> Good to know!

[14:17] <discord-raku-bot> <Anton Antonov#7232> I noticed that after studying Raku for a few years it is much easier to advance my learning of otherprogramming languages.

[14:43] <discord-raku-bot> <Anton Antonov#7232> I noticed that after studying Raku for a few years it is much easier to advance my learning of other programming languages.

[14:57] *** frost left
[16:10] <discord-raku-bot> <Nemokosch#9980> Raku has a very clever built-in collection of data types, for example

[16:10] <discord-raku-bot> <Nemokosch#9980> and very nice meta operators

[16:12] *** razetime joined
[17:05] *** razetime left
[19:18] *** tirnanog left
[19:28] <discord-raku-bot> <klebs#2209> im seeing a case where a grammar parse ordinarily fails quickly, but then hangs when i try to trace it

[19:28] <discord-raku-bot> <klebs#2209> if i kill the trace, i get an output like this:

[19:28] <discord-raku-bot> <klebs#2209> looks like some kind of infinite loop

[19:28] <discord-raku-bot> <klebs#2209> but my question is: why would this only be triggered once i add `use Grammar::Tracer;`

[19:28] <discord-raku-bot> <klebs#2209> no other changes

[19:42] <discord-raku-bot> <klebs#2209> ```

[19:43] <discord-raku-bot> <klebs#2209> #!/usr/bin/env raku

[19:43] <discord-raku-bot> <klebs#2209> use my-grammar;

[19:43] <discord-raku-bot> <klebs#2209> my $in     = $*IN.slurp.chomp;

[19:43] <discord-raku-bot> <klebs#2209> grammar T {

[19:43] <discord-raku-bot> <klebs#2209>     token LIT-CHAR {

[19:43] <discord-raku-bot> <klebs#2209>         \' . \'

[19:43] <discord-raku-bot> <klebs#2209>     }

[19:43] <discord-raku-bot> <klebs#2209> }

[19:43] <discord-raku-bot> <klebs#2209> say T.parse("'a'", rule => "LIT-CHAR");

[19:43] <discord-raku-bot> <klebs#2209> my $parsed = MyGrammar.parse(

[19:43] <discord-raku-bot> <klebs#2209>     $in,

[19:43] <discord-raku-bot> <klebs#2209>     rule => "LIT-CHAR"

[19:43] <discord-raku-bot> <klebs#2209> );

[19:43] <discord-raku-bot> <klebs#2209> MyGrammar is, however, a much more substantial grammar with many more rules, but LIT-CHAR is at the leaf position

[19:45] <discord-raku-bot> <klebs#2209> whoops maybe this shouldn't be in beginner

[19:45] <discord-raku-bot> <klebs#2209> (this example is with Grammar::Tracer turned *off*, turning it on *hangs* on the second parse)

[19:45] <discord-raku-bot> <klebs#2209> ```

[19:45] <discord-raku-bot> <klebs#2209> #!/usr/bin/env raku

[19:45] <discord-raku-bot> <klebs#2209> use my-grammar;

[19:45] <discord-raku-bot> <klebs#2209> my $in     = $*IN.slurp.chomp;

[19:45] <discord-raku-bot> <klebs#2209> grammar T {

[19:45] <discord-raku-bot> <klebs#2209>     token LIT-CHAR {

[19:45] <discord-raku-bot> <klebs#2209>         \' . \'

[19:45] <discord-raku-bot> <klebs#2209>     }

[19:45] <discord-raku-bot> <klebs#2209> }

[19:45] <discord-raku-bot> <klebs#2209> say T.parse("'a'", rule => "LIT-CHAR");

[19:47] <MasterDuke> i think it's known that Grammar::Tracer can sometimes interfere with what it's tracing

[19:47] <discord-raku-bot> <klebs#2209> (this example is with Grammar::Tracer turned *off*, turning it on *hangs* on the second parse)

[19:47] <discord-raku-bot> <klebs#2209> ```

[19:47] <discord-raku-bot> <klebs#2209> #!/usr/bin/env raku

[19:47] <discord-raku-bot> <klebs#2209> use my-grammar;

[19:47] <discord-raku-bot> <klebs#2209> my $in     = "'a'";

[19:47] <discord-raku-bot> <klebs#2209> grammar T {

[19:47] <discord-raku-bot> <klebs#2209>     token LIT-CHAR {

[19:47] <discord-raku-bot> <klebs#2209>         \' . \'

[19:47] <discord-raku-bot> <klebs#2209>     }

[19:47] <discord-raku-bot> <klebs#2209> }

[19:47] <discord-raku-bot> <klebs#2209> say T.parse($in, rule => "LIT-CHAR");

[19:47] <discord-raku-bot> <klebs#2209> my $parsed = MyGrammar.parse(

[19:47] <MasterDuke> i don't know if there's any workaround though

[19:48] <discord-raku-bot> <klebs#2209> debugging the debugger üôÇ

[19:49] <discord-raku-bot> <klebs#2209> that may explain the hang, however why do we get a `failed match`?

[19:49] <discord-raku-bot> <klebs#2209> (when running without Grammar::Tracer)

[19:49] <discord-raku-bot> <klebs#2209> seems to me like it should succeed because it is the same rule at toplevel

[19:53] <MasterDuke> you're saying you get `ÔΩ¢'a'ÔΩ£` but then it fails the second time?

[19:57] <discord-raku-bot> <klebs#2209> yes

[19:59] <discord-raku-bot> <klebs#2209> one other detail perhaps of note is that this grammar is created by mixing in about 130 different roles

[19:59] <discord-raku-bot> <klebs#2209> so it is pretty big

[19:59] <discord-raku-bot> <klebs#2209> meant to parse a full language

[19:59] <discord-raku-bot> <klebs#2209> but i dont see why that should cause a failed match when i directly specify the rule via the parse method as shown above

[20:03] <MasterDuke> i haven't actually done much with grammars so not sure i can be any more use, but if guifa or codesections can't help you here, i'd recommend asking moritz over in #raku

[20:05] <discord-raku-bot> <klebs#2209> thanks for the help üôè

[20:07] <MasterDuke> np

[20:56] <discord-raku-bot> <klebs#2209> i found a way to drill down and locate the source of the problem

[20:57] <discord-raku-bot> <klebs#2209> basically just binary search commenting and uncommenting batches of tokens

[20:57] <discord-raku-bot> <klebs#2209> will find it soon

[20:57] <discord-raku-bot> <klebs#2209> i think there might be some other rule the grammar engine doesn't like

[20:57] <discord-raku-bot> <klebs#2209> which is causing faulty behavior

[20:57] <discord-raku-bot> <klebs#2209> that is my best gues

[20:57] <discord-raku-bot> <klebs#2209> that is my best guess

[20:59] <discord-raku-bot> <klebs#2209> yep that was the problem

[20:59] <discord-raku-bot> <klebs#2209> for some reason this was an error:

[20:59] <discord-raku-bot> <klebs#2209> `token MATCH { match }`

[20:59] <discord-raku-bot> <klebs#2209> changing to `token MATCH_ { match }`

[20:59] <discord-raku-bot> <klebs#2209> solved

[21:04] <discord-raku-bot> <gfldex#8222> @klebs#2209 I believe you stepped onto: https://github.com/Raku/nqp/blob/master/src/QRegex/Cursor.nqp#L1101

[21:04] <MasterDuke> ah yes, using names already used in the core can cause odd problems

[21:05] <discord-raku-bot> <gfldex#8222> or https://github.com/rakudo/rakudo/blob/master/src/core.c/Match.pm6#L40

