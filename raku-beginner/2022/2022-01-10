[00:57] <discord-raku-bot> <stevied#8273> ok, throwing curlies around the where clause clause did the trick: `{$mod ~~ any @modifiers}`. but I have no idea why

[00:58] <discord-raku-bot> <stevied#8273> regular old parentheses work, too. I guess it must have been an order of precedence problem

[01:10] <discord-raku-bot> <6a4h8#5380> OK so I'm switching from Perl to Raku - I had `qr{}` - it says to use `rx//` instead

[01:10] <discord-raku-bot> <6a4h8#5380> I guess I'll try that

[01:22] <SmokeMachine> m: say :($a where .count == 1).perl.substr: 1

[01:22] <camelia> rakudo-moar fc4a027ff: OUTPUT: «($a where { ... })␤»

[01:24] <SmokeMachine> stevied#8273: it seems to be the problem: ^^

[01:25] <discord-raku-bot> <6a4h8#5380> OK so does Raku have `(*F)`?

[01:25] <SmokeMachine> m: sub a($a where {…}) {}; a 42 # <- stevied#8273

[01:25] <camelia> rakudo-moar fc4a027ff: OUTPUT: «Stub code executed␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:27] <SmokeMachine> 6a4h8#5380: sorry, what do you mean by (*F)?

[01:29] <discord-raku-bot> <6a4h8#5380> I mean like the verb `FAIL` which will fail current match (unless there is a branch to take)

[01:29] <discord-raku-bot> <6a4h8#5380> I'm porting from perl5

[01:29] <SmokeMachine> sub triple(Str:D $app1, Str:D $app2, Str:D $key where .chars == 1, Str $mod? where { !.defined || $_ ~~ any @modifiers = 'command' }) {}; triple “a”, “b”

[01:30] <SmokeMachine> m: sub triple(Str:D $app1, Str:D $app2, Str:D $key where .chars == 1, Str $mod? where { !.defined || $_ ~~ any @modifiers = 'command' }) {}; triple “a”, “b”

[01:30] <camelia> rakudo-moar fc4a027ff: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@modifiers' is not declared␤at <tmp>:1␤------> tr $mod? where { !.defined || $_ ~~ any ⏏@modifiers = 'command' }) {}; triple “a”␤»

[01:31] <SmokeMachine> m: my @modifiers; sub triple(Str:D $app1, Str:D $app2, Str:D $key where .chars == 1, Str $mod? where { !.defined || $_ ~~ any @modifiers = 'command' }) {}; triple “a”, “b”

[01:31] <camelia> rakudo-moar fc4a027ff: OUTPUT: «Too few positionals passed; expected 3 or 4 arguments but got 2␤  in sub triple at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:32] <SmokeMachine> m: my @modifiers; sub triple(Str:D $app1, Str:D $app2, Str:D $key where .chars == 1, Str $mod? where { !.defined || $_ ~~ any @modifiers = 'command' }) {}; triple “a”, “b”, “c”

[01:32] <camelia> rakudo-moar fc4a027ff: ( no output )

[01:33] <SmokeMachine> stevied#8273 ^^

[01:37] <SmokeMachine> m: say “aaa” ~~ /“a”+ <!>/

[01:37] <camelia> rakudo-moar fc4a027ff: OUTPUT: «Nil␤»

[01:37] <SmokeMachine> 6a4h8#5380: something like this ^^?

[01:38] <discord-raku-bot> <6a4h8#5380> Ah ok I see thanks - I think yes - so is a `<!>` a shorthand for lookahead nothing?

[01:39] <discord-raku-bot> <6a4h8#5380> Or it's its own thing

[01:44] <guifa> <!> is an automatic fail

[01:48] <discord-raku-bot> <6a4h8#5380> OK I see thanks

[01:52] <guifa> (there's not much of a use for it, but it does exist technically) 

[02:00] <discord-raku-bot> <stevied#8273> SmokeMachine, I solved it with parens

[02:21] <discord-raku-bot> <6a4h8#5380> Do we have named recursion in Raku?

[02:35] <discord-raku-bot> <stevied#8273> Ugh. stumped again. Using Template::Classic module. All the tokens that are replaced are preceded by a space character. I've been staring at this module code for 1/2 hour and can't figure out how that's happening: https://github.com/chloekek/Template-Classic/blob/master/lib/Template/Classic.pm6#L102

[02:35] <discord-raku-bot> <stevied#8273> Ugh. stumped again. Using Template::Classic module. All the tokens that are replaced are preceded and followed by a space character. I've been staring at this module code for 1/2 hour and can't figure out how that's happening: https://github.com/chloekek/Template-Classic/blob/master/lib/Template/Classic.pm6#L102

[02:35] <discord-raku-bot> <stevied#8273> preceded and followed by a space character

[05:46] <discord-raku-bot> <stevied#8273> ok, got it. Good exercise, but maddening. This is hard. Anyway, it turns out that `template` returns a sequence. So throwing a `.join` onto the return value fixes things up. No spaces before and after tokens.

[06:54] *** Flwyd left
[08:09] *** [Coke] left
[08:09] *** MasterDuke left
[08:12] *** TempIRCLogger left
[08:14] *** TempIRCLogger__ left
[08:18] *** Manifest0 left
[08:20] *** TempIRCLogger joined
[08:20] *** [Coke] joined
[08:20] *** MasterDuke joined
[08:20] *** destroycomputers joined
[08:20] *** camelia joined
[08:20] *** SmokeMachine joined
[08:44] *** dakkar joined
[14:40] <[Coke]> "named recursion" ?

[14:41] <[Coke]> if I read this right, then yes

[14:46] <[Coke]> m: sub fact($n) { $n>0 ?? $n*fact($n-1) !! 1 }; say fact(4)

[14:46] <camelia> rakudo-moar a90369e10: OUTPUT: «24␤»

[14:46] <[Coke]> If you mean something more specific, please let me know

[15:00] <discord-raku-bot> <Nemokosch#9980> that was my first idea as well

[15:01] <discord-raku-bot> <Nemokosch#9980> but maybe it's meant to be understood in the context of regular expressions

[15:35] *** stevied joined
[15:36] <stevied> ok, joining directly in IRC instead of discord. test

[15:36] <stevied> seems to work. cool

[15:36] <stevied> `markdown test`

[15:36] <stevied> nice

[15:37] <stevied> ```

[15:37] <stevied> one two

[15:37] <stevied> ```

[15:37] <stevied> that doesn't work

[15:37] <stevied> anyway to add a short block of code or should I use pastebin?

[15:37] <lizmat> pastebin / gist.github.com / whatever   :-)

[15:41] <discord-raku-bot> <stevied#8273> ```

[15:41] <discord-raku-bot> <stevied#8273> fenced code test from discord

[15:41] <discord-raku-bot> <stevied#8273> ```

[15:46] <stevied> so I'm trying to see if there is a bug in Classic::Template module. I'm not sure if there is or if it's just documented poorly. To flesh it out, I got this code: https://paste.debian.net/1226635/

[15:47] <stevied> it prints 3 dots

[15:47] <stevied> if I take away the `lazy` keyword, it output everything just fine. This is the same way the Classic::Template module behaves.

[15:48] <stevied> this lazy/take stuff is very confusing to me. anyone have any ideas?

[15:51] <stevied> the function is returning a Seq

[15:55] <discord-raku-bot> <stevied#8273> I guess sequences throw the values away after they are used? https://docs.raku.org/language/list#Sequences

[15:55] <discord-raku-bot> <stevied#8273> so maybe that's the problem? I don't know. But I can't figure out a way to print out the Seq object.

[16:01] <lizmat> A Seq does *not* preserve values, generally, unless you call ".cache" on it

[16:02] <discord-raku-bot> <stevied#8273> so how would I modify my code snippet to pull out one string from the blah() function?

[16:04] <discord-raku-bot> <stevied#8273> it works if I take out the `lazy` keyword

[16:04] <discord-raku-bot> <stevied#8273> but the module uses the `lazy` keyword

[16:04] <discord-raku-bot> <stevied#8273> the Classic::Template

[16:05] <destroycomputers> stevied, would it work for you if you use `eager $out` to get a reified sequence?

[16:05] * lizmat is still unsure what the problem, or the desired outcome is

[16:06] <lizmat> "pull out one string"  ?   which one?  the first ??

[16:07] <destroycomputers> I assume he's just trying to to print the sequence or collect it into a string

[16:08] <lizmat> .say for blah("foo") ?

[16:29] <discord-raku-bot> <stevied#8273> ok, throwing a .list method on the sequence and then running that through a for loop allows me to output what is returned from the module with lazy

[16:32] <discord-raku-bot> <stevied#8273> I'm not sure what to make of the Classic::Template module, though. Not sure if it's out-of-date or poorly documented or what it is trying to achieve with the lazy gather. It says something about using lazy to avoid a bug. I'm not sure that bug still exists.

[16:35] <lizmat> stevied: it appears to be a project started about 2 years ago, but then basically abandoned

[16:36] <lizmat> nowadays I use Cro::WebApp::Template https://cro.services/docs/reference/cro-webapp-template for my templating needs

[16:36] <lizmat> but that's usually in combination with a Cro server  :-)

[16:36] <stevied> I do want to learn Cro

[16:37] <discord-raku-bot> <stevied#8273> yes, that's what I gathered, too

[16:37] <stevied> for right now, I just want to insert data into a template file whether it be HTML or not

[16:39] <stevied> figured I'd start with something simple, but this module does not look like a good choice.

[16:40] <dakkar> stevied: https://modules.raku.org/dist/Template::Mustache:cpan:SOFTMOTH ?

[16:43] <stevied> thanks! I'll give that a look

[16:53] <thowe> mustache is...  kinda different.

[16:59] <stevied> I don't mind different. Just want something that works without me spending 6 hours trying to figure out how to do somethign simple.

[17:00] <stevied> but the good thing that came out of Classic::Template is I learned some stuff. which is my primary objective.

[17:03] <thowe> Cro is on the horizon for me too, I think.

[17:03] <stevied> yeah, i want to find a replacement for my jekyll site

[17:04] <stevied> i want to manage the content with markdown files

[17:05] <stevied> i do that now with jekyll but I don't know anything about it and have no interest in it. since I'm learning raku, I'm thinking cro would be a good exercise.

[17:06] <thowe> I played with Jekyll a little, but I found it wanting compared to Hugo

[17:07] <stevied> these technologies are all kind of crazy. there are so many moving parts. it's insane. I miss uploading files with Dreamweaver. It was tedious but you at least knew all the moving parts. there weren't many.

[17:08] <thowe> Honestly, I find myself going back to ttree more often than not when I just need a static site.  Or I just build a Mojo app.

[17:36] *** dakkar left
[18:05] <stevied> is there a way I can determine what the signature of a function is from inside the function?

[18:16] <thowe> the signature method, if you can call it on the subroutine object..

[18:17] <thowe> I think.  As long as you can access the is that bound to "self"  so self.signature?

[18:18] <discord-raku-bot> <stevied#8273> what would the invocant be for that?

[18:20] <discord-raku-bot> <stevied#8273> it can be done with &name_of_sub.signature

[18:20] <discord-raku-bot> <stevied#8273> self doesn't seem to work

[18:20] <thowe> yeah, seeing that.

[18:20] <discord-raku-bot> <stevied#8273> I guess I would need a way to get the name of current function

[18:21] <discord-raku-bot> <stevied#8273> like caller for perl

[18:22] <discord-raku-bot> <stevied#8273> but ok, anyway, .signature is good enough with the subroutine name hard-coded

[18:22] <discord-raku-bot> <stevied#8273> thanks

[18:22] <thowe> how do you use the channel interpreter?

[18:23] <thowe> camelia

[18:23] <thowe> m: my $sub1 = sub (Str $string) { say $sub1.signature; say $string }; $sub1('Hi');

[18:23] <camelia> rakudo-moar a90369e10: OUTPUT: «(Str $string)␤Hi␤»

[18:24] <thowe> would that work for you?

[18:24] <discord-raku-bot> <lakmatiol#8020> &?BLOCK IIRC exists

[18:24] <discord-raku-bot> <lakmatiol#8020> And probably something similar for current function

[18:24] <discord-raku-bot> <stevied#8273> yeah

[18:26] <thowe> &?ROUTINE

[18:26] <thowe> maybe

[18:26] <thowe> but if you have named the sub would not my method work?  maybe you haven't/can't in your instance?

[18:28] <discord-raku-bot> <stevied#8273> yes, it works. I'm using it.

[18:29] <discord-raku-bot> <stevied#8273> i'm mostly just experimenting with stuff and trying random things to see what's possible.

[18:33] <thowe> I imagine some lambda functions or higher order stuff you may not have the sub name, so, yeah...

[18:46] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/01/10/2022-01-02-perching/

[18:47] <discord-raku-bot> <stevied#8273> wow, I just did something pretty cool with raku. no idea if it's useful but it's neat: https://paste.debian.net/1226665/

[18:49] <discord-raku-bot> <stevied#8273> now I can easily create other subroutines for different templates

[18:49] <discord-raku-bot> <stevied#8273> now, I'm using EVAL to do this magic which I'm guessing might be a little hacky with Raku. Is there a better way to do this?

[18:56] <lizmat> stevied: not yet: that's one of the areas in which RakuAST will shine  :-)

[18:59] <discord-raku-bot> <stevied#8273> sounds like something way above my skill level at the moment. but good to know! https://www.jnthn.net/papers/2020-cic-rakuast.pdf

[19:12] <lizmat> basically, what it will allow you to do, is to build a program programmatically from objects, rather than from a piece of source code that you constructed

[19:12] <discord-raku-bot> <stevied#8273> huh, sounds wild

[19:48] <discord-raku-bot> <lakmatiol#8020> so like lisp and prolog, but with more syntactic constructors than cons and a functor respectively

[19:49] <discord-raku-bot> <stevied#8273> I want to pass the elements of an array to a sub as individual values. tried  `render-list flat @values;` but still says I'm only passing one argument

[19:49] <discord-raku-bot> <stevied#8273> `render-list` expects a bunch of scalar args

[19:51] <discord-raku-bot> <stevied#8273> ok, got it. need `|@values`

[19:54] <discord-raku-bot> <stevied#8273> ok, now I feel like I'm getting a tiny hang of raku after a week of reading stuff.  one more pesky question. Here is my  little program now: https://paste.debian.net/1226671/

[19:54] <discord-raku-bot> <stevied#8273> Is there a way to change line 3 so ghat instead of retyping in all the names of the arguments, I can collect up the values automatically?

[19:59] <MasterDuke> heh. this seems like you could use what i think you were asking about before. make the outer sub take a capture with a subsignature that matches what you have now and then just pass the capture to the inner sub

[19:59] <discord-raku-bot> <stevied#8273> ok, now I feel like I'm getting a tiny hang of raku after a week of reading stuff.  one more pesky question. Here is my  little program now: https://paste.debian.net/1226671/

[19:59] <discord-raku-bot> <stevied#8273> Is there a way to change line 3 so that instead of retyping in all the names of the arguments, I can collect up the values automatically?

[20:02] <discord-raku-bot> <stevied#8273> not quite sure I follow. sorry.

[20:03] <stevied> m: my $sub1 = sub (Str $string) { say $sub1.signature; say $string }; $sub1('Hi');

[20:03] <camelia> rakudo-moar a90369e10: OUTPUT: «(Str $string)␤Hi␤»

[20:03] <stevied> that line?

[20:04] <MasterDuke> m: sub a(|c(Int $b, Str $c)) { b(|c) }; sub b(Int $c, Str $d) { say "$c $d"; }; a(1, "bc")

[20:04] <camelia> rakudo-moar a90369e10: OUTPUT: «1 bc␤»

[20:04] <stevied> ah, I think I see

[20:04] <stevied> lemme try

[20:07] <MasterDuke> m: sub a(|c(Int $b, Str $c)) { b(|c) }; sub b(*@v) { .say for @v }; a(1, "bc"); a("de", 2)    # better matching your code

[20:07] <camelia> rakudo-moar a90369e10: OUTPUT: «1␤Type check failed in binding to parameter '$b'; expected Int but got Str ("de")␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤bc␤»

[20:07] <stevied> ok, I I htink I have to change the print_template function now

[20:07] <MasterDuke> output looks ugly in irc, but first call succeeded and second fails because the types don't match the capture's subsignature

[20:08] <stevied> I need to destructure the new signature differently, I think

[20:12] <discord-raku-bot> <stevied#8273> this is meta programming I've never done anything like before. hard to get used to

[20:34] <discord-raku-bot> <stevied#8273> ok, almost there. this works: https://paste.debian.net/1226675/

[20:34] <discord-raku-bot> <stevied#8273> however, one little problem. If I do not pass the 4th argument which has a default, things break

[20:34] <discord-raku-bot> <stevied#8273> how do I get the default argument into the |c capture?

[21:09] <MasterDuke> that's interesting

[21:20] <discord-raku-bot> <stevied#8273> I posted this question on SO: https://stackoverflow.com/questions/70658741/how-do-i-capture-default-arguments-with-c

[21:20] <discord-raku-bot> <stevied#8273> I'm thinking it might even be a bug

[21:20] <discord-raku-bot> <gfldex#8222> That's a bug.

[21:20] <discord-raku-bot> <stevied#8273> yeah? no shit. huh.

[21:20] <MasterDuke> too bad, quoting jnthn from over in #moarvm where i just asked this. "Not possible; c is the original incoming argument capture, which you unpack; unpacking the capture does not, however, mutate it"

[21:20] <discord-raku-bot> <gfldex#8222> Do you want to file the issue?

[21:22] <discord-raku-bot> <stevied#8273> so MasterDuke, does that mean it can't be fixed?

[21:22] <discord-raku-bot> <gfldex#8222> Then Rakudo should warn.

[21:24] <discord-raku-bot> <gfldex#8222> Actually, that should be a compile time error.

[21:24] <discord-raku-bot> <gfldex#8222> m:```

[21:24] <discord-raku-bot> <gfldex#8222>     sub frontend(|c ($arg1, $arg2, $arg3) ) {

[21:24] <discord-raku-bot> <gfldex#8222>         backend(|c);

[21:24] <discord-raku-bot> <gfldex#8222>     }

[21:24] <discord-raku-bot> <gfldex#8222>     sub backend($arg1, $arg2, $arg3) { say $arg1, $arg2, $arg3 }

[21:24] <discord-raku-bot> <gfldex#8222>     frontend(1,2,3);

[21:24] <discord-raku-bot> <gfldex#8222> ```

[21:24] <discord-raku-bot> <gfldex#8222> m:```

[21:24] <discord-raku-bot> <gfldex#8222>     sub frontend(|c ($arg1, $arg2, $arg3 = 42)) {

[21:24] <discord-raku-bot> <gfldex#8222>         backend(|c);

[21:24] <discord-raku-bot> <gfldex#8222>     }

[21:24] <discord-raku-bot> <gfldex#8222> You have to mirror the default by hand.

[21:24] <MasterDuke> not terribly cleanly

[21:24] <MasterDuke> m: sub a(|c(Int $b, Str $c? = "bar")) { my $z = (|c).Array; $z.push("bar") if c.elems == 1; b(|$z) }; sub b(*@v) { .say for @v }; a(1, "bc"); a(2)

[21:24] <camelia> rakudo-moar a90369e10: OUTPUT: «1␤bc␤2␤bar␤»

[21:26] <MasterDuke> m: sub a(|c(Int $b, Str $c? = "bar")) { my $z = (|c).Array; $z.push($c) if c.elems == 1; b(|$z) }; sub b(*@v) { .say for @v }; a(1, "bc"); a(2)    # better

[21:26] <camelia> rakudo-moar a90369e10: OUTPUT: «1␤bc␤2␤bar␤»

[21:27] <discord-raku-bot> <stevied#8273> i guess I'll have to pull the default out of the signature then

[21:27] <discord-raku-bot> <stevied#8273> that's a pain

[21:27] <MasterDuke> a little confusing because i have both `c` and `$c`, but that's just my poor choice of names

[21:28] <discord-raku-bot> <stevied#8273> ok. thanks

[21:28] <discord-raku-bot> <stevied#8273> yeah, i have a hell of a time reading this code in one line

[21:28] <discord-raku-bot> <gfldex#8222> m:```

[21:28] <discord-raku-bot> <gfldex#8222>     sub frontend(|c ($arg1, $arg2, $arg3?)) {

[21:28] <discord-raku-bot> <gfldex#8222>         my \d = \(|c[0,1], c[2] // 42);

[21:28] <discord-raku-bot> <gfldex#8222>         backend(|d);

[21:28] <discord-raku-bot> <gfldex#8222>     }

[21:28] <discord-raku-bot> <gfldex#8222>     sub backend($arg1, $arg2, $arg3) {

[21:28] <discord-raku-bot> <gfldex#8222>         say $arg1, $arg2, $arg3

[21:28] <discord-raku-bot> <gfldex#8222>     }

[21:28] <discord-raku-bot> <gfldex#8222>     frontend(1,2);

[21:28] <discord-raku-bot> <gfldex#8222> ```

[21:28] <discord-raku-bot> <gfldex#8222> This works but looks ugly to me.

[21:29] <discord-raku-bot> <stevied#8273> interesting

[21:30] <discord-raku-bot> <gfldex#8222> And you can't have intentionally undefined values in `$arg3`.

[21:30] <discord-raku-bot> <stevied#8273> what is the backslash doing?

[21:30] <discord-raku-bot> <gfldex#8222> \() is the Capture literal.

[21:30] <discord-raku-bot> <gfldex#8222> \\()

[21:30] <discord-raku-bot> <gfldex#8222> https://docs.raku.org/type/Capture

[21:31] <discord-raku-bot> <stevied#8273> ok, thanks. yeah, i read that before but was over my head at the time

[21:32] *** qorg11 left
[21:33] *** qorg11 joined
[21:34] <MasterDuke> re your comment about meta-programming, i don't do it much in what raku i write, but it got a lot less exotic after i used racket and closure for while. and then i realized meta-programming is just programming. metadata at one level is just data at the next level (e.g., who you're addressing in a letter might be considered meta-data at the level of

[21:34] <MasterDuke> the letter, with the content being the body. but the whole letter is the content of the envelope, with the address being meta-data at that level)

[21:41] <discord-raku-bot> <stevied#8273> racket and closure?

[21:41] <MasterDuke> *clozure

[21:42] <MasterDuke> racket is a scheme and clozure is a lisp that runs on the jvm

[21:43] <discord-raku-bot> <stevied#8273> yeah, I get the concept of it. it just requires one extra layer of abstraction.

[21:45] <discord-raku-bot> <stevied#8273> it seems like it's going to take a lot of practice to get good with it

[21:45] <discord-raku-bot> <lakmatiol#8020> clojure or clozure?

[21:45] <MasterDuke> i...can't type (or see what i'm typing apparently). clojure

[21:47] <discord-raku-bot> <lakmatiol#8020> what really made metaprogramming click for me was prolog, being able to implement DCGs just by defining a top level predicate `-->` is just something else

[21:48] <discord-raku-bot> <stevied#8273> i'm just an intermediate programmer. playing around a little bit with moose introspection and AUTOLOAD is about as advanced as I get.

[21:49] <discord-raku-bot> <stevied#8273> so Raku learning curve is pretty steep for me

[21:49] <discord-raku-bot> <stevied#8273> and perl is the only language I am fairly familiar with.

[21:51] <discord-raku-bot> <stevied#8273> i've dabbled with other languages, reading the first few chapters in a book about them and hacking on existing code bases, but that's about it.

[21:52] <discord-raku-bot> <stevied#8273> i figure after about 6 months of intensive practice with Raku, I'll be able to tackle just about anything, though

[21:53] <discord-raku-bot> <gfldex#8222> I'm a Raku beginner since 2008. :)

[21:53] <discord-raku-bot> <stevied#8273> heh

[21:53] <discord-raku-bot> <stevied#8273> yeah, I always feel like a beginner at everything. But a few years ago I made a concerted effort to really bore down and get more hard core.

[21:53] <discord-raku-bot> <gfldex#8222> Still learning new stuff. I didn't know that \\(|c) works. until today.

[21:55] <discord-raku-bot> <stevied#8273> well how the hell did you whip out a solution so fast?

[21:55] <discord-raku-bot> <lakmatiol#8020> I mostly use raku for the grammars and regexes. It is however an extremely vast language.

[21:55] <discord-raku-bot> <gfldex#8222> I'm good a guessing and even better at hiding the guesses that didn't work out. :D

[21:57] <discord-raku-bot> <gfldex#8222> That's how that looks in practice: https://gist.github.com/4c117d10b987a6a32521df7ff5ef2d66

[21:57] <discord-raku-bot> <stevied#8273> yeah, the grammars things has me spooked. I'm pretty decent with regexes but I grammars takes things to a whole new level

[21:58] <discord-raku-bot> <stevied#8273> yeah, the grammars things has me spooked. I'm pretty decent with regexes but grammars takes things to a whole new level

[21:59] <discord-raku-bot> <stevied#8273> and it's one thing to read about these things in a book where they seem to make perfect sense, but then to apply them and to know when to apply them is a whole different thing

[22:01] <discord-raku-bot> <stevied#8273> https://stackoverflow.com/questions/70658741/how-do-i-capture-default-arguments-with-c made your suggestion an answer @gfldex#8222 :

[22:04] <discord-raku-bot> <Nemokosch#9980> clojure btw

[22:11] <MasterDuke> m: sub a(|c(Int $d, Str $e? = "bar")) { my $z = (|c).Array; $z.push($e) if c.elems == &?ROUTINE.signature.params[0].sub_signature.count - 1; b(|$z) }; sub b(*@v) { .say for @v }; a(99, "bc"); a(222)

[22:11] <camelia> rakudo-moar a90369e10: OUTPUT: «99␤bc␤222␤bar␤»

[22:54] <stevied> m: say 'hi';

[22:54] <camelia> rakudo-moar a90369e10: OUTPUT: «hi␤»

[22:55] <discord-raku-bot> <stevied#8273> m: say 'from discord';

[23:27] *** stevied left
