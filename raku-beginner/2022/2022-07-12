[02:47] *** frost joined
[04:19] *** human-blip left
[04:28] *** human-blip joined
[06:07] <discord-raku-bot> <Nemokosch> I thought simple things were indeed pretty simple

[06:12] <discord-raku-bot> <stevied> anyone got any ideas on this at all? I've spent an insane amoutn of time on this: https://www.reddit.com/r/rakulang/comments/vvpikh/comment/iftppod/?utm_source=share&utm_medium=web2x&context=3

[06:13] <discord-raku-bot> <stevied> i can't get the c code to run a raku callback

[06:21] *** lizmat_ joined
[06:24] *** lizmat left
[07:13] *** jaguart joined
[07:14] *** Nemokosch joined
[07:28] *** lizmat_ is now known as lizmat

[07:58] *** dakkar joined
[11:15] *** frost left
[11:16] *** frost joined
[11:23] *** frost left
[11:25] <jaguart> within a class method, should I be using the accessor $.myattr or the attribute $!myattr for read? Are there side-effect, performances, conventions?

[11:26] <discord-raku-bot> <stevied> I think the basic rule of thumb is use $.

[11:27] <jaguart> ok, and reserve $! for internal attribute mutate, and 'is rw' for external update?

[11:28] <discord-raku-bot> <stevied> Correct

[11:30] <jaguart> Enjoyed Rockin' with Raku - nth prime number

[11:30] <discord-raku-bot> <stevied> You can also change $!  attributes from outside if you set up special set methods.

[11:32] <discord-raku-bot> <stevied> Thanks. Though I guess it has some technical flaws someone pointed out. Gotta revisit it when I get a chance.

[11:32] <discord-raku-bot> <stevied> I‚Äôm still kind of a newb.

[11:33] <jaguart> yeah - I got scared by gfldex - now I'm nervous of Int:D signatures not being enough

[11:34] <discord-raku-bot> <stevied> Heh.

[11:55] *** discord-raku-bot left
[11:55] *** discord-raku-bot joined
[11:56] <gfldex> jaguart: sorry for your loss :->

[11:59] <gfldex> Int:D() tends to be the right choice. If you want to be pedantic: sub foo(Int:D(Numeric(Cool)) $i) { dd $i; }; foo("42");

[12:13] <jaguart> gfldex - thanks, I enjoyed your analysis too - makes me realise I need to pay more attention

[12:16] <jaguart> you know your too deep in Raku land when you keep typing `repl` on the bash command line

[13:06] *** frost joined
[13:25] <jaguart> what does dd mean by: $["wtf"]

[13:26] <jaguart> is it an array containing one element "wtf" ?

[13:28] <discord-raku-bot> <Nemokosch> where did you find this?

[13:28] <discord-raku-bot> <Nemokosch> oh right

[13:29] <discord-raku-bot> <Nemokosch> this is a one-element array, in a Scalar container üòõ

[13:29] <jaguart> dd on @a.classify: *.Str

[13:29] <jaguart> was looking for an easy way to do list subtraction while maintaining list order

[13:31] <discord-raku-bot> <Nemokosch> and where did you get with it?

[13:32] <jaguart> turn list-2 into a hash and then list1.grep

[13:33] <jaguart> which works but feels Perlish

[13:34] <jaguart> was playing with .classify to create the hash - abandoned that in favour of .map

[13:39] <discord-raku-bot> <Nemokosch> hash? what hash?

[13:40] <jaguart> m: say < one two three >.classify: *.Str

[13:40] <camelia> rakudo-moar e7acf4930: OUTPUT: ¬´{one => [one], three => [three], two => [two]}‚ê§¬ª

[13:44] <jaguart> m: say < one two three >.map: * => 1

[13:44] <camelia> rakudo-moar e7acf4930: OUTPUT: ¬´(one => 1 two => 1 three => 1)‚ê§¬ª

[13:45] <discord-raku-bot> <Nemokosch> I'm still quite clueless what the eventual goal is

[13:45] <jaguart> m: < one two three four> (-) < two three >

[13:45] <camelia> rakudo-moar e7acf4930: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "(-)" in expression "< one two three four> (-) < two three >" in sink context (line 1)‚ê§¬ª

[13:46] <jaguart> basically I want to clean up a list by removing elements that I already know about

[13:46] <jaguart> so like set subtraction - but retain the list order

[13:47] <jaguart> m:  say < one two three four > (-) < two >

[13:47] <camelia> rakudo-moar e7acf4930: OUTPUT: ¬´Set(four one three)‚ê§¬ª

[13:47] *** discord-raku-bot left
[13:47] *** discord-raku-bot joined
[13:48] <jaguart> I need < one three four >

[13:49] <discord-raku-bot> <Nemokosch> do the elements to remove have to be adjacent?

[13:52] <jaguart> no they can be anywhere in the first list

[14:00] <discord-raku-bot> <Nahita> you can grep

[14:00] <discord-raku-bot> <Nahita> ```

[14:00] <discord-raku-bot> <Nahita> >>> <one two three four>.grep(* ‚àâ <two four>)

[14:00] <discord-raku-bot> <Nahita> (one three)

[14:00] <discord-raku-bot> <Nahita> ```

[14:01] <discord-raku-bot> <Nahita> perhaps predefining <two four> as a Set fastens this

[14:05] <jaguart> Nahita - thanks, will check

[14:05] *** saint- joined
[14:09] *** frost left
[14:15] <jaguart> Nahita++ - !(elem) works as I need thank you

[14:20] <discord-raku-bot> <Nahita> you are welcome

[14:22] *** saint- left
[14:24] <discord-raku-bot> <stevied> here's a basic question. if you're a perl developer, why wouldn't you just start using Raku since you still have access to all of cpan? is there some downside to not learning raku?

[14:24] <discord-raku-bot> <stevied> here's a basic question. if you're a perl developer, why wouldn't you just start using Raku since you still have access to all of cpan? is there some downside to learning raku for them?

[14:24] <discord-raku-bot> <stevied> has anyone made a case as to why it's better to just stick with perl?

[14:30] <discord-raku-bot> <Nemokosch> It seems simple enough. Perl is more supported, faster, has established ways to compile to native (as far as I can tell)

[14:32] <discord-raku-bot> <stevied> when you say "more supported," what does that encompass?

[14:32] <discord-raku-bot> <stevied> you mean it's baked into a lot of OS distros already?

[14:33] <discord-raku-bot> <Nemokosch> for example

[14:33] <discord-raku-bot> <Nemokosch> also legacy stuff

[14:34] <discord-raku-bot> <stevied> ok, but doing apt-get isn't a big impediment, right?

[14:34] <discord-raku-bot> <stevied> and perl doesn't come on windows, you have to use strawberry perl

[14:35] <discord-raku-bot> <Nemokosch> there are like two fanatics trying to get stuff like this working on Windows and that's about it üòÑ

[14:36] <discord-raku-bot> <stevied> stuff like what?

[14:37] <discord-raku-bot> <Nemokosch> Same for Mac, except Mac users aren't even fanatic enough to sort it out for themselves

[14:37] <discord-raku-bot> <stevied> you mean they can't get perl running on windows or raku?

[14:37] <discord-raku-bot> <Nemokosch> Perl, Raku, or anything vaguely like GNU

[14:37] <discord-raku-bot> <stevied> i don't know about that. haven't seen anyone say they can't get raku running at all on windows/mac

[14:39] <discord-raku-bot> <Nemokosch> but you haven't seen many people say that they want to either üòõ

[14:39] <discord-raku-bot> <stevied> but I'm talking about a person who is currently a perl programmer. who knows how to get raku installed.

[14:39] <discord-raku-bot> <Nemokosch> let's be real, these languages and tools were never widespread outside of the GNU (occasionally BSD) influence sphere and mainly Linux

[14:39] <discord-raku-bot> <stevied> what are their reasons for not using Raku?

[14:41] <discord-raku-bot> <stevied> but I'm talking about a person who is currently a perl programmer and who knows how to get raku installed.

[14:41] <discord-raku-bot> <Nemokosch> and someone who uses Perl in particular probably cares quite a lot about backwards compatibility and legacy stuff; even I have to

[14:41] <discord-raku-bot> <Nemokosch> and then add speed and add the compiler

[14:41] <discord-raku-bot> <stevied> you can use inline perl module

[14:41] <discord-raku-bot> <stevied> can you can't do threading with perl

[14:43] <discord-raku-bot> <stevied> you can't do threading with perl

[14:43] <discord-raku-bot> <Nemokosch> I wouldn't know but there are still aspects in which Raku is just too slow still, so you not "can do threading" but pretty much "must rely on threading"

[14:43] <discord-raku-bot> <Nemokosch> which is about as much a drawback as an advantage

[14:47] <discord-raku-bot> <Nemokosch> Anyway, I answered your question. If you think I am biased against Raku despite the fact that I picked Raku over Perl and I actually often can't use it for work because of ecosystem constraints, I can't do much ü§∑‚Äç‚ôÇÔ∏è

[14:47] <discord-raku-bot> <stevied> i'm just wondering about things. i don't have an opinion one way or the other

[14:53] *** saint- joined
[14:58] <discord-raku-bot> <stevied> I'm just learning raku because it's basically just a giant puzzle to figure out

[14:59] <discord-raku-bot> <stevied> probably about the same motivation as learning to do a 10,000 piece jigsaw puzzle, except I can do useful things with it at the end.

[15:06] <discord-raku-bot> <stevied> maybe i'll write a blog post about it from my own perspective

[15:27] <jaguart> I've used Perl since the 90s - learning Raku so that I can decide if it's worth a migration of my private-garden

[15:30] <discord-raku-bot> <stevied> yeah, i've also been messing with perl since 90s as well. I never had a huge need to write anything sophisticated with it. but it is the language I'm most familiar with. recently decided I wanted to improve my coding chops. figured I'd go with Raku to help with that.

[15:32] <discord-raku-bot> <stevied> didn't seem to make much sense to get a lot better at perl when I could learn Raku and see what a newer language could do out of the gox

[15:32] <discord-raku-bot> <stevied> didn't seem to make much sense to get a lot better at perl when I could learn Raku and see what a newer language could do out of the box

[15:33] <jaguart> I did some fun things with Perl in financial markets and risk. Rock solid, fast and enough depth for a fairly large code-base

[15:34] <jaguart> Now I have more time, I am interested in distributed, parallel and future capable tools

[15:36] <jaguart> future - as in promises et al

[16:37] *** dakkar left
[19:22] *** Nemokosch left
[19:33] *** deadmarshal left
[20:04] *** deadmarshal joined
[20:19] *** saint- left
[23:31] *** jaguart left
