[03:14] *** Kaipei joined
[03:16] *** Kaiepi left
[06:43] *** discord-raku-bot left
[06:43] *** discord-raku-bot joined
[07:14] <discord-raku-bot> <yabobay> i'm doing the raku guide, and i'm at the "purchase table" exercise, and i entered this code:

[07:14] <discord-raku-bot> <yabobay> ```

[07:14] <discord-raku-bot> <yabobay> my $chair'price = 20.57;

[07:14] <discord-raku-bot> <yabobay> my $chair'quant = 4;

[07:14] <discord-raku-bot> <yabobay> my $chair'total = $chair'price * $chair'quant;

[07:14] <discord-raku-bot> <yabobay> my $table'price = 50.18;

[07:14] <discord-raku-bot> <yabobay> my $table'quant = 1;

[07:14] <discord-raku-bot> <yabobay> my $table'total = $table'price * $table'quant;

[07:14] <discord-raku-bot> <yabobay> my $currency = '‚Ç¨';

[07:14] <discord-raku-bot> <yabobay> print (

[07:14] <discord-raku-bot> <yabobay>   "Item\tPrice\tN\tTotal\n",

[07:14] <discord-raku-bot> <yabobay>   "Chairs\t$currency$chair'price\t$chair'quant\t$currency$chair'total\n",

[07:14] <discord-raku-bot> <yabobay>   "Tables\t$currency$table'price\t$table'quant\t$currency$table'total\n",

[07:14] <discord-raku-bot> <yabobay> );

[07:14] <discord-raku-bot> <yabobay> ```

[07:14] <discord-raku-bot> <yabobay> the output looks like this:

[07:14] <discord-raku-bot> <yabobay> ```

[07:14] <discord-raku-bot> <yabobay> Item    Price    N    Total

[07:14] <discord-raku-bot> <yabobay>  Chairs    ‚Ç¨20.57    4    ‚Ç¨82.28

[07:14] <discord-raku-bot> <yabobay>  Tables    ‚Ç¨50.18    1    ‚Ç¨50.18

[07:15] <discord-raku-bot> <Nemokosch> in Python, space separates arguments of print. Wouldn't be surprised if it was the same case

[07:16] <discord-raku-bot> <yabobay> doesn't look like it

[07:18] <discord-raku-bot> <Nemokosch> wait wait wait

[07:18] <discord-raku-bot> <Nemokosch> you pass one argument to print

[07:18] <discord-raku-bot> <yabobay> no i don't

[07:18] <discord-raku-bot> <Nemokosch> yes you do

[07:18] <discord-raku-bot> <Nemokosch> a list

[07:18] <discord-raku-bot> <Nemokosch> this is a stringified list

[07:18] <discord-raku-bot> <Nemokosch> and lists are stringified with a bare space separator

[07:18] <discord-raku-bot> <yabobay> because of the parentheses?

[07:19] <discord-raku-bot> <Nemokosch> because of the random space in front of it

[07:20] <discord-raku-bot> <yabobay> no i mean.. it's a list because i used parentheses in the code?

[07:20] <discord-raku-bot> <Nemokosch> that's what I say

[07:20] <discord-raku-bot> <Nemokosch> the parens could be fine - without the space in front of the opening paren

[07:20] <discord-raku-bot> <yabobay> ```

[07:20] <discord-raku-bot> <yabobay> print 

[07:20] <discord-raku-bot> <yabobay> "Item\tPrice\tN\tTotal\n",

[07:20] <discord-raku-bot> <yabobay> "Chairs\t$currency$chair'price\t$chair'quant\t$currency$chair'total\n",

[07:20] <discord-raku-bot> <yabobay> "Tables\t$currency$table'price\t$table'quant\t$currency$table'total\n";

[07:20] <discord-raku-bot> <yabobay> ```

[07:20] <discord-raku-bot> <yabobay> i'm doing it like this now

[07:20] <discord-raku-bot> <yabobay> ohh i get it now. thank you

[07:20] <discord-raku-bot> <Nemokosch> this is a "gotcha" but eventually it does make sense I think

[07:20] <discord-raku-bot> <Nemokosch> parentheses have too many meanings

[07:21] <discord-raku-bot> <Nemokosch> so `function-call (blah1, blah2)` could be ambiguous

[07:22] <discord-raku-bot> <Nemokosch> the resolution is: it's considered one list argument

[07:22] <discord-raku-bot> <Nemokosch> while `function-call(blah1, blah2)` or `function-call blah1, blah2` are two arguments

[07:22] <discord-raku-bot> <yabobay> thats kinda fun

[07:24] <discord-raku-bot> <Nemokosch> The grammar of Raku is quite sophisticated and therefore whitespaces can make the difference

[07:24] <discord-raku-bot> <Nemokosch> this is probably the most basic case where they do

[07:24] <discord-raku-bot> <Nemokosch> while we are at it...

[07:24] <discord-raku-bot> <Nemokosch> I think it's better to learn this on time

[07:24] <discord-raku-bot> <Nemokosch> brackets don't actually complement semicolons, they don't make a statement

[07:24] <discord-raku-bot> <Nemokosch> the reason why we can usually pretend that they do is

[07:25] <discord-raku-bot> <Nemokosch> a closing bracket AND A NEWLINE do make a block

[07:25] <discord-raku-bot> <yabobay> i don't understand what you mean

[07:25] <discord-raku-bot> <Nemokosch> moment

[07:26] <discord-raku-bot> <Nemokosch> m: class Foo {} say 'Bar'

[07:26] <discord-raku-bot> <Nemokosch> <@853712446660673566> hello? wakey wakey rise and shine

[07:26] <discord-raku-bot> <Nemokosch> anyway, you can run this in the REPL as well

[07:26] <discord-raku-bot> <Nemokosch> THANK YOU

[07:27] <discord-raku-bot> <yabobay> i don't know class syntax yet, what is this code supposed to do?

[07:27] <discord-raku-bot> <yabobay> ohhh i get it

[07:27] <discord-raku-bot> <Nemokosch> well, be syntactically valid

[07:27] <discord-raku-bot> <Nemokosch> but it's not

[07:28] <discord-raku-bot> <Nemokosch> because } in itself didn't finish the statement

[07:28] <discord-raku-bot> <Nemokosch> you'd need the semicolon

[07:28] <discord-raku-bot> <yabobay> but if it was 

[07:28] <discord-raku-bot> <yabobay> ```

[07:28] <discord-raku-bot> <yabobay> class Foo{}

[07:28] <discord-raku-bot> <yabobay> say 'Bar';

[07:28] <discord-raku-bot> <yabobay> ```

[07:28] <discord-raku-bot> <yabobay> is valid?

[07:28] <discord-raku-bot> <Nemokosch> yep

[07:28] <discord-raku-bot> <Nemokosch> or `class Foo {}; say 'Bar'`

[07:28] <discord-raku-bot> <yabobay> thats pretty strange

[07:29] <discord-raku-bot> <Nemokosch> I think this is good to be aware of

[07:30] <discord-raku-bot> <Nemokosch> `}` didn't finish a statement, however, `}\n` does

[07:30] <discord-raku-bot> <Nemokosch> `}` doesn't finish a statement, however, `}\n` does

[07:30] <discord-raku-bot> <Nemokosch> Again, this is not something that would often concern you

[07:30] <discord-raku-bot> <Nemokosch> but if you ever write something like

[07:31] <discord-raku-bot> <Nemokosch> ```perl

[07:31] <discord-raku-bot> <Nemokosch> (2 .. 10)

[07:31] <discord-raku-bot> <Nemokosch>   .map: { $_ ** $_ }

[07:31] <discord-raku-bot> <Nemokosch>   andthen .say

[07:31] <discord-raku-bot> <Nemokosch> ```

[07:31] <discord-raku-bot> <Nemokosch> and wonder why doesn't work

[07:32] <discord-raku-bot> <yabobay> i dont even know what im looking at

[07:32] <discord-raku-bot> <Nemokosch> well, let's see the output, I'm gonna escape the linebreak

[07:33] <discord-raku-bot> <Nemokosch> m: ```(2 .. 10)

[07:33] <discord-raku-bot> <Nemokosch>   .map: { $_ ** $_ }\

[07:33] <discord-raku-bot> <Nemokosch>   andthen .say

[07:33] <discord-raku-bot> <Nemokosch> ```

[07:33] <discord-raku-bot> <Nemokosch> this should run I think

[07:33] <discord-raku-bot> <Nemokosch> damn, it ate the backticks

[07:35] <discord-raku-bot> <Nemokosch> it should say

[07:35] <discord-raku-bot> <Nemokosch> ```

[07:35] <discord-raku-bot> <Nemokosch> (4 27 256 3125 46656 823543 16777216 387420489 10000000000)

[07:35] <discord-raku-bot> <Nemokosch> ```

[07:37] <discord-raku-bot> <yabobay> what am i doing wrong in <#619193814653075477> ?

[07:48] <discord-raku-bot> <Nemokosch> <@989550365533937664> what is your programming background, if I may ask?

[07:50] *** discord-raku-bot left
[07:50] *** discord-raku-bot joined
[08:08] <discord-raku-bot> <yabobay> basically none

[08:09] *** dakkar joined
[08:10] <discord-raku-bot> <Nemokosch> haha, it just makes it more exciting ü•∫

[08:10] <discord-raku-bot> <yabobay> or it depends what you mean background

[08:10] <discord-raku-bot> <yabobay> i've done many very small things for fun

[08:10] <discord-raku-bot> <yabobay> but i dont think i really "know" any of the languages

[08:12] <discord-raku-bot> <Nemokosch> it made me wonder why you tried to write a C-style for loop with the for keyword

[08:12] <discord-raku-bot> <Nemokosch> and you know, in general, it's good to know what comparisons can be made

[08:12] <discord-raku-bot> <yabobay> cause i have spent the most amount of time writing in languages that have for loops like that

[08:14] <discord-raku-bot> <yabobay> so `loop` in raku is for writing those kinds of loops?

[08:19] *** dakkar left
[08:20] *** dakkar joined
[08:48] <discord-raku-bot> <Nemokosch> yes

[08:49] <discord-raku-bot> <Nemokosch> but it's really better to get used to the foreach approach

[08:49] <discord-raku-bot> <Nemokosch> or map, even üòÇ

[08:50] <discord-raku-bot> <Nemokosch> m: m: for 1 .. 10 -> $i { say $i }

[08:51] <discord-raku-bot> <Nemokosch> there is more: topic variable ($_) is set if you don't specify otherwise

[08:51] <discord-raku-bot> <Nemokosch> m: m: for 1 .. 10 { say $_ }

[08:51] <discord-raku-bot> <Nemokosch> oops

[08:51] <discord-raku-bot> <Nemokosch> m: for 1 .. 10 { say $_ }

[08:51] <discord-raku-bot> <Nahita> yeah i think `loop` is only good practice for infinite loops... `loop { ... }`

[08:51] <discord-raku-bot> <Nemokosch> okay I guess :DD

[08:53] <discord-raku-bot> <Nemokosch> ... but there is even more: say is available as a method and you can make method calls on the topic variable without typing it out

[08:53] <discord-raku-bot> <Nemokosch> m: for 1 .. 10 { .say }

[09:06] <lizmat> m: for 1..10 { .say }

[09:06] <camelia> rakudo-moar 4f519c2ea: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[09:06] <lizmat> m: .say for 1..10

[09:06] <camelia> rakudo-moar 4f519c2ea: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[09:08] <discord-raku-bot> <yabobay> is `for` just better because it's shorter to do?

[09:12] <discord-raku-bot> <Nemokosch> it expresses the idea more clearly and it doesn't expose mutation unneecessarily

[09:13] <discord-raku-bot> <yabobay> expose mutation?

[09:14] <discord-raku-bot> <Nemokosch> well, if you set a variable by hand, that's quite heavyweight mutation, no?

[09:14] <discord-raku-bot> <yabobay> what is mutation?

[09:17] <lizmat> m: my $a = 42; say $a; $a = 666; say $a   # $a got mutated from 42 to 666

[09:17] <camelia> rakudo-moar 4f519c2ea: OUTPUT: ¬´42‚ê§666‚ê§¬ª

[09:18] <discord-raku-bot> <Nemokosch> where are you from, if I may?

[09:18] <discord-raku-bot> <Nemokosch> umm... changing-ish?

[09:18] <discord-raku-bot> <Nemokosch> except with Romance vocabulary

[09:18] <discord-raku-bot> <yabobay> so mutation is changing variables?

[09:23] <discord-raku-bot> <Nemokosch> basically

[09:24] <discord-raku-bot> <Nemokosch> changing values behind adressable content, I would say

[09:24] <discord-raku-bot> <Nemokosch> so like assigning to an element of an array also classifies

[09:26] <discord-raku-bot> <yabobay> addressable?

[09:26] <discord-raku-bot> <yabobay> and why is it a problem?

[09:28] <discord-raku-bot> <yabobay> man i feel like an idiot

[09:28] <discord-raku-bot> <Nemokosch> it's just harder to maintain code like that, at this point

[09:30] <discord-raku-bot> <Nahita> me too; i don't know how `for` vs `loop` discussion ended up in container stuff

[09:30] <discord-raku-bot> <gfldex> It always ends in container stuff. :->

[09:30] <discord-raku-bot> <Nahita> my summary is: we write `for` because it's easier to type, it's shorter, it's more idiomatic, more powerful; only using `loop` for infinite loops

[09:30] <discord-raku-bot> <Nahita> in my opinion

[09:31] <discord-raku-bot> <yabobay> why not just use while(True) for infinite loops

[09:31] <discord-raku-bot> <yabobay> why not just use while (True) for infinite loops

[09:31] <lizmat> yabobay  that works too in Raku

[09:31] <discord-raku-bot> <Nahita> it's uglier than `loop { ... }` i think :p

[09:32] <lizmat> m: my $a; while True { last if ++$a == 5; say $a }

[09:32] <camelia> rakudo-moar 4f519c2ea: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§¬ª

[09:32] <discord-raku-bot> <yabobay> do you just write loop { } to make an infinite loop?

[09:32] <discord-raku-bot> <yabobay> without conditions and stuff?

[09:32] <discord-raku-bot> <Nahita> yeah

[09:33] <discord-raku-bot> <yabobay> what happens if someone tells raku bot to do an infinite loop

[09:34] <discord-raku-bot> <Nemokosch> it will timeout

[09:34] <discord-raku-bot> <Nemokosch> pretty sure

[09:35] <discord-raku-bot> <yabobay> ohh ok

[09:35] <discord-raku-bot> <Nahita> m: loop {}

[09:35] <discord-raku-bot> <yabobay> i remember trying to learn perl 5 a while ago, does last mean break? i think i remember that being the case

[09:35] <discord-raku-bot> <Nahita> yeah but it is `last` in Perl too

[09:35] <discord-raku-bot> <yabobay> i dont like that decision tbh. cause i'ts not a verb

[09:37] <discord-raku-bot> <Nemokosch> bang bang bang üòÇ

[09:37] <discord-raku-bot> <Nemokosch> you do have a point though

[09:37] <discord-raku-bot> <yabobay> i guess "break" isn't exactly clear on what it means, but in that case, you could've had "stop" or something

[09:39] <discord-raku-bot> <yabobay> and "skip" for continue

[09:39] <discord-raku-bot> <yabobay> and then you have skip and stop which sounds really nice as well

[09:39] <discord-raku-bot> <yabobay> and because it sounds nice, it's easy to remember

[09:41] <discord-raku-bot> <Nemokosch> skip does exist as a method for ?positionals? I think

[09:41] <discord-raku-bot> <Nemokosch> m: (1, 2, 3, 5).skip.say

[09:41] <discord-raku-bot> <yabobay> oh so you can't have the keyword

[09:41] <discord-raku-bot> <yabobay> what are positionals?

[09:41] <discord-raku-bot> <Nemokosch> well you could, it would work

[09:41] <discord-raku-bot> <Nemokosch> I'm just saying that there is a thing called `skip` indeed

[09:41] <discord-raku-bot> <yabobay> what does it do?

[09:41] <discord-raku-bot> <Nemokosch> Positionals are everything you can index with natural numbers

[09:42] <discord-raku-bot> <yabobay> im confused

[09:43] <discord-raku-bot> <Nemokosch> what do you think it does? üôÇ

[09:43] <discord-raku-bot> <yabobay> it removes the first one?

[09:43] <discord-raku-bot> <yabobay> from a list that is passed to it

[09:43] <discord-raku-bot> <yabobay> also i realise i'm breaking the rule of not posting too many messages as part of the same thought but i'm really bad with that and i keep thinking things to append

[09:45] <discord-raku-bot> <Nemokosch> whatever, this is just a chat

[09:46] <discord-raku-bot> <Nemokosch> well, yes, "removes"

[09:47] <discord-raku-bot> <yabobay> returns a different list with all the elements shifted to the left :p

[09:47] <discord-raku-bot> <Nemokosch> yes, or from what I can see, a Sequence

[09:47] <discord-raku-bot> <Nemokosch> Sequences can be lazy

[09:47] <discord-raku-bot> <Nemokosch> and infinite üòº

[09:47] <discord-raku-bot> <yabobay> i should really read more about raku before i keep saying things here haha, cause i don't know anything

[09:47] <discord-raku-bot> <yabobay> i was interested cause it sounded like fun, and then the website says it's fun, and then i try it and it turns out that it is fun indeed

[09:49] <discord-raku-bot> <Nemokosch> üòÇ

[09:49] <discord-raku-bot> <Nemokosch> It's a long journey imo

[09:49] <discord-raku-bot> <Nemokosch> Shameless plug: https://conf.raku.org/ I also had a presentation about my first year with Raku

[09:49] <discord-raku-bot> <Nemokosch> it was the first presentation actually üòÅ

[09:51] <discord-raku-bot> <yabobay> that's pretty cool

[09:51] <discord-raku-bot> <yabobay> i wish i used raku for a year+

[09:51] <discord-raku-bot> <yabobay> or any language for that matter

[09:51] <discord-raku-bot> <yabobay> i keep going "ooh shiny!" and doing something else

[09:51] <discord-raku-bot> <yabobay> so at the end of the day i end up not knowing anything about anything

[09:52] <discord-raku-bot> <gfldex> `for` demands an iterable thing. We got `loop` because somethimes we have to handle the iteration and stop-condition by hand.

[09:55] <discord-raku-bot> <gfldex> m:```

[09:55] <discord-raku-bot> <gfldex>     for ^5 {

[09:55] <discord-raku-bot> <gfldex>         last if True;

[09:55] <discord-raku-bot> <gfldex>         .say;

[09:55] <discord-raku-bot> <gfldex>         CONTROL {  when CX::Last { say .^name } }

[09:55] <discord-raku-bot> <gfldex>     }

[09:55] <discord-raku-bot> <gfldex> ```

[09:58] <discord-raku-bot> <gfldex> Sadly, `CX::Last` is not resumable. Or I could write a mightily confusing example of the usage of `last`. :->

[09:59] <discord-raku-bot> <Nemokosch> do you think this wasn't confusing enough?

[09:59] <discord-raku-bot> <gfldex> aye :)

[10:00] <discord-raku-bot> <gfldex> And I do believe the confusion isn't the student but the teacher fault. If you know what the compiler does, everything becomes clear. That is hardly surprising, because CPUs are dumb as fuck. Yet we manage to explain Raku to it.

[10:01] <discord-raku-bot> <yabobay> if it says "last if True" then how come the loop does anything at all

[10:02] <discord-raku-bot> <yabobay> i get that it's got something to do with the CONTROL part but i don't know what any of that is and i should probbly stop asking thinsg

[10:02] <discord-raku-bot> <gfldex> Because `last` isn't just a conditional `jmp`.

[10:03] <discord-raku-bot> <Nemokosch> anyway, this does seem inconsistent

[10:03] <discord-raku-bot> <yabobay> what is jmp? (i really ought to stop talking and just go read the manual lol)

[10:03] <discord-raku-bot> <gfldex> see: https://github.com/rakudo/rakudo/blob/master/src/core.c/control.pm6#L108

[10:04] <discord-raku-bot> <Nemokosch> you didn't do anything to "handle" last, hence it should have succeeded

[10:04] <discord-raku-bot> <Nemokosch> like with exceptions

[10:04] <discord-raku-bot> <Nemokosch> just logging something about them won't stop them from exploding

[10:04] <discord-raku-bot> <gfldex> We need to `.resume` control exceptions to negate their meaning completely.

[10:04] <discord-raku-bot> <Nemokosch> yes, and this should be just like that

[10:05] <discord-raku-bot> <gfldex> Also, there is sink context going on.

[10:06] <discord-raku-bot> <Nemokosch> just subscribing to them shouldn't keep the loop running, unless one wants to create confusion

[10:06] <discord-raku-bot> <gfldex> m:```

[10:06] <discord-raku-bot> <gfldex>     say do for ^5 {

[10:06] <discord-raku-bot> <gfldex>         last(42) if True;

[10:06] <discord-raku-bot> <gfldex>         .say;

[10:06] <discord-raku-bot> <gfldex>         CONTROL { when CX::Last { say .^name; .resume } }

[10:06] <discord-raku-bot> <gfldex>     }

[10:06] <discord-raku-bot> <gfldex> ```

[10:06] <discord-raku-bot> <gfldex> As soon as we remove sink context, the compiler doesn't want to cheat anymore and allows us to `.resume`.

[10:06] <discord-raku-bot> <Nemokosch> it needs 6.e

[10:06] <discord-raku-bot> <yabobay> what is happening aaa

[10:06] <discord-raku-bot> <gfldex> m:```

[10:06] <discord-raku-bot> <gfldex>     use v6.*;

[10:06] <discord-raku-bot> <gfldex>     say do for ^5 {

[10:06] <discord-raku-bot> <gfldex>         last(42) if True;

[10:06] <discord-raku-bot> <gfldex>         .say;

[10:06] <discord-raku-bot> <gfldex>         CONTROL { when CX::Last { say .^name; .resume } }

[10:06] <discord-raku-bot> <gfldex>     }

[10:06] <discord-raku-bot> <gfldex> ```

[10:08] <discord-raku-bot> <Nemokosch> do you know `return`?

[10:08] <discord-raku-bot> <yabobay> yes

[10:08] <discord-raku-bot> <yabobay> unless it means something different in raku

[10:08] <discord-raku-bot> <gfldex> <@989550365533937664> what happens here, is the Raku exposes structures the compiler uses internally to do it's magic. Often, we can borrow that magic to gain superpowers.

[10:08] <discord-raku-bot> <Nemokosch> `return` can take a value

[10:08] <discord-raku-bot> <Nemokosch> and eventually `last` will also be able to take a value

[10:09] <discord-raku-bot> <Nemokosch> coming in v6.e

[10:10] <discord-raku-bot> <Nemokosch> the rest is very much phaser magic for me as well

[10:10] <discord-raku-bot> <yabobay> what will giving last a value do?

[10:12] <discord-raku-bot> <Nemokosch> return from the loop with that value

[10:12] <discord-raku-bot> <Nemokosch> all blocks can have return values

[10:12] <discord-raku-bot> <Nemokosch> you can even assign them to a variable with `do`

[10:12] <discord-raku-bot> <yabobay> so i can like

[10:12] <discord-raku-bot> <yabobay> i dont know how to do this syntactically but like

[10:12] <discord-raku-bot> <yabobay> say ( {return "hello"} )

[10:12] <discord-raku-bot> <yabobay> that's definitely wrong

[10:12] <discord-raku-bot> <yabobay> but like the idea of that

[10:12] <discord-raku-bot> <Nemokosch> almost

[10:12] <discord-raku-bot> <gfldex> `for` basically maps to `map`, outside of sink-context. `last` with a value is meant to be used with `map`.

[10:12] <discord-raku-bot> <Nemokosch> return only exists in subs, not code blocks

[10:13] <discord-raku-bot> <Nemokosch> but yeah, `{ "hello" }` in itself is a banal code block

[10:14] <discord-raku-bot> <Nemokosch> that gives "hello" upon execution

[10:14] <discord-raku-bot> <yabobay> aaaaaa

[10:14] <discord-raku-bot> <Nemokosch> see, it is a block üòÑ

[10:14] <discord-raku-bot> <yabobay> but it didn't do the thing i thought it was supposed to do

[10:14] <discord-raku-bot> <Nemokosch> because you haven't executed it

[10:15] <discord-raku-bot> <yabobay> ohhh

[10:15] <discord-raku-bot> <gfldex> m: (40,41,'answer',43) .map({ last(42) if .contains('answer'); say "It's not $_."; Empty }).say;

[10:15] <discord-raku-bot> <yabobay> it's literally telling me the block

[10:16] <discord-raku-bot> <yabobay> i figured it out

[10:16] <discord-raku-bot> <gfldex> m:```

[10:16] <discord-raku-bot> <gfldex> use v6.*;

[10:16] <discord-raku-bot> <gfldex> (40,41,'answer',43) .map({ last(42) if .contains('answer'); say "It's not $_."; Empty }).say;

[10:16] <discord-raku-bot> <gfldex> ```

[10:16] <discord-raku-bot> <Nemokosch> well done üç¨

[10:16] <discord-raku-bot> <yabobay> that's a pretty cool thing

[10:16] <discord-raku-bot> <yabobay> it reminds me of when i tried to do emacs lisp and failed miserably

[10:19] <discord-raku-bot> <Nemokosch> talking about code blocks

[10:20] <discord-raku-bot> <Nemokosch> as you might suspect now, map received a code block

[10:20] <discord-raku-bot> <Nemokosch> and the `last` inside actually stops the loop of `map`

[10:23] <discord-raku-bot> <Nemokosch> now I wonder

[10:24] <discord-raku-bot> <yabobay> i think i like, half- get it

[10:24] <discord-raku-bot> <Nemokosch> m:

[10:24] <discord-raku-bot> <Nemokosch> ```use v6.*;

[10:24] <discord-raku-bot> <Nemokosch> (40,41,'answer',43) .map({ next(42) if .contains('answer'); say "It's not $_."; Empty }).say;```

[10:24] <discord-raku-bot> <Nemokosch> will `next` also get a return value?

[10:24] <discord-raku-bot> <Nemokosch> come ooon

[10:24] <discord-raku-bot> <yabobay> oHHH im starting to actually get what it does

[10:24] <discord-raku-bot> <Nemokosch> <@195453211409121280> how do you do it? ü•∫

[10:26] <discord-raku-bot> <Nemokosch> map kinda mimics a for loop that collects values inside a Sequence

[10:27] <discord-raku-bot> <Nemokosch> unlike in many other languages, it doesn't even demand a 1-to-1 correspondence between input items and produced output elements

[10:27] <discord-raku-bot> <Nemokosch> that is, it can give multiple values or even none, per item

[10:28] <discord-raku-bot> <Nemokosch> now I expect the one with `next` to say

[10:28] <discord-raku-bot> <Nemokosch> It's not 40.

[10:28] <discord-raku-bot> <Nemokosch> It's not 41.

[10:28] <discord-raku-bot> <Nemokosch> It's not 43.

[10:28] <discord-raku-bot> <Nemokosch> (42)

[10:29] <discord-raku-bot> <Nemokosch> m:

[10:29] <discord-raku-bot> <Nemokosch> use v6.*;

[10:29] <discord-raku-bot> <Nemokosch> (40,41,'answer',43) .map({ next(42) if .contains('answer'); say "It's not $_."; Empty }).say;

[10:29] <discord-raku-bot> <Nemokosch> ü•≥

[10:30] <discord-raku-bot> <Nemokosch> (42) is a one-element sequence: the output of map

[10:30] <discord-raku-bot> <Nemokosch> only 'answer' generated data, the others gave Empty

[10:41] <discord-raku-bot> <yabobay> so if there are two iterations where you call next, does that mean you get a 2 element sequence?

[10:45] <discord-raku-bot> <Nemokosch> remember: `next` is "continue"

[10:45] <discord-raku-bot> <Nemokosch> in this example, if you don't "continue", you end up with Empty

[10:46] <discord-raku-bot> <Nemokosch> so within the scope of this code, if you don't call `next`, you don't get elements

[10:47] <discord-raku-bot> <Nemokosch> but it could easily be the other way around

[10:47] <discord-raku-bot> <yabobay> i really should just get learning

[10:47] <discord-raku-bot> <Nemokosch> I will sort out even numbers using map and next:

[10:47] <discord-raku-bot> <Kaiepi> `for` is `map` in Rakudo

[10:47] <discord-raku-bot> <Nemokosch> m:

[10:47] <discord-raku-bot> <Nemokosch> <1 5 2 4 8 5 6 7>.map({ next if $_ %% 2; $_ }).&dd

[10:49] <discord-raku-bot> <Nemokosch> it's funny that it's not the other way around

[10:50] <discord-raku-bot> <Nemokosch> m:

[10:50] <discord-raku-bot> <Nemokosch> <1 5 2 4 8 5 6 7>.map({ next if $ %% 2; $ }).say

[10:50] <discord-raku-bot> <Nemokosch> oh right, it ate my underscores

[10:51] <discord-raku-bot> <Nemokosch> m:

[10:51] <discord-raku-bot> <Nemokosch> <1 5 2 4 8 5 6 7>.map({ next if $_ %% 2; $_ }).say

[10:53] <discord-raku-bot> <Nemokosch> ^ so yeah, same thing, without the scare debug-ish output

[10:55] <discord-raku-bot> <Kaiepi> m:```

[10:55] <discord-raku-bot> <Kaiepi> put (do for ^5 { $_ }) eqv (eager map { $_ }, ^5);

[10:55] <discord-raku-bot> <Kaiepi> put (-> { for ^5 { } })() eqv (-> { sink map { $_ }, ^5 })();

[10:55] <discord-raku-bot> <Kaiepi> ```

[10:56] <discord-raku-bot> <Kaiepi> m:```

[10:56] <discord-raku-bot> <Kaiepi> put (do for ^5 { $_ }) eqv (eager map { $_ }, ^5);

[10:56] <discord-raku-bot> <Kaiepi> put (-> { for ^5 { $_ } })() eqv (-> { sink map { $_ }, ^5 })();

[10:56] <discord-raku-bot> <Kaiepi> ```

[10:57] <discord-raku-bot> <Nemokosch> is it === tho

[10:58] <discord-raku-bot> <Kaiepi> `===` is the `WHICH`-y one. i don't tend to use it because it's an `Any` operator

[10:59] <discord-raku-bot> <Kaiepi> m:```

[10:59] <discord-raku-bot> <Kaiepi> put (do for ^5 { $_ }) === (eager map { $_ }, ^5);

[10:59] <discord-raku-bot> <Kaiepi> put (-> { for ^5 { $_ } })() === (-> { sink map { $_ }, ^5 })();

[10:59] <discord-raku-bot> <Kaiepi> ```

[11:01] <discord-raku-bot> <Nemokosch> hmmm

[11:01] <discord-raku-bot> <Kaiepi> m:```

[11:01] <discord-raku-bot> <Kaiepi> say @(^5) === @(^5)

[11:01] <discord-raku-bot> <Kaiepi> ```

[11:01] <discord-raku-bot> <Kaiepi> depending on which kind of `WHICH` a `List` has, it might not work

[11:02] <discord-raku-bot> <Nemokosch> okay but how does eqv work? it would simply give `True` on the same content, right?

[11:02] <discord-raku-bot> <Nemokosch> which we anticipate

[11:04] <discord-raku-bot> <Nemokosch> (why not *ante*cipate though, it happens _before_, not _against_ )

[11:06] <discord-raku-bot> <Kaiepi> i think of `eqv` as a stricter `~~`. they can both recurse over themselves, just in the case of a typecheck, `eqv` is invariant instead of covariant like `~~`

[11:08] <discord-raku-bot> <Kaiepi> in the case of an `Iterable:D` like this, it looks to be a reduction of a zipped `eqv`

[11:08] <discord-raku-bot> <Kaiepi> that leaves `eqv` on `Int:D`, which is a numeric comparison + invariant typecheck

[11:08] <discord-raku-bot> <Kaiepi> that's another thing - it takes the type into account usually

[11:08] <discord-raku-bot> <Kaiepi> that's another thing - it takes the type into account strictly usually

[11:34] <discord-raku-bot> <gfldex> <@297037173541175296> outside of sink-context, `for` is actually replaced by https://github.com/rakudo/rakudo/blob/master/src/core.c/Any-iterable-methods.pm6#L885

[11:37] <discord-raku-bot> <Nemokosch> <@989550365533937664> don't ever fear that you'll have nothing to learn about Raku in a few months üòÖ it's way too big for that

[11:37] <discord-raku-bot> <Nemokosch> but I like how the source is mostly Raku

[11:39] <discord-raku-bot> <gfldex> m:```

[11:39] <discord-raku-bot> <gfldex>     class C { method map(|) { put ‚Äöcustom map‚Äò } }

[11:39] <discord-raku-bot> <gfldex>     do for C.new { }

[11:39] <discord-raku-bot> <gfldex> ```

[11:39] <discord-raku-bot> <gfldex> unless the object implements it's own `.map`

[11:55] <discord-raku-bot> <yabobay> yeah but at the moment i have *every* thing to learn about raku

[11:57] <discord-raku-bot> <Nemokosch> Do the weekly challenges üòõ they are usually very doable

[11:57] <discord-raku-bot> <yabobay> 1. weekly challenges?

[11:57] <discord-raku-bot> <yabobay> 2, i am  doing the "raku essentials" thing right now

[11:58] <discord-raku-bot> <yabobay> just very slowly

[11:58] <discord-raku-bot> <yabobay> cause i'm telling myself i should be doing homework, but i don't do that either. so i end up making no progress in either thing

[11:58] <discord-raku-bot> <Nemokosch> https://theweeklychallenge.org/

[11:59] <discord-raku-bot> <yabobay> that's interesting

[11:59] <discord-raku-bot> <yabobay> i noticed perl & raku are very community-ish

[12:01] <discord-raku-bot> <gfldex> That `do for` calles `.map` is an ENODOC. :-/

[12:08] <discord-raku-bot> <Kaiepi> i'm not sure how much of `for`/`map` is spec and how much is rakudo implementation detail offhand

[12:08] <discord-raku-bot> <Kaiepi> implementation details are documentable, just brittle

[12:10] <discord-raku-bot> <yabobay> this is very fun

[12:10] <discord-raku-bot> <Kaiepi> `do ... for` *is* eager and an iteration of sorts, so it could at least hint that they should generate comparable values

[12:10] <discord-raku-bot> <Kaiepi> `do ... for` *is* eager and an iteration of sorts, so it could at least hint that they should generate comparable results

[13:12] <discord-raku-bot> <stevied> I got a windows 11 machine up and running. I'm not a windows guy. But I want to test a module directly on windows. But I can't seem to get `run` command to work at all.

[13:12] <discord-raku-bot> <stevied> `say run('ls')` throws an error

[13:12] <discord-raku-bot> <stevied> `say run('dir') also throws an error`

[13:14] <discord-raku-bot> <stevied> `say run('dir')` also throws an error

[13:31] <discord-raku-bot> <Nemokosch> good for you - I didn't manage to get rakubrew working on Windows 10 at all

[13:32] <discord-raku-bot> <stevied> I got errors with rakubrew

[13:32] <discord-raku-bot> <stevied> i installed the binary

[13:49] <discord-raku-bot> <stevied> rakubrew is now working for me and installing new raku builds. just tested it

[13:56] <discord-raku-bot> <Nemokosch> good for you...

[13:57] <discord-raku-bot> <stevied> I think installing the binary must have configured things properly. Not sure though.

[13:57] <discord-raku-bot> <Nemokosch> I don't know

[13:57] <discord-raku-bot> <Nemokosch> For me, it fails while extracting the release

[16:36] *** dakkar left
[19:23] *** n1to joined
[21:21] *** n1to left
