[00:03] *** Kaipei left
[00:03] *** Kaipei joined
[00:06] *** kjp left
[00:41] <discord-raku-bot> <stevied#8273> how can I turn this into a one-liner?

[00:41] <discord-raku-bot> <stevied#8273> ```

[00:41] <discord-raku-bot> <stevied#8273>     method topics() {

[00:41] <discord-raku-bot> <stevied#8273>         my @topics;

[00:41] <discord-raku-bot> <stevied#8273>         @.directories.map: { @topics.push(.name) if .depth == 1  };

[00:41] <discord-raku-bot> <stevied#8273>         return @topics;

[00:41] <discord-raku-bot> <stevied#8273>     }

[00:41] <discord-raku-bot> <stevied#8273> ```

[01:10] <discord-raku-bot> <stevied#8273> ok, got it `map( { .name if .depth == 1 }, @.directories)`

[01:11] *** frost joined
[01:11] <discord-raku-bot> <stevied#8273> or `@.directories.map: { .name if .depth == 1  };`

[01:15] <guifa> why not use grep?

[01:15] <discord-raku-bot> <stevied#8273> I couldn't figure it out

[01:15] <guifa> @.directories.grep(*.depth == 1).map: *.name

[01:16] <guifa> also, any reason you're using method access rather than direct attribute access?  (not necessary wrong, but it's not common, so I'm curious)

[01:19] <discord-raku-bot> <stevied#8273> i'm calling the method from a test file

[01:30] <discord-raku-bot> <stevied#8273> seems a little more elegant without grep, actually

[01:31] <discord-raku-bot> <stevied#8273> when I was trying grep, I was trying to use with the hyper operator. that was my problem

[04:32] *** kjp joined
[07:02] *** dakkar joined
[10:01] *** frost left
[10:22] *** lizmat_ joined
[10:26] *** lizmat left
[10:26] *** lizmat_ is now known as lizmat

[10:44] *** Nemokosch joined
[10:56] *** frost joined
[11:10] *** discord-raku-bot left
[11:10] *** discord-raku-bot joined
[11:17] <discord-raku-bot> <stevied#8273> I've got this method calls: `method resource-exists(Str:D $path)`

[11:19] <discord-raku-bot> <stevied#8273> I want to check that the $path starts with a certain directory. if it doesn't, I want to modify it before it gets used by the method. is this possible?

[11:20] <SmokeMachine> `Str:D $path is copy`?

[11:23] <discord-raku-bot> <stevied#8273> it's not set up as `is copy` no

[11:23] <discord-raku-bot> <stevied#8273> what can that get me?

[11:25] <lizmat> that you can modify it

[11:25] <lizmat> m: sub a($a is copy) { $a = 42; say $a }; a 666

[11:25] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´42‚ê§¬ª

[11:27] <discord-raku-bot> <stevied#8273> right, but what does it get me in relation to my problem of wanting to modify the argument before it's used by the method?

[11:28] <lizmat> m: sub a($a is copy) { $a = 42 if $a == 666 }; a 666; a 314

[11:28] <camelia> rakudo-moar 6584775cc: ( no output )

[11:28] <discord-raku-bot> <stevied#8273> might this be what a callable is for? I have never used a callable argument before.

[11:28] <SmokeMachine> staved: it let you modify the argument received by the method. I've probably misunderstood something...

[11:28] <lizmat> m: sub a($a is copy) { $a = 42 if $a == 666; say $a }; a 666; a 314

[11:28] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´42‚ê§314‚ê§¬ª

[11:29] <discord-raku-bot> <stevied#8273> yeah, but is there a way to modify the argument without putting that logic inside of the method?

[11:30] <discord-raku-bot> <stevied#8273> like, I want to run a little subroutine to do the argument checking, is what I guess I mean

[11:30] <lizmat> well, you could make it a multi

[11:31] <lizmat> m: multi sub a(666) { a 42 }; multi sub a($a) { say $a }; a 666; a 314

[11:31] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´42‚ê§314‚ê§¬ª

[11:31] <discord-raku-bot> <stevied#8273> I want to test if `$path` starts with `blah/` and if it doesn't, then tack on `blah/` to the front

[11:34] <lizmat> m: multi sub a($a where *.starts-with("blah/") ) { say $a }; multi sub a($a) { a "blah/$a" }; a "blah/foo"; a "bar"

[11:34] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´blah/foo‚ê§blah/bar‚ê§¬ª

[11:35] <SmokeMachine> m: multi bla($path where *.starts-with: "bla/") { bla "somewhere/else/" }; multi bla($path) { say $path }; bla "bla/qwer"; bla "ble/qwer"

[11:36] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´somewhere/else/‚ê§ble/qwer‚ê§¬ª

[11:36] <SmokeMachine> m: multi bla($path where *.starts-with: "bla/") { callwith "somewhere/else/" }; multi bla($path) { say $path }; bla "bla/qwer"; bla "ble/qwer"

[11:36] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´somewhere/else/‚ê§ble/qwer‚ê§¬ª

[11:37] <discord-raku-bot> <stevied#8273> I guess that works. might get a little mess with a bunch of multis for each of my methods that use `$path`

[11:39] <discord-raku-bot> <stevied#8273> i guess I'll just remember to put a little path-check() method in the body of each method.

[11:39] <discord-raku-bot> <stevied#8273> thanks

[11:42] <discord-raku-bot> <stevied#8273> i'll use multi for the `path-check` sub

[11:48] <SmokeMachine> stevied: maybe you could do something like this:

[11:48] <SmokeMachine> m: multi trait_mod:<is>(Routine $ref, Bool :$path-checked) { $ref.wrap: -> $path, |c { do if $path.starts-with: "bla/" { callwith "other/path", |c } else { callsame } } }; sub do-something-with-path($path) is path-checked { say $path }; do-something-with-path "bla/ble"; do-something-with-path "ble/bli"

[11:48] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´other/path‚ê§ble/bli‚ê§¬ª

[11:50] <discord-raku-bot> <stevied#8273> that's hard to read in discord. it's all on one line. can you put that in a paste bin or something, please?

[11:53] <SmokeMachine> m: https://gist.github.com/FCO/088dd067dcce838111b4d95c5328d56e

[11:53] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row across lines (missing semicolon or comma?)‚ê§at <tmp>:21‚ê§------> do-something-with-path "ble/bli"‚èè<EOL>‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§  ‚Ä¶¬ª

[11:53] <Nemokosch> dw it's hard to read in IRC as well

[11:54] <SmokeMachine> m: https://gist.github.com/FCO/088dd067dcce838111b4d95c5328d56e

[11:54] <camelia> rakudo-moar 6584775cc: OUTPUT: ¬´other/path‚ê§ble/bli‚ê§ something else: other/path‚ê§ something else: ble/bli‚ê§¬ª

[11:55] <discord-raku-bot> <stevied#8273> taht's super cool

[11:55] <SmokeMachine> (sorry, missing `;`)

[11:58] *** discord-raku-bot left
[11:58] *** Nemokosch left
[11:58] *** discord-raku-bot joined
[11:58] <discord-raku-bot> <stevied#8273> ok, I knew nothing about traits: https://docs.raku.org/type/Sub#index-entry-trait__mod_(declarator)

[11:58] <discord-raku-bot> <stevied#8273> interesting

[12:02] <SmokeMachine> stevied: I think that would work even better it $path was named instead of positional...

[12:02] <discord-raku-bot> <stevied#8273> i'm running into one small problem. the trait_mod method can't seem to get access to the `self.root` attribute in the class it's being used in

[12:05] *** discord-raku-bot left
[12:05] *** discord-raku-bot joined
[12:06] *** jgaz joined
[12:17] <discord-raku-bot> <stevied#8273> ok, running into issues. the `trait-mod` sub is inside a class. so the first arg is the invocant

[12:23] <discord-raku-bot> <stevied#8273> here's the error I get:

[12:23] <discord-raku-bot> <stevied#8273> ```

[12:23] <discord-raku-bot> <stevied#8273> No such method 'starts-with' for invocant of type

[12:23] <discord-raku-bot> <stevied#8273> 'Doc::Resources::Resources'

[12:23] <discord-raku-bot> <stevied#8273>   in block  at /Users/stevedondley/git_repos/raku/modules/Doc-Examples/lib/Doc/Resources.rakumod (Doc::Resources) line 44

[12:23] <discord-raku-bot> <stevied#8273>   in block <unit> at /Users/stevedondley/git_repos/raku/modules/Doc-Examples/t/03-resources.rakutest line 12

[12:23] <discord-raku-bot> <stevied#8273> ```

[13:15] *** jgaz left
[13:25] *** lizmat_ joined
[13:27] *** lizmat left
[13:32] *** lizmat_ is now known as lizmat

[14:07] *** frost left
[14:19] <discord-raku-bot> <stevied#8273> ok, managed to figure out how to do a trait_mod to wrap a method:

[14:19] <discord-raku-bot> <stevied#8273> ```

[14:19] <discord-raku-bot> <stevied#8273>     multi sub trait_mod:<is>(Method $obj, Bool :$path-checked) {

[14:19] <discord-raku-bot> <stevied#8273>         $obj.wrap: -> $inv, $path, |c {

[14:19] <discord-raku-bot> <stevied#8273>             if $path.starts-with: 'resources/examples/' {

[14:19] <discord-raku-bot> <stevied#8273>                 callsame;

[14:19] <discord-raku-bot> <stevied#8273>             } else {

[14:19] <discord-raku-bot> <stevied#8273>                 callwith $inv, "resources/examples/" ~ $path, |c;

[14:19] <discord-raku-bot> <stevied#8273>             }

[14:19] <discord-raku-bot> <stevied#8273>         }

[14:19] <discord-raku-bot> <stevied#8273>     }

[14:19] <discord-raku-bot> <stevied#8273> ```

[14:20] <discord-raku-bot> <stevied#8273> now, the last tricky bit is that I want to look up the path which is a `$.root` attribute

[14:21] <discord-raku-bot> <stevied#8273> I can't get access to it from inside the trait_mod sub

[14:21] <discord-raku-bot> <stevied#8273> I tried doing `multi method trait_mod` but just got an error:

[14:21] <discord-raku-bot> <stevied#8273> `Can't use unknown trait 'is' -> 'path-checked' in method declaration.`

[14:21] <discord-raku-bot> <stevied#8273> is there any way to get around that?

[14:23] <SmokeMachine> why not just call $inv.root?

[14:23] <discord-raku-bot> <stevied#8273> ah, lemme try

[14:24] <discord-raku-bot> <stevied#8273> bam, nice.

[14:25] <discord-raku-bot> <stevied#8273> thanks!

[14:25] <discord-raku-bot> <stevied#8273> i'm at peace again üôÇ

[14:25] <discord-raku-bot> <stevied#8273> this is exactly the kind of thing I was looking to do. very cool

[14:27] <discord-raku-bot> <stevied#8273> this is some pretty amazing stuff, at least to me

[14:36] *** Kaipii joined
[14:39] *** Kaipei left
[14:41] *** Kaipii left
[14:41] *** Kaipii joined
[15:23] *** sienet_ja_LSD[m] joined
[15:38] *** dakkar left
[16:14] *** Kaipii left
[16:14] *** Kaipii joined
[16:36] *** jgaz joined
[16:57] *** jgaz left
[17:13] <guifa> traits can be crazy useful in some instances

[17:14] <guifa> I have one that lets you use alias method names.  Took about 5-10 minutes to write, but man, it saves a LOT of time (and improved user experience for folks using the module :-) )

[17:25] <discord-raku-bot> <Nemokosch#9980> which module? üßê

[17:25] <guifa> Intl::CLDR

[17:26] <guifa> https://github.com/alabamenhu/Intl-CLDR/blob/acc64165ee64534dfc9872e5d6382b8d0d898245/lib/Intl/CLDR/Core.rakumod#L38

[17:27] <guifa> LOL my declarator pod is backwards between the attribute and method trait.  note to self to fix it

[17:40] <guifa> I did it because CLDR has been around for a while, and depending on the era, some parts use one or another naming convention.  I default to lowercase kebab because that's the norm in Raku, but if that's not what it uses, I provide the alias in case that makes life easier integrating with other workflows

[17:48] *** johnjaye joined
[17:48] <johnjaye> is most work that happens on raku on the language or libraries or something else?

[17:50] <discord-raku-bot> <Nemokosch#9980> what is CLDR üòÖ

[17:53] <johnjaye> some unicode xml-ish thing for locales. sounds terrifying

[17:59] <discord-raku-bot> <Nemokosch#9980> lol xd

[18:06] <discord-raku-bot> <Nemokosch#9980> johnjaye: https://rakudoweekly.blog/ check this out

[18:33] <sienet_ja_LSD[m]> what data format is h' ?

[18:34] <sienet_ja_LSD[m]> like in python they have b'a0a786a8' for bytes data

[18:34] <sienet_ja_LSD[m]> that starts with h'

[21:24] *** Kaipii left
[21:26] <guifa> I would assume it's for hex, but it's not a Raku-based format

[21:27] *** jgaz joined
[21:27] <guifa> johnjaye both.  There are still parts of the language that are being worked on (macros, etc) but since everything is there for 99% of projects, lots of us are now focusing on developing libraries to use with it

[21:27] <sienet_ja_LSD[m]> aye ok, CBOR::Simple produced it (which I still don't seem to get working)

[21:28] <guifa> Nemo: yeah, it's a massive database of localization data, like, how do you format dates, what are the abbreviations for months, etc. 

[21:36] *** jgaz left
[21:50] <discord-raku-bot> <Anton Antonov#7232> I have a nested hash (say, a hash of hashes of hashes) `%h3`  and a list of keys `<k1 k2 k3>`. What is the shortest code to get to the "bottom" element with that list of keys? I know I can do `%h<k1><k2><k3>`  and, maybe, I can write a reduce-like code. Is there anything shorter and/or more standard?

[22:06] *** m_athias_ joined
[22:07] *** pi1 joined
[22:07] *** m_athias left
[22:07] *** deadmarshal left
[22:07] *** johnjaye left
[22:10] *** m_athias_ is now known as m_athias

[22:13] *** deadmarshal joined
[22:25] *** pi1 is now known as johnjaye

[22:26] <johnjaye> how easy is it to port a perl library to a raku library on a scale of 1 to 10?

[22:33] *** jgaz joined
[22:38] <guifa> Anton: nothing standard.  I'd just write a quick sub that does it, and call it 

[22:38] <guifa> m: sub deep(%b,+@k) {my $r=%b; $r=$r{$_} for @k;$r}; my %a = b=>%(c=>1,d=>2),e=>%(f=>3,g=>4); say %a.&deep: <b c>; say %a.&deep(<e g>);

[22:38] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´1‚ê§4‚ê§¬ª

[22:40] <guifa> if you're really going to use it a lot, you might look at creating a custom postcircumfix, but since the standard (post)circumfixes have all been taken, it'll be tricky coming up with a good choice, but you could do

[22:41] <guifa> multi sub postcircumfix:<‚ü® ‚ü©>(%b,+@k) {my $r=%b; $r=$r{$_} for @k;$r}; my %a = b=>%(c=>1,d=>2),e=>%(f=>3,g=>4); say %a‚ü®<b c>‚ü©; say %a‚ü®<e g>‚ü©;

[22:44] <guifa> the catch is that the %a<foo> is actually shorthand for %a{'foo'}, so it's combining a quote and an operator in one.  You can only create the custom operator side, so you'd still need to create an array of strings (via < >)

[22:51] <discord-raku-bot> <Anton Antonov#7232> @guifa Thanks! The postcircumfix solution is nice. (But I used double squared brackets, "‚ü¶ ‚üß", instead of angular brackets.)

[22:54] <discord-raku-bot> <Anton Antonov#7232> BTW, I mostly want / need this for testing of Tries with frequencies; see https://raku.land/cpan:ANTONOV/ML::TriesWithFrequencies. So, having that kind function defined in that package would make sense.

[22:55] <guifa> BTW, I just tested and you can use ASCII double square brackets without any trouble :-)

[22:56] <guifa> multi sub postcircumfix:<[[ ]]>(%b,+@k) {my $r=%b; $r=$r{$_} for @k;$r}; my %a = b=>%(c=>1,d=>2),e=>%(f=>3,g=>4); say %a[[<b c>]]; say %a[[<e g>]];

[22:56] <guifa> m: multi sub postcircumfix:<[[ ]]>(%b,+@k) {my $r=%b; $r=$r{$_} for @k;$r}; my %a = b=>%(c=>1,d=>2),e=>%(f=>3,g=>4); say %a[[<b c>]]; say %a[[<e g>]]; say [[1,2], 3]

[22:56] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´1‚ê§4‚ê§[[1 2] 3]‚ê§¬ª

[22:58] <guifa> Might make typing easier.  Shouldn't be a problem, as you can create raw lists like @a = [[1, 2], [3,4]] without interference (those are circumfixes, rather than postcircumfixes), and the likelihood of you doing needing to pass a literal array as an index of an array (like `@foo[[1,2] + 3]` or something) is probably about zero :-)

[23:10] <discord-raku-bot> <Anton Antonov#7232> Thank you, sounds good!

[23:32] <discord-raku-bot> <stevied#8273> I can't figure out how to use splitpath: https://docs.raku.org/routine/splitpath

[23:33] <discord-raku-bot> <stevied#8273> just get an error: `No such method 'splitpath' for invocant of type 'Str'`

[23:33] <discord-raku-bot> <stevied#8273> I tried converting it to .IO but that didn't help

[23:33] <discord-raku-bot> <stevied#8273> this is my code:

[23:33] <discord-raku-bot> <stevied#8273> ```

[23:33] <discord-raku-bot> <stevied#8273>     method has-separator(Str:D $path) {

[23:33] <discord-raku-bot> <stevied#8273>         ($path.splitpath)[1] ?? True !! False;

[23:33] <discord-raku-bot> <stevied#8273>     }

[23:33] <discord-raku-bot> <stevied#8273> ```

[23:42] *** jgaz left
