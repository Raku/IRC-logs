[01:14] <discord-raku-bot> <stevied#8273> I tried that. But no whay to get the month name "January" from that

[01:16] <discord-raku-bot> <stevied#8273> this is what I'm looking for: https://raku.land/cpan:JFORGET/Date::Calendar::Strftime

[06:32] <discord-raku-bot> <stevied#8273> I'm stumped again. Got this:

[06:32] <discord-raku-bot> <stevied#8273> ```

[06:32] <discord-raku-bot> <stevied#8273> #! /usr/bin/env raku

[06:32] <discord-raku-bot> <stevied#8273> use v6;

[06:32] <discord-raku-bot> <stevied#8273> class Vimwiki::File is IO::Path {

[06:32] *** discord-raku-bot left
[06:32] *** discord-raku-bot joined
[06:37] *** discord-raku-bot left
[06:37] *** discord-raku-bot joined
[08:36] *** m_athias left
[08:36] *** m_athias joined
[09:05] *** dakkar joined
[09:18] <discord-raku-bot> <Nemokosch#9980> Because you set a different variable, I guess

[09:24] <discord-raku-bot> <Nemokosch#9980> Hm, or that nextwith overrides the value, not sure what it even does

[10:40] <discord-raku-bot> <gfldex#8222> `self.bless` returns a new `self` that `nextwith` doesn't know about.

[10:40] <discord-raku-bot> <gfldex#8222> Subclassing `IO::Path` may have surprising results.

[10:43] <lizmat> I think IO::Path is not really subclassable at the moment...

[10:43] <lizmat> that may warrant a Rakudo issue

[10:48] <discord-raku-bot> <gfldex#8222> A `subset` might do.

[11:39] *** frost joined
[12:14] *** frost left
[13:06] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/01/31/2022-05-foo-is-42/

[13:34] *** A26F64 joined
[13:55] *** discord-raku-bot left
[13:56] *** discord-raku-bot joined
[14:31] *** ychaouche joined
[14:31] <ychaouche> hello

[14:32] <ychaouche> I am trying to learn about raku, coming from python, I am reading python to raku (https://docs.raku.org/language/py-nutshell)

[14:32] <ychaouche> I am intrigued by the "\" sigill (is it a sigill). It says :  Sigilless variables, declared with a \ but used without them, are bound to the value they are assigned to and are thus immutable.

[14:32] <ychaouche> Are they like constants ? 

[14:33] <ychaouche> the kind of variable you write in all caps in C for example ? 

[14:33] <ychaouche> well, not variable, constant

[14:34] <lizmat> they are bound:  if they are bound to a scalar container, they can be changed

[14:34] <lizmat> m: my \foo = 42; foo = 666

[14:34] <camelia> rakudo-moar ec4522404: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[14:35] <lizmat> m: my \foo = my $ = 42; foo = 666; say foo

[14:35] <camelia> rakudo-moar ec4522404: OUTPUT: «666␤»

[14:35] <lizmat> the "my $" is a nameless variable with a container

[14:37] <ychaouche> so in the second example you bound foo to a scalar variable, which let you change its content ?

[14:37] <ychaouche> scalar unnamed variable

[14:40] <lizmat> yup

[14:41] <ychaouche> ok thanks mate

[14:41] <lizmat> https://opensource.com/article/18/8/containers-perl-6   # the article predates the rename, but the content is still correct otherwise

[14:43] <ychaouche> maybe I shouldn't read that article, as I was not a perl developer myself

[14:43] <ychaouche> I'm afraid to get confused

[14:44] <gfldex> The confusion is not Perl specific.

[14:44] <gfldex> :->

[14:45] <lizmat> ychaouche: the concept of binding and containers is important to get right in your mind when using Raku

[14:45] <ychaouche> gfldex: it is article specific. it is comparing perl5 and perl6, I fear of getting lost when learning both languages

[14:45] <ychaouche> gfldex: better stick with raku

[14:46] <lizmat> ychaouche++

[14:46] <lizmat> :-)

[14:46] <gfldex> this might help then: https://docs.raku.org/language/containers

[14:46] <lizmat> gfldex++

[14:47] <ychaouche> thanks gfldex, it seems easy enough to read for beginners

[14:47] <ychaouche> not too long and paragraph headers do not introduce too many new concepts

[14:48] <gfldex> Well, I'm not really happy with any of the docs we have. They don't state why we need binding to raw "things" and that can be quite important to understand what is really going on.

[14:48] <ychaouche> oh, by the way, are lists a data type in raku or is still an internal structure not really meant to be used by the developer ?

[14:48] <gfldex> Unless you do fancy stuff, just stick to sigiled variables.

[14:49] <lizmat> ychaouche: lists are first class citizens in Raku

[14:49] <lizmat> however, their contents *can* be mutable if elements are bound to a container

[15:08] <ychaouche> "For a deeper discussion of the various kinds of ordered containers in Raku, see the overview of lists, sequences, and arrays; for unordered containers, see sets, bags, and mixes"

[15:09] <ychaouche> are raku "containers" what other languages may call "collections" ?

[15:10] <ychaouche> a data structure where you can put more than one value

[15:11] <ychaouche> hum, no

[15:12] <ychaouche> even single value data is a container (scalar)

[15:17] <ychaouche> can't understand this yet : f() = 42;

[15:18] <lizmat> that function f() returns a container

[15:18] <lizmat> m: sub foo() is raw { my $ }; foo() = 42

[15:18] <camelia> rakudo-moar ec4522404: ( no output )

[15:19] <lizmat> m: my $bar; sub foo() is raw { $bar }; foo() = 42; say $bar

[15:19] <camelia> rakudo-moar ec4522404: OUTPUT: «42␤»

[15:19] <lizmat> the "is raw" on the sub makes sure it doesn't de-containerize (which is the default)

[15:20] <ychaouche> is "is rw" the same as "is raw" ?

[15:21] <lizmat> m: my $bar; sub foo() is rw { $bar }; foo() = 42; say $bar

[15:21] <camelia> rakudo-moar ec4522404: OUTPUT: «42␤»

[15:21] <lizmat> in this context, yes

[15:21] <ychaouche> oh...

[15:22] <ychaouche> so they're really different things

[15:22] <ychaouche> I was making sure it's not syntactic sugar

[15:22] <ychaouche> otherwise rw is like read/write ? 

[15:22] <lizmat> m: sub foo($a is rw) { dd }; foo 42   # another context for "is rw"

[15:22] <camelia> rakudo-moar ec4522404: OUTPUT: «Parameter '$a' expects a writable container (variable) as an argument,␤but got '42' (Int) as a value without a container.␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:23] <lizmat> m: sub foo($a is rw) { dd }; my $b = 42; foo $b

[15:23] <camelia> rakudo-moar ec4522404: OUTPUT: «sub foo($a is rw)␤»

[15:23] <lizmat> (a bare dd just shows the sub / method with signature it is called in

[15:23] <lizmat> )

[15:24] <lizmat> m: sub foo($a is raw) { dd }; foo 42    # with "is raw" it will just bind to the constant

[15:24] <camelia> rakudo-moar ec4522404: OUTPUT: «sub foo($a is raw)␤»

[15:42] <ychaouche> "In order to mutate attributes in Raku, you must use the is rw trait on the attributes:"

[15:43] <ychaouche> so, by default, all attributes are immutable ? 

[15:43] <lizmat> public attributes are set at object creation time by default, and then immutable from the outside

[15:43] <lizmat> a class may change any attribute using the private attribute syntax

[15:44] <lizmat> m: class A { has $!a; method foo() { $!a = 42 }; method bar() { $!a } }; my $a = A.new; say $a.bar; $a.foo; say $a.bar

[15:44] <camelia> rakudo-moar ec4522404: OUTPUT: «(Any)␤42␤»

[15:47] <ychaouche> so the "!" is for private ? 

[15:50] <lizmat> yeah, ! used as a twigil means private

[15:51] <lizmat> . used as a twigil means public

[15:53] <ychaouche> are twigils mandatory or can you have "has $attribute" ? 

[15:55] <lizmat> you actually can, but there's talk of having that form deprecated

[15:55] <lizmat> so better not learn that now  :-)

[15:58] <ychaouche> ok

[15:58] <ychaouche> is andrew shittov around ? 

[15:59] <lizmat> andrew usually doesn't hang out on IRC

[15:59] <ychaouche> ok

[15:59] <ychaouche> just found his course on a bing search

[15:59] <lizmat> but he hangs out on Twitter: @andrewshitov

[16:00] <ychaouche> nice to know, thanks

[16:07] <ychaouche> thanks all of you

[16:07] <ychaouche> maybe next time

[16:07] *** ychaouche left
[16:20] <discord-raku-bot> <stevied#8273> OK, thanks for feedback on subclassing IO::Path

[16:21] <discord-raku-bot> <stevied#8273> I tried a million different things to try to subclass it properly. None of them worked.

[16:22] <discord-raku-bot> <stevied#8273> I found a module that did do it but it used some nqp to pull it off using a function called `augment`

[16:23] <lizmat> yeah... augment is not a good idea generally  :-(

[16:24] <discord-raku-bot> <stevied#8273> https://github.com/labster/p6-IO-Path-More/blob/master/lib/IO/Path/More.pm

[16:24] <discord-raku-bot> <stevied#8273> according to docs, you can't give the object attributes when augmented

[16:29] <discord-raku-bot> <stevied#8273> https://stackoverflow.com/questions/70919945/how-to-make-a-class-that-inherits-the-same-methods-as-iopath

[16:29] <discord-raku-bot> <stevied#8273> raiph said to avoid trying to subclass it and use an attribute to delegate to IO::Path

[16:31] <discord-raku-bot> <stevied#8273> how so I submit a rakudo issue?

[16:46] <lizmat> https://github.com/rakudo/rakudo/issues/new

[17:03] *** A26F64 left
[17:14] <discord-raku-bot> <stevied#8273> ok,, thanks. writing something u

[17:36] *** dakkar left
