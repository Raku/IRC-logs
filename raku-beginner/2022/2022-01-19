[01:49] *** discord-raku-bot left
[01:49] *** discord-raku-bot joined
[01:53] *** gfldex left
[01:57] *** gfldex joined
[03:05] *** frost joined
[04:21] *** frost left
[04:37] *** guifa joined
[05:23] *** frost joined
[06:37] *** frost left
[06:40] *** frost joined
[07:16] *** frost left
[07:28] *** frost joined
[07:34] *** frost left
[08:07] *** dakkar joined
[10:21] *** qorg11 left
[12:46] *** destroycomputers left
[12:46] *** discord-raku-bot left
[12:46] *** discord-raku-bot joined
[12:46] *** destroycomputers joined
[16:39] *** dakkar left
[20:07] <discord-raku-bot> <stevied#8273> what is the comma doing in this line? `my @out = [ [@in.shift], ];`

[20:08] <MasterDuke> make a list of lists, see the single arg rule in the docs

[20:09] <discord-raku-bot> <stevied#8273> it's creating an array within an array but I'm not sure how

[20:09] <MasterDuke> the ,

[20:13] <discord-raku-bot> <stevied#8273> ok, this here: https://docs.raku.org/syntax/Single%20Argument%20Rule

[20:13] <discord-raku-bot> <stevied#8273> haven't seen this before

[20:19] <discord-raku-bot> <stevied#8273> why doesn't `my @array = [ 1, ];` create an array within the @array?

[20:21] <MasterDuke> there's only one level there, `my @array = [ [1], ];` would make two

[20:22] <MasterDuke> m: my @a = [ [1,2], ]; say @a.elems; say @a[0].elems

[20:22] <camelia> rakudo-moar 25562dd80: OUTPUT: «1␤2␤»

[20:25] <discord-raku-bot> <stevied#8273> i'm confused. why doesn't [ [ 1 ] ] create an array in an array?

[20:27] <MasterDuke> because commas create lists/arrays, not [] or ()

[20:27] <discord-raku-bot> <stevied#8273> no matter how many square brackets I use, it's always just on element in an array

[20:29] <discord-raku-bot> <stevied#8273> ok, i see my confusion now. the outer brackets in `[ [@in.shift], ]` are superfluous

[20:29] <discord-raku-bot> <stevied#8273> don't need them

[20:30] <discord-raku-bot> <stevied#8273> thanks

[20:30] <MasterDuke> np

[20:43] *** qorg11 joined
[21:01] <discord-raku-bot> <Nemokosch#9980> interesting

[23:03] <discord-raku-bot> <stevied#8273> ok, got this:

[23:03] <discord-raku-bot> <stevied#8273> ```

[23:03] <discord-raku-bot> <stevied#8273> multi blah ($string) {

[23:03] <discord-raku-bot> <stevied#8273>     $string = 3;

[23:03] <discord-raku-bot> <stevied#8273> }

[23:03] <discord-raku-bot> <stevied#8273> multi blah (@array) {

[23:03] <discord-raku-bot> <stevied#8273>     @array.shift;

[23:03] <discord-raku-bot> <stevied#8273> }

[23:03] <discord-raku-bot> <stevied#8273> my @array = 1, 2, 3;

[23:03] <discord-raku-bot> <stevied#8273> blah @array;

[23:03] <discord-raku-bot> <stevied#8273> say @array;

[23:03] <discord-raku-bot> <stevied#8273> my $string = 'old';

[23:03] <discord-raku-bot> <stevied#8273> blah $string;

[23:03] <discord-raku-bot> <stevied#8273> say $string;

[23:04] <discord-raku-bot> <stevied#8273> the @array is actually changed by the function, which was unexpected

[23:04] <discord-raku-bot> <stevied#8273> the string is immutable unless I do `is copy`

[23:04] <discord-raku-bot> <stevied#8273> why is the array mutable and the string isn't?

[23:11] <guifa> that $string = 3 there should fail

[23:11] <discord-raku-bot> <stevied#8273> right, it does

[23:12] <guifa> @array.shift doesn't change the array in @array, it just tells @array to do something

[23:13] <guifa> m: sub foo(@a) { @a.shift }; my @a = 1,2,3; say @a.WHICH; foo @a; say @a.WHICH;

[23:13] <camelia> rakudo-moar 25562dd80: OUTPUT: «Array|5485619587248␤Array|5485619587248␤»

[23:13] <discord-raku-bot> <stevied#8273> the `say @arrary` will print out [2, 3]

[23:13] <discord-raku-bot> <stevied#8273> so it changed

[23:13] <guifa> If I put three balls in a bag, and take one out, is it the same bag?

[23:15] <discord-raku-bot> <stevied#8273> yes. but why doesn't the bag stop you from taking balls out like with the string?

[23:15] <discord-raku-bot> <stevied#8273> the string is read only. I'm wondering why there is a different rule for the array. I can do anything I want to it and it changes outside the function.

[23:17] <discord-raku-bot> <stevied#8273> I can do @array = 7 inside the `blah` function and it works

[23:19] <guifa> So it's a two part answer.

[23:20] <guifa> But it revolves around the question of what we're changing.

[23:20] <guifa> And then also the assignment type (determined by the sigil) 

[23:22] <MasterDuke> a very short answer is that an array is a container. you can't change the container itself, it's immutable like the string is in your example, but you can change its contents

[23:23] <discord-raku-bot> <stevied#8273> but I thought scalars were also containers

[23:23] <discord-raku-bot> <Nemokosch#9980> well, it seems like this abstraction is more disturbing than useful here

[23:23] <discord-raku-bot> <Nemokosch#9980> at the end of the day, the behavior is exactly the same as it would be in Javascript or Python

[23:23] <guifa> Nemokosch: almost

[23:23] <discord-raku-bot> <stevied#8273> well, it's much different from perl

[23:23] <discord-raku-bot> <stevied#8273> which is what I'm used to

[23:24] <guifa> m: sub foo (@x) { @x = 4,5,6 }; my @y = 1,2,3; foo @y; say @y;

[23:24] <camelia> rakudo-moar 25562dd80: OUTPUT: «[4 5 6]␤»

[23:24] <discord-raku-bot> <Nemokosch#9980> an array is composit, even if you take it as a literal

[23:24] <guifa> ^^ that would be different in Javascript or Python, I believe

[23:25] <guifa> because they don't distinguish different types of assignments

[23:25] <discord-raku-bot> <Nemokosch#9980> I don't think that could change with any sigil

[23:25] <discord-raku-bot> <Nemokosch#9980> and tbh I wouldn't consider this a feature in this context, more an anomaly

[23:26] <guifa> m: sub foo ($x) { $x = 4,5,6 }; my @y = 1,2,3; foo @y; say @y;

[23:26] <camelia> rakudo-moar 25562dd80: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:26] <discord-raku-bot> <Nemokosch#9980> implicit "is rw"

[23:27] <discord-raku-bot> <Nemokosch#9980> the compiler does warn you about it of course, I mean that the @ sigil is always rw

[23:27] <discord-raku-bot> <Nemokosch#9980> is it even possible to make it readonly or something?

[23:27] <guifa> You can pass a list

[23:28] <guifa> m: sub foo (@x) { @x = 4,5,6 }; my @y is List = 1,2,3; foo @y; say @y;

[23:28] <camelia> rakudo-moar 25562dd80: OUTPUT: «Cannot modify an immutable Int (1)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:29] <discord-raku-bot> <Nemokosch#9980> okay but this fails because of the data passed, right?

[23:29] <discord-raku-bot> <Nemokosch#9980> not because of the parameter

[23:30] <guifa> @x is read only regardless.  The question is whether what's passed into X well allow itself to do anything.

[23:31] <discord-raku-bot> <Nemokosch#9980> if it's read only, how come you assign a value to it which it even keeps?

[23:31] <discord-raku-bot> <stevied#8273> that was my question, too

[23:32] <discord-raku-bot> <Nemokosch#9980> which is btw in accordance with what Rakudo says

[23:32] <guifa> Because @foo = is list assignment, and $foo = is scalar assignment, and they're subtly different

[23:32] <guifa> well, subtly different except here

[23:33] <discord-raku-bot> <Nemokosch#9980> ie "you don't have to mark is rw on @ sigilled parameters"

[23:33] <discord-raku-bot> <Nemokosch#9980> list assignment again... don't get me started

[23:34] <discord-raku-bot> <stevied#8273> gotta go eat. I'll check back later.

[23:34] <discord-raku-bot> <Nemokosch#9980> eating is caring

[23:36] <discord-raku-bot> <Nemokosch#9980> I'm yet to see list assignment written down in a positive context

[23:38] <discord-raku-bot> <Nemokosch#9980> remember switching @a and @b?

[23:40] <discord-raku-bot> <Nemokosch#9980> m: my @a = 1, 2; my @b = 3, 4; (@a, @b) = (@b, @a); dd @a, @b;

[23:40] <discord-raku-bot> <Nemokosch#9980> big yikes

[23:44] <discord-raku-bot> <Nemokosch#9980> and unlike the famous JS [] == ![], this is a perfectly realistic scenario

[23:50] <discord-raku-bot> <Nemokosch#9980> m: my $a = [1, 2]; my $b = [3, 4]; ($a, $b) = ($b, $a); dd $a, $b;

[23:50] <discord-raku-bot> <Nemokosch#9980> see, it can be done

