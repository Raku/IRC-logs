[00:13] *** frost left
[00:28] *** ae_chep left
[00:58] *** frost joined
[02:34] *** frost left
[02:37] *** frost joined
[03:29] *** Heptite left
[07:26] *** razetime joined
[07:38] *** guifa left
[07:39] *** guifa joined
[07:55] *** frost left
[08:00] *** dakkar joined
[08:12] *** razetime left
[08:31] *** razetime joined
[08:42] *** CIAvash left
[08:42] *** crystalfrost[m] left
[08:49] *** CIAvash joined
[09:23] *** frost joined
[09:27] *** crystalfrost[m] joined
[11:26] *** frost left
[11:42] *** frost joined
[13:39] *** frost left
[14:04] *** discord-raku-bot left
[14:04] *** discord-raku-bot joined
[14:28] <jaguart> noob question - I want to subclass Hash and tweak the way that .keys.sort work - can't figure out how to get started

[14:30] <jaguart> tried: class MyHash is Hash {}; my %h = MyHash.new( :a(1), :b(2), :c(3) ); dd %h # but no joy...

[14:31] <discord-raku-bot> <Kaiepi> you could make `keys` return a subtype of `Seq` with the appropriate `sort` behaviour if you pass an `Iterator` to `new`. this is how `Iterable`-ish methods are generally implemented https://docs.raku.org/type/Iterator

[14:32] <discord-raku-bot> <Kaiepi> you could make `keys` return a subtype of `Seq` with the appropriate `sort` behaviour if you pass an `Iterator` to `new`. `Iterator` is how `Iterable`-ish methods are generally implemented in core https://docs.raku.org/type/Iterator

[14:32] <discord-raku-bot> <Kaiepi> you could make `keys` return a subtype of `Seq` with the appropriate `sort` behaviour if you pass an `Iterator` to `new`. this is how `Iterable`-ish methods are generally implemented in core https://docs.raku.org/type/Iterator

[14:33] <jaguart> fab thanks - will start looking there

[15:23] *** Heptite joined
[16:38] *** dakkar left
[17:23] <lizmat> jaguart: perhaps also applicable: https://raku.land/zef:lizmat/Hash::Agnostic

[17:32] *** razetime left
[17:37] <jaguart> :lizmat++ thanks - finding my way. Is there a preferred pastbin for this channel

[17:38] <lizmat> nope, there isn't.  Personally, I use gist.github.com

[17:40] <jaguart> this is where I'm going: https://gist.github.com/jaguart/bd64157bcfa8271ad5bed69a286e0613

[17:41] <jaguart> the META6 class is a pain because of JSON key ordering...

[17:41] <jaguart> I'm thinking that by overriding the %h.sort method, we can get the META6 JSON in a reasonable order...

[17:42] <lizmat> I see

[17:42] <lizmat> one note: I guess the %w hash is immutalble, right ?

[17:43] <lizmat> my constant %w = ...

[17:43] <jaguart> yeah - a const really

[17:43] <lizmat> will make it a Map at compile time  

[17:44] <lizmat> m: dd my constant %h = a => 42

[17:44] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «:a(42)␤»

[17:44] <lizmat> m: dd my constant %h = a => 42, b => 666

[17:44] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «Map.new((:a(42),:b(666)))␤»

[17:48] <jaguart> Nice thanks. This is a suggestion for https://github.com/jonathanstowe/META6/issues/15

[18:07] <jaguart> though I cant help but wonder id Hash::Ordered might also be a help

[18:18] <lizmat> jaguart: https://github.com/timo/json_fast/pull/83

[18:19] <jaguart> that would be awesome :)

[18:20] <jaguart> I see that stowick already cascaded an issue to OrderedHash too - but the JSON::Fast is the ultimate destination of all roads :)

[18:20] <lizmat> the actual code change is minimal: documentation was more work  :-)

[18:24] <jaguart> There is a second call to associative.sort around line 260...

[18:26] <jaguart> I find updating the docs a good chore though - makes me think twice about the changes :)

[18:27] <jaguart> I havent fogotten that I was going to show you my first PHP::Tiny module - it's just that I'm not really sure the code is good enough.

[18:28] <lizmat> jaguart++  good catch!

[18:30] <lizmat> fix pushed

[18:32] <jaguart> you are fast - I've only half finished my cuppa - and you've tied the issue with a bow!

[18:35] <lizmat> yy down x 15 p up dd

[18:35] <lizmat> that was it  :-)

[18:36] <jaguart> You know that you have made the entire ecosystem more beautiful - on behalf of every human that reads their META6.json but uses the META6 class to generate/maintain it, I thank you :)

[18:37] <lizmat> you're welcome :-)

[18:57] <discord-raku-bot> <stevied> https://www.reddit.com/r/rakulang/comments/xdf64x/oneliner_to_test_if_string_matches_against_any/

[19:26] *** Heptite left
[19:27] *** Heptite joined
[19:46] *** discord-raku-bot left
[19:47] *** discord-raku-bot joined
