[00:28] *** MasterDuke joined
[00:47] *** Heptite joined
[00:54] *** deoac joined
[01:18] *** razetime joined
[01:58] *** deoac left
[01:59] *** deoac joined
[02:26] *** frost48 joined
[02:28] *** frost48 is now known as frost

[02:28] *** frost left
[02:28] *** frost joined
[02:59] *** deoac left
[03:48] *** Kaipei joined
[04:03] *** frost left
[04:05] *** frost joined
[04:40] *** frost left
[05:13] *** frost joined
[05:48] *** Heptite left
[06:14] *** Kaipei left
[06:15] *** Kaipei joined
[07:05] *** frost left
[08:52] *** dakkar joined
[10:05] *** tappi joined
[10:05] *** tappi left
[11:50] *** razetime left
[12:16] *** frost joined
[12:24] *** guifa joined
[12:33] *** tappi joined
[12:35] *** frost left
[12:45] *** tappi left
[13:07] *** razetime joined
[14:04] *** razetime left
[15:00] *** falsifian joined
[15:04] <falsifian> ("{$_}" for ^1).join eq "0"   -->   True (as I expect)

[15:04] <falsifian> die unless ("{$_}" for ^1).join eq "0"

[15:04] <falsifian> Use of uninitialized value $_ of type Any in string context.

[15:04] <falsifian> Doesn't happen if I use "$_" instead of "{$_}".

[15:04] <falsifian> What's going on?

[15:19] *** razetime joined
[15:22] <discord-raku-bot> <Nemokosch> falsifian: {} creates a block with its own $_

[15:22] <falsifian> Nemokosch: Even {} in string interpolation? Then why did the first one (without die) work?

[15:23] <discord-raku-bot> <Nemokosch> I also wonder about the first one

[15:25] <falsifian> Nemokosch: Also, even outside string interpolation, I don't see {...} always getting rid of $_

[15:25] <falsifian> e.g. for (^3) { say $_; { say $_; } }

[15:25] <falsifian> Prints each number twice. The inner {} didn't get rid of $_.

[15:26] <discord-raku-bot> <Nemokosch> fair point, although I think that's because the inner $_ gets bound to the outer one. Wouldn't know from the top of my head, to be honest

[15:27] <lizmat> m: say { say "foo" }.signature

[15:27] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´(;; $_? is raw = OUTER::<$_>)‚ê§¬ª

[15:27] <lizmat> note how the default value for the argument $_ is the outer $_

[15:28] <discord-raku-bot> <Nemokosch> phew, seems like I did manage to understand something, after all

[15:29] <discord-raku-bot> <Nemokosch> but then we might as well ask the difference, still

[15:30] <discord-raku-bot> <Nemokosch> the prefix if/unless works, the postfix one does not

[15:32] <discord-raku-bot> <Nemokosch> I think we've had code generation problems regarding for

[15:34] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/issues/5049 this is what I remembered

[15:35] *** Heptite joined
[15:37] <discord-raku-bot> <Nemokosch> really hard to imagine that this isn't a bug

[15:38] *** Guest11 joined
[15:38] *** Guest11 left
[15:46] <discord-raku-bot> <Nemokosch> m: say 'TRU' if { .say } ;

[15:47] <discord-raku-bot> <Nemokosch> interesting the least to say

[15:47] <discord-raku-bot> <Nemokosch> m: say 'TRU' if { .say } ;

[15:49] <lizmat> m: say 'TRU' if { .say }

[15:49] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´TRU‚ê§¬ª

[15:49] <discord-raku-bot> <Nemokosch> are blocks evaluated to true without being called?

[15:49] <lizmat> that'd be a considered a postfix if with a block as a parameter, and the block is *not* being run

[15:50] <discord-raku-bot> <Nemokosch> seems like that

[15:50] <lizmat> like any instantiated object by default

[15:50] <lizmat> m: class A { }; say "class" if A; say "instance" if A.new

[15:50] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´instance‚ê§¬ª

[15:50] <discord-raku-bot> <Nemokosch> that's the strange part of strangely consistent üòõ

[15:51] <discord-raku-bot> <Nemokosch> (still better than strangely inconsistent though)

[15:51] <lizmat> m: class A { method defined(--> False) { } }; say "class" if A; say "instance" if A.new

[15:51] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´instance‚ê§¬ª

[15:51] <lizmat> m: class A { method Bool(--> False) { } }; say "class" if A; say "instance" if A.new

[15:51] <camelia> rakudo-moar d52342eb0: ( no output )

[15:51] <lizmat> it's just that the Any:D Bool defaults to True

[15:53] <discord-raku-bot> <Nemokosch> this makes sense but it's a dead end for what I wanted to see about that weird {$_}

[15:55] <discord-raku-bot> <Nemokosch> but now it works...

[15:55] <discord-raku-bot> <Nemokosch> maybe it was some REPL weirdness all along?

[15:56] <discord-raku-bot> <Nemokosch> m:  die unless ("{$_}" for ^1).join eq "0"

[15:57] <discord-raku-bot> <Nemokosch> no, the REPL weirdness was that it worked for a while xd

[16:02] <lizmat> the REPL is not a good place to test complicated behaviours

[16:02] <discord-raku-bot> <Nemokosch> to be fair though, this shouldn't be complicated at all

[16:03] <discord-raku-bot> <Nemokosch> sadly, this seems to be deep in the "strangely inconsistent" territory

[16:29] <falsifian> m: die unless ("{$_}" for ^1).join eq "0"

[16:29] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´Use of uninitialized value $_ of type Any in string context.‚ê§Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block  at <tmp> line 1‚ê§Died‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:29] <falsifian> m: say ("{$_}" for ^1).join eq "0"

[16:29] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´True‚ê§¬ª

[16:30] <falsifian> I first observed this outside the REPL.

[16:38] *** jgaz joined
[17:02] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/12/05/2022-49-releasemas-again/

[17:05] <discord-raku-bot> <Nemokosch> somehow the $_ doesn't propagate in that block but I really can't say much more than it's probably a bug. Feel free to open an issue for it at https://github.com/rakudo/rakudo/issues so that it doesn't get lost

[17:21] <falsifian> Will do after work if someone else doesn't get to it first. Thanks for the answers!

[17:25] *** baughb joined
[17:29] <baughb> I want to read (and process) a file line-by-line, until I find an empty line, and then continue reading (and processing in a different way) line-by-line until the end. My idea was to bind `.IO.lines` with something like `my \lines = 'file'.IO.lines` and then run two for loops over it, but then I get the "The iterator of this Seq is already in

[17:29] <baughb> use/consumed" error. Is there some other way to do this lazily, without caching the file?

[17:33] *** razetime left
[17:38] *** dakkar left
[18:27] *** baughb left
[19:47] <lizmat> my $after; for $io.lines { if $after { say "after" } elsif !$_ { $after = True } else { say "before" } }

[19:55] <discord-raku-bot> <Nemokosch> something with ff could also work - not sure if it's genuinely worth it

[20:14] <discord-raku-bot> <lakmatiol> yeah, this seems ideal for ff

[20:24] <discord-raku-bot> <lakmatiol> ```perl

[20:24] <discord-raku-bot> <lakmatiol> for lines() {

[20:24] <discord-raku-bot> <lakmatiol>     if "" ff * {

[20:24] <discord-raku-bot> <lakmatiol>         say "after";

[20:24] <discord-raku-bot> <lakmatiol>     } else {

[20:24] <discord-raku-bot> <lakmatiol>         say "before";

[20:24] <discord-raku-bot> <lakmatiol>     }

[20:24] <discord-raku-bot> <lakmatiol> }

[20:24] <discord-raku-bot> <lakmatiol> ```

[22:29] *** jgaz left
[23:33] *** kjp left
[23:34] *** kjp joined
