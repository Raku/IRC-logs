[00:01] <saint-> Also, so does raku automatically add a new line at the end of a file when you slurp it?

[00:21] <discord-raku-bot> <stevied#8273> The .* will suck up everything.

[00:22] <discord-raku-bot> <stevied#8273> You need \N*

[00:26] <discord-raku-bot> <stevied#8273> More concise way: `token TOP {

[00:26] <discord-raku-bot> <stevied#8273>     <line>+ %% \v

[00:26] <discord-raku-bot> <stevied#8273> }`

[00:33] <saint-> Gotcha, yeah I got it to work with \N

[00:34] <saint-> Is \N just a perl regex thing?

[00:35] <saint-> I'm guessing \V or \v is just as good just a bit safer?

[00:36] <saint-> Looks like it, I guess I never really knew pcre, just the standard one-ish

[00:39] <saint-> Is there a purpose to the ^ and $ anchors in TOP?

[00:44] *** zacts joined
[00:50] <saint-> Is there a way to say not a token in the grammar?

[01:00] <saint-> For example is there any way to get this to work?  I want to be able to have a character to be any character except for a double line-break 

[01:00] <saint-> https://www.toptal.com/developers/hastebin/ejivimofib.pl

[01:00] <saint-> The idea is to like make a paragraph as a single token

[01:00] <saint-> I'm not sure how to get that to work

[01:01] *** zacts left
[01:28] <discord-raku-bot> <klebs#2209> in this error: `===SORRY!===Object of type X in QAST::WVal, but not in SC` what does SC stand for?

[01:34] <discord-raku-bot> <klebs#2209> I have worked around this issue by splitting the whole text on \n\n and processing each chunk separately

[01:36] <saint-> klebs, yeah I figured I could do that, but was just curious as well how to do it in pure raku

[01:36] <saint-> Or rather pure raku grammar

[01:48] <saint-> Think I figured it out if anyone is interested https://www.toptal.com/developers/hastebin/eqexemaguh.xml

[01:59] <discord-raku-bot> <klebs#2209> i have run into problems doing this sort of thing when you want to complexify what you parse as a "block"

[01:59] <saint-> I've made it a bit more complex and so far so good

[02:00] <discord-raku-bot> <klebs#2209> üëç

[02:02] <saint-> Will let you know if it starts to break haha

[02:07] <discord-raku-bot> <klebs#2209> what made it break for me was when i started introducing grammar `rules `which dont technically care about whitespace.  i know you can set the ws token to \h*, but sometimes that isn't what the problem needs either.

[02:07] <discord-raku-bot> <klebs#2209> there might have been some other details as well to consider... i forget

[02:07] <discord-raku-bot> <klebs#2209> i was basically attempting to mix preprocessing logic and grammar rules

[02:07] <saint-> Interesting

[02:07] <discord-raku-bot> <klebs#2209> while that works to a certain extent, sometimes the bugs when they show up are mega subtle

[02:08] <discord-raku-bot> <klebs#2209> like, in which cases does something in a block parse as a rule and which cases does it trip your section snipping logic

[02:09] <discord-raku-bot> <klebs#2209> as things get more complex, sometimes your snipping logic might trip in odd circumstances, then you try to change your snipping logic, and something you had working before might break

[02:10] <discord-raku-bot> <klebs#2209> doesnt happen on small complexity grammars as much, but if you start trying to add more detail to your block parser, you might hit situations like that

[02:11] <discord-raku-bot> <klebs#2209> hopefully not -- most of the time it happened to me was when i was trying to parse python doc comments, and extract the relevant items from them (ie when the author describes parameters, function outputs, etc)

[02:11] <discord-raku-bot> <klebs#2209> what worked for me was to just preprocess everything up front and break it into smaller chunks, which could each be parsed against one of several smaller less complex grammars

[02:13] *** razetime joined
[02:28] <saint-> Based on this code https://www.toptal.com/developers/hastebin/ekebigojiq.xml do you know how I would print out all refBlock matches only?

[02:43] <discord-raku-bot> <klebs#2209> you can write an actions class for this purpose

[02:46] <discord-raku-bot> <klebs#2209> do you want the match or the text that matches?

[02:48] <discord-raku-bot> <klebs#2209> something like:  ```raku

[02:48] <discord-raku-bot> <klebs#2209> grammar Lit {

[02:48] <discord-raku-bot> <klebs#2209>     token TOP { <block>+ }

[02:48] <discord-raku-bot> <klebs#2209>     proto token block { * }

[02:48] <discord-raku-bot> <klebs#2209>     token block:sym<section> { <sectionBreak> }

[02:48] <discord-raku-bot> <klebs#2209>     token block:sym<ref>     { <refBlock>

[02:48] <discord-raku-bot> <klebs#2209>     token block:sym<plain>   { <plainBlock> }

[02:48] <discord-raku-bot> <klebs#2209>     token sectionBreak { \n\n }

[02:48] <discord-raku-bot> <klebs#2209>     token notSectionBreak { [<!sectionBreak> .] }

[02:48] <discord-raku-bot> <klebs#2209>     token char { <notSectionBreak> | <ref> }

[02:48] <discord-raku-bot> <klebs#2209>     token ref { \(\d+\) }

[02:48] <discord-raku-bot> <klebs#2209>     token refBlock { <ref> <char>+ } 

[02:48] <discord-raku-bot> <klebs#2209>     token plainBlock { <char>+ } 

[02:48] <discord-raku-bot> <klebs#2209> }

[02:57] <saint-> klebs either the match or the text that matches, the text ideally

[02:58] <saint-> Ah hmm

[02:59] <saint-> Thanks I'll save that and look at it more

[03:24] <discord-raku-bot> <klebs#2209> np

[03:26] *** Guest35 left
[04:35] *** saint- left
[04:41] *** saint- joined
[05:15] *** zacts joined
[05:26] *** razetime_ joined
[05:26] *** razetime_ left
[05:52] *** zacts left
[07:17] *** frost joined
[07:17] *** frost left
[07:32] *** frost joined
[10:10] *** zacts joined
[12:10] *** zacts left
[12:44] *** frost left
[12:56] <deadmarshal> I found something weird :|. I used a range inside lines method (i know i shouldn't), but it gave back some lines which didn't correspond to the numbers in the range. and it didn't throw any errors or something. is this normal? 

[12:57] <deadmarshal> like this for example: 'input.txt'.IO.lines(4..12);

[13:09] <MasterDuke> lines takes a limit, so it probably just numified the range (which would be the number of elements) and used that

[13:09] <MasterDuke> m: say +(4..12)

[13:09] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´9‚ê§¬ª

[13:11] <MasterDuke> you could argue that maybe it should use a range as indices (which would likely involve adding a new multi candidate for lines), feel free to open an issue in the rakudo repo about it

[13:37] <deadmarshal> ok thank you

[13:50] *** Guest35 joined
[14:10] *** razetime left
[14:36] <discord-raku-bot> <gfldex#8222> .lines retuns a Positional, so a subscript should work

[16:30] <lizmat> yeah, 'input.txt'.IO.lines[4..12]

[16:40] <deadmarshal> awesome ;)

[22:39] *** zacts joined
[23:12] *** zacts left
