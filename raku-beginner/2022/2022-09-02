[01:30] *** m_athias left
[01:31] *** m_athias joined
[01:43] *** frost joined
[01:45] *** razetime joined
[02:55] *** Util_ left
[05:30] *** Util joined
[08:06] *** lizmat_ left
[08:06] *** lizmat joined
[08:20] <discord-raku-bot> <elcaro> I was thinking about this earlier... here are some idle thoughts...

[08:20] <discord-raku-bot> <elcaro> Raku is a very dynamic language... almost to a fault. If you call a `Str` method on a lie, like `.chars` or `.uc`, the list is coerced to a `Str` and then the method is called. Similarly, if you call `.elems` or `.reverse` on a `Str`, it is coerced to a something iterable (probably a  `Seq`) and the method is called.

[08:20] <discord-raku-bot> <elcaro> Now, calling `"stringy"[0]` is calling a _listy_  method (`.AT-POS`) on the string... so it gets coerced to a list, just like the other examples. This is why method names are unique for different types, eg. `.flip` vs `.reverse`, or `.chars` vs `.elems`... rather than having a generic `.length` method.

[08:20] <discord-raku-bot> <elcaro> That may be a decent rationale, but it doesn't mean it not confusing for the beginner. In fact, calling `.contains` on a list was such a common beginner error...

[08:20] <discord-raku-bot> <elcaro> ```

[08:20] <discord-raku-bot> <elcaro> > $*PERL.compiler

[08:20] <discord-raku-bot> <elcaro> rakudo (2018.04.1)

[08:20] <discord-raku-bot> <elcaro> > (< one two three >).contains('two')

[08:20] <discord-raku-bot> <elcaro> True

[08:20] <discord-raku-bot> <elcaro> > (< one two three >).contains('e t')

[08:20] <discord-raku-bot> <elcaro> True

[08:20] <discord-raku-bot> <elcaro> ```

[08:20] <discord-raku-bot> <elcaro> A warning was eventually added

[08:20] <discord-raku-bot> <elcaro> ```

[08:20] <discord-raku-bot> <elcaro> rakudo (2022.07)

[08:20] <discord-raku-bot> <elcaro> [1] > (< one two three >).contains('two')

[08:20] <discord-raku-bot> <elcaro> Calling '.contains' on a List, did you mean 'needle (elem) list

[08:20] <discord-raku-bot> <elcaro> ```

[08:21] <discord-raku-bot> <elcaro> I was thinking about this earlier... here are some idle thoughts...

[08:21] <discord-raku-bot> <elcaro> Raku is a very dynamic language... almost to a fault. If you call a `Str` method on something `Iterable` (eg. a `Seq`), like `.chars` or `.uc`, and the  `Seq` is coerced to a `Str` and then the method is called. Similarly, if you call `.elems` or `.reverse` on a `Str`, it is coerced to a something iterable (probably a  `Seq`) and the method is called.

[08:21] <discord-raku-bot> <elcaro> Now, calling `"stringy"[0]` is calling a _listy_  method (`.AT-POS`) on the string... so it gets coerced to a list, just like the other examples. This is why method names are unique for different types, eg. `.flip` vs `.reverse`, or `.chars` vs `.elems`... rather than having a generic `.length` method.

[08:21] <discord-raku-bot> <elcaro> That may be a decent rationale, but it doesn't mean it not confusing for the beginner. In fact, calling `.contains` on a list was such a common beginner error...

[08:21] <discord-raku-bot> <elcaro> ```

[08:21] <discord-raku-bot> <elcaro> > $*PERL.compiler

[08:21] <discord-raku-bot> <elcaro> rakudo (2018.04.1)

[08:21] <discord-raku-bot> <elcaro> > (< one two three >).contains('two')

[08:21] <discord-raku-bot> <elcaro> True

[08:21] <discord-raku-bot> <elcaro> > (< one two three >).contains('e t')

[08:21] <discord-raku-bot> <elcaro> True

[08:21] <discord-raku-bot> <elcaro> ```

[08:21] <discord-raku-bot> <elcaro> A warning was eventually added

[08:21] <discord-raku-bot> <elcaro> ```

[08:21] <discord-raku-bot> <elcaro> rakudo (2022.07)

[08:21] <discord-raku-bot> <elcaro> [1] > (< one two three >).contains('two')

[08:21] <discord-raku-bot> <elcaro> Calling '.contains' on a List, did you mean 'needle (elem) list

[08:21] <discord-raku-bot> <elcaro> ```

[08:24] <discord-raku-bot> <elcaro> I was thinking about this earlier... here are some idle thoughts...

[08:24] <discord-raku-bot> <elcaro> Raku is a very dynamic language... almost to a fault. If you call a `Str` method on something `Iterable` (eg. a `Seq`), like `.chars` or `.uc`, the  `Seq` is coerced to a `Str` and then the method is called. Similarly, if you call `.elems` or `.reverse` on a `Str`, it is coerced to a something iterable (probably a  `Seq`) and the method is called.

[08:24] <discord-raku-bot> <elcaro> Now... Calling `"stringy"[0]` is calling a _listy_  method (`.AT-POS`) on the string... so it gets coerced to a list, just like the other examples! This is why method names are unique for different types, eg. `.flip` vs `.reverse`, or `.chars` vs `.elems`... rather than having a generic `.length` method. It facilitates coercing things automatically. This is nice _sometimes_.

[08:24] <discord-raku-bot> <elcaro> That may be a decent rationale, but it doesn't mean it not confusing for the beginner. In fact, calling `.contains` on a list was such a common beginner error...

[08:24] <discord-raku-bot> <elcaro> ```

[08:24] <discord-raku-bot> <elcaro> > $*PERL.compiler

[08:24] <discord-raku-bot> <elcaro> rakudo (2018.04.1)

[08:24] <discord-raku-bot> <elcaro> > (< one two three >).contains('two')

[08:24] <discord-raku-bot> <elcaro> True

[08:24] <discord-raku-bot> <elcaro> > (< one two three >).contains('e t')

[08:24] <discord-raku-bot> <elcaro> True

[08:24] <discord-raku-bot> <elcaro> ```

[08:24] <discord-raku-bot> <elcaro> A warning was eventually added

[08:24] <discord-raku-bot> <elcaro> ```

[08:24] <discord-raku-bot> <elcaro> rakudo (2022.07)

[08:24] <discord-raku-bot> <elcaro> [1] > (< one two three >).contains('two')

[08:24] <discord-raku-bot> <elcaro> Calling '.contains' on a List, did you mean 'needle (elem) list

[08:24] <discord-raku-bot> <elcaro> ```

[08:24] <discord-raku-bot> <elcaro>  It's not unreasonable to suggest that calling `Str.AT-POS` should perhaps show a similar warning that suggest calling `.substr`

[08:24] <discord-raku-bot> <elcaro> Thank you for coming to my TED Talk

[08:25] <discord-raku-bot> <elcaro> I was thinking about this earlier... here are some idle thoughts...

[08:25] <discord-raku-bot> <elcaro> Raku is a very dynamic language... almost to a fault. If you call a `Str` method on something `Iterable` (eg. a `Seq`), like `.chars` or `.uc`, the  `Seq` is coerced to a `Str` and then the method is called. Similarly, if you call `.elems` or `.reverse` on a `Str`, it is coerced to a something iterable (probably a  `Seq`) and the method is called.

[08:25] <discord-raku-bot> <elcaro> Now... Calling `"stringy"[0]` is calling a _listy_  method (`.AT-POS`) on the string... so it gets coerced to a list, just like the other examples! This is why method names are unique for different types, eg. `.flip` vs `.reverse`, or `.chars` vs `.elems`... rather than having a generic `.length` method. It facilitates coercing things automatically. This is nice _sometimes_.

[08:25] <discord-raku-bot> <elcaro> That may be a decent rationale, but it doesn't mean it not confusing for the beginner. In fact, calling `.contains` on a list was such a common beginner error...

[08:25] <discord-raku-bot> <elcaro> ```

[08:25] <discord-raku-bot> <elcaro> rakudo (2018.04.1)

[08:25] <discord-raku-bot> <elcaro> > (< one two three >).contains('two')

[08:25] <discord-raku-bot> <elcaro> True

[08:25] <discord-raku-bot> <elcaro> > (< one two three >).contains('e t')

[08:26] <discord-raku-bot> <elcaro> True

[08:26] <discord-raku-bot> <elcaro> ```

[08:26] <discord-raku-bot> <elcaro> A warning was eventually added

[08:26] <discord-raku-bot> <elcaro> ```

[08:26] <discord-raku-bot> <elcaro> rakudo (2022.07)

[08:26] <discord-raku-bot> <elcaro> [1] > (< one two three >).contains('two')

[08:26] <discord-raku-bot> <elcaro> Calling '.contains' on a List, did you mean 'needle (elem) list

[08:26] <discord-raku-bot> <elcaro> ```

[08:26] <discord-raku-bot> <elcaro>  It's not unreasonable to suggest that calling `Str.AT-POS` should perhaps show a similar warning that suggest calling `.substr`

[08:28] *** discord-raku-bot left
[08:28] *** discord-raku-bot joined
[08:51] <discord-raku-bot> <Nemokosch> what is this?

[08:51] <discord-raku-bot> <yabobay> i tried to do the thing that the error said

[08:51] <discord-raku-bot> <yabobay> did you mean "needle (elem) list"

[08:53] <discord-raku-bot> <Nemokosch> what needle? never heard of it

[08:53] <discord-raku-bot> <yabobay> it says it here

[08:55] <discord-raku-bot> <Nemokosch> oh the message

[08:55] <discord-raku-bot> <Nemokosch> aaah

[08:56] <discord-raku-bot> <Nemokosch> no no that's an operator

[08:56] <discord-raku-bot> <Nemokosch> needle and list are variable names in that example

[08:56] <discord-raku-bot> <Nemokosch> confusingly enough tbh

[08:56] <discord-raku-bot> <Nemokosch> the (elem) operator

[08:57] <discord-raku-bot> <Nemokosch> ∈in other words

[08:57] <discord-raku-bot> <elcaro> yeah, as in `$needle (elem) @haystack`

[08:57] <discord-raku-bot> <elcaro> or `$needle ∈ @haystack`

[08:57] <discord-raku-bot> <elcaro> oh, Nemo beat me to it, but yes.

[08:57] <lizmat> PR for making that error message less confusing welcome  :)

[08:59] <discord-raku-bot> <yabobay> calling it "needle" makes it sound like a function

[08:59] <discord-raku-bot> <Nemokosch> well, it does

[08:59] <discord-raku-bot> <yabobay> or at least they could put the sigils in the error message

[08:59] <discord-raku-bot> <yabobay> so you just intuitively get it

[09:01] <discord-raku-bot> <elcaro> yeah, it assumes familiarity with the English idiomatic expression "needle in a haystack"... Pretty sure something in perldoc (maybe `index`) used to say something like `index(haystack, needle)`

[09:01] <discord-raku-bot> <elcaro> https://www.youtube.com/watch?v=37BBmRnJnwY

[09:01] <discord-raku-bot> <elcaro> It's a simple PR to fix, if either of you are interested, <@297037173541175296>  or <@989550365533937664>

[09:01] <discord-raku-bot> <yabobay> well i dunno how to do any of that

[09:01] <discord-raku-bot> <yabobay> and i don't know what the "right" error message should be

[09:01] <discord-raku-bot> <yabobay> so im not doing it

[09:03] <discord-raku-bot> <elcaro> I can submit it... but you were the one confused by it... so could you suggest something that you would have found less confusing. 

[09:03] <discord-raku-bot> <elcaro> What about just putting sigiles on the words, ie `did you mean '$needle (elem) @list`

[09:03] <discord-raku-bot> <elcaro> I can submit it... but you were the one confused by it... so could you suggest something that you would have found less confusing. 

[09:03] <discord-raku-bot> <elcaro> What about just putting sigiles on the words, ie `did you mean '$needle (elem) @list`?

[09:05] <discord-raku-bot> <Nemokosch> if the input was a List, that should be fine imo

[09:05] <discord-raku-bot> <yabobay> well

[09:05] <discord-raku-bot> <yabobay> i don't think $needle and @list is a good combination of names

[09:05] <discord-raku-bot> <yabobay> it should be either $needle and @haystack, or $item and @list

[09:05] <discord-raku-bot> <yabobay> both of those ar econsistent

[09:05] <discord-raku-bot> <yabobay> well

[09:05] <discord-raku-bot> <yabobay> i don't think $needle and @list is a good combination of names

[09:05] <discord-raku-bot> <yabobay> it should be either $needle and @haystack, or $item and @list

[09:05] <discord-raku-bot> <yabobay> both of those are consistent

[09:09] <discord-raku-bot> <elcaro> yeah, I think the whole 'needle in a haystack' thing associates better with searching a string... a list is discrete elements , not so much a haystack... so `$item` and `@list` is probably better, and less Anglocentric.

[09:11] <discord-raku-bot> <yabobay> well the error message is in english anyway

[09:11] <discord-raku-bot> <yabobay> and so is the rest of raku

[09:15] <discord-raku-bot> <elcaro> I'm aware. I speak the same 2 languages as John McClane... English and bad English. Also, `needle` is used extensively throughout the codebase... but errors are for the user and should be more broadly understandable.

[09:17] <discord-raku-bot> <elcaro> You sure you don't wanna submit a PR. You'll have your name in ~~lights~~ the contributors list!

[09:17] <discord-raku-bot> <elcaro> https://github.com/rakudo/rakudo/blob/51c00fddd3c838faddf2eb9fccfe8a4fdbf98d7a/src/core.c/Cool.pm6#L209

[09:17] <discord-raku-bot> <elcaro> If, not I will submit one

[09:19] <discord-raku-bot> <Nemokosch> I do appreciate the effort to make Raku "as little anglocentric" (does this even make sense?) as possible

[09:19] <discord-raku-bot> <yabobay> looking at code is intimidating

[09:21] <discord-raku-bot> <Nemokosch> I think it's rather exciting

[09:22] <discord-raku-bot> <yabobay> is it line 209?

[09:23] <discord-raku-bot> <yabobay> screw it, i'm gonna do it

[09:24] <lizmat> ++yabobay

[09:24] <discord-raku-bot> <elcaro> Sweet... I could do it, but I'd rather empower you.

[09:27] <discord-raku-bot> <yabobay> single-quotes don't interpolate right?

[09:27] <discord-raku-bot> <yabobay> single-quotes don't interpolate, right?

[09:34] <lizmat> indeed, they do not

[09:52] <discord-raku-bot> <yabobay> help, i don't know how to open source

[09:52] <discord-raku-bot> <yabobay> do i just pr this?

[09:53] *** jaguart joined
[09:53] <discord-raku-bot> <Nemokosch> the one that contains the fix, I suppose

[09:53] <discord-raku-bot> <Nemokosch> to the original rakudo repository

[09:54] <discord-raku-bot> <yabobay> and what happens when someone accepts that request? does the rakudo repo now have a new branch?

[09:54] <discord-raku-bot> <Nemokosch> no, your branch will go to an existing  remote branch

[09:55] <discord-raku-bot> <Nemokosch> like the master branch of arakudo/rakudo

[09:55] <discord-raku-bot> <Nemokosch> like the master branch of rakudo/rakudo

[09:55] <discord-raku-bot> <yabobay> ohhh i see

[09:58] <discord-raku-bot> <yabobay> so like... should i PR it now?

[09:59] <discord-raku-bot> <yabobay> i made the edit

[09:59] <discord-raku-bot> <Nemokosch> The thing is, I don't know the workflow for rakudo

[09:59] <discord-raku-bot> <Nemokosch> but I suppose you should open a pull request from the branch with your modification to the master of the original rakudo repo

[10:01] <discord-raku-bot> <yabobay> idk, it's spooky

[10:01] <discord-raku-bot> <Nemokosch> 😂

[10:01] <discord-raku-bot> <Nemokosch> either way, you can't mess up anything

[10:01] <discord-raku-bot> <yabobay> you gotta admit it's pretty scary tho

[10:01] <discord-raku-bot> <Nemokosch> since it's just a "request"

[10:01] <discord-raku-bot> <Nemokosch> it might be overwhelming at first

[10:03] <discord-raku-bot> <yabobay> i clicked the big button

[10:06] <discord-raku-bot> <Nemokosch> 🥁

[10:14] <discord-raku-bot> <elcaro> I'm still confused by git. I fudge my way through... `git clone` or `git pull`, `git branch`, `git commit -am 'foo'`, and `git push`.

[10:14] <discord-raku-bot> <elcaro> If I run into any errors, I use the same trick as described in XKCD 1597

[10:14] <discord-raku-bot> <elcaro> https://xkcd.com/1597/

[10:15] <discord-raku-bot> <Nemokosch> I still keep finding new things about git that I don't use often enough to learn

[10:17] <discord-raku-bot> <Nemokosch> also I don't get the point of `merge` if there is the omnipotent `rebase`

[10:19] <discord-raku-bot> <Nemokosch> I didn't know about `git add --patch <filename>` for a long time

[10:19] <discord-raku-bot> <Nemokosch> allows you to select only a part of your changes in a file

[10:20] * lizmat also clicked a big button  :-)

[10:21] <lizmat> yabobay++

[10:21] <discord-raku-bot> <Nemokosch> the reason why Unison is debated - we have great portable tooling for source code stored in plain text

[10:21] <discord-raku-bot> <Nemokosch> not so much for hashed syntax trees...

[11:21] *** Kaiepi joined
[11:24] *** Kaipei left
[12:33] *** raiph joined
[12:33] *** raiph left
[12:54] *** frost left
[13:21] <discord-raku-bot> <masukomi> um... can someone explain what's going on with this  to me ? 

[13:21] <discord-raku-bot> <masukomi> ```

[13:21] <discord-raku-bot> <masukomi> my @exports = <&foo &bar>;

[13:21] <discord-raku-bot> <masukomi> @exports.^name # Array

[13:21] <discord-raku-bot> <masukomi> @exports[].^name # Array

[13:21] <discord-raku-bot> <masukomi> <@exports> #-> "<@exports>"

[13:22] <discord-raku-bot> <masukomi> <@exports[]> #-> "<&foo &bar>"

[13:22] <discord-raku-bot> <masukomi> ```

[13:22] <discord-raku-bot> <masukomi> that last line really confuses me.   Here's what's going through my head. 

[13:22] <discord-raku-bot> <masukomi> * the `<...>` seems to be a "make an array out of these literal strings with no interpretation " operation 

[13:22] <discord-raku-bot> <masukomi> * `@exports` is an array, that, unsurprisingly isn't interpreted when shoved into `<...>` 

[13:22] <discord-raku-bot> <masukomi> * `@exports[]` is also an array, which, being the same thing, I'd expect to be treated the same way. 

[13:22] <discord-raku-bot> <masukomi> * in addition to what seems to be the same type of object being treated in a different way, we have the compounding factor of `<...>` being a thing you use when you _don't_ want to interpret the contents. 

[13:22] <discord-raku-bot> <masukomi> Obviously, something's wrong in my thinking but what?

[13:22] <discord-raku-bot> <masukomi> um... can someone explain what's going on with this  to me ? 

[13:22] <discord-raku-bot> <masukomi> ```

[13:22] <discord-raku-bot> <masukomi> my @exports = <&foo &bar>;

[13:22] <discord-raku-bot> <masukomi> @exports.^name #-> Array

[13:22] <discord-raku-bot> <masukomi> @exports[].^name #-> Array

[13:22] <discord-raku-bot> <masukomi> <@exports> #-> "<@exports>"

[13:22] <discord-raku-bot> <masukomi> <@exports[]> #-> "<&foo &bar>"

[13:22] <discord-raku-bot> <masukomi> ```

[13:22] <discord-raku-bot> <masukomi> that last line really confuses me.   Here's what's going through my head. 

[13:22] <discord-raku-bot> <masukomi> * the `<...>` seems to be a "make an array out of these literal strings with no interpretation " operation 

[13:22] <discord-raku-bot> <masukomi> * `@exports` is an array, that, unsurprisingly isn't interpreted when shoved into `<...>` 

[13:22] <discord-raku-bot> <masukomi> * `@exports[]` is also an array, which, being the same thing, I'd expect to be treated the same way. 

[13:22] <discord-raku-bot> <masukomi> * in addition to what seems to be the same type of object being treated in a different way, we have the compounding factor of `<...>` being a thing you use when you _don't_ want to interpret the contents. 

[13:22] <discord-raku-bot> <masukomi> Obviously, something's wrong in my thinking but what?

[13:23] <discord-raku-bot> <masukomi> um... can someone explain what's going on with this  to me ? 

[13:23] <discord-raku-bot> <masukomi> ```

[13:23] <discord-raku-bot> <masukomi> my @exports = <&foo &bar>;

[13:23] <discord-raku-bot> <masukomi> @exports.^name   #-> Array

[13:23] <discord-raku-bot> <masukomi> @exports[].^name #-> Array

[13:23] <discord-raku-bot> <masukomi> <@exports>       #-> "<@exports>"

[13:23] <discord-raku-bot> <masukomi> <@exports[]>     #-> "<&foo &bar>"

[13:23] <discord-raku-bot> <masukomi> ```

[13:23] <discord-raku-bot> <masukomi> that last line really confuses me.   Here's what's going through my head. 

[13:23] <discord-raku-bot> <masukomi> * the `<...>` seems to be a "make an array out of these literal strings with no interpretation " operation 

[13:23] <discord-raku-bot> <masukomi> * `@exports` is an array, that, unsurprisingly isn't interpreted when shoved into `<...>` 

[13:23] <discord-raku-bot> <masukomi> * `@exports[]` is also an array, which, being the same thing, I'd expect to be treated the same way. 

[13:23] <discord-raku-bot> <masukomi> * in addition to what seems to be the same type of object being treated in a different way, we have the compounding factor of `<...>` being a thing you use when you _don't_ want to interpret the contents. 

[13:23] <discord-raku-bot> <masukomi> Obviously, something's wrong in my thinking but what?

[13:28] <discord-raku-bot> <masukomi> git merge is, as far as i can tell, just a convenience feature to make it easier for folks than thinking about rebasing. 

[13:28] <discord-raku-bot> <masukomi> see also `git checkout foo` creating a new local `foo` branch if you didn't have one, but you have 1 (and only one) remote that has a `foo` branch, and then switching to it. They did this, presumably because folks had trouble with `git checkout -b foo some_remote/foo` or `git branch foo some_remote/foo; git checkout foo` 

[13:28] <discord-raku-bot> <masukomi> there have been a lot of "convenience wrappers" around functionality since its inception.

[13:28] <discord-raku-bot> <masukomi> .

[13:28] <discord-raku-bot> <masukomi> .

[13:28] <discord-raku-bot> <masukomi> git merge is, as far as i can tell, just a convenience feature to make it easier for folks than thinking about rebasing. 

[13:28] <discord-raku-bot> <masukomi> see also `git checkout foo` creating a new local `foo` branch if you didn't have one, but you have 1 (and only one) remote that has a `foo` branch, and then switching to it. They did this, presumably because folks had trouble with `git checkout -b foo some_remote/foo` or `git branch foo some_remote/foo; git checkout foo` 

[13:28] <discord-raku-bot> <masukomi> there have been a lot of "convenience wrappers" around functionality since its inception.

[13:29] <discord-raku-bot> <masukomi> .

[13:29] <discord-raku-bot> <masukomi> .

[13:29] <discord-raku-bot> <masukomi> `git merge` is, as far as i can tell, just a convenience feature to make it easier for folks than thinking about rebasing. 

[13:29] <discord-raku-bot> <masukomi> see also `git checkout foo` creating a new local `foo` branch if you didn't have one, but you have 1 (and only one) remote that has a `foo` branch, and then switching to it. They did this, presumably because folks had trouble with `git checkout -b foo some_remote/foo` or `git branch foo some_remote/foo; git checkout foo` 

[13:29] <discord-raku-bot> <masukomi> there have been a lot of "convenience wrappers" around functionality since its inception.

[13:30] <discord-raku-bot> <masukomi> .

[13:30] <discord-raku-bot> <masukomi> .

[13:30] <discord-raku-bot> <masukomi> `git merge` is, as far as i can tell, just a convenience feature to make it easier for folks than thinking about rebasing. 

[13:30] <discord-raku-bot> <masukomi> see also `git checkout foo` creating a new local `foo` branch if you didn't have one, but you have 1 (and only one) remote that has a `foo` branch, and then switching to it. (it used to just error). They did this, presumably because folks had trouble with `git checkout -b foo some_remote/foo` or `git branch foo some_remote/foo; git checkout foo` 

[13:30] <discord-raku-bot> <masukomi> there have been a lot of "convenience wrappers" around functionality since its inception.

[13:50] *** Kaiepi joined
[14:11] *** Guest68 joined
[14:11] *** raiph joined
[14:13] <Guest68> Hi! I have posted a question on stackoverflow (https://stackoverflow.com/questions/73414989/qqx-no-longer-works-in-raku-2022-04) about qqx, shell and run failing inside a loop reading from STDIN with raku 2022.04. Earlier versions work just fine. A minimal example is attached to the post. Any thoughts?

[14:14] <raiph> Guest68 Hi, just saw your SO comment and now here. :)

[14:14] <Guest68> Hi raiph! :) Thank you very much for guiding me!

[14:15] <raiph> masukomi: I can engage about <@foo[]> if you're around.

[14:15] <raiph> lizmat: the IRC logs seem to be repeating stuff like crazy.

[14:16] <raiph> yabobay++

[14:17] <discord-raku-bot> <yabobay> hi what?

[14:17] <discord-raku-bot> <Nemokosch> Just stop using Mac aaaaaaa

[14:19] <discord-raku-bot> <Nemokosch> That's not just "wasting time", that's knowingly wasting work put into software for the sake of a company deliberately staying incompatible with everyone

[14:20] <discord-raku-bot> <Nemokosch> The more you guys repeat Mac, the louder I will protest

[14:22] <raiph> Guest68: I think the first thing to do is run a bot to identify the commit at which the behavior changed.

[14:22] <raiph> Does that make sense to you?

[14:23] <raiph> And then we can look at the commit to see what the dev said about it and look at the code.

[14:25] <raiph> bisectable: hello

[14:27] <raiph> Guest68: I've not been on IRC much the last few years.

[14:27] <raiph>  I think it's my first time on this channel.

[14:28] <raiph> I don't yet recall how to run the bisect bot, nor how to find out how to.

[14:29] <raiph> I will now try figure it out.

[14:29] <raiph> But we may have to wait for someone else to speak up.

[14:29] <raiph> Or go to some other channel.

[14:29] <raiph> I still think this was the right place to start.

[14:30] <raiph> Guest68: But if I figure out otherwise I'll let you know here or on SO.

[14:33] <raiph> help # <-- for bots or Rakoons (who I'm presuming are actually humans, but a chatty furry little animal will be cool too)

[14:49] <Guest68> Thank you for your time and effort, raiph!

[14:53] <raiph> bisectable6: help

[14:58] *** raiph left
[15:33] *** raiph joined
[15:34] <raiph> Guest68: Please connect to the #whateverable channel and meet me there.

[15:35] <raiph> Then we'll work out how to bisect and read where the behavior changed. :)

[16:28] *** tbrowder left
[16:28] *** tbrowder joined
[16:42] <Guest68> I'm terribly sorry but I've got to go now. And I won't be near a computer until Monday. If you want we can proceed together then.

[17:11] <lizmat> raiph: I don't think it's the logger, it's the discord bridge: discord allows editing of messages, and each edit appears as a new line on IRC

[17:18] <discord-raku-bot> <yabobay> the fact there's people still using IRC makes me happy, and whenever i very occasionally use IRC it makes me happy, but i have to wonder why people are still using IRC on a large scale like this

[17:19] <discord-raku-bot> <yabobay> instead of something like matrix. is it just because irc already has adoption?

[17:19] <discord-raku-bot> <yabobay> or does it have something that nothing else really can do?

[17:30] *** razetime left
[18:12] *** jgaz joined
[18:23] *** raiph left
[18:34] *** Guest68 left
[19:28] *** raiph joined
[19:29] *** jgaz left
[19:37] *** raiph left
[20:09] <discord-raku-bot> <yabobay> i don't remember if raku is where i heard this existing, but i remember seeing a code snippet that's something along the lines of `if $x == 1 or 0`

[20:09] <discord-raku-bot> <yabobay> is this a thing?

[20:09] <discord-raku-bot> <yabobay> which is equivalent to `if $x == 1 or $x == 0`

[20:09] <discord-raku-bot> <Nahita> it's not `or` but `|`

[20:11] <discord-raku-bot> <Nahita> `or` is the lower precedence version of `||`, i.e., logical or

[20:11] <discord-raku-bot> <Nahita> `|` is the any junction operator

[20:11] <discord-raku-bot> <yabobay> any junction operator?

[20:11] <discord-raku-bot> <Nahita> https://docs.raku.org/type/Junction

[20:11] <discord-raku-bot> <Nahita> superposition of values...

[20:11] <discord-raku-bot> <Nahita> in boolean context, `|`s collapse with the "any" semantic

[20:13] *** jaguart left
[20:33] *** jgaz joined
[21:19] *** jgaz left
[21:21] <discord-raku-bot> <yabobay> as a user do i have any reason for wanting to use jvm over moarvm (or vice versa)?

[21:26] <guifa> I'd say to use JVM mainly if you have a reason to tie into other Java VM resources.  Otherwise, there's not really any advantage

[22:18] *** Kaiepi left
[22:19] *** Kaiepi joined
[23:21] *** Kaiepi left
