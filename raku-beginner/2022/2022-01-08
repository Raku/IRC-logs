[00:03] <guifa> steveid: they function slightly differently.  raku and perl chomp both generally remove a newline, but there are subtle differences.  

[00:03] <guifa> perl::chomp removes all trailing instances of $/ (or $INPUT_RECORD_SEPARATOR), which is by default a newline (which newline, I'm not sure off the top of my head, tbh).  it returns the number of characters removed

[00:07] <guifa> raku::chomp removes, if present, a single instance of anything with a property of newline (LF, VT, FF, CR, CR+LF, NEL, LS, PS), and returns the string with it removed

[00:07] <guifa> if you're porting code, that difference may result in bugs

[01:36] <discord-raku-bot> <stevied#8273> ok, gotcha. makes sense.

[02:33] *** [Coke] left
[02:39] *** [Coke] joined
[02:55] *** [Coke]_ joined
[02:56] *** melezhik joined
[02:57] *** [Coke] left
[03:12] *** melezhik left
[04:18] *** destroycomputers left
[10:27] <discord-raku-bot> <RoM#5135> Thank you very much for the two hints, SmokeMachine and guifa. I will test the two modules.

[13:14] *** [Coke]_ is now known as [Coke]

[13:38] *** destroycomputers joined
[15:03] <discord-raku-bot> <stevied#8273> what do you call the asterisk in a signature like this: `multi odd-or-even(Int $i where * %% 2) { say "even" };`

[15:03] <discord-raku-bot> <stevied#8273> a "placeholder" maybe?

[15:08] <[Coke]> It's a "Whatever"

[15:11] <discord-raku-bot> <stevied#8273> seriuosly?

[15:11] <discord-raku-bot> <Anton Antonov#7232> @stevied#8273 How is this surprising?! 🙂

[15:11] <discord-raku-bot> <stevied#8273> guess so: https://docs.raku.org/type/Whatever

[15:13] <discord-raku-bot> <Anton Antonov#7232> A fair warning -- there are some other whatevers...

[15:14] <[Coke]> You can read it as "where whatever you get is divisible by 2"

[15:14] <[Coke]> but it's a Whatever/WhateverCode under the covers, yes.

[15:15] <discord-raku-bot> <stevied#8273> crazy stuff

[15:38] <discord-raku-bot> <gfldex#8222> m:```

[15:38] <discord-raku-bot> <gfldex#8222>     my \w = * %% 2;

[15:38] <discord-raku-bot> <gfldex#8222>     .say for w.&{ [.WHAT, .^mro, .signature] };

[15:38] <discord-raku-bot> <gfldex#8222> ```

[15:56] <discord-raku-bot> <shift-eleven#8115> heya, if I wanted to find the implementation of a certain method in raku (namely `succ`) which repo should I be browsing through

[16:02] <lizmat> rakudo/rakudo

[16:03] <discord-raku-bot> <shift-eleven#8115> gotcha thanks

[16:05] *** destroycomputers left
[16:05] <discord-raku-bot> <stevied#8273> can someone please shed some light on this weirdness on the left-hand side of the assignemnt: `$ = :($a, @b); `

[16:06] <discord-raku-bot> <stevied#8273> what is `$` doing there all alone?

[16:07] <lizmat> yeah, that *is* weirdness that I hoped TimToady would not go into

[16:08] <lizmat> it's the nameless state variable

[16:08] <lizmat> m: sub a() { say $++ }; a for ^5

[16:08] <camelia> rakudo-moar f77fda7d1: OUTPUT: «0␤1␤2␤3␤4␤»

[16:08] <discord-raku-bot> <stevied#8273> TimToady?

[16:09] <lizmat> Larry Wall's nick

[16:09] <lizmat> a pun on TIMTOWTDI

[16:09] <discord-raku-bot> <stevied#8273> so it's the same as $_ ?

[16:09] <lizmat> no

[16:09] <discord-raku-bot> <stevied#8273> gotcha

[16:09] <lizmat> $_ is *not* a state variable

[16:09] <lizmat> m: sub a() { state $a++ }; a for ^5

[16:09] <camelia> rakudo-moar f77fda7d1: ( no output )

[16:09] <lizmat> m: sub a() { say state $a++ }; a for ^5

[16:09] <camelia> rakudo-moar f77fda7d1: OUTPUT: «0␤1␤2␤3␤4␤»

[16:10] <lizmat> m: sub a() { say $_++ }; a for ^5

[16:10] <camelia> rakudo-moar f77fda7d1: OUTPUT: «0␤0␤0␤0␤0␤»

[16:10] <lizmat> https://docs.raku.org/syntax/state

[16:11] <discord-raku-bot> <stevied#8273> yeah, familiar with state variables, somewhat (don't use them much)

[16:13] <discord-raku-bot> <stevied#8273> I guess a better question then is why would assign anything to `$`?

[16:16] <MasterDuke> that might put the statement in non-sink context, so maybe to silence a warning

[16:17] <discord-raku-bot> <stevied#8273> "non-sink" context? I guess I better put this question off until I get more familiar with raku 🙂

[16:18] <MasterDuke> sink is kind of like void

[16:18] <MasterDuke> m: 1

[16:18] <camelia> rakudo-moar f77fda7d1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)␤»

[16:19] <MasterDuke> that `1` isn't being used, so it's in sink context (sort of, i wouldn't say i'm 100% versed on exactly what is/isn't sink and all it's properties)

[16:23] <lizmat> m: class A { method sink() { say "sunk" } }; A

[16:23] <camelia> rakudo-moar f77fda7d1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value A in sink context (line 1)␤»

[16:23] <lizmat> m: class A { method sink() { say "sunk" } }; A.new

[16:23] <camelia> rakudo-moar f77fda7d1: OUTPUT: «sunk␤»

[16:23] <lizmat> basically, any defined object that is in "void" context, has its "sink" method called on it

[16:24] <lizmat> which generally is a no-op

[16:25] <discord-raku-bot> <stevied#8273> I don't get a warning with just  `:($a, @b)` on a line by itself

[16:25] <lizmat> m: :($a,@b)

[16:25] <camelia> rakudo-moar f77fda7d1: ( no output )

[16:26] <lizmat> he, interesting

[16:26] <lizmat> m: dd :($a,@b)

[16:26] <camelia> rakudo-moar f77fda7d1: OUTPUT: «:($a, @b)␤»

[16:26] <lizmat> m: dd (:($a,@b)).^name

[16:26] <camelia> rakudo-moar f77fda7d1: OUTPUT: «"Signature"␤»

[16:26] <lizmat> I guess Signatures are exempt from thst

[16:26] <lizmat> *that

[16:28] <discord-raku-bot> <stevied#8273> maybe that assignment to `$` should be removed from docs to prevents newbs like me from getting distracted?

[16:28] <lizmat> yeah... where did you see that ?

[16:29] <discord-raku-bot> <stevied#8273> https://docs.raku.org/type/Signature#Slurpy_parameters

[16:31] <discord-raku-bot> <stevied#8273> seems like it would be more clear if the signature object was in the context of an ordinary subroutine or something

[16:38] <discord-raku-bot> <stevied#8273> docs also have this mystery: `sub one-arg (@)  { }`

[16:39] <discord-raku-bot> <stevied#8273> so the sub will only take an array. but it doesn't explain that anywhere I can see

[16:39] <discord-raku-bot> <stevied#8273> how do you access such an argument in the function?

[16:40] <MasterDuke> anonymous array variable. means the sub is required to be passed an array, but it doesn't do anything with it

[16:40] *** Flwyd joined
[16:40] <discord-raku-bot> <stevied#8273> what is the use case for something like that?

[16:40] <MasterDuke> by itself probably isn't very useful, but you might see things like that with multis (and usually other parameters that it does use)

[16:42] <discord-raku-bot> <stevied#8273> I could see it with multis if you use {*}

[16:42] <discord-raku-bot> <stevied#8273> I guess you would do that with a proto, though

[16:43] <MasterDuke> m: multi sub foo(Int $a, @) { say "i care about the scalar '$a'" }; multi sub foo($, @b) { say "i care about the array '@b'" }; foo(1, <a b c>); foo("a", <b c d>)

[16:43] <camelia> rakudo-moar f77fda7d1: OUTPUT: «i care about the scalar '1'␤i care about the array '@b'␤»

[16:43] <MasterDuke> m: multi sub foo(Int $a, @) { say "i care about the scalar '$a'" }; multi sub foo($, @b) { say "i care about the array '@b[]'" }; foo(1, <a b c>); foo("a", <b c d>)

[16:43] <camelia> rakudo-moar f77fda7d1: OUTPUT: «i care about the scalar '1'␤i care about the array 'b c d'␤»

[16:44] <MasterDuke> ^^^ contrived example, but that sort of thing

[16:44] <discord-raku-bot> <stevied#8273> ok

[16:44] <discord-raku-bot> <gfldex#8222> @stevied#8273 One can do crazy things with `sink`, see: https://gfldex.wordpress.com/2021/11/05/should-it-mutate-or-not-yes/

[16:46] <discord-raku-bot> <stevied#8273> I would just say then that that should be documented somewhere in https://docs.raku.org/type/Signature. I don't think it's mentioned, but I could be wrong

[16:50] <discord-raku-bot> <stevied#8273> @gfldex#8222 that's way above my ability to wrap my head around. jesus

[16:53] *** [Coke] left
[16:54] *** [Coke] joined
[17:04] *** codesections left
[17:04] *** codesections joined
[17:09] <discord-raku-bot> <stevied#8273> I'm getting the sense if you get good at Raku, every other language will just look like a toy. Is that accurate?

[17:12] *** destroycomputers joined
[17:52] <guifa> MasterDuke it can also be used in destructuring in a signature.  Imagine something like `sub foo( |c ($x, @, @, $z) { … }` where you want to pull out the first and fourth, and will eventually pass the capture through

[17:57] <discord-raku-bot> <gfldex#8222> @stevied#8273 I'm not so sure about that. There are plenty of reason why one would want to write code for a micro controller. Raku will not teach you about memory management or optimising down to individual machine instructions. At the other hand, we got really good OOP support and fairly good functional stuff.

[17:58] <discord-raku-bot> <stevied#8273> yeah, I was thinking more along the lines of comparing to higher level languages

[18:11] *** destroycomputers left
[18:13] *** Flwyd left
[18:14] *** Flwyd joined
[18:14] *** MasterDuke left
[18:24] *** destroycomputers joined
[19:03] *** discord-raku-bot left
[19:04] *** discord-raku-bot joined
[19:32] *** MasterDuke joined
