[00:53] <discord-raku-bot> <masukomi> re our discussion about prefixing imported methods, and how it looked like lizmat's "from" module could prolly be hacked to do it.  I looked at it but it was beyond my newb abilities, so i asked liz

[00:53] <discord-raku-bot> <masukomi> > I‚Äôm thinking something like

[00:53] <discord-raku-bot> <masukomi> > use from "Foo" prefix => ‚Äòf‚Äô

[00:53] <discord-raku-bot> <masukomi> > And then Foo::bar-method becomes callable as f-bar-method.

[00:53] <discord-raku-bot> <masukomi> > (+ current functionality of specifying methods to import)

[00:53] <discord-raku-bot> <masukomi> > Is that possible? 

[00:53] <discord-raku-bot> <masukomi> and she said

[00:53] <discord-raku-bot> <masukomi> > A named argument in a "use" statement, is currently interpreted by the system as an indicator for EXPORT::DEFAULT namespace.  So you would have to specify it as a positional Pair, so

[00:53] <discord-raku-bot> <masukomi> >  "prefix" => "f"

[00:53] <discord-raku-bot> <masukomi> > rather than

[00:53] <discord-raku-bot> <masukomi> >  prefix => "f"

[00:53] <discord-raku-bot> <masukomi> > But yeah, you could look at any semantics you'd want.

[00:53] <discord-raku-bot> <masukomi> so ... yeah. Maybe <@724421839924756480> would be interested in tackling that. I would, but I don't understand enough ... yet. üòâ

[01:12] <guifa_> masukomi: editing that would be pretty easy

[01:12] <guifa_> The from module is just a about a dozen lines of code

[01:15] <guifa_> https://github.com/lizmat/from/blob/97a7c043467eaae304a5f7633499f17b9373f10a/lib/from.rakumod#L12 <-- for instance, this just passes through a Map.  It would be fairly trivial to to modify it to prefix the keys

[01:18] <guifa_> Basically (untested) Map.new: ("use $distro; MY::<@exports[]>:p".EVAL).map({Pair.new: $prefix ~ .key, .value})

[01:20] <guifa_> The main question is how you'd want to pass in the prefix (perhaps `use prefix-from <Module::Name prefix-value- symbolA symbolB symbolC>`)

[01:44] <guifa_> Doing it that way just changes the EXPORT sub to `sub EXPORT($distro, $prefix, *@exports is copy) {¬†‚Ä¶¬†}`

[01:56] *** frost joined
[03:30] *** Kaiepi left
[03:31] *** Kaiepi joined
[05:05] *** Oshawott left
[07:02] <discord-raku-bot> <yabobay> can hashes have Int indices?

[07:54] *** razetime joined
[08:33] *** m_athias left
[08:35] *** m_athias joined
[08:43] *** discord-raku-bot left
[08:43] *** discord-raku-bot joined
[09:00] *** frost left
[09:03] *** frost joined
[09:33] <guifa_> yes, but you need to declare them slightly differently, otherwise upon assingmnent they'll be autocoerced into Str

[09:35] <guifa_> m: my Str %foo{Int}; %foo{5} = 'a'; say %foo.keys.head.WHAT

[09:35] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´(Int)‚ê§¬ª

[09:37] <guifa_> For scalared vars:

[09:37] <guifa_> m: my Hash[Str,Int] $foo .= new; $foo{5} = 'a'; say $foo.keys.head.WHAT;

[09:37] <camelia> rakudo-moar 71f5c50be: OUTPUT: ¬´(Int)‚ê§¬ª

[09:59] *** razetime left
[10:00] *** razetime joined
[11:03] <discord-raku-bot> <yabobay> i got confused before cause i was doing %foo<$_> which is completely the wrong thing

[11:03] <discord-raku-bot> <yabobay> i didn't read about the angle brackets yet so that was my fault

[11:11] <discord-raku-bot> <Nemokosch> `%foo<<$_>>` could work if `$_` is a string, I think

[11:11] <discord-raku-bot> <Nemokosch> but yeah, `%foo{$_}` is better

[11:17] <discord-raku-bot> <yabobay> what does %foo<<$_>> mean?

[11:19] <discord-raku-bot> <Nemokosch> << is word quoting with variable interpolation

[11:20] <discord-raku-bot> <Nemokosch> so it's kinda like %foo{"$_"} in this case

[12:03] <discord-raku-bot> <yabobay> can i have ranges that are descending?

[12:03] <discord-raku-bot> <yabobay> m: say $_ for 10 .. 0

[12:03] <discord-raku-bot> <yabobay> whyyy

[12:04] <discord-raku-bot> <Nemokosch> There are multiple ways

[12:05] <discord-raku-bot> <Nemokosch> the simplest would be to just use the sequence operator instead of the range operator

[12:05] <discord-raku-bot> <Nemokosch> m: .say for 10 ... 0

[12:05] <discord-raku-bot> <yabobay> what's the difference with that?

[12:05] <discord-raku-bot> <Nemokosch> a range is a different type to begin with

[12:05] <discord-raku-bot> <yabobay> a sequence is what?

[12:07] <discord-raku-bot> <Nemokosch> "An iterable, potentially lazy sequence of values" according to the docs

[12:07] <discord-raku-bot> <yabobay> huh

[12:07] <discord-raku-bot> <yabobay> isn't that what a range is

[12:07] <discord-raku-bot> <Nemokosch> absolutely not

[12:08] <discord-raku-bot> <yabobay> a range is supposed to superficially look like a sequence?

[12:08] <discord-raku-bot> <Nemokosch> "Interval of ordered values"

[12:08] <discord-raku-bot> <yabobay> ohhh

[12:08] <discord-raku-bot> <yabobay> so a sequence can be whatever

[12:09] <discord-raku-bot> <yabobay> but a range has to be ordered

[12:09] <discord-raku-bot> <Nemokosch> it has a step of "one"

[12:09] <discord-raku-bot> <Nemokosch> > Iterating a range (or calling the list method) uses the same semantics as the ++ prefix and postfix operators, i.e., it calls the succ method on the start point, and then the generated elements.

[12:11] <discord-raku-bot> <yabobay> i think i get it

[12:11] <discord-raku-bot> <yabobay> why not just use a sequence for the same things?

[12:11] <discord-raku-bot> <yabobay> why have ranges exist

[12:13] <discord-raku-bot> <Nemokosch> I suppose because 1) ranges have a common and well-defined purpose 2) they can be effectively checked for with smartmatch

[12:43] *** discord-raku-bot left
[12:43] *** discord-raku-bot joined
[13:24] <discord-raku-bot> <Kaiepi> sequences are pretty dynamic compared to a range. a range is able to smartmatch and behave as a full-blown `Positional` given its bounds alone

[13:26] <discord-raku-bot> <Kaiepi> what you write after `...` is not the end of the sequence, but a condition to terminate the sequence on. it doesn't know the end until the entire thing is computed

[13:26] <discord-raku-bot> <Kaiepi> m:```

[13:26] <discord-raku-bot> <Kaiepi> say 1...(10 but role { method ACCEPTS(Mu \x) { dd x; callsame } })

[13:26] <discord-raku-bot> <Kaiepi> ```

[13:27] <discord-raku-bot> <yabobay> so sequences cannot be lazy

[13:27] <discord-raku-bot> <Kaiepi> they can be

[13:28] <discord-raku-bot> <Kaiepi> is `&dd` stderr?

[13:29] <discord-raku-bot> <Kaiepi> m:```

[13:29] <discord-raku-bot> <Kaiepi> say 1...(10 but role { method ACCEPTS(Mu \x) { say x; callsame } }) # should have correct order

[13:29] <discord-raku-bot> <Kaiepi> ```

[13:30] <discord-raku-bot> <Kaiepi> `&say` wants the entire list, so it's reified eagerly here

[13:31] *** frost left
[13:32] <discord-raku-bot> <yabobay> i dont even know what any of that is

[13:32] <discord-raku-bot> <yabobay> the fact there;s a but keyword is kinda funny

[13:36] <discord-raku-bot> <Kaiepi> `ACCEPTS` is the method backing a smartmatch. starting a sequence with a number will try to increment until that terminating smartmatch succeeds. i'm trying to show how it goes about calculating its elements

[13:38] <discord-raku-bot> <Kaiepi> `but` is a runtime mixin. `ACCEPTS` is being overridden on `10`

[13:38] <discord-raku-bot> <Kaiepi> `but` makes a runtime mixin. `ACCEPTS` is being overridden on `10`

[14:24] *** jgaz joined
[15:04] *** razetime left
[20:56] *** jgaz left
[20:59] <discord-raku-bot> <Nemokosch> Can I do something like... a parameter that can be a Map or a List, in case of a List, it should be turned into a Map using .pairs semantics?

[21:01] <discord-raku-bot> <Nemokosch> I mean eventually I can but with some type annotation magic

[22:03] <discord-raku-bot> <gfldex> <@297037173541175296> ^^^

[22:03] <discord-raku-bot> <gfldex> m:```

[22:03] <discord-raku-bot> <gfldex>     multi foo(Map $wanna) {

[22:03] <discord-raku-bot> <gfldex>         say ‚Äûgot $wanna‚Äú;

[22:03] <discord-raku-bot> <gfldex>     }

[22:03] <discord-raku-bot> <gfldex>     multi foo(*@okish) {

[22:03] <discord-raku-bot> <gfldex>         foo @okish.pairs.Map;

[22:03] <discord-raku-bot> <gfldex>     }

[22:03] <discord-raku-bot> <gfldex>     foo 1,2,3,4;

[22:03] <discord-raku-bot> <gfldex> ```

[22:22] <discord-raku-bot> <Nemokosch> the annoying thing is that it's really one argument out of 4

[23:50] *** discord-raku-bot left
[23:50] *** discord-raku-bot joined
