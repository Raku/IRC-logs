[00:24] *** frost joined
[00:58] *** frost left
[04:58] *** frost joined
[05:49] *** frost left
[13:05] *** A26F64 joined
[17:16] *** A26F64 left
[17:33] <discord-raku-bot> <leobm#8022> can i simulate something like typeclasses in raku? 

[17:33] <discord-raku-bot> <leobm#8022> So the type should have a role (e.g. Countable) and then

[17:33] <discord-raku-bot> <leobm#8022> use a very specific implementation for it based on this role and the type 

[17:33] <discord-raku-bot> <leobm#8022> ```

[17:33] <discord-raku-bot> <leobm#8022> role Countable is export {

[17:33] <discord-raku-bot> <leobm#8022>     proto sub count(--> Int) is pure {*}

[17:33] <discord-raku-bot> <leobm#8022> }

[17:33] <discord-raku-bot> <leobm#8022> my $s = "dsad" but Countable;

[17:33] <discord-raku-bot> <leobm#8022> say $s.count(); ## should call an implementation for Str

[17:33] <discord-raku-bot> <leobm#8022> my @a = <a b c> but Countable;

[17:33] <discord-raku-bot> <leobm#8022> say @a.count() ## should call an implementation for Array;

[17:33] <discord-raku-bot> <leobm#8022> ```

[17:34] <lizmat> m: role Foo { method bar { ... } }; class Baz does Foo { }

[17:34] <camelia> rakudo-moar 4d61a582e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Method 'bar' must be implemented by Baz because it is required by roles: Foo.␤at <tmp>:1␤»

[17:35] <discord-raku-bot> <leobm#8022> maybe something similar to implicit-conversions in scala? But with raku roles....

[17:39] <discord-raku-bot> <leobm#8022> I came across this question because I was looking at the following module: https://modules.raku.org/dist/Colorizable:cpan:UZLUISF/lib/Colorizable.rakumod

[17:39] <discord-raku-bot> <leobm#8022> But there is the implementation in the role itself (for Str)

[17:39] <discord-raku-bot> <leobm#8022> But what if I want to make e.g. another type Colorizable?

[17:40] <discord-raku-bot> <leobm#8022> i have seen that i can give parameters to the role itself.

[17:40] <discord-raku-bot> <leobm#8022> e.g.

[17:40] <discord-raku-bot> <leobm#8022> ```

[17:40] <discord-raku-bot> <leobm#8022> role Countable[::T] is export {

[17:40] <discord-raku-bot> <leobm#8022>     proto sub count(--> Int) is pure {*}

[17:40] <discord-raku-bot> <leobm#8022> }

[17:40] <discord-raku-bot> <leobm#8022> ```

[17:40] <discord-raku-bot> <leobm#8022> Can I do something with this?

[17:41] <lizmat> the ::T is a very specific one

[17:41] <lizmat> it's more general

[17:41] <lizmat> m: role max-value[$max = Inf] { ... }

[17:41] <camelia> rakudo-moar 4d61a582e: ( no output )

[17:42] <lizmat> so you can have default values for the parameters you''re passing

[17:42] <lizmat> the ::T case is really if you want to specify types to which you want to constrain variables later

[20:11] *** MasterDuke joined
