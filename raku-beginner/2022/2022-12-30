[00:00] <CodeTortoise> That would be funny. 

[00:01] <CodeTortoise> I mean, the point of higher-level languages are to accomplish things that historically took a lot of low-level mastery. Hardware design in near natural language would be something else.

[00:05] <CodeTortoise> Are people doing signal processing, or art programming in Raku? A LONNG time ago I wanted to get into Processing, but was put off by Javascript and Python.

[00:06] <CodeTortoise> This seems more in the realm of what people have done with Racket, but it would be cool to do visual synthesis kind of stuff. Maybe that will be my white whale project, the thing I can offer once I get competent.

[00:07] <discord-raku-bot> <Nemokosch> Sounds nice

[00:11] <CodeTortoise> I was reading about the history of Perl, and some of the interviews at Slashdot, and one of the goals has always been to escape the niche as a text-processing language. The fact that Raku has an awesome math library that gives correct, expected results means it can be used for a lot more serious computaton, I think.

[00:11] <CodeTortoise> Eh, too muh waxing about the future. Gots to read read read and code.

[00:14] <jaguart> CodeTortoise: but does it though? Nemokosch asked me if this is what I expected - it wasn't

[00:14] <jaguart> m: say -1.succ

[00:14] <camelia> rakudo-moar ddecbe687: OUTPUT: «-2␤»

[00:15] <jaguart> So while .succ is not defined for negatives, I have always viewed it as move-one-right on the number-line - expected -1.succ to return 0 :o

[00:15] <jaguart> but Raku sees this as negation-operation on 1.succ => -2

[00:18] <CodeTortoise> Oh, I suppose I have not explored the math system fully. I was just happy that it came back with exact results. 

[00:19] <jaguart> Oh yeah - there is lots of niceness too :)

[00:19] <CodeTortoise> Haha. I just tried that. Yeah, come on, get out with the LEFT-->RIGHT tyranny. 

[00:20] <CodeTortoise> Negative numbers need love too.

[00:20] <CodeTortoise> That too can succeed.

[00:20] <jaguart> Its all about prioritising your operators - and thinking '-' is an op not an intrinsic

[00:21] <discord-raku-bot> <Nemokosch> Raku parsing be like: if something doesn't work, add spaces

[00:21] <discord-raku-bot> <Nemokosch> works 10 out of 10 haha

[00:21] <discord-raku-bot> <Nemokosch> m: -1 .succ.say

[00:21] <discord-raku-bot> <Nemokosch> dang, zero

[00:21] <CodeTortoise> I got 2??

[00:22] <discord-raku-bot> <Nemokosch> did you forget a '-'?

[00:22] <CodeTortoise> Nope.

[00:22] *** NemokoschKiwi joined
[00:23] <CodeTortoise> (-1).succ = 0

[00:23] <NemokoschKiwi> m: -1 .succ.say

[00:23] <camelia> rakudo-moar ddecbe687: OUTPUT: «0␤»

[00:23] <NemokoschKiwi> he? :D

[00:24] <NemokoschKiwi> again, I don't have any "insider info" but my conspiration is: the parsing engine is slow -> let's design a grammar that can be parsed with no backtracking at all -> ambiguities need resolution

[00:24] <CodeTortoise> -2.succ.say == 3

[00:24] <NemokoschKiwi> you mean, -3

[00:24] <NemokoschKiwi> but that's without the space

[00:25] <NemokoschKiwi> m: -3 .succ.say

[00:25] <camelia> rakudo-moar ddecbe687: OUTPUT: «-2␤»

[00:25] <NemokoschKiwi> versus

[00:25] <NemokoschKiwi> m: -3.succ.say

[00:25] <camelia> rakudo-moar ddecbe687: OUTPUT: «WARNINGS for <tmp>:␤4␤Useless use of "-" in expression "-3.succ.say" in sink context (line 1)␤»

[00:25] <NemokoschKiwi> oh right...

[00:25] <CodeTortoise> Oh, I don't know. It is just what the REPL is spitting out.

[00:26] <jaguart> just be careful when you write Apollo::Countdown::Controller.backwards(10).resume - you might end up getting further and further from launch

[00:26] <NemokoschKiwi> say is still a method call, right? it still has higher precedence than unary minus

[00:26] <NemokoschKiwi> m: say -3.succ

[00:26] <camelia> rakudo-moar ddecbe687: OUTPUT: «-4␤»

[00:26] <NemokoschKiwi> m: say -3 .succ

[00:26] <camelia> rakudo-moar ddecbe687: OUTPUT: «-2␤»

[00:26] <NemokoschKiwi> there

[00:27] <CodeTortoise> Same weirdness with .put. It works as expected with parentheses.

[00:28] <CodeTortoise> It must be ignoring the "-"?

[00:28] <NemokoschKiwi> maybe someone could tell why the lack of negative literals is a good thing; I'm not one of them. I don't like this grammar choice.

[00:28] <CodeTortoise> Might just be my computer. I don'tt know.

[00:29] <jaguart> use m: to share your one-liners 

[00:29] <NemokoschKiwi> CodeTortoise: it's a bit tricky. let's break "-2.succ.say" down

[00:29] <NemokoschKiwi> I'm gonna just use parens

[00:30] <NemokoschKiwi> m: -((2.succ).say)

[00:30] <camelia> rakudo-moar ddecbe687: OUTPUT: «WARNINGS for <tmp>:␤3␤Useless use of "-" in expression "-((2.succ).say)" in sink context (line 1)␤»

[00:30] <jaguart> yeah - parens are always telling you what to do

[00:30] <jaguart> they give you that sink feeling

[00:30] <NemokoschKiwi> the dot has higher precedence than the minus. Both for 2.succ and succ.say

[00:30] <NemokoschKiwi> so you get to see 3 coming from 2.succ.say

[00:31] <NemokoschKiwi> now, say also has a return value: True

[00:31] <NemokoschKiwi> so we end up with -True (which is -1) and the compiler warns us that we aren't using this value for anything

[00:31] <CodeTortoise> m: -2.succ.say.print

[00:31] <camelia> rakudo-moar ddecbe687: OUTPUT: «WARNINGS for <tmp>:␤3␤TrueUseless use of "-" in expression "-2.succ.say.print" in sink context (line 1)␤»

[00:31] <NemokoschKiwi> now you did print True as well :)

[00:32] <NemokoschKiwi> but the negation is still the last operation

[00:32] <CodeTortoise> Yes, it has Additive precedence, which is the same as last I guess.

[00:32] <NemokoschKiwi> let me show you another paren-less trick: an operator with really low precedence

[00:33] <NemokoschKiwi> an operator that sets the topic based on the LHS value

[00:33] <NemokoschKiwi> m: -2.succ.say.print andthen .say

[00:33] <camelia> rakudo-moar ddecbe687: OUTPUT: «3␤True-1␤»

[00:33] <NemokoschKiwi> now we got everything, right?

[00:33] <NemokoschKiwi> 2.succ.say gave as 3

[00:33] <NemokoschKiwi> ,print on this gave us True

[00:33] <NemokoschKiwi> the negation turned it into -1

[00:34] <NemokoschKiwi> finally, andthen set this as the topic and we said the topic value: -1

[00:34] <jaguart> m: say -True

[00:34] <camelia> rakudo-moar ddecbe687: OUTPUT: «-1␤»

[00:34] <jaguart> m: say -True.so

[00:34] <camelia> rakudo-moar ddecbe687: OUTPUT: «-1␤»

[00:34] <jaguart> m: say -True .so

[00:34] <camelia> rakudo-moar ddecbe687: OUTPUT: «True␤»

[00:35] <jaguart> I see a lot of debugging in my future

[00:35] <CodeTortoise> Wow, I just learned about andthen. Nice way to chain methods.

[00:35] <jaguart> m: say -False

[00:35] <camelia> rakudo-moar ddecbe687: OUTPUT: «0␤»

[00:35] <jaguart> m: say -False .so

[00:35] <camelia> rakudo-moar ddecbe687: OUTPUT: «False␤»

[00:35] <CodeTortoise> Future so bright you got to close your eyes, turn around and walk away.

[00:35] <NemokoschKiwi> I like andthen a lot, especially for writing code without parens

[00:36] <jaguart> so negative True is True and negative False is False

[00:36] <NemokoschKiwi> yep :P

[00:36] <jaguart> without parens means no Block though?

[00:36] <NemokoschKiwi> it has ridiculously low precedence, by the way, almost the lowest. Lower than = for example

[00:36] <jaguart> so lexical scope is wider...

[00:37] <NemokoschKiwi> jaguart: actually, andthen creates a block under the hood

[00:37] <NemokoschKiwi> I've seen issues with this... rather subtle issues

[00:37] <jaguart> ok - so you can pod:Declarator it

[00:38] <NemokoschKiwi> I don't know but that definitely sounds like something that can involve bugs, lol

[00:38] <NemokoschKiwi> https://github.com/rakudo/rakudo/issues/5004 an issue I found with andthen

[00:39] *** NemokoschKiwi left
[00:40] <jaguart> did you try your example with a HyperWhatever?

[00:43] <jaguart> yeah - same - just wondered because HyperWhatever has a magic block

[00:43] <CodeTortoise> Oh, is it separating the result from -1 that would negate it, like the way it separates numerator and denominatore with nude?

[00:44] <CodeTortoise> m: print -3.succ.say

[00:44] <camelia> rakudo-moar ddecbe687: OUTPUT: «4␤-1»

[00:45] <discord-raku-bot> <Nemokosch> not sure

[00:45] <discord-raku-bot> <Nemokosch> oops

[00:45] <discord-raku-bot> <Nemokosch> did the "not sure" message show up and how?

[00:46] <jaguart> m: print -((3.succ).say)

[00:46] <camelia> rakudo-moar ddecbe687: OUTPUT: «4␤-1»

[00:46] <discord-raku-bot> <Nemokosch> I accidentally sent that as a reply to the bot gathering IRC messages

[00:51] <discord-raku-bot> <Kaiepi> what output are we looking for?

[00:55] <CodeTortoise> -2 --> -1.  The successor of any negative number should be right 1 on the numberline.

[00:56] <discord-raku-bot> <Kaiepi> m: -2 ~~ *.succ.say

[00:56] <discord-raku-bot> <Kaiepi> m: 2.:<->.succ.say

[00:56] <discord-raku-bot> <Kaiepi> that one's kinda weird

[00:57] <discord-raku-bot> <Nemokosch> disclaimer: these messages do generate output on the discord side - it just doesn't get sent over

[00:58] <discord-raku-bot> <Kaiepi> oh

[00:58] <discord-raku-bot> <Nemokosch> > 2.:<->.succ.say 

[00:58] <discord-raku-bot> <Nemokosch> by the way, what kind of syntax is this?

[00:59] <discord-raku-bot> <Nemokosch> is .: like some operator invocation sugar?

[01:01] <jaguart> m: -2 ~~ *.succ.say

[01:01] <camelia> rakudo-moar ddecbe687: OUTPUT: «-1␤»

[01:01] <CodeTortoise> methodop. It is chaining the unary - operator.

[01:03] *** jgaz left
[01:03] <jaguart> first one ->  (-2) ~~ (*.succ).say -> so expect (-2)+1 ==> -1 not -(2+1) ==> -3

[01:03] <discord-raku-bot> <Kaiepi> only thing about `~~` is it'll boolify the return value of the `Code` on the rhs

[01:03] <discord-raku-bot> <Kaiepi> m: say 1 ~~ *.succ

[01:03] <CodeTortoise> https://docs.raku.org/language/operators#methodop_.=

[01:04] <jaguart> and: 2.:<->.succ.say ==> left-to-right dot ((2.:<->).succ).say

[01:04] <Kaiepi> er

[01:04] <Kaiepi> m: say 1 ~~ *.succ

[01:04] <camelia> rakudo-moar ddecbe687: OUTPUT: «True␤»

[01:06] <jaguart> m: say 1 ~~ Whatever.new

[01:06] <camelia> rakudo-moar ddecbe687: OUTPUT: «True␤»

[01:08] <discord-raku-bot> <Nemokosch> it's not .= though

[01:08] <discord-raku-bot> <Kaiepi> it's on that page, lower https://docs.raku.org/language/operators#methodop_.:%3Cprefix_operator%3E

[01:09] <discord-raku-bot> <Nemokosch> oh thanks. Didn't show up when I typed .: in the search bar

[01:10] <CodeTortoise> Oh no, I thought I would get some other result when is typed exit.WHAT, but it just exited.

[01:11] <jaguart> lol

[01:11] <jaguart> like trying to print Ctrl+D

[01:12] <CodeTortoise> Yes. Now, nobody do that to camelia, alright?

[01:12] <CodeTortoise> m: -2.WHAT

[01:12] <camelia> rakudo-moar ddecbe687: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "-" in expression "-2.WHAT" in sink context (line 1)␤Use of uninitialized value of type Int in numeric context␤  in block <unit> at <tmp> line 1␤»

[01:14] <jaguart> I have a question about tests - how do you approach testing a call that generates large complex .say output

[01:18] <discord-raku-bot> <Nemokosch> I'd rather skip this question and go to sleep. 😅 as final words: didn't really see an elegant way in the modules I tried but it's true that they weren't written by sort of Raku monks. Those tests were like: "here, take this text, does it match?"

[01:20] <jaguart> so slurp STDOUT and compare to a reference?

[01:20] <CodeTortoise> jaguart: What kind of function would give a large .say result? Is it just for text?

[01:21] <jaguart> yeah - my introspection tool generates output like: https://gist.github.com/jaguart/35ab71ade4de290ec9723a3f3a3a5554

[01:21] <jaguart> I want to wrap it up into a module - with tests

[01:22] <CodeTortoise> I am out of my incredibly shallow depth on this one. 

[01:26] <jaguart> so do I have to fork the call to read it's STDOUT?

[01:26] <jaguart> or redirect STDOUT to a tmpfile before the call?

[01:27] <discord-raku-bot> <Nemokosch> <@210313526928080896> (Kaiepi): your insights would be really welcome here ^^

[01:38] <CodeTortoise> It seems so roundabout. It seems that .say output can be captured in a variable, but I am not sure if that works for your case.

[01:38] <CodeTortoise> Perhaps you can have the say output right to a file and slurp it after?

[01:39] <CodeTortoise> Ahh, that makes less sense. Nevermind.

[02:13] *** CodeTortoise left
[03:34] *** CodeTortoise joined
[03:39] *** CodeTortoise left
[03:44] *** CodeTortoise joined
[03:45] *** CodeTortoise left
[04:31] <jaguart> aha: https://github.com/raku-community-modules/Test-Output

[10:35] *** discord-raku-bot joined
[10:39] *** discord-raku-bot left
[10:40] *** discord-raku-bot joined
[11:17] *** deadmarshal_ joined
[12:30] *** deadmarshal_ left
[13:31] *** jgaz joined
[15:43] *** Kaiepi left
[16:05] *** Kaiepi joined
[18:01] *** jgaz left
[18:05] *** jgaz joined
[18:09] *** jgaz left
[18:10] <discord-raku-bot> <yabobay> i have these two files in the same directory, yet when i run test.raku, i get this thing:

[18:10] <discord-raku-bot> <yabobay> ```

[18:10] <discord-raku-bot> <yabobay> ===SORRY!=== Error while compiling /home/pizza/stuff/test.raku

[18:10] <discord-raku-bot> <yabobay> Could not find something in:

[18:10] <discord-raku-bot> <yabobay>     inst#/home/pizza/.raku

[18:10] <discord-raku-bot> <yabobay>     inst#/usr/share/perl6/site

[18:10] <discord-raku-bot> <yabobay>     inst#/usr/share/perl6/vendor

[18:10] <discord-raku-bot> <yabobay>     inst#/usr/share/perl6/core

[18:10] <discord-raku-bot> <yabobay>     ap#

[18:11] <discord-raku-bot> <yabobay>     nqp#

[18:11] <discord-raku-bot> <yabobay>     perl5#

[18:11] <discord-raku-bot> <yabobay> at /home/pizza/stuff/test.raku:1

[18:11] <discord-raku-bot> <yabobay> ```

[18:13] *** discord-raku-bot left
[18:13] *** discord-raku-bot joined
[18:16] <discord-raku-bot> <Nemokosch> You need to somehow inform the runtime to look up the module

[18:16] <discord-raku-bot> <Nemokosch> Either by installing it, or, more lightweightly, by using the -I flag

[18:18] <discord-raku-bot> <yabobay> ```

[18:18] <discord-raku-bot> <yabobay> Could not find symbol '&thing' in 'something'

[18:18] <discord-raku-bot> <yabobay>   in block <unit> at test.raku line 3

[18:18] <discord-raku-bot> <yabobay> ```

[18:18] <discord-raku-bot> <yabobay> but how?

[18:21] <discord-raku-bot> <Nemokosch> I don't know, I don't tend to use this

[18:21] <discord-raku-bot> <Nemokosch> But cannot be too difficult

[18:25] <discord-raku-bot> <yabobay> figured it out. turns out i just wasn't reading carefully. you need "our" on the subroutines

[18:25] <discord-raku-bot> <Nemokosch> Oh, gotcha

[18:26] <discord-raku-bot> <Nemokosch> Well that's true, my is really just for lexical scope

[19:52] *** newuserofraku joined
[19:55] <newuserofraku> Hi there....following instructions on https://rakudo.org/star/source

[19:55] <newuserofraku> this stage here: ./bin/rstar install in the linux section gave me some errors, where to go for help?

[20:37] <newuserofraku> Getting errors like: Could not find OpenSSL in.... No meta file located at.... Could not find Digest::SHA in.... if anyone knows what to do, please let me know, thanks

[21:04] *** deadmarshal_ joined
[21:06] *** deadmarshal_ left
[21:33] *** CodeTortoise joined
[21:39] *** CodeTortoise left
[21:40] *** CodeTortoise joined
[21:42] *** deadmarshal_ joined
[21:52] *** jgaz joined
[22:05] *** jgaz left
[22:15] <discord-raku-bot> <p6steve> newuserofraku: welcome! this is the "ubuntu install raku latest from source" Dockerfile that I keep https://github.com/p6steve/raku-Dockerfiles/blob/main/basic-ma/Dockerfile

[22:16] <discord-raku-bot> <p6steve> newuserofraku: from the errors you mention, I suspect that you need to preload the -dev packages like ```apt-get install -y build-essential libssl-dev libreadline-dev git curl \```

[22:21] <discord-raku-bot> <p6steve> newuserofraku: you are welcome to just use the Docker image like this ```docker run -it p6steve/rakudo:basic``` also

[22:37] <discord-raku-bot> <Fungi> hey so what all should i be installing to get started with raku. im seeing a rakudo, zef, rakudo star, and some vm stuff. is there anything else im missing?

[22:42] <discord-raku-bot> <p6steve> Fungi: the definitive downloads and instructions for rakudo (the most active raku compiler) are here https://rakudo.org

[22:44] <discord-raku-bot> <p6steve> Fungi: you can build from scratch, but often there will be a pre-built binary install for your setup

[22:45] <discord-raku-bot> <p6steve> Fungi: as it states on the instructions 'Archives contain a precompiled Rakudo and the Zef module manager.'

[22:50] <discord-raku-bot> <p6steve> Fungi: the rakudo star bundle adds in a set of useful modules and is described at https://rakudo.org/star ... but I think it has a smaller coverage of platforms

[23:00] <discord-raku-bot> <p6steve> Fungi: oh, and the 'vm stuff' is anyway included in all of the above (MoarVM is the raku execution engine for rakudo, bit like Java runs on the JVM)

[23:11] *** CodeTortoise left
[23:19] <discord-raku-bot> <Fungi> alrighty

[23:31] *** CodeTortoise joined
[23:35] <discord-raku-bot> <p6steve> enjoy! please come back and share your feedback...

[23:36] <discord-raku-bot> <Nemokosch> I for one like the rakubrew tool a lot: https://rakubrew.org/

[23:36] <discord-raku-bot> <p6steve> Nemokosch: ++

[23:40] <jaguart> Fungi: also see https://github.com/nxadm/rakudo-pkg for an alternative to rakubrew

[23:46] *** CodeTortoise left
[23:50] *** CodeTortoise joined
