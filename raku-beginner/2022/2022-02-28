[00:01] <discord-raku-bot> <klebs#2209> ah, gotcha -- thanks for these links

[00:01] <discord-raku-bot> <klebs#2209> thanks for these links -- will take a look

[00:03] <discord-raku-bot> <klebs#2209> i have another grammar related question which is about proto rules:

[00:05] <discord-raku-bot> <klebs#2209> i have something like this: ```raku

[00:05] <discord-raku-bot> <klebs#2209>     proto rule expr { * }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<lit>  { <lit> }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<self> { <SELF> }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<path-expr> {

[00:05] <discord-raku-bot> <klebs#2209>         <path-expr>

[00:05] <discord-raku-bot> <klebs#2209>     }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<macro-expr>                    { <macro-expr> }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<struct-expr>                   { <path-expr> '{' <struct-expr-fields> '}' }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<expr-q>                        { <expr> '?' }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<dotted-expr>                   { <expr> '.' <path-generic-args-with-colons> }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<dotted-expr-lit>               { <expr> '.' <LIT-INTEGER> }

[00:05] <discord-raku-bot> <klebs#2209>     rule expr:sym<expr-eq-expr>                  { <expr> '=' <expr> }

[00:05] <discord-raku-bot> <klebs#2209> ```

[00:07] <discord-raku-bot> <klebs#2209> when I trace the parse, i get:

[00:07] <discord-raku-bot> <klebs#2209> ```raku

[00:07] <discord-raku-bot> <klebs#2209> #!/usr/bin/env raku

[00:07] <discord-raku-bot> <klebs#2209> use my-grammar;

[00:07] <discord-raku-bot> <klebs#2209> my $in     = $*IN.slurp.chomp;

[00:07] <discord-raku-bot> <klebs#2209> my $parsed = MyGrammar.parse($in, rule => "expr");

[00:07] <discord-raku-bot> <klebs#2209> say $parsed;

[00:07] <discord-raku-bot> <klebs#2209> ```

[00:07] <discord-raku-bot> <klebs#2209> just with something like that^, where input is `self.phase = 1.0`

[00:08] <discord-raku-bot> <klebs#2209> it basically grabs the expr:sym<self> rule instead of <expr-eq-expr>

[00:09] <discord-raku-bot> <klebs#2209> my understanding was that this :sym syntax was LTM

[00:09] <discord-raku-bot> <klebs#2209> what am i missing? i can get it to parse correctly under some circumstances if i change the order of the proto rules

[00:12] <discord-raku-bot> <klebs#2209> this grammar was generated by parsing a yacc file, so i think there may be some other problems with it...

[00:13] <discord-raku-bot> <klebs#2209> like for instance i think i may hit some infinite loops

[00:15] <discord-raku-bot> <klebs#2209> but i still don't expect the parse to short circuit -- i think i am missing some detail but am not quite sure what it is

[00:16] <discord-raku-bot> <klebs#2209> when i change everything from rule --> regex, it hits one of those infinite loops at dotted-expr

[00:16] <discord-raku-bot> <klebs#2209> so i think i need to rework the structure somehow so that no rule loops into <expr>

[00:29] <discord-raku-bot> <klebs#2209> ah, fixing the loops seems to have solved it -- no worries! problem solved i think!

[00:40] *** Manifest0 left
[00:41] <guifa> klebs: be aware that all caps names identifiers should be considered reserved

[00:43] <guifa> for methods, they are explicitly reserved, and for everything else they're recommended to be used for "builtints" (which I read as core/modules, which means the more end-usery-space you're in, the more you should avoid them)

[01:46] *** frost joined
[03:28] <discord-raku-bot> <klebs#2209> thanks, will fix

[03:28] <discord-raku-bot> <klebs#2209> usually dont write them all caps but this grammar is generated from a yacc file

[03:28] <discord-raku-bot> <klebs#2209> still fixing it up

[03:28] <discord-raku-bot> <klebs#2209> im hitting another weird case

[03:30] <discord-raku-bot> <klebs#2209> i have a rule called token-tree as well as a rule called token-trees

[03:30] <discord-raku-bot> <klebs#2209> token-trees is just `<token-tree>*`

[03:30] <discord-raku-bot> <klebs#2209> i am hitting a case where token-tree matches, but token-trees does not

[03:30] <discord-raku-bot> <klebs#2209> scratching my head trying to figure out why

[03:30] <discord-raku-bot> <klebs#2209> trying to figure out why

[03:32] <discord-raku-bot> <klebs#2209> or rather, it hangs

[03:34] <discord-raku-bot> <klebs#2209> i also tried with a `+`, as well as `<token-tree>* %%  <.ws>`

[03:34] <discord-raku-bot> <klebs#2209> also `<token-tree>+ %%  <.ws>`

[03:34] <discord-raku-bot> <klebs#2209> all hang

[03:55] <discord-raku-bot> <klebs#2209> but  `rule token-trees { <token-tree> <token-tree> }` matches when i duplicate the input

[03:55] <discord-raku-bot> <klebs#2209> quite odd

[04:07] <discord-raku-bot> <klebs#2209> i think it might be similar to the problem before -- i found another way to drill down

[04:18] <discord-raku-bot> <klebs#2209> got it

[04:19] <discord-raku-bot> <klebs#2209> it was the same kind of thing

[07:43] *** frost left
[08:27] *** Manifest0 joined
[09:12] *** dakkar joined
[09:13] *** frost joined
[10:32] *** frost left
[11:07] *** razetime joined
[13:22] *** razetime left
[13:23] *** razetime joined
[13:47] *** frost joined
[14:33] *** jgaz joined
[14:49] *** jgaz left
[14:52] *** jgaz joined
[15:00] *** jgaz left
[16:09] *** razetime left
[17:34] *** dakkar left
[18:26] *** discord-raku-bot left
[18:26] *** discord-raku-bot joined
[18:30] *** discord-raku-bot left
[18:31] *** discord-raku-bot joined
[20:18] <discord-raku-bot> <klebs#2209> today i have another kind of infinite loop in this grammar, where a block-expr can be a match-expr, where `rule match-expr { 'MATCH' <expr-nostruct> '{' <match-expr-body '} }` and expr-nostruct can be a block-expr.  this creates a cycle and thus an infinite loop.  are there any known strategies for solving this type of problem?

[20:18] <discord-raku-bot> <klebs#2209> today i found another infinite loop in this grammar:

[20:18] <discord-raku-bot> <klebs#2209> a block-expr can be a match-expr, where `rule match-expr { 'MATCH' <expr-nostruct> '{' <match-expr-body '} }` and expr-nostruct can be a block-expr.  this creates a cycle and thus an infinite loop.  are there any known strategies for solving this type of problem?

[20:20] <discord-raku-bot> <klebs#2209> today i found another infinite loop in this grammar:

[20:20] <discord-raku-bot> <klebs#2209> a block-expr can be a match-expr, where `rule match-expr { 'MATCH' <expr-nostruct> '{' <match-expr-body '}' }` and expr-nostruct can be a block-expr.  this creates a cycle and thus an infinite loop.  are there any known strategies for solving this type of problem?

[20:20] <discord-raku-bot> <klebs#2209> oh wait

[20:20] <discord-raku-bot> <klebs#2209> wow

[20:20] <discord-raku-bot> <klebs#2209> this is the exact same problem as before

[20:20] <discord-raku-bot> <klebs#2209> ðŸ™‚

[20:22] <discord-raku-bot> <klebs#2209> because it is <MATCH> instead of what i wrote: 'MATCH'

[20:22] <discord-raku-bot> <klebs#2209> i am thankful you folks are all so helpful and patient ðŸ™‚

[20:22] <discord-raku-bot> <klebs#2209> it is helpful for me

[20:22] <discord-raku-bot> <klebs#2209> i need to take care of the all caps rules everywhere asap

[20:24] <discord-raku-bot> <klebs#2209> i need to take care of the all caps rules everywhere asap it seems

[20:24] <discord-raku-bot> <klebs#2209> i need to take care of the all caps rules everywhere asap

[20:25] <MasterDuke> Â it's not just caps though. things like e.g., 'identifier', 'token', 'digits', are all *potentially* problematic (i don't remember which ones exactly are, maybe even none in that list)

[20:26] <discord-raku-bot> <klebs#2209> roger that

[20:27] <discord-raku-bot> <klebs#2209> i think it is possible that in this case some of those (or similar) might trigger

[20:28] <discord-raku-bot> <klebs#2209> i'll eventually probably update the generator (that went from yacc to raku) to lowercase rule names and avoid keywords

[20:30] <discord-raku-bot> <klebs#2209> it would have been much easier had i done it that way originally ðŸ™‚ but i didnt fully realize what would happen

[20:30] <discord-raku-bot> <klebs#2209> it is a good thing i have raku to solve this problem!

[20:31] <MasterDuke> i've wanted to add a warning if you use a 'core' name, but haven't gotten around to it, partly because i don't have a good sense of exactly when it *is* a problem

[20:34] <discord-raku-bot> <klebs#2209> understood -- are you working on raku itself? i hope some of my grammar adventures have at least been helpful to observe in action ðŸ¤£

[20:35] <discord-raku-bot> <klebs#2209> is it a problem to use one of these 'core' names in a sym rule? something like `rule something:sym<continue> { ... }`

[20:36] <MasterDuke> i flail at the keyboard and sometimes it ends up in PRs for rakudo/nqp/moarvm

[20:36] <discord-raku-bot> <klebs#2209> (continue could also be something like: rule, token, last, next, sub, if, etc)

[20:36] <discord-raku-bot> <klebs#2209> is it a problem to name these like that?

[20:37] <MasterDuke> i'm not sure. i was trying to think of a good way to search rakudo issues and/or irc logs for prior times people have run into this, but also haven't come up with any good search terms...

[20:39] <discord-raku-bot> <klebs#2209> yeah it can be tricky to find solutions to these sorts of issues because the terms involved all overlap with other usages (which is one reason i usually ask *here* for this kind of stuff instead of google)

[20:45] <discord-raku-bot> <klebs#2209> it is okay i suppose, i like talking to you folks anyways! other raku people!

[20:47] <discord-raku-bot> <klebs#2209> ```raku

[20:47] <discord-raku-bot> <klebs#2209> #!/usr/bin/env raku

[20:47] <discord-raku-bot> <klebs#2209> use global-subparse;

[20:47] <discord-raku-bot> <klebs#2209> my $bad-rules = SetHash.new;

[20:47] <discord-raku-bot> <klebs#2209> grammar AllCapsRule does GlobalSubparse {

[20:47] *** discord-raku-bot left
[20:47] *** discord-raku-bot joined
[20:49] <discord-raku-bot> <klebs#2209> i can filter my files through this script to fix the caps issue, just posting it here in case it is useful to anybody else

[20:50] <MasterDuke> it didn't make it to irc (bot got disconnect due to excess flood), probably best to put it in a gist somewhere and paste the link

[21:05] <discord-raku-bot> <klebs#2209> good idea

[22:29] * jaguart thanks @CIAvash @MasterDuke @guifa - thanks for the POD6 pointers, will follow-up.

[22:54] <discord-raku-bot> <gfldex#8222> PWC 154-2 is a nice one. Well worth the head scratching. https://theweeklychallenge.org/blog/perl-weekly-challenge-154/

