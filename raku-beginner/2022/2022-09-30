[00:44] *** archenoth left
[01:17] *** frost joined
[01:46] *** chikega joined
[01:47] <chikega> Hi everyone, are there any video tutorials about learning the Raku language?

[01:51] *** chikega left
[02:46] *** jetchisel left
[02:49] *** jetchisel joined
[03:06] *** MasterDuke left
[03:09] *** razetime joined
[03:27] *** razetime left
[04:06] *** razetime joined
[08:03] *** razetime left
[08:20] *** razetime joined
[08:34] *** frost left
[08:44] <lizmat> there are: https://www.youtube.com/results?search_query=%23rakulang is a good starting point ?

[09:00] *** crystalfrost[m] left
[09:00] <discord-raku-bot> <Nemokosch> Do you think a tematic Raku series would help? I used to love making tutorial series

[09:00] *** crystalfrost[m] joined
[09:00] *** crystalfrost[m] left
[09:04] <lizmat> I think it would, if you feel up to it :)

[09:06] <discord-raku-bot> <Nemokosch> The main question is if I should try to aim for a "first language" approach or an "nth language" assumption will do

[09:07] <lizmat> fwiw, personally I would love to see a "first language" approach, because there are quite a few tutorials already coming from other languages

[09:31] *** razetime left
[09:31] *** razetime_ joined
[09:41] <discord-raku-bot> <zacque> Why is my `@pascal` has different values from calling the `pascal-sequence` directly? https://paste.debian.net/1255512/

[09:41] <discord-raku-bot> <zacque> What's going on with the assignment?

[09:41] <discord-raku-bot> <zacque> What's going on with the assignment?

[09:46] <discord-raku-bot> <gfldex> <@511826957558611968> you don't reset @k and the result-array @pascal contains referenced to @k. So the last change to @k will end up x times in @pascal.

[09:50] <discord-raku-bot> <gfldex> m:```

[09:50] <discord-raku-bot> <gfldex>     sub pascal-sequence(Int:D $number) {

[09:50] <discord-raku-bot> <gfldex>         my @k;

[09:50] <discord-raku-bot> <gfldex>         gather {

[09:50] <discord-raku-bot> <gfldex>             for 1..$number {

[09:50] <discord-raku-bot> <gfldex>                 @k = 1, | @k >>+>> (| @k[1..*], 0);

[09:50] <discord-raku-bot> <gfldex>                 take @k.clone;

[09:50] <discord-raku-bot> <gfldex>             }

[09:50] <discord-raku-bot> <gfldex>         }

[09:50] <discord-raku-bot> <gfldex>     }

[09:50] <discord-raku-bot> <gfldex>     sub MAIN(Int:D $rows where $rows >= 3) {

[09:50] <discord-raku-bot> <gfldex>         my @pascal = (pascal-sequence $rows);

[09:50] <discord-raku-bot> <gfldex>         say @pascal; # OUTPUT: [[1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1]]

[09:50] <discord-raku-bot> <gfldex>         say (pascal-sequence $rows); # OUTPUT: ([1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1])

[09:50] <discord-raku-bot> <gfldex>     }

[09:50] <discord-raku-bot> <gfldex>     MAIN(5);

[09:50] <discord-raku-bot> <gfldex> ```

[09:50] <discord-raku-bot> <gfldex> m:```

[09:50] <discord-raku-bot> <gfldex>     sub pascal-sequence(Int:D $number) {

[09:50] <discord-raku-bot> <gfldex>         my @k;

[09:50] <discord-raku-bot> <gfldex>         gather {

[09:50] <discord-raku-bot> <gfldex>             for 1..$number {

[09:50] <discord-raku-bot> <gfldex>                 @k = 1, | @k >>+>> (| @k[1..*], 0);

[09:50] <discord-raku-bot> <gfldex>                 take @k.clone;

[09:51] <discord-raku-bot> <gfldex>             }

[09:51] <discord-raku-bot> <gfldex>         }

[09:51] <discord-raku-bot> <gfldex>     }

[09:51] <discord-raku-bot> <gfldex>     sub AIN(Int:D $rows where $rows >= 3) {

[09:51] <discord-raku-bot> <gfldex>         my @pascal = (pascal-sequence $rows);

[09:51] <discord-raku-bot> <gfldex>         say @pascal; # OUTPUT: [[1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1]]

[09:51] <discord-raku-bot> <gfldex>         say (pascal-sequence $rows); # OUTPUT: ([1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1])

[09:51] <discord-raku-bot> <gfldex>     }

[09:51] <discord-raku-bot> <gfldex>     AIN(5);

[09:51] <discord-raku-bot> <gfldex> ```

[09:52] <discord-raku-bot> <gfldex> I got the feeling that there is a sequence operator waiting to be used for this problem. :)

[09:53] <discord-raku-bot> <zacque> Hmm, I don't get it, but `say (pascal-sequence $rows);` does give the correct result?

[09:54] <discord-raku-bot> <zacque> I hope it does! 😄

[09:54] <discord-raku-bot> <Nemokosch> it is seriously weird that one works and the other doesn't

[09:55] <discord-raku-bot> <Nemokosch> but what you are doing was clearly a bad idea

[09:56] <discord-raku-bot> <Nemokosch> ie modifying it in-place and taking it multiple times

[09:56] <discord-raku-bot> <Nemokosch> actually, I have an idea why it's so weird

[09:56] <discord-raku-bot> <Nemokosch> @vars are eager by default

[09:56] <discord-raku-bot> <Nemokosch> so it fetched your whole sequence, and the inner list reached the last element

[09:56] <discord-raku-bot> <Nemokosch> so you got the last element multiple times

[09:56] <discord-raku-bot> <Nemokosch> on the other hand, the sequence was lazy so the mutation happened on the fly, giving the correct results

[09:57] <discord-raku-bot> <Nemokosch> if my hypothesis is correct, it would work correctly with `    my @pascal = lazy (pascal-sequence $rows);`

[10:16] <discord-raku-bot> <zacque> Ok, so `take` always return a reference to the variable?

[10:17] <discord-raku-bot> <zacque> I don't see how lazy and eager play a role here, because it doesn't say that `gather/take` is always lazy

[10:18] <discord-raku-bot> <zacque> Putting `lazy` in front of `pascal-sequence` doesn't help either

[10:18] <discord-raku-bot> <Nemokosch> pretty much everything is always lazy

[10:18] <discord-raku-bot> <Nemokosch> it would be easier to collect the counterexamples

[10:19] <discord-raku-bot> <zacque> Oh, that's new to me. But I don't see it stated in the docs =X

[10:21] <discord-raku-bot> <zacque> Hmmm, I mean why do you say that everything is always lazy?

[10:21] <discord-raku-bot> <Nemokosch> ~~because it's quite accurate~~

[10:21] <discord-raku-bot> <Nemokosch> it's a general design principle that everything that can return Seq over List, will return Seq over List

[10:21] <discord-raku-bot> <Nemokosch> X, Z, map, grep, in fact gather and take is rather obvious in this list

[10:23] <discord-raku-bot> <Nemokosch> because it's like the Raku version of generators and generators are lazy by concept

[10:23] <discord-raku-bot> <zacque> Huh? But Seq is only potentially lazy, from the doc "class Seq: An iterable, potentially lazy sequence of values"

[10:23] <discord-raku-bot> <zacque> I guess it meant that some functions taking Seq should be able to handle lazy list?

[10:24] <discord-raku-bot> <Nemokosch> I'd say there is no big difference between "lazy" and "potentially lazy"

[10:25] <discord-raku-bot> <Nemokosch> the implications come with the potential

[10:25] <discord-raku-bot> <Nemokosch> it's rather a semantic argument, if we mean "lazy" as implementation or "lazy" as interface

[10:25] <discord-raku-bot> <Nemokosch> "potentially lazy" is about the interface

[10:25] <discord-raku-bot> <zacque> I don't think it matters if that's an implementation detail

[10:25] <discord-raku-bot> <Nemokosch> you shall not assume that it's not lazy

[10:25] <discord-raku-bot> <zacque> From the user perspective, I guess I can safely assume all are not lazy unless declared otherwise?

[10:27] <discord-raku-bot> <Nemokosch> it's rather the opposite

[10:27] <discord-raku-bot> <zacque> I meant if I work with the built-in lists and operators

[10:27] <discord-raku-bot> <Nemokosch> yeah no

[10:27] <discord-raku-bot> <Nemokosch> almost everything is "potentially lazy", unless you ask otherwise

[10:27] <discord-raku-bot> <zacque> Hmmm, okay, I'll keep it in mind while learning more about Raku

[10:27] <discord-raku-bot> <zacque> Thanks

[10:27] <discord-raku-bot> <Nemokosch> this is really good when working with loads (potentially infinite) of data

[10:28] <discord-raku-bot> <zacque> But in the case, I think the laziness doesn't matter? Cause I've put `lazy` keyword and it gives the same result

[10:29] <discord-raku-bot> <zacque> Yup, agree

[10:29] <discord-raku-bot> <Nemokosch> for me it didn't

[10:29] <discord-raku-bot> <zacque> Huh? Can you elaborate further? You've got a different result with `lazy`?

[10:29] <discord-raku-bot> <gfldex> m:```

[10:29] <discord-raku-bot> <gfldex>     my \pascal = (1,), (1,1), -> @a { 1, |(@a «+» (|@a[1..*], 0)) } … *;

[10:29] <discord-raku-bot> <gfldex>     say pascal[^10];

[10:29] <discord-raku-bot> <gfldex> ```

[10:30] <discord-raku-bot> <Nemokosch> yep

[10:31] <discord-raku-bot> <Nemokosch> I did this

[10:31] <discord-raku-bot> <zacque> Ah, I see. Thanks for showing your code

[10:31] <discord-raku-bot> <zacque> Mine still not working even with `lazy`. https://paste.debian.net/1255516/

[10:32] <discord-raku-bot> <zacque> Guess I should use your approach

[10:33] <discord-raku-bot> <Nemokosch> [^4] seems to be too eager

[10:33] <discord-raku-bot> <zacque> I think it works with `@pascal` as well, is there a specific reason that you use `\pascal`?

[10:33] <discord-raku-bot> <zacque> What do you mean?

[10:34] <discord-raku-bot> <Nemokosch> tbh I don't know how to properly use this lazy mess but if you iterate it, you can see the results popping out one after the other

[10:35] <discord-raku-bot> <Nemokosch> I replaced your @pascal[^4] line to

[10:35] <discord-raku-bot> <Nemokosch> ```perl

[10:35] <discord-raku-bot> <Nemokosch> .say for @pascal;

[10:35] <discord-raku-bot> <Nemokosch> ```

[10:35] <discord-raku-bot> <Nemokosch> and then the right results were indeed popping out

[10:37] <discord-raku-bot> <zacque> Yes indeed, together with the `lazy` keyword

[10:37] <discord-raku-bot> <Nemokosch> yep

[10:37] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/list#index-entry-laziness_in_Iterable_objects I'm reading this rn

[10:38] <discord-raku-bot> <zacque> Hmmm, that's so confusing right now

[10:39] <discord-raku-bot> <zacque> I don't think it helps?

[10:39] <discord-raku-bot> <Nemokosch> not detailed enough...

[10:39] <discord-raku-bot> <Nemokosch> right

[10:39] <discord-raku-bot> <Nemokosch> There is one thing I feel we need to know

[10:39] <discord-raku-bot> <zacque> What's it?

[10:39] <discord-raku-bot> <Nemokosch> are the elements of the lazy list still the very same element multiple times, or not

[10:40] <discord-raku-bot> <Nemokosch> because if they are, it's inevitable that once we fetch more at once, it will always have the same value

[10:41] <discord-raku-bot> <zacque> I guess it is the same variable? If not, it won't be lazy 😂

[10:41] <discord-raku-bot> <gfldex> `lazy` sneaks another `Seq` in that decontainerises the values in `@k`. When assigned to the Array, fresh containers are being filled with values.

[10:41] <discord-raku-bot> <Nemokosch> <@511826957558611968>

[10:42] <discord-raku-bot> <Nemokosch> ```perl

[10:42] <discord-raku-bot> <Nemokosch>     my @pascal = lazy (pascal-sequence $rows);

[10:42] <discord-raku-bot> <Nemokosch>     say @pascal[0];

[10:42] <discord-raku-bot> <Nemokosch>     say @pascal[0].WHERE;

[10:42] <discord-raku-bot> <Nemokosch>     say @pascal[1];

[10:42] <discord-raku-bot> <Nemokosch>     say @pascal[1].WHERE;

[10:42] <discord-raku-bot> <Nemokosch>     say (pascal-sequence $rows); # OUTPUT: ([1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1])

[10:42] <discord-raku-bot> <Nemokosch> ```

[10:42] <discord-raku-bot> <Nemokosch> so yes

[10:43] <discord-raku-bot> <Nemokosch> it's the very same variable retrieved in multiple states

[10:43] <discord-raku-bot> <Nemokosch> okay, now, this makes it fairly obvious why retrieving a part of the list will contain the same value

[10:44] <discord-raku-bot> <Nemokosch> as gfldex pointed out with his very first code example (calling .clone), your array doesn't have copies

[10:44] <discord-raku-bot> <Nemokosch> it has the same variable over and over

[10:45] <discord-raku-bot> <zacque> Can I know why does it matter?

[10:45] <discord-raku-bot> <zacque> This is a bit over my head right now

[10:45] <discord-raku-bot> <zacque> I see, didn't know about `WHERE` before this

[10:45] <discord-raku-bot> <zacque> Let me see what if without the `lazy` keyword?

[10:46] <discord-raku-bot> <Nemokosch> it will be the same pretty sure, except the values will match

[10:47] <discord-raku-bot> <gfldex> `return @k` doesn't return the values in `@k` but `@k` itself. You keep overwriting the values in  `@k`, so you end up with the values of the very last overwriting.

[10:47] <discord-raku-bot> <Nemokosch> okay, thankfully we are saying the same thing with different words

[10:47] <discord-raku-bot> <zacque> Okay, I see, I've tried it out myself

[10:47] <discord-raku-bot> <Nemokosch> so you don't have to understand two things at once but one thing twice 😄

[10:48] <discord-raku-bot> <zacque> Okay, so `take @k` here behaves similarly to `return @k`?

[10:49] <discord-raku-bot> <zacque> Does it apply to all container variables? Or is it a special case?

[10:49] <discord-raku-bot> <zacque> So, when I'm passing a `@var` around, I'm passing the reference around?

[10:49] <discord-raku-bot> <Kaiepi> `take` behaves like `return` wrt containers

[10:50] <discord-raku-bot> <Nemokosch> From what I know, something that has an Array _container_ (like @-sigilled vars by default), cannot just drop that container

[10:50] <discord-raku-bot> <gfldex> `take @k[]:v;` works too and might be faster as a `.clone`. The zen slice with `:v` also removes any holes.

[10:52] <discord-raku-bot> <Nemokosch> I noticed a gotcha

[10:52] <discord-raku-bot> <Nemokosch> m: my @k = <blah foo bar>; @k =:= @k[]:v andthen .say;

[10:52] <discord-raku-bot> <Nemokosch> weird parsing as I clearly meant (@k[]:v)

[10:53] <discord-raku-bot> <Nemokosch> my @k = <blah foo bar>; @k =:= (@k[]:v) andthen .say;

[10:54] <discord-raku-bot> <Nemokosch> <@511826957558611968> =:= will be useful, trust me

[10:54] <discord-raku-bot> <Nemokosch> it's the container equivalence

[10:54] <discord-raku-bot> <zacque> I'll pass `:v` for now, thanks you for your time and effort 😄

[10:54] <discord-raku-bot> <zacque> It looks weird... 😄

[10:54] <discord-raku-bot> <Nemokosch> ie "are these two things the same one thing"

[10:54] <discord-raku-bot> <Nemokosch> m: my @k = <blah foo bar>; @k =:= (@k[]:v) andthen .say;

[10:54] <discord-raku-bot> <Nemokosch> no, they aren't - thank heavens, in this case

[10:56] <discord-raku-bot> <zacque> Ah, it's the container identity operator, so it checks whether two "references" are equal

[10:56] <discord-raku-bot> <Nemokosch> yes, basically

[10:56] <discord-raku-bot> <zacque> I don't think it helps in this case either

[10:56] <discord-raku-bot> <zacque> But glad to learn about it

[10:56] <discord-raku-bot> <Nemokosch> it helps to know if you have the "same variable" over and over

[10:56] <discord-raku-bot> <Nemokosch> let me take your original code again

[10:58] <discord-raku-bot> <zacque> How is `=:=` different from `===` wrt container? Some experiment shows that they are the same? See:

[10:58] <discord-raku-bot> <zacque> ```raku

[10:58] <discord-raku-bot> <zacque> [0] > (1,2,3) =:= (1,2,3)

[10:58] <discord-raku-bot> <zacque> False

[10:58] <discord-raku-bot> <zacque> [1] > (1,2,3) === (1,2,3)

[10:58] <discord-raku-bot> <zacque> False

[10:58] <discord-raku-bot> <zacque> [2] > my @foo = (1,2,3);

[10:58] <discord-raku-bot> <zacque> [1 2 3]

[10:58] <discord-raku-bot> <zacque> [3] > @foo =:= @foo

[10:58] <discord-raku-bot> <zacque> True

[10:58] <discord-raku-bot> <zacque> [4] > @foo === @foo

[10:58] <discord-raku-bot> <zacque> True

[10:58] <discord-raku-bot> <zacque> [5] > @foo === (1,2,3)

[10:58] <discord-raku-bot> <zacque> False

[10:58] <discord-raku-bot> <zacque> ```

[10:59] <discord-raku-bot> <Nemokosch> the difference is that === says true if you drop the container on one side

[11:00] <discord-raku-bot> <Nemokosch> while =:= would say false to that

[11:00] <discord-raku-bot> <zacque> Erm, is there an example for that? I don't know how to "drop the container"

[11:00] <discord-raku-bot> <Nemokosch> in fact, I suspect === always drops the container

[11:00] <discord-raku-bot> <Nemokosch> yes, your code is a perfect example

[11:00] <discord-raku-bot> <Nemokosch> ```perl

[11:00] <discord-raku-bot> <Nemokosch> sub MAIN(Int:D $rows where $rows >= 3) {

[11:00] <discord-raku-bot> <Nemokosch>     my @pascal = (pascal-sequence $rows);

[11:00] <discord-raku-bot> <Nemokosch>     say [===] @pascal;

[11:00] <discord-raku-bot> <Nemokosch>     say @pascal[^$rows]; # OUTPUT: [[1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1] [1 4 6 4 1]]

[11:00] <discord-raku-bot> <Nemokosch>     say (pascal-sequence $rows); # OUTPUT: ([1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1])

[11:00] <discord-raku-bot> <Nemokosch> }

[11:00] <discord-raku-bot> <Nemokosch> ```

[11:00] <discord-raku-bot> <Nemokosch> it will say True

[11:02] <discord-raku-bot> <Nemokosch> I wish I could phrase what happened here xD

[11:02] <discord-raku-bot> <zacque> It's okay! I know about `[]`!

[11:02] <discord-raku-bot> <zacque> It's the `reduce` operator

[11:02] <discord-raku-bot> <Nemokosch> that helps

[11:02] <discord-raku-bot> <Nemokosch> but there is more...

[11:02] <discord-raku-bot> <Nemokosch> so @pascal wraps the same Array container into different Scalar containers

[11:02] <discord-raku-bot> <zacque> So, it shows that every element are in fact the same container

[11:02] <discord-raku-bot> <Nemokosch> if you assign to @pascal[0], that won't be reflected in @pascal[1]

[11:02] <discord-raku-bot> <Nemokosch> because they are put into different Scalar containers

[11:02] <discord-raku-bot> <Nemokosch> you can even try that

[11:03] <discord-raku-bot> <zacque> I don't follow here...

[11:04] <discord-raku-bot> <Nemokosch> I mean, understandable, I've been spending more than one year

[11:04] <discord-raku-bot> <zacque> What's the deal with Scalar containers?

[11:04] <discord-raku-bot> <Nemokosch> to kinda sorta understand variables

[11:04] <discord-raku-bot> <zacque> Ah, scalar container is a catch indeed

[11:04] <discord-raku-bot> <Nemokosch> let's wait for Kaiepi

[11:04] <discord-raku-bot> <zacque> The doc says it won't get flatten

[11:06] <discord-raku-bot> <zacque> But, but, but they have the same value??

[11:06] <discord-raku-bot> <zacque> 🤦‍♂️

[11:06] <discord-raku-bot> <Nemokosch> it's like the containers are nested

[11:06] <discord-raku-bot> <Nemokosch> there is an item of the array, and that item contains an array

[11:06] <discord-raku-bot> <Nemokosch> the items don't match, the underlying arrays do match

[11:06] <discord-raku-bot> <zacque> Ya, I get this, `pascal-sequence` returns a (lazy?) array of list

[11:06] <discord-raku-bot> <Nemokosch> =:= will say false for the items

[11:07] <discord-raku-bot> <Nemokosch> === will say true because it drops the scalar container and finds the array

[11:08] <discord-raku-bot> <zacque> Then when I assign `pascal-sequence` to `@pascal` it will be coerced to `array` type

[11:08] <discord-raku-bot> <Kaiepi> `my @pascal = ...` makes an empty `Array`, then assigns to fresh `Scalar` containers within this for each element in  `pascal-sequence`'s `gather` (`Seq`)

[11:08] <discord-raku-bot> <Kaiepi> it does this eagerly because the `gather` isn't `lazy`

[11:08] <discord-raku-bot> <Kaiepi> if you assign an array, it copies from the containers within that

[11:10] <discord-raku-bot> <zacque> Okay, so an array assignment to an array performs an implicit iteration? Makes sense...

[11:10] <discord-raku-bot> <Nemokosch> array assignment calls .STORE

[11:10] <discord-raku-bot> <zacque> If eager I meant

[11:10] <discord-raku-bot> <Nemokosch> by definition

[11:10] <discord-raku-bot> <Kaiepi> neat thing is if you assign a lazy iterable to an array, consume some values, then assign that to another array, it preserves any laziness left

[11:10] <discord-raku-bot> <zacque> But the state remains right? Make sense...

[11:11] <discord-raku-bot> <zacque> I meant it'll follow from last "consumption"

[11:11] <discord-raku-bot> <Kaiepi> yeah

[11:11] <discord-raku-bot> <zacque> But I still don't get the "different Scalar containers" part

[11:12] <discord-raku-bot> <Nemokosch> I'm describing it, hold on

[11:12] <discord-raku-bot> <zacque> Ok, thanks

[11:12] <discord-raku-bot> <Nemokosch> pls <@210313526928080896> also hold on in case I mess something up big time 😅

[11:12] <discord-raku-bot> <Kaiepi> ok 😛

[11:13] <discord-raku-bot> <zacque> Please take your time! Gtg, I'll be right back in about an hour...

[11:14] <discord-raku-bot> <Nemokosch> 1. `my @pascal = ...` this is an "array assignment, hence calling STORE with the content on the right handside

[11:14] <discord-raku-bot> <Nemokosch> 2. because the rhs wasn't explicitly marked lazy, the content is traversed eagerly

[11:14] <discord-raku-bot> <Nemokosch> 3. the content is some Iterable that consists of the very same Array container over and over again (let me call this `gathered`

[11:14] <discord-raku-bot> <Nemokosch> 4. STORE allocates Scalar containers, the elements of the @pascal array

[11:14] <discord-raku-bot> <Nemokosch> 5. as it traverses `gathered`, it puts the elements of it (which are the same Array container over and over) into the Scalar containers

[11:14] <discord-raku-bot> <Nemokosch> 1. `my @pascal = ...` this is an "array assignment, hence calling STORE with the content on the right handside

[11:14] <discord-raku-bot> <Nemokosch> 2. because the rhs wasn't explicitly marked lazy, the content is traversed eagerly

[11:14] <discord-raku-bot> <Nemokosch> 3. the content is some Iterable that consists of the very same Array container over and over again (let me call this `gathered`)

[11:14] <discord-raku-bot> <Nemokosch> 4. STORE allocates Scalar containers, the elements of the @pascal array

[11:14] <discord-raku-bot> <Nemokosch> 5. as it traverses `gathered`, it puts the elements of it (which are the same Array container over and over) into the Scalar containers

[11:15] <discord-raku-bot> <Nemokosch> so you end up with

[11:15] <discord-raku-bot> <Nemokosch>   @pascal - an Array container on top

[11:15] <discord-raku-bot> <Nemokosch>   the elements of @pascal - Scalar containers that you can mutate

[11:15] <discord-raku-bot> <Nemokosch>     the current contaent of the elements - the same one Array container (for all elements)

[11:15] <discord-raku-bot> <Nemokosch> so you end up with

[11:15] <discord-raku-bot> <Nemokosch>   @pascal - an Array container on top

[11:15] <discord-raku-bot> <Nemokosch>   the elements of @pascal - Scalar containers that you can mutate

[11:15] <discord-raku-bot> <Nemokosch>     the current content of the elements - the same one Array container (for all elements)

[11:18] <discord-raku-bot> <Kaiepi> pretty much

[11:18] <discord-raku-bot> <Kaiepi> repeated `STORE`s clobber any existing containers within the array, but the wrapper remains

[11:21] <discord-raku-bot> <Nemokosch> also, from what I understand (and iirc lizmat told me this), Arrays can not be decontainerized

[11:21] <discord-raku-bot> <Kaiepi> the `Array` is the container and the value

[11:21] <discord-raku-bot> <Nemokosch> they are like bundled

[11:25] <discord-raku-bot> <Nemokosch> a mnemonic/mental aid to it: Scalars do have one identity while Arrays are inherently divided into pieces

[11:25] <discord-raku-bot> <Nemokosch> I always imagine something like this for an array:

[11:25] <discord-raku-bot> <Nemokosch> (array as in the container)

[11:26] <lizmat> note you *can* put an Array into a container

[11:26] <lizmat> but it will be considered a single object like any other object in a container

[11:26] <lizmat> m: my $a = [1,2,3]; .say for $a

[11:26] <camelia> rakudo-moar 90709d533: OUTPUT: «[1 2 3]␤»

[11:27] <discord-raku-bot> <Nemokosch> a grid is made a grid by its cells, it's not a thing on its own

[11:27] <discord-raku-bot> <Nemokosch> - unless, of course, you put the whole thing into a Scalar container 😄

[11:27] <discord-raku-bot> <Nemokosch> okay, you were faster 😛

[11:27] <lizmat> :-)

[11:29] <discord-raku-bot> <Nemokosch> the more time you spend with it, the more logically sound it becomes

[11:31] <discord-raku-bot> <Nemokosch> but a thorough demostration of it is still on my wanted list

[11:31] <discord-raku-bot> <Nemokosch> yes, I know that article and it did help

[11:31] <discord-raku-bot> <Nemokosch> but still, "more more more"

[12:15] <discord-raku-bot> <zacque> Hang on, let me digest your messages 😄

[12:29] <discord-raku-bot> <zacque> Okay, so without `lazy`, the RHS (`gathered`) is evaluated eagerly by calling `STORE` on it.  `STORE` constructs an `Array` of `Scalar` elements. In this case, the `Scalar` elements are actually `Array` elements (containing other `Scalar` elements), so the result is an `Array` of `Scalar` `Array` of `Scalar` something. Finally, this result is assigned to the variable `@pascal`.

[12:31] <discord-raku-bot> <zacque> Ermm, so each of the `Scalar` elements in an `Array` has unique identity? That's why you said it's "different Scalar containers"

[12:31] <discord-raku-bot> <Nemokosch> I think you are on the right track

[12:31] <discord-raku-bot> <zacque> So, that why I got this: ```raku

[12:31] <discord-raku-bot> <zacque> sub MAIN(Int:D $rows where $rows >= 3) {

[12:31] <discord-raku-bot> <zacque>     my @pascal = (pascal-sequence $rows);

[12:31] <discord-raku-bot> <zacque>     say [===] @pascal; # Output: True

[12:31] <discord-raku-bot> <zacque>     say [=:=] @pascal; # Output: False

[12:32] <discord-raku-bot> <zacque> }

[12:32] <discord-raku-bot> <zacque> ```

[12:55] *** saint- joined
[13:36] *** razetime_ left
[13:50] *** razetime joined
[14:54] *** jgaz joined
[17:00] *** razetime left
[19:24] *** jgaz left
[20:54] *** sivoais left
[20:54] *** sivoais joined
[22:16] *** MasterDuke joined
