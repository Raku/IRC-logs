[00:17] <discord-raku-bot> <stevied#8273> is there a way to type constrain the elemens in a List that is passed to a method?

[00:17] <discord-raku-bot> <stevied#8273> do I do some kind of for loop in the signature?

[00:29] <discord-raku-bot> <stevied#8273> ok, this worked: `List:D $items where { $items.all ~~ Str}`

[01:16] *** Khwarizmi joined
[01:16] <Khwarizmi> hello there, I have a few questions

[01:40] <discord-raku-bot> <readyready15728#6892> Switched over from IRC

[01:41] <discord-raku-bot> <readyready15728#6892> So anyway, my first question is how familiar should I be with Perl 5 if I want to do interop with CPAN packages

[01:41] <discord-raku-bot> <readyready15728#6892> CPAN is still way huger than Raku's equivalent

[01:42] *** Khwarizmi left
[02:03] <SmokeMachine> You shouldn‚Äôt need to be familiar with Perl‚Ä¶ only for translating the module usage to Raku‚Ä¶

[02:10] <SmokeMachine> Khwarizmi: üëÜ

[03:16] *** deoac joined
[03:16] *** deoac left
[03:20] *** deoac26 joined
[04:00] *** deoac26 left
[05:59] *** frost joined
[07:04] *** frost left
[07:11] *** frost joined
[07:44] *** kjp left
[07:51] *** kjp joined
[11:39] *** frost left
[12:29] *** frost joined
[13:59] *** frost left
[16:33] <discord-raku-bot> <stevied#8273> how do I loop over a hash sorted by key? I'm trying `for self.items.sort.kv -> $k, $v ` but it's not working

[16:36] <sienet_ja_LSD[m]> I have done at least for %hash.sort( { .keys })>>.kv -> ($k, $v)

[17:45] <discord-raku-bot> <Nemokosch#9980> I'm not at a (proper) keyboard but still... there must be a better way

[19:10] <discord-raku-bot> <Util#9950> <@563790557831495691> `self.items.sort.kv` does not work, because .sort is returning a list of Pair objects, so `.kv` is operating on a List, and you get (0, FirstPair, 1, SecondPair ...).

[19:10] <discord-raku-bot> <Util#9950> `%hash.sort( { .keys })` , I think is a typo; `.key` is needed, not `.keys`.

[19:10] <discord-raku-bot> <Util#9950> Also, the default .sort automatically sorts a List of Pairs by .key first.

[19:10] <discord-raku-bot> <Util#9950> The syntax for unpacking a Pair is awkward and hard to remember, but it is optimal for iterating over a sorted hash:

[19:10] <discord-raku-bot> <Util#9950> `for %hash.sort -> ( :key($some_variable_for_key), :value($some_variable_for_value) ) { ... }`

[19:10] <discord-raku-bot> <Util#9950> Also fine (and easier to remember) is:

[19:12] <discord-raku-bot> <Util#9950> `for %hash.sort { my ($k,$v) = .kv; ... }`

[19:18] <discord-raku-bot> <Util#9950> `%hash.sort¬ª.kv -> ($k, $v) {...}` is also a fine solution; I have avoided it in code that beginners might use, due to the advanced concepts in hyper-dot method combined with easily-confused use of .kv to mean "unpack a single Pair" instead of "get many keys and values from a single `thing` like a Hash or Array or List".

[19:33] <discord-raku-bot> <Util#9950> `%hash.sort -> (:$key, :$value) {...}`

[19:33] <discord-raku-bot> <Util#9950> Oh! If you don't mind using exactly $key and $value as variable names, you can do this: `%hash.sort -> (:$key, :$value) {...}`

[19:34] <discord-raku-bot> <stevied#8273> Ah yes. The latter with the hyper operator is what I have used in the path. That is more understandable to me. For whatever reason I couldn‚Äôt come up with it.

[19:43] <discord-raku-bot> <Nemokosch#9980> (:$key, :$value) isn't bad either for flexibility

[19:55] <discord-raku-bot> <Util#9950> <@297037173541175296> Indeed so. Also, when the loop is small, and especially when key and value are accessed no more than once each, I often don't unpack them at all, leaving them in $_ :

[19:55] <discord-raku-bot> <Util#9950> for %hash.sort { do_foo_with(.key); do_bar_with(.value); }

[20:04] <discord-raku-bot> <Nemokosch#9980> üëç

[20:08] <discord-raku-bot> <stevied#8273> ok, got another little problem: I've got a callable in an attribute: `has &.action;`

[20:08] <discord-raku-bot> <stevied#8273> i'm trying to execute the callable with $obj.action but that doesn't seem to work

[20:10] <discord-raku-bot> <Util#9950> <@563790557831495691> Does this work?   `$obj.action();`

[20:10] <discord-raku-bot> <stevied#8273> doesn't look like it

[20:10] <discord-raku-bot> <stevied#8273> the action is just a simple one: `action => { say 'action' }`

[20:14] <discord-raku-bot> <stevied#8273> the raw dump of the object:

[20:14] <discord-raku-bot> <stevied#8273> ```

[20:14] <discord-raku-bot> <stevied#8273> Simple::Option.new(display-string => "Option 1", option-number => 1, submenu => Simple::Menu.new(menuID => 2, option-format => "\%d - \%s", selection => Str, validated-selection => Str, option-separator => "\n", prompt => Array[Str].new("\nMake selection: "), error-msg => "\nSorry, invalid entry. Try again. ", options => {"1" => Simple::Option.new(display-string => "one", option-number => 1, submenu =

[20:14] <discord-raku-bot> <stevied#8273> -> ;; $_? is raw = OUTER::<$_> { #`(Block|4385121823648) ... }

[20:14] <discord-raku-bot> <stevied#8273> ```

[20:14] <discord-raku-bot> <stevied#8273> the action appears to be there

[20:16] <MasterDuke> m: class A { has &.a = -> { say "action" } }; A.new.a()()

[20:16] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´action‚ê§¬ª

[20:18] <discord-raku-bot> <stevied#8273> hmmm

[20:18] <MasterDuke> m: class A { has &.a = -> { say "action" } }; my &b = A.new.a(); b()¬†¬† # making it a little more obvious what's happening

[20:18] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´action‚ê§¬ª

[20:19] <MasterDuke> m: class A { has &.a = -> { say "action" } }; my &b = A.new.a; b()¬†¬† # first set of parens aren't needed this way

[20:19] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´action‚ê§¬ª

[20:22] <discord-raku-bot> <stevied#8273> ok, that helped

[20:25] <discord-raku-bot> <stevied#8273> yeah, needed the doubled parens

[20:25] <discord-raku-bot> <stevied#8273> thanks!

[20:25] <MasterDuke> np

[20:26] <discord-raku-bot> <stevied#8273> alright, cool. I think I'm ready to drop an honest to god useful module to raku.land

[20:27] <discord-raku-bot> <stevied#8273> thanks for everyone's help!

[20:27] <discord-raku-bot> <Util#9950> So, instead of `$obj.action()`, you can just add a dot: `$obj.action.();`.  Cool!

[20:28] <discord-raku-bot> <stevied#8273> https://gist.github.com/sdondley/a5bdfc368f0e81a96a90eac887d9b7cf

[20:28] <discord-raku-bot> <Nemokosch#9980> Why was the double paren needed though?

[20:28] <discord-raku-bot> <stevied#8273> there it is! behold!

[20:29] <discord-raku-bot> <Util#9950> <@297037173541175296> A plain `$obj.action()` was just like `$obj.action`;  the parens were part of the method call.

[20:29] <discord-raku-bot> <Nemokosch#9980> Well, why isn't it just a method call, really

[20:30] <MasterDuke> it was, to get the callable. to call the callable requires another step though

[20:30] <discord-raku-bot> <Nemokosch#9980> It's more like a method than a higher order function...

[20:30] <discord-raku-bot> <Util#9950> Adding another set of parens, or placing a dot between action and parens, means that the final set of parens is an parameterless call to whatever sub is pointed to by the the executed code-so-far.

[20:31] <discord-raku-bot> <Nemokosch#9980> So ()() is _not_ two consecutive calls?

[20:32] <discord-raku-bot> <Util#9950> First one is running `action` to get the contents of the `&.action` attribute. Second `()` is a call to that code.

[20:33] <discord-raku-bot> <Nemokosch#9980> The first part is confusing

[20:34] <discord-raku-bot> <stevied#8273> I was surpised to see there were no modules in raku.land for generating menus. hopefully people find this useful

[20:34] <discord-raku-bot> <Nemokosch#9980> Is the first function call for any property?

[20:35] <discord-raku-bot> <Util#9950> If that is not what is wanted, you can change the way the `action` method works: `has &!.action; method action () { &!.action.() }`

[20:35] <discord-raku-bot> <Util#9950> Then, `$obj.action`, with or without parens, will call whatever sub is stored in &!action, and the outside world cannot get a pointer to the sub itself.

[20:35] <discord-raku-bot> <Nemokosch#9980> If you want to access a $.var, does it also boil down to a function call?

[20:37] <discord-raku-bot> <Util#9950> <@297037173541175296> From outside the class, if `var` is a public attribute, then the *method* call (not a sub) of `$obj.var` retrieves the contents of that attribute. So, yes, if I understood your question.

[20:39] <discord-raku-bot> <Nemokosch#9980> So the first call is for the property resolution and the second call is the actual function call

[20:39] <discord-raku-bot> <Nemokosch#9980> This makes sense eventually

[20:39] *** cine joined
[20:41] <discord-raku-bot> <Util#9950> <@297037173541175296> Yes, exactly.

[20:44] <discord-raku-bot> <Nemokosch#9980> üéâ

[20:47] *** cine left
[21:10] <discord-raku-bot> <stevied#8273> https://github.com/sdondley/MenuSimple/blob/main/Menu-Simple.iml

[21:10] <discord-raku-bot> <stevied#8273> is that file generated by raku or comma?

[21:10] <discord-raku-bot> <stevied#8273> it's an *iml file

[21:12] <discord-raku-bot> <stevied#8273> looks like it's from intellij. Should I keep it out of the repo?

[21:29] <MasterDuke> yeah, i've added *.iml to my .gitignore

[21:43] <discord-raku-bot> <stevied#8273> ok, thanks

[21:45] <discord-raku-bot> <stevied#8273> ok, now to write the docs. I guess it's time to look to see if there's any automation tools for that that might speed things up. Anything out there?

[21:49] <discord-raku-bot> <stevied#8273> i've used mi6 in the past.

[21:49] <discord-raku-bot> <stevied#8273> I think that generated a README from the docs.

[21:50] <discord-raku-bot> <stevied#8273> i probably should have init'ed the module with that instead of comma

[23:41] *** lucs left
[23:46] *** lucs joined
