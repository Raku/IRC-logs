[01:30] *** m_athias left
[01:31] *** m_athias joined
[02:31] *** razetime joined
[02:56] *** Kaipei joined
[02:57] *** Kaiepi left
[03:03] *** Kaiepi joined
[03:05] *** Kaipei left
[03:21] *** Kaiepi left
[03:55] *** razetime left
[04:49] *** razetime joined
[05:21] *** Kaiepi joined
[05:23] *** frost joined
[05:54] *** deoac left
[07:04] *** razetime left
[07:05] *** razetime joined
[07:10] *** razetime left
[07:26] *** razetime joined
[07:30] *** razetime_ joined
[07:40] *** razetime left
[07:40] *** razetime_ left
[11:55] *** frost left
[12:27] *** deoac joined
[15:20] <deoac> Is there any way to turn off autovivication?  Especially with regard to hash keys?

[15:22] <lizmat> make it a Map ?

[15:23] <lizmat> m: my %m is Map = a => 42, b => 666;

[15:23] <camelia> rakudo-moar 10feda116: ( no output )

[15:23] <lizmat> m: my %m is Map = a => 42, b => 666; dd %m

[15:23] <camelia> rakudo-moar 10feda116: OUTPUT: «Map.new((:a(42),:b(666)))␤»

[15:27] <deoac> Good idea, but the values need to be mutable.

[15:28] *** razetime joined
[15:28] *** razetime_ joined
[15:28] <deoac> Too many of my bugs are caused by a mistake in the key.

[15:29] <lizmat> One of my Perl ports has that functionality, I think

[15:29] *** razetime left
[15:29] *** razetime_ left
[15:30] *** razetime joined
[15:42] <lizmat> https://raku.land/zef:lizmat/Hash::Restricted   deoac 

[17:37] *** razetime left
[19:11] <deoac> m: my $x='42'; $x = +$x; say $x.^name;

[19:11] <camelia> rakudo-moar 10feda116: OUTPUT: «Int␤»

[19:12] <deoac> m: my $x='Foo'; $x = +$x; say $x.^name;

[19:12] <camelia> rakudo-moar 10feda116: OUTPUT: «Failure␤»

[19:12] <deoac> How can I get this code to work without a Failure that I need to CATCH?

[19:15] <discord-raku-bot> <Nemokosch> the "catch" (haha) is that you don't necessarily need to catch Failures

[19:15] <discord-raku-bot> <Nemokosch> they don't throw if you coerce them to Bool for example

[19:15] <discord-raku-bot> <Nemokosch> or you can use a try prefix on the expression that might return a Failure - it will turn them into Nil's

[19:16] <deoac> That is, I don't know the contents of $x beforehand.  If it's Numeric, I want to convert it to a number.

[19:16] <deoac> What do you mean by a prefix?

[19:17] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/statement-prefixes#index-entry-try_(statement_prefix)-try

[19:18] <discord-raku-bot> <Nemokosch> m: my $x='Foo'; $x //= try +$x; say $x.^name;

[19:19] <deoac> using try (w/o. CATCH!) did the trick!  Thank you

[19:19] <discord-raku-bot> <Nemokosch> m: my $x='42'; $x //= +$x; say $x.^name;

[19:19] <discord-raku-bot> <Nemokosch> oops

[19:19] <discord-raku-bot> <Nemokosch> m: my $x='42'; $x //= try +$x; say $x.^name;

[19:19] <discord-raku-bot> <Nemokosch> I think this can work, for example

[19:19] <discord-raku-bot> <Nemokosch> // for nullish coalescing (like ?? in modern Javascript), try to silence the error

[19:19] <discord-raku-bot> <Nemokosch> also, I messed up the order

[19:20] <discord-raku-bot> <Nemokosch> $x = try +$x // $x

[19:20] <deoac> Is there a more 'rakuish' way of $x = +$x?  To avoid the repetition?

[19:20] <discord-raku-bot> <Nemokosch> might need parens as well

[19:20] <deoac> `try $x = +$x;`  worked perfectly

[19:21] <discord-raku-bot> <Nemokosch> $x .= Int probably

[19:21] <discord-raku-bot> <Nemokosch> well fair enough 😅 overthinking is a hell of a drug

[19:27] <deoac> $x .= Int probably. <-- that's great to know.  Thanks again.

[19:30] <discord-raku-bot> <Nemokosch> 🍬

[19:32] *** lizmat left
[19:33] *** lizmat joined
[19:36] <discord-raku-bot> <gfldex> <@297037173541175296> for the last 6 month or so I avoid the term "variable" in my blog and use "symbol", "value" or "container". I have come to the conclusion that any Raku tutorial that doesn't do the same, will be misleading. Which means all of them.

[19:36] <discord-raku-bot> <Nemokosch> 😂

[19:36] <discord-raku-bot> <Nemokosch> I mean, makes sense some way

[19:37] <guifa_> Actually

[19:37] <guifa_> .Numeric 

[19:38] <discord-raku-bot> <Nemokosch> perhaps I have said this already but if you come from any language remotely similar to C, "variable" will mean what is basically "scalar container" in Raku

[19:38] <discord-raku-bot> <Nemokosch> ^ fair

[19:38] <discord-raku-bot> <Nemokosch> I routinely forget about fractionals because I basically never use them...

[19:42] <discord-raku-bot> <gfldex> I disagree. C-like languages only have binding. They don't make the distinction between assignment and binding as Raku does. So as soon as you hit Nil, that mental picture breaks down. Containers are objects with a fairly special interface, variables in other languages are much simpler.

[19:44] <discord-raku-bot> <Nemokosch> C-like languages don't have binding, rather. There is only passing-by-value, everything is copied

[19:44] <discord-raku-bot> <Nemokosch> C++ is essentially built around dealing with these constraints

[19:47] <discord-raku-bot> <Nemokosch> I also don't get what about "hitting Nil"; in Raku there is both binding and assignment so that doesn't say a thing, in those languages, even if there is something "Nil-ish", it's just a special value, something you can... copy

[19:54] <discord-raku-bot> <gfldex> What I meant is, that for a Raku beginner, Nil is confusing.

[20:15] <discord-raku-bot> <Nemokosch> that's for sure 😅

