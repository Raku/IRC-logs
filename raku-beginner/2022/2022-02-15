[00:34] <discord-raku-bot> <Nemokosch#9980> how can I define a switch with sub MAIN?

[00:34] <discord-raku-bot> <Nemokosch#9980> you know, something like --amend for git commit

[00:36] <discord-raku-bot> <Nemokosch#9980> hm, Bool:D :$switch will do the trick?

[00:37] <discord-raku-bot> <Nemokosch#9980> I mean, I want a multi actually, the switch would have a clause

[00:40] <discord-raku-bot> <Yeuph#9974> So switching the sigil from $ to % worked, though I don't understand why.

[00:49] <discord-raku-bot> <Yeuph#9974> Hmmm, the words I'm storing in the textfile are duplicating in the set.

[00:50] <discord-raku-bot> <Yeuph#9974> kinda was hoping Raku woulda been smart enough to figure out not to do that on it's own - because *set*

[00:51] <discord-raku-bot> <Yeuph#9974> I guess I need to add some condition check when writing to the textfile to not duplicate words?

[02:05] <discord-raku-bot> <Rogue#2017> There should not be duplicates in a set

[02:05] <discord-raku-bot> <Rogue#2017> can you post your most recent code @Yeuph#9974 ?

[02:05] <discord-raku-bot> <Yeuph#9974> my %SetText is SetHash;

[02:05] <discord-raku-bot> <Yeuph#9974> %SetText.set(slurp "SetText.txt");

[02:05] <discord-raku-bot> <Yeuph#9974> my $InputWord;

[02:05] <discord-raku-bot> <Yeuph#9974> repeat {

[02:05] <discord-raku-bot> <Yeuph#9974>     $InputWord = prompt 'Add word to %SetText: ';

[02:05] <discord-raku-bot> <Yeuph#9974>     %SetText.set($InputWord);

[02:05] <discord-raku-bot> <Yeuph#9974>     spurt "SetText.txt", %SetText;

[02:05] <discord-raku-bot> <Yeuph#9974> } while $InputWord ne "I'm done";

[02:05] <discord-raku-bot> <Yeuph#9974> %SetText.unset("I'm done");

[02:05] <discord-raku-bot> <Yeuph#9974> %SetText.say;

[02:06] <discord-raku-bot> <Yeuph#9974> at the end you can see the "%SetText.say"

[02:07] <discord-raku-bot> <Yeuph#9974> it'll list duplicate words in the %SetText and also the textfile (SetText.txt)

[02:07] <discord-raku-bot> <Yeuph#9974> it'll list duplicate words in the %SetText and also store duplicates in the textfile (SetText.txt)

[02:09] <discord-raku-bot> <Rogue#2017> Hm, one problem I see is that you're using the result of `slurp` in the first call to `.set`

[02:09] <discord-raku-bot> <Rogue#2017> slurp returns the entire contents of the file as a single string

[02:11] <discord-raku-bot> <Rogue#2017> you want to split that string on space

[02:12] <discord-raku-bot> <Rogue#2017> so something like `%SetText.set: (slurp 'SetText.txt').split(/\s/)`

[02:14] <discord-raku-bot> <Rogue#2017> you're getting what *appear* to be duplicates because you have a string in there which looks like multiple words

[02:14] <discord-raku-bot> <Yeuph#9974> ahh

[02:16] <discord-raku-bot> <Yeuph#9974> ok, so I was just storing some string of words as a single element in the set; and any new words as a new element (and a new string)

[02:16] <discord-raku-bot> <Rogue#2017> yep

[02:16] <discord-raku-bot> <Yeuph#9974> I'll do your fix

[02:16] <discord-raku-bot> <Yeuph#9974> but its worth checking to see if 2 exact strings will duplicate

[02:16] <discord-raku-bot> <Yeuph#9974> because *science*

[02:16] <discord-raku-bot> <Rogue#2017> yeah it's always good to verify even what you really strong assume will work

[02:16] <discord-raku-bot> <Rogue#2017> yeah it's always good to verify even what you really strongly assume will work

[02:18] <discord-raku-bot> <Rogue#2017> because the moment you don't is the moment you happen to have overlooked something :P

[02:18] <discord-raku-bot> <Rogue#2017> or so it often seems

[02:20] *** frost joined
[02:22] <discord-raku-bot> <Yeuph#9974> well its still storing identical strings as duplicates (before your split code anyway)

[02:22] <discord-raku-bot> <Yeuph#9974> kinda curious

[02:22] <discord-raku-bot> <Yeuph#9974> ðŸ¤·

[02:26] <discord-raku-bot> <Yeuph#9974> *split* works!

[02:26] <discord-raku-bot> <Yeuph#9974> ty ty sir

[02:27] <discord-raku-bot> <Yeuph#9974> or sir-ette

[02:28] <discord-raku-bot> <Rogue#2017> you're welcome

[02:28] <discord-raku-bot> <Rogue#2017> and sir is right haha

[03:06] *** frost left
[04:56] *** frost joined
[07:19] *** frost left
[07:59] *** laidback_01 left
[08:01] *** immediate joined
[08:02] *** laidback_01 joined
[08:09] *** laidback_01 left
[08:39] *** laidback_01 joined
[08:48] *** frost joined
[09:08] *** frost left
[09:10] *** dakkar joined
[10:12] *** Guest53 joined
[10:12] *** Guest53 left
[10:14] <discord-raku-bot> <Nemokosch#9980> Is there a way to get around the recursive application of hyper? I don't think I ever wanted that behavior; I usually want to pass a list to the operator

[10:14] <discord-raku-bot> <Nemokosch#9980> I mean, yes, probably I can keep using Z

[10:22] *** immediate left
[14:03] *** discord-raku-bot left
[14:04] *** discord-raku-bot joined
[16:37] *** laidback_01 left
[17:35] *** dakkar left
[21:11] *** discord-raku-bot left
[21:12] *** discord-raku-bot joined
[21:57] *** qorg11 left
[22:16] *** qorg11 joined
