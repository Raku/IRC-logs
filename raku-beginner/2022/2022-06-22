[02:27] *** frost joined
[04:14] *** Kaipei joined
[04:17] *** Kaiepi left
[05:18] *** Kaipei left
[05:50] <discord-raku-bot> <Nemokosch#9980> Does this really exist?

[05:59] <discord-raku-bot> <Nemokosch#9980> 1. TIL Raku/user-experience repo

[05:59] <discord-raku-bot> <Nemokosch#9980> 2. The single argument rule terminology doesn't make a lot of sense here because that "single argument" is not an iterable anyway...

[05:59] <discord-raku-bot> <Nemokosch#9980> 3. Having said that, qw and even qqw is for literals mainly. Why don't you use .words if you don't know how many elements you'll get?

[06:06] <discord-raku-bot> <Nemokosch#9980> m: dd 'jajca'.words

[06:06] <discord-raku-bot> <Nemokosch#9980> a Seq, as you can see

[06:07] <discord-raku-bot> <Nemokosch#9980> it turns into a list if you assign it to a @variable

[07:06] *** dakkar joined
[07:08] *** frost left
[08:16] *** Kaipei joined
[08:17] *** discord-raku-bot left
[08:17] *** discord-raku-bot joined
[08:53] *** discord-raku-bot left
[08:53] *** discord-raku-bot joined
[09:13] <discord-raku-bot> <Zephyr#8815> is there a way to parse a regex pattern from a string, other than using eval?

[09:15] <discord-raku-bot> <Nemokosch#9980> from what I know, no

[09:15] <discord-raku-bot> <Nemokosch#9980> fingers crossed for RakuAST

[09:17] <discord-raku-bot> <Zephyr#8815> I guess https://github.com/edumentab/p6-ecma262regex comes close to what I'm looking for

[09:17] <discord-raku-bot> <Zephyr#8815> gonna be using that for now

[09:46] <discord-raku-bot> <Zephyr#8815> actually, that won't cut it

[09:46] <discord-raku-bot> <Zephyr#8815> is there a way to use that now?

[09:48] <discord-raku-bot> <Nemokosch#9980> Probably you could compile it at least but I'm absolutely not knowledgeable at this

[11:07] *** Nemokosch joined
[11:10] *** Nemokosch left
[12:07] <discord-raku-bot> <Anton Antonov#7232> You might be able to use one of DrForr packages for parsing Raku programs.

[12:09] <discord-raku-bot> <Anton Antonov#7232> See here: https://github.com/drforr/perl6-Perl6-Parser

[12:13] <discord-raku-bot> <Zephyr#8815> isn't raku's regex part of the syntax though, not sure if it can be dynamically constructed even from a parsed AST

[12:36] <discord-raku-bot> <Anton Antonov#7232> I do not see the problem with that. Ideally, this can be just verified with suitable examples / experiments.

[13:25] <discord-raku-bot> <stevied#8273> I'm thinking it might be NQP

[13:27] <discord-raku-bot> <Nemokosch#9980> what would it do?

[13:29] <discord-raku-bot> <stevied#8273> ok, it's not NQP. See https://stackoverflow.com/a/72704382/1641112

[13:30] <discord-raku-bot> <stevied#8273> and to my surprise, it even handles a list of arrays without a problem: https://www.reddit.com/r/rakulang/comments/vhmef9/comment/id8n7up/?utm_source=reddit&utm_medium=web2x&context=3

[13:31] <discord-raku-bot> <stevied#8273> I think the postcircumfix: bit is a method call

[13:32] <discord-raku-bot> <stevied#8273> and the <{; }> bit is the argument. but I'm not sure.

[13:33] <discord-raku-bot> <Nemokosch#9980> this is like the comma-separated dimensional thing

[13:33] <discord-raku-bot> <stevied#8273> what I did in 20 lines of code can be done in about 20 characters

[13:33] <discord-raku-bot> <stevied#8273> yeah. i haven't played with those separators at all

[13:33] <discord-raku-bot> <Nemokosch#9980> but I didn't know it's like an operator

[13:33] <discord-raku-bot> <stevied#8273> i've only used them playing around with lists

[13:34] <discord-raku-bot> <Nemokosch#9980> like you know, $asd[1][2][3] can be written as $asd[1;2;3]

[13:34] <discord-raku-bot> <Nemokosch#9980> or $asd[||<1 2 3>], that works already iirc

[13:34] <discord-raku-bot> <stevied#8273> ok, yeah, I didn't know htat

[13:34] <discord-raku-bot> <Nemokosch#9980> what I didn't know is that it works with hashes and it's implemented as an operator

[13:34] <discord-raku-bot> <stevied#8273> I mean I read it once. but haven't used it and forgot about it

[13:36] <discord-raku-bot> <Nemokosch#9980> I really advise the weekly challenges

[13:36] <discord-raku-bot> <Nemokosch#9980> they are usually pretty small tasks but they almost always require some sort of list manipulation 😄

[13:36] <discord-raku-bot> <stevied#8273> yeah, I still gotta get some more basics down before I start looking into them

[13:36] <discord-raku-bot> <stevied#8273> I'm writing a module that will help me write my own executable tutorials to learn raku.

[13:38] <discord-raku-bot> <stevied#8273> In the process of doing that, I get sidetracked learning more raku. 🙂

[13:38] <discord-raku-bot> <stevied#8273> hopefully by the end of the year I will crack into an intermediate level of proficiency

[14:19] <discord-raku-bot> <stevied#8273> what's the surefire way for testing the type of an object?

[14:19] <discord-raku-bot> <stevied#8273> like if I want to test if an object is `Hash`. I've been using .`^name` and testing it against a string

[14:19] <discord-raku-bot> <stevied#8273> but I'm not sure if that's the right way to do it

[14:21] <discord-raku-bot> <stevied#8273> should I be using smartmatch instead?

[14:29] <discord-raku-bot> <Nemokosch#9980> that's pretty clean

[14:29] <discord-raku-bot> <stevied#8273> what is? .^name or smartmatch?

[14:29] <discord-raku-bot> <Nemokosch#9980> smartmatch

[14:29] <discord-raku-bot> <stevied#8273> so smartmatch is the preferred way?

[14:34] <discord-raku-bot> <Nemokosch#9980> I think smartmatch uses .WHAT

[14:34] <discord-raku-bot> <Nemokosch#9980> It's legit but it will match for undefined variables of the given type, too

[14:35] <discord-raku-bot> <Morfent#9811> depends

[14:35] <discord-raku-bot> <Morfent#9811> `.WHAT =:= .WHAT` is exact, `~~` against a type object will deal with subtypes

[14:35] <discord-raku-bot> <Morfent#9811> there's `Metamodel::Primitives.is_type`, but it's rather niche

[14:38] <discord-raku-bot> <Morfent#9811> it and the type object smartmatch are both `nqp::istype`, just one doesn't have multiple dispatch involved

[14:38] <discord-raku-bot> <stevied#8273> `=:=`? what the hell is that?

[14:38] <discord-raku-bot> <Morfent#9811> think of it like comparing pointers

[14:38] <discord-raku-bot> <Morfent#9811> only the exact same object can match

[14:38] <discord-raku-bot> <stevied#8273> why isn't `^.name` exact?

[14:40] <discord-raku-bot> <Morfent#9811> `.^name` is just a string in a `.HOW`

[14:40] <discord-raku-bot> <Morfent#9811> you can change it with `.^set_name`

[14:40] <discord-raku-bot> <stevied#8273> ok, so it shouldn't be relied upon then

[14:40] <discord-raku-bot> <stevied#8273> ok, so if I wanted to find out an object was exactly a `Hash`, what would I do?

[14:42] <discord-raku-bot> <stevied#8273> `$obj.WHAT =:= .WHAT`?

[14:42] <discord-raku-bot> <stevied#8273> `$obj.WHAT =:= .HashWHAT`?

[14:42] <discord-raku-bot> <Morfent#9811> `Hash` is a bit weird, you'll need the smartmatch

[14:42] <discord-raku-bot> <stevied#8273> `$obj.WHAT =:= .Hash.WHAT`?

[14:42] <discord-raku-bot> <Morfent#9811> unless you don't want to worry about typed hashes

[14:42] <discord-raku-bot> <stevied#8273> `$obj.WHAT =:= Hash.WHAT`?

[14:42] <discord-raku-bot> <Nemokosch#9980> I think for all intents and purposes, the smartmatch is good

[14:44] <discord-raku-bot> <stevied#8273> ok, so now my next question:

[14:46] <discord-raku-bot> <stevied#8273> ```

[14:46] <discord-raku-bot> <stevied#8273> sub recurse(%hash) {

[14:46] <discord-raku-bot> <stevied#8273>     for %hash.sort {

[14:46] <discord-raku-bot> <stevied#8273>         say .key;

[14:46] <discord-raku-bot> <stevied#8273>         say .value;

[14:46] <discord-raku-bot> <stevied#8273>         recurse .value if .value ~~ Hash;

[14:46] <discord-raku-bot> <stevied#8273>     }

[14:46] <discord-raku-bot> <stevied#8273> }

[14:46] <discord-raku-bot> <stevied#8273> ```

[14:46] <discord-raku-bot> <stevied#8273> so a simple recursive sub for a hash

[14:46] <discord-raku-bot> <stevied#8273> how do I raku-fy this?

[14:46] <discord-raku-bot> <stevied#8273> i'm gonna guess there's a more idiomatic way of doing this in raku

[14:50] <discord-raku-bot> <Nemokosch#9980> ~~just flatten it~~

[14:54] <discord-raku-bot> <Morfent#9811> usually when i want to smartmatch on a type like that multiple dispatch can handle it a little more cleanly

[14:54] <discord-raku-bot> <stevied#8273> ah, good idea

[14:54] <discord-raku-bot> <Nemokosch#9980> samewith

[14:57] <discord-raku-bot> <stevied#8273> so something along the lines of this:

[14:57] <discord-raku-bot> <stevied#8273> ```

[14:57] <discord-raku-bot> <stevied#8273> multi sub recurse($not-a-hash) {

[14:57] <discord-raku-bot> <stevied#8273> }

[14:57] <discord-raku-bot> <stevied#8273> multi sub recurse(Hash:D %hash) {

[14:57] <discord-raku-bot> <stevied#8273>     for %hash.sort {

[14:57] <discord-raku-bot> <stevied#8273>         say .key;

[14:57] <discord-raku-bot> <stevied#8273>         say .value;

[14:57] <discord-raku-bot> <stevied#8273>         recurse .value;

[14:57] <discord-raku-bot> <stevied#8273>     }

[14:57] <discord-raku-bot> <stevied#8273> }

[14:57] <discord-raku-bot> <stevied#8273> ```

[14:58] <discord-raku-bot> <stevied#8273> yeah, that opens up some interesting possibilities while keep the code clean

[14:59] <discord-raku-bot> <Nemokosch#9980> just decide when you want to make your calls on the data

[15:01] <discord-raku-bot> <Nemokosch#9980> I wonder...

[15:04] <discord-raku-bot> <Nemokosch#9980> maybe mutual recursion would be nice?

[15:04] <discord-raku-bot> <stevied#8273> what's that?

[15:05] <discord-raku-bot> <Nemokosch#9980> when two (or more?) functions call each other and that forms the recursion

[15:09] <discord-raku-bot> <Nemokosch#9980> or idk, maybe it's good this way, I'm not sure what would look good

[15:09] <discord-raku-bot> <stevied#8273> ok, well, not a big deal. i'm probably getting too overboard with it anyway. Keep it simple.

[15:21] <discord-raku-bot> <Nemokosch#9980> Meh, I hoped nextsame or nextwith would be usual functions

[15:21] <discord-raku-bot> <Nemokosch#9980> but they drop the control

[15:25] <discord-raku-bot> <Nemokosch#9980> ```perl

[15:25] <discord-raku-bot> <Nemokosch#9980> sub process-hash(%start) {

[15:25] <discord-raku-bot> <Nemokosch#9980>     .&process-pair for %start.sort;

[15:25] <discord-raku-bot> <Nemokosch#9980> }

[15:25] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair) {

[15:25] <discord-raku-bot> <Nemokosch#9980>     #common code handling the pair

[15:25] <discord-raku-bot> <Nemokosch#9980>     nextsame;

[15:25] <discord-raku-bot> <Nemokosch#9980> }

[15:25] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair where *.value ~~ Hash) {

[15:25] <discord-raku-bot> <Nemokosch#9980>     .value.&process-hash;

[15:25] <discord-raku-bot> <Nemokosch#9980> }

[15:25] <discord-raku-bot> <Nemokosch#9980> ```

[15:31] *** avuserow left
[15:32] *** avuserow joined
[15:35] *** dakkar left
[15:44] <discord-raku-bot> <Nemokosch#9980> ```perl

[15:44] <discord-raku-bot> <Nemokosch#9980> sub process-hash(%start) {

[15:44] <discord-raku-bot> <Nemokosch#9980>     .&process-pair for %start.sort;

[15:44] <discord-raku-bot> <Nemokosch#9980> }

[15:44] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair) {

[15:44] <discord-raku-bot> <Nemokosch#9980>     #common code handling the pair

[15:44] <discord-raku-bot> <Nemokosch#9980>     nextsame;

[15:44] <discord-raku-bot> <Nemokosch#9980> }

[15:44] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair where *.value ~~ Hash) {

[15:44] <discord-raku-bot> <Nemokosch#9980>     $pair.value.&process-hash;

[15:44] <discord-raku-bot> <Nemokosch#9980> }

[15:44] <discord-raku-bot> <Nemokosch#9980> ```

[15:48] <discord-raku-bot> <Nemokosch#9980> ```perl

[15:48] <discord-raku-bot> <Nemokosch#9980> sub process-hash(%start) {

[15:48] <discord-raku-bot> <Nemokosch#9980>     .&process-pair for %start.sort;

[15:48] <discord-raku-bot> <Nemokosch#9980> }

[15:48] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair) {

[15:48] <discord-raku-bot> <Nemokosch#9980>     #common code handling the pair

[15:48] <discord-raku-bot> <Nemokosch#9980>     nextsame;

[15:48] <discord-raku-bot> <Nemokosch#9980> }

[15:48] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair where { .value ~~ Hash }) {

[15:48] <discord-raku-bot> <Nemokosch#9980>     $pair.value.&process-hash;

[15:48] <discord-raku-bot> <Nemokosch#9980> }

[15:48] <discord-raku-bot> <Nemokosch#9980> ```

[15:53] <discord-raku-bot> <Nemokosch#9980> okay, fixed it

[15:53] <discord-raku-bot> <Nemokosch#9980> ```perl

[15:53] <discord-raku-bot> <Nemokosch#9980> sub process-hash(%start) {

[15:53] <discord-raku-bot> <Nemokosch#9980>     .&process-pair for %start.sort;

[15:53] <discord-raku-bot> <Nemokosch#9980> }

[15:53] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair where { True }) {

[15:53] <discord-raku-bot> <Nemokosch#9980>     #common code handling the pair

[15:53] <discord-raku-bot> <Nemokosch#9980>     nextsame;

[15:53] <discord-raku-bot> <Nemokosch#9980> }

[15:53] <discord-raku-bot> <Nemokosch#9980> multi process-pair($pair where { .value ~~ Hash }) {

[15:53] <discord-raku-bot> <Nemokosch#9980>     $pair.value.&process-hash;

[15:53] <discord-raku-bot> <Nemokosch#9980> }

[15:53] <discord-raku-bot> <Nemokosch#9980> ```

[15:54] <discord-raku-bot> <Nemokosch#9980> I had no better idea to force priority than to add a dummy clause...

[15:56] <discord-raku-bot> <Nemokosch#9980> this did work, though, so it's good for learning from it at the very least 😄

[19:19] <discord-raku-bot> <stevied#8273> ooh, just found out I can turn off ads for Raku pottery on google

[19:19] <discord-raku-bot> <stevied#8273> life changer

[19:21] <discord-raku-bot> <stevied#8273> i think the problem with doing fancy stuff like nextsame is that there's a good chance the next Raku developer who comes along and tries to read it is out of luck

[19:23] <discord-raku-bot> <stevied#8273> how do you do that little trick where if you pass a named paramter to a sub it defaults to true?

[19:23] <discord-raku-bot> <stevied#8273> can't figure it out

[19:54] <lizmat> :foo = True

[19:54] <lizmat> ?

[19:54] <lizmat> :$foo = True rather  :-)

[19:54] <lizmat> sub bar(:$foo = True) { }

[19:55] <lizmat> afk&

[19:56] <discord-raku-bot> <locria#8416> Is there a way to access identifier by name?

[19:58] <discord-raku-bot> <locria#8416> I was using `Inline::Perl`

[19:58] <discord-raku-bot> <stevied#8273> thanks. thought I tried that, though.

[19:58] <discord-raku-bot> <stevied#8273> maybe I was doing something else wrong

[19:58] <discord-raku-bot> <locria#8416> I want to get `&GLFW_XXXXXXX` with `XXXXX` as parameter

[19:58] <discord-raku-bot> <locria#8416> I want to get `&GLFW_XXXXXXX` with `XXXXX` as parameter in local scope

[19:58] <discord-raku-bot> <locria#8416> Don't want to use EVAL

[20:00] <discord-raku-bot> <stevied#8273> I think that's coming with AST

[20:00] <discord-raku-bot> <locria#8416> ```

[20:00] <discord-raku-bot> <locria#8416> use OpenGL::GLFW:from<Perl5> qw<:all>;

[20:00] <discord-raku-bot> <locria#8416> class ConstCaller {

[20:00] <discord-raku-bot> <locria#8416>     has $.prefix;

[20:00] <discord-raku-bot> <locria#8416>     method postcircumfix:«< >» (Str:D $name) {

[20:00] <discord-raku-bot> <locria#8416>         # FIXME

[20:00] <discord-raku-bot> <locria#8416>         # term:<$!prefix ~ '_' ~ $name>

[20:00] <discord-raku-bot> <locria#8416>         ...

[20:00] <discord-raku-bot> <locria#8416>     }

[20:00] <discord-raku-bot> <locria#8416> }

[20:00] <discord-raku-bot> <locria#8416> ```

[20:00] <discord-raku-bot> <Morfent#9811> something like `&::{"GLFW_$id"}`?

[20:00] <discord-raku-bot> <stevied#8273> oh, yeah, that'll work

[20:02] <discord-raku-bot> <Morfent#9811> may need the sigil on the rhs

[20:03] <discord-raku-bot> <Morfent#9811> oh `&::( )` is what i was thinking of

[20:04] <discord-raku-bot> <stevied#8273> yeah, was gonna say but wasn't 100% sure

[20:04] <discord-raku-bot> <locria#8416> Thanks it works

[20:06] <discord-raku-bot> <locria#8416> Is there a way to look up from caller's scope?

[20:06] <discord-raku-bot> <locria#8416> Is there a way to look up variable from caller's scope?

[20:10] <discord-raku-bot> <Morfent#9811> `CALLER::`

[20:10] <discord-raku-bot> <stevied#8273> * twigil

[20:11] <discord-raku-bot> <stevied#8273> https://docs.raku.org/language/variables#The_my_declarator

[20:11] <discord-raku-bot> <stevied#8273> To make new-location() print nowhere, make $location a dynamic variable using the * twigil. This twigil makes the compiler look up the symbol in the calling scope instead of the outer scope after trying the local scope.

[20:12] <discord-raku-bot> <Morfent#9811> dynamics are the more natural way to go about it

[20:14] <discord-raku-bot> <locria#8416> by I don't control the variables (they're from perl5)

[20:17] <discord-raku-bot> <locria#8416> ```

[20:17] <discord-raku-bot> <locria#8416> use OpenGL::GLFW:from<Perl5> qw<:all>;

[20:17] <discord-raku-bot> <locria#8416> use lib ".";

[20:17] <discord-raku-bot> <locria#8416> use ConstCaller;

[20:17] <discord-raku-bot> <locria#8416> constant GLFW = ConstCaller.new :package(OpenGL::GLFW) :prefix<GLFW>;

[20:17] <discord-raku-bot> <locria#8416> say GLFW<CONTEXT_VERSION_MAJOR>;

[20:17] <discord-raku-bot> <locria#8416> ```

[20:17] <discord-raku-bot> <locria#8416> How do I look up `OpenGL::GLFW::GLFW_PRESS` programatically?

[20:19] <discord-raku-bot> <locria#8416> How do I bind a "type object" like `OpenGL::GLFW` to a variable?

[20:21] <discord-raku-bot> <locria#8416> I can do the same with Raku module

[20:21] <discord-raku-bot> <locria#8416> `module B {}; my $b = B;`

[20:24] <SmokeMachine> lizmat: hi! A question about rak: should `class \s+ <([\w+]+ % “::”)> \s* “{“` highlight the whole line or only the class’ name? (I would expect only the class’ name)

[20:25] <discord-raku-bot> <locria#8416> I know why. It's a bug(?) in Inline::Perl.

[20:25] <SmokeMachine> I mean: `rak ‘/class \s+ <([\w+]+ % “::”)> \s* “{“/`

[20:27] <discord-raku-bot> <locria#8416> what's rak

[20:35] <SmokeMachine> https://raku.land/zef:lizmat/App::Rak

[20:36] <SmokeMachine> locria: 👆

[21:45] <lizmat> SmokeMachine: I guess it's an issue with the underlying .contains logic

[21:47] <lizmat> hmmm... or maybe with the highlighter module

[21:47] <lizmat> I'll look at it tomorrow... too tired now

[21:47] <lizmat> thanks for trial running rak  :-)

[21:47] <lizmat> fwiw, I found this to be the easiest way to do this on the command line:

[21:48] <lizmat> rak '/ class \s+ <( [\w+]+ % "::" )> \s* "\{" /

[21:49] <lizmat> also note that the "\{" willl probably cause any class statements that have a curly open on the next line, to be missed

[21:50] <lizmat> or any class like:

[21:50] <lizmat> class Foo is Bar {

[21:51] <lizmat> afk for sleep&

[22:01] <discord-raku-bot> <stevied#8273> where should I put xt tests that I don't want to run when the module is installed?

[22:02] <discord-raku-bot> <stevied#8273> i've got an xt folder and when I do mi6 test it still runs those tests

[22:06] <discord-raku-bot> <Anton Antonov#7232> I am not sure would like this alternative -- you use `skip`  and `skip-test`

[22:07] <discord-raku-bot> <Anton Antonov#7232> https://docs.raku.org/type/Test#sub_skip

[22:08] <discord-raku-bot> <stevied#8273> so there's no way to tell the distribution which tests to run?

[22:08] <discord-raku-bot> <Anton Antonov#7232> I am sorry, I am not familiar with testing ... 🙂

[22:15] <discord-raku-bot> <stevied#8273> np

[22:29] *** discord-raku-bot left
[22:30] *** discord-raku-bot joined
[22:32] <discord-raku-bot> <stevied#8273> ok, did this:

[22:32] <discord-raku-bot> <stevied#8273> ```

[22:32] <discord-raku-bot> <stevied#8273> if %*ENV<AUTHOR_TESTING> {

[22:32] <discord-raku-bot> <stevied#8273>     lives-ok { recurse %simple }, 'can recurse menu without dying';

[22:32] <discord-raku-bot> <stevied#8273> } else {

[22:32] <discord-raku-bot> <stevied#8273>     skip 'Skipping author test';

[22:32] <discord-raku-bot> <stevied#8273>     exit;

[22:32] <discord-raku-bot> <stevied#8273> }

[22:32] <discord-raku-bot> <stevied#8273> ```

[23:08] *** discord-raku-bot left
[23:08] *** gfldex left
[23:36] *** discord-raku-bot joined
[23:40] *** gfldex joined
