[02:11] *** melezhik joined
[02:17] *** melezhik left
[05:06] *** razetime joined
[05:07] <razetime> hm

[05:09] <razetime> I'd like to embed a language in raku where I can define functions and values in a regex like syntax

[05:09] <razetime> something like `my var = /<insert other language code here>/`

[05:09] <razetime> is there a way to do that?

[05:09] <razetime> the delimiters can be anything

[05:27] <guifa> razetime: yes

[05:27] <razetime> i'd like to know what i need to use to make that

[05:29] <guifa> you'd need to develop a slang (for "SubLANGuage").  Basically, you create an alternate for one of the tokens in the grammar and then you create your own AST based on the other language's code

[05:30] <guifa> The problem at the moment is that the internals are switching from Rakudo's QAST to a standardized RakuAST, but we're in the in-between stage right now, so to use the latter, you'd need to be on a special branch of Rakudo

[05:30] <razetime> ah, I see. So slang would work in the long term?

[05:31] <razetime> *wouldn't

[05:32] <guifa> The slang is how stuff works.  There's some minor stuff you would need to change, although for what you're doing (if you're okay with doing my &function = / your syntax /; ) you'd only need to change one or two lines when the switch to RakuAST happens

[05:33] <razetime> hm that sounds ok

[05:33] <razetime> where can i find docs on this?

[05:33] <razetime> searching "slang" and sublanguage on the docs site links to regexes

[05:38] <guifa> slangs aren't super well documented yet.  I've been woking to build out a few example projects in the meantime.  you'd probably want to look at the SQL slang, as it does something fairly similar to what you want

[05:41] <razetime> sure, will check it out.

[05:48] <guifa> https://gist.github.com/alabamenhu/22ec54745fd63e8565e3740216210ce1

[05:49] <guifa> that's the basics of how you could do it today without too much trouble.  I added in some comments on what would change with RakuAST (the latter is going to make this stuff *much* easier)

[05:50] <guifa> https://raku.land/zef:tony-o/Slang::SQL <-- that's the SQL slang

[05:51] <guifa> https://www.reddit.com/r/rakulang/comments/siypcz/raku_is_going_basic/ <-- this is probably the most advanced slang right now, and it uses RakuAST.  But shows off some of what can be done

[05:52] <guifa> (actually, it take that back, the most advanced slang is probably lizmat's P5 stuff, but that's an insanely gigantic complex beast)

[05:52] <razetime> P5 meaning processing?

[05:52] <razetime> thanks a lot!

[05:53] <guifa> P5 being Perl 

[05:53] <guifa> (Raku was originally called Perl 6, so P5 = Perl 5, or the previous version)

[05:55] <razetime> oh, i see

[05:59] <guifa> My recommendation would be to start small though.  Start with a function that will produce a callable function from a string, e.g.

[05:59] <guifa> sub foolang(Str $s) { … }

[05:59] <guifa> then you can say my &foo = foolang 'your language here';

[06:00] <guifa> and run the code with just 'foo' or 'foo()'

[06:02] <guifa> if you use a grammar to parse the string in your function, it will be very easy to transition to a slang

[06:05] <razetime> the builtin raku parsing lib?

[06:07] <guifa> correct.  Documentation for it is here.  https://docs.raku.org/language/grammars

[06:08] <guifa> Raku actually parses itself using its own grammar system

[06:08] <razetime> self hosting

[06:09] <razetime> the SQL library actually looks better than what i wanted to make

[06:15] * guifa is afk

[08:06] *** razetime left
[09:07] *** razetime joined
[09:17] <lizmat> guifa:  all of the P5 modules are just functionality, no grammars involved whatsoever

[13:58] *** discord-raku-bot left
[13:58] *** discord-raku-bot joined
[14:00] *** A26F64 joined
[14:33] <A26F64> I'm wondering what the best method of maintaining data on positional constructs might be.  I suspect that I do not properly understand containers and have therefore encountered unexpected behavior in some cases.

[14:33] <A26F64> For example: I'd like to push an array onto another. . . .

[14:33] <A26F64> m: my @p = 0,0; my @q; push @q, @p;      say @p, @q; @p[1]++; say @p, @q; # @p within @q also gets updated; not desired

[14:33] <camelia> rakudo-moar 006a920ca: OUTPUT: «[0 0][[0 0]]␤[0 1][[0 1]]␤»

[14:33] <A26F64> m: my @p = 0,0; my @q; push @q, @p.List; say @p, @q; @p[1]++; say @p, @q; # Desired result

[14:33] <camelia> rakudo-moar 006a920ca: OUTPUT: «[0 0][(0 0)]␤[0 1][(0 0)]␤»

[14:34] <A26F64> Is it best to coerce arrays to Lists in that way?

[14:34] <A26F64> Though I notice that .List and .list seem to behave differently.

[14:34] <A26F64> m: my @p = 0,0; my @q; push @q, @p.list; say @p, @q; @p[1]++; say @p, @q; # Not the same as @p.List?

[14:34] <camelia> rakudo-moar 006a920ca: OUTPUT: «[0 0][[0 0]]␤[0 1][[0 1]]␤»

[14:35] <A26F64> Even though the documentation (https://docs.raku.org/routine/List) says that .List "[c]oerces the invocant to List, using the list method."

[14:53] <razetime> m: say 1 + 2;

[14:53] <camelia> rakudo-moar 006a920ca: OUTPUT: «3␤»

[14:53] <razetime> cute

[14:53] *** razetime left
[15:24] <guifa> lizmat ah, I know the P5 regex was implemented as a full language in the braid, and I think I had a brain fart moment thinking the rest of the language was done that way for EVAL :lang<Perl5>

[15:28] * guifa never uses it though so never paid much attention :shrug:

[18:04] *** A26F64 left
[19:56] *** discord-raku-bot left
[19:56] *** discord-raku-bot joined
[20:10] *** MasterDuke left
[20:39] *** MasterDuke joined
[21:59] *** discord-raku-bot left
[21:59] *** discord-raku-bot joined
