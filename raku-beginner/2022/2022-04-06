[00:13] *** qorg11 left
[00:14] *** qorg11 joined
[07:05] *** dakkar joined
[08:31] *** destroycomputers left
[08:32] *** destroycomputers joined
[09:49] *** neither joined
[09:54] *** discord-raku-bot left
[09:54] *** discord-raku-bot joined
[10:21] *** wingfold joined
[10:56] *** razetime joined
[12:20] *** neither left
[13:10] *** razetime left
[13:25] *** razetime joined
[14:13] *** qorg11 left
[14:26] *** qorg11 joined
[15:06] *** razetime left
[15:20] *** neither joined
[15:20] *** razetime joined
[15:41] *** dakkar left
[16:00] *** razetime left
[17:21] *** zacts joined
[17:40] *** zacts left
[18:03] *** zacts joined
[18:11] *** zacts left
[19:12] *** wingfold left
[20:01] <neither> hi how can I make a public attribute of an object Nil in the class definition?

[20:02] <neither> aim is to signal null-ness of that attribute

[20:02] <neither> `has $.attr = Nil` triggers `Any` to be assigned

[20:02] <neither> and `has $.attr := Nil` isn't supposed to work I guess

[20:03] <neither> or should I do this some other way?

[21:24] *** jgaz joined
[21:30] *** jgaz left
[21:31] <MasterDuke> it has to be typed as `Mu`. e.g., `has Mu $.attr = Nil`

[21:32] <MasterDuke> otherwise assigning Nil sets something to its default value. and the default default is `Any`

[21:44] <discord-raku-bot> <Nemokosch#9980> isn't checking .defined a legitimate option, rather than checking for Nil?

[21:58] <discord-raku-bot> <gfldex#8222> <@297037173541175296> definedness and Nil are different answers to different questions.

[22:04] <neither> ty MasterDuke but `$obj.attr` is now `Mu` not Nil; it's as if `has $.attr = Mu;` I think

[22:06] <discord-raku-bot> <gfldex#8222> m:```

[22:06] <discord-raku-bot> <gfldex#8222>     class C {

[22:06] <discord-raku-bot> <gfldex#8222>         has Mu $.attr = Nil;

[22:06] <discord-raku-bot> <gfldex#8222>         submethod TWEAK { $!attr := Nil }

[22:06] <discord-raku-bot> <gfldex#8222>     }

[22:06] <discord-raku-bot> <gfldex#8222>     dd C.new.attr;

[22:06] <discord-raku-bot> <gfldex#8222> ```

[22:06] <discord-raku-bot> <gfldex#8222> m:```

[22:06] <discord-raku-bot> <gfldex#8222>     class C {

[22:06] <discord-raku-bot> <gfldex#8222>         has Nil $.attr;

[22:06] <discord-raku-bot> <gfldex#8222>     }

[22:06] <discord-raku-bot> <gfldex#8222>     dd C.new.attr;

[22:06] <discord-raku-bot> <gfldex#8222> ```

[22:07] <gfldex> neither: You you really want to stick Nil into an attribute, you can. But you are most likely got Nil wrong.

[22:09] <gfldex> We got Nil because we want Failure. Since, we now got Nil we have to deal with assignment of Nil to containers. By definition, Nil reverts a container to it's default value.

[22:09] <gfldex> What does it mean to have Nil as a default value in that regime?

[22:10] <neither> let me ask this way

[22:10] <neither> if you have a linked list, every node but the head has a parent

[22:11] <neither> how would you code the `$head.parent`'s value?

[22:11] <neither> i'm not insisting on Nil, I thought it was conventional way to signal None-ness

[22:11] <gfldex> I would use a singleton that is an undefined value.

[22:11] <MasterDuke> `Empty` perhaps

[22:24] <gfldex> m: class Node { has Node $.parent; has Node $.next; } dd Node.new.parent.defined;

[22:24] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------>  { has Node $.parent; has Node $.next; }‚èè dd Node.new.parent.defined;‚ê§    expecting any of:‚ê§        infix‚ê§   ‚Ä¶¬ª

[22:24] <gfldex> m: class Node { has Node $.parent; has Node $.next; }; dd Node.new.parent.defined;

[22:24] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Bool::False‚ê§¬ª

[22:28] <discord-raku-bot> <Nemokosch#9980> guess what, defined it is üòÑ

