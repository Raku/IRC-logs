[01:02] *** frost joined
[01:28] <discord-raku-bot> <Jodi> is there any way to do like 

[01:28] <discord-raku-bot> <Jodi> ```perl

[01:28] <discord-raku-bot> <Jodi> given 4 {

[01:28] <discord-raku-bot> <Jodi>   when 1 or 4 {

[01:28] <discord-raku-bot> <Jodi>   say "1 or 4"

[01:28] <discord-raku-bot> <Jodi> }

[01:28] <discord-raku-bot> <Jodi> }

[01:28] <discord-raku-bot> <Jodi> ```

[01:28] <discord-raku-bot> <Jodi> is there any way to do like 

[01:28] <discord-raku-bot> <Jodi> ```perl

[01:28] <discord-raku-bot> <Jodi> given 4 {

[01:28] <discord-raku-bot> <Jodi>   when 1 or 4 {

[01:28] <discord-raku-bot> <Jodi>   say "1 or 4"

[01:28] <discord-raku-bot> <Jodi>   }

[01:28] <discord-raku-bot> <Jodi> }

[01:28] <discord-raku-bot> <Jodi> ```

[01:28] <discord-raku-bot> <Jodi> it doesnt give any error/warning/whatever but it doesnt work as expected

[01:30] <discord-raku-bot> <Jodi> oh im an idiot, I just need to use `when 1 and 4` for whatever reason

[01:43] <discord-raku-bot> <Kaiepi> `1 and 4`'s a bit weird, try `1 | 4`

[01:44] <discord-raku-bot> <Jodi> thanks that was it

[01:51] <discord-raku-bot> <Jodi> May be a stupid question, but how do I actually compile my code instead of just running it through rakudo? Preferably I'd want a binary so it doesn't need to be recompiled each time

[01:53] <discord-raku-bot> <Kaiepi> put the bulk of the work in a `.rakumod`, let the `.raku` script put the pieces together

[01:54] <discord-raku-bot> <Kaiepi> the module gets precompiled and cached somewhere in the fs

[01:54] <discord-raku-bot> <Jodi> Hm?

[01:57] <discord-raku-bot> <Kaiepi> there isn't a way to compile raku to an executable directly at the moment, but a module as a library should help get rid of some of the precomp time

[01:58] <discord-raku-bot> <Kaiepi> past the first run, at least

[03:23] *** frost30 joined
[03:23] *** frost left
[03:23] *** frost30 left
[04:58] *** guifa left
[04:59] *** guifa joined
[05:33] *** razetime joined
[06:16] *** razetime left
[07:02] <discord-raku-bot> <Nemokosch> `when 1 and 4` wasn't right, it just coincidentally gave the same result for this input

[07:03] <discord-raku-bot> <Nemokosch> since 1 and 4 evaluates to 4

[07:04] <discord-raku-bot> <Nemokosch> that means you need rakudo to run it either way, right?

[07:07] <discord-raku-bot> <Kaiepi> yeah

[07:09] <discord-raku-bot> <Nemokosch> ‚òùÔ∏è

[07:11] <discord-raku-bot> <pelevesque> Does anyone know where I can find a spec for META

[07:11] <discord-raku-bot> <pelevesque> 6.json files

[07:11] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/modules#index-entry-META6.json-META6.json seems pretty good

[07:17] <discord-raku-bot> <pelevesque> Thank you so much.

[07:19] <discord-raku-bot> <Nemokosch> the historic specification is broader but not everything is actually implemented in zef

[07:33] <discord-raku-bot> <Nemokosch> Why can't I grep using :f

[07:33] <discord-raku-bot> <Nemokosch> Why can't I grep using :f?

[07:56] *** frost joined
[08:01] <CIAvash> You mean check for file?

[08:03] *** dakkar joined
[08:04] <discord-raku-bot> <Nemokosch> yes

[08:25] <CIAvash> `.grep: :f` does not smartmatch against `:f`, `f => True` gets passed to `grep`. So you have to write `.grep: * ~~ :f` or `.grep: *.f`

[08:27] <discord-raku-bot> <Nemokosch> I mean, what else is :f if not f => True? What is the possible difference?

[08:31] <CIAvash> If a pair like `:f` is smartmatched, Pair's `ACCEPTS` method calls method `f` on the topic.

[08:31] <CIAvash> https://docs.raku.org/routine/ACCEPTS#(Pair)_method_ACCEPTS

[08:33] <discord-raku-bot> <Nemokosch> m: 'sadm'.IO ~~ (e => True) andthen .say

[08:38] <discord-raku-bot> <Nemokosch> good but that't not what it says on my machine

[08:40] <discord-raku-bot> <Nemokosch> ```

[08:40] <discord-raku-bot> <Nemokosch> [2] >  'sadm'.IO ~~ (e => True) andthen .say                                   

[08:40] <discord-raku-bot> <Nemokosch> True

[08:40] <discord-raku-bot> <Nemokosch> ```

[08:42] <discord-raku-bot> <Nemokosch> oh right, because yeah, this is system specific xd

[08:42] <discord-raku-bot> <Nemokosch> so yeah, this does work

[09:00] <discord-raku-bot> <Nemokosch> so I still don't get why this shouldn't work

[09:01] <discord-raku-bot> <Nemokosch> does grep eat up named arguments?

[09:02] <discord-raku-bot> <Nemokosch> doesn't seem like that and anyway, why should it

[09:03] <discord-raku-bot> <Nemokosch> this doesn't smell right either way, I do pass it as a variable, it shouldn't unroll to a named argument

[09:03] <discord-raku-bot> <Nemokosch> and as you can see, smartmatching on the pair does work

[09:04] <discord-raku-bot> <Nemokosch> anyway, I'm gonna double check

[09:05] <discord-raku-bot> <Nemokosch> if I really wrote grep(:f) then grep((:f)) should work I guess

[09:22] <CIAvash> all methods take named arguments, grep is no exception. the fact that passing it as a variable works looks suspicious to me, atm

[09:26] <discord-raku-bot> <Nemokosch> It really shouldn't; it would be crazy if a variable unrolled to a named argument

[09:26] <discord-raku-bot> <Nemokosch> that would mean that you can't pass a Pair to a function

[09:28] <CIAvash> actually, no. It works because the variable is passed to grep and is smartmatched, it just so happens that the variable is a pair

[09:28] <CIAvash> m: my $test = :test; say :test ~~ $test;

[09:28] <camelia> rakudo-moar 36b0a635f: OUTPUT: ¬´True‚ê§¬ª

[09:29] <CIAvash> I think

[09:29] <discord-raku-bot> <Nemokosch> and that's why it works and should work

[09:29] <discord-raku-bot> <Nemokosch> matching against a pair is matching against a pair, regardless whether it looks like :f or f => True

[09:31] <discord-raku-bot> <Nahita> well when a Pair is passed in those notations to a function, it's interpreted as a keyword arg; to make it positional, we quote the key like "f" => True

[09:33] <discord-raku-bot> <Nemokosch> that also seems random but anyway, how do you quote :f ? üòÑ

[09:33] <discord-raku-bot> <Nahita> "f" => True

[09:33] <discord-raku-bot> <Nahita> if :"f" worked, that'd be interesting

[09:33] <discord-raku-bot> <Nemokosch> that's 'bogus statement'

[09:38] <CIAvash> quoting works, but makes no difference here since grep smartmatches.

[09:40] <discord-raku-bot> <Nemokosch> it does though

[09:40] <discord-raku-bot> <Nemokosch> [1] >  ('project_paths', 'random')>>.IO andthen .grep('f' => True)             

[09:40] <discord-raku-bot> <Nemokosch> ("project_paths".IO)

[09:40] <discord-raku-bot> <Nemokosch> [2] >  ('project_paths', 'random')>>.IO andthen .grep(f => True)               

[09:40] <discord-raku-bot> <Nemokosch> Cannot resolve caller grep(List:D: :f); none of these signatures matches:

[09:40] <discord-raku-bot> <Nemokosch>     ($: Bool:D $t, *%_)

[09:40] <discord-raku-bot> <Nemokosch>     ($: Mu $t, *%_)

[09:40] <discord-raku-bot> <Nemokosch>   in block <unit> at <unknown file> line 1

[09:43] *** discord-raku-bot left
[09:43] *** discord-raku-bot joined
[09:44] <discord-raku-bot> <Nemokosch> anyway, .grep((:f)) also works

[09:44] <discord-raku-bot> <Nemokosch> or .grep: (:f) I guess

[09:44] <discord-raku-bot> <Nemokosch> then I guess I hardcoded :f in grep and that was a fail

[09:45] <lizmat> yeah, .grep and .first smart-match conceptually, but have short-cuts builtin for handling regexes and Callables directly for performance

[09:45] <CIAvash> TBH, I don't know what your goal is, or what you consider working or not working üòÄ

[09:46] <discord-raku-bot> <Nemokosch> that took a long time to acknowledge üòÖ

[09:47] * lizmat is just awake  :-)  and only backlogged a few lines

[09:48] <discord-raku-bot> <Nahita> oh, why does `(:f)` work?

[09:48] <discord-raku-bot> <Nemokosch> because that's not a named argument anymore, thank heavens

[09:48] <CIAvash> I was just trying to explain why things behaved the way they did

[09:48] <discord-raku-bot> <Nahita> that's good to know, better than "f" => True

[09:48] <discord-raku-bot> <Nemokosch> If you remember the right presentation, this is why f(something) and f (something) isn't the same

[09:50] <discord-raku-bot> <Nemokosch> f (something) would be the same as f((something))

[09:52] <discord-raku-bot> <Nemokosch> CIAvash:  "If a pair like :f is smartmatched, Pair's ACCEPTS method calls method f on the topic." - this was insightful indeed

[09:52] <discord-raku-bot> <Nemokosch> But not gonna lie, it seems to me that you were also surprised by the discussed output, possibly more surprised than me üòÖ

[09:55] <discord-raku-bot> <Nemokosch> talking about these things always helps, though

[09:56] <discord-raku-bot> <Nemokosch> eventually, I came up with the right conclusion that :f might have got eaten up as a named argument

[09:56] <discord-raku-bot> <Nemokosch> but I probably wouldn't have thought about it in a meaningful way if we don't talk about it

[10:47] *** frost left
[10:47] *** frost joined
[12:56] *** frost left
[14:22] *** razetime joined
[15:27] *** razetime left
[15:38] *** razetime joined
[16:15] *** razetime left
[17:22] *** deadmarshal left
[17:23] *** dakkar left
[17:44] *** deadmarshal joined
[18:20] *** Kaiepi left
[20:07] *** Kaiepi joined
[20:12] *** deoac joined
[20:25] <deoac> When I try to compile the following line

[20:25] <deoac> ```

[20:25] <deoac> [0] > our Int $foo

[20:25] <deoac> ```

[20:25] <deoac> I get this error:

[20:25] <deoac> ```

[20:25] <deoac> ===SORRY!=== Error while compiling:

[20:25] <deoac> Cannot put a type constraint on an 'our'-scoped variable

[20:25] <deoac> at line 2

[20:25] <deoac> ------> <BOL>‚èè<EOL>

[20:25] <deoac> ¬† ¬† expecting any of:

[20:26] <deoac> ¬† ¬† ¬† ¬† constraint

[20:26] <deoac> ```

[20:26] <deoac> Why can't 'our'-scoped variables be typed?

[21:08] <deoac> If I have 'enum Color <red green blue>', is there a way to loop thru members of the enum?

[21:10] <discord-raku-bot> <Nemokosch> I think enums have the interface of a Hash

[21:10] <discord-raku-bot> <Nemokosch> m: enum Color <red green blue>; dd Color.keys;

[21:11] <discord-raku-bot> <Nemokosch> yep, `("green", "red", "blue").Seq`

[21:55] <lizmat> m: enum Color <red green blue>; dd $_ for Color.pairs

[21:55] <camelia> rakudo-moar 36b0a635f: OUTPUT: ¬´:red(0)‚ê§:blue(2)‚ê§:green(1)‚ê§¬ª

[21:55] <lizmat> m: enum Color <red green blue>; dd $_ for Color.pairs.sort(*.value)

[21:55] <camelia> rakudo-moar 36b0a635f: OUTPUT: ¬´:red(0)‚ê§:green(1)‚ê§:blue(2)‚ê§¬ª

[23:29] *** MasterDuke joined
