[00:28] *** deoac joined
[00:29] <deoac> Why is `(1, 1).one !(elem) (1..10);` True?

[00:29] <deoac> It is not the case that exactly one of the elements is not in the Range.

[00:30] <deoac> `all`, `any`, and `none` behave the way I expect.

[00:36] <deoac> Whereas `(1, 1).any ∉ (1..10)` is `any(False, False)`

[00:36] <deoac> Shouldn't `!(elem)` and `∉` yield the same result?

[00:37] <deoac> Ooops.  Replace `any` with `one` in my last remark.

[00:55] *** frost joined
[02:00] *** razetime joined
[02:46] *** jetchisel left
[02:49] *** jetchisel joined
[03:30] *** razetime left
[03:56] *** razetime joined
[04:28] <kjp> deoac: Ideally yes, but... 'A !(elem) B' is shorthand for "!(A (elem) B)", and 

[04:29] <kjp> ∉ is an operator in its own right, so the results are different.

[04:34] <kjp> '!∈' gives the same result as '!(elem)'

[04:35] <kjp> This is a known gotcha when using junctions.

[05:15] *** frost left
[07:02] *** jetchisel left
[08:18] *** razetime left
[08:35] *** razetime joined
[10:02] *** discord-raku-bot left
[10:03] *** discord-raku-bot joined
[10:07] *** discord-raku-bot left
[10:07] *** discord-raku-bot joined
[10:16] <deoac> Is there an ASCII equivalent of `∉` ?

[10:17] <lizmat> !(elem)

[10:20] <deoac> No.   `(1, 1).one !(elem) (1..10);`  and  `(1, 1).one ∉ (1..10)` yield different results.

[10:21] <lizmat> then according current doctrine, the ∉ result is wrong

[10:23] <deoac>  `(1, 1).one ∉ (1..10);`  -->. `one(False, False)`

[10:24] <deoac>  `(1, 1).one !(elem) (1..10);`  -->. `True`

[10:25] <lizmat> see discussion at: https://github.com/rakudo/rakudo/pull/3874

[10:27] <discord-raku-bot> <Nemokosch> just posted on https://github.com/Raku/problem-solving/issues/319

[10:27] <discord-raku-bot> <Nemokosch> tldr please please pretty please, do make the change lizmat PR'd back in the day

[10:28] <discord-raku-bot> <Nemokosch> (and perhaps change the whole semantics of `!` but that seems too big to happen)

[10:32] <discord-raku-bot> <Nemokosch> I mean:

[10:32] <discord-raku-bot> <Nemokosch> - changing `!` to _not_ lift would fix everything immediately

[10:32] <discord-raku-bot> <Nemokosch> - if that doesn't happen, providing ways out that aren't just ![operator] is necessary to get readable junction behavior

[10:32] <lizmat> I'm going to recuse myself from this dicussion

[10:33] <lizmat> on ground of burnout on the subject

[10:34] <discord-raku-bot> <Nemokosch> It's not your fault really

[10:36] <discord-raku-bot> <Nemokosch> It's painful to see that this discussion would be over for good if it weren't for the stubbornness of literally two or three people

[10:37] <lizmat> that may be so, but these people I value very much, and I feel it is *my* fault for not having been able to convince them

[10:39] <gfldex> m: say „If only Larry wouldn't be { ('linguist' & 'computer scientist') }!“;

[10:39] <camelia> rakudo-moar 90709d533: OUTPUT: «all(If only Larry wouldn't be linguist!, If only Larry wouldn't be computer scientist!)␤»

[10:42] <deoac> Thanks, everyone.  This has been illuminating to this beginner!

[10:44] <discord-raku-bot> <Nemokosch> But since I see this bothers everyone apart from the 2 or 3 people who insist on it, I will even write a petition with pages of rationale, if I have to

[11:00] *** jetchisel joined
[11:19] *** razetime left
[11:26] *** razetime joined
[13:41] *** jgaz joined
[13:52] *** jgaz left
[13:54] *** jgaz joined
[14:27] *** jgaz left
[14:30] *** razetime left
[15:01] *** jgaz joined
[16:24] *** jgaz left
[16:24] *** deoac left
[16:28] *** jgaz joined
[16:59] *** jgaz left
[22:29] *** deoac joined
[22:42] *** Kaipei joined
[22:46] *** Kaiepi left
[23:29] <deoac> Is there a rakuish way of toggling a Bool?

[23:30] <deoac> Apart from `$bool = !$bool;` ?

