[00:48] <discord-raku-bot> <Anton Antonov#7232> I have a sub that takes a property option. For example, `sub f($r, :$property = 'a')`  and allowed properties are 'a', 'b', 'c', 'd'. Is there an easy way to make those properties become adverbs? I would like to have this to work `f(32):b`, without defining separate signatures for each alloed property values.

[00:49] <discord-raku-bot> <Anton Antonov#7232> I have a sub that takes a property option. For example, `sub f($r, :$property = 'a')` , and allowed properties are 'a', 'b', 'c', 'd'. Is there an easy way to make those properties become adverbs? I would like to have this to work `f(32):b`, without defining separate signatures for each alloed property values.

[00:49] <discord-raku-bot> <Anton Antonov#7232> I have a sub that takes a property option. For example, `sub f($r, :$property = 'a')` , and allowed properties are 'a', 'b', 'c', 'd'. Is there an easy way to make those properties become adverbs? I would like to have this to work `f(32):b`, without defining separate signatures for each allowed property values.

[01:19] *** Kaiepi left
[02:00] *** Kaiepi joined
[02:06] <discord-raku-bot> <stevied#8273> whoa, found a nifty distribution for allowing my module to get at a modules $?DISTRIBUTION variable: https://raku.land/github:FCO/Injector

[02:14] *** Kaiepi left
[03:08] <discord-raku-bot> <Nemokosch#9980> is there something for padding a string with spaces?

[03:53] <discord-raku-bot> <stevied#8273> printf

[03:53] <discord-raku-bot> <Nemokosch#9980> yeah I also ended up using sprintf

[03:53] <discord-raku-bot> <Nemokosch#9980> hidden behind an operator üòà

[03:57] <discord-raku-bot> <stevied#8273> time for bed. been at this all day. later

[03:59] <discord-raku-bot> <Nemokosch#9980> you are in the US though, right?

[05:08] *** archenoth left
[05:09] *** archenoth joined
[08:04] <discord-raku-bot> <Anton Antonov#7232> I think `.fmt` can be used.

[08:06] <discord-raku-bot> <Nemokosch#9980> good to know this exists üëå

[08:14] *** dakkar joined
[08:22] *** frost joined
[08:35] <SmokeMachine> stevied: Sorry, I got curious... how do you intend to use the Injector?

[08:41] <discord-raku-bot> <Nemokosch#9980> What's the status of that module, by the way?

[09:13] *** equinox joined
[09:18] <equinox> hi, the syntax highlighting in docs.raku.org is amazing, can i find it to use in notepad++ etc.? if so, how?

[09:37] <discord-raku-bot> <Anton Antonov#7232> Well, if you want to use VSCode (or Atom, or IntelliJ) instead of notepad++ then there are plugins... üôÇ

[09:37] <discord-raku-bot> <Anton Antonov#7232> Also for emacs and vi, I think...

[09:39] <discord-raku-bot> <Anton Antonov#7232> <@297037173541175296> Do you know by any chance how to pad with spaces from the right?

[09:41] <equinox> oh, thanks. i can use VSCode as well, so i searched for Raku but what i found doesn't have the highlighting as the docs.raku page. Perhaps i should look at the source code of the documentation.

[09:45] <discord-raku-bot> <Anton Antonov#7232> Take a look here: https://marketplace.visualstudio.com/items?itemName=bscan.raku-navigator

[09:47] <discord-raku-bot> <Anton Antonov#7232> And here: https://www.reddit.com/r/rakulang/comments/uqgog6/raku_navigator_updates_outline_view_breadcrumbs/

[09:49] <SmokeMachine> Nemokosch: do you mean Injector?

[10:20] <SmokeMachine> if is the Injector you are talking about, I've just run some tests and it seems to be working... I don't use it for several years...

[10:20] <discord-raku-bot> <Nemokosch#9980> yes yes

[10:21] <SmokeMachine> but I was planning on using it with Red and Cro for a page I was writing...

[10:21] <discord-raku-bot> <Nemokosch#9980> What was the original motive?

[10:21] <SmokeMachine> ‚òùÔ∏è

[10:22] <discord-raku-bot> <Nemokosch#9980> oh

[10:22] <discord-raku-bot> <Nemokosch#9980> timing üòÑ

[10:22] <SmokeMachine> I was also thinking on using that inside Red... but went with dynamic vars instead...

[10:24] <discord-raku-bot> <Nemokosch#9980> I wouldn't say noone uses Raku but the community is indeed tight

[10:24] <discord-raku-bot> <Nemokosch#9980> but this isn't completely bad

[10:26] <SmokeMachine> I was working with a code that used injection at $DAYJOB, and I usually try to write stuff in Raku to try to understand it better... that was also the case...

[10:26] <discord-raku-bot> <Nemokosch#9980> It just happens that the "killer feature" for me is rather banal: shell scripting back and forth

[10:27] <SmokeMachine> I plan on write a rakush when I have some time (and when I decide how it should be...)

[10:28] <discord-raku-bot> <Nemokosch#9980> üòÇ

[10:29] <SmokeMachine> (I plan on having parsers for the common commands and return dats structures instead of strings...)

[10:30] <discord-raku-bot> <Nemokosch#9980> this reminds me, I still haven't dedicated time to grammars

[10:31] <discord-raku-bot> <Nemokosch#9980> that would be the breakthrough

[10:32] <discord-raku-bot> <Nemokosch#9980> in fact, sometimes we do have to compare or convert C and Pascal codes

[10:32] <SmokeMachine> when you do a `.ls` for example it would return a RakuSH::Return::Ls that would have a list of RakuSH::Return::File and the `.gist` of that would print the usual think, but you would also be able to pipe that to a mother command that would receive the obj and do whatever it wants...

[10:34] <discord-raku-bot> <Nemokosch#9980> there's a shitload of legacy code and the version control is not great because there are many, theoretically independent but practically mutually "influential" systems

[10:35] <discord-raku-bot> <Nemokosch#9980> so any tools that can meaningfully compare textual sources (code mainly but also some textual database export) are golden

[10:37] <lizmat> soon in an ecosystem near you: https://github.com/lizmat/App-Rak

[10:41] <discord-raku-bot> <Nemokosch#9980> seen this üëÄ

[10:41] *** equinox left
[10:42] <SmokeMachine> lizmat++

[10:43] <SmokeMachine> lizmat: cool! that accepts regex and a block, right?

[10:45] <SmokeMachine> in addition to a string, I mean

[10:49] <lizmat> yes

[10:50] <lizmat> rak '/:s method << [ hyper | race ] >> /'     # look for all method hyper / method race from the current directory

[10:51] <discord-raku-bot> <Morfent#9811> looks a little nicer than ugrep/ripgrep/whatever for finding raku code

[10:53] <discord-raku-bot> <Nemokosch#9980> where does it signify "current directory"?

[10:57] <lizmat> not specifying a second argument, means current dir

[10:57] <lizmat> rak foo /usr/src/rakudo   # search for "foo" in /usr/src/rakudo

[10:57] <SmokeMachine> I'm also having issues when installing dependencies on GitHub actions... it fails more than work... from some time to now... idk the reason...

[10:58] <SmokeMachine> sorry, I'm mentioning because I saw this (https://github.com/lizmat/App-Rak/runs/6973824097?check_suite_focus=true) and that's also happening to Red...

[10:59] <lizmat> SmokeMachine: that's because I hadn't release Files-Containing yet

[10:59] <lizmat> my fault

[10:59] <lizmat> working on its pod now

[10:59] <discord-raku-bot> <locria#8416> The description App::Rak is empty

[11:00] <SmokeMachine> ok, that make sense in that case then... but that's happening to me with no reason... and I ask it to run again and that works...

[11:00] <lizmat> yeah, it's not ready for release yet...

[11:00] <discord-raku-bot> <locria#8416> How did you generate readme.md? I looks like from Pod6.

[11:00] <lizmat> App::Mi6 generates the README.md from the pod for you, unless you switch that off

[11:01] <discord-raku-bot> <locria#8416> But not quite.

[11:22] <discord-raku-bot> <stevied#8273> Mi6 is great. Dist::Zilla done right.

[11:29] <discord-raku-bot> <stevied#8273> I'm using Injector to inject the $?DISTRIBUTION data into another module I'm writing: Distribution::Resources::Menu.

[11:30] <discord-raku-bot> <stevied#8273> this module will allow a user to navigate and select a resource files from the command line using a menu system

[11:32] <discord-raku-bot> <stevied#8273> see https://gist.github.com/sdondley/252ffff40e9779bb09388a3e009f5dcd

[11:35] <discord-raku-bot> <stevied#8273> here's an early snapshot of the module:

[11:35] <discord-raku-bot> <stevied#8273> https://gist.github.com/sdondley/9c7620a8945f06847591d6fa6b8ef587

[11:42] <lizmat> SmokeMachine I have just released the first alpha of App::Rak

[11:42] <lizmat> going afk for most of the day now

[12:17] <SmokeMachine> \o/

[13:24] <discord-raku-bot> <Anton Antonov#7232> @lizmat Nice work on ‚ÄúApp::Rak‚Äù ! [1] I will try to make ‚ÄúApp::Rak‚Äù a target in ‚ÄúDSL::English::SerachEngineQueries‚Äù. [2] I am planning to do something similar in spirit ‚Äî a recommender (and search engine) for the files in a directory. [3] Another related project is to do a recommender for Raku packages. (Using some of the fez-related data repositories.)

[13:28] *** jgaz joined
[13:31] <discord-raku-bot> <kawaii#1337> If there are two modules which both provide a Type of the same name (i.e. UUID and LibUUID), how can I specify which kind I want when setting a constraint?

[13:32] <discord-raku-bot> <kawaii#1337> I was _sure_ you could do something like `my LibUUID::UUID $blah = ...` but it seems not?

[13:36] *** frost left
[13:55] *** Kaiepi joined
[14:16] <SmokeMachine> lizmat: should something like this (`rak "/class \s+ <([[\w+]+ % '::'])> \s+ '{'/"`) highlight the class name only?

[14:20] <SmokeMachine> lizmat: is that in the plain adding a `-o` like there is in grep?

[14:21] <SmokeMachine> lizmat: if there is the plan, will that make <( and )> influence the result?

[14:55] <SmokeMachine> stevied: Sorry, I'm not sure I got what you are doing there...

[14:57] <discord-raku-bot> <Nemokosch#9980> does it work or not? üòÑ

[15:06] <SmokeMachine> stevied: OK... I think I got it... on the distro you want to have the menu you bind the distro itself and then, when you inject the ResourceMenu back (or just instantiate it) you will have the distro populated with that one you bonded... is that it?

[15:45] <discord-raku-bot> <stevied#8273> yes

[15:45] <discord-raku-bot> <stevied#8273> it does work, yes

[15:46] <discord-raku-bot> <stevied#8273> the hard part is building the menu from list of paths. it's a little tricky

[15:46] <discord-raku-bot> <stevied#8273> anyone have any suggestions for my question here: https://stackoverflow.com/questions/72703673/recursively-building-nested-hash-from-a-simple-array

[15:47] <discord-raku-bot> <stevied#8273> i wrote a recursive function to turn an array into a nested hash. it's kind of ugly though.

[15:49] <discord-raku-bot> <stevied#8273> oh, I think I should not have the slurpy in there anymore

[15:59] <discord-raku-bot> <Nemokosch#9980> nice üôÇ

[15:59] <discord-raku-bot> <Nemokosch#9980> by the way

[15:59] <discord-raku-bot> <Nemokosch#9980> I wonder if it's possible to reduce with a postcircumfix

[15:59] <discord-raku-bot> <stevied#8273> interesting

[16:00] <discord-raku-bot> <stevied#8273> yeah, I thought of doing something like that but I had no idea how

[16:01] <discord-raku-bot> <stevied#8273> need a way to turn `(one two three)` into `%hash<one><two><three>`

[16:01] <discord-raku-bot> <stevied#8273> i'm sure there is a way

[16:03] <discord-raku-bot> <stevied#8273> I wonder if eval would work

[16:09] *** jgaz left
[16:15] <discord-raku-bot> <Nemokosch#9980> I'm not sure if the postcircumfix {} can work, mainly because of its signature

[16:16] <discord-raku-bot> <Nemokosch#9980> but I'm quite sure it can be replicated some way, in an infix

[16:18] <discord-raku-bot> <Nemokosch#9980> I don't know how to return a brand new scalar from a function

[16:20] <discord-raku-bot> <Nemokosch#9980> can I tell a variable that it should be exposed with the container?

[16:22] <discord-raku-bot> <Nemokosch#9980> better asked... can I do this without NQP? lol

[16:22] <discord-raku-bot> <stevied#8273> you might like `return 7`?

[16:22] <discord-raku-bot> <Morfent#9811> try a loop

[16:22] <discord-raku-bot> <Nemokosch#9980> I mean like %hash<foo> itself

[16:22] <discord-raku-bot> <Nemokosch#9980> it does expose the container, not just the value

[16:24] <discord-raku-bot> <Nemokosch#9980> and I definitely remember "mind-blowing" code with assignments to a function

[16:26] *** avuserow left
[16:27] *** avuserow joined
[16:32] <discord-raku-bot> <gfldex#8222> m: my %h; %h{||<one tow three>} = 'how to begin a concert'; dd %h;

[16:32] <discord-raku-bot> <stevied#8273> oh, wow

[16:32] <discord-raku-bot> <gfldex#8222> this may require v6.d or even v6.*

[16:33] <discord-raku-bot> <stevied#8273> so it doesn't work?

[16:34] <discord-raku-bot> <gfldex#8222> it needs `use v6.e_PREVIEW`;

[16:34] <discord-raku-bot> <stevied#8273> i discovered eval works just fine, too. but probably safer to construct it manually

[16:37] <discord-raku-bot> <Nemokosch#9980> oh yeah, I actually tried ||

[16:37] <discord-raku-bot> <Nemokosch#9980> I think this only works with lists to some extent

[16:37] <discord-raku-bot> <Nemokosch#9980> *already

[16:37] *** dakkar left
[16:38] <discord-raku-bot> <Nemokosch#9980> only is also true perhaps but that was because of little sleep

[16:39] <discord-raku-bot> <Nahita#3882> another recursive attempt

[16:39] <discord-raku-bot> <Nahita#3882> ```

[16:39] <discord-raku-bot> <Nahita#3882> sub hhash(%h, [$first, *@rest]) {

[16:39] <discord-raku-bot> <Nahita#3882>     %h{$first} = 1 and return unless @rest;

[16:39] <discord-raku-bot> <Nahita#3882>     hhash((%h{$first} = {}), @rest);

[16:39] <discord-raku-bot> <Nahita#3882> }

[16:39] <discord-raku-bot> <Nahita#3882> ```

[16:40] <discord-raku-bot> <stevied#8273> ok, now I'm lost. how can I merge these arrays:

[16:40] <discord-raku-bot> <stevied#8273> ```

[16:40] <discord-raku-bot> <stevied#8273> {testing => {testing2 => {testing3 => {test.txt => 1}}}}

[16:40] <discord-raku-bot> <stevied#8273> {testing => {testing2 => {testing3 => {test2.txt => 1}}}}

[16:40] <discord-raku-bot> <stevied#8273> {testing => {testing5 => {test3.txt => 1}}}

[16:40] <discord-raku-bot> <stevied#8273> {testing => {testing5 => {test3.txt => 1}}}

[16:40] <discord-raku-bot> <stevied#8273> ```

[16:40] <discord-raku-bot> <Nemokosch#9980> are you deliberately inventing problems? üòÖ

[16:40] <discord-raku-bot> <stevied#8273> heh, no.

[16:42] <discord-raku-bot> <stevied#8273> i was hoping it would be as easy as `%(|%hash1, |%hash2, |%hash3)` but apparently not

[16:43] <discord-raku-bot> <stevied#8273> oh, I think I can avoid this anyway

[16:47] *** jgaz joined
[17:20] <discord-raku-bot> <stevied#8273> https://stackoverflow.com/a/72704382/1641112

[17:20] <discord-raku-bot> <stevied#8273> there's the raku-ish answer

[17:38] *** m6502 joined
[17:40] *** jgaz left
[17:40] *** m6502 left
[17:40] *** jgaz joined
[17:47] *** n1to joined
[17:57] *** jgaz left
[18:12] <SmokeMachine> m: use v6.e.PREVIEW; my @array = <bla ble bli>; my %hash; %hash{||@array} = 1; dd %hash

[18:12] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´Hash %hash = {:bla(${:ble(${:bli(1)})})}‚ê§¬ª

[18:22] <discord-raku-bot> <Nemokosch#9980> yes yes

[18:22] <discord-raku-bot> <Nemokosch#9980> cool stuff

[18:49] *** jgaz joined
[19:57] <discord-raku-bot> <locria#8416> Is there a way to install package to edit locally?

[19:57] <discord-raku-bot> <locria#8416> like `pip install -e package`

[20:19] <discord-raku-bot> <stevied#8273> what I do is use zef to down the package but don't install it. then I do `use lib 'path/to/downloaded/module`

[20:19] <discord-raku-bot> <stevied#8273> there might be a better way

[20:22] <discord-raku-bot> <stevied#8273> <@541318874767949844> ^^

[20:22] <discord-raku-bot> <stevied#8273> ok, here's my little challenge: https://www.reddit.com/r/rakulang/comments/vhmef9/challenge_converting_an_array_of_lists_to_a_hash/

[20:24] <discord-raku-bot> <stevied#8273> took me all friggin' day to figure it out, embarassingly

[20:24] <discord-raku-bot> <stevied#8273> though to be fair, I'm pretty rusty doing this kind of thing

[20:32] <discord-raku-bot> <locria#8416> Raku's sigil is pretty weird

[20:32] <discord-raku-bot> <locria#8416> Weirder then: `qw<a>`  is Str, not List

[20:36] <discord-raku-bot> <stevied#8273> https://docs.raku.org/language/quoting#Word_quoting:_qw

[20:36] <discord-raku-bot> <stevied#8273> qw is an operator

[20:36] <discord-raku-bot> <Nemokosch#9980> I've invested quite enough time to challenge @ and % so yeah...

[20:36] <discord-raku-bot> <stevied#8273> it can have different delimiters

[20:36] <discord-raku-bot> <Nemokosch#9980> I don't know if this is called an operator but it's definitely some paren prefix

[20:36] <discord-raku-bot> <locria#8416> qw<a b> is List though

[20:36] <discord-raku-bot> <locria#8416> Even `qw < a >` is Str

[20:37] <discord-raku-bot> <locria#8416> I think it's a bug

[20:37] <discord-raku-bot> <Nemokosch#9980> could be argued for, could be against

[20:38] <discord-raku-bot> <Nemokosch#9980> however I would be surprised if this went unnoticed all the time

[20:38] <discord-raku-bot> <Nemokosch#9980> actually <1> is kind of a pattern

[20:38] <discord-raku-bot> <Nemokosch#9980> confer hash access

[20:38] <discord-raku-bot> <Nemokosch#9980> also, don't forget that (1) is also an Int, not a List

[20:38] <discord-raku-bot> <Nemokosch#9980> so it is consistent with that behavior

[20:40] <discord-raku-bot> <stevied#8273> i think it's because lists with one element are automatically flattened

[20:41] <discord-raku-bot> <Nemokosch#9980> (1) is not a list, for example

[20:41] <discord-raku-bot> <Nemokosch#9980> I mean syntactically it isn't

[20:42] <discord-raku-bot> <Nemokosch#9980> only the empty list () can exist without commas

[20:42] <discord-raku-bot> <Nemokosch#9980> otherwise, it's the comma that makes the list, not the parens

[20:42] <discord-raku-bot> <Nemokosch#9980> the parens just help with the precedence

[20:43] <discord-raku-bot> <Nemokosch#9980> thjs is unlike [] however, which does make arrays

[20:44] <discord-raku-bot> <Nemokosch#9980> by the way, <1> is an IntStr actually

[20:46] <discord-raku-bot> <stevied#8273> i think the deal is qw<> returns a list by default. But if you have only one element in the list, it's flattened

[20:47] <discord-raku-bot> <Nemokosch#9980> I think qw<> is exactly the same as <>

[20:47] <discord-raku-bot> <stevied#8273> and qw<> expects there to be whitespace

[20:47] <discord-raku-bot> <Nemokosch#9980> just more keystrokes

[20:48] <discord-raku-bot> <Nemokosch#9980> like qq{} would be exactly the same as "" iirc

[20:48] <discord-raku-bot> <stevied#8273> docs says <> does some extra special stuff to coerce objects

[20:48] <discord-raku-bot> <stevied#8273> The angle brackets quoting is like qw, but with extra feature that lets you construct allomorphs or literals of certain numbers:

[20:48] <discord-raku-bot> <Nemokosch#9980> okay, so qw<> is just <> without the extras

[20:48] <discord-raku-bot> <stevied#8273> but yeah, quoting is tricky in raku. I have to go back and read that page.

[20:50] <discord-raku-bot> <Nemokosch#9980> qqx is my friend

[20:50] <discord-raku-bot> <Nemokosch#9980> ü§†

[20:59] <discord-raku-bot> <wamba#9976> you could do that by `classify-list` 

[20:59] <discord-raku-bot> <wamba#9976> m: <one two three>,  <one two for> andthen (%).classify-list: {|$_},:as({1}), $_ andthen .duckmap: -> @a {@a.Slip} andthen .say

[20:59] <discord-raku-bot> <wamba#9976> m: <one two three>,  <one two for> andthen (%).classify-list: {|$},:as({1}), $ andthen .duckmap: -> @a {@a.Slip} andthen .say

[21:01] <discord-raku-bot> <wamba#9976> you could do that by `classify-list` 

[21:01] <discord-raku-bot> <wamba#9976> ```raku

[21:01] <discord-raku-bot> <wamba#9976> <one two three>,  <one two for> 

[21:01] <discord-raku-bot> <wamba#9976> andthen (%).classify-list: {|$_}, :as({1}), $_ 

[21:01] <discord-raku-bot> <wamba#9976> andthen .duckmap: -> @a {@a.Slip}

[21:01] <discord-raku-bot> <wamba#9976> andthen .say

[21:01] <discord-raku-bot> <wamba#9976> ```

[21:01] <discord-raku-bot> <Nemokosch#9980> Jan is back!

[21:02] <discord-raku-bot> <Nemokosch#9980> I saw that you use the backslash to get away from implied semicolons

[21:03] <discord-raku-bot> <Nemokosch#9980> lately I've been experimenting with a line terminating `andthen` style

[21:03] <discord-raku-bot> <wamba#9976> you could do that by `classify-list` 

[21:03] <discord-raku-bot> <wamba#9976> ```raku

[21:03] <discord-raku-bot> <wamba#9976> <one two three>,  <one two for> 

[21:03] <discord-raku-bot> <wamba#9976> andthen (%).classify-list: {|$_}, :as({1}), $_ 

[21:03] <discord-raku-bot> <wamba#9976> andthen .duckmap: -> @a {@a.Slip}\

[21:03] <discord-raku-bot> <wamba#9976> andthen .say

[21:03] <discord-raku-bot> <wamba#9976> ```

[21:05] <discord-raku-bot> <Nemokosch#9980> what is your advice with assignments, though?

[21:24] <discord-raku-bot> <wamba#9976> <@297037173541175296> see  https://www.youtube.com/watch?v=C-kF25fWTO8 (especially after 14:30) It is about Clojure `->>`, but you can do that with `andthen` (or `==>`) in Raku, too.

[21:26] <discord-raku-bot> <Nemokosch#9980> I've seen this presentation a little while ago üòÇ

[21:28] <discord-raku-bot> <Nemokosch#9980> My question is in particular: how to make it look good?

[21:28] <discord-raku-bot> <Nemokosch#9980> For lists (finally, one use for @ üòÇ ), my @values <==

[21:28] <discord-raku-bot> <Nemokosch#9980>   blah andthen

[21:28] <discord-raku-bot> <Nemokosch#9980>   .some-method: arg andthen

[21:28] <discord-raku-bot> <Nemokosch#9980>   .finalize;

[21:28] <discord-raku-bot> <Nemokosch#9980> Looks pretty good imo

[21:29] <discord-raku-bot> <Nemokosch#9980> For lists (finally, one use for @ üòÇ ),

[21:29] <discord-raku-bot> <Nemokosch#9980> my @values <==

[21:29] <discord-raku-bot> <Nemokosch#9980>   blah andthen

[21:29] <discord-raku-bot> <Nemokosch#9980>   .some-method: arg andthen

[21:29] <discord-raku-bot> <Nemokosch#9980>   .finalize;

[21:30] <discord-raku-bot> <Nemokosch#9980> But this is _very_ specific

[21:32] *** jgaz left
[21:35] *** n1to left
[21:41] <SmokeMachine> locria: that expected, not a bug

[21:47] <SmokeMachine> m: my @a = [<a b c>, <a b C>, <a B C>]; dd @a.classify: *.<>

[21:47] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´(my Any %{Mu} = :a($(my Any %{Mu} = :B($(my Any %{Mu} = :C($[("a", "B", "C"),]))), :b($(my Any %{Mu} = :C($[("a", "b", "C"),]), :c($[("a", "b", "c"),]))))))‚ê§¬ª

[21:48] <SmokeMachine> m: my @a = [<a b c>, <a b C>, <a B C>]; say @a.classify: *.<>

[21:48] <camelia> rakudo-moar d253dc79e: OUTPUT: ¬´{a => {B => {C => [(a B C)]}, b => {C => [(a b C)], c => [(a b c)]}}}‚ê§¬ª

[21:59] <discord-raku-bot> <wamba#9976> you could do that by `classify` 

[21:59] <discord-raku-bot> <wamba#9976> ```raku

[21:59] <discord-raku-bot> <wamba#9976> <one two three>,  <one two for> 

[21:59] <discord-raku-bot> <wamba#9976> andthen .classify: |*, :as({1})

[21:59] <discord-raku-bot> <wamba#9976> andthen .duckmap: -> @a {@a.Slip}\

[21:59] <discord-raku-bot> <wamba#9976> andthen .say

[21:59] <discord-raku-bot> <wamba#9976> ```

[22:09] <discord-raku-bot> <locria#8416> Not in named argument: https://github.com/Raku/user-experience/issues/46

[22:09] <discord-raku-bot> <locria#8416> Not in named argument: https://github.com/Raku/user-experience/issues/46

[22:13] <discord-raku-bot> <locria#8416> What is this classify magic?

[22:15] <discord-raku-bot> <locria#8416> m:

[22:15] <discord-raku-bot> <locria#8416> ```

[22:15] <discord-raku-bot> <locria#8416> my @a = [<a b c>, <a b C>, <a B C>];

[22:15] <discord-raku-bot> <locria#8416> say @a.classify: *.<>;

[22:15] <discord-raku-bot> <locria#8416> say @a.classify: { (1) };

[22:15] <discord-raku-bot> <locria#8416> say @a.classify: { (1, 2) };

[22:15] <discord-raku-bot> <locria#8416> ```

[23:43] <discord-raku-bot> <stevied#8273> where can I find documentation for this: `postcircumfix:<{; }>(%hash, @list) = 1;`

[23:43] <discord-raku-bot> <stevied#8273> I don't know what `postcircumfix<{; }>` does

