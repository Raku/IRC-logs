[00:34] *** jaguart left
[00:41] *** Kaiepi left
[01:41] *** razetime joined
[02:27] *** razetime left
[02:42] *** jaguart joined
[04:26] *** Kaiepi joined
[04:37] <jaguart> in this signature: sub foo(::bar){...} ===> what is ::bar ? 

[04:42] *** razetime joined
[04:45] <discord-raku-bot> <Kaiepi> it's a type capture

[04:49] <jaguart> thanks - so I can pass in a Type as in foo(Int);

[04:50] <discord-raku-bot> <Kaiepi> yeah

[04:50] <discord-raku-bot> <Kaiepi> it captures the type, so any object is fine

[04:53] <jaguart> oh cool - so if I foo(2) -> foo would get the Type instance in ::bar?

[04:53] <jaguart> as in the Int

[04:54] <discord-raku-bot> <Kaiepi> yep!

[05:00] <jaguart> where should I be looking in the docs to find this? I looked at https://docs.raku.org/language/variables

[05:00] <jaguart> thinking it was a sigil...

[05:05] <discord-raku-bot> <Kaiepi> `Signature` has a bunch of the docs on how to work with its parameters https://docs.raku.org/type/Signature#index-entry-Type_capture

[05:08] <jaguart> thank you )

[05:08] <discord-raku-bot> <Kaiepi> np

[05:57] <jaguart> Is there a way to find the EXPORTs of a module, ie the attributes and methods that are 'is export'?

[08:10] <discord-raku-bot> <Nahita> `YourModule::EXPORT::DEFAULT::.keys` might help; https://docs.raku.org/language/modules#Introspection

[08:33] *** Heptite left
[08:59] *** Kaiepi left
[09:30] *** razetime left
[09:43] *** Kaiepi joined
[13:46] *** elcaro_ left
[13:47] *** elcaro joined
[16:54] *** razetime joined
[17:16] *** Heptite joined
[17:18] *** razetime left
[18:52] *** mcmillhj joined
[20:33] *** mcmillhj left
[21:14] *** Kaiepi left
[21:18] *** Kaiepi joined
[23:35] <jaguart> I'm still stuck with EXPORTS

[23:36] <jaguart> This seems to work:

[23:36] <jaguart> m: module Foo { our $bar is export; sub baz is export { "baz"; } }; sub ex($o) { say "=>: ", $o.WHO<EXPORT>.WHO.keys; }; ex(Foo);

[23:36] <camelia> rakudo-moar d4598e475: OUTPUT: «=>: (ALL DEFAULT)␤»

[23:36] <jaguart> But I cannot seem to dig into ALL :(

[23:37] <jaguart> m: module Foo { our $bar is export; sub baz is export { "baz"; } }; sub ex($o) { say "=>: ", $o.WHO<EXPORT>.WHO<ALL>.keys; }; ex(Foo);

[23:37] <camelia> rakudo-moar d4598e475: OUTPUT: «=>: ()␤»

[23:40] <discord-raku-bot> <Nemokosch> are you sure ALL isn't just downright empty?

[23:40] <jaguart> m: 

[23:41] <jaguart> m: module Foo { our $bar is export; sub baz is export { "baz"; } }; sub ex($o) { use MONKEY-SEE-NO-EVAL; say "=>: ", EVAL($o.^name ~ "::EXPORT::ALL::.keys"); }; ex(Foo);

[23:41] <camelia> rakudo-moar d4598e475: OUTPUT: «=>: (&baz $bar)␤»

[23:41] <jaguart> ah found it )

[23:41] <jaguart> m: module Foo { our $bar is export; sub baz is export { "baz"; } }; sub ex($o) { say "=>: ", $o.WHO<EXPORT>.WHO<ALL>.WHO.keys; }; ex(Foo);

[23:41] <camelia> rakudo-moar d4598e475: OUTPUT: «=>: ($bar &baz)␤»

[23:42] <jaguart> I needed the Stash of ALL - was assuming ALL was already a Stash

[23:57] <jaguart> my ask of Santa and his Raku Elves is: Metamodel::PackageHOW.exports() ===> returns a list of exports so I can $m.^exports like my classy friends so $c.^attributes

[23:58] <jaguart> not quite confident enough to mixin Metamodel::PackageHOW yet...

