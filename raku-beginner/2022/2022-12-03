[00:03] <discord-raku-bot> <Nemokosch> my %foo = BaR => 42, lol => 31; say 'bar' ‚àà %foo.keys>>.lc;

[00:08] <deoac> Oh, a very nice solution.¬† Thank you.

[00:11] <discord-raku-bot> <Nemokosch> üò∫

[00:12] *** Kaiepi left
[00:39] *** sgrs left
[02:10] *** razetime joined
[02:43] *** razetime left
[03:58] <gfldex_> m: my %h = :1BaRr, :2foo; my &f = { say 'f' }; say %h.first(rx:i /bar/ ).so;

[03:58] <camelia> rakudo-moar a9d9c1363: OUTPUT: ¬´True‚ê§¬ª

[03:59] *** Kaiepi joined
[04:02] <gfldex_> m: my %h = :1BaRr, :2foo; my &f = { say 'f' }; say so %h ~~ rx:i/bar/;

[04:02] <camelia> rakudo-moar a9d9c1363: OUTPUT: ¬´True‚ê§¬ª

[04:03] <gfldex_> deoac: This ^^^ is the ideomatic way. Map.ACCEPTS takes a regex.

[04:37] <SmokeMachine> deoac: have you thought on doing something like this? https://glot.io/snippets/gfzas9et1r

[04:42] *** Heptite left
[05:14] <deoac> gfldex_: Thanks, that's surprisingly easy!

[05:15] <deoac> SmokeMachine: I'm going to download and study that code.¬† I think I could learn a lot from it.¬† Thank you.

[07:16] <discord-raku-bot> <Mason> can someone please explain what is going on here?

[07:16] <discord-raku-bot> <Mason> `.trans('a'..'z' => 1..26, 'A'..'Z' => 27..52)`

[07:16] <discord-raku-bot> <Mason> specifically the fat arrow syntax with ranges in it

[07:16] <discord-raku-bot> <Mason> is it making a list of pairs with ranges in them?

[07:16] <discord-raku-bot> <Mason> are there other ways to use this data structure?

[07:17] <discord-raku-bot> <Mason> (e.g. instead of a string if I have a list of numbers, is there a `trans` like function I could call on the list?)

[07:44] *** deoac left
[08:05] *** razetime joined
[08:14] <discord-raku-bot> <p6steve> gfldex: very nice ... could also use https://raku.land/?q=Hash%3A%3AAgnostic as a jump start

[08:15] <discord-raku-bot> <p6steve> smokemachine: very nice ... could also use https://raku.land/?q=Hash%3A%3AAgnostic as a jump start

[08:17] <discord-raku-bot> <Kaiepi> <@259818303420235786> it's passing two pairs with ranges as keys and values as arguments to `trans`

[08:19] *** ToddAndMargo joined
[08:21] <ToddAndMargo> NativeCall question:¬† I have 4 bytes in a CArray representing a little ending c pointer.¬† How do I assign those byes to a Pointer?

[08:21] <ToddAndMargo> sorry, that was 8 bytes

[08:23] <discord-raku-bot> <p6steve> m: say 'yo'

[08:24] <discord-raku-bot> <p6steve> (just checking that m: robot works in Discord)

[08:24] <ToddAndMargo> yo

[08:24] <discord-raku-bot> <p6steve> m: "aaa1123bb123c".trans('a'..'z' => 'A'..'Z').say

[08:25] <discord-raku-bot> <p6steve> <@259818303420235786> not sure what is the Str you are applying .trans method to ... if you just have one Pair as arg, then the Str is translated one char at a time and the matching key becomes that value

[08:28] <discord-raku-bot> <p6steve> <@259818303420235786> since you are passing two Pairs, .trans is confused and only applies the first one

[08:28] <discord-raku-bot> <p6steve> m: "aaa1123bb123c".trans('a'..'z' => 'A'..'Z').say;

[08:28] <discord-raku-bot> <Mason> it works fine actually with two pairs

[08:28] <discord-raku-bot> <p6steve> m:"aaa1123bb123c".trans('a'..'z' => 1..26, 'A'..'Z' => 27..52).say;

[08:29] <discord-raku-bot> <Mason> and is an example I pulled out of the docs

[08:29] <discord-raku-bot> <p6steve> m: "aaa1123bb123c".trans('a'..'z' => 1..26, 'A'..'Z' => 27..52).say;

[08:30] <discord-raku-bot> <p6steve> <@259818303420235786> ah - my bad ...

[08:30] <discord-raku-bot> <Mason> m: 'QLFdFCdlLcVqdvFLnFLSSShZwptfHHhfZZZpSwfmHp'.trans('a'..'z' => 1.chr..26.chr, 'A'..'Z' => 27.chr..52.chr).ords

[08:30] <discord-raku-bot> <Mason> is an example of what I am currently doing

[08:30] <discord-raku-bot> <Mason> m: 'QLFdFCdlLcVqdvFLnFLSSShZwptfHHhfZZZpSwfmHp'.trans('a'..'z' => 1.chr..26.chr, 'A'..'Z' => 27.chr..52.chr).ords.say;

[08:32] <discord-raku-bot> <Mason> I'd love a way to do something like `*.ords.trans('a'.ord..'z'.ord => 1..26, 'A'.ord..'Z'.ord => 27..52)` instead (or, like, without the inner ord and the ords call) but what I currently have works

[08:37] <discord-raku-bot> <p6steve> m: 'QLFdFCdlLcVqdvFLnFLSSShZwptfHHhfZZZpSwfmHp'..ords.trans('a'.ord..'z'.ord => 1..26, 'A'.ord..'Z'.ord => 27..52).say;

[08:38] <discord-raku-bot> <p6steve> m: 'QLFdFCdlLcVqdvFLnFLSSShZwptfHHhfZZZpSwfmHp'.ords.trans('a'.ord..'z'.ord => 1..26, 'A'.ord..'Z'.ord => 27..52).say;

[08:38] <discord-raku-bot> <p6steve> works for me :-)

[08:39] <discord-raku-bot> <p6steve> [probably I misunderstand what you are aiming for]

[08:40] <Kaiepi> SmokeMachine, if you're making an Associative, i'd make it Iterable and err against proxying when possible https://glot.io/snippets/gfzhhdv9jj

[08:46] <Kaiepi> begh, Iterable has a bit fair bit of API that need handling. there are some extra handles that would help to have regardless

[08:51] <discord-raku-bot> <p6steve> fwiw it is a mystery to me how the Pair of Ranges works ...

[08:52] <discord-raku-bot> <p6steve> ... the docs say *In this case, neither origin nor target in the Pair are Str; the method with the Pair signature then calls the second, making this call above equivalent to "abcd".trans: ["a"] => ["zz"], (with the comma behind, making it a Positional, instead of a Pair), resulting in the behavior shown as output.* ...

[08:52] <discord-raku-bot> <p6steve> ... but that serves to deepen the mystery for me (the docs I read are https://docs.raku.org/routine/trans)

[08:53] <discord-raku-bot> <Mason> oh, I guess it does work, but it's a massive performance penalty

[08:53] <discord-raku-bot> <Mason> I'm doing like *checks notes* 3 thousand of these strings

[08:53] <discord-raku-bot> <Mason> I'm doing like *checks notes* 3000 of these strings

[08:54] <discord-raku-bot> <Mason> doing it the ord way is like a couple seconds, doing it the chr way is like a tenth of a second

[08:54] <discord-raku-bot> <Mason> I assume because all the numbers then have to be parsed as strings again

[08:59] <discord-raku-bot> <Mason> hmm, my new methodology that uses bags instead of products makes that penalty only about 3x slower

[08:59] <discord-raku-bot> <Mason> instead of like x40 it was before

[08:59] <discord-raku-bot> <p6steve> maybe you can keep the numbers as Str like 'A'.ord..'Z'.ord => '27'..'52' ?

[08:59] <discord-raku-bot> <Mason> I have to actually interpret them as numbers later on

[09:00] <discord-raku-bot> <p6steve> m: '27'.Int.say

[09:00] <discord-raku-bot> <p6steve> could save the conversion for later

[09:00] <discord-raku-bot> <Mason> that's the problem

[09:01] <discord-raku-bot> <Mason> my math routines take 4 seconds if I do it this way

[09:01] <discord-raku-bot> <Mason> they take 0.1 the other way

[09:01] <discord-raku-bot> <p6steve> m: +'27'.^name

[09:01] <discord-raku-bot> <Mason> every pre-emptively converting them, they still take 0.36 seconds instead of 0.12

[09:02] <discord-raku-bot> <Mason> it's fine, you are right it works, I misremembered, but the performance costs are a lot

[09:02] <discord-raku-bot> <p6steve> m: +'27'.^name;

[09:03] <discord-raku-bot> <Mason> m: (+'27').^name;

[09:03] <discord-raku-bot> <p6steve> tx!

[09:03] <discord-raku-bot> <p6steve> must afk for now

[09:03] <discord-raku-bot> <Mason> m: (+'27').^name.say;

[09:04] <discord-raku-bot> <Mason> yea I am deeply confused about what is happening here, would be cool to use it for other things is why I am interested

[09:56] <SmokeMachine> Kaiepi: thanks! I had forgotten about those *-KEY methods.

[10:31] *** sgrs joined
[10:41] *** razetime left
[10:43] *** human-blip joined
[10:48] *** razetime joined
[11:04] <discord-raku-bot> <Nemokosch> Hello

[11:09] *** sgrs left
[11:20] *** Kaiepi left
[11:22] <discord-raku-bot> <Nemokosch> I have to say, the documentation of trans is tragic

[11:22] <discord-raku-bot> <Nemokosch> I'm afraid the design of the method also is

[11:40] <discord-raku-bot> <p6steve> m: dd 'mykey=myval'.split('=').Hash.first

[11:40] <discord-raku-bot> <p6steve> m: dd 'mykey=myval'.split('=').Pair

[11:41] <discord-raku-bot> <p6steve> wonders if there is a single method or other, better idiom to make a .Seq of two things into a Pair

[11:43] <discord-raku-bot> <Nemokosch> .pairup?

[11:43] <discord-raku-bot> <Nemokosch> m: dd 'mykey=myval'.split('=').pairup

[11:45] <discord-raku-bot> <Nemokosch> idk if this is a better way though because you'd still need to call .first

[11:46] *** human-blip left
[11:53] <discord-raku-bot> <Nemokosch> re  %h ~~ rx:i/bar/ - here, Regex.ACCEPTS takes a Map but apparently this particular case is commutative, interestingly

[11:54] <discord-raku-bot> <Nemokosch> <@259818303420235786> anyway, trans in particular is only for strings

[11:55] <discord-raku-bot> <Nemokosch> I'm not aware of an analogous method for stuff that shouldn't be interpreted as strings

[11:55] <discord-raku-bot> <Nemokosch> You could write a map

[12:03] <discord-raku-bot> <Nemokosch> m: 'QLFdFCdlLcVqdvFLnFLSSShZwptfHHhfZZZpSwfmHp'.ords.map({ when 'a'.ord..'z'.ord { $_ - 'a'.ord + 1 };  when 'A'.ord..'Z'.ord { $_ - 'A'.ord + 27 }; $_ }).say;

[12:05] <discord-raku-bot> <Nemokosch> if that was your primary interest: no, a Pair of Ranges isn't a "smart" data structure; all magic was done by trans itself - mainly to mimic the Unix `tr` command

[12:09] <discord-raku-bot> <Nemokosch> maybe it's a good idea to generate a Map from the mappings üòõ

[13:48] *** Kaiepi joined
[13:50] *** gfldex_ is now known as gfldex

[15:24] *** Heptite joined
[15:55] *** deoac joined
[16:35] *** razetime left
[16:39] <discord-raku-bot> <p6steve> m: say my Pair $p .= new( |'mykey=myval'.split('=') );

[16:41] <discord-raku-bot> <p6steve> ^ that is maybe more natural than .Hash.first ...

[16:41] <discord-raku-bot> <p6steve> ^ note the '|' to slip in the Seq

[16:42] <discord-raku-bot> <Nemokosch> not a big fan of this .= new(...) paradigm

[17:05] <discord-raku-bot> <p6steve> odd, because it's one of my favourites

[17:05] <discord-raku-bot> <p6steve> ;-)

[17:05] <discord-raku-bot> <p6steve> you could just write my Thing $t = Thing.new() every time

[17:05] <discord-raku-bot> <p6steve> if you like typing

[17:05] <discord-raku-bot> <p6steve> and writing things twice

[17:09] <discord-raku-bot> <Nemokosch> I usually don't use type annotations

[17:10] <discord-raku-bot> <Nemokosch> and I particularly don't like to use the constructor for something as banal as a Pair

[17:14] <discord-raku-bot> <p6steve> I agree, but I prefer Pair.new to Hash.first when I am working with a pair from a config string like 'key=value' since it has lower wattage

[17:18] <discord-raku-bot> <p6steve> well I use code in general (and raku in particular) to whip up ideas quickly and then, as it gets unmanageable, to chunk into pieces and then assemble them ... as I do this, the structure emerges and I like to use OO to "describe" the pieces --- later on, while I was initially resistant, I have grown to like class types as a way to convey this information ... but ymmv ;-)

[17:21] <discord-raku-bot> <Nemokosch> what does ymmv stand for? üòÑ

[17:41] <discord-raku-bot> <p6steve> https://www.urbandictionary.com/define.php?term=ymmv

[18:27] <discord-raku-bot> <Nemokosch> <:cameliathink:897316667653247057>

[18:53] *** Kaiepi left
[18:54] *** Kaiepi joined
[19:42] <deoac> m:¬† ¬† ¬†say gather for (:x<a b>, :y<a b>) -> $p {take (|$p.invert)};

[19:42] <camelia> rakudo-moar a9d9c1363: OUTPUT: ¬´(a => x b => x a => y b => y)‚ê§¬ª

[19:42] <deoac> ¬† ¬† say gather for (:x<a b>, :y<a b>) -> $p {take |$p.invert};

[19:42] <deoac> m:¬† ¬† say gather for (:x<a b>, :y<a b>) -> $p {take |$p.invert};

[19:42] <camelia> rakudo-moar a9d9c1363: OUTPUT: ¬´((a => x b => x) (a => y b => y))‚ê§¬ª

[19:42] <deoac> Why are the outputs of the two statements different?¬† Why do the parens around |$p.invert matter?

[19:48] <discord-raku-bot> <Nemokosch> you know what | does, right?

[19:49] <discord-raku-bot> <Nemokosch> oh, perhaps I'm not even asking the most important question

[19:49] <discord-raku-bot> <Nemokosch> do you know that `f x` and `f (x)` are not the same in Raku in general?

[19:56] <deoac> Ah, I'm passing different things to `take` in each case.¬† Got it. Thanks.

[19:56] <discord-raku-bot> <Nemokosch> yep, the space makes a difference here between f(x) and f (x)

[20:14] *** Heptite left
