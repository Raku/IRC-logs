[00:37] *** MasterDuke joined
[01:19] *** deoac joined
[01:21] *** deoac left
[02:23] <discord-raku-bot> <Superstart033> Whatâ€™s the best way to start with Raku?

[02:29] <MasterDuke> m: start say "this way perhaps"

[02:29] <camelia> rakudo-moar 84abeb52b: ( no output )

[02:44] *** Ebudae joined
[02:48] *** Heptite left
[03:54] *** Ebudae left
[06:28] *** equinox joined
[07:33] *** razetime joined
[07:58] <discord-raku-bot> <Nemokosch> phunny

[08:00] <discord-raku-bot> <Nemokosch> depends on your former knowledge I think

[08:00] <discord-raku-bot> <Nemokosch> doesn't explain ::Type kind of captures, I think

[08:04] <discord-raku-bot> <Nemokosch> I mean, if you are familiar with programming, especially a scripting language (JS, Python, Ruby, possibly Perl), you could do what I like to do: find reasons to use Raku and pick up structures on the way, asking around

[08:10] *** dakkar joined
[08:40] *** razetime left
[11:00] *** equinox2 joined
[11:03] *** equinox left
[11:57] *** razetime joined
[12:37] *** equinox2 left
[13:16] <discord-raku-bot> <masukomi> yeah, i'm going to second what <@297037173541175296> suggested. I think the best way to learn _any_ new language (assuming you know how to program A language relatively well) is to find something you want to build in it and start building.  

[13:16] <discord-raku-bot> <masukomi> If you're sticking within OOP / Procedural paradigms (which most people are) then it's really just a matter of going "ok i need a loop. What is this language's syntax for a loop"... or case statement, or whatever." From a user perspective they're all essentially the same just with different sigils to express the same ideas. 

[13:16] <discord-raku-bot> <masukomi> The only time there's notable... impedance mismatch between your knowledge and how it's invoked is when you start crossing the border between OOP and Functional programming. 

[13:16] <discord-raku-bot> <masukomi> -- 

[13:16] <discord-raku-bot> <masukomi> One additional thing I do which i think helps learning many languages is to write unit tests for how i _think_ a thing works. Like really _really_ simple things. The result both proves/disproves my understanding AND acts as a reference for later on when i'm like "wait, how do i do a case statement in this language?"

[13:17] <discord-raku-bot> <masukomi> yeah, i'm going to second what <@297037173541175296> suggested. I think the best way to learn _any_ new language (assuming you know how to program _A_ language relatively well) is to find something you want to build in it and start building.  

[13:17] <discord-raku-bot> <masukomi> If you're sticking within OOP / Procedural paradigms (which most people are) then it's really just a matter of going "ok i need a loop. What is this language's syntax for a loop"... or case statement, or whatever." From a user perspective they're all essentially the same just with different sigils to express the same ideas. 

[13:17] <discord-raku-bot> <masukomi> The only time there's notable... impedance mismatch between your knowledge and how it's invoked is when you start crossing the border between OOP and Functional programming. 

[13:17] <discord-raku-bot> <masukomi> -- 

[13:17] <discord-raku-bot> <masukomi> One additional thing I do which i think helps learning many languages is to write unit tests for how i _think_ a thing works. Like really _really_ simple things. The result both proves/disproves my understanding AND acts as a reference for later on when i'm like "wait, how do i do a case statement in this language?"

[13:17] <discord-raku-bot> <masukomi> yeah, i'm going to second what <@297037173541175296> suggested. I think the best way to learn _any_ new language (assuming you know how to program _A_ language relatively well) is to find something you want to build in it and start building.  

[13:17] <discord-raku-bot> <masukomi> If you're sticking within OOP / Procedural paradigms (which most people are) then it's really just a matter of going "ok i need a loop. What is this language's syntax for a loop"... or case statement, or whatever. From a user perspective they're all essentially the same just with different sigils to express the same ideas. 

[13:17] <discord-raku-bot> <masukomi> The only time there's notable... impedance mismatch between your knowledge and how it's invoked is when you start crossing the border between OOP and Functional programming. 

[13:17] <discord-raku-bot> <masukomi> -- 

[13:17] <discord-raku-bot> <masukomi> One additional thing I do which i think helps learning many languages is to write unit tests for how i _think_ a thing works. Like really _really_ simple things. The result both proves/disproves my understanding AND acts as a reference for later on when i'm like "wait, how do i do a case statement in this language?"

[13:18] <discord-raku-bot> <masukomi> yeah, i'm going to second what <@297037173541175296> suggested. I think the best way to learn _any_ new language (assuming you know how to program _A_ language relatively well) is to find something you want to build in it and start building.  

[13:18] <discord-raku-bot> <masukomi> If you're sticking within OOP / Procedural paradigms (which most people are) then it's really just a matter of going "ok i need a loop. What is this language's syntax for a loop"... or case statement, or whatever. From a user perspective they're all essentially the same. They just use different sigils to express the same ideas. 

[13:18] <discord-raku-bot> <masukomi> The only time there's notable... impedance mismatch between your knowledge and how it's invoked is when you start crossing the border between OOP and Functional programming. 

[13:18] <discord-raku-bot> <masukomi> -- 

[13:18] <discord-raku-bot> <masukomi> One additional thing I do which i think helps learning many languages is to write unit tests for how i _think_ a thing works. Like really _really_ simple things. The result both proves/disproves my understanding AND acts as a reference for later on when i'm like "wait, how do i do a case statement in this language?"

[13:19] <discord-raku-bot> <masukomi> yeah, i'm going to second what <@297037173541175296> suggested. I think the best way to learn _any_ new language (assuming you know how to program _A_ language relatively well) is to find something you want to build in it and start building.  

[13:19] <discord-raku-bot> <masukomi> If you're sticking within OOP / Procedural paradigms (which most people are) then it's really just a matter of going "ok i need a loop. What is this language's syntax for a loop"... or case statement, or whatever. From a user perspective they're all essentially the same. They just use different sigils to express the same ideas. 

[13:19] <discord-raku-bot> <masukomi> The only time there's notable... impedance mismatch between your knowledge and how it's invoked is when you start crossing the border between OOP and Functional programming. 

[13:19] <discord-raku-bot> <masukomi> -- 

[13:19] <discord-raku-bot> <masukomi> One additional thing I do which i think helps learning many languages is to write unit tests for how i _think_ a thing works. Like really _really_ simple things. The result both proves/disproves my understanding AND acts as a reference for later on when i'm like "wait, how do i do a case statement in this language?" it also just gets me actually typing more code in that language, instead of just thinking 

[13:34] *** jgaz joined
[14:58] *** equinox joined
[15:35] *** razetime left
[16:01] *** Heptite joined
[16:34] *** dakkar left
[16:44] *** equinox left
[16:59] *** Heptite left
[17:03] *** Heptite joined
[17:04] *** equinox joined
[20:39] *** equinox left
[22:03] *** jgaz left
