[01:49] *** Kaiepi left
[03:08] *** Kaiepi joined
[06:04] *** Kaiepi left
[06:41] *** lizmat joined
[09:31] <discord-raku-bot> <Nemokosch#9980> Hi

[09:31] <discord-raku-bot> <Nemokosch#9980> so I wanted to permutate a string

[09:31] <discord-raku-bot> <Nemokosch#9980> ```$test, { .comb.List andthen .[1..*].join ~ .[0] } ...^ * eq $test```

[09:31] <discord-raku-bot> <Nemokosch#9980> the problem is, this terminates right before doing anything; the condition is evaluated right away

[09:33] <discord-raku-bot> <Nemokosch#9980> of course this is Raku so I could quickly invent a stateful workaround:

[09:33] <discord-raku-bot> <Nemokosch#9980> ```$test, { .comb.List andthen .[1..*].join ~ .[0] } ...^ { state $testcount = 0; $statecount++ if $_ eq $test; $statecount == 2 }```

[09:33] <discord-raku-bot> <Nemokosch#9980> but let's be honest, this is anything but nice

[09:33] <discord-raku-bot> <Nemokosch#9980> how to do it better?

[09:34] <discord-raku-bot> <Nemokosch#9980> either the string ~~permutation~~ cycling

[09:34] <discord-raku-bot> <Nemokosch#9980> or series that don't cut too early

[09:35] <discord-raku-bot> <Nemokosch#9980> confer ```1, 2, 3 ... ^1```, what if someone doesn't want to skip explicitly listed elements or something

[10:20] <lizmat> Nemokosch: not sure what your input and your expected output is

[10:23] <discord-raku-bot> <Nemokosch#9980> if I pass 'almafa', it should give ('almafa', 'lmafaa', 'mafaal', 'afaalm', 'faalma', 'aalmaf')

[10:23] <discord-raku-bot> <Nemokosch#9980> as opposed to nothing

[10:23] <discord-raku-bot> <Nemokosch#9980> sorry if I mistyped any items, I just quickly wrote it by hand xD you get the idea

[10:34] *** avuserow left
[11:03] <lizmat> m: dd "almafa".comb.permutations>>.join.unique

[11:03] <camelia> rakudo-moar ab8ef0bfc: OUTPUT: ¬´("almafa", "almaaf", "almfaa", "alamfa", "alamaf", "alafma", "alafam", "alaamf", "alaafm", "alfmaa", "alfama", "alfaam", "amlafa", "amlaaf", "amlfaa", "amalfa", "amalaf", "amafla", "amafal", "amaalf", "amaafl", "amflaa", "amfala", "amfaal", "aalmfa", ‚Ä¶¬ª

[11:04] <lizmat> Nemokosch ^^

[11:05] <discord-raku-bot> <Nemokosch#9980> I first phrased it wrong

[11:06] <discord-raku-bot> <Nemokosch#9980> this time around, it has to be cycling, not any permutation

[11:06] <discord-raku-bot> <Nemokosch#9980> maaaybe not unrelated to a certain challenge, I don't know üòõ

[11:08] <lizmat> aah... ok

[11:14] <discord-raku-bot> <Nahita#3882> ```raku

[11:14] <discord-raku-bot> <Nahita#3882> >>> gather given $str.comb.cache -> $sc { take $sc.rotate($_).join for ^$sc }

[11:14] <discord-raku-bot> <Nahita#3882> (almafa lmafaa mafaal afaalm faalma aalmaf)

[11:14] <discord-raku-bot> <Nahita#3882> ```

[11:16] <discord-raku-bot> <Nemokosch#9980> how did you manage to put this many syntax I'm not used to in but one line? üòÖ

[11:17] <discord-raku-bot> <Nemokosch#9980> so given can take a pointy block?

[11:18] <lizmat> m: my $s = "almafa"; dd ($s, { .substr(*-1) ~ .chop } ... *).head($s.chars)

[11:18] <camelia> rakudo-moar ab8ef0bfc: OUTPUT: ¬´("almafa", "aalmaf", "faalma", "afaalm", "mafaal", "lmafaa").Seq‚ê§¬ª

[11:20] <lizmat> re syntax:  easy  :-)

[11:20] <discord-raku-bot> <Nemokosch#9980> damn markdown... trynna figure out where the asterisks were

[11:20] <discord-raku-bot> <Nemokosch#9980> .substr(*-1) that's one

[11:20] <discord-raku-bot> <Nemokosch#9980> after ... maybe?

[11:23] <discord-raku-bot> <Nahita#3882> after `given` comes a block (if not used as a statement modifier); that block happens to be a pointy block here so that instead of contextualizing to $_, it does to $sc because i needed $sc both in for and its body

[12:03] *** Kaiepi joined
[12:38] *** MasterDuke joined
[12:51] *** archenoth left
[12:52] *** archenoth joined
[13:02] <discord-raku-bot> <Morfent#9811> it's worth taking a look at `src/Perl6/Grammar.nqp` in rakudo, searching for `_modifier`, and seeing the ways those kinds of syntax can be combined

[13:04] <discord-raku-bot> <Morfent#9811> it's worth taking a look at `src/Perl6/Grammar.nqp` in rakudo, searching for `_mod`, and seeing the ways those kinds of syntax can be combined

[13:04] <discord-raku-bot> <Morfent#9811> it's worth taking a look at `src/Perl6/Grammar.nqp` in rakudo, searching for `statement_`, and seeing the ways those kinds of syntax can be combined

[13:30] *** jgaz joined
[14:14] *** lizmat left
[14:52] *** jgaz left
[14:56] *** jgaz joined
[15:24] *** avuserow joined
[16:01] *** jgaz left
[17:25] *** lizmat joined
[18:45] <discord-raku-bot> <Œîd Meliora#3827> Still exploring this wonderful language

[18:45] <discord-raku-bot> <Œîd Meliora#3827> It's sad that it isn't a bit more popular

[21:48] *** lizmat left
[22:04] <discord-raku-bot> <Nemokosch#9980> All of these codes are good for the purpose

[22:06] <discord-raku-bot> <Nemokosch#9980> I wish they could work with the first recurring element, though

[22:31] <discord-raku-bot> <Anton Antonov#7232> How can I get the names of the multi methods in a role? ‚Äå‚Äå `MyRole.^methods` gives only the methods, but not the multi-methods.

[22:37] <discord-raku-bot> <Nemokosch#9980> are you thinking of all candidates or just one entry for a multi name?

[22:43] <discord-raku-bot> <stevied#8273> how do I get this to return the value 5?

[22:43] <discord-raku-bot> <stevied#8273> ```

[22:43] <discord-raku-bot> <stevied#8273> class Nut {

[22:43] <discord-raku-bot> <stevied#8273>     has Int $!value;

[22:43] <discord-raku-bot> <stevied#8273>     method get_value {

[22:43] <discord-raku-bot> <stevied#8273>         say $!value;

[22:43] <discord-raku-bot> <stevied#8273>     }

[22:43] <discord-raku-bot> <stevied#8273> }

[22:43] <discord-raku-bot> <stevied#8273> class Fnut is Nut {

[22:43] <discord-raku-bot> <stevied#8273>     submethod BUILD {

[22:43] <discord-raku-bot> <stevied#8273>         :value(5),

[22:43] <discord-raku-bot> <stevied#8273>     };

[22:44] <discord-raku-bot> <stevied#8273> it just returns `Int`

[22:45] <discord-raku-bot> <stevied#8273> how do I get this to return the value 5?

[22:45] <discord-raku-bot> <stevied#8273> ```

[22:45] <discord-raku-bot> <stevied#8273> class Nut {

[22:45] <discord-raku-bot> <stevied#8273>     has Int $!value;

[22:45] <discord-raku-bot> <stevied#8273>     method get_value {

[22:45] <discord-raku-bot> <stevied#8273>         return $!value;

[22:45] <discord-raku-bot> <stevied#8273>     }

[22:45] <discord-raku-bot> <stevied#8273> }

[22:45] <discord-raku-bot> <stevied#8273> class Fnut is Nut {

[22:45] <discord-raku-bot> <stevied#8273>     submethod BUILD {

[22:45] <discord-raku-bot> <stevied#8273>         :value(5),

[22:45] <discord-raku-bot> <stevied#8273>     };

[22:49] <discord-raku-bot> <Rog#2017> the way object construction works in Raku is a little funky

[22:49] <discord-raku-bot> <Rog#2017> the implementation of `new` you inherit from `Any` basically calls BUILD on each type in the hiearchy

[22:49] <discord-raku-bot> <Rog#2017> the implementation of `new` you inherit from `Any` basically calls BUILD on each type in the hierarchy

[22:49] <discord-raku-bot> <stevied#8273> yeah, i've tried a few different things and couldn't get anything to work. couldn't find and documentation on this, either

[22:49] <discord-raku-bot> <Rog#2017> so I think what you need here is to override new

[22:50] <discord-raku-bot> <Rog#2017> lemme fiddle with it for a sec

[22:50] <discord-raku-bot> <stevied#8273> to set a private variable, though, it says I need to use BUILD

[22:51] <discord-raku-bot> <stevied#8273> I think I encountered this problem a couple of months back. forget what I did.

[22:56] <discord-raku-bot> <Anton Antonov#7232> All candidates. I am trying to make automatically UML diagrams like these :

[22:57] <discord-raku-bot> <Anton Antonov#7232> Basically, `method_names` works on classes but not on roles...

[22:57] <discord-raku-bot> <Nemokosch#9980> https://docs.raku.org/routine/candidates

[22:57] <discord-raku-bot> <Nemokosch#9980> what about this?

[23:04] <discord-raku-bot> <Anton Antonov#7232> No, it does not work: 

[23:04] <discord-raku-bot> <Anton Antonov#7232> ```

[23:04] <discord-raku-bot> <Anton Antonov#7232> ‚Äå‚ÄåML::StreamsBlendingRecommender::UtilityFunctions.^methods

[23:04] <discord-raku-bot> <Anton Antonov#7232> #(ingestCSVFile)

[23:04] <discord-raku-bot> <Anton Antonov#7232> ‚Äå‚Äå

[23:04] <discord-raku-bot> <Anton Antonov#7232> ML::StreamsBlendingRecommender::UtilityFunctions.candidates

[23:04] <discord-raku-bot> <Anton Antonov#7232> #No such method 'candidates' for invocant of type

[23:04] <discord-raku-bot> <Anton Antonov#7232> #'ML::StreamsBlendingRecommender::UtilityFunctions'

[23:04] <discord-raku-bot> <Anton Antonov#7232> #  in block <unit> at REPL evaluation line 1

[23:04] <discord-raku-bot> <Anton Antonov#7232> #  in block  at REPL evaluation line 0

[23:04] <discord-raku-bot> <Anton Antonov#7232> ‚Äå‚Äå

[23:04] <discord-raku-bot> <Anton Antonov#7232> ML::StreamsBlendingRecommender::UtilityFunctions.^candidates

[23:04] <discord-raku-bot> <Anton Antonov#7232> # ((UtilityFunctions))

[23:04] <discord-raku-bot> <Anton Antonov#7232> ```

[23:04] <discord-raku-bot> <Rog#2017> I'm sure this isn't the answer you really want, but in your simplified example the best solution is to make it `$.value` instead (then ofc `get_value` becomes redundant)

[23:04] <discord-raku-bot> <Rog#2017> note that, without `is rw` on the value, it can't be modified outside the class

[23:04] <discord-raku-bot> <Anton Antonov#7232> <@297037173541175296> At this point, I do not think it can be done. I read (some part of) the documentation and this source code: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp .

[23:05] <discord-raku-bot> <Anton Antonov#7232> <@297037173541175296> At this point, I do not think it can be done. I read (some part of) the documentation and this source code: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp .

[23:06] <discord-raku-bot> <stevied#8273> yeah I realize I could use the `.` twigil. trying to see how to use with the `!` twigil

[23:08] <discord-raku-bot> <stevied#8273> still haven't quite wrapped my head around why you'd ever use `!` twigil vs. `.`. I'm trying to figure it out.

[23:08] <discord-raku-bot> <stevied#8273> i guess `.` gives you an accessor

[23:08] <discord-raku-bot> <Rog#2017> Yeah, same reason you'd use `private` in other OO languages

[23:08] <discord-raku-bot> <stevied#8273> the docs say there are no private attributes, though

[23:09] <discord-raku-bot> <Rog#2017> I'm sure there is some good philosophical reason that !-twigiled attributes are not accessible to child classes

[23:09] <discord-raku-bot> <Rog#2017> but idk it off the top of my head

[23:10] <discord-raku-bot> <stevied#8273> ok, thanks. I'm gonna hunt for some code that I wrote a couple of months ago that I think did solve this problem. I'll post it if I find it

[23:12] <discord-raku-bot> <Rog#2017> Got it <@563790557831495691> -

[23:12] <discord-raku-bot> <Rog#2017> ```class Nut {

[23:12] <discord-raku-bot> <Rog#2017>     has Int $!value;

[23:12] <discord-raku-bot> <Rog#2017>     method get_value {

[23:12] <discord-raku-bot> <Rog#2017>         return $!value;

[23:12] <discord-raku-bot> <Rog#2017>     }

[23:12] <discord-raku-bot> <Rog#2017>     submethod BUILD(Int :$!value) {    }

[23:12] <discord-raku-bot> <Rog#2017> }

[23:12] <discord-raku-bot> <Rog#2017> class Fnut is Nut {

[23:12] <discord-raku-bot> <Rog#2017>     method new() {

[23:12] <discord-raku-bot> <Rog#2017>         self.bless(value => 5)

[23:12] <discord-raku-bot> <Rog#2017>     }

[23:12] <discord-raku-bot> <Rog#2017> }

[23:12] <discord-raku-bot> <Rog#2017> say Fnut.new.get_value;

[23:14] <discord-raku-bot> <Rog#2017> Also I think I just realized why this is the case: subclassing shouldn't really modify any existing behavior, just extend it, so accessing private fields is a no-no

[23:14] <discord-raku-bot> <Rog#2017> of course, you can still do it more directly with the MOP

[23:14] <discord-raku-bot> <Nemokosch#9980> Not quite sure what is going on but I doubt `ML::StreamsBlendingRecommender::UtilityFunctions` was a routine

[23:16] <discord-raku-bot> <Nemokosch#9980> Ironically enough, seems like the answer is really "you just shouldn't do this", like so often on SO üòÑ

[23:18] <discord-raku-bot> <stevied#8273> <@102059593697361920> sorry, on phone. will try in a bit. thanks!

[23:26] <discord-raku-bot> <stevied#8273> <@102059593697361920> yup, works for me, too. thanks again!

[23:27] <discord-raku-bot> <stevied#8273> that's weird that the submethod has an empty body. I don't get that

[23:33] <discord-raku-bot> <Rog#2017> Ah, that‚Äôs because I named the parameter with a twigil to match the attribute‚Äôs name

[23:33] <discord-raku-bot> <Rog#2017> So that parameter is the same variable as the attribute

[23:33] <discord-raku-bot> <stevied#8273> yeah, I didn't know you could do that

[23:35] <discord-raku-bot> <stevied#8273> thought you had to do `:value(5)` or something like that

[23:35] <discord-raku-bot> <Rog#2017> Beat little shorthand

[23:35] <discord-raku-bot> <Rog#2017> Neat little shorthand

[23:35] <discord-raku-bot> <stevied#8273> or actually, `:value($value)`

[23:35] <discord-raku-bot> <Rog#2017> Nah the :key(value) syntax is for constructing Pairs

[23:35] <discord-raku-bot> <stevied#8273> so does that work just for the BUILD method?

[23:35] <discord-raku-bot> <Rog#2017> Works for any method afaik

[23:35] <discord-raku-bot> <stevied#8273> huh

[23:37] <discord-raku-bot> <stevied#8273> so which method is getting called first, the new() or BUILD()?

[23:37] <discord-raku-bot> <Rog#2017> new

[23:37] <discord-raku-bot> <stevied#8273> ok, so new() creates the object with bless, then the parent BUILD is called

[23:37] <discord-raku-bot> <Rog#2017> Then bless ultimately calls BUILD

[23:37] <discord-raku-bot> <Rog#2017> Yep

[23:39] <discord-raku-bot> <stevied#8273> yeah, I find  Raku's construction to be super confusing. I'm mostly used to Moose from Perl. There are similarities, and then there are points where things are wildly divergent.

[23:39] <discord-raku-bot> <stevied#8273> hard for me to keep track of

[23:39] <discord-raku-bot> <Rog#2017> I never did use Moose but yeah, Raku is very different from most OO languages in how it handles construction

[23:41] <discord-raku-bot> <Rog#2017> Coming from something like Java or C++ or C# is a culture shock

[23:41] <discord-raku-bot> <Rog#2017> And I think it stems from a more fundamental difference in how the designers of Raku viewed OO

[23:44] <discord-raku-bot> <stevied#8273> alright, well, I'm back on track. I'm writing all my classes to be as restrictive as possible so I can wrap my head around things better and figure out when it's best to use `!` and `.`. kind of a trial and error approach to it.

[23:45] <discord-raku-bot> <Rog#2017> I don‚Äôt know my programming languages history as well as I should but I believe Raku takes inspiration more directly from Smalltalk while most of your popular OO languages stem from the looser interpretation popularized by C++

[23:46] <discord-raku-bot> <stevied#8273> I only learned old school perl OO. then I learned Moose which was a godsend. I've only dabbled with OO in other languages. so still somewhat of a newbie to it

[23:47] <discord-raku-bot> <Rog#2017> One idea that may help is if you ever find yourself writing a setter method, you‚Äôre violating the principle of encapsulation, unless the class you‚Äôre writing is merely a data container

[23:47] <discord-raku-bot> <Rog#2017> I think the philosophy is called the actor pattern

[23:47] <discord-raku-bot> <Rog#2017> Or at least is related

[23:49] <discord-raku-bot> <Rog#2017> It‚Äôs far more than just this ofc but I‚Äôm too tired this evening to give a broader description :P

[23:52] <discord-raku-bot> <stevied#8273> yeah, I know how to use classes, I just don't totally grok the philosophy of them. like I know encapsulation is good, but I don't get why. I mostly just write very simple programs. I'm not working with a team of people on a large codebase. But I still want to strive to write good quality code.

