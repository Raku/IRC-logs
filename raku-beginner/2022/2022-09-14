[00:40] *** archenoth left
[01:57] *** frost joined
[03:40] *** Heptite left
[08:00] *** dakkar joined
[08:40] *** archenoth joined
[08:59] *** frost left
[10:00] <jaguart> ll

[10:00] <jaguart> ll

[10:57] *** frost joined
[12:50] <discord-raku-bot> <stevied> is there any good reason I can do `$str.chop(1)` but not `$str.trans('a' => 'b')`

[12:50] <discord-raku-bot> <stevied> the former changes the string in place, the latter does not. Trying to figure out what the reason for the inconsistency is so I can remember it

[12:52] <discord-raku-bot> <Kaiepi> that's surprising

[12:52] <discord-raku-bot> <Kaiepi> m:```

[12:52] <discord-raku-bot> <Kaiepi> my $s = "chopped\n";

[12:52] <discord-raku-bot> <Kaiepi> $s.chop: 1;

[12:52] <discord-raku-bot> <Kaiepi> print $s

[12:52] <discord-raku-bot> <Kaiepi> ```

[12:54] <discord-raku-bot> <yabobay> i don't remember which language this was, but there is one language where str.method() doesn't modify the string in place, but str.!method() does (...or something like that, where you put some punctuation somewhere in the method name)

[12:54] <discord-raku-bot> <stevied> i think ruby does that

[12:55] <discord-raku-bot> <yabobay> yea probably that

[12:55] <Kaiepi> this could be a break

[12:56] <discord-raku-bot> <yabobay> i wonder how it's done in ruby. do they just have multiple functions, or maybe it's just syntactic sugar for just assigning to the same variable

[12:56] <Kaiepi> no bisectable in here, but there is in #raku

[13:00] <discord-raku-bot> <stevied> oh, wait, my bad. $name.chop(1) does not modify $name

[13:00] <discord-raku-bot> <stevied> I was reading the code I had wrong. sorry 😦

[13:02] <discord-raku-bot> <Kaiepi> ah right, shell prints % or whatever w/o the newline

[13:18] <lizmat> m: my $a = "foo"; $a .= chop; dd $a

[13:18] <camelia> rakudo-moar d0ec99a86: OUTPUT: «Str $a = "fo"␤»

[13:18] <lizmat> ^^ to do it in place

[13:18] <lizmat> sorta

[14:11] *** kueppo joined
[14:15] *** frost left
[14:43] *** Heptite joined
[14:52] *** Heptite left
[15:04] *** Heptite joined
[15:04] *** kueppo left
[16:08] <discord-raku-bot> <Rog> Yeah afaik nothing actually changes strings in place except smartmatch with destructive substitution

[16:08] <discord-raku-bot> <Rog> And even that doesn’t mutate the original string technically I think

[16:09] <discord-raku-bot> <Rog> In the sense that the underlying data is not shuffled around, just a new value generated and stuck in the container

[16:40] *** dakkar left
[19:54] *** archenoth left
[19:54] *** archenoth joined
[20:34] *** Oshawott joined
[20:35] *** Oshawott left
[20:37] *** archenoth left
[23:45] <guifa> Rog: that's correct.   Strings are immutable in Raku.  If you try to do the in place substitution on a bound variable, you'll have issues.

[23:45] <guifa> m: my $a = 'foo'; $a ~~ s/f/F/; say $a; # no problems

[23:45] <camelia> rakudo-moar d0ec99a86: OUTPUT: «Foo␤»

[23:45] <guifa> m: my $a := 'foo'; $a ~~ s/f/F/; say $a; # oops

[23:45] <camelia> rakudo-moar d0ec99a86: OUTPUT: «Cannot modify an immutable Str (foo)␤  in block <unit> at <tmp> line 1␤␤»

