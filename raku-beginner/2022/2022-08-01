[00:09] *** deoac joined
[00:38] *** deoac left
[00:53] *** deoac joined
[03:04] *** frost joined
[03:16] *** frost left
[03:35] *** frost joined
[04:02] *** saint- joined
[06:38] *** Oshawott left
[06:39] *** Oshawott joined
[06:51] *** SmokeMachine joined
[06:55] *** crystalfrost[m] joined
[07:49] *** dakkar joined
[09:20] <summer> how do you test that a value is in a list?

[09:20] <summer> I went with @.first(thing,:k).defined;

[09:22] <summer> (Nil,).first(Nil,:k).defined;  # True

[09:22] <summer> but is there something nicer?

[09:26] <discord-raku-bot> <Nemokosch> well, using (elem) (also known as ‚àà) is nicer, no?

[09:28] <discord-raku-bot> <Nemokosch> m: my @values = (1 .. 10).roll: 5; dd @values; dd 1 (elem) @values;

[09:28] <discord-raku-bot> <Nemokosch> let's try this a couple of times

[09:28] <dakkar> or `$value ~~ @list`

[09:29] <dakkar> (which may be faster if ‚àà converts the list to a set internally‚Ä¶)

[09:30] <discord-raku-bot> <Nemokosch> that doesn't seem alright

[09:30] <discord-raku-bot> <Nemokosch> m: 1 ~~ (1, 2, 3) andthen .say

[09:30] <discord-raku-bot> <Nemokosch> anyway, that doesn't work, and that's according to the specs

[09:31] <dakkar> ooh!

[09:31] <dakkar> works for ranges, not lists‚Ä¶

[09:32] <discord-raku-bot> <Nemokosch> so yeah, what solutions do we have

[09:32] <discord-raku-bot> <Nemokosch> we have .first

[09:32] <discord-raku-bot> <Nemokosch> we have (elem)

[09:32] <dakkar> https://docs.raku.org/routine/ACCEPTS#(List)_method_ACCEPTS I was confused, thank you for checking

[09:32] <discord-raku-bot> <Nemokosch> m: for ^10 { my @values = (1 .. 10).roll: 5; dd @values; dd @values ~~ (*, 1, *); }

[09:33] <discord-raku-bot> <Nemokosch> meh, too bad

[09:33] <dakkar> I'd say ‚àà is the clearest option

[09:33] <summer> hyperwhatevers for that approach

[09:34] <discord-raku-bot> <Nemokosch> oh okay

[09:34] <discord-raku-bot> <Nemokosch> m: for ^10 { my @values = (1 .. 10).roll: 5; dd @values; dd @values ~~ (**, 1, **); }

[09:34] <discord-raku-bot> <Nemokosch> nice üôÇ

[09:34] <discord-raku-bot> <Nemokosch> so yeah, this is one with smartmatching

[09:34] <discord-raku-bot> <Nemokosch> I want one with junctions as well

[09:35] <summer> @.contains: 1; üòé

[09:36] <discord-raku-bot> <Nemokosch> m: for ^10 { my @values = (1 .. 10).roll: 5; dd @values; dd so @values.any eqv 1; }

[09:36] <discord-raku-bot> <Nemokosch> Well, then contains is the clearest option

[09:37] <discord-raku-bot> <Nahita> nope, `.contains` doesn't work

[09:37] <summer> @ ~~ /\b 1 \b/ 

[09:38] <discord-raku-bot> <Nahita> redirects to (elem) :p

[09:38] <discord-raku-bot> <Nemokosch> List inherits from Cool

[09:38] <discord-raku-bot> <Nemokosch> so it's textual containment apparently

[09:38] <discord-raku-bot> <Nemokosch> then yeah, backing off from contains

[09:39] <discord-raku-bot> <Nemokosch> Then yeah, there is `first`, the junction way, `(elem)` and the smartmatch way

[09:39] <discord-raku-bot> <Nahita> there's also `.grep(...).so`

[09:40] <discord-raku-bot> <Nahita> junction one doesn't yet shourtcircuit, `grep` does, so i use that sometimes...

[09:40] <discord-raku-bot> <Nahita> junction one doesn't yet shortcircuit, `grep` does, so i use that sometimes...

[09:40] <discord-raku-bot> <Nemokosch> interesting

[09:40] *** discord-raku-bot left
[09:40] *** discord-raku-bot joined
[09:41] <discord-raku-bot> <Summer> oh grep is lazy?

[09:41] *** summer left
[09:42] <discord-raku-bot> <Nemokosch> almost everything is lazy, or better said, is potentially lazy

[09:42] <discord-raku-bot> <Nemokosch> grep, map, Z, X

[09:42] <discord-raku-bot> <Nemokosch> the hyper meta-operator generates lists, on the other hand

[09:44] <discord-raku-bot> <Summer> wait, is `so` la boolifying a lazy list lazy?

[09:45] <discord-raku-bot> <Nemokosch> I think `so` returns True if there is at least one element

[09:46] <discord-raku-bot> <Nemokosch> that seem pretty easy

[09:46] <discord-raku-bot> <Nahita> yeah `so` makes it give a boolean result as soon as possible

[09:47] <discord-raku-bot> <Nahita> the `any` equivalent is therefore directly transfarable to there; but for `all`, i visit De Morgan :\|

[09:47] <discord-raku-bot> <Nahita> negate the predicate and put `.not` instead of so

[09:47] <lizmat> all shortcuts as soon as it sees a False value

[09:49] <discord-raku-bot> <Nemokosch> but then doesn't any do the same with True?

[09:51] <discord-raku-bot> <Nahita> lizmat: but when i do `(0, |(1 xx 100_000_000)).all.so` it hangs

[09:52] <lizmat> that's probably in the *creation* of the Junction

[09:52] <lizmat> m: (0, |(1 xx 100_000_000)).all

[09:53] <camelia> rakudo-moar 556bf98da: OUTPUT: ¬´(timeout)¬ª

[09:53] <discord-raku-bot> <Nahita> `(0, |(1 xx 100_000_000)).grep(* != 0).not` is instant on the other hand.

[09:53] <discord-raku-bot> <Nahita> 2022.04 i tried; is the behaviour on some newer versions?

[09:53] <discord-raku-bot> <Nahita> yes that's what i meant by not shortcircuiting...

[09:53] <discord-raku-bot> <Nemokosch> timeout üò¨

[09:53] <lizmat> because then you don't have a Junction

[09:54] <lizmat> the .grep treats it as a lazy list

[09:54] <lizmat> m: say (0, |(1 xx 100_000_000)).first(0)

[09:54] <camelia> rakudo-moar 556bf98da: OUTPUT: ¬´0‚ê§¬ª

[09:54] <lizmat> m: say (0, |(1 xx 100_000_000)).first(1)

[09:54] <camelia> rakudo-moar 556bf98da: OUTPUT: ¬´1‚ê§¬ª

[09:54] <lizmat> m: say (0, |(1 xx 100_000_000)).first(1, :k)

[09:54] <camelia> rakudo-moar 556bf98da: OUTPUT: ¬´1‚ê§¬ª

[09:54] <lizmat> m: say (0,0, |(1 xx 100_000_000)).first(1, :k)

[09:54] <camelia> rakudo-moar 556bf98da: OUTPUT: ¬´2‚ê§¬ª

[09:55] <discord-raku-bot> <Nahita> yes; my desire is Junction seeing the `.so` or `.not` upon it and exhibit shortcircuit behaviour

[09:55] <discord-raku-bot> <Nemokosch> It's obvious why `(0, |(1 xx 100_000_000)).grep(* != 0).not` is fast

[09:55] <discord-raku-bot> <Nahita> like `grep` does

[09:55] <discord-raku-bot> <Nemokosch> it's also "obvious" why it's not obvious to do the same with junctions

[09:55] <discord-raku-bot> <Nemokosch> but in order to make them worth considering, they still should somehow mimic the lazy behavior

[09:55] <lizmat> well, at this point in time, Junction creation is *not* lazy

[09:55] <discord-raku-bot> <Nemokosch> it's too much of a drawback that they basically build a list

[09:56] * lizmat feels a problem-solving issue coming up  :-)

[09:57] <discord-raku-bot> <Nemokosch> not quite list but an in-memory eager data structure

[09:57] <discord-raku-bot> <Nemokosch> like yes, the whole language is built around making everything as lazy as possible

[09:58] <discord-raku-bot> <Nahita> an observation: e.g., Python persons are bragging (rightly) about their `all` and `any` combined with generator expressions to do lazy and readable things super fast

[09:59] <discord-raku-bot> <Nahita> i matched that behaviour with `.grep(...).so` or DeMorganized version of this in Raku

[09:59] <discord-raku-bot> <Summer> ‚àà is p fast

[09:59] <discord-raku-bot> <Nemokosch> okay but all and any are essentially like grep in Python

[09:59] <discord-raku-bot> <Kaiepi> `all`, `any`, etc. are lazy in haskell

[09:59] <discord-raku-bot> <Nemokosch> anyone who knows Haskell

[09:59] <discord-raku-bot> <Nemokosch> ACTION looks around

[09:59] <discord-raku-bot> <Kaiepi> sometimes there's someone üòâ

[10:00] <discord-raku-bot> <Nahita> but that's a specific predicate, isn't it...

[10:00] <discord-raku-bot> <Nemokosch> anyway, the finish the thought - if we want junctions to be anything but a cute syntax sugar, they should also be lazy as much as possible

[10:01] <discord-raku-bot> <Nemokosch> there are no ordering constraints, like with hyper

[10:01] <discord-raku-bot> <Nahita> not quite?

[10:01] <discord-raku-bot> <Nemokosch> yep, pretty much

[10:01] <discord-raku-bot> <Nahita> what's "grep in Python"?

[10:01] <discord-raku-bot> <Nemokosch> filter

[10:01] <discord-raku-bot> <Nemokosch> or Array#some and Array#every in JS

[10:01] <discord-raku-bot> <Nahita> whose "all and any" are you talking about? Raku's?

[10:01] <discord-raku-bot> <Nemokosch> except for iterables, not arrays

[10:02] <discord-raku-bot> <Summer> üí™ first, first

[10:03] <discord-raku-bot> <Nemokosch> all in Python is like map, filter and all these

[10:03] <discord-raku-bot> <Nemokosch> just an iterable management function

[10:03] <discord-raku-bot> <Nemokosch> in Raku, it's completely different

[10:03] <discord-raku-bot> <Nahita> i see now

[10:03] <discord-raku-bot> <Kaiepi> try `[&&]`

[10:03] <discord-raku-bot> <Nemokosch> one could create a function or method like that in Raku as well and then it would be fast by the same means

[10:03] <discord-raku-bot> <Nahita> all i'm saying is, it'd be cool junctions shortcircuited; that's all

[10:03] <discord-raku-bot> <Nemokosch> one could perhaps give them similar names

[10:04] <discord-raku-bot> <Nemokosch> which is fair enough

[10:05] <discord-raku-bot> <Nemokosch> I'm just saying that this is indeed a nontrivial thing to achieve, as desirable as it might be

[10:06] <lizmat> well...  Junctions go deep into the guts

[10:06] <lizmat> it's basically the only core class that doesn't inherit from Any

[10:07] <lizmat> which is how they can work transparently at all levels of the code

[10:07] <discord-raku-bot> <Summer> `cat reduce`

[10:07] <discord-raku-bot> <Summer> ```raku

[10:07] <discord-raku-bot> <Summer> END say now - INIT now;

[10:07] <discord-raku-bot> <Summer> sink for ^10_000 { [&&] (^100).roll(50).map(*==0) }```

[10:07] <discord-raku-bot> <Summer> `$ raku reduce`

[10:07] <discord-raku-bot> <Summer> ```

[10:07] <discord-raku-bot> <Summer> 0.592123602```

[10:07] <discord-raku-bot> <Summer> I should be using a benchmarker really

[10:09] <discord-raku-bot> <Nemokosch> well, both things are true at the same time. Junctions are a special design that need special care when implementing - and regardless, it's a major drawback if they have to eagerly fetch all data in order to be constructed and start any sort of evaluation

[10:17] <discord-raku-bot> <Summer> if I want to have a stable random, its just srand(0) right?

[10:18] <discord-raku-bot> <Summer> ~~if I want to have a stable random, its just srand(0) right?~~ yep

[10:22] <discord-raku-bot> <Nemokosch> what makes it stable?

[10:24] <discord-raku-bot> <Summer> sets it to a given seed, I'm going with the assumption that anything using random is deterministic after that, if not then I'm going to cry

[10:24] <discord-raku-bot> <Nemokosch> üòÑ

[10:24] <discord-raku-bot> <Nemokosch> well it should

[10:26] <discord-raku-bot> <Summer> a `$*RANDOM` would be neat to be able to change the rng

[10:30] *** gfldex left
[10:30] *** discord-raku-bot left
[12:20] *** jgaz joined
[13:09] *** frost left
[13:44] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/08/01/2022-31-justintimerelease/

[14:23] *** human-blip left
[15:05] *** human-blip joined
[15:30] *** jgaz left
[15:31] *** jgaz joined
[16:12] *** guifa joined
[16:15] *** guifa_ left
[16:38] *** dakkar left
[16:41] *** discord-raku-bot joined
[16:54] *** deoac left
[17:02] *** sivoais left
[17:15] *** sivoais joined
[17:31] *** sivoais left
[17:39] *** sivoais joined
[17:43] <discord-raku-bot> <gfldex> `Num.rand` calls `nqp::rand_n`. If you want to change the RNG, wrapping `Num.rand` should suffice.

[21:40] *** mjgardner_ joined
[21:43] *** lucs_ joined
[21:48] *** lucs left
[21:48] *** mjgardner left
[21:48] *** mjgardner_ is now known as mjgardner

[22:40] <discord-raku-bot> <Jodi> hello, im super new to raku

[22:40] <discord-raku-bot> <Jodi> was wondering how I can remove a range from a string, i.e

[22:40] <discord-raku-bot> <Jodi> in python I can just do `new = old[min : max]`

[22:42] <discord-raku-bot> <Jodi> hello, im super new to raku

[22:42] <discord-raku-bot> <Jodi> was wondering how I can remove a range from a string, i.e

[22:42] <discord-raku-bot> <Jodi> in python I can just do something like `new = old[0: start:] + old[stop + 1::]`

[22:55] <discord-raku-bot> <Jodi> nvm figured it out

[22:55] <discord-raku-bot> <Jodi> its just

[22:55] <discord-raku-bot> <Jodi> ```perl

[22:55] <discord-raku-bot> <Jodi> my $new = $old.substr(0 .. $START) ~ $old.substr($STOP .. *)

[22:55] <discord-raku-bot> <Jodi> ```

[23:39] <guifa> Hi jodi, that works, but you can also do

[23:41] <guifa> $old.substr-rw($START, $STOP - $START) = '';

[23:41] <guifa> although that mutates the original

[23:42] <guifa> Also, with your solution (which is the one I'd use), you can simplify the code a bit

[23:42] <guifa> my $new = $old.substr(^$START) ~¬†$old.substr($STOP);

[23:43] <guifa> eh that might be an off by one on start, too lazy to double check lol

[23:50] <discord-raku-bot> <Jodi> thanks

[23:50] <discord-raku-bot> <Jodi> what does the `^` mean though? is that a regex thing

