[00:05] *** kueppo joined
[00:18] *** kueppo left
[00:26] <discord-raku-bot> <stevied#8273> in the META6.json module in the resources sections, does a Windows machine also use the `/` as a path separator? I imagine that it does but I just want to check to make sure

[01:42] *** frost joined
[02:11] *** Kaiepi left
[04:23] *** Kaiepi joined
[04:28] *** Kaiepi left
[08:43] *** frost left
[09:14] <lizmat> stevied: that's my understanding  :-)

[09:40] *** Kaiepi joined
[10:23] *** frost joined
[11:58] *** discord-raku-bot left
[11:59] *** discord-raku-bot joined
[12:03] *** discord-raku-bot left
[12:03] *** discord-raku-bot joined
[12:57] *** frost left
[13:11] *** frost joined
[13:26] *** jgaz joined
[13:40] *** frost left
[14:32] <discord-raku-bot> <Anton Antonov#7232> I am re-reading https://docs.raku.org/language/list . Is there any other "motivational" document(s) discussing the design decisions to have / use `Seq` in a such ubiquitous manner? And/or a document with usage advice.

[16:09] <discord-raku-bot> <Nemokosch#9980> probably because of the memory implications

[16:09] *** jgaz left
[16:40] <discord-raku-bot> <Morfent#9811> > Lazy evaluation when possible, eager evaluation when wanted or necessary. This means, for example, lazy lists, and even infinite lazy lists, like the Fibonacci sequence, or all prime numbers.

[16:40] <discord-raku-bot> <Morfent#9811> listed as an advantage of using raku from https://docs.raku.org/language/faq

[16:40] <discord-raku-bot> <Morfent#9811> there's a page on the docs on the working with the list-ish types

[16:41] <discord-raku-bot> <Morfent#9811> oh that's what you linked

[17:01] <discord-raku-bot> <Nemokosch#9980> I do like the "all prime numbers" thing for the weekly challenges, haha

[17:02] <discord-raku-bot> <Nemokosch#9980> tbh I still haven't decided on my coding style

[17:02] <discord-raku-bot> <Nemokosch#9980> least parens is a tempting paradigm, but data->transformation makes more sense

[17:03] <discord-raku-bot> <Nemokosch#9980> I definitely prefer data->transformation to transformation->data

[17:03] <discord-raku-bot> <Nemokosch#9980> I don't know if this is only because this is the Hungarian way of thinking or it has actiual benefits

[17:14] <discord-raku-bot> <Anton Antonov#7232> Also, Japanese way of thinking.

[17:15] <discord-raku-bot> <Anton Antonov#7232> <@297037173541175296> If I understand correctly the "data->transformation" reference.

[17:15] <discord-raku-bot> <Nemokosch#9980> Maybe

[17:15] <discord-raku-bot> <Nemokosch#9980> Take the word and add stuff to it until it has the right meaning and grammatical form

[17:17] <discord-raku-bot> <Nemokosch#9980> And in code: base sequence, filter, map, action kind of order

[17:17] <discord-raku-bot> <Anton Antonov#7232> I see -- Hungarian is agglutinative. Hence, postfixes with postfixes.

[17:17] <discord-raku-bot> <Anton Antonov#7232> Right. This kind of the style propagated with "monad" pipelines packages.

[17:17] <discord-raku-bot> <Nemokosch#9980> Of course a natural language isn't this rigorously consistent but the overall concept is the same

[17:18] <discord-raku-bot> <Nemokosch#9980> Generic to specific

[17:55] *** kostas joined
[17:56] *** kostas left
