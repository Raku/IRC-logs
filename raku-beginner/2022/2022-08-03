[00:00] *** gfldex joined
[00:27] *** gfldex left
[00:27] *** gfldex joined
[03:04] *** frost joined
[04:36] <deadmarshal> I want to do the equivalent of this Perl code in Raku. return all {$_ % 2 != 0} (split //, $n + reverse $n);

[04:36] <deadmarshal> I don't know how to use the all function in raku: return ($n + $n.flip).split('');

[04:54] <CIAvash> `($n + $n.flip).comb.grep: * !%% 2` ?

[04:59] <deadmarshal> CIAvash: Doesn't that filters only odd ones? I want to return true if all of the elements are odd and false otherwise

[05:00] <CIAvash> oh

[05:08] <CIAvash> `.comb.map(* !%% 2).all.so`

[05:11] <deadmarshal> CIAvash: Yes, thank you!

[05:21] <CIAvash> m: sub odd ($n) { $n !%% 2 }; (164 + 164.flip).comb.all.&odd.so;

[05:21] <camelia> rakudo-moar 9b13a55a1: ( no output )

[05:21] <CIAvash> m: sub odd ($n) { $n !%% 2 }; say (164 + 164.flip).comb.all.&odd.so;

[05:21] <camelia> rakudo-moar 9b13a55a1: OUTPUT: «False␤»

[05:22] <CIAvash> m: my &odd = * !%% 2; (164 + 164.flip).comb.all.&odd.so;

[05:22] <camelia> rakudo-moar 9b13a55a1: ( no output )

[05:22] <CIAvash> m: my &odd = * !%% 2; say (164 + 164.flip).comb.all.&odd.so;

[05:22] <camelia> rakudo-moar 9b13a55a1: OUTPUT: «True␤»

[05:22] <CIAvash> hmm

[05:23] <CIAvash> m: say (164 + 164.flip).comb.all.&(* !%% 2).so;

[05:23] <camelia> rakudo-moar 9b13a55a1: OUTPUT: «True␤»

[05:24] <CIAvash> m: dd (164 + 164.flip).comb.all.&(* %% 2); m: dd (164 + 164.flip).comb.all.&(* !%% 2);

[05:24] <camelia> rakudo-moar 9b13a55a1: OUTPUT: «all(Bool::True, Bool::True, Bool::False)␤Bool::True␤»

[06:02] <CIAvash> m: dd (164 + 164.flip).comb.all.&(sub { $^n !%% 2 })

[06:02] <camelia> rakudo-moar 9b13a55a1: OUTPUT: «all(Bool::False, Bool::False, Bool::True)␤»

[07:17] *** dakkar joined
[11:12] *** frost left
[12:05] *** frost joined
[12:08] *** frost left
[12:23] *** frost joined
[12:49] *** frost left
[12:52] <SmokeMachine> deadmarshal: https://twitter.com/smokemachine/status/1554082471217709057?s=21&t=CQzINW-0I0FlVOjAu4PDgw

[12:56] <SmokeMachine> m: (1 .. 100).grep: { [&&] ($_ + .flip).comb.map: *.all !%% 2 }

[12:56] <camelia> rakudo-moar 49e04c619: ( no output )

[12:56] <SmokeMachine> m: say (1 .. 100).grep: { [&&] ($_ + .flip).comb.map: *.all !%% 2 }

[12:56] <camelia> rakudo-moar 49e04c619: OUTPUT: «(10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90)␤»

[13:08] <deadmarshal> SmokeMachine: nice

[13:21] *** jgaz joined
[13:32] *** jgaz left
[13:32] *** jgaz joined
[13:37] *** Nemokosch joined
[13:38] <Nemokosch> Hello

[13:38] <Nemokosch> Can I make multis that have common arguments without repeating those common arguments?

[14:12] <lizmat> multi subs?

[14:14] <Nemokosch> yes?

[14:16] <lizmat> well, I guess you could use &proto.add_dispatchee with a multi sub that you put together, e.g. with an EVAL

[14:16] <lizmat> at compile time

[15:02] <Nemokosch> Can RAST help with it?

[15:09] <lizmat> RakuAST you mean?  yes

[15:23] <Nemokosch> For now, I'm gonna just hack around with environment variables :DD

[15:49] *** Kaiepi left
[16:07] *** dakkar left
[17:18] *** discord-raku-bot joined
[17:30] *** Nemokosch left
[17:31] *** discord-raku-bot left
[17:32] *** discord-raku-bot joined
[17:39] *** Kaiepi joined
[20:49] *** Kaiepi left
[20:51] *** Kaiepi joined
[20:54] *** saint- left
[21:22] *** jgaz left
