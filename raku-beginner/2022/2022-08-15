[00:48] *** Kaipei joined
[00:52] *** Kaiepi left
[01:31] *** Kaiepi joined
[01:33] *** Kaipei left
[07:00] *** deoac left
[07:54] *** dakkar joined
[10:37] *** jaguart left
[11:38] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/08/15/2022-33-2nd-conf-succeeded/

[11:48] *** razetime joined
[13:16] *** razetime left
[13:27] *** razetime joined
[14:52] *** deoac joined
[15:11] *** razetime left
[15:22] *** razetime joined
[15:33] *** razetime left
[16:05] *** lizmat_ joined
[16:06] *** Kaipei joined
[16:08] *** Kaiepi left
[16:09] *** lizmat left
[16:20] *** lizmat_ left
[16:20] *** lizmat joined
[16:39] *** dakkar left
[16:43] <deoac> sub foo {say "whoops!"};  debug(foo());

[16:44] <deoac> How do I write sub debug() to get this to work?

[16:44] <deoac> Wait, that's wrone

[16:45] <deoac> class C { method foo {say "whoops!"};}; my $c = C.new; debug(c.foo());

[16:47] <deoac> where the argument to debug() could be any executable code, principally say() and print() statements.

[17:00] <lizmat> m: my &debug = -> { }; debug(42); &debug = &say; debug(42)

[17:00] <camelia> rakudo-moar 10feda116: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[17:00] <lizmat> m: my &debug = -> $ { }; debug(42); &debug = &say; debug(42)

[17:00] <camelia> rakudo-moar 10feda116: OUTPUT: «42␤»

[17:01] <lizmat> first time debug is called, is an effective no-op, the second time it says what it got

[17:01] <discord-raku-bot> <Nemokosch> is this the same thing?

[17:01] <lizmat> it's an example of code in a variable

[17:02] <lizmat> m: sub foo($value, &debug = -> $ { }) { debug $value }; foo 42; foo( 42, &say )

[17:02] <camelia> rakudo-moar 10feda116: OUTPUT: «42␤»

[18:05] *** deoac left
[18:08] *** deoac joined
