[03:12] *** Guest35 left
[05:07] *** ocomport joined
[08:10] *** dakkar joined
[08:44] *** frost joined
[10:08] *** ocomport left
[10:35] <discord-raku-bot> <piotrklibert#0328> It's my 3rd week with Raku and I only now realized that I should look for things in the ecosystem more often... üôÇ Related: is it possible to change the page size on raku.land? Or is there a full list of all packages somewhere? Clicking through 194 pages to get an overview of what's available seems less than ideal. 

[10:35] <discord-raku-bot> <piotrklibert#0328> Also, one of the things I tend to check with new languages is if there's an 'awesome-X' list somewhere with recommended packages, like this: https://github.com/hachiojipm/awesome-perl or https://github.com/LewisJEllis/awesome-lua - Raku seems to only have this: https://github.com/sfischer13/awesome-raku#catalogue which lists a grand total of 6 packages... Is there another place with a list of pac

[10:35] <discord-raku-bot> <piotrklibert#0328> It's my 3rd week with Raku and I only now realized that I should look for things in the ecosystem more often... üôÇ Related: is it possible to change the page size on raku.land? Or is there a full list of all packages somewhere? Clicking through 194 pages to get an overview of what's available seems less than ideal. 

[10:35] <discord-raku-bot> <piotrklibert#0328> Also, one of the things I tend to check with new languages is if there's an 'awesome-X' list somewhere with recommended packages, like this: https://github.com/hachiojipm/awesome-perl or https://github.com/LewisJEllis/awesome-lua - Raku seems to only have this: https://github.com/sfischer13/awesome-raku#catalogue which lists a grand total of 6 packages... Is there another place with a list of pac

[10:37] <lizmat> piotrklibert  perhaps the old site can give you more: modules.raku.org

[10:39] <discord-raku-bot> <piotrklibert#0328> Oh, right, it works if you search for empty string: https://modules.raku.org/search/?q=

[10:39] <discord-raku-bot> <piotrklibert#0328> Thanks üôÇ

[12:04] <discord-raku-bot> <gfldex#8222> <@486998692683841566> raku.load sports a JSON api and you are very welcome to write many awesome packages. :)

[12:04] <discord-raku-bot> <Nemokosch#9980> something went wrong with the autocorrect there

[12:17] <discord-raku-bot> <piotrklibert#0328> Under what URL? I did look for an API before but couldn't find anything.

[12:43] <discord-raku-bot> <piotrklibert#0328> Why don't `List` and `Seq` take a type parameter?

[12:47] <discord-raku-bot> <piotrklibert#0328> (and related, what's the rationale behind `my @a = [1, 2];` not being inferred to be of `Array[Int]` type?)

[12:49] <discord-raku-bot> <Nemokosch#9980> Why would they take a type parameter? They can hold any value, like in JS or Python

[12:51] <discord-raku-bot> <Morfent#9811> a constraint could be inferred where none is intended

[12:52] <discord-raku-bot> <Nemokosch#9980> Having said that, typed arrays are a pain to work with

[12:54] <discord-raku-bot> <Nemokosch#9980> and the @ sigil only makes it worse

[12:55] <discord-raku-bot> <Morfent#9811> it irks me that types are an `Array` feature because it means if i want types, i want itemized elements generally

[12:56] <discord-raku-bot> <Morfent#9811> so i don't wind up depending on them

[12:56] <discord-raku-bot> <piotrklibert#0328> To make sure they *can't* hold just any value, just like with an `Array`. It seems strange that I can have `Array[Int]` that's compatible with `Positional[Int]`, but can't have `List[Int]` that would pass the same type check.

[12:58] <discord-raku-bot> <Nemokosch#9980> what does that mean?

[12:58] <discord-raku-bot> <Morfent#9811> `Array` elements, if assigned to, recont values with `Scalar`

[12:58] <discord-raku-bot> <Nemokosch#9980> now you are talking about completely different things

[12:58] <discord-raku-bot> <piotrklibert#0328> Or Iterable instead of Positional, if List is not meant to be indexed.

[12:58] <discord-raku-bot> <Nemokosch#9980> An Array is a Positional, a List is a Positional, an Array is not a List and vice versa

[12:58] <discord-raku-bot> <Nahita#3882> no, you misunderstood in the first reply :ƒü

[13:00] <discord-raku-bot> <Nahita#3882> and an Array is a List

[13:00] <discord-raku-bot> <Nahita#3882> is-a

[13:00] <discord-raku-bot> <Nemokosch#9980> that seems conceptionally bizarre tbh

[13:00] <discord-raku-bot> <Nemokosch#9980> and perhaps the reason Lists are not properly immutable

[13:02] <MasterDuke> i believe https://modules.raku.org/dist/ValueList:zef:zef:lizmat gives you an immutable List

[13:03] <discord-raku-bot> <Nemokosch#9980> Yes, I've seen this

[13:04] *** aqua joined
[13:04] <discord-raku-bot> <Nemokosch#9980> > The functionality provided by this module, will be provided in language level 6.e and higher. If an implementation of ValueList is already available, loading this module becomes a no-op.

[13:04] <discord-raku-bot> <Nemokosch#9980> this is definitely good news

[13:04] <discord-raku-bot> <Nemokosch#9980> Anyway, I would have thought immutability is a "feature" of List and not a "lack of ability", that's why I would have never anticipated Arrays are Lists

[13:06] <discord-raku-bot> <Nemokosch#9980> anyway, I wish I understood these phrases üòÖ

[13:06] <discord-raku-bot> <Nemokosch#9980> "recont values with Scalar", huh

[13:16] <aqua> Hi!  <taps microphone... I may need a #irc-beginner channel too>

[13:19] <MasterDuke> you seem to have successfully worked it out so far

[13:20] <aqua> Oh, great!  My first ever IRC message, and success!   Took me about two days messing about with SSL certificates, but now it feels worth it.

[13:29] <discord-raku-bot> <piotrklibert#0328> <@297037173541175296> <@210313526928080896> it's like this right now:

[13:29] <discord-raku-bot> <piotrklibert#0328> ```

[13:29] <discord-raku-bot> <piotrklibert#0328> Array ~~ Positional;           # True

[13:29] <discord-raku-bot> <piotrklibert#0328> List ~~ Positional;            # True

[13:29] <discord-raku-bot> <piotrklibert#0328> Array[Int] ~~ Positional;          # True - ok, co-variant implicit Any 

[13:29] <discord-raku-bot> <piotrklibert#0328> Array[Int] ~~ Positional[Int];     # True - ok

[13:29] <discord-raku-bot> <piotrklibert#0328> Array[Int] ~~ Positional[Numeric]; # True - ok

[13:29] <discord-raku-bot> <piotrklibert#0328> List ~~ Positional;                # True - ok

[13:29] <discord-raku-bot> <piotrklibert#0328> List ~~ Positional[Int];           # False - ok, but then:

[13:29] <discord-raku-bot> <piotrklibert#0328> List[Int] ~~ Positional[Int];

[13:29] <discord-raku-bot> <piotrklibert#0328> # dies with:

[13:29] <discord-raku-bot> <piotrklibert#0328> # List cannot be parameterized

[13:29] <discord-raku-bot> <piotrklibert#0328> # ------> List[Int]‚èè ~~ Positional[Int]

[13:29] <discord-raku-bot> <piotrklibert#0328> ```

[13:33] <discord-raku-bot> <Nemokosch#9980> I wouldn't bet my life that Raku type checks happen "at compile time", or all of them do

[13:33] <discord-raku-bot> <Nemokosch#9980> I mean, obviously multi dispatch doesn't happen at compile time; maybe there are optimizations but it simply cannot in all cases

[13:38] *** discord-raku-bot left
[13:39] *** discord-raku-bot joined
[13:41] <discord-raku-bot> <piotrklibert#0328> It looks like for example return types of functions are checked dynamically only, while some types of arguments are checked at compile time, giving something like this: ```===SORRY!=== Error while compiling:

[13:41] <discord-raku-bot> <piotrklibert#0328> Calling f(Str) will never work with declared signature (Int $z)

[13:41] <discord-raku-bot> <piotrklibert#0328> ```

[13:41] <discord-raku-bot> <piotrklibert#0328> This: `sub f(Int $z --> Str) { 1 }` compiles ok, even though it could be statically detected as a type error.

[13:44] <aqua> I was looking at the builtin command line argument handling, which seems to have some oddities (at least from the unix tradition), for example requiring an '=' for short option arguments.   If I wanted to suggest some changes, what's the best way to do it? 

[13:45] <MasterDuke> https://github.com/rakudo/rakudo/issues/new/choose

[13:46] <discord-raku-bot> <gfldex#8222> <@486998692683841566> You may find enlightenment pondering the difference between "Where do I put type checks?" and "When do I *need* to check types?". All(most all) type checks happen at runtime (which is a fuzzy term) and are not free. Most type checks are cheap but you may end up with a cascade of where-clauses and that's gonna hurt.

[13:48] <aqua> Ah great, thx.   And include a patch for src/core.c/Main.pm6 in there?  Or can I do a pull request and somehow mark it as a strawman for discussion?  Or is that implicit?    Oh dear,  I'm showing my age, I only remember how it used to work with email.

[13:48] *** discord-raku-bot left
[13:48] *** discord-raku-bot joined
[13:49] <MasterDuke> If you have a patch you could create a pull request, sure. if not, you could just create an issue

[13:51] <discord-raku-bot> <piotrklibert#0328> No, well, Raku is gradually typed, right? That means it should support *both* static *and* dynamic typing. "static typing" implies, at least I think so, that it's done *before* run-time, when the dynamic types are checked. Rakudo is a compiler, right? So there *is* a (meaningful) compile-time, and there are types to be checked at that point. And some of them are, but not as many as is possible, w

[13:51] <discord-raku-bot> <piotrklibert#0328> No, well, Raku is gradually typed, right? That means it should support *both* static *and* dynamic typing. "static typing" implies, at least I think so, that it's done *before* run-time, when later the dynamic types are checked. Rakudo is a compiler, right? So there *is* a (meaningful) compile-time, and there are types to be checked at that point. And some of them are, but not as many as is possi

[13:52] <discord-raku-bot> <piotrklibert#0328> (and it's not always clear if something will or will not be checked statically. Ofc everything in `where` will be dynamic)

[13:53] <aqua> Well,  I don't have a patch finished yet, am learning nqp at the same time.   But I guess a patch is trivial conditional on the design.  So okay I'll create an issue.  Thanks!!

[13:53] <discord-raku-bot> <Nemokosch#9980> I think two things are mashed up with "typing"

[13:54] <discord-raku-bot> <Nemokosch#9980> compilation is rather a technical thing and "compile-time" is about performance implications

[13:55] <discord-raku-bot> <Nemokosch#9980> while "static typing" is more a (hip 'n' cool - my remark) static code analysis technique

[13:55] <discord-raku-bot> <Nemokosch#9980> static code analysis can be done without any compiler or runtime, right?

[13:55] <discord-raku-bot> <piotrklibert#0328> Yes.

[13:57] <discord-raku-bot> <piotrklibert#0328> Compare TypeScript and MyPy. The first one is a compiler that does the static analysis when compiling, while Mypy is completely separate tool, without any connection with "compilation" whatsoever.

[13:57] <discord-raku-bot> <Nemokosch#9980> I for one don't know how much Rakudo is a compiler, I mean it doesn't produce a standalone executable or object file, I suppose it's more like some JIT

[13:57] <discord-raku-bot> <Nemokosch#9980> or like what does it even produce? some internal code? nqp? machine code?

[13:59] <discord-raku-bot> <piotrklibert#0328> ...is it a trick question? üòÑ I mean, obviously, Rakudo produces some intermediary format, depending on the VM used. It's NQP with Moar, Java bytecode with JVM, and raw JavaScript with JS.

[13:59] <discord-raku-bot> <Nemokosch#9980> Typescript is mostly a meta language and a transpiler I would say. If you tried to get code running or generated at compile time in Typescript, you know that it's not really suitable for that

[13:59] <discord-raku-bot> <gfldex#8222> "static typing" means that checks *only* happen at compile time. That's why one bug in a C-program can set you back by bags of money. Raku does some constant folding and you can force checks at compile time with phasers. There is a JIT but that doesn't imply that checks are done before JIT-time. In fact they have to happen after JITing or we could not have multis. I see type checks as tools to allow pa

[14:01] <discord-raku-bot> <Nemokosch#9980> for pattern matching

[14:01] <discord-raku-bot> <gfldex#8222> Rakudo compiles to bytecode.

[14:02] <discord-raku-bot> <Nemokosch#9980> that's an aspect where I think Raku could do much better just by following established conventions better

[14:02] <discord-raku-bot> <Nemokosch#9980> confer the "swapping @-sigilled variables" anomaly for example

[14:04] <discord-raku-bot> <Nemokosch#9980> which is apparently intended behavior, still, I can't help but shake my head whenever I think of it

[14:05] <discord-raku-bot> <Nemokosch#9980> it's so easy to turn a great language into a jungle of WAT's by decisions like that

[14:08] *** discord-raku-bot left
[14:08] *** discord-raku-bot joined
[14:13] <discord-raku-bot> <piotrklibert#0328> Yes, of course, a large part of the type checks in Raku programs has to be done at run-time. I'm perfectly fine with that. But again, the whole point of gradual typing is to allow for static checking on top of run-time validation. If you look at my example again:

[14:13] <discord-raku-bot> <piotrklibert#0328> ```sub f(Int $a --> Str) { 1 }```

[14:13] <discord-raku-bot> <piotrklibert#0328> then it's equivalent to this Python code:

[14:13] <discord-raku-bot> <piotrklibert#0328> ```def f(a: int) -> str:

[14:13] <discord-raku-bot> <piotrklibert#0328>     return 1

[14:13] <discord-raku-bot> <piotrklibert#0328> ```

[14:13] <discord-raku-bot> <piotrklibert#0328> which, when checked with mypy - so without running anything - produces the following output:

[14:13] <discord-raku-bot> <piotrklibert#0328> ```file.py:2: error: Incompatible return value type (got "int", expected "str")```

[14:14] <discord-raku-bot> <piotrklibert#0328> Raku could definitely also perform this same check "before run-time", whenever that is üôÇ

[14:14] <discord-raku-bot> <Nemokosch#9980> fair enough, although the first thing I notice is that I don't find this an idiomatic definition üòÇ

[14:14] <discord-raku-bot> <gfldex#8222> A WAT is a violation of a pattern (brains loooove patterns). That presses the question, where that pattern came from. If the origin of the pattern is a Python, I'm fine with that. If the origin is Raku, then please file a Rakudobug or issue on problemsolving.

[14:15] <MasterDuke> piotrklibert: but that doesn't produce an error at runtime in python, while it does in raku

[14:16] <discord-raku-bot> <Nemokosch#9980> I'm pretty much trained to think "return value after the arrow - static, return value inside the function body - dynamic"

[14:16] <discord-raku-bot> <Nemokosch#9980> so if I were to actually write the function with a static return value, I would write

[14:16] <discord-raku-bot> <Nemokosch#9980> ```

[14:16] <discord-raku-bot> <Nemokosch#9980> sub f(Int $a --> 1) {}

[14:16] <discord-raku-bot> <Nemokosch#9980> ```

[14:16] <discord-raku-bot> <piotrklibert#0328> MasterDuke: by default, yes. You can wrap it with `@typeguard` if you want it.

[14:17] *** frost left
[14:18] <discord-raku-bot> <piotrklibert#0328> That seems like a good way to remember about that, I'll use that üôÇ

[14:18] <discord-raku-bot> <Nemokosch#9980> this arrow is different from the one you can know from Java or JS - it only takes constants

[14:18] <discord-raku-bot> <Nemokosch#9980> but yeah, sometimes you find yourself writing a recursive function clause by clause

[14:18] <discord-raku-bot> <Nemokosch#9980> and then it can come handy

[14:45] *** Guest35 joined
[14:54] *** Guest35 left
[15:59] *** TheAthlete joined
[16:06] *** dakkar left
[16:58] *** TheAthlete left
[17:05] *** TheAthlete joined
[18:44] *** n1to joined
[19:48] *** TheAthlete left
[21:22] *** n1to left
