[01:00] *** Kaiepi left
[02:01] *** frost joined
[02:38] *** Kaiepi joined
[03:33] *** Guest35 left
[04:57] *** Kaiepi left
[06:04] *** Oshawott joined
[06:08] *** archenoth left
[09:01] *** Kaiepi joined
[09:06] *** Kaiepi left
[09:11] *** Kaiepi joined
[09:47] *** razetime joined
[13:35] *** razetime left
[13:41] *** frost left
[13:47] *** razetime joined
[13:48] *** razetime left
[14:02] *** Guest35 joined
[14:56] *** CIAvash left
[14:57] *** CIAvash joined
[15:26] *** Kaiepi left
[16:06] *** Kaiepi joined
[17:19] <discord-raku-bot> <Anton Antonov#7232> I based some functionalities of my package Data::Reshapers on Pretty::Table, and because of that Data::Reshapers has installation failures. It seems that the package Pretty::Table is not maintained since February 2020.  In order to be able to use Pretty::Table I install it from GitLab (not via zef.) See : https://gitlab.com/uzluisf/raku-pretty-table .

[17:19] <discord-raku-bot> <Anton Antonov#7232> What is the best approach to address the failures because of Pretty::Table?

[17:19] <discord-raku-bot> <Anton Antonov#7232> 1) I can replace Pretty::Table in Data::Reshapers with a more maintained package.

[17:19] <discord-raku-bot> <Anton Antonov#7232> 2) I can duplicate the tabulation functionalities in some way in Data::Reshapers.

[17:19] <discord-raku-bot> <Anton Antonov#7232> 3) Someone has to re-own Pretty::Table. (I am willing to do it, but I am not sure how...)

[17:19] <discord-raku-bot> <Anton Antonov#7232> I based some functionalities of my package Data::Reshapers on Pretty::Table, and because of that Data::Reshapers has installation failures. It seems that the package Pretty::Table is not maintained since February 2020.  In order to be able to use Pretty::Table I install it from GitLab (not via zef.) See : https://gitlab.com/uzluisf/raku-pretty-table .

[17:19] <discord-raku-bot> <Anton Antonov#7232> What is the best approach to address the failures because of Pretty::Table?

[17:19] <discord-raku-bot> <Anton Antonov#7232> 1) I can replace Pretty::Table in Data::Reshapers with a more maintained package.

[17:19] <discord-raku-bot> <Anton Antonov#7232> 2) I can duplicate the tabulation functionalities in some way in Data::Reshapers.

[17:19] <discord-raku-bot> <Anton Antonov#7232> 3) Someone has to re-own Pretty::Table. (I am willing to do it, but I am not sure how...)

[17:56] *** Kaiepi left
[17:57] *** Kaiepi joined
[18:18] *** Kaiepi left
[18:19] *** Kaiepi joined
[18:49] <discord-raku-bot> <piotrklibert#0328> I think that depends on how much of the functionality of Pretty::Table Data::Reshapers actually make use of, and especially in the code paths that you're interested in. Writing a simple table formatting code is not hard, as long as you're fine with occasional edge cases you forgot to handle. Actually, I'm currently working on a post about it, but I took writing a tabular data formatter was my fir

[18:51] <discord-raku-bot> <piotrklibert#0328> I think that depends on how much of the functionality of Pretty::Table Data::Reshapers actually make use of, and especially in the code paths that you're interested in. Writing a simple table formatting code is not hard, as long as you're fine with occasional edge cases you forgot to handle. Actually, I'm currently working on a post about it, but I took writing a tabular data formatter as my firs

[18:51] <discord-raku-bot> <piotrklibert#0328> <@297037173541175296> thanks, that explained the behavior. I

[18:51] <discord-raku-bot> <piotrklibert#0328> <@297037173541175296> thanks, that explained the behavior.

[18:51] <discord-raku-bot> <piotrklibert#0328> <@297037173541175296> thanks, that explained the behavior I was observing.

[19:06] <discord-raku-bot> <piotrklibert#0328> One more question, about "turtles all the way down" what are these things:

[19:06] <discord-raku-bot> <piotrklibert#0328> m: 1.HOW.HOW.^methods.map(-> $a { say $a.key, $a.value }, :kv)[^3]

[19:06] <discord-raku-bot> <piotrklibert#0328> and how to introspect them? Which docs should I read?

[19:06] <discord-raku-bot> <piotrklibert#0328> m: 1.HOW.HOW.^methods.map(-> $a { say $a.key, $a.value }, :kv)[^3]

[19:08] <discord-raku-bot> <piotrklibert#0328> One more question, about "turtles all the way down" what are these things below and how to introspect them? Which docs should I read?

[19:20] <discord-raku-bot> <piotrklibert#0328> m: 1.HOW.HOW.^methods.sort(*.key)[^10].map(*.say)

[19:20] <discord-raku-bot> <piotrklibert#0328> (slightly better formatting this time, hopefully)

[19:30] <discord-raku-bot> <Morfent#9811> m: 1.HOW.HOW.^methods.sort(.key)[^10].map(.name.say)

[19:31] <discord-raku-bot> <Morfent#9811> m: 1.HOW.HOW.^methods.sort(*.key)[^10].map(*.name.say)

[19:31] <discord-raku-bot> <Morfent#9811> m: 1.HOW.HOW.^methods.sort(*.key)[^10].map(*.value.name.say)

[19:31] <discord-raku-bot> <Morfent#9811> there we go

[19:33] <discord-raku-bot> <Morfent#9811> m: 1.HOW.HOW.^methods.head.value.^name.say

[19:37] <discord-raku-bot> <Morfent#9811> m: 1.HOW.^methods.map(*.name).sort

[19:37] <discord-raku-bot> <Morfent#9811> m: 1.HOW.^methods.map(*.name).sort.say

[19:39] <discord-raku-bot> <Morfent#9811> the reason i pull up `name` there is `methods` is a hash on more nqp-ish HOWs, but a list on the more raku-ish ones

[19:39] <discord-raku-bot> <Morfent#9811> in which case you want `method_table` for a hash

[19:41] <discord-raku-bot> <Morfent#9811> the reason i pull up `name` there is `methods` is a hash on more nqp-ish HOWs, but a list of code objects alone on the more raku-ish ones

[19:41] <discord-raku-bot> <Morfent#9811> in which case you'd want  `method_table` for a hash

[19:47] <discord-raku-bot> <Morfent#9811> the raku ones are described primarily by https://docs.raku.org/type/Metamodel::MethodContainer

[19:53] <discord-raku-bot> <Morfent#9811> as for the code itself, it *can* be a `ForeignCode` on core types, but those are typically bootstrapped, and are more likely to be a `Method` of some sort instead

[20:14] <discord-raku-bot> <piotrklibert#0328> I mean the "more nqp-ish HOWs" - I know those on Raku side ðŸ™‚ Where is `(low-level object NQPClassHOW)` implemented? Also, with normal `Method`s I can see their signatures, right? Like this:

[20:14] <discord-raku-bot> <piotrklibert#0328> m: 1.^methods.map({ :{(.name) => .signature.raku} }).sort(*.key)[^5].join("\n")

[20:14] <discord-raku-bot> <piotrklibert#0328> m: 1.^methods.map({ :{(.name) => .signature.raku} }).sort(*.key)[^5].join("\n").say

[20:14] <discord-raku-bot> <piotrklibert#0328> What can I do with the objects of 'ForeignCode' type?

[20:15] <discord-raku-bot> <piotrklibert#0328> (other than calling them, ofc ðŸ™‚ )

[20:23] <discord-raku-bot> <Morfent#9811> you can get a `name` and `signature`-related properties mainly

[20:24] <discord-raku-bot> <piotrklibert#0328> I tried, some of them say they're `<anon>` ðŸ˜¦

[20:24] <discord-raku-bot> <piotrklibert#0328> I tried, some of them say they're `<anon>` ðŸ˜¢

[20:24] <discord-raku-bot> <Morfent#9811> for those, you need their key as known by their HOW

[20:25] <discord-raku-bot> <Morfent#9811> for those, you need their key as known by the HOW they belong to

[20:28] <discord-raku-bot> <Morfent#9811> not sure why those couldn't depend on `anon` though. i think nqp supports that?

[20:28] <discord-raku-bot> <Morfent#9811> that would let them have their name

[20:30] <discord-raku-bot> <piotrklibert#0328> Hm, I tried to search for `NQPClassHOW` in both rakudo and moarvm github repos, but got zero hits in both? Where could this be defined, then?

[20:30] <discord-raku-bot> <Morfent#9811> it's in nqp's `src/how` somewhere

[20:31] <discord-raku-bot> <piotrklibert#0328> Ah, `nqp`! I forgot it's in a separate repo. Sorry! Found them ðŸ™‚

[20:32] <discord-raku-bot> <piotrklibert#0328> https://github.com/Raku/nqp/blob/56aded28e3a61d09a885bc1a13b2ef91687c2e8a/src/how/NQPClassHOW.nqp#L23

[20:32] <discord-raku-bot> <piotrklibert#0328> https://github.com/Raku/nqp/blob/56aded28e3a61d09a885bc1a13b2ef91687c2e8a/src/how/NQPClassHOW.nqp#L23

