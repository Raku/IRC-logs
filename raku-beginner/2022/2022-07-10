[00:15] <discord-raku-bot> <gfldex> m:```

[00:15] <discord-raku-bot> <gfldex>     enum proc-options <one two three four>;

[00:15] <discord-raku-bot> <gfldex>     my @opt = qw<one two three four>;

[00:15] <discord-raku-bot> <gfldex>     for @opt -> $opt {

[00:15] <discord-raku-bot> <gfldex>         when proc-options::{$opt}:!exists {

[00:15] <discord-raku-bot> <gfldex>             warn "'$opt' is not a valid option";

[00:15] <discord-raku-bot> <gfldex>         }

[00:15] <discord-raku-bot> <gfldex>         say $opt;

[00:15] <discord-raku-bot> <gfldex>     }

[00:15] <discord-raku-bot> <gfldex> ```

[00:21] <discord-raku-bot> <gfldex> m:```

[00:21] <discord-raku-bot> <gfldex>     enum proc-options <one two three four>;

[00:21] <discord-raku-bot> <gfldex>     my @opt = qw<one two three four five>;

[00:21] <discord-raku-bot> <gfldex>     for @opt -> $opt {

[00:21] <discord-raku-bot> <gfldex>         ::{$opt}:exists

[00:21] <discord-raku-bot> <gfldex>             ?? say $opt

[00:21] <discord-raku-bot> <gfldex>             !! warn("'$opt' is not a valid option");

[00:21] <discord-raku-bot> <gfldex>     }

[00:21] <discord-raku-bot> <gfldex> ```

[00:22] <discord-raku-bot> <gfldex> I didn't know that I can test for existence of symbols like that.

[00:27] <discord-raku-bot> <gfldex> m:```

[00:27] <discord-raku-bot> <gfldex>     say ::.EXISTS-KEY('one');

[00:27] <discord-raku-bot> <gfldex>     say ::.WHAT;

[00:27] <discord-raku-bot> <gfldex>     say ::.^methods(:local);

[00:27] <discord-raku-bot> <gfldex> ```

[01:33] *** jaguart left
[04:29] *** razetime joined
[06:14] *** razetime left
[06:27] *** jaguart joined
[08:06] <jaguart> an App::Mi6 question - README.md says to tweak using dist.ini - where would I look for this file - is it really ``~/.zef/store/App-Mi6-2.0.6/DC88AB1B036FB0C7945474C27E84C7235C82C45D/dist.ini``

[08:09] <jaguart> Hmmm - I am guessing this is ``dist.ini`` in module's root - so mi6 probably won't initialise a new module with dist.ini options... because that would break causality

[08:19] *** Guest15 joined
[08:19] *** Guest15 left
[09:42] <lizmat> it refers to the dist.ini in the module's root

[11:38] <jaguart> lizmat++ thanks :)

[11:57] <jaguart> looking for recommends on how to introspect the Match result from Grammar.parse

[12:12] <lizmat> programmatically, or visually ?

[13:29] *** frost left
[14:13] *** jaguart left
[15:17] <discord-raku-bot> <Anton Antonov> Is it possible to use `deepmap`  (or similar function) up to certain level? Say, for a given nested list or hash, it seems `deepmap` applies its argument to the very bottom elements.

[18:07] *** jaguart joined
[18:08] <jaguart> both - visually to understand what's happening and programatically to use the things found... :)

[18:09] <jaguart> interesting that multi-line comment using #`<> does not work as well as #`()

[18:12] <jaguart> m:  #`< for @l -> $l { $l.say; } >

[18:12] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$l' is not declared.  Perhaps you forgot a 'sub' if this was‚ê§intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> #`< for @l -> ‚èè$l { $l.say; } >‚ê§¬ª

[18:13] <jaguart> m:  #`( for @l -> $l { $l.say; } )

[18:13] <camelia> rakudo-moar 934f9895e: ( no output )

[18:13] <jaguart> the for -> seems to be interpreted as end-of-comment 

[18:24] <discord-raku-bot> <Quibono> Maybe a silly question, but how friendly is the raku community?

[18:25] <lizmat> Quibono: that's not a silly question at all

[18:26] <lizmat> we value kindness

[18:26] <lizmat> but then I'm prejudiced  :-)

[18:30] <discord-raku-bot> <Quibono> How are you prejudiced lizmat?

[18:32] <discord-raku-bot> <Nahita> jaguart: isn't ">" in "->" ending the comment, matching "<"?

[18:34] <lizmat> Quibono well, being a Raku Steering Council member sorta implies that :-)

[18:34] <discord-raku-bot> <Quibono> Haha gotcha. I'm just kinda burned on unfriendly communities.

[18:36] <lizmat> yeah, so am I, so that's why I'm sticking to the Raku community, and try very hard to keep it a friendly place

[18:37] <lizmat> Camelia, our butterfly mascot, is an effective filter against people with the biggest egos

[18:39] <discord-raku-bot> <gfldex> I believe it helps that one can't tell what The One True Way is.

[18:40] <discord-raku-bot> <Quibono> Because raku is multiparadigm?

[18:40] <lizmat> that's one reason, I guess  :-)

[18:41] <lizmat> but even within a single paradigm, there are several ways

[18:41] <lizmat> m: .say for (^10).grep: * %% 2

[18:41] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´0‚ê§2‚ê§4‚ê§6‚ê§8‚ê§¬ª

[18:41] <lizmat> m: .say for (^10).map: $_ if * %% 2

[18:41] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Missing semicolon‚ê§at <tmp>:1‚ê§------> .say for (^10).map: $_ ‚èèif * %% 2‚ê§¬ª

[18:42] <lizmat> m: .say for (^10).map: { $_ if $_ %% 2 }

[18:42] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´0‚ê§2‚ê§4‚ê§6‚ê§8‚ê§¬ª

[18:42] <lizmat> :-)

[18:42] <discord-raku-bot> <Quibono> How does the raku community feel about fixed point decimals/ratio types?

[18:43] <lizmat> I'd say the community likes the accuracy of Rats in general

[18:43] <lizmat> and that fixed point decimals are another way of keeping accuracy, which is currently not supported by Raku

[18:43] <lizmat> but could be provided in module space if necessary

[18:44] <discord-raku-bot> <Quibono> So raku has support for rational numbers out the box?

[18:44] <lizmat> yup

[18:45] <discord-raku-bot> <Quibono> Yaay. Um does the optional static typing impact interpreter perf at all?

[18:45] <lizmat> m: say (4.2).WHAT

[18:45] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´(Rat)‚ê§¬ª

[18:46] <lizmat> well, you know, under the hood, there's *always* type checking, so generally, any additional type constraints won't affect performance

[18:46] <lizmat> of course, if you're going to use constraints like:

[18:47] <lizmat> m: subset Prime of Int where *.is-prime; sub foo(Prime $a) { say $a }; a(43); a (42)

[18:47] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[18:48] <lizmat> m: subset Prime of Int where *.is-prime; sub foo(Prime $a) { say $a }; foo(43); foo(42)

[18:48] <camelia> rakudo-moar 934f9895e: OUTPUT: ¬´43‚ê§Constraint type check failed in binding to parameter '$a'; expected Prime but got Int (42)‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:48] <lizmat> it is going to have to do a primality check for each check, so that *could* become costly

[18:51] <discord-raku-bot> <Quibono> Right. Hrm okay so if I want to write a language in raku probably AOT compiling my language to a subset of raku would be the fastest from a run time perspective, or?

[18:53] <lizmat> well, good question

[18:54] <lizmat> I'd say, first make it work, then look at where the bottlenecks are, and the  make a plan to make things faster

[18:54] <lizmat> *then

[18:55] <discord-raku-bot> <Quibono> What sort of profiling/benchmarking facilities does raku have?

[18:57] <lizmat> there's --profile which will create a HTML file with profiling info

[18:57] <lizmat> there's also an IDE called Comma   https://commaide.com

[18:58] <lizmat> which has a lot of profiling / async timeline options

[18:59] <discord-raku-bot> <Quibono> Noice. And where would be a good channel to get feedback on ideas for stuff I want to write in/using raku?

[19:00] <lizmat> well, #raku I guess  :-)

[19:01] <lizmat> or here  :-)

[19:01] <discord-raku-bot> <Quibono> Thanks

[19:02] <lizmat> you're welcom!

[19:02] <lizmat> *welcome  :-)

[19:03] <discord-raku-bot> <Quibono> Thanks. üôÇ

[19:05] <discord-raku-bot> <Quibono> ‚Äîprofile seems like a dream.

[19:05] <discord-raku-bot> <Quibono> I love that it‚Äôs embedded in html

[19:36] <discord-raku-bot> <Quibono> And I could use grammars to build a parser it seems

[19:41] <lizmat> yup, that's how the Raku compiler is built  :-)

[19:41] <lizmat> afk&

[20:36] *** jaguart left
