[01:18] *** discord-raku-bot left
[01:18] *** discord-raku-bot joined
[01:23] *** discord-raku-bot left
[01:23] *** discord-raku-bot joined
[01:34] <discord-raku-bot> <Nemokosch#9980> can I use dynamic variables as function arguments?

[02:00] <discord-raku-bot> <Nemokosch#9980> well, I managed to make it work, although I had to declare the dynamic variables "lexically" as well

[02:00] <discord-raku-bot> <Nemokosch#9980> ```perl

[02:00] <discord-raku-bot> <Nemokosch#9980> #!/usr/bin/env raku

[02:00] <discord-raku-bot> <Nemokosch#9980> use experimental :cached;

[02:00] <discord-raku-bot> <Nemokosch#9980> my $*a, my $*b;

[02:00] <discord-raku-bot> <Nemokosch#9980> multi fibo-word(1) { $*a }

[02:00] <discord-raku-bot> <Nemokosch#9980> multi fibo-word(2) { $*b }

[02:00] <discord-raku-bot> <Nemokosch#9980> multi fibo-word($n where * > 2) is cached { fibo-word($n-2) ~ fibo-word($n-1) }

[02:00] <discord-raku-bot> <Nemokosch#9980> sub MAIN(

[02:00] <discord-raku-bot> <Nemokosch#9980>   Str $*a, #= the first starting value of the Fibonacci Word sequence

[02:00] <discord-raku-bot> <Nemokosch#9980>   Str $*b #= the second starting value of the Fibonacci Word sequence, having equal length to $a

[02:00] <discord-raku-bot> <Nemokosch#9980>   where { $*a.chars == $*b.chars }

[02:00] <discord-raku-bot> <Nemokosch#9980> ) {

[02:00] <discord-raku-bot> <Nemokosch#9980>   my $first-long = (1..*).map(&fibo-word).first(*.chars >= 51);

[02:00] <discord-raku-bot> <Nemokosch#9980>   say "The 51st digit in the first term having at least 51 digits '$_' is {.comb[50]}." given $first-long;

[02:00] <discord-raku-bot> <Nemokosch#9980> without the "my $*a, my $\*b", it didn't compile

[02:12] <discord-raku-bot> <Nemokosch#9980> Something else I started suspecting... so... how do you actually retrieve a character of a String?

[02:14] *** discord-raku-bot left
[02:14] *** discord-raku-bot joined
[03:01] *** frost joined
[03:03] *** frost left
[03:13] <discord-raku-bot> <stevied#8273> I recall reading in the docs that you can use dynamic variables for function arguments but that it's not useful

[03:14] <discord-raku-bot> <stevied#8273> is it possible to include a grammar class within a regular class?

[03:48] <discord-raku-bot> <stevied#8273> anyone know why this is throwing a ` Null regex not allowed Missing block` error:

[03:48] <discord-raku-bot> <stevied#8273> ```

[03:48] <discord-raku-bot> <stevied#8273> grammar H1 {

[03:48] <discord-raku-bot> <stevied#8273>     token TOP { <h1> }

[03:48] <discord-raku-bot> <stevied#8273>     token h1 { \#  }

[03:48] <discord-raku-bot> <stevied#8273> }

[03:48] <discord-raku-bot> <stevied#8273> ```

[06:22] <discord-raku-bot> <stevied#8273> had to do `'#'`

[07:36] *** ychaouche joined
[07:36] <ychaouche> hello rakus

[07:36] <ychaouche> in raku hashes, can keys be anything other than a string or an integer ? 

[07:36] <ychaouche> for example, can objects be a hash key ? 

[07:37] <ychaouche> or arrays ?

[07:45] <m_athias> ychaouche: https://docs.raku.org/language/hashmap#Non-string_keys_(object_hash) is this what you are looking for?

[07:49] <ychaouche> m_athias: ah thanks, could be that, but too many new syntax to learn before applying any of that.

[07:50] <ychaouche> Does raku encourage you to use strings as keys though ? (By default keys in { } are forced to strings.)

[07:52] <m_athias> it encourages you to use what you need. In most cases I prefer a string key since having objects as keys means you need the actual object around to perform a key/value lookup

[07:55] <m_athias> if you just need a list of key/value pairs than a pair might me more appropriate https://docs.raku.org/type/Pair.

[07:56] <m_athias> IIRC: for ( (foo => 'bar' ), (baz => 'qux') ) -> $pair { say $pair.key ~ ' -> ' ~ $pair.value}

[08:31] <ychaouche> Do I need to import anything to call "put" ? 

[08:31] <ychaouche> it says Undeclared routine; put used at line 1;

[08:31] <ychaouche> m: put "hi"

[08:31] <camelia> rakudo-moar 382f2f108: OUTPUT: ¬´hi‚ê§¬ª

[08:31] <ychaouche> strange

[08:32] <ychaouche> or maybe because I'm using a very old raku version ? 

[08:38] *** frost joined
[08:42] *** frost left
[09:06] <discord-raku-bot> <gfldex#8222> m:```

[09:06] <discord-raku-bot> <gfldex#8222>     sub subby($a = $*a // 42) {

[09:06] <discord-raku-bot> <gfldex#8222>         $a * 2;

[09:06] <discord-raku-bot> <gfldex#8222>     }

[09:06] <discord-raku-bot> <gfldex#8222>     say subby;

[09:06] <discord-raku-bot> <gfldex#8222>     my $*a = 666.99; # retail number of the beast

[09:06] <discord-raku-bot> <gfldex#8222>     say subby;

[09:06] <discord-raku-bot> <gfldex#8222> ```

[09:06] <discord-raku-bot> <gfldex#8222> @Nemokosch#9980 ^^^

[09:09] *** dakkar joined
[09:17] <discord-raku-bot> <Nemokosch#9980> I don't find this similar to my example ü§î

[09:24] <discord-raku-bot> <gfldex#8222> Using dynvars as a default value saves you the trouble to detect if the dynvar already exists somewhere in the lexical scope.

[09:25] <discord-raku-bot> <gfldex#8222> Which can be done ofc. see: https://gfldex.wordpress.com/2020/08/17/defined-or-dynvar/

[10:16] *** dakkar left
[10:18] *** dakkar joined
[10:46] *** m_athias left
[10:47] *** m_athias joined
[10:51] *** dakkar left
[10:51] *** dakkar joined
[11:33] *** anight[m] left
[11:33] *** CIAvash left
[11:41] *** CIAvash joined
[11:47] *** CIAvash left
[12:01] *** CIAvash joined
[12:02] *** CIAvash left
[12:08] *** CIAvash joined
[12:36] *** CIAvash left
[12:42] *** anight[m] joined
[13:31] *** jgaz joined
[13:31] *** m6502 joined
[13:31] *** m6502 left
[13:31] *** jgaz left
[13:31] *** jgaz joined
[13:53] *** jgaz left
[15:45] *** qorg11 left
[15:49] *** qorg11 joined
[16:13] *** ychaouche left
[17:41] *** dakkar left
[18:58] *** ajr joined
[19:36] *** ajr left
[19:54] *** ajr joined
[19:58] *** ajr left
[20:40] *** ajr joined
[22:39] *** ajr left
[22:52] *** guifa joined
[23:03] *** ajr joined
[23:09] *** ajr left
[23:36] *** ajr joined
[23:41] *** ajr left
