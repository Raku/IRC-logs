[01:42] <discord-raku-bot> <elcaro> One potential way is to compare the index of the value with the `.end` (final index) of your iterator. However this would presumably only be applicable for fully reified (ie. non-lazy) arrays. (which, a lot of times you're working with anyway)

[01:42] <discord-raku-bot> <elcaro> ```

[01:42] <discord-raku-bot> <elcaro> my @ns = 1,2,1,2,3,1,2;

[01:42] <discord-raku-bot> <elcaro> for @ns.kv -> $i, $n {

[01:42] <discord-raku-bot> <elcaro>     if $i == @ns.end {

[01:42] <discord-raku-bot> <elcaro>         say "$n is the last value";

[01:42] <discord-raku-bot> <elcaro>     }

[01:42] <discord-raku-bot> <elcaro>     say $n × 2;

[01:42] <discord-raku-bot> <elcaro> }   

[01:42] <discord-raku-bot> <elcaro> ```

[01:43] *** razetime joined
[01:45] <discord-raku-bot> <elcaro> People have asked this question before, and while it seems like the answer might be the `LAST` phaser, it's probably not what you want... `LAST` fires right at the end of the last loop, _after_ a `LEAVE` phaser would fire (if there was one)

[01:50] <discord-raku-bot> <elcaro> Tracking the index with `.kv` is not that bad. It's probably how you'd do it in most languages, and like I said, this feels like something you'd want on something finite like an array, rather than a indefinite lazy sequence.

[01:50] <discord-raku-bot> <elcaro> If you feel like that `==` comparison is costing you valuable CPU cycles (but it probably isn't significant), another possibly trick is separate out the last value.

[01:50] <discord-raku-bot> <elcaro> ```

[01:50] <discord-raku-bot> <elcaro> for @ns[0 ..^ *-1, *-1] -> @not-last, $last-n {

[01:50] <discord-raku-bot> <elcaro>     for @not-last -> $n {

[01:50] <discord-raku-bot> <elcaro>         say "Got $n";

[01:50] <discord-raku-bot> <elcaro>     }

[01:50] <discord-raku-bot> <elcaro>     say "$last-n is last";

[01:50] <discord-raku-bot> <elcaro> }

[01:50] <discord-raku-bot> <elcaro> ```

[01:50] <discord-raku-bot> <elcaro> Tracking the index with `.kv` is not that bad. It's probably how you'd do it in most languages, and like I said, this feels like something you'd want on something finite like an array, rather than a indefinite lazy sequence.

[01:50] <discord-raku-bot> <elcaro> If you feel like that `==` comparison is costing you valuable CPU cycles (but it probably isn't significant), another possible trick is separate out the last value.

[01:50] <discord-raku-bot> <elcaro> ```

[01:50] <discord-raku-bot> <elcaro> for @ns[0 ..^ *-1, *-1] -> @not-last, $last-n {

[01:50] <discord-raku-bot> <elcaro>     for @not-last -> $n {

[01:50] <discord-raku-bot> <elcaro>         say "Got $n";

[01:50] <discord-raku-bot> <elcaro>     }

[01:50] <discord-raku-bot> <elcaro>     say "$last-n is last";

[01:50] <discord-raku-bot> <elcaro> }

[01:50] <discord-raku-bot> <elcaro> ```

[01:59] <discord-raku-bot> <elcaro> _Another one_

[01:59] <discord-raku-bot> <elcaro> ```

[01:59] <discord-raku-bot> <elcaro> for @ns.rotor(2 => -1, :partial) -> ($x, $not-last?) {

[01:59] <discord-raku-bot> <elcaro>     if $not-last {

[01:59] <discord-raku-bot> <elcaro>         say "Got $x";

[01:59] <discord-raku-bot> <elcaro>     }

[01:59] <discord-raku-bot> <elcaro>     else {

[01:59] <discord-raku-bot> <elcaro>         say "$x is last"

[01:59] <discord-raku-bot> <elcaro>     }

[02:00] <discord-raku-bot> <elcaro> }

[02:00] <discord-raku-bot> <elcaro> ```

[02:05] <discord-raku-bot> <elcaro> I knew someone had asked this before... 

[02:06] <discord-raku-bot> <elcaro> https://www.reddit.com/r/perl/comments/3jql2c/perl_6_for_loops_functionalities/

[02:06] <discord-raku-bot> <elcaro> 7 years ago it seems. Wow, how the time flies.

[03:57] *** Heptite left
[05:25] <discord-raku-bot> <Kaiepi> taking elements from the end of an array requires eagerness in general. it should be ok to just:

[05:25] <discord-raku-bot> <Kaiepi> ```

[05:25] <discord-raku-bot> <Kaiepi> my @ns = lazy 1,2,1,2,3,1,2;

[05:25] <discord-raku-bot> <Kaiepi> for @ns.eager.kv -> $i, $n {

[05:25] <discord-raku-bot> <Kaiepi>     if $i == @ns.end {

[05:25] <discord-raku-bot> <Kaiepi>         say "$n is the last value";

[05:25] <discord-raku-bot> <Kaiepi>     }

[05:25] <discord-raku-bot> <Kaiepi>     say $n × 2;

[05:25] <discord-raku-bot> <Kaiepi> }

[05:25] <discord-raku-bot> <Kaiepi> ```

[05:44] <discord-raku-bot> <elcaro> What I meant was that the `.kv` method is less nice for certain sequences... like `for 'file'.IO.lines -> $line { ... }`.  l use this syntax a lot and it's very nice, but to use this`.kv` trick, i'd first have to load the lines into an Array. It's no deal breaker... just adds a little extraneous code

[05:45] <discord-raku-bot> <Kaiepi> ah

[06:40] <discord-raku-bot> <yabobay> i just did a C style loop

[06:40] <discord-raku-bot> <yabobay> done simple

[07:30] *** frost joined
[08:42] <discord-raku-bot> <South> the LAST phaser didnt seem beneficial?

[08:42] <discord-raku-bot> <yabobay> nope

[08:42] <discord-raku-bot> <yabobay> it was exactly the opposite of what i wanted to do

[08:42] <discord-raku-bot> <South> rip

[09:50] *** perlsol joined
[09:57] *** perlsol left
[11:57] <discord-raku-bot> <gfldex> m:```

[11:57] <discord-raku-bot> <gfldex>     my @fib = 0, 1, * + * … ∞;

[11:57] <discord-raku-bot> <gfldex>     .say for flat @fib.head(*-1), @fib.tail;

[11:57] <discord-raku-bot> <gfldex>     CATCH { default { say .^name, ': ', .gist } }

[11:57] <discord-raku-bot> <gfldex> ```

[11:58] <discord-raku-bot> <gfldex> `.head` and `.tail` deal properly with lazy lists.

[12:07] <discord-raku-bot> <yabobay> does tail mean the last element of a list?

[12:08] <lizmat> without an argument, yes

[12:08] <lizmat> m: say (1..10).tail(5)

[12:08] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «(6 7 8 9 10)␤»

[12:08] <lizmat> m: say (1..10).tail

[12:08] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «10␤»

[12:08] <discord-raku-bot> <yabobay> ooo

[12:08] <lizmat> same for head

[12:08] <lizmat> m: say (1..10).head

[12:08] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «1␤»

[12:08] <lizmat> m: say (1..10).head(5)

[12:08] <camelia> rakudo-moar 7342d9dc2: OUTPUT: «(1 2 3 4 5)␤»

[12:09] <discord-raku-bot> <yabobay> why is the raku bot faster on IRC

[12:09] <discord-raku-bot> <yabobay> that was like, instand

[12:09] <discord-raku-bot> <yabobay> instant*

[12:10] <lizmat> perhaps because there are fewer intermediaries than when doing this on Discord?

[12:49] <discord-raku-bot> <gfldex> IRC doesn't even know camilia is a bot. Discord does know about bots and it aint fair. Also, the bridge-bot loads a few modules.

[13:18] *** razetime left
[13:18] *** razetime joined
[13:39] *** jgaz joined
[13:42] <discord-raku-bot> <Kaiepi> discord api is also lol

[13:42] <discord-raku-bot> <Kaiepi> like json? come on

[13:43] <discord-raku-bot> <Kaiepi> at this scale?

[13:47] *** frost left
[15:30] *** razetime left
[15:37] *** razetime joined
[15:55] *** Heptite joined
[18:00] *** razetime left
[19:21] *** jgaz left
[20:01] *** perlsol joined
[20:05] *** jgaz joined
[20:12] *** perlsol left
[22:00] *** perlsol joined
[22:09] *** perlsol left
[22:19] *** Kaipei left
[23:32] *** Kaipei joined
