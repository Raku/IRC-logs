[00:01] <discord-raku-bot> <Anton Antonov> <@297037173541175296> Here: https://www.youtube.com/watch?v=G2eDeSRZ6p8&t=1309s

[00:17] <discord-raku-bot> <Nemokosch> does this actually explain though? I watched this back then

[00:34] <discord-raku-bot> <Anton Antonov> Yeah, it is a very short explanation -- camelCase puts more line-noise to the reader of the package.

[00:36] <discord-raku-bot> <Anton Antonov> I agree with that. I prefer kebab-case, but often I forget that is an option in Raku.

[00:54] *** Nemokosch left
[00:55] <discord-raku-bot> <Nemokosch> I'm fine with kebab-case but yeah, I don't think it's an unforgivable sin to use camelCase for whatever reason

[01:14] *** frost joined
[01:48] <guifa> To me it's just a "make stuff consistent" ‚Äî¬†and that's when you can often argue in favor of using stuff other than kebab case ‚Äî¬†if interacting with tools that default to other ones, it can sometimes make more sense to maintain their styles

[02:01] *** razetime joined
[02:34] *** Heptite joined
[03:15] <CIAvash> I personally think one should use whatever style they want, unless they want to follow a convention or style guide for working in a team or other reasons.

[03:32] <discord-raku-bot> <Anton Antonov> I have used camelCase for decades in any language I have programmed. So, that style creeps in if I do not pay attention into my Raku packages.

[03:49] *** Heptite left
[04:38] *** razetime left
[04:39] *** razetime joined
[05:15] *** razetime left
[05:16] *** razetime joined
[06:38] *** razetime left
[06:38] *** razetime_ joined
[07:39] *** Guest68 joined
[07:58] *** razetime_ left
[07:59] *** razetime joined
[08:53] <discord-raku-bot> <Kaiepi> i use kebab-case in raku mostly

[08:53] <discord-raku-bot> <Kaiepi> huge exception being metamethods

[08:53] <discord-raku-bot> <Kaiepi> because those tend to use `_`

[10:30] <discord-raku-bot> <Nemokosch> I would like to use my own comparator for testing my module, it would be good if I could import it in all test files without exporting it from the module

[10:30] <discord-raku-bot> <Nemokosch> Is there a way to do this without making a different module?

[10:44] *** gfldex left
[10:44] *** deadmarshal left
[10:45] <lizmat> Nemokosch: https://logs.liz.nl/raku/2021-07-28.html#22:06 perhaps answers your question

[10:49] *** gfldex joined
[10:49] *** deadmarshal joined
[10:58] <discord-raku-bot> <Nemokosch> well, I don't know... maybe not

[10:59] <discord-raku-bot> <Nemokosch> the important part is that I want it to be shared across multiple test files

[10:59] <discord-raku-bot> <Nemokosch> without polluting my module to the outside

[11:30] *** razetime left
[11:31] *** razetime joined
[12:31] *** frost left
[12:35] *** Kaiepi left
[12:36] *** Kaiepi joined
[12:39] <discord-raku-bot> <Kaiepi> my `Trait::Traced` module has a shared `t/lib` for tests

[12:40] <discord-raku-bot> <Kaiepi> `use lib $?FILE.IO.sibling: 'lib'`

[12:40] <discord-raku-bot> <Kaiepi> but i recall people working on the module loader being kind of irked by this pattern for one reason or another

[12:42] <discord-raku-bot> <Kaiepi> but i recall people working on the `CompUnit` etc. being kind of irked by this pattern for one reason or another

[12:44] <discord-raku-bot> <Kaiepi> in rust it's not uncommon for one crate to be fragmented. maybe a test dependency others depending on it could take advantage of optionally <@297037173541175296> ?

[13:03] <discord-raku-bot> <Nemokosch> > maybe a test dependency others depending on it could take advantage of optionally

[13:03] <discord-raku-bot> <Nemokosch> sorry but I just can't comprehend this sentence lol

[13:09] <discord-raku-bot> <Kaiepi> a completely separate module not bundled with the library itself

[13:10] <discord-raku-bot> <Kaiepi> there's a test dependency field in `META6.json` for stuff like that

[13:11] <discord-raku-bot> <Kaiepi> if you need tools to help with testing, others might as well

[13:11] <guifa> Nemokosch: a few things I could think of.  One, put it in a separate module file within your module.  This would make it available to you, but you could even feature guard it as exported only with `use My::Comparator :TESTING` or something.  Two, if the comparator might have even a slight bit of general benefit outside of your module, put it in its own module, and include it as a test dependency only.  Three, I believe you

[13:11] <guifa>  are able to have t/lib/Comparator.rakumod; and then in t/01-foo.rakutest have `use lib 'lib', use Comparator`

[13:11] <guifa> I feel like I've done three before, but don't quote me on it

[13:12] <discord-raku-bot> <Kaiepi> ^

[13:25] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/09/05/2022-36-coming-in-at-50/

[13:44] <discord-raku-bot> <Nemokosch> well, I'll have to ponder upon this anyway. Let me summarize the situation itself as well

[13:45] <discord-raku-bot> <Nemokosch> HTML::Tag generates HTML strings from objects that describe tags

[13:46] <discord-raku-bot> <Nemokosch> the order of attributes doesn't matter in HTML

[13:46] <discord-raku-bot> <Nemokosch> but random attribute order is hard to test

[13:46] <discord-raku-bot> <Nemokosch> so the workaround I inherited was to sort the attributes some way

[13:46] <discord-raku-bot> <Nemokosch> I'd like to get rid of this eventually, it's an unnecessary performance cost

[13:47] <discord-raku-bot> <Nemokosch> I'd rather have slower tests than slower runtime code

[13:48] <discord-raku-bot> <Kaiepi> are you depending on `^attributes`?

[13:48] <discord-raku-bot> <Nemokosch> perhaps not

[13:48] <discord-raku-bot> <Nemokosch> but the attributes are stored in a Hash anyway iirc

[13:48] <discord-raku-bot> <Kaiepi> yeah, that's `^attribute_table`

[13:48] <discord-raku-bot> <Nemokosch> I mean, it's done by hand basically

[13:48] <discord-raku-bot> <Nemokosch> there is an attr field

[13:49] <discord-raku-bot> <Nemokosch> and that attr field is populated

[13:49] <discord-raku-bot> <Nemokosch> eventually the mktag method generates the string from that (as well)

[13:50] <discord-raku-bot> <Nemokosch> https://github.com/2colours/HTML-Tag/blob/e610e42d5f4cb5d74f0e1f17ce635b8ff9662593/lib/HTML/Tag.rakumod#L16

[13:53] <discord-raku-bot> <Kaiepi> it looks a bit like the values want a wrapper with a `Str` method

[13:54] <discord-raku-bot> <Kaiepi> with `when %self-resolving{$_}` and `default` being one type and `when 'value'` being another

[13:54] <discord-raku-bot> <Nemokosch> Let me quote the original author: "definitely work in progress" üôÇ

[13:55] <discord-raku-bot> <Nemokosch> And I don't want to appear thankless because what you're saying makes sense ultimately, it's a good way to go about it probably

[13:56] <discord-raku-bot> <Nemokosch> But I think we could establish the "Y-X problem" term, as a paraphrasis of "X-Y problem"

[13:56] <discord-raku-bot> <Nemokosch> and I can understand that many people don't like to show code because of that

[13:56] <discord-raku-bot> <Nemokosch> they ask about "Y" and they get answers about "X" instead

[13:56] <discord-raku-bot> <Kaiepi> ah sorry

[13:57] <discord-raku-bot> <Nemokosch> like let's assume for now that the implementation is nicer üòÇ

[13:57] <discord-raku-bot> <Nemokosch> I'm not sure if that makes the test easier

[13:57] <discord-raku-bot> <Nemokosch> unless there is a clever way to eliminate to nondeterminism altogether

[13:58] *** Heptite joined
[14:00] <discord-raku-bot> <yabobay> is this very beginnery?

[14:00] <discord-raku-bot> <Nemokosch> I assumed so, because I'm super unknowledgeable with modules

[14:01] <discord-raku-bot> <Nemokosch> and since it came up if the testing could be useful for others, I thought it would be good to talk about what needs to be tested

[14:03] <discord-raku-bot> <Nemokosch> so that others can judge if it's worth it

[14:05] <guifa> I wonder if a Test::Util module might not be a bad idea.  For instance, it's not super easy to see if two lists are functionally equivalent.  for instance, <a b c> ~~/eqv <c b a> returns False, but that's probably a common test someone might want to do.  You *could* convert both to a bag, but I'd venture to say that's not immediately intuitive for someone.  So Test::Util could export, say, is-basically-same test, or an

[14:05] <guifa>  unord-eqv infix, etc.

[14:10] <guifa> (also the Bag version wouldn't work on arbitrary objects, since IIRC it uses WHICH / === comparisons)

[14:13] <discord-raku-bot> <Nemokosch> yes, it does

[14:25] <discord-raku-bot> <Nemokosch> <@989550365533937664> üòé

[14:26] <discord-raku-bot> <yabobay> where is this written

[14:26] <discord-raku-bot> <Nemokosch> https://rakudoweekly.blog/2022/09/05/2022-36-coming-in-at-50/

[14:27] <discord-raku-bot> <Nemokosch> liz always sends it to IRC

[14:27] <lizmat> m: <a b c> (==) <b c a>   # guifa, set equality for the win!

[14:27] <discord-raku-bot> <Nemokosch> and gfldex usually reposts it in <#538445796664803330>

[14:27] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "(==)" in expression "<a b c> (==) <b c a>" in sink context (line 1)‚ê§¬ª

[14:27] <discord-raku-bot> <Nemokosch> if you are looking around on a monday or tuesday afternoon on this server, there are ~ 3 occasions to catch it üòã

[14:28] <lizmat> m: say <a b c> (==) <b c a>   # guifa, set equality for the win!

[14:28] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´True‚ê§¬ª

[14:28] <discord-raku-bot> <Nemokosch> does it work for "multisets" as well?

[14:28] <discord-raku-bot> <Nemokosch> m: say <a b c a> (==) <b c a>

[14:29] <lizmat> Nemokosch: if no sets are in the equation, then set semantics are assumed

[14:29] <lizmat> m: say <a b c a> (==) <b c a>   # set semantics

[14:29] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´True‚ê§¬ª

[14:29] <lizmat> m: say <a b c a> (==) <b c a>.Bag   # bag semantics

[14:29] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´False‚ê§¬ª

[14:29] <discord-raku-bot> <Nemokosch> well... sometimes you want this to be False, depending on the task

[14:30] <lizmat> then use Bag semantics by making either side of the comparison a Bag

[14:31] <lizmat> m: say <a b c a> (==) bag <b c a>   # perhaps better readable

[14:31] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´False‚ê§¬ª

[14:31] <discord-raku-bot> <Nemokosch> it makes sense but if we accept the premise that converting to Bag is "code smell" in the test, then we are left with nothing

[14:32] <discord-raku-bot> <Nemokosch> which I don't necessarily agree with, to be honest, but it's not ocompletely baseless either

[14:32] <discord-raku-bot> <Nemokosch> which I don't necessarily agree with, to be honest, but it's not completely baseless either

[14:45] <lizmat> m: dd (<a b c a> (==) <a b c>):bag   # would an adverb like that make more sense ?

[14:45] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§You can't adverb (<a b c a> (==) <a b c>)‚ê§at <tmp>:1‚ê§------> dd (<a b c a> (==) <a b c>):bag‚èè   # would an adverb like that make more‚ê§    expecting any of:‚ê§        pair value‚ê§¬ª

[14:55] <discord-raku-bot> <Anton Antonov> Why not use XOR (symmetric difference) on sets (or lists or bags) and test is it empty? Something like `@A ‚äñ @B eqv ‚àÖ` .

[14:56] <discord-raku-bot> <Anton Antonov> (I might have missed the point of the discussion though... )

[14:59] <lizmat> Anton Antonov: that's why I implemented set equality, so you wouldn't have to do that

[14:59] <lizmat> set equality also allows short-circuiting

[15:00] <lizmat> m: say <d a b c> (==) <a b c>   # returns False on seeing that "d" is not at the right hand side

[15:00] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´False‚ê§¬ª

[15:03] <discord-raku-bot> <Anton Antonov> @lizmat Yes, `(==)`  is good / useful. Definitely wasn't in my active Raku vocabulary. (But I can "figure out" or come up equations like the one I posted above.)

[15:28] <discord-raku-bot> <Anton Antonov> @lizmat I started considering Raku for implementing Machine Learning (ML) algorithms after seeing this talk of yours: "Raku - Sets without borders", https://archive.fosdem.org/2021/schedule/event/raku_sets_without_borders/ . (I mentioned that before.) Before that I was using _only_ Raku's grammars functionalities. So, I am rewatching that talk now, since I am sure I have missed some (important) detai

[15:33] <Heptite> Is Learning Perl6 a decent resource to start learning Raku?

[15:45] <discord-raku-bot> <Anton Antonov> @Heptite I think so. It is the first book I read on Raku / Perl6. (Then Moritz' "Parsing with Perl 6 Regexes and Grammars: A Recursive Descent into Parsing".)

[16:16] <Heptite> Thank you. :) I'll start there.

[16:17] <guifa> m: class A { has $.x }; say A.new(:2x) (==) A.new(:2x)

[16:17] <camelia> rakudo-moar 7342d9dc2: OUTPUT: ¬´False‚ê§¬ª

[16:18] <guifa> ^^ lizmat unfortunately, (==) fails for non-value types.  A (==)-like operator that uses eqv instead of === could be useful (not for Raku itself, but for test utils and such)

[17:16] <lizmat> guifa: fair point, but of course, you could make A a ValueType (if that makes sense)

[17:23] <discord-raku-bot> <Anton Antonov> Is there are a way to make provide detailed descriptions for CLI scripts in a package? For example, I think the CLI usage message is way too long here: https://github.com/antononcube/Raku-DSL-English-DataQueryWorkflows#command-line-interface

[17:49] *** razetime left
[18:35] *** n1to joined
[18:37] <guifa> You can override `sub USAGE` for basic control, or `sub GENERATE-USAGE` for really fine grained control

[18:40] <discord-raku-bot> <Anton Antonov> @guifa Thank you! I will read the documentation for that.

[22:04] *** n1to left
