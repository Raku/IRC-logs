[04:05] *** Kaipii joined
[04:08] *** Kaipei left
[04:44] *** Kaipii left
[05:20] *** Kaipii joined
[07:42] *** Kaipii is now known as Kaiepi

[08:59] *** Kaiepi left
[09:14] *** Kaiepi joined
[09:22] *** jaguart joined
[10:36] *** lizmat_ joined
[10:38] *** lizmat left
[10:38] *** lizmat_ is now known as lizmat

[12:18] *** jgaz joined
[13:31] <jaguart> Do folks using Raku have any thoughts either way on Dependency Injection vs Service Container - or is that orthogonal?

[14:08] <jaguart> I mean - orthogonal to Raku :)

[14:10] *** saint- joined
[14:27] *** kbtz joined
[14:29] <lizmat> feels like a question better asked on #raku

[14:38] *** kbtz left
[14:38] *** kbtz joined
[16:41] *** discord-raku-bot left
[16:42] *** discord-raku-bot joined
[16:54] *** kbtz left
[16:59] *** jgaz left
[17:03] <jaguart> looking for recommends - Config loader, prefer JSON or YAML - anyone have a fav? Config + Config::Parser::json or Config::JSON etc.?

[17:51] *** saint- left
[17:57] *** Kaiepi left
[18:33] *** Kaiepi joined
[18:34] <SmokeMachine> I prefer json (I donâ€™t like indentation with meaningâ€¦ I feel like using `whitespace`)

[18:34] <SmokeMachine> And itâ€™s easy to search with rakâ€¦ :)

[18:40] <jaguart> SmokeMachine++ - thanks. So far my thought is ``Config`` naming is evil - there is a problem with the Perl Config.pm in terms of name-clash which makes me nervous, and Config::JSON is meh - it has a function interface, but no instance, so would need wrapping to provide state like .config-filename .is_dirty etc.

[18:42] <jaguart> Config::Clever looks interesting - with a shallow wrapper

[18:44] <jaguart> Config::INI - missing raku.land overview, because the docs are in pod6 in the module - but it's a INI based anyway

[20:56] <discord-raku-bot> <avuserow> I like TOML these days. Similar looking to INI but has better data structures. Easier to edit than JSON and avoids the complexity of YAML.

[21:32] <discord-raku-bot> <Quibono> Whatâ€™s the best way to deal with the raku learning curve?

[21:34] <discord-raku-bot> <Nemokosch> doing the weekly challenges, reading small snippets and finding out every day what you need to solve at the moment

[21:35] <discord-raku-bot> <Quibono> Also, does rakudo spit out the bytecode into a file and is there a way to get like a textual bytecode/docs for the bytecode?

[21:35] <discord-raku-bot> <Quibono> And how do you kinda justify the complexity of it? Like what makes raku so worth learning (not trying to be confrontational, just curious)

[21:37] <discord-raku-bot> <Nemokosch> I don't know if it is worth it. What I can say is that it makes you feel empowered when it really works as you would expect. My personal motive for starting Raku was simply that I think POSIX shell is the most disgusting language still in use and I wanted something that has a fluent interface to it, while still being a proper programming language.

[21:39] <discord-raku-bot> <Nemokosch> it also feels great for CLI stuff and prototyping

[21:39] <discord-raku-bot> <Nemokosch> for CLI, I doubt it is beatable at all

[21:41] <discord-raku-bot> <Quibono> Gotcha, thanks. ðŸ™‚

[21:43] <discord-raku-bot> <Nemokosch> Also I think the community is very entitled. This is true for many languages but it's particularly important for languages with small user bases

[21:46] <discord-raku-bot> <Quibono> Entitled how?

[21:46] <discord-raku-bot> <Nemokosch> well, how

[22:09] <discord-raku-bot> <Anton Antonov> docopt implementations in Python and R make those languages fairly for CLI tasks. (At least for data processing, ML, etc.)

[22:10] <discord-raku-bot> <Anton Antonov> "docopt" (http://docopt.org) implementations in Python and R make those languages fairly for CLI tasks. (At least for data processing, ML, etc.)

[22:12] <discord-raku-bot> <Nemokosch> and even this looks lamer than what you get with Raku by literally not doing anything for it

[22:14] <discord-raku-bot> <Anton Antonov> Yeah. ðŸ™‚ It is a crutch. But since I can utilize with CLI some powerful Python and R libraries through "docopt", I like it.

[22:17] <discord-raku-bot> <Nemokosch> Well, fair enough, not gonna argue with that

[22:17] <discord-raku-bot> <Nemokosch> There are two aspects in which we need to catch up, even if not to Python level, at least towards it

[22:17] <discord-raku-bot> <Nemokosch> One is the amount of high-quality, maintained modules

[22:17] <discord-raku-bot> <Anton Antonov> Also -- like you, it seems -- I have hard time determining is learning Raku worth it. For its worth comes from much deeper understanding on programming language technologies. But this is more of a "the journey is its own reward" kind of deal.

[22:17] <discord-raku-bot> <Nemokosch> And the other is the performance...

[22:17] <discord-raku-bot> <Anton Antonov> Working on it, I think ...

[22:17] <discord-raku-bot> <Nemokosch> Definitely

[22:17] <discord-raku-bot> <stevied> Thatâ€™s why Iâ€™m learning it. Just to become more knowledgeable.

[22:19] <discord-raku-bot> <Nemokosch> Python is reasonably fast for data processing these days

[22:19] <discord-raku-bot> <stevied> Good mix of being useful and doing advanced stuff.

[22:21] <discord-raku-bot> <Anton Antonov> Currently I am profiling / benchmarking a the same theoretical design of recommender systems in Java, Kotlin, Mathematica, Python R, Raku, and Swift. Python is not the fastest for the core computations, but is very, very quick and getting/rehydrating pickled recommenders. That makes _very_ applicable for utilization in Unix shell CLI pipelines.

[22:25] <discord-raku-bot> <Anton Antonov> BTW, with Raku the reading of the largest benchmark test CSV file is 20-30 times slower than Python. (After utilizing CBOR, not direct CSV parsing...)

[22:27] <discord-raku-bot> <Anton Antonov> Basically, I was strongly considering not including Raku in that study. But the corresponding Raku package has a reference implementation, so I am going to accommodate it somehow...

[22:27] <discord-raku-bot> <Anton Antonov> Python or Raku?

[22:27] <discord-raku-bot> <stevied> Raku

[22:29] <discord-raku-bot> <Quibono> 20x slower? Damn

[22:29] <discord-raku-bot> <Quibono> Now I want to get involved in raku just to figure out why itâ€™s so slow

[22:31] <discord-raku-bot> <Anton Antonov> The data load, of CSV files. Python uses directly C for those, I am told.

[22:31] <discord-raku-bot> <Quibono> Ah so rakuâ€™s CSV is implemented directly in raku, thatâ€™d do it

[22:33] <discord-raku-bot> <Anton Antonov> Again -- I used a python program to convert CSV file into CBOR file, and used the Raku package "CBOR::Simple" (https://raku.land/zef:japhb/CBOR::Simple) to ingest that file in Raku.

[22:33] <discord-raku-bot> <Quibono> Is there not a raku CSV module?

[22:34] <discord-raku-bot> <Anton Antonov> There is, "Text::CSV", but it is too slow. After 60 min still did not parse / ingest my CSV file.

[22:34] <discord-raku-bot> <Nemokosch> that's why it's reasonably common to implement modules using the NativeCall module, depending on C typically

[22:35] <discord-raku-bot> <Nemokosch> anyway, Raku usually runs on MoarVM, it has basically nothing to do with C per se

[22:37] <discord-raku-bot> <Nemokosch> while MoarVM has pros - for example the sheer fact that it can support all the features of Raku, and that it uses a language that is still essentially Raku - , it seems rather heavy and probably there are still huge open optimization possibilities...

[22:38] <discord-raku-bot> <Nemokosch> not necessarily "low-hanging" but still, there have been good reworks so far, like the new dispatch and like RakuAST will be

[22:39] <discord-raku-bot> <Nemokosch> probably there could be other reworks as well

[22:44] <discord-raku-bot> <Anton Antonov> Hm... for me the low-hanging fruit are basic Machine Learning (ML) algorithms. To some extend in order to supplement the ML code generation I implemented in Raku, but mostly to "remind" myself of those algorithms and take another look at them,

[22:44] <discord-raku-bot> <Anton Antonov> Hm... for me the low-hanging fruit are basic Machine Learning (ML) algorithms. To some extend in order to supplement the ML code generation I implemented in Raku, but mostly to "remind" myself of those algorithms and take another look at them.

[22:48] <discord-raku-bot> <Nemokosch> I suppose machine learning content isn't that much about real-time performance anyway?

[22:50] *** kbtz joined
[22:52] *** kbtz left
[23:03] *** kbtz joined
[23:10] <kbtz> hey folks, I've put my grammar on a its own rakumod file and I'm using `unit grammar gname;` cuz its nice

[23:11] <kbtz> but now over the main program I use gname but neither `parse` nor `gname::parse` is found

[23:13] <kbtz> I need some sort of `our gname::parse` so it can be used over there?

[23:14] <discord-raku-bot> <Quibono> Kinda insane but Iâ€™m really tempted to make my own Raku VM and maybe compilerâ€¦

[23:20] <kbtz> `gname.parse` of course

[23:33] <discord-raku-bot> <Quibono> So thereâ€™s only rakudo as an active compiler?

[23:52] <discord-raku-bot> <stevied> Only viable one being worked, from what Iâ€™ve read

