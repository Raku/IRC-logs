[01:12] *** frost joined
[03:36] *** frost left
[04:58] *** razetime joined
[07:36] *** razetime left
[08:37] *** discord-raku-bot left
[08:37] *** discord-raku-bot joined
[10:34] *** frost joined
[13:07] <deadmarshal> I want to convert the Perl code to Raku, but I get two extra ":"'s at the start and end of the resulting string: https://bpa.st/V2GA

[13:11] <deadmarshal> oops, changed signature: sub mac_address(Str $str){}

[13:15] <discord-raku-bot> <Nemokosch> I don't quite get what you are trying to say

[13:15] <discord-raku-bot> <Nemokosch> anyway, pretty sure the problem is that you use `split('')` over `comb`

[13:16] <guifa> split('') includes zero-strings on either side

[13:16] <guifa> m: 'abc'.split('').Int.say

[13:16] <camelia> rakudo-moar 25c76aed0: OUTPUT: «5␤»

[13:17] <guifa> you can use .split('', :skip-empty) or, more idiomatically, just use .comb

[13:17] <guifa> m: 'abc'.comb.Int.say

[13:17] <camelia> rakudo-moar 25c76aed0: OUTPUT: «3␤»

[13:23] <deadmarshal> thanks 

[14:05] *** frost left
[15:07] <discord-raku-bot> <rcmlz> Hello, is there a way to shut off "dynamic type checking" in function inputs via a command line option to raku? When running the follwoing code, booth versions run equally fast?

[15:07] <discord-raku-bot> <rcmlz> m:

[15:07] <discord-raku-bot> <rcmlz> #!/usr/bin/env raku

[15:07] <discord-raku-bot> <rcmlz> #| plain vanilla factorial

[15:07] <discord-raku-bot> <rcmlz> sub fact0($n) {

[15:07] <discord-raku-bot> <rcmlz>     return 1 if $n == 0;

[15:07] <discord-raku-bot> <rcmlz>     return $n * fact0($n - 1);

[15:07] <discord-raku-bot> <rcmlz> }

[15:07] <discord-raku-bot> <rcmlz> #| type safe factorial

[15:07] <discord-raku-bot> <rcmlz> sub fact1(UInt $n --> UInt) {

[15:07] <discord-raku-bot> <rcmlz>     return 1 if $n == 0;

[15:07] <discord-raku-bot> <rcmlz>     return $n * fact1($n - 1);

[15:09] <discord-raku-bot> <rcmlz> The intention behind is that during development type safe arguments help debugging, but to get maximum performance it might be beneficial to switch of type checks. Similar to how someone can switch on/of assertations in Java by providing a command line argument.

[15:10] <discord-raku-bot> <rcmlz> The intention behind is that during development type safe arguments help debugging, but to get maximum performance it might be beneficial to switch of type checks. Similar to how someone can switch on/off assertations in Java by providing a command line argument.

[15:11] <discord-raku-bot> <rcmlz> Hello, is there a way to shut off "dynamic type checking" in function inputs via a command line option to raku? When running the following code, booth versions run equally fast?

[15:11] <discord-raku-bot> <rcmlz> Hello, is there a way to shut off "dynamic type checking" in function inputs via a command line option to raku? When running the following code, booth versions shall run equally fast.

[15:13] <discord-raku-bot> <rcmlz> The intention behind is that during development type safe arguments help debugging, but to get maximum performance it might be beneficial to switch off type checks. Similar to how someone can switch on/off assertations in Java by providing a command line argument.

[15:17] <guifa> rcmlz: so as a user you don't have control.  types are a lot more complex in Raku than they might initially seem, but between Rakudo and the VM, many of them are skipped through various forms of optimization

[15:18] <guifa> sub fact0($n) is actually typed (and will likely be type checked).  It requires type `Any`, which is a subclass of type Mu.

[15:18] <guifa> (most everything is of type Any, but there are a few classes that for one reason or another are not Any)

[15:21] *** razetime joined
[15:21] <discord-raku-bot> <rcmlz> Thank you. I was under the assumption, that the difference in execution speed is due to the type checking in fact1() vs. no type checking in fact0(). Is it possible for me to easily see where fact1() is spending the extra time?

[15:23] <discord-raku-bot> <rcmlz> Thank you. I was under the assumption, that the difference in execution speed is due to the type checking in fact1() vs. no type checking in fact0(). Is it possible for me to easily see where fact1() is spending the extra time?

[15:23] <discord-raku-bot> <rcmlz> raku --profile run_time_checks.raku

[15:23] <discord-raku-bot> <rcmlz> gives me a huge html-Page ...

[15:26] <discord-raku-bot> <rcmlz> stating that ther is a factor of 3 between the two versions

[15:28] <discord-raku-bot> <rcmlz> stating that there is apparently a factor of 3 between the two versions

[15:29] <guifa> so UInt isn't actually a type unto itself, rather a subset.  There is definitely more type checking involved there

[15:30] <guifa> I don't know the exact internals, but effectively, for UInt, it will check first whether it's an Int, and then whether it's positive

[15:31] <guifa> if that code gets hot, all sorts of optimizations will occur at runtime, so always be wary of simple benchmarks (it took me a while to get used to that)

[15:32] <discord-raku-bot> <rcmlz> I am taking a course at university in that area and the professor said that he is not aware of any language that has this oportunity to switch between statically typed and dynamically typed by simple command line option. Just wanted to validate his assumption against Raku. Thank you.

[15:35] <guifa> if you wanted to see the calls being made, you can compile to QAST which might give you some insight for a simple case like what you have.  But Raku is a weird beast in that the boundaries between compile and run time are very fuzzy, and different implementations have freedom to shift some things around from one to the other (things like BEGIN can cause runtime during compile time, and EVAL causes compile time during

[15:35] <guifa>  runtime, and since those can be mixed and matched....).  

[15:46] <discord-raku-bot> <rcmlz> I used "raku --target=ast run_time_checks.raku > qast.md" but are a bit overwhelmed by the content. Thank you anyway.

[16:32] <discord-raku-bot> <gfldex> <@776481947240366142> You can run your scripts with `MVM_SPESH_NODELAY=1 raku` to have optimisations run right away.

[18:51] *** discord-raku-bot left
[18:52] *** discord-raku-bot joined
[19:37] *** razetime left
