[00:04] <jaguart> oh maybe I'm confused because .WHO.gist shows more meaningful than .WHO.raku 

[00:19] <jaguart> ok - so use MyModule; MyModule.WHO returns the Modules Stash aka MyModule:: which looks like its { :MyClassOne<MyModule::MyClassOne>, ... } ie pairs of local name -> fullname

[00:20] <discord-raku-bot> <Nemokosch> stash = symbol table hash

[00:20] <jaguart> MyClass.WHO returns the class stash - but can't see how I can get to the Module from the Class

[00:22] <jaguart> I also don't understand the diff between package and module :(

[00:23] <jaguart> Do you put your classes in packages and your subs in Modules?

[00:24] <discord-raku-bot> <Nemokosch> https://www.youtube.com/watch?v=NYBc3tQEIh4 all I know, I know from this mega class

[00:25] <discord-raku-bot> <Nemokosch> I watched it within the last week

[00:26] <discord-raku-bot> <Nemokosch> I'm trying to look up that part but the point was that packages are basically a lower-level construct in Raku, they back up modules as well

[00:28] <discord-raku-bot> <Nemokosch> it also answered one of my former questions (how to call an inherited method) on the way

[00:29] <jaguart> ok, so maybe its as simple as: package is a namespace, module is a namespace with ver and auth, class has ver and auth but is not a namespace -> so put it in a package or a module

[00:30] <discord-raku-bot> <Nemokosch> Stash examples start around 2:06:.. by the way

[00:30] <jaguart> thanks

[00:40] <discord-raku-bot> <Nemokosch> 2:16:48 "Raku actually has two similar concepts, it has packages and it has modules..."

[00:40] <discord-raku-bot> <Nemokosch> "package just declares the namespace (...) module inherits from the package, it does a little bit more"

[00:41] *** razetime joined
[00:45] <jaguart> TIL Foo:: ===> great video, added to favs 

[00:58] *** RTB47 joined
[00:59] *** RTB47 left
[01:05] <deoac> Given the Str "MyClass<2446066483976>", is it possible to retrieve the actual class object?

[01:15] *** discord-raku-bot left
[01:20] *** discord-raku-bot joined
[01:22] *** human-blip joined
[02:00] *** discord-raku-bot left
[02:00] *** discord-raku-bot joined
[02:05] *** discord-raku-bot left
[02:05] *** discord-raku-bot joined
[02:10] <jaguart> Do you mean kind of like get the object at a memory location?

[02:11] <jaguart> You might be able to walk through all the things in your namespace and see if any of their .WHICH matches your ObjAt.Str?

[02:13] <jaguart> m: say ::.keys

[02:13] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´($_ $! $=pod GLOBALish $=finish ::?PACKAGE EXPORT !UNIT_MARKER $?PACKAGE $/ $¬¢)‚ê§¬ª

[02:41] <jaguart> m: my $a='a'; my $b=Hash.new; say ::.pairs.grep({ .key ~~ /^^ \$ / and .value.DEFINITE }).map({ .key ~ ' -> ' ~.value.WHICH });

[02:41] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´($/ -> Match|6104765595648 $=pod -> Array|6104780987304 $a -> Str|a $b -> Hash|6104898989504)‚ê§¬ª

[02:43] *** discord-raku-bot left
[02:43] *** discord-raku-bot joined
[02:46] *** gfldex left
[02:46] *** gfldex joined
[02:48] *** discord-raku-bot left
[02:49] *** discord-raku-bot joined
[03:13] <jaguart> Is there a way to instantiate a class named withing a string without EVAL?

[03:13] <jaguart> m: use MONKEY-SEE-NO-EVAL;class C {}; my $cl = 'C'; my $c = EVAL "$cl.new"; say $c.WHAT

[03:13] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´(C)‚ê§¬ª

[03:13] <jaguart> but without the EVAL?

[03:38] <deoac> Hmmm. I think I'll refactor than tinker with that magic.¬† Thank you.

[03:43] <deoac> `cat foo.txt | ./my-prog.raku`

[03:43] <deoac> How do I write the Signature of MAIN to capture the text of foo.txt?

[04:15] <gfldex> m: class C {}; my $cl = 'C'; my $c = ::{$cl}.new(); say $c.WHAT;

[04:15] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´(C)‚ê§¬ª

[04:15] <gfldex> jaguart: ^^^

[04:17] <gfldex> deoac: see: https://docs.raku.org/type/IO::ArgFiles#$*ARGFILES

[05:08] *** Heptite left
[05:25] *** deoac left
[10:40] <discord-raku-bot> <Nemokosch> How are these beginner questions, by the way? üòÑ

[13:31] *** NemokoschKiwi joined
[14:12] <discord-raku-bot> <chicken> ```pl

[14:12] <discord-raku-bot> <chicken> grammar Bruh {

[14:12] <discord-raku-bot> <chicken>   rule TOP {

[14:12] <discord-raku-bot> <chicken>     ^^ <expression>* $$

[14:12] <discord-raku-bot> <chicken>   } 

[14:12] <discord-raku-bot> <chicken>   

[14:12] <discord-raku-bot> <chicken>   rule expression {

[14:12] <discord-raku-bot> <chicken>     [<number> | <string>]

[14:12] <discord-raku-bot> <chicken>   } 

[14:12] <discord-raku-bot> <chicken>   token number {

[14:12] <discord-raku-bot> <chicken>     \d+

[14:12] <discord-raku-bot> <chicken>   }

[14:12] <discord-raku-bot> <chicken>   token string {

[14:12] <discord-raku-bot> <chicken>     \S+

[14:12] <discord-raku-bot> <chicken>   }

[14:12] <discord-raku-bot> <chicken> }

[14:12] <discord-raku-bot> <chicken> say Bruh.parse("3 f")

[14:12] <discord-raku-bot> <chicken> ``` how can i make this not return the expression but only the children <number> / <string>

[14:13] <discord-raku-bot> <Nemokosch> almost sure the answer will be action class and/or just decomposing the match object by hand

[14:13] <discord-raku-bot> <Nemokosch> but what do you want to be returned, exactly?

[14:14] <discord-raku-bot> <chicken> like this ```pl

[14:14] <discord-raku-bot> <chicken> ÔΩ¢3 fÔΩ£

[14:14] <discord-raku-bot> <chicken>  number => ÔΩ¢3ÔΩ£

[14:14] <discord-raku-bot> <chicken>  string => ÔΩ¢fÔΩ£

[14:14] <discord-raku-bot> <chicken> ``` currently it's like this ```pl

[14:14] <discord-raku-bot> <chicken> ÔΩ¢3 fÔΩ£

[14:14] <discord-raku-bot> <chicken>  expression => ÔΩ¢3 ÔΩ£

[14:14] <discord-raku-bot> <chicken>   number => ÔΩ¢3ÔΩ£

[14:14] <discord-raku-bot> <chicken>  expression => ÔΩ¢fÔΩ£

[14:14] <discord-raku-bot> <chicken>   string => ÔΩ¢fÔΩ£

[14:14] <discord-raku-bot> <chicken> ```

[14:25] <discord-raku-bot> <Nemokosch> hmmm

[14:31] <discord-raku-bot> <Nemokosch> aha!

[14:31] <discord-raku-bot> <Nemokosch> parse returns Match objects

[14:42] <discord-raku-bot> <Nemokosch> Bruh.parse("3 f")<expression> returns an Array of all matches captured inside  <expression> named captures

[14:44] <discord-raku-bot> <Nemokosch> If you want to do something significantly more complex, consider using Action objects: https://docs.raku.org/language/grammars#index-entry-Actions

[15:37] *** Heptite joined
[16:11] <falsifian> Can I have an @-sigiled variable that's both immutable and has a type? "my Int @x := (1, 2, 3);" fails because List isn't a subclass of Positional[Int].

[16:11] <falsifian> m: my Int @x := (1, 2, 3);

[16:11] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´Type check failed in binding; expected Positional[Int] but got List ((1, 2, 3))‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:12] <falsifian> I guess I could make my own subclass of Positional[Int], but I'm wondering if I'm missing something built-in.

[16:12] <discord-raku-bot> <Nemokosch> long story short: typed @-sigilled variables are a constant headache

[16:13] <discord-raku-bot> <Nemokosch> probably a where clause is easier to get working

[16:13] <discord-raku-bot> <Nemokosch> where *.all ~~ Int, or something

[16:17] <falsifian> I'm trying to use where with my @... but it looks like the where clause is applied to the elements.

[16:17] <falsifian> m: my @x where * ~~ Int = 1, 2, 3;

[16:17] <camelia> rakudo-moar d52342eb0: ( no output )

[16:17] <falsifian> m: my @x where * ~~ Int := 1, 2, 3;

[16:17] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´Type check failed in binding; expected Positional[<anon>] but got List ((1, 2, 3))‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:17] <discord-raku-bot> <Nemokosch> the code examples don't support the statement?

[16:19] <discord-raku-bot> <Nemokosch> anyway, you do need to allow conversion from List to something else

[16:20] <discord-raku-bot> <Nemokosch> since List doesn't know element types

[16:20] <falsifian> What code examples do you mean?

[16:21] <falsifian> m: my $x where { $_.all ~~ Int } := (1, 2, 3);

[16:21] <camelia> rakudo-moar d52342eb0: ( no output )

[16:21] <falsifian> That seems to work, at least.

[16:37] <discord-raku-bot> <Nemokosch> for me it doesn't but I'm not going to complain on someone else's behalf üòÑ

[16:43] <falsifian> In practice I'll probably just drop the type in favour of the immutability, unless the type check is especially helpful. my @x := .... I'm still figuring out when I want to use what features.

[16:46] <discord-raku-bot> <Nemokosch> oh I misread it, you wrote my $x, not my @x

[17:15] *** razetime left
[18:36] *** NemokoschKiwi left
[19:35] <discord-raku-bot> <chicken> im trying to call a grammar.parse from inside a class method but im getting `Cannot assign to a readonly variable or a value

[19:35] <discord-raku-bot> <chicken> `

[19:43] <lizmat> that could be anything...

[19:43] <lizmat> can you golf the issue and provide a full --ll-exception backtrace ?

[19:43] <lizmat> in a gist?

[19:52] <discord-raku-bot> <chicken> ok here is the gist https://gist.github.com/scpchicken/c96a0353dce50c8846cd03cc44a1dcd2

[19:55] *** deoac joined
[19:56] <discord-raku-bot> <chicken> https://pastebin.com/cj7yBZmB here is the --ll-exception

[19:57] <lizmat> yeah, ok, thanks

[19:59] <lizmat> ok, not seeing a quick fix

[19:59] <lizmat> and I'm going to be in a meeting in a minute

[19:59] <lizmat> will check again when done

[20:04] <deoac> ~% cat deleteme.raku |  ./deleteme.raku

[20:04] <deoac> Usage:

[20:04] <deoac> ¬† ./deleteme.raku <some-text>

[20:05] <deoac> How can I get that to work? deleteme.raku expects a string, not a filename.

[20:05] <discord-raku-bot> <chicken> ./delete `cat bruh`

[20:06] <discord-raku-bot> <chicken> ./delete $(cat bruh)

[20:06] <discord-raku-bot> <chicken> do edits show up?

[20:10] <discord-raku-bot> <Nemokosch> I think they are resent

[20:35] <discord-raku-bot> <chicken> ./delete "$(cat bruh)"

[20:59] <lizmat> chicken:  you need to make $/ writable in method TOP:

[20:59] <lizmat> method TOP($/ is copy) {

[20:59] <lizmat> afk&

[22:02] <discord-raku-bot> <chicken> huh ok

[22:05] <discord-raku-bot> <xkevio> what kind of parser do raku grammars use when calling `parse`? is it LL?

[22:05] <discord-raku-bot> <xkevio> what kind of parser does raku grammars use when calling `parse`? is it LL?

[22:05] <discord-raku-bot> <xkevio> what kind of parser does a raku grammar use when calling `parse`? is it LL?

[22:05] <discord-raku-bot> <Nemokosch> PEG, from what I know

[22:06] <discord-raku-bot> <xkevio> ah i see

[22:07] <discord-raku-bot> <xkevio> ok follow up question, i tried translating a simple context free grammar as a raku grammar and when trying to parse a word that has a symbol in it that is not at all contained in the grammar, raku enters an endless loop but not when that symbol is at the end of the word

[22:07] <discord-raku-bot> <xkevio> this grammar

[22:08] <discord-raku-bot> <xkevio> i translated like that

[22:08] <discord-raku-bot> <xkevio> now ofc "c" isnt part of that but i dont get `Nil`, ive traced through it with `Grammar::Debugger` and i do understand why it recurses but is this just an example of PEGs being limited context free grammars?

[22:13] <guifa> Do you have a copy of either the original grammar or your raku grammar and a test parse string you're using?

[22:15] <discord-raku-bot> <Nemokosch> already posted, except IRC is being IRC

[22:15] <discord-raku-bot> <Nemokosch> https://media.discordapp.net/attachments/768511641758466088/1051259012412342314/image.png

[22:15] <discord-raku-bot> <Nemokosch> https://media.discordapp.net/attachments/768511641758466088/1051258967864643694/image.png

[22:16] <discord-raku-bot> <xkevio> oh sorry, idk how the irc bridge handles discord image uploads

[22:24] <guifa> So the reason that it hangs is that you are allowing for zero-width progression

[22:28] <guifa> Regardless whether it tries to match <A><B> or <B><C>, it will end up in the same place: <A> will try to match 'a' fail and then <B> anyways.  Thn it tries to match 'b' and that's a no go so it goes to <C>, tries to match 'a', no go, and then tries to go with <A> again. 

[22:34] <discord-raku-bot> <xkevio> yes i understand that. so how do i not allow zero-width progression? something like negative lookaround? i am sorry, im not too knowledgable on those specific terms

[22:45] <guifa> Wikipedia has a small discussion on it.  https://en.wikipedia.org/wiki/Left_recursion#Removing_left_recursion

[22:45] <guifa> In your case, I'd just check that everything is <[ab]>

[22:45] <guifa> eg

[22:47] <guifa> token valid { ^ [a | b]+ $ }; token TOP { <valid> && [ <A><B> | <B><C> ]¬†} 

[22:51] <discord-raku-bot> <xkevio> i see thank you! i will read up on that, knew it had something to do with but didnt know how to express that

[23:04] *** deoac left
[23:22] *** jaguart left
