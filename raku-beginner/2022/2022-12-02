[01:40] *** habere-et-disper left
[01:46] *** ToddAndMargo joined
[02:10] *** razetime joined
[02:13] *** human-blip left
[02:25] *** ToddAndMargo left
[02:38] *** razetime left
[02:46] *** razetime joined
[03:09] *** Kaiepi left
[03:56] *** jaguart joined
[04:02] <jaguart> it is possible to declare a named my $var in trailing for-range iteration?

[04:02] <jaguart> m:  say "am $_" for 1..2

[04:02] <camelia> rakudo-moar 6cded78e9: OUTPUT: «am 1␤am 2␤»

[04:03] <jaguart> m:  say "am $item" for 1..2 -> $item

[04:03] <camelia> rakudo-moar 6cded78e9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$item' is not declared.  Did you mean '&item'?␤at <tmp>:1␤------> say "am ⏏$item" for 1..2 -> $item␤»

[05:51] <discord-raku-bot> <Mason> so, is there a way to do this?

[05:51] <discord-raku-bot> <Mason> ```raku

[05:51] <discord-raku-bot> <Mason> my @example = [

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason> ];

[05:51] <discord-raku-bot> <Mason> sub test($a, $x) { 

[05:51] <discord-raku-bot> <Mason>     say "{$a}-{$x}";

[05:51] <discord-raku-bot> <Mason> }

[05:51] <discord-raku-bot> <Mason> @example.map(&test); #what do I do here?

[05:51] <discord-raku-bot> <Mason> ```

[05:51] <discord-raku-bot> <Mason> I know I can change the signature of test to `sub test(($a, $x)) { ` and it works, but how do I call the function without modifying it?

[05:51] <discord-raku-bot> <Mason> so, is there a way to do this?

[05:51] <discord-raku-bot> <Mason> ```raku

[05:51] <discord-raku-bot> <Mason> my @example = [

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason>     ['A', 'X'],

[05:51] <discord-raku-bot> <Mason> ];

[05:51] <discord-raku-bot> <Mason> sub test($a, $x) { 

[05:51] <discord-raku-bot> <Mason>     say "{$a}-{$x}";

[05:51] <discord-raku-bot> <Mason> }

[05:51] <discord-raku-bot> <Mason> @example.map(&test); #what do I do here?

[05:51] <discord-raku-bot> <Mason> ```

[05:51] <discord-raku-bot> <Mason> I know I can change the signature of test to `sub test(($a, $x)) { ` and it works, but how do I call the function in map without modifying it? Do I have to expand it fully?

[07:25] *** fishtank joined
[07:29] *** fishtank left
[08:40] <discord-raku-bot> <Nemokosch> jaguart: no, it's not possible

[08:44] <jaguart> Are there any Raku bindings for R - the math/stats libraries, like Perl s Math::GammaFunction?

[08:47] <discord-raku-bot> <Nemokosch> <@259818303420235786> (Mason for IRC folks) if you are confident they all contain two elements, you could flatten it all 😄

[08:48] <discord-raku-bot> <Nemokosch> By the way, is there a reason you are putting them into arrays or is that just a habit from other languages?

[08:49] <discord-raku-bot> <Mason> habit from other languages probably, was just trying to get the example loaded, no clue what they actually are in what I was working with

[08:50] <discord-raku-bot> <Nemokosch> ['A', 'X'] looks like you're gonna mutate the individual letters

[08:52] <discord-raku-bot> <Mason> Ah, makes sense

[08:52] <discord-raku-bot> <Mason> FWIW this it in context: https://discord.com/channels/538407879980482560/783745680648306709/1048120201050329208

[08:53] <discord-raku-bot> <Mason> should probably change those arrays to lists

[08:55] <discord-raku-bot> <Nemokosch> There is another thing I'm not sure you'd want to know right now

[08:55] <discord-raku-bot> <Nemokosch> But I'm gonna say it anyway, lest it surprise you later

[08:56] <discord-raku-bot> <Nemokosch> There are in fact two assignments that look the same but have different implementation and different precedence even

[08:58] <discord-raku-bot> <Nemokosch> so my ```perl

[08:58] <discord-raku-bot> <Nemokosch> @example = [

[08:58] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:58] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:58] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:58] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:58] <discord-raku-bot> <Nemokosch> ];```

[08:58] <discord-raku-bot> <Nemokosch> does the same thing as

[08:59] <discord-raku-bot> <Nemokosch> ```perl

[08:59] <discord-raku-bot> <Nemokosch> @example = (

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch> );```

[08:59] <discord-raku-bot> <Nemokosch> or even

[08:59] <discord-raku-bot> <Nemokosch> ```perl

[08:59] <discord-raku-bot> <Nemokosch> @example = 

[08:59] <discord-raku-bot> <Nemokosch> ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'],

[08:59] <discord-raku-bot> <Nemokosch>     ['A', 'X'];

[08:59] <discord-raku-bot> <Nemokosch> ```

[08:59] <discord-raku-bot> <Nemokosch> (I hope the newlines are allowed here, that I haven't checked)

[09:00] <jaguart> m: say [<a b c>].^name

[09:00] <camelia> rakudo-moar 6cded78e9: OUTPUT: «Array␤»

[09:01] <jaguart> m: say (<a b c>).^name

[09:01] <camelia> rakudo-moar 6cded78e9: OUTPUT: «List␤»

[09:01] <jaguart> kind of expected though?

[09:02] <discord-raku-bot> <Nemokosch> what you sent is expected - but it might not be expected that @example is gonna be the very same Array, no matter which of these you assign to it

[09:03] <discord-raku-bot> <Nemokosch> m: say (@ = (<a b c>)).^name

[09:04] <discord-raku-bot> <Nemokosch> oh by the way, (<a b c>) is not a nested List, it's just ('a', 'b', 'c')

[09:05] <discord-raku-bot> <Nemokosch> while [<a b c>] is a one-element Array containing the List ('a', 'b', 'c')

[09:05] <jaguart> m: say [<a b c>].elems

[09:05] <camelia> rakudo-moar 6cded78e9: OUTPUT: «3␤»

[09:05] <discord-raku-bot> <Nemokosch> <@259818303420235786> I don't know if you have heard this already but Lists are created by the comma operator, not the parens (except for the empty List)

[09:06] <jaguart> yeah - heard that, but (<a b c>) seems to make a List

[09:06] <discord-raku-bot> <Nemokosch> welp, then I'm not sure why that flattened

[09:06] <discord-raku-bot> <Nemokosch> <a b c> itself makes a List

[09:07] <discord-raku-bot> <Mason> yep, I saw that all in the docs

[09:07] <discord-raku-bot> <Nemokosch> m: dd <a b c>

[09:07] <jaguart> Oh - that is nice :)

[09:08] <discord-raku-bot> <Nemokosch> for [('a', 'b', 'c')] being flat, well... apparently it is but I wouldn't have expected it...

[09:09] <discord-raku-bot> <Nemokosch> maybe I've read this before but even after more than one year of pretty intensive scripty use of Raku, I couldn't adopt my mind to this

[09:10] <discord-raku-bot> <Nemokosch> I mean adding the scalar sigil is an easy fix but still, just why

[09:10] <discord-raku-bot> <Nemokosch> m: dd [$<a b c>]

[09:11] *** discord-raku-bot left
[09:11] *** discord-raku-bot joined
[09:12] <jaguart> maybe cos List is immutable, Array is List of scalar containers

[09:13] <jaguart> m: <a b c>[1] = 'B'

[09:13] <camelia> rakudo-moar 6cded78e9: OUTPUT: «Cannot modify an immutable List ((a b c))␤  in block <unit> at <tmp> line 1␤␤»

[09:13] <discord-raku-bot> <Nemokosch> you can put the List into a scalar container

[09:14] <jaguart> m:  [<a b c>][1] = 'B'

[09:14] <camelia> rakudo-moar 6cded78e9: ( no output )

[09:14] <discord-raku-bot> <Nemokosch> $<a b c> returns (Nil, Nil, Nil) and I think I know why...

[09:15] <discord-raku-bot> <Nemokosch> syntactic ambiguity with hash lookup

[09:15] <jaguart> oh - so a hash-slice

[09:15] <discord-raku-bot> <Nemokosch> it looks up keys 'a' 'b' and 'c' on the anonymous $ variable 😆

[09:16] <discord-raku-bot> <Nemokosch> $(<a b c>) works as expected

[09:16] <discord-raku-bot> <Nemokosch> the list living inside a Scalar

[09:23] <jaguart> is that the List inside the anonymous $ state var?

[09:24] <jaguart> m: say (%)<a b c>

[09:24] <camelia> rakudo-moar 6cded78e9: OUTPUT: «((Any) (Any) (Any))␤»

[09:24] <jaguart> m: say ($)<a b c>

[09:24] <camelia> rakudo-moar 6cded78e9: OUTPUT: «((Any) (Any) (Any))␤»

[09:24] <discord-raku-bot> <Nemokosch> m: dd $(<a b c>)

[09:25] <discord-raku-bot> <Nemokosch> yeah I suppose you don't see the output of this, I might switch to IRC for now

[09:25] *** Nemokosch joined
[09:25] <jaguart> m: dd $(<a b c>)

[09:25] <camelia> rakudo-moar 6cded78e9: OUTPUT: «$("a", "b", "c")␤»

[09:25] <Nemokosch> off we go

[09:25] <jaguart> m: dd (<a b c>)

[09:25] <camelia> rakudo-moar 6cded78e9: OUTPUT: «("a", "b", "c")␤»

[09:26] <Nemokosch> you know, what bugs me is the difference between (1) and [1]

[09:26] <Nemokosch> m: dd [1]

[09:26] <camelia> rakudo-moar 6cded78e9: OUTPUT: «[1]␤»

[09:26] <Nemokosch> actually an array

[09:26] <Nemokosch> m: dd (1)

[09:26] <camelia> rakudo-moar 6cded78e9: OUTPUT: «1␤»

[09:26] <Nemokosch> just the number

[09:26] <jaguart> m: dd 1,

[09:26] <camelia> rakudo-moar 6cded78e9: OUTPUT: «1␤»

[09:27] <Nemokosch> but then why does [['a', 'b', 'c']] flatten?

[09:28] <Nemokosch> jaguart - I think your idea was good but maybe the comma got passed as an argument separator for the function

[09:29] *** discord-raku-bot left
[09:29] <Nemokosch> and I'm not sure one can disambiguate without using parens

[09:29] *** discord-raku-bot joined
[09:30] <jaguart> or whatever? aka ;*

[09:30] <jaguart> m: say [[1,2,[3,4]],[4,5]][*;*];

[09:30] <camelia> rakudo-moar 6cded78e9: OUTPUT: «(1 2 [3 4] 4 5)␤»

[09:31] <jaguart> m: say [[1,2,[3,4]],[4,5]][*;*;*;*]

[09:31] <camelia> rakudo-moar 6cded78e9: OUTPUT: «(1 2 3 4 4 5)␤»

[09:31] <Nemokosch> this is multi-dimensional indexing

[09:33] <jaguart> yeah - I'm wondering if an implied whatever is flattening when you dont expect it

[09:34] <jaguart> or maybe its the flattening semi-colon

[09:35] <Nemokosch> the semi-colon is, from what I know, I shorthand for nesting

[09:35] <Nemokosch> m: say [[1,2,[3,4]],[4,5]][*][*];

[09:35] <camelia> rakudo-moar 6cded78e9: OUTPUT: «([1 2 [3 4]] [4 5])␤»

[09:35] <Nemokosch> welp, it did NOT do the same

[09:36] <Nemokosch> could you direct me to the documentation where you found that ; flattens?

[09:36] <jaguart> https://docs.raku.org/language/subscripts#index-entry-flattening_

[09:36] <Nemokosch> thank you

[09:36] <jaguart> yw - but Im no longer a welp ;)

[09:37] *** Kaiepi joined
[09:43] <Nemokosch> so apparently subscripts of subscripts simply don't count as "multidimensional"

[09:43] <Nemokosch> I thought ; was just syntax sugar for subscripts of subscripts

[09:43] <Nemokosch> it still might be a syntax sugar but surely not for that :D

[10:01] <Nemokosch> https://github.com/rakudo/rakudo/blob/2022.07/src/core.c/array_multislice.pm6#L57

[10:08] <lizmat> if you look at the 6.e code for that, you will see it makes more sense I think

[10:13] *** Nemokosch left
[10:14] *** Nemokosch joined
[10:50] <Nemokosch> https://github.com/rakudo/rakudo/blob/2022.07/src/core.e/array_multislice.pm6#L74 gotcha

[10:51] <Nemokosch> I like how CoreHackers::Sourcery is based on introspection and therefore works with certain language versions

[12:02] *** sgrs joined
[13:37] *** habere-et-disper joined
[13:42] <habere-et-disper> How do you subset an Array?

[13:42] <habere-et-disper> If I take a working subset of Int like:

[13:42] <habere-et-disper> m: subset pint of Int where 1..*; sub pirate( pint $n ) { say $n }; my pint $foo = 120;

[13:42] <camelia> rakudo-moar 6cded78e9: ( no output )

[13:42] <habere-et-disper> And adjust it to an Array, I'm confused by the type check failure:

[13:42] <habere-et-disper> m: subset parr of Array where { .elems ~~ 2..* }; sub pirate( parr @n ) { say @n }; my parr @foo = [120,2];

[13:42] <camelia> rakudo-moar 6cded78e9: OUTPUT: «Type check failed for an element of @foo; expected parr but got Int (120)␤  in block <unit> at <tmp> line 1␤␤»

[13:42] <habere-et-disper> Thanks!

[13:43] *** razetime left
[13:49] <Kaiepi> m: subset parr of Array where { .elems ~~ 2..* }; sub pirate(parr \n) { say n }; my parr $foo = [120,2]'

[13:49] <camelia> rakudo-moar 6cded78e9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> rr \n) { say n }; my parr $foo = [120,2]⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[13:49] <Kaiepi> huh

[13:49] <Kaiepi> m: subset parr of Array where { .elems ~~ 2..* }; sub pirate(parr $n is raw) { say $n }; my parr $foo = [120,2]'

[13:49] <camelia> rakudo-moar 6cded78e9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------>  raw) { say $n }; my parr $foo = [120,2]⏏'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[13:49] <Kaiepi> that works in raku -e?

[13:50] <Kaiepi> anyway a type on an @ or % sigilled parameter types its elements, not the container

[13:50] <Kaiepi> you need either an $ is raw or \ to be most equivalent

[13:51] <Kaiepi> you can get away with just $ sometimes though

[14:07] <discord-raku-bot> <Anton Antonov> <@210313526928080896> Instructive explanations above!

[14:12] <discord-raku-bot> <Anton Antonov> What is the easiest way to get list if lists threaded? Here is an example of what I mean:  from `(3,5,(10,20),100)` to get `((3, 5, 10, 100), (3, 5, 20, 100))` .

[14:13] <habere-et-disper> Thanks Kaiepi!

[14:32] <discord-raku-bot> <Kaiepi> <@694526400488669234> not sure offhand. could make a weird `reduce`?

[14:34] <discord-raku-bot> <Anton Antonov> <@210313526928080896> Sure, a weird reduce would work! 🙂 I assume that means using `reduce` with the `X` , `Z` , etc. operators.

[14:36] <discord-raku-bot> <Nemokosch> m: [X] (3,5,(10,20),100)

[14:36] <discord-raku-bot> <Nemokosch> bruh

[14:36] <discord-raku-bot> <Nemokosch> m: say [X] (3,5,(10,20),100)

[14:37] <discord-raku-bot> <Kaiepi> m: say [X] (1,2,(3,(4,5),6),7)

[14:37] <discord-raku-bot> <Kaiepi> you'd need to repeat that for each layer of list

[14:37] <discord-raku-bot> <Nemokosch> I don't even know what is the expected semantics tbh

[14:39] <discord-raku-bot> <Anton Antonov> Ok, let me post a more general case.

[14:39] <discord-raku-bot> <Kaiepi> i see it as being a product of sorts

[14:40] *** habere-et-disper left
[14:41] <discord-raku-bot> <Nemokosch> but what exact sort?

[14:41] <discord-raku-bot> <Nemokosch> "flatten out" using this cartesian product from inside out recursively?

[14:42] <discord-raku-bot> <Nemokosch> hm, not sure if what I said even makes sense xd

[14:43] <discord-raku-bot> <Kaiepi> idk

[14:46] <discord-raku-bot> <Anton Antonov> Imagine I have this kind of expression: `a1 + a2 + (b1, b2, (c1, c2, c3)) + b3` . _One way_ to interpret it is like this: `(a1 + a2 + b1 + b3, a1 + a2 + b2 + b3, (a1 + a2 + b3 + c1, a1 + a2 + b3 + c2,   a1 + a2 + b3 + c3))` .

[14:49] <discord-raku-bot> <Nemokosch> 🤨

[14:49] <discord-raku-bot> <Anton Antonov> You can see that there are some distinct threads of summation, that follow the original shape of the list.

[14:49] <discord-raku-bot> <Nemokosch> why did the c's go to the end?

[14:50] <discord-raku-bot> <Anton Antonov> Ah, sorry, alphabetical sorting...

[14:50] <discord-raku-bot> <Nemokosch> for me, it seems that (b1, b2, (c1, c2, c3)) was exactly like (b1, b2, c1, c2, c3) would have been

[14:50] <discord-raku-bot> <Anton Antonov> And assuming `+` is associative.

[14:53] <discord-raku-bot> <Anton Antonov> Well, no that produces: `(a1 + a2 + b1 + b3, a1 + a2 + b2 + b3, a1 + a2 + b3 + c1,  a1 + a2 + b3 + c2, a1 + a2 + b3 + c3)` .

[14:54] <discord-raku-bot> <Nemokosch> what is the difference?

[14:55] <discord-raku-bot> <Anton Antonov> A big one -- one level of summation is lost.

[14:55] <discord-raku-bot> <Anton Antonov> Thanks for considering this problem -- I have to find a better description for it. (And maybe post in StackOverflow.)

[14:56] <discord-raku-bot> <Nemokosch> the number of sums is the same

[14:59] *** mcmillhj joined
[15:01] <mcmillhj> With given/when is it possible to match against two values? Something like `given ($A, $B) { when (1, 5) { .... } };`. `$A` and `$B` are unique so I can concatenate them together to match against but it doesn't look as clean to me for some reason. I tried using a Pair but it isn't quite working.

[15:02] <discord-raku-bot> <Nemokosch> with "either-or" semantics?

[15:03] <discord-raku-bot> <Nemokosch> ohh, okay, nevermind

[15:03] <discord-raku-bot> <Nemokosch> list semantics

[15:04] <mcmillhj> yes, I want to consider both values.

[15:04] <mcmillhj> This was my first attempt: https://topaz.github.io/paste/#XQAAAQCcAQAAAAAAAAAQYZjSeZV7Ygc5DB4cIv3FeRYBxdZzjduC5ChqGZm4tyfMBWzeAibgtmb+ddehawgzZwV6Wi+g/7xbKB/awufrjAwCQuHEneE0prfqtUn/iJZeSNRWyIwGzvG6FcIDEj7Yj+Mh3I2OrcdN+9RL//85TgAA

[15:04] <discord-raku-bot> <Nemokosch> why does it not look clear? 🥺

[15:05] <discord-raku-bot> <Nemokosch> clean*

[15:05] <discord-raku-bot> <Anton Antonov> <@297037173541175296> Let me program those examples in Mathematica and make corresponding expression plots. Maybe, it will make more sense. To both you and me... 🙂

[15:06] <mcmillhj> Using Pairs does look clean :)  Unfortunately it produces the wrong answer when compared to this method using concatenation: https://topaz.github.io/paste/#XQAAAQBTAQAAAAAAAAAQYZjSeZV7Ygc5DB4cIv3FeRYBzNwzzjol6tl1g3vLrMjQlUyZlHMrBE0/Nbb3L5n++ilNdF2iokOeA1KWlQbqGRkD9cpIF9kroFbNQp+c8rQM/JwDThgANbqM1Ex2IYjSyNgQjh5s/+hygAA=

[15:08] <discord-raku-bot> <Nemokosch> I beg to disagree that it looks clean. I don't think Pairs are meant for that. The bigger problem is that the current behavior might contradict the documentation.

[15:09] <discord-raku-bot> <Nemokosch> mcmillhj: what version of Raku are you using?

[15:14] <discord-raku-bot> <Nemokosch> I have something to show you

[15:18] <mcmillhj> v2021.04.

[15:18] <mcmillhj> raku v6.d

[15:18] <discord-raku-bot> <Nemokosch> https://gist.github.com/Whateverable/ed1f2d431ef660e6b5afa009b4f9db79

[15:19] <discord-raku-bot> <Nemokosch> the documentation would actually explain why it doesn't work for you - but the documentation would be wrong. It's fixed by now.

[15:20] *** Nemokosch left
[15:20] <discord-raku-bot> <Nemokosch> It's a good idea to keep an up-to-date Rakudo instance. What OS are you using?

[15:21] <mcmillhj> I am not sure I am following. That's the substitution operator right?

[15:21] <mcmillhj> macOS, let me update it in brew

[15:22] <discord-raku-bot> <Nemokosch> `~~` is the smartmatch operator - the operator `when` happens to use

[15:25] <mcmillhj> what does the `:` prefix do?

[15:26] <discord-raku-bot> <Nemokosch> it's a "colon pair" syntax, for numbers in particular

[15:26] <discord-raku-bot> <Nemokosch> `:42z` stands for `z => 42`

[15:27] <discord-raku-bot> <Nemokosch> smartmatching of pairs didn't use to take the key into account - however, it seems this was deliberately changed this year

[15:27] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/commit/026c51a04571af56f414f78664088953bc6f2ff9

[15:30] <mcmillhj> I feel like I am being dense, but what does this mean exactly. If it is considering the key shouldn't it be matching correctly?

[15:30] <mcmillhj> or you are saying this is patched in a newer version of rakudo that I don't have?

[15:31] <discord-raku-bot> <Nemokosch> the latter

[15:32] <mcmillhj> yep, I'm dumb sorry :)  That makes total sense and after updating rakudo-star just now it produces the same result as the concatenation method. Thanks so much for your help @Nemokosch

[15:32] <discord-raku-bot> <Nemokosch> apparently it wasn't clear if the behavior you were witnessing is correct or not; roughly a year ago, core devs reached the conclusion that it was wrong. The documentation is not yet updated (gonna take care of that) but you can update your version of Rakudo and then it will work as you want 🙂

[15:32] <discord-raku-bot> <Nemokosch> cool 🥳

[15:33] *** Nemokosch joined
[15:35] *** Nemokosch1 joined
[15:38] *** Nemokosch left
[16:42] *** Nemokosch1 left
[19:00] *** mcmillhj left
[21:07] *** NemokoschKiwi joined
[21:59] *** NemokoschKiwi left
[23:22] *** deoac joined
[23:23] <deoac> given `Hash %foo` how do determine if `%foo{"bar"}` exists regardless of the case of `bar` ?

[23:24] <discord-raku-bot> <Nemokosch> can't you just store all the keys lowercase for example?

[23:53] <deoac> The Hash comes from a user over whom I have no control (except to verify that the Hash is legit).

[23:57] <discord-raku-bot> <Nemokosch> 'bar' (elem) %foo.keys>>.uc ?

[23:58] <discord-raku-bot> <Nemokosch> oops, I meant lc

