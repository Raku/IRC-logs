[00:05] *** MasterDuke left
[00:06] *** Kaipei is now known as Kaiepi

[00:31] <SmokeMachine> stevied: you could have that as Red models on a SQLite file stored o resources dir. I’ve never tried this, but I don’t see why that wouldn’t work…

[00:50] <discord-raku-bot> <stevied#8273> Red models?

[00:51] <discord-raku-bot> <stevied#8273> this? https://github.com/FCO/Red

[00:52] <SmokeMachine> stevied: you don’t really need Red for that, but yes: https://fco.github.io/Red/

[00:52] <SmokeMachine> Here: https://fco.github.io/Red/tutorials/start.html

[00:53] <discord-raku-bot> <stevied#8273> interesting, I'll make note

[00:54] <discord-raku-bot> <stevied#8273> ok, still a little fuzzy on building attributes. got this:

[00:54] <discord-raku-bot> <stevied#8273> ```

[00:54] <discord-raku-bot> <stevied#8273> class Resource {

[00:54] <discord-raku-bot> <stevied#8273> }

[00:54] <discord-raku-bot> <stevied#8273> class Lesson is Resource {

[00:54] <discord-raku-bot> <stevied#8273>     has IO $.file;

[00:54] <discord-raku-bot> <stevied#8273>     has Str $.name;

[00:54] <discord-raku-bot> <stevied#8273>     submethod BUILD(IO:D :$file) {

[00:54] <discord-raku-bot> <stevied#8273>         $!name = $file.basename;

[00:54] <discord-raku-bot> <stevied#8273>         $!file = $file;

[00:54] <discord-raku-bot> <stevied#8273>     }

[00:54] <discord-raku-bot> <stevied#8273> }

[00:54] <discord-raku-bot> <stevied#8273> ```

[00:54] <discord-raku-bot> <stevied#8273> how do I move `$.name` up to `Resource` class and still populate it in the BUILD?

[00:55] <discord-raku-bot> <stevied#8273> I've got to do a new() method and bless the object first, is that it?

[00:57] <SmokeMachine> Why are you using BUILD in that case?

[01:00] <discord-raku-bot> <stevied#8273> hmm, I don't know but I clearly don't know what I''m doing. I was just trying to avoid doing the whole self/bless thing

[01:00] <discord-raku-bot> <stevied#8273> but your question has me thinking

[01:01] <SmokeMachine> m: class Resource { has $.name = self.?file.?basename }; class Leason is Resource { has IO() $.file }; dd Resource.new: :file</bla/ble/bli>

[01:01] <camelia> rakudo-moar f2546b446: OUTPUT: «Resource.new(name => Any)␤»

[01:02] <SmokeMachine> class Leason { has IO() $.file; has Str $.name = $!file.basename}; dd Resource.new: :file</bla/ble/bli>

[01:03] <SmokeMachine> m: class Leason { has IO() $.file; has Str $.name = $!file.basename}; dd Resource.new: :file</bla/ble/bli>

[01:03] <camelia> rakudo-moar f2546b446: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    Resource used at line 1␤␤»

[01:04] <discord-raku-bot> <stevied#8273> huh, didn't know you could do that. but $.name is not always based on a file. for other children it's based on a directory

[01:04] <SmokeMachine> m: class Lesson { has IO() $.file; has Str $.name = $!file.basename}; dd Lesson.new: :file</bla/ble/bli>

[01:04] <camelia> rakudo-moar f2546b446: OUTPUT: «Lesson bli = Lesson.new(file => IO::Path.new("/bla/ble/bli", :SPEC(IO::Spec::Unix), :CWD("/home/camelia")), name => "bli")␤»

[01:05] <SmokeMachine> m: class Resource { has $.name = self.?file.?basename }; class Lesson is Resource { has IO() $.file }; dd Lesson.new: :file</bla/ble/bli>

[01:05] <camelia> rakudo-moar f2546b446: OUTPUT: «Lesson.new(file => IO::Path.new("/bla/ble/bli", :SPEC(IO::Spec::Unix), :CWD("/home/camelia")), name => Any)␤»

[01:08] <SmokeMachine> m: role Resource { method name(—> Str) {…} }; class Lesson does Resource { has IO() $.file; has Str $.name = $!file.basename }; dd Lesson.new: :file</bla/ble/bli>

[01:08] <camelia> rakudo-moar f2546b446: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> role Resource { method name(⏏—> Str) {…} }; class Lesson does Resourc␤»

[01:09] <SmokeMachine> (Sorry, that’s hard on phone…)

[01:10] <SmokeMachine> m: role Resource { method name(--> Str) {…} }; class Lesson does Resource { has IO() $.file; has Str $.name = $!file.basename }; dd Lesson.new: :file</bla/ble/bli>

[01:10] <camelia> rakudo-moar f2546b446: OUTPUT: «Lesson bli = Lesson.new(file => IO::Path.new("/bla/ble/bli", :SPEC(IO::Spec::Unix), :CWD("/home/camelia")), name => "bli")␤»

[01:10] <SmokeMachine> stevied: wouldn’t that make more sense in that case then?

[01:14] <SmokeMachine> m: class Resource { has $.name }; class Lesson is Resource { has IO() $.file; method TWEAK(|) { $!name = $!file.basename }; dd Lesson.new: :file</bla/ble/bli>

[01:14] <camelia> rakudo-moar f2546b446: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> me }; dd Lesson.new: :file</bla/ble/bli>⏏<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[01:15] <SmokeMachine> m: class Resource { has Str $.name }; class Lesson is Resource { has IO() $.file; method TWEAK(|) { $!name = $!file.basename } }; dd Lesson.new: :file</bla/ble/bli>

[01:15] <camelia> rakudo-moar f2546b446: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Attribute $!name not declared in class Lesson␤at <tmp>:1␤------>  TWEAK(|) { $!name = $!file.basename } }⏏; dd Lesson.new: :file</bla/ble/bli>␤    expecting any of:␤        horizontal w…»

[01:32] <discord-raku-bot> <stevied#8273> ok, I just changed the BUILD method to a new() method

[01:32] <discord-raku-bot> <stevied#8273> that worked

[01:35] <discord-raku-bot> <stevied#8273> everything seems to work now

[01:37] <guifa> stevied: when I meant not supposed to provide, I mean that AIUI the files provided from hashy access to $?DISTRIBUTION and %?RESOURCES are supposed to just provide access to the files (e.g. no .add or .parent or .dir methods)

[01:38] <guifa> s/the files/Resources

[01:41] <guifa> installation of a module will normally name mangle those file names, and put them in a flat directory structure, regardless the organization originally layed out by the developer

[01:46] <discord-raku-bot> <stevied#8273> here's my code: https://gist.github.com/ea3af0b32be1ed08d4f90aeba38179ca

[01:46] <discord-raku-bot> <stevied#8273> seems to work well. i'm not sure what any downsides would be

[01:46] <discord-raku-bot> <stevied#8273> see lines 44 and 21

[01:55] <discord-raku-bot> <stevied#8273> ok, so the dir calls in 44 and 21 will probably not work then after the module is installed?

[02:58] *** Util left
[03:26] *** frost joined
[04:16] <guifa> correct.  They may work even, but — this is the key thing — there is no guarantee of them functioning long term

[05:08] *** frost left
[05:10] <discord-raku-bot> <gfldex#8222> <@319829168395124737> gather/take is still pretty slow.

[05:23] *** frost joined
[07:07] <discord-raku-bot> <Nemokosch#9980> Well then that's something to consider improving, I'd say

[07:08] <discord-raku-bot> <Nemokosch#9980> Even gather/take is rather low-level, let alone implementing a custom Iterator...

[07:11] *** frost left
[07:14] *** frost joined
[07:16] <lizmat> Making iterator classes is really easy thoough:

[07:16] <lizmat> m: class A does Iterator { has int $!count; method pull-one() { $!count++ } }; say Seq.new(A.new).head(10)

[07:16] <camelia> rakudo-moar f2546b446: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤»

[07:17] <discord-raku-bot> <Nemokosch#9980> because you didn't have manage state

[07:18] <discord-raku-bot> <Nemokosch#9980> if you compare the codes for this "smart branching", the ones with gather/take are at least fundamentally readable

[07:18] <discord-raku-bot> <Nemokosch#9980> the iterator based is ridiculously difficult to follow even that I know what it has to do

[07:37] <lizmat> Nemokosch: that may be so, but the mechanics of creating an iterator itself, are pretty easy

[07:38] <discord-raku-bot> <Nemokosch#9980> Well I'm not talking about the mechanism

[07:39] <discord-raku-bot> <Nemokosch#9980> From what I understood, making a custom Iterator is like the last bastion of feasibility

[07:39] <discord-raku-bot> <Nemokosch#9980> so if it can be meaningfully done with gather/take, that should be preferred - especially given the structure of the problem

[07:39] <discord-raku-bot> <Nemokosch#9980> if gather/take is pretty slow, that should be improved rather than taking it at face value tbh

[07:40] <lizmat> well, fwiw, I *have* looked at speeding up  gather / take

[07:42] <discord-raku-bot> <Nemokosch#9980> mind you, I'm not "making calls", just saying what I believe aligns with the use (and usefulness) of the language

[07:42] <lizmat> the problem is that use of continuations (exceptions) under the hood

[07:43] <lizmat> wrt performance

[08:05] *** discord-raku-bot left
[08:05] *** discord-raku-bot joined
[08:10] *** dakkar joined
[08:23] *** MasterDuke joined
[09:58] *** frost left
[10:24] *** frost joined
[11:26] *** frost left
[12:20] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/06/14/2022-24-conference-2022/

[12:52] *** Util joined
[13:16] *** jgaz joined
[13:29] *** jgaz left
[14:03] <guifa> lizmat: re the Did You Know?  Reminds me that one of my next Intl:: modules is one for emoji names

[14:04] <guifa> CLDR has a great little database of common names — that's what Android/iOS use when you search for them

[15:09] <discord-raku-bot> <gfldex#8222> <@297037173541175296> indeed. It took me a while to realise that I can stash a value away that needs to go into the next bash.

[15:33] *** dakkar left
[18:18] *** lizmat left
[18:18] *** thowe left
[18:21] *** thowe joined
[18:21] *** lizmat joined
[18:23] *** thowe left
[18:29] *** thowe joined
[18:53] *** n1to joined
[19:16] *** samebchase3 joined
[19:19] *** destroycomputer- joined
[19:19] *** sivoais joined
[19:19] *** zmoment_ joined
[19:24] *** discord-raku-bot left
[19:24] *** zmoment left
[19:24] *** sivoais_ left
[19:24] *** gfldex left
[19:24] *** samebchase left
[19:24] *** destroycomputers left
[19:24] *** samebchase3 is now known as samebchase

[19:25] *** gfldex joined
[19:25] *** discord-raku-bot joined
[20:06] *** Util left
[20:23] *** Kaipei joined
[20:27] *** Kaiepi left
[20:50] *** Util joined
[21:59] *** n1to left
[22:00] <discord-raku-bot> <gfldex#8222> m:```

[22:00] <discord-raku-bot> <gfldex#8222> sub batch2(*@a, :&predicate) {

[22:00] <discord-raku-bot> <gfldex#8222>     my @r;

[22:00] <discord-raku-bot> <gfldex#8222>     lazy gather for @a »,» @a[1..*] -> [$v, $next] {

[22:00] <discord-raku-bot> <gfldex#8222>         if predicate($v) eqv predicate($next) {

[22:00] <discord-raku-bot> <gfldex#8222>             @r.push($v);

[22:00] <discord-raku-bot> <gfldex#8222>         } else {

[22:00] <discord-raku-bot> <gfldex#8222>             @r.push($v);

[22:00] <discord-raku-bot> <gfldex#8222>             take @r;

[22:00] <discord-raku-bot> <gfldex#8222>             @r = [];

[22:00] <discord-raku-bot> <gfldex#8222>         }

[22:00] <discord-raku-bot> <gfldex#8222>     }

[22:06] <discord-raku-bot> <gfldex#8222> That is actually wrong. >>,>> wraps around.

[22:27] <discord-raku-bot> <gfldex#8222> m:```

[22:27] <discord-raku-bot> <gfldex#8222> sub batch2(*@a, :&predicate) {

[22:27] <discord-raku-bot> <gfldex#8222>     my @r;

[22:27] <discord-raku-bot> <gfldex#8222>     lazy gather for @a.rotor(2=>-1, :partial) -> [$v, $next? = Nil] {

[22:27] <discord-raku-bot> <gfldex#8222>         if predicate($v) eqv ($next === Nil ?? Nil !! predicate($next)) {

[22:27] <discord-raku-bot> <gfldex#8222>             @r.push($v);

[22:27] <discord-raku-bot> <gfldex#8222>         } else {

[22:27] <discord-raku-bot> <gfldex#8222>             @r.push($v);

[22:27] <discord-raku-bot> <gfldex#8222>             take @r;

[22:27] <discord-raku-bot> <gfldex#8222>             @r = [];

[22:27] <discord-raku-bot> <gfldex#8222>         }

[22:27] <discord-raku-bot> <gfldex#8222>     }

[22:29] <discord-raku-bot> <gfldex#8222> That's the nilhilistic solution. :->

