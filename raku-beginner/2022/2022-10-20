[00:03] *** Kaiepi left
[00:27] *** MasterDuke joined
[00:57] <discord-raku-bot> <zacque> What is the relationship between the key and value pair in ‚Äúprovides‚Äù field of a META6.json file?

[01:00] <discord-raku-bot> <zacque> It seems to me something like ‚ÄúJSON::Fast‚Äù : ‚Äúlib/JSON/Fast.rakumod‚Äù is redundant?

[01:02] <kjp> No. The key is the name of the mdule; the value is the file containing it. The names need not correspond.

[01:02] <discord-raku-bot> <zacque> Can I map different module name to some other module file? Or can I place multiple modules into one module file?

[01:02] <kjp> I believe so.

[01:03] <discord-raku-bot> <zacque> I see, I‚Äôll try it out. Thanks!

[01:53] *** MasterDuke left
[01:57] *** frost78 joined
[02:00] <discord-raku-bot> <elcaro> A simple way to solve this is implement a `.cmp` method on your class. being a method, it has access to private attributes, etc. Then you export `multi sub infix:<cmp>(MyClass $a, MyClass $b) { $a.cmp($b) }`

[02:28] <discord-raku-bot> <zacque> Thanks, question: How can I access the private attribute of the passed-in object?

[02:31] <discord-raku-bot> <zacque> <@724421839924756480>

[02:31] <discord-raku-bot> <elcaro> Ahh, ok, I see your problem... You need access to both objects privates

[02:38] <discord-raku-bot> <elcaro> There is a way to break OO privacy: https://rosettacode.org/wiki/Break_OO_privacy#Raku

[02:39] <discord-raku-bot> <elcaro> there might be a smarter way to compare your objects. Is the data truly private? or are you just trying to make it private because the user doesn't need it? Can you perhaps expose some kind of hash of the private data, where you can then compare hashes?

[02:39] <discord-raku-bot> <elcaro> hashes as in... Digests... not Associative Arrays / Dictionaries

[02:40] <discord-raku-bot> <zacque> Oh? I thought in ```raku

[02:40] <discord-raku-bot> <zacque> class A {

[02:40] <discord-raku-bot> <zacque>     has Int $!a;

[02:40] <discord-raku-bot> <zacque>     submethod BUILD(Int :$!a) { }

[02:40] <discord-raku-bot> <zacque>     method cmp(A $obj2) { $!a cmp $obj2.<!a>; }

[02:40] <discord-raku-bot> <zacque> }

[02:40] <discord-raku-bot> <zacque> ``` `cmp` has access to the private attribute of `$obj2`.

[02:41] <discord-raku-bot> <zacque> Oh? I thought in ```raku

[02:41] <discord-raku-bot> <zacque> class A {

[02:41] <discord-raku-bot> <zacque>     has Int $!a;

[02:41] <discord-raku-bot> <zacque>     submethod BUILD(Int :$!a) { }

[02:41] <discord-raku-bot> <zacque>     method cmp(A $obj2) { ... }

[02:41] <discord-raku-bot> <zacque> }

[02:41] <discord-raku-bot> <zacque> ``` `cmp` has access to the private attribute of `$obj2`.

[02:41] <discord-raku-bot> <elcaro> No... Raku objects are not stored as a hash. You have to hit up the MOP to break into them

[02:41] <discord-raku-bot> <zacque> Ya, I'm trying to make all attributes private by default, unless direct access is needed

[02:43] <discord-raku-bot> <zacque> I see, that's unexpected

[02:43] <discord-raku-bot> <elcaro> in that case it would be `$obj2.^attributes.first('$!a').get_value($obj2)`, but that's probably overkill if there's no _harm_ in exposing the data.

[02:44] <discord-raku-bot> <elcaro> What is unexpected... that they are not hashes underneath, or that privacy can be broken with the MOP?

[02:44] <discord-raku-bot> <zacque> I meant the private attribute of object of the same class cannot be accessed directly

[02:46] <discord-raku-bot> <zacque> What does the `first('$!a')` do here?

[02:48] <discord-raku-bot> <zacque> Does it imply that there might be multiple attributes called `$!a`?

[02:50] <discord-raku-bot> <elcaro> Yeah so the distinction is that attributes belong to the instance, not the class.

[02:50] <discord-raku-bot> <elcaro> It's just occurred to me that objects are like people in that they have self-sovereignty. maybe I'm reading to much into things üòÑ

[02:50] <discord-raku-bot> <zacque> Oh, because that's the only method (besides `grep`) to lookup value from a list

[02:50] <discord-raku-bot> <zacque> I'm still new to the List methods

[02:52] <discord-raku-bot> <elcaro> yeah, it returns an item, rather than grep which returns a list (of possibly only one item)

[02:52] <discord-raku-bot> <elcaro> The point is... if someone wants to break into your object, they can... but if they don't need to, they won't bother.

[02:52] <discord-raku-bot> <elcaro> In that case, you are just making it harder on yourself by making it private.

[02:54] <discord-raku-bot> <zacque> Get it, thanks! In my case, the comparing data is a derived data, so I don't really want to expose it to the public

[02:54] <discord-raku-bot> <zacque> The client passes in a string for constructor, but I'm comparing based on derived data from the string, which has different order from comparing the strings directly. üòÑ

[02:58] <discord-raku-bot> <elcaro> If the object has access to the passed in value, perhaps it can re-derive it? but at the end of the day, it's your code... do what feels right

[02:58] <discord-raku-bot> <zacque> Oh no, the main reason to use the class is to encapsulate derivation and comparison logic

[02:58] <discord-raku-bot> <zacque> Yup, thanks for your help!

[03:04] <discord-raku-bot> <elcaro> a downside is the perf hit from constantly looking up a list of attributes and filtering. You could resolve the attribute lookup once. here's a silly trick

[03:04] <discord-raku-bot> <elcaro> ```

[03:04] <discord-raku-bot> <elcaro> class Foo {

[03:04] <discord-raku-bot> <elcaro>     has $.pub;

[03:04] <discord-raku-bot> <elcaro>     has $!priv;

[03:04] <discord-raku-bot> <elcaro>     has $!priv-attr = self.^attributes.first('$!priv');

[03:04] <discord-raku-bot> <elcaro>     submethod BUILD(:$!pub, :$!priv) { }

[03:04] <discord-raku-bot> <elcaro>     method cmp(::?CLASS $foo) {

[03:04] <discord-raku-bot> <elcaro>         $!priv eq $!priv-attr.get_value($foo)

[03:04] <discord-raku-bot> <elcaro>     }

[03:04] <discord-raku-bot> <elcaro> }

[03:04] <discord-raku-bot> <elcaro> multi sub infix:<cmp>(Foo $l, Foo $r) { $l.cmp($r) }

[03:04] <discord-raku-bot> <elcaro> my $a = Foo.new(pub => 'a', priv => 'fo0B4R');

[03:04] <discord-raku-bot> <elcaro> my $b = Foo.new(pub => 'b', priv => 'fo0B4R');

[03:04] <discord-raku-bot> <elcaro> my $c = Foo.new(pub => 'c', priv => 'foobar');

[03:04] <discord-raku-bot> <elcaro> say $a cmp $b;  # True

[03:04] <discord-raku-bot> <elcaro> say $a cmp $c;  # False

[03:04] <discord-raku-bot> <elcaro> ```

[03:06] <discord-raku-bot> <zacque> Huh? What's weird is that a method can access the **private method** of object of the same class, but not its **private attribute**

[03:07] <discord-raku-bot> <zacque> See: ```raku

[03:07] <discord-raku-bot> <zacque> use v6.d;

[03:07] <discord-raku-bot> <zacque> class A {

[03:07] <discord-raku-bot> <zacque>     has Int $!a;

[03:07] <discord-raku-bot> <zacque>     submethod BUILD(Int :$!a) { }

[03:07] <discord-raku-bot> <zacque>     method cmp(A $obj2) {

[03:07] <discord-raku-bot> <zacque>         $!a cmp $obj2.^attributes.first('$!a').get_value($obj2)

[03:07] <discord-raku-bot> <zacque>     }

[03:07] <discord-raku-bot> <zacque>     method !foo() { $!a * 2; }

[03:07] <discord-raku-bot> <zacque>     # test private method access

[03:07] <discord-raku-bot> <zacque>     method test-pmthd(A $obj2) { $obj2!foo; } 

[03:07] <discord-raku-bot> <zacque> }

[03:07] <discord-raku-bot> <zacque> my $foo1 = A.new(:7a); my $foo2 = A.new(:5a);

[03:07] <discord-raku-bot> <zacque> say $foo1.cmp($foo2);

[03:07] <discord-raku-bot> <zacque> say $foo1.test-pmthd($foo2);

[03:07] <discord-raku-bot> <zacque> ```

[03:08] <discord-raku-bot> <zacque> See: ```raku

[03:08] <discord-raku-bot> <zacque> use v6.d;

[03:08] <discord-raku-bot> <zacque> class A {

[03:08] <discord-raku-bot> <zacque>     has Int $!a;

[03:08] <discord-raku-bot> <zacque>     submethod BUILD(Int :$!a) { }

[03:08] <discord-raku-bot> <zacque>     method !foo() { $!a * 2; }

[03:08] <discord-raku-bot> <zacque>     # test private method access

[03:08] <discord-raku-bot> <zacque>     method test-pmthd(A $obj2) { $obj2!foo; } 

[03:08] <discord-raku-bot> <zacque> }

[03:08] <discord-raku-bot> <zacque> my $foo1 = A.new(:7a); my $foo2 = A.new(:5a);

[03:08] <discord-raku-bot> <zacque> say $foo1.test-pmthd($foo2);

[03:08] <discord-raku-bot> <zacque> ```

[03:08] <discord-raku-bot> <zacque> See: ```raku

[03:08] <discord-raku-bot> <zacque> class A {

[03:08] <discord-raku-bot> <zacque>     has Int $!a;

[03:08] <discord-raku-bot> <zacque>     submethod BUILD(Int :$!a) { }

[03:08] <discord-raku-bot> <zacque>     method !foo() { $!a * 2; }

[03:08] <discord-raku-bot> <zacque>     # test private method access

[03:08] *** discord-raku-bot left
[03:09] *** discord-raku-bot joined
[03:09] <discord-raku-bot> <elcaro> oh yes, of course!

[03:11] <discord-raku-bot> <elcaro> as I mentioned, attributes belong to the _instance_, but methods belong to the _class_... so you can just expose the private attribute *via* a private method

[03:11] <discord-raku-bot> <elcaro> so that other classes can access it

[03:13] <discord-raku-bot> <zacque> See: ```raku

[03:13] <discord-raku-bot> <zacque> class A {

[03:13] <discord-raku-bot> <zacque>     has Int $!a;

[03:13] <discord-raku-bot> <zacque>     submethod BUILD(Int :$!a) { }

[03:13] <discord-raku-bot> <zacque>     method !foo() { $!a }

[03:13] <discord-raku-bot> <zacque>     # test private method access

[03:13] <discord-raku-bot> <zacque>     method test-pmthd(A $obj2) { $obj2!foo; } 

[03:13] <discord-raku-bot> <zacque> }

[03:13] <discord-raku-bot> <zacque> my $foo1 = A.new(:7a); my $foo2 = A.new(:5a);

[03:13] <discord-raku-bot> <zacque> say $foo1.test-pmthd($foo2); # Output: 5

[03:13] <discord-raku-bot> <zacque> ```

[03:13] <discord-raku-bot> <elcaro> so you should just have a `method !a { $!a }`,

[03:13] <discord-raku-bot> <elcaro> then `method cmp($obj) { $!a cmp $obj!a }`

[03:15] <discord-raku-bot> <zacque> Other classes? I thought only objects of the same class can access to the private method?

[03:15] <discord-raku-bot> <elcaro> yes, only same class

[03:15] <discord-raku-bot> <elcaro> I meant... other _instances_

[03:15] <discord-raku-bot> <zacque> Ya, just thought of that as well, still I think that a bit of weird UX

[03:16] <discord-raku-bot> <elcaro> so that other ~~classes~~ _instances_ can access it

[03:16] <discord-raku-bot> <zacque> But that will solve my problem

[03:17] <discord-raku-bot> <zacque> Ok

[03:17] <discord-raku-bot> <zacque> Thanks!

[03:21] <discord-raku-bot> <zacque> To sort out my mind, so a method  has access to all attributes of the invocant and all methods of the same class

[03:21] <discord-raku-bot> <zacque> But for objects passed in as an argument, it has only access to all its methods (be it private or public)

[03:22] <discord-raku-bot> <zacque> But for objects passed in as an argument, the method has only access to all its methods (be it private or public)

[03:25] <discord-raku-bot> <zacque> But only access to all methods for objects of the same class passed in as an argument. (By all, I meant both public and private)

[03:25] <discord-raku-bot> <zacque> Only access to public methods for objects of different class

[03:36] <discord-raku-bot> <elcaro> yes

[03:36] <discord-raku-bot> <elcaro> It's worth noting that `has $.a` is really just syntax sugar for `has $!a; method a { $!a }`

[03:38] <discord-raku-bot> <elcaro> So the only way to expose an attribute... even a public one, is via a method (under the hood).

[03:38] <discord-raku-bot> <elcaro> In the same way, a private method can expose an attribute... the difference being private methods are only available to instances of that class

[03:40] <discord-raku-bot> <zacque> Thx, I'm aware of it

[04:14] *** Heptite left
[04:49] <discord-raku-bot> <zacque> That said, there is no name conflict if I do this: ```raku

[04:49] <discord-raku-bot> <zacque> class Foo {

[04:49] <discord-raku-bot> <zacque>     has $.a;

[04:49] <discord-raku-bot> <zacque>     method a { 100 } # No name conflict.

[04:49] <discord-raku-bot> <zacque> }

[04:49] <discord-raku-bot> <zacque> ```

[04:50] <discord-raku-bot> <zacque> But something like this is illegal: ```raku

[04:50] <discord-raku-bot> <zacque> class Bar {

[04:50] <discord-raku-bot> <zacque>     method a { 100 } 

[04:50] <discord-raku-bot> <zacque>     method a { 200 } # Error! Same name conflict.

[04:50] <discord-raku-bot> <zacque> }

[04:50] <discord-raku-bot> <zacque> ```

[05:09] <discord-raku-bot> <elcaro> Correct. Perhaps it's more correct to say `$!a` creates an accessor method `a`, unless you provide your own method with that name.

[05:46] <discord-raku-bot> <elcaro> Correct. Perhaps it's more correct to say `$.a` creates an accessor method `a`, unless you provide your own method with that name.

[06:38] <discord-raku-bot> <Nemokosch> I remember when learning OO (with C++), it seemed weird that private data can be reached from another instance that just has the same class but otherwise has nothing to do with `this` üòÖ

[06:38] <discord-raku-bot> <Nemokosch> I agree, though, that methods and attributes behave way too differently to be intuitive

[06:57] <discord-raku-bot> <zacque> Lol, didn't think that much back then

[06:59] <discord-raku-bot> <Nemokosch> well we were there to learn

[06:59] <discord-raku-bot> <Nemokosch> with one of the best teachers of the university

[07:09] *** Kaiepi joined
[07:17] <discord-raku-bot> <zacque> That's great!

[07:21] <discord-raku-bot> <zacque> New question: How do I define multiple constructors for a class?

[07:23] <discord-raku-bot> <zacque> Should  I overload the `new` method or the `BUILD` method?

[08:12] *** dakkar joined
[08:15] <discord-raku-bot> <Nemokosch> I can very vaguely recall something  from Liz that TWEAK is better than BUILD? Anyway, almost sure new should do

[08:17] <discord-raku-bot> <Nemokosch> https://discord.com/channels/538407879980482560/768511641758466088/931299805953687652 MasterDuke it was

[08:19] <discord-raku-bot> <Nahita> at the BUILD and TWEAK phases the object has been already blessed, so new should be made multiple

[08:19] <discord-raku-bot> <Nahita> its name need not be new but it's convention and default constructor has that name too. but you can call it `make` and as long as you end up blessing in that, it works

[08:21] <discord-raku-bot> <Nahita> naming it different useful in factory methods like `from-*` etc.

[08:21] <discord-raku-bot> <Nahita> i sometimes override and possibly abuse CALL-ME to type less

[09:28] *** dakkar left
[09:29] *** dakkar joined
[11:33] *** equinox joined
[12:11] *** equinox36 joined
[12:14] *** equinox left
[12:17] <discord-raku-bot> <zacque> Hmm, I'm going for `make` as constructor

[12:17] <discord-raku-bot> <zacque> Couldn't figure out what's wrong with this: ```raku

[12:17] <discord-raku-bot> <zacque> class Foo {

[12:17] <discord-raku-bot> <zacque>     has ($!x, $!y);

[12:17] <discord-raku-bot> <zacque>     multi method make(:$x, :$y) {

[12:17] <discord-raku-bot> <zacque>         say "Here x y";

[12:17] <discord-raku-bot> <zacque>         self.bless(:$x, :$y)

[12:17] <discord-raku-bot> <zacque>     }

[12:17] <discord-raku-bot> <zacque>     multi method make(:$z) {

[12:17] <discord-raku-bot> <zacque>         say "Here z: $z";

[12:17] <discord-raku-bot> <zacque>         self.bless(x => ($z div 2), y => ($z % 2))

[12:17] <discord-raku-bot> <zacque>     }

[12:17] <discord-raku-bot> <zacque>     submethod BUILD(:$!x, :$!y) {}

[12:17] <discord-raku-bot> <zacque>     method result { "$!x and $!y" }

[12:17] <discord-raku-bot> <zacque> }

[12:17] <discord-raku-bot> <zacque> Foo.make(:2x, :3y).result.say; # Ok

[12:17] <discord-raku-bot> <zacque> Foo.make(:4z).result.say; # Uninitialised Error

[12:17] <discord-raku-bot> <zacque> ```

[12:17] <discord-raku-bot> <zacque> It seems like I should be able to pass `:z` into `Foo.make` but it didn't

[12:17] <discord-raku-bot> <zacque> Very confusing...

[12:25] <discord-raku-bot> <Nemokosch> as you can see, the first function runs

[12:25] <discord-raku-bot> <Nemokosch> making named _optional_ arguments is probably not a good idea if you want to dispatch over named arguments

[12:25] <discord-raku-bot> <Nemokosch> changed it to :$x! and :$y! and it worked

[12:27] <lizmat> indeed: named optional arguments are not being used in dispatch

[12:32] <discord-raku-bot> <zacque> Huh? What do you mean by "named optional arguments"?

[12:33] <discord-raku-bot> <zacque> From my POV, all arguments are compulsory?

[12:33] <discord-raku-bot> <Nemokosch> no, named arguments are optional by default

[12:33] <discord-raku-bot> <zacque> Huh? I don't get this

[12:33] <discord-raku-bot> <Nemokosch> why not :c

[12:33] <discord-raku-bot> <zacque> Oh nooo, I didn't know üò¶

[12:34] <discord-raku-bot> <zacque> Oh... you mean `multi method make(:$x!, :$y!)`?

[12:35] <discord-raku-bot> <zacque> Didn't know about that as well, let me look it up

[12:37] <discord-raku-bot> <zacque> I found it: https://rakudocs.github.io/type/Signature#Optional_and_mandatory_arguments

[12:41] <discord-raku-bot> <zacque> Thanks, that solves my problem!

[12:42] <discord-raku-bot> <zacque> Not sure why these small details keep escaping me ü§¶‚Äç‚ôÇÔ∏è

[12:42] *** equinox36 left
[12:48] <lizmat> well... what if all named arguments were taken into dispatch, it would get a lot more complicated and probably much slower to dispatch

[12:49] <lizmat> by making named arguments mandatory, they effectively become positionals as far as dispatch is concerned

[13:00] <discord-raku-bot> <zacque> Makes sense...

[13:01] *** frost78 left
[13:02] *** Newbie21 joined
[13:04] *** jgaz joined
[13:08] <Newbie21> I'm trying to install Rakudo Star under WSL but the instructions seem out of date.¬† Are there update instructions available?¬† ( rakudo-star-2022.07-01.tar.gz )

[13:09] <Newbie21> *updated

[13:29] *** equinox joined
[13:33] <discord-raku-bot> <Nemokosch> if you accept an X-Y solution: you might be better off using rakubrew under WSL, that's what I use myself

[13:40] <Newbie21> Will look into that.

[14:34] *** Heptite joined
[16:09] *** razetime joined
[16:34] *** dakkar left
[16:46] *** Heptite left
[17:05] *** m_athias left
[17:06] *** razetime left
[17:06] *** camelia left
[17:10] *** m_athias joined
[17:12] *** camelia joined
[17:14] *** m_athias left
[17:14] *** camelia left
[17:15] *** m_athias joined
[17:23] *** camelia joined
[17:34] *** Heptite joined
[17:59] *** saint- joined
[19:33] *** jgaz left
[20:26] *** habere-et-disper joined
[20:59] *** Newbie21 left
[21:34] *** habere-et-disper left
[21:40] *** equinox left
[23:10] *** archenoth left
[23:17] *** deoac joined
