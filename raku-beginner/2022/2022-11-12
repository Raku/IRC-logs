[00:14] *** Nemokosch left
[01:09] *** Kaiepi left
[01:45] *** deoac left
[02:55] *** habere-et-disper left
[02:56] *** razetime joined
[03:36] *** razetime left
[04:01] *** razetime joined
[04:49] *** Heptite left
[05:57] *** CIAvash left
[06:00] *** CIAvash joined
[06:53] *** Kaiepi joined
[06:59] *** Kaipei joined
[07:02] *** Kaiepi left
[07:54] *** razetime left
[08:26] *** razetime joined
[11:37] *** habere-et-disper joined
[13:29] <habere-et-disper> Can one defined constants together?

[13:29] <habere-et-disper> m: constant ($foo, $bar) = 3, 4

[13:29] <camelia> rakudo-moar 5e1f092f5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> constant⏏ ($foo, $bar) = 3, 4␤»

[13:38] <habere-et-disper> s/defined/define :-)

[13:45] <discord-raku-bot> <Nemokosch> I think it boils down to the behavior of `constant`

[14:10] *** codesections joined
[14:17] *** habere-et-disper left
[14:21] *** codesections left
[14:30] *** codesections joined
[14:52] *** deoac joined
[14:53] <deoac> Is it possible to have multi-dispatch when there's a 'slurpy' in the signature?

[14:54] <deoac> ```

[14:54] <deoac> our proto foo ( | ) { * }

[14:54] <deoac> multi foo (Str $bar!, $*args) { ... }

[14:54] <deoac> multi foo (Str $bar!, Str $baz!, $*args) { ... }

[14:54] <deoac> ```

[14:54] <deoac> BTW, I also like the `forgiven` idea :-)

[15:06] *** Heptite joined
[15:45] <discord-raku-bot> <Nemokosch> deoac: first off, you know that $*args is a _dynamic variable_, not any sort of slurpy?

[15:45] <discord-raku-bot> <Nemokosch> I think you were thinking of **@args (or *@args, if you want the extra part to be flattened)

[16:46] *** Kaipei left
[17:08] <deoac> Yes, sorry about the typo

[17:22] <deoac> Let me try again...

[17:24] <deoac> How can I get the following to work?  `$baz` always gets swallowed by `*@args` in the first version of `foo`

[17:24] <deoac> `our proto foo ( | ) { * }

[17:24] <deoac> multi foo (Str $bar!, *@args) { ... }

[17:24] <deoac> multi foo (Str $bar!, Str $baz!, *@args) { ... } `

[17:29] *** razetime left
[17:44] *** deoac left
[17:56] <discord-raku-bot> <Nemokosch> Are you sure the order of declaration doesn't matter? I don't know the rules by heart

[18:17] *** Heptite left
[18:21] *** Kaipei joined
[18:26] *** Heptite joined
[19:55] *** Kaipei left
[19:57] *** deoac joined
[19:59] <deoac> Positional arguments have to go before slurpy arguments.

[20:00] <deoac> From https://docs.raku.org/type/Signature#index-entry-slurpy_argument :Note that positional parameters aren't allowed after slurpy (or, in fact, after any type of variadic) parameters:

[20:00] <deoac> :(*@args, $last);

[20:00] <deoac> # ===SORRY!=== Error while compiling:

[20:00] <deoac> # Cannot put required parameter $last after variadic parameters

[20:21] <guifa> So the problem is that the for your foo(), Str Str Int matches BOTH signatures

[20:22] <guifa> what is the type of things you're slurping into @args ?

[20:24] <guifa> If they're Str, it's an ambiguous signature (unless called with a single Str).  If there's some way to show what valid values of baz are, you could do Str $baz where { … } which would cause that signature to be more specific, and it would take priority in dispatch

[20:46] *** Kaipei joined
[21:00] <deoac> Yes, the `where` idea could work.  Thank youu.

[21:06] <discord-raku-bot> <Nemokosch> I think if it doesn't take priority, the order of declaration would decide

[21:07] <discord-raku-bot> <Nemokosch> (not the order of arguments, mind you)

[21:39] *** deoac left
[21:47] *** guifa_ joined
[21:49] *** Heptite left
[21:49] *** guifa left
[21:50] *** Heptite joined
[21:53] <gfldex> m: multi sub foo(Int $a, *@a) { say 1 }; multi sub foo(Int $a, | (Int $b, *@a)) { say 2 }; foo 1,2,3; foo 1, 'zwei', 3;

[21:53] <camelia> rakudo-moar 5e1f092f5: OUTPUT: «2␤1␤»

[21:54] <gfldex> guifa_: please note ^^^ (maybe a bug tho)

[21:58] <discord-raku-bot> <trentj> How would I initialize an array of 10 zeros without typing `0` ten times?

[22:00] <gfldex> m: @a = 0 xx 10; dd @a;

[22:00] <camelia> rakudo-moar 5e1f092f5: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '@a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL>⏏@a = 0 xx 10; dd @a;␤»

[22:00] <gfldex> m: my @a = 0 xx 10; dd @a;

[22:00] <camelia> rakudo-moar 5e1f092f5: OUTPUT: «Array @a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]␤»

[22:02] <discord-raku-bot> <trentj> perfection

[22:02] <gfldex> m: my @a is default(0); say @a[^10];

[22:02] <camelia> rakudo-moar 5e1f092f5: OUTPUT: «(0 0 0 0 0 0 0 0 0 0)␤»

[22:03] <gfldex> you can also initialise without initialising. :)

[22:04] <discord-raku-bot> <trentj> ah! I was wondering about that too, nice.

[22:06] <discord-raku-bot> <trentj> I wrote a lot of Perl 5 once upon a time but this is a new adventure.

[22:24] <discord-raku-bot> <Nemokosch> m:  my Numeric @a[10] is default(0);

[22:25] <discord-raku-bot> <Nemokosch> oops, wrong example

[22:25] <discord-raku-bot> <Nemokosch> this, on the other hand:

[22:25] <discord-raku-bot> <Nemokosch> m:  my Numeric @a[10] = 0 xx *

[22:25] <discord-raku-bot> <Nemokosch> oh right, this is not the repl...

[22:25] <discord-raku-bot> <Nemokosch> m:  my Numeric @a[10] = 0 xx *; dd @a;

[22:26] <discord-raku-bot> <Nemokosch> <@541404250668924941> this is, for example, constrained to this particular size

[22:31] <discord-raku-bot> <trentj> interesting

[22:44] *** Kaipei left
[23:00] *** deoac joined
[23:35] *** habere-et-disper joined
[23:39] *** deoac left
