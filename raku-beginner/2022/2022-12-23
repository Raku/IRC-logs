[02:24] *** lucs_ is now known as lucs

[02:38] *** razetime joined
[02:42] <jaguart> for a void sub/method is the signature (... --> Nil) or (... --> Empty) - or something else?

[02:43] <jaguart> oh - docs: 'Note that the lack of a returns trait is used to indicate void return type'

[02:51] <jaguart> hmm which actually makes a retun type of Mu ¯\_(ツ)_/¯ 

[03:13] *** Kaiepi left
[05:33] *** Kaiepi joined
[09:00] <discord-raku-bot> <Nemokosch> It's Nil

[09:01] <discord-raku-bot> <Nemokosch> Btw it's not even true - the lack of a returns trait does nothing with the return type

[09:02] <discord-raku-bot> <Nemokosch> --> Nil enforces sunk context

[09:25] *** NemokoschKiwi joined
[09:32] *** NemokoschKiwi left
[09:50] <lizmat> m: class A { method sink() { say "sunk" } }; sub a(--> Nil) { A.new }; a

[09:50] <camelia> rakudo-moar 02043da92: OUTPUT: «sunk␤»

[10:20] *** Kaiepi left
[11:23] *** Kaiepi joined
[12:11] <discord-raku-bot> <Anton Antonov> Can I use `lazy`  in front of an argument of a sub and expect the argument to be given inside the sub "asis"? (I guess I am too lazy to program that experiment myself...)

[12:15] <lizmat> the only way to get things "as is" is to use \ or "is raw"

[12:15] <lizmat> m: sub a(\foo) { dd foo }; a (1,2,3)

[12:15] <camelia> rakudo-moar 02043da92: OUTPUT: «(1, 2, 3)␤»

[12:16] <lizmat> m: sub a(\foo) { dd foo }; a [$1,2,3]

[12:16] <camelia> rakudo-moar 02043da92: OUTPUT: «[Any, 2, 3]␤»

[12:16] <lizmat> m: sub a(\foo) { dd foo }; a $[1,2,3]

[12:16] <camelia> rakudo-moar 02043da92: OUTPUT: «$[1, 2, 3]␤»

[12:16] <lizmat> m: sub a($foo is raw) { dd $foo }; a $[1,2,3]

[12:16] <camelia> rakudo-moar 02043da92: OUTPUT: «$[1, 2, 3]␤»

[12:17] <lizmat> m: sub a($foo is raw) { dd $foo; $foo[2] = 42 }; my @bar = 1,2,3; a @bar; dd @bar

[12:17] <camelia> rakudo-moar 02043da92: OUTPUT: «Array @bar = [1, 2, 3]␤Array @bar = [1, 2, 42]␤»

[12:17] <lizmat> m: sub a($foo is raw) { dd $foo; $foo[2] = 42 }; my @bar = 1,2,3; a $@bar; dd @bar

[12:17] <camelia> rakudo-moar 02043da92: OUTPUT: «$[1, 2, 3]␤Array @bar = [1, 2, 42]␤»

[12:18] <lizmat> m: sub a($foo is raw) { dd $foo; $foo = 42 }; my $bar = (1,2,3); a $bar; dd $bar

[12:18] <camelia> rakudo-moar 02043da92: OUTPUT: «List $bar = $(1, 2, 3)␤Int $bar = 42␤»

[12:19] <lizmat> Anton Antonov a few examples :-)

[12:31] <discord-raku-bot> <Anton Antonov> @lizmat Thank you very much! Trying the examples now...

[12:42] <discord-raku-bot> <Anton Antonov> @lizmat Is it possible to see the structure of `foo` in your examples? Meaning, can I figure out is  `foo` , say, an arithmetic expression, and if yes, see its terms?

[12:56] <lizmat> no, everything is evaluated *before* it is sent as an argument

[12:57] <lizmat> what you want, is macro territory really  :-)

[13:04] <discord-raku-bot> <Anton Antonov> Right -- so, I thought...

[13:09] <discord-raku-bot> <Anton Antonov> "everything is evaluated before it is sent as an argument" -- That is why my first question was about using the prefix `lazy` in front of a sub argument.

[13:13] <lizmat> ah, I see

[13:13] <lizmat> ok, but no, lazy just effectivey sets the "is lazy" flag on iterators that are not lazy

[13:21] <discord-raku-bot> <Nemokosch> This is not Prolog, after all 😛

[13:29] *** poohman joined
[13:30] <poohman> hello all,

[13:43] *** Kaiepi left
[13:44] *** Kaiepi joined
[14:06] <discord-raku-bot> <Anton Antonov> <@297037173541175296> I have Raku-expectations pre-conditioned by Mathematica usage, but I understand what you mean... 🙂

[14:06] <discord-raku-bot> <Anton Antonov> @lizmat Thank you for clarifying `lazy` !

[14:18] *** Kaipei joined
[14:21] *** Kaiepi left
[14:28] *** Kaiepi joined
[14:29] *** Kaipei left
[14:33] *** poohman left
[15:36] *** poohman joined
[15:37] <poohman> somegrammar.parse($lines).made.grep({$_}) vs somegrammar.parse($lines).made.grep($_)

[15:37] <poohman> can someone explain the difference between {$_} vs $_ as the matcher

[15:37] <poohman> is {$_} considered as a regex?

[15:37] <poohman> the first one removes the 'Nil's

[15:38] <poohman> but I want to understand how the match is made

[16:16] *** razetime left
[16:32] *** poohman left
[16:40] *** poohman joined
[16:41] <lizmat> https://dev.to/lizmat/dont-fear-the-grepper-1-1k3e   # poohman

[16:42] <lizmat> tl;dr;  each element is smart-matched with the target

[16:43] <lizmat> if you specify just $_ as the target, it will take the value of $_ at the time of the call to .grep

[16:43] <lizmat> which is usually not what you want: you want the $_ refer to each value of the list

[16:43] *** jgaz joined
[16:44] <lizmat> anyways, I think the blog posts will answer your question(s), if not, lemme know  :-)

[16:47] *** poohman left
[16:49] *** poohman joined
[16:50] <poohman> Thanks lizmat

[16:50] *** Kaipei joined
[16:52] *** Kaiepi left
[16:59] *** poohman37 joined
[17:02] *** poohman left
[17:04] *** Kaipei left
[17:10] <poohman37> poohman: hi Can I not name a token as "to"?

[17:12] <poohman37> It says substring length cannot be negative

[17:12] <poohman37> I name it as to_time and it was Ok

[17:12] <poohman37> it is a token in a Grammar

[17:14] <discord-raku-bot> <Nemokosch> can you provide a bit more context?

[17:34] <poohman37> Nemokosch:<script src="https://gist.github.com/winfredraj/781ea003ed467341f7217268306db0df.js"></script>

[17:35] <poohman37> in line 17 you have token named "to"

[17:36] <poohman37> I have to change that to get it running

[17:39] <lizmat> hmmm... could be that the Match.to method is leaking in there somehow...

[17:39] <discord-raku-bot> <Nemokosch> can you copy it in some... unembedded form? 😅

[17:41] <poohman37> <Nemokosch> cant you see it properly?

[17:42] <poohman37> I just clicked the arrow at the end and it show the gist in this browser quite cleanly

[17:43] <discord-raku-bot> <Nemokosch> no, it's some cursed JS that could probably be used for embedding the gist into a website

[17:44] <poohman37> how do you share code here generally?

[17:44] <poohman37> been a while

[17:44] <discord-raku-bot> <Nahita> <https://gist.github.com/winfredraj/781ea003ed467341f7217268306db0df>

[17:46] <poohman37> just the link? got it

[17:46] <poohman37> thanks Nahita

[17:51] *** Kaiepi joined
[17:54] <discord-raku-bot> <Nahita> np

[18:22] <discord-raku-bot> <Nemokosch> poohman: something is odd indeed...

[18:26] <discord-raku-bot> <Nemokosch> m: grammar Demo2 { token TOP { <to2> }; token to2 { \d+ }; }; my $var2 = Demo2.parse("111"); grammar Demo { token TOP { <to> }; token to { \d+ }; }; my $var = Demo.parse("111"); say $var<to>, $var2<to2>; say $var<t

[18:26] <discord-raku-bot> <Nemokosch> o> eqv $var2<to2>;

[18:27] *** poohman37 left
[18:28] <discord-raku-bot> <Nemokosch> m: say $*RAKU.compiler.version

[18:28] <discord-raku-bot> <Nemokosch> it's older and the behavior of 2022.12 and 2022.07 isn't even the same

[18:28] <discord-raku-bot> <Nemokosch> neither is necesarily valid anyway

[18:29] *** NemokoschKiwi joined
[18:31] <discord-raku-bot> <Nemokosch> https://gist.github.com/Whateverable/c35d9be84594f3400c17ca24273d9261 quite trippy output on different Rakudo releases

[18:39] *** avuserow left
[18:40] <discord-raku-bot> <Nemokosch> definitely 2017.04.3 issue

[18:41] *** jgaz left
[18:50] <discord-raku-bot> <Nemokosch> I wonder if there was a similar issue for pos previously

[18:53] *** avuserow joined
[19:14] <discord-raku-bot> <Nemokosch> interestingly, it didn't ever use to be this bad for the name pos

[19:16] <discord-raku-bot> <Nemokosch> other than that, the situation is clear(ish) - Grammar inherits from Match, Match has a method called `to` and regexes of a Grammar are registered as methods

[19:17] *** NemokoschKiwi left
[19:29] <MasterDuke> yes, there a several names that cause problems in grammars, this pops up every once in a while. do the docs have a "traps" section for it?

[19:47] *** Kaiepi left
[20:14] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/traps#Using_certain_names_for_rules/token/regexes gotcha

[20:17] <discord-raku-bot> <Nemokosch> having said that, there just must be some remedy... having to reason about an open list of identifier names is a feature killer

[20:18] <discord-raku-bot> <Nemokosch> why aren't the token names installed with some prefix instead, similarly to operators?

[20:18] *** equinox joined
[20:34] <MasterDuke> hm...that might be a good suggestion for a rakudo issue

[20:34] <equinox> hi

[20:35] <equinox> would you say the following error is LTA?

[20:35] <equinox> m: my &f; f(2)

[20:35] <camelia> rakudo-moar 02043da92: OUTPUT: «Impossible coercion from 'Int' into 'Callable': no acceptable coercion method found␤  in block <unit> at <tmp> line 1␤␤»

[20:35] <equinox> at first glance i didn't understand it

[20:35] <equinox> but then it hit me it was trying to do Callable(2) coercion

[20:35] <equinox> since &f is a type object at that point

[20:36] <equinox> well in the code i had, i had `my &f = ... if ...;`

[20:36] <equinox> and the condition wasn't true, so this happened

[20:36] <discord-raku-bot> <Nemokosch> Imo the question is rather: should we accept this behavior in the first place?

[20:38] <discord-raku-bot> <Nemokosch> m: my &f; f 2

[20:38] <discord-raku-bot> <Nemokosch> says the same thing which makes no sense whatsoever

[20:38] <discord-raku-bot> <Nemokosch> This is clearly a function invocation, not any coercion...

[21:45] *** equinox left
[22:05] *** kjp left
[22:16] *** kjp joined
[22:34] <jaguart> m: say Routine.WHY

[22:34] <camelia> rakudo-moar 02043da92: OUTPUT: «Cannot look up attributes in a Routine type object. Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[22:34] <jaguart> m: say Code.WHY

[22:34] <camelia> rakudo-moar 02043da92: OUTPUT: «No documentation available for type 'Code'.  Perhaps it can be found at␤https://docs.raku.org/type/Code␤»

[22:48] <jaguart> the last one is kind of clever - it actually returns a Nil with a .gist

[23:02] <jaguart> Is it possible to examine Nil - e.g. docs say parents are: Cool Any Mu, but

[23:03] <jaguart> m: say Nil.^parents

[23:03] <camelia> rakudo-moar 02043da92: OUTPUT: «()␤»

[23:03] <jaguart> m: say Int.^parents

[23:03] <camelia> rakudo-moar 02043da92: OUTPUT: «()␤»

[23:03] <discord-raku-bot> <Nemokosch> where do you read this stuff to begin with, by the way?

[23:03] <jaguart> m: say Nil.^parents(:all)

[23:03] <camelia> rakudo-moar 02043da92: OUTPUT: «((Cool) (Any) (Mu))␤»

[23:03] <jaguart> ah

[23:03] <discord-raku-bot> <Nemokosch> I couldn't find where it supposedly says no return trait implies "void function", either

[23:04] <jaguart> https://docs.raku.org/language/nativecall#Passing_and_returning_values

[23:04] <jaguart> Second para - just after first code-block

[23:06] <discord-raku-bot> <Nemokosch> Hey, you didn't say that you are talking about NativeCall in particular

[23:08] <jaguart> I just searched 'void' to find equiv of Raku void subs

[23:10] <jaguart> m: sub x {...}; say &x.of.^name

[23:10] <camelia> rakudo-moar 02043da92: OUTPUT: «Mu␤»

[23:10] <discord-raku-bot> <Nemokosch> Okay, so what basically happened is that you used a term that isn't really used within Raku and ended up on the side for interacting with C libraries

[23:10] <jaguart> which is why I assumed no --> means returns Mu

[23:12] <jaguart> my new question is: How do I pass around Nil - it always seems to arrive as an Any 

[23:12] <jaguart> even with 'is raw'

[23:13] <discord-raku-bot> <Nemokosch> This gives me some flashbacks... not a great fan of how Nil is treated

[23:14] <jaguart> actually -must be something in my stack, one-liners work :(

[23:14] <discord-raku-bot> <Nemokosch> with "is raw", it seems to work for me

[23:14] <jaguart> yeah - must have missed one in the stack somewhere

[23:14] <discord-raku-bot> <Nemokosch> generally, if you _assign_ Nil to a container, it will be reset to its default value

[23:15] <jaguart> yes - not assigining, introspecting

[23:18] <discord-raku-bot> <Nemokosch> let me show you something that I really wish to fix but I'm not sure there is a point before RakuAST

[23:18] *** NemokoschKiwi joined
[23:20] <NemokoschKiwi> m: my Int &f = sub ($a --> Int) { $a + 5 }; say f 10;

[23:20] <camelia> rakudo-moar 02043da92: OUTPUT: «15␤»

[23:21] <NemokoschKiwi> so far so good, right? It can check for a return value because Callable can have a type parameter

[23:21] <jaguart> yes

[23:21] <NemokoschKiwi> However, ironically enough

[23:21] <NemokoschKiwi> m: my &good = Nil; my Int &bad = Nil;

[23:21] <camelia> rakudo-moar 02043da92: OUTPUT: «Type check failed in assignment to &bad; expected Callable[Int] but got Callable (Callable)␤  in block <unit> at <tmp> line 1␤␤»

[23:22] <NemokoschKiwi> the default value doesn't match the type constraint 🥴

[23:23] *** NemokoschKiwi left
[23:25] <jaguart> Doesnt that make sense? assuming that &good returns Mu?

[23:26] <jaguart> m: my Mu &good = Nil; say &g.WHICH

[23:26] <camelia> rakudo-moar 02043da92: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    g used at line 1␤␤»

[23:26] <jaguart> m: my Mu &good = Nil; say &good.WHICH

[23:26] <camelia> rakudo-moar 02043da92: OUTPUT: «Type check failed in assignment to &good; expected Callable[Mu] but got Callable (Callable)␤  in block <unit> at <tmp> line 1␤␤»

[23:26] <jaguart> m: my Mu &good = Nil;

[23:26] <camelia> rakudo-moar 02043da92: OUTPUT: «Type check failed in assignment to &good; expected Callable[Mu] but got Callable (Callable)␤  in block <unit> at <tmp> line 1␤␤»

[23:26] <discord-raku-bot> <Nemokosch> I'm not sure what the default signature is

[23:27] <jaguart> m: my &g; say &g.of.^name

[23:27] <camelia> rakudo-moar 02043da92: OUTPUT: «Mu␤»

[23:27] <jaguart> m: my Int &g; say &g.of.^name

[23:27] <camelia> rakudo-moar 02043da92: OUTPUT: «Mu␤»

[23:27] <jaguart> hmmm

[23:27] <discord-raku-bot> <Nemokosch> yeah this .of doesn't seem to be doing anything useful. I don't know if this is a bug

[23:28] <discord-raku-bot> <Nemokosch> Anyway, I wonder if `Callable` is compatible with `Callable[X]` for any X

[23:28] <jaguart> its also a bit weird that ( --> Str ) {...} is different to () returns Str {...}

[23:29] <jaguart> in the context of signature comparison

[23:29] <jaguart> you would think these would just be sugars

[23:29] <discord-raku-bot> <Nemokosch> in some way it's different, that's for sure - it can take "return values" in a pretty limited way

[23:30] <discord-raku-bot> <Nemokosch> namely terms

[23:31] <discord-raku-bot> <Nemokosch> last time on the Raku Study Group meetup, we kinda had fun with this, Bruce Gray managed to come up with an expression that worked for setting a return value of -1

[23:37] <jaguart> why is -1 disallowed?

[23:37] <discord-raku-bot> <Nemokosch> -1 is not a term on its own but an expression of the unary minus and 1

[23:38] <discord-raku-bot> <Nemokosch> I don't think there is any theoretic reason why it couldn't work - the grammar of the language simply doesn't handle this

[23:39] <discord-raku-bot> <Nemokosch> or at least the grammar used by Rakudo

[23:41] <discord-raku-bot> <Nemokosch> there is quite a lot of parser magic around negative numbers in expressions: be warned that unusual things can happen without parens and the placement of whitespaces can also change the result

[23:41] <jaguart> unexpected

[23:47] <discord-raku-bot> <Nemokosch> The question we need to ask ourselves: what is -1.succ ?

[23:47] <discord-raku-bot> <Nemokosch> or better said, what would we expect it to be?

[23:51] <jaguart> one unit to the right on the number line?

[23:52] <discord-raku-bot> <Nemokosch> Let's take that semantics of the succ method for granted. What would be the result you expect?

[23:52] <jaguart> but not in raku I see

[23:52] <discord-raku-bot> <Nemokosch> Because this is a valid expression in Ruby and Raku as well and the result is different

[23:56] *** NemokoschKiwi joined
[23:56] <jaguart> because negation of 1.succ

[23:56] <jaguart> isn't that a precedence thing

[23:56] <NemokoschKiwi> yes

[23:56] <NemokoschKiwi> m: (-1).succ.say

[23:56] <camelia> rakudo-moar 02043da92: OUTPUT: «0␤»

[23:56] <NemokoschKiwi> m: -1 .succ.say

[23:56] <camelia> rakudo-moar 02043da92: OUTPUT: «0␤»

[23:56] <NemokoschKiwi> mind the space

[23:57] *** NemokoschKiwi left
[23:58] <jaguart> yeah implied -(1.succ) vs (-1).succ - that is going to catch everyone 

[23:58] <discord-raku-bot> <Nemokosch> let me put it very bluntly: it's not worth it to push the parser towards the edges

[23:59] <jaguart> feels like this should be a case well handled rather than an edge case :(

