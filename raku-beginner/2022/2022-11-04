[00:01] <discord-raku-bot> <Kaiepi> i find it kinda odd because a typecheck on `my` can happen at the container level, but `our` installs a lexical symbol like `my` w/ an extra binding to `OUR` so you can kinda just

[00:05] <discord-raku-bot> <Nemokosch> no idea why `ok` vanished but this one works even in the REPL

[00:05] <discord-raku-bot> <Nemokosch> also as `raku -e`

[01:15] *** deoac joined
[01:15] *** Kaipei left
[01:20] *** razetime joined
[01:26] *** deoac left
[03:41] *** Kaipei joined
[03:58] *** razetime left
[04:43] *** Heptite left
[07:58] *** razetime joined
[10:35] *** Kaipei left
[11:25] *** m_athias left
[11:25] *** m_athias joined
[12:20] *** Kaipei joined
[12:52] <discord-raku-bot> <Nemokosch> <@511826957558611968> https://dev.to/lizmat/dont-fear-the-grepper-6-4i about laziness, caching and all

[12:55] *** habere-et-disper joined
[12:59] *** razetime left
[13:00] *** habere-et-disper left
[13:07] <discord-raku-bot> <zacque> Thanks, that helps! The difference in assigning `Seq` object to a positional or scalar variable is new to me ü§Ø

[13:09] <discord-raku-bot> <zacque> And how the `map` and `grep` can be chained together *lazily*

[13:11] <discord-raku-bot> <Nemokosch> A seq object can be assigned to a scalar variable

[13:11] <discord-raku-bot> <Nemokosch> and bound to a positional variable

[13:11] <discord-raku-bot> <Nemokosch> think of that as a different dimension

[13:11] <discord-raku-bot> <zacque> Just trying it out a little bit, when the Range object is defined  to infinity, i.e. `(0..*)`, assigning the `map` result to a positional or scalar is the same

[13:12] <discord-raku-bot> <zacque> Yup, I can appreciate that

[13:12] <discord-raku-bot> <Nemokosch> can you write the code?

[13:13] <discord-raku-bot> <zacque> Something like: ```raku

[13:13] <discord-raku-bot> <zacque> my @myseq = (1..*).map({ say "calculating $_"; $_ + 2});

[13:13] <discord-raku-bot> <zacque> @myseq.say;

[13:13] <discord-raku-bot> <zacque> @myseq[0].say;

[13:13] <discord-raku-bot> <zacque> @myseq[0..10].say;

[13:13] <discord-raku-bot> <zacque> ```

[13:14] <discord-raku-bot> <zacque> which is different from `my @myseq2 = (1..10).map({ say "calculating $_"; $_ + 2});`, I meant

[13:15] <discord-raku-bot> <zacque> So, for a fixed size, assigning to a positional variable is eager by default, but assigning to a scalar variable makes it lazy; for infinite size, both cases are lazy by default?

[13:20] <discord-raku-bot> <Nemokosch> uh, moment

[13:23] <discord-raku-bot> <Nemokosch> what you are saying sounds reasonable for me but I wouldn't know tbh

[13:24] <discord-raku-bot> <Nemokosch> m: my @myseq = (1..*).map({ say "calculating $_"; $_ + 2}); say @myseq[].WHAT;

[13:26] <discord-raku-bot> <Nemokosch> because it claims to be an array, I would assume the STORE method handles it in a special way

[13:26] <discord-raku-bot> <Nemokosch> somehow it knows that the Seq is infinite, I don't know

[13:28] *** discord-raku-bot left
[13:28] *** discord-raku-bot joined
[13:30] <discord-raku-bot> <Kaiepi> that's all backed by https://docs.raku.org/type/Iterator#method_push-until-lazy in this case

[13:32] <discord-raku-bot> <Nemokosch> ohh gotcha

[13:32] <discord-raku-bot> <Nemokosch> it's not that the infinite version knows that it's infinite

[13:32] <discord-raku-bot> <Nemokosch> it's that the finite version doesn't consider itself lazy...

[13:33] <discord-raku-bot> <Nemokosch> m: say (1..10).map({ say "calculating $_"; $_ + 2}).is-lazy

[13:33] <discord-raku-bot> <Nemokosch> mind: blown

[13:34] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/Iterator#method_is-lazy

[13:34] <discord-raku-bot> <Superstart033> my $Mind = ‚Äúblown‚Äù

[13:34] <discord-raku-bot> <Nemokosch> so something that might be lazy, might not _consider itself_ lazy

[13:34] <discord-raku-bot> <Nemokosch> lol

[13:36] <discord-raku-bot> <Nemokosch> perhaps is-finite would have been a better name or idk

[13:36] <discord-raku-bot> <Nemokosch> or always-lazy

[13:36] <discord-raku-bot> <zacque> This is confusing... ü§£

[13:36] <discord-raku-bot> <Nemokosch> technically it's simple

[13:36] <discord-raku-bot> <Nemokosch> "is-lazy" in fact means "is-always-lazy"

[13:37] <discord-raku-bot> <Nemokosch> since the infinite version "is always lazy", it won't get pushed

[13:37] <discord-raku-bot> <Nemokosch> while the other version is just potentially lazy, and therefore it can (and will) get pushed

[13:39] <discord-raku-bot> <zacque> Hmm, that doesn't help

[13:39] <discord-raku-bot> <Nemokosch> in what regard? üòÖ

[13:40] <discord-raku-bot> <zacque> I think in the article, it says `my @result = (1..5).map({ say "calculating $_"; $_ + 2});` is roughly equivalent to ```raku

[13:40] <discord-raku-bot> <zacque> my @result;

[13:40] <discord-raku-bot> <zacque> for (1..5).map({ say "calculating $_"; $_ + 2}) {

[13:40] <discord-raku-bot> <zacque>     @result.push($_);

[13:40] <discord-raku-bot> <zacque> }

[13:40] <discord-raku-bot> <zacque> ```

[13:40] <discord-raku-bot> <zacque> But in reality, it's more like ```raku

[13:40] <discord-raku-bot> <zacque> my @result;

[13:40] <discord-raku-bot> <zacque> for (1..5).map({ say "calculating $_"; $_ + 2}) {

[13:40] <discord-raku-bot> <zacque>     @result.push-until-lazy($_);

[13:40] <discord-raku-bot> <zacque> }```?

[13:40] <discord-raku-bot> <zacque> That's why lazy Seq doesn't produce value

[13:40] <discord-raku-bot> <Nemokosch> not exactly

[13:40] <discord-raku-bot> <Nemokosch> push-until-lazy pushes several elements

[13:41] <discord-raku-bot> <Nemokosch> therefore it replaces the whole "for"

[13:41] <discord-raku-bot> <Nemokosch> it's a lower level

[13:42] <discord-raku-bot> <Nemokosch> ```

[13:42] <discord-raku-bot> <Nemokosch> my @result;

[13:42] <discord-raku-bot> <Nemokosch> (1..5).map({ say "calculating $_"; $_ + 2}).push-until-lazy(@result);

[13:42] <discord-raku-bot> <Nemokosch> ```

[13:42] <discord-raku-bot> <Nemokosch> I think you could try this

[13:42] <discord-raku-bot> <Nemokosch> I will, too

[13:42] <discord-raku-bot> <Nemokosch> oops, needs .iterator

[13:42] <discord-raku-bot> <Nemokosch> ```

[13:42] <discord-raku-bot> <Nemokosch> my @result;

[13:42] <discord-raku-bot> <Nemokosch> (1..5).map({ say "calculating $_"; $_ + 2}).iterator.push-until-lazy(@result);

[13:42] <discord-raku-bot> <Nemokosch> ```

[13:42] <discord-raku-bot> <Nemokosch> fixed, second attempt

[13:45] <discord-raku-bot> <Nemokosch> <@210313526928080896> do you think this can be further "for-ified", or the low-level Iterator interface would be needed to expand this?

[13:46] <discord-raku-bot> <zacque> Hmm, but how about  `(1..*).map({ say "calculating $_"; $_ + 2}).iterator.push-until-lazy(@result);`

[13:46] <discord-raku-bot> <Nemokosch> yes, same call

[13:46] <discord-raku-bot> <zacque> I'm trying to see how `push-until-lazy` fits into this picture

[13:46] <discord-raku-bot> <zacque> Oh?

[13:46] <discord-raku-bot> <Nemokosch> > The Iterator role implements this method as a no-op if is-lazy returns a True value, or as a synonym of push-all if not.

[13:46] <discord-raku-bot> <Nemokosch> so in the second case, it does nothing

[13:46] <discord-raku-bot> <Nemokosch> in the first case, it redirects to .push-all

[13:48] <discord-raku-bot> <zacque> Ohh, that tells the difference between `my @myseq = (0..*).map({ say "calculating $_"; $_ + 2});` and `my @myseq = (0..10).map({ say "calculating $_"; $_ + 2});`

[13:48] <discord-raku-bot> <Nemokosch> yes... it's all because of the different value for .is-lazy

[13:48] <discord-raku-bot> <Nemokosch> which is a somewhat misleading name

[13:49] <discord-raku-bot> <Nemokosch> that's why I say you could think of it as is-always-lazy

[13:49] <discord-raku-bot> <zacque> Is it? The name seems good to me

[13:49] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/Iterator#method_is-lazy

[13:49] <discord-raku-bot> <Nemokosch> I mean... `(0..10).map({ say "calculating $_"; $_ + 2})` this is "lazy"

[13:50] <discord-raku-bot> <Nemokosch> it doesn't calculate anything

[13:50] <discord-raku-bot> <Nemokosch> see?

[13:50] <discord-raku-bot> <Nemokosch> doesn't calculate anything, yet says `False`

[13:50] <discord-raku-bot> <zacque> Huh? Ok, that's surprising

[13:51] <discord-raku-bot> <Nemokosch> I think the reason is that iterators are dumb in general

[13:51] <discord-raku-bot> <Nemokosch> they don't know much about the underlying content

[13:51] <discord-raku-bot> <Nemokosch> if they had to figure it out, we would surely lose lazy evaluation

[13:52] <discord-raku-bot> <Nemokosch> so when in doubt, they rather lie in a humble way, in order to stay _actually_ lazy

[13:52] <discord-raku-bot> <Nemokosch> ü§£

[13:52] <discord-raku-bot> <zacque> Hmmm, wait, I'm confused again

[13:52] <discord-raku-bot> <Nemokosch> https://tenor.com/view/no-nooo-nooooo-crying-sad-gif-14628566

[13:52] <discord-raku-bot> <zacque> Then how do you explain the difference in behaviour if both are lazy?

[13:53] <discord-raku-bot> <zacque> Haha

[13:53] <discord-raku-bot> <zacque> Oh nooo

[13:53] <discord-raku-bot> <Nemokosch> they _are_ both lazy

[13:53] <discord-raku-bot> <Nemokosch> but they _don't both consider themselves_ lazy

[13:53] <discord-raku-bot> <zacque> ???

[13:53] <discord-raku-bot> <Nemokosch> only one of them actually knows about itself that it's lazy

[13:53] <discord-raku-bot> <zacque> Hmmm... maybe it has something to do with the assignment method?

[13:54] <discord-raku-bot> <Nemokosch> depends on what "it" is

[13:54] <discord-raku-bot> <zacque> Assignment method forces evaluation?

[13:55] <discord-raku-bot> <Nemokosch> what I said applies regardless the assignment method

[13:55] <discord-raku-bot> <zacque> I'm confuse about this statement

[13:55] <discord-raku-bot> <Nemokosch> why?

[13:55] <discord-raku-bot> <zacque> Oh...

[13:57] <discord-raku-bot> <Nemokosch> imagine yourself in the case of a poor iterator

[13:57] <discord-raku-bot> <Nemokosch> it can only retrieve one value at once

[13:58] <discord-raku-bot> <Nemokosch> how can it know if it belongs to lazy data or not?

[13:59] <discord-raku-bot> <Nemokosch> basically only if it's told so

[13:59] <discord-raku-bot> <Nemokosch> now, when an infinite range is involved, it will be told so

[13:59] <discord-raku-bot> <Nemokosch> apparently, if the _lazy_ prefix is used, it will again be told so

[14:01] <discord-raku-bot> <Nemokosch> > my @result = lazy (1..5).map({ say "calculating $_"; $_ + 2});

[14:01] <discord-raku-bot> <zacque> I see

[14:01] <discord-raku-bot> <zacque> Just now I was also surprised by the fact that `(1..10).map({ say "calculating $_"; $_ + 2}).is-lazy` doesn't print out "calculating ..."

[14:01] <discord-raku-bot> <Nemokosch> m: my @result = (.map({ say "calculating $_"; $_ + 2}) andthen .is-lazy.say && $_); dd @result;

[14:01] <discord-raku-bot> <Nemokosch> oops, almost

[14:03] <discord-raku-bot> <Nemokosch> m: my @result = lazy (1..5).map({ say "calculating $"; $ + 2}) andthen .is-lazy.say && $_; dd @result;

[14:03] <discord-raku-bot> <Nemokosch> I'm curious about this

[14:03] <discord-raku-bot> <zacque> It doesn't print out anything...

[14:03] <discord-raku-bot> <Nemokosch> so annoying

[14:03] <discord-raku-bot> <Nemokosch> m: my @result = lazy (1..5).map({ say "calculating $_"; $ + 2}) andthen .is-lazy.say && $_; dd @result;

[14:04] <discord-raku-bot> <Nemokosch> watch out

[14:04] <discord-raku-bot> <Nemokosch> yes! that's it

[14:05] <discord-raku-bot> <Nemokosch> `my @result = lazy (1..5).map({ say "calculating $_"; $ + 2}) andthen .is-lazy.say && $_; dd @result;`

[14:05] <discord-raku-bot> <Nemokosch> no, that's not it...

[14:05] <discord-raku-bot> <Nemokosch> run it for yourself pls

[14:06] <discord-raku-bot> <Nemokosch> it says `False`

[14:06] <discord-raku-bot> <Nemokosch> and then it proceeds to talk about "lazy list"

[14:07] <discord-raku-bot> <Nemokosch> yes!

[14:07] <discord-raku-bot> <zacque> Ya, false, also, same error for `dd @result`

[14:07] <discord-raku-bot> <Nemokosch> so `(1..5).map({ say "calculating $_"; $ + 2})` still considers itself not lazy

[14:07] <discord-raku-bot> <Nemokosch> despite not calculating anything

[14:07] <discord-raku-bot> <zacque> Oh, the `False` is from evaluating `.is-lazy.say`!

[14:07] <discord-raku-bot> <Nemokosch> yes

[14:09] <discord-raku-bot> <zacque> Ok, but this is true

[14:09] <discord-raku-bot> <zacque> The conclusion is that the `lazy` effect from the `lazy` keyword comes after assignment?

[14:09] <discord-raku-bot> <Nemokosch> that's part of the conclusion

[14:11] <discord-raku-bot> <zacque> Hold on, I need to digest it

[14:21] <discord-raku-bot> <Nemokosch> don't assume that I understand all of it üòÑ

[14:21] <discord-raku-bot> <Nemokosch> I think I understand "enough for now", enough to integrate the code into a kind of logic

[14:24] *** discord-raku-bot left
[14:24] *** discord-raku-bot joined
[14:30] <discord-raku-bot> <zacque> Ahhh, so to understand why `say (0..10).map({ say "calculating $_"; $_ + 2}).is-lazy;` doesn't print any "calculating ..." line, you do `my @result = lazy (1..10).map({ say "calculating $_"; $ + 2}) andthen .is-lazy.say && $_;`, which prints `False`

[14:30] *** razetime joined
[14:36] <discord-raku-bot> <zacque> It shows that the `Seq` object is sometimes lazy even if `.is-lazy` returns `False`

[14:37] <discord-raku-bot> <zacque> So, there is a contradiction. QED. Ha!

[14:38] <discord-raku-bot> <Nemokosch> ü§£

[14:38] <discord-raku-bot> <Nemokosch> I think the `lazy` prefix "decorates" the value some way

[14:38] <discord-raku-bot> <Nemokosch> so that it becomes aware of its laziness

[14:38] <discord-raku-bot> <Nemokosch> without that, it doesn't know about it

[14:39] <discord-raku-bot> <zacque> But maybe method call is lazy? That's why `(0..10).map({ say "calculating $_"; $_ + 2}).is-lazy.say;` doesn't print any "Calculating ..." line

[14:40] <discord-raku-bot> <zacque> So your theory is not quite right?

[14:40] <discord-raku-bot> <Nemokosch> with this "black box approach", we can only rely on Occam's razor

[14:40] <discord-raku-bot> <Nemokosch> the only thing I feel needs "hacking" in my theory is the `lazy` prefix that can somehow let iterables know that they are lazy

[14:41] <discord-raku-bot> <Nemokosch> on the other hand, I don't think method calls are any special, nor that we need to postulate that

[14:42] <discord-raku-bot> <Nemokosch> map returns a Seq, without fetching any values

[14:42] <discord-raku-bot> <Nemokosch> in my terms, that sounds enough to call it "lazy"

[14:44] <discord-raku-bot> <Nemokosch> in the article of lizmat, the terminology is the same

[14:44] <discord-raku-bot> <zacque> It seems to me that it only knows after assignment (or maybe after creating the object and "decorating" its value)

[14:44] <discord-raku-bot> <zacque> So I think assignment does play an important role here

[14:44] <discord-raku-bot> <Nemokosch> well, let's remove `lazy` and try that way

[14:45] <discord-raku-bot> <zacque> I see

[14:46] <discord-raku-bot> <Nemokosch> try $result and @result as well

[14:47] <discord-raku-bot> <Nemokosch> they will both state `False` but only @result will trigger eager evaluation

[14:47] <discord-raku-bot> <Nemokosch> _that_ is indeed due to the list assignment

[14:48] <discord-raku-bot> <Nemokosch> but for the scalar, it will still be lazy and still lie about it

[14:48] <discord-raku-bot> <zacque> Huh? You meant comparing these two?

[14:48] <discord-raku-bot> <Nemokosch> yes

[14:48] <discord-raku-bot> <Rog> Skimming through this conversation, I would say make sure you‚Äôre not observing things that aren‚Äôt actually there by using the REPL

[14:48] <discord-raku-bot> <Rog> Because the REPL will cause stuff to evaluate

[14:49] <discord-raku-bot> <Nemokosch> I don't think any of this was caused by the REPL

[14:49] <discord-raku-bot> <zacque> Both are `False`

[14:50] <discord-raku-bot> <Nemokosch> yes

[14:50] <discord-raku-bot> <zacque> Ah, I see, I'm not aware of that, thanks!

[14:50] <discord-raku-bot> <Nemokosch> and how are they located compared to the other say's

[14:50] <discord-raku-bot> <zacque> It's by invoking `raku`

[14:50] <discord-raku-bot> <Nemokosch> oh okay

[14:50] <discord-raku-bot> <Nemokosch> add `dd $result` and `dd @result`

[14:50] <discord-raku-bot> <Nemokosch> after the respective assignments

[14:51] <discord-raku-bot> <Nemokosch> and remove `lazy`

[14:52] <discord-raku-bot> <Nemokosch> I mean, I thought you wanted to investigate the role the assignment plays

[14:52] <discord-raku-bot> <zacque> Ah, yes I am

[14:52] <discord-raku-bot> <zacque> Huh?

[14:53] <discord-raku-bot> <Nemokosch> with lazy, I think it's almost identical; that's what we have checked, right?

[14:54] <discord-raku-bot> <zacque> Ah, yes

[14:54] <discord-raku-bot> <zacque> My mind is a mess now haha

[14:54] <discord-raku-bot> <Nemokosch> I'm trying to "inline" the important points about the process

[14:57] <discord-raku-bot> <zacque> With separator

[14:57] <discord-raku-bot> <Nemokosch> 1. assignments: $ wraps the right handside directly, @ calls STORE (which under the hood calls push-until-lazy - source: Kaiepi :D)

[14:57] <discord-raku-bot> <zacque> ?

[14:57] <discord-raku-bot> <Nemokosch> why

[14:57] <discord-raku-bot> <zacque> What why?

[14:57] <discord-raku-bot> <Nemokosch> the question mark why

[14:59] <discord-raku-bot> <zacque> Oh, I mean is this the "answer"? Haha

[14:59] <discord-raku-bot> <Nemokosch> meant to continue this

[15:01] <discord-raku-bot> <Nemokosch> 2. `lazy` - it's a statement prefix; might even be weird usage here, I'm not sure what it exactly does here. https://docs.raku.org/syntax/lazy

[15:01] <discord-raku-bot> <Nemokosch> it seems to do "the right thing", whatever that may be exactly

[15:03] <discord-raku-bot> <Nemokosch> it seems to me that it wraps the right handside into a new Iterable (a Seq in our case) that does know about its laziness

[15:03] <discord-raku-bot> <zacque> For lazy vs  eager comparison

[15:05] <discord-raku-bot> <Nemokosch> https://docs.raku.org/routine/lazy gotcha

[15:05] <discord-raku-bot> <Nemokosch> see your last line of output?

[15:05] <discord-raku-bot> <Nemokosch> it's explicitly marked as lazy

[15:08] <discord-raku-bot> <zacque> For comparison until infinity

[15:08] <discord-raku-bot> <zacque> Not sure why it computes until 101

[15:09] <discord-raku-bot> <zacque> Yup

[15:09] <discord-raku-bot> <Nemokosch> both?

[15:09] <discord-raku-bot> <zacque> Nope, only for the scalar one

[15:11] <discord-raku-bot> <Nemokosch> what did the array version produce?

[15:12] <discord-raku-bot> <zacque> A lazy list, I commented out the `dd @result` because error `Cannot .elems a lazy list onto a Array`

[15:13] <discord-raku-bot> <Nemokosch> I think this is solely related to the presentation of different lazy structures

[15:13] <discord-raku-bot> <Nemokosch> by the way "Cannot .elems a lazy list onto a Array" sounds so ungrammatical to me

[15:13] <discord-raku-bot> <Nemokosch> do you have any idea how this should be read? xD

[15:13] <discord-raku-bot> <zacque> Think so

[15:15] <discord-raku-bot> <zacque> Haha! I simply ignore the "onto a Array" part

[15:15] <discord-raku-bot> <Nemokosch> so 101 might be an arbitrary number used for gisting

[15:15] <discord-raku-bot> <Nemokosch> have you seen bisectable6 (the bisect bot) before?

[15:15] <discord-raku-bot> <Nemokosch> maybe we could check when this phrasing was introduced

[15:15] <discord-raku-bot> <Nemokosch> xD

[15:15] <discord-raku-bot> <zacque> Yup, it limits to first 100

[15:16] <discord-raku-bot> <zacque> Haha, you can git blame on that

[15:17] <discord-raku-bot> <zacque> Nope

[15:17] <discord-raku-bot> <Nemokosch> okay, wait for it...

[15:17] <discord-raku-bot> <Nemokosch> if I knew where it was in the code üòâ

[15:17] *** Nemokosch joined
[15:18] <discord-raku-bot> <Nemokosch> only works on the main IRC chat <#633753286209699870>

[15:19] <discord-raku-bot> <zacque> https://github.com/rakudo/rakudo/blob/14fb6a5c3d4e4a747acc8b80df6f3cbb6061b2a6/src/core.c/Exception.pm6#L2534

[15:20] <discord-raku-bot> <Nemokosch> https://gist.github.com/8f8c79094f8124f1787b8079b3715647

[15:21] <discord-raku-bot> <zacque> Oh, interesting

[15:23] <discord-raku-bot> <zacque> Looks like a bug to me because the `.message` method is not define

[15:23] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/commit/71960b162d244cc077654f5abb3fd3aecc4e9c8c welp

[15:23] <discord-raku-bot> <Nemokosch> the .what value changed

[15:24] <discord-raku-bot> <Nemokosch> I think it was invented later

[15:24] *** Nemokosch left
[15:25] <discord-raku-bot> <Nemokosch> the caption is a bug though, pretty sure

[15:25] <discord-raku-bot> <Nemokosch> I think the intention was like "cannot push onto an array" and stuff like that

[15:26] <discord-raku-bot> <Nemokosch> and `.elems` is miscategorized somehow

[15:30] <discord-raku-bot> <Nemokosch> well we pretty much caught a bug

[15:30] <discord-raku-bot> <Nemokosch> minor bug but still a bug üòÑ

[15:40] <discord-raku-bot> <Nemokosch> I would say this could be our 5 minutes of fame

[15:40] <discord-raku-bot> <Nemokosch> but it's not obvious how it should be fixed xD

[15:40] <discord-raku-bot> <Nemokosch> because the refactor created overlaps in the calls

[15:40] <discord-raku-bot> <Nemokosch> stuff that used to look different looks identical now

[15:40] <discord-raku-bot> <Nemokosch> that's why the output changed

[15:47] <discord-raku-bot> <zacque> Yeahhhhh, we caught a minor bug haha!

[15:48] <discord-raku-bot> <zacque> I see

[15:48] <discord-raku-bot> <zacque> I'll leave it to the devs lol

[15:48] <discord-raku-bot> <zacque> Gtg, bye

[15:49] <discord-raku-bot> <Nemokosch> hahaha

[15:49] <discord-raku-bot> <Nemokosch> byez

[15:54] <lizmat> FWIW, I explicitly did not want to mention "lazy" in the grepper blog posts

[15:54] <lizmat> not until the blog posts about iterators

[15:59] <discord-raku-bot> <Nemokosch> fair enough

[15:59] <discord-raku-bot> <Nemokosch> lizmat: any idea about how the exception message could/should be fixed?

[16:00] <lizmat> eh, which one ?

[16:02] *** razetime left
[16:02] *** razetime joined
[16:09] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/issues/5093

[17:12] *** razetime left
[17:31] *** Kaipei left
[18:19] *** habere-et-disper joined
[18:27] <habere-et-disper> `flat` suggests that it flattens things, but an empty array is flattened into an empty sequence which in turn cannot be flattened. Please can someone illuminate on this Chesterton Fence?

[18:27] <habere-et-disper> m: ().flat

[18:27] <camelia> rakudo-moar c704d9779: ( no output )

[18:28] <habere-et-disper> If I turn instead to `slip`, then an empty sequence is still not discarded unless I use the prefix form:

[18:28] <habere-et-disper> m: ().Slip

[18:28] <camelia> rakudo-moar c704d9779: ( no output )

[18:28] <habere-et-disper> m: |()

[18:28] <camelia> rakudo-moar c704d9779: ( no output )

[18:29] <habere-et-disper> m: dd ().flat; dd ().Slip; dd |()

[18:29] <camelia> rakudo-moar c704d9779: OUTPUT: ¬´().Seq‚ê§slip()‚ê§block <unit>()‚ê§¬ª

[19:02] *** Kaipei joined
[19:22] <discord-raku-bot> <Nemokosch> Could you provide an example where this behavior has unwanted consequences?

[19:23] <discord-raku-bot> <Nemokosch> An empty list is flat by itself, I think so far so good

[19:24] <habere-et-disper> I'm grokking the Exercism Flatten Array exercise

[19:25] <habere-et-disper> Yes, I'm with you on the empty list being flat itself.

[19:49] *** Heptite joined
[20:08] <habere-et-disper> Here's my confusion... I don't think I understand what a container is in raku:

[20:08] <habere-et-disper> m: m: my $empty-scalar = []; my @empty-array = []; say $empty-scalar.WHAT; say @empty-array.WHAT; say (1, 2, $empty-scalar).flat; say (1, 2, @empty-array).flat;

[20:08] <camelia> rakudo-moar 2037ffbac: OUTPUT: ¬´(Array)‚ê§(Array)‚ê§(1 2 [])‚ê§(1 2)‚ê§¬ª

[20:09] <habere-et-disper> Why does the empty array get flattened, but the empty scalar (which holds an empty array) not? Are scalars containers and arrays not?

[20:44] *** Kaipei left
[21:07] <discord-raku-bot> <Nemokosch> habere-et-disper: fair enough, it is indeed a bit... complicated

[21:11] <discord-raku-bot> <Nemokosch> how to put it

[21:11] <discord-raku-bot> <Nemokosch> first, let's clarify that I think this is documented behavior

[21:12] <discord-raku-bot> <Nemokosch> > Interprets the invocant as a list, flattens non-containerized Iterables into a flat list, and returns that list. Keep in mind Map and Hash types are Iterable and so will be flattened into lists of pairs.

[21:13] <discord-raku-bot> <Nemokosch> https://docs.raku.org/routine/flat

[21:13] <discord-raku-bot> <Nemokosch> you might argue that the phrasing is a bit inaccurate because Array IS a container type as well, not only data type

[21:13] <discord-raku-bot> <Nemokosch> by the way, you didn't retrieve what I think you wanted to retrieve

[21:13] <discord-raku-bot> <Nemokosch> m: my $empty-scalar = []; my @empty-array = []; say $empty-scalar.VAR.WHAT; say @empty-array.VAR.WHAT; say (1, 2, $empty-scalar).flat; say (1, 2, @empty-array).flat;

[21:14] <discord-raku-bot> <Nemokosch> now this is the real WHAT ü§£

[21:14] <discord-raku-bot> <Nemokosch> m: my $empty-scalar = []; my @empty-array = []; say $empty-scalar.VAR.WHAT; say @empty-array.VAR.WHAT; say (1, 2, $empty-scalar).flat; say (1, 2, @empty-array).flat;

[21:14] <habere-et-disper> ¬†m: my $empty-scalar = []; my @empty-array = []; say $empty-scalar.VAR.WHAT; say @empty-array.VAR.WHAT; say (1, 2, $empty-scalar).flat; say (1, 2, @empty-array).flat;

[21:15] <camelia> rakudo-moar 2037ffbac: OUTPUT: ¬´(Scalar)‚ê§(Array)‚ê§(1 2 [])‚ê§(1 2)‚ê§¬ª

[21:15] <discord-raku-bot> <Nemokosch> what is going on...

[21:15] <discord-raku-bot> <Nemokosch> yeah thanks

[21:16] <discord-raku-bot> <Nemokosch> Scalar is a simple thing; it's what I would just call "variable" in any other language I know

[21:17] <discord-raku-bot> <Nemokosch> you can wrap "anything" up into a Scalar

[21:18] <habere-et-disper> So a super-type for lack of a better word.

[21:19] <discord-raku-bot> <Nemokosch> it's a type that provides interface for mutation via assignments, and gives an entity to the underlying data

[21:19] <discord-raku-bot> <Nemokosch> an Array is not an entity in the sense a Scalar is

[21:20] <discord-raku-bot> <Nemokosch> you cannot decontainerize it further

[21:20] <discord-raku-bot> <Nemokosch> it's structurally not "one thing"

[21:21] <discord-raku-bot> <Nemokosch> it provides "an interface for mutation via assignments" but that interface is inherently fragmented

[21:21] <discord-raku-bot> <Nemokosch> an Array is kind of like a vector/grid of Scalars

[21:22] <discord-raku-bot> <Nemokosch> the individual elements can be decontainerized from the Scalars - but not the Array itself

[21:25] <habere-et-disper> So the Array is an immutable structure?

[21:26] *** discord-raku-bot left
[21:27] *** discord-raku-bot joined
[21:31] *** discord-raku-bot left
[21:31] *** discord-raku-bot joined
[21:33] <habere-et-disper> Thank you for the long explanation! :-)

[21:33] <habere-et-disper> I think I might hide until the hyperwhatever makes an appearance:

[21:33] <habere-et-disper> m: say [1, 2, [3]].flat; say [1, 2, [3]].[**];

[21:33] <camelia> rakudo-moar 2037ffbac: OUTPUT: ¬´(1 2 [3])‚ê§HyperWhatever in array index not yet implemented. Sorry.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:35] <discord-raku-bot> <Nemokosch> üòÇ

[21:35] <discord-raku-bot> <Nemokosch> by the way, is there a reason you have to use arrays in particular?

[21:36] <discord-raku-bot> <Nemokosch> as opposed to lists

[21:37] <habere-et-disper> No -- just trying to solve the set exercise whose tests have them.

[21:39] <discord-raku-bot> <Nemokosch> then I'd say just use lists - they are not a container type, and they do not wrap the items into scalars

[21:39] *** Kaipei joined
[21:45] <habere-et-disper> Thanks! Helpful. :-)

[23:02] *** habere-et-disper left
