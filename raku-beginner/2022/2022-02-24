[00:24] *** ismustachio joined
[00:28] *** ismustachio left
[02:07] *** ismustachio joined
[02:11] *** ismustachio left
[02:38] *** ismustachio joined
[02:42] *** ismustac1 joined
[02:44] *** ismustachio left
[03:00] *** ismustac1 left
[03:06] *** ismustac1 joined
[03:06] *** frost joined
[03:57] *** ismustac1 left
[08:25] <discord-raku-bot> <Jaguart#5082> A question on Raku foo/style. There are so many ways to do things, it makes Perl feel a little like a straight-jacket 😮

[08:25] <discord-raku-bot> <Jaguart#5082> m: ${ a => 1}.gist

[08:26] <discord-raku-bot> <Jaguart#5082> m: say ${ a => 1}.gist; say ${ a => 1}.raku

[08:27] <discord-raku-bot> <Jaguart#5082> Do you prefer to  initialise your hashes using the gist or the raku? and a hint as to why?

[08:29] <frost> m: a => 1

[08:29] <camelia> rakudo-moar d53b3ee83: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "a => 1" in sink context (line 1)␤Useless use of constant value a => 1 in sink context (line 1)␤»

[08:30] <frost> m: {a => 1}.say

[08:30] <camelia> rakudo-moar d53b3ee83: OUTPUT: «{a => 1}␤»

[08:34] <discord-raku-bot> <Jaguart#5082> @frost#6297 - oh yeah - sorry, unnecessary $ sigil, so you prefer  ``{ a => 1 }`` over ``{ :a(1) }``?

[08:34] <frost> I prefer a => 1

[08:34] <frost> it's more clear

[08:37] <discord-raku-bot> <Jaguart#5082> how about in function-sigs as per ``$o.do-things( $str, :tweak, :unordered )`` where newbie me is assuming that the ``:`` is actually a pair defaulted to boolean-True?

[08:38] <discord-raku-bot> <Jaguart#5082> vs ``$o.do-other( $str, tweak=>True, unordered=>True )``

[08:39] <frost> I like the shorter one :)

[08:41] <discord-raku-bot> <Jaguart#5082> Moving from  Perl I actually like the ``:`` pair distinction - less temptation to view ``=>`` as a fat-stringifying-comma. The extra brackets do feel a bit more effort though.

[08:46] <frost> in raku, you can choose the way you like in different places\

[08:55] <gfldex> m: say ‚123‘ ~~ m:2nd/\d/;

[08:55] <camelia> rakudo-moar d53b3ee83: OUTPUT: «｢2｣␤»

[08:55] <gfldex> that is the main reason to have colon pairs in Raku

[08:56] <gfldex> The other forms of colon pairs are desired side effects.

[09:00] <discord-raku-bot> <Jaguart#5082> so that's a pair in hiding? ``:2nd(/\d/)`` ??

[09:00] <gfldex> yes

[09:01] <discord-raku-bot> <Jaguart#5082> 🤯

[09:02] <gfldex> m: sub infix:<op>(\a, \b, *%_) { say "got pairs: $%_"; }; 1 op 2 :2nd :99problems;

[09:02] <camelia> rakudo-moar d53b3ee83: OUTPUT: «got pairs: nd   2␤problems      99␤»

[09:03] <discord-raku-bot> <Jaguart#5082> wow - I guess that means  ``Q:b 'Mind\nBlown'`` is actually a ``:b(True)``

[09:06] * gfldex .oO(:Raku defaults to True)

[09:06] <discord-raku-bot> <Jaguart#5082> hmmm I dont grok that... ``:2nd`` seems to become ``nd=>2``??

[09:06] <discord-raku-bot> <Nemokosch#9980> Yes, it does become that

[09:06] *** dakkar joined
[09:08] <discord-raku-bot> <Nemokosch#9980> If the value is a number, you can use it as a prefix of the key

[09:08] <discord-raku-bot> <Nemokosch#9980> So kg => 2 is :2kg in other words

[09:09] <gfldex> m: sub foo(:$th){ say $th; }; foo :5th, :6th;

[09:09] <camelia> rakudo-moar d53b3ee83: OUTPUT: «6␤»

[09:09] <gfldex> Please note that there is silent shadowing.

[09:11] <gfldex> m: sub foo(:$th){ say $th; }; foo :5th:6th;

[09:11] <camelia> rakudo-moar d53b3ee83: OUTPUT: «6␤»

[09:12] <gfldex> Also, the comma is optional.

[09:12] <gfldex> m: dd :R:a:k:u;

[09:12] <camelia> rakudo-moar d53b3ee83: OUTPUT: «:R␤:a␤:k␤:u␤»

[09:12] <frost> m: say :5th:6th

[09:12] <camelia> rakudo-moar d53b3ee83: OUTPUT: «␤»

[09:13] <jaguart> what is 'silent shadowing'?

[09:13] <gfldex> m: say (:R:a:k:u).pairs;

[09:13] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(0 => R => True 1 => a => True 2 => k => True 3 => u => True)␤»

[09:14] <gfldex> in :5th:6th th => 6 will discard th => 5. The last one wins.

[09:15] <jaguart> so it's like a hash rather than two pairs

[09:15] <gfldex> yes

[09:16] <gfldex> m: say (my method me(){}).signature;

[09:16] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(Mu: *%_)␤»

[09:16] <gfldex> In fact, they end up in a hash for methods.

[09:16] <jaguart> Wow - I can see a whole new raft of bugs opening up before my eyes... :)

[09:17] <gfldex> In practice, this seems not to matter.

[09:17] <jaguart> I'm already learning to hate ``%h<<$var>>`` for returning slices - clearly my ``<<>>`` foo is not groked yet

[09:18] <jaguart> hmmm - is that showing a default method signture - slurpy hash of Mu?

[09:19] <gfldex> yes

[09:19] <jaguart> Im still considering two successive pairs with the same name folding into one :o

[09:20] <gfldex> m: say {;}.signature; (class C {}).^mro.say;

[09:20] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(;; $_? is raw = OUTER::<$_>)␤((C) (Any) (Mu))␤»

[09:20] <gfldex> Raku is basically an assortment of defaults. :)

[09:21] <discord-raku-bot> <Nemokosch#9980> What is %h<<$var>>

[09:23] <jaguart> ``%h<<$k>>`` works better as ``%h{$k}`` - esp when $k contains spaces - took me an hour to debug that <<$k>> was returning a slice of Any,Any,Any rather than the value I was looking for.

[09:24] <jaguart> Thank you all - you have raised my Raku - and eyebrows by at least a foot!

[09:24] <gfldex> m: my %h is default(Nil); my $stuffzs = 1,2,3; dd %h«$stuffzs»;

[09:24] <camelia> rakudo-moar d53b3ee83: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 3 in sink context (lines 1, 1)␤Useless use of constant integer 2 in sink context (lines 1, 1)␤Nil %h{'1'} = Nil␤»

[09:25] <gfldex> m: my %h is default(Nil); my $stuffzs = (1,2,3); dd %h«$stuffzs»;

[09:25] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(Nil, Nil, Nil)␤»

[09:25] <gfldex> m: my %h is default(Failure.new('bad‼')); my $stuffzs = (1,2,3); dd %h«$stuffzs»;

[09:25] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(Failure.new(exception => X::AdHoc.new(payload => "bad‼"), backtrace => Backtrace.new), Failure.new(exception => X::AdHoc.new(payload => "bad‼"), backtrace => Backtrace.new), Failure.new(exception => X::AdHoc.new(payload => "bad‼"), backtrace =>…»

[09:26] <gfldex> Any is the default default. If that is not useful in your usecase, you are free to change the default.

[09:27] <jaguart> It was more like:

[09:27] <jaguart> m: my $k='a b c';my %h = ( 'a b c' => 'yeah');say %h<<$k>>;say %h{$k};

[09:27] <camelia> rakudo-moar d53b3ee83: OUTPUT: «((Any) (Any) (Any))␤yeah␤»

[09:28] <jaguart> so more that I was getting a slice of Nil when I was using keys with spaces

[09:29] <jaguart> oh I like your slice of Failures - nice

[09:30] <gfldex> Sadly, the stacktrace doesn't point to the right place.

[09:31] <gfldex> And is default() doesn't take a callable. What I would really like it to take.

[09:34] <jaguart> :pray: Many thanks for the light. As its nearly bed-time in Australia, I shall dream of butterflies

[09:36] <frost> m: my $l = 'a b c'; say <<$l>>

[09:36] <camelia> rakudo-moar d53b3ee83: OUTPUT: «(a b c)␤»

[09:36] <frost> m: my $l = 'a b c'; .say for  <<$l>>

[09:36] <camelia> rakudo-moar d53b3ee83: OUTPUT: «a␤b␤c␤»

[09:37] <gfldex> If you think in functional terms, a lot of stuff makes sense in Raku.

[11:33] *** ismustac1 joined
[11:37] *** ismustac1 left
[13:52] *** frost left
[14:08] *** ismustac1 joined
[14:16] *** ismustac1 left
[14:18] *** ismustac1 joined
[14:54] *** ismustac1 left
[14:55] *** ismustac1 joined
[15:52] <guifa> jaguart thankfully, few people use %foo«$bar» in practice.  Personally (and most I know) tend to still use %foo{$bar}.  guillomets are tough for anyone to type if it's not on their keyboard, and actual double < > takes up too much space XD

[16:46] <lizmat> jaguart: version 0.0.9 of Zef::Configuration  now supports: zef-configure add-repository tag url --name="Longer name for repo"

[16:46] <lizmat> jaguart: and also: zef-configure remove-repository tag

[16:51] <lizmat> people should now be set to create their own (company) ecosystem to work with Raku

[17:24] *** ismustac1 left
[17:27] *** ismustac1 joined
[17:37] *** dakkar left
[17:40] *** ismustac1 left
[17:49] *** ismustac1 joined
[19:40] *** ismustac1 left
[19:59] *** ismustac1 joined
[21:14] *** ismustac1 left
[21:23] *** ismustac1 joined
[21:59] *** ismustac1 left
[22:25] *** ismustac1 joined
[22:30] *** ismustac1 left
[23:04] *** ismustac1 joined
[23:09] *** ismustac1 left
