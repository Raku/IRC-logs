[00:11] <discord-raku-bot> <stevied#8273> is there any documentation that talks about the arrays as arguments?

[00:13] <discord-raku-bot> <Nemokosch#9980> you mean @ containers or really just arrays?

[00:15] <discord-raku-bot> <stevied#8273> i don't know. anything that provides a clear explanation for the reason behind the behavior

[00:17] <discord-raku-bot> <Nemokosch#9980> üò¨

[00:29] <discord-raku-bot> <stevied#8273> https://stackoverflow.com/questions/70779446/why-are-arrays-passed-as-arguments-mutable-but-strings-are-not

[00:29] <discord-raku-bot> <stevied#8273> let's see what people chime in with

[00:36] <discord-raku-bot> <Nemokosch#9980> üòÑ

[00:44] <discord-raku-bot> <Yeuph#9974> I'll be finished going through the course.raku.org Raku course soon.  Are there other recommended materials that a person with no significant coding knowledge (beyond the aforementioned Raku course) should/could continue along?

[00:48] <discord-raku-bot> <stevied#8273> there's also this: https://raku.guide @Yeuph#9974

[00:49] <discord-raku-bot> <Yeuph#9974> ty ty

[00:55] <discord-raku-bot> <stevied#8273> @Nemokosch#9980 I think this has something to do with containers, which I don't quite understand despite reading the docs on it twice now

[01:07] <discord-raku-bot> <stevied#8273> ok, it's spelled out here: https://docs.raku.org/language/containers#Scalar_containers_and_listy_things

[01:07] <discord-raku-bot> <stevied#8273> "an array...forces all it's elements to be containers"

[01:08] <discord-raku-bot> <stevied#8273> "An Array is just like a list, except that it forces all its elements to be containers, which means that you can always assign to elements:"

[01:10] <discord-raku-bot> <stevied#8273> and if you want the array to behave like a scalar (non-mutable), you do something like:

[01:10] <discord-raku-bot> <stevied#8273> `my @a := (1, 2, 3);`

[01:20] <discord-raku-bot> <stevied#8273> I think I'm starting to get it

[01:21] <discord-raku-bot> <stevied#8273> you can do this:

[01:21] <discord-raku-bot> <stevied#8273> ```

[01:21] <discord-raku-bot> <stevied#8273> sub blah ($arg) { $arg; }

[01:21] <discord-raku-bot> <stevied#8273> my @array = 1, 2, 3;

[01:21] <discord-raku-bot> <stevied#8273> blah @array;

[01:21] <discord-raku-bot> <stevied#8273> say @array;

[01:21] <discord-raku-bot> <stevied#8273> ```

[01:21] <discord-raku-bot> <stevied#8273> the blah function will be called but $arg is immutable and you can't change @array

[01:21] <discord-raku-bot> <stevied#8273> but even though it's a scalar, it behaves like an array

[01:23] <discord-raku-bot> <stevied#8273> actually, not quite right. you can still change the elements of the array

[02:35] <guifa> to answer the core quesion: pass as a list: $arg is immutable, but you can still call methods on @array

[02:35] <guifa> errr

[02:35] <guifa> just "$arg is immutable, but you can still call methods on @array"

[02:39] <guifa> you'd expect sub foo(Str $a) {¬†$a.substr(0,1) }¬†to work, right?  returning the first letter of the string

[02:48] <discord-raku-bot> <stevied#8273> but I *think* the reason why `sub blah($str)` is immutable is because `$str` is *bound* to the argument that is passed

[02:48] <discord-raku-bot> <stevied#8273> in `sub blah(@array)`, @array is also bound to the argument, but the array itself is mutable

[02:49] <discord-raku-bot> <stevied#8273> i don't know yet. I'm doing more reading on this until I get my head totally unwrapped around it.

[02:51] *** frost joined
[02:54] <discord-raku-bot> <stevied#8273> wrapped

[03:11] <jaguart> I know I'm heading for a Doh! moment - how do I call IO.f on $_? my @files = @names.grep( $_.IO.f );gives No such method 'IO' for invocant of type 'Any'.

[03:16] <jaguart> doh: my @files = @names.grep({ .IO.f  }); - it's a grep-block-argh thingy

[04:24] <CIAvash> jaguart: you can write `.grep(*.IO.f)`

[04:43] *** frost left
[05:04] *** frost joined
[05:41] *** frost left
[06:04] *** frost joined
[07:10] *** frost left
[08:23] *** frost joined
[08:31] <discord-raku-bot> <Nemokosch#9980> Or you can write `{.IO.f}` inside the grep

[08:31] <discord-raku-bot> <Nemokosch#9980> You need the block

[09:09] *** dakkar joined
[09:11] *** frost left
[10:54] *** frost joined
[11:19] *** frost left
[14:54] *** discord-raku-bot left
[14:54] *** discord-raku-bot joined
[15:04] *** frost joined
[15:05] *** discord-raku-bot left
[15:08] *** discord-raku-bot joined
[15:12] *** discord-raku-bot left
[15:13] *** discord-raku-bot joined
[15:35] *** frost left
[15:58] *** MasterDuke left
[16:14] *** MasterDuke joined
[17:34] *** dakkar left
[19:59] <discord-raku-bot> <stevied#8273> reading: https://docs.raku.org/type/Scalar. the first example: `say |(1,2,$(3,4)); ` makes no difference with or without the `$`

[19:59] <discord-raku-bot> <stevied#8273> I get the same output

[20:02] <discord-raku-bot> <Nemokosch#9980> m: say |(1,2,$(3,4));

[20:02] <discord-raku-bot> <Nemokosch#9980> say |(1,2,(3,4));

[20:02] <lizmat> that's because the stringification hides the differencw

[20:02] <lizmat> m: say |(1,2,$(3,4));

[20:02] <camelia> rakudo-moar 284b56232: OUTPUT: ¬´12(3 4)‚ê§¬ª

[20:02] <lizmat> m: dd |(1,2,$(3,4));

[20:02] <camelia> rakudo-moar 284b56232: OUTPUT: ¬´1‚ê§2‚ê§$(3, 4)‚ê§¬ª

[20:03] <discord-raku-bot> <Nemokosch#9980> m: say |(1,2,(3,4));

[20:03] <discord-raku-bot> <stevied#8273> ok, thanks

[20:03] <discord-raku-bot> <Nemokosch#9980> maybe this isn't a good example then

[20:04] <lizmat> if that was taken from the docs, then maybe a doc issue is in place

[20:04] <discord-raku-bot> <Nemokosch#9980> yes, it was

[21:04] *** MasterDuke left
[21:21] *** MasterDuke joined
