[00:12] *** deoac joined
[00:13] <deoac> Has anyone considered adding `either` to `none`, `any`, `one`, and `all` ?

[00:36] <guifa> What would either do?

[00:37] <guifa> is that just all/or with a two item list?

[01:03] <discord-raku-bot> <Nemokosch> controversial(?) take: we need *less* English in junctions, not more

[01:07] <discord-raku-bot> <Nemokosch> "one" and "all" are mathematically precise enough to be universally useful

[01:08] <discord-raku-bot> <Nemokosch> with "none", I'm more or less okay with, it can be a legitimate option

[01:08] <discord-raku-bot> <Nemokosch> but "any" is just too vague as a word for... well, anything üòÜ

[01:11] <discord-raku-bot> <Nemokosch> one day, I will hopefully get to writing a "petition to remove negation lifting", and then I will definitely include the vagueness of "any" as one of the arguments against the status quo

[04:00] *** razetime joined
[04:30] *** Heptite left
[04:35] *** Heptite joined
[04:48] *** MasterDuke joined
[04:57] *** Heptite left
[05:02] *** Heptite joined
[05:07] *** Heptite left
[05:22] <jaguart> um: Cannot find method 'find_method' on object of type NQPParametricRoleHOW

[05:22] <jaguart> from: if $what.HOW ~~ Metamodel::AttributeContainer

[05:35] <jaguart> and: if $what.HOW.does(Metamodel::AttributeContainer) ===> Too few positionals passed; expected 3 arguments but got 2

[05:41] *** deoac left
[06:25] <Kaiepi> jaguart, try Metamodel::Primitives.is_type: $what.HOW, Metamodel::AttributeContainer

[06:25] <Kaiepi> NQPParametricRoleHOW backs nqp's roles. it's bare to the point of not being Mu or having its ACCEPTS method needed for a smartmatch

[06:26] <Kaiepi> or even being able to locate such a method

[06:57] <CIAvash> what Kaiepi said and maybe `$what.HOW.does: $what.HOW, Metamodel::AttributeContainer` or `$what.HOW.^does: Metamodel::AttributeContainer`. Also how is Metamodel related to #raku-beginner?

[08:29] *** razetime left
[08:39] <jaguart> CIAvash: thanks - I guess it's beginner because I am trying to understand how modules and classes work in Raku? and this is for my introspection exercise

[08:45] <jaguart> Kaiepi: thanks, works :)

[09:03] *** dakkar joined
[09:03] *** alethkit left
[09:09] <jaguart> This fails: $what.WHO<EXPORT>:exists -> but this works: $what.WHO.EXISTS-KEY(<EXPORT>) - I thought $what.WHO returned the stash - where am I going wrong?

[09:11] <discord-raku-bot> <Nemokosch> What CIAvash asked... sure this is beginner stuff? üòÖ

[09:13] <jaguart> I get confused by what I think is and adverb test on a hash not working vs calling a .EXISTS-KEY() - so I'm thinking hash access is beginner /shrug?

[09:14] <jaguart> should I move this to the #raku then?

[09:15] <discord-raku-bot> <Nemokosch> re adverb - in what context did that appear? adverbs have notoriously low precedence

[09:16] <jaguart> am I using wrong term? in ' $what.WHO<EXPORT>:exists' I was calling :exists the adverb

[09:16] <discord-raku-bot> <Nemokosch> yes, I mean is this the whole expression in appeared in?

[09:17] <discord-raku-bot> <Nemokosch> say there was an infix ~ in front of it - that would probably already hijack the adverb

[09:18] <jaguart> its a simple trailing-if - {...} if $what.WHO<EXPORT>:exists;

[09:19] <discord-raku-bot> <Nemokosch> now that's interesting

[09:19] <jaguart> what confuses me is that is false, but this works as expected:  {...} if $what.WHO.EXISTS-KEY(<EXPORT>);

[09:19] <discord-raku-bot> <Nemokosch> m: class Foo { has %.bar }; my $instance = Foo.new: bar => {a => 'bee' }; say $instance.bar<a>:exists;

[09:20] <jaguart> maybe because .WHO is a macroish thing?

[09:20] <discord-raku-bot> <Nemokosch> this works for me

[09:21] <discord-raku-bot> <Nemokosch> what type does it return?

[09:23] <dakkar> m: class Foo { our $thing }; say "ok" if Foo.WHO<$thing>:exists;

[09:23] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´ok‚ê§¬ª

[09:23] <dakkar> m: class Foo { our $thing }; say "ok" if Foo.WHO<$wrong>:exists;

[09:23] <camelia> rakudo-moar d52342eb0: ( no output )

[09:23] <dakkar> jaguart: like that?

[09:24] <jaguart> interesting, when I make a one-liner it works - let me dig deeper in my module

[09:24] <jaguart> m:  module Foo { sub bar () is export {...} }; my $f = Foo; say $f.WHO<EXPORT>:exists; say $f.WHO.EXISTS-KEY(<EXPORT>);

[09:24] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[09:25] <discord-raku-bot> <Nemokosch> I swear this is gonna be some adverb gotcha

[09:25] <dakkar> whatever your module is doing, I agree that `:exists` and `.EXISTS-KEY` should agree

[09:30] <jaguart> ok must have been a misstype - now it works, argh

[09:30] <dakkar> all's well that ends well üòú

[09:31] <discord-raku-bot> <Nemokosch> well I was almost right about the adverb gotcha xd

[09:32] <jaguart> I'll remember to blame adverbs just after bad-fingers

[09:33] <discord-raku-bot> <Nemokosch> well not sure how a misstype should change True to False

[09:33] <discord-raku-bot> <Nemokosch> unless it's one ! more or less üòÑ

[09:34] <jaguart> given a reference to a package, is there a way to access the package stash without EVAL ? I can do this: EVAL( $what.WHO ~ "::EXPORT::.keys" )

[09:35] <jaguart> actually even easier - is there an interface that enumerates the EXPORTS of a Module/Package?

[09:36] <discord-raku-bot> <Nemokosch> I don't know but do you know about :: as an operator?

[09:36] <jaguart> and then I also want an interface that enumerates the roles of a Class or instance?

[09:37] * jaguart rushes to find :: in the docs...

[09:38] <jaguart> interesting - I guess you mean https://docs.raku.org/language/packages#Interpolating_into_names - i.e. lookup details from the GLOBAL stash ::

[09:39] <jaguart> oh - it says this is not global namespace lookup... thanks for the pointer, I will explore this

[09:39] <discord-raku-bot> <Nemokosch> not sure it's really an "operator" but one thing is sure - you can access any stash with this postfix :: syntax

[09:39] <discord-raku-bot> <Nemokosch> iirc this postfix :: is exactly the same as .WHO, just nicer

[09:40] <discord-raku-bot> <Nemokosch> Did I mention that workshop from Vadim 2021?

[09:40] <discord-raku-bot> <Nemokosch> This is also something I've seen in that video.

[09:48] <jaguart> you did - I have it bookmarked to watch

[09:49] <jaguart> This is nicer than .WHO :)))

[09:57] <discord-raku-bot> <Nemokosch> anyway, supposedly ::asd is simply a hash lookup on WHO

[10:16] <dakkar> uh‚Ä¶

[10:16] <dakkar> m: module Foo { sub x is export {} };Foo::EXPORT()

[10:16] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant value Foo::EXPORT() in sink context (line 1)‚ê§¬ª

[10:16] <dakkar> m: module Foo { sub x is export {} };say Foo::EXPORT()

[10:16] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´(EXPORT(Any))‚ê§¬ª

[10:16] <dakkar> m: module Foo { sub x is export {} };say Foo::WHO<EXPORT>()

[10:16] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´Could not find symbol '&WHO' in 'Foo'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:16] <dakkar> m: module Foo { sub x is export {} };say Foo.WHO<EXPORT>()

[10:16] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´Unexpected named argument 'no_fallback' passed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:16] <dakkar> that looks like a bug to me

[10:17] <dakkar> m: module Foo { sub x is export {} };say Foo.WHO<&EXPORT>()

[10:17] <camelia> rakudo-moar d52342eb0: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:18] <dakkar> I'm getting confused‚Ä¶ /me leaves

[10:20] <discord-raku-bot> <Nemokosch> the last one was clear, at least

[10:20] <discord-raku-bot> <Nemokosch> you looked up something that didn't exist and therefore got Any back

[10:21] <discord-raku-bot> <Nemokosch> also, Foo::EXPORT appears to be a type object, the returned value for Foo::EXPORT() hints that it's taken as a type annotation

[10:22] <discord-raku-bot> <Nemokosch> m: module Foo { sub x is export {} };say Foo.WHO<EXPORT()>

[10:22] <discord-raku-bot> <Nemokosch> I'm curious

[10:22] <discord-raku-bot> <Nemokosch> okay, this lookup didn't work out

[10:22] <discord-raku-bot> <Nemokosch> anyway, this is the only one that seemed downright bizarre, with that obscure message

[10:35] <jaguart> m: module Foo { sub x is export {} };say Foo.WHO<EXPORT>.HOW

[10:35] <camelia> rakudo-moar 7d4c4ae07: OUTPUT: ¬´Perl6::Metamodel::PackageHOW.new‚ê§¬ª

[10:35] <jaguart> So Foo.WHO<EXPORT> is a package namespace

[10:37] <jaguart> m: module Foo { sub x is export {} };say Foo.WHO<EXPORT>.HOW; say Foo.WHO<EXPORT>{::}.keys

[10:37] <camelia> rakudo-moar 7d4c4ae07: OUTPUT: ¬´Perl6::Metamodel::PackageHOW.new‚ê§(0 1 2 3 4 5 6 7 8 9 10 11)‚ê§¬ª

[10:37] <jaguart> and I have no idea what that is

[10:37] <discord-raku-bot> <Nemokosch> with the parens, it's a coercion

[10:38] <jaguart> into a stash?

[10:38] * jaguart calls it a night - he has Slow Horses to catch

[10:40] <discord-raku-bot> <Nemokosch> m: module Foo { sub x is export {} };say Foo.WHO<EXPORT>.HOW; say Foo::EXPORT().HOW

[10:40] <discord-raku-bot> <Nemokosch> > No such method 'gist' for invocant of type'Perl6::Metamodel::CoercionHOW'

[10:42] <discord-raku-bot> <Nemokosch> > Foo.WHO<EXPORT>{::}.keys

[10:42] <discord-raku-bot> <Nemokosch> I don't know enough to break _that_ down, that's for sure

[10:43] <discord-raku-bot> <Nemokosch> the {::} part, in particular

[12:41] *** dakkar left
[12:42] *** dakkar joined
[13:27] <deadmarshal> I don't understand how to work with the all function of Raku. I want to return -1 if all list elements are odd. something like: return -1 if so @arr.all !%% 2;

[13:28] <deadmarshal> In Perl it would be: return -1 if all {$_ % 2 != 0} @$arr;

[13:33] <discord-raku-bot> <Nemokosch> YES, that's why I want to write that petition, EXACTLY

[13:34] <discord-raku-bot> <Nemokosch> by the way, are you an English native? because that would be double irony if you even are

[13:40] *** mcmillhj joined
[13:44] <discord-raku-bot> <Nemokosch> the "official" answer is that @arr.none %% 2 will work right

[13:45] <discord-raku-bot> <Nemokosch> the "unofficial" answer is that we are facing a deliberate misdesign of negation from Larry Wall

[13:46] <discord-raku-bot> <Nemokosch> and "all !%% 2" is silently rephrased into "! all %% 2"

[13:46] <discord-raku-bot> <Nemokosch> which I think has bitten WAY too many people to be tolerable

[14:12] <deadmarshal> thank u

[15:37] *** Heptite joined
[16:02] *** mcmillhj left
[17:16] *** jaguart left
[17:37] *** dakkar left
[23:44] *** jaguart joined
[23:44] *** jaguart left
[23:45] *** jaguart joined
