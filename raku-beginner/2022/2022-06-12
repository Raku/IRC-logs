[07:27] *** frost joined
[07:37] *** Da-ding joined
[07:54] <Da-ding> Hi folks

[07:54] <Da-ding> Why does `for` treat a hash's value as singular, while `map` treats it as plural?

[07:54] <Da-ding> ```

[07:54] <Da-ding> > my %h = A => (1,2)

[07:54] <Da-ding> {A => (1 2)}

[07:54] <Da-ding> > for %h<A> {.say}

[07:54] <Da-ding> (1 2)

[07:54] <Da-ding> > %h<A>.map({.say})

[07:54] <Da-ding> 1

[07:54] <Da-ding> 2

[07:54] <Da-ding> (True True)

[07:54] <Da-ding> ```

[07:54] <Da-ding> Also, if I wrap the Hash in an array I can't seem to get `map` working with it:

[07:54] <Da-ding> ```

[07:54] <Da-ding> > my @a = [{A => (1,2),},];

[07:54] <Da-ding> [{A => (1 2)}]

[07:54] <Da-ding> > for @a { for $_.<A> { say $_ } }

[07:54] <Da-ding> (1 2)

[07:55] <Da-ding> Hi folks

[07:55] <Da-ding> Why does `for` treat a hash's value as singular, while `map` treats it as plural?

[07:55] <Da-ding> `

[07:55] <Da-ding> > my %h = A => (1,2)

[07:55] <Da-ding> {A => (1 2)}

[07:55] <Da-ding> > for %h<A> {.say}

[07:55] <Da-ding> (1 2)

[07:55] <Da-ding> > %h<A>.map({.say})

[07:55] <Da-ding> 1

[07:55] <Da-ding> 2

[07:55] <Da-ding> (True True)

[07:55] <Da-ding> `

[07:55] <Da-ding> Also, if I wrap the Hash in an array I can't seem to get `map` working with it:

[07:55] <Da-ding> `

[07:55] <Da-ding> > my @a = [{A => (1,2),},];

[07:55] <Da-ding> [{A => (1 2)}]

[07:55] <Da-ding> > for @a { for $_.<A> { say $_ } }

[07:55] <Da-ding> (1 2)

[07:55] *** discord-raku-bot left
[07:56] *** discord-raku-bot joined
[08:04] *** discord-raku-bot left
[08:04] *** discord-raku-bot joined
[08:33] <discord-raku-bot> <Nemokosch#9980> seems like a lot of "spamming"

[08:33] <discord-raku-bot> <Nemokosch#9980> please use github gists (or some other code pasting platorm you prefer) if you want to write multiple lines of code at once

[08:33] <discord-raku-bot> <Nemokosch#9980> anyway, I think I can answer this one

[08:34] *** Nemokosch joined
[08:36] <Nemokosch> so

[08:36] <Nemokosch> m: my %h = A => (1,2); dd %h;

[08:36] <camelia> rakudo-moar 750487c6b: OUTPUT: ¬´Hash %h = {:A($(1, 2))}‚ê§¬ª

[08:36] <Nemokosch> m: my %h = A => (1,2); dd %h<A>;

[08:36] <camelia> rakudo-moar 750487c6b: OUTPUT: ¬´List %h = $(1, 2)‚ê§¬ª

[08:36] <Nemokosch> what does this tell us? That %h<A> is treated as a Scalar.

[08:38] *** frost left
[08:39] <Nemokosch> What happens if you treat something as a Scalar? For one, it will be iterated as one entry in a for loop.

[08:39] <Nemokosch> m: .say for $(1, 2, 3, 4)

[08:39] <camelia> rakudo-moar 750487c6b: OUTPUT: ¬´(1 2 3 4)‚ê§¬ª

[08:41] <Nemokosch> On the other hand, the map method only cares whether your stuff is Iterable or not

[08:43] *** frost joined
[08:44] <Nemokosch> m: my $list = (1,2,3,4); dd $list; $list.map: *.say;

[08:44] <camelia> rakudo-moar 750487c6b: OUTPUT: ¬´List $list = $(1, 2, 3, 4)‚ê§1‚ê§2‚ê§3‚ê§4‚ê§¬ª

[08:45] <Nemokosch> I think this is because of this signature: > multi method map(Iterable:D \iterable)

[08:46] <Nemokosch> \iterable indicates that we drop the container altogether and rom that point on, they are all just iterables

[08:46] <Nemokosch> however, this doesn't seem to be the behavior if you use map as a "standalone function"

[08:47] <Nemokosch> m: map *.say, $(1, 2, 3, 4)

[08:47] <camelia> rakudo-moar 750487c6b: OUTPUT: ¬´(1 2 3 4)‚ê§¬ª

[08:48] <Nemokosch> the signature is: > multi sub map(&code, +values)

[08:52] <Nemokosch> And I didn't get this:

[08:52] <Nemokosch> > Also, if I wrap the Hash in an array I can't seem to get map working with it:

[08:52] <Nemokosch> I see no map in the example

[08:53] <Nemokosch> Da-ding: whatcha say my man ^^

[08:57] *** Nemokosch left
[08:57] <Da-ding> Excellent, thank you

[08:58] <Da-ding> Sorry about posting twice. I'll be sure to use Gists etc next time

[09:00] <discord-raku-bot> <Da-ding!#0657> I'll play around with `dd` and see how I go solving the second half (with the missing `map`)

[09:00] <discord-raku-bot> <Nemokosch#9980> By the way

[09:00] <discord-raku-bot> <Nemokosch#9980> what are you trying to achieve?

[09:02] <discord-raku-bot> <Da-ding!#0657> I'm iterating over a block of JSON to parse a bunch of dependencies for another tool. It's an array of packages, which each have an array of dependency IDs

[09:03] <discord-raku-bot> <Da-ding!#0657> Because the actual tasks was pretty minimal, I'm trying to stick with just a few nested blocks and using `$_`, which is where my plurality access issues are coming into it

[09:04] <discord-raku-bot> <Nemokosch#9980> if you want it to act as a positional (so basically list-like), you can prefix it with @

[09:05] <discord-raku-bot> <Nemokosch#9980> I wonder if the bot works now from this end

[09:05] <discord-raku-bot> <Nemokosch#9980> m: say 'Hello'

[09:06] <discord-raku-bot> <Nemokosch#9980> okay, very nice

[09:07] <discord-raku-bot> <Da-ding!#0657> Sweet, that does the job

[09:08] <discord-raku-bot> <Da-ding!#0657> I was using `$_.<dependencies[*]` as a workaround but I presume that's much less ideal than `@($_.<dependencies>)` ?

[09:09] <discord-raku-bot> <Nemokosch#9980> first off, I think you can get used to just dropping $_ when you make method calls to it

[09:09] <discord-raku-bot> <Nemokosch#9980> `.<dependencies>` is just fine

[09:10] <discord-raku-bot> <Nemokosch#9980> second, I think [*] is a proper slice - if I were to guess, it takes up extra memory - however, you might gave a good idea

[09:10] <discord-raku-bot> <Nemokosch#9980> the so-called zen-slice might work here

[09:10] <discord-raku-bot> <Nemokosch#9980> so `.<dependencies>[]`

[09:10] <discord-raku-bot> <Nemokosch#9980> I would give it a try

[09:12] <discord-raku-bot> <Da-ding!#0657> Nice, thank you very much

[09:12] <discord-raku-bot> <Nemokosch#9980> from what I know, the zen-slice is also just a kind of context assurance thing

[09:12] <discord-raku-bot> <Nemokosch#9980> so it doesn't create a copy or anything

[09:14] <discord-raku-bot> <Nemokosch#9980> no problem üôÇ

[09:50] *** Kaipii left
[09:50] *** Kaipii joined
[10:32] *** Da-ding left
[10:57] *** frost left
[11:13] *** frost joined
[11:38] *** frost left
[11:42] *** frost joined
[12:46] *** frost left
[12:47] *** frost joined
[12:55] <discord-raku-bot> <stevied#8273> anyone having problems getting the grammar preview working in comma IDE? I have the paid version.

[14:31] *** frost left
[21:53] *** Kaipii left
[21:53] *** Kaipii joined
[21:59] *** n1to joined
[21:59] *** n1to left
[22:14] *** deadmarshal left
[22:18] *** deadmarshal joined
[23:02] *** Kaipii left
[23:57] *** Kaiepi joined
