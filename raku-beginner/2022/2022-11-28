[00:51] *** sgrs left
[03:04] *** Kaiepi joined
[05:53] *** Heptite left
[06:46] *** ToddAndMargo joined
[06:49] <ToddAndMargo> I posted my questions over on https://pastebin.com/xWr3JTS1

[06:57] <Kaiepi> ToddAndMargo, you'd be in for a read but those are all to do with parameters/signatures. the "Sigil" and "Twigil" sections of https://docs.raku.org/language/variables, then "Signature literals" in https://docs.raku.org/type/Signature should cover your bases in that whereabouts

[07:00] <ToddAndMargo> Thank you for the links.  Is there any chance of answer the specific questions I asked?

[07:02] <Kaiepi> describing the parameters would help narrow things down a bit

[07:03] <Kaiepi> Pointer:D \ptr makes a sigilless positional of type Pointer:D (:D constraining Pointer to an instance)

[07:03] <ToddAndMargo> Line 93  https://github.com/salortiz/NativeHelpers-Blob/blob/master/lib/NativeHelpers/Blob.pm6

[07:03] <Kaiepi> `Int :$elems!` is a required named parameter

[07:04] <Kaiepi> `Blob:U :$type` is an optional named parameter that constrains to type objects with :U and defaults to Buf when a value is absent

[07:05] <ToddAndMargo> What does `:D constraining Pointer to an instance)` mean?

[07:05] <ToddAndMargo> What does `:` in `:$elems` do?

[07:06] <ToddAndMargo> what does the `!` in `:$elems!` do?

[07:06] <Kaiepi> Pointer considers both a Pointer type object and its instances valid

[07:07] <ToddAndMargo> What do you mean by "instances"

[07:07] <Kaiepi> .new makes an instance

[07:07] <ToddAndMargo> what is the "\" doing?

[07:07] <Kaiepi> `\` is marking a sigilless parameter

[07:08] <Kaiepi> `:` marks a named parameter

[07:08] <Kaiepi> `!` marks a required parameter

[07:08] <ToddAndMargo> ".new"? This is a parameter passed to a sub.  What happends to the data being passed if a new instance is being created?

[07:08] <Kaiepi> no new instance is being created, it expects the argument to be one

[07:08] <ToddAndMargo> What is a "sigilless parameter"

[07:09] <ToddAndMargo> what is a "named parameter"?

[07:11] <ToddAndMargo> Oh, if you do not use "!" the user can skip putting something in the value?

[07:11] <Kaiepi> the links explain this stuff in better detail than i could off the top of my head

[07:11] <Kaiepi> like with "!" the answer is "depends"

[07:14] <ToddAndMargo> both link are way over my head

[07:17] <ToddAndMargo> for instance https://docs.raku.org/language/variables#Sigilless_variables "Using the \ prefix, it's possible to create variables that do not have a sigil:"  than at teh top of teh link, it states: "There are four sigils. The scalar-sigil $, the positional-sigil @, the associative-sigil % and the callable-sigil &.".  I use the first three all the

[07:17] <ToddAndMargo> time.  Is teh "\" a way of telling Raku "I don't have any idea what this is"?  And how does Raku figure it out?

[07:21] <Kaiepi> more or less, yeah

[07:21] <Kaiepi> i'm not sure on the specifics on how rakudo typechecks those

[07:22] <ToddAndMargo> So Raku gets to figure it depending on what you feed \ptr?

[07:22] <Kaiepi> yeah

[07:24] <ToddAndMargo> And the "!".  I though yo could only get away with leaving off a parameter on teh last parameter   Sum x( Str $a, Str $b, Bool $c= False).  What was "!" used on teh center parameter?

[07:24] <ToddAndMargo> What should have been why

[07:26] <ToddAndMargo> \ptr is just a 64 bit cardinal (uint64) in this sub.  Raku is just going to think it is a cardinal?  And not know it is NativeCall Pointer?

[07:27] <ToddAndMargo> "no new instance is being created, it expects the argument to be one" does that mean the variable has only been touched once?

[07:32] <Kaiepi> objects track information pertaining to their type. a Pointer knows its a Pointer, and a Pointer.new knows it's an instance of Pointer and not Pointer itself

[07:33] <Kaiepi> not sure what you mean by touched, or leaving off the last parameter

[07:42] <ToddAndMargo> Sub x( Str $a, Str $b, Bool $c= False).   x("aa","bb")   leaves off the last parameter.  How is it that you would leave off the middle parameter?

[07:42] <ToddAndMargo> instance

[07:42] <ToddAndMargo> ĭn′stəns

[07:42] <ToddAndMargo> noun

[07:42] <ToddAndMargo>     An example that is cited to prove or invalidate a contention or illustrate a point. synonym: example.

[07:42] <ToddAndMargo>     A case or an occurrence.

[07:42] <ToddAndMargo>     A step in a process or series of events.

[07:43] <Kaiepi> you could write `Str $b?` to make it Str when left out, or give it a different default with `=`

[07:43] <Kaiepi> named parameters imply `?`, while positionals imply `!`

[07:44] <ToddAndMargo> What is Raku's meaning for "instance"?

[07:44] <ToddAndMargo> so I could write x("aab", True) and not get the finger wagged at me?

[07:45] <Kaiepi> https://docs.raku.org/language/glossary#index-entry-instance

[07:46] <Kaiepi> you wouldn't be able to write that, but you could write x("aab") or x("aab", "ccd") or x("aab", "ccd", True)

[07:46] <ToddAndMargo> I am confused.  "Str" defines/confines the type of the structure.  "=" set a adefault value of the structure.  It seems you are using them interchangeably?

[07:48] <ToddAndMargo> https://docs.raku.org/language/glossary#index-entry-instance  "An instance of a class is also called an object in some other programming languages"  IN Raku, I call (maybe wrongly) a structure created from a OOP class an "object".  Is it also called an "instance"

[07:48] <ToddAndMargo> ?

[07:48] <Kaiepi> the type serves as the default as well in this case

[07:49] <ToddAndMargo> default structure vs default value?  Still confused.

[07:51] <discord-raku-bot> <Nemokosch> I'm confused about the confusion you seem to create out of thin air 😄

[07:52] <ToddAndMargo> "Str" defines/confines the type of the structure.  "=" set as default value of the structure.  How is"Str" both?

[07:56] <discord-raku-bot> <Nemokosch> Let me ask you: if you create a variable `my Str $foo`, what value does $foo have?

[07:56] <ToddAndMargo> Still confused about "Blob:U :$type = Buf"   "Blob" is the structure.  What is the ":U"?  "$type" is the variable name and has nothing to do with a particular structure type.  NO idea what ":" (marks a named parameter) is.  and "Buf" is the default structure?   So we are passing a structure not data?

[07:58] <ToddAndMargo> "my Str $foo" is undefined (meaning no data entered) until I put something in it.  But the "structure is defined.

[07:59] <discord-raku-bot> <Nemokosch> This is a vague answer. What's its value?

[07:59] <ToddAndMargo> > my Str $x; say $x; say $x.defined

[07:59] <ToddAndMargo> (Str)

[07:59] <ToddAndMargo> False

[08:00] <discord-raku-bot> <Nemokosch> Yes, its *value* is Str

[08:00] <ToddAndMargo> So the variable's structure is defined, but is not populated with anything,

[08:01] <ToddAndMargo> confused.  $x has no data in it (yet).  How is it suddenly populated with the name of its structure?

[08:02] <discord-raku-bot> <Nemokosch> It doesn't make conceptual sense that something has no value, not in Raku at least

[08:03] <ToddAndMargo> From what I understand of Raku, every variable is a structure with definition of what the structure can do tht is our of the reach of teh programmer.  $x's structure states that is is a string and has this and that ability.  This, unlike C, where it is an array of characters.

[08:04] <ToddAndMargo> "no value" to mean means a fictitious entity called "nil"

[08:04] <ToddAndMargo> The value of $x is nil, not Str

[08:06] <discord-raku-bot> <Nemokosch> And that's where you are wrong. Nil does exist but it's not the initial value of... well, anything, as much as I can tell. Maybe the initial value of a subroutine return

[08:06] <ToddAndMargo> By "value"I mean the data section of the the Str structure

[08:08] <ToddAndMargo> On 09/12/2018 10:09 AM, Larry Wall wrote:

[08:08] <ToddAndMargo>     Basically, ignore any advice to treat Nil as a normal value, because

[08:08] <ToddAndMargo>     it really is intended to represent the *absence* of a value as much as

[08:08] <ToddAndMargo>     possible.  It's a bit like the way solid-state electronics treats "holes"

[08:08] <ToddAndMargo>     as if they were real particles, and gets away with it much of the time.

[08:08] <ToddAndMargo>     But not all the time, because the hole isn't real; it's the collective

[08:08] <ToddAndMargo>     behavior of everything around a thing that's missing.

[08:08] <ToddAndMargo>     So while you can test explicitly for Nil if you try hard enough, it's

[08:08] <ToddAndMargo>     better not to try at all, because lots of places internally are using

[08:08] <ToddAndMargo>     that Nil to select some kind of default behavior that might or might

[08:08] <ToddAndMargo>     not look like Nil afterwards.

[08:08] <ToddAndMargo>     It was probably a mistake to put Nil into the type hierarchy underneath

[08:08] <ToddAndMargo>     the Any type in the first place.  It's more of a concept type like

[08:08] <ToddAndMargo>     Junction, so probably belongs outside of Any, which sits the top of the

[08:08] <ToddAndMargo>     "normal" object hierarchy.

[08:08] <ToddAndMargo>     These types are deeply magical.  Whenever you find yourself trying to

[08:08] <ToddAndMargo>     use Nil or Junction as a normal value, you have to ask yourself whether

[08:08] <ToddAndMargo>     you're just Mickey Mouse falling into the Sorcerer's Apprentice trap.

[08:08] <discord-raku-bot> <Nemokosch> Don't get me wrong - I feel you in the regard that this design is complicated and conceptually bizarre. But what can we do. Types are all values - default, empty kind of values.

[08:09] <ToddAndMargo> "represent the *absence* of a value" is my sticking point.  "Str" would not be the value

[08:09] <ToddAndMargo> Still confused about "Blob:U :$type = Buf"   "Blob" is the structure.  What is the ":U"?  "$type" is the variable name and has nothing to do with a particular structure type.  NO idea what ":" (marks a named parameter) is.  and "Buf" is the default structure?   So we are passing a structure not data?

[08:09] <discord-raku-bot> <Nemokosch> Bad news for you - Str is a value, moreover it is the default value of an Str-constrained variable or parameter

[08:13] <discord-raku-bot> <Nemokosch> :U indicates that what we expect has .DEFINITE False - this is more or less synonymous to saying it is a type object

[08:16] <ToddAndMargo> how does a structure type also become a value?

[08:16] <discord-raku-bot> <Nemokosch> If you say it's bizarre to approach type objects as "indefinite" values of their types (and even mark that with U for confusion), I'm totally with you. But that's how it is so please try to adopt

[08:17] <discord-raku-bot> <Nemokosch> That's how Raku is designed fundamentally. It doesn't "become" a value, it has always been one

[08:18] <ToddAndMargo> I absolute adore Raku.  I am trying to learn what all this stuff mean so I can TAKE ADVANTAGE of it.

[08:19] <discord-raku-bot> <Nemokosch> I think you need to ponder a bit - "what if types were always values of their own type? What could that mean?"

[08:21] <ToddAndMargo> It does make sense to me that say would return the type of structure if the structure's value was nil.  "print", on the other hand, tries to print what the structure's value:

[08:21] <ToddAndMargo> print "$x\n"

[08:21] <ToddAndMargo> Use of uninitialized value element of type Str in string context.

[08:21] <ToddAndMargo> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[08:21] <ToddAndMargo>   in block <unit> at <unknown file> line 1

[08:22] <discord-raku-bot> <Nemokosch> Forget Nil for now. Nil exists outside of the scope of this discourse.

[08:22] <ToddAndMargo> "Use of uninitialized value element of type Str in string context." makes total sense to me.  But, saying the "value" is "Str" does not.  I am obviously missing something/

[08:24] <discord-raku-bot> <Nemokosch> That's why I said - try to make sense of it. What if the value is indeed Str, how do they add up?

[08:24] <discord-raku-bot> <Nemokosch> Could it be that it's Str.gist that produces the error?

[08:25] *** frost joined
[08:25] <ToddAndMargo> "You can use the .DEFINITE method to find out if what you have is an instance or a type object:

[08:25] <ToddAndMargo> say Int.DEFINITE; # OUTPUT: «False␤» (type object)

[08:25] <ToddAndMargo> say 426.DEFINITE; # OUTPUT: «True␤»  (instance) "

[08:25] <ToddAndMargo> Is that saying that the value passed is a structure and not data?

[08:25] <discord-raku-bot> <Nemokosch> You can actually type Str.gist, by the way. It is valid but it does throw

[08:26] <ToddAndMargo> > Str.gist

[08:26] <ToddAndMargo> (Str)

[08:26] <ToddAndMargo> (Map) method gist

[08:26] <ToddAndMargo> Defined as:

[08:26] <ToddAndMargo> method gist(Map:D: --> Str:D)

[08:26] <ToddAndMargo> Returns the string containing the "gist" of the Map, sorts the pairs and lists up to the first 100, appending an ellipsis if the Map has more than 100 pairs.

[08:27] <ToddAndMargo> What the heck is "Returns the string containing the "gist" of the Map"  and why did it return the structure type of $x?

[08:29] <ToddAndMargo> What is confusing is how is a structure also a data value?

[08:29] <discord-raku-bot> <Nemokosch> Because somebody, probably TimToady, decided this would make sense. That's all there is to it. Technically, it's not that difficult to do

[08:31] <ToddAndMargo> > say $x.chars

[08:31] <ToddAndMargo> Use of uninitialized value of type Str in string context.

[08:31] <ToddAndMargo> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[08:31] <ToddAndMargo>   in block <unit> at <unknown file> line 1

[08:31] <ToddAndMargo> 0

[08:31] <ToddAndMargo> [1] > my Str $y = ""; say $y.chars

[08:31] <ToddAndMargo> 0

[08:31] <ToddAndMargo> .chars for $x complains but still answers zero.  ("Str" is three characters)

[08:31] *** frost left
[08:33] <discord-raku-bot> <Nemokosch> Yes because it's not the word Str

[08:34] <discord-raku-bot> <Nemokosch> Have you heard of prototypes? In JS or Lua, for example

[08:34] <ToddAndMargo> no

[08:35] <discord-raku-bot> <Nemokosch> Aw, it could come handy

[08:36] <discord-raku-bot> <Nemokosch> You could think of type objects as templates

[08:37] <ToddAndMargo> Oh I see what he is doing.   https://github.com/salortiz/NativeHelpers-Blob/blob/master/lib/NativeHelpers/Blob.pm6

[08:37] *** razetime joined
[08:37] <ToddAndMargo> 93: our sub blob-from-pointer(Pointer:D \ptr, Int :$elems!, Blob:U :$type = Buf) is export {

[08:38] <ToddAndMargo> 100: my $b = $type;

[08:38] <ToddAndMargo> Very sneaky!!!!   Now it all makes sense.

[08:39] <discord-raku-bot> <Nemokosch> Btw you can also write (1, 2).new like you can write List.new

[08:40] <ToddAndMargo> Did you catch the security booboo on line 94?  He should be using memcpy_s instead

[08:40] <ToddAndMargo> You guys are extremely patient.  Thank you!

[08:42] <ToddAndMargo> "type objects as templates".  Is calling them "structures" a C++ thing?

[08:43] <discord-raku-bot> <Nemokosch> I think "structure" is a heavily overloaded term

[08:44] <discord-raku-bot> <Nemokosch> You can think of Blob:U as "any Blob type" and the default value is Buf

[08:45] <ToddAndMargo> Oh and the question about defaults on the sub parameter, does that mean I sill have to pass the parameter something and if I pass it something "undefined" then it will use the default?  But I still have to pass the middle one something.  The end one I can leave off.

[08:46] <ToddAndMargo> I am going to be having a lot of fun with this stuff is a week or so.

[08:47] <ToddAndMargo> I am going to tell myself that ":" is a" separator" (a space would cause confusion) and "U" mean undefined.

[08:48] <ToddAndMargo> The more I learn about Raku, the more I am awestruck at the thinking that went into it.

[08:49] <discord-raku-bot> <Nemokosch> These `:D` and `:U`things are also called type smileys

[08:51] <discord-raku-bot> <Nemokosch> m: my Str:D $foo is default('bar'); dd $foo

[08:52] <discord-raku-bot> <Nemokosch> m: my List:D $foo is default(Empty); dd $foo;

[08:54] *** dakkar joined
[08:54] <discord-raku-bot> <Nemokosch> What I wanted to test is 1. If `:D` is about the values rather than how you specify them 2. If it tests .DEFINITE rather than .defined

[09:42] *** Kaiepi left
[09:42] *** ToddAndMargo left
[10:36] *** guifa joined
[10:47] *** Kaiepi joined
[12:34] *** discord-raku-bot left
[12:34] *** discord-raku-bot joined
[12:51] *** razetime left
[13:13] *** sgrs joined
[13:28] *** sgrs left
[13:44] *** sgrs joined
[13:53] *** sgrs left
[13:55] *** razetime joined
[15:22] *** Heptite joined
[15:37] *** bioexpress joined
[15:46] <bioexpress> Hi! In a META6.json file: when would I use "zef:myname" and when "github:myname" for the "auth" key - when the prefix "zef" and when the prefix "github"?

[16:37] *** Kaiepi left
[17:28] *** razetime left
[17:36] *** discord-raku-bot left
[17:36] *** discord-raku-bot joined
[17:42] *** dakkar left
[17:44] *** Kaiepi joined
[17:52] <discord-raku-bot> <Kaiepi> i forget if it's fez or raku.land but something or other complains if you try to use `github:` as a prefix with the newer tooling

[17:52] <discord-raku-bot> <Kaiepi> i used to use it

[17:54] <discord-raku-bot> <Kaiepi> raku.land will complain even if it's on cpan, e.g. https://raku.land/cpan:KAIEPI/Trait::Traced

[17:57] <discord-raku-bot> <Kaiepi> but it looks to be valid for p6c repos so that's me being a goof https://raku.land/github:thundergnat/Timer

[18:00] <discord-raku-bot> <Nemokosch> I'd think it's indeed that p6c had no identity whatsoever, besides the github name

[18:16] *** deadmarshal left
[18:36] *** deadmarshal joined
[18:50] *** bioexpress left
