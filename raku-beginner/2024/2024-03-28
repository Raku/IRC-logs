[02:17] *** MasterDuke joined
[09:01] *** dakkar joined
[09:03] *** Manifest0 joined
[14:04] *** librasteve_ left
[17:31] *** dakkar left
[19:02] *** librasteve_ joined
[19:10] <Tirifto> m: for 1..9 {  my %h = :a, :b, :c, :d;  for %h { .key.print; %h<d>:delete };  say “”  }

[19:10] <camelia> rakudo-moar 96194dc33: OUTPUT: «cba␤bdac␤bca␤ccba␤dcba␤dbca␤aacb␤bac␤aacb␤»

[19:13] <Tirifto> I suppose hashes are not meant to be messed with while they’re being iterated over with ‘for’?

[19:13] <discord-raku-bot> <librasteve> nss

[19:14] <Tirifto> ~~ not so simple ? :o

[19:14] <discord-raku-bot> <librasteve> no shit sherlock

[19:14] <discord-raku-bot> <librasteve> (sorry that was a bit harsh)

[19:15] <Tirifto> Ah, elementary it is. xP

[19:16] <discord-raku-bot> <librasteve> XD

[19:16] <discord-raku-bot> <librasteve> or, as lizmat would say, doctor it hurts when I do that

[19:18] <discord-raku-bot> <nahita3882> what's the reason &postcircumfix:<( )> is not accessible like this?

[19:18] <discord-raku-bot> <nahita3882> works for {} and []

[19:18] <Tirifto> (No harm done! c: I reckon this might be common sense, but I tend to imagine Raku as a hyperbolic land of endless possibilities, so I had to check. xP)

[19:19] <discord-raku-bot> <nahita3882> m: &postcircumfix:<( )>

[19:19] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Undeclared routine:     postcircumfix:<( )> used at line 1. Did you mean 'postcircumfix:<{ }>', 'postcircumfix:<[ ]>', 'postcircumfix:<[; ]>', 'postcircumfix:<{; }>'?  

[19:19] <lizmat> nahita3882 possibly because postcircumfix ( ) is really a syntactic construct

[19:20] <lizmat> although I don't see a reason why it couldn't exist

[19:21] <discord-raku-bot> <nahita3882> i see thanks

[19:23] <lizmat> m: sub postcircumfix:<( )>($callable, |c) { $callable(|c) }; &postcircumfix:<( )>({ say "foo: $_" }, 42)

[19:24] <camelia> rakudo-moar 96194dc33: OUTPUT: «foo: 42␤»

[19:24] <discord-raku-bot> <librasteve> Tirifto: you made me wonder whether other languages lock out the iterand - and whether raku (like perl) is deliberately relaxed since there may be certain self-referential code (aka footguns) that you could do (but would want to)

[19:28] <Tirifto> I don’t think I’ve tried, other than maybe Citrine, where I think it worked. `o`

[19:35] <Tirifto> Assuming I want to iterate over some values (ordered or not), but might decide while iterating that I shan’t be needing to look at some of those values any more, is there a straightforward way for me to exclude those values from iteration? Or might I be better off recording such values in a SetHash (for example) and skipping them over as they come?

[19:47] <lizmat> there's "last" in loops ?

[19:49] <Tirifto> Yes, but that always skips over all the remaining values, rather than only excluding a select few, no?

[19:55] <lizmat> "next if $not-applicable"

[20:49] <Tirifto> Very well!

