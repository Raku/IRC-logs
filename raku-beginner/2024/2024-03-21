[01:04] *** Manifest0 left
[03:14] <discord-raku-bot> <_tailgate> What does the ^ mean in $^a and $^b in this code: 'bca'.comb.sort({$^b cmp $^a}).join ? Thanks!

[03:22] <discord-raku-bot> <vendethiel> https://docs.raku.org/language/variables#The_^_twigil

[09:02] *** Manifest0 joined
[09:06] *** Manifest0 left
[09:17] *** dakkar joined
[09:20] *** Manifest0 joined
[10:11] *** bazzrrr0 joined
[14:17] *** bazzrrr0 left
[17:02] <discord-raku-bot> <antononcube> Is there are an operator I can use to apply a function, &f , to an array of arguments, my @arr = [1, 12, 4]? I know I can do &f(|@arr) , and I can program a corresponding operator. But maybe there are built-in operator(s) doing that already.

[17:06] <discord-raku-bot> <antononcube> Related question, if I have an array of functions/subs and an array of numbers, then can specify if a "cross product" of function-to-arugment application with X ? For example, [&f, &g] X<op> [1,2,3]  , where <op> is a certain operator.

[17:32] *** dakkar left
[17:43] <SmokeMachine> m: sub call(&func, |c) { func |c }; [&say, &put, &note, &warn] X[&call] <bla ble bli blo> # <-- antonnoncube

[17:43] <camelia> rakudo-moar 79ad42c74: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of X[&call] in sink context‚ê§    at <tmp>:1‚ê§    ------> { func |c }; [&say, &put, &note, &warn] ‚èèX[&call] <bla ble bli blo> # <-- antonno‚ê§bla‚ê§ble‚ê§bli‚ê§blo‚ê§bla‚ê§ble‚ê§bli‚ê§blo‚ê§bla‚ê§ble‚Ä¶¬ª

[17:43] <SmokeMachine> m: sub call(&func, |c) { func |c }; quietly [&say, &put, &note, &warn] X[&call] <bla ble bli blo> # <-- antonnoncube

[17:43] <camelia> rakudo-moar 79ad42c74: OUTPUT: ¬´bla‚ê§bla‚ê§ble‚ê§bli‚ê§blo‚ê§bla‚ê§ble‚ê§bli‚ê§blo‚ê§ble‚ê§bli‚ê§blo‚ê§bla‚ê§  in sub call at <tmp> line 1‚ê§ble‚ê§  in sub call at <tmp> line 1‚ê§bli‚ê§  in sub call at <tmp> line 1‚ê§blo‚ê§  in sub call at <tmp> line 1‚ê§¬ª

[18:15] <discord-raku-bot> <antononcube> @SmokeMachine Thanks! This is useful. But, I assume it also means that there are no built-in operators for that kind of specs.

[18:15] <discord-raku-bot> <gfldex> m: my @a = 1,2,3; @a¬ª.&{ .&say, .&note };

[18:15] <discord-raku-bot> <Raku eval>  1 2 3  1 2 3 

[18:19] <discord-raku-bot> <antononcube> üëçü§î

[18:47] <discord-raku-bot> <antononcube> @gfldex Thanks that seems like a good solution. (I do not consider it great, though. Just good enough.)

[18:54] <discord-raku-bot> <gfldex> m: multi sub infix:<o¬ª>(@f, *@a) { @a.hyper.map(-> $e { @f.map( -> &f { f($e) }) }) }; say (&say, &note) o¬ª <1 2 3>;

[18:54] <discord-raku-bot> <Raku eval>  1 2 3 ((True True) (True True) (True True))  1 2 3 

[18:55] <discord-raku-bot> <gfldex> @antononcube You are likely better of to write your own operator. That way you can hyper if you like or drop return values if you don't need them and add adverbs to control behaviour.

[18:57] <discord-raku-bot> <gfldex> So to answer your initial question: There is no such operator ‚Ä¶ yet. Because you didn't write it. :->

[19:05] <discord-raku-bot> <antononcube> @gfldex > You are likely better of to write your own operator.

[19:06] <discord-raku-bot> <antononcube> The solution you give is good, but it is too OOP for my taste.

[20:45] *** hudo joined
[20:58] *** hudo left
