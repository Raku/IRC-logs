[02:49] *** MasterDuke left
[03:00] *** MasterDuke joined
[04:32] *** MasterDuke left
[06:24] *** CIAvash joined
[06:38] *** CIAvash left
[07:20] *** CIAvash joined
[07:33] *** CIAvash left
[13:08] *** jgaz joined
[13:29] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/08/26/2024-35-cro-💍-htmx/

[13:46] <jgaz> Shouldn't `raku -e 'say "AA".split("").elems'` agree with `raku -e 'say "AA".chars'`? The former returns `4` the later the expected `2`.

[13:50] <lizmat> m: dd say "AA".split("")

[13:50] <camelia> rakudo-moar 09a96033c: OUTPUT: «( A A )␤Bool::True␤»

[13:50] <lizmat> m: dd "AA".split("")

[13:50] <camelia> rakudo-moar 09a96033c: OUTPUT: «("", "A", "A", "").Seq␤»

[13:51] <lizmat> when you split on the empty string, there's a boundary at the start and at the end as well

[13:51] <lizmat> if you just want the separate graphemes, use "comb"

[13:51] <lizmat> m: dd "AA".comb

[13:51] <camelia> rakudo-moar 09a96033c: OUTPUT: «("A", "A").Seq␤»

[13:53] <jgaz> lizmat, What is the use case for the distinction?

[13:54] <lizmat> .oO( the use case is in the eye of the beholder )

[13:54] <jgaz> Okay

[13:54] <lizmat> but seriously:    .comb will give you all graphemes, if you want to look at them

[13:55] <lizmat> but .comb is more general

[13:55] <lizmat> m: dd "foobarbaz".comb(3)

[13:55] <camelia> rakudo-moar 09a96033c: OUTPUT: «("foo", "bar", "baz").Seq␤»

[13:56] <lizmat> m: dd "foobarbaz".comb(/ (\w) $0 /)    # two consecutive chars

[13:56] <camelia> rakudo-moar 09a96033c: OUTPUT: «("oo",).Seq␤»

[13:56] <lizmat> it all depends on what you want to achieve

[13:57] <lizmat> where .comb focuses on the things you want to obtain, and .split focuses on where to split

[13:59] <jgaz> Okay, I follow the difference in perspective.

[14:01] <jgaz> I feel like an idiot for asking this, because I used to know how and it's escaping me, but how do I convert two equal length arrays into a hash? I thought it was `Z` but I can't associatively index into the results of `@a1 Z @a2`.

[14:13] <discord-raku-bot> <nahita3882> Z returns a Seq, so you cannot directly associatively-index its result. But you can zipWith => and %(...) it to get a hash from array 1 to 2

[14:14] <discord-raku-bot> <nahita3882> i.e., %(@a1 Z=> @a2)

[14:15] <discord-raku-bot> <nahita3882> also (.comb is better for sure but) there is :skip-empty for Str.split to not give you the "extra"s there, i.e., "AA".split("", :skip-empty) eqv ("A", "A").Seq holds

[14:27] <jgaz> nahita2882, okay, so I was only so far wrong.

[14:28] <jgaz> I'll give `Z=>` a try.

[15:05] <jgaz> nahita3882 So far so good with `%(@a1 Z=> @a2)<foo>`. Thanks for the help.

[20:18] <discord-raku-bot> <scullucs> Is there an IO::Path (or something) method to obtain file/dir permissions?

[20:26] <ab5tract> m: “/tmp/foo”.IO.spurt(“existing”); dd “/tmp/foo”.IO.rw

[20:26] <camelia> rakudo-moar 09a96033c: OUTPUT: «Bool::True␤»

[20:27] <ab5tract> m: “/tmp/foo”.IO.spurt(“existing”); dd “/tmp/foo”.IO.mode

[20:27] <camelia> rakudo-moar 09a96033c: OUTPUT: «IntStr.new(420, "0644")␤»

[20:27] <ab5tract> ^^ scullucs

[20:31] <discord-raku-bot> <scullucs> Dang! Some days I'm more stupid than usual. A simple search for "permission" in the IO::Path doc page (which I was skimming) would have found it.

[20:31] <discord-raku-bot> <scullucs> Thanks 🙂

[20:35] <ab5tract> Not to worry. I find that allomorph interesting.. +420, ~”0644”

[20:39] <discord-raku-bot> <librasteve> The mode is correct. 644 is an octal representation, which is 420 in decimal.  <=== just found this by googling ... didn't realise that modes are octal https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation

[20:40] <discord-raku-bot> <scullucs> They're usually represented in octal to make them easier to read.

[20:40] <discord-raku-bot> <scullucs> *to interpret.

[20:40] <ab5tract> Ah, yeah that makes sense. Forgot that about octal

[20:41] <ab5tract> But it makes 0777 as max permissions make sense

[20:43] <discord-raku-bot> <librasteve> maybe there is a better allomorph like `OctStr.new(0o644,'-rw-r--r--')  ;-)

[20:46] <discord-raku-bot> <scullucs> You can go higher (well, in unix anyway, dunno about windows): e.g. 07777 (The first 7 is sticky bit(1) + set group ID on execution(2) + set user ID on execution(4).

[20:47] <discord-raku-bot> <librasteve> .oO

[20:48] <discord-raku-bot> <scullucs> Er, 0o7777.

[21:01] <ab5tract> That’s not “higher”, just longer :)

[21:03] <discord-raku-bot> <librasteve> fwiw I think that this «IntStr.new(420, "0644")␤» is a great example of the value of allomorphs - in this case to continue to carry the semantic meaning of the permissions setting

[21:04] *** jgaz left
[21:04] <discord-raku-bot> <librasteve> &afk

[21:11] <lucs> ab5tract: For some values of "higher", sure :)

