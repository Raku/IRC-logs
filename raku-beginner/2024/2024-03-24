[01:07] *** jaguart joined
[01:20] *** Manifest0 left
[02:22] *** ACfromTX left
[06:59] *** ACfromTX joined
[08:29] *** teatime left
[09:20] *** teatime joined
[10:29] *** teatime left
[10:30] *** teatime joined
[10:30] *** Manifest0 joined
[11:00] *** teatime left
[11:00] *** teatime joined
[11:22] <ab5tract> hey DarthGandalf, regarding using Array.splice to insert arrays, here is a workaround:

[11:23] <ab5tract> m: my @a = [1,1],[2,2],[3,3]; @a.splice(1,0,[[4,4],]); dd @a

[11:23] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], [4, 4], [2, 2], [3, 3]]␤»

[11:24] <lizmat> m: my @a = [1,1],[2,2],[3,3]; @a.splice(1,0,$[4,4]); dd @a   # just checkinng

[11:24] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], 4, 4, [2, 2], [3, 3]]␤»

[11:24] <lizmat> still feels like a bug to me

[11:25] <lizmat> but perhaps a bug that we cannot fix without breaking the ecosystem

[11:26] <ab5tract> if so, it appears to be something in the way `@a.iterator.push-until-lazy` handles `$[]`

[11:26] * DarthGandalf shrugs

[11:26] <DarthGandalf> I don't know what the right solution should be, sorry

[11:28] <ab5tract> the workaround that I shared isn't going to go away, that's for sure

[11:32] <lizmat> true

[11:38] <discord-raku-bot> <librasteve> m: my @a = [1,1],[2,2],[3,3]; my @b = [4,4]; @a.splice(1,0,@b); say "@a"

[11:38] <discord-raku-bot> <Raku eval>  @a 

[11:40] <discord-raku-bot> <librasteve> hmmm - discord doesn't like the at symbol --- I am just chiming in that splicing should handle where the insert is an array var

[11:40] <ab5tract> m: my @a = [1,1],[2,2],[3,3]; my @b = [4,4]; @a.splice(1,0,@b); dd @a

[11:40] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], 4, 4, [2, 2], [3, 3]]␤»

[11:40] <discord-raku-bot> <librasteve> thanks!

[11:40] <ab5tract> yup, it's the same issue

[11:44] <lizmat> m: my @b = [4,4]; dd @b

[11:44] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @b = [4, 4]␤»

[11:44] <lizmat> m: my @b = $[4,4]; dd @b

[11:44] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @b = [[4, 4],]␤»

[11:45] <lizmat> note itemization *is* taken into account then

[11:45] <lizmat> and that [4,4] is flattened into @b is because of the single arg rule

[11:45] <lizmat> m: my @b = [4,4],[5,5]; dd @b

[11:45] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @b = [[4, 4], [5, 5]]␤»

[11:47] <ab5tract> y @a = [1,1],[2,2],[3,3]; my @b = $[4,4]; @a.splice(1,0,@b); dd @a

[11:47] <ab5tract> m: my @a = [1,1],[2,2],[3,3]; my @b = [4,4]; @a.splice(1,0,@b); dd @a

[11:47] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], 4, 4, [2, 2], [3, 3]]␤»

[11:47] <ab5tract> dangit, sorry.

[11:47] <ab5tract> m: my @a = [1,1],[2,2],[3,3]; my @b = [4,4]; @a.splice(1,0,@b); dd @a

[11:47] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], 4, 4, [2, 2], [3, 3]]␤»

[11:48] <ab5tract> fat fingers today :(

[11:48] <ab5tract> m: my @a = [1,1],[2,2],[3,3]; my @b = $[4,4]; @a.splice(1,0,@b); dd @a

[11:48] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], [4, 4], [2, 2], [3, 3]]␤»

[11:48] <ab5tract> lizmat++

[11:48] <lizmat> m: my @a = [1,1],[2,2],[3,3]; my @b = 4,4; @a.splice(1,0,$@b); dd @a

[11:48] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], 4, 4, [2, 2], [3, 3]]␤»

[11:48] <discord-raku-bot> <librasteve> I think lizmat is arguing that both these are right and that the single argument rule applies to the splice arg ??

[11:49] <lizmat> no, I'm arguing that:

[11:49] <lizmat> m: my @a = [1,1],[2,2],[3,3]; my @b = 4,4; @a.splice(1,0,$@b); dd @a

[11:49] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [[1, 1], 4, 4, [2, 2], [3, 3]]␤»

[11:49] <lizmat> is wrong in ignoring the itemization of @b in  $@b

[11:49] <discord-raku-bot> <librasteve> ok - i agree with that

[11:50] <lizmat> my @b = 4,4; and my @b = [4,4] is correct, because of the single arg rule

[11:50] <lizmat> (producing the same result, I mean)

[11:51] <discord-raku-bot> <librasteve> ok - I kinda get that ... the single arg rule is sometimes surprising to me ... but I do see the point

[11:51] <discord-raku-bot> <librasteve> thanks for clarifying

[11:52] <ab5tract> DarthGandalf: so a slightly less ugly workaround is also available:

[11:52] <ab5tract> m: my @a = 1,2,3; @a.splice(1,0,[$[3,5]],); dd @a

[11:52] <camelia> rakudo-moar 18abe8c32: OUTPUT: «Mu @a = [1, [3, 5], 2, 3]␤»

[11:53] <ab5tract> ignore the extra comma after `[$[3,5]]`, it's not necessary

[11:54] <DarthGandalf> I didn't use raku enough to develop taste to say which of them is uglier, but they look kinda the same to me :)

[11:55] <ab5tract> beauty is always in the eye of the beholder :)

[13:15] *** teatime left
[13:16] *** teatime joined
[17:03] *** teatime left
[22:19] *** habere-et-disper joined
[22:21] <habere-et-disper> How do I access/reference the name of a variable ?

[22:21] <habere-et-disper> m: my $abc = '123'; say $abc.^name # wanting 'abc' ?

[22:21] <camelia> rakudo-moar bafa92a60: OUTPUT: «Str␤»

[22:21] <MasterDuke> m: my $abc = '123'; say $abc.VAR.name

[22:21] <camelia> rakudo-moar bafa92a60: OUTPUT: «$abc␤»

[22:24] <habere-et-disper> Thanks ! Does this also work on tokens ?

[22:24] <MasterDuke> good question. i have no idea, but probably

[22:25] <MasterDuke> m: my token foo { . }; say &foo.VAR.name

[22:25] <camelia> rakudo-moar bafa92a60: OUTPUT: «foo␤»

[22:32] <lizmat> m: my token foo { . }; say &foo.name

[22:32] <camelia> rakudo-moar bafa92a60: OUTPUT: «foo␤»

[22:34] <MasterDuke> huh, why didn't my version print '&foo'?

[22:34] <lizmat> m: my sub foo { . }; say &foo.name

[22:34] <camelia> rakudo-moar bafa92a60: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of .  to concatenate strings.  In Raku please use: ~.␤at <tmp>:1␤------> my sub foo { . ⏏}; say &foo.name␤»

[22:35] <lizmat> m: my sub foo {  }; say &foo.name

[22:35] <camelia> rakudo-moar bafa92a60: OUTPUT: «foo␤»

[22:35] <MasterDuke> m: my sub foo {  }; say &foo.VAR.name

[22:35] <camelia> rakudo-moar bafa92a60: OUTPUT: «foo␤»

[22:35] <MasterDuke> m: my @foo; say @foo.VAR.name

[22:35] <camelia> rakudo-moar bafa92a60: OUTPUT: «@foo␤»

[22:35] <MasterDuke> m: my %foo; say %foo.VAR.name

[22:35] <camelia> rakudo-moar bafa92a60: OUTPUT: «%foo␤»

[22:35] <lizmat> .VAR on a non-container is identity

[22:38] <habere-et-disper> I was trying to get the name of a matched token in a grammar and .keys worked.

[23:17] *** habere-et-disper left
