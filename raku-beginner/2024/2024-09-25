[00:08] <tonyo> it can but only by the developer, internally you probably don't know which one they mean and if the parameters are more ambiguous you can't really recommend

[00:14] <tonyo> here's how fez does it: https://github.com/tony-o/raku-fez/blob/master/lib/Fez/CLI.rakumod#L663

[00:14] <tonyo> i write pre-formatted usage docs for each command and put them in the resources to make it easier for me

[00:46] *** discord-raku-bot left
[00:46] *** discord-raku-bot joined
[01:48] *** teatime left
[05:43] <discord-raku-bot> <rcmlz> I was noth considering the multi case situation - you are right, in such situations it would be difficult for Raku to know what parameter to consider for blaming ‚Äûwrong value for parameter xyz‚Äú. Thank you for clarifying. I guess I do need to invest some time into tuning GENERATE-USAGE.

[08:15] *** dakkar joined
[08:20] <discord-raku-bot> <antononcube> How can I program the postcircumfix operator for shaped arrays access? For a certain class/object I work on I want to access elements of it with $obj[3;1] .

[08:20] <discord-raku-bot> <antononcube> I tried to use postcircumfix:<[ ]> withot success...

[08:22] <lizmat> <[;]>

[08:23] <discord-raku-bot> <antononcube> @lizmat üôÇ I tried that but put a space in it postcircumfix:<[; ]> ...

[08:27] <discord-raku-bot> <antononcube> @lizmat I have been skimming / reading "Array::Sparse" a lot in the last few days.

[08:28] <discord-raku-bot> <antononcube> Maybe, at some point I will figure out how to use in my Sparse Matrxi project. (Or "Array::Agnostic".)

[08:28] <lizmat> :-)

[08:31] <discord-raku-bot> <antononcube> I get this error now -- and I cannot figure out what to do: > Not enough symbols provided for categorical of type postcircumfix; needs 2

[08:31] <discord-raku-bot> <antononcube> Here is my code:  multi sub postcircumfix:<[;]>(Math::SparseMatrix::CSR:D $mat, $i, $j) {     $mat.value-at($i, $j) } 

[08:32] <lizmat> perhaps ($mat, *@args)  ?

[08:35] <discord-raku-bot> <antononcube> Hmm.. I tried that too, same error.

[08:36] <lizmat> confirmed...  

[08:38] <lizmat> looks like it needs to be <; ]>

[08:38] <lizmat> sorry, <[; ]>

[08:38] <lizmat> with a space after ;

[08:42] <lizmat> antononcube  looks like you're going to need to go through some hoops

[08:43] <lizmat> looks like the multi sub is not getting selected

[08:47] <discord-raku-bot> <antononcube> Hmm... ok. (Again, I did try "[; ]", with the space first.)

[08:50] <lizmat> looks like there's something in dispatch that's not triggering correctly for <[; ]>  :-(

[08:51] <lizmat> my gist so far: https://gist.github.com/lizmat/c9cecea61e1383a0a64f24e177bd556d

[09:39] <ab5tract> a temporary alternative could be to dispatch to a private multi with a less tricky name

[09:42] <lizmat> m: class A { }; proto sub postcircumfix:<[; ]>(|) {*}; multi sub postcircumfix:<[; ]>(A:D) { dd }; multi sub postcircumfix:<[; ]>(|c) { dd }; (A.new)[0;0]

[09:42] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´sub postcircumfix:<[; ]>(|c)‚ê§¬ª

[09:43] <lizmat> so why is it selecting the |c candidate ?

[09:43] <lizmat> oops, that is actually correct

[09:43] <lizmat> m: class A { }; proto sub postcircumfix:<[; ]>(|) {*}; multi sub postcircumfix:<[; ]>(A:D, |c) { dd }; multi sub postcircumfix:<[; ]>(|c) { dd }; (A.new)[0;0]

[09:44] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´Ambiguous call to 'postcircumfix:<[; ]>(A, List)'; these signatures all match:‚ê§  (A:D $, |c)‚ê§  (|c)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:44] <ab5tract> m: class A { }; proto sub postcircumfix:<[; ]>(|) {*}; multi sub postcircumfix:<[; ]>(A:D, |c) { dd }; multi sub postcircumfix:<[; ]>(|c) { dd }; (A.new)[A.new;0]

[09:44] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´Ambiguous call to 'postcircumfix:<[; ]>(A, List)'; these signatures all match:‚ê§  (A:D $, |c)‚ê§  (|c)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:44] <ab5tract> m: class A { }; proto sub postcircumfix:<[; ]>(|) {*}; multi sub postcircumfix:<[; ]>(A:D, |c) { dd }; multi sub postcircumfix:<[; ]>(|c) { dd }; (A.new)[A.new;]

[09:44] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´Cannot resolve caller Int(A:D: ); none of these signatures matches:‚ê§    (Mu:U \v:: *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:44] <ab5tract> m: class A { }; proto sub postcircumfix:<[; ]>(|) {*}; multi sub postcircumfix:<[; ]>(A:D, |c) { dd }; multi sub postcircumfix:<[; ]>(|c) { dd }; (A.new)[A.new;A.new]

[09:44] <camelia> rakudo-moar 0b6c7dc69: OUTPUT: ¬´Ambiguous call to 'postcircumfix:<[; ]>(A, List)'; these signatures all match:‚ê§  (A:D $, |c)‚ê§  (|c)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:45] <lizmat> perhaps we should take this to #raku-dev

[09:45] <ab5tract> okay, sorry camelia, I know you don't like to be spammed

[09:45] <ab5tract> lizmat++

[09:49] <lizmat> antononcube the sub must be: multi sub postcircumfix:<[;]>(Math::SparseMatrix::CSR:D $mat, @args) { $mat.value-at(@a[0], @a[1]) }

[09:49] <lizmat> *@args[0], @args[1]

[09:50] <lizmat> the number of elems in @args indicates the number of dimensions

[12:48] <discord-raku-bot> <antononcube> @lizmat Ok, great ‚Äî Thank you!

[12:49] <lizmat> the reason is that each element in the @args could well be a list itself  :-)

[12:49] <lizmat> $mat[0; 20..30]

[13:48] <discord-raku-bot> <librasteve> lol --- often the raku-beginner channel is about the same level as python core ;-)

[14:06] <discord-raku-bot> <antononcube> @librasteve Thanks for posting this: https://stackoverflow.com/q/70976231

[14:06] <discord-raku-bot> <antononcube> You posted both the original and the working solution code.

[14:08] <discord-raku-bot> <librasteve> always happy to share how smart I am

[14:09] <discord-raku-bot> <librasteve> (or more correctly the results of much trial and error)

[14:10] <discord-raku-bot> <librasteve> not sure if it says in the post, but the released code is in https://raku.land/zef:librasteve/Dan

[14:11] <discord-raku-bot> <librasteve> I would draw your attentioon to cascading accessors (which were in the PDL part of the synopses, but not imolemented) - maybe would make sense to isolate and package just that code...

[14:25] <lizmat> librasteve could you tell me which part of the code you're talking about ?

[14:28] <discord-raku-bot> <antononcube> I think the methods .splice , .aop, etc.

[14:29] <discord-raku-bot> <antononcube> @librasteve Also, what is "PDL" ? Perl Data Language?

[14:49] <discord-raku-bot> <librasteve> PDL ‚Ä¶ yes that was an early concept for perl Numpy iiuc

[14:52] <discord-raku-bot> <librasteve> lizmat: sorry I‚Äôm on the road, let me try anyway ‚Ä¶ in the Dan repo /bin/synopsis.raku has a section called Value Accessors which shows the API

[14:55] <discord-raku-bot> <librasteve> the 2d code for class DataFrame is at /lib/Dan.rakumod ll745 under Role Support

[15:18] <discord-raku-bot> <antononcube> Can I, should I implement postcircumfix:<[ ]> as a class method? It seems the method approach is not working.

[15:19] <lizmat> antononcube if your class implements methods AT-POS and friends, you shouldn't have to need to make postcircumfix subs ?

[15:20] <lizmat> m: class A { method AT-POS(|c) { dd c } }; A.[42]

[15:20] <camelia> rakudo-moar 3ca83dc13: OUTPUT: ¬´\(42)‚ê§¬ª

[15:20] <lizmat> n: class A { method AT-POS(|c) { dd c } }; A.[42,666]

[15:21] <lizmat> m: class A { method AT-POS(|c) { dd c } }; A.[42,666]

[15:21] <camelia> rakudo-moar 3ca83dc13: OUTPUT: ¬´\(42)‚ê§\(666)‚ê§¬ª

[15:26] <discord-raku-bot> <antononcube> Yes, I tried AT-POS -- works nicely with a single, integer argument, e.g. $obj[3] . But when use a spec like $obj[2, 3, 1] it gives me a list of single argument applications, like, ($obj[2], $obj[3], $obj[1]) which is not what I want -- a new $objc has to be made corresponding to (2, 3, 1).

[15:26] <discord-raku-bot> <antononcube> Hence, I am investigating postcircumfix:<[ ]> and postcircumfix:<[;]>.

[15:44] <tonyo> antoncube, you figure it out?

[15:48] <discord-raku-bot> <antononcube> @tonyo Not completely. üôÇ

[16:34] *** dakkar left
[17:02] <tonyo> m: class A { has $.b; }; sub postcircumfix:<[ ]> (A:D $a, **@as) {  dd $a.b; dd @as; }; my $a = A.new(b=>5); $a[1,2,3];

[17:02] <camelia> rakudo-moar 3ca83dc13: OUTPUT: ¬´5‚ê§[(1, 2, 3),]‚ê§¬ª

[17:02] <tonyo> something like that ^ ?

[17:02] <tonyo> are you trying to use a tuple keyed hash or something?

[17:05] <discord-raku-bot> <antononcube> @tonyo Thanks -- trying that out now.

[17:06] <discord-raku-bot> <antononcube> @tonyo These tests might clarify what I am looking for : https://github.com/antononcube/Raku-Math-SparseMatrix/blob/main/t/01-access.rakutest

[17:07] <discord-raku-bot> <antononcube> In addition I would like to make "slices" like: 1) $mat[4;5] 3) $mat[1..3;2...6]

[17:07] <tonyo> if you need to use private stuff in there:

[17:07] <tonyo> m: class A { has $!b; method AT-POS(*@as) { dd @as; } }; sub postcircumfix:<[ ]> (A:D $a, **$as) { $a.AT-POS(|$as); }; my $a = A.new(b=>5); $a[1,2,3]; $a[2]

[17:07] <camelia> rakudo-moar 3ca83dc13: OUTPUT: ¬´[1, 2, 3]‚ê§[2]‚ê§¬ª

[17:07] <tonyo> ^ that works with $a[1..3] and $a[1;3] too

[17:32] <discord-raku-bot> <antononcube> @tonyo These work to a point -- thanks!

[17:33] <discord-raku-bot> <antononcube> But if I add the lines:  my @b = 33, 12, 23, 3, 6; say @b[1,2];  I get the error: > Type check failed in binding to parameter '$a'; expected A but got Array ([33, 12, 23, 3, 6])

[20:01] <discord-raku-bot> <antononcube> It looks like adding multi to my special definition of postcircumfix:<[ ]>  fixes the problem with typycal arrays.

[20:46] <ab5tract> antononcube: careful with the likely unintentional use of the sequence operator here: $mat[1..3;2...6]

