[02:48] *** DarthGandalf left
[04:52] <discord-raku-bot> <pelevesque> Anyone know if I can put unit class Orfeo::API; instead of unit module Orfeo::API if my module is only one class?

[04:52] <discord-raku-bot> <pelevesque> Wondering if that would also get precompiled?

[05:45] *** ranie joined
[05:46] *** ranie left
[05:54] <discord-raku-bot> <roguerakudev> I don't think it has any bearing on precompilation, but you can definitely do unit class in place off unit module ...; class ... is export { ... }

[05:55] <discord-raku-bot> <roguerakudev> unit class behaves as if anything after it is within a class block

[06:40] *** Chanakan left
[07:54] *** DarthGandalf joined
[08:16] *** dakkar joined
[13:37] <discord-raku-bot> <librasteve> Looking at some Cro examples on GH i have decided to just use class {} (ie no unit declaration or version in each class file) and then rely on META6.json for version / author for the whole package (maybe i will get corrected here if that’s bad practice)

[15:48] *** soverysour joined
[16:34] *** jgaz joined
[16:38] *** dakkar left
[17:29] *** soverysour left
[17:52] *** jgaz left
[18:37] *** soverysour_ joined
[18:51] *** PolarBearXL joined
[18:55] *** jgaz joined
[19:30] <jgaz> I tried some binary manipulation in Raku recently. There are some nice features, like `msb` but it seems odd to me that the right and left shift operators haven't been implemented. Is there some historical reason for this? I'm mainly just curious.

[19:48] <lizmat> m: say 1 +< 4

[19:48] <camelia> rakudo-moar 5a122c60a: OUTPUT: «16␤»

[19:48] <lizmat> you mean like that ?

[19:48] <lizmat> m: say 64 +> 4

[19:48] <camelia> rakudo-moar 5a122c60a: OUTPUT: «4␤»

[19:49] <lizmat> jgaz ^^

[19:51] <jgaz> lizmat. Weird. It's marked as unimplimented in the docs. I must have fat-fingered it, your example works on my end.

[19:51] <lizmat> could you give the URL where it is marked as unimplemented ?

[19:51] <jgaz> yeah, standby

[19:52] <jgaz> https://docs.raku.org/language/operators

[19:52] <jgaz> "Please note that this has not yet been implemented."

[19:56] <jgaz> Okay, I think I conflated `~<` and `~>` with `<+` and `+>` which are implemented.

[19:57] <jgaz> err... `+<`

[19:57] <lizmat> https://docs.raku.org/language/operators#infix_+%3C

[19:57] <lizmat> indeed

[19:58] <lizmat> jgaz:  *phew*

[19:58] *** PolarBearXL left
[20:00] <jgaz> Sorry about that. Well, now that I've made my sleep deprivation evident I have another question... wouldn't a unary version of left and right shift operators be generally useful? This would imply a single shift in either direction, akin to incrementing with `$x++`.

[20:04] <lizmat> m: sub prefix:«+<»($a) { $a +< 1 }; say +<1    

[20:04] <camelia> rakudo-moar 5a122c60a: OUTPUT: «2␤»

[20:05] <lizmat> m: sub prefix:«+>»($a) { $a +> 1 }; say +<164

[20:05] <camelia> rakudo-moar 5a122c60a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in quote words; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> b prefix:«+>»($a) { $a +> 1 }; say +<164⏏<EOL>␤    expecting …»

[20:05] <lizmat> m: sub prefix:«+>»($a) { $a +> 1 }; say +<64

[20:05] <camelia> rakudo-moar 5a122c60a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in quote words; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> ub prefix:«+>»($a) { $a +> 1 }; say +<64⏏<EOL>␤    expecting …»

[20:05] <lizmat> m: sub prefix:«+>»($a) { $a +> 1 }; say +>64

[20:05] <camelia> rakudo-moar 5a122c60a: OUTPUT: «32␤»

[20:06] <lizmat> fwiw, I don't this improves on readability

[20:07] <jgaz> Fair enough.

[20:09] <jgaz> Thanks for the help.

[20:12] <lizmat> yw

[20:45] <jgaz> So, semi-dumb question: when playing around with defining new operators only the Unicode angled quotes «...» seem to work. The ASCII stand-in is <<...>>, right?

[21:00] *** soverysour_ left
[23:04] <lizmat> jgaz: yes

[23:10] <lizmat> afk again&

