[01:43] *** kjp left
[01:45] *** kjp joined
[03:08] *** teatime joined
[04:00] <discord-raku-bot> <_elcaro_> If you know you hex string is well formed (ie. $hex.chars %% 2) then you could just to $hex.comb(2) eg. my ($a, $b) = $hex.comb(2);

[06:33] <discord-raku-bot> <bobby_jim_birdrock> That's the best of all.  Thank you.

[09:23] *** r1111l joined
[09:23] *** r1111l left
[09:46] <discord-raku-bot> <timemelon> can somebody point to the docs that talk about referring to operators as terms? eg &infix:<+> and &[+]

[09:53] <lizmat> strictly speaking, &infix:<+> is the subroutine name for the infix + operator

[09:53] <lizmat> and &[+] is a grammar construct to refer to &infix:<+> in a shorthand way

[09:54] <discord-raku-bot> <dr.shuppet> I'm far from an expert on this, but from what I know, operators are just subs with a non-standard name:  > &infix:<+>.WHAT (Sub+{is-pure})  Also see https://docs.raku.org/language/optut. The way to refer them as terms is a form of extended identifier: https://docs.raku.org/language/syntax#Extended_identifiers

[09:58] <discord-raku-bot> <dr.shuppet> The extended identifier works just like any other sub identifier:  > infix:<+>(5, 6) 11 

[10:00] <discord-raku-bot> <timemelon> thank you both!

[10:21] <lizmat> m: dd &[+] =:= &infix:<+>   # they're really the same

[10:21] <camelia> rakudo-moar d0ed8cd98: OUTPUT: «Bool::True␤»

[10:28] <discord-raku-bot> <dr.shuppet> Yeah I think &[+] is just syntactic sugar (correct me if I’m wrong)

[10:28] <lizmat> yup, it is

[10:28] <discord-raku-bot> <dr.shuppet> The actual symbol being &infix:<+>

[11:39] <discord-raku-bot> <dr.shuppet> I found it in roast also: https://github.com/Raku/roast/blob/master/S02-names/name.t#L71

[11:43] <discord-raku-bot> <dr.shuppet> And if you still doubt it is really syntactic sugar:  [0] > \&[RandomNonsense] ===SORRY!=== Missing infix inside R ------> \&[R⏏andomNonsense]     expecting any of:         infix         infix noun         infix stopper         statement list         term Other potential difficulties:     To pass an array, hash or sub to a function in Raku, just pass it as is.     For other uses of Perl's ref operator

[11:43] <discord-raku-bot> consider binding with ::= instead.     Parenthesize as \(...) if you intended a capture of a single variable.     ------> \⏏&[RandomNonsense]  [0] > &[randomNonsense] ===SORRY!=== Error while compiling: Missing infix inside [] ------> &[⏏randomNonsense]     expecting any of:         infix         infix noun         infix stopper         statement list         term 

[11:44] <discord-raku-bot> <dr.shuppet> Unlike this:  [0] > &infix:<test> ===SORRY!=== Error while compiling: Undeclared routine:     infix:<test> used at line 1. Did you mean 'infix:<+^>', 'infix:<⚛=>', 'infix:<÷>', 'infix:<∈>', 'infix:<⩶>'?  which is just parsed as an identifier, looked up in symbol table, and failing

[12:45] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/04/08/2024-14-15-1k-75/

[12:56] <discord-raku-bot> <dr.shuppet> Nice, I haven't been watching the developments about Raku for a while, glad to see things are moving forward!

[13:11] <discord-raku-bot> <antononcube> Sideways, too!

[13:15] <discord-raku-bot> <antononcube> Hmm... to clarify, I see the LLM endowments as "sideway" developments. I still think Raku-LLM is the best combination for most LLM related workflows, but at some point the language ecosystems start to become a factor.

[14:22] <discord-raku-bot> <bobby_jim_birdrock> m: my $hex = '0810'; my ($col, $row) = $hex.comb(2);

[14:22] <discord-raku-bot> <Raku eval>  

[14:41] *** vlad joined
[14:42] *** vlad left
[14:46] *** vlad joined
[15:47] *** gfldex left
[16:38] *** teatwo joined
[16:42] *** teatime left
[16:42] *** discord-raku-bot left
[16:43] *** discord-raku-bot joined
[16:44] *** gfldex joined
[16:53] *** teatwo left
[16:53] *** teatwo joined
[17:12] *** MasterDuke left
[20:01] *** vlad left
[21:25] *** cleo joined
[22:06] *** hudo left
[22:08] *** hudo joined
[23:40] *** deadmarshal_ left
[23:46] *** deadmarshal_ joined
