[00:19] *** MasterDuke joined
[04:25] *** defaultxr left
[05:19] *** ab5tract left
[05:19] *** ab5tract joined
[06:59] *** SmokeMachine left
[07:00] *** SmokeMachine joined
[14:18] *** deadmarshal_ left
[14:18] *** deadmarshal_ joined
[21:43] <thowe> the docs don't seem to cover this, so what does a "g" mean in a regex?  Like when I see something like m:g/\d/

[21:46] <lizmat> :g is short for :global

[21:47] <lizmat> m: say "1234" ~~ m/ \d /

[21:47] <camelia> rakudo-moar 6b9a163ef: OUTPUT: «｢1｣␤»

[21:47] <lizmat> m: say "1234" ~~ m:g/ \d /

[21:47] <camelia> rakudo-moar 6b9a163ef: OUTPUT: «(｢1｣ ｢2｣ ｢3｣ ｢4｣)␤»

[21:47] <lizmat> aka, return all possible matches

[21:49] <discord-raku-bot> <librasteve> thowe: this is the best doc for raku regex imo ... https://docs.raku.org/language/regexes#Common_adverbs

[21:49] <thowe> Ah, I see global in a different location...  Doesn't help me solve my issue though.  Red herring.  Proc::Async must be where I need to look.

[21:50] <discord-raku-bot> <librasteve> yeah - raku moved the adverbs from perl re (since they are just now regular raku adverbs ;-))

[21:53] <thowe> I suspect Proc::Async.stdout.tap doesn't have a way to specify that it should split on newlines the way $proc.stdout.lines does.

[22:16] <thowe> With tap you can get the output in a variable like so "$supply.tap(-> $v { say "$v" });"  but I can't seem to figure out how to use a variable other than $_ when doing "react { whenever $proc.stdout.lines {" 

[22:17] <thowe> how would I get lines in $line?

[22:17] <thowe> for example

[22:17] <thowe> looking at https://docs.raku.org/type/Proc/Async

[22:18] <discord-raku-bot> <librasteve> thowe: it would be very helpful to see you code alternatives in a gist or similar

[22:23] <thowe> Well, the documentation itself shows a good example of what I mean...  The first example shows "$proc.stdout.lines" and then the line is in $_.  The second example, "Proc::Async without using a react block:", shows  $proc.stdout.tap creating "$v".

[22:23] <thowe> How would I do the equiv of creating "$v" with the lines method?

[22:30] <thowe> Might be a moot point as I can't get a react block to actually do anything.

[22:35] <thowe> here's both versions in one snippet:  https://gitlab.com/-/snippets/3728658

[22:36] <thowe> The problem with tap, is that the lines I am getting from my maillog will be broken up, and so I can't rely on having an actual line to parse.

[22:38] <thowe> My problems with the lines/react method are legion.  How do you make your program do anything else other than the react loop?  How do you get the line as a variable you name like with tap?  Oh, yeah, also, why does it not actually seem to get any data ever...

[22:38] <thowe> tap seems to work until I get a half line, and then the other half of the line as another line.

[22:39] <thowe> I got this from an example in the book "Raku Recipes" but it doesn't really work.

[22:39] <thowe> recipe 2-3

[22:46] <thowe> I'm sure most of my confusion is just not understanding reactive programs or supplies or whatever, but the question about assigning a variable to lines remains

[22:48] <thowe> I'm really getting lost in the weeds here, though.  What I would really like is to know how to get tap to take the lines as they are given and not break them up.

[23:34] <thowe> so, trying to do something where I assemble the lines..

[23:35] <ab5tract> When creating a block, you can specify a signature. This allows you to name the parameter and reference it by that name in the block

[23:36] <ab5tract> m: (-> $param { dd :$param })(42)

[23:36] <camelia> rakudo-moar 6b9a163ef: OUTPUT: «:param(42)␤»

[23:36] <ab5tract> This works also for if

[23:38] <ab5tract> m: my %h = :k(‘v’); if %h<k> -> $value { dd :$value }

[23:38] <camelia> rakudo-moar 6b9a163ef: OUTPUT: «:value("v")␤»

[23:39] <ab5tract> Or anywhere that a block can fit

[23:43] <ab5tract> The reason the react block doesn’t get any data is because you have to call  start on the proc sync object

[23:44] <ab5tract> You can have this happen in your react block or assign the start promise into a variable before the react block is defined

[23:45] <ab5tract> https://docs.raku.org/type/Proc/Async

