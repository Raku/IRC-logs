[04:59] *** teatwo left
[07:48] *** teatime joined
[10:53] <discord-raku-bot> <a12l> @antononcube Thanks for the tip! I'm looking into getting Jupyter up and running on my machine

[11:42] *** MasterDuke left
[12:29] <discord-raku-bot> <antononcube> @a12l Please ask for help if you have any difficulties. (TBH, installing Jupyter is not trivial.)

[12:38] <discord-raku-bot> <a12l> Yes, see that. Need to postpone it a couple of weeks

[17:09] <discord-raku-bot> <a12l> What does the colon before the character class name mean? Perplexity answers that you should prepend predefined char classes with a colon, but it works without any problem without one. But I do see a difference in the result in the REPL, but can't identify the difference

[17:09] <discord-raku-bot> <a12l> https://cdn.discordapp.com/attachments/768511641758466088/1273690060633411627/image.png?ex=66bf87ce&is=66be364e&hm=679dc7820759d741eae9fc862abe550174f44c762a84f2651e0b10f1b1360cba&

[17:12] <discord-raku-bot> <librasteve> https://docs.raku.org/syntax/%3C%3Aproperty%3E - AI is often wrong ;-) in this case it is nonsensical to mix : with alpha

[17:13] <discord-raku-bot> <librasteve> m: say "Abc" ~~ / <:Ll> /

[17:13] <discord-raku-bot> <Raku eval>  ｢b｣ 

[17:13] <discord-raku-bot> <librasteve> ^^ this works because Ll is a unicode char property

[17:15] <discord-raku-bot> <librasteve> these are listed in the General Category table here https://en.wikipedia.org/wiki/Unicode_character_property

[17:16] <discord-raku-bot> <librasteve> one of the innovations of raku is that it adds deep integration with unicode in regexs

[17:26] <discord-raku-bot> <librasteve> here is a great set of posts on unicode that use raku rx examples ... https://dev.to/bbkr/utf-8-regular-expressions-20h0

[17:37] <discord-raku-bot> <a12l> But it still works?

[17:39] <discord-raku-bot> <a12l> From what I can understand <:alpha> should use a char class consisting of all unicode chars with the general category prop named "alpha". But from the table in https://docs.raku.org/syntax/%3C%3Aproperty%3E#(Regexes)_%3C:property%3E_%3C:property%3E I can't find any unicode general category named alpha.

[17:39] <discord-raku-bot> <a12l> So why does it work?

[17:40] <discord-raku-bot> <a12l> I assume here that alpha is defined somewhere in Raku that it's equal to "<:Letter>"

[17:41] <discord-raku-bot> <librasteve> I think that the compiler should flag <\alpha> and <:alpha> as errors - so I will raise a bug issue

[17:44] <discord-raku-bot> <librasteve> the https://docs.raku.org/language/regexes#Predefined_character_classes are raku concepts which are much more general and useful than unicode properties - a couple of them do map onto unicode properties as shown in the table - but in general they are not the same

[17:44] <discord-raku-bot> <a12l> Good to know!

[17:45] <discord-raku-bot> <a12l> What's the point of escaping the char class name inside angle brackets? And don't you just escape the first char, and not the whole char class name?

[17:45] <discord-raku-bot> <librasteve> please show an example

[17:47] <discord-raku-bot> <a12l> You just wrote <\alpha>, and yesterday you wrote  > while that works, I think its better style to include the \ like this: > m: say "Abc" ~~ rx { <-[\lower]> }

[17:47] <discord-raku-bot> <a12l> But maybe backlash have different semantics here?

[17:48] <discord-raku-bot> <librasteve> good catch - these are both errors on my part

[17:51] <discord-raku-bot> <a12l> Did you just typo add a backlash?

[17:52] <discord-raku-bot> <a12l> From what I understand, a backslash followed by a single char converts that literal char to the char class with that char as an alias for its name?

[17:53] <discord-raku-bot> <a12l> E.g. \w is equal to <alnum> , and \d is equal to <digit>?

[17:55] <discord-raku-bot> <librasteve> ok - I am going a bit slower than you ... here is the bug report https://github.com/rakudo/rakudo/issues/5622

[17:56] <discord-raku-bot> <librasteve> that covers the <:alpha> part of the discussion

[17:58] <discord-raku-bot> <librasteve> on the <[\alpha]> part, this was covered in our chat yesterday when I noted that only backslashed char classes can be used as components in custom char classes like <[\w]>

[17:58] <discord-raku-bot> <librasteve> now let me try to address your points one by one

[18:03] <discord-raku-bot> <librasteve> consider this custom char class ... <[\w]+[\\]> this will match all word chars \w plus any backslash char \ in the input string. the first backslash is used to denote the use of one of the built in predefined backslashed char classes as listed here https://docs.raku.org/language/regexes#Backslashed_character_classes. like any escape char you then need a way to override it if you want to use it directly.

[18:04] <discord-raku-bot> <librasteve> so, for clarity this is NOT escaping the first character, this is how you bring in the prefined char class \w

[18:07] <discord-raku-bot> <librasteve> exactly! the "shorthand" column in the https://docs.raku.org/language/regexes#Predefined_character_classes table gives those that have an equivalent

[18:10] <discord-raku-bot> <librasteve> sorry for my errors, I am also learning as I go ... hope you are enjoying the raku firehose learning experience

[18:11] <ab5tract> librasteve: I’ve flagged this issue before too, but never got around to making the problem solving ticket

[18:12] <discord-raku-bot> <librasteve> oh and I forgot to search previous issues

[18:12] <ab5tract> There’s no validation whatsoever of the builtin character classes. If you provide an invalid one, there’s no complaint or failure object, just a lack of a match

[18:13] <ab5tract> no worries, it’s kind of obscure to begin with.

[18:14] <discord-raku-bot> <a12l> Thanks for the explanation @librasteve!

[18:15] <discord-raku-bot> <a12l> Now I'm wondering, what's the difference between a char class and a sub-expression? Or is the former considered a subset to the later?

[18:16] <discord-raku-bot> <a12l> If I don't remember, if I've created a named regex and want to include that in another regex, I would write <name-of-regex in my new regex?

[18:20] <discord-raku-bot> <librasteve> The predefined character classes in the leftmost column are all of the form <name>, a hint to the fact that they are implemented as built-in named regexes.  <- that's what the docs have to say about it

[18:20] <discord-raku-bot> <librasteve> so, basically yes, this is raku eating it's own dogfood

[18:23] <discord-raku-bot> <a12l> Now I'm probably nitpicky (but I want to now exactly, so I don't get confused later), but isn't actually so that the predefined char classes have their name? And then you want to use them in a regex you surround name with angle brackets <name> so that Raku knows that it should treat name as a name for a char class?

[18:24] <discord-raku-bot> <a12l> I.e. I interpret that part of the docs as if the angle brackets is part of the char class name, but what is actually happen they show how you would use it in a regex?

[18:26] <discord-raku-bot> <librasteve> errr yes and yes ;-)

[18:28] <discord-raku-bot> <librasteve> consider this

[18:28] <discord-raku-bot> <librasteve> m: say "Abc" ~~ / <alpha>+ /

[18:28] <discord-raku-bot> <Raku eval>  ｢Abc｣  alpha => ｢A｣  alpha => ｢b｣  alpha => ｢c｣ 

[18:28] <discord-raku-bot> <librasteve> and this

[18:28] <discord-raku-bot> <librasteve> m: my regex my_alpha { \w }; say "Abc" ~~ / <my_alpha>+ /

[18:28] <discord-raku-bot> <Raku eval>  ｢Abc｣  my_alpha => ｢A｣  my_alpha => ｢b｣  my_alpha => ｢c｣ 

[18:30] <discord-raku-bot> <librasteve> its the same - illustrating how <alpha> and the other built ins work

[18:32] <discord-raku-bot> <a12l> Thanks! Now I understand why I misunderstood the docs yesterday and tried to write "Abc" ~~ rx { <![<lower>]> }

[18:33] <discord-raku-bot> <a12l> I thought that lower's actual name was <lower>, so I wrote that

[19:28] <ab5tract> m: say “Rr” ~~ /<:Lowercase>/

[19:28] <camelia> rakudo-moar f6b628f34: OUTPUT: «｢r｣␤»

[19:28] <ab5tract> m: say “Rr” ~~ /<:Lc>/

[19:28] <camelia> rakudo-moar f6b628f34: OUTPUT: «Nil␤»

[19:28] <ab5tract> m: say “Rr” ~~ /<:Ll>/

[19:28] <camelia> rakudo-moar f6b628f34: OUTPUT: «｢r｣␤»

[19:28] <ab5tract> Right, LowercaseLetter

[19:33] <ab5tract> Note that these are categories, rather than classes

[19:35] <discord-raku-bot> <librasteve> aka properties 🙃

[20:00] <discord-raku-bot> <a12l> I have a string, and I want to check that there's at least one letter, and if all letters are uppercase. My solution is to first apply ~~ rx { <upper>+ } on the string, and then apply ~~ rx { <alpha>+ }. If those two Match objects contain the same strings I conclude that there's at least one letter, and all letters are uppercase.  My question is, how do I compare those Match objects? Unsure how

[20:01] <lizmat> have you tried eq ?

[20:03] <discord-raku-bot> <a12l> Nope. eq compare strings, so does eq automatically to cast the objects into strings?

[20:03] <lizmat> m: "foo" ~~ / \w+ /; say $/ eq $/

[20:03] <camelia> rakudo-moar f6b628f34: OUTPUT: «True␤»

[20:04] <lizmat> eq coerces Cool objects to strings, and Match objects are Cool

[20:04] <lizmat> m: say Match ~~ Cool

[20:04] <camelia> rakudo-moar f6b628f34: OUTPUT: «True␤»

[20:05] <lizmat> m: say "42" + "666"

[20:05] <camelia> rakudo-moar f6b628f34: OUTPUT: «708␤»

[20:05] <discord-raku-bot> <a12l> Ah, Cool 😉

[20:05] <lizmat> even though these were strings, you can add them as long as they can be coerced to something numerical

[20:05] <discord-raku-bot> <a12l> Thanks

[20:05] <lizmat> m: say "42" + "foo"

[20:05] <camelia> rakudo-moar f6b628f34: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏foo' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[20:19] <discord-raku-bot> <a12l> m: "Tom-ay-to, tom-aaaah-to." ~~ / <alpha>+ /

[20:19] <discord-raku-bot> <Raku eval>  

[20:20] <discord-raku-bot> <a12l> Wait, it should match Tom (the first part before the first dash)?

[20:20] <discord-raku-bot> <a12l> Why doesn't match the result from my local Raduko repl?

[20:23] <discord-raku-bot> <a12l> What I'm wondering is what  I should so it matches against all the letters in the string, and not only ones before the first char that breaks the pattern

[20:24] <lizmat> m: say "Tom-ay-to, tom-aaaah-to." ~~ / <alpha>+ /

[20:24] <camelia> rakudo-moar f6b628f34: OUTPUT: «｢Tom｣␤ alpha => ｢T｣␤ alpha => ｢o｣␤ alpha => ｢m｣␤»

[20:44] <lizmat> m: say "Tom-ay-to, tom-aaaah-to." ~~ / <.alpha>+ /

[20:44] <camelia> rakudo-moar f6b628f34: OUTPUT: «｢Tom｣␤»

[20:44] <lizmat> the non-capturing version

[20:46] <discord-raku-bot> <nahita3882> you didn't print the result of the expression, so we don't see anything in the bot's output

[20:46] <discord-raku-bot> <nahita3882> in REPL, the printing automatically happens

[20:47] <discord-raku-bot> <a12l> ah, thanks! Will keep that in mind

[20:47] <discord-raku-bot> <nahita3882> To this end, you need the "global" modifier https://docs.raku.org/language/regexes#Global

[20:47] <discord-raku-bot> <nahita3882> this won't stop at the first match

[20:48] <discord-raku-bot> <nahita3882> we enable this "adverb" (adverb because it affects how the match is performed) with :g

[20:49] <discord-raku-bot> <nahita3882> can't directly put it like :g/ .../ or /:g .../ because it's a matching adverb

[20:49] <discord-raku-bot> <nahita3882> so we need to use m:g/ ... /

[20:50] <discord-raku-bot> <nahita3882> np; normally it warns about unused values but with smartmatch operator (~~), i guess it thinks it can have side effects so it doesn't

[20:50] <discord-raku-bot> <nahita3882> m: 32

[20:51] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of constant integer 32 in sink context (line 1) 

[23:12] *** MasterDuke joined
