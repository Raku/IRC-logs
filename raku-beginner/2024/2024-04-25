[02:17] *** jgaz left
[05:22] *** discord-raku-bot left
[05:23] *** discord-raku-bot joined
[08:09] *** dakkar joined
[15:26] *** teatime left
[15:28] *** teatime joined
[16:28] *** samebchase left
[16:28] *** camelia left
[16:28] *** Tirifto left
[16:28] *** human-blip left
[16:28] *** thowe left
[16:29] *** dakkar left
[16:32] *** thowe joined
[16:32] *** camelia joined
[16:32] *** Tirifto joined
[16:32] *** human-blip joined
[16:33] *** samebchase joined
[16:44] <ab5tract> glad my pain could bring some smiles into the world ;)

[22:30] <discord-raku-bot> <timemelon> I'm getting some behaviour from regexes that I don't understand

[22:30] <discord-raku-bot> <timemelon> I'm used to * and + from PCREs

[22:31] <discord-raku-bot> <timemelon> echo 'words: 12345' | grep -oP '\d+' and echo 'words: 12345' | grep -oP '\d*' both return 12345

[22:32] <discord-raku-bot> <timemelon> when I try echo 'words: 12345' | raku -e 'slurp.match(/\d+/).Str.say' I get 12345 just the same

[22:32] <discord-raku-bot> <timemelon> but echo 'words: 12345' | raku -e 'slurp.match(/\d*/).Str.say' gives me an empty match

[22:33] <discord-raku-bot> <timemelon> how come \d* doesn't match 12345?

[22:36] <discord-raku-bot> <timemelon> (also: is this the most idiomatic way to use raku as a drop in grep/sed/etc)

[22:47] <ab5tract> it matches '0 or more', so when it hits that first 'w' from words, it has successfully matched 0 times

[22:48] <ab5tract> definitely a bit of a gotcha, though, I agree

[22:50] <ab5tract> m: "words: 12345" ~~ /\D+(\d*)/ ==> say()

[22:50] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «｢words: 12345｣␤ 0 => ｢12345｣␤»

[22:51] <ab5tract> or to drive the '0 or more' rule home:

[22:51] <ab5tract> m: "words: 12345" ~~ /\D*(\d*)/ ==> say()

[22:51] <camelia> rakudo-moar 735fc4f3d: OUTPUT: «｢words: 12345｣␤ 0 => ｢12345｣␤»

[22:53] <discord-raku-bot> <timemelon> ahh that makes sense thank you

[22:53] <discord-raku-bot> <timemelon> I guess the difference between the grep example and that is that grep is finding the longest match while raku is finding the first match

[22:54] <ab5tract> yeah, we tend to refer to it as the "greediness" of the regex expression

[22:55] <ab5tract> * is very gregarious, not greedy at all :)

[22:58] <ab5tract> As to the idiom, I might me more likely to use `$*IN.slurp ~~ /regex/` but it's really a matter of taste

[23:01] <ab5tract> There's also `-n` which allows: `echo "words: 12345" | raku -ne '$_ ~~ /\D*(\d*)/ ==> say()'`\

[23:25] <discord-raku-bot> <timemelon> oh I didn't know about -n, that's nice ty

[23:27] <discord-raku-bot> <timemelon> is there a reason you prefer the explicit $*IN over a bare slurp?

