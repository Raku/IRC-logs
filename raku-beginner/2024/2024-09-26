[07:57] *** dakkar joined
[14:56] <discord-raku-bot> <antononcube> Question about private class methods: Is it true that a class trusts itself? I.e. a method of a class A can use private methods of A on any instance of A? (Not just self.)

[14:57] <discord-raku-bot> <antononcube> This might seem obvious, and it seems to be true, but, well, I want to be sure... üôÇ

[15:05] <lizmat> m: class A { method !b() { say "private" }; method c() { A.new!b } }; A.new.c

[15:05] <camelia> rakudo-moar 3ca83dc13: OUTPUT: ¬´private‚ê§¬ª

[15:05] <lizmat> antononcube so: yes

[15:08] <discord-raku-bot> <antononcube> Ok. Thanks!

[15:09] <discord-raku-bot> <antononcube> Should it be mentioned in the documentation or it can deduced from Raku's core principles.

[15:10] <discord-raku-bot> <antononcube> @lizmat Nice short demo example, BTW.

[15:11] <lizmat> in dispatch, a private method will be looked up in the private method table of the class's meta object

[15:11] <lizmat> the invocant is set to the class, so in that sense it follows out of Raku's core implementation

[15:13] <discord-raku-bot> <antononcube> Yeah, sounds good/right.

[15:18] <discord-raku-bot> <holmdunc> I think Scala made that distinction possible ("private" vs "private this")

[16:21] *** Chanakan left
[16:25] *** Chanakan joined
[16:55] *** dakkar left
[19:19] *** destroycomputers left
[19:20] *** destroycomputers joined
