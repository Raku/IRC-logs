[00:00] <discord-raku-bot> <vendethiel> You can use not for a low-priority alternative

[00:01] <discord-raku-bot> <vendethiel> Adverb binding is not obvious

[07:04] <discord-raku-bot> <briandouglas_71953> Yea, that feel nicer

[09:57] <discord-raku-bot> <briandouglas_71953> Updated container to add autowiring: https://gist.github.com/BrianDouglasIE/f287483945286a60ac9668b4425a4881

[09:58] <discord-raku-bot> <briandouglas_71953> Could someone explain why in line 24 i had to add this check and not $param.name ~~ '%_' ?

[09:58] <discord-raku-bot> <briandouglas_71953> I wasn't sure how else to handle

[10:31] *** CIAvash joined
[11:19] <lizmat> m: dd (my method a() { }).signature

[11:19] <camelia> rakudo-moar 0bdd27db8: OUTPUT: «:(Mu $:: *%_)␤»

[11:19] <lizmat> methods always get a *%_ added to their signature, unless there is a slurpy hash already

[11:19] <lizmat> briandouglas_71953 ^^

[11:50] *** CIAvash left
[13:15] *** MasterDuke joined
[13:46] <discord-raku-bot> <briandouglas_71953> I’ll investigate what a slurpy hash is, thanks

[13:51] <discord-raku-bot> <antononcube> @briandouglas_71953 What are trying to do? What is DI container?

[13:52] <discord-raku-bot> <antononcube> I asked an LLM these questions over your code. Did you / have you considered asking an LLM to do a code review of that gist?

[13:53] <discord-raku-bot> <antononcube> (if "DI" stands for "Dependency Infusion" then that topic seems to have big enough foodprint on the web, hence LLMs should be useful.)

[13:56] <discord-raku-bot> <briandouglas_71953> Dependency Injection container, I ask chatgpt but it’s kinda just giving me my own code back

[13:58] <discord-raku-bot> <antononcube> Haha! Let me try using LLMs...

[14:00] <discord-raku-bot> <antononcube> BTW, thanks for posting thes code and questions/observations -- it is thought provoking. (To me at least...)

[14:10] <discord-raku-bot> <briandouglas_71953> I notice chatgpt doesn’t under stand method return types.

[14:10] <discord-raku-bot> <antononcube> Which model?

[14:10] <discord-raku-bot> <briandouglas_71953> 4

[14:11] <discord-raku-bot> <briandouglas_71953> It puts the type after the bracket, ) —>

[14:11] <discord-raku-bot> <antononcube> Ok. I assume you mean "gpt-4". Can you try "gpt-4o" ?

[14:14] <discord-raku-bot> <yallgottamove.> Hello everybody, I'm new to Raku and I have a question but couldn't find the answer anywhere.  How can I access the nth char of a string? In most other languages you can do myStr[n], but it doesn't seem to work the same in Raku

[14:15] <discord-raku-bot> <antononcube> There are at least five ways of doing that. The closest to your notation -- I think -- is:  $myStr.comb[$n-1] .

[14:16] <discord-raku-bot> <yallgottamove.> I imagined there were multiple ways to do it hehe

[14:16] <discord-raku-bot> <yallgottamove.> very cool I hadn't thought about using comb

[14:17] <discord-raku-bot> <yallgottamove.> thanks!

[14:20] <discord-raku-bot> <antononcube> @yallgottamove.   my $str = "RakuLang"; my $n = 3;  # Method 1 say $str.substr($n-1, 1);  # Method 2 say $str.comb[$n-1];  # Method 3 say $str.chars > $n-1 ?? $str.comb[$n-1] !! "Out of bounds";  # Method 4 say $str.ords[$n-1].chr;  # Method 5 say substr($str, $n-1, 1); 

[14:23] <discord-raku-bot> <briandouglas_71953> That is 4o

[14:25] <discord-raku-bot> <briandouglas_71953> Example with inccorrect syntax from gpt 4o:  class SessionStorage {     has Logger $!logger;      method new(Logger $logger) --> SessionStorage {         self.bless(:$logger);     }      method create() --> Nil {         $!logger.log('Session Created');     } }  

[14:25] <discord-raku-bot> <antononcube> @yallgottamove. Basically, only 1 and 2 are different. The others are "reasonably contrived" versions. I hope others can provide radically different methods.

[14:27] <discord-raku-bot> <yallgottamove.> really cool, thanks @antononcube!

[14:31] *** CIAvash joined
[14:33] <discord-raku-bot> <antononcube> @briandouglas_71953 I do not observe those kind of errors. But I just did code analysis and review using LLMs. See here: https://github.com/antononcube/RakuForPrediction-blog/blob/main/Notebooks/Jupyter/DI-gist-code-analysis.ipynb

[14:35] <discord-raku-bot> <antononcube> @briandouglas_71953 For me the most informative statement in that notebook is: > The code exemplifies the Dependency Injection (DI) design pattern, specifically the Service Locator variant, where a container is used to manage and inject dependencies. The Container class acts as a service locator that provides instances of requested types and resolves their dependencies.

[14:55] <discord-raku-bot> <briandouglas_71953> That is excellent thank you

[14:58] <discord-raku-bot> <briandouglas_71953> It’s interesting that it doesn’t want to auto wire the logger. I seen this on chat gpt also. I feel that is not correct.

[14:59] <discord-raku-bot> <briandouglas_71953> It’s due to the logger taking no constructor args. But for usability I wouldn’t want any exceptions.

[15:28] <discord-raku-bot> <antononcube> What the LLMs do if you ask that explicitly to be put in?

[16:17] <discord-raku-bot> <nahita3882> you can make use of defined-or setting:  if not %!bindings{$abstract}:exists {   %!bindings{$abstract} = $factory; } becomes  %!bindings{$abstract} //= $factory;  but technically they are not equivalent: if the corresponding value is "undefined", i.e., a type Callable object, first approach won't trigger a set while the second will. However, I assume you want defined Callbacks anyway, in which case

[16:17] <discord-raku-bot> signature becoming Callable:D is perhaps another possible improvement.

[17:32] *** CIAvash left
[17:38] <discord-raku-bot> <briandouglas_71953> Thanks @nahita3882 , that is a good tip

[19:35] *** habere-et-disper joined
[19:36] <habere-et-disper> Did I get this working before -- writing a mathematical absolute value operataor...

[19:36] <habere-et-disper> m: sub circumfix:<| |>( $a ) { abs $a }; say |-4|;

[19:36] <camelia> rakudo-moar 0bdd27db8: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> rcumfix:<| |>( $a ) { abs $a }; say |-4|⏏;␤    expecting any of:␤        prefix␤        term␤»

[20:19] <habere-et-disper> Seems to be something about overloading | but multi doesn't help.

[20:19] <habere-et-disper> m: sub circumfix:<A A>( $a ) { abs $a }; say A<-4>A;

[20:19] <camelia> rakudo-moar 0bdd27db8: OUTPUT: «4␤»

[21:27] <habere-et-disper> If I use a non-overloaded operator, eg unicode full width vertical line, then this works:

[21:27] <habere-et-disper> m: sub circumfix:<｜ ｜>( $a ) { abs $a }; say ｜-4+1｜;

[21:27] <camelia> rakudo-moar 0bdd27db8: OUTPUT: «3␤»

[21:28] <habere-et-disper> Is there a way to make that work with the ascii standard vertical line/bar | ?

[22:20] <lizmat> || and && are grammar constructs, because they allow for short-circuiting

[22:21] <lizmat> in RakuAST this *might* change

[22:21] <lizmat> so at least until then: no, there is no way to make that work with |

[22:21] <lizmat> habere-et-disper: ^^

[22:23] <habere-et-disper> Thanks for clarity lizmat. :)

[22:43] <habere-et-disper> Where can I read more about RakuAST::Deparse::Highlight ?

[23:07] *** habere-et-disper left
[23:52] <discord-raku-bot> <antononcube> @briandouglas_71953  Do you mind if I use your gist code in blog posts or in LLM related presentations?

