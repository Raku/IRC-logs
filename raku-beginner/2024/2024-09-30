[07:52] *** dakkar joined
[11:28] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/09/30/2024-40-done-25/

[12:52] <sjn> nice

[16:38] *** dakkar left
[18:39] *** discord-raku-bot left
[18:39] *** discord-raku-bot joined
[20:38] <discord-raku-bot> <timemelon> does raku have any ki

[20:39] <discord-raku-bot> <timemelon> like haskell's mapMaybe, taking a function which both transforms and decides whether to include the result

[20:40] <discord-raku-bot> <timemelon> I've found that using an empty slip in a map does something similar, like .map({ condition ?? do-something-to($_) !! |() })

[20:41] <discord-raku-bot> <timemelon> but I was wondering if there's something already made for that

[20:45] <discord-raku-bot> <scullucs> Combine .map and .grep?

[20:47] <discord-raku-bot> <scullucs> m: <1 2 3 4>.grep(* %% 2).map(* ** 3)

[20:47] <discord-raku-bot> <Raku eval>  

[20:47] <discord-raku-bot> <scullucs> m: say <1 2 3 4>.grep(* %% 2).map(* ** 3)

[20:47] <discord-raku-bot> <Raku eval>  (8 64) 

[22:31] <lizmat> m: .say for <1 2 3 4>.map: { $_ if $_ %% 2 }    # timemelon

[22:31] <camelia> rakudo-moar 693f15ead: OUTPUT: «2␤4␤»

[22:31] <lizmat> any condition that does not fire, produces the empty Slip

[22:32] <lizmat> so, what I understand of ki, .map is basically that, depending on the code you put in the map

[22:33] <lizmat> m: .say for <1 2 3 4>.map: { $_ * 2 if $_ %% 2 }    # modifying the result if there is a match

[22:33] <camelia> rakudo-moar 693f15ead: OUTPUT: «4␤8␤»

[22:42] <discord-raku-bot> <scullucs> Thanks lizmat 🙂

[23:15] *** Chanakan left
[23:26] <discord-raku-bot> <timemelon> that's exactly what I was after, ty!

