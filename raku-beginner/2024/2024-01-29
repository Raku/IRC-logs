[00:52] *** Manifest0 left
[05:05] *** hudo_ joined
[06:18] *** hudo_ left
[08:59] *** dakkar joined
[10:00] <ab5tract> The L10N work necessarily involves collecting all “operators” (remember, these are just functions with funny names) so yeah, definitely it is where you want to look

[10:03] <lizmat> Note that most operators are not alphanumeric: they are not localized, only the alphanumeric ones

[10:07] <discord-raku-bot> <Nahita> might be error prone but can we grep the keys of CORE? like

[10:07] <discord-raku-bot> <Nahita> m: CORE::.grep({ .value ~~ Callable && .key ~~ /^ "\&" .* "fix:<" /})>>.key.map({ .comb(/ <after ":<"> .* <before '>'> /).head }).sort.list.raku.put

[10:07] <discord-raku-bot> <Raku eval>  ("!", "!=", "!~~", "\%", "\%\%", "\&", "\&\&", "(\&)", "(+)", "(-)", "(.)", "(==)", "(^)", "(cont)", "(elem)", "(|)", "*", "**", "+", "+", "+\&", "++", "++", "++⚛", "+^", "+^", "+|", ",", "-", "-", "--", "--", "--⚛", "..", "...", "...^", "..^", "/", "//", ":\{ }", "=", "=:=", "==", "===", "=~", "=~=", "?", "?\&", "?^", "?^", "?|", "X", "Z", "[ ]", "[ ]", "[; ]", "^", "^", "^..", "^...", "^...^",

[10:07] <discord-raku-bot> "^..^", "^^", "^…", "^…^", "after", "and", "andthen", "before", "but", "cmp", "coll", "div", "does", "eq", "eqv", "gcd", "ge", "gt", "i", "lcm", "le", "leg", "let", "lt", "max", "min", "minmax", "mod", "ne", "not", "notandthen", "o", "or", "orelse", "so", "temp", "unicmp", "x", "xor", "xx", "\{ }", "\{ }", "\{; }", "|", "|", "||", "~", "~", "~\&", "~^", "~^", "~|", "~~", "×", "÷", "…", "…^", "ⁿ", "∈",

[10:07] <discord-raku-bot> "∉", "∊", "∋", "∌", "∍", "−", "−", "∖", "∘", "∩", "∪", "≅", "≠", "≡", "≢", "≤", "≥", "≼", "≽", "⊂", "⊃", "⊄", "⊅", "⊆", "⊇", "⊈", "⊉", "⊍", "⊎", "⊖", "⚛", "⚛++", "⚛+=", "⚛--", "⚛-=", "⚛=", "⚛−=", "⩵", "⩶") 

[10:08] <discord-raku-bot> <Nahita> m: CORE::.grep({ .value ~~ Callable && .key ~~ /^ "\&" .* "fix:<" /}).elems.put

[10:08] <discord-raku-bot> <Raku eval>  159 

[10:08] <discord-raku-bot> <Nahita> counts aliases too

[10:11] <discord-raku-bot> <Nahita> on 2023.09 it reported 160 so at least 1 operator added between glot.io's version and that, which seems to be ⇒

[10:13] <lizmat> indeed, as an alias for =>

[11:33] *** habere-et-disper joined
[11:34] <habere-et-disper> m: .say for 1...5...3

[11:34] <camelia> rakudo-moar aa1b89daf: OUTPUT: «1␤2␤3␤4␤5␤»

[11:35] <habere-et-disper> m: say gather .take for 1...5...3

[11:35] <camelia> rakudo-moar aa1b89daf: OUTPUT: «(1 2 3 4 5 4 3)␤»

[11:36] <habere-et-disper> Why doesn't say print the whole sequence?

[11:40] <habere-et-disper> m: dd 1...5...3

[11:40] <camelia> rakudo-moar aa1b89daf: OUTPUT: «(1, 2, 3, 4, 5, 4, 3).Seq␤»

[11:41] <lizmat> habere-et-disper: no idea, feels like a bug :-)

[11:41] <habere-et-disper> .say for (1, 2, 3, 4, 5, 4, 3).Seq

[11:41] <lizmat> m: .say for (1, 2, 3, 4, 5, 4, 3).Seq

[11:41] <camelia> rakudo-moar aa1b89daf: OUTPUT: «1␤2␤3␤4␤5␤4␤3␤»

[11:42] <lizmat> m: Q|.say for 1...5...3|.AST.EVAL

[11:42] <camelia> rakudo-moar aa1b89daf: OUTPUT: «1␤2␤3␤4␤5␤4␤3␤»

[11:42] <lizmat> looks like it does do the right thing in RakuAST

[11:43] <lizmat> habere-et-disper: could you still make an issue for it ?

[11:44] <habere-et-disper> Sure, this evening. Thanks for confirming.

[11:44] <lizmat> you're welcome and thanks in advance!

[11:50] <lizmat> habere-et-disper: BTW, .put, .print, .note suffer from the same issue

[11:51] *** habere-et-disper left
[11:52] <lizmat> so I wonder if it's really about .say at all

[12:27] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/01/29/2024-05-brain-nrg/

[13:47] <tbrowder__> .ask aruniecrisps are you interested in producing calendars in your many-languages projects?

[14:32] <discord-raku-bot> <aruniecrisps> Are there any resources on writing slangs?

[14:38] <discord-raku-bot> <antononcube> Good guestion. I think (as far as I can recall) slangs are not part of the language. I would advice looking up packages for simple slangs, like, say Roman numbers.

[14:38] <discord-raku-bot> <antononcube> I think I tried to find a package somebody wrote about LISP. Also, many of those packages are fairly old.

[14:38] <discord-raku-bot> <librasteve> hmmm - some of the packages use the "old fashioned" way ... need to check that you are using the new AST based approach

[14:39] <discord-raku-bot> <librasteve> also lizmat did a set of AST posts oin Nov 2023 ish iirc

[14:40] <discord-raku-bot> <librasteve> I'm pretty sure that this one uses the latest approach ... https://github.com/alabamenhu/PolyglotBrainfuck

[14:40] <discord-raku-bot> <librasteve> (pardon my french)

[14:41] <discord-raku-bot> <librasteve> https://dev.to/lizmat/series/23109

[14:45] <discord-raku-bot> <librasteve> https://github.com/lizmat/Slangify/tree/main

[14:45] <discord-raku-bot> <librasteve> ^^ this

[14:45] <discord-raku-bot> <antononcube> @librasteve Good point/links, but I personally am not inclined to use language features that are not officially released.

[14:46] <discord-raku-bot> <antononcube> I understand and admire the long/tedious/hard work on RakuAST, but until it gets "main-stream" I am not inclined to use it.

[14:47] <discord-raku-bot> <antononcube> Again, that is a personal view. Mostly, because I try and look for "production level" and "reproducible research" applications of Raku.

[14:50] <discord-raku-bot> <librasteve> okaaay - I could be mixing up the latest language facilities for slang and the wider AST project, looking at the code in the libs I referenced, I do not see any dependency on PREVIEW pragma

[14:51] <discord-raku-bot> <librasteve> lizmat: please do chime in and let us know the facts!

[15:47] <lizmat> aruniecrisps for activating slangs, I would recommend using https://raku.land/zef:lizmat/Slangify

[15:48] <lizmat> .oO( we of Toilet Duck recommend Toilet Duck :-)

[15:50] <lizmat> as to examples: I would recommend looking at the code of Slang::Tuxic / ::Subscripts / ::Roman / ::Piersing / ::Otherwise / ::Emoji

[15:50] <lizmat> (which all use Slangify)

[16:25] <discord-raku-bot> <librasteve> lizmat: please can you tell us if this approach (use Slangify) depends on non production raku.

[16:28] <lizmat> it's all Raku code in there, nothing fancy, if that is what you mean?

[16:28] <lizmat> not sure what you mean with "non production raku"

[16:30] <discord-raku-bot> <antononcube> @lizmat I think @librasteve  is asking is the Raku "standard", not depending on: (1) compiler only features, (2) preview or experimental features.

[16:31] <lizmat> the slang interface will be different in RakuAST, and the Grammar as well

[16:32] <lizmat> so I wanted to create a consistent interface for activating slangs that would make a. consistent, b. not relying on internals, c. making transition to RakuAST / Raku grammar easier

[16:33] <lizmat> that is Slangify

[16:33] <lizmat> maybe Slangify should be core...

[16:35] <lizmat> it does not depend on any e.PREVIEW features

[16:45] <discord-raku-bot> <antononcube> @lizmat Thanks!

[16:59] <discord-raku-bot> <aruniecrisps> Thanks for all your help @lizmat! I've bookmarked everything you've sent

[16:59] <lizmat> you're welcome!

[17:01] <discord-raku-bot> <aruniecrisps> I'm also looking for a Raku equivalent of a job scheduler like Sidekiq (https://sidekiq.org/) or Oban (https://hexdocs.pm/oban/Oban.html), any tips?

[17:03] <lizmat> perhaps https://raku.land/zef:jonathanstowe/Chronic ?

[17:05] <discord-raku-bot> <aruniecrisps> Not exactly, I was looking for something that would run background tasks in response to requests

[17:05] <lizmat> perhaps Cro?  https://cro.services

[17:08] <discord-raku-bot> <aruniecrisps> I'm using Cro already for the app, does it have a job scheduler baked in?

[17:09] <discord-raku-bot> <aruniecrisps> Like for example how would I fire off an email as a background job and return some data?

[17:09] <lizmat> aha: https://docs.raku.org/language/control#start

[17:10] <lizmat> m: my $p = start { sleep 1; say "slept nicely" }; say "waiting"; $p.await; say "waited"

[17:10] <camelia> rakudo-moar aa1b89daf: OUTPUT: «waiting␤No such method 'await' for invocant of type 'Promise'␤  in block <unit> at <tmp> line 1␤␤»

[17:10] <lizmat> m: my $p = start { sleep 1; say "slept nicely" }; say "waiting"; await $p; say "waited"

[17:10] <camelia> rakudo-moar aa1b89daf: OUTPUT: «waiting␤slept nicely␤waited␤»

[17:11] <discord-raku-bot> <aruniecrisps> Interesting so you would use the language itself to solve that problem

[17:16] <discord-raku-bot> <antononcube> I guess, when the student is ready, the programming language appears...

[17:17] <lizmat> yeah, async / events are built into the Raku core

[17:34] <discord-raku-bot> <antononcube> I think, that is the most unstudied by functionality area of Raku.

[17:35] <discord-raku-bot> <antononcube> *... unstdudied by me...

[17:35] *** dakkar left
[17:36] <discord-raku-bot> <antononcube> It is in my TODO list to review those functionalities and think / consider how to utilize them in the LLM packages.

[18:00] <discord-raku-bot> <librasteve> lizmat: thanks for explanation on Slangify

[18:07] <discord-raku-bot> <librasteve> (I assumed that the new Slang approach was tied to the experimental AST based on the various blog info I have read - see comments above - and anton rightly raised that as a possible concern ... so now you have explanied the role of the Slangify module to remove this dependency and allow for a smooth transition all is clear)

[18:52] *** hudo_ joined
[19:26] <discord-raku-bot> <scullucs> Can I get the Test module to output backtrace info when a test fails?

[19:39] <discord-raku-bot> <scullucs> (if that makes any sense)

[19:42] <discord-raku-bot> <librasteve> I would try eg zef test . --verbose (or --debug)

[19:43] <discord-raku-bot> <scullucs> Hmm... I'm not using zef for testing.

[19:44] <discord-raku-bot> <scullucs> (will look at how zef does it)

[19:44] <discord-raku-bot> <librasteve> I also use App::Prove6 but that does not seem to have as good debug option

[20:12] <discord-raku-bot> <gfldex> Unless you use throws-like you can put your own CATCH block into the test file and display the whole stacktrace.

[20:14] <discord-raku-bot> <scullucs> Heh. Turns out I need this because a throws-like test is failing 🙂

[20:14] <discord-raku-bot> <scullucs> But I'll keep your idea in mind.

[20:16] <discord-raku-bot> <gfldex> You could .wrap &throws-like.

[20:17] <discord-raku-bot> <scullucs> Getting a bit complicated for my skill level :/

[20:26] <discord-raku-bot> <gfldex> m:     use Test;      &throws-like.wrap(-> $code, |rest {         callwith({             $code();             CATCH { default { say .backtrace.full; .rethrow } }         }, |rest);     });      throws-like { die }, X::AdHoc, 'something bad happend'; 

[20:26] <discord-raku-bot> <Raku eval>  # Subtest: something bad happend     1..2   in method throw at SETTING::src/core.c/Exception.pm6 line 62   in sub die at SETTING::src/core.c/control.pm6 line 247   in block  at main.raku line 10   in block  at main.raku line 5   in block  at /nix/store/paigpapymi5rpv51zjnpv7xlgcym4752-rakudo-2022.02/share/perl6/core/sources/2D4A7CA10695CD2B374573413D261A660E282E2A (Test) line 635   in block  at

[20:26] <discord-raku-bot> /nix/store/paigpapymi5rpv51zjnpv7xlgcym4752-rakudo-2022.02/share/perl6/core/sources/2D4A7CA10695CD2B374573413D261A660E282E2A (Test) line 633   in block  at /nix/store/paigpapymi5rpv51zjnpv7xlgcym4752-rakudo-2022.02/share/perl6/core/sources/2D4A7CA10695CD2B374573413D261A660E282E2A (Test) line 437   in sub subtest at

[20:26] <discord-raku-bot> /nix/store/paigpapymi5rpv51zjnpv7xlgcym4752-rakudo-2022.02/share/perl6/core/sources/2D4A7CA10695CD2B374573413D261A660E282E2A (Test) line 435   in sub throws-like at /nix/store/paigpapymi5rpv51zjnpv7xlgcym4752-rakudo-2022.02/share/perl6/core/sources/2D4A7CA10695CD2B374573413D261A660E282E2A (Test) line 630   in sub callwith at SETTING::src/core.c/control.pm6 line 133   in block  at main.raku line 4   in block <unit> at

[20:26] <discord-raku-bot> main.raku line 10      ok 1 - code dies     ok 2 - right exception type (X::AdHoc) ok 1 - something bad happend 

[20:26] <discord-raku-bot> <gfldex> @scullucs ^^^ there you go!

[20:27] *** hudo_ left
[20:27] <discord-raku-bot> <scullucs> Wow, cool, thanks a bunch!

[20:39] <discord-raku-bot> <aruniecrisps> can you use java libraries with raku when compiling to the JVM?

[20:43] <discord-raku-bot> <antononcube> No.

[20:44] <discord-raku-bot> <antononcube> I do not think the Raku-JVM is actively worked on. (Few years ago, I spent way too much time trying to figure out how Java to be used with Raku and vice versa...)

