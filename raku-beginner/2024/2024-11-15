[03:37] *** Heptite joined
[05:45] *** teatwo left
[05:46] <discord-raku-bot> <dwinkley> Tysm

[06:11] *** Heptite left
[06:33] *** Heptite joined
[08:55] <discord-raku-bot> <librasteve> here is a more functional way that I think is more in like with your original question

[08:55] <discord-raku-bot> <librasteve>  say gather {     @inp.map: -> $inp is rw {         %replace.map( { $inp .= subst(.key, .value) } );         take $inp        }    } 

[09:12] *** teatime joined
[14:04] <discord-raku-bot> <nahita3882> as for the root cause of the error, here is a way to check what's going on  Cannot resolve caller reduce(Seq:D: Block:D, Str:D) 

[14:51] <discord-raku-bot> <nahita3882> as for the root cause of the error, here is a way to check what's going on  Cannot resolve caller reduce(Seq:D: Block:D, Str:D)  Here, the : after the first argument's type (Seq:D) means this was actually a method call, which in fact it was on .pairs of a Hash. In methods, the "self" is delimited by a succeeding : to separate itself from the following arguments. So, you called .reduce on a Seq:D (by the

[14:51] <discord-raku-bot> way, the :Ds mean these are defined objects, not undefined (type) objects; Raku calls them "type smileys" :D), with 2 arguments: a Block of code and a String.  The error says this was not a fine way of calling and lists what it considers okay. We can check the documentation to see what's what more clearly. To this end, I go to the documentation website, type "reduce" and choose the (top) "Composite" one (where each

[14:51] <discord-raku-bot> "reduce" candidates possibly from different types, be it methods or free form subroutines, are compiled together).  Now I arrive at this page. Conveniently, on the left is a Table of Contents bar that shows which Types had to do with "reduce". Recalling that we called the method form on a Seq, we look for Seq. However, it has only List, Supply and Any. Then how did it work?! Well, every Sequence is also an Any, so by

[14:51] <discord-raku-bot> the virtue of inheritance (graph here), that's what's tried to be called. So, we jump there.  It lists 3 candidates  multi method reduce(Any:U: & --> Nil) multi method reduce(Any:D: &with) multi        reduce (&with, +list) 

[14:51] <discord-raku-bot> <nahita3882> We called a method, so the first two are of interest to us. Interestingly, those two's signatures are (almost) exactly what the error reported! The only difference is error also reports *%_, but that's an unimportant detail because every method by default has that (docs, on why and more); it essentially slurps all the extra named arguments to ease inheritance calls.  Okay, we had a üòÑ Sequence, so it

[14:51] <discord-raku-bot> was an Any:D, i.e., we conclude that the 2nd listed method is what we can use to call .reduce on Seq:Ds: you can only pass a binary Block, not further arguments including the "initial" value in your attempt unfortunately.  To fix this to adhere to this method's calling way, you are essentially expected to put the initial value before the main Seq you got, then call reduce with the Block you have. Then we have:

[14:52] <discord-raku-bot> <nahita3882>  ($_, |%replace.pairs).reduce(-> $acc, $elt { ... } ) where we make a List where the first element is the initial value, the rest is the pairs you got; | prefix operator says "slip these into the list", so you have 1 + N elements instead of 1 + 1. That would conclude the "workaround", except it doesn't :p  Hashes, when iterated, yield the pairs anyway, so you can remove the .pairs call, i.e., ($_,

[14:52] <discord-raku-bot> |%replace).reduce(...) would work the same. As an aside, we are now calling the .reduce method on Lists, whose signatures are listed on the same page linked above, but it's actually the same with Any's signatures. XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Lastly, an arguable disadvantage of this slipping to make a new list is a little bit time consuming -- it would be nice if we didn't have to go through the %replace's pairs

[14:52] <discord-raku-bot> twice in the process (one for slipping, one for the actual reduction operation). Here arises my shameless promotion via the third party Iter::Able module. It has 2 ways to address this that allows for only 1 pass over the main data:   use Iter::Able <chain insert-at>;  # Chain the initial value with the Pairs, then reduce chain([$_], %replace).reduce(...)  # or Insert the initial in front, then reduce

[14:52] <discord-raku-bot> %replace.pairs.&insert-at(0 => $_).reduce(...)  # need .pairs as index-based insertion won't work on Hashes  These work lazily, i.e., only yield data when asked to, so we "reduce" the number of passes over %replace from 2 to 1 :p

[15:11] <discord-raku-bot> <antononcube> üòÆ

[17:20] *** teatime left
[17:20] *** teatime joined
[17:27] <discord-raku-bot> <dwinkley> wow

[17:27] <discord-raku-bot> <dwinkley> just wow

[17:27] <discord-raku-bot> <dwinkley> thanks so much for the comprehensive breakdown

[17:39] <ab5tract> yeah seriously awesome nahita3882. we should get that in the docs somehow/somewhere!

[20:41] *** Heptite left
[20:43] *** Heptite joined
[22:07] <discord-raku-bot> <.ohnowendigo> I have a file where a subset matches a grammar. But it's not from the beginning, so subparse won't work I think. Is there a way to do this with grammars or should I just use a regex? What if I want the grammar to match three different things in the text?

[22:07] <discord-raku-bot> <.ohnowendigo> Wait, does subparse accept :g?

[22:49] <discord-raku-bot> <antononcube> I made ‚ÄúText::SubParsers‚Äù for similar use cases.

[22:50] <discord-raku-bot> <antononcube> What you‚Äôd describe happens often when using LLMs.

[22:56] <discord-raku-bot> <antononcube> But I think will be better off using match(/.../, :g) and / or  the adverb :ex.

[23:01] <discord-raku-bot> <antononcube> For example, see the section "FEN sub-parser" here: https://github.com/antononcube/RakuForPrediction-book/blob/main/Notebooks/Jupyter/ChessMaster-LLM-persona.ipynb

[23:07] <discord-raku-bot> <antononcube> Also, you can use something like :  rx/ $<txt>=(.*) <?{ My::Grammar.parse($<txt>.Str).defined }> / 

