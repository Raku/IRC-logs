[01:09] *** Heptite left
[01:33] *** Manifest0 left
[09:25] *** Manifest0 joined
[11:23] <lizmat> renormalist: if you're jus interested in a Bool, you can use "first" instead of "grep"

[11:23] <lizmat> then it will short-circuit on the first occurrence and not look any further

[11:24] <lizmat> where "grep" will generate a list of occurrences, and the "so" or "?" will then work on the number of elements returned

[12:55] <renormalist> ah, makes sense, yep, thanks

[12:55] <renormalist> my @primes = (1, 3, 5, 7, 13 ... { $_ > 2**136_279_841 });

[12:55] <renormalist> Unable to deduce arithmetic or geometric sequence from: 5,7,13

[12:55] <renormalist> No I am slightly disapppointed :-)

[12:55] <renormalist> * Now

[12:56] <renormalist> m: my @primes = (1, 3, 5, 7, 13 ... { $_ > 2**136_279_841 });

[12:56] <camelia> rakudo-moar dc0342502: OUTPUT: «Unable to deduce arithmetic or geometric sequence from: 5,7,13␤Did you really mean '..'?␤  in block <unit> at <tmp> line 1␤␤»

[12:56] <lizmat> I guess we could go for checking for primality and magically introduce a producer that would produce primes only

[12:59] <lizmat> but meh  :-)

[12:59] <renormalist> yeah, I'm just joking, I just discover things and experiment how it works. I did not really expect Raku to find the next Mersenne prime. Yet, I tried. Just in case. :-)

[13:00] <lizmat> m: say 'Life, the Universe and Everything'.WHY

[13:00] <camelia> rakudo-moar dc0342502: OUTPUT: «42␤»

[13:00] <renormalist> Nice!

[13:01] <lizmat> there are at least 2 more easter eggs in Rakudo  :-)

[13:02] <renormalist> don't tell me now, I need to reuse that one first

[13:07] <lizmat> I'm not going to tell you    :-)   you'd have to go look for them

[13:32] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/11/11/2024-44-silly-ternaries/

[14:56] <discord-raku-bot> <librasteve> renormalist: I think you need this https://raku.land/cpan:TOBS/OEIS ... although seems somewhat stale

[15:07] *** Heptite joined
[16:24] *** kjp left
[16:25] *** kjp joined
[17:19] *** Heptite left
[20:05] *** Heptite joined
[20:08] <avuserow> are dynamic variables suitable for something like keeping track of the depth of function calls (e.g. for pretty-printing a data structure recursively)? any good examples where this works out better than just passing a parameter like `:$depth = 0`?

[20:35] <discord-raku-bot> <.ohnowendigo> Is there formal documentation of slangs anywhere? There's nothing on docs.raku.org. Don't need a deep guide, just want an authoritative explanation and overview I can  link to

[20:38] <lizmat> perhaps https://raku.land/zef:lizmat/Slangify ?

[21:03] <discord-raku-bot> <librasteve> lizmat: Slangify is surely the best tool, is there an example of a slang that uses it that we can steal bits from?

[21:16] *** Guest64 joined
[21:16] *** Guest64 left
[22:08] *** Heptite left
[22:58] <lizmat> librasteve look at the reverse dependencies?

