[05:10] *** KOTP left
[09:08] *** dakkar joined
[12:20] *** dano joined
[12:20] <dano> Hi, how would I count the number of tab characters at the beginning of a string?

[12:22] <dano> I wrote a pretty straighforward implementation of a sub that does this but I had surprising trouble

[12:22] <dano> I would have thought something like this would work

[12:23] <discord-raku-bot> <nemokosch> m: my $str = "\t" x 8 ~ 'blasda' ~ "\t" x 10; $str.match(/^ <( \t * )> /).chars.say

[12:23] <discord-raku-bot> <Raku eval>  8 

[12:23] <discord-raku-bot> <nemokosch> that's one way

[12:24] <dano> my Int $counter = 0; for 0..$str.chars() { last if not ($str[$_] eq '\t'); ++$counter; } return $counter;

[12:25] <discord-raku-bot> <nemokosch> m: my $str = "\t" x 8 ~ 'blasda' ~ "\t" x 10; $str.comb.toggle(* eq "\t").elems.say

[12:25] <discord-raku-bot> <Raku eval>  8 

[12:25] <discord-raku-bot> <nemokosch> I think this should also work

[12:26] <discord-raku-bot> <nemokosch> checking yours

[12:27] <discord-raku-bot> <nemokosch> oh yeah, indexing won't work on strings

[12:27] <discord-raku-bot> <nemokosch> at least not in any sensible way

[12:27] <dano> Yeah, I noticed that

[12:27] <discord-raku-bot> <nemokosch> m: my $str = "\t" x 8 ~ 'blasda' ~ "\t" x 10; $str[0].say; $str[1].say

[12:27] <discord-raku-bot> <Raku eval>                                  blasda                                          Exit code: 1 Index out of range. Is: 1, should be in 0..0   in block <unit> at main.raku line 1  

[12:28] <discord-raku-bot> <nemokosch> okay, so what is your question?

[12:57] <discord-raku-bot> <rcmlz> m: my $str = "\t" x 8 ~ "blasda" ~ "\t" x 10; dd $str.comb[0,1,8..12]

[12:57] <discord-raku-bot> <Raku eval>  ("\t", "\t", ("b", "l", "a", "s", "d")) 

[12:59] <lizmat> m: my $s = "\t\t\t\tfoo\t"; say +$s.comb.grep({ $_ eq "\t" || last })

[12:59] <camelia> rakudo-moar 61a87f075: OUTPUT: ¬´4‚ê§¬ª

[13:14] <lizmat> m: my $s = "\t\t\t\tfoo\t"; say ($s ~~ /^ \t* /).chars

[13:14] <camelia> rakudo-moar 61a87f075: OUTPUT: ¬´4‚ê§¬ª

[13:15] <lizmat> the regex solution is more efficient

[13:20] <dano> Is there a simple procedural way to do it? Regex seems like overkill

[13:21] *** KOTP joined
[13:21] <dano> And in any case, is there a way to access characters in a string? Assuming it is all ascii in the 0-127 range

[13:22] <lizmat> dano: to access all chars separately, use .comb 

[13:23] <lizmat> it creates a Seq of all characters, whether they'd be ASCII or not

[13:24] <dano> Ok, I will have a look, thanks

[13:24] <dano> What does :D mean in a function argument signature? E.g. sub comb(Str:D $matcher)

[13:35] <discord-raku-bot> <nemokosch> DEFINITE, so basically a real value of that type

[13:36] <discord-raku-bot> <nemokosch> In Raku, types are also instances, and they are... their own type? if that makes sense

[13:36] <discord-raku-bot> <nemokosch> m: 'almafa'.WHAT.say; Str.WHAT.say;

[13:36] <discord-raku-bot> <Raku eval>  (Str) (Str) 

[13:37] <discord-raku-bot> <nemokosch> the difference is that the former is an Str:D (a DEFINITE value of Str)

[13:37] <discord-raku-bot> <nemokosch> and the latter is an Str:U (well, not a DEFINITE value of Str)

[13:38] <discord-raku-bot> <nemokosch> so the signature of comb says that type objects are not welcome, they cannot be combed

[13:38] <discord-raku-bot> <nemokosch> m: comb(IntStr)

[13:38] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling main.raku Calling comb(IntStr) will never work with signature of the proto ($, $, $?, *%) at main.raku:1 ------> <BOL>‚èècomb(IntStr) 

[13:43] *** KOTP left
[13:48] <dano> Doea Raku have tail call optimisation?

[13:49] <dano> Thanks for the :D explanation, I understand

[14:01] <discord-raku-bot> <nemokosch> This is an implementation detail that I wouldn't know

[14:02] <discord-raku-bot> <nemokosch> https://www.reddit.com/r/rakulang/comments/hv2co5/does_raku_have_tail_call_optimisationtail/ this is from 2020

[14:04] <discord-raku-bot> <nemokosch> https://dev.to/thibaultduponchelle/raku-features-community-and-main-interpreter-vm-1ahh this one states that MoarVM does have tail-call optimization but honestly I'm not sure Thibault Duponchelle would know

[14:05] <discord-raku-bot> <nemokosch> https://docs.raku.org/language/haskell-to-p6#Tail_Call_Optimization_or_Tail_Call_Elimination

[14:05] <discord-raku-bot> <nemokosch> in any case, there should be unified communication

[15:07] <dano> Thanks

[16:41] <dano> How can I declare the type of an array of Int?

[16:41] <dano> For just an Int it would be my Int $i = 0;

[16:41] <lizmat> my Int @foo

[16:42] <dano> Ah, very nice

[16:42] <lizmat> m: my Int @foo = 1,2,3; dd @foo

[16:42] <camelia> rakudo-moar 9b179a554: OUTPUT: ¬´Int @foo = Array[Int].new(1, 2, 3)‚ê§¬ª

[16:42] <lizmat> m: my Int @foo = 1,2,3,"bar"; dd @foo

[16:42] <camelia> rakudo-moar 9b179a554: OUTPUT: ¬´Type check failed for an element of @foo; expected Int but got Str ("bar")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:42] <dano> Thanks

[16:42] <dano> What do you guys like about Raku?

[16:49] <discord-raku-bot> <antononcube> @dano That it is very user friendly and it very carefully picks its friends.

[17:11] <discord-raku-bot> <.vushu> What I like about Raku is that it is very pragmatic, you can get things done quickly, it has quite unique feature sets. I like the builtin grammar and multiple dispatch where you also can define  conditions for those given function which I find pretty cool and there always more to explorer which is fun üòÑ

[17:33] *** dakkar left
[17:55] <discord-raku-bot> <nemokosch> if I were to think of a praising word for Raku, I would say that it's an inspiring language

[17:55] <discord-raku-bot> <nemokosch> you can make it into a lot of things, and you definitely learn about languages, paradigms, algorithms and all that, while you might stay in flow for a long time

[17:56] <discord-raku-bot> <nemokosch> having said that, I think it crucially determines your Raku experience what your expectations are or what you are trying to use it for

[18:01] <dano> Thank you for your answers!

[18:28] <dano> I'm not sure what I'm looking for. I have used Java and C++ professionally for years with some Python for scripting. Over the last year I have taken an interest in other languages and learnt OCaml and Scheme for the functional programming, and now I am learning Raku.

[18:33] <dano> I suppose I would use it for whatever I would use Python for, scripts and such. My first program is going to take a configuration file and some template files and generate a C++ codebase skeleton

[18:37] <lizmat> sounds like a useful tool to have

[18:42] <lizmat> and fun to make  :-)

[18:52] <dano> Raku seems like a great language for this. I have only used it for one day, but it seems like it gets a lot of work done in few lines. It has a quirky and fun feeling to it

[18:56] <dano> It's like a language for intelligent hipsters with good taste and a sense of humor

[19:00] <discord-raku-bot> <.vushu> hipster üòÇ

[19:11] <discord-raku-bot> <antononcube> Intelligent hamsters though, stay away grom rakuns

[19:12] <discord-raku-bot> <antononcube> @dano I actually use Raku a lot for LLM related projects. Work-wise.

[19:12] <discord-raku-bot> <antononcube> I mean work projects.

[19:14] <discord-raku-bot> <nemokosch> It makes sense

[19:22] <dano> Nice!

