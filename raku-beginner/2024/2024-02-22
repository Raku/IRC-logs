[01:44] *** MasterDuke left
[05:07] <discord-raku-bot> <librasteve> I would like advice on how to avoid an explicit argument name in my code ... https://gist.github.com/librasteve/0ec5bb2a70bc545faca830ec91baca92

[05:09] <discord-raku-bot> <librasteve> in this example (i) how can I avoid going sub fn( @a ) { given @a {...} } and (ii) can I use the feed operator (or similar) to feed the sub dims-match block directly and avoid having to declare / name the sub at all??

[05:10] <discord-raku-bot> <librasteve> [the gist provided works fine, I am just hoping to improve my skills a bit]

[06:51] <discord-raku-bot> <aruniecrisps> i still haven't figured out that matching stuff and it's really beginning to bother me

[06:52] <discord-raku-bot> <aruniecrisps> i feel like i should be able to get something like:   given Point.new(x => 1, y => 1) {   matches -> Point (Int :$x, Int :$y) {     say $x + $y;   } } 

[06:52] <discord-raku-bot> <aruniecrisps> not sure what i'm doing wrong here

[06:53] <discord-raku-bot> <aruniecrisps> it feels really weird to me that i can do this in function declarations but not in given

[07:09] <discord-raku-bot> <librasteve> @aruniecrisps you are trying to bolt on some new syntax to raku here ... typically that is not a trival topic (although raku has more power tools than most languages) ... I would suggest you review the source of Cro (the bit that bolts on the routing syntax) ... then work token by token in your new design with dd to inspect what you are getting is what you want ... I think you will need somehow to tease

[07:09] <discord-raku-bot> apart the :() Signature from the Callable and then double check that smartmatch on sigs is doing what you want

[09:12] *** dakkar joined
[09:39] <SmokeMachine> m: my @a = <a b c>; sub dims-match(Positional $_) { when 0 { say 0 }; when 1 { say 1 }; when * >= 2 { say ">= 2" } }; dims-match @a # librasteve : you could do something like this

[09:39] <camelia> rakudo-moar 2a76a5241: OUTPUT: ¬´>= 2‚ê§¬ª

[09:41] <SmokeMachine> m: multi dims-match([]) { say 0 }; multi dims-match([$first]) { say $first }; multi dims-match(@a) { say ">=2" }; dims-match <a b c> # but I would probably do something like this...

[09:41] <camelia> rakudo-moar 2a76a5241: OUTPUT: ¬´>=2‚ê§¬ª

[10:15] *** hudo left
[10:16] *** hudo joined
[11:15] *** hudo_ joined
[11:17] *** hudo left
[15:02] <discord-raku-bot> <aruniecrisps> @librasteve i'm seeing how they're approaching it, they're basically setting up a context and for each get or post, put block etc they're adding that router to the list of handlers

[15:13] <discord-raku-bot> <aruniecrisps> i could do that, but i feel like I should just be able to transform a matches into a when so that i get the exact control flow as when

[15:20] <discord-raku-bot> <aruniecrisps> I got it working but it's a hack for sure:   sub matches(&f) {   CATCH {     when X::TypeCheck::Binding {;} # move on   }    $_ = CALLERS::<$_>;    when &f { f |$_ }; } 

[15:22] <discord-raku-bot> <aruniecrisps> so this technically works:   given $u {   matches -> Point (Int :$x, Int :$y) {    }    matches -> Circle (Int :$radius) {    }    matches -> Square (Int :$width, Int :$height) {    }    default {    } } 

[15:24] <discord-raku-bot> <aruniecrisps> but the problem is that it still goes through each and every single one of these matches clauses when the behavior i want is for matches to operate like a when clause

[15:25] <discord-raku-bot> <aruniecrisps> because if i add a default clause that also executes

[15:35] <discord-raku-bot> <aruniecrisps> @lizmat do you think i'd be able to pull something like what i'm looking for off using macros and RakuAST?

[15:36] <lizmat> feels like a slang to me, but yes...

[15:37] <lizmat> but I would suggest making a problem solving issue for it, so that you have it clear what you want to achieve, and have other eyes look at it  :-)

[15:40] <discord-raku-bot> <aruniecrisps> what do you mean?

[15:41] <lizmat> https://github.com/Raku/problem-solving/issues/new?assignees=&labels=language&projects=&template=issue-template-language.md&title=

[15:46] <dakkar> aruniecrisps: https://gist.github.com/dakkar/97848d044d88890e40095dda74b86026 this code prints `point 5 3`; is that what you're looking for?

[15:47] <dakkar> (yes, it's a bit nasty to hijack Code::ACCEPTS for this‚Ä¶)

[15:49] <discord-raku-bot> <aruniecrisps> that works but i feel like you shouldn't have to add but mmm {} each and every time

[15:51] <dakkar> yes, I'm looking for a macro way of doing without

[15:52] <dakkar> but I wanted to check I was not completly misunderstanding what you wanted ‚ò∫

[16:12] <discord-raku-bot> <aruniecrisps> @lizmat i created a new issue: https://github.com/Raku/problem-solving/issues/421

[16:12] <lizmat> arunicrisps++

[16:16] <lizmat> aruniecrisps++   rather  :-)

[16:18] <dakkar> https://gist.github.com/dakkar/97848d044d88890e40095dda74b86026 I don't get macros

[16:18] <discord-raku-bot> <aruniecrisps> just curious, what's going to happen to slangs when RakuAST is finalized? @lizmat?

[16:19] <lizmat> well... if you have a slang that depends on the legacy grammar, you may need to change that to work with the Raku grammar

[16:20] <lizmat> if you use the Slangify module https://raku.land/zef:lizmat/Slangify that should be relatively straightforward

[16:20] <lizmat> check its reverse dependencies for examples

[16:24] <discord-raku-bot> <aruniecrisps> oh so the RakuAST API isn't going to really change how you make slangs?

[16:27] <lizmat> well, depending on how deep you'd want to affect the semantics of the language

[16:27] <lizmat> some slangs currently depend on  semi-documented Rakudo internals

[16:27] <lizmat> in RakuAST, we would like to provide a documented and stable API for those cases

[16:35] <discord-raku-bot> <aruniecrisps> so is this utilizing RakuAST right now? https://github.com/0racle/raku-Slang-Otherwise/blob/master/lib/Slang/Otherwise.rakumod

[16:43] <lizmat> no, it isn't really: if just has already adapted to the different API of the Raku grammar as opposed to the legacy grammar

[16:44] <lizmat> the Raku grammar e.g. has a "vetPerlForSyntax" rule built in, which the legacy grammar doesn't

[16:45] <lizmat> so the handling of the legacy grammar needs to supply that itself

[16:45] <lizmat> https://github.com/0racle/raku-Slang-Otherwise/blob/master/lib/Slang/Otherwise.rakumod#L30

[17:51] *** dakkar left
[18:38] <discord-raku-bot> <aruniecrisps> @lizmat what is this line? https://github.com/0racle/raku-Slang-Otherwise/blob/5a5687938ff78f4aa08c94cb516a5d8b1f90b9ec/lib/Slang/Otherwise.rakumod#L12

[18:39] <lizmat> try to match <.block-for> rule without capturing, then try to match .kok rule without capturing, then execute code in block

[18:39] <lizmat> code in regex limits LTM matching

[18:40] <discord-raku-bot> <aruniecrisps> what is the .kok rule?

[18:41] <lizmat> keyword ok  I believe

[18:41] <lizmat> https://github.com/rakudo/rakudo/blob/main/src/Perl6/Grammar.nqp#L646

[18:43] <lizmat> https://github.com/rakudo/rakudo/blob/main/src/Raku/Grammar.nqp#L4819 in RakuAST

[18:43] <lizmat> note the commented out code: WIP  :-)

[18:44] <discord-raku-bot> <aruniecrisps> ah makes sense üôÇ

[21:17] *** MasterDuke joined
[22:38] *** Guest47 joined
[22:40] *** Guest47 left
[23:01] *** guifa joined
[23:01] <discord-raku-bot> <librasteve> smokemachine: thanks -- I was trying this...

[23:02] <discord-raku-bot> <librasteve> m: sub dm(@_) {when * == 0 {say 0} when * >=1 {say 42}}; dm <1 2 3>;

[23:02] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Strange text after block (missing semicolon or comma?) at /home/glot/main.raku:1 ------> sub dm(@_) {when * == 0 {say 0}‚èè when * >=1 {say 42}}; dm <1 2 3>; 

[23:03] <discord-raku-bot> <librasteve> m: sub dm(@_) {when * == 0 {say 0}; when * >=1 {say 42}}; dm <1 2 3>;

[23:03] <discord-raku-bot> <Raku eval>  0  Use of uninitialized value of type Any in numeric context   in sub dm at main.raku line 1 

[23:03] <discord-raku-bot> <librasteve> and I should have done this

[23:04] <discord-raku-bot> <librasteve> m: sub dm($_) {when * == 0 {say 0}; when * >=1 {say 42}}; dm <1 2 3>;

[23:04] <discord-raku-bot> <Raku eval>  42 

[23:05] <discord-raku-bot> <librasteve> (actually my attempt with @_ errors with

[23:05] <discord-raku-bot> <librasteve>  Use of uninitialized value of type Any in numeric context   in whatevercode  at ...Library/CloudStorage/Dropbox/DockerWorld/raku-Physics-Unit/bin/../lib/.precomp/F9883CEFF28704D4E2B594F73D6B46062F30FF07/E3/E331847A1607CD7EE15208C2396B16FA2372B146 line 1 

[23:05] <SmokeMachine> Don‚Äôt you like the multi dispatch solution?

[23:06] <discord-raku-bot> <librasteve> i love them both !

[23:07] <discord-raku-bot> <librasteve> but ... for me the when/smartmatch syntax is cleaner and the intent is clearer (and it's only one loc to change!)

[23:08] <discord-raku-bot> <librasteve> now I reread the error msg, I guess I could have got there myself ... was distracted by the precomp blurb

[23:08] <SmokeMachine> Really? I have the opposite opinion‚Ä¶ :)

[23:08] <discord-raku-bot> <librasteve> timtowtdi

