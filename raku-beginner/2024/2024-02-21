[02:09] *** teatime left
[02:10] *** teatime joined
[02:53] <discord-raku-bot> <aruniecrisps> @SmokeMachine how did you call cro using raku -Ilib?

[09:03] *** hudo joined
[09:04] *** hudo left
[09:05] *** hudo joined
[09:07] *** hudo__ left
[09:08] *** dakkar joined
[14:11] *** lizmat_ joined
[14:14] *** lizmat left
[14:14] *** samebchase left
[14:14] *** samebchase joined
[14:25] *** lizmat_ left
[14:25] *** lizmat joined
[15:38] <discord-raku-bot> <aruniecrisps> i saw this article:

[15:38] <discord-raku-bot> <aruniecrisps> https://gfldex.wordpress.com/2021/02/25/custom-when/

[15:39] <discord-raku-bot> <aruniecrisps> it would be really nice if you could just have a construct in raku that allows you to pass a pointy block to match on the arguments so you could get straight pattern matching

[16:00] <lizmat> aruniecrisps  not sure I follow, could you elaborate ?

[16:05] <discord-raku-bot> <aruniecrisps> so right now we have when statements that are used in given , which largely amount to a call to .ACCEPTS being in the when's condition block, but I was hoping to take advantage of raku's pattern matching capabilities that it has for signatures within the given block itself

[16:06] <discord-raku-bot> <aruniecrisps>  macro matches($f) {   when {{{$f}}}.signature {     say {{{$f}}}.signature;     {{{$f}}}($_)   } }  class Point { has Int $.x; has Int $.y }  my $u = Point.new(:x(2), :y(3)); my &f = -> Int :$x, Int :$y { say $x; };  say $u ~~ &f.signature;  given $u {   matches -> Int :$x, Int :$y {     say $x;   } } 

[16:06] <discord-raku-bot> <aruniecrisps> so i've been playing around with this

[16:33] <discord-raku-bot> <Nahita> probably misunderstood but there is this maybe it helps

[16:36] <discord-raku-bot> <aruniecrisps> you could do that @Nahita , it's just in my mind it makes more sense to have it look like this:  given $u {   matches -> Point(Int :$x, Int :$y) {    }    matches -> Circle(Int :$radius) {    }    matches -> Square(Int :$width, Int :$height) {    }    default {    } } 

[16:36] <discord-raku-bot> <aruniecrisps> obviously matches can be replaced with resembles or whatever word the community feels is best

[16:39] <discord-raku-bot> <aruniecrisps> it looks like a logical extension of already existing syntax, for, with ,and if can use pointy blocks, but when can't

[16:59] <SmokeMachine> recently I was playing with something like this: https://usercontent.irccloud-cdn.com/file/NHydN0C2/image.png

[16:59] <SmokeMachine> m: sub match(&func) { $_ = CALLERS::<$_>; when &func.signature { func |$_ } }; for [(42, "bla"), (13), ("ble")] { match -> Int $num, Str $str { say $num; say $str }; match -> Int $i { say $i; True }; match -> |c { say c } }

[16:59] <camelia> rakudo-moar 492c1828f: OUTPUT: «42␤bla␤\(42, "bla")␤»

[17:02] <discord-raku-bot> <aruniecrisps> this is what i've been trying

[17:02] <discord-raku-bot> <aruniecrisps> https://cdn.discordapp.com/attachments/768511641758466088/1209908073167069204/Screenshot_2024-02-21_at_12.02.26_PM.png?ex=65e8a1b3&is=65d62cb3&hm=d6d0c77d152965351492f464a247954f0dc2bc0c39f60424739ef51f5d8dca76&

[17:05] <discord-raku-bot> <aruniecrisps> for some reason destructuring classes is so hard with this @SmokeMachine

[17:09] <SmokeMachine> the if you just want to descruct it, would something like this be enough?

[17:09] <SmokeMachine> m: class Point { has $.x; has $.y }; my :(Point (:$x, :$y)) := \(Point.new: :1x, :2y); say $x; say $y

[17:09] <camelia> rakudo-moar 492c1828f: OUTPUT: «1␤2␤»

[17:29] <discord-raku-bot> <aruniecrisps> you could, but i wanted to see whether that would work in a match statement

[17:29] <discord-raku-bot> <aruniecrisps> @SmokeMachine

[17:40] *** dakkar left
[18:35] *** notna joined
[19:20] *** notna left
[19:30] *** teatime left
[22:32] *** discord-raku-bot left
[22:32] *** discord-raku-bot joined
