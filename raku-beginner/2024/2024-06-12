[04:45] *** Some-body_ joined
[04:46] *** DarthGandalf left
[04:48] *** Some-body_ is now known as DarthGandalf

[08:18] *** dakkar joined
[13:13] *** jaguart joined
[13:20] *** jaguart left
[13:21] *** jaguart joined
[14:08] *** kjp left
[15:12] *** kjp joined
[17:00] *** dakkar left
[20:15] <discord-raku-bot> <_grenzo> I keep segfaulting raku

[20:15] <discord-raku-bot> <_grenzo> $script-path.IO.lines.rotor($batch-size, :partial).race.map: -> @batch {          my $q = @batch.join("\n");         try {             my @res = $dbh.execute($q).values;         }         CATCH {             default {                 say "Error: $_";             }         }         $dbh.finish;         $lines-done += @batch.elems;     };

[20:16] <discord-raku-bot> <_grenzo> batch-size = 1000,  The file $script-path has 4_581_526 lines of sql updates

[20:17] <discord-raku-bot> <_grenzo> Welcome to Rakudo‚Ñ¢ v2024.05. Implementing the Raku¬Æ Programming Language v6.d. Built on MoarVM version 2024.05.

[20:18] <discord-raku-bot> <antononcube> I detect very recent migration from moar-2024.04 to moar-2024.05.

[20:18] <discord-raku-bot> <antononcube> (Maybe with hopes for less segfaulting...)

[20:19] <discord-raku-bot> <_grenzo> I have both...they both segfault

[20:19] <discord-raku-bot> <antononcube> ü§£ 2Ô∏è‚É£

[20:20] <discord-raku-bot> <_grenzo> You know of any way to gather info on why they segfault

[20:23] <discord-raku-bot> <antononcube> Hmm... maybe the professional Comma IDE versions help with that...

[20:31] <discord-raku-bot> <_grenzo> I'm guesing it has something to do with the file size as it can finish other smaller files

[20:53] <gfldex> _grenzo: if a Lock around `$dbh.execute($q).values` makes the segfault go away, then there is somthing in DBIish not quite threadsafe.

[20:53] <tonyo> iirc DBIish is not threadsafe

[20:53] <discord-raku-bot> <_grenzo> Using DB::Pg

[20:54] <discord-raku-bot> <_grenzo> but I'll check

[20:54] <discord-raku-bot> <_grenzo> Thanks

[20:55] <ab5tract> I also wonder if there could be an issue with tallying the $lines-done

[20:56] <discord-raku-bot> <_grenzo> There was originally as I was doing $script-path.lines.elems for a 4m+ file. It would die on that

[20:56] <discord-raku-bot> <_grenzo> I changed it to my $lines-total = qqx{wc -l $script-path}.words[0];

[20:58] <ab5tract> Also, I believe that this map block will be executing in batches of 64 across N degrees

[20:59] <ab5tract> I think you might want to renove the rotor and adjust the batch size directly in race

[20:59] <ab5tract> At least I think that would make it easier to reason about

[21:01] <ab5tract> Re: $lines-total, did Raku segfault when you did IO.lines.elems? Or did you get an OOM?

[21:02] <discord-raku-bot> <_grenzo> segfault

[21:02] <discord-raku-bot> <_grenzo> or sometimes just killed

[21:02] <ab5tract> Dang :(

[21:03] <discord-raku-bot> <_grenzo> lock did not seem to hellp

[21:03] <ab5tract> What I meant about rallying $lines-done is that maybe multiple threads are trying to set that variable at the same time and cause a collision

[21:04] <ab5tract> s/rallying/tallying/

[21:04] <discord-raku-bot> <_grenzo> That could be

[21:06] <ab5tract> Moving the $lock.protect to be around that line would test that theory

[21:07] <discord-raku-bot> <_grenzo> Trying that now

[21:08] <discord-raku-bot> <_grenzo> that lock is looking goot so far

[21:09] <discord-raku-bot> <_grenzo> BTW removing rotor broke something

[21:09] <ab5tract> Or also https://docs.raku.org/type/atomicint#sub_atomic-assign

[21:09] <ab5tract> Ah then keep it :)

[21:10] <ab5tract> Like I said, I don‚Äôt do much with race/hyper so I don‚Äôt have many tips on how to hold it correctly

[21:24] <ab5tract> _grenzo: please do report on any successful 4M+ SQL statement run :) (and of course any other issues you might encounter on the way)

[21:24] <discord-raku-bot> <_grenzo> 1M worked.

[21:24] <discord-raku-bot> <_grenzo> I'll let you know on the others

[21:26] <discord-raku-bot> <_grenzo> trying the atomic-fetch-add on another 1M to see if it's faster than lock

[21:30] <ab5tract> Cheers! The atomicint approach should be a bit faster than using a lock, but glad that it seems we fixed your segfault

[21:31] <discord-raku-bot> <librasteve> ‚öõÔ∏è

[21:38] <discord-raku-bot> <_grenzo> Thank you!

[22:05] <discord-raku-bot> <_grenzo> Attempting 4.6M rows. Expect it to take 25min

[22:30] <discord-raku-bot> <_grenzo> Progress: 4579526/4581526 99.95634642%  - 1504.612250511

[22:30] <discord-raku-bot> <_grenzo> 25 min

[22:30] <discord-raku-bot> <_grenzo> 4.6M rows successful.  Thanks again

