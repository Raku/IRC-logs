[01:27] *** Manifest0 left
[01:52] *** MasterDuke joined
[02:54] <discord-raku-bot> <scullucs> How do I go from $s = "abc\ndef\n" to

[02:59] <MasterDuke> scullucs: it appears some of your message got cut off here on irc, all i see is `How do I go from $s = "abc\ndef\n" to`

[03:00] <discord-raku-bot> <scullucs> Oh, this channe is bridged? Sorry. I thought I was on Discord side only.

[03:00] <discord-raku-bot> <scullucs> Hang on, I'll rephrase anyway.

[03:02] <lucs> Hi.

[03:02] <lucs> How do I obtain ['a', 'b', 'c', 'd'] given "ab\ncd\n".

[03:03] <lucs> I keep tripping up with embedded Seq.

[03:04] <MasterDuke> m: say "ab\ncd\n".lines.join.comb

[03:04] <camelia> rakudo-moar aa385bb94: OUTPUT: «(a b c d)␤»

[03:05] <MasterDuke> m: say "ab\ncd\n".comb.grep(* ne "\n")

[03:05] <camelia> rakudo-moar aa385bb94: OUTPUT: «(a b c d)␤»

[03:06] <MasterDuke> m: say "ab\ncd\n".comb(/\w/)

[03:06] <camelia> rakudo-moar aa385bb94: OUTPUT: «(a b c d)␤»

[03:07] <lucs> I get it.

[03:07] <MasterDuke> couple different options

[03:07] <lucs> Thanks.

[03:07] <MasterDuke> np

[03:09] <lucs> I think my problem was coming from trying things like this:

[03:10] <lucs> m: my @a = < a b >; @a.push: 'de'.comb; say @a

[03:10] <camelia> rakudo-moar aa385bb94: OUTPUT: «[a b (d e)]␤»

[03:11] <lucs> How do I flatten out that (d e) (Hmm... flatten...)

[03:12] <MasterDuke> m: my @a = < a b >; @a.append: "de".comb; say @a

[03:12] <camelia> rakudo-moar aa385bb94: OUTPUT: «[a b d e]␤»

[03:13] <lucs> Ah, append, thanks

[03:13] <MasterDuke> np

[03:34] *** camelia left
[03:49] *** MasterDuke left
[04:05] *** camelia joined
[09:24] *** dakkar joined
[09:52] *** Manifest0 joined
[17:33] *** dakkar left
[20:36] <discord-raku-bot> <yabobay> m: "4" + "1"

[20:36] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of "+" in expression "\"4\" + \"1\"" in sink context (line 1) 

[20:36] <discord-raku-bot> <yabobay> well that's not whati it does on my machine

[20:36] <discord-raku-bot> <yabobay> m: '4' + '1'

[20:36] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of "+" in expression "'4' + '1'" in sink context (line 1) 

[20:50] <discord-raku-bot> <librasteve> m: "4"+"1"

[20:51] <discord-raku-bot> <librasteve> say m: "4"+"1"

[20:51] <discord-raku-bot> <librasteve> m: say "4"+"1"

[20:51] <discord-raku-bot> <librasteve> m: say "4"+"1"

[20:51] <discord-raku-bot> <Raku eval>  5 

[20:52] <discord-raku-bot> <librasteve> phew

[20:53] <discord-raku-bot> <librasteve> seems like the Discord <=> IRC bridge struggles with quotes ... so I think the recipe is vanilla m: and then put the actual code in backticks

[20:53] <discord-raku-bot> <yabobay> oh ok well what i wanted to ask is if this is doable why do we need allomorphs again i asked this before but it still doesn't really make sense

[21:00] <discord-raku-bot> <librasteve> raku has optional types - this code is untyped - a numeric operator like + will coerce its operand to numbers if that can be done - when you coerce a Str to a Real the string is reparsed if possible

[21:02] <discord-raku-bot> <librasteve> m: say "4".WHAT; say "4".Real.WHAT; say (+"4").WHAT;

[21:02] <discord-raku-bot> <Raku eval>  (Str) (Int) (Int) 

[21:03] <discord-raku-bot> <librasteve> in raku (as in perl iirc) the + in +"4", like any numeric operator can be used as shorthand to do the coercion

[21:04] <discord-raku-bot> <librasteve> ---

[21:04] <discord-raku-bot> <librasteve> the question arises when we want to add types (since Raku has optional types)

[21:05] *** whatsnew joined
[21:05] *** whatsnew left
[21:05] *** whatsnew joined
[21:06] <discord-raku-bot> <yabobay> exactly. so if types get coerced, why are there IntStrs?

[21:06] *** whatsnew left
[21:07] <discord-raku-bot> <librasteve> m: `sub add(Int $a, Int $b) {$a+$b}; say add("4","1");

[21:07] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus statement at /home/glot/main.raku:1 ------> <BOL>⏏`sub add(Int $a, Int $b) {$a+$b}; say ad     expecting any of:         prefix         statement list         term 

[21:07] <discord-raku-bot> <librasteve> m: sub add(Int $a, Int $b) {$a+$b}; say add("4","1");

[21:07] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling main.raku Calling add(Str, Str) will never work with declared signature (Int $a, Int $b) at main.raku:1 ------> sub add(Int $a, Int $b) {$a+$b}; say ⏏add("4","1"); 

[21:08] <discord-raku-bot> <librasteve> (oops got the backticks right the second time!)

[21:08] <discord-raku-bot> <yabobay> why do operators like + coerce values but function calls don't?

[21:09] <ab5tract> m: sub add(Int() $a, Int() $b) { say $a+$b; say $a.WHAT, $b.WHAT};  add("4","1"); 

[21:09] <camelia> rakudo-moar 0911eca22: OUTPUT: «5␤(Int)(Int)␤»

[21:10] <discord-raku-bot> <librasteve> hi ab5tract! good point, you can put coercers on the signature to solve this with the () parens after the type such as Int()

[21:11] <ab5tract> m: multi sub add(Int(Str) $a, Int(Str) $b) { say "coercing Str to Int"; dd :$a, :$b }; multi sub add(Int(Num) $a, Int(Num) $b) { say "coercing Num to Int"; dd :$a, :$b }; add("4","1"); add(4.4e0, 2.3e0)

[21:11] <camelia> rakudo-moar 0911eca22: OUTPUT: «coercing Str to Int␤:a(4)␤coercing Num to Int␤:b(1)␤:a(4)␤:b(2)␤»

[21:12] <discord-raku-bot> <librasteve> https://docs.raku.org/language/operators#infix_+

[21:12] <discord-raku-bot> <yabobay> oh i see

[21:13] <discord-raku-bot> <librasteve> ^^ the docs tell you that the operator coerces (just an fyi) - as to why - well raku when untyped behaves like I said above so that it is very similar to perl and very dynamic and flcexible for things like one liners

[21:16] <discord-raku-bot> <librasteve> and ab5tract has also shown that you can restrict the type that is coerced - with stuff like Int(Str) - so Int() means I will take any type and coerce to Int and Int(Str) means I will only take Str and then try to coerce it to Int ... I suppose that I would call this gradual typing in that coercion is a great tool to shape your arguments into types that can be handled in strongly typed code

[21:18] <ab5tract> librasteve++ 

[21:21] <discord-raku-bot> <librasteve> @yabobay - as to your question about Allomorphs - I suggest you read this https://rakujourney.wordpress.com/2023/05/29/allomorphia/ and this https://rakujourney.wordpress.com/2024/04/18/allomorphs-unicode/ if you want your question answered deeply

[21:25] <discord-raku-bot> <yabobay> lol shameless plug

[21:25] <discord-raku-bot> <librasteve> there is a (valid) case that Allomorphs are less needed now that we have coercion types - personally I think that they can occasionally be quite useful, but they are not really needed for day to day raku

[21:26] <discord-raku-bot> <librasteve> other blogs are available XD

[23:31] *** rakufan1 joined
[23:40] <tbrowder> howdy, non-thread but  old raku user having thread issues.

[23:46] <tbrowder> i use two main class instances from David Warring's PDF modules that call instances from the C FreeFont2 library

[23:48] <tbrowder> how can i protect or limit the number of instances used?

