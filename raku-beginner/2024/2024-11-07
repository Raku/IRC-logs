[00:08] *** librasteve_ left
[01:43] *** Chanakan5591 left
[01:46] *** Chanakan joined
[01:55] *** uniro left
[02:07] *** thowe left
[02:08] *** thowe joined
[03:12] <renormalist> I summarized my understanding of the last days into https://github.com/renormalist/raku-diary#how-to-dwim-in-a-sea-of-types-2024-11-07 - if anyone sees wrong rubbish I confused I'm happily taking corrections.

[03:14] <ab5tract> renormalist: this link is broken - https://github.com/rakudo/rakudo/blob/

[03:17] <ab5tract> otherwise it's looking pretty good

[08:17] <discord-raku-bot> <librasteve> renormalist: a very nice summary of what is going on and why â€¦ thanks for mentioning my post. the only point I would add is to elaborate a bit on what we mean by in a Perl DWIM way

[08:20] <discord-raku-bot> <librasteve> i.e. how can a reproduce the ease with which perl can represent numbers and strings interchangeably within a strongly typed language

[08:21] <discord-raku-bot> <librasteve> imo raku types are both strong and optional

[08:24] <discord-raku-bot> <librasteve> weekly: https://github.com/renormalist/raku-diary#how-to-dwim-in-a-sea-of-types-2024-11-07

[08:56] *** uniro joined
[08:59] *** uniro is now known as Manifest0

[09:15] *** dakkar joined
[09:54] <lizmat> weekly: https://github.com/renormalist/raku-diary#how-to-dwim-in-a-sea-of-types-2024-11-07

[09:54] <lizmat> heh

[09:57] <discord-raku-bot> <nahita3882> as for better code evaluation communication with IRC, the both here accepts inputs surrounded with 1 or 3 backticks, so that might help transmit it verbatim

[09:57] <discord-raku-bot> <nahita3882> e.g., without backticks:

[09:57] <discord-raku-bot> <nahita3882> m: {$ + $ * $ ** $ }.(4).say

[09:57] <discord-raku-bot> <Raku eval>  1028 

[09:57] <discord-raku-bot> <nahita3882> with:

[09:57] <discord-raku-bot> <nahita3882> m: {$_ + $_ * $_ ** $_ }.(4).say

[09:57] <discord-raku-bot> <Raku eval>  1028 

[09:58] <discord-raku-bot> <nahita3882> also supports 3 backticks for multiline

[09:58] <discord-raku-bot> <nahita3882> m: print "y"; print "es\n"; 

[09:58] <discord-raku-bot> <Raku eval>  yes 

[09:59] <discord-raku-bot> <nahita3882> but i'm guessing multiline isn't pretty for IRC, so it's more useful for Discord-only channels maybe

[14:38] <discord-raku-bot> <scullucs> @nahita3882: Turns out that multiline verbatim Discord gets concatenad in IRC, so your example appears like this:

[14:38] <discord-raku-bot> <scullucs> <nahita3882> m: print "y"; print "es\n";

[14:39] <discord-raku-bot> <scullucs> Which is pretty okay.

[14:44] <discord-raku-bot> <nahita3882> thanks for the multiline input

[14:45] <lucs> Sure thing :-)

[15:45] <discord-raku-bot> <librasteve> oh - thanks @nahita3882 that's awesome - I use backtick in comments to avoid mangling - had not thought to us in an m:  block

[17:34] *** dakkar left
[18:24] <discord-raku-bot> <shrewfromburrow> whats the proper method to find the local /lib when testing a module? right now ive added use lib $?FILE.IO.dirname.IO.dirname ~ "/lib"; to my script but that seems like its not the ideal way to do things :>

[19:05] <discord-raku-bot> <antononcube> Maybe you can use use lib <. lib>; ?

[19:09] <ab5tract> shrewfromburrow: I believe the best approach is use -I. when running the test

[19:26] *** sjn left
[19:28] *** sjn joined
[22:00] <discord-raku-bot> <librasteve> @shrewfromburrow I think the _proper _method is to zef install . --force-install and then your module is loaded with the META6.json info (and Build.rakumod) if you have it

[22:03] <discord-raku-bot> <librasteve> that said I normally go  1 #!/usr/bin/env raku 2 use lib '../lib'; 

[22:07] <discord-raku-bot> <librasteve> ^^ based on my script.raku is in /bin and the module.rakumod is in /lib

[22:08] <discord-raku-bot> <librasteve> or my test.rakutest is in /t

[23:06] <ab5tract> raku -I. bin/script t/test.rakutest

