[06:43] <discord-raku-bot> <winfredraj> Hello can you have a look at help me figure out the blunders I have made in this script -> it is dog slow right now which I really did not expect

[06:43] <discord-raku-bot> <winfredraj> <script src="https://gist.github.com/winfredraj/8ddd71ab26a377d4f5ebc8ab06f18ba6.js"></script>

[06:46] <discord-raku-bot> <winfredraj> I know Im doing zero optimisations etc, but when I ran the script for one error no it was acceptable and when I just extended it to around 10, it just stuck up on me

[06:46] <discord-raku-bot> <winfredraj> in WSL

[06:47] <discord-raku-bot> <winfredraj> so just want to know of its some memory setting or it was a blunder in the algorithm

[08:15] *** dakkar joined
[13:16] <discord-raku-bot> <antononcube> This link does shows ‚ÄúNot found‚Äù when pressed, and after I edit the link there is a blob on unstructured text.

[14:03] <discord-raku-bot> <rcmlz> @simona6822  Raku is considered an ‚Äûimportant language‚Äú in some schools (on Planet Earth already)? That is interesting. I thought of Raku as underrated secret weapon you can do/learn/show all kinds of programming concepts.  Regarding your question: I do not understand it. Are you looking for the ‚Äûmost important feature added in a specific year‚Äú?

[14:06] <discord-raku-bot> <antononcube> @simona The most important feature was added in 2023 -- those are my LLM packages/modules and "Jupyter::Chatbook".

[14:08] <discord-raku-bot> <rcmlz> @simona6822 Anton is very modest - but I also like his packages (using Chatbook and Markdown::Grammar virtually daily)

[14:13] <discord-raku-bot> <rcmlz> üòÄüòÄüòÄ

[14:18] <discord-raku-bot> <antononcube> @simona & @rcmlz  More seriously:  - The most important features of Raku were in it "from the get go" -- Grammars and CLI script facilitation - The combination / duo LLM<->Raku  is great because Raku is made to process text

[16:08] <discord-raku-bot> <rcmlz> Regarding the CLI I have a question. When validating the parameters of MAIN directly in the signature - on missmatch, how can I make Raku indicate which parameter was wrong?

[16:19] <discord-raku-bot> <antononcube> @rcmlz I assume using ‚ÄúGetopt‚Äù would work.

[16:21] <discord-raku-bot> <antononcube> Alternatively/ or, using &ARGS-TO-CAPTURE and $*USAGE.

[16:22] <discord-raku-bot> <rcmlz> I put an example here: https://gist.github.com/rcmlz/ffc91f482032394a1ea49abc3ee0974e

[16:22] <discord-raku-bot> <antononcube> Actually, this seems simpler : https://docs.raku.org/language/create-cli#sub_GENERATE-USAGE

[16:24] <discord-raku-bot> <rcmlz> So there is no build-in way that tells me (in my example): "Hey, parameter 'folder' is wrong"

[16:28] <discord-raku-bot> <rcmlz> I am just wondering: Raku probably "knows", which parameter was wrong (otherwise it would not return the standard usage message), but this information is not presented to the user? Would that be something to improve on? Maybe just a little "-->" in front of the failing parameter would be enough?

[16:34] *** dakkar left
[20:17] <ab5tract> rcmlz: GENERATE-USAGE is the way to go

[20:49] <tonyo> rcmlz: raku can't tell you which parameter is wrong in multi dispatch with reliability, particularly in complex cases.  it can tell you that the args don't match any of the multi dispatch candidates with certainty.  fez does something with trying to figure out what you might've meant to call and displays the info that way but the invocation pattern in fez is very clear: `fez <cmd> <...args>`

[20:51] <tonyo> eg, you have two MAIN signatures of: `'help', Int:D $abc` and `'help', Int:D $xyz`, the dispatcher and you invoke as `<script> help --abc --xyz`.  which message should it show?

[20:52] <tonyo> s/the dispatcher //

[23:27] <ab5tract> tonyo: can't that be resolved with GENERATE-USAGE?

[23:29] <ab5tract> I mean, it takes some work but I think everything you would need is available

