[01:21] *** explorer left
[04:30] *** kjp left
[04:35] *** kjp joined
[07:38] <dano> I have an array of elements and and I need to know if there are ANY matches to a predicate. What is the way to do this in Raku? I guess I could do .grep(predicate).elems > 0, but that isn't the most efficient way of doing it

[08:45] <discord-raku-bot> <rcmlz> If this predicate can be expressed also as junction, then you could use a junction on booth sides. all(@list) > 0; # All members greater than zero? all(@a) == any(@b); # All elements of @a present in @b?

[08:46] <discord-raku-bot> <rcmlz> appart from that I use https://docs.raku.org/routine/categorize and https://docs.raku.org/routine/classify a lot ...

[08:47] <discord-raku-bot> <rcmlz> for doing stuff on lists.

[09:28] <gfldex> dano: Any-junctions do short circuit. So if the Array is large, you want those.

[09:46] <lizmat> there's also .first: that's a grep that returns the first match

[09:46] <lizmat> dano ^^

[10:51] *** lizmat_ joined
[10:52] *** lizmat_ left
[10:52] *** lizmat_ joined
[10:54] *** lizmat left
[11:02] <dano> Thanks, .first is what I needed, though the junctions thing seems interesting

[11:23] <lizmat_> although boolifications of Junctions *do* shortcut, building the Junction is *not* lazy

[11:24] <lizmat_> so I think using .first is the most efficient thing to do

[11:24] <lizmat_> second most efficient thing would be to limit .grep to producing only a single value

[11:24] <lizmat_> aka:  .grep(...).head    or    .grep[0]

[11:24] *** lizmat_ left
[11:25] *** lizmat joined
[13:39] <gfldex> lizmat: Could building the Junction be lazy (given somebody discovers the tuit-well)?

[15:08] <lizmat> possibly: the eigenstates are currently an (eager) IterationBuffer

[15:09] <lizmat> making it a full blown List would make that possible, but at the expense of all other eager uses

[21:55] *** samebchase left
[22:04] *** snonux left
[22:05] *** snonux joined
