[03:29] *** stanrifkin_ joined
[03:31] *** stanrifkin left
[05:31] *** kjp left
[05:32] *** kjp joined
[05:33] *** kjp left
[05:33] *** kjp joined
[09:07] <discord-raku-bot> <timemelon> how come when doesn't short circuit its block when used as a statement modifier?

[09:07] <discord-raku-bot> <timemelon> feel like an odd decision to make it more or less an alias of if in that case

[09:11] <lizmat> gist?

[09:19] <discord-raku-bot> <timemelon> what do you mean?

[10:22] <lizmat> could you make a gist of the perceived problem?

[10:22] <lizmat> showing what it does and what your expect ?

[10:33] <discord-raku-bot> <timemelon> I don't necessarily think it's a problem, I'm just curious about the rationale

[10:34] <discord-raku-bot> <timemelon> raku given 3 {     when 3 { say 'is 3' }     say 'not 3'; }   says is 3, but   raku given 3 {     say 'is 3' when 3;     say 'not 3'; }   says is 3 and then also not 3

[10:35] <discord-raku-bot> <timemelon> this is documented, I just wanna know why this behaviour was chosen

[10:38] <lizmat> understand the question now

[10:38] <lizmat> I wonder whether it is an implementation artefact

[10:44] <lizmat> you could consider "say "foo" when X"    as     { say "foo" when X }

[10:45] <lizmat> and in that sense, it also exits the outer scope

[18:11] <discord-raku-bot> <librasteve> @timemelon my swag is that the rationale of statement modifiers is that they are syntax sugar to allow simple english language style one liners to be thrown in to your code to handle ad hoc branching behaviour, consider this:

[18:11] <discord-raku-bot> <librasteve>  sub fn($x) {     given $x {         say "three" if $_ == 3;         say "Int" when Int;         say "defined" with $x;      }    }  [3,4].map: *.&fn;  #three #Int #defined #Int #defined 

[18:15] <discord-raku-bot> <librasteve> so this code is written in the spirit of one liners that can leverage the subtle nature of the various alternates - if (and unless) is just perl5 brought into raku, when is used here to clean up the type test, with is used here to clean up the definedness test

[18:19] <discord-raku-bot> <librasteve> given this proposition, then imo the best design to allow ad hoc mixing of these one liners is to have them behave in a more restricted way - it would be super confusing if some exit the outer but others don't ... NB this is on contrast to the structured use case of given - when which is to be a short circuiting case / switch statement

[19:28] <discord-raku-bot> <timemelon> that makes some sense

[22:01] *** stanrifkin_ left
[23:41] *** swaggboi left
[23:45] *** swaggboi joined
