[00:03] *** Manifest0 left
[00:08] *** teatime left
[00:08] *** teatime joined
[00:09] *** Manifest0 joined
[00:24] *** Ebudae left
[01:30] *** librasteve_ left
[01:41] *** Manifest0 left
[05:03] *** teatime left
[05:19] *** teatime joined
[05:38] *** discord-raku-bot left
[05:43] *** discord-raku-bot joined
[08:44] *** Manifest0 joined
[09:06] *** Guest98 joined
[09:11] *** Guest98 left
[10:12] <renormalist> http://paste.scsys.co.uk/45996?hl=on&submit=Format+it%21

[10:13] <renormalist> I am nesting look-behind assertions to make sure, a [ is only taken when not escaped like \[ but also making sure the \ isn't escaped itself, like \\[.

[10:13] <renormalist> For that I'm using a look-behind assertion inside a look-behind assertion.

[10:14] <renormalist> It seems to work, I was just surprised that it's that easy.

[10:14] <renormalist> The question: is that "legal"/"allowed"/"just normal for Raku grammars" or was I just lucky?

[10:16] <renormalist> The focus is on the <unescaped> rule which I plan to re-use int lots of places for all my special characters.

[10:28] <lizmat> renormalist: if you consider all Raku regexes to be actually code (which they are), do you think it will not get into an infinite loop?

[10:29] <lizmat> if the answer is yes, then you should be fine  :-)

[10:39] <renormalist> I need t othink about this answer. I guess it means what I think it means. :-)

[10:39] *** librasteve_ joined
[10:40] <renormalist> So I don't think it will be deeply recursive, so also not infinite. 

[10:40] <lizmat> well, deeply recursive may well be infinite

[10:40] <renormalist> My goal is to parse such expressions:      /some-name[filter_expression]/another-name

[10:41] <lizmat> fwiw, there are currently no deep recursion checks in Rakudo

[10:41] <renormalist> It could potentially need to recognize some nesting via some recursive rules, yet not endless in the parsed strings I think.

[10:41] <lizmat> you may run out of memory though :-)

[10:42] <lizmat> well, then you should be ok

[10:42] <renormalist> re: no deep recursion checks: yeah I'm used to that, that's fine.

[10:42] <renormalist> ok, cool

[10:42] <renormalist> thanks

[10:42] <lizmat> yw

[10:49] <discord-raku-bot> <librasteve> or tail recursion ;-)

[10:57] <discord-raku-bot> <rcmlz> That also surprized me: Raku seems to have â€ževerythingâ€œ you find or find not in textbooks, but no tail recursion optimization.

[10:58] <lizmat> well, I think there's still so much to be optimized that tail recursion at this stage would be a. premature, and b. a drop in the ocean as it were

[10:59] <discord-raku-bot> <rcmlz> True

[11:02] <discord-raku-bot> <rcmlz> So many awesome features are included - many times I read â€žLanguage A introduced thatâ€œ and â€žLanguage B thisâ€œ I recognize it â€¦

[11:02] <discord-raku-bot> <rcmlz> from Raku ðŸ˜€

[11:04] <discord-raku-bot> <librasteve> afaik raku the language does not preclude tail recursion - but I think it does require GC - don't know of any languages that do both ....

[11:07] <discord-raku-bot> <librasteve> @rcmlz - so true ... it's easy to think that these features will one day add up to no opportunity left for raku ... but I don't think any language except raku can do all|most of these features in a sane way (esp when they start very clean like Python)  ;-) ... even something as "simple" as unicode support in regexes is going to be a mega hack in most languages

[11:08] <discord-raku-bot> <rcmlz> Racket has GC and Tail Recursion Optimization, I beliefe

[11:10] <discord-raku-bot> <librasteve> oh - OK ... guess the tail is on the stack and the GC is on the heap

[11:12] <discord-raku-bot> <rcmlz> True. Raku is - IMHO - also very well suited for teaching/learning Programming Concepts, as you can show many â€žthingsâ€œ in many different ways.

[11:13] <discord-raku-bot> <rcmlz> â€¦ but not Tail Recursion Optimization - perhaps that is the missing link to Raku lifting of in teaching? LOL

[11:15] <lizmat> hmmm  I still don't get why people think it is so important if Raku does tail recursion optimization

[11:15] <discord-raku-bot> <rcmlz> Just joking â€¦

[11:15] <lizmat> shouldn't that be all "under the hood"  for the average user anyway?

[11:15] <discord-raku-bot> <librasteve> I doubt that that is the issue - always easy to focus on one specific (very arcane) feature that is missing

[11:16] <discord-raku-bot> <rcmlz> I was not serious

[11:16] <lizmat> ok, *phew*  :-)

[11:16] <discord-raku-bot> <rcmlz> ðŸ˜€

[11:18] <discord-raku-bot> <holmdunc> IIRC optimised tail recursion is in the JavaScript spec but only Safari implements it!

[11:50] <discord-raku-bot> <rcmlz> seriousness off; You mean JavaScript has it and we not? That now explains everything!; seriousness on

[11:50] <discord-raku-bot> <rcmlz> @holmdunc thanks, interesting that they included that in JS spec.

[14:05] *** discord-raku-bot left
[14:05] *** discord-raku-bot joined
[14:32] <ab5tract> schemes are generally GC + tail recursion, if I remember correctly

[23:00] *** teatime left
