[02:10] *** kjp left
[02:11] *** kjp joined
[02:12] *** kjp left
[02:12] *** kjp joined
[07:51] *** Chanakan left
[07:54] *** Chanakan joined
[08:11] *** cleo left
[08:14] *** Tirifto left
[08:15] *** Tirifto joined
[08:22] *** lizmat left
[08:22] *** gfldex left
[08:22] *** snonux left
[08:34] *** lizmat joined
[08:34] *** gfldex joined
[08:34] *** snonux joined
[08:53] <discord-raku-bot> <a12l> I'm looking at the code block in https://docs.raku.org/language/regexes#Modified_quantifier:_%,_%%

[08:54] <discord-raku-bot> <a12l> raku say so 'abc,def' ~~ / ^ [\w+] ** 1 % ',' $ /;  # OUTPUT: ¬´False‚ê§¬ª  say so 'abc,def' ~~ / ^ [\w+] ** 2 % ',' $ /;  # OUTPUT: ¬´True‚ê§¬ª  

[08:56] <discord-raku-bot> <a12l> What does the square brackets do here? Because they don't define a chap class here, right?

[09:15] <lizmat> square brackets in Raku regexes are for grouping

[09:16] <lizmat> https://docs.raku.org/language/regexes#Non-capturing_grouping

[09:17] <lizmat> a12! you probably want <[ ]>   https://docs.raku.org/language/regexes#Enumerated_character_classes_and_ranges

[12:52] <discord-raku-bot> <a12l> lizmat: Thanks! Now I understand.

[12:52] <discord-raku-bot> <a12l> Yeah, I'm looking at char classes, but was confused when I read the docs.

[14:14] *** MasterDuke left
[14:19] <discord-raku-bot> <a12l> What's the difference between <![ pattern ]> and <-[ pattern ]> in regex?

[14:26] <lizmat> -[ ] is part of the builder of the charclass

[14:26] <lizmat> m: say "ooo" ~~ / <[\w]>+ /

[14:26] <camelia> rakudo-moar 1586e96ae: OUTPUT: ¬´ÔΩ¢oooÔΩ£‚ê§¬ª

[14:27] <lizmat> m: say "ooo" ~~ / <[\w]-[o]>+ /   # aka, all word chars except o

[14:27] <camelia> rakudo-moar 1586e96ae: OUTPUT: ¬´Nil‚ê§¬ª

[14:27] <lizmat> m: say "foo" ~~ / <[\w]-[o]>+ /   # aka, all word chars except o

[14:27] <camelia> rakudo-moar 1586e96ae: OUTPUT: ¬´ÔΩ¢fÔΩ£‚ê§¬ª

[14:36] <discord-raku-bot> <a12l> lizmat: And it differ to <![ ... ]> how?

[14:36] <discord-raku-bot> <a12l> Note that I don't know what char classes actually are, and how they differ from other part of regexes

[14:38] <discord-raku-bot> <librasteve> @a12l is that because you didn't read the doc yet or because you read it and it didn't make sense?

[14:38] <lizmat> <![ ] is a negated lookaround assertion: https://docs.raku.org/language/regexes#Lookaround_assertions

[14:42] <discord-raku-bot> <a12l> I read about half the page about regexes (so not all). And I feel that quite a lot of background knowledge is assumed. And several sections is dependent on stuff that comes later in the page, and they are themselves dependent on other sections.

[14:43] <discord-raku-bot> <librasteve> yeah - the doc can be a bit of a slog to read ... since it covers all the things and there are many

[14:45] <discord-raku-bot> <a12l> @librasteve Do you happen to know a good intro to regexps in Raku for a person not used to regexes tools?

[14:46] <discord-raku-bot> <a12l> Have taken a finite automata course at Uni, but I still feel that there's stuff that I haven't seen before

[14:46] <discord-raku-bot> <librasteve> to cut a long story short, a char class is a set of characters that you can match against ... there are many predefined ones for example \w matches all "word" chars and you can also make your own with the <[ ... ]> syntax, so in lizmats example, <[\w]-[o]> you get all the word chars from \w less the o since that is substracted form the set via the minus -

[14:48] <discord-raku-bot> <librasteve> you may like this https://raku.guide/#_regular_expressions

[14:50] <discord-raku-bot> <a12l> Example: I don't know what "lookahead" means, and the description says "Lookaround assertions, which need a character class in its simpler form, work both ways. They match, but they don't consume a character." The docs never describe what "consume" means.

[14:56] <discord-raku-bot> <librasteve> this sounds like the raku guide (which an intro level) may be too simple for your needs ... tbh I am not sure ... for sure, the regexes reference is indeed quite dense https://docs.raku.org/language/regexes and especially the parts on Zero-width assertions.

[14:59] <discord-raku-bot> <librasteve> I guess the basic idea is that a regex proceeds character by character, usually moving to the next character of the input string on each step. Internally the regex tracks the position count in the input string. This is called "consuming" the character. In the typical case, the regex never goes backward.

[15:01] <discord-raku-bot> <librasteve> However, there are some examples when the regex backtracks - I asked my favourite LLM to describe this https://chatgpt.com/share/5a5fe9a4-f01d-4e7d-8fa9-9cb9f48c2e2e

[15:06] <discord-raku-bot> <librasteve> ok so far?

[15:07] <discord-raku-bot> <librasteve> then to complete the story, from https://docs.raku.org/language/regexes#Summary_of_anchors, we have Anchors are zero-width regex elements. Hence they do not use up a character of the input string, that is, they do not advance the current position at which the regex engine tries to match. A good mental model is that they match between two characters of an input string, or before the first, or after the last

[15:07] <discord-raku-bot> character of an input string.

[15:08] <discord-raku-bot> <a12l> That helps, thanks!

[15:08] <discord-raku-bot> <librasteve> and from just below, we have Zero-Width assertions can help you implement your own anchor: it turns another regex into an anchor, making them consume no characters of the input string. There are two variants: lookahead and lookbehind assertions.

[15:08] <discord-raku-bot> <a12l> lizmat: Thalns for the explainations

[15:09] <discord-raku-bot> <librasteve> to further confuse matters there is the notion of a Lookaround Assertions with "work both ways" ... tbh honest I do not know what that means

[15:10] <discord-raku-bot> <a12l> Feels like 50 percent of Raku is the regex sub language üòõ

[15:10] <discord-raku-bot> <librasteve> :cameliathink:

[15:15] <discord-raku-bot> <librasteve> oh, here's a practical example of a Lookaround Assertion ... first in Lookahead mode:

[15:17] <discord-raku-bot> <librasteve> m: say '333' ~~ m/<?[7]> \d+/;

[15:17] <discord-raku-bot> <Raku eval>  False 

[15:18] <discord-raku-bot> <librasteve> m: say '733' ~~ m/<?[7]> \d+/;

[15:18] <discord-raku-bot> <Raku eval>  ÔΩ¢733ÔΩ£ 

[15:19] <discord-raku-bot> <librasteve> ^^ so this is saying "check that the first digit is a 7, but leave it (ie do not consume it) for the \d+ to capture

[15:21] <discord-raku-bot> <librasteve> And now in Lookbehind mode:

[15:21] <discord-raku-bot> <librasteve> m: say '333$' ~~ m/ \d+ <?[$]>/;

[15:21] <discord-raku-bot> <Raku eval>  ÔΩ¢333ÔΩ£ 

[15:21] <discord-raku-bot> <librasteve> m: say '333' ~~ m/ \d+ <?[$]>/;

[15:21] <discord-raku-bot> <Raku eval>  False 

[15:22] <discord-raku-bot> <librasteve> ^^ and this is saying "check that the digits are followed by a $"

[15:23] <discord-raku-bot> <librasteve> so the Lookaround idea is that the same syntax can be used to gate what is captured in "both ways"

[15:24] <discord-raku-bot> <librasteve> anyway all this assertion stuff is in the deep end of regex - in practice I very rarely need to use it and fwiw, regardless of language, regex is a great tool for any kind of string checking

[15:34] <discord-raku-bot> <a12l> So a char class always matches against a single character?

[15:35] <lizmat> yes   unless you specify a multiplier, such a + or *

[15:35] <discord-raku-bot> <a12l> And the rest of the regex handle how to match against the rest of the string?

[15:36] <discord-raku-bot> <librasteve> The char class is the set of chars that are compared - the quantifier controls how many times the match is done

[15:36] <discord-raku-bot> <librasteve> (as lizmat says)

[15:36] <lizmat> s/multiplier/quentifier   :-)

[15:36] <lizmat> *quantifier

[15:38] <discord-raku-bot> <a12l> But can the quantifier be part of the char class, or does it operate on char classes?

[15:38] <discord-raku-bot> <a12l> Because you can have quantifiers that operate on char classes if I remember correct?

[15:39] <lizmat> quantifiers can NOT be part of a char class

[15:39] <discord-raku-bot> <a12l> And how does nested regex expressions work?

[15:39] <lizmat> they would be just a + or * as a character

[15:39] <lizmat> by nesting ?

[15:48] <discord-raku-bot> <a12l> I'm trying to negate the lower char class to match against a uppercase letter

[15:48] <discord-raku-bot> <a12l> "Abc" ~~ rx { <![<lower>]> }

[15:48] <discord-raku-bot> <a12l> but I get an empty result

[15:48] <discord-raku-bot> <a12l> m: "Abc" ~~ rx { <![<lower>]> }

[15:48] <discord-raku-bot> <Raku eval>  

[15:50] <discord-raku-bot> <a12l> I'm guessing that I doing something very basic error, with how I try to negate <lower>, but I don't know what

[15:52] <discord-raku-bot> <librasteve> reads the docs

[15:53] <discord-raku-bot> <librasteve> m: "Abc" ~~ rx { <-[lower]> }

[15:53] <discord-raku-bot> <Raku eval>  

[15:53] <discord-raku-bot> <librasteve> m: say "Abc" ~~ rx { <-[lower]> }

[15:53] <discord-raku-bot> <Raku eval>  ÔΩ¢AÔΩ£ 

[15:53] <discord-raku-bot> <librasteve> oops for got to say the result

[15:56] <discord-raku-bot> <librasteve> while that works, I think its better style to include the \ like this:

[15:56] <discord-raku-bot> <librasteve> m: say "Abc" ~~ rx { <-[\lower]> }

[15:56] <discord-raku-bot> <Raku eval>  ÔΩ¢AÔΩ£ 

[16:00] <discord-raku-bot> <librasteve> remember the minus - (and plus +) are the way to do set math in character classes

[16:05] <discord-raku-bot> <a12l> I think I misunderstood lizmat before. I interpreted them that I should use <-[]> when defining a char class, and not using it.

[16:07] <discord-raku-bot> <a12l> What does the backslash add to the expression?

[16:07] <discord-raku-bot> <a12l> And what does the angle brackets do?

[16:10] <discord-raku-bot> <librasteve> in the regex slang, which also applies to raku Grammars, angle brackets tell you that you have an inner regex

[16:12] <discord-raku-bot> <librasteve> m: my $inner = rx/\d/; say  "123Abc" ~~ /<$inner>+/;

[16:12] <discord-raku-bot> <Raku eval>  ÔΩ¢123ÔΩ£ 

[16:14] <discord-raku-bot> <librasteve> m: my regex inner {\d}; say  "123Abc" ~~ /<inner>+/;

[16:14] <discord-raku-bot> <Raku eval>  ÔΩ¢123ÔΩ£  inner => ÔΩ¢1ÔΩ£  inner => ÔΩ¢2ÔΩ£  inner => ÔΩ¢3ÔΩ£ 

[16:16] <discord-raku-bot> <librasteve> ^^ in the first example, I can use angle brackets to interpolate a variable inside another regex <$inner>, in the second example I use the regex keyword to make a subrule <inner> no need for the $ this time

[16:17] <discord-raku-bot> <librasteve> see here for interpolation https://docs.raku.org/language/regexes#Regex_interpolation and here for subrules https://docs.raku.org/syntax/regex

[16:17] <discord-raku-bot> <librasteve> (welll you did ask how nesting works)

[16:18] <discord-raku-bot> <librasteve> so, angle brackets have great power and these are the building blocks of Grammars (a topic for another day)

[16:19] <discord-raku-bot> <librasteve> a predefined char class like lower is a reserved use of angle brackets (see the list here https://docs.raku.org/language/regexes#Predefined_character_classes)

[16:20] <discord-raku-bot> <librasteve> m: say "123Abc" ~~ /<lower>+/

[16:20] <discord-raku-bot> <Raku eval>  ÔΩ¢bcÔΩ£  lower => ÔΩ¢bÔΩ£  lower => ÔΩ¢cÔΩ£ 

[16:20] <discord-raku-bot> <librasteve> hopefully that is making sense a bit

[16:22] <discord-raku-bot> <librasteve> other reserved variants of the angle brackets are with ! and ? as we have seen for zero-width assertions and with inner square brackets [] for char classes often with -+ to combine them

[16:25] <discord-raku-bot> <librasteve> m: say "123Abc" ~~ /<[\w]-[b]>+/

[16:25] <discord-raku-bot> <Raku eval>  ÔΩ¢123AÔΩ£ 

[16:26] <discord-raku-bot> <librasteve> so here I remove b from the total set \w (ie all word chars) and so the match stops

[16:26] <discord-raku-bot> <librasteve> m: say "123Abc" ~~ /<[\w]>+/

[16:26] <discord-raku-bot> <Raku eval>  ÔΩ¢123AbcÔΩ£ 

[16:26] <discord-raku-bot> <librasteve> ^^ if I leave b in then it carries on

[16:31] <discord-raku-bot> <librasteve> note: in my investigations today it seems that the backslashed predefined char classes like \w work well with char class set math, I have noticed some issues using the others like <lower> - the docs say You can also write the backslashed forms for character classes between the [ ] so that means that they must be from this list only https://docs.raku.org/language/regexes#Backslashed_character_classes

[16:31] <discord-raku-bot> otherwise the results are unpredictable

[16:33] <discord-raku-bot> <librasteve> and to your question, the backslash inside the char class brackets <[ ... ]> is pretty much the only escape character that then picks out these backslashed predefined char classes and must also be used double if you want to include a literal backslash \\

[16:34] <discord-raku-bot> <librasteve> thanks for you patience!

[20:27] <discord-raku-bot> <a12l> !Thanks for the examples @librasteve!

[21:20] <discord-raku-bot> <antononcube> I would have sent you to talk to LLMs long time ago...

[21:21] *** MasterDuke joined
[21:51] <discord-raku-bot> <a12l> I use Perplexity (unsure what model they''re using), but I get so much contradictory info in the replies that I don't fully trust it.

[21:51] <discord-raku-bot> <a12l> On Raku

[21:59] <discord-raku-bot> <antononcube> @a12l Great on using Perplexity. As for better results with Raku, I would (shamlessly) advice to use my Raku packages for interacting with LLMs: 1) Install "Jupyter::Kernel" (or other decent Raku REPL) 2) Use the LLM prompt "CodeWriterX" with Raku.

[22:01] <discord-raku-bot> <antononcube> "Jupyter::Chatbook" automatically loads the Raku LLM packages "LLM::Functions" and "LLM::Prompts".

[22:01] <discord-raku-bot> <antononcube> The prompt "CodeWriterX" can be used both in chat cell and programmatically.

