[00:43] *** lizmat joined
[01:26] *** librasteve_ left
[01:36] *** Manifest0 left
[08:50] *** librasteve_ joined
[08:52] *** stanrifkin joined
[08:58] *** Manifest0 joined
[09:15] *** dakkar joined
[10:47] *** stanrifkin left
[12:32] *** stanrifkin joined
[13:31] *** human-blip left
[13:32] *** human-blip joined
[13:57] *** human-blip left
[13:57] *** human-blip joined
[14:15] *** librasteve_ left
[17:35] *** dakkar left
[18:14] *** stanrifkin left
[19:40] <ab5tract> librasteve: I'm still curious about this: https://usercontent.irccloud-cdn.com/file/kFUq7k8d/image.png

[19:50] *** librasteve_ joined
[19:51] <discord-raku-bot> <librasteve> ab5tract: sorry thought I had dodged that one ... going over to IRC to avoid mistranslations

[19:51] <librasteve_> arrives at IRC, here’s what I think I said

[19:52] <librasteve_> m: say &[+](1,2)

[19:52] <camelia> rakudo-moar 34cd4c58a: OUTPUT: «3␤»

[19:52] <librasteve_> then

[19:52] <librasteve_> .oO as in ooooh that’s neat

[19:53] <librasteve_> hope that makes sense now

[19:59] *** uniro joined
[20:02] *** Manifest0 left
[20:21] <ab5tract> ahhh

[20:22] <ab5tract> that explains it quite perfectly

[20:22] <ab5tract> I'm not sure how we can fix that bridge, but it would be awesome if we can do so

[20:51] <renormalist> Are allomorphs a special feature of the language or is it "just" a predefined use of the normal type system, with those types, the <> operators, etc.? I mostly wonder where that "use the correct value" work is done, like wouldn't it need to train *every* operator to know about allomorphs?

[20:53] <renormalist> m: <42 50e0 100>.^name

[20:53] <camelia> rakudo-moar 34cd4c58a: ( no output )

[20:53] <renormalist> m: dd <42 50e0 100>.^name

[20:53] <camelia> rakudo-moar 34cd4c58a: OUTPUT: «"List"␤»

[20:53] <discord-raku-bot> <antononcube> @renormalist That would depend on how you define your operators. (I assume you are making new operators.)

[20:54] <renormalist> actually I'm just reading about it, just trying to understand them, because I think they are what's needed in cases where I want Raku to DWIM like Perl, like on porting Perl code.

[20:55] <discord-raku-bot> <antononcube> Try this:  <42 50e0 100>.map(*.^name) 

[20:55] <renormalist> and I'm not sure right now if "Allomorphs" is a concept of the Raku language, or a special type, lie IntStr is.

[20:55] <renormalist> m: dd <42 50e0 100>.map(*.^name)

[20:55] <camelia> rakudo-moar 34cd4c58a: OUTPUT: «("IntStr", "NumStr", "IntStr").Seq␤»

[20:56] <renormalist> m: dd +«<42 50e0 100>.map(*.^name)

[20:56] <camelia> rakudo-moar 34cd4c58a: OUTPUT: «(Failure.new(exception => X::Str::Numeric.new(source => "IntStr", pos => 0, reason => "base-10 number must begin with valid digits or '.'"), backtrace => Backtrace.new), Failure.new(exception => X::Str::Numeric.new(source => "NumStr", pos => 0, reason…»

[20:56] <renormalist> m: dd (+«<42 50e0 100>).map(*.^name)

[20:56] <camelia> rakudo-moar 34cd4c58a: OUTPUT: «("Int", "Num", "Int").Seq␤»

[20:56] <renormalist> m: dd (~«<42 50e0 100>).map(*.^name)

[20:56] <camelia> rakudo-moar 34cd4c58a: OUTPUT: «("Str", "Str", "Str").Seq␤»

[20:56] * renormalist is here: https://docs.raku.org/language/numerics#Allomorphs

[20:58] <renormalist> I formulate it differently: could I create m own "allomorph" behaviour, let's call it "multimorphs", and eg let them handle 3 different values/contexts?

[20:59] <renormalist> then I would understand Allomorphs are just a particular setup of the normal type system of Raku. Is that the case?

[20:59] <renormalist> (remember, I'm early beginner level)

[21:01] <discord-raku-bot> <antononcube> Allomorph behavior is seen in other languages, but most like the concept of "Allomorph" is just in Raku. (As a programming language concpet.)

[21:01] <renormalist> ok

[21:01] <discord-raku-bot> <antononcube> Due, at least one of Raku's creators being a linguist, I guess...

[21:02] <renormalist> I will take this as my thinking model for now. Thanks. Back on experimenting. :-)

[21:06] <ab5tract> Allomorphs are implemented using normal features of the Raku type system, so you could definitely create your theoretical "multimorphs"

[21:07] <ab5tract> the essential pattern is pretty simple, even if the particulars get a bit intricate: https://github.com/rakudo/rakudo/blob/main/src/core.c/allomorphs.rakumod

[21:18] <discord-raku-bot> <antononcube> Hmmm... maybe LLMs can make Raku allomorphs...

[21:19] <discord-raku-bot> <antononcube> Although, I cannot comeup with a meaningful allomorph right now. All my ideas are some version of symbolic programming use cases.

[21:20] <ab5tract> It would be an interesting exercise to work on a Multimorph role that could take a list of types as parameters

[21:21] <ab5tract> I guess their utlity would likely intersect with "sum" types

[21:29] <discord-raku-bot> <librasteve> https://rakujourney.wordpress.com/2024/04/18/allomorphs-unicode/

[21:29] <discord-raku-bot> <librasteve> https://rakujourney.wordpress.com/2023/05/29/allomorphia/

[21:39] <renormalist> ab5tract: thanks, will read and adapt my thinking model.

[21:44] <renormalist> ab5tract: that core.c/allomorphs.rakumod, despite me not getting every detail, is quite the answer, I can somehow see everything I was thinking about. Nice learning for me. Thanks again.

[21:48] <ab5tract> renormalist: cheers! sometimes taking a look at the Rakudo source can be really helpful

[22:58] *** cleo left
