[01:36] *** Chanakan joined
[07:08] *** Chanakan left
[07:59] *** dakkar joined
[14:46] <discord-raku-bot> <webstrand> Does raku have any way to specify dependencies inline? I'd like to use it for writing scripts, but having a META6.json sidecar is not idea.

[14:47] <discord-raku-bot> <webstrand> the ideal would be to allow the script to automatically resolve, download, and unpack its own dependencies at start, but I don't know of any language that can do that

[14:52] <lizmat> would inline specification of a META6.json has be workable ?

[14:54] <discord-raku-bot> <webstrand> it looks like the meta6 could be passed to a use statement which does the work of building the repo, I think the compile phase can add additional search directories?

[14:54] <discord-raku-bot> <antononcube> @webstrand I think this is exactly what Raku is doing. (Meaning, I most likely misunderstood what you wrote...)

[14:55] <discord-raku-bot> <antononcube> @webstrand Sorry, I got it now...

[14:55] <discord-raku-bot> <webstrand> well for instance, I have a raw raku install, I can't just use JSON::Fast because it doesn't exist

[14:55] <discord-raku-bot> <webstrand> making a whole folder per script to hold its sidecars and dependencies isn't friendly to writing scripts

[14:56] <discord-raku-bot> <antononcube> Hmm... it is like closure for packages, wher the "closure space" is the ecosystem.

[14:57] <lizmat> fwiw, to get the best performance, it's a Raku custom to put most of the logic in modules (which get pre-compiled) and have a script be a (very) simple frontend

[14:57] <lizmat> afk&

[15:22] <discord-raku-bot> <antononcube> @webstrand I think CommaIDE has functionalities related to what you want.  It seems to be aware of the ecosystem packages. Or at least the ones installed. In that way CommaIDE can make suggestions about missing dependencies and referencies.

[15:23] <discord-raku-bot> <antononcube> @ab5tract Does CommaIDE know all ecosystem packages or "just" the ones installed locally?

[15:28] <discord-raku-bot> <webstrand> that's just a text editor right, not a library? I don't think that's what I'm looking for, for instance if I copy the script to another server, I'd have to manually resolve the dependencies

[15:31] <discord-raku-bot> <antononcube> @webstrand Correct, it is an IDE  / editor. As I stated, it has related functionalities. I am not sure how easy it is extract and port them into a Raku package. (Or whatever else programming languae standalone package.)

[15:31] <ab5tract> Iâ€™m polishing up some finishing details related to dependency management via zef but Comma already downloads the ecosystem (minus cpan, todo: make this configurable)

[15:32] <discord-raku-bot> <webstrand> yeah I think zef has an api I can call from a script. I'll have to see if I can do everything in the compile-phase

[15:36] <discord-raku-bot> <antononcube> @ab5ract But that ecosystem download is Java (i.e. not in Raku), right?

[15:55] <discord-raku-bot> <webstrand> Actually how do I even install zef. Should it have come with rakudo? I'm using the opensuse package, is the package is just incomplete/incorrect?

[15:57] <discord-raku-bot> <librasteve> @webstrand what version of raku do you have (raku --version)

[15:58] <discord-raku-bot> <librasteve> what OS are you on?

[15:58] <discord-raku-bot> <librasteve> (oh opensuse == suse ... durrr)

[15:59] <discord-raku-bot> <librasteve> it can be that the linux apt package managers are quite out of date -- personally I use rakubrew.org

[15:59] <discord-raku-bot> <librasteve> (mac and linux)

[15:59] <discord-raku-bot> <librasteve> rakudo now includes zef for a long time

[16:00] <ab5tract> Nice

[16:01] <discord-raku-bot> <librasteve> otherwise you can easily install from https://github.com/ugexe/zef

[16:12] <lizmat> git clone https://github.com/ugexe/zef

[16:12] <lizmat> cd zef

[16:12] <lizmat> raku -I. bin/zef install .

[16:12] <lizmat> it installs itself that way

[16:15] <discord-raku-bot> <webstrand> I saw that, and I can do that. But is there a way to install it globally? I think just running it with sudo will result it in being installed under /root not globally

[16:16] <discord-raku-bot> <webstrand> there doesn't seem to be a clear "install this globally" flag

[16:17] <discord-raku-bot> <antononcube> @webstrand You can install zef always, as a first preliminary step in your scripts.

[16:25] <discord-raku-bot> <webstrand> --install-to seems to be the right solution. Reinstalling every time would be brutally finicky, I'd have to put shell commands at the top of every script

[16:28] <discord-raku-bot> <webstrand> Should I install to site or vendor ðŸ¤”

[16:28] <lizmat> site I'd say

[16:34] *** dakkar left
[16:50] <discord-raku-bot> <holmdunc> I know of JavaScript (Deno), Ruby (bunder/inline), Python (PEP723 + uv or pipx) which can do that. It is indeed a cool feature for a single-file script to be able to automatically bootstrap its third-party dependencies if needed

[16:55] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/10/21/2024-43-advent-alert/

[17:43] <discord-raku-bot> <webstrand> It seems like I could just implement a CompUnit::Repository put it at the end of the repo chain and if a module isn't found and it's fully specified like use JSON::Fast:ver<0.19>:auth<cpan:TIMOTIMO> I could have it install that module?

[17:43] <discord-raku-bot> <webstrand> I'm not sure if there's a unique-er identifier than a distribution with :ver and :auth

[17:49] <discord-raku-bot> <rcmlz> :api<1> can be used in the specification too

[17:52] <discord-raku-bot> <rcmlz> as far as I understand :ver<> is morr like in Pythons requirement.txt where everything is nailed specificly. Perhaps if module developers use api more someone would get the improvements whithout risking breaking code.

[17:53] <lizmat> webstrand yes you could

[17:53] <lizmat> afk&

[20:11] *** Heptite joined
[20:12] *** Heptite left
[20:14] *** Heptite joined
[20:50] <discord-raku-bot> <librasteve> @webstrand - you can be quite targeted with ver<...> see https://docs.raku.org/type/Version

[20:52] *** swaggboi left
[20:59] <discord-raku-bot> <webstrand> yep I just wanted to make sure that was the most specific, so that I could only install distributions with equivalent specificity to META6.json rules

[21:05] *** swaggboi joined
[21:10] *** human-blip left
[23:10] *** Heptite left
[23:59] <discord-raku-bot> <aruniecrisps> @librasteve i just looked at your post on Definitely, and I was wondering if we can't figure out do notation in Rakku

