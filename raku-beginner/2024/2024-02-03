[10:20] *** CIAvash joined
[12:04] *** habere-et-disper joined
[12:08] <habere-et-disper> I think of `/` as a Rat constructor, so was surprised to see `pi` equal to a rational :

[12:08] <habere-et-disper> m: say pi == 245850922 / 78256779

[12:08] <camelia> rakudo-moar 344f7978d: OUTPUT: «True␤»

[12:09] <lizmat> m: dd pi.WHAT

[12:09] <camelia> rakudo-moar 344f7978d: OUTPUT: «Num␤»

[12:10] <lizmat> pi is a Num, so you're within the precision of Num comparisons

[12:11] <habere-et-disper> Is it being truncated when stringified ?

[12:11] <habere-et-disper> m: say 245850922 / 78256779

[12:11] <camelia> rakudo-moar 344f7978d: OUTPUT: «3.141592654␤»

[12:11] <habere-et-disper> m: say pi == 3.141592654

[12:11] <camelia> rakudo-moar 344f7978d: OUTPUT: «False␤»

[12:11] <lizmat> m: dd (245850922 / 78256779).WHAT

[12:11] <camelia> rakudo-moar 344f7978d: OUTPUT: «Rat␤»

[12:12] <lizmat> m: dd (245850922 / 78256779)

[12:12] <camelia> rakudo-moar 344f7978d: OUTPUT: «<245850922/78256779>␤»

[12:12] <lizmat> m: dd (245850922 / 78256779).Num

[12:12] <camelia> rakudo-moar 344f7978d: OUTPUT: «3.141592653589793e0␤»

[12:12] <lizmat> m: say pi == (245850922 / 78256779).Num

[12:12] <camelia> rakudo-moar 344f7978d: OUTPUT: «True␤»

[12:13] <habere-et-disper> Thanks ! (y)

[12:14] <habere-et-disper> And I suppose it is types again with:

[12:14] <habere-et-disper> m: say i == (-1).sqrt

[12:14] <camelia> rakudo-moar 344f7978d: OUTPUT: «False␤»

[12:18] <lizmat> m: use v6.e.PREVIEW: say i == (-1).sqrt

[12:18] <camelia> rakudo-moar 344f7978d: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> use v6.e.PREVIEW:⏏ say i == (-1).sqrt␤    expecting any of:␤        colon pair␤»

[12:18] <lizmat> m: use v6.e.PREVIEW; say i == (-1).sqrt

[12:18] <camelia> rakudo-moar 344f7978d: OUTPUT: «True␤»

[12:18] <lizmat> habere-et-disper: fixed in 6.e

[12:22] <habere-et-disper> Bravo !

[12:42] *** habere-et-disper left
[13:14] *** discord-raku-bot left
[13:14] *** discord-raku-bot joined
[13:30] *** CIAvash left
[15:43] <dano> Can I "precompile" a Raku program with Rakudo to bytecode (or whatever)?

[15:49] <lizmat> yes, you can: by installing it

[15:49] <lizmat> basically, turn your code into a module with META6.json and install that with zef: it will pre-compile the code for you

[18:39] <discord-raku-bot> <librasteve> m: say pi =~= 3.14159265358979

[18:39] <discord-raku-bot> <Raku eval>  True 

