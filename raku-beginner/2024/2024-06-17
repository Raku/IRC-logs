[00:00] *** Tirifto left
[00:11] *** Tirifto joined
[07:46] *** teatwo left
[07:47] *** teatwo joined
[08:02] *** dakkar joined
[09:36] *** teatwo left
[09:36] *** teatwo joined
[10:19] *** teatwo left
[10:20] *** teatwo joined
[10:59] <discord-raku-bot> <librasteve> @gfldex - sorry if I implied that you don't know what is going on - for sure you are way more familiar with the raku implementation than I am

[11:04] <discord-raku-bot> <librasteve> in trying to understand your points, in the light of the question, I think that (when you mention a bug in rakudo) you are considering the behaviour of a parameter that is both Positional (ie has an @ sigil) and optional (ie has ? suffix) ... if your mention of a bug is wider than that, then I would appreciate if you can explain more fully (or maybe there is an issue I can look at)

[11:16] <discord-raku-bot> <librasteve> and the "dodgy" behaviour is that, unlike an optional parameter that is a Scalar (ie has an $ sigil) which will give an (Any) in the absence of an argument, a Posiitonal will fire Array.new and then, if I follow your line of discussion correctly you are thinking that maybe this DWIM behaviour was introduced by Larry to meet the expectations of most coders who would want an Empty Array [] inside the sub

[11:16] <discord-raku-bot> rather than an (Array) type class in the absence of a param. This is after all the same effect of declaring my $x; (Mu $x = Any) and My @a; (Mu @a = []) at the start of the sub block and it is one role of the Signature to declare the argument vars for the block  ... so maybe you are saying that the current design is OK (ie. not a bug) although it is a bit illogical ?

[12:13] *** greenfork left
[12:13] *** KOTP left
[12:13] *** greenfork joined
[12:13] *** KOTP joined
[12:48] *** camelia left
[12:51] *** camelia joined
[13:35] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2024/06/17/2024-25-geographically-explained/

[13:44] *** teatwo left
[13:44] *** teatwo joined
[16:40] *** dakkar left
[18:39] <discord-raku-bot> <gfldex> Yes, but it's a little contrived:      sub foo(|c (@a?) ) {         dd c, @a;     }     foo(); 

[18:40] <discord-raku-bot> <gfldex> So you have to use a Capture with a sub-signature and introspect the Capture.

[20:53] <discord-raku-bot> <gfldex> The thing that tripped me off are type-captures. What does sub f(::T $a?){}; f() even mean? How can we capture a type of a value that isn't there? Shouldn't T =:= Nil in this case? When asking for a type capture, we are telling the compiler: Bind $a to a thing and then store its type in T. If the binding never happens, how can the compiler follow that instruction? As shown above, we can tell the difference

[20:53] <discord-raku-bot> between an empty Array and the case where no Array was bound to by going through a sub-signature (or using a multi).  Does that fulfil the design principle: „Easy things should be easy and hard things should be possible.“?

[20:58] <discord-raku-bot> <gfldex> m:     sub bar($a? is raw) {        dd $a;     }     bar(); 

[20:58] <discord-raku-bot> <Raku eval>  Any 

[20:59] <discord-raku-bot> <gfldex> Also, why can I do that ^^^ ?

