[16:13] *** etothepiiminus1 joined
[16:18] *** etothepiiminus1 left
[20:13] <discord-raku-bot> <antononcube> Why "smart-match against False always fails"? (I saw that error message today.) Where it is documented?

[20:14] <discord-raku-bot> <nemokosch> https://docs.raku.org/type/Bool#method_ACCEPTS

[20:15] <discord-raku-bot> <nemokosch> it's not an error; it's a perfect example of being too indecisive

[20:15] <discord-raku-bot> <nemokosch> when uses smart-matching under the hood but somebody thought it should also try to mimic the behavior of if as much as possible

[20:16] <discord-raku-bot> <nemokosch> so smartmatching was deliberately ruined to support this use case

[20:19] <discord-raku-bot> <antononcube> Thank you for your prompt reply!

[20:24] <discord-raku-bot> <antononcube> I get it -- the "strange consistency" strikes again...

[20:27] <discord-raku-bot> <nemokosch> exactly

[20:27] <discord-raku-bot> <nemokosch> a backwards abstraction

[22:22] <discord-raku-bot> <librasteve> I guess that the design is to make it possible to isolate code sections during dev 'when False { never runs }'  or 'when True {always runs}' in a way that is analogous to 'if True {...}' and 'if False {...}'

[22:25] <discord-raku-bot> <librasteve> since you just can go 'when *.so {}' instead, this seems OK (ish) to me (not ideal, but you get the best of both worlds at the cost of a warning surprise)

[22:25] <discord-raku-bot> <librasteve> the docs are LTA

[23:37] *** guifa joined
