[11:53] <greenfork> Is this OK that with this signature: `multi sub infix:<mod>(Int:D $a, Int:D $b --> Int:D)`, I can do the following

[11:53] <greenfork> m: say 10.3 mod 3.3

[11:53] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´0.4‚ê§¬ª

[11:53] <greenfork> And this is equivalent to

[11:53] <greenfork> m: say 10.3 % 3.3

[11:53] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´0.4‚ê§¬ª

[11:54] <lizmat> m: dd (10.3).WHAT

[11:54] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´Rat‚ê§¬ª

[11:54] <lizmat> m: dd (10.3).WHAT ~~ Int

[11:54] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´Bool::False‚ê§¬ª

[11:54] <lizmat> greenfork: a Rat is not an Int, so that signature will not be selected

[11:57] <greenfork> Documentation says: Integer modulo operator. Returns the remainder of an integer modulo operation.

[11:57] <greenfork> https://docs.raku.org/language/operators#infix_mod

[11:57] <greenfork> I'm confused why it says "Integer"

[12:02] <lizmat> greenfork: this appears to be a recent change: https://github.com/Raku/problem-solving/issues/326

[12:02] <lizmat> that apparently didn't make it to the documentation yet

[12:06] <greenfork> I see, thank you!

[12:09] <lizmat> having said that, it feels that:

[12:09] <lizmat> m: say 10.3 mod 3.3

[12:09] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´0.4‚ê§¬ª

[12:10] <lizmat> is wrong, I'd expect it to produce 1, like

[12:10] <lizmat> m: say 10 mod 3

[12:10] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´1‚ê§¬ª

[12:10] <lizmat> as opposed to %

[12:10] <lizmat> m: say 10.3 % 3.3

[12:10] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´0.4‚ê§¬ª

[12:15] <greenfork> I agree, if mod and div are similar, then the behavior should be like for div

[12:15] <greenfork> m: say 10.3 / 3.3

[12:15] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´3.121212‚ê§¬ª

[12:15] <greenfork> m: say 10.3 div 3.3

[12:15] <camelia> rakudo-moar b1167851c: OUTPUT: ¬´3‚ê§¬ª

[12:22] <lizmat> greenfork: you might want to re-open or make a new problem solving issue for that: https://github.com/Raku/problem-solving/issues/326

[12:24] <greenfork> lizmat: I will do so, sure

[12:24] <lizmat> ++greenfork 

[12:50] <greenfork> lizmat: I added a comment to the same issue, but I can't re-open it

[12:51] <lizmat> reopened now, thanks!

[13:22] *** user1729 joined
[13:24] <user1729> Hi, quick question, what's the raku way / equivalent of https://developer.apple.com/documentation/swift/array/prefix(while:)? Can of course write something, but feels like the sort of thing raku'd have built in

[13:26] <lizmat> https://docs.raku.org/type/Any#method_toggle perhaps ?

[13:34] <user1729> Ah, yup, that'll work. Thanks. I don't imagine I'd have come across that with what I was searching for in the documentation

[13:34] <lizmat> perhaps someone should write a Go -> Raku nutshell guide  :-)

[13:42] <user1729> A migartion guide covering an entire standard library would be quite the task

[13:42] <lizmat> agree...  :-)

[14:27] *** vlad joined
[14:48] <discord-raku-bot> <rcmlz> @antononcube - would that be to conpkex to ask LLM for? Will an LLM come up with all the toggle/snatch/snitch/rotor/categorize/25-strange-things-more stuff you do not find easily in other languages?

[14:51] <discord-raku-bot> <antononcube> @rcmlz I have done a few experiments with that -- YMMV, a lot!

[14:53] <discord-raku-bot> <antononcube> @rcmlz Basically, converting simple Python libraries to Raku works, but you still have to correct/change between 5% to 20% of the generated code. Converting Raku librarires to Python also kind of, sort of works. Again, manual changes are needed.

[14:54] <discord-raku-bot> <antononcube> I think it really depends on the problem domain. In a few cases, I was considering not converting an existing library to Raku, but make a new Raku library for the same functionalities from scratch using LLM-support.

[14:56] <discord-raku-bot> <antononcube> Over-developed Python libraries are hard to convert. I could not easily convert into maningful -- to me -- Raku code Python LLM libraries released by OpenAI, Google, or MistralAI.

[14:57] *** user1729 left
[15:00] <discord-raku-bot> <rcmlz> ChatGPT proposes a grep based solution. Probability nit enough toggle-solutions in the trainingdata ‚Ä¶. :-( https://chat.openai.com/share/85f7f602-3c37-4cbe-b36f-ad26ff6201e5

[15:00] <lizmat> yeah, toggle is pretty new

[15:00] <lizmat> grep will work, with a "last" if you're done

[15:03] <discord-raku-bot> <rcmlz> But interestingly it got it right, after explicitly asking for toggle. ‚ÄûThe toggle method is useful for iterating over a sequence and collecting elements until a condition becomes false.‚Äú

[15:06] <discord-raku-bot> <antononcube> @rcmlz Sorry, I answered a different question it seems. I read the statement: >  A migration guide covering an entire standard library would be quite the task as : > A migration  converting an entire standard library would be quite the task

[15:07] <discord-raku-bot> <antononcube> I guess, I just needed an excuse to talk about LLM-conversions of software libraries. üôÇ

[15:17] <discord-raku-bot> <librasteve> there is some kind of 3 way integer mod routine, please can someone remind me of the name?

[15:34] <lizmat> 3 way ?

[15:37] <discord-raku-bot> <librasteve> yeah I recall seeing an example that went something like 86400.threewaymod(24,60,60)

[15:38] <lizmat> polymod ?

[15:38] <lizmat> https://docs.raku.org/type/Int#method_polymod

[15:38] <discord-raku-bot> <librasteve> yep

[15:38] <discord-raku-bot> <librasteve> you are a genius!

[15:39] <lizmat> It's actually N-way  :-)

[15:43] <discord-raku-bot> <librasteve> yeah, so polymod has the documented signature: method polymod(Int:D: +@mods)

[15:43] <discord-raku-bot> <librasteve> m: say ‚Öî.polymod(‚Öì);

[15:43] <discord-raku-bot> <Raku eval>  (0 2) 

[15:44] <discord-raku-bot> <librasteve> so that Int:D is neither doing a type check, nor a coercion ;-)

[15:45] <lizmat> i think that's a doc issue

[15:45] <discord-raku-bot> <librasteve> I think the examples are great and what polymod should dwim ... but maybe I should go for a doc issue (do you agree?)

[15:45] <lizmat> yes

[15:45] <discord-raku-bot> <librasteve> snap

[15:45] <discord-raku-bot> <librasteve> back on vanilla mod, then something is definitely broken... I found this

[15:46] <discord-raku-bot> <librasteve> m: say 10 mod 3.4

[15:46] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller infix:<div>(Int:D, Rat:D); none of these signatures matches:     (Int:D $a, Int:D $b --> Int:D)     (int $a, int $b --> int)     (uint $a, uint $b --> uint)   in block <unit> at main.raku line 1  

[15:46] <discord-raku-bot> <librasteve> m: say (10 mod 3.4)

[15:46] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller infix:<div>(Int:D, Rat:D); none of these signatures matches:     (Int:D $a, Int:D $b --> Int:D)     (int $a, int $b --> int)     (uint $a, uint $b --> uint)   in block <unit> at main.raku line 1  

[15:46] <discord-raku-bot> <librasteve> hmm in the repl I get [27] > 10 mod 3.4 -0.2

[15:51] <discord-raku-bot> <librasteve> https://github.com/Raku/doc/issues/4446

[15:51] <lizmat> librasteve++

[15:51] <discord-raku-bot> <librasteve> ^^^ that's polymod "sorted"

[16:16] *** avuserow left
[16:17] *** avuserow joined
[16:40] *** dakkar left
[19:07] <discord-raku-bot> <nhail> Thanks for the response. There is a bit of XY problem going on on my end, I'm trying to make use of the StrDistance feature in Raku to calculate Levenshtein distance. The working method for me is StrDistance.new(before=>'new',after=>'old'), but this is kind of long, and I was looking for a way to do it with tr/// instead.

[19:22] *** vlad left
