[01:13] *** MasterDuke left
[01:48] *** habere-et-disper left
[04:15] *** swaggboi left
[04:28] *** swaggboi joined
[05:41] *** vlad joined
[06:39] *** vlad left
[06:57] *** vlad joined
[10:47] <ab5tract> I personally think the ergonomics around getting the values out of matches are a bit annoying, but here’s an option that feels mostly fine to me:

[10:48] <ab5tract> m: dd my Int() @g = @(“11 22” ~~ m/(\d\d)\s(\d\d)/)

[10:48] <camelia> rakudo-moar 1ccb95d45: OUTPUT: «Int(Any) @g = Array[Int(Any)].new(11, 22)␤»

[10:49] <ab5tract> Or if you want them as strings, just coerce using Str() instead

[10:50] <ab5tract> bobby_jim_birdrock: I hope it helps ^^

[10:51] <ab5tract> Of course it can be extended to assigning into scalars as well:

[10:51] <ab5tract> m: dd my Int() ($x, $y) = @(“11 22” ~~ m/(\d\d)\s(\d\d)/)

[10:51] <camelia> rakudo-moar c9b75d737: OUTPUT: «(11, 22)␤»

[11:19] *** lizmat left
[11:22] *** lizmat joined
[12:57] <discord-raku-bot> <librasteve> here's my take on this:

[12:58] <discord-raku-bot> <librasteve> m: my $hex = "0810"; dd $hex ~~ /(\d\d)(\d\d)/;

[12:58] <discord-raku-bot> <Raku eval>  Match.new(:orig("0810"), :from(0), :pos(4), :list((Match.new(:orig("0810"), :from(0), :pos(2)), Match.new(:orig("0810"), :from(2), :pos(4))))) 

[12:58] <discord-raku-bot> <librasteve> ^^ using dd (data dumper) here to see what I have got ... OK looks like a nested Match, but Match is Positional, so I can maybe flatten it with '|'

[12:59] <discord-raku-bot> <librasteve> m: my $hex = "0810"; dd |($hex ~~ /(\d\d)(\d\d)/);

[12:59] <discord-raku-bot> <Raku eval>  Match.new(:orig("0810"), :from(0), :pos(2)) Match.new(:orig("0810"), :from(2), :pos(4)) 

[12:59] <discord-raku-bot> <librasteve> ^^ that's better now I have a List of two Matches, can use the my () dyntax to destructure on the LHS of an assignement

[13:00] <discord-raku-bot> <librasteve> m: my $hex = "0810"; my ( @a ) = |($hex ~~ /(\d\d)(\d\d)/); dd @a;

[13:00] <discord-raku-bot> <Raku eval>  Array @a = [Match.new(:orig("0810"), :from(0), :pos(2)), Match.new(:orig("0810"), :from(2), :pos(4))] 

[13:01] <discord-raku-bot> <librasteve> ok I can load @a ok, but I want Str on the lhs...

[13:01] <discord-raku-bot> <librasteve> m: my $hex = "0810"; my ( Str() $row, Str() $col ) = |($hex ~~ /(\d\d)(\d\d)/); say $row, $col;

[13:01] <discord-raku-bot> <Raku eval>  0810 

[13:02] <discord-raku-bot> <librasteve> m: my $hex = "0810"; my ( Str() $row, Str() $col ) = |($hex ~~ /(\d\d)(\d\d)/); say "row is $row, col is $col";

[13:02] <discord-raku-bot> <Raku eval>  row is 08, col is 10 

[13:03] <discord-raku-bot> <librasteve> ^^ since the my () has the same syntax as a sub call, I can use types - in this case Str() is a coercion type that calls .Str on the value passed in

[13:06] *** vlad left
[13:08] <discord-raku-bot> <librasteve> m: my (Str() %h) = <row col> Z=> $hex ~~ /(\d\d)(\d\d)/; say %h;

[13:08] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '$hex' is not declared at /home/glot/main.raku:1 ------> my (Str() %h) = <row col> Z=> ⏏$hex ~~ /(\d\d)(\d\d)/; say %h; 

[13:09] <discord-raku-bot> <librasteve> m: my $hex = "0810"; my (Str() %h) = <row col> Z=> $hex ~~ /(\d\d)(\d\d)/; say %h;

[13:09] <discord-raku-bot> <Raku eval>  {col => 10, row => 08} 

[13:10] <discord-raku-bot> <librasteve> and coercion types can be used with %hashes and the Z=> zips the rhs into Pairs ;-)

[13:19] <discord-raku-bot> <gfldex> m: class Foo {         constant Parser = regex { $<int>=(\d+) $<str>=(\w+) }         has Int() $.int;         has Str() $.str;     }      my Foo() $foo .=new: |('123 abc' ~~ Foo::Parser).hash;     dd $foo;

[13:19] <discord-raku-bot> <Raku eval>  Foo $foo = Foo.new(int => 12, str => "3") 

[13:20] <discord-raku-bot> <gfldex> @librasteve You don't even need coersion types, if the target is a class.

[13:23] <discord-raku-bot> <librasteve> he he

[13:23] <discord-raku-bot> <gfldex> m: ```    class Foo {         constant Parser = regex { $<int>=(\d+) $<str>=(\w+) }         has Int() $.int;         has Str() $.str;         method from-str(Str() $s) {             self.new: |($s ~~ Parser).hash;         }     }      my Foo $foo .=from-str: '123 abc';     dd $foo; ````

[13:23] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus statement at /home/glot/main.raku:12 ------>     dd $foo;⏏<EOL>     expecting any of:         prefix         term 

[13:24] <discord-raku-bot> <gfldex> Less boilerplaty version.

[13:24] <discord-raku-bot> <librasteve> that Foo::Parser constant thing is new to me ... til

[13:39] *** vlad joined
[14:28] <ab5tract> gfldex: but your class is using coercion types :)

[14:32] <discord-raku-bot> <gfldex> I have not given up hope for typed matches.

[14:49] *** vlad_ joined
[14:53] *** vlad left
[15:47] *** ACfromTX left
[16:37] *** vlad_ left
[16:39] *** vlad joined
[18:00] *** ACfromTX joined
[18:21] *** gfldex left
[18:25] *** gfldex joined
[18:30] <discord-raku-bot> <librasteve> ```  my regex number {     \S+                     #grab chars     <?{ +"$/" ~~ Real }>    #assert coerces via '+' to Real }

[18:30] <discord-raku-bot> <librasteve> can just do lookahead assertion for “typed matches”

[18:32] *** vlad_ joined
[18:36] *** vlad left
[20:17] *** vlad_ left
[20:54] *** MasterDuke joined
[21:09] *** teatime left
[23:36] <discord-raku-bot> <bobby_jim_birdrock> Wow you guys are fun!  I especially like the flattening operator.  And... I didn't know we had a Raku bot...

[23:39] <discord-raku-bot> <bobby_jim_birdrock>  To exit type 'exit' or '^D' [0] > my $hex = "0810" 0810  ...  [7] > my ( Str() $a, Str() $b ) = |($hex ~~ /(\d\d)(\d\d)/); (08 10) [8] > $a 08 [9] > $b 10 [10] >  

