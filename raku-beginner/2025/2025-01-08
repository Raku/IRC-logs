[00:51] *** Manifest0 left
[01:35] <thowe> what the idiomatic way to say "$this unless it is false, in that case nil".

[01:36] <thowe> I want to return NIL if it is an empty string instead of an empty string

[01:47] <SmokeMachine> m: say “” || Nil

[01:47] <camelia> rakudo-moar 8991173fc: OUTPUT: «Nil␤»

[01:47] <SmokeMachine> m: say “bla” || Nil

[01:47] <camelia> rakudo-moar 8991173fc: OUTPUT: «bla␤»

[01:48] <SmokeMachine> But why do you want Nil?

[01:51] <thowe> because it is going in to a database column that I don't want empty strings, I want NULL.  Nil apparently translates to NULL.

[01:55] <thowe> Now, what I think I actually want to do is subclass array so that when the element is an Empty Str it returns Nil.  That seems cleaner.

[02:05] <SmokeMachine> Why not Str?

[02:08] <SmokeMachine> If using Red (https://github.com/FCO/Red), you could just not set the value…

[02:42] <ab5tract> thowe: I’m a bit surprised at that behavior to be honest. I would expect a database driver / library to treat undefined objects as NULL on insert

[07:25] <thowe> Empty strings don't insert as other data types.  They are also less convenient to detect as lack of data.  Nil inserting as NULL makes the most sense.

[07:29] <SmokeMachine> thowe: I meant the type object Str

[09:13] *** dakkar joined
[10:26] <discord-raku-bot> <monkeyinthejuice> How do I making ARRAY of HASH

[10:53] <discord-raku-bot> <nahita3882> hi, [ %(a => 2, b => 3), %(e => 8, a => 77, f => 0) ] is an array of hashes

[10:54] <discord-raku-bot> <nahita3882> %(...) is one way of making a Hash literal; I'd say it's the most common and unambigous (unlike with {} maybe)

[10:54] <discord-raku-bot> <nahita3882> [...] is making an array

[10:55] <discord-raku-bot> <nahita3882> and we assign this to my @a = ... for example, and now @a is an Array

[10:57] <discord-raku-bot> <nahita3882> @ "sigil" is signaling that the variable is "Positional", i.e., it is a container that you can index it with natural numbers; the default class that does the Positional role is Array, therefore @a is of type Array

[11:00] <discord-raku-bot> <nahita3882> its cousin is List -- it also does positional but the main difference is it's immutable (its size shall never change, you cannot really assign to its elements)

[11:01] <discord-raku-bot> <nahita3882> and you-cannot-assign-to-elements of Lists is achieved by lack of "scalar containers" on the elements of a List unlike an Array

[11:02] <discord-raku-bot> <nahita3882> https://docs.raku.org/language/containers#Scalar_containers_and_listy_things

[11:05] <discord-raku-bot> <nahita3882> one way of making a List is my @b is List = ...

[11:05] <discord-raku-bot> <nahita3882> it says it wants a Positional that is a List (not the default Array)

[11:20] <discord-raku-bot> <monkeyinthejuice> How do I making ARRAY of ARRAY of hash

[11:39] <discord-raku-bot> <nahita3882> if you have Xs (X1, X2, ...) and you do [X1, X2, ...] it's an array of Xs

[14:31] *** Manifest0 joined
[15:32] <discord-raku-bot> <rcmlz> Is shrek a real person or a bot?

[15:47] <thowe> SmokeMachine: well...  I suppose one needs the ability to store an empty string if required, so silently changing that to NULL is probably not a good default(?)

[15:55] <ab5tract> thowe: Str is not representing an empty string. It represents an undefined string

[15:56] <ab5tract> I would change the logic that produces the data to generate Str instead of an empty string

[15:57] <ab5tract> I don’t know what db library you are using but I wouldn’t personally use one that doesn’t treat an insert of Str into a string column as a NULL

[15:58] <thowe> I'm getting the empty string by splitting a line of comma separated values.  When nothing is between the commas, and using the array element to insert into the database, it is used as an empty string.

[15:58] <discord-raku-bot> <monkeyinthejuice> Why does person talking begin with <letters>

[15:58] <discord-raku-bot> <monkeyinthejuice> @Raku bridge why

[15:58] <ab5tract> m: my Str @a; @a[4] = “value”; dd @a

[15:58] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «Str  = Array[Str].new(Str, Str, Str, Str, "value")␤»

[16:00] <lizmat> monkeyinthejuice otherwise on the IRC side we wouldn't be able to see who said what

[16:00] <ab5tract> m: my @a = “,,,,”.split(“,”).map: { $_ || Str }; dd @a

[16:00] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «[Str, Str, Str, Str, Str]␤»

[16:01] <ab5tract> The point is that the db driver should be smart enough to go Str (or any undefined type object that matches the column type)-> NULL

[16:03] <thowe> ab5tract: well, that may be.  I'm not sure I know enough about potential issues to have a strong opinion.  I think you would have to take that up with the author(s) of DB::Pg.

[16:05] <thowe> My script is quick and dirty, and I am using it as an excuse to learn a couple random things.  A more mature version will abstract that data through validation and an intermediate data construct.  in the meantime, I wanted to create a code example for myself of overloading the "[]" postcircumfix operator for an array subclass to spit out Nil instead of an undefined string, I think.

[16:06] <ab5tract> thowe: Are you saying that you have already tried inserting undefined strings (not empty ones) using DB::Pg and the result is not a NULL value in the respective db column?

[16:07] <thowe> I've tried whatever ends up in the array.  I'm not 100% sure if they are empty or undefined.

[16:07] <thowe> standby

[16:08] *** MasterDuke joined
[16:08] <discord-raku-bot> <librasteve> m: enum DBCode <NULL>; sub nullify (@a) { @a.map: {$_ ?? $_ !! NULL} }; ['a','b','',Nil,Str].&nullify.map(*.raku.say);

[16:08] <discord-raku-bot> <Raku eval>  "a" "b" DBCode::NULL DBCode::NULL DBCode::NULL 

[16:09] <SmokeMachine> Im almost sure undefined Str will end up as NULL on Pg… I use that on Red, if I’m not completely mistaken…

[16:11] <ab5tract> So if you want to override [], you can define an AT-POS method in a class. This will give you control of [] on scalar instances of that class ($foo[]). Storing instances in @foo requires doing the Positional role, which may be a bit more involved (haven’t done this in a while)

[16:11] <thowe> m: dd split(',', "this,is,a,line,,,only")

[16:11] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «("this", "is", "a", "line", "", "", "only").Seq␤»

[16:12] <thowe> I mean, those look like empty strings to me.

[16:12] <thowe> right?

[16:12] <discord-raku-bot> <librasteve> ^^ if what you really want is to make "" be NULL (along with other undefined such as Nil), then testing for Truthiness does that --- personally I would want to store an empty string as "" in the DB which is different from undefined, of course

[16:12] <ab5tract> For a quick and dirty script, my impulse would be to wrap split instead and return Str (or Nil if you really need that) instead of empty strings

[16:13] <ab5tract> thowe: so map the result like I did above and voila?

[16:14] <thowe> the original data is not meant to be an empty Str.  It is meant to be "no data".  And the empty Str that results is not suitable for most of the DB columns; NULL is.

[16:14] <ab5tract> I’ve only been saying that an Str should serve the same purpose as Nil as regards to the database insert.

[16:15] <ab5tract> And yet I have never said an empty string should result in a NULL

[16:16] <discord-raku-bot> <librasteve> sorry - that's my misinterpretation of the original question --- I would defer to ab5tract and smokemachine on the best answer

[16:16] <ab5tract> m: dd Str === “”; dd Str ~~ “”

[16:16] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «Bool::False␤Bool::False␤»

[16:16] <thowe> Nor am I saying that.  An intentionally inserted empty Str should be an empty string in the DB.  The problem is I have empty Str when what I want is Nil.  This data should not be empty Str in the database, it should be NULL.  Therefor I need to correct the fact that they are empty Strings.

[16:17] <SmokeMachine> I have no Pg here now... but on SQLite type objects seems to be NULL: https://www.irccloud.com/pastebin/8dGGoj2B/

[16:18] <ab5tract> m: dd split(',', "this,is,a,line,,,only").map: { $_ || Str }

[16:18] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «("this", "is", "a", "line", Str, Str, "only").Seq␤»

[16:19] <thowe> OK.  I have no opinion on that.  If you think DB::Pg has funny behavior you will have to take that up with someone else.

[16:19] <SmokeMachine> empty string is not Str type object... Str type object makes more sense to be inserted on DB than Nil to represent NULL

[16:19] *** MasterDuke left
[16:19] <ab5tract> For dealing with the kinds of frustrations that will result from trying to differentiate (‘“”,””’) from (‘,’), I think using Text::CSV is probably the best option

[16:20] <thowe> Perhaps, but my goal at the moment was education

[16:20] <SmokeMachine> Accepting Str as NULL is not a "funny behaviour", but the "correct" one...

[16:21] <thowe> SmokeMachine: as I said, I have no opinion on that.  You will have to talk to the PG::Db people.

[16:21] <thowe> er DB::Pg

[16:22] <ab5tract> thowe:from what you have written there has been no indication that you have actually tried to insert an Str type object

[16:22] <thowe> I'm just working with it.

[16:22] <thowe> According to .WHAT, the empty portions are Str

[16:22] <ab5tract> I hope you can see how this might be frustrating to the people here trying to aid you in your education?

[16:22] <SmokeMachine> Have you tried inserting Str instead of “”?

[16:23] <ab5tract> Are you just ignoring every example I have posted? Because that is also frustrating

[16:23] <thowe> m: my @line = split(',', "this,is,a,line,,,only"); @line[4].WHAT;

[16:23] <camelia> rakudo-moar dc02fbf4d: ( no output )

[16:24] <SmokeMachine> We are not saying objects of type Str (that is the case of “”), but the Str object type it self…

[16:24] <SmokeMachine> m: say Str # <- this

[16:24] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «(Str)␤»

[16:24] <thowe> well that doesn't help..  in the REPL that says (Str).  So yes.  a Str that is empty is what it is inserting.  And it is landing in the DB as an empty Str.  Which is what I would expect.

[16:25] <SmokeMachine> They are 2 different things: “” and Str…

[16:25] <SmokeMachine> m: say “”; say Str

[16:25] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «␤(Str)␤»

[16:28] <thowe> But I don't want empty strings.  I want NULL.  Inserting Nil is what works.  So I want to convert those empty strings to Nil.  I'm not sure what has you upset.  When I split it I get "".  When I look at that field with WHAT it says it is a Str.  So I appear to have an empty Str, not an undefined Str.  So what.  converting to Nil gets me the behavior I want and the DB columns the data I want in them.

[16:28] <SmokeMachine> m: multi to-db(Str:D $str) { $str }; multi to-db(Str:U $str) { “NULL” }; say to-db “”; say to-db Str; # thowe, this

[16:28] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «␤NULL␤»

[16:28] <ab5tract> m: dd Str === “”; dd Str ~~ “”; dd “” ~~ Str;

[16:28] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «Bool::False␤Bool::False␤Bool::True␤»

[16:29] <ab5tract> So just put a Nil instead? You got the answer for how to do that on your first asking it.

[16:30] <SmokeMachine> thowe: I’m not upset, I’m trying to explain to you that you are getting it wrong… you are thinking I’m saying to you to sent “” to the database, and that’s NOT what I’m saying… I’m saying to you to send Str (and not “”) to db…

[16:31] <thowe> That's what I am doing!  I was simply asking for info on the right syntax to achieve that in a couple of ways.  Others tried to make it a bigger deal than that, not me.

[16:32] <thowe> I'm not sure what the difference is between sending "" and Sending Str is.  Both appear to be what is in that data, and the result is not what I want.  I am changing to Nil and getting what I want.  So I'm not sure I much care what the esoteric difference between "" and Str that says it is "" is.

[16:33] <SmokeMachine> https://docs.raku.org/syntax/Type%20Objects

[16:33] <ab5tract> This is because it is not idiomatic to use Nil as the undefined value for a string. The bigger deal part is that multiple people have tried demonstrating in multiple ways what the distinction is.

[16:33] <SmokeMachine> That’s the point… “” is a value, Str is the type itself…

[16:34] <thowe> all I wanted to know was a good idiomatic way to convert it to Nil.  The simplest thing seems to be the map previously suggested.

[16:34] <thowe> Yeah I get that Str is an object.  And that "" is a value.  The Array elem is a Str with value of "".

[16:34] <ab5tract> m: my Str $f; dd $f; dd $f = “value”; dd $f = Nil

[16:34] <SmokeMachine> A good idiomatic way is to NOT use Nil…

[16:34] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «Str $f = Str␤Str $f = "value"␤Str $f = Str␤»

[16:35] <thowe> But Nil does what I want, and in my head, sending Nil when I want the DB column to be NULL makes perfect sense.

[16:35] <SmokeMachine> So does Str

[16:35] <thowe> OK, that isn't doing what I want...

[16:36] <thowe> I'm not going to "fix" DB::Pg, I'm going to get the behavior I want and move on...

[16:36] <SmokeMachine> Because you are sending “” instead of Str

[16:36] <thowe> I'm sending @splitline[1]

[16:36] <SmokeMachine> That’s not DB::Pg fault… if you send Str it will (probably) work!

[16:37] <thowe> if [1] has a Str with value "" the DB thinks I am inserting an empty string.

[16:37] <SmokeMachine> Try sending @splitline[1] || Str

[16:37] <SmokeMachine> I’m not saying to send Str with any value, but Str

[16:37] <thowe> How does that make more sense than @splitline[1] || Nil ?

[16:38] <thowe> when what I want in the DB is NULL.

[16:38] <SmokeMachine> Because Str is an undefined string…

[16:39] <thowe> The DB fields are all different things, Numerics, timestamps, geographic polygons...  I often want them to be NULL.  Why would I send Str?

[16:39] <SmokeMachine> Please try that and see if that works (you can change it back if you don’t like it… I’m just trying to show you that works)

[16:39] <thowe> But I don't understand why I would care?

[16:39] <SmokeMachine> So, it would be better to send Any…

[16:41] <SmokeMachine> If you don’t want to understand type objects, that’s ok… but type objects are VERY used in raku and that would help you to understand that… but if tou don’t care, I’m ok with that

[16:41] <ab5tract> @splitline[1] || Nil will break for integer values of 0, for example

[16:41] <ab5tract> you will be sending Nil instead of 0, which may not be what you want

[16:42] <thowe> OK, I won't be, but that's a good argument.

[16:43] <ab5tract> also, as I tried to demonstrate a moment ago, assigning Nil to a type-constrained container results in setting that container to the type object itself

[16:43] <ab5tract> m: dd my Str $s = Nil

[16:43] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «Str $s = Str␤»

[16:43] <SmokeMachine> m: my Int $a is default(42); my $a = 13; say $a; $a = Nil; say $a; # thowe, be careful with this

[16:43] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$a'.␤    at <tmp>:1␤    ------> my Int $a is default(42); my $a<HERE> = 13; say $a; $a = Nil; say $a; # thowe␤13␤42␤»

[16:44] <SmokeMachine> 16:43 <SmokeMachine> m: my Int $a is default(42); $a = 13; say $a; $a = Nil; say $a; # thowe, be careful with this

[16:44] <SmokeMachine> m: my Int $a is default(42); $a = 13; say $a; $a = Nil; say $a; # thowe, be careful with this

[16:44] <camelia> rakudo-moar dc02fbf4d: OUTPUT: «13␤42␤»

[16:44] <SmokeMachine> thowe: ^^

[16:45] <SmokeMachine> Nil is not NULL nor undef…

[16:50] <thowe> I didn't think it was, I just knew that inserting it in the DB resulted in a NULL column, which was what I wanted.  This is a big table with a lot of data, it will take me some time to get a test going.  Right now just testing the || Str

[16:52] <thowe> at first bluch it might work as my error moved elsewhere to some data that is malformed...

[16:52] <thowe> blush

[17:01] <ab5tract> https://gist.github.com/ab5tract/89c42a1ebd7c67a86353ce00e6dfceb6

[17:01] <ab5tract> this is probably how I would approach a quick'n'dirty "schema'd CSV parser"

[17:02] <ab5tract> *would start to approach

[17:40] *** dakkar left
