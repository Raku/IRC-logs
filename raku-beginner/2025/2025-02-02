[00:04] <ab5tract> eek! is that the latest available from your package manager?

[00:05] <msiism> That's right.

[00:06] <msiism> I think it's not unreasonable to hope for a new release of the OS in late 2025. So, I'll be on a more recent version in a bit.

[00:07] <msiism> I'll probably be tempted to use a later version before that, though.

[00:11] <ab5tract> There's definitly been a fair amount evolution since December 2022, especially in terms of fixing small details

[00:12] <msiism> Yeah, I like what I'm seeing with `div` there.

[00:19] <ab5tract> If you have access to a compiler, https://rakubrew.org/ is a great way to stay up to date

[00:19] <ab5tract> what am I saying? you don't even need a compiler, it can download binaries for you

[00:20] <msiism> Yeah, I've already had a look at it briefly.

[00:27] <ab5tract> Anyway, none of that is as important as keeping it `-Ofun` 

[00:32] <msiism> The positional data types chapter of the Raku Course did have some pretty cool exercises.

[00:32] *** msiism left
[01:39] *** lizmat_ joined
[01:41] *** lizmat left
[08:25] <discord-raku-bot> <librasteve> I recommend rakubrew also … @msiim what platform are you on / how did you install raku?

[10:39] *** lizmat_ left
[10:39] *** lizmat joined
[12:42] *** msiism joined
[12:42] <msiism> What, exactly, does it mean that hashes are not ordered in Raku?

[12:53] <lizmat> that you cannot depend on the order of the keys in a hash from one run to the next run

[12:53] <discord-raku-bot> <nahita3882> when you iterate over a Hash, the key-value pairs it yields to you are not guaranteed to be in any particular order

[12:53] <lizmat> except if there are no keys of 1 key in the hash  :-)

[12:53] <lizmat> *or

[12:53] <msiism> Okay, thanks.

[12:54] <discord-raku-bot> <nahita3882> but that's okay because you are not "buying" this data structure for an ordered access; you are buying it as a fast lookup technology

[12:54] <discord-raku-bot> <nahita3882> one sometimes wants the insertion-order to be preserved, though (I for one do)

[12:54] <discord-raku-bot> <nahita3882> so if I have %(a => 1, b => 2), it would be nice if it gave me "a => 1" first then "b => 2", always

[12:55] <discord-raku-bot> <nahita3882> there is a third party module Hash::Ordered that does this

[12:55] <discord-raku-bot> <nahita3882> Python since 3.7 also enforces insertion-order preservation on the dictionaries on a language level, for example (which, again, I miss sometimes in Raku)

[12:59] <msiism> I see.

[13:40] <discord-raku-bot> <antononcube> Wolfram Language / Mathematica from the initial introduction of associations (i.e. hashes) in 2014 (version 10) supports preserving order in associations.

[13:42] <discord-raku-bot> <antononcube> I understand the arguments for "not ordered hashes" in Raku, but I think there should be some sort of "global option" to have hashes "ordered" or "un-ordered".

[13:45] <discord-raku-bot> <antononcube> @lizmat It is still in my TODO list to experiment / reproduce issues (or non-issues) in https://github.com/lizmat/Hash-Sorted/issues/1#issuecomment-2580676450

[13:45] <discord-raku-bot> <antononcube> Sorry for the delay...

[13:45] <lizmat> no worries...  go plenty on my plate :-)

[13:45] <lizmat> *got

[13:50] <discord-raku-bot> <antononcube> Me too. And I got too distracted with Number theory, in general and in Raku. (Honestly, I should have known better...)

[13:53] <lizmat> antononcube if you make an issue for it, then it won't fall through the cracks

[13:53] <lizmat> I mean, the Hash / ordered / sorted issue

[13:58] <discord-raku-bot> <antononcube> Hmm... I was planning to just make noise about it and commit into any other form of contribution. But, ok -- where that kind of issue should be filed? (Sorry to be ignorant.) Problem solving?

[14:00] <lizmat> probably, but a Rakudo issue would be ok as well

[14:03] <discord-raku-bot> <antononcube> How about "universal" random seed. (I.e. using the same random seed gives the same random things in different Raku sessions.) Should it be filed there too?

[14:04] <discord-raku-bot> <antononcube> BTW, my current language design for those is kind of the same:  use MAP_SEE_ORDER; use RAND_SEE_GLOBAL_SEED; 

[14:05] <discord-raku-bot> <antononcube> (Inspired from "MONKEY-SEE-NO-EVAL")

[14:05] <lizmat> I'd say, let's keep those issues separate

[14:06] <discord-raku-bot> <antononcube> Of course, separate! I was just giving an example using both...

[14:09] <discord-raku-bot> <antononcube> BTW, I can "live" with the unordered hashes. For math computations, though, having reproducible random items sequences across sessions is really good. (Again, I can live with that issue, and there are packages for random numbers that can be used, etc.)

[14:12] <discord-raku-bot> <antononcube> As for un-sorted hashes -- I was trying, and failed, to find the StackExchange or Reddit discussion on why it is a good idea to have unsorted hashes from security perspective. I found this blog post which provides and view on this: https://lemire.me/blog/2011/08/29/why-cant-hash-tables-preserve-the-order-of-keys/

[17:06] <msiism> When using `for keys(%hash) -> $key {…}`, is it considered bad practice not to check whether `%hash` has any elements at all in advance?

[17:06] <msiism> `for` will just return `Nil` in that case.

[17:21] <lizmat> msiism: depends how much you want to optimize for speed relative to readability

[17:25] <msiism> And which way of doing it would improve which of the two?

[17:34] <lizmat> well, depends on your expected workload

[17:34] <lizmat> if you often have empty hashes, then it probably makes sense to an additional if

[17:35] <lizmat> if most of the time there are keys in the hashes, then the extra if may well be too much overhead

[17:35] <lizmat> if you don't know, i'd generally wouldn't bother with an extra if

[17:36] <msiism> Okay, thanks.

[19:54] <lizmat> antononcube https://github.com/rakudo/rakudo/pull/5779

[19:59] *** msiism left
[20:20] <discord-raku-bot> <nahita3882> wow

[21:08] *** librasteve_ joined
[21:09] <librasteve_> https://www.irccloud.com/pastebin/0JkVdqa8

[21:13] <discord-raku-bot> <librasteve> fwiw I quite like the semantic separation between Arrays and Hashes and imho Python and Mathematica have got it wrong to make ordered be the standard / default (I have no beef with Ordered::Hash (or maybe even ArrayHash as an Allomorph)

[21:14] <discord-raku-bot> <librasteve> )

[21:21] <discord-raku-bot> <antononcube> Well, Python gets things wrong often.

[21:21] <discord-raku-bot> <antononcube> Wolfram Language  (WL)  -- aka Mathematica -- does not have wrong designs.

[21:22] <discord-raku-bot> <antononcube> Associations in WL have to be considered in the larger context of set of functions for manipulating them and the computational workflows with associations. See functions like Sort, KeySort, Map, KeyMap. etc. Taking those into account makes preserving order in associations a "must have."

[21:29] <discord-raku-bot> <librasteve> btw I support the idea of SEED pragma for repeatable generation of order for test reproducibility

[21:35] <discord-raku-bot> <librasteve> i prefer the Raku pure Hash from an ordered one since it makes me reason more deeply about my code design (but I acknowledge that Ordered::Hash is also useful)

[21:35] <discord-raku-bot> <librasteve> &afk

