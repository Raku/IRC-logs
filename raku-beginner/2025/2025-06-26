[05:01] *** soverysour joined
[05:35] *** soverysour left
[05:38] *** soverysour joined
[06:05] *** soverysour left
[07:00] *** ACfromTX left
[09:22] <disbot3> <oshaboy> is there any reason I cant do sub MAIN(Uni $str)?

[09:23] <disbot3> <oshaboy> I want to take input without normalization

[09:25] <disbot3> <librasteve> lemme try

[09:34] *** soverysour joined
[09:40] <disbot3> <librasteve> @oshaboy my initial reply is that this is not implemented OOTB (I am not an expert,  so others are welcome to correct me) ... the reason being that there is no way to write Uni.new('abc'.codes); as you enter the arg on the command line (since that is not a raku program, but a list of unix args)

[09:41] <disbot3> <oshaboy> So basically I made these tiles in Python and I now have a folder with 155k of these

[09:41] <disbot3> <oshaboy> https://cdn.discordapp.com/attachments/768511641758466088/1387729562124681267/D0000064.png?ex=685e675e&is=685d15de&hm=c8c57318123196c33e63ebd9f4e1b0cda15bf3de7b8d54775610e233ac6c7a1b&

[09:42] <disbot3> <librasteve> the natural way to iimplement this would be to go sub MAIN(Uni(Str) $str)  - note the coercion ... but to get there you will need to make a custom coercer and mix it into the Uni class

[09:42] *** soverysour left
[09:42] <disbot3> <oshaboy> so I tried writing a raku program to take a string as argument and copy the tiles needed to form them from one folder to the other

[09:42] <disbot3> <oshaboy> so it will be easier to sort through

[09:42] <disbot3> <oshaboy> the problem is I need the string to be unnormalized

[09:43] <disbot3> <oshaboy> but that would NFC it, right?

[09:46] <disbot3> <librasteve> ah - yes, I guess that would normalize (via the usual Str arg consumption) and then denormalize it ...

[09:47] <lizmat> perhap: sub MAIN(NFD() $a)   ?

[09:48] <disbot3> <librasteve> lizmat: you're a genius

[09:50] <disbot3> <oshaboy> https://cdn.discordapp.com/attachments/768511641758466088/1387731794815746058/image.png?ex=685e6972&is=685d17f2&hm=f1977ec47db5fb463482a37ac8377acf7e756e79942adc40cda6fbb968c38803&

[09:50] <disbot3> <oshaboy> normalization is a lossy process

[09:51] <disbot3> <oshaboy> Ok but I want it to distinguish \u00E9 from \u0065\u0301

[09:52] <lizmat> then I'm afraid you can't do that with entering codes at the command line, as they all get normalized before reaching MAIN logic

[09:57] <disbot3> <oshaboy> Ok turns out arguments to main are in UTF8C8

[09:57] * lizmat doublechecked: command line processing at that level lives deep in NQP land, in HLL::Compiler

[11:18] <disbot3> <oshaboy>  sub utf8_len(uint8 $a){     given $a {         when 0..0x80 {             return 1;         }         when 0x80..0xc0 {             return 0;         }         when 0xc0..0xe0 {             return 2;         }         when 0xe0..0xf0 {             return 3;         }         when 0xf0..0xf5 {             return 4;         }         default {             return 0;         }     } } sub to_uni(utf8 $blob){     my

[11:18] <disbot3> $codes=[];     my $buf=$blob.Buf;     while ($buf.elems > 0) {         my $len=utf8_len($buf[0]);         if ($len == 0) {             return ();         }         my $codepoint=Blob[uint8].new($buf.head($len));         $codes.append($codepoint.decode('utf8').ords[0]);         $buf=$buf.splice($len, $buf.elems);     }     return Uni.new($codes.List);      } 

[11:18] <disbot3> <oshaboy> I just implemented it myself

[11:22] <disbot3> <oshaboy> There should be an easier way to convert utf8 to a Uni without normalization but IDK

[11:27] <lizmat> oshaboy putting code in a gist makes it easier for people to look at

[11:28] <disbot3> <oshaboy> I know but I also don't really care

[11:28] <disbot3> <oshaboy> I just hacked it together until it works

[11:29] *** soverysour joined
[11:29] *** soverysour left
[11:29] *** soverysour joined
[11:32] <lizmat> ok, so you're not interested in a review of your code ?

[11:50] <disbot3> <oshaboy> nah

[11:54] *** lizmat left
[11:55] *** lizmat_ left
[11:55] *** lizmat joined
[12:20] *** soverysour left
[12:37] *** soverysour joined
[12:37] *** soverysour left
[12:37] *** soverysour joined
[14:28] *** soverysour left
[14:42] *** soverysour joined
[16:04] *** stanrifkin joined
[16:12] *** soverysour left
[16:21] *** stanrifkin left
[16:22] *** soverysour joined
[16:27] *** soverysour left
[19:05] <disbot3> <apogee> How do you pass a callback to a function and then invoke it in the function?

[19:14] <lizmat> m: sub a() { say "hi" };  sub b(&code) { code() }; b(&a)

[19:14] <camelia> rakudo-moar dd636945c: OUTPUT: ¬´hi‚ê§¬ª

[19:14] <lizmat> apogee ^^

[19:21] <disbot3> <apogee> m: sub b (&code) { code("world") }; sub a ($val) { say "hello, $val" }; b(&a)

[19:21] <disbot3> <Raku eval>  hello, world 

[19:21] <disbot3> <apogee> Interesting

[19:23] <disbot3> <apogee> I have  pl sub dubz ($v) { Monad::Maybe.new(value => $v * 2) } ... my $bound = $some.bind(&dubz);   pl method bind(&f --> Monad) {     return self if (!defined $.value);          my $result = f($.value);     die "bind must return a Monad" unless $result ~~ Monad;     return $result; }  And $result is True.  I would expect it to be a Monad?

[19:25] <timo> tangentially, do you know "without"?

[19:25] <timo> `return self without $.value` is a bit nicer to read than `return self if (!defined $.value)` IMO

[19:25] <disbot3> <apogee> TIL

[19:25] <disbot3> <apogee> Yes much more readable

[19:26] <timo> from just the code you pasted it looks like it shouldn't be True, but there may be something in the parts not shown?

[19:26] <disbot3> <apogee> Uh, changing that made my test pass wut

[19:26] <disbot3> <apogee> lol

[19:27] <disbot3> <apogee> pl unit class Monad;  method unit($value) {     self.^name.new(value => $value) }  method bind($f) {     die "bind() must be implemented by subclass" }  method map($f --> Monad) {     self.bind(-> $v { self.unit($f($v)) }) }  method Str {     self.gist }  sub infix:<\>\>=> ($m, $f --> Monad) is export {     $m.bind($f) }   pl use Monad; unit class Monad::Maybe is Monad;  has $.value;  method bind(&f --> Monad) {    

[19:27] <disbot3> return self without $.value;      my $result = f($.value);     die "bind must return a Monad" unless $result ~~ Monad;     return $result; }  method gist {      defined $.value ?? "Some($.value)" !! "None"; } 

[19:28] <disbot3> <apogee> I need to add Some and None properly but uh very confused now üòÑ

[19:28] <lizmat> apogee: that might look good on Discord, but here on IRC it's close to unreadable  :-(

[19:29] <lizmat> apogee   self.^name.new   huh?   don't you mean    self.new  ?

[19:30] <disbot3> <apogee> Oh yeah I originally made that a role

[19:30] *** soverysour joined
[19:30] <lizmat> roles autopun

[19:33] <disbot3> <tpaul64_18694> https://godbolt.org/z/aTo4jrfYq seems to work with if (!defined $.value) but also with without $.value here

[19:43] *** soverysour left
[20:25] *** soverysour joined
[20:25] *** soverysour left
[20:25] *** soverysour joined
[21:08] *** librasteve_ left
[21:11] *** soverysour left
[21:18] <disbot3> <apogee> Yeah it was because I didnt have the block around !defined $value I think. I'm still thinking in perl. üòÑ

[21:20] <disbot3> <apogee> Or I did, idk it works now üôÉ

[21:47] <disbot3> <apogee> OK now I'm very stumped  https://paste2.org/WEXjss1W  Tests hang forever

[21:53] <disbot3> <apogee> Any idea lizmet? üòÑ

[21:53] <disbot3> <apogee> lizmat*

[21:54] <disbot3> <apogee> It's calling that function infinitely...

[21:58] <disbot3> <apogee> I had a method with the same name as an attribute and it was calling it infinitely lol.

[21:58] <disbot3> <apogee> Used . instead of !

[22:11] <SmokeMachine> apogee: usually something like `self.new(value => $value);` I prefer to write like: `self.new: :$value;` but that‚Äôs personal taste‚Ä¶

[22:43] <disbot3> <apogee> Just pushed a few Monads to zef.

[22:44] <disbot3> <apogee> https://github.com/m-doughty/Raku-Monad Reviews & PRs welcome.

[22:49] <lizmat> there's also: https://raku.land/zef:rawleyfowler/Monad-Result   does that overlap?

[22:54] *** Guest45 joined
[22:57] *** Guest45 left
[22:59] <disbot3> <apogee> It implements a variant of one of the Monads I implemented, yeah. Either and Result kinda do the same thing.

[22:59] <disbot3> <apogee> Either is Haskell, Result is OCaml.

