[03:14] *** stanrifkin_ joined
[03:16] *** stanrifkin left
[05:59] <disbot1> <simon_sibl> I think I get it with this sentence

[05:59] <disbot1> <simon_sibl> quite nice

[06:05] *** stanrifkin_ left
[07:11] *** DarthGandalf left
[07:18] *** DarthGandalf joined
[07:45] *** DarthGandalf left
[07:47] *** DarthGandalf joined
[08:29] *** ACfromTX left
[08:41] *** ACfromTX joined
[09:36] <disbot1> <simon_sibl> I am not sure to understand token, it says it ignores whitespace, but it does not

[09:37] <disbot1> <simon_sibl> token comment { [ ';' || '#' ] \N* } I try to match a line     ; some comment

[09:37] <disbot1> <simon_sibl> but it doesnt match, I need to add \s* in the beginning

[09:58] <disbot1> <simon_sibl> if I add ^^ at the beginning of the TOP rule it works as well

[11:00] <disbot1> <jubilatious1_98524> I think the token rule is that it ignores whitespace within the regex, not within the text you're trying to match? See: https://docs.raku.org/language/faq#What's_the_difference_between_token_and_rule_%3F

[11:03] <disbot1> <jubilatious1_98524> Rules and tokens differ primarily on :sigspace, see: https://docs.raku.org/syntax/%3Asigspace

[11:06] <disbot1> <simon_sibl> https://glot.io/snippets/hbh0ilob1v

[11:06] <disbot1> <simon_sibl> so I have two questions here

[11:07] <disbot1> <simon_sibl> 1. why I need to add ^^ for the Grammar to work

[11:07] <disbot1> <simon_sibl> 2. why I need to add is rw otherwise the method section doesnt work as it should

[11:07] <disbot1> <simon_sibl> (the update actually, it keeps @.kv between different section like it that was a reference instead of copy

[11:08] <disbot1> <jubilatious1_98524> See examples on :sigspace page: "Where whitespace in a regex turns into <.ws> depends on what comes before the whitespace. In the above example, whitespace in the beginning of a regex doesn't turn into <.ws>, but whitespace after characters does."

[11:13] <disbot1> <jubilatious1_98524> Actually, your example would be a great addition to that sigspace Docs page!

[11:18] <disbot1> <jubilatious1_98524> Does this work instead? rule kvpair { $<key> = \w+  [ \=  ]   $<value> = \N* \N*

[11:20] <disbot1> <jubilatious1_98524> Not sure I understand your is rw issue, hopefully others will chime in?

[11:33] <disbot1> <librasteve> each docs page has a pencil icon to link back to the GH repo - please do go there and propose any improvements...

[17:16] *** stanrifkin joined
[18:46] *** librasteve_ left
[19:20] *** habere-et-disper joined
[19:21] <habere-et-disper> Is "<same>" a thing/documented? Or did I just use something that autovivified?

[19:39] <habere-et-disper> For example:

[19:39] <habere-et-disper> m: 'abcbccaab'.comb( / <alpha>+ % <same> / ).say

[19:39] <camelia> rakudo-moar 47746a84e: OUTPUT: «(a b c b cc aa b)␤»

[20:21] <habere-et-disper> What's the difference (if any) between "adverb-rx-g" and "named-g" in EN.l10n

[20:21] <habere-et-disper> https://github.com/Raku-L10N/EN/blob/main/EN.l10n

[21:29] *** habere-et-disper left
[21:50] *** disbot2 joined
[21:50] *** disbot1 left
[22:12] <lizmat> adverb-rx-g  is the g  in  rx:g/ foo /

[22:13] <lizmat> named-g  is the g in    .subst( ..., :g )

