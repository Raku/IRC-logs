[00:24] *** arkiuat left
[00:36] *** arkiuat joined
[00:40] *** arkiuat left
[01:02] *** arkiuat joined
[04:00] *** librasteve_ left
[05:53] *** arkiuat left
[06:05] *** arkiuat joined
[06:10] *** arkiuat left
[06:21] *** arkiuat joined
[06:28] <disbot8> <simon_sibl> when doing a UDP Async server, with the Supply I only get the message but no the Address, is there a way I could get it ?

[06:33] <disbot8> <simon_sibl> okay, have to add :datagram in the .Supply

[08:47] *** arkiuat left
[09:00] *** arkiuat joined
[09:05] *** arkiuat left
[09:50] *** arkiuat joined
[09:56] *** arkiuat left
[10:25] *** arkiuat joined
[10:33] *** arkiuat left
[10:47] *** arkiuat joined
[10:52] *** arkiuat left
[11:04] *** arkiuat joined
[11:07] <tbrowder>  m: my $d = DateTime.now

[11:07] <camelia> rakudo-moar d370e0513: ( no output )

[11:08] <tbrowder> m: my $d = DateTime.now; say $d

[11:08] <camelia> rakudo-moar d370e0513: OUTPUT: «2025-08-29T13:08:40.324734+02:00␤»

[11:09] *** arkiuat left
[11:09] <tbrowder> m: my $d = Date.new(DateTime.now); say $d

[11:09] <camelia> rakudo-moar d370e0513: OUTPUT: «2025-08-29␤»

[11:11] <tbrowder> oh 'twould be nice to do: my $d = Date.now;

[11:20] *** arkiuat joined
[11:25] *** arkiuat left
[11:26] <disbot8> <simon_sibl> How can I do if I need to process the Supply.lines sequentially ? (Using TCp) but still handle multiple clients

[11:46] *** arkiuat joined
[11:55] *** arkiuat left
[12:20] *** arkiuat joined
[12:24] *** arkiuat left
[12:48] *** arkiuat joined
[12:52] *** arkiuat left
[13:21] *** arkiuat joined
[13:26] *** arkiuat left
[13:48] *** arkiuat joined
[13:53] *** arkiuat left
[14:23] *** arkiuat joined
[14:27] *** arkiuat left
[14:28] <lucs> Given  my @a = <a b c d> , is there a nicer way than looping to have  baz(@a, 'c')  return 2?

[14:34] <lucs> Um, I think I asked something similar the other day, my memory could be better

[14:34] <lucs> Right: @a.first('c', :k)

[14:35] <lucs> m: my @a = <a b c d>; say @a.first('c', :k)

[14:35] <camelia> rakudo-moar d370e0513: OUTPUT: «2␤»

[14:49] *** arkiuat joined
[14:52] <disbot8> <antononcube> 👍

[14:54] *** arkiuat left
[15:04] <disbot8> <antononcube> @lucs You can also use: @a.grep('c', :k) .

[15:05] <lucs> Cool:

[15:05] <lucs> m:  my @a = <a b c d c e>; say @a.grep: 'c', :k

[15:05] <camelia> rakudo-moar d370e0513: OUTPUT: «(2 4)␤»

[15:06] <disbot8> <antononcube> 👍

[15:24] *** arkiuat joined
[15:29] *** arkiuat left
[15:48] *** human-blip left
[15:49] *** arkiuat joined
[15:50] *** human-blip joined
[15:54] *** arkiuat left
[16:16] *** arkiuat joined
[16:21] *** arkiuat left
[16:35] *** arkiuat joined
[16:39] *** arkiuat left
[16:53] *** arkiuat joined
[17:19] *** arkiuat left
[17:31] *** arkiuat joined
[17:35] *** arkiuat left
[18:00] *** arkiuat joined
[18:04] *** arkiuat left
[18:04] *** habere-et-disper joined
[18:05] <habere-et-disper> How do you remember the result difference between `[Z]` and `zip` ?

[18:06] <habere-et-disper> Apparently we should choose `[Z]` when you want grouped tuples and `zip` when you want a flat, interleaved result, but the documentation doesn't weigh in on it.

[18:33] *** arkiuat joined
[18:38] *** arkiuat left
[19:00] *** arkiuat joined
[19:08] *** habere-et-disper left
[19:14] <arkiuat> habere-et-disper, for me, [Z] is the transposititon operator for 2D arrays, and zip is not

[19:14] *** stanrifkin joined
[19:16] <arkiuat> m: say [Z] [[1, 2], [3, 4], [5, 6]]

[19:16] <camelia> rakudo-moar d370e0513: OUTPUT: «((1 3 5) (2 4 6))␤»

[19:16] <arkiuat> m: say zip [[1, 2], [3, 4], [5, 6]]

[19:16] <camelia> rakudo-moar d370e0513: OUTPUT: «(([1 2] [3 4] [5 6]))␤»

[19:21] <arkiuat> also, I don't see the flattening difference you're talking about

[19:21] <arkiuat> m: say zip <a b c>, (1, 2, 3); say [Z] <a b c>, (1, 2, 3)

[19:21] <camelia> rakudo-moar d370e0513: OUTPUT: «((a 1) (b 2) (c 3))␤((a 1) (b 2) (c 3))␤»

[21:45] *** arkiuat left
[21:52] *** stanrifkin left
[21:53] *** stanrifkin joined
[21:58] *** arkiuat joined
[22:00] <disbot8> <librasteve> habere-et-disper: would you mind making a PR on the relevant docs?

[22:02] *** arkiuat left
[22:30] *** arkiuat joined
[22:35] *** arkiuat left
[22:52] *** arkiuat joined
