[00:31] *** hudo__ left
[00:31] *** hudo left
[00:32] *** hudo joined
[00:32] *** hudo__ joined
[00:32] *** hudo__ left
[00:32] *** hudo left
[00:32] *** hudo joined
[00:32] *** hudo__ joined
[00:33] *** hudo__ left
[00:33] *** hudo left
[00:45] *** human-blip left
[00:47] *** human-blip joined
[07:06] *** human-blip left
[07:08] *** human-blip joined
[07:26] *** human-blip left
[07:28] *** human-blip joined
[07:33] *** human-blip left
[07:35] *** human-blip joined
[09:08] *** dakkar joined
[11:01] *** dakkar left
[11:02] *** dakkar joined
[14:14] *** dakkar left
[14:26] *** human-blip left
[14:28] *** human-blip joined
[19:34] *** habere-et-disper joined
[19:41] <habere-et-disper> Is it intended behaviour that I can write `my @foo = [1,2].push(3,4).skip` but not `my @foo = [1,2].skip.push(3,4)` ?

[19:46] <ab5tract> it's intended inasmuch as .skip returns a Seq

[19:48] <ab5tract> m: dd [[1,2].skip].push(3,4); dd [1,2].skip.Array.push(3,4)

[19:48] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «[2, 3, 4]␤[2, 3, 4]␤»

[19:49] <ab5tract> habere-et-disper: I wouldn't say it is intentional as much as it is a side effect of the decision to return a Seq from .skip

[19:50] <habere-et-disper> Is there a way to work with a Seq instead and add items to it ?

[19:51] <habere-et-disper> And what is the way to `pop` multiple items from an array like `unshift` can add ?

[19:53] <ab5tract> Regarding `pop`, I believe there were some discussions around that recently. I'll see if I can find what came of that

[19:53] <ab5tract> My opinion is that it's not necessary to add a .pop(Int $elems) candidate when .pop xx $elems exists

[19:54] <ab5tract> But that doesn't mean it wasn't added :)

[19:55] <ab5tract> You can definitely work with `Seq` and combine them, but they are immutable, so you can combine them into a new `Seq` but you can't append one to another

[19:57] <habere-et-disper> How does `.pop xx $elems` work ? I'm trying to take the last two elements with:

[19:57] <habere-et-disper> m: say [1,2,3,4].pop xx 2

[19:57] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «(4 4)␤»

[19:58] <ab5tract> huh, that's unexpected :(

[19:59] <ab5tract> regarding playing with seqs: 

[19:59] <ab5tract> m: my $s1 = [1,2,3].skip; my $s2 = [3,4,5,6].skip; dd (|$s1, |$s2).Seq

[19:59] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «(2, 3, 4, 5, 6).Seq␤»

[19:59] <habere-et-disper> Seems it's just doing:

[19:59] <habere-et-disper> m: say ( [1,2,3,4].pop ) xx 2

[19:59] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «(4 4)␤»

[20:00] <ab5tract> m: my @foo = [1,2,3]; dd @foo.pop xx 2

[20:00] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «(3, 2).Seq␤»

[20:00] <ab5tract> m: my @foo = [1,2,3]; say @foo.pop xx 2

[20:00] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «(3 2)␤»

[20:00] <ab5tract> Looks like it needs to be in a container

[20:01] <ab5tract> m: my ($a, $b) = [1,2].pop xx 2; dd :$a, :$b

[20:01] <camelia> rakudo-moar b7f47a2a6: OUTPUT: «:a(2)␤:b(2)␤»

[20:01] <ab5tract> yeah, it looks like it

[20:03] <habere-et-disper> Okay -- container magic. Thanks @ab5tract

[20:04] <ab5tract> It kind of makes sense that an in situ array is immutable in this regard

[20:06] <ab5tract> So I would say it is less container magic (which certainly is a thing sometimes) and more about the impossibility of keeping track of modifications to a structure that is not  stored in a variable

[20:12] <habere-et-disper> That's helpful thanks. I see `.shift xx $elems` works too so that approach is consistent unlike `push/pop($elems)`.

[20:22] <ab5tract> habere-et-disper: here's the discussion around `pop($elems)` https://github.com/Raku/problem-solving/issues/436

[20:22] <habere-et-disper> =b

[20:22] <ab5tract> imo it is way more trouble than its worth, but please chime in there if you feel strongly about it

[20:54] <discord-raku-bot> <librasteve> done

[20:54] <discord-raku-bot> <librasteve> (not so strong though)

[20:57] <ab5tract> habere-et-disper: a small example of playing around with Seqs https://gist.github.com/ab5tract/9979a3b229332ec4f87f44950d76d0d1

[20:59] <habere-et-disper> @ab5tract++

[21:11] *** habere-et-disper left
[21:40] *** librasteve_ joined
[21:40] <librasteve_> https://www.irccloud.com/pastebin/UTXBcmJr

[21:44] <ab5tract> librasteve_++

[21:45] <discord-raku-bot> <librasteve> there's probably a whole essay on why raku is built on Seqs ... i like that you can dive in to the iterator if you want, but that most of the effects don't need that

[21:46] <ab5tract> I'll never understand why you switch back to Discord :P

[21:48] <ab5tract> For the purposes of demonstration, I thought it made sense to dive in a bit.

[21:48] <discord-raku-bot> <librasteve> (i) other servers, (ii) it's where the cool folks are (sic), (iii) I can see history - really (iii) whenever I log off (MacOS) I have to restart IRCCloud and rejoin servers or look a tthe logs

[21:48] <ab5tract> But indeed, many operations will preserve or produce Seqs

[21:49] <ab5tract> IRCCloud preserves history and servers for me but ymmv

[21:51] <discord-raku-bot> <librasteve> yeah - I like that you can easily reach for the iterator if you need it

[21:52] <discord-raku-bot> <librasteve> and I think that either your language is lazy (ie iterator oriented) or not from the get go - but you cant build it in later (I guess this was taken from Lisp)

[21:53] <ab5tract> Hmm... I recall a lot iterator stuff being installed by lizmat fairly late in the game

[21:54] <ab5tract> But that might be orthogonal to your point, because obviously the framework for laziness was already there

[21:54] <discord-raku-bot> <librasteve> although I endorse beginners to use Arrays and Hashes first since they are sweeter and more familiar to the (eg) Python JS folks

[21:54] <discord-raku-bot> <librasteve> oh - well not all assumptions are good

[21:55] <discord-raku-bot> <librasteve> ;-)

[23:07] *** RakuIRCLogger left
[23:44] *** lizmat_ left
[23:44] *** lizmat joined
