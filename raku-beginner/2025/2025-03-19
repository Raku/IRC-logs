[01:47] *** camelia left
[01:48] *** camelia joined
[02:25] *** human_blip left
[02:27] *** human_blip joined
[09:15] *** dakkar joined
[10:48] *** [Coke] left
[12:46] *** [Coke] joined
[13:39] *** habere-et-disper joined
[13:42] <habere-et-disper> I expected an equivalence between (^Inf) and (^*) -- am I missing something ?

[13:42] <habere-et-disper> For example: (^Inf).map( * ** 3 ) could be (^*).map( * ** 3)

[13:51] *** habere-et-disper left
[13:53] *** tbrowder left
[13:54] *** tbrowder joined
[13:55] <[Coke]> Don't think so - some operators might treat them the same, but it's not a universal.

[13:55] <[Coke]> https://docs.raku.org/language/operators#prefix_^

[13:55] <[Coke]> m: *.Numeric.say

[13:55] <camelia> rakudo-moar 57fcb1f1b: ( no output )

[13:55] <[Coke]> m: say *.Numeric;

[13:55] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «WhateverCode.new␤»

[13:55] <[Coke]> m say Inf.Numeric;

[13:55] <[Coke]> m: say Inf.Numeric;

[13:55] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «Inf␤»

[15:14] *** swaggboi left
[15:40] *** swaggboi joined
[16:40] <discord-raku-bot> <nahita3882> it's not in line with ^$val being 0..^$val though, as 0..^* interprets the star as making the end point Inf

[16:40] <discord-raku-bot> <nahita3882> m: say ^12, 0..^12, ^*, 0..^*

[16:40] <discord-raku-bot> <Raku eval>  ^12^12WhateverCode.new0..^Inf 

[16:41] <discord-raku-bot> <nahita3882> m: dd ^12, 0..^12, ^*, 0..^*

[16:41] <discord-raku-bot> <Raku eval>  ^12 ^12 WhateverCode.new 0..^Inf 

[16:54] <[Coke]> Yup. I don't know if there's a reason for that inconsistency. Might be worth opening a problem solving ticket.

[16:54] <[Coke]> Seems like an easy change to make if it doesn't break anything.

[17:09] <lizmat> m: dd ^*

[17:09] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «WhateverCode.new␤»

[17:10] <lizmat> m: .say for (^*)(10)

[17:10] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[17:10] <lizmat> so I think that's going to be a no-starter as it's valid syntax atm

[17:11] <lizmat> it may be a bit of a WAT

[17:35] <[Coke]> m: .say for (^Inf)(10)

[17:35] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Range'␤  in block <unit> at <tmp> line 1␤␤»

[17:36] <[Coke]> m: .say for (^Inf)[10]

[17:36] <camelia> rakudo-moar 57fcb1f1b: OUTPUT: «10␤»

[17:36] <[Coke]> ok.

[17:37] <discord-raku-bot> <librasteve> m: say (^*)[10];

[17:37] <discord-raku-bot> <Raku eval>  WhateverCode.new 

[17:38] <discord-raku-bot> <librasteve> m: say (0..^*)[10]

[17:38] <discord-raku-bot> <Raku eval>  10 

[17:39] <discord-raku-bot> <librasteve> can that be what was intended?

[17:41] <lizmat> ^* currently codegens to -> $_ { ^$_ }

[17:43] *** stanrifkin joined
[17:46] *** dakkar left
[17:48] <discord-raku-bot> <librasteve> and presumably, +* codegens to > $ { +$ } ie coerce to Numeric

[17:50] <discord-raku-bot> <librasteve> and ^ is the upto operator so that  ^* should return the Range 0..^* except it returns WhateverCode.new

[17:53] <discord-raku-bot> <librasteve> m: say +*;

[17:53] <discord-raku-bot> <Raku eval>  WhateverCode.new 

[17:53] <discord-raku-bot> <librasteve> m: say (+*)(<2>).WHAT;

[17:53] <discord-raku-bot> <Raku eval>  (Int) 

[17:55] <discord-raku-bot> <librasteve> so the general case makes sense and even works when ^* is the second arg to the range operator like 0..^*, but raku forgets to special case when ^* is used standalone since there is no value coming to prime it

[18:07] <discord-raku-bot> <librasteve> i got this general raku comment on my harc stack intro post over at /r/htmx Can I set a config so that it doesn’t let me get away with not typing things? ... I am reluctant to just say "no", but I don't know of any use super-strict; pragma that would require explicit types to be set everywhere

[18:13] *** habere-et-disper joined
[18:29] *** habere-et-disper left
[18:53] <[Coke]> You can self enforce, but there's no pragma to say, e.g. all user-space routines and variables must be typed.

[18:54] <discord-raku-bot> <librasteve> ah - I thought not but wanted to check - maybe a rakuAST linter could do this in the future...

[18:54] <discord-raku-bot> <librasteve> tx

[18:54] <[Coke]> ... wonder if that could live in module space.

[19:39] *** habere-et-disper joined
[19:46] <habere-et-disper> How did @lizmat discover what (^*) codegens to as neither `dd` nor `raku` introspect fully?

[19:48] <[Coke]> she's a core dev.

[19:48] <[Coke]> probably looked at the source.

[19:58] <[Coke]> librasteve - yes, probably easier in AST.

[20:00] *** habere-et-disper left
[20:14] <[Coke]> I don't remember happening to see Device::Velleman::K8055 before

[20:14] <[Coke]> ww.

[20:36] *** stanrifkin_ joined
[20:38] *** stanrifkin left
[21:01] *** habere-et-disper joined
[21:08] *** habere-et-disper left
[21:22] *** notna joined
[21:37] *** notna left
