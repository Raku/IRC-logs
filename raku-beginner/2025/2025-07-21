[05:28] <disbot3> <jubilatious1_98524> @lizmat Maybe --> double-dash arrow inside the signature?   À la  sub perforate($string --> Str) {

[09:18] <lizmat> yes

[09:18] <lizmat> because the return constraint is part of the signature

[09:19] <lizmat> and can be applied to blocks as well

[09:19] <lizmat> m: --> Str:D { 42 }()

[09:19] <camelia> rakudo-moar 65cda29b9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Prefix -- requires an argument, but no valid term found.␤Did you mean -- to be an opening bracket for a declarator block?␤at <tmp>:1␤------> --<HERE>> Str:D { 42 }()␤    expecting any of:␤        pr…»

[09:19] <lizmat> m: (--> Str:D { 42 })()

[09:19] <camelia> rakudo-moar 65cda29b9: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Prefix -- requires an argument, but no valid term found.␤Did you mean -- to be an opening bracket for a declarator block?␤at <tmp>:1␤------> (--<HERE>> Str:D { 42 })()␤    expecting any of:␤        …»

[09:19] <lizmat> hmmm

[09:20] <lizmat> ah yes in that case you also need -> to make the grammar parse the signature

[09:20] <lizmat> m: -> --> Str:D { 42 }()

[09:20] <camelia> rakudo-moar 65cda29b9: OUTPUT: «Type check failed for return value; expected Str:D but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[15:00] *** librasteve_ joined
[15:14] *** human-blip joined
[16:43] <librasteve_> teases https://rakudoweekly.blog/2025/07/21/2025-29-just-sleeping/

[16:51] <lizmat> librasteve_++

[17:01] *** deoac joined
[17:04] <disbot3> <bobby_jim_birdrock> I'm loving grammars, but it's like learning to swim by throwing myself into the deep end.

[17:12] <disbot3> <antononcube> I disagree. Raku grammars are fairly natural if one knows BNF.

[18:31] *** msiism joined
[18:34] *** deoac left
[19:06] *** human_blip joined
[19:07] *** human-blip left
[20:59] *** msiism left
