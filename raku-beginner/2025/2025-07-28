[02:05] *** deoac left
[07:55] *** dakkar joined
[08:12] *** librasteve_ joined
[11:09] <disbot4> <jubilatious1_98524> @msiism If you like one-liners, you can call UUID::V4 at the shell command line:  ~ % raku -MUUID::V4 -e 'my $uuid = uuid-v4(); put $uuid;'

[11:22] *** librasteve_ left
[11:58] *** librasteve_ joined
[12:11] <librasteve_> teases https://rakudoweekly.blog/2025/07/28/2025-30-a-hexagonal-week/

[14:02] *** deoac joined
[14:22] *** librasteve_ left
[16:35] *** dakkar left
[17:36] *** stanrifkin joined
[17:55] *** librasteve_ joined
[20:05] *** librasteve_ left
[20:22] <deoac> %?RESOURECS.^name == Distribution.::Resources

[20:22] <deoac> %?RESOURCES<foo>.^name == Distribution::Resource

[20:22] <deoac> So it looks like a hash, but

[20:22] <deoac>     for %?RESOURCES.keys -> $key {

[20:22] <deoac>         say "Resource: $key";

[20:22] <deoac>     }

[20:22] <deoac>  does not print "foo".  How can I see all the 'keys' in this sort-of hash?

[20:44] <lizmat> you cannot, directly

[20:45] <lizmat> However, you can iterate over: $?DISTRIBUTION.meta<resources>

[21:27] <deoac> Thanks.  But since it looks like a hash, shouldn't it DWIM when  I treat it like a hash?

[21:46] <disbot4> <librasteve> deoac: Raku has a handful of special variables that don’t DWIM … you can tell the, by the ? twigil which means please rtm

[21:49] *** librasteve_ joined
[22:38] *** stanrifkin left
[22:48] <deoac> what does 'rtm' mean?

[23:59] *** librasteve_ left
