[01:06] *** Manifest0 left
[02:53] *** librasteve_ left
[07:06] *** jaguart joined
[08:53] *** dakkar joined
[17:37] *** dakkar left
[20:18] *** Manifest0 joined
[21:42] *** habere-et-disper joined
[22:13] *** habere-et-disper left
[22:29] *** habere-et-disper joined
[22:36] <habere-et-disper> `rotate(0)` seems to do weird things -- but I think this is known ?

[22:42] <habere-et-disper> When trying to write the Burrows-Wheeler transform, it would be swell if rotate could also take a range as that makes for the initial matrix.

[22:42] <habere-et-disper> I'd like to write something like `<a b c d>.rotate( ^4 )`, instead of:

[22:42] <habere-et-disper> m: gather take <a b c d>.rotate( $_ ) for ^4

[22:42] <camelia> rakudo-moar 8835a4384: ( no output )

[22:43] <habere-et-disper> m: say gather take <a b c d>.rotate( $_ ) for ^4

[22:43] <camelia> rakudo-moar 8835a4384: OUTPUT: «((a b c d) (b c d a) (c d a b) (d a b c))␤»

[22:51] *** habere-et-disper left
[23:19] <lizmat> m: dd <a b c d>.rotate(0)

[23:19] <camelia> rakudo-moar 8835a4384: OUTPUT: «("a", "b", "c", "d").Seq␤»

[23:19] <lizmat> how is that weird ?

[23:21] <lizmat> m: dd (^4).map: { <a b c d>.rotate( $_ ) }

[23:21] <camelia> rakudo-moar 8835a4384: OUTPUT: «(("a", "b", "c", "d").Seq, ("b", "c", "d", "a").Seq, ("c", "d", "a", "b").Seq, ("d", "a", "b", "c").Seq).Seq␤»

[23:21] <lizmat> m: dd (^4).map: { <a b c d>.rotate( $_ ).List }

[23:21] <camelia> rakudo-moar 8835a4384: OUTPUT: «(("a", "b", "c", "d"), ("b", "c", "d", "a"), ("c", "d", "a", "b"), ("d", "a", "b", "c")).Seq␤»

