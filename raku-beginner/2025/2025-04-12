[03:34] *** stanrifkin_ joined
[03:37] *** stanrifkin left
[04:12] *** undoencalma joined
[04:30] *** undoencalma left
[07:14] <discord-raku-bot> <Matou> Hi !  I'm learning Raku ; following the exercism.org track. There's an exercise called Bob where I have to match an input string and give another string in answer.   raku unit role Bob;  method hey {     my Bool $is_question = self.trim-trailing.ends-with('?');      my Bool $is_yelling = self.contains(/<:Lu>/) && (self eq self.uc());     given self { # self being Bob, the string that's passed to hey ...        

[07:14] <discord-raku-bot> when $is_question && $is_yelling { "Calm down, I know what I'm doing!" }         when $is_question { "Sure." }         when $is_yelling { "Whoa, chill out!" }         when !self || !trim(self)  { "Fine. Be that way!" }         default  { "Whatever." }     } }   I pass all tests ! But the unit tests look like this :    cmp-ok(     (         hey ":) ?"         does Bob:     ),     "eq",     "Sure.", # ...  )   and I'm

[07:14] <discord-raku-bot> not sure I understand what that "does Bob:" mean. But since the 'hey' method has no parameter it looks like "Bob is the string" , that's why I had to match self against strings. Which looks strange from my oldstyle OOP background (in Java I'd have expected a static method (String) -> (String)) .. so is this "rakuish" or do I miss something ?

[07:19] *** lizmat joined
[07:34] *** lizmat left
[08:32] *** lizmat joined
[08:47] *** lizmat left
[08:53] <discord-raku-bot> <rcmlz> To my understanding you attach the role â€žBobâ€œ to the String-Object â€ž:) ?â€œ such that the String â€ž:) ?â€œ now has a method â€žheyâ€œ

[08:55] <discord-raku-bot> <rcmlz> So â€ž:) ?â€œ is now an enhanced String object that has an additional method.

[08:58] <discord-raku-bot> <rcmlz> https://docs.raku.org/language/objects#Mixins_of_roles

[09:05] <discord-raku-bot> <rcmlz> With the Bob-Role you can â€žbobifyâ€œ instances of any object you like (I guess) or use it when creating classic inheritance of classes to â€žbobifyâ€œ your classes directly.

[09:09] <discord-raku-bot> <rcmlz> So to my understanding a role is more flexible/powerfull with regards to re-use as you do not need to design and maintain a (complex) class hierachy â€¦

[09:15] <discord-raku-bot> <rcmlz> and â€žself.containsâ€œ works, because .containes converts automatically to string  https://docs.raku.org/type/Cool#method_contains

[13:40] <discord-raku-bot> <Welemtam> Thanks a lot @rcmlz ; it makes sense now!

[13:46] <discord-raku-bot> <antononcube> @Welemtam TIMTOWTDI, etc., but why are you using a role of this exercise? Does the exercise require using roles?

[13:49] <discord-raku-bot> <Welemtam> Yes the exercise defines "unit role Bob;" and then provides that empty method hey() with no parameter. So I wondered why things were turned out like that.

[13:50] <discord-raku-bot> <antononcube> Good luck!

[13:50] <discord-raku-bot> <Welemtam> unit tests are also prewritten with that "does" syntax.  Thanks ! 80 exercises to go ðŸ˜‚

[13:51] <discord-raku-bot> <antononcube> I am not that intereste with those exercises. But I am interested to know which of the current LLM models can pass them how many of them.

[13:52] <discord-raku-bot> <antononcube> With or without manual (i.e. human) tweaking.

[15:54] <discord-raku-bot> <nahita3882> in case the syntax is a little cryptic here is my attempt to light perl         hey ":) ?"         does Bob: is equivalent to perl         hey ":) ?" does Bob: because whitespace is insignificant there; and it's equivalent to perl         (":) ?" does Bob).hey() because indirect invocation is in action; to quote the linked page > Please note that in notes $trip: "Almost there" we are using indirect

[15:54] <discord-raku-bot> invocant syntax, which puts first the method name, then the object, and then, separated by a colon, the arguments: method invocant: arguments. We can use this syntax whenever it feels more natural than the classical period-and-parentheses one. It works exactly in the same way.  So it mixes-in the role Bob to the object represented by ":) ?". Mixin is in-place but still returns the affected object. In comparison, but

[15:54] <discord-raku-bot> would also mix it but make it not in-place and IMHO better here because there is no need for an inplace operation as the affected object is thrown away anyway. Then the method "hey" is called on the mixed in object which is now of type (Str+{Bob}). Noting that now first the Bob is looked up, then whatever the base type (Str in this case) has in its method resolution order, for a method invocation.  To prove some of the

[15:54] <discord-raku-bot> things i said: perl >>> [13] > ("s" does role R {}).^roles ((R) (Stringy))  # R first  >>> ("s" does role R {}).WHAT (Str+{R})        # It's no longer a plain Str; it is all that + more 

[20:08] *** lizmat joined
[20:50] *** lizmat left
[21:06] <discord-raku-bot> <Welemtam> As an experiment I put my question to GPT 4o (which is often quite accurate imo) - interestingly it gives the right answer, at the end mostly, but says quite the opposite when trying to explain the "does" syntax (by telling there must be a multi sub in between to be able to call "hey").  https://chatgpt.com/share/67fad2ca-12b4-8009-8496-a85f4439fdb9

[23:25] *** undoencalma joined
[23:26] *** undoencalma left
[23:58] *** stanrifkin_ left
