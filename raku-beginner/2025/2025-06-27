[05:24] *** soverysour joined
[05:39] *** ACfromTX joined
[06:18] *** soverysour left
[06:21] *** soverysour joined
[06:34] *** tbrowder left
[06:34] *** tbrowder joined
[06:46] *** soverysour left
[07:48] <ab5tract> apogee: cool! thanks for contributing this :D

[07:49] *** soverysour joined
[08:11] *** soverysour left
[08:57] <disbot3> <apogee> ab5tract You're welcome, I'm planning to contribute a lot hopefully, at some point I'll jump on IRC again too. I wouldn't mind having a look at optimizing Rakudo/MoarVM once I'm more familiar with the language.

[08:57] <disbot3> <apogee> C is my comfy language. üòÑ

[09:15] <disbot3> <librasteve> @apogee very cool ‚Ä¶ much better than my puny efforts https://raku.land/zef:librasteve/Definitely (which i did mainly as a learning exercise)

[09:17] <disbot3> <librasteve> i would be interested to see someone who knows what they are doing with monads improve on this https://rakujourney.wordpress.com/2024/10/12/raku-burritos/

[09:20] <disbot3> <librasteve> also note @masukomi was original author on Definitely and definitely knew what they were doing better than me

[09:21] <disbot3> <librasteve> oh - sounds like your the ideal person to implement tail recursion in moarvm (nothing in the raku spec prohibits this aiui

[09:29] *** avuserow left
[09:34] *** avuserow joined
[09:40] *** human-blip left
[09:56] <disbot3> <apogee> You did something way better than me though: supporting typing. I should add that at some point.

[09:56] <disbot3> <apogee> Either without typing doesn't work that well

[10:11] <disbot3> <apogee> I'd use a state monad to represent this, not a maybe.

[10:15] <disbot3> <apogee> pl my $m = Monad::State(...) $m >>= &addLettuce    >>= &addSourCream     >>= &addSalsa    >>= &addBeans    >>= &addCheese    >>= &addBeef;  $m->get();  # Monad::State(val='sub...' state='Burrito with beef, cheese, beans, salsa, sour cream & lettuce') 

[10:20] <disbot3> <apogee> The main thing here is you have a bunch of 'pure' functions which lead to side effects (sounds paradoxical but it's not, it treats state as just a data transformation and you handle the IO at the edges).

[10:25] <ab5tract> apogee: intriguing.. why does the ingredient list in ‚Äòstate‚Äô have a different t ordering than the function calls?

[10:28] <disbot3> <apogee> Oh, would depend how you implemented it, I imagine state just being a list/array.

[10:28] <disbot3> <apogee> So in this case it's just prepending to the list.

[10:29] <ab5tract> Ah, my brain was in append mode apparently

[10:29] <disbot3> <apogee> But it could also be a hash right?   {   protein:    cheese:   ... } 

[10:29] <disbot3> <apogee> Or even a class.

[10:30] <disbot3> <apogee> State can be anything

[11:27] <disbot3> <antononcube> I am not sure why so ‚Äúmany‚Äù people want to implement their own monadic pipelines in Raku, and not just learn and use forward feed. (Or backward feed.)

[11:48] *** human-blip joined
[12:30] *** sivoais left
[12:31] *** sivoais joined
[13:43] <disbot3> <apogee> Easy learning experience

[13:45] <disbot3> <apogee> I learn by writing code. Implementing in a new language and then making it more idiomatic. I understand monads so there's no domain friction.

[13:45] <disbot3> <apogee> It's all language friction.

[15:11] *** human-blip left
[15:13] *** human-blip joined
[15:45] *** soverysour joined
[15:45] *** soverysour left
[15:45] *** soverysour joined
[16:01] *** soverysour left
[16:03] *** soverysour joined
[16:03] *** soverysour left
[16:03] *** soverysour joined
[16:47] *** soverysour left
[16:47] *** soverysour joined
[16:47] *** soverysour left
[16:47] *** soverysour joined
[17:01] *** human-blip left
[17:03] *** human-blip joined
[17:09] *** human-blip left
[17:11] *** human-blip joined
[17:56] *** soverysour left
[18:40] *** human-blip left
[18:41] *** human-blip joined
[18:42] *** soverysour joined
[20:12] *** soverysour left
