[00:32] <disbot3> <antononcube> @apogee Hmm... good point. I think LLM-chat objects are fairly well documented in demos / movies for chatbooks and / or Raku-LLM functionalities.

[00:39] <disbot3> <apogee> I always try to document the basic workflow, it's a nice reference. Examples & tests too.

[00:46] <disbot3> <jubilatious1_98524> Ok but is there any way to convert UTF8-

[07:52] *** dakkar joined
[13:46] *** librasteve_ joined
[14:32] <disbot3> <frostcod> m: 'class AA {has $.a; method tail { $.a = 10}}; my $x = AA.new;$x.tail;say $x.a

[14:32] <disbot3> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1) at /home/glot/main.raku:1 ------>  = 10}}; my $x = AA.new;$x.tail;say $x.a⏏<EOL>     expecting any of:         single quotes         statement list         term 

[14:33] <disbot3> <frostcod> m: class AA {has $.a; method tail { $.a = 10}}; my $x = AA.new;$x.tail;say $x.a

[14:33] <disbot3> <Raku eval>  Exit code: 1 Cannot modify an immutable 'Any' type object   in method tail at main.raku line 1   in block <unit> at main.raku line 1  

[14:34] <disbot3> <frostcod> m: class AA {has $.a; method tail { $!a = 10}}; my $x = AA.new;$x.tail;say $x.a

[14:34] <disbot3> <Raku eval>  10 

[14:51] <disbot3> <frostcod> m: class AA {has $.a; method tail { $.a = 10}}; my $x = AA.new;$x.tail;say $x.a

[14:51] <disbot3> <Raku eval>  Exit code: 1 Cannot modify an immutable 'Any' type object   in method tail at main.raku line 1   in block <unit> at main.raku line 1  

[14:53] <disbot3> <frostcod> raku -e 'class AA {has $.a; method tail { $.a = 10}}; my $x = AA.new;$x.tail;say $x.a' outputs Any

[14:53] <disbot3> <frostcod> raku -v Welcome to Rakudo™ v2025.06-6-g74d02b5a3. Implementing the Raku® Programming Language v6.d. Built on MoarVM version 2025.06.

[14:53] <disbot3> <frostcod> why?

[15:01] <lizmat> it should actually fail: https://github.com/rakudo/rakudo/issues/5908

[15:01] <lizmat> we had to revert the fix just  before the 2025.06 release because it broke the PDF module somehow

[15:01] <lizmat> frostcod ^^

[15:02] <lizmat> with "has $.a is rw" it should work

[15:02] <lizmat> or alternately do: $!a = 10

[16:02] *** swaggboi left
[16:05] *** swaggboi joined
[16:35] *** librasteve_ left
[16:36] *** dakkar left
[17:32] *** librasteve_ joined
[18:11] <librasteve_> weekly => https://rakudoweekly.blog/2025/06/30/2025-06-released/

[18:32] <lizmat> librasteve_++   # thank you for taking on doing Rakudo Weeklies!

[19:04] <disbot3> <romdav55_30502> Hello, I just find a Memory Leak issue with DB::MySQL, it was not freeing mysql correctly, I just sent a Pull Request

[19:19] *** human-blip left
[19:20] *** human-blip joined
[20:59] <disbot3> <apogee> RE: the AI item in the weekly, I think bad AI code should be treated like any other bad code, with the differentiator that it can be made much more quickly. Requiring decent test coverage is probably helpful but not always practical (i.e. to properly test LLM::Chat's backend calls I'd either need to build a full stub of OpenAI's API or hook it up to a running OpenAI instance -- which would mean wherever those tests are

[20:59] <disbot3> being run would have to spend actual credits to run those tests).

[21:00] <disbot3> <apogee> Similarly, to get 90% coverage on something like DBIish you'd have to install 6+ databases.

[21:21] *** ntv joined
[21:22] *** ntv is now known as apogee_ntv

[21:56] *** apogee_ntv left
[21:56] *** apogee_ntv joined
[21:57] *** apogee_ntv left
[22:09] *** apogee_ntv joined
