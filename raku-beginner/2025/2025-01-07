[09:11] *** dakkar joined
[14:07] *** hudo_ left
[14:08] *** hudo joined
[14:08] *** hudo_ joined
[14:51] <discord-raku-bot> <rcmlz> Not all what you read e.g. about Java OO and Best Practice/Design Pattern is relevant for Raku, as Raku has advanced features like multi methods that Java has not. So you can solve a problem maybe easier using Rakus features than you would in Java.

[15:04] <discord-raku-bot> <rcmlz> So the standard educational task „Given a rather complex (theoretical) class hierachy with lots of inheritance and overwriting, which method gets actually called given a certain instance and certain arguments“ is maybe easier to solve 🤓

[15:07] <discord-raku-bot> <antononcube> I should make for Raku something like this GoFBot.

[15:22] <discord-raku-bot> <rcmlz> I recently took a course at university about OO that demonstrated various OO Concepts and Pitfalls (and proved that Java OO is not sound, if I remember right) using various Languages (mainly Java, C++, Rust) - sometimes I tried the examples/task in Raku and was often surprised that it actually worked.

[15:27] <discord-raku-bot> <rcmlz> If it is possible to generate high quality Raku, working code for/from a OO Design Pattern List from a on that matter Textbook - would be interesting.

[15:30] <discord-raku-bot> <rcmlz> Sort of  for all patterns -> pattern:     say „Pattern: Java Solution vs. Raku Solution“

[15:30] <discord-raku-bot> <rcmlz> 🤓

[15:33] <discord-raku-bot> <antononcube> Well, it does not seem to be that hard. Again, testing and testers are needed. My experience is that that GoFBot produced correct code 80% of the time.

[15:34] <discord-raku-bot> <antononcube> BTW, GoFBot uses UML in Mermaid-JS.

[15:35] <discord-raku-bot> <antononcube> It is related to my TODO list of "UML::Translators" -- to translate UML code into C++, Java, Raku, etc. https://raku.land/zef:antononcube/UML::Translators

[15:41] <discord-raku-bot> <rcmlz> Interesting, did not know that „Raku-Code to PlantUML/Mermaid“ exists.

[16:15] *** Manifest0 joined
[16:17] <Manifest0> Hi! What's the difference between invoking a function this way function(1) or function:1 ?

[16:18] <Manifest0> in my pc:

[16:18] <Manifest0> [8] > my @a; my $t = time; for ^10000000 {@a.push($_)}; say "Took: {time - $t} seconds"                                                                                                                       

[16:18] <Manifest0> Took: 23 seconds

[16:18] <Manifest0> [8] > my @a; my $t = time; for ^10000000 {@a.push:$_}; say "Took: {time - $t} seconds"                                                                                                                        

[16:18] <Manifest0> Took: 9 seconds

[16:18] <Manifest0> that's a big difference

[16:20] <lizmat> Manifest0: which version of Rakudo are you using?

[16:20] <lizmat> fwiw, I don't see a difference in performance between the two syntaxes

[16:20] <Manifest0> Welcome to Rakudo™ v2024.12-33-ge7f9223c5.

[16:20] <lizmat> m: my @a; my $t = time; for ^1000000 {@a.push($_)}; say "Took: {time - $t}"

[16:20] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 1␤»

[16:20] <lizmat> m: my @a; my $t = time; for ^1000000 {@a.push: $_}; say "Took: {time - $t}"

[16:20] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 1␤»

[16:21] <lizmat> fwiw, it's better to use "now" for these cases

[16:21] <lizmat> m: my @a; my $t = now; for ^1000000 {@a.push: $_}; say "Took: {now - $t}"

[16:21] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 0.543170965␤»

[16:21] <lizmat> m: my @a; my $t = now; for ^1000000 {@a.push($_)}; say "Took: {now - $t}"

[16:21] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 0.510747792␤»

[16:21] <lizmat> m: my @a; my $t = now; for ^1000000 {@a.push($_)}; say "Took: {now - $t}"

[16:21] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 0.52691798␤»

[16:21] <lizmat> m: my @a; my $t = now; for ^1000000 {@a.push: $_}; say "Took: {now - $t}"

[16:21] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 0.572151738␤»

[16:22] <Manifest0> let me try

[16:22] <Manifest0> m: my @a; my $t = time; for ^10000000 {@a.push($_)}; say "Took: {now - $t}"

[16:22] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: Instant:46.396049891␤»

[16:22] <Manifest0> m: my @a; my $t = time; for ^10000000 {@a.push:$_}; say "Took: {now - $t}"

[16:22] <lizmat> both cases: s/time/now   :-)

[16:22] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: Instant:41.327424937␤»

[16:23] <Manifest0> got it

[16:23] <Manifest0> m: my @a; my $t = now; for ^10000000 {@a.push:$_}; say "Took: {now - $t}"

[16:23] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 3.792938414␤»

[16:23] <Manifest0> m: my @a; my $t = now; for ^10000000 {@a.push($_)}; say "Took: {now - $t}"

[16:23] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 8.27316351␤»

[16:24] <Manifest0> already some difference

[16:24] <lizmat> hmmm  that's weird

[16:24] <lizmat> are you on Intel hardware ?

[16:24] <Manifest0> yes

[16:24] <lizmat> ok, then that's maybe the reason I can't repro as I'm on Apple silicon

[16:25] <lizmat> and that doesn't have the JIT

[16:25] <lizmat> m: my @a; my $t = now; for ^10000000 {@a.push($_)}; say "Took: {now - $t}"

[16:25] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 8.101594819␤»

[16:25] <lizmat> m: my @a; my $t = now; for ^10000000 {@a.push: $_}; say "Took: {now - $t}"

[16:25] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 8.216274028␤»

[16:26] <lizmat> I wonder whether the CPU of camelia is now being throttled, but weird it is

[16:26] <lizmat> m: my @a; my $t = now; for ^10000000 {@a.push: $_}; say "Took: {now - $t}"

[16:26] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 8.28036817␤»

[16:26] <lizmat> m: my @a; my $t = now; for ^10000000 {@a.push($_)}; say "Took: {now - $t}"

[16:26] <camelia> rakudo-moar 6363b8e17: OUTPUT: «Took: 8.714330314␤»

[16:27] <lizmat> would you mind making a Rakudo issue for this?

[16:27] <Manifest0> sure

[16:28] <lizmat> also: could you try locally running these tests with MVM_JIT_DISABLE=1 ?

[16:28] <lizmat> and see if that makes the results more consistent ?

[16:29] <Manifest0> sure

[16:32] <Manifest0> damn, i'm not even now able to reproduce it on my machine.... But i ran several times and with parens was hitting the 23 seconds mark, while with ':' it was in the 9 secs

[16:37] <Manifest0> should i still open a github issue? I'm not able to reproduce it anymore :-(

[16:37] <lizmat> meh

[16:38] <lizmat> well, I guess we need to wait until we can repro

[16:48] <discord-raku-bot> <rcmlz> On https://glot.io/snippets/h3gee35qz6 : is faster than .

[16:51] *** MasterDuke joined
[16:51] <Manifest0> i can reproduce it in the REPL. I copied all the steps i've made before (errors included), and i have the same results

[16:52] <MasterDuke> `push:$_` has different timing (and ast) than `push: $_` (note the space after the colon)

[16:53] <lizmat> there shouldn't be any difference in the QAST produced, is there ?

[16:54] <Manifest0> https://paste.opensuse.org/pastes/44988037d045

[16:54] <MasterDuke> lizmat: there is

[16:54] <lizmat> weird

[16:56] <Manifest0> yes, that's the space!

[16:56] <Manifest0> with the space it takes the same amount of time

[16:56] <Manifest0> without the space is much faster

[16:56] <MasterDuke> and a difference persists at --target=optimize also (somewhat obviously since we see a time difference)

[16:57] <MasterDuke> but without the space it doesn't work. i.e., the $_ values aren't in the array

[17:00] <Manifest0> shouldn't we get a warning then?

[17:08] <MasterDuke> i'd say yes

[17:09] <MasterDuke> afk now

[17:14] *** MasterDuke left
[17:36] <lizmat> ok, found the reason for the discrepancy

[17:36] <lizmat> @a.push: $_   is codegenned as @a.push($_), as one would expect

[17:37] *** dakkar left
[17:37] <lizmat> @a.push:$_  on the other hand is codegenned as @a.push( :$_), aka with the named argument "_" taking the value of $_

[17:38] <lizmat> and the named argument is silently ignored

[17:38] <lizmat> effectively making it:

[17:38] <lizmat> @a.push

[17:41] <lizmat> this would have been caught sooner if we would have a way to mark method calls as "endpoints" in the sense that they don't accept any unknown named arguments

[18:21] <Manifest0> lizmat: nice finding!

[18:21] <lizmat> yeah, looking at the RakuAST tree made it clear immediately

[18:22] <lizmat> m: say Q|my @a; @a.push:$_|.AST.statements[1].expression

[18:22] <camelia> rakudo-moar 6363b8e17: OUTPUT: «RakuAST::ApplyPostfix.new(␤  operand => RakuAST::Var::Lexical.new("\@a"),␤  postfix => RakuAST::Call::Method.new(␤    name => RakuAST::Name.from-identifier("push"),␤    args => RakuAST::ArgList.new(␤      RakuAST::ColonPair::Variable.new(␤…»

[18:23] <lizmat> the "RakuAST::ColonPair::Variable" gives that away

[18:23] <lizmat> m: say Q|my @a; @a.push:$_|.AST.statements[1].expression.postfix

[18:23] <camelia> rakudo-moar 6363b8e17: OUTPUT: «RakuAST::Call::Method.new(␤  name => RakuAST::Name.from-identifier("push"),␤  args => RakuAST::ArgList.new(␤    RakuAST::ColonPair::Variable.new(␤      key   => "_",␤      value => RakuAST::Var::Lexical.new("\$_")␤    )␤  )␤)␤»

[18:23] <lizmat> RakuAST::ColonPair::Variable.new(␤      key   => "_",␤      value => RakuAST::Var::Lexical.new("\$_")

[22:34] *** kjp left
[22:36] *** kjp joined
[22:38] *** kjp left
[22:38] *** kjp joined
