[00:09] *** deadmarshal_ left
[00:28] *** deadmarshal_ joined
[01:33] *** Tirifto_ joined
[01:34] *** Tirifto left
[09:53] *** stanrifkin joined
[11:16] <stanrifkin> Terminal::LineEditor does not support CTRL-L for clearing the screen, right?

[13:54] *** lizmat left
[13:54] *** lizmat_ left
[13:54] *** lizmat joined
[16:06] <discord-raku-bot> <melezhik.> Guest9: you can launch qemu box and then run some test scenarios on it, then just drop it. Useful for Linux distributions testing

[16:22] <discord-raku-bot> <Welemtam> Hello !  Still on windows ( ðŸ˜‡ ), I'm trying to run a program from a raku script, but asynchronously (I want my script to be able to exit after it has run the command) :   raku # (For example) my Str constant $DIFF-TOOL  = 'C:\Program Files\WinMerge\WinMergeU.exe'; run $DIFF-TOOL, $full-file-path, $network-path;  With "run" it works, but synchronously (the script waits for winmerge.exe to exit) - as

[16:22] <discord-raku-bot> expected ...   If I do this :   my $proc = Proc::Async.new($DIFF-TOOL, $full-file-path, $network-path); $proc.start;  The process is created but killed as soon as the main script exits (confirmed with a sleep())  Do someone have an idea?  Thank you!

[17:03] <discord-raku-bot> <librasteve> my rough idea is that your main script starts in a process that then spawns a new process with Proc::Async and that when it exits, it tells the OS to clean up and that cleans up all the spawned processes too

[17:04] <discord-raku-bot> <librasteve> idk windows, but for example on ubuntu if I start a new cro instance in a terminal and then close the terminal then the cro service is also killed - the way to prevent this in unix is with nohup

[17:06] <discord-raku-bot> <librasteve> based on my extensive research https://www.perplexity.ai/search/windows-nohup-RHSL.FF5T3SRdwTTUUARdQ, I would suggest use qx and start (but then that's windows specific) or WSL

[18:27] <discord-raku-bot> <Welemtam> Thanks, I will try with qx soon.   I was expecting something like a fork/exec semantics ( == CreateProcess on windows), in which when you run some child process, It doesn't die when the parent process dies. In python it's straightforward using subprocess.popen(), and relatively abstracted from which OS the script is run on. Since Raku offers run, shell, ... primitives I believe this shouldn't be impossible

[18:27] <discord-raku-bot> to express in an OS-independent way

[18:46] <discord-raku-bot> <rcmlz> When you start a parallel task in you script would it not make sense to use â€šawaitâ€˜ to ensure that the parallel process has time to complete?

[19:23] *** DarthGandalf left
[19:24] *** DarthGandalf joined
[19:38] <discord-raku-bot> <Welemtam> My use case is a script launch_XXX.raku where XXX is any GUI application ; the script is just here to configure the command line of XXX, then run it. So when I type :   raku launch_XXX.raku  ... in my shell, I expect XXX to open, and Raku to exit, while I can play with my GUI application as long as I need

[19:53] *** notna joined
[19:54] <discord-raku-bot> <Welemtam> The problem can be summed up as "how to make myChild.exe outlive raku.exe"... even with Proc::Async.new(...).start, the Raku interpreter kills its children when quitting (It seems to be a deliberate choice from raku since it's not what happens after doing a simple fork); it probably makes sense in most cases but it would be nice if there were some general solution to "detach" the spawned process.

[19:54] <discord-raku-bot> <Welemtam> https://cdn.discordapp.com/attachments/768511641758466088/1366865312884064397/image.png?ex=68128005&is=68112e85&hm=eec526b625af4e26ea77bc28ec47515a801dc7af2d2f6b3ad5db63a7b5e2c45d&

[21:00] *** notna left
