[02:16] *** razetime joined
[03:47] *** razetime left
[04:36] *** razetime joined
[04:42] *** razetime left
[06:12] *** siavash joined
[08:47] *** ab5tract joined
[11:59] *** siavash left
[13:29] *** ab5tract left
[14:55] *** razetime joined
[15:20] *** jgaz left
[16:13] *** ab5tract joined
[16:33] *** ab5tract left
[16:46] *** jgaz joined
[17:58] <discord-raku-bot> <su.shi> hello ,I'm trying to use the File::Find module and in their example they have  .say for find dir => '.'; I'm not sure what the => syntax is doing, and when i look at the docs for for and throughout the operator docs, ican't find info about it

[18:00] <discord-raku-bot> <antononcube> @sushi Maybe, I can clarify by re-writing,

[18:01] <discord-raku-bot> <antononcube>  for find(dir => '.') -> $f {   say $f }  

[18:01] <discord-raku-bot> <su.shi> ohh, is it a named parameter?

[18:02] <discord-raku-bot> <su.shi> thank you

[18:03] <discord-raku-bot> <su.shi> now im wondering, is there a way for me to gather all of the files into an array by doing something like  my @files = for find dir => '.'; on one line ?

[18:06] <discord-raku-bot> <antononcube> Doesn't that work default like that?

[18:07] <discord-raku-bot> <antononcube> Meaning does this work:  my @files = find(dir => '.'); 

[18:08] <discord-raku-bot> <su.shi> ah it does lol

[18:08] <discord-raku-bot> <su.shi> getting too excited with syntax

[18:08] <discord-raku-bot> <su.shi>  my @files = gather { take $_ for find dir => '.' }; i found this

[18:09] <discord-raku-bot> <su.shi> obviously redundent though since i am just consuming the elements of a list into another

[18:10] <discord-raku-bot> <antononcube> Well, if you have a "deep" directory (with sub-directories) you might prefer to flatten the hierarchy in to an array of strings/files.

[18:11] <discord-raku-bot> <antononcube> (I am not sure "Find::File" is doing -- haven't used it...)

[18:12] <discord-raku-bot> <su.shi> just recursively walks a directory and returns a list of its files

[18:14] <discord-raku-bot> <su.shi> oh it returns a lazy list, so i suppose if i wanted to get all of the elements as soon as i call this would be a way to do it

[18:14] <discord-raku-bot> <antononcube> ok. ðŸ™‚

[18:15] <discord-raku-bot> <su.shi> thanks for the help!

[18:21] <discord-raku-bot> <antononcube> @su.shi  Good luck!

[18:24] *** razetime left
[18:55] <discord-raku-bot> <su.shi> how do i check if a file handle is a directory?

[19:00] <discord-raku-bot> <su.shi> oh i see

[20:57] <discord-raku-bot> <su.shi> what's a good way to get line number in raku? in perl i would just use $., but that's gone, so can i use something like enumerate from python on the lines Seq?

[20:59] <discord-raku-bot> <su.shi> or yeah, im using kv on lines, but mi not sure how to consume the line number from it

[21:01] <discord-raku-bot> <antononcube> @sushi I am not sure I understand correctly... Does this work:  for "sashimi".comb.kv -> $k, $v {  say "$k : $v "} 

[21:03] <discord-raku-bot> <su.shi> does the same syntax work for while? im using while like i did in perl rn:  while my $line = $fh.lines and i tried consuming the line num by doing  while my ($num, $line) = $fh.lines.kv but it complains about an uninitialized var

[21:21] <discord-raku-bot> <su.shi> ah i got it, should have been using for not while

[21:47] <discord-raku-bot> <nemokosch> What Anton wrote is clear and concise

[22:48] *** habere-et-disper joined
[22:55] <habere-et-disper> Are these two statements strictly equivalent ? Any caveats ?

[22:55] <habere-et-disper> if $condition { thing-1; thing-2; }

[22:55] <habere-et-disper> $condition && { thing-1; thing-2; }

[23:38] <discord-raku-bot> <nemokosch> Well, return value?

[23:42] <habere-et-disper> Is the return value not the same for both cases? (Either False if $condition fails, or thing-2 if True.)

[23:44] <discord-raku-bot> <nemokosch> Probably not but I don't know but heart

[23:45] <discord-raku-bot> <nemokosch> If $condition were a falsy non-boolean value, && would surely return it as-is, though

[23:57] <habere-et-disper> Thanks.

