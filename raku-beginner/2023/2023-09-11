[00:00] *** hexology left
[00:00] *** yjh left
[00:00] *** deadmarshal_ left
[00:00] *** lucs left
[00:00] *** elcaro left
[00:00] *** sjn left
[00:00] *** sjn joined
[00:02] *** hexology joined
[00:05] *** lucs joined
[00:05] *** elcaro joined
[00:06] *** deadmarshal_ joined
[03:15] *** kjp left
[04:22] *** MasterDuke left
[07:13] *** deoac left
[07:54] *** dakkar joined
[08:04] *** Manifest0 joined
[08:21] *** tea3po joined
[08:22] *** tea3po left
[08:22] *** tea3po joined
[08:24] *** teatwo left
[08:35] *** ab5tract left
[08:35] *** ab5tract joined
[12:05] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/09/11/2023-37-issuing/

[12:56] *** deoac joined
[14:16] *** camelia left
[14:36] *** camelia joined
[15:14] *** deoac left
[15:30] *** deoac joined
[16:36] *** dakkar left
[17:21] *** deoac left
[17:50] *** jgaz left
[18:01] <discord-raku-bot> <timemelon> I'm trying to pass a list to a function and I think I'm messing up the implicit parenthesizing somehow

[18:01] <discord-raku-bot> <timemelon> I have sub f(List:D @ints) { # ... }

[18:01] <discord-raku-bot> <timemelon> and say f (1, 1, 2, 2, 2, 3);

[18:02] <discord-raku-bot> <timemelon> I'm getting the error Type check failed in binding to parameter '@ints'; expected Positional[List] but got List ((1, 1, 2, 2, 2, 3))

[18:03] <discord-raku-bot> <timemelon> where am I going wrong?

[18:15] <discord-raku-bot> <lakmatiol> @timemelonSee https://docs.raku.org/language/traps#Typed_array_parameters

[18:20] <discord-raku-bot> <timemelon> ah thanks

[18:20] <discord-raku-bot> <timemelon> so the type of an @ variable refers to the type of each element

[18:23] <discord-raku-bot> <lakmatiol> yes

[19:06] *** MasterDuke joined
[19:06] <discord-raku-bot> <nemokosch> anyway, there is "no way" a List:U could get there

[19:07] <discord-raku-bot> <nemokosch> or at least it's controversial whether it should be allowed or not

[19:09] <discord-raku-bot> <nemokosch> @timemelon what languages have you used before, if I may?

[19:10] <discord-raku-bot> <timemelon> my big ones are c, haskell, and apl

[19:11] <discord-raku-bot> <nemokosch> great, I know no APL and have a very basic clue of what Haskell looks like...

[19:11] <discord-raku-bot> <nemokosch> I just wanted to say that something that has this @ sigil in front will violate a lot of ideas you may have about what "a variable" is

[19:12] <discord-raku-bot> <leomehraban> I have this grammer: grammar Rix{   token TOP{    <statement>*%%';'   }   token statement{     [<proc_call> | <expr>]   }   token proc_call{       '.'<identifier> '['<expr>*%%',' ']'   }   token identifier{       \w+   }   token expr{       '+'   } }. However, when I do say(Rix.parse(".print[+];"));, it just says Nil. however,  when I give it ".print[];", without the plus, it gives the expected result.

[19:12] <discord-raku-bot> I'm still a bit confused with regexes, so it's very likely that I made some error, but I can't find it.

[19:24] <MasterDuke> leomehraban: moritz is the grammar/regex expert, but you might be interested in https://docs.raku.org/language/regexes#Tilde_for_nesting_structures to make your parsing of '[' <...> ']' easier

[19:31] <discord-raku-bot> <nemokosch> what is this %% ?

[19:32] <discord-raku-bot> <nemokosch> > To also match trailing delimiters ( a, or a,a, ), you can use %% instead of %.

[19:32] <discord-raku-bot> <nemokosch> gotcha

[19:32] <discord-raku-bot> <antononcube> %% is the same as %  -- as far as I can tell. I have seen it other's people code.

[19:33] <discord-raku-bot> <antononcube> And, yes, I was puzzled by it too.

[19:42] <discord-raku-bot> <scullucs> %% allows a trailing separator, while % does not.

[19:43] <discord-raku-bot> <scullucs> Er, like @nemokosch mentioned.

[19:43] <discord-raku-bot> <antononcube> @lucs Agh, good point!

[19:44] <discord-raku-bot> <nemokosch> @leomehraban don't @ me at this but I think there is a phenomenon when a quantifier asterisk hard-locks to an empty match

[19:45] <discord-raku-bot> <nemokosch> also, does %% allow or mandate a trailing separator?

[19:45] <discord-raku-bot> <nemokosch> if it mandates one, the parsing should fail by all means

[19:45] <discord-raku-bot> <scullucs> I believe it allows, not mandates.

[19:46] <discord-raku-bot> <scullucs> (But who cares about my beliefs, better test ðŸ™‚ )

[19:46] <discord-raku-bot> <nemokosch> adding the comma after the plus did not help so that's definitely a hint

[19:47] <discord-raku-bot> <nemokosch> that wasn't the main issue

[19:47] <discord-raku-bot> <nemokosch> yes, there you go

[19:47] <discord-raku-bot> <nemokosch> <expr>+%%',' does work

[19:48] <MasterDuke> https://docs.raku.org/language/regexes#Modified_quantifier:_%,_%% isn't explicit about whether the trailing separator is optional or required

[19:48] <discord-raku-bot> <nemokosch> maybe it's worth an issue

[19:49] <discord-raku-bot> <nemokosch> https://design.raku.org/S05.html says:

[19:49] <discord-raku-bot> <nemokosch>  If you wish to allow the match to end after either side, use %% instead. Therefore      / <ident>+ %% ',' / can match any of      foo     foo,     foo,bar     foo,bar,     foo,bar,baz     foo,bar,baz 

[19:52] <discord-raku-bot> <nemokosch> I can just edit this one, rest assured

[19:58] *** Manifest0 left
[20:03] <discord-raku-bot> <nemokosch> @leomehraban let me assume that you ultimately want this to work. I can't tell you why - apparently - %% hard-locks to an empty match when that's an available option but without using it, it's simple to write something that does work

[20:03] <discord-raku-bot> <nemokosch>  token proc_call{       '.'<identifier> '[' [<expr>','?]* ']'   } 

[20:11] <discord-raku-bot> <nemokosch> it can also work by simply changing [<proc_call> | <expr>] to [<proc_call> || <expr>]

[20:22] *** teatwo joined
[20:25] *** tea3po left
[20:40] *** deoac joined
[21:14] *** deoac left
