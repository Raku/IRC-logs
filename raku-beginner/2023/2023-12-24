[01:16] *** Manifest0 left
[07:07] *** CIAvash joined
[07:30] *** jaguart left
[07:30] *** jaguart joined
[09:11] *** CIAvash left
[10:45] <DarthGandalf> Hi, there's no Raku bindings for Z3 anywhere? Looks like I'll have to call the C library directly

[10:51] <lizmat> https://raku.land/?q=Z3    # looks like indeed none known

[11:21] *** MasterDuke left
[12:50] <discord-raku-bot> <librasteve> DarthGandalf may want to consider https://metacpan.org/pod/Z3::FFI via use perl5

[12:51] <discord-raku-bot> <librasteve> or https://ericpony.github.io/z3py-tutorial/guide-examples.htm z3py via use python

[12:52] <DarthGandalf> my current workaround is to call `run('python', 'day24p2.py', :in, :out);` but after that works, I'll try to port that to `use python`, thanks

[13:29] <DarthGandalf> I'm getting segfault with Inline::Python

[13:45] <DarthGandalf> I've filled https://github.com/niner/Inline-Python/issues/45 for it and more

[13:45] <discord-raku-bot> <nemokosch> Don't keep your hopes up

[13:46] <DarthGandalf> I know :)

[13:48] <discord-raku-bot> <nemokosch> It's better to write bindings with NativeCall, that's the one that actually works

[13:50] <DarthGandalf> well, yes, it would work. I managed to make it work with md5 calculation

[13:50] <DarthGandalf> but z3 python bindings has much nicer API than C API

[13:50] <DarthGandalf> because of operator overloading

[13:51] <discord-raku-bot> <nemokosch> Well it's only up to you what Raku API you create ðŸ˜‰

[13:52] <DarthGandalf> well, sure. That's why I was asking about existing Raku Z3 bindings :)

[13:52] <DarthGandalf> I'm not up to the task of creating such bindings myself

[13:53] <discord-raku-bot> <nemokosch> Well, that's too bad... these packages don't grow from soil

[13:53] <DarthGandalf> I understand

[13:53] <DarthGandalf> I have too many FOSS commitments already

[13:53] <DarthGandalf> so doing this AoC on Raku was enough for me, for now

[13:54] <discord-raku-bot> <nemokosch> I don't mind FOSS commitments but with all due respect, Z3 is a car for me

[13:54] <DarthGandalf> and I already contributed a bit by finding several bugs in rakudo and moarvm itself :)

[13:55] <discord-raku-bot> <nemokosch> Sadly, that's not a very high tally

[13:58] <discord-raku-bot> <.vushu> Does nativecall work on c++? without c api?

[14:00] <DarthGandalf> If I find some free time, I might do it, but don't keep your hopes up :)

[14:01] <discord-raku-bot> <nemokosch> C++ is usually binary compatible with C

[14:01] <discord-raku-bot> <nemokosch> I've seen people use it that way

[14:14] <DarthGandalf> That's different

[14:15] <discord-raku-bot> <nemokosch> NativeCall is about ABI anyway

[14:15] <discord-raku-bot> <nemokosch> Think of ab5tract using Zig

[14:16] <DarthGandalf> yes, and C++ doesn't have a defined ABI. You can try to make it work by mangling the function names yourself, but normally ABI calls are done through C API

[14:16] <discord-raku-bot> <.vushu> hmm would be nice to be able to translate c++ class to raku class

[14:17] <discord-raku-bot> <.vushu> since c isnâ€™t oop

[14:17] <discord-raku-bot> <nemokosch> Again, I've seen people making it work, and defined or not, C compatible code won't magically produce C incompatible binary

[14:17] <DarthGandalf> I've been using SWIG for that before

[14:17] <DarthGandalf> though not for raku

[14:17] <discord-raku-bot> <nemokosch> That's the whole reason for structs

[14:19] <discord-raku-bot> <lakmatiol> You need extern "C" if you want non-painful FFI to C++.

[14:23] <discord-raku-bot> <lakmatiol> c $ cat a.c int f() {return 1;} $ cat b.c #include <stdio.h> int f(); int main() {         printf("%d\n", f()); } $ gcc -c a.c $ g++ -c a.c -o a.cc.o $ gcc b.c a.o $ ./a.out 1 $ gcc b.c a.cc.o /usr/bin/ld: /tmp/cc3YMJXG.o: in function `main': b.c:(.text+0xe): undefined reference to `f' collect2: error: ld returned 1 exit status it will

[14:23] <discord-raku-bot> <nemokosch> This is the linker

[14:23] <discord-raku-bot> <lakmatiol> the symbol name is wrong in the c++ binary

[14:24] <discord-raku-bot> <lakmatiol>  $ nm -an a.cc.o 0000000000000000 t .text 0000000000000000 T _Z1fv 0000000000000000 a a.c $ nm -an a.o 0000000000000000 t .text 0000000000000000 a a.c 0000000000000000 T f notice how to C++ version doesn't have f, but instead has _Z1fv

[14:25] <discord-raku-bot> <lakmatiol> I think in this simple case if you just picked the right symbol it would work

[14:25] <discord-raku-bot> <nemokosch> I wouldn't expect static linking to be the same deal.

[14:25] <DarthGandalf> static vs dynamic doesn't matter mangling-wise

[14:26] <discord-raku-bot> <nemokosch> Frankly, I wouldn't expect portability for static linking even across different C compilers

[14:26] <discord-raku-bot> <lakmatiol> static vs dynamic linking doesn't come into play here at all, that matters when using libraries, here we are just using raw object files.

[14:27] <discord-raku-bot> <nemokosch> It was literally the linker that threw the error

[14:27] <DarthGandalf> that's because C and C++ assign different symbol name to `f`

[14:29] <DarthGandalf> you can also mention C++ namespaces and C++20 modules here, which allow creating several independent functions `f`, in different ways.

[14:30] <discord-raku-bot> <librasteve> donâ€™t give up on inline python (i) i built some dockerfiles to help https://github.com/librasteve/raku-Dockerfiles this one should do it librasteve/rakudo:scipy, (ii) the trick to get it to run on your machine is the build devs here https://github.com/librasteve/raku-Dockerfiles/blob/main/scipy/Dockerfile at line 9

[14:31] <discord-raku-bot> <nemokosch> Respect for your effort

[14:31] <DarthGandalf> librasteve: It builds fine, that's not the problem though

[14:32] <discord-raku-bot> <lakmatiol> c $ gcc -shared -o a.cc.so a.cc.o $ gcc -shared -o a.so a.o $ python >>> lib = ctypes.cdll.LoadLibrary('./a.cc.so') >>> lib.f Traceback (most recent call last):   File "<stdin>", line 1, in <module>   File "/home/adam/.pyenv/versions/3.10.6/lib/python3.10/ctypes/__init__.py", line 387, in __getattr__     func = self.__getitem__(name)   File

[14:32] <discord-raku-bot> "/home/adam/.pyenv/versions/3.10.6/lib/python3.10/ctypes/__init__.py", line 392, in __getitem__     func = self._FuncPtr((name_or_ordinal, self)) AttributeError: ./a.cc.so: undefined symbol: f >>> lib._Z1fv <_FuncPtr object at 0x7f0cb9e18a00> >>> lib._Z1fv() 1 >>> lib2 = ctypes.cdll.LoadLibrary('./a.so') >>> lib2.f() 1 here is the same error from pythons FFI.

[14:32] <DarthGandalf> or you're saying you made it somehow not crash in runtime, and to support operator overloading properly?

[14:33] <discord-raku-bot> <nemokosch> Yeah it's not fully clear what to see here

[14:34] <discord-raku-bot> <lakmatiol> note how a.cc.so, compiled with a C++ compiler, doesn't have the function f, but the a.so, compiled with a C compiler, does

[14:34] <discord-raku-bot> <nemokosch> Where are the source files though

[14:35] <discord-raku-bot> <lakmatiol> followup from this example

[14:36] <discord-raku-bot> <nemokosch> Anyway, it's not like it needs to be reimplemented in C

[14:36] <discord-raku-bot> <lakmatiol> interoping with C++ without extern "C" requires implementing name mangling, or wrapping the library in an extern "C"  API

[14:36] <discord-raku-bot> <nemokosch> Maybe the symbol needs to be exposed differently but the underlying data types are the same

[14:37] <discord-raku-bot> <nemokosch> Which is exactly the difference between a language like Raku where data types are hand mapped

[14:44] <discord-raku-bot> <librasteve> reads the issue â€¦ ah - nothing to add on segfault situation, on operator overloading, you can just write your own in raku like â€˜infix:<+> (Z3::Int $a, $b) {$a add $b}â€™ or similar I guessâ€¦.

[14:45] <DarthGandalf> I could. But the segfault is blocking that anyway, so...

[14:50] <discord-raku-bot> <.vushu> any modules I can look at for c++ to raku bindings?

[14:50] <discord-raku-bot> <nemokosch> Rawley fowler

[14:51] <discord-raku-bot> <.vushu> cool thanks!

[14:53] <discord-raku-bot> <nemokosch> There was the simd stuff

[14:54] <discord-raku-bot> <nemokosch> I wonder how Curt Tilmes did it https://github.com/CurtTilmes/raku-jsonsimd

[14:55] <DarthGandalf> via extern C: https://github.com/CurtTilmes/raku-jsonsimd/blob/master/src/simdjson-cinterface.cpp

[14:55] <discord-raku-bot> <.vushu> cool iâ€™ll check it out

[14:55] <discord-raku-bot> <nemokosch> Tbh it's much more bloated than Rawley's solution

[14:55] <discord-raku-bot> <nemokosch> Hugeass h file

[14:58] <DarthGandalf> don't worry, Rawley also uses extern C :)

[14:58] <DarthGandalf> https://github.com/rawleyfowler/JSON-Simd/blob/main/cc/json-native.cc#L15

[14:58] <discord-raku-bot> <nemokosch> But it's less bloated ðŸ˜›

[14:59] <discord-raku-bot> <nemokosch> Not too frightening

[14:59] <discord-raku-bot> <nemokosch> Two functions exposed and one is domain specific

[15:00] <DarthGandalf> actually, I think they do the same. Rawley also uses the header

[15:00] <DarthGandalf> The difference is that he doesn't *bundle* the header

[15:00] <DarthGandalf> so you just don't see it in the source

[15:01] <discord-raku-bot> <nemokosch> That's cleaner id say

[15:01] <DarthGandalf> oh, that's for sure

[15:01] <discord-raku-bot> <nemokosch> Also, the dist architecture is more up-to-date

[15:01] <DarthGandalf> I also don't like bundled external libraries

[15:01] <discord-raku-bot> <nemokosch> Build.rakumod is like a legacy hook

[15:02] <discord-raku-bot> <nemokosch> Rawley created a dedicated builder module for CMake

[15:02] <discord-raku-bot> <nemokosch> And it's registered in the META6 file

[16:21] <discord-raku-bot> <antononcube> I want to simplify this code:  'C2H5OH + O2 -> H2O + CO2' ==> balance-chemical-equation() ==> {$_.say; $_}() ==> molecular-mass() 

[16:22] <discord-raku-bot> <antononcube> Is there are way to  replace the echoing chain segment {$_.say; $_}() with something smaller?

[16:23] <discord-raku-bot> <antononcube> It looks like I have to live with the requirement to add   ()  to each of the pipeline functions...

[16:24] <discord-raku-bot> <nemokosch> Literally what snitch does in v6.e

[16:25] <discord-raku-bot> <antononcube> Ok. Good to know. Any 6.d solutions? ðŸ™‚

[16:26] <discord-raku-bot> <nemokosch> I think this is good if you insist on the arrows

[16:26] <discord-raku-bot> <antononcube> Should I use :experimental adverb when I start the Raku session?

[16:26] <discord-raku-bot> <antononcube> Of course, I insist on arrows!!! That is a monadic pipeline "for free" from Raku.

[16:30] <discord-raku-bot> <antononcube> Fine -- I have to figure out how make "Jupyter::Chatbook" to include this statement "use v6.e.PREVIEW;" when starting the Raku REPL.

[16:31] <discord-raku-bot> <antononcube> Another question: if I have a Pair object $p, how can I apply a two argument function that uses both the key and the value?

[16:32] <discord-raku-bot> <nemokosch> $p.key, $p.value?

[16:33] <discord-raku-bot> <nemokosch> Lol

[16:33] <discord-raku-bot> <antononcube> For example, it would have been nice if instead of f2($p.key, $p.value) I could write f2(|$p).

[16:33] <discord-raku-bot> <nemokosch> m: my $p = :2a; $p.kv.say

[16:33] <discord-raku-bot> <Raku eval>  (a 2) 

[16:33] <discord-raku-bot> <nemokosch> Good

[16:33] <discord-raku-bot> <nemokosch> You could flatten this

[16:34] <discord-raku-bot> <antononcube> Ok, yes. That works -- Thanks!

[16:51] *** mcmillhj joined
[16:58] <mcmillhj> Probably another dumb question but I am creating a bunch of subs using EVAL (solving AOC puzzles) and some of the subs reference other subs. For example, `sub _hdj { if ($m > 838) { return _A(); }; return _pv(); }` calls both sub `_A` and sub `_pv` depending on the state of some variables. When I try to EVAL the string holding `_hdj` I get an error

[16:58] <mcmillhj> about an undeclared name `_pv`. Is there a way to ignore this error? By the time that `_hdj` is called `_pv` will have already been EVAL'd.

[17:00] <discord-raku-bot> <antononcube> I think you have to check does _hdj is defined in the way you expect. (In the global context of symbols.)

[17:00] <DarthGandalf> perhaps instead of calling a function by name, have a %hash somewhere in which you'd look up the sub object in runtime? something like %funcs<_pv>()

[17:03] <discord-raku-bot> <librasteve> my guess is that with multiple EVAL blocks, the symbols from one eval are not available in the next eval - maybe you could do one big eval, but use if / when statements to just run the code you need?

[17:04] <mcmillhj> oh okay, I hadn't thought about using a hash but that could work. So I would do something like `%hash{'_hdj'} = EVAL $stringified-hdj;`. I unfortunately wrote a grammar to transform the puzzle input into these subs so that would require some re-work but not terrible.

[17:05] <discord-raku-bot> <antononcube> @librasteve This was my assumption too.

[17:05] <mcmillhj> librasteve: I tried in a block that was separated by newlines. When I tried to call one of the functions though it didn't appear to be available.

[17:06] <DarthGandalf> %hash{'_hdj'} is the same as %hash<_hdj> but yes

[17:07] <discord-raku-bot> <librasteve> maybe you could post a gist of you code and link it here? (I am a bit in the dark)

[17:07] <mcmillhj> yeah, I feel like I am not doing the best job explaining. I'll push my code up to github, one second.

[17:08] <DarthGandalf> I did use eval for the first day, not for day 19 though. But in the first day I randomly found out that the function names defined need to be more nested. But that is probably because I'm using a module per day, so might not be relevant for your evals

[17:09] <DarthGandalf> by nested I mean this: https://github.com/DarthGandalf/advent-of-code/blob/master/2023/Day01x.rakumod#L35

[17:14] <discord-raku-bot> <librasteve> antonocube: I updated the Physics::Measure test to "is $fe1, '30mpg'; is $fe2, '10.620186km/l' || '12.754311km/l'," (you are on us-gal and us-mpg since you have en_US locale) should work on v1.0.19 (just released to fez)

[17:15] <mcmillhj> sorry for the delay, had to hardcode the test input: https://github.com/mcmillhj/aoc/blob/main/2023/19/aplenty.raku

[17:15] <mcmillhj> yeah, I haven't been defining modules

[17:16] <discord-raku-bot> <librasteve> tx - looking now

[17:30] <DarthGandalf> > However, since the set of symbols in a lexical scope is immutable after compile time, an EVAL can never introduce symbols into the surrounding scope.

[17:31] <DarthGandalf> https://docs.raku.org/type/independent-routines#routine_EVAL

[17:31] <mcmillhj> oh dang

[17:31] <mcmillhj> I missed that when reading the docs :(

[17:33] <discord-raku-bot> <librasteve> yeah - I would say put the last lines (my $IN = "_in"; ...) into the EVAL block

[17:33] <DarthGandalf> however, the example below that sentence looks like it can introduce names just fine, module M { EVAL 'our $answer = 42' }; say $M::answer;

[17:35] <discord-raku-bot> <librasteve> our is not lexical

[17:36] <discord-raku-bot> <nemokosch> ^

[17:36] <mcmillhj> lol

[17:36] <mcmillhj> wrapping the block eval in a module worked fine

[17:36] <discord-raku-bot> <librasteve> phew!

[17:36] <DarthGandalf> well, I tried to modify mcmillhj's code to add our to the subs, but that still didn't expose the subs

[17:36] <mcmillhj> I had to do both. Wrap the subs in `our` _and_ use a new module

[17:37] <mcmillhj> looks a little wonky but happy I don't have to do a lot of refactoring. Thanks all for the help!

[17:38] <discord-raku-bot> <librasteve> all "advanced" things (sub, class, etc) are default my or our, maybe you need to go 'our sub ...' to override the default or 'sub blah is export'

[17:38] <discord-raku-bot> <antononcube> You misspelled my handle. ðŸ™‚ So, I did not see it when you posted it...

[17:39] <mcmillhj> I guess I still don't understand why the our subs can't apply to the main module?

[17:39] <mcmillhj> if they aren't lexical, shouldn't it be fine?

[17:39] <discord-raku-bot> <antononcube> @librasteve Should I submit an issue/request for "in session" version of "App::Crag"?

[17:39] <mcmillhj> nvm, I am dumb you do not need the additional module. Just the `our` prefix on the subs

[17:41] <discord-raku-bot> <librasteve> https://docs.raku.org/language/modules#UNIT::EXPORT::*

[17:41] <DarthGandalf> interesting. I don't see it in `.say for ::.keys;` though

[17:42] <DarthGandalf> but it is called

[17:42] <discord-raku-bot> <antononcube> You can dump all your generated code into a file and use EVALFILE. (Similar to what @librasteve  suggested above.)

[17:44] <mcmillhj> DarthGandalf `.say for OUR::.keys;`

[17:45] <DarthGandalf> oh

[17:45] <discord-raku-bot> <librasteve> antononcube: probably not, its just a toy - what do you mean by in session?

[17:58] <discord-raku-bot> <antononcube> I would like to use crag as a function in a Raku session. Say, in a Jupyter noteobook, in order to use crag I have to use an exteranal evaluation cell ("bash"), not a "standard" Raku REPL cell.

[17:59] <discord-raku-bot> <antononcube> @librasteve I still cannot install "Physics::Measure":   zef install 'Physics::Measure:ver<1.0.19>' ===> Searching for: Physics::Measure:ver<1.0.19> ===> Staging Physics::Measure:ver<1.0.19>:auth<zef:librasteve>:api<1> ===> Staging [OK] for Physics::Measure:ver<1.0.19>:auth<zef:librasteve>:api<1> ===> Testing: Physics::Measure:ver<1.0.19>:auth<zef:librasteve>:api<1> [Physics::Measure] # Failed test

[17:59] <discord-raku-bot> '$fe2.in-km/l' [Physics::Measure] # at t/05-cvt.rakutest line 174 [Physics::Measure] # expected: '10.620186km/l' [Physics::Measure] #      got: '12.754311km/l' [Physics::Measure] # You failed 1 test of 52 ===> Testing [FAIL]: Physics::Measure:ver<1.0.19>:auth<zef:librasteve>:api<1> Aborting due to test failure: Physics::Measure:ver<1.0.19>:auth<zef:librasteve>:api<1> (use --force-test to override) 

[18:00] <discord-raku-bot> <antononcube> But from your explanation, it seems that using --force-test is just fine.

[18:00] <discord-raku-bot> <librasteve> yeah just do that for now ...

[18:11] <discord-raku-bot> <librasteve> hopefully 1.0.20 has fixed (sorry I its a pita to change the locale on my laptop)

[18:23] <discord-raku-bot> <librasteve>  use Physics::Unit; use Physics::Constants; use Physics::Navigation; use Physics::Measure :ALL; use Slang::Roman; use Chemistry::Stoichiometry; 

[18:23] <discord-raku-bot> <librasteve> antononcube: ^^ just do this and then all the App:Crag goodies are right there in the cell

[18:24] <discord-raku-bot> <Nahita> m: sub EEVAL($code) {     state $context = ::;     state $ctx-str = '$context = ::;';     ($ctx-str ~ $code).EVAL: :$context; }  'sub g { say "from g"; 72  }'.&EEVAL; 'sub f { say "from f"; g() }'.&EEVAL; 'say f()'.&EEVAL 

[18:24] <discord-raku-bot> <Raku eval>  from f from g 72 

[18:24] <discord-raku-bot> <Nahita> EVAL has a context parameter

[18:27] <discord-raku-bot> <antononcube> Yes, but it is not explained or exemplified.

[18:29] <discord-raku-bot> <Nahita> we prefix each code fragment with $context = ::; to keep installing inner lexical scopes because otherwise a lexpad is immutable once constructed as said, and :: is a short way of writing PseudoStash.new which can behave like (pseudo) a context for EVAL

[20:16] *** mcmillhj left
[22:51] <discord-raku-bot> <nhail>  my $monitorsProc = run <xrandr --listactivemonitors>, :out; my $rawMonitors = $monitorsProc.out.slurp: :close;  is there a better way to do this?

[22:51] <discord-raku-bot> <nhail> this works perfectly but idk if there's something better

[22:52] <discord-raku-bot> <nemokosch> Have you thought of using qx?

[22:52] <discord-raku-bot> <nemokosch> The shell quoting structure

[22:52] <discord-raku-bot> <nemokosch> It's like backticks in shell

[22:53] <discord-raku-bot> <nhail> I'm not familiar

[22:54] <discord-raku-bot> <nemokosch> With what?

[23:28] <discord-raku-bot> <nhail> With the qx you mentioned

[23:29] <discord-raku-bot> <nhail> I know backticks in JS, and in markdown

[23:33] <discord-raku-bot> <nemokosch> You can look it up in the docs

