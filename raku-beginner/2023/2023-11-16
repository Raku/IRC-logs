[00:11] *** ab5tract left
[00:11] *** ab5tract joined
[02:45] *** hythm joined
[03:00] *** hythm left
[03:30] *** hythm joined
[05:47] *** hythm left
[09:00] *** dakkar joined
[09:14] <discord-raku-bot> <knorrfg> Hey, I'm having a problem: raku sub start_something() {   indir "/", {      my $proc = Proc::Async.new: <sleep 10000000>;      $proc.stdout.tap: {};     $proc.stderr.tap: {};     $proc.start;     sub { $proc.kill(); }   } }  sub MAIN() {   my &kill_fn = start_something();   LEAVE { &kill_fn(); }   sleep 5; } 

[09:14] <discord-raku-bot> <knorrfg> running this produces:   $ raku rakuproblem.raku No such method 'CALL-ME' for invocant of type 'Callable'   in sub MAIN at rakuproblem.raku line 13   in block <unit> at rakuproblem.raku line 1 

[09:14] <discord-raku-bot> <knorrfg> and I really don't understand why

[11:20] *** Tirifto left
[11:21] *** Tirifto joined
[14:26] <discord-raku-bot> <antononcube> Where I can find an example of a proper implementation of the gist method for a class? My naive attempts, e.g. method gist(-->Str) { self.Hash.Str; }  lead to hanging during assigments and not being able to invoke .WHAT of the corresponding objects.

[14:30] <lizmat> antononcube  that example feels... weird?

[14:30] <discord-raku-bot> <nemokosch> perhaps you want to set a different gist for the type object?

[14:30] <lizmat> the only thing a .gist method is supposed to do, is to create a string representation of the invocant

[14:31] <lizmat> if you make it a multi gist(class:D:)

[14:31] <lizmat> then the type object case will be handled for you

[14:32] <discord-raku-bot> <nemokosch> you'll have to type out multi method in this case, or else you fall back to multi sub

[14:32] <discord-raku-bot> <antononcube> @lizmat Ok. I will try that.

[14:32] <lizmat> nemokosch good catch, I meant multi method indeed

[14:33] <discord-raku-bot> <antononcube> Thank you both!

[15:08] <discord-raku-bot> <librasteve> KnorrFG: after some changing around with your code, I got a different error Type check failed in binding to parameter '&emit'; expected Callable but got Hash ({})

[15:08] <discord-raku-bot> <librasteve> to fix this you need the empty Callables for .tap to be like this:     $proc.stdout.tap: {;};     $proc.stderr.tap: {;};

[15:09] <discord-raku-bot> <librasteve> the semi colon is needed in the case of an do nothing Callable otherwise the compiler thinhs this is a literal empty hash (https://docs.raku.org/type/Callable)

[15:10] <discord-raku-bot> <librasteve> or I think it is OK to omit the empty Callable like this:     $proc.stdout.tap;     $proc.stderr.tap;

[15:14] <discord-raku-bot> <librasteve> yeah the docs show that you will get an empty Callable set as default, in that case it is spelled a bit different to {;}  method tap(Supply:D: &emit = -> $ { }, ...)

[15:15] <discord-raku-bot> <nemokosch> it's an explicitly one-argument empty Block

[15:59] <discord-raku-bot> <drudgesentinel> Hey all- I'm trying to get my comments on MAIN arguments to show, and want to know if I'm doing it wrong. Given this very simple program, I'd expect 'thing to print` to show when this is called without an argument(I'm on v6.d):   ¬ª cat test.raku              drudge@fedora  sub MAIN(     Str $message, #=thing to print ) {     say $message; }  Based on the CLI interface docs I would expect this to print

[15:59] <discord-raku-bot> the comment   ¬ª raku test.raku              Usage:   test.raku <message> 

[16:07] <lizmat> sub MAIN(Str $message) { #=thing to print

[16:07] <lizmat>     say $message;

[16:07] <lizmat> }

[16:07] <lizmat> note that #=  indicates a comment, ad as such should be "outside" code

[16:08] <lizmat> drudgesentinel ^^

[16:08] <lizmat> hope this makes sense

[16:20] <discord-raku-bot> <nemokosch> I think it can actually work - when there is a space after

[16:20] <discord-raku-bot> <nemokosch> I've used that stuff a lot

[16:20] <discord-raku-bot> <librasteve> ^^ that

[16:20] <discord-raku-bot> <librasteve> the docs say # inside "frobnicate.raku"  sub MAIN(   Str   $file where *.IO.f = 'file.dat',  #= an existing file to frobnicate    Int  :$length = 24,                     #= length needed for frobnication    Bool :$verbose,                         #= required verbosity  ) {     say $length if $length.defined;     say $file   if $file.defined;     say 'Verbosity ', ($verbose ?? 'on' !! 'off'); }

[16:21] <discord-raku-bot> <librasteve> (and it works providing you have the space after #=

[16:21] <discord-raku-bot> <librasteve> )

[16:21] <discord-raku-bot> <librasteve> https://docs.raku.org/routine/MAIN

[16:22] <discord-raku-bot> <nemokosch> I don't think I have actual scripts to show now because they belong to my now-previous workplace

[16:22] <discord-raku-bot> <nemokosch> but it worked pretty well

[16:24] <discord-raku-bot> <nemokosch> https://youtu.be/gJKN9nVHe6w?t=394

[16:24] <discord-raku-bot> <nemokosch> some snippets were included in the presentation üòÑ

[16:24] <discord-raku-bot> <nemokosch> these definitely worked

[17:45] *** dakkar left
[18:10] *** hythm joined
[18:17] <discord-raku-bot> <.vushu> <ab5tract> you were right that I can use int32 is rw, which will simplify things üôÇ

[18:17] <ab5tract> \o/

[18:27] <discord-raku-bot> <.vushu> got way cleaner   my int32 $count = 0; my $text = "Ab5tract"; my int32 $point = load-codepoints($text, $count); say $count; # show 8   my $snow-a = load-font-ex("resources/DotGothic16-Regular.ttf", 48, $point, $count); 

[18:29] <ab5tract> great! I‚Äôll take a look at it now that I‚Äôve finished Tetris: https://gist.github.com/ab5tract/d71b8e2f449a27ba2b709202ac08cc4c

[18:46] <discord-raku-bot> <.vushu> damn thats cool üòÜ

[18:47] <ab5tract> Thanks :D

[19:19] <discord-raku-bot> <librasteve> omg - tetris in 228 lines (vs. 7432 for the original - that asm for you)

[19:22] <ab5tract> Nice to know the original lines, I was pretty happy to land at 228. It could get golfed of course, but I want it to be a reference example.

[19:23] <discord-raku-bot> <librasteve> well i only counted the main.asm https://github.com/CelestialAmber/TetrisNESDisasm

[19:27] *** hythm left
[19:46] <ab5tract> fair enough, we aren‚Äôt counting Raylib::Bindings or raylib :)

[19:50] <ab5tract> I followed a tutorial for this, by the way. There are a few differences but mostly the line count is just a result of writing Raku instead of C++ ‚Äî https://www.youtube.com/watch?v=wVYKG_ch4yM

[20:03] <discord-raku-bot> <.vushu> I'm a bit rusty at tetris :d

[20:03] <discord-raku-bot> <.vushu> https://cdn.discordapp.com/attachments/768511641758466088/1174801966061342801/image.png?ex=6568ea97&is=65567597&hm=d1a77ab605f17ddd6e0b8923ec207e377c736a45a7272fae16bfb0b5c9ff6202&

[20:05] <discord-raku-bot> <.vushu> btw <ab5tract> here is raygui for raku if you will like to try https://github.com/vushu/raygui-raku

[20:26] *** destroycomputers left
[20:28] *** destroycomputers joined
[20:35] <ab5tract> .vushu: awesome! I will definitely be exploring this

[21:02] <discord-raku-bot> <scullucs> Speaking of Tetris, how do you like this one? (watch till the end, so to speak) https://twitter.com/jagarikin/status/1457520425458565125?s=20&t=q5rfklP1qHDtcJyyZcxfgA

[21:05] *** thowe left
[21:05] *** thowe joined
[21:06] <discord-raku-bot> <.vushu> that is nauseating üòµ‚Äçüí´

[21:07] <discord-raku-bot> <scullucs> The colors are annoying, but did you get the point?

[21:09] <ab5tract> Its a weird illusion, for sure

[21:11] <ab5tract> .vushu: I needed these changes to make `zef install .` work for raygui-raku

[21:11] <ab5tract> https://www.irccloud.com/pastebin/CAnc1YoO

[21:14] <discord-raku-bot> <.vushu> cool thanks I don‚Äôt have a mac to test on, will fix it üôÇ

[21:35] <ab5tract> Have you had any luck with getting the audio streams working? It might be worth asking on stack overflow, some people answer there who don‚Äôt hang out here

[21:55] <discord-raku-bot> <.vushu> no I haven‚Äôt look more into it, for sure I will try to ask SO for help üôÇ

