[00:26] <discord-raku-bot> <:(**@rest, *%rest)> and i got the answer right in the docs lol

[00:26] <discord-raku-bot> <:(**@rest, *%rest)> https://cdn.discordapp.com/attachments/768511641758466088/1069775526752944138/Screenshot_20230131-072535_Opera.jpg

[00:28] <discord-raku-bot> <Nemokosch> how did you get this idea, though? because you must know something that I don't

[00:35] <discord-raku-bot> <:(**@rest, *%rest)> idk i just searched for Signature to see anything i missed

[00:35] <discord-raku-bot> <Nemokosch> what I mean is that you somehow got the right idea

[00:35] <discord-raku-bot> <Nemokosch> that seemed kind of absurd to me

[00:36] <discord-raku-bot> <Nemokosch> so there must be something that clicked for you that I'm missing

[00:36] <discord-raku-bot> <:(**@rest, *%rest)> right idea of what?

[00:37] <discord-raku-bot> <Nemokosch> annotating signatures on a callback ü•∫

[00:37] <discord-raku-bot> <:(**@rest, *%rest)> i just know typescript

[00:38] <discord-raku-bot> <Nemokosch> apparently :() can be used for Signatures in general

[00:39] <discord-raku-bot> <:(**@rest, *%rest)> yeah

[00:39] <discord-raku-bot> <Nemokosch> | for captures, : for signatures

[00:39] <discord-raku-bot> <:(**@rest, *%rest)> \

[00:39] <discord-raku-bot> <Nemokosch> depends

[00:40] <discord-raku-bot> <Nemokosch> a capture inside a signature is a |var üòÑ

[00:42] <discord-raku-bot> <Nemokosch> I happen to know a relevant issue that may be solveable with the right understanding

[00:42] <discord-raku-bot> <Nemokosch> say, your data type is a two-element List with two pairs as the two elements

[00:43] <discord-raku-bot> <Nemokosch> how do you write a signature for that, and how can you invoke it?

[00:44] <discord-raku-bot> <:(**@rest, *%rest)> like so ((a => 1), (b => 2)) and you want to find a way to destructure it?

[00:46] <discord-raku-bot> <:(**@rest, *%rest)> m: my (**(:@key, :@value)) =   a => 1, b=> 2;  say @key; say @value; 

[00:46] <discord-raku-bot> <:(**@rest, *%rest)> what

[00:48] <discord-raku-bot> <Nemokosch> in particular, it would be good to be able to pass these pair duplets to a function with a proper signature

[00:52] <discord-raku-bot> <:(**@rest, *%rest)> m: my @(:@key, :@value) =   a => 1, b=> 2;  say @key; say @value; 

[00:58] <discord-raku-bot> <Nemokosch> hm, that's not what I meant

[00:58] <discord-raku-bot> <Nemokosch> for that, something like

[00:58] <discord-raku-bot> <Nemokosch> m: my ($pair1, $pair2) = a => 1, b => 2; dd $pair1, $pair2;

[00:58] <discord-raku-bot> <Nemokosch> should work?

[00:59] <discord-raku-bot> <Nemokosch> seems like that

[00:59] <discord-raku-bot> <Nemokosch> if one wants key-key, value-value, idk if there is a straightforward way

[01:08] <discord-raku-bot> <Nemokosch> however, I want something like

[01:09] <discord-raku-bot> <Nemokosch> m: sub test((Pair $p1, Pair $p2)) { dd $p1, $p2; }  test (a => 1, b => 2); #damn this is gonna work

[01:09] <discord-raku-bot> <Nemokosch> no, it actually didn't work

[01:09] <discord-raku-bot> <Nemokosch> I could show what I wanted

[01:11] <discord-raku-bot> <:(**@rest, *%rest)> how do i match an unbound repetition in regex

[01:11] <discord-raku-bot> <:(**@rest, *%rest)> smth like {2,} in perl regex

[01:14] <discord-raku-bot> <:(**@rest, *%rest)> **2..* amirite

[01:14] <discord-raku-bot> <Nemokosch> yep

[01:15] <discord-raku-bot> <Nemokosch> so yeah this would be good to test out, not even sure the problem is with the capture or the signature

[01:15] <discord-raku-bot> <:(**@rest, *%rest)> m: sub test((Pair $p1, Pair $p2)) { dd $p1, $p2; }  test((a => 1, b => 2)); #damn this is gonna work

[01:16] <discord-raku-bot> <:(**@rest, *%rest)> hmm

[01:16] <discord-raku-bot> <Nemokosch> the symptom is understandable: it took the pairs as named args

[01:16] <discord-raku-bot> <:(**@rest, *%rest)> m: sub test((Pair $p1, Pair $p2)) { dd $p1, $p2; }  test([a => 1, b => 2]); #damn this is gonna work

[01:17] <discord-raku-bot> <:(**@rest, *%rest)> it is already parenthesized how can it possibly confuse

[01:17] <discord-raku-bot> <Nemokosch> because of the subsignature I think

[01:18] <discord-raku-bot> <Nemokosch> I imagine that it somehow takes the List(/Array) and slips it, then compares it to the (sub)signature

[01:19] <discord-raku-bot> <Nemokosch> so it ends up with \(a => 1, b => 2) being checked against :(Pair $p1, Pair $p2)

[01:20] <discord-raku-bot> <Nemokosch> I edited the capture because here I think the representation (at least in the output direction) also hints whether it's taken as named or positional

[01:21] <discord-raku-bot> <Nemokosch> although it could be that I edited the wrong direction üòÜ but here I think there is a difference between the two presentations

[01:42] *** raschip joined
[02:51] *** raschip left
[03:52] *** MasterDuke joined
[04:36] <discord-raku-bot> <stevied> anyway to do a synonym for an attribute?

[05:24] <discord-raku-bot> <:(**@rest, *%rest)> synonym?

[05:24] <discord-raku-bot> <:(**@rest, *%rest)> property

[05:29] <discord-raku-bot> <stevied> alias

[05:29] <discord-raku-bot> <stevied> doesn't look like there's a way. I just used the constructor signature to do it

[06:13] *** deadmarshal_ left
[06:13] <discord-raku-bot> <:(**@rest, *%rest)> alias for an attribute?  has $!attr; method !alias { $!attr } i don't know why you want an alias for an attribute

[06:16] <discord-raku-bot> <stevied> Just curious to see if it could be done. Looks like that might work.

[06:18] <discord-raku-bot> <stevied> Will have to look at in the morning. I was thinking how you might handle the case that would allow an attribute be called either ‚Äúcolor‚Äù or ‚Äúcolour‚Äù

[06:27] *** deadmarshal_ joined
[07:16] <discord-raku-bot> <:(**@rest, *%rest)> pick one of them and use it  for the entire codebase for consistency i would choose color to bow down to murica

[07:45] <discord-raku-bot> <stevied> This isn‚Äôt real code. I‚Äôm just doing experiments to explore options.

[08:14] <discord-raku-bot> <:(**@rest, *%rest)> i think attributes can be aliased if they are rw because then the variable will be a reference

[08:17] <discord-raku-bot> <:(**@rest, *%rest)> m: class A {   has $.x is rw;   has $.y is rw = $!x; }  my $a = A.new(x => 2); $a.y = 3; say $a.x; 

[08:17] <discord-raku-bot> <:(**@rest, *%rest)> oh that doesn't work smh

[08:17] <discord-raku-bot> <:(**@rest, *%rest)> m: class A {   has $.x is rw;   has $.y is rw = $!x; }  my $a = A.new(x => 2); $a.x = 3; say $a.y; 

[08:23] *** snonux joined
[08:24] *** snonux_ joined
[08:34] <discord-raku-bot> <Nemokosch> Can it be bound maybe?

[08:55] *** p6steve left
[09:00] <discord-raku-bot> <Nemokosch> hm, not sure, or at least not the usual way perhaps. Anyway, worth checking:

[09:01] <discord-raku-bot> <Nemokosch> m:  class A {   has $.x is rw;   has $.y is rw := $!x; }  my $a = A.new(x => 2); $a.x = 3; say $a.y; 

[09:03] <discord-raku-bot> <Nemokosch> AttrX::Mooish can get you aliases for sure: https://raku.land/zef:vrurg/AttrX::Mooish

[09:06] *** snonux left
[09:07] *** snonux_ left
[09:12] <discord-raku-bot> <Nemokosch> but yes from what I see at the time of TWEAK you could bind them together

[09:12] <discord-raku-bot> <Nemokosch> so it is possible natively but I'd definitely rather trust Vadim that he actually got it right

[09:12] *** dakkar joined
[09:40] *** NemokoschKiwi joined
[09:46] *** NemokoschKiwi left
[11:06] *** raschip joined
[11:36] <discord-raku-bot> <Nahita> m: sub f(Int() $a) { "ok" }  say f 3; say f "no"; 

[11:37] <discord-raku-bot> <Nahita> so it fails but since i didn't use it, all fine?

[11:37] <discord-raku-bot> <Nahita> interesting...

[11:38] <discord-raku-bot> <Nahita> m: sub f(Int $a) { "ok" }  say f 3; say f "no"; 

[11:38] <discord-raku-bot> <Nahita> ok

[11:48] <discord-raku-bot> <Nemokosch> hmmm

[11:49] <discord-raku-bot> <Nemokosch> I wonder if this is a spesh thing or something

[11:49] <discord-raku-bot> <Nemokosch> could be that $a was dropped altogether?

[11:51] <discord-raku-bot> <Nemokosch> welp, no matter what spesh flags I tried to set, the behavior is the same...

[11:58] <discord-raku-bot> <Nemokosch> hm, so it seems that $a itself is a Failure in this case

[12:11] <discord-raku-bot> <Zephyr> ?ping

[12:11] <discord-raku-bot> <Dyno> Pong!

[12:11] <discord-raku-bot> <:(**@rest, *%rest)> what does ! mean  multi sub trait_mod:<is>(Routine:D $r, :$default!) 

[12:13] <discord-raku-bot> <Nahita> you must supply this!

[12:13] <discord-raku-bot> <Nahita> get it?

[12:13] <lizmat> it adds an "is default" trait to routines

[12:14] <discord-raku-bot> <Nahita> i think they asked about exclamation mark there

[12:14] <discord-raku-bot> <Nahita> and i made a terrible joke

[12:14] <discord-raku-bot> <Nahita> not even a joke

[12:14] <lizmat> ah, it makes the named argument mandatory

[12:14] <discord-raku-bot> <Nahita> BTW is that cat yours? it's super super cute

[12:14] <discord-raku-bot> <:(**@rest, *%rest)> ah means its required

[12:15] <discord-raku-bot> <:(**@rest, *%rest)> no its from the internet

[12:15] <lizmat> yeah, otherwise the dispatch to it would be ambiguous

[12:15] <lizmat> as named args are by default optional

[12:15] <discord-raku-bot> <:(**@rest, *%rest)> they are optional by default unlike pos args hmm

[12:16] <discord-raku-bot> <Nahita> yeah, you make positionals optional with "?"

[12:16] <discord-raku-bot> <Nemokosch> yes.. remember? they can go straight into *%_

[12:17] <lizmat> or you can add a value to be used in absence of specification

[12:17] <discord-raku-bot> <Nemokosch> hm, I mean... perhaps one doesn't follow the other

[12:17] <discord-raku-bot> <Nemokosch> from the other. but the principle is similar

[12:17] <lizmat> m: sub foo($a = 42) { say $a }; foo(666); foo

[12:17] <camelia> rakudo-moar b21cd61c0: OUTPUT: ¬´666‚ê§42‚ê§¬ª

[12:18] <discord-raku-bot> <:(**@rest, *%rest)> m: sub opt-named(:$x) {   say $x }  opt-named; 

[12:20] <discord-raku-bot> <:(**@rest, *%rest)> is that a good idea is it to save you from specifying the default value or using ?

[14:53] <discord-raku-bot> <Zephyr> m: say 'test';

[14:53] <discord-raku-bot> <Raku eval> ansi test  

[14:53] <discord-raku-bot> <Zephyr> welp, the ansi

[14:53] <discord-raku-bot> <Zephyr> lemme fix

[14:54] <discord-raku-bot> <Zephyr> m: say 'test';

[14:54] <discord-raku-bot> <Raku eval>  test  

[14:59] *** ab5tract joined
[15:12] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/01/31/2023-05-rb-awarded/

[15:59] <discord-raku-bot> <Nahita> m: multi f(str $s) { "ok" } say f "yes" 

[15:59] <discord-raku-bot> <Raku eval>  ok  

[16:00] <discord-raku-bot> <Nahita> m: multi f(str $s, str $t) { "ok" } say f "yes", "no" 

[16:00] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling main.raku Calling f(Str, Str) will never work with any of these multi signatures:     (str $s, str $t) at main.raku:2 ------> say ‚èèf "yes", "no"  

[16:00] <discord-raku-bot> <Nahita> uh, is this expected?

[16:00] <discord-raku-bot> <Nahita> [first call says "ok", second one is signature mismatch compile time error]

[16:16] *** dakkar left
[16:18] *** dakkar joined
[16:25] *** snonux joined
[16:26] *** snonux_ joined
[16:52] *** snonux left
[16:52] *** snonux_ left
[18:04] *** tg57 joined
[18:30] *** raschip left
[18:33] *** dakkar left
[18:36] <discord-raku-bot> <nHail> How do I make packages work? I found this: https://github.com/azawawi/raku-ncurses, ran zef install NCurses, but when trying to use it in my project it errors out with Undeclared routine: initscr used on line 8

[18:36] <discord-raku-bot> <nHail> I think it's a bit suspicious that the install process didn't create any files in my working directory

[18:38] <discord-raku-bot> <Nemokosch> you would do use NCurses; in your code

[18:39] <discord-raku-bot> <Nemokosch> that will pull all things marked for exporting straight into your local(? iirc) scope

[18:39] <discord-raku-bot> <Nemokosch> including initscr

[18:39] <discord-raku-bot> <nHail> Well, now I'm even more confused. I copied a different example script from the same repo and that one doesn't error.

[18:40] <discord-raku-bot> <Nemokosch> as much as I can see, this is a NativeCall module so fingers crossed for you

[18:40] <discord-raku-bot> <Nemokosch> can you tell which one didn't work?

[18:40] <discord-raku-bot> <nHail> Alright, that's interesting. Most of my past work is in JS, you're saying I don't need to handle a node-modules directory now?

[18:41] <discord-raku-bot> <Nemokosch> the modules are installed "globally", by default at least

[18:42] <discord-raku-bot> <nHail> PEBKAC. I forgot a ; on the use

[18:43] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1070051609628905604/image.png

[18:43] <discord-raku-bot> <Nemokosch> from the readme of the zef repo

[18:43] <discord-raku-bot> <nHail> Interesting

[18:44] <discord-raku-bot> <nHail> For reference I'm porting an old nodeJS project into raku for practice, I guess if I publish this I'll just mention the dependencies in the install instructions

[18:46] <discord-raku-bot> <Nemokosch> but then the module itself works, right?

[18:46] <discord-raku-bot> <Nemokosch> always a bit shivery with native dependencies

[18:46] <discord-raku-bot> <nHail> It seems to.

[18:46] <discord-raku-bot> <nHail> For now :)

[18:46] <discord-raku-bot> <Nemokosch> you know, like Node and gyp

[18:46] <discord-raku-bot> <Nemokosch> those modules love to break...

[18:47] <discord-raku-bot> <Nemokosch> or well, just not build in the first place üòÑ

[18:48] <discord-raku-bot> <Nemokosch> if it does work, however, it could actually prove useful for me as well, termios is troublesome on Windows

[18:49] *** snonux joined
[18:49] *** snonux_ joined
[18:50] <discord-raku-bot> <nHail> It works on my computer, I'm gonna hold off on messing with it until I ever decide to publish

[19:09] *** NemokoschKiwi joined
[19:17] <discord-raku-bot> <gfldex> @Nahita I'm investigating your str vs. Str conundrum.

[21:03] <discord-raku-bot> <Nahita> thanks

[21:04] <discord-raku-bot> <Nemokosch> so far it seems like

[21:04] <discord-raku-bot> <Nemokosch> 1. multis distinguish str and Str

[21:04] <discord-raku-bot> <Nemokosch> 2. only subs allow Strs as str

[21:05] <discord-raku-bot> <Nemokosch> 3. and this is beyond comprehension, really, and sometimes it even fails!

[21:05] <discord-raku-bot> <Nemokosch> seems like that should fail but for certain function bodies, it succeeds

[21:06] <discord-raku-bot> <Nemokosch> say $s would make the dispatch itself fail

[21:06] <discord-raku-bot> <Nemokosch> on the other hand, $s.say would run just fine

[21:28] *** NemokoschKiwi left
[21:40] *** snonux_ left
[21:40] *** snonux left
[21:41] *** snonux joined
[21:42] *** snonux_ joined
[21:47] <discord-raku-bot> <nHail> Hi, I'm trying to understand raku's concurrency, I was wondering if anyone could give an example of a program that just prints <key> was pressed whenever you press a key?

[21:55] <discord-raku-bot> <nHail> And, one that does this without freezing the main thread to wait for a keypress (ie. not a while loop)?

[21:56] <discord-raku-bot> <Nemokosch> supply-react-tap kind of stuff

[21:56] <discord-raku-bot> <nHail> Yeah

[21:56] <discord-raku-bot> <Nemokosch> only used it like, once in a year and a half üòÖ

[22:10] <discord-raku-bot> <nHail> > Using getc to get a single keypress from a terminal will only work properly if you've set the terminal to "unbuffered". Otherwise the terminal will wait for the return key to be struck or the buffer to be filled up before perl6 gets even a single byte of data.

[22:10] <discord-raku-bot> <nHail> How does one un-buffer a terminal?

[22:12] *** NemokoschKiwi joined
[22:13] <discord-raku-bot> <stevied> I often hear people say "suck and such" programming language is "fun." What do they mean by that that? That they can do cool stuff in a  short period of time and feel like wizards?

[22:13] <discord-raku-bot> <stevied> That it doesn't make the feel painfully dumb?

[22:14] <discord-raku-bot> <stevied> Or that the language is not tedious to write? All of the above?

[22:15] *** tg57 left
[22:15] <discord-raku-bot> <Nemokosch> there are only a handful of people I can think of who dealt with terminal in a low-level way

[22:15] <ab5tract> nHail: a super simple example: https://gist.github.com/ab5tract/a3f47f6122807adbac3bf9487bfc6cd8

[22:16] *** NemokoschKiwi left
[22:19] <discord-raku-bot> <lakmatiol> I just used ncurses to do it, but you can also do it with certain shell commands, stty on linux IIRC.

[22:20] <ab5tract> nHail: You might want to look into Terminal::Print. We have a way of reading raw input. (Not 100% sure what your use case is).

[22:21] <ab5tract> https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/RawInput.pm6

[22:27] *** ab5tract left
[22:29] <discord-raku-bot> <nHail> I am using ncurses for visuals

[22:29] <discord-raku-bot> <nHail> It looks like the way in there is to use getch, but it seems as though you have to wait for it to return

[22:30] <discord-raku-bot> <nHail> Use case: writing a TUI mp3 player.

[22:30] <discord-raku-bot> <nHail> I want keyboard commands ofc

[22:31] <discord-raku-bot> <nHail> But also a progress bar for the currently playing song, which means no freezing the program to wait for input

[22:33] <discord-raku-bot> <Nemokosch> dream on

[22:33] <discord-raku-bot> <nHail> It looks like terminal::print will do it though

[22:33] <discord-raku-bot> <nHail> thanks ab5tract

[22:36] *** NemokoschKiwi joined
[22:36] *** NemokoschKiwi left
[23:46] *** tg57 joined
[23:49] *** tg57 left
