[00:06] *** swaggboi left
[00:10] *** Manifest0 left
[00:18] *** swaggboi joined
[03:51] *** hexology left
[03:52] *** hexology joined
[06:08] *** kjp left
[06:11] *** kjp joined
[08:04] *** Manifest0 joined
[11:20] *** habere-et-disper joined
[11:46] <habere-et-disper> Is pi or e evil ? (See recent Numberphile)

[11:46] <habere-et-disper> I tried `so 666 | 668 == first * >= 666, [\+] e.comb.grep( *.Int )` but we need more digits for e, so I went with:

[11:46] <habere-et-disper> m: so 666 | 668 == first * >= 666, [\+] ( { FatRat.new: 1, [*] 1..$++ } ... * ).head( 200 ).sum.comb.grep( *.Int )

[11:46] <camelia> rakudo-moar 549f03dbf: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "so " in expression "so 666 | 668 ==" in sink context (line 1)‚ê§¬ª

[11:46] <habere-et-disper> Any other approaches / ideas ?

[11:47] <discord-raku-bot> <nemokosch> markdown ate up a good lot of characters from that code üò¶

[11:49] <habere-et-disper> m: so any( 666, 668 ) == first * >= 666, [\+] ( { FatRat.new: 1, [*] 1..$++ } ... * ).head( 200 ).sum.comb.grep( *.Int )

[11:49] <camelia> rakudo-moar 549f03dbf: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "so " in expression "so any( 666, 668 ) ==" in sink context (line 1)‚ê§¬ª

[11:50] <habere-et-disper> REPL is happy. Not sure what md is eating as it seems to display okay here.

[11:51] <discord-raku-bot> <nemokosch> could you add backticks for code you post here?

[11:51] <habere-et-disper> With or without "m: " ?

[11:51] <discord-raku-bot> <nemokosch> https://postimg.cc/t1j0w1p7

[11:52] <discord-raku-bot> <nemokosch> that part doesn't matter for me; if the bot is fine with it then preferably both

[11:52] <habere-et-disper> m: `so 666 | 668 == first * >= 666, [\+] ( { FatRat.new: 1, [*] 1..$++ } ... * ).head( 200 ).sum.comb.grep( *.Int )`

[11:52] <camelia> rakudo-moar 549f03dbf: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Bogus statement‚ê§at <tmp>:1‚ê§------> <BOL>‚èè`so 666 | 668 == first * >= 666, [\+] ( ‚ê§    expecting any of:‚ê§        prefix‚ê§        statement list‚ê§        term‚ê§¬ª

[11:53] <discord-raku-bot> <nemokosch> heh

[11:53] <habere-et-disper> `m: so 666 | 668 == first * >= 666, [\+] ( { FatRat.new: 1, [*] 1..$++ } ... * ).head( 200 ).sum.comb.grep( *.Int )`

[11:54] <discord-raku-bot> <nemokosch> but it's readable at least üòÑ

[11:55] <discord-raku-bot> <nemokosch> Frankly, it would be quite a puzzle to ask somebody "what does this code achieve"

[11:57] <habere-et-disper> I agree. This is simpler but wrong `so 666 | 668 == first * >= 666, [\+] e.comb.grep( *.Int )`

[11:58] <discord-raku-bot> <nemokosch> why is the grep(*.Int) necessary?

[11:59] <habere-et-disper> To skip the decimal point ?

[12:00] <habere-et-disper> m: [\+] e.comb

[12:00] <camelia> rakudo-moar 549f03dbf: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of [\+] in sink context‚ê§    at <tmp>:1‚ê§    ------> <BOL>‚èè[\+] e.comb‚ê§Cannot convert string to number: radix point must be followed by one or more valid digits in '.‚èè' (indicated by ‚èè)‚ê§ ‚Ä¶¬ª

[12:00] <habere-et-disper> m: [\\+] e.comb

[12:00] <camelia> rakudo-moar 549f03dbf: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Prefix + requires an argument, but no valid term found.‚ê§Did you mean + to be an opening bracket for a declarator block?‚ê§at <tmp>:1‚ê§------> [\\+‚èè] e.comb‚ê§    expecting any of:‚ê§        ‚Ä¶¬ª

[12:00] <discord-raku-bot> <nemokosch> not sure if I like the overall "comb and sanitize" approach but I'm pretty sure comb can take a regex, that's already somewhat better

[12:37] *** ab5tract_ joined
[13:30] *** NemokoschKiwi joined
[13:36] *** habere-et-disper left
[14:09] *** NemokoschKiwi left
[17:19] <discord-raku-bot> <rcmlz> I am playing around with roles. Is it possible to extend build in types? Something like this:   role custom-sort {     method quicksort(@a) {         return @a if @a.elems < 2;         my $pivot = @a.pick;         my %prt{Order} is default([]) = @a.classify: * cmp $pivot;         |samewith(%prt{Less}), |%prt{Same}, |samewith(%prt{More})     } }  my @test = 1,2,4,6,3; @test does custom-sort; say @test.quicksort;

[17:19] <discord-raku-bot>  What should be the signature of method quicksort(@a)to make this work? I was looking into IterationBuffer but did not understand it. Any hints?

[17:22] <discord-raku-bot> <nemokosch> self

[17:53] *** NemokoschKiwi joined
[17:54] *** NemokoschKiwi is now known as Nemokosch

[17:56] *** Nemokosch left
[17:56] *** ab5tract left
[18:05] <discord-raku-bot> <rcmlz> m: role custom-sort {     method quicksort() {         return self if self.elems < 2;         my $pivot = self.pick;         my %prt{Order} is default([]) = self.classify: * cmp $pivot;         |samewith(%prt{Less}), |%prt{Same}, |samewith(%prt{More})     } }  my @test = 1,2,4,6,3; @test does custom-sort;  say @test.quicksort;

[18:05] <discord-raku-bot> <Raku eval>  (1 2 3 4 6) 

[18:05] <discord-raku-bot> <rcmlz> Thank you.

[18:06] <discord-raku-bot> <nemokosch> well, you did the heavy lifting by getting the most out of a semi-joke answer üòÑ

[18:14] <discord-raku-bot> <rcmlz> m: role custom-sort {     method quicksort() {         return self if self.elems < 2;         my $pivot = self.pick;         my %prt{Order} is default([]) = self.classify: * cmp $pivot;         |samewith(%prt{Less}), |%prt{Same}, |samewith(%prt{More})     }     method quicksort-parallel(:$batch) {         return self if self.elems < 2;         my $pivot = self.pick;         my %prt{Order} is default([]) =

[18:14] <discord-raku-bot> self.classify( * cmp $pivot );         my $less = %prt{Less}.elems >= $batch                 ?? start { samewith(%prt{Less}, $batch) }                 !!         samewith(%prt{Less}, $batch);         my $more = samewith(%prt{More}, $batch);         await $less andthen $less = $less.result if $less ~~ Promise;         |$less, |%prt{Same}, |$more;     } }  my @test = 1,2,4,6,3; @test does custom-sort;  say

[18:14] <discord-raku-bot> @test.quicksort-parallel(batch => 1024);

[18:14] <discord-raku-bot> <Raku eval>  Exit code: 1 Too many positionals passed; expected 1 argument but got 2   in method quicksort-parallel at main.raku line 8   in method quicksort-parallel at main.raku line 14   in block <unit> at main.raku line 24  

[18:15] <discord-raku-bot> <rcmlz> I do not fully understand it - when putting another $self into it is also is not working.

[18:20] <discord-raku-bot> <nemokosch> it's the zeroeth argument; the one followed by a colon rather than a comma

[18:21] <discord-raku-bot> <nemokosch> not sure you can do it with samewith though

[18:23] <discord-raku-bot> <nemokosch> %prt{Less} probably doesn't even have this method

[18:24] <discord-raku-bot> <nemokosch> why do you want a method instead of a global sub? The suggestion may depend on the answer

[18:36] <discord-raku-bot> <rcmlz> I thought it is easier for testing. But with recursion + parameter it is defenitely not.

[18:37] <discord-raku-bot> <rcmlz> Maybe if it is done in-place, but with my copy-approach I realize I have to attach the role inside again ...

[18:38] <discord-raku-bot> <rcmlz> thank you for helping me understanding this.

[18:38] <discord-raku-bot> <nemokosch> it's easy to fake a global function as a method, the .& syntax is nice

[18:38] <discord-raku-bot> <nemokosch> it's much harder the other way around

[18:40] <discord-raku-bot> <rcmlz> I can confirm ;-)

[18:44] <discord-raku-bot> <librasteve> rcmlz: try with a colon before the $batch param - :$batch ... that makes the pair batch => $batch

[18:44] <discord-raku-bot> <librasteve> my $less = %prt{Less}.elems >= $batch  13                 ?? start { samewith(%prt{Less}, :$batch) }  14                 !!         samewith(%prt{Less}, :$batch);  15         my $more = samewith(%prt{More}, :$batch); 

[18:53] <discord-raku-bot> <librasteve> haviong said this, I don't think that you are using samewith right ... since this will call again the same method like this "self.quicksort-parallel(XXX, :$batch); and therefore should be used with multi method since this idea is to redispatch the method a different route with the new params... maybe I am missing something, but I do not think that the XXX magically becomes the invocant self object

[23:02] *** habere-et-disper joined
[23:05] <habere-et-disper> Is it expected that `snip` will support chained comparisons ?

[23:05] <habere-et-disper> m: say snip ( * < 6, * <= 8 ), 1..10;

[23:05] <camelia> rakudo-moar 1eaaded1c: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    snip used at line 1. Did you mean 'slip', 'skip'?‚ê§‚ê§¬ª

[23:05] <habere-et-disper> m: use use v6.e.PREVIEW; say snip ( * < 6, * <= 8 ), 1..10;

[23:05] <camelia> rakudo-moar 1eaaded1c: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Could not find use in:‚ê§    /home/camelia/.raku‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/per‚Ä¶¬ª

[23:05] <habere-et-disper> m: use v6.e.PREVIEW; say snip ( * < 6, * <= 8 ), 1..10;

[23:05] <camelia> rakudo-moar 1eaaded1c: OUTPUT: ¬´((1 2 3 4 5) (6 7 8) (9 10))‚ê§¬ª

[23:06] <habere-et-disper> m: use v6.e.PREVIEW; say snip ( 6 < * <= 8 ), 1..10;

[23:06] <camelia> rakudo-moar 1eaaded1c: OUTPUT: ¬´((1) (2 3 4 5 6 7 8 9 10))‚ê§¬ª

[23:09] <discord-raku-bot> <nemokosch> will or will not?

[23:09] <discord-raku-bot> <nemokosch> normally, 6 < * <= 8 should codegen to a working function that checks what you think it should

[23:25] *** habere-et-disper left
