[00:38] *** saint- joined
[00:39] *** saint- left
[00:50] *** discord-raku-bot left
[00:50] *** discord-raku-bot joined
[01:21] *** saint- joined
[01:50] *** discord-raku-bot left
[01:50] *** discord-raku-bot joined
[01:54] *** discord-raku-bot left
[01:55] *** discord-raku-bot joined
[02:50] *** discord-raku-bot left
[02:50] *** discord-raku-bot joined
[03:33] *** rf left
[03:50] *** discord-raku-bot left
[03:50] *** discord-raku-bot joined
[05:50] *** discord-raku-bot left
[05:51] *** discord-raku-bot joined
[06:14] *** Heptite left
[06:50] *** discord-raku-bot left
[06:51] *** discord-raku-bot joined
[07:51] *** discord-raku-bot left
[07:51] *** discord-raku-bot joined
[08:51] *** discord-raku-bot left
[08:51] *** discord-raku-bot joined
[08:55] *** discord-raku-bot left
[08:56] *** discord-raku-bot joined
[09:03] *** samebchase left
[09:51] *** discord-raku-bot left
[09:51] *** discord-raku-bot joined
[12:51] *** discord-raku-bot left
[12:52] *** discord-raku-bot joined
[14:27] *** loken joined
[14:51] *** discord-raku-bot left
[14:52] *** discord-raku-bot joined
[15:18] *** loken left
[15:37] *** Heptite joined
[15:51] *** discord-raku-bot left
[15:52] *** discord-raku-bot joined
[16:00] <discord-raku-bot> <stevied> what response is the scary red messages at https://raku.land/github:labster/File::Directory::Tree trying to elicit?

[16:00] <discord-raku-bot> <stevied> should I be worried about using the module?

[16:01] <discord-raku-bot> <stevied> does this mean the module might be hacked?

[16:03] *** Guest14 joined
[16:04] <Guest14> Hi

[16:05] <discord-raku-bot> <stevied> hi

[16:05] *** Guest14 left
[16:06] *** jgaz joined
[16:17] *** rf joined
[16:18] <rf> How can I restrict a match capture? For example if I want to capture the match between two '/', $my-text ~~ /^ '/'$<m>=[.*]'/' $/, in this case it always keeps the '/' on the end, how can I just match what's between?

[16:20] <rf> m: '/hello-bob/' ~~ /^ '/'$<m>=[.*]'/' $/;

[16:20] <camelia> rakudo-moar 05cfed1b0: ( no output )

[16:20] <discord-raku-bot> <stevied> captures are done with open/close parens

[16:20] <rf> m: '/hello-bob/' ~~ /^ '/'$<m>=([.*])'/' $/;

[16:20] <camelia> rakudo-moar 05cfed1b0: ( no output )

[16:21] <rf> Could you show me an example? :D

[16:21] <discord-raku-bot> <stevied> yeah

[16:21] <discord-raku-bot> <stevied> i forget how to use this bot. hold on.

[16:22] <rf> No problem!

[16:23] <discord-raku-bot> <stevied> m: 'hello-bob' ~~ /^(\w).*/; say $0;

[16:23] <discord-raku-bot> <stevied> here, the first letter is captured into the variable $0

[16:24] <discord-raku-bot> <stevied> m: 'hello-bob' ~~ /^(\w)(\w).*/; say $0; say $1;

[16:25] <discord-raku-bot> <stevied> next set of parens is captured with $1, and so on

[16:25] <rf> m: 'hello-bob' ~~ /^(\w)(\w).*/; say $0; say $1;

[16:25] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´ÔΩ¢hÔΩ£‚ê§ÔΩ¢eÔΩ£‚ê§¬ª

[16:25] <rf> I see, but can I do this named?

[16:25] <discord-raku-bot> <stevied> yes

[16:26] <rf> m: '/hello-bob/' ~~ /^'/'$<m>=(.*)'/'/; say $0; say $1;

[16:26] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´Nil‚ê§Nil‚ê§¬ª

[16:26] <rf> m: '/hello-bob/' ~~ /^ '/' $<m>=(.*) '/' $/; say $0; say $1;

[16:26] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´Nil‚ê§Nil‚ê§¬ª

[16:26] <rf> m: '/hello-bob/' ~~ /^ '/' $<m>=(.*) '/' $/; say $<m>;

[16:26] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´ÔΩ¢hello-bobÔΩ£‚ê§¬ª

[16:26] <rf> Ah

[16:26] <rf> Nice. Thank you!

[16:27] <discord-raku-bot> <stevied> https://docs.raku.org/language/regexes#Named_regex_definition_syntax

[16:27] <discord-raku-bot> <stevied> np

[16:36] <rf> One more little regex thing, '/hello-bob' ~~ /^ '/' $<m>=(.*) '/'? $/

[16:36] <rf> How can I stop it from matching the / in this case, maybe it's there maybe it's not but I don't want to see it.

[16:37] <rf> m: '/hello-bob' ~~ /^ '/' $<m>=(.*) '/'? $/; say $<m>;

[16:37] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´ÔΩ¢hello-bobÔΩ£‚ê§¬ª

[16:37] <rf> m: '/hello-bob/' ~~ /^ '/' $<m>=(.*) '/'? $/ say $<m>;

[16:37] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> /hello-bob/' ~~ /^ '/' $<m>=(.*) '/'? $/‚èè say $<m>;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        s‚Ä¶¬ª

[16:37] <rf> m: '/hello-bob/' ~~ /^ '/' $<m>=(.*) '/'? $/; say $<m>;

[16:37] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´ÔΩ¢hello-bob/ÔΩ£‚ê§¬ª

[16:38] <rf> I tried the m:1st adverb but it still died

[16:38] <discord-raku-bot> <stevied> don't use (.*)

[16:38] <rf> Err, produced the wrong result.

[16:38] <discord-raku-bot> <stevied> you want to use a negation match instead and matching anything that is NOT a /

[16:39] <discord-raku-bot> <stevied> that's done with <-[/]>

[16:39] <discord-raku-bot> <stevied> that's done with `<-[/]>`

[16:40] <rf> m: '/hello-bob/' ~~ /^ '/' $<m>=(.*) <-[/]>? $/; say $<m>;

[16:40] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´ÔΩ¢hello-bob/ÔΩ£‚ê§¬ª

[16:40] <discord-raku-bot> <stevied> m: '/hello-bob/' ~~ /^ '/' $<m>=(<-[/]>) '/'? $/; say $<m>

[16:41] <rf> Ahh, see I tried what I just wrote above last night when trying this but I see now. I need to match anything but the /.

[16:41] <rf> Thanks again :D

[16:41] <discord-raku-bot> <stevied> np

[16:42] <discord-raku-bot> <stevied> i forgot a '+' sign on mine, hold on

[16:42] <discord-raku-bot> <stevied> m: '/hello-bob/' ~~ /^ '/' $<m>=(<-[/]>+) '/'? $/; say $<m>

[16:42] <discord-raku-bot> <stevied> there we go

[16:42] <rf> m: '/hello-bob/' ~~ /^ '/' $<m>=(<-[/]>+) '/'? $/; say $<m>

[16:42] <camelia> rakudo-moar 05cfed1b0: OUTPUT: ¬´ÔΩ¢hello-bobÔΩ£‚ê§¬ª

[16:42] <rf> Yeah, perfect. Thanks a lot!

[16:43] <discord-raku-bot> <stevied> oh, the other option is to make the capture non-greedy with `(.*?)`

[16:44] <discord-raku-bot> <stevied> with non-greedy, it will not suck up everything to the end.

[16:44] <discord-raku-bot> <stevied> I think that would also work in your case

[16:44] <discord-raku-bot> <stevied> m: '/hello-bob/' ~~ /^ '/' $<m>=(.*?) '/'? $/; say $<m>

[16:45] <discord-raku-bot> <stevied> yeah, so that works, too. thought it's probably a little slower

[16:45] <discord-raku-bot> <stevied> yeah, so that works, too. though it's probably a little slower

[17:00] <rf> Cool, I'll test out both

[17:01] <rf> I though the 1st adverb might have done it, but it counted it all as one match too :(

[17:52] *** discord-raku-bot left
[17:52] *** discord-raku-bot joined
[18:20] *** samebchase joined
[18:59] <discord-raku-bot> <JsExplorerNeil> Hi. I was wondering - is Raku ready for production use on jvm, js and moarvm? I just need an awesome scripting language so it doesn't need to be "blazingly fast" üòâ

[19:25] <discord-raku-bot> <Nemokosch> Hello. MoarVM is the "state of art" runtime, JVM might work but doesn't necessarily have advantages and the JS backend is mostly a "proof of concept" at this point, simply because of the lack of resources for implementing it properly.

[20:52] *** discord-raku-bot left
[20:52] *** discord-raku-bot joined
[21:52] *** discord-raku-bot left
[21:52] *** discord-raku-bot joined
[22:26] *** saint- left
[22:41] *** jgaz left
[23:44] *** rf left
[23:52] *** discord-raku-bot left
[23:53] *** discord-raku-bot joined
