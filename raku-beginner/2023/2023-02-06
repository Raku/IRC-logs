[00:16] <deoac> Thanks, I'll give it a shot!

[00:39] *** NemokoschKiwi joined
[00:43] *** NemokoschKiwi left
[00:58] *** Manifest0 left
[01:13] *** deoac left
[01:14] <discord-raku-bot> <el gatito (** advocate)> ik because python doesn't have the idea of a block scope

[01:15] <discord-raku-bot> <el gatito (** advocate)> for raku it is less excusable

[01:17] <discord-raku-bot> <el gatito (** advocate)> given that it has blocks

[01:17] <discord-raku-bot> <el gatito (** advocate)> how is it intended

[01:20] <discord-raku-bot> <Nemokosch> no block scope? lol

[01:20] <discord-raku-bot> <Nemokosch> mfw everything in Python is var, not even a let

[01:22] <discord-raku-bot> <Nemokosch> still, I wonder why it would need an "excuse" that something is placed in the block that contains it

[01:22] <discord-raku-bot> <Nemokosch> rather than the block that is "inside of it". if they have any hierarchy

[01:24] *** ab5tract left
[01:27] <discord-raku-bot> <el gatito (** advocate)> like for, loop-declared variables are temporary variables that are only meant to bd inside their scope

[01:29] <discord-raku-bot> <Nemokosch> there are no for-declared variables

[01:29] <discord-raku-bot> <Nemokosch> correct me if you have ever seen one

[01:29] <discord-raku-bot> <el gatito (** advocate)> sure

[01:29] <discord-raku-bot> <el gatito (** advocate)> still

[01:30] <discord-raku-bot> <el gatito (** advocate)> my point is that loop init variables should only exist inside their scope

[01:30] <discord-raku-bot> <Nemokosch> for the record, I don't know why it is exactly the way it is

[01:30] <discord-raku-bot> <Nemokosch> but I couldn't say it doesn't make sense

[01:30] <discord-raku-bot> <Nemokosch> because it is the less magic way

[01:31] <discord-raku-bot> <Nemokosch> you can parenthesize declarations as much as you wish, that does not create scopes

[01:31] <discord-raku-bot> <Nemokosch> and apparently the same goes for loop

[01:32] <discord-raku-bot> <el gatito (** advocate)> scope not in loop's head == less magic smh

[01:32] <discord-raku-bot> <Nemokosch> what is "loop's head" even

[01:33] <discord-raku-bot> <el gatito (** advocate)> i mean the loop's parameters (my $i = 0; $i < 10; $i++)

[01:33] <discord-raku-bot> <Nemokosch> Why would they be special?

[01:33] <discord-raku-bot> <el gatito (** advocate)> this

[01:34] <discord-raku-bot> <Nemokosch> m: (my $i = 0; $i < 10; $i++)

[01:34] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of "<" in expression "$i < 10" in sink context (line 1)  

[01:34] <discord-raku-bot> <Nemokosch> it's valid Raku

[01:35] <discord-raku-bot> <Nemokosch> I'd say as a play on the "surprisingly consistent" label, this is actually more consistent than surprising

[01:35] <discord-raku-bot> <el gatito (** advocate)> no i mean  loop (my $i = 0; $i < 10; $i++) # <-- this part of the loop statement { } 

[01:35] <discord-raku-bot> <el gatito (** advocate)> not this

[01:36] <discord-raku-bot> <Nemokosch> and in what block does the loop reside?

[01:37] <discord-raku-bot> <el gatito (** advocate)> whatever kind of block it is

[01:40] <discord-raku-bot> <Nemokosch> well, think of it the simplest, purest way

[01:40] <discord-raku-bot> <Nemokosch> loop takes, say, 3 statements of special meaning, and a block

[01:40] <discord-raku-bot> <Nemokosch> why would it try to inject variables declared in those statements, into the block?

[01:40] <discord-raku-bot> <el gatito (** advocate)> i think the solution for now is wrapping in another block 😭

[01:41] <discord-raku-bot> <Nemokosch> yeah, not like you probably shouldn't be using loop˙in the first place 😒

[01:43] <discord-raku-bot> <el gatito (** advocate)> because of C smh most importantly, its because from the perspective of the user, the variable is a loop variable that is discarded after the loop is done

[01:43] <discord-raku-bot> <Nemokosch> only if the user is coming from C, honestly

[01:44] <discord-raku-bot> <Nemokosch> otherwise it's not at all obvious in my opinion that the user would want to discard that variable

[01:47] <discord-raku-bot> <Nemokosch> by the same chance the user is using this quirky iteration structure, they might as well want to rely on the value of the variable when the loop terminated, for example

[01:47] <discord-raku-bot> <Nemokosch> doesn't sound inferior

[01:48] <discord-raku-bot> <Nemokosch> by the way, for the better or worse, it seems to me that NOT making an appeal to the C legacy was almost a design principle of this language

[01:52] <discord-raku-bot> <el gatito (** advocate)> how about making a more "functional" version of loop lmao smth like scheme's do  loop(i => (0, { $_ + 1 }),      -> :$i { $i < 10 },      -> :$i {        #`(do something here)      }) 

[01:53] <discord-raku-bot> <el gatito (** advocate)> yeah it looks kinda complicated tho

[01:53] <discord-raku-bot> <Nemokosch> well, something like this can be defined within the language for sure

[01:53] <discord-raku-bot> <el gatito (** advocate)> but i'd imagine it'll be used for more complicated loop conditions

[01:53] <discord-raku-bot> <Nemokosch> meh, I'm still mourning the first-pass parsing...

[01:54] <discord-raku-bot> <Nemokosch> I mean, I can actually imagine that first-pass parsing can work for Python

[01:54] <discord-raku-bot> <Nemokosch> because Python has a deliberately very simple grammar

[01:54] <discord-raku-bot> <Nemokosch> might even be CFG

[01:54] <discord-raku-bot> <el gatito (** advocate)> with a different name smth like doloop, schemeloop or schemedo

[01:55] <discord-raku-bot> <el gatito (** advocate)> most languages are CFG

[01:55] <discord-raku-bot> <Nemokosch> not quite

[01:55] <discord-raku-bot> <Nemokosch> think of the dangling if's

[01:55] <discord-raku-bot> <Nemokosch> they cannot be clearly parsed without context

[01:55] <discord-raku-bot> <el gatito (** advocate)> python isn't tho it has indentation sensitivity

[01:56] <discord-raku-bot> <Nemokosch> indentation is just white spaces really

[01:56] <discord-raku-bot> <el gatito (** advocate)> python's trademark feature is context-sensitive

[01:56] <discord-raku-bot> <Nemokosch> most lexers discard whitespace, Python's lexer won't

[01:57] <discord-raku-bot> <Nemokosch> but yeah, as we can see, Raku is also whitespace-sensitive

[01:57] <discord-raku-bot> <Nemokosch> because allowing/not allowing whitespace here or there is kinda used for disambiguation

[01:57] <discord-raku-bot> <el gatito (** advocate)> it relies on tracking previous amounts of indentation more complex than raku "not discarding whitespace bcs they matters"

[01:57] <discord-raku-bot> <Nemokosch> m: say &&

[01:58] <discord-raku-bot> <Raku eval>  Exit code: 1 Index out of range. Is: 1, should be in 0..0   in block <unit> at main.raku line 1   

[01:58] <discord-raku-bot> <Nemokosch> oh yeah...

[01:58] <discord-raku-bot> <Nemokosch> m: say &&

[01:58] <discord-raku-bot> <Raku eval>  3  

[01:58] <discord-raku-bot> <Nemokosch> because whitespace is disallowed in front of indexing

[01:59] <discord-raku-bot> <el gatito (** advocate)> even then it is pretty CF at the parser level tho

[01:59] <discord-raku-bot> <Nemokosch> If it was up to me, I wouldn't allow duplicate sigils for a term at least

[02:00] <discord-raku-bot> <Nemokosch> the & variable itself seems kinda useless - but why would anyone "cast" that to a Callable, hence creating &&?

[02:00] <discord-raku-bot> <el gatito (** advocate)> who knows

[02:01] <discord-raku-bot> <el gatito (** advocate)> what is the default value of a & variable

[02:01] <discord-raku-bot> <Nemokosch> m: say &[&&]

[02:01] <discord-raku-bot> <Raku eval>  ((Any) (Any) (Any))  

[02:01] <discord-raku-bot> <Nemokosch> hmmmm

[02:01] <discord-raku-bot> <el gatito (** advocate)> (Any)

[02:01] <discord-raku-bot> <Nemokosch> I did manage to index it, after all!

[02:01] <discord-raku-bot> <Nemokosch> but what can this array be

[02:02] <discord-raku-bot> <Nemokosch> m: dd [&[&&]]

[02:02] <discord-raku-bot> <Raku eval>  [proto sub infix:<&&> (|) {*}]  

[02:02] <discord-raku-bot> <Nemokosch> lol

[02:02] <discord-raku-bot> <Nemokosch> a one-element array of the operator itself

[02:02] <discord-raku-bot> <Nemokosch> m: dd & # fyi

[02:02] <discord-raku-bot> <Raku eval>  Callable & = Callable  

[02:02] <discord-raku-bot> <el gatito (** advocate)> m: my &dummy; say &dummy; 

[02:02] <discord-raku-bot> <Raku eval>  (Callable)  

[02:02] <discord-raku-bot> <el gatito (** advocate)> the default value is undefined

[02:02] <discord-raku-bot> <Nemokosch> this reminds me to build the latest main branch state

[02:03] <discord-raku-bot> <Nemokosch> rakubrew triple 😉

[02:03] <discord-raku-bot> <el gatito (** advocate)> $ - Any @ - [] % - {} & - Callable

[02:03] <discord-raku-bot> <Nemokosch> correct

[02:04] <discord-raku-bot> <Nemokosch> $ and & itemize, @ and % do not

[02:04] <discord-raku-bot> <Nemokosch> I definitely don't like that the default value of @ and % is defined, that's for sure...

[02:05] <discord-raku-bot> <el gatito (** advocate)> yeah it should be undefined

[02:05] <discord-raku-bot> <el gatito (** advocate)> mfw multiple undefined values

[02:06] <discord-raku-bot> <Nemokosch> inb4 yeah yeah I don't know the reason and possible consequences if @ and % would be completely treated as kind of containers

[02:06] <discord-raku-bot> <Nemokosch> but I do know quite some issues that would solve

[02:07] <discord-raku-bot> <Nemokosch> including the infamous (@a, @b) = (@b, @a) disaster

[02:07] <discord-raku-bot> <Nemokosch> have you seen that one?

[02:07] <discord-raku-bot> <Nemokosch> I think I borderline mentioned it

[02:08] <discord-raku-bot> <el gatito (** advocate)> i think it wouldn't work @a will eat all the elements

[02:08] <discord-raku-bot> <Nemokosch> - also, I definitely know cases where something was really merely a design decision, and the reasons were indeed just plain unconvincing

[02:09] <discord-raku-bot> <Nemokosch> cue "negation lifting", "Failures descend from Nil"

[02:09] <discord-raku-bot> <Nemokosch> yes and that can look really funny, you know

[02:09] <discord-raku-bot> <Nemokosch> you get a recursive array that includes itself, like some black hole

[02:09] <discord-raku-bot> <Nemokosch> and a plain empty array

[02:11] <discord-raku-bot> <el gatito (** advocate)> binding saves the day my (@a, @b) := (@b, @a); 

[02:12] <discord-raku-bot> <el gatito (** advocate)> m: my @a; @a.push @a;  say @a; 

[02:12] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:2 ------> @a.push⏏ @a;     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop  

[02:12] <discord-raku-bot> <el gatito (** advocate)> bruh

[02:13] <discord-raku-bot> <Nemokosch> well, it kind of does but you cannot meaningfully bind in all circumstances where you could assign

[02:13] <discord-raku-bot> <el gatito (** advocate)> m: my @a; @a.push: @a;  say @a; 

[02:13] <discord-raku-bot> <Raku eval>  (\Array_4285164213632 = [Array_4285164213632])  

[02:16] <discord-raku-bot> <el gatito (** advocate)> actually i think binding should be the default behavior and assignment should be a perl5ism given the not-so-straightforward semantics of assignment

[02:16] <discord-raku-bot> <el gatito (** advocate)> its too late to change tho 😔

[02:20] <discord-raku-bot> <el gatito (** advocate)> interesting that gist doesn't return a simpler representation for self-referencing array tha  this

[02:22] <discord-raku-bot> <Nemokosch> you kinda have a point; not sure what happened during the gist call

[02:23] <discord-raku-bot> <Nemokosch> I wanted to object - but then I realized: when I was planning to start a Raku tutorial series, I also wanted to start with sigilless variables and binding only

[02:23] <discord-raku-bot> <Nemokosch> a simple, pure functional toolset

[02:24] <discord-raku-bot> <Nemokosch> it definitely seems like a Perl5ism that there are two assignments, and I don't mean binding

[02:25] <discord-raku-bot> <Nemokosch> m: my $foo = 1, 2, 3; my @bar = 1, 2, 3;

[02:25] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of constant integer 2 in sink context (lines 1, 1) Useless use of constant integer 3 in sink context (lines 1, 1)  

[02:25] <discord-raku-bot> <Nemokosch> it already warns

[02:26] <discord-raku-bot> <Nemokosch> the former statement drops 2 and 3 because it's interpreted as (my $foo = 1), 2, 3;

[02:26] <discord-raku-bot> <Nemokosch> item assignment is tighter than the comma, list assignment is looser

[02:46] <guifa>  /me has actually run into a handful of circumstances where that tighter item assignment is useful (although it's rare and almost always me trying to be fancy with scoping)

[02:46] <guifa> But I don't think it's a Perl-ism.  Perl handled that stuff very differently 

[02:47] <discord-raku-bot> <Nemokosch> Eventually I'll have to take your word for it but the way I say it is a Perlism is a bit abstract. It's rather this context-sensitivity as a principle, not the particular manifestation of it

[02:48] <discord-raku-bot> <Nemokosch> the sole idea that a $var would have a different assignment from @var

[02:50] <guifa> yeah, that much is true.  Although it's based purely on the sigil in Raku, unlike Perl where … yeah

[02:51] <guifa> take a wild guess what the value of $x is in `@foo = ('a', 'b', 'c'); $x = @foo` in Perl

[02:52] <discord-raku-bot> <el gatito (** advocate)> 'a'

[02:52] <discord-raku-bot> <el gatito (** advocate)> think so

[02:53] <guifa> 3

[02:53] <discord-raku-bot> <Nemokosch> 😆

[02:53] <guifa> OTOH, it's 'a' if you say `($x) = @foo`

[02:54] <discord-raku-bot> <Nemokosch> I mean... I can imagine that it would start making sense at some point

[02:54] <guifa> There's a logic to it, to be fair.  But it's also different from Raku's logic

[02:54] <guifa> in Perl, you could return different results from subroutines whether you were in an array or scalar assignment

[02:55] <discord-raku-bot> <Nemokosch> to be honest, I have mixed feelings about sigils in Raku

[02:55] <discord-raku-bot> <Nemokosch> I hear the people saying that it was all an appeal to Perl 5

[02:55] <guifa> arrays like @foo were always their length in scalar context

[02:55] <guifa> so a quick way to grab the length was to do $@foo 

[02:56] <discord-raku-bot> <Nemokosch> this rings a bell

[02:57] <guifa> But a lot of this was predicated on the way that array/scalar context worked in Perl (neither good nor bad, just different)

[02:57] <guifa> for instance, in a subroutine, you could actually know whether you were being called in an array or scalar context and return a value accordingly!

[02:58] <discord-raku-bot> <Nemokosch> I'd say the concept of containers (Scalar containers in particular) is great in its essence but the details leave a lot of questions unanswered

[02:59] <discord-raku-bot> <el gatito (** advocate)> they say sigils allow you to distinguish between arrays and scalars but idk why that can't be solved with naming  $foo = foo @foo = foos 

[02:59] <discord-raku-bot> <Nemokosch> they can but somebody will say that's just ad-hoc Hungarian notation

[03:00] <guifa> I actually have a $pattern and %pattern in the file I'm currently editing 

[03:00] <guifa> $pattern = string, %pattern = data from parse

[03:04] <guifa> The sigils do two things: adjust assignment/list handling, and signal data role type.  if you have a set, I sometimes will also call it as $foo when it's more a singular conceptual unit, and %set when I'm more concerned about the individual units.  Neither is more correct than the other (just like `if foo { bar }` is no more correct than `bar if foo`), but Raku is all about allowing those more subtle degrees of

[03:04] <guifa>  expressiveness.  Obviously, you can write Raku 100% with just the scalar sigil, and even eschew containers by binding all the time 

[03:04] <discord-raku-bot> <el gatito (** advocate)> better than a symbol soup ig actually i still use $foo @foos although i know the s is redundant lol

[03:05] <discord-raku-bot> <Nemokosch> or just use \vars 😈

[03:06] <discord-raku-bot> <el gatito (** advocate)> true but its immutable

[03:06] <discord-raku-bot> <Nemokosch> just as much as what you bind it to 🧠

[03:06] <guifa> not if you say my \foo = $; ;-)

[03:09] * guifa is afk

[03:10] <discord-raku-bot> <el gatito (** advocate)> m: # php moment no strict;  multi array(**@args) { @args }  $a = array(1, 2, 3, 4);  say $a[2]; 

[03:10] <discord-raku-bot> <Raku eval>  Exit code: 1 array *must* be parameterized   in block <unit> at main.raku line 6   

[03:11] <discord-raku-bot> <el gatito (** advocate)> :cameliathink:

[03:11] <discord-raku-bot> <el gatito (** advocate)> m: # php moment no strict;  multi array(**@args) { @args }  $a := array(1, 2, 3, 4);  say $a[2]; 

[03:11] <discord-raku-bot> <Raku eval>  Exit code: 1 array *must* be parameterized   in block <unit> at main.raku line 6   

[03:12] <discord-raku-bot> <el gatito (** advocate)> m: # php moment no strict;  sub array(**@args) { @args }  $a := array(1, 2, 3, 4);  say $a[2]; 

[03:12] <discord-raku-bot> <Raku eval>  Exit code: 1 array *must* be parameterized   in block <unit> at main.raku line 6   

[03:13] <discord-raku-bot> <el gatito (** advocate)> why must array be parameterized

[03:20] <guifa> array = native array

[03:20] <guifa> m: my int8 @foo = 1,2,3,4; my array $foo = @foo;

[03:20] <camelia> rakudo-moar 4a6ea806c: ( no output )

[03:21] <guifa> because it's native, it HAS to be typed (hence the demand for parameterization)

[03:22] <guifa> that said, there should probably be some warning about the typename / sub overlap there (and I'd think the locally declare sub would take precedence, but I guess not)

[03:23] <guifa> sub Array($foo) { say "in the sub" }; my $a = Array(1,2,3,4); say $a; # at least it's consistent in this

[03:23] <guifa> m: sub Array($foo) { say "in the sub" }; my $a = Array(1,2,3,4); say $a;

[03:23] <camelia> rakudo-moar 4a6ea806c: OUTPUT: «[1 2 3 4]␤»

[03:24] <discord-raku-bot> <el gatito (** advocate)> m: # php moment no strict;  sub array(**@args) { @args }  $a := &array(1, 2, 3, 4);  say $a[2]; 

[03:24] <discord-raku-bot> <Raku eval>  3  

[03:25] <discord-raku-bot> <el gatito (** advocate)> adding & works

[03:25] <discord-raku-bot> <el gatito (** advocate)> & = callable namespace

[08:19] <discord-raku-bot> <el gatito (** advocate)> m: sub modify-my-argument($a) {   ++$a }  say modify-my-argument(2); 

[08:19] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot resolve caller prefix:<++>(Int:D); the following candidates match the type but require mutable arguments:     (Mu:D $a is rw)     (Int:D $a is rw --> Int:D)  The following do not match for other reasons:     (Bool $a is rw)     (Mu:U $a is rw)     (Num:D $a is rw)     (Num:U $a is rw)     (int $a is rw --> int)     (num $a is rw --> num)   in sub modify-my-argument at main.raku line 2  

[08:19] <discord-raku-bot> in block <unit> at main.raku line 5   

[08:20] <discord-raku-bot> <el gatito (** advocate)> m: sub modify-my-argument($a) {   $a = 3;   $a }  say modify-my-argument(2); 

[08:20] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot assign to a readonly variable or a value   in sub modify-my-argument at main.raku line 2   in block <unit> at main.raku line 6   

[08:20] <discord-raku-bot> <el gatito (** advocate)> m: sub modify-my-argument($a) {   $a := 3;   $a }  say modify-my-argument(2); 

[08:20] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Cannot bind to '$a' because it was bound in a signature and variables bound in signatures cannot be rebound unless they were declared with the 'is rw' or 'is copy' traits at /home/glot/main.raku:2 ------>   $a := 3⏏;  

[08:22] <discord-raku-bot> <el gatito (** advocate)> m: sub modify-my-argument($a is copy) {   $a := 3;   $a }  say modify-my-argument(2); 

[08:22] <discord-raku-bot> <Raku eval>  3  

[08:54] *** dakkar joined
[09:01] *** Manifest0 joined
[09:09] <discord-raku-bot> <Nemokosch> Yeah tbh it could have been suspicious that the name array might cause conflicts 😅

[09:30] *** ab5tract joined
[10:07] *** ab5tract left
[11:39] *** raschip joined
[11:53] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/02/06/2023-06-ben-davies/

[12:59] *** ab5tract joined
[13:34] <discord-raku-bot> <el gatito (** advocate)> m: my \a = Set.new(1, 2, 3); my \b = Set.new(3, 4, 5);  say a | b; 

[13:34] <discord-raku-bot> <Raku eval>  any(Set(1 2 3), Set(3 4 5))  

[13:34] <discord-raku-bot> <el gatito (** advocate)> oh yeah its a junction

[13:34] <discord-raku-bot> <el gatito (** advocate)> m: my \a = Set.new(1, 2, 3); my \b = Set.new(3, 4, 5);  say a (+) b; 

[13:34] <discord-raku-bot> <Raku eval>  Bag(1 2 3(2) 4 5)  

[13:35] <discord-raku-bot> <el gatito (** advocate)> set union = bag

[13:36] <discord-raku-bot> <el gatito (** advocate)> m: my \a = Set.new(1, 2, 3); my \b = Set.new(3, 4, 5);  say a (|) b; 

[13:36] <discord-raku-bot> <Raku eval>  Set(1 2 3 4 5)  

[13:36] <discord-raku-bot> <el gatito (** advocate)> the correct set union

[14:02] <discord-raku-bot> <Nemokosch> yeah it wasn't "set union"

[14:03] <discord-raku-bot> <Nemokosch> more like multiset addition or idk, key addition

[14:03] <discord-raku-bot> <Nemokosch> *value

[14:20] *** NemokoschKiwi joined
[14:35] *** NemokoschKiwi left
[17:39] *** dakkar left
[18:45] *** gfldex left
[18:45] *** gfldex joined
[20:57] *** raschip left
[21:47] *** rf_ joined
[21:56] *** ab5tract left
[21:56] *** rf left
[21:57] *** ab5tract joined
[22:32] *** ab5tract left
[23:02] *** stevied_test left
[23:02] *** stevied_test joined
