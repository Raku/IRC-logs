[00:17] <lizmat> it's a meta-op, just like += or *=

[00:37] *** deoac joined
[00:37] <deoac> m: say 'abcde' ~~ m:ex/ \w ** 2..4/

[00:37] <camelia> rakudo-moar 95e0a1783: OUTPUT: «(｢abcd｣ ｢abc｣ ｢ab｣ ｢bcde｣ ｢bcd｣ ｢bc｣ ｢cde｣ ｢cd｣ ｢de｣)␤»

[00:38] <deoac> m: my $min = 2; my $max = 4; say 'abcde' ~~ m:ex/ \w ** {$min..$max} /

[00:38] <camelia> rakudo-moar 95e0a1783: OUTPUT: «(｢abcd｣ ｢abc｣ ｢ab｣ ｢a｣ ｢bcde｣ ｢bcd｣ ｢bc｣ ｢b｣ ｢cde｣ ｢cd｣ ｢c｣ ｢de｣ ｢d｣)␤»

[00:39] <deoac> Why the difference?  Why does the latter match a single character?

[00:43] <guifa_> that's definitely an error

[00:43] <guifa_> And it goes back a good ways

[00:46] <deoac> Is it expected to be corrected in v6.e?

[00:47] <guifa_> No idea -- is there a bug report for it?  

[00:49] <guifa_> There are a lot of weird optimizations for regex and I'd bet that the range one somehow trips it up when ex is activated

[00:57] <deoac> Bug reports are above my pay grade!

[00:57] * guifa_ will try to remember to make one

[01:01] *** Heptite joined
[01:29] <discord-raku-bot> <Anton Antonov> @deoac Filing or fixing?

[01:40] <deoac> Both.  How do I file a bug report?

[01:42] <discord-raku-bot> <Anton Antonov> @deoac So, you want pay-raise?

[01:43] <discord-raku-bot> <Anton Antonov> @deoac Hmm... you want for file core Raku / rakudo bug report, right?

[01:44] <deoac> Yes.  Are there other kinds of bug reports.

[01:44] <deoac> ?

[01:46] <discord-raku-bot> <Anton Antonov> @deoac Yeah for packages, etc. It seems the you could / should file an issue at GitHub : https://github.com/rakudo/rakudo/issues .

[01:48] <discord-raku-bot> <Anton Antonov> @deoac Here are the related guidelines : https://github.com/rakudo/rakudo/blob/95e0a178323a6e2a9841999f53342412d3beee89/CONTRIBUTING.md .

[01:49] <deoac> Thanks, I'll look into that tomorrow.

[01:50] <deoac> How would I find out if this bug report already exists?

[01:51] <discord-raku-bot> <Anton Antonov> Well,  please go to https://github.com/rakudo/rakudo/issues  and search. (Both open and closed.)

[01:55] <deoac> I'll let you know what I find/do

[02:05] *** Manifest0 left
[02:44] <rf> How can I combine 2 slips

[02:44] <rf> m: my @a = 1,2,3,4; my @b = 5,6,7,8; my @c = Array.new(|@a, |@b);

[02:44] <camelia> rakudo-moar 95e0a1783: ( no output )

[02:44] <rf> m: my @a = 1,2,3,4; my @b = 5,6,7,8; my @c = Array.new(|@a, |@b); say @c;

[02:44] <camelia> rakudo-moar 95e0a1783: OUTPUT: «[1 2 3 4 5 6 7 8]␤»

[02:44] <rf> Ok this isn't working for me for some reason in my code

[02:48] <MasterDuke> you can't/don't want to use .append?

[02:53] <discord-raku-bot> <Anton Antonov> @rf maybe just [|@a, |@b] .

[02:54] <rf> I can't use append because I need one to be immutable

[02:55] <rf> Well.. immutable in this certain circumstance. Yeah the error was in a different part of the code, for some reason I thought it was this.

[02:59] *** deoac left
[04:16] *** rf left
[06:34] *** MasterDuke left
[10:10] *** Manifest0 joined
[11:43] <snonux> hey, how can i pass an Int to MAIN from the command line? sub MAIN (Int :$foo = 13) { $foo.say; } doesn't seem to work when in run my script with 'raku foo.raku --foo 42'; I think it's because 42 is interpreted as a Str, and therefore the MAIN signature doesn't match! The example works when I change the signature to sub MAIL (Str :$foo = '13') { $foo.say };

[11:43] <snonux> s/MAIL/MAIN/

[11:45] <discord-raku-bot> <el gatito (** advocate)> you need to coerce it to Int

[11:47] <snonux> i can cast it to Int afterwards. or is there a way to do it directly in the MAIN signature? 

[11:47] <ab5tract> snonux: you can coerce in the signature with Int()

[11:48] <ab5tract> that way if the candidate can coerce to Int, it will

[11:48] <ab5tract> you can also make it targeted against a single candidate class, such as Int(Str), but that is a bit less common

[11:49] <discord-raku-bot> <el gatito (** advocate)> ``` sub MAIN(Int(Str) :$foo = 13) {   $foo.say }

[11:49] <discord-raku-bot> <el gatito (** advocate)> ab5stract: i thought its the opposite

[11:52] <ab5tract> what, that it's less frequent to leave the candidate open?

[11:53] <gfldex> Since MAIN will always be called with Str-arguments, Int(Str) is redundant.

[11:53] <gfldex> If at all, use Int(Str:D) or you may end up with a 0 you don't want.

[11:54] <snonux> ❯ /bin/cat foo.raku 

[11:54] <snonux> sub MAIN(Int(Str) :$foo = 13) {

[11:54] <snonux>   say $foo;

[11:54] <snonux>   say $foo.WHAT;

[11:54] <snonux> }

[11:54] <snonux> paul in earth in /tmp 

[11:54] <snonux> ❯ raku foo.raku --foo=121212

[11:54] <ab5tract> It's more of a gradual typing approach to just use Int(), but that's really a matter of personal preference

[11:54] <snonux> 121212

[11:54] <snonux> (IntStr)

[11:55] <snonux> yeah, seems to work. i guess IntStr is a type which is both, Int and Str. 

[11:55] <ab5tract> yeah, that's correct. It's an allomorph. You can safely use `$foo` in both numeric and string contexts without anything complaining

[11:55] <snonux> nice, thanks ab5tract 

[11:56] <snonux> Int() seems better, as Int(Str) is redundant. thanks!

[11:57] <discord-raku-bot> <Nemokosch> can't you just use Int?

[11:57] <discord-raku-bot> <Nemokosch> and if you can't, that's arguably a bug

[11:58] <discord-raku-bot> <el gatito (** advocate)> no i mean i thought the syntax is Str(Int)

[11:58] <discord-raku-bot> <Nemokosch> Str(Int) = "get me a Str from an Int"

[11:59] <ab5tract> It's the other way around. 

[11:59] <ab5tract> Int() = coerce all candidates that implement an Int coercion to Int

[12:00] <discord-raku-bot> <el gatito (** advocate)> Int = no coercion

[12:00] <ab5tract> Int(Str) = coerce only Str candidates to Int

[12:00] <discord-raku-bot> <Nemokosch> yes, it should work with no coercion

[12:01] <ab5tract> Nemokosch: hard disagree

[12:01] <discord-raku-bot> <Nemokosch> I mean, it literally does work when it's not bugged

[12:01] <discord-raku-bot> <Nemokosch> this is not a matter of opinion

[12:01] <ab5tract> what are you talking about?

[12:02] <discord-raku-bot> <Nemokosch> you can just use Int parameters in the MAIN

[12:02] <ab5tract> m: sub f(Int $i) { dd $i}; f(5); f("5")

[12:02] <camelia> rakudo-moar 95e0a1783: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling f(Str) will never work with declared signature (Int $i)␤at <tmp>:1␤------> sub f(Int $i) { dd $i}; f(5); ⏏f("5")␤»

[12:02] <discord-raku-bot> <Nemokosch> that's not MAIN

[12:03] <ab5tract> Yeah, but what you are suggesting is wrong. MAIN inputs are always strings

[12:03] <ab5tract> nothing is special-cased about its handling except for that it runs when you run the script

[12:03] <ab5tract> otherwise it would be broken

[12:03] <discord-raku-bot> <Nemokosch> from the perspective of the callee, they are not

[12:03] <ab5tract> they clearly are

[12:04] <discord-raku-bot> <Nemokosch> m: sub MAIN(Int $foo, Str $) { dd $foo } @*ARGS=<42 11>;

[12:04] <discord-raku-bot> <Raku eval>  IntStr.new(42, "42") 

[12:04] <discord-raku-bot> <Nemokosch> BRUH

[12:05] <discord-raku-bot> <Nemokosch> yes, it does work with Int, like it always did

[12:05] <ab5tract> chill, please

[12:05] <discord-raku-bot> <Nemokosch> then please at least check what you are saying before you get confident about it

[12:06] <ab5tract> we can all be wrong without being rude to each other

[12:07] <discord-raku-bot> <Nemokosch> or we can be humble about something we aren't actually sure of...

[12:08] <ab5tract> I can see now why people say you make this all a lot less fun

[12:09] <discord-raku-bot> <Nemokosch> you just made a blatantly wrong statement with full confidence, why make this about me?

[12:10] <ab5tract> I made an error. I'll admit it. I'd ask why you have to be so aggressive but I don't think I will continue responding to you

[12:11] <discord-raku-bot> <Nemokosch> well it does happen that somebody loses patience when somebody denies commonsensical reality in the most declarative way, sorry if this hurts so much

[12:13] <ab5tract> If no one can be wrong without being attacked and belittled by you, there will necessarily be a chilling effect in every channel you are in

[12:15] <lizmat> Zephyr 

[12:16] <discord-raku-bot> <Nemokosch> I don't think it's an attack to say that somebody was too wrong for this amount of confidence

[12:17] <lizmat> Nemokosch your amount of right becomes meaningless if nobody wants to interact with you anymore

[12:18] <lizmat> and you appear to have a way of behaving online that is perceived by people as attacks

[12:18] <lizmat> that *should* make you wonder

[12:18] <discord-raku-bot> <Nemokosch> It shouldn't even be necessary to say that one needs to check their facts before getting protective about them

[12:19] <discord-raku-bot> <Nemokosch> should I also take it as an attack that I said something true and it was discarded with little reasoning? does that change a lot?

[12:20] <lizmat> I'm not getting into an argument with you

[12:20] <lizmat> I won't be the frog in https://en.wikipedia.org/wiki/The_Scorpion_and_the_Frog

[12:22] <discord-raku-bot> <Nemokosch> You don't have to. Just please, if you know how to tell somebody kindly that they are wrong, go ahead and do so, for everyone's benefit.

[12:22] <lizmat> this isn't about content, this is about your online behaviour

[12:23] <discord-raku-bot> <Nemokosch> and I'm not gonna engage in another lesson like that. Have a nice day

[12:26] <lizmat> You too

[12:27] <discord-raku-bot> <el gatito (** advocate)> why all MAIN inputs are strings

[12:27] <lizmat> well, the situation is slightly more complicated

[12:28] <lizmat> yes, the command line only supplies strings

[12:28] <lizmat> however each string is processed by val() before given to MAIN dispatch  https://docs.raku.org/routine/val

[12:29] <lizmat> which, BTW, is also what <foo bar> does by default

[12:29] <lizmat> m: dd <foo 42 bar>

[12:29] <camelia> rakudo-moar 95e0a1783: OUTPUT: «("foo", IntStr.new(42, "42"), "bar")␤»

[12:29] <lizmat> note that the "42" turned into an allomorph

[12:30] <lizmat> and that *will* dispatch correctly to a  Int candidate

[12:30] <lizmat> and it will dispatch to a Str if there is no Int

[12:31] <lizmat> m: sub a(Int $a) { dd $a }; a "42"

[12:31] <camelia> rakudo-moar 95e0a1783: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Calling a(Str) will never work with declared signature (Int $a)␤at <tmp>:1␤------> sub a(Int $a) { dd $a }; ⏏a "42"␤»

[12:31] <lizmat> m: sub a(Int $a) { dd $a }; a <42>

[12:31] <camelia> rakudo-moar 95e0a1783: OUTPUT: «IntStr.new(42, "42")␤»

[12:31] <lizmat> m: sub a(Str $a) { dd $a }; a <42>

[12:31] <camelia> rakudo-moar 95e0a1783: OUTPUT: «IntStr.new(42, "42")␤»

[12:32] <lizmat> so Nemokosch example was dubious, as it supplied allomorphs, rather than Ints

[12:32] <lizmat> m: sub MAIN(Int $foo, Str $) { dd $foo } @*ARGS="42",11

[12:32] <camelia> rakudo-moar 95e0a1783: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> sub MAIN(Int $foo, Str $) { dd $foo }⏏ @*ARGS="42",11␤    expecting any of:␤        infix␤        infix stopp…»

[12:32] <lizmat> m: sub MAIN(Int $foo, Str $) { dd $foo }; @*ARGS="42",11

[12:32] <camelia> rakudo-moar 95e0a1783: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[12:33] <lizmat> m: sub MAIN(Int $foo) { dd $foo }; @*ARGS="42"

[12:33] <camelia> rakudo-moar 95e0a1783: OUTPUT: «IntStr.new(42, "42")␤»

[12:33] <lizmat> intriguing

[12:34] <discord-raku-bot> <el gatito (** advocate)> allomorphs be like

[12:35] <lizmat> yeah... ok, looks like &RUN-MAIN by default does coercion to allomorphs

[12:35] <ab5tract> I wonder how hard it would be to wire up the val behavior for named arguments. I almost always use named arguments, especially with type constraints, so I don't remember encountering this case before

[12:36] <lizmat> doesn't it do so already?

[12:36] <ab5tract> Which led to my (wrong) assumption that dispatch to MAIN is the same as to any old sub

[12:37] <ab5tract> lizmat: nppe, that's how we got into this discussion :)

[12:37] <discord-raku-bot> <el gatito (** advocate)> yet another weak typing Str coercing to Int via IntStr when you don’t want to

[12:37] <lizmat> m: sub MAIN(|c) { dd c }; @*ARGS="--foo=42"

[12:37] <camelia> rakudo-moar 95e0a1783: OUTPUT: «\(:foo(IntStr.new(42, "42")))␤»

[12:37] <lizmat> nameds are already converted to allomorphs ?

[12:38] <ab5tract> m: sub MAIN(|c) { dd c }; @*ARGS="--foo 42"

[12:38] <camelia> rakudo-moar 95e0a1783: OUTPUT: «\("foo 42" => Bool::True)␤»

[12:38] <ab5tract> maybe it was because he didn't use an equals sign

[12:39] <lizmat> yes, you need an equal sign in default RAKU arg passing

[12:39] <discord-raku-bot> <el gatito (** advocate)> what happened with raku argparsing

[12:39] <ab5tract> m: sub MAIN(Int :$foo) { dd  $foo }; @*ARGS="--foo 42"

[12:39] <camelia> rakudo-moar 95e0a1783: OUTPUT: «Usage:␤  <tmp> [--foo[=Int]]␤»

[12:39] <ab5tract> m: sub MAIN(Int :$foo) { dd  $foo }; @*ARGS="--foo=42"

[12:39] <camelia> rakudo-moar 95e0a1783: OUTPUT: «IntStr.new(42, "42")␤»

[12:39] <ab5tract> yup, that must have been it

[12:39] <ab5tract> snonux: ^^

[12:39] <discord-raku-bot> <el gatito (** advocate)> it should be parsed as (42, foo => True)

[12:40] <lizmat> m: m: sub MAIN(Int :$foo) { dd  $foo }; @*ARGS="--foo","42"

[12:40] <camelia> rakudo-moar 95e0a1783: OUTPUT: «Usage:␤  <tmp> [--foo[=Int]]␤»

[12:40] <lizmat> m: m: sub MAIN(|c) { dd  c }; @*ARGS="--foo","42"

[12:40] <camelia> rakudo-moar 95e0a1783: OUTPUT: «\(IntStr.new(42, "42"), :foo(Bool::True))␤»

[12:40] <lizmat> like that ?

[12:40] <lizmat> in standard arg parsing, a variable name cannot have a space in it

[12:41] <ab5tract> el gattito: yeah, my example was a bit broken

[12:41] <snonux> paul in earth in /tmp took 4s 

[12:41] <snonux> ❯ raku foo.raku --foo=121212

[12:41] <snonux> 121212

[12:41] <snonux> (IntStr)

[12:41] <snonux> paul in earth in /tmp 

[12:41] <snonux> ❯ raku foo.raku --foo 121212

[12:41] <snonux> Usage:

[12:41] <snonux>   foo.raku [--foo[=Int]]

[12:41] <lizmat> so if you set up @*ARGS incorrectly in these examples...

[12:41] <snonux> zsh: exit 2     raku foo.raku --foo 121212

[12:41] <snonux> okay, the '=' has to be added

[12:42] <discord-raku-bot> <Nemokosch> consider checking out the Getopt::Long module

[12:42] <lizmat> if you want more "standard" arg passing, have a look at https://raku.land/cpan:LEONT/Getopt::Long

[12:42] <lizmat> afk for a bit again&

[12:42] <discord-raku-bot> <el gatito (** advocate)> raku argparse is not standard lmao

[12:42] <snonux> i like the raku built-in, the fewer external dependencies, the better :-) 

[12:45] <snonux> i think the getopt long is following a GNU standard. but i don't persist on GNU standards.  

[13:02] <discord-raku-bot> <el gatito (** advocate)> funi C:\Users\jack9\Documents\raku>raku argparse.raku 42 --foo \(IntStr.new(42, "42"), "--foo") 

[13:06] <ab5tract> el gatito: does your argparse.raku use `named-anywhere` ? https://docs.raku.org/language/create-cli#named-anywhere

[13:12] <discord-raku-bot> <el gatito (** advocate)> no

[13:15] <ab5tract> that's the first thing I setup if I'm mixing positional and named arguments

[13:15] <discord-raku-bot> <el gatito (** advocate)> short options is not treated differently smh PS C:\Users\jack9\Documents\raku> raku argparse.raku -abc \(:abc(Bool::True)) 

[13:15] <discord-raku-bot> <el gatito (** advocate)> you have to enable it in %*SUB-MAIN-OPTS

[13:16] <ab5tract> yeah, bundling

[13:19] <discord-raku-bot> <el gatito (** advocate)> with that enabled it just introduce another issue PS C:\Users\jack9\Documents\raku> raku argparse.raku --abc \(:abc(Bool::True)) 

[13:19] <discord-raku-bot> <el gatito (** advocate)> -abc is the same as --abc somehow

[15:31] *** rf joined
[19:25] *** theesm left
[19:27] *** theesm joined
[19:35] *** deoac joined
[19:40] *** ab5tract left
[20:05] *** deoac left
[23:39] *** deoac joined
