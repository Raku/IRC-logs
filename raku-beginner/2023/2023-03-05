[01:01] *** teatime joined
[03:12] *** Sussysham joined
[03:24] <discord-raku-bot> <el gatito (** advocate)> https://cdn.discordapp.com/attachments/768511641758466088/1081779188836606053/image.png

[03:24] <discord-raku-bot> <el gatito (** advocate)> üò≠

[03:25] *** Sussysham left
[03:40] *** rf left
[05:28] *** Heptite left
[06:46] *** teatwo joined
[06:50] *** teatime left
[08:58] *** frost joined
[09:03] *** frost left
[09:16] <discord-raku-bot> <Nemokosch> What is this?

[09:16] <discord-raku-bot> <el gatito (** advocate)> btw is a[1, 2, 3] interpreted as a.AT-POS((1, 2, 3)) or a.AT-POS(1, 2, 3)

[09:46] <discord-raku-bot> <Nahita> neither, i think

[09:46] <discord-raku-bot> <Nahita> that's 3 calls to AT-POS

[09:57] <discord-raku-bot> <Nemokosch> really, what does it actually do

[09:57] <discord-raku-bot> <Nemokosch> &postcircumfix:<[ ]>.sourcery(1,2,3) gives me https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/array_slice.pm6#L16

[09:57] <discord-raku-bot> <Nemokosch> doesn't help

[09:57] <discord-raku-bot> <Nemokosch> it's not the right candidate

[10:00] <discord-raku-bot> <Nemokosch> oh I'm stoopid

[10:01] <discord-raku-bot> <Nemokosch> &postcircumfix:<[ ]>.sourcery(@a, (1, 2, 3)) gives https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/array_slice.pm6#L119

[10:06] <discord-raku-bot> <Nemokosch> after a little chasing, it turns out that Nahita was right https://github.com/rakudo/rakudo/blob/d769af80e532bb6c5b43a643202b56229c6790d0/src/core.c/Array/Slice.pm6#L12 is called for all positions

[10:08] <discord-raku-bot> <el gatito (** advocate)> so its (a.AT-POS(1), a.AT-POS(2), a.AT-POS(3))?

[10:09] <discord-raku-bot> <Nemokosch> yep

[10:10] <discord-raku-bot> <el gatito (** advocate)> m:perl class A {   method AT-POS($i) {     say $i;     $i;   } }  A[1, 2, 3] 

[10:10] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku A cannot be parameterized at /home/glot/main.raku:8 ------> A[1, 2, 3]‚èè<EOL> 

[10:10] <discord-raku-bot> <el gatito (** advocate)> m:perl class A {   method AT-POS($i) {     say $i;     $i;   } }  say A.new()[1, 2, 3]; 

[10:10] <discord-raku-bot> <Raku eval>  1 2 3 (1 2 3) 

[10:11] <discord-raku-bot> <el gatito (** advocate)> this behavior feels inflexible

[10:12] <discord-raku-bot> <Nemokosch> it makes sense though

[10:12] <discord-raku-bot> <Nemokosch> this operator is not something you should overload

[10:13] <discord-raku-bot> <Nemokosch> however, you can overload AT-POS and get all the indexing possibilities

[10:19] <discord-raku-bot> <el gatito (** advocate)> it makes just as much sense if a[1, 2, 3] means a[1][2][3] as this

[10:19] <discord-raku-bot> <el gatito (** advocate)> raku doesn't allow you to have that option via AT-POS

[10:19] <discord-raku-bot> <Nemokosch> that's a[1; 2; 3]

[10:19] <discord-raku-bot> <Nemokosch> check mate

[10:24] <discord-raku-bot> <el gatito (** advocate)> üòë

[10:24] <discord-raku-bot> <Nemokosch> and yes inb4 6.e will be shipping with || that flattens into semicolon list for indexing

[11:49] <discord-raku-bot> <el gatito (** advocate)> tried to install wsl via standalone appx package

[11:51] <discord-raku-bot> <el gatito (** advocate)> mb i have to upgrade even further üòì

[12:51] *** QhpAptyj9hj0RQwM joined
[12:52] <discord-raku-bot> <el gatito (** advocate)> so if i want (a[1; 2], a[3; 4]) i can a[(1; 2), (3; 4)]?

[12:53] <discord-raku-bot> <Nemokosch> wouldn't know without trying

[12:54] <discord-raku-bot> <Nemokosch> I would be more confident about the other way around

[12:56] *** QhpAptyj9hj0RQwM left
[13:01] <discord-raku-bot> <el gatito (** advocate)> m:perl say $_[(1; 2), (3; 4)] given (   (1, 2, 3, 4),   (5, 6, 7, 8),   (9, 10, 11, 12), ); 

[13:01] <discord-raku-bot> <Raku eval>  (((5 6 7 8) (9 10 11 12)) (Nil Nil)) 

[13:01] <discord-raku-bot> <el gatito (** advocate)> m:perl say $_[(0; 1), (2; 3)] given (   (1, 2, 3, 4),   (5, 6, 7, 8),   (9, 10, 11, 12), ); 

[13:01] <discord-raku-bot> <Raku eval>  (((1 2 3 4) (5 6 7 8)) ((9 10 11 12) Nil)) 

[13:02] <discord-raku-bot> <el gatito (** advocate)> it gave some strange output lol

[13:03] <discord-raku-bot> <el gatito (** advocate)> ok what its actually doing is turning into a[0, 1, 2, 3]

[13:04] <discord-raku-bot> <el gatito (** advocate)> funny behavior as always

[13:04] <discord-raku-bot> <el gatito (** advocate)> m:perl say $_[(0; 1), 2] given (   (1, 2, 3, 4),   (5, 6, 7, 8),   (9, 10, 11, 12), ); 

[13:04] <discord-raku-bot> <Raku eval>  (((1 2 3 4) (5 6 7 8)) (9 10 11 12)) 

[13:05] <discord-raku-bot> <el gatito (** advocate)> actually its even weirder

[13:05] <discord-raku-bot> <Nemokosch> this ; thing is an operator, that's why I was fairly suspicious

[13:05] <lizmat> ; is an operator ?

[13:05] <discord-raku-bot> <Nemokosch> like, what even is (0 ; 1), a two-dimensional list?

[13:05] <discord-raku-bot> <el gatito (** advocate)> m:perl say $_[(0, 1), 2] given (   (1, 2, 3, 4),   (5, 6, 7, 8),   (9, 10, 11, 12), ); 

[13:05] <lizmat> m: dd (0;1)

[13:05] <camelia> rakudo-moar 3bc6e5254: OUTPUT: ¬´(0, 1)‚ê§¬ª

[13:05] <discord-raku-bot> <Raku eval>  (((1 2 3 4) (5 6 7 8)) (9 10 11 12)) 

[13:05] <lizmat> m: dd (0,;1,)

[13:05] <camelia> rakudo-moar 3bc6e5254: OUTPUT: ¬´((0,), (1,))‚ê§¬ª

[13:05] <discord-raku-bot> <Nemokosch> m: dd (0 ; 1)

[13:05] <discord-raku-bot> <Raku eval>  (0, 1) 

[13:06] <discord-raku-bot> <Nemokosch> mmm

[13:06] <discord-raku-bot> <el gatito (** advocate)> yeah same output

[13:06] <lizmat> a single value is not a list, it needs a comma

[13:06] <lizmat> m: dd (0,;1,)

[13:06] <camelia> rakudo-moar 3bc6e5254: OUTPUT: ¬´((0,), (1,))‚ê§¬ª

[13:06] <lizmat> m: dd (0,1;1,2)

[13:06] <camelia> rakudo-moar 3bc6e5254: OUTPUT: ¬´((0, 1), (1, 2))‚ê§¬ª

[13:07] <lizmat> m: dd (0,1;1,2)[1;1]

[13:07] <camelia> rakudo-moar 3bc6e5254: OUTPUT: ¬´2‚ê§¬ª

[13:07] <discord-raku-bot> <Nemokosch> ü§´

[13:08] <discord-raku-bot> <el gatito (** advocate)> ok that makes a[0, 1, 2] and a[0; 1; 2] even weirder inconsistency

[13:08] <lizmat> its not when you consider that (0) is **NOT** a list

[13:08] <lizmat> (0,) *is*

[13:09] <discord-raku-bot> <Nemokosch> [; ] is a separate operator

[13:09] <lizmat> suppose you want to initialize an array with some elements being lists and others not

[13:09] <lizmat> how would you do that?

[13:10] <discord-raku-bot> <el gatito (** advocate)> [0, (1, 2), 3]

[13:10] <lizmat> m: dd [0, (1, 2), 3]

[13:10] <camelia> rakudo-moar 3bc6e5254: OUTPUT: ¬´[0, (1, 2), 3]‚ê§¬ª

[13:11] <lizmat> hmmm

[13:11] <discord-raku-bot> <Nemokosch> so iirc  in a[0, 1, 2], 0, 1, 2 is data

[13:11] <discord-raku-bot> <Nemokosch> however, in a[0; 1; 2], 0; 1; 2 is syntax

[13:13] <lizmat> ok, I guess there is something to be said to have ; inside circumfixes have their value to always be interpreted as lists

[14:49] *** rf joined
[15:37] *** Heptite joined
[17:23] *** teatwo left
[17:25] *** teatime joined
[18:12] *** QhpAptyj9hj0RQwM joined
[18:30] *** QhpAptyj9hj0RQwM left
[18:46] *** teatwo joined
[18:48] *** tea3po joined
[18:49] *** teatime left
[18:51] *** teatwo left
[19:37] *** jgaz joined
[20:10] *** gfldex left
[20:10] *** sivoais left
[20:10] *** nicole left
[20:11] *** gfldex joined
[20:11] *** sivoais joined
[20:11] *** nicole joined
[20:17] *** sivoais left
[20:18] *** sivoais joined
[20:24] *** jgaz left
[22:29] *** QhpAptyj9hj0RQwM joined
[23:14] *** QhpAptyj9hj0RQwM left
