[01:58] *** razetime joined
[03:33] *** razetime left
[04:31] *** razetime joined
[05:47] *** siavash joined
[07:35] <discord-raku-bot> <librasteve> f(2) == &f(2) == &f.(2)  you can make any sub be a method and you can use the dot (‚Äúmethodop‚Äù) before the parents  it‚Äôs analogous to something like .=

[07:37] <discord-raku-bot> <librasteve> or @a[2] == @a.[2] and %h<b> == %h.<b>

[07:38] <discord-raku-bot> <librasteve> that way you can apply meta operators like the hyper >>

[07:58] *** razetime left
[08:08] *** razetime joined
[09:20] <discord-raku-bot> <nemokosch> I think there is a postcircumfix .() operator which in term performs a function call

[09:21] <discord-raku-bot> <nemokosch> eventually the RakuAST parse will help analyze things like that; right now I'm more confident with raku --target=parse

[09:33] <discord-raku-bot> <nemokosch> this unfolds that (as of the non-RakuAST grammar), you get a dotty token which contains a single dottyop token which in turn contains a dot and a postop token

[09:33] <discord-raku-bot> <nemokosch> when the match is processed, it will be simply codegenned as the postop part

[09:34] <discord-raku-bot> <nemokosch> so I think it's safe to say that the whole business is for "disambiguation"

[12:02] <snonux> anyone knows if there is a good LSP (language server) for Raku, which could be plugged into editors such as NeoVim, VSCode, Helix..? i did some googling, there seems to be something for VSCode, but not sure if that could be used for NeoVim. 

[12:18] *** razetime left
[12:25] <discord-raku-bot> <nemokosch> I think bscan's LSP is still the best option

[12:30] *** sivoais left
[12:48] <snonux> i don't node/typescript so well, but i managed to get it running in Helix :-) thanks!

[12:59] *** siavash left
[13:01] *** sivoais joined
[13:18] <discord-raku-bot> <antononcube> @nemokosch and @librasteve Thanks!

[13:46] <discord-raku-bot> <antononcube> @librasteve I strongly consider using your units package(s) to demonstrate some functionalities of LLMs. As far as I can tell you have implemented a full algebra for units manipulation. Do you special objects for holding k-number of units? E.g. something like quantity(5.4, GetUnit(‚Äúm / s^2).

[21:31] <discord-raku-bot> <librasteve> use Physics::Measure :ALL;  my $acc = ‚ôéÔ∏è'5.4 m / s^2';  my $time = 8s;   my $vel = $acc * $time; say $vel;  dd $acc; dd $vel;

[21:31] <discord-raku-bot> <librasteve> 43.2m/s

[21:32] <discord-raku-bot> <librasteve> ^^ try that

[21:34] <discord-raku-bot> <librasteve> Speed $vel = Physics::Measure::Speed.new(value => 43.2, units =>   Unit.new( factor => 1, offset => 0, defn => 'm/s', type => Speed,   dims => [1,0,-1,0,0,0,0,0], dmix => ("m"=>1,"s"=>-1).MixHash, names => ['m/s'] ); , error => Error)

[21:37] <discord-raku-bot> <antononcube> @librasteve Why "Physics::Measure" depends on "SVG::Plot" ? (Sorry, I am too lazy to look into the source code.)

[21:39] *** habere-et-disper joined
[21:40] <discord-raku-bot> <librasteve> https://raku-advent.blog/2021/12/18/day-18-santa-and-the-magic-tree-m-tree/

[21:41] <discord-raku-bot> <antononcube> I remember this -- while reading / scanning it I started thinking "how to imlement random mandlas plots in Raku?"

[21:43] <habere-et-disper> Instead of :

[21:43] <habere-et-disper> multi foo ( 0 ) { 0 }

[21:43] <habere-et-disper> multi foo ( 1 ) { 1 }

[21:43] <habere-et-disper> Can I write two base cases together something like this :

[21:43] <habere-et-disper> m: multi foo ( 0 | 1 ) { $_ }

[21:43] <camelia> rakudo-moar 947b49c90: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Malformed parameter‚ê§at <tmp>:1‚ê§------> multi foo ( 0 |‚èè 1 ) { $_ }‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[21:49] <discord-raku-bot> <librasteve> m: subset ohone of Int where 0|1; multi bar(ohone $x) {7}; say bar 1; say bar 7;

[21:49] <discord-raku-bot> <Raku eval>  7  Exit code: 1 Cannot resolve caller bar(7); none of these signatures matches:     (Int $x where { ... })   in block <unit> at main.raku line 1  

[21:51] <discord-raku-bot> <librasteve> m: sub baz( $x where 0|1 ) {'ok'}; say baz 0;

[21:51] <discord-raku-bot> <Raku eval>  ok 

[22:54] <habere-et-disper> Subset -- ah great thanks @librasteve

[22:54] <habere-et-disper> üòÄ

