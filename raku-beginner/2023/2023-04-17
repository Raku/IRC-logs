[01:19] *** Heptite left
[01:47] *** Heptite joined
[02:12] *** tea3po joined
[02:12] *** tea3po left
[02:13] *** tea3po joined
[02:15] *** teatwo left
[05:42] *** samebchase joined
[07:50] *** habere-et-disper joined
[07:54] <habere-et-disper> Is this expected behaviour ? I was expecting the comment to not be included in the array?

[07:54] <habere-et-disper> my @foo = <

[07:54] <habere-et-disper> # Hello, World !

[07:54] <habere-et-disper> ¬†¬†¬† 1 2 3

[07:54] <habere-et-disper> >;

[07:54] <habere-et-disper> say @foo

[07:54] <habere-et-disper> [# Hello, World ! 1 2 3]

[07:58] *** dakkar joined
[08:27] <lizmat> m: say "# Hello World"

[08:27] <camelia> rakudo-moar 531049679: OUTPUT: ¬´# Hello World‚ê§¬ª

[08:28] <lizmat> < > is basically a single string with a processor to split on whitespace

[08:28] <lizmat> so yes, any comments inside a string *will* occur in the string

[08:29] <habere-et-disper> Thanks. :)

[08:30] <lizmat> m: dd < a b c >

[08:30] <camelia> rakudo-moar 531049679: OUTPUT: ¬´("a", "b", "c")‚ê§¬ª

[08:31] <lizmat> m: dd ' a b c '.words.List

[08:31] <camelia> rakudo-moar 531049679: OUTPUT: ¬´("a", "b", "c")‚ê§¬ª

[08:31] <lizmat> < > is just syntactic sugar

[09:01] <discord-raku-bot> <Nemokosch> actually, <> and words don't behave the same way with non-breaking space, and it would be good to know what the intention is

[09:02] <discord-raku-bot> <Nemokosch> https://github.com/Raku/problem-solving/issues/357

[09:17] *** habere-et-disper left
[09:48] *** Manifest0 joined
[10:26] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/04/17/2023-16-student-win/

[13:39] *** jgaz joined
[14:05] *** Heptite left
[14:11] *** tea3po left
[14:11] *** tea3po joined
[14:15] *** tea3po left
[14:16] *** tea3po joined
[14:52] *** Heptite joined
[16:39] *** dakkar left
[18:23] *** jgaz left
[18:23] *** jgaz joined
[21:15] <falsifian> m: my @x = (<0 1>, <a b>); zip @x

[21:15] <camelia> rakudo-moar 1fd667cf7: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "zip @x" in expression "zip @x" in sink context (line 1)‚ê§¬ª

[21:15] <falsifian> m: my @x = (<0 1>, <a b>); say zip @x

[21:15] <camelia> rakudo-moar 1fd667cf7: OUTPUT: ¬´(((0 1) (a b)))‚ê§¬ª

[21:16] <falsifian> Testing for bug report

[21:18] <discord-raku-bot> <Nemokosch> heh, don't say this is also bad üòÖ

[21:19] <falsifian> Filed https://github.com/rakudo/rakudo/issues/5247 . I brought it up here March 7; not sure if it counts as a bug or not

[21:19] <discord-raku-bot> <Nemokosch> I have spent quite a couple of hours on the other one today

[21:20] <discord-raku-bot> <Nemokosch> hit my limits but at least I think I know what the cause was

[21:20] <falsifian> Which other one?

[21:21] <discord-raku-bot> <Nemokosch> the one with the operators &&, ||, and

[21:21] <discord-raku-bot> <Nemokosch> also // it turns out

[21:21] <falsifian> Right; I thought of the zip one because of the comments on the gh issue

[21:22] <falsifian> Are you 2colours on gh?

[21:24] <discord-raku-bot> <Nemokosch> positive

[21:26] <falsifian> Well, thanks for digging into it. Maybe one of these days I'll start fixing the bugs instead of just finding them :)

[21:35] <discord-raku-bot> <Nemokosch> my particular problem is that I feel there needs to be some sort of decision

[21:35] <discord-raku-bot> <Nemokosch> because there is a clear contradiction between the supposed list associativity and the way arguments are handled

[21:56] *** jgaz left
[22:08] <discord-raku-bot> <Nemokosch> isn't the zip thing just because of the containers?

[22:09] <discord-raku-bot> <Nemokosch> m: $(<a b>) Z $(0, 1)

[22:09] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of "Z" in expression "$(<a b>) Z $(0, 1)" in sink context (line 1) 

[22:09] <discord-raku-bot> <Nemokosch> oops

[22:09] <discord-raku-bot> <Nemokosch> m: say $(<a b>) Z $(0, 1)

[22:09] <discord-raku-bot> <Raku eval>  (((a b) (0 1))) 

[22:13] <falsifian> Do you mean that's the reason it's happening, or that it should happen because of that?

[22:15] <falsifian> zip uses a single-argument-rule slurpy, and is documented as doing so. Single-argument-rule slurpies do unpack an array if it's the single argument, which would lead me to expect zip(@x) to do what I want

[22:16] <falsifian> m: sub f(+@a) { say @a.elems }; my @x=<a b c>; f(@x);

[22:16] <camelia> rakudo-moar 1fd667cf7: OUTPUT: ¬´3‚ê§¬ª

[22:16] <Manifest0> How can i use the %?RESOURCES variable? 

[22:16] <discord-raku-bot> <Nemokosch> in modules of distribution

[22:17] <discord-raku-bot> <Nemokosch> is there any reason this question got so popular lately, what brought it to your attention?

[22:17] <Manifest0> sorry i had the question typed since afternoon... and i wanted to press ctrl-k to delete it. Instead i pressed ctrl-j :-|

[22:18] <Manifest0> i made the question via email, cause it was easier to output the tree command.

[22:18] <Manifest0> Sorry for the noise

[22:18] <falsifian> Well I learned something new because of your question :)

[22:19] <Manifest0> falsifian: :-)

[22:19] <discord-raku-bot> <Nemokosch> it feels like this was the third or fourth question of this sort within like 2 days so it makes one wonder

[22:20] <discord-raku-bot> <Nemokosch> but yeah, distribution-related compile-time variables are only set in modules; I wonder if precompilation is also required for them to work

[22:20] <discord-raku-bot> <Nemokosch> i.e would they still work with no precompilation; set?

[22:21] <Manifest0> i can test it. How do i disable the precompilation?

[22:23] <discord-raku-bot> <Nemokosch> with that line of code

[22:23] <discord-raku-bot> <Nemokosch> you can just add it somewhere at the beginning I guess

[22:27] <Manifest0> do you mean outside of a function?

[22:29] <Manifest0> it runs outside a function and also inside a INIT block

[22:31] <discord-raku-bot> <Nemokosch> with no precompilation; added?

[22:31] <discord-raku-bot> <Nemokosch> I mean I sure hope it doesn't downright require precompilation to work üòÑ but wouldn't be sure

[22:36] <Manifest0> i don't know... This was the code i used: https://paste.opensuse.org/pastes/20cada3ce353

[22:37] <discord-raku-bot> <Nemokosch> well... you could just put no compilation; in front? üòÑ

[22:37] <discord-raku-bot> <Nemokosch> that's literally the pragma

[22:37] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/pragmas.html#precompilation

[22:38] <Manifest0> oh. let me try

[22:39] <Manifest0> Still works

[22:39] <discord-raku-bot> <Nemokosch> nice

[22:40] <discord-raku-bot> <Nemokosch> then that's probably it. It works within modules of a distribution

[22:58] <discord-raku-bot> <Nemokosch> falsifian: back to the zip

[22:59] <discord-raku-bot> <Nemokosch> what you have there is indeed a single argument slurpy and the top layer is not the problem

[22:59] *** habere-et-disper joined
[22:59] <discord-raku-bot> <Nemokosch> the problem is that this array looks like (A, B)

[22:59] <discord-raku-bot> <Nemokosch> where A and B are items

[23:00] <discord-raku-bot> <Nemokosch> the problem is with A and B - they have containers

[23:02] <discord-raku-bot> <Nemokosch> zip([<a b>, <1 2>]) is meant to be identical with $(<a b>) Z $(<1 2>)  - as you can say, it expands nicely to two arguments, that's not the problem

[23:02] <discord-raku-bot> <Nemokosch> the containers are

[23:02] <discord-raku-bot> <Nemokosch> s / say / see

[23:16] <falsifian> I'm a but fuzzy on containers, but I don't see why an argument being a container should matter here, when in many other situations it's transparent.

[23:17] <falsifian> m: my @x = (<0 1>, <a b>); say [Z] @x

[23:17] <camelia> rakudo-moar 1fd667cf7: OUTPUT: ¬´((0 a) (1 b))‚ê§¬ª

[23:17] <falsifian> Also, isn't that ^ inconsistent with zip either way?

[23:17] <falsifian> To be clear I'm arguing about what I want to happen. No clue about what's actually happening.

[23:17] *** habere-et-disper left
[23:19] <discord-raku-bot> <Nemokosch> m: my @x = (<0 1>, <a b>); say [~] @x;

[23:19] <discord-raku-bot> <Raku eval>  0 1a b 

[23:19] <discord-raku-bot> <Nemokosch> as you can see, the reduction itself also takes containers into account

[23:26] <discord-raku-bot> <Nemokosch> on the other hand, [Z] does actually omit the containers, lol

[23:36] <falsifian> What does the ~ example show? Output is the same as $(<0 1>) ~ $(<a b>) or just <0 1> ~ <a b>

[23:37] <discord-raku-bot> <Nemokosch> yes, fair enough... I tripped myself up big time

[23:41] <discord-raku-bot> <Nemokosch> still I think eventually it should work the same way as @x[0] Z @x[1] ; both should actually

[23:45] <discord-raku-bot> <Nemokosch> it would be good to know why anybody thought acting upon containerisation for Z and X was a good idea

[23:54] <falsifian> Just saw your explanation on gh #5247; thanks. I guess it is all consistent, in an annoying way.

[23:56] <discord-raku-bot> <Nemokosch> it irks me that [Z] does "the right thing", though, like apparently somebody did think of that a long long time ago

[23:56] <discord-raku-bot> <Nemokosch> to be honest, all this could be made consistent but that would require a level of collaboration that wasn't prevalent for many years

[23:57] <discord-raku-bot> <Nemokosch> hasn't been, rather

[23:59] <falsifian> The Perl and Raku conference is in my hometown this year. Maybe I should crash it in order to badger people about this.

