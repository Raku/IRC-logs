[00:43] <discord-raku-bot> <jaguart> stevied - do you want a code review of your mod (albeit from a newbie?) - I'll give it a go if you want, so I can learn too ðŸ™‚

[00:43] <discord-raku-bot> <Nemokosch> good morning :DD

[00:45] <discord-raku-bot> <jaguart> things like: dir-check fails if $dir.f -> but maybe should probably be fail unless $dir.d because symlinks - which might need a follow to see if they link to a file or a folder, etc.

[00:45] <discord-raku-bot> <jaguart> Morning Nemo ðŸ˜„

[01:03] <discord-raku-bot> <stevied> sure, absolutely

[01:04] <discord-raku-bot> <stevied> i'm not much past newb and have a lot to learn

[01:05] <discord-raku-bot> <jaguart> do you have any thoughts on how? I could create a github pull request and then we can comment on my alternates?

[01:05] <discord-raku-bot> <stevied> ok, let's try that

[01:05] <discord-raku-bot> <stevied> thanks!

[01:06] <discord-raku-bot> <jaguart> ok - give me a few hours, have some bits to do first

[01:06] <discord-raku-bot> <stevied> ok

[01:07] <discord-raku-bot> <stevied> I forget how to embed a variable in a variable: @.$ext-files

[01:07] <discord-raku-bot> <stevied> $ext is the variable

[01:07] <discord-raku-bot> <Nemokosch> and this is an attribute

[01:08] <discord-raku-bot> <Nemokosch> does @."$ext-files" not work?

[01:08] <discord-raku-bot> <Nemokosch> by the way, really, what is the obsession with this hack? :cameliathink:

[01:08] <discord-raku-bot> <stevied> doesn't work, no

[01:08] <discord-raku-bot> <Nemokosch> are Maps dull these days?

[01:08] <discord-raku-bot> <jaguart> do you mean you want to interpolate an attribute name? ala https://docs.raku.org/language/packages#Interpolating_into_names

[01:08] <discord-raku-bot> <stevied> yeah, an attribute

[01:09] <discord-raku-bot> <jaguart> never tried this for attributes thoug

[01:09] <discord-raku-bot> <stevied> ok, cool. that was the section I was looking for. forgot where to find it

[01:09] <discord-raku-bot> <Nemokosch> still not sure how this would apply to attributes

[01:10] <discord-raku-bot> <Nemokosch> I thought what I wrote would work for method calls at least

[01:10] <discord-raku-bot> <jaguart> sounds like an anti-pattern though - why not have %.dir where you lookup using %.dir{$ext}

[01:10] <discord-raku-bot> <stevied> yeah, good idea

[01:11] <discord-raku-bot> <jaguart> the ."" method lookup need parens I think - ."$ext"()

[01:11] <discord-raku-bot> <Nemokosch> m: my $lol = 'polymod'; say 5."$lol"();

[01:11] <discord-raku-bot> <Nemokosch> yes, I think it works

[01:11] <discord-raku-bot> <Nemokosch> had to realize there is no evalbot for the time being

[01:11] <discord-raku-bot> <Nemokosch> the cost of the bridge switchover

[01:11] <jaguart> did someone kill her :o

[01:12] <discord-raku-bot> <Nemokosch> the thing is, gfldex hosted the evalbot AND the bridge, they might have been the same program even

[01:13] <discord-raku-bot> <Nemokosch> so now that there was a bit of motion to get a bridge that isn't tied to gfldex but rather the discord mods, the evalbot function isn't solved yet

[01:13] <discord-raku-bot> <jaguart> so no m: use nqp;... ðŸ˜‰

[01:15] <discord-raku-bot> <Nemokosch> not gonna lie, this bridge looks nice at least, if it's written in plain old JS(/TS)

[01:15] <discord-raku-bot> <Nemokosch> maybe there can be a glot.io solution for evaling, we'll see, no stress for now ðŸ˜„

[01:16] <discord-raku-bot> <Nemokosch> the OG move would be to adopt the Camelia IRC bot, of course

[02:21] *** rf left
[03:40] *** rf joined
[04:15] *** rf left
[06:15] <discord-raku-bot> <jack9> m: my $str = 'x';  class Foo {   has $.x; }  say Foo.new.$str;

[06:49] <discord-raku-bot> <jaguart> jack9: maybe my $m = 'x'; class C { has $.x; }; say C.new(:x("y"))."$m"();

[06:51] <discord-raku-bot> <jaguart> the ."$m"() --> calls method by interpolated name  .""()

[08:52] *** dakkar joined
[10:05] <discord-raku-bot> <jack9> can you use c++ instantiation syntax in raku

[10:06] <discord-raku-bot> <Nemokosch> do you mean like new Classname?

[10:17] <discord-raku-bot> <jack9> yes

[10:36] <discord-raku-bot> <Nemokosch> You could fake it I guess but there doesn't seem to be any point. A constructor still has the API of a method.

[10:37] <discord-raku-bot> <Nemokosch> you could invent a prefix new operator, for example but not sure how it would add up

[10:47] <discord-raku-bot> <jack9> you can literally create operators in raku

[10:47] <discord-raku-bot> <jack9> with precedence?

[10:54] <discord-raku-bot> <Skarsnik> yes, you can even inject new grammar (slang)

[10:58] <discord-raku-bot> <jack9> raku be context sensitive

[11:06] <discord-raku-bot> <Nemokosch> yes, you can kind of create DSL's

[11:07] <discord-raku-bot> <Nemokosch> but this will probably be easier and more stable once the RakuAST developments mature

[11:11] *** ab5tract joined
[11:18] <discord-raku-bot> <jack9> RakuAST? is that a module to expose raku asts?

[11:21] <discord-raku-bot> <Nemokosch> a bit more than that: it's basically a new representation of Raku code

[11:21] <discord-raku-bot> <Nemokosch> a representation that both a compiler and an author can use

[11:23] <discord-raku-bot> <Nemokosch> as things stood for a long, long time, there was the written textual code and the Rakudo parser tried to turn it into its own VM representation, QAST

[11:24] <discord-raku-bot> <Nemokosch> QAST is something the Rakudo backends, especially MoarVM but I think basically all three, like to consume

[11:25] <discord-raku-bot> <Nemokosch> but it has quite little to do with Raku's syntax structure per se. A lot of things are dismantled and generated to leverage the backends that consume it

[11:26] <discord-raku-bot> <Nemokosch> so the idea was that it would be much easier to generate code, both for the compiler and especially for the authors, if there was a way to represent Raku code directly, without either having to parse it again or basically use a lower-level, highly compiler-specific structure that isn't really Raku

[11:27] <discord-raku-bot> <Nemokosch> I only took a couple of looks at it but I can say (and it's pretty much agreed by more experienced developers) that the compiler also got much cleaner, it's way easier to understand what is going on

[11:29] <discord-raku-bot> <Nemokosch> if you check #raku-dev-irc , it's (almost) all about RakuAST developments at the moment. The parser is not yet used but it's actively developed and one can try it on a fresh build of Rakudo with RAKUDO_RAKUAST=1 env

[11:30] <discord-raku-bot> <Nemokosch> and module authors can try generating code with RakuAST nodes already

[12:11] <discord-raku-bot> <jack9> so like, python ast but more

[12:20] <discord-raku-bot> <Nemokosch> probably something like that, yes

[13:40] <discord-raku-bot> <jack9> is there a way to see moar bytecode

[13:42] <discord-raku-bot> <Nemokosch> I think this is a #moarvm-irc kind of question

[14:28] *** rf joined
[14:48] <discord-raku-bot> <stevied> I'm not doing something right here: method has-legacy-extensions(*@exts where {@ext.grep: $_} )

[14:48] <discord-raku-bot> <stevied> I want to limit the arguments that can be passed to the strings that are in @ext

[15:06] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/01/23/2023-04-thank-you-jj/

[15:28] *** jgaz joined
[15:58] <rf> stevied: Try where { @ext.index($_) !~~ Nil }

[16:05] <discord-raku-bot> <Nahita> f(*@args where not @args (-) @allowed)

[16:07] <discord-raku-bot> <Nahita> f(*@args where @args âŠ† @allowed)

[16:20] *** NemokoschKiwi joined
[16:21] <discord-raku-bot> <stevied> @Nahita thanks! worked perfectly. even when for when @args is empty, which is what i want

[16:23] <discord-raku-bot> <Nemokosch> as a sidenote: *@args is a flattening slurpy, **@args is a structure-preserving slurpy and +@args is a slurpy that unrolls a single argument but otherwise it's like **@args

[16:24] <discord-raku-bot> <stevied> ok. yeah, forgot there were even different kinds of slurpies. you could literally write an entire book about signature arguments

[16:27] <discord-raku-bot> <stevied> there's a good reason raku took almost 20 years to write

[16:34] *** NemokoschKiwi left
[16:57] *** jgaz left
[17:11] *** jgaz joined
[17:36] *** dakkar left
[17:57] *** ab5tract left
[18:10] <discord-raku-bot> <Nemokosch> @jack9 https://mastodon.lol/@julia/109717916604491146 another similar example to what I did with augment class and adding a method

[20:44] *** discord-raku-bot left
[20:44] *** discord-raku-bot joined
[20:53] <discord-raku-bot> <stevied> any module for searching and replacing content in a single file?

[20:55] <discord-raku-bot> <Nemokosch> pretty sure you could run rak that way

[20:55] <discord-raku-bot> <Nemokosch> what do you have in mind?

[20:56] <discord-raku-bot> <stevied> I want to easily update a META6.json file. Find all instances of String X, Y, and Z and replace with String A, B, and C

[20:56] <discord-raku-bot> <stevied> I could roll it myself but would rather not

[20:58] <discord-raku-bot> <Nemokosch> okay, now there is not one pattern and one output but 3 literal strings

[20:58] <discord-raku-bot> <Nemokosch> it makes a difference, for the latter, trans might be a better fit

[20:58] <discord-raku-bot> <stevied> there could be less than 3 or many more than three

[20:59] <discord-raku-bot> <Nemokosch> what do you need these indefinite string subsitutions for?

[21:00] <discord-raku-bot> <stevied> updating the names of file extensions

[21:01] <discord-raku-bot> <Nemokosch> I'm thinking if the META6 module is more convenient to work with

[21:15] <discord-raku-bot> <Nemokosch> so yeah

[21:16] <discord-raku-bot> <stevied> this one? https://raku.land/zef:jonathanstowe/META6

[21:16] <discord-raku-bot> <Nemokosch> yep

[21:16] <discord-raku-bot> <Nemokosch> use META6; my $meta = META6.new(file => 'META6.json'); # whatever file path

[21:17] <discord-raku-bot> <stevied> how does that make it easier for me to edit an existing file?

[21:18] <discord-raku-bot> <Nemokosch> by reading that existing file and turning it into an object and a map?

[21:19] <discord-raku-bot> <stevied> yeah. other option is to just do a slup of the file and do some regexes on it

[21:19] <discord-raku-bot> <stevied> that's easier for me, at least

[21:19] <discord-raku-bot> <Nemokosch> well then do that

[21:20] <discord-raku-bot> <Nemokosch> I for one think it's harder, besides being more fragile

[21:22] <discord-raku-bot> <stevied> is the provides section the only part of the file that would have file extensions?

[21:23] <discord-raku-bot> <stevied> I think it is.

[21:23] <discord-raku-bot> <Nemokosch> in theory the resources part could also contain relevant files, although it typically wouldn'

[21:24] <discord-raku-bot> <stevied> true, at least not related to the operation of the module. thought I should probably exclude that directory when I search for legacy extensions

[21:24] <discord-raku-bot> <stevied> actually, there are probably other dirs like that. hmmm.

[21:27] <discord-raku-bot> <stevied> using a regex will leave a smaller footprint. won't mess with the persons' whitespace or anything like that.

[21:28] <discord-raku-bot> <Nemokosch> whether the latter is a good thing could be debated

[21:29] <discord-raku-bot> <stevied> can you think of a time when .t or .pod6 files would ever be listed in META6.json?

[21:29] <discord-raku-bot> <Nemokosch> pod6 I could imagine in the resources, especially if you are finanalyst who really fancies Raku-native formats for basically everything

[21:30] <discord-raku-bot> <Nemokosch> by the way, I'm also somewhat disappointed by the META6 module, I thought it would have a nicer interface...

[21:31] <discord-raku-bot> <stevied> yeah, I don't think the module should touch anything in resources

[21:31] <discord-raku-bot> <Nemokosch> the question is really, how much foolproof you want to be, how much it's a problem if some files get unwanted modifications

[21:32] <discord-raku-bot> <stevied> well, the user will have an opportunity to review what gets changed before the module does anything

[21:32] <discord-raku-bot> <stevied> at least in the command line version of the module

[21:34] <discord-raku-bot> <p6steve> https://github.com/jonathanstowe/META6 maybe could help

[21:34] <discord-raku-bot> <stevied> i think if I do a regex in just the "provides" section of the file and replace extensions between .\w+" I should be safe

[21:34] <discord-raku-bot> <Nemokosch> been there ðŸ˜›

[21:36] <discord-raku-bot> <Nemokosch> you know

[21:36] <discord-raku-bot> <Nemokosch> I'd be curious of a parser module

[21:36] <discord-raku-bot> <Nemokosch> that can give you a cursor in the file to the parsed nodes

[21:36] <discord-raku-bot> <Nemokosch> where they start, where they end

[21:36] <discord-raku-bot> <Nemokosch> I don't know if there is such a thing, and especially not how to look for this concept

[21:37] <discord-raku-bot> <stevied> seems like it could be done easily enough with json

[21:40] <discord-raku-bot> <Nemokosch> anyway, this is getting a bit trivia style

[21:40] <discord-raku-bot> <Nemokosch> it would be good to have a META6.json scheme "set into stone" more or less, I wouldn't be surprised if a valid scheme could be parsed with regex only even

[21:41] <discord-raku-bot> <Nemokosch> no deep nesting

[21:43] <discord-raku-bot> <stevied> yeah, you'd think there would be a parser for existing meta6 files

[21:45] <discord-raku-bot> <stevied> oh, wait, that module can

[21:48] <discord-raku-bot> <Nemokosch> it can but it discards whitespace and stuff

[21:50] <discord-raku-bot> <stevied> well, what I'm thinking is I do a hybrid approach. grab the provides section as json, make my changes to it, and then do a regex to replace the provides section in the original file

[21:52] <discord-raku-bot> <jaguart> watch out for mi6 build though - that rewrites the provides section based on the file system

[21:52] <discord-raku-bot> <jaguart> in fact - maybe that's what you want? update teh filesystem and then run mi6 build

[21:52] <discord-raku-bot> <stevied> i'm changing the names of the files in the filesystem first so that shouldn't be a problem

[21:53] <discord-raku-bot> <jaguart> yeah - but that's exactly what mi6 does for you

[21:53] <discord-raku-bot> <stevied> but mi6 build would change their meta6.json file all around

[21:53] <discord-raku-bot> <stevied> i don't want to touch anythign other than the file extensions

[21:53] <discord-raku-bot> <jaguart> true - it does a sanity check that the provides matches the file system - because bad things happen when they dont

[21:54] <discord-raku-bot> <jaguart> and there seems little point in fixing something broken so it is still broken ðŸ™‚

[21:55] <discord-raku-bot> <jaguart> also mi6 has been tested against a lot of modules and is in active use on multi platforms...

[21:55] <discord-raku-bot> <jaguart> how are you going to get all the dists to accept your pull requests?

[21:56] <discord-raku-bot> <jaguart> esp given that many of them don't respond, even after years of peep asking?

[21:57] <discord-raku-bot> <jaguart> are you going to fork all the dists? ðŸ˜®

[21:57] <discord-raku-bot> <stevied> yeah, i'm going to fork all of them locally

[21:58] <discord-raku-bot> <stevied> probably just do a few a day to start to see how it goes

[21:58] <discord-raku-bot> <stevied> it'll help weed out module that have been abandoned

[21:59] <discord-raku-bot> <jaguart> I see that your #166 fix is released in mi6 ðŸ™‚

[22:01] <discord-raku-bot> <stevied> yeah, gotta test it out.

[22:02] *** NemokoschKiwi joined
[23:05] *** NemokoschKiwi left
[23:06] <discord-raku-bot> <Nemokosch> #166 fix of what?

[23:06] <discord-raku-bot> <Nemokosch> btw @jaguart the evalbot doesn't... exist, yet

