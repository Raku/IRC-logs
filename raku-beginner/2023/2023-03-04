[01:10] *** MasterDuke left
[01:37] *** MasterDuke joined
[03:44] *** rf left
[05:36] *** kjp left
[05:39] *** kjp joined
[06:31] *** Heptite left
[06:42] *** Sussysham joined
[06:43] *** Sussysham left
[08:25] *** Sussysham joined
[09:36] *** Sussysham left
[10:48] *** Sussysham joined
[10:51] *** Sussysham left
[10:52] *** NemokoschKiwi joined
[11:04] *** NemokoschKiwi left
[12:23] <discord-raku-bot> <el gatito (** advocate)> m:perl say infix:<//>.WHY 

[12:23] <discord-raku-bot> <Raku eval>  No documentation available for type 'Any'.  Perhaps it can be found at https://docs.raku.org/type/Any 

[12:23] <discord-raku-bot> <Nemokosch> you missed &

[12:24] <discord-raku-bot> <el gatito (** advocate)> m:perl say &infix:<//>.WHY 

[12:24] <discord-raku-bot> <Raku eval>  No documentation available for type 'Sub+{Precedence}'.  Perhaps it can be found at https://docs.raku.org/type/Sub+{Precedence} 

[12:24] <discord-raku-bot> <Nemokosch> welp, kinda sad

[12:25] <discord-raku-bot> <el gatito (** advocate)> m:perl say &infix:<+>.WHY 

[12:25] <discord-raku-bot> <Raku eval>  No documentation available for type 'Sub+{is-pure}+{Precedence}'.  Perhaps it can be found at https://docs.raku.org/type/Sub+{is-pure}+{Precedence} 

[12:26] <discord-raku-bot> <el gatito (** advocate)> built in functions doesn‚Äôt have inspectable pod üò≠

[12:27] <discord-raku-bot> <Nemokosch> very much afraid this is for "performance reasons"

[12:27] <lizmat> historically, yes

[12:28] <discord-raku-bot> <el gatito (** advocate)> ‚Äúwe don‚Äôt put docs inside builtins because we are not python‚Äù

[12:29] <lizmat> I don't think there was any thought like that ever

[12:30] <lizmat> I do think we're in a position now to make it fetch documentation, or at least provide a better link nowadays

[12:30] <lizmat> it's just low on the triage list

[12:31] <discord-raku-bot> <el gatito (** advocate)> now there is no excuses not to

[12:32] <discord-raku-bot> <Nemokosch> be ready for a "well volunteered", haha

[12:33] <lizmat> ferry vunny

[12:35] <lizmat> "pay it forward" I'd say

[12:38] <discord-raku-bot> <el gatito (** advocate)> m: sub a {} #= italic bold  say &a.WHY

[12:39] <discord-raku-bot> <Raku eval>  *italic* **bold** 

[12:39] <discord-raku-bot> <el gatito (** advocate)> m: sub a {} #= <C code>  say &a.WHY

[12:39] <discord-raku-bot> <Raku eval>  <C code> 

[12:40] <lizmat> yes, that works *after* the settings have been compiled

[12:40] <lizmat> it does *not* work at the moment the infix ops are compiled

[12:40] <lizmat> bootstrapping is hard

[13:05] <lizmat> el gatito Nemokosch https://github.com/rakudo/rakudo/commit/faff909125

[13:06] <discord-raku-bot> <el gatito (** advocate)> how to pull out the invocant argument of the caller i have a &super function instead of having to write super(self) i want to just write super to call it on self

[13:12] <lizmat> m: class A { method a() { b() } }; sub b() { dd CALLER::.hash<self> }; A.a    # naive method

[13:12] <camelia> rakudo-moar faff90912: OUTPUT: ¬´Cannot access 'self' through CALLER, because it is not declared as dynamic‚ê§  in sub b at <tmp> line 1‚ê§  in method a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:12] <lizmat> m: class A { method a() { b() } }; sub b() { dd CALLER::.pairs.first(*.key eq "self").value }; A.a   # sneaky, but still no go

[13:12] <camelia> rakudo-moar faff90912: OUTPUT: ¬´Rakudo::Internals::LoweredAwayLexical‚ê§¬ª

[13:13] <lizmat> in any case, using CALLER:: means you have no hope on any significant optimizations

[13:15] <lizmat> in the (nearer) future, you could think of super() as a macro, and that would be able to do TRT

[13:15] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   say CALLER }  (sub { f })() 

[13:15] <discord-raku-bot> <Raku eval>  (CALLER) 

[13:15] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   say CALLER }  sub g { f }  g 

[13:15] <discord-raku-bot> <Raku eval>  (CALLER) 

[13:16] <discord-raku-bot> <el gatito (** advocate)> TRT?

[13:16] <lizmat> The Right Thing

[13:17] <discord-raku-bot> <el gatito (** advocate)> who cares üòé

[13:18] <lizmat> https://docs.raku.org/language/packages.html#Pseudo-packages

[13:18] <discord-raku-bot> <Nemokosch> umm, I'm not sure the replies are carried through the IRC

[13:18] <discord-raku-bot> <Nemokosch> just saying xd

[13:18] <discord-raku-bot> <Nemokosch> the replied message, that is

[13:18] <lizmat> you mean: [14:17:49]  <discord-raku-bot>	<el gatito (** advocate)> who cares üòé

[13:19] <lizmat> ?

[13:19] <discord-raku-bot> <Nemokosch> yep

[13:19] <discord-raku-bot> <Nemokosch> what did it refer to?

[13:19] <lizmat> I have no idea

[13:20] <discord-raku-bot> <Nemokosch> well, the optimizations

[13:20] <discord-raku-bot> <el gatito (** advocate)> > in any case, using CALLER:: means you have no hope on any significant optimizations

[13:20] <discord-raku-bot> <Nemokosch> but yeah the point is that using discord replies can have surprising results on the IRC

[13:21] <lizmat> well, if someone wants to use Raku in production, they *would* appreciate care being taken wrt to optimizations

[13:21] <lizmat> yeah, perhaps we the bot would need to be improved, or the bridge should be closed down

[13:21] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CALLER }  sub g { f }  g; 

[13:21] <discord-raku-bot> <Raku eval>  CALLER 

[13:22] <discord-raku-bot> <el gatito (** advocate)> ok nothing useful

[13:22] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CALLER; }  sub g {   $x = 1;   f; }  g; 

[13:22] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '$x' is not declared at /home/glot/main.raku:6 ------>   ‚èè$x = 1; 

[13:22] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CALLER; }  sub g {   my $x = 1;   f; }  g; 

[13:22] <discord-raku-bot> <Raku eval>  CALLER 

[13:23] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CALLER::; }  sub g {   my $x = 1;   f; }  g; 

[13:23] <discord-raku-bot> <Raku eval>  PseudoStash.new(("\$!" => Nil,"\$/" => Nil,"\$x" => Rakudo::Internals::LoweredAwayLexical,"\$¬¢" => Nil)) 

[13:23] <discord-raku-bot> <el gatito (** advocate)> cent variable wtf

[13:24] <discord-raku-bot> <Nemokosch> seems funky

[13:24] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CALLER::<$x>; }  sub g {   my $x = 1;   f; }  g; 

[13:24] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot access '$x' through CALLER, because it is not declared as dynamic   in sub f at main.raku line 2   in sub g at main.raku line 7   in block <unit> at main.raku line 10  

[13:25] <discord-raku-bot> <el gatito (** advocate)> ü§®

[13:25] <discord-raku-bot> <Nemokosch> I think this is some deliberate protectional mechanism

[13:25] <discord-raku-bot> <Nemokosch> rather than a technical constraint

[13:25] <lizmat> indeed

[13:26] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CALLER::.hash<$x>; }  sub g {   my $x = 1;   f; }  g; 

[13:26] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot access '$x' through CALLER, because it is not declared as dynamic   in sub f at main.raku line 2   in sub g at main.raku line 7   in block <unit> at main.raku line 10  

[13:26] <lizmat> m: my $x is dynamic = 42; sub f() { dd CALLER::<$x> }; f

[13:26] <camelia> rakudo-moar faff90912: OUTPUT: ¬´Int $x = 42‚ê§¬ª

[13:27] <discord-raku-bot> <el gatito (** advocate)> i can't get lexical vars smh

[13:27] <lizmat> and thus also goes any possibility of optimizing the access to $x out of thwe windos

[13:27] <lizmat> *window

[13:28] <lizmat> lexical variables are only visible in the scope they are defined in, and any inner scopes

[13:29] <discord-raku-bot> <el gatito (** advocate)> maybe ill inspect the outer call frame and get that variable

[13:29] <discord-raku-bot> <Nemokosch> really, what you are trying to do is exactly what dynamic variables are for

[13:31] <discord-raku-bot> <el gatito (** advocate)> self is not dynamic tho

[13:32] <discord-raku-bot> <Nemokosch> that's right, and I'm not talking about that

[13:33] <discord-raku-bot> <el gatito (** advocate)> what i want is getting the self variable bruh

[13:34] <discord-raku-bot> <Nemokosch> Well I can't relate to that. Seems a bit bizarre, if anything

[13:36] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CallFrame.new(1).my<$x>; }  sub g {   my $x = 1;   f; }  g; 

[13:36] <discord-raku-bot> <Raku eval>  Rakudo::Internals::LoweredAwayLexical 

[13:36] <discord-raku-bot> <el gatito (** advocate)> now i only need to get the content of LoweredAwayLexical

[13:38] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CallFrame.new(1).my<$x>.^methods; }  sub g {   my $x = 1;   f; }  g; 

[13:38] <discord-raku-bot> <Raku eval>  (method dynamic (Rakudo::Internals::LoweredAwayLexical: *%_) { #`(Method|3187602760608) ... }, submethod BUILDALL (Any:D: ;; @auto, %init, *%_) { #`(Submethod|3187543758640) ... }) 

[13:39] <discord-raku-bot> <el gatito (** advocate)> now im treading into cursed territory lol

[13:39] <discord-raku-bot> <el gatito (** advocate)> m:perl sub f {   dd CallFrame.new(1).my<$x>.dynamic; }  sub g {   my $x = 1;   f; }  g; 

[13:39] <discord-raku-bot> <Raku eval>  Bool::False 

[13:41] <discord-raku-bot> <el gatito (** advocate)> ok there are no solutions to that i give up üò≠

[13:47] *** QhpAptyj9hj0RQwM joined
[13:48] <lizmat> yeah, this will only be solvable with macros

[13:56] <discord-raku-bot> <el gatito (** advocate)> or use python üòé

[13:56] <discord-raku-bot> <Nemokosch> how do you do this in Python? ü§î

[13:57] <discord-raku-bot> <Nemokosch> where "explicit is better than implicit"

[14:02] <discord-raku-bot> <el gatito (** advocate)> py import inspect  def super_(o=None, /):   # None = object not specified   if o is None:     o = inspect.currentframe().f_back.f_locals['self']    # do super logic here 

[14:04] <discord-raku-bot> <el gatito (** advocate)> .f_back gets the outer frame and .f_locals gets the vars in its scope

[14:07] <discord-raku-bot> <Nemokosch> yeah this is isn't sane code for sure lol

[14:25] <discord-raku-bot> <lakmatiol> well, this is about what python super() does (not quite, since you actually need both the type and the object for super(), but the idea is there)

[14:26] <discord-raku-bot> <lakmatiol> the type is in a closure cell, the object is the first argument of the call.

[14:29] <discord-raku-bot> <lakmatiol> which is why you can do something like this py def f(__class__):   def g(u):     a=__class__     return super()   return g >>> f(object)(1)  <super: object, 1> 

[14:29] <discord-raku-bot> <lakmatiol> I thought you just did one of callnextsame things in raku though

[14:31] <discord-raku-bot> <el gatito (** advocate)> that does not guarantee that you will call the method in the superclass it might call another multi candidate in the same class

[14:32] * lizmat doesn't understand why you wouldn't want to re-dispatch

[14:32] <discord-raku-bot> <Nemokosch> super itself kinda violates "explicit is better than implicit" and does so in a weird way

[14:32] <lizmat> but I guess I'm suffering from Stockholm syndrome  :-)

[14:34] <discord-raku-bot> <Nemokosch> Remember super().init kinda calls? I doubt it's even possible to argue for the sanity of that

[14:34] <discord-raku-bot> <Nemokosch> It hides what it should expose (self) and exposes what it should house (dunder magic)

[14:35] <discord-raku-bot> <Nemokosch> *hide

[14:38] <discord-raku-bot> <el gatito (** advocate)> lizmat: i have demonstrated that several times https://glot.io/snippets/gidp0msau6

[14:39] <lizmat> of which I said that the observed behaviour might actually be a dispatch bug, but no one has made an issue for it yet ?

[14:40] <discord-raku-bot> <lakmatiol> practicality beats purity

[14:40] <discord-raku-bot> <lakmatiol> and writing super(__class__, self) in every single piece of code half a dozen times is just kind of silly

[14:40] <discord-raku-bot> <Nemokosch> It's not practical

[14:40] <discord-raku-bot> <el gatito (** advocate)> yes it is

[14:41] <discord-raku-bot> <Nemokosch> Practical would be bare super for the constructor call

[14:41] <discord-raku-bot> <Nemokosch> Like in Java

[14:41] <discord-raku-bot> <lakmatiol> ye, delegating the the super constructor is quite ugly

[14:41] <discord-raku-bot> <lakmatiol> but alas, no one could invent an adequate pep for that

[14:41] <discord-raku-bot> <el gatito (** advocate)> i agree

[14:41] <discord-raku-bot> <Nemokosch> It's the worst of two worlds really

[14:41] <discord-raku-bot> <el gatito (** advocate)> super.__init__

[14:42] <discord-raku-bot> <lakmatiol> well, there are other methods that you want to delegate to

[14:42] <discord-raku-bot> <lakmatiol> though the ctor is the most common

[14:43] *** rf joined
[14:44] <discord-raku-bot> <el gatito (** advocate)> super() at this point would be super.__call__ tho (java trap)

[14:44] <discord-raku-bot> <lakmatiol> yeah, python isn't a well designed language

[14:44] <discord-raku-bot> <lakmatiol> but it's limping along somehow

[14:44] <discord-raku-bot> <Nemokosch> Anyway, this can be done well, as illustrated by e.g Java and Object Pascal

[14:45] <discord-raku-bot> <Nemokosch> Perhaps C# too, after all, that's a hybrid of these two

[14:45] <discord-raku-bot> <lakmatiol> yeah, most languages do just make super a keyword

[14:45] <discord-raku-bot> <lakmatiol> python... didn't

[14:45] <discord-raku-bot> <lakmatiol> so you get this weird patch

[14:46] <lizmat> m: class A { method a() { dd } }; class B is A { method a() { dd; self.^mro[1].a } }; B.a    # how about using .^mro ?

[14:46] <camelia> rakudo-moar dde366eec: OUTPUT: ¬´method a(B: *%_)‚ê§method a(A: *%_)‚ê§¬ª

[14:46] <discord-raku-bot> <el gatito (** advocate)> lizmat: that is exactly what my super does

[14:47] <discord-raku-bot> <Nemokosch> If somebody threw the mugs yesterday, I'd definitely submit an RFC to forbid methods as a distinct thing

[14:47] <lizmat> m: class A { method a() { dd } }; class B is A { method a() { dd; self.^mro[1].^find_method("a")(self) } }; B.a   # more functional

[14:47] <camelia> rakudo-moar dde366eec: OUTPUT: ¬´method a(B: *%_)‚ê§method a(A: *%_)‚ê§¬ª

[14:48] <discord-raku-bot> <Nemokosch> Python also rather doesn't have methods, they are just bound subs

[14:49] <discord-raku-bot> <Nemokosch> JS doesn't have methods at all

[14:49] <discord-raku-bot> <el gatito (** advocate)> you meanperl class A {   sub foo(\self) {     say 'foo';   }   sub bar(\self, $baz) {     say "bar$baz";   } } 

[14:49] <rf> I think Raku has bound subs too in a way

[14:49] <rf> Which imo is the right way to approach methods

[14:50] <discord-raku-bot> <el gatito (** advocate)> js methods are like python but the self/this is implicit

[14:51] <discord-raku-bot> <Nemokosch> But it also has methods that refuse sub semantics often

[14:51] <discord-raku-bot> <Nemokosch> Confer slurped named arguments

[14:52] <discord-raku-bot> <Nemokosch> Also, no straightforward way to reference

[14:52] <discord-raku-bot> <lakmatiol> well, a fun difference is that JS binds this at call time, while python binds this at attribute access time.

[14:52] <rf> m: class Foo { method bar { 'baz' } }; my Foo $foo .= new; my &m = $foo.^methods[0]; say &m($foo);

[14:52] <camelia> rakudo-moar dde366eec: OUTPUT: ¬´baz‚ê§¬ª

[14:52] <rf> Thought ^ was pretty neat

[14:52] <discord-raku-bot> <el gatito (** advocate)> implicit *%_ üò≠

[14:53] <lizmat> https://raku.land/github:nxadm/StrictNamedArguments

[14:55] <discord-raku-bot> <el gatito (** advocate)> if you don't want to install that package, you can do this method foo(*%()) 

[14:56] <discord-raku-bot> <Nemokosch> rf: that's metamodel land quite clearly

[14:56] <discord-raku-bot> <el gatito (** advocate)> does that make a practical difference

[14:56] <discord-raku-bot> <el gatito (** advocate)> even then method_table is better

[14:56] <discord-raku-bot> <el gatito (** advocate)> rf: ^

[14:57] <discord-raku-bot> <Nemokosch> Yes, it does make a practical difference

[14:58] <discord-raku-bot> <Nemokosch> It really does

[14:58] <discord-raku-bot> <Nemokosch> In JS, obj.foo is really just a clueless function

[14:58] <discord-raku-bot> <Nemokosch> You need to make sure you bind it

[14:59] <discord-raku-bot> <el gatito (** advocate)> actually yesjs const a = {   foo() {     return this;   }, };  const aFoo = a.foo; console.log(aFoo()); // [object Window] 

[14:59] <discord-raku-bot> <el gatito (** advocate)> js funny

[15:00] <discord-raku-bot> <Nemokosch> Part of the reason why arrow functions are welcome

[15:00] <discord-raku-bot> <Nemokosch> You want to wrap these calls always

[15:00] <discord-raku-bot> <Nemokosch> So that you don't expose a dangling this

[15:01] <discord-raku-bot> <el gatito (** advocate)> btw im installing wsl just to publish my Super module

[15:02] <discord-raku-bot> <Nemokosch> ü•∫ good luck

[15:02] <discord-raku-bot> <Nemokosch> WSL is good usually

[16:05] *** guifa_ left
[16:14] *** Heptite joined
[16:42] *** gfldex left
[16:52] *** gfldex joined
[16:57] *** gfldex left
[17:00] *** gfldex joined
[17:26] *** guifa joined
[19:12] *** QhpAptyj9hj0RQwM left
[19:31] *** falsifian joined
[19:45] *** QhpAptyj9hj0RQwM joined
[20:15] *** QhpAptyj9hj0RQwM left
[20:23] *** ab5tract left
[20:23] *** ab5tract joined
[20:34] *** ab5tract left
[20:35] *** ab5tract joined
[20:45] *** ab5tract left
