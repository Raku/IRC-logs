[00:52] *** spider-pig left
[01:47] *** guifa joined
[05:33] *** swaggboi left
[05:43] *** Summer left
[05:43] *** Summer joined
[06:29] *** swaggboi joined
[06:48] *** guifa left
[06:48] *** thowe left
[06:49] *** thowe joined
[06:49] *** guifa joined
[10:14] <discord-raku-bot> <rcmlz> done

[12:20] *** Summer left
[12:20] *** Summer joined
[12:51] *** Summer left
[12:51] *** Summer joined
[13:21] *** Summer left
[13:22] *** Summer joined
[13:52] *** Summer left
[13:53] *** Summer joined
[14:23] *** Summer left
[14:23] *** Summer joined
[14:53] *** Summer left
[14:54] *** Summer joined
[15:24] *** Summer left
[15:25] *** Summer joined
[15:55] *** Summer left
[15:55] *** Summer joined
[16:25] *** Summer left
[16:26] *** Summer joined
[16:56] *** Summer left
[16:57] *** Summer joined
[17:02] *** swaggboi left
[17:27] *** Summer left
[17:27] *** Summer joined
[17:38] *** swaggboi joined
[17:57] *** Summer left
[17:58] *** Summer joined
[18:28] *** Summer left
[18:29] *** Summer joined
[18:59] *** Summer left
[18:59] *** Summer joined
[19:30] *** Summer left
[19:30] *** Summer joined
[20:00] *** Summer left
[20:01] *** Summer joined
[20:30] *** swaggboi left
[20:31] *** Summer left
[20:31] *** Summer joined
[20:56] *** mcmillhj joined
[21:00] <mcmillhj> What is the best way to map over two elements of an array at the same time (with overlaps)? For example given `[1, 2, 3, 4, 5]` you would produce `(1 2) (2 3) (3 4) (4 5)`. I had been using `@a Z a.tail(* - 1)` but wasn't sure if there a simpler / more concise way to do this?

[21:02] *** Summer left
[21:02] <mcmillhj> Maybe something with rotor?

[21:02] *** Summer joined
[21:02] <discord-raku-bot> <nemokosch> yep

[21:02] <discord-raku-bot> <nemokosch> first off, @a Z @a.skip is a direct improvement

[21:02] <discord-raku-bot> <nemokosch> but the OG version would be @a.rotor(2 => -1)

[21:03] <mcmillhj> shoot, I missed that in the docs. `@a.rotor(2 => -1)` is what I was looking for.

[21:03] <discord-raku-bot> <nemokosch> there is a good video about tricks like this, one sec

[21:03] <discord-raku-bot> <nemokosch> https://www.youtube.com/watch?v=LvFTyvYM-ds

[21:03] <mcmillhj> oooh, thank you !

[22:14] *** swaggboi joined
[23:03] <mcmillhj> Sorry, another question. Is there a way to apply the reduction meta operator from the right? So if I have an array [1,2,3] I would get 2-3=1, 1-1=0

[23:05] <mcmillhj> oops, 2-3=-1, 1-1 = 2

[23:05] <mcmillhj> oops, 2-3=-1, 1- -1 = 2

[23:12] <discord-raku-bot> <nemokosch> the associativity of the operator decides

[23:27] *** mcmillhj left
