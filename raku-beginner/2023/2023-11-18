[00:13] *** lizmat_ joined
[00:15] *** lizmat left
[00:18] *** lizmat_ left
[00:18] *** lizmat joined
[03:18] *** nicole left
[03:18] *** nicole joined
[07:40] *** lucs_ joined
[07:44] *** lucs left
[08:14] *** CIAvash joined
[09:07] *** CIAvash left
[11:33] <discord-raku-bot> <librasteve> o/

[11:34] <discord-raku-bot> <librasteve> (how) can an enum be used in a regex or grammar token to match it's .keys?

[14:15] <discord-raku-bot> <nemokosch> Do you know <?{}>

[16:53] <discord-raku-bot> <librasteve> oh yes - thanks!

[17:24] <discord-raku-bot> <scullucs> Er, I don't. How does that work?

[17:53] <discord-raku-bot> <librasteve> i have used it like this before: my regex number {     \S+                     #grab chars     <?{ +"$/" ~~ Real }>    #assert coerces via '+' to Real }

[17:55] <discord-raku-bot> <librasteve> it's a lookahead assertion (ie a wrapper for a function) where the regex matches only if the the fn is True

[17:57] <discord-raku-bot> <librasteve> so I guess with an enum its like this...

[17:58] <discord-raku-bot> <librasteve>  enum Colour <red green blue>;  my regex colour {     \S+                     #grab chars     <?{ "$/" ~~ Colour }>   #assert checks match string is Colour } 

[18:21] *** habere-et-disper joined
[18:35] <discord-raku-bot> <Nahita> m: my enum E<yes no>; say so "this has yes in it" ~~ / @(E.keys) /

[18:35] <discord-raku-bot> <Raku eval>  True 

[18:36] <discord-raku-bot> <librasteve> m: my enum E<yes no>; say so "this has yes in it" ~~ / @<E.keys> /

[18:36] <discord-raku-bot> <Raku eval>  False 

[18:37] <discord-raku-bot> <librasteve> m: my enum E<yes no>; say so "this has yes in it" ~~ / <E.keys> /

[18:37] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1) at /home/glot/main.raku:1 ------> no>; say so "this has yes in it" ~~ / <E⏏.keys> /     expecting any of:         term 

[18:38] <discord-raku-bot> <librasteve> @Nahita  - yes that's even better ...tx!

[18:39] <discord-raku-bot> <librasteve> (strangely I read the docs about interpolation in a regex like '$()' yesterday, but already forgot the '@()'

[18:39] <discord-raku-bot> <librasteve> )

[19:00] <discord-raku-bot> <scullucs> @librasteve, @Nahita thanks for the examples.

[19:07] *** deadmarshal_ left
[19:12] *** deadmarshal_ joined
[20:11] *** habere-et-disper left
[21:17] *** habere-et-disper joined
[21:42] <habere-et-disper> I have a working grammar but the files to parse are embedded in handcrafted HTML. The grammar starts with an unambiguous marker. How do I ignore the cruft on either side of what I want to parse?

[23:34] <MasterDuke> `.*<unambiguous marker>.*`? or maybe try `.subparse`, instead of `.parse`

[23:59] <habere-et-disper> Thanks, I'll give that a go. Rather than `.*` I thought matching anything but the marker would be clearer but I'm not sure how to invert the match of a fixed string.

