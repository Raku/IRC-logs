[00:32] *** Heptite left
[00:33] *** habere-et-disper joined
[02:25] *** teatwo joined
[02:25] *** teatwo left
[02:26] *** teatwo joined
[02:27] *** teatwo left
[02:28] *** teatwo joined
[02:28] *** tea3po left
[02:38] *** habere-et-disper left
[07:35] *** Manifest0 joined
[07:59] *** dakkar joined
[08:41] *** ab5tract left
[11:19] *** Heptite joined
[11:33] <discord-raku-bot> <Anton Antonov> Is it a good idea a module with a certain name,  say "WWW::OpenAI", to provide "plugins" for other modules? (With very different namespaces.)

[11:33] <discord-raku-bot> <Anton Antonov> For example, I consider making a plugin for "Text::CodeProcessing" that "automatically" evaluates "OpenAI" cells, named "Text::CodeProcessing::OpenAI".  But instead of having a separate module-repository, I would like to add that plugin in ""WWW::OpenAI".

[11:41] <discord-raku-bot> <Nemokosch> please don't forget that dependencies are modules, not distributions (my opinion aside), and that naming distributions after modules might be a bad practice overall (supposedly they should have "portable", file system friendly names)

[11:44] <discord-raku-bot> <Nemokosch> Since dependencies are modules, I don't think it really matters where you add a certain module, as long as a distribution "provides" it. The only thing that might really affect your decision at the moment is that dependency resolution takes the metadata of the distribution into account, so the versioning of your module will probably be affected by the versioning of the distribution itself, and hence

[11:44] <discord-raku-bot> everything else that resides in that distribution.

[11:47] *** ab5tract joined
[12:01] <discord-raku-bot> <Anton Antonov> @Nemokosch Thank you for your detailed response! I remember seeing and reading your messages on distribution subject(s). Apparently, I forgot the "main morals" from them.

[12:04] *** Heptite left
[13:23] *** jgaz joined
[14:21] *** teatime joined
[14:22] *** teatwo left
[14:26] <discord-raku-bot> <rcmlz> @Anton Antonov I did a bit of research on JupyterLabs Raku syntax highlighting - it is apparently based on codemirror and in order to get Raku highlighting the Codemirror project expects someone to create a npm package based on this template https://github.com/codemirror/lang-example and publish it to npm, so it can be independently installed and maintained from codemirror itself. Looking again at existing

[14:26] <discord-raku-bot> languages definitions I conclude they use Grammars and not RegExes as is PrismJS. Perhaps I will give it a whirle ...

[15:16] *** Heptite joined
[16:34] *** dakkar left
[17:43] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/04/24/2023-17-releaseperiod/

[21:09] <gfldex> m: sub mode(:$a, :$b) { „{'ro' if $a}{',z' if $b}“ }; dd mode(:a, :!b); dd mode(:a, :b); dd mode();

[21:09] <camelia> rakudo-moar 6235256a5: OUTPUT: «"ro"␤"ro,z"␤""␤»

[21:09] <gfldex> avuserow: ^^^ I knew this was a simple problem. It was just difficult to solve. :->

[21:10] <gfldex> ohh, there is something missing

[21:12] <gfldex> m: sub mode(:$a, :$b) { „{':ro' if $a}{',z' if $b}“ }; dd mode(:a, :!b); dd mode(:a, :b); dd mode();

[21:12] <camelia> rakudo-moar 6235256a5: OUTPUT: «":ro"␤":ro,z"␤""␤»

[21:12] <gfldex> there we go

[21:16] *** jgaz left
[21:23] <gfldex> m: sub mode(*%h (:$a, :$b)) { %h.&{ .all, .any, .none}».so.say; }; dd mode(:a, :!b); dd mode(:a, :b); dd mode();

[21:23] <camelia> rakudo-moar 6235256a5: OUTPUT: «(True True False)␤Bool::True␤(True True False)␤(True False True)␤Bool::True␤Bool::True␤»

[21:24] <gfldex> Now that is cool. By using a subsignature I can reason with Junctions about the named arguments of a sub.

[23:30] *** jgaz joined
[23:37] *** Manifest0 left
