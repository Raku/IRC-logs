[00:52] *** razetime joined
[02:35] *** jgaz left
[02:40] *** jgaz joined
[02:40] *** teatwo left
[02:40] *** teatwo joined
[04:06] *** razetime left
[05:13] *** razetime joined
[05:40] *** siavash joined
[05:42] *** razetime left
[05:43] *** razetime joined
[05:55] *** siavash left
[05:57] *** siavash joined
[06:24] *** siavash left
[06:26] *** siavash joined
[06:54] *** siavash left
[07:53] *** dakkar joined
[08:26] *** razetime left
[08:54] *** razetime joined
[09:03] *** siavash joined
[09:03] *** siavash2 joined
[09:03] *** siavash2 left
[09:06] *** siavash left
[09:07] *** siavash joined
[11:27] *** razetime left
[11:31] <discord-raku-bot> <knorrfg> Hey, me again üòÑ I'm currently experimenting with rakus pkgs. I'd like to be able to store all dependencies for a script together with a script. I've used zef's -to argument to store the installed dependencies to a directory "zeftest" that lies next to a test script. And if I run the test-script like this: RAKULIB="inst#/tmp/zeftest" raku foo.raku it works. But I'd like to put that information into the

[11:31] <discord-raku-bot> script. I've tried: %*ENV<RAKULIB> = "inst#" ~ $*PROGRAM.dirname ~ "/zeftest"; which unsurprisingly didn't work, and i tried use lib $*PROGRAM.dirname ~ "/zeftest"; but that didn't work either. Is it possible?

[12:01] *** siavash left
[12:02] <lizmat> knorrfg why so difficult?  why not make a distribution with said script in the "bin" dir and all the dependencies in the META6.json?

[12:02] <lizmat> afk&

[12:15] *** tea3po joined
[12:17] *** teatime joined
[12:19] *** teatwo left
[12:20] *** tea3po left
[12:27] <discord-raku-bot> <knorrfg> I'm not aware of any of that. I'll read up what that means ^^ I simply want a repo that contains raku script to only have rakudo as dependency, even if I use packages, the easier the better

[12:38] <discord-raku-bot> <nemokosch> Yes, this sounds like a very commonsensical approach to modularity, one that works without any fanfares in a lot of languages from JS and Python to Java and Ada

[13:16] *** teatwo joined
[13:20] *** teatime left
[14:31] *** teatwo left
[14:31] *** teatwo joined
[16:36] *** dakkar left
[16:40] *** deoac joined
[16:43] <deoac> m: my regex foo { <?after W> X | X <?before Y> }

[16:43] <camelia> rakudo-moar 794d89a4f: ( no output )

[16:43] <deoac> m: 'WXa' ~~ /<foo>/

[16:43] <camelia> rakudo-moar 794d89a4f: OUTPUT: ¬´No such method 'foo' for invocant of type 'Match'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:44] <deoac> m: my regex foo { <?after W> X | X <?before Y> }; 'WXa' ~~ /<foo>/ ; 'aXY' ~~ /<foo>/; 'aXa' ~~ /<foo>/

[16:44] <camelia> rakudo-moar 794d89a4f: ( no output )

[16:45] <deoac> m: my regex foo { <?after W> X | X <?before Y> }; say so 'WXa' ~~ /<foo>/ ; say so  'aXY' ~~ /<foo>/; say so 'aXa' ~~ /<foo>/

[16:45] <camelia> rakudo-moar 794d89a4f: OUTPUT: ¬´True‚ê§True‚ê§False‚ê§¬ª

[16:45] <deoac> good, that one worked.

[16:46] <deoac> Is there a more idiomatic way of matching an 'X' that is either *before* a 'Y' or *after* a 'W' ?

[20:17] <deoac> Within a grammar, what is the difference between 'token foo {...}' and 'my token foo {...}' ?

[21:21] <snonux> i guess one (the one with "my") is lexically scoped (i don't know, really)

[22:21] *** tea3po joined
[22:24] *** teatwo left
[22:59] *** deoac left
[23:03] *** teatwo joined
[23:07] *** tea3po left
[23:25] *** gfldex_ joined
[23:26] *** hexology- joined
[23:28] *** lizmat_ joined
[23:32] *** lizmat left
[23:32] *** hexology left
[23:32] *** gfldex left
