[01:32] <discord-raku-bot> <aloussase> what is the equivalent of haskell cons operator in raku?

[01:32] <discord-raku-bot> <aloussase> to add an item to the start or end of a list returning the new list

[02:01] <MasterDuke> m: my @a = 1, 3; my @b = |@a, 4; dd @b; dd @a

[02:01] <camelia> rakudo-moar e22987f4c: OUTPUT: «Array @b = [1, 3, 4]␤Array @a = [1, 3]␤»

[02:03] <MasterDuke> m: my @a = 1, 3; my @b = (@a.flat, 4).flat; dd @b; dd @a

[02:03] <camelia> rakudo-moar e22987f4c: OUTPUT: «Array @b = [1, 3, 4]␤Array @a = [1, 3]␤»

[02:03] <discord-raku-bot> <antononcube> @aloussase Please give a LISP interpretation of what you asking.

[02:04] <discord-raku-bot> <aloussase> I guess in LISP that would be literally cons, though my lisp is a bit rusty

[02:31] *** Summer left
[02:31] *** Summer joined
[02:33] <discord-raku-bot> <antononcube> I was mostly joking.

[02:33] <discord-raku-bot> <antononcube> I thin you can to use .append and .prepend.

[04:32] *** camelia left
[04:38] *** camelia joined
[08:29] <discord-raku-bot> <librasteve> alousasse: in raku there are several classes that represent an ordered set of elements - Seq, List and Array - are the most common, As with much of raku, the functionality is stacked (using Positional & Iterator roles) which you can see from the TypeGraph here https://docs.raku.org/type/Array#typegraphrelations

[08:30] <discord-raku-bot> <librasteve> My guess is that you looked at the class List page in the raku docs https://docs.raku.org/type/List and thus couldn't see the append prepend methods,

[08:31] <discord-raku-bot> <librasteve> That's because Array is a mutable List and is the place for all mutating operations which you can see in the methods list (open the content pane) in the class Array page here https://docs.raku.org/type/Array#method_append ...

[08:35] <discord-raku-bot> <librasteve> There are some other cool features that raku Arrays bring as the most "advanced" variant. For example, an array has it's own sigil and literal syntax. And it can hold typed elements as in my Int @a = [1,2,3]  and this brings a lot of nice features such as multi-dimensions, shape and so on. In contrast a List is (usually) stored in a scalar container like my $l = 1,2,3

[08:36] <discord-raku-bot> <librasteve> That said, you may not want all this and prefer an immutable (functional) approach with Lists (that's fine too ... this is raku, you get to choose!)

[08:37] <discord-raku-bot> <librasteve> So to (finally) answer your first question, to append or prepend a value to a List, you make a new List (since the List is immutable) like this:

[08:48] <discord-raku-bot> <librasteve>  dd my $l1 = (1,2,3); dd my $l2 = (|$l1, 4);  dd my $l3 = (0, |$l2); 

[11:51] *** Summer left
[11:51] *** Summer joined
[12:21] *** Summer left
[12:22] *** Summer joined
[13:23] *** Summer left
[13:23] *** Summer joined
[13:54] *** Summer left
[13:54] *** Summer joined
[14:24] *** Summer left
[14:25] *** Summer joined
[14:55] *** Summer left
[14:55] *** Summer joined
[15:26] *** Summer left
[15:26] *** Summer joined
[15:56] *** Summer left
[15:57] *** Summer joined
[16:27] *** Summer left
[16:27] *** Summer joined
[16:58] *** Summer left
[16:58] *** Summer joined
[17:28] *** Summer left
[17:29] *** Summer joined
[17:59] *** Summer left
[17:59] *** Summer joined
[18:30] *** Summer left
[18:30] *** Summer joined
[19:00] *** Summer left
[19:01] *** Summer joined
[19:31] *** Summer left
[19:31] *** Summer joined
[20:02] *** Summer left
[20:02] *** Summer joined
[20:32] *** Summer left
[20:33] *** Summer joined
[21:03] *** Summer left
[21:03] *** Summer joined
[21:34] *** Summer left
[21:34] *** Summer joined
[22:04] *** Summer left
[22:05] *** Summer joined
[22:12] *** Summer left
[23:06] *** Summer joined
