[00:59] <discord-raku-bot> <nhail> Alright, followup to last question. Here's my current testing code for this program:   sub sendMpvCommand(*@args) {     my $sentCommand = shell "echo '\{\"command\":[\"{@args.join('", "')}\"]}' | socat - /tmp/mpvsocket", :out;     return 'got: '~ $sentCommand.out.slurp: :close; }  my $mpvproc = Proc::Async.new(<mpv --idle --input-ipc-server=/tmp/mpvsocket>); $mpvproc.start; sleep 1;     say

[00:59] <discord-raku-bot> sendMpvCommand('quit')   This technically works, but there are some major issues. First off, the sleep 1. The code doesn't work without it, and it also doesn't work when that is replaced with await $mpvproc.ready, so there must be some additional delay between "ready" and the socket actually recieving data.  Second, I'm getting output in my stdout from the mpv proc. My terminal looks like this after running the code: 

[00:59] <discord-raku-bot> > ./async_testing.raku Exiting... (Quit) got: {"data":null,"request_id":0,"error":"success"}  I can tell that Exiting... (Quit) is not supposed to be there, because it's not prefixed with got:, like I would expect if it was coming from the sendMpvCommand function

[01:00] <discord-raku-bot> <nhail> (Sorry for the text wall btw, hopefully someone can help)

[01:52] <discord-raku-bot> <nemokosch> I suppose that's where you'd want a react block or something alike

[02:00] <discord-raku-bot> <nhail> I hate to say "write my code for me", but would you be able to provide an example of a react block here? Try as I might, I haven't really been able to figure it out from the documentation

[02:01] <discord-raku-bot> <nhail> I understand tap because I'm used to javascript's addEventListener

[02:02] <discord-raku-bot> <nhail> but react still doesn't quite make sense to me

[02:14] <discord-raku-bot> <nhail> Well, I found a working system with tap

[02:15] <discord-raku-bot> <nhail> but I still get the $mpvProc's stdout getting sent to my terminal

[02:30] <discord-raku-bot> <nhail> Fixed by adding nohup

[04:35] *** razetime joined
[04:41] *** teatwo joined
[04:41] *** razetime left
[04:44] *** tea3po left
[05:08] *** razetime joined
[05:22] *** siavash joined
[07:30] *** siavash left
[07:35] *** siavash joined
[11:22] *** siavash left
[11:29] *** razetime left
[12:23] <discord-raku-bot> <nemokosch> I think I've used react like once but even that code got left behind at my previous workplace

[13:25] <discord-raku-bot> <antononcube> Hmâ€¦ I think I have used react a few times because of Cro and trying to make some semi-interactive applications.

[14:48] <discord-raku-bot> <_elcaro_> I'm no  expert either, but perhaps you can try Github code search for uses of react block in Raku https://github.com/search?scopeName=All+repos&scope=&q=language%3ARaku+%2Freact%5Cs*%5C%7B%2F&type=code I skimmed the first page, and there's at least one example using a Proc::Async (in â€Žlib/Fez/Util/Proc.rakumod), but I don't know if it suits your use case specificially.

[16:42] *** teatwo left
[16:42] *** teatwo joined
[16:47] *** teatwo left
[18:46] <discord-raku-bot> <librasteve> there is a difference between react the JS framework and raku react

[18:46] <discord-raku-bot> <librasteve>  sub send-mpv-command(*@args) {     my $sent-command = start {         run "echo '\{\"command\":[\"{@args.join('", "')}\"]}' | socat - /tmp/mpvsocket", :out;     }     await $sent-command;     return 'got: '~ $sent-command.out.slurp: :close; }  my $mpv-proc = Proc::Async.new(<mpv --idle --input-ipc-server=/tmp/mpvsocket>); $mpv-proc.start; sleep 1;     react {     whenever signal(SIGINT) {         say

[18:46] <discord-raku-bot> send-mpv-command('quit');         exit;     } } 

[18:46] <discord-raku-bot> <librasteve> ^^^ here's what my friend ChatGPT suggestes

[18:47] <discord-raku-bot> <librasteve> https://docs.raku.org/language/concurrency#react

[18:48] <discord-raku-bot> <librasteve> although both do reactive programming

[19:17] <discord-raku-bot> <antononcube> What is the shortest elegant way to produces a list of results of repeated function: [$a, f($a), f(f($a)), f(f(f($a))) ...]  ? I have a solution using produce is not that elegant: produce( -> $x, $y {f($x)}, $a, | (0...3)) .

[19:19] <discord-raku-bot> <nemokosch> does the sequence operator not work for this?

[19:20] <discord-raku-bot> <nemokosch> $a, &f ... *

[19:27] <discord-raku-bot> <antononcube> @nemokosch Seems to work! ðŸ˜²

[19:45] <discord-raku-bot> <librasteve> ^^ nice

[19:46] <discord-raku-bot> <librasteve> or maybe function composition

[19:46] <discord-raku-bot> <librasteve> Function composition lets us take advantage of the idea that f(g(x)) will always return the same value for a given value of x. And as such we can create a new function h where h(x) == f(g(x)). The composition operator (âˆ˜ or o) lets use define h without having to formally wrap the functions :

[19:46] <discord-raku-bot> <librasteve> my &h = &f âˆ˜ &g; # or my &h = &f o &g;

[19:49] <discord-raku-bot> <librasteve> https://docs.raku.org/routine/o%2C%20infix%20âˆ˜

[19:59] <discord-raku-bot> <librasteve> say 'Hello World!';  sub f($p){ say 'f'; $p / 2 }   my &c1 = &f âˆ˜ &f; say c1 2;  my &c2 = âˆ˜; say c2 2;

[19:59] <discord-raku-bot> <librasteve> ^^ sorry little o is hard to read on discord

[20:17] <discord-raku-bot> <lakmatiol> raku > sub f($x) {$x + 1} &f > [\o] (&f xx 10) andthen $_>>.(1) (2 3 4 5 6 7 8 9 10 11) this does work, but it is less efficient than the ... solution

[21:19] <discord-raku-bot> <antononcube> @librasteve Thanks! I had similar idea, but I want to get a list of the values not just the final result. So, I was looking for a solution that of @lakmatiol . (And, yes, @nemokosch  gives the best solution. I am surprised I did not "know it"...)

[22:36] <discord-raku-bot> <antononcube> I know that if I have the functions A and B then I can use both  A(B(x, y))  and (&A o &B).(x, y) . My question where is the definition and usage description of "the dot" .  before (x,y) ?

[22:37] <discord-raku-bot> <antononcube> Also, how it is called? I assumed it is described in, say, Signature , or it has to something with .meth  , etc.

[23:21] *** kjp left
[23:24] *** kjp joined
