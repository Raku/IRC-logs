[00:08] *** deoac joined
[00:12] *** deoac left
[01:35] *** habere-et-disper left
[03:23] *** rf left
[04:23] *** Heptite left
[06:22] *** jacob37 joined
[06:25] *** jacob37 left
[06:47] *** tea3po left
[06:48] *** tea3po joined
[06:49] *** tea3po left
[06:49] *** tea3po joined
[06:50] *** tea3po left
[06:51] *** tea3po joined
[09:10] *** dakkar joined
[11:10] *** dakkar left
[11:12] *** dakkar joined
[14:10] <lizmat> and yet another Rakudo Weekly News hit the Net: https://rakudoweekly.blog/2023/03/13/2023-11-ainions/   (yesterday already :-)

[15:17] *** rf joined
[17:05] *** Heptite joined
[17:37] *** dakkar left
[18:40] *** ToddAndMargo joined
[18:43] <ToddAndMargo> regex question.  in the following string "1.2.3.4" where only the dots are consistent and the numbers will vary, how do I  locate the last dot and delete the dot and everything after it?

[18:47] <ToddAndMargo> This is what I have so far:

[18:47] <ToddAndMargo> $x="1.2.3.4"; $x~~s/  (.*) $( Q[.] )  /Z/; print $0 ~"\n"; print "$x\n";

[18:47] <ToddAndMargo> 1.2.3

[18:47] <ToddAndMargo> Z4

[18:47] <ToddAndMargo> it works, but it is ugly

[18:49] <ToddAndMargo> Have not figured ot how to use "$" to mean the end of the line

[18:50] *** teatwo joined
[18:53] *** tea3po left
[19:16] <discord-raku-bot> <Nahita> $s.subst(/ '.' <-[.]>* $$/) is an alternative; it matches a literal dot, followed by anything-but-dot 0 or more times until the end of a line

[19:16] <discord-raku-bot> <Nahita> $$ marks end-of-line, $ does end-of-string

[19:17] <discord-raku-bot> <Nahita> second argument-less .subst removes what matches, so the last dot and what's after it till the end are gone

[19:18] *** jgaz joined
[19:18] <discord-raku-bot> <Nahita> the anything-but-dot there helps pinpoint the last dot

[19:19] <discord-raku-bot> <Nemokosch> > Have not figured ot how to use "$" to mean the end of the line

[19:19] <discord-raku-bot> <Nemokosch> whitespace would help here; $() specifically means "make a Scalar value of it"

[19:33] *** yoreei joined
[19:39] <ToddAndMargo> Is there any way to just drop the ` $x~~s/  (.*) $( Q[.] )  /Z/` and grab $0 without first assigning the `s/` to $x?

[20:03] *** sivoais left
[20:16] *** yoreei left
[20:18] <discord-raku-bot> <Nahita> well after removing things, what's left is equivalent to $0.Str, no? so $x.subst(/ '.' <-[.]>* $$/)

[20:19] <discord-raku-bot> <Nahita> or you can match the other part with $x.match(/ .* <?before '.'> /)

[20:19] <discord-raku-bot> <Nahita> that gives a match object

[20:22] <ToddAndMargo> actually I meant with a regex

[20:22] <discord-raku-bot> <Nemokosch> these are all regexes

[20:24] <ToddAndMargo> Thank you!

[20:30] *** yoreei joined
[20:35] <ToddAndMargo> Found a pretty way!

[20:35] <ToddAndMargo> my $x="1.2.3.4"; S/ (.*) $( Q[.] ) // given $x; print $0 ~ "\n";

[20:35] <ToddAndMargo> 1.2.3

[20:39] <yoreei> Hello, I was wondering why specifying a type constraint breaks the following code snippet:

[20:39] <yoreei> $_="a,b,c,d";

[20:39] <yoreei> dd split(',',$_);                 #("a", "b", "c", "d").Seq

[20:39] <yoreei> my @A=split(',',$_);

[20:39] <yoreei> dd @A;                           #Array @A = ["a", "b", "c", "d"]

[20:39] <yoreei> my Array @A2=split(',',$_);

[20:39] <yoreei> dd @A2;                         #Type check failed for an element of @A2; expected Array but got Str ("a")

[20:39] <yoreei>                                        # in block <unit> at ./raku.raku line 194

[20:39] <yoreei> For @A, the Seq is eagered into an Array, but not for @A2. I would have expected that it works in both cases

[20:39] <yoreei> The error message is also a bit strange. It looks as if it's trying to give only the first element of the Seq to @A2

[20:39] <yoreei> Can anybody help me make sense of this?

[20:43] <discord-raku-bot> <Nemokosch> Array @something means an Array whose elements are... Arrays

[20:44] <discord-raku-bot> <Nemokosch> m: Array @foo; say @foo.WHAT;

[20:44] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> Array⏏ @foo; say @foo.WHAT;     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop 

[20:44] <discord-raku-bot> <Nemokosch> oops

[20:44] <discord-raku-bot> <Nemokosch> m: my Array @foo; say @foo.WHAT;

[20:44] <discord-raku-bot> <Raku eval>  (Array[Array]) 

[20:45] <discord-raku-bot> <Nemokosch> if you want to specify the type constraint on the symbol itself, use the is trait

[20:45] <discord-raku-bot> <Nemokosch> m: my @foo is List; say @foo.WHAT;

[20:45] <discord-raku-bot> <Raku eval>  (List) 

[20:52] <yoreei> That's interesting. I am reading Learning Perl 6 and they have some examples like:

[20:52] <yoreei>     my Int $number;

[20:52] <yoreei>     $number = 137;

[20:52] <yoreei>     $number = 'Hamadryas';  # NOPE! Error

[20:52] <yoreei> So Int here describes the type that the container $number holds, the same way Array described what the array A2 holds?

[20:52] *** ToddAndMargo left
[20:54] <discord-raku-bot> <Nemokosch> in this analogy, "the array A2" holds multiple things, it doesn't have an identity on its own

[20:54] <discord-raku-bot> <Nemokosch> its elements have identities each

[20:55] <discord-raku-bot> <Nemokosch> actually, you cannot even set a default value for the array - you can set a default value for an individual element of it

[20:55] <discord-raku-bot> <Nemokosch> m: my @foo is default(42); say ++@foo[22];

[20:55] <discord-raku-bot> <Raku eval>  43 

[21:00] <yoreei> Thanks, Nemokosch, things are clearer now :)

[21:01] *** jgaz left
[21:02] <discord-raku-bot> <Nemokosch> no problem, and keep it up ^^

[21:03] *** sivoais joined
[21:22] *** yoreei left
[21:59] *** Heptite left
[22:31] *** elcaro left
