[00:05] *** kjp left
[00:37] *** kjp joined
[01:53] *** deoac joined
[02:00] <deoac> The docs describe `.fmt` for type/Cool: "[fmt is the] equivalent to calling sprintf with $format as format and the invocant as the second argument."

[02:01] <deoac> m: printf('There are %d %s in a %s', 52, 'cards', 'deck')

[02:01] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «There are 52 cards in a deck»

[02:01] <deoac> m: (52, 'cards', 'deck').fmt('There are %d %s in a %s')

[02:01] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «Your printf-style directives specify 3 arguments, but 1 argument was supplied␤  in block <unit> at <tmp> line 1␤␤»

[02:02] <deoac> Is the documentation inaccurate?

[02:28] *** deoac left
[04:06] *** teatwo joined
[04:09] *** tea3po left
[04:37] *** razetime joined
[05:31] *** siavash joined
[05:55] *** razetime left
[06:01] *** razetime joined
[06:36] *** razetime left
[07:28] *** ab5tract joined
[08:07] <gfldex> m: (deoac).fmt('% asked a question.');

[08:07] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    deoac used at line 1␤␤»

[08:08] <gfldex> m: <deoac>.fmt('% asked a question.');

[08:08] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «' asked a question.' is not valid in sprintf format sequence '% asked a question.'␤  in block <unit> at <tmp> line 1␤␤»

[08:08] <gfldex> m: <deoac>.fmt('%s asked a question.');

[08:08] <camelia> rakudo-moar fc8bf7c00: ( no output )

[08:08] <gfldex> This is what „as the second argument“ means.

[08:09] <gfldex> m: <a b c>.fmt('%s %s %s');

[08:09] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «Your printf-style directives specify 3 arguments, but 1 argument was supplied␤  in block <unit> at <tmp> line 1␤␤»

[08:09] <gfldex> It would make sense to | the argument when called on a list.

[08:10] <gfldex> m: Slip.new(<a b c>).fmt('%s %s %s');

[08:10] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «Your printf-style directives specify 3 arguments, but 1 argument was supplied␤  in block <unit> at <tmp> line 1␤␤»

[08:18] *** tea3po joined
[08:21] *** teatwo left
[08:32] <gfldex> m: \('a', 'b', 'c').fmt('%s %s %s');

[08:32] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «Cannot resolve caller fmt(Capture:D, Str:D); Routine does not have any candidates.  Is only the proto defined?␤  in block <unit> at <tmp> line 1␤␤»

[08:49] *** wafflus joined
[09:12] <siavash> m: say <a b c>.fmt: '%s', ', '

[09:12] <camelia> rakudo-moar fc8bf7c00: OUTPUT: «a, b, c␤»

[09:13] <siavash> deoac: You are using `fmt` method on a list: https://docs.raku.org/type/List#method_fmt

[10:07] *** wafflus left
[12:21] *** siavash left
[12:21] *** siavash joined
[12:25] *** razetime joined
[13:22] *** siavash left
[18:05] *** razetime left
[20:19] *** teatwo joined
[20:22] *** tea3po left
[20:38] *** habere-et-disper joined
[20:46] <habere-et-disper> Why can I write :

[20:46] <habere-et-disper> m: say <Hello, World!>.antipairs.Hash{ 'World!' }

[20:46] <camelia> rakudo-moar 978e2d789: OUTPUT: «1␤»

[20:46] <habere-et-disper> But not as a method chain over 2 lines ?

[20:56] <habere-et-disper> m: (<Hello, World!>.antipairs

[20:56] <camelia> rakudo-moar 978e2d789: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> (<Hello, World!>.antipairs⏏<EOL>␤    expecting any…»

[20:56] <habere-et-disper>                 .Hash{ 'World!' }).raku

[20:57] <habere-et-disper> How do I ask Camelia to take a line break ?

[22:28] <lizmat> m: say "foo";␤ say "bar"

[22:28] <camelia> rakudo-moar 978e2d789: OUTPUT: «foo␤bar␤»

[22:29] <lizmat> habere-et-disper: ^^^    add a ␤ to your expression, and camelia will change that to a \n in your code

[22:30] <habere-et-disper> So like :

[22:30] <habere-et-disper> m: m: <Hello, World!>.antipairs␤.Hash{ 'World!' }

[22:30] <camelia> rakudo-moar 978e2d789: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:2␤------> .Hash⏏{ 'World!' }␤    expecting any of:␤        infix␤        infix stop…»

[22:32] <habere-et-disper> Is that expected behaviour ? I was surprised.

[22:34] <lizmat> habere-et-disper: looks like you found a grammar bug

[22:34] <habere-et-disper> Okay -- thanks.

[22:35] <lizmat> please file an issue for it  :-)

[22:36] <lizmat> grammar bugs have become very rare the past years :-)

[22:42] <habere-et-disper> Sure -- in rakudo/rakduo ?

[22:50] <lizmat> yes, please

[23:02] <habere-et-disper> https://github.com/rakudo/rakudo/issues/5369

[23:33] *** habere-et-disper left
