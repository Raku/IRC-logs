[00:23] *** jgaz left
[02:26] <discord-raku-bot> <jack9> nqp

[02:32] <discord-raku-bot> <jack9> can a parameter be both positional and named

[03:06] <discord-raku-bot> <Nemokosch> Could you give an example?

[03:10] <discord-raku-bot> <jack9>  sub f(<pos-or-named>$x) {   $x }  f(1) # 1 f(:x(1)) # 1 

[03:11] <discord-raku-bot> <jack9> @Nemokosch

[03:14] <rf> jack9: multi sub

[03:14] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { say $x }; f(4); f(:x<abc>);

[03:14] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «4␤abc␤»

[03:15] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { f(:$x) }; f(4); f(:x<abc>);

[03:15] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «4␤abc␤»

[03:15] <discord-raku-bot> <jack9> looks cumbersome but ok

[03:16] <jaguart> m: multi sub f(:$x) { say $x }; multi sub f($x) { say $x }; f(4); f(:x<abc>);

[03:16] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «4␤abc␤»

[03:16] <jaguart> m: multi sub f(:$x) { say $x }; multi sub f($x) { say $x }; f(4); f(:yabc>);

[03:16] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> lti sub f($x) { say $x }; f(4); f(:yabc>⏏);␤    expecting any of:␤        prefix␤        term␤»

[03:16] <rf> You may be able to use slurpies

[03:16] <jaguart> m: multi sub f(:$x) { say $x }; multi sub f($x) { say $x }; f(4); f(y:<abc>);

[03:16] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unsupported use of y///.  In Raku please use: tr///.␤at <tmp>:1␤------> }; multi sub f($x) { say $x }; f(4); f(y⏏:<abc>);␤»

[03:16] <jaguart> argh

[03:17] <jaguart> m: multi sub f(:$x) { say $x }; multi sub f($x) { say $x }; f(4); f(:y<abc>);

[03:17] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «4␤Cannot resolve caller f(:y(Str)); none of these signatures matches:␤    (:$x)␤    ($x)␤  in block <unit> at <tmp> line 1␤␤»

[03:17] <jaguart> so even though you passed in one arg (a pair) it was NOT matched against the multi with 1 arg

[03:17] <rf> Yes

[03:18] <rf> I am trying to understand how it does this, but I think it will be awhile.

[03:18] <rf> Moar code is plentiful

[03:18] <jaguart> we need to be able to create sigs that say 'and no named args' somehow

[03:19] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { f(:$x) }; f(4); f((x => 123));

[03:19] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «4␤x => 123␤»

[03:19] <rf> If you wrap in parens it counts as a pair.

[03:20] <jaguart> yeah - but when writing utils you dont really want to hamstring the caller

[03:20] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { f(:$x) }; f(4); f: x => 123;

[03:20] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> sub f($x) { f(:$x) }; f(4); f: x => 123;⏏␤    expecting any of:␤        prefix␤        term␤»

[03:20] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { f(:$x) }; f(4); f: (x => 123);

[03:20] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «WARNINGS for <tmp>:␤4␤Useless use of constant value x => 123 in sink context (line 1)␤Useless use of "x => 123" in sink context (line 1)␤»

[03:21] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { f(:$x) }; f(4); f: :x<abc>

[03:21] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «WARNINGS for <tmp>:␤4␤Useless use of constant value :x<abc> in sink context (line 1)␤Useless use of ":x<abc>" in sink context (line 1)␤»

[03:22] <rf> m: multi sub f(:$x) { say $x }; multi sub f($x) { f(:$x) }; f(4); f: :x<abc>;

[03:22] <camelia> rakudo-moar dfcb5f47a: OUTPUT: «WARNINGS for <tmp>:␤4␤Useless use of ":x<abc>" in sink context (line 1)␤Useless use of constant value :x<abc> in sink context (line 1)␤»

[03:22] <rf> I'm gonna quit while im ahead hahaha

[03:22] <jaguart> even `multi sub (Pair:D $p )` doesnt seem to work

[03:22] <rf> You have to wrap, same reason 1, 2, 3, 4 can be interpreted as args rather than a list iirc

[03:58] *** rf left
[06:00] *** jaguart left
[06:00] *** jaguart joined
[07:56] <discord-raku-bot> <Nemokosch> Yes, I think this is plain old syntactic ambiguity

[08:03] <discord-raku-bot> <Nemokosch> So it's not like Pairs are reinterpreted as named arguments - this calling syntax is for named arguments

[09:09] *** dakkar joined
[13:20] *** discord-raku-bot left
[13:38] *** jgaz joined
[13:56] *** rf joined
[16:12] *** Heptite left
[16:13] *** discord-raku-bot joined
[16:25] *** stevied_test left
[16:28] *** discord-raku-bot left
[16:28] *** discord-raku-bot joined
[16:49] *** stevied_test joined
[17:35] *** dakkar left
[18:22] *** Heptite joined
[18:56] *** NemokoschKiwi joined
[19:00] *** NemokoschKiwi left
[19:56] *** ab5tract joined
[20:31] *** ab5tract left
[20:47] <discord-raku-bot> <stevied> can someone point me the docs for handling args for a raku command line script? can't find it

[20:47] <discord-raku-bot> <stevied> looking for how to do getopt, specifically

[20:48] <discord-raku-bot> <stevied> ok, just found it: https://docs.raku.org/language/create-cli

[21:08] *** rf left
[21:13] *** rf joined
[21:25] <discord-raku-bot> <Nemokosch> Getopt::Long6 is pretty good, too

[21:25] <discord-raku-bot> <Nemokosch> and it integrates with sub MAIN reasonably well

[22:02] *** rf left
[22:18] *** guifa_ left
[22:25] *** deoac joined
[22:27] <deoac> I would like to create a regex like this: `^ h <foo> e <foo> l <foo> l <foo> o <foo> $`

[22:27] <deoac> `I tried 'Hello'.comb.join(<foo>)` without success

[22:28] <deoac> Any ideas?

[22:35] <discord-raku-bot> <Nemokosch> hm, not sure you can generate such a regex just yet. However, this time around, it is actually close, RakuAST code generation reached the experimental stage

[22:35] <discord-raku-bot> <Nemokosch> for now, the "stable solution" would involve EVAL

[22:41] <jaguart> m: ("rx/ " ~ "Hello".comb.join(<foo>) ~ " /").EVAL

[22:41] <camelia> rakudo-moar 69fa6bbaf: ( no output )

[22:41] <jaguart> m: ("rx/ " ~ "Hello".comb.join(<foo>) ~ " /").EVAL.raku

[22:41] <camelia> rakudo-moar 69fa6bbaf: ( no output )

[22:42] <jaguart> m: ("rx/ " ~ "Hello".comb.join(<foo>) ~ " /").EVAL.raku.say

[22:42] <camelia> rakudo-moar 69fa6bbaf: OUTPUT: «rx/ Hfooefoolfoolfooo /␤»

[22:42] <jaguart> would be cool if the evalbot did $_.say if there was no output...

[22:50] <deoac> Thanks, I'll give it a shot!

[23:00] <discord-raku-bot> <Nemokosch> m: ("rx/ " ~ "Hello".comb.join('<foo>') ~ " /").EVAL.raku.say

[23:00] <discord-raku-bot> <Nemokosch> probably the quotes help

[23:01] <discord-raku-bot> <Nemokosch> by default, <foo> would be like word quoting, more or less like 'foo' in this case

[23:05] <deoac> Bingo!  Exactly what I needed.

