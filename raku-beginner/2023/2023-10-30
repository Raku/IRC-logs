[00:17] *** hythm joined
[00:31] *** Manifest0 left
[01:41] *** hythm left
[01:59] <lucs> m: class Baz { has $.foo }; my $baz = Baz.new: foo => sub { say 'Baz' }; $baz.foo()

[01:59] <camelia> rakudo-moar 4a5e0181e: ( no output )

[01:59] <lucs> How do I make something like that work?

[02:23] <kjp> lucs: You mean something like...

[02:23] <kjp> m: class Baz { has $.foo; }; my $b = Baz.new(foo => 42); say $b.foo;

[02:23] <camelia> rakudo-moar 4a5e0181e: OUTPUT: «42␤»

[02:23] <kjp> The declarator "has $.foo" automatically creates a getter method.

[02:24] <kjp> If you need a setter, then "has $.foo is rw" will create that as well.

[02:26] <lucs> What I'm actually after is a way to have the 'foo' attribute be a subroutine that can be set by the constructor, then run by the instance.

[02:43] <kjp> Okay, so something like “Class Baz { has $!foo; }; my $baz = Baz.new(foo => sub {...});” and then code in other methods could call “$!foo(...)”.

[02:43] <kjp> But I doubt you'd get direct access to other attributes. They'd need to be arguments to foo.

[02:49] <lucs> Feels closer, yet:

[02:49] <lucs> m: class Baz { has $!foo; method jub { $!foo } }; my $baz = Baz.new: foo => sub { say 'Baz' }; $baz.jub;

[02:49] <camelia> rakudo-moar 4a5e0181e: ( no output )

[02:50] <kjp> You'll need to call the function. You need the parentheses. “$!foo()”.

[02:51] <lucs> m: class Baz { has $!foo; method jub { $!foo() } }; my $baz = Baz.new: foo => sub { say 'Baz' }; $baz.jub();

[02:51] <camelia> rakudo-moar 4a5e0181e: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Any'␤  in method jub at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:11] <kjp> m: class Baz { has $!foo is built; method jub { $!foo() } }; my $baz = Baz.new: foo => sub { say 'Baz' }; $baz.jub()

[03:11] <camelia> rakudo-moar 4a5e0181e: OUTPUT: «Baz␤»

[03:11] <kjp> Got there!

[03:15] <lucs> Nice!

[03:16] * lucs reads up on 'is built'

[03:17] <lucs> Oh, right, I should have known that.

[03:17] <kjp> So should I!

[03:18] <lucs> Thanks for working it out.

[03:19] <kjp> No problems. Maybe next time I won't have to think as long :-)

[05:13] <discord-raku-bot> <Dr.Doom> how to apply f() on all the values in %hash

[05:58] <discord-raku-bot> <Nahita> with $baz.foo or equivalently $baz.foo() you are accessing the attribute, i.e., the subroutine itself, via the automatically made public getter method. You need to call that subroutine further via $baz.foo.() or $baz.foo()(). Noting that in the first one we need a . otherwise it's again $baz.foo()

[05:58] <discord-raku-bot> <Nahita> This is mentioned in the second paragraph with an example matching yours here: https://docs.raku.org/language/operators#methodop_.postfix_/_.postcircumfix

[07:22] *** Manifest0 joined
[09:06] *** guifa left
[09:07] *** guifa joined
[09:09] <ab5tract_> Dr.Doom: https://docs.raku.org/language/hashmap#Looping_over_hash_keys_and_values

[09:10] <ab5tract_> Though it’s kind of strange that we don’t provide a visit method, to be honest

[10:42] *** Manifest0 left
[12:00] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/10/30/2023-44-surprisingly-good/

[12:26] *** teatime joined
[12:26] *** teatime left
[13:23] *** jgaz joined
[14:09] *** raiph joined
[16:21] *** raiph left
[17:33] *** habere-et-disper joined
[17:36] <habere-et-disper> How do I pass a parameter to a method of an action class (for a raku grammar) ? Using `:args` we can send it to the grammar but I want to send it to the action class.

[17:42] <discord-raku-bot> <nemokosch> well, what does the call look like?

[17:44] <discord-raku-bot> <librasteve> good question - I would say that the only reliable way to do that is to pass any arg values through the match object using make and made (which takes some study and getting used to), here's an example (taken a little out of context):

[17:45] <discord-raku-bot> <librasteve> ##use Grammar::Tracer;     grammar UnitGrammar {       token TOP         { ^  \s* <numerator=.compound>                             [\s* <divider> \s* <denominator=.compound>]?                             [\s* '+' \s* <offset>  ]? \s* $    }        #offset '+' hardwired       token divider     { '/' || 'per' }       token compound    { <element>+ % <sep> }       token sep         { [ '*' || '.' || ' *' ||

[17:45] <discord-raku-bot> ' .' || ' ' || '⋅' ] }       token element     { <factor> || <pnp-before> || <pnp-after> } ...  #| accumulates element Units using times       method compound($/)        {         my $acc = Unit.new;         for $<element>>>.made -> $x {           $acc.times($x);         }         make $acc;       } 

[17:49] <discord-raku-bot> <nemokosch> Raku's grammar (as per Rakudo) uses tons of dynamic vars for sharing state

[17:49] <discord-raku-bot> <librasteve> so, roughly what is going on is when I match token element, I use make in the method element($/) action to stash the value of my arg (could be a List or Hash if you have multiple args) and then when I match token compound, I can use $<element>.made (in this case there can be multiple elements in a List) to recover the arg value(s)

[17:50] <discord-raku-bot> <librasteve> I have fallen foul of any other mechanisms because of the quasi asynchronous way that matches are made ... ie you dont know what is going to match in what order

[17:52] <discord-raku-bot> <librasteve> I guess dynamic vars (or lexicals in the outer scope) can be used to pass info around ... but it has always totally confused me when I try this due to the unpredictability

[17:53] <discord-raku-bot> <librasteve> https://docs.raku.org/language/grammar_tutorial#Keeping_grammars_with_actions_tidy_with_make_and_made

[18:08] <habere-et-disper> Thanks ! I want to pad line numbers but only once the last line is successfully parsed by the grammar will I know what the largest/final line number is and so be able to calculate the padding for the action class -- which I think is run piecemeal. So I'm unsure how to delay the action or if that's necessary. I'm reading the file twice as a

[18:08] <habere-et-disper> workaround which seems suboptimal.

[18:11] <discord-raku-bot> <librasteve> oh - so you mean 999 needs more pad than 99 even on line 1?

[18:12] <habere-et-disper> Yes -- right aligned

[18:14] <discord-raku-bot> <librasteve> since your don't know until the last line, maybe it would be better to post process the lines after the grammar is done

[18:16] <habere-et-disper> That's what I thought `actions` are for -- but perhaps not in this case?

[18:20] <discord-raku-bot> <librasteve> the action for a token match is called when the token is matched. how would the action for line 48 know that the total lines is 480 and not 98?

[18:20] <habere-et-disper> Maybe there is a final action, or a `TWEAK` ?

[18:27] <discord-raku-bot> <librasteve> you may be able to try something like:  method line($/) { make %(text => $parsedline, number => $linenumber } method TOP($/) { my @texts = [$<line><text>>>.made]; my @nums = [$<line><number>>>.made];     for ^@nums -> $i { say @num[$i] ~ pad($i, +@nums) ~ @text[$i] } }

[18:28] <discord-raku-bot> <librasteve> ^^ your sub pad( $i, +@nums) {...} can then be right sized

[18:28] <discord-raku-bot> <librasteve> here TOP is the final match made so method TOP($/) {...} is the final action where you can do clean up

[18:29] <discord-raku-bot> <librasteve> [you may have to play around with the dereferencing - its been a while since i wrote one of these in anger

[18:29] <discord-raku-bot> <librasteve> ]

[18:34] <habere-et-disper> Thanks Steve and for the laugh ! :')

[22:01] *** deadmarshal_ left
[22:18] *** hythm joined
[23:13] *** Dominika joined
[23:15] *** sdomi left
[23:15] *** thowe left
[23:15] *** jgaz left
[23:15] *** jgaz joined
[23:20] *** thowe joined
[23:40] *** lizmat left
[23:40] *** lizmat joined
