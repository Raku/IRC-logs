[00:53] *** deoac joined
[01:29] *** lizmat_ joined
[01:33] *** lizmat left
[02:42] *** deoac left
[06:47] *** lizmat_ left
[06:47] *** lizmat joined
[08:04] *** Manifest0 joined
[08:13] *** dakkar joined
[10:33] <discord-raku-bot> <rikashore> Is there an action for raku grammars that get called when all rules fail

[10:33] <discord-raku-bot> <rikashore> like a fallback case I can use to handle the failure and move on?

[10:34] <discord-raku-bot> <rikashore> for context I'm building a lexer using raku grammars and I want to be able to produce "error" nodes while then continuing to lex further

[10:35] <discord-raku-bot> <nemokosch> when all rules fail to match, not when there is no action defined, right?

[10:37] <discord-raku-bot> <rikashore> yeah

[10:39] <discord-raku-bot> <nemokosch> Not that I know of

[10:40] <discord-raku-bot> <nemokosch> the grammar of Raku itself definitely uses no such thing, it just mixes in statefulness or outright calls error handlers

[10:41] <discord-raku-bot> <rikashore> I see

[10:41] <discord-raku-bot> <rikashore> I'll probably have to rewrite the lexer then into something more manual

[10:41] <discord-raku-bot> <rikashore> or maybe do some DFA construction and use that, we'll see

[10:41] <discord-raku-bot> <nemokosch> I think there are conceptual problems with recovering from syntax errors as well

[10:42] <discord-raku-bot> <nemokosch> it implies you know where the faulty part terminates

[10:42] <discord-raku-bot> <nemokosch> in which case you can write a rule exactly for that - "eat up everything until this certain pattern where the error must end"

[10:42] <discord-raku-bot> <rikashore> yeah this is not for full syntax, its just for tokenisation though

[10:43] <discord-raku-bot> <rikashore> and since the tokens are small enough, I can just assume every unknown character is an error token

[10:44] <discord-raku-bot> <nemokosch> in that case you probably really know where a token can end

[10:44] <discord-raku-bot> <rikashore> yeah

[10:44] <discord-raku-bot> <rikashore> although I've been meaning to play around with lexer construction through automata

[10:44] <discord-raku-bot> <rikashore> so might be a nice detour to try and implement that

[10:45] <discord-raku-bot> <nemokosch> fair enough

[10:45] <discord-raku-bot> <nemokosch> a plain DFA might have less overhead anyway, when implemented at a sufficiently low level

[10:46] <discord-raku-bot> <rikashore> yeah true, perf isn't my main goal however right now but I see what you mean

[10:47] <discord-raku-bot> <nemokosch> fair enough

[12:41] <discord-raku-bot> <antononcube> @rika  "Is there an action for raku grammars that get called when all rules fail." -- I think FALLBACK can be used.  In the package "FuncitonalParsers" for the ability to generate grammars from a BNF I had to deal with the cases when the BNF is incomplete, and used FALLBACK.

[12:42] <discord-raku-bot> <antononcube> Now, in "FunctionalParsers" the generated random sentences generation code uses FALLBACK , but that should work for grammars too.

[12:46] <discord-raku-bot> <antononcube> @rika Actually, I am not sure I got it right. Where do you want the fallback to happen? In the grammar <TOP> grammar rule you can always define a fallback match, like, TOP { [<rule1> | <rule2> | <rule3>] || <fallback-rule> }

[12:47] <discord-raku-bot> <antononcube> Also, see this discution: https://stackoverflow.com/a/49200368/14163984

[13:10] *** stanrifkin joined
[13:51] <discord-raku-bot> <nemokosch> This is why I asked whether it's about fallback to the matching or fallback to the actions ^^

[14:38] <discord-raku-bot> <rikashore> I see

[14:38] <discord-raku-bot> <rikashore> thank you

[16:29] <discord-raku-bot> <.ohnowendigo> How do I check if a list is an element of another list? I tried l1 (elem) l2 but it always returned false.

[16:30] <discord-raku-bot> <.ohnowendigo> m: say <1 2> (elem) (<1 2>, ❤️ 4>)

[16:30] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus term at /home/glot/main.raku:1 ------> say <1 2> (elem) (<1 2>,⏏ ❤️ 4>)     expecting any of:         infix         infix stopper         prefix         statement end         statement modifier         statement modifier loop         term 

[16:30] <discord-raku-bot> <.ohnowendigo> m: say <1 2> (elem) (<1 2>, <3 4>)

[16:30] <discord-raku-bot> <Raku eval>  False 

[16:31] <discord-raku-bot> <nemokosch> It's because the list have referential identity

[16:31] <discord-raku-bot> <nemokosch> m: say <1 2>.WHICH, <1 2>.WHICH

[16:31] <discord-raku-bot> <Raku eval>  List|6362861461664List|6362861461760 

[16:32] <discord-raku-bot> <nemokosch> There is a module called ValueList with the promise that it would get added natively to the next language version

[16:36] *** dakkar left
[17:26] *** Chopchop joined
[18:17] <discord-raku-bot> <wambash> m: say (|<1 2>) (elem) ((|<1 2>), (|<3 4>))

[18:17] <discord-raku-bot> <Raku eval>  True 

[18:18] <discord-raku-bot> <nemokosch> This hack used to work but it was decided that it shouldn't

[18:19] <discord-raku-bot> <nemokosch> https://github.com/Raku/problem-solving/issues/372

[18:23] <discord-raku-bot> <wambash> oh, that will breake a lot of my code.

[18:24] <discord-raku-bot> <nemokosch> I have also used it tbh

[18:27] *** Chopchop left
[19:39] <discord-raku-bot> <librasteve> this (|<1 2>) is a Slip, right? so what is the connection to the Capture discussion in that problem solving issue?

[20:08] <discord-raku-bot> <.ohnowendigo> m: say (|<1 2>) (elem) ((|<1>), (|<2 3 4>))

[20:08] <discord-raku-bot> <Raku eval>  False 

[20:11] <discord-raku-bot> <librasteve> yeah - same for me with (|<1 2>) (elem) ((|<1 2>), (|<3 4>)) is False

[20:16] <discord-raku-bot> <librasteve> I am on Rakudo™ v2023.08.

[20:20] <discord-raku-bot> <.ohnowendigo> Anyway I figured out how to do it wo!

[20:21] <discord-raku-bot> <.ohnowendigo> m: say so (<1 2>, <3 4>).first(<1 2>)

[20:21] <discord-raku-bot> <Raku eval>  True 

[20:24] <discord-raku-bot> <librasteve> nice!

[21:08] *** stanrifkin left
[21:10] *** saint- joined
[21:18] <discord-raku-bot> <nemokosch> m: |<1 2> andthen .&dd

[21:18] <discord-raku-bot> <Raku eval>  slip(IntStr.new(1, "1"), IntStr.new(2, "2")) 

[21:19] <discord-raku-bot> <nemokosch> m: ((|<1 2>), (|<3 4>))  andthen .&dd

[21:19] <discord-raku-bot> <Raku eval>  (IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3"), IntStr.new(4, "4")) 

[21:19] <discord-raku-bot> <nemokosch> not sure why this would ever work

[21:20] <discord-raku-bot> <nemokosch> I didn't notice it was with | and honestly I think that was a thinko in the first place

[21:21] <discord-raku-bot> <nemokosch> (1, 2) was the one that "used to work" (it still does) but shouldn't

[21:21] <discord-raku-bot> <nemokosch> |(1, 2) would have never worked

[21:21] <discord-raku-bot> <nemokosch> discord ate the backslash up

[21:21] <discord-raku-bot> <nemokosch> so, \(1, 2) was the one that did kinda work

[21:22] <discord-raku-bot> <nemokosch> (|<1 2>) is just <1 2> with extra steps

[21:23] <discord-raku-bot> <nemokosch> oh right - probably @wambash also used the backlash, and it also got absorbed 🤣

[21:23] <discord-raku-bot> <nemokosch> ha, take this, I can see invisible backslashes

[21:23] <discord-raku-bot> <nemokosch> this will work but this is will be a plain linear search, for the record

[21:24] <discord-raku-bot> <nemokosch> I wouldn't know by heart but probably it uses smartmatching

[21:25] <discord-raku-bot> <nemokosch> m: say so (<1 2>, ❤️ 4>).first((1, 2))

[21:25] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus term at /home/glot/main.raku:1 ------> say so (<1 2>,⏏ ❤️ 4>).first((1, 2))     expecting any of:         infix         infix stopper         prefix         statement end         statement modifier         statement modifier loop         term 

[21:25] <discord-raku-bot> <nemokosch> bruh

[21:25] <discord-raku-bot> <nemokosch> m: say so (<1 2>, <3 4>).first((1, 2))

[21:25] <discord-raku-bot> <Raku eval>  True 

[21:26] <discord-raku-bot> <nemokosch> m: <1 2> eqv (1, 2) andthen .say

[21:26] <discord-raku-bot> <Raku eval>  False 

[21:26] <discord-raku-bot> <nemokosch> yes, it must be smartmatching

[21:28] <discord-raku-bot> <nemokosch> m: say so (<1 2>, <3 4>).first((1, *))

[21:28] <discord-raku-bot> <Raku eval>  True 

