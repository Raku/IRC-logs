[02:31] <discord-raku-bot> <Dr.Doom> hey does raku  support vectorized operations ?

[02:31] <discord-raku-bot> <Dr.Doom> like 0..10 + 1 giving 1..11

[02:36] <discord-raku-bot> <nemokosch> (0..10) + 1 does give 1..11 but I wouldn't call this vectorization and I actually don't even like this behavior

[02:37] <discord-raku-bot> <nemokosch> 0..10 is a Range, defined by two endpoints, not really a vector or a list

[02:37] <discord-raku-bot> <nemokosch> and the fact that you can "numerically add" a Range and a number, and then obtain something that isn't even a number, seems quite crazy

[02:38] <discord-raku-bot> <nemokosch> m: (0..10) >>+>> 1 andthen .say # this is much more like a vectorized operation

[02:38] <discord-raku-bot> <Raku eval>  (1 2 3 4 5 6 7 8 9 10 11) 

[02:39] <discord-raku-bot> <nemokosch> m: (0..10) + 1 andthen .say

[02:39] <discord-raku-bot> <Raku eval>  1..11 

[02:40] <discord-raku-bot> <nemokosch> https://docs.raku.org/type/Range#sub_infix:%3C+%3E this is why it works and it's tempting to open an issue for it

[03:00] <discord-raku-bot> <nemokosch> @Dr.Doom oh right, the illustration of the problem came handy while I was phrasing the issue...

[03:01] <discord-raku-bot> <nemokosch> if (0..10) + 1 is 1..11, what would you expect (0..10) + (1..1) to be?

[03:01] <discord-raku-bot> <Dr.Doom> 1..11

[03:01] <discord-raku-bot> <nemokosch> ||if your answer was 12, you have superhuman powers||

[03:02] <discord-raku-bot> <nemokosch> so yeah xD

[03:02] <discord-raku-bot> <Dr.Doom> :m say (0..10) + 1

[03:03] <discord-raku-bot> <Dr.Doom> why is it so inconsistent

[03:03] <discord-raku-bot> <nemokosch> the range + number case has been overloaded in both orders

[03:03] <discord-raku-bot> <nemokosch> but the range + range hasn't

[03:04] <discord-raku-bot> <nemokosch> frankly, the range + range case starts to fall apart for me

[03:04] <discord-raku-bot> <nemokosch> especially if we take multiplication or division

[03:05] <discord-raku-bot> <nemokosch> would range1 / range2 be start1 / start2 .. end1 / end2, and either way, why

[03:06] <discord-raku-bot> <nemokosch> so my point is actually that it would be better to get 12 for (0..10) + 1 as well

[03:06] <discord-raku-bot> <nemokosch> that would be transparent behavior: numeric coercion for the range

[03:07] <discord-raku-bot> <nemokosch> not sometimes this, other times that

[05:08] *** stanrifkin joined
[05:09] <stanrifkin> Is there an rakutidy?

[05:42] *** CIAvash joined
[05:42] *** stanrifkin left
[06:29] <discord-raku-bot> <Dr.Doom> why can't it have behavior similar to apl or numpy?

[07:17] *** CIAvash left
[08:01] *** MasterDuke left
[08:47] <discord-raku-bot> <rcmlz> Ah yes, that allows then for circular references ... nice feature.

[09:34] <discord-raku-bot> <rcmlz> Oh, just testet it and it does not work.  m: # declare the existence of a class / role without defining it role Commutativity { ... } class Shape does Commutativity { ... } class Rectangle is Shape { ... } class Circle is Shape { ... } class Triangle is Shape { ... }

[09:34] <discord-raku-bot> <rcmlz> m:  role Commutativity { ... } class Shape does Commutativity { ... } class Rectangle is Shape { ... } class Circle is Shape { ... } class Triangle is Shape { ... }

[09:34] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku 'Rectangle' cannot inherit from 'Shape' because 'Shape' isn't composed yet (maybe it is stubbed) at /home/glot/main.raku:3 

[10:04] *** lizmat_ joined
[10:06] *** RakuIRCLogger left
[10:07] *** lizmat_ left
[10:07] *** lizmat joined
[10:09] *** RakuIRCLogger__ left
[11:41] *** tea3po joined
[11:44] *** teatwo left
[11:58] *** tea3po left
[11:58] *** tea3po joined
[11:59] *** tea3po left
[11:59] *** tea3po joined
[12:51] <discord-raku-bot> <nemokosch> if you say what that behavior is, it gets easier

[13:09] *** tea3po left
[13:09] *** tea3po joined
[13:35] <discord-raku-bot> <rcmlz> no behaviour, just ... as stub implementation.

[13:51] <ab5tract_> well, you do eventually have to define the thing :)

[14:01] <discord-raku-bot> <rcmlz> I got it know. The issue is the "is Shape". If I first declare it without inheritment it works

[14:02] <discord-raku-bot> <rcmlz> m:  m: role Commutativity { ... } class Shape does Commutativity { ... } class Rectangle { ... } class Circle { ... } class Triangle { ... } class Rectangle is Shape { "the real thing" }

[14:02] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku 'Rectangle' cannot inherit from 'Shape' because 'Shape' isn't composed yet (maybe it is stubbed) at /home/glot/main.raku:7 

[15:01] *** tea3po left
[15:01] *** tea3po joined
[15:16] <discord-raku-bot> <Dr.Doom> $n,* ~~ s/1/10/,..*

[15:16] <discord-raku-bot> <Dr.Doom> why might this be giving an error?

[15:16] <discord-raku-bot> <Dr.Doom> anyone?

[15:44] <discord-raku-bot> <nemokosch> what would this be? doesn't look like valid syntax

[15:45] <discord-raku-bot> <Dr.Doom> thats why i am asking

[15:45] <discord-raku-bot> <Dr.Doom> i want to genrate a succesive list  1,10,100,1000....

[15:45] <discord-raku-bot> <nemokosch> is 1, 10, 100 ... * not good enough?

[15:46] <discord-raku-bot> <nemokosch> geometric series can be inferred from three values

[15:46] <discord-raku-bot> <Dr.Doom> no

[15:47] <discord-raku-bot> <Dr.Doom> $n can be any number

[15:47] <discord-raku-bot> <nemokosch> then what is the definition again?

[15:47] <discord-raku-bot> <Dr.Doom> 1st "1" is to be replaced with "10"

[15:47] <discord-raku-bot> <Dr.Doom> of every element of the array

[15:48] <discord-raku-bot> <Dr.Doom> for example 101,1001,10001,....

[15:50] <discord-raku-bot> <nemokosch> I think there are several bad ideas here, like generating "quasi numbers" as strings with string operation - but that in itself wouldn't make it not work

[15:51] <discord-raku-bot> <nemokosch> smartmatching to the s/// quoting structure is an in-place substitution that returns the match that got substituted

[15:52] <discord-raku-bot> <nemokosch> meaning, both the in-place mutation will probably fail (or cause damage to some variable even) and the return value will be problematic

[15:52] <discord-raku-bot> <nemokosch> the .subst method should work instead

[15:53] <discord-raku-bot> <nemokosch> m: 101, *.subst(1, 10) ... * andthen .[^10].say

[15:53] <discord-raku-bot> <Raku eval>  (101 1001 10001 100001 1000001 10000001 100000001 1000000001 10000000001 100000000001) 

[15:53] <discord-raku-bot> <nemokosch> of course these are strings, not numbers

[15:55] <discord-raku-bot> <nemokosch> m: 101.subst(1, 10).&dd

[15:55] <discord-raku-bot> <Raku eval>  "1001" 

[15:55] <discord-raku-bot> <nemokosch> there

[17:59] *** MasterDuke joined
[19:24] *** Nemokosch joined
[21:29] <discord-raku-bot> <librasteve> m: 101, *.subst(1, 10) ... * andthen .[^10] .sum

[21:29] <discord-raku-bot> <Raku eval>  

[21:30] <discord-raku-bot> <librasteve> 101, *.subst(1, 10) ... * andthen .[^10] .sum .say

[21:31] <discord-raku-bot> <librasteve> m: (101, *.subst(1, 10) ... * andthen .[^10]).sum.say

[21:31] <discord-raku-bot> <Raku eval>  111111111110 

[21:32] <discord-raku-bot> <librasteve> anyway my point is that in raku strings that contain numbers can be treated as numbers

[22:04] *** Nemokosch left
[23:41] *** teatwo joined
[23:44] *** tea3po left
