[00:00] *** cleo left
[00:00] *** hexology left
[00:00] *** KOTP left
[00:00] *** destroycomputers left
[00:00] *** snonux left
[00:00] *** MasterDuke left
[00:00] *** jgaz left
[00:00] *** lizmat left
[00:00] *** snonux joined
[00:00] *** elcaro left
[00:00] *** SmokeMachine left
[00:00] *** elcaro joined
[00:00] *** SmokeMachine joined
[00:02] *** lizmat joined
[00:04] *** KOTP joined
[00:07] *** hexology joined
[00:07] *** destroycomputers joined
[00:12] *** jgaz joined
[00:47] *** hythm joined
[00:59] *** deoac joined
[01:38] *** deoac left
[03:16] *** MasterDuke joined
[05:29] *** hythm left
[05:45] *** jgaz left
[05:46] *** jgaz joined
[05:57] *** MasterDuke left
[06:20] *** cleo joined
[07:00] *** siavash joined
[07:37] *** siavash left
[08:13] *** dakkar joined
[09:11] *** Manifest0 joined
[10:28] *** famra joined
[10:29] *** famra left
[10:29] *** famra joined
[16:37] *** dakkar left
[18:49] <discord-raku-bot> <rcmlz> I would like to implement the Quick-Sort-Algorithm using partitions less/same/more as stated on wikipedia - and doing like promised on https://www.rosettacode.org/wiki/Sorting_algorithms/Quicksort#Raku in PARALLEL - idealy using simple hyper.map(): I have got that far   multi qsort-recursiv(()) { () } multi qsort-recursiv(@input){     my $pivot = @input.pick;      @input.classify( -> $element { $element cmp

[18:49] <discord-raku-bot> $pivot }, :into( my %partition{Order} ) );      flat callwith(%partition{Less}),                   %partition{Same},          callwith(%partition{More}) }  (complete source incl. tests here: https://gist.github.com/rcmlz/552726f93e0134480e7517159947901b)  but can not get my head around how to apply map() to %partitions correctly. Is there a way to make it show off style such that it is worth maybe update rosetta code

[18:49] <discord-raku-bot> and add such a impressively short and handsome, parallel version?

[18:58] <discord-raku-bot> <rcmlz> Idealy the source code should read like a sentence "First classify the elements of the input list by comparing all of them to a randomly choosen pivot element and then recursivly call the same function in parallel on the Less and More partition and finaly combine everything together into a sorted output."

[18:59] <discord-raku-bot> <rcmlz> Any hints?

[19:48] *** ab5tract left
[20:37] <Manifest0> How do i zip all the lists that are inside of a list? the call "zip |@list" doesnt work.

[20:39] <discord-raku-bot> <nemokosch> can you show the context in which in doesn't work?

[20:40] <discord-raku-bot> <nemokosch> for example, if it's a nested array, I would guess that it won't work

[20:41] <Manifest0> my @a = ([1,2,3], [4,5,6], [7,8,9]); zip |@a

[20:42] <discord-raku-bot> <nemokosch> yeah... that's a nested array. let me try something

[20:42] <discord-raku-bot> <nemokosch> m: my @a := ([1,2,3], [4,5,6], [7,8,9]); zip |@a

[20:42] <discord-raku-bot> <Raku eval>  WARNINGS for /home/glot/main.raku: Useless use of "zip |@a" in expression "zip |@a" in sink context (line 1) 

[20:42] <discord-raku-bot> <nemokosch> right, maybe printing it would help

[20:43] <discord-raku-bot> <nemokosch> m: my @a := ([1,2,3], [4,5,6], [7,8,9]); say zip |@a

[20:43] <discord-raku-bot> <Raku eval>  ((1 4 7) (2 5 8) (3 6 9)) 

[20:43] <discord-raku-bot> <nemokosch> I wouldn't be surprised if this even worked without the slip

[20:43] <discord-raku-bot> <nemokosch> m: my @a := ([1,2,3], [4,5,6], [7,8,9]); say zip @a

[20:43] <discord-raku-bot> <Raku eval>  ((1 4 7) (2 5 8) (3 6 9)) 

[20:43] <discord-raku-bot> <nemokosch> dang

[20:43] <discord-raku-bot> <lakmatiol>  > [Z] (<1 2 3>, <4 5 6>, <7 8 9>) ((1 4 7) (2 5 8) (3 6 9))  using [Z] should also work

[20:44] <Manifest0> "[Z] @a" works :-)

[20:44] <discord-raku-bot> <nemokosch> I think at some point zip and [Z] call one another

[20:45] <discord-raku-bot> <nemokosch> it's worrying if [Z] works on the same thing zip doesn't work on

[20:46] <discord-raku-bot> <nemokosch> m: my @a = ([1,2,3], [4,5,6], [7,8,9]); say [Z] @a; say zip @a

[20:46] <discord-raku-bot> <Raku eval>  ((1 4 7) (2 5 8) (3 6 9)) (([1 2 3] [4 5 6] [7 8 9])) 

[20:46] <Manifest0> they have different behaviours

[20:46] <discord-raku-bot> <nemokosch> as you can see, it dropped the containers

[20:47] <discord-raku-bot> <nemokosch> I don't like this itemization but two wrongs don't make a right. They should work the same way.

[20:49] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/issues/5247

[20:51] <Manifest0> nemokosch, lakmatiol thanks for the help

[21:33] <discord-raku-bot> <codesections> @rcmlz Does this do what you want?      multi qsort-recursiv([]) { () }     multi qsort-recursiv(@input){         my $pivot = @input.pick;             my %partition = :Less[], :Same[], :More[];             @input.hyper.map: -> $element {                 %partition{$element cmp $pivot}.push: $element };              flat samewith(%partition{Less}),              |%partition{Same},             

[21:33] <discord-raku-bot> samewith(%partition{More});     }

[21:35] *** Heptite joined
[22:37] <gfldex> @rclmz here is a version that is quite recursive: https://gist.github.com/gfldex/39e164aa46370dcbd3be0a854ab3c6ef

[23:24] *** camelia left
[23:45] *** camelia joined
