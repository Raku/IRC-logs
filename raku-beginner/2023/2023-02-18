[02:08] *** Manifest0 left
[04:47] *** rf left
[06:13] *** Heptite left
[10:11] *** ab5tract joined
[10:21] *** Manifest0 joined
[10:32] *** frost joined
[12:14] *** Heptite joined
[12:46] *** discord-raku-bot left
[12:46] *** discord-raku-bot joined
[15:28] *** yjh joined
[15:33] <yjh> Should the following work?

[15:33] <yjh> role R[::T] { method m ( T @a ) { } }

[15:33] <yjh> class C does R[Str] { }

[15:33] <yjh> my Str @a = 'a';

[15:33] <yjh> C.new.m: @a;

[15:33] <yjh> I'm getting "Internal error: inconsistent bind result"

[15:35] <ab5tract> Hmm...

[15:37] <ab5tract> yjh: yes, that appears to be a bug

[15:40] <ab5tract> yjh: it appars to work with

[15:40] <ab5tract> role R[::T] { method m ( ::T @a ) { } }

[15:41] <discord-raku-bot> <Nemokosch> well, wait. @a is a one-element array with 'a' in it, right?

[15:41] <ab5tract> m: role R[::T] { method m ( ::T @a ) { dd @a } }; class C does R[Str] {}; my Str @a = 'a'; C.new.m: @a 

[15:41] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´Array[Str @a = Array[Str].new("a")‚ê§¬ª

[15:41] <discord-raku-bot> <el gatito (** advocate)> yes

[15:43] <discord-raku-bot> <Nemokosch> do "we" know if this is supposed to work?

[15:44] <ab5tract> yjh: So I'm no longer sure it's a bug

[15:44] <discord-raku-bot> <Nemokosch> thinking of ::?CLASS, for example

[15:44] <discord-raku-bot> <Nemokosch> :: seems kinda like a sigil in these cases

[15:45] <discord-raku-bot> <el gatito (** advocate)> type variable sigil

[15:45] <discord-raku-bot> <Nemokosch> where did you find it?

[15:46] <discord-raku-bot> <el gatito (** advocate)> it is inferred

[15:46] <discord-raku-bot> <Nemokosch> okay... so where do you infer this from? üòõ

[15:47] <discord-raku-bot> <el gatito (** advocate)> the fact that ::T declares a type variable

[15:47] <discord-raku-bot> <Nemokosch> okay... where did you find that? üëÄ

[15:49] <ab5tract> I just gave an example of it. But I think the point here is not whether it is a sigil, exactly. It seems to be an indicator of an explicit package

[15:49] <ab5tract> s/explicit/implicit/

[15:49] <discord-raku-bot> <Nemokosch> no, my question is: where can one read more about it?

[15:49] <ab5tract> yjh: I hope my solution helps

[15:51] <discord-raku-bot> <el gatito (** advocate)> you don‚Äôt know type captures? https://docs.raku.org/type/Signature#Type_captures

[15:51] <discord-raku-bot> <Nemokosch> I didn't know they were called that, that's for sure

[15:52] <discord-raku-bot> <el gatito (** advocate)> also notice the last argument of the function in the example

[15:53] <discord-raku-bot> <Nemokosch> >  # $p1 and $p2 are of the same type T, that we don't know yet

[15:53] <discord-raku-bot> <Nemokosch> the code example suggests that ::T and T would behave the same way, no?

[15:54] <discord-raku-bot> <el gatito (** advocate)> m:perl sub type(::T) {   return T } say type 42; 

[15:54] <discord-raku-bot> <Raku eval>  (Int) 

[15:54] <discord-raku-bot> <el gatito (** advocate)> yeah

[15:54] <discord-raku-bot> <el gatito (** advocate)> m:perl sub type(::T) {   return ::T } say type 42; 

[15:54] <discord-raku-bot> <Raku eval>  (Int) 

[15:58] <discord-raku-bot> <Nemokosch> what about T in the signature?

[15:58] <discord-raku-bot> <Nemokosch> m:  sub type(T) {   return T } say type 42; 

[15:58] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Invalid typename 'T' in parameter declaration. at /home/glot/main.raku:1 ------> sub type(T‚èè) { 

[15:59] <discord-raku-bot> <Nemokosch> that's one down I guess..

[15:59] <ab5tract> m: role R[::T] { method m ( ::T @a, T @b ) { dd @b } }; class C does R[Str] {}; my Str @a = 'a'; C.new.m: @a, @a

[15:59] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´Internal error: inconsistent bind result‚ê§  in method m at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:59] <discord-raku-bot> <Nemokosch> m:  sub type(T $foo) {   return $foo } say type 42; 

[15:59] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Invalid typename 'T' in parameter declaration. at /home/glot/main.raku:1 ------> sub type(T‚èè $foo) { 

[15:59] <ab5tract> m: role R[::T] { method m ( ::T @a, ::T @b ) { dd @b } }; class C does R[Str] {}; my Str @a = 'a'; C.new.m: @a, @a

[15:59] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Redeclaration of symbol 'T'.‚ê§at <tmp>:1‚ê§------> role R[::T] { method m ( ::T @a, ::T‚èè @b ) { dd @b } }; class C does R[Str] {‚ê§¬ª

[15:59] <discord-raku-bot> <Nemokosch> how could it work in their example?

[16:01] <discord-raku-bot> <el gatito (** advocate)> bruh

[16:01] <discord-raku-bot> <el gatito (** advocate)> https://cdn.discordapp.com/attachments/768511641758466088/1076533863922286732/IMG_4678.png

[16:01] <discord-raku-bot> <Nemokosch> okay okay, wait xD

[16:01] <discord-raku-bot> <Nemokosch> so it seems that ::T is like a declaration on its own

[16:01] <discord-raku-bot> <Nemokosch> and once you do it, you are allowed to write just T

[16:02] <discord-raku-bot> <Nemokosch> > role R[::T] { method m ( T @a ) { } }

[16:02] <discord-raku-bot> <Nemokosch> but then this should be right, I'd say?

[16:08] <discord-raku-bot> <Nemokosch> could you link this part? I can't comprehend it

[16:09] <discord-raku-bot> <el gatito (** advocate)> https://docs.raku.org/type/Signature#Argument_aliases

[16:11] <discord-raku-bot> <Nemokosch> thankies

[16:13] <discord-raku-bot> <el gatito (** advocate)> why does raku feel like a minefield of surprising behavior üò≠

[16:23] <ab5tract> el gatito: I know how you feel. I think what we are experiencing here is a bug

[16:24] <ab5tract> because as Nemokosch points out, once you declare via ::T, you should be able to use 'T' by itself.

[16:25] <lizmat> agreed

[16:26] <ab5tract> unfortunately you can't just defer to Raku's type checking one layer down, a la:

[16:26] <discord-raku-bot> <el gatito (** advocate)> im actually referring to the slipping behavior of Hash

[16:26] <ab5tract> m: role R[::T] { method m ( @a, @b ) { my ::T @c = @a, @b; dd @c } }; class C does R[Str] {}; my @a = "a"; my @b = "b"; C.new.m: @a, @b

[16:26] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´No such method 'instantiate_generic' for invocant of type 'Array[T]'‚ê§  in method m at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:27] <discord-raku-bot> <Nemokosch> m:  class C { has $.x; has $.y; has @.z }; my %h = <x y z> Z=> (5, 20, [1,2]); say C.new(|%h); 

[16:27] <discord-raku-bot> <Raku eval>  C.new(x => 5, y => 20, z => [[1, 2],]) 

[16:27] <discord-raku-bot> <Nemokosch> what if we use a List instead of an Array?

[16:27] <discord-raku-bot> <Nemokosch> m:  class C { has $.x; has $.y; has @.z }; my %h = <x y z> Z=> (5, 20, (1,2)); say C.new(|%h); 

[16:27] <discord-raku-bot> <Raku eval>  C.new(x => 5, y => 20, z => [(1, 2),]) 

[16:27] <discord-raku-bot> <Nemokosch> still pushed into an Array

[16:28] <discord-raku-bot> <Nemokosch> because %h<z> is $(1,2), I think

[16:34] <discord-raku-bot> <Nemokosch> but it also doesn't seem feasible to just downright drop all containers from slips...

[18:36] *** saint- joined
[18:39] *** jgaz joined
[20:09] *** rf joined
[20:51] *** rf left
[20:51] *** rf_ joined
[21:22] *** rf_ left
[21:23] *** jgaz left
[21:23] *** rf joined
[21:32] *** deoac joined
[21:36] <deoac> Given

[21:36] <deoac> [3] > my %a = <a 1 b 1 c 2>

[21:36] <deoac> {a => 1, b => 1, c => 2}

[21:36] <deoac> How would I create the Hash/Map: {1 => (a b), 2 => c} ?

[21:36] <deoac> Neither .invert() or .antipairs() does the trick.

[21:46] *** jgaz joined
[22:00] *** frost left
[22:05] *** guifa joined
[22:08] *** guifa_ left
[22:14] <MasterDuke> deoac: checkout .classify() or .categorize(), they might get you closer

[22:16] <discord-raku-bot> <Nemokosch> Sadly invert seems to be the opposite - unwrap rather than wrap

[22:16] <discord-raku-bot> <Nemokosch> Classify is a good idea

[22:18] <rf> m: <a 1 b 1 c 2>.classify(*.value)>>.key;

[22:18] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´No such method 'value' for invocant of type 'Str'.  Did you mean‚ê§'values'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:18] <rf> m: Map.new(<a 1 b 1 c 2>).classify(*.value)>>.key;

[22:18] <camelia> rakudo-moar fd75bb0fe: ( no output )

[22:18] <rf> m: say Map.new(<a 1 b 1 c 2>).classify(*.value)>>.key;

[22:18] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´{1 => [a b], 2 => [c]}‚ê§¬ª

[22:20] <rf> Wish I could leave out the .key

[22:20] <rf> Maybe a reduce or produce for this

[22:20] <discord-raku-bot> <Nemokosch> m: <a 1 b 1 c 2>.pairup.classify(*.value, as => *.key).say

[22:20] <discord-raku-bot> <Raku eval>  {1 => [a b], 2 => [c]} 

[22:21] <discord-raku-bot> <Nemokosch> Well, getting closer..

[22:21] <rf> Nice, didn't know about the as

[22:21] <rf> m: %(<a 1 b 1 c 2>).classify(*.value, as => *.key).say;

[22:21] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´{1 => [a b], 2 => [c]}‚ê§¬ª

[22:22] <rf> m: %<a 1 b 1 c 2>.classify(*.value, as => *.key).say;

[22:22] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´Use of Nil in string context‚ê§{(Any) => []}‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[22:23] <discord-raku-bot> <Nemokosch> It's probably an anonymous state variable

[22:23] <rf> I think my second last one is the best so far, thanks for the note on "as" Nemo

[22:27] *** rf left
[22:28] *** rf joined
[22:40] <deoac> Thanks Nemokosch & rf.¬† I've never used classify, glad to have the opportunity

