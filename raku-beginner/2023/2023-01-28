[01:05] <discord-raku-bot> <:(**@args, *%kwargs)> is there a way to "unbound" a method then bound them back to another object

[01:12] <discord-raku-bot> <Nemokosch> there is method_table on the metaobject

[01:13] <discord-raku-bot> <Nemokosch> I did manage to delete a method from a class using that

[01:13] <discord-raku-bot> <Nemokosch> oh I can see the risk

[01:14] <discord-raku-bot> <Nemokosch> you need to make sure that the self argument is set up in a way that supports both the original class and the new class

[01:17] <discord-raku-bot> <:(**@args, *%kwargs)> im trying to recreate super which is just evaluating superclass methods in the context of current object so i think its safe

[01:25] <discord-raku-bot> <:(**@args, *%kwargs)> is it like this?  Someclass.^method_table::mymethod and then the object i get is a sub?

[01:26] <discord-raku-bot> <Nemokosch> do you state that or is it just wishful thinking?

[01:26] <discord-raku-bot> <:(**@args, *%kwargs)> yeah its just thinking

[01:27] <discord-raku-bot> <:(**@args, *%kwargs)>  Someclass.^method_table<mymethod> 

[01:27] <discord-raku-bot> <:(**@args, *%kwargs)> ok this is right

[01:31] <discord-raku-bot> <:(**@args, *%kwargs)> m: class C {   has $.x; }  my $a = A.new(x => 1);  say C.^method_table<x>($a:); 

[01:31] <discord-raku-bot> <:(**@args, *%kwargs)> m: class C {   has $.x; }  my $c = C.new(x => 1);  say C.^method_table<x>($a:); 

[01:31] <discord-raku-bot> <:(**@args, *%kwargs)> m: class C {   has $.x; }  my $c = C.new(x => 1);  say C.^method_table<x>($c:); 

[01:31] <discord-raku-bot> <:(**@args, *%kwargs)> what

[01:33] <discord-raku-bot> <:(**@args, *%kwargs)> m: class C {   has $.x; }  my $c = C.new(x => 1);  say C.^method_table<x>($c); 

[01:34] <discord-raku-bot> <:(**@args, *%kwargs)> nice

[01:36] <discord-raku-bot> <:(**@args, *%kwargs)> m: class C {   has $.x; }  my $c = C.new(x => 1);  say $c.^method_table<x>($c); 

[01:36] <discord-raku-bot> <Nemokosch> 👋 😴

[01:37] <discord-raku-bot> <:(**@args, *%kwargs)> gn

[02:07] <discord-raku-bot> <:(**@args, *%kwargs)> why doesn't it work notably if i change has $!o to has $.o it worked again

[02:08] <discord-raku-bot> <:(**@args, *%kwargs)> https://glot.io/snippets/ghoxb47ub4

[02:55] <discord-raku-bot> <Rog> oh wow, colors are working now

[02:56] *** kjp left
[03:00] *** kjp joined
[04:39] <discord-raku-bot> <stevied> ok, this is unexpected for me:

[04:39] <discord-raku-bot> <stevied> m: class Box {     has $.data;      multi method new($d = '') {         say  'here';         self.bless(data => $d);     } }  my $box = Box.new('hi'); say $box.data;  my $box2 = Box.new(data => 'be'); say $box2.data;

[04:39] <discord-raku-bot> <stevied> I don't know why the same new method gets called for different arguments

[04:39] <discord-raku-bot> <stevied> now look at this:

[04:40] <discord-raku-bot> <stevied> m: class Box {     has $.data;      multi method new($d) {         say  'here';         self.bless(data => $d);     } }  my $box = Box.new('hi'); say $box.data;  my $box2 = Box.new(data => 'be'); say $box2.data;

[04:40] <discord-raku-bot> <stevied> when I take away the default value for $d in new(), it works as expected

[04:40] <discord-raku-bot> <stevied> what explains this?

[04:43] <discord-raku-bot> <stevied> I don't expect multi method new($d = '') to get called with Box.new(data = 'be')

[04:56] <discord-raku-bot> <stevied> https://stackoverflow.com/questions/75265456/default-value-in-new-method-causing-object-construction-to-work-in-an-unexpected

[05:17] *** Heptite left
[05:20] <discord-raku-bot> <stevied> ok, it works if I slap an is built to the $data attribute. always wondered what is built was for

[07:08] <discord-raku-bot> <:(**@args, *%kwargs)> i think raku choose to call new($d = '') because it can accept no positional args

[07:09] <discord-raku-bot> <:(**@args, *%kwargs)> i don't know enough of raku dispatch rules

[07:09] <discord-raku-bot> <stevied> I asked on SO and got a good answer.

[07:10] <discord-raku-bot> <stevied> https://stackoverflow.com/a/75265629/1641112

[07:11] <discord-raku-bot> <stevied> The *%_ special variable makes it override Mu’s new()

[07:17] <discord-raku-bot> <:(**@rest, *%rest)> hmm implicit *%_

[07:18] <discord-raku-bot> <:(**@rest, *%rest)> another thing to note when writing signatures 😭

[07:24] <discord-raku-bot> <stevied> Heh. Right. I didn’t even know about it until last week.

[07:25] <discord-raku-bot> <stevied> Lots to keep track of.

[07:25] <discord-raku-bot> <stevied> Every time I go back and read the docs I learn more and more subtle stuff I missed or didn’t get before.

[07:27] <discord-raku-bot> <:(**@rest, *%rest)> this is why explicit better than implicit

[07:28] <discord-raku-bot> <stevied> Yeah. I was just thinking the same thing. Better to spell everything out even if it results in more code. At least at first.

[07:31] <discord-raku-bot> <stevied> Unfortunately, I like to drive myself crazy trying different things to see if I can get them to work.

[07:36] <discord-raku-bot> <:(**@rest, *%rest)> idk why you have to override new and use bless

[07:39] <discord-raku-bot> <:(**@rest, *%rest)> which are preferred methods to create custom constructor use BUILD or override new?

[07:42] <discord-raku-bot> <stevied> Depends if you need to override the constructor methods.

[07:42] <discord-raku-bot> <stevied> New does not call parent new. So you use BUILD in that case.

[07:44] <discord-raku-bot> <stevied> I was trying to figure out how to do things without a BUILD method. It makes things a little harder with just new() method.

[07:45] <discord-raku-bot> <stevied> I like to see how I can do things with minimal code. I do learn a lot that way.

[08:17] <discord-raku-bot> <:(**@rest, *%rest)> is there a turtle module in raku

[09:25] <discord-raku-bot> <Nemokosch> Logo stuff?

[09:26] <discord-raku-bot> <Nemokosch> @stevied I think by now you know but yeah... by default, any named argument can be discarded from a call

[09:26] <discord-raku-bot> <Nemokosch> Tbh feels like a legacy thing, I wonder what the cost of a change would be

[09:40] <discord-raku-bot> <:(**@rest, *%rest)> yeah

[09:42] <discord-raku-bot> <Nemokosch> When I googled it, I got "Raku fetish turtle" xdd

[09:43] <discord-raku-bot> <:(**@rest, *%rest)> raku is not that widely used and its only 8 years old so there is room for change

[09:43] <discord-raku-bot> <Zephyr> I skipped a few words at first glance and was wondering why you'd google that

[09:45] <discord-raku-bot> <Nemokosch> would the turtle module have its own graphics?

[09:45] <discord-raku-bot> <Nemokosch> how does the Python version work

[09:45] <discord-raku-bot> <Nemokosch> I see there is a Perl module that comes completely without graphics, only holding the state

[09:45] <discord-raku-bot> <:(**@rest, *%rest)> it can use the canvas widget of existing gui frameworks

[09:46] <discord-raku-bot> <:(**@rest, *%rest)> in fact that is what python does

[09:48] <discord-raku-bot> <Nemokosch> > The turtle module provides turtle graphics primitives, in both object-oriented and procedure-oriented ways. Because it uses tkinter for the underlying graphics, it needs a version of Python installed with Tk support. hmmm

[09:51] <discord-raku-bot> <Nemokosch> just to reiterate @:(**@rest, *%rest) are you running Rakudo on Windows?

[09:52] <discord-raku-bot> <:(**@rest, *%rest)> yes, tho i mostly use glot

[10:02] <discord-raku-bot> <gfldex> Most of the time, TWEAK works best.

[10:07] <discord-raku-bot> <Nemokosch> to quote vrurg, BUILD should rarely ever be used

[10:08] <discord-raku-bot> <Nemokosch> new is good if you want to create multiple creation interfaces to the same underlying data, mainly

[10:09] <discord-raku-bot> <Nemokosch> TWEAK is kind of a final step in the creation, default values and blessing stuff has already happened by that time iirc

[10:13] <discord-raku-bot> <Nemokosch> it would be interesting to see how much of stuff works well on Windows

[10:14] <discord-raku-bot> <Nemokosch> I mean hopefully the core would work without any problems

[10:14] <discord-raku-bot> <Nemokosch> but there are many libraries where this is not obvious

[10:14] <discord-raku-bot> <Nemokosch> also, the filesystem is different, I think that's leveraged with an underlying multiplatform C library

[10:15] <discord-raku-bot> <Nemokosch> and the "JVM backend" probably does its usual Java business

[10:20] <discord-raku-bot> <gfldex> Pretty much the first thing I had to learn was to Introspect All The Things!, because the compiler had so many bugs. If you do the same, you will spot all the hidden gems. I strongly disagree that explicit is better, because that is a statement of opinion, not of fact. Most of the time I don't want to deal with all the details. It's just to much cognitive load. Being able to step back and look at the whole

[10:20] <discord-raku-bot> picture will come with time. Or it wont. It's not a given that a good programmer will "get" Raku. Nor should we aim for that. One size fits all has never worked well.

[10:21] <discord-raku-bot> <Nemokosch> by the way, consider trying @jaguart 's Grok module

[10:22] <discord-raku-bot> <Nemokosch> I suppose he wrote it with similar thoughts in mind - it would be good to see how the underlying data is composed before making any assumptions

[10:52] *** NemokoschKiwi joined
[11:21] *** NemokoschKiwi left
[11:33] *** ab5tract joined
[11:58] *** ab5tract left
[11:58] *** ab5tract joined
[12:12] *** snonux joined
[12:34] *** ab5tract left
[13:04] <discord-raku-bot> <Nemokosch> btw I wonder what the most stable choice is if somebody wants to do graphics with Raku

[13:04] <discord-raku-bot> <Nemokosch> there are many GTK ports but I barely know GTK

[13:13] *** snonux left
[13:22] <discord-raku-bot> <:(**@rest, *%rest)> maybe make yet another tcltk binding?

[13:25] <discord-raku-bot> <Nemokosch> tbh could be

[13:26] <discord-raku-bot> <Nemokosch> I'd assume it has a C interface?

[13:38] *** NemokoschKiwi joined
[13:41] *** NemokoschKiwi left
[14:00] <discord-raku-bot> <:(**@rest, *%rest)> don’t know how python does it but i assume its just sending a bunch of commands to the tcl backend

[14:45] *** raschip joined
[14:52] <discord-raku-bot> <stevied> Well if your immediate objective is to just get the code to work the way you expect, best to not try anything fancy and spell things out.

[14:53] <discord-raku-bot> <stevied> Raku is fairly easy if you stick to the straightforward stuff. It’s when you try to take advantage of all its conveniences it seems to get a lot harder. At least for me.

[15:08] <discord-raku-bot> <:(**@rest, *%rest)> sometimes tho raku places assumptions on where you don’t expect which is where its better to be explicit

[15:08] <discord-raku-bot> <:(**@rest, *%rest)> like the named argument thing

[15:14] <discord-raku-bot> <:(**@rest, *%rest)> or just better to read the docs

[15:16] <discord-raku-bot> <stevied> yeah, I guess if I pass a Pair to a constructor with a key that does not exist as an attribute, I assume I would get some kind of warning. But maybe that's just a bad assumption on my part.

[15:16] *** Heptite joined
[15:17] <discord-raku-bot> <:(**@rest, *%rest)> m: class A {   has $.x; }  A.new(:nope);

[15:17] <discord-raku-bot> <stevied> but I don't know how I went a year in Raku without knowing about *%_.

[15:17] <discord-raku-bot> <:(**@rest, *%rest)> m: class A {   has $.x; }  dd A.new(:nope);

[15:18] <discord-raku-bot> <:(**@rest, *%rest)> raku belike

[15:19] <discord-raku-bot> <Nemokosch> I remember Bruce Gray talking about this on a Raku Study Group meetup

[15:19] <discord-raku-bot> <Nemokosch> (next one is tomorrow btw)

[15:19] <discord-raku-bot> <:(**@rest, *%rest)> also Any being both the base class and the equivalent of undefined :cameliathink:

[15:19] <discord-raku-bot> <Nemokosch> for the attribute of sort

[15:19] <discord-raku-bot> <:(**@rest, *%rest)> (this has been talked to death i know)

[15:20] <discord-raku-bot> <:(**@rest, *%rest)> anyways how to make class methods

[15:22] <discord-raku-bot> <Nemokosch> is it not enough that you invoke the method on the type object?

[15:28] <discord-raku-bot> <stevied> class methods are explained well in docs

[15:28] <discord-raku-bot> <:(**@rest, *%rest)> basically i have a class variable representing shared data and i want to have class methods to access them ok the question should be “how to make class variables”

[15:29] <discord-raku-bot> <Nemokosch> try my-scope inside the class, I'd say

[15:29] <discord-raku-bot> <:(**@rest, *%rest)> class method have a ::?CLASS:U type constraint on the invocant

[15:30] *** snonux joined
[15:30] <discord-raku-bot> <stevied> https://docs.raku.org/language/objects#Class_and_instance_methods

[15:33] <discord-raku-bot> <stevied> for like a class variable, just use a regular old "my" variable

[15:34] <discord-raku-bot> <:(**@rest, *%rest)> hmm that means i can also define subs in class bodies  my sub something { ... } not sure how that would turn out

[15:35] <discord-raku-bot> <stevied> yes, you can do that. no problem

[15:35] <discord-raku-bot> <stevied> this is what I have done

[15:36] <discord-raku-bot> <stevied> look at example at the bottom of this section: https://docs.raku.org/language/objects#Object_construction

[15:36] <discord-raku-bot> <stevied> the example is introduced with "Here is an example where we enrich the Str class with an auto-incrementing ID:"

[15:40] <discord-raku-bot> <:(**@rest, *%rest)> how do i pad a number with zeros

[15:41] <discord-raku-bot> <:(**@rest, *%rest)> in its string representation

[15:41] <discord-raku-bot> <Nemokosch> I'd definitely just use sprintf

[15:41] <discord-raku-bot> <:(**@rest, *%rest)> ok

[15:41] <discord-raku-bot> <Nemokosch> with the arguments known from C

[15:42] <discord-raku-bot> <:(**@rest, *%rest)> m: printf(“%2d”, 1)

[15:42] <discord-raku-bot> <:(**@rest, *%rest)> m: printf(“%10d”, 1)

[15:44] <discord-raku-bot> <:(**@rest, *%rest)> m: printf(“%010d”, 1)

[15:57] <discord-raku-bot> <:(**@rest, *%rest)> m: class TV {     # class          my %tvs;          method tvs(::?CLASS:U:) {         %tvs     }          # instance          has $.owner;          submethod BUILD(:$!owner) {         my $tv-serial = 'TV%04d'.sprintf(%tvs.elems);         %tvs{$tv-serial} = self;     } }  TV.new(owner => 'foo'); TV.new(owner => 'bar'); TV.new(owner => 'baz'); TV.new(owner => 'quux');  dd TV.tvs; 

[15:58] <discord-raku-bot> <:(**@rest, *%rest)> i think this is how it works

[16:12] <discord-raku-bot> <Nemokosch> nice

[16:27] *** snonux left
[16:31] *** snonux joined
[16:34] <discord-raku-bot> <p6steve> personally I would go method tvs(TV:U:) {...} instead of method tvs(::?CLASS:U:) {...} that just seems a bit clearer...

[16:36] <discord-raku-bot> <:(**@rest, *%rest)> should i put the code inside the BUILD body in TWEAK or new?

[16:37] <discord-raku-bot> <p6steve> ... (I see that the docs don't mention my way ... so perhaps it has some issues)

[16:37] <discord-raku-bot> <:(**@rest, *%rest)> or keep it there?

[16:37] <discord-raku-bot> <p6steve> ... I usually go with TWEAK since then I can use all the attr defaults and so on

[16:38] <discord-raku-bot> <p6steve> ... or I use multi method new() to hone down a variety of creation options

[16:39] <discord-raku-bot> <:(**@rest, *%rest)> conceptually it assigns a serial number to the TV instance and put it in %tvs

[16:40] <discord-raku-bot> <:(**@rest, *%rest)> which is why idk where would it fit

[16:40] <discord-raku-bot> <:(**@rest, *%rest)> BUILD or TWEAK

[16:41] <raschip> The usual recommendation is to go with TWEAK, using BUILD will disable a ton of features you'd have to implement yourself.

[16:43] *** snonux left
[16:48] <discord-raku-bot> <:(**@rest, *%rest)> ok

[17:35] <discord-raku-bot> <stevied> @gfldex wrote something up years ago about throwing an exception when bad name arguments are passed: https://perl6advent.wordpress.com/2015/12/13/a-new-trait-for-old-methods/

[18:32] <discord-raku-bot> <p6steve> raschip++

[18:38] *** ab5tract joined
[19:03] *** ab5tract left
[19:53] *** ab5tract joined
[20:52] <discord-raku-bot> <stevied> i found a bug in the fez module:                     my $regex = $_.split('*').map({$_ eq '' ?? '.*' !! "'$_'"}).join('');                   rx/ <$regex> / 

[20:53] <discord-raku-bot> <stevied> ^^ broken code

[20:53] <discord-raku-bot> <Nemokosch> could you elaborate?

[20:53] <discord-raku-bot> <stevied> If I remove the angle brackets from the second line, it works

[20:54] <discord-raku-bot> <stevied> let me get you the module file that's broken

[20:54] <discord-raku-bot> <stevied> https://github.com/tony-o/raku-fez/blob/641cbf5b9e4bd45d873112aa61709bf4c6922c48/lib/Fez/Util/Pax.rakumod#L13

[20:55] <discord-raku-bot> <stevied> so, if there is a .gitignore file in the directory the module just hangs

[20:56] <discord-raku-bot> <stevied> why is that $regex scalar in angle brackets?

[20:59] <discord-raku-bot> <Nemokosch> I don't know, maybe let's ask tonyo

[21:00] <discord-raku-bot> <stevied> I plan to, but I want to try to make sure I understand the bug.

[21:01] <discord-raku-bot> <stevied> https://docs.raku.org/language/regexes#Regex_interpolation

[21:01] <discord-raku-bot> <stevied> I haven't read it but it looks confusing as shit

[21:02] <discord-raku-bot> <Nemokosch> one thing is sure: <$foo> and $foo is not the same

[21:03] <discord-raku-bot> <stevied> ok, so I think I get it

[21:03] <discord-raku-bot> <stevied> not sure how this could go unreported for so long

[21:03] <discord-raku-bot> <Nemokosch> <$foo> seems like some secret way to turn a string into a regex

[21:03] <discord-raku-bot> <stevied> and seems like it should be caught by a test

[21:03] <discord-raku-bot> <stevied> there really are hardly any tests for fez module

[21:04] <discord-raku-bot> <Nemokosch> well, what do you get exactly

[21:05] <discord-raku-bot> <stevied> what do I get when I use fez with a .gitignore file? It just hangs forever

[21:05] <discord-raku-bot> <stevied> when I remove the angle brackets, it creates a tarball in sdist

[21:05] <discord-raku-bot> <stevied> and it doesn't hang

[21:07] *** raschip left
[21:09] *** raschip joined
[21:11] <discord-raku-bot> <Nemokosch> hmm, the truth is

[21:11] <discord-raku-bot> <Nemokosch> I'm not sure if I published anything with raw fez in the last 3 months, when this change happened

[21:12] <discord-raku-bot> <Nemokosch> but if it's really as you say, indeed it's strange that nobody reported it

[21:14] *** ab5tract left
[21:17] <discord-raku-bot> <stevied> the lib/Fez/Util/Pax.rakumod was added on 10/15/2022

[21:17] <discord-raku-bot> <stevied> so it's new

[21:17] <discord-raku-bot> <stevied> alright, well, I guess I got enough to write a decent report

[21:18] <discord-raku-bot> <stevied> all those maps and greps are confusing as hell, though. I don't understand what's going on with the manifest. seems like that could or should be greatly simplified

[21:21] <discord-raku-bot> <stevied> I don't understand this part of the Fez readme:   #### using pax  pax is the bundler included with v38 onward to avoid compatibility issues with certain BSDs.  git archive is no longer used as it caused a lot of confusion - this means that what's on disk is what is getting bundled rather than what is in main/master!  #### using git archive (deprecated with v38)  fez will attempt to run `git archive` which

[21:21] <discord-raku-bot> will obey your `.gitignore` files. it is a good idea to put sdist/ in your root gitignore to prevent previously uploaded modules. 

[21:22] <discord-raku-bot> <stevied> it says git archive is "no longer used" and then in the next section is says it's deprecated

[21:22] <discord-raku-bot> <stevied> oh, maybe I have to put sdist into the gitignore. maybe that's why it's hanging. it's recursive

[21:25] <discord-raku-bot> <stevied> nope, still hangs

[21:35] <discord-raku-bot> <stevied> now I wonder if I switch to 2022.07 if it will work. let's see

[21:36] <discord-raku-bot> <stevied> holy shit. it worked.

[21:36] <discord-raku-bot> <stevied> using same version of fez

[21:39] <discord-raku-bot> <stevied> i think this is a bad bug in rakudo

[21:46] <discord-raku-bot> <Nemokosch> hmmmm

[21:46] <discord-raku-bot> <Nemokosch> does the regex work differently? @stevied

[21:49] <discord-raku-bot> <stevied> it must

[21:50] <discord-raku-bot> <stevied> I will try to confirm. Can you see if you can reproduce?

[21:54] <discord-raku-bot> <Nemokosch> which part?

[21:55] <discord-raku-bot> <stevied> see if you can do fez upload on directory with a .gitignore file in 2022.07 and 2022.12

[21:57] <lizmat> fwiw, I've uploaded the latest App::Rak using 2022.12+ on Mojave without any problems (yes, it has a .gitignore file)

[21:58] <discord-raku-bot> <stevied> ok, thanks

[21:58] <discord-raku-bot> <stevied> now it's hanging for me again on 2022.07. very weird

[21:59] <discord-raku-bot> <stevied> I think I must have been using my local, hacked version of fez and didn't know it

[21:59] <discord-raku-bot> <stevied> /lizmat are you on a mac?

[22:00] <lizmat> uploading from Monterey

[22:07] *** MasterDuke joined
[22:08] <discord-raku-bot> <Sparkill> ogl

[22:13] <discord-raku-bot> <stevied> i'm not sure why the presence of .gitignore would make a difference in ventura and not monterey

[22:14] <discord-raku-bot> <stevied> i have a copy of monterey though. i can try on that

[22:16] <discord-raku-bot> <Nemokosch> I'd say, you are already a squashathon participant, de facto 😉

[22:19] <discord-raku-bot> <stevied> heh

[22:19] <discord-raku-bot> <stevied> fuck. hangs on my old mac running big sur running 2022.06

[22:20] <discord-raku-bot> <stevied> none of this makes any sense.

[22:21] <discord-raku-bot> <Nemokosch> could you please log the content of the @ignores variable?

[22:22] <discord-raku-bot> <stevied> sure

[22:22] <discord-raku-bot> <Nemokosch> Fez could really use a verbose mode tbh

[22:22] <discord-raku-bot> <stevied> [method rx/ <$regex> / method rx/ <$regex> / method rx/ <$regex> / method rx/ <$regex> / method rx/ <$regex> / method rx/ <$regex> /]

[22:22] <discord-raku-bot> <stevied> that's what I got

[22:23] <discord-raku-bot> <stevied> doesn't look like it would work

[22:23] <discord-raku-bot> <stevied> looks like a mess

[22:24] <discord-raku-bot> <Nemokosch> well it could work imo, the textual form is ugly though

[22:24] <discord-raku-bot> <Nemokosch> regexes are kind of methods

[22:26] <discord-raku-bot> <stevied> i don't get why there are repetitive methods, though

[22:26] <discord-raku-bot> <stevied> makes no sense to me

[22:26] <discord-raku-bot> <stevied> oh, it's an arry of methods

[22:26] <discord-raku-bot> <Nemokosch> for the lines of the gitignore file

[22:26] <lizmat> could be that the rendering of each regex is incomplete / incorrect

[22:26] <discord-raku-bot> <stevied> I keep forgetting that arrays use whitespace separators

[22:27] <discord-raku-bot> <Nemokosch> you could use dd @ignores (in this case, I don't expect anything informative tbh)

[22:28] <discord-raku-bot> <Nemokosch> one thing I have a bad feeling about is any

[22:28] <discord-raku-bot> <Nemokosch> junctions can have cunning issues

[22:29] <discord-raku-bot> <Nemokosch> what could really help with knocking the regex part down is logging $regex itself, to see if it's as lizmat said

[22:30] <discord-raku-bot> <stevied> tried with Data::Dump and it's a giant mess of output

[22:31] <discord-raku-bot> <Nemokosch> I just meant everyday dd

[22:31] <discord-raku-bot> <stevied> here's $regex:   '.precomp/' '/Directory-'.* .*'.iml' .*'.idea' 'sdist/' .* 

[22:31] <discord-raku-bot> <Nemokosch> okay, thanks

[22:32] <discord-raku-bot> <Nemokosch> it seems valid, at least

[22:32] <discord-raku-bot> <stevied> remember, when I remove .gitignore, everything works

[22:32] <discord-raku-bot> <stevied> gotta be a bug in the module

[22:33] <discord-raku-bot> <Nemokosch> I mean, this piece of code only runs when .gitignore is present

[22:33] <discord-raku-bot> <stevied> right

[22:33] <discord-raku-bot> <stevied> if it works for liz, maybe it's something in the .gitignore itself

[22:33] *** raschip left
[22:34] <discord-raku-bot> <Nemokosch> but sometimes it worked for you as well with the same data, right??

[22:34] <discord-raku-bot> <stevied> ok, yeah, when I pull some lines from gitignore, it work

[22:35] <discord-raku-bot> <stevied> got it

[22:35] <discord-raku-bot> <stevied> there's a blank line at end of the .gitignore. makes it choke

[22:36] <discord-raku-bot> <Nemokosch> "null regex not allowed"

[22:36] <discord-raku-bot> <stevied> ok, cool. now I can relax 🙂

[22:37] <discord-raku-bot> <stevied> or, at least, I can move on to the other fez bug 🙂

[22:37] <discord-raku-bot> <Nemokosch> makes it choke???

[22:38] <discord-raku-bot> <Nemokosch> that's the .* right there

[22:38] <discord-raku-bot> <Nemokosch> but why should that make it choke? 🙀

[22:38] <discord-raku-bot> <stevied> yeah, choke. crap out. fuck up.

[22:38] <discord-raku-bot> <stevied> it just hangs

[22:39] <discord-raku-bot> <stevied> more technically, it hangs when trying to read the .exitcode on the pax command

[22:39] <discord-raku-bot> <stevied> not sure why

[22:42] <discord-raku-bot> <Nemokosch> could you log the @manifest please?

[22:42] <discord-raku-bot> <Nemokosch> maybe we've been going the wrong way all along?

[22:42] <discord-raku-bot> <stevied> with or without the blank line in .gitignore?

[22:43] <discord-raku-bot> <Nemokosch> maybe both

[22:44] <discord-raku-bot> <Nemokosch> I'd expect there to be a difference between the two cases

[22:44] <discord-raku-bot> <stevied> k, one sec

[22:44] <discord-raku-bot> <stevied> trying to see if I can upload via mi6 right now. have to install some modules

[22:48] <discord-raku-bot> <stevied> wow! mi6 release now works on 2022.12 for me

[22:49] <discord-raku-bot> <stevied> ok, let me check manifest

[22:50] <discord-raku-bot> <stevied> with no blank line in .gitignore: [META6.json LICENSE Changes t/02-more.rakutest t/01-basic.rakutest xt/Author-Tests.rakutest README.md lib/Directory.rakumod dist.ini]

[22:51] <discord-raku-bot> <stevied> with blank line: []

[22:51] <discord-raku-bot> <stevied> so that's definitely the problem

[22:51] <discord-raku-bot> <Nemokosch> well yeah the empty repo is not healthy xD

[22:51] <discord-raku-bot> <Nemokosch> .gitignore itself ignores empty lines, right?

[22:52] <discord-raku-bot> <stevied> well, it's proper to end all files with a blank line

[22:52] <discord-raku-bot> <stevied> that's the way all text files are supposed to be

[22:52] <discord-raku-bot> <Nemokosch> well I hope not cause it's ugly but anyway 😅

[22:53] <discord-raku-bot> <Nemokosch> I think .gitignore doesn't give a damn about empty lines

[22:53] <discord-raku-bot> <Nemokosch> and they definitely don't ignore the whole folder

[22:53] <discord-raku-bot> <stevied> yeah, I highly doubt it doesn't like them

[22:53] <discord-raku-bot> <stevied> https://www.oreilly.com/library/view/version-control-with/9780596158187/ch05s08.html

[22:54] <discord-raku-bot> <stevied> ^^ say blanks lines are ignored

[22:54] <discord-raku-bot> <Nemokosch> yep, cool

[22:54] <discord-raku-bot> <Nemokosch> then this is one definite bug in fez

[22:55] <discord-raku-bot> <stevied> more tecnically, ever text file should end with \n

[22:55] <discord-raku-bot> <stevied> it just looks like a blank line in your editor

[22:55] <discord-raku-bot> <stevied> but it's not blank. it doesn't exist

[22:55] <discord-raku-bot> <Nemokosch> empty line - turns into .* as a regex - matches everything, boom, all files gone

[22:56] <discord-raku-bot> <Nemokosch> tbh I'm not sure about .* 'some string' either

[22:56] <discord-raku-bot> <stevied> yeah, you're going to have to explain that to me. why is it wiping files out?

[22:56] <discord-raku-bot> <stevied> I know what .* is obviously, but not in the context of this file collector

[22:57] <discord-raku-bot> <stevied> why doesn't it match every file instead?

[22:57] <discord-raku-bot> <Nemokosch> because it's negated in the code

[22:57] <discord-raku-bot> <Nemokosch> the output of any

[22:58] <discord-raku-bot> <stevied> i can't wrap my head around that ls sub in there. too confusing

[22:58] <discord-raku-bot> <Nemokosch> looks quite bizarre, with ! and .so at the same time

[22:58] <discord-raku-bot> <Nemokosch> do you have .iml or .idea files in your folder?

[22:58] <discord-raku-bot> <stevied> you'd have to spend a half hour breaking that down (at least I would)

[22:59] <discord-raku-bot> <stevied> yeah. .iml and .idea

[22:59] <discord-raku-bot> <Nemokosch> hm, those are (rightfully) sorted out

[23:00] <discord-raku-bot> <Nemokosch> idk the backtrack rules of regex

[23:00] <discord-raku-bot> <Nemokosch> but they fit this use case apparently

[23:01] <discord-raku-bot> <stevied> got to be an easier way to generate the file listing that excludes what's in .gitignore than this

[23:01] <discord-raku-bot> <stevied> it's just a mess

[23:01] <discord-raku-bot> <stevied> is what 's in .gitignore even regexes?

[23:02] <discord-raku-bot> <stevied> that doesn't seem right at all

[23:02] <discord-raku-bot> <stevied> not regexes raku would understand anyway, I wouldn't think

[23:03] <discord-raku-bot> <Nemokosch> this is not a sentence I would understand anyway 😛

[23:04] <discord-raku-bot> <stevied> it looks like the fez code treats each line in .gitignore like a raku regex.

[23:04] <discord-raku-bot> <Nemokosch> well regexes are more powerful than .gitignore patterns I think

[23:04] <discord-raku-bot> <stevied> i have very strong doubts that this a proper method for determining which files to ignore

[23:04] <discord-raku-bot> <Nemokosch> so this can work

[23:05] <discord-raku-bot> <Nemokosch> buuut

[23:05] <discord-raku-bot> <Nemokosch> I'd rather wish for this to be outsourced into its own module

[23:05] <discord-raku-bot> <Nemokosch> that does this in a sane, foolproof way

[23:05] <discord-raku-bot> <stevied> this is possible in .gitignore: A trailing "/**" matches everything inside. For example, "abc/**" matches all files inside directory "abc", relative to the location of the .gitignore file, with infinite depth.

[23:05] <discord-raku-bot> <Nemokosch> with tests, right?

[23:05] <discord-raku-bot> <stevied> raku doesn't know how to interpret /**

[23:05] <discord-raku-bot> <Nemokosch> or, another approach

[23:06] <discord-raku-bot> <Nemokosch> (what mi6 does)

[23:06] <discord-raku-bot> <Nemokosch> git ls-files

[23:06] <discord-raku-bot> <Nemokosch> and call it a day

[23:06] <discord-raku-bot> <stevied> this definitely needs tests, yeah

[23:06] <discord-raku-bot> <stevied> but this has a custom ls command

[23:06] <discord-raku-bot> <stevied> doesn't use mi6

[23:07] <discord-raku-bot> <Nemokosch> I mean, the whole "what files need to be saved" is intended to be "all tracked files", no?

[23:07] <discord-raku-bot> <Nemokosch> I'd guess so

[23:07] <discord-raku-bot> <stevied> I presume. but the readme for fez says he is moving away from git acrhive

[23:08] <discord-raku-bot> <stevied> it looks like it's doing a roll your own method for collecting files. not a super trivial task, if you ask me

[23:08] <discord-raku-bot> <Nemokosch> there's also this

[23:08] <discord-raku-bot> <Nemokosch> https://raku.land/zef:lizmat/Git::Files

[23:09] <discord-raku-bot> <stevied> yeah, should probably outsource to that module

[23:09] <discord-raku-bot> <Nemokosch> this also runs git ls-files under the hood

[23:10] <discord-raku-bot> <stevied> maybe tony-o cargo culted from mi6 or this module

[23:10] <discord-raku-bot> <Nemokosch> actually this is an interface to git ls-files

[23:11] <discord-raku-bot> <stevied> alright, at any rate, I gotta go get ready for dinner. check you later. thanks again for helping me brainstorm this. helps me find the problem sooner

[23:14] <discord-raku-bot> <Nemokosch> 🤝

[23:14] <discord-raku-bot> <Nemokosch> bon appetit

[23:20] <discord-raku-bot> <Sharparam> i am at a loss at what's going on here:  perl [6] > my @pairs = [(2..4, 6..8), (2..3, 4..5), (5..7, 7..9), (2..8, 3..7), (6..6, 4..6), (2..6, 4..8)] [(2..4 6..8) (2..3 4..5) (5..7 7..9) (2..8 3..7) (6..6 4..6) (2..6 4..8)] [7] > @pairs.map: { $_[0] ~~ $_[1] } (True False False False False False) [8] > @pairs.map: { my ($a, $b) = $_[0], $_[1]; $a ~~ $b } (False False False False True False)   why does it

[23:20] <discord-raku-bot> behave different if each Range in the pair is assigned to a variable? i must be missing something fundamental

[23:27] <discord-raku-bot> <Nemokosch> hello hello

[23:33] <discord-raku-bot> <Nemokosch> the second version seems right... :cameliathink:

[23:33] <discord-raku-bot> <Nemokosch> oh, I have my suspicion

[23:33] <discord-raku-bot> <Nemokosch> ~~ alters $_

[23:35] <discord-raku-bot> <Nemokosch> I'm curious if this ever worked differently, then I'll be back to you with an interpretation @Sharparam

[23:36] <discord-raku-bot> <Sharparam> yeah the second version produces the expected result, i'm not sure what the first one actually does

[23:37] <discord-raku-bot> <Nemokosch> "nothing to bisect" says the bot - this always worked this way (since 2015 at least)

[23:38] <discord-raku-bot> <Sharparam> hm, "The smartmatch operator aliases the left-hand side to $_"

[23:38] <discord-raku-bot> <Sharparam> i wonder if that's why

[23:38] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/traps#Topicalizing_operators

[23:38] <discord-raku-bot> <Nemokosch> yes

[23:39] <discord-raku-bot> <Sharparam> right, that makes sense then

[23:39] <discord-raku-bot> <Nemokosch> so it's like

[23:39] <discord-raku-bot> <Nemokosch> you fetch the left range

[23:39] <discord-raku-bot> <Nemokosch> temporarily rename it $_

[23:40] <discord-raku-bot> <Sharparam> so a more compact way to do it would be: @pairs.map: { [~~] $_ }

[23:41] <discord-raku-bot> <Nemokosch> well, almost

[23:41] <discord-raku-bot> <Nemokosch> tbh I didn't expect it to work but the result got even more interesting than I thought

[23:42] <discord-raku-bot> <Nemokosch> m:   my @pairs = [(2..4, 6..8), (2..3, 4..5), (5..7, 7..9), (2..8, 3..7), (6..6, 4..6), (2..6, 4..8)]; say @pairs.map: { [~~] $_ }; 

[23:43] <discord-raku-bot> <Nemokosch> this is where one would want to give up 🤠 but there is a remedy

[23:43] <discord-raku-bot> <Nemokosch> m:   my @pairs = [(2..4, 6..8), (2..3, 4..5), (5..7, 7..9), (2..8, 3..7), (6..6, 4..6), (2..6, 4..8)]; say @pairs.map: { [~~] $_[] }; 

[23:43] <discord-raku-bot> <Nemokosch> I'm rather surprised that this works

[23:44] <discord-raku-bot> <Sharparam> curious

[23:45] <discord-raku-bot> <Sharparam> it also works if binding instead:  perl [0] > my @pairs := (2..4, 6..8), (2..3, 4..5), (5..7, 7..9), (2..8, 3..7), (6..6, 4..6), (2..6, 4..8) ((2..4 6..8) (2..3 4..5) (5..7 7..9) (2..8 3..7) (6..6 4..6) (2..6 4..8)) [1] > @pairs.map: { [~~] $_ } (False False False False True False) [2] > my @pairs = (2..4, 6..8), (2..3, 4..5), (5..7, 7..9), (2..8, 3..7), (6..6, 4..6), (2..6, 4..8) [(2..4 6..8) (2..3 4..5)

[23:45] <discord-raku-bot> (5..7 7..9) (2..8 3..7) (6..6 4..6) (2..6 4..8)] [3] > @pairs.map: { [~~] $_ } (True True True True True True) 

[23:45] <discord-raku-bot> <Nemokosch> the important thing is to get rid of the container

[23:47] <discord-raku-bot> <Nemokosch> m:  my @pairs is List = (2..4, 6..8), (2..3, 4..5), (5..7, 7..9), (2..8, 3..7), (6..6, 4..6), (2..6, 4..8); say @pairs.map: { [~~] $_ }; 

[23:47] <discord-raku-bot> <Nemokosch> container = mutation + itemization

[23:48] <discord-raku-bot> <Nemokosch> and the values of an array always come in containers

[23:49] <discord-raku-bot> <Nemokosch> okay now I understand why it works, after all

[23:50] <discord-raku-bot> <Nemokosch> there is no $_ lookup between the operands, it all happens before starting with the operator 👏

[23:50] <discord-raku-bot> <Sharparam> right

[23:51] <discord-raku-bot> <Nemokosch> how long have you been using Raku? you don't seem that much of a beginner

[23:53] <discord-raku-bot> <Sharparam> a bit on-and-off for a while, i come back to it occasionally, i still feel like a beginner in it though :p

[23:53] <discord-raku-bot> <Sharparam> i've been mostly translating advent of code solutions from ruby to raku to get more familiar with it

[23:54] <discord-raku-bot> <Nemokosch> oh okay, have fun

[23:54] <discord-raku-bot> <Nemokosch> Ruby did seem kind of like a language inspired by Perl, too

[23:55] <discord-raku-bot> <Sharparam> yeah, perl and smalltalk iirc?

[23:58] <discord-raku-bot> <Nemokosch> Well, I don't know much about Smalltalk but it Ruby does look visually similar that's for sure

[23:59] <discord-raku-bot> <Sharparam> never used smalltalk myself either. long ago a friend introduced me to ruby on rails and since then ruby has just *clicked* with me ^^

