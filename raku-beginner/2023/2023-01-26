[00:36] <discord-raku-bot> <:(*@args, *%kwargs)> what are .^ methods?

[00:36] <discord-raku-bot> <Nemokosch> metamethods - they act upon the objects of the metamodel

[00:37] <discord-raku-bot> <Nemokosch> mostly used for introspection

[00:53] <discord-raku-bot> <:(*@args, *%kwargs)> m: class Foo {}  say Foo.new.^name; 

[00:54] <discord-raku-bot> <Nemokosch> m:  class Foo {}  say Foo.new.HOW.name; 

[00:54] <discord-raku-bot> <Nemokosch> mhm

[00:54] <discord-raku-bot> <Nemokosch> m:  class Foo {}  say .name($_) given Foo.new.HOW; 

[00:54] <discord-raku-bot> <Nemokosch> this is what .^ is a shorthand for, from what I know

[00:55] <discord-raku-bot> <Nemokosch> calling a method on .HOW, while also passing it as the first argument

[01:57] <discord-raku-bot> <:(*@args, *%kwargs)> m: class Foo {}  say Any.HOW.name(Foo.new); 

[01:57] <discord-raku-bot> <:(*@args, *%kwargs)> what

[02:56] *** MasterDuke joined
[03:12] *** rf left
[03:33] <discord-raku-bot> <:(*@args, *%kwargs)> is it me or weak typing is a bad thing

[05:45] *** Heptite left
[06:47] <discord-raku-bot> <:(*@args, *%kwargs)> is raku made to accomodate someone who has enough time to type code in character map lol why does it support so many unicode symbols

[06:53] <discord-raku-bot> <:(*@args, *%kwargs)> what does nqp do

[06:54] <CIAvash> you don't need to enter characters by their code: https://docs.raku.org/language/unicode_entry

[07:37] <discord-raku-bot> <Nemokosch> I mean, well done, the name of Any is indeed Any üòÑ

[07:38] <discord-raku-bot> <Nemokosch> NQP is the bootstrapping language of Raku (not sure if it's specced as such but that's how it is in Rakudo)

[07:39] <discord-raku-bot> <:(*@args, *%kwargs)> so it gets the name of the invocant instead of the first arg?

[07:40] <discord-raku-bot> <Nemokosch> Don't forget that the first argument you passed is not even a metaobject

[07:43] <discord-raku-bot> <Nemokosch> m: Any.HOW.say

[07:46] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/Perl6/Metamodel/Naming.nqp#L5

[07:56] <discord-raku-bot> <:(*@args, *%kwargs)> why does my function returns Nil https://glot.io/snippets/ghmzmvga3v

[07:57] <discord-raku-bot> <:(*@args, *%kwargs)> oh the last for just got interpreted as a statement

[07:57] <discord-raku-bot> <Nemokosch> yes, your last for is run in sunk context

[07:58] <discord-raku-bot> <Nemokosch> however, this is nothing a do statement prefix couldn't accomodate for

[07:58] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1068077487545925662/image.png

[07:58] <discord-raku-bot> <:(*@args, *%kwargs)> i just wrap it in parens

[07:58] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1068077545318252574/image.png

[08:03] <discord-raku-bot> <Nemokosch> https://glot.io/snippets/ghmzu5g7qg

[08:03] <discord-raku-bot> <Nemokosch> changed two little things

[08:05] <discord-raku-bot> <:(*@args, *%kwargs)> thx

[08:06] <discord-raku-bot> <:(*@args, *%kwargs)> m:perl my @a is default(True); say @a[1]; say @a; 

[08:06] <discord-raku-bot> <:(*@args, *%kwargs)> is that autovivification magic

[08:06] <discord-raku-bot> <Nemokosch> basically yes

[08:06] <discord-raku-bot> <Nemokosch> it says "if you retrieve a value that doesn't exist, you should get this"

[08:09] <discord-raku-bot> <:(*@args, *%kwargs)> is there builtin function which does .raku.say?

[08:09] <discord-raku-bot> <Nemokosch> more or less

[08:09] <discord-raku-bot> <:(*@args, *%kwargs)> like this sub say-raku($v) {   $v.raku.say } 

[08:09] <discord-raku-bot> <Nemokosch> dd does something that includes that

[08:09] <discord-raku-bot> <Nemokosch> it tries to fetch the name of the variable as well

[08:10] <discord-raku-bot> <Nemokosch> m: my @a = [[1,2],3]; dd @a

[08:10] <discord-raku-bot> <Nemokosch> m: my @a = [[1,2],3]; dd @a[0]

[08:10] <discord-raku-bot> <Nemokosch> mind the $

[08:11] <discord-raku-bot> <:(*@args, *%kwargs)> $ = container

[08:11] <discord-raku-bot> <Nemokosch> because it's an element of an array

[08:11] <discord-raku-bot> <Nemokosch> so it's wrapped in a SCalar

[08:11] <discord-raku-bot> <:(*@args, *%kwargs)> m: say 13.Str.comb.reverse.join.Int 

[08:11] <discord-raku-bot> <:(*@args, *%kwargs)> chaining magic üòé

[08:12] <discord-raku-bot> <Nemokosch> you don't even need .Str I think

[08:12] <discord-raku-bot> <Nemokosch> weak typing üòÜ

[08:12] <discord-raku-bot> <Nemokosch> say 13.comb.reverse.join.Int

[08:12] <discord-raku-bot> <Nemokosch> m: say 13.comb.reverse.join.Int

[08:12] <discord-raku-bot> <Nemokosch> actually, this is just 13.flip.Int

[08:13] <discord-raku-bot> <:(*@args, *%kwargs)> m: say 13.flip 

[08:13] <discord-raku-bot> <Nemokosch> m: dd 13.flip

[08:14] <discord-raku-bot> <Nemokosch> the reason is that Int is Cool

[08:14] <discord-raku-bot> <Nemokosch> this is not my pun

[08:14] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/Cool

[08:16] <discord-raku-bot> <:(*@args, *%kwargs)> weak typing isn't cool üò§

[08:17] <discord-raku-bot> <Nemokosch> not even if it's called inheritance? üòõ

[08:20] <discord-raku-bot> <:(*@args, *%kwargs)> its not if unrelated types are implicitly coerced

[08:20] <discord-raku-bot> <:(*@args, *%kwargs)> m: say 1 + '1' 

[08:21] <discord-raku-bot> <Nemokosch> that's a different case

[08:21] <discord-raku-bot> <Nemokosch> and well, "implicitly"? Isn't it what + signals?

[08:21] <discord-raku-bot> <Nemokosch> as opposed to ~ for example

[08:21] <discord-raku-bot> <:(*@args, *%kwargs)> ok "explicitly" coerced

[08:23] <discord-raku-bot> <:(*@args, *%kwargs)> implicit because there is no .Int after the string

[08:23] <discord-raku-bot> <Nemokosch> okay but who decided that .Int (or perhaps better said .Numeric) is the only way to mark the operands as numbers?

[08:26] <discord-raku-bot> <:(*@args, *%kwargs)> me

[08:26] <discord-raku-bot> <Nemokosch> üêà

[08:28] <discord-raku-bot> <Nemokosch> btw I might have found a bug

[08:28] <discord-raku-bot> <Nemokosch> all roles are Cool

[08:29] <discord-raku-bot> <:(*@args, *%kwargs)> :cameliathink:

[08:30] <discord-raku-bot> <:(*@args, *%kwargs)> m: my @set = (1, 2, 3).Set; dd @set; 

[08:31] <discord-raku-bot> <:(*@args, *%kwargs)> somehow everything in @ is coerced into an Array

[08:35] <discord-raku-bot> <Nemokosch> there are two things with @

[08:35] <discord-raku-bot> <Nemokosch> an enforced type constrain (Positional)

[08:35] <discord-raku-bot> <Nemokosch> and a default type (Array)

[08:36] <discord-raku-bot> <Nemokosch> when you assign a value to a my @var, you are putting stuff into the array

[08:36] <discord-raku-bot> <Nemokosch> if you were to bind instead

[08:36] <discord-raku-bot> <Nemokosch> m: my @set := (1, 2, 3).Set;

[08:36] <discord-raku-bot> <Nemokosch> dang, that doesn't fulfill the constraint

[08:44] <discord-raku-bot> <:(*@args, *%kwargs)> how do i convert from a list of keys to a Map with the keys in the same order

[08:45] <discord-raku-bot> <Nemokosch> Maps don't keep order I think

[08:45] <discord-raku-bot> <Nemokosch> that's intrinsic to their representation

[08:46] <discord-raku-bot> <:(*@args, *%kwargs)> Hash does?

[08:46] <discord-raku-bot> <Nemokosch> probably not

[08:46] <discord-raku-bot> <Nemokosch> there are modules that enforce some ordering but that's definitely a performance penalty

[08:47] <discord-raku-bot> <Nahita> you canuse Hash::Ordered if you must

[08:58] <discord-raku-bot> <:(*@args, *%kwargs)> how to apply a callable to a list

[08:59] <discord-raku-bot> <Nemokosch> what do you mean? this sounds like a function call with a list argument

[09:00] <discord-raku-bot> <:(*@args, *%kwargs)> py f(*args) or like this in jsjs f.apply(null, args) 

[09:00] <discord-raku-bot> <:(*@args, *%kwargs)> do i use slips again?

[09:01] <discord-raku-bot> <Nemokosch> oh so you want to unpack it into an argument list?

[09:01] <discord-raku-bot> <Nemokosch> Well, basically yes, except here I think you must use the | syntax

[09:01] <discord-raku-bot> <Nemokosch> |@list

[09:01] <discord-raku-bot> <Nemokosch> or something

[09:03] <discord-raku-bot> <Nemokosch> | can be used for unpacking a Pair or Map into named arguments, too

[09:07] <discord-raku-bot> <:(*@args, *%kwargs)> til there are 3 kinds of slurpy args

[09:09] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub f(*@args) {   @args } sub g(**@args) {   @args } sub h(+@args) {   @args }  say f(1, (2, 3), 4); say g(1, (2, 3), 4); say h(1, (2, 3), 4); 

[09:10] <discord-raku-bot> <:(*@args, *%kwargs)> ** slurpy is the closest to other languages

[09:10] *** dakkar joined
[09:11] <discord-raku-bot> <Nemokosch> yes

[09:11] <discord-raku-bot> <Nemokosch> * is kind of legacy and + is the pragma

[09:14] <discord-raku-bot> <:(**@args, **%kwargs)> does the choice of slurpy types affect named slurpies?

[09:15] <discord-raku-bot> <:(**@args, **%kwargs)> m: sub f(*%kwargs) {   %kwargs } sub g(**%kwargs) {   %kwargs } sub h(+%kwargs) {   %kwargs }  say f( :a(1), :b(2, 3) ); say g( :a(1), :b(2, 3) ); say h( :a(1), :b(2, 3) ); 

[09:15] <discord-raku-bot> <:(**@args, **%kwargs)> what

[09:16] <discord-raku-bot> <:(**@args, **%kwargs)> bruh

[09:16] <discord-raku-bot> <Nahita> i was trying the last one and it becomes and Array :y

[09:17] <discord-raku-bot> <Nahita> m: -> +%k { %k.say }((a => 4, b => -2))

[09:17] <discord-raku-bot> <Nahita> ** and + not meant to use with %

[09:17] <discord-raku-bot> <Nahita> **%a one turns into %a

[09:17] <discord-raku-bot> <Nahita> +%a turns into... array

[09:18] <discord-raku-bot> <:(**@args, *%kwargs)> i want to use ** with % for consistency with **@ üò≠

[09:18] <discord-raku-bot> <Nahita> it turns into array for scalars as welll

[09:19] <discord-raku-bot> <Nahita> m: -> +$a { $a.say }(4, 5)

[09:19] <discord-raku-bot> <Nahita> i think +%k is better for esoterism

[09:19] <discord-raku-bot> <Nahita> then +$a

[09:19] <discord-raku-bot> <Nemokosch> fair enough tbh

[09:20] <discord-raku-bot> <Nemokosch> also, does *%kwargs flatten or not?

[09:26] <discord-raku-bot> <Nemokosch> seems to me that flattening a map/hash is not really a thing

[09:26] <discord-raku-bot> <Nemokosch> well okay, I think consistency would be if ** and + existed for named arguments as well...

[09:29] <discord-raku-bot> <:(**@args, *%kwargs)> except that for named argument there are no flattening and they are the same

[09:29] <discord-raku-bot> <Nemokosch> same as what?

[09:30] <discord-raku-bot> <Nemokosch> oh you mean *%a to be the same as **%a?

[09:30] <discord-raku-bot> <:(**@args, *%kwargs)> as in, *, ** and + should have the same behavior for %

[09:30] <discord-raku-bot> <Nemokosch> +% maybe not

[09:31] <discord-raku-bot> <:(**@args, *%kwargs)> oh yeah

[09:32] <discord-raku-bot> <:(**@args, *%kwargs)> m: say 1 in Set.new(1, 2, 3); 

[09:32] <discord-raku-bot> <Nemokosch> but yeah I think this could be added to another language version no problem

[09:33] <discord-raku-bot> <Nemokosch> probably not on the fly because it is kind of a breaking change

[09:33] <discord-raku-bot> <:(**@args, *%kwargs)> m: say 1 (elem) Set.new(1, 2, 3); 

[09:33] <discord-raku-bot> <:(**@args, *%kwargs)> üò†

[09:33] <discord-raku-bot> <Nemokosch> what's the problem?

[09:33] <discord-raku-bot> <:(**@args, *%kwargs)> is in ever used for anything

[09:34] <discord-raku-bot> <Nemokosch> not sure

[09:34] <discord-raku-bot> <Nemokosch> https://docs.raku.org/routine/in welp

[09:34] <discord-raku-bot> <:(**@args, *%kwargs)> why can't they just use keyword in instead of (elem) or ‚àà

[09:35] <discord-raku-bot> <Nemokosch> well, add it for yourself

[09:35] <discord-raku-bot> <Nemokosch> lol

[09:36] <discord-raku-bot> <Nemokosch> sub infix<in>($a, $b) { $a (elem) $b }

[09:36] <discord-raku-bot> <Nemokosch> or something

[09:37] <discord-raku-bot> <:(**@args, *%kwargs)> m: my &infix:<in> = infix:<(elem)>;  say(3 in (1, 2, 3).Set); 

[09:37] <discord-raku-bot> <Nemokosch> missed the &

[09:37] <discord-raku-bot> <:(**@args, *%kwargs)> m: my &infix:<in> = &infix:<(elem)>;  say(3 in (1, 2, 3).Set); 

[09:38] <discord-raku-bot> <Nemokosch> actually this is a better idea than what I did

[09:43] <discord-raku-bot> <Nemokosch> anyway, if you have preferences of this sort, you can create e.g a module for yourself and load that

[09:43] <discord-raku-bot> <Nemokosch> kinda simple

[09:57] <discord-raku-bot> <:(**@args, *%kwargs)> how do i set the operator precedence of my defined operators

[09:58] <discord-raku-bot> <Nahita> https://docs.raku.org/language/functions#Precedence

[10:09] <discord-raku-bot> <:(**@args, *%kwargs)> > Specifying the associativity of non-infix operators is planed but not yet implemented. why do unary (prefix or postfix) operators need associativity

[10:13] <discord-raku-bot> <Nemokosch> Good question xd

[10:14] <discord-raku-bot> <Nemokosch> However, this question might be about postcircumfix or sth

[10:15] <discord-raku-bot> <:(**@args, *%kwargs)> i dont think postcircumfix might need associativity

[11:12] *** MasterDuke left
[11:37] <discord-raku-bot> <:(**@args, *%kwargs)> what is the equovalent of super in raku

[11:39] <discord-raku-bot> <Nahita> i realized captures are both positional and named slurpers

[11:40] <discord-raku-bot> <Nahita> m:  -> |allargs { allargs.say }(3, 4, a => 2)

[11:40] <discord-raku-bot> <Nahita> m: -> |allargs { allargs.say }(a => 2, 3, 4)

[12:10] <discord-raku-bot> <Nemokosch> I wish I knew, at this point I suspect it may not even exist

[12:10] <discord-raku-bot> <Nemokosch> Probably some metamodel magic

[12:35] *** ab5tract joined
[13:16] <discord-raku-bot> <:(**@args, *%kwargs)> why no super tho

[13:21] *** ab5tract left
[13:21] <discord-raku-bot> <:(**@args, *%kwargs)> like it should be one of the most basic oo features

[13:24] <discord-raku-bot> <Nemokosch> I think it's the concept that is a bit shallow

[13:24] <discord-raku-bot> <Nemokosch> How does Python do it?

[13:24] <discord-raku-bot> <Nemokosch> With multi dispatch (and mixins, in Raku)

[13:32] *** ab5tract joined
[13:43] <lizmat> if you want to use super, you probably want to look into using roles

[13:47] *** ab5tract left
[14:04] *** jgaz joined
[14:07] <discord-raku-bot> <Nemokosch> I wanted to say multiple inheritance, not multiple dispatch

[14:11] <discord-raku-bot> <:(**@args, *%kwargs)> python classes have an mro created using C3 algorithm (like raku) super then just pick the next element in the mro so if the mro is [A, B, C, object] then super() will just create an object that forward anything to B

[14:23] <discord-raku-bot> <Nemokosch> lizmat: how do you use roles in a similar way?

[14:30] <lizmat> if this is about calling methods in a parent class, then https://docs.raku.org/language/functions#Re-dispatching could be of interest

[14:34] <discord-raku-bot> <Nemokosch> It seems problematic that method resolution is backed up by the same (non-transparent) rules as multiple dispatch motivated by the type of function parameters

[14:35] <discord-raku-bot> <Nemokosch> Python can do this safely because there are absolutely no function overloads

[14:42] <discord-raku-bot> <Nemokosch> It might be something that I don't know. With inheritance and mixins (?), there can be multiple protos; super is logically about switching protos, not switching candidates

[14:43] <lizmat> a proto is a "stopper" in dispatch terms

[14:43] <lizmat> at least, afaik  :-)

[14:50] <discord-raku-bot> <Nemokosch> What does that mean? üëÄ

[14:52] <discord-raku-bot> <Nemokosch> Before starting the guessing game... I don't feel I would know the hierarchy when you have inheritance and some candidates on both levels in the inheritance chain

[15:22] *** ab5tract joined
[15:40] *** ab5tract left
[15:58] <lizmat> m: class A { proto method a() { dd } }; class B is A { proto method a() { dd; nextsame } }; B.a    # I stand corrected

[15:58] <camelia> rakudo-moar d10c27506: OUTPUT: ¬´method a(B: *%_)‚ê§method a(A: *%_)‚ê§¬ª

[16:02] <discord-raku-bot> <:(**@args, *%kwargs)>  **<camelia>** rakudo-moar d10c27506: OUTPUT: ¬´method a(B: *%_)‚ê§method a(A: *%_)‚ê§¬ª 

[16:03] <discord-raku-bot> <:(**@args, *%kwargs)> why doesn‚Äôt it wrap in code blocks to get away with discord formatting

[16:06] <lizmat> someone on the Discord side should answer that I thiunk

[16:06] <lizmat> *think

[16:14] <discord-raku-bot> <:(**@args, *%kwargs)> super should be easy? A.^mro[1] should get the superclass whats next is just creating an object to forward calls to that superclass?

[16:18] <discord-raku-bot> <:(**@args, *%kwargs)> is there a method to call when a wrong (missing) method is called

[16:25] *** Heptite joined
[16:28] <discord-raku-bot> <Rog> Yep, FALLBACK

[16:41] <discord-raku-bot> <Zephyr> I'll look into both mentioned issues in a bit, thanks for noticing

[17:18] <discord-raku-bot> <:(**@args, *%kwargs)> m: class A {   method FALLBACK(**@args, *%kwargs) {     say %(|@args, |%kwargs);   } }  my $a = A.new; $a.x(1, 2, foo => 'bar');

[17:18] <discord-raku-bot> <:(**@args, *%kwargs)> m: class A {   method FALLBACK(**@args, *%kwargs) {     say %(|@args.pairs, |%kwargs);   } }  my $a = A.new; $a.x(1, 2, foo => 'bar');

[17:36] *** dakkar left
[17:47] *** Guest7492 joined
[18:11] *** Guest7492 left
[18:51] *** ab5tract joined
[19:22] *** gfldex joined
[20:54] *** m_athias left
[20:54] *** m_athias joined
[21:28] *** NemokoschKiwi joined
[23:04] *** ab5tract left
[23:21] *** jaguart left
[23:57] *** NemokoschKiwi left
