[00:43] <discord-raku-bot> <el gatito (** advocate)> m: say 'she sells seashells by the seashore'.comb.filter({$_ ~~ rx:i/s/}) 

[00:43] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'filter' for invocant of type 'Seq'   in block <unit> at main.raku line 1   

[00:44] <discord-raku-bot> <el gatito (** advocate)> what

[00:44] <discord-raku-bot> <Nemokosch> filter, lol

[00:44] <discord-raku-bot> <Nemokosch> https://tenor.com/view/heresy-detected-gif-25567321

[00:44] <discord-raku-bot> <el gatito (** advocate)> m: say ($_ if $_ ~~ rx:i/s/ for 'she sells seashells by the seashore'.comb).join 

[00:44] <discord-raku-bot> <Raku eval>  ssssssss  

[00:45] <discord-raku-bot> <el gatito (** advocate)> comprehension yay

[00:45] <discord-raku-bot> <el gatito (** advocate)> m: say ($_ if $_ !~~ rx:i/s/ for 'she sells seashells by the seashore'.comb).join 

[00:45] <discord-raku-bot> <Raku eval>  he ell eahell by the eahore  

[00:45] <discord-raku-bot> <Nemokosch> m:  say ($_ if m:i/s/ for 'she sells seashells by the seashore'.comb).join 

[00:45] <discord-raku-bot> <Raku eval>  ssssssss  

[00:46] <discord-raku-bot> <el gatito (** advocate)> m: say ($_ if $_ != 's' for 'she sells seashells by the seashore'.comb).join 

[00:46] <discord-raku-bot> <Raku eval>  Exit code: 1 Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èès' (indicated by ‚èè)   in block <unit> at main.raku line 1   

[00:46] <discord-raku-bot> <el gatito (** advocate)> oof

[00:46] <discord-raku-bot> <el gatito (** advocate)> m: say ($_ if $_ ne 's' for 'she sells seashells by the seashore'.comb).join 

[00:46] <discord-raku-bot> <Raku eval>  he ell eahell by the eahore  

[00:46] <discord-raku-bot> <Nemokosch> I saw this with the new colleague as well, the other way around

[00:46] <discord-raku-bot> <Nemokosch> ... eq 2

[00:47] <discord-raku-bot> <Nemokosch> but that would work basically, haha

[00:47] <discord-raku-bot> <el gatito (** advocate)> non generic == and + always gets me

[00:48] <discord-raku-bot> <Nemokosch> well + is a bit bizarre if you think about it

[00:48] <discord-raku-bot> <Nemokosch> it's not commutative

[00:48] <discord-raku-bot> <el gatito (** advocate)> m:i/s/ == rx:i/s/.match($_)?

[00:50] <discord-raku-bot> <el gatito (** advocate)> how? üò≠

[00:51] <discord-raku-bot> <Nemokosch> have you never used unix? üòÇ

[00:51] <discord-raku-bot> <Nemokosch> I think so

[00:52] <discord-raku-bot> <el gatito (** advocate)> grep? i used linux mint but i never felt the need to grep

[00:52] <discord-raku-bot> <Nemokosch> grep

[00:53] <discord-raku-bot> <Nemokosch> which stands for g/re/p iirc

[00:53] <discord-raku-bot> <Nemokosch> a sed command

[00:54] <discord-raku-bot> <Nemokosch> execute a Global command: if the Regular Expression matches, Print the line

[01:01] <discord-raku-bot> <el gatito (** advocate)> m: say $_ for 'she sells seashells by the seashore'.grep(rx:i/<-[s]>/) 

[01:01] <discord-raku-bot> <Raku eval>  she sells seashells by the seashore  

[01:01] <discord-raku-bot> <el gatito (** advocate)> what

[01:02] <discord-raku-bot> <el gatito (** advocate)> m: say $_ for 'she sells seashells by the seashore'.comb.grep(rx:i/<-[s]>/) 

[01:02] <discord-raku-bot> <Raku eval>  h e   e l l   e a h e l l   b y   t h e   e a h o r e  

[01:02] <discord-raku-bot> <el gatito (** advocate)> lmao

[01:10] <discord-raku-bot> <Nemokosch> because of the say for all iterations

[01:18] *** Manifest0 left
[01:39] <discord-raku-bot> <el gatito (** advocate)> when will raku have discord formatting tbh

[02:55] *** rf left
[03:15] *** jgaz left
[04:32] *** deoac joined
[04:58] <discord-raku-bot> <elcaro> If you wanted to remove all 's' from the string (ie. without combing), then .subst is the way to go      > 'she sells seashells by the seashore'.subst(/s/, '', :g) he ell eahell by the eahore 

[05:06] <discord-raku-bot> <elcaro> On a similar note... many years ago, prior to the christmas release, I advocated for an alternate name for grep. At the time, I suggested where , as it's - in some ways - similar to a sunset clause.   I still don't love grep for a name, despite being very familiar with linux. If I had my way, I'd call it keep, and have an inverse method called drop.   Reason being is that grepping for a positive match is easy 

[05:06] <discord-raku-bot>  $str.words.grep(/sea/) @items.grep(&some-boolean-func)  but to do the inverse, you need to use a block  $str.words.grep({ !/sea/ }) @items.grep(-> $x { !some-boolean-func($x) }) 

[05:15] *** deoac left
[05:21] *** shmup joined
[05:26] *** Heptite left
[05:27] <discord-raku-bot> <elcaro> I guess you can also do .grep(!*.&func)... now we're up to 4 symbols in a row.

[05:36] <discord-raku-bot> <el gatito (** advocate)> select/filter and remove

[05:52] <discord-raku-bot> <elcaro> One of the benefits of grep is it's nice and short. keep and drop are the same amount of characters. While I'm at it, I'd rename reduce and produce to fold and scan... 4 letter methods for everybody!

[05:52] <discord-raku-bot> <elcaro> except you, map

[05:54] <discord-raku-bot> <elcaro> Ruby has an each method that's kind of like map but it mutates the args.

[05:54] <discord-raku-bot> <elcaro> I think. I don't use Ruby.

[08:08] <discord-raku-bot> <el gatito (** advocate)> it also have map

[08:10] <discord-raku-bot> <el gatito (** advocate)> why üò≠

[08:14] <discord-raku-bot> <elcaro> I already use perl, python, and raku. Ruby looks like a nice enough language, but I feel learning wouldn't really add much to my toolbelt

[08:17] <discord-raku-bot> <el gatito (** advocate)> it has a radical OOP model based on smalltalk which might be enough of a difference to you

[08:22] <discord-raku-bot> <Nemokosch> Smalltalk seems ugly

[08:23] <discord-raku-bot> <el gatito (** advocate)> yes which is why ruby exists (i think)

[08:27] <discord-raku-bot> <Nahita> > but to do the inverse, you need to use a block there's none perl >>> my @vals = ["seat", "Sean", "other"] [seat Sean other]  >>> @vals.grep(/ <[sS]>ea /) (seat Sean)  >>> @vals.grep(none / <[sS]>ea /) (other)  >>> my &cond = *.chars == 4 WhateverCode.new  >>> @vals.grep(&cond) (seat Sean)  >>> @vals.grep(none &cond) (other) 

[08:29] <discord-raku-bot> <Nemokosch> Hmmm

[08:29] <discord-raku-bot> <el gatito (** advocate)> can i use ~ instead of none

[08:29] <discord-raku-bot> <Nahita> that's stringifier no

[08:29] <discord-raku-bot> <el gatito (** advocate)> how about !

[08:30] <discord-raku-bot> <el gatito (** advocate)> i think no

[08:30] <discord-raku-bot> <Nahita> it acts immediately so no

[08:31] <discord-raku-bot> <el gatito (** advocate)> me when

[08:32] <discord-raku-bot> <el gatito (** advocate)> no symbol for none junction

[08:32] <discord-raku-bot> <el gatito (** advocate)> but then raku has too much symbols so a blessing ig

[08:33] <discord-raku-bot> <Nemokosch> The thing to realize here is that none acts like a higher order thing, something that can compose matchers

[08:33] <discord-raku-bot> <Nemokosch> And functions are matchers

[08:33] <discord-raku-bot> <el gatito (** advocate)> so are & and |

[08:33] <discord-raku-bot> <Nemokosch> Absolutely

[08:36] <discord-raku-bot> <Nemokosch> "If none of (this one thing)" smartmatches

[08:36] <discord-raku-bot> <Nemokosch> Quite a creative usage

[08:48] <discord-raku-bot> <elcaro> Ideally, filtering a positive match and a negative match should have similar performance characteristics. Last time I checked, junctions incurred quite a perf hit.  Admittedly, it's been a while since I benched it, and I know some work was put in to speed up evaluating junctions when only a boolean was needed

[08:50] <discord-raku-bot> <el gatito (** advocate)> m: sub generator() {   gather {     take 1;     take 2;     take 3;   } }  my $gen := generator;  .say for $gen;

[08:50] <discord-raku-bot> <Nemokosch> Yep... in theory, it's a smartmatch on a function, in practice, it's inlined probably

[08:50] <discord-raku-bot> <Raku eval>  1 2 3  

[08:51] <discord-raku-bot> <el gatito (** advocate)> m: sub generator() {   gather {     take 1;     take 2;     take 3;   } }  my $gen := generator;  say $gen;  .say for $gen;

[08:51] <discord-raku-bot> <Raku eval>  (1 2 3) 1 2 3  

[08:51] *** human-blip left
[08:55] <discord-raku-bot> <el gatito (** advocate)> m: sub fib() {   gather {     my $res := 0;     my $next := 1;     yield $res;     my ($res, $next) := ($next, $res + $next);   } }  my $gen := fib;  say $gen;

[08:55] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Redeclaration of symbol '$res'. at /home/glot/main.raku:6 ------>     my ($res‚èè, $next) := ($next, $res + $next);     expecting any of:         shape declaration  

[08:56] <discord-raku-bot> <el gatito (** advocate)> m: sub fib() {   gather {     my $res := 0;     my $next := 1;     take $res;     ($res, $next) := ($next, $res + $next);   } }  my $gen := fib;  say $gen; 

[08:56] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Cannot use bind operator with this left-hand side at /home/glot/main.raku:6 ------>   ($res, $next) := ($next, $res + $next)‚èè;  

[08:56] <discord-raku-bot> <el gatito (** advocate)> why can‚Äôt

[08:57] <discord-raku-bot> <el gatito (** advocate)> m: sub fib() {   gather {     my $res = 0;     my $next = 1;     take $res;     ($res, $next) = ($next, $res + $next);   } }  my $gen = fib;  say $gen; 

[08:57] <discord-raku-bot> <Raku eval>  (0)  

[08:58] *** Manifest0 joined
[08:58] <discord-raku-bot> <el gatito (** advocate)> m: sub fib() {   gather {     my $res = 0;     my $next = 1;     loop {       take $res;       ($res, $next) = ($next, $res + $next);     }   } }  my $gen = fib;  say $gen; 

[08:58] <discord-raku-bot> <Raku eval>  (0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717

[08:58] <discord-raku-bot> 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591

[08:58] <discord-raku-bot> 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429 12200160415121876738 19740274219868223167 31940434634990099905 51680708854858323072 83621143489848422977 135301852344706746049 218922995834555169026 ...)  

[08:58] <discord-raku-bot> <el gatito (** advocate)> tf

[08:59] <discord-raku-bot> <el gatito (** advocate)> is gather..take a lazy sequence or smth

[09:01] <discord-raku-bot> <el gatito (** advocate)> also take is a terrible name

[09:01] <discord-raku-bot> <Nemokosch> it kind of is but this output wouldn't tell you that

[09:03] <discord-raku-bot> <el gatito (** advocate)> should be yield or give

[09:04] <discord-raku-bot> <el gatito (** advocate)> m: sub fib() {   gather {     my $res = 0;     my $next = 1;     loop {       take $res;       ($res, $next) = ($next, $res + $next);     }   } }  my $gen = fib;  say $gen.WHAT; 

[09:04] <discord-raku-bot> <Raku eval>  (Seq)  

[09:05] <discord-raku-bot> <el gatito (** advocate)> yeah a lazy Seq interesting how it is not its own type

[09:05] <discord-raku-bot> <el gatito (** advocate)> why can‚Äôt i ‚Äúdestructure bind‚Äù?

[09:08] *** dakkar joined
[09:12] <discord-raku-bot> <Nemokosch> no idea

[09:37] *** ab5tract joined
[09:54] <discord-raku-bot> <el gatito (** advocate)> probably one of the nyi features

[09:57] <discord-raku-bot> <Nemokosch> üëÄ

[09:58] <discord-raku-bot> <el gatito (** advocate)> uh nothing

[09:58] <discord-raku-bot> <el gatito (** advocate)> ill create a github issue abt that lmao

[10:04] <discord-raku-bot> <Nemokosch> üòÇ

[10:06] <discord-raku-bot> <Nemokosch> m:  sub fib() {   gather {     my $res = 0;     my $next = 1;     loop {       take $res;       :($res, $next) = ($next, $res + $next); # test     }   } }  my $gen = fib;  say $gen.WHAT; 

[10:06] <discord-raku-bot> <Raku eval>  (Seq)  

[10:06] <discord-raku-bot> <Nemokosch> oops dumb

[10:07] <discord-raku-bot> <Nemokosch> see #bot-testing

[10:07] <discord-raku-bot> <Nemokosch> it works with binding :cameliathink:

[10:31] <discord-raku-bot> <el gatito (** advocate)> yay i created the issue

[10:32] <discord-raku-bot> <el gatito (** advocate)> hmm

[13:14] *** Heptite joined
[13:49] *** deoac joined
[14:34] *** ab5tract left
[16:03] *** deoac left
[16:57] *** n1to joined
[17:13] *** n1to left
[17:31] *** saint- joined
[17:37] *** dakkar left
[18:48] *** ab5tract joined
[19:17] *** deoac joined
[22:21] *** deoac left
