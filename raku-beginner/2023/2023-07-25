[01:09] *** razetime joined
[03:32] *** camelia left
[03:37] *** camelia joined
[03:48] *** MasterDuke left
[04:11] *** razetime left
[04:32] *** razetime joined
[04:42] *** teatime left
[04:42] *** teatime joined
[04:44] *** teatime left
[04:44] *** teatime joined
[05:06] *** teatwo joined
[05:08] *** teatwo left
[05:08] *** teatwo joined
[05:09] *** teatime left
[05:40] *** siavash joined
[07:42] *** habere-et-disper joined
[07:49] <habere-et-disper> I grok :

[07:49] <habere-et-disper> m : elems gather .take if Date.new( year => 2013, month => $_, day => 13 ).day-of-week == 5 for 1..12

[07:49] <habere-et-disper> But I really wanted to write :

[07:49] <habere-et-disper> m : elems gather .take if Date.new( year => 2023, month => (1..12).any, day => 13 ).day-of-week == 5

[07:49] <habere-et-disper> m: elems gather .take if Date.new( year => 2013, month => $_, day => 13 ).day-of-week == 5 for 1..12

[07:50] <camelia> rakudo-moar 191919715: ( no output )

[07:50] <habere-et-disper> m: elems gather .take if Date.new( year => 2023, month => (1..12).any, day => 13 ).day-of-week == 5

[07:50] <camelia> rakudo-moar 191919715: OUTPUT: «Cannot call Date.new with these named parameters: month year day␤  in block <unit> at <tmp> line 1␤␤»

[07:51] <lizmat> (1..12).map( { my $dt := Date.new( year => 2013, month => $_, day => 13 ); $dt if .day-of-week == 5 } )

[07:54] <habere-et-disper> Is the (1..12).any my misunderstanding of Junctions or only that Date does not support them ?

[07:59] <lizmat> 1..12 is a Range, not a Junction

[07:59] <lizmat> ah, .any    should read better :-)

[08:01] <lizmat> not sure what is going on there, but the Positional interface does work

[08:01] <lizmat> m: dd Date.new(2023, (1..12).any, 13)

[08:01] <camelia> rakudo-moar 191919715: OUTPUT: «any(Date.new(2023,1,13), Date.new(2023,2,13), Date.new(2023,3,13), Date.new(2023,4,13), Date.new(2023,5,13), Date.new(2023,6,13), Date.new(2023,7,13), Date.new(2023,8,13), Date.new(2023,9,13), Date.new(2023,10,13), Date.new(2023,11,13), Date.new(2023,…»

[08:09] <habere-et-disper> Thank you lizmat  That is exactly how I wanted to write it !

[08:09] <habere-et-disper> m: say elems gather .take if .day-of-week == 5 for Date.new( 2023, (1..12).any, 13 )

[08:09] <camelia> rakudo-moar 191919715: OUTPUT: «2␤»

[08:09] <habere-et-disper> 😀

[08:09] *** dakkar joined
[08:11] <lizmat> :-)

[08:12] <lizmat> although the use of "for" there is a bit iffy  :-)

[08:18] <discord-raku-bot> <nemokosch> I didn't even know junctions are iterable, is this a public interface?

[08:18] <lizmat> they aren't iterable, that's why I said the "for" was "iffy"

[08:19] <lizmat> m: .say if $_ %% 2 for 42

[08:19] <camelia> rakudo-moar 191919715: OUTPUT: «42␤»

[08:19] <lizmat> m: .say if $_ %% 2 for 43

[08:19] <camelia> rakudo-moar 191919715: ( no output )

[08:20] <lizmat> m: .say if $_ %% 2 for 42 |43

[08:20] <camelia> rakudo-moar 191919715: OUTPUT: «any(42, 43)␤»

[08:20] <lizmat> m: .say if $_ %% 2 for (42 |43)

[08:20] <camelia> rakudo-moar 191919715: OUTPUT: «any(42, 43)␤»

[08:21] <discord-raku-bot> <nemokosch> Heh

[08:21] <lizmat> m: .say gather .take if $_ %% 2 for 42 |43

[08:21] <camelia> rakudo-moar 191919715: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> .say⏏ gather .take if $_ %% 2 for 42 |43␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement mo…»

[08:21] <lizmat> m: say gather .take if $_ %% 2 for 42 |43

[08:21] <camelia> rakudo-moar 191919715: OUTPUT: «(42)␤»

[08:22] <lizmat> m: say gather .take if $_ %% 2 for 42 | 43 | 44

[08:22] <camelia> rakudo-moar 191919715: OUTPUT: «(42 44)␤»

[08:23] <discord-raku-bot> <nemokosch> So where did the junction ultimately distribute into its eigenvalues?

[08:23] <lizmat> the conditional .take

[08:25] <discord-raku-bot> <nemokosch> m: say gather (1|2|3).take

[08:25] <discord-raku-bot> <Raku eval>  (any(1, 2, 3)) 

[08:25] <discord-raku-bot> <nemokosch> Welp, i tried

[08:26] *** razetime left
[08:26] <habere-et-disper> m: say ( Date.new( 2023, (1..12).any, 13 ).day-of-week == 5 ).iterator

[08:26] <camelia> rakudo-moar 191919715: OUTPUT: «List::Todo.new␤»

[08:28] <lizmat> I guess this is the reason:

[08:28] <lizmat>     multi method iterator(Junction:D:) {

[08:28] <lizmat>         # If we're asked for an iterator, we should really give one rather than

[08:28] <lizmat>         # auto-thread over the `iterator` method. Otherwise we get decidedly

[08:28] <lizmat>         # confusing outcomes from things that do `.iterator` and then expect it

[08:28] <lizmat>         # to follow the iterator API.

[08:28] <lizmat>         list(self).iterator

[08:28] <lizmat>     }

[08:28] <lizmat> interesting...  :-)

[08:29] <discord-raku-bot> <nemokosch> m: (1|2|3).list.say

[08:29] <discord-raku-bot> <Raku eval>  any((1), (2), (3)) 

[08:29] <discord-raku-bot> <nemokosch> Lmao

[08:30] <lizmat> https://github.com/rakudo/rakudo/commit/bceaeb1a9a

[08:30] <discord-raku-bot> <nemokosch> m: list(1|2|3).say

[08:30] <discord-raku-bot> <Raku eval>  (any(1, 2, 3)) 

[08:31] <discord-raku-bot> <nemokosch> Okay but how does this explain the countability in that snippet?

[08:32] <discord-raku-bot> <nemokosch> Okay, the if succeeds, the junction passes on, right? What do I miss?

[08:32] <lizmat> m: say gather .take if .day-of-week == 5 for Date.new( 2023, (1..12).any, 13 )

[08:32] <camelia> rakudo-moar de7151fa9: OUTPUT: «(2023-01-13 2023-10-13)␤»

[08:32] <lizmat> the gather returns a Seq, and elems just counts the number of elems in it

[08:33] <discord-raku-bot> <nemokosch> But why isn't that Seq only the one junction?

[08:33] <lizmat> so I guess the "for" wasn't that "iffy" after all

[08:33] <lizmat> because the "for" calls .iterator on the Junction under the hood, and thus iterates

[08:34] <discord-raku-bot> <nemokosch> Didn't that commit just say that it will iterate as one?

[08:35] <lizmat> no, it said it will iterate, because making .iterator return a Junction would seriously be confusing to a lot of the internals

[08:36] <discord-raku-bot> <nemokosch> Not a Junction but an iterator that produces a Junction, like with scalars

[08:36] <discord-raku-bot> <nemokosch> But either way, NOT the eigenvalues

[08:36] <discord-raku-bot> <nemokosch> That's what the commit message states

[08:38] <discord-raku-bot> <nemokosch> at least this dragged me out of bed 😂

[08:38] <discord-raku-bot> <nemokosch> m: .say for (1|2|3)

[08:38] <discord-raku-bot> <Raku eval>  any(1, 2, 3) 

[08:38] <discord-raku-bot> <nemokosch> yeah

[08:39] <lizmat> hmmmm   so the "for" *is* iffy after all

[08:39] <lizmat> hmmm

[08:39] <discord-raku-bot> <nemokosch> m: say gather .take if .day-of-week == 5 given Date.new( 2023, (1..12).any, 13 )

[08:39] <discord-raku-bot> <Raku eval>  (any(2023-01-13, 2023-02-13, 2023-03-13, 2023-04-13, 2023-05-13, 2023-06-13, 2023-07-13, 2023-08-13, 2023-09-13, 2023-10-13, 2023-11-13, 2023-12-13)) 

[08:40] <discord-raku-bot> <nemokosch> m: say gather .take if .day-of-week == 5 for Date.new( 2023, (1..12).any, 13 )

[08:40] <discord-raku-bot> <Raku eval>  (2023-01-13 2023-10-13) 

[08:40] <discord-raku-bot> <nemokosch> but it still isn't for some reason xd

[08:40] <lizmat> ah.. the list(self) is a bit of a red-herring

[08:41] <discord-raku-bot> <nemokosch> what does it produce?

[08:41] <lizmat> multi sub list(+l) { l }

[08:42] <lizmat> using the single arg rule, it returns the arg

[08:42] <lizmat> hmmm...

[08:42] <lizmat> ah, but that autothreads

[08:44] *** razetime joined
[08:44] <lizmat> m: dd list(1|2).iterator.pull-one

[08:44] <camelia> rakudo-moar de7151fa9: OUTPUT: «any(1, 2)␤»

[08:44] <discord-raku-bot> <nemokosch> m: dd gather list(1|2).iterator.pull-one.take

[08:44] <discord-raku-bot> <Raku eval>  (any(1, 2),).Seq 

[08:45] <discord-raku-bot> <nemokosch> what really bothers me is that I can't reproduce or even imagine what happened with that for

[08:45] <lizmat> m: my $i := list(1|2).iterator; dd $i.pull-one for ^2

[08:45] <camelia> rakudo-moar de7151fa9: OUTPUT: «any(1, 2)␤IterationEnd␤»

[08:45] <lizmat> so it produces an iterator that produces 1 element, itself

[08:46] <lizmat> so the use of "for" *is* really "iffy" in the original case

[08:48] <discord-raku-bot> <nemokosch> that may be true but then wouldn't for be equivalent with given?

[08:49] <lizmat> I guess the for deconts

[08:50] <discord-raku-bot> <nemokosch> which part takes that into account, of the if, the take and the gather?

[08:52] <discord-raku-bot> <nemokosch> m: my \test = (1|2|3); say gather test.take if test %% 3;

[08:52] <discord-raku-bot> <Raku eval>  (any(1, 2, 3)) 

[08:52] <lizmat> hmmm...  given will just topicalize, whereas the for will return an iterator

[08:52] <lizmat> meh..  this is tricky  :-)

[08:53] <discord-raku-bot> <nemokosch> m:   $_ := (1|2|3); say gather .take if $_ %% 3; 

[08:53] <discord-raku-bot> <Raku eval>  (any(1, 2, 3)) 

[08:53] <discord-raku-bot> <nemokosch> m: say gather .take for (1|2|3)

[08:53] <discord-raku-bot> <Raku eval>  (1 2 3) 

[08:54] <discord-raku-bot> <nemokosch> m: say .say for (1|2|3)

[08:54] <discord-raku-bot> <Raku eval>  any(1, 2, 3) True 

[08:54] <discord-raku-bot> <nemokosch> is "gather for" something special?

[08:55] <discord-raku-bot> <nemokosch> no other idea left

[08:56] <discord-raku-bot> <nemokosch> m: my @vals = gather { .take for (1|2|3) }; dd @vals

[08:56] <discord-raku-bot> <Raku eval>  Array @vals = [any(1, 2, 3)] 

[08:56] <discord-raku-bot> <nemokosch> m: my @vals = gather .take for (1|2|3); dd @vals

[08:56] <discord-raku-bot> <Raku eval>  Array @vals = [1, 2, 3] 

[08:57] <lizmat> interesting

[08:57] <discord-raku-bot> <nemokosch> Well, it must be a bug, I see no other way out at this point 🙃

[08:57] <lizmat> hehe... or a feature  :-)

[08:58] <lizmat> m: say gather .take for (1|2|3)

[08:58] <camelia> rakudo-moar de7151fa9: OUTPUT: «(1 2 3)␤»

[08:58] <lizmat> m: .say for gather .take for (1|2|3)

[08:58] <camelia> rakudo-moar de7151fa9: OUTPUT: «1␤2␤3␤»

[09:55] *** habere-et-disper left
[10:07] <lizmat> https://github.com/rakudo/rakudo/issues/5320

[10:07] <lizmat> .tell habere-et-disper your version may actually depend on a bug in Rakudo: https://github.com/rakudo/rakudo/issues/5320

[10:07] <lizmat> meh

[10:08] <lizmat> nemokosch ^^

[10:14] <discord-raku-bot> <nemokosch> 🧐 thanks

[10:17] <lizmat> it appears to be a codegen issue with "for" inside a "gather"

[10:33] <discord-raku-bot> <librasteve> m: say Date.new( 2023, (1..12).any, 13 ).iterator

[10:33] <discord-raku-bot> <Raku eval>  List::Todo.new 

[10:34] <discord-raku-bot> <librasteve> ^^ guess that means something is a bug - (and there was me thinking it was the single argument rule)

[10:34] <lizmat> m: my $i := Date.new( 2023, (1..12).any, 13 ).iterator; dd $i.pull-one for ^2

[10:34] <camelia> rakudo-moar 56bfa9294: OUTPUT: «any(Date.new(2023,1,13), Date.new(2023,2,13), Date.new(2023,3,13), Date.new(2023,4,13), Date.new(2023,5,13), Date.new(2023,6,13), Date.new(2023,7,13), Date.new(2023,8,13), Date.new(2023,9,13), Date.new(2023,10,13), Date.new(2023,11,13), Date.new(2023,…»

[10:35] <lizmat> m: my $i := (1|2|3).iterator; dd $i.pull-one for ^2

[10:35] <camelia> rakudo-moar 56bfa9294: OUTPUT: «any(1, 2, 3)␤IterationEnd␤»

[10:35] <lizmat> nothing wrong there librasteve

[10:36] <discord-raku-bot> <librasteve> ok - so https://docs.raku.org/type/Junction#method_iterator

[10:36] <discord-raku-bot> <librasteve> Returns an iterator over the Junction converted to a List. is wrong then?

[10:37] <discord-raku-bot> <librasteve> in which case, what is the best way to "unpack" a junction ...?

[10:37] <discord-raku-bot> <librasteve> (or is that idea forbidden in principal?)

[10:38] <lizmat> the idea is that the eigenstates of a Junction are opaque

[10:38] <discord-raku-bot> <librasteve> btw -- really enjoying the entertainment!

[10:38] <lizmat> that's why I made https://raku.land/zef:lizmat/eigenstates :-)

[10:41] <discord-raku-bot> <librasteve> ok - so its forbidden - but you have provided a workaround ?

[10:41] <lizmat> that's the gist of it  

[10:42] <discord-raku-bot> <librasteve> ^^ that's a doc bug then? (I can file an issue)

[10:43] <lizmat> m: my @a; sub a($a) { @a.push($a) }; a 1|2|3; dd @a   # another way to unpack a junction

[10:43] <camelia> rakudo-moar 56bfa9294: OUTPUT: «Array @a = [1, 2, 3]␤»

[10:44] <lizmat> m: sub unpack(Mu $a) { my @a; sub a($a) { @a.push($a) }; a $a; @a.List };  dd unpack 1|2|3   # another way to unpack junctions

[10:44] <camelia> rakudo-moar 56bfa9294: OUTPUT: «(1, 2, 3)␤»

[10:48] <discord-raku-bot> <librasteve> use eigenstates;  my $out = Date.new( 2023, (1..12).any, 13 ).day-of-week == 5; $out.&eigenstates.grep(*.so).elems.say;

[10:56] <discord-raku-bot> <nemokosch> "unpacking a junction" is kind of a confusing concept anyway. The eigenvalues are in a certain relation to each other.

[10:56] <discord-raku-bot> <librasteve> yeah - I get why it is forbidden (sorry I was using the word unpack loosley)

[10:57] <discord-raku-bot> <nemokosch> oh I didn't mean to pick on the terminology, we could call it listing or iterating or whatever

[10:57] <discord-raku-bot> <nemokosch> by the way

[10:58] *** habere-et-disper joined
[10:58] <discord-raku-bot> <nemokosch> m: my %multikey = (1|2) => True, (3&4) => False; dd %multikey

[10:58] <discord-raku-bot> <Raku eval>  Hash %multikey = {"1" => Bool::True, "2" => Bool::True, "3" => Bool::False, "4" => Bool::False} 

[10:58] <discord-raku-bot> <nemokosch> quite funny isn't it

[10:59] <discord-raku-bot> <nemokosch> when this came up roughly a year ago, the & version actually benchmarked significantly faster for some reason

[10:59] <lizmat> the power of junctions  :-)

[10:59] <discord-raku-bot> <nemokosch> m: my %multikey = (1^2) => True; dd %multikey

[10:59] <discord-raku-bot> <Raku eval>  Hash %multikey = {"1" => Bool::True, "2" => Bool::True} 

[10:59] <discord-raku-bot> <nemokosch> anyway, they all work but there is no meaningful semantics behind it

[11:00] <lizmat> true

[11:00] <lizmat> DIHWIDT

[11:01] <discord-raku-bot> <nemokosch> like if I were to read it "either 1 or 2 is the key of this hash, with True as the value"

[11:01] <discord-raku-bot> <nemokosch> that would actually be a junction of two hashes

[11:02] <discord-raku-bot> <nemokosch> but if somebody adds multiple junction keys, this interpretation either collapses or at least the number of cases will multiply and the whole thing becomes bloated in the blink of an eye

[11:04] <lizmat> m: my %h{Mu} = (1|2) => 42; dd %h

[11:04] <camelia> rakudo-moar babce6b6f: OUTPUT: «Hash[Any,Mu %h = (my Any %{Mu} = any(1, 2) => 42)␤»

[11:04] <lizmat> if you want Junctions to be keys in an object hash

[11:05] <discord-raku-bot> <nemokosch> yes, I anticipated this would work

[11:05] <discord-raku-bot> <nemokosch> anyway... It's not fun to be the party pooper but I think the way junctions are, the idea to count friday 13 through junctions is unsound

[11:06] <lizmat> I would agree

[11:07] <discord-raku-bot> <nemokosch> in an alternative world there could be additive junctions that wouldn't collapse into a boolean value but a sum of the individual values

[11:09] <discord-raku-bot> <nemokosch> without that, the "most algebraic" solution seems to be to start from 1..12 and apply a "map-reduce" logic, transforming the value into 0's and 1's and summing them

[11:10] <discord-raku-bot> <nemokosch> m: (1..12).map({ Date.new( 2023, $_, 13 ).day-of-week == 5 }).sum.say

[11:10] <discord-raku-bot> <Raku eval>  2 

[11:11] <discord-raku-bot> <librasteve> ^^ ++

[11:12] <discord-raku-bot> <nemokosch> I'm personally biased towards this approach in general, it can be applied to a wide range of problems, the data flows in one direction and it's easy to intercept at any point (especially now with .snitch)

[11:15] <habere-et-disper> Looks like I stood on a junction in raku-beginner -- thank you everyone !

[11:15] <habere-et-disper> '=D

[11:15] <discord-raku-bot> <nemokosch> btw I could imagine a module that alters Date.new(2023, *, 13) in a way that it produces all the possible dates for this pattern

[11:16] <discord-raku-bot> <nemokosch> In general I think the WhateverStar could be used in clever ways but it's fairly dangerous to try to guess a general case for its meaning

[11:17] <discord-raku-bot> <nemokosch> it's more of a slangy thing

[11:25] <discord-raku-bot> <nemokosch> there is another manifesto-like statement I wanted to make 😅

[11:25] <discord-raku-bot> <nemokosch> it's true that a simple and straightforward tool can be easier to understand and master

[11:26] <lizmat> I can see * for months and day to be okish, but for years, that would be interesting ?

[11:26] <discord-raku-bot> <nemokosch> but it's also a virtue if one doesn't have to understand something in order to use it

[11:27] <discord-raku-bot> <nemokosch> and this is what I do believe that Raku is not a "write-only language"

[11:27] <discord-raku-bot> <nemokosch> not everyone reading code even reads that code with the intention to change it

[11:28] <discord-raku-bot> <nemokosch> let alone radically change it

[11:30] <discord-raku-bot> <nemokosch> on the other hand, this approach is drastically based on trust towards whoever gave you the high-level tool, and I am often concerned about that trust

[11:31] <discord-raku-bot> <nemokosch> lizmat: um, yeah... part of the reason I can only imagine something like that in user space

[11:52] *** razetime left
[12:09] *** razetime joined
[12:24] *** siavash left
[12:33] *** habere-et-disper left
[14:09] <discord-raku-bot> <antononcube> A certain LLM prompt can be made for making "manifesto statements."

[15:32] *** razetime left
[15:50] *** Phytolizer joined
[16:35] *** dakkar left
[16:42] *** tea3po joined
[16:45] *** teatwo left
[17:24] *** Phytolizer left
[18:44] *** tea3po left
[18:46] *** teatime joined
[19:01] *** Phytolizer joined
[19:07] *** Phytolizer left
[19:07] *** Phytolizer joined
[20:36] <SmokeMachine> m: say Date.new(2023, 1, 13), Date.new(2023, 2, 13) … *

[20:36] <camelia> rakudo-moar bef9ea40c: OUTPUT: «(...)␤»

[20:37] <SmokeMachine> m: .say for (Date.new(2023, 1, 13), Date.new(2023, 2, 13) … *).head: 5

[20:37] <camelia> rakudo-moar bef9ea40c: OUTPUT: «2023-01-13␤2023-02-13␤2023-02-14␤2023-02-15␤2023-02-16␤»

[20:40] <discord-raku-bot> <nemokosch> it just uses succ probably

[20:47] <Phytolizer> m: .say for (Date.new(2023, 1, 13), *.later(:1month) ... *).head: 5

[20:47] <camelia> rakudo-moar bef9ea40c: OUTPUT: «2023-01-13␤2023-02-13␤2023-03-13␤2023-04-13␤2023-05-13␤»

[21:22] <discord-raku-bot> <librasteve> .say for ( Date.new(2023, 1, 13), *.later(:1month) ... *).head: 5

[21:23] <discord-raku-bot> <librasteve> seems that Discord swallowed a couple of stars... good way to get sequence of dates

[21:24] <discord-raku-bot> <nemokosch> yeah, it was markdown for italics

[21:32] <Phytolizer> oh, ha. i guess that wouldn't show up on irc

[21:41] *** Phytolizer left
