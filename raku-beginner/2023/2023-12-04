[00:15] <discord-raku-bot> <shad.ow> to flatten out the 2d list before summing it

[00:15] <discord-raku-bot> <nemokosch> why not just use .flat?

[00:17] <discord-raku-bot> <shad.ow> that works ?

[00:17] <discord-raku-bot> <shad.ow> perl [0] > [[1, 2, 3], [4, 5, 6]].flat ([1 2 3] [4 5 6])

[00:17] <discord-raku-bot> <shad.ow> am i misunderstanding something

[00:17] <discord-raku-bot> <nemokosch> I think your original case would work

[00:18] <discord-raku-bot> <shad.ow> wdym

[00:18] <discord-raku-bot> <shad.ow> perl my @lines = "input.txt".IO.lines; my %gears;  for @lines.kv -> $j, $line {   for $line.comb(/<-[\d.]>/, :match) {     %gears{.from + $j * i} = [];   } }  for @lines.kv -> $j, $line {   for $line.comb(/\d+/, :match) {     for ($_.from - 1)..($_.to) -> $y {       for ($j - 1)..($j + 1) -> $x {         %gears{$y + $x * i}.append(+$_) if %gears{$y + $x * i}:exists;       }     }   } }  say (gather

[00:18] <discord-raku-bot> %gears.values.deepmap(*.take)).sum; say %gears.values.map({ .elems == 2 ?? $_[0] * $_[1] !! 0 }).sum; 

[00:18] <discord-raku-bot> <nemokosch> but to be fair I'd have to check

[00:18] <discord-raku-bot> <shad.ow> this is what i have rn

[00:18] <discord-raku-bot> <shad.ow> it's a 2d list

[00:18] <discord-raku-bot> <shad.ow> the values in the hash are lists

[00:18] <discord-raku-bot> <shad.ow> the keys are complex numbers

[00:18] <discord-raku-bot> <shad.ow> representing 2d coordinates

[00:19] <discord-raku-bot> <nemokosch> oh damn, not this again...

[00:19] <discord-raku-bot> <nemokosch> why even have flat if it "respects" containers, and why do containers "itemize"...

[00:20] <discord-raku-bot> <shad.ow> >>.List.flat seems to work

[00:20] <discord-raku-bot> <nemokosch> m: my %gears = a => (1, 2), b => (4, 6); %gears.values.map(*.Slip).say;

[00:20] <discord-raku-bot> <Raku eval>  (4 6 1 2) 

[00:20] <discord-raku-bot> <nemokosch> this also works

[00:20] <discord-raku-bot> <shad.ow> how does that work

[00:20] <discord-raku-bot> <shad.ow> perl %gears{$y + $x * i}.append(+$_) if %gears{$y + $x * i}:exists; 

[00:20] <discord-raku-bot> <shad.ow> also is there a better way to write this

[00:21] <discord-raku-bot> <nemokosch> a Slip is a "List without the parens around it"

[00:21] <discord-raku-bot> <shad.ow> append to a list in a hash if it's in the hash

[00:21] <discord-raku-bot> <shad.ow> ahh

[00:21] <discord-raku-bot> <nemokosch> meaning that it auto-flattens into its context

[00:21] <discord-raku-bot> <nemokosch> fortunately, the method call eliminates the Scalar containers

[00:22] <discord-raku-bot> <nemokosch> m: ($(1, 2).Slip, (3, 4).Slip).say

[00:22] <discord-raku-bot> <Raku eval>  (1 2 3 4) 

[00:22] <discord-raku-bot> <nemokosch> does the same for both

[00:22] <discord-raku-bot> <shad.ow> i see

[00:22] <discord-raku-bot> <shad.ow> sorry yesterday was my first day with raku / perl

[00:22] <discord-raku-bot> <shad.ow> kind of pieceing things together as i go

[00:23] <discord-raku-bot> <shad.ow> i am doing advent of code in a different language each day lmao

[00:23] <discord-raku-bot> <shad.ow> cool language so far tho

[00:23] <discord-raku-bot> <shad.ow> any ideas for this pattern ?

[00:23] <discord-raku-bot> <nemokosch> this is always an active time of the year... kind of

[00:24] <discord-raku-bot> <shad.ow> yeah real

[00:24] *** teatime joined
[00:25] <discord-raku-bot> <nemokosch> well, you already have a topic so it kinda pushes one from using a shortcut that makes use of the topic variable

[00:25] <discord-raku-bot> <shad.ow> because if i remove that if

[00:25] <discord-raku-bot> <shad.ow> it'll initialize an empty list in the gears

[00:25] <discord-raku-bot> <nemokosch> with %gears{$y + $x * i} -> $current-gear { $current-gear.append(+$_); }

[00:25] <discord-raku-bot> <nemokosch> not exactly the same I think, not sure how the :exists check works

[00:25] <discord-raku-bot> <nemokosch> this checks for an undefined value

[00:25] <discord-raku-bot> <shad.ow> ahh interesting

[00:27] <discord-raku-bot> <shad.ow> i guess what i have now is fine

[00:27] <discord-raku-bot> <shad.ow> perl my @lines = "input.txt".IO.lines; my %gears;  for @lines.kv -> $j, $line {   for $line.comb(/<-[\d.]>/, :match) {     %gears{.from + $j * i} = [];   } }  for @lines.kv -> $j, $line {   for $line.comb(/\d+/, :match) {     for ($_.from - 1)..($_.to) -> $y {       for ($j - 1)..($j + 1) -> $x {         %gears{$y + $x * i}.append(+$_) if %gears{$y + $x * i}:exists;       }     }   } }  say

[00:27] <discord-raku-bot> %gears.values.map(*.Slip).sum; say %gears.values.map({ .elems == 2 ?? $_[0] * $_[1] !! 0 }).sum;

[00:27] <discord-raku-bot> <shad.ow> this is quite gorgeous

[00:27] <discord-raku-bot> <shad.ow> thanks for the help !

[00:33] <discord-raku-bot> <shad.ow> perl say ($_[0] * $_[1] if .elems == 2 for %gears.values).sum; 

[00:33] <discord-raku-bot> <shad.ow> this is nice too

[00:38] <discord-raku-bot> <shad.ow> ohhh i see waht you mean now

[00:54] *** sdomi left
[00:55] *** sdomi joined
[02:56] *** swaggboi left
[03:02] *** swaggboi joined
[07:45] <discord-raku-bot> <jaumegreen> I have a doubt with SetHash, how do I set and check a key via variables? Let me explain: my %numbers is SetHash; my $factor = 10; my $posy = 2; my $posx = 3;say "empty ",%numbers.keys.sort;                            #empty () say "empty ",%numbers<$posy*$factor+$posx>," ",%numbers<23>;#empty False False %numbers<$posy*$factor+$posx>++; say "vars ",%numbers.keys.sort;                            #vars

[07:45] <discord-raku-bot> ($posy*$factor+$posx) say "vars ",%numbers<$posy*$factor+$posx>," ",%numbers<23>;#vars True False %numbers.set($posy*$factor+$posx); say "set ",%numbers.keys.sort;                            #set ($posy*$factor+$posx 23) say "set ",%numbers<$posy*$factor+$posx>," ",%numbers<23>;#set True False %numbers{$posy*$factor+$posx}=True; say "key ",%numbers.keys.sort;                            #key ($posy*$factor+$posx 23) say

[07:45] <discord-raku-bot> "key ",%numbers<$posy*$factor+$posx>," ",%numbers<23>;#key True False  So, it seems that 23 is set as a key (both the 2nd and 3rd way work), but at the same time  it evaluates to false. And the only one that evaluates to true is the first one set, which stores the formula. I see no example with variables on the documentation, so I'm a little bit lost on why this doesn't work and how to make it work. Can anyone explain

[07:45] <discord-raku-bot> it to me? Thanks.

[09:24] <discord-raku-bot> <rcmlz> m: my $key = 1; my %hash; %hash{$key} = $key; dd %hash;

[09:24] <discord-raku-bot> <Raku eval>  Hash %hash = {"1" => 1} 

[09:25] <discord-raku-bot> <rcmlz> To my understanding accessing %hash<> requires a string between the <>.

[09:26] <discord-raku-bot> <rcmlz> whereas %hash{} also accepts variables.

[09:27] <discord-raku-bot> <rcmlz> m: my $key = 1; my %hash; %hash<$key> = $key; dd %hash;

[09:27] <discord-raku-bot> <Raku eval>  Hash %hash = {"\$key" => 1} 

[09:32] <ab5tract> m: my $key = "k|"; my %hash; %hash«$key» = True; dd %hash.keys

[09:32] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «("k|",).Seq␤»

[09:33] <ab5tract> m: my $key = "k"; my %hash; %hash«$key» = True; dd %hash.keys

[09:33] <camelia> rakudo-moar d2f8bb6fe: OUTPUT: «("k",).Seq␤»

[09:35] <discord-raku-bot> <jaumegreen> Setting it it's not much of a problem, but the retrieval is problematic, neither %numbers<$key> nor %numbers<23>return true to me.

[09:35] <discord-raku-bot> <Nahita> %numbers<stuff> is doing %numbers{'stuff'} as  a shortcut and single quotes don't interpolate, so 1) your formula is put literally there

[09:35] <discord-raku-bot> <Nahita> 2) when you do %numbers<23>, you request %numbers{'23'}, i.e., string 23, not Integer, so it doesn't give you True

[09:36] <discord-raku-bot> <Nahita> because you set 23 the Integer with the .set method

[09:36] <discord-raku-bot> <jaumegreen> ok, it seem that %numbers{$key} work. Thanks

[09:37] <discord-raku-bot> <jaumegreen> And thanks for the string vs integer explanation. It will probably help in the future 🙂

[09:37] <ab5tract> jaumegreen: or  %h«$var», if you like those braces better

[09:38] <ab5tract> well actually that won't solve the Int vs Str issue

[09:38] <discord-raku-bot> <Nahita> FWIW, with <<stuff>>, when stuff is Integer, SetHash registers an IntStr

[09:38] <discord-raku-bot> <Nahita> unlike normal Hashes i guess

[09:39] <discord-raku-bot> <Nahita> so either .set method or {...}++ seems leading to more predictable behaviour

[09:41] <ab5tract> that likely means that «$var» calls `val($var)`, which would make sense

[09:59] <discord-raku-bot> <nemokosch> That sounds problematic on many layers

[10:48] <DarthGandalf> Hi, how to make an array to be initialized with lazy sequence which always returns 0? I want to read non-existing elements from the array to sum them up, but that results in "Int + 42"

[10:51] <discord-raku-bot> <Nahita> hi, what about my @arr is default(0) or you can maybe .grep at the summing time

[10:54] <DarthGandalf> thanks, I couldn't figure how to use .grep for that - {$_==Int} doesn't work; but is default works

[10:55] <discord-raku-bot> <Nahita> i would grep defined ones instead of particularly Int ones (although for Int equality you can use triple ===), like .grep(*.defined)

[10:55] <discord-raku-bot> <Nahita> because == is numeric equality checker

[10:56] <DarthGandalf> ah, I was looking for .definite but that's only on how class ><

[10:56] <lizmat> DarthGandalf: if your int values fit within 64 bits, then you could also do: my int @array

[10:57] <DarthGandalf> oh, even better

[10:57] <DarthGandalf> thanks

[11:48] *** foo63 joined
[12:41] <ab5tract> m: (0, ‘a’, 11).grep(Int) ==> dd()

[12:41] <camelia> rakudo-moar 8dca71e89: OUTPUT: «(0, 11).Seq␤»

[12:43] <ab5tract>  The idiomatic way to check of something is of a type is to use smartmatch. The above thunks the type into the rhs of a smartmatch

[12:57] <DarthGandalf> m: (0, 'a', Int, 11).grep(Int) ==> dd()

[12:57] <camelia> rakudo-moar 8dca71e89: OUTPUT: «(0, Int, 11).Seq␤»

[12:59] <ab5tract> m: (0, Int).grep(Int:D) ==> dd()

[12:59] <camelia> rakudo-moar 8dca71e89: OUTPUT: «(0,).Seq␤»

[13:01] <ab5tract> We call those “smileys” :D

[13:03] <ab5tract> m: +(0,8,Int x 5, 9).grep(Int:U) ==> dd()

[13:03] <camelia> rakudo-moar 8dca71e89: OUTPUT: «Use of uninitialized value of type Int in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤0␤»

[13:03] <ab5tract> Dang autocorrect

[13:03] <ab5tract> m: +(0,8,Int xx 5, 9).grep(Int:U) ==> dd()

[13:03] <camelia> rakudo-moar 8dca71e89: OUTPUT: «0␤»

[13:03] <ab5tract> Huh..

[13:05] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2023/12/04/2023-49-venting-this-ad/

[13:06] <ab5tract> m: +(0,8,|(Int xx 5), 9).grep(Int:U) ==> dd()

[13:06] <camelia> rakudo-moar 8dca71e89: OUTPUT: «5␤»

[13:08] <lizmat> m: say 5 ~~ Int:U

[13:08] <camelia> rakudo-moar 8dca71e89: OUTPUT: «False␤»

[13:09] <lizmat> interesting...  

[13:09] <lizmat> also: afk for a few hours&

[13:12] <discord-raku-bot> <nemokosch> Interesting? Seems okay to me

[13:31] <ab5tract> Probably a misread.

[13:35] <discord-raku-bot> <nemokosch> m: (0,8,|(Int xx 5), 9).grep(Int:U).elems.&dd

[13:35] <discord-raku-bot> <Raku eval>  5 

[19:23] *** meooow_ joined
[19:25] *** gfldex_ joined
[19:25] *** meooow left
[19:26] *** gfldex left
[20:37] <discord-raku-bot> <fridge777> is there a way to set multiple keys in a hash at once from a list with subscripts, something like %m{@keys} = $value ?

[20:39] <discord-raku-bot> <nemokosch> you might need to replicate the value on the right handside

[20:39] <discord-raku-bot> <nemokosch> other than that, I think it can work

[20:40] <discord-raku-bot> <fridge777> oh. yep that did it actually! thank you 😄

[20:42] <discord-raku-bot> <nemokosch> 🍬

[22:15] *** foo63 left
[22:38] <discord-raku-bot> <drudgesentinel> I'm trying to determine whether the following is valid use of trans   sub translate-lines ($line) {   $line.trans([     /<?after o>ne/,     "two",      "three",      "four",      "five",      "six",      "seven",      /<?after e>ight/,      "nine"   ] => [     1, 2, 3, 4, 5, 6, 7, 8, 9   ]); }  I get expected values for simple cases, e.g.   my $working-example = "onetwo3"; #o123    But for numbers that

[22:38] <discord-raku-bot> 'share' letters, raku seems to hang:   my $gotcha = "twone"; # ctrl + C after 1 minutes 

[22:39] <discord-raku-bot> <drudgesentinel> The former example seems to imply the lookbehind works ok

[22:39] <discord-raku-bot> <nemokosch> I've never heard about trans taking regular expressions

[22:39] <discord-raku-bot> <nemokosch> gotta check the implementation though...

[22:40] <discord-raku-bot> <drudgesentinel> Maybe I'm misintepreting the docs:   Regexes work as keys I assume that the first set passed are the keys, and the 'replacements' the values in this context

[22:41] <discord-raku-bot> <drudgesentinel> I was previously just calling it like <one two three> => <1 2 3> but unfortunately my input had some shared letters in them

[22:41] <discord-raku-bot> <nemokosch> you can be right, I wouldn't know offhand

[22:46] <discord-raku-bot> <nemokosch> it really does hang

[22:46] <discord-raku-bot> <nemokosch> m: 'twone'.trans((/<?after o>ne/, 'two') => (1, 2))

[22:46] <discord-raku-bot> <Raku eval>  Failed while reading stream: Max execution time exceeded

[22:48] <discord-raku-bot> <drudgesentinel> I suppose I could just split it into separate trans calls

[22:48] <discord-raku-bot> <drudgesentinel> be a shame though

[22:49] <discord-raku-bot> <nemokosch> it can still just be a bug tbh

[22:53] <discord-raku-bot> <nemokosch> I think it cannot hurt opening an issue for it. It's not obvious at the very least why this needs to happen

[22:58] <discord-raku-bot> <.vushu> @antononcube I made this module https://raku.land/zef:vushu/FEN::Grammar, maybe you could you this to render the chessboard the way you desire.

[23:00] *** habere-et-disper joined
[23:12] <habere-et-disper> Thinking about FOSDEM. Where to focus more:

[23:12] <habere-et-disper> At play with raku -- Unstructured learning via suggestibility, or

[23:12] <habere-et-disper> At war with raku -- Combatting militaristic metaphors

[23:12] <habere-et-disper> Otherwise I'll juggle both. Any preferences ? Thanks for your thoughts ! (y) :]

