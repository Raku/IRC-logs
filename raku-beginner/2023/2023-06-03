[02:20] *** teatwo joined
[02:21] *** teatwo left
[02:22] *** teatwo joined
[02:24] *** tea3po left
[02:40] *** teatwo left
[02:41] *** teatwo joined
[08:26] *** rantanplan left
[08:29] *** snonux joined
[08:48] *** habere-et-disper joined
[08:53] <habere-et-disper> Pray tell, is there a raku equivalent of the perl :

[08:53] <habere-et-disper> not exp log srand xor s qq qx xor

[08:53] <habere-et-disper> s x x length uc ord and print chr

[08:53] <habere-et-disper> ord for qw q join use sub tied qx

[08:53] <habere-et-disper> xor eval xor print qq q q xor int

[08:53] <habere-et-disper> eval lc q m cos and print chr ord

[08:53] <habere-et-disper> for qw y abs ne open tied hex exp

[08:53] <habere-et-disper> ref y m xor scalar srand print qq

[08:53] <habere-et-disper> q q xor int eval lc qq y sqrt cos

[08:53] <habere-et-disper> and print chr ord for qw x printf

[08:53] <habere-et-disper> each return local x y or print qq

[08:53] <habere-et-disper> s s and eval q s undef or oct xor

[08:53] <habere-et-disper> time xor ref print chr int ord lc

[08:53] <habere-et-disper> foreach qw y hex alarm chdir kill

[08:53] <habere-et-disper> exec return y s gt sin sort split

[08:53] <habere-et-disper> https://www.perlmonks.org/?node_id=290607

[09:03] <discord-raku-bot> <librasteve> no, but I sense that you are the person to write it!

[09:04] <discord-raku-bot> <Nemokosch> is this just a list of keywords? ðŸ˜…

[09:08] <habere-et-disper> Of course, it might have to read somewhat modified, perhaps :

[09:08] <habere-et-disper> "Just another raku raccoon"

[09:57] <habere-et-disper> The longest (so far) I've accidentally written reads in part :

[09:57] <habere-et-disper> "... and so all gather for map ..."

[09:57] <habere-et-disper> ðŸ˜€

[10:24] *** frost88 joined
[11:03] *** frost88 left
[11:06] *** habere-et-disper left
[12:54] *** habere-et-disper joined
[13:49] *** tea3po joined
[13:52] *** teatwo left
[14:20] *** teatwo joined
[14:23] *** tea3po left
[14:41] *** ab5tract joined
[15:24] *** habere-et-disper left
[17:08] *** ab5tract left
[18:42] *** gfldex joined
[19:16] *** Poohmaan joined
[19:16] <Poohmaan> Hello all

[19:17] <Poohmaan> (1..10).map(->$a {$a+1})

[19:18] <Poohmaan> Can I do something like the above with the reduce function as well??

[19:20] <Poohmaan> (1..10).reduce(->$a (&fun, $accumulator))

[19:20] <Poohmaan> I'm looking for something like the above

[19:21] <Poohmaan> (1..10).reduce(->$a (&fun($a,$accumulator)))

[19:24] <Poohmaan> (array of hashes). reduce(->%a (&fun, %a, $accumulator))

[19:25] <Poohmaan> Where the fun has the signature fun(%a, $accumulator)

[19:37] *** Poohmaan left
[19:37] *** Poohmaan joined
[19:47] *** Poohmaan left
[20:30] <discord-raku-bot> <Nemokosch> Hello. Good question, I don't think so actually. The "accumulator" is really just the first/last element, depending on precedence

