[00:32] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub f(|@args) {   @args.say }  f(1, 2, 3, 4); 

[00:32] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub f(|args) {   args.say }  f(1, 2, 3, 4); 

[00:32] <discord-raku-bot> <Nemokosch> legit

[00:32] <discord-raku-bot> <Nemokosch> this is a capture, as you can see

[00:32] <discord-raku-bot> <:(**@args, *%kwargs)> doesn't this replace slurpies

[00:33] <discord-raku-bot> <Nemokosch> this is lower level, I'd say

[00:33] <discord-raku-bot> <Nemokosch> basically gives the function the underlying data type

[00:33] <discord-raku-bot> <Nemokosch> without processing it

[00:34] <discord-raku-bot> <Nemokosch> does this make sense?

[00:36] <discord-raku-bot> <:(**@args, *%kwargs)> wait so raku basically create this data type and then destructure it in a function call

[00:37] <discord-raku-bot> <Nemokosch> yes - whenever you call a function, a Capture builds up with the stuff you want to pass to the function, and the function declares a Signature that will take care of taking up the values from the Capture

[00:37] <discord-raku-bot> <Nemokosch> (I think)

[00:38] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub f(|args) {   dd args; }  f(1, a => 2, 3); 

[00:39] <discord-raku-bot> <:(**@args, *%kwargs)> positional after named is possible hmm

[00:39] <discord-raku-bot> <:(**@args, *%kwargs)> raku automatically sorts

[00:41] <discord-raku-bot> <Nemokosch> yes, I think they are kept separate

[00:41] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/Capture

[00:42] <discord-raku-bot> <Nemokosch> it even declares hash and list to only get the named part or positional part

[00:48] <discord-raku-bot> <:(**@args, *%kwargs)> does raku have tco

[00:49] <discord-raku-bot> <Nemokosch> very doubtful

[00:50] <discord-raku-bot> <Nemokosch> but I'd hope that it's just a matter of willpower to implement

[00:51] <discord-raku-bot> <:(**@args, *%kwargs)> m: ([+] 1..100).say 

[00:52] <discord-raku-bot> <:(**@args, *%kwargs)> m: ([+] 1..100000).say 

[00:53] <discord-raku-bot> <Nemokosch> hm, could it be optimized for ranges?

[00:53] <discord-raku-bot> <Nemokosch> ([+] 1..100000000).say

[00:53] <discord-raku-bot> <Nemokosch> m: ([+] 1..100000000).say

[00:53] <discord-raku-bot> <Nemokosch> perhaps

[00:54] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub nsum(\n, \acc) {   if n == 0 { acc }   else { nsum(n - 1, n + acc) } }  say nsum(10000, 0); 

[00:54] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub nsum(\n, \acc) {   if n == 0 { acc }   else { nsum(n - 1, n + acc) } }  say nsum(100000, 0); 

[00:56] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub nsum(\n, \acc) {   if n == 0 { 0 }   else { n + nsum(n - 1) } } sub nsum-tail(\n, \acc) {   if n == 0 { acc }   else { nsum-tail(n - 1, n + acc) } }  say nsum-tail(100000, 0); say nsum(100000); 

[00:56] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub nsum(\n) {   if n == 0 { 0 }   else { n + nsum(n - 1) } } sub nsum-tail(\n, \acc) {   if n == 0 { acc }   else { nsum-tail(n - 1, n + acc) } }  say nsum-tail(100000, 0); say nsum(100000); 

[00:57] <discord-raku-bot> <:(**@args, *%kwargs)> how do both nsums not cause stack overflow

[00:57] <discord-raku-bot> <Nemokosch> hm... could be that there is tco after all?

[00:58] <discord-raku-bot> <Nemokosch> I'd think this is VM level stuff

[00:58] <discord-raku-bot> <Nemokosch> still, we could generate the QAST of this code

[00:58] <discord-raku-bot> <:(**@args, *%kwargs)> nsum is not tail recursive so no tco for it

[00:58] <discord-raku-bot> <:(**@args, *%kwargs)> but it worked somehow

[00:58] <discord-raku-bot> <Nemokosch> maybe the stack is just big

[00:59] <discord-raku-bot> <:(**@args, *%kwargs)> that is what i think

[01:00] <discord-raku-bot> <Nemokosch> the QAST of a simple script that consists of one of these functions is way too bloated to be useful for inspection...

[01:02] <discord-raku-bot> <:(**@args, *%kwargs)> is there a function to inspect the environment

[01:02] <discord-raku-bot> <Nemokosch> OS and stuff like that?

[01:03] <discord-raku-bot> <:(**@args, *%kwargs)> no raku variables

[01:03] <discord-raku-bot> <Nemokosch> you mean a scope?

[01:03] <discord-raku-bot> <:(**@args, *%kwargs)> m: say globals; 

[01:03] <discord-raku-bot> <Nemokosch> there are Stashes

[01:04] <discord-raku-bot> <Nemokosch> (symbol table hashes)

[01:04] <discord-raku-bot> <Nemokosch> and PseudoStashes

[01:05] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/packages#Pseudo-packages

[01:05] <discord-raku-bot> <Nemokosch> famous ones

[01:07] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub globals() {   OUR.WHO }  our $a = 1; our $b = 2;  say globals; 

[01:08] <discord-raku-bot> <Nemokosch> m:  sub globals() {   OUR.WHO }  our $a = 1; our $b = 2;  dd globals; 

[01:08] <discord-raku-bot> <Nemokosch> oh okay

[01:08] <discord-raku-bot> <Nemokosch> stupid gist

[01:08] <discord-raku-bot> <Nemokosch> this is a Map at the very least

[01:08] <discord-raku-bot> <Nemokosch> if not a Hash

[01:29] *** sargassosea33 joined
[01:33] *** sargassosea33 left
[01:33] *** italicizem joined
[01:44] *** italicizem left
[02:17] *** jgaz left
[02:30] *** m_athias left
[02:31] *** m_athias joined
[02:50] <discord-raku-bot> <stevied> Looking at: https://docs.raku.org/language/containers#Custom_containers

[02:50] <discord-raku-bot> <stevied> What is that ::T syntax in the signature for lucky?

[03:41] <discord-raku-bot> <:(**@args, *%kwargs)> type captures

[03:42] <discord-raku-bot> <:(**@args, *%kwargs)> feels like type parameters

[03:43] <discord-raku-bot> <:(**@args, *%kwargs)> m: # compare only if same type sub eq(::T $a, T $b) {   $a eqv $b; }  say eq(1, 1); say eq(1, 'foo'); 

[03:55] <discord-raku-bot> <stevied> What do the two colons mean?

[04:00] <discord-raku-bot> <stevied> Ok found it: https://docs.raku.org/type/Signature#Type_captures

[04:00] <discord-raku-bot> <stevied> Thanks

[04:07] <discord-raku-bot> <stevied> That example is confusing as hell.

[06:20] <discord-raku-bot> <:(**@args, *%kwargs)> m: dd 'hello world'; 

[06:20] <discord-raku-bot> <:(**@args, *%kwargs)> til strings are multi line

[09:06] <discord-raku-bot> <Nemokosch> Agreed

[09:12] *** dakkar joined
[09:54] *** ab5tract joined
[12:11] *** discord-bot-test joined
[12:11] <discord-raku-bot> <Zephyr> test

[12:11] <discord-bot-test> <Zephyr> test

[12:11] *** discord-bot-test left
[12:25] *** ab5tract left
[12:37] *** m_athias left
[12:37] *** m_athias joined
[13:32] *** ab5tract joined
[13:44] *** NemokoschKiwi joined
[13:45] *** NemokoschKiwi left
[14:06] <discord-raku-bot> <:(**@args, *%kwargs)> how to do an instanceof check in raku

[14:09] <discord-raku-bot> <:(**@args, *%kwargs)> oh its .isa

[14:10] <discord-raku-bot> <:(**@args, *%kwargs)> m: @nums = 1, 2, 3, 4.0; say $_.isa(Int) for @nums; 

[14:10] <discord-raku-bot> <:(**@args, *%kwargs)> m: my @nums = 1, 2, 3, 4.0; say $_.isa(Int) for @nums; 

[14:24] <discord-raku-bot> <Nemokosch> a smartmatch can also work

[14:26] <discord-raku-bot> <Nemokosch> isa checks seem to be right for roles and Cool as well

[14:26] <discord-raku-bot> <Nemokosch> now I wonder about the implementation

[14:30] <discord-raku-bot> <:(**@args, *%kwargs)> how to destructure like thispy first, *rest = something can't use slip syntax

[14:31] <discord-raku-bot> <Nemokosch> uh oh, reaching uncommon ground...

[14:32] <discord-raku-bot> <Nemokosch> just use @rest ...

[14:33] <discord-raku-bot> <:(**@args, *%kwargs)> m: my $first, @rest = 1, 2, 3, 4; say @rest; 

[14:33] <discord-raku-bot> <:(**@args, *%kwargs)> m: my ($first, @rest) = 1, 2, 3, 4; say @rest; 

[14:33] <discord-raku-bot> <:(**@args, *%kwargs)> oh

[14:35] <discord-raku-bot> <Nemokosch> be warned that this only works "reasonably" when the array is the last thing

[14:36] <discord-raku-bot> <Nemokosch> in other situations, you probably cannot get away with a single expression

[14:36] <discord-raku-bot> <Nemokosch> this is because the behavior comes from mangling STORE

[14:38] <discord-raku-bot> <stevied> I'd like to see a "Raku Weird Stuff Explained" tutorial with examples of things that would be confusing to new and intermediate level Raku programmers. And it wouldn't just explain what's going on under the hood, it would explain why it's useful to behave that way.

[14:39] <discord-raku-bot> <stevied> I'd write it but I'm not qualified

[14:39] <discord-raku-bot> <Nemokosch> I'd say let's just start with a list of things and see what format we end up with

[14:39] <discord-raku-bot> <Nemokosch> also consider https://docs.raku.org/language/traps

[14:40] <discord-raku-bot> <stevied> do it on a community github page?

[14:40] <discord-raku-bot> <stevied> yeah, these aren't really "traps" though

[14:40] <discord-raku-bot> <Nemokosch> they are if you don't know what happens 😉

[14:40] <discord-raku-bot> <Nemokosch> But anyway, I'd say any of us could just start a repo with this intention

[14:41] <discord-raku-bot> <stevied> some are traps. but the atomic operator isn't.

[14:41] <discord-raku-bot> <Nemokosch> it's only a matter of involvement at the beginning

[14:41] <discord-raku-bot> <Nemokosch> like yeah... atoms in space, actually

[14:41] <discord-raku-bot> <Nemokosch> the stardust

[14:42] <discord-raku-bot> <stevied> it could cover some of this guy's concerns, for example: https://dev.to/taw/languages-speedrun-episode-26-raku-perl-6-4emf

[14:43] <discord-raku-bot> <stevied> some of his questions about equality might be considered "traps"

[14:48] <discord-raku-bot> <:(**@args, *%kwargs)> is my code easy to follow sub sqr-modulus(@a) is export(:sqr-modulus) {     my ($type, @nums) = @a;          my $is-all-int = (.isa(Int) for @nums).all.Bool;     my $is-correct = $type (elem) ('cart', 'polar') && $is-all-int;          my @sqr-moduli = (for @nums -> $a, $b {         if $type eq 'cart' {             $a ** 2 + $b ** 2         } elsif $type eq 'polar' {             $a ** 2         } 

[14:48] <discord-raku-bot>    });     my $sqr-modulus-sum = $is-correct ?? sum ($_[0] for @sqr-moduli)                                       !! -1;          my @digit-perms = (.join.Int for $sqr-modulus-sum.abs.comb.permutations);     my $max = max(@digit-perms);          [$is-correct, $sqr-modulus-sum, $max]; } 

[14:48] <discord-raku-bot> <Nemokosch> gonna take another look at it

[14:49] <discord-raku-bot> <Nemokosch> you know, I wasn't super fond about Mr Wegranowski's series, it felt a little bit like shitposting

[14:49] <discord-raku-bot> <Nemokosch> many of the points didn't appear to be serious, regardless the language

[14:51] <discord-raku-bot> <Nemokosch> any reason you are doing ($type, @nums) = @a; instead of a sub-signature, by the way?

[14:51] <discord-raku-bot> <stevied> well, he strikes me as a guy who doesn't know too much about language design or at least doesn't think about trade-offs

[14:51] <discord-raku-bot> <Nemokosch> actually, that might even work better than the assignment, you could use the slurpy

[14:51] <discord-raku-bot> <stevied> not that I'm an expert.

[14:52] <discord-raku-bot> <:(**@args, *%kwargs)> sub sqr-modulus(($type, @nums)) throw an error somehow

[14:52] <discord-raku-bot> <stevied> like he dismisses the use of semicolons like they are some kind of relic.

[14:53] <discord-raku-bot> <Nemokosch> m:  sub sqr-modulus(($type, **@nums)) { dd $type, @nums; } sqr-modulus <funny 1 2 3> 

[14:53] <discord-raku-bot> <Nemokosch> this seems okay to me

[14:53] <discord-raku-bot> <stevied> sure, they date back to c, if not earlier, but so what? I'm sure they can be useful

[14:53] <discord-raku-bot> <:(**@args, *%kwargs)> semicolons are ugly so he is kinda right

[14:54] <discord-raku-bot> <Nemokosch> I think the whole thing pro and contra semicolons is like the ultimate version of bikeshedding

[14:54] <discord-raku-bot> <Nemokosch> some people demand brackets and semicolons, otherwise it seems like some ad-hoc whitespace pasta

[14:54] <discord-raku-bot> <Nemokosch> then other people think the opposite - noise in the code

[14:55] <discord-raku-bot> <Nemokosch> when it could just look well AND do the right thing

[14:55] <discord-raku-bot> <Nemokosch> I don't really care who even is right

[14:55] <discord-raku-bot> <:(**@args, *%kwargs)> wait thats how to implement destructuring in signatures?

[14:56] <discord-raku-bot> <stevied> yeah, it's a purists' argument

[14:56] <discord-raku-bot> <:(**@args, *%kwargs)> its different from my destructuring bruh

[14:58] <discord-raku-bot> <Nemokosch> I wish I knew more about sub-signatures than that they look nice

[14:58] <discord-raku-bot> <Nemokosch> lol

[14:58] <discord-raku-bot> <stevied> anyway, he does illustrate some weird points about equality operator that can be confusing

[14:59] <discord-raku-bot> <Nemokosch> Actually I think it's worth considering how list assignments could be taken closer to sub-signature binding

[14:59] <discord-raku-bot> <Nemokosch> the language is huge => loads of things to take care of

[15:00] <discord-raku-bot> <stevied> but not to focus on him too much, there are a lot of things that are very different about Raku that don't seem to have any immediate value or you wonder why it is the way it is

[15:00] <discord-raku-bot> <stevied> i'd like to see some of that explained and the theory behind why things are they way the are

[15:01] <discord-raku-bot> <:(**@args, *%kwargs)> the semantics of $ is one example lol

[15:01] <discord-raku-bot> <stevied> take like Proxy class and custom containers. What are those good for? Why are they there? I have no idea.

[15:02] <discord-raku-bot> <:(**@args, *%kwargs)> m: my $a = 2; my $b = 1, $a, 3;  $a = 4; say $b; 

[15:02] <discord-raku-bot> <:(**@args, *%kwargs)> oof

[15:02] <discord-raku-bot> <:(**@args, *%kwargs)> m: my $a = 2; my $b = (1, $a, 3);  $a = 4; say $b; 

[15:02] <discord-raku-bot> <stevied> yeah, scalars are also very confusing at first and the idea of containers. that's a more basic example. I still don't have a good grasp of why things are that way. to avoid having to think about reference=ing, dereferencing?

[15:04] <discord-raku-bot> <Nemokosch> containers are very fundamental indeed, and kinda tough, too

[15:04] <discord-raku-bot> <Nemokosch> to kind of boast: https://github.com/2colours/Raku-ideas/blob/main/Biggest%20wishes.md

[15:05] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1068547305365569627/snap_screen_20230127160728.png

[15:05] <discord-raku-bot> <:(**@args, *%kwargs)> m: Nil

[15:05] <discord-raku-bot> <Nemokosch> 😄

[15:05] <discord-raku-bot> <:(**@args, *%kwargs)> m: say Nil

[15:06] <discord-raku-bot> <:(**@args, *%kwargs)> ok i thought i can't get Nil

[15:06] <discord-raku-bot> <:(**@args, *%kwargs)> im stupid

[15:06] <discord-raku-bot> <Nemokosch> another big topic could be the abundance of values signalling "invalid"

[15:07] <discord-raku-bot> <:(**@args, *%kwargs)> type object = undefined real

[15:07] <discord-raku-bot> <Nemokosch> Nil, type objects, Empty, Failures (that actually descend from Nil)

[15:07] <discord-raku-bot> <:(**@args, *%kwargs)> at least js has only one undefined value

[15:07] <discord-raku-bot> <Nemokosch> it is kind of overwhelming

[15:08] <discord-raku-bot> <stevied> add .raku .perl .^name .VAR .^what etc. methods to the list

[15:08] <discord-raku-bot> <Nemokosch> .perl is just obsolete .raku 😉

[15:08] <discord-raku-bot> <:(**@args, *%kwargs)> i don't think .raku and .gist are that confusing

[15:08] <discord-raku-bot> <stevied> right, but unless you know that, you're like wtf?

[15:09] <discord-raku-bot> <Nemokosch> the metamodel is a big topic

[15:09] <discord-raku-bot> <Nemokosch> it's like __repr__ and __str__ amirite

[15:09] <discord-raku-bot> <:(**@args, *%kwargs)> correct

[15:10] <discord-raku-bot> <stevied> oh, and it's .WHAT not .^WHAT. I get that wrong all the time

[15:10] <discord-raku-bot> <Nemokosch> if something is "shouted", it's probably exposed on the object, hence dot

[15:10] <discord-raku-bot> <Nemokosch> I'm not sure the metamodel contains full-uppercase names at all

[15:11] <discord-raku-bot> <Nahita> i wonder what's the difference between WHAT and ^name

[15:11] <discord-raku-bot> <:(**@args, *%kwargs)> ok its the naming that can be confusing because it doesn't say directly what it does unlike python repr and str

[15:11] <discord-raku-bot> <Nahita> oh one of them is returning a string

[15:11] <discord-raku-bot> <:(**@args, *%kwargs)> .WHAT returns class

[15:12] <discord-raku-bot> <Nahita> well i can get to class with the string as well :y

[15:12] <discord-raku-bot> <Nemokosch> I wonder how WHAT works

[15:12] <discord-raku-bot> <Nahita> m: ::(12.^name).say

[15:12] <discord-raku-bot> <Nemokosch> could be that it works ^ exactly like this

[15:13] <discord-raku-bot> <Nahita> since WHAT et al. was macro kind of things, *.WHAT wasn't working

[15:13] <discord-raku-bot> <Nahita> hadn't tried with ^name though...

[15:13] <discord-raku-bot> <Nemokosch> also correct...

[15:13] <discord-raku-bot> <Nemokosch> m: dd *.^name

[15:13] <discord-raku-bot> <Nemokosch> that would work

[15:14] <discord-raku-bot> <Nemokosch> m: dd *.WHAT

[15:14] <discord-raku-bot> <Nemokosch> that would not

[15:14] <discord-raku-bot> <Nahita> ^name works for it but

[15:14] <discord-raku-bot> <:(**@args, *%kwargs)> oh and raku's weird naming conventions and jargon slip instead of unpack or spread slurp for variadic args

[15:14] <discord-raku-bot> <Nahita> now i wonder why this says Array:

[15:14] <discord-raku-bot> <Nemokosch> hm, could be that WHAT is mixed in some strange way...

[15:14] <discord-raku-bot> <Nahita> m:  [12, "wow", -1e-1]>>.^name.say

[15:14] <discord-raku-bot> <stevied> weird, I can't search for ^name in the docs

[15:15] <discord-raku-bot> <Nemokosch> intentional tbh

[15:15] <discord-raku-bot> <Nemokosch> ^name doesn't exist

[15:15] <discord-raku-bot> <Nemokosch> it's .^ with name

[15:15] <discord-raku-bot> <Nemokosch> name being invoked on the meta-object

[15:15] <discord-raku-bot> <Nahita> there was a discussion about this in github :q

[15:15] <discord-raku-bot> <Nahita> i think they are cool

[15:15] <discord-raku-bot> <Nemokosch> that is, an instance of some stuff that ends with HOW

[15:16] <discord-raku-bot> <Nahita> slurp is kind of funny :p

[15:16] <discord-raku-bot> <Nemokosch> and yeah HOW is a name that I particularly don't like

[15:16] <discord-raku-bot> <Nahita> as i'm not a native speaker, these click for me, if ever, much later

[15:16] <discord-raku-bot> <Nemokosch> HOW is the magic word that gets you into the metamodel world

[15:16] <discord-raku-bot> <Nemokosch> how tf did i end up here

[15:17] <discord-raku-bot> <:(**@args, *%kwargs)> - the .raku and .gist (what does it mean by gist?) - root of the inheritance hierachy is Mu - Cool - whatever star - ...

[15:17] <discord-raku-bot> <Nemokosch> my guess would be that metamodel stuff is nodal for some reason

[15:17] <discord-raku-bot> <Nahita> the gist of dammit

[15:18] <discord-raku-bot> <Nahita> like a short humanly understandable representation of it, no?

[15:18] <discord-raku-bot> <Nemokosch> m:  [12, "wow", -1e-1].map(*.^name).say

[15:18] <discord-raku-bot> <Nahita> English use "the gist of it" in some that sense i think

[15:18] <discord-raku-bot> <Nemokosch> [12, "wow", -1e-1].deepmap(*.^name).say

[15:18] <discord-raku-bot> <Nemokosch> oops

[15:18] <discord-raku-bot> <Nemokosch> m: [12, "wow", -1e-1].deepmap(*.^name).say

[15:18] <discord-raku-bot> <Nemokosch> it can still traverse it

[15:18] <discord-raku-bot> <Nemokosch> hmmm

[15:19] <discord-raku-bot> <:(**@args, *%kwargs)> hmm ok still, its much less direct than something like .toString and unfriendly to non-natives 😭

[15:19] <discord-raku-bot> <Nemokosch> anyway, .^ is sugar. This is important

[15:19] <discord-raku-bot> <Nemokosch> could be that it has some weird resolution

[15:19] <discord-raku-bot> <Nemokosch> very much agreed...

[15:20] <discord-raku-bot> <Nemokosch> khm-khm, refusing de morgan equivalence in the name of English

[15:20] <discord-raku-bot> <Nemokosch> m: say so (1, 2, 3).all != 2

[15:20] <discord-raku-bot> <Nahita> agreed for nonnatives...

[15:20] <discord-raku-bot> <Nemokosch> because it's taken as "not all of them are 2", not "all of them are different from 2"

[15:20] <discord-raku-bot> <Nemokosch> 🥴

[15:21] <discord-raku-bot> <Nemokosch> this is easily on my "top 3 things that really should go from Raku" list

[15:22] <discord-raku-bot> <:(**@args, *%kwargs)> raku is weird

[15:22] <discord-raku-bot> <:(**@args, *%kwargs)> m: say ((1, 2, 3).all != 2)

[15:22] <discord-raku-bot> <Nemokosch> no, you can't fix that...

[15:22] <discord-raku-bot> <Nemokosch> ! is lifted

[15:23] <discord-raku-bot> <Nemokosch> you can rephrase it with none 🤪

[15:23] <discord-raku-bot> <Nemokosch> m: say ((1, 2, 3).none == 2)

[15:23] <discord-raku-bot> <:(**@args, *%kwargs)> oh yeah that is !((1, 2, 3).all == 2)

[15:23] <discord-raku-bot> <Nemokosch> yes!

[15:23] <discord-raku-bot> <Nemokosch> because... well, English

[15:23] <discord-raku-bot> <Nemokosch> m: so say ((1, 2, 3).none == 2)

[15:23] <discord-raku-bot> <Nemokosch> oops

[15:23] *** jgaz joined
[15:23] <discord-raku-bot> <Nemokosch> m: say so ((1, 2, 3).none == 2)

[15:24] <discord-raku-bot> <:(**@args, *%kwargs)> why can't it just be (1 != 2, 2 != 2, 3 != 2).all

[15:24] <discord-raku-bot> <Nemokosch> THIS is the working version

[15:24] <discord-raku-bot> <Nemokosch> it can, that's the thing

[15:24] <discord-raku-bot> <Nemokosch> lizmat made a PR for it once

[15:24] <discord-raku-bot> <Nemokosch> but Larry Wall's historical argument of English was higher regarded around the time

[15:25] <lizmat> yeah, not all my PRs make it  :-)

[15:25] <discord-raku-bot> <:(**@args, *%kwargs)> wait junctions feel like vectors operations on it are broadcasted across all elements

[15:25] <discord-raku-bot> <Nemokosch> Well I still wish that one did make it 😄

[15:26] <discord-raku-bot> <:(**@args, *%kwargs)> m: dd ((1, 2, 3).all + (4, 5, 6).all); 

[15:26] <discord-raku-bot> <:(**@args, *%kwargs)> ok thats no longer like vectors

[15:26] <discord-raku-bot> <Nemokosch> kind of is, except not smart enough to flatten

[15:26] <discord-raku-bot> <Nemokosch> if you check the values, all values are present

[15:27] <discord-raku-bot> <:(**@args, *%kwargs)> english?

[15:27] <discord-raku-bot> <Nemokosch> it can be written as

[15:28] <discord-raku-bot> <Nemokosch> m: say 2 != any(1, 2, 3)

[15:28] <discord-raku-bot> <Nemokosch> which reads like "2 is not equal to any of 1, 2 and 3

[15:28] <discord-raku-bot> <:(**@args, *%kwargs)> 2 is not equal to any of 1 2 3

[15:28] <discord-raku-bot> <:(**@args, *%kwargs)> which should be True?

[15:29] <discord-raku-bot> <Nemokosch> matematically yes but in English the sentence means: 2 is equal to none of them

[15:29] <discord-raku-bot> <Nemokosch> see, that's the trap

[15:30] <discord-raku-bot> <:(**@args, *%kwargs)> :cameliathink:

[15:30] <discord-raku-bot> <Nemokosch> it's somewhere on my "bucket list" to make a kind of petition to change the design of this, much like the PR from liz

[15:31] <discord-raku-bot> <:(**@args, *%kwargs)> wall still thinks being a linguist makes him a good programming language designer somehow 😭

[15:31] <discord-raku-bot> <Nemokosch> a petition collecting the arguments that can be signed or counter-signed

[15:31] <discord-raku-bot> <Nemokosch> perhaps doesn't think about these things nowadays

[15:32] <discord-raku-bot> <Nemokosch> but around 2010, this was still a hot topic, maybe a bit later even

[15:32] <discord-raku-bot> <:(**@args, *%kwargs)> i mean perl's sigil nonsense is based on natural languages' agreement perl @array @array[1] # wrong $array[1] # right 

[15:32] <discord-raku-bot> <Nemokosch> and even then, only some natural languages.

[15:32] <discord-raku-bot> <Nemokosch> For me, Hungarian is a pretty damn natural language 😂 and it doesn't do this

[15:33] <discord-raku-bot> <Nemokosch> you don't count 1 foo, 2 foos 3 foos etc

[15:33] <discord-raku-bot> <Nemokosch> you count 1 foo, 2 foo, 3 foo, 43.2 foo etc

[15:34] <discord-raku-bot> <:(**@args, *%kwargs)> m: # loop can be used as an expression say (loop (my $i = 0; $i < 10; $i++) { $i }); 

[15:34] <discord-raku-bot> <:(**@args, *%kwargs)> TIL

[15:34] <discord-raku-bot> <Nemokosch> I think basically all control structures can be

[15:34] <discord-raku-bot> <Nemokosch> if you fancy (if x { value } else { value2 })

[15:35] <discord-raku-bot> <Nemokosch> you can do it instead of x ?? value !! value2

[15:37] <discord-raku-bot> <Nahita> i thought this was possible only if you do it

[15:38] <discord-raku-bot> <Nahita> actually characterwise they are the same it turns out 😒

[15:38] <discord-raku-bot> <Nemokosch> 🤣

[15:38] <discord-raku-bot> <:(**@args, *%kwargs)> https://glot.io/snippets/ghog2kob2s

[15:38] <discord-raku-bot> <Nemokosch> yeah, you do need the parens

[15:38] <discord-raku-bot> <Nemokosch> in order to "do" it

[15:39] <discord-raku-bot> <:(**@args, *%kwargs)> direct application of that lol

[15:40] <discord-raku-bot> <Nemokosch> however, your version is eager

[15:40] <discord-raku-bot> <Nahita> actually not, you need a space in do form

[15:40] <discord-raku-bot> <Nemokosch> it could be lazy

[15:40] <discord-raku-bot> <Nahita> doloop

[15:40] <discord-raku-bot> <:(**@args, *%kwargs)> gather?

[15:40] <discord-raku-bot> <Nemokosch> or wait... is it eager?

[15:40] <discord-raku-bot> <Nemokosch> maybe I'm just wrong

[15:40] <discord-raku-bot> <Nahita> nice

[15:40] <discord-raku-bot> <Nemokosch> what does this return?

[15:40] <discord-raku-bot> <Nemokosch> Seq or List?

[15:41] <discord-raku-bot> <Nahita> now rewrite that with ... :y

[15:41] <discord-raku-bot> <Nemokosch> seems it returns Seq so it can even be lazy

[15:41] <discord-raku-bot> <Nemokosch> cool

[15:41] <discord-raku-bot> <:(**@args, *%kwargs)> try range(Inf)

[15:41] <discord-raku-bot> <Nemokosch> great 😋

[15:41] <discord-raku-bot> <:(**@args, *%kwargs)> wait it does work

[15:42] <discord-raku-bot> <Nemokosch> it did become lazy

[15:42] <discord-raku-bot> <:(**@args, *%kwargs)> is proto needed this case

[15:42] <discord-raku-bot> <Nemokosch> I guess it was worth making everything lazy by default

[15:42] <discord-raku-bot> <:(**@args, *%kwargs)> prbly not

[15:42] <discord-raku-bot> <Nemokosch> yes, I think this can be inferred

[15:43] <discord-raku-bot> <Nemokosch> it never hurts to add it but it would work without here

[15:45] <discord-raku-bot> <:(**@args, *%kwargs)> anyways how can i generate end-exclusive sequences (like is done by that range)

[15:45] <discord-raku-bot> <Nahita> ^

[15:46] <discord-raku-bot> <Nahita> m: ^10 .list.say

[15:46] <discord-raku-bot> <Nemokosch> you know .., right?

[15:46] <discord-raku-bot> <Nemokosch> it can have ^ on both ends

[15:46] <discord-raku-bot> <:(**@args, *%kwargs)> yes it generate inclusive ranges

[15:46] <discord-raku-bot> <Nemokosch> same for ...

[15:47] <discord-raku-bot> <Nemokosch> m: .say for 4 .. ^10

[15:47] <discord-raku-bot> <Nemokosch> oops

[15:47] <discord-raku-bot> <Nemokosch> I meant ..^

[15:47] <discord-raku-bot> <Nemokosch> m: .say for 4 ..^ 10

[15:47] <discord-raku-bot> <:(**@args, *%kwargs)> can't it handle stepped ranges

[15:47] <discord-raku-bot> <Nemokosch> hm, I'm not sure it could...

[15:47] <discord-raku-bot> <Nemokosch> ... on the other hand, haha

[15:47] <discord-raku-bot> <Nemokosch> the sequence generator

[15:48] <discord-raku-bot> <:(**@args, *%kwargs)> m: .say for 0...10

[15:48] <discord-raku-bot> <:(**@args, *%kwargs)> isn't that basically the same as ..

[15:49] <discord-raku-bot> <Nemokosch> it's more like loop, as Nahita hinted

[15:50] <discord-raku-bot> <:(**@args, *%kwargs)> hmm

[15:50] <discord-raku-bot> <Nemokosch> can handle terminating conditions and stuff like that

[15:50] <discord-raku-bot> <Nemokosch> you know the famous fibonacci code?

[15:50] <discord-raku-bot> <Nemokosch> m: my @fib = 1, 1, * + * ... *; dd @fib[^10]

[15:51] <discord-raku-bot> <Nemokosch> by default, it can recognize arithmetic and geometric series btw

[15:52] <discord-raku-bot> <Nemokosch> arithmetic if you add the first two elements, geometric if you give suitable 3

[15:53] <discord-raku-bot> <:(**@args, *%kwargs)> m: my @range = 0, *+2 ...^ 10; say @range; 

[15:53] <discord-raku-bot> <:(**@args, *%kwargs)> 🤯

[15:53] <discord-raku-bot> <Nemokosch> even with the whatever, lol

[15:53] <discord-raku-bot> <Nemokosch> m: my @range = 0, 2 ...^ 10; say @range;

[15:54] <discord-raku-bot> <Nemokosch> m: my @range = 4, 16, 64 ...^ 10000; say @range;

[15:54] <discord-raku-bot> <Nemokosch> big magic

[15:54] <discord-raku-bot> <:(**@args, *%kwargs)> isn't range the arithmetic progression

[15:56] <discord-raku-bot> <:(**@args, *%kwargs)> oh you mean arithmetic series

[15:57] <discord-raku-bot> <:(**@args, *%kwargs)> wait why range2(2, 10, 3) give infinite results https://glot.io/snippets/ghog2kob2s

[15:57] <discord-raku-bot> <Nemokosch> don't worry, it was just lazier than the first one

[15:58] <discord-raku-bot> <Nemokosch> the first one was like "okay, I fetched 100 values, that should do"

[15:58] <discord-raku-bot> <Nemokosch> the second one was "okay, I can see this is going to be infinite, why even bother to generate anything?"

[15:58] <discord-raku-bot> <Nemokosch> kind of

[15:58] <discord-raku-bot> <Nemokosch> the values are there, just not fetched at all

[15:59] <discord-raku-bot> <Nahita> end point is dangerous with callables

[16:00] <discord-raku-bot> <:(**@args, *%kwargs)> i think this'll do $start, *+$step ...^ *>=$stop 

[16:00] <discord-raku-bot> <Nahita> if it doesn't exactly hit, you are infinite

[16:00] <discord-raku-bot> <Nahita> you ned * > $stop

[16:00] <discord-raku-bot> <Nahita> oh yeah

[16:01] <discord-raku-bot> <Nemokosch> fair but I think here it did the right thing; probably thanks to encountering Inf directly

[16:02] <discord-raku-bot> <Nemokosch> if you did range2(1111111111111111111111111111111111111);

[16:02] <discord-raku-bot> <Nemokosch> that would have hurt

[16:02] <discord-raku-bot> <Nemokosch> and did hurt - it's timiing out

[16:03] <discord-raku-bot> <:(**@args, *%kwargs)> ok, trust the loop version more lol

[16:03] <discord-raku-bot> <Nemokosch> that was a very sad message :c

[16:04] <discord-raku-bot> <Nemokosch> you know, there is a concept, I think for iterators

[16:04] <discord-raku-bot> <Nemokosch> whether something is known to be potentially infinite

[16:04] <discord-raku-bot> <:(**@args, *%kwargs)> no it doesn't time out

[16:04] <discord-raku-bot> <:(**@args, *%kwargs)> i tried

[16:04] <discord-raku-bot> <Nemokosch> I mean, with ...^ $stop

[16:05] <discord-raku-bot> <Nemokosch> so Inf got special treatment

[16:05] <discord-raku-bot> <:(**@args, *%kwargs)> oh

[16:05] <discord-raku-bot> <Nemokosch> unfortunate naming: it's called is-lazy

[16:06] <discord-raku-bot> <Nemokosch> range2(Inf) generated (...) because is-lazy was True

[16:06] <discord-raku-bot> <Nemokosch> the Seq knew about itself that fetching is a bad idea

[16:06] <discord-raku-bot> <Nemokosch> in the range1(Inf) case, it didn't

[16:06] <discord-raku-bot> <Nemokosch> so it fetched as many elements as the .gist method told it to

[16:07] <discord-raku-bot> <Nemokosch> which is 100, simply a magic number in the code

[16:14] <discord-raku-bot> <:(**@args, *%kwargs)> m: my Int sub MAIN {   say 'hello world';   0; } 

[16:14] <discord-raku-bot> <:(**@args, *%kwargs)> C-style hello world 😎

[16:14] <discord-raku-bot> <Nemokosch> 🤣 priceless

[16:15] <discord-raku-bot> <:(**@args, *%kwargs)> does the MAIN return value become the program’s exit code

[16:15] <discord-raku-bot> <Nemokosch> tbh I'm learning a lot from these brainstormings about using Raku

[16:15] <discord-raku-bot> <Nemokosch> huh, again something I don't know at all 😬

[16:16] <discord-raku-bot> <Nemokosch> wouldn't bet on it but...

[16:16] <discord-raku-bot> <:(**@args, *%kwargs)> m: my Int sub MAIN {   say 'hello world';   1; } 

[16:16] <discord-raku-bot> <:(**@args, *%kwargs)> not the way to test it 😄

[16:17] <discord-raku-bot> <Nemokosch> run it with the raku command, $? said 0

[16:17] <discord-raku-bot> <Nemokosch> I like the idea in theory

[16:17] <discord-raku-bot> <:(**@args, *%kwargs)> $? == return code?

[16:17] <discord-raku-bot> <Nemokosch> that it could return with the code if there is an integer

[16:17] <discord-raku-bot> <Nemokosch> in shell

[16:18] <discord-raku-bot> <:(**@args, *%kwargs)> ok

[16:19] <discord-raku-bot> <:(**@args, *%kwargs)> im in windows 😅

[16:19] <discord-raku-bot> <Nemokosch> on shell idk how you can obtain it

[16:19] <discord-raku-bot> <Nemokosch> on windows, sorry

[16:19] <discord-raku-bot> <Nemokosch> probably differs in cmd and ps as well

[16:19] <discord-raku-bot> <:(**@args, *%kwargs)> i can check %ERRORLEVEL% (in cmd)

[16:20] <discord-raku-bot> <Nemokosch> oh okay

[16:20] <discord-raku-bot> <:(**@args, *%kwargs)> so how do you exist with return code in raku exit(1);?

[16:22] <discord-raku-bot> <Nemokosch> actually, that's what I'm trying to figure out...

[16:22] <discord-raku-bot> <Nemokosch> there is die, maybe something similar

[16:23] <discord-raku-bot> <Nemokosch> die sets the value to 1 apparently

[16:23] <discord-raku-bot> <:(**@args, *%kwargs)> yeah its exit

[16:23] <discord-raku-bot> <:(**@args, *%kwargs)> found it in docs

[16:23] <discord-raku-bot> <Nemokosch> oh nice

[16:23] <discord-raku-bot> <:(**@args, *%kwargs)> m: exit 2

[16:24] <discord-raku-bot> <:(**@args, *%kwargs)> m: my Int sub MAIN {   say 'hello world';   exit 1; } 

[16:24] <discord-raku-bot> <Nemokosch> could be a cute feature to generate this call into the MAIN subroutine

[16:25] <discord-raku-bot> <Nemokosch> @stevied back to the article

[16:25] <discord-raku-bot> <Nemokosch> > There are no "numbers" or "strings". It's just scalars, and they convert automatically.

[16:26] <discord-raku-bot> <Nemokosch> this is wrong. There are respected type constraints

[16:26] <discord-raku-bot> <stevied> yeah, i'm not too worried about that. but he does point out areas that could be confusing

[16:26] <discord-raku-bot> <Nemokosch> the values only convert if the type signatures and data structures are sufficient, it's a process handled in the type structure

[16:26] <discord-raku-bot> <Nemokosch> okay; I'm just saying that this for one is plain wrong

[16:27] <discord-raku-bot> <:(**@args, *%kwargs)> raku typing is not that weak? its weak when explicitly said so in the signature

[16:28] <discord-raku-bot> <Nemokosch> if you declare a variable as some number, it will stay a number

[16:28] <discord-raku-bot> <Nemokosch> it will know about itself that it is a number

[16:28] <discord-raku-bot> <Nemokosch> the whole multiple dispatch system respects types

[16:28] <discord-raku-bot> <Nemokosch> this is absolutely not like classic Perl where types weren't a concept within the workings of the language

[16:29] <discord-raku-bot> <Nemokosch> in this regard, Raku is more typed than Python

[16:29] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub strong-typed(Int $n) {   dd $n; }  sub weak-typed(Int(Cool) $n) {   dd $n; }  weak-typed '11';  strong-typed '11'; 

[16:29] <discord-raku-bot> <Nemokosch> types are actually enforced by the runtime

[16:30] <discord-raku-bot> <Nemokosch> and acted upon

[16:30] <discord-raku-bot> <:(**@args, *%kwargs)> m: sub strong-typed(Int $n) {   dd $n; }  sub weak-typed(Int(Cool) $n) {   dd $n; }  weak-typed '11'; 

[16:30] <discord-raku-bot> <:(**@args, *%kwargs)> it stopped before running any actual code lol

[16:31] <discord-raku-bot> <Nemokosch> see? it actually performed the check during the compilation stage

[16:31] <discord-raku-bot> <Nemokosch> it deduced that there is no candidate to dispatch this call to

[16:32] <discord-raku-bot> <:(**@args, *%kwargs)> are normal subs multis under the hood

[16:32] <discord-raku-bot> <Nemokosch> no, I don't think so, it was just sloppy terms

[16:32] <discord-raku-bot> <Nemokosch> the overhead would be too big probably

[16:33] <discord-raku-bot> <:(**@args, *%kwargs)> is Bool a subclass of Int?

[16:34] <discord-raku-bot> <Nemokosch> Bool is really just an enum from what I know

[16:34] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/Bool

[16:34] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1068569769395105853/image.png

[16:34] <discord-raku-bot> <Nemokosch> oh nice

[16:35] <discord-raku-bot> <Nemokosch> hmm, maybe all enums descend from Int? idk

[16:35] <lizmat> Bool is special in that it is an enum and it has to exists during the bootstrap.  For the longest time it wasn't a real enum.  nine spent a *lot* of time on getting that to work  :-)

[16:35] <discord-raku-bot> <:(**@args, *%kwargs)> bool is also a subclass of int in python but it was mostly due to pragmatism i think

[16:38] <discord-raku-bot> <:(**@args, *%kwargs)> m: (sub (Int $i) {   dd $i; })(True) 

[16:38] <discord-raku-bot> <:(**@args, *%kwargs)> what

[16:38] <discord-raku-bot> <:(**@args, *%kwargs)> it isn’t cast into Int sm

[16:39] <discord-raku-bot> <Nemokosch> because it IS Int, the way it is

[16:39] <discord-raku-bot> <Nemokosch> and Int that has a specific representation

[16:39] <discord-raku-bot> <Nemokosch> *an

[16:40] <discord-raku-bot> <Nemokosch> m:  (sub (List $i) {   dd $i; })([1, 2, 3]) 

[16:40] <discord-raku-bot> <Nemokosch> would you wish this to collapse into (1, 2, 3) ?

[16:41] <discord-raku-bot> <:(**@args, *%kwargs)> not sure which behavior is more desirable in most cases

[16:41] <discord-raku-bot> <Nemokosch> tbh "all base classes should be abstract" is a useful paradigm, sometimes I miss that

[16:43] <discord-raku-bot> <:(**@args, *%kwargs)> i don’t think any language cast that bool into int in these cases

[16:44] <discord-raku-bot> <Nemokosch> well don't forget that this wasn't a cast but a matching derived type itself

[16:44] <discord-raku-bot> <Nemokosch> like Array and List

[16:44] <discord-raku-bot> <Nemokosch> Array is a List, Bool is an Int

[16:44] <discord-raku-bot> <:(**@args, *%kwargs)> might test it on java, the ultimate “typed OO” language

[16:46] <discord-raku-bot> <Nemokosch> back to the article: there is eq, there is == but that's nowhere near the end, lol

[16:46] <discord-raku-bot> <Nemokosch> there is eqv as the "generic content equivalence"

[16:46] <discord-raku-bot> <Nemokosch> there is === as the "hashable representation equivalence"

[16:46] <discord-raku-bot> <Nemokosch> there is =:= as the "true referential equivalence"

[16:47] <discord-raku-bot> <:(**@args, *%kwargs)> 😰

[16:47] <discord-raku-bot> <Nemokosch> hey 👀

[16:48] <discord-raku-bot> <:(**@args, *%kwargs)> eqv should be == tbh

[16:48] <discord-raku-bot> <Nemokosch> because of Python, right? 😒

[16:49] <discord-raku-bot> <Nemokosch> anyway... I think most of the time when you check something for equivalence, it's really either a string or a number, and if it's neither, you might want something low-level like === or even =:=

[16:49] <discord-raku-bot> <Nemokosch> almost like I use eqv the least

[16:50] <discord-raku-bot> <Nemokosch> so yeah, that's another problematic part of the article

[16:50] <discord-raku-bot> <Nemokosch> I wonder if there's any point in reading the JSON part

[16:52] <discord-raku-bot> <Nemokosch> > Raku acts as if there was no distinction between numbers and strings, but it's there behind the scenes internally. Number 2 and string "2" are 99% same, except when they aren't.  Again, the main assumption is wrong, not much can be done about that...

[16:53] <discord-raku-bot> <:(**@args, *%kwargs)> ie object identity?

[16:54] <discord-raku-bot> <Nemokosch> basically yes

[16:55] <discord-raku-bot> <:(**@args, *%kwargs)> hmm is

[16:55] <discord-raku-bot> <Nemokosch> that's not for comparison in Raku 😄

[16:55] <discord-raku-bot> <Nemokosch> but yeah

[16:55] <discord-raku-bot> <:(**@args, *%kwargs)> but is is already used lol

[16:55] <discord-raku-bot> <Nemokosch> it's basically is in Python

[16:56] <discord-raku-bot> <:(**@args, *%kwargs)> plus raku likes symbols

[16:56] <discord-raku-bot> <Nemokosch> the JSON part and the eqv part of that article annoy me so much that I feel like just making a reaction video lmao

[16:56] <discord-raku-bot> <Nemokosch> basically eqv worked exactly as dude wished

[16:56] <discord-raku-bot> <:(**@args, *%kwargs)> what does the json part say

[16:56] <discord-raku-bot> <Nemokosch> and now bitches that "oh no, everything else [that wasn't meant to be generic] worked differently!!4!!!!"

[16:56] <discord-raku-bot> <Nemokosch> this is ridiculous

[16:57] <discord-raku-bot> <Nemokosch> so he wrote an equivalence check based on string comparison of JSON-encoded stuff

[16:57] <discord-raku-bot> <Nemokosch> and bitched about that he got the results he wanted, not the results that make sense for enconding JSON

[16:59] <discord-raku-bot> <Nemokosch> could be that it's because one should decide whether they want to produce JSON (and adapt to JSON types) or check equivalence for Raku (and use Raku types)??

[17:00] <discord-raku-bot> <Nemokosch> actually it seems fairly sane that you need to do things differently with these two motives

[17:00] <discord-raku-bot> <Nemokosch> and the fact that the results worked out for Raku types is like, very sane outcome I'd say

[17:02] <discord-raku-bot> <Nemokosch> > but for JSON conversion their order is not guaranteed, so this program will print True or False at random.  again, why should it be?

[17:03] <discord-raku-bot> <:(**@args, *%kwargs)> ive come this far without ever touching regex or grammar lmao arent those raku selling points

[17:07] <discord-raku-bot> <:(**@args, *%kwargs)> m: “hello world”.match /world/

[17:07] <discord-raku-bot> <stevied> being argumentative and bitching gets attention. that's why people write like that

[17:07] <discord-raku-bot> <:(**@args, *%kwargs)> wdym

[17:07] <discord-raku-bot> <:(**@args, *%kwargs)> m: “hello world”.match: /world/

[17:08] <discord-raku-bot> <stevied> few people read subtle, nuanced stuff

[17:08] <discord-raku-bot> <:(**@args, *%kwargs)> m: my $m = “hello world”.match(/world/);  say $m; 

[17:09] <discord-raku-bot> <stevied> he's gotta get outraged!!!!

[17:09] <discord-raku-bot> <:(**@args, *%kwargs)> m: my $m = “hello world”.match(/world/);  dd $m; 

[17:09] <discord-raku-bot> <Nemokosch> I'm outraged now 😂

[17:10] <discord-raku-bot> <:(**@args, *%kwargs)> raku works with iphone quotes smh

[17:10] <discord-raku-bot> <Nemokosch> xddd

[17:10] <discord-raku-bot> <Nemokosch> > ｢world｣

[17:10] <discord-raku-bot> <Nemokosch> 😼

[17:10] <discord-raku-bot> <:(**@args, *%kwargs)> m: say «hello world»

[17:11] <discord-raku-bot> <:(**@args, *%kwargs)> so is french quotes (with a pair of parens somehow)

[17:11] <discord-raku-bot> <stevied> https://cdn.discordapp.com/attachments/768511641758466088/1068579079982432417/image.png

[17:11] <discord-raku-bot> <stevied> pretty amazing

[17:13] <discord-raku-bot> <Nemokosch> because that's a list

[17:13] <discord-raku-bot> <Nahita> you triggered qw the word quoter

[17:13] <discord-raku-bot> <Nemokosch> so watch out

[17:13] <discord-raku-bot> <Nemokosch> « may be qqw; something very similar at least

[17:15] <discord-raku-bot> <:(**@args, *%kwargs)> m: my $” = 1; say $”;

[17:16] <discord-raku-bot> <:(**@args, *%kwargs)> anyhow why doesn’t raku have semicolon insertion tho 😭

[17:18] <discord-raku-bot> <Nahita> yeah but ::Int doesn't work :p

[17:18] <discord-raku-bot> <Nahita> in signatures

[17:18] <discord-raku-bot> <Nahita> m: ::.keys.say

[17:19] <discord-raku-bot> <Nemokosch> it "has"

[17:19] <discord-raku-bot> <Nahita> GLOBALish :p\p

[17:19] <discord-raku-bot> <Nemokosch> for blocks

[17:19] <discord-raku-bot> <Nemokosch> basically everything that looks like a block, needs the semicolon

[17:19] <discord-raku-bot> <Nemokosch> except... you are allowed to omit it

[17:20] <discord-raku-bot> <Nemokosch> this becomes apparent if you stack up your code on one line

[17:20] <discord-raku-bot> <Nemokosch> then it doesn't get "inserted" and suddenly you get an error

[17:20] <discord-raku-bot> <Nemokosch> m: class Foo { has $.bar; } my Foo $baz;

[17:20] <discord-raku-bot> <stevied> Yeah, I was wondering about that. looked weird

[17:21] <discord-raku-bot> <Nemokosch> @Nahita :: is, from what I know, generally a synonym of .WHO, the package lookup

[17:22] <discord-raku-bot> <Nemokosch> how that applies when nothing is in front, I don't know...

[17:22] <discord-raku-bot> <stevied> https://cdn.discordapp.com/attachments/768511641758466088/1068581811573243974/image.png

[17:22] <discord-raku-bot> <stevied> I can't get that to work

[17:24] <discord-raku-bot> <stevied> guess it's hallucinating

[17:26] <discord-raku-bot> <Nemokosch> it seems to me that the bare :: is MY.WHO verbosely

[17:26] <discord-raku-bot> <Nemokosch> aka MY::

[17:27] <discord-raku-bot> <Nemokosch> the example seems stupid

[17:27] <discord-raku-bot> <Nemokosch> it's not even using what Proxy is for

[17:29] <discord-raku-bot> <:(**@args, *%kwargs)> how to create a mutator method

[17:31] <discord-raku-bot> <:(**@args, *%kwargs)> m: class A {   method x {     $!x   }   method x=($v) {     $!x = $v   } }  my $a = A.new; $a.x = 5; $a.say;

[17:31] <discord-raku-bot> <Nemokosch> if you mean .= - everything can be such

[17:31] <discord-raku-bot> <:(**@args, *%kwargs)> this is not like ruby smh

[17:31] <discord-raku-bot> <Nemokosch> uh oh... well, lesson learned

[17:31] *** dakkar left
[17:31] <discord-raku-bot> <Nahita> you declare that attribute is rw and done with it

[17:31] <discord-raku-bot> <Nemokosch> .^, .= stuff is operators

[17:31] <discord-raku-bot> <stevied> https://cdn.discordapp.com/attachments/768511641758466088/1068584140473118810/image.png

[17:31] <discord-raku-bot> <Nahita> m: class A { has $.x is rw = 0 }; (my $a = A.new).x = 7; $a.x.say

[17:32] <discord-raku-bot> <stevied> I tihnk Raku coding jobs are safe for at least another 6 months.

[17:32] <discord-raku-bot> <Nemokosch> it's not a call with the name =foo, it's a call to foo using the .= operator

[17:33] <discord-raku-bot> <:(**@args, *%kwargs)> yeah but i want to define custom setters with validation among other shit

[17:33] <discord-raku-bot> <Nemokosch> just use the name of the property

[17:33] <discord-raku-bot> <:(**@args, *%kwargs)> can you elaborate

[17:34] <discord-raku-bot> <Nemokosch> $a.=wow is (almost) the same as ($a=$a.wow)

[17:35] <discord-raku-bot> <:(**@args, *%kwargs)> how about $a.wow=

[17:35] <discord-raku-bot> <Nemokosch> if you want to write a property setter, just use the name of your property as a method name

[17:35] <discord-raku-bot> <Nemokosch> properties are methods with a private variable to back them up

[17:35] <discord-raku-bot> <:(**@args, *%kwargs)> m: class A {   multi method x() {     $!x   }   multi method x($v) {     $!x = $v   } }  my $a = A.new; $a.x = 5; $a.say; ```

[17:36] <discord-raku-bot> <Nemokosch> has $.x

[17:36] <discord-raku-bot> <Nemokosch> mmm, wait

[17:36] <discord-raku-bot> <:(**@args, *%kwargs)> m: class A {   has $!x;   multi method x() {     $!x   }   multi method x($v) {     $!x = $v   } }  my $a = A.new; $a.x = 5; say $a.x; 

[17:36] <discord-raku-bot> <:(**@args, *%kwargs)> m: class A {   has $!x is rw;   multi method x() {     $!x   }   multi method x($v) {     $!x = $v   } }  my $a = A.new; $a.x = 5; say $a.x; 

[17:36] <discord-raku-bot> <:(**@args, *%kwargs)> what

[17:36] <discord-raku-bot> <Nemokosch> the error is ugly

[17:37] <discord-raku-bot> <Nemokosch> $.x it should be

[17:37] <discord-raku-bot> <Nemokosch> and I'm not sure the call will be right

[17:37] <discord-raku-bot> <Nemokosch> let's try one thing at once

[17:37] <discord-raku-bot> <Nemokosch> m:  class A {   has $.x is rw;   multi method x() {     $!x   }   multi method x($v) {     $!x = $v   } }  my $a = A.new; $a.x = 5; say $a.x; 

[17:37] <discord-raku-bot> <Nemokosch> the error is ugly

[17:38] <discord-raku-bot> <Nemokosch> not helpful at all

[17:38] <discord-raku-bot> <:(**@args, *%kwargs)> how do i make a mutable object then?

[17:38] <discord-raku-bot> <Nemokosch> btw, do you not want to voice chat or something? either now or in general?

[17:38] <discord-raku-bot> <Nemokosch> easier to communicate and stuff

[17:38] <discord-raku-bot> <Nemokosch> tbh even if only I talk

[17:39] <discord-raku-bot> <Nahita> why is it saying uselesssss

[17:39] <discord-raku-bot> <Nemokosch> anyway

[17:39] <discord-raku-bot> <Nemokosch> you don't need a multi, you don't need arguments

[17:39] <discord-raku-bot> <Nemokosch> you need to return a container

[17:39] <discord-raku-bot> <Nemokosch> and that will be written

[17:40] <discord-raku-bot> <Nemokosch> how that helps with preconditions... don't ask me lol

[17:40] <discord-raku-bot> <:(**@args, *%kwargs)> m:  class A {   has $!x is rw;   multi method x() {     $!x   } }  my $a = A.new; $a.x = 5; say $a.x; 

[17:40] <discord-raku-bot> <Nemokosch> m:  class A {   has $.x is rw;   method x() {     $!x   } }  my $a = A.new; $a.x = 5; say $a.x; 

[17:40] <discord-raku-bot> <Nemokosch> okay this really tests the patience

[17:41] <discord-raku-bot> <Nemokosch> it's not initialized...

[17:41] <discord-raku-bot> <Nemokosch> that was the problem all along, really?

[17:41] <discord-raku-bot> <:(**@args, *%kwargs)> m:  class A {   has $.x is rw;   method x() {     $!x   } }  my $a = A.new(1); $a.x = 5; say $a.x; 

[17:41] <discord-raku-bot> <Nemokosch> m:  class A {   has $.x is rw;   method x() {     $!x   } }  my $a = A.new: x => 'bruh?'; $a.x = 5; say $a.x; 

[17:42] <discord-raku-bot> <Nemokosch> oh okay...

[17:42] <discord-raku-bot> <Nemokosch> is rw on the method

[17:42] <discord-raku-bot> <stevied> oh, wow, just realized you can click on the code and it will expand into multiple lines

[17:42] <discord-raku-bot> <:(**@args, *%kwargs)> maybe $(‘bruh?’)

[17:42] <discord-raku-bot> <Nemokosch> not sure it would create a container

[17:42] <discord-raku-bot> <Nemokosch>  class A {   has $.x is rw;   method x() is rw {     $!x   } }  my $a = A.new: x => 'bruh?'; $a.x = 5; say $a.x; 

[17:42] <discord-raku-bot> <Nemokosch> m:  class A {   has $.x is rw;   method x() is rw {     $!x   } }  my $a = A.new: x => 'bruh?'; $a.x = 5; say $a.x; 

[17:43] <discord-raku-bot> <Nemokosch> FINALLLY

[17:43] <discord-raku-bot> <Nemokosch> is rw on the method!

[17:43] <discord-raku-bot> <:(**@args, *%kwargs)> you have to declare its rw?

[17:43] <discord-raku-bot> <stevied> rw on the method returns a container

[17:43] <discord-raku-bot> <stevied> have to do return-rw

[17:43] <discord-raku-bot> <:(**@args, *%kwargs)> still how can i do validation by that

[17:44] <discord-raku-bot> <Nemokosch> that's a really good question, I don't know xD

[17:44] <discord-raku-bot> <Nemokosch> I mean, apart from Proxy boilerplate

[17:45] <discord-raku-bot> <Nemokosch> > The declared multi method notes overrides the auto-generated methods implicit in the declaration of $.notes, using a different signature for reading and writing.

[17:45] <discord-raku-bot> <Nemokosch> you were right @:(**@args, *%kwargs)

[17:45] <discord-raku-bot> <Nemokosch> it can take an argument

[17:45] <discord-raku-bot> <Nemokosch> and then it will be a setter

[17:46] <discord-raku-bot> <Nemokosch> so this was probably close

[17:46] <discord-raku-bot> <Nemokosch> this was even closer

[17:47] <discord-raku-bot> <:(**@args, *%kwargs)> m:  class A {   has $.x is rw;   multi method x() is rw {     $!x   }   multi method x($v) is rw {     say ‘hi’;     $!x = $v;   } }  my $a = A.new: x => 'bruh?'; $a.x = 5; say $a.x; 

[17:47] <discord-raku-bot> <:(**@args, *%kwargs)> it doesn’t say hi

[17:47] <discord-raku-bot> <Nahita> wut you don't need  method x() is rw {     $!x   } there

[17:47] <discord-raku-bot> <Nahita> no?

[17:47] <discord-raku-bot> <Nemokosch> well, it worked with it and not without...

[17:47] <discord-raku-bot> <Nahita> uh

[17:48] <discord-raku-bot> <Nahita> m:class A {   has $.x is rw; }  my $a = A.new: x => 'bruh?'; $a.x = 5; say $a.x; 

[17:48] <discord-raku-bot> <Nemokosch> oh you meant that

[17:48] <discord-raku-bot> <Nemokosch> we were trying to write something that resembles hand-written setters

[17:48] <discord-raku-bot> <:(**@args, *%kwargs)> m:  class A {   has $.x is rw;   multi method x() {     $!x   }   multi method x($v) {     say ‘hi’;     $!x = $v;   } }  my $a = A.new: x => 'bruh?'; $a.x = 5; say $a.x; 

[17:48] <discord-raku-bot> <Nahita> ok

[17:49] <discord-raku-bot> <:(**@args, *%kwargs)> raku cannot make custom setters without Proxy 😭

[17:49] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1068588511587995719/image.png

[17:49] <discord-raku-bot> <Nemokosch> from the doc site

[17:49] <discord-raku-bot> <Nahita> it says "you wrote a method call it" :y

[17:50] <discord-raku-bot> <Nemokosch> close to https://docs.raku.org/language/objects#Methods

[17:50] <discord-raku-bot> <:(**@args, *%kwargs)> its not the .notes= syntax but whatever

[17:50] <discord-raku-bot> <Nemokosch> oh you are right

[17:50] <discord-raku-bot> <Nemokosch> lmao

[17:50] <discord-raku-bot> <:(**@args, *%kwargs)> m:  class A {   has $.x is rw;   multi method x() {     $!x   }   multi method x($v) {     say ‘hi’;     $!x = $v;   } }  my $a = A.new: x => 'bruh?'; $a.x: 5; say $a.x; 

[17:50] <discord-raku-bot> <Nemokosch> I didn't even check the syntax 😅

[17:51] <discord-raku-bot> <Nahita> better than $a.x = 5 ngl

[17:51] <discord-raku-bot> <:(**@args, *%kwargs)> best way to make setters for now 😔

[17:51] <discord-raku-bot> <:(**@args, *%kwargs)> why

[17:51] <discord-raku-bot> <Nahita> lookin' good

[17:51] <discord-raku-bot> <Nemokosch> perhaps the assignment really does need your own container

[17:52] <discord-raku-bot> <:(**@args, *%kwargs)>  class PositiveNumbersOnly is Scalar { ... } 

[17:52] <discord-raku-bot> <Nemokosch> did you find this somewhere?

[17:53] <discord-raku-bot> <:(**@args, *%kwargs)> no i made it up

[17:53] <discord-raku-bot> <Nemokosch> it could even be legit lol

[17:53] <discord-raku-bot> <Nemokosch> > Overriding the default auto-generated accessor means it is no longer available to provide a mutable container on return for an assignment. A method call is the preferred approach to adding computation and logic to the update of an attribute. Many modern languages can update an attribute by overloading assignment with a “setter” method. While Raku can overload the assignment operator for this purpose

[17:53] <discord-raku-bot> with a Proxy object, overloading assignment to set attributes with complex logic is currently discouraged as weaker object oriented design.

[17:54] <discord-raku-bot> <:(**@args, *%kwargs)> hmm so raku encouraged writing java-style a.setX(42) lol

[17:55] <discord-raku-bot> <Nemokosch> well, kiiindof

[17:55] <discord-raku-bot> <Nemokosch> don't forget that you wouldn't be writing stuff like this AS LONG AS you don't want to rely on the content of the rhs

[17:55] <discord-raku-bot> <:(**@args, *%kwargs)> tho raku is less verbose $a.x: 42

[17:56] <discord-raku-bot> <Nemokosch> if you only want to make it writeable, you don't need to write much

[17:56] <discord-raku-bot> <Nemokosch> if you want to perform some event that doesn't rely on the rhs, you also don't need it

[17:56] <discord-raku-bot> <Nemokosch> welp, that's "per access" but still

[17:56] <discord-raku-bot> <:(**@args, *%kwargs)> can just use is rw at that cass

[17:57] <discord-raku-bot> <Nemokosch> I do value the abstraction over the assignment - but maybe if it's really beneficial, one would actually write a fully-blown Proxy 😆

[17:59] <discord-raku-bot> <:(**@args, *%kwargs)> how do i access all the instance variables

[17:59] <discord-raku-bot> <:(**@args, *%kwargs)> as a hash or a package

[18:02] <discord-raku-bot> <Nemokosch> all of what?

[18:02] <discord-raku-bot> <Nemokosch> what is the scope where it's "all"?

[18:02] <discord-raku-bot> <:(**@args, *%kwargs)> all instance variables of an object

[18:04] <discord-raku-bot> <Nemokosch> hm, I don't think that's stored...

[18:05] <discord-raku-bot> <Nemokosch> if it is, it really must be in the metamodel, again

[18:05] <discord-raku-bot> <Nemokosch> instances of one type share the same metaobject

[18:05] <discord-raku-bot> <Nemokosch> maybe that metaobject knows what it created?

[18:05] <discord-raku-bot> <Nemokosch> still sounds costly

[18:06] <discord-raku-bot> <Nemokosch> it's rather the other way around: the instances know the metaobject that could build them

[18:07] <discord-raku-bot> <:(**@args, *%kwargs)> what is the difference between a metaobject and a class

[18:11] <discord-raku-bot> <Nemokosch> hm, how to put it

[18:11] <discord-raku-bot> <Nemokosch> I'd say a class in itself is not data

[18:11] <discord-raku-bot> <Nemokosch> it's just a syntactic structure of the language

[18:11] <discord-raku-bot> <Nemokosch> however, there is an object that takes care of everything we need to know about that class

[18:11] <discord-raku-bot> <Nemokosch> that's the metaobject

[18:13] <discord-raku-bot> <:(**@args, *%kwargs)> so classes themselves are not objects

[18:13] <discord-raku-bot> <Nemokosch> right, the object of the class (and role, and whatever I cannot quickly think of), is the metaobject

[18:14] <discord-raku-bot> <Nemokosch> the metaclass is the class of the metaobject, we might call it the "class of classes"

[18:14] <discord-raku-bot> <Nemokosch> really just a matter of terminology

[18:14] <discord-raku-bot> <Nemokosch> it's called ClassHOW, by the way

[18:15] <discord-raku-bot> <Nemokosch> on the top of the metamodel, you have the omniscient type: KnowHOW

[18:15] <discord-raku-bot> <:(**@args, *%kwargs)> wait the type objects are actually not metaobjects

[18:15] <discord-raku-bot> <:(**@args, *%kwargs)> they are just “type objects”

[18:16] <discord-raku-bot> <Nemokosch> yes

[18:16] <discord-raku-bot> <Nemokosch> they are normal objects

[18:16] <discord-raku-bot> <Nemokosch> just "empty" in some sense

[18:16] <discord-raku-bot> <:(**@args, *%kwargs)> representing undefined instances

[18:16] <discord-raku-bot> <Nemokosch> they are "dummy objects", we could say

[18:17] <discord-raku-bot> <Nemokosch> a dummy that can stand where the type is required

[18:17] <discord-raku-bot> <Nemokosch> the interesting thing is :T, that trips me up

[18:18] <discord-raku-bot> <:(**@args, *%kwargs)> ClassHOW is the type of raku

[18:18] <discord-raku-bot> <Nemokosch> what is the type of type in Python?

[18:18] <discord-raku-bot> <Nemokosch> None?

[18:18] <discord-raku-bot> <:(**@args, *%kwargs)> type

[18:19] <discord-raku-bot> <:(**@args, *%kwargs)> it is also a class, so an instance of type

[18:20] <discord-raku-bot> <Nemokosch> so the structure is flatter

[18:21] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1068596683316936714/image.png

[18:23] <discord-raku-bot> <:(**@args, *%kwargs)> what does A.^compose do

[18:24] <discord-raku-bot> <Nemokosch> I don't know...

[18:26] <discord-raku-bot> <:(**@args, *%kwargs)> > A call to compose brings the metaobject and thus the class it represents into a fully functional state, so if you construct or modify a class, you must call the compose method before working with the class.

[18:27] <discord-raku-bot> <:(**@args, *%kwargs)> basically commits the changes in metaobject

[18:55] <discord-raku-bot> <gfldex> @:(**@args, %kwargs) please note, that in Raku the typesystem is not nailed down and there are `` ways to create objects, including type objects. see: https://irclogs.raku.org/raku-beginner/2021-10-18.html#18:25-0001 and https://gfldex.wordpress.com/2021/08/17/most-fancy/

[20:27] <discord-raku-bot> <p6steve> ++ (nevertheless writing a FETCH/STORE Proxy only 4 lines https://docs.raku.org/type/Proxy)

[21:55] *** jgaz left
[21:55] <discord-raku-bot> <stevied> m: class Box {     has $data;      method new($d = '') {         self.bless(data => $d);     } }  my $box = Box.new('hi'); say $box;

[21:56] <discord-raku-bot> <stevied> oope disregard last

[21:57] <discord-raku-bot> <stevied> m: class Box {     has $data;      method new($d = '') {         self.bless(data => $d);     }      method data() {         return $!data;     } }  my $box = Box.new('hi'); say $box.data;

[21:58] <discord-raku-bot> <stevied> why don't I get "hi" back out of that code?

[21:58] <discord-raku-bot> <Nemokosch> is it intentional that you have $data instead of $!data? iirc that shouldn't be a problem but who knows

[21:58] <discord-raku-bot> <Nemokosch> kind of a controversial feature

[21:59] <discord-raku-bot> <stevied> from what I just read, the two are equivalent (unless I misunderstood what I read)

[21:59] <discord-raku-bot> <Nemokosch> it creates an alias or something

[22:00] <discord-raku-bot> <stevied> but even if I do has $!data; I get the same result

[22:00] <discord-raku-bot> <Nemokosch> is this the intended use case of bless?

[22:01] <discord-raku-bot> <stevied> well, I guess that's what I'm trying to figure out. In my mind, it seems like it should work. I don't know what it doesn't.

[22:03] <discord-raku-bot> <Nemokosch> I think this is written down in details on the doc page but tbh I don't really want to read it back for someone else again...

[22:04] <discord-raku-bot> <Nemokosch> there is a whole list of what is executed when

[22:06] <discord-raku-bot> <stevied> not sure what you mean. but this is from the docs:   class Point {     has $.x;     has $.y;     method new($x, $y) {         self.bless(:$x, :$y);     } } 

[22:06] <discord-raku-bot> <stevied> mo code is no different except for the $! instead of $.

[22:07] <discord-raku-bot> <stevied> gotta go eat

[22:08] <discord-raku-bot> <Nemokosch> that's quite a difference but really, first, try to find the page that describes the object construction

[22:08] <discord-raku-bot> <Nemokosch> I know that it exists but eventually you'll have to read it anyway

[22:44] *** ab5tract left
[22:48] *** ab5tract joined
[23:20] *** ab5tract left
