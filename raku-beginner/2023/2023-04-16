[00:37] *** Heptite left
[01:44] *** teatwo left
[02:11] *** teatime left
[02:11] *** teatime joined
[02:53] *** teatwo joined
[02:56] *** teatime left
[08:01] *** samebchase left
[08:30] *** ab5tract left
[09:01] *** snonux left
[09:26] *** snonux joined
[11:21] *** MasterDuke left
[13:11] <guifa> xt is one convention.  I've been categorizing my types of tests in some of my modules.  t/ for installation tests, t-perf/ for internal performance tests that aren't testing accuracy, etc

[13:32] <discord-raku-bot> <Anton Antonov> @guifa I started using “xt/” more extensively after watching your presentation in the Perl&Raku conference in Texas. (I think.)

[13:33] <discord-raku-bot> <Anton Antonov> I forgot or missed “t-perf”.

[13:34] <discord-raku-bot> <Anton Antonov> Basically, for the module “WWW::OpenAI” all tests are in “xt/” — not “t/” — because it is too presumptions to think that users should spent money on running tests.

[13:39] <guifa> I read xt as "exten[ded|sive] tests", so basically an entire roast suite

[13:41] <guifa> Using t-perf, etc, is just my own personal convention.  Automated suites should ignore them since they're only expecting t or xt

[14:15] *** habere-et-disper joined
[14:18] *** teatwo left
[14:19] *** teatwo joined
[14:40] *** habere-et-disper left
[15:23] *** Heptite joined
[16:18] <discord-raku-bot> <Anton Antonov> 👍

[16:24] *** deadmarshal_ left
[16:37] *** snonux left
[16:37] *** deadmarshal_ joined
[16:59] *** habere-et-disper joined
[17:31] *** habere-et-disper left
[17:42] *** snonux joined
[18:31] *** MasterDuke joined
[19:13] *** habere-et-disper joined
[19:19] *** deoac joined
[19:20] *** habere-et-disper left
[20:22] <deoac> I am creating a module, with a proper META6.json file.  Yet, $?DISTRIBUTION is not defined?  Why would that be?

[20:41] <discord-raku-bot> <Nemokosch> hm, in a rakumod file?

[21:35] <deoac> No, it's in the executable that uses the rakumod file.  The executable is in bin/

[21:49] <discord-raku-bot> <Nemokosch> I can imagine that doesn't know $?DISTRIBUTION

[21:53] <discord-raku-bot> <Nemokosch> after all, $?DISTRIBUTION is a compile-time variable - and mere raku files don't get precompiled

[22:35] <deoac> Ah, I see.  Thank you.

[22:36] <deoac> How would I specify a return value which is a Liist of two Rats?

[22:40] <discord-raku-bot> <Nemokosch> in what sense?

[22:52] <deoac> sub foo ( --> ???) { my \@retval = (1, 2); }

[23:02] <guifa> subset TwoItemList of List where .elems == 2; sub foo (\x --> TwoItemList) { return x }; say foo (1,2); say foo (1,2,3);

[23:02] <guifa> m: subset TwoItemList of List where .elems == 2; sub foo (\x --> TwoItemList) { return x }; say foo (1,2); say foo (1,2,3);

[23:02] <camelia> rakudo-moar 2d66116b6: OUTPUT: «(1 2)␤Type check failed for return value; expected TwoItemList but got List ((1, 2, 3))␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:02] <guifa> notice the first one works because (1,2) is a two item list, but (1,2,3) doesn't

[23:07] <deoac>  Ah, the power of subsets.  Thank you.

[23:07] *** Manifest0 left
[23:09] <guifa> I believe the intention is for return types to eventually allow where clauses, but they are NYI

[23:10] <guifa> m: sub foo (-->Int where * > 1) { return 5 }

[23:10] <camelia> rakudo-moar 2d66116b6: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Cannot do non-typename cases of type_constraint yet␤at <tmp>:1␤------> sub foo (-->Int where * > 1⏏) { return 5 }␤»

