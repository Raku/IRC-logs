[00:31] *** nicole joined
[02:24] *** teatime left
[02:24] *** teatime joined
[02:35] *** teatwo joined
[02:39] *** teatime left
[03:54] *** MasterDuke left
[07:48] *** dakkar joined
[12:52] <Tirifto> Hello! Is there a way I can ask a regex to match the whole string, when the regex itself does not start and end with ^ and $, respectively? I thought of something like /^<$regex>$/, but is there perhaps a more ‘direct’ way?

[12:57] <lizmat> "foo" ~~ / f / && $/.from == 0   would cover the start position

[12:58] <lizmat> "foo" ~~ / f / && $/.from == 0  && $/.pos == "foo".chars

[13:00] <Tirifto> Oh!

[13:03] <Tirifto> Thank you, lizmat! I didn’t realise those were available. :D Although the docs say that the output of .pos is unspecified; should I use .to instead?

[13:04] <lizmat> yeah, probably should use .to  :-)

[13:11] <lizmat> m: sub infix:<~=~>($a, $b) { $a.match($b); $/.from == 0 && $/.to == $a.chars }; say "foo" ~=~ / foo /

[13:11] <camelia> rakudo-moar d3821c821: OUTPUT: «True␤»

[13:11] <lizmat> m: sub infix:<~=~>($a, $b) { $a.match($b); $/.from == 0 && $/.to == $a.chars }; say "foo" ~=~ / oo /

[13:11] <camelia> rakudo-moar d3821c821: OUTPUT: «False␤»

[13:12] <lizmat> another approach:

[13:12] <lizmat> m: sub infix:<~=~>($a, $b) { $a.match($b); $/.from == 0 && $/.to == $a.chars ?? $/ !! Nil }; say "foo" ~=~ / foo /

[13:12] <camelia> rakudo-moar d3821c821: OUTPUT: «｢foo｣␤»

[13:12] <lizmat> m: sub infix:<~=~>($a, $b) { $a.match($b); $/.from == 0 && $/.to == $a.chars ?? $/ !! Nil }; say "foo" ~=~ / oo /

[13:12] <camelia> rakudo-moar d3821c821: OUTPUT: «Nil␤»

[13:17] <Tirifto> Oh, that’s a nice idea! And it seems to fit in very well.

[13:19] <lizmat> from a performance point of view, it may actually be better to use / ^ <$regex> $ /

[13:19] <lizmat> with a small needle and a large haystack, the regex engine could potentially do a lot of work

[13:20] <lizmat> whereas a ^ would allow it to stop immediately if the first character didn't match

[13:20] <lizmat> so YMMV

[13:30] <Tirifto> An excellent point, too. `o`

[13:30] <lizmat> m: m: sub infix:<~=~>($a, $b) { $a.match(/ ^ <$b> $/) }; say "foo" ~=~ / oo /   # maybe better

[13:30] <camelia> rakudo-moar d3821c821: OUTPUT: «Nil␤»

[13:30] <lizmat> m: m: sub infix:<~=~>($a, $b) { $a.match(/ ^ <$b> $/) }; say "foo" ~=~ / foo /   # maybe better

[13:30] <camelia> rakudo-moar d3821c821: OUTPUT: «｢foo｣␤»

[14:24] *** tea3po joined
[14:27] *** teatwo left
[15:19] *** Guest823 joined
[15:21] *** Guest823 left
[15:22] *** Guest152 joined
[15:23] *** Guest152 left
[15:25] *** Guest6440 joined
[15:27] *** Guest6440 left
[15:29] *** Guest3759 joined
[15:34] *** Guest3759 left
[16:45] *** dakkar left
[20:53] *** p6steve_ left
