[00:50] *** jaguart joined
[01:47] *** MasterDuke joined
[02:16] *** tea3po joined
[02:17] *** explorer left
[02:20] *** teatwo left
[02:33] *** MasterDuke left
[03:11] *** deoac joined
[03:12] <deoac> In this program, why does is the error reported as being on line 1?

[03:12] <deoac> #! /usr/bin/env raku

[03:12] <deoac> use v6.d;

[03:12] <deoac> sub MAIN (Str $? where .lc eq 'test', Bool :$test) {

[03:12] <deoac>     say 'Hello';

[03:12] <deoac> }

[03:12] <deoac> Use of uninitialized value of type Str in string context.

[03:12] <deoac> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[03:12] <deoac>   in block <unit> at mail.raku line 1

[03:12] <deoac> Use of uninitialized value of type Str in string context.

[03:12] <deoac> Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.

[03:12] <deoac>   in block <unit> at mail.raku line 1

[03:12] <deoac> Usage:

[03:12] <deoac>   mail.raku [--test] [<Str where { ... }>]

[03:13] <deoac> I understand the error, but not the 'line 1' part

[03:23] *** Heptite left
[04:17] *** tea3po left
[04:17] *** tea3po joined
[04:28] *** tea3po left
[04:29] *** tea3po joined
[05:22] *** jaguart left
[06:40] *** jaguart joined
[06:44] *** jaguart left
[07:23] <discord-raku-bot> <Nemokosch> What line number do you expect?

[09:22] <discord-raku-bot> <rcmlz> Hello, I have a questing related to typing I can not solve.

[09:22] <discord-raku-bot> <rcmlz> m: my @not_typed = (     ("A", "B"),     ("X",),     () );  my @list_of_list of List = (     ("A", "B"),     ("X",),     () );

[09:22] <discord-raku-bot> <Raku eval>  

[09:23] <discord-raku-bot> <rcmlz> works fine, but I can not workout how I can fix not the type of the inner list elements

[09:24] <discord-raku-bot> <rcmlz> m:  my constant Universum = "A".."Z"; my @list_of_list_of_elements_of_universum of List of Universum = (     ("A", "B"),     ("X",),     () );

[09:24] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku List cannot be parameterized at /home/glot/main.raku:2 ------> ements_of_universum of List of Universum⏏ = ( 

[09:25] <discord-raku-bot> <rcmlz> Is there a way in Raku to also type data structures like Array of Arrays or List of Lists? Thank you.

[09:27] <discord-raku-bot> <Nemokosch> well, as it says, List cannot be parameterized. Array can.

[09:30] <discord-raku-bot> <Nemokosch> I'm not sure how much this is an official stance but List is much like just a skeleton type, even though it's not an abstract class

[09:31] <discord-raku-bot> <Nemokosch> the same metadata that gives Array the mutability for all items, gives the typing info as well

[09:32] <discord-raku-bot> <Nemokosch> having said that, I'm not sure it would work with Array because type deduction doesn't really happen on literals

[09:36] <discord-raku-bot> <Nemokosch> and Universum is really just a Range value, not a type. However, these pieces can be put together using custom runtime checks

[09:41] <discord-raku-bot> <rcmlz> Thanky ou @Nemokosch for the hint. I am nearly there

[09:41] <discord-raku-bot> <rcmlz> m:  my subset Universum of Int where {$_ > 1};  # two steps my @list_of_elements_of_universum1 of Universum = [2, 2]; my @list_of_elements_of_universum2 of Universum = [3, 3]; my @list_of_lists_of_elements_of_universum1 of Array of Universum; push @list_of_lists_of_elements_of_universum1,         @list_of_elements_of_universum1, @list_of_elements_of_universum2;  # single steps my

[09:41] <discord-raku-bot> @list_of_lists_of_elements_of_universum2 of Array of Universum = [     @list_of_elements_of_universum1,     @list_of_elements_of_universum2 ];  # single steps - manual entry my @list_of_lists_of_elements_of_universum3 of Array of Universum = [     [2, 2],     [3, 3] ];

[09:41] <discord-raku-bot> <Raku eval>  Exit code: 1 Type check failed in assignment to @list_of_lists_of_elements_of_universum3; expected Array[Universum] but got Array ([2, 2])   in block <unit> at main.raku line 17  

[09:42] <discord-raku-bot> <Nemokosch> m:  my constant Universum = "A".."Z"; subset InUniversum of Str where Universum; subset ListOfListOfUniversum of List where { .all ~~ List && .all.all ~~ InUniversum }; my @list_of_list_of_elements_of_universum is ListOfListOfUniversum = (     ("A", "B"),     ("X",),     () ); 

[09:42] <discord-raku-bot> <Raku eval>  Exit code: 1 You cannot create an instance of this type (ListOfListOfUniversum)   in block <unit> at main.raku line 4  

[09:43] <discord-raku-bot> <Nemokosch> bruh

[09:43] <discord-raku-bot> <Nemokosch> I was just trying to make a constraint for it 😩

[09:43] <discord-raku-bot> <rcmlz> The last step is not working - I like to use this sort of direct specification of an array of arrays in tests, so would be handy to be able to do it directly

[09:43] <discord-raku-bot> <Nemokosch> ^

[09:44] <discord-raku-bot> <Nemokosch> that is really just an Array with two arbitrary values for all the compiler cares

[09:46] <discord-raku-bot> <rcmlz> ok, then I will do that in two steps. I had the hope that the compiler works out that e.g. [2, 2] is an array of elements of the universum.  # single steps - manual entry - failing my @list_of_lists_of_elements_of_universum3 of Array of Universum = [     [2, 2],     [3, 3] ];

[09:47] <discord-raku-bot> <rcmlz> Thank you for the help.

[09:52] <discord-raku-bot> <Nemokosch>  my constant Universum = "A".."Z"; subset ListOfListOfUniversum of List where { .all ~~ List && .all.all (elem) Universum };  this constraint seems to work, it's kinda strict even

[10:08] <discord-raku-bot> <rcmlz> Thank you. I guess I will go for the simpler 2-step-Array-approach.

[10:15] <discord-raku-bot> <Nemokosch> the assignments perform the type checks, from what I know

[10:15] <discord-raku-bot> <Nemokosch> however, sadly they go top-down

[10:15] <discord-raku-bot> <Nemokosch> without recursing

[10:16] <discord-raku-bot> <Nemokosch> so "it says Array[Int] but all I see is a literal [1, 2, 3] - nah, that won't cut it"

[10:29] *** habere-et-disper joined
[10:43] <habere-et-disper> How do I seach for a relevant method on the REPL? If I try to grep over what's available I get a mess:

[10:43] <habere-et-disper> m: [].^methods.grep( 'lazy' )

[10:43] <camelia> rakudo-moar ae7a219c9: OUTPUT: «Method object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Method object coerced to string (please use .gist or .raku to do that)␤  in block <unit> at <tmp> line 1␤Method object coerced to string (…»

[10:45] <habere-et-disper> Okay this seems better:

[10:45] <habere-et-disper> m: [].^methods.gist.words.grep( / lazy / )

[10:45] <camelia> rakudo-moar ae7a219c9: ( no output )

[10:45] <habere-et-disper> m: [].^methods.gist.words.grep( / lazy / ).say

[10:45] <camelia> rakudo-moar ae7a219c9: OUTPUT: «(is-lazy lazy-if lazy)␤»

[10:51] <lizmat> ^methods.map(*.name)....

[10:52] <lizmat> ^methods>>.name

[10:58] <habere-et-disper> Thanks lizmat ! I just discovered that you can chain the sequence operator ! So cool:

[10:58] <habere-et-disper> m: ( 0 ... 10 ... 1 ).say

[10:58] <camelia> rakudo-moar ae7a219c9: OUTPUT: «(0 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1)␤»

[11:10] *** Heptite joined
[11:41] *** Heptite left
[11:48] *** Heptite joined
[11:58] *** habere-et-disper left
[12:58] *** habere-et-disper joined
[13:33] *** lizmat left
[13:46] *** habere-et-disper left
[14:04] *** lizmat joined
[14:05] *** Heptite left
[14:14] *** tea3po left
[14:14] *** tea3po joined
[14:15] *** tea3po left
[14:15] *** tea3po joined
[14:16] *** tea3po left
[14:16] *** tea3po joined
[14:17] *** tea3po left
[14:17] *** tea3po joined
[14:23] *** tea3po left
[14:24] *** tea3po joined
[14:38] *** deoac left
[15:19] *** Heptite joined
[19:40] *** deoac joined
[20:47] *** deoac left
[21:48] <gfldex> m: say "▁" ... "█";

[21:48] <camelia> rakudo-moar 2e3690bda: OUTPUT: «(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)␤»

[21:49] <gfldex> m: say '🂡' ... '🃞';

[21:49] <camelia> rakudo-moar 2e3690bda: OUTPUT: «(🂡 🂢 🂣 🂤 🂥 🂦 🂧 🂨 🂩 🂪 🂫 🂬 🂭 🂮 🂯 🂰 🂱 🂲 🂳 🂴 🂵 🂶 🂷 🂸 🂹 🂺 🂻 🂼 🂽 🂾 🂿 🃀 🃁 🃂 🃃 🃄 🃅 🃆 🃇 🃈 🃉 🃊 🃋 🃌 🃍 🃎 🃏 🃐 🃑 🃒 …»

[21:50] <gfldex> m: say ('🂡' ... '🃞').pick; # :->

[21:50] <camelia> rakudo-moar 2e3690bda: OUTPUT: «🃌␤»

[21:54] <gfldex> Chaining infix:<...> is specced in S03-sequence/misc.t and thus an ENODOC. In fact, that operator deserves it's own website.

[22:00] <discord-raku-bot> <Nemokosch> or alternatively, it deserves to be simplified to a level that mere mortals can comprehend

[22:02] <discord-raku-bot> <Nemokosch> m: say 3 ... ^6

[22:02] <discord-raku-bot> <Raku eval>  (3 2 1 0 1 2 3 4 5) 

[22:42] *** Heptite left
