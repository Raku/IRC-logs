[00:04] *** ab5tract left
[00:44] *** stevied__ joined
[00:44] *** stevied_test left
[01:11] *** Manifest0 left
[01:17] *** stevied__ left
[01:20] *** stevied_test joined
[02:10] <discord-raku-bot> <el gatito (** advocate)> m: 3; say $_ * $_; 

[02:10] <discord-raku-bot> <Raku eval>  0  WARNINGS for /home/glot/main.raku: Useless use of constant integer 3 in sink context (line 1) Use of uninitialized value of type Any in numeric context   in block <unit> at main.raku line 2 Use of uninitialized value of type Any in numeric context   in block <unit> at main.raku line 2  

[02:20] *** NemokoschKiwi joined
[02:21] *** NemokoschKiwi left
[02:55] <discord-raku-bot> <el gatito (** advocate)> m: my @a is Seq = 0..Inf; 

[02:55] <discord-raku-bot> <Raku eval>  Exit code: 1 Died with X::Assignment::RO   in block <unit> at main.raku line 1   

[02:55] <discord-raku-bot> <el gatito (** advocate)> what

[02:55] <discord-raku-bot> <el gatito (** advocate)> m: my @a = 0..Inf; ```

[02:55] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Bogus statement at /home/glot/main.raku:2 ------> my @a = 0..Inf;‚èè<EOL>     expecting any of:         prefix         term  

[02:55] <discord-raku-bot> <el gatito (** advocate)> m: my @a = 0..Inf; 

[02:55] <discord-raku-bot> <Raku eval>   

[02:58] <discord-raku-bot> <Nemokosch> You cannot store a Seq i guess

[02:58] <discord-raku-bot> <Nemokosch> Into*

[03:18] <discord-raku-bot> <el gatito (** advocate)> m: my @a = 0..Inf; say @a; 

[03:18] <discord-raku-bot> <Raku eval>  [...]  

[03:18] <discord-raku-bot> <el gatito (** advocate)> lazy arrays :cameliathink:

[03:35] *** kjp left
[04:34] *** kjp joined
[08:59] *** snonux joined
[08:59] *** rantanplan joined
[09:06] *** snonux left
[09:07] *** rantanplan left
[09:21] *** rantanplan joined
[09:22] *** snonux joined
[09:45] <lizmat> sure you can store a Seq

[09:47] <lizmat> m: my $s := ^10 .Seq;  .say for $s

[09:47] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[09:47] *** Manifest0 joined
[09:47] <lizmat> m: my $s := ^10 .Seq;  .say for $s.map: * + 1

[09:47] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[09:47] <lizmat> a large part of rak is built on this

[09:49] <discord-raku-bot> <el gatito (** advocate)> he means store a Seq in @

[09:50] <lizmat> ah...  ok

[09:50] <lizmat> m: my @a = ^Inf; say @a[1..10]

[09:50] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´(1 2 3 4 5 6 7 8 9 10)‚ê§¬ª

[09:51] <lizmat> m: my @a = ^Inf; say @a.elems

[09:51] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´Cannot .elems a lazy list‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:51] <discord-raku-bot> <el gatito (** advocate)> why does %() return a Hash instead of a Map

[09:59] <lizmat> I would guess to allow for:

[09:59] <lizmat> m: my $a := %(); $a<foo> = 42; dd $a

[09:59] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´{:foo(42)}‚ê§¬ª

[10:00] <lizmat> although arguably you wouldn't need to do that

[10:00] <lizmat> m: my $a; $a<foo> = 42; dd $a

[10:00] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´Hash $a = ${:foo(42)}‚ê§¬ª

[10:09] *** ab5tract joined
[10:15] <discord-raku-bot> <el gatito (** advocate)> can just my $a := {}? i asked that question due to the apparent asymmetry of @() coercing to an immutable type while %() coerces to mutable type

[10:15] <discord-raku-bot> <Nemokosch> Hello

[10:15] <discord-raku-bot> <el gatito (** advocate)> hi

[10:17] <discord-raku-bot> <Nemokosch> Oh I meant Seq.STORE was breaking down, not sure if in general or only when laziness is involved

[10:18] <discord-raku-bot> <Nemokosch> Does @() set a List by default?

[10:18] <discord-raku-bot> <Nemokosch> m: dd @()

[10:18] <discord-raku-bot> <Raku eval>  ()  

[10:18] <discord-raku-bot> <Nemokosch> m: dd %()

[10:18] <discord-raku-bot> <Raku eval>  {}  

[10:18] <discord-raku-bot> <Nemokosch> Strange

[10:19] <discord-raku-bot> <el gatito (** advocate)> m: say "{@().WHAT} {%().WHAT}" 

[10:19] <discord-raku-bot> <Raku eval>     Use of uninitialized value of type List in string context. Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.   in block <unit> at main.raku line 1 Use of uninitialized value of type Hash in string context. Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.   in block <unit> at main.raku line 1  

[10:19] <discord-raku-bot> <Nemokosch> I thought .hash and .list were just unfortunate names

[10:19] <discord-raku-bot> <el gatito (** advocate)> m: say "{@().^name} {%().^name}" 

[10:19] <discord-raku-bot> <Raku eval>  List Hash  

[10:21] <discord-raku-bot> <Nemokosch> Another similar asymmetry I can quickly think of:

[10:21] <discord-raku-bot> <Nemokosch> m: dd $[0, 1];

[10:21] <discord-raku-bot> <Raku eval>  $[0, 1]  

[10:21] <discord-raku-bot> <Nemokosch> m: $<foo bar>

[10:21] <discord-raku-bot> <Raku eval>   

[10:22] <discord-raku-bot> <Nemokosch> Oops

[10:22] <discord-raku-bot> <Nemokosch> m: dd $<foo bar>

[10:22] <discord-raku-bot> <Raku eval>  (Nil, Nil)  

[10:23] <discord-raku-bot> <el gatito (** advocate)> isn't $<foo bar> short for $/<foo bar>

[10:23] <discord-raku-bot> <el gatito (** advocate)> m: dd $(<foo bar>)

[10:23] <discord-raku-bot> <Nemokosch> That's very possible

[10:23] <discord-raku-bot> <Raku eval>  $("foo", "bar")  

[10:24] <discord-raku-bot> <el gatito (** advocate)> it coerced into a containerized list

[10:24] <discord-raku-bot> <el gatito (** advocate)> not that surprising

[10:24] <discord-raku-bot> <Nemokosch> But why isn't $[0, 1] short for $/[0, 1], then? üòâ

[10:24] <discord-raku-bot> <el gatito (** advocate)> yeah perhaps because $/[0] is not used as often so not considered

[10:25] <discord-raku-bot> <Nemokosch> This I find inconsistent, at least

[10:25] <discord-raku-bot> <el gatito (** advocate)> true

[10:26] <discord-raku-bot> <Nemokosch> Tbh I'm not sure this one-letter shortening was worth it because there is a third thing to collide with

[10:26] <discord-raku-bot> <Nemokosch> The anonymous state variable $

[10:26] <discord-raku-bot> <el gatito (** advocate)> anon state variable?

[10:26] <discord-raku-bot> <el gatito (** advocate)> wdym

[10:27] <lizmat> m: for <a b c d e> { say ++$ }

[10:27] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[10:27] <discord-raku-bot> <Nemokosch> Thank you

[10:27] <discord-raku-bot> <el gatito (** advocate)> what why üò∞

[10:28] <discord-raku-bot> <Nemokosch> you don't like it? :c

[10:28] <discord-raku-bot> <el gatito (** advocate)> why does it exist and who uses it

[10:28] <lizmat> it was a very late addition by TimToady

[10:29] <discord-raku-bot> <Nemokosch> really? that's kind of surprising

[10:29] <discord-raku-bot> <Nemokosch> one usage I can think of is when you run Raku with -pe or -ne

[10:29] <discord-raku-bot> <Nemokosch> an implicit loop over the lines of the input

[10:30] <discord-raku-bot> <Nemokosch> I'm not 100% sure p exists but n definitely does

[10:30] <discord-raku-bot> <el gatito (** advocate)> also not very readable

[10:31] *** rantanplan left
[10:31] *** snonux left
[10:31] <lizmat> hmmm... looks I got that wrong, there's at least a commit in 2013 that mentions "anonymous state variable"

[10:33] <discord-raku-bot> <el gatito (** advocate)> m: # golfing  sub largest-power-of-2-before($n) {   loop ($=1;$<$n;$*=2) {}   $ }  say largest-power-of-2-before(1000) 

[10:33] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Missing block at /home/glot/main.raku:3 ------> sub largest-power-of‚èè-2-before($n) {     expecting any of:         new name to be defined  

[10:33] <discord-raku-bot> <el gatito (** advocate)> what

[10:34] <discord-raku-bot> <el gatito (** advocate)> m: # golfing  sub largest_power_of_2_before($n) {   loop ($=1;$<$n;$*=2) {}   $ }  say largest_power_of_2_before(1000) 

[10:34] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Whitespace required before < operator at /home/glot/main.raku:9 ------> <BOL>‚èè<EOL>     expecting any of:         term  

[10:34] <discord-raku-bot> <el gatito (** advocate)> m: # golfing  sub largest_power_of_2_before($n) {   loop ($=1;$ <$n;$*=2){}$ }  say largest_power_of_2_before(1000) 

[10:34] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Strange text after block (missing semicolon or comma?) at /home/glot/main.raku:4 ------>   loop ($=1;$ <$n;$*=2){}‚èè$  

[10:35] <discord-raku-bot> <el gatito (** advocate)> m: # golfing  sub largest_power_of_2_before($n) {   loop ($=1;$ <$n;$*=2){};$ }  say largest_power_of_2_before(1000) 

[10:35] <discord-raku-bot> <Raku eval>  Failed while reading stream: Max execution time exceeded 

[10:35] <discord-raku-bot> <el gatito (** advocate)> bruh

[10:36] <discord-raku-bot> <gfldex> @el gatito (** advocate) every $ introduces another anon container

[10:36] <discord-raku-bot> <Nemokosch> yes, this loop idea is completely wicked

[10:37] <discord-raku-bot> <Nemokosch> here you have like four anonymous state variables

[10:38] <discord-raku-bot> <el gatito (** advocate)> so $++ # write to $ say $ # read $ is actually two variables?

[10:39] <discord-raku-bot> <gfldex> aye

[10:40] <discord-raku-bot> <el gatito (** advocate)> anon state should be burned in hell üò©

[10:40] <lizmat> I tend to agree with that, actually

[10:40] <lizmat> it's too linenoisy and too magic

[10:41] <discord-raku-bot> <gfldex> I like it. It prevents me from reusing container names where I shouldn't. Also, it lowers cognitive load.

[10:42] <discord-raku-bot> <Nemokosch> yeah well, tbh I'd be curious how often it is used in code

[10:42] <discord-raku-bot> <Nemokosch> anyway I don't like that $<foo> is kind of an overloaded term

[10:42] <lizmat> you *can* use $/<foo>

[10:43] <discord-raku-bot> <Nemokosch> yes but can I use $<foo> for what it reads as? ü§î

[10:44] <discord-raku-bot> <el gatito (** advocate)> ($)<foo>

[10:44] <discord-raku-bot> <el gatito (** advocate)> ${'foo'}

[10:44] <discord-raku-bot> <Nemokosch> the former seems to work

[10:44] <discord-raku-bot> <Nemokosch> the latter is

[10:44] <discord-raku-bot> <Nemokosch> m: ${'foo'}

[10:44] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Unsupported use of ${'foo'}.  In Raku please use: $('foo') for hard ref or $::('foo') for symbolic ref. at /home/glot/main.raku:1 ------> ${'foo'}‚èè<EOL>  

[10:45] <discord-raku-bot> <Nemokosch> This could be another topic

[10:45] <discord-raku-bot> <el gatito (** advocate)> raku is good at causing surprises

[10:45] <discord-raku-bot> <Nemokosch> Apparently this had some meaning in Perl.

[10:45] <discord-raku-bot> <Nemokosch> How many Raku users know these days that it meant something in Perl?

[10:46] <discord-raku-bot> <Nemokosch> Why should that interfere if the syntax has its own meaning in Raku?

[10:47] <discord-raku-bot> <Nemokosch> is there an I'M-NO-PERL-USER kind of pragma to turn these back into normal Raku behavior?

[10:47] <discord-raku-bot> <Nemokosch> here it even errored out at compilation time, that's way overboard...

[10:48] <lizmat> use isms 'Perl5'

[10:49] <lizmat> m: use isms 'Perl5'; ${'foo'}

[10:49] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '${'foo'}' is not declared.  Perhaps you forgot a 'sub' if‚ê§this was intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> use isms 'Perl5'; ‚èè${'foo'}‚ê§¬ª

[10:49] <lizmat> m: use isms 'Perl5'; my $foo = 42; say ${'foo'}

[10:49] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '${'foo'}' is not declared.  Perhaps you forgot a 'sub' if‚ê§this was intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> use isms 'Perl5'; my $foo = 42; say ‚èè${'foo'}‚ê§¬ª

[10:49] <lizmat> hmmm

[10:49] <lizmat> in any case, there *is* such a pragma  :-)

[10:50] <discord-raku-bot> <el gatito (** advocate)> isn't that intended for perl5 user using raku not for raku users unaware of perl5

[10:50] <discord-raku-bot> <Nemokosch> you mean the naming?

[10:51] <discord-raku-bot> <Nemokosch> okay, I'm happy for that pragma... the next step I'd push towards is to make that the default üòõ

[10:53] <discord-raku-bot> <el gatito (** advocate)> i actually learned raku before perl because i thought it is the better, simpler and more modern perl

[10:53] <discord-raku-bot> <el gatito (** advocate)> m: use isms 'Perl5';  say 

[10:53] <discord-raku-bot> <Raku eval>    

[10:53] <discord-raku-bot> <el gatito (** advocate)> o

[10:55] <discord-raku-bot> <Nemokosch> what do see here?

[10:55] <lizmat> m: say

[10:55] <camelia> rakudo-moar 37f525995: OUTPUT: ¬´===SORRY!===‚ê§Argument to "say" seems to be malformed‚ê§at <tmp>:1‚ê§------> say‚èè<EOL>‚ê§Other potential difficulties:‚ê§    Unsupported use of bare "say".  In Raku please use: .say if you meant‚ê§    to call it as a method on $_, or u‚Ä¶¬ª

[10:56] <discord-raku-bot> <Nemokosch> "what do see here" lol

[10:57] <discord-raku-bot> <Nemokosch> idk what's with these vocalisation thinkos, I meant "what to see here" surely xD

[11:00] <discord-raku-bot> <el gatito (** advocate)> don't have to say()

[11:00] <discord-raku-bot> <Nemokosch> üòé lol

[13:13] *** guifa left
[14:49] <discord-raku-bot> <el gatito (** advocate)> raku doesn‚Äôt have type unions üò≠

[14:52] *** jgaz joined
[14:53] <discord-raku-bot> <Nemokosch> On syntax level, probably not, this is not OCaml after all

[14:53] <discord-raku-bot> <Nemokosch> there would be nothing to back it up

[14:54] <discord-raku-bot> <Nemokosch> I was thinking that it would be really cool to teach the compiler some type checks don't need to be performed over and over

[14:54] <discord-raku-bot> <Nemokosch> or, if not the compiler, at least support something like "explicit type mapping"

[14:55] <discord-raku-bot> <Nemokosch> so like, describe the rule "a natural number + 1 is a positive integer"

[14:55] <discord-raku-bot> <Nemokosch> this sort of stuff

[14:55] <discord-raku-bot> <el gatito (** advocate)> you have to use multi

[14:56] <discord-raku-bot> <Nemokosch> and then it could take that into account, not performing a runtime check

[14:56] <discord-raku-bot> <Nemokosch> but I think that would require a huge boost in the internals of the type system

[14:56] <discord-raku-bot> <Nemokosch> it should be able to see these rules and act upon them for basically any operation

[14:57] <discord-raku-bot> <el gatito (** advocate)> unions are common among typed languages not just ocaml wdym

[14:57] <discord-raku-bot> <Nemokosch> but in those others, it doesn't really have much point

[14:57] <discord-raku-bot> <Nemokosch> it's really just a runtime/compile time (the important thing is: one time) check

[14:58] <discord-raku-bot> <Nemokosch> without any knowledge of possible transformations of that type

[14:58] <discord-raku-bot> <Nemokosch> and that Raku also has, with the where clause

[14:58] <discord-raku-bot> <Nemokosch> (rather than multis)

[14:59] <discord-raku-bot> <Nemokosch> you can absolutely say $foo where Array|Hash

[14:59] <discord-raku-bot> <Nemokosch> the actual boost would be Haskell and the ML family

[14:59] <discord-raku-bot> <Nemokosch> in other cases, you'll need to perform the checks again and again and again

[15:00] <discord-raku-bot> <el gatito (** advocate)> o

[15:01] <discord-raku-bot> <el gatito (** advocate)> i can‚Äôt (Int|Rat) $something but i can $something where Int|Rat instead

[15:02] <discord-raku-bot> <el gatito (** advocate)> it can also used for other type constraints

[15:30] *** snonux joined
[15:30] *** snonux left
[15:33] *** snonux_ joined
[15:49] <discord-raku-bot> <el gatito (** advocate)> will callwith call a more specific candidate or less specific or it depends?

[16:08] <discord-raku-bot> <el gatito (** advocate)> is there a ‚Äútruncate with scale‚Äù function

[16:28] *** snonux_ is now known as snonux

[16:28] *** snonux left
[16:34] <discord-raku-bot> <Nemokosch> what do you mean?

[16:34] <discord-raku-bot> <Nemokosch> > callwith calls the next candidate matching the original signature, that is, the next function that could possibly be used with the arguments provided by users and returns that candidate's return value.

[16:37] <discord-raku-bot> <el gatito (** advocate)> oh

[16:37] <discord-raku-bot> <Nemokosch> so it's kind of a hacky behavior

[16:37] <discord-raku-bot> <Nemokosch> it does NOT dispatch based on the actual arguments

[16:37] <discord-raku-bot> <Nemokosch> but the original arguments

[16:39] <discord-raku-bot> <el gatito (** advocate)> what

[16:39] <discord-raku-bot> <el gatito (** advocate)> bruh

[16:43] <discord-raku-bot> <el gatito (** advocate)> so if i want to dispatch with the actual arguments

[16:43] <discord-raku-bot> <el gatito (** advocate)> i have to use recursion

[16:50] *** jgaz left
[16:52] *** ab5tract left
[16:54] *** NemokoschKiwi joined
[16:56] <discord-raku-bot> <Nemokosch> there is samewith for that

[16:59] <discord-raku-bot> <Nemokosch> https://new-raku.finanalyst.org/language/functions.html#sub_samewith

[17:05] <discord-raku-bot> <el gatito (** advocate)> m:perl sub fact($n) {   if $n == 0 {     1   } else {     $n * samewith($n - 1)   } } 

[17:05] <discord-raku-bot> <Raku eval>   

[17:05] <discord-raku-bot> <el gatito (** advocate)> m:perl sub fact($n) {   if $n == 0 {     1   } else {     $n * samewith($n - 1)   } }  say fact(5); 

[17:05] <discord-raku-bot> <Raku eval>  120  

[17:06] <discord-raku-bot> <el gatito (** advocate)> why don‚Äôt they call it recur

[17:09] <discord-raku-bot> <Nemokosch> üòÑ

[17:13] <discord-raku-bot> <el gatito (** advocate)> anyways how can nextsame and nextwith ‚Äúexit‚Äù the current candidate to find the next candidate it probably does some call stack magic behind the scenes

[17:18] <discord-raku-bot> <Nemokosch> probably, I don't know, "jnthn stuff" as they say

[17:19] <discord-raku-bot> <Nemokosch> should check out dispatch mechanisms, NQP level at best

[17:19] <discord-raku-bot> <Nemokosch> if not VM level

[17:21] *** NemokoschKiwi left
[17:24] <discord-raku-bot> <el gatito (** advocate)> m: multi fact-tail($n, $acc) {   if $n == 0 { $acc }   else { nextwith($n-1, $n*$acc) } }  say fact-tail(5, 1); 

[17:24] <discord-raku-bot> <Raku eval>  Nil  

[17:24] <discord-raku-bot> <el gatito (** advocate)> wait how

[17:25] <discord-raku-bot> <Nemokosch> nextwith has no return value

[17:27] <discord-raku-bot> <el gatito (** advocate)> but the base case should have?

[17:27] <discord-raku-bot> <el gatito (** advocate)> m: multi fact-tail(0, $acc) {   $acc }  multi fact-tail($n, $acc) {   nextwith($n-1, $n*$acc) }  say fact-tail(5, 1); 

[17:28] <discord-raku-bot> <Raku eval>  Nil  

[17:28] <discord-raku-bot> <Nemokosch> what base case

[17:28] <discord-raku-bot> <Nemokosch> you are not returning any value, I think that's all the issue

[17:29] <discord-raku-bot> <el gatito (** advocate)> when $n == 0

[17:30] <discord-raku-bot> <Nemokosch> why can't you just use samewith üò©

[17:30] <discord-raku-bot> <el gatito (** advocate)> because it nextwith shouldn‚Äôt consume stack space tco üò©

[18:34] <discord-raku-bot> <p6steve> I find $++ indispensable for this kind of thing

[18:34] <discord-raku-bot> <p6steve> say ~df.sort: { df[$++]<C> };   # sort by col C

[18:40] <discord-raku-bot> <Nemokosch> wait what

[18:42] <discord-raku-bot> <p6steve> sorry - going back over today

[18:43] <discord-raku-bot> <p6steve> sadly I can't usually stay live in the chat ... but very interested all the same

[18:44] <discord-raku-bot> <p6steve> this is an example of sorting a Dan DataFrame ...

[18:44] <discord-raku-bot> <p6steve> Dan supports cascading accessors

[18:47] <discord-raku-bot> <p6steve> so it can leverage the standard raku sort method by using $++ to select each item sequentially from column with name C

[18:47] *** jgaz joined
[19:04] <discord-raku-bot> <Nemokosch> what does this do, though? I don't really understand it

[19:10] <discord-raku-bot> <p6steve> df is a kind of 2D Array - so df.sort is doing a row-wise sort

[19:11] <discord-raku-bot> <p6steve> here sort takes a routine and swaps rows depending on cmp of this row and last row (this is standard raku sort functionality)

[19:14] <discord-raku-bot> <p6steve> the routine shown picks out the item in this row and the chosen column - like @a[$++,2] would sort by column 2 in a standard 2D array

[19:17] <discord-raku-bot> <Nemokosch> you know, I don't understand how this is different from just idiomatically doing .sort: *<C>

[19:52] <discord-raku-bot> <p6steve> please can you show that with a standard raku 2d array

[19:52] <discord-raku-bot> <p6steve> m: [1,2].sort( *[1] ).say;

[19:52] <discord-raku-bot> <Raku eval>  ((Any) (Any))  

[19:53] <discord-raku-bot> <p6steve> ^^^ am I doing something wrong?

[19:55] <discord-raku-bot> <Nemokosch> m: [1,2].say;

[19:55] <discord-raku-bot> <Raku eval>  [(Any) (Any)]  

[19:55] <discord-raku-bot> <Nemokosch> mainly that this isn't a 2d array ^^

[19:55] <discord-raku-bot> <Nemokosch> why on earth would this even compile

[19:56] <discord-raku-bot> <Nemokosch> oh... oh

[19:56] <discord-raku-bot> <Nemokosch> [[1,2].[3,4]]

[19:56] <discord-raku-bot> <Nemokosch> does this help?

[19:56] <discord-raku-bot> <Nemokosch> [1,2] indexed with [3,4], then coerced into Array

[19:57] <discord-raku-bot> <Nemokosch> m: [[1,2],[3,4]].sort( *[1] ).say;

[19:57] <discord-raku-bot> <Raku eval>  ([1 2] [3 4])  

[19:57] <discord-raku-bot> <Nemokosch> m: [[1,4],[3,2]].sort( *[1] ).say;

[19:57] <discord-raku-bot> <Raku eval>  ([3 2] [1 4])  

[19:57] <discord-raku-bot> <Nemokosch> looks good to me @p6steve

[20:00] <discord-raku-bot> <p6steve> m: say [[1,4], [3,2]].sort: *[1]

[20:00] <discord-raku-bot> <Raku eval>  ([3 2] [1 4])  

[20:00] <discord-raku-bot> <p6steve> yep - I missed the comma!

[20:04] <discord-raku-bot> <p6steve> m: @a =  [[1,4], [3,2]]; say @a.sort: {@d[$++;1]};

[20:04] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '@a' is not declared at /home/glot/main.raku:1 ------> <BOL>‚èè@a =  [[1,4], [3,2]]; say @a.sort: {@d[$  

[20:04] <discord-raku-bot> <p6steve> m: my @a =  [[1,4], [3,2]]; say @a.sort: {@d[$++;1]};

[20:04] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '@d' is not declared at /home/glot/main.raku:1 ------> my @a =  [[1,4], [3,2]]; say @a.sort: {‚èè@d[$++;1]};  

[20:04] <discord-raku-bot> <p6steve> @a =  [[1,4], [3,2]]; say @a.sort: {@a[$++;1]};

[20:05] <discord-raku-bot> <p6steve> m: @a =  [[1,4], [3,2]]; say @a.sort: {@a[$++;1]};

[20:05] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '@a' is not declared at /home/glot/main.raku:1 ------> <BOL>‚èè@a =  [[1,4], [3,2]]; say @a.sort: {@a[$  

[20:05] <discord-raku-bot> <p6steve> m: my @a =  [[1,4], [3,2]]; say @a.sort: {@a[$++;1]};

[20:05] <discord-raku-bot> <Raku eval>  ([3 2] [1 4])  

[20:05] <discord-raku-bot> <p6steve> phew

[20:06] <discord-raku-bot> <p6steve> so - the answer is that the idiom *<C> would be better for Dan, but that this is not yet implemented, in the meantime the anonymous var $ does the trick

[20:08] <discord-raku-bot> <p6steve> sorry, must drop off

[20:09] <discord-raku-bot> <Nemokosch> hm, what does it mean "not yet implemented"?

[20:17] *** jgaz left
[20:22] *** jgaz joined
[20:37] <discord-raku-bot> <p6steve> it means that the raku Dan module has a limited subset of Positional/Associative behaviours around Whatever s... in other words I decided that other aspect of Dan (such as the Polars binding) are more important ...

[20:39] <discord-raku-bot> <p6steve> ... I learned quite a lot about how to implement Positional/Associative behaviours so far and I would say that at some point it would probably be best to address all the Whatever / Whateverable details one by one - but this is quite a lot of work

[20:40] <discord-raku-bot> <Nemokosch> okay but a plain { .<C> } also might do

[20:40] <discord-raku-bot> <Nemokosch> no whatever star involved

[20:41] <discord-raku-bot> <p6steve> Type Array does not support associative indexing.

[20:42] <discord-raku-bot> <p6steve> nah - gives an error

[20:42] <discord-raku-bot> <Nemokosch> well, then use the positional indexing üòõ

[20:43] <discord-raku-bot> <Nemokosch> I really really, really doubt there isn't a proper alternative of that $++ hack

[20:43] <discord-raku-bot> <Nemokosch> just do the same but with $_ instead of @array[$++]

[20:48] <discord-raku-bot> <p6steve> not sure how to do Positional with column names

[20:49] <discord-raku-bot> <p6steve> ;-)

[20:50] <discord-raku-bot> <Nemokosch> Well, how did your code work?

[20:50] <discord-raku-bot> <Nemokosch> I'd hope to be able to provide a working alternative without $

[20:50] *** guifa joined
[22:31] *** guifa left
[23:03] <discord-raku-bot> <gfldex> m:    class Person does Positional {         enum Foo <Name Age Awesomeness>;         method AT-POS(Int:D(Foo) $_) { dd $_, $_ ~~ Int }     }      my $person = Person.new;     $person[Person::Name, Person::Age]; 

[23:03] <discord-raku-bot> <Raku eval>  Foo::Name Bool::True Foo::Age Bool::True  

[23:03] <discord-raku-bot> <gfldex> @p6steve there your go ^^^

[23:30] *** ab5tract joined
[23:45] *** ab5tract left
