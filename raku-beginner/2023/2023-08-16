[00:48] *** razetime joined
[01:09] *** razetime left
[01:10] *** razetime joined
[01:18] *** explorer left
[01:32] *** deoac joined
[01:33] *** deoac left
[01:46] *** desmond joined
[01:48] <desmond> # not sure why I am getting an error

[01:48] <desmond> # "Cannot unbox 64 bit wide bigint into native integer"

[01:48] <desmond> use v6.d;

[01:48] <desmond> my $bufa = buf8.new(3, 1, 255);

[01:48] <desmond> say $bufa;

[01:48] <desmond> my $bufb = buf64.new(3, 1, 18446744073709551615);

[01:48] <desmond> say $bufb;

[01:55] *** desmond is now known as demondthesecond

[02:06] <discord-raku-bot> <_elcaro_> I can load a shared lib via Native call under Linux by specifying it's location, eg.  my constant LIB = 'home/foo/bar/here/lib.so'; sub foo is native(LIB) { * }  Trying to do the same thing on Windows fails, eg.  my constant LIB = 'C:/Users/foo/bar/here/lib.dll'; sub foo is native(LIB) { * }  Will fail with Cannot locate native library 'C:/Users/foo/bar/here/lib.dll' error 0x7e despite the fact the library

[02:06] <discord-raku-bot> exists.  Is this a bug?

[02:59] <MasterDuke> m: my uint64 $u = 18446744073709551615; say $u; my int64 $s = 18446744073709551615; say $s¬†¬† # desmond: hm, that feels like a bug. since `constant buf64 = Buf[uint64];` https://github.com/rakudo/rakudo/blob/main/src/core.c/Buf.pm6#L1418

[02:59] <camelia> rakudo-moar 512f5cc46: OUTPUT: ¬´18446744073709551615‚ê§Cannot unbox 64 bit wide bigint into native integer‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:01] <MasterDuke> there were dramatic improvements made to support for unsigned natives a little while ago, but i guess there is at least one thing that still needs work

[03:03] <MasterDuke> _elcaro_: i can't say for sure, but i think there might be some weirdness with nativecall and windows. does anything change if you use `\` instead of `/` in the path? and/or put the path literal in the `is native` call instead of creating the constant?

[03:06] <discord-raku-bot> <_elcaro_> No  I had tried changing slash direction doesn't change anything.  Even tried creating a IO::Path::Win32 and using that.  Putting a literal string inside native() doesn't help either.

[03:06] <MasterDuke> m: my constant u64 = uint64; my u64 $u = 18446744073709551615; say $u¬†¬†¬† # this works fine

[03:06] <camelia> rakudo-moar 512f5cc46: OUTPUT: ¬´18446744073709551615‚ê§¬ª

[03:07] <MasterDuke> _elcaro_: huh. then i'd try pinging nine or ugexe over in #raku or #raku-dev

[03:10] <MasterDuke> does it work if you're in the directory and just give a filename instead of the full path?

[03:12] <MasterDuke> m: my $bufb = buf64.new(3, 1, 18446744073709551615);¬† # interesting, it's the printing and not the assignment that causes the error

[03:12] <camelia> rakudo-moar 512f5cc46: ( no output )

[04:00] *** razetime left
[04:11] <MasterDuke> desmond, demondthesecond: https://github.com/rakudo/rakudo/issues/5348

[04:14] <demondthesecond> Awesome, thanks!

[04:20] <demondthesecond> Not only for printing by the way:

[04:20] <demondthesecond> use v6.d;

[04:20] <demondthesecond> my $bufa = buf8.new(3, 1, 255);

[04:20] <demondthesecond> $bufa[3] = $bufa[2] + 1;

[04:20] <demondthesecond> say $bufa;

[04:20] <demondthesecond> my $bufb = buf64.new(3, 1, 18446744073709551615);

[04:20] <demondthesecond> $bufb[3] = $bufb[2] + 1;

[04:20] <demondthesecond> #say $bufb;

[04:20] <demondthesecond> #same error

[04:20] <demondthesecond> oops

[04:21] <demondthesecond> I meant:

[04:21] <demondthesecond> use v6.d;

[04:21] <demondthesecond> my $bufa = buf8.new(3, 1, 255);

[04:21] <demondthesecond> $bufa[2] = $bufa[2] + 1;

[04:21] <demondthesecond> say $bufa;

[04:21] <demondthesecond> my $bufb = buf64.new(3, 1, 18446744073709551615);

[04:21] <demondthesecond> $bufb[2] = $bufb[2] + 1;

[04:29] <MasterDuke> interesting. i have a branch of MoarVM that adds a bunch of missing `*_u` versions of ops/functions, but even on that i get the same errors

[04:29] <MasterDuke> anyway, off to sleep

[04:44] *** razetime joined
[05:21] *** habere-et-disper joined
[05:34] *** siavash joined
[05:55] *** habere-et-disper left
[07:53] *** razetime left
[07:53] *** razetime joined
[08:07] *** razetime left
[08:12] *** razetime joined
[08:12] *** dakkar joined
[08:16] *** tea3po left
[08:16] *** tea3po joined
[08:20] *** teatwo joined
[08:23] *** tea3po left
[08:38] *** razetime left
[08:57] *** razetime joined
[09:24] <discord-raku-bot> <rcmlz> maybe an too academic question: how could I get the computation/memory complexity of build in functions?  For example, I did the solution to https://theweeklychallenge.org/blog/perl-weekly-challenge-228/ like this  sub task2(@input) {   my UInt $operations = 0;   my @working = @input;    for @input.sort -> $element {           my $pos = @working.first($element, :k);       @working = @working.rotate($pos);      

[09:24] <discord-raku-bot> @working.shift;       $operations += $pos + 1;   }   return $operations; }  (find gist here https://gist.github.com/rcmlz/1a2f20339f203a6721fc5186624ab958)  and are now wondering if my estimation of  O(nlog(n) + n*(n + n + n + 1)) <= O(n^2) is corret, estimating the @input.sort as nlog(n) and .first .rotate and .shift als also n and addition as 1.  Is the complexity of the build in functions like .first or .rotate or

[09:24] <discord-raku-bot> .shift documented?

[09:27] *** teatwo left
[09:28] *** teatime joined
[09:37] <discord-raku-bot> <nemokosch> I don't think there is anything like that. If there is, please notify me as well üòõ

[09:37] <discord-raku-bot> <rcmlz> (if I had to do e.g. .rotate manually it probably would be at least O(n) - there is so much "magic" going on in Raku under the hood, perhaps there is an algorithm for that in log(n) or less that has been implemented by someone  ...

[09:38] <discord-raku-bot> <nemokosch> If you think about it, we don't know the complexity of arithmetic operations or the cost of a function invocation either

[09:38] <discord-raku-bot> <nemokosch> as much as this is a theoretic point, it is also a practical point with regards to Raku because it's not obvious how integer operations are implemented on bigints

[09:39] <lizmat> rotate produces a Seq...  it will first internally produce the values that are needed at the end, then produce the values of the source until exhausted, then produce the previously saved values

[09:40] <discord-raku-bot> <rcmlz> Due to the huge number of CS conepts available in Raku, I beliefe Raku is suitable for learning programming rigerously. However, O-notation is an important part of the academic world ...

[09:41] <discord-raku-bot> <nemokosch> I think there is lowkey a conflict of interest here. A mere user is counter-interested in "complexity compatibility", for example

[09:41] <discord-raku-bot> <nemokosch> And so is an implementor, pretty much

[09:41] <discord-raku-bot> <rcmlz> @lizmat: so my guess of O(n) was correct?

[09:42] <lizmat> well, yes and no

[09:43] <lizmat> it depends on what it works on

[09:43] <discord-raku-bot> <nemokosch> it's rather the complete retrieval/list conversion that will be the O(n) step, as much as I understand

[09:43] <lizmat> in the case of a reified list, it's really O(1)

[09:43] <discord-raku-bot> <nemokosch> and there is no way around that.

[09:44] <lizmat> ah, no, duh, O(n)

[09:44] <discord-raku-bot> <rcmlz> so my explicit use of arrays makes it slower?

[09:44] <discord-raku-bot> <nemokosch> like, if you have a mere iterator, there is no other way to make it into a list than to retrieve all the values

[09:45] <discord-raku-bot> <nemokosch> by the way, I also have an academic question for you - a question that I asked myself earlier

[09:46] <discord-raku-bot> <nemokosch> do you care about how good your algorithm is, or how efficient the code will actually run?

[09:46] <discord-raku-bot> <nemokosch> if it's the former, then I'd say you shouldn't care about these things

[09:46] <discord-raku-bot> <rcmlz> yes, the way I implemented it it will not be blow nlog(n) (sorting once), but in case rotor and first and shift are in O(1), then my total solution would be in O(nlogn + n * (1 + 1+ 1+1)) <= O(nlog(n))

[09:48] <discord-raku-bot> <nemokosch> this solution is akin to one that Bruce Gray showed on the last Raku Study meeting

[09:48] <discord-raku-bot> <nemokosch> it combines two individual optimizations shown there

[09:49] <discord-raku-bot> <rcmlz> I do not care about how fast the Raku solution is in a real world compared to Rust ;-) It is just for teaching, as it sometimes involves estimating the complexity of an developed solution.

[09:50] <discord-raku-bot> <nemokosch> hm, you still have a point with rotor(n) though, that's not such a trivial algorithm in itself

[09:51] <discord-raku-bot> <rcmlz> thank you.

[09:51] <discord-raku-bot> <nemokosch> for the rest part I'd say you don't have to care too much. There are obviously data structures where popping one element from the front and adding it to the end are cheap

[09:52] <discord-raku-bot> <nemokosch> but a data structure where basically indexing and reordering links are both cheap, hm...

[09:54] <discord-raku-bot> <nemokosch> but to be honest, I don't think .first is ever going to be O(1)

[09:55] <discord-raku-bot> <nemokosch> in which case, 1. it doesn't matter that much 2. the rotation step could be in theory baked into the search step and not add much cost

[09:58] <lizmat> rcmlz my solution: https://gist.github.com/lizmat/d9bbe9ed03f9cb234884ebd64482501a

[09:59] <lizmat> perhaps the question about rotate is an entirely different one ?

[09:59] <discord-raku-bot> <rcmlz> OK, just wanted to make sure that there is not an obvious way. For instance the Java guys put in the source code of the JRE sometimes the complexity of operations.

[10:00] <lizmat> I'm not sure .sort or .rotate are needed for this task

[10:00] <discord-raku-bot> <nemokosch> it's better to not add it than to get it wrong, don't you think?

[10:02] <lizmat> FWIW, on MoarVM, .shift is implemented really as moving the pointer of the start of the array

[10:03] <lizmat> afaik  :-)

[10:03] <discord-raku-bot> <rcmlz> Variable '$first' is not declared.  Did you mean '&first'?

[10:03] <discord-raku-bot> <nemokosch> it was meant to be $target I think

[10:04] <lizmat> yeah, sorry, incomplete renaming for clarity  

[10:04] <discord-raku-bot> <rcmlz> yes, thank you

[10:04] <lizmat> gist fixed

[10:04] <discord-raku-bot> <nemokosch> the snippet illustrates a point quite well

[10:05] <discord-raku-bot> <nemokosch> if first were really O(1), it would be this simple to solve this task in O(n) ü§†

[10:06] <discord-raku-bot> <nemokosch> but realistically this is an O(n^2) solution and I couldn't think of a fundamentally better way

[10:06] <discord-raku-bot> <rcmlz> I wanted to avoid multiple min() on the array (assuming O(n) for one min() (thats why the sort) and thought that rotor() is bettern than shifting k times.

[10:06] <discord-raku-bot> <nemokosch> to be honest, if first was anything below O(n), this would be an easy win

[10:07] <discord-raku-bot> <nemokosch> it is probably better than shifting k times on the micro scale

[10:08] <discord-raku-bot> <nemokosch> but you would still need to determine the part to be pushed to the end, I suppose

[10:08] <discord-raku-bot> <rcmlz> yes, I meant shifting and appending k times

[10:08] <discord-raku-bot> <nemokosch> this is why I said that the biggest win I can imagine is to build this whole thing into the search

[10:08] <discord-raku-bot> <nemokosch> but then somebody might argue that lizmat's solution is a radical approach on "building the rotation into the search" üòÑ

[10:09] <lizmat> well, the task is about calculating the number of operations, *not* processing values in ascending order

[10:09] <lizmat> so I don't see how you could do it any other way than this way ?

[10:09] <discord-raku-bot> <nemokosch> all these solutions boil down to the same challenge

[10:10] <discord-raku-bot> <nemokosch> I had another thing in mind - counting how many times each elements need to be pushed to the end, and then simply summing that

[10:10] <discord-raku-bot> <nemokosch> however, I realized that it requires something that I never managed to solve below O(n^2)...

[10:11] <discord-raku-bot> <nemokosch> namely the following task: "given array A, for each index I, calculate the ordered position of A[I] in the sub-array A[1..I]"

[10:12] <discord-raku-bot> <rcmlz> shift and first would need to be O(1)

[10:12] <discord-raku-bot> <nemokosch> first without a predicate, yes

[10:12] <discord-raku-bot> <nemokosch> but first with a predicate is a search

[10:12] <lizmat> shift *is* basically O(1) on MoarVM

[10:13] *** razetime left
[10:13] <discord-raku-bot> <nemokosch> if you are gonna respect the positions instead of building a custom data-structure to aid your search, that's never going to be better than O(n)

[10:13] <lizmat> as it is in most programming languages nowadays, I would say

[10:14] <discord-raku-bot> <nemokosch> and if you build some custom data-structure 1. you might lose the positions, cf. heap sort 2. you will have to synchronize somehow which is inefficient here

[10:15] <discord-raku-bot> <nemokosch> this is the problem here really. The relative positions need to be maintained - however, if they are, you have to resort to "random access" algorithms...

[10:19] <discord-raku-bot> <Nahita> it works on 2021.07

[10:33] <discord-raku-bot> <rcmlz> I could not resist:  rcmlz: 3 seconds lizmath: 15 seconds  https://gist.github.com/rcmlz/a38bce253c7911f41fc4aa3731d2db75  running on my old 2015 Macbook Air on Rakudo‚Ñ¢ v2023.04

[10:33] <discord-raku-bot> <nemokosch> it's not surprising though

[10:34] <discord-raku-bot> <nemokosch> that version is without "the two optimizations"

[10:34] <discord-raku-bot> <nemokosch> "the big two" üòÑ

[10:35] <discord-raku-bot> <rcmlz> My conclusion is, that rotate is not to bad compared to manually doing it element by element

[10:35] <discord-raku-bot> <nemokosch> sure enough, and also you have precomputed sorting

[10:36] <discord-raku-bot> <nemokosch> but I think these are "constant factor" optimizations

[10:37] <lizmat> I wonder of the new ".sort(:k) function would help herev  :-)

[10:37] <discord-raku-bot> <nemokosch> so at the end of the day, yours still might be O(n^2), a better O(n^2)

[10:44] <discord-raku-bot> <rcmlz> m:  my @input = (^10).pick(*); my $start;  say @input; say @input.sort; say @input.sort(:k);

[10:44] <discord-raku-bot> <nemokosch> considering a linked list, in one case you only need to traverse the segment to move to determine its end, in the other case you'd need to set and unset all the links inbetween

[10:44] <discord-raku-bot> <Raku eval>  [9 2 8 7 4 5 6 0 1 3] (0 1 2 3 4 5 6 7 8 9) (0 1 2 3 4 5 6 7 8 9) 

[10:45] <lizmat> m: m:  my @input = (^10).pick(*); my $start;  say @input; say @input.sort; say @input.sort(:k);

[10:45] <camelia> rakudo-moar 434732028: OUTPUT: ¬´[8 4 0 2 9 3 5 7 1 6]‚ê§(0 1 2 3 4 5 6 7 8 9)‚ê§(2 8 3 5 1 6 9 7 0 4)‚ê§¬ª

[10:45] <discord-raku-bot> <_elcaro_> I thought that might be the case. Thanks for confirming.

[10:45] <lizmat> I think the eval bot on discord is not up-to-date

[10:45] <discord-raku-bot> <nemokosch> it's a 2022.02 iirc

[10:45] <discord-raku-bot> <nemokosch> opened an issue for a Nix bump on glot-images a couple of days ago

[10:46] <lizmat> yeah, the .sort(:k) isn't in a release yet, it will be in 2023.08

[10:48] <discord-raku-bot> <rcmlz> I have the "feeling" taht with .sort(:k) and some "mod array.elems" you can calculate the operations in O(n)

[10:49] <lizmat> yeah, that was my feeling as well  :-)   that's why I mentioned it

[10:49] <discord-raku-bot> <nemokosch> well, I already said where I've gotten with this thought

[10:49] <discord-raku-bot> <nemokosch> not saying that somebody else can't get further but still

[10:50] <discord-raku-bot> <nemokosch> the useful number didn't seem to be the position of A[I] in A but the position of A[I] in A[I..LAST]

[10:50] <discord-raku-bot> <rcmlz> I procrastinated enough for today ...

[10:51] <discord-raku-bot> <nemokosch> which is yucky to compute for each I

[10:51] <discord-raku-bot> <rcmlz> perhaps I think about it when .sort(:k) is available

[10:52] <discord-raku-bot> <rcmlz> smells like DP ...

[10:52] <discord-raku-bot> <nemokosch> expanding forward?

[10:52] <discord-raku-bot> <nemokosch> hm, well, it's worth a thought

[10:53] <discord-raku-bot> <nemokosch> not sure how big the "cache" will have to be

[10:55] <discord-raku-bot> <rcmlz> something like: postion of an element x after rotating smalles element x' = (positionof x' before rotating + positionof x before rotating - 1) mod number of elements in array

[10:56] <discord-raku-bot> <rcmlz> but did not think that through, so perhaps all garbage

[10:57] *** SmokeMachine_ joined
[10:57] *** mjgardner_ joined
[11:01] <discord-raku-bot> <nemokosch> thinking about it, what I said is also faulty, besides being pretty complex

[11:01] <discord-raku-bot> <nemokosch> 1, 3, 2 and 3, 1, 2 are different wrt the last element

[11:02] <discord-raku-bot> <nemokosch> or are they, damn üíÄ

[11:05] *** SmokeMachine left
[11:05] *** mjgardner left
[11:05] *** SmokeMachine_ is now known as SmokeMachine

[11:05] *** mjgardner_ is now known as mjgardner

[12:03] *** siavash left
[12:04] <discord-raku-bot> <rcmlz> Maybe you can help me on the O(n log n) solution. Asusming I have this .sort(:k) in nlog n, how would I get a hash %order-and-position from that orders, basically doing:  @input = [3, 4, 2] @orders = @input.sort(:k) = [1, 2, 0] %order-and-position = 0 => 2, 1 =>0, 2=>1;

[12:20] *** jgaz left
[12:21] *** jgaz joined
[12:23] <discord-raku-bot> <rcmlz> Found it  m:  my @input = [3, 4, 2]; my @orders = [1, 2, 0]; #@input.sort(:k) =  my @positions = ^(@orders.elems); my %order-and-position; %order-and-position{||@positions} = @orders; say @input; say @orders; say %order-and-position;

[12:24] <discord-raku-bot> <rcmlz> found it - I guess having %order-and-position a DP solution calculating the number of operations in O(n) is possible

[12:27] <discord-raku-bot> <nemokosch> won't ||@orders nest too much?

[12:28] <discord-raku-bot> <rcmlz> m: my @input = [3, 4, 2]; my @rank = [1, 2, 0]; #@input.sort(:k) =  my @positions = ^(@input.elems); my %rank-and-position; %rank-and-position{||@rank} = @positions; say @input; say @rank; say %rank-and-position;

[12:28] <discord-raku-bot> <Raku eval>  [3 4 2] [1 2 0] {0 => 2, 1 => 0, 2 => 1} 

[12:29] <discord-raku-bot> <rcmlz> https://stackoverflow.com/questions/72703673/recursively-building-nested-hash-from-a-simple-array told me this solution

[12:29] <discord-raku-bot> <nemokosch> but you don't seem to want the nesting

[12:29] <discord-raku-bot> <rcmlz> no, but it works ;-)

[12:30] <discord-raku-bot> <nemokosch> neither seems the output to be nested

[12:30] <discord-raku-bot> <nemokosch> |@rank is enough for sure

[12:30] <discord-raku-bot> <rcmlz> True - I do not understand the difference (yet)

[12:31] <discord-raku-bot> <nemokosch> it's the difference between @a[1], @a[2], @a[3] and @a1[3] basically

[12:32] <discord-raku-bot> <nemokosch> ||@rank has the special meaning in language version e which is not yet the default so this time around it really turned into |@rank...

[12:34] <discord-raku-bot> <nemokosch> m: my @rank = [1, 2, 0]; my %rank-and-position = @rank Z=> (0..*); dd %rank-and-position

[12:34] <discord-raku-bot> <Raku eval>  Hash %rank-and-position = {"0" => 2, "1" => 0, "2" => 1} 

[12:34] <discord-raku-bot> <nemokosch> is it "nice enough" or "too clever"?

[12:34] <discord-raku-bot> <nemokosch> or neither, of course üòÑ

[13:22] <discord-raku-bot> <rcmlz> nice and clever

[13:46] <dakkar> m:  @rank = [1, 2, 0]; my %rank-and-position=@rank.kv.reverse; dd %rank-and-position

[13:46] <camelia> rakudo-moar f604c7883: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '@rank' is not declared.  Did you mean '&rand'?‚ê§at <tmp>:1‚ê§------> <BOL>‚èè@rank = [1, 2, 0]; my %rank-and-position‚ê§¬ª

[13:46] <dakkar> m: my @rank = [1, 2, 0]; my %rank-and-position=@rank.kv.reverse; dd %rank-and-position

[13:46] <camelia> rakudo-moar f604c7883: OUTPUT: ¬´Hash %rank-and-position = {"0" => 2, "1" => 0, "2" => 1}‚ê§¬ª

[13:47] <dakkar> same thing, but using `.kv` ("give me a list of key-value pairs") instead of the `Z=>` ("zip these two lists and make pairs")

[13:47] <dakkar> m: my @rank = (7, 3, 5); my %rank-and-position=@rank.kv.reverse; dd %rank-and-position

[13:47] <camelia> rakudo-moar f604c7883: OUTPUT: ¬´Hash %rank-and-position = {"3" => 1, "5" => 2, "7" => 0}‚ê§¬ª

[13:47] <dakkar> (slightly clearer with different values)

[13:47] <discord-raku-bot> <nemokosch> if only there was a .vk üòÇ

[13:48] <dakkar> that's what the `.reverse` is for üòú

[13:50] <dakkar> m: my @rank = (7, 3, 5); my %rank-and-position=@rank.pairs¬ª.antipair; dd %rank-and-position

[13:50] <camelia> rakudo-moar f604c7883: OUTPUT: ¬´Hash %rank-and-position = {"3" => 1, "5" => 2, "7" => 0}‚ê§¬ª

[13:50] <dakkar> if you want to make it clearer that we're dealing with pairs

[13:54] <discord-raku-bot> <Nahita> you have @rank.antipairs directly if you want

[13:57] <discord-raku-bot> <nemokosch> that's probably the most concise solution

[13:59] <discord-raku-bot> <rcmlz> @rank.antipairs - thank you, all build in ;-)

[14:06] <dakkar> oh, TIL!

[14:09] <discord-raku-bot> <rcmlz> As soon as I have .sort(:k) available, I can test my O(n) solution for w228

[14:09] <discord-raku-bot> <rcmlz> m:  sub task2_in_O_of_n(@input) {   my @rank = @input; #@input.sort(:k);   my %rank-and-position = @rank.antipairs;    my $n = @rank.elems;     my $shifting_left_previous = %rank-and-position<0>;     my $shifting_left_total = $shifting_left_previous;        for 1...^$n -> $rank {         my $pos-initial = %rank-and-position{$rank};     my $pos-previous = (($pos-initial - $shifting_left_previous) mod ($n - $rank

[14:09] <discord-raku-bot> + 1) - $rank);     my $pos-current = $pos-previous mod ($n - $rank);     $shifting_left_previous = $pos-current;     $shifting_left_total += $shifting_left_previous;   }    return $shifting_left_total + @input.elems; }

[14:09] <discord-raku-bot> <Raku eval>  

[14:10] <discord-raku-bot> <nemokosch> O(n) surely not, if you have a comparing sort

[14:11] <discord-raku-bot> <rcmlz> O(n log n) of course ... sorry

[14:12] <discord-raku-bot> <rcmlz> unless someone can run this for me: https://gist.github.com/rcmlz/a38bce253c7911f41fc4aa3731d2db75

[14:12] <discord-raku-bot> <realvoidzero> I'm trying zef install rakudoc with nixos but am getting the following error a bunch of times: Merging GLOBAL symbols failed: duplicate definition of symbol Fast This happens under: ===> Testing: JSON::Marshal:ver<0.0.25>:auth<zef:jonathanstowe>:api<1.0> If anyone knows what to do... ta

[14:13] <MasterDuke> rcmlz: 2230460‚ê§0‚ê§2230460‚ê§6‚ê§2214235‚ê§0

[14:14] <discord-raku-bot> <rcmlz> ok, faster - but wrong LOL

[14:14] <discord-raku-bot> <nemokosch> üòÖ

[14:14] <MasterDuke> realvoidzero: i'm not 100% sure rakudoc is working right now

[14:14] <discord-raku-bot> <rcmlz> bloody DP ... ;-)

[14:14] <MasterDuke> might want to ask in #raku-doc

[14:14] <discord-raku-bot> <nemokosch> I could install it

[14:15] <MasterDuke> oh? good

[14:16] <discord-raku-bot> <realvoidzero> Nemokosch, with zef?

[14:16] <discord-raku-bot> <nemokosch> yep

[14:16] <discord-raku-bot> <nemokosch> I don't know of other common choices, to be honest

[14:16] <discord-raku-bot> <realvoidzero> Ok. This might be a local issue. I'm not sure how well raku and zef are supported in the nixos environment

[14:17] <MasterDuke> what version of rakudo do you have?

[14:17] <MasterDuke> yeah, rakudoc just installed for me too

[14:17] <discord-raku-bot> <realvoidzero> v2023.04

[14:18] <discord-raku-bot> <nemokosch> could you run and take the output of this:  zef install --dry --verbose rakudoc ?

[14:19] <discord-raku-bot> <realvoidzero> Sure. One sec.

[14:21] <MasterDuke> rcmlz: btw, https://gist.github.com/rcmlz/a38bce253c7911f41fc4aa3731d2db75#file-perf_measurement-raku-L34 would be faster as a range, i.e., `for 1..^$n -> $rank {` (note the two periods instead of three)

[14:22] <MasterDuke> but it would have different semantics

[14:22] <MasterDuke> m: .say for 1..0

[14:22] <camelia> rakudo-moar f604c7883: ( no output )

[14:22] <MasterDuke> m: .say for 1...0

[14:22] <camelia> rakudo-moar f604c7883: OUTPUT: ¬´1‚ê§0‚ê§¬ª

[14:22] <MasterDuke> so depends on what you want to have happen if $n == 0

[14:23] <MasterDuke> m: .say for 1...^0

[14:23] <camelia> rakudo-moar f604c7883: OUTPUT: ¬´1‚ê§¬ª

[14:23] <MasterDuke> m: .say for 1..^0

[14:23] <camelia> rakudo-moar f604c7883: ( no output )

[14:23] <discord-raku-bot> <realvoidzero> ok: https://gist.github.com/voidzero/d013842ae71927888fdf22c2ed4569ce

[14:24] <discord-raku-bot> <nemokosch> JSON::Fast has decent testing...

[14:26] <discord-raku-bot> <nemokosch> okay, JSON::Marshal is suspicious

[14:26] <discord-raku-bot> <nemokosch> I have an earlier version installed

[14:26] <discord-raku-bot> <nemokosch> MasterDuke: what version do you have?

[14:27] <discord-raku-bot> <nemokosch> hm, apparently some people had it even with 0.0.24 https://github.com/jonathanstowe/JSON-Marshal/issues/13 right back at you...

[14:28] <discord-raku-bot> <nemokosch> yeah it's not the version, for me 0.0.25 also installs fine

[14:29] <discord-raku-bot> <realvoidzero> Ok, that's odd then. I can try the latest comment - install deps first

[14:31] <discord-raku-bot> <nemokosch> in any case, could you leave a comment there, with some notes on your environment and Rakudo version?

[14:31] <discord-raku-bot> <rcmlz> I would need "1..^$n"

[14:31] <discord-raku-bot> <rcmlz> changed my code - will debug the algorithm when I have Raku that has .sort(:k)

[14:31] <discord-raku-bot> <realvoidzero> @nemokosch yep will do

[14:32] <discord-raku-bot> <nemokosch> thanks

[14:35] <discord-raku-bot> <realvoidzero> Thank you for the pointers!

[14:35] <discord-raku-bot> <nemokosch> yeah well, hopefully you can install it at the end of the day ^^

[14:41] <discord-raku-bot> <realvoidzero> I just managed and created a comment detailing how to. (I had to do the same thing with another dep)

[14:43] <discord-raku-bot> <nemokosch> oh that's great

[15:48] <demondthesecond> Do you think the fix implemented (https://github.com/rakudo/rakudo/commit/4347320283d68f6c7a3ae8397d28bcc435324c78) for the first part of the issue (https://github.com/rakudo/rakudo/issues/5348#issue-1852473007) will resolve the second part of the issue (https://github.com/rakudo/rakudo/issues/5348#issuecomment-1680605291)

[15:51] <discord-raku-bot> <nemokosch> you might have more luck at #raku-dev with this question

[15:52] <discord-raku-bot> <nemokosch> #raku-dev, in case discord did something nasty to the channel name

[15:52] <lizmat> demondthesecond the second part is a different issue

[16:06] *** deoac joined
[16:07] <discord-raku-bot> <realvoidzero> > log  1000, 10; # 2.9999999999999996 should I use round( ) here to get 3?

[16:07] <demondthesecond> Thanks, should I open a new issue for that case?

[16:10] <lizmat> demondthesecond: yes please

[16:22] *** NemokoschKiwi joined
[16:33] *** ab5tract joined
[16:33] <demondthesecond> Thank you, done. https://github.com/rakudo/rakudo/issues/5349

[16:36] <discord-raku-bot> <antononcube> @realvoidzero Good question! See the discussion here: https://stackoverflow.com/q/47542915/14163984 .

[16:37] *** dakkar left
[16:38] *** razetime joined
[16:40] <discord-raku-bot> <antononcube> I guess... I do not see a better option -- for example, same result is obtained with 1000.Rat.log10.narrow .

[16:44] <discord-raku-bot> <realvoidzero> Ah yes indeed. Thank you for the link

[17:09] *** razetime left
[17:25] *** ab5tract left
[18:33] *** ab5tract joined
[19:29] *** ab5tract left
[19:46] <discord-raku-bot> <Nahita> inaccurateness is due to floating point business allright, and, e.g., Python and Perl has the same "issue" as well. But CPython also offers a math.log10 function, which is a thin wrapper around C's log10 from libm, and it gives 3.0 as expected

[19:46] <discord-raku-bot> <Nahita> Perl doesn't offer a specific log10 but probably (certainly) there are some module(s) in CPAN to address this

[19:47] <discord-raku-bot> <Nahita> Raku, on the other hand, does offer a log10 built-in function; however it somewhat unfortunately defers to log($_) / log(10), and we see the same (slightly) inaccurate result with it as well

[19:48] <discord-raku-bot> <Nahita> m: say log(1000, 10), "\n", log10(1000)

[19:48] <discord-raku-bot> <Raku eval>  2.9999999999999996 2.9999999999999996 

[19:48] <discord-raku-bot> <Nahita> if only it reached out the C's log10, we can get our 3.0

[19:48] <discord-raku-bot> <Nahita> m: use NativeCall;  sub log10(num64 --> num64) is native({ $*DISTRO.is-win ?? "msvcrt.dll" !! "" }) {*}  say log10(1000.Num); 

[19:48] <discord-raku-bot> <Raku eval>  3 

[19:52] *** NemokoschKiwi left
[19:59] *** deoac left
[20:15] *** teatime left
[20:15] *** teatime joined
[20:19] <discord-raku-bot> <librasteve> nahita: that‚Äôs a good idea ‚Ä¶ maybe you should post as a feature request issue on github rakudo/rakudo

[20:23] <discord-raku-bot> <librasteve> having said that i think it‚Äôs a bit weird that Cs log10 unless it uses something like bcd under the hood since the numbers i use on my machine are binary ‚Ä¶ and the point of Rats in raku is to handle rationals not irrationals where continuous functions are at play and i would oppose a request to replace raku Rats with bcd (or some other special handling of decimals)

[20:27] <discord-raku-bot> <librasteve> according to this https://www.tutorialspoint.com/c_standard_library/c_function_log10.htm we have  double log10(double x)  if true then (i) i don‚Äôt get how Cs log10 is different to raku s and (ii) you are probably just lucky with 3 (or have some default rounding mode set in a better way on your FPU)

[20:31] <discord-raku-bot> <librasteve> fwiw i would support some kind of (settable) default Num rounding at the last decimal place to improve this ‚Ä¶ but this goes into areas where eg CPU/FPU architectures are different depending on your platform so non trivial to do at the language level afaik

[20:36] <gfldex> m: dd nqp::div_n(nqp::log_n(1000e0), nqp::log_n(10e0));

[20:36] <camelia> rakudo-moar 86557c946: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Could not find nqp::log_n, did you forget 'use nqp;' ?‚ê§at <tmp>:1‚ê§------> dd nqp::div_n(nqp::log_n(1000e0)‚èè, nqp::log_n(10e0));‚ê§¬ª

[20:36] <gfldex> m: use nqp; dd nqp::div_n(nqp::log_n(1000e0), nqp::log_n(10e0));

[20:36] <camelia> rakudo-moar 86557c946: OUTPUT: ¬´2.9999999999999996e0‚ê§¬ª

[20:37] <gfldex> @librasteve this ^^^ is what Rakudo does. Rakudo: ‚ÄûNQP, your problem please!‚Äú.

[20:42] <gfldex> Given MoarVM, we end up here: https://github.com/MoarVM/MoarVM/blob/75fe055c249e941ec9539cd639d1d7421b350a82/src/core/interp.c#L967

[21:14] <discord-raku-bot> <Nahita> > if true then (i) i don‚Äôt get how Cs log10 is different to raku s  Raku(do) computes log10($x) as log($x) / log(10) which loses accuracy compared to a specific log10 implementation, e.g., here https://www.netlib.org/fdlibm/e_log10.c

[21:14] <discord-raku-bot> <Nahita> if you printf("%.16f", log(1000) / log(10)) in C, you'd get 2.99999 stuff as well. But log10(1000) is 3

[21:17] <discord-raku-bot> <Nahita> i don't think nor know a NativeCall based solution to this would be acceptable in Rakudo, i guess first MoarVM considers a route for log10, then nqp gets nqp::log10_n andthen Rakudo calls that, is a better solution

[21:18] <gfldex> You need to add the OPs for MoarVM and JVM.

[21:30] <discord-raku-bot> <librasteve> per @Nahita link to netlib...

[21:30] <discord-raku-bot> <librasteve>  * Note 1:  *    To guarantee log10(10**n)=n, where 10**n is normal, the rounding   *    mode must set to Round-to-Nearest. 

[21:31] <discord-raku-bot> <librasteve> ^^^ this is what I just said

[21:31] <discord-raku-bot> <librasteve> sooo - maybe we need to control the rounding mode on the IEEE754 FPU

[21:48] <discord-raku-bot> <librasteve> i have tried this on python and they get it right (ie the way of C) so I think we should at least register this as an issue - please can you share the link back here so that we can chip in?

[21:49] <discord-raku-bot> <librasteve> https://gist.github.com/librasteve/fc2999c28654d219876c537abf554524

[22:00] <discord-raku-bot> <librasteve> just writing up new issue here https://github.com/MoarVM/MoarVM/issues/1765

