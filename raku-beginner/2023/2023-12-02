[00:11] <discord-raku-bot> <.vushu> @antononcube no I havenâ€™t yet ðŸ˜…

[02:19] *** MasterDuke joined
[06:28] *** CIAvash joined
[07:53] *** CIAvash left
[14:00] *** MasterDuke left
[15:40] *** mcmillhj joined
[15:42] <mcmillhj> If I have a long expression like `$game-record.comb(/\d+ \s (red|green|blue)/)>>.split(' ')>>.map(-> $quantity, $color { $color => +$quantity }).flat.classify(*.key, :as{ $_.value });` for example. Is there a way I can wrap this across multiple lines in my editor so I can comment on each part of the transformation?

[15:44] <discord-raku-bot> <nemokosch> >>. is the tough part

[15:45] <discord-raku-bot> <nemokosch> I wouldn't know it offhand how to kind of reset parsing after that

[15:48] <mcmillhj> I wasn't sure if there was some way to signal there is more in this expression similar to `\` in shell

[15:50] <discord-raku-bot> <lakmatiol> it does exist and it seems to work  $value>>.\   map()>>.\   split()>>.\   ... 

[15:51] <mcmillhj> :| well not I feel dumb. I left a space between the `.`Â  and `\` so it wasn't working.

[15:51] <mcmillhj> Thank you!

[15:52] <discord-raku-bot> <lakmatiol> raku is quite unpredictable with where whitespace can and can't be,ye

[15:52] <discord-raku-bot> <nemokosch> eventually, mere . was allowed to be detached

[15:53] <discord-raku-bot> <nemokosch> but not even derived operators like .&

[15:53] <discord-raku-bot> <nemokosch> makes you wonder

[15:54] <discord-raku-bot> <lakmatiol> an mildly janky alternative that doesn't have such unpredictable whitespace is  $value andthen $>>.split andthen $>>.map;

[15:59] <discord-raku-bot> <librasteve> would not pipes ==> be an option?

[16:03] <mcmillhj> not sure I follow what you mean. You're saying I can simplify the transformation pipeline?

[16:10] <ab5tract> librasteve++

[16:11] <discord-raku-bot> <librasteve>  my @result = (     <TWO THREE FOUR FIVE SEVEN> Â»~Â» " " X~ <FIFTHS SIXTHS EIGHTHS> # (1) Input      ==> map( {"VULGAR FRACTION " ~ $^Ã¾ } )                         # (2) Converts to Unicode name      ==> grep({ .uniparse })                                        # (3) Filters only real names      ==> map( { .uniparse} );                                       # (4) Converts to unicode  ); 

[16:11] <discord-raku-bot> <librasteve> ^^ from the docs ... https://docs.raku.org/routine/%3D%3D%26gt%3B

[16:12] <DarthGandalf> do you mean applying hypering to ==> ? Â»==>Â» ?

[16:13] <discord-raku-bot> <nemokosch> that's the thing with pipes: they are only nice under very specific circumstances

[16:13] <discord-raku-bot> <librasteve> I am chucking into the mix ... but I have not checked best way to use pipes and hyper (I guess '.hyper' would be a good way)

[16:15] <discord-raku-bot> <nemokosch> ==> is basically syntax sugar for pushing a last argument into a function call

[16:16] <discord-raku-bot> <nemokosch> I think it can also push into an array

[16:21] <discord-raku-bot> <librasteve> probably you can write '>>.op.' as another 'map(*.op).'

[16:22] <discord-raku-bot> <nemokosch> you can most of the time but it's worth knowing that >>. is semantically a deepmap

[16:23] <discord-raku-bot> <librasteve> fair point

[16:26] <DarthGandalf> oh, `deepmap({$_})` looks like what I needed yesterday. I used `from-json(to-json(@foo))` instead ><

[16:31] <discord-raku-bot> <librasteve> detaching .&fn with <.ws> sounds good to me ... is this a change you have requested?

[16:33] <discord-raku-bot> <nemokosch> I think it doesn't work

[16:33] <discord-raku-bot> <nemokosch> some weird parsing path "unlocks"

[16:33] <discord-raku-bot> <librasteve> (I guess it maybe hard to cram even more into the syntax parse)

[16:33] <discord-raku-bot> <librasteve> well raku is crammed to the gills with parsing paths that's for sure

[16:47] *** mcmillhj left
[17:18] *** gfldex joined
