[00:06] *** Manifest0 left
[00:15] <discord-raku-bot> <el gatito (** advocate)> why do you hate using exceptions as iteration sentinels tho

[00:24] <discord-raku-bot> <Nemokosch> they don't describe the intent well, they are wordy

[00:24] <discord-raku-bot> <Nemokosch> multiple disadvantages for no advantages

[00:25] <discord-raku-bot> <el gatito (** advocate)> raku does almost the same thing just returning IterationEnd instead of raising an exception

[00:28] <discord-raku-bot> <Nemokosch> yes, and that's already slightly better

[00:33] <discord-raku-bot> <el gatito (** advocate)> how?

[00:38] <discord-raku-bot> <Nemokosch> it doesn't get mixed with actual exceptions

[00:42] <discord-raku-bot> <el gatito (** advocate)> you can make an exception subclass that represent fail exceptions and StopIteration wouldn't subclass it

[00:45] <discord-raku-bot> <Nemokosch> why would you want to drill on the type system, though, in order to indicate the normal behavior of iterators?

[00:46] <discord-raku-bot> <el gatito (** advocate)> actually python doesn't do that 😭

[00:50] <discord-raku-bot> <el gatito (** advocate)> why not

[00:50] <discord-raku-bot> <Nemokosch> because it's inconvenient and error-prone

[00:50] <discord-raku-bot> <Nemokosch> what is the offer in return?

[00:51] <discord-raku-bot> <el gatito (** advocate)> actually ruby does the same thing https://ruby-doc.org/core-2.6/Enumerator.html

[00:52] <discord-raku-bot> <Nemokosch> that's sad if anything

[00:55] <discord-raku-bot> <el gatito (** advocate)> its more convenient if you are iterating multiple times? py with suppress(StopIteration):     seq.append(next(it))     other |= next(it)  vs py temp = next(it) if not isinstance(temp, StopIteration):     seq.append(temp) temp2 = next(it) if not isinstance(temp, StopIteration):     other |= temp2 

[00:55] <discord-raku-bot> <Nemokosch> this rather seems like a hack

[01:00] <discord-raku-bot> <Nemokosch> even if we ignore that this supressor is some magic function - what value do you get when you were supposed to get an exception?

[01:01] <discord-raku-bot> <Nemokosch> and if you do get a value that you can recognize - what was the whole exception mumbo jumbo about? we are back to a sentinel value

[01:08] <discord-raku-bot> <el gatito (** advocate)> no value also yielding a value and ending the iteration should be different to the consumer, so they do different things (give a value vs raising an exception)

[01:09] <discord-raku-bot> <Nemokosch> how does "no value" manifest when you are clearly storing something into a variable?

[01:10] <discord-raku-bot> <Nemokosch> also: why would an end user even want to consume an iterator

[01:10] <discord-raku-bot> <Nemokosch> rather than something iterable

[01:10] <discord-raku-bot> <Nemokosch> with the proper handling of an iterable

[01:10] <discord-raku-bot> <Nemokosch> like a foreach loop

[01:10] <discord-raku-bot> <el gatito (** advocate)> you don't want to store an "end of iteration" marker to a variable?

[01:11] <discord-raku-bot> <el gatito (** advocate)> by consumer i mean code that consumes iterators bruh

[01:11] <discord-raku-bot> <Nemokosch> yes - what would that even be?

[01:11] <discord-raku-bot> <Nemokosch> that's low-level code

[01:11] <discord-raku-bot> <Nemokosch> and as such, it clearly never wants to escalate a control exception

[01:12] <discord-raku-bot> <Nemokosch> and idk how that follows. I just wanted to get an answer

[01:15] <discord-raku-bot> <el gatito (** advocate)> also what happens when someone wants to yield StopIteration or IterationEnd you don't want to make assumptions about the data being yielded

[01:17] <discord-raku-bot> <Nemokosch> yes, you do, if the value happens to be the dedicated sentinel value

[01:17] <discord-raku-bot> <Nemokosch> sorry but that's not some coincidental data, that's part of the interface

[01:17] <discord-raku-bot> <Nemokosch> you know, this argument is like

[01:17] <discord-raku-bot> <el gatito (** advocate)> the exception is raised before something is assigned to the variable so nothing is assigned period

[01:17] <discord-raku-bot> <Nemokosch> "what if the processor of the iterator wants to raise StopIteration cause why not?"

[01:18] <discord-raku-bot> <Nemokosch> "you wouldn't want to make assumptions about the exceptions that can happen..."

[01:19] <discord-raku-bot> <Nemokosch> yet it's being assigned to something so something just must happen

[01:19] <discord-raku-bot> <Nemokosch> the universe can't just disappear on this contradiction, lol

[01:21] <discord-raku-bot> <el gatito (** advocate)> generators will cause a RuntimeError if they raise that and if class-based iterators raise that it obviously means they want to end

[01:23] <discord-raku-bot> <Nemokosch> similarly, if you define an iterator that gives you IterationEnd on pulling, that means it's over

[01:24] <discord-raku-bot> <Nemokosch> Actually, IterationEnd isn't even Any; it's really just a unique reference reserved for this purpose

[01:25] <discord-raku-bot> <Nemokosch> there is literally no other reason to return it than to indicate the exhaustion of the iterator

[01:26] <discord-raku-bot> <el gatito (** advocate)> the rhs next(it) raises an exception while evaluating so the assignment doesn't happen same thing when you do a = 1 / 0 there is an exception in 1 / 0, so a is untouched

[01:27] <discord-raku-bot> <el gatito (** advocate)> should be pretty easy to reason

[01:27] <discord-raku-bot> <Nemokosch> then what did you win with suppress?

[01:28] <discord-raku-bot> <el gatito (** advocate)> ignore the exception and exit the block

[01:28] <discord-raku-bot> <Nemokosch> or you could just do something like

[01:29] <discord-raku-bot> <Nemokosch>  until (my \next := $iterator.pull-next) =:= IterationEnd { ... } 

[01:29] <discord-raku-bot> <Nemokosch> and be in the safe

[01:29] <discord-raku-bot> <Nemokosch> it didn't need sugar on top of sugar

[01:30] <discord-raku-bot> <Nemokosch> actually, := is superfluous there, terms always bind on initialization

[01:32] <discord-raku-bot> <el gatito (** advocate)> fair 😤

[01:34] <discord-raku-bot> <Nemokosch> these wrappers are more or less convertible anyway, if the iterator interface itself achieves the same thing

[01:34] <discord-raku-bot> <Nemokosch> the question is what you'd make the normal way

[01:35] <discord-raku-bot> <el gatito (** advocate)> then whats your ideal of an iterator interface you want separate done() method to indicate the end of iterator?

[01:36] *** frost joined
[01:42] <discord-raku-bot> <Nemokosch> Tbh the Java way is not so bad

[01:42] <discord-raku-bot> <Nemokosch> with bare hasNext and next

[01:42] <discord-raku-bot> <Nemokosch> the C#/Object Pascal way is somewhat more readable to the user imo

[01:43] <discord-raku-bot> <Nemokosch> a function for moving the cursor (which can return False on "failure"), and another one for reading the current item

[01:44] <discord-raku-bot> <Nemokosch> the JS interface is fairly interesting and not necessarily in a bad way

[01:44] <discord-raku-bot> <Nemokosch> that one is more like Python (you can pass a value to next)

[01:45] <discord-raku-bot> <Nemokosch> however, it doesn't throw an error but returns an object with the value and the completion

[01:46] <discord-raku-bot> <Nemokosch> if the completion is marked, a final value still might be obtained, which in that case would be the return value of the iterator

[01:46] <discord-raku-bot> <el gatito (** advocate)> then there is php php <?php interface Iterator extends Traversable { /* Methods */ public current(): mixed public key(): mixed public next(): void public rewind(): void public valid(): bool } 

[01:48] <discord-raku-bot> <Nemokosch> well this is a bit harder to actually implement I guess

[01:48] <discord-raku-bot> <Nemokosch> with the rewind

[01:50] <discord-raku-bot> <Nemokosch> still, I have to say, given the core of the Javascript language, the extensions from ES6 onwards are really gems of shining genius

[01:51] <discord-raku-bot> <Nemokosch> also unorthodox af

[01:51] <discord-raku-bot> <Nemokosch> but it seems kinda justified when it comes to a language that has not seen any serious revisions for almost 20 years

[01:51] <discord-raku-bot> <Nemokosch> and was deliberately designed to be banal

[01:53] <discord-raku-bot> <Nemokosch> one example that illustrates the desperation, though, is 'use strict'

[01:57] <discord-raku-bot> <el gatito (** advocate)> didn't fix the type system tho 😭

[02:05] <discord-raku-bot> <el gatito (** advocate)> which is why typescript is a godsend

[02:08] <discord-raku-bot> <Nemokosch> what was wrong with the type system?

[02:08] <discord-raku-bot> <Nemokosch> ngl I also admire TS, mostly because of laziness

[02:08] <discord-raku-bot> <el gatito (** advocate)> weak typing 😩

[02:09] <discord-raku-bot> <Nemokosch> Without TS, I basically don't know the API of a random Node module

[02:09] <discord-raku-bot> <Nemokosch> but that's really the biggest use I see for it

[02:11] <discord-raku-bot> <el gatito (** advocate)> typescript complains when you give the wrong type so no more weak typing

[02:11] <discord-raku-bot> <el gatito (** advocate)> unless you want

[02:11] <discord-raku-bot> <Nemokosch> I tend to use == and fortunately the linter won't complain by default

[02:12] <discord-raku-bot> <Nemokosch> but yeah all of a sudden it's statically known what types can hit that comparison

[02:14] <discord-raku-bot> <el gatito (** advocate)> the same with raku too typing will allow me to write strongly typed codebase

[02:21] <discord-raku-bot> <Nemokosch> I wonder how much static analysis will be possible, and how much it will be just runtime checks, PHP style

[02:21] <discord-raku-bot> <Nemokosch> Also, be warned that the type system demands quite some care to get solid

[02:41] *** rf joined
[03:03] *** rf left
[03:58] <discord-raku-bot> <el gatito (** advocate)> m:perl my @a = <a b c>; say "this is @a"; 

[03:58] <discord-raku-bot> <Raku eval>  this is @a  

[03:58] <discord-raku-bot> <el gatito (** advocate)> what

[03:58] <discord-raku-bot> <el gatito (** advocate)> m:perl my @a = <a b c>; say "this is @a[]"; 

[03:58] <discord-raku-bot> <Raku eval>  this is a b c  

[03:58] <discord-raku-bot> <el gatito (** advocate)> why

[03:59] <discord-raku-bot> <el gatito (** advocate)> m:perl my @a = <a b c>; say "this is $@a"; 

[03:59] <discord-raku-bot> <Raku eval>  this is a b c  

[04:08] <MasterDuke> because `@` is now a common character to appear in strings where you don't want them to interpolate, i.e., email addresses

[04:10] <discord-raku-bot> <el gatito (** advocate)> $ is also common?

[04:13] <discord-raku-bot> <el gatito (** advocate)> and you can just escape them or use ' strings?

[05:23] *** Heptite left
[08:30] <discord-raku-bot> <Nemokosch> @ is more common than $

[08:30] <discord-raku-bot> <Nemokosch> having said that, this is inconsistent, no point in trying to explain it away xD

[08:31] <discord-raku-bot> <Nemokosch> however, it's also insignificant

[09:03] *** Manifest0 joined
[09:10] *** dakkar joined
[09:23] <discord-raku-bot> <el gatito (** advocate)> actually {} interpolation most goated

[09:23] <discord-raku-bot> <el gatito (** advocate)> m:perl say "1 + 1 = {1 + 1}" 

[09:23] <discord-raku-bot> <Raku eval>  1 + 1 = 2  

[09:51] <discord-raku-bot> <Nemokosch> because it actually creates a block

[10:09] *** ab5tract joined
[10:15] <discord-raku-bot> <el gatito (** advocate)> then invokes it immediately

[10:15] <discord-raku-bot> <el gatito (** advocate)> hmm

[10:33] <discord-raku-bot> <Nemokosch> m: say "1 + 1 = &{1 + $_}(2)"

[10:33] <discord-raku-bot> <Raku eval>  1 + 1 = 3  

[10:33] <discord-raku-bot> <Nemokosch> needed the ampersand

[11:03] *** frost left
[11:16] *** frost joined
[11:16] *** ab5tract left
[11:29] *** ab5tract joined
[11:42] *** ab5tract left
[11:53] *** ab5tract joined
[12:13] *** frost left
[12:28] <discord-raku-bot> <Nahita> m: sub f(\n?) { }

[12:28] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Malformed parameter at /home/glot/main.raku:1 ------> sub f(\n⏏?) { }     expecting any of:         constraint  

[12:28] <discord-raku-bot> <Nahita> m: sub f($n? is raw) { }

[12:28] <discord-raku-bot> <Raku eval>   

[13:17] *** Heptite joined
[13:28] *** saint- left
[14:09] *** QhpAptyj9hj0RQwM joined
[14:33] *** jgaz joined
[14:40] *** habere-et-disper joined
[14:44] <habere-et-disper> Hello rakoons o/ :D

[14:44] <habere-et-disper> Is it reasonable that

[14:44] <habere-et-disper> m: <a b>.join

[14:44] <camelia> rakudo-moar 7ad82e9c6: ( no output )

[14:44] <habere-et-disper> m: join <a b>

[14:44] <camelia> rakudo-moar 7ad82e9c6: ( no output )

[14:44] <habere-et-disper> give different results? I realize that with the prefix form you have to do:

[14:44] <habere-et-disper> m: join '', <a b>

[14:44] <camelia> rakudo-moar 7ad82e9c6: ( no output )

[14:44] <habere-et-disper> But it seems somewhat irregular that a default value appears supplied in postfix form but not in prefix form. Am I missing something? Thanks!

[14:44] <habere-et-disper> m: say <a b>.join

[14:44] <camelia> rakudo-moar 7ad82e9c6: OUTPUT: «ab␤»

[14:44] <habere-et-disper> m: say join <a b>

[14:44] <camelia> rakudo-moar 7ad82e9c6: OUTPUT: «␤»

[14:53] *** habere-et-disper left
[15:00] <discord-raku-bot> <Nemokosch> m: say join (1, 2)

[15:00] <discord-raku-bot> <Raku eval>    

[15:00] <discord-raku-bot> <Nemokosch> weeeell

[15:01] <discord-raku-bot> <Nemokosch> oh right

[15:01] <discord-raku-bot> <Nemokosch> the argument order is different

[15:01] <discord-raku-bot> <Nemokosch> m: say join '', (1, 2)

[15:01] <discord-raku-bot> <Raku eval>  12  

[15:02] <discord-raku-bot> <Nemokosch> I think this is regular, in the sense that all array-ish subs have this argument layout

[15:02] <discord-raku-bot> <Nemokosch> map, grep, and so on

[15:03] <discord-raku-bot> <Nemokosch> the question is rather: why a one-argument call succeeds with whatever result

[15:52] <ab5tract> m: say join |<a b>

[15:52] <camelia> rakudo-moar 7ad82e9c6: OUTPUT: «b␤»

[15:54] *** habere-et-disper joined
[15:54] <ab5tract> seems weird

[15:54] *** rf joined
[15:55] *** QhpAptyj9hj0RQwM left
[16:00] <discord-raku-bot> <Nemokosch> I mean... that's one b, separated by a's

[16:00] <discord-raku-bot> <Nemokosch> 😄

[16:54] <habere-et-disper> The documentation is correct, reading "The method form also allows you to omit the separator", but I'd be interested as to why the prefix form is not afforded it.

[16:54] <habere-et-disper> The join documentation also gives an example of:

[16:54] <habere-et-disper> m: say join ', ', <a b c>;

[16:54] <camelia> rakudo-moar 7ad82e9c6: OUTPUT: «a, b, c␤»

[16:54] <habere-et-disper> Which appears to currently fail !?

[16:55] <habere-et-disper> I get the following on the REPL (v2022-12):

[16:55] <habere-et-disper> say join ', ', <a b c>;

[16:55] <habere-et-disper> ===SORRY!=== Error while compiling:

[16:55] <habere-et-disper> Two terms in a row

[16:55] <habere-et-disper> ------> say join<HERE> ', ', <a b c>;

[17:35] <discord-raku-bot> <Nemokosch> can't reproduce on the same version

[17:36] <discord-raku-bot> <Nemokosch> maybe you have actually missed a space between join and ', '?

[17:37] *** dakkar left
[17:38] <habere-et-disper> No, and even weirder it appears to work fine again !?

[17:53] *** habere-et-disper left
[18:02] *** Heptite left
[18:07] *** Heptite joined
[18:16] *** ab5tract left
[18:30] *** ab5tract joined
[18:57] <discord-raku-bot> <Nahita> if I have a .rakumod file for common use, what can I do so that use Module from anywhere uses it

[18:58] <discord-raku-bot> <Nahita> tried moving the file to some places where it reports it couldn't find it, it still didn't find it

[18:58] <discord-raku-bot> <Nahita> it's a single .rakumod file

[19:00] <discord-raku-bot> <Nahita> i faked a meta6.json and zef installed it but that's perhaps not the way

[19:03] <discord-raku-bot> <p6steve> why not zef install https:://github.com/path-to/Module.git ?

[19:03] <discord-raku-bot> <Nahita> it's a single file locally

[19:04] <discord-raku-bot> <p6steve> does zef install /local-path/Module.rakumod work (I never tried it)?

[19:05] <discord-raku-bot> <Nahita> thanks but that searched for the internet so it did not work

[19:07] <discord-raku-bot> <Nahita> by internet i mean it updated mirrors fez, cpan etc. and says No candidates found matching identity

[19:08] <discord-raku-bot> <Nahita> i can make an alias for "raku -Ipath/to/module" i guess...

[19:08] <discord-raku-bot> <Nahita> but there is a better way probably

[19:09] <discord-raku-bot> <p6steve> according to the zef README

[19:09] <discord-raku-bot> <p6steve>  # PATH zef install ./Raku-Net--HTTP 

[19:09] <discord-raku-bot> <p6steve> should work ... need to start the local path with / or .

[19:10] <discord-raku-bot> <p6steve> https://github.com/ugexe/zef#more-cli

[19:10] <discord-raku-bot> <Nahita> well i first tried "zef install ." in the folder the module resides in

[19:10] <discord-raku-bot> <Nahita> then i got "Type check failed for return value; expected IO::Path but got Any (Any)" message

[19:10] <discord-raku-bot> <Nahita> then i faked a meta6.json

[19:10] <discord-raku-bot> <Nahita> then "zef install ." worked

[19:11] <discord-raku-bot> <Nahita> now i tried "zef install ./folder"

[19:11] <discord-raku-bot> <Nahita> same message as above

[19:12] <discord-raku-bot> <Nahita> which is not super helpful message but i guess it wants to say it couldn't fine meta6.json or something idk

[19:12] <discord-raku-bot> <Nemokosch> I guess you could just copy it to a folder in RAKULIB?

[19:13] <discord-raku-bot> <p6steve> yeah I have tried locally on my machine and have the same issue

[19:14] <discord-raku-bot> <p6steve> making a mini module (ie spoof the META6.json locally) and then zef install . works for me

[19:15] <discord-raku-bot> <p6steve> as @Nemokosch mentions perhaps you can symlink or append the Module path to RAKULIB

[19:22] <discord-raku-bot> <Nahita> in Perl, i put a .pm file in a place mentioned in @INC, it works. in Python, i put a .py file in a place mentioned in sys.path, it works. in Raku, i put a .rakumod file to such place, it doesn't work

[19:22] <discord-raku-bot> <Nahita> should i precompile the module or something?

[19:23] <discord-raku-bot> <Nemokosch> it should work without

[19:23] <discord-raku-bot> <Nahita> let me try that maybe

[19:23] <discord-raku-bot> <Nemokosch> it definitely works locally by setting -I to the sufficient location

[19:23] <discord-raku-bot> <Nemokosch> It would only make sense that it works the other way around as well

[19:28] <discord-raku-bot> <Nahita> moving the precompiled thing didn't work too

[19:30] *** ab5tract left
[19:35] <discord-raku-bot> <Nahita> asking in the other place.

[19:53] *** ab5tract joined
[23:09] <discord-raku-bot> <elcaro> You could to a copy it to a folder, eg. $HOME/.local/lib/raku/Module.rakumod Then export the path to the env var RAKULIB  For example, I have a line in my .profile file   export RAKULIB=$HOME/.local/lib/raku  And now any modules I throw in there are always available to use

[23:10] <discord-raku-bot> <elcaro> If you're on windows, replace $HOME with %USERPROFILE%, but really, it doesn't matter where you put them, so long as RAKULIB points to it. Exporting env vars is also annoying in Windows (last I checked).

[23:56] *** Heptite left
