[00:20] *** Manifest0 left
[03:05] *** mcmillhj left
[03:09] *** sjn left
[03:19] *** sjn joined
[04:19] *** Summer joined
[05:49] *** Summer left
[06:17] *** Summer joined
[06:39] *** teatime left
[06:41] *** teatime joined
[08:12] *** Summer left
[08:55] *** Manifest0 joined
[08:58] *** Summer joined
[09:08] *** dakkar joined
[12:46] <discord-raku-bot> <librasteve> m: my @a = 1,2,3; my @b := 1..3; say (@a eqv @b);

[12:46] <discord-raku-bot> <Raku eval>  False 

[12:47] <discord-raku-bot> <librasteve> m: my @a = 1,2,3; my @b := 1..3; say (@a.list eqv @b.list);

[12:47] <discord-raku-bot> <Raku eval>  False 

[12:47] <lizmat> m: my @b := 1..3; dd @b

[12:47] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «1..3␤»

[12:47] <discord-raku-bot> <librasteve> m: my @a = 1,2,3; my @b := 1..3; say (@a.flat eqv @b.flat);

[12:47] <discord-raku-bot> <Raku eval>  True 

[12:47] <lizmat> m: my @b := 1..3; dd @b.^name

[12:47] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «"Range"␤»

[12:48] <lizmat> librasteve in your examples, @b is *not* an Array, but a Range

[12:48] <lizmat> m: my @b := 1..3; dd @b.list

[12:48] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «(1, 2, 3)␤»

[12:48] <discord-raku-bot> <librasteve> yeah - I was using a Range as a shorthand for any lazy generator ...

[12:48] <lizmat> m: my @a = 1,2,3; dd @a.^name

[12:48] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «"Array"␤»

[12:49] <lizmat> m: my @a = 1,2,3; dd @a.list.^name

[12:49] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «"Array"␤»

[12:49] <lizmat> .list on Arrays returns the invocant

[12:49] <lizmat> m: my @a = 1,2,3; dd @a.List.^name

[12:49] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «"List"␤»

[12:49] <lizmat> if you really want a List, you need to coerce to List

[12:49] <lizmat> m: my @a = 1,2,3; my @b := 1..3; say (@a.List eqv @b.List);

[12:49] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «True␤»

[12:50] <discord-raku-bot> <librasteve> m: my @a = 1,2,3; my @b := 1..3; say (@a eq @b);

[12:50] <discord-raku-bot> <Raku eval>  True 

[12:50] <discord-raku-bot> <librasteve> oh - so eqv does a match on type also

[12:50] <lizmat> that's just comparing stringification of @a and @b

[12:50] <lizmat> yes, otherwise it's not equivalent

[12:52] <discord-raku-bot> <librasteve> xx.List is it then

[12:52] <discord-raku-bot> <librasteve> tx!

[12:58] <lizmat> if you're working with large arrays, then you can use @a.List(:view)

[12:59] <lizmat> by which you're saying that you won't change the array for the lifetime of the List

[16:00] *** swaggboi left
[16:13] *** swaggboi joined
[17:29] *** dakkar left
[18:30] *** mcmillhj joined
[18:31] <mcmillhj> Can a `sub` that is a class attribute be scoped under that class? i.e. with access to `self`

[18:32] <mcmillhj> for example, `Direction.new(x => 0, y => -1, bound => sub { self.y > 0  })`

[18:33] <discord-raku-bot> <nemokosch> I think it should be declared as a method for starters

[18:39] <mcmillhj> yep, that makes a lot of sense. Still not used to methods existing tbf

[19:28] *** Summer left
[19:28] *** Summer joined
[19:59] *** Summer left
[19:59] *** Summer joined
[20:29] *** Summer left
[20:30] *** Summer joined
[21:00] *** Summer left
[21:00] *** Summer joined
[21:31] *** Summer left
[21:31] *** Summer joined
[21:57] *** mcmillhj left
[22:01] *** Summer left
[22:02] *** Summer joined
[22:32] *** Summer left
[22:32] *** Summer joined
[23:03] *** Summer left
[23:03] *** Summer joined
[23:33] *** Summer left
[23:34] *** Summer joined
[23:57] *** mcmillhj joined
[23:57] <mcmillhj> sorry for the deluge of questions over the past few days. I have another one though :)

[23:59] <mcmillhj> I have a class called Point that is stored in an Array and then sorted. `my Point @points = [...];`. I know that sort returns a Seq but it looks like all the type information gets erased. Is there someway to get a Seq[Point] from `.sort`?

