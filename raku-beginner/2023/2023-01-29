[00:02] <discord-raku-bot> <Nemokosch> 💎

[00:37] <discord-raku-bot> <:(**@rest, *%rest)> yeah ruby is pretty perl-ish

[00:45] <discord-raku-bot> <stevied> The guy who created ruby did in fact model a lot of it after Perl.

[01:09] *** raschipi joined
[01:33] <discord-raku-bot> <stevied> ok, reviewing https://learnxinyminutes.com/docs/raku/ to find basic stuff to re/learn. See this:   =for comment Use the same syntax for multiline comments to embed comments. for #`(each element in) @array {     put #`(or print element) $_ #`(with newline); } 

[01:33] <discord-raku-bot> <stevied> what is =for comment exactly?

[01:35] <discord-raku-bot> <:(**@rest, *%rest)> a pod directive

[01:35] *** Heptite left
[01:36] <discord-raku-bot> <stevied> is the "for" significant?

[01:36] <raschipi> "Paragraph blocks begin by a =for marker and end by the next Pod6 directive or the first blank line."

[01:36] <raschipi> https://docs.raku.org/language/pod

[01:37] <discord-raku-bot> <stevied> how is =for comment different from =comment?

[01:38] <raschipi> =comment is single line

[01:39] <discord-raku-bot> <stevied> hmm, afaict, they work the same way

[01:39] <raschipi> Well, that's what the docs say, I see lernXinYminutes says differently. You should test

[01:40] <discord-raku-bot> <stevied> yeah, that's what brought me here, I can't tell the difference

[01:42] <raschipi> I think it could be what it does with configuration, or the relationship to other blocks when rakudoc is called on it. I'm not sure.

[01:49] <discord-raku-bot> <stevied> yeah, looks like =for is for a paragraph block: https://design.raku.org/S26.html#Paragraph_blocks

[01:55] <discord-raku-bot> <stevied> only think I could find in official docs is this: https://docs.raku.org/language/syntax#Pod_comments

[01:58] <raschipi> https://docs.raku.org/language/pod talks about =for and =comment

[01:59] <discord-raku-bot> <stevied> yeah, seems like docs might be wrong then

[01:59] <discord-raku-bot> <stevied> because =comment behaves just like =for comment afaict

[02:04] <raschipi> m:=for comment

[02:06] <raschipi> Can't put anything after =for comment, needs to start at the next line

[02:07] <discord-raku-bot> <stevied> seems like a weird distinction between the two

[02:07] <raschipi> Well, it shows they aren't exactly the same

[02:07] <discord-raku-bot> <stevied> why would you use =for comment when you can just use =comment?

[02:07] <discord-raku-bot> <stevied> true

[02:11] <raschipi> Reading the docs again, =for comment is a configuration block for a =comment block

[02:12] <raschipi> When there's a newline, the =comment block begins, but there could be multiple lines starting with = with configuration for the =comment block.

[02:14] <raschipi> Of course, =comment blocks will be ignored by the pod parser, so I don't think there's much to be done in a =for comment block...

[02:15] <raschipi> But a =for head1 block, for example, will configure a =head1 block.

[02:18] <raschipi> =for head1 :a-first-line-key<firstvalue> :another-first-line-key<xyz> ␤=     :a-second-line-key(42)␤= :a-third-line-key<third>␤Content for the header block

[02:24] <discord-raku-bot> <stevied> Weird

[02:24] <discord-raku-bot> <stevied> It sure what a config is good for

[02:26] <discord-raku-bot> <:(**@rest, *%rest)> oh i found tkinter on raku https://raku.land/github:ALANVF/P6TK

[02:50] <discord-raku-bot> <:(**@rest, *%rest)> m: say

[02:50] <discord-raku-bot> <:(**@rest, *%rest)> why is bare say unsupported

[02:52] <raschipi> Do you know Perl?

[02:52] <discord-raku-bot> <:(**@rest, *%rest)> whats with perl?

[02:53] <raschipi> Bare print in Perl meant 'print $_'

[02:54] <discord-raku-bot> <:(**@rest, *%rest)> :cameliathink:

[02:54] <raschipi> In Raku '.say' is the equivalent.

[02:54] <discord-raku-bot> <:(**@rest, *%rest)> by say i mean say()

[02:55] <discord-raku-bot> <:(**@rest, *%rest)> but yeah is say special-cased to give this warning

[02:55] <discord-raku-bot> <:(**@rest, *%rest)> or any functions at the top level will do

[02:56] <raschipi> Perl is inconsistent about this, bare functions sometimes meant calling them on empty arguments, sometimes calling them on the topic...

[02:57] <discord-raku-bot> <:(**@rest, *%rest)> perl bad 😭

[02:59] <raschipi> So in Raku ones has to specify what they want.

[03:00] <discord-raku-bot> <:(**@rest, *%rest)> m: say given 123 

[03:00] <discord-raku-bot> <:(**@rest, *%rest)> m: .say given 123 

[03:00] <raschipi> And yes, the language does detect the most common pitfalls from people comming from Perl. It was meant to be a successor at first.

[03:00] <discord-raku-bot> <:(**@rest, *%rest)> m: say($_) given 123 

[03:01] <discord-raku-bot> <:(**@rest, *%rest)> m: 1 ~~ 1

[03:01] <discord-raku-bot> <:(**@rest, *%rest)> m: say 1 ~~ 1

[03:02] <discord-raku-bot> <:(**@rest, *%rest)> is ~~ the smart match operator does it pattern match?

[03:03] *** Heptite joined
[03:06] <raschipi> Technically, the samart match operator calls .ACCEPTS on the left argument with the right argument as an argument.

[03:07] <raschipi> But yes, it does work kind like a set operator and pattern match.

[03:08] <discord-raku-bot> <:(**@rest, *%rest)> > <raschipi> Technically, the samart match operator calls .ACCEPTS on the left argument with the right argument as an argument. the opposite?

[03:08] <raschipi> Right, the opposite, sorry.

[03:09] <raschipi> Calls .ACCEPTS on the left argument with the right side as an argument.

[03:09] <discord-raku-bot> <:(**@rest, *%rest)> m: say ‘RAKU’ ~~ /raku/i

[03:10] <discord-raku-bot> <:(**@rest, *%rest)> m: say ‘RAKU’ ~~ /raku/:i

[03:10] <discord-raku-bot> <:(**@rest, *%rest)> m: say ‘RAKU’ ~~ :i/raku/

[03:11] <discord-raku-bot> <:(**@rest, *%rest)> m: say ‘RAKU’ ~~ rx:i/raku/

[03:11] <discord-raku-bot> <:(**@rest, *%rest)> perl and javascript users be like

[03:12] <raschipi> The character ‘ kills my Raku REPL 🥲

[03:15] <raschipi> I'm having a lot of REPL problems lately

[03:44] *** Heptite left
[03:55] <discord-raku-bot> <:(**@rest, *%rest)> say: 1 / 0

[03:55] <discord-raku-bot> <:(**@rest, *%rest)> m: say 1 / 0

[03:56] <raschipi> m: $a = 1/0; say ''

[03:56] <camelia> rakudo-moar 85240f0c2: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Variable '$a' is not declared.  Perhaps you forgot a 'sub' if this was␤intended to be part of a signature?␤at <tmp>:1␤------> <BOL>⏏$a = 1/0; say ''␤»

[03:57] <raschipi> m: my $a = 1/0; say ''

[03:57] <camelia> rakudo-moar 85240f0c2: OUTPUT: «␤»

[03:57] <discord-raku-bot> <:(**@rest, *%rest)> m: try {   1 / 0 } catch (Exception $e) {   say 'hi' } 

[04:01] <raschipi> m: try { say  1 / 0;  CATCH {   say 'hi' }}

[04:01] <camelia> rakudo-moar 85240f0c2: OUTPUT: «hi␤Attempt to divide by zero when coercing Rational to Str␤  in block <unit> at <tmp> line 1␤␤»

[04:02] <raschipi> m: try {1 / 0;  CATCH {   say 'hi' }}

[04:02] <camelia> rakudo-moar 85240f0c2: ( no output )

[04:03] <discord-raku-bot> <:(**@rest, *%rest)> m: try {   1 / 0 }; if $! {   say 'hi': } 

[04:03] <discord-raku-bot> <:(**@rest, *%rest)> m: try {   1 / 0 }; if $! {   say 'hi'; } 

[04:03] <discord-raku-bot> <:(**@rest, *%rest)> m: try {   say 1 / 0 }; if $! {   say 'hi'; } 

[04:04] <discord-raku-bot> <:(**@rest, *%rest)> m: try {   say 1 / 0 }; if $! {   dd $!; } 

[04:04] <raschipi> 1/0 isn't an Exception, it's a Failure

[04:04] <raschipi> try catches exceptions, not failures

[04:05] <discord-raku-bot> <:(**@rest, *%rest)> :cameliathink:

[04:05] <raschipi> But a Failure will throw an Exception if you try to use it as a normal value

[04:05] <discord-raku-bot> <:(**@rest, *%rest)> 2 ways to handle failures hmm

[04:06] <raschipi> Yep

[04:06] <discord-raku-bot> <:(**@rest, *%rest)> m: dd 1/0

[04:22] <discord-raku-bot> <:(**@rest, *%rest)> m: dd 1.0/0

[04:22] <discord-raku-bot> <:(**@rest, *%rest)> m: say 1.0/0

[04:23] <discord-raku-bot> <:(**@rest, *%rest)> m: say float(1)/0

[04:23] <discord-raku-bot> <:(**@rest, *%rest)> m: 1.Num/0

[04:23] <discord-raku-bot> <:(**@rest, *%rest)> how do i get the float behavior

[04:24] <raschipi> m: 1e0/0e0

[04:24] <camelia> rakudo-moar 85240f0c2: OUTPUT: «Attempt to divide 1 by zero using /␤  in block <unit> at <tmp> line 1␤␤»

[04:24] <raschipi> Use scientific notation.

[04:24] <raschipi> e0 at the end

[04:25] <raschipi> m: dd 1e0/0e0

[04:25] <camelia> rakudo-moar 85240f0c2: OUTPUT: «Failure.new(exception => X::Numeric::DivideByZero.new(using => "/", details => Any, numerator => 1e0), backtrace => Backtrace.new)␤»

[04:27] *** Heptite joined
[04:32] <discord-raku-bot> <:(**@rest, *%rest)> float division also returns an error hmm

[04:32] <discord-raku-bot> <:(**@rest, *%rest)> m: dd Inf.WHAG

[04:32] <discord-raku-bot> <:(**@rest, *%rest)> m: Inf.WHAT

[04:33] <discord-raku-bot> <:(**@rest, *%rest)> m: dd Inf.WHAT

[04:45] <raschipi> g'night, have a good one

[04:45] *** raschipi left
[05:02] *** MasterDuke left
[06:02] <discord-raku-bot> <:(**@rest, *%rest)> is there a discussion on the rationale behind raku's weird unconventional jargon

[07:23] *** snonux joined
[07:38] *** Heptite left
[07:52] *** rantanplan joined
[08:52] *** Heptite joined
[09:12] <discord-raku-bot> <Nemokosch> Idk, I bumped into a github discussion a couple of months ago

[09:12] <discord-raku-bot> <Nemokosch> With the monkey pragmas

[09:13] <discord-raku-bot> <Nemokosch> And there I said that some names are horribly unfriendly, like the whole HOW jargon

[09:32] <discord-raku-bot> <Nemokosch> nice

[09:57] <discord-raku-bot> <gfldex> Your question doesn't make sense. All jargons are conventional.

[10:07] <discord-raku-bot> <Nemokosch> oh man the apologetics...

[10:33] <discord-raku-bot> <Nahita> moments ago, in another language, i felt a need for inline comments :y

[10:37] <discord-raku-bot> <Nahita> instead, i put spaces so i can notice later

[10:38] <discord-raku-bot> <gfldex> @:(**@rest, *%rest) In case you are actually interested in the discussions about Perl 6 (your tone towards anything Raku strikes me as very dismissive), you can find them there: https://irclogs.raku.org/perl6/index.html

[11:19] *** rantanplan left
[11:19] *** snonux left
[11:24] *** ab5tract joined
[12:11] *** rantanplan joined
[12:11] *** rantanplan left
[12:12] *** snonux joined
[12:17] *** snonux left
[12:54] <discord-raku-bot> <:(**@rest, *%rest)> python?

[12:54] <discord-raku-bot> <Nahita> it is

[12:54] <discord-raku-bot> <Nahita> somewhere in method chaining i needed it

[12:55] <discord-raku-bot> <:(**@rest, *%rest)> im not being dismissive of raku 😭 raku is a cool language

[12:56] <discord-raku-bot> <:(**@rest, *%rest)> what is your example exactly

[12:58] <discord-raku-bot> <gfldex> I would use "weird" as a praise.

[13:05] <discord-raku-bot> <:(**@rest, *%rest)> no i mean unconventional wrt terminology from other languages something like variadic rest arguments being called “slurps”

[13:09] <discord-raku-bot> <gfldex> There are 2 reasons for that. Fistly, Larry is a bloddy hippie. But mostly, because they don't quite work like variadic args in other languages.

[13:10] <discord-raku-bot> <Nemokosch> It's a bit overboard to call out somebody for using the word "weird" about something that is unusual and not necessarily in a positive way

[13:11] <discord-raku-bot> <Nemokosch> I rather find this gatekeeping dismissive regarding improvements

[13:14] <discord-raku-bot> <Nemokosch> Rather than saying "because it made sense 20 years ago in a completely different historical context", we could think what value it provides now, and how to make it better in any regard

[13:17] *** ab5tract left
[13:19] <discord-raku-bot> <:(**@rest, *%rest)> raku is a decent language imo but there are some things im not exactly comfortable with such as the pervasiveness of coercion in built in raku operators (there is even a base class dedicated to coercive methods)

[13:22] <discord-raku-bot> <Nemokosch> You mean Cool? 🤣

[13:22] <discord-raku-bot> <:(**@rest, *%rest)> or the implicit *%_ in function signatures

[13:23] <lizmat> fwiw, I agree with the latter  :-)

[13:23] <discord-raku-bot> <:(**@rest, *%rest)> yeah pretty sure it stands for coerceable objects lmao /half-joke

[13:23] <discord-raku-bot> <Nemokosch> XD

[13:24] <discord-raku-bot> <Nemokosch> "Convenient OO Loop"

[13:24] <discord-raku-bot> <Nemokosch> I don't like the name but I do like the principle

[13:24] <discord-raku-bot> <:(**@rest, *%rest)> how is it a loop

[13:24] <discord-raku-bot> <Nemokosch> I have no idea, quoting the docs

[13:26] <discord-raku-bot> <Nemokosch> In my experience, the principle itself is more convenient, WHILE being at least as solid, than the Pythonic "cast everything only to get the generic call right" approach

[13:29] <discord-raku-bot> <:(**@rest, *%rest)> granted there are different operators for different types and it isn’t as bad as javascript

[13:30] <discord-raku-bot> <gfldex>  *%_ is only present in Method, not in Sub and very useful as such, or callsame would become dependent on stable interfaces in parent classes.

[13:31] <lizmat> true, but I don't think that compares to the woes of misspelling named arguments that go into oblivion without any sound

[13:31] <discord-raku-bot> <Nemokosch> For what it's worth, I like Javascript as well xD

[13:32] <discord-raku-bot> <Nemokosch> lizmat+=1

[13:33] <discord-raku-bot> <Nemokosch> Tbh the only language (family) I wouldn't use is POSIX Shell, add Batch obviously

[13:34] <discord-raku-bot> <Nemokosch> But for those, I feel strongly that nobody ever should use them, it's damage to the whole industry

[13:34] <discord-raku-bot> <:(**@rest, *%rest)> tbh js can be a good lang if not for its typing mess especially since es6

[13:35] <discord-raku-bot> <Nemokosch> At the moment you create the first variable or add the first control structure, you should delete it and rewrite it in a programming language

[13:37] <discord-raku-bot> <:(**@rest, *%rest)> +1

[13:38] <discord-raku-bot> <Nemokosch> Not sure how the bridge works - that was a +1 to lizmat again

[13:40] <discord-raku-bot> <:(**@rest, *%rest)> m: sub f {   %_ }  f a => 1, b => 2; 

[13:40] <discord-raku-bot> <Nemokosch> Implicit *%_ could maybe go in 6.f? 6.e is already getting very complex

[13:40] <discord-raku-bot> <:(**@rest, *%rest)> m: sub f { }  f a => 1, b => 2; 

[13:40] <discord-raku-bot> <:(**@rest, *%rest)> ok

[13:41] <discord-raku-bot> <:(**@rest, *%rest)> i noticed that i can make unnamed arguments basically just thrown away by the function

[13:42] <gfldex> lizmat: getting dynvars wrong can also have *interesting* results. A pragma and/or compiler switch that would warn on used arguments would not hurt, tho.

[13:42] <discord-raku-bot> <:(**@rest, *%rest)> m: sub f($a, $) {   say $a; }  f(‘hi’, ‘bye’); 

[13:42] <lizmat> gfldex: yeah, that's pretty high on my list :-)

[13:43] <discord-raku-bot> <Nahita> Normal flow was sth like this py metric(trues.mul(scale), preds.mul(scale).clip(lower=0, upper=UPPER_LIMITS[place])  Then preds already came scaled, so it became py metric(trues.mul(scale), preds           .clip(lower=0, upper=UPPER_LIMITS[place])  I wished to write plain metric(trues.mul(scale), preds#`(already-scaled).clip(lower=0, upper=UPPER_LIMITS[place]) 

[13:44] <discord-raku-bot> <Nemokosch> Oh, this reminds me of another funny issue...

[13:44] <discord-raku-bot> <:(**@rest, *%rest)>  metric(trues.mul(scale),   preds # already scaled \   .clip(lower=0, upper=UPPER_LIMITS[place]), ...) 

[13:44] <discord-raku-bot> <:(**@rest, *%rest)> not sure if that would work

[13:45] <discord-raku-bot> <Nahita> you don't need \

[13:45] <discord-raku-bot> <Nemokosch> You may know that .& calls cannot be detached, unlike . calls

[13:45] <discord-raku-bot> <Nemokosch> This in itself is debatable... but

[13:46] <discord-raku-bot> <Nemokosch> If you do foo .bar.&baz, that will also fail!

[13:46] <discord-raku-bot> <:(**@rest, *%rest)> :cameliathink:

[13:46] <discord-raku-bot> <Nemokosch> The detachment escalates

[13:47] <discord-raku-bot> <Nahita> this reads worse IMO

[13:50] <discord-raku-bot> <:(**@rest, *%rest)> are there any more sigils other than $@%&

[13:52] <discord-raku-bot> <:(**@rest, *%rest)> does raku grammar facility have tree-shaping capabilites

[13:54] *** raschip joined
[13:59] <raschip> .

[13:59] <discord-raku-bot> <:(**@rest, *%rest)> raschip: what

[14:01] <discord-raku-bot> <Nemokosch> IRC message update?

[14:02] <raschip> I wanted to see if the logs were in local time or other time zone, so I sent a message to see what time it would have in the logs.

[14:03] <discord-raku-bot> <Nemokosch> Maybe UTC?

[14:04] <raschip> Yes, it's UTC, but I didn't know that until I tested it.

[14:04] <discord-raku-bot> <Nemokosch> This always gets me confused as well

[15:07] <discord-raku-bot> <:(**@rest, *%rest)> as in the ability to discard terminals and inline branches

[15:08] <discord-raku-bot> <Nemokosch> 🤔

[15:18] <discord-raku-bot> <:(**@rest, *%rest)> https://lark-parser.readthedocs.io/en/latest/tree_construction.html#shaping-the-tree

[15:19] <discord-raku-bot> <:(**@rest, *%rest)> smth like that

[15:20] <discord-raku-bot> <Nemokosch> I've never seen anything like that

[15:23] <discord-raku-bot> <Nemokosch> have you checked grammar action classes?

[15:24] <discord-raku-bot> <Nemokosch> eventually you're building Raku objects so there's quite a lot you are naturally allowed to do

[15:31] <discord-raku-bot> <:(**@rest, *%rest)> essentially i want to create a parse tree that is close to the ast and to do that i need to weed out tokens and branches irrelevant to ast generation and lark let me do it declaratively

[15:38] <discord-raku-bot> <Nemokosch> it's done with action classes

[15:40] <discord-raku-bot> <stevied> Why is the “but” operator called “but?” For the longest time I though it was some kind of control flow mechanism.

[15:40] <discord-raku-bot> <stevied> Had no idea it was for mixins

[15:41] <raschip> From Perl, they can return "0 but True" to have a True with numeric value of 0

[15:41] <raschip> In Raku that's spelled 0 but True instead.

[15:41] <raschip> That's where the word comes from.

[15:42] <discord-raku-bot> <Nemokosch> but is a great idea of way too obscure names...

[15:42] <discord-raku-bot> <:(**@rest, *%rest)> its not "declaratively" but whatever why are actions separate from rules themselves

[15:42] <discord-raku-bot> <stevied> Huh. Thanks. Must have been introduced in later versions of Perl I’m not familiar with.

[15:43] <discord-raku-bot> <:(**@rest, *%rest)> can't it be  token something { 'foo' | 'bar' } action {   # do something with $/ } 

[15:43] <discord-raku-bot> <stevied> I find if I read it as “but also” it kind of makes sense.

[15:43] <discord-raku-bot> <Nemokosch> yep, that helps

[15:44] <discord-raku-bot> <Nemokosch> I don't know, I'm not knowledgeable with grammars tbh

[15:45] <discord-raku-bot> <Nemokosch> one grammar could have multiple AST buildups

[15:45] <discord-raku-bot> <Nemokosch> usually an action class doesn't just keep some theoretic AST but rather builds up an actually useful data structure

[15:47] <discord-raku-bot> <:(**@rest, *%rest)> hmm ok will make an json parser with grammars lol

[15:47] <raschip> They end up separate because Grammars and Action Classes are Classes. And tokens and actions are it's respective methods.

[15:49] <discord-raku-bot> <Nemokosch> another gotcha with this

[15:49] <discord-raku-bot> <Nemokosch> I think this is a really bad gotcha, even...

[15:49] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/traps#Using_certain_names_for_rules/token/regexes

[15:50] <discord-raku-bot> <Nemokosch> I'm absolutely clueless why tokens/regexes are installed with RAW method names

[15:50] <raschip> Yep, but it's also very nice to be able to use the object system to extend a grammar

[15:51] <discord-raku-bot> <Nemokosch> why aren't they turned into something like match:<name>

[15:51] <discord-raku-bot> <Nemokosch> even if only "internally"

[15:51] <raschip> No idea.

[16:03] *** snonux_ joined
[16:04] *** snonux joined
[16:16] <discord-raku-bot> <:(**@rest, *%rest)> are raku grammars parsed by recursive descent? how do they accomodate left recursion?

[16:17] *** snonux left
[16:17] <discord-raku-bot> <Nemokosch> it's PEG parsing from what I know

[16:17] <discord-raku-bot> <Nemokosch> and you can probably transform the grammar if left recursion is a problem

[16:19] *** snonux joined
[16:20] <raschip> Not exactly PEG, because in PEG there's no concept of 'longest token match'.

[16:24] <discord-raku-bot> <Nemokosch> I doubt anybody knows what Raku's grammar parsing "exactly" is

[16:24] <discord-raku-bot> <Nemokosch> it's highly accidental I heard of PEG at all

[16:31] <raschip> Yeah, Raku design takes Computer Science theories into account, but doesn't try to match them. PEG was being developed at the same time as Raku's Grammars and the theory was taken into account.

[16:34] <discord-raku-bot> <Nemokosch> anyway, if somebody tries to actually use it, it would be good to know how it works exactly

[16:38] *** snonux left
[16:38] *** snonux_ left
[17:18] *** snonux joined
[17:18] *** snonux_ joined
[17:35] *** jgaz joined
[18:27] <discord-raku-bot> <stevied> in "class Box {}", doe Box work as an identifier and follow the same naming conventions as a variable?

[18:29] <raschip> m: class Bob's-Burguers {}

[18:29] <camelia> rakudo-moar ea60d168b: ( no output )

[18:29] <raschip> yep

[18:30] <discord-raku-bot> <stevied> ok, reason I ask is I'm looking at https://docs.raku.org/syntax/identifiers#(Syntax)_identifier_identifiers_identifiers and it doesn't mention anything about classes being identifiers

[18:33] <raschip> Well, not directly, but it's in there: use ThatModule:auth<Somebody>:ver<2.7.18.28.18>

[18:33] <raschip> "In the example above, MyModule::var"

[18:34] <discord-raku-bot> <stevied> well, that's what I was kind of wondering. could I give a class the name "MyClass:auth<me>:ver<2.3>"?

[18:34] <discord-raku-bot> <stevied> let's see

[18:35] <discord-raku-bot> <stevied> m: class Box:auth<me>:ver<2.3> { }

[18:36] <raschip> It's ignored

[18:36] <discord-raku-bot> <stevied> yup, that works

[18:36] <discord-raku-bot> <stevied> oh, is it?

[18:36] <raschip> Although these are valid identifiers, it's use is reserved

[18:37] <raschip> TIMTOADY has the colon

[18:37] <discord-raku-bot> <stevied> ok, yeah, if I create two different versions, I get an error

[18:38] <discord-raku-bot> <stevied> Redeclaration of symbol 'Box'.

[18:41] <discord-raku-bot> <stevied> interesting: class { }; throws no error

[18:41] <discord-raku-bot> <stevied> that's an anonymous class, basically?

[18:43] <discord-raku-bot> <Nemokosch> I'd think so... but I can't tell you when they are used

[18:44] <discord-raku-bot> <stevied> this doesn't work:  my $class = class { has $color; } $class.new(color => 'black'); say $class.color; 

[18:45] <discord-raku-bot> <Nemokosch> well, what happens

[18:45] <discord-raku-bot> <stevied> No such method 'color' for invocant of type '<anon|2>'

[18:45] <discord-raku-bot> <stevied> oh, wait, forgot the .

[18:45] <discord-raku-bot> <stevied> nope, still doesn't work

[18:45] <discord-raku-bot> <stevied> m: my $class = class { has $.color; } $class.new(color => 'black'); say $class.color;

[18:46] <discord-raku-bot> <Nemokosch> m:  my $class = class { has $color; } dd $class; 

[18:46] <discord-raku-bot> <Nemokosch> the output itself is a bit broken

[18:47] <discord-raku-bot> <Nemokosch> dd could use some sprucing up, as we speak

[18:47] <discord-raku-bot> <Nemokosch> I think the error was okay, though

[18:47] <discord-raku-bot> <Nemokosch> don't forget that $class was a type object, and type objects don't have attributes

[18:48] <discord-raku-bot> <Nemokosch> m: my $class = class { has $.color; } say $class.new(color => 'black').color;

[18:48] <discord-raku-bot> <Nemokosch> dang

[18:48] <discord-raku-bot> <stevied> huh

[18:50] <discord-raku-bot> <stevied> so you could theoretically pass around these classes. not sure how that's useful but it's interesting

[18:51] <discord-raku-bot> <stevied> this guy writes about "anonymous classes": https://ovid.github.io/blog/politics-in-programming.html

[18:51] <discord-raku-bot> <stevied> go down to "the future" section

[18:52] <discord-raku-bot> <stevied> above my paygrade

[18:53] <raschip> In Java that's a very common idiom. Instead of instantiating a Class directly, you call into MyClassFactory and it gives you an instance.

[19:08] <discord-raku-bot> <stevied> is it accurate to say there is no Class class? But there is the Metamodel::ClassHOW that lies behind a class object. Is that the right way to think about it?

[19:12] <discord-raku-bot> <stevied> https://docs.raku.org/type/Metamodel::ClassHOW

[19:12] <discord-raku-bot> <stevied> "Warning: this class is part of the Rakudo implementation, and is not a part of the language specification."

[19:12] <discord-raku-bot> <stevied> interesting

[19:15] <discord-raku-bot> <stevied> so I guess another implementation could choose to have a parent Class object if it wanted

[19:16] <discord-raku-bot> <stevied> but rakudo uses this metamodel::ClassHOW doohickey

[19:21] <discord-raku-bot> <Nemokosch> simply because metamodel stuff is poorly standardized

[19:25] <discord-raku-bot> <stevied> how long have you been working with raku @Nemokosch ?

[19:47] <discord-raku-bot> <Nemokosch> I started learning it around july-august 2021

[19:48] <discord-raku-bot> <stevied> what did you code in before that?

[19:51] <discord-raku-bot> <stevied> what am I getting wrong here: m: package MyClasses {     package LetterClasses {         my class C {};         my $class = C.new();     } }  my $class = MyClasses::LetterClasses::C.new();

[19:53] <discord-raku-bot> <p6steve> possibly need 'is export' (maybe twice) - IIRC class is export by default unless you apply package/module keywords

[19:55] <discord-raku-bot> <stevied> hmmm, tried but couldn't get it to work. where would "is export" go?

[19:56] <discord-raku-bot> <stevied> oh, doh. I had "my class"

[19:56] <discord-raku-bot> <stevied> now it works

[19:56] <discord-raku-bot> <p6steve> lol

[20:01] <discord-raku-bot> <p6steve> https://docs.raku.org/language/module-packages#When_to_use_modules is what I had in mind

[20:03] <discord-raku-bot> <stevied> yeah, that's something that's still not clear in my mind

[20:04] <discord-raku-bot> <stevied> not sure what the distinction between a package and a module is.

[20:04] <discord-raku-bot> <stevied> it's nothing I could put in words. just vague ideas

[20:05] <discord-raku-bot> <stevied> https://docs.raku.org/language/packages

[20:06] <discord-raku-bot> <stevied> should go back and study that. i've been doing a lot of that lately. going back and reading what I barely understood/remember 6 months ago when I read it the first time. helps.

[20:11] <discord-raku-bot> <p6steve> yeah - takes me several takes too

[20:14] *** Heptite left
[20:23] <discord-raku-bot> <p6steve> my guess fwiw is that 'package' is a generic term for a raku namespace and that class, grammar, module are specific kinds of packages. So therefore 'MyClass::<$foo>' can be used to access foo within 'class MyClass { has $.foo }'

[20:23] <discord-raku-bot> <p6steve> (in other words it actually quite easy when you know what you are doing (and I don't))

[20:24] <discord-raku-bot> <stevied> yeah, sounds about right. I just think of packages as kind of arbitrary namespaces that you can create wherever.

[20:24] <discord-raku-bot> <stevied> not sure if that's correct

[20:41] <discord-raku-bot> <stevied> I wrote this a few years back: https://gist.github.com/sdondley/b01cc5bb1169c8c83401e438a652b84e

[20:42] <discord-raku-bot> <stevied> I want to do the same for Raku OO

[20:43] <discord-raku-bot> <stevied> just take like a small vertical slice of OO in Raku but go into painstaking detail on that one slice and use it as a jumping off point for learning the big picture.

[20:43] <discord-raku-bot> <Nemokosch> well, whatever that came up at university + JS and Pascal basically :DD

[20:47] <discord-raku-bot> <stevied> have you coded professionally?

[20:47] <discord-raku-bot> <Nemokosch> Now I do

[20:48] <stevied_test> my kid is a sophmore at UMass taking comp sci 

[20:48] <discord-raku-bot> <Nemokosch> what is UMass?

[20:48] <stevied_test> University of Massachusetts

[20:49] <discord-raku-bot> <Nemokosch> the big MIT?

[20:49] <stevied_test> naw. MIT is private

[20:49] <stevied_test> UMass is a public university

[20:49] <discord-raku-bot> <Nemokosch> oh right, everything good in the US is private, lol

[20:51] <stevied_test> huh, MIT was actually a government land grant college, but it's privately run. didn't know that

[20:53] <stevied_test> so there would be no MIT if it weren't for government money. go figure. 

[21:03] <raschip> I'm a grad student, doing statistics. In a public University. When I progress enough down the course, I'm gonna do a Raku stats package.

[21:07] *** snonux left
[21:07] *** snonux_ left
[21:07] <discord-raku-bot> <stevied> nice

[21:08] <discord-raku-bot> <stevied> raku seems to attract computer science types, afaict.

[21:10] *** jgaz left
[21:23] <discord-raku-bot> <Nemokosch> good fit for Anton ^^

[21:23] <discord-raku-bot> <stevied> heh, yeah, he was one of the guys I had in mind

[23:01] *** Heptite joined
