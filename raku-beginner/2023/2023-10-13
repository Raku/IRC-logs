[04:38] *** teatime joined
[05:20] <discord-raku-bot> <pelevesque> What is the most elegant way to get all the permutations of a list, but limit it to a given number.  <a b c d

[07:35] <ab5tract_> so you want only N elements of all the permutations of a list?

[07:37] <ab5tract_> m: say <a b c d>.permutations.head(5)

[07:37] <camelia> rakudo-moar f45297d57: OUTPUT: «((a b c d) (a b d c) (a c b d) (a c d b) (a d b c))␤»

[07:44] <ab5tract_> plevesque: if you only wanted to compute a given number of the permutations, instead of all of them and then truncate, you could use `gather` / `take` and a hand-rolled permutation algorithm to generate them lazily. However, it might very well be slower to do it that way

[07:44] <discord-raku-bot> <pelevesque>  my @symbols = qw[! " # $ % & ' * + , - . / : ; < = > ? @ \ ^ _ ` | ~ ]; my $i = 0; for (@symbols X~ @symbols) -> $combo {     say "{++$i} $combo" }  I ended up with this and it works.

[07:44] <discord-raku-bot> <pelevesque> The X~ is what I was looking for.

[07:45] <discord-raku-bot> <pelevesque> I ended up perusing the docs for awhile and learning a zillion other things in the process. What a beautiful language.

[07:48] <ab5tract_> pelevesque: ah, `X` grand. I was going to suggest that first but its functionality is different than classic list permutuation. glad it works for you!

[07:48] <ab5tract_> * `X` is grand

[07:52] <discord-raku-bot> <pelevesque> X is grand... and Raku is grandiose!

[07:57] <ab5tract_> pelevesque: One small suggestion for your example. Have you heard of state variables yet?

[08:03] <discord-raku-bot> <pelevesque> No, I haven't.  I just rewrote my code like this, and much prefer it.  perl my @symbols = qw[! " # $ % & ' * + , - . / : ; < = > ? @ \ ^ _ ` | ~ ]; my $i = 0; say "{++$i} $_" for @symbols X~ @symbols; 

[08:08] <ab5tract_> ah, yes `for` as a statement modifier is quite nice!

[08:09] <ab5tract_> so about state variables: they keep their state between iterations of a loop / executions of a block

[08:09] <ab5tract_> m: for ^3 { state $x = 0; $x.say }

[08:09] <camelia> rakudo-moar f45297d57: OUTPUT: «0␤0␤0␤»

[08:10] <ab5tract_> m: for ^3 { state $x = 0;  ++$x.say }

[08:10] <camelia> rakudo-moar f45297d57: OUTPUT: «0␤Cannot resolve caller prefix:<++>(Bool:D); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw --> Int:D)␤    (int $a is rw --> int)␤    (uint $a is rw --> uint)␤    (Bool $a i…»

[08:10] <ab5tract_> m: for ^3 { state $x = 0;  (++$x).say }

[08:10] <camelia> rakudo-moar f45297d57: OUTPUT: «1␤2␤3␤»

[08:10] <ab5tract_> there we go.

[08:10] <discord-raku-bot> <pelevesque> Ah, that is sweet! love that.

[08:11] <ab5tract_> now, that could  have been used to move your declaration of `$x` into the for loop block

[08:11] <discord-raku-bot> <pelevesque> I love how it makes it possible to bring the counter inside the loop where it kind of belongs iinstead of out in the global space,

[08:11] <ab5tract_> but now you are just passing a single expression instead of a block to for 

[08:11] <ab5tract_> wait: it gets even cooler :D

[08:11] <discord-raku-bot> <pelevesque> right

[08:12] <ab5tract_> so, since that idiom is so common (`state $idx = 0; @foo[$idx++]`), Raku includes a short-hand for this using _anonymous_ state variables

[08:13] <discord-raku-bot> <pelevesque> show me!

[08:13] <ab5tract_> the above can simply be written as `@foo[$++]`

[08:13] <discord-raku-bot> <pelevesque> That's nuts!

[08:13] <discord-raku-bot> <pelevesque> love it

[08:16] <ab5tract_> note you can only use a given anonymous state var in a single location. `{ @foo[$++]; say $ }`, for example, will print `(Any)` because you've created two anonymous state variables here, and the second one has never been defined to anything

[08:16] <discord-raku-bot> <pelevesque> Ah, just one thing i would improe in the language!

[08:16] <ab5tract_> enjoy :D

[08:16] <ab5tract_> sure, what's that?

[08:17] <discord-raku-bot> <pelevesque> $++ counts 0 to more... but ++$ does as well. I was hoping ++$ would count from 1 to more.

[08:18] <ab5tract_> seems to work for me

[08:18] <ab5tract_> m: my @f = <a b c>; for ^3 { say @f[$++]; say (++$) }

[08:18] <camelia> rakudo-moar f45297d57: OUTPUT: «a␤1␤b␤2␤c␤3␤»

[08:18] <ab5tract_> m: my @f = <a b c>; for ^3 { say @f[$++]; say ++$ }

[08:18] <camelia> rakudo-moar f45297d57: OUTPUT: «a␤1␤b␤2␤c␤3␤»

[08:19] <discord-raku-bot> <pelevesque> m: say "test";

[08:19] <discord-raku-bot> <Raku eval>  test 

[08:21] <discord-raku-bot> <pelevesque> m: my @f = <a b c>; for @f { say $++ }

[08:21] <discord-raku-bot> <Raku eval>  0 1 2 

[08:21] <discord-raku-bot> <pelevesque> m: my @f = <a b c>; for @f { say ++$ }

[08:21] <discord-raku-bot> <Raku eval>  1 2 3 

[08:21] <discord-raku-bot> <pelevesque> oh my god... it works.. I must have tested wrong... sorry

[08:21] <ab5tract_> no worries :)

[08:22] <ab5tract_> that would be a big breakage!

[08:28] <discord-raku-bot> <pelevesque> m: say $++ ~ " $_" for <a.b c>

[08:28] <discord-raku-bot> <Raku eval>  0 a.b 1 c 

[08:28] <discord-raku-bot> <pelevesque> m: say ++$ ~ " $_" for <a b c>

[08:29] <discord-raku-bot> <Raku eval>  1 a 2 b 3 c 

[08:30] <discord-raku-bot> <pelevesque> I was hoping this would work:  m: say "{++$} $_" for <a b c>

[08:33] <discord-raku-bot> <lakmatiol> Ye, that one won't, since "{}" creates a new block.

[08:34] <discord-raku-bot> <lakmatiol> https://docs.raku.org/language/traps#Using_a_block_to_interpolate_anon_state_vars

[08:47] <discord-raku-bot> <pelevesque> Thanks everyone.

[08:52] <discord-raku-bot> <pelevesque> With the help of this amazing community, this amazing language, and the amazing docs. In a matter of a few hours I went from this:   #!/usr/bin/env raku  sub MAIN() {         # Notice the sad escapes \< and \> in the line below.     my @symbols = <! " # $ % & ' * + , - . / : ; \< = \> ? @ \ ^ _ ` | ~ >;     my $i = 0;     for (@symbols X~ @symbols) -> $symbol-combo {         say "{++$i} $symbol-combo";    

[08:52] <discord-raku-bot> } }   To this:   #!/usr/bin/env raku  unit sub MAIN;  my @symbols = qw[! " # $ % & ' * + , - . / : ; < = > ? @ \ ^ _ ` | ~ ]; say "$(++$) $_" for @symbols X~ @symbols; 

[08:53] <discord-raku-bot> <pelevesque> It is a really amazing feeling... and Raku and Community really brings the job of coding back.

[08:53] <ab5tract_> pelevesque: our target has for a long time been -Ofun

[08:53] <ab5tract_> :)

[08:55] <discord-raku-bot> <pelevesque> You hit the target on the spot. This will sound ridiculous, but programming in Raku is the fun for adults that is similar to the fun I had doing BASIC on a ZX81 back when I was 6 years old. It's like the fun factor is the same, only the language is hyper powerful.

[08:55] <lizmat> :-)

[09:04] <ab5tract_> pelevesque: We've tried our best for always doing the sane thing under such hyper powerful demands/expectations but of course there can be some curious corners on the way through learning Raku. So don't hesitate to share any surprises that you encounter :)

[09:05] <ab5tract_> Have you already been introduced to `*`?

[09:06] <discord-raku-bot> <pelevesque> I know the whatever operator, but not *?

[09:09] <ab5tract_> m: dd (^10).grep(*.is-prime)

[09:09] <camelia> rakudo-moar f45297d57: OUTPUT: «(2, 3, 5, 7).Seq␤»

[09:09] <ab5tract_> m: dd (^10).grep(* %% 3)

[09:09] <camelia> rakudo-moar f45297d57: OUTPUT: «(0, 3, 6, 9).Seq␤»

[09:10] <ab5tract_> m: (* %% 3).WHAT.say

[09:10] <camelia> rakudo-moar f45297d57: OUTPUT: «(WhateverCode)␤»

[09:12] <ab5tract_> m: dd (* %% 3) # not sure why I did it the hard way last time :) 

[09:12] <camelia> rakudo-moar f45297d57: OUTPUT: «WhateverCode.new␤»

[09:13] <ab5tract_> it's often called currying but apparently that's not 100% CS terminology accurate

[09:14] <discord-raku-bot> <pelevesque> That is really cool.

[09:17] <ab5tract_> saves a lot of typing :) 

[09:17] <discord-raku-bot> <pelevesque> Raku seems good at not only saving typing, but making code even clearer in the process.

[09:18] <ab5tract_> plus once I got used to it, I found `* %% 3` easier to quickly parse than `{ $_ %% 3 }`

[09:24] <ab5tract_> Re: Clarity -- TimToady (Larry Wall) was always fascinated by Huffman coding, as were many language designers that he inspired. It's not the ideal appreciated by everyone I guess, but I sure like it. 

[09:43] <sdomi> mmm... what's the "correct" way for handling whitespace in regexps in raku? suppose I want to `s:g/.*? /asdf /`; this doesn't work correctly, unless I replace the space with \s, or quote the whitespace part

[09:44] <sdomi> the 2nd one is ugly (`s:g/.*?' '/asdf' '/` - i'm surprised this even works)

[09:44] <sdomi> but I seemingly can't quote the whole thing, because then it will become a constant

[09:44] <lizmat> by default, whitespace in regexes is not significant

[09:44] <sdomi> hmm

[09:44] <lizmat> if you're coming from Perl: /x by default

[09:44] <sdomi> i'm coming from (abusing) bash, so i may have a different outlook

[09:44] <lizmat> ah, ok

[09:44] <sdomi> :p

[09:45] <sdomi> decided to bite the bullet because while I know that I could do anything in bash, this seems to be comfier

[09:45] <discord-raku-bot> <lakmatiol> You can do .*? ' ' /asdf ' ' which should be a bit less ugly.

[09:46] <sdomi> tbh just knowing why this happens (and that I can insert as much space as I want in the regexp, right?), this is easier to swallow :p

[09:46] <lizmat> so you want to match any number of characters followed by a space by 'asdf '  ?

[09:47] <lizmat> *replace

[09:52] <sdomi> yup

[09:53] <sdomi> that's just a test case, i'm trying to get accustomed with raku

[09:53] <lizmat> is the boundary a single space, or any sequence of whitespace characters?

[09:53] <sdomi> i wanted it to be a single space :p

[09:57] <lizmat> s:g/.*? )> " " /asdf/

[09:58] <lizmat> the )> is the capture marker

[09:58] <lizmat> so anything before that will be the "capture" and *that* will be substituted

[09:58] <lizmat> m: $_ = "foo bar "; s:g/.*? )> " " /asdf/; .say

[09:58] <camelia> rakudo-moar f45297d57: OUTPUT: «asdf asdf ␤»

[09:59] <ab5tract_> sdomi: you can indeed have as much whitespace, including newlines, in your regex as you would like

[10:06] <lizmat> m: $_ = "foo bar "; s:g/<-[\ ]>+ )> /asdf/; .say   # much better performant   sdomi 

[10:06] <camelia> rakudo-moar f45297d57: OUTPUT: «asdf asdf ␤»

[10:07] <lizmat> basically look for 1 or more characters that are *not* a space: <-[\ ]>+

[10:07] <sdomi> lizmat: woo, fancy

[10:07] <sdomi> I've never used triangle brackets in regexp before

[10:07] <sdomi> is that a raku thing, or did I somehow miss a pcre feature?

[10:08] <lizmat> well  it's not really a triangle bracket

[10:08] <lizmat> it's a backslash to escape the space

[10:08] <sdomi> that I see

[10:08] <lizmat> <[]> is an enumerated character class: https://docs.raku.org/syntax/%3C%5B%20%5D%3E

[10:09] <sdomi> ohhh this is cool!

[10:10] <lizmat> the - in <-[   negates

[10:10] <ab5tract_> sdomi: Raku regexes are a condensation of all the learnings from Perl's infamous regex capabilities

[10:10] <sdomi> lizmat: yeah yeah, i get it now ^^

[10:11] <ab5tract_> so yeah, it's all very Raku-specific in the sense that nothing like a theoretical `rcre` has popularized Raku's regex syntax

[10:11] <sdomi> i've abused perl regexes (in GNU grep -P, mostly) a ton, so I feel I'm gonna get *so much mileage* out of those extra features in raku

[10:12] <ab5tract_> if you know your way around regexes, I expect you will find a lot to love -- https://docs.raku.org/language/regexes :D

[10:13] <discord-raku-bot> <nemokosch> to be honest, I think the fact that you can just quote everything that you want to be literally in your regex match, rather than having to memorize what you should escape and what you shouldn't, is enough of a feature

[10:14] <discord-raku-bot> <pelevesque> I read the book on regex by Moritz and was jaw dropped on each page.

[10:29] <discord-raku-bot> <lakmatiol> Yeah, regexes are definitely a highlight of raku

[11:39] *** teatwo joined
[11:42] *** teatime left
[13:32] <codesections> sdomi: Also, there's also the :sigspace (or :s for short) modifier if you *want* regexes to have significant whitespace

[13:32] <codesections> https://docs.raku.org/language/regexes#Sigspace

[14:40] *** MasterDuke left
[15:19] *** tonyo joined
[16:46] *** andinus joined
[16:46] *** andinus left
[16:46] *** andinus joined
[21:07] *** ab5tract joined
[21:40] *** ab5tract left
[22:53] *** teatime joined
[22:55] *** tea3po joined
[22:57] *** teatwo left
[22:58] *** teatime left
[23:33] *** teatwo joined
[23:37] *** tea3po left
[23:40] *** teatime joined
[23:41] *** teatime left
[23:43] *** teatwo left
[23:43] *** teatime joined
[23:44] *** teatime left
[23:44] *** teatime joined
[23:44] *** teatime left
