[00:05] *** Kaipei left
[05:58] *** Heptite left
[08:10] *** Kaipei joined
[09:00] *** samebchase left
[10:33] *** Heptite joined
[11:44] *** Kaipei left
[11:54] *** Kaipei joined
[12:40] *** Heptite left
[15:03] *** Heptite joined
[16:31] *** Kaipei left
[17:02] *** ab5tract joined
[17:14] <discord-raku-bot> <Anton Antonov> What is the Raku equivalent of the Perl5 code  `qr/((z|r)|((?<=[ab])(k|m)))$/;`   ?

[17:26] <discord-raku-bot> <Nahita> `rx/ ( (<[zr]>) || ( <?after <[ab]>> <[km]> ) ) $ /` is one, i think

[17:26] <discord-raku-bot> <Nahita> `rx/ ( ( <[zr]> ) || ( <?after <[ab]>> <[km]> ) ) $ /` is one, i think

[17:28] <discord-raku-bot> <Nahita> matches at the end of string either

[17:28] <discord-raku-bot> <Nahita> - z or r

[17:28] <discord-raku-bot> <Nahita> or

[17:28] <discord-raku-bot> <Nahita> - k or m following a or b

[17:31] <discord-raku-bot> <Anton Antonov> <@836605577400549436> Thank you! I just found the relevant fragment https://docs.raku.org/language/5to6-nutshell#Special_matchers_generally_fall_under_the_%3C%3E_syntax , and your suggestion helps a lot!

[17:37] <discord-raku-bot> <Anton Antonov> How about this one : `qr/[^$A][$A]+[^$A]+[$A].*(?<=z)r?$/;` ?

[17:38] <discord-raku-bot> <Anton Antonov> (I do not expect to ask more of these kind of questions today... ðŸ™‚ )

[18:02] <discord-raku-bot> <Nahita> np

[18:02] <discord-raku-bot> <Nahita> `rx/ <-[$A]> $A+ <-[$A]>+ $A .* <?after 'z'> 'r'? $ /`

[18:02] <discord-raku-bot> <Nahita> matches at the end of string

[18:02] <discord-raku-bot> <Nahita> - anything but $A

[18:02] <discord-raku-bot> <Nahita> - one or more of $A

[18:02] <discord-raku-bot> <Nahita> - one or more of anything but $A

[18:02] <discord-raku-bot> <Nahita> - $A

[18:02] <discord-raku-bot> <Nahita> - anything 0 or more, prefer more as much as possible

[18:02] <discord-raku-bot> <Nahita> - z which is optionally followed by r

[18:03] <discord-raku-bot> <Nahita> lookbehind seems not necessary so can write `'z' 'r'?` there instead i think

[18:04] <discord-raku-bot> <Nahita> but the original one has it, so...

[18:04] <discord-raku-bot> <Nemokosch> is [] not a character set in Perl regexes?

[18:04] <discord-raku-bot> <Nahita> i wish a regex visualizer, explainer for the Raku regexes

[18:05] <discord-raku-bot> <Nahita> like regex101 has for some dialects

[18:05] <discord-raku-bot> <Nahita> couldn't find a regexp::debugger kind of thing in modules land either

[18:06] <discord-raku-bot> <Nahita> i thought of attempting one (and failing) but not familiar with Raku regexes sufficiently and not familiar with grammars really

[18:06] <discord-raku-bot> <Nahita> which i assume is needed for such an application

[18:13] <discord-raku-bot> <Anton Antonov> <@836605577400549436> Thank you -- you saved me lots of time!

[18:14] <discord-raku-bot> <Nemokosch> I wonder which is the harder part - reading regex or writing it?

[18:14] <discord-raku-bot> <Nemokosch> Perhaps reading it...

[18:15] <discord-raku-bot> <Anton Antonov> I think, I can read Raku regexes -- _if_ I already know the expressed functionality.

[18:17] <discord-raku-bot> <Anton Antonov> To somewhat comment of what <@836605577400549436> said -- I prefer using grammars more.

[19:33] *** Kaipei joined
[21:06] *** ab5tract left
[22:30] *** Heptite left
[22:51] <discord-raku-bot> <stevied> what's the easiest/recommended way to constraint check class attributes besides using "where *". I'd like to have nice error messages. Should I just use "submethod BUILD" or is there a better way?

[22:54] <discord-raku-bot> <Nemokosch> > to constraint check class attributes

[22:54] <discord-raku-bot> <Nemokosch> could you please reiterate?

[23:10] <discord-raku-bot> <stevied> yeah, let's say I want to make sure a file passed in exists and is readable

[23:11] <discord-raku-bot> <stevied> yeah, let's say I want to make sure a file string passed in to the new function exists and is readable as an IO object

[23:14] <discord-raku-bot> <Nemokosch> I'm tempted to say just create a fallback multi candidate

[23:14] <discord-raku-bot> <Nemokosch> Not a particularly original thought I guess but it's cheap at least

[23:16] <discord-raku-bot> <stevied> I've been playing around to see if I could get trait_mod to work: `has Str:D $.file is checked = '';`

[23:16] <discord-raku-bot> <stevied> and then `multi sub trait_mod:<is>(Attribute:D $r, :$checked)`

[23:16] <discord-raku-bot> <stevied> but can't seem to get it to work

[23:17] <discord-raku-bot> <Nemokosch> even if you write `:$checked!` ?

[23:19] <discord-raku-bot> <stevied> I want to run file tests and maybe check the contents of the file to make sure it's legit and throw an error message if it isn't

[23:19] <discord-raku-bot> <stevied> I can't seem to get at the contents of $.file in the `trait_mod()` sub

[23:20] <discord-raku-bot> <stevied> heretofore I've done this in the constructor methods, but I'd like to try to find a more elegant solution

[23:22] <discord-raku-bot> <Nemokosch> pfff, clueless

[23:22] <discord-raku-bot> <Nemokosch> but this doesn't sound much like a type check in the classic sense, at least

[23:23] <discord-raku-bot> <stevied> no, I'm not just checking to see if it's an Int or something

[23:23] <discord-raku-bot> <stevied> these are "constraint checks" from what I gather

[23:25] <discord-raku-bot> <Nemokosch> maybe there is something better than the "failed constraint" Failure and we just don't know about it <:cameliathink:897316667653247057>

[23:40] *** Heptite joined
[23:59] *** kjp left
