[00:00] *** human-blip left
[00:00] *** swaggboi joined
[00:01] *** human-blip joined
[00:42] *** mcmillhj left
[00:48] *** jaguart joined
[00:49] *** jaguart left
[00:51] *** jaguart joined
[03:51] *** jaguart left
[03:52] *** jaguart joined
[04:01] *** MasterDuke joined
[09:16] *** dakkar joined
[11:45] <discord-raku-bot> <librasteve> mcmillhj: fwiw I have tested your code (at least the bit that I can get from your link) and sort works fine for me ... https://gist.github.com/librasteve/170121dc120921f4608b8baf841c294e

[12:54] <discord-raku-bot> <librasteve> mcmillhj: and, eventually, I realise that I made the same jump that you did and when I comment out the Str method, it fails as you have already said - looks like nemokosch is spot on with this

[12:55] <discord-raku-bot> <librasteve> ironically ... I then discovered this SO https://stackoverflow.com/questions/53760999/perl6-sort-doesnt-use-overridden-cmp  where the same discussion was had on 13th December 2018!

[17:37] *** dakkar left
[19:04] *** Manifest0 joined
[21:28] *** mcmillhj joined
[22:31] *** kjp left
[22:34] *** kjp joined
[22:56] <mcmillhj> What's the more idiomatic way to compare two Seqs? I know `eqv` doesn't work because they are lazy

[23:14] <discord-raku-bot> <nemokosch> it doesn't? that sounds annoying

[23:15] <lizmat> m: dd (^10).Seq.list eqv (^10).Seq.list   # convert to list ?

[23:15] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «Bool::True␤»

[23:15] <lizmat> hmmmm

[23:16] <lizmat> m: dd (^10).Seq.list eqv (^10).Seq.lazy.list

[23:16] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «Bool::False␤»

[23:16] <lizmat> hmmmm

[23:16] <discord-raku-bot> <nemokosch> it's hard to say this well

[23:16] <discord-raku-bot> <nemokosch> there are 3 states

[23:17] <discord-raku-bot> <nemokosch> there is something that is just plain eager cached data

[23:17] <discord-raku-bot> <nemokosch> there is something where we just don't know

[23:17] <discord-raku-bot> <nemokosch> and there is something where the iterator is explicitly marked as lazy

[23:18] <mcmillhj> yeah, that is what I am struggling with. I wrote a little helper function that just takes two positional arguments and compares them element by element. Sometimes one of the arguments is a List sometimes a Seq, sometimes an Array

[23:18] <lizmat> m: dd so ((^10).Seq.lazy Zeqv (^10).Seq.lazy).all

[23:18] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «Bool::True␤»

[23:18] <discord-raku-bot> <nemokosch> a Seq can still be "don't know" rather than "explicitly lazy"

[23:18] <discord-raku-bot> <nemokosch> and then there is no problem

[23:18] <discord-raku-bot> <nemokosch> m: (1, 2, 3).Seq eqv (1, 2, 3).Seq andthen .say

[23:18] <discord-raku-bot> <Raku eval>  True 

[23:19] <mcmillhj> okay, so the main issue is that one of the arguments is a Seq and the other is a List then because eqv asserts against type right?

[23:20] <discord-raku-bot> <nemokosch> yes, usually it does

[23:22] <discord-raku-bot> <nemokosch> but then I'm kinda leaning towards some of the solutions from liz

[23:22] <discord-raku-bot> <nemokosch> they really aren't "equivalent", just happen to have the same content when iterated

[23:28] <mcmillhj> as long as something like this looks readable I guess I am okay. It looked weird when I wrote it this way the first time

[23:28] <mcmillhj> m: my @rows = [305, 289, 460, 223, 223, 460, 289]; my $i = 3; my @left = @rows[0..$i]; my @right = @rows[$i + 1 .. * - 1]; my $closest-edge = min(@left.elems, @right.elems); say @left.reverse[0..^$closest-edge].List eqv @right[0..^$closest-edge].List;

[23:28] <camelia> rakudo-moar 2d1ce780b: OUTPUT: «True␤»

