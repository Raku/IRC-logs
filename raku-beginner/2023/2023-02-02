[00:18] *** Manifest0 left
[07:52] *** ab5tract joined
[08:27] <discord-raku-bot> <:(**@rest, *%rest)> should i use my \MY-CONSTANT = 42; or my constant MY-CONSTANT = 42; 

[08:41] <discord-raku-bot> <Nahita> not exactly interchangable in general, constant evaluates its RHS at compile time

[08:47] <discord-raku-bot> <:(**@rest, *%rest)> m: (my & = {  })()

[08:47] <discord-raku-bot> <Raku eval>   

[08:47] <discord-raku-bot> <:(**@rest, *%rest)> it timed out?

[08:48] <discord-raku-bot> <:(**@rest, *%rest)> instead of stack overflowing

[08:48] <discord-raku-bot> <:(**@rest, *%rest)> hmm

[08:49] <discord-raku-bot> <:(**@rest, *%rest)> m: my &_ = *.CALL-ME; &_(&_) 

[08:49] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'CALL-ME' for invocant of type 'WhateverCode'   in block <unit> at main.raku line 2   

[08:49] <discord-raku-bot> <:(**@rest, *%rest)> m: my &_ = *(); &_(&_) 

[08:49] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'CALL-ME' for invocant of type 'Whatever'   in block <unit> at main.raku line 1   

[08:49] <discord-raku-bot> <:(**@rest, *%rest)> tf

[08:50] <discord-raku-bot> <Zephyr> m:  my &f = { _$() }; &f(&f);

[08:50] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:1 ------> my &f = { _⏏$() };     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop  

[08:50] <discord-raku-bot> <Zephyr> typo

[08:50] <discord-raku-bot> <:(**@rest, *%rest)> m: my &_ = { $_(); $_() }; &_(&_) 

[08:50] <discord-raku-bot> <Zephyr> m:  my &f = { $_() }; &f(&f);

[08:51] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'CALL-ME' for invocant of type 'Any'   in block <unit> at main.raku line 1   

[08:51] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'CALL-ME' for invocant of type 'Any'   in block <unit> at main.raku line 1   

[08:51] <discord-raku-bot> <Zephyr> m:  my &f = -> &g { &g(); } &f(&f);

[08:51] <discord-raku-bot> <Raku eval>  Exit code: 1 Too few positionals passed; expected 1 argument but got 0   in block <unit> at main.raku line 1   

[08:52] <discord-raku-bot> <:(**@rest, *%rest)> m: my &_ = { &_ }; _ 

[08:52] <discord-raku-bot> <Raku eval>   

[08:52] <discord-raku-bot> <:(**@rest, *%rest)> m: my &_ = { _ }; _ 

[08:52] <discord-raku-bot> <Raku eval>   

[08:52] <discord-raku-bot> <Zephyr> it ran successfully without errors, just that doesn't invoke a function call if I'm right

[08:53] <discord-raku-bot> <:(**@rest, *%rest)> m: sub forever {   forever }  forever 

[08:53] <discord-raku-bot> <Raku eval>   

[08:53] <discord-raku-bot> <Zephyr> m: my &_ = { &_() }; _()

[08:53] <discord-raku-bot> <Raku eval>   

[08:53] <discord-raku-bot> <Zephyr> oh huh

[08:53] <discord-raku-bot> <Zephyr> it doesn't show timeout message?

[08:53] <discord-raku-bot> <:(**@rest, *%rest)> yeah mb

[08:54] <discord-raku-bot> <Zephyr> weird, maybe glot.io's API doesn't return anything on timeout/resource overuse

[08:54] <discord-raku-bot> <Zephyr> I ran that on my repl and it used up all resources pretty quick

[08:55] <discord-raku-bot> <:(**@rest, *%rest)> does it overflow stack?

[08:56] <discord-raku-bot> <Zephyr> all my CPU & RAM was used before it could overflow it seems

[08:57] <discord-raku-bot> <Zephyr> as it should be known I'm nowhere near fluent in Raku so I'm not sure about the specifics, apologies

[08:57] *** Manifest0 joined
[08:58] <discord-raku-bot> <:(**@rest, *%rest)> how maybe raku's stack in unbound

[09:13] *** dakkar joined
[11:07] *** raschip joined
[14:10] *** m_athias left
[14:10] *** camelia left
[14:11] *** m_athias joined
[14:17] *** camelia joined
[15:11] <discord-raku-bot> <stevied> I'm trying to get more comfortable with using  trait_mod . But I really don't understand the syntax: https://docs.raku.org/type/Sub#index-entry-trait__mod_(declarator)

[15:11] <discord-raku-bot> <stevied> "It is declared with the trait_mod declarator followed by a colon and a string literal containing the name of the trait. "

[15:15] <discord-raku-bot> <stevied> so I don't understand what the role of :<is> is for one

[15:16] <discord-raku-bot> <Nemokosch> well, it's just a name

[15:16] <discord-raku-bot> <stevied> name of what?

[15:16] <discord-raku-bot> <Nemokosch> the trait

[15:16] <discord-raku-bot> <Nemokosch> has $!blah is built

[15:16] <discord-raku-bot> <Nemokosch> there is your is

[15:17] <discord-raku-bot> <Nemokosch> there is also does

[15:17] <discord-raku-bot> <stevied> i always considred "is built" or maybe "built" to be the trait

[15:17] <discord-raku-bot> <Nemokosch> technically, it's a dispatch of is

[15:18] <discord-raku-bot> <stevied> https://docs.raku.org/syntax/is

[15:19] <discord-raku-bot> <stevied> "The trait is accepts a type object to be added as a parent class of a class in its definition. "

[15:19] <discord-raku-bot> <stevied> read that 5 times, still can't figure it out

[15:20] <discord-raku-bot> <Nemokosch> also, this is like only one candidate

[15:20] <discord-raku-bot> <Nemokosch> I think this genuinely seems to be a horrible way to say: you can use is to declare the base class of a class

[15:21] <discord-raku-bot> <Nemokosch> class Array is List

[15:21] <discord-raku-bot> <Nemokosch> like this

[15:21] <discord-raku-bot> <stevied> ok

[15:22] <discord-raku-bot> <stevied> so I understand a trait adds a hook at compile time

[15:22] <discord-raku-bot> <:(**@rest, *%rest)> m: sub trait-mod:<sucks-at>($o, $what) {   $o = “I suck at $what”; }  $a sucks-at math; say $a;

[15:22] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Cannot add tokens of category 'trait-mod' at /home/glot/main.raku:1 ------> sub trait-mod:<sucks-at>⏏($o, $what) {  

[15:23] <discord-raku-bot> <:(**@rest, *%rest)> m: sub trait_mod:<sucks-at>($o, $what) {   $o = “I suck at $what”; }  $a sucks-at math; say $a;

[15:23] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Variable '$a' is not declared at /home/glot/main.raku:5 ------> <BOL>⏏$a sucks-at math;  

[15:23] <discord-raku-bot> <:(**@rest, *%rest)> m: sub trait_mod:<sucks-at>($o, $what) {   $o = “I suck at $what”; }  my $a sucks-at math; say $a;

[15:23] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Two terms in a row at /home/glot/main.raku:5 ------> my $a⏏ sucks-at math;     expecting any of:         infix         infix stopper         statement end         statement modifier         statement modifier loop  

[15:23] <discord-raku-bot> <:(**@rest, *%rest)> what

[15:23] <discord-raku-bot> <stevied> os the :<is> part can be called anything?

[15:23] <discord-raku-bot> <:(**@rest, *%rest)> trait name

[15:24] <discord-raku-bot> <:(**@rest, *%rest)> what am i wrong at @Nemokosch

[15:27] <discord-raku-bot> <Nemokosch> what did you even change?

[15:27] <discord-raku-bot> <stevied> i don't think you can just pick any random name to replace <is>

[15:27] <discord-raku-bot> <Nemokosch> probably not

[15:28] <discord-raku-bot> <Nemokosch> but it doesn't help that we see three completely ad-hoc errors for three similar codes

[15:29] <discord-raku-bot> <:(**@rest, *%rest)> - i defined a custom trait, now what? - two terms in a row

[15:29] <discord-raku-bot> <Nemokosch> > Cannot add tokens of category 'trait-mod'

[15:29] <discord-raku-bot> <Nemokosch> but why the other error

[15:30] <discord-raku-bot> <Nemokosch> what did you change?

[15:31] <discord-raku-bot> <:(**@rest, *%rest)> trait-mod becomes trait_mod

[15:31] <discord-raku-bot> <:(**@rest, *%rest)> and raku only lets you define is does handles i think

[15:32] <discord-raku-bot> <Nemokosch> it doesn't say it would be invalid to define a new one, then

[15:33] <discord-raku-bot> <Nemokosch> iirc

[15:39] *** Guest3742 joined
[15:39] *** ab5tract left
[15:44] <discord-raku-bot> <stevied> ok, so it seems like trait_mod adds in a multi subroutine for the "is" trait

[15:45] <Guest3742> Hi all. I'm trying to pass list literals into a code block: for a, b, c -> @in { ...}, where a b & c are each lists of integers. If I write the lists as "(1, 2, ...)" all's good. If I write the lists as "<1 2 3>" it also works UNLESS the list has exactly one element, in which case I get a type check error: Type check failed in binding to parameter

[15:45] <Guest3742> '@in'; expected Positional but got IntStr (IntStr.new(10, "10"))

[15:45] <Guest3742> Is there some way I've missed to handle this case?

[15:45] <discord-raku-bot> <stevied> lists are created by commas

[15:46] <discord-raku-bot> <stevied> so you gotta do "1, " for a one element list

[15:47] <Guest3742> Hmm ... so no way to use angle quotes here? Ok. Thanks!

[15:48] *** ab5tract joined
[15:48] <discord-raku-bot> <stevied> can't see your function sig but I'm guessing you should be using slurpy args

[15:48] <discord-raku-bot> <Nemokosch> actually, the parens don't wrap their content at all

[15:48] <discord-raku-bot> <Nemokosch> (1) also wouldn't be a List

[15:49] <discord-raku-bot> <Nemokosch> and even though [1] would be an Array, it would be an Array "for the wrong reason" and [[1]] would be the very same Array

[15:50] <discord-raku-bot> <Nemokosch> what parens tend to do is a kind of conversion

[15:51] <Guest3742> I did see that [1] works where (1) doesn't.

[15:52] <discord-raku-bot> <Nemokosch> that's because [] coerces its argument(!) into an Array

[15:52] <discord-raku-bot> <Nemokosch> and for a non-Iterable, that coercion happens to involve wrapping

[15:52] <Guest3742> I'm working with a list of literal inputs, where it's convenient to write them with <> rather than futzing with all the commas and parens. So it feels weird to have to use different syntax for one element inputs. NBD.

[15:53] <Guest3742> Thanks again

[15:53] *** Guest3742 left
[15:53] <discord-raku-bot> <Nemokosch> actually, .words would do "the right thing"

[15:54] <discord-raku-bot> <stevied> m: say <1>.list.WHAT;

[15:54] <discord-raku-bot> <Raku eval>  (List)  

[15:55] <discord-raku-bot> <Nemokosch> .list would also work I guess

[15:55] <discord-raku-bot> <Nemokosch> I guess the rationale was more or less related to the other parens: what should happen if the argument doesn't look like an array at all?

[15:55] <discord-raku-bot> <stevied> m: say <1>.WHAT;

[15:55] <discord-raku-bot> <Raku eval>  (IntStr)  

[15:56] <discord-raku-bot> <Nemokosch> if it's the comma that creates the list, one might as well say that it's the separating whitespace for the <> version

[15:56] <discord-raku-bot> <Nemokosch> having said that, I don't know why <foo > (mind the space) can't create a one-element list, at least

[15:58] <discord-raku-bot> <Nemokosch> having said that...  for a, b, c -> @in { ...} looks like a very bad pattern to begin with

[16:42] *** Guest2085 joined
[17:06] <discord-raku-bot> <stevied> what am I missing here:

[17:06] <discord-raku-bot> <stevied> m:  class Circle {     multi method new(:$diam) { say 'here' }     multi method new(:$radius) { say 'blah' } }  Circle.new(  radius => 3 );

[17:06] <discord-raku-bot> <Raku eval>  here  

[17:06] <discord-raku-bot> <stevied> why is the first method etting called when I'm passing in "radius" named arg?

[17:07] <discord-raku-bot> <stevied> i gotta imagine it's the dreated *%_ extra argument slurpy rearing its head

[17:09] <discord-raku-bot> <stevied> ok, yeah, this works:

[17:09] <discord-raku-bot> <stevied> m:

[17:09] <discord-raku-bot> <stevied> m:  class Circle {     multi method new(:$diam, *% ()) { say 'here' }     multi method new(:$radius, *% ()) { say 'blah' } }  Circle.new(  radius => 3 );

[17:09] <discord-raku-bot> <Raku eval>  blah  

[17:18] *** snonux joined
[17:19] *** snonux_ joined
[17:19] *** ab5tract left
[17:36] *** dakkar left
[17:37] <discord-raku-bot> <Nemokosch> @stevied remember to make named arguments mandatory

[17:37] <discord-raku-bot> <Nemokosch> m:  class Circle {     multi method new(:$diam!) { say 'here' }     multi method new(:$radius!) { say 'blah' } }  Circle.new(  radius => 3 ); 

[17:37] <discord-raku-bot> <Raku eval>  blah  

[17:49] *** snonux left
[17:50] *** snonux_ left
[18:00] *** ab5tract joined
[18:01] *** ab5tract left
[18:13] *** Guest3794 joined
[18:15] *** Guest3794 left
[18:22] *** Guest2085 left
[18:23] <discord-raku-bot> <nHail>  Syntax: CStruct representation only handles attributes of type:   (u)int8, (u)int16, (u)int32, (u)int64, (u)long, (u)longlong, num32, num64, (s)size_t, bool, Str   and types with representation: CArray, CPointer, CStruct, CPPStruct and CUnion  But the original c has mpv_event_id event_id;, and mpv_event_id is enum.

[19:14] <discord-raku-bot> <Nahita> some integer type should do probably int32, enums are integrals.

[19:17] *** snonux joined
[19:17] *** snonux_ joined
[19:37] *** Guest2085 joined
[19:54] *** raschip left
[20:27] *** snonux left
[20:28] *** snonux_ left
[21:23] *** snonux joined
[21:24] *** snonux_ joined
[21:25] *** Guest2085 left
[21:38] <discord-raku-bot> <p6steve> you can use my @a = <1>;  since the list assignment will coerce rhs to a list ...

[21:39] <discord-raku-bot> <Nemokosch> yeah that's like [<1>]

[21:41] <discord-raku-bot> <p6steve> ^^ that too

[21:44] <discord-raku-bot> <p6steve> or '|<1>' maybe

[21:44] *** ab5tract joined
[22:17] *** Guest2085 joined
[22:27] *** Guest2085 left
[23:15] *** ab5tract left
[23:54] *** Manifest0 left
