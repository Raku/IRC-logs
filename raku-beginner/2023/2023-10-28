[04:44] <discord-raku-bot> <Dr.Doom>  (([X]((s..nd).grep(*.is-prime) xx k)).map({[*] $_}).grep(s <= * <= nd)) ==> {$_.grep(* > 15)}(); 

[04:44] <discord-raku-bot> <Dr.Doom> this last grep isnt working for me any ideas why ?

[05:30] *** CIAvash joined
[09:43] *** cleo left
[09:54] *** cleo joined
[11:28] *** Manifest0 joined
[11:42] *** teatwo joined
[11:46] *** teatime left
[12:04] *** teatwo left
[12:04] *** teatwo joined
[12:21] *** CIAvash left
[12:29] *** tea3po joined
[12:32] *** teatwo left
[14:47] *** inquinn joined
[15:19] *** inquinn left
[19:02] *** Tirifto left
[19:04] *** Tirifto joined
[19:21] <discord-raku-bot> <rcmlz> some of the modules on raku.land have a download counter badge, some do not. What is required to get such a counter?   For instance that one has a download counter, https://raku.land/zef:lizmat/AccountableBagHash/badges and that one does not https://raku.land/zef:thundergnat/Prime::Factor/badges.  Thank you for your hints.

[19:44] <lizmat> reposted on #raku.land

[20:20] <discord-raku-bot> <.vushu> Hi I'm doing some bindings with native call for a c-library. The binding expect a callback function which get triggered in c-land. Everything compiles fine, but in runtime I get this following error: MoarVM panic: native callback ran on thread (some-thread-id) unknown to MoarVM  Is there a workaround for this?

[20:24] <lizmat> I seem to recall GTK::Simple module needing that, it had a dedicated threadpoolscheduler to allow GTK to run on its own threads

[20:27] <discord-raku-bot> <.vushu> somewhere here? https://github.com/finanalyst/GTK-Simple/blob/master/lib/GTK/Simple/Scheduler.rakumod

[20:27] <discord-raku-bot> <.vushu> Im not sure how it works :d

[20:29] * lizmat doesn't know either off-hand

[20:44] <tonyo> .vushu i think that happens if the function signature doesn't quite match, there's some examples in the ecosystem.  i'll see if i can find one

[20:45] <tonyo> .vushu: https://github.com/tony-o/perl6-libyaml/blob/master/lib/YAML/Parser/LibYAML.pm6

[20:46] <discord-raku-bot> <.vushu> Thanks I will try to take a look ðŸ™‚

[21:04] <tonyo> eg int32 v int64 or uint/int mismatches

[21:04] <tonyo> etc

[21:31] <discord-raku-bot> <.vushu> Here is what I did this is the c function I want to bind:  typedef void (*AudioCallback)(void *bufferData, unsigned int frames); RLAPI void SetAudioStreamCallback(AudioStream stream, AudioCallback callback);  translating this to raku :  our sub set-audio-stream-callback (AudioStream $stream, &audio-callback (Pointer[void] $bufferData, int32 $frames)) is export is native(LIBRAYLIB) is

[21:31] <discord-raku-bot> symbol('SetAudioStreamCallback_pointerized'){ * } I pointerized the function since it takes a value type: void SetAudioStreamCallback_pointerized(AudioStream* stream, AudioCallback callback){ SetAudioStreamCallback(*stream, callback); }

[21:32] <discord-raku-bot> <.vushu> when calling I do this:  sub audio-callback(Pointer $buf, int32 $frames) {     say "Show me something"; } # my $audio set-audio-stream-callback($audio-stream, &audio-callback);

[21:32] <discord-raku-bot> <.vushu> which gives me the error

[21:34] <discord-raku-bot> <.vushu> Im not sure what I did wrong with the signatures.

[21:46] *** inquinn joined
[22:16] *** inquinn left
[22:31] *** jgaz left
[23:42] *** teatwo joined
[23:43] *** teatwo left
[23:45] *** tea3po left
[23:47] *** inquinn joined
