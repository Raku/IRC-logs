[02:08] *** teatwo left
[02:32] *** teatime joined
[05:02] *** teatime left
[05:02] *** ab5tract left
[05:02] *** deadmarshal_ left
[05:02] *** sivoais left
[05:02] *** lizmat left
[05:03] *** MasterDuke joined
[05:03] *** camelia joined
[05:03] *** hexology joined
[05:03] *** sjn joined
[05:03] *** guifa joined
[05:03] *** RakuIRCLogger joined
[05:03] *** gfldex joined
[05:03] *** mjgardner joined
[05:03] *** SmokeMachine joined
[05:03] *** KOTP joined
[05:03] *** snonux joined
[05:03] *** discord-raku-bot joined
[05:03] *** human-blip joined
[05:03] *** tbrowder__ joined
[05:04] *** RakuIRCLogger left
[08:10] *** dakkar joined
[08:21] *** teatwo joined
[08:24] *** teatime left
[09:35] *** Manifest0 joined
[09:35] *** Manifest0 left
[09:45] *** Manifest0 joined
[10:04] *** Manifest0 left
[10:36] *** Manifest0 joined
[13:10] *** lizmat_ joined
[13:13] *** lizmat left
[13:20] *** lizmat_ left
[13:20] *** lizmat joined
[13:49] *** destroycomputers left
[13:50] *** destroycomputers joined
[14:00] *** nicole left
[14:00] *** nicole joined
[14:44] *** jgaz joined
[16:26] <Tirifto_> lizmat & al., hello again and sorry for the delay! Going back to object-specific-method question, I have now put together a file detailing what exactly I want to do, together with three solutions that sort of work, but carry some drawbacks.

[16:26] <Tirifto_> Here‚Äôs a link: http://tirifto.xwx.moe/d/methods.raku

[16:29] <Tirifto_> Sorry if it‚Äôs a tad verbose, but it‚Äôs the best I could think of. It‚Äôs not so much that I can‚Äôt find a way of doing what I want, but that I‚Äôm trying to find a relatively simple way of doing it, while learning if Raku has any features that support this kind of use, and taking advantage of them.

[16:31] <Tirifto_> lizmat, you specifically asked what I tried when mixing in roles into objects, which is shown in Example 3.

[16:32] <lizmat> I'll look at it later today, am in the middle of something that needs my full attention :-)

[16:37] *** dakkar left
[16:39] <discord-raku-bot> <antononcube> @Trifto Yeah, lizmat is upto something that needs max, non-split, part-icipation.

[16:43] <Tirifto_> Thank you very much! c:

[16:44] <Tirifto_> @antononcube ‚Ä¶¬†are those raku puns? :P

[16:48] <discord-raku-bot> <antononcube> @Trifto There is a discussion in the "main" IRC channel about using a positional or named argument for the function/method split. Some of the discussed argument names are ":upto", ":max-parts", etc.

[16:51] <Tirifto_> Oh!

[16:52] <Tirifto_> Well done in that case. ü§≠

[16:55] <discord-raku-bot> <antononcube> Yeah! I should restrain myself posting puns, but, well, sometimes is way too easy and "natural" to do...

[16:56] <discord-raku-bot> <nemokosch> this is why you are banned from doing Python presentations

[16:57] <lizmat> I guess Raku is one of the few languages in the world that has a "pun" meta-method  :-)

[16:58] <lizmat> and even has a concept of "auto-punning"  :-)   https://docs.raku.org/language/typesystem#Auto-punning

[17:13] <discord-raku-bot> <nemokosch> by the way

[17:13] <discord-raku-bot> <nemokosch> is there a way to forbid the addition of new multi candidates?

[17:16] <lizmat> not in core, I don't think

[17:18] <discord-raku-bot> <nemokosch>  class C {     has Routine $.m;     method m(Int $i) { $!m.($i) } } 

[17:18] <discord-raku-bot> <nemokosch> this is definitely a clever solution, I don't know if it's actually accounted for

[17:22] <discord-raku-bot> <nemokosch> hm, as long as somebody doesn't assume that m is a setter, I think it's good

[17:23] <discord-raku-bot> <antononcube> That is why I just use(d) callable attributes.

[17:24] <discord-raku-bot> <antononcube> See, for example, "FunctionalParsers".

[17:34] <discord-raku-bot> <nemokosch> anyway, we have an answer basically, then

[17:35] <discord-raku-bot> <nemokosch> you can't forbid new candidates from being added, that's a definite limitation

[17:38] <gfldex> m: class SomeType { }; say SomeType.clone =:= SomeType;

[17:38] <camelia> rakudo-moar 3a91b4956: OUTPUT: ¬´True‚ê§¬ª

[17:40] <gfldex> m: sub foo { 'role R {}'.EVAL }; say foo() =:= foo();

[17:40] <camelia> rakudo-moar 3a91b4956: OUTPUT: ¬´False‚ê§¬ª

[17:40] <gfldex> :)

[17:41] <gfldex> m: role R {}; R.^add_method(my method m {});

[17:41] <camelia> rakudo-moar 3a91b4956: OUTPUT: ¬´No such method 'add_method' for invocant of type‚ê§'Perl6::Metamodel::ParametricRoleGroupHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:52] <gfldex> Tirifto_: Do all the objects need to be of the same ClassHOW-type?

[17:56] *** ab5tract left
[18:11] <Tirifto_> gfldex, I‚Äôll try and answer that as soon as I manage to understand what ClassHOW is and how it relates to the matter at hand! (I‚Äôm looking at the documentation now, but it looks like it might take a while. xP)

[18:12] <discord-raku-bot> <nemokosch> It's metamodel wizardry

[18:13] <gfldex> Tirifto_: There are differenct "sources" for types. Like `class`, `role`, `enum` and a few more. That a type-check succeeds does not necessarily mean they are the same `class`.

[18:15] <discord-raku-bot> <nemokosch> Weren't you the one who advocated for only doing spectested, "pure" Raku code?

[18:16] <Tirifto_> Well, going off just that‚Ä¶ they ought to be de-facto the same class, but I suppose it‚Äôs not important to me how Raku handles that internally. It also shouldn‚Äôt be a problem if they are different classes but share a superclass. (Which is sort of done in example 2, but again, feels a bit weird there.)

[18:18] <Tirifto_> At the moment, I don‚Äôt really comprehend what metamodels and metaclasses even are. I‚Äôve read about them before, but I might have to do that a few more times before the idea can sit in my head comfortably. cx

[18:18] <discord-raku-bot> <nemokosch> that's fair enough

[18:20] <discord-raku-bot> <nemokosch> if you know the DOM in the browsers, the metamodel is a bit like a DOM but for data structures in your Raku code

[18:28] <Tirifto_> @nemokosch So not an interface to access and modify objects (which is, in a way, provided by classes), but rather an interface to access and modify classes in a comparable manner?

[18:29] <discord-raku-bot> <nemokosch> Yes

[18:30] <discord-raku-bot> <nemokosch> From the metamodel point of view, a class definition is just some code that can build an object - the object that will represent the defined class

[18:31] <discord-raku-bot> <nemokosch> You may ask, if it's just an object, what (meta)class does it belong to? And this is where we get to ClassHOW

[18:32] <discord-raku-bot> <nemokosch> It's the common class that represents all the defined classes in the metamodel

[18:34] <discord-raku-bot> <nemokosch> m: class Foo {}; dd Foo.HOW; dd Foo.HOW.^mro

[18:34] <discord-raku-bot> <Raku eval>  Perl6::Metamodel::ClassHOW.new (Perl6::Metamodel::ClassHOW, Any, Mu) 

[18:34] <discord-raku-bot> <nemokosch> Foo is represented by an instance of ClassHOW

[18:35] <discord-raku-bot> <nemokosch> And nevermind the other line lol, that was a thinko on my side

[18:36] <discord-raku-bot> <nemokosch> I rather wanted to traverse this meta-chain than the inheritance chain

[18:39] <gfldex> Tirifto_: https://gist.github.com/gfldex/207374ad35e9b2b9e708b2fdeacbcd9a

[18:39] <gfldex> please note that the invocant has to match

[18:39] <Tirifto_> Hmmm‚Ä¶ so is the ordinary type system (Mu ‚Üê Any ‚Üê ‚Ä¶ ‚Üê Int) regarded as the ‚Äòmodel‚Äô, for there to be a ‚Äòmetamodel‚Äô about that model‚Ä¶?

[18:40] <discord-raku-bot> <nemokosch> Kind of

[18:41] <discord-raku-bot> <nemokosch> It's not about types of data anymore, rather the different structures that can define data. Class, Role, Subset, Package, and so on

[18:42] <gfldex> type-objects know how to construct instances and Metamodel-objects know how to construct type-objects.

[18:42] <gfldex> And the VM knows how to construct "bare"-objects. Those are used to construct Metamodel-objects.

[18:43] * gfldex .oO( At the beginning there was a "typedef". )

[18:44] <discord-raku-bot> <nemokosch> Ultimately, if you keep chaining .HOW on an object, you will hit KnowHOW which is the root of this construction hierarchy

[18:48] <Tirifto_> I asked Raku HOW WHAT? And apparently the answer is (ClassHOW). üôÉ

[18:50] <discord-raku-bot> <nemokosch> WHAT gives you the type object, HOW gives you the associated meta-object (of course that's the very same object for all instances and the type object as well)

[18:51] <gfldex> Rakudo tries to hide VM-level constructs and recursion is a good way to stop the nosy to get to the bottom of things.

[18:51] <discord-raku-bot> <nemokosch> The thing is, it's controversial the least to say, to teach these things for other purposes than Rakudo development

[18:52] <discord-raku-bot> <nemokosch> They weren't meant to be public interfaces, not to this extent at least

[18:52] <Tirifto_> Ah, right‚Ä¶ I suppose I need to find the right words or ideas to fill in the question ‚ÄòHOW‚Äô for the name to become more intuitive. (Well, I reckon the general idea is ‚ÄòHOW was this kind of thing made‚Äô or something? `o`)

[18:53] <gfldex> WHAT is it and HOW was it constructed.

[18:53] <Tirifto_> The docs do say that ClassHOW is not a part of the language proper, which would make me hesitate to use it.

[18:53] <discord-raku-bot> <nemokosch> There is a bit of schism when it comes to these things

[18:54] <Tirifto_> I should probably play around with meta-objects for a bit to make them feel more natural.

[18:54] <gfldex> The MOP is considered stable. However, you should always `use v6.d`.

[18:54] <gfldex> I "got" the whole Metamodel-stuff after reading the code: https://github.com/rakudo/rakudo/tree/main/src/Perl6/Metamodel

[18:54] <Tirifto_> gfldex, is it considered stable in Raku or Rakudo?

[18:54] <discord-raku-bot> <nemokosch> Considered by whom?

[18:54] <gfldex> In Raku.

[18:55] <discord-raku-bot> <nemokosch> I doubt it's covered by tests to any serious extent

[18:57] <Tirifto_> gfldex, about the code you linked (for which I thank you!), how does ‚Äòmy role :: {}‚Äô differ from ‚Äòmy role {}‚Äô? What is the purpose of the ‚Äò::‚Äô in this instance? `o`

[18:57] <gfldex> see: https://github.com/Raku/roast/tree/master/S12-meta

[18:58] <gfldex> It's a matter of taste. When I see `my role {}` I don't quite know if I forgot to name it or if the name was left out intentional.

[19:00] <discord-raku-bot> <nemokosch> I doubt these tests have anything about stuff like compose

[19:00] <gfldex> To answer your question properly. If you can get it down without the MOP, you should. And you can't assume that all objects adhere to the Metamodel. We got NativeCall and that can import very alien things into a Raku program.

[19:01] <Tirifto_> gfldex, is the ‚Äò::‚Äô the namespace (package?) separator, used to explicitly say that the name is empty/non-existent in this case?

[19:02] <MasterDuke> fwiw, there are 8 instances of `.^compose` in roast

[19:02] <gfldex> I think it's a hardcoded grammar thing to say "intentionally left blank".

[19:02] <discord-raku-bot> <nemokosch> In the meta folder?

[19:03] <MasterDuke> 1 in introspection, 7 in meta

[19:06] <discord-raku-bot> <nemokosch> I'll have to check the synopses. Originally, the metamodel was deliberately vague and not speculative and it seemed like the minimal tests are written in that spirit

[19:07] <MasterDuke> i didn't actually look at the tests, so very well could be

[19:07] <discord-raku-bot> <nemokosch> classhow.t only consists of tests derived from Rakudo issues...

[19:09] <Tirifto_> On the metamethod call: Is ‚Äò.^name(‚Ä¶)‚Äô supposed to always be equivalent to ‚Äò.HOW.name(‚Ä¶)‚Äô?

[19:10] <discord-raku-bot> <nemokosch> iirc it also passes the metaobject as an argument

[19:10] <MasterDuke> yeah. `.^foo` method calls are just syntax sugar for `.HOW.foo

[19:11] <gfldex> $thing.^foo(‚Ä¶) is the same as $thing.how.foo($thing, ‚Ä¶)

[19:11] <Tirifto_> @nemokosch Oh wait‚Ä¶ the metaobject, or the original object? :o

[19:11] <discord-raku-bot> <nemokosch> Well, I'm gonna trust gfldex with this one

[19:11] <discord-raku-bot> <nemokosch> Makes more sense

[19:12] <Tirifto_> Okay, yeah, that seems to be the case.

[19:12] <Tirifto_> m: say 3.^name; say 3.HOW.name(3);

[19:12] <camelia> rakudo-moar 636c87894: OUTPUT: ¬´Int‚ê§Int‚ê§¬ª

[19:12] <Tirifto_> m: say 3.HOW.name;

[19:12] <camelia> rakudo-moar 636c87894: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:15] <Tirifto_> Ahh, I understand now. So the metaobjects (which normally happen to be ClassHOW, right?) normally have methods which are meant to be called on ordinary objects to provide information about them (or perhaps rather about their clasess?)‚Ä¶ is that right?

[19:15] <gfldex> Yes, and then some.

[19:16] <discord-raku-bot> <nemokosch> Usually about the class, or whatever it is

[19:16] <discord-raku-bot> <nemokosch> Like the attributes of it, methods of it, mro chain

[19:17] <discord-raku-bot> <nemokosch> I think can also exists on the metaobject

[19:17] <gfldex> The cool thing about Metamode::* is that they behave like classes, so you can subclass. see: https://gfldex.wordpress.com/2021/08/17/most-fancy/

[19:18] <discord-raku-bot> <nemokosch> $blah.^can('method-name')

[19:19] <discord-raku-bot> <nemokosch> Tbh the underscore method names are just enough proof that this wasn't meant to be public üòÖ

[19:24] <Tirifto_> gfldex, is ‚Äòcompose‚Äô necessary to call after adding methods to the role, in order to make them available for use?

[19:24] <gfldex> yes

[19:24] <gfldex> compose wires up the method cache

[19:29] <Tirifto_> gfldex, thank you! Now I understand your code, and can say that it is beautiful. c:

[19:29] <Tirifto_> I shall strive to make mine less so!

[19:30] <gfldex> If you don't want to use the MOP to solve your problem, you could implement method FALLBACK. But that would be rather slow.

[19:33] <Tirifto_> I don‚Äôt really see a way to make use of FALLBACK that would be less complex than the other mentioned ideas. (But I might just be missing something.) `o`

[20:16] *** deoac joined
[20:20] *** teatwo left
[20:21] *** teatwo joined
[20:32] *** deoac left
[23:47] *** Manifest0 left
