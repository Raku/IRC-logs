[00:02] *** guifa joined
[00:09] <deoac> Given the word `abcd` how would a construct the following nested list `[ (abcd) (a bcd) (ab cd) (abc d) (a b cd) (a bc d) (ab c d) (a b c d) ]`

[00:10] <deoac> That is splitting the word in every it can be, while keeping the letters in order.

[00:11] <deoac> I can do it with nested loops, but that's not very rakuish...

[00:12] <discord-raku-bot> <Nemokosch> hmmm

[00:20] <discord-raku-bot> <Nemokosch> m:  my $str = 'abcd'; my @split-positions <== 0 ^..^ $str.elems andthen .combinations; dd @split-positions; 

[00:20] <discord-raku-bot> <Nemokosch> oof

[00:21] <discord-raku-bot> <Nemokosch> not .elems, .chars...

[00:21] <discord-raku-bot> <Nemokosch> m:  my $str = 'abcd'; my @split-positions <== 0 ^..^ $str.chars andthen .combinations; dd @split-positions; 

[00:21] <discord-raku-bot> <Nemokosch> okay, this is a start

[00:53] <discord-raku-bot> <Nemokosch> ... and here I thought it's basically one step away but found no such step xD

[00:55] <discord-raku-bot> <Nemokosch> now I'm thinking it might be better to just write a recursion for it

[00:59] <discord-raku-bot> <Nemokosch> oh there is snip in v6.e

[01:03] <discord-raku-bot> <Nemokosch> m:  use v6.*; my $str = 'abcd'; my @split-positions <== 0 ^..^ $str.chars andthen .combinations; dd @split-positions; @split-positions.map({ $str.comb.snip($_)>>.join }).say; 

[01:03] <discord-raku-bot> <Nemokosch> uh... the build is too old

[01:07] <discord-raku-bot> <Nemokosch> deoac: other than that, apparently it did work

[01:07] <discord-raku-bot> <Nemokosch> it requires a sufficiently recent Rakudo

[01:12] <deoac> Does the `snip` module provide the same functionality?

[01:12] <discord-raku-bot> <Nemokosch> If the author is lizmat then quite sure 😄

[01:12] <deoac> Either way, I'm going to enjoy figuring out the magic in you solution!

[01:12] <deoac> Yep, lizmat!

[01:13] <discord-raku-bot> <Nemokosch> nice. I think it's like a polyfill.

[01:16] *** rf joined
[01:20] <discord-raku-bot> <Nemokosch> Anyways, I'm gonna propose a snip counterpart for strings, the same way there is contains or index or flip

[01:33] *** deoac left
[02:53] *** jgaz left
[03:37] <discord-raku-bot> <:(*@args, *%kwargs)> m: say 'abc'.chars

[03:37] <discord-raku-bot> <:(*@args, *%kwargs)> m: say 'abc'.length

[03:44] *** rf left
[05:17] *** jaguart left
[06:12] *** jaguart joined
[06:19] *** Heptite left
[09:05] *** ab5tract joined
[09:14] *** dakkar joined
[09:37] <discord-raku-bot> <:(*@args, *%kwargs)> m: [1, 2, 3].length

[09:39] <discord-raku-bot> <Nemokosch> neither is length

[09:39] <discord-raku-bot> <Nemokosch> this was kind of a conscious design decision

[09:40] <discord-raku-bot> <Nemokosch> to avoid common terms and mixing a string with a list

[09:41] <discord-raku-bot> <Nemokosch> m: [1, 2, 3].chars.say #clearly about string representation

[09:42] <discord-raku-bot> <Nemokosch> m: [1, 2, 3].elems.say # clearly about list representation

[09:43] <discord-raku-bot> <Nemokosch> m: [1, 2, 3].Int.say # funnily, listy stuff can turn into an integer using its size

[09:43] <discord-raku-bot> <Nemokosch> consequently:

[09:44] <discord-raku-bot> <Nemokosch> m: say 'They are "equal" (as numbers!)' if [1, 2, 3] == <foo bar baz>;

[10:03] <discord-raku-bot> <:(*@args, *%kwargs)> aren't strings and lists both indexable sequences

[10:04] <discord-raku-bot> <:(*@args, *%kwargs)> so they should have common interface

[10:06] <discord-raku-bot> <Nemokosch> no, they aren't

[10:07] <discord-raku-bot> <Nemokosch> that's the thing

[10:07] <discord-raku-bot> <:(*@args, *%kwargs)> :cameliathink:

[10:07] <discord-raku-bot> <Nemokosch> strings aren't indexable sequences

[10:09] <discord-raku-bot> <Nemokosch> not any more than a number or yeah, anything would be

[10:09] *** ab5tract left
[10:11] <discord-raku-bot> <Nemokosch> m: my $random-scalar = 'foo'; say $random-scalar[0]; $random-scalar = 12458; say $random-scalar[0];

[10:12] <discord-raku-bot> <Nemokosch> everything can be taken as a 1-element list (sadly)

[10:32] <discord-raku-bot> <:(*@args, *%kwargs)> why can't they be indexed 😭 raku is doing its best to separate very similar types as much as possible

[10:34] <discord-raku-bot> <Nemokosch> I wish we stopped looking at strings as "very similar types" to lists

[10:34] <discord-raku-bot> <Nemokosch> like, lists of what?

[10:35] <discord-raku-bot> <Nemokosch> C answered question by saying "lists (arrays, actually) of bytes" and ended up with something that no sane person should call a "string" anymore

[10:35] <discord-raku-bot> <:(*@args, *%kwargs)> lists of size 1 strings or characters

[10:35] <discord-raku-bot> <Nemokosch> what is a "character"?

[10:35] <discord-raku-bot> <Nemokosch> what is size 1?

[10:35] <discord-raku-bot> <Nemokosch> I'm not even joking

[10:35] <discord-raku-bot> <:(*@args, *%kwargs)> a unicode code point

[10:36] <discord-raku-bot> <:(*@args, *%kwargs)> weak typing 😭

[10:36] <discord-raku-bot> <Nemokosch> a unicode code point may represent a modifier

[10:37] <discord-raku-bot> <Nemokosch> so 👨‍👧‍👦 might be 2 or 3 characters by that term

[10:37] <discord-raku-bot> <Nemokosch> I opened up a Python shell and copied it

[10:37] <discord-raku-bot> <Nemokosch> it immediately looked like 3 graphemes

[10:38] <discord-raku-bot> <Nemokosch> and reported a size of 5

[10:38] <discord-raku-bot> <Nemokosch> :family_mgb:

[10:38] <discord-raku-bot> <Nemokosch> oops

[10:38] <discord-raku-bot> <Nemokosch> 👨‍👧‍👦

[10:40] <discord-raku-bot> <Nemokosch> the terminal can't fit it into one character for me but Raku at least says that this is "one character"

[10:40] <discord-raku-bot> <Nemokosch> because in Raku a character is a grapheme and that's that

[10:40] <discord-raku-bot> <Nemokosch> but that might not be the only representation unit that you care about - as illustrated by yourself

[10:40] <discord-raku-bot> <:(*@args, *%kwargs)> ok lists of graphemes

[10:41] <discord-raku-bot> <Nemokosch> if you want to get characters, you get characters

[10:41] <discord-raku-bot> <Nemokosch> if you want to get codepoints, you get codepoints

[10:42] <discord-raku-bot> <Nemokosch> I don't know why those who thought this was a good (or even okay) idea but they did...

[10:42] <discord-raku-bot> <Nemokosch> even something horribly missing can turn into a 1-element list at some point

[10:50] <lizmat> m: my $a = $*FOO; dd PROCESS::<$FOO>

[10:50] <camelia> rakudo-moar 69fa6bbaf: OUTPUT: «Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*FOO"), backtrace => Backtrace.new)␤»

[10:50] <lizmat> m: my $a = $*FOO; dd PROCESS::<$FOO>:exists

[10:50] <camelia> rakudo-moar 69fa6bbaf: OUTPUT: «Bool::True␤»

[10:52] <discord-raku-bot> <:(*@args, *%kwargs)> another thing is that lists and maps have different indexing operators why? they have different lookup algorithms? they both have O(1) lookup and that is all that matters to users

[10:53] <lizmat> oops, wrong channel  :-)

[10:56] <discord-raku-bot> <Nahita> yes they have different lookup algorithms, one is pointer arithmetic other depends on hash computations

[10:57] <discord-raku-bot> <Nahita> also lists are always indexed with a numeric value, hashes, well, anything hashable

[10:57] <discord-raku-bot> <Nahita> "different things should look different"

[10:57] <lizmat> more importantly, the different postcircumfixes are a signal to the human reader on their functionality

[10:57] <discord-raku-bot> <Nahita> or something like that was the quote

[11:03] <discord-raku-bot> <:(*@args, *%kwargs)> aren't @ and % enough to tell them they are different anyways

[11:08] <lizmat> yes, you can.  But everything in Raku is an object, so an Array and a Hash are as well

[11:08] <lizmat> and you *can* put them into a scalar, and then the $ wouldn't tell you much, would it ?

[11:20] <discord-raku-bot> <Nemokosch> technically, I think the same thing could support both lookups

[11:37] <discord-raku-bot> <Skarsnik> It's actually bother me to not have {} for hash when I work with other language, because most of the time hash are not in the base language

[11:57] <discord-raku-bot> <:(*@args, *%kwargs)> most modern languages should have built in maps/hashes?

[11:58] <discord-raku-bot> <:(*@args, *%kwargs)> or is that only a thing with scripting languages?

[12:03] <discord-raku-bot> <:(*@args, *%kwargs)> m: my %h = :foo('bar'); say %h{'foo'}; say %h['foo']; 

[12:26] <discord-raku-bot> <:(*@args, *%kwargs)> me when the cleanest pair syntax is the php fat arrow 😠

[12:30] <discord-raku-bot> <lakmatiol> outside of C, what language doesn't ship with hashmap?

[12:35] <discord-raku-bot> <Skarsnik> C++

[12:35] <discord-raku-bot> <Skarsnik> I mean in the language, not in the standard library

[12:43] <discord-raku-bot> <Nemokosch> C++ is also a highly hackable language, you may as well consider the standard library a part of it

[12:48] <discord-raku-bot> <Skarsnik> I never work with the stl on my C++ projects, since outside containers you are mostly using C stdlib x)

[12:49] <discord-raku-bot> <lakmatiol> stl is part of C++ last I checked

[12:55] <discord-raku-bot> <Nemokosch> this, to be honest

[12:55] <discord-raku-bot> <Nemokosch> colon pairs can be nice as named arguments tho

[12:57] <discord-raku-bot> <Skarsnik> => is from Perl I think, not Php, but yes it's the nicer syntax

[12:58] <discord-raku-bot> <Nemokosch> PHP itself started off like

[12:58] <discord-raku-bot> <Nemokosch> "let's make this Perl but absolutely not for programmers"

[12:59] <discord-raku-bot> <Nemokosch> Perl 4.5 🤪

[13:00] <discord-raku-bot> <Nemokosch> by now, however, it's plain to see which language could resurrect itself

[13:01] <discord-raku-bot> <Skarsnik> It's sad for Perl 5 that the beginners doing Perl-cgi web page give it a bad reputation x)

[13:03] <discord-raku-bot> <Nemokosch> true and the schism didn't help either, when we rebuilding should have started

[13:04] <discord-raku-bot> <Nemokosch> anyway, I have to say it's bizarre how there are still people who think they managed to protect Perl from Perl6 somehow and that the former survived while the latter died

[13:04] <discord-raku-bot> <Nemokosch> that "protection" is essentially the reason Perl turned into a zombie language that proves to be unable to innovate over and over again

[13:08] <discord-raku-bot> <Nemokosch> the only excuse I can think of is that people for some reason still use POSIX shell (mostly Bash) which is set to be always far worse than Perl

[13:09] <discord-raku-bot> <Nemokosch> I dream of a world where Perl is the language used for shell stuff, casually mocked as weird, and /bin/sh derivatives are no more.

[13:10] *** jgaz joined
[13:11] <discord-raku-bot> <:(*@args, *%kwargs)> php is simplified perl with bad and inconsistent function naming

[13:12] <discord-raku-bot> <:(*@args, *%kwargs)> and \ for namespace resolution (don't you already have ::?)

[13:13] <discord-raku-bot> <Nemokosch> idk if PHP has ::, read up on it a couple of years ago but never really used it

[13:15] <discord-raku-bot> <Nemokosch> anyway, PHP of these days looks like a modern language while even the most moder Perl barely avoids looking like an esoteric hybrid of C and (S)hell

[13:15] <discord-raku-bot> <Nemokosch> modern

[13:20] <discord-raku-bot> <:(*@args, *%kwargs)> php at least managed to not get abused to write unreadble one-liners 😆

[13:22] <discord-raku-bot> <Nemokosch> APL wants to have a word about this

[13:23] <discord-raku-bot> <Nemokosch> anyway I wanted to show you something that containers casually allow in Raku

[13:23] <discord-raku-bot> <Nemokosch> first

[13:23] <discord-raku-bot> <Nemokosch> m: (1..6).roll(10).say

[13:24] <discord-raku-bot> <Nemokosch> this makes sense, right? 10 times rolled a die with values from 1 to 6

[13:25] <discord-raku-bot> <Nemokosch> now I'm gonna batch it up each 3

[13:25] <discord-raku-bot> <Nemokosch> m: (1..6).roll(10).batch(3).say

[13:26] <discord-raku-bot> <Nemokosch> if you have containers, the values can be bound to the same containers in the two examples, meaning that you can directly mutate the same value, both as a flat array and a batched array

[13:27] <discord-raku-bot> <Nemokosch> m:  my @arr = (1..6).roll(10); dd @arr; @arr[4] = 'haha'; dd @arr; @arr.batch(3)[1;1] = 'hihi'; dd @arr; 

[13:29] <discord-raku-bot> <Nemokosch> this also (correctly) implies that indexing is not "magic" in Raku, it is just one of the functions that can return a container

[13:30] <discord-raku-bot> <:(*@args, *%kwargs)> arrays are lists of containers 🤔

[13:31] <discord-raku-bot> <Nemokosch> indeed

[13:31] <discord-raku-bot> <:(*@args, *%kwargs)> so that works

[13:33] <discord-raku-bot> <Nemokosch> Scalar containers in particular

[13:33] <discord-raku-bot> <Nemokosch> but anyway Scalars are the most universally understood containers in Raku :DD

[13:37] <discord-raku-bot> <:(*@args, *%kwargs)> do you have a list of raku magic methods

[13:39] <discord-raku-bot> <Nemokosch> what do you mean?

[13:40] <discord-raku-bot> <:(*@args, *%kwargs)> methods that alter object's behavior

[13:41] <discord-raku-bot> <:(*@args, *%kwargs)> smth like BUILD or CALL-ME

[13:42] <discord-raku-bot> <:(*@args, *%kwargs)> or gist

[13:43] <discord-raku-bot> <Nemokosch> m: say Any.^methods>>.gist.grep({ $_ eq .uc })

[13:43] <discord-raku-bot> <Nemokosch> okay, this is not all of them

[13:44] <discord-raku-bot> <Nemokosch> also the ones with underscores are typically "implementation details" aka you shouldn't rely on them, they are only exposed for internal purposes

[13:44] <discord-raku-bot> <Nemokosch> ACCEPTS is important

[13:45] <discord-raku-bot> <Nemokosch> with lowercase, raku is even more important than gist

[13:45] <discord-raku-bot> <Nemokosch> for introspection, VAR, WHAT, HOW, WHICH, and WHO are pretty essential

[13:46] <discord-raku-bot> <Nemokosch> HOW in particular is the entry point of the metamodel, one could say

[13:47] <discord-raku-bot> <Nemokosch> when I did Any.^methods, I basically run the call on the HOW of Any

[13:47] <discord-raku-bot> <:(*@args, *%kwargs)> why are FLATTENABLE_* in snake case while others are lisp case

[13:48] <discord-raku-bot> <Nemokosch> ^

[13:48] <discord-raku-bot> <:(*@args, *%kwargs)> ah

[13:48] <discord-raku-bot> <Nemokosch> I don't know if this is a formal rule but it's a tendency I noticed

[13:48] <discord-raku-bot> <:(*@args, *%kwargs)> should i use snake case or lisp case for raku programs

[13:49] <discord-raku-bot> <:(*@args, *%kwargs)> seems like lisp case is more consistent with stdlib

[13:49] <discord-raku-bot> <Nemokosch> yes, that's the mainstream

[13:50] <discord-raku-bot> <:(*@args, *%kwargs)> > Raku intentionally confuses items and single-element lists

[13:51] <discord-raku-bot> <Nemokosch> do you know TIMTOWTDI BSCINABTE?

[13:51] <discord-raku-bot> <Nemokosch> yes, seen this before but I'm yet to understand the benefit of this

[13:51] <discord-raku-bot> <Nemokosch> perhaps it could even be argued that this is a relic of old, flat lists

[13:52] <discord-raku-bot> <:(*@args, *%kwargs)> consistent is good

[13:52] <discord-raku-bot> <Nemokosch> yes xD

[13:52] <discord-raku-bot> <Nemokosch> in short

[13:53] <discord-raku-bot> <Nemokosch> I'd say this applies to names

[13:54] <discord-raku-bot> <:(*@args, *%kwargs)> why are raku docs' lists so terrible https://docs.raku.org/routine-method.html

[13:54] <discord-raku-bot> <Skarsnik> be careful with .^ or HOW, sometime thing at compile time does not have complete information x)

[13:54] <discord-raku-bot> <Nemokosch> I didn't even know this existed

[13:55] <discord-raku-bot> <Nemokosch> imo that's only really a problem if you want to build Rakudo itself 😛

[13:55] <discord-raku-bot> <Nemokosch> in that case sure, it's always touchy to know what is already available and what isn't...

[13:56] <discord-raku-bot> <:(*@args, *%kwargs)> oh nvm ik how to read it it is sorted alphabetically but still

[13:56] <discord-raku-bot> <Skarsnik> This give me some issue when writing Nativecall function signature check x)

[13:57] <discord-raku-bot> <Nemokosch> okay but NativeCall itself is a deep sea

[13:58] <discord-raku-bot> <Nemokosch> @:(*@args, *%kwargs) what would you like to see?

[13:59] <discord-raku-bot> <Nemokosch> feedback is always useful in the constant struggle for a better documentation

[14:01] <discord-raku-bot> <:(*@args, *%kwargs)> oh nah its ok-ish to me i just didn't know how to use it

[14:02] <discord-raku-bot> <Nemokosch> well, before you get too used to it

[14:02] <discord-raku-bot> <Nemokosch> https://new-raku.finanalyst.org/routines.html

[14:02] <discord-raku-bot> <Nemokosch> we miiight finally move to something like this

[14:02] <discord-raku-bot> <:(*@args, *%kwargs)> originally going to say "add search feature" but there is already one at the top

[14:04] <discord-raku-bot> <Skarsnik> Searching Str is confusing on this page x) Should it reach the Str class directly (or at the first result)

[14:05] <discord-raku-bot> <Skarsnik> Str Synthesised documentation from type/Version type/Sequence type/StrDistance type/DateTime type/Real type/ForeignCode type/Code type/Pair type/IO/CatHandle type/Junction type/IO/Special type/Allomorph type/Mu type/Backtrace type/Label type/IO/Path type/Blob type/Systemic type/Num type/Match type/Thread type/List type/Date type/IO/Handle type/Nil 

[14:06] <discord-raku-bot> <Nemokosch> https://github.com/Raku/doc-website/issues please report things like this here

[14:07] <discord-raku-bot> <Nemokosch> it would be great to show some interest 😅

[14:10] <discord-raku-bot> <Nemokosch> https://new-raku.finanalyst.org/search.html is better but also less convenient

[14:10] <discord-raku-bot> <:(*@args, *%kwargs)> m: switch ' ' -> $c { case ' ':   say '<space>';   break; default:   say $c; } 

[14:10] <discord-raku-bot> <:(*@args, *%kwargs)> no switch

[14:10] <discord-raku-bot> <Nemokosch> oh don't worry about that

[14:10] <discord-raku-bot> <Skarsnik> I think you are searching for given/when

[14:10] <discord-raku-bot> <Nemokosch> ^^

[14:11] <discord-raku-bot> <Nemokosch> there is something that is even overkill for switch-case 😄

[14:11] <discord-raku-bot> <Skarsnik> If I remember correctly

[14:11] <discord-raku-bot> <Nemokosch> given binds the topic to the value you specify

[14:12] <discord-raku-bot> <Nemokosch> and when is evaluated based on smartmatch

[14:13] <discord-raku-bot> <Nemokosch> also, no break - the default behavior is the equivalent, I think succeed

[14:13] <discord-raku-bot> <Nemokosch> (if you want fall-through, I think proceed would do that for you)

[14:14] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub dispatch($c) {   my %dispatches = {     ' ' => '<space>';     "\n" => '<newline>';   };   %dispatch.EXISTS-KEY($c) ?? %dispatch{$c} !! $c; }  say dispatch(' '); 

[14:15] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub dispatch($c) {   my %dispatches = {     ' ' => '<space>';     "\n" => '<newline>';   };   %dispatches.EXISTS-KEY($c) ?? %dispatches{$c} !! $c; }  say dispatch(' '); 

[14:15] <discord-raku-bot> <Skarsnik> haha I love the random 0; at https://github.com/Skarsnik/perl6-gumbo/blob/master/lib/Gumbo/Parser.pm6#L72 to avoid a 6.c bug xD

[14:15] <discord-raku-bot> <Nemokosch> there is absolutely no break from what I know - in when, it's succeed (and the default), in loops, there is last

[14:16] <discord-raku-bot> <Nemokosch> with the continue-ish counterparts of proceed and next, respectively

[14:16] <discord-raku-bot> <Nahita> use :exists not EXISTS-KEY

[14:16] <discord-raku-bot> <Nemokosch> that's not the problem, though, but the use of semicolons

[14:16] <discord-raku-bot> <Nemokosch> m:  sub dispatch($c) {   my %dispatches = {     ' ' => '<space>',     "\n" => '<newline>'   };   %dispatches.EXISTS-KEY($c) ?? %dispatches{$c} !! $c; }  say dispatch(' '); 

[14:17] <discord-raku-bot> <Nemokosch> oh yeah, the curly braces themselves are rather just noise in this case

[14:17] <discord-raku-bot> <:(*@args, *%kwargs)> noob error 😅

[14:17] <discord-raku-bot> <Nemokosch> m:  sub dispatch($c) {   my %dispatches = ' ' => '<space>', "\n" => '<newline>';   %dispatches.EXISTS-KEY($c) ?? %dispatches{$c} !! $c; }  say dispatch(' '); 

[14:18] <discord-raku-bot> <Nemokosch> the feedback (namely that it parsed as a Block) was definitely less than awesome though

[14:18] <discord-raku-bot> <Nemokosch> I think there could be at least a warning to this

[14:18] <discord-raku-bot> <Nemokosch> when the lhs is a %var and the rhs is a Block for some reason

[14:19] <discord-raku-bot> <Nemokosch> by the way

[14:19] <discord-raku-bot> <Nemokosch> @:(*@args, *%kwargs) do you know that assignment itself is magic?

[14:19] <discord-raku-bot> <Nemokosch> it's a call to the STORE method

[14:20] <discord-raku-bot> <Nemokosch> therefore I think it would be easy to chase it down and add a warning or something

[14:21] <discord-raku-bot> <:(*@args, *%kwargs)> m: class Foo {     method STORE {         say 'hi';     } }  my $foo = Foo.new; 

[14:21] <discord-raku-bot> <Nemokosch> mm, not like this. the Scalar has its STORE executed, in this case

[14:22] <discord-raku-bot> <Nemokosch> I wonder, though

[14:22] <discord-raku-bot> <Nemokosch> m:  class Foo {     method STORE {         say 'hi';     } }  my $foo := Foo.new; $foo = 'haha'; 

[14:22] <discord-raku-bot> <Nemokosch> oopsie

[14:23] <discord-raku-bot> <Nemokosch> there is Proxy if you really want to do something like this

[14:23] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/Proxy

[14:25] <discord-raku-bot> <:(*@args, *%kwargs)> there is no method to overload + in raku hmm

[14:26] <discord-raku-bot> <Nemokosch> you think so? 😼

[14:26] <discord-raku-bot> <:(*@args, *%kwargs)> wait its a multi

[14:26] <discord-raku-bot> <Nemokosch> disclaimer: it's not very Raku-ish to overload + for something that isn't essentially a number

[14:26] <discord-raku-bot> <:(*@args, *%kwargs)> which means i can

[14:26] <discord-raku-bot> <Nemokosch> the cool folks would just invent new operators

[14:26] <discord-raku-bot> <Nemokosch> for new data types

[14:27] <discord-raku-bot> <Nemokosch> having said that, + does have some overloads for not-quite-numeric stuff

[14:28] <discord-raku-bot> <Nemokosch> the important thing here is that = is not a usual operator while + is, it's really just &infix:<+>

[14:29] <discord-raku-bot> <Nemokosch> sorry for flooding you but... do you know the Perl&Raku weekly challenges?

[14:29] <discord-raku-bot> <:(*@args, *%kwargs)> no

[14:33] <discord-raku-bot> <Nemokosch> https://theweeklychallenge.org/challenges/

[14:33] <discord-raku-bot> <Nemokosch> usually rather small tasks, sometimes even just a couple of lines of Raku code

[14:33] <discord-raku-bot> <Nemokosch> and you can check others' solutions as well

[14:34] <discord-raku-bot> <Nemokosch> I also try to do them most of the time

[14:35] <discord-raku-bot> <Nemokosch> but for example there is Bruce Gray/Util who just got crowned champion for november, definitely a very nice author, his talks inspired me a lot to start with the language

[14:44] <discord-raku-bot> <:(*@args, *%kwargs)> m: say(for (1, 2, 3, 4) -> $x { $x }); 

[14:46] <discord-raku-bot> <:(*@args, *%kwargs)> m: say($_ * 2 for (1, 2, 3, 4)); 

[14:47] <discord-raku-bot> <Nemokosch> it might need extra parens?

[14:47] <discord-raku-bot> <:(*@args, *%kwargs)> m: say ($_ * 2 for (1, 2, 3, 4)); 

[14:48] <discord-raku-bot> <:(*@args, *%kwargs)> m: say (for (1, 2, 3, 4) -> $x { $x }); 

[14:49] <discord-raku-bot> <:(*@args, *%kwargs)> raku is whitespace-significant

[14:49] <discord-raku-bot> <Nemokosch> absolutely

[14:49] <discord-raku-bot> <Nemokosch> say (for (1, 2, 3, 4) -> $x { $x }); is the same as say((for (1, 2, 3, 4) -> $x { $x }));

[14:53] <discord-raku-bot> <:(*@args, *%kwargs)> m: my @range = 0...10; my @doubled-odds = (for @range -> $i {   if $i % 2 == 1 {     $i * 2   } });  say @doubled-odds; 

[14:54] <discord-raku-bot> <:(*@args, *%kwargs)> m: my @range = 0...10; my @doubled-odds = (for @range -> $i { $i * 2 if $i % 2 == 1 });  say @doubled-odds; 

[14:55] <discord-raku-bot> <Nemokosch> there is also %% as the "evenly divisible" operator

[14:58] <discord-raku-bot> <:(*@args, *%kwargs)> somehow implicit variable still exists in raku lol

[14:58] <discord-raku-bot> <Nemokosch> what do you mean "still"?

[14:58] <discord-raku-bot> <:(*@args, *%kwargs)> it is from perl and stayed in raku

[14:58] <discord-raku-bot> <Nemokosch> yep

[14:58] <discord-raku-bot> <Nemokosch> there is also $/

[15:01] *** rf joined
[15:06] <discord-raku-bot> <:(*@args, *%kwargs)> ill try to avoid it 😈

[15:07] <discord-raku-bot> <Nahita> :\

[15:07] <discord-raku-bot> <Nemokosch> why

[15:09] <discord-raku-bot> <:(*@args, *%kwargs)> because explicit is better than implicit

[15:10] <discord-raku-bot> <Nemokosch> this is not P*thon 😄

[15:10] <discord-raku-bot> <Nemokosch> BY THE WAY

[15:10] <discord-raku-bot> <Nemokosch> weren't you the one who wanted implicit variable declaration for everything?

[15:11] <discord-raku-bot> <:(*@args, *%kwargs)> implicit declaration not variable

[15:11] <discord-raku-bot> <:(*@args, *%kwargs)> but whatever fair

[15:12] <discord-raku-bot> <Nemokosch> well, that is a Pythonism that doesn't follow "the zen of Python" 😛

[15:14] <discord-raku-bot> <:(*@args, *%kwargs)> ppl don't complain about it somehow

[15:15] <discord-raku-bot> <:(*@args, *%kwargs)> maybe i stop complaining about $_?

[15:16] <discord-raku-bot> <Nemokosch> I don't know. I think it's really good when used in short contexts

[15:17] <discord-raku-bot> <stevied> ok, I dropped the module for updating legacy extensions: https://raku.land/zef:sdondley/Distribution::Extension::Updater?v=0.0.2

[15:19] <discord-raku-bot> <stevied> docs are a little sloppy at the moment; patching them up

[15:20] <discord-raku-bot> <:(*@args, *%kwargs)> yeah, use $_ when the alternative is more verbose

[15:22] <discord-raku-bot> <Nemokosch> say, you have something like foo.bar.baz ** foo.bar.baz

[15:22] <discord-raku-bot> <Nemokosch> perhaps it's better to write something like

[15:22] <discord-raku-bot> <Nemokosch> $_ ** $_ given foo.bar.baz

[15:22] <discord-raku-bot> <Nemokosch> or

[15:23] <discord-raku-bot> <Nemokosch> foo.bar.baz andthen $_ ** $_

[15:23] <discord-raku-bot> <Nemokosch> or

[15:23] <discord-raku-bot> <Nemokosch> foo.bar.baz.&{ $_ ** $_}

[15:30] <discord-raku-bot> <:(*@args, *%kwargs)> IIFE 😎  (sub ($x) {   $x ** $x })(foo.bar.baz) 

[15:32] <discord-raku-bot> <Nemokosch> 😄

[15:32] <discord-raku-bot> <Nemokosch> perhaps even a pointy block would do

[15:32] <discord-raku-bot> <Nemokosch> ( -> $x { $x ** $x } )(foo.bar.baz)

[15:33] <discord-raku-bot> <:(*@args, *%kwargs)> {$_ ** $_}(foo.bar.baz)

[15:34] <discord-raku-bot> <Nemokosch> aaand we are back to $_

[15:35] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub f {   @_ }  say f(1, 2, 3, 4); 

[15:36] <discord-raku-bot> <:(*@args, *%kwargs)> @_ is not gone

[15:36] <discord-raku-bot> <Nemokosch> I wonder how much this is even intentional

[15:36] <discord-raku-bot> <Nemokosch> but honestly, who ever writes subroutines without any signature

[15:37] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub f {   {|%(@_.pairs), |%_} }  say f(1, 2, 3, 4, foo => 'bar'); 

[15:37] <discord-raku-bot> <:(*@args, *%kwargs)> how

[15:38] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub f(*@_, *%_) {   {|%(@_.pairs), |%_} }  say f(1, 2, 3, 4, foo => 'bar'); 

[15:41] <rf> m: sub f(*@_, *%_) {   {|%(@_.pairs), |%_} }  say f(1, 2, 3, 4, foo => 'bar'); 

[15:41] <camelia> rakudo-moar 04329e450: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> ub f(*@_, *%_) {   {|%(@_.pairs), |%_} }⏏  say f(1, 2, 3, 4, foo => 'bar');␤    expecting any of:␤        infix…»

[15:41] <rf> m: sub f(*@_, *%_) {   {|%(@_.pairs), |%_} } ; say f(1, 2, 3, 4, foo => 'bar'); 

[15:41] <camelia> rakudo-moar 04329e450: OUTPUT: «(0 => 1 3 => 4 1 => 2 2 => 3 foo => bar)␤»

[15:54] <discord-raku-bot> <:(*@args, *%kwargs)> why does it give a list instead of a hash

[15:55] <discord-raku-bot> <:(*@args, *%kwargs)> m: sub f(*@_, *%_) {   %(|%(@_.pairs), |%_) }  say f(1, 2, 3, 4, foo => 'bar'); 

[15:55] <discord-raku-bot> <Nemokosch> hm, are you sure the braces didn't get parsed as block delimiters?

[15:56] <discord-raku-bot> <:(*@args, *%kwargs)> it has 2 slips how can it be a block

[15:57] <discord-raku-bot> <Nemokosch> not sure if that would hold it back

[15:57] <discord-raku-bot> <:(*@args, *%kwargs)> slips (unpacks) can only exist inside containers

[15:58] <discord-raku-bot> <Nemokosch> no

[15:58] <discord-raku-bot> <Nemokosch> they will flatten out IF they are in one

[15:58] <discord-raku-bot> <Nemokosch> but they can solidify as a list if they aren't

[15:59] <discord-raku-bot> <Nemokosch> they are Lists, after all

[16:00] <discord-raku-bot> <Nemokosch> anyway, I can't say if what you witness is a bug or not

[16:00] <discord-raku-bot> <Nemokosch> but I strongly suspect it got interpreted as a block

[16:04] <discord-raku-bot> <:(*@args, *%kwargs)> til https://docs.raku.org/type/Slip

[16:04] <discord-raku-bot> <:(*@args, *%kwargs)> i thought python slices are stupid but here we have a type of list just for unpacking

[16:08] *** jgaz left
[16:21] <discord-raku-bot> <Nemokosch> does python even have slices?

[16:22] <discord-raku-bot> <:(*@args, *%kwargs)> https://docs.python.org/3/library/functions.html#slice

[16:22] *** Heptite joined
[16:23] <discord-raku-bot> <lakmatiol> pretty sure this is documented here https://docs.raku.org/type/Hash Please see the section on hash literals for different ways to declare a hash. Additionally, they can be declared using curly braces as long as these rules are followed:  Empty curly braces will always declare an empty hash.  A reference to $_ (even implicit) will instead declare a block.  A Pair or variable with % as the first element

[16:23] <discord-raku-bot> will declare a hash.

[16:25] <discord-raku-bot> <:(*@args, *%kwargs)> the apparently stupid thing here is that instead of slicing right away python create a slice object and let the list (or whatever indexable type) itself do the actual work so lst[:3] becomes lst[slice(None, 3, None)]

[16:25] <discord-raku-bot> <lakmatiol> yeah, that's a python 3 change

[16:25] <discord-raku-bot> <:(*@args, *%kwargs)> but some objects implement custom behavior with slices so it might as well be deliberate

[16:26] <discord-raku-bot> <lakmatiol> it also allows numpy to do things like arr[20:25,20:25] for multi-axis slices

[16:26] <discord-raku-bot> <lakmatiol> which passes a tuple of slices to __getitem__

[16:28] <discord-raku-bot> <:(*@args, *%kwargs)> i haven't yet found a use of slips as objects tho

[16:29] <discord-raku-bot> <lakmatiol> you can use it map

[16:29] <discord-raku-bot> <lakmatiol> which is occasionally useful

[16:29] <discord-raku-bot> <lakmatiol> but ye, a lot of raku is very situational

[16:29] <discord-raku-bot> <:(*@args, *%kwargs)> m: my $s = |(4, 5, 6); my @a = (1, 2, 3, $s, 7); say @a; 

[16:30] <discord-raku-bot> <lakmatiol> like the (1, 1, * + * ... *) syntax. Sure, it's a fancy way to do fibonacci numbers, but outside of that, its usage is fairly nebulous.

[16:31] <discord-raku-bot> <Nemokosch> interesting, I never knew about that slice

[16:32] <discord-raku-bot> <Nemokosch> What I really like about this, though, is that it's easy to remember

[16:32] <discord-raku-bot> <Nemokosch> and the sequence generator in general is pretty useful in my opinion

[16:35] <discord-raku-bot> <Nemokosch> okay but there was no $_, and @_ didn't seem to play a similar role, if we look at that expression

[16:36] <discord-raku-bot> <Nemokosch> so this wouldn't convince me per se that the behavior is right

[16:37] <discord-raku-bot> <Nemokosch> m:  sub f(*@args, *%kwargs) {   { |@args.pairs, |%kwargs } }  say f(1, 2, 3, 4, foo => 'bar'); 

[16:37] <discord-raku-bot> <Nemokosch> now this really doesn't seem to contain any $_ in any sense...

[16:37] <discord-raku-bot> <lakmatiol> yeah, that one may be a bug.

[16:38] <discord-raku-bot> <Nemokosch> In my opinion, many of these things boil down to the one-pass parsing applied to a seriously complex language

[16:39] <discord-raku-bot> <Nemokosch> and I suspect the only big reason for the one-pass parsing is the overall slowness of grammar parsing

[16:39] <discord-raku-bot> <Nemokosch> the built-in grammars are absolutely capable of more nuanced parsing

[16:39] <discord-raku-bot> <Nemokosch> BUT that would involve backtracking

[16:40] <discord-raku-bot> <:(*@args, *%kwargs)> backtracking slow?

[16:44] <discord-raku-bot> <:(*@args, *%kwargs)> all this make me not trust hash literals lol

[16:44] <discord-raku-bot> <:(*@args, *%kwargs)> gonna use %()

[16:47] <discord-raku-bot> <:(*@args, *%kwargs)> m: say(   %(a => 1, b => 2) eqv {a => 1, b => 2} ); 

[16:47] <discord-raku-bot> <:(*@args, *%kwargs)> - not a type - is capitalized

[16:49] <discord-raku-bot> <Nemokosch> like in Python? 😛

[16:50] <discord-raku-bot> <:(*@args, *%kwargs)> i don't like that in python either

[16:50] <discord-raku-bot> <Nemokosch> idk I don't feel strongly about it

[16:50] <discord-raku-bot> <Nemokosch> there is also NaN I think

[16:50] <discord-raku-bot> <Nemokosch> or Inf

[16:51] <discord-raku-bot> <:(*@args, *%kwargs)> anyways

[16:51] <discord-raku-bot> <lakmatiol> seems like in order to get a hash from {}, you need to have a Pair be the first element

[16:51] <discord-raku-bot> <lakmatiol> which makes sense

[16:51] <discord-raku-bot> <lakmatiol> but this check happens before Slip gets unpacked

[16:52] <discord-raku-bot> <lakmatiol>  > { :3rd, (:1st, :2nd ).Slip } {nd => 2, rd => 3, st => 1} >  { (:1st, :2nd ).Slip, :3rd } (st => 1 nd => 2 rd => 3) 

[16:53] <discord-raku-bot> <lakmatiol>  > sub maybe-pair { :2nd } &maybe-pair > { maybe-pair, :1st } (nd => 2 st => 1) 

[16:53] <discord-raku-bot> <lakmatiol> cursed

[16:54] <discord-raku-bot> <:(*@args, *%kwargs)> anything other than that and its not guaranteed

[16:54] <discord-raku-bot> <:(*@args, *%kwargs)> and gets unpredictable

[16:54] <discord-raku-bot> <lakmatiol> yeah

[16:54] <discord-raku-bot> <lakmatiol> it is in the end a literal syntax

[16:54] <discord-raku-bot> <lakmatiol> so IG it makes sense it behaves oddly once you start feeding it non-literals

[16:55] <discord-raku-bot> <Nemokosch> tbh there is too much syntax for too few characters 😆

[16:55] <discord-raku-bot> <lakmatiol> yeah

[16:56] <discord-raku-bot> <Nemokosch> the language should just go the APL way haha

[16:56] <discord-raku-bot> <lakmatiol> this should've been some unicode brace pair

[17:37] *** dakkar left
[17:42] <discord-raku-bot> <stevied> cam anyone clue me in on what's wrong here: https://github.com/sdondley/Distribution-Extension-Updater/actions/runs/4008470899/jobs/6882661024

[17:47] <discord-raku-bot> <Nemokosch> I have seen this before but I'm not sure I could figure it out

[17:47] <discord-raku-bot> <Nemokosch> could this already be a "too long path"?

[17:48] <discord-raku-bot> <stevied> not sure what that is?

[17:49] <discord-raku-bot> <stevied> i just reran the test, same settings, and it worked. the definition of insanity has been refuted

[17:49] <discord-raku-bot> <stevied> passed: https://github.com/sdondley/Distribution-Extension-Updater/actions/runs/4008470899/jobs/6882785846

[19:47] *** n1to joined
[20:35] *** jgaz joined
[21:45] <rf> Nice module @stevied!

[22:28] <discord-raku-bot> <stevied> Thanks! It’s still a little rough around the edges in a couple of places but will polish it up some later this week.

[22:36] *** jgaz left
[23:53] *** n1to left
