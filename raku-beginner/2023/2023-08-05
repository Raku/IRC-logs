[01:16] *** razetime joined
[03:56] *** razetime left
[05:41] *** siavash joined
[08:15] *** teatwo left
[08:15] *** tea3po joined
[08:16] *** tea3po left
[08:16] *** tea3po joined
[08:17] *** tea3po left
[08:48] *** razetime joined
[09:13] *** teatime joined
[10:15] *** NemokoschKiwi joined
[10:23] *** NemokoschKiwi left
[10:36] *** siavash left
[13:33] *** razetime left
[14:33] *** NemokoschKiwi joined
[14:36] *** Tirifto_ left
[14:39] *** Tirifto joined
[14:40] *** Tirifto left
[14:41] *** Tirifto joined
[16:48] <jgaz> In Raku, how do I match N of some repeating character? I tried ~~ /\d{3}/ but that appears to be wrong.

[16:49] <discord-raku-bot> <nemokosch> using the ** operator

[16:49] <discord-raku-bot> <nemokosch> \d ** 3

[16:49] <jgaz> thanks... why the change in syntax from {n}?

[16:51] <jgaz> Also, will that break something like /^^\d ** 3 1/ where I'm looking for any 3 digits at the start of a string followed by a one?

[16:54] <discord-raku-bot> <nemokosch> I wouldn't know by heart if {} has a special meaning inside regexes but I don't particularly fancy that syntax either

[16:55] <discord-raku-bot> <nemokosch> Raku regexes were designed to be pleasant and readable, not compatible with one of the dozen of ad-hoc regex dialects

[16:56] <discord-raku-bot> <nemokosch> I think that's perfectly fine for "any 3 digits followed by a 1, right after the beginning of the line"

[16:56] <discord-raku-bot> <nemokosch> I think ^^ is for lines

[16:58] <jgaz> It certainly helps ditch the line-noise comparison. Thanks for the help.

[17:30] <discord-raku-bot> <antononcube> It does -- it specifies a code to be executed together with parsing by the regex. For example, it is a way to include make statements in a grammar. (I.e. not to have a separate class for the actions.)

[17:30] <discord-raku-bot> <nemokosch> I just clicked on this issue https://github.com/Raku/doc/issues/4112

[17:31] <discord-raku-bot> <antononcube> Hmm... I think I read that in the book "Parsing with Perl 6 Regexes and Grammars: A Recursive Descent into Parsing" by Moritz Lenz.

[17:33] <discord-raku-bot> <antononcube> Yeah, see page end of Chapter 4 fo that book. (Page 46.)

[17:38] <discord-raku-bot> <antononcube>  | Syntax | Description | |---|---| | `{ CODE }` | runs perl 6 code; no effect on regex match. | | `<?{ CODE }>` | Code needs to return a true value for the match to succeed. | | `<!{ CODE }>` | Code needs to return a false value for the match to succeed. | | `<{ CODE }>` | result of code is interpreted as a regex. | | `<$STRING>` | Interprets $STRING as regex source code. | 

[17:39] <discord-raku-bot> <antononcube> I made the Markdown table above looking at book's table 4-3.

[17:40] <discord-raku-bot> <nemokosch> manually or using some magical tool you created? ^^

[17:40] *** NemokoschKiwi left
[17:43] <discord-raku-bot> <antononcube> You are so sharp!! Yes, using the "magical tool" I created. ðŸ™‚

[17:46] <discord-raku-bot> <antononcube> Here is a proof screenshot. But in all fairness this could have been done over the Web interfaces of OpenAI and Bard/PaLM.

[17:46] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/768511641758466088/1137441497952817172/LLM-functions-demo-Markdown-table-for-Ways-to_embed-Perl-6-code-into-regexes.png

[17:50] <discord-raku-bot> <nemokosch> where is the input, though?

[17:51] <discord-raku-bot> <antononcube> Hmmm... I think the input is obvious; the green text.

[17:51] <discord-raku-bot> <nemokosch> what is $^a $^b then?

[17:52] <discord-raku-bot> <nemokosch> oh okay nevermind

[17:52] <discord-raku-bot> <nemokosch> the wall of text in the middle

[17:52] <discord-raku-bot> <nemokosch> but the interesting part would be getting that wall of text ðŸ˜›

[17:52] <discord-raku-bot> <antononcube> Here is the code I used:  use LLM::Functions; â€Œâ€Œmy &fmdt = llm-function({"Convert to a Markdown table with columns $^a the text: $^b."}, llm-evaluator=>'PaLM'); â€Œâ€Œ&fmdt('"Syntax" and "Description"', 'Syntax { CODE } <?{ CODE }> <!{ CODE }> <{ CODE }> <$STRING>  Description runs perl 6 code; no effect on regex match. Code needs to return a true value for the match to succeed. Code needs to return a

[17:52] <discord-raku-bot> false value for the match to succeed. 

[17:53] <discord-raku-bot> <antononcube> Yes, I looked up the table from the book. (To get the text.)

[17:54] <discord-raku-bot> <antononcube> The "magic" was to use an LLM to "transpose" the text into two column Markdown table.

[17:57] <discord-raku-bot> <antononcube> Here is a similar result using Bard's interface directly:

[17:57] <discord-raku-bot> <antononcube> https://cdn.discordapp.com/attachments/768511641758466088/1137444172496900136/Bard-demo-Markdown-table-for-Ways-to_embed-Perl-6-code-into-regexes.png

[19:31] *** ab5tract joined
[20:06] *** ab5tract left
[20:11] <discord-raku-bot> <librasteve> {} in regexes was repurposed to call a function (similar to {} in strings)

[20:14] *** teatwo joined
[20:17] *** teatime left
[20:24] *** teatwo left
[20:24] *** teatwo joined
[20:47] *** ab5tract joined
[21:17] *** ab5tract left
[21:32] *** wafflus joined
[21:33] <wafflus> how do i defeine a new operator ? i tried this and it didn't work: https://pastebin.com/YyudX7uN

[21:34] <discord-raku-bot> <nemokosch> The REPL is not clever enough to remember operators from previous reads

[21:35] <wafflus> it works if i say type x but not for unicode symbols

[21:35] <discord-raku-bot> <nemokosch> Other than that, i think you're doing it right

[21:35] <wafflus> k

[21:35] <lizmat> the problem is that the infix sub *is* defined and accessible, but the grammar tweak isn't

[21:36] <lizmat> in the REPL

[21:36] <discord-raku-bot> <nemokosch> x exists as a built-in, probably that's why it worked

[21:36] <discord-raku-bot> <nemokosch> It didn't have to be grammar-tweaked

[21:36] <wafflus> ok i will test

[21:36] <lizmat> if it is non-existing, the grammar needs to be tweaked :-)

[21:38] <wafflus> ok it works ty

[21:40] <wafflus> does anyone know if i can view all the methods and paramters on an object? atm i'm having to look up using an internet search and it doesn't feel too nice

[21:49] <discord-raku-bot> <nemokosch> If you don't mind digging into the metamodel, sure

[21:49] <discord-raku-bot> <nemokosch> There is $obj.^attributes, for example

[21:50] <discord-raku-bot> <nemokosch> Similarly, there is $obj.^methods

[21:50] <wafflus> yeah just accidently discoverd that one just now

[22:00] <thowe> What's the best way to sort by two things?  I want to sort by a name alphabetically, and then sort by a numeric value under the name.  Kind of like two order by fields in a SQL query...  These fields are hash values in an array of hashes.

[22:01] <thowe> oh, wait...  is that built in?

[22:03] *** wafflus left
[22:06] <thowe> bloody hell, that was easy.  I love Raku.

[22:11] <discord-raku-bot> <antononcube> @thowe ðŸ¤” Can you give an example?

[22:11] <thowe> my @newlist = @service_list.sort: {.<customer>, .<service_name>, .<service>};

[22:12] <thowe> isn't there a shortcut for making the sorted list @service_list instead of making a new array "@newlist" ?

[22:13] <discord-raku-bot> <nemokosch> .=sort

[22:13] <thowe> of course...

[22:13] <discord-raku-bot> <nemokosch> Watch out, you can't chain on the left handside, it has precedence as high as a usual method call

[22:14] <discord-raku-bot> <nemokosch> Right handside

[22:14] <discord-raku-bot> <nemokosch> Casually mixing up left and right just like that

[22:14] <thowe> so is this wrong? :  @service_list.=sort: {.<customer>, .<service_name>, .<service>}; 

[22:15] <discord-raku-bot> <nemokosch> This will DWYM

[22:15] <thowe> yeah, I already tested it, just didn't want to fall into a trap

[22:16] <discord-raku-bot> <nemokosch> If you use the colon syntax for arguments, you probably won't have a lot of temptation to chain on the right ðŸ˜›

[22:20] <thowe> Cool.  Now I used Raku to help me finish my audit before billing instead of Perl...  \o/  I did a thing!   I'm so easily entertained.

[22:32] *** ab5tract joined
[22:43] *** ab5tract left
