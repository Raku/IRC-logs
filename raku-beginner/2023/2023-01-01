[00:16] *** jgaz left
[00:48] *** CodeTortoise joined
[00:56] *** jaguart joined
[02:33] <jaguart> why are private multi methods not allowed?

[02:35] <guifa> I'm not sure if that's more of an NYI or not allowed

[02:36] <jaguart> I just realised I can make them subs :)

[02:38] <guifa> that's what I was about to suggest :-) 

[02:40] <guifa> m: class A { my proto foo (|) { * }; multi foo (\self, Str) { 'string' }; multi foo (\self, Int) { 'int' }; method bar($x) { self.&foo($x) } }; say A.bar(1); say A.bar('a')

[02:40] <camelia> rakudo-moar ddecbe687: OUTPUT: «int␤string␤»

[02:49] <jaguart> :) thank you

[02:55] <jaguart> Why do you write a proto? are there gotchas from not?

[02:58] <guifa> Force of habit really

[03:00] <guifa> But in this case I guess it doesn't really cause any problem.

[03:10] *** CodeTortoise left
[03:13] <jaguart> does a return type constraint on the proto apply to all the same-name multis?

[03:16] <guifa> huh, it doesn't

[03:17] <guifa> but you can fairly easily, although it's only checked at run time:

[03:18] <guifa> m: proto sub foo (--> Int) { * }; multi sub foo (-->Str) { 'bar' }; say foo;

[03:18] <camelia> rakudo-moar ddecbe687: OUTPUT: «bar␤»

[03:18] <guifa> that has no problem

[03:18] <guifa> m: m: proto sub foo (--> Int) { {*} }; multi sub foo (-->Str) { 'bar' }; say foo;

[03:18] <camelia> rakudo-moar ddecbe687: OUTPUT: «Type check failed for return value; expected Int but got Str ("bar")␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:20] <guifa> basically, if your proto is { * }, then the body of the proto is ignored; BUT if you use {*} inside of the proto body, that gets the result of the dispatch out.  Since that's a return value for the proto block, it's actually type checked on the return type

[03:21] <jaguart> interesting - so I read that {*} is the proto-body - and guess that { * } is a Whatever in a block...

[03:22] <jaguart> Raku feels too subtle sometimes

[03:25] <guifa> Yeah

[03:25] <guifa> I think of {*} as a special term

[03:25] <jaguart> so if you want type-check using your proto - which feels like a good thing - pull the dispatch into your proto a'la { {*} }

[03:26] <jaguart> We need a good-habits page, though it should be longer than the 'traps' page [which will be hard] - :o

[03:27] <guifa> I'd agree.  I think right now there's not a lot of sanity checks happening at compile time for multis relative to the proto

[03:44] <jaguart> grrr. I have this `method attributes {` ==> but this call is NOT barfing: `for $wisp.mop.methods( :all, :$local ) ->` and I can't golf it

[04:06] <rf> Does that proto: (|) { * }; do anything?

[05:03] *** rf left
[05:40] *** Kaipii left
[07:27] <jaguart> given ' Method+{<anon|1>}|3855621948592' what regex might I use to split on '|' outside curlies?

[07:29] <jaguart> actually scratch that - I will use an end-anchor

[10:19] *** Kaipii joined
[16:27] <discord-raku-bot> <yabobay> ```

[16:27] <discord-raku-bot> <yabobay> constant $filename = "in";

[16:27] <discord-raku-bot> <yabobay> given $filename.IO.open(:r, :bin) {

[16:27] <discord-raku-bot> <yabobay>   my $signature = .read(8).List; # the first 8 B of a png is its signature

[16:27] <discord-raku-bot> <yabobay>   my $normalPngSignature = (137,80,78,71,13,10,26,10);

[16:27] <discord-raku-bot> <yabobay>   .say for $signature, $normalPngSignature;

[16:27] <discord-raku-bot> <yabobay>   say $signature == $normalPngSignature;

[16:27] <discord-raku-bot> <yabobay> }

[16:27] <discord-raku-bot> <yabobay> ```

[16:27] <discord-raku-bot> <yabobay> i have this raku program, and a plaintext file called "in", and it produces this result:

[16:27] <discord-raku-bot> <yabobay> ```

[16:27] <discord-raku-bot> <yabobay> (48 49 50 51 52 53 54 55)

[16:27] <discord-raku-bot> <yabobay> (137 80 78 71 13 10 26 10)

[16:27] <discord-raku-bot> <yabobay> True

[16:27] <discord-raku-bot> <yabobay> ```

[16:27] <discord-raku-bot> <yabobay> the two lists are clearly different. what is going on?

[16:33] <guifa> jaugart: btw, I found out why multi return values don't have to line up with protos: if you do `proto sub foo (-->Str) { …; my $a = {*}; … }` , you could potentially act on the value of $a, and behave differently before finally producing a str

[17:06] *** Kaipii left
[17:09] *** Kaipii joined
[18:13] <discord-raku-bot> <Nahita> `==` is numeric equality checker and $signature and $normalPngSignature have the same number of elements, so it says True

[18:13] *** Kaipii left
[18:13] <discord-raku-bot> <Nahita> `eqv` might be used instead

[18:14] <discord-raku-bot> <Nahita> a List in numeric context is its number of elements

[18:44] *** discord-raku-bot left
[18:44] *** discord-raku-bot joined
[19:15] *** Kaiepi joined
[19:25] <discord-raku-bot> <p6steve> m: "well".Numeric

[19:26] <discord-raku-bot> <p6steve> m: "well".elems

[19:26] <discord-raku-bot> <p6steve> m: "well".elems.say

[19:27] <discord-raku-bot> <p6steve> in raku a Str is not an Array of Chars ... so it will not coerce to Numeric

[19:28] <discord-raku-bot> <p6steve> m: say "well" eq 4

[19:29] <discord-raku-bot> <p6steve> m: say 4.Str

[19:29] <discord-raku-bot> <p6steve> however an Int will coerce to a Str

[19:30] <discord-raku-bot> <Nahita> a String can be converted to Numeric though, if it looks like one

[19:30] <discord-raku-bot> <Nahita> e.g., "1299" .Numeric

[19:32] <discord-raku-bot> <Nahita> so "17" == 17 will be True

[19:32] <discord-raku-bot> <Nahita> user requested comparison in the numeric context and that's what they get!

[19:33] <discord-raku-bot> <Nahita> user requested comparison in the numeric context and that's what they get

[19:33] <discord-raku-bot> <yabobay> so what is == in other languages would be eqv in raku?

[19:33] <discord-raku-bot> <Nahita> yeah kind of i think

[19:34] <discord-raku-bot> <Nahita> since language also has binding, there's also =:= for example

[19:34] <discord-raku-bot> <yabobay> what's that

[19:34] <discord-raku-bot> <Nahita> even the containers should be the same check

[19:35] <discord-raku-bot> <Nahita> ```perl

[19:35] <discord-raku-bot> <Nahita> >>> my $a = 3

[19:35] <discord-raku-bot> <Nahita> 3

[19:35] <discord-raku-bot> <Nahita> >>> my $b = 3

[19:35] <discord-raku-bot> <Nahita> 3

[19:35] <discord-raku-bot> <Nahita> >>> $a == $b

[19:35] <discord-raku-bot> <Nahita> True

[19:35] <discord-raku-bot> <Nahita> >>> $a =:= $b

[19:35] <discord-raku-bot> <Nahita> False

[19:35] <discord-raku-bot> <Nahita> ```

[19:52] <discord-raku-bot> <p6steve> oooo (that's cool)

[19:57] <discord-raku-bot> <Nahita> user requested comparison in the numeric context and that's what they get!

[20:06] <discord-raku-bot> <Nemokosch> <@989550365533937664> well well, there is a number of "equivalence operators" with their own subtleties

[20:06] <discord-raku-bot> <Nemokosch> `==` is "obtain Numeric and check for equality"

[20:08] <discord-raku-bot> <Nemokosch> (its negative counterpart doesn't really exist but don't get me started on that just now)

[20:09] <discord-raku-bot> <Nemokosch> `eq` is "obtain String and check for equality" (same way, its negative counterpart looks like `ne` but in fact it doesn't exist as a proper first-class operator)

[20:11] <discord-raku-bot> <Nemokosch> `=:=` is "obtain low-level address and check for equality"

[20:12] <discord-raku-bot> <Nemokosch> basically the equivalent of reference check

[20:12] <discord-raku-bot> <Nemokosch> `===` is "obtain WHICH representation and check for equality"

[20:12] *** rf joined
[20:14] <discord-raku-bot> <Nemokosch> unlike the address, WHICH is something that can be defined for types. It is used as a higher-level identity of data - for value types (deeply immutable types), it should be the same for the same value

[20:14] <discord-raku-bot> <Nemokosch> for "reference types", it's usually still some low-level address

[20:15] <discord-raku-bot> <Nemokosch> WHICH is a string representation

[20:15] <discord-raku-bot> <Nemokosch> now, `eqv` uses another string representation of the data: the `.raku method`

[20:15] <discord-raku-bot> <Nemokosch> now, `eqv` uses another string representation of the data: the `.raku` method

[20:17] <discord-raku-bot> <Nemokosch> the `.raku` method is supposed to return a string with the following semantics: the string should describe the data like code that could generate that data

[20:17] <discord-raku-bot> <yabobay> aaaaaaaaaaaaaaaaaaaaaaaaaa

[20:18] <discord-raku-bot> <Nemokosch> so while the WHICH value of two List instances would be different (that still relies on the address of the objects), the .raku value of them would be the same

[20:18] <lizmat> Ideally, .raku is the opposite of .EVAL, and should roundtrip

[20:18] <lizmat> m: say '42'.raku.EVAL

[20:18] <camelia> rakudo-moar 88b8060a2: OUTPUT: «42␤»

[20:19] <discord-raku-bot> <yabobay> m: '42'.raku.EVAL.WHAT

[20:19] <discord-raku-bot> <yabobay> uh

[20:19] <discord-raku-bot> <Nemokosch> didn't generate output I guess

[20:19] <discord-raku-bot> <Nemokosch> m: '42'.raku.EVAL.WHAT.say

[20:19] <discord-raku-bot> <yabobay> oh right

[20:21] <lizmat> m: '42'.raku.EVAL.WHAT.say

[20:21] <camelia> rakudo-moar 88b8060a2: OUTPUT: «(Str)␤»

[20:23] <discord-raku-bot> <Nahita> if you are implying eqv returns True iff .raku's are the same, that is wrong

[20:23] <discord-raku-bot> <Nahita> documentation has an example for it you can check

[20:24] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/Mu.pm6#L1321

[20:25] <discord-raku-bot> <Nemokosch> well, if you mean that their type can be different while their representation is the same... perhaps? although that seems fairly odd

[20:25] <discord-raku-bot> <Nahita> no i don't mean that

[20:25] <discord-raku-bot> <Nemokosch> other than that, it's literally the check performed for `eqv`

[20:26] <discord-raku-bot> <Nahita> class A {}; my \a = A.new.Set; my \b = A.new.Set; (a.raku eq b.raku, a eqv b)

[20:26] <discord-raku-bot> <Nahita> m: class A {}; my \a = A.new.Set; my \b = A.new.Set; (a.raku eq b.raku, a eqv b).say

[20:27] <discord-raku-bot> <Nemokosch> well, why does this happen, then?

[20:28] <discord-raku-bot> <Nahita> documentation has an example for it you can check

[20:29] <discord-raku-bot> <Nemokosch> where does documentation have an example?

[20:30] <discord-raku-bot> <Nemokosch> and that doesn't seem to answer the question what happened there

[20:31] <discord-raku-bot> <Nahita> it has "The reason is that" i don't know what you are not seeing

[20:31] <discord-raku-bot> <Nahita> and i don't really care

[20:32] <discord-raku-bot> <Nemokosch> it would be hard for you to provide less help with more words, wouldn't it

[20:32] <discord-raku-bot> <Nemokosch> but okay, I can google "the reason is that" on the website lol

[20:36] <discord-raku-bot> <p6steve> https://docs.raku.org/routine/eqv

[20:37] <discord-raku-bot> <p6steve> quite a good read

[20:38] <discord-raku-bot> <Nemokosch> yes, googling "the reason is that" actually did help xD

[20:38] <discord-raku-bot> <Nemokosch> you know, these days, I tend to trust the logic of the code more than what the docs say

[20:39] <discord-raku-bot> <Nemokosch> for example because the docs haven't been deployed for several months

[20:39] <discord-raku-bot> <Nemokosch> so right now I'm trying to figure out what got called actually

[20:40] <discord-raku-bot> <Nemokosch> say, you look up `eqv` on the docs site

[20:41] <discord-raku-bot> <Nemokosch> the behavior is described for 3 types

[20:41] <discord-raku-bot> <Nemokosch> if you `rak` the Rakudo sources, it's defined for about 10 types

[20:42] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/Setty.pm6#L300

[20:42] <discord-raku-bot> <p6steve> I am a great fan of the core documents ... and I have a lot of respect for the documentation team (which is a thankless task) ... yes there are some wrinkles but imo these are 3rd order and there is nowhere else that compares for an explanation of the rationale

[20:42] <discord-raku-bot> <Nemokosch> and now I think the described behavior can be found ^right there

[20:43] <discord-raku-bot> <Nemokosch> smartmatch semantics are used

[20:43] <discord-raku-bot> <Nemokosch> and  Set(A.new(a => 5)) doesn't accept another instance of itself

[20:44] <discord-raku-bot> <Nemokosch> which is debatable at best for smartmatch semantics, I would say

[20:45] <discord-raku-bot> <Nemokosch> so I'd say "eqv doesn't necessarily rely on the raku representation": point taken

[20:45] <discord-raku-bot> <Nemokosch> "see <this example>": this example is arguably wrong behavior

[21:01] <discord-raku-bot> <Nemokosch> > This could be called an equivalence operator, and it will return True if the two arguments are structurally the same, i.e. from the same type and (recursively) contain equivalent values.

[21:01] <discord-raku-bot> <Nemokosch> It doesn't seem to be hard to make this True

[21:02] <discord-raku-bot> <Nemokosch> A.new(a => 5) and A.new(a => 5) are "equivalent values" by the default implementation

[23:09] *** NemokoschKiwi joined
[23:29] *** kjp joined
