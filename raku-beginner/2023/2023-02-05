[00:31] *** thundergnat joined
[00:33] <thundergnat> regarding anonymous state variables; some instances where I found them useful - https://rosettacode.org/wiki/P-value_correction#Raku https://rosettacode.org/wiki/Boustrophedon_transform#Raku (and perhaps my favorite)  https://rosettacode.org/wiki/Egyptian_division#More_%22Egyptian%22_version

[00:34] <thundergnat> Yes, I am responsible for all of those. And yes, they could be regarded as horrible hacks, but /I/ like them.

[00:35] *** thundergnat left
[01:16] *** guifa joined
[01:51] *** Manifest0 left
[02:49] *** jgaz left
[03:11] <discord-raku-bot> <el gatito (** advocate)> m:perl loop (my $i = 0; $i < 10; $i++) {}  say $i 

[03:11] <discord-raku-bot> <Raku eval>  10  

[03:12] <discord-raku-bot> <el gatito (** advocate)> why

[03:12] <discord-raku-bot> <el gatito (** advocate)> why it leak out of the scope

[04:12] <guifa> good question.  That is probably a bug.  I don't think it should be

[09:05] *** sivoais left
[09:55] *** sivoais joined
[10:08] *** snonux joined
[10:19] <discord-raku-bot> <Nemokosch> I'm not sure this is a bug. In the case of if, this is definitely known and acknowledged behavior, with the advice of using pointy block syntax instead

[10:25] *** snonux left
[10:25] *** snonux joined
[10:28] *** snonux left
[10:43] <lizmat> it leaks out of scope because that's how it was intended and implemented

[10:44] <lizmat> there are far better solutions, such as:  for ^10 { ... }

[10:44] <lizmat> or if you you need both the value *and* the index

[10:45] <discord-raku-bot> <Nemokosch> fun fact: it also "leaks out" in Python

[10:45] <lizmat> as it does in C 

[10:45] <discord-raku-bot> <Nemokosch> hm, are you sure about that?

[10:45] <lizmat> m: my @a = <a b c d e f g>; for @a.kv -> $letter, $index { say "'$letter' is at index $index" }

[10:45] <camelia> rakudo-moar e45436ef0: OUTPUT: «'0' is at index a␤'1' is at index b␤'2' is at index c␤'3' is at index d␤'4' is at index e␤'5' is at index f␤'6' is at index g␤»

[10:46] <lizmat> m: my @a = <a b c d e f g>; for @a.kv -> $index, $letter { say "'$letter' is at index $index" }   # duh  :-)

[10:46] <camelia> rakudo-moar e45436ef0: OUTPUT: «'a' is at index 0␤'b' is at index 1␤'c' is at index 2␤'d' is at index 3␤'e' is at index 4␤'f' is at index 5␤'g' is at index 6␤»

[10:46] <discord-raku-bot> <Nemokosch> anyway, here I'd agree that the magic behavior would be to declare a variable out of the block and tie it to the block

[10:46] <discord-raku-bot> <Nemokosch> what annoys me more, Raku aside, is that I can't use inner variables in do-while loop conditions

[10:52] <discord-raku-bot> <Nemokosch> which makes sense from scope hierarchy point of view but logic-wise, it often makes sense that the condition relies on something internal to the loop body

[10:56] <discord-raku-bot> <Nemokosch> anyway, in C and related languages, the head of control structures does unify with the inner scope, meaning that "say $i" would indeed break

[11:06] *** rantanplan joined
[11:16] *** rantanplan left
[11:19] *** rantanplan joined
[11:20] *** rantanplan left
[11:22] *** snonux joined
[11:41] *** ab5tract joined
[12:05] *** Manifest0 joined
[17:06] *** gfldex left
[17:06] *** gfldex joined
[17:19] *** ab5tract left
[19:13] *** rf joined
[19:14] *** rf left
[19:15] *** rf joined
[20:13] *** ab5tract joined
[20:55] *** ab5tract left
[21:00] *** ab5tract joined
[22:42] *** deoac joined
[22:57] <deoac>  Given `my regex consonants { <[mrnljzsdtfvbpkcgq]>|sh|th|ch|ph };`  How would I match all non-<consonants>?

[23:00] <discord-raku-bot> <Nemokosch> iirc there is no built-in negation for regex, only character groups

[23:03] <discord-raku-bot> <Nemokosch> https://new-raku.finanalyst.org/language/regexes.html#Regex_Boolean_condition_check

[23:08] <rf> Hmm, i'm sure there's a way to negate a regex

[23:09] <rf> m: my regex consonants { <[mrnljzsdtfvbpkcgq]>|sh|th|ch|ph }; 'abcdefg'.match(/[<consonants>-]/).say;

[23:09] <camelia> rakudo-moar 5cc476e7e: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at <tmp>:1␤------> |ch|ph }; 'abcdefg'.match(/[<consonants>⏏-]/).say;␤    expecting any of:␤        argument list…»

[23:10] <discord-raku-bot> <Nemokosch> well, last time I asked, there wasn't a way, from what I can recall

[23:11] <discord-raku-bot> <Nemokosch> m: say 'i' ~~ / . <!{&consonants}> /

[23:11] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Undeclared routine:     consonants used at line 1   

[23:11] <discord-raku-bot> <Nemokosch> oops

[23:11] <discord-raku-bot> <Nemokosch> m: my regex consonants { <[mrnljzsdtfvbpkcgq]>|sh|th|ch|ph }; say 'i' ~~ / . <!{&consonants}> /

[23:11] <discord-raku-bot> <Raku eval>  ｢i｣  

[23:11] <discord-raku-bot> <Nemokosch> might be worth playing with

[23:12] <discord-raku-bot> <Nemokosch> bleh, this matches 'm' as well... I wonder what that "check" did, then

[23:14] <discord-raku-bot> <Nemokosch> m:  my regex consonants { <[mrnljzsdtfvbpkcgq]>|sh|th|ch|ph }; say 'i' ~~ / . <!{ $/ ~~ &consonants }> /; say 'l' ~~ / . <!{ $/ ~~ &consonants }> /; 

[23:14] <discord-raku-bot> <Raku eval>  ｢i｣ Nil  

[23:14] <discord-raku-bot> <Nemokosch> looks kinda bizarre but seems to do something sensible

[23:14] <rf> Yeah that is an interesting application lol

[23:15] <discord-raku-bot> <Nemokosch> / . <!{ m/<consonants>/ }> / might look better, with essentially the same logic...

[23:17] <discord-raku-bot> <Nemokosch> hoping that the right argument is passed into the check block

