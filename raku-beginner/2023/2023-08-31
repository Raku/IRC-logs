[00:49] *** MasterDuke left
[01:10] *** jgaz joined
[02:46] *** teatwo left
[02:46] *** teatwo joined
[03:19] *** human-blip left
[03:19] *** human-blip joined
[03:27] *** razetime joined
[08:19] *** tea3po joined
[08:20] *** tea3po left
[08:20] *** tea3po joined
[08:21] *** teatwo left
[08:36] *** razetime left
[11:36] *** habere-et-disper joined
[11:45] <habere-et-disper> I can pass an operator with something like &infix:<+>

[11:45] <habere-et-disper> But how do I pass any infix operator?

[11:58] <habere-et-disper> Something like :

[11:58] <habere-et-disper> m: sub compute-infix( $a, &op, $b ) { $a &op $b }; say compute-infix( 3, &infix:<+>, 4 );

[11:58] <camelia> rakudo-moar 6574c0e4c: OUTPUT: «all(3, 4)␤»

[12:04] *** thowe left
[12:10] <lizmat> m: sub compute-infix( $a, &op, $b ) { op($a,$b) }; say compute-infix( 3, &infix:<+>, 4 );

[12:10] <camelia> rakudo-moar 6574c0e4c: OUTPUT: «7␤»

[12:10] *** thowe joined
[12:11] <habere-et-disper> :]

[12:13] <habere-et-disper> lizmat++

[12:13] <habere-et-disper> m: infix:<+>(3, 4)

[12:13] <camelia> rakudo-moar 6574c0e4c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "infix:<+>(3, 4)" in expression "infix:<+>(3, 4)" in sink context (line 1)␤»

[12:13] <habere-et-disper> m: say infix:<+>(3, 4)

[12:13] <camelia> rakudo-moar 6574c0e4c: OUTPUT: «7␤»

[12:53] *** habere-et-disper left
[16:30] <jgaz> How do I slurp a binary file starting at a specific offset?

[17:41] <lizmat> "file".IO.open.seek($offset).slurp

[17:41] <lizmat> but that wouldn't close the handle

[17:45] <lizmat> jgaz but that only would make sense for files opened with :bin

[17:45] <lizmat> for text based, you could wind up in the middle of a multi-byte code point

[17:46] <lizmat> anyways: https://docs.raku.org/type/IO/Handle#method_seek

[17:48] <jgaz> lizmat: thanks... 

[19:18] *** discord-raku-bot joined
[19:30] *** discord-raku-bot left
[19:31] *** discord-raku-bot joined
[20:19] *** teatwo joined
[20:23] *** tea3po left
[21:40] *** deoac joined
[23:40] *** deoac left
