[00:09] *** gfldex_ is now known as gfldex

[01:05] *** habere-et-disper left
[05:52] *** ajsth joined
[05:52] *** ajsth left
[08:32] <DarthGandalf> Hi, something broke for me: https://dpaste.org/VOPqW - this happens when I try to run raku without parameters

[08:33] <DarthGandalf> and it just outputs the same error in loop

[08:33] <DarthGandalf> why does it try to search for some .so file in temp dir?

[08:34] <discord-raku-bot> <nemokosch> Never seen anything like that

[09:01] *** dakkar joined
[09:22] <discord-raku-bot> <antononcube> Cool. But can that module ‚Äî or you üôÇ ‚Äî produce an actual image of chess position. (PNG or JPEG.)

[10:22] <discord-raku-bot> <.vushu> @antononcube I began drawing a chess game window using raylib, then noticed that I don‚Äôt know how to generate a png for your use case.  There are proably some modules out there that can draw images like a canvas?

[10:45] <discord-raku-bot> <nemokosch> https://raku.land/zef:dwarring/HTML::Canvas

[10:45] <discord-raku-bot> <nemokosch> you can apparently draw to a HTML5 canvas and then save it as PNG

[10:47] <discord-raku-bot> <.vushu> cool @nemokosch maybe you can use this @antononcube

[10:47] <discord-raku-bot> <nemokosch> XD

[10:47] <discord-raku-bot> <nemokosch> btw I would consider just composing an SVG

[10:51] <discord-raku-bot> <nemokosch> especially since one can just take a base chess board + figures SVG and update that with the DOM

[10:55] <discord-raku-bot> <antononcube> @nemokosch I am not sure can LLMs do image recognition based on SVGs ‚Äî it is worth to try it.

[10:57] <discord-raku-bot> <antononcube> @.vushu ‚Ä¶And yes Nemokosch is a fan of David Warring. I was looking for something like this, BTW, I few days ago without success. So, thanks for bringing it up!

[14:19] *** Dominika joined
[14:19] *** sdomi left
[14:49] *** mcmillhj joined
[14:52] <mcmillhj> If I have two ranges of the same length what would be the idiomatic way to map them to one another? I am currently doing this but it feels a bit clunky. `my %h; %h.append: ((1..^5).flat Z (20..^25).flat).flat`.

[14:55] *** jgaz joined
[14:56] <lizmat> m: my %h = 1..^5 Z=> 20..^25; dd %h    # mcmillhj like this?

[14:56] <camelia> rakudo-moar 8dca71e89: OUTPUT: ¬´Hash %h = {"1" => 20, "2" => 21, "3" => 22, "4" => 23}‚ê§¬ª

[14:59] <mcmillhj> yes, exactly. What is that operator? Is `=>` someway to modify `Z` or is `Z=>` a separate operator?

[15:01] <lizmat> Z is a meta operator

[15:01] <lizmat> if you don't specify an operator next to it, it will assume "," which creates lisr

[15:01] <lizmat> *lists

[15:02] <lizmat> m: dd 1..^5 Z+ 20..^25

[15:02] <camelia> rakudo-moar 8dca71e89: OUTPUT: ¬´(21, 23, 25, 27).Seq‚ê§¬ª

[15:02] <lizmat> m: dd 1..^5 Z* 20..^25

[15:02] <camelia> rakudo-moar 8dca71e89: OUTPUT: ¬´(20, 42, 66, 92).Seq‚ê§¬ª

[15:03] <mcmillhj> ohh, okay. This is exactly what I was looking for. Thank you for the clear explanation.

[15:04] <lizmat> you're welcome!

[15:26] *** teatime left
[18:19] *** dakkar left
[20:49] *** mcmillhj left
[22:40] *** jgaz left
[23:43] *** gfldex left
[23:43] *** gfldex joined
