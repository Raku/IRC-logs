[02:17] *** tea3po joined
[02:20] *** teatwo left
[04:21] *** Heptite left
[06:12] <discord-raku-bot> <AirwaveDev> what i might be doing wrong ? even if arguments are valid it just says please enter valid arguments

[06:12] <discord-raku-bot> <AirwaveDev> https://cdn.discordapp.com/attachments/768511641758466088/1095229850194804746/is_try.png

[06:15] <discord-raku-bot> <AirwaveDev> it just doesn't reach return

[06:17] <discord-raku-bot> <snufkin> Output the values of $a,$b,$c after the prompt. See what they are. Also output $a ~~ Int etc and see what the result is

[06:19] <discord-raku-bot> <snufkin> If the variables are strings, I think you can prefix them with + to coerce them to Int.

[06:21] <discord-raku-bot> <AirwaveDev> yup values of variables are strings

[06:22] <discord-raku-bot> <snufkin> Think you'd just need to do if +$a ~~ Int etc

[06:54] <discord-raku-bot> <AirwaveDev> for some reason coercion didn't worked

[06:54] <discord-raku-bot> <AirwaveDev> so manually type casted

[06:54] <discord-raku-bot> <AirwaveDev> now the programme works just as desired

[06:55] <discord-raku-bot> <AirwaveDev> I appreciate your guidance

[06:55] <discord-raku-bot> <AirwaveDev> thank you :camelia:

[06:55] <discord-raku-bot> <AirwaveDev> https://cdn.discordapp.com/attachments/768511641758466088/1095240749399953408/p_tr.png

[06:57] <discord-raku-bot> <Nemokosch> I would think why the coercion didn't work

[06:58] <discord-raku-bot> <Nemokosch> In case some misunderstanding is lurking around

[06:59] <discord-raku-bot> <Nemokosch> Anyway, fun fact: $a = $a.Numeric can be written as $a.=Numeric

[07:02] <discord-raku-bot> <AirwaveDev> Expected there would something like that

[07:06] <discord-raku-bot> <Nemokosch> Also... is rw for a variable declaration seems buggy

[07:07] <discord-raku-bot> <Nemokosch> m: my $foo is rw

[07:07] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Can't use unknown trait 'is' -> 'rw' in a variable declaration. at /home/glot/main.raku:1 ------> my $foo is rw‚èè<EOL>     expecting any of:         TypeObject         default         dynamic         export 

[07:09] <discord-raku-bot> <AirwaveDev> https://cdn.discordapp.com/attachments/768511641758466088/1095244275240939600/Screenshot_2023-04-11_123430.png

[07:11] <discord-raku-bot> <Nemokosch> the error happens in is-triangle

[07:11] <discord-raku-bot> <Nemokosch> +$a doesn't mutate the original variable that you return

[07:12] <discord-raku-bot> <Nemokosch> coercing type annotations might come handy here

[07:12] <discord-raku-bot> <AirwaveDev> man you are fast

[07:14] <discord-raku-bot> <AirwaveDev> m:my $foo is rw;

[07:14] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Can't use unknown trait 'is' -> 'rw' in a variable declaration. at /home/glot/main.raku:1 ------> my $foo is rw‚èè;     expecting any of:         TypeObject         default         dynamic         export 

[07:14] <discord-raku-bot> <Nemokosch> that is rw in the "destructuring" declaration is just silently ignored, from what I know

[07:16] <discord-raku-bot> <Nemokosch> the "destructuring" declaration is currently implemented as a function signature with parts dropped when creating the variable

[07:16] <discord-raku-bot> <Nemokosch> this came up just a couple of days ago

[07:16] <discord-raku-bot> <AirwaveDev> :cameliathink:

[07:16] <discord-raku-bot> <AirwaveDev> I haven't updated

[07:17] <discord-raku-bot> <AirwaveDev> though

[07:17] <discord-raku-bot> <Nemokosch> the topic

[07:17] <discord-raku-bot> <Nemokosch> the behavior has been like this for years at the very least

[07:18] <discord-raku-bot> <AirwaveDev> See ya later then

[07:18] <discord-raku-bot> <Nemokosch> üëã üòÑ

[07:19] <discord-raku-bot> <Nemokosch> what does work, on the other hand, is

[07:20] <discord-raku-bot> <Nemokosch> m: my Numeric() ($a, $b, $c) = split " ", "53 22 1"; dd $a, $b, $c;

[07:20] <discord-raku-bot> <Raku eval>  Int $a = 53 Int $b = 22 Int $c = 1 

[07:21] <discord-raku-bot> <AirwaveDev> dd $a, $b, $c; what this part did ?

[07:21] <discord-raku-bot> <Nemokosch> the logging

[07:24] <discord-raku-bot> <AirwaveDev> I am ashamed to ask but what is that if i am  bothering you please kindly  ignore

[07:24] <discord-raku-bot> <Nemokosch> No, I think that's why everyone is here

[07:25] <discord-raku-bot> <AirwaveDev> so what is logging

[07:27] <discord-raku-bot> <Nemokosch> > to make a note or record of something

[07:27] <discord-raku-bot> <Nemokosch> that's exactly what it means, Merriam-Webster to the rescue

[07:28] <discord-raku-bot> <Nemokosch> you wouldn't automagically see the content of the variables, something needs to be done

[07:28] <discord-raku-bot> <Nemokosch> m: my Numeric() ($a, $b, $c) = split " ", "53 22 1";

[07:28] <discord-raku-bot> <Raku eval>  

[07:28] <discord-raku-bot> <Nemokosch> ^ this isn't too telling, right?

[07:31] <discord-raku-bot> <AirwaveDev> thanks

[07:31] <discord-raku-bot> <AirwaveDev> i should run off to next exc and topic

[07:32] <discord-raku-bot> <Nemokosch> what's exc?

[07:32] <discord-raku-bot> <Nemokosch> exercise?

[07:34] <discord-raku-bot> <AirwaveDev> I am learning raku with this book called think raku

[07:35] <discord-raku-bot> <Nemokosch> Mmm, heard of it

[07:35] <discord-raku-bot> <AirwaveDev> yup exercise after end of each topic

[07:38] <discord-raku-bot> <Nemokosch> I heard good things about that book but it can never hurt to be a bit careful

[07:38] <discord-raku-bot> <Nemokosch> Like with the fake is rw

[07:45] <discord-raku-bot> <Nemokosch> if you think about it, a variable is readable and writeable, that's like the definition - is rw is more interesting for function input and output stuff

[07:53] *** dakkar joined
[10:42] <tea3po> I think dd is data dump, or maybe describe

[10:46] <lizmat> it's actually the tiny data dumper: so tiny it lost the "t"

[10:47] <lizmat> it's basically "note .raku" with some extra introspection and support for some native data types

[10:51] <discord-raku-bot> <Anton Antonov> üôÇ

[11:02] <tea3po> did perl5 have Data::Dumper::Dumper() or am I remembering some othe rlanguage

[11:07] <lizmat> no, you remember that correctly

[11:43] *** Heptite joined
[13:06] *** jgaz joined
[13:31] *** jgaz left
[13:32] *** jgaz joined
[14:10] *** Heptite left
[14:12] *** teatwo joined
[14:15] *** tea3po left
[14:56] *** Heptite joined
[15:54] *** dontknow joined
[16:35] *** raiph joined
[16:36] *** dakkar left
[17:18] *** dontknow left
[17:32] *** raiph left
[17:48] <discord-raku-bot> <Mediocre> what is this?

[17:48] <discord-raku-bot> <Mediocre> https://cdn.discordapp.com/attachments/768511641758466088/1095405078061535303/image.png

[17:51] <discord-raku-bot> <Mediocre> why 1 has  [] and other ()

[17:51] <discord-raku-bot> <Mediocre> https://cdn.discordapp.com/attachments/768511641758466088/1095405686386589806/image.png

[17:55] <discord-raku-bot> <Anton Antonov> Probably not very helpful, but ask ChatGPT for multiple examples of Raku junctions :

[17:55] <discord-raku-bot> <Anton Antonov> https://cdn.discordapp.com/attachments/768511641758466088/1095406809654763670/Screenshot_2023-04-11_at_1.54.40_PM.png

[18:00] <discord-raku-bot> <Mediocre> well was not really clear

[18:01] <discord-raku-bot> <Anton Antonov> üôÇ As anticipated ...

[18:01] <discord-raku-bot> <Mediocre> what are those XD

[18:02] <discord-raku-bot> <Mediocre> https://cdn.discordapp.com/attachments/768511641758466088/1095408421693567047/image.png

[18:03] *** deoac joined
[18:09] *** deoac left
[18:18] <discord-raku-bot> <Anton Antonov> backslashed character classes (for making regex patterns)

[18:24] <discord-raku-bot> <Mediocre> i dunno how it would look lik ea horizontal whitepace

[18:25] <discord-raku-bot> <Anton Antonov> Yes, both whitespaces and non-whitespaces.

[18:26] <discord-raku-bot> <Anton Antonov> @Mediocre I am not sure what you know about programming and regexes -- maybe my assumptions are completely wrong.

[18:27] <discord-raku-bot> <Mediocre> i dont know

[18:27] <discord-raku-bot> <Mediocre> am learning

[18:28] <discord-raku-bot> <Mediocre> okay now i get it

[18:28] <discord-raku-bot> <Mediocre> and its a bit weird but i understood

[18:39] <discord-raku-bot> <Anton Antonov> üëç

[21:16] <discord-raku-bot> <Nemokosch> stuff in [] is an Array overall

[21:17] <discord-raku-bot> <Nemokosch> stuff in () is usually just a List, here I'd think it might actually be a reified Seq

[21:18] <discord-raku-bot> <Nemokosch> m: my @numbers = (^20).roll: 10; say @numbers.sort.WHAT; say @numbers.sort;

[21:18] <discord-raku-bot> <Raku eval>  (Seq) (0 3 3 6 6 7 8 9 15 18) 

[21:18] <discord-raku-bot> <Nemokosch> right, it's just a Seq

[21:24] <discord-raku-bot> <p6steve> list assignment like @n = 1,2,3; takes a List (or Seq) on rhs and assigns each item to Array on lhs

[21:26] <discord-raku-bot> <Nemokosch> this terminology with "functions" and "mutators" is kinda confusing

[21:27] <discord-raku-bot> <p6steve> ^^ i agree ... it just means that @n = @n.push(1); will change @n (durrr)

[21:28] *** deoac joined
[21:28] <discord-raku-bot> <Nemokosch> of course one can give a name to the phenomenon but it feels risky to use the term "function" for that; it's too overloaded

[21:30] <discord-raku-bot> <Nemokosch> all in all, the message is that there are many methods that don't change the object they are called on. sort is such a method

[21:31] <discord-raku-bot> <Nemokosch> for these methods, if you want to mutate the object, you would naively write something like my-list = my-list.sort

[21:32] <discord-raku-bot> <Nemokosch> there is a less redundant (near) equivalent for that: you can just write my-list.=sort

[21:33] <discord-raku-bot> <p6steve> :cameliathink:

[22:02] <discord-raku-bot> <Mediocre> i sadly understood nothing XD

[22:03] <discord-raku-bot> <Nemokosch> that's kind of sad indeed

[22:03] <discord-raku-bot> <Anton Antonov> It is normal.

[22:03] <discord-raku-bot> <Anton Antonov> You may fall in love with Raku, but Raku does not necessarily fall in love with you.

[22:05] <discord-raku-bot> <Nemokosch> ü§£

[22:07] <discord-raku-bot> <Anton Antonov> Before Raku, that was my experience with Number Theory.

[22:09] <discord-raku-bot> <Nemokosch> It has been quite a while that I understood nothing

[22:09] <discord-raku-bot> <Nemokosch> And frankly, almost always it was rather like I understood something and thought I understood 10x as much

[22:19] *** Heptite left
[22:22] *** jgaz left
[22:33] <discord-raku-bot> <p6steve> #v1  my ($a is rw, $b is rw, $c is rw);                  # not needed sub call {     my ($a,$b,$c) = split " ", prompt "enter: ";     if +$a ~~ Int && +$b ~~ Int && +$c ~~ Int {         return $a, $b, $c;      } else {         say "nope";         call;     }    }  my ($a, $b, $c) = call();                           # combine  say($a, $b, $c);

[22:33] <discord-raku-bot> <p6steve> ^^^ I thought I would try to streamline a bit ... here we can remove some of the delcarations

[22:34] <discord-raku-bot> <p6steve> #v2 sub call {     my ($a,$b,$c) = split " ", prompt "enter: ";    # use an array     if +$a ~~ Int && +$b ~~ Int && +$c ~~ Int {     # use a map & a junction         return $a, $b, $c;                          # return not needed     } else {         say "nope";         call;                                       # drop last ;     } }  say call.join(" ")

[22:35] <discord-raku-bot> <p6steve> ^^^ and then we can use an array and a junction to make a bit more clear

[22:35] <discord-raku-bot> <p6steve> #v3 sub call {     my @a = split " ", prompt "enter: ";      if @a.map(+*).all {                             # test all for Num         @a     } else {         say "nope";         call     } } say call.join(" ")

[22:36] <lizmat> wouldn't it make more sense to use .first and search for the first non-numeric ?

[22:38] <discord-raku-bot> <p6steve> lizmat: that would be too easy

[22:38] <lizmat> ah, ok  :-)

[22:38] <discord-raku-bot> <Nemokosch> > if @a.map(+*).all this is risky though

[22:38] <discord-raku-bot> <Nemokosch> what if the value is actually 0?

[22:45] <discord-raku-bot> <p6steve> err - ok it's late

[22:46] <discord-raku-bot> <p6steve> #v4 sub call {     my @a = split " ", prompt "enter: ";        if @a.map(*.Int).all {                             # test all for Num         @a     } else {         say "nope";         call     } } say call.join(" ") 

[22:47] <discord-raku-bot> <p6steve> #test all for ability to coerce to Int ...

[22:53] <discord-raku-bot> <Nemokosch> I was also thinking about this in the morning üòÑ

[22:54] <discord-raku-bot> <p6steve> sub call {     my @a = split " ", prompt "enter: ";     dd @a;         if @a.map({+$_ ~~ Int}).all {                             # test all for Num         @a      } else {         say "nope";         call     } } say call.join(" ")

[22:54] <discord-raku-bot> <p6steve> ha!

[22:55] <discord-raku-bot> <p6steve> g'night

[22:55] <discord-raku-bot> <Nemokosch> byez

[22:56] <discord-raku-bot> <Nemokosch> I fancy something like my Numeric() @a = ... and then @a.all ~~ Int for the check

[22:56] <discord-raku-bot> <Nemokosch> apparently this doesn't explode even if some elements are Failure

[23:01] <discord-raku-bot> <p6steve> my final offer:

[23:01] <discord-raku-bot> <p6steve> sub call {     my @a = split " ", prompt "enter: ";         if @a.map(+*).all ~~ Int {                             # test all for Num         @a      } else {         say "nope";         call     } } say call.join(" ")

