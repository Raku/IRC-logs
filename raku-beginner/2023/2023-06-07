[02:03] *** teatime left
[02:03] *** teatime joined
[02:21] *** teatwo joined
[02:24] *** teatime left
[02:27] *** teatwo left
[02:28] *** teatwo joined
[03:46] *** frost22 joined
[04:23] *** teatwo left
[04:31] *** lizmat left
[04:32] *** lizmat joined
[05:50] *** frost22 left
[08:06] *** dakkar joined
[09:37] <lizmat> PSA: there will not be a Rakudo Weekly this week

[10:33] *** deoac left
[13:59] *** human-blip left
[14:00] *** human-blip joined
[14:07] *** human-blip left
[14:09] *** human-blip joined
[15:13] *** human-blip left
[15:18] <discord-raku-bot> <Ad Meliora> Any possibility of making raku projects self contained or not ?

[15:20] <lizmat> there has been a GSoC project to do just that, but it never got further than a Proof of Concept  :-(

[16:35] <discord-raku-bot> <librasteve> @deoac - there is more to the story on my class vs class ... the best quite long explanation is here https://stackoverflow.com/a/66056086/9146565

[16:35] <discord-raku-bot> <librasteve> # This class that ends up in GLOBAL... class Cro::HTTP::Client {     # Lexically scoped classes, which are marked `my` and thus hidden     # implementation details. This means I can refactor them however I     # want, and never have to worry about downstream fallout!     my class HTTP1Pipeline {         # Implementation...     }     my class HTTP2Pipeline {         # Implementation...     }      #

[16:35] <discord-raku-bot> Implementation... }

[16:35] <discord-raku-bot> <librasteve> ^^^ this is the crux of the explanation

[16:38] *** dakkar left
[16:38] <discord-raku-bot> <avuserow> I'm using docker to package up a raku-based project and it is self contained. This doesn't work for many other projects but works well for a REST API over HTTP.

[17:23] *** human-blip joined
[21:40] <discord-raku-bot> <Ad Meliora> That's a bummer

[22:40] *** deoac joined
