[00:53] *** MasterDuke joined
[02:48] *** hythm left
[05:42] *** siavash joined
[07:28] *** ab5tract joined
[08:10] *** dakkar joined
[08:19] *** tea3po left
[08:20] *** tea3po joined
[08:20] *** tea3po left
[08:21] *** tea3po joined
[08:23] *** tea3po left
[08:23] *** tea3po joined
[08:29] *** tea3po left
[08:29] *** tea3po joined
[08:31] *** tea3po left
[08:31] *** tea3po joined
[09:26] *** siavash left
[11:25] *** tea3po left
[11:26] *** teatime joined
[12:14] *** jgaz joined
[14:52] *** gfldex left
[14:52] *** gfldex joined
[16:39] *** dakkar left
[16:51] *** Tirifto left
[16:51] *** Tirifto_ joined
[17:22] *** ab5tract left
[17:26] *** ab5tract joined
[18:18] <jgaz> In an object method, I have `method foo ( Int --> Int ) { Int unless %table<<key>> }` expecting to have an uninitialized (Int) returned if the lookup fails otherwise I get the value. I get type Slip instead of an empty Int and yelled at if I attempt to say the output. How do I fix this?

[18:35] <discord-raku-bot> <librasteve> jgaz: I have tried to reproduce your issue and, since it works for me, I guess that somehow you have set %table<<key>> to something True...

[18:35] <jgaz> ok

[18:36] <discord-raku-bot> <librasteve> class A {      my %table = %(key => 0);       method foo ( Int --> Int ) { Int unless %table<key> } }  say A.new.foo: 7;    #(Int)

[18:43] <jgaz> okay then, I must be doing something wrong.

[18:45] <discord-raku-bot> <librasteve> sounds like my process - wrong, wrong ... wrong, right

[18:45] <discord-raku-bot> <librasteve> ;-)

[18:48] <jgaz> mine is more like wrong, wrong, right... make sure it works, make it look pretty.

[18:48] <jgaz> :)

[18:54] <discord-raku-bot> <nemokosch> Yeah you return Empty if the lookup succeeds

[19:01] <jgaz> nemokosch, that's what I was seeing. I stopped trying to be clever and just did an `if <lookup> { return lookup } else { Int };`. I'm not proud of it, but it works.

[19:09] <discord-raku-bot> <nemokosch> Or you could use an operator of your choice

[19:09] <discord-raku-bot> <nemokosch> ||, or, //

[20:21] *** teatwo joined
[20:23] *** teatime left
[20:40] <jgaz> nemokosch, I'll have to try that.

[20:53] *** ab5tract left
[22:50] <gfldex> m: my %h; my $c = ""; dd %h«$c»; dd %h{""};

[22:50] <camelia> rakudo-moar 1eb3db770: OUTPUT: «()␤Any %h{''} = Any␤»

[22:53] <gfldex> jgaz: What is the value you where looking for that produced the Slip?

[22:57] <gfldex> jgaz: never mind. It's the unless on a True value that produces the Empty.

[23:01] <gfldex> m: my %h = :2b; dd (%h«a» // Int); dd ( %h«b»);

[23:01] <camelia> rakudo-moar 1eb3db770: OUTPUT: «Int␤Int %h = 2␤»

[23:02] <gfldex> jgaz: ^^^ the defined-or operator does what you want. Unless you actually want a boolean test, then use ||.

[23:02] <jgaz> gfldex, thanks!

[23:04] <jgaz> What is the `dd` doing in this case?

[23:04] <gfldex> It's a baby DataDumper.

[23:04] <gfldex> m: my Any:D %h = :2b; dd (%h«a» // Int); dd ( %h«b»);

[23:04] <camelia> rakudo-moar 1eb3db770: OUTPUT: «Int␤Int %h = 2␤»

[23:05] <gfldex> You may want to guard against undefined values in the Hash if you use //. Unless you got a guard on the values you store in the Hash elsewhere, ofc.

[23:06] <jgaz> yeah, the guard is elsewhere.

[23:07] <discord-raku-bot> <nemokosch> It may make sense to define all the entries typed

[23:08] <discord-raku-bot> <nemokosch> my Int %table will always retrieve Int values

[23:08] <discord-raku-bot> <nemokosch> m: my Int %table; dd %table<a>

[23:08] <discord-raku-bot> <Raku eval>  Int %table{'a'} = Int 

[23:14] *** deoac joined
