[00:16] *** jgaz left
[00:28] *** deoac left
[02:20] *** Manifest0 left
[02:28] *** Ebudae joined
[02:29] *** Heptite left
[03:08] *** Ebudae is now known as Heptite

[04:04] *** kjp left
[04:05] *** saint- left
[04:07] *** kjp joined
[04:50] *** rf left
[05:32] *** Heptite left
[08:39] *** QhpAptyj9hj0RQwM joined
[10:28] *** Manifest0 joined
[11:14] *** frost joined
[11:21] <snonux> Hi there, how can I call the same method of a parent class? E.g. in: class Foo { method test { <Foo.test>.say; } }; class Bar is Foo { method test { ALSO-CALL-test-FROM-FOO-HERE(); <Bar.test>.say;  } }; Bar.new.test;

[11:22] <snonux> Was looking at https://docs.raku.org/language/classtut#Inheritance

[11:23] <lizmat> https://docs.raku.org/language/functions#Re-dispatching  is what you probably want to see

[11:24] <discord-raku-bot> <Nemokosch> hi, from what I learned, this is a more complex topic than it sounds at first - there are several methods a call could fall back to, including the possibly multiple ancestor classes and mixins. If you are confident what your parent class is, a simple way would be to do something like self.Foo::test

[11:24] <snonux> @lizmat, ahh, yes! callsame() works, thanks!

[11:25] <discord-raku-bot> <Nemokosch> callsame is supposedly the clean solution but it's really for much more than a method chain - it's a mixture of method resolution and multiple-dispatch resolution (based on parameters)

[11:26] <lizmat> if it works, it works, no ?

[11:27] <snonux> thanks Nemokosch, yes, in my case, i only have one parent class and no roles mixed in. 

[11:31] <snonux> Nice, that it's actually 'callsame' to be called - which is pretty close to the question I asked 'how can I CALL the SAME method'. What you write is what you get :-) 

[11:32] <lizmat> snonux: indeed, that was one of TimToady's design goals

[11:33] <discord-raku-bot> <Nemokosch> yes, it works - I'm just saying, don't be surprised that you get a bit more than what you think you are asking for

[11:34] <discord-raku-bot> <Nemokosch> there can be times when that's exactly what you desire and times when it won't (easily) do the trick

[12:19] <discord-raku-bot> <el gatito (** advocate)> self.^mro[1].^method_table<test>(self) will always call the superclass method üòé

[12:27] <discord-raku-bot> <Nemokosch> üòÇ

[12:31] <lizmat> Note that this may depend on Implementation details and may stop working at any time

[12:33] <lizmat> and as such not really beginner's stuff

[12:39] *** QhpAptyj9hj0RQwM left
[12:54] <discord-raku-bot> <el gatito (** advocate)> the metamodel is implementation detail?

[12:59] *** QhpAptyj9hj0RQwM joined
[12:59] <lizmat> well, it is a grey area: there are no spectests for method_table, and no Rakudo tests for it either

[12:59] <lizmat> even though it is documented...  so there's that

[13:03] <lizmat> and we recently had some nasty module regressions when some aspect of the metamodel needed changing (an extra parameter to a method)

[13:15] <discord-raku-bot> <el gatito (** advocate)> there are cases where redispatching does not give expected behavior like this https://glot.io/snippets/gidp0msau6

[13:16] <discord-raku-bot> <el gatito (** advocate)> in those cases you have no choice but this

[13:18] <discord-raku-bot> <el gatito (** advocate)> actually you have another choice of self.B.f

[13:18] <discord-raku-bot> <el gatito (** advocate)> but still

[13:23] <lizmat> you mean self.B::f ?

[13:23] <lizmat> but yes, *that* would be preferable way of doing and *that* is sure to remain supported

[13:29] <discord-raku-bot> <el gatito (** advocate)> then if i want to call it, do i have to include self in the argument?

[13:30] <discord-raku-bot> <el gatito (** advocate)> like self.B::f(self: #(...))`

[13:33] <lizmat> not in that case, as it is still considered to be a method call

[13:34] <lizmat> m: class A { method b($a) { dd $a } }; A.A::b(42)

[13:34] <camelia> rakudo-moar fd75bb0fe: OUTPUT: ¬´42‚ê§¬ª

[13:43] <discord-raku-bot> <el gatito (** advocate)> it is sad when raku‚Äôs 3 ways of calling superclass method is either: - not really super (redispatch) - implementation dependent magic - just spelling out the class name (explicit is better than implicit i guess?)

[13:44] <discord-raku-bot> <Nemokosch> thank heavens that I didn't have to say that...

[13:44] <discord-raku-bot> <Nemokosch> you might have social credits left to be taken with good faith

[13:48] <lizmat> why is redispatch not really super ?

[13:49] <discord-raku-bot> <el gatito (** advocate)> this

[13:51] <lizmat> m: class A { method a() { dd } }; class B is A { method a() { dd; nextsame } }; B.a    # this ?

[13:51] <camelia> rakudo-moar e4d31e819: OUTPUT: ¬´method a(B: *%_)‚ê§method a(A: *%_)‚ê§¬ª

[13:51] <lizmat> m: class A { method a() { dd } }; class B is A { method a() { callsame; dd } }; B.a    # this ?

[13:51] <camelia> rakudo-moar e4d31e819: OUTPUT: ¬´method a(A: *%_)‚ê§method a(B: *%_)‚ê§¬ª

[13:52] <discord-raku-bot> <el gatito (** advocate)> have you read the code

[13:52] <discord-raku-bot> <el gatito (** advocate)> https://glot.io/snippets/gidp0msau6

[13:59] * lizmat is looking

[14:05] <discord-raku-bot> <Nemokosch> the other thing is that I kept asking about and never got a clear answer is: is there a standard, non-metamodel way to get hold of a method, in the first place?

[14:05] <discord-raku-bot> <Nemokosch> or only find_method, lookup sort of stuff?

[14:05] <lizmat> so, a part of the complexity in that example is that A_ is a subclass of A

[14:06] <lizmat> given that, I think the dispatch is correct

[14:07] <lizmat> now, there may be reasons for having an A_ inheriting from A, but it feels to me that using roles may be a better solution

[14:07] <lizmat> now, the interesting part is when A_ is *not* a subclass of A

[14:07] <discord-raku-bot> <el gatito (** advocate)> > given that, I think the dispatch is correct yes, but it is not the behavior given by the mro version

[14:07] <discord-raku-bot> <el gatito (** advocate)> the mro behavior is the expected one

[14:07] <lizmat> in that case, the calls are: C: hi A_, B: hi A_, B: hi A_

[14:08] <discord-raku-bot> <el gatito (** advocate)> yes

[14:08] <lizmat> which I think is actually an error, having B: hi A_ in there twice

[14:08] <lizmat> so if you could make an issue for that, please

[14:08] <discord-raku-bot> <el gatito (** advocate)> but the redispatch is C: hi A_ B: hi A_ C: hi A B: hi A 

[14:09] <lizmat> as to Nemokosch's question

[14:09] <snonux> i see, you people are still ongoing with the dispatch :D

[14:09] <discord-raku-bot> <el gatito (** advocate)> isn't that D: hi A_ B: hi A_ B: hi A 

[14:10] <lizmat> snonux: we know there are some long standing issues with dispatch, but fixing them is *hard* and may affect performance drastically

[14:10] <lizmat> as just about everyting in Raku is dispatch

[14:11] <lizmat> el gatito the only thing I changed in the code, was remove the "is A"

[14:11] <discord-raku-bot> <el gatito (** advocate)> about that idk why lol

[14:16] <discord-raku-bot> <el gatito (** advocate)> also dispatch isn't the problem in this case the problem is raku doesn't have a convenient way to truly delegate method calls to the superclass no super or anything even tho that should be pretty easy to implement

[14:17] <lizmat> well, you're welcome to create a PR   or a module  :-)

[14:51] *** ab5tract left
[15:20] *** frost left
[16:04] *** Heptite joined
[16:20] *** yjh left
[16:42] *** QhpAptyj9hj0RQwM left
[19:05] *** QhpAptyj9hj0RQwM joined
[19:43] *** QhpAptyj9hj0RQwM left
[19:43] *** QhpAptyj9hj0RQwM joined
[20:45] *** QhpAptyj9hj0RQwM left
[20:58] <discord-raku-bot> <Yeuph> Would someone be able to give me some pointers?  I'm trying to figure out how to get a class to accept sets  What would that look like?  I've been tinkering for a while and documentation is limited

[20:59] <discord-raku-bot> <Yeuph> like `class Sets {      has [what goes here?] }  And how to add that to the class

[21:01] <discord-raku-bot> <Nemokosch> has is for creating attributes and properties - so far so good?

[21:01] <discord-raku-bot> <Yeuph> assuming that SetHash is included in attributes and properties, yes

[21:02] <discord-raku-bot> <Yeuph> (also yes if not; which would mean that is the route of my issue)

[21:03] <discord-raku-bot> <Nemokosch> I mean, you know what you are going for here? To put a SetHash inside a class so that the class can contain it for whatever purpose

[21:03] <discord-raku-bot> <Nemokosch> well, the object instances can

[21:04] <discord-raku-bot> <Yeuph> I do know what I want to make, I just haven't used Raku in about a year at this point and can't claim to know the language well.  I'm coming from C++

[21:04] <discord-raku-bot> <Yeuph> which probably has near-zero translation value

[21:04] <discord-raku-bot> <Nemokosch> so this is like private/public: field declaration

[21:04] <discord-raku-bot> <Yeuph> ok

[21:04] <discord-raku-bot> <Nemokosch> is this what you want to achieve?

[21:04] <discord-raku-bot> <Yeuph> public, yes

[21:05] <discord-raku-bot> <Nemokosch> okay, so you can do has SetHash $.foobar

[21:05] <discord-raku-bot> <Nemokosch> you don't need to declare the type, sometimes it's actually better to avoid it

[21:05] <discord-raku-bot> <Nemokosch> but this is the syntax

[21:08] <discord-raku-bot> <Yeuph> alright, then declaring that set in the class is done how?  `class Set {      has SetHash $.foobar }  my &thing = Set.new(foobar => [how are we approaching this?])

[21:08] <discord-raku-bot> <Nemokosch> this will create a private attribute $!foobar and an accessor method foobar to it

[21:09] <discord-raku-bot> <Nemokosch> first off, I wouldn't overload the name Set if I were you, it might bite back somewhere

[21:09] <discord-raku-bot> <Yeuph> yeah my names are separate in what I'm actually writing

[21:09] <discord-raku-bot> <Yeuph> (which isn't much at this point and the code isn't worth posting)

[21:09] <discord-raku-bot> <Nemokosch> second, storing it into a &variable (so a Callable) probably won't work, unless you make your class implement Callable

[21:10] <discord-raku-bot> <Nemokosch> and I doubt that's your intention anyway

[21:10] <discord-raku-bot> <Yeuph> I should probably breeze through some of the Raku course stuff for a few hours

[21:11] <discord-raku-bot> <Yeuph> I'm gonna do that.  I was hoping I'd remember stuff/be able to just figure it out.  I need to just spend a few hours going over the language

[21:12] <discord-raku-bot> <Yeuph> what's the best documentation/course now?

[21:12] <discord-raku-bot> <Nemokosch> and third, actually, I'm not sure what you can feed in there as the value of the named argument; my guess would be, anything that can be on the rhs of an assignment of a variable like my SetHash $foobar

[21:12] <discord-raku-bot> <Nemokosch> so typically something coerced into SetHash

[21:13] <discord-raku-bot> <Yeuph> ok

[21:14] <discord-raku-bot> <Yeuph> is there a website for Comma error messages?

[21:15] <discord-raku-bot> <Nemokosch> I'm afraid you'd need to ask people with Comma affiliations for that

[21:15] <discord-raku-bot> <Yeuph> ok thanks for your time

[21:15] <discord-raku-bot> <Nemokosch> for classes, I'd still say this https://docs.raku.org/language/classtut

[21:18] <shmup> also Yeuph idk if you've used the search feature on the docs, but it's a pretty nice breakdown of things and i've been using it a lot: https://i.imgur.com/VmDYyCA.png

[21:19] <discord-raku-bot> <Nemokosch> the search can usually make an "educated guess" where a certain topic is covered üòõ

[21:20] <shmup> well i actually would have searched for this which is even better results :P https://i.imgur.com/kUAOqZI.png

[21:21] <shmup> ive also been using chatgpt as a feedback loop on asking questions about syntax i see in code, and it generally helps me with looking the next thing i wanna look up in some doc/etc

[21:23] <shmup> it really does have parallels to a question you might drop in #irc if the outcome (often) is giving you a thing to specific thing/direction to research

[21:24] <shmup> i am not able to type sentences rn :)

[21:25] <discord-raku-bot> <Yeuph> alright I'll play with this as well

[22:02] *** rf joined
[22:16] *** QhpAptyj9hj0RQwM joined
[22:56] *** QhpAptyj9hj0RQwM left
