[03:30] *** teatime joined
[03:31] *** teatime left
[04:11] *** ab5tract left
[04:13] *** ab5tract joined
[05:28] *** siavash joined
[05:34] *** ab5tract left
[05:37] *** ab5tract joined
[05:41] *** ab5tract left
[05:43] *** ab5tract joined
[07:51] *** dakkar joined
[08:21] *** tea3po left
[08:21] *** tea3po joined
[09:20] *** wafflus joined
[09:20] <wafflus> is this supposed to work? my @even_numbers = @numbers.where: { $_ % 2 == 0 };

[09:21] <wafflus> i got that from ai but where does not seem to work i'm guessing it only used when declaring vars and functions?

[09:46] <discord-raku-bot> <antononcube> It looks like good enough hallucination.

[09:47] <wafflus> '=D

[09:49] <wafflus> if i have a list of numbers can i use @numbers.grep to select only unique values that match a pattern (2 for example) i've tried using junctions and ~I can't get it correct

[09:50] <wafflus> i know there is a unique function but i want to see if its possible using grep

[09:51] <wafflus> i thought maybe i could use some sort of junction but cant seem to get it to work

[09:51] *** siavash left
[09:56] <discord-raku-bot> <nemokosch> Probably it's for a reason

[10:01] <discord-raku-bot> <Nahita> junctions, idk. with a state variable you can simulate .unique with grep py In [12]: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222 Out[12]: [12 3 4 12 5 22 2 -2 222 0 4 222]  In [13]: @nums.grep: { /2/ && !%.{$_}++ } Out[13]: (12 22 2 -2 222) 

[10:01] <discord-raku-bot> <Nahita> % is the anonymous state variable here, a Hash

[10:02] <wafflus> cool ty

[10:03] <discord-raku-bot> <Nahita> it employs the "seen" idiom: we check !%.{$_} first, i.e., has this number not seen yet

[10:03] <discord-raku-bot> <Nahita> ++ marks it seen via autovivification the first time; for other (second+) times, it's a normal increment of the value

[10:04] <wafflus> so autovivification will only increase the value on the 2nd pass?

[10:05] <wafflus> or 2nd value rather

[10:05] <discord-raku-bot> <Nahita> in the first pass, it doesn't exist at all in the hash. so it will autovivify it and give it a value 1 in the hash table

[10:05] <discord-raku-bot> <Nahita> if it is encountered more from then on, it will be 2, 3, 4 etc.

[10:06] <discord-raku-bot> <Nahita> all are nonzero numbers and will say "i have seen this number before", and grep won't include it

[10:07] <wafflus> !%.{$_} does the ! mean falsify?

[10:07] <discord-raku-bot> <Nahita> yeah it negates

[10:07] <wafflus> k

[10:07] <discord-raku-bot> <nemokosch> $var++ on an undefined value will yield 0 and increment that

[10:09] <discord-raku-bot> <Nahita> . between the variable % and lookup {$_} was needed otherwise it thinks i'm trying to form a Hash with 1 element ($_)

[10:09] <discord-raku-bot> <Nahita> since {...} operator is like a method, . is puttable in between there

[10:10] <discord-raku-bot> <nemokosch> The reason it has to be so compact is that these anonymous variables can't be backreferenced

[10:10] <discord-raku-bot> <Nahita> same for array indexing, i.e., @val.[...]  is valid to say instead of @val[...]

[10:13] <wafflus> pretty cool stuff¬† but how come /2/ works in your example but not 2? i take it /2/ is a regex I would have thought 2 would work but the result is different

[10:14] <discord-raku-bot> <nemokosch> 2 is merely True in boolean context

[10:14] <discord-raku-bot> <Nahita> in a boolean context, a regex automatically matches against the topic $_

[10:14] <discord-raku-bot> <nemokosch> 2 && x will always evaluate to x

[10:14] <discord-raku-bot> <Nahita> so it's as if written as $_ ~~ /2/ && ...

[10:15] <discord-raku-bot> <Nahita> you can also do .contains(2) for this specific case BTW

[10:15] <wafflus> k i think i understand

[10:15] <discord-raku-bot> <Nahita> like .grep: { .contains(2) && ...}

[10:16] <discord-raku-bot> <Nahita> a bare 2 would be the value 2, no $_ involved

[10:16] <discord-raku-bot> <Nahita> and it's truthful, so it's a no-op in &&

[10:17] <discord-raku-bot> <nemokosch> while going through the grammar, I noticed that even something like $var.++ would work

[10:17] <discord-raku-bot> <nemokosch> somebody really liked this dot notation

[10:17] <wafflus> :)

[10:24] <dakkar> nemokosh: IIRC, the reason for that is the "unspace": since Raku cares about whitespace, you can't just write `$var ++`, and some people *really* like being able to vertically align their method/postfix calls

[10:26] <discord-raku-bot> <nemokosch> $var\ ++ seems to work, what am I missing?

[10:26] <dakkar> after some very vocal complaints, the syntax `$object.\   method()` was added

[10:26] <dakkar> (you were missing the second half of my remembrance üòú)

[10:26] <dakkar> `$var\ ++` is fine when you need to add 2 columns

[10:27] <dakkar> but `$var\++` won't work (I'm pretty sure there's very good reasons to not parse it as a postfix call)

[10:27] <dakkar> so you can `$var.++` to add 1 column

[10:28] <discord-raku-bot> <nemokosch> yeah the fact that you can only add spaces in front of a schoolbook method call is odd and bothering tbh

[10:28] <dakkar> üòÅ is there _any_ feature of Raku that you like? Or do I only notice when you're bothered by something?

[10:28] <discord-raku-bot> <nemokosch> survivor bias I guess

[10:28] <dakkar> probably

[10:29] <discord-raku-bot> <_elcaro_> That almost worked... and for a very brief period in 2016, it might have. A long time ago, I advocated for aliasing grep to where.

[10:29] <discord-raku-bot> <nemokosch> not even other "dotty calls", and to make it worse, once you detached a method, no matter how much you attach the rest of your postfixes to it, they will be considered detached and broken

[10:29] <dakkar> nemokosh: I don't understand that sentence

[10:30] <discord-raku-bot> <nemokosch> a.&bar works

[10:30] <discord-raku-bot> <nemokosch> a .foo also works

[10:30] <discord-raku-bot> <nemokosch> but a .foo.&bar doesn't work

[10:31] <discord-raku-bot> <nemokosch> the a .foo proactively infects the rest of the expression

[10:31] <dakkar> uh?

[10:31] <dakkar> m: class A { method foo() { return self } }; sub bar($thing) { say "got $thing" }; A.new.foo.&bar

[10:31] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´got A<4643776846560>‚ê§¬ª

[10:31] <discord-raku-bot> <nemokosch> well, try it yourself

[10:31] <discord-raku-bot> <nemokosch> you forgot the space after A

[10:31] <discord-raku-bot> <nemokosch> or after new, as you prefer

[10:32] <dakkar> ooh, right

[10:32] <dakkar> I didn't even know that `$object .method` was allowed

[10:33] <discord-raku-bot> <nemokosch> I think that comfortably made it to 6.c

[10:34] <lizmat> yeah, that made it to the Christmas release  :-)

[10:35] <lizmat> as |foo as syntactic sugar for foo.Slip

[10:35] <lizmat> did

[10:36] <discord-raku-bot> <nemokosch> |foo can also turn positionals into a capture, or something like that

[10:36] <discord-raku-bot> <nemokosch> like foo.Slip would still be passed as one argument

[10:37] <discord-raku-bot> <nemokosch> m: my @a = <1 2 3>; say @a.Slip; say |@a;

[10:37] <discord-raku-bot> <Raku eval>  (1 2 3) 123 

[10:38] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: { /2/ && !%.{$_}++ }

[10:38] <discord-raku-bot> <Raku eval>  (12 22 2 -2 222) 

[10:39] <discord-raku-bot> <nemokosch> I still wanted to toy around with this

[10:40] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: {    next unless /2/;   !%.{$_}++ }

[10:40] <discord-raku-bot> <Raku eval>  (12 22 2 -2 222) 

[10:41] <discord-raku-bot> <nemokosch> using next to skip over entries in mapping is often a good idea

[10:41] <discord-raku-bot> <nemokosch> dakkar: this one is for you üòÅ

[10:42] <dakkar> why?

[10:42] <discord-raku-bot> <nemokosch> "any feature you like"

[10:42] <discord-raku-bot> <nemokosch> it counts, doesn't it

[10:43] <dakkar> aah! thank you ‚ò∫

[10:44] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: {    next unless /2/;   next if %.{$_}++;   True }

[10:44] <discord-raku-bot> <Raku eval>  (12 22 2 -2 222) 

[10:45] <discord-raku-bot> <nemokosch> this is still not such a bad idea if one likes this style

[10:47] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: {    next unless /2/;   my $appeared-already = %.{$_};   next if $appeared-already;   $appeared-already = True;   True }

[10:47] <discord-raku-bot> <Raku eval>  (12 12 22 2 -2 222 222) 

[10:47] <discord-raku-bot> <nemokosch> okay, I didn't intend it to break down just yet...

[10:48] <discord-raku-bot> <nemokosch> should have used binding I think

[10:49] <discord-raku-bot> <nemokosch> this happens when you change your mind halfway

[10:49] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: {    next unless /2/;   my $appeared-already := %.{$_};   next if $appeared-already;   $appeared-already = True;   True }

[10:49] <discord-raku-bot> <Raku eval>  (12 22 2 -2 222) 

[10:49] <discord-raku-bot> <nemokosch> redemption

[10:50] <discord-raku-bot> <_elcaro_> Probably better to check uniqueness first... could save you doing a whole bunch of regex matches.. but then that's just *.unique.grep(/2/)

[10:50] <discord-raku-bot> <nemokosch> yeah well it really depends on the cost of each operation, and it's not obvious at least that the uniqueness is cheaper tbh

[10:52] <discord-raku-bot> <nemokosch> for readability's and composability's sake, of course the composition of existing operations would be the most idiomatic

[10:53] <discord-raku-bot> <nemokosch> but since we walked down on this path, I wanted to show some things with these list manipulation callbacks and anonymous variables

[10:56] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: {    next unless /2/;   my $appeared-already := %.{$_};   next if $appeared-already;   $appeared-already = True;   True }

[10:56] <discord-raku-bot> <Raku eval>  (12 22 2 -2 222) 

[10:57] <discord-raku-bot> <nemokosch> this is obviously overkill but the important thing is that a hash or a list (or whatever "deep mutable" data structure) can give you something you can directly write, much like a reference

[10:57] <discord-raku-bot> <nemokosch> in this case, it can do that even if the key didn't even exist

[10:58] <discord-raku-bot> <nemokosch> it prepared a slot, like "this is where this data should go once it actually exists"

[10:58] <discord-raku-bot> <nemokosch> I borrowed that slot and set it myself, it became stored in the hash

[11:00] <discord-raku-bot> <nemokosch> now the final step would be to not borrow the "reference" (scalar container) but instead reuse the same expression

[11:01] <discord-raku-bot> <nemokosch> m: my @nums = 12, 3, 4, 12, 5, 22, 2, -2, 222, 0, 4, 222; say @nums.grep: {    next unless /2/;   next if %.{$};   %.{$} = True;   True }

[11:01] <discord-raku-bot> <Raku eval>  (12 12 22 2 -2 222 222) 

[11:01] <discord-raku-bot> <nemokosch> and this won't work

[11:02] <discord-raku-bot> <nemokosch> because anonymous variables get (re)declared on all occurrence

[11:02] <discord-raku-bot> <nemokosch> meaning that they can only be used sparingly

[11:12] <wafflus> m: @n = (0,12,2,2,8,8,10,12,22); say @n.grep: { /^22$/ && !%.{$_}++ }

[11:12] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '@n' is not declared.  Perhaps you forgot a 'sub' if this was‚ê§intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> <BOL>‚èè@n = (0,12,2,2,8,8,10,12,22); say @n.gre‚ê§¬ª

[11:12] <wafflus> m: my @n = (0,12,2,2,8,8,10,12,22); say @n.grep: { /^22$/ && !%.{$_}++ }

[11:12] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(22)‚ê§¬ª

[11:14] <discord-raku-bot> <nemokosch> this is some funny logic

[11:14] <discord-raku-bot> <nemokosch> "collect all the unique values that are exactly 22"

[11:16] <lizmat> m: say (0,12,2,2,8,8,10,12,22).grep: 22

[11:16] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(22)‚ê§¬ª

[11:18] <wafflus> my orginal question (i think) was to output the value 2 only if it was unique

[11:19] <wafflus> using grep

[11:19] <wafflus> i know there is a unique which i¬† think is what i will probally will use but i wanted to see if it could be done using grep

[11:19] <wafflus> hence the rabbit hole

[11:19] <lizmat> m: say (1,2,3,2,3,4,2,3).first: 2

[11:19] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´2‚ê§¬ª

[11:20] <lizmat> why not use first instead of grep?

[11:22] <wafflus> ok can u do multiple values? could i extend it to say match 2 and 3?

[11:22] <lizmat> m: say (1,2,3,2,3,4,2,3).first: 2 | 3

[11:22] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´2‚ê§¬ª

[11:22] <lizmat> m: say (1,3,2,3,4,2,3).first: 2 | 3

[11:22] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´3‚ê§¬ª

[11:25] <wafflus> k thats only outputing the first unique value that matches the pattern not all unique values

[11:27] <wafflus> orginally i was trying to learn and understand junction and i was trying to mix them with grep

[11:28] <lizmat> m: say (1,3,2,3,4,2,3).unique

[11:28] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(1 3 2 4)‚ê§¬ª

[11:28] <lizmat> m: say (1,3,2,3,4,2,3).Set

[11:28] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´Set(1 2 3 4)‚ê§¬ª

[11:28] <lizmat> m: say (1,3,2,3,4,2,3).Bag

[11:28] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´Bag(1 2(2) 3(3) 4)‚ê§¬ª

[11:28] <lizmat> take your pick :-)

[11:28] <wafflus> ok ty

[11:33] <wafflus> m: say (5,5,5,5,2,2).bag

[11:33] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´No such method 'bag' for invocant of type 'List'.  Did you mean 'Bag'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:33] <wafflus> m: say (5,5,5,5,2,2).Bag

[11:33] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´Bag(2(2) 5(4))‚ê§¬ª

[12:19] *** teatwo joined
[12:22] *** tea3po left
[12:23] <lizmat> https://rakudoweekly.blog/2023/09/04/2023-36-slimline-september/

[12:23] <lizmat> oops

[12:24] <lizmat> 	And yet another Rakudo Weekly hits the Net ^^

[12:33] <wafflus> in raku is there a method that¬† can return the actual string of what inside a function?

[12:33] <wafflus> in raku is there a method that¬† can return the actual string of what inside a function?

[12:33] <lizmat> you mean the code?

[12:33] <wafflus> sorry

[12:33] <lizmat> no

[12:33] <lizmat> not at the moment

[12:34] <lizmat> you *can* find out where the code lives, though

[12:34] <lizmat> m: say &infix:<+>.file

[12:34] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´SETTING::src/core.c/Numeric.rakumod‚ê§¬ª

[12:34] <lizmat> m: say &infix:<+>.line

[12:34] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´209‚ê§¬ª

[12:34] <wafflus> ok thanks

[12:34] <lizmat> that will usually lead you to the proto

[12:35] <wafflus> i was jsut trying to put some blocks of code inside an array and print the string representation and then the result

[12:36] <lizmat> m: for &infix:<+>.candidates { say "$_.file: $_.line" }

[12:36] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´Sub object coerced to string (please use .gist or .raku to do that)‚ê§infix:<+>.file: infix:<+>.line‚ê§infix:<+>.file: infix:<+>.line‚ê§infix:<+>.file: infix:<+>.line‚ê§infix:<+>.file: infix:<+>.line‚ê§infix:<+>.file: infix:<+>.line‚ê§infix:<+>.file: ‚Ä¶¬ª

[12:36] <wafflus> you actually helped me more than need ty

[12:36] <lizmat> m: for &infix:<+>.candidates { say "$_.file(): $_.line()" }

[12:36] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´SETTING::src/core.c/Numeric.rakumod: 210‚ê§SETTING::src/core.c/Numeric.rakumod: 211‚ê§SETTING::src/core.c/Real.rakumod: 145‚ê§SETTING::src/core.c/Int.rakumod: 312‚ê§SETTING::src/core.c/Int.rakumod: 313‚ê§SETTING::src/core.c/Int.rakumod: 314‚ê§SETTING:‚Ä¶¬ª

[12:36] <lizmat> yw :-)

[12:42] <wafflus> btw when you use pastebin do you set the code to expire? (I always do as it seems polite and might fill the server)

[12:43] <wafflus> though i'm sure its never going to do that

[12:44] *** NemokoschKiwi joined
[12:46] *** NemokoschKiwi left
[12:50] *** samebchase joined
[12:52] <samebchase> What's the idiomatic way to drop n elements in a list. I know List.head can be used to get the first N elements, what's the best way to drop the first N elements?

[12:56] <lizmat> m: my @a = ^10; say @a.skip(5)

[12:56] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(5 6 7 8 9)‚ê§¬ª

[12:57] <samebchase> Thanks lizmat!

[12:57] <samebchase> I have a feeling I've asked this exact same question a few years ago. üò¨

[12:57] <lizmat> maybe .skip didn't exist yet then

[12:59] <samebchase> https://docs.raku.org/type/List I was looking here and wondering if there's a built-in

[12:59] <lizmat> m: use v6.e.PREVIEW: my @a = ^20; say @a.skip(5,3,6)

[12:59] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Bogus statement‚ê§at <tmp>:1‚ê§------> use v6.e.PREVIEW:‚èè my @a = ^20; say @a.skip(5,3,6)‚ê§    expecting any of:‚ê§        colon pair‚ê§¬ª

[12:59] <lizmat> m: use v6.e.PREVIEW; my @a = ^20; say @a.skip(5,3,6)

[12:59] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(0 1 2 3 4 8 9 10 11 12 13)‚ê§¬ª

[12:59] <lizmat> samebchase: maybe make a doc issue about that

[13:00] <samebchase> yup

[13:04] <wafflus> https://pastebin.com/VhJFeWr1 anyone know why the 3rd example outputs brackets and if it's possible to do do multiple comparisons using < etc and get the correct result?

[13:04] <discord-raku-bot> <nemokosch> it's always suspicious that if something like this is missing, it's not actually a method of List

[13:04] <discord-raku-bot> <nemokosch> and this seems to be the case here as well

[13:04] <discord-raku-bot> <nemokosch> this complicates the documentation quite often

[13:04] <discord-raku-bot> <nemokosch> https://docs.raku.org/type/Any#routine_skip

[13:05] <dakkar> wafflus: I feel you're using `|` where `||` would make more sense to me 

[13:05] <wafflus> ok i will try

[13:06] <dakkar> (`|` is the infix version of the `any` junction constructor, `||` is the boolean "or" operator)

[13:06] <discord-raku-bot> <nemokosch> and you often use two asterisks

[13:06] <discord-raku-bot> <nemokosch> there are like three layers of traps here

[13:06] <dakkar> oh yes, that too

[13:07] <discord-raku-bot> <nemokosch> 1. | is for junctions 2. || is a "thunky" operator that perhaps doesn't even whatever-curry 3. two asterisks mean two different parameters

[13:07] <discord-raku-bot> <nemokosch> the failsafe way is to just use a {} block and $_ as the parameter in it

[13:07] <wafflus> maybe the 2nd * is like map and goes to the 2nd value in grep?

[13:08] <discord-raku-bot> <nemokosch> for what code?

[13:08] <wafflus> :m say (2, 4, 2, 5, 10, 12).grep((* > 5)||(* <5))

[13:09] <wafflus> m: (2, 4, 2, 5, 10, 12).grep((* > 5)||(* <5))

[13:09] <camelia> rakudo-moar 98312dcb5: ( no output )

[13:09] <wafflus> m: say (2, 4, 2, 5, 10, 12).grep((* > 5)||(* <5))

[13:09] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(10 12)‚ê§¬ª

[13:09] <discord-raku-bot> <nemokosch> (* > 5)||(* <5) evaluates to the first function

[13:10] <discord-raku-bot> <nemokosch> so it's the same for your purposes as just * > 5

[13:12] <wafflus> m: say {(2, 4, 2, 5, 10, 12).grep({$_ > 5|| ^5})}

[13:12] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´-> ;; $_? is raw = OUTER::<$_> { #`(Block|4297854902856) ... }‚ê§¬ª

[13:13] <wafflus> k that was diffrent then the prel

[13:13] <wafflus> repl

[13:13] <discord-raku-bot> <nemokosch> m: say (2, 4, 2, 5, 10, 12).grep({$_ > 5|| ^5})

[13:13] <discord-raku-bot> <Raku eval>  (2 4 2 5 10 12) 

[13:13] <discord-raku-bot> <nemokosch> what are you trying to achieve, though

[13:15] <discord-raku-bot> <antononcube> Out-hallucinating a certain LLM?

[13:15] <wafflus> m: say (2, 4, 2, 5, 10, 12).grep((^5) | (6 .. 12))

[13:15] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(2 4 2 10 12)‚ê§¬ª

[13:16] <discord-raku-bot> <nemokosch> In Raku, it's relatively painless to decide what you want to solve and write some code for it

[13:16] <discord-raku-bot> <nemokosch> but it's really painful to write some random code and figure out what you expect it to do...

[13:16] <discord-raku-bot> <antononcube> Hmm‚Ä¶ no, that is Mathematica !!!

[13:17] <wafflus> m: say (2, 4, 2, 5, 10, 12).grep((^5) | (6 .. *))

[13:17] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(2 4 2 10 12)‚ê§¬ª

[13:17] <discord-raku-bot> <nemokosch> the DIHWIDT principle is basically a nod to this phenomenon

[13:17] <wafflus> something like that but i was trying to do it with < and > operators

[13:17] <discord-raku-bot> <nemokosch> "doctor, it hurts when i do this - then don't"

[13:17] <wafflus> i could only manged to do it with 1

[13:17] <discord-raku-bot> <antononcube> Sorry, I reacted too quickly ‚Äî should have waited to read/see that.

[13:18] <discord-raku-bot> <antononcube> Back to LLM-land‚Ä¶

[13:18] <wafflus> i thought i could do two comparisons so far all have met with failure

[13:18] <wafflus> in one line

[13:18] <discord-raku-bot> <nemokosch> wafflus: isn't this more or less "all (positive) values but 5"?

[13:18] <discord-raku-bot> <nemokosch> non-negative*

[13:19] <discord-raku-bot> <nemokosch> anyway, what about something like

[13:19] <wafflus> yes but i guess its more if i can do i that way

[13:19] <wafflus> i know i could do a not 5

[13:20] <discord-raku-bot> <nemokosch> m: say (2, 4, 2, 5, 10, 12).grep({ 3 < $_ < 6 || 7 < $_ < 11 })

[13:20] <discord-raku-bot> <Raku eval>  (4 5 10) 

[13:20] <wafflus> cool

[13:27] <wafflus> m: say (1...14).grep({$_ <5 || 5 < $_ <= 12 })

[13:27] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(1 2 3 4 6 7 8 9 10 11 12)‚ê§¬ª

[13:32] <discord-raku-bot> <nemokosch> yep, legit

[13:33] <wafflus> is that ‚Üë the equivalent to

[13:34] <wafflus> m: say (1...14).grep({$_ <5 || ($_ <= 12) && $_ >5 })

[13:34] <camelia> rakudo-moar 98312dcb5: OUTPUT: ¬´(1 2 3 4 6 7 8 9 10 11 12)‚ê§¬ª

[13:35] <discord-raku-bot> <antononcube> This is a very quotable statement in the context of working with LLMs to generate Raku code.

[13:36] <discord-raku-bot> <nemokosch> what are you gonna do with it?

[13:38] <discord-raku-bot> <antononcube> Hmm‚Ä¶ put in a blog post, or two, or five. (With attribution.)

[13:38] <wafflus> my statements?

[13:39] <discord-raku-bot> <antononcube> @nemokosch Or, if you prefer without attribution. (‚ÄúA certain Raku enthusiast stated once that‚Ä¶‚Äù)

[13:42] <discord-raku-bot> <nemokosch> lol

[13:43] <discord-raku-bot> <nemokosch> yeah don't forget that replies don't carry through the IRC bridge

[13:43] <discord-raku-bot> <antononcube> Good to know!

[13:44] * wafflus was scared that someone was going to do a blog about his statments (look at this idiot wafflus)

[13:47] <discord-raku-bot> <nemokosch> ü§£

[13:49] <discord-raku-bot> <antononcube> @wafflus No ‚Äî quotes from your posts here will be introduced with: ‚ÄúA certain Raku adopter-wannabe (trying to do it at home, alone) asked once‚Ä¶‚Äù

[13:50] <wafflus> k i mean you can use my irc nick it's not my real name

[13:50] <wafflus> as long as your polite :)

[13:51] <wafflus> you are

[13:52] <wafflus> one of those lol

[13:53] <discord-raku-bot> <antononcube> @wafflus You are getting the wrong message it seems. Let me clarify and quantify:  > In order to be considered a Raku enthusiast, you have to have at least 1/40th of Nemokosch‚Äôs number of posted notes.

[13:53] <wafflus> roughly 2 million posts ok got it

[13:53] <discord-raku-bot> <antononcube> Yeah, not a trivial number. üôÇ

[13:53] <wafflus> i had already gussed you ment nemo earlier :D

[13:54] <wafflus> anyways nice talking to you all thanks for your help

[13:54] *** wafflus left
[13:55] <discord-raku-bot> <nemokosch> you are welcome

[13:55] <discord-raku-bot> <antononcube> Good. But now I am thinking that Raku community should have a Nemokosch unit.

[13:55] <discord-raku-bot> <nemokosch> XDD

[13:55] <discord-raku-bot> <nemokosch> is that like Erd≈ës number?

[13:56] <discord-raku-bot> <antononcube> Ha!! Good question! What I have in mind is much less structure-based ‚Äî it is more of a normalization procedure based unit.

[13:58] <discord-raku-bot> <antononcube> Although, we can make a graph of how people ‚Äúconnect‚Äù to Nemokosch, with different types of edges (guess the types!) and then apply Erdos‚Äô number.

[14:00] <discord-raku-bot> <antononcube> This reminds me ‚Äî I plan to implement a ‚ÄúGraph‚Äù package for Raku. Hopefully, before TRC-2023.

[14:48] *** tea3po joined
[14:51] *** teatwo left
[16:39] *** dakkar left
[17:41] *** teatwo joined
[17:43] *** teatime joined
[17:44] *** tea3po left
[17:45] *** teatwo left
[19:21] *** teatwo joined
[19:24] *** teatime left
[20:09] *** habere-et-disper joined
[20:09] <habere-et-disper> Is rakudo star supposed to include rakudoc (or p6doc) ?

[20:11] *** KOTP_ joined
[20:12] *** deadmarshal_ left
[20:12] *** KOTP left
[20:12] *** KOTP_ is now known as KOTP

[20:13] *** KOTP left
[20:13] *** KOTP joined
[20:19] *** teatwo left
[20:19] *** teatwo joined
[20:21] *** deadmarshal_ joined
[20:22] *** teatwo left
[20:22] *** teatwo joined
[20:25] *** teatwo left
[20:25] *** teatwo joined
[20:47] *** ab5tract left
[21:17] <discord-raku-bot> <nemokosch> well, who are you asking?

[21:25] <habere-et-disper> Hi nemokosch ! o/

[21:25] <habere-et-disper> My question isn't directed -- all input welcomed !

[21:47] *** sivoais left
[21:49] *** sivoais joined
[21:51] <discord-raku-bot> <nemokosch> I was just wondering if you are curious about an opinion, or found something that is supposedly present but apparently not, you know, this sort of stuff

[21:51] <discord-raku-bot> <nemokosch> the "hidden meaning"

[21:52] <discord-raku-bot> <nemokosch> my personal opinion is that it would be nice to include it, but then it should be probably included along the whole doc repository or something, or at least this should be the mid-term goal

[21:54] <habere-et-disper> Right. So I use the most excellent web docs, but I tried once to use offline in the terminal but neither `rakudoc` nor `p6doc` seems available. Is that my install or just the current state of affairs ?

[21:58] <discord-raku-bot> <nemokosch> I don't know much about Rakudo Star, to be honest, and never used these doc tools

[21:59] <discord-raku-bot> <nemokosch> rakudoc is working and installable, from what I know, but I don't know how it can be used with the Raku docs themselves

[22:00] <discord-raku-bot> <nemokosch> lately there have been discussions that it should somehow preinstall the docs, from which we can conclude that it hasn't been the case

[22:06] <habere-et-disper> (y)

[23:53] <habere-et-disper> How do we do optional chaining again ? In JavaScript it's with `?.` and I thought we could do something similar. I'm using `//` instead.

[23:54] <discord-raku-bot> <nemokosch> well technically, andthen does that

[23:58] *** Util left
[23:58] *** Util joined
