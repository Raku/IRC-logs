[01:03] *** Manifest0 left
[03:00] *** Heptite joined
[04:06] *** rf left
[04:29] *** Heptite left
[05:33] <shmup> a test fails for me when i zef install rakudoc

[05:34] <shmup> https://www.google.com/search?hl=en&q=rakudoc%20package

[05:34] <shmup> er

[05:34] <shmup> Testing [FAIL]: rakudoc:ver<0.2.4>:auth<github:Raku>:api<1> 

[05:45] *** deoac left
[06:47] *** tea3po joined
[06:50] *** teatwo left
[06:53] *** tea3po left
[06:53] *** tea3po joined
[07:09] *** tea3po left
[07:10] *** tea3po joined
[08:30] *** habere-et-disper joined
[08:32] <habere-et-disper> Is there a difference between:

[08:32] <habere-et-disper> sub foo ( +@bar ) { ... }

[08:32] <habere-et-disper> sub foo ( *@bar ) { ... }

[08:32] <habere-et-disper> The both seem to slurp and take numeric and non-numeric variable arguments.

[08:32] <habere-et-disper> ?

[08:33] <habere-et-disper> The/They

[08:33] <habere-et-disper> They both seem to take zero or more arguments too.

[08:41] *** teatime joined
[08:43] *** teatwo joined
[08:43] <discord-raku-bot> <Nahita> hi *@args version flattens the arguments

[08:43] <discord-raku-bot> <Nahita> e.g.,  f (3, (4, 5)) will give different results

[08:44] <discord-raku-bot> <Nahita> the "+" one makes @args to be [3, (4, 5)]

[08:44] <discord-raku-bot> <Nahita> the "*" one makes it to be [3, 4, 5]

[08:44] *** tea3po left
[08:45] <discord-raku-bot> <Nahita> as an aside, "**" forwards as is, i.e., makes it [(3, (4, 5)),]

[08:46] *** teatime left
[08:50] <habere-et-disper> Thanks !

[08:54] *** guessed joined
[08:55] <discord-raku-bot> <Nahita> np. by the way, after your message "I thought it -Ofun to see forgiven!" 4 months ago, i managed to make this work   use Slang::Forgiven;  forgiven "yeS".comb -> $char {     when / <.upper> / { put "$char shouts" }     when / <.lower> / { put "i like $char" }     default { put "$char is from others" } } 

[08:55] <discord-raku-bot> <Nahita> thanks

[08:56] *** guessed left
[08:56] <habere-et-disper> I was just trying to do this again... you read my mind! :D

[08:57] *** guessed joined
[08:59] <discord-raku-bot> <Nahita> :)

[09:05] <habere-et-disper> Installing must have Slang::Forgiven ! :D

[09:07] <habere-et-disper> Original idea came from user deoac while mentoring on exercism.

[09:08] <discord-raku-bot> <Nahita> oh thanks

[09:08] <discord-raku-bot> <Nahita> didn't know that, will mention it

[09:32] <habere-et-disper> Thanks! I will try and let them know about it. I suppose it was naive to think this could all be done with:

[09:33] <habere-et-disper> sub infix:<forgiven> ( ... ) { ... }

[09:43] <habere-et-disper> (I meant prefix.)

[09:44] <discord-raku-bot> <Nahita> oh that's a different perspective... maybe with these new RakuAST things, it could work...

[10:48] *** guessed left
[10:53] *** Manifest0 joined
[11:20] *** n1to joined
[12:20] *** n1to left
[13:05] *** Heptite joined
[13:25] *** habere-et-disper left
[14:40] *** rf joined
[16:59] *** yoreei joined
[17:05] <yoreei> Hello everyone! I have an interesting situation with && short-circuiting. Here is a minimal working example:

[17:05] <yoreei> ```

[17:05] <yoreei> my @ARR;

[17:05] <yoreei> False && $VAR = Nil.Int;

[17:05] <yoreei> ```

[17:05] <yoreei> This snippet compiles file (as expected), but gives a runtime error (no expected by me). The error is:

[17:05] <yoreei> ```

[17:05] <yoreei> Use of Nil.Int coerced to empty string

[17:05] <yoreei>   in block <unit> at ./raku.raku line 114

[17:05] <yoreei> Cannot modify an immutable Bool (False)

[17:05] <yoreei>   in block <unit> at ./raku.raku line 114

[17:05] <yoreei> ```

[17:05] <yoreei> My intuition: $VAR = Nil.Int is indeed problematic, but should never be reached by the interpreter because of "False &&"

[17:05] <yoreei> What is interesting is that

[17:05] <yoreei> ```

[17:05] <yoreei> False && Nil.Int;

[17:05] <yoreei> False && say "unreachable"  && $VAR = Nil.Int;

[17:05] <yoreei> False && my $VAR = Nil.Int;

[17:08] <rf> use and instead of &&

[17:08] <rf> It is evaluating like (False && $VAR) = Nil.Int;

[17:09] <rf> m: my $var; False and $var = Nil;

[17:09] <camelia> rakudo-moar f07fae0d3: ( no output )

[17:09] <rf> m: my $var; False && $var = Nil;

[17:09] <camelia> rakudo-moar f07fae0d3: OUTPUT: «Cannot modify an immutable Bool (False)␤  in block <unit> at <tmp> line 1␤␤»

[17:10] *** yoreei left
[17:31] *** yoreei joined
[18:01] <discord-raku-bot> <Nemokosch> Makes sense

[18:03] <rf> m: my $var = 123; $var && False = Nil;

[18:03] <camelia> rakudo-moar ce6e90314: OUTPUT: «Cannot modify an immutable Bool (False)␤  in block <unit> at <tmp> line 1␤␤»

[18:03] <rf> m: my $var = 123; $var and False = Nil;

[18:03] <camelia> rakudo-moar ce6e90314: OUTPUT: «Cannot modify an immutable Bool (False)␤  in block <unit> at <tmp> line 1␤␤»

[18:03] <rf> m: my $var = Nil; $var and False = Nil;

[18:03] <camelia> rakudo-moar ce6e90314: ( no output )

[18:14] <yoreei> does not make sense to me. Why is anything after && executed?

[18:15] <discord-raku-bot> <Nemokosch> Because you didn't use parens

[18:16] <discord-raku-bot> <Nemokosch> However, at the end of the day, it's probably better to stay away from using operators in the place of control structures

[18:19] <yoreei> I think I understand. The implicit parens are:

[18:19] <yoreei> (False && $VAR) = Nil.Int;

[18:19] <yoreei> so I was trying to assign to False

[18:20] <yoreei> Thank you all!

[18:20] *** rf left
[18:21] <discord-raku-bot> <Nemokosch> rf carry ^^

[18:23] <discord-raku-bot> <Nemokosch> Operators have at least 3 properties that can affect order of execution: precedence, associativity and evaluation of operands (e.g. short-circuiting)

[18:24] *** yoreei left
[18:36] *** rf joined
[18:48] *** tea3po joined
[18:49] *** tea3po left
[18:50] *** tea3po joined
[18:52] *** teatwo left
[19:04] *** ab5tract joined
[19:57] *** yoreei joined
[20:00] *** yoreei left
[20:41] *** snonux left
[20:41] *** snonux joined
[21:18] *** rf left
[21:18] *** rf_ joined
[21:32] *** rf_ left
[21:33] *** rf joined
[22:49] *** seekr left
[23:02] *** seekr joined
