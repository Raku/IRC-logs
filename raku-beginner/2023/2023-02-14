[00:25] *** ab5tract left
[00:42] *** QhpAptyj9hj0RQwM left
[03:34] *** rf left
[05:35] *** Heptite left
[05:54] *** kjp left
[05:56] *** kjp joined
[09:03] *** frost joined
[09:09] *** dakkar joined
[09:11] *** ab5tract joined
[09:14] *** frost left
[09:18] *** frost joined
[09:19] *** frost left
[10:25] *** QhpAptyj9hj0RQwM joined
[10:31] *** ab5tract left
[10:48] *** ab5tract joined
[11:09] *** ab5tract left
[11:11] *** QhpAptyj9hj0RQwM left
[11:28] *** QhpAptyj9hj0RQwM joined
[11:33] *** QhpAptyj9hj0RQwM left
[12:15] <discord-raku-bot> <Nahita> is this expected

[12:15] <discord-raku-bot> <Nahita> m: .^name.put if (True given 4)  # puts Any

[12:15] <discord-raku-bot> <Raku eval>  Any  

[12:16] <discord-raku-bot> <Nahita> $_ is not transported to the left side

[12:20] *** ab5tract joined
[12:22] <lizmat> I think so, as here will be an implicit scope with the (True given 4)

[12:22] <lizmat> *there

[12:24] <discord-raku-bot> <Nahita> hmm, so parantheses are not only for precedence adjustment but also introduce scope?

[12:25] <discord-raku-bot> <Nahita> i can remove the parantheses in this case

[12:25] <discord-raku-bot> <Nahita> thanks

[12:25] *** frost joined
[12:25] <lizmat> no, generally () only group

[12:26] *** frost left
[12:26] *** frost joined
[12:30] <discord-raku-bot> <Nahita> m: die "this is bad $_" if 2 !~~ (-$_ ..^ $_) given 3

[12:30] <discord-raku-bot> <Raku eval>  Exit code: 1 this is bad 3   in block <unit> at main.raku line 1   

[12:30] <discord-raku-bot> <Nahita> shouldn't this do nothing?

[12:31] <discord-raku-bot> <Nahita> it errors with "this is bad 3"

[12:31] <discord-raku-bot> <Nahita> m: say 2 !~~ (-3 ..^ 3)

[12:31] <discord-raku-bot> <Raku eval>  False  

[12:31] <discord-raku-bot> <Nahita> this says False

[12:32] <discord-raku-bot> <Nahita> which is expected as 2 is in that Range

[12:33] *** ab5tract left
[12:33] <discord-raku-bot> <Nahita> OH

[12:33] <discord-raku-bot> <Nahita> smartmatch changes the $_ there...

[12:34] <discord-raku-bot> <Nahita> going to use chained comparison instead...

[12:34] <lizmat> yeah, that feels like a good idea :-)

[12:35] *** frost left
[12:36] <discord-raku-bot> <Nahita> it works thanks

[12:37] <discord-raku-bot> <Nahita> wouldn't it be cool if the standard Test module said "all pass" or something if all tests passed

[12:37] <discord-raku-bot> <Nahita> at the end

[12:38] <discord-raku-bot> <Nahita> it makes me hesitate

[12:40] <lizmat> it complains at the end if tests failed

[12:41] <lizmat> if it doesn't complain, all tests expected to pass, did pass

[12:43] *** frost joined
[12:46] *** frost left
[12:47] <discord-raku-bot> <Nahita> yes, i thought it'd be better if it said something like "all tests passed" but maybe not

[12:53] <discord-raku-bot> <Nemokosch> smartmatch to expressions with $_ is a really funky trap

[12:53] <discord-raku-bot> <Nemokosch> I think that one is mentioned in the docs

[12:53] *** frost joined
[12:54] <discord-raku-bot> <Nemokosch> https://docs.raku.org/language/traps#Topicalizing_operators

[13:03] *** ab5tract joined
[13:19] *** ab5tract left
[13:29] *** ab5tract joined
[13:35] *** ab5tract left
[13:36] *** ab5tract joined
[13:51] <discord-raku-bot> <el gatito (** advocate)> tbh $_ should only be used as an ‚Äúimplicit argument variable‚Äù and nothing else

[14:00] <discord-raku-bot> <el gatito (** advocate)> also the exception handling pattern in raku is like bruhperl try {   # do somethin‚Äô } if $! {   say ‚Äòerror‚Äô; } 

[14:03] <lizmat> in raku, the pattern is:

[14:03] <lizmat> CATCH {

[14:03] <lizmat> say "error"

[14:03] <lizmat> }

[14:04] <lizmat> try is used in case you're *NOT* interested in why something failed

[14:04] *** frost left
[14:07] *** ab5tract left
[14:11] <discord-raku-bot> <el gatito (** advocate)> ok its actually just my irrational anger towards raku‚Äôs nonconformist syntax if i do this i should be gtgperl try {   die ‚Äòi died‚Äô;   CATCH {     when X::AdHoc { say ‚Äòan ad hoc error‚Äô }   } }

[14:16] <lizmat> if you do a .resume in the when { } block, you wouldn't need the try

[14:16] <discord-raku-bot> <Nemokosch> try is not even an essentially part of that structure

[14:16] <lizmat> m: CATCH { say "died"; .resume }; die "now"; say "still alive"

[14:16] <camelia> rakudo-moar 1841d6d9c: OUTPUT: ¬´died‚ê§still alive‚ê§¬ª

[14:19] <discord-raku-bot> <Nemokosch> also, Raku doesn't feed you with unnecessary exceptions for anything nonconventional - which is the right choice in the 21st century, I'd say

[14:20] <discord-raku-bot> <Nemokosch> perhaps this is the worst design decision in Python I can think of - raising exceptions, ranging from a missing key to ending the iteration for an iterator

[14:21] *** QhpAptyj9hj0RQwM joined
[14:22] <discord-raku-bot> <Nemokosch> $! seems like a nice and convenient shortcut to avoid actual exception handling, imo

[14:37] *** jgaz joined
[15:10] *** Heptite joined
[15:14] *** QhpAptyj9hj0RQwM left
[15:27] <discord-raku-bot> <el gatito (** advocate)> KeyError is fine imo, you expect the key to exist when indexing but it doesn‚Äôt, so it throws an exception and aren‚Äôt raku control exceptions a more general version of python‚Äôs StopIteration?

[15:30] <discord-raku-bot> <Nemokosch> I don't think KeyError is fine - one would almost never want to escalate a missing key as an error

[15:31] <discord-raku-bot> <Nemokosch> especially considering that once it's an exception, it may be caught at a completely different place, and that's really only up to the author to design proper checks for what exceptions they handle and what they escalate further

[15:36] <discord-raku-bot> <Nemokosch> also, one rarely ever needs to do anything about control exceptions (I'm kinda salty warn produces a control exception)

[15:37] <discord-raku-bot> <Nemokosch> to have such a shitty interface for iterators, though, is unforgivable, lol

[15:38] <discord-raku-bot> <Nemokosch> the Raku interface is still not great but yeah, way better than an interface that downright relies on exceptions...

[15:38] <discord-raku-bot> <el gatito (** advocate)> you are saying python?

[15:39] <discord-raku-bot> <Nemokosch> basically answered by now

[15:41] <discord-raku-bot> <el gatito (** advocate)> py iterators should use iterator.done instead of throwing an exception

[15:46] <discord-raku-bot> <el gatito (** advocate)> also python‚Äôs overzealousness in throwing exceptions might have something to do with it being a beginner language? like its better to shout at them when their code does something wrong than to ignore it and cause problems later on

[15:47] <discord-raku-bot> <Nemokosch> could be, I don't know

[15:47] <discord-raku-bot> <Nemokosch> it's really the worst iterator interface I can quickly think of

[15:51] <discord-raku-bot> <el gatito (** advocate)> üòî

[15:53] <discord-raku-bot> <frost> m: dd **.Int

[15:53] <discord-raku-bot> <Raku eval>  sub (*@_) { #`(Sub|5526418166944) ... }  

[15:54] <discord-raku-bot> <frost> m: (**.Int)(1,2,3)

[15:54] <discord-raku-bot> <Raku eval>   

[15:54] <discord-raku-bot> <frost> m: (**.Int)(1,2,3).say

[15:54] <discord-raku-bot> <Raku eval>  (1 2 3)  

[15:56] <discord-raku-bot> <frost> I don't understand this code **.&foo, what's going on üòü

[15:56] <discord-raku-bot> <el gatito (** advocate)> about iterators php actually has the most complicated and flexible one https://www.php.net/manual/en/class.iterator.php

[15:57] <discord-raku-bot> <Nemokosch> where did you find it?

[15:57] <discord-raku-bot> <el gatito (** advocate)> ** is a HyperWhatever

[15:57] <discord-raku-bot> <frost> Why I don't find it in docs

[15:57] <discord-raku-bot> <el gatito (** advocate)> and it turns the expression around it into a callable

[15:57] <discord-raku-bot> <Nemokosch> PHP has been built into a huge language

[15:58] <discord-raku-bot> <Nemokosch> To be honest - it's a better question why you came across this

[15:58] <discord-raku-bot> <frost> m: dd **

[15:58] <discord-raku-bot> <Raku eval>  **  

[15:58] <discord-raku-bot> <Nemokosch> like yes, it is in the docs but why are you bringing this all of a sudden?

[15:58] <discord-raku-bot> <Nemokosch> I have used it literally once

[15:58] <discord-raku-bot> <Nemokosch> and even then more for the lolz

[15:58] <discord-raku-bot> <el gatito (** advocate)> you might start with normal whatevers @frost

[15:58] <discord-raku-bot> <Nemokosch> as a sort of sentinel value, not to curry

[15:59] <discord-raku-bot> <el gatito (** advocate)> m: say(*(3))

[15:59] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'CALL-ME' for invocant of type 'Whatever'   in block <unit> at main.raku line 1   

[15:59] <discord-raku-bot> <el gatito (** advocate)> m: say((*)(3))

[15:59] <discord-raku-bot> <Raku eval>  Exit code: 1 No such method 'CALL-ME' for invocant of type 'Whatever'   in block <unit> at main.raku line 1   

[15:59] <discord-raku-bot> <frost> Actually  I find it from the weekly news

[15:59] <discord-raku-bot> <el gatito (** advocate)> m: say((*+1)(3))

[15:59] <discord-raku-bot> <Raku eval>  4  

[15:59] <discord-raku-bot> <frost> @el gatito (** advocate)  I know whatevercode

[16:00] <discord-raku-bot> <frost> But not familiar with hyperwhatever

[16:00] <discord-raku-bot> <Nemokosch> what code example did you see?

[16:00] <discord-raku-bot> <el gatito (** advocate)> and i don‚Äôt know what hyperwhatever does too so sorry üò≠

[16:02] <discord-raku-bot> <frost> @Nemokosch https://codegolf.stackexchange.com/questions/257483/sum-of-numbers-of-arbitrary-length

[16:03] <discord-raku-bot> <frost> See the raku solution

[16:03] <discord-raku-bot> <frost> The o infix is also new to me...

[16:03] <lizmat> https://docs.raku.org/routine/o,%20infix%20‚àò

[16:04] <discord-raku-bot> <Nemokosch> I swear this is gonna be another raiph show-off

[16:04] <lizmat> hehe

[16:04] <discord-raku-bot> <frost> thanks lizmat, I found it but not found**

[16:05] <discord-raku-bot> <Nemokosch> https://docs.raku.org/type/HyperWhatever

[16:05] <discord-raku-bot> <frost> Use the research bar I didn't find the doc of  **

[16:05] <discord-raku-bot> <frost> Only the  infix that 1**2

[16:06] <lizmat> https://docs.raku.org/type/HyperWhatever#Currying

[16:06] <discord-raku-bot> <frost> @Nemokosch  thanks

[16:07] <discord-raku-bot> <el gatito (** advocate)> its codegolf what do you expect

[16:08] <discord-raku-bot> <Nemokosch> I revoke my original statement

[16:08] <discord-raku-bot> <Nemokosch> raiph would never do something this mad

[16:09] *** QhpAptyj9hj0RQwM joined
[16:16] <discord-raku-bot> <Nemokosch> anyway, the way I read these hieroglyphs

[16:17] <discord-raku-bot> <Nemokosch> > ($~+)o(**.FatRat)

[16:18] <discord-raku-bot> <Nemokosch> to be honest, I'm not sure how the precedence adds up still

[16:18] <discord-raku-bot> <Nemokosch> $~ is surely for string coercion, a dirty hack using the anonymous state variable

[16:19] <discord-raku-bot> <Nemokosch> $ ~ something

[16:19] <discord-raku-bot> <frost> m: $1

[16:19] <discord-raku-bot> <Raku eval>   

[16:19] <discord-raku-bot> <Nemokosch> now, if $ is not set

[16:19] <discord-raku-bot> <frost> m: $1.say

[16:19] <discord-raku-bot> <Raku eval>  Nil  

[16:19] <discord-raku-bot> <Nemokosch> it will throw a warning AND coerce to the empty string

[16:19] *** QhpAptyj9hj0RQwM left
[16:20] <discord-raku-bot> <frost> m: $~1.say

[16:20] <discord-raku-bot> <Raku eval>  1  WARNINGS for /home/glot/main.raku: Useless use of "~" in expression "$~1.say" in sink context (line 1) Use of uninitialized value element of type Any in string context. Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.   in block <unit> at main.raku line 1  

[16:20] *** QhpAptyj9hj0RQwM joined
[16:20] <discord-raku-bot> <Nemokosch> m: dd $~1

[16:20] <discord-raku-bot> <Raku eval>  Use of uninitialized value element of type Any in string context. Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.   in block <unit> at main.raku line 1 "1"  

[16:20] <discord-raku-bot> <Nemokosch> this is a string

[16:20] <discord-raku-bot> <frost> m: ~1.say

[16:20] <discord-raku-bot> <Raku eval>  1  WARNINGS for /home/glot/main.raku: Useless use of "~" in expression "~1.say" in sink context (line 1)  

[16:20] <discord-raku-bot> <Nemokosch> m: dd ~1

[16:20] <discord-raku-bot> <Raku eval>  "1"  

[16:20] <discord-raku-bot> <Nemokosch> this is also a string... however, with a different operator

[16:21] <discord-raku-bot> <Nemokosch> that happens to have higher precedence

[16:21] <discord-raku-bot> <Nemokosch> so using $ there is a precedence hack clearly

[16:21] <discord-raku-bot> <frost> Yeah, why there need a $

[16:21] <discord-raku-bot> <Nemokosch> it's cheaper than the parens üòÜ

[16:25] <discord-raku-bot> <frost> m: say (~+o**.FatRat)("1","2")

[16:25] <discord-raku-bot> <Raku eval>  3  

[16:25] <discord-raku-bot> <el gatito (** advocate)> m: my &sum = **.sum; say sum(1, 2, 3, 4);

[16:25] <discord-raku-bot> <frost> say (~ * + *o**.FatRat)("1","2")

[16:25] <discord-raku-bot> <Raku eval>  (1 2 3 4)  

[16:25] <discord-raku-bot> <el gatito (** advocate)> what

[16:26] <discord-raku-bot> <frost> m: say (~+o**.FatRat)("1","2")

[16:26] <discord-raku-bot> <Raku eval>  3  

[16:27] <discord-raku-bot> <el gatito (** advocate)> m: my &sum = **.reduce({ $^x + $^y }); say sum(1, 2, 3, 4);

[16:27] <discord-raku-bot> <Raku eval>  (1 2 3 4)  

[16:28] <discord-raku-bot> <el gatito (** advocate)> m: my &add = ** + 1; say sum(1, 2, 3, 4);

[16:28] <discord-raku-bot> <Raku eval>  10  

[16:28] <discord-raku-bot> <el gatito (** advocate)> m: my &add = ** + 1; say add(1, 2, 3, 4);

[16:28] <discord-raku-bot> <Raku eval>  (2 3 4 5)  

[16:29] <discord-raku-bot> <el gatito (** advocate)> o

[16:30] <discord-raku-bot> <Nemokosch> m: my &add = ** + 1; dd add(1, 2, 3, 4);

[16:30] <discord-raku-bot> <Raku eval>  (2, 3, 4, 5).Seq  

[16:31] <discord-raku-bot> <Nemokosch> now this is interesting

[16:31] <discord-raku-bot> <Nemokosch> I mean, apparently it performs a map

[16:31] <discord-raku-bot> <Nemokosch> however, not the same map that the hyper metaoperator would

[16:31] <discord-raku-bot> <Nemokosch> just an "oldschool" map

[16:32] <discord-raku-bot> <Nemokosch> m: dd (1, 2, 3, 4) >>+>> 1

[16:32] <discord-raku-bot> <Raku eval>  (2, 3, 4, 5)  

[16:32] <discord-raku-bot> <Nemokosch> this is a List, not a Seq

[16:36] <discord-raku-bot> <el gatito (** advocate)> what is the difference between list and seq

[16:39] <discord-raku-bot> <Nemokosch> the interface

[16:48] *** QhpAptyj9hj0RQwM left
[16:51] *** QhpAptyj9hj0RQwM joined
[16:58] <discord-raku-bot> <el gatito (** advocate)> show me a concrete example

[17:01] <discord-raku-bot> <Nemokosch> could you not just look up the docs?

[17:10] *** QhpAptyj9hj0RQwM left
[17:39] <discord-raku-bot> <el gatito (** advocate)> sure üò§

[17:39] *** dakkar left
[17:43] *** QhpAptyj9hj0RQwM joined
[17:44] <discord-raku-bot> <el gatito (** advocate)> well they are actually pretty different

[17:45] <discord-raku-bot> <el gatito (** advocate)> Seq doesn‚Äôt have kv for example

[17:46] <lizmat> m: say (^10).map(*+1).kv    # I think it does?

[17:46] <camelia> rakudo-moar d2c3e9314: OUTPUT: ¬´(0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10)‚ê§¬ª

[17:47] <lizmat> m: say (^10).map(*+1).^name

[17:47] <camelia> rakudo-moar d2c3e9314: OUTPUT: ¬´Seq‚ê§¬ª

[17:55] <discord-raku-bot> <Nemokosch> Sadly, kv exists on Any

[17:57] <discord-raku-bot> <Nemokosch> therefore, Seq, among other types, will just invisibly upgrade to List in order to serve you with kv

[17:58] <discord-raku-bot> <Nemokosch> || ‚òï ||

[17:59] <discord-raku-bot> <Nemokosch> anyway, a Seq isn't even Positional

[17:59] <discord-raku-bot> <Nemokosch> what it has is a potential to upgrade to one (PositionalBindFailover)

[17:59] <lizmat> ah hmmm... maybe that's an issue that there is no Seq.kv then

[18:00] <lizmat> m: say (^10).map(*+1)[3]   # PositionalBindFailover in action

[18:00] <camelia> rakudo-moar b77f6c44d: OUTPUT: ¬´4‚ê§¬ª

[18:04] <discord-raku-bot> <Nemokosch> m: .^methods>>.gist.grep('kv').&dd given (^10).map(* + 1)

[18:04] <discord-raku-bot> <Raku eval>  ().Seq  

[18:04] <discord-raku-bot> <Nemokosch> m: .^methods>>.gist.grep('kv').&dd given (^10).map(* + 1).list

[18:04] <discord-raku-bot> <Raku eval>  ("kv",).Seq  

[18:04] <discord-raku-bot> <Nemokosch> the difference

[18:05] <lizmat> Seq should probably have a .kv method

[20:46] *** ab5tract joined
[21:10] *** QhpAptyj9hj0RQwM left
[21:39] *** QhpAptyj9hj0RQwM joined
[22:08] *** jgaz left
[22:34] <discord-raku-bot> <p6steve> nah

[22:47] *** QhpAptyj9hj0RQwM left
[22:53] <discord-raku-bot> <Nemokosch> well it depends on the implementation of Seq.list

[22:53] <discord-raku-bot> <Nemokosch> I guess it's supposed to be a performance change rather than a public interface change

[22:54] <discord-raku-bot> <Nemokosch> i.e why fetch the known universe when at the end of the day you can be as lazy as with the original sequence

[23:56] *** ab5tract left
