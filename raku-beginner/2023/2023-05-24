[02:24] *** teatwo left
[02:24] *** teatwo joined
[02:28] *** tea3po joined
[02:31] *** teatwo left
[02:41] *** tea3po left
[02:41] *** tea3po joined
[08:07] *** dakkar joined
[13:28] *** jgaz left
[13:28] *** jgaz joined
[14:18] *** tea3po left
[14:18] *** tea3po joined
[15:46] *** tea3po left
[15:46] *** tea3po joined
[16:36] *** dakkar left
[17:06] *** ab5tract joined
[17:42] *** ab5tract left
[18:31] *** deoac joined
[18:31] <deoac> A question about the REPL

[18:31] <deoac> [0] > sub infix:<neq>($a, $b) {return ($a ne $b)}; say 'a' neq 'b';

[18:31] <deoac> True

[18:31] <deoac> [0] > say 'a' neq 'b';

[18:31] <deoac> ===SORRY!=== Error while compiling:

[18:31] <deoac> Two terms in a row

[18:31] <deoac> ------> say 'a'⏏ neq 'b';

[18:31] <deoac>     expecting any of:

[18:31] <deoac>         infix

[18:31] <deoac>         infix stopper

[18:31] <deoac>         postfix

[18:31] <deoac>         statement end

[18:31] <deoac>         statement modifier

[18:31] <deoac>         statement modifier loop

[18:31] <deoac> [0] > &infix:<neq>.WHAT

[18:31] <deoac> (Sub)

[18:31] <deoac> Why the error on the second command?

[18:43] <lizmat> hmmm... I'm not seeing that, I see:

[18:43] <lizmat> ===SORRY!=== Error while compiling:

[18:43] <lizmat> Undeclared routine:

[18:43] <lizmat>     infix:<neq> used

[18:57] <deoac> my setup:

[18:57] <deoac> Welcome to Rakudo™ v2023.04.

[18:57] <deoac> Implementing the Raku® Programming Language v6.d.

[18:57] <deoac> Built on MoarVM version 2023.04.

[18:59] <lizmat> aahh.. oops, I missed the first line   

[19:00] <lizmat> yeah, that's a known REPL issue: some definitions do not carry over from one statement to the next in the REPL

[19:00] <lizmat> and actually, it's not the definition in this case, but the change in the grammar for the new infix op

[19:02] <lizmat> if you do: &infix:<neq>('a','b')   it will say True

[19:02] <lizmat> sorry for the misdirection... 

[19:24] *** thowe left
[21:38] <deoac> lizmat thank you

[21:41] <deoac> Is `\S` the same as `\w` ?  If not, what characters fail to match either one?

[22:12] <lizmat> <![\S \w]>  perhaps?

[23:42] <avuserow> `\S` is all non-space characters. `\w` is all "word" characters (roughly letters, numbers, underscore, plus unicode equivalents), so `\S` is a superset of what `\w` matches

