[00:05] *** ab5tract left
[01:01] *** Manifest0 left
[01:53] *** rf joined
[02:36] *** rf left
[02:38] *** discord-raku-bot left
[02:39] *** discord-raku-bot joined
[02:59] *** kjp left
[03:06] *** kjp joined
[05:33] *** Heptite left
[05:39] *** discord-raku-bot left
[05:39] *** discord-raku-bot joined
[05:46] *** discord-raku-bot left
[05:46] *** discord-raku-bot joined
[05:54] *** kjp left
[05:56] *** kjp joined
[06:39] *** discord-raku-bot left
[06:39] *** discord-raku-bot joined
[06:43] *** discord-raku-bot left
[06:44] *** discord-raku-bot joined
[06:48] *** discord-raku-bot left
[06:48] *** discord-raku-bot joined
[06:52] *** discord-raku-bot left
[06:53] *** discord-raku-bot joined
[08:39] *** discord-raku-bot left
[08:39] *** discord-raku-bot joined
[09:39] *** discord-raku-bot left
[09:39] *** discord-raku-bot joined
[10:36] *** Manifest0 joined
[10:39] *** discord-raku-bot left
[10:40] *** discord-raku-bot joined
[10:47] *** ab5tract joined
[11:12] *** ab5tract left
[11:20] *** ab5tract joined
[11:30] *** ab5tract left
[11:39] *** discord-raku-bot left
[11:40] *** discord-raku-bot joined
[11:58] *** ab5tract joined
[12:16] *** ab5tract left
[13:39] *** discord-raku-bot left
[13:39] *** discord-raku-bot joined
[13:48] *** ab5tract joined
[13:59] *** ab5tract left
[14:31] *** ab5tract joined
[15:17] *** ab5tract left
[15:40] *** discord-raku-bot left
[15:40] *** discord-raku-bot joined
[15:44] *** discord-raku-bot left
[15:45] *** discord-raku-bot joined
[15:55] *** rf joined
[16:20] *** ab5tract joined
[17:05] *** jgaz joined
[17:10] *** ab5tract left
[17:26] *** Heptite joined
[18:35] *** n1to joined
[18:44] <discord-raku-bot> <stevied> why does a `multi method new()` method get called with `Object.new(foo => 'buzz')`

[18:45] <discord-raku-bot> <Nahita> perhaps because of the %_

[18:45] <discord-raku-bot> <Nahita> a method takes arbitrary number of named parameters by default

[18:46] <discord-raku-bot> <Nahita> to ease inheritance stuff

[18:46] <discord-raku-bot> <stevied> huh, didn't know that. what is %_?

[18:47] <discord-raku-bot> <Nemokosch> Is it the only candidate that gets called?

[18:47] <discord-raku-bot> <stevied> no, I have other multi new method if that's what you mean

[18:48] <discord-raku-bot> <Nemokosch> Yes

[18:48] <discord-raku-bot> <Nahita> it gets the extra named parameters into itself in methods implicitly

[18:48] <discord-raku-bot> <Nahita> in normal subroutines it doesn't appear

[18:49] <discord-raku-bot> <stevied> ok, I see it here: https://docs.raku.org/language/functions#Automatic_signatures

[18:49] <discord-raku-bot> <Nahita> somewhat akin to @_ getting the positional arguments into itself *if* it's explicitly referred within the body of a routine

[18:49] <discord-raku-bot> <Nahita> well in Perl that's the only way of getting implicitly the parameters

[18:49] <discord-raku-bot> <Nahita> except they have introduced signatures recently... finally...

[18:50] <discord-raku-bot> <Nahita> well you know Perl better than me so

[18:50] <discord-raku-bot> <Nemokosch> Well, are they used though

[18:51] <discord-raku-bot> <stevied> so here's the new method I have:

[18:51] <discord-raku-bot> <stevied> ```

[18:51] <discord-raku-bot> <stevied> multi method new() {

[18:51] <discord-raku-bot> <stevied>     self.bless(dir => $*CWD);

[18:51] <discord-raku-bot> <stevied> }

[18:51] <discord-raku-bot> <stevied> ```

[18:51] <discord-raku-bot> <stevied> how do I catch if a bad named arg is passed?

[18:51] <discord-raku-bot> <Nemokosch> I'd say it's quite bizarre that named arguments can be discarded like that...

[18:52] <discord-raku-bot> <stevied> I gotta check %_ I guess?

[18:52] <discord-raku-bot> <Nahita> well you can explicitly check whether %_ is empty

[18:52] <discord-raku-bot> <Nahita> but there are 2 more ways actually

[18:52] <discord-raku-bot> <Nahita> one is marking the class as `is hidden`

[18:52] <discord-raku-bot> <Nahita> as mentioned, %_ exists for "interface consistency"

[18:52] <discord-raku-bot> <Nahita> like to redirect methods to parents in children

[18:53] <discord-raku-bot> <Nahita> with whatever args they passed

[18:53] <discord-raku-bot> <Nahita> with `class A is hidden { }`, you kill that redispatching mechanism

[18:53] <discord-raku-bot> <Nahita> depending on what's wanted, that might or might not be okay

[18:54] <discord-raku-bot> <Nahita> other solution is to do `*% ()` in the signature of the method

[18:54] <discord-raku-bot> <Nahita> that says "take *any* number of extra named parameters such that they are destructable to... well nothing!"

[18:54] <discord-raku-bot> <Nahita> so it will prevent any extra arguments if that makes sense

[18:55] <discord-raku-bot> <Nahita> maybe there are other ways idk

[18:55] <discord-raku-bot> <stevied> huh, interesting

[18:57] <discord-raku-bot> <Nahita> the % parameter is unnamed but it can be named like `*%a ()` but since the purpose of its existence there is something different, i.e., prevent extras, it might as well be unnamed to signal that

[18:57] <discord-raku-bot> <Nahita> and language fantastically allows unnamed parameters, so

[18:58] <discord-raku-bot> <stevied> so I got this:

[18:58] <discord-raku-bot> <stevied> ```

[18:58] <discord-raku-bot> <stevied> multi method new(*%) {

[18:58] <discord-raku-bot> <stevied>     self.bless(dir => $*CWD);

[18:58] <discord-raku-bot> <stevied> }

[18:58] <discord-raku-bot> <stevied> ```

[18:58] <discord-raku-bot> <stevied> that still allows me to do `new(zzz => 'fuzz')`

[18:58] <discord-raku-bot> <stevied> oh, wait, read your wrong

[19:00] <discord-raku-bot> <stevied> ok, works: `*% ()`

[19:00] <discord-raku-bot> <stevied> weird though. don't quite get it

[19:00] <discord-raku-bot> <Nemokosch> Tbh you would almost think this should be the default behavior...

[19:01] <discord-raku-bot> <Nahita> `*%` means: slurp *every* extra named parameter you can right?

[19:01] <discord-raku-bot> <Nahita> `*%h` means: slurp *every* extra named parameter you can right?

[19:01] <discord-raku-bot> <Nahita> like `*@a` means slurp every positional

[19:01] <lizmat> indeed

[19:01] <discord-raku-bot> <stevied> what is the `()` though?

[19:01] <lizmat> and that is always implicit in method signatures

[19:01] <discord-raku-bot> <Nemokosch> Perhaps if a missing signature weren't mistaken for an empty signature, the right thing would happen by default

[19:01] <discord-raku-bot> <Nahita> that's the destructuring part

[19:02] <discord-raku-bot> <Nahita> that's so cool actually

[19:02] <discord-raku-bot> <Nahita> it applies not only the hashes but arrays too

[19:03] <discord-raku-bot> <Nemokosch> <@563790557831495691> you pointed out the inconsistency accurately, by the way: a subsignature doesn't quite work like the signature itself

[19:03] <discord-raku-bot> <Nemokosch> I hope I have that issue somewhere...

[19:03] <discord-raku-bot> <Nahita> an example

[19:03] <discord-raku-bot> <Nahita> ```py

[19:03] <discord-raku-bot> <Nahita> >>> sub f(@arr ($first, *@rest)) { $first.say; @rest.elems.say }

[19:03] <discord-raku-bot> <Nahita> >>> f ["head", 10, 20, 30]

[19:03] <discord-raku-bot> <Nahita> head

[19:03] <discord-raku-bot> <Nahita> 3

[19:03] <discord-raku-bot> <Nahita> ```

[19:04] <discord-raku-bot> <Nahita> an example

[19:04] <discord-raku-bot> <Nahita> ```perl

[19:04] <discord-raku-bot> <Nahita> sub f(@arr ($first, *@rest)) {

[19:04] <discord-raku-bot> <Nahita>     $first.say;

[19:04] <discord-raku-bot> <Nahita>     @rest.elems.say

[19:04] <discord-raku-bot> <Nahita> }

[19:04] <discord-raku-bot> <Nahita> >>> f ["head", 10, 20, 30]

[19:04] <discord-raku-bot> <Nahita> head

[19:04] <discord-raku-bot> <Nahita> 3

[19:04] <discord-raku-bot> <Nahita> ```

[19:04] <discord-raku-bot> <Nahita> this is an "extension" of `sub f(@arr)` of writing things

[19:04] <discord-raku-bot> <Nahita> i'm expecting a positional allright

[19:04] <discord-raku-bot> <Nahita> and i also destructure it along the way for use in the subroutine

[19:05] <discord-raku-bot> <Nahita> $first and the *@rest

[19:05] <discord-raku-bot> <stevied> jesus, I got some more learning to do, I guess

[19:05] <discord-raku-bot> <Nahita> i can do `Int $first` there

[19:05] <discord-raku-bot> <Nahita> and all of a sudden i have a requirement that the passed array need its first element to be Integer

[19:05] <discord-raku-bot> <Nahita> so wrapping up with the *% ()

[19:06] <discord-raku-bot> <stevied> yeah, I see now

[19:06] <discord-raku-bot> <Nahita> i want everything, anything named to be captured

[19:06] <discord-raku-bot> <stevied> cool

[19:06] <discord-raku-bot> <Nahita> ok

[19:06] <discord-raku-bot> <stevied> the requriement is it's empty

[19:06] <discord-raku-bot> <Nahita> yeah :p

[19:06] <discord-raku-bot> <Nahita> everything and nothing

[19:07] <discord-raku-bot> <stevied> I didn't know about that "extension" syntax. probably read it, made no sense to me, so I forgot it

[19:08] <discord-raku-bot> <stevied> signatures in raku are GD insane compared to perl. never seen anything like it before. does any language do such similar gymnastics?

[19:16] *** Manifest0 left
[19:31] <discord-raku-bot> <Nemokosch> Oh right, I found the issue

[19:32] <discord-raku-bot> <Nemokosch> you can pass a pair to a function like a named argument, or like a positional argument

[19:32] <discord-raku-bot> <Nemokosch> so far so good

[19:32] <discord-raku-bot> <Nemokosch> how can you pass it like a positional argument, if you have a subsignature?

[19:32] <discord-raku-bot> <Nemokosch> and the pair should be a part of the subsignature

[19:46] *** n1to left
[19:47] *** n1to joined
[20:03] *** rf left
[20:03] *** rf joined
[21:11] *** Fam joined
[21:34] *** Fam left
[23:04] *** rf_ joined
[23:05] *** rf left
[23:30] *** n1to left
[23:36] *** rf_ left
