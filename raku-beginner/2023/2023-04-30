[00:31] *** Manifest0 left
[02:14] *** teatwo joined
[02:17] *** teatime left
[02:30] *** deoac left
[02:38] *** Heptite joined
[03:08] *** MasterDuke left
[03:52] *** deoac joined
[04:10] *** Heptite left
[04:34] *** deoac left
[07:43] *** habere-et-disper joined
[07:50] *** habere-et-disper left
[08:46] *** jaguart joined
[09:15] *** Manifest0 joined
[11:46] *** jaguart left
[14:12] *** Heptite joined
[14:18] <discord-raku-bot> <avuserow> This was the svn repo at the time, which made it even more remarkable in some ways. Everyone was committing to trunk, all the time.

[14:22] *** teatwo left
[14:22] *** teatwo joined
[14:35] <discord-raku-bot> <lucs> Ah, didn't remember that. It appeared like a crazily unsafe idea, but it worked out really well.

[14:48] <discord-raku-bot> <Nemokosch> but that's only going to fly if you aren't "in production"

[14:50] <discord-raku-bot> <Nemokosch> and I think much of the bitterness about Raku's current state and future comes from sloppy ideas that carelessly made it "into production" and now there are no mechanisms to do basically anything about it

[14:51] <discord-raku-bot> <Nemokosch> now we are stuck with the damage without the fun

[14:57] *** tea3po joined
[15:00] *** teatwo left
[15:27] *** tea3po left
[15:27] *** thowe left
[15:27] *** tea3po joined
[15:28] *** thowe joined
[15:37] <discord-raku-bot> <lucs> Well, I'm having fun anyway.

[15:41] <discord-raku-bot> <Nemokosch> I think one needs to avoid emotional involvement in order keep it have fun, and I'm working towards that goal, for one

[15:44] <discord-raku-bot> <lucs> One man's person's "sloppy" is another person's "we-have-a-limited-amount-of-resources-to-perfect-this-before-release".

[15:46] <discord-raku-bot> <Nemokosch> Let's take this somewhere else

[17:01] *** raiph joined
[17:36] *** habere-et-disper joined
[17:39] <habere-et-disper> How do you feel about this:

[17:39] <habere-et-disper> m: sub test { my $sum = 2+2; return sum }; test;

[17:39] <camelia> rakudo-moar eddff44ea: ( no output )

[17:39] <habere-et-disper> Perhaps we could get a warning if we choose a variable with the same name as a builtin?

[17:40] <habere-et-disper> m: sub test { my $sum = 123; return sum }; say test;

[17:40] <camelia> rakudo-moar eddff44ea: OUTPUT: «0␤»

[17:41] <discord-raku-bot> <lucs> You missed a '$' there...

[17:43] <habere-et-disper> Yes, and a warning could have helped ?

[17:43] <lucs_> Hmm... Maybe. Still:

[17:43] <lucs_> m: sub test { my $sum = 123; return $sum }; say test;

[17:43] <camelia> rakudo-moar eddff44ea: OUTPUT: «123␤»

[17:44] *** lucs_ is now known as lucs

[17:51] <lucs> habere-et-disper: Actually, ⌊return sum⌉ correctly returns 0. Are you suggesting that having named the variable ⌊$sum⌉ should have warned?

[17:52] <lucs> I misunderstood what you were talking about at first, because I thought 'test' was a builtin and 'sum' was not :-)

[17:53] <discord-raku-bot> <Nemokosch> the way I understand it, the use of sum where the variable $sum could have been used, should have warned maybe? it doesn't sound easy, though

[17:53] <habere-et-disper> lucs -- Yes, it feels like a namespace clash to me and could it feels like it could help the complete beginner ?

[17:54] <lucs> habere-et-disper: I see what you mean, but I kind of disagree. There is actually no clash because the namespaces are different, and who knows, every once in a while the "best" variable name in some context might happen to have a identically named builtin.

[17:55] <lucs> m: sub test { my \sum = 123; return sum }; say test;

[17:55] <camelia> rakudo-moar eddff44ea: OUTPUT: «123␤»

[17:56] <lucs> Unrecommended usage by the way :)

[18:04] <habere-et-disper> I think I have run into this issue before in other languages -- which is why I bring it up -- it feels like the complete beginner is not being helped sufficiently in this instance.

[18:04] <habere-et-disper> In Pascal I once had a routine named println or somesuch which was overriding the builtin without warning and so it took really long time for the beginner to discover the mistake without a warning.

[18:11] <habere-et-disper> It's more like:

[18:11] <habere-et-disper> m: sub sum ( $a, $b ) { my $sum = $a + $b; return $sum }; #`( and then a lot later ) say sum (1, 2, 3);

[18:11] <camelia> rakudo-moar eddff44ea: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in sub sum at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:11] <habere-et-disper> The latter sum confuses because you can't understand why the builtin sum can't take more than two arguments because you were unaware that you had overridden a builtin.

[18:25] <discord-raku-bot> <p6steve> I do not detect general bitterness, only some frustrated individuals who don't like various (well proven) language features - I am sad to see this kind of rant in the raku-beginner channel ... not very welcoming, is it?

[18:25] <discord-raku-bot> <Nemokosch> "say sum (1, 2, 3)" is problematic for multiple reasons anyway - that function has only one argument

[18:26] <discord-raku-bot> <Nemokosch> I think we went off when it was appropriate, and allow me to say that perhaps talking about what seemed like a good idea more than a decade ago as if it was relevant nowadays, is also not a healthy attitude...

[18:53] *** raiph left
[19:05] *** habere-et-disper left
[21:57] *** jaguart joined
[22:07] *** jaguart left
[23:01] *** habere-et-disper joined
[23:13] *** Manifest0 left
[23:52] *** jaguart joined
