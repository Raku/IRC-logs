[03:20] *** razetime joined
[03:46] *** yjh joined
[04:02] <discord-raku-bot> <.ohnowendigo> can I download the rakulang docs (guides + types + routines) as a pdf? I'm going on a 14 hour flight and want to be able to play around without internet

[05:07] *** razetime left
[05:15] *** razetime joined
[05:50] *** razetime left
[07:42] *** samebchase left
[07:43] *** samebchase joined
[07:45] *** samebchase left
[07:46] *** samebchase joined
[07:59] *** razetime joined
[08:04] <discord-raku-bot> <nemokosch> Not really, I don't think so

[08:05] <discord-raku-bot> <nemokosch> However, you could clone the repo of the site and then host it for yourself

[08:05] <discord-raku-bot> <nemokosch> It's not difficult

[08:06] <discord-raku-bot> <nemokosch> https://github.com/Raku/doc-website

[08:06] *** razetime left
[08:06] <discord-raku-bot> <nemokosch> Actually, I think there might be Docker images as well

[08:16] <discord-raku-bot> <nemokosch> Mehh, the Docker images don't seem to be public

[08:19] *** tea3po joined
[08:20] *** tea3po left
[08:20] *** tea3po joined
[08:21] *** tea3po left
[08:21] *** tea3po joined
[08:22] *** teatwo left
[08:22] *** tea3po left
[08:22] *** tea3po joined
[08:55] *** razetime joined
[10:46] <yjh> When trying to update a project (fez upload), I got an "Error processing: ???" email saying that there was an "Error reading META from your last upload".Â  Using Test::META to see what the problem is (raku -MTest -MTest::META -e "plan 1; meta-ok(); done-testing;") says I "don't have a META file" but raku -e "my \file = 'META6.json'.IO; say 'yes' if

[10:46] <yjh> file.defined and file.e" says I do.

[10:52] <discord-raku-bot> <nemokosch> well, to state facts, do you have a META6.json file or not?

[11:01] <discord-raku-bot> <nemokosch> oh, found it

[11:02] <discord-raku-bot> <nemokosch> Test::META has a rather bizarre default that basically assumes that your script is in a subdirectory of the distribution, like the t/ folder

[11:03] <discord-raku-bot> <nemokosch> you can circumvent that by defining e.g my $*DIST-DIR=".".IO; before invoking the tester sub

[11:05] <discord-raku-bot> <nemokosch> (by the way, I don't think the file variable could ever by undefined, the way you initialized it)

[11:05] <discord-raku-bot> <nemokosch> s / by / be

[12:32] *** razetime left
[13:08] *** razetime joined
[17:23] *** razetime left
[17:27] *** ab5tract left
[18:22] *** lucs left
[18:22] *** lucs joined
[18:23] <jgaz> So, if I have a hash with a numeric (base 16) key of, say, 0x09 I can look it up with %h<9> but not %h<0x09>. Is this intended behavior?

[18:26] <jgaz> It also yells at me if I use my %h = { 0x09 => 'foo' } instead of the := binding operator.

[18:34] <discord-raku-bot> <nemokosch> m: dd <0x09>

[18:34] <discord-raku-bot> <Raku eval>  IntStr.new(9, "0x09") 

[18:34] <discord-raku-bot> <lakmatiol> Is IntStr identity based on the string representation?

[18:34] <discord-raku-bot> <nemokosch> yet another downvote for Allomorphs, it seems

[18:35] <discord-raku-bot> <nemokosch> identity as in === ?

[18:35] <discord-raku-bot> <lakmatiol> Identity as in what hashes use

[18:35] <discord-raku-bot> <nemokosch> so basically ===

[18:35] <discord-raku-bot> <nemokosch> they both use .WHICH

[18:35] <discord-raku-bot> <lakmatiol> Yes, in that case that

[18:36] <discord-raku-bot> <nemokosch> m: <0x09>.WHICH.say

[18:36] <discord-raku-bot> <Raku eval>  IntStr|Int|9|Str|0x09 

[18:36] <discord-raku-bot> <nemokosch> it is NOT identical to 9, neither is it identical to "0x09"

[18:36] <discord-raku-bot> <nemokosch> but a bare hash doesn't care about identity

[18:36] <discord-raku-bot> <nemokosch> a bare hash uses Str coercion

[18:36] <discord-raku-bot> <lakmatiol> Ah yeah, that'd do it

[18:37] <discord-raku-bot> <nemokosch> ... which is also wrong because 0x09 will coerce to "9"

[18:37] <jgaz> okay, yeah, I follow

[18:37] <discord-raku-bot> <nemokosch> and <0x09> will coerce to, well, "0x09"

[18:37] <jgaz> So, I can define it as 0x09 but I better be passing in Int 9?

[18:38] <discord-raku-bot> <lakmatiol> You should be able to do %h{0x09} if I have the semantics right

[18:38] <discord-raku-bot> <nemokosch> you can write %hash{0x09}

[18:38] <discord-raku-bot> <lakmatiol> Nice

[18:38] <jgaz> okay, thanks. In this case it's all about readability.

[18:45] <discord-raku-bot> <nemokosch> yeah you see, 0x09 is a number while <0x09> is sometimes a number, sometimes a string

[18:45] <discord-raku-bot> <nemokosch> honestly I haven't met anyone lately who explicitly expressed a liking to this feature, allomorphs that is

[18:51] <jgaz> I wonder if there is a way to alter the lookup behavior so that 0x09 gets coerced to an Int.

[18:51] <jgaz> I'm just thinking out loud.

[18:53] <discord-raku-bot> <nemokosch> I wouldn't be optimistic with the "postcircumfix <>" syntax because that's just sugar really

[19:25] <jgaz> yeah, ahh well... thanks folks.

[20:28] <discord-raku-bot> <librasteve> allomorphs are great - they neatly embody the Stringy / Numeric flexibility from perl within the raku object model

[20:28] <discord-raku-bot> <librasteve> https://wordpress.com/post/rakujourney.wordpress.com/856

[20:31] <jgaz> They just bite you sometimes :)

[20:38] <discord-raku-bot> <nemokosch> there are two problems in one place

[20:39] <discord-raku-bot> <nemokosch> 1. the diamond inheritance, i.e you can have something that "is a string" but sometimes acts like, say, a number

[20:42] <discord-raku-bot> <nemokosch> 2. overall, deriving from Int and Str doesn't seem to be such a great idea. These types are value types that have their own literals. We have a lot of assumptions about what "a string" or "an integer" or "a boolean" etc. is, and the mental cost of breaking these assumptions seems so costly that it's hard to justify

[20:43] <discord-raku-bot> <nemokosch> for example, if you have "an integer", you want to assume that doing a numeric comparison is an identity check; after all, numerics are value types, and there is no reason to convert "an integer" to become a number

[20:49] *** sjn left
[20:49] *** sjn joined
[20:53] *** teatwo joined
[20:56] *** tea3po left
[20:56] *** teatwo left
[20:57] *** teatwo joined
[21:19] *** jgaz left
[22:08] *** lizmat_ joined
[22:12] *** lizmat left
[22:13] *** hythm joined
[22:21] <hythm> re: "... If there is a way to alter the lookup behavior..", may overlode the AT-KEY method. Not tested but something like this: `role R { multi method AT-KEY (Int(IntStr) $key) {samewith $key}}; my %h does R`

[22:30] *** hythm left
