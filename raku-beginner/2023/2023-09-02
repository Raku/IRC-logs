[00:34] <discord-raku-bot> <nemokosch> yeah, I don't think that would work

[00:38] <discord-raku-bot> <nemokosch> there are two possible interpretations of a coercion. What does "coerce to T" mean in the context of a type that is derived from T?

[00:38] <discord-raku-bot> <nemokosch> According to one interpretation (I'd say this is the common interpretation in the OO world, in accordance with the Liskov Substitution Principle), it should be an identity, since the source type itself is a kind of T

[00:40] <discord-raku-bot> <nemokosch> According to another interpretation (this is the more common interpretation in Raku), a restricted instance should be retrieved; one that looks like T dynamically as well, the additional data erased from it

[00:42] <discord-raku-bot> <nemokosch> while coercion methods work like this, coercive types actually work like the former way - "an IntStr is always an Int, so no coercion is necessary", says the resolution

[00:44] <discord-raku-bot> <nemokosch> the shock comes when you learn that the subroutine-looking cast also works like this, and unlike the method-looking cast

[00:46] <discord-raku-bot> <nemokosch> m: say 'An allomorph Int being the same as a bare Int is ', <95> === 95; say 'An allomorph Int being the same as its Int(...) coercion is ', Int(<95>) === <95>; say 'An allomorph Int being the same as its .Int coercion is ', <95>.Int === <95>;

[00:46] <discord-raku-bot> <Raku eval>  An allomorph Int being the same as a bare Int is False An allomorph Int being the same as its Int(...) coercion is True An allomorph Int being the same as its .Int coercion is False 

[00:47] <discord-raku-bot> <nemokosch> m: say 'IntStr.Int being the same as the underlying Int value is', <95>.Int === 95;

[00:47] <discord-raku-bot> <Raku eval>  IntStr.Int being the same as the underlying Int value isTrue 

[01:37] *** deoac joined
[03:08] *** deoac left
[04:12] *** razetime joined
[05:28] *** siavash joined
[05:34] *** siavash left
[05:52] *** siavash joined
[07:29] *** siavash left
[08:38] *** lizmat_ left
[08:38] *** lizmat joined
[08:39] *** teatwo left
[08:39] *** teatwo joined
[09:50] <discord-raku-bot> <librasteve> crag-of-the-day  crag '$x = <௪௨>, say "$x is Tamil for {+$x}." '  #௪௨ is Tamil for 42.

[09:53] <discord-raku-bot> <librasteve> ^ the allomorph is a great way to maintain the original Str definition alongside the value so that you can do Stringy and Numeric operations without losing the connection - this is neat for western languages where values may be normalized <2/20 10e3>

[09:54] <discord-raku-bot> <librasteve> it is even more helpful where you are dealing with unicode digits

[09:55] <discord-raku-bot> <nemokosch> You can achieve that by simply storing a string because Raku is a weakly typed language with very aggressive numeric coercion

[09:59] <discord-raku-bot> <librasteve> but that will fail any type checking $x ~~ Int

[09:59] <discord-raku-bot> <nemokosch> And that is a very good thing

[09:59] <discord-raku-bot> <nemokosch> That's a feature

[10:02] <discord-raku-bot> <librasteve> it may be if this was Java

[10:02] <discord-raku-bot> <nemokosch> a value that isn't identical to any of the integer literals is better to not come off as Int

[10:03] <discord-raku-bot> <librasteve> you are confusing identity with type

[10:03] <discord-raku-bot> <nemokosch> again, that should be a good thing, a feature

[10:03] <discord-raku-bot> <nemokosch> really, take the example that highlighted the whole topic this time, with <0x09>

[10:04] <discord-raku-bot> <nemokosch> what does it bring to the table that "it is an Int", if in no hash-alike data structure will it behave like an actual concrete integer?

[10:05] <discord-raku-bot> <nemokosch> because neither its identity, nor its string form matches any of the integers

[10:06] <discord-raku-bot> <nemokosch> so not only do you have to awkwardly coerce it into Int but its recognition as Int will actively get in the way!

[10:06] *** ab5tract joined
[10:06] <discord-raku-bot> <nemokosch> you don't get warned about it if you use gradual types and it won't get coerced if you use a coercive type annotation

[10:07] <discord-raku-bot> <nemokosch> for all practical purposes, it wasn't more an Int than any Str would be that holds a numeric value, except its much harder to even extract the value

[10:09] <discord-raku-bot> <lakmatiol> This is absolutely horrifying, I must say  > my %h{Int} = <1> => 1, <0x1> => 2 {0x1 => 2, 1 => 1} 

[10:10] <discord-raku-bot> <nemokosch> and then you could write 1 => 3 as well and that would be a third entry

[10:11] <discord-raku-bot> <lakmatiol> ah, good point

[10:11] <discord-raku-bot> <lakmatiol> IG the conclusion is don't put allomorphs into hashes, and stick to postcircumfix <> as just being a syntax for accessing string keys

[10:12] <discord-raku-bot> <nemokosch> maybe I should start adding disclaimers which topics bit me personally

[10:12] <discord-raku-bot> <nemokosch> the allomorph topic bit me twice: once with the hash-alikes (it was a set iirc), and once with the boolean check

[10:13] <discord-raku-bot> <nemokosch> because that's also quite the unfeature that you get a data type from prompt that is literally unsafe to perform a boolean check on

[10:15] <discord-raku-bot> <nemokosch> because the semantics(!) of the boolean check will depend on the input

[10:16] <discord-raku-bot> <lakmatiol>  > dd so prompt 000e15687 Bool::False Nil well, this is certainly interesting

[10:17] <discord-raku-bot> <nemokosch> yes... an arbitrarily long input can generate a boolean False value, and I'm wondering: who wants this behavior at all, let alone as the default?

[10:20] <discord-raku-bot> <nemokosch> I'm still asking: do you have ideas what practical purpose allomorphs achieve? I could only think of one - exposing the OO interface of multiple types at once (the procedural interface is exposed by coercions)

[10:22] <discord-raku-bot> <lakmatiol> they do pass both typechecks, which may be valuable if typechecking is a common thing to do, which it is seeing as the language has a bunch of syntax sugar to insert type checking sugar in many places.

[10:22] <discord-raku-bot> <nemokosch> so far it seems that's actually the worst thing about it, though

[10:22] <discord-raku-bot> <nemokosch> that it claims to be something and fails to deliver the minimal promises of that type

[10:23] <discord-raku-bot> <lakmatiol> well, the other option is that a string that looks like a number is only occasionally a number

[10:23] <discord-raku-bot> <nemokosch> is this about the OO interface again?

[10:28] <discord-raku-bot> <nemokosch> by the way, your <1>, <0x01> example is a good one; identity is problematic even among other allomorphs

[10:34] <discord-raku-bot> <lakmatiol> the simplest example I can come up with is  my $a = prompt; my $b = prompt; dd ($a + $b); This works fine, + coerces the Str/IntStr prompt provides. Now I want to do a more complicated computation, so I make myself a helper function  sub do-math(Int $a, Int $b) {     $a  * $a + $b + $b } my $a = prompt; my $b = prompt; dd do-math($a, $b); This now requires an allomorph to work. But well, you can just use

[10:34] <discord-raku-bot> Int() instead. Even in a typecheck, I can just do "5345" ~~ Int() and have it work correctly. But I could see a case where you don't want coercion, but do want to pass IntStr

[10:34] <discord-raku-bot> <lakmatiol> I am quite interested in an example where using Str and Int() doesn't do the exact same job an allomorph does

[10:34] <discord-raku-bot> <nemokosch> (sidenote: currently, smartmatches to Type() seem to be broken)

[10:35] <discord-raku-bot> <nemokosch> not sure if I reported it yet, it has been like this for a surprisingly long time

[10:35] <discord-raku-bot> <lakmatiol> it is possible, I ran one example and had it pass, so I didn't think on it further.

[10:35] <discord-raku-bot> <lakmatiol> ah yeah, nvm

[10:35] <discord-raku-bot> <nemokosch> m: say 'almafa' ~~ Int()

[10:35] <discord-raku-bot> <lakmatiol> you need allomorphs

[10:35] <discord-raku-bot> <Raku eval>  True 

[10:35] <discord-raku-bot> <lakmatiol> it does make sense-ish that it behaves like this

[10:35] <discord-raku-bot> <lakmatiol> its just not useful

[10:36] <discord-raku-bot> <nemokosch> how does it make sense?

[10:36] <discord-raku-bot> <nemokosch> I mean, I'm fairly confident this is a bug but still curious

[10:36] <discord-raku-bot> <lakmatiol> well, ~~ checks if the lhs can fit into the type on the rhs, e.g. this fails perl > (:1st) ~~ Int(Str) False 

[10:37] <discord-raku-bot> <lakmatiol> and well, a Str can bind to an Int(), it may just error out in the conversion

[10:38] <discord-raku-bot> <nemokosch> huh

[10:38] <discord-raku-bot> <nemokosch> I can only hope that this idea is not prevalent, to be honest 😅

[10:38] <discord-raku-bot> <nemokosch> it seems very harmful

[10:39] <discord-raku-bot> <lakmatiol> anyway, IG I have my answer, you need an allomorph to avoid the python-like py try:     v = int(value) except ValueError:     print('didn't pass an int') else:     print('got an int', v) 

[10:39] <discord-raku-bot> <nemokosch> no you don't: coercion signatures actually work, apart from smartmatching

[10:40] <discord-raku-bot> <lakmatiol> an IntStr lets you just ~~ Int to check if this random string you found fits into an Int

[10:40] <discord-raku-bot> <nemokosch> and smartmatching also worked until like 3 years ago

[10:41] <discord-raku-bot> <lakmatiol> well, if smartmatching actually did the failing the coercion means false thing, an allomorph would be less useful

[10:41] <discord-raku-bot> <nemokosch> it used to, until, let me look it up

[10:42] <discord-raku-bot> <nemokosch> https://github.com/rakudo/rakudo/commit/f2d73287f95ad6fa9eba8856ad15f3e8f9076d6e

[10:42] <discord-raku-bot> <nemokosch> until this commit

[10:43] <discord-raku-bot> <nemokosch> by the way, it's not uncommon for Raku to coerce failures into False in a bool context

[10:43] <discord-raku-bot> <nemokosch> so even along that line of reasoning, it should rather be False

[10:43] <discord-raku-bot> <nemokosch> m: say 'almafa' ~~ *.Int

[10:43] <discord-raku-bot> <Raku eval>  False 

[10:43] <discord-raku-bot> <nemokosch> dang

[10:44] <discord-raku-bot> <lakmatiol> consider something like  given $tok {     when Int { return .Int }     when * \in keywords {return keyword-cb{$_}($ctx)}     default {return env{$_}} }here an allomorph $tok would work ince

[10:44] <discord-raku-bot> <lakmatiol> but well, there are other ways to do it too

[10:44] <discord-raku-bot> <lakmatiol> ones which don't involve breaking hash identity is confusing ways

[10:44] <discord-raku-bot> <lakmatiol> raku doesn't have a numeric hash like python does

[10:45] <discord-raku-bot> <lakmatiol> so IG expecting heterogenous numeric hash keys to do anything useful at all is foolish

[10:45] <discord-raku-bot> <nemokosch> also, I think it's quite yucky to ever have to write when Int { return .Int }

[10:45] <discord-raku-bot> <nemokosch> why coerce it if it is an Int

[10:46] <discord-raku-bot> <lakmatiol> well, that's the OO magic of not having a numeric hash - a subtype of Int is not an Int

[10:47] <discord-raku-bot> <nemokosch> the paradoxical nature of this statement exposes some fundamental problems

[10:47] <discord-raku-bot> <lakmatiol> not breaking the LSP with numeric subtypes is really really difficult

[10:47] <discord-raku-bot> <lakmatiol> and lets not pretend raku doesn't shatter the LSP in other cases as well

[10:47] <discord-raku-bot> <nemokosch> numeric subtypes probably weren't a good idea at all

[10:47] <discord-raku-bot> <nemokosch> but you are right, there is List and Array

[10:47] <discord-raku-bot> <lakmatiol> having custom numeric types is a useful thing

[10:47] <discord-raku-bot> <nemokosch> (and that also wasn't a good idea)

[10:48] <discord-raku-bot> <nemokosch> custom numeric types =/= extending existing numbers that pretend to be an existing type

[10:48] <discord-raku-bot> <lakmatiol> doing custom numeric types without a numeric hash means you just run into the issues of heterogenous collections of numbers in vastly more cases than in python

[10:49] <discord-raku-bot> <nemokosch> by the way, about "numeric hash" - it's an implementation detail what hashing "object hashes" use so it is for all intents and purposes a numeric hash

[10:49] <discord-raku-bot> <nemokosch> Python could choke exactly as much with numeric hashing if it derived from int

[10:49] <discord-raku-bot> <nemokosch> it's the identity that is the problem, not the hashing

[10:50] <discord-raku-bot> <lakmatiol> python specifies a very specific way of hashing for numbers that are equal to an integer or a float

[10:50] <discord-raku-bot> <nemokosch> it would be trivial to model a numeric hash as a string

[10:51] <discord-raku-bot> <lakmatiol> which is why {1.0, 1, Fraction(1, 1), True, Decimal(1.0)} is a one element set in python, but (1,1.0).Set is a two element set in raku

[10:52] <discord-raku-bot> <nemokosch> you may think whether that's a good feature or not, honestly

[10:52] <discord-raku-bot> <nemokosch> I don't think it's bad at all that 1 and 1.0 don't hash the same

[10:53] <discord-raku-bot> <nemokosch> it is a bad thing that something that is an Int, and is equal to 1, doesn't hash the same as 1 itself

[10:53] <discord-raku-bot> <nemokosch> 1.0 never claimed to be the same

[10:54] <discord-raku-bot> <lakmatiol>  > True == 1 True > True ~~ Int True > (True, 1).Set Set(1 True) 

[10:54] <discord-raku-bot> <nemokosch> yes, that's also a problem

[10:55] <discord-raku-bot> <nemokosch> the weakest link might be True ~~ Int there

[10:55] <discord-raku-bot> <nemokosch> (enum ~~ Int in general)

[10:55] <discord-raku-bot> <nemokosch> it's really worrying that you can constructively generate contradictions in Raku

[10:58] <discord-raku-bot> <nemokosch> and again, it begs the question: why? what practical purpose does it serve?

[11:06] <discord-raku-bot> <lakmatiol> well, raku as a language loves is a checks, even has a whole syntax sugar around them. I do not think it is surprising to find a lot of types are something just because they are "duck typing" compatible with the type. In python, thanks to the numeric tower, you don't run into this with ints, but you do run into this with mappings. If you have a public library function that takes an argument that is either a

[11:06] <discord-raku-bot> dict or a string (e.g. 'fast' vs. { 'threshhold': 5, 'steps_per_t': 10 } ), 70% of the time you cannot use a Mapping there, since the library author just did isinstance(a, dict) and did not think on it further. Which is how you find dict subclasses in the wild that do not ever actually delegate to super and have their own internal storage, using the dict supertype just to pass type checks (these days there is

[11:06] <discord-raku-bot> instancecheck, which does slightly help).

[11:08] <discord-raku-bot> <nemokosch> I don't think making out a type to be something it isn't would work well in any typing system

[11:08] <discord-raku-bot> <nemokosch> especially for types that are predominantly used for their value, NOT their interface

[11:09] <discord-raku-bot> <lakmatiol> well, the alternative is a significant part of the language just... not being polymorphic

[11:10] <discord-raku-bot> <lakmatiol> which is very much not a perly thing to do

[11:10] <discord-raku-bot> <nemokosch> for a complex stateful data structure, "I am what I do" may make sense, not for primitive values though

[11:11] <discord-raku-bot> <nemokosch> other than that, the weird thing is that it's not really in accordance with Raku's broader design to do things based on what you are

[11:11] <discord-raku-bot> <nemokosch> operations are provided by coercions

[11:11] <discord-raku-bot> <lakmatiol> I would argue having nominative type checks is not inline with that design, and yet it is like half the language.

[11:12] <discord-raku-bot> <nemokosch> what does that mean?

[11:12] <discord-raku-bot> <lakmatiol> sub(Cls $x, Cls $y) is very much a case of I am Cls, and thus I can do things

[11:12] <discord-raku-bot> <lakmatiol> and the language is full of this syntax for those kinds of checks

[11:12] <discord-raku-bot> <nemokosch> but you better write it as Cls() if you want to support it for something else

[11:13] <discord-raku-bot> <lakmatiol> so of course a lot of the language needs to do inheritance to work with those checks

[11:13] <discord-raku-bot> <nemokosch> and out of the two approaches, this is way more prevalent for fundamental types

[11:13] <discord-raku-bot> <nemokosch> this is actually the big difference compared to Python

[11:13] <discord-raku-bot> <nemokosch> this is what "weak typing" is about

[11:14] <discord-raku-bot> <lakmatiol> It is more noticable for Int, but there are real uses for polymorphic math functions, and thus raku needs to do all this weirdness with making int subtypes actually be a usable thing

[11:14] <discord-raku-bot> <lakmatiol> Rust doesn't let you make an Int subtype

[11:14] <discord-raku-bot> <nemokosch> you do not support an operation for Ints by becoming an Int yourself but by providing a way to coerce to Int

[11:14] <discord-raku-bot> <lakmatiol> ye, but that is inadequate

[11:15] <discord-raku-bot> <nemokosch> it is adequate for essential types

[11:15] <discord-raku-bot> <nemokosch> and for essential types, it shouldn't be mixed with anything else

[11:15] <discord-raku-bot> <lakmatiol> 99% of the time, I need a custom a+b to provide my own type

[11:15] <discord-raku-bot> <lakmatiol> not an Int that I then coerce back

[11:15] <discord-raku-bot> <nemokosch> just really please don't overload + in Raku

[11:16] <discord-raku-bot> <nemokosch> don't overload an operator that is already dedicated to coercions

[11:16] <discord-raku-bot> <lakmatiol> yeah, I am starting to see why the guy trying to do Rings in raku failed

[11:16] <discord-raku-bot> <lakmatiol> which raises the question of what custom numeric type can I even make that will work.

[11:16] <discord-raku-bot> <nemokosch> the question is really what even qualifies as a numeric type

[11:17] <discord-raku-bot> <nemokosch> a tensor surely isn't, for example

[11:17] <discord-raku-bot> <lakmatiol> well, no, it isn't ordered

[11:18] <discord-raku-bot> <nemokosch> Complex numbers also aren't

[11:18] <lizmat> m: class A { method value() { 42 } }; multi sub infix:<+>(A:D $a, A:D $b) { $a.value + $b.value }; say A.new + A.new

[11:18] <discord-raku-bot> <nemokosch> I have been thinking a lot about weak typing, to be honest

[11:18] <camelia> rakudo-moar c82791b0b: OUTPUT: «84␤»

[11:18] <lizmat> what's so difficult adding custom infix ops?

[11:19] <discord-raku-bot> <nemokosch> weak typing is really good as long as you do operations on a couple of mutually known types

[11:19] <discord-raku-bot> <nemokosch> if you want to extend the type system, suddenly its strengths turn into weaknesses

[11:19] <lizmat> example?

[11:20] <discord-raku-bot> <lakmatiol> yeah, this may be a haskell situation where you should just give up on reusing the builtin stuff (yes, + is Num, but there aren't all that many custom Num things), and should write a new operator

[11:20] <discord-raku-bot> <nemokosch> the premise of weak typing is that operations drive the data types

[11:20] <discord-raku-bot> <nemokosch> the premise of strong typing is that data types drive the operations

[11:20] <lizmat> m: class A { method Numeric() { 42 } }; say A.new + A.new

[11:20] <camelia> rakudo-moar c82791b0b: OUTPUT: «84␤»

[11:21] <discord-raku-bot> <nemokosch> the question is what you do more often: define new operations on existing data types (good fit for weak typing) or define new data types with existing operations (good fit for strong typing)

[11:23] <lizmat> m: say Date.today + 9

[11:23] <camelia> rakudo-moar c82791b0b: OUTPUT: «2023-09-11␤»

[11:24] <discord-raku-bot> <nemokosch> in Raku, if you expose a new operation that can deal with a well-known data type, everybody is happy because as long as they have meaningful coercions to the base type, their code will not only work with your operation but that code will have quite strong typing guarantees

[11:24] <discord-raku-bot> <lakmatiol> most new types I write are not isomorphic to an existing type

[11:25] <discord-raku-bot> <nemokosch> if nobody overloaded +, for example, whenever you encountered $a + $b, you would both know that $a and $b need to be coercable to Numeric, and that the return value will also be a Numeric

[11:25] <discord-raku-bot> <nemokosch> that is an underrated feat

[11:26] <discord-raku-bot> <nemokosch> however, if all you ever wanted is to add a brand new type and perform operations on that, you will have a harder time to provide an interface

[11:26] <discord-raku-bot> <lakmatiol> I do feel like the quadratic nature of weak typing (N types have N*N coercions) makes it really hard to write a lot of code without just going back to the java-style nominative checks

[11:26] <discord-raku-bot> <nemokosch> I think this is why eqv, before, after, cmp operators exist

[11:27] <discord-raku-bot> <nemokosch> weak typing is not extensible on types

[11:28] <discord-raku-bot> <nemokosch> ironically, coercions themselves depend on strong typing and polymorphism

[11:28] <discord-raku-bot> <nemokosch> strong typing can work without weak typing but not vice versa, at least in an OO environment

[11:29] <discord-raku-bot> <nemokosch> however, if we just started to overload + back and forth, we would get the worst of both world

[11:29] <discord-raku-bot> <nemokosch> s

[11:30] <discord-raku-bot> <nemokosch> depending on the nominative type, sometimes it would coerce, sometimes it wouldn't

[11:32] <discord-raku-bot> <nemokosch> the way I understand it, div and mod are also relics of "generic math operations"

[11:32] <discord-raku-bot> <nemokosch> except they "switched sides" at one point, long before the release

[11:35] <discord-raku-bot> <nemokosch> by the way, as much as weak typing is not extensible on types, of course strong typing is not extensible on operations, take a look at Python's magic methods

[11:40] <discord-raku-bot> <lakmatiol> yeah, that's where things like typeclasses and whatever julia is doing come into play, which are extensible on both (with some caveats)

[11:43] <discord-raku-bot> <nemokosch> I have weird feelings about weak typing overall... I think it's often misunderstood and more frowned upon than it actually deserves. After all, with a coercive op, $a op $b conveys way more information than it would with a generic op. But at the same time, I'm not sure it's genuinely worth it, due to the extensibility concerns

[11:44] *** razetime left
[11:44] <discord-raku-bot> <nemokosch> I can see why somebody who mostly uses shell scripting would think that weak types are both efficient and robust

[11:50] *** razetime joined
[12:54] *** razetime left
[14:00] <yjh> Hello.  Is the markdown flavor that modules.raku.org uses posted somewhere?  The README.md for the module I submitted displays fine on github and raku land but is mangled on modules.raku.org.

[14:08] <discord-raku-bot> <antononcube> @yjh I understand your concern. I inclined to think that the Markdown on raku.land it is not mangled but rather not fully rendered.

[14:12] *** razetime joined
[14:54] *** jgaz joined
[15:22] <discord-raku-bot> <nemokosch> yes, I think it's not an actual flavor

[16:07] *** razetime left
[16:36] *** jgaz left
[20:20] *** tea3po joined
[20:21] *** tea3po left
[20:21] *** tea3po joined
[20:22] *** tea3po left
[20:23] *** tea3po joined
[20:23] *** teatwo left
[23:38] *** sivoais left
[23:38] *** sivoais joined
