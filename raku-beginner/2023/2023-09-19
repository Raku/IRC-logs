[00:05] *** NemokoschKiwi joined
[00:07] *** NemokoschKiwi left
[00:36] *** Manifest0 left
[04:57] *** tbrowder__ left
[04:57] *** tbrowder__ joined
[07:39] *** Manifest0 joined
[07:58] *** dakkar joined
[08:22] *** teatwo joined
[08:25] *** teatime left
[16:25] *** swaggboi joined
[16:36] *** dakkar left
[17:19] <discord-raku-bot> <librasteve> on sigils, the story is $ is a container for any type of thing - Int, Str, List, Array, Hash, Map, Bag, your custom class and so on - @ is a special sigil for Array that brings in (the confusingly named) list assignment and works with Array literals - % is a special sigil for Hash that brings in list assignment and works with Hash literals

[17:23] <discord-raku-bot> <librasteve> this typegraph https://docs.raku.org/type/Iterable#typegraphrelations is a handy way to see how Array and Hash are assembled from classes and roles so they are the most functionally rich - I guess the raku design concept was to take the perl notions of @array and %hash and to reconstruct from more pure classes and roles

[18:05] <discord-raku-bot> <librasteve> crag-of-the-week crag '"#ffffff".subst("#").comb(/(..)/).map({:16($_)}).say'

[18:05] <discord-raku-bot> <librasteve> #(255 255 255)

[18:16] <discord-raku-bot> <librasteve> ^^ this is an atypical "crag" in that it does not use Physics::Measure objects .(eg. dimensions and units of measure and so on) ... but I felt that any command line calculator based on raku should be able to help me do colour math for CSS (having said that I think that there is a gap for a new module that does color math in a more concise way)

[18:19] <lizmat> m: '"#ffffff".substr(1).comb(2).map({:16($_)}).say

[18:19] <camelia> rakudo-moar f1c6261c4: OUTPUT: «===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> ff".substr(1).comb(2).map({:16($_)}).say⏏<EOL>␤    expecting …»

[18:19] <lizmat> m: "#ffffff".substr(1).comb(2).map({:16($_)}).say

[18:19] <camelia> rakudo-moar f1c6261c4: OUTPUT: «(255 255 255)␤»

[18:21] <discord-raku-bot> <nemokosch> @symbol can default to Lists, like in the case of constants

[18:21] <discord-raku-bot> <nemokosch> same with %symbols and Maps

[20:00] *** cleo left
[20:01] *** cleo joined
[20:17] <discord-raku-bot> <librasteve> m: my @a = (1,2); say @a.WHAT

[20:17] <discord-raku-bot> <Raku eval>  (Array) 

[20:18] <discord-raku-bot> <librasteve> m: my %h = (a=>1,b=>2).Map; say %h.WHAT

[20:18] <discord-raku-bot> <Raku eval>  (Hash) 

[20:19] <discord-raku-bot> <librasteve> sure it may be possible to force @ to List and % to Map - but that would be pretty unusual

[20:19] <discord-raku-bot> <nemokosch> m: constant @a = (1,2); say @a.WHAT

[20:19] <discord-raku-bot> <Raku eval>  (List) 

[20:20] <discord-raku-bot> <nemokosch> depends on what you count unusual

[20:20] <discord-raku-bot> <librasteve> well a constant is not a variable - so i count that as unusual

[20:21] <discord-raku-bot> <nemokosch> by a similar reasoning, @symbols are by definition unusual

[20:21] <discord-raku-bot> <librasteve> bollocks

[20:21] <discord-raku-bot> <nemokosch> because they don't have containers

[20:21] <discord-raku-bot> <librasteve> double bollocks

[20:21] <discord-raku-bot> <librasteve> ttfn

[20:22] <discord-raku-bot> <antononcube> @librasteve  So, four all together?

[20:22] *** tea3po joined
[20:22] <discord-raku-bot> <nemokosch> I would say the ratio of "unusualness" is similar for constants among symbols and containerless, "fake" variables among all variables

[20:25] *** teatwo left
[20:27] *** tea3po left
[20:28] *** tea3po joined
[20:29] *** tea3po left
[20:29] *** tea3po joined
[20:54] *** tea3po left
[20:55] *** tea3po joined
[21:09] <gfldex> m: constant @lolwut = [1,2]; @lolwut[3] = 42; say „@lolwut[]‼“;

[21:09] <camelia> rakudo-moar f1c6261c4: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤1 2  42‼␤  in block <unit> at <tmp> line 1␤»

[21:10] <gfldex> @librasteve Please note that the declarator ‘constant’ does not create constants.

[21:12] <discord-raku-bot> <nemokosch> it's actually crazy how true that is, huh

[21:13] <discord-raku-bot> <nemokosch> m: constant @lolwut = [1,2]; @lolwut = 1; @lolwut.say

[21:13] <discord-raku-bot> <Raku eval>  [1] 

[21:13] <discord-raku-bot> <nemokosch> even assignment can work on it

[21:14] <discord-raku-bot> <nemokosch> m: constant @a = 1,2; say @a.WHAT

[21:14] <discord-raku-bot> <Raku eval>  (List) 

[21:14] <discord-raku-bot> <nemokosch> hmm

[21:15] <discord-raku-bot> <nemokosch> so does binding have low precedence or is it also split into two precedence groups? 🤔

[21:16] <discord-raku-bot> <nemokosch> because pretty sure constants are set up with binding

[21:16] <lizmat> m: my constant %h = a => 42; dd %h.^name

[21:16] <camelia> rakudo-moar f1c6261c4: OUTPUT: «"Pair"␤»

[21:16] <lizmat> m: my constant %h = a => 42, b => 666; dd %h.^name

[21:16] <camelia> rakudo-moar f1c6261c4: OUTPUT: «"Map"␤»

[21:16] <lizmat> m: my constant %h = { a => 42, b => 666 }; dd %h.^name

[21:16] <camelia> rakudo-moar f1c6261c4: OUTPUT: «"Hash"␤»

[21:17] <discord-raku-bot> <nemokosch> well. Can a constant be unassigned? Does it even make sense to talk about a "default value" here?

[21:17] <discord-raku-bot> <nemokosch> m: constant @x;

[21:17] <discord-raku-bot> <Raku eval>  Exit code: 1 ===SORRY!=== Error while compiling /home/glot/main.raku Missing initializer on constant declaration at /home/glot/main.raku:1 ------> constant @x⏏; 

[21:17] <discord-raku-bot> <nemokosch> perhaps not

[21:17] <lizmat> the problem is that with "my constant @a = [1,2,3]"

[21:18] <lizmat> you're binding an array at compile time

[21:18] <lizmat> with: my constant @a = 1,2,3

[21:18] <lizmat> you would be initializing a List at compile time

[21:18] <lizmat> m: my constant @a = 1,2,3; dd @a.^name

[21:18] <camelia> rakudo-moar f1c6261c4: OUTPUT: «"List"␤»

[21:19] <lizmat> both have their uses

[21:19] <gfldex> `constant` exists so we can avoid creating Scalar containers with $-sigiled symbols (without using term:<>).

[21:20] <discord-raku-bot> <nemokosch> isn't that what bindings achieve by default?

[21:20] <lizmat> afk again&

[21:20] <discord-raku-bot> <nemokosch> anyway, this was surprising:

[21:20] <discord-raku-bot> <nemokosch> m: my $true-list := 1, 2, 3; dd $true-list

[21:20] <discord-raku-bot> <Raku eval>  (1, 2, 3) 

[21:21] <discord-raku-bot> <nemokosch> it actually has this low precedence level

[23:40] *** Manifest0 left
