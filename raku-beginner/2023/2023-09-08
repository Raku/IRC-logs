[00:25] *** deoac left
[06:44] *** ab5tract joined
[08:22] *** tea3po joined
[08:25] *** teatwo left
[10:14] *** Manifest0 joined
[13:19] *** teatwo joined
[13:23] *** tea3po left
[14:26] <jgaz> I'm trying to smartmatch something that literally looks like `(foo),d` and, given `$x ~~ / (foo),d /`, no amount of `\` escapes around the usual suspects are helping.

[14:27] <discord-raku-bot> <nemokosch> First, if that's all you want, you could really just smartmatch a string, or to *.contains('blabla') for containment

[14:29] <discord-raku-bot> <nemokosch> Second, if you want to include literal strings in a regex, quoting is the best option still, / 'blabla' /

[14:29] <discord-raku-bot> <nemokosch> Third, escaping should work nevertheless so what did you try?

[14:31] <jgaz> I tried `\(foo\)\,d`. It didn't work. I even tried / 'literal' / -- or so I recall. Trying the / 'literal' / approach now just works. I must have been more tired than I realized.

[14:31] <jgaz> Thanks. Sorry to bother.

[14:32] <jgaz> wait... no it's not.

[14:32] <jgaz> I need more coffee. Let me try a few things.

[14:34] <discord-raku-bot> <nemokosch> Frankly, both versions must work

[14:34] <discord-raku-bot> <nemokosch> If something is off, the problem must be elsewhere

[14:35] <jgaz> yep, it is. I got it to match with a tiny test case.

[14:35] <jgaz> I must be doing something else wrong on the same line.

[14:35] <discord-raku-bot> <nemokosch> What is the line? üßê

[14:36] <discord-raku-bot> <nemokosch> "say the line" üòÑ

[14:44] <jgaz> I found it I was ~ @array[index] on the same line, as part of the gist method to print object details, and the index didn't exist yet because I'm using test input. 

[14:47] <discord-raku-bot> <nemokosch> Oops

[14:47] <jgaz> yep

[14:47] <jgaz> wrong... wrong... wrong... right... beautify

[17:19] *** jgaz left
[18:39] *** guifa__ left
[20:20] *** tea3po joined
[20:23] *** teatwo left
[20:28] *** jgaz joined
[20:38] <Tirifto_> Is it not possible to declare a sub within EVAL? (I‚Äôm not trying to export the sub from EVAL into the surrounding scope; I am only trying to declare *and use it* within that same EVAL, but I get an error.)

[20:39] <Tirifto_> m: use MONKEY-SEE-NO-EVAL; EVAL ‚Äúsub foo(Int $x) { $x √ó 3 }; say foo 3‚Äù

[20:39] <camelia> rakudo-moar 51b0afc4b: OUTPUT: ¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$x' is not declared.  Perhaps you forgot a 'sub' if this was‚ê§intended to be part of a signature?‚ê§at <tmp>:1‚ê§------> e MONKEY-SEE-NO-EVAL; EVAL ‚Äúsub foo(Int ‚èè$x) { $x √ó 3 }; sa‚Ä¶¬ª

[20:41] <discord-raku-bot> <nemokosch> haha, that's not an EVAL problem

[20:41] <discord-raku-bot> <nemokosch> that's a quoting problem

[20:41] <Tirifto_> Ohhhh

[20:41] <Tirifto_> Of course

[20:41] <discord-raku-bot> <nemokosch> double quotes interpolate $-variables, right?

[20:41] <discord-raku-bot> <nemokosch> so the quoting chokes before EVAL could get called

[20:42] <Tirifto_> I immediately got what you meant; sorry for the commotion. xD

[21:20] *** deoac joined
[21:20] <deoac> m: "a\n" ~~ / 'a' <!ww>\s* \n /

[21:20] <camelia> rakudo-moar 51b0afc4b: ( no output )

[21:20] <deoac> m: say "a\n" ~~ / 'a' <!ww>\s* \n /

[21:20] <camelia> rakudo-moar 51b0afc4b: OUTPUT: ¬´ÔΩ¢a‚ê§ÔΩ£‚ê§¬ª

[21:20] <deoac> m: say "a\n" ~~ / 'a' <.ws> \n /

[21:20] <camelia> rakudo-moar 51b0afc4b: OUTPUT: ¬´Nil‚ê§¬ª

[21:21] <deoac> Why do these matches give different results?¬† The docs (https://docs.raku.org/language/regexes#Predefined_character_classes) say they are the same.

[22:22] <discord-raku-bot> <nemokosch> because you have an uneven amount of whitespaces in the two regexes

[22:23] <discord-raku-bot> <nemokosch> the first one only demands one whitespace because \s* can match zero-width

[22:23] <discord-raku-bot> <nemokosch> oh, nevermind...

[22:23] <discord-raku-bot> <nemokosch> I don't get the table, though

[22:24] <discord-raku-bot> <nemokosch> if <ww> is zero-width and \s* can be zero-width, why does the table suggest <ws> is not zero-width? what does it mean?

