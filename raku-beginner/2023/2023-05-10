[00:45] *** Rimnal joined
[00:48] *** Ebudae left
[00:58] *** teatime left
[00:59] *** teatime joined
[02:17] *** teatwo joined
[02:20] *** teatime left
[03:57] *** Rimnal left
[04:06] *** Heptite joined
[04:08] *** Ebudae joined
[04:12] *** Heptite left
[04:17] *** Ebudae left
[04:56] *** deoac left
[06:59] *** kjp left
[07:00] *** CIAvash left
[07:00] *** uzl[m] left
[07:02] *** kjp joined
[08:41] *** uzl[m] joined
[12:42] *** CIAvash joined
[12:56] *** habere-et-disper joined
[12:57] <habere-et-disper> m: say (1..*).max

[12:57] <camelia> rakudo-moar b6fb937da: OUTPUT: «Inf␤»

[12:57] <habere-et-disper> m: Int.max

[12:57] <camelia> rakudo-moar b6fb937da: ( no output )

[12:57] <habere-et-disper> m: say Int.max

[12:57] <camelia> rakudo-moar b6fb937da: OUTPUT: «-Inf␤»

[12:58] <habere-et-disper> Why is that? Is this another edge case thing?

[12:58] <habere-et-disper> Shouldn't `Int.max` be `Inf` too?

[12:59] <moritz> m: say Inf ~~ Int

[12:59] <camelia> rakudo-moar b6fb937da: OUTPUT: «False␤»

[13:00] <moritz> that's the problem

[13:07] <habere-et-disper> Is it trying to say it's undefined ? `Inf` aside, how can it be negative ?

[13:07] <habere-et-disper> m: say UInt.max.sign

[13:07] <camelia> rakudo-moar b6fb937da: OUTPUT: «-1␤»

[13:16] *** Heptite joined
[13:37] *** habere-et-disper left
[14:12] <discord-raku-bot> <Nemokosch> I'm not sure if this was you but I have seen this mistake before. Int is not a set of values, neither is UInt, for that matter

[14:17] *** tea3po joined
[14:18] *** tea3po left
[14:18] *** tea3po joined
[14:19] <discord-raku-bot> <Nemokosch> in this context, Int, or UInt, is simply a placeholder value for something missing, hence it's immediately disqualified from the comparison, and you are basically asking the maximum of nothing

[14:20] *** tea3po left
[14:20] *** tea3po joined
[14:20] *** teatwo left
[14:21] <discord-raku-bot> <Nemokosch> so it is indeed "another edge case thing" and probably it would be better if it didn't execute in the first place

[14:22] <discord-raku-bot> <Nemokosch> also, it could be a problem that Inf is not an Int but here that doesn't matter; Num.max is also -Inf for the same reason

[14:24] <discord-raku-bot> <Nemokosch> I have already mentioned the problems of a mere Num value being used as a type-agnostic wildcard; this is a different thing

[15:35] <gfldex> m: Int.^mro.say;

[15:35] <camelia> rakudo-moar 4b69dd51e: OUTPUT: «((Int) (Cool) (Any) (Mu))␤»

[16:21] *** deoac joined
[16:55] *** deoac left
[20:19] <discord-raku-bot> <librasteve> https://en.wikipedia.org/wiki/IEEE_754#Infinities

[20:20] <discord-raku-bot> <librasteve> your handy FPU has a standard way of doing +/-Inf ... this is the raku way to leverage that

[20:22] <discord-raku-bot> <librasteve> the idea afaik is that as you get beyond the range of Rats then the efficient way for your machine to handle bigger numbers is Nums so there is graceful degradation of precision, but not of accuracy

[20:23] <discord-raku-bot> <librasteve> then, if you run out of Nums you get to Inf

[20:25] <discord-raku-bot> <librasteve> m: say Inf ~~ Real

[20:25] <discord-raku-bot> <Raku eval>  True 

[20:31] <discord-raku-bot> <Nemokosch> Yes, Inf has a clear meaning in floating point context; however, we have it here in untyped context, conceptually

[20:31] <discord-raku-bot> <Nemokosch> so there is this cross-proliferation

[20:34] <discord-raku-bot> <Nemokosch> the end result is that you can have an array of type X (say, integers) such that the maximum or minimum value is not of type X but a completely arbitrary type (floating point number)

[20:34] <discord-raku-bot> <librasteve> raku is brilliant in "untyped" concept ... since it can seamlessly handle ops that combine Int, Rat, Num AND has a type model with proper inheritance so that

[20:35] <discord-raku-bot> <librasteve> m: say Int ~~ Real; say Num ~~ Real;

[20:35] <discord-raku-bot> <Raku eval>  True True 

[20:35] <discord-raku-bot> <librasteve> for example

[20:35] <discord-raku-bot> <librasteve> m: say Int ~~ Real

[20:35] <discord-raku-bot> <Raku eval>  True 

[20:36] <discord-raku-bot> <librasteve> m: say Num ~~ Real;

[20:36] <discord-raku-bot> <Raku eval>  True 

[20:36] <discord-raku-bot> <librasteve> and so on

[20:37] <discord-raku-bot> <librasteve> m: (1, 1.1, 1e1).are

[20:37] <discord-raku-bot> <Raku eval>  

[20:37] <discord-raku-bot> <librasteve> m: say (1, 1.1, 1e1).are

[20:37] <discord-raku-bot> <Raku eval>  (Real) 

[20:38] <discord-raku-bot> <Nemokosch> okay but this has nothing to say about the sanity of a maximum of an array degrading into a different type

[20:38] <discord-raku-bot> <Nemokosch> in before yes, this has caused me actual problems in code

[20:39] <discord-raku-bot> <librasteve> m: say [+] (); say [+] (2); say [+] (2,3);

[20:39] <discord-raku-bot> <Raku eval>  0 2 5 

[20:40] <discord-raku-bot> <librasteve> so, as you have said, the identity operation of + is 0

[20:40] <discord-raku-bot> <librasteve> m: say [] (); say [] (2); say [*] (2,3);

[20:40] <discord-raku-bot> <Raku eval>  1 2 6 

[20:40] <discord-raku-bot> <librasteve> and the identity operation of * is 1

[20:41] <discord-raku-bot> <librasteve> m: say [max] (); say [max] (2); say [max] (2,3);

[20:41] <discord-raku-bot> <Raku eval>  -Inf 2 3 

[20:41] <discord-raku-bot> <lakmatiol> JS also does the maximum of 0 is -Inf thing, and it is pretty much never as ergonomic as a language designer would like it to be

[20:41] <discord-raku-bot> <Nemokosch> that's because * and + are designed to be operators unambiguous and exclusive to usual math

[20:42] <discord-raku-bot> <librasteve> so I like that the identity of min/max has the same approach

[20:42] <discord-raku-bot> <Nemokosch> which is something that I have advocated for every now and then, i.e "don't ever overload these operators please" because of the broken assumptions

[20:43] <discord-raku-bot> <Nemokosch> however, minimum and maximum are conceptually overloaded for different types of data

[20:43] <discord-raku-bot> <librasteve> huh?

[20:44] <discord-raku-bot> <Nemokosch> I got curious and I checked this. Is there a general purpose utility for min/max, or just Math.min?

[20:44] <discord-raku-bot> <lakmatiol> just the Math.min and Math.max afaik, but they are variadic

[20:44] <discord-raku-bot> <Nemokosch> for Math.min, I'd say it might actually be sane

[20:45] <discord-raku-bot> <Nemokosch> In JS "Math" usually implies floating point context

[20:45] <discord-raku-bot> <lakmatiol> even among floats, it is an error more often than it is a desirable default

[20:45] <discord-raku-bot> <Nemokosch> it wouldn't make sense to ask Math.min about the strings, right?

[20:45] <discord-raku-bot> <lakmatiol> ye, it is less bad in JS

[20:46] <discord-raku-bot> <Nemokosch> Well I can't see why it wouldn't be a desirable default but perhaps I'll have to take your word for it

[20:46] <discord-raku-bot> <librasteve> so imo, raku is saying "if you don't care about types, then you can min/max anything Real in a List, but WATCH IT if your List is empty"

[20:47] <discord-raku-bot> <Nemokosch> min/max even works (and it is supposed to work!) on strings, and any types with a given cmp ordering

[20:47] <discord-raku-bot> <librasteve> you can't ask raku to give you min/max of Strings

[20:47] <discord-raku-bot> <Nemokosch> you can

[20:47] <discord-raku-bot> <Nemokosch> you absolutely can

[20:48] <discord-raku-bot> <librasteve> since it uses a <=> not a cmp and that coerces the Str to its .elems

[20:48] <discord-raku-bot> <lakmatiol> m: <a b c b a>.max andthen .say # this is what Nemokosch means

[20:48] <discord-raku-bot> <Raku eval>  c 

[20:49] <discord-raku-bot> <Nemokosch> it doesn't coerce into anything, it uses cmp actually

[20:49] <discord-raku-bot> <lakmatiol> julia julia> minimum([]) ERROR: ArgumentError: reducing over an empty collection is not allowed This just seems like objectively superior behaviour to me, especially in raku where you have excellent facilities for dealing for various kinds of failures.

[20:49] <discord-raku-bot> <librasteve> oh - my bad - thanks for educating me

[20:51] <discord-raku-bot> <librasteve> all the same, I think that raku is not just another julia for this kind of things

[20:52] <discord-raku-bot> <Nemokosch> https://github.com/rakudo/rakudo/blob/704a05b934ba10f3240e8764827bbfd7fe089cdf/src/core.c/Any-iterable-methods.pm6#L1584 by the way

[20:52] <discord-raku-bot> <Nemokosch> yes yes, I know, not beginner-friendly enough

[20:52] <discord-raku-bot> <Nemokosch> but ultimately it's a common interest to get people into Rakudo anyway, whatever I think about that

[20:53] <discord-raku-bot> <librasteve> making raku behave like julia is not going to get people into it ;-)

[20:53] <discord-raku-bot> <lakmatiol> though to be fair, -Inf does compare less than to most things

[20:54] <discord-raku-bot> <lakmatiol> m: max ().max, <a b c b a>.max andthen .say

[20:54] <discord-raku-bot> <Raku eval>  c 

[20:54] <discord-raku-bot> <librasteve> the point is that raku is designed to work very well when you are in untyped mode (as well as in typed)

[20:54] <discord-raku-bot> <Nemokosch> Comparing -Inf and 'honeybee' makes no sense tho

[20:54] <discord-raku-bot> <librasteve> why not?

[20:54] <discord-raku-bot> <lakmatiol> well, the solution I would accept of raku would be a special polymorphic "less than everything else" object

[20:54] <discord-raku-bot> <lakmatiol> which could very well -Inf

[20:54] <discord-raku-bot> <lakmatiol> which doesn't sound right

[20:54] <discord-raku-bot> <Nemokosch> and by "makes no sense", I mean it's actively harmful to get a floating point number from some number of strings

[20:55] <discord-raku-bot> <lakmatiol> the more interesting issue is how do I do a max with a default

[20:55] <discord-raku-bot> <Nemokosch> especially that Raku will then be happy to use -Inf the floating point number through a Stringy interface

[20:55] <discord-raku-bot> <lakmatiol> raku > ().max // 5 -Inf doesn't work

[20:55] <discord-raku-bot> <librasteve> m: say ( ().max , "honeybee").max

[20:55] <discord-raku-bot> <Raku eval>  honeybee 

[20:56] <discord-raku-bot> <librasteve> ^^ look no type error ... just works

[20:56] <discord-raku-bot> <Nemokosch> so afterwards you will have no way to even tell why you got the string "-Inf", unless you planned for this case a priori

[20:56] <discord-raku-bot> <lakmatiol> there is no "use the rhs if the lhs is -Inf" operator, since -Inf is not actually a :U

[20:56] <discord-raku-bot> <Nemokosch> it is DEFINITE, it is defined and I think it is even truthy

[20:57] <discord-raku-bot> <Nemokosch> m: Inf.so.say

[20:57] <discord-raku-bot> <Raku eval>  True 

[20:58] <discord-raku-bot> <Nemokosch> I don't think you can recover if you did call max on an empty (or empty-ish, only undefined values) Iterable

[20:58] <discord-raku-bot> <lakmatiol> you can know to check for -Inf, that's about it

[20:58] <discord-raku-bot> <Nemokosch> you actually need to implement a saner default every time this comes up as a possible problem

[20:59] <discord-raku-bot> <lakmatiol> IMO something like a Least:U with the same comparison semantics would be better

[20:59] <discord-raku-bot> <lakmatiol> then I can // it, I can't ~ it, etc.

[20:59] <discord-raku-bot> <Nemokosch> well, there is that issue I opened a while back

[21:01] <discord-raku-bot> <librasteve> recover from what - it doesn't throw an error when you compose it (see my example) ... maybe I'm missing a concrete example here

[21:02] <discord-raku-bot> <lakmatiol> something like perl my @names = ...; my $example = @names.min; say "The first name alphabetically is $example" 

[21:03] <discord-raku-bot> <librasteve> I think that the raku way to handle anything that is an operation is that in general it will never revert to a type object

[21:03] <discord-raku-bot> <lakmatiol> this does not behave usefully with -Inf

[21:04] <discord-raku-bot> <Nemokosch> something else:

[21:04] <discord-raku-bot> <Nemokosch> https://cdn.discordapp.com/attachments/768511641758466088/1105963576390332597/image.png

[21:05] <discord-raku-bot> <lakmatiol> oh yeah, if you want the type checking, this won't type erorr, huh

[21:05] <discord-raku-bot> <lakmatiol> well that's awful

[21:05] <discord-raku-bot> <Nemokosch> and you know, frankly, one shouldn't need to argue about type sanity

[21:06] <discord-raku-bot> <Nemokosch> I'm definitely not a static typing freak but it's just damn obvious that a type system is only useful if it's sound

[21:07] <discord-raku-bot> <librasteve> raku type checking is often dynamic --- don't see an issue with that in particular

[21:08] <discord-raku-bot> <Nemokosch> you should at least see an issue with an array of strings producing a floating point maximum

[21:08] <discord-raku-bot> <lakmatiol> ye, it depends on if raku wants to have an optional type system, or something to the clojure spec kinda thing where it's runtime assertions

[21:08] <discord-raku-bot> <Nemokosch> if you don't see a problem with that, I don't think there is any point in discussing this whole thing

[21:08] <discord-raku-bot> <librasteve> in the input example you are saying "I will accept any input, then try to coerce the result of an operation to Str" ... which I guess you get the Str "-Inf" if you enter an empty Str

[21:10] <discord-raku-bot> <Nemokosch> it shouldn't ever hit a floating point value

[21:11] <discord-raku-bot> <librasteve> raku is a world where you can have typed or untyped "contexts", when in untyped, I see no issue with mixing types

[21:11] <discord-raku-bot> <librasteve> otherwise you have Rust

[21:11] <discord-raku-bot> <lakmatiol> there is no typed variant of min

[21:12] <discord-raku-bot> <lakmatiol> min is simply always unsound

[21:12] <discord-raku-bot> <librasteve> min is an operation

[21:12] <discord-raku-bot> <librasteve> not a variable

[21:12] <discord-raku-bot> <lakmatiol> functions also have types

[21:13] <discord-raku-bot> <Nemokosch> like how to put it... having Inf come out of any sort of non-numeric list is equally bad as having 42 come out

[21:13] <discord-raku-bot> <Nemokosch> they are both arbitrary values one needs to write further checks for, wherever they happen

[21:13] <discord-raku-bot> <Nemokosch> and if you don't remember to write those checks, nonsense will come out, implicitly

[21:14] <discord-raku-bot> <Nemokosch> it's guaranteed to be nonsense by the sheer nature of particular types not having any concept of Infinity, let alone a numeric one

[21:15] <discord-raku-bot> <librasteve> I am not sure that raku maintains a concept of sound operations where the type of the result is aligned to the type of the argument

[21:15] <discord-raku-bot> <lakmatiol> that's a bad thing if you want a useful type system though

[21:16] <discord-raku-bot> <lakmatiol> if you see the the type specification system as a way to do runtime assertions on types which can occasionally figure out an error at compile time, it is fine

[21:16] <discord-raku-bot> <librasteve> yes and no - it would be a killer with strong / static typing, I agree

[21:16] <discord-raku-bot> <librasteve> so raku "gradual" typing is not everyone's cup of tea since a lot is left to runtime

[21:16] <discord-raku-bot> <Nemokosch> this is not just about the type system being static

[21:17] <discord-raku-bot> <librasteve> but I for one much, much prefer it to eg Rust

[21:17] <discord-raku-bot> <lakmatiol> gradual typing generally implies that the parts you do type are typed soundly.

[21:17] <discord-raku-bot> <Nemokosch> types themselves are an abstraction

[21:17] <discord-raku-bot> <lakmatiol> which is just... not true in raku

[21:17] <discord-raku-bot> <lakmatiol> but it works fine in e.g. python

[21:17] <discord-raku-bot> <librasteve> well, so yes there is a interface between untyped and typed worlds

[21:18] <discord-raku-bot> <Nemokosch> if you have a list that you initialize a certain way, you can semantically describe the type of your data, that's how you can think of dynamically typed stuff as well

[21:18] <discord-raku-bot> <librasteve> and in raku this is gated with runtime assertions

[21:18] <discord-raku-bot> <lakmatiol> well, yes, that's what I said, if you want to be in a typed world, you can never use min or max

[21:19] <discord-raku-bot> <Nemokosch> now if you can semantically expect your list to contain a certain number of strings, and then you cannot expect the minimum of them to either be a string, or at least warn about a special case going on, that's definitely a problem

[21:19] <discord-raku-bot> <Nemokosch> whether you use type annotations or not

[21:19] <discord-raku-bot> <Nemokosch> I for example did not, yet it was a problem, because of the useless semantics of the outcome

[21:20] <discord-raku-bot> <Nemokosch> a type error is really not the worst thing that can happen

[21:20] <discord-raku-bot> <Nemokosch> having a nonsensical string come out 10 operations later, is way worse

[21:21] <discord-raku-bot> <Nemokosch> so granted, this sort of soundness is strictly necessary for proper static typing - but it is also universally beneficial without

[21:22] <discord-raku-bot> <librasteve> would you outlaw doing min/max unless all types in list the same?

[21:23] <discord-raku-bot> <lakmatiol> if you are writing type hinted code, you will likely have that property upheld anyway, so sure

[21:23] <discord-raku-bot> <Nemokosch> let's say the tradeoff explicitly

[21:24] <discord-raku-bot> <Nemokosch> the behavior that shoves numeric Inf values onto every use case is beneficial for the use cases where you do indeed mean to compare numbers, and floating point numbers in particular

[21:24] <discord-raku-bot> <librasteve> m: my @names = []; my Str $example = @names.min;

[21:24] <discord-raku-bot> <Raku eval>  Exit code: 1 Type check failed in assignment to $example; expected Str but got Num (Inf)   in block <unit> at main.raku line 1  

[21:25] <discord-raku-bot> <lakmatiol> it is useful for any case where you want to do further comparisons on the result, to be fair

[21:25] <discord-raku-bot> <Nemokosch> it saves you, say, one condition

[21:25] <discord-raku-bot> <Nemokosch> one condition that you would know about rather clearly, though

[21:26] <discord-raku-bot> <librasteve> ok, so we agree that min/max in untyped context should be able to handle a mixed List - phew!

[21:26] <discord-raku-bot> <lakmatiol> honestly, the example for static typing may as well just be my Int $i = <a b c>.max, which also crashes at runtime

[21:26] <discord-raku-bot> <Nemokosch> on the other hand, it is detrimental in any other cases, in a way that you need to explicitly learn that although ().min/max does give you a value, it will be a useless value that you need to guard against

[21:27] <discord-raku-bot> <lakmatiol> I did kind of forget that the raku type checking is more cosmetic than useful.

[21:28] <discord-raku-bot> <Nemokosch> if min/max was strictly about numeric comparison, Inf - preferably as an abstract Real value, not a Num - could do well

[21:28] <discord-raku-bot> <librasteve> so, then the question is should min/max be able to mix numbers and strings given it uses cmp semantics, which boils down to should cmp be able to take a number and a string

[21:28] <discord-raku-bot> <lakmatiol> that's not quite the discussion

[21:29] <discord-raku-bot> <Nemokosch> well, that could also be a discussion 😉

[21:29] <discord-raku-bot> <Nemokosch> there are many things to get wrong here, to be honest

[21:29] <discord-raku-bot> <Nemokosch> have you heard of IntStr?

[21:30] <discord-raku-bot> <lakmatiol> the question is: should a function introduce a whole separate type of value which at no point anyone actually cared about or even instantiated?

[21:30] <discord-raku-bot> <librasteve> m: my Str @as="a","b"; my Int $a = @as.max; say $a;

[21:30] <discord-raku-bot> <Raku eval>  Exit code: 1 Type check failed in assignment to $a; expected Int but got Str ("b")   in block <unit> at main.raku line 1  

[21:31] <discord-raku-bot> <lakmatiol> when it's a:U, it's a thing that raku has tools for dealing things, same with a failure of sorts. But a plain ol' float requires a special check entirely

[21:31] <discord-raku-bot> <Nemokosch> I'm not sure that's really the question

[21:32] <discord-raku-bot> <Nemokosch> or maybe I just don't get you, lol

[21:32] <discord-raku-bot> <lakmatiol> honestly, I am just not a fan of sentinel values

[21:32] <discord-raku-bot> <lakmatiol> should've kept that mess in C where it belongs

[21:33] <discord-raku-bot> <lakmatiol> would this pass code review? perl my $el = @xs.max fail "no elements" if $el ~~ Num 

[21:33] <discord-raku-bot> <Nemokosch> lmao

[21:33] <discord-raku-bot> <librasteve> well lets backtrack from Least:U ... your suggestion .... I have said that this concept should be defined ... so I don't think it is unreasonable in an untyped context to pick up -Inf since that is definitively a standard way to say "the most negative thing this machine can represent"

[21:33] <discord-raku-bot> <Nemokosch> no, because you forgot the semicolon!

[21:34] <discord-raku-bot> <lakmatiol> truee

[21:34] <discord-raku-bot> <librasteve> lol

[21:34] <discord-raku-bot> <librasteve> I always forget the say

[21:35] <discord-raku-bot> <Nemokosch> I think even this phrasing is presumptuous - a string is not positive or negative

[21:35] <discord-raku-bot> <Nemokosch> neither is business logic object of any sort

[21:35] <discord-raku-bot> <Nemokosch> + a

[21:36] <discord-raku-bot> <lakmatiol> the smallest thing being -Inf is... cute, in the same way pony not having operator precedence is cute

[21:36] <discord-raku-bot> <librasteve> look, I would support some defined "lowest possible Str / highest possible Str" when doing a leg

[21:36] <discord-raku-bot> <Nemokosch> not having operator precedence is not just cute but also simple

[21:37] <discord-raku-bot> <librasteve> as a new raku build in class

[21:37] <discord-raku-bot> <Nemokosch> something not to neglect

[21:39] <discord-raku-bot> <librasteve> yeah - but if we are in Real children territory it can fully participate in subsequent math and do a sensible thing

[21:39] <discord-raku-bot> <librasteve> m: say Inf + 1

[21:39] <discord-raku-bot> <Raku eval>  Inf 

[21:40] <discord-raku-bot> <lakmatiol> min is not a numeric operator though

[21:40] <discord-raku-bot> <lakmatiol> it works on anything you can compare, and so it should behave like it.

[21:41] <discord-raku-bot> <lakmatiol> and while -Inf does indeed behave like the smallest thing, it also behaves like a lot of other things, only some of which make sense in a given context

[21:41] <discord-raku-bot> <librasteve> well I am basing on cmp being [<=>|leg] and that if all are Str then leg would apply

[21:42] <discord-raku-bot> <librasteve> but this idea of LowestPossibleString is also bad because you can't just use 'A' if you want to follow the identity pattern

[21:45] <discord-raku-bot> <Nemokosch> whether we like sentinel values or not, there are clear differences

[21:46] <discord-raku-bot> <Nemokosch> what purpose they are defined for, or how easy it is to mistake them for valid values

[21:46] <discord-raku-bot> <librasteve> maybe '' (empty Str) is a good candidate for LowestPossibleStr

[21:47] <discord-raku-bot> <librasteve> but I can't fathom what to do for HighestPossibleStr

[21:47] <discord-raku-bot> <Nemokosch> although I also don't vehemently oppose the idea that "the smallest something in the universe" just shouldn't be a valid query, and hence should throw some way

[21:48] <discord-raku-bot> <librasteve> so - I dare to say that we both think that raku should warn if you min/max an empty List

[21:49] <discord-raku-bot> <librasteve> but that no one has a better idea than +/-Inf when it comes to the return value even of a Str array

[21:50] <discord-raku-bot> <Nemokosch> I think even dedicated "universal maximum/minimum" values could be better, or Nil, or Empty, or some sort of Failure

[21:52] <discord-raku-bot> <librasteve> OK - how about "no change to numbers, but if all .are ~~ Str then return Nil from ().min and ().max and warn 'taking the min/max of an Empty List'

[21:53] <discord-raku-bot> <librasteve> "

[21:53] <discord-raku-bot> <Nemokosch> how do you know about an empty list how it came to be?

[21:53] <discord-raku-bot> <Nemokosch> I mean, as the core language API

[21:54] <discord-raku-bot> <librasteve> oh rats - getting late

[21:55] <discord-raku-bot> <librasteve> that's why I not a language designer!

[21:56] <discord-raku-bot> <librasteve> must go ...

[21:56] <discord-raku-bot> <Nemokosch> and that's why I gave up on trying to bring certain design issues into attention

