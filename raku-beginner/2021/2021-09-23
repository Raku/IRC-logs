[00:54] <codesections> There are a lot of ways to do something like that, depending on the exact usecase.  From what you've said so far, I'd probably be inclined to zip the two lazy lists together and then diff each line one at a time.  See https://docs.raku.org/language/operators#index-entry-Zip_operator  But I'd be happy to give thought to a more specific solution if

[00:54] <codesections> you'd care to share more details (either here or on StackOverflow â€“ everyone who answers/moderates the [raku] tag is very welcoming)

[01:56] <discord-raku-bot> <avuserow#1203> I thought about suggesting zip with lines, but then you don't have a way to re-synchronize in the case where a line is added.

[01:57] <discord-raku-bot> <avuserow#1203> <@297037173541175296> did you post the python version somewhere? Curious if I'm understanding the problem correctly

[03:22] *** zacts left
[05:35] *** codesections left
[05:36] *** codesections joined
[07:05] <discord-raku-bot> <Nemokosch#9980> I think we have the same thought in mind

[07:24] <discord-raku-bot> <Nemokosch#9980> The exact thing I had to do with Python was a bit more convoluted so I'm gonna turn it a bit more theoretical so please treat it as a pseudocode. The lines have a key-value structure conceptually, that's the basis of saying whether one line is extra or they are differing.

[07:24] <discord-raku-bot> <Nemokosch#9980> ```py

[07:24] <discord-raku-bot> <Nemokosch#9980> def diff_lines(left_iter, right_iter):

[07:24] <discord-raku-bot> <Nemokosch#9980>   try:

[07:24] <discord-raku-bot> <Nemokosch#9980>     left_line = next(left_iter)

[07:24] <discord-raku-bot> <Nemokosch#9980>     right_line = next(right_iter)

[07:24] <discord-raku-bot> <Nemokosch#9980>     while True:

[07:24] <discord-raku-bot> <Nemokosch#9980>       cmp_result = compare_keys(left_line, right_line)

[07:24] <discord-raku-bot> <Nemokosch#9980>       if cmp_result < 0:

[07:24] <discord-raku-bot> <Nemokosch#9980>         print('Announce extra line on the left side')

[07:24] <discord-raku-bot> <Nemokosch#9980>         left_line = next(left_iter)

[07:24] <discord-raku-bot> <Nemokosch#9980>       elif cmp_result > 0:

[07:24] <discord-raku-bot> <Nemokosch#9980>         print('Announce extra line on the right side')

[07:24] <discord-raku-bot> <Nemokosch#9980>         right_line = next(right_iter)

[07:26] <discord-raku-bot> <Nemokosch#9980> I think this is enough to grasp the supposed behavior. This solution isn't precise because the left_line can take a step when the right_iter is exhausted so it's possible that we lose one line but that doesn't add to the point

[07:34] <discord-raku-bot> <gfldex#8222> `.lines` on a filehandle is a `Seq` so there is your bottled up iterator. `Z` will also return a `Seq`

[07:35] <discord-raku-bot> <gfldex#8222> m:```

[07:35] <discord-raku-bot> <gfldex#8222> for $*PROGRAM.open.lines Z $*PROGRAM.open.lines -> [$left, $right] {

[07:35] <discord-raku-bot> <gfldex#8222>     say $left, $right;

[07:35] <discord-raku-bot> <gfldex#8222> }

[07:35] <discord-raku-bot> <gfldex#8222> ```

[07:36] <discord-raku-bot> <gfldex#8222> :-/

[07:36] <discord-raku-bot> <Nemokosch#9980> I know that but how do you tell Z that certain subsequent lines shouldn't be matched against each other but should be considered as extra?

[07:38] <discord-raku-bot> <gfldex#8222> m: Seq.^methods.grep(*.name eq 'pop').say;

[07:38] <discord-raku-bot> <Nemokosch#9980> this is on point

[07:39] <discord-raku-bot> <gfldex#8222> `Seq` got `.skip`

[07:40] <discord-raku-bot> <Nemokosch#9980> without zipping them then, right?

[07:44] <discord-raku-bot> <gfldex#8222> Alas, `.skip` is not a mutator. So there is some wrapping required.

[07:46] <discord-raku-bot> <Nemokosch#9980> Well this is a bit too cryptic for me ðŸ˜…

[07:53] <discord-raku-bot> <Nemokosch#9980> Actually I think I succeeded with iterators but it was rather painful for exactly one reason: IterationEnd is Mu

[07:53] <discord-raku-bot> <Nemokosch#9980> if it was any normal value (literally haha), it would have been no big deal

[08:02] <discord-raku-bot> <gfldex#8222> ```

[08:02] <discord-raku-bot> <gfldex#8222> my @left = $*PROGRAM.open.lines;

[08:02] <discord-raku-bot> <gfldex#8222> while @left {

[08:02] <discord-raku-bot> <gfldex#8222>     @left.shift if (True, False).roll;

[08:02] <discord-raku-bot> <gfldex#8222>     try put @left.shift;

[08:02] <discord-raku-bot> <gfldex#8222> }

[08:02] <discord-raku-bot> <gfldex#8222> ```

[08:03] <discord-raku-bot> <gfldex#8222> <@!297037173541175296> You assign the `Seq` to an `Array` and then use the mutators on the `Array` to manipulate the iterator of the `Seq` indirectly.

[08:04] <discord-raku-bot> <Nemokosch#9980> is this lazy?

[08:07] <discord-raku-bot> <gfldex#8222> To answer that question would require to understand https://github.com/rakudo/rakudo/blob/master/src/core.c/Array.pm6#L184

[08:07] *** dakkar joined
[08:09] <discord-raku-bot> <gfldex#8222> It does use `IterationBuffer` so it looks to me as if it would be lazy in chunks. lizmat can likely shed more light on this then me.

[08:10] <discord-raku-bot> <Nemokosch#9980> because yes, given the files with like 20k lines, slurping them and doing something afterwards, it would still be okay and dead simple

[08:10] <lizmat> that is lazy

[08:11] <discord-raku-bot> <Nemokosch#9980> but it's more than just a hypothetical that the files can get big and we have more time than memory in this case

[08:11] <lizmat> also, since $*PROGRAM is an IO::Path, you don't need the .open

[08:12] <discord-raku-bot> <Nemokosch#9980> interesting that something with an Array interface can be lazy ðŸ˜®

[08:13] <discord-raku-bot> <gfldex#8222> Sadly, I don't have a text file bigger then 64GB to test if it does fill all the RAMz. :)

[08:13] <discord-raku-bot> <Nemokosch#9980> 64 GB, heh

[08:14] <discord-raku-bot> <Nemokosch#9980> I managed to get the Python script that acted upon ~ 100 MB files dead on a 4 GB VM

[08:15] <discord-raku-bot> <Nemokosch#9980> probably trying to sort the records real-time wasn't a marvelous idea ðŸ™‚

[08:15] <discord-raku-bot> <Morfent#9811> m:```

[08:15] <discord-raku-bot> <Morfent#9811> use v6;

[08:15] <discord-raku-bot> <Morfent#9811> .say for Array(gather for 1..3 { .say; .take })

[08:15] <discord-raku-bot> <Morfent#9811> ```

[08:15] <discord-raku-bot> <Morfent#9811> er

[08:15] <discord-raku-bot> <Morfent#9811> that's not how i test what i wanna test

[08:16] <discord-raku-bot> <Morfent#9811> m:```

[08:16] <discord-raku-bot> <Morfent#9811> use v6;

[08:16] <discord-raku-bot> <Morfent#9811> .say for gather for 1..3 { .say; .take }

[08:16] <discord-raku-bot> <Morfent#9811> ```

[08:17] <discord-raku-bot> <Morfent#9811> m:```

[08:17] <discord-raku-bot> <Morfent#9811> use v6;

[08:17] <discord-raku-bot> <Morfent#9811> .say for my @ = gather for 1..3 { .say; .take }

[08:17] <discord-raku-bot> <Morfent#9811> ```

[08:18] <discord-raku-bot> <Morfent#9811> m:```

[08:18] <discord-raku-bot> <Morfent#9811> use v6;

[08:18] <discord-raku-bot> <Morfent#9811> .say for my @ = lazy gather for 1..3 { .say; .take }

[08:18] <discord-raku-bot> <Morfent#9811> ```

[08:18] <discord-raku-bot> <Morfent#9811> there we go

[08:20] <discord-raku-bot> <gfldex#8222> We spend great afford to be able to be lazy. :)

[08:21] <discord-raku-bot> <Nemokosch#9980> Not gonna lie, it's annoying that all languages I know have iterators some way and they somehow always get to mess it up with a useless interface to it lol

[08:21] <discord-raku-bot> <Nemokosch#9980> I'm starting to think the Java interface actually isn't bad

[08:22] <discord-raku-bot> <Nemokosch#9980> no matter how ugly this hasNext next combo sounds

[08:23] <discord-raku-bot> <Nemokosch#9980> with this nice `try` statement prefix, even the Python interface could be decent in Raku

[08:31] <discord-raku-bot> <gfldex#8222> The irc-bridge bot basically lives of `try`-statements. :)

[08:31] *** discord-raku-bot left
[08:32] *** discord-raku-bot joined
[11:56] *** Guest28 joined
[11:58] *** Guest28 left
[13:53] <discord-raku-bot> <avuserow#1203> So from a higher order perspective, you kind of want a zip function that takes a comparator function to determine whether to consume from the left side, right side, or both. Basically you'd pass in your compare_keys function

[14:19] <discord-raku-bot> <Nemokosch#9980> yes, kinda

[16:36] *** dakkar left
