[17:18] *** discord-raku-bot left
[17:18] *** discord-raku-bot joined
[17:42] <discord-raku-bot> <tope#9134> hi, totally new to raku and a question about grammars: is there some guide translating my "context-free grammar" thinking into thinking about grammars? I'm struggling with non-greedy matching in particular. I want to match something on the form `<text> <stuff>?` where `<stuff>` have a strict "structure" that is easy to match, but `<text>` is essentially "anything, but non-greedily" like `<-[\n]>*?`, i.e.

[17:47] <discord-raku-bot> <Anton Antonov#7232> "[...] translating my "context-free grammar" thinking into thinking about grammars" -- Hmmm... should be straightforward. Do think in BNF of EBNF?

[17:49] <discord-raku-bot> <Anton Antonov#7232> Here is a more useful answer:  `rule org-section { <stars-spec> <todo-marker>? <text> <tag-list>?}`

[17:50] <thowe> I haven't read the Lenz Grammars book yet...

[17:51] <thowe> I have it, but haven't gotten that far.

[17:51] <discord-raku-bot> <Anton Antonov#7232> Here is a more useful answer:  `rule org-section { <stars-spec> <todo-marker>? <text> <org-tag-list>?}`

[17:51] <discord-raku-bot> <Anton Antonov#7232> Here is a more useful answer:  `rule org-section { <stars-spec> <org-todo-marker>? <text> <org-tag-list>?}`

[17:53] <discord-raku-bot> <Anton Antonov#7232> ```

[17:53] <discord-raku-bot> <Anton Antonov#7232> rule text { \w+ }

[17:53] <discord-raku-bot> <Anton Antonov#7232> rule marker { 'TODO' | 'DONE' | 'CANCEL' }

[17:53] <discord-raku-bot> <Anton Antonov#7232> rule org-tag { \w+ }

[17:53] <discord-raku-bot> <Anton Antonov#7232> rule org-tag-list { <org-tag> % ':' }

[17:53] <discord-raku-bot> <Anton Antonov#7232> ```

[17:53] <discord-raku-bot> <Anton Antonov#7232> Well I have to say the above Raku code is just an example -- some small important tweaks might have to be done in order to work on actual org-mode sections.

[17:53] <discord-raku-bot> <Anton Antonov#7232> (Meaning, I just wrote that code here in the chat, did not try to run it.)

[17:55] <discord-raku-bot> <tope#9134> @Anton Antonov#7232 But I'd like for `<text>` to maybe contain `:` and the like. E.g. `** Tags on the form :ARCHIVE: are special :tag1:tag2:`

[17:55] <discord-raku-bot> <Anton Antonov#7232> @thowe Moritz Lenz' book "Parsing with Perl 6 Regexes and Grammars" was first Perl6 book I read.

[17:56] <thowe> I got both of his books and "Learning Perl 6".

[17:57] <thowe> I started with his basics book, but then  didn't touch it for a while and started again with Learning.  Going through it now.  Also watching a lot of Raku YouTube videos.

[17:57] <discord-raku-bot> <Anton Antonov#7232> Then include ':' in the text rule : ` rule text { [ ':' | \w]+ }`.

[17:57] <discord-raku-bot> <tope#9134> but won't that just swallow the tag?

[17:57] <discord-raku-bot> <tope#9134> my starting point was something like `^^ <stars> " " <todo>? <priority>? <text> <tags>? $$`. but `token text { <-[\n]>*? }` however the non-greedy matching *? doesn't seem to work with tokens?

[17:59] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> Sure, it can do the swallowing, but you can use the appropriate regexes. I responded to you context-free-grammar thinking request.

[17:59] <discord-raku-bot> <Anton Antonov#7232> @tope#9134 Sure, it can do the swallowing, but you can use the appropriate regexes. I responded to your context-free-grammar thinking request.

[18:05] <discord-raku-bot> <tope#9134> hmm yeah come to think of it I'm not sure how I'd translate this to context-free either. I'd maybe write something like `text_and_tags -> <tags> $ | $ | . <text_and_tags>`, so it keeps trying to match the ending or tags and only falls back to adding chars to the text when it fails (where alternative tries left-to-right in order until success)

[18:05] <discord-raku-bot> <tope#9134> but I guess my problem is doing this kind of non-greedy matching in general

[18:06] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> Ok I will post a response with the next hour.

[18:06] <discord-raku-bot> <tope#9134> or basic question: should I be using `regex` instead of `token` or `rule`? can token/rules do non-greedy matching?

[18:08] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> I see --  `regex`  is for comprehensive matching; `rule`  and `token` are for more streamlined and optimized parsing, without parsing too hard.

[18:09] <discord-raku-bot> <Anton Antonov#7232> Sorry, for being too vague, but the precise definitions are given in the documentation at raku.org .

[18:10] <discord-raku-bot> <tope#9134> yeah I've gone through the grammar tutorial & the grammar page, though I feel I have this curse where what I want to do never matches the examples given in tutorials. and/or I'm not smart enough to see how / translate it.

[18:11] <discord-raku-bot> <tope#9134> I could try searching github for people who have written other, more complicated parsers using grammar {}

[18:12] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> -- Ahh, I know that curse too! :0

[18:12] <discord-raku-bot> <Anton Antonov#7232> @tope#9134 -- Ahh, I know that curse too! ðŸ™‚

[18:12] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> So, are you a fan of org-mode, or just cursed with it? (Because of a certain project or else...)

[18:14] <discord-raku-bot> <tope#9134> No, I actually love org-mode. But use it mostly in lieu of markdown for writing rather than as an organizational tool, as I find markdown way too simplistic, but org-mode has more flexibility and formatting options as it comes with latex, tables, (advanced) footnotes, etc etc.

[18:16] <discord-raku-bot> <tope#9134> and just in general prefer the org-mode syntax over markdown's, find it useful to have a separation of =typewriter= from ~code~ in formatting, prefer /italics/ etc.

[18:16] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> Ok. I use org-mode a lot in my projects.

[18:18] <discord-raku-bot> <tope#9134> yeah and so I have a sort of blog/homepage/technical writeups written in markdown currently (mdbook), and looking into making some tools for myself to feed org-mode instead of markdown into mdbook -- and thought it could be a sort of beginner-project for learning raku

[18:18] <discord-raku-bot> <Anton Antonov#7232> Ok, I am doing kind of the same things -- if you want we can "join forces."

[18:18] <discord-raku-bot> <tope#9134> I used and loved perl5 15+ years ago, but since then all I've done is mostly python/rust/c++, however I do love a lot of the language features in raku

[18:20] <discord-raku-bot> <tope#9134> esp. nice that raku is one of the few languages doing operators The Right Way(tm), i.e. completely free user-defined operators like in Haskell, rather than some static list of accepted symbols that can be overloaded.

[18:24] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> Here is what I have so far:

[18:24] <discord-raku-bot> <Anton Antonov#7232> ```

[18:24] <discord-raku-bot> <Anton Antonov#7232> grammar OrgMode {

[18:24] <discord-raku-bot> <Anton Antonov#7232>   rule TOP { [ <org-section-header> | <line-spec> ]+ % "\n" }

[18:24] <discord-raku-bot> <Anton Antonov#7232>   regex org-section-header {

[18:24] <discord-raku-bot> <Anton Antonov#7232>     | <org-section-header-not-tags> \h+ <org-tag-list>

[18:24] <discord-raku-bot> <Anton Antonov#7232>     | <org-section-header-not-tags> }

[18:24] <discord-raku-bot> <Anton Antonov#7232>   regex org-section-header-not-tags { <org-stars-spec> [\h+]? <org-todo-marker>? [\h+]? <text> }

[18:24] <discord-raku-bot> <Anton Antonov#7232>   token org-stars-spec { '*'+ }

[18:25] <discord-raku-bot> <Anton Antonov#7232>   regex text { [\V]+ }

[18:25] <discord-raku-bot> <Anton Antonov#7232>   token org-todo-marker { 'TODO' | 'DONE' | 'CANCEL' }

[18:25] <discord-raku-bot> <Anton Antonov#7232>   token org-tag { ':' \w+ }

[18:25] <discord-raku-bot> <Anton Antonov#7232>   regex org-tag-list { <org-tag>+ }

[18:25] <discord-raku-bot> <Anton Antonov#7232> }

[18:25] <discord-raku-bot> <Anton Antonov#7232> Produces this output:

[18:25] <discord-raku-bot> <Anton Antonov#7232> ```

[18:25] <discord-raku-bot> <Anton Antonov#7232> ** TODO First sectionï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>  org-section-header => ï½¢** TODO First sectionï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>   org-section-header-not-tags => ï½¢** TODO First sectionï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>    org-stars-spec => ï½¢**ï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>    org-todo-marker => ï½¢TODOï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>    text => ï½¢First sectionï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232> ï½¢** TODO First section :TAG1:TAG2ï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>  org-section-header => ï½¢** TODO First section :TAG1:TAG2ï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>   org-section-header-not-tags => ï½¢** TODO First sectionï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>    org-stars-spec => ï½¢**ï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>    org-todo-marker => ï½¢TODOï½£

[18:25] <discord-raku-bot> <Anton Antonov#7232>    text => ï½¢First sectionï½£

[18:26] <discord-raku-bot> <tope#9134> ah hehe, you weren't kidding, you're actually writing an org-mode parser too

[18:26] <discord-raku-bot> <Anton Antonov#7232> I did not define the `<line-spec>` , but yeah why not write an org-mode parse.

[18:26] <discord-raku-bot> <Anton Antonov#7232> I did not define the `<line-spec>` , but yeah why not write an org-mode parser.

[18:27] <discord-raku-bot> <Anton Antonov#7232> Note, that I am kind of dealing with the greediness in a sort of ad hoc manner with the rule `<org-section-header>`.

[18:28] <discord-raku-bot> <tope#9134> yeah you're dealing with it by using `regex` that backtracks I guess?

[18:30] <discord-raku-bot> <Anton Antonov#7232> Sure, that, but I also give precedence to parsing of section specs with a tags lists

[18:30] <discord-raku-bot> <Anton Antonov#7232> Sure, that, but I also give precedence to parsing of section specs with a tags lists.

[18:31] <discord-raku-bot> <Anton Antonov#7232> It is not a well-though grammar yet -- I just wrote it...

[18:32] <discord-raku-bot> <Anton Antonov#7232> But, as you suggested, I strongly suspect someone has already written an org-mode grammar in Raku and posted in the web...

[18:32] <discord-raku-bot> <tope#9134> ```

[18:32] <discord-raku-bot> <tope#9134> grammar Test {

[18:32] <discord-raku-bot> <tope#9134>   token TOP { ^^ "*"+ <todo>? <prio>? <tt> $$ }

[18:32] <discord-raku-bot> <tope#9134>   token todo { "TODO" || "DONE" || "IDEA" || "KILL" || "PROG" }

[18:32] <discord-raku-bot> <tope#9134>   token prio { "[#" <[\V]> "]" }

[18:32] <discord-raku-bot> <tope#9134>   token tt { <tags>? $$ || <[\V]> <tt> }

[18:32] <discord-raku-bot> <tope#9134>   token tags { ":" <tag>+ % ":" ":"  }

[18:32] <discord-raku-bot> <tope#9134>   token tag { <[\w] + [\# @ %]>+ }

[18:32] <discord-raku-bot> <tope#9134> }

[18:32] <discord-raku-bot> <tope#9134> ```

[18:32] <discord-raku-bot> <tope#9134> this was my only idea, to use a sort of muncher. would need the actions to handle collecting the chars into the title i guess

[18:36] <discord-raku-bot> <tope#9134> but of course this is just for a simple heading. my next quest is to figure out how one would express the fact that the <section> after a heading with X stars should only match headings with X+1 or more stars..

[18:37] <discord-raku-bot> <tope#9134> i.e. if that sort of logic can be taken care of by the grammar-actions, without requiring extra logic outside of the grammar stuff

[18:37] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/12/27/2021-52-jdv-released/

[18:42] <discord-raku-bot> <Anton Antonov#7232> Yes this can be done with grammars. I have implementations that have conditional parsing similar to what you describe. The book by M. Lentz mentioned above has examples for that kind of parsing.

[18:43] <discord-raku-bot> <tope#9134> ah, thanks, I'll see if I can procure it and add it to my bedtime reading list

[18:44] <discord-raku-bot> <Anton Antonov#7232> Here is my org-mode grammar so far:

[18:44] <discord-raku-bot> <Anton Antonov#7232> ```

[18:44] <discord-raku-bot> <Anton Antonov#7232> grammar OrgMode {

[18:44] <discord-raku-bot> <Anton Antonov#7232>   regex TOP { [ <empty-line> | <org-section-header> | <line-spec> ]* % \v }

[18:44] <discord-raku-bot> <Anton Antonov#7232>   regex org-section-header {

[18:44] <discord-raku-bot> <Anton Antonov#7232>     | <org-section-header-not-tags> \h+ <org-tag-list>

[18:44] <discord-raku-bot> <Anton Antonov#7232>     | <org-section-header-not-tags> }

[18:45] <discord-raku-bot> <Anton Antonov#7232>   regex org-section-header-not-tags { <org-stars-spec> [\h+]? <org-todo-marker>? [\h+]? <text> }

[18:45] <discord-raku-bot> <Anton Antonov#7232>   token org-stars-spec { '*'+ }

[18:45] <discord-raku-bot> <Anton Antonov#7232>   regex text { [\V]+ }

[18:45] <discord-raku-bot> <Anton Antonov#7232>   token org-todo-marker { 'TODO' | 'DONE' | 'CANCEL' }

[18:45] <discord-raku-bot> <Anton Antonov#7232>   token org-tag { ':' \w+ }

[18:45] <discord-raku-bot> <Anton Antonov#7232> Here is a parsing result of org-mode text:

[18:45] <discord-raku-bot> <Anton Antonov#7232> ```

[18:45] <discord-raku-bot> <Anton Antonov#7232> ï½¢** TODO First section :TAG1:TAG2

[18:45] <discord-raku-bot> <Anton Antonov#7232> ** TODO Second section :TAG1:TAG3

[18:45] <discord-raku-bot> <Anton Antonov#7232> - This text 1

[18:45] *** discord-raku-bot left
[18:45] *** discord-raku-bot joined
[18:49] <discord-raku-bot> <Anton Antonov#7232> @tobe This package of mine evaluates Raku code sections in both Markdown and org-mode: https://modules.raku.org/dist/Text::CodeProcessing:cpan:ANTONOV

[18:50] <discord-raku-bot> <Anton Antonov#7232> @tobe Do you use Babel-org-mode ?

[19:05] *** mmat joined
[19:05] *** mmat left
[19:33] <discord-raku-bot> <tope#9134> @Anton Antonov#7232 thanks for the link, I'll look at that too! as for babel I'm not sure -- is babel just the part that allow you to evaluate code directly in org-mode? If so, then yes -- I've used it extensively to write literate documents with code. but if it's something else then no, I don't think so

[19:34] <discord-raku-bot> <Anton Antonov#7232> @tobe -- Yes, that Babel is for "literate programming."

[19:37] <discord-raku-bot> <tope#9134> @Anton Antonov#7232 btw it's `tope` not `tobe` so I missed the @ notifictions. but yes, cool, then I do. (I went through and solved all the problems on http://cryptohack.org interactively in an org document, for example.) Though I'm far from an emacs expert, I'm mostly just using doom-emacs + a few personal settings.

[19:40] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> Sorry for misspelling your identifier / name.

[19:40] <discord-raku-bot> <tope#9134> no problem

[19:42] <discord-raku-bot> <Anton Antonov#7232> <@93032313142669312> As for cryptography -- have tried to use Mathematica for cryptography? I am a big fan of Mathematica and I have programmed several types of connections between Mathematica and Raku. (Documenting them right now...)

[19:42] <discord-raku-bot> <Anton Antonov#7232> So, basically I want to use literate programming with Raku through Mathematica notebooks.

[19:47] <discord-raku-bot> <tope#9134> Nah, I haven't, but I'm very comfortable with Python/SageMath and have built up a ton of personal tooling for cryptography-related stuff over some years where I've participated in CTF competitions, so never felt the need to look elsewhere

[19:49] <discord-raku-bot> <Anton Antonov#7232> Ok, I am interested comparing programming languages over different computational workflows. I plan to design a conversational agent for Cryptography workflows in the next few months. (Using Raku of course.) So, I might ask for input from you.

[19:49] <discord-raku-bot> <Anton Antonov#7232> Ok, I am interested in comparing programming languages over different computational workflows. I plan to design a conversational agent for Cryptography workflows in the next few months. (Using Raku of course.) So, I might ask for input from you.

[19:49] <discord-raku-bot> <tope#9134> have a lot of writeups for crypto-related problems at https://franksh.gitlab.io/ctf/ tho the old articles are probably a bit quirky since they were forcibly converted from org-mode documents to markdown+katex.

[19:51] <discord-raku-bot> <tope#9134> (and they're probably not very useful to people who didn't play those CTFs and are thus not familiar with the problems)

[19:51] <discord-raku-bot> <Anton Antonov#7232> Ah, back org-mdoe ?! ðŸ™‚ See this please: https://github.com/alainbebe/org-mode-gtk.raku

[19:51] <discord-raku-bot> <tope#9134> ah yes, that's great, thanks

[21:56] <thowe> what does -Ofun mean?

[21:56] <thowe> as seen in the weekly news

[22:02] <gfldex> thowe: Raku is optimised for fun.

[22:05] <thowe> I get that, but what is "-O" ?

[22:05] <thowe> is that not a Raku lang thing?

[22:06] <thowe> I feel that is some kind of idiom or inside joke that had something to do with Raku, but I don't see that when trying to search the docs for it.

[22:22] <gfldex> gcc -O3 your-file.cc

[22:22] <discord-raku-bot> <tope#9134> syntax question: ```> say(<a b> X~ ^2); say(<a b>X~^2)

[22:22] <discord-raku-bot> <tope#9134> (a0 a1 b0 b1)

[22:22] <discord-raku-bot> <tope#9134> (S P)

[22:22] <discord-raku-bot> <tope#9134> ``` the first result I understand (and expected), the second result I have no idea what means / what happens.

[22:23] <gfldex> c++ is clearly optimised so you need 3 ppl to review your code :)

[22:34] <discord-raku-bot> <gfldex#8222> m: dd <a b>X~^2;

[22:36] <discord-raku-bot> <gfldex#8222> m: dd <a b>(X~^2);

[22:36] <thowe> Ah, compiler switch.  Thanks.  makes sense.

[22:40] <discord-raku-bot> <tope#9134> yeah never mind I'm dumb, I though X~ was a separate operator, but X is a metaop, which modifies the infix `~^` to apply across the lists, basically xoring the chars

