[00:27] *** melezhik joined
[00:28] *** melezhik left
[05:12] *** ajr joined
[06:41] *** ajr left
[12:18] *** sm2 left
[13:51] *** A26F64 joined
[16:24] <discord-raku-bot> <Nemokosch#9980> what's the idiomatic way to split a string by words?

[16:25] <[Coke]> m: "this string".words.say

[16:25] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «(this string)␤»

[16:25] <[Coke]> m: dd "this string".words #better formatted

[16:25] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «("this", "string").Seq␤»

[16:27] <lizmat> of course, that is dividing by whitespace, which you may not consider to be "words"

[16:28] <lizmat> m: dd "this: string!".comb( / \w+ / )

[16:28] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «("this", "string").Seq␤»

[16:28] <lizmat> if you'd like the other interpretation of "words"

[17:19] <discord-raku-bot> <Nemokosch#9980> thankies

[19:43] *** ajr joined
[20:05] *** ajr left
[20:17] *** ajr joined
[20:22] *** ajr left
[20:49] *** ajr joined
[20:53] *** ajr left
[21:03] <discord-raku-bot> <Nemokosch#9980> And how do I get all the regex matches to a certain pattern?

[21:04] <[Coke]> ?

[21:05] <discord-raku-bot> <Nemokosch#9980> like matchAll in Javascript

[21:07] <lizmat> m: .say for "foo" ~~ m:g/./   # this perhaps?

[21:07] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «｢f｣␤｢o｣␤｢o｣␤»

[21:08] <lizmat> m: .say for "foo".match(/./, :g)   # or this ?

[21:08] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «｢f｣␤｢o｣␤｢o｣␤»

[21:11] *** ajr joined
[21:12] <discord-raku-bot> <Nemokosch#9980> are they the same thing?

[21:32] <discord-raku-bot> <Nemokosch#9980> okay, I went with ~~ m:g//

[21:32] <discord-raku-bot> <Nemokosch#9980> this sets $/

[21:33] <discord-raku-bot> <Nemokosch#9980> so the iteration of $/ (which really looks like a list) is strange in this case

[21:33] <discord-raku-bot> <Nemokosch#9980> maybe this is because of the sigil

[22:09] *** A26F64 left
[22:11] *** sm2 joined
[22:34] <discord-raku-bot> <Morfent#9811> m:```

[22:34] <discord-raku-bot> <Morfent#9811> say WHAT VAR 'foo' ~~ m:g/./;

[22:34] <discord-raku-bot> <Morfent#9811> say WHAT VAR $/;

[22:34] <discord-raku-bot> <Morfent#9811> ```

[22:35] <discord-raku-bot> <Nemokosch#9980> can I just override it?

[22:35] *** ajr left
[22:36] <discord-raku-bot> <Morfent#9811> the `Scalar`?

[22:37] <discord-raku-bot> <Nemokosch#9980> yes

[22:37] <discord-raku-bot> <Morfent#9811> m:```

[22:37] <discord-raku-bot> <Morfent#9811> say WHAT VAR $('foo' ~~ m:g/./);

[22:37] <discord-raku-bot> <Morfent#9811> say WHAT VAR $/<>;

[22:37] <discord-raku-bot> <Morfent#9811> ```

[22:47] *** ajr joined
[22:59] <discord-raku-bot> <Nemokosch#9980> what about @$/ ?

[22:59] <discord-raku-bot> <Nemokosch#9980> what about `@$/` ?

[23:03] <discord-raku-bot> <Morfent#9811> that would also work

[23:14] <discord-raku-bot> <Nemokosch#9980> cool 🙂

[23:17] <lizmat> yeah, you should realize that $0 is just short for $/[0]  and $<foo> if short for $/<foo>

[23:17] <lizmat> m: $/ = { a => 42 }; dd $<a>

[23:17] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «Int % = 42␤»

[23:17] <lizmat> m: $/ = (1,2,3); dd $0

[23:17] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «1␤»

[23:21] <discord-raku-bot> <Nemokosch#9980> yes, I realized that

[23:22] <discord-raku-bot> <Nemokosch#9980> but in this case I wanted to loop over $/ because it was a list of matches

[23:22] <discord-raku-bot> <Nemokosch#9980> so I didn't even want to use $1 $2 etc

[23:37] *** sm2 left
[23:59] <[Coke]> m: for 'foo' ~~ m:g/./  -> $a { dd $a }

[23:59] <camelia> rakudo-moar 505ffbfa1: OUTPUT: «Match.new(:orig("foo"), :from(0), :pos(1))␤Match.new(:orig("foo"), :from(1), :pos(2))␤Match.new(:orig("foo"), :from(2), :pos(3))␤»

