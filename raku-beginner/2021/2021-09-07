[04:57] *** sjn left
[04:57] *** sjn joined
[08:10] *** dakkar joined
[11:29] *** TempIRCLogger left
[11:29] *** TempIRCLogger joined
[16:35] *** dakkar left
[18:35] <discord-raku-bot> <Nemokosch#9980> Hello again, this time I simply brought Python

[18:35] <discord-raku-bot> <Nemokosch#9980> ```py

[18:35] <discord-raku-bot> <Nemokosch#9980> answer in ('yes', 'no', 'maybe', 'whatever')

[18:35] <discord-raku-bot> <Nemokosch#9980> ```

[18:35] <discord-raku-bot> <Nemokosch#9980> so I'd like to do something like this in Raku

[18:35] <discord-raku-bot> <Nemokosch#9980> how do I do it?

[18:35] <lizmat> $answer (elem) <yes no maybe whatever>

[18:36] <lizmat> or: $answer âˆˆ <yes no maybe whatever>

[18:36] <discord-raku-bot> <Nemokosch#9980> oh so it works without extra quoting

[18:37] <discord-raku-bot> <Nemokosch#9980> thanks; I still got the quotes wrong here and there

[18:37] <lizmat> <foo bar baz> is the equivalent of ('foo','bar','baz')

[18:43] <discord-raku-bot> <Nemokosch#9980> yes, I'm supposed to know that... actually sometimes I get confused by the gist output

[18:45] <lizmat> gist is just that: it's a gist, it's not code  :-)

[18:46] <discord-raku-bot> <Nahita#3882> m:```

[18:46] <discord-raku-bot> <Nahita#3882> say <yes no maybe whatever>.raku;

[18:46] <discord-raku-bot> <Nahita#3882> ```

[18:47] <lizmat> ("yes", "no", "maybe", "whatever")

[18:47] <lizmat> actually, this is shorter:

[18:47] <lizmat> dd <yes no maybe whatever>

[18:48] <lizmat> it calls .raku on whatever you give it, and does some more introspection

[21:42] <discord-raku-bot> <gfldex#8222> m:```

[21:42] <discord-raku-bot> <gfldex#8222> multi sub infix:<in>(\needle, List \l) { l.first(needle) ?? True !! False }

[21:42] <discord-raku-bot> <gfldex#8222> multi sub infix:<in>(\needle, Iterable \l) { l.list.first(needle) ?? True !! False }

[21:42] <discord-raku-bot> <gfldex#8222> multi sub infix:<in>(\needle, Str \s) { s.contains(needle) ?? True !! False }

[21:42] <discord-raku-bot> <gfldex#8222> say 'foo' in 'foobar';

[21:42] <discord-raku-bot> <gfldex#8222> say 'foo' in 'barbuzz';

[21:42] <discord-raku-bot> <gfldex#8222> say '1' in <1 2 3>;

[21:42] <discord-raku-bot> <gfldex#8222> say '1' in <0 2 3>;

[21:42] <discord-raku-bot> <gfldex#8222> ```

[21:42] <discord-raku-bot> <gfldex#8222> <@!297037173541175296> if you really like the in operation, you can define a new operator ofc. ^^^

[22:18] <discord-raku-bot> <Nemokosch#9980> cool ðŸ˜Ž ðŸ˜„

[23:39] <discord-raku-bot> <avuserow#1203> You can also use junctions: `$answer eq any(<yes no maybe whatever>)`

[23:54] <discord-raku-bot> <Nemokosch#9980> also cool

[23:54] <discord-raku-bot> <Nemokosch#9980> however...

[23:54] <discord-raku-bot> <Nemokosch#9980> ```perl

[23:54] <discord-raku-bot> <Nemokosch#9980>     constant \choices = {1 => ('old', "old_$basis-postfix"), 2 => ('new', 'old'), 3 => ('new', 'old', "old_$basis-postfix")};

[23:54] <discord-raku-bot> <Nemokosch#9980>     if $choice.Str (elem) '1'..'3' {

[23:54] <discord-raku-bot> <Nemokosch#9980>       run 'meld', slip(choices{$choice});

[23:54] <discord-raku-bot> <Nemokosch#9980>     }  

[23:54] <discord-raku-bot> <Nemokosch#9980> ```

[23:55] <discord-raku-bot> <Nemokosch#9980> this really hurt my brain

[23:56] <discord-raku-bot> <Nemokosch#9980> first of all, $choice came from prompt and it was some IntStr hybrid that fails on the (elem) operator without conversion. How should I more reasonably check for it?

[23:56] <discord-raku-bot> <Nemokosch#9980> And why does it pass for a hash index as expected if it fails the (elem) check?

[23:57] <discord-raku-bot> <Nemokosch#9980> The more troublesome thing is, choices{$choice} is a scalar list apparently

[23:57] <discord-raku-bot> <Nemokosch#9980> it took me a lot of time to figure this problem out

[23:58] <discord-raku-bot> <Nemokosch#9980> slip comes to save the day but how can I have the elements as normal, list-lists?

