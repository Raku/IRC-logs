[00:15] *** lizmat_ joined
[00:18] *** lizmat left
[03:33] *** bruceAxtens joined
[03:34] <bruceAxtens> Regarding 'ACTU'.split("").Array.map(-> $v { $v.ord })

[03:34] <bruceAxtens> (Nil 65 67 84 85 Nil)

[03:35] <bruceAxtens> why do i get Nil either side?

[03:35] <bruceAxtens> And how can I not get Nil. I just want the ascii values

[03:42] *** bruceAxtens left
[05:15] *** RavingCodRoller joined
[05:33] *** RavingCodRoller left
[06:21] <discord-raku-bot> <lakmatiol#8020> Consider using .comb instead of .split('').

[06:22] <discord-raku-bot> <lakmatiol#8020> m: say 'TUV'.comb.map(*.ord)

[09:22] *** parv joined
[09:33] *** lizmat_ left
[09:33] *** lizmat joined
[11:35] *** parv left
[12:12] *** discord-raku-bot left
[12:13] *** discord-raku-bot joined
[13:01] <SmokeMachine> m: say 'TUV'.comb.map(*.ord) # running for lakmatiol#8020

[13:01] <camelia> rakudo-moar b994c6bbb: OUTPUT: «(84 85 86)␤»

[13:48] <discord-raku-bot> <axtens#3841> thank you

[14:41] <SmokeMachine> :)

[15:25] *** sm2 joined
[15:53] *** parv joined
[16:10] *** parv left
[16:24] *** CIAvash left
[16:36] *** CIAvash joined
[16:37] *** sm2 left
[16:39] *** SmokeMachine left
[16:39] *** tbrowder left
[16:40] *** mjgardner left
[16:42] *** mjgardner joined
[16:42] *** SmokeMachine joined
[16:45] *** tbrowder joined
[16:50] *** suman joined
[16:50] <suman> say $_ if $_~~ /regex/  for "file".IO.lines gives the line that match the regex. 

[16:50] <suman> How to get the line immediately after the match?

[17:31] <discord-raku-bot> <gfldex#8222> m: say lines.WHAT;

[17:32] <discord-raku-bot> <gfldex#8222> m: .say for lines;

[17:34] <discord-raku-bot> <gfldex#8222> m:```

[17:34] <discord-raku-bot> <gfldex#8222> for my \l = lines {

[17:34] <discord-raku-bot> <gfldex#8222>   last if / 'may' /;

[17:34] <discord-raku-bot> <gfldex#8222> }

[17:34] <discord-raku-bot> <gfldex#8222> say l.head;

[17:34] <discord-raku-bot> <gfldex#8222> ```

[17:34] <discord-raku-bot> <gfldex#8222> m:```

[17:34] <discord-raku-bot> <gfldex#8222> for my \l = lines() {

[17:34] <discord-raku-bot> <gfldex#8222>   last if / 'may' /;

[17:34] <discord-raku-bot> <gfldex#8222> }

[17:34] <discord-raku-bot> <gfldex#8222> say l.head;

[17:34] <discord-raku-bot> <gfldex#8222> ```

[17:39] *** suman left
[17:41] <discord-raku-bot> <gfldex#8222> m:```

[17:41] <discord-raku-bot> <gfldex#8222> my @l = lines;

[17:41] <discord-raku-bot> <gfldex#8222> while @l.shift {

[17:41] <discord-raku-bot> <gfldex#8222>     last when / 'may' /;

[17:41] <discord-raku-bot> <gfldex#8222> }

[17:41] <discord-raku-bot> <gfldex#8222> say @l.head;

[17:41] <discord-raku-bot> <gfldex#8222> ```

[17:45] <discord-raku-bot> <gfldex#8222> my @l = lines;

[17:45] <discord-raku-bot> <gfldex#8222> while @l.shift -> $_ {

[17:45] <discord-raku-bot> <gfldex#8222>     last when / 'may' /;

[17:45] <discord-raku-bot> <gfldex#8222> }

[17:45] <discord-raku-bot> <gfldex#8222> say @l.head;

[17:46] *** lizmat_ joined
[17:46] <discord-raku-bot> <gfldex#8222> Using `.first(/ 'may' /, :kv)` would work too ofc.

[17:47] *** lizmat_ left
[17:47] *** lizmat_ joined
[17:49] *** lizmat left
[17:49] *** lizmat_ left
[17:49] *** lizmat joined
[18:30] <discord-raku-bot> <Nemokosch#9980> how can I pass an optional argument to a sub?

[18:30] <discord-raku-bot> <Nemokosch#9980> when it's not a constant value

[18:31] <lizmat> sub foo($a = 42) { ... }    # $a is optional with 42 as default

[18:32] <lizmat> sub foo($a?) { ... }    # $a is optional with Any as default

[18:32] <discord-raku-bot> <Nemokosch#9980> wait, it's not even optional...

[18:32] <lizmat> what isn't optional?

[18:32] <discord-raku-bot> <Nemokosch#9980> so there is the `extension` sub

[18:32] <discord-raku-bot> <Nemokosch#9980> it has :$parts = 1

[18:33] <lizmat> m: sub foo($a = 42) { $a }; say foo

[18:33] <camelia> rakudo-moar b994c6bbb: OUTPUT: «42␤»

[18:33] <discord-raku-bot> <Nemokosch#9980> I want to set this to the value I figure out

[18:33] <lizmat> :$parts is a named parameter

[18:33] <discord-raku-bot> <Nemokosch#9980> yes, my bad

[18:33] <lizmat> sub foo(:$parts = 42) { $parts }; say foo

[18:33] <discord-raku-bot> <Nemokosch#9980> the question holds with named parameter 🙂

[18:33] <lizmat> m: sub foo(:$parts = 42) { $parts }; say foo

[18:33] <camelia> rakudo-moar b994c6bbb: OUTPUT: «42␤»

[18:33] <lizmat> m: sub foo(:$parts = 42) { $parts }; say foo parts => 137

[18:33] <camelia> rakudo-moar b994c6bbb: OUTPUT: «137␤»

[18:34] <discord-raku-bot> <Nemokosch#9980> oh okay, so like a hash?

[18:37] <lizmat> no

[18:37] <lizmat> a => 42 is a first class citizen in Raku

[18:37] <lizmat> it's called a Pair

[18:37] <lizmat> by default, Pairs specified in a call, are interpreted as named arguments

[19:04] <discord-raku-bot> <Morfent#9811> if you wrap a pair in parentheses it'll get treated like a positional argument

[19:04] <discord-raku-bot> <Morfent#9811> ditto making a slip out of a list of pairs

[19:05] <discord-raku-bot> <Morfent#9811> for variadic named arguments, you need to slip a hash of sorts

[19:05] <lizmat> |%hash   ?

[19:05] <discord-raku-bot> <Morfent#9811> yep

[19:06] <lizmat> m: my %h = a => 42, b => 666; sub a(:$a, :$b) { dd $a, $b }; a |%h

[19:06] <camelia> rakudo-moar b994c6bbb: OUTPUT: «42␤666␤»

[19:06] *** ajr joined
[19:19] <discord-raku-bot> <Nemokosch#9980> I mean, hashes consist of "pairs" if we insist on this terminology

[19:28] <lizmat> yes, you could consider a has an unordered list of pairs

[19:28] <lizmat> in fact, if you iterate over a hash, that's exactly what you get

[19:29] *** parv joined
[19:29] <lizmat> m: my %h = a => 42, b => 666, c => 137; dd $_ for %h

[19:29] <camelia> rakudo-moar b994c6bbb: OUTPUT: «:b(666)␤:a(42)␤:c(137)␤»

[19:29] <lizmat> m: my %h = a => 42, b => 666, c => 137; dd $_ for %h

[19:29] <camelia> rakudo-moar b994c6bbb: OUTPUT: «:a(42)␤:c(137)␤:b(666)␤»

[19:29] <lizmat> note the order is indeterminate

[20:35] <discord-raku-bot> <Nemokosch#9980> gotcha

[21:02] *** ajr left
[21:13] *** ajr joined
[21:18] *** ajr left
[21:43] *** ajr joined
