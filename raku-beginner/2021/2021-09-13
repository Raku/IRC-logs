[00:01] <discord-raku-bot> <bancorn#1984> howdy! setup rakubrew, raku, and zef. tried a simple thing, installing HTTP::Tiny. wondered if this says anything obv to y'all:

[00:01] <discord-raku-bot> <bancorn#1984> ```

[00:01] <discord-raku-bot> <bancorn#1984> [~/src/blockchain/tezos/raku]$ rm -rf /Users/jared/.zef/store/d31ded9e8b0651bd8babec0fcc39ff0a24625d51.tar.gz/

[00:01] <discord-raku-bot> <bancorn#1984> [~/src/blockchain/tezos/raku]$ zef install HTTP::Tiny

[00:01] <discord-raku-bot> <bancorn#1984> ===> Searching for: HTTP::Tiny

[00:01] <discord-raku-bot> <bancorn#1984> ===> Testing: HTTP::Tiny:ver<0.1.8>:auth<zef:jjatria>

[00:01] <discord-raku-bot> <bancorn#1984> [HTTP::Tiny] The spawned command 'touch' exited unsuccessfully (exit code: 1, signal: 0)

[00:01] <discord-raku-bot> <bancorn#1984> [HTTP::Tiny]   in method mirror at /Users/jared/.zef/store/store/d31ded9e8b0651bd8babec0fcc39ff0a24625d51.tar.gz/lib/HTTP/Tiny.rakumod (HTTP::Tiny) line 185

[00:01] <discord-raku-bot> <bancorn#1984> [HTTP::Tiny]   in block <unit> at t/mirror.t line 55

[00:01] <discord-raku-bot> <bancorn#1984> ===> Testing [FAIL]: HTTP::Tiny:ver<0.1.8>:auth<zef:jjatria>

[00:01] <discord-raku-bot> <bancorn#1984> Aborting due to test failure: HTTP::Tiny:ver<0.1.8>:auth<zef:jjatria> (use --force-test to override)

[00:01] <discord-raku-bot> <bancorn#1984> [~/src/blockchain/tezos/raku]$ zef --version

[00:06] <discord-raku-bot> <bancorn#1984> I got it.. aborted due to a test failure. But doing a `--force-test` override let it install, and use a method

[04:06] *** [Coke] left
[04:06] *** [Coke] joined
[07:43] <discord-raku-bot> <avuserow#1203> Looks like the failure is in the `mirror` method. I would expect that to fail for you. (Or maybe the test was trying to mirror something where it didn't have permissions)

[07:46] *** dakkar joined
[10:08] <discord-raku-bot> <gfldex#8222> <@!694526400488669234> Did you try Grammar::Debugger to check if it parses differently?

[10:09] <discord-raku-bot> <Anton Antonov#7232> <@!195453211409121280> No, I have not. I will try that. (I just installed `Grammar::Profiler::Simple` for more-or-less the same reasons.)

[15:07] <[Coke]> If we want LSP support, should probably open a ticket in the "problem solving" repo

[16:40] *** dakkar left
[18:14] <discord-raku-bot> <Nemokosch#9980> It would be nice üôÇ

[18:15] <discord-raku-bot> <Nemokosch#9980> By the way... I want to do some sed-style substitution. What characters do I need to escape? How much does it differ from sed?

[18:18] <discord-raku-bot> <avuserow#1203> in regexes, there's three kinds of characters, roughly:

[18:18] <discord-raku-bot> <avuserow#1203> * alphanumeric - defaults to literal meaning, escaped has special meaning

[18:18] <discord-raku-bot> <avuserow#1203> * symbols - defaults to special meaning, must be quoted or escaped to match the literal character

[18:18] <discord-raku-bot> <avuserow#1203> * whitespace - defaults to ignored, must be quoted or escaped to match the literal character

[18:19] <discord-raku-bot> <avuserow#1203> alphanumeric includes underscore, so it's probably 1:1 with the `\w` character class

[18:20] <discord-raku-bot> <Nemokosch#9980> thank you very much üôÇ it's more logical than sed where ( ) + would go to the first group. I will pay attention to that

[18:22] <discord-raku-bot> <avuserow#1203> yeah, raku grammars and regexes are great. much more consistent even if it's difficult to unlearn the old habits of other tools

[18:22] <discord-raku-bot> <Nemokosch#9980> also Raku uses $1 $2 $3 over \1 \2 \3 right? like Perl I think

[18:23] <discord-raku-bot> <avuserow#1203> https://docs.raku.org/language/regexes - might be of interest

[18:23] <discord-raku-bot> <avuserow#1203> and yes, raku uses the numeric variables, though I think it starts counting from 0.

[18:24] <discord-raku-bot> <avuserow#1203> m: "foobar" ~~ /(o)/; say $0; say $1;

[18:24] <discord-raku-bot> <avuserow#1203> probably needs a `:g` flag to get the second match, I keep forgetting that

[18:24] <discord-raku-bot> <Nemokosch#9980> so $0 is not the whole matching string? that's strange

[18:26] <discord-raku-bot> <avuserow#1203> well, `$0 $1 etc` are equivalent to `$/[0] $/[1] etc`, and that object is the result, so you're indexing into the list of matches

[18:27] <discord-raku-bot> <Nemokosch#9980> where is the whole string then? üòÑ

[18:28] <discord-raku-bot> <lakmatiol#8020> matching on a string will return a list of all matching substrings, captures are stored elsewhere

[18:30] <discord-raku-bot> <avuserow#1203> [Coke]: definitely a good idea. if we want editor integration then LSP is the way to go these days since you get support for basically every editor with one implementation.

[18:31] <discord-raku-bot> <Nemokosch#9980> okay so it was indeed the whole matching string actually ü§î

[18:32] <discord-raku-bot> <avuserow#1203> ah, yeah, in my example I was only matching a single character at a time

[18:32] <discord-raku-bot> <Nemokosch#9980> that coincided with the capture group

[18:32] <discord-raku-bot> <avuserow#1203> m: "foobar" ~~ m:g/(o)/; dd $/; # I should've written something more like this

[18:33] <discord-raku-bot> <avuserow#1203> m: "foobar" ~~ m:g/(o); say $0; say $1;

[18:33] <discord-raku-bot> <avuserow#1203> m: "foobar" ~~ m:g/(o)/; say $0; say $1;

[18:33] <discord-raku-bot> <avuserow#1203> like that. ‚òùÔ∏è

[18:34] <discord-raku-bot> <Nemokosch#9980> I'm quite confused at this point, it's time to try it out xD

[18:35] <discord-raku-bot> <avuserow#1203> so $0 $1 etc are Match objects. this makes it easy to get other details beyond just the text, like the character positions and the original string. definitely give it a try

[18:36] <discord-raku-bot> <avuserow#1203> and if you just want the text, you can do `$0.Str`. I find this a bit less ergonomic than perl and I keep forgetting it, but it's way more powerful. and I wouldn't be surprised if there's some better way to get the match text

[18:39] <discord-raku-bot> <Nemokosch#9980> Gotcha

[18:40] <discord-raku-bot> <Nemokosch#9980> It makes sense but it's definitely different from what I used to in sed and also in Python

[18:40] <discord-raku-bot> <Nemokosch#9980> It makes sense but it's definitely different from what I'm used to in sed and also in Python

[18:47] <discord-raku-bot> <lakmatiol#8020> this is pretty close to python, just think of it like using findall by default and getting the list as a result in $/

[19:21] <discord-raku-bot> <Nemokosch#9980> when exactly can parentheses be left off? I just realized that $fh.seek(0) worked for me while $fh.seek 0 didn't

[19:24] <discord-raku-bot> <avuserow#1203> assuming you don't need them for precedence purposes, you can leave them off for function calls, and method calls with no arguments. method calls with arguments need them.

[19:25] <discord-raku-bot> <avuserow#1203> method calls without parens can also be written as: `$fh.seek: 0`

[19:25] <discord-raku-bot> <Nemokosch#9980> wow üëÄ

[19:26] <discord-raku-bot> <Nemokosch#9980> also while we are at it - can I call seek like a bare function or am I going too far? seek($fh, 0) or something similar

[19:27] <discord-raku-bot> <avuserow#1203> only if `seek` is defined as a function in addition to a method. looking at https://docs.raku.org/routine/seek, I only see it available as `method`, so not that one

[19:28] <discord-raku-bot> <avuserow#1203> functions like `join`, `split`, `push`, `pop`, are available as both though, so you can write: `(1..10).join(", ")` or `join(", ", 1..10)`

[19:29] <discord-raku-bot> <avuserow#1203> if you look at https://docs.raku.org/routine/join, you can see `sub    join($separator, *@list)` . maybe best just to `ctrl+f sub` on those pages.

[19:30] <discord-raku-bot> <Nemokosch#9980> that's where the question emerged from üòÑ

[19:31] <discord-raku-bot> <avuserow#1203> yeah, no magic here, just code defined as both methods and subroutines. üôÇ

[19:46] <discord-raku-bot> <Nemokosch#9980> Sorry for the question overload, I'm trying to do a little text processing

[19:47] <discord-raku-bot> <Nemokosch#9980> I have the following scenario: there is a C file that contains a certain preprocessor instruction (#if CPX for the matter) and the inside is always Pascal code

[19:47] <discord-raku-bot> <Nemokosch#9980> I have certain substitutions for turning the Pascal code into C code

[19:48] <discord-raku-bot> <Nemokosch#9980> and I can match the inside of this preprocessor instruction

[19:48] <discord-raku-bot> <Nemokosch#9980> how can I substitute the matching part for the result of my own substitution set if I don't want to do that all inline?

[19:51] <discord-raku-bot> <Nemokosch#9980> I suppose I should iterate over the matchings and then make some kind of call on them

[19:53] <discord-raku-bot> <avuserow#1203> if you have one match object at a time, then you can use Match.replace-with: https://docs.raku.org/type/Match#method_replace-with

[19:54] <discord-raku-bot> <avuserow#1203> I suspect if you tried to use it on several match objects, it would get confused on the lengths. you could manage those offsets yourself, or maybe you can do a while loop with your regex

[19:55] <discord-raku-bot> <avuserow#1203> another idea is to use `split` on the document, and keep the delimiters. then you can operate on each chunk and join it back together

[19:57] <discord-raku-bot> <avuserow#1203> m: my $s = "a-b-c-d"; my @parts = $s.split("-", :v); for @parts {$_ = "_" if $_ eq "-"}; $s = join "", @parts; say $s; # long-winded way to replace dashes with underscores

[19:57] <discord-raku-bot> <Nemokosch#9980> Oh, I think I found something...

[19:57] <discord-raku-bot> <Nemokosch#9980> s// can apparently handle function calls üëÄ

[19:57] <discord-raku-bot> <avuserow#1203> oof, discord ate some of my underscores. `my $s = "a-b-c-d"; my @parts = $s.split("-", :v); for @parts {$_ = "_" if $_ eq "-"}; $s = join "", @parts; say $s;`

[19:58] <discord-raku-bot> <avuserow#1203> oh yeah that's always an option too üôÇ

[19:58] <discord-raku-bot> <Nemokosch#9980> That's a pretty badass option actually üòÑ

[19:59] <discord-raku-bot> <Nemokosch#9980> I like how one can get used to these pleasant surprises with Raku

[20:13] <discord-raku-bot> <Nemokosch#9980> and I should use $/.Str as an argument probably

[20:13] <discord-raku-bot> <Nemokosch#9980> or well, $/ but eventually I will only act on the matching string I think

[20:54] <discord-raku-bot> <Nemokosch#9980> How do I pass a parameter as rw?

[20:56] <discord-raku-bot> <Nemokosch#9980> hm, or maybe my function declaration should mark this and then it would work?

[20:57] <discord-raku-bot> <Nemokosch#9980> seems like that's the right approach

[22:20] <discord-raku-bot> <Nemokosch#9980> hm, wait

[22:20] <discord-raku-bot> <Nemokosch#9980> subst doesn't set $/

[22:45] <discord-raku-bot> <Nemokosch#9980> ooh okay... now this wasn't very intuitive...

[22:46] <discord-raku-bot> <Nemokosch#9980> the replacement can be a string that can interpolate all random values stuck in $0 or $/

[22:46] <discord-raku-bot> <Nemokosch#9980> that's not the same as using a string _inside a callable_ where those variables DO get updated

[22:47] <discord-raku-bot> <Nemokosch#9980> not very obvious when all the difference between an interpolated string and a callable is a pair of brackets

[23:36] <discord-raku-bot> <Nemokosch#9980> Anyways, I was quite satisfied with the outcome üòÑ

[23:37] <discord-raku-bot> <Nemokosch#9980> I have learned a lot and if I were to do this by hand, it would have taken not less time. The file was several thousands of lines and the relevant parts were all over the place

