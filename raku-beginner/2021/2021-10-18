[02:15] *** mahafyi left
[04:14] *** mahafyi joined
[04:30] *** gfldex left
[04:30] *** gfldex joined
[07:53] *** dakkar joined
[09:23] <mfiano> What does the root object Mu stand for/mean?

[09:25] <lizmat> Most Undefined

[09:25] <mfiano> Thanks. Also what does the U type smiley stand for?

[09:25] <lizmat> Undefined

[09:26] <lizmat> I guess that's really a holdover from Perl  :-)

[09:26] <mfiano> The docs mention not to confused defined with definite. So does the D smiley stand for Defined then? I had assumed Definite

[09:26] <lizmat> I guess nowadays it would be a :T for type object, and :I for instantiated  :-)

[09:27] <lizmat> definite

[09:27] <lizmat> m: sub a(Failure:D) { }; a Failure.new

[09:27] <lizmat> well, that works :-)

[09:28] <lizmat> say Failure.new.defined   # False

[09:28] <mfiano> Right, Failure is a special case. I just find it odd that :U is not symmetrical like :I[ndefinite] :)

[09:28] <lizmat> any class can be a special case, if they override the .defined and .Bool methods  :-)

[09:28] <mfiano> Right

[09:29] <discord-raku-bot> <Nemokosch#9980> what's the difference between defined and definite then?

[09:30] <lizmat> basically, definite means that it is not a type object, that it is an instance

[09:30] <lizmat> .defined is *usually* the same, but can be overridden

[09:30] <mfiano> https://docs.raku.org/type/Signature

[09:30] <mfiano> search for "definedness"

[09:30] <lizmat> say Failure.new.DEFINITE   # True

[09:31] <lizmat> say Failure.new.defined   # False

[09:31] <discord-raku-bot> <Nemokosch#9980> what is a "type object" then?

[09:32] <lizmat> class Foo {}    # Foo is a type object

[09:32] <lizmat> class Foo { };  my $foo = Foo.new;   # $foo is an instantiated object of type Foo

[09:33] <lizmat> everything in Raku is an object, or has an object representing it (e.g. in the case of native integers)

[09:34] <discord-raku-bot> <Nemokosch#9980> hm, this terminology doesn't sound too helpful or even useful

[09:38] <mfiano> An instance and a type smartmatch to a type. This is not always what you want in a signature object, so you can use type smiley's to choose either definite or indefinite objects.

[09:42] <mfiano> # Str ~~ Str # True

[09:43] <mfiano> # Str ~~ Str:D # False

[09:43] <mfiano> If you add a type constraint to an optional parameter for example, and it is not supplied as an argument and doesn't have a default value, it receives the type object as its value

[09:44] <mfiano> There are many cases where this is not what you want

[09:51] *** mahafyi left
[10:26] <discord-raku-bot> <Nemokosch#9980> > If you add a type constraint to an optional parameter for example, and it is not supplied as an argument and doesn't have a default value, it receives the type object as its value

[10:26] <discord-raku-bot> <Nemokosch#9980> what the hell, why?

[10:29] <mfiano> Because all parameters have values, even if they are un-used in the body block

[10:29] <mfiano> This goes in hand with the Smalltalk inspiration of everything being an object

[10:36] <discord-raku-bot> <Nemokosch#9980> "everything is an object" fundamentally applies to Python and Javascript as well, I don't think it follows that an unused value should get an incompatible random value

[10:36] <discord-raku-bot> <Nemokosch#9980> In this regard, the None and undefined values seem much more fitting

[10:37] <mfiano> Sure, but they came a few decades later :-)

[10:38] <discord-raku-bot> <Nemokosch#9980> Raku also came a few decades later 😄

[10:38] <mfiano> and Smalltalk got it from Lisp

[10:38] <discord-raku-bot> <Nemokosch#9980> I mean, just because it's in Smalltalk, I don't think it automatically turns into reasonable behavior

[10:39] <discord-raku-bot> <Nemokosch#9980> and the quoted part (about the type object being implicitly the default value) sounds like plain madness to me

[10:40] <mfiano> Maybe lizmat or somebody can explain why it is reasonable. My opinion is probably too biased to explain it properly, having used Lisp for more than 20 years.

[10:41] <discord-raku-bot> <Nemokosch#9980> It would make more sense in Javascript as a prototype based language but then again, "undefined means missing" still makes more sense than shifting between an "instance object" and a "type object" back and forth which are conceptionally different

[10:41] <lizmat> my Int $a; say $a;   # Nemokosch: what do you expect that to say ?

[10:42] <discord-raku-bot> <Nemokosch#9980> either 0 or an equivalent to undefined, I leave this up to one's temperament

[10:42] <mfiano> I guess my Lispy answer to that would be: Nil

[10:42] <mfiano> But I know its (Int)

[10:42] <lizmat> say Int.defined   # what do you expect that to say

[10:43] <discord-raku-bot> <Nemokosch#9980> I don't feel like I need that so I can't answer

[10:44] <lizmat> well, Int is "an equivalent to undefined"   in Raku

[10:44] <lizmat> as are all type objects

[10:44] <discord-raku-bot> <Nemokosch#9980> the question is: why? it's on a different conceptual level

[10:45] <discord-raku-bot> <Nemokosch#9980> the Int type shouldn't be of Int type

[10:45] <discord-raku-bot> <Nemokosch#9980> and that's what it suggests

[10:46] <discord-raku-bot> <Nemokosch#9980> let's approach this differently, from the pragmatic side

[10:47] <discord-raku-bot> <Nemokosch#9980> when is this the behavior that one wants for a lacking Int value?

[10:47] <lizmat> well, actually, Int is an instance of Perl6::Metamodel::ClassHOW

[10:48] <lizmat> well, it expresses an unfulfilled expectation

[10:48] <mfiano> If you supply a type constraint it can't be undefined, or the bottom type, or anything by definition.

[10:48] <mfiano> If you don't supply a type constraint, it becomes Any

[10:49] <lizmat> my Int $a; say $a    # if that would say anything but (Int), it would mean that type checking is broken, as you've indicated you wanted to constrain to Int types

[10:49] <lizmat> if you really want to make lack of a value an issue, you should constrain to instances

[10:50] <lizmat> my Int:D $a  # Variable definition of type Int:D needs to be given an initializer

[10:50] <mfiano> Well said

[10:51] <discord-raku-bot> <Nemokosch#9980> > well, it expresses an unfulfilled expectation

[10:51] <discord-raku-bot> <Nemokosch#9980> That's what None, Nil, undefined all express without setting an unintuitive type structure

[10:53] <lizmat> my Int:D $a = Nil # Type check failed in assignment to $a; expected Int:D but got Int (Int) (perhaps Nil was assigned to a :D which had no default?)

[10:54] <discord-raku-bot> <Nemokosch#9980> I've never been a big fan of static typing "for the sake of it", I feel we are bumping into conceptional issues again

[10:54] <lizmat> my Int:D $a is default(42) = Nil; say $a   # 42

[10:54] <lizmat> my Int:D $a is default(42); say $a   # 42

[10:55] <lizmat> Nemokosch: I guess we can agree that we disagree on the sensibility of of Raku types / constraints / signature binding works

[10:55] <lizmat> but I think you're about 18 years late in this discussion

[10:56] <discord-raku-bot> <Nemokosch#9980> it's important to draw attention to questionable decisions as well though

[10:57] <discord-raku-bot> <Nemokosch#9980> > if that would say anything but (Int), it would mean that type checking is broken, as you've indicated you wanted to constrain to Int types

[10:57] <discord-raku-bot> <Nemokosch#9980> this seems to be the only argument and well, this argument is very implementation-oriented

[10:57] <lizmat> Nemokosch: a Pull Request tells more than a thousand words

[10:58] <lizmat> if you think it should be different, please make an issue in the problem solving repo

[10:58] <lizmat> https://github.com/raku/problem-solving

[11:02] <discord-raku-bot> <Nemokosch#9980> so just to get this straight

[11:03] <discord-raku-bot> <Nemokosch#9980> ```perl

[11:03] <discord-raku-bot> <Nemokosch#9980> my Int $a;

[11:03] <discord-raku-bot> <Nemokosch#9980> ```

[11:03] <discord-raku-bot> <Nemokosch#9980> on this, I can call .new

[11:04] <lizmat> yes

[11:04] <discord-raku-bot> <Nemokosch#9980> that's pretty interesting by itself if this isn't a prototype-based language but okay, apparently you can call .new on any integer value

[11:04] *** samebchase joined
[11:05] <lizmat> you can call .new on anything in Raku, even native types  :-)

[11:05] <discord-raku-bot> <Nemokosch#9980> ```perl

[11:05] <discord-raku-bot> <Nemokosch#9980> > $a.^name

[11:05] <discord-raku-bot> <Nemokosch#9980> Int

[11:05] <discord-raku-bot> <Nemokosch#9980> ```

[11:05] <discord-raku-bot> <Nemokosch#9980> wait for a second

[11:06] <mfiano> True.new # False :-)

[11:06] <discord-raku-bot> <Nemokosch#9980> do instance objects straight up cover the whole interface of a type object then?

[11:06] <lizmat> well, enums are special in that respect  :-)

[11:07] <lizmat> mfiano: but that's effectively Bool.new

[11:07] <discord-raku-bot> <Nemokosch#9980> if they do, it can work consistently at the end of the day

[11:08] <lizmat> instance objects *can* cover up the whole interface if they want to, yes

[11:08] <lizmat> it all depends whether the class has different multi-methods for instantiated invocants and type object as the invocant

[11:08] <lizmat> (or handles that in code inside an only method)

[11:11] <discord-raku-bot> <Nemokosch#9980> I mean, it seems like the approach is the other way around than I imagined

[11:12] <discord-raku-bot> <Nemokosch#9980> it's much more like everything is a kind of prototype

[11:13] <lizmat> you could argue that, yes

[11:16] <discord-raku-bot> <Nemokosch#9980> or maybe it's more fitting to say given the context, value objects can "collapse into" the corresponding type object?

[11:18] <discord-raku-bot> <Nemokosch#9980> when True.new works and returns False, is it more like a conversion from True to Bool or True itself "does Bool"?

[11:19] <lizmat> actually, I never considered calling .new on Enums...  so I would need to think a out that

[11:32] <mfiano> Hmm, I could use some clarification on a section of the class tutorial: https://docs.raku.org/language/classtut#The_also_declarator

[11:33] <mfiano> In reading that, it is unclear to me what prefixing "also" actually does, or if it is no different than simply "is ..."

[11:34] *** camelia joined
[11:34] <mfiano> Oh I see, it is inside the block

[11:34] <mfiano> Hmm, not sure what this solves.

[11:35] <mfiano> m: say "Hi, camelia!"

[11:35] <camelia> rakudo-moar 1d8bf66a5: OUTPUT: «Hi, camelia!␤»

[11:38] <lizmat> mfiano: I don't recall why "also" still exists, but I think it has to do with giving you some compile time flexibility in deciding on class hierarchy

[11:38] <mfiano> That makes sense.

[11:38] <lizmat> morirz++

[11:48] *** mahafyi joined
[11:51] <discord-raku-bot> <Morfent#9811> m:```

[11:51] <discord-raku-bot> <Morfent#9811> role Lazy {

[11:51] <discord-raku-bot> <Morfent#9811>     # use ...;

[11:51] <discord-raku-bot> <Morfent#9811>     also is #`[...] Int;

[11:51] <discord-raku-bot> <Morfent#9811> };

[11:51] <discord-raku-bot> <Morfent#9811> say Lazy.new;

[11:51] <discord-raku-bot> <Morfent#9811> ```

[11:51] <discord-raku-bot> <Morfent#9811> lazy module loading in the case of roles

[11:52] <lizmat> if you call .new on a Role, It will get punned into an anonymous class with the same name, and have .new called on that

[11:58] <discord-raku-bot> <Morfent#9811> i wonder if i can take advantage of this in `Data::Record`...

[11:58] <discord-raku-bot> <Morfent#9811> that module takes forever to precomp

[13:29] <discord-raku-bot> <Morfent#9811> another way to defer module loading is `role ...[::T] does T` parameterized by a `require`d type

[13:30] <discord-raku-bot> <Morfent#9811> that helps according to `raku --stagestat`, but parsing still takes a long time

[13:30] <discord-raku-bot> <Morfent#9811> maybe the module's too monolithic

[13:32] <discord-raku-bot> <Morfent#9811> that helps according to `raku --stagestats`, but parsing still takes a long time

[14:39] *** mjgardner_ is now known as mjgardner

[16:51] *** dakkar left
[18:25] <gfldex> mfiano, Nemokosch#9980 please note that (almost) any assumption can be broken in Raku

[18:25] <gfldex> consider: (my $oddject = Metamodel::ClassHOW.new_type(name => "")).&{.^add_method('FALLBACK', method ($name) { 'cheating' }); .^compose};

[19:30] <discord-raku-bot> <Nemokosch#9980> oddject xD

[23:14] *** colemanx joined
[23:15] <colemanx> Hello everyone. I've written a grammar, and it seems to have pinned a cpu, and my program doesn't finish.

[23:16] <colemanx> Here is the github gist: https://envs.sh/AN

[23:17] <colemanx> There is some sample data attached there, as well. I am familiar with regex, but not sure why the program doesn't finish.

[23:20] <[Coke]> what are you passing as the path?

[23:22] <[Coke]> oh, data.

[23:30] <[Coke]> I recommend using Grammar::Debugger.

[23:30] <[Coke]> if you install that and use it in your program, you can see that it matches the first sep, and then tries to match an item and immediately goes into the weeds

[23:40] <[Coke]> also: "item" is apparently special, don't use that as a name.

[23:41] <[Coke]> once it starts parsing, you start getting errors about wrong number of args because it's trying to give it to a different item.

[23:42] <[Coke]> https://gist.github.com/coke/f1d594983af0ae826b7f4c3cbc235608

[23:56] <colemanx> Thank you, I was afk for a bit, but I'll install Grammar:Debugger

