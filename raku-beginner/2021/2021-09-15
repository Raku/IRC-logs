[08:00] *** dakkar joined
[13:34] <discord-raku-bot> <Anton Antonov#7232> What does this declaration within a class mean: `has $.var0 of Str;` ? Is it the same as `has Str $.var0;` ?

[13:37] <lizmat> yeah, at least the BUILDPLAN for that class looks identical  :-)

[13:37] <discord-raku-bot> <Anton Antonov#7232> @lizmat Thank you!

[13:48] <discord-raku-bot> <Anton Antonov#7232> What is the most concise way to "transpose" a hash of hashes? I.e. from (h1) `{female => {died => 127, survived => 339}, male => {died => 682, survived => 161}}` to obtain (h2) `{died => {female => 127, male => 682}, survived => {female => 339, male => 161}}`? I can, of course, use for-loop / map, etc., but I strongly suspect there are better solutions...

[13:52] <lizmat> my %h2 = %h1.map: { .key => .value<died> }

[13:53] <lizmat> ah, no

[13:56] * lizmat draws a blank on not using a .map  :-)

[14:39] <discord-raku-bot> <gfldex#8222> m:```

[14:39] <discord-raku-bot> <gfldex#8222> my %h1 = female => {died => 127, survived => 339}, male => {died => 682, survived => 161};

[14:39] <discord-raku-bot> <gfldex#8222> say %h1{*;'died'}:kv;

[14:39] <discord-raku-bot> <gfldex#8222> ```

[14:40] <discord-raku-bot> <gfldex#8222> That one needs v6.* to work. Also, this is just the first step.

[14:41] <gfldex> lizmat: this is a usecase for https://gist.github.com/gfldex/381b402a5356bd97fb2ff7194a25dd96

[14:41] <gfldex> the {**}:deepkv case

[14:43] <discord-raku-bot> <gfldex#8222> m:```

[14:43] <discord-raku-bot> <gfldex#8222> use v6.*;

[14:43] <discord-raku-bot> <gfldex#8222> my %h1 = female => {died => 127, survived => 339}, male => {died => 682, survived => 161};

[14:43] <discord-raku-bot> <gfldex#8222> say %h1{*;'died'}:kv;

[14:43] <discord-raku-bot> <gfldex#8222> ```

[14:47] <discord-raku-bot> <gfldex#8222> actually, we got fixed dimensions, so we should not need the hyperwhatever

[14:49] <discord-raku-bot> <Nahita#3882> what is the meaning of a variable without a twigil declared with `has`? e.g. `class A { has $val }`.

[14:50] <discord-raku-bot> <Nahita#3882> I saw it in this answer: https://stackoverflow.com/questions/62968829/returning-a-raw-scalar-container-from-at-pos-method-rather-than-a-proxy-insta/62969222#62969222

[14:51] <discord-raku-bot> <Nahita#3882> I saw it in this answer: https://stackoverflow.com/a/62969222

[14:52] <discord-raku-bot> <Anton Antonov#7232> <@!195453211409121280> With raku(do) version 2021.06 I get `%res{*;'died'} --> (682 127)`, i.e. I cannot use `kv`.

[14:56] <discord-raku-bot> <gfldex#8222> <@!694526400488669234> you need to add `use v6.*` to get the .e_PREVIEW, but the june release might also be to old

[14:57] <discord-raku-bot> <gfldex#8222> m:```

[14:57] <discord-raku-bot> <gfldex#8222> my %h1 = female => {died => 127, survived => 339}, male => {died => 682, survived => 161};

[14:57] <discord-raku-bot> <gfldex#8222> say (%h1{*;*}:kv).flat.rotor(3)».[1,0,2]».map({ $^a => $^b => $^c});

[14:57] <discord-raku-bot> <gfldex#8222> ```

[14:57] <discord-raku-bot> <gfldex#8222> m:```

[14:57] <discord-raku-bot> <gfldex#8222> use v6.*;

[14:57] <discord-raku-bot> <gfldex#8222> my %h1 = female => {died => 127, survived => 339}, male => {died => 682, survived => 161};

[14:57] <discord-raku-bot> <gfldex#8222> say (%h1{*;*}:kv).flat.rotor(3)».[1,0,2]».map({ $^a => $^b => $^c});

[14:57] <discord-raku-bot> <gfldex#8222> ```

[14:57] <discord-raku-bot> <Anton Antonov#7232> <@!195453211409121280>  Ok, thanks -- I was looking into what "rakudo star" means...

[14:58] <discord-raku-bot> <gfldex#8222> that's how far I got. I don't think we got an easy way to assign that directly to a Hash. At least it gives me an idea what `%h{**} = (survived => male => 161) (died => male => 682) (died => female => 127) (survived => female => 339)` would mean.

[15:08] <discord-raku-bot> <gfldex#8222> m:```

[15:08] <discord-raku-bot> <gfldex#8222> use v6.*;

[15:08] <discord-raku-bot> <gfldex#8222> my %h1 = female => {died => 127, survived => 339}, male => {died => 682, survived => 161};

[15:08] <discord-raku-bot> <gfldex#8222> my %h2;

[15:08] <discord-raku-bot> <gfldex#8222> for (%h1{*;*}:kv).flat.rotor(3)».[1,0,2] -> [ $k1, $k2, $v ] {

[15:08] <discord-raku-bot> <gfldex#8222>     %h2{||[$k1, $k2]} = $v;

[15:08] <discord-raku-bot> <gfldex#8222> }

[15:08] <discord-raku-bot> <gfldex#8222> say %h2;

[15:08] <discord-raku-bot> <gfldex#8222> ```

[15:08] <discord-raku-bot> <gfldex#8222> there you go :)

[15:09] <discord-raku-bot> <gfldex#8222> I didn't know that `||<key1 key2>` worked.

[15:10] <discord-raku-bot> <gfldex#8222> <@!694526400488669234> The following blogpost might help to understand what is going on. This is a case where we need to change to order of keys in a deepkey. https://gfldex.wordpress.com/2021/07/11/contextual-addition/

[15:22] *** discord-raku-bot left
[15:22] *** discord-raku-bot joined
[15:23] *** discord-raku-bot left
[15:23] *** discord-raku-bot joined
[16:48] *** dakkar left
[17:01] <discord-raku-bot> <Nahita#3882> here is another for-loop based solution:

[17:01] <discord-raku-bot> <Nahita#3882> m:```

[17:01] <discord-raku-bot> <Nahita#3882> my %h1 := {female => {died => 127, survived => 339}, male => {died => 682, survived => 161}};

[17:01] <discord-raku-bot> <Nahita#3882> my %h-new;

[17:01] <discord-raku-bot> <Nahita#3882> for %h1.values.first.keys X %h1.keys -> ($new-key, $current-key) {

[17:01] <discord-raku-bot> <Nahita#3882>     %h-new{$new-key}{$current-key} = %h1{$current-key}{$new-key};

[17:01] <discord-raku-bot> <Nahita#3882> }

[17:01] <discord-raku-bot> <Nahita#3882> say %h-new;

[17:01] <discord-raku-bot> <Nahita#3882> ```

[17:03] <discord-raku-bot> <Nahita#3882> `%h1.values.first.keys` gets the keys of each inner hash (`died, survived`) and then it is cross producted with the current keys (`female, male`) to help form the transposed hash.

[22:52] *** Polyinsecure joined
[23:15] *** Polyinsecure left
