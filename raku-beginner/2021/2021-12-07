[00:03] *** riffraff joined
[00:08] *** riffraff left
[00:20] <discord-raku-bot> <Nemokosch#9980> btw

[00:20] <discord-raku-bot> <Nemokosch#9980> Bag.new and .Bag also don't behave the same way

[00:20] <discord-raku-bot> <Nemokosch#9980> ((1,2), (2,3)).Bag flattens

[00:20] <discord-raku-bot> <Nemokosch#9980> so it will have elements like 1 2 3

[00:20] <discord-raku-bot> <Nemokosch#9980> While Bag.new would keep the lists as the elements

[00:46] <discord-raku-bot> <Nemokosch#9980> moreover Bag.new doesn't count the duplicates

[00:48] <discord-raku-bot> <Nemokosch#9980> this is a bit cruel. It compares with === and (1,2) fails on that, no matter that it's immutable

[00:48] <discord-raku-bot> <Nemokosch#9980> (1,2) !=== (1,2)

[00:53] <discord-raku-bot> <Nemokosch#9980> I can get by by converting the lists into pairs that do match by === but frankly, one would expect identity to work on plain immutable data

[00:55] <discord-raku-bot> <Nemokosch#9980> hm, it works with the data sigil!

[00:55] <discord-raku-bot> <Nemokosch#9980> \\(1,2) === \\(1,2)

[00:56] <discord-raku-bot> <gfldex#8222> I would be really careful to use `===`. You are in C-land if you do.

[00:57] <discord-raku-bot> <Nemokosch#9980> I don't use it - Bag does...

[00:57] <discord-raku-bot> <Nemokosch#9980> this leads to another question - what is (1,2) actually?

[00:57] <discord-raku-bot> <Nemokosch#9980> if it's apparently not the same as \\(1,2)

[00:57] <discord-raku-bot> <Nemokosch#9980> is it the same as @(1,2)?

[00:59] <discord-raku-bot> <gfldex#8222> Those are instances of `Capture`. Raku-Objects are just C-pointers under the hood. Since value objects are cached, they can return `True` on `===`.

[00:59] <discord-raku-bot> <Nemokosch#9980> they can whenever they feel like or are they guaranteed to?

[00:59] <discord-raku-bot> <gfldex#8222> if you do `1 === 1` you rely on the fact that the compiler reuses the object that is `1`.

[00:59] <discord-raku-bot> <gfldex#8222> The spec demands as such.

[00:59] <discord-raku-bot> <gfldex#8222> If you ask me to list all types that are considered values, I would be at a loss.

[01:01] <discord-raku-bot> <Nemokosch#9980> so I can call .Capture on a list to get this \\ version?

[01:02] <discord-raku-bot> <gfldex#8222> m: put (1,2,3,4).&{ say $_, $_}.Capture.raku;

[01:03] <discord-raku-bot> <gfldex#8222> m:```

[01:03] <discord-raku-bot> <gfldex#8222> put (1,2,3,4).&{ say $_, $_}.Capture.raku;

[01:03] <discord-raku-bot> <gfldex#8222> ```

[01:03] <discord-raku-bot> <gfldex#8222> m: (1,2,3,4).Capture.raku.put;

[01:07] <discord-raku-bot> <Nemokosch#9980> okay, this worked, thank you üôÇ

[01:28] <discord-raku-bot> <Nemokosch#9980> Can I get a downwards range?

[01:30] <discord-raku-bot> <Nemokosch#9980> in fact, the sequence operator will do just fine but I'm still curious

[01:34] *** parv joined
[01:34] <discord-raku-bot> <Nemokosch#9980> I wonder what happens when writing Z...

[01:34] <discord-raku-bot> <Nemokosch#9980> m: dd (8, 10) Z... (16, 2)

[01:34] <discord-raku-bot> <Nemokosch#9980> it seems to me that basically a plain zip call happens

[01:34] <discord-raku-bot> <Nemokosch#9980> Z.. produces ranges tho

[01:34] <discord-raku-bot> <Nemokosch#9980> m: dd (8, 10) Z.. (16, 2)

[01:38] <discord-raku-bot> <Nemokosch#9980> I'm pretty sure the former is related to list associativity again because I got an error for an $a ... $b Z $c ... $d kind of call

[01:59] <discord-raku-bot> <gfldex#8222> m: dd &infix:<..>;

[02:01] <discord-raku-bot> <gfldex#8222> I would have guessed that to be some grammar magic. It's operators all the way down. :)

[02:04] *** riffraff joined
[02:09] *** riffraff left
[04:05] *** riffraff joined
[04:10] *** riffraff left
[04:54] *** riffraff joined
[05:09] *** Kaiepi left
[05:09] *** Kaiepi joined
[09:10] *** dakkar joined
[10:00] *** parv left
[10:09] <discord-raku-bot> <Nemokosch#9980> How does ... work though?

[13:25] *** Kaipi joined
[13:27] *** Kaiepi left
[13:59] <discord-raku-bot> <gfldex#8222> m: &infix:<...>;

[14:00] <discord-raku-bot> <gfldex#8222> m: dd &infix:<...>;

[14:34] <discord-raku-bot> <Nemokosch#9980> hmmm

[14:34] <discord-raku-bot> <Nemokosch#9980> `(|)`

[14:50] <discord-raku-bot> <Nemokosch#9980> How can I unite lists?

[14:56] <discord-raku-bot> <lakmatiol#8020> `[|@a,|@b]` I have seen in the docs quite a bit

[15:05] <discord-raku-bot> <Nemokosch#9980> it works I guess... I kinda miss an operator for this

[15:55] <discord-raku-bot> <gfldex#8222> m:```

[15:55] <discord-raku-bot> <gfldex#8222> multi sub infix:¬´|,¬ª(\left, \right) is equiv(&infix:<Z>) { |left, |right }

[15:55] <discord-raku-bot> <gfldex#8222> ```

[16:59] *** TempIRCLogger left
[17:00] *** TempIRCLogger joined
[17:11] *** riffraff left
[17:11] *** riffraff joined
[17:11] *** TempIRCLogger left
[17:11] *** TempIRCLogger joined
[17:19] *** riffraff left
[17:20] *** riffraff joined
[17:25] *** riffraff left
[17:28] <SmokeMachine> m: my @a = 1,2,3; my @b = <a b c>; @a.push: |@b; say @a # if you want to mutate it...

[17:28] <camelia> rakudo-moar 6e457595a: OUTPUT: ¬´[1 2 3 a b c]‚ê§¬ª

[17:28] <SmokeMachine> m: my @a = 1,2,3; my @b = <a b c>; @a.append: @b; say @a

[17:28] <camelia> rakudo-moar 6e457595a: OUTPUT: ¬´[1 2 3 a b c]‚ê§¬ª

[17:37] *** dakkar left
[17:42] *** TempIRCLogger left
[17:42] *** TempIRCLogger joined
[17:48] *** riffraff joined
[17:52] <discord-raku-bot> <Nemokosch#9980> yes, I know that part

[17:52] <discord-raku-bot> <Nemokosch#9980> is there a placeholder argument in signatures, indicating that I don't care about a certain argument for the return value?

[17:56] <discord-raku-bot> <gfldex#8222> m: say sub subby($a, $, $b){}; subby(1,2,3);

[17:56] <discord-raku-bot> <Nemokosch#9980> oh fine

[17:57] *** TempIRCLogger left
[17:57] *** TempIRCLogger joined
[18:06] *** TempIRCLogger left
[18:06] *** TempIRCLogger joined
[18:25] *** riffraff left
[18:25] *** riffraff joined
[18:29] *** riffraff left
[18:30] *** TempIRCLogger left
[18:30] *** TempIRCLogger joined
[18:45] *** TempIRCLogger left
[18:45] *** TempIRCLogger joined
[19:23] *** riffraff joined
[19:58] *** riffraff left
[19:58] *** riffraff joined
[20:02] *** parv joined
[20:03] *** riffraff left
[20:48] *** colemanx left
[20:48] *** colemanx joined
[21:05] *** riffraff joined
[22:02] *** riffraff45 joined
[22:05] *** riffraff45 left
[22:05] *** riffraff45 joined
[22:06] *** riffraff left
[22:47] *** riffraff45 left
[22:47] *** riffraff45 joined
[22:52] *** riffraff45 left
[22:56] *** riffraff45 joined
[23:04] *** riffraff45 left
[23:05] *** riffraff45 joined
[23:05] *** riffraff45 left
[23:05] *** riffraff45 joined
[23:10] *** riffraff45 left
[23:25] *** jgaz joined
[23:35] *** riffraff45 joined
[23:45] *** riffraff45 left
