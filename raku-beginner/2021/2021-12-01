[00:00] *** discord-raku-bot left
[00:00] *** colemanx left
[00:00] *** discord-raku-bot joined
[00:03] *** getimiskon left
[00:05] *** getimiskon joined
[00:51] *** parv joined
[00:51] *** parv left
[00:51] *** parv joined
[01:00] *** colemanx joined
[01:06] <colemanx> How do I use run to spawn a subprocess in a particular working directory?

[01:11] <colemanx> ah i did it :) my $p = run 'ls', cwd => '/tmp';

[01:16] *** getimiskon left
[08:47] *** dakkar joined
[14:32] *** A26F64 joined
[15:14] *** riffraff joined
[15:37] <riffraff> hey everyone, forgive me for the dumb question, but I've just started to play with Raku :) .

[15:37] <riffraff> I was wondering, is there a way to apply an infix operator to all pairs in a list of pairs, other than explicitly using .map ?

[15:37] <riffraff> I have this

[15:37] <riffraff> (1,2,3,4).rotor(2 => 0).map: {$_[0] +$_[1]}

[15:37] <riffraff> I can avoid unpacking $_ with reduce,

[15:37] <riffraff> ...map: {[+] $_}

[15:37] <riffraff> but I think there should be a way to compress the block with something like

[15:37] <riffraff> ....map: infix:<+>

[15:37] <riffraff> but I can't find the appropriate incantation :)

[15:37] <riffraff> I also thought I could use

[15:37] <riffraff> ....map: * + *

[15:37] <riffraff> but the pair is not "unpacked" and so this doesn't work :/

[15:41] <lizmat> m: dd (1,2,3,4).rotor(2 => 0).map: {$_[0] +$_[1]}

[15:41] <camelia> rakudo-moar 57e1ed028: OUTPUT: «(3, 7).Seq␤»

[15:41] <lizmat> m: dd (1,2,3,4).rotor(2).map: {$_[0] +$_[1]}

[15:41] <camelia> rakudo-moar 57e1ed028: OUTPUT: «(3, 7).Seq␤»

[15:41] <lizmat> m: dd (1,2,3,4).rotor(2)>>.sum

[15:41] <camelia> rakudo-moar 57e1ed028: OUTPUT: «(3, 7)␤»

[15:41] <lizmat> riffraff ^^

[15:43] <riffraff> right, but that works because of the list.sum method, it wouldn't work with > or % for example (I think?)

[15:43] <lizmat> ah, indeed

[15:44] *** A26F64 left
[15:44] <lizmat> m: dd (1,2,3,4).rotor(2)>>.&infix:<%>

[15:44] <camelia> rakudo-moar 57e1ed028: OUTPUT: «($(1, 2), $(3, 4))␤»

[15:45] <lizmat> m: dd (1,2,3,4).rotor(2)>>.Slip>>.&infix:<%>

[15:45] <camelia> rakudo-moar 57e1ed028: OUTPUT: «(1, 2, 3, 4)␤»

[15:45] <lizmat> mmeh

[15:46] <lizmat> m: sub doit(@a) { [%] @a }; dd (1,2,3,4).rotor(2)>>.&doit

[15:46] <camelia> rakudo-moar 57e1ed028: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional but got Int (1)␤  in sub doit at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:46] <lizmat> meh

[16:58] <discord-raku-bot> <Morfent#9811> m:```

[16:58] <discord-raku-bot> <Morfent#9811> say &infix:<+>.signature;

[16:58] <discord-raku-bot> <Morfent#9811> say &infix:<%>.signature;

[16:58] <discord-raku-bot> <Morfent#9811> ```

[16:59] <discord-raku-bot> <Morfent#9811> m:```

[16:59] <discord-raku-bot> <Morfent#9811> say (1,2,3,4).map(&infix:<%>)

[16:59] <discord-raku-bot> <Morfent#9811> ```

[17:00] *** riffraff left
[17:04] <discord-raku-bot> <Morfent#9811> oh pairs

[17:41] *** dakkar left
[17:42] <qorg11> Equivalent to write something like while((c = read(fd, buf, 256)) > 0 ) in raku?

[17:42] <qorg11> I did while $c > 0 { 

[17:42] <qorg11> $c = cread(...); 

[17:42] <qorg11> }

[17:45] <lizmat> "file".IO.open(:bin).read(256)

[17:45] <lizmat> ?

[17:47] <lizmat> my $h = "1".IO.open(:bin); while $h.read(256) -> $buf { say $buf.elems }

[17:47] <lizmat> ?

[17:48] <qorg11> Well i didn't mean reading a file but setting a variable inside the while loop and evaluating it 

[17:49] <qorg11> Like you can do while((readline("> ")) != NULL)

[17:52] <lizmat> my $c = 42; while $c { ... }

[17:52] <lizmat> ??

[17:52] <lizmat> my $c = 42; while $c != 666 { ... }

[18:29] <qorg11> Can't i just use the return value from a function as the condition?

[18:29] <qorg11> And assign the return value (inside the condition) as the thing to evaluate?

[18:32] <qorg11> Yeah just figured it out

[18:32] <qorg11> https://ls.qorg11.net/files/QEeuRmhn/-.txt

[18:33] <qorg11> https://ls.qorg11.net/files/piPpWJlR/-.txt that especifially

[19:00] <lizmat> True < 10 ?

[19:00] <lizmat> guess that's true

[19:04] <discord-raku-bot> <Nemokosch#9980> what is this good for?

[19:44] <SmokeMachine> m: dd (1,2,3,4).rotor(2).map: -> ($a, $b) { $a + $b }

[19:44] <camelia> rakudo-moar 57e1ed028: OUTPUT: «(3, 7).Seq␤»

