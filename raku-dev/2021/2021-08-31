[00:02] *** reportable6 left
[00:35] *** Xliff joined
[00:55] *** frost joined
[01:04] *** reportable6 joined
[01:12] *** rakuUser left
[02:12] *** bloatable6 left
[02:12] *** squashable6 left
[02:12] *** sourceable6 left
[02:12] *** coverable6 left
[02:12] *** reportable6 left
[02:12] *** quotable6 left
[02:12] *** nativecallable6 left
[02:12] *** greppable6 left
[02:12] *** benchable6 left
[02:12] *** linkable6 left
[02:12] *** notable6 left
[02:12] *** statisfiable6 left
[02:12] *** committable6 left
[02:12] *** tellable6 left
[02:12] *** bisectable6 left
[02:12] *** shareable6 left
[02:12] *** releasable6 left
[02:12] *** unicodable6 left
[02:12] *** evalable6 left
[02:12] *** committable6 joined
[02:13] *** nativecallable6 joined
[02:13] *** greppable6 joined
[02:13] *** quotable6 joined
[02:13] *** tellable6 joined
[02:13] *** benchable6 joined
[02:14] *** linkable6 joined
[02:14] *** squashable6 joined
[02:14] *** notable6 joined
[02:14] *** evalable6 joined
[03:14] *** bisectable6 joined
[03:14] *** shareable6 joined
[03:14] *** coverable6 joined
[03:15] *** reportable6 joined
[03:15] *** sourceable6 joined
[04:03] *** discord-raku-bot left
[04:04] *** discord-raku-bot joined
[04:15] *** unicodable6 joined
[04:15] *** bloatable6 joined
[05:13] *** Xliff_ joined
[05:13] *** statisfiable6 joined
[05:17] *** Xliff left
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[06:13] *** releasable6 joined
[08:05] *** linkable6 left
[08:05] *** evalable6 left
[08:28] *** patrickb joined
[08:28] <patrickb> o/
[08:29] <patrickb> Can someone remove the Raku Con banner from raku.org?
[09:20] *** lizmat_ joined
[09:20] *** lizmat_ left
[09:20] *** lizmat_ joined
[09:23] *** lizmat left
[09:23] *** TempIRCLogger left
[09:24] *** lizmat_ left
[09:27] *** lizmat joined
[09:28] *** lizmat joined
[09:29] *** TempIRCLogger joined
[10:07] *** linkable6 joined
[10:08] *** evalable6 joined
[10:13] <nine> Oh darn. Setting RAKUDO_MAX_THREADS to anything doesn't have any effect. Why? Because we create the ThreadPoolScheduler object during the settings compilation.
[10:16] <MasterDuke> doh!
[10:16] <lizmat> ??   I think it is set during execution ?
[10:16] <lizmat> are you saying it gets serialized ?
[10:22] <nine> Apparently so. As can be seen by the absence of any "Created scheduler" message, when run with RAKUDO_SCHEDULER_DEBUG=1
[10:22] <lizmat> wow
[10:22] <lizmat> that's bad, I'd say?
[10:23] <lizmat>  but but the settings compilation doesn't do any shelling or start or anything async that I know of?
[10:24] <nine> Indeed. https://github.com/rakudo/rakudo/blob/master/src/core.c/core_prologue.pm6#L82
[10:28] <lizmat> WOT
[10:30] <nine> One can work around this somewhat with PROCESS::<$SCHEDULER> = my $*SCHEDULER = ThreadPoolScheduler.new(:max-threads(4));
[10:30] <lizmat> but, that's execution, is it not ?
[10:30] <nine> The documented way of just setting $*SCHEDULER is not enough
[10:30] <nine> But I still get the impression that 2 schedulers are active
[10:31] <nine> yes, I put that line into our service.pl6
[10:31] <MasterDuke> greppable6: ThreadPoolScheduler
[10:31] <greppable6> MasterDuke, 16 lines, 7 modules: https://gist.github.com/0733e291bae17252885a07c9d3dca659
[10:31] <MasterDuke> greppable6: SCHEDULER
[10:31] <greppable6> MasterDuke, 192 lines, 18 modules: https://gist.github.com/482740f5bdbb59850661fd9297e17f86
[10:56] *** squashable6 left
[10:58] *** squashable6 left
[11:06] *** sena_kun joined
[11:49] *** lizmat left
[11:50] *** lizmat joined
[11:50] *** lizmat left
[11:51] *** lizmat joined
[11:53] *** TempIRCLogger left
[11:54] *** lizmat left
[11:54] *** lizmat joined
[11:55] *** TempIRCLogger joined
[12:03] *** reportable6 left
[12:03] *** reportable6 joined
[12:21] <Geth> ¬¶ rakudo: b14d404a19 | (Elizabeth Mattijsen)++ | 2 files
[12:21] <Geth> ¬¶ rakudo: Make the default scheduler see RAKUDO_MAX_THREADS
[12:21] <Geth> ¬¶ rakudo: 
[12:21] <Geth> ¬¶ rakudo: Not sure why it wouldn't see this otherwise, as the other settings
[12:21] <Geth> ¬¶ rakudo: *are* apparently seen correctly.  Assume it is some weird bootstrap
[12:21] <Geth> ¬¶ rakudo: issue at process startup.
[12:21] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b14d404a19
[12:25] <MasterDuke> looks like a space was accidentally moved from https://github.com/rakudo/rakudo/commit/b14d404a19#diff-a5b97411e28b10af9e92da83ea610749917f65aa93711e2ff9e80152cb630bc7L807 to https://github.com/rakudo/rakudo/commit/b14d404a19#diff-c3225573b57c164bacf82518bf468869db5b0a6b4bd111c3f4a7a718b10bd252R1
[12:29] *** patrickb left
[12:39] *** patrickb joined
[12:42] *** AlexDaniel left
[12:45] *** AlexDaniel joined
[12:59] <MasterDuke> given that coercion parameters are so slow, should they be used in the core setting?
[13:00] <MasterDuke> e.g., https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L52
[13:00] <MasterDuke> m: use nqp; class A { has str $!value; submethod BUILD(Str() :$value = ""  --> Nil) { nqp::bindattr_s(self, A, q|$!value|, nqp::unbox_s($value)) }; method Str(A:D:) { self }; }; my $a; $a := A.new(:value($_)) for ^1_000_000; say now - INIT now; say $a
[13:00] <camelia> rakudo-moar b14d404a1: OUTPUT: ¬´1.684516707‚ê§A.new‚ê§¬ª
[13:01] <MasterDuke> m: use nqp; class A { has str $!value; submethod BUILD(:$value = ""  --> Nil) { nqp::bindattr_s(self, A, q|$!value|, nqp::unbox_s($value.Str)) }; method Str(A:D:) { self }; }; my $a; $a := A.new(:value($_)) for ^1_000_000; say now - INIT now; say $a
[13:01] <camelia> rakudo-moar b14d404a1: OUTPUT: ¬´1.033107545‚ê§A.new‚ê§¬ª
[13:06] *** rakuUser joined
[13:19] *** Xliff_ left
[13:29] *** Xliff joined
[13:37] *** frost left
[13:45] <lizmat> MasterDuke: that would only apply to someone doing Str.new
[13:45] <lizmat> which not many people are ?
[13:45] <lizmat> but yeah
[13:45] <lizmat> going afk now&
[13:46] <MasterDuke> yeah, https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L1345 is the only place i found so far
[13:47] <MasterDuke> but that was really just one specific example
[13:54] <MasterDuke> greppable6: Str.new
[13:54] <greppable6> MasterDuke, 88 lines, 13 modules: https://gist.github.com/5aa8d642fb3eaa0db55c829679366c5c
[14:15] *** b2gills left
[14:15] *** b2gills joined
[14:17] <Geth> ¬¶ nqp/new-disp: 65d7bb8592 | (Jonathan Worthington)++ | 2 files
[14:17] <Geth> ¬¶ nqp/new-disp: Add nqp-istype dispatcher
[14:17] <Geth> ¬¶ nqp/new-disp: 
[14:17] <Geth> ¬¶ nqp/new-disp: Which will be used when we can't resolve an istype using the type check
[14:17] <Geth> ¬¶ nqp/new-disp: cache. This follows the current semantics of nqp::istype(...), although
[14:17] <Geth> ¬¶ nqp/new-disp: we may want to revisit this in the future.
[14:17] <Geth> ¬¶ nqp/new-disp: review: https://github.com/Raku/nqp/commit/65d7bb8592
[14:18] <Geth> ¬¶ rakudo/new-disp: 5d6a45cec8 | (Jonathan Worthington)++ | src/Perl6/bootstrap.c/BOOTSTRAP.nqp
[14:18] <Geth> ¬¶ rakudo/new-disp: Register nqp-istype dispatcher for Raku also
[14:18] <Geth> ¬¶ rakudo/new-disp: 
[14:18] <Geth> ¬¶ rakudo/new-disp: We'll write a Raku-specific one at some point since we can likely
[14:18] <Geth> ¬¶ rakudo/new-disp: rewrite some type checks (for example, on definedness types) into simple
[14:18] <Geth> ¬¶ rakudo/new-disp: dispatch programs. For now, this will keep things working as MoarVM
[14:18] <Geth> ¬¶ rakudo/new-disp: moves istype over to using a dispatcher for the fallback cache-mess
[14:18] <Geth> ¬¶ rakudo/new-disp: case.
[14:18] <Geth> ¬¶ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/5d6a45cec8
[14:36] <Geth> ¬¶ rakudo/new-disp: 8c8c91cc71 | (Jonathan Worthington)++ | src/Perl6/Metamodel/MROBasedMethodDispatch.nqp
[14:36] <Geth> ¬¶ rakudo/new-disp: Cease publishing legacy method cache on MoarVM
[14:36] <Geth> ¬¶ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/8c8c91cc71
[14:42] <Geth> ¬¶ nqp/new-disp: 2470be00cc | (Jonathan Worthington)++ | 4 files
[14:42] <Geth> ¬¶ nqp/new-disp: Cease publishing legacy method cache on MoarVM
[14:42] <Geth> ¬¶ nqp/new-disp: review: https://github.com/Raku/nqp/commit/2470be00cc
[14:49] <MasterDuke> this wasn't a completely rigorous benchmark, but changing https://github.com/rakudo/rakudo/blob/master/src/core.c/Str.pm6#L52-L54 from `submethod BUILD(Str() :$value = '' --> Nil) { nqp::bindattr_s(self, Str, '$!value', nqp::unbox_s($value)) }` to `submethod BUILD(:$value = '' --> Nil) { nqp::bindattr_s(self, Str, '$!value',
[14:49] <MasterDuke> nqp::unbox_s($value.Str)) }` seemed to bring stage parse from ~42.5s to ~42.0s
[14:52] <Geth> ¬¶ nqp/new-disp: f46dae9f6c | (Jonathan Worthington)++ | src/core/dispatchers.nqp
[14:52] <Geth> ¬¶ nqp/new-disp: Fix a typo
[14:52] <Geth> ¬¶ nqp/new-disp: review: https://github.com/Raku/nqp/commit/f46dae9f6c
[15:03] <Kaiepi> MasterDuke, is the read of @!concretizations relevant to the lock in Metamodel::Concretization.'!maybe_rebuild_table'?
[15:11] <MasterDuke> not sure what you mean. which read?
[15:13] <Kaiepi> if nqp::elems(%new_conc_table) < nqp::elems(@!concretizations)
[15:15] <Kaiepi> i think there's a way to make it more sparing with the nqp::objectid calls, just how it would be done depends on where that condition needs to be
[15:19] <vrurg> Kaiepi: it is now me missing the point. How could objectid replace number of elements?
[15:26] <vrurg> MasterDuke: a side note. There is another potential race we've missed in Concretization.add_concretization method. Resetting of %!conc_table is not protected. This may result in delayed cache update if %new_conc_table gets assigned too early. I'll try to remember to take care of this when done with pseudos.
[15:28] <Kaiepi> because %new_conc_table is a clone of %!conc_table, it already has each of the concretizations that existed in the prior call to !maybe_rebuild_table. with the size of the clone, you get the starting position of any newly added concretizations in @!concretizations, since those can only be appended
[15:29] <Kaiepi> the resetting of %!conc_table can go that way
[15:30] <Geth> ¬¶ rakudo/new-disp: d15098d850 | (Jonathan Worthington)++ | 2 files
[15:30] <Geth> ¬¶ rakudo/new-disp: Remove meth cache auth op uses on MoarVM
[15:30] <Geth> ¬¶ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/d15098d850
[15:30] <Geth> ¬¶ nqp/new-disp: 9c64b44e04 | (Jonathan Worthington)++ | 2 files
[15:30] <Geth> ¬¶ nqp/new-disp: Remove method-cache related ops on MoarVM
[15:30] <Geth> ¬¶ nqp/new-disp: review: https://github.com/Raku/nqp/commit/9c64b44e04
[15:30] <Kaiepi> if that condition doesn't need to be protected, then the lock can be skipped when no update is needed
[15:33] <Kaiepi> resetting from add_concretization, i mean
[15:36] *** patrickb left
[15:52] <Geth> ¬¶ rakudo/new-disp: 080c43425a | (Jonathan Worthington)++ | 2 files
[15:52] <Geth> ¬¶ rakudo/new-disp: Update p6invokeunder to use MVM_frame_dispatch
[15:52] <Geth> ¬¶ rakudo/new-disp: 
[15:52] <Geth> ¬¶ rakudo/new-disp: Its ultimate destiny is to go away, as it's a quite terrible hack; that
[15:52] <Geth> ¬¶ rakudo/new-disp: can happen when we make the final push to eliminate the extops as a
[15:52] <Geth> ¬¶ rakudo/new-disp: whole.
[15:52] <Geth> ¬¶ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/080c43425a
[16:57] *** squashable6 joined
[17:22] *** rakuUser left
[17:32] *** rakuUser joined
[18:00] <Geth> ¬¶ rakudo/new-disp: e109bf0e06 | (Jonathan Worthington)++ | 3 files
[18:00] <Geth> ¬¶ rakudo/new-disp: Replace p6getouterctx with dispatcher + syscall
[18:00] <Geth> ¬¶ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/e109bf0e06
[18:02] *** reportable6 left
[18:36] *** sena_kun left
[18:38] *** SmokeMachine__ left
[18:38] *** SmokeMachine__ joined
[19:10] <Geth> ¬¶ rakudo: 94462dfab8 | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp
[19:10] <Geth> ¬¶ rakudo: Remove use of Str.new from grammar
[19:10] <Geth> ¬¶ rakudo: 
[19:10] <Geth> ¬¶ rakudo: FROGGS added this in 2014, when perhaps this was needed because of
[19:10] <Geth> ¬¶ rakudo: Parrot.  Removing it completely and just using whatever self.orig
[19:10] <Geth> ¬¶ rakudo: gives us, does not break any spectest, nor does it inhibit installing
[19:10] <Geth> ¬¶ rakudo: slangs like Slang::Tuxic or Slang::Piersing.
[19:10] <Geth> ¬¶ rakudo: 
[19:10] <Geth> ¬¶ rakudo: So I assume this was really an old wart, which is now gone.  Should
[19:10] <Geth> ¬¶ rakudo: a blin run show that this *did* break something, then just revert this.
[19:10] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/94462dfab8
[19:11] <lizmat> MasterDuke ^^
[19:16] <MasterDuke> ha, nice
[19:55] <MasterDuke> huh. inspired by ^^^ to try and make $!orig here https://github.com/Raku/nqp/blob/master/src/QRegex/Cursor.nqp#L4 a str, but it turns out it's specced to not always be a string https://github.com/Raku/roast/blob/master/S05-capture/match-object.t#L89
[19:55] <vrurg> Kaiepi: it was a hash-updating algorithm initially. But there was something broken about it and I had to switch to run-time update with resetting. Though a lot has changed in moar since then, perhaps it would make sense to try it again.
[19:57] <lizmat> MasterDuke: when is it not a string?
[19:58] <MasterDuke> m: say 12345 ~~ /2../
[19:58] <camelia> rakudo-moar 94462dfab: OUTPUT: ¬´ÔΩ¢234ÔΩ£‚ê§¬ª
[19:58] <MasterDuke> it's an Int there
[20:01] <lizmat> isn't that a string that can be an Int ?
[20:01] <MasterDuke> i'd say it's an Int that can be a string
[20:02] <MasterDuke> 12345 by itself is an Int
[20:02] <lizmat> yeah, but the smartmatch works on "12345"
[20:02] <lizmat> it can not work on the Int
[20:03] <MasterDuke> m: say "src/Perl6".IO ~~ /6/; say $/.orig.WHAT
[20:03] <camelia> rakudo-moar 94462dfab: OUTPUT: ¬´ÔΩ¢6ÔΩ£‚ê§(Path)‚ê§¬ª
[20:03] <MasterDuke> after my change the .WHAT is `(Str)`
[20:04] *** reportable6 joined
[20:07] <MasterDuke> m: Str.can('split') ~~ /split/  # another breaking change (so far, haven't tried to fix yet), i get 'This type cannot unbox to a native string: P6opaque, Method'
[20:07] <camelia> rakudo-moar 94462dfab: OUTPUT: ¬´Method object coerced to string (please use .gist or .raku to do that)‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª
[20:08] <MasterDuke> m: use Test; ok Str.can('split') ~~ /split/
[20:08] <camelia> rakudo-moar 94462dfab: OUTPUT: ¬´Method object coerced to string (please use .gist or .raku to do that)‚ê§  in block <unit> at <tmp> line 1‚ê§ok 1 - ‚ê§¬ª
[20:18] <Geth> ¬¶ rakudo: 3aba97077b | (Elizabeth Mattijsen)++ | src/core.c/Promise.pm6
[20:18] <Geth> ¬¶ rakudo: Save 2 Scalar containers per Promise.new
[20:18] <Geth> ¬¶ rakudo: 
[20:18] <Geth> ¬¶ rakudo: GC runs from 18 -> 14 for Promise.new for ^50000
[20:18] <Geth> ¬¶ rakudo: 
[20:18] <Geth> ¬¶ rakudo: No change for subclasses of Promise
[20:18] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3aba97077b
[20:18] <MasterDuke> that can probably be fixed relatively easily, but the Str vs whatever-type-the-object-actually-is case is a change in spec
[20:18] <lizmat> yeah, reminds me of my Match refactor work  :-(
[20:24] <[Coke]> does t/02-rakudo/18-pseudostash.t fail everywhere or just on my machines?
[20:24] <[Coke]> (windows, os x)
[20:26] <lizmat> does not for me on master
[20:26] <lizmat> MacOS
[20:40] <MasterDuke> nor for me on master/linux
[20:45] <Geth> ¬¶ rakudo/new-disp: bade712274 | (Jonathan Worthington)++ | 3 files
[20:45] <Geth> ¬¶ rakudo/new-disp: Unwrap Code outside of p6setfirstflag
[20:45] <Geth> ¬¶ rakudo/new-disp: 
[20:45] <Geth> ¬¶ rakudo/new-disp: So that it doesn't need to do it inside of the op, removing one more
[20:45] <Geth> ¬¶ rakudo/new-disp: place that we rely on the legacy invoke spec.
[20:45] <Geth> ¬¶ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/bade712274
[20:47] <Geth> ¬¶ rakudo: 3c1c709cea | (Elizabeth Mattijsen)++ | src/core.c/Promise.pm6
[20:47] <Geth> ¬¶ rakudo: Make allocations of Promise.thens list lazy
[20:47] <Geth> ¬¶ rakudo: 
[20:47] <Geth> ¬¶ rakudo: Saves one BOOTArray allocation for each Promise.new that doesn't
[20:47] <Geth> ¬¶ rakudo: do any .then.
[20:47] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3c1c709cea
[20:53] <japhb> Loving the Promise improvements, lizmat++.  What triggered this?  And are you planning to attack any of the other concurrency classes?  :-)
[20:53] <gfldex> lizmat: that improvement might pay of later :->
[20:54] <Xliff> japhb: How many Promise improvements (actually, this might be better for lizmat)
[20:54] <Xliff> Hmm... git log --grep=Promise?
[20:57] <Xliff> lizmat: Actually....after reading, I definitely agree with japhb!\
[20:57] <japhb> Xliff: She's done optimization passes of the scheduler and such in the past, but when I saw the drop in GC runs from Promise building earlier today, I got excited.  :-)
[20:58] <Xliff> I've just started using Promises in earnest, so I'm happy to see these.
[20:59] <Xliff> m: my $p = Promise.new; Promise.in(5).then: { $p.keep }; react { whenever $p { done } }
[20:59] <camelia> rakudo-moar 3c1c709ce: ( no output )
[20:59] <Xliff> Basic react with a time limit.
[21:04] <MasterDuke> Xliff: btw, istr that nine++ made a bunch of moarvm improvements on master recently that might help your usecase (i.e., large projects with lots of dependencies). have you noticed any changes?
[21:04] <japhb> m: react whenever Promise.in(5) { say "done!"; done }
[21:04] <camelia> rakudo-moar 3c1c709ce: OUTPUT: ¬´done!‚ê§¬ª
[21:04] <japhb> Xliff: ^^ Simplified
[21:11] <Xliff> MasterDuke: You mentioned that, before. Is that for precompilation or recompilation.
[21:12] <Xliff> I have not been noticing much in the way of precompilation improvements? If there have been any, they've been eaten up by other things.
[21:12] <MasterDuke> whoops, forgot i'd mentioned it. i'm not 100% certain, but i think mainly (re)compilation
[21:13] <Xliff> Please see recent timings: https://github.com/Xliff/p6-GLib/blob/master/doc/Perl6%20Projects%20Line%20Counts.xlsx
[21:13] <Xliff> Check the "Regular Timings" tab
[21:13] <Xliff> MasterDuke: Yeah, I don't have any baseline to test (re)compilations against./
[21:14] <Xliff> Although I might want to have both of you check out the slowness of https://github.com/Xliff/p6-X11
[21:14] <Xliff> Particularly Display.pm6
[21:14] <Xliff> It's slow. It acts as if "no precopilation" has been issued.
[21:17] <MasterDuke> i think it's a little late for nine to be online, but i'll mention it next time i see him in a channel
[21:17] <MasterDuke> just clone and run build.sh?
[21:17] <MasterDuke> no meta6.json?
[21:29] *** rakuUser left
[21:43] *** MasterDuke left
[21:44] <[Coke]> rebuilt, still getting the error on t/05-messages/02-errors.t
[21:46] <japhb> When your own code doesn't even appear on the first *page* of exclusive-sorted profile output, sorting by entries (total call count) puts the bootstrap and setting in the top slots, and inclusive time shows nothing but concurrency code ...  >.<
[21:47] <[Coke]> ww
[21:52] <japhb> Even on a per-call basis, a naive reading would indicate that *by far* the slowest routines are in the scheduler.  Which I'm guessing most likely means that's an area that the profiler doesn't have enough visibility into.  :-(
[21:53] * japhb rages against his machine for a bit
[21:58] <japhb> Is there a way to "name" an anon block so that it appears as such in the profile data, but without causing a performance difference?  I finally found a view on the SQL profile that was actually showing me heavy bits of my own code, and it was mostly anon blocks.
[21:59] <japhb> Also, is there any way to see when a Raku problem is suffering lock or queue contention?
[21:59] <japhb> *program
[22:15] *** rakuUser joined
[22:19] *** rakuUser left
[22:19] *** rakuUser joined
[22:49] *** MasterDuke joined
[22:49] <MasterDuke> japhb: perf maybe?
[22:54] <japhb> MasterDuke: Hmmmm.  Any guidelines on using that with Rakudo?
[23:22] <MasterDuke> i use `MVM_JIT_PERF_MAP=1 perf record -z -g --call-graph dwarf raku <...>`
[23:32] <MasterDuke> and then `perf report --call-graph=none --no-children`
[23:49] <japhb> Why use --call-graph on the record and --call-graph=none on the report?
