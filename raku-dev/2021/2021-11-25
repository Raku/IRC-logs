[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:53] *** dogbert11 left
[01:10] *** dogbert11 joined
[02:10] *** evalable6 left
[02:10] *** statisfiable6 left
[02:10] *** unicodable6 left
[02:10] *** nativecallable6 left
[02:10] *** shareable6 left
[02:10] *** squashable6 left
[02:10] *** reportable6 left
[02:10] *** greppable6 left
[02:10] *** sourceable6 left
[02:10] *** benchable6 left
[02:10] *** bisectable6 left
[02:10] *** quotable6 left
[02:10] *** releasable6 left
[02:10] *** bloatable6 left
[02:10] *** tellable6 left
[02:10] *** notable6 left
[02:10] *** linkable6 left
[02:10] *** coverable6 left
[02:10] *** committable6 left
[02:11] *** unicodable6 joined
[02:11] *** coverable6 joined
[02:11] *** releasable6 joined
[02:11] *** squashable6 joined
[02:11] *** bisectable6 joined
[02:11] *** benchable6 joined
[02:12] *** bloatable6 joined
[02:12] *** statisfiable6 joined
[02:13] *** evalable6 joined
[03:11] *** committable6 joined
[03:11] *** tellable6 joined
[03:12] *** sourceable6 joined
[03:12] *** reportable6 joined
[03:12] *** quotable6 joined
[03:13] *** greppable6 joined
[03:13] *** linkable6 joined
[04:11] *** nativecallable6 joined
[05:11] *** evalable6 left
[05:11] *** coverable6 left
[05:11] *** committable6 left
[05:11] *** squashable6 left
[05:11] *** bloatable6 left
[05:11] *** quotable6 left
[05:11] *** sourceable6 left
[05:11] *** benchable6 left
[05:11] *** bisectable6 left
[05:11] *** releasable6 left
[05:11] *** greppable6 left
[05:11] *** linkable6 left
[05:11] *** unicodable6 left
[05:11] *** tellable6 left
[05:11] *** nativecallable6 left
[05:11] *** statisfiable6 left
[05:11] *** reportable6 left
[05:11] *** committable6 joined
[05:12] *** tellable6 joined
[05:13] *** unicodable6 joined
[05:13] *** quotable6 joined
[05:13] *** greppable6 joined
[05:14] *** statisfiable6 joined
[05:14] *** releasable6 joined
[05:14] *** sourceable6 joined
[05:14] *** bisectable6 joined
[05:14] *** evalable6 joined
[05:14] *** squashable6 joined
[06:12] *** nativecallable6 joined
[06:13] *** benchable6 joined
[06:13] *** linkable6 joined
[06:14] *** notable6 joined
[06:24] *** maettu joined
[07:11] *** shareable6 joined
[07:12] *** bloatable6 joined
[07:33] <Geth> Â¦ nqp: b7c0ae276b | (Christian BartolomÃ¤us)++ | src/vm/jvm/runtime/org/raku/nqp/sixmodel/reprs/NativeCallInstance.java
[07:33] <Geth> Â¦ nqp: [JVM] Make nqp::unbox_i on NativeCall object work
[07:33] <Geth> Â¦ nqp: 
[07:33] <Geth> Â¦ nqp: It is supposed to report whether the library was loaded or not. This
[07:33] <Geth> Â¦ nqp: is a port of https://github.com/MoarVM/MoarVM/commit/1b0950e3e9 and
[07:33] <Geth> Â¦ nqp: is needed since https://github.com/rakudo/rakudo/commit/9ef7a7e9dd.
[07:33] <Geth> Â¦ nqp: 
[07:33] <Geth> Â¦ nqp: nine++ gave the hint for the concrete implementation on the JVM.
[07:33] <Geth> Â¦ nqp: <â€¦commit message has 11 more linesâ€¦>
[07:33] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/b7c0ae276b
[07:33] <Geth> Â¦ nqp: f2c619ddaf | (Christian BartolomÃ¤us)++ | src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java
[07:33] <Geth> Â¦ nqp: [JVM] Avoid NPE for getattr on NativeCall object
[07:33] <Geth> Â¦ nqp: 
[07:33] <Geth> Â¦ nqp: This duplicates a null check that was added to a different version
[07:33] <Geth> Â¦ nqp: of getattr() earlier: https://github.com/Raku/nqp/commit/720d05222b
[07:33] <Geth> Â¦ nqp: 
[07:33] <Geth> Â¦ nqp: With this patch a NullPointerExceptions in basic code like
[07:33] <Geth> Â¦ nqp: 
[07:33] <Geth> Â¦ nqp: <â€¦commit message has 5 more linesâ€¦>
[07:33] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/f2c619ddaf
[07:33] <Geth> Â¦ nqp: e45a8dd559 | (Christian BartolomÃ¤us)++ | src/vm/jvm/runtime/org/raku/nqp/runtime/Ops.java
[07:33] <Geth> Â¦ nqp: [JVM] Use VMNull instead of null
[07:33] <Geth> Â¦ nqp: 
[07:33] <Geth> Â¦ nqp: ... because there is a path were retval is returned unchanged.
[07:33] <Geth> Â¦ nqp: I don't have an concrete example, but it seems to be more correct
[07:33] <Geth> Â¦ nqp: to use a VMNull here.
[07:33] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/commit/e45a8dd559
[08:09] *** frost joined
[09:20] *** dogbert11 left
[09:29] *** dogbert11 joined
[10:39] *** evalable6 left
[10:39] *** linkable6 left
[10:40] *** evalable6 joined
[10:47] *** maettu left
[11:05] *** reportable6 joined
[11:13] *** coverable6 joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:28] *** frost left
[12:40] *** linkable6 joined
[15:22] *** evalable6 left
[15:22] *** linkable6 left
[15:23] *** evalable6 joined
[15:25] *** patrickb joined
[15:31] *** Xliff_ joined
[15:33] *** Xliff left
[15:49] *** patrickb left
[17:23] *** squashable6 left
[17:24] *** linkable6 joined
[17:25] *** squashable6 joined
[18:02] *** reportable6 left
[18:04] *** reportable6 joined
[18:09] *** patrickb joined
[18:25] *** patrickb left
[19:54] *** lizmat_ joined
[19:54] *** TempIRCLogger left
[19:55] *** TempIRCLogger joined
[19:55] *** RakuIRCLogger left
[19:55] *** Geth joined
[19:57] *** lizmat left
[21:09] *** _Xliff_ joined
[21:12] *** Xliff_ left
[21:24] *** lizmat_ left
[21:24] *** lizmat joined
[22:21] *** squashable6 left
[22:21] *** squashable6 joined
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: d1a4fab9c7 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Fix when a decoding function isn't provided
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: If a decoding function isn't provided in the map, assume String as was done before refactoring in c656ee5.
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/d1a4fab9c7
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: f26b851a7f | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[23:15] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/f26b851a7f
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 2d0e7ac6b5 | (Rod Taylor)++ | 2 files
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[23:31] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/2d0e7ac6b5
[23:32] <Geth> Â¦ DBIish/rbt.readme: e058c97d60 | (Rod Taylor)++ | README.pod
[23:32] <Geth> Â¦ DBIish/rbt.readme: Remove the Travis state button
[23:32] <Geth> Â¦ DBIish/rbt.readme: review: https://github.com/raku-community-modules/DBIish/commit/e058c97d60
[23:34] *** squashable6 left
[23:36] *** squashable6 joined
[23:37] <Geth> Â¦ DBIish: e058c97d60 | (Rod Taylor)++ | README.pod
[23:37] <Geth> Â¦ DBIish: Remove the Travis state button
[23:37] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/e058c97d60
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 324dedab70 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Fix when a decoding function isn't provided
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: If a decoding function isn't provided in the map, assume String as was done before refactoring in c656ee5.
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/324dedab70
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 579377d333 | (Rod Taylor)++ | 2 files
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[23:42] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:43] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[23:43] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:43] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[23:43] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/579377d333
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: c377eb2d42 | (Rod Taylor)++ | 2 files
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[23:51] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/c377eb2d42
[23:53] <Geth> Â¦ DBIish/rbt.remove-unused-variable: eaf04fa190 | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[23:53] <Geth> Â¦ DBIish/rbt.remove-unused-variable: Remove unused variable
[23:53] <Geth> Â¦ DBIish/rbt.remove-unused-variable: review: https://github.com/raku-community-modules/DBIish/commit/eaf04fa190
