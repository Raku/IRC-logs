[00:02] *** reportable6 left
[00:05] *** reportable6 joined
[00:26] <japhb> We should at least give people some guidance as to what is recommended for different use cases ... I would be surprised if new users didn't have some confusion about what libraries to use to get certain tasks done; I struggle with that still sometimes, and I've been here for a LONG time.
[00:27] <japhb> It doesn't have to be in the form of Rakudo Star, or a Task/Bundle like in the CPAN world, but we ought to provide *some* guidance so that people don't have to yak shave the first time they try something non-trivial.
[00:27] <japhb> (Some people *like* yak shaving, and that's fine, I'm just saying people shouldn't be forced into it.)
[00:37] <[Coke]> exit
[00:37] <[Coke]> ww
[00:37] <[Coke]> ...afk!
[00:41] <ugexe> part of the magic of rakudo star is likely (im guessing) that it doesnt run the tests of all the modules it installs
[00:56] *** frost joined
[01:22] *** squashable6 left
[01:23] *** squashable6 joined
[01:42] <[Coke]> so the install is faster, but there's risk?
[01:43] <[Coke]> curating a list of modules is a big ask. I'm not sure how much curation has been done on the list that was included with R* since it was initially put together. And it doesn't include a list of why you'd want A or B, they're just there.
[01:44] <[Coke]> so putting that list together is a good idea regardless. One could create a Star::Bundle or somesuch as well that could be used to achieve a similar setup (but would be installed after the fact).
[01:49] <ugexe> well you can also just tell users to use `zef --/test ...`
[01:49] <ugexe> but generally you probably dont want to instill that type of behavior
[01:51] <[Coke]> nope. I'd rather run the tests, agreed.
[02:07] <japhb> Definitely.  I still have to keep a list of dists that have to be installed with --/test in my "rebuild everything" script, but I regularly review that list to keep it as small as possible so I don't miss regressions.
[02:08] <japhb> And I think a Bundle::Star would be great, but even just explaining (as [Coke] said) why people would want to install one module or another would be valuable.
[02:10] <japhb> I wonder if we should do a Kwalitee-like think in the Raku ecosystem -- automated analysis of module dists for minimal adherence to best practices -- so that we could make that a filter for people searching for modules
[02:11] <japhb> Might also be good to start socializing some level of keyword tagging or SEO techniques that would allow people to find things easier.  Our current module search algorithms are pretty pedantic.
[02:12] <[Coke]> Do we have enough hosting to consider throwing an elasticsearch or solr instance in there?
[02:12] <[Coke]> I wonder if Coveo provides any OSS cloud services for free.
[02:12] <[Coke]> (I will investigate that)
[02:38] <japhb> If we don't want to host it ourselves, we might be able to make use of DuckDuckGo.
[06:02] *** reportable6 left
[06:04] *** reportable6 joined
[06:44] *** patrickb joined
[08:02] *** patrickb left
[09:22] *** Altai-man joined
[09:39] *** Altai-man left
[10:39] *** linkable6 left
[10:39] *** evalable6 left
[10:40] *** evalable6 joined
[10:41] *** linkable6 joined
[11:29] *** brown121407 is now known as smarton
[12:02] *** reportable6 left
[12:04] *** reportable6 joined
[12:11] <Geth> ¦ rakudo: bdc5092fa0 | (Elizabeth Mattijsen)++ | 2 files
[12:11] <Geth> ¦ rakudo: Abstract some SlippyIterator logic
[12:11] <Geth> ¦ rakudo: 
[12:11] <Geth> ¦ rakudo: - add method "push-rest" for pushing the rest of a Slip to a target
[12:11] <Geth> ¦ rakudo: - add method "sink-rest: for sinking the rest of a Slip
[12:11] <Geth> ¦ rakudo: - use these in the iterators where applicable
[12:11] <Geth> ¦ rakudo: 
[12:11] <Geth> ¦ rakudo: This reduces the bytecode footprint of some iterator methods
[12:11] <Geth> ¦ rakudo: increasing the chance they will be inlined, as well as becoming
[12:11] <Geth> ¦ rakudo: more maintainable.
[12:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bdc5092fa0
[13:04] *** evalable6 left
[13:04] *** linkable6 left
[13:06] *** linkable6 joined
[13:07] *** evalable6 joined
[13:10] <[TuxCM]> Rakudo v2021.06-48-gbdc5092fa (v6.d) on MoarVM 2021.06-16-g74e828f0a
[13:10] <[TuxCM]> csv-test-xs-20      0.375 -  0.401
[13:10] <[TuxCM]> csv-ip5xs           0.870 -  0.889
[13:10] <[TuxCM]> test-t --race       1.004 -  1.150
[13:10] <[TuxCM]> test-t              2.083 -  2.168
[13:10] <[TuxCM]> test                8.380 -  8.624
[13:10] <[TuxCM]> csv-ip5xs-20        9.393 -  9.580
[13:10] <[TuxCM]> test-t-20 --race   11.225 - 11.507
[13:10] <[TuxCM]> csv-parser         29.757 - 32.454
[13:10] <[TuxCM]> test-t-20          34.754 - 37.160
[13:45] <Geth> ¦ rakudo: 1bd0411c0f | (Elizabeth Mattijsen)++ | 3 files
[13:45] <Geth> ¦ rakudo: Remove unneeded attribute from SlippyIterator
[13:45] <Geth> ¦ rakudo: 
[13:45] <Geth> ¦ rakudo: The attribute holding the iterator to be used, is now the flag whether
[13:45] <Geth> ¦ rakudo: the Slip being processed is exhausted or not.
[13:45] <Geth> ¦ rakudo: 
[13:45] <Geth> ¦ rakudo: The name of the $!slip-iter was changed to $!slipper to make sure that
[13:45] <Geth> ¦ rakudo: any client of the SlippyIterator role (which is an implementation detail)
[13:46] <Geth> ¦ rakudo: will break.
[13:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1bd0411c0f
[13:46] <lizmat> unless changed of course  :-)
[13:51] <Geth> ¦ roast: fb61fcfc26 | (Elizabeth Mattijsen)++ | spectest.data
[13:51] <Geth> ¦ roast: Remove S14-roles/generic-subtyping.t for now
[13:51] <Geth> ¦ roast: 
[13:51] <Geth> ¦ roast: This test file needs work.  And I'm not sure what it needs.  But
[13:51] <Geth> ¦ roast: it fails atm.
[13:51] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/fb61fcfc26
[14:09] *** frost left
[14:14] *** squashable6 left
[14:16] *** squashable6 joined
[14:55] <lizmat> hmmm... do we have some kind of sentinel that we can call, but doesn't do anything ?
[16:44] <japhb> I'd say identity, but that's all over the place
[17:27] <tonyo> japhb: that's easily doable..i was doing something like that using virtualbox and automated testing for zef a long time ago
[17:28] <tonyo> re: module quality
[17:29] <Geth> ¦ rakudo/add-two-error-message-tests: 5d8158b535 | Altai-man++ | t/05-messages/03-errors.t
[17:29] <Geth> ¦ rakudo/add-two-error-message-tests: Add two tests for proper error messages
[17:29] <Geth> ¦ rakudo/add-two-error-message-tests: 
[17:29] <Geth> ¦ rakudo/add-two-error-message-tests: One is for printing something to a close handle.
[17:29] <Geth> ¦ rakudo/add-two-error-message-tests: Two is for a weird case of adverbing.
[17:29] <Geth> ¦ rakudo/add-two-error-message-tests: review: https://github.com/rakudo/rakudo/commit/5d8158b535
[17:30] <Geth> ¦ rakudo/add-two-error-message-tests: review: https://github.com/rakudo/rakudo/commit/5d8158b535
[17:30] <Geth> ¦ rakudo: Altai-man++ created pull request #4447: Add two tests for proper error messages
[17:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4447
[17:34] <japhb> tonyo: Did you turn that into a public service, or was that just for zef work?
[17:35] <Geth> ¦ roast/add-test-for-2920: e8e0028c6b | Altai-man++ | S03-sequence/misc.t
[17:35] <Geth> ¦ roast/add-test-for-2920: Add test for #2920
[17:35] <Geth> ¦ roast/add-test-for-2920: review: https://github.com/Raku/roast/commit/e8e0028c6b
[17:35] <Geth> ¦ roast: Altai-man++ created pull request #747: Add test for #2920
[17:35] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/747
[17:39] <tonyo> japhb: i can dig it out of the archives and make it public
[17:39] <tonyo> the goal was a bit different but not that difficult to update
[17:40] <tonyo> it was essentially when zef and fez were one utility (~6 or so years ago) and the zef website showed a matrix of a few OSes + raku versions + test results
[17:43] *** evalable6 left
[17:44] *** evalable6 joined
[17:45] <Geth> ¦ roast/add-test-for-2920: c159204c8d | Altai-man++ | S32-list/create.t
[17:45] <Geth> ¦ roast/add-test-for-2920: Add test for #2920
[17:45] <Geth> ¦ roast/add-test-for-2920: review: https://github.com/Raku/roast/commit/c159204c8d
[17:46] *** Kaiepi left
[17:46] *** Kaiepi joined
[17:48] <Geth> ¦ roast/add-test-for-2060: fe65760bfc | Altai-man++ | S32-list/create.t
[17:48] <Geth> ¦ roast/add-test-for-2060: Add test for #2060
[17:48] <Geth> ¦ roast/add-test-for-2060: review: https://github.com/Raku/roast/commit/fe65760bfc
[17:48] <Geth> ¦ roast: Altai-man++ created pull request #748: Add test for #2060
[17:48] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/748
[17:52] <sena_kun> bisectable6, {:foo, (if 0.5.rand < 1 { :bar })}
[17:52] <bisectable6> sena_kun, Will bisect the whole range automagically because no endpoints were provided, hang tight
[17:52] <bisectable6> sena_kun, Output on all releases: https://gist.github.com/35c8b1528fec9b7d4d98e81353576794
[17:52] <bisectable6> sena_kun, Bisecting by exit code (old=2018.12 new=2019.03.1). Old exit code: 1
[17:53] <bisectable6> sena_kun, bisect log: https://gist.github.com/63ebb653ea79373dc891b12ef33ffaf5
[17:53] <bisectable6> sena_kun, (2019-01-04) https://github.com/rakudo/rakudo/commit/31c8fda2878d091f54247f034fba3f63b0942e75
[17:53] <bisectable6> sena_kun, Output on all releases and bisected commits: https://gist.github.com/91f590c3342273c26d489c0037ce5387
[17:53] <Geth> ¦ roast/test-for-1486: 3fd712f501 | Altai-man++ | S09-hashes/objecthash.t
[17:53] <Geth> ¦ roast/test-for-1486: Add test for #1486
[17:53] <Geth> ¦ roast/test-for-1486: review: https://github.com/Raku/roast/commit/3fd712f501
[17:55] *** Kaiepi left
[17:55] *** Kaiepi joined
[18:00] <Geth> ¦ roast/add-test-for-1890: 96d879a2f7 | Altai-man++ | S03-metaops/misc.t
[18:00] <Geth> ¦ roast/add-test-for-1890: Add test for #1890
[18:00] <Geth> ¦ roast/add-test-for-1890: review: https://github.com/Raku/roast/commit/96d879a2f7
[18:00] <Geth> ¦ roast: Altai-man++ created pull request #749: Add test for #1890
[18:00] <Geth> ¦ roast: review: https://github.com/Raku/roast/pull/749
[18:03] *** reportable6 left
[18:05] *** reportable6 joined
[18:52] <tonyo> japhb: of how much use is something like that?
[19:08] *** Kaipi joined
[19:08] *** Kaiepi left
[22:01] <japhb> tonyo: It would cover a different portion of the problem space than Blin -- whereas the latter helps to find regressions in Rakudo that would block a release by testing the ecosystem against it, but is often confounded by regressions in the ecosystem modules themselves, it sounds like what you have would help ensure that the ecosystem modules were in a better average state.
[22:38] *** linkable6 left
[22:38] *** evalable6 left
[22:40] *** linkable6 joined
[22:40] *** evalable6 joined
[22:43] *** linkable6 joined
[22:43] *** ilogger2_ left
[22:44] *** ilogger2 joined
[22:53] *** Kaipi left
[22:53] *** Kaipi joined
[23:01] <[Coke]> does blin automatically run latest ecosystem modules or last release, or last version we ran with and try latest if *that* works... or?
[23:35] <vrurg> [Coke]: No it doesn't need manual work. I was considering setting up a nightly run. But it can't automatically post the resulting report, so I postponed the idea for a while.
[23:36] <vrurg> There is actually a period after "doesn't". So, I mean it needs manual work to be ran.
[23:41] *** kjp left
