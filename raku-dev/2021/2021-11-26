[00:02] *** reportable6 left
[00:03] <Geth> Â¦ DBIish/rbt.pg-column-type-change: 9342a220c4 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[00:03] <Geth> Â¦ DBIish/rbt.pg-column-type-change: Allow changing column-type manually again
[00:03] <Geth> Â¦ DBIish/rbt.pg-column-type-change: 
[00:03] <Geth> Â¦ DBIish/rbt.pg-column-type-change: There is an undocumented and very lightly tested feature which allows the column-type to be specified by the client after the prepare/execute phase of the query but before retrieving rows. Re-enable this again for the PostgreSQL driver by setting up import functions on the first (and only the first) call to row().
[00:03] <Geth> Â¦ DBIish/rbt.pg-column-type-change: review: https://github.com/raku-community-modules/DBIish/commit/9342a220c4
[00:07] <Geth> Â¦ DBIish/rbt.pg-column-type-change: 5828d47363 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[00:07] <Geth> Â¦ DBIish/rbt.pg-column-type-change: Allow changing column-type manually again
[00:07] <Geth> Â¦ DBIish/rbt.pg-column-type-change: 
[00:07] <Geth> Â¦ DBIish/rbt.pg-column-type-change: There is an undocumented and very lightly tested feature which allows the column-type to be specified by the client after the prepare/execute phase of the query but before retrieving rows. Re-enable this again for the PostgreSQL driver by setting up import functions on the first (and only the first) call to row().
[00:07] <Geth> Â¦ DBIish/rbt.pg-column-type-change: review: https://github.com/raku-community-modules/DBIish/commit/5828d47363
[00:24] <Geth> Â¦ DBIish: 5828d47363 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[00:24] <Geth> Â¦ DBIish: Allow changing column-type manually again
[00:24] <Geth> Â¦ DBIish: 
[00:24] <Geth> Â¦ DBIish: There is an undocumented and very lightly tested feature which allows the column-type to be specified by the client after the prepare/execute phase of the query but before retrieving rows. Re-enable this again for the PostgreSQL driver by setting up import functions on the first (and only the first) call to row().
[00:24] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/5828d47363
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: a960748a66 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Fix when a decoding function isn't provided
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: If a decoding function isn't provided in the map, assume String as was done before refactoring in c656ee5.
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/a960748a66
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: d6b8f88c9b | (Rod Taylor)++ | 2 files
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[00:25] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/d6b8f88c9b
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 58c7456813 | (Rod Taylor)++ | 2 files
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[00:27] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/58c7456813
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 12e72d1074 | (Rod Taylor)++ | 2 files
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Handle type selection once for MySQL driver
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: 
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[00:28] <Geth> Â¦ DBIish/rbt.mysql-large-result-performance: review: https://github.com/raku-community-modules/DBIish/commit/12e72d1074
[00:41] <Geth> Â¦ DBIish: a960748a66 | (Rod Taylor)++ | lib/DBDish/Pg/StatementHandle.pm6
[00:41] <Geth> Â¦ DBIish: Fix when a decoding function isn't provided
[00:41] <Geth> Â¦ DBIish: 
[00:41] <Geth> Â¦ DBIish: If a decoding function isn't provided in the map, assume String as was done before refactoring in c656ee5.
[00:41] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/a960748a66
[00:41] <Geth> Â¦ DBIish: 12e72d1074 | (Rod Taylor)++ | 2 files
[00:41] <Geth> Â¦ DBIish: Handle type selection once for MySQL driver
[00:41] <Geth> Â¦ DBIish: 
[00:41] <Geth> Â¦ DBIish: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[00:41] <Geth> Â¦ DBIish: 
[00:41] <Geth> Â¦ DBIish: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[00:41] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/12e72d1074
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: 51fb8dda6f | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: Handle type selection once for MySQL driver
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: 
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: 
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: review: https://github.com/raku-community-modules/DBIish/commit/51fb8dda6f
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: 7e07c13dae | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: Remove unused variable
[00:51] <Geth> Â¦ DBIish/rbt.remove-unused-variable: review: https://github.com/raku-community-modules/DBIish/commit/7e07c13dae
[00:51] <Geth> Â¦ DBIish: 51fb8dda6f | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[00:51] <Geth> Â¦ DBIish: Handle type selection once for MySQL driver
[00:51] <Geth> Â¦ DBIish: 
[00:51] <Geth> Â¦ DBIish: This is the same technique as the PostgreSQL driver in c656ee5. Setup type conversion functions once per result set instead of hunting for them once per record.
[00:51] <Geth> Â¦ DBIish: 
[00:51] <Geth> Â¦ DBIish: Iterating on @!import-func and incrementing $col seems to perform the best, though it's marginal due to overhead in the rest of the driver.
[00:51] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/51fb8dda6f
[00:51] <Geth> Â¦ DBIish: 7e07c13dae | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[00:51] <Geth> Â¦ DBIish: Remove unused variable
[00:51] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/7e07c13dae
[00:52] <Geth> Â¦ DBIish: 2be50ef47c | (Rod Taylor)++ | lib/DBDish/mysql/StatementHandle.pm6
[00:52] <Geth> Â¦ DBIish: Revert "Handle type selection once for MySQL driver"
[00:52] <Geth> Â¦ DBIish: 
[00:52] <Geth> Â¦ DBIish: This reverts commit 51fb8dda6fedbd46066f1d7631c7db7257b20595.
[00:52] <Geth> Â¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/2be50ef47c
[01:03] *** reportable6 joined
[02:01] *** squashable6 left
[02:30] *** Xliff_ joined
[02:33] *** _Xliff_ left
[03:03] *** squashable6 joined
[03:14] *** frost joined
[04:38] *** evalable6 left
[04:38] *** linkable6 left
[04:38] *** evalable6 joined
[05:40] *** linkable6 joined
[06:02] *** reportable6 left
[06:03] *** reportable6 joined
[07:11] *** frost left
[07:27] *** squashable6 left
[08:03] *** timo left
[09:25] *** linkable6 left
[09:25] *** evalable6 left
[09:28] *** linkable6 joined
[09:29] *** squashable6 joined
[10:27] *** evalable6 joined
[10:45] *** frost joined
[11:05] *** Altai-man joined
[11:46] *** lizmat_ joined
[11:47] *** TempIRCLogger left
[11:47] *** _Xliff_ joined
[11:48] *** nebuchad` joined
[11:48] *** lizmat_ left
[11:48] *** lizmat_ joined
[11:50] *** TempIRCLogger joined
[11:51] *** bartolin_ joined
[11:51] *** lucs_ joined
[11:51] *** Util_ joined
[11:51] *** RakuIRCLogger joined
[11:55] *** lizmat_ left
[11:55] *** lizmat_ joined
[11:55] *** lizmat left
[11:55] *** gfldex left
[11:55] *** bartolin left
[11:55] *** tonyo left
[11:55] *** JRaspass left
[11:55] *** Xliff_ left
[11:56] *** nebuchadnezzar left
[11:56] *** lucs left
[11:56] *** Util left
[11:56] *** gfldex_ joined
[11:56] *** lizmat_ left
[11:56] *** lizmat joined
[12:02] *** reportable6 left
[12:03] *** JRaspass joined
[12:06] <Geth> Â¦ rakudo: 1fc8cce31a | (Elizabeth Mattijsen)++ | src/core.c/Distro.pm6
[12:06] <Geth> Â¦ rakudo: Add knowledge about MacOS Monterey
[12:06] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1fc8cce31a
[12:06] *** frost left
[13:05] *** reportable6 joined
[13:45] *** Xliff_ joined
[13:46] *** Xliff_ left
[13:48] *** _Xliff_ left
[13:56] *** squashable6 left
[13:58] *** squashable6 joined
[15:19] *** Kaiepi left
[15:57] <[Tux]> Rakudo v2021.10-127-g1fc8cce31 (v6.d) on MoarVM 2021.10-113-g66688b941
[15:57] <[Tux]> csv-test-xs-20      0.408 -  0.417
[15:57] <[Tux]> csv-ip5xs           0.849 -  0.859
[15:57] <[Tux]> test-t --race       0.912 -  0.964
[15:57] <[Tux]> test-t              1.638 -  1.641
[15:57] <[Tux]> csv-parser          4.147 -  4.227
[15:57] <[Tux]> csv-ip5xs-20        5.150 -  5.280
[15:57] <[Tux]> test                6.967 -  6.996
[15:57] <[Tux]> test-t-20 --race    7.348 -  7.367
[15:57] <[Tux]> test-t-20          24.085 - 25.026
[16:08] *** Kaiepi joined
[17:44] *** notna joined
[17:47] *** Colt left
[17:47] *** Colt joined
[17:56] *** Colt left
[17:59] *** Colt joined
[18:02] *** reportable6 left
[18:07] *** Colt left
[18:07] *** Colt joined
[18:15] *** notna left
[18:38] *** [Coke] left
[18:43] *** Altai-man left
[18:45] *** [Coke] joined
[20:44] <Geth> Â¦ nqp: usev6++ created pull request #749: [JVM] Reimplement nqp::encode for utf-16
[20:44] <Geth> Â¦ nqp: review: https://github.com/Raku/nqp/pull/749
[20:54] <Geth> Â¦ nqp: usev6 self-assigned Encoding a string as utf16 to buffer containing 8 bit integers is broken on the JVM https://github.com/Raku/nqp/issues/250
[21:03] *** reportable6 joined
[21:29] <Geth> Â¦ rakudo/max-threads-default: 3eb584a445 | (Elizabeth Mattijsen)++ | src/core.c/ThreadPoolScheduler.pm6
[21:29] <Geth> Â¦ rakudo/max-threads-default: Make sure we have at least 64 threads
[21:29] <Geth> Â¦ rakudo/max-threads-default: review: https://github.com/rakudo/rakudo/commit/3eb584a445
[22:03] *** evalable6 left
[22:11] *** [Coke] left
[22:13] *** [Coke] joined
[22:14] <[Coke]> 64 seems high for low end machines, no?
[22:21] <vrurg> [Coke]: just don't use all of them.
[22:34] *** kjp joined
[22:45] *** squashable6 left
[23:03] <lizmat> [Coke]: that *is* the current fixed default  :-)
[23:31] *** dogbert11 left
[23:31] *** dogbert11 joined
[23:53] *** lizmat_ joined
[23:53] *** RakuIRCLogger left
[23:53] *** TempIRCLogger left
[23:54] *** Geth left
[23:54] *** lizmat left
