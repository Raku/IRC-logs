[00:02] *** reportable6 left
[00:04] *** reportable6 joined
[01:34] *** bloatable6 left
[01:34] *** committable6 left
[01:34] *** notable6 left
[01:34] *** linkable6 left
[01:34] *** greppable6 left
[01:34] *** squashable6 left
[01:34] *** evalable6 left
[01:34] *** reportable6 left
[01:34] *** nativecallable6 left
[01:34] *** benchable6 left
[01:34] *** releasable6 left
[01:34] *** shareable6 left
[01:34] *** sourceable6 left
[01:34] *** coverable6 left
[01:34] *** bisectable6 left
[01:34] *** tellable6 left
[01:34] *** unicodable6 left
[01:34] *** statisfiable6 left
[01:34] *** quotable6 left
[01:35] *** quotable6 joined
[01:35] *** sourceable6 joined
[01:35] *** bisectable6 joined
[01:35] *** committable6 joined
[01:35] *** unicodable6 joined
[01:35] *** linkable6 joined
[01:35] *** squashable6 joined
[01:35] *** benchable6 joined
[01:35] *** statisfiable6 joined
[01:36] *** coverable6 joined
[01:36] *** reportable6 joined
[01:36] *** releasable6 joined
[01:36] *** bloatable6 joined
[01:36] *** evalable6 joined
[01:36] *** notable6 joined
[01:37] *** shareable6 joined
[01:37] *** nativecallable6 joined
[01:38] *** greppable6 joined
[01:38] *** tellable6 joined
[01:38] <Geth> ¦ rakudo: vrurg++ created pull request #4396: Compile-time micro-optimization

[01:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4396

[02:17] *** frost joined
[03:17] *** coverable6 left
[03:17] *** squashable6 left
[03:17] *** bisectable6 left
[03:17] *** releasable6 left
[03:17] *** greppable6 left
[03:17] *** committable6 left
[03:17] *** evalable6 left
[03:17] *** quotable6 left
[03:17] *** reportable6 left
[03:17] *** sourceable6 left
[03:17] *** notable6 left
[03:17] *** shareable6 left
[03:17] *** tellable6 left
[03:17] *** bloatable6 left
[03:17] *** linkable6 left
[03:17] *** unicodable6 left
[03:17] *** statisfiable6 left
[03:17] *** nativecallable6 left
[03:17] *** benchable6 left
[03:17] *** reportable6 joined
[03:17] *** notable6 joined
[03:17] *** tellable6 joined
[03:18] *** committable6 joined
[03:18] *** shareable6 joined
[03:18] *** linkable6 joined
[03:18] *** releasable6 joined
[03:18] *** benchable6 joined
[03:18] *** statisfiable6 joined
[03:19] *** bloatable6 joined
[03:19] *** squashable6 joined
[03:19] *** coverable6 joined
[03:19] *** quotable6 joined
[03:19] *** sourceable6 joined
[03:19] *** nativecallable6 joined
[03:19] *** bisectable6 joined
[03:19] *** unicodable6 joined
[03:20] *** greppable6 joined
[03:20] *** evalable6 joined
[04:34] *** squashable6 left
[04:34] *** squashable6 joined
[04:47] *** AlexDaniel left
[04:48] *** AlexDaniel joined
[06:04] *** reportable6 left
[06:06] *** reportable6 joined
[07:54] *** morayj joined
[08:49] *** patrickb joined
[09:19] <Geth> ¦ nqp: b3536580a9 | (Daniel Green)++ | src/NQP/Optimizer.nqp

[09:19] <Geth> ¦ nqp: Simplify loop in optimizer's incorporate_inner

[09:19] <Geth> ¦ nqp: 

[09:19] <Geth> ¦ nqp: I don't know why this splice was originally commented out and not used,

[09:19] <Geth> ¦ nqp: but it works.

[09:19] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/b3536580a9

[09:19] <Geth> ¦ nqp: 668f3f23fe | MasterDuke17++ (committed using GitHub Web editor) | src/NQP/Optimizer.nqp

[09:19] <Geth> ¦ nqp: Merge pull request #725 from MasterDuke17/simplify_loop_in_optimizer_method_incorporate_inner

[09:19] <Geth> ¦ nqp: 

[09:20] <Geth> ¦ nqp: Simplify loop in optimizer's incorporate_inner

[09:20] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/668f3f23fe

[09:20] <Geth> ¦ nqp: c765d51c8d | (Daniel Green)++ | src/core/Hash.nqp

[09:20] <Geth> ¦ nqp: Micro-optimize the sift_down sub in sorted_keys

[09:20] <Geth> ¦ nqp: 

[09:20] <Geth> ¦ nqp: Exit early if there are 0 to 2 keys to sort, also pull some variable

[09:20] <Geth> ¦ nqp: declarations out of a loop to reduce the number of BOOTInts allocated.

[09:20] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/c765d51c8d

[09:20] <Geth> ¦ nqp: b58cff0253 | MasterDuke17++ (committed using GitHub Web editor) | src/core/Hash.nqp

[09:20] <Geth> ¦ nqp: Merge pull request #726 from MasterDuke17/micro_optimize_sift_down

[09:20] <Geth> ¦ nqp: 

[09:20] <Geth> ¦ nqp: Micro-optimize the sift_down sub in sorted_keys

[09:20] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/b58cff0253

[09:57] *** patrickb left
[10:21] *** sena_kun joined
[10:28] *** frost left
[11:40] *** patrickb joined
[11:55] *** morayj left
[12:00] *** frost joined
[12:03] *** reportable6 left
[12:04] *** reportable6 joined
[13:02] *** Xliff left
[13:21] *** patrickb left
[13:34] <MasterDuke34> what causes indirect name lookups?

[13:36] <vrurg> MasterDuke34: like self."$method"()?

[13:37] <MasterDuke34> hm, that's the same as ::()?

[13:37] <vrurg> No, it only traverses MRO. 

[13:38] <MasterDuke34> https://github.com/rakudo/rakudo/blob/master/src/core.c/operators.pm6#L216-L279 is what i'm curious about

[13:38] <vrurg> But then I don't really get your question. 

[13:39] *** morayj joined
[13:39] <vrurg> I see it used in Actions and Ops. Gimme a sec...

[13:42] <vrurg> term:sym<name> is using it. Doc phaser. require. Likely more, if you search by make_indirect_lookup method references.

[13:43] <MasterDuke34> https://gitlab.com/jjatria/raku-game-entities/-/blob/master/xt/long-loops.t causes 22k calls to INDIRECT_NAME_LOOKUP

[13:44] <MasterDuke34> oh, ^name() perhaps

[13:47] <vrurg> I'd rather suspect @components. .^name should only result in a method lookup.

[13:48] * jjatria is very interested in this

[13:49] <MasterDuke34> jjatria: do you need the gather/takes? those are pretty slow

[13:51] <MasterDuke34> btw, profiles show your short test file causing 850k deoptimizations, and the long one causing 300k deopts

[13:51] <jjatria> No, I can do away with them. I wasn't aware they'd be a bottleneck

[13:52] <vrurg> Last note and back to the main job. I think the most likely cause is token variable -> Actions method variable.

[13:52] <jjatria> My optimisation game in Raku is weak, I was mostly focused on getting it to run, and then to get it to run fast enough. But if it can be faster, I'm very keen

[14:00] *** sena_kun left
[14:11] *** sena_kun joined
[14:19] *** morayj left
[14:31] *** frost left
[16:33] *** japhb left
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[19:04] <Geth> ¦ nqp: 8ae2bfb646 | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[19:04] <Geth> ¦ nqp: Bump MoarVM to get the latest fixes and performance improvements

[19:04] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/8ae2bfb646

[19:31] <Geth> ¦ rakudo: faec80449d | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[19:31] <Geth> ¦ rakudo: Bump NQP to get latest NQP / MoarVM goodies

[19:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/faec80449d

[19:33] <Geth> ¦ rakudo: 3b7fef2e7d | (Stefan Seifert)++ | 2 files

[19:33] <Geth> ¦ rakudo: Speed up setup of NativeCall subs and reduce memory usage

[19:33] <Geth> ¦ rakudo: 

[19:33] <Geth> ¦ rakudo: When replacing a native sub's stub body with a generated one, we need to remove

[19:33] <Geth> ¦ rakudo: the scheduled fixups, lest they undo our replacement. The easiest way to do

[19:33] <Geth> ¦ rakudo: this is to just run the compiler thunk, which takes care of this after dynamic

[19:33] <Geth> ¦ rakudo: compilation. This however is a very expensive operation as it not only compiles

[19:33] <Geth> ¦ rakudo: that body but has to create setup code for the lexical scope. This makes

[19:33] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[19:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b7fef2e7d

[19:33] <Geth> ¦ rakudo: 9433d0f937 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 2 files

[19:33] <Geth> ¦ rakudo: Merge pull request #4393 from rakudo/speed_up_native_call_setup

[19:33] <Geth> ¦ rakudo: 

[19:33] <Geth> ¦ rakudo: Speed up setup of NativeCall subs and reduce memory usage

[19:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9433d0f937

[19:36] *** patrickb joined
[21:19] *** patrickb left
[21:22] <lizmat> hmmm.. make spectest failed on 2 files, but these run fine by themselves

[21:28] <[Coke]> we don't have modules.raku.org setup here with Geth, I guess.

[21:31] *** linkable6 left
[21:32] *** linkable6 joined
[21:59] *** hankache joined
[22:06] <vrurg> lizmat: I think they're flappers after all. 

[22:06] <lizmat> can't remember having these flap, though :-(

[22:06] <lizmat> didn't flap when I bumped NQP either

[22:11] <vrurg> It's just my experience. Most of the time if something fails when is ran in a bunch but not individually – try it 50+ times and it eventually reveal a problem.

[22:15] *** hankache left
[22:19] <vrurg> I just've pulled the master, t/spec/S17-supply/syntax-nonblocking-await.t fails under spectest. Trying it in a loop.

[22:20] <lizmat> I've just reverted 3b7fef2e7de6bb915da0 locally, then will start a spectest run and look at the result tomorrow&

[22:21] *** linkable6 left
[22:23] *** linkable6 joined
[22:55] *** sena_kun left
[23:00] *** samcv left
[23:03] *** samcv joined
