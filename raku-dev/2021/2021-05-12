[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:10] *** finsternis joined
[00:19] *** dogbert17 joined
[00:23] *** dogbert11 left
[00:24] *** dogbert11 joined
[00:26] *** dogbert17 left
[01:10] *** frost-lab joined
[01:36] *** kvw_5_ joined
[01:39] *** kvw_5 left
[02:39] *** greppable6 left
[02:39] *** linkable6 left
[02:39] *** benchable6 left
[02:39] *** bloatable6 left
[02:39] *** nativecallable6 left
[02:39] *** evalable6 left
[02:39] *** reportable6 left
[02:39] *** tellable6 left
[02:39] *** unicodable6 left
[02:39] *** statisfiable6 left
[02:39] *** coverable6 left
[02:39] *** notable6 left
[02:39] *** shareable6 left
[02:39] *** sourceable6 left
[02:39] *** quotable6 left
[02:39] *** bisectable6 left
[02:39] *** squashable6 left
[02:39] *** committable6 left
[02:39] *** releasable6 left
[02:40] *** bisectable6 joined
[02:40] *** statisfiable6 joined
[02:40] *** quotable6 joined
[02:40] *** reportable6 joined
[02:40] *** nativecallable6 joined
[02:40] *** releasable6 joined
[02:41] *** unicodable6 joined
[02:41] *** benchable6 joined
[02:41] *** shareable6 joined
[02:41] *** linkable6 joined
[02:41] *** tellable6 joined
[02:41] *** notable6 joined
[02:42] *** greppable6 joined
[02:42] *** evalable6 joined
[02:42] *** sourceable6 joined
[02:42] *** bloatable6 joined
[02:42] *** committable6 joined
[02:42] *** coverable6 joined
[02:42] *** squashable6 joined
[04:54] *** Kaiepi left
[04:55] *** Kaiepi joined
[05:08] *** Kaiepi left
[05:52] *** Kaiepi joined
[06:02] *** reportable6 left
[06:02] *** reportable6 joined
[06:56] *** domidumont joined
[07:48] <tyil> Geth: uptime

[07:48] <Geth> 2 days, 22 hours, 11 minutes, and 4 seconds

[07:48] <tyil> wonder if that's a new record :p

[09:16] <lizmat> :-)

[09:17] <lizmat> m: my %h; %h<a> := { foo => 1, bar => 2 }; %h<b> := { foo => 3 }; dd  %h<a b c>   # fully expected

[09:17] <camelia> rakudo-moar 816281b91: OUTPUT: «({:bar(2), :foo(1)}, {:foo(3)}, Any)␤»

[09:17] <lizmat> m: my %h; %h<a> := { foo => 1, bar => 2 }; %h<b> := { foo => 3 }; dd  %h<a b c>:n   # WTF?   Pairs ?

[09:17] <camelia> rakudo-moar 816281b91: OUTPUT: «Unexpected named argument 'n' passed␤  in block <unit> at <tmp> line 1␤␤»

[09:17] <lizmat> m: my %h; %h<a> := { foo => 1, bar => 2 }; %h<b> := { foo => 3 }; dd  %h<a b c>:v   # WTF?   Pairs ?

[09:17] <camelia> rakudo-moar 816281b91: OUTPUT: «(:bar(2), :foo(1), :foo(3))␤»

[09:17] <lizmat> m: my %h; %h<a> = { foo => 1, bar => 2 }; %h<b> = { foo => 3 }; dd  %h<a b c>:v   # WTF?   Pairs ?

[09:17] <camelia> rakudo-moar 816281b91: OUTPUT: «(${:bar(2), :foo(1)}, ${:foo(3)})␤»

[09:18] <lizmat> I wonder whether that is intentional or not

[09:18] <lizmat> bisectable6: my %h; %h<a> := { foo => 1, bar => 2 }; %h<b> := { foo => 3 }; dd  %h<a b c>:v

[09:18] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:19] <bisectable6> lizmat, Output on all releases: https://gist.github.com/5e6e6c5e9bfd3bb363a5b8a6008a2966

[09:19] <bisectable6> lizmat, More than 4 changes to bisect, please try a narrower range like old=2021.04 new=HEAD

[09:20] <lizmat> bisectable6: old=2020.01 my %h; %h<a> := { foo => 1, bar => 2 }; %h<b> := { foo => 3 }; dd  %h<a b c>:v

[09:20] <bisectable6> lizmat, On both starting points (old=2020.01 new=816281b) the exit code is 0 and the output is identical as well

[09:20] <bisectable6> lizmat, Output on both points: «(:foo(1), :bar(2), :foo(3))␤»

[09:20] <lizmat> guess it is a side-effect of not being containerized

[09:20] <lizmat> meh

[09:27] *** squashable6 left
[09:29] *** squashable6 joined
[09:33] *** squashable6 left
[09:38] *** squashable6 joined
[09:40] *** squashable6 left
[09:41] *** squashable6 joined
[09:46] *** dogbert11 left
[10:24] <lizmat> https://gist.github.com/lizmat/c165bb0cbf9d4af25499ce767486093d   # map inside a map doesn't map ?

[10:24] <lizmat> I'd expect that to die

[10:24] <lizmat> because of the inner map

[10:25] <Geth> ¦ rakudo/rakuast: da4dc8a129 | (Jonathan Worthington)++ | 5 files

[10:25] <Geth> ¦ rakudo/rakuast: Basic RakuAST node for token/regex/rule decls

[10:25] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/da4dc8a129

[10:25] <lizmat> I'm I going crazy, or is that supposed to work ?

[10:56] <moritz> is this lazy evaluation causing surprises?

[10:58] <lizmat> yeah, it is

[10:59] <lizmat> mix in some "do for" s to fix

[10:59] <lizmat> or some .eager somewhere

[10:59] <lizmat> now that I recognize the issue, I can fix it in my code  :-)

[11:01] <lizmat> hmmm... I wonder if .sort could use a :reverse arg

[11:01] <lizmat> it would just be wrapping the resulting Seq with another iterator

[11:16] *** lichtkind joined
[11:21] *** squashable6 left
[11:25] *** squashable6 joined
[12:02] *** reportable6 left
[12:02] *** reportable6 joined
[13:02] <[Tux]> Rakudo v2021.04-28-g816281b91 (v6.d) on MoarVM 2021.04-47-g7be286190

[13:02] <[Tux]> csv-test-xs-20      0.376 -  0.376

[13:02] <[Tux]> csv-ip5xs           0.915 -  1.058

[13:02] <[Tux]> test-t --race       0.922 -  1.023

[13:02] <[Tux]> test-t              2.128 -  2.215

[13:02] <[Tux]> test                7.873 -  8.076

[13:02] <[Tux]> csv-ip5xs-20        9.510 - 10.050

[13:02] <[Tux]> test-t-20 --race   11.155 - 11.279

[13:02] <[Tux]> csv-parser         28.356 - 29.741

[13:02] <[Tux]> test-t-20          35.982 - 37.494

[13:22] *** frost-lab left
[14:28] <[Coke]> "No, Mr. Bond, I'd expect that to die."

[15:17] *** domidumont left
[15:41] <[Coke]> anyone in particular maintaining https://github.com/raku/nqp-configure ?

[15:52] <[Coke]> If I want to change a branch of nqp (e.g.) to use a different nqp-configure, what do I need to do other than edit .gitmodules ? (doing a git submodule update does nothing, removing 3rd-party/nqp-configure and doing submodule init/update gives me back the original one...)

[16:01] <[Coke]> found it (sync)

[16:07] <Geth> ¦ rakudo/rakuast: 05f7740c15 | (Jonathan Worthington)++ | 10 files

[16:07] <Geth> ¦ rakudo/rakuast: Flesh out RakuAST error reporting

[16:07] <Geth> ¦ rakudo/rakuast: 

[16:07] <Geth> ¦ rakudo/rakuast: * Collect typed and untyped worries and sorries from the compiler

[16:07] <Geth> ¦ rakudo/rakuast: * Form those into the X::Comp::Group when there are multiple things to

[16:07] <Geth> ¦ rakudo/rakuast:   report

[16:07] <Geth> ¦ rakudo/rakuast: * Provide a means for RakuAST nodes to perform an action at check time

[16:07] <Geth> ¦ rakudo/rakuast:   and report sorries and worries; implement two cases of this to show

[16:07] <Geth> ¦ rakudo/rakuast:   that it works

[16:07] <Geth> ¦ rakudo/rakuast: * Report any potential difficulties and check-time errors at the end of

[16:07] <Geth> ¦ rakudo/rakuast:   compilation

[16:07] <Geth> ¦ rakudo/rakuast: * Also throw any check-time sorries detected when we do an AST EVAL

[16:07] <Geth> ¦ rakudo/rakuast: review: https://github.com/rakudo/rakudo/commit/05f7740c15

[16:11] <[Coke]> I normally treat submodules as readonly - if i want to be working on the submodule, can I just cd to it and treat it like a normal git clone? Any special precautions to take?

[16:15] <[Coke]> also, I feel the need to add $*lorries somewhere to compliment sorries & worries. :P

[16:22] <[Coke]> (also, TIL: porry, gorry)

[16:58] *** Kaiepi left
[16:58] *** Kaeipi joined
[17:03] *** domidumont joined
[17:15] *** Merfont joined
[17:15] *** Kaeipi left
[17:54] *** domidumont left
[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[18:12] *** Merfont left
[18:13] *** Merfont joined
[19:17] <nine> [Coke]: yes, you can

[21:16] *** MasterDuke joined
[21:54] <lizmat> m: dd "foo\nbar\n\n".split("\n").join("\n")   # completely expected

[21:54] <camelia> rakudo-moar 816281b91: OUTPUT: «"foo\nbar\n\n"␤»

[21:55] <lizmat> m: dd "foo\nbar\n\n".split("\n").squish.join("\n")   # que ?

[21:55] <camelia> rakudo-moar 816281b91: OUTPUT: «"foo\nbar\n"␤»

[21:55] <lizmat> m: dd "foo\nbar\n\n".split("\n")   #  aaaah

[21:55] <camelia> rakudo-moar 816281b91: OUTPUT: «("foo", "bar", "", "").Seq␤»

[23:26] *** quotable6 left
[23:26] *** sourceable6 left
[23:26] *** reportable6 left
[23:26] *** statisfiable6 left
[23:26] *** greppable6 left
[23:26] *** unicodable6 left
[23:26] *** nativecallable6 left
[23:26] *** tellable6 left
[23:26] *** bisectable6 left
[23:26] *** coverable6 left
[23:26] *** squashable6 left
[23:26] *** linkable6 left
[23:26] *** releasable6 left
[23:26] *** notable6 left
[23:26] *** evalable6 left
[23:26] *** benchable6 left
[23:26] *** shareable6 left
[23:26] *** bloatable6 left
[23:26] *** committable6 left
[23:26] *** quotable6 joined
[23:26] *** statisfiable6 joined
[23:26] *** nativecallable6 joined
[23:26] *** linkable6 joined
[23:27] *** squashable6 joined
[23:27] *** unicodable6 joined
[23:27] *** committable6 joined
[23:27] *** sourceable6 joined
[23:27] *** bisectable6 joined
[23:27] *** releasable6 joined
[23:27] *** notable6 joined
[23:27] *** tellable6 joined
[23:28] *** coverable6 joined
[23:28] *** greppable6 joined
[23:28] *** reportable6 joined
[23:28] *** evalable6 joined
[23:29] *** bloatable6 joined
[23:29] *** benchable6 joined
[23:29] *** shareable6 joined
