[00:02] *** reportable6 left
[00:03] *** reportable6 joined
[00:56] *** linkable6 joined
[01:00] *** frost joined
[04:02] *** sourceable6 left
[04:02] *** bloatable6 left
[04:02] *** benchable6 left
[04:02] *** squashable6 left
[04:02] *** committable6 left
[04:02] *** releasable6 left
[04:02] *** shareable6 left
[04:02] *** quotable6 left
[04:02] *** reportable6 left
[04:02] *** unicodable6 left
[04:02] *** coverable6 left
[04:02] *** greppable6 left
[04:02] *** linkable6 left
[04:02] *** statisfiable6 left
[04:02] *** nativecallable6 left
[04:03] *** greppable6 joined
[04:04] *** nativecallable6 joined
[04:04] *** linkable6 joined
[04:04] *** shareable6 joined
[04:04] *** releasable6 joined
[04:05] *** quotable6 joined
[04:05] *** statisfiable6 joined
[04:05] *** squashable6 joined
[04:48] *** squashable6 left
[04:56] *** evalable6 joined
[05:04] *** benchable6 joined
[05:04] *** bloatable6 joined
[05:04] *** committable6 joined
[05:10] *** Razetime joined
[05:48] *** squashable6 joined
[06:03] *** reportable6 joined
[06:04] *** coverable6 joined
[06:04] *** unicodable6 joined
[06:04] *** sourceable6 joined
[06:22] *** squashable6 left
[08:28] *** |Tux| joined
[08:28] *** Tux__ joined
[08:32] *** Tux__ left
[09:31] <Geth> ¦ nqp/new-disp: b07e568be4 | (Jonathan Worthington)++ | 4 files

[09:31] <Geth> ¦ nqp/new-disp: Access register allocator via compiler instance

[09:31] <Geth> ¦ nqp/new-disp: 

[09:31] <Geth> ¦ nqp/new-disp: This saves a lot of dynamic variable lookups, which are relatively

[09:31] <Geth> ¦ nqp/new-disp: costly.

[09:31] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/b07e568be4

[09:35] <Geth> ¦ rakudo/new-disp: b14734fcde | (Jonathan Worthington)++ | src/vm/moar/Perl6/Ops.nqp

[09:35] <Geth> ¦ rakudo/new-disp: Use cheaper way to access register allocator

[09:35] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/b14734fcde

[09:39] *** evalable6 left
[09:39] *** linkable6 left
[09:40] *** linkable6 joined
[09:41] *** evalable6 joined
[10:09] *** lizmat_ joined
[10:10] *** TempIRCLogger left
[10:10] *** TempIRCLogger joined
[10:13] *** lizmat left
[10:16] *** lizmat_ left
[10:16] *** lizmat joined
[10:22] *** sena_kun joined
[10:24] *** squashable6 joined
[10:38] <|Tux|> Rakudo v2021.08-22-gb451f89b6 (v6.d) on MoarVM 2021.08-9-g4b7ffe3af

[10:38] <|Tux|> csv-test-xs-20      0.370 -  0.373

[10:38] <|Tux|> csv-ip5xs           0.850 -  0.850

[10:38] <|Tux|> test-t --race       0.861 -  0.918

[10:38] <|Tux|> test-t              1.968 -  1.991

[10:38] <|Tux|> test                7.706 -  7.719

[10:38] <|Tux|> csv-ip5xs-20        8.356 -  8.472

[10:38] <|Tux|> test-t-20 --race    9.756 - 10.005

[10:38] <|Tux|> csv-parser         26.847 - 27.170

[10:38] <|Tux|> test-t-20          33.573 - 34.965

[11:22] <Geth> ¦ rakudo/new-disp: f63e88285f | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[11:22] <Geth> ¦ rakudo/new-disp: Ensure that CALL-ME always takes precedence

[11:22] <Geth> ¦ rakudo/new-disp: 

[11:22] <Geth> ¦ rakudo/new-disp: Even if we have a Raku Code object, mixing in a role to it that has a

[11:22] <Geth> ¦ rakudo/new-disp: CALL-ME method should result in the latter being invoked.

[11:22] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/f63e88285f

[11:50] *** TempIRCLogger left
[11:51] *** TempIRCLogger joined
[12:02] *** reportable6 left
[12:05] *** reportable6 joined
[12:07] <lizmat> notable6: weekly

[12:07] <notable6> lizmat, 1 note: 2021-09-03T17:57:46Z <lizmat>: https://news.perlfoundation.org/post/raku-foundation-and-tm-update

[12:07] <lizmat> notable6: weekly reset

[12:07] <notable6> lizmat, Moved existing notes to “weekly_2021-09-06T12:07:28Z”

[12:47] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/06/2021-36-clean-disp/

[12:52] <lizmat> hmmm..  should qx<> also be exposed as a sub so that you could use it like "foo &qx( <echo bar> )" ?

[12:54] <sena_kun> why not just `foo qx<echo bar>`?

[13:05] *** linkable6 left
[13:05] *** evalable6 left
[13:05] <Geth> ¦ nqp/new-disp: c1cda088f7 | (Jonathan Worthington)++ | src/core/dispatchers.nqp

[13:05] <Geth> ¦ nqp/new-disp: Avoid some deconting inside of dispatchers

[13:05] <Geth> ¦ nqp/new-disp: 

[13:05] <Geth> ¦ nqp/new-disp: Which may get us bogus behavior when we really do want to work with

[13:05] <Geth> ¦ nqp/new-disp: instances of Scalar and Proxy.

[13:05] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/c1cda088f7

[13:06] *** linkable6 joined
[13:07] *** evalable6 joined
[13:22] *** frost left
[13:32] <Geth> ¦ rakudo/new-disp: 754ed7bf4b | (Jonathan Worthington)++ | 2 files

[13:32] <Geth> ¦ rakudo/new-disp: Lots of .HOW => nqp::how_nd in dispatchers/MOP

[13:32] <Geth> ¦ rakudo/new-disp: 

[13:32] <Geth> ¦ rakudo/new-disp: We need to be especially careful not to decont things during dispatch,

[13:32] <Geth> ¦ rakudo/new-disp: otherwise we can create infinite recursion around code dealing with

[13:32] <Geth> ¦ rakudo/new-disp: Proxy. This fixes Scalar::History (and possibly more) on new-disp.

[13:32] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/754ed7bf4b

[13:43] <Geth> ¦ nqp/new-disp: 475cff6317 | Altai-man++ (committed using GitHub Web editor) | tools/templates/MOAR_REVISION

[13:43] <Geth> ¦ nqp/new-disp: Update MOAR_REVISION

[13:43] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/475cff6317

[13:44] <Geth> ¦ rakudo/new-disp: bff3cf8e52 | Altai-man++ (committed using GitHub Web editor) | tools/templates/NQP_REVISION

[13:44] <Geth> ¦ rakudo/new-disp: Update NQP_REVISION

[13:44] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/bff3cf8e52

[14:19] <Geth> ¦ rakudo/new-disp: 811bcc5820 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[14:19] <Geth> ¦ rakudo/new-disp: Don't assume ever meta-object has a mro method

[14:19] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/811bcc5820

[14:19] <Geth> ¦ rakudo/new-disp: 3a351495bc | (Jonathan Worthington)++ | 2 files

[14:19] <Geth> ¦ rakudo/new-disp: Optimize method calls made on roles

[14:19] <Geth> ¦ rakudo/new-disp: 

[14:19] <Geth> ¦ rakudo/new-disp: We can pre-calculate and cache the pun in the callsite, rewriting the

[14:19] <Geth> ¦ rakudo/new-disp: call capture in the dispatcher to include it. This means that calls to

[14:19] <Geth> ¦ rakudo/new-disp: methods on a role (typically `.new`, which relies on punning) will now

[14:19] <Geth> ¦ rakudo/new-disp: no longer need to slurp/flatten arguments, will avoid an extra level of

[14:19] <Geth> ¦ rakudo/new-disp: invocation, and expose the target method in the pun for spesh linking

[14:19] <Geth> ¦ rakudo/new-disp: and/or inlining.

[14:20] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/3a351495bc

[14:22] *** evalable6 left
[14:22] *** linkable6 left
[14:22] *** linkable6 joined
[14:24] *** evalable6 joined
[14:47] <Geth> ¦ rakudo/new-disp: 2471aa1f08 | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[14:47] <Geth> ¦ rakudo/new-disp: Add a missing guard in multi deferral

[14:47] <Geth> ¦ rakudo/new-disp: 

[14:47] <Geth> ¦ rakudo/new-disp: The callsame guard only cared for the types of the arguments, but not

[14:47] <Geth> ¦ rakudo/new-disp: the particular target multi. (Eventually this should be resolved by us

[14:47] <Geth> ¦ rakudo/new-disp: arranging to attach the dispatch caches for `callsame` and friends a

[14:47] <Geth> ¦ rakudo/new-disp: level up, but for now this gets us correct behavior.)

[14:47] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/2471aa1f08

[16:16] <Geth> ¦ nqp/new-disp: b48073881c | (Jonathan Worthington)++ | src/core/dispatchers.nqp

[16:16] <Geth> ¦ nqp/new-disp: Add a missing guard in type check dispatcher

[16:16] <Geth> ¦ nqp/new-disp: 

[16:16] <Geth> ¦ nqp/new-disp: We depend on the mode flags of the object too; failing to guard on that

[16:16] <Geth> ¦ nqp/new-disp: means we can end up mishandling the checks.

[16:16] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/b48073881c

[17:14] <Geth> ¦ rakudo/new-disp: 26010a6a0c | (Jonathan Worthington)++ | src/vm/moar/dispatchers.nqp

[17:14] <Geth> ¦ rakudo/new-disp: Complete NYI ambiguity handling in multi dispatch

[17:14] <Geth> ¦ rakudo/new-disp: 

[17:14] <Geth> ¦ rakudo/new-disp: Handling of the ambiguity marker was missing for a non-trivial dispatch.

[17:14] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/26010a6a0c

[17:25] *** Razetime left
[17:33] *** sena_kun left
[18:02] *** reportable6 left
[18:13] *** codesections joined
[19:04] *** reportable6 joined
[19:38] *** TempIRCLogger left
[19:38] *** TempIRCLogger joined
[20:53] *** vrurg left
[20:59] *** vrurg joined
[21:05] *** vrurg left
[21:05] *** vrurg joined
[21:23] <Geth> ¦ nqp/new-disp: c230c2702b | (Jonathan Worthington)++ | 3 files

[21:23] <Geth> ¦ nqp/new-disp: Switch most $*MAST_FRAME access away from dynamics

[21:23] <Geth> ¦ nqp/new-disp: 

[21:23] <Geth> ¦ nqp/new-disp: There's a couple that will need a more significant refactor rather than

[21:23] <Geth> ¦ nqp/new-disp: relatively mechanical replacement.

[21:23] <Geth> ¦ nqp/new-disp: review: https://github.com/Raku/nqp/commit/c230c2702b

[21:24] <Geth> ¦ rakudo/new-disp: 233c337b39 | (Jonathan Worthington)++ | src/vm/moar/Perl6/Ops.nqp

[21:24] <Geth> ¦ rakudo/new-disp: Access current MAST::Frame via the compiler object

[21:24] <Geth> ¦ rakudo/new-disp: 

[21:24] <Geth> ¦ rakudo/new-disp: Which is a bit faster than the dynamic variable, since it's just an

[21:24] <Geth> ¦ rakudo/new-disp: (easily inlined) attribute access.

[21:24] <Geth> ¦ rakudo/new-disp: review: https://github.com/rakudo/rakudo/commit/233c337b39

[21:33] *** |Tux| left
[22:48] *** linkable6 left
[22:48] *** evalable6 left
[22:50] *** linkable6 joined
[23:23] *** MasterDuke left
[23:49] *** evalable6 joined
