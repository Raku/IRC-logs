[00:49] *** JRaspass joined
[00:51] *** JRaspass left
[07:45] *** sena_kun joined
[07:57] *** Altai-man joined
[07:59] *** sena_kun left
[08:09] *** Xliff joined
[08:46] <Geth> ¦ nqp/JJ-patch-2: 21c199266b | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | README.pod

[08:46] <Geth> ¦ nqp/JJ-patch-2: Minor corrections

[08:46] <Geth> ¦ nqp/JJ-patch-2: 

[08:46] <Geth> ¦ nqp/JJ-patch-2: Here and there.

[08:46] <Geth> ¦ nqp/JJ-patch-2: review: https://github.com/Raku/nqp/commit/21c199266b

[09:09] *** linkable6 left
[09:09] *** evalable6 left
[09:10] *** evalable6 joined
[09:11] *** linkable6 joined
[09:48] *** Voldenet left
[09:54] *** Voldenet joined
[09:54] *** Voldenet left
[09:54] *** Voldenet joined
[10:19] <lizmat> m: m: my int8 @a = ^10; dd @a[^3]; dd @a[0,1,2]

[10:19] <camelia> rakudo-moar f89863249: OUTPUT: «array[int8].new(0, 1, 2)␤(0, 1, 2)␤»

[10:20] <lizmat> apparently nativearray[Range] is handled differently

[10:21] <lizmat> feels that either they should both return the same native type, or both should return List

[10:21] <lizmat> the latter breaks some spectests though  :-(

[10:49] *** Voldenet left
[10:55] *** Voldenet joined
[10:55] *** Voldenet left
[10:55] *** Voldenet joined
[11:06] <Geth> ¦ rakudo/faster-slice-access: 6df0b4e160 | (Elizabeth Mattijsen)++ | src/core.c/native_array.pm6

[11:06] <Geth> ¦ rakudo/faster-slice-access: Remove specific nativearray[Range] candidate

[11:06] <Geth> ¦ rakudo/faster-slice-access: 

[11:06] <Geth> ¦ rakudo/faster-slice-access: It's falling back to the POSITIONS sub, which will be removed.

[11:06] <Geth> ¦ rakudo/faster-slice-access: 

[11:06] <Geth> ¦ rakudo/faster-slice-access: This breaks some spectests that expect an array of the same native

[11:06] <Geth> ¦ rakudo/faster-slice-access: type to be returned.  On the other hand, without this specific

[11:06] <Geth> ¦ rakudo/faster-slice-access: candidate, slicing a native array is marginally faster.

[11:06] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/6df0b4e160

[11:39] <Geth> ¦ rakudo/faster-slice-access: dd57a29c81 | (Elizabeth Mattijsen)++ | 7 files

[11:39] <Geth> ¦ rakudo/faster-slice-access: Remove the no longer needed internal POSITIONS sub

[11:39] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/dd57a29c81

[11:54] *** brrt joined
[11:54] <brrt> happy new year #raku-dev

[11:57] <lizmat> brrt  best wishes to you too!

[11:58] *** sena_kun joined
[11:59] *** Altai-man left
[12:00] <Geth> ¦ rakudo/faster-slice-access: 39 commits pushed by (Elizabeth Mattijsen)++

[12:00] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/compare/dd57a29c81d7...901586054965

[12:00] <lizmat> rebase

[12:18] <Geth> ¦ rakudo/faster-slice-access: ce6724289c | (Elizabeth Mattijsen)++ | 4 files

[12:18] <Geth> ¦ rakudo/faster-slice-access: Mark generated classes as implementation detail

[12:18] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/ce6724289c

[12:19] *** brrt left
[12:24] <Geth> ¦ rakudo/faster-slice-access: cbdc32bbc6 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[12:24] <Geth> ¦ rakudo/faster-slice-access: Address exploding on the JVM backend

[12:24] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/cbdc32bbc6

[12:38] <lizmat> bisectable6: my str @a = <a b c d e f g h i j>; dd @a[*-4 .. *-2]

[12:38] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:38] <bisectable6> lizmat, Output on all releases: https://gist.github.com/f131fe569bf3e0ed1d4bc65190a39320

[12:38] <bisectable6> lizmat, Bisecting by exit code (old=2020.11 new=2020.12). Old exit code: 0

[12:38] <bisectable6> lizmat, bisect log: https://gist.github.com/65abf27c249c5eed680f68f0175cd24f

[12:38] <bisectable6> lizmat, (2020-12-04) https://github.com/rakudo/rakudo/commit/705e6e62c5058be50f9770b27859bc69c6feed6b

[12:38] <bisectable6> lizmat, Bisecting by output (old=2018.04.1 new=2018.05) because on both starting points the exit code is 0

[12:39] <bisectable6> lizmat, bisect log: https://gist.github.com/eae393eed7ebc7ec16513974e9b5bbd8

[12:39] <bisectable6> lizmat, (2018-05-08) https://github.com/rakudo/rakudo/commit/67a31600be5f42b6d7ceea28e00998143612dcf3

[12:39] <bisectable6> lizmat, Bisecting by exit code (old=2016.02 new=2016.03). Old exit code: 1

[12:39] <bisectable6> lizmat, bisect log: https://gist.github.com/b0d21b004d24d136c74231c1135157ca

[12:39] <bisectable6> lizmat, (2016-03-17) https://github.com/rakudo/rakudo/commit/eed4ebb0c0f5c7169c9f4536f4bd13f405d8f3cd

[12:39] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/f80ac00e16b89c57826b990bcdeb5305

[12:40] <lizmat> m: my str @a = <a b c d e f g h i j>; dd @a[*-4 .. *-2]

[12:40] <camelia> rakudo-moar f89863249: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[12:43] <lizmat> bisectable6: my str @a = <a b c d e f g h i j>; dd @a[1,2,*]

[12:43] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[12:43] <bisectable6> lizmat, Output on all releases: https://gist.github.com/962b121a6003d1369b32b996791f97f4

[12:43] <bisectable6> lizmat, Bisecting by exit code (old=2020.11 new=2020.12). Old exit code: 0

[12:43] <bisectable6> lizmat, bisect log: https://gist.github.com/85f451c16600968f91bcfcc715a8e5a7

[12:43] <bisectable6> lizmat, (2020-12-04) https://github.com/rakudo/rakudo/commit/705e6e62c5058be50f9770b27859bc69c6feed6b

[12:43] <bisectable6> lizmat, Bisecting by output (old=2018.04.1 new=2018.05) because on both starting points the exit code is 0

[12:43] <bisectable6> lizmat, bisect log: https://gist.github.com/59711e908c66a95a6fa5a4dff5af2f6a

[12:43] <bisectable6> lizmat, (2018-05-08) https://github.com/rakudo/rakudo/commit/67a31600be5f42b6d7ceea28e00998143612dcf3

[12:44] <bisectable6> lizmat, Bisecting by exit code (old=2016.02 new=2016.03). Old exit code: 1

[12:44] <bisectable6> lizmat, bisect log: https://gist.github.com/8ef6ecebdd0ae7f9c028274a62b3d0b0

[12:44] <bisectable6> lizmat, (2016-03-17) https://github.com/rakudo/rakudo/commit/eed4ebb0c0f5c7169c9f4536f4bd13f405d8f3cd

[12:44] <bisectable6> lizmat, Output on all releases and bisected commits: https://gist.github.com/511ed6e0a8e3666935613a3f53bd59e4

[12:52] <nine> Interesting: there's an NQP_FLAGS_EXTRA in tools/templates/js/Makefile.in but it's never used anywhere

[13:19] *** evalable6 left
[13:19] *** linkable6 left
[13:20] *** linkable6 joined
[13:21] *** evalable6 joined
[13:23] <Geth> ¦ rakudo/faster-slice-access: f12508bfbd | (Elizabeth Mattijsen)++ | src/core.c/native_array.pm6

[13:23] <Geth> ¦ rakudo/faster-slice-access: Restore native @a[Range] candidate

[13:23] <Geth> ¦ rakudo/faster-slice-access: 

[13:23] <Geth> ¦ rakudo/faster-slice-access: Turns out it was needed after all.  Just without a call to POSITIONS!

[13:23] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/f12508bfbd

[15:14] <gfldex> I got an individual multi candidate. Is there any way to start the MMD from that point?

[15:15] <gfldex> m: multi sub f() {}; my &main = multi sub f(1) {}; dd &main;

[15:15] <camelia> rakudo-moar f89863249: OUTPUT: «Sub &main = multi sub f (1) { #`(Sub|86992448) ... }␤»

[15:15] <gfldex> I only got the &main and can't get a reference to the other candidate.

[15:35] *** sena_kun left
[15:37] *** sena_kun joined
[15:39] *** sena_kun left
[15:41] *** sena_kun joined
[15:57] *** Altai-man joined
[15:59] *** sena_kun left
[16:06] <Geth> ¦ rakudo/faster-slice-access: 462c7a6e7c | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[16:06] <Geth> ¦ rakudo/faster-slice-access: Better fix for problems on JVM backend

[16:06] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/462c7a6e7c

[16:21] *** Altai-man left
[16:24] *** sena_kun joined
[16:45] *** patrickb joined
[16:51] *** patrickb left
[17:25] *** patrickb joined
[17:25] <patrickb> o/

[17:26] <nwc10> \o

[17:28] <patrickb> I'm currently trying out https://github.com/Raku/nqp/pull/691 and wonder about the JVM failure (https://dev.azure.com/jjmerelo0004/jjmerelo/_build/results?buildId=220&view=logs&j=4b893f53-7e1e-5c61-1e1e-e4fc61ee1c48&t=819ee56f-5718-551c-ab20-4c9fdb52c66b&l=57)

[17:30] <patrickb> Do I possibly need a rebootstrap or something like that? (Respective changes for MoarVM interestingly didn't require a rebootstrap.)

[17:45] <nwc10> sensible question - I don

[17:45] <nwc10> t know

[17:48] <patrickb> rebooting. Back in a bit...

[17:48] *** patrickb left
[17:49] *** patrickb joined
[17:54] <Geth> ¦ rakudo: 8150a2864c | (Elizabeth Mattijsen)++ | 2 files

[17:54] <Geth> ¦ rakudo: Allow native @a[*-4 .. *..2] to work

[17:54] <Geth> ¦ rakudo: 

[17:54] <Geth> ¦ rakudo: This was apparently broken a little while ago, and nobody noticed.

[17:54] <Geth> ¦ rakudo: Basically, Callable candidates must handle Callables that take more

[17:54] <Geth> ¦ rakudo: than a single argument, and that may return something else than an

[17:54] <Geth> ¦ rakudo: Int.

[17:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8150a2864c

[18:39] <tbrowder> ugexe: having a problem with zef. just released a new module PDF::Writer with a  bin file executable name "pdfwriter". I execute "zef install PDF::Writer" and it finds it on cpan and proceeds to test and install. It reports "1 bin/ script [pdf-rewriter.raku] installed to /home/tbrowde/.raku/bin" and I don't know where that executable is coming from.

[18:40] <tbrowder> the script works fine when installed from the local host and the local source of the module's repo.

[18:41] <tbrowder> module was released to cpan by mi6

[18:44] *** sena_kun left
[19:29] <tbrowder> ok, i see the *.raku script was from a module dependenc...

[19:38] *** leont joined
[19:42] <bartolin> patrickb: I'm pretty sure changing the arguments for spawnprocasync needs a bootstrap for the JVM backend

[19:50] <bartolin> lizmat: is the faster-slice-access supposed to pass all spectests? It compiles on the JVM and I could give it a try ...

[19:50] <bartolin> *faster-slice-access branch

[20:30] *** b2gills left
[20:31] *** b2gills joined
[20:43] *** sena_kun joined
[21:31] <lizmat> bartolin: the faster-slice-access branch breaks a few spectests

[21:31] <lizmat> 1. because some error messages have become more specific

[21:31] <lizmat> 2. because a lazy iterator for positions no longer means a lazy result

[21:34] <lizmat> the latter behaviour was deemed "experimental"

[22:14] *** sena_kun left
[22:14] *** sena_kun joined
[22:21] *** sena_kun left
[22:22] *** sena_kun joined
[22:28] *** sena_kun left
[23:30] <patrickb> What's the correct procedure for doing a rebootstrap for JVM? One of the changes is in src/core/testing.nqp. With that change the stage 1 build fails, without stage 2 fails.

[23:35] <patrickb> What might work: Build a stage 1 (with the change in src/core/testing.nqp excluded). Copy stage 1 to 0. Do a fresh run with that new stage 0 (and all changes applied) and then copy stage 2 to 0.

[23:35] <patrickb> That's not what the docs say, though.

