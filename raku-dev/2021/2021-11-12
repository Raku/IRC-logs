[00:02] *** reportable6 left
[00:19] *** patrickb left
[01:50] *** Xliff left
[01:50] *** Xliff joined
[02:03] *** reportable6 joined
[03:16] *** frost joined
[04:03] <Xliff> use NativeCall; my $c = CArray[int32].new; $c.push: $_ for 1, 2, 3\; $c.gist.say

[04:03] <Xliff> m: use NativeCall; my $c = CArray[int32].new; $c.push: $_ for 1, 2, 3\; $c.gist.say

[04:03] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3ray[int32].new; $c.push: $_ for 1, 2, 3\7⏏5; $c.gist.say␤»

[04:03] <Xliff> m: use NativeCall; my $c = CArray[int32].new; $c.push: $_ for 1, 2, 3; $c.gist.say

[04:03] <camelia> rakudo-moar 3d80bec7c: OUTPUT: «Cannot resolve caller push(NativeCall::Types::CArray[int32]:D: Int:D); none of these signatures match:␤    (Any:U \SELF: |values)␤  in block <unit> at <tmp> line 1␤␤»

[04:03] <Xliff> ^^ is that a bug?

[04:14] <timo> you can't push to a CArray, it does not have a concept of length

[04:14] <timo> i guess you could implement it as immediately segfaulting for accessing the highest address the system has to offer :P

[04:31] <Xliff> timo: Then shouldn't there be an override method with an exception?

[04:32] <Xliff> Or gee... how difficult would push be to implement for CArray?

[04:32] <Xliff> Gotta step out. bbl

[04:43] *** gfldex left
[04:48] *** gfldex joined
[05:48] *** bloatable6 left
[05:48] *** greppable6 left
[05:48] *** statisfiable6 left
[05:48] *** notable6 left
[05:48] *** nativecallable6 left
[05:48] *** bisectable6 left
[05:48] *** benchable6 left
[05:48] *** evalable6 left
[05:48] *** committable6 left
[05:48] *** coverable6 left
[05:48] *** linkable6 left
[05:48] *** committable6 joined
[05:49] *** bisectable6 joined
[05:49] *** coverable6 joined
[05:50] *** nativecallable6 joined
[05:50] *** greppable6 joined
[05:50] *** evalable6 joined
[05:51] *** statisfiable6 joined
[06:02] *** reportable6 left
[06:50] *** linkable6 joined
[06:50] *** benchable6 joined
[06:51] *** Xliff left
[07:03] *** reportable6 joined
[08:23] *** quotable6 left
[08:23] *** statisfiable6 left
[08:23] *** reportable6 left
[08:23] *** greppable6 left
[08:23] *** linkable6 left
[08:23] *** coverable6 left
[08:23] *** benchable6 left
[08:23] *** shareable6 left
[08:23] *** nativecallable6 left
[08:23] *** squashable6 left
[08:23] *** evalable6 left
[08:23] *** sourceable6 left
[08:23] *** releasable6 left
[08:23] *** unicodable6 left
[08:23] *** committable6 left
[08:23] *** bisectable6 left
[08:23] *** tellable6 left
[08:24] *** squashable6 joined
[08:24] <nine> Xliff: Implementing push for CArray is simply impossible as a CArray does not know its own length. Thus it doesn't know what the next available index is.

[08:25] *** greppable6 joined
[08:26] *** bisectable6 joined
[08:26] *** coverable6 joined
[08:26] *** quotable6 joined
[08:26] *** releasable6 joined
[08:48] *** Xliff joined
[08:58] *** nebuchadnezzar left
[09:00] <[Tux]> Rakudo v2021.10-89-g3d80bec7c (v6.d) on MoarVM 2021.10-46-gf27cdeaec

[09:00] <[Tux]> csv-test-xs-20      0.379 -  0.393

[09:00] <[Tux]> test-t --race       0.991 -  1.014

[09:00] <[Tux]> csv-ip5xs           1.414 -  1.415

[09:00] <[Tux]> test-t              1.604 -  1.627

[09:00] <[Tux]> csv-parser          4.246 -  4.323

[09:00] <[Tux]> test                7.176 -  7.514

[09:00] <[Tux]> test-t-20 --race    7.323 -  7.561

[09:00] <[Tux]> csv-ip5xs-20       15.588 - 16.301

[09:00] <[Tux]> test-t-20          22.932 - 22.971

[09:23] *** committable6 joined
[09:25] *** nativecallable6 joined
[09:25] *** shareable6 joined
[09:26] *** benchable6 joined
[09:26] *** evalable6 joined
[09:51] *** bloatable6 joined
[10:48] *** notable6 joined
[11:12] *** Altai-man joined
[11:25] *** statisfiable6 joined
[11:26] *** tellable6 joined
[11:26] *** sourceable6 joined
[11:49] *** Altai-man left
[12:04] *** reportable6 joined
[12:10] *** AlexDaniel left
[12:10] *** CIAvash left
[12:27] *** AlexDaniel joined
[12:35] *** Kaipi left
[12:36] *** Kaipi joined
[12:37] *** CIAvash joined
[12:44] *** Xliff left
[12:51] *** AlexDaniel left
[13:00] <Geth> ¦ nqp: 54b92fb64f | (Elizabeth Mattijsen)++ | tools/templates/MOAR_REVISION

[13:00] <Geth> ¦ nqp: Bump MoarVM for the simplified return handling

[13:00] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/commit/54b92fb64f

[13:00] *** AlexDaniel joined
[13:05] *** Altai-man joined
[13:24] *** linkable6 joined
[13:24] <Geth> ¦ rakudo: fca63e6c08 | (Elizabeth Mattijsen)++ | tools/templates/NQP_REVISION

[13:24] <Geth> ¦ rakudo: Bump NQP to get MoarVM's simplified return handling

[13:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fca63e6c08

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: 7d88c8fa6f | (Stefan Seifert)++ | lib/NativeCall.rakumod

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: EVAL raku-nativecall dispatcher code at BEGIN time

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: 

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: We have to conditionally EVAL this code as its using backend-specific NQP ops,

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: but we can at least do so at BEGIN time instead of every time someone loads the

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: NativeCall module.

[13:38] <Geth> ¦ rakudo/new-disp-nativecall: review: https://github.com/rakudo/rakudo/commit/7d88c8fa6f

[13:48] *** Kaipi left
[13:48] *** Kaipi joined
[14:01] *** frost left
[14:25] *** unicodable6 joined
[16:51] <Geth> ¦ rakudo: 4c238bdc96 | MasterDuke17++ (committed using GitHub Web editor) | src/Perl6/Metamodel/EnumHOW.nqp

[16:51] <Geth> ¦ rakudo: Make concurrent access to an enum by value safe (#4634)

[16:51] <Geth> ¦ rakudo: 

[16:51] <Geth> ¦ rakudo: Previously multiple threads all trying to get an enum key by value could

[16:51] <Geth> ¦ rakudo: race to modify %!value_to_enum, which would cause an MVM_oops.

[16:51] <Geth> ¦ rakudo: 

[16:51] <Geth> ¦ rakudo: Instead make it `$`-sigilled, and initially populate a lexical which is

[16:51] <Geth> ¦ rakudo: then (atomically) bound to the attribute.

[16:51] <Geth> ¦ rakudo: 

[16:51] <Geth> ¦ rakudo: Also make concurrently adding a value to an enum safe by invalidating

[16:51] <Geth> ¦ rakudo: $!value_to_enum, it will get re-generated next time it's needed.

[16:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c238bdc96

[16:51] *** linkable6 left
[16:53] *** linkable6 joined
[18:02] *** reportable6 left
[18:23] *** Altai-man left
[19:31] *** melezhik joined
[20:16] *** nebuchadnezzar joined
[21:05] *** reportable6 joined
[21:47] *** TempIRCLogger joined
[22:17] *** MasterDuke92 joined
