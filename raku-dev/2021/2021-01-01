[00:01] <ugexe> i can't recall if i was only interested in fixing the only one side due to it being related to module loading, or if there was a good reason for that True result. i suspect the former, but its been awhile

[00:02] <ugexe> s/fixing the/fixing/

[00:07] *** frost-lab joined
[00:31] *** frost-lab left
[00:43] *** sivoais left
[01:08] *** frost-lab joined
[01:35] <ugexe> https://github.com/Raku/roast/blob/981c8c1ad4b6d7728b710f29ba3d063199f656d8/S02-literals/version.t#L24 -- this is the only thing in the roast which disagrees

[01:38] <ugexe> imo that test is wrong though -- the 'v1' should be written 'v1.*' to match v1.2.3

[01:39] <ugexe> moritz: any opinion? you wrote the test 9 years ago :)

[02:30] <Geth> ¦ rakudo/api-sorting: 43613ac536 | (Nick Logan)++ | 2 files

[02:30] <Geth> ¦ rakudo/api-sorting: Prefer api sorting over version sorting

[02:30] <Geth> ¦ rakudo/api-sorting: 

[02:30] <Geth> ¦ rakudo/api-sorting: When sorting distributions my intention was for the highest api

[02:30] <Geth> ¦ rakudo/api-sorting: to be preferred (with the highest version being used if there was

[02:30] <Geth> ¦ rakudo/api-sorting: a tie in api version). This change aligns raku behavior with those

[02:30] <Geth> ¦ rakudo/api-sorting: intentions instead of preferring version over api.

[02:30] <Geth> ¦ rakudo/api-sorting: review: https://github.com/rakudo/rakudo/commit/43613ac536

[02:31] <Geth> ¦ rakudo: ugexe++ created pull request #4152: Prefer api sorting over version sorting

[02:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4152

[02:33] *** Geth left
[02:33] *** Geth joined
[03:33] *** greppable6 left
[03:33] *** linkable6 left
[03:33] *** committable6 left
[03:33] *** sourceable6 left
[03:33] *** nativecallable6 left
[03:33] *** quotable6 left
[03:33] *** tellable6 left
[03:33] *** evalable6 left
[03:33] *** unicodable6 left
[03:33] *** benchable6 left
[03:33] *** squashable6 left
[03:33] *** shareable6 left
[03:33] *** coverable6 left
[03:33] *** bloatable6 left
[03:33] *** notable6 left
[03:33] *** releasable6 left
[03:33] *** bisectable6 left
[03:33] *** statisfiable6 left
[03:34] *** quotable6 joined
[03:34] *** nativecallable6 joined
[03:34] *** bloatable6 joined
[03:34] *** tellable6 joined
[03:34] *** greppable6 joined
[03:34] *** sourceable6 joined
[03:34] *** squashable6 joined
[03:34] *** releasable6 joined
[03:34] *** bisectable6 joined
[03:35] *** benchable6 joined
[03:35] *** evalable6 joined
[03:35] *** statisfiable6 joined
[03:36] *** notable6 joined
[03:36] *** shareable6 joined
[03:36] *** committable6 joined
[03:36] *** unicodable6 joined
[03:36] *** coverable6 joined
[03:36] *** linkable6 joined
[05:04] *** squashable6 left
[05:05] *** squashable6 joined
[05:05] *** squashable6 left
[05:06] *** squashable6 joined
[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: 6bf47c78f8 | (Nick Logan)++ | 2 files

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: Use less common names for installation shim arguments

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: 

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: A mostly unknown feature of the bin script shims CURI installs is

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: that it allows choosing the distribution to load the script from,

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: which allows loading an e.g. older version of some script. However

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: to do so required using the :$name :$auth :$ver :$api arguments

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: which prevents any installed raku bin script from taking any

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: arguments of those names; the shim scripts breaks things such as

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: providing a `bin/foo --ver` that outputs version information. This

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: changes the argument names to use something far less likely to be

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: used by arbitrary scripts (which is fine for rarely used options).

[05:18] <Geth> ¦ rakudo/dont-squat-common-arg-names: review: https://github.com/rakudo/rakudo/commit/6bf47c78f8

[05:19] <Geth> ¦ rakudo: ugexe++ created pull request #4153: Use less common names for installation shim arguments

[05:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4153

[08:53] *** sena_kun joined
[08:59] <[Tux]> Yesterday:

[08:59] <[Tux]> Rakudo v2020.12-29-g86fd7f67b (v6.d) on MoarVM 2020.12-16-g34f9d8c7a

[08:59] <[Tux]> csv-test-xs-20      0.386 -  0.397

[08:59] <[Tux]> csv-ip5xs           0.840 -  0.843

[08:59] <[Tux]> test-t --race       0.883 -  0.887

[08:59] <[Tux]> test-t              1.880 -  2.006

[08:59] <[Tux]> test                7.749 -  7.830

[08:59] <[Tux]> csv-ip5xs-20        8.244 -  8.593

[08:59] <[Tux]> test-t-20 --race    9.178 - 10.061

[08:59] <[Tux]> csv-parser         25.319 - 25.482

[08:59] <[Tux]> test-t-20          32.240 - 32.804

[09:20] <[Tux]> Rakudo v2020.12-31-gf89863249 (v6.d) on MoarVM 2020.12-17-g532d9187e

[09:20] <[Tux]> csv-test-xs-20      0.379 -  0.394

[09:20] <[Tux]> csv-ip5xs           0.818 -  0.848

[09:20] <[Tux]> test-t --race       0.943 -  0.955

[09:20] <[Tux]> test-t              1.940 -  1.974

[09:20] <[Tux]> test                7.514 -  7.976

[09:20] <[Tux]> csv-ip5xs-20        8.401 -  8.433

[09:20] <[Tux]> test-t-20 --race   10.304 - 10.418

[09:20] <[Tux]> csv-parser         26.394 - 27.120

[09:20] <[Tux]> test-t-20          33.450 - 33.795

[09:58] *** sena_kun left
[10:16] *** sena_kun joined
[11:56] *** Altai-man joined
[11:59] *** sena_kun left
[12:05] *** jmerelo joined
[12:06] <jmerelo> Happy new year everyone!

[12:06] <jmerelo> Is there a way to find out where NQP ops are implemented in the MoarVM version?

[12:07] <jmerelo> Whenever I search in Raku/NQP I keep finding the implementation in JVM and JS, but I don't really know where to look in MoarVM.

[12:07] <jmerelo> I've arrived as far as the 6model directory, but then it's not totally clear where the implementation of, say, nqp::copy lies

[12:19] <nine> jmerelo: look in src/core/interp.c

[12:20] <nine> OP(copy_f)

[12:21] <nine> The names sometimes differ. Look in NQP's src/vm/moar/QAST/QASTOperationsMAST.nqp for the mapping, e.g. QAST::MASTOperations.add_core_moarop_mapping('copy', 'copy_f', 0);

[12:31] <jmerelo> nine: great, thanks!

[12:34] <jmerelo> m: my @þ; say @þ.of.raku

[12:34] <camelia> rakudo-moar f89863249: OUTPUT: «Mu␤»

[12:34] <jmerelo> m: my @þ; say @þ.of.^name

[12:34] <camelia> rakudo-moar f89863249: OUTPUT: «Mu␤»

[12:34] <jmerelo> m: my Str @þ; say @þ.of.raku

[12:34] <camelia> rakudo-moar f89863249: OUTPUT: «Str␤»

[12:36] <jmerelo> m: say (my int @).of.WHAT

[12:36] <camelia> rakudo-moar f89863249: OUTPUT: «(int)␤»

[12:38] <jmerelo> m: say (my int @).of

[12:38] <camelia> rakudo-moar f89863249: OUTPUT: «(int)␤»

[12:53] <jmerelo> nine++ thanks to your tip I've been able to answer this: https://stackoverflow.com/a/65529831/891440

[13:07] *** jmerelo left
[14:07] *** linkable6 left
[14:07] *** evalable6 left
[14:08] *** evalable6 joined
[14:08] *** linkable6 joined
[15:09] *** evalable6 left
[15:09] *** linkable6 left
[15:11] *** evalable6 joined
[15:12] *** linkable6 joined
[15:57] *** sena_kun joined
[15:59] *** Altai-man left
[16:35] *** patrickb joined
[17:52] *** hankache joined
[19:08] *** sena_kun left
[19:30] *** squashable6 left
[19:30] *** hankache left
[19:33] *** squashable6 joined
[19:51] <Geth> ¦ rakudo/faster-slice-access: 7e15259226 | (Elizabeth Mattijsen)++ | src/core.c/Rakudo/Internals/PostcircumfixAdverbs.pm6

[19:51] <Geth> ¦ rakudo/faster-slice-access: Fix comment copy-pasto

[19:51] <Geth> ¦ rakudo/faster-slice-access: 

[19:51] <Geth> ¦ rakudo/faster-slice-access: Spotted by Christian Bartolomäus++

[19:51] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/7e15259226

[20:26] *** b2gills left
[20:38] <gfldex> m: my $c = Channel.new; $c.send: $++; .say for $c.Supply.lines;

[20:38] <camelia> rakudo-moar f89863249: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[20:39] <gfldex> any suggestions how to golf that one further?

[20:39] <gfldex> m: my $c = Channel.new; $c.send: $++.Str; .say for $c.Supply.lines;

[20:39] <camelia> rakudo-moar f89863249: OUTPUT: «(timeout)»

[20:39] *** Voldenet left
[20:45] *** Voldenet joined
[20:45] *** Voldenet left
[20:45] *** Voldenet joined
[20:46] *** b2gills joined
[21:06] *** sena_kun joined
[21:12] <lizmat> gfldex: you mean the one with the error or with the timeout ?

[21:15] <lizmat> gfldex: the one with the timeout misses the closing of the channel

[21:16] <lizmat> m: my $c = Channel.new; $c.send: $++.Str; $c.close; .say for $c.Supply.lines;

[21:16] <camelia> rakudo-moar f89863249: OUTPUT: «0␤»

[21:16] <lizmat> also: what is being sent on the channel is missing newlines...  so all will be collected into one giant line to be produced when the channel closes

[21:30] <Geth> ¦ rakudo/faster-slice-access: 738c8fb31e | (Elizabeth Mattijsen)++ | 3 files

[21:30] <Geth> ¦ rakudo/faster-slice-access: Make @a[@i] = @b about 10x as fast

[21:30] <Geth> ¦ rakudo/faster-slice-access: 

[21:30] <Geth> ¦ rakudo/faster-slice-access: This uses the same ideas as from array slice accesses, but applies

[21:30] <Geth> ¦ rakudo/faster-slice-access: them to slice assignment.  This breaks 2 tests in roast, that assume

[21:30] <Geth> ¦ rakudo/faster-slice-access: that assignment to lazy indexes will actually be lazy.  The tests

[21:30] <Geth> ¦ rakudo/faster-slice-access: are marked as the assignment being lazy as being experimental.

[21:30] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/738c8fb31e

[21:34] <gfldex> lizmat: I meant the one with the leaking P6opaque.

[21:35] <lizmat> you're sending Int's down the line, and "lines" expects Str

[21:35] <lizmat> *Ints

[21:43] <lizmat> this commit also fixes:

[21:43] <lizmat> m: my @a = <a b c d e>; my @i = 1,2,3; dd @a[1,2,(3,4)] = 1,2,3,4; dd @a

[21:43] <camelia> rakudo-moar f89863249: OUTPUT: «(1, 2, (3, Any))␤Array @a = ["a", 1, 2, 3, Any]␤»

[21:44] <lizmat> correct result: 

[21:44] <lizmat> (1, 2, (3, 4))

[21:44] <lizmat> Array @a = ["a", 1, 2, 3, 4]

[21:48] *** hankache joined
[22:13] <gfldex> lizmat: That makes sense but leaves the question, if Supply.lines should produce lines. In the end a line is something with $?NL at the end and an Int can't have that.

[22:15] <lizmat> well, it is really as simple (atm) that the supplier of Suppy.lines should produce strings

[22:15] <lizmat> at least that's the current assumption

[22:16] <lizmat> if we're going to allow anything, we're causing unnecessary overhead for the common case

[22:20] <Geth> ¦ rakudo/faster-slice-access: 16fd4019e9 | (Elizabeth Mattijsen)++ | 3 files

[22:20] <Geth> ¦ rakudo/faster-slice-access: Give @a[@i] := @b the same semantics as @a[@i] = @b

[22:20] <Geth> ¦ rakudo/faster-slice-access: 

[22:20] <Geth> ¦ rakudo/faster-slice-access: With respect to handling sublists such as:

[22:20] <Geth> ¦ rakudo/faster-slice-access: 

[22:20] <Geth> ¦ rakudo/faster-slice-access:   my @a = <a b c d e f g>;

[22:20] <Geth> ¦ rakudo/faster-slice-access:   dd @a[1,2,(3,4)] := 4,5,6,7;  # (4,5,(6,7))

[22:20] <Geth> ¦ rakudo/faster-slice-access:   dd @a;                        # ["a", 4, 5, 6, 7, "f", "g"]

[22:20] <Geth> ¦ rakudo/faster-slice-access: review: https://github.com/rakudo/rakudo/commit/16fd4019e9

[22:22] * lizmat calls it a night

[22:50] *** hankache left
[23:32] <Geth> ¦ nqp: patrickbkr++ created pull request #691: Switch spawnprocasync to use a separate arg for the program name

[23:32] <Geth> ¦ nqp: review: https://github.com/Raku/nqp/pull/691

[23:34] <Geth> ¦ rakudo: patrickbkr++ created pull request #4154: Switch spawnprocasync to use a separate arg for the program name

[23:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4154

[23:41] *** sena_kun left
[23:41] *** patrickb left
