[00:23] <leont> In particular because when would combine really well with destructuring

[01:04] *** frost-lab joined
[01:10] *** HarmtH_ left
[01:10] *** HarmtH joined
[01:34] <gfldex> leont: if `when` would just be a macro that created multi subs, dispatch could be used to do the matching. Like so https://gist.github.com/96fad87c7bcb1c03c5584c37612aae91 

[02:32] <leont> Can anyone give me a pointer to where when is implemented, maybe I can fix my own problem

[02:37] *** kvw_5 joined
[02:39] *** kvw_5_ left
[02:40] <leont> Ah, Perl6/Actions.nqp is the place to be

[03:15] *** epony left
[03:23] <leont> What is the difference between a pblock and a xblock?

[03:55] *** sxmx left
[04:15] *** sxmx joined
[07:54] <MasterDuke> i think an xblock is a block after an expression, but i'm not terribly confident in that guess

[07:58] *** HarmtH left
[08:28] *** HarmtH joined
[08:28] *** epony joined
[08:29] *** HarmtH left
[08:30] *** HarmtH joined
[08:47] *** sena_kun joined
[09:05] <[Tux]> Rakudo v2021.03-9-g5d058ea88 (v6.d) on MoarVM 2021.03-11-g13f926228

[09:05] <[Tux]> csv-test-xs-20      0.368 -  0.372

[09:05] <[Tux]> csv-ip5xs           0.793 -  0.799

[09:05] <[Tux]> test-t --race       0.874 -  0.891

[09:05] <[Tux]> test-t              2.033 -  2.141

[09:05] <[Tux]> test                7.685 -  8.581

[09:05] <[Tux]> csv-ip5xs-20        8.091 -  8.217

[09:05] <[Tux]> test-t-20 --race    9.526 -  9.634

[09:05] <[Tux]> csv-parser         27.336 - 28.664

[09:05] <[Tux]> test-t-20          33.447 - 35.214

[09:11] <nine> It's kinda surprising that with all the awesomeness we have, there's just no way to read from a file handle asynchronously. Even though at a VM level IO is already handled in a separate thread.

[09:26] <nwc10> is that then not exposed by NQP? Or NQP does expose it, but there's no proper abstraction built on top?

[09:42] <lizmat> wouldn't a .Supply method on IO::Handle do that ?

[09:42] <lizmat> which we already have ?

[09:58] <nine> IO::Handle.Supply does blocking reads. Thus:

[09:58] <nine> m: react { whenever $*IN.lines { say "input: $_" }; whenever Promise.in(2) { done } }

[09:58] <camelia> rakudo-moar 726a75e24: OUTPUT: «input: »Wann treffen wir drei wieder zusamm?«␤input:    »Um die siebente Stund‘, am Brückendamm.«␤input:      »Am Mittelpfeiler.«␤input:          »Ich lösche die Flamm.«␤input:  »Ich mit«␤input: ␤input:          »Ich komme v…»

[09:59] <nine> Well if you don't give it input, it will never finish

[09:59] <lizmat> ok, so the problem is really that: that IO::Handle.Supply is doing blocking reads, right ?

[09:59] <nine> Yes. And AFAICT there is no way to do any other reads.

[09:59] <lizmat> not even in libuv ?

[10:00] <lizmat> breakfast&

[10:32] <nwc10> nine: breakfast? :-)

[10:47] <nine> on it :D

[11:09] *** frost-lab left
[12:05] <dogbert17> lizmat++, wordcase optimization wizardry

[12:06] <lizmat> dogbert17++ for the nudge

[12:13] * lizmat really misses Geth  :-)

[12:14] <lizmat> https://github.com/rakudo/rakudo/commit/9cc6502862278f921de757a5ceb4bf224401b40b  Make Str.uniparse about 10% faster

[12:23] <dogbert17> m: my $a = words("abc def ghi") for ^500_000; say now - INIT now

[12:23] <camelia> rakudo-moar 726a75e24: OUTPUT: «1.765245␤»

[12:23] <dogbert17> m: my $a = "abc def ghi".words for ^500_000; say now - INIT now

[12:23] <camelia> rakudo-moar 726a75e24: OUTPUT: «0.04631␤»

[12:23] <dogbert17> lizmat: is the above also some constant folding trickery?

[12:24] <lizmat> no, that looks like unnecessary overhead in the words() case

[12:25] <lizmat> you will probably see the same with lines

[12:25] <dogbert17> aha

[12:25] <lizmat> capture taking and such

[12:26] <lizmat> lemme see if I can make that better with more candidates

[12:26] <dogbert17> ++lizmat

[12:26] <ugexe> libuv just used a thread pool

[12:27] <dogbert17> m: say 1.765245 / 0.04631

[12:27] <camelia> rakudo-moar 726a75e24: OUTPUT: «38.118009␤»

[12:28] <lizmat> looks like words("abc def ghi") actually invokes Cool.words ???

[12:29] <dogbert17> that doesn't sound very c... :)

[12:30] <lizmat> yeah

[12:35] <lizmat> looks like I can make words() and lines() (the sub versions) about 15x as fast

[12:35] <lizmat> for the given example: bigger strings will benefit less from it  :-)

[12:38] *** Kaiepi joined
[13:21] *** Kaiepi left
[13:24] *** b2gills left
[13:27] *** Kaiepi joined
[13:55] *** b2gills joined
[13:56] <lizmat> https://github.com/rakudo/rakudo/commit/b954ef94878bf0fd88f11f681e7bf2ee5679e357   Make lines()/words() (sub version) upto 20x as fast

[14:15] *** Kaiepi left
[14:34] <dogbert17> lizmat++, you're on a roll

[17:19] *** smarton joined
[17:21] *** domidumont joined
[18:39] *** domidumont left
[18:43] <[Tux]> Rakudo v2021.03-12-gb4367a8f9 (v6.d) on MoarVM 2021.03-11-g13f926228

[18:43] <[Tux]> csv-test-xs-20      0.375 -  0.379

[18:43] <[Tux]> csv-ip5xs           0.815 -  0.828

[18:43] <[Tux]> test-t --race       0.890 -  0.940

[18:43] <[Tux]> test-t              1.978 -  2.045

[18:43] <[Tux]> test                6.912 -  7.921

[18:43] <[Tux]> csv-ip5xs-20        8.230 -  8.682

[18:43] <[Tux]> test-t-20 --race    9.587 - 10.011

[18:43] <[Tux]> csv-parser         27.582 - 27.954

[18:43] <[Tux]> test-t-20          34.412 - 34.950

[18:43] <[Tux]> still high, but I might have hit a busy moment earlier today

[18:54] <lizmat> https://github.com/rakudo/rakudo/commit/23b0bed8d805e7b4e9b847ce5a6e27d5ed099d17   Make open("file") (sub version) upto 20% faster

[18:56] <nwc10> Where does this end? Carefully doing the same thing to every sub, each 20% and Rakduo globally 20% faster. Somehow I doubt this :-(

[18:56] <nwc10> lizmat++ # finding lots of small things to make much better

[18:56] <nwc10> please don't stop

[18:57] <lizmat> well, all of this is really to get around this not working

[18:57] <lizmat> m: multi a() { dd }; multi a(*%_) { dd }; a

[18:57] <camelia> rakudo-moar 726a75e24: OUTPUT: «Ambiguous call to 'a(...)'; these signatures all match:␤  ()␤  (*%_)␤  in block <unit> at <tmp> line 1␤␤»

[18:57] <lizmat> this prevents one from creating multis for non-named argument cases

[18:58] <lizmat> in general

[18:58] <lizmat> if you have one known named arg, you can create a candidate with that named argument as mandatory

[18:59] <lizmat> but if you have multiple named arguments, it quickly becomes untenable to keep track of all of the possible combinations

[18:59] <nwc10> OK - I think I get this - if those two were not faulted as "Ambiguous" then the dispatcher could make the choice, and that would be faster than having to write lots of ternary code

[18:59] <lizmat> just to be able to have a candidate with no named args

[18:59] <nwc10> ternary code manually in a signle sub

[18:59] <lizmat> right

[19:00] <lizmat> and ths gets worse with methods, as they always have an implicit *%_

[19:00] <nwc10> and your example "should" work because the two aren't ambigous - the multi candidate that takes zero arguments clearly binds more tightly

[19:01] <lizmat> I have worked on making that optional, and got it working, only to find out that it was useless without being able to dfispatch on it

[19:01] <nwc10> binds more tightly for a call with zero arguments

[19:01] <lizmat> you'd say that, but jnthn would disgagree

[19:01] <lizmat> *disagree

[19:01] <lizmat> as dispatch only happens on positionals

[19:01] <nwc10> OK.

[19:02] <lizmat> and when they'r ambiguous, dispatch on first named arge match

[19:03] <lizmat> hmmm... 

[19:03] <lizmat> m: multi a() { dd }; multi a(:$foo) { dd }; a

[19:03] <camelia> rakudo-moar 726a75e24: OUTPUT: «sub a(:$foo)␤»

[19:05] *** b2gills left
[19:06] <lizmat> fwiw, I don't understand why that would dispatch to the :$foo candidate

[19:06] <lizmat> and I feel that jnthn has explained it to me several times already, and somehow it doesn't stick  :-(

[19:19] <lizmat> hmmm more inconsistencies:

[19:19] <lizmat> m: class A { method words() { dd } }; words A

[19:19] <camelia> rakudo-moar 726a75e24: OUTPUT: «method words(A: *%_)␤»

[19:19] <lizmat> m: class A { method flip() { dd } }; flip A

[19:19] <camelia> rakudo-moar 726a75e24: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling flip(A) will never work with any of these multi signatures:␤    (Cool $s --> Str:D)␤at <tmp>:1␤------> 3class A { method flip() { dd } }; 7⏏5flip A␤»

[20:09] *** epony left
[20:29] *** sena_kun left
[21:03] *** smarton left
[21:10] *** smarton joined
[21:10] *** smarton left
[21:10] *** smarton joined
[21:16] *** smarton left
[21:35] *** epony joined
[22:38] *** brown121407 joined
[22:59] <MasterDuke> m: dd Duration.new(Inf).tai.does(Rational)

[22:59] <camelia> rakudo-moar 726a75e24: OUTPUT: «Bool::True␤»

[22:59] <MasterDuke> locally, after i've converted `$.tai` in Duration and Instant to be an Int, ^^^ dies with `Attempt to divide by zero when coercing Rational to Int`

[23:01] <MasterDuke> in `method tai(Duration:D: --> Rat:D) { $!tai / 1000000000 }`, which i added

[23:05] <MasterDuke> i can't think of a way to get the previous behavior

[23:10] <japhb> MasterDuke: type the $!tai as Real (instead of Int or Rational or Num)?

[23:12] <MasterDuke> hm...let's see...

[23:22] <MasterDuke> japhb++ that seems to work. now on to the other test failures...

[23:24] <MasterDuke> tomorrow though, time to sleep now

[23:24] <japhb> Good sleep, MasterDuke 

