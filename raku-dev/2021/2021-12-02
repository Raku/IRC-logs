[00:02] *** reportable6 left
[00:04] <gfldex> lizmat: I believe to know now why rotor was dropped as a sub. To support `<1 2 3 4> ==> rotor(2 => 1)` we would need Rakudo to support :(*@ [@list, \tail-element]). I got something that ain't pretty but works. PR will follow after some sleep.

[00:05] *** reportable6 joined
[01:06] *** lizmat left
[01:06] *** lizmat joined
[01:34] *** frost joined
[04:51] *** linkable6 left
[04:51] *** evalable6 left
[04:52] *** evalable6 joined
[05:22] *** frost left
[05:53] *** linkable6 joined
[06:02] *** linkable6 left
[06:02] *** reportable6 left
[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 4 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:05] *** reportable6 joined
[08:23] *** frost joined
[09:02] *** linkable6 joined
[09:16] <lizmat> gfldex: yeah, it was something like that  :-)

[09:20] <lizmat> bisectable6: dd (1..30).pick(*).grep(*>*>*)

[09:20] <bisectable6> lizmat, Will bisect the whole range automagically because no endpoints were provided, hang tight

[09:21] <bisectable6> lizmat, Output on all releases: https://gist.github.com/d8f70009bfff918d4187e522bc8f774d

[09:21] <bisectable6> lizmat, More than 4 changes to bisect, please try a narrower range like old=2021.06 new=HEAD

[09:21] <lizmat> bisectable6: old=2020.10 new=HEAD dd (1..30).pick(*).grep(*>*>*)

[09:21] <bisectable6> lizmat, Bisecting by exit code (old=2020.10 new=8ef34ad). Old exit code: 0

[09:21] <bisectable6> lizmat, bisect log: https://gist.github.com/eb76dd7e1018186e7a0542bebd9be05e

[09:21] <bisectable6> lizmat, (2021-07-10) https://github.com/rakudo/rakudo/commit/bb09bbb8581364f7323ff1f17ab4d84dffbe798c

[09:22] <Geth> ¦ rakudo: lizmat self-assigned Grep fails with more than 2 args [Regression] https://github.com/rakudo/rakudo/issues/4660

[10:12] *** discord-raku-bot left
[10:13] *** discord-raku-bot joined
[11:15] <Geth> ¦ rakudo: 4e23452c01 | (Elizabeth Mattijsen)++ | 2 files

[11:15] <Geth> ¦ rakudo: Make Inline::Perl5 installation suggestion complete

[11:15] <Geth> ¦ rakudo: 

[11:15] <Geth> ¦ rakudo: Nowadays, one apparently *must* also specify "--exclude='perl'"

[11:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4e23452c01

[11:58] <Geth> ¦ rakudo: 57801d5952 | (Elizabeth Mattijsen)++ | src/core.c/Any-iterable-methods.pm6

[11:58] <Geth> ¦ rakudo: Fix stupid copy-pasto, fixes #4660

[11:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/57801d5952

[11:59] *** linkable6 left
[12:02] <Geth> ¦ roast: 9faea9409e | (Elizabeth Mattijsen)++ | S32-list/grep.t

[12:02] <Geth> ¦ roast: Add test for #4660

[12:02] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/9faea9409e

[12:02] *** reportable6 left
[12:08] <MasterDuke> lizmat: btw, https://github.com/Raku/roast/blob/master/S02-types/multi_dimensional_array.t#L33-L46 isn't quit accurate anymore. multi-dim arrays are now implemented (by you, iirc), but jagged array shapes are still NYI

[12:18] <lizmat> MasterDuke: but only for 6.e.PREVIEW

[12:18] <lizmat> hmmm... or not

[12:19] <MasterDuke> m: my @a[2;2;2] = @a[1;1;1] = 42; dd @a

[12:19] <camelia> rakudo-moar 81848849c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable @a in declaration to initialize itself␤at <tmp>:1␤------> 3my @a[2;2;2] = @7⏏5a[1;1;1] = 42; dd @a␤    expecting any of:␤        term␤»

[12:19] <MasterDuke> m: my @a[2;2;2]; @a[1;1;1] = 42; dd @a

[12:19] <camelia> rakudo-moar 81848849c: OUTPUT: «Array element = Array.new(:shape(2, 2, 2), [[Any, Any], [Any, Any]], [[Any, Any], [Any, 42]])␤»

[12:20] <Geth> ¦ roast: b49755d75b | (Elizabeth Mattijsen)++ | S02-types/multi_dimensional_array.t

[12:20] <Geth> ¦ roast: Make skip message more correct

[12:20] <Geth> ¦ roast: review: https://github.com/Raku/roast/commit/b49755d75b

[12:22] <ugexe> Why is *must* emphasized? that isnt correct

[12:22] <ugexe> Nowadays, one apparently *must* also specify "--exclude='perl'"

[12:22] <lizmat> because without it, it won't install ?

[12:22] <lizmat> Inline::Perl5 that is?

[12:22] <ugexe> Certainly it installs for some people... it wasn't added just to annoy people

[12:23] <lizmat> the line is intended to be copy-pasted, and the line as such didn't install Inline::Perl5, but complained about missing dependencies

[12:24] <lizmat> so therefore, one *must* also specify --exclude='perl' ?

[12:24] <lizmat> to be able to install?

[12:24] <lizmat> or am I missing something?

[12:25] <ugexe> it sounds like what you are saying is you expect yourit to behave that way for everybody

[12:26] <ugexe> but thats not true. suggesting to use --exclude=perl is fine, i just dont want you to think its a requirement instead of just whatever finds the perl binary in zef not being sufficient for some people

[12:27] <ugexe> ( which fwiw is the code here -- https://github.com/ugexe/zef/blob/7d6b48db23eaca06c332fa6d0ca8ecae80ae83d4/lib/Zef/Utils/FileSystem.rakumod#L170-L181 )

[12:28] <lizmat> m: run <perl -v>

[12:28] <camelia> rakudo-moar 81848849c: OUTPUT: «␤This is perl 5, version 26, subversion 1 (v5.26.1) built for x86_64-linux-thread-multi␤␤Copyright 1987-2017, Larry Wall␤␤Perl may be copied only under the terms of either the Artistic License or the␤GNU General Public License, which may b…»

[12:28] <MasterDuke> i believe it was needed for me also and i have a rather different setup from lizmat (archlinux, moarvm/nqp/rakudo checked out into three separate repos all build with a common --prefix)

[12:28] <ugexe> i.e. a dependency on perl:from<bin> just uses that `which` function to see if it finds a 'perl'

[12:28] <lizmat> I have a standard user layout:   perl Configure.pl --gen-moar --make-install

[12:28] <lizmat> is what I do to build Rakudo

[12:29] <lizmat> can't get much more vanilla than that, no?

[12:29] <ugexe> i dunno, i linked to a 10 line function which is pretty vanila too

[12:30] <lizmat> m: run <which perl >

[12:30] <camelia> rakudo-moar 78ce830c3: OUTPUT: «/usr/bin/perl␤»

[12:31] <lizmat> I understand that won't work on Win, but still, for all other cases it would ?

[12:31] <ugexe> shelling out to parse dependencies is a ba idea

[12:32] <ugexe> technically it doesnt apply until the resolution stage but still

[12:33] <lizmat> running that sub on my machine, I get: ["/usr/local/bin/perl".IO "/usr/bin/perl".IO]

[12:33] <lizmat> could that be the issue?  that it gets more than one ?

[12:34] <lizmat> they're different versions: the local one is built by me some time ago (5.28) and the other is the system one (5.18)

[12:34] <MasterDuke> i get just one entry

[12:36] <MasterDuke> btw, 'which' is a source of debate, whether one should use 'type' or 'command -v' instead

[12:36] <ugexe> hmmm that seems like it should work then... the caller is just https://github.com/ugexe/zef/blob/7d6b48db23eaca06c332fa6d0ca8ecae80ae83d4/lib/Zef/Client.rakumod#L1072

[12:37] <MasterDuke> https://lwn.net/Articles/874049/

[12:37] <lizmat> ugexe: say so Zef::Utils::FileSystem::which('perl')    # True

[12:51] <ugexe> yeah i still dont see why its not working in some cases -- https://github.com/ugexe/zef/blob/7d6b48db23eaca06c332fa6d0ca8ecae80ae83d4/lib/Zef/Client.rakumod#L401

[12:51] <ugexe> that applies the 'is-installed' filter just a few lines down from the 'exclude' filter (which obviously works)

[12:54] <lizmat> BTW, the \ at the end of the line, has not been needed for a long time?

[12:57] <ugexe> that code is probably older than a long time

[12:59] <lizmat> yeah  :)

[13:00] *** linkable6 joined
[13:04] *** reportable6 joined
[14:49] <Geth> ¦ rakudo: gfldex++ created pull request #4661: implement sub rotor

[14:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4661

[15:34] <ugexe> ah, it looks like perl:from<bin> was recently removed from Inline::Perl5 which is probably what your error was referencing

[15:36] <ugexe> I get `===> Failed to find dependencies: perl:from<native>` but i don't have libperl installed

[15:36] <MasterDuke> s/bin/native/ 

[15:36] <ugexe> oops

[15:36] <MasterDuke> but yeah, guess that was the root cause

[15:57] <[Tux]> Rakudo v2021.10-131-g57801d595 (v6.d) on MoarVM 2021.10-117-g7d58542da

[15:57] <[Tux]> csv-test-xs-20      0.411 -  0.451

[15:57] <[Tux]> csv-ip5xs           0.879 -  0.912

[15:57] <[Tux]> test-t --race       0.959 -  0.963

[15:57] <[Tux]> test-t              1.671 -  1.889

[15:57] <[Tux]> csv-parser          4.336 -  4.391

[15:57] <[Tux]> csv-ip5xs-20        5.380 -  5.604

[15:57] <[Tux]> test-t-20 --race    7.662 -  8.278

[15:57] <[Tux]> test                7.265 -  8.322

[15:57] <[Tux]> test-t-20          24.621 - 25.801

[16:18] <Geth> ¦ rakudo/cpucores-once: 6c3530340b | (Elizabeth Mattijsen)++ | 2 files

[16:18] <Geth> ¦ rakudo/cpucores-once: Revert behaviour of Kernel.cpu-cores

[16:18] <Geth> ¦ rakudo/cpucores-once: 

[16:18] <Geth> ¦ rakudo/cpucores-once: It will now always call nqp::cpucores for those cases where the

[16:18] <Geth> ¦ rakudo/cpucores-once: number of CPU's can actually change.

[16:18] <Geth> ¦ rakudo/cpucores-once: 

[16:18] <Geth> ¦ rakudo/cpucores-once: The internal method Kernel.cpu-cores-but-one is now lazy, and will

[16:18] <Geth> ¦ rakudo/cpucores-once: only call nqp::cpucores once in the lifetime of a process.

[16:18] <Geth> ¦ rakudo/cpucores-once: review: https://github.com/rakudo/rakudo/commit/6c3530340b

[16:25] *** qorg11 left
[16:32] <MasterDuke> m: my @uniques; my %h; for "foo".comb -> $c { %h{$c}++ }; @uniques = %h.keys; say @uniques

[16:32] <camelia> rakudo-moar 78ce830c3: OUTPUT: «[f o]␤»

[16:32] <MasterDuke> m: my @uniques; for "foo".comb -> $c { state %h; %h{$c}++; LAST @uniques = %h.keys }; say @uniques

[16:32] <camelia> rakudo-moar 78ce830c3: OUTPUT: «[f o]␤»

[16:33] *** qorg11 joined
[16:34] <MasterDuke> ^^^ i like the second version because it keeps the `%h` inside the scope of the `for`, but both `state` and `LAST` are going to have negative performance implications

[16:35] <MasterDuke> anybody have any other criticisms of the state+LAST version?

[16:35] <lizmat> m: dd "foo".comb.Set

[16:35] <camelia> rakudo-moar 78ce830c3: OUTPUT: «Set.new("o","f")␤»

[16:35] <japhb> m: say "foo".comb.unique

[16:35] <camelia> rakudo-moar 78ce830c3: OUTPUT: «(f o)␤»

[16:36] <MasterDuke> ok, ignore the actual logic in the example, the real case is a bit more involved

[16:36] <japhb> I had a feeling, but I couldn't resist when you asked if we had criticisms.  ;-)

[16:36] <japhb> But in all seriousness, I'm not sure I can give proper feedback without knowing a bit more about the actual use case.

[16:36] <MasterDuke> heh

[16:37] <MasterDuke> exactly this https://github.com/rakudo/rakudo/pull/4650/commits/27082897b2c22d3b19324c5574d181c983a46377#diff-483a7b36947a1718179e16a16e15442eef7b9ea3638223a78156e97566c39ca7L233-L251 is what inspired the musing

[16:39] <japhb> Just for code as written: Is the state version concurrency-safe?  Meaning, if the whole loop was in a routine, and you called that routine concurrently, would it still work correctly?

[16:39] <lizmat> state is not concurrency safe afaik

[16:58] <gfldex> lizmat: the only case it can't cover is `rotor(2 => -1, 3 => 2, 1, 2, 3, 4)` because the to be rotated list might contain Pairs. It needs the list as an item as the last positional.

[16:59] <lizmat> well, and that's the reason I think in the end I didn't do a sub rotor  

[17:04] <MasterDuke> https://tux.nl/Talks/CSV6/speed4.html anyone else notice how the timing went back up a bit right around nov 15?

[17:10] <lizmat> I noticed an upward trend  :)

[17:10] <gfldex> m: (^10).hyper(:1batch).map({ ++$ }).say;

[17:10] <camelia> rakudo-moar 78ce830c3: OUTPUT: «(1 1 1 1 1 1 1 1 1 1)␤»

[17:11] <gfldex> japhb: state vars exist once per call stack. So it depends on what you do with them.

[17:19] <MasterDuke> https://github.com/rakudo/rakudo/commit/95164a7689c7911cb946fae9988cb8e46ce694cf perhaps is the reason for the slowdown?

[17:22] <MasterDuke> huh, that just pull in https://github.com/MoarVM/MoarVM/pull/1601 which is a pretty small change...

[17:27] <MasterDuke> afk for a bit, but anybody have comments/suggestions for https://github.com/rakudo/rakudo/pull/4650 and https://github.com/rakudo/rakudo/pull/4651 ?

[18:02] *** reportable6 left
[18:03] *** reportable6 joined
[20:06] <Geth> ¦ DBIish/rbt.markdown: 0a5c6fa964 | (Rod Taylor)++ | 2 files

[20:06] <Geth> ¦ DBIish/rbt.markdown: Replace Pod with Markdown version

[20:06] <Geth> ¦ DBIish/rbt.markdown: 

[20:06] <Geth> ¦ DBIish/rbt.markdown: Closes #39

[20:06] <Geth> ¦ DBIish/rbt.markdown: review: https://github.com/raku-community-modules/DBIish/commit/0a5c6fa964

[20:12] <Geth> ¦ DBIish/rbt.markdown: 3c5e7ec05f | (Rod Taylor)++ | 2 files

[20:12] <Geth> ¦ DBIish/rbt.markdown: Replace Pod with Markdown version

[20:12] <Geth> ¦ DBIish/rbt.markdown: 

[20:12] <Geth> ¦ DBIish/rbt.markdown: Closes #39

[20:12] <Geth> ¦ DBIish/rbt.markdown: review: https://github.com/raku-community-modules/DBIish/commit/3c5e7ec05f

[20:12] <Geth> ¦ DBIish: 3c5e7ec05f | (Rod Taylor)++ | 2 files

[20:12] <Geth> ¦ DBIish: Replace Pod with Markdown version

[20:12] <Geth> ¦ DBIish: 

[20:12] <Geth> ¦ DBIish: Closes #39

[20:12] <Geth> ¦ DBIish: review: https://github.com/raku-community-modules/DBIish/commit/3c5e7ec05f

[20:30] <[Tux]> MasterDuke, 16 Nov I updated my OS from openSUSE 15.2 to openSUSE 15.3. Could that be a cause?

[20:32] <lizmat> interesting...

[20:43] <Geth> ¦ DBIish/rbt.tidy: 3b633577a3 | (Rod Taylor)++ | META6.json

[20:43] <Geth> ¦ DBIish/rbt.tidy: Show up in a DBDish search on modules.raku.org

[20:43] <Geth> ¦ DBIish/rbt.tidy: review: https://github.com/raku-community-modules/DBIish/commit/3b633577a3

[21:01] <japhb> [Tux]: Did openSUSE 15.3 enable any new security features or default compiler options?  I can easily imagine that level of performance difference from some C-level compiler change or kernel option or whatnot.

[22:28] *** evalable6 left
[22:28] *** linkable6 left
[22:54] <[Coke]> got jdv's CLA

[22:55] <[Coke]> Looks like someone has gone to some effort to setup groups on rakudo, so I'll let someone else add him to the right spot.

[23:29] *** evalable6 joined
[23:31] *** linkable6 joined
