[01:11] *** kvw_5_ joined
[01:14] *** kvw_5 left
[02:14] *** evalable6 left
[02:14] *** linkable6 left
[02:14] *** squashable6 left
[02:15] *** squashable6 joined
[02:15] *** bloatable6 joined
[02:15] *** committable6 joined
[02:15] *** statisfiable6 joined
[02:16] *** releasable6 joined
[02:16] *** sourceable6 joined
[02:16] *** nativecallable6 joined
[02:16] *** benchable6 joined
[02:16] *** tellable6 joined
[02:16] *** quotable6 joined
[02:16] *** coverable6 joined
[02:16] *** evalable6 joined
[02:16] *** shareable6 joined
[02:17] *** greppable6 joined
[02:17] *** bisectable6 joined
[02:17] *** linkable6 joined
[02:17] *** unicodable6 joined
[02:17] *** notable6 joined
[03:17] *** linkable6 left
[03:17] *** committable6 left
[03:17] *** evalable6 left
[03:17] *** sourceable6 left
[03:17] *** tellable6 left
[03:17] *** benchable6 left
[03:17] *** releasable6 left
[03:17] *** quotable6 left
[03:18] *** evalable6 joined
[03:19] *** sourceable6 joined
[03:19] *** releasable6 joined
[03:19] *** benchable6 joined
[03:20] *** tellable6 joined
[03:20] *** quotable6 joined
[03:20] *** linkable6 joined
[03:20] *** committable6 joined
[05:41] *** softmoth left
[05:53] *** japhb left
[05:55] *** japhb joined
[08:57] *** domidumont joined
[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: dc78520ce3 | (Stefan Seifert)++ | src/core.c/CompUnit/Loader.pm6

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: Fix compilation failure with EVAL in precompiled module's mainline

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: 

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: The error was reported as "Cannot look up attributes in a NQPMu type object"

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: with a require in a module's mainline. The error message gets reported because

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: QASTCompilerMAST cannot find the frame for a given CUID. The error only

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: appeared when the require loaded an already installed and precompiled module

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: and only if the repository chain got changed since (by way of 'use lib' or -I).

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: <…commit message has 20 more lines…>

[09:54] <Geth> ¦ rakudo/fix_eval_in_module_mainline: review: https://github.com/rakudo/rakudo/commit/dc78520ce3

[09:54] <Geth> ¦ rakudo: niner++ created pull request #4331: Fix compilation failure with EVAL in precompiled module's mainline

[09:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/4331

[09:55] <nine> I dare say that this commit is of interest to every fan of code archeology :)

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: 08cb2b77f3 | (Stefan Seifert)++ | src/core.c/CompUnit/Loader.pm6

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: Fix compilation failure with EVAL in precompiled module's mainline

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: 

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: The error was reported as "Cannot look up attributes in a NQPMu type object"

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: with a require in a module's mainline. The error message gets reported because

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: QASTCompilerMAST cannot find the frame for a given CUID. The error only

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: appeared when the require loaded an already installed and precompiled module

[09:55] <Geth> ¦ rakudo/fix_eval_in_module_mainline: and only if the repository chain got changed since (by way of 'use lib' or -I).

[09:56] <Geth> ¦ rakudo/fix_eval_in_module_mainline: <…commit message has 20 more lines…>

[09:56] <Geth> ¦ rakudo/fix_eval_in_module_mainline: review: https://github.com/rakudo/rakudo/commit/08cb2b77f3

[09:56] <nine> forgot to remove a comment that no longer applied

[09:57] <nine> .tell jnthn https://github.com/rakudo/rakudo/pull/4331 will probably amuse you :)

[09:57] <tellable6> nine, I'll pass your message to jnthn

[10:31] *** dogbert17 joined
[10:56] <[Tux]> Rakudo v2021.03-178-g10c3dbb94 (v6.d) on MoarVM 2021.03-50-g948128995

[10:56] <[Tux]> csv-test-xs-20      0.372 -  0.377

[10:56] <[Tux]> csv-ip5xs           0.835 -  0.844

[10:56] <[Tux]> test-t --race       0.896 -  0.903

[10:56] <[Tux]> test-t              1.965 -  2.157

[10:56] <[Tux]> test                7.183 -  8.088

[10:56] <[Tux]> csv-ip5xs-20        7.887 -  7.968

[10:56] <[Tux]> test-t-20 --race    9.843 -  9.882

[10:56] <[Tux]> csv-parser         25.191 - 26.830

[10:56] <[Tux]> test-t-20          33.626 - 33.972

[10:56] <lizmat> much better

[11:47] *** b2gills left
[12:58] *** frost-lab joined
[13:13] <sena_kun> I think there is more into the TauStation module issue. Looking at it.

[13:14] <sena_kun> s: help

[13:14] <sourceable6> sena_kun, Like this: sourceable6: 42.base(16) # See wiki for more examples: https://github.com/Raku/whateverable/wiki/Sourceable

[13:15] <sena_kun> sourceable6: my $t = DateTime.now; $t eqv $t;

[13:15] <sourceable6> sena_kun, No idea, boss. Can you give me a Code object?

[13:15] <sena_kun> sourceable6: DateTime.now eqv DateTime.now;

[13:15] <sourceable6> sena_kun, https://github.com/rakudo/rakudo/blob/10c3dbb/src/core.c/Iterable.pm6#L106

[13:17] *** b2gills joined
[13:18] <sena_kun> s: infix:<eqv>(DateTime.new, DateTime.new)

[13:18] <sourceable6> sena_kun, https://github.com/rakudo/rakudo/blob/10c3dbb/src/core.c/Mu.pm6#L1204

[13:19] <sena_kun> Ok, so dates are compared using .raku produced notation

[13:20] <sena_kun> a-ha

[13:26] <nine> Little bit of progress on the "Type check failed in binding to parameter '$bytes'; expected Blob but got Supplier::Preserving (Supplier::Preserving...)" issue. It's 100 % reproducible with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 and hash randomization turned off.

[13:29] <sena_kun> nine, do you by chance have any time for the spesh issue discussed above?

[13:31] <lizmat> afk for a few hours&

[13:34] <sena_kun> hmm, I can reproduce the issue without the module at all. Or maybe not "the issue", but the change.

[13:34] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant.say;

[13:34] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant:1203415364.632075471␤True␤»

[13:34] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant;

[13:34] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant:752602331.129292929␤»

[13:34] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant;

[13:34] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant:584237193.667040358␤»

[13:34] <sena_kun> m: my $t := 1524424977.922727.Rat; note DateTime.new($t).Instant;

[13:34] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant:1524425014.922727␤»

[13:37] <sena_kun> hmm, I cannot. :S

[13:38] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant.raku;

[13:38] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant.from-posix(446853647.758823529)␤»

[13:38] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant.raku;

[13:38] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant.from-posix(1117060557.961926091)␤»

[13:38] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant.raku;

[13:38] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant.from-posix(766012355.104856512)␤»

[13:38] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant.raku;

[13:38] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant.from-posix(422051697.246220302)␤»

[13:38] <sena_kun> m: my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant.raku;

[13:38] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «Instant.from-posix(131103957.190097259)␤»

[13:40] <sena_kun> ah, of course it is not changing on this release

[13:42] <sena_kun> So when you do `my $t := 1524424977.922727.rand.Rat; note DateTime.new($t).Instant;` (notice no .raku calls here) in the old release it will have less precision (always 6 digits for me) and for the new release more precision (9 digits). This more precision in turns change the result of .raku and we use .raku for eqv and eqv is used in is-deeply in the test.

[13:47] <sena_kun> s: DateTime.new(12341234.Rat)

[13:47] <sourceable6> sena_kun, https://github.com/rakudo/rakudo/blob/10c3dbb/src/core.c/DateTime.pm6#L259

[13:56] <sena_kun> s: DateTime.new(now)

[13:56] <sourceable6> sena_kun, https://github.com/rakudo/rakudo/blob/10c3dbb/src/core.c/DateTime.pm6#L250

[13:57] <sena_kun> something fishy happens at this point, apparently

[13:57] <sena_kun> ok, time is gone, still 2 blockers for the release.

[14:08] <nine> sena_kun: what's the spesh issue?

[14:10] *** frost-lab left
[14:10] <dogbert17> nine: just guessing but I believe it's the one mentioned in #moarvm

[14:11] <dogbert17> there's a gist hiding there that might come in handy

[14:12] <dogbert17> plus some nonsense theories from me :)

[14:13] <nine> There's been quite some discussion, but apparently no introduction to the uninitiated or simple steps to reproduce

[14:22] <MasterDuke> nine: in raku-uni, `MVM_SPESH_NODELAY=1 raku -I . t/basic.t`

[14:23] <nine> oh, raku-uni is a branch?

[14:23] <MasterDuke> no, [Coke]'s App::Uni

[14:23] <MasterDuke> https://github.com/coke/raku-uni

[14:24] <MasterDuke> reverting https://github.com/MoarVM/MoarVM/commit/08525be54bab1e7e9130568eda06d7c8295ac5cb didn't fix it...

[14:32] <nine> can't reproduce

[14:35] <MasterDuke> i can repro at https://github.com/MoarVM/MoarVM/commit/b77d328328ce3a29bb88f95e7f7e59593d1f0c7c with MVM_SPESH_NODELAY=1, so it wasn't introduced by https://github.com/MoarVM/MoarVM/commit/ba124ad12875f3f4f85bc2433e92b7a5f0aaa47c

[14:36] <MasterDuke> if you missed it, the failure is `Type check failed in binding to parameter '<anon>'; expected Cool but got Method (proto method fc (Coo...)

[14:36] <MasterDuke>   in sub uni-search at /home/dan/Source/perl6/modules/raku-uni/lib/App/Uni.rakumod (App::Uni) line 36` ... `not ok 6 - -w cat eyes`

[14:50] <MasterDuke> i suspect that some of the recent str/uni related commits in rakudo, combined with the decont logging commit, have uncovered a moarvm bug that previously was only visible with MVM_SPESH_NODELAY

[15:45] <dogbert17> nine: did you try https://gist.github.com/dogbert17/cf91cd2b2f324164b4895b60857958d9

[15:48] <nine> dogbert17: looks good as well

[15:52] <nine> Huh! Turns out, me being on the propagate_spesh_facts_after_guard_elimination is what makes the difference! On master it fails. On that branch everything is fine

[15:53] <lizmat> hmmm...

[15:55] <dogbert17> perhaps you've solved the problem without knowing it :)

[15:57] <nine> That would be too easy

[15:58] <nine> Considering the nature of my changes it's more probable that further optimization avoided the wrongly optimized code

[16:18] *** softmoth joined
[16:47] <gfldex> m: role R[::T] {}; class A { method m(R[Int]() $_) {} }; class B { method R[Int]() {} }; A.new.m(B.new);

[16:47] <camelia> rakudo-moar 10c3dbb94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 m(R[Int]() $_) {} }; class B { method R7⏏5[Int]() {} }; A.new.m(B.new);␤»

[16:48] <gfldex> So I can ask for a coercer in signature that can't be provided by a coersion method. Is there any way around this?

[17:07] <gfldex> Found it. MOP for the rescue!

[17:07] * lizmat senses an upcoming blog post

[17:07] * gfldex flexes his blogging muscle

[17:07] <gfldex> :D

[17:15] *** lucasb joined
[17:30] *** patrickb joined
[17:36] *** patrickb left
[17:39] *** domidumont left
[19:15] <Geth> ¦ problem-solving: ddfdfb04f7 | Altai-man++ | solutions/documentation/search-categories.md

[19:15] <Geth> ¦ problem-solving: Provide a solution document for https://github.com/Raku/problem-solving/issues/250

[19:16] <Geth> ¦ problem-solving: 

[19:16] <Geth> ¦ problem-solving: "Documentation search categories are not standartized"

[19:16] <Geth> ¦ problem-solving: 

[19:16] <Geth> ¦ problem-solving: Fixes https://github.com/Raku/problem-solving/issues/250

[19:16] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/ddfdfb04f7

[19:16] <Geth> ¦ problem-solving: ecf3097a0b | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | solutions/documentation/search-categories.md

[19:16] <Geth> ¦ problem-solving: Merge pull request #271 from Raku/solution-250

[19:16] <Geth> ¦ problem-solving: 

[19:16] <Geth> ¦ problem-solving: Standardize documentation search categories (solution for #250)

[19:16] <Geth> ¦ problem-solving: review: https://github.com/Raku/problem-solving/commit/ecf3097a0b

[19:21] <sena_kun> rba, ping.

[19:22] <sena_kun> .tell rba my infra droplet was turned down for almost two weeks for now and so far nobody complained that something does not work, so I am permanently removing it.

[19:22] <tellable6> sena_kun, I'll pass your message to rba

[19:24] <rba> sena_kun: fine for me. Sorry again for the bad communication before. 

[19:25] <sena_kun> destroyed

[20:39] *** lizmat left
[20:39] *** lizmat joined
[23:40] *** japhb left
[23:52] *** japhb joined
[23:53] *** japhb_ joined
[23:55] *** japhb_ left
[23:55] *** japhb left
[23:55] *** japhb joined
