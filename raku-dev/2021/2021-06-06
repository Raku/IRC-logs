[00:03] *** reportable6 left
[00:05] *** reportable6 joined
[00:30] <[Coke]> MasterDuke++ nine++

[02:20] *** rouking left
[04:35] *** samcv_ joined
[04:37] *** quotable6 left
[04:37] *** linkable6 left
[04:37] *** notable6 left
[04:37] *** committable6 left
[04:37] *** shareable6 left
[04:37] *** benchable6 left
[04:37] *** releasable6 left
[04:37] *** reportable6 left
[04:37] *** unicodable6 left
[04:37] *** jjatria left
[04:37] *** bartolin left
[04:37] *** samcv left
[04:37] *** squashable6 left
[04:37] *** sivoais left
[04:37] *** MasterDuke left
[04:37] *** squashable6 joined
[04:38] *** sivoais joined
[04:38] *** bartolin joined
[04:39] *** jjatria joined
[04:39] *** benchable6 joined
[04:40] *** reportable6 joined
[04:40] *** quotable6 joined
[04:41] *** shareable6 joined
[04:41] *** releasable6 joined
[04:41] *** notable6 joined
[04:42] *** committable6 joined
[04:42] *** linkable6 joined
[04:42] *** unicodable6 joined
[05:22] *** squashable6 left
[05:23] *** frost joined
[05:25] *** squashable6 joined
[06:02] *** reportable6 left
[06:05] *** reportable6 joined
[06:36] *** Kaiepi left
[06:36] *** japhb left
[06:36] *** LizBot left
[06:36] *** moon-child left
[06:36] *** SmokeMachine left
[06:36] *** cognominal left
[06:36] *** leont left
[06:36] *** JRaspass left
[06:37] *** Kaiepi joined
[06:37] *** japhb joined
[06:37] *** LizBot joined
[06:37] *** moon-child joined
[06:37] *** SmokeMachine joined
[06:37] *** cognominal joined
[06:37] *** leont joined
[06:37] *** JRaspass joined
[07:28] <japhb> Anyone know how often raku.land and modules.raku.org update?

[07:28] <tellable6> 2021-06-05T17:13:48Z #raku <holly> japhb : thanks, I joined :-)

[07:29] <japhb> After uploading to fez and doing `zef update`, my uploads are visible via `zef info` pretty quickly, but it's not clear what the expected delay is for the websites.

[08:22] <raydiak> if the readme is still accurate, an update is started on the 20th and 50th minutes of every hour. the last 2 update logs seemed to coroborate this. the most recent update took about 22 minutes and completed at 8:12 UTC (10 minutes ago)

[08:23] <raydiak> that's for modules.raku.org

[08:31] <raydiak> I don't pay much attention to raku.land because it doesn't index version * modules (all of my modules). but according to https://gitlab.com/raku-land/raku-land/-/jobs it runs every 3 hours, about 5ish minutes after the start of hours which are integer multiples of 3, and takes less than 3 minutes to complete

[09:08] <japhb> Thank you, raydiak.  Seems like raku.land could probably update a lot more often (as often as modules.raku.org, for instance).

[09:15] <raydiak> happy to help. maybe it's a restriction of gitlab...looks like free accounts only get 400 ci/cd minutes per month. by those numbers it's already exceeding that, so JRaspass++ is already being forced into paying for it, and maybe spending his minutes on other projects as well

[09:20] <Geth> Â¦ problem-solving: JJ assigned to codesections Issue There should be a (relatively easy) way to specify how to test for non-Raku dependencies https://github.com/Raku/problem-solving/issues/283

[09:27] <nine> raydiak: why don't you give your modules proper versions?

[09:35] <japhb> raydiak: Ooof, yeah, having to pay extra would hurt.

[09:40] <raydiak> nine: a few reasons, basically all just a mix of historical baggage, stubborn opinionatedness, laziness, and indecision. they were all written at a time when that was a more common and accepted practice, didn't matter to the ecosystem or old tools. none of them were ever really done enough to be considered even in beta, so I regarded versioning as largely pointless. my work on them moved in highly variable

[09:40] <raydiak> patterns that didn't necessarily lend themselves well to clear separation between one version and the next. I don't like the maintenance aspect of having to update the number or complicate my process with some tool to handle it for me. I don't like the muddling of api version and version version we have now. and at this point I haven't decided whether I'm going to develop them, maintain them, or abandon

[09:40] <raydiak> them

[09:41] <raydiak> understand, I don't regard most of that as valid and reasonable decision-making process. it's just the truth

[11:43] *** committable6 left
[11:43] *** nativecallable6 left
[11:43] *** benchable6 left
[11:43] *** releasable6 left
[11:43] *** unicodable6 left
[11:43] *** coverable6 left
[11:43] *** evalable6 left
[11:43] *** greppable6 left
[11:43] *** sourceable6 left
[11:43] *** notable6 left
[11:43] *** linkable6 left
[11:43] *** reportable6 left
[11:43] *** bloatable6 left
[11:43] *** statisfiable6 left
[11:43] *** tellable6 left
[11:43] *** bisectable6 left
[11:43] *** quotable6 left
[11:43] *** shareable6 left
[11:43] *** squashable6 left
[11:44] *** linkable6 joined
[11:44] *** shareable6 joined
[11:44] *** releasable6 joined
[11:44] *** squashable6 joined
[11:44] *** sourceable6 joined
[11:45] *** bisectable6 joined
[11:45] *** benchable6 joined
[11:45] *** nativecallable6 joined
[11:45] *** reportable6 joined
[11:45] *** bloatable6 joined
[11:45] *** notable6 joined
[11:45] *** greppable6 joined
[11:45] *** evalable6 joined
[11:45] *** quotable6 joined
[11:46] *** tellable6 joined
[11:46] *** unicodable6 joined
[11:46] *** coverable6 joined
[11:46] *** committable6 joined
[11:47] *** statisfiable6 joined
[12:02] *** reportable6 left
[12:06] *** reportable6 joined
[13:40] *** MasterDuke joined
[13:50] *** squashable6 left
[13:51] *** squashable6 joined
[17:28] *** lizmat left
[17:29] *** lizmat_ is now known as lizmar

[17:29] *** lizmar is now known as lizmat

[17:29] *** lizmat left
[17:29] *** lizmat joined
[18:02] *** reportable6 left
[18:05] *** reportable6 joined
[18:08] *** notna joined
[19:07] *** notna left
[19:56] *** Xliff joined
[19:56] *** dogbert11 joined
[19:56] <Xliff> I'm trying to learn some of RakuAST. Can anyone involved tell me where the best place is to look for all nodes involved in method creation?

[19:56] <Xliff> Thanks.

[19:59] *** dogbert17 left
[20:44] <raydiak> looks like method nodes are defined in https://github.com/rakudo/rakudo/blob/rakuast/src/Raku/ast/code.rakumod

[21:01] <MasterDuke> Xliff: you might be interested in https://github.com/rakudo/rakudo/tree/speed_up_native_call_setup and https://github.com/MoarVM/MoarVM/tree/set_sc_idx_during_deserialization

[21:01] <MasterDuke> not related to rakuast, but for nativecall compilation speedups

[21:47] <Xliff> Masterduke++ # Thanks!\

[22:21] <Xliff> https://gist.github.com/Xliff/edd9b31e11a887b9d3ded6a5c4b76cbf

[22:22] <Xliff> ^^ jnthn timotimo lizmat

[22:23] <japhb> It looks like there are some bugs in there.  Freehanded?

[22:28] <japhb> Also, I think it's just 'timo' here on Libera.Chat

[22:53] <raydiak> some bugs? either I'm really confused about what I'm reading in rakuast, or the whole thing is imagined...maybe intended as pseudocode or something?

[22:55] <Xliff> japhb: Yeah, freehanded pseudocode. 

[22:55] <Xliff> Bugs? Pleae eludiate.

[22:57] <Xliff> Wording updated for clarity. # (

[23:00] <Xliff> (radiak, japhb)Â».++

[23:00] <Xliff> # (No that is not valid...)

[23:00] <raydiak> by bugs I think he just meant it won't run. but if you intended it as pseudocode, that explains it. from my understanding, that's somewhat like what it'll look like, yes. just the node names are mostly different and arranged a little differently in places, constructor parameters are named instead of positional unless there's only one of them, stuff like that. but you do have the general idea in a very

[23:00] <raydiak> high-level sense, yes

[23:01] <Xliff> Thanks!

[23:01] <Xliff> I just don't know where to find the actual nodes in the source to get everything correct. 

[23:01] <raydiak> you're welcome

[23:02] <raydiak> I don't think there's a document listing them yet, but theyu're all defined in https://github.com/rakudo/rakudo/tree/rakuast/src/Raku/ast

[23:02] <Xliff> Yeah, but I have no idea where to start. I think I'll look into the tests, for now,.

[23:05] <raydiak> it's not too hard to read. methods and subs and blocks and such are in code.rakumod, variable decls are in variable-declaration, variable access in variable-access, method/sub calls are in call, etc. reading the tests is a good idea, I haven't even looked at those yet

[23:05] <Xliff> Thanks for that!

[23:06] <raydiak> sure thing, yw

